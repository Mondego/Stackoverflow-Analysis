<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>3668737</id><snippet>self</snippet></ROW><ROW><id>3668737</id><snippet>this</snippet></ROW><ROW><id>3668737</id><snippet>    @staticmethod
    def connectAndDisconnect(func):
        # deco will be a method, so it needs self (ie a DA_Row instance)
        def deco(self, *args):
            returnValue = None
            self.DBconnect()
            try:
                self.__cursor = self.db.cursor()
                # func was supposed to be a method to, so it needs self
                returnValue = func(self, *args)
            finally:
                self.desconectarDB()

            return returnValue
        return deco
</snippet></ROW><ROW><id>3669077</id><snippet>str.istitle</snippet></ROW><ROW><id>3669077</id><snippet>&gt;&gt;&gt; help(str.istitle)
Help on method_descriptor:

istitle(...)
    S.istitle() -&gt; bool

    Return True if S is a titlecased string and there is at least one
    character in S, i.e. uppercase characters may only follow uncased
    characters and lowercase characters only cased ones. Return False
    otherwise.

&gt;&gt;&gt; "Alpha_beta_Gamma".istitle()
False
&gt;&gt;&gt; "Alpha_Beta_Gamma".istitle()
True
&gt;&gt;&gt; "Alpha_Beta_GAmma".istitle()
False
</snippet></ROW><ROW><id>3669555</id><snippet>unicode</snippet></ROW><ROW><id>3669555</id><snippet>theobject.encode('utf8')</snippet></ROW><ROW><id>3669555</id><snippet>str</snippet></ROW><ROW><id>3669555</id><snippet>unicode</snippet></ROW><ROW><id>3669555</id><snippet>def ensureutf8(s):
    if isinstance(s, unicode):
        s = s.encode('utf8')
    return s
</snippet></ROW><ROW><id>3669555</id><snippet>repr</snippet></ROW><ROW><id>3669555</id><snippet>print</snippet></ROW><ROW><id>3669712</id><snippet>locals</snippet></ROW><ROW><id>3669712</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; locals()['a']
1

&gt;&gt;&gt; a = 1; b = 2; c = 3
&gt;&gt;&gt; [locals()[x] for x in ('a','b','c')]
[1, 2, 3]
</snippet></ROW><ROW><id>3669737</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; dt = parser.parse('1.5 hours') # returns `datetime` object
&gt;&gt;&gt; t = dt.time()
&gt;&gt;&gt; t
datetime.time(1, 30)
</snippet></ROW><ROW><id>3670071</id><snippet>def fetch_quote(symbols):
    url = URL % '+'.join(symbols)
    fp = urllib.urlopen(url)
    try:
        data = fp.read()
    finally:
        fp.close()
    return data

def main():
    for symbol in symbols:
        data_fp = fetch_quote((symbol,))
        print data_fp

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3670071</id><snippet>import urllib
from multiprocessing import Pool

URL = "http://download.finance.yahoo.com/d/quotes.csv?s=%s&amp;f=sl1t1v&amp;e=.csv"
symbols = ('GGP', 'JPM', 'AIG', 'AMZN','GGP', 'JPM', 'AIG', 'AMZN')

def fetch_quote(symbols):
    url = URL % '+'.join(symbols)
    fp = urllib.urlopen(url)
    try:
        data = fp.read()
    finally:
        fp.close()
    return data

def main():
    for symbol in symbols:
        data_fp = fetch_quote((symbol,))
        print data_fp

if __name__ =='__main__':
    pool = Pool(processes=5)
    for symbol in symbols:
        result = pool.apply_async(fetch_quote, [(symbol,)])
        print result.get(timeout=1)
</snippet></ROW><ROW><id>3670080</id><snippet>print ' '.join(letter for letter, count in hand.iteritems() for i in range(count))
</snippet></ROW><ROW><id>3670080</id><snippet>&gt;&gt;&gt; hand
{'h': 3, 'b': 1, 'e': 2}
</snippet></ROW><ROW><id>3670080</id><snippet>&gt;&gt;&gt; list(hand.iteritems())
[('h', 3), ('b', 1), ('e', 2)]
</snippet></ROW><ROW><id>3670080</id><snippet>&gt;&gt;&gt; [letter for letter, count in hand.iteritems()]
['h', 'b', 'e']
</snippet></ROW><ROW><id>3670080</id><snippet>count</snippet></ROW><ROW><id>3670080</id><snippet>&gt;&gt;&gt; [letter for letter, count in hand.iteritems() for i in range(count)]
['h', 'h', 'h', 'b', 'e', 'e']
</snippet></ROW><ROW><id>3670080</id><snippet>str.join</snippet></ROW><ROW><id>3670080</id><snippet>&gt;&gt;&gt; ' '.join(letter for letter, count in hand.iteritems() for i in range(count))
'h h h b e e'
</snippet></ROW><ROW><id>3670470</id><snippet>-u</snippet></ROW><ROW><id>3670470</id><snippet>-u     : unbuffered binary stdout and stderr (also PYTHONUNBUFFERED=x)
         see man page for details on internal buffering relating to '-u'
</snippet></ROW><ROW><id>3670470</id><snippet>   -u     Force stdin, stdout and stderr to  be  totally  unbuffered.   On
          systems  where  it matters, also put stdin, stdout and stderr in
          binary mode.  Note that there is internal  buffering  in  xread-
          lines(),  readlines()  and  file-object  iterators ("for line in
          sys.stdin") which is not influenced by  this  option.   To  work
          around  this, you will want to use "sys.stdin.readline()" inside
          a "while 1:" loop.
</snippet></ROW><ROW><id>3670470</id><snippet>import os
import sys
newin = os.fdopen(sys.stdin.fileno(), 'r', 100)
</snippet></ROW><ROW><id>3670470</id><snippet>newin</snippet></ROW><ROW><id>3670470</id><snippet>sys.stdin = newin</snippet></ROW><ROW><id>3670470</id><snippet>-u</snippet></ROW><ROW><id>3670672</id><snippet>workaround = cgi.FieldStorage()
</snippet></ROW><ROW><id>3670715</id><snippet>&gt;&gt; import ntpath      
&gt;&gt; ntpath.split("c:\windows\i\love\you.txt")
('c:\\windows\\i\\love', 'you.txt')
&gt;&gt; ntpath.splitext("c:\windows\i\love\you.txt")
('c:\\windows\\i\\love\\you', '.txt')
&gt;&gt; ntpath.basename("c:\windows\i\love\you.txt")
'you.txt'
</snippet></ROW><ROW><id>3670759</id><snippet>my_nosetests.py</snippet></ROW><ROW><id>3670759</id><snippet>import nose
from nose.plugins.base import Plugin

class ExtensionPlugin(Plugin):

    name = "ExtensionPlugin"

    def options(self, parser, env):
        Plugin.options(self,parser,env)

    def configure(self, options, config):
        Plugin.configure(self, options, config)
        self.enabled = True

    def wantFile(self, file):
        return file.endswith('.py')

    def wantDirectory(self,directory):
        return True

    def wantModule(self,file):
        return True


if __name__ == '__main__':
    includeDirs = ["-w", ".", ".."]
    nose.main(addplugins=[ExtensionPlugin()], argv=sys.argv.extend(includeDirs))
</snippet></ROW><ROW><id>3670759</id><snippet>my_nosetests.py</snippet></ROW><ROW><id>3670759</id><snippet>nosetests</snippet></ROW><ROW><id>3670824</id><snippet>try</snippet></ROW><ROW><id>3670824</id><snippet>try:
    x = bytearray.fromhex(some_str)
except TypeError:
    # Work-around for Python 2.6 bug 
    x = bytearray.fromhex(unicode(some_str))
</snippet></ROW><ROW><id>3670994</id><snippet>IN</snippet></ROW><ROW><id>3670994</id><snippet>SELECT * FROM Table WHERE id IN (x, y, z, ...)
</snippet></ROW><ROW><id>3670994</id><snippet>sql = "select * from Table where id in (%s)" % (', '.join(str(id) for id in longIdList))
</snippet></ROW><ROW><id>3671533</id><snippet>cx_Freeze</snippet></ROW><ROW><id>3671640</id><snippet>foo = ["something"]</snippet></ROW><ROW><id>3671640</id><snippet>foo = ("somthing")</snippet></ROW><ROW><id>3671640</id><snippet>foo = ("something",)</snippet></ROW><ROW><id>3671906</id><snippet>export</snippet></ROW><ROW><id>3671906</id><snippet>export PYTHONPATH=/path/to/library
export library_HOME=/path/to/library_HOME
etc.
</snippet></ROW><ROW><id>3672083</id><snippet>site-packages</snippet></ROW><ROW><id>3672083</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>3672083</id><snippet>zip -r</snippet></ROW><ROW><id>3672083</id><snippet>cp -R</snippet></ROW><ROW><id>3672083</id><snippet>zip -r</snippet></ROW><ROW><id>3672254</id><snippet>class createdbentry(forms.ModelForm):

    choices = ( (1,'Yes'),
                (0,'No'),
              )

    class Meta:
        model = Mymodelname

    def __init__(self, *args, **kwargs):
        super(createdbentry, self).__init__(*args, **kwargs)

        BinaryFieldsList = ['FirstFieldName', 'SecondFieldName', 'ThirdFieldName']
        for field in BinaryFieldsList:
            self.fields[field].widget = forms.RadioSelect(choices=choices)
</snippet></ROW><ROW><id>3672365</id><snippet> def onButton(self, event):
    label = event.GetEventObject().GetLabel()
    if label == "foo":
         ...
    elif label == "bar":
         ....
</snippet></ROW><ROW><id>3672470</id><snippet>r=zip(*Lt)[0]
print Lt
</snippet></ROW><ROW><id>3672619</id><snippet>def hints(before=None, after=None, around=None):
    """A decorator that implements function hints to be run before, after or
    around another function, sort of like in the CLOS."""

    # Make sure all of our hints are callable
    default = lambda *args, **kwargs: None
    before = before if callable(before) else default
    after = after if callable(after) else default
    around = around if callable(around) else default

    # The actual decorator function.  The "real" function to be called will be
    # pased to this as `fn`
    def decorator(fn):

        # The decorated function.  This is where the work is done.  The before
        # and around functions are called, then the "real" function is called
        # and its results are stored, then the around and after functions are
        # called.
        def decorated(*args, **kwargs):
            around(*args, **kwargs)
            before(*args, **kwargs)
            result = fn(*args, **kwargs)
            after(*args, **kwargs)
            around(*args, **kwargs)
            return result
        return decorated
    return decorator

# Shortcuts for defining just one kind of hint
def before(hint):
    return hints(before=hint)

def after(hint):
    return hints(after=hint)

def around(hint):
    return hints(around=hint)


# The actual functions to run before, after, around
def beforefn():
    print 'before'

def afterfn():
    print 'after'

def aroundfn():
    print 'around'


# The function around which the other functions should run
@before(beforefn)
@after(afterfn)
@around(aroundfn)
def fn():
    print 'Hello World!'

# Or use the single @hints decorator
@hints(before=beforefn, after=afterfn, around=aroundfn)
def fn2():
    print 'Goodbye World!'
</snippet></ROW><ROW><id>3672619</id><snippet>fn()</snippet></ROW><ROW><id>3672619</id><snippet>&gt;&gt;&gt; fn()
around
before
Hello World!
after
around
&gt;&gt;&gt; fn2()
around
before
Goodbye World!
after
around
</snippet></ROW><ROW><id>3672635</id><snippet>from __future__ import print_function

import asyncore
import collections
import logging
import socket


MAX_MESSAGE_LENGTH = 1024


class RemoteClient(asyncore.dispatcher):

    """Wraps a remote client socket."""

    def __init__(self, host, socket, address):
        asyncore.dispatcher.__init__(self, socket)
        self.host = host
        self.outbox = collections.deque()

    def say(self, message):
        self.outbox.append(message)

    def handle_read(self):
        client_message = self.recv(MAX_MESSAGE_LENGTH)
        self.host.broadcast(client_message)

    def handle_write(self):
        if not self.outbox:
            return
        message = self.outbox.popleft()
        if len(message) &gt; MAX_MESSAGE_LENGTH:
            raise ValueError('Message too long')
        self.send(message)


class Host(asyncore.dispatcher):

    log = logging.getLogger('Host')

    def __init__(self, address=('localhost', 0)):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.bind(address)
        self.listen(1)
        self.remote_clients = []

    def handle_accept(self):
        socket, addr = self.accept() # For the remote client.
        self.log.info('Accepted client at %s', addr)
        self.remote_clients.append(RemoteClient(self, socket, addr))

    def handle_read(self):
        self.log.info('Received message: %s', self.read())

    def broadcast(self, message):
        self.log.info('Broadcasting message: %s', message)
        for remote_client in self.remote_clients:
            remote_client.say(message)


class Client(asyncore.dispatcher):

    def __init__(self, host_address, name):
        asyncore.dispatcher.__init__(self)
        self.log = logging.getLogger('Client (%7s)' % name)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.name = name
        self.log.info('Connecting to host at %s', host_address)
        self.connect(host_address)
        self.outbox = collections.deque()

    def say(self, message):
        self.outbox.append(message)
        self.log.info('Enqueued message: %s', message)

    def handle_write(self):
        if not self.outbox:
            return
        message = self.outbox.popleft()
        if len(message) &gt; MAX_MESSAGE_LENGTH:
            raise ValueError('Message too long')
        self.send(message)

    def handle_read(self):
        message = self.recv(MAX_MESSAGE_LENGTH)
        self.log.info('Received message: %s', message)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logging.info('Creating host')
    host = Host()
    logging.info('Creating clients')
    alice = Client(host.getsockname(), 'Alice')
    bob = Client(host.getsockname(), 'Bob')
    alice.say('Hello, everybody!')
    logging.info('Looping')
    asyncore.loop()
</snippet></ROW><ROW><id>3672635</id><snippet>INFO:root:Creating host
INFO:root:Creating clients
INFO:Client (  Alice):Connecting to host at ('127.0.0.1', 51117)
INFO:Client (    Bob):Connecting to host at ('127.0.0.1', 51117)
INFO:Client (  Alice):Enqueued message: Hello, everybody!
INFO:root:Looping
INFO:Host:Accepted client at ('127.0.0.1', 55628)
INFO:Host:Accepted client at ('127.0.0.1', 55629)
INFO:Host:Broadcasting message: Hello, everybody!
INFO:Client (  Alice):Received message: Hello, everybody!
INFO:Client (    Bob):Received message: Hello, everybody!
</snippet></ROW><ROW><id>3672709</id><snippet>def myFunc(x, y):
    for i in range(*sorted((x, y))):
        ...
</snippet></ROW><ROW><id>3672709</id><snippet>def myFunc(x, y):
    for i in range(x,y) if x&lt;y else range(y,x):
        ...
</snippet></ROW><ROW><id>3672709</id><snippet>def f1(x, y):
    for i in range(min(x, y), max(x, y)):
        pass

def f2(x, y):
    for i in range(*sorted((x, y))):
        pass

def f3(x, y):
    for i in range(x, y) if x&lt;y else range(y, x):
        pass

def f4(x, y):
    if x&gt;y:
        x,y = y,x
    for i in range(x, y):
        pass

def f5(x, y):
    mn,mx = ((x, y), (y, x))[x&gt;y]
    for i in range(x,y):
        pass
</snippet></ROW><ROW><id>3672709</id><snippet>$ python -m timeit -s"import minmax as mm" "mm.f1(1,2)"
1000000 loops, best of 3: 1.93 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f2(1,2)"
100000 loops, best of 3: 2.4 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f3(1,2)"
1000000 loops, best of 3: 1.16 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f4(1,2)"
100000 loops, best of 3: 1.2 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f5(1,2)"
1000000 loops, best of 3: 1.58 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f1(2,1)"
100000 loops, best of 3: 1.88 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f2(2,1)"
100000 loops, best of 3: 2.39 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f3(2,1)"
1000000 loops, best of 3: 1.18 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f4(2,1)"
1000000 loops, best of 3: 1.25 usec per loop
$ python -m timeit -s"import minmax as mm" "mm.f5(2,1)"
1000000 loops, best of 3: 1.44 usec per loop
</snippet></ROW><ROW><id>3672932</id><snippet>#! /usr/bin/env python
import sys
locals = dict()
for line in sys.stdin:
    saved = locals.copy()
    stmt = compile(line, '&lt;stdin&gt;', 'single')
    eval(stmt, None, locals)
    print line.strip(),
    for (k,v) in locals.iteritems():
        if k not in saved:
            print '=', v,
    print
</snippet></ROW><ROW><id>3673002</id><snippet>cleaned_data</snippet></ROW><ROW><id>3673002</id><snippet>is_valid()</snippet></ROW><ROW><id>3673002</id><snippet>def table_view(request):
    if request.method == 'POST':
        form = MonthForm(request.POST)
        if form.is_valid():
            print form.cleaned_data['month']
</snippet></ROW><ROW><id>3673002</id><snippet>cleaned_data</snippet></ROW><ROW><id>3673002</id><snippet>forms/forms.py</snippet></ROW><ROW><id>3673002</id><snippet>if self._errors:
    delattr(self, 'cleaned_data')
</snippet></ROW><ROW><id>3673253</id><snippet>from collections import Counter

string = "hello world"
print ''.join(char[0] for char in Counter(string).most_common())
</snippet></ROW><ROW><id>3673345</id><snippet>all(iterable)</snippet></ROW><ROW><id>3673345</id><snippet>True</snippet></ROW><ROW><id>3673345</id><snippet>any(iterable)</snippet></ROW><ROW><id>3673345</id><snippet>True</snippet></ROW><ROW><id>3673345</id><snippet>False</snippet></ROW><ROW><id>3673584</id><snippet>PyQt4.Qt.SIGNAL
</snippet></ROW><ROW><id>3673584</id><snippet>PyQt4.QtCore.SIGNAL
</snippet></ROW><ROW><id>3673644</id><snippet>from pyparsing import Word, nums, oneOf, Group, OneOrMore, Regex, Optional

integer = Word(nums)
level = "Lv." + integer("Level")
dps = "DPS:" + integer("DPS")
type_ = oneOf("Tank Infantry Artillery")("Type")
traits = Group(OneOrMore(oneOf("All-Terrain Armored Anti-Aircraft Motorized")))("Traits")
flavortext = Regex(r".*\.$")("FlavorText")

rule = (Optional(level) &amp; Optional(dps) &amp; Optional(type_) &amp; 
        Optional(traits) &amp; Optional(flavortext))
</snippet></ROW><ROW><id>3673644</id><snippet>rule</snippet></ROW><ROW><id>3673644</id><snippet>data = "Lv. 5 Tank DPS: 55 Motorized Armored"

parsed_data = rule.parseString(data)
print parsed_data.dump()
print parsed_data.DPS
print parsed_data.Type
print ' '.join(parsed_data.Traits)
</snippet></ROW><ROW><id>3673644</id><snippet>['Lv.', '5', 'Tank', 'DPS:', '55', ['Motorized', 'Armored']]
- DPS: 55
- Level: 5
- Traits: ['Motorized', 'Armored']
- Type: Tank
55
Tank
Motorized Armored
</snippet></ROW><ROW><id>3673741</id><snippet>if __name__ == __main__</snippet></ROW><ROW><id>3673741</id><snippet>class MyApp(gtk.Window):

    def __init__(self, parser, ui):
        gtk.Window.__init__(self)
        parser.connect("some-signal", ui.update_this)
        parser.connect("some-other-signal", ui.update_that, extra_params)
        ui.connect("refresh-clicked", parser.reparse_file)
        self.add(ui)
</snippet></ROW><ROW><id>3673741</id><snippet>parser = parser.Parser(...)
ui = view.ParseView(...)
app = MyApp(parser, ui)

app.show_all()

gtk.main()
</snippet></ROW><ROW><id>3673741</id><snippet>parser = parser.DummyParser(...)
</snippet></ROW><ROW><id>3673748</id><snippet>jeff@DeepThought:~$ source ~/ENV/bin/activate
(ENV)jeff@DeepThought:~$ 
</snippet></ROW><ROW><id>3673748</id><snippet>(ENV)jeff@DeepThought:~$ python
Python 2.7 (r27:82500, Sep  8 2010, 20:09:26) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3673748</id><snippet>(ENV)jeff@DeepThought:~$ which python
/home/jeff/ENV/bin/python
(ENV)jeff@DeepThought:~$ which python2.6
/usr/bin/python2.6
</snippet></ROW><ROW><id>3673748</id><snippet>jeff@DeepThought:~$ echo $PATH
/home/jeff/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
jeff@DeepThought:~$ cat &gt; /home/jeff/bin/hello.sh
#!/bin/bash
echo "hello world"
jeff@DeepThought:~$ chmod +x ~/bin/hello.sh 
jeff@DeepThought:~$ hello.sh
hello world
jeff@DeepThought:~$ which hello.sh
/home/jeff/bin/hello.sh
jeff@DeepThought:~$ alias hello.sh=/usr/bin/python
jeff@DeepThought:~$ which hello.sh
/home/jeff/bin/hello.sh
jeff@DeepThought:~$ hello.sh
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3673875</id><snippet>clean_field</snippet></ROW><ROW><id>3673875</id><snippet>int</snippet></ROW><ROW><id>3673875</id><snippet>clean_field</snippet></ROW><ROW><id>3673875</id><snippet>TypedChoiceField</snippet></ROW><ROW><id>3673876</id><snippet>Account</snippet></ROW><ROW><id>3673876</id><snippet>_Account</snippet></ROW><ROW><id>3673876</id><snippet>def make_account(key_name=None, **k):
    if key_name is None:
        raise ValueError('Must specify key_name for account!')
    return _Account(key_name=key_name, **k)
</snippet></ROW><ROW><id>3673876</id><snippet>classmethod</snippet></ROW><ROW><id>3673876</id><snippet>Account</snippet></ROW><ROW><id>3673876</id><snippet>__init__</snippet></ROW><ROW><id>3674454</id><snippet>http</snippet></ROW><ROW><id>3674454</id><snippet>ars.userfriendly.org</snippet></ROW><ROW><id>3674454</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>3674454</id><snippet>||</snippet></ROW><ROW><id>3674454</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>3674454</id><snippet>(?&lt;!\b(?:ftp|http|mailto)\S+)([^\\|&amp;/=()"'\w\s])(?:\s*\1)+
</snippet></ROW><ROW><id>3674454</id><snippet>ftp</snippet></ROW><ROW><id>3674454</id><snippet>http</snippet></ROW><ROW><id>3674454</id><snippet>mailto</snippet></ROW><ROW><id>3674454</id><snippet>result = re.sub(
    r"""(?ix) # case-insensitive, verbose regex

    # Either match a URL 
    # (protocol optional (if so, URL needs to start with www or ftp))
    (?P&lt;URL&gt;\b(?:(?:https?|ftp|file)://|www\.|ftp\.)[-A-Z0-9+&amp;@#/%=~_|$?!:,.]*[A-Z0-9+&amp;@#/%=~_|$])

    # or
    |

    # match repeated non-word characters
    (?P&lt;rpt&gt;[^\s\w])(?:\s{0,100}(?P=rpt))+""", 

    # and replace with both captured groups (one will always be empty)
    r"\g&lt;URL&gt;\g&lt;rpt&gt;", subject)
</snippet></ROW><ROW><id>3674454</id><snippet>(?:\s*(?P=rpt))+</snippet></ROW><ROW><id>3674454</id><snippet>+</snippet></ROW><ROW><id>3674454</id><snippet>(.)(\s*\1)+</snippet></ROW><ROW><id>3674454</id><snippet>(.)(\s?\1)+</snippet></ROW><ROW><id>3674454</id><snippet>*</snippet></ROW><ROW><id>3674454</id><snippet>{0,100}</snippet></ROW><ROW><id>3674983</id><snippet>Pool</snippet></ROW><ROW><id>3674983</id><snippet>if</snippet></ROW><ROW><id>3675153</id><snippet>color</snippet></ROW><ROW><id>3675153</id><snippet>class A(object):
    name = 7
    description = 8
    color = 9

class Hider(object):
    def __get__(self,instance,owner):
        raise AttributeError, "Hidden attrbute"

    def __set__(self, obj, val):
        raise AttributeError, "Hidden attribute"

class B(A):
    color = Hider()
</snippet></ROW><ROW><id>3675153</id><snippet>AttributeError</snippet></ROW><ROW><id>3675153</id><snippet>color</snippet></ROW><ROW><id>3675153</id><snippet>&gt;&gt;&gt; B.color
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __get__
AttributeError: Hidden attrbute
&gt;&gt;&gt; instance = B()
&gt;&gt;&gt; instance.color
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __get__
AttributeError: Hidden attrbute
&gt;&gt;&gt; instance.color = 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in __set__
AttributeError: Hidden attribute
</snippet></ROW><ROW><id>3675187</id><snippet>from Tkinter import *

class MyObj:
    def callback(self, event):
        print event.widget.message

obj = MyObj()
root = Tk()
btn=Button(root, text="Click")
btn.bind('&lt;Button-1&gt;', obj.callback)
btn.pack()
btn.message = 'Hello'

btn2=Button(root, text="Click too")
btn2.bind('&lt;Button-1&gt;', obj.callback)
btn2.message = 'Salut'
btn2.pack()

root.mainloop()
</snippet></ROW><ROW><id>3675423</id><snippet>rpartition</snippet></ROW><ROW><id>3675423</id><snippet>Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
</snippet></ROW><ROW><id>3675423</id><snippet>rpartition</snippet></ROW><ROW><id>3675423</id><snippet>def replace_last(source_string, replace_what, replace_with):
    head, sep, tail = source_string.rpartition(replace_what)
    return head + replace_with + tail

s = "123123"
r = replace_last(s, '2', 'x')
print r
</snippet></ROW><ROW><id>3675423</id><snippet>1231x3
</snippet></ROW><ROW><id>3675427</id><snippet>(\s*)+</snippet></ROW><ROW><id>3675427</id><snippet>&gt;&gt;&gt; re.compile(r"(\s*)+")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 180, in compile
    return _compile(pattern, flags)
  File "/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.py", line 233, in _compile
    raise error, v # invalid expression
sre_constants.error: nothing to repeat
</snippet></ROW><ROW><id>3675427</id><snippet>(\s*\1)</snippet></ROW><ROW><id>3675662</id><snippet>Libraries</snippet></ROW><ROW><id>3675662</id><snippet>Window &gt; Preferences &gt; PyDev &gt; Interpreter - Python &gt; Libraries</snippet></ROW><ROW><id>3675662</id><snippet>.egg</snippet></ROW><ROW><id>3675662</id><snippet>Apply</snippet></ROW><ROW><id>3675662</id><snippet>OK</snippet></ROW><ROW><id>3675812</id><snippet>python.exe -v SConstruct</snippet></ROW><ROW><id>3675812</id><snippet>print mymodule.__file__</snippet></ROW><ROW><id>3675812</id><snippet>print mymodule.foo()</snippet></ROW><ROW><id>3675815</id><snippet>import sys
sys.stdout = open("mylog.txt", "w")
</snippet></ROW><ROW><id>3675898</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; fh = StringIO.StringIO()
&gt;&gt;&gt; f.send_flowing_data(s)
&gt;&gt;&gt; print(fh.getvalue())
When running behind a load balancer like nginx, it is recommended to
pass xheaders=True to the HTTPServer constructor. This will tell Tornado
to use headers like X-Real-IP to get the user's IP address instead of
attributing all traffic to the balancer's IP address.
&gt;&gt;&gt; fh.close()
</snippet></ROW><ROW><id>3676544</id><snippet>from itertools import groupby
from Bio       import SeqIO

records = list(SeqIO.parse(file('spoo.fa'),'fasta'))

def seq_getter(s): return str(s.seq)
records.sort(key=seq_getter)

for seq,equal in groupby(records, seq_getter):
  ids = ','.join(s.id for s in equal)
  print '&gt;%s' % ids
  print seq
</snippet></ROW><ROW><id>3676544</id><snippet>&gt;3
GTCGTCGAAAGAGGCTT-GCCCGCCACGCGCCCGCTGATA
&gt;4
GTCGTCGAAAGAGGCTT-GCCCGCTACGCGCCCCCTGATA
&gt;2,5
GTCGTCGAAAGAGGTCT-GACCGCTTCGCGCCCGCTGGTA
&gt;7
GTCGTCGAAAGAGGTCT-GACCGCTTCTCGCCCGCTGATA
&gt;6
GTCGTCGAAAGAGTCTGACCGCTTCTCGCCCGCTGATACG
&gt;1
GTCGTCGAAGCATGCCGGGCCCGCTTCGTGTTCGCTGATA
</snippet></ROW><ROW><id>3676991</id><snippet>izip</snippet></ROW><ROW><id>3676991</id><snippet>numpy</snippet></ROW><ROW><id>3676991</id><snippet># zip
&gt;&gt;&gt; timeit.timeit( "newlist = zip(*someList)[0]", setup = "someList = [range(1000000), range(1000000), range(1000000)]", number = 10 )
1.4984046398561759

# izip
&gt;&gt;&gt; timeit.timeit( "newlist = izip(*someList).next()", setup = "someList = range(1000000), range(1000000), range(1000000)]; from itertools import izip", number = 10 )
2.2186223645803693e-05

# list comprehension
&gt;&gt;&gt; timeit.timeit( "newlist = [li[0] for li in someList]", setup = "someList = [range(1000000), range(1000000), range(1000000)]", number = 10 )
1.4677040212518477e-05

# numpy
&gt;&gt;&gt; timeit.timeit( "newlist = someList[0,:]", setup = "import numpy as np; someList = np.array([range(1000000), range(1000000), range(1000000)])", number = 10 )
6.6217344397045963e-05
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3676991</id><snippet>numpy</snippet></ROW><ROW><id>3676991</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; foo = np.array([[0,1,2],[3,4,5],[6,7,8]])
&gt;&gt;&gt; foo[:,0]
array([0, 3, 6])
</snippet></ROW><ROW><id>3676991</id><snippet>&gt;&gt;&gt; foo.transpose()
array([[0, 3, 6],
       [1, 4, 7],
       [2, 5, 8]])
</snippet></ROW><ROW><id>3676991</id><snippet>&gt;&gt;&gt; foo = np.zeros((3,3,3))
&gt;&gt;&gt; foo
array([[[ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  0.,  0.]],

       [[ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  0.,  0.]],

       [[ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  0.,  0.]]])
&gt;&gt;&gt; foo[0,...]
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
</snippet></ROW><ROW><id>3676991</id><snippet>&gt;&gt;&gt; foo = no.ones((3,3))
&gt;&gt;&gt; np.linalg.qr(foo)
(array([[-0.57735027,  0.81649658,  0.        ],
       [-0.57735027, -0.40824829, -0.70710678],
       [-0.57735027, -0.40824829,  0.70710678]]), array([[ -1.73205081e+00,  -1.
73205081e+00,  -1.73205081e+00],
       [  0.00000000e+00,  -1.57009246e-16,  -1.57009246e-16],
       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]))
</snippet></ROW><ROW><id>3677241</id><snippet>&gt;&gt;&gt; u'\\u4f60\\u4f60'.decode('unicode_escape')
u'\u4f60\u4f60'
</snippet></ROW><ROW><id>3677283</id><snippet>numpy.random.shuffle</snippet></ROW><ROW><id>3677283</id><snippet>numpy.random.permutation</snippet></ROW><ROW><id>3677283</id><snippet>import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
numpy.random.shuffle(x)
training, test = x[:80,:], x[80:,:]
</snippet></ROW><ROW><id>3677283</id><snippet>import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
indices = numpy.random.permutation(x.shape[0])
training_idx, test_idx = indices[:80], indices[80:]
training, test = x[training_idx,:], x[test_idx,:]
</snippet></ROW><ROW><id>3677283</id><snippet>import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
training_idx = numpy.random.randint(x.shape[0], size=80)
test_idx = numpy.random.randint(x.shape[0], size=20)
training, test = x[training_idx,:], x[test_idx,:]
</snippet></ROW><ROW><id>3677344</id><snippet>import re
# read the book into a variable 'text'
matches = re.findall(r'\w+ is for \w+ \w+ing his \w+', text)
</snippet></ROW><ROW><id>3677701</id><snippet>_current_session</snippet></ROW><ROW><id>3677701</id><snippet>def __call__(self, environ, start_response):
        # initialize a session for the current user
        global _current_session
        _current_session = Session(lifetime=self.lifetime, no_datastore=self.no_datastore, cookie_only_threshold=self.cookie_only_thresh, cookie_key=self.cookie_key)
</snippet></ROW><ROW><id>3677778</id><snippet>curses</snippet></ROW><ROW><id>3678171</id><snippet>set()</snippet></ROW><ROW><id>3678171</id><snippet>for</snippet></ROW><ROW><id>3678306</id><snippet>'django.middleware.csrf.CsrfViewMiddleware'</snippet></ROW><ROW><id>3678306</id><snippet>settings.MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>3678867</id><snippet>zipfile.ZipFile.namelist()</snippet></ROW><ROW><id>3678867</id><snippet>ZipFile</snippet></ROW><ROW><id>3678867</id><snippet>namelist()</snippet></ROW><ROW><id>3678867</id><snippet>with ZipFile('foo.zip', 'r') as f:
    names = f.namelist()
print names
# ['file1', 'folder1/file2', ...]
</snippet></ROW><ROW><id>3678918</id><snippet>__init__.py</snippet></ROW><ROW><id>3678918</id><snippet>import Folder1.facebook as pyfacebook
import Folder2.facebook as facebooksdk
</snippet></ROW><ROW><id>3678938</id><snippet>&gt;&gt;&gt; list1 = ['f', 'o', 'o']
&gt;&gt;&gt; list2 = ['hello', 'world']
&gt;&gt;&gt; result = [None]*(len(list1)+len(list2))
&gt;&gt;&gt; result[::2] = list1
&gt;&gt;&gt; result[1::2] = list2
&gt;&gt;&gt; result
['f', 'hello', 'o', 'world', 'o']
</snippet></ROW><ROW><id>3679053</id><snippet>dict( (i+1, my_list[2*i : 2*i+2]) for i in xrange(0, len(my_list)/2) )
#                   ^
</snippet></ROW><ROW><id>3679053</id><snippet>&gt;&gt;&gt; it = iter(my_list)
&gt;&gt;&gt; dict(enumerate(zip(it, it), start=1))
{1: (5, 90), 2: (23, 12), 3: (34, 89)}
</snippet></ROW><ROW><id>3679053</id><snippet>itertools.izip</snippet></ROW><ROW><id>3679053</id><snippet>zip</snippet></ROW><ROW><id>3679153</id><snippet>media</snippet></ROW><ROW><id>3679395</id><snippet>mport win32gui, win32process, win32con
import os

windowList = []
win32gui.EnumWindows(lambda hwnd, windowList: windowList.append((win32gui.GetWindowText(hwnd),hwnd)), windowList)
cmdWindow = [i for i in windowList if "c:\python26\python.exe" in i[0].lower()]
win32gui.SetWindowPos(cmdWindow[0][1],win32con.HWND_TOPMOST,0,0,100,100,0) #100,100 is the size of the window
</snippet></ROW><ROW><id>3679569</id><snippet>&gt;&gt;&gt; xs = []
&gt;&gt;&gt; set([xs])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>3679569</id><snippet>__hash__</snippet></ROW><ROW><id>3679569</id><snippet>id</snippet></ROW><ROW><id>3679569</id><snippet>object</snippet></ROW><ROW><id>3679569</id><snippet>__hash__</snippet></ROW><ROW><id>3679569</id><snippet>sizeof</snippet></ROW><ROW><id>3679669</id><snippet>__dict__</snippet></ROW><ROW><id>3679669</id><snippet>#!/usr/bin/env python3

import inspect
from json import JSONEncoder


class TreeNode:

    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right


class ObjectJSONEncoder(JSONEncoder):

    def default(self, reject):
        is_not_method = lambda o: not inspect.isroutine(o)
        non_methods = inspect.getmembers(reject, is_not_method)
        return {attr: value for attr, value in non_methods
                if not attr.startswith('__')}


if __name__ == '__main__':
    tree = TreeNode(42,
        TreeNode(24),
        TreeNode(242),
    )
    print(ObjectJSONEncoder().encode(tree))
</snippet></ROW><ROW><id>3679747</id><snippet>def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w &gt; r:
         return c
      upto += w
   assert False, "Shouldn't get here"
</snippet></ROW><ROW><id>3680037</id><snippet>import subprocess
...
filename = ...
cmd = ["mysql", "-h", ip, "-u", mysqlUser, dbName]
f = open(filename)
subprocess.call(cmd, stdin=f)
</snippet></ROW><ROW><id>3680175</id><snippet>dict</snippet></ROW><ROW><id>3680175</id><snippet>if key not in dct:
 dct[key] = foo
</snippet></ROW><ROW><id>3680175</id><snippet>try:
 dct[key]
except KeyError:
 dct[key] = foo 
</snippet></ROW><ROW><id>3680175</id><snippet>dct.setdefault(key, foo)
</snippet></ROW><ROW><id>3680175</id><snippet>setdefault</snippet></ROW><ROW><id>3680175</id><snippet>dict</snippet></ROW><ROW><id>3680175</id><snippet>key</snippet></ROW><ROW><id>3680175</id><snippet>dct</snippet></ROW><ROW><id>3680175</id><snippet>foo</snippet></ROW><ROW><id>3680175</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>3680296</id><snippet>(u'1S²')</snippet></ROW><ROW><id>3680296</id><snippet>tuple</snippet></ROW><ROW><id>3680296</id><snippet>unicode</snippet></ROW><ROW><id>3680296</id><snippet>(u'1S²',)</snippet></ROW><ROW><id>3680296</id><snippet>print value</snippet></ROW><ROW><id>3680296</id><snippet>str(value)</snippet></ROW><ROW><id>3680296</id><snippet>unicode</snippet></ROW><ROW><id>3680296</id><snippet>print u' '.join((u'1S²',u'2S¹'))
</snippet></ROW><ROW><id>3680296</id><snippet>unicode</snippet></ROW><ROW><id>3680296</id><snippet>str</snippet></ROW><ROW><id>3680296</id><snippet>ENCODING = 'utf-8'
print u' '.join((u'1S²',u'2S¹')).encode(ENCODING)
</snippet></ROW><ROW><id>3680296</id><snippet>len</snippet></ROW><ROW><id>3680386</id><snippet>import re

tests=['1m30s','3m15s','2m25s','2m','55s']
for time_str in tests:
    match=re.match('(?:(\d*)m)?(?:(\d*)s)?',time_str)
    if match:
        minutes = int(match.group(1) or 0)
        seconds = int(match.group(2) or 0)
        print({'minutes':minutes,
               'seconds':seconds})

# {'seconds': 30, 'minutes': 1}
# {'seconds': 15, 'minutes': 3}
# {'seconds': 25, 'minutes': 2}
# {'seconds': 0, 'minutes': 2}
# {'seconds': 55, 'minutes': 0}
</snippet></ROW><ROW><id>3680403</id><snippet>unicode</snippet></ROW><ROW><id>3680403</id><snippet>str</snippet></ROW><ROW><id>3680403</id><snippet>&gt;&gt;&gt; b = 'PLANO DE S=C3=9ADE'
&gt;&gt;&gt; s = b.decode('quopri').decode('utf-8')
&gt;&gt;&gt; print s
PLANO DE SÚDE
</snippet></ROW><ROW><id>3680403</id><snippet>s</snippet></ROW><ROW><id>3680403</id><snippet>unicode</snippet></ROW><ROW><id>3680403</id><snippet>print</snippet></ROW><ROW><id>3680403</id><snippet>str</snippet></ROW><ROW><id>3680403</id><snippet>1</snippet></ROW><ROW><id>3680403</id><snippet>print</snippet></ROW><ROW><id>3680403</id><snippet>locale</snippet></ROW><ROW><id>3680403</id><snippet>import locale
ENCODING = locale.getpreferredencoding()

print s.encode(ENCODING)
</snippet></ROW><ROW><id>3680403</id><snippet>from getopt import getopt
ENCODING = 'UTF-8'
opts, args = getopt(sys.argv[1:], '', ['encoding='])
for opt, arg in opts:
    if opt == '--encoding':
        ENCODING = arg

print s.encode(ENCODING)
</snippet></ROW><ROW><id>3680403</id><snippet>import sys, os
ENCODING = 'UTF-8'
stdout = os.fdopen(sys.stdout.fileno(), 'wb')
s = u'привет' # Don't forget to use a Unicode literal staring with u''
stdout.write(s.encode(ENCODING))
</snippet></ROW><ROW><id>3680403</id><snippet>привет</snippet></ROW><ROW><id>3680403</id><snippet>stdout</snippet></ROW><ROW><id>3680403</id><snippet>sys.stdout</snippet></ROW><ROW><id>3680495</id><snippet>os.walk</snippet></ROW><ROW><id>3680495</id><snippet>import os
for dirpath,dirs,files in os.walk(ROOT):
    for f in dirs + files:
        fn = os.path.join(dirpath, f)
        FILES[fn] = Analyse(fn)
</snippet></ROW><ROW><id>3680752</id><snippet># Example path, I guess something like this is produced by path2indice?!
indices = ("home", "username", "Desktop")

tree = {}

d = tree
for indice in indices[:-1]:
    if indice not in d:
        d[indice] = {}

    d = d[indice]

d[indices[-1]] = "some value"

print tree # this will print {'home': {'username': {'Desktop': 'some value'}}}
</snippet></ROW><ROW><id>3681006</id><snippet>__getitem__(self, key)</snippet></ROW><ROW><id>3681006</id><snippet>__setitem__(self, key, value)</snippet></ROW><ROW><id>3681006</id><snippet>class my_class(object):

    def __getitem__(self, key):
        return some_value_based_upon(key) #You decide the implementation here!

    def __setitem__(self, key, value):
        return store_based_upon(key, value) #You decide the implementation here!


i = my_class()
i[69] = 'foo'
print i[69]
</snippet></ROW><ROW><id>3681006</id><snippet>dict</snippet></ROW><ROW><id>3681006</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; n = 0, 1, 2
&gt;&gt;&gt; a[n] = 'foo'
&gt;&gt;&gt; print a[n]
foo
</snippet></ROW><ROW><id>3681148</id><snippet>Unbind()</snippet></ROW><ROW><id>3681148</id><snippet>def onButton(self, event):
    if yourRadioButton.GetValue() == True:
        self.Unbind(wx.EVT_BUTTON, handler=self.onButton, source=self.myButton)
        self.Bind(wx.EVT_BUTTON, self.someOtherHandler, self.myButton)
</snippet></ROW><ROW><id>3681323</id><snippet>get_dict_attr</snippet></ROW><ROW><id>3681323</id><snippet>attr</snippet></ROW><ROW><id>3681323</id><snippet>__dict__</snippet></ROW><ROW><id>3681323</id><snippet>attr</snippet></ROW><ROW><id>3681323</id><snippet>__dict__</snippet></ROW><ROW><id>3681323</id><snippet>__dict__</snippet></ROW><ROW><id>3681323</id><snippet>AttributeError</snippet></ROW><ROW><id>3681323</id><snippet>def get_dict_attr(obj,attr):
    for obj in [obj]+obj.__class__.mro():
        if attr in obj.__dict__:
            return obj.__dict__[attr]
    raise AttributeError
</snippet></ROW><ROW><id>3681323</id><snippet>class Foo(object):
    x=1
    def bar(self):
        pass
    @property
    def baz(self):
        return 0

foo=Foo()
print(get_dict_attr(foo,'x'))
# 1
print(get_dict_attr(foo,'bar'))
# &lt;unbound method Foo.bar&gt;
print(get_dict_attr(foo,'baz'))
# &lt;property object at 0xb77c0dc4&gt;
print(get_dict_attr(foo,'y'))
# AttributeError
</snippet></ROW><ROW><id>3681323</id><snippet>obj.__class__.__dict__</snippet></ROW><ROW><id>3681323</id><snippet>__get__</snippet></ROW><ROW><id>3681323</id><snippet>__set__</snippet></ROW><ROW><id>3681323</id><snippet>obj.__dict__</snippet></ROW><ROW><id>3681323</id><snippet>get_dict_attr</snippet></ROW><ROW><id>3681323</id><snippet>obj.__dict__</snippet></ROW><ROW><id>3681323</id><snippet>get_dict_attr</snippet></ROW><ROW><id>3681323</id><snippet>__getattr__</snippet></ROW><ROW><id>3681323</id><snippet>get_dict_attr</snippet></ROW><ROW><id>3681323</id><snippet>obj</snippet></ROW><ROW><id>3681323</id><snippet>class Foo(object):
    @property
    def bar(self):
        return 0

f = Foo()
</snippet></ROW><ROW><id>3681323</id><snippet>bar</snippet></ROW><ROW><id>3681323</id><snippet>print(Foo.bar)
# &lt;property object at 0xb76d1d9c&gt;
</snippet></ROW><ROW><id>3681323</id><snippet>bar</snippet></ROW><ROW><id>3681323</id><snippet>Foo.__dict__</snippet></ROW><ROW><id>3681323</id><snippet>print(Foo.__dict__['bar'])
# &lt;property object at 0xb775dbbc&gt;
</snippet></ROW><ROW><id>3681323</id><snippet>__get__</snippet></ROW><ROW><id>3681323</id><snippet>print(Foo.bar.__get__)
# &lt;method-wrapper '__get__' of property object at 0xb76d7d74&gt;
</snippet></ROW><ROW><id>3681323</id><snippet>f</snippet></ROW><ROW><id>3681323</id><snippet>f</snippet></ROW><ROW><id>3681323</id><snippet>print(Foo.bar.__get__(f,Foo))
# 0
</snippet></ROW><ROW><id>3681323</id><snippet>   Foo                                B
   | Foo.__dict__={'bar':b}           | B.__dict__={'__get__':...}
   |                      \           |      
   f                       `--------&gt; b
</snippet></ROW><ROW><id>3681323</id><snippet>f.bar</snippet></ROW><ROW><id>3681323</id><snippet>b.__get__(f,Foo)</snippet></ROW><ROW><id>3681748</id><snippet>def lcm(numbers):
    return map(__lcm, combinations( numbers, 2 ) )
</snippet></ROW><ROW><id>3681770</id><snippet>self.__X</snippet></ROW><ROW><id>3681770</id><snippet>self._ClassName__X</snippet></ROW><ROW><id>3681946</id><snippet>open</snippet></ROW><ROW><id>3681946</id><snippet>open('thefile.txt')</snippet></ROW><ROW><id>3681946</id><snippet>'r'</snippet></ROW><ROW><id>3681946</id><snippet>with open('blah.txt') as f:</snippet></ROW><ROW><id>3682153</id><snippet>def __init__(self, **kwargs):
    for kw,arg in kwargs.iteritems():
        setattr(self, kw, arg)
</snippet></ROW><ROW><id>3682153</id><snippet>def __init__(self, **kwargs):
    arg_vals = {
        'param1': 'default1',
        # ...
    }
    arg_vals.update(kwargs)
    for kw,arg in arg_vals.iteritems():
        setattr(self, kw, arg)
</snippet></ROW><ROW><id>3682166</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>3682214</id><snippet>$ sudo port install opencv +python26
</snippet></ROW><ROW><id>3682281</id><snippet>mypythonvirtualenv/bin
mypythonvirtualenv/include
mypythonvirtualenv/lib
mypythonvirtualenv/lib/python2.6
mypythonvirtualenv/lib/python2.6/site-packages
</snippet></ROW><ROW><id>3682281</id><snippet>source</snippet></ROW><ROW><id>3682281</id><snippet>activate</snippet></ROW><ROW><id>3682281</id><snippet>euclid:~ seth$ which python
/opt/local/bin/python
euclid:~ seth$ source /Users/seth/mypythonvirtualenv/bin/activate
(mypythonvirtualenv)euclid:~ seth$ which python
/Users/seth/mypythonvirtualenv/bin/python
</snippet></ROW><ROW><id>3682281</id><snippet>easy_install</snippet></ROW><ROW><id>3682332</id><snippet>def int_wrapper(reader):
    for v in reader:
        yield map(int, v)
</snippet></ROW><ROW><id>3682332</id><snippet>reader = csv.reader(individualFile,dialect)
reader = int_wrapper(reader)

# all that other stuff

for m, f, s, g, a, c, t in reader:
    try:
        census[m][f][s][g][a][c] += t
    except:
        print "error"
        print m, f, s, g, a, c, t
        break    
</snippet></ROW><ROW><id>3682332</id><snippet>TypeError</snippet></ROW><ROW><id>3682332</id><snippet>reader</snippet></ROW><ROW><id>3682332</id><snippet>yield</snippet></ROW><ROW><id>3682332</id><snippet>map</snippet></ROW><ROW><id>3682332</id><snippet>map</snippet></ROW><ROW><id>3682332</id><snippet>map</snippet></ROW><ROW><id>3682332</id><snippet>for m, f, s, g, a, c, t in (map(int, v) for v in reader):
    # code
</snippet></ROW><ROW><id>3682390</id><snippet>easy_install virtualenv</snippet></ROW><ROW><id>3682524</id><snippet>class Album(models.model):
  thumb = models.ForeignKey('Image', null=True, blank=True)
</snippet></ROW><ROW><id>3682526</id><snippet>pool.close()</snippet></ROW><ROW><id>3682526</id><snippet>pool.join()</snippet></ROW><ROW><id>3682526</id><snippet>apply_async</snippet></ROW><ROW><id>3682526</id><snippet>Pool</snippet></ROW><ROW><id>3682526</id><snippet>join</snippet></ROW><ROW><id>3682526</id><snippet>Pool</snippet></ROW><ROW><id>3682580</id><snippet>data = [line.split('|') for line in input]
</snippet></ROW><ROW><id>3682580</id><snippet>sort_index = 1
sorted_data = sorted(data, key=lambda line: int(line[sort_index]))
</snippet></ROW><ROW><id>3682696</id><snippet>celery.task.schedules.schedule</snippet></ROW><ROW><id>3682696</id><snippet>celery.task.schedules.crontab</snippet></ROW><ROW><id>3682696</id><snippet>from celery.task.schedules import schedule

@property
def run_every(self):
    if datetime.now().weekday() in [1, 2, 3]:
        return schedule(timedelta(minutes=15))
    else:
        return schedule(timedelta(seconds=40))
</snippet></ROW><ROW><id>3682696</id><snippet>run_every</snippet></ROW><ROW><id>3683531</id><snippet>return redirect(url_for('www'))</snippet></ROW><ROW><id>3683531</id><snippet>@app.route('/welcome')
def www():
    return render_template('www.html')
</snippet></ROW><ROW><id>3683531</id><snippet>url_for</snippet></ROW><ROW><id>3683531</id><snippet>@app.route('/login')
def sign_in():
    for thing in login_routine:
        do_stuff(thing)
    return render_template('sign_in.html')

@app.route('/new-member')
def welcome_page():
    flash('welcome to our new members')
    flash('no cussing, no biting, nothing stronger than gin before breakfast')
    return redirect(url_for('sign_in')) # not 'login', not 'sign_in.html'
</snippet></ROW><ROW><id>3683531</id><snippet>return redirect('/some-url')</snippet></ROW><ROW><id>3683531</id><snippet>return render_template('www.html')</snippet></ROW><ROW><id>3683863</id><snippet>import urllib2
import chardet

def fetch(url):
 try:
    result = urllib2.urlopen(url)
    rawdata = result.read()
    encoding = chardet.detect(rawdata)
    return rawdata.decode(encoding['encoding'])

 except urllib2.URLError, e:
    handleError(e)
</snippet></ROW><ROW><id>3684016</id><snippet>rsync</snippet></ROW><ROW><id>3684132</id><snippet>object</snippet></ROW><ROW><id>3684132</id><snippet>type</snippet></ROW><ROW><id>3685339</id><snippet>numpy.save</snippet></ROW><ROW><id>3685339</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>3685339</id><snippet>savetxt</snippet></ROW><ROW><id>3685339</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>3685339</id><snippet>import numpy as np
x = np.arange(20).reshape((4,5))
np.savetxt('test.txt', x)
</snippet></ROW><ROW><id>3685339</id><snippet>TypeError: float argument required, not numpy.ndarray</snippet></ROW><ROW><id>3685339</id><snippet>import numpy as np
x = np.arange(200).reshape((4,5,10))
np.savetxt('test.txt', x)
</snippet></ROW><ROW><id>3685339</id><snippet>x = np.arange(200).reshape((4,5,10))
with file('test.txt', 'w') as outfile:
    for slice_2d in x:
        np.savetxt(outfile, slice_2d)
</snippet></ROW><ROW><id>3685339</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>3685339</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>3685339</id><snippet>#</snippet></ROW><ROW><id>3685339</id><snippet>comments</snippet></ROW><ROW><id>3685339</id><snippet>import numpy as np

# Generate some test data
data = np.arange(200).reshape((4,5,10))

# Write the array to disk
with file('test.txt', 'w') as outfile:
    # I'm writing a header here just for the sake of readability
    # Any line starting with "#" will be ignored by numpy.loadtxt
    outfile.write('# Array shape: {0}\n'.format(data.shape))

    # Iterating through a ndimensional array produces slices along
    # the last axis. This is equivalent to data[i,:,:] in this case
    for data_slice in data:

        # The formatting string indicates that I'm writing out
        # the values in left-justified columns 7 characters in width
        # with 2 decimal places.  
        np.savetxt(outfile, data_slice, fmt='%-7.2f')

        # Writing out a break to indicate different slices...
        outfile.write('# New slice\n')
</snippet></ROW><ROW><id>3685339</id><snippet># Array shape: (4, 5, 10)
0.00    1.00    2.00    3.00    4.00    5.00    6.00    7.00    8.00    9.00   
10.00   11.00   12.00   13.00   14.00   15.00   16.00   17.00   18.00   19.00  
20.00   21.00   22.00   23.00   24.00   25.00   26.00   27.00   28.00   29.00  
30.00   31.00   32.00   33.00   34.00   35.00   36.00   37.00   38.00   39.00  
40.00   41.00   42.00   43.00   44.00   45.00   46.00   47.00   48.00   49.00  
# New slice
50.00   51.00   52.00   53.00   54.00   55.00   56.00   57.00   58.00   59.00  
60.00   61.00   62.00   63.00   64.00   65.00   66.00   67.00   68.00   69.00  
70.00   71.00   72.00   73.00   74.00   75.00   76.00   77.00   78.00   79.00  
80.00   81.00   82.00   83.00   84.00   85.00   86.00   87.00   88.00   89.00  
90.00   91.00   92.00   93.00   94.00   95.00   96.00   97.00   98.00   99.00  
# New slice
100.00  101.00  102.00  103.00  104.00  105.00  106.00  107.00  108.00  109.00 
110.00  111.00  112.00  113.00  114.00  115.00  116.00  117.00  118.00  119.00 
120.00  121.00  122.00  123.00  124.00  125.00  126.00  127.00  128.00  129.00 
130.00  131.00  132.00  133.00  134.00  135.00  136.00  137.00  138.00  139.00 
140.00  141.00  142.00  143.00  144.00  145.00  146.00  147.00  148.00  149.00 
# New slice
150.00  151.00  152.00  153.00  154.00  155.00  156.00  157.00  158.00  159.00 
160.00  161.00  162.00  163.00  164.00  165.00  166.00  167.00  168.00  169.00 
170.00  171.00  172.00  173.00  174.00  175.00  176.00  177.00  178.00  179.00 
180.00  181.00  182.00  183.00  184.00  185.00  186.00  187.00  188.00  189.00 
190.00  191.00  192.00  193.00  194.00  195.00  196.00  197.00  198.00  199.00 
# New slice
</snippet></ROW><ROW><id>3685339</id><snippet>numpy.loadtxt('test.txt').reshape((4,5,10))</snippet></ROW><ROW><id>3685339</id><snippet># Read the array from disk
new_data = np.loadtxt('test.txt')

# Note that this returned a 2D array!
print new_data.shape

# However, going back to 3D is easy if we know the 
# original shape of the array
new_data = new_data.reshape((4,5,10))

# Just to check that they're the same...
assert np.all(new_data == data)
</snippet></ROW><ROW><id>3685943</id><snippet>data = '''\
234 127 34 23 45567
23 12 4 4 45
23456 2 1 444 567'''

# Split input data by row and then on spaces
rows = [ line.strip().split(' ') for line in data.split('\n') ]

# Reorganize data by columns
cols = zip(*rows)

# Compute column widths by taking maximum length of values per column
col_widths = [ max(len(value) for value in col) for col in cols ]

# Create a suitable format string
format = ' '.join(['%%%ds' % width for width in col_widths ])

# Print each row using the computed format
for row in rows:
  print format % tuple(row)
</snippet></ROW><ROW><id>3685943</id><snippet>  234 127 34  23 45567
   23  12  4   4    45
23456   2  1 444   567
</snippet></ROW><ROW><id>3686000</id><snippet>_</snippet></ROW><ROW><id>3686000</id><snippet>_</snippet></ROW><ROW><id>3686000</id><snippet>i_dont_care_wtf_you_put_here</snippet></ROW><ROW><id>3686046</id><snippet>import itertools

# Adapted from Python Cookbook 2nd Ed. 19.7.
def windows(iterable, length=2, overlap=0):
    """
    Return an iterator over overlapping windows of length &lt;length&gt; of &lt;iterable&gt;.
    """
    it = iter(iterable)
    results = list(itertools.islice(it, length))
    while len(results) == length:
        yield results
        results = results[length-overlap:]
        results.extend(itertools.islice(it, length-overlap))

def magic_function(seq):
    return [' '.join(window) for n in range(len(words)) for window in windows(seq, n + 1, n)]
</snippet></ROW><ROW><id>3686046</id><snippet>&gt;&gt;&gt; words = ["hey","there","stack","overflow"]
&gt;&gt;&gt; print magic_function(words)
['hey', 'there', 'stack', 'overflow', 'hey there', 'there stack', 'stack overflow', 'hey there stack', 'there stack overflow', 'hey there stack overflow']
</snippet></ROW><ROW><id>3686198</id><snippet>"xs": SCHEMA_NAMESPACE</snippet></ROW><ROW><id>3686198</id><snippet>NSMAP</snippet></ROW><ROW><id>3686198</id><snippet>nsmap</snippet></ROW><ROW><id>3686198</id><snippet>_Element.nsmap</snippet></ROW><ROW><id>3686198</id><snippet>SCHEMA_NAMESPACE = "http://www.w3.org/2001/XMLSchema"

def add_element(schema):
    nsmap = schema.nsmap
    nsrmap = dict([(uri, prefix) for prefix, uri in nsmap.items()])
    prefix = nsrmap[SCHEMA_NAMESPACE]
    xs = lambda name: "%s:%s" % (prefix, name)
    element = schema.makeelement(xs("element"), nsmap=nsmap,
                                 attrib={'name': 'age', 'type': xs('string')})
    schema.append(element)
    return etree.tostring(schema, pretty_print=True)
</snippet></ROW><ROW><id>3686200</id><snippet>str.find</snippet></ROW><ROW><id>3686200</id><snippet>&gt;&gt;&gt; s = "The quick brown fox"
&gt;&gt;&gt; s.find("The")
0
&gt;&gt;&gt; s.find("brown")
10
&gt;&gt;&gt; s.find("waffles")
-1
</snippet></ROW><ROW><id>3686222</id><snippet>import dis
dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (a_method_returning_a_long_list)
              3 CALL_FUNCTION            0
              6 STORE_FAST               0 (x)

  3           9 LOAD_GLOBAL              1 (a_method_which_filters_a_list)
             12 LOAD_FAST                0 (x)
             15 CALL_FUNCTION            1
             18 STORE_FAST               1 (y)

  4          21 LOAD_FAST                1 (y)
             24 RETURN_VALUE
</snippet></ROW><ROW><id>3686222</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>3686222</id><snippet>STORE_FAST</snippet></ROW><ROW><id>3686222</id><snippet>foo</snippet></ROW><ROW><id>3686222</id><snippet>x</snippet></ROW><ROW><id>3686222</id><snippet>y</snippet></ROW><ROW><id>3686278</id><snippet>map</snippet></ROW><ROW><id>3686278</id><snippet>map</snippet></ROW><ROW><id>3686278</id><snippet>for</snippet></ROW><ROW><id>3686278</id><snippet>for o in files:
    o.close()
</snippet></ROW><ROW><id>3686369</id><snippet>name_of_extension=
</snippet></ROW><ROW><id>3686541</id><snippet>def logged_in(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if session.get('logged_in') is not None:
            return f(*args, **kwargs)
        else:
            flash('Please log in first...', 'error')
            next_url = get_current_url() # However you do this in Flask
            login_url = '%s?next=%s' % (url_for('login'), next_url)
            return redirect(login_url)
    return decorated_function
</snippet></ROW><ROW><id>3686541</id><snippet>get_current_url()</snippet></ROW><ROW><id>3686541</id><snippet>next</snippet></ROW><ROW><id>3686541</id><snippet>/</snippet></ROW><ROW><id>3686602</id><snippet>#!/usr/bin/env python

import itertools

items = {
    'fruits' : ('Orange', 'Apple'),
    'toys' : ('GI-Joe', ),
    'electronics' : ('VCR', ),
    'sporting_goods' : ('Racquet', )
}

def combinate(items, size=3):
    if size &gt; len(items):
        raise Exception("Lower the `size` or add more products, dude!")

    for cats in itertools.combinations(items.keys(), size):
        cat_items = [[products for products in items[cat]] for cat in cats]
        for x in itertools.product(*cat_items):
            yield zip(cats, x)

if __name__ == '__main__':
    for x in combinate(items):
        print x
</snippet></ROW><ROW><id>3686602</id><snippet># ==&gt; 
#
# [('electronics', 'VCR'), ('toys', 'GI-Joe'), ('sporting_goods', 'Racquet')]
# [('electronics', 'VCR'), ('toys', 'GI-Joe'), ('fruits', 'Orange')]
# [('electronics', 'VCR'), ('toys', 'GI-Joe'), ('fruits', 'Apple')]
# [('electronics', 'VCR'), ('sporting_goods', 'Racquet'), ('fruits', 'Orange')]
# [('electronics', 'VCR'), ('sporting_goods', 'Racquet'), ('fruits', 'Apple')]
# [('toys', 'GI-Joe'), ('sporting_goods', 'Racquet'), ('fruits', 'Orange')]
# [('toys', 'GI-Joe'), ('sporting_goods', 'Racquet'), ('fruits', 'Apple')]
</snippet></ROW><ROW><id>3686693</id><snippet>defer.execute(f, args, kwargs)</snippet></ROW><ROW><id>3686693</id><snippet>defer.succeed(f(*args, **kwargs))</snippet></ROW><ROW><id>3686693</id><snippet>defer.execute</snippet></ROW><ROW><id>3686693</id><snippet>def execute(callable, *args, **kw):
    """Create a deferred from a callable and arguments.

    Call the given function with the given arguments.  Return a deferred which
    has been fired with its callback as the result of that invocation or its
    errback with a Failure for the exception thrown.
    """
    try:
        result = callable(*args, **kw)
    except:
        return fail()
    else:
        return succeed(result)
</snippet></ROW><ROW><id>3686693</id><snippet>defer.execute</snippet></ROW><ROW><id>3686693</id><snippet>defer.execute</snippet></ROW><ROW><id>3686693</id><snippet>defer.maybeDeferred</snippet></ROW><ROW><id>3686693</id><snippet>defer.execute</snippet></ROW><ROW><id>3686693</id><snippet>from twisted.internet import defer
from twisted.web.client import getPage

def process_feed(url, getter=getPage):
    d = defer.maybeDeferred(getter, url)
    d.addCallback(_process_feed)

def _process_feed(result):
    pass # do something with result here
</snippet></ROW><ROW><id>3686693</id><snippet>from urllib2 import urlopen

def synchronous_getter(url):
    resp = urlopen(url)
    result = resp.read()
    resp.close()
    return result
</snippet></ROW><ROW><id>3686703</id><snippet>kill %1</snippet></ROW><ROW><id>3686937</id><snippet>get_info</snippet></ROW><ROW><id>3686937</id><snippet>MyDownloadPage</snippet></ROW><ROW><id>3687133</id><snippet>pycassa.connect_thread_local()</snippet></ROW><ROW><id>3687180</id><snippet>print ("Off", "On")[value]</snippet></ROW><ROW><id>3687180</id><snippet>(False, True) == (0,1)</snippet></ROW><ROW><id>3687257</id><snippet>datetime</snippet></ROW><ROW><id>3687257</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime("31/12/2009", "%d/%m/%Y").strftime("%Y/%m/%d")
'2009/12/31'
</snippet></ROW><ROW><id>3687257</id><snippet>dateutil</snippet></ROW><ROW><id>3687257</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse("31/12/2009").strftime("%Y/%m/%d")
'2009/12/31'
</snippet></ROW><ROW><id>3687257</id><snippet>Dateutil</snippet></ROW><ROW><id>3687257</id><snippet>map</snippet></ROW><ROW><id>3687257</id><snippet>parse</snippet></ROW><ROW><id>3687289</id><snippet>graphics = relationship("Graphic", uselist=False)
</snippet></ROW><ROW><id>3687289</id><snippet>graphics = relationship("Graphic", uselist=False, lazy='joined',
        backref=backref('tiles', cascade="all, delete, delete-orphan"))
</snippet></ROW><ROW><id>3687486</id><snippet>## SICP exercise, Alonzo Church Pairs - Lambda Calculus
def cons(x, y):
    return lambda m: m(x, y)

def car(p):
    return p(lambda x, y: x)

def cdr(p):
    return p(lambda x, y: y)


&gt;&gt;&gt; p = cons(2, 3)
&gt;&gt;&gt; car(p)
2
&gt;&gt;&gt; cdr(p)
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3687688</id><snippet>a</snippet></ROW><ROW><id>3687688</id><snippet>a</snippet></ROW><ROW><id>3687688</id><snippet>a</snippet></ROW><ROW><id>3687688</id><snippet>const</snippet></ROW><ROW><id>3687688</id><snippet>a</snippet></ROW><ROW><id>3687711</id><snippet>&gt;&gt;&gt; def make_func(value_to_print):
    def _function():
        print value_to_print
    return _function

&gt;&gt;&gt; f1 = make_func(1)
&gt;&gt;&gt; f1()
1
&gt;&gt;&gt; f2 = make_func(2)
&gt;&gt;&gt; f2()
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3687711</id><snippet>&gt;&gt;&gt; my_functions = [make_func(i) for i in range(1, 11)]
&gt;&gt;&gt; for each in my_functions:
    each()


1
2
3
...
</snippet></ROW><ROW><id>3687716</id><snippet>&gt;&gt;&gt; t = (1, 2, 3, 4)   # t is the tuple (1, 2, 3, 4)
&gt;&gt;&gt; l = list(t)        # l is the list [1, 2, 3, 4]
</snippet></ROW><ROW><id>3687716</id><snippet>tuple</snippet></ROW><ROW><id>3687914</id><snippet>explorer_browser.py</snippet></ROW><ROW><id>3687914</id><snippet>site-packages/win32comext/shell/demos</snippet></ROW><ROW><id>3688194</id><snippet>SoundUpload</snippet></ROW><ROW><id>3688194</id><snippet>class SoundUpload(models.Model):
    STATUS_CHOICES = (
        (0, 'Unprocessed'),
        (1, 'Ready'),
        (2, 'Bad File'),
    )
    uploaded_by = models.ForeignKey(User)
    original_url = models.URLField(verify_true=False)
    download_url = models.URLField(null=True, blank=True)
    status = models.IntegerField(choices=STATUS_CHOICES, default=0)
</snippet></ROW><ROW><id>3688194</id><snippet>ModelForm</snippet></ROW><ROW><id>3688194</id><snippet>SoundUpload</snippet></ROW><ROW><id>3688194</id><snippet>def process_new_sound_upload(sender, **kwargs):
   # Bury to prevent circular dependency issues.
   from your_project.tasks import ProcessSoundUploadTask
   if kwargs.get('created', False):
        instance = kwargs.get('instance')
        ProcessSoundUploadTask.delay(instance.id)


post_save.connect(process_new_sound_upload, sender=SoundUpload)
</snippet></ROW><ROW><id>3688194</id><snippet>ProcessSoundUploadTask</snippet></ROW><ROW><id>3688194</id><snippet>pycurl</snippet></ROW><ROW><id>3688194</id><snippet>ffmpeg</snippet></ROW><ROW><id>3688194</id><snippet>SoundUpload</snippet></ROW><ROW><id>3688194</id><snippet>2</snippet></ROW><ROW><id>3688194</id><snippet>boto</snippet></ROW><ROW><id>3688194</id><snippet>SoundUpload</snippet></ROW><ROW><id>3688194</id><snippet>django-celery</snippet></ROW><ROW><id>3688484</id><snippet>os.rmdir</snippet></ROW><ROW><id>3688484</id><snippet>rmdir</snippet></ROW><ROW><id>3688484</id><snippet>/S</snippet></ROW><ROW><id>3688508</id><snippet>import cherrypy

class Root(object):
    @cherrypy.expose
    def default(self, **kwargs):
        print kwargs
        return '''&lt;form action="" method="POST"&gt;
Host Availability:
&lt;input type="checkbox" name="goal" value="cpu" /&gt; CPU idle
&lt;input type="checkbox" name="goal" value="lighttpd" /&gt; Lighttpd Service
&lt;input type="checkbox" name="goal" value="mysql" /&gt; Mysql Service
&lt;input type="submit"&gt;
&lt;/form&gt;'''

cherrypy.quickstart(Root())
</snippet></ROW><ROW><id>3688508</id><snippet>$ python stacktest.py 
[10/Sep/2010:14:25:55] HTTP Serving HTTP on http://0.0.0.0:8080/
CherryPy Checker:
The Application mounted at '' has an empty config.
Submitted goal argument: None
127.0.0.1 - - [10/Sep/2010:14:26:09] "GET / HTTP/1.1" 200 276 "" "Mozilla..."
Submitted goal argument: ['cpu', 'mysql']
127.0.0.1 - - [10/Sep/2010:14:26:15] "POST / HTTP/1.1" 200 276 "http://localhost:8003/" "Mozilla..."
[10/Sep/2010:14:26:26] ENGINE &lt;Ctrl-C&gt; hit: shutting down app engine
[10/Sep/2010:14:26:26] HTTP HTTP Server shut down
[10/Sep/2010:14:26:26] ENGINE CherryPy shut down
$
</snippet></ROW><ROW><id>3688508</id><snippet>[]</snippet></ROW><ROW><id>3688508</id><snippet>goal</snippet></ROW><ROW><id>3688516</id><snippet>multiples[:] = [n for i,n in enumerate(multiples) 
                       if all(n % small for small in multiples[i+1:])] 
</snippet></ROW><ROW><id>3689417</id><snippet>PATH</snippet></ROW><ROW><id>3689417</id><snippet>C:\python27\Lib</snippet></ROW><ROW><id>3689417</id><snippet>PATH</snippet></ROW><ROW><id>3689417</id><snippet>pydoc.bat</snippet></ROW><ROW><id>3689417</id><snippet>C:\python27\Scripts</snippet></ROW><ROW><id>3689417</id><snippet>PATH</snippet></ROW><ROW><id>3689430</id><snippet>every thu,fri,sat,sun,mon 00:00
every thu,fri,sat,sun,mon 01:00
...
every thu,fri,sat,sun,mon 23:00
</snippet></ROW><ROW><id>3689710</id><snippet>import numpy as np
from scipy.ndimage.filters import maximum_filter
from scipy.ndimage.morphology import generate_binary_structure, binary_erosion
import matplotlib.pyplot as pp

#for some reason I had to reshape. Numpy ignored the shape header.
paws_data = np.loadtxt("paws.txt").reshape(4,11,14)

#getting a list of images
paws = [p.squeeze() for p in np.vsplit(paws_data,4)]


def detect_peaks(image):
    """
    Takes an image and detect the peaks usingthe local maximum filter.
    Returns a boolean mask of the peaks (i.e. 1 when
    the pixel's value is the neighborhood maximum, 0 otherwise)
    """

    # define an 8-connected neighborhood
    neighborhood = generate_binary_structure(2,2)

    #apply the local maximum filter; all pixel of maximal value 
    #in their neighborhood are set to 1
    local_max = maximum_filter(image, footprint=neighborhood)==image
    #local_max is a mask that contains the peaks we are 
    #looking for, but also the background.
    #In order to isolate the peaks we must remove the background from the mask.

    #we create the mask of the background
    background = (image==0)

    #a little technicality: we must erode the background in order to 
    #successfully subtract it form local_max, otherwise a line will 
    #appear along the background border (artifact of the local maximum filter)
    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)

    #we obtain the final mask, containing only peaks, 
    #by removing the background from the local_max mask
    detected_peaks = local_max - eroded_background

    return detected_peaks


#applying the detection and plotting results
for i, paw in enumerate(paws):
    detected_peaks = detect_peaks(paw)
    pp.subplot(4,2,(2*i+1))
    pp.imshow(paw)
    pp.subplot(4,2,(2*i+2) )
    pp.imshow(detected_peaks)

pp.show()
</snippet></ROW><ROW><id>3689763</id><snippet>__main__</snippet></ROW><ROW><id>3689763</id><snippet>myexceptions.BadException</snippet></ROW><ROW><id>3689763</id><snippet>sys.excepthook</snippet></ROW><ROW><id>3689763</id><snippet>class BadThings(Exception): pass 

import traceback
def myexcepthook(type, value, tb):
    l = ''.join(traceback.format_exception(type, value, tb))
    print l

import sys
sys.excepthook = myexcepthook

raise BadThings("bad bad")
</snippet></ROW><ROW><id>3689763</id><snippet>Traceback (most recent call last):
  File "untitled-1.py", line 12, in &lt;module&gt;
    raise BadThings("bad bad")
BadThings: bad bad
</snippet></ROW><ROW><id>3689763</id><snippet>sys.excepthook</snippet></ROW><ROW><id>3689842</id><snippet>thelist = [(5,), (2,), (4,), (1,), (3,), (6,), (7,), (8,)]

sortedlist = sorted([x[0] for x in thelist])

print sortedlist
</snippet></ROW><ROW><id>3689901</id><snippet>elif collection[pivot] &gt; target:
</snippet></ROW><ROW><id>3689901</id><snippet>elif collection[pivot] &lt; target:
</snippet></ROW><ROW><id>3689901</id><snippet>&gt;&gt;&gt; binary([1, 2, 3], 1)
(min=0, max=2, pivot=1)
(min=2, max=2, pivot=2)
     ^ Oops

# After fixing...
&gt;&gt;&gt; binary([1, 2, 3], 1)
(min=0, max=2, pivot=1)
(min=0, max=0, pivot=0)
</snippet></ROW><ROW><id>3689929</id><snippet>Cursor.execute</snippet></ROW><ROW><id>3689929</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('begin')
&lt;sqlite3.Cursor object at 0x0104B020&gt;
&gt;&gt;&gt; cur.execute('CREATE TABLE test (id INTEGER)')
&lt;sqlite3.Cursor object at 0x0104B020&gt;
&gt;&gt;&gt; cur.execute('INSERT INTO test VALUES (1)')
&lt;sqlite3.Cursor object at 0x0104B020&gt;
&gt;&gt;&gt; cur.execute('commit')

Traceback (most recent call last):
  File "&lt;pyshell#10&gt;", line 1, in &lt;module&gt;
    cur.execute('commit')
OperationalError: cannot commit - no transaction is active
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3689929</id><snippet>commit</snippet></ROW><ROW><id>3689929</id><snippet>Connection</snippet></ROW><ROW><id>3689929</id><snippet>sqlite3</snippet></ROW><ROW><id>3689929</id><snippet>cmd = "attach \"%s\" as toMerge" % "b.db"
</snippet></ROW><ROW><id>3689929</id><snippet>cmd = 'attach "{0}" as toMerge'.format("b.db") #why not just one string though?
</snippet></ROW><ROW><id>3689929</id><snippet>cmd = "attach ? as toMerge"
cursor.execute(cmd, ('b.db', ))
</snippet></ROW><ROW><id>3689929</id><snippet>runCommand</snippet></ROW><ROW><id>3689929</id><snippet>def runCommand(self, sql, params=(), commit=True):
    self.cursor.execute(sql, params)
    if commit:
        self.connector.commit()
</snippet></ROW><ROW><id>3689929</id><snippet>commit=False</snippet></ROW><ROW><id>3689947</id><snippet>for i,j in data:
    file.write('%-15s %s\n' % (i,j))
</snippet></ROW><ROW><id>3689947</id><snippet>%-15s</snippet></ROW><ROW><id>3689947</id><snippet>seq1            ACTAGACCCTAG
sequence287653  ACTAGNACTGGG
s9              ACTAGAAACTAG
</snippet></ROW><ROW><id>3690006</id><snippet>from ctypes import *
# if on Windows, may need to change following to use WinDLL instead of CDLL
vix = CDLL('vix.dll')

# user defined types
VixHandle = c_int
VixHandleType = c_int
VixError = c_uint64
VixPropertyType = c_int
VixPropertyID = c_int
VixEventType = c_int
VixHostOptions = c_int
VixServiceProvider = c_int
VixFindItemType = c_int
VixVMOpenOptions = c_int
VixPumpEventsOptions = c_int
VixVMPowerOpOptions = c_int
VixVMDeleteOptions = c_int
VixPowerState = c_int
VixToolsState = c_int
VixRunProgramOptions = c_int
VixRemoveSnapshotOptions = c_int
VixCreateSnapshotOptions = c_int
VixMsgSharedFolderOptions = c_int
VixCloneType = c_int
VixEventProc = CFUNCTYPE(VixHandle,
    VixEventType,
    VixHandle,
    c_void_p)

# constant definitions
VIX_INVALID_HANDLE = 0
VIX_HANDLETYPE_NONE = 0
VIX_HANDLETYPE_HOST = 2
VIX_HANDLETYPE_VM = 3
VIX_HANDLETYPE_NETWORK = 5
VIX_HANDLETYPE_JOB = 6
VIX_HANDLETYPE_SNAPSHOT = 7
VIX_HANDLETYPE_PROPERTY_LIST = 9
VIX_HANDLETYPE_METADATA_CONTAINER = 11
VIX_OK = 0
VIX_E_FAIL = 1
VIX_E_OUT_OF_MEMORY = 2
VIX_E_INVALID_ARG = 3
VIX_E_FILE_NOT_FOUND = 4
VIX_E_OBJECT_IS_BUSY = 5
VIX_E_NOT_SUPPORTED = 6
VIX_E_FILE_ERROR = 7
VIX_E_DISK_FULL = 8
VIX_E_INCORRECT_FILE_TYPE = 9
VIX_E_CANCELLED = 10
VIX_E_FILE_READ_ONLY = 11
VIX_E_FILE_ALREADY_EXISTS = 12
VIX_E_FILE_ACCESS_ERROR = 13
VIX_E_REQUIRES_LARGE_FILES = 14
VIX_E_FILE_ALREADY_LOCKED = 15
VIX_E_VMDB = 16
VIX_E_NOT_SUPPORTED_ON_REMOTE_OBJECT = 20
VIX_E_FILE_TOO_BIG = 21
VIX_E_FILE_NAME_INVALID = 22
VIX_E_ALREADY_EXISTS = 23
VIX_E_BUFFER_TOOSMALL = 24
VIX_E_OBJECT_NOT_FOUND = 25
VIX_E_HOST_NOT_CONNECTED = 26
VIX_E_INVALID_UTF8_STRING = 27
VIX_E_OPERATION_ALREADY_IN_PROGRESS = 31
VIX_E_UNFINISHED_JOB = 29
VIX_E_NEED_KEY = 30
VIX_E_LICENSE = 32
VIX_E_VM_HOST_DISCONNECTED = 34
VIX_E_AUTHENTICATION_FAIL = 35
VIX_E_HOST_CONNECTION_LOST = 36
VIX_E_DUPLICATE_NAME = 41
VIX_E_INVALID_HANDLE = 1000
VIX_E_NOT_SUPPORTED_ON_HANDLE_TYPE = 1001
VIX_E_TOO_MANY_HANDLES = 1002
VIX_E_NOT_FOUND = 2000
VIX_E_TYPE_MISMATCH = 2001
VIX_E_INVALID_XML = 2002
VIX_E_TIMEOUT_WAITING_FOR_TOOLS = 3000
VIX_E_UNRECOGNIZED_COMMAND = 3001
VIX_E_OP_NOT_SUPPORTED_ON_GUEST = 3003
VIX_E_PROGRAM_NOT_STARTED = 3004
VIX_E_CANNOT_START_READ_ONLY_VM = 3005
VIX_E_VM_NOT_RUNNING = 3006
VIX_E_VM_IS_RUNNING = 3007
VIX_E_CANNOT_CONNECT_TO_VM = 3008
VIX_E_POWEROP_SCRIPTS_NOT_AVAILABLE = 3009
VIX_E_NO_GUEST_OS_INSTALLED = 3010
VIX_E_VM_INSUFFICIENT_HOST_MEMORY = 3011
VIX_E_SUSPEND_ERROR = 3012
VIX_E_VM_NOT_ENOUGH_CPUS = 3013
VIX_E_HOST_USER_PERMISSIONS = 3014
VIX_E_GUEST_USER_PERMISSIONS = 3015
VIX_E_TOOLS_NOT_RUNNING = 3016
VIX_E_GUEST_OPERATIONS_PROHIBITED = 3017
VIX_E_ANON_GUEST_OPERATIONS_PROHIBITED = 3018
VIX_E_ROOT_GUEST_OPERATIONS_PROHIBITED = 3019
VIX_E_MISSING_ANON_GUEST_ACCOUNT = 3023
VIX_E_CANNOT_AUTHENTICATE_WITH_GUEST = 3024
VIX_E_UNRECOGNIZED_COMMAND_IN_GUEST = 3025
VIX_E_CONSOLE_GUEST_OPERATIONS_PROHIBITED = 3026
VIX_E_MUST_BE_CONSOLE_USER = 3027
VIX_E_VMX_MSG_DIALOG_AND_NO_UI = 3028
VIX_E_NOT_ALLOWED_DURING_VM_RECORDING = 3029
VIX_E_NOT_ALLOWED_DURING_VM_REPLAY = 3030
VIX_E_OPERATION_NOT_ALLOWED_FOR_LOGIN_TYPE = 3031
VIX_E_LOGIN_TYPE_NOT_SUPPORTED = 3032
VIX_E_EMPTY_PASSWORD_NOT_ALLOWED_IN_GUEST = 3033
VIX_E_INTERACTIVE_SESSION_NOT_PRESENT = 3034
VIX_E_INTERACTIVE_SESSION_USER_MISMATCH = 3035
VIX_E_UNABLE_TO_REPLAY_VM = 3039
VIX_E_CANNOT_POWER_ON_VM = 3041
VIX_E_NO_DISPLAY_SERVER = 3043
VIX_E_VM_NOT_RECORDING = 3044
VIX_E_VM_NOT_REPLAYING = 3045
VIX_E_VM_NOT_FOUND = 4000
VIX_E_NOT_SUPPORTED_FOR_VM_VERSION = 4001
VIX_E_CANNOT_READ_VM_CONFIG = 4002
VIX_E_TEMPLATE_VM = 4003
VIX_E_VM_ALREADY_LOADED = 4004
VIX_E_VM_ALREADY_UP_TO_DATE = 4006
VIX_E_VM_UNSUPPORTED_GUEST = 4011
VIX_E_UNRECOGNIZED_PROPERTY = 6000
VIX_E_INVALID_PROPERTY_VALUE = 6001
VIX_E_READ_ONLY_PROPERTY = 6002
VIX_E_MISSING_REQUIRED_PROPERTY = 6003
VIX_E_INVALID_SERIALIZED_DATA = 6004
VIX_E_PROPERTY_TYPE_MISMATCH = 6005
VIX_E_BAD_VM_INDEX = 8000
VIX_E_INVALID_MESSAGE_HEADER = 10000
VIX_E_INVALID_MESSAGE_BODY = 10001
VIX_E_SNAPSHOT_INVAL = 13000
VIX_E_SNAPSHOT_DUMPER = 13001
VIX_E_SNAPSHOT_DISKLIB = 13002
VIX_E_SNAPSHOT_NOTFOUND = 13003
VIX_E_SNAPSHOT_EXISTS = 13004
VIX_E_SNAPSHOT_VERSION = 13005
VIX_E_SNAPSHOT_NOPERM = 13006
VIX_E_SNAPSHOT_CONFIG = 13007
VIX_E_SNAPSHOT_NOCHANGE = 13008
VIX_E_SNAPSHOT_CHECKPOINT = 13009
VIX_E_SNAPSHOT_LOCKED = 13010
VIX_E_SNAPSHOT_INCONSISTENT = 13011
VIX_E_SNAPSHOT_NAMETOOLONG = 13012
VIX_E_SNAPSHOT_VIXFILE = 13013
VIX_E_SNAPSHOT_DISKLOCKED = 13014
VIX_E_SNAPSHOT_DUPLICATEDDISK = 13015
VIX_E_SNAPSHOT_INDEPENDENTDISK = 13016
VIX_E_SNAPSHOT_NONUNIQUE_NAME = 13017
VIX_E_SNAPSHOT_MEMORY_ON_INDEPENDENT_DISK = 13018
VIX_E_SNAPSHOT_MAXSNAPSHOTS = 13019
VIX_E_SNAPSHOT_MIN_FREE_SPACE = 13020
VIX_E_SNAPSHOT_HIERARCHY_TOODEEP = 13021
VIX_E_HOST_DISK_INVALID_VALUE = 14003
VIX_E_HOST_DISK_SECTORSIZE = 14004
VIX_E_HOST_FILE_ERROR_EOF = 14005
VIX_E_HOST_NETBLKDEV_HANDSHAKE = 14006
VIX_E_HOST_SOCKET_CREATION_ERROR = 14007
VIX_E_HOST_SERVER_NOT_FOUND = 14008
VIX_E_HOST_NETWORK_CONN_REFUSED = 14009
VIX_E_HOST_TCP_SOCKET_ERROR = 14010
VIX_E_HOST_TCP_CONN_LOST = 14011
VIX_E_HOST_NBD_HASHFILE_VOLUME = 14012
VIX_E_HOST_NBD_HASHFILE_INIT = 14013
VIX_E_DISK_INVAL = 16000
VIX_E_DISK_NOINIT = 16001
VIX_E_DISK_NOIO = 16002
VIX_E_DISK_PARTIALCHAIN = 16003
VIX_E_DISK_NEEDSREPAIR = 16006
VIX_E_DISK_OUTOFRANGE = 16007
VIX_E_DISK_CID_MISMATCH = 16008
VIX_E_DISK_CANTSHRINK = 16009
VIX_E_DISK_PARTMISMATCH = 16010
VIX_E_DISK_UNSUPPORTEDDISKVERSION = 16011
VIX_E_DISK_OPENPARENT = 16012
VIX_E_DISK_NOTSUPPORTED = 16013
VIX_E_DISK_NEEDKEY = 16014
VIX_E_DISK_NOKEYOVERRIDE = 16015
VIX_E_DISK_NOTENCRYPTED = 16016
VIX_E_DISK_NOKEY = 16017
VIX_E_DISK_INVALIDPARTITIONTABLE = 16018
VIX_E_DISK_NOTNORMAL = 16019
VIX_E_DISK_NOTENCDESC = 16020
VIX_E_DISK_NEEDVMFS = 16022
VIX_E_DISK_RAWTOOBIG = 16024
VIX_E_DISK_TOOMANYOPENFILES = 16027
VIX_E_DISK_TOOMANYREDO = 16028
VIX_E_DISK_RAWTOOSMALL = 16029
VIX_E_DISK_INVALIDCHAIN = 16030
VIX_E_DISK_KEY_NOTFOUND = 16052
VIX_E_DISK_SUBSYSTEM_INIT_FAIL = 16053
VIX_E_DISK_INVALID_CONNECTION = 16054
VIX_E_DISK_ENCODING = 16061
VIX_E_DISK_CANTREPAIR = 16062
VIX_E_DISK_INVALIDDISK = 16063
VIX_E_DISK_NOLICENSE = 16064
VIX_E_DISK_NODEVICE = 16065
VIX_E_DISK_UNSUPPORTEDDEVICE = 16066
VIX_E_CRYPTO_UNKNOWN_ALGORITHM = 17000
VIX_E_CRYPTO_BAD_BUFFER_SIZE = 17001
VIX_E_CRYPTO_INVALID_OPERATION = 17002
VIX_E_CRYPTO_RANDOM_DEVICE = 17003
VIX_E_CRYPTO_NEED_PASSWORD = 17004
VIX_E_CRYPTO_BAD_PASSWORD = 17005
VIX_E_CRYPTO_NOT_IN_DICTIONARY = 17006
VIX_E_CRYPTO_NO_CRYPTO = 17007
VIX_E_CRYPTO_ERROR = 17008
VIX_E_CRYPTO_BAD_FORMAT = 17009
VIX_E_CRYPTO_LOCKED = 17010
VIX_E_CRYPTO_EMPTY = 17011
VIX_E_CRYPTO_KEYSAFE_LOCATOR = 17012
VIX_E_CANNOT_CONNECT_TO_HOST = 18000
VIX_E_NOT_FOR_REMOTE_HOST = 18001
VIX_E_INVALID_HOSTNAME_SPECIFICATION = 18002
VIX_E_SCREEN_CAPTURE_ERROR = 19000
VIX_E_SCREEN_CAPTURE_BAD_FORMAT = 19001
VIX_E_SCREEN_CAPTURE_COMPRESSION_FAIL = 19002
VIX_E_SCREEN_CAPTURE_LARGE_DATA = 19003
VIX_E_GUEST_VOLUMES_NOT_FROZEN = 20000
VIX_E_NOT_A_FILE = 20001
VIX_E_NOT_A_DIRECTORY = 20002
VIX_E_NO_SUCH_PROCESS = 20003
VIX_E_FILE_NAME_TOO_LONG = 20004
VIX_E_TOOLS_INSTALL_NO_IMAGE = 21000
VIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE = 21001
VIX_E_TOOLS_INSTALL_NO_DEVICE = 21002
VIX_E_TOOLS_INSTALL_DEVICE_NOT_CONNECTED = 21003
VIX_E_TOOLS_INSTALL_CANCELLED = 21004
VIX_E_TOOLS_INSTALL_INIT_FAILED = 21005
VIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED = 21006
VIX_E_TOOLS_INSTALL_GUEST_NOT_READY = 21007
VIX_E_TOOLS_INSTALL_SIG_CHECK_FAILED = 21008
VIX_E_TOOLS_INSTALL_ERROR = 21009
VIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE = 21010
VIX_E_TOOLS_INSTALL_IN_PROGRESS = 21011
VIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED = 22001
VIX_E_WRAPPER_VERSION_NOT_FOUND = 22002
VIX_E_WRAPPER_SERVICEPROVIDER_NOT_FOUND = 22003
VIX_E_WRAPPER_PLAYER_NOT_INSTALLED = 22004
VIX_E_WRAPPER_RUNTIME_NOT_INSTALLED = 22005
VIX_E_WRAPPER_MULTIPLE_SERVICEPROVIDERS = 22006
VIX_E_MNTAPI_MOUNTPT_NOT_FOUND = 24000
VIX_E_MNTAPI_MOUNTPT_IN_USE = 24001
VIX_E_MNTAPI_DISK_NOT_FOUND = 24002
VIX_E_MNTAPI_DISK_NOT_MOUNTED = 24003
VIX_E_MNTAPI_DISK_IS_MOUNTED = 24004
VIX_E_MNTAPI_DISK_NOT_SAFE = 24005
VIX_E_MNTAPI_DISK_CANT_OPEN = 24006
VIX_E_MNTAPI_CANT_READ_PARTS = 24007
VIX_E_MNTAPI_UMOUNT_APP_NOT_FOUND = 24008
VIX_E_MNTAPI_UMOUNT = 24009
VIX_E_MNTAPI_NO_MOUNTABLE_PARTITONS = 24010
VIX_E_MNTAPI_PARTITION_RANGE = 24011
VIX_E_MNTAPI_PERM = 24012
VIX_E_MNTAPI_DICT = 24013
VIX_E_MNTAPI_DICT_LOCKED = 24014
VIX_E_MNTAPI_OPEN_HANDLES = 24015
VIX_E_MNTAPI_CANT_MAKE_VAR_DIR = 24016
VIX_E_MNTAPI_NO_ROOT = 24017
VIX_E_MNTAPI_LOOP_FAILED = 24018
VIX_E_MNTAPI_DAEMON = 24019
VIX_E_MNTAPI_INTERNAL = 24020
VIX_E_MNTAPI_SYSTEM = 24021
VIX_E_MNTAPI_NO_CONNECTION_DETAILS = 24022
VIX_E_MNTAPI_INCOMPATIBLE_VERSION = 24300
VIX_E_MNTAPI_OS_ERROR = 24301
VIX_E_MNTAPI_DRIVE_LETTER_IN_USE = 24302
VIX_E_MNTAPI_DRIVE_LETTER_ALREADY_ASSIGNED = 24303
VIX_E_MNTAPI_VOLUME_NOT_MOUNTED = 24304
VIX_E_MNTAPI_VOLUME_ALREADY_MOUNTED = 24305
VIX_E_MNTAPI_FORMAT_FAILURE = 24306
VIX_E_MNTAPI_NO_DRIVER = 24307
VIX_E_MNTAPI_ALREADY_OPENED = 24308
VIX_E_MNTAPI_ITEM_NOT_FOUND = 24309
VIX_E_MNTAPI_UNSUPPROTED_BOOT_LOADER = 24310
VIX_E_MNTAPI_UNSUPPROTED_OS = 24311
VIX_E_MNTAPI_CODECONVERSION = 24312
VIX_E_MNTAPI_REGWRITE_ERROR = 24313
VIX_E_MNTAPI_UNSUPPORTED_FT_VOLUME = 24314
VIX_E_MNTAPI_PARTITION_NOT_FOUND = 24315
VIX_E_MNTAPI_PUTFILE_ERROR = 24316
VIX_E_MNTAPI_GETFILE_ERROR = 24317
VIX_E_MNTAPI_REG_NOT_OPENED = 24318
VIX_E_MNTAPI_REGDELKEY_ERROR = 24319
VIX_E_MNTAPI_CREATE_PARTITIONTABLE_ERROR = 24320
VIX_E_MNTAPI_OPEN_FAILURE = 24321
VIX_E_MNTAPI_VOLUME_NOT_WRITABLE = 24322
VIX_E_NET_HTTP_UNSUPPORTED_PROTOCOL = 30001
VIX_E_NET_HTTP_URL_MALFORMAT = 30003
VIX_E_NET_HTTP_COULDNT_RESOLVE_PROXY = 30005
VIX_E_NET_HTTP_COULDNT_RESOLVE_HOST = 30006
VIX_E_NET_HTTP_COULDNT_CONNECT = 30007
VIX_E_NET_HTTP_HTTP_RETURNED_ERROR = 30022
VIX_E_NET_HTTP_OPERATION_TIMEDOUT = 30028
VIX_E_NET_HTTP_SSL_CONNECT_ERROR = 30035
VIX_E_NET_HTTP_TOO_MANY_REDIRECTS = 30047
VIX_E_NET_HTTP_TRANSFER = 30200
VIX_E_NET_HTTP_SSL_SECURITY = 30201
VIX_E_NET_HTTP_GENERIC = 30202
VIX_PROPERTYTYPE_ANY = 0
VIX_PROPERTYTYPE_INTEGER = 1
VIX_PROPERTYTYPE_STRING = 2
VIX_PROPERTYTYPE_BOOL = 3
VIX_PROPERTYTYPE_HANDLE = 4
VIX_PROPERTYTYPE_INT64 = 5
VIX_PROPERTYTYPE_BLOB = 6
VIX_PROPERTY_NONE = 0
VIX_PROPERTY_META_DATA_CONTAINER = 2
VIX_PROPERTY_HOST_HOSTTYPE = 50
VIX_PROPERTY_HOST_API_VERSION = 51
VIX_PROPERTY_VM_NUM_VCPUS = 101
VIX_PROPERTY_VM_VMX_PATHNAME = 103
VIX_PROPERTY_VM_VMTEAM_PATHNAME = 105
VIX_PROPERTY_VM_MEMORY_SIZE = 106
VIX_PROPERTY_VM_READ_ONLY = 107
VIX_PROPERTY_VM_NAME = 108
VIX_PROPERTY_VM_GUESTOS = 109
VIX_PROPERTY_VM_IN_VMTEAM = 128
VIX_PROPERTY_VM_POWER_STATE = 129
VIX_PROPERTY_VM_TOOLS_STATE = 152
VIX_PROPERTY_VM_IS_RUNNING = 196
VIX_PROPERTY_VM_SUPPORTED_FEATURES = 197
VIX_PROPERTY_VM_IS_RECORDING = 236
VIX_PROPERTY_VM_IS_REPLAYING = 237
VIX_PROPERTY_JOB_RESULT_ERROR_CODE = 3000
VIX_PROPERTY_JOB_RESULT_VM_IN_GROUP = 3001
VIX_PROPERTY_JOB_RESULT_USER_MESSAGE = 3002
VIX_PROPERTY_JOB_RESULT_EXIT_CODE = 3004
VIX_PROPERTY_JOB_RESULT_COMMAND_OUTPUT = 3005
VIX_PROPERTY_JOB_RESULT_HANDLE = 3010
VIX_PROPERTY_JOB_RESULT_GUEST_OBJECT_EXISTS = 3011
VIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_ELAPSED_TIME = 3017
VIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_EXIT_CODE = 3018
VIX_PROPERTY_JOB_RESULT_ITEM_NAME = 3035
VIX_PROPERTY_JOB_RESULT_FOUND_ITEM_DESCRIPTION = 3036
VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_COUNT = 3046
VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_HOST = 3048
VIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_FLAGS = 3049
VIX_PROPERTY_JOB_RESULT_PROCESS_ID = 3051
VIX_PROPERTY_JOB_RESULT_PROCESS_OWNER = 3052
VIX_PROPERTY_JOB_RESULT_PROCESS_COMMAND = 3053
VIX_PROPERTY_JOB_RESULT_FILE_FLAGS = 3054
VIX_PROPERTY_JOB_RESULT_PROCESS_START_TIME = 3055
VIX_PROPERTY_JOB_RESULT_VM_VARIABLE_STRING = 3056
VIX_PROPERTY_JOB_RESULT_PROCESS_BEING_DEBUGGED = 3057
VIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_SIZE = 3058
VIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_DATA = 3059
VIX_PROPERTY_JOB_RESULT_FILE_SIZE = 3061
VIX_PROPERTY_JOB_RESULT_FILE_MOD_TIME = 3062
VIX_PROPERTY_JOB_RESULT_EXTRA_ERROR_INFO = 3084
VIX_PROPERTY_FOUND_ITEM_LOCATION = 4010
VIX_PROPERTY_SNAPSHOT_DISPLAYNAME = 4200
VIX_PROPERTY_SNAPSHOT_DESCRIPTION = 4201
VIX_PROPERTY_SNAPSHOT_POWERSTATE = 4205
VIX_PROPERTY_SNAPSHOT_IS_REPLAYABLE = 4207
VIX_PROPERTY_GUEST_SHAREDFOLDERS_SHARES_PATH = 4525
VIX_PROPERTY_VM_ENCRYPTION_PASSWORD = 7001
VIX_EVENTTYPE_JOB_COMPLETED = 2
VIX_EVENTTYPE_JOB_PROGRESS = 3
VIX_EVENTTYPE_FIND_ITEM = 8
VIX_EVENTTYPE_CALLBACK_SIGNALLED = 2
VIX_FILE_ATTRIBUTES_DIRECTORY = 0x0001
VIX_FILE_ATTRIBUTES_SYMLINK = 0x0002
VIX_HOSTOPTION_USE_EVENT_PUMP = 0x0008
VIX_SERVICEPROVIDER_DEFAULT = 1
VIX_SERVICEPROVIDER_VMWARE_SERVER = 2
VIX_SERVICEPROVIDER_VMWARE_WORKSTATION = 3
VIX_SERVICEPROVIDER_VMWARE_PLAYER = 4
VIX_SERVICEPROVIDER_VMWARE_VI_SERVER = 10
VIX_API_VERSION = -1
VIX_FIND_RUNNING_VMS = 1
VIX_FIND_REGISTERED_VMS = 4
VIX_VMOPEN_NORMAL = 0x0
VIX_PUMPEVENTOPTION_NONE = 0
VIX_VMPOWEROP_NORMAL = 0
VIX_VMPOWEROP_FROM_GUEST = 0x0004
VIX_VMPOWEROP_SUPPRESS_SNAPSHOT_POWERON = 0x0080
VIX_VMPOWEROP_LAUNCH_GUI = 0x0200
VIX_VMPOWEROP_START_VM_PAUSED = 0x1000
VIX_VMDELETE_DISK_FILES = 0x0002
VIX_POWERSTATE_POWERING_OFF = 0x0001
VIX_POWERSTATE_POWERED_OFF = 0x0002
VIX_POWERSTATE_POWERING_ON = 0x0004
VIX_POWERSTATE_POWERED_ON = 0x0008
VIX_POWERSTATE_SUSPENDING = 0x0010
VIX_POWERSTATE_SUSPENDED = 0x0020
VIX_POWERSTATE_TOOLS_RUNNING = 0x0040
VIX_POWERSTATE_RESETTING = 0x0080
VIX_POWERSTATE_BLOCKED_ON_MSG = 0x0100
VIX_POWERSTATE_PAUSED = 0x0200
VIX_POWERSTATE_RESUMING = 0x0800
VIX_TOOLSSTATE_UNKNOWN = 0x0001
VIX_TOOLSSTATE_RUNNING = 0x0002
VIX_TOOLSSTATE_NOT_INSTALLED = 0x0004
VIX_VM_SUPPORT_SHARED_FOLDERS = 0x0001
VIX_VM_SUPPORT_MULTIPLE_SNAPSHOTS = 0x0002
VIX_VM_SUPPORT_TOOLS_INSTALL = 0x0004
VIX_VM_SUPPORT_HARDWARE_UPGRADE = 0x0008
VIX_LOGIN_IN_GUEST_REQUIRE_INTERACTIVE_ENVIRONMENT = 0x08
VIX_RUNPROGRAM_RETURN_IMMEDIATELY = 0x0001
VIX_RUNPROGRAM_ACTIVATE_WINDOW = 0x0002
VIX_VM_GUEST_VARIABLE = 1
VIX_VM_CONFIG_RUNTIME_ONLY = 2
VIX_GUEST_ENVIRONMENT_VARIABLE = 3
VIX_SNAPSHOT_REMOVE_CHILDREN = 0x0001
VIX_SNAPSHOT_INCLUDE_MEMORY = 0x0002
VIX_SHAREDFOLDER_WRITE_ACCESS = 0x04
VIX_CAPTURESCREENFORMAT_PNG = 0x01
VIX_CAPTURESCREENFORMAT_PNG_NOCOMPRESS = 0x02
VIX_CLONETYPE_FULL = 0
VIX_CLONETYPE_LINKED = 1
VIX_INSTALLTOOLS_MOUNT_TOOLS_INSTALLER = 0x00
VIX_INSTALLTOOLS_AUTO_UPGRADE = 0x01
VIX_INSTALLTOOLS_RETURN_IMMEDIATELY = 0x02

# functions
vix.Vix_GetErrorText.restype = c_char_p
vix.Vix_GetErrorText.argtypes = [VixError,c_char_p]
vix.Vix_ReleaseHandle.restype = None
vix.Vix_ReleaseHandle.argtypes = [VixHandle]
vix.Vix_AddRefHandle.restype = None
vix.Vix_AddRefHandle.argtypes = [VixHandle]
vix.Vix_GetHandleType.restype = VixHandleType
vix.Vix_GetHandleType.argtypes = [VixHandle]
vix.Vix_GetProperties.restype = VixError
# warning - vix.Vix_GetProperties takes variable argument list
vix.Vix_GetProperties.argtypes = [VixHandle,VixPropertyID]
vix.Vix_GetPropertyType.restype = VixError
vix.Vix_GetPropertyType.argtypes = [VixHandle,VixPropertyID,POINTER(VixPropertyType)]
vix.Vix_FreeBuffer.restype = None
vix.Vix_FreeBuffer.argtypes = [c_void_p]
vix.VixHost_Connect.restype = VixHandle
vix.VixHost_Connect.argtypes = [c_int,VixServiceProvider,c_char_p,c_int,c_char_p,c_char_p,VixHostOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixHost_Disconnect.restype = None
vix.VixHost_Disconnect.argtypes = [VixHandle]
vix.VixHost_RegisterVM.restype = VixHandle
vix.VixHost_RegisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixHost_UnregisterVM.restype = VixHandle
vix.VixHost_UnregisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixHost_FindItems.restype = VixHandle
vix.VixHost_FindItems.argtypes = [VixHandle,VixFindItemType,VixHandle,c_int32,POINTER(VixEventProc),c_void_p]
vix.VixHost_OpenVM.restype = VixHandle
vix.VixHost_OpenVM.argtypes = [VixHandle,c_char_p,VixVMOpenOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.Vix_PumpEvents.restype = None
vix.Vix_PumpEvents.argtypes = [VixHandle,VixPumpEventsOptions]
vix.VixPropertyList_AllocPropertyList.restype = VixError
# warning - vix.VixPropertyList_AllocPropertyList takes variable argument list
vix.VixPropertyList_AllocPropertyList.argtypes = [VixHandle,POINTER(VixHandle),c_int]
vix.VixVM_Open.restype = VixHandle
vix.VixVM_Open.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixVM_PowerOn.restype = VixHandle
vix.VixVM_PowerOn.argtypes = [VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_PowerOff.restype = VixHandle
vix.VixVM_PowerOff.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_Reset.restype = VixHandle
vix.VixVM_Reset.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_Suspend.restype = VixHandle
vix.VixVM_Suspend.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_Pause.restype = VixHandle
vix.VixVM_Pause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_Unpause.restype = VixHandle
vix.VixVM_Unpause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_Delete.restype = VixHandle
vix.VixVM_Delete.argtypes = [VixHandle,VixVMDeleteOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_BeginRecording.restype = VixHandle
vix.VixVM_BeginRecording.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_EndRecording.restype = VixHandle
vix.VixVM_EndRecording.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_BeginReplay.restype = VixHandle
vix.VixVM_BeginReplay.argtypes = [VixHandle,VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_EndReplay.restype = VixHandle
vix.VixVM_EndReplay.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_WaitForToolsInGuest.restype = VixHandle
vix.VixVM_WaitForToolsInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_LoginInGuest.restype = VixHandle
vix.VixVM_LoginInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_LogoutFromGuest.restype = VixHandle
vix.VixVM_LogoutFromGuest.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_RunProgramInGuest.restype = VixHandle
vix.VixVM_RunProgramInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_ListProcessesInGuest.restype = VixHandle
vix.VixVM_ListProcessesInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_KillProcessInGuest.restype = VixHandle
vix.VixVM_KillProcessInGuest.argtypes = [VixHandle,c_uint64,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_RunScriptInGuest.restype = VixHandle
vix.VixVM_RunScriptInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_OpenUrlInGuest.restype = VixHandle
vix.VixVM_OpenUrlInGuest.argtypes = [VixHandle,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_CopyFileFromHostToGuest.restype = VixHandle
vix.VixVM_CopyFileFromHostToGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_CopyFileFromGuestToHost.restype = VixHandle
vix.VixVM_CopyFileFromGuestToHost.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_DeleteFileInGuest.restype = VixHandle
vix.VixVM_DeleteFileInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixVM_FileExistsInGuest.restype = VixHandle
vix.VixVM_FileExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixVM_RenameFileInGuest.restype = VixHandle
vix.VixVM_RenameFileInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_CreateTempFileInGuest.restype = VixHandle
vix.VixVM_CreateTempFileInGuest.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_GetFileInfoInGuest.restype = VixHandle
vix.VixVM_GetFileInfoInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixVM_ListDirectoryInGuest.restype = VixHandle
vix.VixVM_ListDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_CreateDirectoryInGuest.restype = VixHandle
vix.VixVM_CreateDirectoryInGuest.argtypes = [VixHandle,c_char_p,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_DeleteDirectoryInGuest.restype = VixHandle
vix.VixVM_DeleteDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_DirectoryExistsInGuest.restype = VixHandle
vix.VixVM_DirectoryExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixVM_ReadVariable.restype = VixHandle
vix.VixVM_ReadVariable.argtypes = [VixHandle,c_int,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_WriteVariable.restype = VixHandle
vix.VixVM_WriteVariable.argtypes = [VixHandle,c_int,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_GetNumRootSnapshots.restype = VixError
vix.VixVM_GetNumRootSnapshots.argtypes = [VixHandle,POINTER(c_int)]
vix.VixVM_GetRootSnapshot.restype = VixError
vix.VixVM_GetRootSnapshot.argtypes = [VixHandle,c_int,POINTER(VixHandle)]
vix.VixVM_GetCurrentSnapshot.restype = VixError
vix.VixVM_GetCurrentSnapshot.argtypes = [VixHandle,POINTER(VixHandle)]
vix.VixVM_GetNamedSnapshot.restype = VixError
vix.VixVM_GetNamedSnapshot.argtypes = [VixHandle,c_char_p,POINTER(VixHandle)]
vix.VixVM_RemoveSnapshot.restype = VixHandle
vix.VixVM_RemoveSnapshot.argtypes = [VixHandle,VixHandle,VixRemoveSnapshotOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_RevertToSnapshot.restype = VixHandle
vix.VixVM_RevertToSnapshot.argtypes = [VixHandle,VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_CreateSnapshot.restype = VixHandle
vix.VixVM_CreateSnapshot.argtypes = [VixHandle,c_char_p,c_char_p,VixCreateSnapshotOptions,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_EnableSharedFolders.restype = VixHandle
vix.VixVM_EnableSharedFolders.argtypes = [VixHandle,c_byte,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_GetNumSharedFolders.restype = VixHandle
vix.VixVM_GetNumSharedFolders.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_GetSharedFolderState.restype = VixHandle
vix.VixVM_GetSharedFolderState.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_SetSharedFolderState.restype = VixHandle
vix.VixVM_SetSharedFolderState.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_AddSharedFolder.restype = VixHandle
vix.VixVM_AddSharedFolder.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p]
vix.VixVM_RemoveSharedFolder.restype = VixHandle
vix.VixVM_RemoveSharedFolder.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_CaptureScreenImage.restype = VixHandle
vix.VixVM_CaptureScreenImage.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_Clone.restype = VixHandle
vix.VixVM_Clone.argtypes = [VixHandle,VixHandle,VixCloneType,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]
vix.VixVM_UpgradeVirtualHardware.restype = VixHandle
vix.VixVM_UpgradeVirtualHardware.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]
vix.VixVM_InstallTools.restype = VixHandle
vix.VixVM_InstallTools.argtypes = [VixHandle,c_int,c_char_p,POINTER(VixEventProc),c_void_p]
vix.VixJob_Wait.restype = VixError
# warning - vix.VixJob_Wait takes variable argument list
vix.VixJob_Wait.argtypes = [VixHandle,VixPropertyID]
vix.VixJob_CheckCompletion.restype = VixError
vix.VixJob_CheckCompletion.argtypes = [VixHandle,POINTER(c_byte)]
vix.VixJob_GetError.restype = VixError
vix.VixJob_GetError.argtypes = [VixHandle]
vix.VixJob_GetNumProperties.restype = c_int
vix.VixJob_GetNumProperties.argtypes = [VixHandle,c_int]
vix.VixJob_GetNthProperties.restype = VixError
# warning - vix.VixJob_GetNthProperties takes variable argument list
vix.VixJob_GetNthProperties.argtypes = [VixHandle,c_int,c_int]
vix.VixSnapshot_GetNumChildren.restype = VixError
vix.VixSnapshot_GetNumChildren.argtypes = [VixHandle,POINTER(c_int)]
vix.VixSnapshot_GetChild.restype = VixError
vix.VixSnapshot_GetChild.argtypes = [VixHandle,c_int,POINTER(VixHandle)]
vix.VixSnapshot_GetParent.restype = VixError
vix.VixSnapshot_GetParent.argtypes = [VixHandle,POINTER(VixHandle)]
</snippet></ROW><ROW><id>3690050</id><snippet>  Abstract
  |--------|
           |Ambient , Anisotropic,(Approximation, Attenuation)
                                        |
                                        of
                                        |
                                   xxxx      yyyy
                                     |         |
                                   using       for
</snippet></ROW><ROW><id>3690154</id><snippet>conditions = dict(word__startswith = 'A', length = 5)
Word.objects.filter(**conditions)
</snippet></ROW><ROW><id>3690154</id><snippet>Word</snippet></ROW><ROW><id>3690154</id><snippet>A</snippet></ROW><ROW><id>3690154</id><snippet>strpos</snippet></ROW><ROW><id>3690154</id><snippet>contains, position = 'A', 3
where = ["strpos(word, '%s') = %s" % (contains, position)]
Word.objects.filter(length = 4, word__contains = contains).extra(where = where)
</snippet></ROW><ROW><id>3690211</id><snippet>publish.py</snippet></ROW><ROW><id>3690211</id><snippet># publish.py
def authorise_application(user):
    # API call "User joined app."

def post_anwser(anwser):
    # API call "User posted anwser to quiz".
</snippet></ROW><ROW><id>3690211</id><snippet># views.py
def post_anwser(request):
    ...
    if form.is_valid():
        form.save()
        publish.post_anwser(form.instance)
</snippet></ROW><ROW><id>3690211</id><snippet># publish.py
def ignore_api_error(fun):
    def res(*args, **kwargs):
        try:
            return fun(*args, **kwargs):
        except someservice.ApiError:
            return None
    return res

@ignore_api_error
def authorised_application(user):
    # API call "User joined app."

@ignore_api_error
def posted_anwser(user, anwser):
    # API call "User posted anwser to quiz".
</snippet></ROW><ROW><id>3690211</id><snippet># publish.py
def some_function(user, message):
    pass

# views.py
def my_view():
    ...
    publish.ignore_api_error(publish.some_function)(user, message)
    ...
</snippet></ROW><ROW><id>3690856</id><snippet>group = Group.objects.get(pk=group_id)
contacts_in_group = Contact.objects.filter(group=group)
</snippet></ROW><ROW><id>3690856</id><snippet>group = Group.objects.get(pk=group_id)
contacts_in_group = group.contact_set.all() 
</snippet></ROW><ROW><id>3690856</id><snippet>contact_set</snippet></ROW><ROW><id>3690856</id><snippet>related_name</snippet></ROW><ROW><id>3690856</id><snippet>related_name</snippet></ROW><ROW><id>3690856</id><snippet>related_name='contacts'</snippet></ROW><ROW><id>3690856</id><snippet>group.contacts.all()</snippet></ROW><ROW><id>3690856</id><snippet>the_group = Group.objects.get(pk=the_group_id)
newcontact = Contact()
...fill in various details of your Contact here...
newcontact.group = the_group
newcontact.save() 
</snippet></ROW><ROW><id>3691005</id><snippet>is_owned_by(user)</snippet></ROW><ROW><id>3691005</id><snippet>is_owned_by</snippet></ROW><ROW><id>3691005</id><snippet>class RentalPhoto(BaseModel):
    def is_owned_by(self, user):
        return self.rental.is_owned_by(user)
</snippet></ROW><ROW><id>3691005</id><snippet>class Rental(models.Model):
    # ...
    class Meta:
        permissions = (
            ("can_edit_any", "Can edit any rentals"),
        )
</snippet></ROW><ROW><id>3691005</id><snippet>any</snippet></ROW><ROW><id>3691005</id><snippet>own</snippet></ROW><ROW><id>3691005</id><snippet>own</snippet></ROW><ROW><id>3691005</id><snippet>can_edit</snippet></ROW><ROW><id>3691005</id><snippet>class PerObjectBackend(ModelBackend):

    def has_perm(self, user_obj, perm, obj=None):
        allowed = ModelBackend.has_perm(self, user_obj, perm)
        if perm.find('any') &gt;=0 :
            return allowed

        if perm.find('edit') &gt;=0 or perm.find('delete') &gt;=0:
            if obj is None:
                raise Exception("Perm '%s' needs an object"%perm)
            if not obj.is_owned_by(user_obj):
                return False

        return allowed
</snippet></ROW><ROW><id>3691005</id><snippet>permission.is_per_object</snippet></ROW><ROW><id>3691117</id><snippet>__repr__</snippet></ROW><ROW><id>3691117</id><snippet>repr()</snippet></ROW><ROW><id>3691117</id><snippet>__str__</snippet></ROW><ROW><id>3691117</id><snippet>str()</snippet></ROW><ROW><id>3691117</id><snippet>__str__</snippet></ROW><ROW><id>3691117</id><snippet>__str__</snippet></ROW><ROW><id>3691117</id><snippet>&lt;Model object&gt;</snippet></ROW><ROW><id>3691117</id><snippet>__repr__</snippet></ROW><ROW><id>3691117</id><snippet>__str__</snippet></ROW><ROW><id>3691117</id><snippet>BaseSet</snippet></ROW><ROW><id>3691117</id><snippet>sets.py</snippet></ROW><ROW><id>3691117</id><snippet>def __repr__(self):
    """Return string representation of a set.

    This looks like 'Set([&lt;list of elements&gt;])'.
    """
    return self._repr()

# __str__ is the same as __repr__
__str__ = __repr__
</snippet></ROW><ROW><id>3691493</id><snippet>itertools.product(*[xrange(i, i+j) for i,j in zip(start, size)])
</snippet></ROW><ROW><id>3691652</id><snippet>setup.py</snippet></ROW><ROW><id>3691652</id><snippet>setup.py</snippet></ROW><ROW><id>3691652</id><snippet>basic</snippet></ROW><ROW><id>3691652</id><snippet>setup.py</snippet></ROW><ROW><id>3691652</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>3691652</id><snippet>setup.py</snippet></ROW><ROW><id>3691652</id><snippet>setup.py</snippet></ROW><ROW><id>3691652</id><snippet>template_patterns = [
    'templates/*.html',
    'templates/*/*.html',
    'templates/*/*/*.html',
    ]
</snippet></ROW><ROW><id>3691652</id><snippet>setup()</snippet></ROW><ROW><id>3691652</id><snippet>...
packages=packages,
package_data=dict( (package_name, template_patterns)
                   for package_name in packages ))
</snippet></ROW><ROW><id>3691652</id><snippet>setup()</snippet></ROW><ROW><id>3691652</id><snippet>templates</snippet></ROW><ROW><id>3691815</id><snippet>import sys

def error(message):
    sys.stderr.write("error: %s\n" % message)
    sys.exit(1)
</snippet></ROW><ROW><id>3691815</id><snippet>logging</snippet></ROW><ROW><id>3691815</id><snippet>def error(message):
    logging.error('error: ', message)
    sys.exit(1)
</snippet></ROW><ROW><id>3691978</id><snippet>import sys
print(sys.path[0])
</snippet></ROW><ROW><id>3692022</id><snippet>"attach \"%s\" as toMerge" % "b.db"
</snippet></ROW><ROW><id>3692022</id><snippet>'</snippet></ROW><ROW><id>3692022</id><snippet>"</snippet></ROW><ROW><id>3692022</id><snippet>'attach "{0}" as toMerge'.format("b.db")
</snippet></ROW><ROW><id>3692022</id><snippet>"attach ? as toMerge"; cursor.execute(cmd, ('b.db', ))
</snippet></ROW><ROW><id>3692197</id><snippet>import module1
import unittest

class MyTest(unittest.TestCase):
    def setUp(self):
        # Replace othermod.function with our own mock
        self.old_func1 = module1.func1
        module1.func1 = self.my_new_func1

    def tearDown(self):
        module1.func1 = self.old_func1

    def my_new_func1(self, x):
        """A mock othermod.function just for our tests."""
        return True

    def test_func1(self):
        module1.func1("arg1")
</snippet></ROW><ROW><id>3692372</id><snippet>def outerFunction():
    class Helper:
        val = None
    helper = Helper()

    def innerFunction():
        helper.val = "some value"
</snippet></ROW><ROW><id>3692372</id><snippet>helper</snippet></ROW><ROW><id>3692372</id><snippet>innerFunction</snippet></ROW><ROW><id>3692428</id><snippet>os.system('ssh [...]')</snippet></ROW><ROW><id>3692442</id><snippet>for key, value in legJointConnectors.iteritems():
    if side != 'L':
        key = 'R_' + key[2:]
        value = ['R_' + v[2:] for v in value]
    cmds.connectJoint(value, key, pm=True)
</snippet></ROW><ROW><id>3692442</id><snippet>v.replace('L_', 'R_')</snippet></ROW><ROW><id>3692442</id><snippet>'R_' + v[2:]</snippet></ROW><ROW><id>3692646</id><snippet>triple</snippet></ROW><ROW><id>3692646</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>3692646</id><snippet>from StringIO import StringIO
import numpy as np

txt_data = """
1\t2\t3
4\t\t6
7t\8t\9"""

infile = StringIO(txt_data)
data = np.genfromtxt(infile, usemask=True, delimiter='\t')
</snippet></ROW><ROW><id>3692646</id><snippet>masked_array(data =
 [[1.0 2.0 3.0]
 [4.0 -- 6.0]
 [7.0 8.0 9.0]],
             mask =
 [[False False False]
 [False  True False]
 [False False False]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>3692646</id><snippet>genfromtxt</snippet></ROW><ROW><id>3692646</id><snippet>line.strip().split(delimiter)</snippet></ROW><ROW><id>3692646</id><snippet>"xxx"</snippet></ROW><ROW><id>3692794</id><snippet>easy-rsa</snippet></ROW><ROW><id>3692794</id><snippet>subprocess</snippet></ROW><ROW><id>3692794</id><snippet>build-key</snippet></ROW><ROW><id>3692934</id><snippet>list</snippet></ROW><ROW><id>3692934</id><snippet>numbers = forms.ChoiceField(list)
</snippet></ROW><ROW><id>3692993</id><snippet>QLabel *label = new QLabel(phononWidget);
label-&gt;setText("Text over video!");
</snippet></ROW><ROW><id>3692993</id><snippet>QGraphicsTextItem</snippet></ROW><ROW><id>3692993</id><snippet>QGLWidget</snippet></ROW><ROW><id>3692993</id><snippet>QGraphicsScene *scene = new QGraphicsScene(this);

Phonon::VideoPlayer *v = new Phonon::VideoPlayer();
v-&gt;load(Phonon::MediaSource("video_file"));

QGraphicsProxyWidget *pvideoWidget = scene-&gt;addWidget(v);

QGraphicsView *view = new QGraphicsView(scene);
view-&gt;setViewport(new QGLWidget); //Enable hardware acceleration!

QGraphicsTextItem *label = new QGraphicsTextItem("Text Over Video!", pvideoWidget);
label-&gt;moveBy(100, 100);

v-&gt;play();
</snippet></ROW><ROW><id>3693050</id><snippet>with open("filename", "rtU") as f:
    columns = f.readline().strip().split(" ")
    numRows = 0
    sums = [0] * len(columns)

    for line in f:
        # Skip empty lines
        if not line.strip():
            continue

        values = line.split(" ")
        for i in xrange(len(values)):
            sums[i] += int(values[i])
        numRows += 1

    for index, summedRowValue in enumerate(sums):
        print columns[index], 1.0 * summedRowValue / numRows
</snippet></ROW><ROW><id>3693119</id><snippet>timeout_add</snippet></ROW><ROW><id>3693119</id><snippet>recv</snippet></ROW><ROW><id>3693690</id><snippet>mkdir -p /home/path</snippet></ROW><ROW><id>3693690</id><snippet>file.txt</snippet></ROW><ROW><id>3693778</id><snippet>s[:1] == s[-1:] == '"'</snippet></ROW><ROW><id>3693778</id><snippet>s</snippet></ROW><ROW><id>3693778</id><snippet>if s[:1] == s[-1:] == '"':
    s = s[1:-1]
</snippet></ROW><ROW><id>3693778</id><snippet>s</snippet></ROW><ROW><id>3693778</id><snippet>s</snippet></ROW><ROW><id>3693784</id><snippet>with</snippet></ROW><ROW><id>3693784</id><snippet>try</snippet></ROW><ROW><id>3693784</id><snippet>except</snippet></ROW><ROW><id>3693784</id><snippet>try</snippet></ROW><ROW><id>3693784</id><snippet>finally</snippet></ROW><ROW><id>3693784</id><snippet>class Mgr(object):
    def __enter__(self): pass
    def __exit__(self, ext, exv, trb):
        if ext is not None: print "no not possible"
        print "OK I caught you"
        return True

with Mgr():
    name='rubicon'/2 #to raise an exception
</snippet></ROW><ROW><id>3693784</id><snippet>return True</snippet></ROW><ROW><id>3693784</id><snippet>except</snippet></ROW><ROW><id>3693956</id><snippet>import subprocess
# ...
pid = subprocess.Popen(["/usr/bin/python2.7", "res.py"]).pid
</snippet></ROW><ROW><id>3693956</id><snippet>crontab -e</snippet></ROW><ROW><id>3693956</id><snippet>*    *    *    *    *    /usr/bin/python2.7  script_to_execute.py &gt;/dev/null 2&gt;&amp;1
</snippet></ROW><ROW><id>3694045</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.defaultdict(list)
&gt;&gt;&gt; d['foo'].append(9)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'foo': [9]})
&gt;&gt;&gt; d['foo'].append(90)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'foo': [9, 90]})
&gt;&gt;&gt; d['bar'].append(5)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'foo': [9, 90], 'bar': [5]})
</snippet></ROW><ROW><id>3694207</id><snippet>.cbr</snippet></ROW><ROW><id>3694207</id><snippet>.cbt</snippet></ROW><ROW><id>3694207</id><snippet>tarfile</snippet></ROW><ROW><id>3694207</id><snippet>rar</snippet></ROW><ROW><id>3694207</id><snippet>unrar</snippet></ROW><ROW><id>3694207</id><snippet>archive.py</snippet></ROW><ROW><id>3694393</id><snippet>class X(object):
  def __init__(self, x):
    pass

  def doit(self, bar):
    pass

class Y(X):
  def __init__(self):
    super(Y, self).__init__(123)

  def doit(self, foo):
    return super(Y, self).doit(foo)
</snippet></ROW><ROW><id>3694393</id><snippet>def doit(self, foo):
  return X.foo(self, foo)
</snippet></ROW><ROW><id>3694496</id><snippet>datetime.datetime.fromtimestamp</snippet></ROW><ROW><id>3694496</id><snippet>time.gmtime</snippet></ROW><ROW><id>3694496</id><snippet>&gt;&gt;&gt; datetime.datetime.fromtimestamp(1284286794)
datetime.datetime(2010, 9, 12, 11, 19, 54)
</snippet></ROW><ROW><id>3694496</id><snippet>&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(1284286794)
datetime.datetime(2010, 9, 12, 10, 19, 54)
</snippet></ROW><ROW><id>3694600</id><snippet>def Input():
    global data
    c = raw_input ('Enter data1,data2: ')
    data = c.split(',')
    return data
</snippet></ROW><ROW><id>3694600</id><snippet>global data</snippet></ROW><ROW><id>3694600</id><snippet>data</snippet></ROW><ROW><id>3694600</id><snippet>Input()</snippet></ROW><ROW><id>3694600</id><snippet>data</snippet></ROW><ROW><id>3694685</id><snippet>WSGIErrorOverride On
</snippet></ROW><ROW><id>3694736</id><snippet>class GalleryAdmin(admin.ModelAdmin):

    form = GalleryForm

    def __init__(self, model, admin_site):
        self.form.admin_site = admin_site 
        super(GalleryAdmin, self).__init__(model, admin_site)
</snippet></ROW><ROW><id>3694736</id><snippet>class GalleryForm(ModelForm):

    photos = ThumbnailChoiceField(queryset=Photo.objects.all(), label='Photos', widget=MyWidget(), required=False)

    def __init__(self, *args, **kwargs):
        super(GalleryForm, self).__init__(*args, **kwargs)
        rel = ManyToOneRel(self.instance.photos.model, 'id') 
        self.fields['photos'].widget = RelatedFieldWidgetWrapper(self.fields['photos'].widget, rel, self.admin_site) 
</snippet></ROW><ROW><id>3694895</id><snippet>.total_seconds()</snippet></ROW><ROW><id>3694895</id><snippet>&gt;&gt;&gt; down_time.total_seconds() / server_life_period.total_seconds()
0.0003779903727652387
</snippet></ROW><ROW><id>3694895</id><snippet>&gt;&gt;&gt; def get_total_seconds(td): return (td.microseconds + (td.seconds + td.days * 24 * 3600) * 1e6) / 1e6
... 
&gt;&gt;&gt; get_total_seconds(down_time) / get_total_seconds(server_life_period)
0.0003779903727652387
</snippet></ROW><ROW><id>3695047</id><snippet>HEAD /stackoverflow/img/favicon.ico HTTP/1.1
host: sstatic.net

HTTP/1.1 200 OK
Cache-Control: max-age=604800
Content-Length: 1150
Content-Type: image/x-icon
Last-Modified: Mon, 02 Aug 2010 06:04:04 GMT
Accept-Ranges: bytes
ETag: "2187d82832cb1:0"
X-Powered-By: ASP.NET
Date: Sun, 12 Sep 2010 13:38:36 GMT
</snippet></ROW><ROW><id>3695047</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("sstatic.net")
&gt;&gt;&gt; conn.request("HEAD", "/stackoverflow/img/favicon.ico")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.getheaders()
[('content-length', '1150'), ('x-powered-by', 'ASP.NET'), ('accept-ranges', 'bytes'), ('last-modified', 'Mon, 02 Aug 2010 06:04:04 GMT'), ('etag', '"2187d82832cb1:0"'), ('cache-control', 'max-age=604800'), ('date', 'Sun, 12 Sep 2010 13:39:26 GMT'), ('content-type', 'image/x-icon')]
</snippet></ROW><ROW><id>3695262</id><snippet>${url.current()}
</snippet></ROW><ROW><id>3695262</id><snippet>${url.environ['pylons.routes_dict']['controller']}
${url.environ['pylons.routes_dict']['action']}
</snippet></ROW><ROW><id>3695448</id><snippet>np.fft.fftfreq</snippet></ROW><ROW><id>3695448</id><snippet>import numpy as np

x= np.array([1,2,1,0,1,2,1,0])
w = np.fft.fft(x)
freqs = np.fft.fftfreq(len(x))

for coef,freq in zip(w,freqs):
    if coef:
        print('{c:&gt;6} * exp(2 pi i t * {f})'.format(c=coef,f=freq))

# (8+0j) * exp(2 pi i t * 0.0)
#    -4j * exp(2 pi i t * 0.25)
#     4j * exp(2 pi i t * -0.25)
</snippet></ROW><ROW><id>3695448</id><snippet>frequency (Hz) = abs(fft_freq * frame_rate)</snippet></ROW><ROW><id>3695448</id><snippet>import math
import wave
import struct

if __name__=='__main__':
    # http://stackoverflow.com/questions/3637350/how-to-write-stereo-wav-files-in-python
    # http://www.sonicspot.com/guide/wavefiles.html
    freq=440.0
    data_size=40000
    fname="test.wav"
    frate=11025.0 
    amp=64000.0   
    nchannels=1
    sampwidth=2
    framerate=int(frate)
    nframes=data_size
    comptype="NONE"
    compname="not compressed"
    data=[math.sin(2*math.pi*freq*(x/frate))
          for x in range(data_size)]
    wav_file=wave.open(fname, 'w')    
    wav_file.setparams((nchannels,sampwidth,framerate,nframes,comptype,compname))
    for v in data:
        wav_file.writeframes(struct.pack('h', int(v*amp/2)))
    wav_file.close()
</snippet></ROW><ROW><id>3695448</id><snippet>test.wav</snippet></ROW><ROW><id>3695448</id><snippet>import wave
import struct
import numpy as np

if __name__=='__main__':
    data_size=40000
    fname="test.wav"
    frate=11025.0 
    wav_file=wave.open(fname,'r')
    data=wav_file.readframes(data_size)
    wav_file.close()
    data=struct.unpack('{n}h'.format(n=data_size), data)
    data=np.array(data)

    w = np.fft.fft(data)
    freqs = np.fft.fftfreq(len(w))
    print(freqs.min(),freqs.max())
    # (-0.5, 0.499975)

    # Find the peak in the coefficients
    idx=np.argmax(np.abs(w)**2)
    freq=freqs[idx]
    freq_in_hertz=abs(freq*frate)
    print(freq_in_hertz)
    # 439.8975
</snippet></ROW><ROW><id>3695477</id><snippet>image</snippet></ROW><ROW><id>3695477</id><snippet>self.window.add(image)
</snippet></ROW><ROW><id>3695477</id><snippet>button</snippet></ROW><ROW><id>3695477</id><snippet># an image widget to contain the pixmap
image = gtk.Image()
image.set_from_pixmap(pixmap, mask)
image.show()

# a button to contain the image widget
button = gtk.Button()
button.add(image)
window.add(button)
button.show()

button.connect("clicked", self.button_clicked)
</snippet></ROW><ROW><id>3695528</id><snippet>scipy.sparse.spdiags</snippet></ROW><ROW><id>3695528</id><snippet>scipy.sparse.dia_matrix</snippet></ROW><ROW><id>3695528</id><snippet>scipy.sparse.lil_diags</snippet></ROW><ROW><id>3695528</id><snippet>spdiags</snippet></ROW><ROW><id>3695528</id><snippet>import numpy as np
import scipy as sp
import scipy.sparse

x = np.arange(10)

# "0" here indicates the main diagonal...
# "y" will be a dia_matrix type of sparse array, by default
y = sp.sparse.spdiags(x, 0, x.size, x.size)
</snippet></ROW><ROW><id>3695630</id><snippet>some_unicode.encode('utf-8', 'ignore')</snippet></ROW><ROW><id>3695630</id><snippet>result = fetch('http://google.com') 
content_type = result.headers['Content-Type'] # figure out what you just fetched
ctype, charset = content_type.split(';')
encoding = charset[len(' charset='):] # get the encoding
print encoding # ie ISO-8859-1
utext = result.content.decode(encoding) # now you have unicode
text = utext.encode('utf8', 'ignore') # encode to uft8
</snippet></ROW><ROW><id>3695777</id><snippet>divisors = {'B': 1, 'M': 1000}
def fn(number):
    if number[-1] in divisors:
        return str(float(number[:-1]) / divisors[number[-1]])
    return number

map(fn, ['34.00B', '65.89B', '346M'])
</snippet></ROW><ROW><id>3695816</id><snippet>{{form.errors}}</snippet></ROW><ROW><id>3695816</id><snippet>def __init__(self,numbers,*args, **kwargs)
</snippet></ROW><ROW><id>3695816</id><snippet>filter = FilterForm(request.POST)
</snippet></ROW><ROW><id>3695816</id><snippet>numbers</snippet></ROW><ROW><id>3695816</id><snippet>numbers</snippet></ROW><ROW><id>3696006</id><snippet>def convertSVG(self, file): 
    dom = self._getsvgdom(file) 
    print dom 
    self._switchGlyphsForPaths(dom) 
    self._commitSVG(file, dom) 
def _commitSVG(self, file, dom): 
    f = open(file, 'w') 
    dom.writexml(f) 
    f.close() 
def _getsvgdom(self, file): 
    print 'getting DOM model' 
    import xml.dom 
    import xml.dom.minidom as mini 
    f = open(file, 'r') 
    svg = f.read() 
    f.close() 
    dom = mini.parseString(svg) 
    return dom 
def _getGlyphPaths(self, dom): 
    symbols = dom.getElementsByTagName('symbol') 
    glyphPaths = {} 
    for s in symbols: 
        pathNode = [p for p in s.childNodes if 'tagName' in dir(p) and p.tagName == 'path'] 
        glyphPaths[s.getAttribute('id')] = pathNode[0].getAttribute('d') 
    return glyphPaths 
def _switchGlyphsForPaths(self, dom): 
    glyphs = self._getGlyphPaths(dom) 
    use = self._getUseTags(dom) 
    for glyph in glyphs.keys(): 
        print glyph 
        nl = self.makeNewList(glyphs[glyph].split(' ')) 
        u = self._matchUseGlyphs(use, glyph) 
        for u2 in u: 
            print u2, 'brefore' 
            self._convertUseToPath(u2, nl) 
            print u2, 'after' 

def _getUseTags(self, dom): 
    return dom.getElementsByTagName('use') 
def _matchUseGlyphs(self, use, glyph): 
    matches = [] 
    for i in use: 
        print i.getAttribute('xlink:href') 
        if i.getAttribute('xlink:href') == '#'+glyph: 
            matches.append(i) 
    print matches 
    return matches 
def _convertUseToPath(self, use, strokeD): 
    ## strokeD is a list of lists of strokes to make the glyph 
    newD = self.nltostring(self.resetStrokeD(strokeD, use.getAttribute('x'), use.getAttribute('y'))) 
    use.tagName = 'path' 
    use.removeAttribute('xlink:href') 
    use.removeAttribute('x') 
    use.removeAttribute('y') 
    use.setAttribute('style', 'fill: rgb(0%,0%,0%); stroke-width: 0.5; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(0%,0%,0%); stroke-opacity: 1;stroke-miterlimit: 10; ') 
    use.setAttribute('d', newD) 
def makeNewList(self, inList): 
    i = 0 
    nt = [] 
    while i &lt; len(inList): 
        start = i + self.listFind(inList[i:], ['M', 'L', 'C', 'Z']) 
        end = start + self.listFind(inList[start+1:], ['M', 'L', 'C', 'Z', '', ' ']) 
        nt.append(inList[start:end+1]) 
        i = end + 1 
    return nt 
def listFind(self, x, query): 
    for i in range(len(x)): 
        if x[i] in query: 
            return i 
    return len(x) 
def resetStrokeD(self, strokeD, x, y): 
    nsd = [] 
    for i in strokeD: 
        nsd.append(self.resetXY(i, x, y)) 
    return nsd 
def resetXY(self, nl, x, y): # convert a list of strokes to xy coords 
    nl2 = [] 
    for i in range(len(nl)): 
        if i == 0: 
            nl2.append(nl[i]) 
        elif i%2: # it's odd 
            nl2.append(float(nl[i]) + float(x)) 
        elif not i%2: # it's even 
            nl2.append(float(nl[i]) + float(y)) 
        else: 
            print i, nl[i], 'error' 
    return nl2 
def nltostring(self, nl): # convert a colection of nl's to a string 
    col = [] 
    for l in nl: 
        templ = [] 
        for c in l: 
            templ.append(str(c)) 
        templ = ' '.join(templ) 
        col.append(templ) 
    return ' '.join(col)
</snippet></ROW><ROW><id>3696130</id><snippet>PATH="/Library/Frameworks/Python.framework/Versions/3.1/bin:${PATH}" 
export PATH
</snippet></ROW><ROW><id>3696130</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>3696146</id><snippet>### !!! This is an example of what not to do!
### !!! Don't do this!
if os.access("test", os.W_OK):
    # And in here, some jerk does chmod 000 test
    open("test", "w").write(my_data)
    # Exception happens despite os.access!
</snippet></ROW><ROW><id>3696262</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>3696342</id><snippet>try:
    from decorator import decorator
except ImportError:
    # No decorator package available. Create a no-op "decorator".
    def decorator(f):
        return f
</snippet></ROW><ROW><id>3696456</id><snippet>CODE={
    'ENDC':0,  # RESET COLOR
    'BOLD':1,
    'UNDERLINE':4,
    'BLINK':5,
    'INVERT':7,
    'CONCEALD':8,
    'STRIKE':9,
    'GREY30':90,
    'GREY40':2,
    'GREY65':37,
    'GREY70':97,
    'GREY20_BG':40,
    'GREY33_BG':100,
    'GREY80_BG':47,
    'GREY93_BG':107,
    'DARK_RED':31,
    'RED':91,
    'RED_BG':41,
    'LIGHT_RED_BG':101,
    'DARK_YELLOW':33,
    'YELLOW':93,
    'YELLOW_BG':43,
    'LIGHT_YELLOW_BG':103,
    'DARK_BLUE':34,
    'BLUE':94,
    'BLUE_BG':44,
    'LIGHT_BLUE_BG':104,
    'DARK_MAGENTA':35,
    'PURPLE':95,
    'MAGENTA_BG':45,
    'LIGHT_PURPLE_BG':105,
    'DARK_CYAN':36,
    'AUQA':96,
    'CYAN_BG':46,
    'LIGHT_AUQA_BG':106,
    'DARK_GREEN':32,
    'GREEN':92,
    'GREEN_BG':42,
    'LIGHT_GREEN_BG':102,
    'BLACK':30,
}

def termcode(num):
    return '\033[%sm'%num

def colorstr(astr,color):
    return termcode(CODE[color])+astr+termcode(CODE['ENDC'])

if __name__=='__main__':
    astr='yippy skippy'
    # for num in range(300):
    #     color=termcode(num)
    #     print('%s: %s'%(num,color+astr+termcode(CODE['ENDC'])))
    for key in sorted(CODE.keys()):
        print('%s: %s'%(key,colorstr(astr,key)))

    print(colorstr('Red','RED'))
</snippet></ROW><ROW><id>3696456</id><snippet>colorstr</snippet></ROW><ROW><id>3696456</id><snippet>import logging
import copy

logger=logging.getLogger(__name__)

class ColoredFormatter(logging.Formatter):
    # A variant of code found at http://stackoverflow.com/questions/384076/how-can-i-make-the-python-logging-output-to-be-colored
    LEVELCOLOR = {
        'DEBUG': 'BLUE',
        'INFO': 'BLACK',
        'WARNING': 'PURPLE',
        'ERROR': 'RED',
        'CRITICAL': 'RED_BG',
        }

    def __init__(self, msg):
        logging.Formatter.__init__(self, msg)

    def format(self, record):
        record = copy.copy(record)
        levelname = record.levelname
        if levelname in self.LEVELCOLOR:
            record.levelname = colorstr(levelname,self.LEVELCOLOR[levelname])
            record.name = colorstr(record.name,'BOLD')
            record.msg = colorstr(record.msg,self.LEVELCOLOR[levelname])
        return logging.Formatter.format(self, record)

if __name__=='__main__':
    logger.setLevel(logging.DEBUG)
    console = logging.StreamHandler()
    console.setFormatter(
        ColoredFormatter('%(name)s: %(message)s (%(filename)s:%(lineno)d)'))
    logger.addHandler(console)
    fh = logging.FileHandler('/tmp/test.log','w')
    fh.setFormatter(logging.Formatter('%(name)s: %(message)s'))
    logger.addHandler(fh)

    logger.debug('debug')
    logger.info('info')
    logger.warning('Warning')
    logger.error('ERROR')
    logger.critical('CRITICAL!!!')
</snippet></ROW><ROW><id>3696456</id><snippet>stderr</snippet></ROW><ROW><id>3696456</id><snippet>/tmp/test.log</snippet></ROW><ROW><id>3696529</id><snippet>filter.fields['fieldA'].initial = filters['filterA']
</snippet></ROW><ROW><id>3696677</id><snippet>  def fn(tup):
        number = tup[1]
        divisors = {'B': 1, 'M': 1000}
        if number[-1] in divisors:
            return (tup[0], float(number[:-1]) / divisors[number[-1]])
        else:
            return tup
</snippet></ROW><ROW><id>3696677</id><snippet>sorted</snippet></ROW><ROW><id>3696677</id><snippet>key</snippet></ROW><ROW><id>3696677</id><snippet>MC = sorted(map(fn, MC), key=lambda x: x[0])
</snippet></ROW><ROW><id>3696677</id><snippet>MC = sorted(map(fn, MC), key=lambda x: x[1] ) 
</snippet></ROW><ROW><id>3696677</id><snippet>reversed=True</snippet></ROW><ROW><id>3696677</id><snippet>reversed</snippet></ROW><ROW><id>3696677</id><snippet>MC = sorted(map(fn, MC), key=lambda x: x[1], reversed=True)
</snippet></ROW><ROW><id>3696783</id><snippet>from struct import *

def FindDateTimeOffsetFromCR2( buffer, ifd_offset ):
    # Read the number of entries in IFD #0
    (num_of_entries,) = unpack_from('H', buffer, ifd_offset)
    print "ifd #0 contains %d entries"%num_of_entries

    # Work out where the date time is stored
    datetime_offset = -1
    for entry_num in range(0,num_of_entries-1):
        (tag_id, tag_type, num_of_value, value) = unpack_from('HHLL', buffer, ifd_offset+2+entry_num*12)
        if tag_id == 0x0132:
            print "found datetime at offset %d"%value
            datetime_offset = value
    return datetime_offset

if __name__ == '__main__':
    with open("IMG_6113.CR2", "rb") as f:
        buffer = f.read(1024) # read the first 1kb of the file should be enough to find the date / time
        datetime_offset = FindDateTimeOffsetFromCR2(buffer, 0x10)
        print unpack_from(20*'s', buffer, datetime_offset)
</snippet></ROW><ROW><id>3696783</id><snippet>ifd #0 contains 14 entries
found datetime at offset 250
('2', '0', '1', '0', ':', '0', '8', ':', '0', '1', ' ', '2', '3', ':', '4', '5', ':', '4', '6', '\x00')
</snippet></ROW><ROW><id>3696783</id><snippet>from struct import *

recognised_tags = { 
    0x0100 : 'imageWidth',
    0x0101 : 'imageLength',
    0x0102 : 'bitsPerSample',
    0x0103 : 'compression',
    0x010f : 'make',    
    0x0110 : 'model',
    0x0111 : 'stripOffset',
    0x0112 : 'orientation', 
    0x0117 : 'stripByteCounts',
    0x011a : 'xResolution',
    0x011b : 'yResolution',
    0x0128 : 'resolutionUnit',
    0x0132 : 'dateTime',
    0x8769 : 'EXIF',
    0x8825 : 'GPS data'};

def GetHeaderFromCR2( buffer ):
    # Unpack the header into a tuple
    header = unpack_from('HHLHBBL', buffer)

    print "\nbyte_order = 0x%04X"%header[0]
    print "tiff_magic_word = %d"%header[1]
    print "tiff_offset = 0x%08X"%header[2]
    print "cr2_magic_word = %d"%header[3]
    print "cr2_major_version = %d"%header[4]
    print "cr2_minor_version = %d"%header[5]
    print "raw_ifd_offset = 0x%08X\n"%header[6]

    return header

def FindDateTimeOffsetFromCR2( buffer, ifd_offset, endian_flag ):
    # Read the number of entries in IFD #0
    (num_of_entries,) = unpack_from(endian_flag+'H', buffer, ifd_offset)
    print "Image File Directory #0 contains %d entries\n"%num_of_entries

    # Work out where the date time is stored
    datetime_offset = -1

    # Go through all the entries looking for the datetime field
    print " id  | type |  number  |  value   "
    for entry_num in range(0,num_of_entries):

        # Grab this IFD entry
        (tag_id, tag_type, num_of_value, value) = unpack_from(endian_flag+'HHLL', buffer, ifd_offset+2+entry_num*12)

        # Print out the entry for information
        print "%04X | %04X | %08X | %08X "%(tag_id, tag_type, num_of_value, value),
        if tag_id in recognised_tags:
            print recognised_tags[tag_id]

        # If this is the datetime one we're looking for, make a note of the offset
        if tag_id == 0x0132:
            assert tag_type == 2
            assert num_of_value == 20
            datetime_offset = value

    return datetime_offset

if __name__ == '__main__':
    with open("IMG_6113.CR2", "rb") as f:
        # read the first 1kb of the file should be enough to find the date/time
        buffer = f.read(1024) 

        # Grab the various parts of the header
        (byte_order, tiff_magic_word, tiff_offset, cr2_magic_word, cr2_major_version, cr2_minor_version, raw_ifd_offset) = GetHeaderFromCR2(buffer)

        # Set the endian flag
        endian_flag = '@'
        if byte_order == 0x4D4D:
            # motorola format
            endian_flag = '&gt;'
        elif byte_order == 0x4949:
            # intel format
            endian_flag = '&lt;'

        # Search for the datetime entry offset
        datetime_offset = FindDateTimeOffsetFromCR2(buffer, 0x10, endian_flag)

        datetime_string = unpack_from(20*'s', buffer, datetime_offset)
        print "\nDatetime: "+"".join(datetime_string)+"\n"
</snippet></ROW><ROW><id>3696785</id><snippet>zarf</snippet></ROW><ROW><id>3696785</id><snippet>damjan</snippet></ROW><ROW><id>3696785</id><snippet>import sys
sys.path.insert(0, "/sites/flaskfirst")

from app import app
application = app
</snippet></ROW><ROW><id>3696810</id><snippet>SpriteDict</snippet></ROW><ROW><id>3696810</id><snippet>loadImage()</snippet></ROW><ROW><id>3696810</id><snippet>class SpriteDict(object):
    def __init__(self, name):
        self.spriteSize = (35, 35)
        # change this old line:
        #self.spritesheet = loadImage("patchconsprites.png", (0,120,136,0))[0]
        # to this:
        self.spritesheet = pygame.image.load("./images/patchconsprites.png")
        self.sprites = []
        start = charCoords[name]
        char = list(start)
        image = pygame.Surface((35,35))
        for y in range(5):
            char[0] = start[0]
            for x in range(9):
                rect = (char[0], char[1], char[0]+self.spriteSize[0], char[1]+self.spriteSize[1])
                image.blit(self.spritesheet, (0,0), rect)
                # and put the transparency code here:
                image = image.convert()
                colorkey = image.get_at((0,0))
                image.set_colorkey(colorkey, RLEACCEL)
                # end new code
                self.sprites.append(image)
                char[0] += self.spriteSize[0]+2
            char[1] += self.spriteSize[1]+2
</snippet></ROW><ROW><id>3697003</id><snippet>&gt;&gt;&gt; def some_func():
...     print 'in some_func'
...     return [1, 2, 3, 10]
... 
&gt;&gt;&gt; for a in some_func():
...     print a
... 
in some_func
1
2
3
10
</snippet></ROW><ROW><id>3697016</id><snippet>lxml.html</snippet></ROW><ROW><id>3697016</id><snippet>&gt;&gt;&gt; import lxml.html as l
&gt;&gt;&gt; doc = """
...    &lt;html&gt;&lt;body&gt;
...    &lt;table&gt;
...      &lt;tr&gt;
...        &lt;td&gt;one&lt;/td&gt;
...        &lt;td&gt;1&lt;/td&gt;
...      &lt;/tr&gt;
...      &lt;tr&gt;
...        &lt;td&gt;two&lt;/td&gt;
...        &lt;td&gt;2&lt;/td
...      &lt;/tr&gt;
...    &lt;/table&gt;
...    &lt;/body&gt;&lt;/html&gt;"""
&gt;&gt;&gt; doc = l.document_fromstring(doc)
&gt;&gt;&gt; doc.finall('.//tr')
[&lt;Element tr at ...&gt;, &lt;Element tr at ...&gt;] #doctest: +ELLIPSIS
</snippet></ROW><ROW><id>3697016</id><snippet>lxml.html</snippet></ROW><ROW><id>3697016</id><snippet>&gt;&gt;&gt; doc.cssselect('tr')
[&lt;Element tr at ...&gt;, &lt;Element tr at ...&gt;] #doctest: +ELLIPSIS
</snippet></ROW><ROW><id>3697182</id><snippet>self.request.url</snippet></ROW><ROW><id>3697182</id><snippet>import urlparse

...

o = urlparse.urlparse(self.request.url)
</snippet></ROW><ROW><id>3697182</id><snippet>o</snippet></ROW><ROW><id>3697182</id><snippet>ParseResult</snippet></ROW><ROW><id>3697182</id><snippet>o.scheme</snippet></ROW><ROW><id>3697182</id><snippet>http</snippet></ROW><ROW><id>3697182</id><snippet>o.netloc</snippet></ROW><ROW><id>3697182</id><snippet>'example.appspot.com'</snippet></ROW><ROW><id>3697182</id><snippet>s = urlparse.urlunparse((o.scheme, o.netloc, '', '', '', ''))
</snippet></ROW><ROW><id>3697182</id><snippet>s</snippet></ROW><ROW><id>3697182</id><snippet>'http://example.appspot.com'</snippet></ROW><ROW><id>3697193</id><snippet> for index, summedRowValue in enumerate(sums):
        print columns[index], 1.0 * summedRowValue / numRows
</snippet></ROW><ROW><id>3697193</id><snippet> with open('Finished', 'w') as ouf:
     for index, summedRowValue in enumerate(sums):
         print&gt;&gt;ouf, columns[index], 1.0 * summedRowValue / numRows
</snippet></ROW><ROW><id>3697193</id><snippet>with</snippet></ROW><ROW><id>3697193</id><snippet>print</snippet></ROW><ROW><id>3697193</id><snippet>print&gt;&gt;ouf,</snippet></ROW><ROW><id>3697193</id><snippet>print</snippet></ROW><ROW><id>3697193</id><snippet>ouf</snippet></ROW><ROW><id>3697438</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [1,3,5,6]
&gt;&gt;&gt; list(set(a) &amp; set(b))
[1, 3, 5]
</snippet></ROW><ROW><id>3697502</id><snippet>import traceback

try:
    res = db.query(queryString) 
except SQLiteError, e:
    # `e` has the error info 
    print `e`
    for tb in traceback.format_tb(sys.exc_info()[2]):
        print tb
</snippet></ROW><ROW><id>3697584</id><snippet>from itertools import tee, filterfalse
def partition(pred, iterable):
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</snippet></ROW><ROW><id>3697605</id><snippet>class HelloController(BaseController):
    def index(self):
        return "hello from index()"

  def test(self):
        return "blah"
</snippet></ROW><ROW><id>3697605</id><snippet>class HelloController(BaseController):
    def index(self):
        return "hello from index()"

def test(self):
    return "blah"
</snippet></ROW><ROW><id>3697617</id><snippet>Table.select()</snippet></ROW><ROW><id>3697617</id><snippet>SELECT *</snippet></ROW><ROW><id>3697617</id><snippet>from sqlalchemy.sql import select
s = select([feeds])
result = db.execute(s)
</snippet></ROW><ROW><id>3697629</id><snippet>.format()</snippet></ROW><ROW><id>3697629</id><snippet>&gt;&gt;&gt; x = 1.2
&gt;&gt;&gt; print "{0:0.4g}".format(x)
1.2
&gt;&gt;&gt; x = 1.234565789
&gt;&gt;&gt; print "{0:0.4g}".format(x)
1.235
</snippet></ROW><ROW><id>3697629</id><snippet>&gt;&gt;&gt; x = 1.23456789
&gt;&gt;&gt; # length of the number before the decimal
&gt;&gt;&gt; left_sigdigs = len(str(x).partition(".")[0])
&gt;&gt;&gt; format_string = "{0:0." + str(4 + left_sigdigs) + "g}"
&gt;&gt;&gt; print format_string.format(x)
1.2346
</snippet></ROW><ROW><id>3697666</id><snippet>s = 'SELECT * FROM benchmark WHERE %(xversion)s = 1.0'
</snippet></ROW><ROW><id>3697666</id><snippet>s % self.alias</snippet></ROW><ROW><id>3697666</id><snippet>re</snippet></ROW><ROW><id>3697666</id><snippet>xversion</snippet></ROW><ROW><id>3697666</id><snippet>s</snippet></ROW><ROW><id>3697666</id><snippet>import re
sre = re.compile('|'.join(r'\b%s\b' % re.escape(s) for s in self.alias))
def repl(mo):
    return self.alias[mo.group()]
news = sre.sub(repl, s)
</snippet></ROW><ROW><id>3697666</id><snippet>%</snippet></ROW><ROW><id>3697666</id><snippet>re</snippet></ROW><ROW><id>3697666</id><snippet>sub</snippet></ROW><ROW><id>3697794</id><snippet>labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 
    'place_effort']
values = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']

paddedLabels = []
paddedValues = []

for label, value in zip(labels, values):
    value = str(value)
    columnWidth = max(len(label), len(value))
    paddedLabels.append(label.center(columnWidth))
    paddedValues.append(value.center(columnWidth))

print ' '.join(paddedLabels)
print ' '.join(paddedValues)
</snippet></ROW><ROW><id>3697794</id><snippet>id Version chip_name  xversion   device  opt_param place_effort
1    1.0    virtex2  xilinx11.5 xc5vlx50   Speed       High
</snippet></ROW><ROW><id>3697794</id><snippet>labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 
    'place_effort']
values = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']

paddedLabels = []
paddedValues = []
dividers = []
dblDividers = []

for label, value in zip(labels, values):
    value = str(value)
    columnWidth = max(len(label), len(value))
    paddedLabels.append(label.center(columnWidth))
    paddedValues.append(value.center(columnWidth))
    dividers.append('-' * columnWidth)
    dblDividers.append('=' * columnWidth)

print '+-' + '-+-'.join(dividers) + '-+'
print '| ' + ' | '.join(paddedLabels) + ' |'
print '+=' + '=+='.join(dblDividers) + '=+'
print '| ' + ' | '.join(paddedValues) + ' |'
print '+-' + '-+-'.join(dividers) + '-+'
</snippet></ROW><ROW><id>3697794</id><snippet>+----+---------+-----------+------------+----------+-----------+--------------+
| id | Version | chip_name |  xversion  |  device  | opt_param | place_effort |
+====+=========+===========+============+==========+===========+==============+
| 1  |   1.0   |  virtex2  | xilinx11.5 | xc5vlx50 |   Speed   |     High     |
+----+---------+-----------+------------+----------+-----------+--------------+
</snippet></ROW><ROW><id>3697816</id><snippet>def boolean_search_and_multi(self, text):
    and_tokens = self.tokenize(text)
    results = set(self._inverted_index[and_tokens[0]])
    for tok in and_tokens[1:]:
        results.intersection_update(self._inverted_index[tok])
    return list(results)
</snippet></ROW><ROW><id>3698248</id><snippet>os.path.join(os.path.dirname(__file__), 'templates/')
</snippet></ROW><ROW><id>3698248</id><snippet>def abspath(path): 
    frame = sys._getframe(1)
    base = os.path.dirname(frame.f_globals['__file__'])
    return os.path.join(base, path)
</snippet></ROW><ROW><id>3698260</id><snippet>T = Timer(self.my_func)
</snippet></ROW><ROW><id>3698437</id><snippet>_observers = []</snippet></ROW><ROW><id>3698437</id><snippet>Subject</snippet></ROW><ROW><id>3698437</id><snippet>class Subject:

    def __init__(self):
        self._observers = []
</snippet></ROW><ROW><id>3698659</id><snippet>win32gui.GetCursorPos(point)
</snippet></ROW><ROW><id>3698659</id><snippet>flags, hcursor, (x,y) = win32gui.GetCursorInfo()
</snippet></ROW><ROW><id>3698694</id><snippet>d = {(15,21): "value1", (7,45): "value2", (500,321): "value3"}
x1, x2, y1, y2 = 6, 16, 20, 46 
dict((k,v) for k, v in d.iteritems() if x1&lt;k[0]&lt;x2 and y1&lt;k[1]&lt;y2)
</snippet></ROW><ROW><id>3698861</id><snippet>dbobject = mymodel.objects.all()
</snippet></ROW><ROW><id>3698861</id><snippet>mymodel.objects.all</snippet></ROW><ROW><id>3698861</id><snippet>ret = getattr(mymodel,'objects')
self.dbobject = getattr(ret,'all')
</snippet></ROW><ROW><id>3698861</id><snippet>mymodel.objects.all</snippet></ROW><ROW><id>3698861</id><snippet>self.dbobject = getattr(ret,'all')()
</snippet></ROW><ROW><id>3698972</id><snippet>python-ttk</snippet></ROW><ROW><id>3699019</id><snippet>python manage.py runserver 0.0.0.0:8000 
</snippet></ROW><ROW><id>3699019</id><snippet>python manage.py runserver 192.168.1.100:8000 
</snippet></ROW><ROW><id>3699492</id><snippet>Queue.PriorityQueue</snippet></ROW><ROW><id>3699492</id><snippet>super</snippet></ROW><ROW><id>3699492</id><snippet>import Queue
class PriorityQueue(Queue.PriorityQueue):
    def put(self, item):
        Queue.PriorityQueue.put(self,(item.priority, item))
</snippet></ROW><ROW><id>3699594</id><snippet>  @classmethod
  def clone(cls, other, **kwargs):
    """Clones another entity."""
    klass = other.__class__
    properties = other.properties().items()
    kwargs.update((k, p.__get__(other, klass)) for k, p in properties)
    return cls(**kwargs)
</snippet></ROW><ROW><id>3699617</id><snippet>super(EIDEnvironment, self).__init__(...)</snippet></ROW><ROW><id>3699617</id><snippet>kw</snippet></ROW><ROW><id>3699617</id><snippet>**kw</snippet></ROW><ROW><id>3699677</id><snippet>MySQLdb</snippet></ROW><ROW><id>3699677</id><snippet>connect_args={'cursorclass': MySQLdb.cursors.SSCursor}</snippet></ROW><ROW><id>3699677</id><snippet>engine</snippet></ROW><ROW><id>3699677</id><snippet>   from sqlalchemy import create_engine, MetaData
   import MySQLdb.cursors
   engine = create_engine('mysql://root:zenoss@localhost/e2', connect_args={'cursorclass': MySQLdb.cursors.SSCursor})
   meta = MetaData(engine, reflect=True)
   conn = engine.connect()
   rs = s.execution_options(stream_results=True).execute()
</snippet></ROW><ROW><id>3699677</id><snippet>import MySQLdb
import MySQLdb.cursors as cursors
import threading
import logging
import config

logger = logging.getLogger(__name__)
query = 'SELECT * FROM huge_table LIMIT 200'

def oursql_conn():
    import oursql
    conn = oursql.connect(
        host=config.HOST, user=config.USER, passwd=config.PASS,
        db=config.MYDB)
    return conn

def mysqldb_conn():
    conn = MySQLdb.connect(
        host=config.HOST, user=config.USER,
        passwd=config.PASS, db=config.MYDB,
        cursorclass=cursors.SSCursor) 
    return conn

def two_cursors_one_conn():
    """Two SSCursors can not use one connection concurrently"""
    def worker(conn):
        cursor = conn.cursor()
        cursor.execute(query)
        for row in cursor:
            logger.info(row)

    conn = mysqldb_conn()
    threads = [threading.Thread(target=worker, args=(conn, ))
               for n in range(2)]
    for t in threads:
        t.daemon = True
        t.start()
        # Second thread may hang or raise OperationalError:
        # File "/usr/lib/pymodules/python2.7/MySQLdb/cursors.py", line 289, in _fetch_row
        #   return self._result.fetch_row(size, self._fetch_type)
        # OperationalError: (2013, 'Lost connection to MySQL server during query')

    for t in threads:
        t.join()

def two_cursors_two_conn():
    """Two SSCursors from independent connections can use the same table concurrently"""    
    def worker():
        conn = mysqldb_conn()        
        cursor = conn.cursor()
        cursor.execute(query)
        for row in cursor:
            logger.info(row)

    threads = [threading.Thread(target=worker) for n in range(2)]
    for t in threads:
        t.daemon = True
        t.start()
    for t in threads:
        t.join()


logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s %(threadName)s] %(message)s',
                    datefmt='%H:%M:%S')
two_cursors_one_conn()
two_cursors_two_conn()
</snippet></ROW><ROW><id>3699677</id><snippet>oursql</snippet></ROW><ROW><id>3699677</id><snippet>conn = mysqldb_conn()
</snippet></ROW><ROW><id>3699677</id><snippet>conn = oursql_conn()
</snippet></ROW><ROW><id>3699677</id><snippet>two_cursors_one_conn()</snippet></ROW><ROW><id>3699779</id><snippet>object</snippet></ROW><ROW><id>3699952</id><snippet>listBox</snippet></ROW><ROW><id>3699952</id><snippet>yview()</snippet></ROW><ROW><id>3699952</id><snippet>listbox</snippet></ROW><ROW><id>3699952</id><snippet>select_set</snippet></ROW><ROW><id>3699952</id><snippet>from Tkinter import *

class AutoScrollListBox_demo:
    def __init__(self, master):
        frame = Frame(master, width=500, height=400, bd=1)
        frame.pack()

        self.listbox_log = Listbox(frame, height=4)
        self.scrollbar_log = Scrollbar(frame) 

        self.scrollbar_log.pack(side=RIGHT, fill=Y)
        self.listbox_log.pack(side=LEFT,fill=Y) 

        self.listbox_log.configure(yscrollcommand = self.scrollbar_log.set)
        self.scrollbar_log.configure(command = self.listbox_log.yview)

        b = Button(text="Add", command=self.onAdd)
        b.pack()

        #Just to show unique items in the list
        self.item_num = 0

    def onAdd(self):
        self.listbox_log.insert(END, "test %s" %(str(self.item_num)))       #Insert a new item at the end of the list

        self.listbox_log.select_clear(self.listbox_log.size() - 2)   #Clear the current selected item     
        self.listbox_log.select_set(END)                             #Select the new item
        self.listbox_log.yview(END)                                  #Set the scrollbar to the end of the listbox

        self.item_num += 1


root = Tk()
all = AutoScrollListBox_demo(root)
root.title('AutoScroll ListBox Demo')
root.mainloop()
</snippet></ROW><ROW><id>3700055</id><snippet>csvwriter.writerow(row)</snippet></ROW><ROW><id>3700055</id><snippet>row</snippet></ROW><ROW><id>3700055</id><snippet>1,2,3,four,5
1,2,3,four,5
1,2,3,four,5
</snippet></ROW><ROW><id>3700055</id><snippet>four</snippet></ROW><ROW><id>3700055</id><snippet>4</snippet></ROW><ROW><id>3700055</id><snippet>import csv
in_file = open("d:/in.csv", "rb")
reader = csv.reader(in_file)
out_file = open("d:/out.csv", "wb")
writer = csv.writer(out_file)
for row in reader:
    row[3] = 4
    writer.writerow(row)
in_file.close()    
out_file.close()
</snippet></ROW><ROW><id>3700055</id><snippet>1,2,3,4,5
1,2,3,4,5
1,2,3,4,5
</snippet></ROW><ROW><id>3700226</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; timestamp = 1284375159
&gt;&gt;&gt; time.strftime("%m %d %Y",time.localtime(timestamp))
'09 13 2010'
</snippet></ROW><ROW><id>3700546</id><snippet>Frame</snippet></ROW><ROW><id>3700546</id><snippet>Dialog</snippet></ROW><ROW><id>3700546</id><snippet>PywizardPage</snippet></ROW><ROW><id>3700546</id><snippet>wx.Frame</snippet></ROW><ROW><id>3700546</id><snippet>wx.wizard.PyWizardPage</snippet></ROW><ROW><id>3700546</id><snippet>wx.Wizard</snippet></ROW><ROW><id>3700688</id><snippet>controller.py_tmpl</snippet></ROW><ROW><id>3700716</id><snippet>%(foo)s</snippet></ROW><ROW><id>3700716</id><snippet>d</snippet></ROW><ROW><id>3700899</id><snippet>&gt;&gt;&gt; class Foo(object): __getitem__ = getattr
&gt;&gt;&gt; Foo().__getitem__
&lt;built-in function getattr&gt;
</snippet></ROW><ROW><id>3700899</id><snippet>&gt;&gt;&gt; def ga(*args): return getattr(*args)
&gt;&gt;&gt; class Foo(object): __getitem__ = ga
&gt;&gt;&gt; Foo().__getitem__
&lt;bound method Foo.ga of &lt;__main__.Foo object at 0xb77ad94c&gt;&gt;
</snippet></ROW><ROW><id>3701553</id><snippet>self</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__cmp__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__cmp__</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>dict.keys()</snippet></ROW><ROW><id>3701553</id><snippet>list(set)</snippet></ROW><ROW><id>3701553</id><snippet>__hash__</snippet></ROW><ROW><id>3701553</id><snippet>hash()</snippet></ROW><ROW><id>3701553</id><snippet>__eq__</snippet></ROW><ROW><id>3701553</id><snippet>__cmp__</snippet></ROW><ROW><id>3702395</id><snippet>import re

r_url = re.compile(r"^https?:")
r_image = re.compile(r".(jpg|png|gif)$")

for dictionaries in d_dict:
  type  = dictionaries.get('type')
  if r_url.match(type):
    logging.debug("type is url")
  else if r_image.match(type)
    logging.debug("type is image")
  else:
     logging.debug("invalid type") 
</snippet></ROW><ROW><id>3702395</id><snippet>type</snippet></ROW><ROW><id>3702417</id><snippet>import urllib
import urllib2

username = 'foo'
password = 'bar'

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, MY_APP_PATH, username, password)
authhandler = urllib2.HTTPBasicAuthHandler(passman)
opener = urllib2.build_opener(authhandler)
urllib2.install_opener(opener)

params= { "param1" : param1,
          "param2" : param2,
          "param3" : param3 }

xmlResults = urllib2.urlopen(MY_APP_PATH, urllib.urlencode(params)).read()
results = MyResponseParser.parse(xmlResults)
</snippet></ROW><ROW><id>3702417</id><snippet>mechanize</snippet></ROW><ROW><id>3702417</id><snippet>cookielib</snippet></ROW><ROW><id>3702901</id><snippet>import Image
import numpy as np

im = Image.open('test.pgm')

# Convert to grayscale (single 8-bit band), if it's not already...
im = im.convert('L')

# "data" is a uint8 (0-255) numpy array...
data = np.asarray(im)
</snippet></ROW><ROW><id>3702940</id><snippet># The Pylons WSGI app
app = PylonsApp()

#Profile the app
app = AccumulatingProfileMiddleware(
        app,
        log_filename='/profiling.log',
        cachegrind_filename='/cachegrind.out',
        discard_first_request=True,
        flush_at_shutdown=True,
        path='/__profile__'
)
</snippet></ROW><ROW><id>3703057</id><snippet>s = "Hello, my name is Earl."
def get_word(text, position):
    words = text.split()
    characters = -1
    for word in words:
        characters += len(word)
        if characters &gt; = position:
            return word
&gt;&gt;&gt; get_word(s, 21)
Earl.
</snippet></ROW><ROW><id>3703057</id><snippet>''.strip()</snippet></ROW><ROW><id>3703057</id><snippet>for c in word:
    final += c if c.lower() in 'abcdefghijklmnopqrstuvwxyz'
</snippet></ROW><ROW><id>3703075</id><snippet>INSIDE_EMACS</snippet></ROW><ROW><id>3703300</id><snippet>1f 8b</snippet></ROW><ROW><id>3703300</id><snippet>.gz</snippet></ROW><ROW><id>3703300</id><snippet>gzip(1)</snippet></ROW><ROW><id>3703300</id><snippet>--force</snippet></ROW><ROW><id>3703300</id><snippet>gzip.GzipFile()</snippet></ROW><ROW><id>3703300</id><snippet>read()</snippet></ROW><ROW><id>3703401</id><snippet>/proc/net/wireless</snippet></ROW><ROW><id>3703454</id><snippet>Router.__init__</snippet></ROW><ROW><id>3703454</id><snippet>RoutesList</snippet></ROW><ROW><id>3703454</id><snippet>routes = RoutesList((r"/item/{id}", ItemResource()),
                    (r"/article/{title}", ArticleResource()))

router = Router(routes)
</snippet></ROW><ROW><id>3703454</id><snippet>routes</snippet></ROW><ROW><id>3703574</id><snippet>setup.py install
</snippet></ROW><ROW><id>3703592</id><snippet>self.image.xalign = 0.5
self.image.yalign = 0.5
</snippet></ROW><ROW><id>3703592</id><snippet>self.image.xalign = 0
self.image.yalign = 0
</snippet></ROW><ROW><id>3703592</id><snippet>self.image.xalign = 1
self.image.yalign = 1
</snippet></ROW><ROW><id>3703592</id><snippet>put(child, x, y)</snippet></ROW><ROW><id>3703710</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3703831</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; class DummyClass(collections.Iterator):
...     def next(self):
...         return 1
... 
&gt;&gt;&gt; x = DummyClass()
&gt;&gt;&gt; zip(x, [1,2,3,4])
[(1, 1), (1, 2), (1, 3), (1, 4)]
</snippet></ROW><ROW><id>3703831</id><snippet>__next__</snippet></ROW><ROW><id>3703831</id><snippet>next</snippet></ROW><ROW><id>3703831</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; class DummyClass(collections.Iterator):
...     def next(self):
...         return 1
... 
&gt;&gt;&gt; x = DummyClass()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can’t instantiate abstract class DummyClass with abstract methods __next__
&gt;&gt;&gt; class DummyClass3k(collections.Iterator):
...     def __next__(self):
...         return 2
... 
&gt;&gt;&gt; y = DummyClass3k()
&gt;&gt;&gt; list(zip(y, [1,2,3,4]))
[(2, 1), (2, 2), (2, 3), (2, 4)]
</snippet></ROW><ROW><id>3703831</id><snippet>iterator.next()</snippet></ROW><ROW><id>3703831</id><snippet>iterator.__next__()</snippet></ROW><ROW><id>3703874</id><snippet>from twisted.application.service import Application
from twisted.python.log import ILogObserver, FileLogObserver
from twisted.python.logfile import DailyLogFile

application = Application("myapp")
logfile = DailyLogFile("my.log", "/tmp")
application.setComponent(ILogObserver, FileLogObserver(logfile).emit)
</snippet></ROW><ROW><id>3703874</id><snippet>class FileLogObserver:
    """
    Log observer that writes to a file-like object.

    @type timeFormat: C{str} or C{NoneType}
    @ivar timeFormat: If not C{None}, the format string passed to strftime().
    """
    timeFormat = None

    def __init__(self, f):
        self.write = f.write
        self.flush = f.flush

    def getTimezoneOffset(self, when):
        """
        Return the current local timezone offset from UTC.

        @type when: C{int}
        @param when: POSIX (ie, UTC) timestamp for which to find the offset.

        @rtype: C{int}
        @return: The number of seconds offset from UTC.  West is positive,
        east is negative.
        """
        offset = datetime.utcfromtimestamp(when) - datetime.fromtimestamp(when)
        return offset.days * (60 * 60 * 24) + offset.seconds

    def formatTime(self, when):
        """
        Format the given UTC value as a string representing that time in the
        local timezone.

        By default it's formatted as a ISO8601-like string (ISO8601 date and
        ISO8601 time separated by a space). It can be customized using the
        C{timeFormat} attribute, which will be used as input for the underlying
        C{time.strftime} call.

        @type when: C{int}
        @param when: POSIX (ie, UTC) timestamp for which to find the offset.

        @rtype: C{str}
        """
        if self.timeFormat is not None:
            return time.strftime(self.timeFormat, time.localtime(when))

        tzOffset = -self.getTimezoneOffset(when)
        when = datetime.utcfromtimestamp(when + tzOffset)
        tzHour = abs(int(tzOffset / 60 / 60))
        tzMin = abs(int(tzOffset / 60 % 60))
        if tzOffset &lt; 0:
            tzSign = '-'
        else:
            tzSign = '+'
        return '%d-%02d-%02d %02d:%02d:%02d%s%02d%02d' % (
            when.year, when.month, when.day,
            when.hour, when.minute, when.second,
            tzSign, tzHour, tzMin)

    def emit(self, eventDict):
        text = textFromEventDict(eventDict)
        if text is None:
            return

        timeStr = self.formatTime(eventDict['time'])
        fmtDict = {'system': eventDict['system'], 'text': text.replace("\n", "\n\t")}
        msgStr = _safeFormat("[%(system)s] %(text)s\n", fmtDict)

        util.untilConcludes(self.write, timeStr + " " + msgStr)
        util.untilConcludes(self.flush)  # Hoorj!

    def start(self):
        """
        Start observing log events.
        """
        addObserver(self.emit)

    def stop(self):
        """
        Stop observing log events.
        """
        removeObserver(self.emit)
</snippet></ROW><ROW><id>3703984</id><snippet>keys = 'foo bar foobar' # Imagine this coming in as an argument
keys = keys.split() # Now the semantically chose name for the argument can be 
                    # reused As the semantically chosen name for a local variable
</snippet></ROW><ROW><id>3703984</id><snippet>class Parser(HTMLParser):
    def __init__(self, html):
        self.feed(html)

    def handle_starttag(self, tag, attrs):
        parse_method = 'parse_' + tag    
        if hasattr(self, parse_method):  
            getattr(self, parse_method)(attrs)


    def parse_list(self, attrs):
        # generic code

    def parse_header(self, attrs):
       # more generic code

    parse_h1 = parse_h2 = parse_h3 = parse_h4 = parse_h5 = parse_h6 = parse_header
    parse_ol = parse_ul = parse_list
</snippet></ROW><ROW><id>3703984</id><snippet>handle_starttag</snippet></ROW><ROW><id>3703984</id><snippet>parse_div</snippet></ROW><ROW><id>3703984</id><snippet>def funtion(arg):
    if hasattr(arg, 'attr1') and hasattr(arg, 'attr2'):
         foo(arg):
    else:
         raise TypeError("arg must have 'attr1' and 'attr2'")
</snippet></ROW><ROW><id>3703984</id><snippet>isinstance(arg, Foo)</snippet></ROW><ROW><id>3703984</id><snippet>attr1</snippet></ROW><ROW><id>3703984</id><snippet>attr2</snippet></ROW><ROW><id>3703984</id><snippet>try: 
    foo(arg): 
except (AttributeError, TypeError): 
    raise InvalidArgumentError(foo, arg)
</snippet></ROW><ROW><id>3703984</id><snippet>AttributeError</snippet></ROW><ROW><id>3703984</id><snippet>TypeError</snippet></ROW><ROW><id>3703993</id><snippet>openbook(file(sys.argv[1]))
ph0 = open(book)
</snippet></ROW><ROW><id>3703993</id><snippet>file()</snippet></ROW><ROW><id>3703993</id><snippet>open()</snippet></ROW><ROW><id>3703993</id><snippet>open()</snippet></ROW><ROW><id>3703993</id><snippet>open(name[, mode[, buffering]])</snippet></ROW><ROW><id>3703993</id><snippet>&gt;&gt;&gt; import openbook
&gt;&gt;&gt; openbook.openbook('vicocyclometer')
</snippet></ROW><ROW><id>3703993</id><snippet>openbook()</snippet></ROW><ROW><id>3703993</id><snippet>&gt;&gt;&gt; from openbook import openbook
&gt;&gt;&gt; openbook('vicocyclometer')
</snippet></ROW><ROW><id>3704299</id><snippet>def free_cells(table):
    free_cells = set([(x,y) for x in range(table.props.n_columns) for y in range(table.props.n_rows)])

    def func(child):
        (l,r,t,b) = table.child_get(child, 'left-attach','right-attach','top-attach','bottom-attach')
        used_cells = set([(x,y) for x in range(l,r) for y in range(t,b)])
        free_cells.difference_update(used_cells)

    table.foreach(func)

    return free_cells
</snippet></ROW><ROW><id>3704462</id><snippet>mod_wsgi</snippet></ROW><ROW><id>3704620</id><snippet> import types

 class canRun(object):
    def __init__(self, f):
        self.f = f
        self.o = object  # &lt;-- What the hell is this about? 

    def __call__(self, *args):
        if self.longcondition():
            self.f(*args)

    def __get__(self, instance, owner):
         return types.MethodType(self, instance)
</snippet></ROW><ROW><id>3704620</id><snippet>__call__</snippet></ROW><ROW><id>3704620</id><snippet>self</snippet></ROW><ROW><id>3704721</id><snippet>def find_widget(widget, L):
    for i, v in enumerate(L):
      if v[widget] == widget:
          return i

known_widgets= set()
processed_results = []

for x in raw_results:
    widget = x['widget']
    if widget in known_widgets:
        processed_widgets[find_widget(widget, processed_results)]['src'] += '-%s' % x['tag']
        continue
    else:
        processed_results.append(x)
        known_widgets.add(widget)
</snippet></ROW><ROW><id>3704793</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKD', u"m\u00fasica").encode('ascii', 'ignore')
'musica'
</snippet></ROW><ROW><id>3704967</id><snippet>for</snippet></ROW><ROW><id>3704967</id><snippet>continue</snippet></ROW><ROW><id>3704967</id><snippet>while</snippet></ROW><ROW><id>3704967</id><snippet>for i in xrange(10):
  if i == 5:
    continue
  print i
</snippet></ROW><ROW><id>3704967</id><snippet>for</snippet></ROW><ROW><id>3704967</id><snippet>while</snippet></ROW><ROW><id>3704967</id><snippet>should_restart = True
while should_restart:
  should_restart = False
  for i in xrange(10):
    print i
    if i == 5:
      should_restart = True
      break
</snippet></ROW><ROW><id>3704997</id><snippet>from models import Person
p = Person.objects.get(pk=100)
p.name = 'Rico'
p.save()      # &lt;== This writes it to the db. Is this what you're missing?
</snippet></ROW><ROW><id>3704997</id><snippet>dbobject.dbobject[0].fieldname = 'some new value'
dbobject.dbobject[0].save()
</snippet></ROW><ROW><id>3704997</id><snippet>rec = dbobject.dbobject[0]
rec.fieldname = 'some new value'
rec.save()
</snippet></ROW><ROW><id>3705098</id><snippet>import os
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.conf import settings

data = request.FILES['image'] # or self.files['image'] in your form

path = default_storage.save('tmp/somename.mp3', ContentFile(data.read()))
tmp_file = os.path.join(settings.MEDIA_ROOT, path)
</snippet></ROW><ROW><id>3705153</id><snippet>related_name</snippet></ROW><ROW><id>3705153</id><snippet>.fancyrestaurant</snippet></ROW><ROW><id>3705153</id><snippet>def get_accessor_name(self):
    # This method encapsulates the logic that decides what name to give an
    # accessor descriptor that retrieves related many-to-one or
    # many-to-many objects. It uses the lower-cased object_name + "_set",
    # but this can be overridden with the "related_name" option.
    if self.field.rel.multiple:
        # If this is a symmetrical m2m relation on self, there is no reverse accessor.
        if getattr(self.field.rel, 'symmetrical', False) and self.model == self.parent_model:
            return None
        return self.field.rel.related_name or (self.opts.object_name.lower() + '_set')
    else:
        return self.field.rel.related_name or (self.opts.object_name.lower())
</snippet></ROW><ROW><id>3705153</id><snippet>OneToOneField</snippet></ROW><ROW><id>3705153</id><snippet>class OneToOneField(ForeignKey):
    ... snip ...

    def contribute_to_related_class(self, cls, related):
        setattr(cls, related.get_accessor_name(),
                SingleRelatedObjectDescriptor(related))
</snippet></ROW><ROW><id>3705153</id><snippet>cls.__name__</snippet></ROW><ROW><id>3705153</id><snippet>User</snippet></ROW><ROW><id>3705153</id><snippet>related_name</snippet></ROW><ROW><id>3705252</id><snippet>NSWindow</snippet></ROW><ROW><id>3705489</id><snippet>class FakeFile:
    def read(self, size=0):
        return ''
</snippet></ROW><ROW><id>3705489</id><snippet>'\x04'</snippet></ROW><ROW><id>3705551</id><snippet>python -i</snippet></ROW><ROW><id>3705676</id><snippet>newlist = oldlist[::-1]
</snippet></ROW><ROW><id>3705676</id><snippet>[::-1]</snippet></ROW><ROW><id>3705676</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>3705676</id><snippet>.reverse</snippet></ROW><ROW><id>3706185</id><snippet>hwnd</snippet></ROW><ROW><id>3706185</id><snippet>import win32gui
thetitle = win32gui.GetWindowText( hwnd )
</snippet></ROW><ROW><id>3706185</id><snippet>win32gui</snippet></ROW><ROW><id>3706192</id><snippet>ssh</snippet></ROW><ROW><id>3706192</id><snippet>checkOut</snippet></ROW><ROW><id>3706210</id><snippet>curses.endwin()</snippet></ROW><ROW><id>3706210</id><snippet>curses</snippet></ROW><ROW><id>3706210</id><snippet>import os

sys.stdout = os.fdopen(0, 'w', 0)
</snippet></ROW><ROW><id>3706210</id><snippet>import os</snippet></ROW><ROW><id>3706210</id><snippet>sys.stdout</snippet></ROW><ROW><id>3706210</id><snippet>endwin</snippet></ROW><ROW><id>3706212</id><snippet>[]</snippet></ROW><ROW><id>3706212</id><snippet>list()</snippet></ROW><ROW><id>3706212</id><snippet>[]</snippet></ROW><ROW><id>3706212</id><snippet>src = [0,1,2,2,2,0,1,2,... ,2,1,2,1,1,0,2,1]
</snippet></ROW><ROW><id>3706506</id><snippet>prefix.*</snippet></ROW><ROW><id>3706506</id><snippet>somefiles?</snippet></ROW><ROW><id>3706542</id><snippet>data = {
'id1' : {'a':"", 'b':""},
'id2' : {'c':"", 'd':""},
'' : {'c':"", 'd':""},
"": {'c':"", 'd':""},
}

for key in data.iterkeys():
    if key:
        print key
        print "Processing %s" % key
        # do further processing of data[key]
</snippet></ROW><ROW><id>3706542</id><snippet>id2
Processing id2
id1
Processing id1
</snippet></ROW><ROW><id>3706672</id><snippet>setup.py</snippet></ROW><ROW><id>3706672</id><snippet>c:\my_python_scripts&gt;python setup.py py2exe
</snippet></ROW><ROW><id>3706672</id><snippet>setup.py</snippet></ROW><ROW><id>3706672</id><snippet>distutils</snippet></ROW><ROW><id>3706672</id><snippet>py2exe</snippet></ROW><ROW><id>3706672</id><snippet>.bat</snippet></ROW><ROW><id>3707535</id><snippet>add</snippet></ROW><ROW><id>3707535</id><snippet>set.add</snippet></ROW><ROW><id>3707535</id><snippet>list.append</snippet></ROW><ROW><id>3707535</id><snippet>def foo():
    yield 1
    yield 2
    yield 3

s = set(foo())
l = list(foo())
results1 = [i*2 for i in foo()]
results2 = (i*2 for i in foo())
for r in foo():
    print r
</snippet></ROW><ROW><id>3707561</id><snippet>yield</snippet></ROW><ROW><id>3707561</id><snippet>&gt;&gt;&gt; def func():
...     return (1,2,3)
...
&gt;&gt;&gt; a,b,c = func()
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
&gt;&gt;&gt; c
3
</snippet></ROW><ROW><id>3707561</id><snippet>yield</snippet></ROW><ROW><id>3707561</id><snippet>yield</snippet></ROW><ROW><id>3707561</id><snippet>&gt;&gt;&gt; def func():
...     for a in ['one','two','three']:
...         yield a
...
&gt;&gt;&gt; g = func()
&gt;&gt;&gt; g.next()
'one'
&gt;&gt;&gt; g.next()
'two'
&gt;&gt;&gt; g.next()
'three'
</snippet></ROW><ROW><id>3707561</id><snippet>yield</snippet></ROW><ROW><id>3707561</id><snippet>next()</snippet></ROW><ROW><id>3707561</id><snippet>send()</snippet></ROW><ROW><id>3707561</id><snippet>yield</snippet></ROW><ROW><id>3707561</id><snippet>&gt;&gt;&gt; def func():
...     total = 0
...     while True:
...        add = yield total
...        total = total + add
...
&gt;&gt;&gt; g = func()
&gt;&gt;&gt; g.next()
0
&gt;&gt;&gt; g.send(10)
10
&gt;&gt;&gt; g.send(15)
25
</snippet></ROW><ROW><id>3707561</id><snippet>&gt;&gt;&gt; def func():
...     total = 0
...     while True:
...         x,y = yield total
...         total = total + (x * y)
...
&gt;&gt;&gt; g = func()
&gt;&gt;&gt; g.next()
0
&gt;&gt;&gt; g.send([6,7])
42
</snippet></ROW><ROW><id>3707672</id><snippet>&gt;&gt;&gt; s = 'length 95 width 332 length 1253 length 345 width 22'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'length (\w+)', s)
['95', '1253', '345']
</snippet></ROW><ROW><id>3707672</id><snippet>&gt;&gt;&gt; sp = s.split()
&gt;&gt;&gt; [sp[i+1] for i, l in enumerate(sp) if l == 'length']
['95', '1253', '345']
</snippet></ROW><ROW><id>3707858</id><snippet>grep -o</snippet></ROW><ROW><id>3707858</id><snippet>-o, --only-matching
       Show only the part of a matching line that matches PATTERN.
</snippet></ROW><ROW><id>3707858</id><snippet>$ cat &gt; foo
test test test
test
bar
baz test
$ grep -o test foo
test
test
test
test
test
</snippet></ROW><ROW><id>3707858</id><snippet>$ grep -o -E 'href="([^"]*)"' /usr/share/vlc/http/index.html
href="style.css"
href="iehacks.css"
href="old/"
</snippet></ROW><ROW><id>3707858</id><snippet>cut</snippet></ROW><ROW><id>3707858</id><snippet>sed</snippet></ROW><ROW><id>3707858</id><snippet>$ grep -o -E 'href="([^"]*)"' /usr/share/vlc/http/index.html| cut -f2 -d'=' | sed -e 's/"//g'
style.css
iehacks.css
old/
</snippet></ROW><ROW><id>3708167</id><snippet>sample.replace("'", r"\'")
</snippet></ROW><ROW><id>3708167</id><snippet>sample.replace("'", "\\'")
</snippet></ROW><ROW><id>3708391</id><snippet>lxml.html</snippet></ROW><ROW><id>3708391</id><snippet>import lxml.html

doc = lxml.html.parse('http://voinici.ceata.org/~sana/test.html')
print len(doc.findall('//div'))
</snippet></ROW><ROW><id>3708415</id><snippet>self.spawnPoint = [1, 0]
self.vel = self.spawnPoint # Does not make a copy!
self.vel[0] += 0.1
self.vel[1] += 0.2
</snippet></ROW><ROW><id>3708441</id><snippet>&lt;</snippet></ROW><ROW><id>3708441</id><snippet>&gt;</snippet></ROW><ROW><id>3708441</id><snippet>&lt;(.*?)&gt;
</snippet></ROW><ROW><id>3708441</id><snippet>&lt;([^&gt;]*)&gt;
</snippet></ROW><ROW><id>3708441</id><snippet>&lt;</snippet></ROW><ROW><id>3708441</id><snippet>&lt;</snippet></ROW><ROW><id>3708441</id><snippet>(..)</snippet></ROW><ROW><id>3708441</id><snippet>.*?</snippet></ROW><ROW><id>3708441</id><snippet>&gt;</snippet></ROW><ROW><id>3708441</id><snippet>&lt;</snippet></ROW><ROW><id>3708441</id><snippet>[^&gt;]</snippet></ROW><ROW><id>3708441</id><snippet>&gt;</snippet></ROW><ROW><id>3708847</id><snippet>PIPELINING</snippet></ROW><ROW><id>3708847</id><snippet>PIPELINING</snippet></ROW><ROW><id>3708847</id><snippet>smtplib</snippet></ROW><ROW><id>3708847</id><snippet>sendmail</snippet></ROW><ROW><id>3708847</id><snippet>s = smtplib.SMTP("localhost")
s.sendmail("foo@bar.baz",["bar@foo.baz"],message1)
s.sendmail("foo@bar.baz",["baz@foo.baz"],message2)
</snippet></ROW><ROW><id>3708847</id><snippet>sendmail</snippet></ROW><ROW><id>3709371</id><snippet>env = Environment()
env.Program(target = 'foo', source = 'foo.c')

SConscript('sub/SConscript')
</snippet></ROW><ROW><id>3709371</id><snippet>env = Environment()
# Builds sub/foo from sub/foo.c
env.Program(target = 'foo', source = 'foo.c')

SConscript('dir/SConscript')
</snippet></ROW><ROW><id>3709371</id><snippet>env = Environment()
# Builds sub/dir/foo from sub/dir/foo.c
env.Program(target = 'foo', source = 'foo.c')
</snippet></ROW><ROW><id>3709418</id><snippet>&gt;&gt;&gt; import abc
&gt;&gt;&gt; abc.__file__
'C:\\Program Files\\Python31\\lib\\abc.py'
</snippet></ROW><ROW><id>3709418</id><snippet>inspect</snippet></ROW><ROW><id>3709418</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; from abc import *
&gt;&gt;&gt; inspect.getfile(ABCMeta)
'C:\\Program Files\\Python31\\lib\\abc.py'
</snippet></ROW><ROW><id>3710410</id><snippet>&lt;input type="text" autocomplete="OFF" name="token"/&gt;
</snippet></ROW><ROW><id>3710926</id><snippet>combos = xuniqueCombinations(test, 3)
for x in combos:
    print x
</snippet></ROW><ROW><id>3710926</id><snippet>combos = list(xuniqueCombinations(test, 3))
print combos
</snippet></ROW><ROW><id>3711243</id><snippet>#!/usr/bin/env python
# coding: utf-8

import inspect

def hello():
    frame,filename,line_number,function_name,lines,index=\
        inspect.getouterframes(inspect.currentframe())[1]
    print(frame,filename,line_number,function_name,lines,index)
hello()

# (&lt;frame object at 0x8ba7254&gt;, '/home/unutbu/pybin/test.py', 10, '&lt;module&gt;', ['hello()\n'], 0)
</snippet></ROW><ROW><id>3711306</id><snippet>Partner</snippet></ROW><ROW><id>3711306</id><snippet>partner_ptr</snippet></ROW><ROW><id>3711306</id><snippet>Company</snippet></ROW><ROW><id>3711306</id><snippet>Partner</snippet></ROW><ROW><id>3711306</id><snippet>company = Company.objects.get(pk=7924)
dummy_partner = Partner(code = "dummy", name = "dummy")
company.partner_ptr = dummy_partner
company.save()
company.delete()
</snippet></ROW><ROW><id>3711322</id><snippet>ord</snippet></ROW><ROW><id>3711322</id><snippet>def codevalue(char):
    return ord(char) - 64
</snippet></ROW><ROW><id>3711884</id><snippet>if re.match(r'^\s*$', line):
    # line is empty (has only the following: \t\n\r and whitespace)
</snippet></ROW><ROW><id>3711884</id><snippet>filter()</snippet></ROW><ROW><id>3711884</id><snippet>filtered = filter(lambda x: not re.match(r'^\s*$', x), original)
</snippet></ROW><ROW><id>3712476</id><snippet>class A():
    lockZ = threading.RLock()
    lockY = threading.RLock()

    @staticmethod
    @synchroized(lockZ)
    def doZStuff():
        a = A()
        a.doStuff('Z')

    @staticmethod
    @synchroized(lockY)
    def doYStuff():
        a = A()
        a.doStuff('Y')

    def doStuff(self, type):
        if type == 'Z':
            otherstuff()
        elif type == 'B':
            evenmorestuff()
</snippet></ROW><ROW><id>3712574</id><snippet>const</snippet></ROW><ROW><id>3712574</id><snippet>__delattr__</snippet></ROW><ROW><id>3712574</id><snippet># from http://code.activestate.com/recipes/65207-constants-in-python
class _const:
    class ConstError(TypeError): pass
    class ConstCaseError(ConstError): pass

    def __setattr__(self, name, value):
        if self.__dict__.has_key(name):
            raise self.ConstError, "Can't change const.%s" % name
        if not name.isupper():
            raise self.ConstCaseError, \
                  'const name "%s" is not all uppercase' % name
        self.__dict__[name] = value

# replace module entry in sys.modules[__name__] with instance of _const
# (and create additional reference to module so it's not deleted --
# see Stack Overflow question: http://bit.ly/ff94g6)
import sys
_ref, sys.modules[__name__] = sys.modules[__name__], _const()

if __name__ == '__main__':
    import const  # test the module...

    try:
        const.Answer = 42  # not OK, mixed-case attribute name
    except const.ConstCaseError, exc:
        print exc
    else:  # test failed - no ConstXXXError exception generated
        raise RuntimeError, \
              "Mixed-case const names should't have been allowed!"

    const.ANSWER = 42  # should be OK, all uppercase

    try:
        const.ANSWER = 17  # not OK, attempts to change defined constant
    except const.ConstError, exc:
        print exc
    else:  # test failed - no ConstXXXError exception generated
        raise RuntimeError, \
              "Shouldn't have been able to change const attribute!"
</snippet></ROW><ROW><id>3712645</id><snippet>find = r'C:\\somedir\\(.*?\.log)'
repl = r'C:\\somedir\\logs\\\1'
print re.sub(find,repl,r'random text ... C:\somedir\test.log more \nrandom \ntext C:\somedir\test.xls...')
</snippet></ROW><ROW><id>3712645</id><snippet>'random text ... C:\somedir\logs\test.log more \nrandom \ntext C:\somedir\test.xls...'
</snippet></ROW><ROW><id>3712682</id><snippet>package_data</snippet></ROW><ROW><id>3712682</id><snippet>'*'</snippet></ROW><ROW><id>3712682</id><snippet>package/dir</snippet></ROW><ROW><id>3712682</id><snippet>package/dir</snippet></ROW><ROW><id>3712682</id><snippet>setup.py</snippet></ROW><ROW><id>3712682</id><snippet>from distutils.core import setup

setup(name='pyproj',
      version='0.1',

      packages=[
          'package',
      ],
      package_data={
          'package': [
              '*.dat',
              'dir/*'
          ],
      },
     )
</snippet></ROW><ROW><id>3712682</id><snippet>'*'</snippet></ROW><ROW><id>3712682</id><snippet>'*.dat'</snippet></ROW><ROW><id>3712682</id><snippet>'dir'</snippet></ROW><ROW><id>3712764</id><snippet>'(4125, &lt;html&gt;
&lt;body&gt;
Heloo There!
&lt;body&gt;
&lt;/html&gt;)'
</snippet></ROW><ROW><id>3712764</id><snippet>(4125, &lt;html&gt;
&lt;body&gt;
Heloo There!
&lt;body&gt;
&lt;/html&gt;)
</snippet></ROW><ROW><id>3712764</id><snippet>&lt;html&gt;
&lt;body&gt;
Heloo There!
&lt;body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>3712764</id><snippet>eval</snippet></ROW><ROW><id>3712829</id><snippet>def getIsland(request):
    if hasattr(request, "_cached_island"):
        return request._cached_island
    try:
        island = Island.objects.get(user=request.user) # Retrieve
    except Island.DoesNotExist:
        island = Island(user=request.user) # Doesn't exist, create default one
        island.save()
    island.update() # Run scheduled tasks
    request._cached_island = island
    return island # Return
</snippet></ROW><ROW><id>3713061</id><snippet># TODO: find a way to avoid surrogate keys</snippet></ROW><ROW><id>3713400</id><snippet>&gt;&gt;&gt; class Test(object):
...        from functools import partial
... 
&gt;&gt;&gt; Test().partial
&lt;type 'functools.partial'&gt;
</snippet></ROW><ROW><id>3713400</id><snippet>def Test(object):
    def __init__(self):
         from functools import partial
         self.partial = partial
</snippet></ROW><ROW><id>3713400</id><snippet>bar</snippet></ROW><ROW><id>3713400</id><snippet>self.bar</snippet></ROW><ROW><id>3713448</id><snippet>virtualenv python3.0
</snippet></ROW><ROW><id>3713448</id><snippet>lrwxr-xr-x   1 ---  ---     6 Aug 23 13:28 python2.6 -&gt; python
</snippet></ROW><ROW><id>3713448</id><snippet>-rwxr-xr-x  2 root  heel  86000 Feb 11  2010 python
-rwxr-xr-x  5 root  heel    925 Feb 11  2010 python-config
lrwxr-xr-x  1 root  heel     75 Aug 23 10:01 python2.5 -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5
lrwxr-xr-x  1 root  heel     82 Aug 23 10:01 python2.5-config -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5-config
lrwxr-xr-x  1 root  heel     75 Aug 23 10:01 python2.6 -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
lrwxr-xr-x  1 root  heel     82 Aug 23 10:01 python2.6-config -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.6/bin/python
</snippet></ROW><ROW><id>3713909</id><snippet>if backward:</snippet></ROW><ROW><id>3713909</id><snippet>result = []

for x in range(x0, x1):
    if steep: result.append((y, x))
    else: result.append((x, y))
    error -= dy
    if error &lt; 0:
        y += ystep
        error += dx

return result
</snippet></ROW><ROW><id>3713909</id><snippet>if backward: return result.reverse()
else: return result
</snippet></ROW><ROW><id>3713909</id><snippet>backward</snippet></ROW><ROW><id>3713909</id><snippet>steep</snippet></ROW><ROW><id>3713909</id><snippet>backward</snippet></ROW><ROW><id>3713909</id><snippet>backward</snippet></ROW><ROW><id>3713909</id><snippet>if x0 &gt; x1:
    # swapping here
</snippet></ROW><ROW><id>3713909</id><snippet>backward = x0 &gt; x1

if backward:
</snippet></ROW><ROW><id>3714085</id><snippet>next</snippet></ROW><ROW><id>3714085</id><snippet>readline</snippet></ROW><ROW><id>3714085</id><snippet>def makedictwithlists(f):
    keys = next(f).split()
    d = {}
    for k in keys: d[k] = []
    for line in f:
        for k, v in zip(keys, line.split()):
            d[k].append(v)
    return d
</snippet></ROW><ROW><id>3714202</id><snippet>
panel1 = Label(root, border=0, image=p)
panel2 = Label(root, border=0, image=p)
</snippet></ROW><ROW><id>3714288</id><snippet>os.spawnle</snippet></ROW><ROW><id>3714315</id><snippet>string</snippet></ROW><ROW><id>3714315</id><snippet>str</snippet></ROW><ROW><id>3714315</id><snippet>string</snippet></ROW><ROW><id>3714389</id><snippet>json.loads</snippet></ROW><ROW><id>3714389</id><snippet>object_hook</snippet></ROW><ROW><id>3714389</id><snippet>import json

class Subscriber(object):
    firstname = None
    lastname = None


class Post(object):
    author = None
    title = None


def decode_from_dict(cls,vals):
    obj = cls()
    for key, val in vals.items():
        setattr(obj, key, val)
    return obj


SERIALIZABLE_CLASSES = {'Subscriber': Subscriber,
                        'Post': Post}

def decode_object(d):
    for field in d:
        if field in SERIALIZABLE_CLASSES:
            cls = SERIALIZABLE_CLASSES[field]
            return decode_from_dict(cls, d[field])
    return d


results = '''[{"Subscriber": {"firstname": "Neal", "lastname": "Walters"}},
              {"Post": {"author": {"Subscriber": {"firstname": "Neal",
                                                  "lastname": "Walters"}}},
                        "title": "Decoding JSON Objects"}]'''
result = json.loads(results, object_hook=decode_object)
print result
print result[1].author
</snippet></ROW><ROW><id>3714389</id><snippet>setattr</snippet></ROW><ROW><id>3714389</id><snippet>json</snippet></ROW><ROW><id>3714389</id><snippet>simplejson</snippet></ROW><ROW><id>3714389</id><snippet>decode_from_dict</snippet></ROW><ROW><id>3714618</id><snippet>__import__</snippet></ROW><ROW><id>3714618</id><snippet>fromlist</snippet></ROW><ROW><id>3714618</id><snippet>__import__</snippet></ROW><ROW><id>3714618</id><snippet>&gt;&gt;&gt; a1module = __import__('action_1', fromlist=['Action_1'])
&gt;&gt;&gt; action1 = a1module.Action_1()
&gt;&gt;&gt; print action1
&lt;action_1.Action_1 instance at 0xb77b8a0c&gt;
</snippet></ROW><ROW><id>3714618</id><snippet>action_1</snippet></ROW><ROW><id>3714618</id><snippet>mystuff.action_1</snippet></ROW><ROW><id>3714618</id><snippet>__import__</snippet></ROW><ROW><id>3715032</id><snippet>A_db_model.all().filter('valueA IN', ['aaa', 'bbb'])
</snippet></ROW><ROW><id>3715032</id><snippet>GqlQuery('SELECT * FROM A_db_model WHERE valueA IN :1', ['aaa', 'bbb'])
</snippet></ROW><ROW><id>3715282</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; encoded = base64.b64encode('data to be encoded')
&gt;&gt;&gt; encoded
'ZGF0YSB0byBiZSBlbmNvZGVk' 
&gt;&gt;&gt; data = base64.b64decode(encoded)
&gt;&gt;&gt; data
'data to be encoded'
</snippet></ROW><ROW><id>3715282</id><snippet>base64.b64decode</snippet></ROW><ROW><id>3715530</id><snippet>import base64

with open("yourfile.ext", "rb") as image_file:
    encoded_string = base64.b64encode(image_file.read())
</snippet></ROW><ROW><id>3715530</id><snippet>import cStringIO
import PIL.Image

# assume data contains your decoded image
file_like = cStringIO.StringIO(data)

img = PIL.Image.open(file_like)
img.show()
</snippet></ROW><ROW><id>3717400</id><snippet>Lingua::Sentence</snippet></ROW><ROW><id>3717456</id><snippet>random.seed(i)
</snippet></ROW><ROW><id>3717597</id><snippet>cookies</snippet></ROW><ROW><id>3717597</id><snippet>getPage</snippet></ROW><ROW><id>3717597</id><snippet>cookies</snippet></ROW><ROW><id>3717597</id><snippet>twisted.web.client.Agent</snippet></ROW><ROW><id>3717612</id><snippet>google.appengine.runtime.DeadlineExceededError</snippet></ROW><ROW><id>3717647</id><snippet>exarkun@boson:~/Projects/Divmod/trunk/Nevow/examples$ twistd -ny examples.tac
... [-] Log opened.
... [-] twistd 10.1.0+r30002 (/usr/bin/python 2.6.4) starting up.
... [-] reactor class: twisted.internet.selectreactor.SelectReactor.
... [-] nevow.appserver.NevowSite starting on 8080
... [-] Starting factory &lt;nevow.appserver.NevowSite instance at 0x94cc8ec&gt;
</snippet></ROW><ROW><id>3717647</id><snippet>nevow.static.File</snippet></ROW><ROW><id>3717647</id><snippet>twisted.web.static.File</snippet></ROW><ROW><id>3717857</id><snippet>csv</snippet></ROW><ROW><id>3717952</id><snippet>start</snippet></ROW><ROW><id>3717952</id><snippet>selenium.py</snippet></ROW><ROW><id>3717952</id><snippet>def start(self, captureNetworkTraffic=False):
    l = [self.browserStartCommand, self.browserURL, self.extensionJs]
    if captureNetworkTraffic:
        l.append("captureNetworkTraffic=true")
    result = self.get_string("getNewBrowserSession", l)
</snippet></ROW><ROW><id>3717952</id><snippet>sel = selenium.selenium('localhost', 4444, '*firefox', 'http://www.google.com')
sel.start(True)
sel.open('')
print sel.captureNetworkTraffic('json')
</snippet></ROW><ROW><id>3718117</id><snippet>stdout</snippet></ROW><ROW><id>3718117</id><snippet>import sys

def sleep(sec):
    for i in range(sec):
        print(".", end=" ")
        sys.stdout.flush()
        time.sleep(1)
</snippet></ROW><ROW><id>3718157</id><snippet>np.bool</snippet></ROW><ROW><id>3718157</id><snippet>count=-1</snippet></ROW><ROW><id>3718157</id><snippet>cond = np.fromiter((x in [2] for x in [0, 1, 2]), dtype=np.int).astype(np.bool)
</snippet></ROW><ROW><id>3718157</id><snippet>count</snippet></ROW><ROW><id>3718157</id><snippet>np.asarray</snippet></ROW><ROW><id>3718157</id><snippet>items = list((x in [2] for x in [0, 1, 2]))
cond = np.fromiter(items, dtype=np.bool, count=len(items))
</snippet></ROW><ROW><id>3718260</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>3718260</id><snippet>urls.py</snippet></ROW><ROW><id>3718371</id><snippet>__init__</snippet></ROW><ROW><id>3718371</id><snippet>random.sample</snippet></ROW><ROW><id>3718371</id><snippet>next()</snippet></ROW><ROW><id>3718371</id><snippet>sublist()</snippet></ROW><ROW><id>3718371</id><snippet>__iter__</snippet></ROW><ROW><id>3718371</id><snippet>RandomIter</snippet></ROW><ROW><id>3718371</id><snippet>yield</snippet></ROW><ROW><id>3718371</id><snippet>random_name</snippet></ROW><ROW><id>3718371</id><snippet>str.join</snippet></ROW><ROW><id>3718371</id><snippet>[str(x) for x in iterable]</snippet></ROW><ROW><id>3718371</id><snippet>map</snippet></ROW><ROW><id>3718490</id><snippet>try:
    print sql_string
    cursor.execute(sql_string)
except Exception, e:
    print e.pgerror
</snippet></ROW><ROW><id>3718499</id><snippet>char</snippet></ROW><ROW><id>3718499</id><snippet>A</snippet></ROW><ROW><id>3718499</id><snippet>std::string encode['Z'-'A'];
encode['A' - 'A'] = ".-";
encode['B' - 'A'] = "-...";
// etc.
encode['Z' - 'A'] = "--..";
</snippet></ROW><ROW><id>3718499</id><snippet>std::string encode[26] = {".-", "-...", /* etc */ "--.."};
</snippet></ROW><ROW><id>3718499</id><snippet>c</snippet></ROW><ROW><id>3718499</id><snippet>morse = encode[c - 'A'];
</snippet></ROW><ROW><id>3718499</id><snippet>ord</snippet></ROW><ROW><id>3718541</id><snippet>a is not b</snippet></ROW><ROW><id>3718541</id><snippet>not a is b</snippet></ROW><ROW><id>3718541</id><snippet>a is b</snippet></ROW><ROW><id>3718541</id><snippet>is</snippet></ROW><ROW><id>3718541</id><snippet>is not</snippet></ROW><ROW><id>3718717</id><snippet>#to loop through a dictionary
total_0 = 0
list_0 =[]
total_1 = 0
list_1 = []
somedict = {'key1':[1,1,1,0,1,0]}
for key,value in somedict.items():
    # now loop through each list of your dict, since value keep your list
    for item in value:
        if item == 1: 
            total_1 += 1
            list_1.append(item)
        else : 
            total_0 += 1
            list_0.append(item)
</snippet></ROW><ROW><id>3718831</id><snippet>logging</snippet></ROW><ROW><id>3718831</id><snippet>import logging
LOG_FILENAME = 'example.log'
logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)

logging.debug('This message should go to the log file')
</snippet></ROW><ROW><id>3718831</id><snippet>level=</snippet></ROW><ROW><id>3718831</id><snippet>logging</snippet></ROW><ROW><id>3718944</id><snippet>#Literal translation
for i in range(N):
    t = Random.randint(0,T) #Not sure on this... but it seems likely.
    z[i] = t
    Nwt[w[i]][t] += 1
    Ndt[d[i]][t] += 1
    Nt[t] += 1

#In place of w= ivec(N);
w = [0]*N
d = [0]*N
z = [0]*N

#In place of Nwt = dmat(W,T)
Nwt = [[0.0] * T] * W
Ndt = [[0.0] * T] * D
</snippet></ROW><ROW><id>3719138</id><snippet>setFlags</snippet></ROW><ROW><id>3719138</id><snippet>QTreeView</snippet></ROW><ROW><id>3719441</id><snippet>mykey = '/path/to/ssl_key_file'
mycert = '/path/to/ssl_cert_file'
opener = urllib2.build_opener(HTTPSClientAuthHandler(mykey, mycert))
opener.add_handler(urllib2.HTTPBasicAuthHandler()) # add HTTP Basic Authentication information...
opener.add_password(user=settings.USER_ID, passwd=settings.PASSWD)
</snippet></ROW><ROW><id>3719679</id><snippet>.gitignore</snippet></ROW><ROW><id>3719679</id><snippet>*.pyo</snippet></ROW><ROW><id>3719679</id><snippet>*.pyc</snippet></ROW><ROW><id>3719679</id><snippet>.installed.cfg
bin
develop-eggs
dist
downloads
eggs
parts
src/*.egg-info
lib
lib64
</snippet></ROW><ROW><id>3719679</id><snippet>.svn</snippet></ROW><ROW><id>3719686</id><snippet>math.log</snippet></ROW><ROW><id>3719686</id><snippet>In [22]: import math

In [23]: math.log?
Type:       builtin_function_or_method
Base Class: &lt;type 'builtin_function_or_method'&gt;
String Form:    &lt;built-in function log&gt;
Namespace:  Interactive
Docstring:
    log(x[, base]) -&gt; the logarithm of x to the given base.
    If the base not specified, returns the natural logarithm (base e) of x.


In [25]: math.log(8,2)
Out[25]: 3.0
</snippet></ROW><ROW><id>3720193</id><snippet>def isPower(a,b):
    if a == 1:
        return True
    if a % b != 0:
        return False
    elif isPower((a/b),b):
        return True
    else
        return False
</snippet></ROW><ROW><id>3720193</id><snippet>def isPower(a,b):
    if a == 0 or b == 0:
        return False
    def realIsPower(a, b):
        if a == 1:
            return True
        elif a%b != 0:
            return False
        elif realIsPower((a/b), b):
            return True
        else:
            return False
    return realIsPower(a, b)
</snippet></ROW><ROW><id>3720450</id><snippet>{name :'some name', value: 'some value'} 
</snippet></ROW><ROW><id>3720450</id><snippet>name</snippet></ROW><ROW><id>3720450</id><snippet>some value</snippet></ROW><ROW><id>3720611</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; x = numpy.array([[0,0],[1,1]])
&gt;&gt;&gt; y = numpy.array([[1,0],[0,1]])
&gt;&gt;&gt; x ^ y
array([[1, 0],
       [1, 0]])
</snippet></ROW><ROW><id>3720611</id><snippet>&gt;&gt;&gt; x &amp; y
array([[0, 0],
       [0, 1]])
</snippet></ROW><ROW><id>3720727</id><snippet>vlines(x, [0], y)</snippet></ROW><ROW><id>3720803</id><snippet>import someModule
someModule.init(NECESSARY_DATA)
x = someModule.someClass(range(1, 5))
</snippet></ROW><ROW><id>3721014</id><snippet>rps_limit</snippet></ROW><ROW><id>3721014</id><snippet>20</snippet></ROW><ROW><id>3721014</id><snippet>bandwidth_limit</snippet></ROW><ROW><id>3721014</id><snippet>rps_limit</snippet></ROW><ROW><id>3721014</id><snippet>500</snippet></ROW><ROW><id>3721053</id><snippet>POINT pt;
    pt.x = 30; // This is your click coordinates
    pt.y = 30;

HWND hWnd = WindowFromPoint(pt);
LPARAM lParam = MAKELPARAM(pt.x, pt.y);
PostMessage(hWnd, WM_RBUTTONDOWN, MK_RBUTTON, lParam);
PostMessage(hWnd, WM_RBUTTONUP, MK_RBUTTON, lParam);
</snippet></ROW><ROW><id>3721094</id><snippet>mouse_event</snippet></ROW><ROW><id>3721094</id><snippet>SetCursorPos</snippet></ROW><ROW><id>3721094</id><snippet>SetCursorPos</snippet></ROW><ROW><id>3721094</id><snippet>mouse_event</snippet></ROW><ROW><id>3721094</id><snippet>mouse_event</snippet></ROW><ROW><id>3721183</id><snippet>assert</snippet></ROW><ROW><id>3721183</id><snippet>assert</snippet></ROW><ROW><id>3721183</id><snippet>assert</snippet></ROW><ROW><id>3721301</id><snippet>return (t1start &lt;= t2start &lt;= t1end) or (t2start &lt;= t1start &lt;= t2end)
</snippet></ROW><ROW><id>3721421</id><snippet>d = { 'Good' : '0', 'Bad' :'9', 'Lazy' : '7'}
for key in d:
   print "{0} = {1}".format(key, d[key])
</snippet></ROW><ROW><id>3721498</id><snippet>(value, ) = long().chained().expression().that().returns().tuple()
</snippet></ROW><ROW><id>3721515</id><snippet>project/</snippet></ROW><ROW><id>3721515</id><snippet>import project.src</snippet></ROW><ROW><id>3721607</id><snippet>def delegate(method, prop):
    def decorate(cls):
        setattr(cls, method,
            lambda self, *args, **kwargs:
                getattr(getattr(self, prop), method)(*args, **kwargs))
        return cls
    return decorate
</snippet></ROW><ROW><id>3721607</id><snippet>@delegate('__len__', '_content')
@delegate('__getitem__', '_content')
class MyList(object):
    def __init__(self, content):
        self._content = content

spam = MyList([1,2,3,4,5])

len(spam) # prints "5"

spam[0] # prints "1"
</snippet></ROW><ROW><id>3721607</id><snippet>__getattr__</snippet></ROW><ROW><id>3721737</id><snippet>import datetime, json

D = {datetime.datetime.now(): 'foo',
     datetime.datetime.now(): 'bar'}

new_D = {}

for k,v in D.iteritems():
  new_D[k.isoformat()] = v

json.dumps(new_D)
</snippet></ROW><ROW><id>3721864</id><snippet>email</snippet></ROW><ROW><id>3721864</id><snippet>import email.header
def parseHeader(h):
    return ''.join(s.decode(c or 'us-ascii') for s, c in email.header.decode_header(h))

&gt;&gt;&gt; parseHeader('=?ISO-8859-1?B?WnVtQnL8Y2tlbndpcnTcYmVyR3L8bndhbGRadXL8Y2soMikuZ3B4?=')
u'ZumBr\xfcckenwirt\xdcberGr\xfcnwaldZur\xfcck(2).gpx'
</snippet></ROW><ROW><id>3721864</id><snippet>filename="..."</snippet></ROW><ROW><id>3721864</id><snippet>Content-Disposition</snippet></ROW><ROW><id>3721864</id><snippet>=?...?=</snippet></ROW><ROW><id>3721940</id><snippet>imshow()</snippet></ROW><ROW><id>3721940</id><snippet>gca()</snippet></ROW><ROW><id>3721940</id><snippet>pylab</snippet></ROW><ROW><id>3721940</id><snippet>matplotlib.pyplot.gca</snippet></ROW><ROW><id>3721940</id><snippet>xticks()</snippet></ROW><ROW><id>3721940</id><snippet>import pylab
pylab.figure()
pylab.plot(range(10))
pylab.xticks([2,3,4], ['a','b','c'])
pylab.show()
</snippet></ROW><ROW><id>3721940</id><snippet>import matplotlib.pyplot as plt
import numpy as np
fig = plt.figure()
ax = fig.add_subplot(1,1,1) # Or we could call plt.gca() later...
im = ax.imshow(np.random.random((10,10)))
ax.set_xticklabels(['a','b','c','d'])  # Or we could use plt.xticks(...)
</snippet></ROW><ROW><id>3722146</id><snippet>((Thing\s2A).+?(Thing\s[0-9]))</snippet></ROW><ROW><id>3722146</id><snippet>((Thing\s2A).+?(Thing\s[0-9](?!A))</snippet></ROW><ROW><id>3722146</id><snippet>((Thing\s2A).+?(Thing\s[0-9](?![A-Za-Z]))</snippet></ROW><ROW><id>3722146</id><snippet>((Thing\s2A).+?(Thing\s[0-9][\s$])</snippet></ROW><ROW><id>3722157</id><snippet>"C:\\MyVirtualMachine.vmx".encode('ascii','ignore')
</snippet></ROW><ROW><id>3722191</id><snippet>msgtxt = "é"
msg.set_charset('ISO-8859-1')
</snippet></ROW><ROW><id>3722191</id><snippet>é</snippet></ROW><ROW><id>3722191</id><snippet>'\xc3\xa9'</snippet></ROW><ROW><id>3722191</id><snippet>Ã©</snippet></ROW><ROW><id>3722191</id><snippet>msgtxt = '\xE9'
</snippet></ROW><ROW><id>3722674</id><snippet>help(cm.jet)</snippet></ROW><ROW><id>3722674</id><snippet>gradient</snippet></ROW><ROW><id>3722674</id><snippet>gradient</snippet></ROW><ROW><id>3722674</id><snippet>gradient</snippet></ROW><ROW><id>3722674</id><snippet>gradient</snippet></ROW><ROW><id>3722674</id><snippet>scipy.cluster.vq.vq</snippet></ROW><ROW><id>3722674</id><snippet>import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np
import scipy.cluster.vq as scv

def colormap2arr(arr,cmap):    
    # http://stackoverflow.com/questions/3720840/how-to-reverse-color-map-image-to-scalar-values/3722674#3722674
    gradient=cmap(np.linspace(0.0,1.0,100))

    # Reshape arr to something like (240*240, 4), all the 4-tuples in a long list...
    arr2=arr.reshape((arr.shape[0]*arr.shape[1],arr.shape[2]))

    # Use vector quantization to shift the values in arr2 to the nearest point in
    # the code book (gradient).
    code,dist=scv.vq(arr2,gradient)

    # code is an array of length arr2 (240*240), holding the code book index for
    # each observation. (arr2 are the "observations".)
    # Scale the values so they are from 0 to 1.
    values=code.astype('float')/gradient.shape[0]

    # Reshape values back to (240,240)
    values=values.reshape(arr.shape[0],arr.shape[1])
    values=values[::-1]
    return values

arr=plt.imread('mri_demo.png')
values=colormap2arr(arr,cm.jet)    
# Proof that it works:
plt.imshow(values,interpolation='bilinear', cmap=cm.jet,
           origin='lower', extent=[-3,3,-3,3])
plt.show()
</snippet></ROW><ROW><id>3722674</id><snippet>scipy.cluster.vq.vq</snippet></ROW><ROW><id>3722674</id><snippet>gradient</snippet></ROW><ROW><id>3722785</id><snippet>data = 'foo {family} {port:} {direction}'.format(
</snippet></ROW><ROW><id>3722785</id><snippet>data = 'foo {family} :{port} {direction}'.format(
</snippet></ROW><ROW><id>3722785</id><snippet>&gt;&gt;&gt; foo(12345, out=True)
'foo ipv4 12345 out'
&gt;&gt;&gt; foo(12345, out=True)
'foo ipv4 :12345 out'    
</snippet></ROW><ROW><id>3722799</id><snippet>DEBUG=True</snippet></ROW><ROW><id>3723267</id><snippet>#! /usr/bin/env python3.1
</snippet></ROW><ROW><id>3723280</id><snippet>#!/usr/bin/env python

import re

lol = [
    ["unix", ".*", "cool(, eh)?"],
    ["windows", "_*.*", "[wft]*"],
]

# think of `il` as inner list and `ii` as inner item (if you need) ...
print [ ii[:1] + map(re.compile, ii[1:]) for ii in [ il for il in lol ]]

# ... or, since list comprehensions are preferred over `map`
print [ ii[:1] + [re.compile(x) for x in ii[1:]] for ii in [ il for il in lol ]]
</snippet></ROW><ROW><id>3723280</id><snippet>[['unix', &lt;_sre.SRE_Pattern object at 0x100559b90&gt;, &lt;_sre.SRE_Pattern object
at 0x10052b870&gt;], ['windows', &lt;_sre.SRE_Pattern object at 0x100590828&gt;,
&lt;_sre.SRE_Pattern object at 0x10049b780&gt;]]
</snippet></ROW><ROW><id>3723298</id><snippet>content = ''
with open(filename, 'rt') as f:
    content = f.read()

matches = re.findall(REGEX, content)
</snippet></ROW><ROW><id>3723308</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>3723308</id><snippet>from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response

# Imaginary function to handle an uploaded file.
from somewhere import handle_uploaded_file

def upload_file(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            # you'll need to loop through the uploaded files here.
            handle_uploaded_file(request.FILES['file'])
            return HttpResponseRedirect('/success/url/')
    else:
        form = UploadFileForm()
    return render_to_response('upload.html', {'form': form})

def handle_uploaded_file(f):
    destination = open('some/file/name.txt', 'wb+')
    for chunk in f.chunks():
        destination.write(chunk)
    destination.close()
</snippet></ROW><ROW><id>3723319</id><snippet>pass</snippet></ROW><ROW><id>3723319</id><snippet>pass</snippet></ROW><ROW><id>3723319</id><snippet>continue</snippet></ROW><ROW><id>3723319</id><snippet>for getter in (get_random_foo, get_random_bar):
    try:
        return getter()
    except IndexError:
        continue  # Ignore the exception and try the next type.

raise IndexError, "No foos, no bars"
</snippet></ROW><ROW><id>3723323</id><snippet>dict</snippet></ROW><ROW><id>3723340</id><snippet>C:\Users\Me</snippet></ROW><ROW><id>3723340</id><snippet>setup.py</snippet></ROW><ROW><id>3723340</id><snippet>setup.py</snippet></ROW><ROW><id>3723340</id><snippet>C:\Users\Me&gt; cd C:\Python26\My_Scripts
C:\Python26\My_Scripts&gt; C:\Python26\My_Scripts\python.exe  setup.py py2exe
</snippet></ROW><ROW><id>3723340</id><snippet>setup.py</snippet></ROW><ROW><id>3723340</id><snippet>C:\Users\Me&gt; C:\Python26\My_Scripts\python.exe "C:\Python26\My_Scripts\setup.py" py2exe
</snippet></ROW><ROW><id>3723363</id><snippet># Print instructions to the user
### 'print "xyz"' will output the xyz text.

# Start with the variables high = 1000, low = 1, and tries = 1
### You can set a variable with 'abc = 1'.

# While high is greater than low
### Python has a while statement and you can use something like 'while x &gt; 7:'.
### Conditions like 'x &gt; 7', 'guess == number' can also be used in `ifs` below.

    # Guess the average of high and low
    ### The average of two numbers is (x + y) / 2.

    # Ask the user to respond to the guess
    ### Python (at least 2.7) has a 'raw_input' for this, NOT 'input'.

    # If the guess was right, print a message that tries guesses were required
    # and quit the program
    ### Look at the 'if' statement for this and all the ones below.

    # If the guess was too high, print a message that says “I will guess lower.”
    # If the guess was too low, print a message that says “I will guess higher.”
    # If the user entered an incorrect value, print out the instructions again.
</snippet></ROW><ROW><id>3723366</id><snippet>__len__</snippet></ROW><ROW><id>3723366</id><snippet>__len__</snippet></ROW><ROW><id>3723366</id><snippet>__len__</snippet></ROW><ROW><id>3723366</id><snippet>.next</snippet></ROW><ROW><id>3723366</id><snippet>list</snippet></ROW><ROW><id>3723366</id><snippet>StopIteration</snippet></ROW><ROW><id>3723366</id><snippet>__len__</snippet></ROW><ROW><id>3723366</id><snippet>list</snippet></ROW><ROW><id>3723542</id><snippet>{% for i in datas %}
    console.log({{ i }});
{% endfor %}
</snippet></ROW><ROW><id>3723797</id><snippet>
#!/usr/bin/python

import os
import sys

buf = sys.stdin.read(512)

print "Content-type: text/html\n\n";
print '&lt;html&gt;'
print '''
&lt;form method="post" action="" enctype="multipart/form-data"&gt;
&lt;input type="file" name="f"&gt;
&lt;input type="submit"&gt;
&lt;/form&gt;
'''
print buf

print '&lt;/html&gt;'
</snippet></ROW><ROW><id>3724114</id><snippet>fields['key'] = 'value'</snippet></ROW><ROW><id>3724114</id><snippet>class foo(object):
    var1 = 'bar'

    def foobar(self):
        pass
</snippet></ROW><ROW><id>3724114</id><snippet>class</snippet></ROW><ROW><id>3724114</id><snippet>var1 = 'bar'</snippet></ROW><ROW><id>3724114</id><snippet>locals()['var1'] = 'bar'</snippet></ROW><ROW><id>3724114</id><snippet>def foobar</snippet></ROW><ROW><id>3724114</id><snippet>locals()['var'] = the result of compiling the function</snippet></ROW><ROW><id>3724114</id><snippet>locals()</snippet></ROW><ROW><id>3724114</id><snippet>__new__</snippet></ROW><ROW><id>3724114</id><snippet>type</snippet></ROW><ROW><id>3724114</id><snippet>__new__</snippet></ROW><ROW><id>3724114</id><snippet>foo</snippet></ROW><ROW><id>3724114</id><snippet>A.fields</snippet></ROW><ROW><id>3724114</id><snippet>A</snippet></ROW><ROW><id>3724114</id><snippet>Meta</snippet></ROW><ROW><id>3724114</id><snippet>fields</snippet></ROW><ROW><id>3724114</id><snippet>A</snippet></ROW><ROW><id>3724114</id><snippet>super().fields</snippet></ROW><ROW><id>3724114</id><snippet>B</snippet></ROW><ROW><id>3724114</id><snippet>super(B).fields</snippet></ROW><ROW><id>3724114</id><snippet>B</snippet></ROW><ROW><id>3724114</id><snippet>def MakeFields(**fields):
    return fields

class Meta(type):
    def __new__(mcs, name, bases, attr):
        for base in bases:
            if hasattr(base, 'fields'):
                inherited = getattr(base, 'fields')
                try:
                    attr['fields'].update(inherited)
                except KeyError:
                    attr['fields'] = inherited
                except ValueError:
                    pass
        return type.__new__(mcs, name, bases, attr)

class A(metaclass=Meta):
    fields = MakeFields(id='int',name='varchar') 

class B(A):
    fields = MakeFields(count='int')

class C(B):
    pass

class Test(object):
    fields = "asd"

class D(C, Test):
    pass

print C.fields
print D.fields
</snippet></ROW><ROW><id>3724160</id><snippet>class Animal:
    def __init__(self, name):    # Constructor of the class
        self.name = name
    def talk(self):              # Abstract method, defined by convention only
        raise NotImplementedError("Subclass must implement abstract method")

class Cat(Animal):
    def talk(self):
        return 'Meow!'

class Dog(Animal):
    def talk(self):
        return 'Woof! Woof!'

animals = [Cat('Missy'),
           Cat('Mr. Mistoffelees'),
           Dog('Lassie')]

for animal in animals:
    print animal.name + ': ' + animal.talk()

# prints the following:
#
# Missy: Meow!
# Mr. Mistoffelees: Meow!
# Lassie: Woof! Woof!
</snippet></ROW><ROW><id>3724160</id><snippet>class Person(object):
 def pay_bill():
   raise NotImplementedError

class Millionare(Person):
 def pay_bill():
   print "Here you go! Keep the change!"

class GradStudent(Person):
 def pay_bill():
   print "Can I owe you ten bucks or do the dishes?"
</snippet></ROW><ROW><id>3724172</id><snippet>,</snippet></ROW><ROW><id>3724172</id><snippet>:</snippet></ROW><ROW><id>3724172</id><snippet>=</snippet></ROW><ROW><id>3724172</id><snippet>ConfigParser</snippet></ROW><ROW><id>3724172</id><snippet># urls.cfg
[URLs]
Google=www.google.com
Hotmail=www.hotmail.com
Yahoo=www.yahoo.com

# Scriptlet
import ConfigParser
filepath = '/home/me/urls.cfg'

config = ConfigParser.ConfigParser()
config.read(filepath)

print config.items('URLs') # Returns a list of tuples.
# [('hotmail', 'www.hotmail.com'), ('google', 'www.google.com'), ('yahoo', 'www.yahoo.com')]
</snippet></ROW><ROW><id>3724177</id><snippet>
class Move:
  TYPES = ['rock', 'paper', 'scissors']
  BEATS = {
    'rock': ['scissors'],
    'paper': ['rock'],
    'scissors': ['paper']
  }

  def __init__(self, type):
    if type not in self.TYPES:
      raise Exception("Invalid move type")
    self.type = type

  def __str__(self):
    return self.type

  def __cmp__(self, other):
    if other.type in self.BEATS[self.type]:
      return 1
    elif self.type in self.BEATS[other.type]:
      return -1
    else:
      return 0
</snippet></ROW><ROW><id>3724395</id><snippet>__file__</snippet></ROW><ROW><id>3724395</id><snippet>os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>3724532</id><snippet>__init__()</snippet></ROW><ROW><id>3724532</id><snippet>ModelForm</snippet></ROW><ROW><id>3724532</id><snippet># forms.py
class TicketForm(forms.ModelForm):
    def __init__(self, current_user, *args, **kwargs):
        super(TicketForm, self).__init__(*args, **kwargs)
        self.fields['event'].queryset = Event.objects.filter(creator = 
             current_user)
</snippet></ROW><ROW><id>3724532</id><snippet>ticket_form = TicketForm(request.user)
</snippet></ROW><ROW><id>3724552</id><snippet>import shelve

d = shelve.open('filename')

d['name'] = 'path'

d.close()
</snippet></ROW><ROW><id>3724552</id><snippet>d = shelve.open('filename')

d = hash['name']
</snippet></ROW><ROW><id>3724558</id><snippet>unique_data = [list(x) for x in set(tuple(x) for x in testdata)]
</snippet></ROW><ROW><id>3724650</id><snippet>getpass.getuser()</snippet></ROW><ROW><id>3724938</id><snippet>subproc.do</snippet></ROW><ROW><id>3725028</id><snippet>__del__</snippet></ROW><ROW><id>3725028</id><snippet>// C++
class A
{
public:
    void someFunc();
};

A* A_new() { return new A(); }
void delete_A(A* obj) { delete obj; }
void A_someFunc(A* obj) { obj-&gt;someFunc(); }

# python
from ctypes import cdll

libA = cdll.LoadLibrary(some_path)

class A:
    def __init__(self):
        self.obj = libA.A_new()

    def __del__(self):
        libA.delete_A(self.obj)

    def some_func(self):
        libA.A_someFunc(self.obj)
</snippet></ROW><ROW><id>3725028</id><snippet>self</snippet></ROW><ROW><id>3725028</id><snippet>__init__</snippet></ROW><ROW><id>3725028</id><snippet>__del__</snippet></ROW><ROW><id>3725028</id><snippet>with</snippet></ROW><ROW><id>3725028</id><snippet>class A:
    def __init__(self):
        self.obj = libA.A_new()

    def __enter__(self):
        return self

    def __exit__(self):
        libA.delete_A(self.obj)

    def some_func(self):
        libA.A_someFunc(self.obj)

with A() as a:
    # Do some work
    a.some_func()
</snippet></ROW><ROW><id>3725260</id><snippet>def tap(x, f):
    f(x)
    return x
</snippet></ROW><ROW><id>3725260</id><snippet>&gt;&gt;&gt; tap([], lambda x: x.append(1))
[1]
</snippet></ROW><ROW><id>3725260</id><snippet>&gt;&gt;&gt; tap(2, lambda x: print(x)) + 3
2
5
</snippet></ROW><ROW><id>3725727</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = """&lt;html&gt;&lt;table border = 1&gt;&lt;tr&gt;&lt;td&gt;JDICOM&lt;/td&gt;&lt;td&gt;Thu Sep 16 10:13:34 CDT 2010&lt;/td&gt;&lt;/tr&gt;&lt;/html&gt;"""
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; for each in soup.findAll(name = 'td'):
 print each.contents[0]


JDICOM
Thu Sep 16 10:13:34 CDT 2010
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3725727</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile('&lt;td&gt;(.*?)&lt;/td&gt;', re.I | re.S)
&gt;&gt;&gt; for each in pattern.findall(html):
 print each


JDICOM
Thu Sep 16 10:13:34 CDT 2010
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3725791</id><snippet>scons LIBFOO=C:\custom_path\libfoo
</snippet></ROW><ROW><id>3725791</id><snippet>scons</snippet></ROW><ROW><id>3725791</id><snippet># read variables from the cache, a user's custom.py file or command line
# arguments
var = Variables(['variables.cache', 'custom.py'], ARGUMENTS)
# add a path variable
var.AddVariables(PathVariable('LIBFOO',
        'where the foo library is installed',
        r'C:\default\libfoo', PathVariable.PathIsDir))

env = Environment(variables=var)
env.Program('test', 'main.c', LIBPATH='$LIBFOO')

# save variables to a file
var.Save('variables.cache', env)
</snippet></ROW><ROW><id>3725791</id><snippet>AddOption</snippet></ROW><ROW><id>3725799</id><snippet>[\w.]+
</snippet></ROW><ROW><id>3725799</id><snippet>[...]</snippet></ROW><ROW><id>3725799</id><snippet>\w</snippet></ROW><ROW><id>3725799</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>3725799</id><snippet>.</snippet></ROW><ROW><id>3725799</id><snippet>.</snippet></ROW><ROW><id>3725799</id><snippet>+</snippet></ROW><ROW><id>3726117</id><snippet>{%</snippet></ROW><ROW><id>3726117</id><snippet>%}</snippet></ROW><ROW><id>3726117</id><snippet>{% mytag %}
</snippet></ROW><ROW><id>3726117</id><snippet>{% mytag value %}
</snippet></ROW><ROW><id>3726117</id><snippet>{{ value|mytag }}</snippet></ROW><ROW><id>3726365</id><snippet>a=[1,2,3]
b=['a','b']
c=[1,2,3,4]
d=[1,2,3]

a==b    #returns False
a==c    #returns False
a==d    #returns True
</snippet></ROW><ROW><id>3726714</id><snippet>return bool(coll)
</snippet></ROW><ROW><id>3727440</id><snippet>import simplejson as json
</snippet></ROW><ROW><id>3727440</id><snippet>data = json.loads(request.raw_post_data)
</snippet></ROW><ROW><id>3728030</id><snippet>&gt;&gt;&gt; sorted(enumerate(a), key=lambda x: x[1])
[(3, 0.4), (1, 1.23), (0, 2.3), (2, 3.4)]
</snippet></ROW><ROW><id>3728030</id><snippet>enumerate</snippet></ROW><ROW><id>3728059</id><snippet>import numpy as np

ua = 5 # No idea what "ua" is in your code above...
low_inc, med_inc = 0.5, 2.0 # Again, no idea what these are...

num = 100
num_fields = 11

# Use more descriptive names than "col1"! I'm just generating the names as placeholders
dtype = {'names':['col%i'%i for i in range(num_fields)],
                 'formats':2*[np.int] + 2*[np.float] + 2*[np.int] + 2*[np.bool] + 3*[np.int]}
data = np.zeros(num, dtype=dtype)

# Being rather verbose...
data['col0'] = np.arange(num, dtype=np.int)
data['col1'] = int(ua) * np.ones(num)
data['col2'] = np.random.uniform(low_inc / 2, med_inc * 2, num)
data['col3'] = np.random.uniform(0, 6, num)
data['col4'] = np.random.randint(100, 5000, num)
data['col5'] = np.random.randint(100, 500, num)
data['col6'] = np.random.randint(0, 2, num).astype(np.bool)
data['col7'] = np.random.randint(0, 2, num).astype(np.bool)
data['col8'] = np.random.randint(100, 5000, num)
data['col9'] = np.random.randint(100, 5000, num)
data['col10'] = np.random.randint(100, 5000, num)

print data
</snippet></ROW><ROW><id>3728059</id><snippet>array([ (0, 5, 2.0886534380436226, 3.0111285613794276, 3476, 117, False, False, 4704, 4372, 4062),
       (1, 5, 2.0977199579338115, 1.8687472941590277, 4635, 496, True, False, 4079, 4263, 3196),
       ...
       ...
       (98, 5, 1.1682309811443277, 1.4100766819689299, 1213, 135, False, False, 1250, 2534, 1160),
       (99, 5, 1.746554619056416, 5.210411489007637, 1387, 352, False, False, 3520, 3772, 3249)], 
      dtype=[('col0', '&lt;i8'), ('col1', '&lt;i8'), ('col2', '&lt;f8'), ('col3', '&lt;f8'), ('col4', '&lt;i8'), ('col5', '&lt;i8'), ('col6', '|b1'), ('col7', '|b1'), ('col8', '&lt;i8'), ('col9', '&lt;i8'), ('col10', '&lt;i8')])
</snippet></ROW><ROW><id>3728176</id><snippet>import datetime
import xlrd

book = xlrd.open_workbook("myfile.xls")
sheet = book.sheet_by_index(0)
cell = sheet.cell(5, 19) # type, &lt;class 'xlrd.sheet.Cell'&gt;


if sheet.cell(5, 19).ctype == 3: # 3 means 'xldate' , 1 means 'text'
    ms_date_number = sheet.cell_value(5, 19) # Correct option 1
    ms_date_number = sheet.cell(5, 19).value # Correct option 2

    year, month, day, hour, minute, second = xlrd.xldate_as_tuple(ms_date_number, 
        book.datemode)
    py_date = datetime.datetime(year, month, day, hour, minute, nearest_second)
</snippet></ROW><ROW><id>3728176</id><snippet>py_date</snippet></ROW><ROW><id>3728176</id><snippet>myfile.xls</snippet></ROW><ROW><id>3728228</id><snippet>import copy

class Base(dict):
    global_class_cache = {}

    def __init__(self, **data):
        self.local_data = data

    def __add__(self, other):
        new_instance = self._new_type((type(self), type(other)))()
        new_instance.update(copy.deepcopy(self).__dict__)
        new_instance.update(copy.deepcopy(other).__dict__)
        return new_instance

    def _new_type(self, parents):
        parents = tuple(parents)
        if parents not in Base.global_class_cache:
            name = '_'.join(cls.__name__ for cls in parents)
            Base.global_class_cache[parents] = type(name, parents, {})
        return Base.global_class_cache[parents]

class A(Base):
    def a(self):
        print "test a"

class B(Base):
    def b(self):
        print "test b"


if __name__ == '__main__':
    a = A(a=1, b=2)
    b = B(c=1)
    c = a + b
    c.b() # should work
    c.a() # should work
    print c.__class__.__name__
</snippet></ROW><ROW><id>3728334</id><snippet>re.match</snippet></ROW><ROW><id>3728334</id><snippet>re.search</snippet></ROW><ROW><id>3728334</id><snippet>re.findall</snippet></ROW><ROW><id>3728334</id><snippet>#!/usr/bin/env python

import re
s = 'aug 12, 2010 abc $123'

print re.findall(r'\$(\d+)', s)
# =&gt; ['123']

print re.search(r'\$(\d+)', s).group()
# =&gt; $123

print re.search(r'\$(\d+)', s).group(1)
# =&gt; 123
</snippet></ROW><ROW><id>3728468</id><snippet>import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
</snippet></ROW><ROW><id>3728635</id><snippet>import threading
import time
import Queue
import sys
import random

class FlowController(threading.Thread):
    def __init__(self,queueStream):
        threading.Thread.__init__(self)        
        self.queueStream=queueStream
    def run(self):
        while True:
            if not self.queueStream.empty():
                print 'Handling tweet'
                self.handleNextTweet()
            else:
                print 'No tweets, sleep for 1 second'
                time.sleep(1)
    def handleNextTweet(self):
        status = self.queueStream.get()
        print(status)

class RunStream(threading.Thread):
    def __init__(self,queueStream):
        threading.Thread.__init__(self)
        self.queueStream=queueStream
    def run(self):
        i=0
        while True:
            addToQueue(self.queueStream,i)
            i+=1
            time.sleep(random.randint(0,2))

def addToQueue(queueStream,status):
    print 'adding tweets to the queue'
    queueStream.put(status)
    if not queueStream.empty():
        print 'queueStream is non-empty'

if __name__ == '__main__':
    queueStream = Queue.Queue()
    try:
        runner = RunStream(queueStream)
        runner.daemon=True
        runner.start()
        flow = FlowController(queueStream)
        flow.daemon=True
        flow.start()
        time.sleep(100)
    except KeyboardInterrupt:
        pass
    finally:
        print('Bye!')
</snippet></ROW><ROW><id>3728703</id><snippet>ImportError</snippet></ROW><ROW><id>3728703</id><snippet>special</snippet></ROW><ROW><id>3728703</id><snippet># at the top of your module:
try:
   import special
except ImportError:
   raise ImportError("this script is meant to be used with Jython")
else:
   raise
</snippet></ROW><ROW><id>3728703</id><snippet>try</snippet></ROW><ROW><id>3728703</id><snippet>sys</snippet></ROW><ROW><id>3728703</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.subversion
('CPython', 'tags/r264', '75821M')
</snippet></ROW><ROW><id>3729445</id><snippet>class Hello:
    def __init__(self):
        self.greeting = "Hello!"

class Salut:
    def __init__(self):
        self.greeting = "Salut!"

if my_switch:
    Hello = Salut
</snippet></ROW><ROW><id>3729458</id><snippet>import inspect
import decorator

def func(f1, kw='default'):
    pass
bare_argspec = inspect.getargspec(func)
print(bare_argspec)
# ArgSpec(args=['f1', 'kw'], varargs=None, keywords=None, defaults=('default',))

@decorator.decorator
def mydecorator(func,*args,**kw):
    result=func(*args,**kw)
    return result

@mydecorator
def func2(f1, kw='default'):
    pass
decorated_argspec = inspect.getargspec(func2)
print(decorated_argspec)
# ArgSpec(args=['f1', 'kw'], varargs=None, keywords=None, defaults=('default',))

assert(bare_argspec==decorated_argspec)
</snippet></ROW><ROW><id>3729957</id><snippet>&gt;&gt;&gt; 'There     is a way'.title()
'There     Is A Way'
</snippet></ROW><ROW><id>3729957</id><snippet>import re 
def title_except(s, exceptions):
   word_list = re.split(' ', s)       #re.split behaves as expected
   final = [word_list[0].capitalize()]
   for word in word_list[1:]:
      final.append(word in exceptions and word or word.capitalize())
   return " ".join(final)

articles = ['a', 'an', 'of', 'the', 'is']
print title_except('there is a    way', articles)
#There is a    Way
print title_except('a whim   of an elephant', articles)
#A Whim   of an Elephant
</snippet></ROW><ROW><id>3729961</id><snippet>image.blit(spritesheet, (0,0), rect)
</snippet></ROW><ROW><id>3729961</id><snippet>image</snippet></ROW><ROW><id>3729961</id><snippet>image= pygame.Surface((35,35))</snippet></ROW><ROW><id>3729995</id><snippet># admin.py
class CustomAdmin(admin.ModelAdmin):
    def render_change_form(self, request, context, *args, **kwargs):
        # here we define a custom template
        self.change_form_template = 'admin/myapp/change_form_help_text.html'
        extra = {
            'help_text': "This is a help message. Good luck filling out the form."
        }

        context.update(extra)
        return super(CustomAdmin, self).render_change_form(request,
            context, *args, **kwargs)
</snippet></ROW><ROW><id>3729995</id><snippet># change_form_help_text.html
{% extends 'admin/change_form.html' %}
{% block form_top %} 
{% if help_text %}&lt;p&gt;{{ help_text }}&lt;/p&gt;{% endif %}
{% endblock %}
</snippet></ROW><ROW><id>3730043</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>3730043</id><snippet>'django.contrib.auth'</snippet></ROW><ROW><id>3730043</id><snippet>INSTALLED_APPS = (
    # django apps first
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',

    # your stuff from here on
    'yourproject.userstuff',
)
</snippet></ROW><ROW><id>3730043</id><snippet>User</snippet></ROW><ROW><id>3730043</id><snippet>ModelAdmin</snippet></ROW><ROW><id>3730512</id><snippet>SaveAs</snippet></ROW><ROW><id>3730512</id><snippet>/</snippet></ROW><ROW><id>3730512</id><snippet>saveAs("C:\\test.xlx")</snippet></ROW><ROW><id>3730768</id><snippet>OrderedDict</snippet></ROW><ROW><id>3730796</id><snippet>def OnClick(self, event):
    button = event.GetEventObject()
    button.SetBitmapDisabled(self.checked)
    button.Enable(False)
    print('cheese')
</snippet></ROW><ROW><id>3730972</id><snippet>latest()</snippet></ROW><ROW><id>3730972</id><snippet>MyObject</snippet></ROW><ROW><id>3730972</id><snippet>latest = MyObject.latest()
</snippet></ROW><ROW><id>3730972</id><snippet>Query</snippet></ROW><ROW><id>3730972</id><snippet>MyObject.all().latest()</snippet></ROW><ROW><id>3730972</id><snippet>class LatestMixin(object):
    """A mixin for db.Model objects that will add a `latest` method to the
    `Query` object returned by cls.all(). Requires that the ORDER_FIELD
    contain the name of the field by which to order the query to determine the
    latest object."""

    # What field do we order by?
    ORDER_FIELD = None

    @classmethod
    def all(cls):
        # Get the real query
        q = super(LatestMixin, cls).all()
        # Define our custom latest method
        def latest():
            if cls.ORDER_FIELD is None:
                raise ValueError('ORDER_FIELD must be defined')
            return q.order('-' + cls.ORDER_FIELD).get()
        # Attach it to the query
        q.latest = latest
        return q

# How to use it
class Foo(LatestMixin, db.Model):
    ORDER_FIELD = 'timestamp'
    timestamp = db.DateTimeProperty(auto_now_add=True)

latest = Foo.all().latest()
</snippet></ROW><ROW><id>3731000</id><snippet>import os
os.system("ls -l")
</snippet></ROW><ROW><id>3731000</id><snippet>import subprocess
test = subprocess.Popen(["ping","-W","2","-c", "1", "192.168.1.70"], stdout=subprocess.PIPE)
output = test.communicate()[0]
</snippet></ROW><ROW><id>3731073</id><snippet>doWrite</snippet></ROW><ROW><id>3731073</id><snippet>queue.get()</snippet></ROW><ROW><id>3731073</id><snippet>callFromThread</snippet></ROW><ROW><id>3731073</id><snippet>Send</snippet></ROW><ROW><id>3731073</id><snippet>from twisted.internet.protocol import Protocol
from twisted.internet.threads import deferToThread

class Send(Protocol):
    def connectionMade(self):
        self.qget()

    def qget(self, data=None):
        if data is not None:
            self.transport.write(data)
        deferToThread(queue.get).addCallback(self.qget)
</snippet></ROW><ROW><id>3731084</id><snippet>def sanity_check( test, name='undefined', ontrue=None, onfalse=None ):
    if test:
        log.debug(name)
        if ontrue is not None:
            ontrue()
    else:
        log.warn( name )
        if onfalse is not None:
            onfalse()

def sanity_checks():
    sanity_check(sanity_access(PATH['userhome'], os.F_OK), 'test home', 
        onfalse=sys.exit)
</snippet></ROW><ROW><id>3731300</id><snippet>k1.strip()</snippet></ROW><ROW><id>3731348</id><snippet>is not</snippet></ROW><ROW><id>3731348</id><snippet>len(self.li)</snippet></ROW><ROW><id>3731348</id><snippet>is not</snippet></ROW><ROW><id>3731348</id><snippet>!=</snippet></ROW><ROW><id>3731348</id><snippet>is</snippet></ROW><ROW><id>3731348</id><snippet>!=</snippet></ROW><ROW><id>3731348</id><snippet>while</snippet></ROW><ROW><id>3731348</id><snippet>while i &lt; 20 and len(self.li) != 4:
</snippet></ROW><ROW><id>3731402</id><snippet>from django.utils.importlib import import_module

def select_view(request, app, view):
    mod = import_module('%s.views' % app)
    return getattr(mod, view)(request)
</snippet></ROW><ROW><id>3731402</id><snippet>views.py</snippet></ROW><ROW><id>3731402</id><snippet>view</snippet></ROW><ROW><id>3731402</id><snippet>get_callable</snippet></ROW><ROW><id>3731402</id><snippet>autodiscover</snippet></ROW><ROW><id>3731431</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s="The Strings"
&gt;&gt;&gt; s=re.sub("\w","#",s)
&gt;&gt;&gt; s
'### #######'
&gt;&gt;&gt; s='Hello' + "her mom's shirt"
&gt;&gt;&gt; s
"Helloher mom's shirt"
&gt;&gt;&gt; re.sub("\w","#",s)
"######## ###'# #####"
</snippet></ROW><ROW><id>3731431</id><snippet>import fileinput
import re 

for line in fileinput.input():
    iter = re.finditer(r'(\'[^\']+\'|"[^"]+")',line)
    for m in iter:
       span = m.span()
       paren = m.group()[0]
       line = line[:span[0]]+paren+'#'*(span[1]-span[0]-2)+paren+line[span[1]:] 
       print line.rstrip()
</snippet></ROW><ROW><id>3731439</id><snippet>[c/t for c,t in zip(conversions, trials)]
</snippet></ROW><ROW><id>3731439</id><snippet>&gt;&gt;&gt; [float(c)/t for c,t in zip(conversions, trials)]
[0.5, 0.0, 1.0, 0.5, 1.0, 0.75]
</snippet></ROW><ROW><id>3731439</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>3731439</id><snippet>//</snippet></ROW><ROW><id>3731439</id><snippet>/</snippet></ROW><ROW><id>3731578</id><snippet>class _ExitCode:
    _exit_codes=["EXIT_CODE","EXIT_CODE_TWO"]
    def __getattr__(self, name):
        if name in _ExitCode._exit_codes:
            return -(_ExitCode._exit_codes.index(name)+1)
        raise AttributeError("Exit code %s not found" % name)

ExitCode=_ExitCode()
print ExitCode.EXIT_CODE #-1
</snippet></ROW><ROW><id>3731580</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>3731580</id><snippet>which python
</snippet></ROW><ROW><id>3731589</id><snippet>import audiolab
import scipy
x = scipy.cos((2*scipy.pi*f/fs)*scipy.arange(fs*T))
audiolab.play(x, fs)
</snippet></ROW><ROW><id>3731589</id><snippet>f</snippet></ROW><ROW><id>3731589</id><snippet>fs</snippet></ROW><ROW><id>3731589</id><snippet>T</snippet></ROW><ROW><id>3731678</id><snippet>x.y.z</snippet></ROW><ROW><id>3731678</id><snippet>x.y</snippet></ROW><ROW><id>3731678</id><snippet>z</snippet></ROW><ROW><id>3731678</id><snippet>x.y</snippet></ROW><ROW><id>3731678</id><snippet>import x.y.z</snippet></ROW><ROW><id>3731678</id><snippet>x = __internal_import('x')
x.y = __internal_import('x/y')
x.y.z = __internal_import('x/y/z')
</snippet></ROW><ROW><id>3731678</id><snippet>__internal_import('x/y')</snippet></ROW><ROW><id>3731678</id><snippet>z</snippet></ROW><ROW><id>3731678</id><snippet>z</snippet></ROW><ROW><id>3731678</id><snippet>import django.contrib.auth.models</snippet></ROW><ROW><id>3731678</id><snippet>__internal_import</snippet></ROW><ROW><id>3731890</id><snippet>screen</snippet></ROW><ROW><id>3731890</id><snippet>stty -F /dev/tty.KeySerial1 19200 raw
cat &lt;/dev/tty.KeySerial1 &gt;logfile
</snippet></ROW><ROW><id>3731890</id><snippet>&gt;&gt;logfile</snippet></ROW><ROW><id>3731890</id><snippet>cat</snippet></ROW><ROW><id>3731890</id><snippet>screen</snippet></ROW><ROW><id>3731890</id><snippet>os.read()</snippet></ROW><ROW><id>3731890</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>3731890</id><snippet>print</snippet></ROW><ROW><id>3731890</id><snippet>\n</snippet></ROW><ROW><id>3731890</id><snippet>for line in open('logfile'):
    if not line.endswith('\n'): break
    ...handle valid line...
</snippet></ROW><ROW><id>3731890</id><snippet>\n</snippet></ROW><ROW><id>3731890</id><snippet>\n</snippet></ROW><ROW><id>3732001</id><snippet>import sys
import select
import tty
import termios

from curses import ascii

def isData():
    return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

old_settings = termios.tcgetattr(sys.stdin)
try:
    tty.setcbreak(sys.stdin.fileno())

    i = 0
    while 1:
        print i
        i += 1

        if isData():
            c = sys.stdin.read(1)
            if c == chr(ascii.ESC):
                break

finally:
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
</snippet></ROW><ROW><id>3732001</id><snippet>curses.ascii</snippet></ROW><ROW><id>3732009</id><snippet>QDialog</snippet></ROW><ROW><id>3732009</id><snippet>QFileDialog::getOpenFileName()</snippet></ROW><ROW><id>3732009</id><snippet>qfiledialog.cpp</snippet></ROW><ROW><id>3732131</id><snippet>persons</snippet></ROW><ROW><id>3732131</id><snippet>persons = person.fetch(limit = 1)
</snippet></ROW><ROW><id>3732131</id><snippet>person</snippet></ROW><ROW><id>3732131</id><snippet>&lt;tr&gt;
  &lt;td&gt;Nome: &lt;/td&gt;
  &lt;td&gt;{{ person.name}}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Apelido: &lt;/td&gt;
  &lt;td&gt;{{ person.phone}}&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>3732131</id><snippet>.fetch(limit=1)</snippet></ROW><ROW><id>3732131</id><snippet>.get()</snippet></ROW><ROW><id>3732231</id><snippet>sort_key</snippet></ROW><ROW><id>3732231</id><snippet>Meta</snippet></ROW><ROW><id>3732231</id><snippet>Meta</snippet></ROW><ROW><id>3732231</id><snippet>class Blablabla(Model):

    def sort_key(self, e):
        return e
</snippet></ROW><ROW><id>3732276</id><snippet>q = Marker_info.all() 
q.filter("info =", "sss")
</snippet></ROW><ROW><id>3732276</id><snippet>marker_data.push([{{i.marker_latlng.geo_pt}}]) 
</snippet></ROW><ROW><id>3732276</id><snippet>marker_data.push([{{i.marker_latlng.geo_pt.lat}}, {{i.marker_latlng.geo_pt.lon}}]) 
</snippet></ROW><ROW><id>3732374</id><snippet>raise</snippet></ROW><ROW><id>3732374</id><snippet>util.py</snippet></ROW><ROW><id>3732374</id><snippet>def do_raise(exc): raise exc
</snippet></ROW><ROW><id>3732374</id><snippet>do_raise(InvalidObjectError(o.name))</snippet></ROW><ROW><id>3732463</id><snippet>StringProperty</snippet></ROW><ROW><id>3732463</id><snippet>StringListProperty</snippet></ROW><ROW><id>3732463</id><snippet>q.filter("info =", "sss")</snippet></ROW><ROW><id>3732463</id><snippet>"sss"</snippet></ROW><ROW><id>3732572</id><snippet>x</snippet></ROW><ROW><id>3732572</id><snippet>Newdata</snippet></ROW><ROW><id>3732572</id><snippet>y = len(Newdata[0])</snippet></ROW><ROW><id>3732572</id><snippet>executemany</snippet></ROW><ROW><id>3732572</id><snippet>holders = ','.join('?' * y)
</snippet></ROW><ROW><id>3732572</id><snippet>sql = 'INSERT INTO testdata VALUES({0})'.format(holders)
</snippet></ROW><ROW><id>3732572</id><snippet>csr.executemany(sql, Newdata)
</snippet></ROW><ROW><id>3732574</id><snippet>toggle-cursor-row</snippet></ROW><ROW><id>3732574</id><snippet>changed</snippet></ROW><ROW><id>3732874</id><snippet>xpath</snippet></ROW><ROW><id>3732874</id><snippet>*[@id=&lt;someid&gt;]</snippet></ROW><ROW><id>3732874</id><snippet>&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; tree = lxml.etree.XML("&lt;root&gt;&lt;a id='1'/&gt;&lt;b id='2'/&gt;&lt;/root&gt;")
&gt;&gt;&gt; tree.xpath("*[@id=1]")
[&lt;Element a at c3bc30&gt;]
&gt;&gt;&gt; lxml.etree.tostring(tree.xpath("*[@id=1]")[0])
'&lt;a id="1"/&gt;'
</snippet></ROW><ROW><id>3732915</id><snippet>def am_i_alive(): 
    hit_points = 20
    if hit_points == 0: 
        print 'dead'
    elif hit_points &lt;= 5: 
        print 'almost dead'
    else: 
        print 'alive'

am_i_alive()
</snippet></ROW><ROW><id>3732915</id><snippet>def</snippet></ROW><ROW><id>3732915</id><snippet>==</snippet></ROW><ROW><id>3732915</id><snippet>=</snippet></ROW><ROW><id>3732915</id><snippet>elif</snippet></ROW><ROW><id>3732915</id><snippet>def am_i_alive(hit_points): 
    if hit_points == 0:
        print 'dead'
    elif hit_points &lt;= 5: 
        print 'almost dead'
    else: 
        print 'alive'

am_i_alive(20)
am_i_alive(3)
am_i_alive(0)
</snippet></ROW><ROW><id>3732915</id><snippet>am_i_alive(x)</snippet></ROW><ROW><id>3732915</id><snippet>x</snippet></ROW><ROW><id>3732915</id><snippet>am_i_alive</snippet></ROW><ROW><id>3732915</id><snippet>x</snippet></ROW><ROW><id>3732915</id><snippet>hit_points</snippet></ROW><ROW><id>3732915</id><snippet>def am_i_alive(hit_points, threshold): 
    if hit_points == 0:
        print 'dead'
    elif hit_points &lt;= threshold: 
        print 'almost dead'
    else: 
        print 'alive'

am_i_alive(20, 5)
am_i_alive(3, 2)
am_i_alive(0, 10)
</snippet></ROW><ROW><id>3732950</id><snippet>allLines = [line for line in stdout.readlines()]
data_no_firstfour = "\n".join(allLines[4:])
</snippet></ROW><ROW><id>3733532</id><snippet>__unicode__</snippet></ROW><ROW><id>3733532</id><snippet>def __unicode__(self):
   return u"Profile for %s" % self.user.get_full_name() 
</snippet></ROW><ROW><id>3733778</id><snippet>import abc

class O(object):
    __metaclass__ = abc.ABCMeta     
    def __init__(self, name):
        self.name = name

    @abc.abstractmethod
    def fn(self):
        pass
</snippet></ROW><ROW><id>3733778</id><snippet>fn</snippet></ROW><ROW><id>3733778</id><snippet>raise NotImplementedError</snippet></ROW><ROW><id>3733778</id><snippet>O</snippet></ROW><ROW><id>3733973</id><snippet>Update() Refresh()</snippet></ROW><ROW><id>3733973</id><snippet>__DoButtons()</snippet></ROW><ROW><id>3733973</id><snippet>list</snippet></ROW><ROW><id>3733973</id><snippet>onEnter()</snippet></ROW><ROW><id>3733973</id><snippet>__DoButtons()</snippet></ROW><ROW><id>3733973</id><snippet>textEntry</snippet></ROW><ROW><id>3734000</id><snippet>if 'name' in mydict:
</snippet></ROW><ROW><id>3734000</id><snippet>has_key()</snippet></ROW><ROW><id>3734018</id><snippet>setup.py</snippet></ROW><ROW><id>3734018</id><snippet>python setup.py bdist_egg</snippet></ROW><ROW><id>3734076</id><snippet>re.DOTALL</snippet></ROW><ROW><id>3734076</id><snippet>r"..."</snippet></ROW><ROW><id>3734076</id><snippet>for m in re.findall(r'[0-9]{8}.*\n.*\n.*\n.*\n.*', l):
   print m
</snippet></ROW><ROW><id>3734076</id><snippet>with open("filename","r") as myfile:
    mydata = myfile.read()
    for m in re.findall(r'[0-9]{8}.*\n.*\n.*\n.*\n.*', mydata):
        print m
</snippet></ROW><ROW><id>3734076</id><snippet>for line in myfile:</snippet></ROW><ROW><id>3734076</id><snippet>myfile.readlines()</snippet></ROW><ROW><id>3734239</id><snippet>class shop(object):
  pass 

class cheese_shop(shop):
  def have_cheese(self, cheese_type):
    return False

class argument_clinic(object):
  def is_right_room(self, room=12):
    return "I've told you once"

import clr
print clr.GetClrType(shop).FullName
print clr.GetClrType(cheese_shop).FullName
print clr.GetClrType(argument_clinic).FullName 
</snippet></ROW><ROW><id>3734487</id><snippet>java.util.PriorityQueue</snippet></ROW><ROW><id>3734690</id><snippet>if not html:
     html = download(url, user_agent).read() 
</snippet></ROW><ROW><id>3734690</id><snippet>with</snippet></ROW><ROW><id>3734690</id><snippet>with open(output, 'wb') as fp:
    chunk = True
    while chunk:
        chunk = req.read(CHUNK_SIZE)
        if chunk:
            fp.write(chunk)
            #fp.flush()
            print '.',
            sys.stdout.flush()
</snippet></ROW><ROW><id>3734690</id><snippet>try:
    fp = open(output, 'w')
    chunk = True
    while chunk:
        chunk = req.read(CHUNK_SIZE)
            if chunk:
                fp.write(chunk)
                #fp.flush()
                print '.',
                sys.stdout.flush()
finally:
    fp.close()
</snippet></ROW><ROW><id>3734797</id><snippet>*</snippet></ROW><ROW><id>3734797</id><snippet>**</snippet></ROW><ROW><id>3734797</id><snippet>def example(*args, **kwargs):
    print "args: {0}".format(args)
    print "kwargs: {0}".format(kwargs)

example(1, 2, 'a', foo='bar', bar='foo')
</snippet></ROW><ROW><id>3734797</id><snippet>args: (1, 2, 'a')
kwargs: {'foo': 'bar', 'bar': 'foo'}
</snippet></ROW><ROW><id>3734797</id><snippet>1, 2, 'a', foo='bar', bar='foo'</snippet></ROW><ROW><id>3734797</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>3734797</id><snippet>def example2(a, b, foo=None, bar=None):
    print "a: {0}, b:{1}, foo:{2}, bar: {3}".format(a, b, foo, bar)

args = (1, 2)
kwargs = {'foo': 'bar', 'bar': 'foo'}
example2(*args, **kwargs)
</snippet></ROW><ROW><id>3734797</id><snippet>a: 1, b:2, foo:bar, bar: foo
</snippet></ROW><ROW><id>3734797</id><snippet>*</snippet></ROW><ROW><id>3734797</id><snippet>**</snippet></ROW><ROW><id>3734797</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>3734797</id><snippet>a, b, foo=None, bar=None</snippet></ROW><ROW><id>3735164</id><snippet>import json
x = {'planet' : {'has': {'plants': 'yes', 'animals': 'yes', 'cryptonite': 'no'}, 'name': 'Earth'}}

print json.dumps(x, indent=2)
</snippet></ROW><ROW><id>3735164</id><snippet>{
  "planet": {
    "has": {
      "plants": "yes", 
      "animals": "yes", 
      "cryptonite": "no"
    }, 
    "name": "Earth"
  }
}
</snippet></ROW><ROW><id>3735490</id><snippet>python-shell</snippet></ROW><ROW><id>3735490</id><snippet>python-default-interpreter</snippet></ROW><ROW><id>3735490</id><snippet>cpython</snippet></ROW><ROW><id>3735490</id><snippet>python-python-command</snippet></ROW><ROW><id>3735490</id><snippet>python-python-command-args</snippet></ROW><ROW><id>3735490</id><snippet>virtualenv.el</snippet></ROW><ROW><id>3735490</id><snippet>python-shell</snippet></ROW><ROW><id>3735490</id><snippet>python</snippet></ROW><ROW><id>3735490</id><snippet>python-python-command</snippet></ROW><ROW><id>3735490</id><snippet>python-python-command-args</snippet></ROW><ROW><id>3735490</id><snippet>pdb</snippet></ROW><ROW><id>3735490</id><snippet>(defadvice virtualenv-activate (after virtual-pdb)
  (custom-set-variables
     '(gud-pdb-command-name
        (concat virtualenv-active "/bin/pdb" ))))

(ad-activate 'virtualenv-activate)
</snippet></ROW><ROW><id>3735490</id><snippet>cp /usr/bin/pdb /path/to/virtual/env/bin
</snippet></ROW><ROW><id>3735490</id><snippet>#! /usr/bin/env python
</snippet></ROW><ROW><id>3735730</id><snippet>super</snippet></ROW><ROW><id>3735730</id><snippet>A.__init__(self)</snippet></ROW><ROW><id>3735730</id><snippet>C</snippet></ROW><ROW><id>3735730</id><snippet>super(A, self)</snippet></ROW><ROW><id>3735730</id><snippet>&lt;super: &lt;class 'A'&gt;, &lt;C object&gt;&gt;</snippet></ROW><ROW><id>3735730</id><snippet>C</snippet></ROW><ROW><id>3735730</id><snippet>&lt;C object&gt;</snippet></ROW><ROW><id>3735730</id><snippet>__init__</snippet></ROW><ROW><id>3735730</id><snippet>class Z(object):
    def __init__(self):
        print "Z"
        super(Z, self).__init__()

class C(A, B, Z):    
    def __init__(self):
        print "C"
        A.__init__(self)
        B.__init__(self)
        Z.__init__(self)
</snippet></ROW><ROW><id>3735730</id><snippet>A</snippet></ROW><ROW><id>3735730</id><snippet>B</snippet></ROW><ROW><id>3735730</id><snippet>Z</snippet></ROW><ROW><id>3735730</id><snippet>B</snippet></ROW><ROW><id>3735730</id><snippet>Z</snippet></ROW><ROW><id>3735866</id><snippet>dict</snippet></ROW><ROW><id>3735866</id><snippet>startswith()</snippet></ROW><ROW><id>3735866</id><snippet>&gt;&gt;&gt; for key in dict1:
...     if key.startswith("EMP$$"):
...         print "Found",key
...
Found EMP$$1
Found EMP$$2
Found EMP$$3
</snippet></ROW><ROW><id>3735866</id><snippet>&gt;&gt;&gt; [value for key,value in dict1.items() if key.startswith("EMP$$")]
[1, 2, 3]
</snippet></ROW><ROW><id>3735866</id><snippet>any()</snippet></ROW><ROW><id>3735866</id><snippet>&gt;&gt;&gt; any(key.startswith("EMP$$") for key in dict1)
True
</snippet></ROW><ROW><id>3735908</id><snippet>(?&lt;!:):(?!:)</snippet></ROW><ROW><id>3735908</id><snippet>(?&lt;!:)  # assert that the previous character is not a colon
:       # match a literal : character
(?!:)   # assert that the next character is not a colon
</snippet></ROW><ROW><id>3735908</id><snippet>::</snippet></ROW><ROW><id>3736039</id><snippet>// Remember that this maps from the proxy's index to the source's index, 
// which is invalid for the extra row the proxy adds.
mapToSource( proxy_index ):
    if proxy_index isn't valid:
        return invalid QModelIndex
    else if proxy_index is for the first row:
        return invalid QModelIndex
    else
        return source model index for (proxy_index.row - 1, proxy_index.column)

mapFromSource( source_index ):
    if source_index isn't valid:
        return invalid QModelIndex
    else if source_index has a parent:
        // This would occur if you are adding an extra top-level 
        // row onto a tree model.
        // You would need to decide how to handle that condition
        return invalid QModelIndex
    else
        return proxy model index for (source_index.row + 1, source_index.column)
</snippet></ROW><ROW><id>3736104</id><snippet>python setup.py bdist_egg</snippet></ROW><ROW><id>3736254</id><snippet>Function EscapeRegEx(text As String) As String
    Dim regEx As RegExp
    Set regEx = New RegExp

    regEx.Global = True
    regEx.Pattern = "(\[|\\|\^|\$|\.|\||\?|\*|\+|\(|\)|\{|\})"

    EscapeRegEx = regEx.Replace(text, "\$1")
End Function
</snippet></ROW><ROW><id>3736494</id><snippet>import Tkinter as tk
import tkFont

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        ## Toolbar
        self.toolbar = tk.Frame()
        self.bold = tk.Button(name="toolbar", text="bold", 
                              borderwidth=1, command=self.OnBold,)
        self.bold.pack(in_=self.toolbar, side="left")

        ## Main part of the GUI
        # I'll use a frame to contain the widget and 
        # scrollbar; it looks a little nicer that way...
        text_frame = tk.Frame(borderwidth=1, relief="sunken")
        self.text = tk.Text(wrap="word", background="white", 
                            borderwidth=0, highlightthickness=0)
        self.vsb = tk.Scrollbar(orient="vertical", borderwidth=1,
                                command=self.text.yview)
        self.text.configure(yscrollcommand=self.vsb.set)
        self.vsb.pack(in_=text_frame,side="right", fill="y", expand=False)
        self.text.pack(in_=text_frame, side="left", fill="both", expand=True)
        self.toolbar.pack(side="top", fill="x")
        text_frame.pack(side="bottom", fill="both", expand=True)

        # clone the text widget font and use it as a basis for some
        # tags
        bold_font = tkFont.Font(self.text, self.text.cget("font"))
        bold_font.configure(weight="bold")
        self.text.tag_configure("bold", font=bold_font)
        self.text.tag_configure("misspelled", foreground="red", underline=True)

        # set up a binding to do simple spell check. This merely
        # checks the previous word when you type a space. For production
        # use you'll need to be a bit more intelligent about when
        # to do it.
        self.text.bind("&lt;space&gt;", self.Spellcheck)

        # initialize the spell checking dictionary. YMMV.
        self._words=open("/usr/share/dict/words").read().split("\n")

    def Spellcheck(self, event):
        '''Spellcheck the word preceeding the insertion point'''
        index = self.text.search(r'\s', "insert", backwards=True, regexp=True)
        if index == "":
            index ="1.0"
        else:
            index = self.text.index("%s+1c" % index)
        word = self.text.get(index, "insert")
        if word in self._words:
            self.text.tag_remove("misspelled", index, "%s+%dc" % (index, len(word)))
        else:
            self.text.tag_add("misspelled", index, "%s+%dc" % (index, len(word)))


    def OnBold(self):
        '''Toggle the bold state of the selected text'''

        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.text.tag_names("sel.first")
        if "bold" in current_tags:
            # first char is bold, so unbold the range
            self.text.tag_remove("bold", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.text.tag_add("bold", "sel.first", "sel.last")

if __name__ == "__main__":
    app=App()
    app.mainloop()
</snippet></ROW><ROW><id>3736669</id><snippet>B</snippet></ROW><ROW><id>3736669</id><snippet>A</snippet></ROW><ROW><id>3736669</id><snippet>B</snippet></ROW><ROW><id>3736669</id><snippet>B</snippet></ROW><ROW><id>3736669</id><snippet>A</snippet></ROW><ROW><id>3736669</id><snippet>B</snippet></ROW><ROW><id>3736669</id><snippet>setattr</snippet></ROW><ROW><id>3736669</id><snippet>Outer</snippet></ROW><ROW><id>3736669</id><snippet>func</snippet></ROW><ROW><id>3736669</id><snippet>setattr</snippet></ROW><ROW><id>3736806</id><snippet>warnings.warn</snippet></ROW><ROW><id>3737410</id><snippet>Meta</snippet></ROW><ROW><id>3737410</id><snippet>get_latest_by</snippet></ROW><ROW><id>3737410</id><snippet>field_name</snippet></ROW><ROW><id>3737410</id><snippet>latest()</snippet></ROW><ROW><id>3737410</id><snippet>get_latest_by</snippet></ROW><ROW><id>3737410</id><snippet>MyModel.objects.latest()</snippet></ROW><ROW><id>3737410</id><snippet>latest()</snippet></ROW><ROW><id>3737410</id><snippet>latest</snippet></ROW><ROW><id>3737410</id><snippet>MyModel</snippet></ROW><ROW><id>3737410</id><snippet>creation_date</snippet></ROW><ROW><id>3737410</id><snippet>latest</snippet></ROW><ROW><id>3737410</id><snippet>latest</snippet></ROW><ROW><id>3737410</id><snippet>from django.db import connection
MyModel.objects.latest()
print connection.queries[-1]['sql']
</snippet></ROW><ROW><id>3737410</id><snippet>SELECT "app_mymodel"."id", "app_mymodel"."creation_date" FROM 
"app_mymodel" ORDER BY "app_mymodel"."creation_date" DESC LIMIT 1
</snippet></ROW><ROW><id>3737410</id><snippet>creation_date DESC</snippet></ROW><ROW><id>3737410</id><snippet>LIMIT</snippet></ROW><ROW><id>3737410</id><snippet>get_latest_by</snippet></ROW><ROW><id>3737410</id><snippet>latest</snippet></ROW><ROW><id>3737410</id><snippet>MyModel.objects.order_by('creation_date').latest()
print connection.queries[-1]['sql']
</snippet></ROW><ROW><id>3737410</id><snippet>SELECT "app_mymodel"."id", "app_mymodel"."creation_date" FROM 
"app_mymodel" ORDER BY "app_mymodel"."creation_date" ASC LIMIT 1
</snippet></ROW><ROW><id>3737410</id><snippet>creation_date ASC</snippet></ROW><ROW><id>3737410</id><snippet>order_by</snippet></ROW><ROW><id>3737410</id><snippet>LIMIT</snippet></ROW><ROW><id>3737410</id><snippet>latest</snippet></ROW><ROW><id>3737410</id><snippet>field_name</snippet></ROW><ROW><id>3737410</id><snippet>objects.latest()</snippet></ROW><ROW><id>3737410</id><snippet>MyModel.objects.latest('id')
print connection.queries[-1]['sql']
</snippet></ROW><ROW><id>3737410</id><snippet>SELECT "app_mymodel"."id", "app_mymodel"."creation_date" FROM "app_mymodel"
ORDER BY "app_mymodel"."id" DESC LIMIT 1
</snippet></ROW><ROW><id>3737441</id><snippet>shell=False</snippet></ROW><ROW><id>3737441</id><snippet>sudo('some_command', shell=False)</snippet></ROW><ROW><id>3737441</id><snippet>if (not env.use_shell) or (not shell):
    real_command = "%s %s" % (sudo_prefix, _shell_escape(command))
</snippet></ROW><ROW><id>3737441</id><snippet>                                             # V-- here's where /bin/bash is added
real_command = '%s %s "%s"' % (sudo_prefix, env.shell,
    _shell_escape(cwd + command))
</snippet></ROW><ROW><id>3737638</id><snippet>class ProfilForm(ModelForm):
    categories  = CategoriesField(queryset=Category.objects.all().order_by('group'), label=_(u'Catégories'))
</snippet></ROW><ROW><id>3737810</id><snippet>while itemq.isEmpty():
        cond.wait()
</snippet></ROW><ROW><id>3737810</id><snippet>def wait():
    cond.release()
    wait for notify
    cond.aquire()
</snippet></ROW><ROW><id>3737917</id><snippet>d = eval(some_string)
</snippet></ROW><ROW><id>3737917</id><snippet>import ast
d = ast.literal_eval(some_string)
</snippet></ROW><ROW><id>3738402</id><snippet>dogs</snippet></ROW><ROW><id>3738402</id><snippet>CREATE TABLE `dogs` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name` VARCHAR(64),
  `age` INT UNSIGNED,
  `sex` ENUM('Male','Female')
);
</snippet></ROW><ROW><id>3738402</id><snippet>dog_mesaurements</snippet></ROW><ROW><id>3738402</id><snippet>CREATE TABLE `dog_measurements` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `dog_id` INT UNSIGNED NOT NULL,
  `paw` ENUM ('Front Left','Front Right','Rear Left','Rear Right'),
  `taken_at` DATETIME NOT NULL
);
</snippet></ROW><ROW><id>3738402</id><snippet>INSERT INTO dog_measurements (dog_id,taken_at) VALUES (*?*, NOW());</snippet></ROW><ROW><id>3738402</id><snippet>dogs</snippet></ROW><ROW><id>3738402</id><snippet>CREATE TABLE `dog_measurement_data` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `dog_measurement_id` INT UNSIGNED NOT NULL,
  `frame` INT UNSIGNED,
  `sensor_row` INT UNSIGNED,
  `sensor_col` INT UNSIGNED,
  `value` NUMBER
);
</snippet></ROW><ROW><id>3738402</id><snippet>INSERT INTO `dog_measurement_data` (`dog_measurement_id`,`frame`,`sensor_row`,`sensor_col`,`value`) VALUES
(*measurement_id?*, *frame_number?*, *sensor_row?*, *sensor_col?*, *value?*)
</snippet></ROW><ROW><id>3738402</id><snippet>dog_measurement_data</snippet></ROW><ROW><id>3738402</id><snippet>SELECT `sensor_row`,sensor_col`,`value` FROM `dog_measurement_data`
WHERE `dog_measurement_id`=*some measurement id* AND `frame`=*some frame number*
ORDER BY `sensor_row`,`sensor_col`
</snippet></ROW><ROW><id>3738811</id><snippet>libusb</snippet></ROW><ROW><id>3738811</id><snippet>root</snippet></ROW><ROW><id>3738811</id><snippet>root</snippet></ROW><ROW><id>3738811</id><snippet>CAP_SYS_RAWIO</snippet></ROW><ROW><id>3739456</id><snippet>from django.core.validators import validate_email
</snippet></ROW><ROW><id>3739484</id><snippet>pip install django
</snippet></ROW><ROW><id>3739682</id><snippet>testimports.py</snippet></ROW><ROW><id>3739682</id><snippet>import moduleOne

hiString = "Hi!"

def main ():
    moduleOne.sayHi()

if __name__ == "__main__":
    main ()
</snippet></ROW><ROW><id>3739939</id><snippet>&gt;&gt;&gt; s = " \t foo \n bar "
&gt;&gt;&gt; "".join(s.split())
'foobar'
</snippet></ROW><ROW><id>3739939</id><snippet>&gt;&gt;&gt; s.replace(" ", "")
'\tfoo\nbar'
</snippet></ROW><ROW><id>3739939</id><snippet>$ python -m timeit '"".join(" \t foo \n bar ".split())'
1000000 loops, best of 3: 1.38 usec per loop
$ python -m timeit -s 'import re' 're.sub(r"\s+", "", " \t foo \n bar ")'
100000 loops, best of 3: 15.6 usec per loop
</snippet></ROW><ROW><id>3739939</id><snippet>$ python -m timeit -s 'import re; e = re.compile(r"\s+")' 'e.sub("", " \t foo \n bar ")'
100000 loops, best of 3: 7.76 usec per loop
</snippet></ROW><ROW><id>3740096</id><snippet>class MyDict(dict):
   def __getitem__(self, item):
       return dict.__getitem__(self, item) % self

dictionary = MyDict({

    'user' : 'gnucom',
    'home' : '/home/%(user)s',
    'bin' : '%(home)s/bin' 
})


print dictionary["home"]
print dictionary["bin"]
</snippet></ROW><ROW><id>3740191</id><snippet>import itertools
for combo in itertools.product(xrange(1, 10), repeat=N):
  ...
</snippet></ROW><ROW><id>3740447</id><snippet>from pyamf import python
</snippet></ROW><ROW><id>3740494</id><snippet>def</snippet></ROW><ROW><id>3740494</id><snippet>foo</snippet></ROW><ROW><id>3740494</id><snippet>bar()</snippet></ROW><ROW><id>3740494</id><snippet>return bar</snippet></ROW><ROW><id>3740494</id><snippet>&gt;&gt;&gt; def outer():
...   def inner(): return 'boo'
...   print inner()
... 
&gt;&gt;&gt; eval(outer.func_code.co_consts[1])
'boo'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3740494</id><snippet>eval</snippet></ROW><ROW><id>3740942</id><snippet>filename = raw_input("Please enter the file name: ")
with open(filename) as f:
    lines = f.readlines()
    for i in xrange(0, len(lines), 20):
        print lines[i:i+20]
        raw_input("Press Enter for more")
</snippet></ROW><ROW><id>3740942</id><snippet>with</snippet></ROW><ROW><id>3740942</id><snippet>open</snippet></ROW><ROW><id>3740942</id><snippet>close</snippet></ROW><ROW><id>3740942</id><snippet>break</snippet></ROW><ROW><id>3740942</id><snippet>break</snippet></ROW><ROW><id>3740942</id><snippet>just calling a blocking operation like</snippet></ROW><ROW><id>3740942</id><snippet>continue</snippet></ROW><ROW><id>3740942</id><snippet>continue</snippet></ROW><ROW><id>3740942</id><snippet>if q == "": x += 20</snippet></ROW><ROW><id>3740942</id><snippet>if not q: x += 20</snippet></ROW><ROW><id>3740942</id><snippet>False</snippet></ROW><ROW><id>3741275</id><snippet>SetSize()</snippet></ROW><ROW><id>3741275</id><snippet>w, h = self.GetClientSize()
self.SetSize((w, h + height_of_your_new_button))
</snippet></ROW><ROW><id>3741427</id><snippet>&lt;form method="post" action=""&gt;
 &lt;input type="hidden" name="_method" value="put" /&gt;
 &lt;input type="text" name="name" value="" /&gt;
 &lt;input type="submit" value="Save" /&gt;
&lt;/form&gt; 

def post(self):
    method= self.request.get("_method")
    if method == 'put':
       #call put() function as required
</snippet></ROW><ROW><id>3741757</id><snippet>match</snippet></ROW><ROW><id>3741757</id><snippet>search</snippet></ROW><ROW><id>3741757</id><snippet>re.match( pattern, line)</snippet></ROW><ROW><id>3741757</id><snippet>pattern.match(line)</snippet></ROW><ROW><id>3741757</id><snippet>import re
from time import time
def main():
    line = r'I do not start with an underscore 123456789012345678901234567890'
    p1 = re.compile(r"_") # requires  underscore as a first char
    p2 = re.compile(r"abcdefghijklmnopqrstuvwxyz")
    patterns = (p1, p2)

    for p in patterns:
        start = time()
        for i in xrange(1000*1000):
            match = p.match(line)
        end = time() 
        print 'Elapsed: ' + str(end-start) 
main()
</snippet></ROW><ROW><id>3742178</id><snippet>type(x)</snippet></ROW><ROW><id>3742178</id><snippet>x</snippet></ROW><ROW><id>3742178</id><snippet>TypeError</snippet></ROW><ROW><id>3742360</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>3742360</id><snippet>logger.warn(...)
logger.log(...)
</snippet></ROW><ROW><id>3742591</id><snippet>SetUnhandledExceptionHandler(yourexceptionhandler);</snippet></ROW><ROW><id>3742591</id><snippet>exit</snippet></ROW><ROW><id>3742591</id><snippet>UnhandledExceptionFilter(LPEXCEPTION_POINTERS ep) {
  fputs("Application crashed with unhandled exception!\n", stderr);


  // Exit to prevent anything else from handling this exception.
  _exit(-3);
}


int main() {
  SetUnhandledExceptionFilter(UnhandledExceptionFilter);
}
</snippet></ROW><ROW><id>3742591</id><snippet>CreateProcess(..., DEBUG_PROCESS, ...)</snippet></ROW><ROW><id>3742591</id><snippet>WaitForDebugEvent</snippet></ROW><ROW><id>3742598</id><snippet>Wend</snippet></ROW><ROW><id>3742608</id><snippet>str</snippet></ROW><ROW><id>3742657</id><snippet>echo</snippet></ROW><ROW><id>3742657</id><snippet>python</snippet></ROW><ROW><id>3742657</id><snippet>PATH</snippet></ROW><ROW><id>3743205</id><snippet>object.__set__(self, instance,
  value)</snippet></ROW><ROW><id>3743205</id><snippet>__get__</snippet></ROW><ROW><id>3743205</id><snippet>__set__</snippet></ROW><ROW><id>3743240</id><snippet>date</snippet></ROW><ROW><id>3743240</id><snippet>datetime.datetime.now().date()
</snippet></ROW><ROW><id>3743292</id><snippet>reload(sys)</snippet></ROW><ROW><id>3743292</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print&gt;&gt;sys.stderr,'ciao'
ciao
&gt;&gt;&gt; sys.stderr.close()
&gt;&gt;&gt; print&gt;&gt;sys.stderr,'ciao'
&gt;&gt;&gt; reload(sys)
&lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; print&gt;&gt;sys.stderr,'ciao'
</snippet></ROW><ROW><id>3743292</id><snippet>sys.stdout</snippet></ROW><ROW><id>3743292</id><snippet>sys.stderr</snippet></ROW><ROW><id>3743292</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>3743292</id><snippet>sys.__stderr__</snippet></ROW><ROW><id>3743292</id><snippet>os.fdopen</snippet></ROW><ROW><id>3743351</id><snippet>__init__</snippet></ROW><ROW><id>3743555</id><snippet>intern</snippet></ROW><ROW><id>3743663</id><snippet>*section*
</snippet></ROW><ROW><id>3743663</id><snippet>*</snippet></ROW><ROW><id>3743663</id><snippet>*</snippet></ROW><ROW><id>3743877</id><snippet>resumeProducing</snippet></ROW><ROW><id>3743877</id><snippet>resumeProducing</snippet></ROW><ROW><id>3743877</id><snippet>pauseProducing</snippet></ROW><ROW><id>3743877</id><snippet>pauseProducing</snippet></ROW><ROW><id>3743877</id><snippet>stopProducing</snippet></ROW><ROW><id>3744237</id><snippet>inputstring.decode('utf-8')</snippet></ROW><ROW><id>3744237</id><snippet>outputstring.encode('utf-8')</snippet></ROW><ROW><id>3744237</id><snippet>'this is a normal string'.decode('utf-8') == u'this is a normal string'</snippet></ROW><ROW><id>3744237</id><snippet>'foo'</snippet></ROW><ROW><id>3744237</id><snippet>u'foo'</snippet></ROW><ROW><id>3744238</id><snippet>grid_forget()</snippet></ROW><ROW><id>3744238</id><snippet>self.start.grid_forget()
</snippet></ROW><ROW><id>3744238</id><snippet>frame</snippet></ROW><ROW><id>3744248</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3744248</id><snippet>chmod +x myscript.py
</snippet></ROW><ROW><id>3744248</id><snippet>export PATH=${PATH}:`pwd` # on Unix-like systems

SET PATH=%PATH%;\path\to # on Windows
</snippet></ROW><ROW><id>3744248</id><snippet>myscript.py</snippet></ROW><ROW><id>3744444</id><snippet>import networkx as nx

# one of your examples
g1 = nx.Graph([(1,3), (15,21), (1,10), (57,66), (76,85), (66,76)])
print nx.connected_components(g1) # [[57, 66, 76, 85], [1, 10, 3], [21, 15]]

# my own test case
g2 =  nx.Graph([(1,2),(2,10), (20,3), (3,4), (4,10)])
print nx.connected_components(g2) # [[1, 2, 3, 4, 10, 20]]
</snippet></ROW><ROW><id>3744518</id><snippet>body</snippet></ROW><ROW><id>3744518</id><snippet>HTTP</snippet></ROW><ROW><id>3744518</id><snippet>POST</snippet></ROW><ROW><id>3744518</id><snippet>twisted</snippet></ROW><ROW><id>3744524</id><snippet>def getrows_byslice(seq, rowlen):
    for start in xrange(0, len(seq), rowlen):
        yield seq[start:start+rowlen]
</snippet></ROW><ROW><id>3744524</id><snippet>list(getrows_byslice(seq, 3))</snippet></ROW><ROW><id>3744524</id><snippet>grouper</snippet></ROW><ROW><id>3744524</id><snippet>import itertools

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3744524</id><snippet>list</snippet></ROW><ROW><id>3744682</id><snippet>webbrowser.open(path_to_file)
</snippet></ROW><ROW><id>3744682</id><snippet>os.startfile(url)
</snippet></ROW><ROW><id>3744682</id><snippet>import os,webbrowser
iexplore = os.path.join(os.environ.get("PROGRAMFILES", "C:\\Program Files"),
                        "Internet Explorer\\IEXPLORE.EXE")
browser = webbrowser.get(iexplore)
browser.open(path_to_file)
</snippet></ROW><ROW><id>3744682</id><snippet>browser = webbrowser.get("firefox")
</snippet></ROW><ROW><id>3744713</id><snippet>for item in C:
    assert item in C
</snippet></ROW><ROW><id>3744713</id><snippet>in</snippet></ROW><ROW><id>3744713</id><snippet>C</snippet></ROW><ROW><id>3744713</id><snippet>in</snippet></ROW><ROW><id>3744713</id><snippet>for</snippet></ROW><ROW><id>3744713</id><snippet>in</snippet></ROW><ROW><id>3744713</id><snippet>if (key, value) in C</snippet></ROW><ROW><id>3744713</id><snippet>if C.get(key) == value</snippet></ROW><ROW><id>3744713</id><snippet>if k in C</snippet></ROW><ROW><id>3744713</id><snippet>for k in thedict:
    thedict[k] += 1
</snippet></ROW><ROW><id>3744713</id><snippet>for k, v in thedict.items():
    thedict[k] = v + 1
</snippet></ROW><ROW><id>3744713</id><snippet>items</snippet></ROW><ROW><id>3744713</id><snippet>iteritems</snippet></ROW><ROW><id>3744713</id><snippet>items</snippet></ROW><ROW><id>3744903</id><snippet>for r in [regex.match(s) for s in str]:
    if r:
        print r.groups()
</snippet></ROW><ROW><id>3744903</id><snippet>for r in filter(None, map(regex.match, str)):
    print r.groups()
</snippet></ROW><ROW><id>3744941</id><snippet>Pattern myPattern = Pattern.compile("([A-Z])(\d+)")
Matcher myMatcher = myPattern.matcher("A12R5F28");
while (myMatcher.find()) {
      // Do your stuff here
}
</snippet></ROW><ROW><id>3745214</id><snippet>import subprocess
out, err = subprocess.Popen(["pdftotext", "-", "-"], stdout=subprocess.PIPE).communicate(pdf_data)
</snippet></ROW><ROW><id>3745266</id><snippet>prices = request.POST.getlist("IPN_PRICE[]")
</snippet></ROW><ROW><id>3745282</id><snippet>fromlist</snippet></ROW><ROW><id>3745282</id><snippet>""</snippet></ROW><ROW><id>3745282</id><snippet>fromlist</snippet></ROW><ROW><id>3745282</id><snippet>module.submodule</snippet></ROW><ROW><id>3745282</id><snippet>testpkg.</snippet></ROW><ROW><id>3745282</id><snippet>testpkg</snippet></ROW><ROW><id>3745282</id><snippet>pkg = __import__("testpkg", fromlist=[''])
import sys
print sys["testpkg"]
print sys["testpkg."]
</snippet></ROW><ROW><id>3745525</id><snippet>save</snippet></ROW><ROW><id>3745525</id><snippet>A</snippet></ROW><ROW><id>3745525</id><snippet>def save(self,**kwargs):
   super(A,self).save(**kwargs)
   B(a=self,data=data).save()
</snippet></ROW><ROW><id>3745811</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>3746242</id><snippet>MEDIA_ROOT = os.path.join(os.path.dirname(file), "media").replace(r"\\", "//")
</snippet></ROW><ROW><id>3746343</id><snippet>self.some_widget
</snippet></ROW><ROW><id>3747058</id><snippet>urllib</snippet></ROW><ROW><id>3747058</id><snippet>from google.appengine.api import urlfetch

url = "https://www.google.com/"
result = urlfetch.fetch(url)
if result.status_code == 200:
  doSomethingWithResult(result.content)
</snippet></ROW><ROW><id>3747783</id><snippet>Districts</snippet></ROW><ROW><id>3747783</id><snippet>required=False</snippet></ROW><ROW><id>3747783</id><snippet>Districts</snippet></ROW><ROW><id>3747783</id><snippet>db.delete()</snippet></ROW><ROW><id>3747829</id><snippet>&lt;textarea name="items"&gt;&lt;/textarea&gt;
</snippet></ROW><ROW><id>3747829</id><snippet>itemList = self.request.get("items")
</snippet></ROW><ROW><id>3747829</id><snippet>items = itemList.split("\n")
</snippet></ROW><ROW><id>3747889</id><snippet>In [69]: import os

In [70]: paths
Out[70]: ['/abs/path/foo', 'rel/path', 'just-a-file']

In [71]: [next(part for part in path.split(os.path.sep) if part) for path in paths]
Out[71]: ['abs', 'rel', 'just-a-file']
</snippet></ROW><ROW><id>3747990</id><snippet>&gt;&gt;&gt; sys.path.append('/path/to/directory/that/my/module/is/in/')
&gt;&gt;&gt; import mymod #.py
</snippet></ROW><ROW><id>3747990</id><snippet>&gt;&gt;&gt;&gt; reload(mymod)
</snippet></ROW><ROW><id>3747990</id><snippet>from mymod import foo</snippet></ROW><ROW><id>3747990</id><snippet>reload</snippet></ROW><ROW><id>3747990</id><snippet>foo</snippet></ROW><ROW><id>3747990</id><snippet>reload</snippet></ROW><ROW><id>3747990</id><snippet>mymod.foo</snippet></ROW><ROW><id>3747990</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3747990</id><snippet>workon</snippet></ROW><ROW><id>3747990</id><snippet>workon foo</snippet></ROW><ROW><id>3747990</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3747990</id><snippet>-i</snippet></ROW><ROW><id>3747990</id><snippet>$ python -i mymod.py
</snippet></ROW><ROW><id>3748071</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; y = [4,5,6]
&gt;&gt;&gt; x.append(y)
&gt;&gt;&gt; x
[1, 2, 3, [4, 5, 6]]
</snippet></ROW><ROW><id>3748071</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; y = [4,5,6]
&gt;&gt;&gt; x + y
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; x.extend(y)
&gt;&gt;&gt; x
[1, 2, 3, 4, 5, 6] 
</snippet></ROW><ROW><id>3748267</id><snippet>from flask import request
</snippet></ROW><ROW><id>3748299</id><snippet>ListProperty</snippet></ROW><ROW><id>3748299</id><snippet>float</snippet></ROW><ROW><id>3748299</id><snippet>temperatures = db.ListProperty(float)
</snippet></ROW><ROW><id>3748299</id><snippet>float</snippet></ROW><ROW><id>3748307</id><snippet>query</snippet></ROW><ROW><id>3748307</id><snippet>&gt;&gt;&gt; queryset = MyModel.objects.all()
&gt;&gt;&gt; print queryset.query
SELECT "myapp_mymodel"."id", ... FROM "myapp_mymodel"
</snippet></ROW><ROW><id>3748694</id><snippet>def distance(v1, v2, d):
    if hasattr(d, '__name__'):
        print d.__name__
    elif hasattr(d, '__class__'):
        print d.__class__.__name__
    else:
        print d   # unsure about this case
    dist = d(v1, v2)
    print dist
    return dist
</snippet></ROW><ROW><id>3748810</id><snippet>mro</snippet></ROW><ROW><id>3748810</id><snippet>Zen of Python</snippet></ROW><ROW><id>3748810</id><snippet>Errors should never pass silently.
Unless explicitly silenced.
</snippet></ROW><ROW><id>3748810</id><snippet>int(name='booga')</snippet></ROW><ROW><id>3748810</id><snippet>class Super</snippet></ROW><ROW><id>3748810</id><snippet>int</snippet></ROW><ROW><id>3748810</id><snippet>class Sub</snippet></ROW><ROW><id>3748810</id><snippet>Super</snippet></ROW><ROW><id>3748810</id><snippet>class Int(int):
    def __new__(cls, *a, **k):
        return int.__new__(Int, a[0] if a else 0)
</snippet></ROW><ROW><id>3748810</id><snippet>__new__</snippet></ROW><ROW><id>3748810</id><snippet>__init__</snippet></ROW><ROW><id>3748810</id><snippet>int</snippet></ROW><ROW><id>3748810</id><snippet>__new__</snippet></ROW><ROW><id>3748810</id><snippet>&gt;&gt;&gt; class X(Super, Int): pass
... 
&gt;&gt;&gt; X(23, za='zo')
23
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3748810</id><snippet>X</snippet></ROW><ROW><id>3748810</id><snippet>Int</snippet></ROW><ROW><id>3748810</id><snippet>__new__</snippet></ROW><ROW><id>3748810</id><snippet>int</snippet></ROW><ROW><id>3748810</id><snippet>int</snippet></ROW><ROW><id>3748810</id><snippet>__new__</snippet></ROW><ROW><id>3748866</id><snippet>[\u00D8-\u00F6]
</snippet></ROW><ROW><id>3749146</id><snippet>get</snippet></ROW><ROW><id>3749261</id><snippet>&lt;td&gt;{% documento.cuentasxdocumento_set.all | sum_monto:"pos" %}&lt;/td&gt;
&lt;td&gt;{% documento.cuentasxdocumento_set.all | sum_monto:"neg" %}&lt;/td&gt;
</snippet></ROW><ROW><id>3749261</id><snippet>sum_monto</snippet></ROW><ROW><id>3749261</id><snippet>from django import template

register = template.Library()

@register.filter
def sum_monto(cuentas, op):
    if op == "pos":
         return sum(c.monto for c in cuentas if c.monto &gt; 0)
    else
         return sum(c.monto for c in cuentas if c.monto &lt; 0)
</snippet></ROW><ROW><id>3749350</id><snippet>topToolBar.Add(toolbar1,1,wx.ALIGN_LEFT,4) # note the 2nd param 'proportion' is 1
#topToolBar.AddStretchSpacer()
topToolBar.Add(toolbar1,0,wx.ALIGN_RIGHT,4)
</snippet></ROW><ROW><id>3749537</id><snippet>&gt;&gt;&gt; input = [('11013331', 'KAT'), ('9085267', 'NOT'), ('5238761', 'ETH'), ('5349618', 'ETH'), ('11788544', 'NOT'), ('962142', 'ETH'), ('7795297', 'ETH'), ('7341464', 'ETH'), ('9843236', 'KAT'), ('5594916', 'ETH'), ('1550003', 'ETH')]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; res = defaultdict(list)
&gt;&gt;&gt; for v, k in input: res[k].append(v)
...
</snippet></ROW><ROW><id>3749537</id><snippet>&gt;&gt;&gt; [{'type':k, 'items':v} for k,v in res.items()]
[{'items': ['9085267', '11788544'], 'type': 'NOT'}, {'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}, {'items': ['11013331', '9843236'], 'type': 'KAT'}]
</snippet></ROW><ROW><id>3749537</id><snippet>&gt;&gt;&gt; sorted_input = sorted(input, key=itemgetter(1))
&gt;&gt;&gt; groups = groupby(sorted_input, key=itemgetter(1))
&gt;&gt;&gt; [{'type':k, 'items':[x[0] for x in v]} for k, v in groups]
[{'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}, {'items': ['11013331', '9843236'], 'type': 'KAT'}, {'items': ['9085267', '11788544'], 'type': 'NOT'}]
</snippet></ROW><ROW><id>3749537</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; res = OrderedDict()
&gt;&gt;&gt; for v, k in input:
...   if k in res: res[k].append(v)
...   else: res[k] = [v]
... 
&gt;&gt;&gt; [{'type':k, 'items':v} for k,v in res.items()]
[{'items': ['11013331', '9843236'], 'type': 'KAT'}, {'items': ['9085267', '11788544'], 'type': 'NOT'}, {'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}]
</snippet></ROW><ROW><id>3749823</id><snippet>TypeError</snippet></ROW><ROW><id>3749823</id><snippet>&gt;&gt;&gt; 3.0 / 'abc'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: unsupported operand type(s) for /: 'float' and 'str'
</snippet></ROW><ROW><id>3749929</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; StringIO().write(str((1,2)))
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3749929</id><snippet>&gt;&gt;&gt; io.StringIO().write(unicode((1,2)))
6
</snippet></ROW><ROW><id>3750030</id><snippet>result = sorted(result, key=lambda x: x.modified, reverse=True)
</snippet></ROW><ROW><id>3750766</id><snippet>import rpy2.robjects as ro
r=ro.r

data=[(15002325, 24, 20, 1393, -67333094L, 38, 4, 493.48763257822799, 493.63348372593703), (15002339, 76, 20, 1393, -67333094L, 91, 3, 499.95845909922201, 499.970048093743), (15002431, 24, 20, 1394, -67333094L, 38, 4, 493.493464900383, 493.63348372593703), (15002483, 76, 20, 1394, -67333094L, 91, 3, 499.959042442434, 499.97304310494502)]
columns=zip(*data)
columns=[ro.FloatVector(col) for col in columns]
names=['col{i}'.format(i=i) for i in range(9)]
dataf = r['data.frame'](**dict(zip(names,columns)))
print(dataf)

#       col8 col6     col7      col4 col5 col2 col3     col0 col1
# 1 493.6335    4 493.4876 -67333094   38   20 1393 15002325   24
# 2 499.9700    3 499.9585 -67333094   91   20 1393 15002339   76
# 3 493.6335    4 493.4935 -67333094   38   20 1394 15002431   24
# 4 499.9730    3 499.9590 -67333094   91   20 1394 15002483   76
</snippet></ROW><ROW><id>3750766</id><snippet>ro.r</snippet></ROW><ROW><id>3751434</id><snippet>SomeModule.SomeFunction(str(s.encode('utf-8')))
</snippet></ROW><ROW><id>3751434</id><snippet>SomeModule.SomeFunctionW(str(s.encode('utf-16-le')))
</snippet></ROW><ROW><id>3751917</id><snippet>os.path.join</snippet></ROW><ROW><id>3751917</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.join('/my/root/directory', 'in', 'here')
'/my/root/directory/in/here'
</snippet></ROW><ROW><id>3752057</id><snippet>u</snippet></ROW><ROW><id>3752057</id><snippet>&gt;&gt;&gt; str1="Adam Matan"
&gt;&gt;&gt; str2=u"אדם מתן"
&gt;&gt;&gt; print "X %20s X" % str1
X           Adam Matan X
&gt;&gt;&gt; print "X %20s X" % str2
X              אדם מתן X
</snippet></ROW><ROW><id>3752221</id><snippet>import</snippet></ROW><ROW><id>3752221</id><snippet>gdata.service</snippet></ROW><ROW><id>3752221</id><snippet>gdata</snippet></ROW><ROW><id>3752221</id><snippet>gdata</snippet></ROW><ROW><id>3752221</id><snippet>service</snippet></ROW><ROW><id>3752221</id><snippet>from gdata import service</snippet></ROW><ROW><id>3752221</id><snippet>import service</snippet></ROW><ROW><id>3752246</id><snippet>traceit()</snippet></ROW><ROW><id>3752246</id><snippet>traceit(False)</snippet></ROW><ROW><id>3752246</id><snippet>import sys
import linecache

def _traceit(frame, event, arg):
    '''
    http://www.dalkescientific.com/writings/diary/archive/2005/04/20/tracing_python_code.html
    '''
    if event == "line":
        lineno = frame.f_lineno
        filename = frame.f_globals["__file__"]
        if (filename.endswith(".pyc") or
            filename.endswith(".pyo")):
            filename = filename[:-1]
        name = frame.f_globals["__name__"]
        line = linecache.getline(filename, lineno)
        print "%s  # %s:%s" % (line.rstrip(), name, lineno,)
    return _traceit

def _passit(frame, event, arg):
    return _passit

def traceit(on=True):
    if on: sys.settrace(_traceit)
    else: sys.settrace(_passit)

def mktemp(src):
    pass

def my_mktemp(src):
    mktemp(src)
    p=src

traceit()
for src in ('cpfs.c','log.c',):
    my_mktemp(src)
traceit(False)
</snippet></ROW><ROW><id>3752246</id><snippet>mktemp(src)  # __main__:33
pass  # __main__:30
p=src  # __main__:34
mktemp(src)  # __main__:33
pass  # __main__:30
p=src  # __main__:34
if on: sys.settrace(_traceit)  # __main__:26
else: sys.settrace(_passit)  # __main__:27
</snippet></ROW><ROW><id>3752273</id><snippet>FullName = LastName + (", " + FirstName if FirstName else "")
</snippet></ROW><ROW><id>3752505</id><snippet>from binascii import b2a_hex, a2b_hex
import active_directory as ad


# entry_type, see http://msdn.microsoft.com/en-us/library/cc840018.aspx
#  + AB_DT_CONTAINER     0x000000100
#  + AB_DT_TEMPLATE      0x000000101
#  + AB_DT_OOUSER        0x000000102
#  + AB_DT_SEARCH        0x000000200
# ab_flags, maybe see here: https://svn.openchange.org/openchange/trunk/libmapi/mapidefs.h

def gen_exchange_entry_id(user_id, ab_flags=0, entry_type = 0):
    muidEMSAB = "DCA740C8C042101AB4B908002B2FE182"
    version = 1

    # Find user and bail out if it's not there
    ad_obj = ad.find_user(user_id)
    if not ad_obj:
        return None

    return "%08X%s%08X%08X%s00" % (
        ab_flags,
        muidEMSAB,
        version,
        entry_type,
        b2a_hex(ad_obj.legacyExchangeDN.upper()).upper(),
    )

data = gen_exchange_entry_id("myusername")
print data 
print len(a2b_hex(data))
</snippet></ROW><ROW><id>3752829</id><snippet>islice</snippet></ROW><ROW><id>3752829</id><snippet>islice( myarr, 0, len(myarr)-1 )
</snippet></ROW><ROW><id>3753008</id><snippet>ileft = 0 // index into left array
iright = 0 // index into right array
iresult = 0 // index into result array
while (ileft &lt; left.length &amp;&amp; iright &lt; right.length)
{
    if (left[ileft] &lt;= right[iright])
        result[iresult++] = left[ileft++]
    else
        result[iresult++] = right[iright++]
}

// now clean up the remaining list
while (ileft &lt; left.length)
    result[iresult++] = left[ileft++]

while (iright &lt; right.length)
    result[iresult++] = right[iright++]
</snippet></ROW><ROW><id>3753428</id><snippet>import Image
import numpy as np

im = Image.open('test.png')
im = im.convert('RGBA')

data = np.array(im)   # "data" is a height x width x 4 numpy array
red, green, blue, alpha = data.T # Temporarily unpack the bands for readability

# Replace white with red... (leaves alpha values alone...)
white_areas = (red == 255) &amp; (blue == 255) &amp; (green == 255)
data[..., :-1][white_areas] = (255, 0, 0)

im2 = Image.fromarray(data)
im2.show()
</snippet></ROW><ROW><id>3753685</id><snippet>struct</snippet></ROW><ROW><id>3753685</id><snippet>str</snippet></ROW><ROW><id>3753685</id><snippet>bytes</snippet></ROW><ROW><id>3753685</id><snippet>pack()</snippet></ROW><ROW><id>3753685</id><snippet>s = bytes(s, 'utf-8')    # Or other appropriate encoding
struct.pack("I%ds" % (len(s),), len(s), s)
</snippet></ROW><ROW><id>3753685</id><snippet>struct</snippet></ROW><ROW><id>3753685</id><snippet>pack()</snippet></ROW><ROW><id>3753685</id><snippet>struct.pack("I", len(s)) + s</snippet></ROW><ROW><id>3753685</id><snippet>(i,), data = struct.unpack("I", data[:4]), data[4:]
s, data = data[:i], data[i:]
</snippet></ROW><ROW><id>3753685</id><snippet>calcsize</snippet></ROW><ROW><id>3753685</id><snippet>def unpack_helper(fmt, data):
    size = struct.calcsize(fmt)
    return struct.unpack(fmt, data[:size]), data[size:]
</snippet></ROW><ROW><id>3753796</id><snippet>class Node(object):
    byname = {}

    def __init__(self, name, parent=None):
        self.name = name
        self.parent = parent
        self.children = []
        self.byname[name] = self
        if parent is None:  # root pseudo-node
            self.code = 0
        else:  # all normal nodes
            self.parent.children.append(self)
            self.code = len(self.parent.children)

    def get_codes(self, codelist):
        if self.code:
            codelist.append(str(self.code))
            self.parent.get_codes(codelist)

root = Node('')

def get_code(nodename):
    node = Node.byname.get(nodename)
    if node is None: return ''
    codes = []
    node.get_codes(codes)
    codes.reverse()
    return '.'.join(codes)
</snippet></ROW><ROW><id>3753796</id><snippet>['Africa', 'North Africa', 'Morocco']</snippet></ROW><ROW><id>3753796</id><snippet>re</snippet></ROW><ROW><id>3753796</id><snippet>csv</snippet></ROW><ROW><id>3753796</id><snippet>def addnodes(names):
    parent = root
    for name in names:
        newnode = Node.byname.get(name)
        if newnode is None:
            newnode = Node(name, parent)
        parent = newnode
</snippet></ROW><ROW><id>3753796</id><snippet>Node.byname</snippet></ROW><ROW><id>3753796</id><snippet>dict</snippet></ROW><ROW><id>3753796</id><snippet>get_code</snippet></ROW><ROW><id>3753796</id><snippet>America   United States    Georgia
Europe    Eastern Europe   Georgia
</snippet></ROW><ROW><id>3753796</id><snippet>'Georgia'</snippet></ROW><ROW><id>3753796</id><snippet>get_code</snippet></ROW><ROW><id>3753796</id><snippet>get_code</snippet></ROW><ROW><id>3753796</id><snippet>addnodes</snippet></ROW><ROW><id>3753929</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = """&lt;folder name="folder1"&gt;
     &lt;folder name="folder2"&gt;
          &lt;bookmark href="link.html"&gt;
     &lt;/folder&gt;
&lt;/folder&gt;
"""
&gt;&gt;&gt; bookmarks = soup.findAll('bookmark')
&gt;&gt;&gt; [p.get('name') for p in bookmarks[0].findAllPrevious(name = 'folder')]
[u'folder2', u'folder1']
</snippet></ROW><ROW><id>3753929</id><snippet>findAllPrevious</snippet></ROW><ROW><id>3753929</id><snippet>findParents</snippet></ROW><ROW><id>3753929</id><snippet>findParents</snippet></ROW><ROW><id>3753929</id><snippet>&gt;&gt;&gt; [p.get('name') for p in bookmarks[0].findParents('folder')]
[u'folder2']

&gt;&gt;&gt; [p.get('name') for p in bookmarks[0].findParents()]
[u'folder2', None]
</snippet></ROW><ROW><id>3753929</id><snippet>&gt;&gt;&gt; html = """&lt;folder name="folder1"&gt;
     &lt;folder_parent name="folder2"&gt;
          &lt;bookmark href="link.html"&gt;
     &lt;/folder_parent&gt;
&lt;/folder&gt;
"""
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; bookmarks = soup.findAll('bookmark')
&gt;&gt;&gt; [p.get('name') for p in bookmarks[0].findParents()]
[u'folder2', u'folder1', None]
</snippet></ROW><ROW><id>3753986</id><snippet>-s</snippet></ROW><ROW><id>3753986</id><snippet>use strict;
use warnings;
use File::Copy;

my $folderpath = 'the_path';
my $destination = 'path/to/destination/directory';
open my $IN, '&lt;', 'path/to/infile';
my $total;
while (&lt;$IN&gt;) {
    chomp;
    my $size = -s "$folderpath/$_";
    print "$_ =&gt; $size\n";
    $total += $size;
    move("$folderpath/$_", "$destination/$_") or die "Error when moving: $!";
}
print "Total =&gt; $total\n";
</snippet></ROW><ROW><id>3753986</id><snippet>-s</snippet></ROW><ROW><id>3753986</id><snippet>du</snippet></ROW><ROW><id>3753986</id><snippet>-s</snippet></ROW><ROW><id>3753986</id><snippet>du -b</snippet></ROW><ROW><id>3753986</id><snippet>du</snippet></ROW><ROW><id>3753986</id><snippet>du</snippet></ROW><ROW><id>3753986</id><snippet>$size</snippet></ROW><ROW><id>3753986</id><snippet>my ($size) = split(' ', `du "$folderpath/$_"`);
</snippet></ROW><ROW><id>3754275</id><snippet>Lib/</snippet></ROW><ROW><id>3754275</id><snippet>sqlite3</snippet></ROW><ROW><id>3754275</id><snippet>__init__.py</snippet></ROW><ROW><id>3754275</id><snippet>from dbapi2 import *
</snippet></ROW><ROW><id>3754275</id><snippet>import sqlite3</snippet></ROW><ROW><id>3754284</id><snippet>def main():
    print Kerma()

def Kerma():
    return "energy / mass"    

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3754284</id><snippet>main</snippet></ROW><ROW><id>3754334</id><snippet>prq = acos(dot(p,q,r) / (dot(p,p,r)*dot(q,q,r))**0.5)
</snippet></ROW><ROW><id>3754334</id><snippet>int r = pnt;
int ppr = Dot(p,p,r);
int qqr = Dot(q,q,r);
int pqr = Dot(p,q,r);

double u = Math.Acos(pqr / Math.Sqrt(ppr * qqr));
</snippet></ROW><ROW><id>3754501</id><snippet>struct.pack</snippet></ROW><ROW><id>3754501</id><snippet>myTable</snippet></ROW><ROW><id>3754501</id><snippet>Array#pack()</snippet></ROW><ROW><id>3754501</id><snippet>struct.pack</snippet></ROW><ROW><id>3754501</id><snippet>String#&lt;&lt;</snippet></ROW><ROW><id>3754501</id><snippet>[41310000].pack('V')</snippet></ROW><ROW><id>3754768</id><snippet>self.connector = sqlite3.connect(self.dbFile)
</snippet></ROW><ROW><id>3754768</id><snippet>self.con = sqlite3.connect(self.dbFile)
</snippet></ROW><ROW><id>3754898</id><snippet>shutil.copymode</snippet></ROW><ROW><id>3754898</id><snippet>shutil.copymode(src, dst)</snippet></ROW><ROW><id>3755109</id><snippet>time.time()</snippet></ROW><ROW><id>3755109</id><snippet>x.py</snippet></ROW><ROW><id>3755109</id><snippet>y.py</snippet></ROW><ROW><id>3755109</id><snippet>time.time()</snippet></ROW><ROW><id>3755109</id><snippet>random.getrandbits(50)</snippet></ROW><ROW><id>3755109</id><snippet>time.time()</snippet></ROW><ROW><id>3755251</id><snippet>all(l[i] &lt;= l[i+1] for i in xrange(len(l)-1))
</snippet></ROW><ROW><id>3755298</id><snippet>self.postorder(child)
</snippet></ROW><ROW><id>3755298</id><snippet>for n in self.postorder(child):
    yield n
</snippet></ROW><ROW><id>3755304</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>3755335</id><snippet>distinct</snippet></ROW><ROW><id>3755335</id><snippet>State</snippet></ROW><ROW><id>3755335</id><snippet>Market</snippet></ROW><ROW><id>3755335</id><snippet>State</snippet></ROW><ROW><id>3755335</id><snippet>Location</snippet></ROW><ROW><id>3755335</id><snippet>Market</snippet></ROW><ROW><id>3755335</id><snippet>class State(models.Model):
    name   = models.CharField('State name', max_length=150)

class Market(models.Model):
    name   = models.CharField('Market name', max_length=150)
    state  = models.ForeignKeyField(State)

class Location(models.Model):
    state  = models.ForeignKeyField(Market)
    ...
</snippet></ROW><ROW><id>3755335</id><snippet>def locations_landing(request):
    state_list = State.objects.all()
    return render_to_response('locations.html', {'state_list':state_list}) 
</snippet></ROW><ROW><id>3755335</id><snippet>{% for state in state_list %}
    &lt;h4&gt;{{ state }}&lt;/h4&gt;
    {% for market in state.market_set.all %}
        &lt;p&gt;* &lt;a href="#"&gt;{{ market }}&lt;/a&gt;&lt;/p&gt;
        {% for location in market.location_set.all %}
           &lt;p&gt; {{ location }} &lt;/p&gt;
        {% endfor %}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>3755391</id><snippet>[DEFAULT]
my_log_dir = '/var/pylons/myapp/logs'
...
[handler_debugging-logger-file]
args = (%(my_log_dir)s + '/myapp-debugging-errors.log', 'a')
</snippet></ROW><ROW><id>3755391</id><snippet>args = (os.getcwd() + '/myapp-debugging-errors.log', 'a')
</snippet></ROW><ROW><id>3755391</id><snippet>args = (os.environ['MY_LOG_DIR'] + '/myapp-debugging-errors.log', 'a')
</snippet></ROW><ROW><id>3755778</id><snippet>from .. import myFile2
</snippet></ROW><ROW><id>3755880</id><snippet>from reportlab.pdfbase.pdfmetrics import stringWidth
from reportlab.rl_config import defaultPageSize

PAGE_WIDTH  = defaultPageSize[0]
PAGE_HEIGHT = defaultPageSize[1]

text = "foobar foobar foobar"
text_width = stringWidth(text)
y = 1050 # wherever you want your text to appear
pdf_text_object = canvas.beginText((PAGE_WIDTH - text_width) / 2.0, y)
pdf_text_object.textOut(text) # or: pdf_text_object.textLine(text) etc.
</snippet></ROW><ROW><id>3756113</id><snippet>"%10d%15d%9d%14d"%values</snippet></ROW><ROW><id>3756113</id><snippet>"%&lt;15d%&lt;9d%&lt;14d%d"%values</snippet></ROW><ROW><id>3756113</id><snippet>" "*9 + "{:&lt;14}{:&lt;9}{:&lt;14}{}".format(*values)</snippet></ROW><ROW><id>3756113</id><snippet>values=[20,30,403,50]</snippet></ROW><ROW><id>3756113</id><snippet>.........                                        &lt;-- from " "*9
         20............                          &lt;-- {:&lt;14}
                       30.......                 &lt;-- {:&lt;9}
                                403...........   &lt;-- {:&lt;14}
                                              50 &lt;-- {}
----=----1----=----2----=----3----=----4----=----5    &lt;-- guide
         20            30       403           50 &lt;-- Actual output, all together
</snippet></ROW><ROW><id>3756172</id><snippet>save()</snippet></ROW><ROW><id>3756172</id><snippet>def clean_ssn(self):
    data = re.sub(r'[^0-9]','',self.cleaned_data['ssn'])
    #validation code here
    return data
</snippet></ROW><ROW><id>3756212</id><snippet>extend</snippet></ROW><ROW><id>3756212</id><snippet>addAtoms = SummaryFormula( b)
</snippet></ROW><ROW><id>3756212</id><snippet>__init__</snippet></ROW><ROW><id>3756212</id><snippet>re.finditer</snippet></ROW><ROW><id>3756212</id><snippet>for atom in re.finditer( "([A-Z][a-z]{0,2})(\d*)", summaryFormula)
</snippet></ROW><ROW><id>3756212</id><snippet>re.finditer</snippet></ROW><ROW><id>3756212</id><snippet>SummaryFormula</snippet></ROW><ROW><id>3756212</id><snippet>if isinstance(b, SummaryFormula):
    addAtoms = b
else if isinstance(b, str):
    addAtoms = SummaryFormula(b)
else:
    raise TypeError("Expected a SummaryFormula or equivalent string.")
</snippet></ROW><ROW><id>3756445</id><snippet>'&lt;a href=".*"&gt;(.*)&lt;/a&gt;'
</snippet></ROW><ROW><id>3756445</id><snippet>'&lt;a href=".*?"&gt;(.*?)&lt;/a&gt;'
</snippet></ROW><ROW><id>3756445</id><snippet>['2', 'nissan', 'all']
</snippet></ROW><ROW><id>3756486</id><snippet>AUTH_PROFILE_MODULE = "userprofile.userprofile"
</snippet></ROW><ROW><id>3756486</id><snippet>settings.py</snippet></ROW><ROW><id>3756486</id><snippet>userprofile</snippet></ROW><ROW><id>3756522</id><snippet>input</snippet></ROW><ROW><id>3756522</id><snippet>import time

def timed_input(prompt):
    start = time.time()
    s = input(prompt)
    return s, time.time() - start
</snippet></ROW><ROW><id>3756522</id><snippet>s, thetime = timed_input('Type now: ')
</snippet></ROW><ROW><id>3756522</id><snippet>s</snippet></ROW><ROW><id>3756522</id><snippet>thetime</snippet></ROW><ROW><id>3756735</id><snippet>datetime.utcfromtimestamp</snippet></ROW><ROW><id>3756735</id><snippet>import time
import datetime

def to_utc(dateTime)
    timeStamp = time.mktime(dateTime.timetuple()) + dateTime.microsecond
    return datetime.datetime.utcfromtimestamp(timeStamp)
</snippet></ROW><ROW><id>3757351</id><snippet>rollback</snippet></ROW><ROW><id>3757351</id><snippet>commit</snippet></ROW><ROW><id>3757351</id><snippet>rollback</snippet></ROW><ROW><id>3757390</id><snippet>while start + 1&lt; len(search):
    start = search.find(needle, start +1)

    if start == -1:
        break

    results.append(start )

return results
</snippet></ROW><ROW><id>3757526</id><snippet>def maybe_skip_member(app, what, name, obj, skip, options):
    print app, what, name, obj, skip, options
    return True

def setup(app):
    app.connect('autodoc-skip-member', maybe_skip_member)
</snippet></ROW><ROW><id>3757600</id><snippet>{'one': 'actg', 'two': 'aaccttgg' }</snippet></ROW><ROW><id>3757600</id><snippet>import gzip

def read_fasta(filename):
    with gzip.open(filename) as f:
        return dict(line.split() for line in f)
</snippet></ROW><ROW><id>3757937</id><snippet>import re

def add_photos(s,n):
    def helper(m):
        num = int(m.group(1)) + n
        plural = '' if num == 1 else 's'
        return 'added %d new photo%s' % (num,plural)
    return re.sub(r'added (\d+) new photo(s?)',helper,s)

s = "martin added 0 new photos to the &lt;a href=''&gt;martins photos&lt;/a&gt; album."
s = add_photos(s,1)
print s
s = add_photos(s,5)
print s
s = add_photos(s,7)
print s
</snippet></ROW><ROW><id>3757937</id><snippet>martin added 1 new photo to the &lt;a href=''&gt;martins photos&lt;/a&gt; album.
martin added 6 new photos to the &lt;a href=''&gt;martins photos&lt;/a&gt; album.
martin added 13 new photos to the &lt;a href=''&gt;martins photos&lt;/a&gt; album.
</snippet></ROW><ROW><id>3758497</id><snippet>TotalCommander</snippet></ROW><ROW><id>3758497</id><snippet>os.path.getsize(path)</snippet></ROW><ROW><id>3758696</id><snippet>QLabel</snippet></ROW><ROW><id>3758696</id><snippet>class MyLabel(QtGui.QWidget):
    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.setPen(QtCore.Qt.black)
        painter.translate(20, 100)
        painter.rotate(-90)
        painter.drawText(0, 0, "hellos")
        painter.end()
</snippet></ROW><ROW><id>3758696</id><snippet>QGraphicsView</snippet></ROW><ROW><id>3758696</id><snippet>QLabel</snippet></ROW><ROW><id>3758907</id><snippet>os.path.abspath(&lt;relpath&gt;)</snippet></ROW><ROW><id>3758907</id><snippet>vinko@parrot:~/p/f$ more a.py
import os
print os.path.abspath('../g/a')

vinko@parrot:~/p/f$ python a.py
/home/vinko/p/g/a
</snippet></ROW><ROW><id>3758907</id><snippet>vinko@parrot:~/p$ tree
.
|-- f
|   `-- a.py
`-- g
    `-- a

2 directories, 2 files
</snippet></ROW><ROW><id>3759413</id><snippet>with open("xmlbasic.txt") as lines_file:
    lines = lines_file.read()

import xml.etree.ElementTree as ET

root = ET.Element('root')

for line in lines:
    head, subhead, tail = line.split(":")

    head_branch = root.find(head)
    if not head_branch:
        head_branch = ET.SubElement(root, head)

    subhead_branch = head_branch.find(subhead)
    if not subhead_branch:
        subhead_branch = ET.SubElement(branch1, subhead)

    subhead_branch.text = tail

tree = ET.ElementTree(root)
ET.dump(tree)
</snippet></ROW><ROW><id>3759413</id><snippet>ElementTree</snippet></ROW><ROW><id>3759413</id><snippet>defaultdict</snippet></ROW><ROW><id>3759413</id><snippet>ElementTree</snippet></ROW><ROW><id>3759413</id><snippet>import collections
import xml.etree.ElementTree as ET

with open("xmlbasic.txt") as lines_file:
    lines = lines_file.read()

root_dict = collections.defaultdict( dict )
for line in lines:
    head, subhead, tail = line.split(":")
    root_dict[head][subhead] = tail

root = ET.Element('root')
for head, branch in root_dict.items():
    head_element = ET.SubElement(root, head)
    for subhead, tail in branch.items():
        ET.SubElement(head_element,subhead).text = tail

tree = ET.ElementTree(root)
ET.dump(tree)
</snippet></ROW><ROW><id>3759760</id><snippet>getlist</snippet></ROW><ROW><id>3759760</id><snippet>map_str[0]</snippet></ROW><ROW><id>3759760</id><snippet>getlist</snippet></ROW><ROW><id>3759760</id><snippet>get</snippet></ROW><ROW><id>3760097</id><snippet>split</snippet></ROW><ROW><id>3760097</id><snippet>&gt;&gt;&gt; a = "@@2@@*##1"
&gt;&gt;&gt; b = "@@3@@*##5##7"
&gt;&gt;&gt;
&gt;&gt;&gt; a.split("@@*")
['@@2', '##1']
&gt;&gt;&gt; b.split("@@*")
['@@3', '##5##7']
</snippet></ROW><ROW><id>3760097</id><snippet>strip</snippet></ROW><ROW><id>3760097</id><snippet>&gt;&gt;&gt; c = b.split("@@*")[1]
&gt;&gt;&gt; c
'##5##7'
&gt;&gt;&gt; c.strip("#")
'5##7'
</snippet></ROW><ROW><id>3760097</id><snippet>#</snippet></ROW><ROW><id>3760097</id><snippet>replace</snippet></ROW><ROW><id>3760097</id><snippet>&gt;&gt;&gt; c.replace("#","")
'57'
</snippet></ROW><ROW><id>3760097</id><snippet>"##"</snippet></ROW><ROW><id>3760097</id><snippet>rsplit</snippet></ROW><ROW><id>3760097</id><snippet>&gt;&gt;&gt; a.rsplit("##",1)
['@@2@@*', '1']
</snippet></ROW><ROW><id>3760163</id><snippet>findItemsLargerThan(List&lt;Integer&gt; l, int what){
   return filter(boolean(Integer x) { x &gt; what }, l);
}  
findItemsLargerThan(Arrays.asList(1,2,5,6,9), 5)
</snippet></ROW><ROW><id>3760163</id><snippet>Arrays.asList(1,2,5,6,9).findAll{ it &gt; 5}
</snippet></ROW><ROW><id>3760163</id><snippet>Collections2.filter(Arrays.asList(1, 2, 5, 6, 9),
    new Predicate&lt;Integer&gt;(){
        @Override
        public boolean apply(final Integer input){
            return input.intValue() &gt; 5;
        }
    }
);
</snippet></ROW><ROW><id>3760163</id><snippet>Array(1, 2, 5, 6, 9) filter (x =&gt; x &gt; 5)
</snippet></ROW><ROW><id>3760309</id><snippet>remote_addr</snippet></ROW><ROW><id>3760309</id><snippet>from flask import request
from flask import jsonify

@app.route("/get_my_ip", methods=["GET"])
def get_my_ip():
    return jsonify({'ip': request.remote_addr}), 200
</snippet></ROW><ROW><id>3760386</id><snippet>
infile = open(sys.argv[1])

for line in infile:
    print line,
    domain = line.strip().decode('utf-8')
    print type(domain)
    print "IDN:", domain.encode("idna")
    print
</snippet></ROW><ROW><id>3760386</id><snippet>decode</snippet></ROW><ROW><id>3760386</id><snippet>encode</snippet></ROW><ROW><id>3760388</id><snippet>allowNone</snippet></ROW><ROW><id>3760388</id><snippet>True</snippet></ROW><ROW><id>3760388</id><snippet>None</snippet></ROW><ROW><id>3760388</id><snippet>from twisted.web.xmlrpc import XMLRPC
resource = XMLRPC(allowNone=True)
</snippet></ROW><ROW><id>3760957</id><snippet>def random_partition(k, iterable):
  results = [[] for i in range(k)]
  for value in iterable:
    x = random.randrange(k)
    results[x].append(value)
  return results
</snippet></ROW><ROW><id>3761041</id><snippet>print en.verb.present("gave")
&gt;&gt;&gt; give
</snippet></ROW><ROW><id>3761216</id><snippet> QtCore</snippet></ROW><ROW><id>3761216</id><snippet> self.setWindowFlags(QtCore.Qt.FramelessWindowHint) </snippet></ROW><ROW><id>3761216</id><snippet>Qt.</snippet></ROW><ROW><id>3761256</id><snippet>invalid_raise</snippet></ROW><ROW><id>3761316</id><snippet>max(max(v) if isinstance(v, collections.Iterable) else v for v in d.itervalues())
</snippet></ROW><ROW><id>3761316</id><snippet>collections.Iterable</snippet></ROW><ROW><id>3761494</id><snippet>if not os.path.isdir(os.path.join(path, each)):
  ...
</snippet></ROW><ROW><id>3761526</id><snippet>boost::python::list</snippet></ROW><ROW><id>3761526</id><snippet>void massadd(boost::python::list&amp; ns)
{
    for (int i = 0; i &lt; len(ns); ++i)
    {
        add(boost::python::extract&lt;double&gt;(ns[i]));
    }
}
</snippet></ROW><ROW><id>3762020</id><snippet> std::vector&lt;std::vector&lt;MyClass*&gt; &gt;;
 ---Important space---------------^
</snippet></ROW><ROW><id>3762129</id><snippet>pgrep</snippet></ROW><ROW><id>3762230</id><snippet>f.addToList</snippet></ROW><ROW><id>3762230</id><snippet>f.displayList</snippet></ROW><ROW><id>3762230</id><snippet>addToList</snippet></ROW><ROW><id>3762230</id><snippet>displayList</snippet></ROW><ROW><id>3762230</id><snippet>f</snippet></ROW><ROW><id>3762230</id><snippet>class MyFunctions():
    def __init__( self):
        self.listOfItems = []

    def displayList( self):
        """Prints all items in listOfItems)"""
        for item in self.listOfItems:
            print item

    def addToList(self):
        """Updates all mlb scores, and places results in a variable."""
        self.listOfItems.append("test")

f = MyFunctions()
f.addToList()
f.displayList()
</snippet></ROW><ROW><id>3762230</id><snippet>print type(f.addToList)
</snippet></ROW><ROW><id>3762230</id><snippet>&lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>3762461</id><snippet>re.sub("[^A-Z\d]", "", re.search("^[^_]*", str).group(0).upper())
</snippet></ROW><ROW><id>3762683</id><snippet>sys.executable</snippet></ROW><ROW><id>3763257</id><snippet>import sys
import select

if select.select([sys.stdin,],[],[],0.0)[0]:
    print "Have data!"
else:
    print "No data"
</snippet></ROW><ROW><id>3763360</id><snippet>__main__.py</snippet></ROW><ROW><id>3763360</id><snippet>python myArchive.zip</snippet></ROW><ROW><id>3763360</id><snippet>__main__.py</snippet></ROW><ROW><id>3763360</id><snippet>.command</snippet></ROW><ROW><id>3763360</id><snippet>__main__.py</snippet></ROW><ROW><id>3763360</id><snippet>python __main__.py buildProject</snippet></ROW><ROW><id>3763539</id><snippet>.hushlogin</snippet></ROW><ROW><id>3763539</id><snippet>ssh -T</snippet></ROW><ROW><id>3764365</id><snippet>repr(obj)
</snippet></ROW><ROW><id>3764365</id><snippet>obj.__repr__
</snippet></ROW><ROW><id>3764365</id><snippet>__repr__</snippet></ROW><ROW><id>3764365</id><snippet>eval</snippet></ROW><ROW><id>3764365</id><snippet>obj == eval(repr(obj))
</snippet></ROW><ROW><id>3764365</id><snippet>True</snippet></ROW><ROW><id>3764365</id><snippet>obj != eval(repr(obj))</snippet></ROW><ROW><id>3764365</id><snippet>class BrokenRepr(object):
    def __repr__(self):
        return "not likely"
</snippet></ROW><ROW><id>3764365</id><snippet>&gt;&gt;&gt; con = sqlite3.connect(':memory:')
&gt;&gt;&gt; repr(con)
'&lt;sqlite3.Connection object at 0xb773b520&gt;'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3764495</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; def processKey(data):
...     num = int("".join([x for x in data if x.isdigit()]))
...     spaces = data.count(' ')
...     return num / spaces
...
&gt;&gt;&gt; key1 = '4 @1 46546xW%0l 1 5'
&gt;&gt;&gt; key2 = '12998 5 Y3 1 .P00 '
&gt;&gt;&gt; sk1 = processKey(key1)
&gt;&gt;&gt; sk2 = processKey(key2)
&gt;&gt;&gt; sk1
1036636503L
&gt;&gt;&gt; sk2
259970620
&gt;&gt;&gt; sk3 = "^n:ds[4U"
&gt;&gt;&gt; fullappend = struct.pack('&gt;ii%ds' % len(sk3),sk1,sk2,sk3)
&gt;&gt;&gt; fullappend
'=\xc9\xd1W\x0f~\xd6&lt;^n:ds[4U'
&gt;&gt;&gt; len(fullappend)
16
&gt;&gt;&gt; from hashlib import md5
&gt;&gt;&gt; md5(fullappend).hexdigest()
'fd028b6b39ceb8e37f09b8e45556bbc4'
&gt;&gt;&gt; md5(fullappend).digest()
'\xfd\x02\x8bk9\xce\xb8\xe3\x7f\t\xb8\xe4UV\xbb\xc4'
</snippet></ROW><ROW><id>3764521</id><snippet>import Tkinter
root=Tkinter.Tk()

# create a python callback function
def callbackFunc():
    print "I am in callbackFunc"

# register the callback as a Tcl command. What gets returned
# must be used when calling the function from Tcl
cb = root.register(callbackFunc)

# call a tcl command ('eval', for demonstration purposes)
# that calls our python callback:
root.call('eval',cb)
</snippet></ROW><ROW><id>3764660</id><snippet>import urllib2

def internet_on():
    try:
        response=urllib2.urlopen('http://74.125.228.100',timeout=1)
        return True
    except urllib2.URLError as err: pass
    return False
</snippet></ROW><ROW><id>3764660</id><snippet>http://74.125.228.100</snippet></ROW><ROW><id>3764660</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>3764660</id><snippet>timeout=1</snippet></ROW><ROW><id>3764660</id><snippet>urlopen</snippet></ROW><ROW><id>3764711</id><snippet>names.txt</snippet></ROW><ROW><id>3764711</id><snippet>_names.txt</snippet></ROW><ROW><id>3764744</id><snippet>$ easy_install readline
</snippet></ROW><ROW><id>3764830</id><snippet>time</snippet></ROW><ROW><id>3764830</id><snippet>asctime</snippet></ROW><ROW><id>3764830</id><snippet>&gt;&gt;&gt; from time import asctime
&gt;&gt;&gt; asctime()
'Tue Sep 21 17:49:42 2010'
</snippet></ROW><ROW><id>3764830</id><snippet>sysTime = asctime()
timestamp = systime.split()[3]
separator = timestamp[2]
hour = timestamp.split(separator)[0]
while hour &lt; 8:
    # just wait
    sysTime = asctime()
    timestamp = systime.split()[3]
    separator = timestamp[2]
    hour = timestamp.split(separator)[0]

# now, it's just become 8:00 AM
while hour &lt; 17: # until 5:00 PM
    sysTime = asctime()
    timestamp = systime.split()[3]
    separator = timestamp[2]
    hour = timestamp.split(separator)[0]

    # start your thread to do whatever needs to be done
</snippet></ROW><ROW><id>3764830</id><snippet>while 1:
    sysTime = asctime()
    timestamp = systime.split()[3]
    separator = timestamp[2]
    hour = timestamp.split(separator)[0]
    minute = timestamp.split(separator)[1]

    if (hour &gt; 8) and (hour&lt;17 and minute&lt;1):
        # start your thread to do whatever needs to be done
</snippet></ROW><ROW><id>3764830</id><snippet>hour</snippet></ROW><ROW><id>3764830</id><snippet>int(timestamp.split(separator)[0])</snippet></ROW><ROW><id>3764863</id><snippet>[]</snippet></ROW><ROW><id>3764863</id><snippet>[foo.bar]</snippet></ROW><ROW><id>3764863</id><snippet>[]</snippet></ROW><ROW><id>3764863</id><snippet>foo.bar</snippet></ROW><ROW><id>3764863</id><snippet>var = [foo.bar]
var[0] == foo.bar # returns True 
</snippet></ROW><ROW><id>3764863</id><snippet>foo.bar = [1,2]</snippet></ROW><ROW><id>3764863</id><snippet>&gt;&gt;&gt; []
[]
&gt;&gt;&gt; foobar = [1,2]
&gt;&gt;&gt; foobar
[1, 2]
&gt;&gt;&gt; [foobar]
[[1, 2]]
</snippet></ROW><ROW><id>3764949</id><snippet>def make_tree(path):
    return [
        make_tree(os.path.join(path, element))
        for element in get_elements(path)]
</snippet></ROW><ROW><id>3764949</id><snippet>def make_tree(path, parent_node = None):
    new_node = Node(...)
    for ....:
        make_tree(path+..., new_node)

    if parent_node is not None:
        parent_node.add(new_node)
    else:
        .....
</snippet></ROW><ROW><id>3765065</id><snippet>
class PopenThread(threading.Thread):

    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port=port

    def run(self):
        Popen('ant -Dport='+str(self.port)+ ' -Dhost='+GetIP()+ 
                ' -DhubURL=http://192.168.1.113:4444' 
                ' -Denvironment=*firefox launch-remote-control'
                ' $HOME/selenium-grid-1.0.8', shell=True)

if '__main__'==__name__:
    PopenThread(5555).start()
    PopenThread(5556).start()
    PopenThread(5557).start()

</snippet></ROW><ROW><id>3765160</id><snippet>sys.exit</snippet></ROW><ROW><id>3765160</id><snippet>sys.exit</snippet></ROW><ROW><id>3765160</id><snippet>sys.exit</snippet></ROW><ROW><id>3765160</id><snippet>Py_Finalize</snippet></ROW><ROW><id>3765160</id><snippet>wait_for_thread_shutdown()</snippet></ROW><ROW><id>3765160</id><snippet>sys.exit</snippet></ROW><ROW><id>3765160</id><snippet>sys.exit</snippet></ROW><ROW><id>3765160</id><snippet>atexit</snippet></ROW><ROW><id>3765219</id><snippet>sudo /etc/init.d/mysql restart</snippet></ROW><ROW><id>3765237</id><snippet>import module
class ReplaceClass(object):
    ....
module.MyClass = ReplaceClass
</snippet></ROW><ROW><id>3765348</id><snippet>sqlite3</snippet></ROW><ROW><id>3765348</id><snippet>strcmp</snippet></ROW><ROW><id>3765348</id><snippet>def stricmp(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    if str1 == str2:
        return 0
    elif str1 &lt; str2:
        return -1
    else:
        return 1

db = sqlite3.connect(':memory:')
# SQLite's default NOCASE collation is ASCII-only
# Override it with a (mostly) Unicode-aware version
db.create_collation('NOCASE', stricmp)
</snippet></ROW><ROW><id>3765348</id><snippet>'ü' == 'Ü'</snippet></ROW><ROW><id>3765348</id><snippet>'ü' &gt; 'v'</snippet></ROW><ROW><id>3765348</id><snippet>Drop</snippet></ROW><ROW><id>3765348</id><snippet>create</snippet></ROW><ROW><id>3765348</id><snippet>UNIQUE</snippet></ROW><ROW><id>3765348</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>3765468</id><snippet>import sys
sys.stdout.write("Content-type: text/html\r\n\r\n&lt;p&gt;Body&lt;/p&gt;")
</snippet></ROW><ROW><id>3765543</id><snippet>myDict = {}
myDict["john"] = "johns value"
myDict["jeff"] = "jeffs value"
</snippet></ROW><ROW><id>3765543</id><snippet>myDict = {"john": "johns value", "jeff": "jeffs value"}
</snippet></ROW><ROW><id>3765543</id><snippet>print myDict["jeff"] # =&gt; "jeffs value"
</snippet></ROW><ROW><id>3765543</id><snippet>print myDict.keys() # =&gt; ["john", "jeff"]
</snippet></ROW><ROW><id>3765581</id><snippet>moving_average_days = # configurable value, defaulting to 5
ndays = # configurable value, defaulting to 90
t1 = Measurements.alias('t1') ######
t2 = Measurements.alias('t2')
query = select([t1.c.time, t1.c.value,
                    select([func.avg(t2.c.value)],
                        t2.c.time.between(t1.c.time - datetime.timedelta(moving_average_days), t1.c.time)).label('moving_average')],
            t1.c.time &gt; (datetime.datetime.utcnow() - datetime.timedelta(ndays))). \
        order_by(t1.c.time)
</snippet></ROW><ROW><id>3765581</id><snippet>SELECT t1.time, t1.value,
    (
        SELECT avg(t2.value) AS avg_1
        FROM measurements AS t2 
        WHERE t2.time BETWEEN t1.time - :time_1 AND t1.time
    ) AS moving_average 
FROM measurements AS t1
WHERE t1.time &gt; :time_2 ORDER BY t1.time;
</snippet></ROW><ROW><id>3765652</id><snippet>import csv
import sqlite3

conn = sqlite3.connect("Firefox/.../permissions.sqlite")
cursor = conn.cursor()
cursor.execute("select * from moz_hosts;")

csv_writer = csv.writer(open("out.csv", "wt"))
csv_writer.writerow([i[0] for i in cursor.description]) # write headers
csv_writer.writerows(cursor)
del csv_writer # this will close the CSV file
</snippet></ROW><ROW><id>3765652</id><snippet>.description</snippet></ROW><ROW><id>3765854</id><snippet>class</snippet></ROW><ROW><id>3765854</id><snippet>clqss</snippet></ROW><ROW><id>3765854</id><snippet>def</snippet></ROW><ROW><id>3765886</id><snippet>from path import path
s = path(filename).bytes()
</snippet></ROW><ROW><id>3765886</id><snippet>os.path</snippet></ROW><ROW><id>3765886</id><snippet>open()</snippet></ROW><ROW><id>3765904</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>3765904</id><snippet>urllib</snippet></ROW><ROW><id>3765904</id><snippet>.encode('utf8')</snippet></ROW><ROW><id>3765904</id><snippet>.decode('latin-1')</snippet></ROW><ROW><id>3766636</id><snippet>a = sorted(a, key=lambda x: x.modified, reverse=True)
#             ^^^^
</snippet></ROW><ROW><id>3766636</id><snippet>sorted</snippet></ROW><ROW><id>3766636</id><snippet>sorted(iterable, cmp=None, key=None, reverse=False)
</snippet></ROW><ROW><id>3766636</id><snippet>key=</snippet></ROW><ROW><id>3766636</id><snippet>cmp</snippet></ROW><ROW><id>3766701</id><snippet>for x in xrange(max_combo_len, 0, -1):
    possible_combos = (" ".join(item) for item in itertools.permutations(bag,x))
    #then check to see if each possible combo is in a specific Dict
    combos =  (c for c in possible_combos if c in specific_dict)
</snippet></ROW><ROW><id>3766701</id><snippet>xrange</snippet></ROW><ROW><id>3766701</id><snippet>x</snippet></ROW><ROW><id>3766765</id><snippet>((x for x in range(10) if x%2==i) for i in range(2))
</snippet></ROW><ROW><id>3766765</id><snippet>(x for x in range(10) if x%2==i for i in range(2))
</snippet></ROW><ROW><id>3766765</id><snippet>l = []
for x in range(10):
    if x%2 == i:
        for i in range(2):
            l.append(x)
</snippet></ROW><ROW><id>3766765</id><snippet>((x for x in range(10) if x%2==i) for i in range(2))
</snippet></ROW><ROW><id>3766765</id><snippet>li = []
for i in range(2):
    lx = []
    for x in range(10):
        if x%2==i:
            lx.append(x)
    li.append(lx)
</snippet></ROW><ROW><id>3766824</id><snippet>finditer</snippet></ROW><ROW><id>3766824</id><snippet>findall</snippet></ROW><ROW><id>3766824</id><snippet>import re
CARRIS_REGEX=r'&lt;th&gt;(\d+)&lt;/th&gt;&lt;th&gt;([\s\w\.\-]+)&lt;/th&gt;&lt;th&gt;(\d+:\d+)&lt;/th&gt;&lt;th&gt;(\d+m)&lt;/th&gt;'
pattern = re.compile(CARRIS_REGEX, re.UNICODE)
mailbody = open("test.txt").read()
for match in pattern.finditer(mailbody):
    print(match)
print()
for match in pattern.findall(mailbody):
    print(match)
</snippet></ROW><ROW><id>3766824</id><snippet>&lt;_sre.SRE_Match object at 0x00A63758&gt;
&lt;_sre.SRE_Match object at 0x00A63F98&gt;
&lt;_sre.SRE_Match object at 0x00A63758&gt;
&lt;_sre.SRE_Match object at 0x00A63F98&gt;
&lt;_sre.SRE_Match object at 0x00A63758&gt;
&lt;_sre.SRE_Match object at 0x00A63F98&gt;
&lt;_sre.SRE_Match object at 0x00A63758&gt;
&lt;_sre.SRE_Match object at 0x00A63F98&gt;

('790', 'PR. REAL', '21:06', '04m')
('758', 'PORTAS BENFICA', '21:10', '09m')
('790', 'PR. REAL', '21:14', '13m')
('758', 'PORTAS BENFICA', '21:21', '19m')
('790', 'PR. REAL', '21:29', '28m')
('758', 'PORTAS BENFICA', '21:38', '36m')
('758', 'SETE RIOS', '21:49', '47m')
('758', 'SETE RIOS', '22:09', '68m')
</snippet></ROW><ROW><id>3766824</id><snippet>finditer</snippet></ROW><ROW><id>3766824</id><snippet>findall</snippet></ROW><ROW><id>3766824</id><snippet>for match in pattern.finditer(mailbody):
    print(tuple(group for group in match.groups()))
</snippet></ROW><ROW><id>3766981</id><snippet>fetch</snippet></ROW><ROW><id>3766981</id><snippet>results</snippet></ROW><ROW><id>3766981</id><snippet>locations</snippet></ROW><ROW><id>3766981</id><snippet>bool</snippet></ROW><ROW><id>3766981</id><snippet>InterruptableThread</snippet></ROW><ROW><id>3766981</id><snippet>terminable_thread</snippet></ROW><ROW><id>3766981</id><snippet>pqueue_fetcher</snippet></ROW><ROW><id>3766981</id><snippet>terminable_thread</snippet></ROW><ROW><id>3766981</id><snippet>InterruptableThread</snippet></ROW><ROW><id>3766981</id><snippet>pqueue_fetcher</snippet></ROW><ROW><id>3766981</id><snippet>fetch</snippet></ROW><ROW><id>3766981</id><snippet>time.sleep</snippet></ROW><ROW><id>3766981</id><snippet>terminate()</snippet></ROW><ROW><id>3766981</id><snippet>sleep</snippet></ROW><ROW><id>3766981</id><snippet>except</snippet></ROW><ROW><id>3766981</id><snippet>except</snippet></ROW><ROW><id>3766981</id><snippet>pqueue_fetcher</snippet></ROW><ROW><id>3766981</id><snippet>fission</snippet></ROW><ROW><id>3766981</id><snippet>pqueue_fetcher.Fetcher</snippet></ROW><ROW><id>3766981</id><snippet>ctypes.pythonapi.PyThreadState_SetAsyncExc</snippet></ROW><ROW><id>3766981</id><snippet>results</snippet></ROW><ROW><id>3766981</id><snippet>terminable_thread.Thread.raise_exc</snippet></ROW><ROW><id>3766981</id><snippet>fission</snippet></ROW><ROW><id>3767239</id><snippet>import string

allowed = set(string.lowercase + ',')
if set(text) - allowed:
   # you know it has forbidden characters
else:
   # it doesn't have forbidden characters 
</snippet></ROW><ROW><id>3767239</id><snippet>allowed = string.lowercase + ','
if not all(letter in allowed for letter in text):
    # you know it has forbidden characthers
</snippet></ROW><ROW><id>3767239</id><snippet>mtimeit</snippet></ROW><ROW><id>3767239</id><snippet>one</snippet></ROW><ROW><id>3767239</id><snippet>two</snippet></ROW><ROW><id>3767239</id><snippet>$ python -mtimeit -s'import scratch3' 'scratch3.one("asdfas2423452345sdfadf34")'
100000 loops, best of 3: 3.98 usec per loop
$ python -mtimeit -s'import scratch3' 'scratch3.two("asdfas2423452345sdfadf34")'
100000 loops, best of 3: 4.39 usec per loop
$ python -mtimeit -s'import scratch3' 'scratch3.two("asdfasasdfadsfasdfasdfdaf")'
100000 loops, best of 3: 3.51 usec per loop
$ python -mtimeit -s'import scratch3' 'scratch3.one("asdfasasdfadsfasdfasdfdaf")'
100000 loops, best of 3: 7.7 usec per loop
</snippet></ROW><ROW><id>3767239</id><snippet>not all(letter in allowed for letter in set(text))

$ python -mtimeit -s'import scratch3' 'scratch3.three("asdfasasdfadsfasdfasdfdaf")'
100000 loops, best of 3: 5.06 usec per loop
$ python -mtimeit -s'import scratch3' 'scratch3.three("asdfas2423452345sdfadf34")'
100000 loops, best of 3: 6.71 usec per loop
</snippet></ROW><ROW><id>3767240</id><snippet>def build_tree(preord, inord):
    tree = BinaryTree()
    tree.root = buildTreeHelper(preord, inord)
    return tree

def buildTreeHelper(preorder, inorder):
    if len(inorder) == 0:
        return empty

    elem = preorder[0]
    elemInorderIndex = inorder.find(elem)

    if elemInorderIndex &gt; -1:
        leftPreorder = preorder[1:elemInorderIndex + 1]
        rightPreorder = preorder[elemInorderIndex + 1:]
        leftInorder = inorder[0:elemInorderIndex]
        rightInorder = inorder[elemInorderIndex + 1:]
        left = buildTreeHelper(leftPreorder, leftInorder)
        right = buildTreeHelper(rightPreorder, rightInorder)
        return BinaryTreeNode(elem, left, right)
    else:
        return "No valid tree for the given args"

class BinaryTree:
    def __init__(self):
        self.root = empty
    def preorder(self):
        return self.root.preorder()
    def inorder(self):
        return self.root.inorder()
    def postorder(self):
        return self.root.postorder()

class EmptyNode:
    def preorder(self):
        return ()
    inorder = postorder = preorder
empty = EmptyNode()

class BinaryTreeNode:
    def __init__(self, element, left=empty, right=empty):
        self.element = element
        self.left = left
        self.right = right
    def preorder(self):
        yield self.element
        for e in self.left.preorder():
            yield e
        for e in self.right.preorder():
            yield e
    def inorder(self):
        for e in self.left.inorder():
            yield e
        yield self.element
        for e in self.right.inorder():
            yield e
    def postorder(self):
        for e in self.left.postorder():
            yield e
        for e in self.right.postorder():
            yield e
        yield self.element

if __name__ == "__main__":
    t = build_tree("BAC", "ABC")
    for e in t.inorder():
        print(e)
</snippet></ROW><ROW><id>3767961</id><snippet>import java.util.*;
import java.io.*;

...

InputStream x = ...;
</snippet></ROW><ROW><id>3767961</id><snippet>InputStream</snippet></ROW><ROW><id>3767961</id><snippet>java.util</snippet></ROW><ROW><id>3767961</id><snippet>java.io</snippet></ROW><ROW><id>3767961</id><snippet>X.Y.Foo</snippet></ROW><ROW><id>3767961</id><snippet>Foo.cs</snippet></ROW><ROW><id>3767961</id><snippet>Z\Bar.cs</snippet></ROW><ROW><id>3767961</id><snippet>Delegates.cs</snippet></ROW><ROW><id>3768461</id><snippet>rawness.decode('utf-8')</snippet></ROW><ROW><id>3768461</id><snippet>u'\n'.join(jotted)</snippet></ROW><ROW><id>3768461</id><snippet>tokens = nltk.wordpunct_tokenize(unirawness)
nltktext = nltk.Text([token.encode('utf-8') for token in tokens])
</snippet></ROW><ROW><id>3768461</id><snippet>jottedf = u'\n'.join(jotted)
filemydata.write(jottedf.encode('utf-8'))
</snippet></ROW><ROW><id>3768461</id><snippet>jottedf = '\n'.join(jotted)
filemydata.write(jottedf)
</snippet></ROW><ROW><id>3768491</id><snippet>Exception</snippet></ROW><ROW><id>3768491</id><snippet>True</snippet></ROW><ROW><id>3768491</id><snippet>False</snippet></ROW><ROW><id>3768491</id><snippet>False</snippet></ROW><ROW><id>3768491</id><snippet>True</snippet></ROW><ROW><id>3768491</id><snippet>False</snippet></ROW><ROW><id>3768491</id><snippet>defaultdict</snippet></ROW><ROW><id>3768491</id><snippet>get</snippet></ROW><ROW><id>3768491</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(lambda: "default")
&gt;&gt;&gt; d['key']
'default'

&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; d.get('key', 'default')
'default'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3768491</id><snippet>if key in dict</snippet></ROW><ROW><id>3768491</id><snippet>dict.has_key(key)</snippet></ROW><ROW><id>3768491</id><snippet>has_key()</snippet></ROW><ROW><id>3768582</id><snippet>titles1 = {1: "title1", 2: "title2", 3: "title3"}
titles2 = {1: "title1", 2: "not_title2", 3: "title3"}
for id, title in titles1.iteritems():
    # verify the key is in titles2, compare title to titles2[id]
</snippet></ROW><ROW><id>3768582</id><snippet>titles1 = dict([(x["id"], x) for x in list1])
</snippet></ROW><ROW><id>3768809</id><snippet>handlist</snippet></ROW><ROW><id>3768809</id><snippet>raw_input</snippet></ROW><ROW><id>3768809</id><snippet>hand</snippet></ROW><ROW><id>3768809</id><snippet>raw_input</snippet></ROW><ROW><id>3768809</id><snippet>while</snippet></ROW><ROW><id>3768809</id><snippet>hand</snippet></ROW><ROW><id>3768809</id><snippet>startswith("")</snippet></ROW><ROW><id>3768809</id><snippet>True</snippet></ROW><ROW><id>3768809</id><snippet>wordlist</snippet></ROW><ROW><id>3768809</id><snippet>hand</snippet></ROW><ROW><id>3768809</id><snippet>[item for item in wordlist if item.startswith(hand)]
</snippet></ROW><ROW><id>3768809</id><snippet>any()</snippet></ROW><ROW><id>3768809</id><snippet>True</snippet></ROW><ROW><id>3768809</id><snippet>True</snippet></ROW><ROW><id>3768809</id><snippet>startswith()</snippet></ROW><ROW><id>3768809</id><snippet>wordlist</snippet></ROW><ROW><id>3768809</id><snippet>wordlist = ['hello', 'bye'] 
hand = ""

while any(item.startswith(hand) for item in wordlist):
    hand += raw_input('enter letter: ')  
print 'you loose' 
</snippet></ROW><ROW><id>3768975</id><snippet>&gt;&gt;&gt; f  = FileItem("/foo/bar")
&gt;&gt;&gt; magic(f)
'{"fname": "/foo/bar"}'
</snippet></ROW><ROW><id>3768975</id><snippet>json.dumps(f.__dict__)</snippet></ROW><ROW><id>3768975</id><snippet>&gt;&gt;&gt; from json import JSONEncoder
&gt;&gt;&gt; class MyEncoder(JSONEncoder):
    def default(self, o):
        return o.__dict__    

&gt;&gt;&gt; MyEncoder().encode(f)
'{"fname": "/foo/bar"}'
</snippet></ROW><ROW><id>3768975</id><snippet>json.dumps()</snippet></ROW><ROW><id>3768975</id><snippet>cls</snippet></ROW><ROW><id>3768975</id><snippet>json.dumps(cls=MyEncoder)
</snippet></ROW><ROW><id>3768975</id><snippet>object_hook</snippet></ROW><ROW><id>3768975</id><snippet>JSONDecoder</snippet></ROW><ROW><id>3768975</id><snippet>&gt;&gt;&gt; def from_json(json_object):
    if 'fname' in json_object:
        return FileItem(json_object['fname'])
&gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode('{"fname": "/foo/bar"}')
&gt;&gt;&gt; f
&lt;__main__.FileItem object at 0x9337fac&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3769342</id><snippet>VIRTUAL_ENV</snippet></ROW><ROW><id>3769342</id><snippet>[directories]
basedirlist = ${VIRTUAL_ENV}
</snippet></ROW><ROW><id>3769342</id><snippet>PREFIX=${VIRTUAL_ENV}
</snippet></ROW><ROW><id>3769402</id><snippet>extra</snippet></ROW><ROW><id>3769402</id><snippet>extra</snippet></ROW><ROW><id>3769402</id><snippet>extra</snippet></ROW><ROW><id>3769516</id><snippet>dict</snippet></ROW><ROW><id>3769516</id><snippet>options = {
    "zone_id": 10001,
    "model_size": 1,
    "analysis_type": 2,
    "model_purposes": [ "ONE", ... ]
    ...
}
</snippet></ROW><ROW><id>3769516</id><snippet>**</snippet></ROW><ROW><id>3769516</id><snippet>def do_stuff(zone_id=10001, model_size=1, ...):
    ...

do_stuff(**options)
</snippet></ROW><ROW><id>3769516</id><snippet>Options</snippet></ROW><ROW><id>3769516</id><snippet>class Options:
    def __init__(self):
        # set some default values
        self.zone_id = 10001

    def populate_values(self):
        # maybe handle some user input?
        self.name = input("name: ")

    # use a property to calculate model_size on the fly
    @property
    def model_size(self):
        return 2-1
</snippet></ROW><ROW><id>3769516</id><snippet>options = Options()
options.populate_values()
print(options.model_size)
</snippet></ROW><ROW><id>3769547</id><snippet>class Record:
     def __init__(self, model):
         self.model= model
         self.doc_date = []
         self.doc_pn = []
         self.std_pn = []
         print("Record %s has been added.\n") % self
     def add_doc_date(self, declaration_date):
         self.doc_date.append(declaration_date)
     def add_doc_pn(self, declaration_pn):
         self.doc_pn.append(declaration_pn)
     def __str__(self):
         res = "Name: " + self.model + "\n"
         res = res + "Doc Date:" + str(self.doc_date) + "\n"
         res = res + "Standard Part Numbers:" + str(self.std_pn) + "\n"
         res = res + "Declaration Part Numbers" + str(self.doc_pn) + "\n"
         return res

&gt;&gt;&gt; t=Record("rec1")
Record Name: rec1
Doc Date:[]
Standard Part Numbers:[]
Declaration Part Numbers[]
 has been added.

&gt;&gt;&gt; t.add_doc_date("2010-10-10")
&gt;&gt;&gt; t.add_doc_pn("30")
&gt;&gt;&gt; print t
Name: rec1
Doc Date:['2010-10-10']
Standard Part Numbers:[]
Declaration Part Numbers['30']

&gt;&gt;&gt;
</snippet></ROW><ROW><id>3769782</id><snippet>is a</snippet></ROW><ROW><id>3769782</id><snippet>\1</snippet></ROW><ROW><id>3769782</id><snippet>re.sub(r"(?&lt;=s ).*?(?= s)", "no", "this is a string")
</snippet></ROW><ROW><id>3769782</id><snippet>(?&lt;=s )</snippet></ROW><ROW><id>3769782</id><snippet>s</snippet></ROW><ROW><id>3769782</id><snippet>(?= s)</snippet></ROW><ROW><id>3769782</id><snippet>s</snippet></ROW><ROW><id>3769782</id><snippet>re.sub(r"(s ).*?( s)", r"\1no\2", "this is a string")
</snippet></ROW><ROW><id>3769782</id><snippet>re.sub(r"(&lt;a.*?href=['"])((?!http).*?['"].*?&gt;)", r'\1http://\2', string)
</snippet></ROW><ROW><id>3769857</id><snippet>uid</snippet></ROW><ROW><id>3769930</id><snippet>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Filter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" filterTableName="LookupTables" xmlns="http://microsoft.com/ProjectServer/FilterSchema.xsd"&gt;
  &lt;Fields&gt;
    &lt;Field tableName="" fieldName="LT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_NAME" /&gt;
    &lt;Field tableName="" fieldName="LT_SORT_ORDER_ENUM" /&gt;
    &lt;Field tableName="" fieldName="LT_PRIMARY_LCID" /&gt;
    &lt;Field tableName="" fieldName="LT_FILL_ALL_LEVELS" /&gt;
    &lt;Field tableName="" fieldName="LT_CHECKOUTBY" /&gt;
    &lt;Field tableName="" fieldName="LT_CHECKOUTDATE" /&gt;
    &lt;Field tableName="" fieldName="MOD_DATE" /&gt;
  &lt;/Fields&gt;
  &lt;Criteria /&gt;
&lt;/Filter&gt;
</snippet></ROW><ROW><id>3769930</id><snippet>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Filter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" filterTableName="LookupTables" xmlns="http://microsoft.com/ProjectServer/FilterSchema.xsd"&gt;
  &lt;Fields&gt;
    &lt;Field tableName="" fieldName="LT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_NAME" /&gt;
    &lt;Field tableName="" fieldName="LT_SORT_ORDER_ENUM" /&gt;
    &lt;Field tableName="" fieldName="LT_PRIMARY_LCID" /&gt;
    &lt;Field tableName="" fieldName="LT_FILL_ALL_LEVELS" /&gt;
    &lt;Field tableName="" fieldName="LT_CHECKOUTBY" /&gt;
    &lt;Field tableName="" fieldName="LT_CHECKOUTDATE" /&gt;
    &lt;Field tableName="" fieldName="MOD_DATE" /&gt;
  &lt;/Fields&gt;
  &lt;Criteria&gt;
    &lt;FieldOperator fieldOperationType="Equal"&gt;
      &lt;Field fieldName="LT_UID" /&gt;
      &lt;Operand xmlns:q1="http://microsoft.com/wsdl/types/" xsi:type="q1:guid"&gt;20870732-12b6-48e2-acf4-94d934dfc27a&lt;/Operand&gt;
    &lt;/FieldOperator&gt;
  &lt;/Criteria&gt;
&lt;/Filter&gt;
</snippet></ROW><ROW><id>3769930</id><snippet>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Filter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" filterTableName="LookupTableStructures" xmlns="http://microsoft.com/ProjectServer/FilterSchema.xsd"&gt;
  &lt;Fields&gt;
    &lt;Field tableName="" fieldName="LT_STRUCT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_PARENT_STRUCT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_STRUCT_COOKIE" /&gt;
  &lt;/Fields&gt;
  &lt;Criteria&gt;
    &lt;FieldOperator fieldOperationType="Equal"&gt;
      &lt;Field fieldName="LT_UID" /&gt;
      &lt;Operand xmlns:q1="http://microsoft.com/wsdl/types/" xsi:type="q1:guid"&gt;20870732-12b6-48e2-acf4-94d934dfc27a&lt;/Operand&gt;
    &lt;/FieldOperator&gt;
  &lt;/Criteria&gt;
&lt;/Filter&gt;
</snippet></ROW><ROW><id>3769930</id><snippet>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Filter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" filterTableName="LookupTableValues" xmlns="http://microsoft.com/ProjectServer/FilterSchema.xsd"&gt;
  &lt;Fields&gt;
    &lt;Field tableName="" fieldName="LT_STRUCT_UID" /&gt;
    &lt;Field tableName="" fieldName="LCID" /&gt;
    &lt;Field tableName="" fieldName="LT_UID" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_DUR" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_NUM" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_DUR_FMT" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_DATE" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_TEXT" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_PHONETIC" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_FULL" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_DESC" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_SORT_INDEX" /&gt;
    &lt;Field tableName="" fieldName="LT_VALUE_LOCALIZED_COOKIE" /&gt;
  &lt;/Fields&gt;
  &lt;Criteria&gt;
    &lt;FieldOperator fieldOperationType="Equal"&gt;
      &lt;Field fieldName="LT_UID" /&gt;
      &lt;Operand xmlns:q1="http://microsoft.com/wsdl/types/" xsi:type="q1:guid"&gt;20870732-12b6-48e2-acf4-94d934dfc27a&lt;/Operand&gt;
    &lt;/FieldOperator&gt;
  &lt;/Criteria&gt;
&lt;/Filter&gt;
</snippet></ROW><ROW><id>3769930</id><snippet>ReadLookupTablesMultiLang</snippet></ROW><ROW><id>3770064</id><snippet>:</snippet></ROW><ROW><id>3770064</id><snippet>&gt;&gt;&gt; str1 = 'section1.1:  this is a heading for section 1'
&gt;&gt;&gt; str2 = 'section1.1:  this is a heading for section 1.1'
&gt;&gt;&gt; str1.split(':', 1)[1]
'  this is a heading for section 1'
&gt;&gt;&gt; str2.split(':', 1)[1]
'  this is a heading for section 1.1'
</snippet></ROW><ROW><id>3770104</id><snippet>temp = {}
for rec in orig_list:
    temp.setdefault((rec['first_name'], rec['last_name'], rec['team']), {}).setdefault(rec['display_name'], rec['value'])

persons = []
for key, person in temp.iteritems():
    person.update(dict(zip(('first_name', 'last_name', 'team'), key)))
    persons.append(person)
</snippet></ROW><ROW><id>3770375</id><snippet>try/finally</snippet></ROW><ROW><id>3770375</id><snippet>f = open('file.txt', 'r')

try:
    # do stuff with f
finally:
    f.close()
</snippet></ROW><ROW><id>3770375</id><snippet># do stuff with f</snippet></ROW><ROW><id>3770375</id><snippet>f</snippet></ROW><ROW><id>3770375</id><snippet>open</snippet></ROW><ROW><id>3770375</id><snippet>try</snippet></ROW><ROW><id>3770375</id><snippet>open</snippet></ROW><ROW><id>3770375</id><snippet>open</snippet></ROW><ROW><id>3770375</id><snippet>f</snippet></ROW><ROW><id>3770375</id><snippet>f.close()</snippet></ROW><ROW><id>3770940</id><snippet>rand('twister', 5489)
</snippet></ROW><ROW><id>3770940</id><snippet>np.random.seed(5489)
</snippet></ROW><ROW><id>3771543</id><snippet>dynamicObject</snippet></ROW><ROW><id>3771543</id><snippet>someObject</snippet></ROW><ROW><id>3771543</id><snippet>class dynamicObject(object):
    pass

def someMethod(self):
    print('Hi there!')

someObject=dynamicObject()
dynamicObject.someMethod=someMethod
someObject.someMethod()
# Hi there!
</snippet></ROW><ROW><id>3771543</id><snippet>someObject.someMethod=someMethod</snippet></ROW><ROW><id>3771543</id><snippet>someObject.__dict__</snippet></ROW><ROW><id>3771543</id><snippet>('someMethod',someMethod)</snippet></ROW><ROW><id>3771543</id><snippet>dynamicObject.someMethod=someMethod</snippet></ROW><ROW><id>3771543</id><snippet>someMethod</snippet></ROW><ROW><id>3771543</id><snippet>dynamicObject</snippet></ROW><ROW><id>3771543</id><snippet>__dict__</snippet></ROW><ROW><id>3771543</id><snippet>someMethod</snippet></ROW><ROW><id>3771543</id><snippet>someObject.someMethod</snippet></ROW><ROW><id>3771543</id><snippet>import types
someObject.someMethod=types.MethodType(someMethod,someObject,type(someObject))
</snippet></ROW><ROW><id>3771543</id><snippet>'someMethod'</snippet></ROW><ROW><id>3771543</id><snippet>someObject.__dict__</snippet></ROW><ROW><id>3771543</id><snippet>someMethod</snippet></ROW><ROW><id>3771705</id><snippet>followlinks</snippet></ROW><ROW><id>3771705</id><snippet>True</snippet></ROW><ROW><id>3771705</id><snippet>os.walk</snippet></ROW><ROW><id>3771705</id><snippet>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
</snippet></ROW><ROW><id>3771848</id><snippet>def admin(handler_method):
  """
  This decorator requires admin, 403 if not.
  """
  def auth_required(self, *args, **kwargs):
    if users.is_current_user_admin():
      handler_method(self, *args, **kwargs)
    else:
      self.error(403)
  return auth_required

...

@admin
def crudmethod_update(self, *args, **kwargs):
  ...
</snippet></ROW><ROW><id>3772090</id><snippet>types</snippet></ROW><ROW><id>3772090</id><snippet>int</snippet></ROW><ROW><id>3772090</id><snippet>str</snippet></ROW><ROW><id>3772090</id><snippet>isinstance()</snippet></ROW><ROW><id>3772090</id><snippet>issubclass()</snippet></ROW><ROW><id>3772090</id><snippet>dict</snippet></ROW><ROW><id>3772090</id><snippet>&gt;&gt;&gt; isinstance({}, dict)
True
&gt;&gt;&gt; isinstance('', str)
True
&gt;&gt;&gt; isinstance({}, str)
False
&gt;&gt;&gt; isinstance('', dict)
False
</snippet></ROW><ROW><id>3772090</id><snippet>int</snippet></ROW><ROW><id>3772090</id><snippet>str</snippet></ROW><ROW><id>3772235</id><snippet>def HandleAuthAndReturnResult(self, method, arg):
    mc = xmlrpclib.MultiCall(self.wiki)
    if self.token:
        mc.applyAuthToken(self.token)
    method(mc, arg)
    return mc()[-1]
def fooMethod(self, x):
    HandleAuthAndReturnResult(xmlrpclib.MultiCall.fooMethod, x)
</snippet></ROW><ROW><id>3772235</id><snippet>def HandleAuthAndReturnResult(self, methodName, arg):
    mc = xmlrpclib.MultiCall(self.wiki)
    if self.token:
        mc.applyAuthToken(self.token)

    try:
        methodToCall = getattr(mc, methodName)
    except AttributeError:
        return None

    methodToCall(arg)
    return mc()[-1]

def fooMethod(self, x):
    HandleAuthAndReturnResult('fooMethod', x)
</snippet></ROW><ROW><id>3772784</id><snippet>http://gdata.youtube.com/feeds/api/users/username/playlists/921AC6352FE6931F
</snippet></ROW><ROW><id>3772784</id><snippet>http://gdata.youtube.com/feeds/api/playlists/921AC6352FE6931F
</snippet></ROW><ROW><id>3772885</id><snippet>select</snippet></ROW><ROW><id>3773003</id><snippet>storage[0]</snippet></ROW><ROW><id>3773003</id><snippet>main.Record</snippet></ROW><ROW><id>3773096</id><snippet>item = list[int(thing) - 1]
</snippet></ROW><ROW><id>3773114</id><snippet>filter</snippet></ROW><ROW><id>3773114</id><snippet>map</snippet></ROW><ROW><id>3773114</id><snippet>eval</snippet></ROW><ROW><id>3773334</id><snippet>"NA"</snippet></ROW><ROW><id>3773334</id><snippet>"NA"</snippet></ROW><ROW><id>3773334</id><snippet>&gt;&gt;&gt; import sys, StringIO
&gt;&gt;&gt;
&gt;&gt;&gt; data = """\
... Jim Joe Billy Bob
... 1   2   3     x
... 2   x   x     x  666
...
... 3   4   5     x
... """
&gt;&gt;&gt;
&gt;&gt;&gt; def get_averages(f):
...     headers = f.readline().split()
...     ncols = len(headers)
...     sumx0 = [0] * ncols
...     sumx1 = [0.0] * ncols
...     lino = 1
...     for line in f:
...         lino += 1
...         values = line.split()
...         for colindex, x in enumerate(values):
...             if colindex &gt;= ncols:
...                 print &gt;&gt; sys.stderr, "Extra data %r in row %d, column %d" %
(x, lino, colindex+1)
...                 continue
...             try:
...                 value = float(x)
...             except ValueError:
...                 continue
...             sumx0[colindex] += 1
...             sumx1[colindex] += value
...     print headers
...     print sumx1
...     print sumx0
...     averages = [
...         total / count if count else None
...         for total, count in zip(sumx1, sumx0)
...         ]
...     print averages
</snippet></ROW><ROW><id>3773334</id><snippet>...     return headers, averages

...
&gt;&gt;&gt; sio = StringIO.StringIO(data)
&gt;&gt;&gt; get_averages(sio)
Extra data '666' in row 3, column 5
['Jim', 'Joe', 'Billy', 'Bob']
[6.0, 6.0, 8.0, 0.0]
[3, 2, 2, 0]
[2.0, 3.0, 4.0, None]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3773334</id><snippet>with open('myfile.text') as mf:
   hdrs, avgs = get_averages(mf)
</snippet></ROW><ROW><id>3773674</id><snippet>if foo in ('a', 'b', 'c', 'd'):
    #...
</snippet></ROW><ROW><id>3773706</id><snippet>.pypirc</snippet></ROW><ROW><id>3773706</id><snippet>.pypirc</snippet></ROW><ROW><id>3773950</id><snippet>import time

limit = 5
starttime = time.time()
for i, item in enumerate(recvData):
    if not i + 1 % limit:
        sleeptime =starttime + 60 - time.time()
        if sleeptime &gt; 0:
            time.sleep(sleeptime)
        starttime = time.time()
    #processing code
</snippet></ROW><ROW><id>3773981</id><snippet>os.listdir</snippet></ROW><ROW><id>3773981</id><snippet>os.walk</snippet></ROW><ROW><id>3773981</id><snippet>.new</snippet></ROW><ROW><id>3774396</id><snippet>with</snippet></ROW><ROW><id>3774396</id><snippet>__enter__</snippet></ROW><ROW><id>3774396</id><snippet>__exit__</snippet></ROW><ROW><id>3774396</id><snippet>with</snippet></ROW><ROW><id>3774396</id><snippet>class Meter():
    def __init__(self, dev):
        self.dev = dev
    def __enter__(self):
        #ttysetattr etc goes here before opening and returning the file object
        self.fd = open(self.dev, MODE)
        return self.fd
    def __exit__(self, type, value, traceback):
        #Exception handling here
        close(self.fd)

meter = Meter('dev/tty0')
with meter as m:
    #here you work with the file object.
    m.read()
</snippet></ROW><ROW><id>3774586</id><snippet>import operator

def stagger(l, w):
    if len(l)&gt;=w:
        return [tuple(l[0:w])]+stagger(l[1:], w)
    return []

def pleat(f, l, w=2):
    return map(lambda p: f(*p), stagger(l, w))

print pleat(operator.add, range(10))
print pleat(lambda x, y, z: x*y/z, range(3, 13), 3)
print pleat(lambda x: "~%s~"%(x), range(10), 1)
print pleat(lambda a, b, x, y: a+b==x+y, [3, 2, 4, 1, 5, 0, 9, 9, 0], 4)
</snippet></ROW><ROW><id>3774601</id><snippet>#module.py

foo = bar = 0 # global

def init()
    import module as m

    m.foo = 1
    m.bar = 2 # access to globals
</snippet></ROW><ROW><id>3774601</id><snippet>init</snippet></ROW><ROW><id>3774601</id><snippet>__init__.py</snippet></ROW><ROW><id>3774737</id><snippet>lambda: self.App.AddChatroom('#TestChatroom{0}'.format(self.roomcount), self) )
</snippet></ROW><ROW><id>3774737</id><snippet>lambda: wx.CallAfter(self.App.AddChatroom, '#TestChatroom{0}'.format(self.roomcount), self)
</snippet></ROW><ROW><id>3774887</id><snippet>name</snippet></ROW><ROW><id>3774887</id><snippet>name</snippet></ROW><ROW><id>3774887</id><snippet>name</snippet></ROW><ROW><id>3774887</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>3774887</id><snippet>soup.findAll(attrs={"name":"description"})
</snippet></ROW><ROW><id>3774887</id><snippet>attrs</snippet></ROW><ROW><id>3774981</id><snippet>python FILE | at TIME &gt; app.log
</snippet></ROW><ROW><id>3774982</id><snippet>from mymodule.MyCustomType import MyCustomType
</snippet></ROW><ROW><id>3774982</id><snippet>mymodule</snippet></ROW><ROW><id>3774982</id><snippet>MyCustomType</snippet></ROW><ROW><id>3774982</id><snippet>from mymodule import MyCustomType as therealmodule
therealmodule.doStuff()
</snippet></ROW><ROW><id>3775046</id><snippet>import itertools
x = ['a','b','c','d','e']
y = ['1','2','3']
for a, b in itertools.izip(itertools.cycle(x), itertools.cycle(y)):
    print a, b
</snippet></ROW><ROW><id>3775154</id><snippet>time.clock()</snippet></ROW><ROW><id>3775154</id><snippet>chunk_avg_map()</snippet></ROW><ROW><id>3775154</id><snippet>multiprocessing</snippet></ROW><ROW><id>3775154</id><snippet>xrange(16)</snippet></ROW><ROW><id>3775154</id><snippet>chunk_avg_map()</snippet></ROW><ROW><id>3775272</id><snippet>global</snippet></ROW><ROW><id>3775272</id><snippet>nonlocal</snippet></ROW><ROW><id>3775272</id><snippet>def A():
    foo = [1]
    def B():
        foo[0] = 2 # since foo is a list, modifying it here modifies the referenced list
</snippet></ROW><ROW><id>3775272</id><snippet>path = []</snippet></ROW><ROW><id>3775272</id><snippet>path</snippet></ROW><ROW><id>3775272</id><snippet>path</snippet></ROW><ROW><id>3775272</id><snippet>path</snippet></ROW><ROW><id>3775272</id><snippet>dict</snippet></ROW><ROW><id>3775272</id><snippet>def A():
    state = {
        'path': [],
        'current': 0,
        # ...
    }

    def B():
        state['current'] = 3
</snippet></ROW><ROW><id>3775280</id><snippet>Popen()</snippet></ROW><ROW><id>3775280</id><snippet>cat</snippet></ROW><ROW><id>3775280</id><snippet>os.pipe()</snippet></ROW><ROW><id>3775280</id><snippet>file</snippet></ROW><ROW><id>3775280</id><snippet>cat</snippet></ROW><ROW><id>3775280</id><snippet>socket.socketpair()</snippet></ROW><ROW><id>3775280</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>3775311</id><snippet>$ scrapy crawl directory.google.com
</snippet></ROW><ROW><id>3775311</id><snippet>/usr/share/doc/scrapy/examples/</snippet></ROW><ROW><id>3775311</id><snippet>$ cp -r /usr/share/doc/scrapy/examples/googledir ~
$ cd ~/googledir
$ scrapy crawl directory.google.com
</snippet></ROW><ROW><id>3775704</id><snippet>IMAP4.fetch(message_set, 'UID')
</snippet></ROW><ROW><id>3775704</id><snippet>server.select(imap_folder)
# List all messages
typ, data = server.search(None, 'ALL') 
# iterate through messages
for num in data[0].split():
    typ, data = server.fetch(num, '(BODY[HEADER.FIELDS (MESSAGE-ID)])')
    # parse data to get message id
</snippet></ROW><ROW><id>3775818</id><snippet>use List::Gen;

my $fib; $fib = cache gen {$_ &lt; 2  ? $_ : $$fib[$_ - 1] + $$fib[$_ - 2]};

say "@$fib[0 .. 15]";  #  0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610
</snippet></ROW><ROW><id>3775818</id><snippet>my $fib; $fib = cache gen {$_ &lt; 2 ? $_ : $fib-&gt;get($_ - 1) + $fib-&gt;get($_ - 2)};

say join ' ' =&gt; $fib-&gt;slice(0 .. 15);
</snippet></ROW><ROW><id>3775818</id><snippet>cache</snippet></ROW><ROW><id>3775818</id><snippet>while (my $num = $fib-&gt;next) {
    last if $num &gt; 10**15;
    print "$_\n";
}
</snippet></ROW><ROW><id>3775818</id><snippet>$fib-&gt;next</snippet></ROW><ROW><id>3775818</id><snippet>$fib-&gt;()</snippet></ROW><ROW><id>3775818</id><snippet>$fib-&gt;reset()</snippet></ROW><ROW><id>3775818</id><snippet>$fib-&gt;index = 10;</snippet></ROW><ROW><id>3775818</id><snippet>use List::Gen '*';

sub fibonacci {
    my $limit   = 10**shift;
    my ($x, $y) = (0, 1);

    While {$_ &lt; $limit} gather {
        ($x, $y) = ($y, take($x) + $y)
    }
}

say for @{fibonacci 15};
</snippet></ROW><ROW><id>3775818</id><snippet>use bigint;</snippet></ROW><ROW><id>3775818</id><snippet>say for @{fibonacci 400}; # or more
</snippet></ROW><ROW><id>3776252</id><snippet>get_serving_url</snippet></ROW><ROW><id>3776304</id><snippet>t</snippet></ROW><ROW><id>3776304</id><snippet>B</snippet></ROW><ROW><id>3776304</id><snippet>B &gt; 2*min(length(x),length(h))</snippet></ROW><ROW><id>3776304</id><snippet>y_b</snippet></ROW><ROW><id>3776304</id><snippet>h</snippet></ROW><ROW><id>3776304</id><snippet>x</snippet></ROW><ROW><id>3776304</id><snippet>h</snippet></ROW><ROW><id>3776304</id><snippet>h</snippet></ROW><ROW><id>3776304</id><snippet>def OneOverF(N):
    import numpy as np
    N2 = N/2; #N has to be even!
    x = np.hstack((1, np.arange(1, N2+1), np.arange(N2-1, 0, -1)))
    hf = 1/(2*np.pi*x/N2)
    ht = np.real(np.fft.ifft(hf)) # discard tiny imag part from numerical error
    htrot = np.roll(ht, N2)
    htwin = htrot * np.hamming(N)
    return ht, htrot, htwin
</snippet></ROW><ROW><id>3776304</id><snippet>ht</snippet></ROW><ROW><id>3776304</id><snippet>htrot</snippet></ROW><ROW><id>3776304</id><snippet>htwin</snippet></ROW><ROW><id>3776304</id><snippet>pi</snippet></ROW><ROW><id>3776304</id><snippet>ht</snippet></ROW><ROW><id>3776304</id><snippet>htrot</snippet></ROW><ROW><id>3776304</id><snippet>htwin</snippet></ROW><ROW><id>3776366</id><snippet>DEBUG_SAVEALL</snippet></ROW><ROW><id>3776679</id><snippet>def break_long_words(s, width, fix):
  return " ".join(x if len(x) &lt; width else fix(x) for x in s.split())

def handle_long_word(s):  # choose a name that describes what action you want
  # do something
  return s

s = "a" * 20
s = break_long_words(s, 60, handle_long_word)
</snippet></ROW><ROW><id>3776780</id><snippet>#!/usr/bin/env python

"""Reconstruct sessions: Take a space-delimited web server access log
including IP addresses, timestamps, and User Agent,
and output a list of the IPs, and the number of inferred sessions for each."""

## Input looks like:
# Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Referer) sc-status sc-substatus sc-win32-status
# 2010-09-21 23:59:59 172.21.1.119 GET /graphics/foo.gif - 80 - 128.123.114.141 Mozilla/5.0+(Windows;+U;+Windows+NT+5.1;+en-US;+rv:1.9.2)+Gecko/20100115+Firefox/3.6+(.NET+CLR+3.5.30729) http://www.site.org//baz.htm 200 0 0

import datetime
import operator

infileName = "ex100922.log"
outfileName = "visitor-ips.csv"

ipDict = {}

def inputRecords():
    infile = open(infileName, "r")

    recordsRead = 0
    progressThreshold = 100
    sessionTimeout = datetime.timedelta(minutes=30)

    for line in infile:
        if (line[0] == '#'):
            continue
        else:
            recordsRead += 1

            fields = line.split()
            # print "line of %d records: %s\n" % (len(fields), line)
            if (recordsRead &gt;= progressThreshold):
                print "Read %d records" % recordsRead
                progressThreshold *= 2

            # http://www.dblab.ntua.gr/persdl2007/papers/72.pdf
            #   "a new request is put in an existing session if two conditions are valid:
            #    * the IP address and the user-agent are the same of the requests already
            #      inserted in the session,
            #    * the request is done less than fifteen minutes after the last request inserted."

            theDate, theTime = fields[0], fields[1]
            newRequestTime = datetime.datetime.strptime(theDate + " " + theTime, "%Y-%m-%d %H:%M:%S")

            ipAddr, userAgent = fields[8], fields[9]

            if ipAddr not in ipDict:
                ipDict[ipAddr] = {userAgent: [1, newRequestTime]}
            else:
                if userAgent not in ipDict[ipAddr]:
                    ipDict[ipAddr][userAgent] = [1, newRequestTime]
                else:
                    ipdipaua = ipDict[ipAddr][userAgent]
                    if newRequestTime - ipdipaua[1] &gt;= sessionTimeout:
                        ipdipaua[0] += 1
                    ipdipaua[1] = newRequestTime
    infile.close()
    return recordsRead

def outputSessions():
    outfile = open(outfileName, "w")
    outfile.write("#Fields: IPAddr Sessions\n")
    recordsWritten = len(ipDict)

    # ipDict[ip] is { userAgent1: [numSessions, lastTimeStamp], ... }
    for ip, val in ipDict.iteritems():
        # TODO: sum over on all keys' values  [(v, k) for (k, v) in d.iteritems()].
        totalSessions = reduce(operator.add, [v2[0] for v2 in val.itervalues()])
        outfile.write("%s\t%d\n" % (ip, totalSessions))

    outfile.close()
    return recordsWritten

recordsRead = inputRecords()

recordsWritten = outputSessions()

print "Finished session reconstruction: read %d records, wrote %d\n" % (recordsRead, recordsWritten)
</snippet></ROW><ROW><id>3776780</id><snippet>strptime()</snippet></ROW><ROW><id>3776824</id><snippet>2to3</snippet></ROW><ROW><id>3776824</id><snippet>2to3</snippet></ROW><ROW><id>3777054</id><snippet>model.setData(index, QtCore.QVariant(QtCore.Qt.AlignRight),
              QtCore.Qt.TextAlignmentRole)
</snippet></ROW><ROW><id>3777308</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(['./test.sh']) # Thanks @Jim Dennis for suggesting the []
0 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3777308</id><snippet>test.sh</snippet></ROW><ROW><id>3777308</id><snippet>0</snippet></ROW><ROW><id>3777327</id><snippet>wb.sheet_names()</snippet></ROW><ROW><id>3777327</id><snippet>first_column = sh.col_values(0)</snippet></ROW><ROW><id>3777327</id><snippet>import xlrd
wb = xlrd.open_workbook(file_name)
# Why do you think that you need to use encoding_overide?
sheet0 = wb.sheet_by_index(0)
tag = u"Employee name" # or u"Emp name" or ...
column_0_values = sheet0.col_values(colx=0)
try:
    max_tag_row_index = column_0_values.rindex(tag)
    print "last tag %r found at row_index %d" % (
        tag, max_tag_row_index)
except IndexError:
    print "tag %r not found" % tag
</snippet></ROW><ROW><id>3777327</id><snippet>last_colx = sheet0.ncols - 1
required_values = sheet0.col_values(colx=last_colx, start_rowx=max_tag_row_index)
required_cells = sheet0.col_slice(colx=last_colx, start_rowx=max_tag_row_index)
# choose one of the above 2 lines, depending on what you need to do
</snippet></ROW><ROW><id>3777327</id><snippet>for rowx in xrange(max_tag_row_index, sheet0.nrows): # or max_tag_row_index + 1
    for colx in xrange(0, sheet0.ncols):
        do_something_with_cell_object(sheet0.cell(rowx, colx))
</snippet></ROW><ROW><id>3777650</id><snippet>validate_unique</snippet></ROW><ROW><id>3777650</id><snippet>ValidationError</snippet></ROW><ROW><id>3777650</id><snippet>HitchingPost.objects.count() != 0</snippet></ROW><ROW><id>3777650</id><snippet>class HitchingPost(models.Model):
    ...
    def validate_unique(self, exclude = None):
        from django.core.exceptions import ValidationError, NON_FIELD_ERRORS
        if HitchingPost.objects.count() != 0:
            raise ValidationError({NON_FIELD_ERRORS: ["There can be only one!"]})
</snippet></ROW><ROW><id>3777650</id><snippet>enum</snippet></ROW><ROW><id>3777650</id><snippet>Set-once-constant</snippet></ROW><ROW><id>3778576</id><snippet>class Configuration(db.Model):
  _INSTANCE = None

  @classmethod
  def get_instance(cls):
    if not cls._INSTANCE:
      cls._INSTANCE = cls.get_or_insert('config')
    return cls._INSTANCE
</snippet></ROW><ROW><id>3778576</id><snippet>class Configuration(db.Model):
  CACHE_TIME = datetime.timedelta(minutes=5)

  _INSTANCE = None
  _INSTANCE_AGE = None

  @classmethod
  def get_instance(cls):
    now = datetime.datetime.now()
    if not cls._INSTANCE or cls._INSTANCE_AGE + cls.CACHE_TIME &lt; now:
      cls._INSTANCE = cls.get_or_insert('config')
      cls._INSTANCE_AGE = now
    return cls._INSTANCE
</snippet></ROW><ROW><id>3778791</id><snippet>'descendant::*[@attrib1="yes, this is what we want"]'</snippet></ROW><ROW><id>3778791</id><snippet>attrib1</snippet></ROW><ROW><id>3778791</id><snippet>"yes, this is what we want"</snippet></ROW><ROW><id>3778791</id><snippet>import lxml.html as lh 
import cStringIO

content='''
&lt;html&gt;
    &lt;body&gt;
        &lt;invalid html here/&gt;
        &lt;dont care&gt; ... &lt;/dont care&gt;
        &lt;invalid html here too/&gt;
        &lt;interesting attrib1="naah, it is not this"&gt; ... &lt;/interesting tag&gt;
        &lt;interesting attrib1="yes, this is what we want"&gt;
            &lt;group&gt;
                &lt;line&gt;
                    data
                &lt;/line&gt;
            &lt;/group&gt;
            &lt;group&gt;
                &lt;line&gt;
                    data1
                &lt;line&gt;
            &lt;/group&gt;
            &lt;group&gt;
                &lt;line&gt;
                    data2
                &lt;line&gt;
            &lt;/group&gt;
        &lt;/interesting&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''
doc=lh.parse(cStringIO.StringIO(content))
tags=doc.xpath('descendant::*[@attrib1="yes, this is what we want"]')
print(tags)
# [&lt;Element interesting at b767e14c&gt;]
for tag in tags:
    print(lh.tostring(tag))
# &lt;interesting attrib1="yes, this is what we want"&gt;&lt;group&gt;&lt;line&gt;
#                     data
#                 &lt;/line&gt;&lt;/group&gt;&lt;group&gt;&lt;line&gt;
#                     data1
#                 &lt;line&gt;&lt;/line&gt;&lt;/line&gt;&lt;/group&gt;&lt;group&gt;&lt;line&gt;
#                     data2
#                 &lt;line&gt;&lt;/line&gt;&lt;/line&gt;&lt;/group&gt;&lt;/interesting&gt;
</snippet></ROW><ROW><id>3778967</id><snippet>cur = db.cursor()
cur.execute(sql)
timestamps = []
for rec in cur:
    timestamps.append(rec[0])
</snippet></ROW><ROW><id>3779436</id><snippet>a = array.array('c')
a.fromstring(s)
</snippet></ROW><ROW><id>3779458</id><snippet>python -m compileall /path/to/django/site
</snippet></ROW><ROW><id>3779871</id><snippet>cscope</snippet></ROW><ROW><id>3779871</id><snippet>pycscope</snippet></ROW><ROW><id>3779871</id><snippet>cscope</snippet></ROW><ROW><id>3779871</id><snippet>pycscope</snippet></ROW><ROW><id>3779871</id><snippet>cscope</snippet></ROW><ROW><id>3779871</id><snippet>cscope</snippet></ROW><ROW><id>3779871</id><snippet>pycsope</snippet></ROW><ROW><id>3780160</id><snippet>__file__</snippet></ROW><ROW><id>3780160</id><snippet>__file__</snippet></ROW><ROW><id>3780412</id><snippet>length = sum(len(s) for s in strings)
</snippet></ROW><ROW><id>3780627</id><snippet>pickle</snippet></ROW><ROW><id>3780627</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>3780627</id><snippet>&gt;&gt;&gt; d = {3: 9, 'apple': 'orange'}
&gt;&gt;&gt; s = str(d)
&gt;&gt;&gt; s
"{3: 9, 'apple': 'orange'}"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = ast.literal_eval(s)
&gt;&gt;&gt; x
{3: 9, 'apple': 'orange'}
</snippet></ROW><ROW><id>3780838</id><snippet>{(.*)}</snippet></ROW><ROW><id>3780838</id><snippet>{</snippet></ROW><ROW><id>3780838</id><snippet>}</snippet></ROW><ROW><id>3780838</id><snippet>{</snippet></ROW><ROW><id>3780838</id><snippet>}</snippet></ROW><ROW><id>3780838</id><snippet>{(.*?)}
</snippet></ROW><ROW><id>3781320</id><snippet>pngcrush</snippet></ROW><ROW><id>3781320</id><snippet>filename.png</snippet></ROW><ROW><id>3781320</id><snippet>filename.png</snippet></ROW><ROW><id>3781320</id><snippet>pngcrush</snippet></ROW><ROW><id>3781320</id><snippet>-e</snippet></ROW><ROW><id>3781320</id><snippet>-d</snippet></ROW><ROW><id>3781320</id><snippet>man</snippet></ROW><ROW><id>3781429</id><snippet>from itertools import islice, izip, cycle

list_1 = ['a','b','c']
list_2 = [1,2]

list(islice(izip(cycle(list_1), cycle(list_2)), len(list_1)*len(list_2)))
</snippet></ROW><ROW><id>3781429</id><snippet>[('a', 1), ('b', 2), ('c', 1), ('a', 2), ('b', 1), ('c', 2)]</snippet></ROW><ROW><id>3781496</id><snippet>+</snippet></ROW><ROW><id>3781496</id><snippet>__add__</snippet></ROW><ROW><id>3781496</id><snippet>__radd__</snippet></ROW><ROW><id>3781554</id><snippet>import logging</snippet></ROW><ROW><id>3781554</id><snippet>logging</snippet></ROW><ROW><id>3781554</id><snippet>logging.handlers</snippet></ROW><ROW><id>3781554</id><snippet>__init__.py</snippet></ROW><ROW><id>3781554</id><snippet>logging.handlers</snippet></ROW><ROW><id>3781554</id><snippet>logging.handlers</snippet></ROW><ROW><id>3781554</id><snippet>os</snippet></ROW><ROW><id>3781554</id><snippet>os.path</snippet></ROW><ROW><id>3781554</id><snippet>os</snippet></ROW><ROW><id>3781554</id><snippet>path</snippet></ROW><ROW><id>3781554</id><snippet>os.path</snippet></ROW><ROW><id>3781773</id><snippet>search</snippet></ROW><ROW><id>3781773</id><snippet>class CustomText(tk.Text):
    '''A text widget with a new method, HighlightPattern 

    example:

    text = CustomText()
    text.tag_configure("red",foreground="#ff0000")
    text.HighlightPattern("this should be red", "red")

    The highlight_pattern method is a simplified python 
    version of the tcl code at http://wiki.tcl.tk/3246
    '''
    def __init__(self, *args, **kwargs):
        tk.Text.__init__(self, *args, **kwargs)

    def highlight_pattern(self, pattern, tag, start="1.0", end="end", regexp=False):
        '''Apply the given tag to all text that matches the given pattern

        If 'regexp' is set to True, pattern will be treated as a regular expression
        '''

        start = self.index(start)
        end = self.index(end)
        self.mark_set("matchStart",start)
        self.mark_set("matchEnd",start)
        self.mark_set("searchLimit", end)

        count = tk.IntVar()
        while True:
            index = self.search(pattern, "matchEnd","searchLimit",
                                count=count, regexp=regexp)
            if index == "": break
            self.mark_set("matchStart", index)
            self.mark_set("matchEnd", "%s+%sc" % (index,count.get()))
            self.tag_add(tag, "matchStart","matchEnd")
</snippet></ROW><ROW><id>3781869</id><snippet>os.system</snippet></ROW><ROW><id>3781869</id><snippet>os.system("script2.py 1")
</snippet></ROW><ROW><id>3781869</id><snippet>execfile</snippet></ROW><ROW><id>3781869</id><snippet>sys.argv</snippet></ROW><ROW><id>3781915</id><snippet>self.age</snippet></ROW><ROW><id>3781915</id><snippet>_age</snippet></ROW><ROW><id>3781915</id><snippet>def newprops(object):

    @property
    def age(self):
        return 40

    @age.setter
    def age(self, value):
        self._age = value
</snippet></ROW><ROW><id>3781988</id><snippet>pyHook</snippet></ROW><ROW><id>3781988</id><snippet>import pyHook

def mouseUp(event):
    if event.Injected: return True

    print "Mouse went up"
    return True

hookManager = pyHook.HookManager()
hookManager.MouseLeftUp = mouseUp
hookManager.HookMouse()
</snippet></ROW><ROW><id>3781988</id><snippet>gtk</snippet></ROW><ROW><id>3781988</id><snippet>import pythoncom
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>3782084</id><snippet>UpdateGUI</snippet></ROW><ROW><id>3782084</id><snippet>@classmethod</snippet></ROW><ROW><id>3782084</id><snippet>wrapper</snippet></ROW><ROW><id>3782084</id><snippet>self</snippet></ROW><ROW><id>3782084</id><snippet>class X(object):
    @classmethod
    def foo(cls, fun):
        def wrapper(self, *args, **kwargs):
            self.write(*args, **kwargs)
            return fun(self, *args, **kwargs)
        return wrapper

    def write(self, *args, **kwargs):
        print(args, kwargs)

class Y(X):
    @X.foo
    def bar(self, x):
        print("x:", x)

Y().bar(3)
# prints:
#   (3,) {}
#   x: 3
</snippet></ROW><ROW><id>3782189</id><snippet>for key1 in sorted(myDict):
    for key2 in myDict[key1]:
        print key1 +"   " +key2 +"   " +myDict[key1][key2]
</snippet></ROW><ROW><id>3782530</id><snippet>highcharts</snippet></ROW><ROW><id>3782530</id><snippet>matplotlib</snippet></ROW><ROW><id>3782567</id><snippet>import wx

class MyForm(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)

        # create the labels
        lblOne = wx.StaticText(panel, label="labelOne", size=(60,-1))
        lblTwo = wx.StaticText(panel, label="lblTwo", size=(60,-1))
        lblThree = wx.StaticText(panel, label="lblThree", size=(60,-1))

        # create the text controls
        txtOne = wx.TextCtrl(panel)
        txtTwo = wx.TextCtrl(panel)
        txtThree = wx.TextCtrl(panel)

        # create some sizers
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        lineOneSizer = wx.BoxSizer(wx.HORIZONTAL)
        lineTwoSizer = wx.BoxSizer(wx.HORIZONTAL)
        lineThreeSizer = wx.BoxSizer(wx.HORIZONTAL)

        # add widgets to sizers
        lineOneSizer.Add(lblOne, 0, wx.ALL|wx.ALIGN_LEFT, 5)
        lineOneSizer.Add(txtOne, 0, wx.ALL, 5)
        lineTwoSizer.Add(lblTwo, 0, wx.ALL|wx.ALIGN_LEFT, 5)
        lineTwoSizer.Add(txtTwo, 0, wx.ALL, 5)
        lineThreeSizer.Add(lblThree, 0, wx.ALL|wx.ALIGN_LEFT, 5)
        lineThreeSizer.Add(txtThree, 0, wx.ALL, 5)

        mainSizer.Add(lineOneSizer)
        mainSizer.Add(lineTwoSizer)
        mainSizer.Add(lineThreeSizer)

        panel.SetSizer(mainSizer)

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3782567</id><snippet>import wx

class MyForm(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # create the main sizer
        self.mainSizer = wx.BoxSizer(wx.VERTICAL)

        # Add a panel so it looks the correct on all platforms
        self.panel = wx.Panel(self, wx.ID_ANY)

        lbls = ["labelOne", "lblTwo", "lblThree"]
        for lbl in lbls:
            self.buildLayout(lbl)
        self.panel.SetSizer(self.mainSizer)

    #----------------------------------------------------------------------
    def buildLayout(self, text):
        """"""
        lblSize = (60,-1)
        lbl = wx.StaticText(self.panel, label=text, size=lblSize)
        txt = wx.TextCtrl(self.panel)

        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(lbl, 0, wx.ALL|wx.ALIGN_LEFT, 5)
        sizer.Add(txt, 0, wx.ALL, 5)
        self.mainSizer.Add(sizer)

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3782771</id><snippet>&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; fragment = '&lt;div&gt;text1&lt;span&gt;childtext1&lt;/span&gt;text2&lt;span&gt;childtext2&lt;/span&gt;text3&lt;/div&gt;'
&gt;&gt;&gt; div = lxml.etree.fromstring(fragment)
&gt;&gt;&gt; div.xpath('./text()')
['text1', 'text2', 'text3']
</snippet></ROW><ROW><id>3782802</id><snippet>parser = etree.HTMLParser(encoding = "utf-8")
</snippet></ROW><ROW><id>3782802</id><snippet>repr(tree.xpath("//line")[0].text)</snippet></ROW><ROW><id>3782802</id><snippet>encoding</snippet></ROW><ROW><id>3782877</id><snippet>__init__</snippet></ROW><ROW><id>3782877</id><snippet>__init__</snippet></ROW><ROW><id>3782877</id><snippet>__new__</snippet></ROW><ROW><id>3782877</id><snippet>__init__</snippet></ROW><ROW><id>3782877</id><snippet>__new__</snippet></ROW><ROW><id>3782877</id><snippet>__new__</snippet></ROW><ROW><id>3782877</id><snippet>__new__</snippet></ROW><ROW><id>3782919</id><snippet>__init__</snippet></ROW><ROW><id>3782919</id><snippet>request</snippet></ROW><ROW><id>3782919</id><snippet>class MyForm(forms.Form):
    def __init__(self, request, *args, **kwargs)
        self.request = request
        super(MyForm, self).__init__(*args, **kwargs)

    def clean(self):
        if not self.request.session.get('file_downloaded', False):
            raise ValidationError('File not downloaded!')

def my_view(request):
    form = MyForm(request, data=request.POST)
</snippet></ROW><ROW><id>3783066</id><snippet>logging</snippet></ROW><ROW><id>3783066</id><snippet>import logging
def notify_friends(feeditem):
    """Alerts friends of a new feeditem"""    
    logging.info('Feeditem = %s', feeditem)
</snippet></ROW><ROW><id>3783066</id><snippet>debug</snippet></ROW><ROW><id>3783066</id><snippet>critical</snippet></ROW><ROW><id>3783066</id><snippet>info</snippet></ROW><ROW><id>3783066</id><snippet>debug</snippet></ROW><ROW><id>3783066</id><snippet>logging</snippet></ROW><ROW><id>3783194</id><snippet>sudo -u apache /usr/local/bin/java-task-wrapper</snippet></ROW><ROW><id>3783194</id><snippet>java -jar java-task-standalone.jar</snippet></ROW><ROW><id>3783194</id><snippet>java -cp /path/to/JExcelAPI:/my/program/classes com.acme.MainClass</snippet></ROW><ROW><id>3783252</id><snippet>import pyodbc
conn = pyodbc.connect('DRIVER=MySQL ODBC 5.1 driver;SERVER=localhost;DATABASE=spt;UID=who;PWD=testest') 

csr = conn.cursor()  
csr.close()
del csr
conn.close()     #&lt;--- Close the connection
</snippet></ROW><ROW><id>3783303</id><snippet>import numpy as np
import pylab
import matplotlib._pylab_helpers

x=np.random.random((10,10))
y=np.random.random((10,10))
pylab.figure()
pylab.plot(x)
pylab.figure()
pylab.plot(y)

figures=[manager.canvas.figure
         for manager in matplotlib._pylab_helpers.Gcf.get_all_fig_managers()]
print(figures)

# [&lt;matplotlib.figure.Figure object at 0xb788ac6c&gt;, &lt;matplotlib.figure.Figure object at 0xa143d0c&gt;]

for i, figure in enumerate(figures):
    figure.savefig('figure%d.png' % i)
</snippet></ROW><ROW><id>3783327</id><snippet>  win32api.SetConsoleCtrlHandler(lambda x: True, True)  
</snippet></ROW><ROW><id>3783471</id><snippet>diter = datafile.DataFileReader(..) 
</snippet></ROW><ROW><id>3783471</id><snippet>for data in diter:
    ....
</snippet></ROW><ROW><id>3783471</id><snippet>class BinaryDecoder(object):
    """Read leaf values."""
    def __init__(self, reader):
        """
    reader is a Python object on which we can call read, seek, and tell.
    """
    self._reader = reader
</snippet></ROW><ROW><id>3783546</id><snippet>&gt;&gt;&gt; t = ((1, 'a'),(2, 'b'))
&gt;&gt;&gt; dict((y, x) for x, y in t)
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>3783597</id><snippet>final = [variable] if isinstance(variable, str) else list(variable)
</snippet></ROW><ROW><id>3783679</id><snippet>struct</snippet></ROW><ROW><id>3783679</id><snippet>struct.unpack('&lt;I', bytes + '\0')
</snippet></ROW><ROW><id>3783679</id><snippet>'\0'</snippet></ROW><ROW><id>3783679</id><snippet>struct.unpack('&lt;i', bytes + ('\0' if bytes[2] &lt; '\x80' else '\xff'))
</snippet></ROW><ROW><id>3783745</id><snippet>[re.sub(r'^(Mr|Ms|Mrs)\.\s+', '', s) for s in test_csv_line]
</snippet></ROW><ROW><id>3783756</id><snippet>[^\#]*</snippet></ROW><ROW><id>3783756</id><snippet>(\\\#)*</snippet></ROW><ROW><id>3783756</id><snippet>(\#.*)</snippet></ROW><ROW><id>3783756</id><snippet>(a*)(ab)?(b*)</snippet></ROW><ROW><id>3783756</id><snippet>(ab)?</snippet></ROW><ROW><id>3783756</id><snippet>^\s*(\S+\s*=([^\\#]|\\#?)*)?(#.*)?$</snippet></ROW><ROW><id>3783802</id><snippet>except Exception as foo:</snippet></ROW><ROW><id>3783802</id><snippet>as</snippet></ROW><ROW><id>3783802</id><snippet>,</snippet></ROW><ROW><id>3783816</id><snippet>class Abstract(type(db.Model)):
    def __new__(metacls, clsname, bases, clsdict):
        for methodname in clsdict.pop('_abstract_methods_', []):
            try:
                if not callable(clsdict[methodname]):
                    raise TypeError("{0} must implement {1}".format(clcname, methodname))
            except KeyError:
                raise TypeError("{0} must implement {1}".format(clcname, methodname))
       return super(Abstract, metacls).__new__(metacls, clsname, bases, clsdict)


class RequireCleanup(db.Model):
    __metaclass__ = Abstract
    _abstract_methods_ = ['cleanup']

    def cleanup(self):
        pass
</snippet></ROW><ROW><id>3783816</id><snippet>type(db.Model)</snippet></ROW><ROW><id>3783816</id><snippet>db.Model</snippet></ROW><ROW><id>3783816</id><snippet>_abstract_methods_</snippet></ROW><ROW><id>3783816</id><snippet>__new__</snippet></ROW><ROW><id>3783816</id><snippet>db.Model</snippet></ROW><ROW><id>3783849</id><snippet>Source     Dest       Protocol  Info
&lt;server&gt;   &lt;client&gt;   TCP       8081 &gt; 1835 [RST] Seq=2 Len=0
&lt;server&gt;   &lt;client&gt;   TCP       8081 &gt; 1835 [RST] Seq=2 Len=0
&lt;server&gt;   &lt;client&gt;   TCP       http &gt; 1834 [ACK] Seq=34 Ack=1 Win=6756 Len=0
</snippet></ROW><ROW><id>3783849</id><snippet>RST</snippet></ROW><ROW><id>3783849</id><snippet>&lt;?php
    $time_lim       = 30;
    $listen_port    = 8081;
    echo
       '&lt;h1&gt;Testing generation of a connection reset condition.&lt;/h1&gt;
        &lt;p&gt;&lt;a target="_blank" href="http://' .$_SERVER["HTTP_HOST"]. ':' .$listen_port. '/"&gt;
        Click here to load page that gets reset. You have ' . $time_lim . ' seconds.&lt;/a&gt;
        &lt;/p&gt;
       '
    ;
    flush ();
?&gt;
&lt;?php
    //-- Warning!  If the script blocks, below, this is not counted against the time limit.
    set_time_limit ($time_lim);

    $socket     = @socket_create_listen ($listen_port);
    if (!$socket) {
        print "Failed to create socket!\n";
        exit;
    }

    socket_set_nonblock ($socket);  //-- Needed, or else script executes until a client interacts with the socket.

    while (true) {
        //-- Use @ to suppress warnings.  Exception handling didn't work.
        $client = @socket_accept ($socket);
        if ($client)
            break;
    }

    /*--- If l_onoff is non-zero and l_linger is zero, all the unsent data will be
        discarded and RST (reset) is sent to the peer in the case of a connection-
        oriented socket.
    */
    $linger     = array ('l_linger' =&gt; 0, 'l_onoff' =&gt; 1);
    socket_set_option ($socket, SOL_SOCKET, SO_LINGER, $linger);

    //--- If we just close, the Browser gets the RST flag but fails silently (completely blank).
    socket_close ($socket);

    echo "&lt;p&gt;Done.&lt;/p&gt;";
?&gt;
</snippet></ROW><ROW><id>3783895</id><snippet>from django.conf import settings
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.core import paginator
from django.db import connection
from django.db.models import Q
from django.http import HttpResponseRedirect, Http404, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.translation import ugettext as _
</snippet></ROW><ROW><id>3783895</id><snippet>from django import conf, contrib, db, http, shortcuts, template, utils
from django.core import urlresolvers, paginator
</snippet></ROW><ROW><id>3783895</id><snippet>django</snippet></ROW><ROW><id>3783895</id><snippet>urlresolvers.reverse</snippet></ROW><ROW><id>3783895</id><snippet>reverse</snippet></ROW><ROW><id>3783998</id><snippet>def read_a_file(f)
    try:
        contents = f.read()
    except AttributeError:
        # f is not a file
</snippet></ROW><ROW><id>3783998</id><snippet>read</snippet></ROW><ROW><id>3783998</id><snippet>def read_a_file(f):
    if hasattr(f, 'read'):
        contents = f.read()
    else:
        # f is not a file
</snippet></ROW><ROW><id>3783998</id><snippet>file</snippet></ROW><ROW><id>3783998</id><snippet>file</snippet></ROW><ROW><id>3784019</id><snippet>Password: password required to open a protected workbook.
WriteResPassword : password required to write to a write-reserved workbook
</snippet></ROW><ROW><id>3784056</id><snippet>sys.version</snippet></ROW><ROW><id>3784056</id><snippet>sys.prefix</snippet></ROW><ROW><id>3784056</id><snippet>import site</snippet></ROW><ROW><id>3784101</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; 
&gt;&gt;&gt; descriptions = {
...     'player_joined_clan' : '%(player)s joined clan %(clan)s',
...     'player_left' : '%(player)s left',
...     'player_hit_player' : '%(player)s (of %(clan)s) hit %(player2)s (of %(clan2)s)',
...     }
&gt;&gt;&gt; 
&gt;&gt;&gt; data = [
...     {'player': 'PlayerA'},
...     {'player': 'PlayerB', 'clan' : 'ClanB'},
...     {'clan' : 'ClanC'},
...     {'clan' : 'ClanDA', 'player2': 'PlayerDB'},
...     ]
&gt;&gt;&gt; 
&gt;&gt;&gt; for item in data:
...     print item
...     item = collections.defaultdict(lambda : '"&lt;unknown&gt;"', **item)
...     for key in descriptions:
...         print '  %s: %s' % (key, descriptions[key] % item)
...     print
... 
{'player': 'PlayerA'}
  player_joined_clan: PlayerA joined clan "&lt;unknown&gt;"
  player_left: PlayerA left
  player_hit_player: PlayerA (of "&lt;unknown&gt;") hit "&lt;unknown&gt;" (of "&lt;unknown&gt;")

{'clan': 'ClanB', 'player': 'PlayerB'}
  player_joined_clan: PlayerB joined clan ClanB
  player_left: PlayerB left
  player_hit_player: PlayerB (of ClanB) hit "&lt;unknown&gt;" (of "&lt;unknown&gt;")

{'clan': 'ClanC'}
  player_joined_clan: "&lt;unknown&gt;" joined clan ClanC
  player_left: "&lt;unknown&gt;" left
  player_hit_player: "&lt;unknown&gt;" (of ClanC) hit "&lt;unknown&gt;" (of "&lt;unknown&gt;")

{'clan': 'ClanDA', 'player2': 'PlayerDB'}
  player_joined_clan: "&lt;unknown&gt;" joined clan ClanDA
  player_left: "&lt;unknown&gt;" left
  player_hit_player: "&lt;unknown&gt;" (of ClanDA) hit PlayerDB (of "&lt;unknown&gt;")
</snippet></ROW><ROW><id>3784101</id><snippet>class my_defaultdict(collections.defaultdict):
    def __missing__(self, key):
        return '&lt;unknown %s&gt;' % key
</snippet></ROW><ROW><id>3784101</id><snippet>#item = collections.defaultdict(lambda : '"&lt;unknown&gt;"', **item)
item = my_defaultdict(**item)
</snippet></ROW><ROW><id>3784101</id><snippet>{'player': 'PlayerA'}
  player_joined_clan: PlayerA joined clan &lt;unknown clan&gt;
  player_left: PlayerA left
  player_hit_player: PlayerA (of &lt;unknown clan&gt;) hit &lt;unknown player2&gt; (of &lt;unknown clan2&gt;)

{'clan': 'ClanB', 'player': 'PlayerB'}
  player_joined_clan: PlayerB joined clan ClanB
  player_left: PlayerB left
  player_hit_player: PlayerB (of ClanB) hit &lt;unknown player2&gt; (of &lt;unknown clan2&gt;)

{'clan': 'ClanC'}
  player_joined_clan: &lt;unknown player&gt; joined clan ClanC
  player_left: &lt;unknown player&gt; left
  player_hit_player: &lt;unknown player&gt; (of ClanC) hit &lt;unknown player2&gt; (of &lt;unknown clan2&gt;)

{'clan': 'ClanDA', 'player2': 'PlayerDB'}
  player_joined_clan: &lt;unknown player&gt; joined clan ClanDA
  player_left: &lt;unknown player&gt; left
  player_hit_player: &lt;unknown player&gt; (of ClanDA) hit PlayerDB (of &lt;unknown clan2&gt;)
</snippet></ROW><ROW><id>3784101</id><snippet>__missing__</snippet></ROW><ROW><id>3784101</id><snippet>dict</snippet></ROW><ROW><id>3784101</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>3784101</id><snippet>dict</snippet></ROW><ROW><id>3784101</id><snippet>class my_defaultdict(dict):
    def __missing__(self, key):
        return '&lt;unknown %s&gt;' % key
</snippet></ROW><ROW><id>3784196</id><snippet>os.system('php -f file.php')
</snippet></ROW><ROW><id>3784247</id><snippet>xlws</snippet></ROW><ROW><id>3784247</id><snippet>used = xlws.UsedRange
nrows = used.Row + used.Rows.Count - 1
</snippet></ROW><ROW><id>3784247</id><snippet>used.Row</snippet></ROW><ROW><id>3784247</id><snippet>used.Rows.Count</snippet></ROW><ROW><id>3784311</id><snippet>Include/longobject.h</snippet></ROW><ROW><id>3784311</id><snippet>Objects/longobject.h</snippet></ROW><ROW><id>3784311</id><snippet>global</snippet></ROW><ROW><id>3784406</id><snippet>from pprint import pprint

def getCurrentVariableState():
    pprint(locals())
    pprint(globals())
</snippet></ROW><ROW><id>3784472</id><snippet>float</snippet></ROW><ROW><id>3784472</id><snippet>60.0</snippet></ROW><ROW><id>3784472</id><snippet>60</snippet></ROW><ROW><id>3784472</id><snippet>factor = 60.0 / time_interval
</snippet></ROW><ROW><id>3784472</id><snippet>float(time_interval)</snippet></ROW><ROW><id>3784472</id><snippet>In [7]: x = 31

In [8]: 60 / x
Out[8]: 1

In [9]: 60.0 / x
Out[9]: 1.935483870967742
</snippet></ROW><ROW><id>3784870</id><snippet>jQuery</snippet></ROW><ROW><id>3784870</id><snippet>Prototype</snippet></ROW><ROW><id>3784870</id><snippet>&lt;html&gt;
&lt;head&gt;
 &lt;title&gt;Javascript example 1&lt;/title&gt;
 &lt;script type=”text/javascript” src=”http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js”&gt;&lt;/script&gt;
 &lt;script type="text/javascript"&gt;
  function doAjax() 
  {
    $.ajax({
      url: 'http://localhost:8000/test/',
      success: function(data) {
        $('#thediv').html(data); //jQuery equivalent of  document.getElementById('thediv').innerHTML = data
      }
    });
  }
 &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

 &lt;input type="button" value="click me" onClick="javascript:doAjax()"/&gt;
 &lt;br/&gt;&lt;br/&gt;

 &lt;div id="thediv"&gt;
  some test
 &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>3784870</id><snippet>$()</snippet></ROW><ROW><id>3784945</id><snippet>Popen.terminate()</snippet></ROW><ROW><id>3784945</id><snippet>p.terminate()
</snippet></ROW><ROW><id>3784945</id><snippet>os.kill()</snippet></ROW><ROW><id>3784945</id><snippet>os.kill(p.pid, signal.SIGTERM)
</snippet></ROW><ROW><id>3784945</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>3785364</id><snippet>"SELECT * FROM tbl_subscriber LIMIT %d,%d;" % (actualLimit,steps)
</snippet></ROW><ROW><id>3785364</id><snippet>c.execute("SELECT * FROM tbl_subscriber LIMIT %i,%i;", (actualLimit,steps))
</snippet></ROW><ROW><id>3785458</id><snippet>any</snippet></ROW><ROW><id>3785458</id><snippet>all</snippet></ROW><ROW><id>3785458</id><snippet>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False

def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
</snippet></ROW><ROW><id>3785458</id><snippet>deque</snippet></ROW><ROW><id>3785458</id><snippet>defaultdict</snippet></ROW><ROW><id>3785458</id><snippet>setdefault()</snippet></ROW><ROW><id>3785458</id><snippet>def addword(theIndex, word, pagenumber):
    theIndex.setdefault(word, [ ]).append(pagenumber)
</snippet></ROW><ROW><id>3785458</id><snippet>def addword(theIndex, word, pagenumber):
    if word in theIndex:
        theIndex[word].append(pagenumber)
    else:
        theIndex[word] = [pagenumber]
</snippet></ROW><ROW><id>3785458</id><snippet>def addword(theIndex, word, pagenumber):
    try:
        theIndex[word].append(pagenumber)
    except KeyError:
        theIndex[word] = [pagenumber]
</snippet></ROW><ROW><id>3785535</id><snippet>#!/usr/bin/env python
# a.py
import inspect

def foo():
    for item in inspect.stack():
        print item
</snippet></ROW><ROW><id>3785535</id><snippet>#!/usr/bin/env python
# b.py

from a import foo

foo()
</snippet></ROW><ROW><id>3785535</id><snippet>$ python b.py
(&lt;frame object at 0x2026fb0&gt;, '/home/tdb/a.py', 6, 'foo', ['    for item in inspect.stack():\n'], 0)
(&lt;frame object at 0x1fe4a30&gt;, 'b.py', 5, '&lt;module&gt;', ['foo()\n'], 0)
</snippet></ROW><ROW><id>3785871</id><snippet>$ ps -o pid,time,comm
  PID     TIME COMMAND
 3029 00:00:01 zsh
22046 00:00:00 ps
</snippet></ROW><ROW><id>3785871</id><snippet>$ ps -o pid,time,comm --no-headers
 3029 00:00:01 zsh
22046 00:00:00 ps
</snippet></ROW><ROW><id>3785871</id><snippet>(pid, time, cmd) = result.split(2)</snippet></ROW><ROW><id>3786332</id><snippet>gnome-terminal --tab -x bash -c "python server.py &amp; sleep 5; python client.py"
</snippet></ROW><ROW><id>3786332</id><snippet>-x, --execute
         Execute the remainder of the command line inside the terminal.
</snippet></ROW><ROW><id>3786332</id><snippet>bash -c "python server.py &amp; sleep 5; python client.py"
</snippet></ROW><ROW><id>3786332</id><snippet>-c string If  the  -c option is present, then commands are read from string.  If
         there are arguments after the string, they are assigned to  the  posi‐
         tional parameters, starting with $0.
</snippet></ROW><ROW><id>3786332</id><snippet>gnome-terminal --tab -e "python server.py &amp; sleep 5; python client.py"
</snippet></ROW><ROW><id>3786332</id><snippet>"socket.error: [Errno 98] Address already in use",
</snippet></ROW><ROW><id>3786391</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; et = etree.XML("""&lt;root xmlns="foo" xmlns:stuff="bar"&gt;&lt;bar&gt;&lt;stuff:baz /&gt;&lt;/bar&gt;&lt;/root&gt;""")
&gt;&gt;&gt; etree.tostring(et, encoding=str) # encoding=str only needed in Python 3, to avoid getting bytes
'&lt;root xmlns="foo" xmlns:stuff="bar"&gt;&lt;bar&gt;&lt;stuff:baz/&gt;&lt;/bar&gt;&lt;/root&gt;'
&gt;&gt;&gt; et.xpath("f:bar", namespaces={"b":"bar", "f": "foo"})
[&lt;Element {foo}bar at ...&gt;]
</snippet></ROW><ROW><id>3786391</id><snippet>from lxml import etree

# remove the b prefix in Python 2
# needed in python 3 because
# "Unicode strings with encoding declaration are not supported."
et = etree.XML(b"""...""")

ns = {
    'lom': 'http://ltsc.ieee.org/xsd/LOM',
    'zs': 'http://www.loc.gov/zing/srw/',
    'dc': 'http://purl.org/dc/elements/1.1/',
    'voc': 'http://www.schooletc.co.uk/vocabularies/',
    'srw_dc': 'info:srw/schema/1/dc-schema'
}

# according to docs, .xpath returns always lists when querying for elements
# .find returns one element, but only supports a subset of XPath
record = et.xpath("zs:records/zs:record", namespaces=ns)[0]
# in this example, we know there's only one record
# but else, you should apply the following to all elements the above returns

name = record.xpath("//voc:name", namespaces=ns)[0].text
print("name:", name)

lom_entry = record.xpath("zs:recordData/srw_dc:dc/"
                         "lom:metaMetadata/lom:identifier/"
                         "lom:entry",
                         namespaces=ns)[0].text

print('lom_entry:', lom_entry)

lom_ids = [id.text for id in
           record.xpath("zs:recordData/srw_dc:dc/"
                        "lom:classification/lom:taxonPath/"
                        "lom:taxon/lom:id",
                        namespaces=ns)]

print("lom_ids:", lom_ids)
</snippet></ROW><ROW><id>3786391</id><snippet>name: Frank Malina
lom_entry: 2.6
lom_ids: ['PYTHON', 'XML', 'XML-NAMESPACES']
</snippet></ROW><ROW><id>3786900</id><snippet>class C:
    def my_method(self):
        print "I am a C"

c = C()
c.my_method()  # Prints "I am a C"
</snippet></ROW><ROW><id>3786928</id><snippet>function go()
{
    cd $(python /path/to/cd.py "$1")
}
</snippet></ROW><ROW><id>3786928</id><snippet>#!/usr/bin/python
import sys
if sys.argv[1] == 'tdi': print '~/long/tedious/path/to/tdi'
elif sys.argv[1] == 'xyz':  print '~/long/tedious/path/to/xyz'
</snippet></ROW><ROW><id>3787025</id><snippet>class EntityBase(object):
    _entity_ = None
    _entities_ = {}

    @classmethod
    def factory(cls, entity):
        try:
            return cls._entities_[entity]
        except KeyError:
            raise FactoryError(tag, "Unknown entity")

    @classmethod
    def register(cls, entity):
        def decorator(subclass):
            cls._entities_[entity] = subclass
            subclass._entity_ = entity
            return subclass
        return decorator

 factory = EntityBase.factory
 register = EntityBase.register

 @register('Smith')
 class Smith(EntityBase):
     def __init__(self, a, b):
         self.a = a
         self.b = b

 s = factory('Smith')(1, 2)
</snippet></ROW><ROW><id>3787025</id><snippet>__entity__</snippet></ROW><ROW><id>3787025</id><snippet>EntityBase</snippet></ROW><ROW><id>3787025</id><snippet>Registry</snippet></ROW><ROW><id>3787025</id><snippet>factory = {}

class Smith(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
factory['Smith'] = Smith

class Jones(object):
    def __init__(self, c, d):
         self.c = c
         self.d = d
factory['Jones'] = Jones

s = factory['Smith'](1, 2)
j = factory['Jones'](3, 4)
</snippet></ROW><ROW><id>3787036</id><snippet> members = list(c.__dict__) # or c.__dict__.keys()
</snippet></ROW><ROW><id>3787649</id><snippet>operator</snippet></ROW><ROW><id>3787649</id><snippet>import operator
ScorePoint(60, operator.le)
</snippet></ROW><ROW><id>3787917</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>3787917</id><snippet>__future__</snippet></ROW><ROW><id>3787983</id><snippet>def all_same(items):
    return all(x == items[0] for x in items)
</snippet></ROW><ROW><id>3787983</id><snippet>&gt;&gt;&gt; def all_same(items):
...     return all(x == items[0] for x in items)
...
&gt;&gt;&gt; property_list = ["one", "one", "one"]
&gt;&gt;&gt; all_same(property_list)
True
&gt;&gt;&gt; property_list = ["one", "one", "two"]
&gt;&gt;&gt; all_same(property_list)
False
&gt;&gt;&gt; all_same([])
True
</snippet></ROW><ROW><id>3788243</id><snippet>try:
  thread=reqthread()
  thread.daemon=True
  thread.start()
  while True: time.sleep(100)
except (KeyboardInterrupt, SystemExit):
  print '\n! Received keyboard interrupt, quitting threads.\n'
</snippet></ROW><ROW><id>3788243</id><snippet>time.sleep</snippet></ROW><ROW><id>3788243</id><snippet>try...except</snippet></ROW><ROW><id>3788243</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>3788243</id><snippet>thread.join</snippet></ROW><ROW><id>3788243</id><snippet>thread</snippet></ROW><ROW><id>3788243</id><snippet>thread.daemon=True</snippet></ROW><ROW><id>3788383</id><snippet>with open("c:/achip.txt", "rU") as f:
  columns = f.readline().strip().split()
  sums = [0.0] * len(columns)
  row_counts = [0] * len(columns)

  for line in f:
    line = line.strip()
    if not line:
      continue

    for col, v in enumerate(line.split()):
      if v != "NA":
        sums[col] += int(v)
        row_counts[col] += 1

with open("c:/chipdone.txt", "w") as out:
  for name, sum, rows in zip(columns, sums, row_counts):
    print &gt;&gt;out, name,
    if rows == 0:
      print &gt;&gt;out, "NA"
    else:
      print &gt;&gt;out, sum / rows
</snippet></ROW><ROW><id>3788876</id><snippet># hard-coded input, could also readlines() from a file
lines = ["- Blah, Blah, and", 
         "  Blah, Blah, Blah,",
         "  Blah, Blah",
         "- Blah, Blah, and",
         "  Blah, Blah, Blah,",
         "  Blah, Blah"]

out = [(" " if line.startswith(" ") else "\n") + line.strip() for line in lines]
out = ''.join(out)[1:].split('\n')

print out
</snippet></ROW><ROW><id>3788973</id><snippet>parse_qs</snippet></ROW><ROW><id>3788973</id><snippet>urlparse</snippet></ROW><ROW><id>3788973</id><snippet>from urlparse import parse_qs
s = "/?parameter=value&amp;other=some"
print parse_qs(s[2:]) # prints {'other': ['some'], 'parameter': ['value']}
</snippet></ROW><ROW><id>3789047</id><snippet>Python 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from socket import *
&gt;&gt;&gt; s=socket()
&gt;&gt;&gt; s.connect(('localhost',5000))
&gt;&gt;&gt; f=s.makefile()
&gt;&gt;&gt; f.write('\x04abcd')
&gt;&gt;&gt; f.flush()
</snippet></ROW><ROW><id>3789047</id><snippet>Python 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from socket import *
&gt;&gt;&gt; s=socket()
&gt;&gt;&gt; s.bind(('localhost',5000))
&gt;&gt;&gt; s.listen(1)
&gt;&gt;&gt; c,a=s.accept()
&gt;&gt;&gt; f=c.makefile()
&gt;&gt;&gt; length=ord(f.read(1))
&gt;&gt;&gt; f.read(length)
'abcd'
</snippet></ROW><ROW><id>3789057</id><snippet>PyEnchant</snippet></ROW><ROW><id>3789057</id><snippet>&gt;&gt;&gt; import enchant
&gt;&gt;&gt; d = enchant.Dict("en_US")
&gt;&gt;&gt; d.check("Hello")
True
&gt;&gt;&gt; d.check("Helo")
False
&gt;&gt;&gt; d.suggest("Helo")
['He lo', 'He-lo', 'Hello', 'Helot', 'Help', 'Halo', 'Hell', 'Held', 'Helm', 'Hero', "He'll"]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3789057</id><snippet>PyEnchant</snippet></ROW><ROW><id>3789057</id><snippet>inflect</snippet></ROW><ROW><id>3789491</id><snippet>def getdict(struct):
    return dict((field, getattr(struct, field)) for field, _ in struct._fields_)

&gt;&gt;&gt; x = S1()
&gt;&gt;&gt; getdict(x)
{'A': &lt;__main__.c_ushort_Array_10 object at 0x100490680&gt;, 'C': 0L, 'B': 0L}
</snippet></ROW><ROW><id>3789491</id><snippet>def getdict(struct):
    result = {}
    for field, _ in struct._fields_:
         value = getattr(struct, field)
         if hasattr(value, "_length_") and hasattr(value, "_type_"):
             # Probably an array
             value = list(value)
         elif hasattr(value, "_fields_"):
             # Probably another struct
             value = getdict(value)
         result[field] = value
    return result
</snippet></ROW><ROW><id>3789654</id><snippet>from flask import Flask, redirect, request

app = Flask(__name__)

redirect_urls = {
    'http://example.com/old/': 'http://example.com/new/',
    ...
}

def redirect_url():
    return redirect(redirect_urls[request.url], 301)

for url in redirect_urls:
    app.add_url_rule(url, url, redirect_url)
</snippet></ROW><ROW><id>3790401</id><snippet>PyRun_String</snippet></ROW><ROW><id>3790862</id><snippet>list(your_iterator)
</snippet></ROW><ROW><id>3791196</id><snippet>WriteConsole</snippet></ROW><ROW><id>3791196</id><snippet>import os, sys, io, win32api, win32console, pywintypes

def change_file_encoding(f, encoding):
    """
    TextIOWrapper is missing a way to change the file encoding, so we have to
    do it by creating a new one.
    """

    errors = f.errors
    line_buffering = f.line_buffering
    # f.newlines is not the same as the newline parameter to TextIOWrapper.
    # newlines = f.newlines

    buf = f.detach()

    # TextIOWrapper defaults newline to \r\n on Windows, even though the underlying
    # file object is already doing that for us.  We need to explicitly say "\n" to
    # make sure we don't output \r\r\n; this is the same as the internal function
    # create_stdio.
    return io.TextIOWrapper(buf, encoding, errors, "\n", line_buffering)


class ConsoleFile:
    class FileNotConsole(Exception): pass

    def __init__(self, handle):
        handle = win32api.GetStdHandle(handle)
        self.screen = win32console.PyConsoleScreenBufferType(handle)
        try:
            self.screen.GetConsoleMode()
        except pywintypes.error as e:
            raise ConsoleFile.FileNotConsole

    def write(self, s):
        self.screen.WriteConsole(s)

    def close(self): pass
    def flush(self): pass
    def isatty(self): return True

    @staticmethod
    def wrap_standard_handles():
        sys.stdout.flush()
        try:
            # There seems to be no binding for _get_osfhandle.
            sys.stdout = ConsoleFile(win32api.STD_OUTPUT_HANDLE)
        except ConsoleFile.FileNotConsole:
            sys.stdout = change_file_encoding(sys.stdout, "utf-8")

        sys.stderr.flush()
        try:
            sys.stderr = ConsoleFile(win32api.STD_ERROR_HANDLE)
        except ConsoleFile.FileNotConsole:
            sys.stderr = change_file_encoding(sys.stderr, "utf-8")

ConsoleFile.wrap_standard_handles()

print("English 漢字 Кири́ллица")
</snippet></ROW><ROW><id>3791261</id><snippet>[50 if hasProperty(x) else 10 for x in alist]
</snippet></ROW><ROW><id>3791356</id><snippet>OverflowError</snippet></ROW><ROW><id>3791356</id><snippet>long</snippet></ROW><ROW><id>3791356</id><snippet>int</snippet></ROW><ROW><id>3791435</id><snippet>random.shuffle()</snippet></ROW><ROW><id>3791435</id><snippet>random.choice()</snippet></ROW><ROW><id>3791435</id><snippet>import random

# this will choose one and remove it
def choose_and_remove( items ):
    # pick an item index
    if items:
        index = random.randrange( len(items) )
        return items.pop(index)
    # nothing left!
    return None
</snippet></ROW><ROW><id>3791476</id><snippet>import subprocess as sub
p = sub.Popen('your command',stdout=sub.PIPE,stderr=sub.PIPE)
output, errors = p.communicate()
print output
</snippet></ROW><ROW><id>3791476</id><snippet>import os
p = os.popen('command',"r")
while 1:
    line = p.readline()
    if not line: break
    print line
</snippet></ROW><ROW><id>3791563</id><snippet>org.freedesktop.DBus.Properties</snippet></ROW><ROW><id>3791563</id><snippet># Untested, just off the top of my head

import dbus

MY_INTERFACE = 'com.example.Foo'

class Foo(dbus.service.object):
    # …

    @dbus.service.method(interface=dbus.PROPERTIES_IFACE,
                         in_signature='ss', out_signature='v')
    def Get(self, interface_name, property_name):
        return self.GetAll(interface_name)[property_name]

    @dbus.service.method(interface=dbus.PROPERTIES_IFACE,
                         in_signature='s', out_signature='a{sv}')
    def GetAll(self, interface_name):
        if interface_name == MY_INTERFACE:
            return { 'Blah': self.blah,
                     # …
                   }
        else:
            raise dbus.exceptions.DBusException(
                'com.example.UnknownInterface',
                'The Foo object does not implement the %s interface'
                    % interface_name)

    @dbus.service.method(interface=dbus.PROPERTIES_IFACE,
                         in_signature='ssv'):
    def Set(self, interface_name, property_name, new_value):
        # validate the property name and value, update internal state…
        self.PropertiesChanged(interface_name,
            { property_name: new_value }, [])

    @dbus.service.signal(interface=dbus.PROPERTIES_IFACE,
                         signature='sa{sv}as')
    def PropertiesChanged(self, interface_name, changed_properties,
                          invalidated_properties):
        pass
</snippet></ROW><ROW><id>3791717</id><snippet>&gt;&gt;&gt; class Foo(object): pass
... 
&gt;&gt;&gt; def func(self): pass
... 
&gt;&gt;&gt; Foo.func = func
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.func()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3791717</id><snippet>def</snippet></ROW><ROW><id>3791717</id><snippet>self</snippet></ROW><ROW><id>3791717</id><snippet>f.func</snippet></ROW><ROW><id>3791717</id><snippet>def</snippet></ROW><ROW><id>3791717</id><snippet>class</snippet></ROW><ROW><id>3791717</id><snippet>self</snippet></ROW><ROW><id>3791717</id><snippet>def</snippet></ROW><ROW><id>3791717</id><snippet>TypeError</snippet></ROW><ROW><id>3791717</id><snippet>def</snippet></ROW><ROW><id>3791873</id><snippet>#! /usr/bin/env python

import dbus
import dbus.mainloop.glib
import functools
import glib

class VlcFinder (object):
    def __init__ (self, mainloop):
        self.outstanding = 0
        self.mainloop = mainloop

        bus = dbus.SessionBus ()
        dbus_proxy = bus.get_object ("org.freedesktop.DBus", "/org/freedesktop/DBus")
        names = dbus_proxy.ListNames ()
        for name in dbus_proxy.ListNames ():
            if name.startswith (":"):
                proxy = bus.get_object (name, "/")
                iface = dbus.Interface (proxy, "org.freedesktop.MediaPlayer")
                iface.Identity (reply_handler = functools.partial (self.reply_cb, name),
                                error_handler = functools.partial (self.error_cb, name))
                self.outstanding += 1

    def reply_cb (self, name, ver):
        print "Found {0}: {1}".format (name, ver)
        self.received_result ()

    def error_cb (self, name, msg):
        self.received_result ()

    def received_result (self):
        self.outstanding -= 1
        if self.outstanding == 0:
            self.mainloop.quit ()

if __name__ == "__main__":
    dbus.mainloop.glib.DBusGMainLoop (set_as_default = True)
    mainloop = glib.MainLoop ()
    finder = VlcFinder (mainloop)
    mainloop.run ()
</snippet></ROW><ROW><id>3791902</id><snippet>def f():
  f = sys._getframe()
  i = f.f_lasti + 3   # capture current point of execution, advance to expected store
  print dis.disco(f.f_code, i)
</snippet></ROW><ROW><id>3792099</id><snippet>/proc/$PID/fd/0
</snippet></ROW><ROW><id>3792126</id><snippet>class MyForm(forms.Form):
    foo = forms.CharField(max_length=100)
</snippet></ROW><ROW><id>3792126</id><snippet>f = type(forms.Form)('MyForm', forms.Form, d)
</snippet></ROW><ROW><id>3792126</id><snippet>d</snippet></ROW><ROW><id>3792126</id><snippet>d = { 'foo': forms.CharField(max_length=100) }
</snippet></ROW><ROW><id>3792126</id><snippet>f</snippet></ROW><ROW><id>3792126</id><snippet>setattr</snippet></ROW><ROW><id>3792126</id><snippet>something.MyForm</snippet></ROW><ROW><id>3792126</id><snippet>something</snippet></ROW><ROW><id>3792126</id><snippet>MyForm</snippet></ROW><ROW><id>3792126</id><snippet>getattr</snippet></ROW><ROW><id>3792126</id><snippet>forms</snippet></ROW><ROW><id>3792126</id><snippet>fieldname</snippet></ROW><ROW><id>3792126</id><snippet>fieldtypename</snippet></ROW><ROW><id>3792126</id><snippet>fieldparameters</snippet></ROW><ROW><id>3792126</id><snippet>d</snippet></ROW><ROW><id>3792150</id><snippet>reread</snippet></ROW><ROW><id>3792150</id><snippet>update</snippet></ROW><ROW><id>3792223</id><snippet>__future__</snippet></ROW><ROW><id>3792223</id><snippet>&gt;&gt;&gt; from __future__ import with_statement
&gt;&gt;&gt; with_statement.getOptionalRelease()
(2, 5, 0, 'alpha', 1)
&gt;&gt;&gt; with_statement.getMandatoryRelease()
(2, 6, 0, 'alpha', 0)
</snippet></ROW><ROW><id>3792223</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>3792223</id><snippet>from __future__</snippet></ROW><ROW><id>3792223</id><snippet>&gt;&gt;&gt; import __future__
&gt;&gt;&gt; help(__future__)
</snippet></ROW><ROW><id>3792907</id><snippet>\-- setup.py
\-- README.txt
\--+ pants/
   \-- __init__.py
   \-- __main__.py
   ...
\--+ tests/
   \-- __init__.py
   ...
\--+ some_dependency_you_need/
   ...
</snippet></ROW><ROW><id>3793172</id><snippet>Scroll</snippet></ROW><ROW><id>3793172</id><snippet>htmlWindow</snippet></ROW><ROW><id>3793172</id><snippet>scrollBar</snippet></ROW><ROW><id>3793172</id><snippet>yourHtmlWindow.Scroll(-1, self.GetClientSize()[0])
</snippet></ROW><ROW><id>3793172</id><snippet>Bind</snippet></ROW><ROW><id>3793172</id><snippet>wx.EVT_SIZE</snippet></ROW><ROW><id>3793172</id><snippet>Scroll</snippet></ROW><ROW><id>3793172</id><snippet>def onSize(self, event):
    event.Skip()
    wx.CallAfter(yourHtmlWindow.Scroll, -1, self.GetClientSize()[0])
</snippet></ROW><ROW><id>3793208</id><snippet>import itertools
</snippet></ROW><ROW><id>3793208</id><snippet>itertools.&lt;funcname&gt;</snippet></ROW><ROW><id>3793208</id><snippet>import itertools as it</snippet></ROW><ROW><id>3793208</id><snippet>it.&lt;funcname&gt;</snippet></ROW><ROW><id>3793208</id><snippet>from itertools import islice, count, chain
</snippet></ROW><ROW><id>3793208</id><snippet>from itertools import *
</snippet></ROW><ROW><id>3793208</id><snippet>itertools</snippet></ROW><ROW><id>3793208</id><snippet>recipes.py</snippet></ROW><ROW><id>3793208</id><snippet>import recipes
recipes.take(...)
</snippet></ROW><ROW><id>3793208</id><snippet>from recipes import take
take(...)
</snippet></ROW><ROW><id>3794429</id><snippet>.pyc</snippet></ROW><ROW><id>3794429</id><snippet>.pyc</snippet></ROW><ROW><id>3794505</id><snippet>import Tkinter as tk
import ttk

class App:
    def __init__(self):
        self.root = tk.Tk()
        self.tree = ttk.Treeview()
        self.tree.pack()
        for i in range(10):
            self.tree.insert("", "end", text="Item %s" % i)
        self.tree.bind("&lt;Double-1&gt;", self.OnDoubleClick)
        self.root.mainloop()

    def OnDoubleClick(self, event):
        item = self.tree.selection()[0]
        print "you clicked on", self.tree.item(item,"text")

if __name__ == "__main__":
    app=App()
</snippet></ROW><ROW><id>3794660</id><snippet>x = 23</snippet></ROW><ROW><id>3794660</id><snippet>x</snippet></ROW><ROW><id>3794660</id><snippet>def</snippet></ROW><ROW><id>3794660</id><snippet>exec ''</snippet></ROW><ROW><id>3794660</id><snippet>exec thecode in thelocals, theglobals</snippet></ROW><ROW><id>3794660</id><snippet>inspect</snippet></ROW><ROW><id>3795048</id><snippet># bmi = &lt;whatever&gt;
found_bmi_range = [bmi_range for bmi_range
                   in bmi_ranges
                   if bmi_ranges[2] &lt;= bmi &lt;= bmi_ranges[3]
                  ][0]
</snippet></ROW><ROW><id>3795048</id><snippet>if</snippet></ROW><ROW><id>3795048</id><snippet>a &lt;= b &lt; c</snippet></ROW><ROW><id>3795062</id><snippet>class C:
    def func(self):
        #do something
</snippet></ROW><ROW><id>3795062</id><snippet>from myClass import *
def changeFunc():
    A = C()
    A.func = lambda : "I like pi"
    return A

if __name__ == "importer":
    A = changeFunc()
</snippet></ROW><ROW><id>3795062</id><snippet>from importer import *
print A.func()
</snippet></ROW><ROW><id>3795354</id><snippet>class A(object):
    def __init__(self):
        pass

    def method1(self):
        "This is method1 of class A"
        pass

a = A()
help(a)

def method2(self):
    """ Method 2 still not associated"""
    pass

A.method2 = method2 
# if you did a.method2 = method2
# Then it won't show up in the help() statement below

help(a)
</snippet></ROW><ROW><id>3795410</id><snippet>conn.connect(wait=True, header = {'client-id': 'myhostname' })
</snippet></ROW><ROW><id>3795750</id><snippet>def uuid1(node=None, clock_seq=None):
    ...
    nanoseconds = int(time.time() * 1e9)
    # 0x01b21dd213814000 is the number of 100-ns intervals between the
    # UUID epoch 1582-10-15 00:00:00 and the Unix epoch 1970-01-01 00:00:00.
    timestamp = int(nanoseconds/100) + 0x01b21dd213814000L
</snippet></ROW><ROW><id>3795750</id><snippet>time.time()-like quantity = ((timestamp - 0x01b21dd213814000L)*100/1e9)
</snippet></ROW><ROW><id>3795750</id><snippet>In [3]: import uuid

In [4]: u=uuid.uuid1()

In [58]: datetime.datetime.fromtimestamp((u.time - 0x01b21dd213814000L)*100/1e9)
Out[58]: datetime.datetime(2010, 9, 25, 17, 43, 6, 298623)
</snippet></ROW><ROW><id>3795750</id><snippet>uuid.uuid1</snippet></ROW><ROW><id>3795959</id><snippet>:</snippet></ROW><ROW><id>3795959</id><snippet>def</snippet></ROW><ROW><id>3795959</id><snippet>def findfreq(nltktext, atitem):
    fdistscan = FreqDist(nltktext)
    distlist = fdistscan.keys()
    return distlist[:atitem]
</snippet></ROW><ROW><id>3795959</id><snippet>def FuncName(Args):
    # code
</snippet></ROW><ROW><id>3795979</id><snippet>sudo</snippet></ROW><ROW><id>3795979</id><snippet>sudo</snippet></ROW><ROW><id>3795979</id><snippet>/dev/null</snippet></ROW><ROW><id>3795979</id><snippet>chmod +x whatever.py</snippet></ROW><ROW><id>3795979</id><snippet>#!
/usr/bin/python</snippet></ROW><ROW><id>3795979</id><snippet>python whatever.py</snippet></ROW><ROW><id>3795979</id><snippet>whatever.py</snippet></ROW><ROW><id>3795979</id><snippet>python</snippet></ROW><ROW><id>3795992</id><snippet>domain</snippet></ROW><ROW><id>3795992</id><snippet>anonymous</snippet></ROW><ROW><id>3797224</id><snippet>def samePoint(p, q):
    return (p.cartesian == q.cartesian)
</snippet></ROW><ROW><id>3797224</id><snippet>def samePoint(p, q):
    return (p.cartesian() == q.cartesian())
</snippet></ROW><ROW><id>3797589</id><snippet>def power_two(n):
    return int(math.log(n, 2))
</snippet></ROW><ROW><id>3797684</id><snippet>gc.garbage</snippet></ROW><ROW><id>3797684</id><snippet>__del__</snippet></ROW><ROW><id>3797684</id><snippet>gc</snippet></ROW><ROW><id>3797684</id><snippet>generation</snippet></ROW><ROW><id>3797858</id><snippet>@register.filter
def filter_by_user(queryset, user):
    """Filter the queryset by (currently logged in) user"""
    return queryset.filter(added_by = user)
</snippet></ROW><ROW><id>3797858</id><snippet>&lt;td&gt;{{ book.rating_set.all|filter_by_user:user|safeseq|join:", " }}&lt;/td&gt;
</snippet></ROW><ROW><id>3798182</id><snippet>br.form['prodclass'] = ['1']
</snippet></ROW><ROW><id>3798182</id><snippet>br.form.set_value(['1'],name='prodclass')
</snippet></ROW><ROW><id>3798199</id><snippet>python -u MyLongRunngingScript.py | tee log.txt
</snippet></ROW><ROW><id>3798242</id><snippet>&gt;&gt;&gt; ug = UG('Dylan', 'Bob')
&gt;&gt;&gt; UG.say(person, 'but i like')


UG.say(person, 'bla')
</snippet></ROW><ROW><id>3798242</id><snippet>&gt;&gt;&gt; ug = UG('Dylan', 'Bob')
&gt;&gt;&gt; ug.say(person, 'but i like')
</snippet></ROW><ROW><id>3798311</id><snippet>www.python.org</snippet></ROW><ROW><id>3798311</id><snippet>path</snippet></ROW><ROW><id>3798311</id><snippet>netloc</snippet></ROW><ROW><id>3798311</id><snippet>scheme</snippet></ROW><ROW><id>3798311</id><snippet>urlparse</snippet></ROW><ROW><id>3798311</id><snippet>if not netloc:
    netloc, path = path, ''
</snippet></ROW><ROW><id>3798468</id><snippet>#</snippet></ROW><ROW><id>3798468</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>3798468</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>my_obj.a.b.c.d</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>AttributeError</snippet></ROW><ROW><id>3798595</id><snippet>None</snippet></ROW><ROW><id>3798595</id><snippet>KeyError</snippet></ROW><ROW><id>3798595</id><snippet>None</snippet></ROW><ROW><id>3798595</id><snippet>None</snippet></ROW><ROW><id>3798595</id><snippet>None</snippet></ROW><ROW><id>3798595</id><snippet>dotdictify</snippet></ROW><ROW><id>3798595</id><snippet>marker</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>def __getitem__(self, key):
    return self[key]
</snippet></ROW><ROW><id>3798595</id><snippet>dict</snippet></ROW><ROW><id>3798595</id><snippet>__getattr__</snippet></ROW><ROW><id>3798595</id><snippet>__setattr__</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>__getattr__ = dict.__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>dotdictify</snippet></ROW><ROW><id>3798595</id><snippet>def __getitem__(self, key):
    if key not in self:
        dict.__setitem__(self, key, dotdictify())
    return dict.__getitem__(self, key)
</snippet></ROW><ROW><id>3798595</id><snippet>marker</snippet></ROW><ROW><id>3798595</id><snippet>dotdictify</snippet></ROW><ROW><id>3798595</id><snippet>get()</snippet></ROW><ROW><id>3798595</id><snippet>set()</snippet></ROW><ROW><id>3798595</id><snippet>dict</snippet></ROW><ROW><id>3798595</id><snippet>get()</snippet></ROW><ROW><id>3798595</id><snippet>set</snippet></ROW><ROW><id>3798595</id><snippet>setdefault()</snippet></ROW><ROW><id>3798595</id><snippet>get()</snippet></ROW><ROW><id>3798595</id><snippet>get</snippet></ROW><ROW><id>3798595</id><snippet>__getitem__</snippet></ROW><ROW><id>3798595</id><snippet>__setitem__</snippet></ROW><ROW><id>3798595</id><snippet>doctictify</snippet></ROW><ROW><id>3798595</id><snippet>class dotdictify(dict):
    def __init__(self, value=None):
        if value is None:
            pass
        elif isinstance(value, dict):
            for key in value:
                self.__setitem__(key, value[key])
        else:
            raise TypeError, 'expected dict'

    def __setitem__(self, key, value):
        if '.' in key:
            myKey, restOfKey = key.split('.', 1)
            target = self.setdefault(myKey, dotdictify())
            if not isinstance(target, dotdictify):
                raise KeyError, 'cannot set "%s" in "%s" (%s)' % (restOfKey, myKey, repr(target))
            target[restOfKey] = value
        else:
            if isinstance(value, dict) and not isinstance(value, dotdictify):
                value = dotdictify(value)
            dict.__setitem__(self, key, value)

    def __getitem__(self, key):
        if '.' not in key:
            return dict.__getitem__(self, key)
        myKey, restOfKey = key.split('.', 1)
        target = dict.__getitem__(self, myKey)
        if not isinstance(target, dotdictify):
            raise KeyError, 'cannot get "%s" in "%s" (%s)' % (restOfKey, myKey, repr(target))
        return target[restOfKey]

    def __contains__(self, key):
        if '.' not in key:
            return dict.__contains__(self, key)
        myKey, restOfKey = key.split('.', 1)
        target = dict.__getitem__(self, myKey)
        if not isinstance(target, dotdictify):
            return False
        return restOfKey in target

    def setdefault(self, key, default):
        if key not in self:
            self[key] = default
        return self[key]

    __setattr__ = __setitem__
    __getattr__ = __getitem__
</snippet></ROW><ROW><id>3798595</id><snippet>&gt;&gt;&gt; life = dotdictify({'bigBang': {'stars': {'planets': {}}}})
&gt;&gt;&gt; life.bigBang.stars.planets
{}
&gt;&gt;&gt; life.bigBang.stars.planets.earth = { 'singleCellLife' : {} }
&gt;&gt;&gt; life.bigBang.stars.planets
{'earth': {'singleCellLife': {}}}
&gt;&gt;&gt; life['bigBang.stars.planets.mars.landers.vikings'] = 2
&gt;&gt;&gt; life.bigBang.stars.planets.mars.landers.vikings
2
&gt;&gt;&gt; 'landers.vikings' in life.bigBang.stars.planets.mars
True
&gt;&gt;&gt; life.get('bigBang.stars.planets.mars.landers.spirit', True)
True
&gt;&gt;&gt; life.setdefault('bigBang.stars.planets.mars.landers.opportunity', True)
True
&gt;&gt;&gt; 'landers.opportunity' in life.bigBang.stars.planets.mars
True
&gt;&gt;&gt; life.bigBang.stars.planets.mars
{'landers': {'opportunity': True, 'vikings': 2}}
</snippet></ROW><ROW><id>3798634</id><snippet>field_type = {
 0: 'DECIMAL',
 1: 'TINY',
 2: 'SHORT',
 3: 'LONG',
 4: 'FLOAT',
 5: 'DOUBLE',
 6: 'NULL',
 7: 'TIMESTAMP',
 8: 'LONGLONG',
 9: 'INT24',
 10: 'DATE',
 11: 'TIME',
 12: 'DATETIME',
 13: 'YEAR',
 14: 'NEWDATE',
 15: 'VARCHAR',
 16: 'BIT',
 246: 'NEWDECIMAL',
 247: 'INTERVAL',
 248: 'SET',
 249: 'TINY_BLOB',
 250: 'MEDIUM_BLOB',
 251: 'LONG_BLOB',
 252: 'BLOB',
 253: 'VAR_STRING',
 254: 'STRING',
 255: 'GEOMETRY' }
</snippet></ROW><ROW><id>3798790</id><snippet>list( '...' )</snippet></ROW><ROW><id>3798790</id><snippet>u'...'</snippet></ROW><ROW><id>3798790</id><snippet>list( 'abc大def' )</snippet></ROW><ROW><id>3798790</id><snippet>list( 'abc\u5927\U00027C3Cdef' )</snippet></ROW><ROW><id>3798790</id><snippet>['a', 'b', 'c', '大', '\ud85f', '\udc3c', 'd', 'e', 'f']</snippet></ROW><ROW><id>3798790</id><snippet>'\ud85f', '\udc3c'</snippet></ROW><ROW><id>3798790</id><snippet>'\ud85f\udc3c'</snippet></ROW><ROW><id>3798790</id><snippet>U-27C3C</snippet></ROW><ROW><id>3798790</id><snippet>from re import compile as _Re

_unicode_chr_splitter = _Re( '(?s)((?:[\ud800-\udbff][\udc00-\udfff])|.)' ).split

def split_unicode_chrs( text ):
  return [ chr for chr in _unicode_chr_splitter( text ) if chr ]
</snippet></ROW><ROW><id>3798790</id><snippet>['a', 'b', 'c', '大', '', 'd', 'e', 'f']</snippet></ROW><ROW><id>3798790</id><snippet>'yes the United Nations can!'.split()</snippet></ROW><ROW><id>3798790</id><snippet>United Nations</snippet></ROW><ROW><id>3798790</id><snippet>can!</snippet></ROW><ROW><id>3798865</id><snippet>in_the_past</snippet></ROW><ROW><id>3798865</id><snippet>from datetime import date

@property
def is_past_due(self):
    if date.today() &gt; self.date:
        return True
    return False
</snippet></ROW><ROW><id>3798865</id><snippet>{% if listing.is_past_due %}
    In the past
{% else %}
    {{ listing.date|date:"d M Y" }}
{% endif %}
</snippet></ROW><ROW><id>3798882</id><snippet>property</snippet></ROW><ROW><id>3798882</id><snippet>__get__</snippet></ROW><ROW><id>3798882</id><snippet>__set__</snippet></ROW><ROW><id>3798882</id><snippet>temp=Temperature()
temp.celsius #calls Celsius.__get__
</snippet></ROW><ROW><id>3798882</id><snippet>instance</snippet></ROW><ROW><id>3798882</id><snippet>__get__</snippet></ROW><ROW><id>3798882</id><snippet>__get__</snippet></ROW><ROW><id>3798882</id><snippet>temp</snippet></ROW><ROW><id>3798882</id><snippet>owner</snippet></ROW><ROW><id>3798882</id><snippet>Temperature</snippet></ROW><ROW><id>3798882</id><snippet>Temperature.celsius</snippet></ROW><ROW><id>3798882</id><snippet>instance</snippet></ROW><ROW><id>3798882</id><snippet>None</snippet></ROW><ROW><id>3799445</id><snippet>watch</snippet></ROW><ROW><id>3799445</id><snippet>watch</snippet></ROW><ROW><id>3799445</id><snippet>curses</snippet></ROW><ROW><id>3799445</id><snippet>print "\x1b[H\x1b[2J",
print "hello clear world"
</snippet></ROW><ROW><id>3799609</id><snippet>sys.modules</snippet></ROW><ROW><id>3800226</id><snippet>for file in files:
    fname = os.path.join(dir, file)
    inFile = codecs.open(fname, "r", "utf-8")
    outFile = codecs.open(fname + ".new", "w", "utf-8")
    for line in inFile:
        newline = do_replacements_on(line)
        outFile.write(newline)
    inFile.close()
    outFile.close()
    os.rename(fname + ".new", fname)
</snippet></ROW><ROW><id>3800226</id><snippet>inFile.read(blocksize)</snippet></ROW><ROW><id>3800226</id><snippet>translate</snippet></ROW><ROW><id>3800226</id><snippet>&gt;&gt;&gt; u"\xff and \ubd23".translate({0xff: u"255", 0xbd23: u"something else"})
u'255 and something else'
</snippet></ROW><ROW><id>3800226</id><snippet>re</snippet></ROW><ROW><id>3800226</id><snippet>re.sub</snippet></ROW><ROW><id>3800226</id><snippet>sub</snippet></ROW><ROW><id>3800226</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; d = {u'spam': u'spam, ham, spam and eggs', u'eggs': u'saussages'}
&gt;&gt;&gt; p = re.compile("|".join(re.escape(k) for k in d))
&gt;&gt;&gt; def repl(m):
...     return d[m.group(0)]
...
&gt;&gt;&gt; p.sub(repl, u"spam, vikings, eggs and vikings")
u'spam, ham, spam and eggs, vikings, saussages and vikings'
</snippet></ROW><ROW><id>3800233</id><snippet>iter_delim_sets</snippet></ROW><ROW><id>3800233</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>3800233</id><snippet>DelimLocations</snippet></ROW><ROW><id>3800233</id><snippet>analyze</snippet></ROW><ROW><id>3800233</id><snippet>DelimAnalysis</snippet></ROW><ROW><id>3800233</id><snippet>namedtuple</snippet></ROW><ROW><id>3800233</id><snippet>"""Compare two sequences of strings.

Test data:
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; delimiter = '||'
&gt;&gt;&gt; expected = (
...     delimiter.join(("one", "fish", "two", "fish")),
...     delimiter.join(("red", "fish", "blue", "fish")),
...     delimiter.join(("I do not like them", "Sam I am")),
...     delimiter.join(("I do not like green eggs and ham.",)))
&gt;&gt;&gt; actual = (
...     delimiter.join(("red", "fish", "blue", "fish")),
...     delimiter.join(("one", "fish", "two", "fish")),
...     delimiter.join(("I do not like spam", "Sam I am")),
...     delimiter.join(("I do not like", "green eggs and ham.")))

The results:
&gt;&gt;&gt; pprint([analyze(v) for v in iter_delim_sets(delimiter, expected, actual)])
[DelimAnalysis(index=0, correct=2, incorrect=1, count_diff=0),
 DelimAnalysis(index=1, correct=2, incorrect=1, count_diff=0),
 DelimAnalysis(index=2, correct=1, incorrect=0, count_diff=0),
 DelimAnalysis(index=3, correct=0, incorrect=1, count_diff=1)]

What they mean:
&gt;&gt;&gt; pprint(delim_analysis_doc)
(('index',
  ('The number of the lines from expected and actual',
   'used to perform this analysis.')),
 ('correct',
  ('The number of delimiter placements in ``actual``',
   'which were correctly placed.')),
 ('incorrect', ('The number of incorrect delimiters in ``actual``.',)),
 ('count_diff',
  ('The difference between the number of delimiters',
   'in ``expected`` and ``actual`` for this line.')))

And a trace of the processing stages:
&gt;&gt;&gt; def dump_it(it):
...     '''Wraps an iterator in code that dumps its values to stdout.'''
...     for v in it:
...         print v
...         yield v

&gt;&gt;&gt; for v in iter_delim_sets(delimiter,
...                          dump_it(expected), dump_it(actual)):
...     print v
...     print analyze(v)
...     print '======'
one||fish||two||fish
red||fish||blue||fish
DelimLocations(index=0, expected=set([9, 3, 14]), actual=set([9, 3, 15]))
DelimAnalysis(index=0, correct=2, incorrect=1, count_diff=0)
======
red||fish||blue||fish
one||fish||two||fish
DelimLocations(index=1, expected=set([9, 3, 15]), actual=set([9, 3, 14]))
DelimAnalysis(index=1, correct=2, incorrect=1, count_diff=0)
======
I do not like them||Sam I am
I do not like spam||Sam I am
DelimLocations(index=2, expected=set([18]), actual=set([18]))
DelimAnalysis(index=2, correct=1, incorrect=0, count_diff=0)
======
I do not like green eggs and ham.
I do not like||green eggs and ham.
DelimLocations(index=3, expected=set([]), actual=set([13]))
DelimAnalysis(index=3, correct=0, incorrect=1, count_diff=1)
======
"""
from collections import namedtuple


# Data types

## Here ``expected`` and ``actual`` are sets
DelimLocations = namedtuple('DelimLocations', 'index expected actual')

DelimAnalysis = namedtuple('DelimAnalysis',
                           'index correct incorrect count_diff')
## Explanation of the elements of DelimAnalysis.
## There's no real convenient way to add a docstring to a variable.
delim_analysis_doc = (
    ('index', ("The number of the lines from expected and actual",
               "used to perform this analysis.")),
    ('correct', ("The number of delimiter placements in ``actual``",
                 "which were correctly placed.")),
    ('incorrect', ("The number of incorrect delimiters in ``actual``.",)),
    ('count_diff', ("The difference between the number of delimiters",
                    "in ``expected`` and ``actual`` for this line.")))


# Actual functionality

def iter_delim_sets(delimiter, expected, actual):
    """Yields a DelimLocations tuple for each pair of strings.

    ``expected`` and ``actual`` are sequences of strings.
    """
    from re import escape, compile as compile_
    from itertools import count, izip
    index = count()

    re = compile_(escape(delimiter))
    def delimiter_locations(string):
        """Set of the locations of matches of ``re`` in ``string``."""
        return set(match.start() for match in re.finditer(string))

    string_pairs = izip(expected, actual)

    return (DelimLocations(index=index.next(),
                           expected=delimiter_locations(e),
                           actual=delimiter_locations(a))
            for e, a in string_pairs)

def analyze(locations):
    """Returns an analysis of a DelimLocations tuple.

    ``locations.expected`` and ``locations.actual`` are sets.
    """
    return DelimAnalysis(
        index=locations.index,
        correct=len(locations.expected &amp; locations.actual),
        incorrect=len(locations.actual - locations.expected),
        count_diff=(len(locations.actual) - len(locations.expected)))
</snippet></ROW><ROW><id>3800637</id><snippet>dict(_fields_)</snippet></ROW><ROW><id>3800637</id><snippet>somedict.items()</snippet></ROW><ROW><id>3800637</id><snippet>list(somedict.items())</snippet></ROW><ROW><id>3800862</id><snippet>raw_input()</snippet></ROW><ROW><id>3800862</id><snippet>input()</snippet></ROW><ROW><id>3800862</id><snippet>&gt;&gt;&gt; x = input()
"hello"
&gt;&gt;&gt; y = input()
x + " world"
&gt;&gt;&gt; y
'hello world'
</snippet></ROW><ROW><id>3800862</id><snippet>input</snippet></ROW><ROW><id>3800862</id><snippet>raw_input</snippet></ROW><ROW><id>3800862</id><snippet>input</snippet></ROW><ROW><id>3800862</id><snippet>compile</snippet></ROW><ROW><id>3800862</id><snippet>eval</snippet></ROW><ROW><id>3800862</id><snippet>python2.x                    python3.x

raw_input()   --------------&gt; input()               
input()  -------------------&gt; eval(input())     
</snippet></ROW><ROW><id>3800862</id><snippet>&gt;&gt;&gt; x = eval(input())
'hello'
&gt;&gt;&gt; y = eval(input())
x + ' world'
&gt;&gt;&gt; y
'hello world'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3801433</id><snippet>django.test.TestCase</snippet></ROW><ROW><id>3801433</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>3801433</id><snippet>fixtures = [...]</snippet></ROW><ROW><id>3801590</id><snippet>a+b</snippet></ROW><ROW><id>3801590</id><snippet>b</snippet></ROW><ROW><id>3801590</id><snippet>a</snippet></ROW><ROW><id>3801590</id><snippet>import timeit
x = "re.search('a+b', s)"
print timeit.timeit(x, "import re;s='a'*10000", number=10)
print timeit.timeit(x, "import re;s='b'*10000", number=10)
</snippet></ROW><ROW><id>3801590</id><snippet>6.85791902323
0.00795443275612
</snippet></ROW><ROW><id>3801846</id><snippet># -*- coding: utf-8 -*-
import re
def group_words(s):
    regex = []

    # Match a whole word:
    regex += [ur'\w+']

    # Match a single CJK character:
    regex += [ur'[\u4e00-\ufaff]']

    # Match one of anything else, except for spaces:
    regex += [ur'[^\s]']

    regex = "|".join(regex)
    r = re.compile(regex)

    return r.findall(s)

if __name__ == "__main__":
    print group_words(u"Testing English text")
    print group_words(u"我爱蟒蛇")
    print group_words(u"Testing English text我爱蟒蛇")
</snippet></ROW><ROW><id>3801849</id><snippet>&gt;&gt;&gt; HOST = 'localhost'
&gt;&gt;&gt; PORT = 50007 
&gt;&gt;&gt; res = socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_DGRAM, 0, socket.AI_PASSIVE)
&gt;&gt;&gt; family, socktype, proto, canonname, sockaddr = res[1]
&gt;&gt;&gt; proto
17
&gt;&gt;&gt; sockaddr
('fe80::1%lo0', 50007, 0, 1)
</snippet></ROW><ROW><id>3801849</id><snippet>socket( [family[, type[, proto]]])
</snippet></ROW><ROW><id>3801849</id><snippet>Create a new socket using the given address family, 
socket type and protocol number. The address family 
should be AF_INET (the default), AF_INET6 or AF_UNIX. 
The socket type should be SOCK_STREAM (the default), 
SOCK_DGRAM or perhaps one of the other "SOCK_" constants. 
The protocol number is usually zero and may be omitted in that case.
</snippet></ROW><ROW><id>3802035</id><snippet> user_to_resource:i = user:j                   # key -&gt; value forward map
 resources =&gt; (resource:i, created_timestamp)  # sorted set
 count_resource:i = quantity                   # key -&gt; value quantity map
</snippet></ROW><ROW><id>3802418</id><snippet>_</snippet></ROW><ROW><id>3802418</id><snippet>(path, _) = self._treeView.get_cursor()
</snippet></ROW><ROW><id>3802418</id><snippet>def get_selected_index(self):
    return self._treeView.get_cursor()[0][0]
</snippet></ROW><ROW><id>3802491</id><snippet>[ _]</snippet></ROW><ROW><id>3802491</id><snippet>import glob
glob.glob('/some/path_to/directory_1/and_to/directory_2'.replace('_', '[ _]'))
</snippet></ROW><ROW><id>3802491</id><snippet>[</snippet></ROW><ROW><id>3802491</id><snippet>[</snippet></ROW><ROW><id>3802491</id><snippet>[[]</snippet></ROW><ROW><id>3802678</id><snippet>[i * j for j, i in enumerate(S)]
</snippet></ROW><ROW><id>3802678</id><snippet>++</snippet></ROW><ROW><id>3802678</id><snippet>[(i + 40) * i for i in xrange(60)]
</snippet></ROW><ROW><id>3802678</id><snippet>[i * j for i, j in enumerate(xrange(60), start=40)]
</snippet></ROW><ROW><id>3802678</id><snippet>[i * j for i, j in zip(xrange(40, 100), xrange(60))]
</snippet></ROW><ROW><id>3802678</id><snippet>((i + 40) * i for i in xrange(60))
</snippet></ROW><ROW><id>3802678</id><snippet>sum</snippet></ROW><ROW><id>3802678</id><snippet>max</snippet></ROW><ROW><id>3802678</id><snippet>min</snippet></ROW><ROW><id>3802769</id><snippet>tuple(map(lambda (x, y): x + y, zip((0,-1,7), (3,4,-7))))
</snippet></ROW><ROW><id>3802769</id><snippet>map</snippet></ROW><ROW><id>3802769</id><snippet>lambda</snippet></ROW><ROW><id>3802769</id><snippet>tuple(x + y for x,y in zip((0,-1,7), (3,4,-7)))
</snippet></ROW><ROW><id>3802769</id><snippet>zip</snippet></ROW><ROW><id>3802769</id><snippet>tuple(sum(t) for t in zip((0,-1,7), (3,4,-7)))
</snippet></ROW><ROW><id>3802769</id><snippet>zip</snippet></ROW><ROW><id>3802769</id><snippet>map</snippet></ROW><ROW><id>3802769</id><snippet>sum</snippet></ROW><ROW><id>3802947</id><snippet>#include &lt;QtGui/QApplication&gt;
#include &lt;QtGui/QPushButton&gt;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QWidget w;
    QPushButton* button = new QPushButton("i am toggleable", &amp;w);
    button-&gt;setFixedSize(200,32);
    button-&gt;setCheckable(true);
    button-&gt;setStyleSheet(
    "QPushButton { \
        background: rgb(75, 75, 75);\
        color: rgb(255, 255, 255);\
        text-align: left;\
        font-size: 12pt;\
        border: none;\
    }\
        QPushButton:checked {\
        background: rgb(105, 105, 105);\
    }\
    ");
    w.show();
    return a.exec();
}
</snippet></ROW><ROW><id>3802947</id><snippet>setFlat(True)</snippet></ROW><ROW><id>3803285</id><snippet>for</snippet></ROW><ROW><id>3803285</id><snippet>for j in range(0,len(furs[i]))</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>[ rids[i][j][0]['a'] * rids[i][j][1]['b']  for i in range(0,10) ]</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>j</snippet></ROW><ROW><id>3803285</id><snippet>&gt;&gt;&gt; [ [ i * j  for i in range(0,10) ] for j in range(0, i) ]

Traceback (most recent call last):
  File "&lt;pyshell#35&gt;", line 1, in &lt;module&gt;
    [ [ i * j  for i in range(0,10) ] for j in range(0, i) ]
NameError: name 'i' is not defined
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>j</snippet></ROW><ROW><id>3803285</id><snippet>&gt;&gt;&gt; [ i * j   for i in range(0,10)  for j in range(0, i) ]
[0, 0, 2, 0, 3, 6, 0, 4, 8, 12, 0, 5, 10, 15, 20, 0, 6, 12, 18, 24, 
 30, 0, 7, 14, 21, 28, 35, 42, 0, 8, 16, 24, 32, 40, 48, 56, 0, 9, 
 18, 27, 36, 45, 54, 63, 72]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3803285</id><snippet>&gt;&gt;&gt; [ [ i * j  for i in range(0,10) ] for j in range(0, i) ]
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 
 [0, 2, 4, 6, 8, 10, 12, 14, 16, 18], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 
 [0, 4, 8, 12, 16, 20, 24, 28, 32, 36], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45], 
 [0, 6, 12, 18, 24, 30, 36, 42, 48, 54], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63], 
 [0, 8, 16, 24, 32, 40, 48, 56, 64, 72]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>i</snippet></ROW><ROW><id>3803285</id><snippet>&gt;&gt;&gt; del i
&gt;&gt;&gt; [ [ i * j  for i in range(0,10) ] for j in range(0, i) ]

Traceback (most recent call last):
  File "&lt;pyshell#41&gt;", line 1, in &lt;module&gt;
    [ [ i * j  for i in range(0,10) ] for j in range(0, i) ]
NameError: name 'i' is not defined
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3803363</id><snippet>AbstractContainer</snippet></ROW><ROW><id>3803363</id><snippet>__mapper_args__</snippet></ROW><ROW><id>3803363</id><snippet>Base</snippet></ROW><ROW><id>3803363</id><snippet>CourseSet</snippet></ROW><ROW><id>3803363</id><snippet>__mapper_args__</snippet></ROW><ROW><id>3803363</id><snippet>AbstractContainer</snippet></ROW><ROW><id>3803363</id><snippet>__mapper_args__</snippet></ROW><ROW><id>3803363</id><snippet>__table_args__</snippet></ROW><ROW><id>3803363</id><snippet>__mapper_args__</snippet></ROW><ROW><id>3803562</id><snippet>class Foo(object):                                                          
  def __init__(self):                                                 
    def f(a,self,b):                                            
      print a+b                                           
    self.g = functools.partial(f,1, self) # &lt;= passing `self` also.

x = Foo()
x.g(2)
</snippet></ROW><ROW><id>3803670</id><snippet>[buildout]
parts = my_omelette
eggs = 
    BeautifulSoup
    django-registration
    other_package_from_pypi

unzip = true

[my_omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}
</snippet></ROW><ROW><id>3804176</id><snippet>r'\\\1'</snippet></ROW><ROW><id>3804176</id><snippet>\\</snippet></ROW><ROW><id>3804176</id><snippet>\1</snippet></ROW><ROW><id>3804176</id><snippet>str = 'eFEx-x?k=;-'
print re.sub("([^a-zA-Z0-9])",r'\\\1', str)
</snippet></ROW><ROW><id>3804176</id><snippet>eFEx\-x\?k\=\;\-
</snippet></ROW><ROW><id>3804176</id><snippet>'eFEx\\-x\\?k\\=\\;\\-'</snippet></ROW><ROW><id>3804176</id><snippet>print</snippet></ROW><ROW><id>3804422</id><snippet>tree.SetDropTarget(MyDropTarget())
tree.Bind(wx.EVT_TREE_BEGIN_DRAG, self.on_drag)
tree.GetMainWindow().Bind(wx.EVT_MOUSE_CAPTURE_LOST, lambda x: None)
</snippet></ROW><ROW><id>3804422</id><snippet>def on_drag(self, evt):
   # No evt.Allow() here, I won't use TreeCtrl's internal DND support
   item = evt.GetItem()
   if item == self.tree.GetRootItem():
      return
   dropsrc = wx.DropSource(self)
   # Populate dropsource
   # ...
   dropsrc.DoDragDrop(wx.Drag_AllowMove)
</snippet></ROW><ROW><id>3804700</id><snippet>StellarObjectAdmin.list_display.insert(1, 'size')
</snippet></ROW><ROW><id>3804700</id><snippet>list_display</snippet></ROW><ROW><id>3804700</id><snippet>tuple</snippet></ROW><ROW><id>3804700</id><snippet>list</snippet></ROW><ROW><id>3804700</id><snippet>list_display = [ ... ]</snippet></ROW><ROW><id>3804700</id><snippet>StellarObjectAdmin</snippet></ROW><ROW><id>3804700</id><snippet>list_display = list(StellarObjectAdmin.list_display) # copy the list
list_display.insert(1, 'size')
</snippet></ROW><ROW><id>3804700</id><snippet>PlanetAdmin</snippet></ROW><ROW><id>3804700</id><snippet>this</snippet></ROW><ROW><id>3804700</id><snippet>self</snippet></ROW><ROW><id>3804700</id><snippet>class</snippet></ROW><ROW><id>3804700</id><snippet>B</snippet></ROW><ROW><id>3804700</id><snippet>A</snippet></ROW><ROW><id>3804700</id><snippet>B</snippet></ROW><ROW><id>3804700</id><snippet>B.foo</snippet></ROW><ROW><id>3804700</id><snippet>foo</snippet></ROW><ROW><id>3804700</id><snippet>B</snippet></ROW><ROW><id>3804700</id><snippet>A</snippet></ROW><ROW><id>3805241</id><snippet>def ungzipResponse(r,b):
    headers = r.info()
    if headers['Content-Encoding']=='gzip':
        import gzip
        gz = gzip.GzipFile(fileobj=r, mode='rb')
        html = gz.read()
        gz.close()
        headers["Content-type"] = "text/html; charset=utf-8"
        r.set_data( html )
        b.set_response(r)

response = browser.open(url)
ungzipResponse(response, browser)
html = response.read()
</snippet></ROW><ROW><id>3805407</id><snippet>redo.py</snippet></ROW><ROW><id>3805407</id><snippet>start.py</snippet></ROW><ROW><id>3805407</id><snippet>from os path import exists

if exists('Xxx100926.csv'):
  from redo import main
else:
  from start import main

#and run main function
main()
</snippet></ROW><ROW><id>3805618</id><snippet># enter the data like this
X={'A':(0,0),'B':(0,1),'C':(1,2),'D':(0,1)}

# size of grid
xi=map(tuple.__getitem__,X.values(),[1]*len(X))
yi=map(tuple.__getitem__,X.values(),[0]*len(X))
xrng = (min(xi), max(xi)+1)
yrng = (min(yi), max(yi)+1)

for y in range(*yrng):         # rows
  print '+' * ((xrng[1]-xrng[0])*3) + '+'
  k={}  # each item k[x] is list of elements in xth box in this row
  for x in range(*xrng):
    # list of items in this cell
    k[x]=[u for u in X.keys() if X[u]==(y,x)]
  h=max(map(len, k.values()))  # row height
  for v in range(h):           # lines of row
    c=[]
    for x in range(*xrng):     # columns
      if k[x]: 
        c.append(k[x][0])
        del k[x][0]
      else:    c.append(' ')   # shorter cell
    s="+ " + "+ ".join(c) + "+"
    print s
print "+" * ((xrng[1]-xrng[0])*3) + '+'
</snippet></ROW><ROW><id>3805707</id><snippet>p.stdout.read()</snippet></ROW><ROW><id>3805707</id><snippet>p.stdout.readline()</snippet></ROW><ROW><id>3805707</id><snippet>p.stdin.write('abc\n')</snippet></ROW><ROW><id>3805707</id><snippet>p.stdin.flush()
</snippet></ROW><ROW><id>3805707</id><snippet>print x[::-1]</snippet></ROW><ROW><id>3805707</id><snippet>sys.stdout.flush()
</snippet></ROW><ROW><id>3805707</id><snippet>import sys</snippet></ROW><ROW><id>3805907</id><snippet>pre</snippet></ROW><ROW><id>3805907</id><snippet>pre</snippet></ROW><ROW><id>3805907</id><snippet>&lt;pre id="view"&gt;&lt;/pre&gt;
&lt;textarea id="code"&gt;&lt;/textarea&gt;
</snippet></ROW><ROW><id>3805907</id><snippet>#code</snippet></ROW><ROW><id>3805907</id><snippet>#view</snippet></ROW><ROW><id>3805907</id><snippet>var code = document.getElementById("code");
var pre = document.getElementById("pre");
(code).onkeyup = function (){
    val = this.value;
    val = YourRegex(val);
    (pre).innerHTML = val;
};
</snippet></ROW><ROW><id>3805907</id><snippet>YourRegex</snippet></ROW><ROW><id>3805907</id><snippet>regex</snippet></ROW><ROW><id>3805907</id><snippet>pre</snippet></ROW><ROW><id>3805907</id><snippet>textarea</snippet></ROW><ROW><id>3805907</id><snippet>function YourRegex(val)
{
    // This function add colors, bold, whatever you want.
    if (/bbcc/i.test("bbcc"))
        return "&lt;b&gt;" + val + "&lt;/b&gt;";
}
</snippet></ROW><ROW><id>3805959</id><snippet>_map = {}
def phred64ToStdqual2(qualin):
    if not _map:
        for i in range(31, 127):
            _map[chr(i)] = chr(i - 31)
    return ''.join(map(_map.__getitem__, qualin))
</snippet></ROW><ROW><id>3805959</id><snippet>import string
_trans = None
def phred64ToStdqual4(qualin):
    global _trans
    if not _trans:
        _trans = string.maketrans(''.join(chr(i) for i in range(31, 127)), ''.join(chr(i) for i in range(127 - 31)))
    return qualin.translate(_trans)
</snippet></ROW><ROW><id>3806342</id><snippet>x = os.mkfifo(filename)
</snippet></ROW><ROW><id>3806342</id><snippet>out = os.open(filename, os.O_WRONLY)
in = open(filename, 'r')
</snippet></ROW><ROW><id>3806342</id><snippet>os.write(out, 'xxxx')
</snippet></ROW><ROW><id>3806342</id><snippet>lines = in.readline( )
</snippet></ROW><ROW><id>3806458</id><snippet>class Example(model.Model):
    #...
    def clean(self):
        if self.parent.id == self.id:
            raise ValidationError("no self referential models")
</snippet></ROW><ROW><id>3806622</id><snippet>from celery.decorators import task

@task
def add(x, y):
    return x + y
</snippet></ROW><ROW><id>3806622</id><snippet>&gt;&gt;&gt; result = add.delay(8, 8)
&gt;&gt;&gt; result.wait() # wait for and return the result
16
</snippet></ROW><ROW><id>3806870</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from django.core.validators import validate_email
&gt;&gt;&gt; try: validate_email(u'user@example.com'); print "passed"
... except: print "failed"
... 
passed
&gt;&gt;&gt; try: validate_email(u'user@zääz.de'); print "passed"
... except: print "failed"
... 
passed
&gt;&gt;&gt; try: validate_email(u'user@納豆.ac.jp'); print "passed"
... except: print "failed"
... 
passed
&gt;&gt;&gt; try: validate_email(u'this-should-fail@@納豆.ac.jp'); print "passed"
... except: print "failed"
... 
failed
</snippet></ROW><ROW><id>3806925</id><snippet>logList = db.GqlQuery("SELECT * FROM Log ORDER BY date DESC LIMIT 1")
result = logList.get()
result.content = "some text"
result.put()
</snippet></ROW><ROW><id>3807027</id><snippet>for root, dirs, files in os.walk(os.getcwd()):
    for name in dirs:
        try:
            os.rmdir(os.path.join(root, name))
        except WindowsError:
            print 'Skipping', os.path.join(root, name)
</snippet></ROW><ROW><id>3807051</id><snippet>import numpy as np
data = np.array([
        [100002, 2006, 1.1, 0.01, 6352],
        [100002, 2006, 1.2, 0.84, 304518],
        [100002, 2006, 2,   1.52, 148219],
        [100002, 2007, 1.1, 0.01, 6292],
        [10002,  2006, 1.1, 0.01, 5968],
        [10002,  2006, 1.2, 0.25, 104318],
        [10002,  2007, 1.1, 0.01, 6800],
        [10002,  2007, 4,   2.03, 25446],
        [10002,  2008, 1.1, 0.01, 6408]    ])

subset1 = data[data[:,0] == 100002]
subset2 = data[data[:,0] == 10002]
</snippet></ROW><ROW><id>3807051</id><snippet>array([[  1.00002e+05,   2.006e+03,   1.10e+00, 1.00e-02,   6.352e+03],
       [  1.00002e+05,   2.006e+03,   1.20e+00, 8.40e-01,   3.04518e+05],
       [  1.00002e+05,   2.006e+03,   2.00e+00, 1.52e+00,   1.48219e+05],
       [  1.00002e+05,   2.007e+03,   1.10e+00, 1.00e-02,   6.292e+03]])
</snippet></ROW><ROW><id>3807051</id><snippet>array([[  1.0002e+04,   2.006e+03,   1.10e+00, 1.00e-02,   5.968e+03],
       [  1.0002e+04,   2.006e+03,   1.20e+00, 2.50e-01,   1.04318e+05],
       [  1.0002e+04,   2.007e+03,   1.10e+00, 1.00e-02,   6.800e+03],
       [  1.0002e+04,   2.007e+03,   4.00e+00, 2.03e+00,   2.5446e+04],
       [  1.0002e+04,   2.008e+03,   1.10e+00, 1.00e-02,   6.408e+03]])
</snippet></ROW><ROW><id>3807051</id><snippet>numpy.unique1d</snippet></ROW><ROW><id>3807051</id><snippet>set</snippet></ROW><ROW><id>3807051</id><snippet>col1 = data[:,0]
col2 = data[:,1]

subsets = {}
for val1, val2 in itertools.product(np.unique(col1), np.unique(col2)):
    subset = data[(col1 == val1) &amp; (col2 == val2)]
    if np.any(subset):
        subsets[(val1, val2)] = subset
</snippet></ROW><ROW><id>3807269</id><snippet>subprocess</snippet></ROW><ROW><id>3807269</id><snippet>print "Perl: Setting some env variables\n";
$ENV{"SOME_VAR"} = "some value";
print "Perl: Starting bash\n";
exec('bash');
</snippet></ROW><ROW><id>3807269</id><snippet>import subprocess 
p = subprocess.Popen( "perl start_workspace.perl", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
p.stdin.write('echo "Python: $SOME_VAR"\n')
p.stdin.write("make\n")
(stdoutdata, stderrdata) = p.communicate()
print stdoutdata
print stderrdata
</snippet></ROW><ROW><id>3807269</id><snippet>Perl: Setting some env variables
Perl: Starting bash
Python: some value

make: *** No targets specified and no makefile found.  Stop.
</snippet></ROW><ROW><id>3807589</id><snippet>urlpatterns = patterns('your_app.views',
    url(r'^somehiing/$', 'your_view_function', name='my_view'),
)
</snippet></ROW><ROW><id>3807589</id><snippet>{% url my_view %}</snippet></ROW><ROW><id>3807610</id><snippet>s1 0 (a1 s1 0.5) (a1 s2 0.5) (a2 s1 1.0)
s2 0 (a1 s2 1.0) (a2 s1 0.5) (a2 s3 0.5)
s3 10 (a1 s2 1.0) (a2 s3 0.5) (a2 s4 0.5)
</snippet></ROW><ROW><id>3807610</id><snippet>data = { 's1': { 'reward': 0,
                 'action': { 'a1': { 's1': 0.5,
                                     's2': 0.5 },
                             'a2': { 's1': 1.0 }
                           },
               },
         's2': { 'reward': 0,
                 'action': { 'a1': { 's1': 1.0 },
                             'a2': { 's1': 0.5,
                                     's2': 0.5 },
                           },
               },
         's3': { 'reward': 10,
                 'action': { 'a1': { 's2': 1.0 },
                             'a2': { 's3': 0.5,
                                     's4': 0.5 },
                           }
               }
        }
</snippet></ROW><ROW><id>3808129</id><snippet>int getaddrinfo(const char *nodename, const char *servname,
                const struct addrinfo *hints, struct addrinfo **res);
</snippet></ROW><ROW><id>3808129</id><snippet>int WSAAPI getaddrinfo(
  __in_opt  PCSTR pNodeName,
  __in_opt  PCSTR pServiceName,
  __in_opt  const ADDRINFOA *pHints,
  __out     PADDRINFOA *ppResult
);
</snippet></ROW><ROW><id>3808287</id><snippet>class LoginManager(object):
    def process_view(self, request, view_func, view_args, view_kwargs):
        user = users.get_current_user()
        if user is not None:
            marker = Session.get(user.user_id())
            if marker is None:
                login_action()
                Session.set(user.user_id(), "true")
</snippet></ROW><ROW><id>3808362</id><snippet>urls.py</snippet></ROW><ROW><id>3808362</id><snippet>url(r'^account/activate/(?P&lt;activation_key&gt;\w+)/$', 'registration.views.activate', {'success_url': 'registration_activation_complete'}, name='registration_activate'),
url(r'^account/activate/success/$', direct_to_template, {'template': 'registration/activation_complete.html', name='registration_activation_complete'),
</snippet></ROW><ROW><id>3808362</id><snippet>from registration.backends.default import DefaultBackend

class MyRegistrationBackend(DefaultBackend):
    def post_activation_redirect(self, request, user):
        # return your URL here
</snippet></ROW><ROW><id>3808362</id><snippet>registration_activation_complete</snippet></ROW><ROW><id>3808405</id><snippet>from twisted.internet import defer
defer.setDebugging(True)
</snippet></ROW><ROW><id>3808405</id><snippet>twistd --debug [...]
</snippet></ROW><ROW><id>3808405</id><snippet>trial --debug [...]
</snippet></ROW><ROW><id>3808405</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>3808405</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>3808722</id><snippet>X</snippet></ROW><ROW><id>3808722</id><snippet>Y</snippet></ROW><ROW><id>3808722</id><snippet>.bat</snippet></ROW><ROW><id>3808835</id><snippet>try:
    code_that_raises_exception()
except Exception, e:
    print e
    raise
</snippet></ROW><ROW><id>3809014</id><snippet>myfunc</snippet></ROW><ROW><id>3809014</id><snippet>wrapper</snippet></ROW><ROW><id>3809014</id><snippet>wrapper</snippet></ROW><ROW><id>3809014</id><snippet>(*args)</snippet></ROW><ROW><id>3809014</id><snippet>MyClass</snippet></ROW><ROW><id>3809014</id><snippet>call</snippet></ROW><ROW><id>3809014</id><snippet>MyClass</snippet></ROW><ROW><id>3809014</id><snippet>TypeError</snippet></ROW><ROW><id>3809014</id><snippet>staticmethod</snippet></ROW><ROW><id>3809014</id><snippet>self</snippet></ROW><ROW><id>3809014</id><snippet>@instance.call
def foo(bar):
    return bar + 1
</snippet></ROW><ROW><id>3809014</id><snippet>def foo(bar):
    return bar + 1
foo = instance.call(f)
</snippet></ROW><ROW><id>3809014</id><snippet>def foo(bar):
    return bar + 1
foo = MyClass.call(instance, f)
</snippet></ROW><ROW><id>3809014</id><snippet>call</snippet></ROW><ROW><id>3809014</id><snippet>TypeError</snippet></ROW><ROW><id>3809014</id><snippet>MyClass</snippet></ROW><ROW><id>3809287</id><snippet>(a.T * b).T
</snippet></ROW><ROW><id>3809342</id><snippet>HashMap&lt;String, int&gt; wordCountMap = new HashMap&lt;String, int&gt;();
for(....) // for each 3 letter word in the input
{
    String word = ...; // current three letter word
    if(wordCountMap.containsKey(word))
        wordCountMap.put(word, wordCountMap.get(word)++);
    else
        wordCountMap.put(word, 1);
}
</snippet></ROW><ROW><id>3809342</id><snippet>String orginalInput = "fdjhkajajkfdj";
String word = "fdj";
int firstOccurance = originalInput.indexOf();
int secondOccurance = originalInput.indexOf(firstOccurance+1);
int charsInBetween = secondOccurance - firstOccurance - 3; // difference in indices minus length of word
</snippet></ROW><ROW><id>3809393</id><snippet>grep</snippet></ROW><ROW><id>3809393</id><snippet>main</snippet></ROW><ROW><id>3809393</id><snippet>def grep(filename, needle):
    with open(filename) as f_in:
        matches = ((i, line.find(needle), line) for i, line in enumerate(f_in))
        return [match for match in matches if match[0] != -1]

def main(filename, needle):
    matches = grep(filename, needle)
    if matches:
        print "{0} found on {1} lines in {2}".format(needle, len(matches), filename) 
        for line in matches:
            print "{0}:{1}:{2}".format(*line)
        return 1
    else:
        return -1

if __name__=='__main__':
    import sys
    filename = sys.argv[1]
    needle = sys.argv[2]
    return sys.exit(main(filename, needle))
</snippet></ROW><ROW><id>3809863</id><snippet>assoc .py</snippet></ROW><ROW><id>3809863</id><snippet>ipy_editors.idle('c:/Python26/pythonw.exe c:/Python26/Lib/idlelib/idle.pyw')
</snippet></ROW><ROW><id>3809863</id><snippet>import sys
print sys.version
</snippet></ROW><ROW><id>3809863</id><snippet>test.py</snippet></ROW><ROW><id>3809938</id><snippet>In [17]: from datetime import datetime

In [18]: tuple((str(n), str(n)) for n in range(1995, datetime.now().year + 1))
Out[18]:
(('1995', '1995'),
 ('1996', '1996'),
 ('1997', '1997'),
 ('1998', '1998'),
 ('1999', '1999'),
 ('2000', '2000'),
 ('2001', '2001'),
 ('2002', '2002'),
 ('2003', '2003'),
 ('2004', '2004'),
 ('2005', '2005'),
 ('2006', '2006'),
 ('2007', '2007'),
 ('2008', '2008'),
 ('2009', '2009'),
 ('2010', '2010'))

In [19]: import calendar

In [20]: tuple((m, m) for m in calendar.month_abbr[1:])
Out[20]:
(('Jan', 'Jan'),
 ('Feb', 'Feb'),
 ('Mar', 'Mar'),
 ('Apr', 'Apr'),
 ('May', 'May'),
 ('Jun', 'Jun'),
 ('Jul', 'Jul'),
 ('Aug', 'Aug'),
 ('Sep', 'Sep'),
 ('Oct', 'Oct'),
 ('Nov', 'Nov'),
 ('Dec', 'Dec'))
</snippet></ROW><ROW><id>3809994</id><snippet>Both are stable 
Both are scalable 
both are as secure  
Both are easier to learn !!
</snippet></ROW><ROW><id>3810151</id><snippet>python26 @2.6.6_0</snippet></ROW><ROW><id>3810151</id><snippet>tk @8.5.8_0</snippet></ROW><ROW><id>3810151</id><snippet>+quartz</snippet></ROW><ROW><id>3810151</id><snippet>Tk</snippet></ROW><ROW><id>3810151</id><snippet>tk @8.5.8_0</snippet></ROW><ROW><id>3810151</id><snippet>X11</snippet></ROW><ROW><id>3810151</id><snippet>X11</snippet></ROW><ROW><id>3810151</id><snippet>Tkinter</snippet></ROW><ROW><id>3810151</id><snippet>python26 @2.6.6_0</snippet></ROW><ROW><id>3810151</id><snippet>IDLE</snippet></ROW><ROW><id>3810151</id><snippet>Tkinter</snippet></ROW><ROW><id>3810151</id><snippet>+no_tkinter</snippet></ROW><ROW><id>3810151</id><snippet>Tkinter</snippet></ROW><ROW><id>3810151</id><snippet>IDLE</snippet></ROW><ROW><id>3810151</id><snippet>Quartz</snippet></ROW><ROW><id>3810285</id><snippet>port = int(raw_input("Enter port: "))</snippet></ROW><ROW><id>3810460</id><snippet>super()</snippet></ROW><ROW><id>3810736</id><snippet>image = ImageReader(user.photo) 
p.drawImage(imagem)
</snippet></ROW><ROW><id>3810736</id><snippet>import StringIO
image = ImageReader(StringIO.StringIO(user.photo))
p.drawImage(image)
</snippet></ROW><ROW><id>3810736</id><snippet>ImageReader('http://www.reportlab.com/rsrc/encryption.gif')</snippet></ROW><ROW><id>3810736</id><snippet>def _isPILImage(im):
    try:
        return isinstance(im,Image.Image)
    except ImportError:
        return 0

class ImageReader(object):
    "Wraps up either PIL or Java to get data from bitmaps"
    _cache={}
    def __init__(self, fileName):
        ...
        if _isPILImage(fileName):
</snippet></ROW><ROW><id>3810736</id><snippet>in _isPILImage AttributeError: 'NoneType' object has no attribute 'Image'.</snippet></ROW><ROW><id>3810736</id><snippet>def get(self, image): 
    if image is not None: 
        image = ImageReader(StringIO.StringIO(user.photo)) 
        p.drawImage(40, 700, image) 
        p.setLineWidth(.3) 
        p.setFont('Helvetica', 10) 
        p.line(50, 660, 560, 660)
</snippet></ROW><ROW><id>3810736</id><snippet>Imaging Library not available, unable to import bitmaps only jpegs</snippet></ROW><ROW><id>3810736</id><snippet>try:
    self._width,self._height,c=readJPEGInfo(self.fp)
except:
    raise RuntimeError('Imaging Library not available, unable to import bitmaps only jpegs')
</snippet></ROW><ROW><id>3810736</id><snippet>self._width,self._height,c=readJPEGInfo(self.fp)
</snippet></ROW><ROW><id>3810736</id><snippet>readJPEGInfo()</snippet></ROW><ROW><id>3810736</id><snippet>imagem = canvas.ImageReader(StringIO.StringIO(open('file.jpg', 'rb').read()))
</snippet></ROW><ROW><id>3810736</id><snippet>photo = images.resize(self.request.get('photo'), 32, 32)
</snippet></ROW><ROW><id>3810736</id><snippet>photo = images.resize(self.request.get('photo'), 32, 32, images.JPEG)
</snippet></ROW><ROW><id>3810792</id><snippet>encode</snippet></ROW><ROW><id>3810792</id><snippet>decode</snippet></ROW><ROW><id>3810921</id><snippet>while time &lt;= some_value:
</snippet></ROW><ROW><id>3810921</id><snippet>while True:
    ...
    if time &gt; some_value:
        break
</snippet></ROW><ROW><id>3810921</id><snippet>signal.alarm</snippet></ROW><ROW><id>3810921</id><snippet>signal.SIGALRM</snippet></ROW><ROW><id>3810921</id><snippet>TimeoutError</snippet></ROW><ROW><id>3810988</id><snippet>db</snippet></ROW><ROW><id>3810988</id><snippet>public int delete(Uri uri, String whereClause, String[] whereArgs) {
    int count = 0;

    switch(URI_MATCHER.match(uri)){
    case ITEMS:
        // uri = content://com.yourname.yourapp.Items/item
        // delete all rows
        count = db.delete(TABLE_ITEMS, whereClause, whereArgs);
        break;
    case ITEMS_ID:
        // uri = content://com.yourname.yourapp.Items/item/2
        // delete the row with the id 2
        String segment = uri.getPathSegments().get(1);
        count = db.delete(TABLE_ITEMS, 
                Item.KEY_ITEM_ID +"="+segment
                +(!TextUtils.isEmpty(whereClause)?" AND ("+whereClause+")":""),
                whereArgs);
        break;
    default:
        throw new IllegalArgumentException("Unknown Uri: "+uri);
    }

    return count;
}
</snippet></ROW><ROW><id>3810988</id><snippet>private static final int ITEMS = 1;
private static final int ITEMS_ID = 2;
private static final String AUTHORITY_ITEMS ="com.yourname.yourapp.Items";
private static final UriMatcher URI_MATCHER;

static {
    URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
    URI_MATCHER.addURI(AUTHORITY_ITEMS, "item", ITEMS);
    URI_MATCHER.addURI(AUTHORITY_ITEMS, "item/#", ITEMS_ID);
}
</snippet></ROW><ROW><id>3810988</id><snippet>class ItemDatabaseHelper extends SQLiteOpenHelper {
    public ItemDatabaseHelper(Context context){
        super(context, "myDatabase.db", null, ITEMDATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // TODO Auto-generated method stub
        String createItemsTable = "create table " + TABLE_ITEMS + " (" +
            ...
        ");";

        // Begin Transaction
        db.beginTransaction();
        try{
            // Create Items table
            db.execSQL(createItemsTable);

            // Transaction was successful
            db.setTransactionSuccessful();
        } catch(Exception ex) {
            Log.e(this.getClass().getName(), ex.getMessage(), ex);
        } finally {
            // End transaction
            db.endTransaction();
        }
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        String dropItemsTable = "DROP TABLE IF EXISTS " + TABLE_ITEMS;

        // Begin transaction
        db.beginTransaction();

        try {
            if(oldVersion&lt;2){
                // Upgrade from version 1 to version 2: DROP the whole table
                db.execSQL(dropItemsTable);
                onCreate(db);
                Log.i(this.getClass().toString(),"Successfully upgraded to Version 2");
            }
            if(oldVersion&lt;3) {
                // minor change, perform an ALTER query
                db.execSQL("ALTER ...");
            }

            db.setTransactionSuccessful();
        } catch(Exception ex){
            Log.e(this.getClass().getName(), ex.getMessage(), ex);
        } finally {
            // Ends transaction
            // If there was an error, the database won't be altered
            db.endTransaction();
        }
    }
}
</snippet></ROW><ROW><id>3810988</id><snippet>String[] rows = new String[] {"_ID", "_name", "_email" };
Uri uri = Uri.parse("content://com.yourname.yourapp.Items/item/2";

// Alternatively you can also use getContentResolver().insert/update/query/delete methods
Cursor c = managedQuery(uri, rows, "someRow=1", null, null); 
</snippet></ROW><ROW><id>3811090</id><snippet>def updateCentroid(self, label):
    cluster = self.clusters[label]
    n = len(cluster.points)
    cluster.centroid.x = ((n-1)*cluster.centroid.x + cluster.points[n-1].x)/n
    cluster.centroid.y = ((n-1)*cluster.centroid.y + cluster.points[n-1].y)/n
</snippet></ROW><ROW><id>3811110</id><snippet>link: '&lt;URL&gt;'};</snippet></ROW><ROW><id>3811110</id><snippet>myString = "link: '/Hidden/SidebySideGreen/dei1=1204970159862'};"
print( myString[7:-3] )
</snippet></ROW><ROW><id>3811110</id><snippet>myDoc = """link: '/Hidden/SidebySideGreen/dei1=1204970159862'};
link: '/Hidden/SidebySideYellow/dei1=1204970159862'};"""

print( re.findall( "'([^']+)'", myDoc ) )
</snippet></ROW><ROW><id>3811110</id><snippet>link:</snippet></ROW><ROW><id>3811110</id><snippet>print( re.findall( "link: '([^']+)'", myDoc ) )
</snippet></ROW><ROW><id>3811307</id><snippet>_to_python</snippet></ROW><ROW><id>3811307</id><snippet>validate_python</snippet></ROW><ROW><id>3811307</id><snippet>class Email(formencode.validators.Email):
    def validate_python(self, value, state):
        try:
            super(Email, self).validate_python(value, state)
        except formencode.Invalid as e:
            # Trivial case failed. Try for possible IDN domain-part
            if value and u'@' in value:
                parts = value.split(u'@')
                try:
                    parts[-1] = parts[-1].encode('idna')
                except UnicodeError:
                    raise e

                try:
                    super(Email, self).validate_python(u'@'.join(parts), state)
                except formencode.Invalid as ex:
                    raise ex
            else:
                raise e
</snippet></ROW><ROW><id>3811460</id><snippet>STMT = 'INSERT INTO test_table (col1, col2, col3, col4, col5) VALUES (%s, %s, %s, %s, %s)'
</snippet></ROW><ROW><id>3811772</id><snippet>i.group()</snippet></ROW><ROW><id>3811772</id><snippet>findall</snippet></ROW><ROW><id>3811772</id><snippet>i.group(1)</snippet></ROW><ROW><id>3811772</id><snippet>In [4]: for i in p.finditer(s1):
...:     i.group(1)
...:     
...:     
Out[4]: '[CC] '
</snippet></ROW><ROW><id>3812011</id><snippet>pdb</snippet></ROW><ROW><id>3812011</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>3812324</id><snippet>python -c 'import matplotlib; print matplotlib.__version__'</snippet></ROW><ROW><id>3812324</id><snippet>projection</snippet></ROW><ROW><id>3812324</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d, Axes3D #&lt;-- Note the capitalization! 
fig = plt.figure()

ax = Axes3D(fig) #&lt;-- Note the difference from your original code...

X, Y, Z = axes3d.get_test_data(0.05)
cset = ax.contour(X, Y, Z, 16, extend3d=True)
ax.clabel(cset, fontsize=9, inline=1)
plt.show()
</snippet></ROW><ROW><id>3812414</id><snippet>session.query(B).delete()
</snippet></ROW><ROW><id>3812414</id><snippet>session.delete(b)  #where b is an instance of B
</snippet></ROW><ROW><id>3812414</id><snippet>session.delete(b)</snippet></ROW><ROW><id>3812414</id><snippet>session.query().delete()</snippet></ROW><ROW><id>3812414</id><snippet>session.delete()</snippet></ROW><ROW><id>3812591</id><snippet>myString.replace( '"', '' )</snippet></ROW><ROW><id>3812600</id><snippet>&gt;&gt;&gt; s1 = {-1, -2}
&gt;&gt;&gt; s2 = {-2, -1}
&gt;&gt;&gt; s1 == s2
True
&gt;&gt;&gt; list(s1), list(s2)
([-1, -2], [-2, -1])
</snippet></ROW><ROW><id>3813645</id><snippet>_update</snippet></ROW><ROW><id>3813645</id><snippet>update_hook</snippet></ROW><ROW><id>3813755</id><snippet>[ Ax * (By - Cy) + Bx * (Cy - Ay) + Cx * (Ay - By) ] / 2
</snippet></ROW><ROW><id>3813785</id><snippet>"%04d"</snippet></ROW><ROW><id>3814035</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(0x9481ef80) / Decimal(2**32) + Decimal(0x4ca1f350)
Decimal('1285682000.580107659101486206')
</snippet></ROW><ROW><id>3814035</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(0x9481ef80, 2**32) + Fraction(0x4ca1f350)
Fraction(43140329262089183, 33554432)
&gt;&gt;&gt; float(_)
1285682000.5801077
</snippet></ROW><ROW><id>3814035</id><snippet>&gt;&gt;&gt; a = 0x9481ef80 / 2**32 + 0x4ca1f350
&gt;&gt;&gt; b = 0x9481ef90 / 2**32 + 0x4ca1f350
&gt;&gt;&gt; a == b
</snippet></ROW><ROW><id>3814035</id><snippet>&gt;&gt;&gt; 0x9481ef80 / 2**32
0.5801076591014862
&gt;&gt;&gt; 0x9481ef90 / 2**32
0.5801076628267765
</snippet></ROW><ROW><id>3814104</id><snippet>from flask import Response
response = Response()
response.headers.add('content-length', str(os.path.getsize(FILE_LOCATION)))
</snippet></ROW><ROW><id>3814542</id><snippet>os.nice()</snippet></ROW><ROW><id>3814788</id><snippet>register_namespace</snippet></ROW><ROW><id>3814788</id><snippet>nsmap</snippet></ROW><ROW><id>3814788</id><snippet>.nsmap</snippet></ROW><ROW><id>3814788</id><snippet>.prefix</snippet></ROW><ROW><id>3814872</id><snippet>print</snippet></ROW><ROW><id>3814963</id><snippet>if x[3] is x[4]:
    print "What's the difference?"
</snippet></ROW><ROW><id>3815025</id><snippet>for prop in class_mapper(Shelf).iterate_properties:
    if isinstance(prop, sqlalchemy.orm.RelationshipProperty):
       print prop.mapper.class_
</snippet></ROW><ROW><id>3815026</id><snippet>TEEG_EVENT_TAB1 = 1
TEEG_EVENT_TAB2 = 2
</snippet></ROW><ROW><id>3815026</id><snippet>fieldname : n</snippet></ROW><ROW><id>3815047</id><snippet>self.assertTrue(query_mock.distinct.called)
</snippet></ROW><ROW><id>3815047</id><snippet>self.assertTrue(query_mock.filter.return_value.distinct.called)
</snippet></ROW><ROW><id>3815140</id><snippet>for i in xrange(1, 1746):
    file = urllib2.urlopen("http://www.example.com/photos/%04d.jpg" % i)
    ...
    # Write file locally
    ...
</snippet></ROW><ROW><id>3815387</id><snippet>True</snippet></ROW><ROW><id>3815387</id><snippet>bool</snippet></ROW><ROW><id>3815387</id><snippet>True</snippet></ROW><ROW><id>3815387</id><snippet>True</snippet></ROW><ROW><id>3815387</id><snippet>Python 2.7 (r27:82508, Jul  3 2010, 21:12:11) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; True = 4
&gt;&gt;&gt; True
4
</snippet></ROW><ROW><id>3815387</id><snippet>Python 3.1.2 (r312:79147, Jul 19 2010, 21:03:37) 
[GCC 4.2.1 (Apple Inc. build 5664)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; True = 4
  File "&lt;stdin&gt;", line 1
SyntaxError: assignment to keyword
</snippet></ROW><ROW><id>3815387</id><snippet>while True:</snippet></ROW><ROW><id>3815508</id><snippet>Shell</snippet></ROW><ROW><id>3815508</id><snippet>Sub RunExternalProg()

    Dim return_value As Double
    return_value = Shell("C:\Python26\pythonw.exe C:\my_script.py", vbHide)
    Debug.Print return_value

End Sub
</snippet></ROW><ROW><id>3815508</id><snippet>pythonw</snippet></ROW><ROW><id>3815681</id><snippet>&gt;&gt;&gt; from Crypto.Cipher import DES
&gt;&gt;&gt; obj=DES.new('abcdefgh', DES.MODE_ECB)
&gt;&gt;&gt; plain="Guido van Rossum is a space alien."
&gt;&gt;&gt; len(plain)
34
&gt;&gt;&gt; obj.encrypt(plain)
Traceback (innermost last):
  File "&lt;stdin&gt;", line 1, in ?
ValueError: Strings for DES must be a multiple of 8 in length
&gt;&gt;&gt; ciph=obj.encrypt(plain+'XXXXXX')
&gt;&gt;&gt; ciph
'\021,\343Nq\214DY\337T\342pA\372\255\311s\210\363,\300j\330\250\312\347\342I\3215w\03561\303dgb/\006'
&gt;&gt;&gt; obj.decrypt(ciph)
'Guido van Rossum is a space alien.XXXXXX'
</snippet></ROW><ROW><id>3815876</id><snippet>sys.exit()</snippet></ROW><ROW><id>3815876</id><snippet>__main__</snippet></ROW><ROW><id>3816301</id><snippet>if firstcelltype == np.array((cellrecord[basecell,2])):
</snippet></ROW><ROW><id>3816301</id><snippet> if firstcelltype == cellrecord[basecell,2]:
</snippet></ROW><ROW><id>3816301</id><snippet>&gt;&gt;&gt; timeit.Timer('x = 111.1').timeit()
0.045882196294822819
&gt;&gt;&gt; t=timeit.Timer('x = np.array(111.1)','import numpy as np').timeit()
0.55774970267830071
</snippet></ROW><ROW><id>3816301</id><snippet>arraytarget=round(dist*analysisdist/intervalnumber)
addone=np.array((spatialraw[arraytarget-1]))
addone=addone+1
targetcell=arraytarget-1
np.put(spatialraw,[targetcell,targetcell],addone)
</snippet></ROW><ROW><id>3816301</id><snippet>arraytarget=round(dist*analysisdist/intervalnumber)-1
spatialraw[arraytarget] += 1
</snippet></ROW><ROW><id>3816301</id><snippet>analysisdist</snippet></ROW><ROW><id>3816301</id><snippet>analysisdist</snippet></ROW><ROW><id>3816301</id><snippet>arraytarget</snippet></ROW><ROW><id>3816301</id><snippet>analysisdist2</snippet></ROW><ROW><id>3816301</id><snippet>secondcelltype</snippet></ROW><ROW><id>3816301</id><snippet>comparecells = np.where(cellrecord[:,2]==secondcelltype)[0]
</snippet></ROW><ROW><id>3816301</id><snippet>for comparecell in range (0, cellnumber-1):
    if secondcelltype==np.array((cellrecord[comparecell,2])):
</snippet></ROW><ROW><id>3816301</id><snippet>for comparecell in comparecells:
</snippet></ROW><ROW><id>3816301</id><snippet>basecells = np.where(cellrecord[:,2]==firstcelltype)[0]
xlocs = cellrecord[basecells, 0]
ylocs = cellrecord[basecells, 1]
xedgedists = xbound - xloc
yedgedists = ybound - yloc
whichcells = np.where((xlocs&gt;excludedist) &amp; (xedgedists&gt;excludedist) &amp; (ylocs&gt;excludedist) &amp; (yedgedists&gt;excludedist))[0]
selectedcells = basecells[whichcells]
comparecells = np.where(cellrecord[:,2]==secondcelltype)[0]
xcomplocs = cellrecords[comparecells,0]
ycomplocs = cellrecords[comparecells,1]
analysisdist2 = analysisdist**2
for basecell in selectedcells:
    dists = np.round((xcomplocs-xlocs[basecell])**2 + (ycomplocs-ylocs[basecell])**2)
    whichcells = np.where((dists &gt;= 1) &amp; (dists &lt;= analysisdist2))[0]
    arraytargets = np.round(dists[whichcells]*analysisdist/intervalnumber) - 1
    for target in arraytargets:
        spatialraw[target] += 1
</snippet></ROW><ROW><id>3816301</id><snippet>analysisdist/intervalnumber</snippet></ROW><ROW><id>3816452</id><snippet>r'^[^\W_]+(-[^\W_]+)?$'
</snippet></ROW><ROW><id>3816452</id><snippet># -*- coding: utf-8 -*-
import re

names = [
            u'Björn',
            u'Anne-Charlotte',
            u'توماس',
            u'毛',
            u'מיק',
            u'-Björn',
            u'Anne--Charlotte',
            u'Tom_',
        ]

for name in names:
    regex = re.compile(r'^[^\W_]+(-[^\W_]+)?$', re.U)
    print u'{0:20} {1}'.format(name, regex.match(name) is not None)
</snippet></ROW><ROW><id>3816452</id><snippet>[^\W_]</snippet></ROW><ROW><id>3816452</id><snippet>[^\W\d_]</snippet></ROW><ROW><id>3816655</id><snippet>authorization_token</snippet></ROW><ROW><id>3816655</id><snippet>Authorization</snippet></ROW><ROW><id>3816655</id><snippet>#!/usr/bin/env python
import httplib
import optparse
import sys
import urllib

class GoogleMaps(object):
    source = "daybarr.com-kmluploader-0.1"

    def __init__(self, email, passwd):
        self.email = email
        self.passwd = passwd
        self._conn = None
        self._auth_token = None

    def _get_connection(self):
        if not self._auth_token:
            conn = httplib.HTTPSConnection("www.google.com")
            params = urllib.urlencode({
                "accountType": "HOSTED_OR_GOOGLE",
                "Email": self.email,
                "Passwd": self.passwd,
                "service": "local",
                "source": self.source,
            })
            headers = {
                "Content-type": "application/x-www-form-urlencoded",
                "Accept": "text/plain",
            }
            conn.request("POST", "/accounts/ClientLogin", params, headers)
            response = conn.getresponse()
            if response.status != 200:
                raise Exception("Failed to login: %s %s" % (
                    response.status,
                    response.reason))
            body = response.read()
            for line in body.splitlines():
                if line.startswith("Auth="):
                    self._auth_token = line[5:]
                    break
            if not self._auth_token:
                raise Exception("Cannot find auth token in response %s" % body)
        if not self._conn:
            self._conn = httplib.HTTPConnection("maps.google.com")
        return self._conn

    connection = property(_get_connection)

    def upload(self, kml_data):
        conn = self.connection
        headers = {
            "GData-Version": "2.0",
            "Authorization": 'GoogleLogin auth=%s' % (self._auth_token,),
            "Content-Type": "application/vnd.google-earth.kml+xml",
        }
        conn.request("POST", "/maps/feeds/maps/default/full", kml_data, headers)
        response = conn.getresponse()
        if response.status != 200:
            raise Exception("Failed to upload kml: %s %s" % (
                response.status,
                response.reason))
        return response.read()

if __name__ == "__main__":
    parser = optparse.OptionParser()
    parser.add_option("-e", "--email", help="Email address for login")
    parser.add_option("-p", "--passwd", help="Password for login")
    options, args = parser.parse_args()
    if not (options.email and options.passwd):
        parser.error("email and passwd required")
    if args:
        kml_file = open(args[0], "r")
    else:
        kml_file = sys.stdin
    maps = GoogleMaps(options.email, options.passwd)
    print maps.upload(kml_file.read())
</snippet></ROW><ROW><id>3816655</id><snippet>400 Bad Request</snippet></ROW><ROW><id>3816697</id><snippet>data = {
  'a' : { 'bool':true, 'number':123, 'list':[1, 2, 3] },
  'b' : { 'bool':false, 'number':143, 'list':[1, 3, 5] },
  'c' : { 'bool':false, 'number':123, 'list':[1, 4, 5, 18] },
}
</snippet></ROW><ROW><id>3816697</id><snippet>list</snippet></ROW><ROW><id>3816697</id><snippet>dict</snippet></ROW><ROW><id>3816926</id><snippet>stdin</snippet></ROW><ROW><id>3816926</id><snippet>sys.stdin</snippet></ROW><ROW><id>3816926</id><snippet>fileinput</snippet></ROW><ROW><id>3816926</id><snippet>with</snippet></ROW><ROW><id>3816926</id><snippet>[snyder]</snippet></ROW><ROW><id>3816926</id><snippet>snyder</snippet></ROW><ROW><id>3816926</id><snippet>re.search("snyder", line, re.I)</snippet></ROW><ROW><id>3816926</id><snippet>snyder</snippet></ROW><ROW><id>3816926</id><snippet>\bsnyder\b</snippet></ROW><ROW><id>3816926</id><snippet>[s][n][y][d][e][r]</snippet></ROW><ROW><id>3816926</id><snippet>snyder</snippet></ROW><ROW><id>3816926</id><snippet>re.findall()</snippet></ROW><ROW><id>3816926</id><snippet>re.search()</snippet></ROW><ROW><id>3816926</id><snippet>variations = []
for line in fileinput.input():
    found = re.findall(r"""snyder""", line, re.I)
    if len(found) &gt; 0:
        variations += found
var_set = set(variations)
print var_set
print len(var_set)
</snippet></ROW><ROW><id>3816926</id><snippet>&gt;&gt;&gt; print sl 
['blah', 'blah', 'what', 'is', 'this', 'BLAh', 'some', 'random', 'bLah', 'text', 'a longer BlaH string', 'a BLAH string with blAH two']
&gt;&gt;&gt; li = []
&gt;&gt;&gt; for line in sl:
...   m = re.findall("blah", line, re.I)
...   if len(m) &gt; 0:
...     li += m
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; print li   #Contains all matches
['blah', 'blah', 'BLAh', 'bLah', 'BlaH', 'BLAH', 'blAH']
&gt;&gt;&gt; st = set(li)
&gt;&gt;&gt; print st   #Contains only *unique* matches
set(['bLah', 'BLAH', 'BLAh', 'BlaH', 'blah', 'blAH'])
&gt;&gt;&gt; print len(st)
6
&gt;&gt;&gt; print len(li)
7    #1 greater than len(st) because st drops a non-unique match
</snippet></ROW><ROW><id>3817541</id><snippet>import matplotlib.pyplot as plt
from matplotlib.transforms import Affine2D
import numpy as np

x = [5, 20, 10, 10]
labels=['cliffs', 'frogs', 'stumps', 'old men on tractors']

plt.figure()
plt.suptitle("Things I narrowly missed while learning to drive")
wedges, labels = plt.pie(x, labels=labels)
plt.axis('equal')

starting_angle = 90
rotation = Affine2D().rotate(np.radians(starting_angle))

for wedge, label in zip(wedges, labels):
    label.set_position(rotation.transform(label.get_position()))
    if label._x &gt; 0:
        label.set_horizontalalignment('left')
    else:
        label.set_horizontalalignment('right')

    wedge._path = wedge._path.transformed(rotation)

plt.show()
</snippet></ROW><ROW><id>3817584</id><snippet>    def test_form_should_post_proper_data_via_signal(self):
        # define the local listener
        def question_posted_listener(sender, form_data, **kwargs):
            self.name = form_data['name']

        # prepare fake data
        form_data = {'name': 'Jan Nowak'}

        # connect &amp; send the signal
        signals.question_posted.connect(question_posted_listener, sender='test')
        signals.question_posted.send(sender='test', form_data=form_data)

        # check results
        eq_(self.name, 'Jan Nowak')
</snippet></ROW><ROW><id>3817752</id><snippet>try:
    do_something1
except TheExceptionTypeThatICanHandleError, e:
    if e.strerror != 10001:
        raise
finally:
     clean_up
</snippet></ROW><ROW><id>3817752</id><snippet>try</snippet></ROW><ROW><id>3817752</id><snippet>finally</snippet></ROW><ROW><id>3817752</id><snippet>try</snippet></ROW><ROW><id>3817752</id><snippet>raise</snippet></ROW><ROW><id>3817752</id><snippet>do_something1</snippet></ROW><ROW><id>3817752</id><snippet>do_something2</snippet></ROW><ROW><id>3817752</id><snippet>do_something1</snippet></ROW><ROW><id>3817752</id><snippet>try</snippet></ROW><ROW><id>3817752</id><snippet>try:
   do_something1()
except:
   pass

try:
   do_something2()
except:
   pass
</snippet></ROW><ROW><id>3817806</id><snippet>self</snippet></ROW><ROW><id>3817806</id><snippet>class Handlers:
    def adjustbottomBracketHeight(widget):
        obj.bottomBracketHeight = widget.get_value()
</snippet></ROW><ROW><id>3817806</id><snippet>class Handlers:
    def adjustbottomBracketHeight(obj, widget):
        obj.bottomBracketHeight = widget.get_value()
</snippet></ROW><ROW><id>3817847</id><snippet>django.contrib.syndication.views.feed</snippet></ROW><ROW><id>3817847</id><snippet># Import Django's standard feed view.
from django.contrib.auth.decorators import login_required
from django.django.contrib.syndication.views import feed

# Wrap it in a new feed view that requires authentication!
private_feed = login_required(feed)
</snippet></ROW><ROW><id>3817847</id><snippet>authentication_url = '/accounts/login'
def feed_safe_login_required ( view ):
    def _ ( request, *args, **kwargs ):
        if not request.user.is_authenticated:
            return HttpResponseNotAuthorized, authentication_url
    return _

feed = feed_safe_login_required(django.contrib.syndication.views.feed)
</snippet></ROW><ROW><id>3817847</id><snippet>HttpResponseNotAuthorized</snippet></ROW><ROW><id>3818163</id><snippet>urllib2</snippet></ROW><ROW><id>3818163</id><snippet>import urllib2

url = 'http://server-A.com/form.php'
res = urllib2.urlopen(url)
print res.read()
</snippet></ROW><ROW><id>3818374</id><snippet>" or ".join("id = %d" % id for id in ids)
</snippet></ROW><ROW><id>3818449</id><snippet>target record</snippet></ROW><ROW><id>3818449</id><snippet>C/C++</snippet></ROW><ROW><id>3818861</id><snippet>def blindcopy(objfrom, objto):
    for n, v in inspect.getmembers(objfrom):
        setattr(objto, n, v);
</snippet></ROW><ROW><id>3818861</id><snippet>def copysome(objfrom, objto, names):
    for n in names:
        if hasattr(objfrom, n):
            v = getattr(objfrom, n)
            setattr(objto, n, v);
</snippet></ROW><ROW><id>3818948</id><snippet>try:
    # something that might not work
except Exception, e:
    return http.httpResponseRedirect('/%s'%repr(e))
</snippet></ROW><ROW><id>3818969</id><snippet>os.path</snippet></ROW><ROW><id>3819023</id><snippet>from lxml import etree
with open('some-file.xml') as f:
    xmlDoc = etree.parse(f)
    root = xmlDoc.getroot()

    Text = []
    for textNode in root.xpath('TEXT'):
        docstr = '\n'.join(text.strip() for text in textNode.xpath('*/text() | text()') if text.strip())
        Text.append(docstr)
</snippet></ROW><ROW><id>3819051</id><snippet>syncdb</snippet></ROW><ROW><id>3819187</id><snippet>{% for char in s %}*{% endfor %}
</snippet></ROW><ROW><id>3819187</id><snippet>s</snippet></ROW><ROW><id>3819187</id><snippet>bluesky</snippet></ROW><ROW><id>3819267</id><snippet>my_template.foo</snippet></ROW><ROW><id>3819267</id><snippet>loader.get_template('&lt;subdirectory&gt;/my_template.txt')</snippet></ROW><ROW><id>3819267</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>3819276</id><snippet>{% for char in mytext %}*{% endfor %}
</snippet></ROW><ROW><id>3819276</id><snippet>PasswordInput</snippet></ROW><ROW><id>3819368</id><snippet>set</snippet></ROW><ROW><id>3819368</id><snippet>&gt;&gt;&gt; xx=[['a',1],['b',2],['c',3],['c',3]]
&gt;&gt;&gt; set(tuple(element) for element in xx)
set([('a', 1), ('b', 2), ('c', 3)])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3819368</id><snippet>&gt;&gt;&gt; [list(t) for t in set(tuple(element) for element in xx)]
[['a', 1], ['b', 2], ['c', 3]]
</snippet></ROW><ROW><id>3819568</id><snippet>pack_forget</snippet></ROW><ROW><id>3819568</id><snippet>grid_forget</snippet></ROW><ROW><id>3819568</id><snippet>from Tkinter import *

def hide_me(event):
    event.widget.pack_forget()

root = Tk()
btn=Button(root, text="Click")
btn.bind('&lt;Button-1&gt;', hide_me)
btn.pack()
btn2=Button(root, text="Click too")
btn2.bind('&lt;Button-1&gt;', hide_me)
btn2.pack()
root.mainloop()
</snippet></ROW><ROW><id>3819716</id><snippet>noOfBits = 5
for n in range(2**noOfBits):
    binVal = bin(n)[2:].zfill(noOfBits)
    b = [ x for x in binVal]
    print b
</snippet></ROW><ROW><id>3819716</id><snippet>['0', '0', '0', '0', '0']
['0', '0', '0', '0', '1']
['0', '0', '0', '1', '0']
['0', '0', '0', '1', '1']
['0', '0', '1', '0', '0']
['0', '0', '1', '0', '1']
.......
</snippet></ROW><ROW><id>3819829</id><snippet>sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7</snippet></ROW><ROW><id>3819829</id><snippet>sudo rm -rf "/Applications/Python 2.7"</snippet></ROW><ROW><id>3819829</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3819829</id><snippet>ls -l /usr/local/bin</snippet></ROW><ROW><id>3819914</id><snippet>Count</snippet></ROW><ROW><id>3819914</id><snippet>from django.db.models import Count
Order.objects.annotate(count = Count('orderitem__id')).filter(count = 1)
</snippet></ROW><ROW><id>3820076</id><snippet>def contact_question_create(request, success_url=None, form_class=None,
                        template_name="contact/contact_form.html",
                        extra_context=None, **kwargs):

    # your view code here

    context = {'defult':'foo'}

    if extra_context:
        context.update(extra_context)

    return render_to_response(template_name,
                              context,
                              context_instance=RequestContext(request, context))
</snippet></ROW><ROW><id>3820076</id><snippet>extra_context</snippet></ROW><ROW><id>3820076</id><snippet>def my_view(reuest):
    return contact_question_create(extra_context={'foo':'bar'})
</snippet></ROW><ROW><id>3820334</id><snippet>fp.write('\n'.join('%s %s' % x for x in mylist))
</snippet></ROW><ROW><id>3820526</id><snippet>Objects/stringobject.c</snippet></ROW><ROW><id>3820526</id><snippet>str</snippet></ROW><ROW><id>3820751</id><snippet>SMTP</snippet></ROW><ROW><id>3820941</id><snippet>def user_profit():
    for u in User.objects.all():
        profit = sum[ t.price - t.cost
            for c in u.card_set.all()
                for t in c.cardtype_set.all() ]
        yield user, profit
</snippet></ROW><ROW><id>3820941</id><snippet>def user_profit():
    for u in User.objects.all():
        profit = sum[ c.cardtype.price - c.cardtype.cost
            for c in u.card_set.all() ]
        yield user, profit
</snippet></ROW><ROW><id>3821307</id><snippet>fd = open( "some file", "r" )
data =  fd.readlines()

page_size = 100

data[0:0+page_size] # move to start
data[120:120+page_size] # move to line 120
here= 120
data[here-10:here-10+page_size] # move back 10 from here
here -= 10
data[here:here+page_size]
here += page_size
data[here:here+page_size]
</snippet></ROW><ROW><id>3821348</id><snippet>def help(self)

  os.system("hh.exe d:/help.chm::/4_Userguide.htm#_Toc270510")
</snippet></ROW><ROW><id>3821615</id><snippet>import numpy as np
import pylab
import matplotlib.cm as cm

arr = np.genfromtxt('data', dtype=None)
n = len(arr)
centers = np.arange(n)
colors = cm.RdYlBu(np.linspace(0, 1, n))
pylab.bar(centers, arr['f0'], color=colors, align='center')
ax = pylab.gca()
ax.set_xticks(centers)
ax.set_xticklabels(arr['f1'], rotation=0)
pylab.show()
</snippet></ROW><ROW><id>3822410</id><snippet>./file.py</snippet></ROW><ROW><id>3822410</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>3822410</id><snippet>which python</snippet></ROW><ROW><id>3822556</id><snippet>def check_pause(self):
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_p:
                self.pause = not self.pause
</snippet></ROW><ROW><id>3822556</id><snippet>while True:
    self.check_pause()
    if self.pause:
        continue
    # Main loop of program goes here.
</snippet></ROW><ROW><id>3822898</id><snippet>n = 1
print '%03d' % n //001
</snippet></ROW><ROW><id>3822956</id><snippet>makefilter</snippet></ROW><ROW><id>3822956</id><snippet>just_vowels = makefilter('aeiou')
</snippet></ROW><ROW><id>3822956</id><snippet>just_vowels</snippet></ROW><ROW><id>3822956</id><snippet>thefilter</snippet></ROW><ROW><id>3822956</id><snippet>print just_vowels('tigere, igers, bigers')
</snippet></ROW><ROW><id>3822956</id><snippet>s</snippet></ROW><ROW><id>3822956</id><snippet>'tigere, igers, bigers'</snippet></ROW><ROW><id>3823523</id><snippet>base = 2 # change to change the rate at which you go through the levels
levels = 30
finalPoints = 2000
scale = levels/math.log(finalPoints, base)
level = math.floor(scale*math.log(points, base))
</snippet></ROW><ROW><id>3823647</id><snippet>word1=(\w+)
</snippet></ROW><ROW><id>3823647</id><snippet>import re
yourstring = 'type=weaksubj len=1 word1=wrestle pos1=verb stemmed1=y priorpolarity=negative'

m = re.search(r'word1=(\w+)', yourstring)
print m.group(1)
</snippet></ROW><ROW><id>3823647</id><snippet>import re
def get_attr(str, attr):
    m = re.search(attr + r'=(\w+)', str)
    return None if not m else m.group(1)

str = 'type=weaksubj len=1 word1=wrestle pos1=verb stemmed1=y priorpolarity=negative'

print get_attr(str, 'word1')  # wrestle
print get_attr(str, 'type')   # weaksubj
print get_attr(str, 'foo')    # None
</snippet></ROW><ROW><id>3823822</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import Image

fname = 'cartoon.png'
image = Image.open(fname).convert("L")
arr = np.asarray(image)
plt.imshow(arr, cmap = cm.Greys_r)
plt.show()
</snippet></ROW><ROW><id>3824001</id><snippet>Process.Start</snippet></ROW><ROW><id>3824001</id><snippet>ProcessStartInfo</snippet></ROW><ROW><id>3824001</id><snippet>FileName</snippet></ROW><ROW><id>3824001</id><snippet>Arguments</snippet></ROW><ROW><id>3824001</id><snippet>RedirectStandardOutput</snippet></ROW><ROW><id>3824001</id><snippet>RedirectStandardError</snippet></ROW><ROW><id>3824001</id><snippet>UseShellExecute</snippet></ROW><ROW><id>3824001</id><snippet>Process</snippet></ROW><ROW><id>3824001</id><snippet>Process.StandardOutput</snippet></ROW><ROW><id>3824001</id><snippet>ReadToEnd()</snippet></ROW><ROW><id>3824001</id><snippet>ReadLine()</snippet></ROW><ROW><id>3824001</id><snippet>Process.ExitCode</snippet></ROW><ROW><id>3824001</id><snippet>Process.WaitForExit</snippet></ROW><ROW><id>3824020</id><snippet>X if Y else Z</snippet></ROW><ROW><id>3824020</id><snippet>def get_attr(str, attr):
    m = re.search(attr + r'=(\w+)', str)
    if m:
        return m.group(1)

    return None
</snippet></ROW><ROW><id>3824386</id><snippet>modify</snippet></ROW><ROW><id>3824386</id><snippet>is_what_I_want</snippet></ROW><ROW><id>3824386</id><snippet>break</snippet></ROW><ROW><id>3824386</id><snippet>for</snippet></ROW><ROW><id>3824386</id><snippet>for i, foo in enumerate(thing_structure.settings):
    if foo.is_what_I_want:
        modify(thing_structure.settings[i])
        found_thing = True
</snippet></ROW><ROW><id>3824386</id><snippet>i</snippet></ROW><ROW><id>3824386</id><snippet>foo</snippet></ROW><ROW><id>3824386</id><snippet>for foo in thing_structure.settings:
    if foo.is_what_I_want:
        modify(foo)
        found_thing = True
</snippet></ROW><ROW><id>3824386</id><snippet>thing_structure.settings = whatever</snippet></ROW><ROW><id>3824386</id><snippet>foo</snippet></ROW><ROW><id>3824405</id><snippet>encoding.search_function(encoding)</snippet></ROW><ROW><id>3824405</id><snippet>encoding</snippet></ROW><ROW><id>3824405</id><snippet>encodings</snippet></ROW><ROW><id>3824405</id><snippet>encoding</snippet></ROW><ROW><id>3824405</id><snippet>pkgutil</snippet></ROW><ROW><id>3824405</id><snippet>encoding</snippet></ROW><ROW><id>3824405</id><snippet>encoding.aliases.aliases</snippet></ROW><ROW><id>3824405</id><snippet>encoding.aliases.aliases</snippet></ROW><ROW><id>3824405</id><snippet>tactis</snippet></ROW><ROW><id>3824405</id><snippet>import encodings
import os
import pkgutil

modnames=set([modname for importer, modname, ispkg in pkgutil.walk_packages(
    path=[os.path.dirname(encodings.__file__)], prefix='')])
aliases=set(encodings.aliases.aliases.values())

print(modnames-aliases)
# set(['charmap', 'unicode_escape', 'cp1006', 'unicode_internal', 'punycode', 'string_escape', 'aliases', 'palmos', 'mac_centeuro', 'mac_farsi', 'mac_romanian', 'cp856', 'raw_unicode_escape', 'mac_croatian', 'utf_8_sig', 'mac_arabic', 'undefined', 'cp737', 'idna', 'koi8_u', 'cp875', 'cp874', 'iso8859_1'])

print(aliases-modnames)
# set(['tactis'])

codec_names=modnames.union(aliases)
print(codec_names)
# set(['bz2_codec', 'cp1140', 'euc_jp', 'cp932', 'punycode', 'euc_jisx0213', 'aliases', 'hex_codec', 'cp500', 'uu_codec', 'big5hkscs', 'mac_romanian', 'mbcs', 'euc_jis_2004', 'iso2022_jp_3', 'iso2022_jp_2', 'iso2022_jp_1', 'gbk', 'iso2022_jp_2004', 'unicode_internal', 'utf_16_be', 'quopri_codec', 'cp424', 'iso2022_jp', 'mac_iceland', 'raw_unicode_escape', 'hp_roman8', 'iso2022_kr', 'cp875', 'iso8859_6', 'cp1254', 'utf_32_be', 'gb2312', 'cp850', 'shift_jis', 'cp852', 'cp855', 'iso8859_3', 'cp857', 'cp856', 'cp775', 'unicode_escape', 'cp1026', 'mac_latin2', 'utf_32', 'mac_cyrillic', 'base64_codec', 'ptcp154', 'palmos', 'mac_centeuro', 'euc_kr', 'hz', 'utf_8', 'utf_32_le', 'mac_greek', 'utf_7', 'mac_turkish', 'utf_8_sig', 'mac_arabic', 'tactis', 'cp949', 'zlib_codec', 'big5', 'iso8859_9', 'iso8859_8', 'iso8859_5', 'iso8859_4', 'iso8859_7', 'cp874', 'iso8859_1', 'utf_16_le', 'iso8859_2', 'charmap', 'gb18030', 'cp1006', 'shift_jis_2004', 'mac_roman', 'ascii', 'string_escape', 'iso8859_15', 'iso8859_14', 'tis_620', 'iso8859_16', 'iso8859_11', 'iso8859_10', 'iso8859_13', 'cp950', 'utf_16', 'cp869', 'mac_farsi', 'rot_13', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'shift_jisx0213', 'johab', 'mac_croatian', 'cp1255', 'latin_1', 'cp1257', 'cp1256', 'cp1251', 'cp1250', 'cp1253', 'cp1252', 'cp437', 'cp1258', 'undefined', 'cp737', 'koi8_r', 'cp037', 'koi8_u', 'iso2022_jp_ext', 'idna'])
</snippet></ROW><ROW><id>3824479</id><snippet>CONSTANT1 = "value1"
CONSTANT2 = "value2"
</snippet></ROW><ROW><id>3824479</id><snippet>import settings

print settings.CONSTANT1
print settings.CONSTANT2
</snippet></ROW><ROW><id>3824479</id><snippet>from settings import CONSTANT1, CONSTANT2

print CONSTANT1
print CONSTANT2
</snippet></ROW><ROW><id>3824479</id><snippet>import settings as s

print s.CONSTANT1
print s.CONSTANT2
</snippet></ROW><ROW><id>3824479</id><snippet>s</snippet></ROW><ROW><id>3824511</id><snippet>cd ./Python-2.5.5/
cat &gt;patch-configure-for-10-6.patch &lt;&lt;EOF
--- configure.O 2008-12-13 06:13:52.000000000 -0800
+++ configure   2010-09-29 10:16:05.000000000 -0700
@@ -2039,7 +2039,11 @@
   # disables platform specific features beyond repair.
   # On Mac OS X 10.3, defining _POSIX_C_SOURCE or _XOPEN_SOURCE
   # has no effect, don't bother defining them
-  FreeBSD/4.* | Darwin/[6789].*)
+  FreeBSD/4.*)
+    define_xopen_source=no;;
+  Darwin/[6789].*)
+    define_xopen_source=no;;
+  Darwin/1[0-9].*)
     define_xopen_source=no;;
   # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but
   # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined
EOF
patch &lt; patch-configure-for-10-6.patch
export CC=/usr/bin/gcc-4.0
./configure --prefix=/usr/local --enable-framework MACOSX_DEPLOYMENT_TARGET=10.6
make
sudo make install
</snippet></ROW><ROW><id>3824511</id><snippet>$ python2.5
Python 2.5.5 (r255:77872, Sep 29 2010, 10:23:54) 
[GCC 4.0.1 (Apple Inc. build 5494)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Module readline not available.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3824511</id><snippet>Mac/BuildScript/</snippet></ROW><ROW><id>3824564</id><snippet>ModelAdmin</snippet></ROW><ROW><id>3824564</id><snippet>get_form</snippet></ROW><ROW><id>3824564</id><snippet>ModelAdmin</snippet></ROW><ROW><id>3825125</id><snippet>import datetime

tests=["201009211100","201009211199"]
for fileTime in tests:
    try:
        date=datetime.datetime.strptime(fileTime,'%Y%m%d%H%M')
        print(date)
    except ValueError as err:
        print(fileTime,err)

# 2010-09-21 11:00:00
# ('201009211199', ValueError('unconverted data remains: 9',))
</snippet></ROW><ROW><id>3825125</id><snippet>In [106]: import dateutil.parser as dparser

In [107]: dparser.parse('201009211100')
Out[107]: datetime.datetime(2010, 9, 21, 11, 0)
</snippet></ROW><ROW><id>3825225</id><snippet>var list = Enumerable.Range(5, 3); // [5, 6, 7]
Console.WriteLine("Aggregation: {0}", list.Aggregate((a, b) =&gt; (a + b)));
// Result is "Aggregation: 18"
</snippet></ROW><ROW><id>3825257</id><snippet>sys.stderr</snippet></ROW><ROW><id>3825441</id><snippet>QtGui.qApp = self</snippet></ROW><ROW><id>3825441</id><snippet>__init__</snippet></ROW><ROW><id>3825441</id><snippet>QApplication.instance()</snippet></ROW><ROW><id>3825441</id><snippet>qApp</snippet></ROW><ROW><id>3826228</id><snippet>def clean(lst):
    if lst.count(lst[0]) == len(lst):
        return [lst[0]]
    else:
        return lst
</snippet></ROW><ROW><id>3826228</id><snippet>def clean_in_place(lst):
    if lst.count(lst[0]) == len(lst):
        lst[:] = [lst[0]]
</snippet></ROW><ROW><id>3826242</id><snippet>else</snippet></ROW><ROW><id>3826242</id><snippet>else:</snippet></ROW><ROW><id>3826587</id><snippet>###
### Backup to memory
###

# We will copy the disk database into a memory database

memcon=apsw.Connection(":memory:")

# Copy into memory
with memcon.backup("main", connection, "main") as backup:
    backup.step() # copy whole database in one go

# There will be no disk accesses for this query
for row in memcon.cursor().execute("select * from s"):
    pass
</snippet></ROW><ROW><id>3826587</id><snippet>connection</snippet></ROW><ROW><id>3826719</id><snippet>ctx.load_verify_locations(str(m.ca_file))
</snippet></ROW><ROW><id>3826815</id><snippet>itertools.tee</snippet></ROW><ROW><id>3826815</id><snippet>def new_cycle( seq, last=None):
    if last is None:
        return cycle(seq)
    else:
        it = cycle(seq)
        while next(it) != last:
            pass
        return it
</snippet></ROW><ROW><id>3826877</id><snippet>a = "hello"
b = "olhel"
print sorted(a) == sorted(b)
</snippet></ROW><ROW><id>3827309</id><snippet>$ awk -vRS= '{print "====&gt;" $0}' file
====&gt;Mon, 01 Jan 2010 01:01:01
  Token1 = ValueXYZ
  Token2 = ValueABC
  Token3 = ValuePQR
  ...
  TokenX = Value123
====&gt;Mon, 01 Jan 2010 01:02:01
  Token1 = ValueXYZ
  Token2 = ValueABC
  Token3 = ValuePQR
  ...
  TokenY = Value456
====&gt;Mon, 01 Jan 2010 01:03:01
  Token1 = ValueXYZ
  Token2 = ValueABC
  Token3 = ValuePQR
</snippet></ROW><ROW><id>3827309</id><snippet>$ awk -vRS= -vFS="\n" '{print "====&gt;" $1}' file
====&gt;Mon, 01 Jan 2010 01:01:01
====&gt;Mon, 01 Jan 2010 01:02:01
====&gt;Mon, 01 Jan 2010 01:03:01
</snippet></ROW><ROW><id>3827309</id><snippet>$ awk -vRS= -vFS="\n" '{for(i=1;i&lt;=NF;i++) if ($i ~/Token1/){ print $i} }' file
  Token1 = ValueXYZ
  Token1 = ValueXYZ
  Token1 = ValueXYZ
</snippet></ROW><ROW><id>3827442</id><snippet>entity.datetime_property.strftime('%m-%d-%y')
</snippet></ROW><ROW><id>3827442</id><snippet>class HomeHandler(BaseHandler):
  def get(self):
    posts = Post.all().order("-creation_date").fetch(50)
    posts = [{'author': post.author,
              'subject': post.subject,
              'date': post.date} for post in posts]
    self.render('home.html', posts=posts)
</snippet></ROW><ROW><id>3827446</id><snippet>class MyClass(object):
    def __init__(self, name):
        self.Name = name
</snippet></ROW><ROW><id>3827446</id><snippet>class MyClassFactory(object):
    Counter = 0
    LastValue = None

    @classmethod
    def Build(cls, name):
        inst = MyClass(name)
        cls.Counter += 1
        cls.LastValue = inst.Name
        return inst   
</snippet></ROW><ROW><id>3827446</id><snippet>&gt;&gt;&gt; x = MyClassFactory.Build("Hello")
&gt;&gt;&gt; MyClassFactory.Counter
1
&gt;&gt;&gt; MyClassFactory.LastValue
'Hello'
&gt;&gt;&gt; y = MyClassFactory.Build("Goodbye")
&gt;&gt;&gt; MyClassFactory.Counter
2
&gt;&gt;&gt; MyClassFactory.LastValue
'Goodbye'
&gt;&gt;&gt; x.Name
'Hello'
&gt;&gt;&gt; y.Name
'Goodbye'
</snippet></ROW><ROW><id>3827446</id><snippet>&gt;&gt;&gt; x.Counter
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'MyClass' object has no attribute 'Counter'
</snippet></ROW><ROW><id>3827530</id><snippet>and</snippet></ROW><ROW><id>3827530</id><snippet>or</snippet></ROW><ROW><id>3827530</id><snippet>True</snippet></ROW><ROW><id>3827530</id><snippet>False</snippet></ROW><ROW><id>3827530</id><snippet>bool</snippet></ROW><ROW><id>3827530</id><snippet>inverses = [x and 1.0/x for x in values]
</snippet></ROW><ROW><id>3827530</id><snippet>inverses = []
for x in values:
    if x:
        inverses.append(1.0/x)
    else:
        inverses.append(x)
</snippet></ROW><ROW><id>3827530</id><snippet>and</snippet></ROW><ROW><id>3827530</id><snippet>or</snippet></ROW><ROW><id>3827530</id><snippet>and</snippet></ROW><ROW><id>3827530</id><snippet>or</snippet></ROW><ROW><id>3827581</id><snippet>class RecordData(object):
    __slots__ = ('id', 'name', 'dirty')

    def __init__(self, rec):
        self.id = rec.id
        self.name = rec.name
        self.dirty = rec.dirty
</snippet></ROW><ROW><id>3827581</id><snippet>def do_it(self):
    records = self.query.filter(Record.dirty == True)
    for record in records:
        pass_to_other_process(RecordData(record))
</snippet></ROW><ROW><id>3827616</id><snippet>EmptyClipboard</snippet></ROW><ROW><id>3827616</id><snippet>SetClipboardData</snippet></ROW><ROW><id>3828040</id><snippet>
Python 2.6.5 (r265:79063, Jun 12 2010, 17:07:01)
[GCC 4.3.4 20090804 (release) 1] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; cdll.LoadLibrary('cygcrypt-0.dll')
&lt;CDLL 'cygcrypt-0.dll', handle 380000 at 7ef4564c&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; cdll.LoadLibrary('libcrypt.dll.a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/ctypes/__init__.py", line 431, in LoadLibrary
    return self._dlltype(name)
  File "/usr/lib/python2.6/ctypes/__init__.py", line 353, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: Permission denied
</snippet></ROW><ROW><id>3828142</id><snippet>def Hello():
 F = 'Y'
 if F == 'Y':
   return
</snippet></ROW><ROW><id>3828142</id><snippet>Hello()
Hey()
</snippet></ROW><ROW><id>3828142</id><snippet>def Hello():
 F = 'Y'
 if F == 'Y':
   Hey()
</snippet></ROW><ROW><id>3828243</id><snippet>guestbook</snippet></ROW><ROW><id>3828243</id><snippet>/sign</snippet></ROW><ROW><id>3828276</id><snippet>$ pybabel extract -F ./babel.cfg -o ./locale/messages.pot ./templates/ ./app/
</snippet></ROW><ROW><id>3828276</id><snippet>$ pybabel init -l en_US -d ./locale -i ./locale/messages.pot 
$ pybabel init -l es_ES -d ./locale -i ./locale/messages.pot 
$ pybabel init -l pt_BR -d ./locale -i ./locale/messages.pot
</snippet></ROW><ROW><id>3828276</id><snippet>$ pybabel compile -f -d ./locale
</snippet></ROW><ROW><id>3828276</id><snippet>$ pybabel update -l pt_BR -d ./locale/ -i ./locale/messages.pot
</snippet></ROW><ROW><id>3828510</id><snippet>QPolygon</snippet></ROW><ROW><id>3828510</id><snippet>points = [QPoint(30, 0), QPoint(-30, 0), QPoint(0, 200)]
needle = Qt.QPolygon(points)
</snippet></ROW><ROW><id>3828869</id><snippet>if (!GET_IDENTIFIER(top) ||
    !symtable_enter_block(st, top, ModuleBlock, (void *)mod, 0)) {
    PySymtable_Free(st);
    return NULL;
}
</snippet></ROW><ROW><id>3828869</id><snippet>if (name == GET_IDENTIFIER(top))
    st-&gt;st_global = st-&gt;st_cur-&gt;ste_symbols;
</snippet></ROW><ROW><id>3828869</id><snippet>#define GET_IDENTIFIER(VAR) \
    ((VAR) ? (VAR) : ((VAR) = PyString_InternFromString(# VAR)))
</snippet></ROW><ROW><id>3828869</id><snippet>top</snippet></ROW><ROW><id>3829119</id><snippet>s.setblocking(0)
</snippet></ROW><ROW><id>3829119</id><snippet>socket.settimeout(value)
</snippet></ROW><ROW><id>3829119</id><snippet>conn, address = s.accept()
</snippet></ROW><ROW><id>3829860</id><snippet>Key.from_path()</snippet></ROW><ROW><id>3829860</id><snippet>class Phone(Model):
  phone_name = db.StringProperty()

r = Phone(phone_name='Nokia', key_name='first')
r.put()

k = db.Key.from_path('Phone', 'first')

r = db.get(k)
</snippet></ROW><ROW><id>3830040</id><snippet>import mango.settings</snippet></ROW><ROW><id>3830040</id><snippet>mango.settings.foo = 'bar'
</snippet></ROW><ROW><id>3830040</id><snippet>from mango.settings import *</snippet></ROW><ROW><id>3830144</id><snippet>django.core.serializers.xml_serializer.Serializer</snippet></ROW><ROW><id>3830144</id><snippet>YourSerializer('xml', myModel.objects.filter(instanceIwantTowrite), fields=('fieldName'))
</snippet></ROW><ROW><id>3830144</id><snippet>from django.template.loader import render_to_string

def my_serialize(query_set):
    xml = render_to_string('xml_template.xml', {'query_set': query_set})

    return xml
</snippet></ROW><ROW><id>3830144</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;textFields&gt;
     {% for object in query_set %}
     &lt;textField id="{{ object.pk }}" text="{{ object.my_field }}" /&gt;
     {% endfor %}
&lt;/textFields&gt;
</snippet></ROW><ROW><id>3830457</id><snippet>  def printiti(self, titi=None):
    if titi is None:
      titi = self.titi
    print titi
</snippet></ROW><ROW><id>3830577</id><snippet>WAF=python tools/waf-light
</snippet></ROW><ROW><id>3830577</id><snippet>WAF=/usr/bin/python tools/waf-light
</snippet></ROW><ROW><id>3830605</id><snippet>:h =
</snippet></ROW><ROW><id>3830605</id><snippet>=a{</snippet></ROW><ROW><id>3830605</id><snippet>=a}</snippet></ROW><ROW><id>3830605</id><snippet>=aB</snippet></ROW><ROW><id>3830605</id><snippet>=2a{</snippet></ROW><ROW><id>3830605</id><snippet>=%</snippet></ROW><ROW><id>3830605</id><snippet>&gt;a{</snippet></ROW><ROW><id>3830605</id><snippet>&lt;a{</snippet></ROW><ROW><id>3830605</id><snippet>.</snippet></ROW><ROW><id>3830605</id><snippet>&lt;a{.</snippet></ROW><ROW><id>3830605</id><snippet>filetype</snippet></ROW><ROW><id>3830605</id><snippet>:h gq
</snippet></ROW><ROW><id>3830680</id><snippet>ssh -oNumberOfPasswordPrompts=0 &lt;host&gt; "echo hello"
</snippet></ROW><ROW><id>3830711</id><snippet>cellChanged(int, int)</snippet></ROW><ROW><id>3830711</id><snippet>QTableWidget</snippet></ROW><ROW><id>3830711</id><snippet>import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

#signal handler
def myCellChanged(row, col):
    print row, col

#just a helper function to setup the table
def createCheckItem(table, row, col):
    check = QTableWidgetItem("Test")
    check.setCheckState(Qt.Checked)
    table.setItem(row,col,check)

app = QApplication(sys.argv)

#create the 5x5 table...
table = QTableWidget(5,5)
map(lambda (row,col): createCheckItem(table, row, col),
   [(row, col) for row in range(0, 5) for col in range(0, 5)])
table.show()

#...and connect our signal handler to the cellChanged(int, int) signal
QObject.connect(table, SIGNAL("cellChanged(int, int)"), myCellChanged)
app.exec_()
</snippet></ROW><ROW><id>3830711</id><snippet>myCellChanged</snippet></ROW><ROW><id>3830711</id><snippet>QTableWidget.item(someRow, someColumn).checkState()</snippet></ROW><ROW><id>3830736</id><snippet>subprocess.Popen('ulimit -v 1024; ls', shell=True)
</snippet></ROW><ROW><id>3830786</id><snippet>&gt;&gt;&gt; ['_'.join(itemList[i:i+3]) for i in range(len(itemList)-2)]
['a_b_c', 'b_c_d', 'c_d_e', 'd_e_f', 'e_f_g', 'f_g_h']
</snippet></ROW><ROW><id>3830786</id><snippet>&gt;&gt;&gt; for i in range(len(itemList)-2):
    print('_'.join(itemList[i:i+3]))
</snippet></ROW><ROW><id>3830978</id><snippet>df</snippet></ROW><ROW><id>3831317</id><snippet>http://www.mywebapp.com/images/foo1.jpg</snippet></ROW><ROW><id>3831317</id><snippet>/images/</snippet></ROW><ROW><id>3831517</id><snippet>&gt;&gt;&gt; l=[(7, (5, 1)), (7, (4, 1)), (6, (3, 2)), (6, (3, 1))]
&gt;&gt;&gt; sorted(l, key = lambda x: (-x[0], x[1]))
[(7, (4, 1)), (7, (5, 1)), (6, (3, 1)), (6, (3, 2))]
</snippet></ROW><ROW><id>3831517</id><snippet>sum(x[1])</snippet></ROW><ROW><id>3831517</id><snippet>x[1]</snippet></ROW><ROW><id>3831517</id><snippet>&gt;&gt;&gt; sorted([(1,2), (1,1), (1,-1), (0,5)])
[(0, 5), (1, -1), (1, 1), (1, 2)]
</snippet></ROW><ROW><id>3831682</id><snippet>make_canonical</snippet></ROW><ROW><id>3831682</id><snippet># The inputs are equivalent and should return the same value
print make_canonical([8, 12 | 1]) # returns [8, 13]
print make_canonical([12, 8 | 1]) # returns [12, 9]
</snippet></ROW><ROW><id>3831682</id><snippet>import collections

def canonical(cards):
    """
    Rules for a canonical hand:
    1. The cards are in sorted order

    2. The i-th suit must have at least many cards as all later suits.  If a
       suit isn't present, it counts as having 0 cards.

    3. If two suits have the same number of cards, the ranks in the first suit
       must be lower or equal lexicographically (e.g., [1, 3] &lt;= [2, 4]).

    4. Must be a valid hand (no duplicate cards)
    """

    if sorted(cards) != cards:
        return False
    by_suits = collections.defaultdict(list)
    for suit in range(0, 52, 13):
        by_suits[suit] = [card%13 for card in cards if suit &lt;= card &lt; suit+13]
        if len(set(by_suits[suit])) != len(by_suits[suit]):
            return False
    for suit in range(13, 52, 13):
        suit1 = by_suits[suit-13]
        suit2 = by_suits[suit]
        if not suit2: continue
        if len(suit1) &lt; len(suit2):
            return False
        if len(suit1) == len(suit2) and suit1 &gt; suit2:
            return False
    return True

def deal_cards(permutations, n, cards):
    if len(cards) == n:
        permutations.append(list(cards))
        return
    start = 0
    if cards:
        start = max(cards) + 1
    for card in range(start, 52):
        cards.append(card)
        if canonical(cards):
            deal_cards(permutations, n, cards)
        del cards[-1]

def generate_permutations(n):
    permutations = []
    deal_cards(permutations, n, [])
    return permutations

for cards in generate_permutations(5):
    print cards
</snippet></ROW><ROW><id>3831682</id><snippet>Cashew:~/$ python2.6 /tmp/cards.py | wc
134459
</snippet></ROW><ROW><id>3831719</id><snippet>codecs</snippet></ROW><ROW><id>3831719</id><snippet>write</snippet></ROW><ROW><id>3831719</id><snippet>import bz2

class BZ2StreamEncoder(object):
    def __init__(self, filename, mode):
        self.log_file = open(filename, mode)
        self.encoder = bz2.BZ2Compressor()

    def write(self, data):
        self.log_file.write(self.encoder.compress(data))

    def flush(self):
        self.log_file.write(self.encoder.flush())
        self.log_file.flush()

    def close(self):
        self.flush()
        self.log_file.close()

log_file = BZ2StreamEncoder(archive_file, 'ab')
</snippet></ROW><ROW><id>3831719</id><snippet>bunzip2</snippet></ROW><ROW><id>3831853</id><snippet>for x in range(-4,5):
   print "hex x %d 0x%08X" % (x, x &amp; 0xffffffff)
</snippet></ROW><ROW><id>3832118</id><snippet>class FanOutTask(webapp.RequestHandler):
  def get(self):
    name = self.request.get('name')
    params = deserialize(self.request.get('params'))

    try:
      task_params = params.get('stuff')
      taskqueue.add(url='/worker/1', name=name + '-1', params=task_params)
    except TaskAlreadyExistsError:
      pass

    try:
      task_params = params.get('more')
      taskqueue.add(url='/worker/2', name=name + '-2', params=task_params)
    except TaskAlreadyExistsError:
      pass
</snippet></ROW><ROW><id>3832439</id><snippet>set PYTHONPATH=C:\texttool1\build</snippet></ROW><ROW><id>3832439</id><snippet>dir1\script2.py</snippet></ROW><ROW><id>3832439</id><snippet>from  core.parsers2.html.node import *</snippet></ROW><ROW><id>3832439</id><snippet>from .core.parsers2.html.node import *</snippet></ROW><ROW><id>3832949</id><snippet>RewriteMap escape int:escape
  [...]
RewriteRule ^/cp\/(.*) http://localhost:8500/cp/${escape:$1} [L,P]
</snippet></ROW><ROW><id>3832949</id><snippet>server.socket_host = "127.0.0.1"
server.socket_port = 8500
</snippet></ROW><ROW><id>3833007</id><snippet>color</snippet></ROW><ROW><id>3833007</id><snippet>facecolor</snippet></ROW><ROW><id>3833007</id><snippet>color=['r','b','b','b','b']</snippet></ROW><ROW><id>3833007</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

N = 5
ind = np.arange(N)
width = 0.5
vals = [1,2,3,4,5]
colors = ['r','b','b','b','b']
ax.barh(ind, vals, width, color=colors)

plt.show()
</snippet></ROW><ROW><id>3833007</id><snippet>colors = []
for value in dictionary.keys(): # keys are the names of the boys
    if winner == value:
        colors.append('r')
    else:
        colors.append('b')

bar(ind,num,width,color=colors)
</snippet></ROW><ROW><id>3833035</id><snippet>easy_install lxml==2.2.8
</snippet></ROW><ROW><id>3833035</id><snippet>easy_install</snippet></ROW><ROW><id>3833035</id><snippet>pip</snippet></ROW><ROW><id>3833035</id><snippet>easy_install pip
pip install lxml==2.2.8
</snippet></ROW><ROW><id>3833035</id><snippet>pip</snippet></ROW><ROW><id>3833035</id><snippet>uninstall</snippet></ROW><ROW><id>3833435</id><snippet>MyClass</snippet></ROW><ROW><id>3833476</id><snippet>"""Send a single GTalk message to myself"""

import xmpp
import time

_SERVER = 'talk.google.com', 5223
USERNAME = 'someuser@gmail.com'
PASSWORD = 'whatever'


def sendMessage(tojid, text, username=USERNAME, password=PASSWORD):
    jid = xmpp.protocol.JID(username)
    client = xmpp.Client(jid.getDomain(), debug=[])
    #self.client.RegisterHandler('message', self.message_cb)
    if not client:
      print 'Connection failed!'
      return
    con = client.connect(server=_SERVER)
    print 'connected with', con
    auth = client.auth(jid.getNode(), password, 'botty')
    if not auth:
      print 'Authentication failed!'
      return
    client.RegisterHandler('message', message_cb)
    roster = client.getRoster()
    client.sendInitPresence()
    if '/' in tojid:
        tail = tojid.split('/')[-1]
        t = time.time() + 1
        while time.time() &lt; t:
            client.Process(1)
            time.sleep(0.1)
            if [ res for res in roster.getResources(tojid) if res.startswith(tail) ]:
                break
        for res in roster.getResources(tojid):
            if res.startswith(tail):
                tojid = tojid.split('/', 1)[0] + '/' + res

    print "sending to", tojid
    id = client.send(xmpp.protocol.Message(tojid, text))
    t = time.time() + 1
    while time.time() &lt; t:
        client.Process(1)
        time.sleep(0.1)
    print "status", roster.getStatus(tojid)
    print "show", roster.getShow(tojid)
    print "resources", roster.getResources(tojid)
    client.disconnect()

def message_cb(session, message):
    print "&gt;", message

sendMessage(USERNAME + '/Talk', "This is an automatically generated gtalk message: did you get it?")
</snippet></ROW><ROW><id>3833534</id><snippet>typ, data = imap_conn.fetch(uid, '(BODY.PEEK[TEXT])')
</snippet></ROW><ROW><id>3833630</id><snippet>from itertools import izip_longest
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3833630</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6]
&gt;&gt;&gt; for a,b in grouper(2, l):
&gt;&gt;&gt;     print a, b

1 2
3 4
5 6
</snippet></ROW><ROW><id>3833879</id><snippet>blue.dll</snippet></ROW><ROW><id>3833879</id><snippet>import blue</snippet></ROW><ROW><id>3833879</id><snippet>blue.dll</snippet></ROW><ROW><id>3833879</id><snippet>$ strings blue.dll | egrep "python|Py" | less
BlueObjectBuilderPython
BlueEventToPython
IBluePyOS
IPythonEvents
IPythonMethods
IPythonNumeric
PythonEvents
BlueEventToPython
BlueObjectBuilderPython
Proxy object builder that calls a python method to construct the object.
BeOS::Python
BlueOS/mShutdownPythonCallbacks
Py_FatalError: %s
Fatal Python error: %s
PumpOS::end PumpPython
s|O:PyCreateInstance
Thunker for constructing python objects.
python file object api
Python object
Python object pointer
An unrepresentable Python object
PyOS::StacklessIoDispatch
PyOS::Run Watchdog
PyOS::Create Tasklet
PyOS::PyError
PyOS::Synchro Tick
Python Logs
Runs a python script.
Enable python ref. stack trace
Returns the python and blue reference counts
Error while calling Python logging callback function. Disabling logging in Python!
BluePyOS
BluePyOS/mThreads
</snippet></ROW><ROW><id>3834261</id><snippet>repr</snippet></ROW><ROW><id>3834261</id><snippet>&gt;&gt;&gt; print(repr(t))
4.999999999999998
&gt;&gt;&gt; print(t == 5.)
False
</snippet></ROW><ROW><id>3834261</id><snippet>format</snippet></ROW><ROW><id>3834261</id><snippet>&gt;&gt;&gt; print '{0:.60f}'.format(t)
4.999999999999998223643160599749535322189331054687500000000000
&gt;&gt;&gt; print '{0:.60f}'.format(0.1)
0.100000000000000005551115123125782702118158340454101562500000
</snippet></ROW><ROW><id>3834261</id><snippet>from decimal import Decimal    
step = Decimal('0.1')

t = Decimal(0)
while t &lt; Decimal(5):  
    t += step 

print(t)
print(t == Decimal(5))
</snippet></ROW><ROW><id>3834542</id><snippet>list1=[3,2,1,6,5,4]
n_list1 = len(list1)
for position1, item1 in enumerate(list1):
    for position2 in range(position1,n_list1):
        if list1[position1]&gt;list1[position2]:
            list1[position1] , list1[position2] = list1[position2], list1[position1]
print list1
</snippet></ROW><ROW><id>3834542</id><snippet>[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>3834542</id><snippet>&gt;&gt;&gt; a = 4
&gt;&gt;&gt; b = 5
&gt;&gt;&gt; a , b  = b, a
&gt;&gt;&gt; a
5
&gt;&gt;&gt; b
4
&gt;&gt;&gt; c  = 5
&gt;&gt;&gt; d = 6
&gt;&gt;&gt; t = c
&gt;&gt;&gt; c = d
&gt;&gt;&gt; d = t 
&gt;&gt;&gt; c
6
&gt;&gt;&gt; d
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3834765</id><snippet>print hash(str(sorted({1 : 2, 3 : 4}.items())))
</snippet></ROW><ROW><id>3834765</id><snippet>import hashlib
print hashlib.md5(str(sorted({1 : 2, 3 : 4}.items()))).hexdigest()
</snippet></ROW><ROW><id>3834765</id><snippet>import pickle
serializedString = pickle.dumps({1 : 2, 3 : 4})
</snippet></ROW><ROW><id>3834765</id><snippet>pickle</snippet></ROW><ROW><id>3834765</id><snippet>d = pickle.loads(serializedString)</snippet></ROW><ROW><id>3834765</id><snippet>someDictionary.items()</snippet></ROW><ROW><id>3834765</id><snippet>&gt;&gt;&gt; repr({1 : 2, 3 : 4}.items())
'[(1, 2), (3, 4)]'
</snippet></ROW><ROW><id>3834864</id><snippet>decimal</snippet></ROW><ROW><id>3835288</id><snippet>[a, b]</snippet></ROW><ROW><id>3835288</id><snippet>[a, b, c]</snippet></ROW><ROW><id>3835288</id><snippet>% for stuff in thing.return_list_of_stuff:
    &lt;div&gt;${stuff}&lt;/div&gt;
% endfor
</snippet></ROW><ROW><id>3835414</id><snippet>import subprocess    
proc=subprocess.Popen(['ls','-l'])  # &lt;-- Change the command here
proc.communicate()
</snippet></ROW><ROW><id>3835414</id><snippet>Popen</snippet></ROW><ROW><id>3835414</id><snippet>shlex.split</snippet></ROW><ROW><id>3835414</id><snippet>import shlex
proc=subprocess.Popen(shlex.split('ls -l'))  
proc.communicate()
</snippet></ROW><ROW><id>3835478</id><snippet>def flatten(d):
    """Recursively flatten dictionary values in `d`.

    &gt;&gt;&gt; hat = {'cat': ['images/cat-in-the-hat.png'],
    ...        'fish': {'colours': {'red': [0xFF0000], 'blue': [0x0000FF]},
    ...                 'numbers': {'one': [1], 'two': [2]}},
    ...        'food': {'eggs': {'green': [0x00FF00]},
    ...                 'ham': ['lean', 'medium', 'fat']}}
    &gt;&gt;&gt; set_of_values = set(flatten(hat))
    &gt;&gt;&gt; sorted(set_of_values)
    [1, 2, 255, 65280, 16711680, 'fat', 'images/cat-in-the-hat.png', 'lean', 'medium']
    """
    try:
        for v in d.itervalues():
            for nested_v in flatten(v):
                yield nested_v
    except AttributeError:
        for list_v in d:
            yield list_v
</snippet></ROW><ROW><id>3835478</id><snippet>set</snippet></ROW><ROW><id>3835478</id><snippet>set</snippet></ROW><ROW><id>3835478</id><snippet>flatten(hat)</snippet></ROW><ROW><id>3835478</id><snippet>set</snippet></ROW><ROW><id>3835478</id><snippet>collections.Counter</snippet></ROW><ROW><id>3835478</id><snippet>sorted</snippet></ROW><ROW><id>3835478</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3835589</id><snippet>hg clone https://gregmalcolm@bitbucket.org/gregmalcolm/python_koans
hg update -r 80
</snippet></ROW><ROW><id>3835589</id><snippet>git clone http://github.com/gregmalcolm/python_koans
git checkout -b nocolor a410591b5aaeec57a4a8
</snippet></ROW><ROW><id>3835871</id><snippet>a = "Hello"
print a[0]
print a[4]
</snippet></ROW><ROW><id>3836052</id><snippet>r''</snippet></ROW><ROW><id>3836052</id><snippet>\u</snippet></ROW><ROW><id>3836052</id><snippet>[0-\]</snippet></ROW><ROW><id>3836052</id><snippet>&gt;&gt;&gt; re.compile(r'[\u0020-\u00d7ff]', re.DEBUG)
in
  literal 117
  literal 48
  literal 48
  literal 50
  range (48, 117)
  literal 48
  literal 48
  literal 100
  literal 55
  literal 102
  literal 102
</snippet></ROW><ROW><id>3836052</id><snippet>\u</snippet></ROW><ROW><id>3836052</id><snippet>\uxxxx</snippet></ROW><ROW><id>3836052</id><snippet>\Uxxxxxxxx</snippet></ROW><ROW><id>3836052</id><snippet>\u00d7</snippet></ROW><ROW><id>3836052</id><snippet>f</snippet></ROW><ROW><id>3836052</id><snippet>f</snippet></ROW><ROW><id>3836052</id><snippet>&gt;&gt;&gt; re.compile(ur'[\u0020-\u00d7ff]', re.DEBUG)
in
  range (32, 215)
  literal 102
  literal 102
</snippet></ROW><ROW><id>3836052</id><snippet>\U0000d7ff</snippet></ROW><ROW><id>3836052</id><snippet>&gt;&gt;&gt; re.compile(ur'[\u0020-\ud7ff]', re.DEBUG)
in
  range (32, 55295)
</snippet></ROW><ROW><id>3836151</id><snippet>s[str(row.wbcode)+str(row.Year)]=float(row[query_name])
</snippet></ROW><ROW><id>3836453</id><snippet>&gt;&gt;&gt; s = "foo_M_bar_type foo_R_bar_type foo_L_bar_type"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("_[LR]_", lambda m: {'_L_':'_R_','_R_':'_L_'}[m.group()], s)
'foo_M_bar_type foo_L_bar_type foo_R_bar_type'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3836467</id><snippet>def launchVim():
    os.system("vim")

def testThatVimIsLaunched():
    try:
        realSystem = os.system
        called = []
        def stubSystem(command):
            if command == "vim":
                called.append(True)
        os.system = stubSystem

        launchVim() # function under test

        assert(called == [True])
    finally:
        os.system = realSystem
</snippet></ROW><ROW><id>3836814</id><snippet> root = Tk()
 root.wm_iconbitmap('my_icon.ico')
 root.mainloop()
</snippet></ROW><ROW><id>3836840</id><snippet>binascii.hexlify(base64.decodestring('Sl96FJtZbZDZECSP3EedQJbsXdtlV+LXWd4+jbzvbHM='))
</snippet></ROW><ROW><id>3836929</id><snippet>name</snippet></ROW><ROW><id>3836929</id><snippet>info</snippet></ROW><ROW><id>3837018</id><snippet>stdin</snippet></ROW><ROW><id>3837018</id><snippet>import sys
data = sys.stdin.read()
</snippet></ROW><ROW><id>3837540</id><snippet>ifconfig</snippet></ROW><ROW><id>3837540</id><snippet>/proc/net/dev</snippet></ROW><ROW><id>3837561</id><snippet>i</snippet></ROW><ROW><id>3837561</id><snippet>j</snippet></ROW><ROW><id>3837561</id><snippet>s0 = [set([16,9,2,10]), set([16,14,22,15]), set([14,7])]   # true, 16 and 14
s1 = [set([16,9,2,10]), set([16,14,22,15]), set([7,8])]    # false


def connected(sets):
    L = len(sets)

    if not L: return True
    if L == 1: return False

    passed = [False] * L
    i = 0
    while True:
        while passed[i]: 
            i += 1
            if i == L: 
                return True

        for j, s in enumerate(sets):
            if j == i: continue
            if sets[i] &amp; s: 
                passed[i] = passed[j] = True
                break
        else:
            return False


print connected(s0)
print connected(s1)
</snippet></ROW><ROW><id>3837565</id><snippet>x = raw_input("Choice")
if x == '1': 
    do_this()
</snippet></ROW><ROW><id>3837622</id><snippet>pycheckers.bat</snippet></ROW><ROW><id>3837622</id><snippet>pylint -f parseable -r n --disable=C,R,I %1 %2 %3 %4 %5 %6 %7 %8 %9
exit /b 0
</snippet></ROW><ROW><id>3837622</id><snippet>(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "pycheckers"  (list local-file))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))
</snippet></ROW><ROW><id>3837622</id><snippet>flymake-mode</snippet></ROW><ROW><id>3837622</id><snippet>pycheckers.bat</snippet></ROW><ROW><id>3837703</id><snippet>import os
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class myHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write("This is working")

def main():
    try:
        server = HTTPServer(("", 8080), myHandler)
        print "Sever is up.."
        server.serve_forever()
    except KeyboardInterrupt:
        print
        print "Bye, Bye!"
        server.socket.close()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3837752</id><snippet># content of conftest.py
def pytest_sessionstart():
    # setup resources before any test is executed

def pytest_sessionfinish():
    # teardown resources after the last test has executed
</snippet></ROW><ROW><id>3837782</id><snippet>import socket

x = raw_input ("\nPlease enter a domain name that you wish to translate: ")  

data = socket.gethostbyname_ex(x)
print ("\n\nThe IP Address of the Domain Name is: "+repr(data))  

x = raw_input("\nSelect enter to proceed back to Main Menu\n")  
if x == '1':   
    execfile('C:\python\main_menu.py')  
</snippet></ROW><ROW><id>3837802</id><snippet>        conn = httplib.HTTPConnection("mustafa-yontar.commondatastorage.googleapis.com")
        conn.set_debuglevel(2)
        f = open(filename,"r")
        m = hashlib.md5()
        m.update(f.read())
        h = m.hexdigest()
        has = h
        dd = "%s" % datetime.datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT")
        strToSign = "PUT\n"+h+"\n\n"+dd+"\nx-goog-acl:public-read\n/mustafa-yontar/x.jpg"

        sig = base64.b64encode(hmac.new(self.secret, strToSign, hashlib.sha1).digest())
        total = os.path.getsize(filename)

        header = {"Date":dd,"x-goog-acl":"public-read","Content-MD5":h,'Content-Length':total,'Authorization':"GOOG1 %s:%s" % (self.key,sig)}

        conn.putrequest('PUT', "/x.jpg")
        for h in header:
            conn.putheader(h, header[h])
        conn.endheaders()
        bytess = open('x.jpg', 'rb').read()
        f = StringIO(bytess)
        f.seek(0)


        while True:
            bytes = f.read(1024)
            if not bytes: break

            length = len(bytes)
            conn.send('%X\r\n' % length)
            conn.send(bytes + '\r\n')
        conn.send('0\r\n\r\n')

        #errcode, errmsg, headers = conn.getresponse()
        #h.close()


        #conn.request("PUT","/mustafa-yontar/x.jpg",f.read(),header)
        r1 = conn.getresponse()
        print r1.status, r1.reason
        print r1.read()
        conn.close()
        print has
</snippet></ROW><ROW><id>3837823</id><snippet>import os

outp = os.popen('php ./index.php')
text = outp.read() # this will block until php finishes
                   # and returns with all output in text
print text
</snippet></ROW><ROW><id>3838090</id><snippet>__init__.py</snippet></ROW><ROW><id>3838090</id><snippet>import locale
import gettext
import os

current_locale, encoding = locale.getdefaultlocale()

locale_path = 'datas/locale/'
language = gettext.translation ('brainz', locale_path, [current_locale] )
language.install()
</snippet></ROW><ROW><id>3838357</id><snippet>f(x) = A*x + b = y
</snippet></ROW><ROW><id>3838357</id><snippet>Segment1 = {(X1, Y1), (X2, Y2)}
Segment2 = {(X3, Y3), (X4, Y4)}
</snippet></ROW><ROW><id>3838357</id><snippet>I1 = [MIN(X1,X2), MAX(X1,X2)]
I2 = [MIN(X3,X4), MAX(X3,X4)]
</snippet></ROW><ROW><id>3838357</id><snippet>Ia = [MAX( MIN(X1,X2), MIN(X3,X4) ), MIN( MAX(X1,X2), MAX(X3,X4)] )]
</snippet></ROW><ROW><id>3838357</id><snippet>if (MAX(X1,X2) &lt; MIN(X3,X4))
    return false; // There is no mutual abcisses
</snippet></ROW><ROW><id>3838357</id><snippet>f1(x) = A1*x + b1 = y
f2(x) = A2*x + b2 = y
</snippet></ROW><ROW><id>3838357</id><snippet>A1 = (Y1-Y2)/(X1-X2) // Pay attention to not dividing by zero
A2 = (Y3-Y4)/(X3-X4) // Pay attention to not dividing by zero
b1 = Y1-A1*X1 = Y2-A1*X2
b2 = Y3-A2*X3 = Y4-A2*X4
</snippet></ROW><ROW><id>3838357</id><snippet>if (A1 == A2)
    return false; // Parallel segments
</snippet></ROW><ROW><id>3838357</id><snippet>Ya = A1 * Xa + b1
Ya = A2 * Xa + b2
A1 * Xa + b1 = A2 * Xa + b2
Xa = (b2 - b1) / (A1 - A2) // Once again, pay attention to not dividing by zero
</snippet></ROW><ROW><id>3838357</id><snippet>if ( (Xa &lt; MAX( MIN(X1,X2), MIN(X3,X4) )) ||
  (Xa &gt; MIN( MAX(X1,X2), MAX(X3,X4) )) )
    return false; // intersection is out of bound
else
    return true;
</snippet></ROW><ROW><id>3838390</id><snippet>theta0 = theta0 - step * dEdtheta0
theta1 = theta1 - step * dEdtheta1
theta2 = theta2 - step * dEdtheta2
</snippet></ROW><ROW><id>3838390</id><snippet>n = max( [ dEdtheta1, dEdtheta1, dEdtheta2 ] )    
theta0 = theta0 - step * dEdtheta0 / n
theta1 = theta1 - step * dEdtheta1 / n
theta2 = theta2 - step * dEdtheta2 / n
</snippet></ROW><ROW><id>3838398</id><snippet>v1 = {x2-x1, y2-y1}   # Vector 1
v2 = {x2-xA, y2-yA}   # Vector 1
xp = v1.x*v2.y - v1.y*v2.x  # Cross product
if xp &gt; 0:
    print 'on one side'
elif xp &lt; 0:
    print 'on the other'
else:
    print 'on the same line!'
</snippet></ROW><ROW><id>3838459</id><snippet>pdftk</snippet></ROW><ROW><id>3838459</id><snippet>echo "InfoKey: Producer" &gt; producerinfo
echo "InfoValue: my program" &gt;&gt; producerinfo
pdftk file.pdf update_info producerinfo output newfile.pdf
rm producerinfo
</snippet></ROW><ROW><id>3838495</id><snippet>region = House.crop(box).load()</snippet></ROW><ROW><id>3838495</id><snippet>load()</snippet></ROW><ROW><id>3838495</id><snippet>region = House.crop(box)
region.load()
</snippet></ROW><ROW><id>3838877</id><snippet>routes = Routes.objects.select_related('vehicle').filter(**conditions).only(
            'externalid', 'vehicle__name')
</snippet></ROW><ROW><id>3838877</id><snippet>vehicle</snippet></ROW><ROW><id>3838877</id><snippet>Routes</snippet></ROW><ROW><id>3838877</id><snippet>select_related()</snippet></ROW><ROW><id>3838905</id><snippet>import datetime
import pytz
import pytz.tzinfo

def tzinfo_repr(self):
    return 'pytz.timezone({z})'.format(z=self.zone)
pytz.tzinfo.DstTzInfo.__repr__=tzinfo_repr

berlin=pytz.timezone('Europe/Berlin')
now = datetime.datetime.now(berlin)
print(repr(now))
# datetime.datetime(2010, 10, 1, 14, 39, 4, 456039, tzinfo=pytz.timezone("Europe/Berlin"))
</snippet></ROW><ROW><id>3838905</id><snippet>pytz.timezone("Europe/Berlin")</snippet></ROW><ROW><id>3838905</id><snippet>pytz.timezone("Europe/Berlin"))</snippet></ROW><ROW><id>3838905</id><snippet>__repr__</snippet></ROW><ROW><id>3838905</id><snippet>self</snippet></ROW><ROW><id>3838905</id><snippet>datetime.tzinfo</snippet></ROW><ROW><id>3838905</id><snippet>class MyTimezone(datetime.tzinfo):
    def __init__(self,zone):
        self.timezone=pytz.timezone(zone)
    def __repr__(self):
        return 'MyTimezone("{z}")'.format(z=self.timezone.zone)
    def utcoffset(self, dt):
        return self.timezone._utcoffset
    def tzname(self, dt):
        return self.timezone._tzname
    def dst(self, dt):
        return self.timezone._dst

berlin=MyTimezone('Europe/Berlin')
now = datetime.datetime.now(berlin)
print(repr(now))
# datetime.datetime(2010, 10, 1, 19, 2, 58, 702758, tzinfo=MyTimezone("Europe/Berlin"))
</snippet></ROW><ROW><id>3839379</id><snippet>zlib.compress("Hello, world".encode("utf-8"))
b'x\x9c\xf3H\xcd\xc9\xc9\xd7Q(\xcf/\xcaI\x01\x00\x1b\xd4\x04i'
zlib.compress("Hello, world".encode("ascii"))
b'x\x9c\xf3H\xcd\xc9\xc9\xd7Q(\xcf/\xcaI\x01\x00\x1b\xd4\x04i'
</snippet></ROW><ROW><id>3839379</id><snippet>&gt;&gt;&gt; zlib.compress("Hello, wørld".encode("utf-16"))
b'x\x9c\xfb\xff\xcf\x83!\x95!\x07\x08\xf3\x19t\x18\x14\x18\xca\x19~0\x14\x01y)\x0c\x00n\xa6\x06\xef'
&gt;&gt;&gt; zlib.compress("Hello, wørld".encode("utf-8"))
b"x\x9c\xf3H\xcd\xc9\xc9\xd7Q(?\xbc\xa3('\x05\x00#\x7f\x05u"
</snippet></ROW><ROW><id>3839427</id><snippet>python setup.py install
</snippet></ROW><ROW><id>3839427</id><snippet>$ export PYTHONPATH=/contains/modules:$PYTHONPATH
</snippet></ROW><ROW><id>3839514</id><snippet>widget-&gt;raise()</snippet></ROW><ROW><id>3839514</id><snippet>widget-&gt;activateWindow()</snippet></ROW><ROW><id>3839820</id><snippet>python myprog.py --executable "python someOtherProg.py"
</snippet></ROW><ROW><id>3839820</id><snippet>optparse</snippet></ROW><ROW><id>3839820</id><snippet>optparse</snippet></ROW><ROW><id>3839820</id><snippet>argparse</snippet></ROW><ROW><id>3839820</id><snippet>#!/usr/bin/python
import argparse, sys

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Demonstration of Argparse.')
    parser.add_argument('-e', '--executable', nargs = '+', help = 'List of executables')
    args = parser.parse_args(sys.argv[1:])
    print args.executable
</snippet></ROW><ROW><id>3839820</id><snippet>manoj@maruti:~$ python myprog.py --executable python someOtherProg.py
['python', 'someOtherProg.py']
</snippet></ROW><ROW><id>3839820</id><snippet>optparse</snippet></ROW><ROW><id>3839820</id><snippet>argparse</snippet></ROW><ROW><id>3839820</id><snippet>Optparse</snippet></ROW><ROW><id>3839844</id><snippet>type(some_user_function)</snippet></ROW><ROW><id>3839844</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; pickle.dumps(types.FunctionType)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'picke' is not defined
&gt;&gt;&gt; pickle.dumps(types.FunctionType)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python26\lib\pickle.py", line 1366, in dumps
    Pickler(file, protocol).dump(obj)
  File "C:\Python26\lib\pickle.py", line 224, in dump
    self.save(obj)
  File "C:\Python26\lib\pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "C:\Python26\lib\pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle &lt;type 'function'&gt;: it's not found as __built
n__.function
</snippet></ROW><ROW><id>3839844</id><snippet>scapy.layers.dhcp.BOOTP</snippet></ROW><ROW><id>3840201</id><snippet>easy_install</snippet></ROW><ROW><id>3840216</id><snippet>&lt;Unmap&gt;</snippet></ROW><ROW><id>3840216</id><snippet>import Tkinter as tk

class App:
    def __init__(self):
        self.root = tk.Tk()
        tk.Label(self.root, text="main window").pack()
        self.t = tk.Toplevel()
        tk.Label(self.t, text="tool window").pack()
        self.root.bind("&lt;Unmap&gt;", self.OnUnmap)
        self.root.bind("&lt;Map&gt;", self.OnMap)
        self.root.mainloop()

    def OnMap(self, event):
        # show the tool window
        self.t.wm_deiconify()

    def OnUnmap(self, event):
        # withdraw the tool window
        self.t.wm_withdraw()

if __name__ == "__main__":
    app=App()
</snippet></ROW><ROW><id>3840802</id><snippet>list.append</snippet></ROW><ROW><id>3840802</id><snippet>None</snippet></ROW><ROW><id>3840802</id><snippet>aList.append('e')</snippet></ROW><ROW><id>3840865</id><snippet>def __init__(self, widget):
    QtCore.QThread.__init__(self)

def run(self):
    real_stdout = sys.stdout
    sys.stdout = StringIO.StringIO()
    self.runModule()
    label_text = sys.stdout.getvalue()
    sys.stdout = real_stdout
</snippet></ROW><ROW><id>3841109</id><snippet>def startbars(query_name, commodity_name):

    assert query_name in INNOVOTABLE_FIELD_NAMES

    ## TODO: Replace with proper SQL query
    query = """ SELECT wbcode, Year, """+query_name+""" 
             FROM innovotable WHERE commodity='"""+commodity_name+"""' and

             """+query_name+""" != 'NULL' """
    rows = cursor.execute(query)

    mapYearToWbcodeToField = {}
    nc = []
    global h_list
    h_list = {}

    for row in rows:
        n = float(row[2])
        wbCodeToField = mapYearToWbcodeToField.setdefault(int(row[1]),{})
        wbCodeToField[str(row[0])] = n
        nc.append(n)

    constant = 8.0 / max(nc)


    for (an_year,wbCodeToField) in mapYearToWbcodeToField.iteritems():
        if an_year &lt; 1961 or an_year &gt; 2031:
            continue

        for (wbCode,value) in wbCodeToField.iteritems():
            if wbCode not in result:
                continue

            skey = wbCode+str(an_year)
            h_list[skey] = constant * value
</snippet></ROW><ROW><id>3841109</id><snippet>def startbars(query_name, commodity_name):

    assert query_name in INNOVOTABLE_FIELD_NAMES

    ## TODO: Replace with proper SQL query
    query = """ SELECT wbcode, Year, """+query_name+""" 
             FROM innovotable WHERE commodity='"""+commodity_name+"""' and

             """+query_name+""" != 'NULL' """
    rows = cursor.execute(query)

    data = []
    maxField = None

    for row in rows:
        an_year = int(row[1])
        if an_year &lt; 1961 or an_year &gt; 2031:
            continue

        wbCode = str(row[0])
        if wbCode not in result:
            continue

        n = float(row[2])

        data.append((wbCode+str(an_year),n))
        if maxField is None or n &gt; maxField:
            maxField = n

    constant = 8.0 / maxField

    global h_list
    h_list = {}

    for (skey,n) in data:
        h_list[skey] = constant * n
</snippet></ROW><ROW><id>3841719</id><snippet>% if condition_a:
&lt;% func = def_a %&gt;
% elif condition_b:
&lt;% func = def_b %&gt;
% endif

${func( params )}
</snippet></ROW><ROW><id>3841719</id><snippet>&lt;% func = some_dict[key] %&gt;
${func( params )}
</snippet></ROW><ROW><id>3841719</id><snippet>&lt;% .. %&gt;</snippet></ROW><ROW><id>3842234</id><snippet>text.config(state=DISABLED)
</snippet></ROW><ROW><id>3842236</id><snippet>from collections import defaultdict
import itertools as it
import re

pairs = defaultdict(int)

for line in lines:
    for pair in it.combinations(re.findall('\w+', line), 2):
        pairs[tuple(pair)] += 1

resultList = [pair + (occurences, ) for pair, occurences in pairs.iterkeys()]
</snippet></ROW><ROW><id>3842244</id><snippet>focus_force</snippet></ROW><ROW><id>3842244</id><snippet>root</snippet></ROW><ROW><id>3842244</id><snippet>from Tkinter import *

root = Tk()
root.after(5000, lambda: root.focus_force())
root.mainloop()
</snippet></ROW><ROW><id>3842583</id><snippet>&gt;&gt;&gt; mystring = "işğüı"
&gt;&gt;&gt; print "length of {0} is {1}".format(repr(mystring), len(mystring))
length of 'i\xc5\x9f\xc4\x9f\xc3\xbc\xc4\xb1' is 9
</snippet></ROW><ROW><id>3842583</id><snippet>&gt;&gt;&gt; myunicode = u"işğüı"
&gt;&gt;&gt; print "length of {0} is {1}".format(repr(myunicode), len(myunicode))
length of u'i\u015f\u011f\xfc\u0131' is 5
</snippet></ROW><ROW><id>3842583</id><snippet>len(myunicode.encode('utf-8'))</snippet></ROW><ROW><id>3842677</id><snippet>weakref.ProxyType</snippet></ROW><ROW><id>3842681</id><snippet>pack_propagate</snippet></ROW><ROW><id>3842687</id><snippet>import converters.SomeConverter</snippet></ROW><ROW><id>3842687</id><snippet>from converters import SomeConverter</snippet></ROW><ROW><id>3842687</id><snippet>* converters
     - __init__.py
     - baseconverter.py
     - someconverter.py
     - otherconverter.py
</snippet></ROW><ROW><id>3842687</id><snippet>__init__.py</snippet></ROW><ROW><id>3842687</id><snippet>from baseconverter import BaseConverter
from otherconverter import OtherConverter
</snippet></ROW><ROW><id>3842838</id><snippet>self.response.headers.add_header('Content-Type','application/xhtml+xml')
</snippet></ROW><ROW><id>3842838</id><snippet>self.response.headers["Content-Type"] = "application/xhtml+xml"
</snippet></ROW><ROW><id>3842950</id><snippet>def flatten(data):
   if isinstance(data, tuple):
      for v in data:
         yield v
   else:
      for k in data:
         for v in flatten(data[k]):
            yield k + '\\' + v
</snippet></ROW><ROW><id>3842950</id><snippet>&gt;&gt;&gt; fsSchema = {'published': {'renders': {'SIM': ('fold1', 'fold2'), 'REN': ('fold1', 'fold2')}}}
&gt;&gt;&gt; list(flatten(fsSchema))
['published\\renders\\REN\\fold1', 'published\\renders\\REN\\fold2', 'published\\renders\\SIM\\fold1', 'published\\renders\\SIM\\fold2']
</snippet></ROW><ROW><id>3842975</id><snippet>list</snippet></ROW><ROW><id>3842975</id><snippet>list</snippet></ROW><ROW><id>3843124</id><snippet>import numpy
a = [1, 2, 1, 1, -3, -4, 7, 8, 9, 10, -2, 1, -3, 5, 6, 7, -10]
zero_crossings = numpy.where(numpy.diff(numpy.sign(a)))[0]
</snippet></ROW><ROW><id>3843124</id><snippet>&gt; zero_crossings
array([ 3,  5,  9, 10, 11, 12, 15])
</snippet></ROW><ROW><id>3843127</id><snippet>globals()</snippet></ROW><ROW><id>3843127</id><snippet>&lt;$ func_name = 'my_function_name' %&gt;
${globals()[func_name](...)}
</snippet></ROW><ROW><id>3843160</id><snippet>develop</snippet></ROW><ROW><id>3843175</id><snippet># -*- encoding:utf-8 -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 5
_modified_time = 1285968547.0498569
_template_filename='&lt;snip&gt;'
_template_uri='&lt;snip&gt;'
_template_cache=cache.Cache(__name__, _modified_time)
_source_encoding='utf-8'
_exports = ['function']


# SOURCE LINE 1

lookup = { 'key': function }


def render_body(context,**pageargs):
    context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs)
        __M_writer = context.writer()
        # SOURCE LINE 3
        __M_writer(u'\n\n')
        # SOURCE LINE 7
        __M_writer(u'\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_function(context):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 5
        __M_writer(u'\n    Output\n')
        return ''
    finally:
        context.caller_stack._pop_frame()
</snippet></ROW><ROW><id>3843175</id><snippet>function</snippet></ROW><ROW><id>3843175</id><snippet>render_function</snippet></ROW><ROW><id>3843175</id><snippet>"render_%s" % name</snippet></ROW><ROW><id>3843201</id><snippet>for term in terms:
    n *= term
</snippet></ROW><ROW><id>3843201</id><snippet>reduce</snippet></ROW><ROW><id>3843201</id><snippet>reduce</snippet></ROW><ROW><id>3843201</id><snippet>reduce</snippet></ROW><ROW><id>3843201</id><snippet>functools</snippet></ROW><ROW><id>3843204</id><snippet>iTunes Music Library.xml</snippet></ROW><ROW><id>3843313</id><snippet>import multiprocessing as mp

def f(x):
    f.q.put('Doing: ' + str(x))
    return x*x

def f_init(q):
    f.q = q

def main():
    jobs = range(1,6)

    q = mp.Queue()
    p = mp.Pool(None, f_init, [q])
    results = p.imap(f, jobs)
    p.close()

    for i in range(len(jobs)):
        print q.get()
        print results.next()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3843375</id><snippet>PyEval_CallObject()</snippet></ROW><ROW><id>3843375</id><snippet>arglist = Py_BuildValue("()");  /* No arguments needed */
</snippet></ROW><ROW><id>3843375</id><snippet>Py_BuildValue</snippet></ROW><ROW><id>3843375</id><snippet>arglist = Py_BuildValue("(isO)", the_int, the_str, the_pyobject);
</snippet></ROW><ROW><id>3843489</id><snippet>__instancecheck__</snippet></ROW><ROW><id>3843588</id><snippet>sorted( list_one ) == sorted( list_two )</snippet></ROW><ROW><id>3843588</id><snippet>set( list_one ) == set( list_two )</snippet></ROW><ROW><id>3843588</id><snippet>set(list_one) ^ set(list_two)</snippet></ROW><ROW><id>3843588</id><snippet>&gt;&gt;&gt; sorted("asd") == sorted("dsa")
True
&gt;&gt;&gt; sorted( "asd" ) == sorted( "dsa" )
True
&gt;&gt;&gt; sorted( "asd" ) == sorted( "dsaf" )
False
&gt;&gt;&gt; set( "asd" ) == set( "dasf" )
False
&gt;&gt;&gt; set( "asd" ) == set( "daas" )
True
&gt;&gt;&gt; set( "asd" ) ^ set( "daf" )
set(['s', 'f'])
</snippet></ROW><ROW><id>3843842</id><snippet>lis = [line.strip() for line in inp.readlines()]
</snippet></ROW><ROW><id>3843914</id><snippet>class MyCustomCalendar(calendar.HTMLCalendar):

    def formatday(self, day, weekday, *notes):
        ...

    def formatweek(self, theweek, *notes):
        ...

c = MyCustomCalendar(calendar.MONDAY)
</snippet></ROW><ROW><id>3843914</id><snippet>formatday</snippet></ROW><ROW><id>3843914</id><snippet>formatweek</snippet></ROW><ROW><id>3843958</id><snippet>from paste.script import command

class TestCommand(command.Command):

    max_args = 1
    min_args = 1

    usage = "NAME"
    summary = "Say hello!"
    group_name = "My Package Name"

    parser = command.Command.standard_parser(verbose=True)
    parser.add_option('--goodbye',
                      action='store_true',
                      dest='goodbye',
                      help="Say 'Goodbye' instead")

    def command(self):
        name = self.args[0]
        if self.verbose:
            print "Got name: %r" % name
        if self.options.goodbye:
            print "Goodbye", name
        else:
            print "Hello", name
</snippet></ROW><ROW><id>3844055</id><snippet>jem@jem-laptop:~$ ls
Desktop    examples.desktop  Public           shortener.rb
Documents  Mac4Lin_v1.0      ruby-1.9.1-p378  Templates
Downloads  Music             rubygems-1.3.7   Videos
Dropbox    Pictures          setcolors.vim    virtualenv.py
</snippet></ROW><ROW><id>3844055</id><snippet>jem@jem-laptop:~$ virtualenv ENV
New python executable in ENV/bin/python
Installing setuptools............done.
</snippet></ROW><ROW><id>3844055</id><snippet>jem@jem-laptop:~$ source ENV/bin/activate
(ENV)jem@jem-laptop:~$ deactivate
jem@jem-laptop:~$ 
</snippet></ROW><ROW><id>3844227</id><snippet>application: wk
version: 1
runtime: python
api_version: 1

handlers:
- url: /
  static_files: static/index.html
  upload: static/index.html

- url: /.*
  static_files: static
  upload: static
</snippet></ROW><ROW><id>3844258</id><snippet>dogtail</snippet></ROW><ROW><id>3844258</id><snippet>  File "/home/joe/Desktop/exercise/dogtail.py", line 6, in &lt;module&gt;
    from dogtail import tree
</snippet></ROW><ROW><id>3844258</id><snippet>import dogtail
dogtail.__file__
</snippet></ROW><ROW><id>3844420</id><snippet>thread</snippet></ROW><ROW><id>3844420</id><snippet>thread</snippet></ROW><ROW><id>3844432</id><snippet>from lxml import etree

# create XML 
root = etree.Element('root')
root.append(etree.Element('child'))
# another child with text
child = etree.Element('child')
child.text = 'some text'
root.append(child)

# pretty string
s = etree.tostring(root, pretty_print=True)
print s
</snippet></ROW><ROW><id>3844432</id><snippet>&lt;root&gt;
  &lt;child/&gt;
  &lt;child&gt;some text&lt;/child&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>3844467</id><snippet>ffprobe</snippet></ROW><ROW><id>3844467</id><snippet>import subprocess

def getLength(filename):
  result = subprocess.Popen(["ffprobe", filename],
    stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
  return [x for x in result.stdout.readlines() if "Duration" in x]
</snippet></ROW><ROW><id>3844501</id><snippet>&lt;form action="/" enctype="multipart/form-data" method="post"&gt;
...
</snippet></ROW><ROW><id>3844552</id><snippet>application = webapp.WSGIApplication([('/user\.html', MainPage),
                                      ('/sign', UserWrite)],
                                     debug=True)
</snippet></ROW><ROW><id>3844664</id><snippet>0.0</snippet></ROW><ROW><id>3844664</id><snippet>from __future__ import division</snippet></ROW><ROW><id>3844664</id><snippet>//</snippet></ROW><ROW><id>3844664</id><snippet>float(i/len(extract_list2))
</snippet></ROW><ROW><id>3844664</id><snippet>float(i)/len(extract_list2))
</snippet></ROW><ROW><id>3844664</id><snippet>extract_list2</snippet></ROW><ROW><id>3844664</id><snippet>extract_list1</snippet></ROW><ROW><id>3844664</id><snippet>L1 = len(extract_list1)
L2 = len(extract_list2)
</snippet></ROW><ROW><id>3844832</id><snippet>   def checkEqual1(iterator):
      try:
         iterator = iter(iterator)
         first = next(iterator)
         return all(first == rest for rest in iterator)
      except StopIteration:
         return True
</snippet></ROW><ROW><id>3844832</id><snippet>    def checkEqual2(iterator):
       return len(set(iterator)) &lt;= 1
</snippet></ROW><ROW><id>3844832</id><snippet>    def checkEqual3(lst):
       return lst[1:] == lst[:-1]
</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual2</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual1</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual2</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual3</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual1</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual1</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual2</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual3</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual2</snippet></ROW><ROW><id>3844832</id><snippet>checkEqual3</snippet></ROW><ROW><id>3844832</id><snippet>a is b</snippet></ROW><ROW><id>3844832</id><snippet>a == b</snippet></ROW><ROW><id>3844832</id><snippet>timeit</snippet></ROW><ROW><id>3844832</id><snippet>s1 = [1] * 5000
s2 = [1] * 4999 + [2]
s3 = [2] + [1]*4999
s4 = [set([9])] * 5000
s5 = [set([9])] * 4999 + [set([10])]
s6 = [set([10])] + [set([9])] * 4999
s7 = [1,1]
s8 = [1,2]
s9 = []
</snippet></ROW><ROW><id>3844832</id><snippet>     checkEqual1  checkEqual2   checkEqual3 checkEqualIvo checkEqual6502

s1 1.19     msec  348    usec  183     usec   51.6   usec   121     usec
s2 1.17     msec  376    usec  185     usec   50.9   usec   118     usec
s3     4.17 usec  348    usec  120     usec  264     usec    61.3   usec

s4 1.73     msec               182     usec   50.5   usec   121     usec
s5 1.71     msec               181     usec   50.6   usec   125     usec
s6     4.29 usec               122     usec  423     usec    61.1   usec

s7     3.1  usec    1.4  usec    1.24  usec    0.932 usec     1.92  usec
s8     4.07 usec    1.54 usec    1.28  usec    0.997 usec     1.79  usec
s9     5.91 usec    1.25 usec    0.749 usec    0.407 usec     0.386 usec
</snippet></ROW><ROW><id>3844832</id><snippet># http://stackoverflow.com/q/3844948/
def checkEqualIvo(lst):
    return not lst or lst.count(lst[0]) == len(lst)

# http://stackoverflow.com/q/3844931/
def checkEqual6502(lst):
    return not lst or [lst[0]]*len(lst) == lst
</snippet></ROW><ROW><id>3845032</id><snippet>if x is not None and x.foo == 42:
    # ...
</snippet></ROW><ROW><id>3845032</id><snippet>&amp;</snippet></ROW><ROW><id>3845032</id><snippet>AttributeError: 'NoneType' object has no attribute 'foo'</snippet></ROW><ROW><id>3845032</id><snippet>and</snippet></ROW><ROW><id>3845032</id><snippet>or</snippet></ROW><ROW><id>3845298</id><snippet>.{10}[^.?!]*[.?!]+
</snippet></ROW><ROW><id>3845453</id><snippet>filter</snippet></ROW><ROW><id>3845453</id><snippet>str_list = filter(None, str_list) # fastest
str_list = filter(bool, str_list) # fastest
str_list = filter(len, str_list)  # a bit of slower
str_list = filter(lambda item: item, str_list) # slower than list comprehension
</snippet></ROW><ROW><id>3845453</id><snippet>&gt;&gt;&gt; timeit('filter(None, str_list)', 'str_list=["a"]*1000', number=100000)
2.4797441959381104
&gt;&gt;&gt; timeit('filter(bool, str_list)', 'str_list=["a"]*1000', number=100000)
2.4788150787353516
&gt;&gt;&gt; timeit('filter(len, str_list)', 'str_list=["a"]*1000', number=100000)
5.2126238346099854
&gt;&gt;&gt; timeit('[x for x in str_list if x]', 'str_list=["a"]*1000', number=100000)
13.354584932327271
&gt;&gt;&gt; timeit('filter(lambda item: item, str_list)', 'str_list=["a"]*1000', number=100000)
17.427681922912598
</snippet></ROW><ROW><id>3845608</id><snippet>my_param = request.GET.get('param', default_value)
</snippet></ROW><ROW><id>3845608</id><snippet>my_param = request.GET.get('param')
if my_param is None:
    return HttpResponseBadRequest()
</snippet></ROW><ROW><id>3845857</id><snippet>import unicodedata as ud

astr=u"\N{LATIN SMALL LETTER E}" + u"\N{COMBINING ACUTE ACCENT}"
combined_astr=ud.normalize('NFC',astr)
</snippet></ROW><ROW><id>3845857</id><snippet>print(ud.name(combined_astr))
# LATIN SMALL LETTER E WITH ACUTE
</snippet></ROW><ROW><id>3845857</id><snippet>print(astr)
# é
print(combined_astr)
# é
</snippet></ROW><ROW><id>3845857</id><snippet>print(repr(astr))
# u'e\u0301'
print(repr(combined_astr))
# u'\xe9'
</snippet></ROW><ROW><id>3845857</id><snippet>utf_8</snippet></ROW><ROW><id>3845857</id><snippet>print(repr(astr.encode('utf_8')))
# 'e\xcc\x81'
print(repr(combined_astr.encode('utf_8')))
# '\xc3\xa9'
</snippet></ROW><ROW><id>3846276</id><snippet>&lt;project&gt;/
    &lt;app1&gt;/templates/&lt;app1&gt;/
        foo.html
        bar.html
    &lt;app2&gt;/templates/&lt;app2&gt;/
        foo.html
    templates/
        &lt;app1&gt;/
            foo.html
        base.html
        xyzzy.html
</snippet></ROW><ROW><id>3846686</id><snippet>from multiprocessing import Pool
import numpy

numToFactor = 976

def isFactor(x):
    result = None
    div = (numToFactor / x)
    if div*x == numToFactor:
        result = (x,div)
    return result

if __name__ == '__main__':
    pool = Pool(processes=4)
    possibleFactors = range(1,int(numpy.floor(numpy.sqrt(numToFactor)))+1)
    print 'Checking ', possibleFactors
    result = pool.map(isFactor, possibleFactors)
    cleaned = [x for x in result if not x is None]
    print 'Factors are', cleaned
</snippet></ROW><ROW><id>3846686</id><snippet>Checking  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Factors are [(1, 976), (2, 488), (4, 244), (8, 122), (16, 61)]
</snippet></ROW><ROW><id>3846750</id><snippet>Decimal</snippet></ROW><ROW><id>3846817</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>3846817</id><snippet>&gt;&gt;&gt; x = 4
&gt;&gt;&gt; print x
4
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.write(str(x)) # you have to str() your variables
4&gt;&gt;&gt; # &lt;- no newline
</snippet></ROW><ROW><id>3846893</id><snippet>import foo.bar.baz</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>bar</snippet></ROW><ROW><id>3846893</id><snippet>foo.bar</snippet></ROW><ROW><id>3846893</id><snippet>baz</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>bar</snippet></ROW><ROW><id>3846893</id><snippet>bar.baz</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>import foo</snippet></ROW><ROW><id>3846893</id><snippet>import foo.bar.baz</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>foo</snippet></ROW><ROW><id>3846893</id><snippet>import foo.bar.baz</snippet></ROW><ROW><id>3846893</id><snippet>"foo.bar"</snippet></ROW><ROW><id>3846893</id><snippet>"foo.bar.baz"</snippet></ROW><ROW><id>3846893</id><snippet>sys.modules</snippet></ROW><ROW><id>3846893</id><snippet>os</snippet></ROW><ROW><id>3846893</id><snippet>os.path</snippet></ROW><ROW><id>3846893</id><snippet>posixpath</snippet></ROW><ROW><id>3846893</id><snippet>ntpath</snippet></ROW><ROW><id>3846893</id><snippet>os2path</snippet></ROW><ROW><id>3846893</id><snippet>path</snippet></ROW><ROW><id>3846893</id><snippet>sys.modules["os.path"] = path</snippet></ROW><ROW><id>3846893</id><snippet>os.path</snippet></ROW><ROW><id>3846893</id><snippet>import os.path</snippet></ROW><ROW><id>3846893</id><snippet>os.path</snippet></ROW><ROW><id>3847369</id><snippet>None</snippet></ROW><ROW><id>3847369</id><snippet>func = lambda s: s[:1].lower() + s[1:] if s else ''

&gt;&gt;&gt; func(None)
&gt;&gt;&gt; ''
&gt;&gt;&gt; func('')
&gt;&gt;&gt; ''
&gt;&gt;&gt; func('MARTINEAU')
&gt;&gt;&gt; 'mARTINEAU'
</snippet></ROW><ROW><id>3847372</id><snippet>document = webview.page().currentFrame().documentElement()
document.findAll("a") 
...
</snippet></ROW><ROW><id>3847417</id><snippet>simplejson.load()</snippet></ROW><ROW><id>3847417</id><snippet>json.load()</snippet></ROW><ROW><id>3847417</id><snippet>'str' object has no attribute 'read'</snippet></ROW><ROW><id>3847417</id><snippet>json.loads()</snippet></ROW><ROW><id>3847417</id><snippet>json.load()</snippet></ROW><ROW><id>3847494</id><snippet>&gt;&gt;&gt; ['a', 'b'].index('b')
1
</snippet></ROW><ROW><id>3847501</id><snippet>config/routing.py</snippet></ROW><ROW><id>3847530</id><snippet>import sys

def a():
    def b():
        raise AssertionError("1")
    b()

try:
    a()
except AssertionError: # some specific exception you want to wrap
    trace = sys.exc_info()[2]
    raise Exception("error description"), None, trace
</snippet></ROW><ROW><id>3847530</id><snippet>Traceback (most recent call last):
  File "C:\...\test.py", line 9, in &lt;module&gt;
    a()
  File "C:\...\test.py", line 6, in a
    b()
  File "C:\...\test.py", line 5, in b
    raise AssertionError("1")
Exception: error description
</snippet></ROW><ROW><id>3847530</id><snippet>raise MyException(...) from e</snippet></ROW><ROW><id>3847585</id><snippet>def contains(small, big):
    for i in xrange(len(big)-len(small)+1):
        for j in xrange(len(small)):
            if big[i+j] != small[j]:
                break
        else:
            return i, i+len(small)
    return False
</snippet></ROW><ROW><id>3847949</id><snippet>"".join(checkList)</snippet></ROW><ROW><id>3847949</id><snippet>In [94]: checkList="This is a sentence"    
In [95]: "".join(checkList)
Out[95]: 'This is a sentence'
</snippet></ROW><ROW><id>3847949</id><snippet>string =
"".join(checkList)</snippet></ROW><ROW><id>3847949</id><snippet>string</snippet></ROW><ROW><id>3847949</id><snippet>match(wordList, lis)</snippet></ROW><ROW><id>3847949</id><snippet>None</snippet></ROW><ROW><id>3847949</id><snippet>None == None</snippet></ROW><ROW><id>3847949</id><snippet>True</snippet></ROW><ROW><id>3847949</id><snippet>if match(wordList, lis).sort(key=str.lower) ==  wordList.sort(key=str.lower):
</snippet></ROW><ROW><id>3847949</id><snippet>sorted(astr.lower() for astr in match(wordList, lis))==sorted(astr.lower() for astr in wordList)
</snippet></ROW><ROW><id>3847949</id><snippet>sort</snippet></ROW><ROW><id>3847949</id><snippet>sorted(match(wordList, lis),key=str.lower)==sorted(wordList,key=str.lower)
</snippet></ROW><ROW><id>3847949</id><snippet>sorted(match(wordList, lis))==sorted(wordList)
</snippet></ROW><ROW><id>3847949</id><snippet>str.lower</snippet></ROW><ROW><id>3847949</id><snippet>key</snippet></ROW><ROW><id>3847949</id><snippet>==</snippet></ROW><ROW><id>3847949</id><snippet>if condition:
    return True
else:
    return False
</snippet></ROW><ROW><id>3847949</id><snippet>return condition
</snippet></ROW><ROW><id>3848056</id><snippet>super</snippet></ROW><ROW><id>3848056</id><snippet>x</snippet></ROW><ROW><id>3848056</id><snippet>A.x(self)</snippet></ROW><ROW><id>3848056</id><snippet>type(self).mro()</snippet></ROW><ROW><id>3848056</id><snippet>x</snippet></ROW><ROW><id>3848056</id><snippet>next(c for c in type(self).mro() if hasattr(c, 'x'))
</snippet></ROW><ROW><id>3848056</id><snippet>super</snippet></ROW><ROW><id>3848056</id><snippet>A</snippet></ROW><ROW><id>3848056</id><snippet>x</snippet></ROW><ROW><id>3848056</id><snippet>mro</snippet></ROW><ROW><id>3848078</id><snippet>import</snippet></ROW><ROW><id>3848078</id><snippet>import sys
print "\n".join( sys.path )
</snippet></ROW><ROW><id>3848078</id><snippet>__init__.py</snippet></ROW><ROW><id>3848252</id><snippet>len(a) == len(b) and all(j &gt; i for i, j in zip(a, b))
</snippet></ROW><ROW><id>3848301</id><snippet>__getattribute__</snippet></ROW><ROW><id>3848301</id><snippet>getattr</snippet></ROW><ROW><id>3848301</id><snippet>setattr</snippet></ROW><ROW><id>3848301</id><snippet>delattr</snippet></ROW><ROW><id>3848301</id><snippet>self.example           == getattr(self, 'example')
super(B, self).example == getattr(super(B, self), 'example')
</snippet></ROW><ROW><id>3848301</id><snippet>__getattribute__</snippet></ROW><ROW><id>3848324</id><snippet>import subprocess
p1 = subprocess.Popen(["dpkg", "--list"], stdout=subprocess.PIPE, env={'LANG':'C'})
p2 = subprocess.Popen(["grep", "linux-image"], stdin=p1.stdout, stdout=subprocess.PIPE)
out,err=p2.communicate()
print(out)
</snippet></ROW><ROW><id>3848324</id><snippet>dpkg</snippet></ROW><ROW><id>3848324</id><snippet>LANG=C</snippet></ROW><ROW><id>3848324</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3848324</id><snippet>dpkg</snippet></ROW><ROW><id>3848414</id><snippet> current_size = self.ax.bbox.width, self.ax.bbox.height
    if self.old_size != current_size:
        self.old_size = current_size
        self.ax.clear()
        self.ax.grid()
        self.draw()
        self.ax_background = self.copy_from_bbox(self.ax.bbox)
</snippet></ROW><ROW><id>3848469</id><snippet>def annihilateUnicorns(*unicorns):
    for i in unicorns: # stored in a list
        i.splode()
    return "404 Unicorns not found. They sploded."
</snippet></ROW><ROW><id>3848729</id><snippet>html = t.render(Context({'completed': completed, 'current':current, 'description': sp.description, 'project_title':sp.name, 'img':images, 'meta_desc': sp.meta_description, 'meta_k:': sp.meta_keywords)
</snippet></ROW><ROW><id>3848729</id><snippet>{% if meta_k %}
</snippet></ROW><ROW><id>3848834</id><snippet>zip</snippet></ROW><ROW><id>3848834</id><snippet>zip([a,b,c,...], [x,y,z,...]) == [(a,x), (b,y), (c,z), ...]
</snippet></ROW><ROW><id>3848834</id><snippet>result = [f(x) for f, x in zip(funcs, data)]
</snippet></ROW><ROW><id>3848834</id><snippet>itertools.izip</snippet></ROW><ROW><id>3848861</id><snippet>__init__.py</snippet></ROW><ROW><id>3849039</id><snippet>os.environ['APPLICATION_ID']</snippet></ROW><ROW><id>3849039</id><snippet>os.environ['CURRENT_VERSION_ID']</snippet></ROW><ROW><id>3849055</id><snippet>*Form</snippet></ROW><ROW><id>3849055</id><snippet>forms</snippet></ROW><ROW><id>3849055</id><snippet>import forms

form = getattr(forms, category + "Form")()
</snippet></ROW><ROW><id>3849055</id><snippet>AttributeError</snippet></ROW><ROW><id>3849055</id><snippet>*Form</snippet></ROW><ROW><id>3849231</id><snippet>b</snippet></ROW><ROW><id>3849231</id><snippet>&gt;&gt;&gt; print(0.1, 0.2/2, 0.3/3)
0.1 0.1 0.1
&gt;&gt;&gt; couldRoundTo(0.123, 0.1)
True
&gt;&gt;&gt; couldRoundTo(0.123, 0.2/2)
True
&gt;&gt;&gt; couldRoundTo(0.123, 0.3/3)
False
</snippet></ROW><ROW><id>3849231</id><snippet>0.3 / 3</snippet></ROW><ROW><id>3849231</id><snippet>0.1</snippet></ROW><ROW><id>3849231</id><snippet>0.2 / 2</snippet></ROW><ROW><id>3849231</id><snippet>round(0.123, 1)</snippet></ROW><ROW><id>3849231</id><snippet>Decimal</snippet></ROW><ROW><id>3849231</id><snippet>Decimal</snippet></ROW><ROW><id>3849231</id><snippet>quantize</snippet></ROW><ROW><id>3849231</id><snippet>from decimal import Decimal

def roundable(a, b):
    a = Decimal(str(a))
    b = Decimal(str(b))
    return a.quantize(b) == b
</snippet></ROW><ROW><id>3849258</id><snippet>import operator

def sumproduct(*lists):
    return sum(reduce(operator.mul, data) for data in zip(*lists))
</snippet></ROW><ROW><id>3849258</id><snippet>import operator
import functools

def sumproduct(*lists):
    return sum(functools.reduce(operator.mul, data) for data in zip(*lists))
</snippet></ROW><ROW><id>3849435</id><snippet>#include &lt;boost/pending/disjoint_sets.hpp&gt;
#include &lt;boost/property_map/property_map.hpp&gt;

#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;iostream&gt;


typedef std::map&lt;int, int&gt; rank_t;
typedef std::map&lt;int, int&gt; parent_t;

typedef boost::associative_property_map&lt; rank_t &gt; rank_pmap_t;
typedef boost::associative_property_map&lt; parent_t &gt; parent_pmap_t;

typedef boost::disjoint_sets&lt; rank_pmap_t, parent_pmap_t &gt; group_sets_t;

typedef std::set&lt;int&gt; key_set;
typedef std::map&lt;int, std::set&lt;int&gt; &gt; output;
</snippet></ROW><ROW><id>3849435</id><snippet>union_set(a, b)</snippet></ROW><ROW><id>3849435</id><snippet>groups</snippet></ROW><ROW><id>3849435</id><snippet>void add_data(int a, int b, group_sets_t &amp; groups, key_set &amp; keys)
{
  if (keys.count(a) &lt; 1) groups.make_set(a);
  if (keys.count(b) &lt; 1) groups.make_set(b);
  groups.union_set(a, b);
  keys.insert(a);
  keys.insert(b);
}
</snippet></ROW><ROW><id>3849435</id><snippet>void build_output(group_sets_t &amp; groups, key_set &amp; keys)
{
  output out;
  for (key_set::iterator i(keys.begin()); i != keys.end(); i++)
    out[groups.find_set(*i)].insert(*i);

  for (output::iterator i(out.begin()); i != out.end(); i++)
  {
    std::cout &lt;&lt; i-&gt;first &lt;&lt; ": ";
    for (output::mapped_type::iterator j(i-&gt;second.begin()); j != i-&gt;second.end(); j++)
      std::cout &lt;&lt; *j &lt;&lt; " ";
    std::cout &lt;&lt; std::endl;
  }
}

int main()
{

  rank_t rank;
  parent_t parent;
  rank_pmap_t rank_index(rank);
  parent_pmap_t parent_index(parent);


  group_sets_t groups( rank_index, parent_index );
  key_set keys;

  int a, b;
  while (std::cin &gt;&gt; a)
  {
    std::cin &gt;&gt; b;
    add_data(a, b, groups, keys);
  }  


  build_output(groups, keys);
  //std::cout &lt;&lt; "number of sets: " &lt;&lt; 
  //  groups.count_sets(keys.begin()), keys.end()) &lt;&lt; std::endl;

}
</snippet></ROW><ROW><id>3849435</id><snippet>boost::disjoint_sets</snippet></ROW><ROW><id>3849435</id><snippet>disjoint_sets</snippet></ROW><ROW><id>3849435</id><snippet>make_set</snippet></ROW><ROW><id>3849435</id><snippet>find_set</snippet></ROW><ROW><id>3849435</id><snippet>union_set</snippet></ROW><ROW><id>3849435</id><snippet>hash_set</snippet></ROW><ROW><id>3849487</id><snippet>accept</snippet></ROW><ROW><id>3849487</id><snippet>win32file.WSAEventSelect(sock.fileno(), event, 0)
sock.setblocking(1)
</snippet></ROW><ROW><id>3849519</id><snippet>\n</snippet></ROW><ROW><id>3849519</id><snippet>t[-1] = t[-1].strip()
</snippet></ROW><ROW><id>3849519</id><snippet>\n</snippet></ROW><ROW><id>3849519</id><snippet>t = map(lambda s: s.strip(), t)
</snippet></ROW><ROW><id>3849519</id><snippet>\n</snippet></ROW><ROW><id>3849519</id><snippet>line = line.strip()
# split line...
</snippet></ROW><ROW><id>3849556</id><snippet>default</snippet></ROW><ROW><id>3849556</id><snippet>(a)$ celeryd -n a.example.com -Q default,a.example.com
(b)$ celeryd -n b.example.com -Q default,b.example.com
(c)$ celeryd -n c.example.com -Q default,c.example.com
</snippet></ROW><ROW><id>3849556</id><snippet>$ get_status.apply_async(args, kwargs, queue="a.example.com")
</snippet></ROW><ROW><id>3849556</id><snippet>Router</snippet></ROW><ROW><id>3849556</id><snippet># Always route "app.get_status" to "a.example.com"
CELERY_ROUTES = {"app.get_status": {"queue": "a.example.com"}}
</snippet></ROW><ROW><id>3849618</id><snippet>class FooClass(object):
    @staticmethod
    def static_method(x):
        print x

registry = {'FooClass':FooClass}
</snippet></ROW><ROW><id>3849618</id><snippet>getattr(registry['FooClass'], 'static_method')("bar")
</snippet></ROW><ROW><id>3849638</id><snippet>for i in range(1, len(a)):
    print a[i] - a[i-1]
</snippet></ROW><ROW><id>3849780</id><snippet>$ python -mtimeit -s'import gen; a, b = gen.make_test_case()' 'list(gen.generator1(a, b))'
10 loops, best of 3: 169 msec per loop

$ python -mtimeit -s'import gen; a, b = gen.make_test_case()' 'list(gen.generator2(a, b))'
10 loops, best of 3: 489 msec per loop

$ python -mtimeit -s'import gen; a, b = gen.make_test_case()' 'list(gen.generator3(a, b))'
10 loops, best of 3: 385 msec per loop
</snippet></ROW><ROW><id>3849780</id><snippet>def generator3(parameters, strings):
    # replace strings with a generator of generators for the individual charachters
    strings = (it.islice((char for string_char in string_ for char in (',', string_char)), 1, None)
               for string_ in strings)

    # interpolate strings with the notices
    strings = (it.chain(('The strings are:',), string_) for string_ in strings)

    # nest them in tuples so they're ate the same level as the other generators
    separators = it.chain((('First line',),), it.cycle((('Some later line',),)))

    # replace the parameters with the appropriate tuples
    parameters = (('The parameter is:', p) if p else ('The parameter vanishes.',)
                  for p in parameters)

    # combine the separators, parameters and strings
    output = it.izip(separators, parameters, strings)

    # flatten it twice and return it
    output = it.chain.from_iterable(output)
    return it.chain.from_iterable(output)   
</snippet></ROW><ROW><id>3849780</id><snippet>def make_test_case():
    a = [i % 100 for i in range(10000)]
    b = [('12345'*10)[:(i%50)+1] for i in range(10000)]
    return a, b
</snippet></ROW><ROW><id>3849871</id><snippet>self.rtc.WriteText("hei!²")
</snippet></ROW><ROW><id>3850087</id><snippet>for blog in bloglist:
    try:
        blogurl = pyblog.WordPress('http://example.com' + blog + 'xmlrpc.php', 'admin', 'laxbro24')
        date = blogurl.get_recent_posts(1)[0]['dateCreated']
        print blog + ', ' + str(date.timetuple().tm_mon) + '/' + str(date.timetuple().tm_mday) + '/' + str(date.timetuple().tm_year)
    except pyblog.BlogError:
        print "Oops! The blog at " + blogurl + " is not configured properly."
</snippet></ROW><ROW><id>3850195</id><snippet>frame = JFrame('E-mail Gathering', defaultCloseOperation = JFrame.EXIT_ON_CLOSE, size =(600,400), locationRelativeTo = None).setVisible(True)
</snippet></ROW><ROW><id>3850195</id><snippet>JFrame</snippet></ROW><ROW><id>3850195</id><snippet>setVisible</snippet></ROW><ROW><id>3850195</id><snippet>setVisible</snippet></ROW><ROW><id>3850195</id><snippet>frame</snippet></ROW><ROW><id>3850195</id><snippet>setVisible</snippet></ROW><ROW><id>3850195</id><snippet>frame</snippet></ROW><ROW><id>3850195</id><snippet>None</snippet></ROW><ROW><id>3850195</id><snippet>frame.add</snippet></ROW><ROW><id>3850195</id><snippet>setVisible</snippet></ROW><ROW><id>3850195</id><snippet>pack</snippet></ROW><ROW><id>3850195</id><snippet>setVisible</snippet></ROW><ROW><id>3850195</id><snippet>frame = JFrame('E-mail Gathering', defaultCloseOperation = JFrame.EXIT_ON_CLOSE, size =(600,400), locationRelativeTo = None)
</snippet></ROW><ROW><id>3850238</id><snippet>python.exe</snippet></ROW><ROW><id>3850238</id><snippet>.py</snippet></ROW><ROW><id>3850238</id><snippet>python.exe foo.py</snippet></ROW><ROW><id>3850238</id><snippet>print</snippet></ROW><ROW><id>3850238</id><snippet>print(len(a))</snippet></ROW><ROW><id>3850259</id><snippet>sqlite3.Connection.iterdump</snippet></ROW><ROW><id>3850271</id><snippet>atexit</snippet></ROW><ROW><id>3850271</id><snippet>import atexit

def exit_handler():
    print 'My application is ending!'

atexit.register(exit_handler)
</snippet></ROW><ROW><id>3850544</id><snippet>&gt;&gt;&gt; text = '\x00\x1b\xd4}\xa4\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'.rstrip('\0')
&gt;&gt;&gt; print "".join("%02x" % ord(c) for c in text)
001bd47da4f3
</snippet></ROW><ROW><id>3850544</id><snippet>&gt;&gt;&gt; "".join(format(ord(c),"02x") for c in text)
</snippet></ROW><ROW><id>3850718</id><snippet>chart.scale(date_minmax[0], date_minmax[1], 0, traffic_max)
</snippet></ROW><ROW><id>3850718</id><snippet>chart.scale(*[date_minmax[0], date_minmax[1], 0, traffic_max]*len(sites))
</snippet></ROW><ROW><id>3850841</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; def rotateItems(dictionary):
...   if dictionary:
...     keys = dictionary.iterkeys()
...     values = dictionary.itervalues()
...     firstkey = next(keys)
...     dictionary = dict(izip(keys, values))
...     dictionary[firstkey] = next(values)
...   return dictionary
...
&gt;&gt;&gt; firstdict
{'a': 'a', 'c': 'c', 'b': 'b'}
&gt;&gt;&gt; rotateItems(firstdict)
{'a': 'b', 'c': 'a', 'b': 'c'}
</snippet></ROW><ROW><id>3851019</id><snippet>from __future__ import divison
</snippet></ROW><ROW><id>3851019</id><snippet>/</snippet></ROW><ROW><id>3851019</id><snippet>&gt;&gt;&gt; 5 / 2
2
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 5 / 2
2.5
</snippet></ROW><ROW><id>3851019</id><snippet>float</snippet></ROW><ROW><id>3851019</id><snippet>&gt;&gt;&gt; 5.0 / 2
2.5
</snippet></ROW><ROW><id>3851100</id><snippet>if a==0:
   action = 0
elif a&gt;1 and b==1:
   action = 1
elif a==1 and b&gt;1:
   action = 2
elif a&gt;1 and b&gt;1:
   action = 3
else:
   action = -1
</snippet></ROW><ROW><id>3851100</id><snippet>Simple is better than complex.
Flat is better than nested.
Readability counts.
</snippet></ROW><ROW><id>3851160</id><snippet>pyplot.figure()</snippet></ROW><ROW><id>3851160</id><snippet>figsize</snippet></ROW><ROW><id>3851160</id><snippet>self.fig = plt.figure(figsize=(5,5))</snippet></ROW><ROW><id>3851330</id><snippet>None</snippet></ROW><ROW><id>3851330</id><snippet>append()</snippet></ROW><ROW><id>3851330</id><snippet>model.append (parent, [x, y, z])
</snippet></ROW><ROW><id>3851330</id><snippet>None</snippet></ROW><ROW><id>3851851</id><snippet>c</snippet></ROW><ROW><id>3851851</id><snippet>(1, 2)</snippet></ROW><ROW><id>3851851</id><snippet>c</snippet></ROW><ROW><id>3852316</id><snippet>import smtplib

def sendmail(sender, recipient, subject, body, server="localhost"):
    "Sends an e-mail to the specified recipient."

    body = "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;" + body + "&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;"

    headers = ["From: " + sender,
               "Subject: " + subject,
               "To: " + recipient,
               "MIME-Version: 1.0",
               "Content-Type: text/html"]
    headers = "\r\n".join(headers)

    session = smtplib.SMTP(server)
    session.sendmail(sender, recipient, headers + "\r\n\r\n" + body)                
    session.quit()
</snippet></ROW><ROW><id>3852607</id><snippet>[\s\S]*?</snippet></ROW><ROW><id>3852607</id><snippet>a=re.findall(r"""(?=(&lt;ul&gt;[\s\S]*?&lt;li&gt;&lt;a href="(?P&lt;link&gt;[\s\S]*?)"[\s\S]*?&lt;img src="(?P&lt;img&gt;[\s\S]*?)"[\s\S]*?&lt;br/&gt;[\s\S]*?&lt;/li&gt;[\s\S]*?&lt;/li&gt;[\s\S]*?&lt;/li&gt;[\s\S]*?&lt;/ul&gt;))\1d""",html)
print a
</snippet></ROW><ROW><id>3852607</id><snippet>&lt;UL&gt;</snippet></ROW><ROW><id>3852607</id><snippet>\1</snippet></ROW><ROW><id>3852607</id><snippet>d</snippet></ROW><ROW><id>3852607</id><snippet>[\s\S]*?</snippet></ROW><ROW><id>3852607</id><snippet>&lt;UL&gt;</snippet></ROW><ROW><id>3852607</id><snippet>&lt;</snippet></ROW><ROW><id>3852607</id><snippet>u</snippet></ROW><ROW><id>3852607</id><snippet>[\s\S]*?</snippet></ROW><ROW><id>3852607</id><snippet>[\s\S]*</snippet></ROW><ROW><id>3852607</id><snippet>.*</snippet></ROW><ROW><id>3852607</id><snippet>.*?</snippet></ROW><ROW><id>3852607</id><snippet>&lt;a href="(?P&lt;link&gt;[\s\S]*?)"[\s\S]*?&lt;img src="(?P&lt;img&gt;[\s\S]*?)"[\s\S]*?
</snippet></ROW><ROW><id>3852607</id><snippet>&lt;a href="(?P&lt;link&gt;[^"]*)"[^&gt;]*&gt;&lt;img src="(?P&lt;img&gt;[^"]*)"[^&gt;]*&gt;
</snippet></ROW><ROW><id>3852771</id><snippet>W = Label(main, text = "No, It's "+str(states[state])
</snippet></ROW><ROW><id>3852792</id><snippet>def intersect(*d):
    sets = iter(map(set, d))
    result = sets.next()
    for s in sets:
        result = result.intersection(s)
    return result
</snippet></ROW><ROW><id>3852792</id><snippet>result = set(d[0]).intersection(*d[:1])
</snippet></ROW><ROW><id>3852792</id><snippet>result = set(d[0]).intersection(*d)
</snippet></ROW><ROW><id>3852792</id><snippet>d[0]</snippet></ROW><ROW><id>3852792</id><snippet>if s1 is s2:
    return s1
</snippet></ROW><ROW><id>3852792</id><snippet>&gt;&gt;&gt; d = [[1,2,3,4], [2,3,4], [3,4,5,6,7]]
&gt;&gt;&gt; set(d[0]).intersection(*d)
set([3, 4])
&gt;&gt;&gt; set(d[0]).intersection(*d[1:])
set([3, 4])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3852924</id><snippet>form_file</snippet></ROW><ROW><id>3852924</id><snippet>request.FILES['form_file']</snippet></ROW><ROW><id>3852924</id><snippet>for upfile in request.FILES.getlist('form_file'):
    filename = upfile.name
    # instead of "filename" specify the full path and filename of your choice here
    fd = open(filename, 'w')
    fd.write(upfile['content'])
    fd.close()
</snippet></ROW><ROW><id>3852924</id><snippet>for upfile in request.FILES.getlist('form_file'):
    filename = upfile.name
    fd = open(filename, 'w+')  # or 'wb+' for binary file
    for chunk in upfile.chunks():
        fd.write(chunk)
    fd.close()
</snippet></ROW><ROW><id>3852950</id><snippet>post.save</snippet></ROW><ROW><id>3852950</id><snippet>blogContent.save</snippet></ROW><ROW><id>3852996</id><snippet>urllib2</snippet></ROW><ROW><id>3853108</id><snippet>right-click on your package
choose *Show Package Contents*
double click on info.plist in Contents to open the property list editor
Add Child "Application is background only"
</snippet></ROW><ROW><id>3853221</id><snippet>zxJDBC</snippet></ROW><ROW><id>3853221</id><snippet>zxJDBC</snippet></ROW><ROW><id>3853234</id><snippet>from datetime import datetime
from dateutil.relativedelta import relativedelta

def get_5_previous_year_months(a_day):
    """Returns a list of year, month tuples for the current and previous 
    5 months relative to a_day"""
    current_year, current_month = a_day.year, a_day.month
    first_of_month = datetime(current_year, current_month, 1)
    previous_months = (first_of_month - relativedelta(months = months)
            for months in range(0, 5))
    return ((pm.year, pm.month) for pm in previous_months) 

def get_current_and_5_previous_months():
    return get_5_previous_year_months(datetime.today())
</snippet></ROW><ROW><id>3853234</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>3853234</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>3853234</id><snippet>    &lt;ul&gt;
    {% for year, month in previous_year_months %}
        {% ifchanged year %}
            &lt;/ul&gt;&lt;li&gt;{{ year }}&lt;/li&gt;&lt;ul&gt;
        {% endifchanged %}
                &lt;li&gt;{{ month }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
</snippet></ROW><ROW><id>3853234</id><snippet>previous_year_months</snippet></ROW><ROW><id>3853234</id><snippet>get_current_and_5_previous_months</snippet></ROW><ROW><id>3853331</id><snippet>threading.py</snippet></ROW><ROW><id>3853331</id><snippet>&gt;&gt;&gt;import threading
&gt;&gt;&gt;print threading.__file__
</snippet></ROW><ROW><id>3853331</id><snippet>C:\python26\lib</snippet></ROW><ROW><id>3853331</id><snippet>&gt;&gt;&gt;threading.Thread
</snippet></ROW><ROW><id>3853331</id><snippet>import os.path as op
import sys

files = (op.join(path, 'threading.py') for path in sys.path)
print filter(op.exists, files)
</snippet></ROW><ROW><id>3853431</id><snippet>kill --sigsegv &lt;pid&gt;</snippet></ROW><ROW><id>3853431</id><snippet>ulimit -a</snippet></ROW><ROW><id>3853431</id><snippet>ulimit -c unlimited</snippet></ROW><ROW><id>3853593</id><snippet>cdef class A:
    cpdef foo(self, int i=*, x=*)
</snippet></ROW><ROW><id>3853616</id><snippet>my_module</snippet></ROW><ROW><id>3853616</id><snippet>get_text_upper</snippet></ROW><ROW><id>3853616</id><snippet>def get_text_upper(filename):
    return open(filename).read().upper()
</snippet></ROW><ROW><id>3853616</id><snippet>open</snippet></ROW><ROW><id>3853616</id><snippet>from cStringIO import StringIO

def fake_open(text):
    fp = StringIO()
    fp.write(text)
    fp.seek(0)
    return fp

def test_get_text():
    my_module.open = lambda *args, **kwargs : fake_open("foo")
    text = my_module.get_text_upper("foo.txt")
    assert text == "FOO", text
</snippet></ROW><ROW><id>3853714</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getpid()
5328
</snippet></ROW><ROW><id>3853714</id><snippet>os.geteuid()</snippet></ROW><ROW><id>3853776</id><snippet>RawTextHelpFormatter</snippet></ROW><ROW><id>3853776</id><snippet>from argparse import RawTextHelpFormatter
parser = ArgumentParser(description='test', formatter_class=RawTextHelpFormatter)
</snippet></ROW><ROW><id>3853906</id><snippet>&gt;&gt;&gt; d.strftime("%d/%m/%y")
'11/03/02'
</snippet></ROW><ROW><id>3853906</id><snippet>strftime</snippet></ROW><ROW><id>3853966</id><snippet>queue</snippet></ROW><ROW><id>3854035</id><snippet>doctest.testfile</snippet></ROW><ROW><id>3854035</id><snippet>module_relative</snippet></ROW><ROW><id>3854035</id><snippet>module_relative</snippet></ROW><ROW><id>3854035</id><snippet>filename</snippet></ROW><ROW><id>3854035</id><snippet>package</snippet></ROW><ROW><id>3854035</id><snippet>filename</snippet></ROW><ROW><id>3854035</id><snippet>/</snippet></ROW><ROW><id>3854035</id><snippet>/</snippet></ROW><ROW><id>3854035</id><snippet>module_relative</snippet></ROW><ROW><id>3854035</id><snippet>filename</snippet></ROW><ROW><id>3854178</id><snippet>*</snippet></ROW><ROW><id>3854178</id><snippet>x + y == 0.0</snippet></ROW><ROW><id>3854178</id><snippet>x == y == 0.0</snippet></ROW><ROW><id>3854178</id><snippet>define approx_Equal(x, y, tolerance=0.001):
    return abs(x-y) &lt;= 0.5 * tolerance * (x + y)
</snippet></ROW><ROW><id>3854178</id><snippet>&lt;=</snippet></ROW><ROW><id>3854178</id><snippet>&lt;</snippet></ROW><ROW><id>3854178</id><snippet>x == y == 0.0</snippet></ROW><ROW><id>3854178</id><snippet>==</snippet></ROW><ROW><id>3854284</id><snippet>Person = type('Person', (models.Model,), {
    'first_name': models.CharField(max_length=255),
    'last_name': models.CharField(max_length=255),
})
</snippet></ROW><ROW><id>3854323</id><snippet>&gt;&gt;&gt; n = -42
&gt;&gt;&gt; -n       # if you know n is negative
42
&gt;&gt;&gt; abs(n)   # for any n
42
</snippet></ROW><ROW><id>3854667</id><snippet>&gt;&gt;&gt; from collections import Mapping, Sequence
&gt;&gt;&gt; isinstance('ac', Sequence)
True
&gt;&gt;&gt; isinstance('ac', Mapping)
False
&gt;&gt;&gt; isinstance({3:42}, Mapping)
True
&gt;&gt;&gt; isinstance({3:42}, Sequence)
False
</snippet></ROW><ROW><id>3854667</id><snippet>collections</snippet></ROW><ROW><id>3854837</id><snippet>''.join(choice(chars) for _ in range(length))          # in py2k use xrange
</snippet></ROW><ROW><id>3854837</id><snippet>_</snippet></ROW><ROW><id>3854837</id><snippet>str.join</snippet></ROW><ROW><id>3854876</id><snippet>&gt;&gt;&gt; s = "Rajasekar SP  def"
&gt;&gt;&gt; s.split(' ')
['Rajasekar', 'SP', '', 'def']
&gt;&gt;&gt; s.split()
['Rajasekar', 'SP', 'def']
&gt;&gt;&gt; s.partition(' ')
('Rajasekar', ' ', 'SP  def')
</snippet></ROW><ROW><id>3854876</id><snippet>str.split</snippet></ROW><ROW><id>3854876</id><snippet>str.partition</snippet></ROW><ROW><id>3854904</id><snippet>my_nested_list = [[0,0] for count in range(4)]
my_nested_list[1][1] = 5
print(my_nested_list)
</snippet></ROW><ROW><id>3854904</id><snippet>yourNestedList = [[0,0]]*4
yourNestedList[1][1] = 5
print('Original wrong: %s' % yourNestedList)

my_nested_list = [[0,0] for count in range(4)]
my_nested_list[1][1] = 5
print('Corrected: %s' % my_nested_list)

# your nested list is actually like this
one_list = [0,0]
your_nested_list = [ one_list for count in range(4) ]
one_list[1] = 5
print('Another way same: %s' % your_nested_list)
</snippet></ROW><ROW><id>3854935</id><snippet>logging.info('My statement')</snippet></ROW><ROW><id>3854935</id><snippet>import logging
logger = logging.getLogger('MySite')
logger.info('My statement')
</snippet></ROW><ROW><id>3854935</id><snippet># Create the logger
server_logger = logging.getLogger('MySite')
server_logger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>3854935</id><snippet>logging.getLogger('MySite')</snippet></ROW><ROW><id>3854935</id><snippet>logging.getLogger('MySite.views')</snippet></ROW><ROW><id>3854935</id><snippet>is_initialized</snippet></ROW><ROW><id>3854935</id><snippet># Init once at first import
if not hasattr(my_logging, 'is_initialized'):
    my_logging.is_initialized = False

if not my_logging.is_initialized:
    my_logging.init_logger()
    my_logging.is_initialized = True
</snippet></ROW><ROW><id>3854935</id><snippet>import logging
logging.getLogger('MySite.ModuleInit').debug('Initializing %s' % str(__name__))
</snippet></ROW><ROW><id>3855043</id><snippet>print input[indices[indices&lt;5]]
</snippet></ROW><ROW><id>3855043</id><snippet>print input[indices[(0 &lt;= indices) &amp; (indices &lt; 5)]]
</snippet></ROW><ROW><id>3855062</id><snippet>__getattr__</snippet></ROW><ROW><id>3855062</id><snippet>class A(object):

  def __getattr__(self, attr):
    print attr
</snippet></ROW><ROW><id>3855062</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.thing
thing
&gt;&gt;&gt; a.thing()
thing
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not callable
</snippet></ROW><ROW><id>3855153</id><snippet>u''.join(map(unichr, myintegers))</snippet></ROW><ROW><id>3855616</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>3855616</id><snippet>__reduce__</snippet></ROW><ROW><id>3855616</id><snippet>&gt;&gt;&gt; l = collections.defaultdict(list)
&gt;&gt;&gt; l.__reduce__()
(&lt;type 'collections.defaultdict'&gt;, (&lt;type 'list'&gt;,), None, None, &lt;dictionary-itemiterator object at 0x7f031fb3c470&gt;)
</snippet></ROW><ROW><id>3855616</id><snippet>__reduce__</snippet></ROW><ROW><id>3855616</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; class C(collections.defaultdict):
...     def __init__(self):
...         collections.defaultdict.__init__(self, list)
...     def __reduce__(self):
...         t = collections.defaultdict.__reduce__(self)
...         return (t[0], ()) + t[2:]
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c[1].append(2)
&gt;&gt;&gt; c[2].append(3)
&gt;&gt;&gt; c2 = pickle.loads(pickle.dumps(c))
&gt;&gt;&gt; c2 == c
True
</snippet></ROW><ROW><id>3855616</id><snippet>__reduce_ex__</snippet></ROW><ROW><id>3855616</id><snippet>__getinitargs__</snippet></ROW><ROW><id>3855616</id><snippet>__init__</snippet></ROW><ROW><id>3855616</id><snippet>list</snippet></ROW><ROW><id>3855616</id><snippet>def listdict():
    return collections.defaultdict(list)
</snippet></ROW><ROW><id>3856483</id><snippet>a = [2, 3, 5, 6, 6, 7, 10, 11, 13, 14, 15, 16, 16, 17, 18, 20, 21]

seqlist = [] # List of Sequences
seq = []     # Current Sequence
last = -1

for item in a:
   # Start a new sequence if the gap from the last item is too big
   if item - last &gt; 1:
       seqlist.append(seq)
       seq = []

   # only add item to the sequence if it's not the same as the last
   if item != last:
        seq.append(item)

   last = item

# Print longest sequence found
print max(seqlist)
</snippet></ROW><ROW><id>3856502</id><snippet>call_user_func_array</snippet></ROW><ROW><id>3856502</id><snippet>getattr</snippet></ROW><ROW><id>3856502</id><snippet>class A(object):
    def method1(self, a, b, c):
        # foo

methodname = 'method1'
method = getattr(A, methodname)
</snippet></ROW><ROW><id>3856502</id><snippet>method</snippet></ROW><ROW><id>3856502</id><snippet>A.method1</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>getattr</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>a = A()
method = getattr(a, methodname)
method(1, 2)
</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>method1</snippet></ROW><ROW><id>3856502</id><snippet>classmethod</snippet></ROW><ROW><id>3856502</id><snippet>method1</snippet></ROW><ROW><id>3856502</id><snippet>self</snippet></ROW><ROW><id>3856502</id><snippet>method1</snippet></ROW><ROW><id>3856502</id><snippet>cls</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>staticmethod</snippet></ROW><ROW><id>3856502</id><snippet>method1</snippet></ROW><ROW><id>3856502</id><snippet>self</snippet></ROW><ROW><id>3856502</id><snippet>cls</snippet></ROW><ROW><id>3856502</id><snippet>staticmethod1</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>A</snippet></ROW><ROW><id>3856502</id><snippet>method1</snippet></ROW><ROW><id>3856502</id><snippet>super</snippet></ROW><ROW><id>3856502</id><snippet>class Test1(object): # always inherit from object in 2.x. it's called new-style classes. look it up
    def method1(self, a, b):
        return a + b

    @staticmethod
    def method2(a, b):
        return a + b

    @classmethod
    def method3(cls, a, b):
        return cls.method2(a, b)

t = Test1()  # same as doing it in another class

Test1.method1(t, 1, 2) #form one of calling a method on an instance
t.method1(1, 2)        # form two (the common one) essentially reduces to form one

Test1.method2(1, 2)  #the static method can be called with just arguments
t.method2(1, 2)      # on an instance or the class

Test1.method3(1, 2)  # ditto for the class method. It will have access to the class
t.method3(1, 2)      # that it's called on (the subclass if called on a subclass) 
                     # but will not have access to the instance it's called on 
                     # (if it is called on an instance)
</snippet></ROW><ROW><id>3856502</id><snippet>self</snippet></ROW><ROW><id>3856502</id><snippet>cls</snippet></ROW><ROW><id>3856842</id><snippet>matplotlib</snippet></ROW><ROW><id>3856911</id><snippet>PREPEND_WWW</snippet></ROW><ROW><id>3856911</id><snippet>django.middleware.common.CommonMiddleware</snippet></ROW><ROW><id>3856947</id><snippet>settings.py</snippet></ROW><ROW><id>3856947</id><snippet>appsfolder</snippet></ROW><ROW><id>3856947</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3856947</id><snippet>import os
import sys

PROJECT_ROOT = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(PROJECT_ROOT, 'appsfolder'))
</snippet></ROW><ROW><id>3856973</id><snippet>funcall</snippet></ROW><ROW><id>3856973</id><snippet>apply</snippet></ROW><ROW><id>3856973</id><snippet>apply</snippet></ROW><ROW><id>3856973</id><snippet>apply(foo, args, kwargs)
</snippet></ROW><ROW><id>3856973</id><snippet>foo(*args, **kwargs)
</snippet></ROW><ROW><id>3857090</id><snippet>f.write(convertPdf2String(sys.argv[1]))
</snippet></ROW><ROW><id>3857090</id><snippet>convertPdf2String</snippet></ROW><ROW><id>3857090</id><snippet>file.write</snippet></ROW><ROW><id>3857090</id><snippet>f.write</snippet></ROW><ROW><id>3857090</id><snippet>f.write(convertPdf2String(sys.argv[1]).encode("utf-8"))
# or
f.write(convertPdf2String(sys.argv[1]).encode("ascii", "xmlcharrefreplace"))
</snippet></ROW><ROW><id>3857090</id><snippet># Execute with "Hindi_Book.pdf" in the same directory
import sys
import pyPdf

def convertPdf2String(path):
    content = ""
    # load PDF file
    pdf = pyPdf.PdfFileReader(file(path, "rb"))
    # iterate pages
    for i in range(0, pdf.getNumPages()):
        # extract the text from each page
        content += pdf.getPage(i).extractText() + " \n"
    # collapse whitespaces
    content = u" ".join(content.replace(u"\xa0", u" ").strip().split())
    return content

# convert contents of a PDF file and store retult to TXT file
f = open('a.txt','w+')
f.write(convertPdf2String(sys.argv[1]).encode("ascii", "xmlcharrefreplace"))
f.close()

# or print contents to the standard out stream
print convertPdf2String("Hindi_Book.pdf").encode("ascii", "xmlcharrefreplace")
</snippet></ROW><ROW><id>3857985</id><snippet>from twisted.conch.ssh import keys as Keys
import base64

public_key = """\
---- BEGIN SSH2 PUBLIC KEY ----
Comment: "rsa-key-20101003"
AAAAB3NzaC1yc2EAAAABJQAAAgEAi+91fFsxZ7k1UuudSe5gZoavwARUyZScCtdf
WQ0ROoJC+XIqW5vVJfgmr+A1jLS5m4wNsrCqeyoX2B22T6iEwqVXrXt3QcbccKMu
WkLKFK1h67q6Coc+3eOTmKrOuZbWc19YQgybdkR/GxF7XAbq4NCGNaCDtMOqX8Q2
L/a9fAYqVdTwg9trpcz3whNmdLk/B0edOABKuVX51UdLV+ZggK503+uAb1JiIIj0
mARwR/HNo4oRLMLf2PjuZsGVYYjJDdVJBU6AN4PUQSRRRPL4+YmsrLJb/TpfJeXA
vj4KZMNJv15YXz7/iMZMKznDtr2RJX5wbSpuTUBNZveA7YiIHxvvvis38b/lX9SJ
SYPfZ9CeQY6MvQgG2zwDTOOvKgOIB4sTGMXfcoxB8AF/QXOcxWFJkZoj36rvMd9n
Po6szLjHXwcEUOUvvQfG4VvdQA0H5gGLHqYL1EehRsgi5qcCoFPaZW2K09ErKcS0
MbrLFjBkQ9KmqAM38bvM8UhCWAMA9VXOGHMxUHBV4Bir9alGS4VX0B8Y0b3dZ+7I
MKkHMCwdEUJf7QVdGxGuSQtVsq8RZbIpk3g7wtv8f6I/iEC58ekdrH35tq5+1ilW
dkk9+rrhUy4qrZ+HFi7AeemybpiumbSnebvnkMaIPAOo23V8C9BQ0iuxx4gIZf10
o+TPSK8=
---- END SSH2 PUBLIC KEY ----"""

key_data = ''.join(public_key.splitlines()[2:-1])# remove begin, end tags and comment
blob = base64.decodestring(key_data)
key = Keys.Key._fromString_BLOB(blob)
</snippet></ROW><ROW><id>3858057</id><snippet>def myfunction(text):
    try:
        text = unicode(text, 'utf-8')
    except TypeError:
        return text

print(myfunction(u'cer\xf3n'))
# cerón
</snippet></ROW><ROW><id>3858057</id><snippet>decode</snippet></ROW><ROW><id>3858057</id><snippet>'utf-8'</snippet></ROW><ROW><id>3858133</id><snippet>&gt;&gt;&gt; import pywintypes
&gt;&gt;&gt; pywintypes.DEVMODEType()
&lt;PyDEVMODE object at 0x00F38E90&gt;
</snippet></ROW><ROW><id>3858333</id><snippet>In [34]: arr=np.random.random((4,4))

In [35]: arr
Out[35]: 
array([[ 0.00750932,  0.47917318,  0.39813503,  0.11755234],
       [ 0.30330724,  0.67527229,  0.71626247,  0.22526589],
       [ 0.5821906 ,  0.2060713 ,  0.50149411,  0.0328739 ],
       [ 0.42066294,  0.88529916,  0.09179092,  0.39389844]])
</snippet></ROW><ROW><id>3858333</id><snippet>arr</snippet></ROW><ROW><id>3858333</id><snippet>In [36]: arr[np.array([0,2,3])[:,np.newaxis],np.array([0,1,3])]
Out[36]: 
array([[ 0.00750932,  0.47917318,  0.11755234],
       [ 0.5821906 ,  0.2060713 ,  0.0328739 ],
       [ 0.42066294,  0.88529916,  0.39389844]])
</snippet></ROW><ROW><id>3858333</id><snippet>def minor(arr,i,j):
    # ith row, jth column removed
    return arr[np.array(range(i)+range(i+1,arr.shape[0]))[:,np.newaxis],
               np.array(range(j)+range(j+1,arr.shape[1]))]
</snippet></ROW><ROW><id>3858333</id><snippet>In [37]: np.array([0,2,3])[:,np.newaxis].shape
Out[37]: (3, 1)

In [38]: np.array([0,1,3]).shape
Out[38]: (3,)
</snippet></ROW><ROW><id>3858333</id><snippet>[:,np.newaxis]</snippet></ROW><ROW><id>3858333</id><snippet>arr[&lt;array of shape (3,3)&gt;, &lt;array of shape (3,3)&gt;]</snippet></ROW><ROW><id>3858333</id><snippet>arr[(i,j)-th element of first array, (i,j)-th element of second array]
</snippet></ROW><ROW><id>3858333</id><snippet>first array:     second array:
[[0 0 0],        [[0, 1, 3],
 [2 2 2],         [0, 1, 3],
 [3 3 3]]         [0, 1, 3]]
</snippet></ROW><ROW><id>3858338</id><snippet>(i1, i2, i3, i4)
</snippet></ROW><ROW><id>3858338</id><snippet>mylist = [i1, i2, i3, i4]
</snippet></ROW><ROW><id>3858338</id><snippet>mystring = "%s/t%s/t%s/t%s" % tuple(mylist)
</snippet></ROW><ROW><id>3858338</id><snippet>mylist[3]</snippet></ROW><ROW><id>3858492</id><snippet>threading.Thread(target=self.checkAll).start()
</snippet></ROW><ROW><id>3858871</id><snippet>~ $ curl 'http://gdata.youtube.com/feeds/api/playlists/snippets?q=soccer&amp;start-index=11&amp;max-results=10&amp;v=2'
</snippet></ROW><ROW><id>3858871</id><snippet>&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/' xmlns:gd='http://schemas.google.com/g/2005' gd:etag='W/"C0cHRX85eCp7ImA9Wx5VEko."'&gt;&lt;id&gt;tag:youtube.com,2008:playlists:snippets&lt;/id&gt;&lt;updated&gt;2010-10-05T09:30:34.120Z&lt;/updated&gt;&lt;category scheme='http://schemas.google.com/g/2005#kind' term='http://gdata.youtube.com/schemas/2007#playlistLink'/&gt;&lt;title&gt;YouTube Playlists matching query: soccer&lt;/title&gt;&lt;logo&gt;http://www.youtube.com/img/pic_youtubelogo_123x63.gif&lt;/logo&gt;&lt;link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets?v=2'/&gt;&lt;link rel='http://schemas.google.com/g/2005#batch' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets/batch?v=2'/&gt;&lt;link rel='self' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets?q=soccer&amp;start-index=11&amp;max-results=10&amp;v=2'/&gt;&lt;link rel='service' type='application/atomsvc+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets?alt=atom-service&amp;v=2'/&gt;&lt;link rel='previous' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets?q=soccer&amp;start-index=1&amp;max-results=10&amp;v=2'/&gt;&lt;link rel='next' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/playlists/snippets?q=soccer&amp;start-index=21&amp;max-results=10&amp;v=2'/&gt;&lt;author&gt;&lt;name&gt;YouTube&lt;/name&gt;&lt;uri&gt;http://www.youtube.com/&lt;/uri&gt;&lt;/author&gt;&lt;generator version='2.0' uri='http://gdata.youtube.com/'&gt;YouTube data API&lt;/generator&gt;&lt;openSearch:totalResults&gt;1241773&lt;/openSearch:totalResults&gt;&lt;openSearch:startIndex&gt;11&lt;/openSearch:startIndex&gt;&lt;openSearch:itemsPerPage&gt;10&lt;/openSearch:itemsPerPage&gt;&lt;/feed&gt;~ $ 
</snippet></ROW><ROW><id>3858957</id><snippet>from win32com.shell import shell, shellcon
print shell.SHGetFolderPath(0, shellcon.CSIDL_MYPICTURES, None, 0)
# prints something like C:\Documents and Settings\Username\My Documents\My Pictures
# (Unicode object)
</snippet></ROW><ROW><id>3858957</id><snippet>shellcon.CSIDL_xxx</snippet></ROW><ROW><id>3858957</id><snippet>ctypes</snippet></ROW><ROW><id>3858957</id><snippet>SHGetFolderPath</snippet></ROW><ROW><id>3859300</id><snippet>class Middleware(object):
    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):

        def custom_start_response(status, headers, exc_info=None):
            headers.append(('Set-Cookie', "name=value"))
            return start_response(status, headers, exc_info)

        return self.app(environ, custom_start_response)
</snippet></ROW><ROW><id>3859445</id><snippet>*</snippet></ROW><ROW><id>3859445</id><snippet>int</snippet></ROW><ROW><id>3859445</id><snippet>tuple</snippet></ROW><ROW><id>3859445</id><snippet>list</snippet></ROW><ROW><id>3859445</id><snippet>&gt;&gt;&gt; foo = [[]]*10
&gt;&gt;&gt; foo[0].append(1)
&gt;&gt;&gt; foo
[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
</snippet></ROW><ROW><id>3859445</id><snippet>&gt;&gt;&gt; bar = [[] for _ in range(10)]
&gt;&gt;&gt; bar[0].append(1)
&gt;&gt;&gt; bar
[[1], [], [], [], [], [], [], [], [], []]
</snippet></ROW><ROW><id>3859445</id><snippet>for</snippet></ROW><ROW><id>3859445</id><snippet>index</snippet></ROW><ROW><id>3859445</id><snippet>count</snippet></ROW><ROW><id>3859445</id><snippet>import numpy as np
m = 4
tagProb = np.array(list(line.split("@@")[2].strip() for line in lines)))
tagProb = tagProb.reshape((m+1,-1)).T
</snippet></ROW><ROW><id>3859445</id><snippet>tagProb</snippet></ROW><ROW><id>3859445</id><snippet>m+1</snippet></ROW><ROW><id>3859445</id><snippet>None</snippet></ROW><ROW><id>3859540</id><snippet>_NET_WM_STRUT</snippet></ROW><ROW><id>3859540</id><snippet>_NET_WM_STRUT_PARTIAL</snippet></ROW><ROW><id>3859540</id><snippet>self.window.get_toplevel().show() # must call show() before property_change()
self.window.get_toplevel().window.property_change("_NET_WM_STRUT", 
    "CARDINAL", 32, gtk.gdk.PROP_MODE_REPLACE, [0, 0, 0, bottom_width]) 
</snippet></ROW><ROW><id>3859540</id><snippet>[0, 0, 0, bottom_width]</snippet></ROW><ROW><id>3859540</id><snippet>[left, right, top, bottom]</snippet></ROW><ROW><id>3859540</id><snippet>[0, 0, 0, 50]</snippet></ROW><ROW><id>3859540</id><snippet>import gtk

class PyGtkWidgetDockExample:
    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_default_size(100, gtk.gdk.screen_height())
        self.window.move(gtk.gdk.screen_width()-100, 0)
        self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)        
        self.window.show()          
        self.window.window.property_change("_NET_WM_STRUT", "CARDINAL", 32, 
            gtk.gdk.PROP_MODE_REPLACE, [0, 100, 0, 0])               

app = PyGtkWidgetDockExample()
gtk.main()
</snippet></ROW><ROW><id>3859619</id><snippet>setuptools</snippet></ROW><ROW><id>3859619</id><snippet>easy_install .</snippet></ROW><ROW><id>3859619</id><snippet>*.el</snippet></ROW><ROW><id>3859619</id><snippet>~\.emacs.d\plugins</snippet></ROW><ROW><id>3859619</id><snippet>%USERPROFILE%\Application Data\.emacs.d\</snippet></ROW><ROW><id>3859619</id><snippet>.emacs</snippet></ROW><ROW><id>3859771</id><snippet>@app.route('/person/edit/&lt;id&gt;/', methods=['GET', 'POST'])
def edit_person(id):
    person = Person.query.get_or_404(id)
    form = PersonForm(obj=person)
    if form.validate_on_submit():
        form.populate_obj(person)
</snippet></ROW><ROW><id>3859772</id><snippet>from pyparsing import (Suppress, Word, alphas, alphanums, nums, delimitedList, 
    Combine, Optional, Group)

LBRACK,RBRACK,COLON = map(Suppress,"[]:")

ident = Word(alphas+"_", alphanums+"_")
integer = Combine(Optional('-') + Word(nums))
integer.setParseAction(lambda t : int(t[0]))
intrange = Group(integer + COLON + integer)

rangedIdent = ident("name") + LBRACK + delimitedList(intrange|integer)("indexes") + RBRACK

def expandIndexes(t):
    ret = []
    for ind in t.indexes:
        if isinstance(ind,int):
            ret.append("%s[%d]" % (t.name, ind))
        else:
            offset = (-1,1)[ind[0] &lt; ind[1]]
            ret.extend(
                "%s[%d]" % (t.name, i) for i in range(ind[0],ind[1]+offset,offset)
                )
    return ret
rangedIdent.setParseAction(expandIndexes)

print rangedIdent.parseString("abc[0:3]")
print rangedIdent.parseString("abc[3:0]")
print rangedIdent.parseString("abc[0:3,7,14:16,24:20]")
</snippet></ROW><ROW><id>3859772</id><snippet>['abc[0]', 'abc[1]', 'abc[2]', 'abc[3]']
['abc[3]', 'abc[2]', 'abc[1]', 'abc[0]']
['abc[0]', 'abc[1]', 'abc[2]', 'abc[3]', 'abc[7]', 'abc[14]', 'abc[15]', 'abc[16]', 'abc[24]', 'abc[23]', 'abc[22]', 'abc[21]', 'abc[20]']
</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>EAGAIN</snippet></ROW><ROW><id>3859933</id><snippet>tcdrain()</snippet></ROW><ROW><id>3859933</id><snippet>write()</snippet></ROW><ROW><id>3859933</id><snippet>fcntl()</snippet></ROW><ROW><id>3860102</id><snippet>__eq__</snippet></ROW><ROW><id>3860102</id><snippet>__ne__</snippet></ROW><ROW><id>3860102</id><snippet>in</snippet></ROW><ROW><id>3860102</id><snippet>__eq__</snippet></ROW><ROW><id>3860102</id><snippet>type(x).__eq__(y)</snippet></ROW><ROW><id>3860102</id><snippet>x == y</snippet></ROW><ROW><id>3860102</id><snippet>cont1 == cont2</snippet></ROW><ROW><id>3860102</id><snippet>same(cont1, cont2, value_same)</snippet></ROW><ROW><id>3860102</id><snippet>value_same</snippet></ROW><ROW><id>3860102</id><snippet>True</snippet></ROW><ROW><id>3860102</id><snippet>False</snippet></ROW><ROW><id>3860102</id><snippet>==</snippet></ROW><ROW><id>3860102</id><snippet>__eq__</snippet></ROW><ROW><id>3860102</id><snippet>class EqMixin(object):
  def __eq__(self, other):
    return same(cont1, cont2, value_same)
</snippet></ROW><ROW><id>3860102</id><snippet>same</snippet></ROW><ROW><id>3860102</id><snippet>class EqM_list(EqMixin, list): pass
</snippet></ROW><ROW><id>3860102</id><snippet>x = list(someiter)
</snippet></ROW><ROW><id>3860102</id><snippet>x = EqM_list(someiter)
</snippet></ROW><ROW><id>3860102</id><snippet>x = [bah*2 for bah in buh]
</snippet></ROW><ROW><id>3860102</id><snippet>x = EqM_list(bah*2 for bah in buh)
</snippet></ROW><ROW><id>3860102</id><snippet>x = d.keys()
</snippet></ROW><ROW><id>3860102</id><snippet>x = EqM_list(d.iterkeys())
</snippet></ROW><ROW><id>3860102</id><snippet>float</snippet></ROW><ROW><id>3860102</id><snippet>same</snippet></ROW><ROW><id>3860102</id><snippet>==</snippet></ROW><ROW><id>3860102</id><snippet>def samelist(a, b, samevalue):
    if len(a) != len(b): return False
    return all(samevalue(x, y) for x, y in zip(a, b))

def samedict(a, b, samevalue):
    if set(a) != set(b): return False
    return all(samevalue(a[x], b[x]) for x in a))
</snippet></ROW><ROW><id>3860102</id><snippet>samevalue(a, b) and samevalue(b, c)</snippet></ROW><ROW><id>3860102</id><snippet>samevalue(a, c)</snippet></ROW><ROW><id>3860319</id><snippet>wterm</snippet></ROW><ROW><id>3860319</id><snippet>wterm</snippet></ROW><ROW><id>3860319</id><snippet>wterm</snippet></ROW><ROW><id>3860319</id><snippet>gnome-terminal</snippet></ROW><ROW><id>3860319</id><snippet>gnome-terminal</snippet></ROW><ROW><id>3860319</id><snippet>wterm</snippet></ROW><ROW><id>3860325</id><snippet>y = itertools.product((1, -1, 1j, -1j), repeat=13)
</snippet></ROW><ROW><id>3860325</id><snippet>print sum(1 for x in y)</snippet></ROW><ROW><id>3860325</id><snippet>67108864</snippet></ROW><ROW><id>3860503</id><snippet>&gt;&gt;&gt; type(t)
&lt;type 'datetime.datetime'&gt;
&gt;&gt;&gt; type(t) is datetime.datetime
True
</snippet></ROW><ROW><id>3860503</id><snippet>types</snippet></ROW><ROW><id>3860503</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3860503</id><snippet>&gt;&gt;&gt; isinstance(t, datetime.datetime)
True
</snippet></ROW><ROW><id>3860503</id><snippet>isinstance()</snippet></ROW><ROW><id>3860503</id><snippet>type()</snippet></ROW><ROW><id>3860503</id><snippet>false</snippet></ROW><ROW><id>3860556</id><snippet>type</snippet></ROW><ROW><id>3860556</id><snippet>def enum(cls):
  names = getattr(cls, 'names', None)
  if names is None:
    raise TypeError('%r must have a class field `names` to be an `enum`!',
                    cls.__name__)
  for i, n in enumerate(names):
    setattr(cls, n, i)
  return cls

@enum
class Color(object):
  names = 'red green blue'.split()
</snippet></ROW><ROW><id>3860556</id><snippet>Color.red</snippet></ROW><ROW><id>3860556</id><snippet>Color.green</snippet></ROW><ROW><id>3860556</id><snippet>0</snippet></ROW><ROW><id>3860556</id><snippet>1</snippet></ROW><ROW><id>3860556</id><snippet>enum</snippet></ROW><ROW><id>3860613</id><snippet>def makecounter():
    return collections.defaultdict(int)
</snippet></ROW><ROW><id>3860613</id><snippet>self._inverted_index = collections.defaultdict(makecounter)
</snippet></ROW><ROW><id>3860613</id><snippet>for term in tokens:</snippet></ROW><ROW><id>3860613</id><snippet>        for term in tokens:  
                self._inverted_index[term][docnumber] +=1
</snippet></ROW><ROW><id>3860613</id><snippet>self._inverted_index[term]</snippet></ROW><ROW><id>3860613</id><snippet>{1:2,5:3,7:1}
</snippet></ROW><ROW><id>3860613</id><snippet>self._inverted_index[term]</snippet></ROW><ROW><id>3860613</id><snippet>self._inverted_index = dict((t,[d,v[d] for d in sorted(v)])
                            for t in self._inverted_index)
</snippet></ROW><ROW><id>3860882</id><snippet>for k,v in d.items():
</snippet></ROW><ROW><id>3860882</id><snippet>for k,v in sorted(d.items(),key=lambda x: x[0]):
</snippet></ROW><ROW><id>3860882</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(d)
{'account': {'account_code': 'b',
             'billing_info': {'address1': '123 Test St',
                              'city': 'San Francisco',
                              'country': 'US',
                              'credit_card': {'month': '12',
                                              'number': '1',
                                              'verification_value': '123',
                                              'year': '2018'},
                              'first_name': 'b',
                              'last_name': 'b',
                              'state': 'CA',
                              'zip': '94105'},
             'company_name': 'Company, LLC.',
             'email': 'jdoe@domain.com',
             'first_name': 'b',
             'last_name': 'b',
             'username': 'jdoe'},
 'plan_code': 'b',
 'quantity': '1'}
</snippet></ROW><ROW><id>3860882</id><snippet>def walk_dict(d,depth=0):
    for k,v in sorted(d.items(),key=lambda x: x[0]):
        if isinstance(v, dict):
            print ("  ")*depth + ("%s" % k)
            walk_dict(v,depth+1)
        else:
            print ("  ")*depth + "%s %s" % (k, v) 
</snippet></ROW><ROW><id>3860882</id><snippet>&gt;&gt;&gt; walk_dict(d)
account
  account_code b
  billing_info
    address1 123 Test St
    city San Francisco
    country US
    credit_card
      month 12
      number 1
      verification_value 123
      year 2018
    first_name b
    last_name b
    state CA
    zip 94105
  company_name Company, LLC.
  email jdoe@domain.com
  first_name b
  last_name b
  username jdoe
plan_code b
quantity 1
</snippet></ROW><ROW><id>3860971</id><snippet>&lt;td&gt;[a-zA-Z]+&lt;/td&gt;&lt;td&gt;[\d]+.[\d]+&lt;/td&gt;&lt;td&gt;[\d]+&lt;/td&gt;&lt;td&gt;[\d]+.[\d]+&lt;/td&gt; 
</snippet></ROW><ROW><id>3860971</id><snippet>&lt;td&gt;([a-zA-Z]+)&lt;/td&gt;&lt;td&gt;([\d]+.[\d]+)&lt;/td&gt;&lt;td&gt;([\d]+)&lt;/td&gt;&lt;td&gt;([\d]+.[\d]+)&lt;/td&gt;
     ^^^^^^^^^           ^^^^^^^^^^^           ^^^^^           ^^^^^^^^^^^
      group 1             group 2              group 3          group 4
</snippet></ROW><ROW><id>3860971</id><snippet>dataPattern = re.compile(r"&lt;td&gt;[a-zA-Z]+&lt;/td&gt;... etc.")
match = dataPattern.find(htmlstring)
field1 = match.group(1)
field2 = match.group(2)
</snippet></ROW><ROW><id>3861032</id><snippet>a = list("hello")
</snippet></ROW><ROW><id>3861032</id><snippet>''.join(a)</snippet></ROW><ROW><id>3861032</id><snippet>a[2] = 'm'
print ''.join(a)
</snippet></ROW><ROW><id>3861292</id><snippet>lambda</snippet></ROW><ROW><id>3861292</id><snippet>filter(lambda dt: hasattr(dt, 'hour') and dt.hour % 6, dates)
</snippet></ROW><ROW><id>3861292</id><snippet>hasattr</snippet></ROW><ROW><id>3861292</id><snippet>dates</snippet></ROW><ROW><id>3861292</id><snippet>map</snippet></ROW><ROW><id>3861292</id><snippet>filter</snippet></ROW><ROW><id>3861292</id><snippet>[dt for dt in dates if hasattr(dt, 'hour') and dt.hour % 6]
</snippet></ROW><ROW><id>3861326</id><snippet>pdftotext</snippet></ROW><ROW><id>3861521</id><snippet>dict</snippet></ROW><ROW><id>3861521</id><snippet>dict1.update(dict2)</snippet></ROW><ROW><id>3861521</id><snippet>&gt;&gt;&gt; dict1 = {"Harry": 18, "Mary": 27, "Tim": 7}
&gt;&gt;&gt; dict2 = {"Harry": 22, "Mary": 27, "Frank": 40}
&gt;&gt;&gt; dict1.update(dict2)
&gt;&gt;&gt; dict1
{'Tim': 7, 'Harry': 22, 'Frank': 40, 'Mary': 27}
</snippet></ROW><ROW><id>3861725</id><snippet>def splitter(n, s):
    pieces = s.split()
    return (" ".join(pieces[i:i+n]) for i in xrange(0, len(pieces), n)

for piece in splitter(1000, really_long_string):
    print piece
</snippet></ROW><ROW><id>3861886</id><snippet>?next=/editor/25/</snippet></ROW><ROW><id>3861886</id><snippet>request.GET</snippet></ROW><ROW><id>3861886</id><snippet>next</snippet></ROW><ROW><id>3861886</id><snippet>request.GET</snippet></ROW><ROW><id>3861886</id><snippet>login</snippet></ROW><ROW><id>3861886</id><snippet>next</snippet></ROW><ROW><id>3861886</id><snippet>request.POST</snippet></ROW><ROW><id>3861886</id><snippet>POST</snippet></ROW><ROW><id>3862094</id><snippet>if database_path == "":
    ....
</snippet></ROW><ROW><id>3862094</id><snippet>if database_path:
   ....
</snippet></ROW><ROW><id>3862094</id><snippet>assert database_path != "", 'database path empty'
</snippet></ROW><ROW><id>3862099</id><snippet>extract&lt;float&gt;</snippet></ROW><ROW><id>3862099</id><snippet>PyObject</snippet></ROW><ROW><id>3862099</id><snippet>const PyObject* pyo = o.ptr();
if (PyFloat_Check(pyo))
{
    // True only for floats.
    a = extract&lt;float&gt;(o);
}
</snippet></ROW><ROW><id>3862831</id><snippet>__doc__ = """
&gt;&gt;&gt; L = []
&gt;&gt;&gt; if True:
...    append_to(L) # doctest: +IGNORE_RESULT
&gt;&gt;&gt; L
[1]
""".replace('+IGNORE_RESULT', '+ELLIPSIS\n&lt;...&gt;')

def append_to(L):
    L.append(1)
    class A(object):
        pass
    return A()
</snippet></ROW><ROW><id>3862831</id><snippet>&lt;...&gt;</snippet></ROW><ROW><id>3862831</id><snippet>&lt;module.A object at 0x...&gt;</snippet></ROW><ROW><id>3862831</id><snippet>...</snippet></ROW><ROW><id>3862831</id><snippet>doctest.register_optionflag('IGNORE_RESULT')</snippet></ROW><ROW><id>3862831</id><snippet>doctest.OptionChecker</snippet></ROW><ROW><id>3862831</id><snippet>$ python -m doctest your_module.py</snippet></ROW><ROW><id>3862852</id><snippet>multiprocessing</snippet></ROW><ROW><id>3862852</id><snippet>apply_async</snippet></ROW><ROW><id>3862852</id><snippet>def fun(i):
    # do something in this sub-process and then return a log message
    return "finished doing something"

def cb(resultFromFun):
    wx.CallAfter(window.LogData, resultFromFun)

my_pool.apply_async(fun, [i], callback = cb)
</snippet></ROW><ROW><id>3862957</id><snippet>__subclasses__</snippet></ROW><ROW><id>3862957</id><snippet>class Foo(object): pass
class Bar(Foo): pass
class Baz(Foo): pass
class Bing(Bar): pass
</snippet></ROW><ROW><id>3862957</id><snippet>print([cls.__name__ for cls in vars()['Foo'].__subclasses__()])
# ['Bar', 'Baz']
</snippet></ROW><ROW><id>3862957</id><snippet>print([cls for cls in vars()['Foo'].__subclasses__()])
# [&lt;class '__main__.Bar'&gt;, &lt;class '__main__.Baz'&gt;]
</snippet></ROW><ROW><id>3862957</id><snippet>Foo</snippet></ROW><ROW><id>3862957</id><snippet>for cls in vars()['Foo'].__subclasses__():
    print(cls.__base__)
# &lt;class '__main__.Foo'&gt;
# &lt;class '__main__.Foo'&gt;
</snippet></ROW><ROW><id>3862957</id><snippet>def all_subclasses(cls):
    return cls.__subclasses__() + [g for s in cls.__subclasses__()
                                   for g in all_subclasses(s)]

print(all_subclasses(vars()['Foo']))
# [&lt;class '__main__.Bar'&gt;, &lt;class '__main__.Baz'&gt;, &lt;class '__main__.Bing'&gt;]
</snippet></ROW><ROW><id>3863553</id><snippet>&gt;&gt;&gt; class C(object): pass
...
&gt;&gt;&gt; z = C()
&gt;&gt;&gt; z.blah = "xyzzy"
&gt;&gt;&gt; dir(z)
['__class__', '__delattr__', '__dict__', ... '__weakref__', 'blah']
</snippet></ROW><ROW><id>3863832</id><snippet>In [33]: hash?
</snippet></ROW><ROW><id>3863832</id><snippet>import pprint
class SomeClass(object):
    def __init__(self,ida,idb):
        self.ida=ida
        self.idb=idb
obj1 = SomeClass(ida=5223372036854775807, idb=2)
obj2 = SomeClass(ida=2, idb=5223372036854775807)
obj3 = SomeClass(ida=5223372036854775807, idb=2)

d={}
for obj in (obj1,obj2,obj3):
    d[obj.ida,obj.idb]=obj

pprint.pprint(d)
# {(2, 5223372036854775807L): &lt;__main__.SomeClass object at 0xb78839ec&gt;,
   (5223372036854775807L, 2): &lt;__main__.SomeClass object at 0xb7883a0c&gt;}
</snippet></ROW><ROW><id>3863884</id><snippet>getPage</snippet></ROW><ROW><id>3863884</id><snippet>getPage</snippet></ROW><ROW><id>3863884</id><snippet>twisted.web.client.getPage</snippet></ROW><ROW><id>3863884</id><snippet>#!/usr/bin/env python
from nose.twistedtools import deferred
from twisted.web import client
import nose

@deferred()
def test_download():
    url = 'http://localhost:8000'

    d = client.getPage(url)

    def callback(data):
        assert len(data) != 0

    d.addCallback(callback)
    return d

if __name__ == "__main__":
    args = ['--verbosity=2', __file__]
    nose.run(argv=args)
</snippet></ROW><ROW><id>3863884</id><snippet>$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
</snippet></ROW><ROW><id>3863884</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.019s

OK
</snippet></ROW><ROW><id>3864006</id><snippet>(let [foo (with-out-str (println "Hello world!"))] 
   foo)
</snippet></ROW><ROW><id>3864628</id><snippet>c = {}</snippet></ROW><ROW><id>3864628</id><snippet>c = b.copy()</snippet></ROW><ROW><id>3865224</id><snippet>flat</snippet></ROW><ROW><id>3865224</id><snippet>import numpy as np
blocks = np.arange(2*3*4.).reshape((2,3,4))
i,j,k = 0,1,2
print [x for x in blocks[i:i+2, j:j+2, k:k+2].flat]
</snippet></ROW><ROW><id>3865224</id><snippet>flat</snippet></ROW><ROW><id>3865224</id><snippet>np.fromiter()</snippet></ROW><ROW><id>3865321</id><snippet>cost_time</snippet></ROW><ROW><id>3865321</id><snippet>func</snippet></ROW><ROW><id>3865321</id><snippet>functools.wraps</snippet></ROW><ROW><id>3865321</id><snippet>__name__</snippet></ROW><ROW><id>3865321</id><snippet>__doc__</snippet></ROW><ROW><id>3865321</id><snippet>from functools import wraps

def cost_time(fn):
    @wraps(fn)
    def wrapper():
        return fn()

    return wrapper
</snippet></ROW><ROW><id>3865731</id><snippet>mymodule = __import__(mod, fromlist=['a'])</snippet></ROW><ROW><id>3865853</id><snippet>unordered = [(3, 1), (4, 2), (2, 2), (1, 1)]</snippet></ROW><ROW><id>3865853</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; sorted(unordered, key=operator.itemgetter(1,0))
[(1, 1), (3, 1), (2, 2), (4, 2)]
</snippet></ROW><ROW><id>3865853</id><snippet>unordered.sort(key=operator.itemgetter(1,0))</snippet></ROW><ROW><id>3865925</id><snippet>import re
links = re.findall('(https?://\S+)', text)
</snippet></ROW><ROW><id>3865925</id><snippet>import re
link_re = re.compile('(https?://\S+)')
links = link_re.findall(text)
</snippet></ROW><ROW><id>3866302</id><snippet>sel.click</snippet></ROW><ROW><id>3866302</id><snippet>sel.click("//*[@id='linkout-icon-unknown-vir_full']")
</snippet></ROW><ROW><id>3866302</id><snippet>matches</snippet></ROW><ROW><id>3866302</id><snippet>sel = selenium.selenium("localhost", 4444, "*firefox", "http://www.ncbi.nlm.nih.gov/")
sel.start()
sel.open('/pubmed')
sel.type("search_term", "20032207[uid]")
sel.click("search")
sel.wait_for_page_to_load(30000)
sel.click("//*[contains(@id,'linkout')]")
</snippet></ROW><ROW><id>3866502</id><snippet>has_key()</snippet></ROW><ROW><id>3866502</id><snippet>in</snippet></ROW><ROW><id>3866502</id><snippet>python -m cProfile -s cumulative foo.py</snippet></ROW><ROW><id>3866502</id><snippet>list</snippet></ROW><ROW><id>3866502</id><snippet>pop</snippet></ROW><ROW><id>3866502</id><snippet>pop</snippet></ROW><ROW><id>3866502</id><snippet>append</snippet></ROW><ROW><id>3866502</id><snippet>ARITHMETIC_OPERATORS</snippet></ROW><ROW><id>3866502</id><snippet>getattr</snippet></ROW><ROW><id>3866502</id><snippet>ARITHMETIC_OPERATORS = {
    '+':  operator.add, '-':  operator.sub,
    '*':  operator.mul, '/':  operator.div, '%':  operator.mod,
    '**': operator.pow, '//': operator.floordiv,
}

def postfix(expression, operators=ARITHMETIC_OPERATORS):
    stack = []
    for val in expression.split():
        if val in operators:
            f = operators[val]
            stack[-2:] = [f(*stack[-2:])]
        else:
            stack.append(int(val))
    return stack.pop()
</snippet></ROW><ROW><id>3866601</id><snippet>self.choice</snippet></ROW><ROW><id>3866601</id><snippet>()</snippet></ROW><ROW><id>3866730</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.randn(1000)

fig = plt.figure()
ax = fig.add_subplot(111)
n, bins, rectangles = ax.hist(x, 50, normed=True)
fig.canvas.draw()
plt.show()
</snippet></ROW><ROW><id>3866730</id><snippet>[0,1]</snippet></ROW><ROW><id>3866730</id><snippet>hist</snippet></ROW><ROW><id>3866730</id><snippet>ax.hist?</snippet></ROW><ROW><id>3866730</id><snippet>ipython</snippet></ROW><ROW><id>3866730</id><snippet>*normed*:
If *True*, the first element of the return tuple will
be the counts normalized to form a probability density, i.e.,
``n/(len(x)*dbin)``.  In a probability density, the integral of
the histogram should be 1; you can verify that with a
trapezoidal integration of the probability density function::

    pdf, bins, patches = ax.hist(...)
    print np.sum(pdf * np.diff(bins))
</snippet></ROW><ROW><id>3866730</id><snippet>np.sum(n * np.diff(bins))
</snippet></ROW><ROW><id>3866730</id><snippet>1.0</snippet></ROW><ROW><id>3866730</id><snippet>normed=True</snippet></ROW><ROW><id>3866730</id><snippet>np.sum(n)</snippet></ROW><ROW><id>3866730</id><snippet>7.2767</snippet></ROW><ROW><id>3866788</id><snippet>pos_int = self.player.query_position(gst.FORMAT_TIME, None)[0]
</snippet></ROW><ROW><id>3866788</id><snippet>query_position()</snippet></ROW><ROW><id>3866788</id><snippet>gst.FORMAT_BYTES</snippet></ROW><ROW><id>3867296</id><snippet>if list1[:-1] == list2[:-1]</snippet></ROW><ROW><id>3867799</id><snippet>__new__</snippet></ROW><ROW><id>3867799</id><snippet>&gt;&gt;&gt; class Test(object):
...     def __new__(cls, x):
...         if x:
...             return super(Test, cls).__new__(cls)
...         else:
...             raise ValueError
... 
&gt;&gt;&gt; obj1 = Test(True)
&gt;&gt;&gt; obj2 = Test(False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in __new__
ValueError
&gt;&gt;&gt; obj1
&lt;__main__.Test object at 0xb7738b2c&gt;
&gt;&gt;&gt; obj2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'obj2' is not defined
</snippet></ROW><ROW><id>3867799</id><snippet>__new__</snippet></ROW><ROW><id>3867968</id><snippet>Player</snippet></ROW><ROW><id>3867968</id><snippet>Turn</snippet></ROW><ROW><id>3867968</id><snippet>turn.roll_dice()</snippet></ROW><ROW><id>3867968</id><snippet>Turn</snippet></ROW><ROW><id>3867968</id><snippet>roll</snippet></ROW><ROW><id>3867968</id><snippet>NotYourTurnError</snippet></ROW><ROW><id>3867968</id><snippet>Player</snippet></ROW><ROW><id>3867968</id><snippet>die.roll()</snippet></ROW><ROW><id>3867968</id><snippet>roll</snippet></ROW><ROW><id>3867968</id><snippet>__roll</snippet></ROW><ROW><id>3867968</id><snippet>die</snippet></ROW><ROW><id>3867968</id><snippet>die</snippet></ROW><ROW><id>3867968</id><snippet>roll</snippet></ROW><ROW><id>3867968</id><snippet>_foo</snippet></ROW><ROW><id>3867968</id><snippet>__foo</snippet></ROW><ROW><id>3868065</id><snippet>frame = VFrame(parent)
frame.SetStatusText("OK")
</snippet></ROW><ROW><id>3868065</id><snippet>frame = VFrame(parent)
VFrame.SetStatusText(frame, "OK")
</snippet></ROW><ROW><id>3868065</id><snippet>VFrame</snippet></ROW><ROW><id>3868171</id><snippet>Is it possible to have the CLI and GUI at the same time? I mean, can I take the CLI as another view of the data model? Or there is other right approach?
</snippet></ROW><ROW><id>3868201</id><snippet>M-x shell</snippet></ROW><ROW><id>3868201</id><snippet>python myproblem.py</snippet></ROW><ROW><id>3868201</id><snippet>set_trace</snippet></ROW><ROW><id>3868311</id><snippet>${request.params['my_param']}
</snippet></ROW><ROW><id>3868311</id><snippet>${request.params.get('my_param', '')}
</snippet></ROW><ROW><id>3868348</id><snippet>setup(script_args=['bdist_egg'], **config)</snippet></ROW><ROW><id>3868357</id><snippet>import re

s = "my 'cat' is 'white'"

print re.sub("'([^']+)'", r"'\1\1'", s) # prints my 'catcat' is 'whitewhite'
</snippet></ROW><ROW><id>3868357</id><snippet>\1</snippet></ROW><ROW><id>3868357</id><snippet>$1</snippet></ROW><ROW><id>3868777</id><snippet>_</snippet></ROW><ROW><id>3868777</id><snippet>[foo() for _ in range(10)]
</snippet></ROW><ROW><id>3868777</id><snippet>_</snippet></ROW><ROW><id>3868777</id><snippet>foo()</snippet></ROW><ROW><id>3868777</id><snippet>[foo()] * 10
</snippet></ROW><ROW><id>3868777</id><snippet>foo()</snippet></ROW><ROW><id>3868801</id><snippet>-a</snippet></ROW><ROW><id>3868801</id><snippet>pstree -p -a
</snippet></ROW><ROW><id>3868816</id><snippet>load('/refresh')</snippet></ROW><ROW><id>3868816</id><snippet>responsecontainer</snippet></ROW><ROW><id>3868816</id><snippet>RefreshPage</snippet></ROW><ROW><id>3868816</id><snippet>{% for greeting in greetings %} 
  {% if greeting.author %} 
    &lt;b&gt;{{ greeting.author.nickname }}&lt;/b&gt; wrote: 
    &lt;a href="/sign?key={{ greeting.key.id }}&amp;auth={{ greeting.author.nickname }}"&gt;Delete&lt;/a&gt; 
  {% else %} 
   An anonymous person wrote: 
  {% endif %} 
  &lt;blockquote&gt;{{ greeting.content|escape }}&lt;/blockquote&gt; 
{% endfor %} 
</snippet></ROW><ROW><id>3868816</id><snippet>&lt;div id="responsecontainer"&gt; 
    {% include "sub_template.html" %} 
&lt;/div&gt; 

&lt;form action="/sign" method="post"&gt; 
&lt;div&gt;&lt;textarea name="content" rows="3" cols="60"&gt;&lt;/textarea&gt;&lt;/div&gt; 
&lt;div&gt;&lt;input type="submit" value="Sign Guestbook" name="submitGuestBk"&gt;&lt;/div&gt; 
&lt;/form&gt; 
</snippet></ROW><ROW><id>3868861</id><snippet>(\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4}|\d{3}[-\.\s]??\d{4})
</snippet></ROW><ROW><id>3868861</id><snippet>000-000-0000
000 000 0000
000.000.0000

(000)000-0000
(000)000 0000
(000)000.0000
(000) 000-0000
(000) 000 0000
(000) 000.0000

000-0000
000 0000
000.0000

0000000
0000000000
(000)0000000
</snippet></ROW><ROW><id>3868893</id><snippet>from mako import TemplateLookup

template_lookup = TemplateLookup(directories=['.'])
template = template_lookup.get_template("index.mako")
whitespace_mess = template.render(somevar="no whitespace here")
return whitespace_mess # Why stop here?
</snippet></ROW><ROW><id>3868893</id><snippet>from mako import TemplateLookup

template_lookup = TemplateLookup(directories=['.'])
template = template_lookup.get_template("index.mako")
whitespace_mess = template.render(somevar="no whitespace here")
cleaned_up_output = cleanup_whitespace(whitespace_mess)
return cleaned_up_output
</snippet></ROW><ROW><id>3868932</id><snippet>def setHost(host):
    global _host
    _host = host
</snippet></ROW><ROW><id>3868977</id><snippet>def get_world_objects_in_area(input):
    try:
        x = input.x
        y = input.y
        width = input.w
        height = input.h
        world_key = input.k
    except:
        return False

    # boundaries
    top = to_map_unit(y)
    bottom = to_map_unit(y-height) # this is "-" because in flash the vertical axis is inverted
    left = to_map_unit(x)
    right = to_map_unit(x+width)

    bounding_box = geo.geotypes.Box(top, right, bottom, left)

    query = WorldObject.all()
    query.filter('world', world_key)

    r = WorldObject.bounding_box_fetch(query,
                                       bounding_box,
                                       max_results=1000)

    return r

def to_map_unit(n):
    if n is not 0:
        divide_by = 1000000000000
        r = Decimal(n) / Decimal(divide_by)
        return float(r)
    else:
        return 0
</snippet></ROW><ROW><id>3869108</id><snippet>class Preserver(object):
    def __init__(self):
        self._bottle = []
    def add(self, an_object):
        self._bottle.append(an_object)
    def preserve(self, filepath):
        # code using pickle or json to push self._bottle
        # out to a file named "filepath"
</snippet></ROW><ROW><id>3869375</id><snippet>distutils.dir_util.copy_tree(src, dst)</snippet></ROW><ROW><id>3869375</id><snippet>.strip()</snippet></ROW><ROW><id>3869376</id><snippet>    for i in d:
    # The keys in D contain quotes and a newline which need                                                                                                                                                                              
    # to be removed. In v3, newline = 1 char and in v2,                                                                                                                                                                                  
    # newline = 2 char.                                                                                                                                                                                                                  
    if sys.version_info[0] &lt; 3:
        if i[1:-3] != d[i].get('id'):
            print('%s %s' % (i[1:-3], d[i].get('id')))
    else:
        if i[1:-2] != d[i].get('id'):
             print('%s %s' % (i[1:-2], d[i].get('id')))
</snippet></ROW><ROW><id>3869503</id><snippet>dict((el,0) for el in a)</snippet></ROW><ROW><id>3869508</id><snippet>.pyc</snippet></ROW><ROW><id>3869508</id><snippet>.o</snippet></ROW><ROW><id>3869508</id><snippet>.pyc</snippet></ROW><ROW><id>3869508</id><snippet>gcc</snippet></ROW><ROW><id>3869546</id><snippet>IOLoop</snippet></ROW><ROW><id>3869546</id><snippet>add_callback</snippet></ROW><ROW><id>3869546</id><snippet>loop.add_callback(lambda: some_function(message))
</snippet></ROW><ROW><id>3869546</id><snippet>multiprocessing</snippet></ROW><ROW><id>3869563</id><snippet>results = [open(f.strip()).read() for f in open("filenames.txt").readlines()]
</snippet></ROW><ROW><id>3870181</id><snippet>def decode_heuristically(string, enc = None, denc = sys.getdefaultencoding()):
    """
    Try to interpret 'string' using several possible encodings.
    @input : string, encode type.
    @output: a list [decoded_string, flag_decoded, encoding]
    """
    if isinstance(string, unicode): return string, 0, "utf-8"
    try:
        new_string = unicode(string, "ascii")
        return string, 0, "ascii"
    except UnicodeError:
        encodings = ["utf-8","iso-8859-1","cp1252","iso-8859-15"]

        if denc != "ascii": encodings.insert(0, denc)

        if enc: encodings.insert(0, enc)

        for enc in encodings:
            if (enc in ("iso-8859-15", "iso-8859-1") and
                re.search(r"[\x80-\x9f]", string) is not None):
                continue

            if (enc in ("iso-8859-1", "cp1252") and
                re.search(r"[\xa4\xa6\xa8\xb4\xb8\xbc-\xbe]", string)\
                is not None):
                continue

            try:
                new_string = unicode(string, enc)
            except UnicodeError:
                pass
            else:
                if new_string.encode(enc) == string:
                    return new_string, 0, enc

        # If unable to decode,doing force decoding i.e.neglecting those chars.
        output = [(unicode(string, enc, "ignore"), enc) for enc in encodings]
        output = [(len(new_string[0]), new_string) for new_string in output]
        output.sort()
        new_string, enc = output[-1][1]
        return new_string, 1, enc
</snippet></ROW><ROW><id>3870461</id><snippet>text = self.request.get('message')
message = mail.EmailMessage(sender="abc@domain.com", subject="Testing") 
message.to = 'bcd@domain.com' 
message.html = """The Message: %s """ % (text) 
message.send()
</snippet></ROW><ROW><id>3870813</id><snippet>(mnt, False, bvar[0], bvar[1], ...)</snippet></ROW><ROW><id>3870813</id><snippet>temp = self.treemodel.insert(iter, 0, (mht,False)+tuple(bvar) )
</snippet></ROW><ROW><id>3870813</id><snippet>*b</snippet></ROW><ROW><id>3870813</id><snippet>&gt;&gt;&gt; def f(a, b, *c): print(a, b, c)
... 
&gt;&gt;&gt; x, *y = range(6)
&gt;&gt;&gt; f(*y)
1 2 (3, 4, 5)
</snippet></ROW><ROW><id>3870813</id><snippet>&gt;&gt;&gt; (1, *y)
  File "&lt;stdin&gt;", line 1
SyntaxError: can use starred expression only as assignment target
</snippet></ROW><ROW><id>3871001</id><snippet>super(Parameters, self).__setattr__()</snippet></ROW><ROW><id>3871001</id><snippet>class Parameters(object):
    def __init__(self):
        super(Parameters, self).__setattr__('paramOrder', [])

    # etc.
</snippet></ROW><ROW><id>3871001</id><snippet>__dict__</snippet></ROW><ROW><id>3871001</id><snippet>class Parameters(object):
    def __init__(self):
        self.__dict__['paramOrder'] = []

    # etc.
</snippet></ROW><ROW><id>3871001</id><snippet>__getattr__</snippet></ROW><ROW><id>3871140</id><snippet>contact_ptr</snippet></ROW><ROW><id>3871140</id><snippet>Journalist</snippet></ROW><ROW><id>3871140</id><snippet>Contact</snippet></ROW><ROW><id>3871140</id><snippet>contact = Contact.objects.get(pk = 25624)
journalist = Journalist(contact_ptr = contact)
journalist.save()
</snippet></ROW><ROW><id>3871140</id><snippet>app_journalist</snippet></ROW><ROW><id>3871140</id><snippet>contact_ptr_id</snippet></ROW><ROW><id>3871140</id><snippet>insert into app_journalist values (25624)</snippet></ROW><ROW><id>3871140</id><snippet>contact_ptr_id = 25624</snippet></ROW><ROW><id>3871140</id><snippet>contact_ptr = &lt;instance of Contact&gt;</snippet></ROW><ROW><id>3871140</id><snippet>type</snippet></ROW><ROW><id>3871140</id><snippet>journalist = Journalist(contact_ptr = contact)
</snippet></ROW><ROW><id>3871140</id><snippet>firstname</snippet></ROW><ROW><id>3871140</id><snippet>lastname</snippet></ROW><ROW><id>3871140</id><snippet>contact</snippet></ROW><ROW><id>3871140</id><snippet>""</snippet></ROW><ROW><id>3871140</id><snippet>Journalist</snippet></ROW><ROW><id>3871201</id><snippet>request.method</snippet></ROW><ROW><id>3871201</id><snippet>doPost()</snippet></ROW><ROW><id>3871201</id><snippet>doGet()</snippet></ROW><ROW><id>3871201</id><snippet>GET</snippet></ROW><ROW><id>3871201</id><snippet>POST</snippet></ROW><ROW><id>3871207</id><snippet>|escape</snippet></ROW><ROW><id>3871207</id><snippet>{% autoescape on %}</snippet></ROW><ROW><id>3871416</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3871416</id><snippet>poll()</snippet></ROW><ROW><id>3871416</id><snippet>None</snippet></ROW><ROW><id>3871416</id><snippet>communicate()</snippet></ROW><ROW><id>3871416</id><snippet>import subprocess

p = subprocess.Popen((["python", "script.py"]), stdout=subprocess.PIPE)

while p.poll() is None:
    (stdout, stderr) = p.communicate()
    print stdout
</snippet></ROW><ROW><id>3871442</id><snippet>lists = []
infile = open('yourfilename.pickle', 'r')
while 1:
    try:
        lists.append(pickle.load(infile))
    except (EOFError, UnpicklingError):
        break
infile.close()
</snippet></ROW><ROW><id>3872711</id><snippet>access_token</snippet></ROW><ROW><id>3872711</id><snippet>expires</snippet></ROW><ROW><id>3872711</id><snippet>key=value</snippet></ROW><ROW><id>3872711</id><snippet>parse_qs</snippet></ROW><ROW><id>3872711</id><snippet>urlparse</snippet></ROW><ROW><id>3872711</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; s = 'access_token=159565124071460|2.D98PLonBwOyYWlLMhMyNqA__.3600.1286373600-517705339|bFRH8d2SAeV-PpPUhbRkahcERfw&amp;expires=4375'
&gt;&gt;&gt; urlparse.parse_qs(s)
{'access_token': ['159565124071460|2.D98PLonBwOyYWlLMhMyNqA__.3600.1286373600-517705339|bFRH8d2SAeV-PpPUhbRkahcERfw'], 'expires': ['4375']}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3872711</id><snippet>parse_qsl</snippet></ROW><ROW><id>3872711</id><snippet>&gt;&gt;&gt; urlparse.parse_qsl(s)
[('access_token', '159565124071460|2.D98PLonBwOyYWlLMhMyNqA__.3600.1286373600-517705339|bFRH8d2SAeV-PpPUhbRkahcERfw'), ('expires', '4375')]
&gt;&gt;&gt; dict(urlparse.parse_qsl(s)).get('access_token')
'159565124071460|2.D98PLonBwOyYWlLMhMyNqA__.3600.1286373600-517705339|bFRH8d2SAeV-PpPUhbRkahcERfw'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3873296</id><snippet>import fish</snippet></ROW><ROW><id>3873296</id><snippet>help</snippet></ROW><ROW><id>3873296</id><snippet>dir</snippet></ROW><ROW><id>3873422</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; for m in re.finditer( 'll', text ):
...     print( 'll found', m.start(), m.end() )

ll found 1 3
ll found 10 12
ll found 16 18
</snippet></ROW><ROW><id>3873422</id><snippet>&gt;&gt;&gt; text = "Allowed Hello Hollow"
&gt;&gt;&gt; index = 0
&gt;&gt;&gt; while index &lt; len( text ):
...     index = text.find( 'll', index )
...     if index == -1:
...         break
...     print( 'll found at', index )
...     index += 2 # +2 because len('ll') == 2

ll found at  1
ll found at  10
ll found at  16
</snippet></ROW><ROW><id>3873431</id><snippet>numpy.array([x for x in A if x[0] in li])
</snippet></ROW><ROW><id>3873677</id><snippet>UTF8SMTP</snippet></ROW><ROW><id>3873677</id><snippet>EHLO</snippet></ROW><ROW><id>3873734</id><snippet>import itertools as it

varNames = sorted(variants)
combinations = [dict(zip(varNames, prod)) for prod in it.product(*(variants[varName] for varName in varNames))]
</snippet></ROW><ROW><id>3873734</id><snippet>[{'debug': 'on', 'locale': 'de_DE'},
 {'debug': 'on', 'locale': 'en_US'},
 {'debug': 'on', 'locale': 'fr_FR'},
 {'debug': 'off', 'locale': 'de_DE'},
 {'debug': 'off', 'locale': 'en_US'},
 {'debug': 'off', 'locale': 'fr_FR'}]
</snippet></ROW><ROW><id>3873734</id><snippet>combinations = [ [ {varName: val} for varName, val in zip(varNames, prod) ] for prod in it.product(*(variants[varName] for varName in varNames))]
</snippet></ROW><ROW><id>3873734</id><snippet>[[{'debug': 'on'}, {'locale': 'de_DE'}],
 [{'debug': 'on'}, {'locale': 'en_US'}],
 [{'debug': 'on'}, {'locale': 'fr_FR'}],
 [{'debug': 'off'}, {'locale': 'de_DE'}],
 [{'debug': 'off'}, {'locale': 'en_US'}],
 [{'debug': 'off'}, {'locale': 'fr_FR'}]]
</snippet></ROW><ROW><id>3874027</id><snippet>django-filter</snippet></ROW><ROW><id>3874183</id><snippet>&gt;&gt;&gt; regex = r'^(.+)\b\s{2,}\b(.+)\s+(\d+)\s+(\d+)\s+(.+)\s+(\d+)'
&gt;&gt;&gt; for line in s.splitlines():
    lst = [i.strip() for j in re.findall(regex, line) for i in j if j]
    print(lst)


[]
[]
['John Marshall', 'CSC', '78659944', '89989', 'BE', '900']
['Think Code DB I10', 'MSC', '87782', '1231', 'MS', '878']
['Mary 200 Jones', 'CIVIL', '98993483', '32985', 'BE', '898']
['John G. S', 'Mech', '7653', '54', 'MS', '65']
['Silent Ghost', 'Python Ninja', '788505', '88448', 'MS Comp', '887']
</snippet></ROW><ROW><id>3874183</id><snippet>\s</snippet></ROW><ROW><id>3874183</id><snippet>\b</snippet></ROW><ROW><id>3874183</id><snippet>lst</snippet></ROW><ROW><id>3874183</id><snippet>&gt;&gt;&gt; file = open(fname)
&gt;&gt;&gt; [next(file) for _ in range(2)]
&gt;&gt;&gt; for line in file:
    ...  # here empty lst indicates issues with regex
</snippet></ROW><ROW><id>3874183</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; for line in open(fname):
    lst = re.split(r'\s{2,}', line)
    l = len(lst)
    if l in (2,3):
        lst[l-1:] = lst[l-1].split()
    print(lst)

['Name', 'Degree', 'CLASS', 'CODE', 'EDU', 'Scores']
['--------------------------------------------------------------------------------------']
['John Marshall', 'CSC', '78659944', '89989', 'BE', '900']
['Think Code DB I10', 'MSC', '87782', '1231', 'MS', '878']
['Mary 200 Jones', 'CIVIL', '98993483', '32985', 'BE', '898']
['John G. S', 'Mech', '7653', '54', 'MS', '65']
</snippet></ROW><ROW><id>3874183</id><snippet>if l &lt; 3:
    lst = line.split()
    print(lst)
    iname = input('enter indexes that for elements of name: ')     # use raw_input in py2k
    idegr = input('enter indexes that for elements of degree: ')
</snippet></ROW><ROW><id>3874183</id><snippet>&gt;&gt;&gt; for line in open(fname):
    name, _, rest = line.partition('  ')
    lst = [name] + rest.split()
    print(lst)
</snippet></ROW><ROW><id>3874621</id><snippet>(-b-sqrt(b**2-4*a*c))/(2*a)</snippet></ROW><ROW><id>3874621</id><snippet>\frac{- b - \sqrt{b^{2} - 4 \; a \; c}}{2 \; a}</snippet></ROW><ROW><id>3874621</id><snippet>
import ast

class LatexVisitor(ast.NodeVisitor):

    def prec(self, n):
        return getattr(self, 'prec_'+n.__class__.__name__, getattr(self, 'generic_prec'))(n)

    def visit_Call(self, n):
        func = self.visit(n.func)
        args = ', '.join(map(self.visit, n.args))
        if func == 'sqrt':
            return '\sqrt{%s}' % args
        else:
            return r'\operatorname{%s}\left(%s\right)' % (func, args)

    def prec_Call(self, n):
        return 1000

    def visit_Name(self, n):
        return n.id

    def prec_Name(self, n):
        return 1000

    def visit_UnaryOp(self, n):
        if self.prec(n.op) &gt; self.prec(n.operand):
            return r'%s \left(%s\right)' % (self.visit(n.op), self.visit(n.operand))
        else:
            return r'%s %s' % (self.visit(n.op), self.visit(n.operand))

    def prec_UnaryOp(self, n):
        return self.prec(n.op)

    def visit_BinOp(self, n):
        if self.prec(n.op) &gt; self.prec(n.left):
            left = r'\left(%s\right)' % self.visit(n.left)
        else:
            left = self.visit(n.left)
        if self.prec(n.op) &gt; self.prec(n.right):
            right = r'\left(%s\right)' % self.visit(n.right)
        else:
            right = self.visit(n.right)
        if isinstance(n.op, ast.Div):
            return r'\frac{%s}{%s}' % (self.visit(n.left), self.visit(n.right))
        elif isinstance(n.op, ast.FloorDiv):
            return r'\left\lfloor\frac{%s}{%s}\right\rfloor' % (self.visit(n.left), self.visit(n.right))
        elif isinstance(n.op, ast.Pow):
            return r'%s^{%s}' % (left, self.visit(n.right))
        else:
            return r'%s %s %s' % (left, self.visit(n.op), right)

    def prec_BinOp(self, n):
        return self.prec(n.op)

    def visit_Sub(self, n):
        return '-'

    def prec_Sub(self, n):
        return 300

    def visit_Add(self, n):
        return '+'

    def prec_Add(self, n):
        return 300

    def visit_Mult(self, n):
        return '\\;'

    def prec_Mult(self, n):
        return 400

    def visit_Mod(self, n):
        return '\\bmod'

    def prec_Mod(self, n):
        return 500

    def prec_Pow(self, n):
        return 700

    def prec_Div(self, n):
        return 400

    def prec_FloorDiv(self, n):
        return 400

    def visit_LShift(self, n):
        return '\\operatorname{shiftLeft}'

    def visit_RShift(self, n):
        return '\\operatorname{shiftRight}'

    def visit_BitOr(self, n):
        return '\\operatorname{or}'

    def visit_BitXor(self, n):
        return '\\operatorname{xor}'

    def visit_BitAnd(self, n):
        return '\\operatorname{and}'

    def visit_Invert(self, n):
        return '\\operatorname{invert}'

    def prec_Invert(self, n):
        return 800

    def visit_Not(self, n):
        return '\\neg'

    def prec_Not(self, n):
        return 800

    def visit_UAdd(self, n):
        return '+'

    def prec_UAdd(self, n):
        return 800

    def visit_USub(self, n):
        return '-'

    def prec_USub(self, n):
        return 800
    def visit_Num(self, n):
        return str(n.n)

    def prec_Num(self, n):
        return 1000

    def generic_visit(self, n):
        if isinstance(n, ast.AST):
            return r'' % (n.__class__.__name__, ', '.join(map(self.visit, [getattr(n, f) for f in n._fields])))
        else:
            return str(n)

    def generic_prec(self, n):
        return 0

def py2tex(expr):
    pt = ast.parse(expr)
    return LatexVisitor().visit(pt.body[0].value)

</snippet></ROW><ROW><id>3874642</id><snippet>unicode( soup )</snippet></ROW><ROW><id>3874642</id><snippet>for elem in soup.findAll(['script', 'style']):
    elem.extract()
</snippet></ROW><ROW><id>3874732</id><snippet>import cgi</snippet></ROW><ROW><id>3874765</id><snippet>def make_locals_globals():
    """This is just bad"""
    foo = 1
    bar = 2

    locals_dict = locals()
    globals_dict = globals()

    print 'Locals:', locals_dict

    for varname, varval in locals_dict.items():
        print 'Setting global: %s=%s' % (varname, varval)
        globals_dict[varname] = varval

if __name__ == '__main__':
    make_locals_globals()

    print '\nGlobals:'
    print 'foo=', foo
    print 'bar=', bar
</snippet></ROW><ROW><id>3875138</id><snippet>from functools import wraps    

def another_lower_level_decorator(func):
    @wraps( func )
    def wrapped(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapped

def some_abstract_decorator(func):
    @wraps(func)
    @another_lower_level_decorator
    def wrapper(*args, **kwargs):
        # ... details omitted
        return func(*args, **kwargs)
    return wrapper


@some_abstract_decorator
def test():
    """ This is a docstring that should be on the decorated function """
    pass

help(test)
</snippet></ROW><ROW><id>3875138</id><snippet>Help on function test in module __main__:

test(*args, **kwargs)
    This is a docstring that should be on the decorated function
</snippet></ROW><ROW><id>3875138</id><snippet>def some_abstract_decorator(func):
    @another_lower_level_decorator
    @wraps(func)
    def wrapper(*args, **kwargs):
        # ... details omitted
        return func(*args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>3875138</id><snippet>wraps</snippet></ROW><ROW><id>3875138</id><snippet>wraps</snippet></ROW><ROW><id>3875138</id><snippet>from decorator import decorator

@decorator
def another_decorator(func, *args, **kwargs):
    return func(*args, **kwargs)

@decorator
@another_decorator
def some_abstract_decorator(func, *args, **kwargs):
    # ... details omitted
    return func(*args, **kwargs)


@some_abstract_decorator
def test(x):
    """ this is a docstring that should be on the decorated function """
    pass
</snippet></ROW><ROW><id>3875304</id><snippet>scipy.spatial</snippet></ROW><ROW><id>3875304</id><snippet>scikits.ann</snippet></ROW><ROW><id>3875304</id><snippet>tree.query(...)</snippet></ROW><ROW><id>3875304</id><snippet>scipy.spatial.KDTree.query</snippet></ROW><ROW><id>3875304</id><snippet>Returns
-------

d : array of floats
    The distances to the nearest neighbors.
    If x has shape tuple+(self.m,), then d has shape tuple if
    k is one, or tuple+(k,) if k is larger than one.  Missing
    neighbors are indicated with infinite distances.  If k is None,
    then d is an object array of shape tuple, containing lists
    of distances. In either case the hits are sorted by distance
    (nearest first).
i : array of integers
    The locations of the neighbors in self.data. i is the same
    shape as d.
</snippet></ROW><ROW><id>3875304</id><snippet>[1,1]</snippet></ROW><ROW><id>3875304</id><snippet>distance to nearest: 0.0
index of nearest in original array: 0
</snippet></ROW><ROW><id>3875304</id><snippet>[1,1]</snippet></ROW><ROW><id>3875304</id><snippet>array</snippet></ROW><ROW><id>3875304</id><snippet>y = x on the range [1,50]</snippet></ROW><ROW><id>3875304</id><snippet>scipy.spatial.KDTree.query</snippet></ROW><ROW><id>3875304</id><snippet>tree.query([1,1], k=2)
</snippet></ROW><ROW><id>3875332</id><snippet>sqlite3</snippet></ROW><ROW><id>3875424</id><snippet>CELERY_ALWAYS_EAGER = True</snippet></ROW><ROW><id>3875519</id><snippet>import re

s = "track._Event('product', 'test');Product.lisen(1234, 21, 4343); return false;"

pattern = re.compile(r'.*lisen\((?P&lt;pid&gt;\d+),\s*(?P&lt;p1&gt;\d+),\s*(?P&lt;p2&gt;\d+)\).*')

pid, p1, p2 =  map(int, pattern.match(s).groups())
</snippet></ROW><ROW><id>3875740</id><snippet>&gt;&gt;&gt; "{foo} {bar}".format(foo="foo", bar="bar")
'foo bar'
&gt;&gt;&gt; "{foo} {bar}".format(**{"foo": "Hello", "bar": "World!"})
'Hello World!'
</snippet></ROW><ROW><id>3875832</id><snippet>def with(klass, *args)
  yield r = klass.open(*args)
ensure
  r.close
end
</snippet></ROW><ROW><id>3875832</id><snippet>with File, 'temp.txt', 'w' do |f|
  f.write 'hi'
  raise 'spitespite'
end
</snippet></ROW><ROW><id>3875832</id><snippet>File</snippet></ROW><ROW><id>3875832</id><snippet>File</snippet></ROW><ROW><id>3875832</id><snippet>File.open 'temp.txt', 'w' do |f|
  f.write 'hi'
  raise 'spitespite'
end
</snippet></ROW><ROW><id>3875832</id><snippet>def File.open(*args)
  f = new(*args)
  return f unless block_given?
  yield f
ensure
  f.close if block_given?
end
</snippet></ROW><ROW><id>3875832</id><snippet>def with(ctx)
  yield ctx.setup
ensure
  ctx.teardown
end

class File
  def setup; self end
  alias_method :teardown, :close
end

with File.open('temp.txt', 'w') do |f|
  f.write 'hi'
  raise 'spitespite'
end
</snippet></ROW><ROW><id>3875882</id><snippet>datetime.datetime(1, 1, 1) + datetime.timedelta(microseconds = ticks/10)
</snippet></ROW><ROW><id>3875882</id><snippet>datetime.datetime(2010, 9, 29, 11, 15)
</snippet></ROW><ROW><id>3876262</id><snippet>def cropbbox(imagewidth,imageheight, thumbwidth,thumbheight):
    """ cropbbox(imagewidth,imageheight, thumbwidth,thumbheight)

        Compute a centered image crop area for making thumbnail images.
          imagewidth,imageheight are source image dimensions
          thumbwidth,thumbheight are thumbnail image dimensions

        Returns bounding box pixel coordinates of the cropping area 
        in this order (left, upper, right, and lower).
    """
    # determine scale factor
    fx = float(imagewidth)/thumbwidth
    fy = float(imageheight)/thumbheight
    f = fx if fx &lt; fy else fy

    # calculate size of crop area
    cropheight,cropwidth = int(thumbheight*f),int(thumbwidth*f)

    # for centering compute half the size difference of the image and the crop area 
    dx = (imagewidth-cropwidth)/2
    dy = (imageheight-cropheight)/2

    # return bounding box of crop area
    return dx,dy, cropwidth+dx,cropheight+dy

if __name__=='__main__':

    print "==="
    bbox = cropbbox(1024,768, 128,128)
    print "cropbbox(1024,768, 128,128):", bbox

    print "==="
    bbox = cropbbox(768,1024, 128,128)
    print "cropbbox(768,1024, 128,128):", bbox

    print "==="
    bbox = cropbbox(1024,1024, 96,128)
    print "cropbbox(1024,1024, 96,128):", bbox

    print "==="
    bbox = cropbbox(1024,1024, 128,96)
    print "cropbbox(1024,1024, 128,96):", bbox
</snippet></ROW><ROW><id>3876262</id><snippet>im.crop(bbox)</snippet></ROW><ROW><id>3876262</id><snippet>im.thumbnail(...)</snippet></ROW><ROW><id>3876268</id><snippet>compile</snippet></ROW><ROW><id>3876268</id><snippet>isstatement= False
try:
    code= compile(s, '&lt;stdin&gt;', 'eval')
except SyntaxError:
    isstatement= True
    code= compile(s, '&lt;stdin&gt;', 'exec')

result= None
if isstatement:
    exec s
else:
    result= eval(s)

if result is not None:
    print result
</snippet></ROW><ROW><id>3876474</id><snippet>wm.add_watch(watched_dir, pyinotify.IN_CLOSE_WRITE, proc_fun=MyProcessEvent())
</snippet></ROW><ROW><id>3876474</id><snippet>man 5 incrontab</snippet></ROW><ROW><id>3876474</id><snippet>   IN_ACCESS           File was accessed (read) (*)
   IN_ATTRIB           Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
   IN_CLOSE_WRITE      File opened for writing was closed (*)
   IN_CLOSE_NOWRITE    File not opened for writing was closed (*)
   IN_CREATE           File/directory created in watched directory (*)
   IN_DELETE           File/directory deleted from watched directory (*)
   IN_DELETE_SELF           Watched file/directory was itself deleted
   IN_MODIFY           File was modified (*)
   IN_MOVE_SELF        Watched file/directory was itself moved
   IN_MOVED_FROM       File moved out of watched directory (*)
   IN_MOVED_TO         File moved into watched directory (*)
   IN_OPEN             File was opened (*)
</snippet></ROW><ROW><id>3876916</id><snippet>./configure</snippet></ROW><ROW><id>3876916</id><snippet>import os

def runTestCmd(self):
    self.proc = subprocess.Popen(["./configure"], shell=False,
                                 preexec_fn=os.setsid)
</snippet></ROW><ROW><id>3876916</id><snippet>os.kill(-process.pid, signal.SIGKILL)</snippet></ROW><ROW><id>3876916</id><snippet>preexec_fn</snippet></ROW><ROW><id>3876916</id><snippet>os.signal(-process.pid, signal.SIGTERM)</snippet></ROW><ROW><id>3876916</id><snippet>SIGKILL</snippet></ROW><ROW><id>3876916</id><snippet>import time, os, errno, signal

def waitTestComplete(self, timeout):
    st = time.time() 
    while (time.time()-st) &lt; timeout:
        if self.proc.poll() is not None:  # 0 just means successful exit
            # Only return True if process exited successfully,
            # otherwise return False.
            return self.proc.returncode == 0
        else:
            time.sleep(2)
    # The process may exit between the time we check and the
    # time we send the signal.
    try:
        os.kill(-self.proc.pid, signal.SIGTERM)
    except OSError, e:
        if e.errno != errno.ESRCH:
            # If it's not because the process no longer exists,
            # something weird is wrong.
            raise
    time.sleep(1)
    if self.proc.poll() is None: # Still hasn't exited.
        try:
            os.kill(-self.proc.pid, signal.SIGKILL)
        except OSError, e:
            if e.errno != errno.ESRCH:
                raise
    raise TestError("timed out waiting for test to complete")
</snippet></ROW><ROW><id>3876916</id><snippet>shell=True</snippet></ROW><ROW><id>3876916</id><snippet>shell=True</snippet></ROW><ROW><id>3877127</id><snippet>def template(baseclass):
    class Foo(baseclass):
        def fun(self):
            print "%s::fun()" % self.__class__.__name__

    # derive a class name for the subclass returned (optional)
    Foo.__name__ = "_".join([Foo.__name__, baseclass.__name__])
    return Foo

class Base1:
    def bar(self):
        print "Base1::bar()"

class Base2:
    def bar(self):
        print "Base2::bar()"

Foo_Base1 = template(Base1)
print 'Foo_Base1 base classes:', Foo_Base1.__bases__

Foo_Base2 = template(Base2)
print 'Foo_Base2 base classes:', Foo_Base2.__bases__

d1 = Foo_Base1()
d1.fun()
d1.bar()

d2 = Foo_Base2()
d2.fun()
d2.bar()
</snippet></ROW><ROW><id>3877127</id><snippet>Foo_Base1 base classes: (&lt;class __main__.Base1 at 0x00A56C70&gt;,)
Foo_Base2 base classes: (&lt;class __main__.Base2 at 0x00ABFA78&gt;,)
Foo_Base1::fun()
Base1::bar()
Foo_Base2::fun()
Base2::bar()
Foo_Base2::fun()
Base2::bar()
</snippet></ROW><ROW><id>3877127</id><snippet>template()</snippet></ROW><ROW><id>3877151</id><snippet>ukol1.SummaryFormula()
</snippet></ROW><ROW><id>3877151</id><snippet>ukol1.SummaryFormula(someSummaryFormula)
</snippet></ROW><ROW><id>3877151</id><snippet>__init__</snippet></ROW><ROW><id>3877151</id><snippet>self.assertRaises(TypeError, ukol1.SummaryFormula, "testtest")
</snippet></ROW><ROW><id>3877247</id><snippet>np.array(map(float, list_of_strings))</snippet></ROW><ROW><id>3877247</id><snippet>astype()</snippet></ROW><ROW><id>3877247</id><snippet>import numpy as np
x = np.array(['1.1', '2.2', '3.3'], dtype='|S4')
y = x.astype(np.float)
</snippet></ROW><ROW><id>3877275</id><snippet>[]</snippet></ROW><ROW><id>3877275</id><snippet>[]</snippet></ROW><ROW><id>3877275</id><snippet>class A(object):
    def __init__(self): print "a",
    def __del__(self): print "b",

# a a b b False
print A() is A()
# a b a b True
print id(A()) == id(A())
</snippet></ROW><ROW><id>3877312</id><snippet>settings</snippet></ROW><ROW><id>3877312</id><snippet>sudo('mkdir tmp') # can't fail
with settings(warn_only=True):
    sudo('touch tmp/test') # can fail
sudo('rm tmp') # can't fail
</snippet></ROW><ROW><id>3877335</id><snippet>mpirun -np 2 ./robots.py</snippet></ROW><ROW><id>3877335</id><snippet>#!/usr/bin/env python
import numpy
import pylab
from mpi4py import MPI

class Robot(object):
    def __init__(self, id, x, y, vx, vy, mass):
        self.id = id
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.ax = 0.
        self.ay = 0.
        self.mass = mass
    def rPrint(self):
        print "Robot ",self.id," at (",self.x,",",self.y,")"
    def interact(self, robot2):
        dx = (self.x-robot2.x)
        dy = (self.y-robot2.y)
        eps = 0.25
        idist3 = numpy.power(numpy.sqrt(dx*dx +dy*dy + eps*eps),-3)
        numerator = -self.mass*robot2.mass
        self.ax += numerator*dx*idist3
        self.ay += numerator*dy*idist3
        robot2.ax -= numerator*dx*idist3
        robot2.ay -= numerator*dy*idist3
    def updatePos(self, dt):
        self.x += 0.5*self.vx*dt
        self.y += 0.5*self.vy*dt
        self.vx += self.ax*dt
        self.vy += self.ay*dt
        self.x += 0.5*self.vx*dt
        self.y += 0.5*self.vy*dt
        self.ax = 0.
        self.ay = 0.



def init(nRobots):
    myRobotList = []
    vx = 0.
    vy = 0.
    mass = 1.
    for i in range(nRobots):
        randpos = numpy.random.uniform(-3,+3,2)
        rx = randpos[0]
        ry = randpos[1]
        myRobotList.append(Robot(i, rx, ry, vx, vy, mass))
    return myRobotList

def selfForces(robotList):
    nRobots = len(robotList)
    for i in range(nRobots-1): 
       for j in range (i+1, nRobots):
            robotList[i].interact(robotList[j])

def otherRobotForces(myRobotList, otherRobotList):
    for i in myRobotList:
        for j in otherRobotList:
            i.interact(j)

def plotRobots(robotList):
    xl = []
    yl = []
    vxl = []
    vyl = [] 
    for i in robotList:
       xl.append(i.x)
       yl.append(i.y)
       vxl.append(i.vx)
       vyl.append(i.vy)
    pylab.subplot(1,1,1)
    pylab.plot(xl,yl,'o')
    pylab.quiver(xl,yl,vxl,vyl)
    pylab.show()

if __name__ == "__main__":
    comm = MPI.COMM_WORLD
    nprocs = comm.Get_size()
    rank   = comm.Get_rank()

    if (nprocs != 2):
        print "Only doing this for 2 for now.."
        sys.exit(-1)
    neigh = (rank + 1) %  nprocs

    robotList = init(50)

    for i in range (10):
        print "[",rank,"] Doing step ", i
        selfForces(robotList)

        request = comm.isend(robotList, dest=neigh, tag=11)
        otherRobotList = comm.recv(source=neigh, tag=11)

        otherRobotForces(robotList,otherRobotList)

        request.Wait()

        for r in robotList:
            r.updatePos(0.05)



    if (rank == 0):
        print "plotting Robots"
        plotRobots(robotList + otherRobotList)
</snippet></ROW><ROW><id>3877461</id><snippet>self.canvas._tkcanvas.pack(side='top', fill='both', expand=1)</snippet></ROW><ROW><id>3877461</id><snippet>        #Move this Code 
        ax = Axes3D(self.fig)
        u = np.linspace(0, 2 * np.pi, 100)
        v = np.linspace(0, np.pi, 100)
        x = 10 * np.outer(np.cos(u), np.sin(v))
        y = 10 * np.outer(np.sin(u), np.sin(v))
        z = 10 * np.outer(np.ones(np.size(u)), np.cos(v))
        t = ax.plot_surface(x, y, z,  rstride=4, cstride=4,color='lightgreen',linewidth=0)
</snippet></ROW><ROW><id>3877489</id><snippet>def keys = [1, 2, 3]
def values = ['a', 'b', 'c']
def pairs = [keys, values].transpose()

def map = [:]
pairs.each{ k, v -&gt; map[k] = v }
println map
</snippet></ROW><ROW><id>3877489</id><snippet>def map = [:]
pairs.each{ map &lt;&lt; (it as MapEntry) }
</snippet></ROW><ROW><id>3877637</id><snippet>&gt;&gt;&gt; mystring =""" I like to wash clothes on %s
... I like to clean dishes %s
... """
&gt;&gt;&gt; wash_clothes = 'tuesdays'
&gt;&gt;&gt; clean_dishes = 'never'
&gt;&gt;&gt; 
&gt;&gt;&gt; print mystring % (wash_clothes, clean_dishes)
 I like to wash clothes on tuesdays
I like to clean dishes never
</snippet></ROW><ROW><id>3877921</id><snippet>value: count</snippet></ROW><ROW><id>3878308</id><snippet>mechanize</snippet></ROW><ROW><id>3878308</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br = mechanize.Browser()
&gt;&gt;&gt; br.set_handle_robots(False)
&gt;&gt;&gt; br.addheaders = [('User-Agent', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)')]
</snippet></ROW><ROW><id>3878308</id><snippet>&gt;&gt;&gt; br.open('http://en.wikipedia.org/w/index.php?title=Mike_tyson')
&lt;response_seek_wrapper at 0x... whose wrapped object = &lt;closeable_response at 0x... whose fp = &lt;socket._fileobject object at 0x...&gt;&gt;&gt; #doctest: +ELLIPSIS
</snippet></ROW><ROW><id>3878510</id><snippet>Typical total performance = loading time (A.py) + execution time (A.py) + 
                            loading time (B.py) + execution time (B.py) 

Since loading time (B.pyc)  &lt;  loading time (B.py)

You should see a better performance by using the byte compiled "pyc" files. 
</snippet></ROW><ROW><id>3878615</id><snippet>os.path.join()</snippet></ROW><ROW><id>3878887</id><snippet>open(mp3Name, "wb")</snippet></ROW><ROW><id>3878887</id><snippet>\r\n</snippet></ROW><ROW><id>3878887</id><snippet>\r</snippet></ROW><ROW><id>3878887</id><snippet>\n</snippet></ROW><ROW><id>3879314</id><snippet>find_path(dct, next_, depth)
</snippet></ROW><ROW><id>3879314</id><snippet>return find_path(dct, next_, depth)
# ^^^^
# Return
</snippet></ROW><ROW><id>3879314</id><snippet>return</snippet></ROW><ROW><id>3879314</id><snippet>None</snippet></ROW><ROW><id>3879402</id><snippet>INSTALLED_APPS = ("myproject.someapp", )
</snippet></ROW><ROW><id>3879402</id><snippet>INSTALLED_APPS = ("someapp", )
</snippet></ROW><ROW><id>3879574</id><snippet>^([A-Z][a-z]{0,2}\d*)*$
</snippet></ROW><ROW><id>3879574</id><snippet>[A-Z][^A-Z]*
</snippet></ROW><ROW><id>3879817</id><snippet>rapper -i rdfxml -o ntriples YOUR_FILE.rdf &gt; YOUR_FILE.ntriples
</snippet></ROW><ROW><id>3879817</id><snippet>&lt;s1&gt; &lt;p&gt; &lt;o&gt; .
&lt;s2&gt; &lt;p2&gt; "literal" .
</snippet></ROW><ROW><id>3879817</id><snippet>import RDF
parser=RDF.Parser(name="ntriples") #as name for parser you can use ntriples, turtle, rdfxml, ...
model=RDF.Model()
stream=parser.parse_into_model(model,"file://file_path","http://your_base_uri.org")
for triple in model:
    print triple.subject, triple.predicate, triple.object
</snippet></ROW><ROW><id>3879888</id><snippet>self.data = somethingElse</snippet></ROW><ROW><id>3879888</id><snippet>self.data</snippet></ROW><ROW><id>3879888</id><snippet>self.data</snippet></ROW><ROW><id>3880013</id><snippet>library_dirs</snippet></ROW><ROW><id>3880013</id><snippet>distutils.core.Extension</snippet></ROW><ROW><id>3880013</id><snippet>distutils.core.setup</snippet></ROW><ROW><id>3880268</id><snippet>result = [list(someListOfElements) for _ in xrange(x)]
</snippet></ROW><ROW><id>3880268</id><snippet>someListOfElements</snippet></ROW><ROW><id>3880268</id><snippet>copy.deepcopy(someListOfElements)</snippet></ROW><ROW><id>3880431</id><snippet>pprint.pprint(dataobject, logFile)
</snippet></ROW><ROW><id>3880456</id><snippet>main</snippet></ROW><ROW><id>3880456</id><snippet> def main(self):
        self.fig = plt.figure()
        self.fig = plt.figure(figsize=(3.5,3.5))

        self.frame = Tkinter.Frame(self)
        self.frame.pack(padx=15,pady=15)

        self.canvas = FigureCanvasTkAgg(self.fig, master=self.frame)

        self.canvas.get_tk_widget().pack(side='top', fill='both')

        self.canvas._tkcanvas.pack(side='top', fill='both', expand=1)

        self.toolbar = NavigationToolbar2TkAgg( self.canvas, self )
        self.toolbar.update()
        self.toolbar.pack()

        self.btn = Tkinter.Button(self,text='button',command=self.alt)
        self.btn.pack(ipadx=250)

        self.draw_sphere()
</snippet></ROW><ROW><id>3880456</id><snippet>alt</snippet></ROW><ROW><id>3880456</id><snippet> def alt (self):
        self.draw_sphere(5)
</snippet></ROW><ROW><id>3880456</id><snippet>draw_sphere</snippet></ROW><ROW><id>3880456</id><snippet> def draw_sphere(self, prop=10):
        self.fig.clear()
        ax = Axes3D(self.fig)

        u = np.linspace(0, 2 * np.pi, 100)
        v = np.linspace(0, np.pi, 100)

        x = prop * np.outer(np.cos(u), np.sin(v))
        y = prop * np.outer(np.sin(u), np.sin(v))
        z = prop * np.outer(np.ones(np.size(u)), np.cos(v))

        t = ax.plot_surface(x, y, z, rstride=4, cstride=4,color='lightgreen',linewidth=0)
        self.canvas.draw()
</snippet></ROW><ROW><id>3880783</id><snippet>-np 16</snippet></ROW><ROW><id>3880783</id><snippet># Use 16 processors
#$ -np 16
</snippet></ROW><ROW><id>3880783</id><snippet>.sge_request</snippet></ROW><ROW><id>3880801</id><snippet>for i, x in enumerate(a): print i, x</snippet></ROW><ROW><id>3880801</id><snippet>__iter__</snippet></ROW><ROW><id>3880801</id><snippet>next()</snippet></ROW><ROW><id>3880801</id><snippet>mylist</snippet></ROW><ROW><id>3880801</id><snippet>self._i</snippet></ROW><ROW><id>3880801</id><snippet>in</snippet></ROW><ROW><id>3880801</id><snippet>len</snippet></ROW><ROW><id>3880801</id><snippet>class mylist(object):
    def __init__(self, n, a0, a1, eps=1e-8):
        self._n = n
        self._a0 = a0
        self._a1 = a1
        self._eps = eps

    def __contains__(self, x):
        y = float(x - self._a0) / self._a1
        return 0 &lt;= int(y) &lt; self._n and abs(y - int(y)) &lt; self._eps

    def __getitem__(self, i):
        if 0 &lt;= i &lt; self._n:
            return self._a0 + i * self._a1
        raise IndexError

    def __iter__(self):
        current = self._a0
        for i in xrange(self._n):
             yield current
             current += self._a1

    def __len__(self):
        return self._n
</snippet></ROW><ROW><id>3881199</id><snippet>sf</snippet></ROW><ROW><id>3881199</id><snippet>import urllib2
try:
    search_query = 'http://blah'
    sf = urllib2.urlopen(search_query)
    search_soup = BeautifulSoup.BeautifulStoneSoup(sf.read())
except urllib2.URLError, err:
    print(err.reason)
finally:
    try:
        sf.close()
    except NameError: 
        pass
</snippet></ROW><ROW><id>3881487</id><snippet>X</snippet></ROW><ROW><id>3881487</id><snippet>i &lt; 3</snippet></ROW><ROW><id>3881487</id><snippet>A = array([[0, 1, 2], [0, 2, 0]])
X = array([[0, 1, 2], [1, 2, 0], [2, 1, 2], [3, 2, 0]])
</snippet></ROW><ROW><id>3881487</id><snippet>A</snippet></ROW><ROW><id>3881487</id><snippet>X</snippet></ROW><ROW><id>3881487</id><snippet>&lt; 3</snippet></ROW><ROW><id>3881487</id><snippet>A = vstack((A, X[X[:,0] &lt; 3]))

# returns: 
array([[0, 1, 2],
       [0, 2, 0],
       [0, 1, 2],
       [1, 2, 0],
       [2, 1, 2]])
</snippet></ROW><ROW><id>3881627</id><snippet>return render_to_response('edit_client.html', {'form': form}
</snippet></ROW><ROW><id>3881627</id><snippet>request.method</snippet></ROW><ROW><id>3881627</id><snippet>POST</snippet></ROW><ROW><id>3881627</id><snippet>form</snippet></ROW><ROW><id>3881627</id><snippet>@login_required 
def edit_client(request, id=1):
 clients_list = Client.objects.filter(pk=id)  
 form = ClientForm()
 if request.method == 'POST':
  form = ClientForm(request.POST or None)
  if form.is_valid():
   form.save()
   return HttpResponseRedirect('/index/clients/')
 return render_to_response('edit_client.html', {'form': form},  context_instance=RequestContext(request))
</snippet></ROW><ROW><id>3882134</id><snippet>Base.Foo(self)
</snippet></ROW><ROW><id>3882134</id><snippet>class Base(object):
    # snipped

    def Bar(self):
        Base.Foo(self)  # this will now call Base.Foo regardless of if a subclass
                        # overrides it

# snipped


x = Composite()
x.Foo()  # executes Mixin.Foo, perfect
x.Bar()  # prints "Base.Foo"
</snippet></ROW><ROW><id>3882134</id><snippet>instance.method(argument)
</snippet></ROW><ROW><id>3882134</id><snippet>Class.method(instance, argument)
</snippet></ROW><ROW><id>3882134</id><snippet>self</snippet></ROW><ROW><id>3882134</id><snippet>Bar</snippet></ROW><ROW><id>3882255</id><snippet>dict</snippet></ROW><ROW><id>3882255</id><snippet>update()</snippet></ROW><ROW><id>3882255</id><snippet>object</snippet></ROW><ROW><id>3882255</id><snippet>__dict__</snippet></ROW><ROW><id>3882255</id><snippet>&gt;&gt;&gt; class Site(object):
...     pass
...
&gt;&gt;&gt; site = Site()
&gt;&gt;&gt; site.__dict__.update(dict)
&gt;&gt;&gt; site.a
</snippet></ROW><ROW><id>3882255</id><snippet>&gt;&gt;&gt; class Site(object):
...     def __init__(self,dict):
...         self.__dict__.update(dict)
...
&gt;&gt;&gt; site = Site(dict)
&gt;&gt;&gt; site.a
</snippet></ROW><ROW><id>3882440</id><snippet>import re

txt = 'me (I) you (You) him (He) her (She)'
words = re.findall('\((.+?)\)', txt)

# words returns: ['I', 'You', 'He', 'She']
with open('filename.txt', 'w') as out:
    out.write('\n'.join(words))

# file 'filename.txt' contains now:

I
You
He
She
</snippet></ROW><ROW><id>3883019</id><snippet>%</snippet></ROW><ROW><id>3883019</id><snippet>return (2 - N) % 7
</snippet></ROW><ROW><id>3883019</id><snippet>int result = (2 - N) % 7;
return result &lt; 0 ? result + 7 : result;
</snippet></ROW><ROW><id>3883201</id><snippet>os.listdir</snippet></ROW><ROW><id>3883201</id><snippet>os.walk</snippet></ROW><ROW><id>3883201</id><snippet>os.listdir</snippet></ROW><ROW><id>3883201</id><snippet>os.path.file</snippet></ROW><ROW><id>3883201</id><snippet>import os.path
path = '.'
num_files = len([f for f in os.listdir(path)
                if os.path.isfile(os.path.join(path, f))])
</snippet></ROW><ROW><id>3883201</id><snippet>num_files = sum(os.path.isfile(os.path.join(path, f)) for f in os.listdir(path))
</snippet></ROW><ROW><id>3883201</id><snippet>os.walk</snippet></ROW><ROW><id>3883201</id><snippet>len(os.walk(path).next()[2])
</snippet></ROW><ROW><id>3883398</id><snippet>wsgiserver.Gateway</snippet></ROW><ROW><id>3883398</id><snippet>class UpgradeGateway(Gateway):
    def respond(self):
        h = self.req.inheaders
        if h.get("Connection", "") == "Upgrade":
            # Turn off auto-output of HTTP response headers
            self.req.sent_headers = True
            # Not sure exactly what you want to pass or how, here's a start...
            return protocols[h['Upgrade']].handle(self.req.rfile, self.req.wfile)
        else:
            return old_gateway(self.req).respond()

old_gateway = cherrypy.server.httpserver.gateway
cherrypy.server.httpserver.gateway = UpgradeGateway
</snippet></ROW><ROW><id>3883557</id><snippet>runserver</snippet></ROW><ROW><id>3883892</id><snippet>&gt;&gt;&gt; a = [ 1, 2, 3, 1, 5, 3, 2, 1, 5, 4 ]
&gt;&gt;&gt; b = set( a )
&gt;&gt;&gt; b
{1, 2, 3, 4, 5}
&gt;&gt;&gt; b.add( 5 )
&gt;&gt;&gt; b
{1, 2, 3, 4, 5}
&gt;&gt;&gt; b.add( 6 )
&gt;&gt;&gt; b
{1, 2, 3, 4, 5, 6}
</snippet></ROW><ROW><id>3883892</id><snippet>for row in gp.searchcursor( fc ):
    ##grab field values
    fcValue = fields.getvalue(Atts)
    gp.AddMessage(fcValue)
</snippet></ROW><ROW><id>3883892</id><snippet>""" text """</snippet></ROW><ROW><id>3883892</id><snippet>#</snippet></ROW><ROW><id>3884005</id><snippet>&gt;&gt;&gt; s = '789.82 ± 10.28'
&gt;&gt;&gt; s[:s.index('±')]
'789.82 '
&gt;&gt;&gt; s.partition('±')
('789.82 ', '±', ' 10.28')
</snippet></ROW><ROW><id>3884083</id><snippet>&gt;&gt;&gt; b = 'random'
&gt;&gt;&gt; c = 'stuff'
&gt;&gt;&gt; a  = '%s' %b + '%s' % c
&gt;&gt;&gt; a
'randomstuff'
&gt;&gt;&gt; 

&gt;&gt;&gt; b + c
'randomstuff'
&gt;&gt;&gt; 
&gt;&gt;&gt; z = '%s + %s' % (b, c)
&gt;&gt;&gt; z
'random + stuff'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3884457</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = '&lt;a href="http://google.com"&gt; Hello World! &lt;/a&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; soup.a.string
u' Hello World! '
</snippet></ROW><ROW><id>3884457</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

q = urllib2.urlopen('http://stackoverflow.com/questions/3884419/')
soup = BeautifulSoup(q.read())

for link in soup.findAll('a'):
    if link.has_key('href'):
        print str(link.string) + " -&gt; " + link['href']
    elif link.has_key('id'):
        print "ID: " + link['id']
    else:
        print "???"
</snippet></ROW><ROW><id>3884457</id><snippet>Stack Exchange -&gt; http://stackexchange.com
log in -&gt; /users/login?returnurl=%2fquestions%2f3884419%2f
careers -&gt; http://careers.stackoverflow.com
meta -&gt; http://meta.stackoverflow.com
...
ID: flag-post-3884419
None -&gt; /posts/3884419/revisions
...
</snippet></ROW><ROW><id>3884624</id><snippet>class Foo(object):
    a = None
</snippet></ROW><ROW><id>3884624</id><snippet>Foo</snippet></ROW><ROW><id>3884624</id><snippet>Foo.__dict__['a']=None
</snippet></ROW><ROW><id>3884624</id><snippet>def __init__(self, a = None, b = None, c = None):
    self.a = a
</snippet></ROW><ROW><id>3884624</id><snippet>foo=Foo()
foo.__dict__['a']=a
</snippet></ROW><ROW><id>3884624</id><snippet>__init__</snippet></ROW><ROW><id>3884624</id><snippet>__init__</snippet></ROW><ROW><id>3884624</id><snippet>__new__</snippet></ROW><ROW><id>3884624</id><snippet>__init__</snippet></ROW><ROW><id>3884624</id><snippet>import inspect
import functools

def autoargs(*include,**kwargs):   
    def _autoargs(func):
        attrs,varargs,varkw,defaults=inspect.getargspec(func)
        def sieve(attr):
            if kwargs and attr in kwargs['exclude']: return False
            if not include or attr in include: return True
            else: return False            
        @functools.wraps(func)
        def wrapper(self,*args,**kwargs):
            # handle default values
            for attr,val in zip(reversed(attrs),reversed(defaults)):
                if sieve(attr): setattr(self, attr, val)
            # handle positional arguments
            positional_attrs=attrs[1:]            
            for attr,val in zip(positional_attrs,args):
                if sieve(attr): setattr(self, attr, val)
            # handle varargs
            if varargs:
                remaining_args=args[len(positional_attrs):]
                if sieve(varargs): setattr(self, varargs, remaining_args)                
            # handle varkw
            if kwargs:
                for attr,val in kwargs.iteritems():
                    if sieve(attr): setattr(self,attr,val)            
            return func(self,*args,**kwargs)
        return wrapper
    return _autoargs
</snippet></ROW><ROW><id>3884624</id><snippet>class Foo(object):
    @autoargs()
    def __init__(self,x,path,debug=False,*args,**kw):
        pass
foo=Foo('bar','/tmp',True, 100, 101,verbose=True)
</snippet></ROW><ROW><id>3884624</id><snippet>print(foo.x)
# bar
print(foo.path)
# /tmp
print(foo.debug)
# True
print(foo.args)
# (100, 101)
print(foo.verbose)
# True
</snippet></ROW><ROW><id>3884624</id><snippet>autoargs</snippet></ROW><ROW><id>3884624</id><snippet>autoargs</snippet></ROW><ROW><id>3884771</id><snippet>import urllib2

class MyRequest(urllib2.Request):
    GET = 'get'
    POST = 'post'
    PUT = 'put'
    DELETE = 'delete'

    def __init__(self, url, data=None, headers={},
                 origin_req_host=None, unverifiable=False, method=None):
       urllib2.Request.__init__(self, url, data, headers, origin_req_host, unverifiable)
       self.method = method

    def get_method(self):
        if self.method:
            return self.method

        return urllib2.Request.get_method(self)

opener = urllib2.build_opener(urllib2.HTTPHandler)
req = MyRequest('http://yourwebsite.com/put/resource/', method=MyRequest.PUT)

resp = opener.open(req)
</snippet></ROW><ROW><id>3884846</id><snippet>None</snippet></ROW><ROW><id>3884846</id><snippet>nil</snippet></ROW><ROW><id>3884846</id><snippet>[1, 2, 3][999] # nil. But [].fetch(0) raises an IndexError
{"a" =&gt; 1, "b" =&gt; 2}["nonexistent"] # nil. But {}.fetch("nonexistent") raises an IndexError
</snippet></ROW><ROW><id>3884846</id><snippet>class MyClass
  def hello
    @thisdoesnotexist
  end
end
MyClass.new.hello # nil. But enable warning (ruby -w) to see a warning message.
</snippet></ROW><ROW><id>3884846</id><snippet>nil</snippet></ROW><ROW><id>3884846</id><snippet>nil.to_i # 0
nil.to_f # 0.0 # But Integer(nil), Float(nil) raise a TypeError.
nil.to_s # ""
</snippet></ROW><ROW><id>3885060</id><snippet>&gt;&gt;&gt; d={1: {'message': u'test', 'user': u'user1'}, 2: {'message': u'test2', 'user': u'user2'}}

&gt;&gt;&gt; ''.join('&lt;span&gt;%(message)s&lt;/span&gt;&lt;span&gt;%(user)s&lt;/span&gt;&lt;br/&gt;' % v for k,v in sorted(d.items()))
u'&lt;span&gt;test&lt;/span&gt;&lt;span&gt;user1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;test2&lt;/span&gt;&lt;span&gt;user2&lt;/span&gt;&lt;br/&gt;'
</snippet></ROW><ROW><id>3885155</id><snippet>&gt;&gt;&gt; import pythontest
&gt;&gt;&gt; f = pythontest.Fridge()
</snippet></ROW><ROW><id>3885155</id><snippet>def __init__(self, items=None):
    """Optionally pass in an initial dictionary of items"""
    if items is None:
         items = {}
    if not isinstance(items, dict):
        raise TypeError("Fridge requires a dictionary but was given %s" % type(items))
    self.items = items
</snippet></ROW><ROW><id>3885385</id><snippet>--with-poppler=yes</snippet></ROW><ROW><id>3885587</id><snippet>def TaggingDecorator(method):
  "Decorate the method with an attribute to let the metaclass know it's there."
  method.my_attr = 'FOO BAR'
  return method # No need for a wrapper, we haven't changed
                # what method actually does; your mileage may vary

class TaggingMetaclass(type):
  "Metaclass to check for tags from TaggingDecorator and add them to the class."
  def __new__(cls, name, bases, dct):
    # Check for tagged members
    has_tag = False
    for member in dct.itervalues():
      if hasattr(member, 'my_attr'):
        has_tag = True
        break
    if has_tag:
      # Set the class attribute
      dct['my_attr'] = 'FOO BAR'
    # Now let 'type' actually allocate the class object and go on with life
    return type.__new__(cls, name, bases, dct)
</snippet></ROW><ROW><id>3885587</id><snippet>class Foo(object):
  __metaclass__ = TaggingMetaclass
  pass

class Baz(Foo):
  "It's enough for a base class to have the right metaclass"
  @TaggingDecorator
  def Bar(self):
    pass

&gt;&gt; Baz.my_attr
'FOO BAR'
</snippet></ROW><ROW><id>3885587</id><snippet>supported_methods = [...]</snippet></ROW><ROW><id>3885683</id><snippet>"±"</snippet></ROW><ROW><id>3885683</id><snippet>col2</snippet></ROW><ROW><id>3885683</id><snippet>u"±"</snippet></ROW><ROW><id>3885683</id><snippet>somestring.index</snippet></ROW><ROW><id>3885683</id><snippet>somestring.find</snippet></ROW><ROW><id>3885683</id><snippet>    if col2.index('±'):
        col2=col2[:col2.index('±')] # this is not indented correctly in the question BTW
        print(col2.encode("utf-8"))
</snippet></ROW><ROW><id>3885683</id><snippet>    if u'±' in col2:
        col2=col2[:col2.index(u'±')]
        print(col2.encode("utf-8"))
</snippet></ROW><ROW><id>3885831</id><snippet>if n &lt; 2 return false;
if n == 2 or n == 3 return true;
if n % 2 == 0 return false;
if n % 3 == 0 return false;
for (i = 6; i &lt; sqrt(n); i += 6) {
  if (n % (i - 1) == 0) return false;
  if (n % (i + 1) == 0) return false;
}
return true;
</snippet></ROW><ROW><id>3885861</id><snippet>setuptools</snippet></ROW><ROW><id>3885861</id><snippet>distutils</snippet></ROW><ROW><id>3885861</id><snippet>find_packages()</snippet></ROW><ROW><id>3885861</id><snippet>packages</snippet></ROW><ROW><id>3885861</id><snippet># setup.py

from setuptools import find_packages, setup

setup(
    #...
    packages=find_packages(exclude='tests'),
    #...
)
</snippet></ROW><ROW><id>3885913</id><snippet>subprocess</snippet></ROW><ROW><id>3885913</id><snippet>multiprocessing</snippet></ROW><ROW><id>3885913</id><snippet>def main():
    ...

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>3885913</id><snippet>import multiprocessing as mp
import foo
proc=mp.Process(target=foo.main)
proc.start()
# Do stuff while foo.main is running
# Wait until foo.main has ended
proc.join()    
# Continue doing more stuff
</snippet></ROW><ROW><id>3886074</id><snippet>def primes(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes &lt; n """
    sieve = [True] * n
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
    return [2] + [i for i in xrange(3,n,2) if sieve[i]]
</snippet></ROW><ROW><id>3886252</id><snippet>getNodeNames()</snippet></ROW><ROW><id>3886252</id><snippet>getNodeNames()</snippet></ROW><ROW><id>3886252</id><snippet>getNodeNames()</snippet></ROW><ROW><id>3886252</id><snippet>vr_world.getChild()</snippet></ROW><ROW><id>3886272</id><snippet>ax = pylab.gca()
ax.yaxis.set_visible(False)
pylab.show()
</snippet></ROW><ROW><id>3886301</id><snippet>imshow</snippet></ROW><ROW><id>3886301</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Generate some data...
x, y = np.meshgrid(np.linspace(-2,2,200), np.linspace(-2,2,200))
x, y = x - x.mean(), y - y.mean()
z = x * np.exp(-x**2 - y**2)

# Plot the grid
plt.imshow(z)
plt.gray()
plt.show()
</snippet></ROW><ROW><id>3886301</id><snippet>import glumpy
import numpy as np

# Generate some data...
x, y = np.meshgrid(np.linspace(-2,2,200), np.linspace(-2,2,200))
x, y = x - x.mean(), y - y.mean()
z = x * np.exp(-x**2 - y**2)

window = glumpy.Window(512, 512)
im = glumpy.Image(z.astype(np.float32), cmap=glumpy.colormap.Grey)

@window.event
def on_draw():
    im.blit(0, 0, window.width, window.height)
window.mainloop()
</snippet></ROW><ROW><id>3886499</id><snippet>import textwrap

row='saint george 1739 1799 violin concerti g 029 039 050 symphonie concertante for two violins g 024 bertrand cervera in 024 039 christophe guiot in 024 029 and thibault vieux violin soloists orchestre les archets de paris'

print(textwrap.fill(row,width=55))
# saint george 1739 1799 violin concerti g 029 039 050
# symphonie concertante for two violins g 024 bertrand
# cervera in 024 039 christophe guiot in 024 029 and
# thibault vieux violin soloists orchestre les archets de
# paris
</snippet></ROW><ROW><id>3886550</id><snippet>textwrap.wrap</snippet></ROW><ROW><id>3886550</id><snippet>textwrap.fill</snippet></ROW><ROW><id>3886672</id><snippet>tst2 = str(tst)
</snippet></ROW><ROW><id>3886672</id><snippet>&gt;&gt;&gt; tst = ([['name', u'bob-21'], ['name', u'john-28']], True)
&gt;&gt;&gt; tst2 = str(tst)
&gt;&gt;&gt; print tst2
([['name', u'bob-21'], ['name', u'john-28']], True)
&gt;&gt;&gt; repr(tst2)
'"([[\'name\', u\'bob-21\'], [\'name\', u\'john-28\']], True)"'
</snippet></ROW><ROW><id>3886822</id><snippet>print self.ui.pwTxt.text()
</snippet></ROW><ROW><id>3887029</id><snippet>Current</snippet></ROW><ROW><id>3887029</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>3887029</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions
$ ls -l
total 4
drwxrwxr-x  8 root  admin  340 Aug 31 02:10 2.6/
drwxrwxr-x  8 root  admin  340 Oct  6 21:56 2.7/
drwxrwxr-x  7 root  admin  306 Oct  6 14:00 3.1/
lrwxr-xr-x  1 root  admin    3 Oct  7 00:33 Current@ -&gt; 2.7
$ sudo rm Current
$ sudo ln -s 3.1 Current
</snippet></ROW><ROW><id>3887029</id><snippet>Current</snippet></ROW><ROW><id>3887029</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>3887029</id><snippet>/System/Library</snippet></ROW><ROW><id>3887029</id><snippet>/System/Library</snippet></ROW><ROW><id>3887029</id><snippet>System Update</snippet></ROW><ROW><id>3887029</id><snippet>Current</snippet></ROW><ROW><id>3887121</id><snippet>def</snippet></ROW><ROW><id>3887121</id><snippet>def Test(a = None):
    if a == None:
        a = {}
    # ... etc.
</snippet></ROW><ROW><id>3887298</id><snippet>class BrowseObjects(webapp.RequestHandler):
    def get(self):
       ids_to_return = get_ids_to_return()

       response_html = '["'
       response_html += ids_to_return.join('","')
       # Edit: since my ids are Key objects (not strings)
       # I had to use the following instead:
       # response_html += '","'.join(map(str, ids_to_return))
       response_html += '"]'

       self.response.out.write(response_html)
</snippet></ROW><ROW><id>3887298</id><snippet>var strings_from_server = new Array();

$.getJSON("/get_ids.html", function(responseData){

    strings_from_server = responseData;

});
</snippet></ROW><ROW><id>3887298</id><snippet>strings_from_server</snippet></ROW><ROW><id>3887337</id><snippet>struct</snippet></ROW><ROW><id>3887337</id><snippet>IND</snippet></ROW><ROW><id>3887337</id><snippet>&gt;&gt;&gt; import struct

&gt;&gt;&gt; struct.pack("&gt;d", float('nan')).encode("hex_codec")
'fff8000000000000'

&gt;&gt;&gt; import scipy
&gt;&gt;&gt; struct.pack("&gt;d", scipy.nan).encode("hex_codec")
'7ff8000000000000'
</snippet></ROW><ROW><id>3887337</id><snippet>float('nan')</snippet></ROW><ROW><id>3887337</id><snippet>scipy.nan</snippet></ROW><ROW><id>3887337</id><snippet>&gt;&gt;&gt; try_signaling_nan = struct.unpack("&gt;d", "\x7f\xf0\x00\x00\x00\x00\x00\x01")[0]
&gt;&gt;&gt; struct.pack("&gt;d", try_signaling_nan).encode("hex_codec")
'7ff8000000000001'
</snippet></ROW><ROW><id>3887337</id><snippet>&gt;&gt;&gt; try_quiet_nan = struct.unpack("&gt;d", "\x7f\xf8\x00\x00\x00\x00\x00\x00")[0]
&gt;&gt;&gt; struct.pack("&gt;d", try_quiet_nan).encode("hex_codec")
'7ff8000000000000'
</snippet></ROW><ROW><id>3887337</id><snippet>struct.unpack()</snippet></ROW><ROW><id>3887343</id><snippet>b.append([row[0], 3847, row[2]])
</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>parse</snippet></ROW><ROW><id>3888032</id><snippet>&gt;&gt;&gt; def do(x):
...     for i in range(x):
...         yield lambda: i
... 
&gt;&gt;&gt; delayed = list(do(3))
&gt;&gt;&gt; for d in delayed:
...     print d()
... 
2
2
2
</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>do</snippet></ROW><ROW><id>3888032</id><snippet>&gt;&gt;&gt; def do(x):
...     for i in range(x):
...         yield lambda i=i: i
... 
&gt;&gt;&gt; delayed = list(do(3))
&gt;&gt;&gt; for d in delayed:
...     print d()
... 
0
1
2
</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>lambda r, x=i: (r, x)</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>i</snippet></ROW><ROW><id>3888032</id><snippet>yield Request(link, callback=lambda r:self.parse2(r, i))
</snippet></ROW><ROW><id>3888032</id><snippet>yield Request(link, callback=lambda r, i=i:self.parse2(r, i))
</snippet></ROW><ROW><id>3888159</id><snippet>test_</snippet></ROW><ROW><id>3888159</id><snippet>&lt;the name of the database in the settings file&gt;</snippet></ROW><ROW><id>3888159</id><snippet>settings</snippet></ROW><ROW><id>3888159</id><snippet>foo</snippet></ROW><ROW><id>3888159</id><snippet>test_foo</snippet></ROW><ROW><id>3888159</id><snippet>test_foo</snippet></ROW><ROW><id>3888159</id><snippet>TEST_NAME</snippet></ROW><ROW><id>3888159</id><snippet>TEST_NAME</snippet></ROW><ROW><id>3888159</id><snippet>DATABASES</snippet></ROW><ROW><id>3888245</id><snippet>from functools import wraps

def register_gw_method(method_or_name):
    """Cool!"""
    def decorator(method):
        if callable(method_or_name):
            method.gw_method = method.__name__
        else:
            method.gw_method = method_or_name
        @wraps(method)
        def wrapper(*args, **kwargs):
            method(*args, **kwargs)
        return wrapper
    if callable(method_or_name):
        return decorator(method_or_name)
    return decorator
</snippet></ROW><ROW><id>3888245</id><snippet>@register_gw_method
def my_function():
    print('hi...')

@register_gw_method('say_hi')
def my_function():
    print('hi...')
</snippet></ROW><ROW><id>3888338</id><snippet>find</snippet></ROW><ROW><id>3888338</id><snippet>food(...)</snippet></ROW><ROW><id>3888338</id><snippet>findall</snippet></ROW><ROW><id>3888338</id><snippet>pyparsing</snippet></ROW><ROW><id>3888653</id><snippet>latin1</snippet></ROW><ROW><id>3888653</id><snippet>iso_8859_1</snippet></ROW><ROW><id>3888653</id><snippet>gb18030</snippet></ROW><ROW><id>3888653</id><snippet>big5</snippet></ROW><ROW><id>3888653</id><snippet>big5_hkscs</snippet></ROW><ROW><id>3888653</id><snippet>chardet</snippet></ROW><ROW><id>3888653</id><snippet>chardet</snippet></ROW><ROW><id>3888653</id><snippet>print repr(line)</snippet></ROW><ROW><id>3888653</id><snippet>\x80</snippet></ROW><ROW><id>3888653</id><snippet>\x80</snippet></ROW><ROW><id>3888653</id><snippet>\x81</snippet></ROW><ROW><id>3888653</id><snippet>\xfe</snippet></ROW><ROW><id>3888653</id><snippet>raw_bytes.decode(encoding, 'replace')</snippet></ROW><ROW><id>3888653</id><snippet>result.count(u'\ufffd')</snippet></ROW><ROW><id>3888653</id><snippet>raw_bytes.decode(encoding, 'ignore')</snippet></ROW><ROW><id>3888653</id><snippet>\\</snippet></ROW><ROW><id>3888653</id><snippet>repr(repr(bytes))</snippet></ROW><ROW><id>3888653</id><snippet>repr(bytes)</snippet></ROW><ROW><id>3888653</id><snippet>bytes</snippet></ROW><ROW><id>3888653</id><snippet>print repr(bytes)</snippet></ROW><ROW><id>3888653</id><snippet>'\xf8\xf8'.decode('gb18030')</snippet></ROW><ROW><id>3888653</id><snippet>'\xf8\xf8'.decode('gb18030')</snippet></ROW><ROW><id>3888653</id><snippet>u'\e28b'</snippet></ROW><ROW><id>3888653</id><snippet>\</snippet></ROW><ROW><id>3888653</id><snippet>"</snippet></ROW><ROW><id>3888653</id><snippet>\x80</snippet></ROW><ROW><id>3888653</id><snippet>C1 C2 C1 C2 cb be 80 80 22 # `\x22` is the quote character
</snippet></ROW><ROW><id>3888653</id><snippet>&gt;&gt;&gt; '\xcb\xbe\x80\x80\x22'.decode('gb18030', 'ignore')
u'\u53f8"'
</snippet></ROW><ROW><id>3888653</id><snippet>&gt;&gt;&gt; import decode_debug as de
&gt;&gt;&gt; def logger(s):
...    sys.stderr.write('*** ' + s + '\n')
...
&gt;&gt;&gt; import sys
&gt;&gt;&gt; de.decode_debug('\xcb\xbe\x80\x80\x22', 'gb18030', 'replace', logger)
*** input[2:5] ('\x80\x80"') doesn't start with a plausible code sequence
*** input[3:5] ('\x80"') doesn't start with a plausible code sequence
u'\u53f8\ufffd\ufffd"'
&gt;&gt;&gt; de.decode_debug('\xcb\xbe\x80\x80\x22', 'gb18030', 'ignore', logger)
*** input[2:5] ('\x80\x80"') doesn't start with a plausible code sequence
*** input[3:5] ('\x80"') doesn't start with a plausible code sequence
u'\u53f8"'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3888653</id><snippet>gb18030</snippet></ROW><ROW><id>3888653</id><snippet>\x80</snippet></ROW><ROW><id>3888653</id><snippet>\x80</snippet></ROW><ROW><id>3888653</id><snippet>&gt;&gt;&gt; '\x80abcd'.decode('gb18030', 'replace')
u'\ufffdbcd' # the 'a' is lost
&gt;&gt;&gt; de.decode_debug('\x80abcd', 'gb18030', 'replace', logger)
*** input[0:4] ('\x80abc') doesn't start with a plausible code sequence
u'\ufffdabcd'
&gt;&gt;&gt; '\x80\x80abcd'.decode('gb18030', 'replace')
u'\ufffdabcd' # the second '\x80' is lost
&gt;&gt;&gt; de.decode_debug('\x80\x80abcd', 'gb18030', 'replace', logger)
*** input[0:4] ('\x80\x80ab') doesn't start with a plausible code sequence
*** input[1:5] ('\x80abc') doesn't start with a plausible code sequence
u'\ufffd\ufffdabcd'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3888763</id><snippet>class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):
    def post(self):
        try:
            upload_files = self.get_uploads('file')
            blob_info = upload_files[0]

            newFile = StoredFiles()
            newFile.nickname = self.request.get('nickname')
            newFile.blobkey = blob_info.key()
            newFile.put()

            self.redirect('/')
        except:
            self.redirect('/upload_failure.html')
</snippet></ROW><ROW><id>3888827</id><snippet>urllib.urlopen()</snippet></ROW><ROW><id>3888827</id><snippet>threading.Timer()</snippet></ROW><ROW><id>3889130</id><snippet>dict</snippet></ROW><ROW><id>3889130</id><snippet>{'3254': '', '3304': '', '3236': '\\Deleted', '3237': '-FLAGS \\Seen +FLAGS', '3234': 'seen \\Seen', '3235': '\\Seen', '3430': '\\Seen', '3431': '', '3252': '\\Seen', '3253':'\\Deleted', '3478': '', '3479': '', '3256': '\\Seen', '3481': '', '3480': '', '3318': '\\Seen', '3434': '\\Seen', '3243': '\\Seen', '3242': '\\Seen', '3241': '-FLAGS \\Seen +FLAGS', '3247': '\\Seen', '3245': '\\Seen', '3244': '\\Seen', '3447': '-FLAGS \\Seen +FLAGS'}
</snippet></ROW><ROW><id>3889130</id><snippet>dict</snippet></ROW><ROW><id>3889130</id><snippet>items = ['1 (UID 3234 FLAGS (seen \\Seen))', '2 (UID 3235 FLAGS (\\Seen))', '3 (UID 3236 FLAGS (\\Deleted))', '4 (UID 3237 FLAGS (-FLAGS \\Seen +FLAGS))', '5 (UID 3241 FLAGS (-FLAGS \\Seen +FLAGS))', '6 (UID 3242 FLAGS (\\Seen))',  '7 (UID 3243 FLAGS (\\Seen))', '8 (UID 3244 FLAGS (\\Seen))',  '9 (UID 3245 FLAGS (\\Seen))', '10 (UID 3247 FLAGS (\\Seen))', '11 (UID 3252 FLAGS (\\Seen))', '12 (UID 3253 FLAGS (\\Deleted))', '13 (UID 3254 FLAGS ())', '14 (UID 3256 FLAGS (\\Seen))', '15 (UID 3304 FLAGS ())', '16 (UID 3318 FLAGS (\\Seen))', '17 (UID 3430 FLAGS (\\Seen))', '18 (UID 3431 FLAGS ())', '19 (UID 3434 FLAGS (\\Seen))', '20 (UID 3447 FLAGS (-FLAGS \\Seen +FLAGS))', '21 (UID 3478 FLAGS ())', '22 (UID 3479 FLAGS ())', '23 (UID 3480 FLAGS ())', '24 (UID 3481 FLAGS ())']

import re
pattern = re.compile(r"\d+ \(UID (\d+) FLAGS \(([^)]*)\)\)")
values = dict(pattern.match(item).groups() for item in items)
</snippet></ROW><ROW><id>3889130</id><snippet>values</snippet></ROW><ROW><id>3889130</id><snippet>print "All UIDs:",values.keys()
print "Seen UIDs:",[uid for uid,flags in values.iteritems() if r"\Seen" in flags]
print "Deleted UIDs:",[uid for uid,flags in values.iteritems() if r"\Deleted" in flags]
</snippet></ROW><ROW><id>3889151</id><snippet>brew</snippet></ROW><ROW><id>3889151</id><snippet>$ brew install igraph
</snippet></ROW><ROW><id>3889790</id><snippet>request.META</snippet></ROW><ROW><id>3889790</id><snippet>request</snippet></ROW><ROW><id>3889790</id><snippet>CONTENT_LENGTH</snippet></ROW><ROW><id>3889790</id><snippet>CONTENT_TYPE</snippet></ROW><ROW><id>3889790</id><snippet>HTTP</snippet></ROW><ROW><id>3889790</id><snippet>META</snippet></ROW><ROW><id>3889790</id><snippet>HTTP_</snippet></ROW><ROW><id>3889790</id><snippet>HTTP</snippet></ROW><ROW><id>3889790</id><snippet>HTTP_</snippet></ROW><ROW><id>3889790</id><snippet>import re
regex = re.compile('^HTTP_')
dict((regex.sub('', header), value) for (header, value) 
       in request.META.items() if header.startswith('HTTP_'))
</snippet></ROW><ROW><id>3889878</id><snippet>pygmentize</snippet></ROW><ROW><id>3890302</id><snippet>mkstemp</snippet></ROW><ROW><id>3890302</id><snippet>c:\docume~1\k0811260\locals~1\temp</snippet></ROW><ROW><id>3890302</id><snippet>echo %%tmp%%
</snippet></ROW><ROW><id>3890609</id><snippet>from django.core.servers import basehttp

del basehttp._hop_headers['proxy-authenticate']
del basehttp._hop_headers['proxy-authorization']
</snippet></ROW><ROW><id>3890696</id><snippet>cursor = connection.cursor()
query = "SELECT * from table"
cursor.execute(query)
print cursor.rowcount
</snippet></ROW><ROW><id>3890696</id><snippet>rowcount</snippet></ROW><ROW><id>3890696</id><snippet>cursor</snippet></ROW><ROW><id>3890696</id><snippet>rowcount</snippet></ROW><ROW><id>3890696</id><snippet>num_rows()</snippet></ROW><ROW><id>3890696</id><snippet>MySQLdb</snippet></ROW><ROW><id>3890696</id><snippet>_mysql</snippet></ROW><ROW><id>3890696</id><snippet>result</snippet></ROW><ROW><id>3890696</id><snippet>num_rows</snippet></ROW><ROW><id>3890696</id><snippet>_mysql</snippet></ROW><ROW><id>3890892</id><snippet># (r'^admin/doc/', include('django.contrib.admindocs.urls')),

# Uncomment the next line to enable the admin:
# (r'^admin/', include(admin.site.urls)),
</snippet></ROW><ROW><id>3891147</id><snippet>book.img = book._meta.get_field('img').default
</snippet></ROW><ROW><id>3891147</id><snippet>None</snippet></ROW><ROW><id>3891147</id><snippet>null=True</snippet></ROW><ROW><id>3891147</id><snippet>blank=True</snippet></ROW><ROW><id>3891147</id><snippet>pages</snippet></ROW><ROW><id>3891147</id><snippet>default=0</snippet></ROW><ROW><id>3891224</id><snippet>numpy.random.shuffle</snippet></ROW><ROW><id>3891224</id><snippet>numpy.random.permutation</snippet></ROW><ROW><id>3891224</id><snippet>your_array = &lt;some numpy array&gt;
index_array = numpy.arange(your_array.size)
numpy.random.shuffle(index_array)

print your_array[index_array[:10]]
</snippet></ROW><ROW><id>3891340</id><snippet>{{invoice.work_orders.all}</snippet></ROW><ROW><id>3891340</id><snippet>Work_Order</snippet></ROW><ROW><id>3891340</id><snippet>{% for invoice in invoice.work_orders.all %}
  {{invoice}}&lt;br /&gt;
{% endfor %}
</snippet></ROW><ROW><id>3891376</id><snippet>&gt;&gt;&gt; with open('test.txt') as f_in:
...     column3 = (line.split(';')[2:3] for line in f_in)
...     column3 = [item[0] for item in column3 if item]
... 
&gt;&gt;&gt; column3
[' Green', ' Orange', ' White', ' Green', ' White', ' Orange']
</snippet></ROW><ROW><id>3891852</id><snippet>raise</snippet></ROW><ROW><id>3891852</id><snippet>warnings</snippet></ROW><ROW><id>3892301</id><snippet>catch_warnings</snippet></ROW><ROW><id>3892301</id><snippet>import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings(record=True) as w:
    # Cause all warnings to always be triggered.
    warnings.simplefilter("always")
    # Trigger a warning.
    fxn()
    # Verify some things
    assert len(w) == 1
    assert issubclass(w[-1].category, DeprecationWarning)
    assert "deprecated" in str(w[-1].message)
</snippet></ROW><ROW><id>3892595</id><snippet>import subprocess
proc=subprocess.Popen(['sort'],stdin=subprocess.PIPE,stdout=subprocess.PIPE)
proc.stdin.write('foo\n')
proc.stdin.write('bar\n')
out,err=proc.communicate()
print(out)
</snippet></ROW><ROW><id>3892669</id><snippet>import wx

def show_splash():
    # create, show and return the splash screen
    bitmap = wx.Bitmap('images/splash.png')
    splash = wx.SplashScreen(bitmap, wx.SPLASH_CENTRE_ON_SCREEN|wx.SPLASH_NO_TIMEOUT, 0, None, -1)
    splash.Show()
    return splash

def main():
    app = wx.PySimpleApp()
    splash = show_splash()

    # do processing/initialization here and create main window
    frame = MyFrame(...)
    frame.Show()

    splash.Destroy()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3892978</id><snippet>if end is None:
    end = len(items)
</snippet></ROW><ROW><id>3892978</id><snippet>&gt;&gt;&gt; a=[5,4,3,2,1]
&gt;&gt;&gt; def eleMax(items, start=0, end=None):
...     return max(items[start:end])
...
&gt;&gt;&gt; eleMax(a,2)   # a[2:] == [3,2,1]
3
</snippet></ROW><ROW><id>3893089</id><snippet>SQL_NO_CACHE</snippet></ROW><ROW><id>3893089</id><snippet>SELECT SQL_NO_CACHE * FROM TABLE
</snippet></ROW><ROW><id>3893089</id><snippet>RESET QUERY CACHE</snippet></ROW><ROW><id>3893089</id><snippet>FLUSH QUERY CACHE
</snippet></ROW><ROW><id>3893089</id><snippet>WHERE</snippet></ROW><ROW><id>3893089</id><snippet>WHERE</snippet></ROW><ROW><id>3893093</id><snippet>sys.modules</snippet></ROW><ROW><id>3893093</id><snippet>Py_Initialize</snippet></ROW><ROW><id>3893093</id><snippet>Py_Finalize</snippet></ROW><ROW><id>3893171</id><snippet>bfid</snippet></ROW><ROW><id>3893171</id><snippet>int</snippet></ROW><ROW><id>3893171</id><snippet>bfid</snippet></ROW><ROW><id>3893171</id><snippet>None</snippet></ROW><ROW><id>3893171</id><snippet>None</snippet></ROW><ROW><id>3893244</id><snippet>seq = 1
a_dict = {}
moves = []
while seq &lt; 4:
 a_dict['key' + str(seq)] = 'value' + str(seq)
 moves.append(copy.deepcopy(a_dict))
 seq = seq + 1

print moves
</snippet></ROW><ROW><id>3893244</id><snippet>rows</snippet></ROW><ROW><id>3893244</id><snippet>def __getstate__(self): 
    return self.rows

def __setstate__(self, rows): 
    self.rows = rows 
</snippet></ROW><ROW><id>3893328</id><snippet>&gt;&gt;&gt; dir(__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
</snippet></ROW><ROW><id>3893328</id><snippet>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__', 'atexit']
</snippet></ROW><ROW><id>3893338</id><snippet>data</snippet></ROW><ROW><id>3893338</id><snippet>data = urllib.urlencode(data)</snippet></ROW><ROW><id>3893518</id><snippet>number</snippet></ROW><ROW><id>3893518</id><snippet>numberedBox = dict((b.number, b) for b in Boxes)
</snippet></ROW><ROW><id>3893518</id><snippet>numberedBox[40]
</snippet></ROW><ROW><id>3893518</id><snippet>numberedBox</snippet></ROW><ROW><id>3893704</id><snippet>import pexpect
import sys
game = pexpect.spawn('/usr/games/gnuchess')
# Echo output to stdout
game.logfile = sys.stdout
game.expect('White')
game.sendline('a2a4')
game.expect('White')
game.sendline('b2b3')
game.expect('White')
game.sendline('quit')
</snippet></ROW><ROW><id>3893791</id><snippet>order_partner_id</snippet></ROW><ROW><id>3893791</id><snippet>sale_order_line</snippet></ROW><ROW><id>3893791</id><snippet>addons/sale/sale.py</snippet></ROW><ROW><id>3893926</id><snippet>from mongoengine import *

class User(Document):
    name = StringField()
    page = ReferenceField('Page')

class Page(Document):
    content = StringField()
    user = ReferenceField(User)
</snippet></ROW><ROW><id>3893931</id><snippet>with open('largeFile', 'r') as inF:
    for line in inF:
        if 'myString' in line:
            # do_something
</snippet></ROW><ROW><id>3894047</id><snippet>from dateutil.parser import parse

parse('Tue, 26 May 2009 19:58:20 -0500').strftime('%s')

# returns '1243364300'
</snippet></ROW><ROW><id>3894097</id><snippet>json</snippet></ROW><ROW><id>3894097</id><snippet>simplejson</snippet></ROW><ROW><id>3894097</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
&gt;&gt;&gt; json.loads('["foo", {"bar": ["baz", null, 1.0, 2]}]')
[u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
</snippet></ROW><ROW><id>3894289</id><snippet>from collections import defaultdict

def countWords(target, source, env):
    words = defaultdict(int)
    if (len(target) == 1 and len(source) == 1):
        with open(str(source[0]), 'r') as fin:
            for line in fin:
                for word in line.split():
                    words[word] += 1

        with open(str(target[0]), 'w') as fout:
            for word in sorted(words, key=words.__getitem__, reverse=True):
                fout.write('%s\n' % word)
    return None
</snippet></ROW><ROW><id>3894414</id><snippet>functools.partial</snippet></ROW><ROW><id>3894414</id><snippet>import functools
...

# note that these are the 'new style' slot connections (not necessarily needed)
self.menu_entry_x.triggered.connect(functools.partial(myfunc, x))
self.menu_entry_y.triggered.connect(functools.partial(myfunc, y))
</snippet></ROW><ROW><id>3894439</id><snippet>import sys, termios, atexit
from select import select

# save the terminal settings
fd = sys.stdin.fileno()
new_term = termios.tcgetattr(fd)
old_term = termios.tcgetattr(fd)

# new terminal setting unbuffered
new_term[3] = (new_term[3] &amp; ~termios.ICANON &amp; ~termios.ECHO)

# switch to normal terminal
def set_normal_term():
    termios.tcsetattr(fd, termios.TCSAFLUSH, old_term)

# switch to unbuffered terminal
def set_curses_term():
    termios.tcsetattr(fd, termios.TCSAFLUSH, new_term)

def putch(ch):
    sys.stdout.write(ch)

def getch():
    return sys.stdin.read(1)

def getche():
    ch = getch()
    putch(ch)
    return ch

def kbhit():
    dr,dw,de = select([sys.stdin], [], [], 0)
    return dr &lt;&gt; []
</snippet></ROW><ROW><id>3894439</id><snippet>atexit.register(set_normal_term)
set_curses_term()

while True:
    print "myline"
    if kbhit():
        print "paused..."
        ch = getch()
        while True
            if kbhit():
                print "unpaused..."
                ch = getch()
                break
</snippet></ROW><ROW><id>3894487</id><snippet>
from datetime import datetime
datetime.strptime('2010-10-08 14:26:01.220000'[:-7], 
                '%Y-%m-%d %H:%M:%S').strftime('%b %d %Y')
</snippet></ROW><ROW><id>3894666</id><snippet>tmpQuery.count()
</snippet></ROW><ROW><id>3894778</id><snippet>&lt;tag&gt;&#66352;&#66365;&#66355;&#66352;&#66367;&#66370;&#66352;&lt;/tag&gt;
</snippet></ROW><ROW><id>3894778</id><snippet>&lt;tag&gt;&lt;/tag&gt;
</snippet></ROW><ROW><id>3894778</id><snippet>&gt;&gt;&gt; def lenient_deccharref(m):
...    return unichr(int(m.group(1)))
...
&gt;&gt;&gt; tag= '&lt;tag&gt;&#66352;&#66365;&#66355;&#66352;&#66367;&#66370;&#66352;&lt;/tag&gt;'
&gt;&gt;&gt; re.sub('&amp;#(\d+);', lenient_deccharref, tag).encode('utf-8')
'&lt;tag&gt;\xf0\x90\x8c\xb0\xf0\x90\x8c\xbd\xf0\x90\x8c\xb3\xf0\x90\x8c\xb0\xf0\x90\x8c\xbf\xf0\x90\x8d\x82\xf0\x90\x8c\xb0&lt;/tag&gt;'
</snippet></ROW><ROW><id>3894778</id><snippet/></ROW><ROW><id>3894778</id><snippet>utf-8</snippet></ROW><ROW><id>3894778</id><snippet>&gt;&gt;&gt; _.decode('utf-8')
u'&lt;tag&gt;\U00010330\U0001033d\U00010333\U00010330\U0001033f\U00010342\U00010330&lt;/tag&gt;'
</snippet></ROW><ROW><id>3894929</id><snippet>&gt;&gt;&gt; import gtk
&gt;&gt;&gt; print "\n".join(name for name in dir(gtk) if name.startswith("STOCK_"))
</snippet></ROW><ROW><id>3894929</id><snippet>STOCK_ABOUT
STOCK_ADD
STOCK_APPLY
STOCK_BOLD
STOCK_CANCEL
STOCK_CAPS_LOCK_WARNING
STOCK_CDROM
STOCK_CLEAR
STOCK_CLOSE
STOCK_COLOR_PICKER
STOCK_CONNECT
STOCK_CONVERT
STOCK_COPY
STOCK_CUT
STOCK_DELETE
STOCK_DIALOG_AUTHENTICATION
STOCK_DIALOG_ERROR
STOCK_DIALOG_INFO
STOCK_DIALOG_QUESTION
STOCK_DIALOG_WARNING
STOCK_DIRECTORY
STOCK_DISCARD
STOCK_DISCONNECT
STOCK_DND
STOCK_DND_MULTIPLE
STOCK_EDIT
STOCK_EXECUTE
STOCK_FILE
STOCK_FIND
STOCK_FIND_AND_REPLACE
STOCK_FLOPPY
STOCK_FULLSCREEN
STOCK_GOTO_BOTTOM
STOCK_GOTO_FIRST
STOCK_GOTO_LAST
STOCK_GOTO_TOP
STOCK_GO_BACK
STOCK_GO_DOWN
STOCK_GO_FORWARD
STOCK_GO_UP
STOCK_HARDDISK
STOCK_HELP
STOCK_HOME
STOCK_INDENT
STOCK_INDEX
STOCK_INFO
STOCK_ITALIC
STOCK_JUMP_TO
STOCK_JUSTIFY_CENTER
STOCK_JUSTIFY_FILL
STOCK_JUSTIFY_LEFT
STOCK_JUSTIFY_RIGHT
STOCK_LEAVE_FULLSCREEN
STOCK_MEDIA_FORWARD
STOCK_MEDIA_NEXT
STOCK_MEDIA_PAUSE
STOCK_MEDIA_PLAY
STOCK_MEDIA_PREVIOUS
STOCK_MEDIA_RECORD
STOCK_MEDIA_REWIND
STOCK_MEDIA_STOP
STOCK_MISSING_IMAGE
STOCK_NETWORK
STOCK_NEW
STOCK_NO
STOCK_OK
STOCK_OPEN
STOCK_ORIENTATION_LANDSCAPE
STOCK_ORIENTATION_PORTRAIT
STOCK_ORIENTATION_REVERSE_LANDSCAPE
STOCK_ORIENTATION_REVERSE_PORTRAIT
STOCK_PAGE_SETUP
STOCK_PASTE
STOCK_PREFERENCES
STOCK_PRINT
STOCK_PRINT_ERROR
STOCK_PRINT_PAUSED
STOCK_PRINT_PREVIEW
STOCK_PRINT_REPORT
STOCK_PRINT_WARNING
STOCK_PROPERTIES
STOCK_QUIT
STOCK_REDO
STOCK_REFRESH
STOCK_REMOVE
STOCK_REVERT_TO_SAVED
STOCK_SAVE
STOCK_SAVE_AS
STOCK_SELECT_ALL
STOCK_SELECT_COLOR
STOCK_SELECT_FONT
STOCK_SORT_ASCENDING
STOCK_SORT_DESCENDING
STOCK_SPELL_CHECK
STOCK_STOP
STOCK_STRIKETHROUGH
STOCK_UNDELETE
STOCK_UNDERLINE
STOCK_UNDO
STOCK_UNINDENT
STOCK_YES
STOCK_ZOOM_100
STOCK_ZOOM_FIT
STOCK_ZOOM_IN
STOCK_ZOOM_OUT
</snippet></ROW><ROW><id>3895338</id><snippet>a = array.array('c', open(filename, 'rb').read())
</snippet></ROW><ROW><id>3895338</id><snippet>for i in xrange(len(a)):
   if ''.join(a[i:i+len(substring)]) == substring:
      print 'Found @ %d!' % i
</snippet></ROW><ROW><id>3895338</id><snippet>pos = 0
for line in open(filename):
    for i in xrange(len(line)):
        if line[i:i+len(substring)] == substring:
           print 'Found @ %d!' % (pos + i)
    pos += len(line) + 2 # 1 if on Linux
</snippet></ROW><ROW><id>3895404</id><snippet>_entities = []
class entity(object):
    @staticmethod
    def get_entity_registry(): 
         return _entities
</snippet></ROW><ROW><id>3895404</id><snippet>get_object_by_id</snippet></ROW><ROW><id>3895404</id><snippet>register_object</snippet></ROW><ROW><id>3895510</id><snippet>import some_module
</snippet></ROW><ROW><id>3895510</id><snippet>some_module = import_module("some_module")
</snippet></ROW><ROW><id>3895510</id><snippet>def import_module(modname):
    if modname in sys.modules:
        module = sys.modules[modname]
    else:
        filename = find_file_for_module(modname)
        python_code = open(filename).read()
        module = create_module_from_code(python_code)
        sys.modules[modname] = module
    return module
</snippet></ROW><ROW><id>3895580</id><snippet>sa = ('fe80::21b:78ff:fe30:7c6%en0', 2000, 0, 0)  
</snippet></ROW><ROW><id>3895658</id><snippet>len(result)</snippet></ROW><ROW><id>3895727</id><snippet>list_keys = [ListUser.list.get_value_for_datastore(list_user)
              for list_user in list_users]
lists = db.get(list_keys)
</snippet></ROW><ROW><id>3895739</id><snippet>all(variable &gt; element for element in list)
</snippet></ROW><ROW><id>3895739</id><snippet>i</snippet></ROW><ROW><id>3895739</id><snippet>all(variable &gt; sublist[i] for sublist in list)
</snippet></ROW><ROW><id>3895739</id><snippet>... for ... in list</snippet></ROW><ROW><id>3895739</id><snippet>all</snippet></ROW><ROW><id>3895739</id><snippet>def all_are_greater_than_value(list, value):
    for element in list:
        if element &lt;= value:
            return False
    return True
</snippet></ROW><ROW><id>3895739</id><snippet>all_are_greater_than_value(list, variable)</snippet></ROW><ROW><id>3895739</id><snippet>all_greater = True
for element in list:
    if element &lt;= value:
        all_greater = False
        break
</snippet></ROW><ROW><id>3895901</id><snippet>import re
re.sub('g+', 'g', 'omgggg')
re.sub('l+', 'l', 'lollll')
</snippet></ROW><ROW><id>3895901</id><snippet>difflib</snippet></ROW><ROW><id>3895901</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>3895901</id><snippet>import difflib as dl
x   = dl.SequenceMatcher(lambda x : x == ' ', "omg", "omgggg")
y   = dl.SequenceMatcher(lambda x : x == ' ', "omgggg","omg")
avg = (x.ratio()+y.ratio())/2.0
if avg&gt;= 0.6: 
    print 'Match!'
else:
    print 'Sorry!'
</snippet></ROW><ROW><id>3895999</id><snippet>python -u script.py
</snippet></ROW><ROW><id>3895999</id><snippet>#!/usr/bin/env python -u
</snippet></ROW><ROW><id>3896280</id><snippet>session.expunge(obj)</snippet></ROW><ROW><id>3896299</id><snippet>csv</snippet></ROW><ROW><id>3896299</id><snippet>csv</snippet></ROW><ROW><id>3896299</id><snippet>spamWriter = csv.writer(open('eggs.csv', 'w'), delimiter=' ', quotechar='|')
</snippet></ROW><ROW><id>3896299</id><snippet>f = open('eggs.csv', 'w')
spamWriter = csv.writer(f, delimiter=' ', quotechar='|')
# the rest of your code
f.close()
</snippet></ROW><ROW><id>3896677</id><snippet>def extract_mime_part_matching(stream, mimetype):
"""Return the first element in a multipart MIME message on stream
matching mimetype."""

msg = mimetools.Message(stream)
msgtype = msg.gettype()
params = msg.getplist()

data = StringIO.StringIO()
if msgtype[:10] == "multipart/":

    file = multifile.MultiFile(stream)
    file.push(msg.getparam("boundary"))
    while file.next():
        submsg = mimetools.Message(file)
        try:
            data = StringIO.StringIO()
            mimetools.decode(file, data, submsg.getencoding())
        except ValueError:
            continue
        if submsg.gettype() == mimetype:
            break
    file.pop()
return data.getvalue()
</snippet></ROW><ROW><id>3896844</id><snippet>conn.execute(Product.insert(), [dict(name=name) for name in names])
</snippet></ROW><ROW><id>3896857</id><snippet>&gt;&gt;&gt; s="1254jf4h"
&gt;&gt;&gt; num=[]
&gt;&gt;&gt; alpah=[]
&gt;&gt;&gt; for n,i in enumerate(s):
...   if i.isdigit():
...      num.append(i)
...   else:
...      alpah.append(i)
...
&gt;&gt;&gt; alpah
['j', 'f', 'h']
&gt;&gt;&gt; num
['1', '2', '5', '4', '4']
</snippet></ROW><ROW><id>3897106</id><snippet>class AvgDict(dict):
    def __init__(self):
        self._total = 0.0
        self._count = 0

    def __setitem__(self, k, v):
        if k in self:
            self._total -= self[k]
            self._count -= 1
        dict.__setitem__(self, k, v)
        self._total += v
        self._count += 1

    def __delitem__(self, k):
        v = self[k]
        dict.__delitem__(self, k)
        self._total -= v
        self._count -= 1

    def average(self):
        if self._count:
            return self._total/self._count

a = AvgDict()
assert a.average() is None
a[1] = 1
assert a.average() == 1
a[2] = 10
assert a.average() == 5.5
assert a[2] == 10
a[1] = 5
assert a.average() == 7.5
del a[1]
assert a.average() == 10
</snippet></ROW><ROW><id>3897327</id><snippet>out, err = subprocess.Popen(
    ["pdftotext", '-layout', "-", "-"], stdin = tf, stdout=subprocess.PIPE ).communicate()
</snippet></ROW><ROW><id>3897327</id><snippet>-</snippet></ROW><ROW><id>3897327</id><snippet>pdftotext</snippet></ROW><ROW><id>3897327</id><snippet>PDF-file</snippet></ROW><ROW><id>3897327</id><snippet>-</snippet></ROW><ROW><id>3897327</id><snippet>pdftotext</snippet></ROW><ROW><id>3897327</id><snippet>text-file</snippet></ROW><ROW><id>3897516</id><snippet>if not any(d['main_color'] == 'red' for d in a):
    # does not exist
</snippet></ROW><ROW><id>3897516</id><snippet>True</snippet></ROW><ROW><id>3897516</id><snippet>False</snippet></ROW><ROW><id>3897516</id><snippet>KeyError</snippet></ROW><ROW><id>3897516</id><snippet>get</snippet></ROW><ROW><id>3897516</id><snippet>if not any(d.get('main_color', None) == 'red' for d in a):
    # does not exist
</snippet></ROW><ROW><id>3897520</id><snippet>engToEstDict = {}

# The with statement automatically closes the file afterwards. Furthermore, one shouldn't
# overwrite builtin names like "file", "dict" and so on (even though it's possible).
with open("dictionary.txt", "r") as f:
    for line in f:
        if not line:
            break

        # Map the Estonian to the English word in the dictionary-typed variable
        pair = lines.split("\t")
        engToEstDict[pair[0]] = pair[1]

# Then, lookup of Estonian words is simple
print engToEstDict["hello"] # should probably print "tere", says Google Translator
</snippet></ROW><ROW><id>3897520</id><snippet>estToEngDict[pair[1]] = pair[0]</snippet></ROW><ROW><id>3897665</id><snippet>os.listdir</snippet></ROW><ROW><id>3897665</id><snippet>os.path.join</snippet></ROW><ROW><id>3897665</id><snippet>os.rename</snippet></ROW><ROW><id>3897665</id><snippet>glob.glob</snippet></ROW><ROW><id>3897916</id><snippet>
class ServerThread(threading.Thread):

    def __init__(self, port):
        threading.Thread.__init__(self)

    def run(self):
        srv = make_server(...)
        srv.serve_forever()

if '__main__'==__name__:
    ServerThread().start()
    webbrowser.open_new_tab(...)
</snippet></ROW><ROW><id>3897953</id><snippet>(bottomleft, bottomright,topleft, topright) = sorted(vertices)
</snippet></ROW><ROW><id>3897953</id><snippet>corners.sort()
(bottomleft, bottomright,topleft, topright) = corners
# the unpacking here is redundant but demonstrative 
</snippet></ROW><ROW><id>3897953</id><snippet>&gt;&gt;&gt; a = [[499, 3], [502, 3], [502, 353], [499, 353]]
&gt;&gt;&gt; sorted(a)
[[499, 3], [499, 353], [502, 3], [502, 353]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3897974</id><snippet>term = "message" #term we want to search for
input = raw_input() #read input from user

words = input.split() #split the sentence into individual words

if term in words: #see if one of the words in the sentence is the word we want
    do_stuff()
</snippet></ROW><ROW><id>3897974</id><snippet>raw_input</snippet></ROW><ROW><id>3897974</id><snippet>lower()</snippet></ROW><ROW><id>3897974</id><snippet>str</snippet></ROW><ROW><id>3898017</id><snippet>if talk.upper() == "HOW ARE YOU":
    perform_action()
</snippet></ROW><ROW><id>3898017</id><snippet>if "HOW ARE YOU" in talk.upper():
    perform_action()
</snippet></ROW><ROW><id>3898073</id><snippet>a = [[501, 4], [501, 4], [501, 4], [501, 4]]
b = [c[0] for c in a]
</snippet></ROW><ROW><id>3898093</id><snippet>setup.cfg</snippet></ROW><ROW><id>3898379</id><snippet>[formatters]
keys=simple

[handlers]
keys=console

[loggers]
keys=root,south

[formatter_simple]
format=%(asctime)s %(levelname)7s %(message)s
datefmt=%Y-%m-%d %H:%M:%S

[handler_console]
class=StreamHandler
args=[]
formatter=simple

[logger_root]
level=INFO
qualname=root
handlers=console

[logger_south]
level=INFO
qualname=south
handlers=console
</snippet></ROW><ROW><id>3898379</id><snippet># south is setting logging on import-time; import it before setting our logger
# so it is not overwriting our settings
try:
    import south.logger
except ImportError:
    pass

import logging.config
if LOGGING_CONFIG_FILE:
    logging.config.fileConfig(LOGGING_CONFIG_FILE)
</snippet></ROW><ROW><id>3898406</id><snippet>start_time - now + (one day)</snippet></ROW><ROW><id>3898565</id><snippet>HTTPS</snippet></ROW><ROW><id>3898565</id><snippet>JSON</snippet></ROW><ROW><id>3898565</id><snippet>XML-RPC</snippet></ROW><ROW><id>3898565</id><snippet>SSL</snippet></ROW><ROW><id>3898565</id><snippet>TSL</snippet></ROW><ROW><id>3898565</id><snippet>https://www.example.com/db?q="SELECT * FROM docs"
</snippet></ROW><ROW><id>3898889</id><snippet>split()</snippet></ROW><ROW><id>3898889</id><snippet>list()</snippet></ROW><ROW><id>3898889</id><snippet>&gt;&gt;&gt; a = "hello"
&gt;&gt;&gt; list(a)
['h', 'e', 'l', 'l', 'o']
</snippet></ROW><ROW><id>3898889</id><snippet>def foo(bar, baz=0, quux=0):
    print "bar=", bar
    print "baz=", baz
    print "quux=", quux
</snippet></ROW><ROW><id>3898889</id><snippet>foo(1, 2, 3)
foo(1, baz=2, quux=3)
foo(1, quux=3, baz=2)
</snippet></ROW><ROW><id>3898993</id><snippet>ncalls</snippet></ROW><ROW><id>3898993</id><snippet>tottime</snippet></ROW><ROW><id>3898993</id><snippet>cumtime</snippet></ROW><ROW><id>3898993</id><snippet>cumtime</snippet></ROW><ROW><id>3898993</id><snippet>tottime</snippet></ROW><ROW><id>3898993</id><snippet>tottime</snippet></ROW><ROW><id>3898993</id><snippet>cumtime</snippet></ROW><ROW><id>3898993</id><snippet>name</snippet></ROW><ROW><id>3898993</id><snippet>bgchar</snippet></ROW><ROW><id>3898993</id><snippet>string</snippet></ROW><ROW><id>3898993</id><snippet>import string</snippet></ROW><ROW><id>3898993</id><snippet>string.find(elements[0], 'p')</snippet></ROW><ROW><id>3898993</id><snippet>str</snippet></ROW><ROW><id>3898993</id><snippet>string</snippet></ROW><ROW><id>3898993</id><snippet>str</snippet></ROW><ROW><id>3898993</id><snippet>elements[0].find('p') == 0</snippet></ROW><ROW><id>3898993</id><snippet>elements[0].startswith('p')</snippet></ROW><ROW><id>3898993</id><snippet>== 0</snippet></ROW><ROW><id>3898993</id><snippet>== -1</snippet></ROW><ROW><id>3898993</id><snippet>tottime</snippet></ROW><ROW><id>3898993</id><snippet>assert(8.5 &gt; 2.6)</snippet></ROW><ROW><id>3898993</id><snippet>elements = line.split('\t')</snippet></ROW><ROW><id>3898993</id><snippet>elements = line.split('\t', 1)</snippet></ROW><ROW><id>3898993</id><snippet>'\t'.join(elements[1:])</snippet></ROW><ROW><id>3898993</id><snippet>elements[1]</snippet></ROW><ROW><id>3898993</id><snippet>long</snippet></ROW><ROW><id>3898993</id><snippet>long</snippet></ROW><ROW><id>3898993</id><snippet>long</snippet></ROW><ROW><id>3898993</id><snippet>int</snippet></ROW><ROW><id>3898993</id><snippet>long</snippet></ROW><ROW><id>3898993</id><snippet>int</snippet></ROW><ROW><id>3898993</id><snippet>long(x)</snippet></ROW><ROW><id>3898993</id><snippet>x</snippet></ROW><ROW><id>3898993</id><snippet>long</snippet></ROW><ROW><id>3898993</id><snippet>def parseJarchLine(chromosome, line):
    global pLength
    global lastEnd
    elements = line.split('\t')
    if len(elements) &gt; 1:
        if lastEnd != "":
            start = long(lastEnd) + long(elements[0])
            # [1] start = lastEnd + long(elements[0])
            # [2] start = lastEnd + int(elements[0])
            lastEnd = long(start + pLength)
            # [1] lastEnd = start + pLength
            sys.stdout.write("%s\t%ld\t%ld\t%s\n" % (chromosome, start, lastEnd, '\t'.join(elements[1:])))
        else:
            lastEnd = long(elements[0]) + long(pLength)
            # [1] lastEnd = long(elements[0]) + pLength
            # [2] lastEnd = int(elements[0]) + pLength
            sys.stdout.write("%s\t%ld\t%ld\t%s\n" % (chromosome, long(elements[0]), lastEnd, '\t'.join(elements[1:])))
    else:
        if elements[0].startswith('p'):
            pLength = long(elements[0][1:])
            # [2] pLength = int(elements[0][1:])
        else:
            start = long(long(lastEnd) + long(elements[0]))
            # [1] start = lastEnd + long(elements[0])
            # [2] start = lastEnd + int(elements[0])
            lastEnd = long(start + pLength)
            # [1] lastEnd = start + pLength
            sys.stdout.write("%s\t%ld\t%ld\n" % (chromosome, start, lastEnd))               
    return
</snippet></ROW><ROW><id>3898993</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>3898993</id><snippet>sys.stdout.write("%s\t%ld\t%ld\t%s\n" % (chromosome, start, lastEnd, '\t'.join(elements[1:])))
</snippet></ROW><ROW><id>3898993</id><snippet>payload = "%s\t%ld\t%ld\t%s\n" % (chromosome, start, lastEnd, '\t'.join(elements[1:]))
sys.stdout.write(payload)
</snippet></ROW><ROW><id>3898993</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>3898993</id><snippet>lastEnd</snippet></ROW><ROW><id>3898993</id><snippet>""</snippet></ROW><ROW><id>3898993</id><snippet>def parseJarchLine(chromosome, line):
    global pLength
    global lastEnd
    elements = line.split('\t', 1)
    if elements[0][0] == 'p':
        pLength = int(elements[0][1:])
        return
    start = lastEnd + int(elements[0])
    lastEnd = start + pLength
    sys.stdout.write("%s\t%ld\t%ld" % (chromosome, start, lastEnd))
    if elements[1:]:
        sys.stdout.write(elements[1])
    sys.stdout.write(\n)
</snippet></ROW><ROW><id>3898993</id><snippet>lastEnd</snippet></ROW><ROW><id>3898993</id><snippet>pLength</snippet></ROW><ROW><id>3898993</id><snippet>extractData</snippet></ROW><ROW><id>3898993</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>3898993</id><snippet>write = sys.stdout.write</snippet></ROW><ROW><id>3898993</id><snippet>extractData</snippet></ROW><ROW><id>3899047</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>3899047</id><snippet>app2</snippet></ROW><ROW><id>3899047</id><snippet>def main():
   run_wsgi_app(app2)
</snippet></ROW><ROW><id>3899154</id><snippet>def sq(n):
    """
    Returns the square of n. 
    """
    return n * n
</snippet></ROW><ROW><id>3899154</id><snippet>def sq(n):
    """Returns the square of n."""
    return n * n
</snippet></ROW><ROW><id>3899154</id><snippet>def sq(n):
    """
    Returns the square of n, accepting all numeric types:

    &gt;&gt;&gt; sq(10)
    100

    &gt;&gt;&gt; sq(10.434)
    108.86835599999999

    Raises a TypeError when input is invalid:

    &gt;&gt;&gt; sq(4*'435')
    Traceback (most recent call last):
      ...
    TypeError: can't multiply sequence by non-int of type 'str'

    """
    return n*n
</snippet></ROW><ROW><id>3899154</id><snippet>def sq(n):
    """Returns the squared result. 
    ...
</snippet></ROW><ROW><id>3899243</id><snippet>SocketServer.BaseRequestHandler</snippet></ROW><ROW><id>3899243</id><snippet>MyUDPServerHandler</snippet></ROW><ROW><id>3899243</id><snippet>server = SocketServer.UDPServer(('localhost', '12345'), MyUDPServerhandler)</snippet></ROW><ROW><id>3899243</id><snippet>server.timeout = .500</snippet></ROW><ROW><id>3899243</id><snippet>handle_timeout()</snippet></ROW><ROW><id>3899476</id><snippet>flock</snippet></ROW><ROW><id>3899476</id><snippet>flock</snippet></ROW><ROW><id>3899476</id><snippet>import fcntl, time, os

f = open("testfile", "w+")
print "Locking..."
fcntl.flock(f.fileno(), fcntl.LOCK_EX)
print "locked"
fcntl.flock(f.fileno(), fcntl.LOCK_UN)

if os.fork() == 0:
    # We're in the child process, and we have an inherited copy of the fd.
    # Lock the file.
    print "Child process locking..."
    fcntl.flock(f.fileno(), fcntl.LOCK_EX)
    print "Child process locked..."
    time.sleep(1000)
else:
    # We're in the parent.  Give the child process a moment to lock the file.
    time.sleep(0.5)

    print "Parent process locking..."
    fcntl.flock(f.fileno(), fcntl.LOCK_EX)
    print "Parent process locked"
    time.sleep(1000)
</snippet></ROW><ROW><id>3899476</id><snippet>If a process uses open(2) (or similar) to obtain more than one descriptor for the same file, these descriptors are treated independently by flock(). An attempt to lock the file using one of these file descriptors may be denied by a lock that the calling process has already placed via another descriptor.</snippet></ROW><ROW><id>3899610</id><snippet>import itertools as it

list1=['12aa','2a','c2']
list2=['2ac','c2a','1ac']

# First- Finding combinations of each two item from list1.
first = list(it.combinations(list1, 2))

# Second- Finding combinations of each two item from list2.
second = list(it.combinations(list2, 2))

# Third- Finding combinations of each two items from list1 and list2
third = list(it.product(list1, list2))

# Fourth- Calculating each combinations total length
for combination in first: # first, second, third
    print combination, len(''.join(combination))
</snippet></ROW><ROW><id>3899658</id><snippet>[y for x in a for y in [x[0]] * x[1]]
</snippet></ROW><ROW><id>3899678</id><snippet>class Program
{
    static void Main()
    {
        var secret = "secret";
        var data = "data";
        var hmac = new HMACSHA1(Encoding.UTF8.GetBytes(secret));
        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
        Console.WriteLine(BitConverter.ToString(hash));
    }
}
</snippet></ROW><ROW><id>3899833</id><snippet>def foldersSave(self):
    folders = QtCore.QStringList()
    foldersnum = self.configDialog.FolderLIST.count()
    if foldersnum:
        for i in range(foldersnum):
            print (i, " position is saved: ", self.configDialog.FolderLIST.item(i).text())
            folders.append(self.configDialog.FolderLIST.item(i).text())
        return folders
    return None
</snippet></ROW><ROW><id>3899833</id><snippet>def foldersLoad(self):
    folders = QtCore.QStringList()
    folders = self.tunSettings.value('musicfolders', None).toStringList()
    if folders.count():
        foldersnum = folders.count()
        for i in range(foldersnum):
            self.configDialog.FolderLIST.addItem(folders.takeFirst())
</snippet></ROW><ROW><id>3899900</id><snippet>len( set( a ) ) == len( a )
</snippet></ROW><ROW><id>3899900</id><snippet>( len( set( a ) ) == len( a ) == max( a ) ) and min( a ) == 1
</snippet></ROW><ROW><id>3900077</id><snippet>import timeit

bad_chars = '(){}&lt;&gt;'

setup = """import re
import string
s = 'Barack (of Washington)'
bad_chars = '(){}&lt;&gt;'
rgx = re.compile('[%s]' % bad_chars)"""

timer = timeit.Timer('o = "".join(c for c in s if c not in bad_chars)', setup=setup)
print "List comprehension: ",  timer.timeit(100000)


timer = timeit.Timer("o= rgx.sub('', s)", setup=setup)
print "Regular expression: ", timer.timeit(100000)

timer = timeit.Timer('for c in bad_chars: s = s.replace(c, "")', setup=setup)
print "Replace in loop: ", timer.timeit(100000)

timer = timeit.Timer('s.translate(string.maketrans("", "", ), bad_chars)', setup=setup)
print "string.translate: ", timer.timeit(100000)
</snippet></ROW><ROW><id>3900077</id><snippet>List comprehension:  0.631745100021
Regular expression:  0.155561923981
Replace in loop:  0.235936164856
string.translate:  0.0965719223022
</snippet></ROW><ROW><id>3900077</id><snippet>string.translate</snippet></ROW><ROW><id>3900131</id><snippet>spotread</snippet></ROW><ROW><id>3900167</id><snippet>font = {'family' : 'normal',
        'weight' : 'bold',
        'size'   : 22}

matplotlib.rc('font', **font)
</snippet></ROW><ROW><id>3900167</id><snippet>font</snippet></ROW><ROW><id>3900224</id><snippet>[r for r in (f(char) for char in string) if r is not None]
</snippet></ROW><ROW><id>3900224</id><snippet>filter</snippet></ROW><ROW><id>3900224</id><snippet>filter(None, (f(char) for char in string) )
# or, using itertools.imap,
filter(None, imap(f, string))
</snippet></ROW><ROW><id>3900353</id><snippet>result = [int(x) for x in a]
</snippet></ROW><ROW><id>3900580</id><snippet>import _winreg

key = _winreg.OpenKey(
    _winreg.HKEY_LOCAL_MACHINE,
    r"HARDWARE\DESCRIPTION\System\CentralProcessor\0")

value, type = _winreg.QueryValueEx(key, "~MHz")
print 'CPU speed is:', value
</snippet></ROW><ROW><id>3900942</id><snippet>__new__()</snippet></ROW><ROW><id>3900942</id><snippet>class C(object):
  def __new__(cls, val):
    if val == 5:
      return 'five'
    else:
      return super(C, cls).__new__(cls)

c1 = C(3)
print c1
c2 = C(5)
print c2
</snippet></ROW><ROW><id>3901084</id><snippet>Adder</snippet></ROW><ROW><id>3901084</id><snippet>#!/usr/bin/python

import gobject;
gobject.threads_init()
import gst;

if __name__ == "__main__":
    # First create our pipeline
    pipe = gst.Pipeline("mypipe")

    # Create a software mixer with "Adder"
    adder = gst.element_factory_make("adder","audiomixer")
    pipe.add(adder)

    # Gather a request sink pad on the mixer
    sinkpad1=adder.get_request_pad("sink%d")

    # Create the first buzzer..
    buzzer1 = gst.element_factory_make("audiotestsrc","buzzer1")
    buzzer1.set_property("freq",1000)
    pipe.add(buzzer1)
    # .. and connect it's source pad to the previously gathered request pad
    buzzersrc1=buzzer1.get_pad("src")
    buzzersrc1.link(sinkpad1)

    # Add some output
    output = gst.element_factory_make("autoaudiosink", "audio_out")
    pipe.add(output)
    adder.link(output)

    # Start the playback
    pipe.set_state(gst.STATE_PLAYING)

    raw_input("1kHz test sound. Press &lt;ENTER&gt; to continue.")

    # Get an another request sink pad on the mixer
    sinkpad2=adder.get_request_pad("sink%d")

    # Create an another buzzer and connect it the same way
    buzzer2 = gst.element_factory_make("audiotestsrc","buzzer2")
    buzzer2.set_property("freq",500)
    pipe.add(buzzer2)

    buzzersrc2=buzzer2.get_pad("src")
    buzzersrc2.link(sinkpad2)

    # Start the second buzzer (other ways streaming stops because of starvation)
    buzzer2.set_state(gst.STATE_PLAYING)

    raw_input("1kHz + 500Hz test sound playing simoultenously. Press &lt;ENTER&gt; to continue.")

    # Before removing a source, we must use pad blocking to prevent state changes
    buzzersrc1.set_blocked(True)
    # Stop the first buzzer
    buzzer1.set_state(gst.STATE_NULL)
    # Unlink from the mixer
    buzzersrc1.unlink(sinkpad2)
    # Release the mixers first sink pad
    adder.release_request_pad(sinkpad1)
    # Because here none of the Adder's sink pads block, streaming continues

    raw_input("Only 500Hz test sound. Press &lt;ENTER&gt; to stop.")
</snippet></ROW><ROW><id>3901119</id><snippet>PyFlakes</snippet></ROW><ROW><id>3901191</id><snippet>test = False 
test = "" 
test = 0
test = 0.0 
test = []
test = () 
test = {} 
test = set()
</snippet></ROW><ROW><id>3901191</id><snippet>if</snippet></ROW><ROW><id>3901191</id><snippet>if test:#False

if test is not None:#True 
</snippet></ROW><ROW><id>3901294</id><snippet>(?:\(?\b\d{3}\)?[-.\s]*)?\d{3}[-.\s]*\d{4}\b
</snippet></ROW><ROW><id>3901294</id><snippet>\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,6}\b
</snippet></ROW><ROW><id>3901294</id><snippet>\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+(?:asia|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum|travel|[A-Z]{2})\b
</snippet></ROW><ROW><id>3901508</id><snippet>import inspect
orig_members = []
for name, ref in inspect.getmembers(o):
  orig_members.append(name)
...
</snippet></ROW><ROW><id>3901508</id><snippet>for name, ref in inspect.getmembers(o):
  if name in orig_members:
    pass
  else:
    #delete ref here
</snippet></ROW><ROW><id>3901624</id><snippet>a = "testing"; a = a + "testing"</snippet></ROW><ROW><id>3901624</id><snippet>str(12345)</snippet></ROW><ROW><id>3901624</id><snippet>str</snippet></ROW><ROW><id>3901624</id><snippet>unicode</snippet></ROW><ROW><id>3901624</id><snippet>&gt;&gt;&gt; a = str(12345)
&gt;&gt;&gt; id(a)
3082418720
&gt;&gt;&gt; a += str(67890)
&gt;&gt;&gt; id(a)
3082418720
</snippet></ROW><ROW><id>3901624</id><snippet>string_concatenate</snippet></ROW><ROW><id>3901624</id><snippet>Python/ceval.c</snippet></ROW><ROW><id>3901624</id><snippet>s1 = s1 + s2</snippet></ROW><ROW><id>3901624</id><snippet>s1 += s2</snippet></ROW><ROW><id>3901624</id><snippet>_PyString_Resize</snippet></ROW><ROW><id>3901624</id><snippet>Objects/stringobject.c</snippet></ROW><ROW><id>3901714</id><snippet>os.write(child_fd, b"'\x04hmm\x16\x04'\n")
</snippet></ROW><ROW><id>3901714</id><snippet>\x16</snippet></ROW><ROW><id>3901753</id><snippet>br</snippet></ROW><ROW><id>3901753</id><snippet>br.select_form(nr=0) # select the first form
br.submit()
</snippet></ROW><ROW><id>3901808</id><snippet>drop()</snippet></ROW><ROW><id>3901808</id><snippet>drop_collection()</snippet></ROW><ROW><id>3901808</id><snippet>my_collection = db['collection_name']
my_collection.drop()

# Or...

db.drop_collection('collection_name')
</snippet></ROW><ROW><id>3901808</id><snippet>fs</snippet></ROW><ROW><id>3901808</id><snippet>db.drop_collection('fs')
</snippet></ROW><ROW><id>3901856</id><snippet>n = len(data)
pyplot.plot(data[::n/1000])
</snippet></ROW><ROW><id>3902106</id><snippet>from MyMath import Arith
</snippet></ROW><ROW><id>3902106</id><snippet>from MyMath import *
</snippet></ROW><ROW><id>3902106</id><snippet>Arith</snippet></ROW><ROW><id>3902139</id><snippet>linecount</snippet></ROW><ROW><id>3902139</id><snippet>lineCount</snippet></ROW><ROW><id>3902139</id><snippet>lettern</snippet></ROW><ROW><id>3902139</id><snippet>letter</snippet></ROW><ROW><id>3902139</id><snippet>line(letter)</snippet></ROW><ROW><id>3902139</id><snippet>[]</snippet></ROW><ROW><id>3902139</id><snippet>line[letter]</snippet></ROW><ROW><id>3902139</id><snippet>TypeError</snippet></ROW><ROW><id>3902368</id><snippet>nltk.Text</snippet></ROW><ROW><id>3902368</id><snippet>nltk.PlainTextReader</snippet></ROW><ROW><id>3902368</id><snippet>nltk.FreqDist</snippet></ROW><ROW><id>3902368</id><snippet>files = list_of_files
fd = nltk.FreqDist()
for file in files:
    with open(file) as f:
        for sent in nltk.sent_tokenize(f.lower()):
            for word in nltk.word_tokenize(sent):
                fd.inc(word)
</snippet></ROW><ROW><id>3902368</id><snippet>dict</snippet></ROW><ROW><id>3902368</id><snippet>files = list_of_files
fd = {}
for file in files:
    with open(file) as f:
        for sent in nltk.sent_tokenize(f.lower()):
            for word in nltk.word_tokenize(sent):
                try:
                    fd[word] = fd[word]+1
                except KeyError:
                    fd[word] = 1
</snippet></ROW><ROW><id>3902400</id><snippet>x, y = n % width, n / width
</snippet></ROW><ROW><id>3902400</id><snippet>y, x = divmod(n, width)
</snippet></ROW><ROW><id>3902643</id><snippet>genENE.insert(i,enemies[0])
</snippet></ROW><ROW><id>3902643</id><snippet>genENE.insert(i,enemies[0][:])
</snippet></ROW><ROW><id>3902887</id><snippet>(r"/login/google/", GoogleAuthHandler),
(r"/login/facebook/", FacebookAuthHandler),
</snippet></ROW><ROW><id>3902887</id><snippet>&lt;a href="/login/google/&gt;Login with Google&lt;/a&gt;
&lt;a href="/login/facebook/"&gt;Login with Facebook&lt;/a&gt;
</snippet></ROW><ROW><id>3902948</id><snippet>socket.recv()</snippet></ROW><ROW><id>3902948</id><snippet># Assumes a blocking socket.
while True:
    data = sock.recv(4096)
    if not data:
        break
    # Do something with `data` here.
</snippet></ROW><ROW><id>3902989</id><snippet>values = [1, 2, 3, 4, 5]
thecsv = csv.writer(open("your.csv", 'wb'))
thecsv.writerow(values)
</snippet></ROW><ROW><id>3902989</id><snippet>values = [1, 2, 3, 4, 5]
thecsv = csv.writer(open("your.csv", 'wb'))
for value in values:
    thecsv.writerow(value)
</snippet></ROW><ROW><id>3903548</id><snippet>tr</snippet></ROW><ROW><id>3903548</id><snippet>&lt;tr custID='...'&gt;...&lt;/tr&gt;</snippet></ROW><ROW><id>3903548</id><snippet>custID</snippet></ROW><ROW><id>3903548</id><snippet>tr</snippet></ROW><ROW><id>3903548</id><snippet>$("tr").dblclick(function() {
    $(selector).load("http://myurl/pageName.extension?custID='"+$(this).attr("custID")+"'");
});
</snippet></ROW><ROW><id>3903548</id><snippet>data-</snippet></ROW><ROW><id>3903548</id><snippet>data-custID</snippet></ROW><ROW><id>3903560</id><snippet># 1
result = data.count(data[0]) &gt; 1


# 2
it = iter(data)
result = it.next() in it
</snippet></ROW><ROW><id>3904043</id><snippet>&gt;&gt;&gt; import threading
&gt;&gt;&gt; END = False
&gt;&gt;&gt; def run(x=0):
...     x += 5
...     print x
...     if not END:
...         threading.Timer(1.0, run, [x]).start()
... 
&gt;&gt;&gt; threading.Timer(1.0, run, [x]).start()
&gt;&gt;&gt; 5
10
15
20
25
30
35
40
</snippet></ROW><ROW><id>3904043</id><snippet>END = True</snippet></ROW><ROW><id>3904084</id><snippet>try</snippet></ROW><ROW><id>3904084</id><snippet>except</snippet></ROW><ROW><id>3904084</id><snippet>try</snippet></ROW><ROW><id>3904084</id><snippet>except</snippet></ROW><ROW><id>3904084</id><snippet>"""</snippet></ROW><ROW><id>3904171</id><snippet>&gt;&gt;&gt; print int('0x10', 16)
16
</snippet></ROW><ROW><id>3904462</id><snippet>namedtuple</snippet></ROW><ROW><id>3904462</id><snippet>namedtuple</snippet></ROW><ROW><id>3904462</id><snippet>namedtuple</snippet></ROW><ROW><id>3904462</id><snippet>abc.ABCMeta</snippet></ROW><ROW><id>3904462</id><snippet>class Foo(object):
    __metaclass__ = ImmutableMeta
    _attributes_ = 'a b'

    def sayhi(self):
        print "Hello from {0}".format(type(self).__name__)

class Bar(Foo):
    _attributes_ = 'c'

    def saybye(self):
        print "Goodbye from {0}".format(type(self).__name__)
</snippet></ROW><ROW><id>3904462</id><snippet>import collections as co
import abc

class ImmutableMeta(abc.ABCMeta):

    _classes = {}

    def __new__(meta, clsname, bases, clsdict):
        attributes = clsdict.pop('_attributes_')

        if bases[0] is object:
            # 'new' class
            methods = clsdict
        else:
            # we're 'inheriting' from an existing class
            base = bases[0]
            attributes = meta._classes[base]['attributes'] + ' ' + attributes
            base_methods = meta._classes[base]['methods'].copy()
            base_methods.update(clsdict)
            methods = base_methods

        # construct the actual base class and create the return class
        new_base = co.namedtuple(clsname + 'Base', attributes)
        cls = super(ImmutableMeta, meta).__new__(meta, clsname, (new_base,),
                                                 methods)

        # register the data necessary to 'inherit' from the class
        # and make sure that it passes typechecking
        meta._classes[cls] = {'attributes': attributes,
                              'methods': methods}
        if bases[0] is not object:
            base.register(cls)
        return cls
</snippet></ROW><ROW><id>3904462</id><snippet>a = Foo(1, 2)
a.sayhi()

b = Bar(1, 2, 3)
b.sayhi()  # 'inherited' from class Foo
b.saybye()

try:
    b.c = 1         # will raise an AttributeError
except AttributeError:
    print "Immutable"

print "issubclass(Bar, Foo): {0}".format(issubclass(Bar, Foo))

try:
   d =  {b: 1}        # No problems
except TypeError:
    print "Cant put it in a dict"
else:
    print "Can put it in a dict"
</snippet></ROW><ROW><id>3904462</id><snippet>__getattr__</snippet></ROW><ROW><id>3904585</id><snippet>CPython</snippet></ROW><ROW><id>3904585</id><snippet>CPython Lib</snippet></ROW><ROW><id>3904585</id><snippet>Lib</snippet></ROW><ROW><id>3904585</id><snippet>IRONPYTHONPATH</snippet></ROW><ROW><id>3904585</id><snippet>Lib</snippet></ROW><ROW><id>3904585</id><snippet>CPython</snippet></ROW><ROW><id>3904986</id><snippet>return "HTTP/1.0 200 OK\r\nContent-type:text/html;charset=utf8\r\n\r\n&lt;html&gt;&lt;body&gt;test&lt;/body&gt;&lt;/html&gt;"
</snippet></ROW><ROW><id>3905207</id><snippet>vsvars32.bat</snippet></ROW><ROW><id>3905207</id><snippet>VARNAME=value</snippet></ROW><ROW><id>3905207</id><snippet>os.environ</snippet></ROW><ROW><id>3905536</id><snippet>l = s.split('\\autocite')
print '%s\\autocite%s' % (l[0], ''.join(l[1:]))
</snippet></ROW><ROW><id>3905560</id><snippet>x = 0
def run_5():
    print "5 minutes later"
    x += 5
    return x

x=run_5()
print x
</snippet></ROW><ROW><id>3905566</id><snippet>def __init__(self,l = []):
</snippet></ROW><ROW><id>3905566</id><snippet>list</snippet></ROW><ROW><id>3905566</id><snippet>[]</snippet></ROW><ROW><id>3905566</id><snippet>def __init__( self, l= None ):
    if l is None: l = []
</snippet></ROW><ROW><id>3905660</id><snippet>zlib1g-dev</snippet></ROW><ROW><id>3905786</id><snippet>&gt;&gt;&gt; import zlib
&gt;&gt;&gt; a = zlib.compress('fooo')
&gt;&gt;&gt; b = a.encode('base64')
&gt;&gt;&gt; b
'eJxLy8/PBwAENgG0\n'
&gt;&gt;&gt; c = 'eJxLy8/PBwAENgG0\n'.decode('base64')
&gt;&gt;&gt; zlib.decompress(c)
'fooo'
&gt;&gt;&gt; zlib.decompress(a)
'fooo'
</snippet></ROW><ROW><id>3906148</id><snippet>read()</snippet></ROW><ROW><id>3906148</id><snippet>readline()</snippet></ROW><ROW><id>3906148</id><snippet>readlines()</snippet></ROW><ROW><id>3906148</id><snippet>for line in handle:</snippet></ROW><ROW><id>3906148</id><snippet>read()</snippet></ROW><ROW><id>3906148</id><snippet>seek(0)</snippet></ROW><ROW><id>3906148</id><snippet>read()</snippet></ROW><ROW><id>3906390</id><snippet>import sys
import StringIO
import contextlib

@contextlib.contextmanager
def stdoutIO(stdout=None):
    old = sys.stdout
    if stdout is None:
        stdout = StringIO.StringIO()
    sys.stdout = stdout
    yield stdout
    sys.stdout = old

code = """
i = [0,1,2]
for j in i :
    print j
"""
with stdoutIO() as s:
    exec code

print "out:", s.getvalue()
</snippet></ROW></DATA>