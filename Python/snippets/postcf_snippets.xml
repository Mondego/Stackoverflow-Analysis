<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>13075688</id><snippet>The_End.insert[x + 1, y]</snippet></ROW><ROW><id>13075688</id><snippet>The_End.insert(x + 1, y)
</snippet></ROW><ROW><id>13075863</id><snippet>os.walk()</snippet></ROW><ROW><id>13075863</id><snippet>def grep(regex, base_dir):
    matches = list()
    # os.walk() returns a tuple - the directory path, a list of directories and the files
    for dirpath, dirname, files in os.walk(base_dir):
        # Iterate through the directory list, reading the files
        for directory in dirname:
          for filename in os.listdir(directory):
              with open(os.path.join(base_dir, directory, filename)) as fh:
                  content = fh.read()
                  matches = matches + re.findall(regex, content)
    return matches
</snippet></ROW><ROW><id>13075904</id><snippet>assert_equal</snippet></ROW><ROW><id>13075904</id><snippet>nose.tools</snippet></ROW><ROW><id>13075904</id><snippet>__all__</snippet></ROW><ROW><id>13075904</id><snippet>from nose.tools import assert_equal</snippet></ROW><ROW><id>13075994</id><snippet>basestring</snippet></ROW><ROW><id>13075994</id><snippet>str</snippet></ROW><ROW><id>13075994</id><snippet>MyClass("the string").myfunc()
</snippet></ROW><ROW><id>13075994</id><snippet>myfunc("the string")
</snippet></ROW><ROW><id>13076123</id><snippet>return Distance(inch=l)
</snippet></ROW><ROW><id>13076225</id><snippet>integral.func_name
</snippet></ROW><ROW><id>13076225</id><snippet>integral.__name__
</snippet></ROW><ROW><id>13076225</id><snippet>__name__</snippet></ROW><ROW><id>13076225</id><snippet>&gt;&gt;&gt; def f():
    pass

&gt;&gt;&gt; f.__name__
'f'
&gt;&gt;&gt; f.func_name
'f'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13076241</id><snippet> "/path/to/my/file/%(dir_id)s/is/here/%(file_id)s" % \
         {"dir_id": "dir", "file_id": "fileId"}
</snippet></ROW><ROW><id>13076574</id><snippet>[i for i, elem in enumerate(bool_list, 1) if elem]
</snippet></ROW><ROW><id>13076800</id><snippet>urlparse</snippet></ROW><ROW><id>13076800</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url1 = 'http://google.com/?a=1&amp;b=2'
&gt;&gt;&gt; url2 = 'http://google.com/?b=2&amp;a=1'
&gt;&gt;&gt; # parse url ignoring query params order
... def parse_url(url):
...   u = urlparse.urlparse(url)
...   q = u.query
...   u = urlparse.urlparse(u.geturl().replace(q, ''))
...   return (u, urlparse.parse_qs(q))
... 
&gt;&gt;&gt; parse_url(url1)
(ParseResult(scheme='http', netloc='google.com', path='/', params='', query='', fragment=''), {'a': ['1'], 'b': ['2']})
&gt;&gt;&gt; def assert_url_equals(url1, url2):
...   return parse_url(url1) == parse_url(url1)
...
&gt;&gt;&gt; assert_url_equals(url1, url2)
True
</snippet></ROW><ROW><id>13076829</id><snippet>textwidget = tk.Text(master)
textwidget.pack(side=tk.LEFT, fill=tk.BOTH)
for f in os.listdir('/tmp'):
    textwidget.window_create(tk.INSERT, window=tk.Label(textwidget, text=f))
</snippet></ROW><ROW><id>13076845</id><snippet>&lt;form action="/map" method="get"&gt;
&lt;label&gt;Search: &lt;input type="search" placeholder="Search" name="location"&gt;&lt;/label&gt;
&lt;input type="Submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13076845</id><snippet>http://www.your-site.com/?q=Your%20Search%20Term</snippet></ROW><ROW><id>13076845</id><snippet>request</snippet></ROW><ROW><id>13077048</id><snippet>re.sub(r'(^|\s)%s($|\s)' % re.escape(variable), r'\1we\2', some_string)
</snippet></ROW><ROW><id>13077048</id><snippet>\b</snippet></ROW><ROW><id>13077048</id><snippet>re.escape</snippet></ROW><ROW><id>13077048</id><snippet>.</snippet></ROW><ROW><id>13077048</id><snippet>$</snippet></ROW><ROW><id>13077048</id><snippet>&gt;&gt;&gt; s = "-local locally local test local."
&gt;&gt;&gt; variable = 'local'
&gt;&gt;&gt; re.sub(r'(^|\s)%s($|\s)' % re.escape(variable), r'\1we\2', s)
'-local locally we test local.'
&gt;&gt;&gt; variable = '-local'
&gt;&gt;&gt; re.sub(r'(^|\s)%s($|\s)' % re.escape(variable), r'\1we\2', s)
'we locally local test local.'
</snippet></ROW><ROW><id>13077433</id><snippet>request.finish()</snippet></ROW><ROW><id>13077433</id><snippet>http://</snippet></ROW><ROW><id>13077433</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>13077433</id><snippet>from twisted.web import server, resource
from twisted.internet import reactor

class Simple(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        request.redirect("http://www.google.com")
        request.finish()
        return server.NOT_DONE_YET

site = server.Site(Simple())
reactor.listenTCP(8080, site)
reactor.run()
</snippet></ROW><ROW><id>13077699</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>13077699</id><snippet>mechanize</snippet></ROW><ROW><id>13077708</id><snippet>""</snippet></ROW><ROW><id>13077708</id><snippet>b""</snippet></ROW><ROW><id>13077708</id><snippet>urllib.parse.urlencode({'id': '276 AND ...'})</snippet></ROW><ROW><id>13077708</id><snippet>source</snippet></ROW><ROW><id>13077708</id><snippet>source.decode(encoding)</snippet></ROW><ROW><id>13077708</id><snippet>charset</snippet></ROW><ROW><id>13077708</id><snippet>import cgi

# extract encoding from Content-Type and print the response
_, params = cgi.parse_header(response.headers.get('Content-Type', ''))
print(response.read().decode(params['charset']))
</snippet></ROW><ROW><id>13078030</id><snippet>data = 'Copyright \xA9 2012'  # \xA9 is the copyright symbol in Windows-1252

# Convert from Windows-1252 to UTF-8
encoded = data.decode('Windows-1252').encode('utf-8')

# Prints "Copyright © 2012"
print encoded
</snippet></ROW><ROW><id>13078052</id><snippet>sys.path</snippet></ROW><ROW><id>13078052</id><snippet>python</snippet></ROW><ROW><id>13078216</id><snippet>Content-Disposition</snippet></ROW><ROW><id>13078216</id><snippet>Content-Disposition: attachment; filename="fname.ext"
</snippet></ROW><ROW><id>13078216</id><snippet>quoted-string</snippet></ROW><ROW><id>13078216</id><snippet>"</snippet></ROW><ROW><id>13078216</id><snippet>\"</snippet></ROW><ROW><id>13078216</id><snippet>Content-Disposition</snippet></ROW><ROW><id>13078216</id><snippet>application/file</snippet></ROW><ROW><id>13078216</id><snippet>application/octet-stream</snippet></ROW><ROW><id>13078216</id><snippet># "application/file" is not a valid mime type!
content_subtype = ext if ext in ['jpg','pdf'] else 'octet-stream'

# This replaces non-ascii characters with '?'
# (This assumes f.name is a unicode string)
content_disposition_filename = f.name.encode('ascii', 'replace')

response = Response(content_type="application/%s" % content_subtype,
                    content_disposition='attachment; filename="%s"' 
                      % content_disposition_filename.replace('"','\\"')
           )
</snippet></ROW><ROW><id>13078412</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('q', -5808609649712063748)
'\xfc\x9a\x01\x86L\xacc\xaf'
&gt;&gt;&gt; struct.unpack('Q', _)
(12638134423997487868L,)
&gt;&gt;&gt; 0xaf63ac4c86019afc == _[0]
True
</snippet></ROW><ROW><id>13078412</id><snippet>FNV1A_64_INIT</snippet></ROW><ROW><id>13078412</id><snippet>&gt;&gt;&gt; FNV1A_64_INIT = 0xcbf29ce484222325
&gt;&gt;&gt; import pyhash
&gt;&gt;&gt; hasher = pyhash.fnv1a_64()
&gt;&gt;&gt; hasher('1', seed=FNV1A_64_INIT)
12638134423997487868L
&gt;&gt;&gt; _ == 0xaf63ac4c86019afc
True
</snippet></ROW><ROW><id>13078474</id><snippet>]</snippet></ROW><ROW><id>13078474</id><snippet>ֶם</snippet></ROW><ROW><id>13078474</id><snippet>]</snippet></ROW><ROW><id>13078578</id><snippet>Furneaux Lodge</snippet></ROW><ROW><id>13078578</id><snippet>&gt;&gt;&gt; from geopy import geocoders
&gt;&gt;&gt; gn = geocoders.GeoNames()  
&gt;&gt;&gt; place, (lat, lng) = gn.geocode('Furneaux Lodge')
&gt;&gt;&gt; print('{}: {:.5f}, {:.5f}'.format(place, lat, lng))
Furneaux Lodge, F4, NZ: -41.08826, 174.18019
</snippet></ROW><ROW><id>13078696</id><snippet>os.path.join</snippet></ROW><ROW><id>13078696</id><snippet>import os

path = os.path.join("R:\\path",csv_file)
with open(path,'rb') as csv_input:
...
</snippet></ROW><ROW><id>13078786</id><snippet>shutil.open</snippet></ROW><ROW><id>13078786</id><snippet>shutil.open</snippet></ROW><ROW><id>13078786</id><snippet>open</snippet></ROW><ROW><id>13078786</id><snippet>popen</snippet></ROW><ROW><id>13078786</id><snippet>open /Applications/MyGame.app</snippet></ROW><ROW><id>13078786</id><snippet>start</snippet></ROW><ROW><id>13078786</id><snippet>cmd.exe</snippet></ROW><ROW><id>13078786</id><snippet>os.startfile</snippet></ROW><ROW><id>13078786</id><snippet>os.startfile(r'C:\Program Files\MyGame\MyGame.exe')</snippet></ROW><ROW><id>13078786</id><snippet>xdg-open</snippet></ROW><ROW><id>13078786</id><snippet>popen</snippet></ROW><ROW><id>13078786</id><snippet>xdg-open /usr/local/bin/mygame</snippet></ROW><ROW><id>13078786</id><snippet>popen</snippet></ROW><ROW><id>13078786</id><snippet>xdg-open</snippet></ROW><ROW><id>13078786</id><snippet>open</snippet></ROW><ROW><id>13078786</id><snippet>xdg-open</snippet></ROW><ROW><id>13078786</id><snippet>os.startfile</snippet></ROW><ROW><id>13078786</id><snippet>open</snippet></ROW><ROW><id>13078786</id><snippet>xdg-open</snippet></ROW><ROW><id>13078786</id><snippet>os.startfile</snippet></ROW><ROW><id>13078786</id><snippet>os</snippet></ROW><ROW><id>13078786</id><snippet>shutil</snippet></ROW><ROW><id>13078786</id><snippet>webbrowser.open</snippet></ROW><ROW><id>13078786</id><snippet>os.system</snippet></ROW><ROW><id>13078864</id><snippet>virtualenv</snippet></ROW><ROW><id>13078864</id><snippet>sudo /usr/bin/easy_install-2.7 virtualenv
/usr/local/bin/virtualenv-2.7 test
</snippet></ROW><ROW><id>13078960</id><snippet>def __repr__(self):
        routes = self.match_routes + [v for k, v in \
            self.build_routes.iteritems() if v not in self.match_routes]

        return '&lt;Router(%r)&gt;' % routes
</snippet></ROW><ROW><id>13078960</id><snippet>webapp2.RequestHandler</snippet></ROW><ROW><id>13078960</id><snippet>request.app.router</snippet></ROW><ROW><id>13078985</id><snippet>:asgard.kbfail.net 451 JOIN :You have not registered
</snippet></ROW><ROW><id>13078985</id><snippet>/MSG Alice foo</snippet></ROW><ROW><id>13079076</id><snippet>screen</snippet></ROW><ROW><id>13079076</id><snippet>Screen</snippet></ROW><ROW><id>13079076</id><snippet>gameObjects</snippet></ROW><ROW><id>13079602</id><snippet>int()</snippet></ROW><ROW><id>13079602</id><snippet>float</snippet></ROW><ROW><id>13079602</id><snippet>&gt;&gt;&gt; int(4.95)
4
</snippet></ROW><ROW><id>13079602</id><snippet>totalDollars = totalCents / 100
totalDollarsTrunc = int(format(totalDollars, '.0f'))
totalPennies = totalCents - (totalDollarsTrunc * 100)
</snippet></ROW><ROW><id>13079602</id><snippet>divmod</snippet></ROW><ROW><id>13079602</id><snippet>totalDollars, totalPennies = divmod(totalCents, 100)
</snippet></ROW><ROW><id>13079723</id><snippet>User</snippet></ROW><ROW><id>13079723</id><snippet>Base</snippet></ROW><ROW><id>13079723</id><snippet>object</snippet></ROW><ROW><id>13079723</id><snippet>DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
engine = create_engine(db_string, echo=db_echo)
Base = declarative_base()    
Base.metadata.bind = engine

class User(Base):
    __tablename__ = 'users'
    __table_args__ = {'schema': 'users', 'autoload': True}
</snippet></ROW><ROW><id>13079875</id><snippet>numpy</snippet></ROW><ROW><id>13079875</id><snippet>matplotlib</snippet></ROW><ROW><id>13079875</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Your "list of 600 values"...
x = np.linspace(0, 10, 600)

# Evaluate a polynomial at each location in `x`
y = -1.3 * x**3 + 10 * x**2 - 3 * x + 10

plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>13079875</id><snippet>numpy.polyder</snippet></ROW><ROW><id>13079875</id><snippet>numpy.polyval</snippet></ROW><ROW><id>13079875</id><snippet>polyder</snippet></ROW><ROW><id>13079875</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Your "list of 600 values"...
x = np.linspace(0, 10, 600)

coeffs = [-1.3, 10, 3, 10]

# Evaluate a polynomial at each location in `x`
y = np.polyval(coeffs, x)

# Calculate the derivative
der_coeffs = np.polyder(coeffs)

# Evaluate the derivative on the same points...
y_prime = np.polyval(der_coeffs, x)

# Plot the two...
fig, (ax1, ax2) = plt.subplots(nrows=2)

ax1.plot(x, y)
ax1.set_title('Original Function')

ax2.plot(x, y_prime)
ax2.set_title('Deriviative')

plt.show()
</snippet></ROW><ROW><id>13079980</id><snippet>_v_</snippet></ROW><ROW><id>13079980</id><snippet>_v_</snippet></ROW><ROW><id>13080152</id><snippet>import quopri

decoded_text = quopri.decodestring(encoded_text)
</snippet></ROW><ROW><id>13080313</id><snippet>def show_diff(seqm):
    output= []
    for opcode, a0, a1, b0, b1 in seqm.get_opcodes():
        if opcode == 'equal':
            output.append(seqm.a[a0:a1])
        elif opcode == 'insert':
            output.append("&lt;ins&gt;" + seqm.b[b0:b1] + "&lt;/ins&gt;")
        elif opcode == 'delete':
            output.append("&lt;del&gt;" + seqm.a[a0:a1] + "&lt;/del&gt;")
        elif opcode == 'replace':
            output.append("&lt;del&gt;" + seqm.a[a0:a1] + "&lt;/del&gt;" + "&lt;ins&gt;" + seqm.b[b0:b1] + "&lt;/ins&gt;" )
        else:
            raise RuntimeError, "Unexpected opcode"
    return ''.join(output)
</snippet></ROW><ROW><id>13080313</id><snippet>In [4]: sm = difflib.SequenceMatcher(None, 'hello', 'hello world')

In [6]: diff = show_diff(sm)

In [7]: diff
Out[7]: 'hello&lt;ins&gt; world&lt;/ins&gt;'
</snippet></ROW><ROW><id>13080349</id><snippet>numpy.kron(x,numpy.ones((3,3)))
</snippet></ROW><ROW><id>13080349</id><snippet>array([[ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.],
       [ 0.,  0.,  0.,  1.,  1.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  1.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  1.,  1.,  0.,  0.,  0.],
       [ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  0.,  0.,  0.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>13080419</id><snippet>eval()</snippet></ROW><ROW><id>13080419</id><snippet>"Enter the number you want to bet on --&gt;"</snippet></ROW><ROW><id>13080419</id><snippet>eval()</snippet></ROW><ROW><id>13080419</id><snippet>eval()</snippet></ROW><ROW><id>13080419</id><snippet>myVar = eval(input("Enter some value for myVar variable"))</snippet></ROW><ROW><id>13080419</id><snippet>myVar = eval(str(input("Enter some value for myVar variable")))</snippet></ROW><ROW><id>13080419</id><snippet>eval()</snippet></ROW><ROW><id>13080419</id><snippet>raw_input()</snippet></ROW><ROW><id>13080419</id><snippet>int_in = None
while int_in == None:
   str_in = raw_input('some text telling which data is expected')
   try:
       int_in = int(str_in)
   except ValueError:
       # optional output of some message to user
       int_in = None
</snippet></ROW><ROW><id>13080502</id><snippet>In [20]: from nltk import bigrams

In [21]: bigrams('This is a test')
Out[21]: 
[('T', 'h'),
 ('h', 'i'),
 ('i', 's'),
 ('s', ' '),
 (' ', 'i'),
 ('i', 's'),
 ('s', ' '),
 (' ', 'a'),
 ('a', ' '),
 (' ', 't'),
 ('t', 'e'),
 ('e', 's'),
 ('s', 't')]
</snippet></ROW><ROW><id>13080502</id><snippet>from collections import Counter
In [44]: b = bigrams('This is a test')

In [45]: Counter(b)
Out[45]: Counter({('i', 's'): 2, ('s', ' '): 2, ('a', ' '): 1, (' ', 't'): 1, ('e', 's'): 1, ('h', 'i'): 1, ('t', 'e'): 1, ('T', 'h'): 1, (' ', 'i'): 1, (' ', 'a'): 1, ('s', 't'): 1})
</snippet></ROW><ROW><id>13080502</id><snippet>In [49]: b = bigrams("This is a test".split(' '))

In [50]: b
Out[50]: [('This', 'is'), ('is', 'a'), ('a', 'test')]

In [51]: Counter(b)
Out[51]: Counter({('is', 'a'): 1, ('a', 'test'): 1, ('This', 'is'): 1})
</snippet></ROW><ROW><id>13080502</id><snippet>In [56]: d = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."

In [56]: from nltk import trigrams
In [57]: tri = trigrams(d.split(' '))

In [60]: counter = Counter(tri)

In [61]: import random

In [62]: random.sample(counter, 5)
Out[62]: 
[('Ipsum', 'has', 'been'),
 ('industry.', 'Lorem', 'Ipsum'),
 ('Ipsum', 'passages,', 'and'),
 ('was', 'popularised', 'in'),
 ('galley', 'of', 'type')]
</snippet></ROW><ROW><id>13080740</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>13080740</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>13080740</id><snippet>&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td nowrap valign="bottom"&gt;&lt;!-- painting image --&gt;
&lt;p&gt;&lt;font&gt;&lt;!-- painting data, use " for quotes --&gt;&lt;/font&gt;&lt;/p&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>13080740</id><snippet>for cell in soup.find_all('td',{'valign':'bottom'}):
    title = cell.find('b')
    if title is None:
        continue
    painting_title = title.text
    painting_media = cell.br.next_sibling 
    record = painting_title, painting_media
    paintings.append(record)
</snippet></ROW><ROW><id>13080740</id><snippet>painting_media</snippet></ROW><ROW><id>13080740</id><snippet>painting_media = list(cell.br.children)
painting_media = painting_media[0].strip() if painting_media else ''
</snippet></ROW><ROW><id>13081001</id><snippet>lock = threading.Lock()
...
except KeyError:
    with lock:
        if key in self.cache:
            v = self.cache[key]
        else:
            v = self.cache[key] = f(*args,**kwargs),time.time()
</snippet></ROW><ROW><id>13081393</id><snippet>filter</snippet></ROW><ROW><id>13081393</id><snippet>len</snippet></ROW><ROW><id>13081393</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; s="This char -- or that one -- It's a Space."
&gt;&gt;&gt; for k in [string.uppercase, string.lowercase, string.whitespace, string.punctuation]:
...     len(filter(lambda x: x in k, s))
... 
3
23
9
6
</snippet></ROW><ROW><id>13081393</id><snippet>string.uppercase, string.lowercase,</snippet></ROW><ROW><id>13081393</id><snippet>string</snippet></ROW><ROW><id>13081393</id><snippet>string</snippet></ROW><ROW><id>13081393</id><snippet>&gt;&gt;&gt; string.whitespace
'\t\n\x0b\x0c\r '
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
</snippet></ROW><ROW><id>13081493</id><snippet>atom</snippet></ROW><ROW><id>13081493</id><snippet>atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [listmaker] ']' |
       '{' [dictorsetmaker] '}' |
       '`' testlist1 '`' |
       NAME | NUMBER | STRING+)
</snippet></ROW><ROW><id>13081493</id><snippet>listmaker</snippet></ROW><ROW><id>13081493</id><snippet>listmaker: test ( list_for | (',' test)* [','] )
list_iter: list_for | list_if
list_for: 'for' exprlist 'in' testlist_safe [list_iter]
list_if: 'if' old_test [list_iter]
</snippet></ROW><ROW><id>13081493</id><snippet>exprlist</snippet></ROW><ROW><id>13081665</id><snippet>Func(5)
</snippet></ROW><ROW><id>13081746</id><snippet>.pyc</snippet></ROW><ROW><id>13081746</id><snippet>.pyc</snippet></ROW><ROW><id>13081746</id><snippet>N</snippet></ROW><ROW><id>13081787</id><snippet>for dirname, dirnames, filenames in os.walk(path):
    print()
    print(dirname + ":")
    for filename in filenames:
        print(os.path.join(dirname, filename))
</snippet></ROW><ROW><id>13081787</id><snippet>os.walk</snippet></ROW><ROW><id>13081787</id><snippet>dirnames</snippet></ROW><ROW><id>13082062</id><snippet>In [17]: pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)
Out[17]:
             GOOG                  AAPL
             Open   High    Low    Open    High     Low
Date
2011-01-03  21.01  21.05  20.78  596.48  605.59  596.48
2011-01-04  21.12  21.20  21.05  605.62  606.18  600.12
2011-01-05  21.19  21.21  20.90  600.07  610.33  600.05
2011-01-06  20.67  20.82  20.55  610.68  618.43  610.05
2011-01-07  20.71  20.77  20.27  615.91  618.25  610.13
</snippet></ROW><ROW><id>13082167</id><snippet>def column(matrix, i):
    return [row[i-1] for row in matrix]
column(table,2)

Out[15]:
['B', 'F', 'J', 'N', 'R', 'V', 'Z', '4', '8']

def getitem(matrix,row,column):
    return matrix[row-1][column-1]
getitem(table,2,3)

Out[16]:
'G'
</snippet></ROW><ROW><id>13082167</id><snippet>table[1][2]</snippet></ROW><ROW><id>13082167</id><snippet>G</snippet></ROW><ROW><id>13082167</id><snippet>O</snippet></ROW><ROW><id>13082167</id><snippet>table[4][3]</snippet></ROW><ROW><id>13082167</id><snippet>T</snippet></ROW><ROW><id>13082684</id><snippet>locale.format()</snippet></ROW><ROW><id>13082684</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'German')
'German_Germany.1252'
&gt;&gt;&gt; print(locale.format('%.2f', 32757121.33, True))
32.757.121,33
</snippet></ROW><ROW><id>13082684</id><snippet>locale.format()</snippet></ROW><ROW><id>13082684</id><snippet>locale.str()</snippet></ROW><ROW><id>13082684</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'English')
'English_United States.1252'
&gt;&gt;&gt; print(locale.format('%.2f', 32757121.33, True))
32,757,121.33
&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'German')
'German_Germany.1252'
&gt;&gt;&gt; print(locale.format('%.2f', 32757121.33, True))
32.757.121,33
</snippet></ROW><ROW><id>13082705</id><snippet>def round_down(num, divisor):
    return num - (num%divisor)

In [2]: round_down(19,10)
Out[2]: 10

In [3]: round_down(19,5)
Out[3]: 15

In [4]: round_down(10,10)
Out[4]: 10
</snippet></ROW><ROW><id>13082737</id><snippet>main()</snippet></ROW><ROW><id>13082737</id><snippet>def main():
   import my_module # import ONLY if main is called
   # code
</snippet></ROW><ROW><id>13082969</id><snippet>('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d',
'%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M', '%m/%d/%Y',
'%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M', '%m/%d/%y')
</snippet></ROW><ROW><id>13083105</id><snippet>sys.path</snippet></ROW><ROW><id>13083105</id><snippet>sys.path[1:] + sys.path[:1]</snippet></ROW><ROW><id>13083432</id><snippet>read()</snippet></ROW><ROW><id>13083432</id><snippet>write()</snippet></ROW><ROW><id>13083432</id><snippet>write()</snippet></ROW><ROW><id>13083432</id><snippet>seek()</snippet></ROW><ROW><id>13083432</id><snippet>read()</snippet></ROW><ROW><id>13083432</id><snippet>f = open("file.txt", "w+")
print f.read()      # prints ''
f.write("Hello")
f.seek(0)
print f.read()      # print 'Hello'
f.close()
</snippet></ROW><ROW><id>13083741</id><snippet>name[0][0][0][0]...</snippet></ROW><ROW><id>13083741</id><snippet>-1</snippet></ROW><ROW><id>13083741</id><snippet>&gt;&gt;&gt; name[0][0]
'u'
&gt;&gt;&gt; name[0][0][-1]
'u'
&gt;&gt;&gt; name[0][0][-1][-1]
'u'
</snippet></ROW><ROW><id>13083741</id><snippet>name[0][1]</snippet></ROW><ROW><id>13083741</id><snippet>name[0]</snippet></ROW><ROW><id>13083900</id><snippet>df.groupby(lambda x:x, axis=1).sum()
</snippet></ROW><ROW><id>13083900</id><snippet>df.groupby(df.columns, axis=1).sum()
</snippet></ROW><ROW><id>13083900</id><snippet>.agg()</snippet></ROW><ROW><id>13083900</id><snippet>.aggregate()</snippet></ROW><ROW><id>13083900</id><snippet>df.groupby(df.columns, axis=1).agg(numpy.max)
</snippet></ROW><ROW><id>13084271</id><snippet>handlers</snippet></ROW><ROW><id>13084271</id><snippet>handers=[(r"/", IndexHandler)])
</snippet></ROW><ROW><id>13084306</id><snippet>foo = Literal('foo').setResultsName('foo')
bar = Literal('bar').setResultsName('bar')
grammar = foo | bar
parsed = grammar.parseString('bar foo')
print parsed
# (['bar'], {'bar': [('bar', 0)]})
print parsed.asDict()
# {'bar': 'bar'}
</snippet></ROW><ROW><id>13084647</id><snippet>c = [x[0] for x in A]
</snippet></ROW><ROW><id>13084647</id><snippet>A</snippet></ROW><ROW><id>13084955</id><snippet>if (Input.GetKeyDown("space")) {
    Vector3 prosition = new Vector3(
        tranform.position.x,
        transform.position.y + 1,
        transform.position.z);
    }
    Instantiate(ProjectilePrefab, position,
            Quaternion.Identiy);
}
</snippet></ROW><ROW><id>13085926</id><snippet>request</snippet></ROW><ROW><id>13085926</id><snippet>dict</snippet></ROW><ROW><id>13085926</id><snippet>return {'sData': getSContent()}</snippet></ROW><ROW><id>13086032</id><snippet>params</snippet></ROW><ROW><id>13086032</id><snippet>data</snippet></ROW><ROW><id>13086032</id><snippet>requests.patch(url, data=json.dumps(payload), headers=headers)
</snippet></ROW><ROW><id>13086032</id><snippet>data</snippet></ROW><ROW><id>13086032</id><snippet>requests.patch(url, json.dumps(payload), headers=headers)
</snippet></ROW><ROW><id>13086032</id><snippet>.post()</snippet></ROW><ROW><id>13086032</id><snippet>.put()</snippet></ROW><ROW><id>13086032</id><snippet>data</snippet></ROW><ROW><id>13086324</id><snippet>&gt;&gt;&gt; pizzas = Pizza.objects.prefetch_related('toppings')
&gt;&gt;&gt; [list(pizza.toppings.filter(spicy=True)) for pizza in pizzas]
</snippet></ROW><ROW><id>13086324</id><snippet>{% for p in object.projects.all %}
</snippet></ROW><ROW><id>13086341</id><snippet>zip_longest</snippet></ROW><ROW><id>13086341</id><snippet>from itertools import chain, repeat

class OuterZipStopIteration(Exception):
    pass

def outer_zip(*args):
    count = len(args) - 1

    def sentinel(default):
        nonlocal count
        if not count:
            raise OuterZipStopIteration
        count -= 1
        yield default

    iters = [chain(p, sentinel(default), repeat(default)) for p, default in args]
    try:
        while iters:
            yield tuple(map(next, iters))
    except OuterZipStopIteration:
        pass


print(list(outer_zip( ("abcd", '!'), 
                      ("ef", '@'), 
                      (map(int, '345'), '$') )))
</snippet></ROW><ROW><id>13086390</id><snippet>import StringIO

stream = StringIO.StringIO()
stream.write('...√#,›o~ño\Ä¶˚ﬂy™Ω.…Õo)Ú∞L∂W_≤Ï~˛⁄...')

image = wx.ImageFromStream(stream)
</snippet></ROW><ROW><id>13086751</id><snippet>sudo port select python27</snippet></ROW><ROW><id>13087160</id><snippet>[DEFAULT]</snippet></ROW><ROW><id>13087160</id><snippet>[DEFAULT]</snippet></ROW><ROW><id>13087160</id><snippet>sections()</snippet></ROW><ROW><id>13087160</id><snippet>has_section()</snippet></ROW><ROW><id>13087160</id><snippet>DEFAULT</snippet></ROW><ROW><id>13087670</id><snippet>y = odeint(f, theta.ravel(), t, args=(K,))
</snippet></ROW><ROW><id>13087670</id><snippet>def f(theta, t, K):
    global N
    theta = theta.reshape(T, N)
    ...
    return dtheta.ravel()
</snippet></ROW><ROW><id>13087722</id><snippet>sys.setrecursionlimit</snippet></ROW><ROW><id>13087722</id><snippet>count = 0
maxcount = 0

def Foo(n=10):
    global count
    global maxcount
    count = count + 1

    if(count &gt; maxcount):
        maxcount = count
        print maxcount

    if 1&lt;n&lt;=10:
        for i in range(1, 10):
            #### Do_Something
            Foo(n-1)
    count = count - 1

Foo(10)
</snippet></ROW><ROW><id>13087785</id><snippet>sys.exit(1)
</snippet></ROW><ROW><id>13087785</id><snippet>if [ "$?" == "0" ]; then
    logout
fi
</snippet></ROW><ROW><id>13087870</id><snippet>def recursive(data):
   for i,j in enumerate(data):
      if condition:
         recursive(data[i:])
</snippet></ROW><ROW><id>13088124</id><snippet>.pyc</snippet></ROW><ROW><id>13088124</id><snippet>.py</snippet></ROW><ROW><id>13088124</id><snippet>__builtin__.compile</snippet></ROW><ROW><id>13088356</id><snippet>__hash__</snippet></ROW><ROW><id>13088356</id><snippet>tuple</snippet></ROW><ROW><id>13088356</id><snippet>class Cell:
    # each cell will have exactly two values, so no need for __dict__
    __slots__ = ["row", "col"]

    # set up values at construction time using super().__setitem__()
    def __init__(self, row, col):
        super().__setitem__("row", row)
        super().__setitem__("col", col)
        return self

    # a Cell is intended to be immutable, so __setattr__ always raises an error
    def __setattr__(self, name, value):
        if hasattr(self, name):
            raise AttributeError("{!r} object attribute {!r} is read-only"
                                 .format(self.__class__.__name__, name))
        else:
            raise AttributeError("{!r} object has no attribute {!r}"
                                 .format(self.__class__.__name__, name))

    # comparison operators
    def __eq__(self, other):
        return (isinstance(other, Cell) and
                self.row == other.row and
                self.col == other.col)

    def __ne__(self, other):
        return not self == other

    # hash function, with a value borrowed from a tuple
    def __hash__(self):
        return hash((self.row, self.col))
</snippet></ROW><ROW><id>13088356</id><snippet>Cell = collections.namedtuple(["row", "col"])
</snippet></ROW><ROW><id>13088356</id><snippet>__add__</snippet></ROW><ROW><id>13088356</id><snippet>add</snippet></ROW><ROW><id>13088356</id><snippet>super().add()</snippet></ROW><ROW><id>13088356</id><snippet>min(lst)</snippet></ROW><ROW><id>13088356</id><snippet>sorted(lst)[0]</snippet></ROW><ROW><id>13088757</id><snippet>PyObject* module = PyImport_AddModule("__main__");
PyObject* o = PyObject_GetAttrString(module , "__NAME__");
if (PyString_Check(o))
{
    const char* name = PyString_AsString(o);
    // don't delete or modify "name"!
}
Py_DECREF(o);
</snippet></ROW><ROW><id>13088881</id><snippet>auth.settings.table_user</snippet></ROW><ROW><id>13088881</id><snippet>auth.define_tables()</snippet></ROW><ROW><id>13088881</id><snippet>auth.define_tables(username=True, signature=False)
auth_table = auth.settings.table_user
auth_table.username.requires = IS_NOT_IN_DB(db, auth_table.username)
</snippet></ROW><ROW><id>13088881</id><snippet>db</snippet></ROW><ROW><id>13088881</id><snippet>DAL(..., lazy_tables=True)</snippet></ROW><ROW><id>13088881</id><snippet>auth_table = auth.table_user()</snippet></ROW><ROW><id>13088980</id><snippet>XMLSyntaxError</snippet></ROW><ROW><id>13089188</id><snippet>### Makes you owner of /usr/local 
$ sudo chown -R `whoami` /usr/local

### Force uninstalls failed python
$ brew uninstall -f python

### Clear the brew cache
$ rm -rf `brew --cache`

### Cleanup - cleans up old homebrew files
$ brew cleanup

### Prune - removes dead symlinks in homebrew
$ brew prune

### Doctor - runs homebrew checks for common error causing issues
$ brew doctor

########
### Google and follow anything steps to fix brew doctor might come back with
########

### Reinstall python
$ brew install python
</snippet></ROW><ROW><id>13089373</id><snippet>infile = open('path/to/input/file')
outfile = open('path/to/input/file', 'w')

replacements = {'zero':'0', 'temp':'bob', 'garbage':'nothing'}

for line in infile:
    for src, target in replacements.iteritems():
        line = line.replace(src, target)
    outfile.write(line)
infile.close()
outfile.close()
</snippet></ROW><ROW><id>13089475</id><snippet>help</snippet></ROW><ROW><id>13089475</id><snippet>class C: pass
help(C)
</snippet></ROW><ROW><id>13089475</id><snippet>help</snippet></ROW><ROW><id>13089475</id><snippet>help(1)</snippet></ROW><ROW><id>13089475</id><snippet>int</snippet></ROW><ROW><id>13089475</id><snippet>float</snippet></ROW><ROW><id>13089475</id><snippet>help(1)
help(C())
</snippet></ROW><ROW><id>13089475</id><snippet>str</snippet></ROW><ROW><id>13089475</id><snippet>help(str)
</snippet></ROW><ROW><id>13089475</id><snippet>help("str")
</snippet></ROW><ROW><id>13089839</id><snippet>smtp.mailgun.org</snippet></ROW><ROW><id>13089839</id><snippet>localhost</snippet></ROW><ROW><id>13089839</id><snippet>587</snippet></ROW><ROW><id>13089839</id><snippet>25</snippet></ROW><ROW><id>13089839</id><snippet>import requests    

app = Flask(__name__)
app.config['MAILGUN_KEY'] = 'YOUR-KEY-HERE'
app.config['MAILGUN_DOMAIN'] = 'YOUR-MAILGUN-DOMAIN'

@app.route('/', methods=['GET', 'POST'])
def home():
    ...
    send_mail(...)

def send_mail(to_address, from_address, subject, plaintext, html):
    r = requests.\
        post("https://api.mailgun.net/v2/%s/messages" % app.config['MAILGUN_DOMAIN'],
            auth=("api", app.config['MAILGUN_KEY']),
             data={
                 "from": from_address,
                 "to": to_address,
                 "subject": subject,
                 "text": plaintext,
                 "html": html
             }
         )
    return r
</snippet></ROW><ROW><id>13089951</id><snippet>file_path</snippet></ROW><ROW><id>13089951</id><snippet>list_lines</snippet></ROW><ROW><id>13089951</id><snippet>__str__</snippet></ROW><ROW><id>13089951</id><snippet>def __str__(self):
    try:
        s =  'File {0} contains nested comments at lines {1}'.format(self.file_path, ', '.join(self.list_lines))
    except Exception,e:
        print "-----",type(e),e
    return s
</snippet></ROW><ROW><id>13089975</id><snippet>return flask.jsonify(**f)
</snippet></ROW><ROW><id>13090433</id><snippet>loggerName</snippet></ROW><ROW><id>13090433</id><snippet>"fetchers"</snippet></ROW><ROW><id>13090622</id><snippet>class UserProfile(FacebookProfileModel):
    ... 
    profilepic = ...

    def profilepic_or_default(self, default_path="/images/..."):
        if self.profilepic:
            return self.profilepic
        return default_path
</snippet></ROW><ROW><id>13090622</id><snippet>{{ myuser.profilepic_or_default }}
</snippet></ROW><ROW><id>13090839</id><snippet>(.*)\[(\d+(-\d+)?)\]
</snippet></ROW><ROW><id>13090839</id><snippet>?</snippet></ROW><ROW><id>13090839</id><snippet>?</snippet></ROW><ROW><id>13090839</id><snippet>(.*)\[(\d+(-\d+)?)?\]
                  ^here
</snippet></ROW><ROW><id>13090847</id><snippet>print</snippet></ROW><ROW><id>13090847</id><snippet>if __name__ == '__main__':
    httpd = BaseHTTPServer.HTTPServer((HOST_NAME, PORT_NUMBER), DataHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
</snippet></ROW><ROW><id>13090847</id><snippet>class Test(object):

    def run(self):
        print 1
    print 2

# By this time, '2' is already printed!
print 3
t = Test()
t.run()
</snippet></ROW><ROW><id>13090847</id><snippet>2
3
1
</snippet></ROW><ROW><id>13090847</id><snippet>print</snippet></ROW><ROW><id>13090860</id><snippet>cleanWord</snippet></ROW><ROW><id>13090860</id><snippet>def createWordList(line):
    wordList2 =[]
    wordList1 = line.split()
    for word in wordList1:
        cleanWord = ""
        for char in word:
            if char in '!,.?":;0123456789':
                char = ""
            cleanWord += char
        wordList2.append(cleanWord)
    return wordList2
</snippet></ROW><ROW><id>13090860</id><snippet>if word != " "</snippet></ROW><ROW><id>13090860</id><snippet>line.split()</snippet></ROW><ROW><id>13090860</id><snippet>&gt;&gt;&gt; createWordList('please. let! this3 work.')
['please', 'let', 'this', 'work']
</snippet></ROW><ROW><id>13091073</id><snippet>self.action</snippet></ROW><ROW><id>13091073</id><snippet>self.action</snippet></ROW><ROW><id>13091073</id><snippet>DefineAction.action()</snippet></ROW><ROW><id>13091137</id><snippet>removeNode</snippet></ROW><ROW><id>13091137</id><snippet>def removeNode(self, datum):
    """removes node from linked list and returns head node"""
    head = self
    curr_node = self
    if curr_node.data == datum:
        head = curr_node.next
    else:
        while curr_node.next:
            if curr_node.next.data == datum:
                curr_node.next = self.next.next
                break
            curr_node = curr_node.next
    return head
</snippet></ROW><ROW><id>13091137</id><snippet>removeNode</snippet></ROW><ROW><id>13091137</id><snippet>def removeNode(self, datum):
    """removes node from linked list"""
    curr_node = self
    if curr_node.data == datum:
        # steals the the data from the second node
        curr_node.data = curr_node.next.data
        curr_node.next = curr_node.next.next
    else:
        while curr_node.next:
            if curr_node.next.data == datum:
                curr_node.next = curr_node.next.next
                break
            curr_node = curr_node.next
</snippet></ROW><ROW><id>13091137</id><snippet>self</snippet></ROW><ROW><id>13091137</id><snippet>curr_node</snippet></ROW><ROW><id>13091137</id><snippet>self</snippet></ROW><ROW><id>13091167</id><snippet>cumprod</snippet></ROW><ROW><id>13091167</id><snippet>&gt;&gt;&gt; numpy.cumprod([1.0, 1.1, 1.05, 1.2, 1.25])
array([ 1.    ,  1.1   ,  1.155 ,  1.386 ,  1.7325])
</snippet></ROW><ROW><id>13091291</id><snippet>SELECT COUNT(*) FROM table_of_all
    WHERE property1 = 1 AND property2 = ?
</snippet></ROW><ROW><id>13091291</id><snippet>sum</snippet></ROW><ROW><id>13091291</id><snippet>sum(1 for candidate in list_of_all
    if candidate.property1 and candidate.property2 == property2)
</snippet></ROW><ROW><id>13091310</id><snippet>for f in fcn:
    for ix in range(len(a)):
      print f(a[ix], b[ix], c[ix])
</snippet></ROW><ROW><id>13091387</id><snippet>var</snippet></ROW><ROW><id>13091387</id><snippet>var</snippet></ROW><ROW><id>13091387</id><snippet>global var
</snippet></ROW><ROW><id>13091387</id><snippet>var</snippet></ROW><ROW><id>13091387</id><snippet>def func(num):
    print num
    var = 1  &lt;--  # You create a local variable
    if num != 0:
        func(num-1)
</snippet></ROW><ROW><id>13091387</id><snippet>def func(num):
    print num
    var = var &lt;--- # You are using the local variable on RHS without defining it
    if num != 0:
        func(num-1)
</snippet></ROW><ROW><id>13091387</id><snippet>global</snippet></ROW><ROW><id>13091387</id><snippet>local scope</snippet></ROW><ROW><id>13091387</id><snippet>limit</snippet></ROW><ROW><id>13091387</id><snippet>local</snippet></ROW><ROW><id>13091387</id><snippet>local</snippet></ROW><ROW><id>13091387</id><snippet>limit</snippet></ROW><ROW><id>13091532</id><snippet>X.T</snippet></ROW><ROW><id>13091532</id><snippet>X</snippet></ROW><ROW><id>13091532</id><snippet>X</snippet></ROW><ROW><id>13091532</id><snippet>(N,2)</snippet></ROW><ROW><id>13091532</id><snippet>(2,N)</snippet></ROW><ROW><id>13091532</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10).reshape((5,2))
&gt;&gt;&gt; a
array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])
&gt;&gt;&gt; B,C = a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
&gt;&gt;&gt; B,C = a.T
&gt;&gt;&gt; B
array([0, 2, 4, 6, 8])
&gt;&gt;&gt; C
array([1, 3, 5, 7, 9])
</snippet></ROW><ROW><id>13091689</id><snippet>def foo( a, b, c=None ):
    if c is None:
        c = 'en'
    print c
</snippet></ROW><ROW><id>13091689</id><snippet>foo( val1, val2, mydict.get("SomeKey") )
</snippet></ROW><ROW><id>13091689</id><snippet>.get()</snippet></ROW><ROW><id>13091689</id><snippet>None</snippet></ROW><ROW><id>13091689</id><snippet>foo()</snippet></ROW><ROW><id>13091689</id><snippet>maybe_c = {'c': mydict["SomeKey"]} if "SomeKey" in mydict else {}
foo( val1, val2, **maybe_c )
</snippet></ROW><ROW><id>13091966</id><snippet>.scrollToItem</snippet></ROW><ROW><id>13091966</id><snippet>.setCurrentItem</snippet></ROW><ROW><id>13091966</id><snippet>logLoop</snippet></ROW><ROW><id>13091966</id><snippet>QApplication.processEvents()</snippet></ROW><ROW><id>13091966</id><snippet>logLoop</snippet></ROW><ROW><id>13091966</id><snippet>  def logLoop(self):
    for i in range(1000):
        print i
        self.addLog("This is a test","c",True)
        QApplication.processEvents()
</snippet></ROW><ROW><id>13091966</id><snippet>processEvents</snippet></ROW><ROW><id>13091966</id><snippet>QThread</snippet></ROW><ROW><id>13091966</id><snippet>QListWidget</snippet></ROW><ROW><id>13091966</id><snippet>QListWidget</snippet></ROW><ROW><id>13091966</id><snippet>QTableWidget</snippet></ROW><ROW><id>13091966</id><snippet>QTreeWidget</snippet></ROW><ROW><id>13091966</id><snippet>QListView</snippet></ROW><ROW><id>13091966</id><snippet>QTableView</snippet></ROW><ROW><id>13091966</id><snippet>QTreeView</snippet></ROW><ROW><id>13091992</id><snippet>__init__.py</snippet></ROW><ROW><id>13091992</id><snippet>import foobar.foo as f, foobar.bar as b
</snippet></ROW><ROW><id>13091992</id><snippet>import sys

import foo, bar

main = sys.modules["__main__"]
main.f = foo
main.b = bar
</snippet></ROW><ROW><id>13091992</id><snippet>f</snippet></ROW><ROW><id>13091992</id><snippet>from module import *</snippet></ROW><ROW><id>13091992</id><snippet>foobar</snippet></ROW><ROW><id>13091992</id><snippet>__init__.py</snippet></ROW><ROW><id>13091992</id><snippet>from . import foo as f
from . import bar as b
</snippet></ROW><ROW><id>13091992</id><snippet>from foobar import *
# now you can use f and b
</snippet></ROW><ROW><id>13091992</id><snippet>__init__.py</snippet></ROW><ROW><id>13092080</id><snippet>s!=0</snippet></ROW><ROW><id>13092080</id><snippet>s = len(x) +- sqrt(2*len(x))
</snippet></ROW><ROW><id>13092088</id><snippet>$ python
Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import igraph
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named igraph
&gt;&gt;&gt;

$ python2.6
Python 2.6.7 (r267:88850, Jun 20 2012, 16:23:38) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import igraph
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13092088</id><snippet>python</snippet></ROW><ROW><id>13092088</id><snippet>python2.6</snippet></ROW><ROW><id>13092177</id><snippet>*[local-name() = 'category']
</snippet></ROW><ROW><id>13092177</id><snippet>Or, if you want to be more precise</snippet></ROW><ROW><id>13092177</id><snippet>*[local-name() = 'category' and namespace-uri() = 'http://www.w3.org/2005/Atom']
</snippet></ROW><ROW><id>13092177</id><snippet>def:category
</snippet></ROW><ROW><id>13092305</id><snippet>enumerate</snippet></ROW><ROW><id>13092305</id><snippet>for idx, val_at_idx in enumerate(aList):
  # idx is the 0-indexed position, val_at_idx is the actual value.
</snippet></ROW><ROW><id>13092305</id><snippet>for idxOffBy1, val_at_wrong_idx in enumerate(aList[1:]):
  # idx here will be 0, but the value will be be from position 1 in the original list.
</snippet></ROW><ROW><id>13092317</id><snippet>range</snippet></ROW><ROW><id>13092317</id><snippet>list</snippet></ROW><ROW><id>13092317</id><snippet>next</snippet></ROW><ROW><id>13092317</id><snippet>iter</snippet></ROW><ROW><id>13092317</id><snippet>range</snippet></ROW><ROW><id>13092317</id><snippet>range</snippet></ROW><ROW><id>13092317</id><snippet>start</snippet></ROW><ROW><id>13092317</id><snippet>stop</snippet></ROW><ROW><id>13092317</id><snippet>step</snippet></ROW><ROW><id>13092317</id><snippet>count</snippet></ROW><ROW><id>13092317</id><snippet>index</snippet></ROW><ROW><id>13092317</id><snippet>in</snippet></ROW><ROW><id>13092317</id><snippet>len</snippet></ROW><ROW><id>13092317</id><snippet>__getitem__</snippet></ROW><ROW><id>13092317</id><snippet>range</snippet></ROW><ROW><id>13092317</id><snippet>&gt;&gt;&gt; myrange = range(1, 21, 2)
&gt;&gt;&gt; myrange.start
1
&gt;&gt;&gt; myrange.step
2
&gt;&gt;&gt; myrange.index(17)
8
&gt;&gt;&gt; myrange.index(18)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: 18 is not in range
&gt;&gt;&gt; it = iter(myrange)
&gt;&gt;&gt; it
&lt;range_iterator object at 0x7f504a9be960&gt;
&gt;&gt;&gt; next(it)
1
&gt;&gt;&gt; next(it)
3
&gt;&gt;&gt; next(it)
5
</snippet></ROW><ROW><id>13092454</id><snippet>class Polygon( QtGui.QGraphicsItem ):

    def __init__(self, parent):
        self.parent = parent
        # ...
</snippet></ROW><ROW><id>13092454</id><snippet>foo = Polygon(your_widget)</snippet></ROW><ROW><id>13092454</id><snippet>self.parent.saveFile(...)</snippet></ROW><ROW><id>13092467</id><snippet>itertools.cycle</snippet></ROW><ROW><id>13092467</id><snippet>import itertools
marker = itertools.cycle((',', '+', '.', 'o', '*')) 
for n in y:
    plt.plot(x,n, marker = marker.next(), linestyle='')
</snippet></ROW><ROW><id>13092467</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import itertools

x = np.linspace(0,2,10)
y = np.sin(x)

marker = itertools.cycle((',', '+', '.', 'o', '*')) 

fig = plt.figure()
ax = fig.add_subplot(111)

for q,p in zip(x,y):
    ax.plot(q,p, linestyle = '', marker=marker.next())

plt.show()
</snippet></ROW><ROW><id>13092591</id><snippet>from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

scale = 1
m = Basemap(width=450000*scale,height=150000,
        resolution='i',projection='stere',
        lat_ts=65.4,lat_0=60.4,lon_0=1.91)

parallels = [60]
ret = m.drawparallels(parallels)
plt.show()
</snippet></ROW><ROW><id>13092591</id><snippet>drawparallels</snippet></ROW><ROW><id>13092591</id><snippet>l = ret[60][0][0]
x, y = l.get_data()
</snippet></ROW><ROW><id>13092591</id><snippet>plt.plot(x, y, '+')
plt.show()
</snippet></ROW><ROW><id>13092591</id><snippet>plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>13092591</id><snippet>python -m pdb small_example.py</snippet></ROW><ROW><id>13092591</id><snippet>jump</snippet></ROW><ROW><id>13092591</id><snippet>scale&gt;=1.0485</snippet></ROW><ROW><id>13092755</id><snippet>sudo</snippet></ROW><ROW><id>13092755</id><snippet>workon</snippet></ROW><ROW><id>13092755</id><snippet>workon rhino_env</snippet></ROW><ROW><id>13092755</id><snippet>env.user = 'root'

@roles('web')
def deploy():
    dev_path = '/srv/web/prod'
    app_path = '/srv/web/prod/rhino'
    workon = 'workon rhino_env; '
    with settings(warn_only=True):
        run('kill -9 `cat /srv/web/run/rhino/rhino.pid`')
        puts('Stopped rhino...')
    with cd(app_path):
        sudo('git reset --hard HEAD', user='web')
        puts('Discarded all untracked and modified files')
        sudo('git checkout master', user='web')
        sudo('git pull origin master', user='web')
        users = run('users')
        puts('Output from `users` command: %s' % users)

        with prefix(workon):
            sudo('build_assets -m build', user='web')
    with cd(dev_path):
        run('chown -R web:ebalu rhino')

    with cd(app_path):
        sudo('./run', user='web')

    pid = run('cat /srv/web/run/rhino/rhino.pid')
    puts('Rhino started again with pid: %s.' % pid)
</snippet></ROW><ROW><id>13093147</id><snippet>take</snippet></ROW><ROW><id>13093147</id><snippet>take</snippet></ROW><ROW><id>13093147</id><snippet>a = np.arange(16).reshape((8,2))
b = [2, 6, 7]
mask = np.ones(len(a), dtype=bool)
mask[b,] = False
x, y = a[b], a[mask] # instead of a[b] you could also do a[~mask]
print x
array([[ 4,  5],
       [12, 13],
       [14, 15]])
print y
array([[ 0,  1],
       [ 2,  3],
       [ 6,  7],
       [ 8,  9],
       [10, 11]])
</snippet></ROW><ROW><id>13093147</id><snippet>b</snippet></ROW><ROW><id>13093147</id><snippet>a</snippet></ROW><ROW><id>13093147</id><snippet>np.split</snippet></ROW><ROW><id>13093147</id><snippet>&gt;&gt;&gt; a = np.arange(16).reshape((8,2))
&gt;&gt;&gt; b = [2, 6]
&gt;&gt;&gt; print np.split(a, b, axis=0) # plus some extra formatting
[array([[0, 1],
       [2, 3]]),
 array([[ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11]]),
 array([[12, 13],
       [14, 15]])]
</snippet></ROW><ROW><id>13093147</id><snippet>0:b[0]</snippet></ROW><ROW><id>13093147</id><snippet>b[0]:</snippet></ROW><ROW><id>13093147</id><snippet>reshape</snippet></ROW><ROW><id>13093147</id><snippet>.copy</snippet></ROW><ROW><id>13093451</id><snippet>from nltk.tokenize import sent_tokenize</snippet></ROW><ROW><id>13093451</id><snippet>sent_tokenize("Hello SF Python. This is NLTK.")
["Hello SF Python.", "This is NLTK."]
</snippet></ROW><ROW><id>13093451</id><snippet>for sentence in my_list:
  # test if this sentence contains the words you want
  # using all() method 
</snippet></ROW><ROW><id>13093648</id><snippet>export PATH=/Library/Frameworks/Python.framework/Versions/Current/bin:$PATH
</snippet></ROW><ROW><id>13093714</id><snippet>import lxml.html as LH
doc = LH.parse('http://somesite')
</snippet></ROW><ROW><id>13093714</id><snippet>lxml.html</snippet></ROW><ROW><id>13093714</id><snippet>import lxml</snippet></ROW><ROW><id>13093714</id><snippet>html</snippet></ROW><ROW><id>13093714</id><snippet>lxml</snippet></ROW><ROW><id>13093714</id><snippet>import lxml.html</snippet></ROW><ROW><id>13093714</id><snippet>import lxml.html as LH</snippet></ROW><ROW><id>13093714</id><snippet>html</snippet></ROW><ROW><id>13093714</id><snippet>LH</snippet></ROW><ROW><id>13093714</id><snippet>LH.parse</snippet></ROW><ROW><id>13093714</id><snippet>lxml</snippet></ROW><ROW><id>13093714</id><snippet>lxml.html</snippet></ROW><ROW><id>13093714</id><snippet>In [16]: import lxml

In [17]: lxml
Out[17]: &lt;module 'lxml' from '/usr/lib/python2.7/dist-packages/lxml/__init__.pyc'&gt;
</snippet></ROW><ROW><id>13093714</id><snippet>lxml</snippet></ROW><ROW><id>13093714</id><snippet>__init__.py</snippet></ROW><ROW><id>13093714</id><snippet>__init__.py</snippet></ROW><ROW><id>13093714</id><snippet>import linalg
import fft
import polynomial
import random
import ctypeslib
import ma
</snippet></ROW><ROW><id>13093714</id><snippet>numpy</snippet></ROW><ROW><id>13093714</id><snippet>import numpy</snippet></ROW><ROW><id>13093714</id><snippet>numpy.linalg</snippet></ROW><ROW><id>13093714</id><snippet>numpy.fft</snippet></ROW><ROW><id>13093911</id><snippet>str.decode("utf-8")
</snippet></ROW><ROW><id>13093911</id><snippet>replace</snippet></ROW><ROW><id>13093911</id><snippet>str.decode("utf-8").replace(u"\u2022", "*")
</snippet></ROW><ROW><id>13093911</id><snippet>str.decode("utf-8").replace(u"\u2022", "*").encode("utf-8")
</snippet></ROW><ROW><id>13093911</id><snippet>str</snippet></ROW><ROW><id>13093911</id><snippet>str</snippet></ROW><ROW><id>13093914</id><snippet>glob("filename_???")
</snippet></ROW><ROW><id>13094002</id><snippet>re.sub()</snippet></ROW><ROW><id>13094002</id><snippet>import re

text = "Hello, this is a test. Let's tag @[William Maness], and then tag @[Another name], along with @[More Name]."

def replace(match):
    text = match.group(1)  # Extract the first capturing group

    return '&lt;a href="/search/{0}"&gt;{1}&lt;/a&gt;'.format(  # Format it into a link
        text.lower().replace(' ', '-'),
        text
    )

re.sub(r'@\[(.*?)\]', replace, text)
</snippet></ROW><ROW><id>13094002</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'@\[(.*?)\]', (lambda m: (lambda x: '&lt;a href="/search/{0}"&gt;{1}&lt;/a&gt;'.format(x.lower().replace(' ', '-'), x))(m.group(1))), text)
'Hello, this is a test. Let\'s tag &lt;a href="/search/william-maness"&gt;William Maness&lt;/a&gt;, and then tag &lt;a href="/search/another-name"&gt;Another name&lt;/a&gt;, along with &lt;a href="/search/more-name"&gt;More Name&lt;/a&gt;.'
</snippet></ROW><ROW><id>13094096</id><snippet>def my_test(self):
    import __builtin__
    from mocker import Mocker, KWARGS, ARGS

    mymocker = mocker.mock()
    mymocker.my_function(ARGS, KWARGS)
    mocker.throw(MyException)

    def mysuper(*args, **kwargs):
        if args and issubclass(MyClass, args[0]):
            return mymocker
        return original_super(*args, **kwargs)

    __builtin__.original_super = super
    __builtin__.super = mysuper

    with mocker:
        MyClass.myfunc()
</snippet></ROW><ROW><id>13094096</id><snippet>super</snippet></ROW><ROW><id>13094096</id><snippet>super</snippet></ROW><ROW><id>13094331</id><snippet>{% block content %}
    {% filter upper %}
        Here is some content that will be rendered in upper case.
    {% endfilter %}
{% endblock %}
</snippet></ROW><ROW><id>13094445</id><snippet>__next__</snippet></ROW><ROW><id>13094445</id><snippet>next</snippet></ROW><ROW><id>13094465</id><snippet>pip install django-html5</snippet></ROW><ROW><id>13094465</id><snippet>import html5.forms.widgets as html5_widgets</snippet></ROW><ROW><id>13094465</id><snippet>widgets['thedate'] = html5_widgets.DateInput</snippet></ROW><ROW><id>13094465</id><snippet>from django import forms

class Html5DateInput(forms.DateInput):
    input_type = 'date'
</snippet></ROW><ROW><id>13094465</id><snippet>django/forms/widgets.py</snippet></ROW><ROW><id>13094569</id><snippet>import simplejson

class ml(object):

    def POST(self,data=None):
        # turn the JSON string into a Python data structure
        d = simplejson.loads(data)
        # do stuff
        results = alter_data(d)
        web.header('Content-Type','application/json')
        # send JSON back to the client
        return simplejson.dumps(results)
</snippet></ROW><ROW><id>13094569</id><snippet>function render(data,textStatus) {
    d3
      .select('svg')
      .selectAll('circle')
      .data(data)
      .enter()
      .append('circle')
      .on('click',function() {
          $.getJSON(
              'your_webservice_url',
              // POST an updated data structure to your service
              { 'data' : alter_data(data) },
              // Call the render method again when new data is received
              render);
       });
}
</snippet></ROW><ROW><id>13094569</id><snippet>enter</snippet></ROW><ROW><id>13094569</id><snippet>exit</snippet></ROW><ROW><id>13094569</id><snippet>on</snippet></ROW><ROW><id>13094648</id><snippet>def printPattern(n):
    if n &lt;= 0:
        return ''
    return '*' + printPattern(n-1) + '!'
</snippet></ROW><ROW><id>13094648</id><snippet>def printPattern(n):
    return '*' + printPattern(n-1) + '!' if n &gt; 0 else ''
</snippet></ROW><ROW><id>13094648</id><snippet>print printPattern(5)
&gt; *****!!!!!
</snippet></ROW><ROW><id>13094939</id><snippet>&gt;&gt;&gt; my_dashes = ['_', '_', '_', '_']
&gt;&gt;&gt; print ''.join(my_dashes)
____
&gt;&gt;&gt; print ' '.join(my_dashes)
_ _ _ _
</snippet></ROW><ROW><id>13095004</id><snippet>xrange(1, n)
</snippet></ROW><ROW><id>13095004</id><snippet>1 ... n-1</snippet></ROW><ROW><id>13095004</id><snippet>1 ... n</snippet></ROW><ROW><id>13095004</id><snippet>xrange(1, n+1)</snippet></ROW><ROW><id>13095004</id><snippet>a != b</snippet></ROW><ROW><id>13095085</id><snippet>collections.Counter</snippet></ROW><ROW><id>13095085</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; 
&gt;&gt;&gt; Counter(map(tuple, multi)).most_common()
[((1, 2), 2), ((1, 2, 3), 2), ((1, 2, 3, 4), 1)]
</snippet></ROW><ROW><id>13095085</id><snippet>&gt;&gt;&gt; Counter(map(tuple, multi)).most_common()[::-1]
[((1, 2, 3, 4), 1), ((1, 2, 3), 2), ((1, 2), 2)]
</snippet></ROW><ROW><id>13095208</id><snippet>QMenuBar</snippet></ROW><ROW><id>13095208</id><snippet>class Window(QtGui.QMainWindow):

    def __init__(self):
        super(Window, self).__init__()
        self.resize(640,480)

        menuBar = self.menuBar()
        menu = menuBar.addMenu("&amp;File")
        action = menu.addAction("&amp;Save", self.doAction)
        action.setShortcuts(QtGui.QKeySequence.Save)

        self.view = QtGui.QTableWidget(5,5)
        self.setCentralWidget(self.view)

    def doAction(self):
        print "Save"
</snippet></ROW><ROW><id>13095309</id><snippet>try</snippet></ROW><ROW><id>13095309</id><snippet>letterList</snippet></ROW><ROW><id>13095309</id><snippet>string.lowercase</snippet></ROW><ROW><id>13095309</id><snippet>import string

while count &lt; 6 and win:
   guess = input("Please enter the letter you guess: ")
   if guess:
      guess = guess.lower()
      if guess not in string.lowercase:
         print("You need to input a single alphabetic character!")
         continue
      lettersCorrect += 1
</snippet></ROW><ROW><id>13095334</id><snippet>docs = []
document = []
for line in file2:
    line = line.strip()
    if line == "&lt;NEW DOCUMENT&gt;":
        # start a new document
        document = []
        docs.append(document)
    else:
        # append to the current one
        document.append(line)

# convert lists of lines into a string
docs = ['\n'.join(document) for document in docs]
</snippet></ROW><ROW><id>13095421</id><snippet>data = [[1,1,1],[1,1,2],[1,2,1],[1,2,2],[2,1,1],[2,1,2],[2,2,1],[2,2,2]]

data = [x for x in data if x[:2] != [1,1]]
print data

data = [x for x in data if ((x[0],x[1]) != (1,1))]   
print data
</snippet></ROW><ROW><id>13095555</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>13095555</id><snippet>&gt;&gt;&gt; q = u'\U00010000'
&gt;&gt;&gt; len(q)
2
&gt;&gt;&gt; q[0]
u'\ud800'
&gt;&gt;&gt; q[1]
u'\udc00'
&gt;&gt;&gt; q
u'\U00010000'
</snippet></ROW><ROW><id>13095595</id><snippet>Category</snippet></ROW><ROW><id>13095595</id><snippet>type</snippet></ROW><ROW><id>13095595</id><snippet>Category</snippet></ROW><ROW><id>13095595</id><snippet>category = Category.objects.get(pk=1)
</snippet></ROW><ROW><id>13095595</id><snippet>new_venue = Venue(category=category, other_args)
new_venue.save()
</snippet></ROW><ROW><id>13095843</id><snippet>string_builder</snippet></ROW><ROW><id>13095843</id><snippet>from functools import wraps

def string_builder(func):
    @wraps(func)
    def wrapped(*args, **kwargs):
        return ''.join(func(*args, **kwargs))
    return wrapped
</snippet></ROW><ROW><id>13095843</id><snippet>string_builder</snippet></ROW><ROW><id>13095843</id><snippet>&gt;&gt;&gt; build_insert_statement('foo', ['bar'], ['1'], 'baz')
'insert into foo ( bar ) values ( 1 ) where baz;'
</snippet></ROW><ROW><id>13095843</id><snippet>functools.wraps</snippet></ROW><ROW><id>13095843</id><snippet>build_insert_statement.__name__</snippet></ROW><ROW><id>13095843</id><snippet>''.join()</snippet></ROW><ROW><id>13095843</id><snippet>def build_insert_statement(table_name, col_names, values, where_clause):
    return ''.join(['insert into ',
                    table_name,
                    ' ( ',
                    ', '.join(col_names),
                    ' ) values ( ',
                    ', '.join(values),
                    ' ) where ',
                    where_clause,
                    ';'])
</snippet></ROW><ROW><id>13095843</id><snippet>+</snippet></ROW><ROW><id>13095843</id><snippet>def build_insert_statement(table_name, col_names, values, where_clause):
    return ('insert into ' +
            table_name +
            ' ( ' +
            ', '.join(col_names) +
            ' ) values ( ' +
            ', '.join(values) +
            ' ) where ' +
            where_clause +
            ';')
</snippet></ROW><ROW><id>13096073</id><snippet>{% for thing in thing_list %}
    ...
    &lt;div id='vote'&gt;&lt;a href='{% url "thing_rating" object_id=thing.id score=5 %}'&gt;Up&lt;/a&gt;&lt;/div&gt;
    ...
{% endfor %}
</snippet></ROW><ROW><id>13096164</id><snippet>self</snippet></ROW><ROW><id>13096164</id><snippet>self</snippet></ROW><ROW><id>13096164</id><snippet>self</snippet></ROW><ROW><id>13096164</id><snippet>obj.method(param)</snippet></ROW><ROW><id>13096164</id><snippet>ObjType.method(obj, param)</snippet></ROW><ROW><id>13096214</id><snippet>json.loads</snippet></ROW><ROW><id>13096214</id><snippet>b</snippet></ROW><ROW><id>13096214</id><snippet>json.dumps</snippet></ROW><ROW><id>13096214</id><snippet>temp = json.loads(js)
temp['b'] = None
js = json.dumps(temp)
jsonpickle.decode(js)
</snippet></ROW><ROW><id>13096301</id><snippet>vectorize</snippet></ROW><ROW><id>13096301</id><snippet>The data type of the output of `vectorized` is determined by calling
the function with the first element of the input.  This can be avoided
by specifying the `otypes` argument.
</snippet></ROW><ROW><id>13096301</id><snippet>        theout = self.thefunc(*newargs)
</snippet></ROW><ROW><id>13096301</id><snippet>thefunc</snippet></ROW><ROW><id>13096301</id><snippet>99</snippet></ROW><ROW><id>13096301</id><snippet>import numpy as np
idxLsts = np.array([[1, 2], [0,2,4]], dtype = object)
idx = 99
f = np.vectorize(lambda x: x.append(idx))
f(idxLsts)
print(idxLsts)
</snippet></ROW><ROW><id>13096301</id><snippet>[[1, 2, 99, 99] [0, 2, 4, 99]]
</snippet></ROW><ROW><id>13096301</id><snippet>np.frompyfunc</snippet></ROW><ROW><id>13096301</id><snippet>np.vectorize</snippet></ROW><ROW><id>13096301</id><snippet>import numpy as np
idxLsts = np.array([[1, 2], [0,2,4]], dtype = object)
idx = 99
f = np.frompyfunc(lambda x: x.append(idx), 1, 1)
f(idxLsts)
print(idxLsts)
</snippet></ROW><ROW><id>13096301</id><snippet>[[1, 2, 99] [0, 2, 4, 99]]
</snippet></ROW><ROW><id>13096495</id><snippet>print (datetime.datetime(2012,1,1) + datetime.timedelta(days=299)).month
</snippet></ROW><ROW><id>13096495</id><snippet>def get_month_day(year, day, one_based=False):
    if one_based:  # if Jan 1st is 1 instead of 0
        day -= 1
    dt = datetime.datetime(year, 1, 1) + datetime.timedelta(days=day)
    return dt.month, dt.day

&gt;&gt;&gt; get_month_day(2012, 299)
(10, 26)
</snippet></ROW><ROW><id>13096597</id><snippet>urllib.parse_qs</snippet></ROW><ROW><id>13096597</id><snippet>import urllib2
import urlparse

url = 'http://www.tip.it/runescape/gec/price_graph.php?avg=1&amp;start=1327715574&amp;mainitem=10350&amp;item=10350'
response = urllib2.urlopen(url)
content = response.read()
params = urlparse.parse_qs(content)
print(params['values'])
</snippet></ROW><ROW><id>13096669</id><snippet>for j in range(1,10,1):
    exec('var_%d = j'%j)
</snippet></ROW><ROW><id>13096669</id><snippet>variable1</snippet></ROW><ROW><id>13096669</id><snippet>variable2</snippet></ROW><ROW><id>13096669</id><snippet>variable1 += 1
variable2 += 1
variable3 += 1
... etc
</snippet></ROW><ROW><id>13096669</id><snippet>for i in range(1,10,1):
    x[i] += 1
</snippet></ROW><ROW><id>13096669</id><snippet>func(variable1, variable2, variable3, ...)
</snippet></ROW><ROW><id>13096669</id><snippet>func(**x)
</snippet></ROW><ROW><id>13096744</id><snippet>vector</snippet></ROW><ROW><id>13096744</id><snippet>x</snippet></ROW><ROW><id>13096744</id><snippet>y</snippet></ROW><ROW><id>13096744</id><snippet>z</snippet></ROW><ROW><id>13096744</id><snippet>    class vPoint:
        def __init__(self, vector):
            self.vector = vector

    class vector:
        def __init__(self, x, y, z):
            self.x = #the x value
            self.y = #the y value
            self.z = #the z value
</snippet></ROW><ROW><id>13096744</id><snippet>x</snippet></ROW><ROW><id>13096744</id><snippet>vPoint.vector.x</snippet></ROW><ROW><id>13097010</id><snippet>print</snippet></ROW><ROW><id>13097010</id><snippet>print(soup.prettify())
</snippet></ROW><ROW><id>13097010</id><snippet>bs4</snippet></ROW><ROW><id>13097010</id><snippet>beautifulsoup4==4.1.3</snippet></ROW><ROW><id>13097067</id><snippet>/etc/init.d</snippet></ROW><ROW><id>13097067</id><snippet>/etc/inittab</snippet></ROW><ROW><id>13097067</id><snippet>inittab(5)</snippet></ROW><ROW><id>13097113</id><snippet>float</snippet></ROW><ROW><id>13097113</id><snippet>int</snippet></ROW><ROW><id>13097113</id><snippet>float</snippet></ROW><ROW><id>13097113</id><snippet>&gt;&gt;&gt; print('{:g}'.format(3.14))
3.14
&gt;&gt;&gt; print('{:g}'.format(3.0))
3
</snippet></ROW><ROW><id>13097113</id><snippet>print("Y = {:g}X - {}.".format(m, b))
</snippet></ROW><ROW><id>13097147</id><snippet>sl = sorted(data, key=lambda l:l[1])
</snippet></ROW><ROW><id>13097147</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13097147</id><snippet>from itertools import groupby

groupby(sl, key=lambda l:l[1])
</snippet></ROW><ROW><id>13097147</id><snippet>for i, g in groupby(sl, key=lambda l:l[1]):
    print str(i) + ":"
    for x, y, z in g:
        print x, y, z

39.9781227112:
75.906791687 39.9781227112 -15.0
57.8828468323:
58.9067649841 57.8828468323 -50.0
58.9067649841 57.8828468323 -15.0
58.3114356995:
77.5257720947 58.3114356995 -15.0
62.7399787903:
63.3353118896 62.7399787903 -50.0
62.8352203369:
73.3353118896 62.8352203369 -50.0
</snippet></ROW><ROW><id>13097233</id><snippet>groupby</snippet></ROW><ROW><id>13097233</id><snippet>sorted_list = sorted(my_list, key=lambda x: x.lives_in)
</snippet></ROW><ROW><id>13097233</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13097233</id><snippet>from itertools import groupby

groupby(sorted_list, key=lambda x: x.lives_in)
result = [(key, list(group)) \
        for key, group in groupby(sorted_list, key=lambda x: x.lives_in)]
</snippet></ROW><ROW><id>13097713</id><snippet>from . import someOtherModule
from . import SomeClass
</snippet></ROW><ROW><id>13097793</id><snippet>game_mechanics</snippet></ROW><ROW><id>13097793</id><snippet>enemies</snippet></ROW><ROW><id>13097793</id><snippet>game_mechanics</snippet></ROW><ROW><id>13097793</id><snippet>import game_mechanics</snippet></ROW><ROW><id>13097793</id><snippet>game_mechanics</snippet></ROW><ROW><id>13097793</id><snippet>enemies</snippet></ROW><ROW><id>13097793</id><snippet># game_mechanics.py
class game_object(object):
   pass

# enemies.py
from game_mechanics import game_object
class special_object(game_object):
   pass
</snippet></ROW><ROW><id>13097832</id><snippet>kwargs</snippet></ROW><ROW><id>13097832</id><snippet>def function(*args, **kwargs):
    values = {}
    for k in kwargs:
        if kwargs[k] is not None:
            values[k] = kwargs[k]
    if not values:
        raise Exception("No values provided")
    return values

&gt;&gt;&gt; function(varone=None, vartwo="fish", varthree=None)
{'vartwo': 'fish'}
</snippet></ROW><ROW><id>13097832</id><snippet>var1</snippet></ROW><ROW><id>13097832</id><snippet>varone</snippet></ROW><ROW><id>13097832</id><snippet>&gt;&gt;&gt; function(var1=None, var2="fish", var3=None)
{'var2': 'fish'}
</snippet></ROW><ROW><id>13097832</id><snippet>def function(**kwargs):
    values = dict([i for i in kwargs.iteritems() if i[1] != None])
    if not values:
        raise Exception("foo")
    return values
</snippet></ROW><ROW><id>13097949</id><snippet>import mailbox
mails = mailbox.mbox(filename.mbox)
for message in mails: print message['subject']
</snippet></ROW><ROW><id>13098213</id><snippet>In [17]: results = {}

In [18]: for k, v in names.iteritems():
    results[k] = {v: dates.setdefault(k, '')}
   ....:
   ....:

In [20]: results
Out[20]: 
{'George': {'march': '21/02'},
 'Mary': {'february': '2/02'},
 'Peter': {'may': ''},
 'Steven': {'april': '14/03'},
 'Will': {'january': '7/01'}}
</snippet></ROW><ROW><id>13098213</id><snippet>month</snippet></ROW><ROW><id>13098213</id><snippet>day</snippet></ROW><ROW><id>13098213</id><snippet>In [28]: for k, v in names.iteritems():
    results[k] = {'month': v, 'day': dates.setdefault(k, '')}
   ....:
   ....:

In [30]: results
Out[30]:
{'George': {'day': '21/02', 'month': 'march'},
 'Mary': {'day': '2/02', 'month': 'february'},
 'Peter': {'day': '', 'month': 'may'},
 'Steven': {'day': '14/03', 'month': 'april'},
 'Will': {'day': '7/01', 'month': 'january'}}
</snippet></ROW><ROW><id>13098213</id><snippet>day</snippet></ROW><ROW><id>13098213</id><snippet>In [8]: results = {}

In [9]: for k, v in names.iteritems():
   ...:     results[k] = {'month': v}
   ...:     if dates.has_key(k):
   ...:         results[k]['day'] = dates[k]
   ...:
   ...:

In [10]: results
Out[10]:
{'George': {'day': '21/03', 'month': 'march'},
 'Mary': {'day': '2/02', 'month': 'february'},
 'Peter': {'month': 'may'},
 'Steven': {'day': '14/03', 'month': 'april'},
 'Will': {'day': '7/01', 'month': 'january'}}
</snippet></ROW><ROW><id>13098213</id><snippet>defaultdict</snippet></ROW><ROW><id>13098213</id><snippet>In [1]: from collections import defaultdict

In [2]: names = {'Will': 'january', 'Mary': 'february', 'George': 'march', 'Steven': 'april', 'Peter': 'may'}

In [3]: dates = {'Will': '7/01', 'George': '21/03', 'Steven': '14/03', 'Mary': '2/02', 'Marat': '27/03'}

In [4]: results = defaultdict(dict)

In [5]: for name in set(names.keys() + dates.keys()):
   ...:     if name in names:
   ...:         results[name]['month'] = names[name]
   ...:     if name in dates:
   ...:         results[name]['day'] = dates[name]
   ...:
   ...:

In [6]: for k, v in results.iteritems():
   ...:     print k, v
   ...:
   ...:
George {'day': '21/03', 'month': 'march'}
Will {'day': '7/01', 'month': 'january'}
Marat {'day': '27/03'}
Steven {'day': '14/03', 'month': 'april'}
Peter {'month': 'may'}
Mary {'day': '2/02', 'month': 'february'}
</snippet></ROW><ROW><id>13098518</id><snippet>$("#ajaxP").load("/ajax", ...</snippet></ROW><ROW><id>13098518</id><snippet>GET</snippet></ROW><ROW><id>13098518</id><snippet>POST</snippet></ROW><ROW><id>13098518</id><snippet>/ajax</snippet></ROW><ROW><id>13098518</id><snippet>#ajaxP</snippet></ROW><ROW><id>13098518</id><snippet>method='POST'</snippet></ROW><ROW><id>13098518</id><snippet>method='GET'</snippet></ROW><ROW><id>13098518</id><snippet>$(document).ready(function() {
    $('form').submit(function(e) {
        $.ajax({
            type: 'POST',
            url: '/ajax',
            data: $(this).serialize(),
            success: function(response) {
                $('#ajaxP').html(response);
            }
        });

        e.preventDefault();
    });
});​
</snippet></ROW><ROW><id>13098539</id><snippet>print</snippet></ROW><ROW><id>13098539</id><snippet>print</snippet></ROW><ROW><id>13098558</id><snippet>n ^ sum(2**i for i in range(0, len(bin(n))-2, 2))
</snippet></ROW><ROW><id>13098558</id><snippet>-1&lt;&lt;L</snippet></ROW><ROW><id>13098558</id><snippet>(-1&lt;&lt;8)&amp;255</snippet></ROW><ROW><id>13098558</id><snippet>(-1&lt;&lt;8)&amp;256</snippet></ROW><ROW><id>13098558</id><snippet>(-1&lt;&lt;L)&amp;v</snippet></ROW><ROW><id>13098558</id><snippet>v&amp;(-1&lt;&lt;L) == 0</snippet></ROW><ROW><id>13098558</id><snippet>v&amp;(-1&lt;&lt;R) &gt; 0</snippet></ROW><ROW><id>13098558</id><snippet>if L &amp; 1: k = k&lt;&lt;1</snippet></ROW><ROW><id>13098558</id><snippet>k &lt;&lt;= L&amp;1</snippet></ROW><ROW><id>13098558</id><snippet>if L &amp; 1: k = k&lt;&lt;1</snippet></ROW><ROW><id>13098558</id><snippet>(1&lt;&lt;L)-1</snippet></ROW><ROW><id>13098558</id><snippet>1&lt;&lt;L</snippet></ROW><ROW><id>13098558</id><snippet>def clearaltbits(v):
    if not v:
        return 0
    L, R = 16, 0
    # Find an upper bound on # bits
    while (-1&lt;&lt;L) &amp; v:
        R, L = L, 2*L
    # Binary search for top bit #
    while not (-1&lt;&lt;L) &amp; v:
        m = (L+R)/2
        if (-1&lt;&lt;m) &amp; v:
            R = m
        else:
            L = m
        if L==R+1: break
    print bin(v),'has',len(bin(v))-2,'bits.'
    # Make big-enough alternate-bits mask
    k, b = 0b0101010101010101, 16
    while not (-1&lt;&lt;L) &amp; k:
        k = (k&lt;&lt;b)|k
        b += b
    if L &amp; 1:
        k = k&lt;&lt;1
    k = k &amp; ((1&lt;&lt;L)-1)
    print bin(k^v),'fin'


clearaltbits(3**3)
clearaltbits(5**6)
clearaltbits(7**17)
clearaltbits(13**19)
</snippet></ROW><ROW><id>13098558</id><snippet>0b11011 has 5 bits.
0b10001 fin

0b11110100001001 has 14 bits.
0b10100001011100 fin

0b110100111001001110000011001001100110111010000111 has 48 bits.
0b100001101100011011010110011100110011101111010010 fin

0b10011110100000000111000001101101000001011000100011000010010000111010101 has 71 bits.
0b11001011110101010010010100111000010100001101110110010111000101101111111 fin
</snippet></ROW><ROW><id>13098562</id><snippet>port info macvim</snippet></ROW><ROW><id>13098562</id><snippet>MacVim @7.3.snapshot65, Revision 1 (editors)
Variants:             big, cscope, huge, perl, python, python25, python26,
                      python27, python31, python32, ruby, tcl, universal, xim

Description:          MacVim is a port of the text editor Vim to Mac OS X that
                      is meant to look better and integrate more seamlessly with
                      the Mac than vim-app.
Homepage:             http://code.google.com/p/macvim
...
</snippet></ROW><ROW><id>13098562</id><snippet>sudo port install macvim +python +perl +ruby
</snippet></ROW><ROW><id>13098651</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter('abbba')
Counter({'b': 3, 'a': 2})
</snippet></ROW><ROW><id>13098651</id><snippet>&gt;&gt;&gt; counts = Counter('abbba')
&gt;&gt;&gt; counts['a']
2
&gt;&gt;&gt; counts['b']
3
</snippet></ROW><ROW><id>13098651</id><snippet>Counter</snippet></ROW><ROW><id>13098651</id><snippet>&gt;&gt;&gt; for k, v in Counter('abbba').iteritems():
...   print k, v
...
a 2
b 3
</snippet></ROW><ROW><id>13098651</id><snippet>defaultdict</snippet></ROW><ROW><id>13098651</id><snippet>Counter</snippet></ROW><ROW><id>13098651</id><snippet>most_common</snippet></ROW><ROW><id>13098651</id><snippet>subtract</snippet></ROW><ROW><id>13098651</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; counts = defaultdict(int)
&gt;&gt;&gt; for c in 'abbba':
...   counts[c] += 1
...
&gt;&gt;&gt; counts
defaultdict(&lt;type 'int'&gt;, {'a': 2, 'b': 3})
</snippet></ROW><ROW><id>13098651</id><snippet>iteritems()</snippet></ROW><ROW><id>13098651</id><snippet>Counter</snippet></ROW><ROW><id>13098651</id><snippet>defaultdict</snippet></ROW><ROW><id>13098651</id><snippet>'a', 'b', ...</snippet></ROW><ROW><id>13098651</id><snippet>sorted</snippet></ROW><ROW><id>13098651</id><snippet>&gt;&gt;&gt; mapping = {'some': 2, 'example': 3, 'words': 5}
&gt;&gt;&gt; mapping
{'some': 2, 'example': 3, 'words': 5}
&gt;&gt;&gt; for key in sorted(mapping.keys()):
...   print key, mapping[key]
...
example 3
some 2
words 5
</snippet></ROW><ROW><id>13098676</id><snippet>your_list = [1, 2, 3]
for eachItem in your_list:
    print eachItem
</snippet></ROW><ROW><id>13098676</id><snippet>for i in xrange(10):
    print i
</snippet></ROW><ROW><id>13098676</id><snippet>for i in xrange(2 * CONST, 1):
    print i
</snippet></ROW><ROW><id>13098676</id><snippet>integer</snippet></ROW><ROW><id>13098676</id><snippet>float</snippet></ROW><ROW><id>13098676</id><snippet>for i in xrange(200 * CONST):
    print i / 100.0
</snippet></ROW><ROW><id>13098989</id><snippet>plt.*</snippet></ROW><ROW><id>13098989</id><snippet>fig = plt.gcf()
</snippet></ROW><ROW><id>13098989</id><snippet># Add subplots to the current figure
plt.subplot2grid((2, 2), (0, 0))

# Get the current figure. This will hold the subplots created in the previous command
fig = plt.gcf()
</snippet></ROW><ROW><id>13099403</id><snippet>setuptools</snippet></ROW><ROW><id>13099403</id><snippet>$ yum install python-setuptools
</snippet></ROW><ROW><id>13099475</id><snippet>str.format()</snippet></ROW><ROW><id>13099475</id><snippet>print "Id: {0}, Neighbour: {1}".format(self.id, self.neighbours)
</snippet></ROW><ROW><id>13099475</id><snippet>Python 2.6+</snippet></ROW><ROW><id>13099475</id><snippet>Python 2.7</snippet></ROW><ROW><id>13099475</id><snippet>{}</snippet></ROW><ROW><id>13099475</id><snippet>print "Id: {}, Neighbour: {}".format(self.id, self.neighbours)
</snippet></ROW><ROW><id>13099488</id><snippet>zip()</snippet></ROW><ROW><id>13099488</id><snippet>In [8]: m = [1,2,3]

In [9]: n = [4,5,6]

In [10]: [str(x)+str(y) for x,y in zip(m,n)]
Out[10]: ['14', '25', '36']
</snippet></ROW><ROW><id>13099488</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>13099488</id><snippet>In [2]: m=[1,2,3]

In [3]: n=[4,5,6,7]

In [4]: from itertools import izip_longest

In [5]: [str(x)+str(y) for x,y in izip_longest(m,n,fillvalue="")]
Out[5]: ['14', '25', '36', '7']
</snippet></ROW><ROW><id>13099825</id><snippet>print 'Word is',     #Notice the trailing comma. This will not print a newline char
faultyPrint()
</snippet></ROW><ROW><id>13100096</id><snippet>Body</snippet></ROW><ROW><id>13100096</id><snippet>viewport</snippet></ROW><ROW><id>13100096</id><snippet>Body</snippet></ROW><ROW><id>13100096</id><snippet>Body</snippet></ROW><ROW><id>13100096</id><snippet>Body</snippet></ROW><ROW><id>13100194</id><snippet>"doc2[locations],doc5[locations],doc12[locations]"</snippet></ROW><ROW><id>13100194</id><snippet>First</snippet></ROW><ROW><id>13100194</id><snippet>doc2[locations]</snippet></ROW><ROW><id>13100194</id><snippet>doc5[locations]</snippet></ROW><ROW><id>13100194</id><snippet>Second</snippet></ROW><ROW><id>13100194</id><snippet>Second</snippet></ROW><ROW><id>13100194</id><snippet>First</snippet></ROW><ROW><id>13100194</id><snippet>termID = a</snippet></ROW><ROW><id>13100194</id><snippet>doc2[locations],doc5[locations],doc12[locations]</snippet></ROW><ROW><id>13100194</id><snippet>Second</snippet></ROW><ROW><id>13100194</id><snippet>doc5[locations]</snippet></ROW><ROW><id>13100194</id><snippet>First</snippet></ROW><ROW><id>13100194</id><snippet>Second</snippet></ROW><ROW><id>13100194</id><snippet>UPDATE table SET docId = "newdoc5[locations]" where docId = "doc5[locations]"
</snippet></ROW><ROW><id>13100681</id><snippet>usecols</snippet></ROW><ROW><id>13101049</id><snippet>os.chdir(os.path.dirname(libpath))
</snippet></ROW><ROW><id>13101049</id><snippet>os.path.dirname(libpath)</snippet></ROW><ROW><id>13101053</id><snippet>accumulator</snippet></ROW><ROW><id>13101053</id><snippet>accumulator=number</snippet></ROW><ROW><id>13101053</id><snippet>accumulator</snippet></ROW><ROW><id>13101053</id><snippet>function</snippet></ROW><ROW><id>13101053</id><snippet>accumulator</snippet></ROW><ROW><id>13101053</id><snippet>global</snippet></ROW><ROW><id>13101053</id><snippet>def function(number):
    global accumulator
    accumulator = number
</snippet></ROW><ROW><id>13101053</id><snippet>None</snippet></ROW><ROW><id>13101085</id><snippet>with open('lottery.txt', 'r') as fop:
    result = dict(map(str.strip, line.split(':', 1)) for line in fop)
</snippet></ROW><ROW><id>13101085</id><snippet>dict(map(..) for line in fop)</snippet></ROW><ROW><id>13101085</id><snippet>fop</snippet></ROW><ROW><id>13101085</id><snippet>:</snippet></ROW><ROW><id>13101085</id><snippet>map(str.strip, line.split(':', 1))</snippet></ROW><ROW><id>13101085</id><snippet>.split()</snippet></ROW><ROW><id>13101085</id><snippet>:</snippet></ROW><ROW><id>13101085</id><snippet>:</snippet></ROW><ROW><id>13101085</id><snippet>dict</snippet></ROW><ROW><id>13101085</id><snippet>(key, value)</snippet></ROW><ROW><id>13101085</id><snippet>&gt;&gt;&gt; open('/tmp/lottery.txt', 'w').write('   monday: 2 23\ntuesday :4 31\nwednesday   : 19 22\nthursday : 1')
&gt;&gt;&gt; with open('/tmp/lottery.txt', 'r') as fop:
...     result = dict(map(str.strip, line.split(':', 1)) for line in fop)
... 
&gt;&gt;&gt; result
{'tuesday': '4 31', 'thursday': '1', 'wednesday': '19 22', 'monday': '2 23'}
</snippet></ROW><ROW><id>13101085</id><snippet>with open('lottery.txt', 'r') as fop:
    result = {}
    for line in fop:
        key, value = line.split(':', 1)
        result[key.strip()] = value.strip()
</snippet></ROW><ROW><id>13101427</id><snippet>moreWindow</snippet></ROW><ROW><id>13101427</id><snippet>moreWindow</snippet></ROW><ROW><id>13101427</id><snippet>moreWindow</snippet></ROW><ROW><id>13101427</id><snippet>more_window = moreWindow()
</snippet></ROW><ROW><id>13101427</id><snippet>show</snippet></ROW><ROW><id>13101427</id><snippet>more_window.show()
</snippet></ROW><ROW><id>13101431</id><snippet>return x,y
</snippet></ROW><ROW><id>13101431</id><snippet>return</snippet></ROW><ROW><id>13101476</id><snippet>firstlist</snippet></ROW><ROW><id>13101476</id><snippet>firstset = set(firstlist)
[(v in firstset) for v in otherlist]
</snippet></ROW><ROW><id>13101579</id><snippet>def quicksort(lst):
    if not lst:
        return []
    return (quicksort([x for x in lst[1:] if x &lt;  lst[0]])
            + [lst[0]] +
            quicksort([x for x in lst[1:] if x &gt;= lst[0]]))
</snippet></ROW><ROW><id>13101579</id><snippet>unsort_list = ['B', 'D', 'A', 'E', 'C']
sort_list   = quicksort(unsort_list)

sort_list
&gt; ['A', 'B', 'C', 'D', 'E']
</snippet></ROW><ROW><id>13101768</id><snippet>a = [1, 4, 5, 7, 8]</snippet></ROW><ROW><id>13101768</id><snippet>b = [5, 8, 9]</snippet></ROW><ROW><id>13101768</id><snippet>i=0</snippet></ROW><ROW><id>13101768</id><snippet>j=0</snippet></ROW><ROW><id>13101768</id><snippet>out = []</snippet></ROW><ROW><id>13101768</id><snippet>i = 0
a = 1 4 5 7 8

j = 0
b = 5 8 9
</snippet></ROW><ROW><id>13101768</id><snippet>a[i]</snippet></ROW><ROW><id>13101768</id><snippet>b[j]</snippet></ROW><ROW><id>13101768</id><snippet>a[i] == 1</snippet></ROW><ROW><id>13101768</id><snippet>b[j] == 5</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>i =   1
a = 1 4 5 7 8

j = 0
b = 5 8 9
</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>i =     2
a = 1 4 5 7 8

j = 0
b = 5 8 9
</snippet></ROW><ROW><id>13101768</id><snippet>a[i]</snippet></ROW><ROW><id>13101768</id><snippet>b[j]</snippet></ROW><ROW><id>13101768</id><snippet>i =       3
a = 1 4 5 7 8

j =   1
b = 5 8 9

out = 5
</snippet></ROW><ROW><id>13101768</id><snippet>a[i]</snippet></ROW><ROW><id>13101768</id><snippet>b[j]</snippet></ROW><ROW><id>13101768</id><snippet>i =         4
a = 1 4 5 7 8

j =   1
b = 5 8 9
</snippet></ROW><ROW><id>13101768</id><snippet>out</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>j</snippet></ROW><ROW><id>13101768</id><snippet>i =           5
a = 1 4 5 7 8

j =     2
b = 5 8 9

out = 5 8
</snippet></ROW><ROW><id>13101768</id><snippet>i == len(a)</snippet></ROW><ROW><id>13101768</id><snippet>a</snippet></ROW><ROW><id>13101768</id><snippet>b</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>j</snippet></ROW><ROW><id>13101768</id><snippet>out</snippet></ROW><ROW><id>13101768</id><snippet>i == len(a)</snippet></ROW><ROW><id>13101768</id><snippet>j == len(b)</snippet></ROW><ROW><id>13101768</id><snippet>a[i]</snippet></ROW><ROW><id>13101768</id><snippet>b[j]</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>j</snippet></ROW><ROW><id>13101768</id><snippet>a[i]</snippet></ROW><ROW><id>13101768</id><snippet>out</snippet></ROW><ROW><id>13101768</id><snippet>a[i] &lt; b[j]</snippet></ROW><ROW><id>13101768</id><snippet>i</snippet></ROW><ROW><id>13101768</id><snippet>j</snippet></ROW><ROW><id>13101776</id><snippet>def convert(input):
    if isinstance(input, dict):
        return {convert(key): convert(value) for key, value in input.iteritems()}
    elif isinstance(input, list):
        return [convert(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input
</snippet></ROW><ROW><id>13101784</id><snippet>class DEVINFO(Structure):
    _fields_ = [
        ("szDeviceName", c_char*wintypes.MAX_PATH),
        ("szPCSCName", c_char*wintypes.MAX_PATH),
        ("bPassedFilter", wintypes.BOOL),
        ("bUpdatePassed", wintypes.BOOL),
        ("dwUpdateOrder", wintypes.DWORD),
        ("dwPnp_ID", wintypes.DWORD),
        ("dwFWVersion", wintypes.DWORD),
        ("pDevExtension", POINTER(DEVEXTENSION))
    ]
</snippet></ROW><ROW><id>13101784</id><snippet>DEVINFO</snippet></ROW><ROW><id>13101784</id><snippet>FIOCreateDeviceInfoList()</snippet></ROW><ROW><id>13101784</id><snippet>funcCreateList = lib.FIOCreateDeviceInfoList(byref(devInfo))
</snippet></ROW><ROW><id>13101784</id><snippet>lib.FIOCreateDeviceInfoList.argtypes = [POINTER(DEVINFO)]
</snippet></ROW><ROW><id>13101784</id><snippet>FIOCreateDeviceInfoList()</snippet></ROW><ROW><id>13101784</id><snippet>ctypes</snippet></ROW><ROW><id>13101891</id><snippet>import re
input_keys = [key for key in request.POST if re.match(r"^inputs_", key)]
</snippet></ROW><ROW><id>13101891</id><snippet>input_keys = [key for key in request.POST if key.startswith("inputs_")]
</snippet></ROW><ROW><id>13102015</id><snippet>query = """select column1 from my_table where id = :my_id"""
bind_vars = {'my_id' : 1}

db_cursor.execute(query, bind_vars)
</snippet></ROW><ROW><id>13102015</id><snippet>options.start</snippet></ROW><ROW><id>13102015</id><snippet>avg()</snippet></ROW><ROW><id>13102015</id><snippet>select spectraldev.event.eventnumber, avg(degree) as degree
  from spectraldev.degree
  join spectraldev.alignment 
        -- I think this is wrong on your query
    on (degree.version_id = alignment.version_id)
  join spectraldev.event 
    on (alignment.timestamp between event.eventstart and event.eventstop)
  join spectraldev.eventsetup 
    on (spectraldev.event.eventsetup = spectraldev.eventsetup.oid)
 where spectraldev.event.eventnumber &gt;= :start
   and spectraldev.event.eventnumber &lt;= :stop
   and hits &gt;= :minimum_hits
 group by spectraldev.event.eventnumber
 order by spectraldev.event.eventnumber
</snippet></ROW><ROW><id>13102015</id><snippet>eventnumber</snippet></ROW><ROW><id>13102015</id><snippet>eventstart</snippet></ROW><ROW><id>13102015</id><snippet>eventstop</snippet></ROW><ROW><id>13102015</id><snippet>eventsetup</snippet></ROW><ROW><id>13102015</id><snippet>version_id</snippet></ROW><ROW><id>13102015</id><snippet>version_id</snippet></ROW><ROW><id>13102015</id><snippet>tstamp</snippet></ROW><ROW><id>13102015</id><snippet>oid</snippet></ROW><ROW><id>13102015</id><snippet>hits</snippet></ROW><ROW><id>13102015</id><snippet>/*+ full(event) */</snippet></ROW><ROW><id>13102015</id><snippet>order by</snippet></ROW><ROW><id>13102265</id><snippet>to_xml</snippet></ROW><ROW><id>13102301</id><snippet>dict_list = [{} for x in xrange(3)]
</snippet></ROW><ROW><id>13102301</id><snippet>dict_list[0]</snippet></ROW><ROW><id>13102301</id><snippet>dict_list[1]</snippet></ROW><ROW><id>13102301</id><snippet>globals()</snippet></ROW><ROW><id>13102301</id><snippet>eval()</snippet></ROW><ROW><id>13102422</id><snippet>&gt;&gt;&gt; p[TCP].chksum
</snippet></ROW><ROW><id>13102553</id><snippet>In [24]: s = ['ABC','DEF','GHI','JKL']

In [25]: lis=[list(x) for x in s]

In [26]: lis
Out[26]: [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I'], ['J', 'K', 'L']]
</snippet></ROW><ROW><id>13102553</id><snippet>map()</snippet></ROW><ROW><id>13102553</id><snippet>In [27]: lis1=map(list,s)

In [28]: lis1
Out[28]: [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I'], ['J', 'K', 'L']]
</snippet></ROW><ROW><id>13102566</id><snippet>d</snippet></ROW><ROW><id>13102566</id><snippet>lists_by_length = sorted(d.values(), key=len)
</snippet></ROW><ROW><id>13102718</id><snippet>regex = re.compile('(?&lt;=&lt;)w:\w+(?=&gt;)|(?&lt;=&lt;)w:\w+(?=[\s\w+:\w+="[\w/:.-]+"]{0,10}&gt;)')
</snippet></ROW><ROW><id>13102906</id><snippet>sys.path</snippet></ROW><ROW><id>13102906</id><snippet>import imp

search_paths = [path_to_spam]
modfile, modpath, description = imp.find_module('spam', search_paths)
with modfile:
    spam = imp.load_module('spam', modfile, modpath, description)
</snippet></ROW><ROW><id>13103025</id><snippet>relationship</snippet></ROW><ROW><id>13103025</id><snippet>Comparator</snippet></ROW><ROW><id>13103025</id><snippet>from sqlalchemy.ext.hybrid import Comparator, hybrid_property

class ProgramComparator(Comparator):
    def __eq__(self, other):
        # Should check for case of `other is None`
        return self.__clause_element__() == other.raw

class Member(Base):
    # ...
    program_raw = Column(String(80), index=True)

    @hybrid_property
    def program(self):
        return Program(self.program_raw)

    @program.comparator
    def program(cls):
        # program_raw becomes __clause_element__ in the Comparator.
        return ProgramComparator(cls.program_raw)

    @program.setter
    def program(self, value):
        self.program_raw = value.raw
</snippet></ROW><ROW><id>13103025</id><snippet>Program('abc') == Program('abc')</snippet></ROW><ROW><id>13103025</id><snippet>__new__</snippet></ROW><ROW><id>13103171</id><snippet>return</snippet></ROW><ROW><id>13103171</id><snippet>c</snippet></ROW><ROW><id>13103171</id><snippet>c</snippet></ROW><ROW><id>13103171</id><snippet>for-loop</snippet></ROW><ROW><id>13103171</id><snippet>def countletter(s, c): #BAD
    count = 0
    for x in s:
        if x.lower() == c.lower():
            count += 1
    return count


print countletter("abcdefFf","F") #prints 3
print countletter("a","A")        #prints 1
</snippet></ROW><ROW><id>13103378</id><snippet>from BeautifulSoup import BeautifulSoup

text = """
&lt;dt&gt;PLZ:&lt;/dt&gt;
&lt;dd&gt;
8047
&lt;/dd&gt;"""

number = BeautifulSoup(text).find("dt",text="PLZ:").parent.findNextSiblings("dd")
print BeautifulSoup(''.join(number[0]))
</snippet></ROW><ROW><id>13103378</id><snippet>number = BeautifulSoup(text).find("dt",text="PLZ:").parent.findNext("dd").contents[0]
</snippet></ROW><ROW><id>13103458</id><snippet>@login_registered
def myView(request):
    if not checkUserType(request.user):
        return redirect('setUserType')  # Page where the user will set his type

    # user has the type, continue
</snippet></ROW><ROW><id>13103458</id><snippet>process_request()</snippet></ROW><ROW><id>13103458</id><snippet>from django import http
from django.core.urlresolvers import reverse


class SetUserTypeMiddleware(object):
    urls = ['/some/path/that/requires/user/type/',]

    def process_request(self, request):
        if not request.user.is_authenticated():
            return

        for url in urls: # customize url matching to your taste
            if url in request.path_info:
                return http.HttpResponseRedirect(reverse('setUserType'))
</snippet></ROW><ROW><id>13103458</id><snippet>settings.MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>13103504</id><snippet>sys.stdin</snippet></ROW><ROW><id>13103504</id><snippet>PIPE</snippet></ROW><ROW><id>13103504</id><snippet>Popen</snippet></ROW><ROW><id>13103504</id><snippet>paramiko</snippet></ROW><ROW><id>13103504</id><snippet>exec_command()</snippet></ROW><ROW><id>13103547</id><snippet>values()</snippet></ROW><ROW><id>13103547</id><snippet>itertools</snippet></ROW><ROW><id>13103547</id><snippet>combinations</snippet></ROW><ROW><id>13103547</id><snippet>from itertools import combinations
for a, b in combinations(bodies.values(), 2):
    print a, b
</snippet></ROW><ROW><id>13103821</id><snippet>yes</snippet></ROW><ROW><id>13103821</id><snippet>choice =='yes'</snippet></ROW><ROW><id>13103821</id><snippet>yes</snippet></ROW><ROW><id>13104101</id><snippet>expr ::= int | ( expr op expr )
</snippet></ROW><ROW><id>13104101</id><snippet>def evalExpr(it):
    item = it.next()
    if isInt(item):
        return int(item)
    else: 
        //item should = lparen
        operand1 = evalExpr(it)
        op = it.next()        
        operand2 = evalExpr(it)
        rparen = it.next() 
        return execute(op, operand1, operand2)
</snippet></ROW><ROW><id>13104117</id><snippet>'A' or 'B'
</snippet></ROW><ROW><id>13104117</id><snippet>'A'</snippet></ROW><ROW><id>13104117</id><snippet>('A' or 'B') == char
</snippet></ROW><ROW><id>13104117</id><snippet>('A' or 'B') == char
('A') == char
True
</snippet></ROW><ROW><id>13104117</id><snippet>('B' or 'A') == char
</snippet></ROW><ROW><id>13104117</id><snippet>('B' or 'A') == char
('B') == char
False
</snippet></ROW><ROW><id>13104117</id><snippet>'A' == char or 'B' == char
True
</snippet></ROW><ROW><id>13104348</id><snippet>A.foo</snippet></ROW><ROW><id>13104348</id><snippet>class A:
   def bar(self):
       print 'Bar'

   def apply(self, func):
       func()  # call it like any other function

   def copyApply(self, func):
       cpy = copy.copy(self)
       func(cpy)  # cpy becomes the self parameter

a = A()
func = a.bar  # don't call the function yet

a.apply(func)       # call the bound method `a.bar`
a.apply(a.bar)      # same as the line above
a.copyApply(A.bar)  # call the unbound method `A.bar` on a new `A`
</snippet></ROW><ROW><id>13104348</id><snippet>a.foo()</snippet></ROW><ROW><id>13104348</id><snippet>A.foo(a)</snippet></ROW><ROW><id>13104348</id><snippet>a</snippet></ROW><ROW><id>13104348</id><snippet>A</snippet></ROW><ROW><id>13104348</id><snippet>copyApply</snippet></ROW><ROW><id>13104348</id><snippet>foo</snippet></ROW><ROW><id>13104575</id><snippet>class MayNotSwimException(Exception):
    def __init__(reason):
        self.reason = reason

class Person(object):
    def __init__(self, can_swim):
        self.can_swin = can_swim

    def swim(self):
        if self.can_swim:
            self.do_something()
        else:
            raise MayNotSwimException("I can't swim because...!")

    def walk_away(self):
        self.do_something_else()



p = Person(can_swim = False)
try:
    p.swim():
except MayNotSwimException as e: # In python 2.5-, use MayNotSwimException, e 
    print "That person can't swim because", e.reason
    p.walk_away()
</snippet></ROW><ROW><id>13104575</id><snippet>try/except</snippet></ROW><ROW><id>13104575</id><snippet>MayNotSwimBecauseDoesntWantException</snippet></ROW><ROW><id>13104575</id><snippet>MayNotSwimBecauseFeelsSleepyException</snippet></ROW><ROW><id>13104575</id><snippet>e.reason</snippet></ROW><ROW><id>13104711</id><snippet>DLS</snippet></ROW><ROW><id>13104711</id><snippet>    for child in children:
        child_result = DLS(child, goal, limit - 1)
        if child_result != "No Solution":
            return child_result

# note, "else" removed here, so you can fall through to the return from above
return "No Solution"
</snippet></ROW><ROW><id>13104711</id><snippet>None</snippet></ROW><ROW><id>13104711</id><snippet>if child_result: return child_result</snippet></ROW><ROW><id>13104711</id><snippet>None</snippet></ROW><ROW><id>13104711</id><snippet>visited</snippet></ROW><ROW><id>13104796</id><snippet>docs=[]
with open("data1.txt") as f:
    lines=f.read().split("&lt;NEW DOCUMENT&gt;")[1:]
    for x in lines:
        docs.append(x.strip())
    print (docs)
search = input("Enter search words: ")   
for x in docs:
    if search in x:
        print ("{} found in:\t {}".format(search,x))
</snippet></ROW><ROW><id>13104796</id><snippet>['Look on the bright \nside of Life.', 'look on the very, dark\nside of the Moon', 'is there life\non the moon']
Enter search words: dark
dark found in:   look on the very, dark
side of the Moon
</snippet></ROW><ROW><id>13105050</id><snippet>import subprocess
import string

msqlr = subprocess.Popen("sudo /usr/sbin/netstat -al".split(), stdout=subprocess.PIPE).stdout
grep = subprocess.Popen(["/usr/bin/grep", "mysql"], stdin=msqlr, stdout=subprocess.PIPE).stdout
msqlrLines = grep.read().split("\n")
vals = map(string.strip, msqlrLines[0].split())
print vals
if vals[-1] in ("LISTENING", "LISTEN"):
    print "OK - MySQL is running."
else:
    print "Not OK - MySQL is not running."
</snippet></ROW><ROW><id>13105050</id><snippet>['tcp4', '0', '0', '*.mysql', '*.*', 'LISTEN']
OK - MySQL is running.
</snippet></ROW><ROW><id>13105050</id><snippet>import subprocess
import string

msqlr = subprocess.Popen("sudo /bin/netstat -al".split(), stdout=subprocess.PIPE).stdout
grep = subprocess.Popen(["/bin/grep", "mysql"], stdin=msqlr, stdout=subprocess.PIPE).stdout
msqlrLines = grep.read().split("\n")
vals = map(string.strip, msqlrLines[0].split())
print vals
if len(vals) and vals[-1] in ("LISTENING", "LISTEN"):
    print "OK - MySQL is running."
else:
    print "Not OK - MySQL is not running."
</snippet></ROW><ROW><id>13105439</id><snippet>np.vstack</snippet></ROW><ROW><id>13105439</id><snippet>np.concatenate</snippet></ROW><ROW><id>13105439</id><snippet>('Summary_Quote', 'S38')</snippet></ROW><ROW><id>13105439</id><snippet>('Summary_Quote', 'S34')</snippet></ROW><ROW><id>13105439</id><snippet>Summary_Quote</snippet></ROW><ROW><id>13105439</id><snippet>nasdaqdata</snippet></ROW><ROW><id>13105439</id><snippet>LastSale</snippet></ROW><ROW><id>13105439</id><snippet>genfromtxt</snippet></ROW><ROW><id>13105439</id><snippet>dtype = None</snippet></ROW><ROW><id>13105439</id><snippet>genfromtxt</snippet></ROW><ROW><id>13105439</id><snippet>import numpy.lib.recfunctions as recfunctions
recfunctions.stack_arrays([nysedata,nasdaqdata.astype(nysedata.dtype)], usemask = False)
</snippet></ROW><ROW><id>13105439</id><snippet>recfunctions.stack_arrays</snippet></ROW><ROW><id>13105439</id><snippet>nysedata</snippet></ROW><ROW><id>13105439</id><snippet>nasdaqdata</snippet></ROW><ROW><id>13105439</id><snippet>genfromtxt</snippet></ROW><ROW><id>13105439</id><snippet>import numpy as np
import os

cwd = os.getcwd()    
nysedatafile = os.path.join(cwd, 'nyse.txt')
nasdaqdatafile = os.path.join(cwd, 'nasdaq.txt')
alldatafile = os.path.join(cwd, 'all.txt')
with open(nysedatafile) as f1, open(nasdaqdatafile) as f2, open(alldatafile, 'w') as g:
    for line in f1:
        g.write(line)
    next(f2)
    for line in f2:
        g.write(line)

alldata = np.genfromtxt(alldatafile, delimiter='\t', names=True, dtype=None)
</snippet></ROW><ROW><id>13105549</id><snippet>Pygame</snippet></ROW><ROW><id>13105549</id><snippet>pygame.init()
pygame.mixer.Sound('sound.wav').play()
</snippet></ROW><ROW><id>13105597</id><snippet>from math import factorial
from __future__ import division

C = lambda n, k : factorial(n) / factorial(k) * factorial(n-k)

print C(10,5)
&gt; 3628800.0
</snippet></ROW><ROW><id>13105597</id><snippet>*</snippet></ROW><ROW><id>13105597</id><snippet>/</snippet></ROW><ROW><id>13105597</id><snippet>/</snippet></ROW><ROW><id>13105597</id><snippet>factorial</snippet></ROW><ROW><id>13105597</id><snippet>def factorial(n):
    fac = 1
    for i in xrange(1, n+1):
        fac *= i
    return fac
</snippet></ROW><ROW><id>13105693</id><snippet>def function(n):
    if (n != 1) and (n != 0):
        return function(n - 1) + function(n - 2)
    return n
</snippet></ROW><ROW><id>13105787</id><snippet> [^āēīōūaeiou]*  # 0 or more consonants
 [āēīōū]         # a long vowel
 [^āēīōūaeiou]*  # 0 or more consonants
 [aeiou]         # a short vowel
 [^āēīōūaeiou]*  # 0 or more consonants
 [aeiou]         # a short vowel 
 [^āēīōūaeiou]*? # 0 or more consonants, but as few as possible
</snippet></ROW><ROW><id>13105787</id><snippet># -*- coding: utf-8 -*-

import re
s = u"ārma virūmqe canō"
# Long vowels: āēīōū

m = re.findall(u'([^āēīōūaeiou]*[āēīōū][^āēīōūaeiou]*' # Dactyls
               u'[aeiou][^āēīōūaeiou]*[aeiou][^āēīōūaeiou]*?'
               u'|'
               u'[^āēīōūaeiou]*[āēīōū][^āēīōūaeiou]*?'  # Spondees
               u'[āēīōū]?[^āēīōūaeiou]*'
               u'|'
               u'[\w\s]*)', s)                         # Catch all leftovers

try:
    print ' / '.join(m)
except:
    print 'no match'
</snippet></ROW><ROW><id>13105787</id><snippet>ārma vi / rūmqe ca / nō
</snippet></ROW><ROW><id>13105866</id><snippet>In [204]: import re

In [205]: re.sub(r'([a-z])\1+', r'\1\1', 'ffffffbbbbbbbqqq')
Out[205]: 'ffbbqq'
</snippet></ROW><ROW><id>13105899</id><snippet>In [63]: n = 8

In [64]: board  = [[0 for i in range(n)] for i in range(n)]

In [65]: timeit board2 = [r[:] for r in board]
100000 loops, best of 3: 3.24 us per loop

In [66]: timeit board2 = copy.deepcopy(board)
10000 loops, best of 3: 92.8 us per loop
</snippet></ROW><ROW><id>13105899</id><snippet>In [69]: board = [x[:] for x in [[0]*n]*n]
</snippet></ROW><ROW><id>13105899</id><snippet>In [79]: board = {(i,j): 0 for i in range(n) for j in range(n)}

In [80]: timeit board2 = board.copy()
100000 loops, best of 3: 3.46 us per loop
</snippet></ROW><ROW><id>13105920</id><snippet>zip(*args)
</snippet></ROW><ROW><id>13105920</id><snippet>def myFun(*args):
    return [int(''.join(map(str, l))) for l in zip(*args)]
</snippet></ROW><ROW><id>13105984</id><snippet>2 + 2</snippet></ROW><ROW><id>13105984</id><snippet>3 + 1</snippet></ROW><ROW><id>13106017</id><snippet>.bit_length()</snippet></ROW><ROW><id>13106017</id><snippet>def brute(x):
    # determine max p such that 2^p &lt;= x
    p = 0
    while 2**p &lt;= x:
        p += 1
    return p-1

def easy(x):
    return x.bit_length() - 1
</snippet></ROW><ROW><id>13106017</id><snippet>&gt;&gt;&gt; brute(0), brute(2**3-1), brute(2**3)
(-1, 2, 3)
&gt;&gt;&gt; easy(0), easy(2**3-1), easy(2**3)
(-1, 2, 3)
&gt;&gt;&gt; brute(2**50-1), brute(2**50), brute(2**50+1)
(49, 50, 50)
&gt;&gt;&gt; easy(2**50-1), easy(2**50), easy(2**50+1)
(49, 50, 50)
&gt;&gt;&gt; 
&gt;&gt;&gt; all(brute(n) == easy(n) for n in range(10**6))
True
&gt;&gt;&gt; nums = (max(2**x+d, 0) for x in range(200) for d in range(-50, 50))
&gt;&gt;&gt; all(brute(n) == easy(n) for n in nums)
True
</snippet></ROW><ROW><id>13106203</id><snippet>ax.relim()
ax.autoscale_view(True,True,True)
</snippet></ROW><ROW><id>13106203</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as mdate
import numpy as np

plt.ion()

fig = plt.figure()
ax = fig.add_subplot(111)

for i,(_,_,idx) in enumerate(local_minima):
    dat = dst_data[idx-24:idx+25]
    dates,values = zip(*dat)
    if i == 0:
        assert(len(dates) == len(values))
        lines2d, = ax.plot_date(mdate.date2num(dates), np.array(values), linestyle='-')
    else:
        assert(len(dates) == len(values))
        lines2d.set_ydata(np.array(values))
        lines2d.set_xdata(mdate.date2num(dates))  #This line causes problems.
        ax.relim()
        ax.autoscale_view(True,True,True)
        fig.canvas.draw()
    raw_input()
</snippet></ROW><ROW><id>13106217</id><snippet>&gt;&gt;&gt; s = "\N{BLACK SPADE SUIT}"
&gt;&gt;&gt; s
'♠'
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.name(s)
'BLACK SPADE SUIT'
&gt;&gt;&gt; ord(s)
9824
&gt;&gt;&gt; hex(ord(s))
'0x2660'
</snippet></ROW><ROW><id>13106307</id><snippet>raw_input</snippet></ROW><ROW><id>13106307</id><snippet>input</snippet></ROW><ROW><id>13106526</id><snippet>re.findall('"([^,]+)"', source)
</snippet></ROW><ROW><id>13106526</id><snippet>['Var1', 'Var2']</snippet></ROW><ROW><id>13106661</id><snippet># put this in some app such as customize/templatetags/admin_modify.py and place the app
# before the 'django.contrib.admin' in the INSTALLED_APPS in settings

from django.contrib.admin.templatetags.admin_modify import *
from django.contrib.admin.templatetags.admin_modify import submit_row as original_submit_row
# or 
# original_submit_row = submit_row

@register.inclusion_tag('admin/submit_line.html', takes_context=True)
def submit_row(context):
    ctx = original_submit_row(context)
    ctx.update({
        'show_save_and_add_another': context.get('show_save_and_add_another', ctx['show_save_and_add_another']),
        'show_save_and_continue': context.get('show_save_and_continue', ctx['show_save_and_continue'])
        })                                                                  
    return ctx 
</snippet></ROW><ROW><id>13106793</id><snippet>testmod(extraglobs={'f': initFileGenerator('')})</snippet></ROW><ROW><id>13106793</id><snippet>__doc__</snippet></ROW><ROW><id>13106793</id><snippet>class MyClass(object):
    """MyClass
    &gt;&gt;&gt; m = MyClass()
    &gt;&gt;&gt; m.hello()
    hello
    &gt;&gt;&gt; m.world()
    world
    """

    def hello(self):
        """method hello"""
        print 'hello'

    def world(self):
        """method world"""
        print 'world'
</snippet></ROW><ROW><id>13107315</id><snippet>class Factory():
    registred = {}

    @classmethod
    def register(cls, priority):
        registred = cls.registred
        def inner(inner_cls):
            registred[priority] = inner_cls
            return inner_cls
        return inner
    @classmethod
    def get(cls):
        return min(cls.registred.items())[1]()

@Factory.register(3) 
class A():
    def test(self):
        print "A"

Factory.get().test()

@Factory.register(2)
class B():
    def test(self):
        print "B"

Factory.get().test()

@Factory.register(1)
class C(B):
    def test(self):
        print "C"

Factory.get().test()
</snippet></ROW><ROW><id>13107315</id><snippet>ABC</snippet></ROW><ROW><id>13107433</id><snippet>def del_dir(path):
    for file_or_dir in os.listdir(path):
</snippet></ROW><ROW><id>13107433</id><snippet>def del_dir(path):
    for x in os.listdir(path):
        file_or_dir = os.path.join(path,x)
</snippet></ROW><ROW><id>13107433</id><snippet>&gt;&gt;&gt; import win32api
&gt;&gt;&gt; import win32con
&gt;&gt;&gt; win32api.MessageBox(0, "hello win32api", "win32api", win32con.MB_OK)
</snippet></ROW><ROW><id>13107464</id><snippet>PyGILState_STATE gstate;
gstate = PyGILState_Ensure();

...

PyGILState_Release(gstate);
</snippet></ROW><ROW><id>13107464</id><snippet>thread.start_new_thread()</snippet></ROW><ROW><id>13107633</id><snippet>Jump()</snippet></ROW><ROW><id>13107633</id><snippet>long</snippet></ROW><ROW><id>13107820</id><snippet>$(document).ready(function() {
    $('#chatForm').submit(function(e) {
        $.ajax({
            type: 'POST',
            url: "/AddToChat/''' + str(game) + '''/''' + str(player) + '''",
            success: function() {
                $('#chatInput').val("");
            }
        });
        e.preventDefault();
    });
});
</snippet></ROW><ROW><id>13107820</id><snippet>data: $(this).serialize(),</snippet></ROW><ROW><id>13107820</id><snippet>$(document).ready(function() {
    $('#chatForm').submit(function(e) {
        $.ajax({
            type: 'POST',
            url: "/AddToChat/''' + str(game) + '''/''' + str(player) + '''",
            data: $(this).serialize(),
            success: function() {
                $('#chatInput').val("");
            }
        });
        e.preventDefault();
    });
});
</snippet></ROW><ROW><id>13108094</id><snippet>TestCase.__dict__['foo'](None)
</snippet></ROW><ROW><id>13108188</id><snippet>5</snippet></ROW><ROW><id>13108188</id><snippet>from decimal import Decimal

def round_to_10_cents(x):
    """
    Round a Decimal value to the nearest multiple of 0.10,
    unless already an exact multiple of 0.05.

    """
    remainder = x.remainder_near(Decimal('0.10'))
    if abs(remainder) == Decimal('0.05'):
        return x
    else:
        return x - remainder


# Test code.
for x in range(80, 120):
    y = Decimal(x) / Decimal('1E2')
    print "{0} rounds to {1}".format(y, round_to_10_cents(y))
</snippet></ROW><ROW><id>13108188</id><snippet>0.80 rounds to 0.80
0.81 rounds to 0.80
0.82 rounds to 0.80
0.83 rounds to 0.80
0.84 rounds to 0.80
0.85 rounds to 0.85
0.86 rounds to 0.90
0.87 rounds to 0.90
0.88 rounds to 0.90
0.89 rounds to 0.90
0.90 rounds to 0.90
0.91 rounds to 0.90
0.92 rounds to 0.90
0.93 rounds to 0.90
0.94 rounds to 0.90
0.95 rounds to 0.95
0.96 rounds to 1.00
0.97 rounds to 1.00
0.98 rounds to 1.00
0.99 rounds to 1.00
1.00 rounds to 1.00
1.01 rounds to 1.00
1.02 rounds to 1.00
1.03 rounds to 1.00
1.04 rounds to 1.00
1.05 rounds to 1.05
1.06 rounds to 1.10
1.07 rounds to 1.10
1.08 rounds to 1.10
1.09 rounds to 1.10
1.10 rounds to 1.10
1.11 rounds to 1.10
1.12 rounds to 1.10
1.13 rounds to 1.10
1.14 rounds to 1.10
1.15 rounds to 1.15
1.16 rounds to 1.20
1.17 rounds to 1.20
1.18 rounds to 1.20
1.19 rounds to 1.20
</snippet></ROW><ROW><id>13108221</id><snippet>False</snippet></ROW><ROW><id>13108221</id><snippet>True</snippet></ROW><ROW><id>13108221</id><snippet>True</snippet></ROW><ROW><id>13108221</id><snippet>all()</snippet></ROW><ROW><id>13108221</id><snippet>zip()</snippet></ROW><ROW><id>13108221</id><snippet>all()</snippet></ROW><ROW><id>13108221</id><snippet>def _is_equal( el1, el2 ):      
    if el1.tag == el2.tag and len(el1) == len(el2):
        return all(_is_equal(c1, c2) for c1, c2 in zip(el1, el2))

    return False
</snippet></ROW><ROW><id>13108474</id><snippet>import threading

def on_message(self, message):
    # pull out user and password from message somehow
    thread = threading.Thread(target=self.hash_password, args=(user, password))
    thread.start()


def hash_password(self, user, password):
    # do the hash and save to db or check against hashed password
</snippet></ROW><ROW><id>13108474</id><snippet>on_message</snippet></ROW><ROW><id>13108474</id><snippet>hash_password</snippet></ROW><ROW><id>13108474</id><snippet>time.sleep</snippet></ROW><ROW><id>13108483</id><snippet>    tcpcli.send(bytes('[%s]%s' % (ctime(),data), 'utf-8'))
</snippet></ROW><ROW><id>13108613</id><snippet>&gt;&gt;&gt; l = [3, 5, 3]
&gt;&gt;&gt; s = set()
&gt;&gt;&gt; s
set([])
&gt;&gt;&gt; for x in l:
...     if x not in s:
...         s.add(x)
...     else:
...         break
</snippet></ROW><ROW><id>13108613</id><snippet>None</snippet></ROW><ROW><id>13108613</id><snippet>def get_first_duplicate(l):
    s = set()
    for x in l:
        if x not in s:
            s.add(x)
        else:
            return x

get_first_duplicate([3, 5, 3])
# returns 3
</snippet></ROW><ROW><id>13108613</id><snippet>def has_duplicates(l):
    s = set()
    for x in l:
        if x not in s:
            s.add(x)
        else:
            return true
    return false

get_first_duplicate([3, 5, 3])
# returns True
</snippet></ROW><ROW><id>13108613</id><snippet>s = set(); has_dupe = any(x in s or s.add(x) for x in l)
</snippet></ROW><ROW><id>13108681</id><snippet>ToggleButton</snippet></ROW><ROW><id>13108681</id><snippet>GtkButton</snippet></ROW><ROW><id>13108681</id><snippet>is_clicked</snippet></ROW><ROW><id>13108681</id><snippet>is_active</snippet></ROW><ROW><id>13108681</id><snippet>triggered</snippet></ROW><ROW><id>13108681</id><snippet>clicked</snippet></ROW><ROW><id>13108681</id><snippet>ToggleButton</snippet></ROW><ROW><id>13108681</id><snippet>Button</snippet></ROW><ROW><id>13108681</id><snippet>import gtk, gobject, threading, time

gobject.threads_init()

window = gtk.Window()
button = gtk.ToggleButton('Start Thread')

class T(threading.Thread):
    pause = threading.Event()
    stop = False

    def start(self, *args):
        super(T, self).start()

    def run(self):
        while not self.stop:
            self.pause.wait()
            gobject.idle_add(self.rungui)
            time.sleep(0.1)

    def rungui(self):
        pass # all gui interaction should happen here

thread = T()
def toggle_thread(*args):
    if not thread.is_alive():
        thread.start()
        thread.pause.set()
        button.set_label('Pause Thread')
        return

    if thread.pause.is_set():
        thread.pause.clear()
        button.set_label('Resume Thread')
    else:
        thread.pause.set()
        button.set_label('Pause Thread')

button.connect('toggled', toggle_thread, None)

window.add(button)
button.show()
window.show()
gtk.main()
</snippet></ROW><ROW><id>13108714</id><snippet>&lt;CRLF&gt;.&lt;CRLF&gt;</snippet></ROW><ROW><id>13108836</id><snippet>Key Set</snippet></ROW><ROW><id>13108836</id><snippet>IDLE Classic Unix</snippet></ROW><ROW><id>13108836</id><snippet>Options -&gt; Configure -&gt; Use a Built-in Key Set -&gt; IDLE Classic Unix</snippet></ROW><ROW><id>13108836</id><snippet>C-a C-k</snippet></ROW><ROW><id>13108836</id><snippet>C-u</snippet></ROW><ROW><id>13108836</id><snippet>EditorWindow.py</snippet></ROW><ROW><id>13108836</id><snippet>configHandler.py</snippet></ROW><ROW><id>13108836</id><snippet>C-k</snippet></ROW><ROW><id>13109045</id><snippet>module_a</snippet></ROW><ROW><id>13109045</id><snippet>B</snippet></ROW><ROW><id>13109045</id><snippet>module_b</snippet></ROW><ROW><id>13109045</id><snippet>module_b</snippet></ROW><ROW><id>13109045</id><snippet>module_a</snippet></ROW><ROW><id>13109045</id><snippet>B</snippet></ROW><ROW><id>13109045</id><snippet>module_b</snippet></ROW><ROW><id>13109045</id><snippet>__dict__</snippet></ROW><ROW><id>13109045</id><snippet>$ echo 'a=1' &gt; testing.py
$ python
Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import testing
&gt;&gt;&gt; 'a' in testing.__dict__
True
</snippet></ROW><ROW><id>13109045</id><snippet>__dict__</snippet></ROW><ROW><id>13109045</id><snippet>__dict__</snippet></ROW><ROW><id>13109045</id><snippet>from</snippet></ROW><ROW><id>13109045</id><snippet>from module_a import functionA, functionB, classA, CONSTANT
</snippet></ROW><ROW><id>13109045</id><snippet>*</snippet></ROW><ROW><id>13109045</id><snippet>from module_a import *
</snippet></ROW><ROW><id>13109045</id><snippet>from ... import *</snippet></ROW><ROW><id>13109045</id><snippet>*</snippet></ROW><ROW><id>13109045</id><snippet>*</snippet></ROW><ROW><id>13109045</id><snippet>__all__</snippet></ROW><ROW><id>13109045</id><snippet>*</snippet></ROW><ROW><id>13109045</id><snippet>#module_a
A = 1
B = 2
__all__ = ['A']

#module_b
from module_a import *
print(A)   #okay
print(B)   #NameError, B was not exported!
</snippet></ROW><ROW><id>13109058</id><snippet>ideone.py</snippet></ROW><ROW><id>13109058</id><snippet>diff --git a/ideone.py b/ideone.py
index fffdf27..b15abef 100644
--- a/ideone.py
+++ b/ideone.py
@@ -42,10 +42,10 @@ def getError(response):


 class IdeOne:
-    def __init__(self, user='test', password='test'):
+    def __init__(self, user='test', password='test', **kwargs):
         self._user = user
         self._password = password
-        self._wsdlObject = WSDL.Proxy('http://ideone.com/api/1/service.wsdl')
+        self._wsdlObject = WSDL.Proxy('http://ideone.com/api/1/service.wsdl', **kwargs)

     def testFunction(self):
         response = self._wsdlObject.testFunction(self._user, self._password)
</snippet></ROW><ROW><id>13109058</id><snippet>WSDL.Proxy</snippet></ROW><ROW><id>13109058</id><snippet>Client.SOAPProxy</snippet></ROW><ROW><id>13109058</id><snippet>Client.SOAPProxy</snippet></ROW><ROW><id>13109058</id><snippet>http_proxy</snippet></ROW><ROW><id>13109058</id><snippet>IdeOne(user='test', password='test', http_proxy='the.http.proxy')</snippet></ROW><ROW><id>13109185</id><snippet>multiprocessing.Pool.imap()</snippet></ROW><ROW><id>13109185</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: R.F. Smith &lt;rsmith@xs4all.nl&gt;
# $Date: 2012-10-28 17:00:24 +0100 $
#
# To the extent possible under law, Roland Smith has waived all
# copyright and related or neighboring rights to gitdates.py. This
# work is published from the Netherlands. See
# http://creativecommons.org/publicdomain/zero/1.0/

"""For each file in a directory managed by git, get the short hash and
data of the most recent commit of that file."""

import os
import sys
import subprocess
from multiprocessing import Pool

def checkfor(args):
    """Make sure that a program necessary for using this script is
    available.

    Arguments:
    args -- string or list of strings of commands. A single string may
            not contain spaces.
    """
    if isinstance(args, str):
        if ' ' in args:
            raise ValueError('No spaces in single command allowed.')
        args = [args]
    try:
        with open(os.devnull, 'w') as bb:
            subprocess.check_call(args, stdout=bb, stderr=bb)
    except subprocess.CalledProcessError:
        print "Required program '{}' not found! exiting.".format(args[0])
        sys.exit(1)

def filecheck(fname):
    """Start a git process to get file info. Return a string
    containing the filename, the abbreviated commit hash and the
    author date in ISO 8601 format.

    Arguments:
    fname -- Name of the file to check.
    """
    args = ['git', '--no-pager', 'log', '-1', '--format=%h|%ai', fname]
    try:
        data = subprocess.check_output(args)[:-1]
    except subprocess.CalledProcessError:
        data = ''
    outs = '{}|{}'.format(fname[2:], data)
    return outs

def main():
    """Main program."""
    checkfor(['git', '--version'])
    allfiles = []
    if not '.git' in os.listdir('.'):
        print 'This directory is not managed by git.'
        sys.exit(0)
    for root, dirs, files in os.walk('.'):
        if '.git' in dirs:
            dirs.remove('.git')
        tmp = [os.path.join(root, f) for f in files]
        allfiles += tmp
    p = Pool()
    for res in p.imap(filecheck, allfiles):
        print res
    p.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13109185</id><snippet>serve-git|8d92934|2012-08-31 21:21:38 +0200
setres|8d92934|2012-08-31 21:21:38 +0200
mydec|e711e27|2008-04-09 21:26:05 +0200
sync-iaudio|8d92934|2012-08-31 21:21:38 +0200
tarenc|8d92934|2012-08-31 21:21:38 +0200
keypress.sh|a5c0fb5|2009-09-29 00:00:51 +0200
tolower|8d92934|2012-08-31 21:21:38 +0200
</snippet></ROW><ROW><id>13109185</id><snippet>os.devnull</snippet></ROW><ROW><id>13109185</id><snippet>/dev/null</snippet></ROW><ROW><id>13109694</id><snippet>runner</snippet></ROW><ROW><id>13109694</id><snippet>def runner():
    # _check_esc searches for Escape in our queue
    def _check_esc():
        oldpos = len(queue)
        while gtk.events_pending():
            gtk.main_iteration()
        new = itertools.islice(queue, oldpos, None)
        return any(event.type == gtk.gdk.KEY_PRESS \
                       and gtk.gdk.keyval_name(event.keyval) == 'Escape'
                   for event in new)

    queue = []
    # temporarily set the global event handler to queue
    # the events
    gtk.gdk.event_handler_set(queue.append)
    try:
        code(_check_esc)
    finally:
        # restore the handler and replay the events
        handler = gtk.main_do_event
        gtk.gdk.event_handler_set(gtk.main_do_event)
        for event in queue:
            handler(event)
    gtk.main_quit()
</snippet></ROW><ROW><id>13110061</id><snippet>items = []
for link in links:
    item = MyItem()
    item['link'] = link.select('span/a/@href').extract()
    items.append(item)
for item in items:
    yield item
</snippet></ROW><ROW><id>13110061</id><snippet>for link in links:
    item = MyItem()
    url = link.select('span/a/@href').extract()
    item['link'] = allowed_domains[0] + url
    yield item
</snippet></ROW><ROW><id>13110061</id><snippet>MyItem()</snippet></ROW><ROW><id>13110406</id><snippet>one_cycle()</snippet></ROW><ROW><id>13110406</id><snippet>x</snippet></ROW><ROW><id>13110406</id><snippet>        if (workingInt%dividor == 0):
            workingInt = workingInt/dividor
            x = 1
</snippet></ROW><ROW><id>13110406</id><snippet>x</snippet></ROW><ROW><id>13110406</id><snippet>    while x==0:
</snippet></ROW><ROW><id>13110406</id><snippet>x = 0</snippet></ROW><ROW><id>13110406</id><snippet>x</snippet></ROW><ROW><id>13110406</id><snippet>workingInt</snippet></ROW><ROW><id>13110406</id><snippet>global</snippet></ROW><ROW><id>13110406</id><snippet>def once_cycle():
    global workingInt
    x = 0

    for dividor in range(1, int(math.floor(math.sqrt(testedInt))+1)):
        while x==0:
            print "Called"
            if (workingInt%dividor == 0):
                workingInt = workingInt/dividor
                x = 1
    if (workingInt &gt; 1):
        once_cycle()
    return
</snippet></ROW><ROW><id>13110406</id><snippet>def once_cycle():
    global workingInt

    for dividor in range(1, int(math.sqrt(testedInt)) + 1):
        while True:
            if workingInt % dividor == 0:
                workingInt = workingInt / dividor
                break
    if workingInt &gt; 1:
        once_cycle()
</snippet></ROW><ROW><id>13110406</id><snippet>int(floating_point_number)</snippet></ROW><ROW><id>13110406</id><snippet>workingInt % dividor</snippet></ROW><ROW><id>13110406</id><snippet>0</snippet></ROW><ROW><id>13110406</id><snippet>testedInt</snippet></ROW><ROW><id>13110406</id><snippet>11</snippet></ROW><ROW><id>13110406</id><snippet>1</snippet></ROW><ROW><id>13110406</id><snippet>2</snippet></ROW><ROW><id>13110406</id><snippet>3</snippet></ROW><ROW><id>13110406</id><snippet>1</snippet></ROW><ROW><id>13110406</id><snippet>workingInt</snippet></ROW><ROW><id>13110406</id><snippet>11</snippet></ROW><ROW><id>13110406</id><snippet>for</snippet></ROW><ROW><id>13110406</id><snippet>2</snippet></ROW><ROW><id>13110406</id><snippet>workingInt % 2</snippet></ROW><ROW><id>13110406</id><snippet>0</snippet></ROW><ROW><id>13110636</id><snippet>truc = [['12', 'brett', 5548],
       ['22.3', 'troy', 9514],
       ['8.1', 'hings', 12635],
       ['34.2', 'dab', 17666],
       ['4q3', 'sigma', 18065],
       ['4q3', 'delta', 18068]]

truc.sort(key=lambda a:a[-1])
groups = [[]]
last_row = None
for row in truc:
    if last_row is not None and row[-1] - last_row[-1] &gt; 3500:
        groups.append([])
    last_row = row
    groups[-1].append(row)

import pprint
pprint.pprint(groups)
</snippet></ROW><ROW><id>13110636</id><snippet>[[['12', 'brett', 5548]],
 [['22.3', 'troy', 9514], ['8.1', 'hings', 12635]],
 [['34.2', 'dab', 17666], ['4q3', 'sigma', 18065], ['4q3', 'delta', 18068]]]
</snippet></ROW><ROW><id>13110761</id><snippet>get_font_folder</snippet></ROW><ROW><id>13110858</id><snippet>pysrt</snippet></ROW><ROW><id>13110858</id><snippet>from pysrt import SubRipFile

subs = SubRipFile.open('some/file.srt')

for sub in subs:
    # do something with sub.text
    pass

# save changes to a new file
subs.save('other/path.srt', encoding='utf-8')
</snippet></ROW><ROW><id>13111021</id><snippet> with open("data1.txt","w") as f:
    for season in d:
        f.write("Sports played in {0}\n".format(season))
        for sp in d[season]:
            f.write(sp+'\n')
</snippet></ROW><ROW><id>13111118</id><snippet>$ mongo dbname &lt;&lt; EOF &gt; output.json
db.collection.find().pretty()
EOF
</snippet></ROW><ROW><id>13111118</id><snippet>find()</snippet></ROW><ROW><id>13111118</id><snippet>mongo dbname command.js &gt; output.json
</snippet></ROW><ROW><id>13111118</id><snippet>printjson( db.collection.find().toArray() )
</snippet></ROW><ROW><id>13111118</id><snippet>[ ]</snippet></ROW><ROW><id>13111118</id><snippet>printjson()</snippet></ROW><ROW><id>13111118</id><snippet>$ mongo --quiet dbname --eval 'printjson(db.collection.find().toArray())' &gt; output.json
</snippet></ROW><ROW><id>13111140</id><snippet>In [26]: numbers={'number1': 1,
   ....:          'number2' : 2,
   ....:           'number3' : 3}

In [27]: for i in (1,2,3):
   ....:         numbers['number'+str(i)]+=1
   ....: 

In [28]: numbers['number1']
Out[28]: 2

In [29]: numbers['number2']
Out[29]: 3

In [30]: numbers['number3']
Out[30]: 4
</snippet></ROW><ROW><id>13111140</id><snippet>globals()</snippet></ROW><ROW><id>13111140</id><snippet>In [31]: number1 = 1

In [32]: number2 = 2

In [33]: number3 = 3

In [34]: for i in (1,2,3):
   ....:     globals()['number'+str(i)]+=1
   ....:     
   ....:     

In [35]: number1
Out[35]: 2

In [36]: number2
Out[36]: 3

In [37]: number3
Out[37]: 4
</snippet></ROW><ROW><id>13111196</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>13111196</id><snippet>from collections import defaultdict
from functools import partial

class IndexingList:
    def __init__(self, items):
        self.items = []
        self.indices = defaultdict(partial(defaultdict, list))
        self.extend(items)

    def append(self, item):
        try:
            for index, value in item.items():
                self.indices[index][value].append(item)
        except AttributeError as e:
            raise ValueError("All children of an IndexingList must be "
                             "dict-like. '{0}' is not.".format(item)) from e
        self.items.append(item)

    def extend(self, iterable):
        for item in iterable:
            self.append(item)

    def __iadd__(self, other):
        self.extend(other)
        return self

    def __getitem__(self, item):
        return self.items[item]

    def __setitem__(self, item, value):
        self.items[item] = value

    def __delitem__(self, item):
        del self.items[item]
        for index, value in item.items():
            self.indices[index][value].remove(item)

    def find_all(self, index, value):
        return self.indices[index][value]

    def __repr__(self):
        return repr(self.items)
</snippet></ROW><ROW><id>13111196</id><snippet>&gt;&gt;&gt; foo = IndexingList([{ 'id': 1, 'name': 'cat' }, { 'id': 2, 'name': 'dog' }])
&gt;&gt;&gt; foo[0]
{'id': 1, 'name': 'cat'}
&gt;&gt;&gt; foo.find_all("id", 2)
[{'id': 2, 'name': 'dog'}]
&gt;&gt;&gt; foo += [{'id': 3, 'name': 'dog'}]
&gt;&gt;&gt; foo.find_all('name', 'dog')
[{'id': 2, 'name': 'dog'}, {'id': 3, 'name': 'dog'}]
</snippet></ROW><ROW><id>13111234</id><snippet>cur_webpage_save.execute("""INSERT INTO webpage(scrapy_url_id,url,created,source) VALUES(%s, %s, %s, %s);""", (scrapy_url_id, url, created, source))
</snippet></ROW><ROW><id>13111234</id><snippet>%s</snippet></ROW><ROW><id>13111363</id><snippet>icacls</snippet></ROW><ROW><id>13111363</id><snippet>icacls</snippet></ROW><ROW><id>13111363</id><snippet>text.txt.txt</snippet></ROW><ROW><id>13111703</id><snippet>print space*" ",i*"*"
</snippet></ROW><ROW><id>13111703</id><snippet>print (space)*" " + i*"*"
</snippet></ROW><ROW><id>13111703</id><snippet>print ' ','3'
</snippet></ROW><ROW><id>13111703</id><snippet>print ' '+'3'
</snippet></ROW><ROW><id>13111736</id><snippet>print repr(guess), type(guess), repr(secret), type(secret)
print guess == secret, guess &gt; secret, guess &lt; secret
</snippet></ROW><ROW><id>13111736</id><snippet>if</snippet></ROW><ROW><id>13111736</id><snippet>'23' &lt;class 'str'&gt; 4 &lt;class 'int'&gt;
False False False
</snippet></ROW><ROW><id>13111736</id><snippet>TypeError: unorderable types: str() &lt; int()</snippet></ROW><ROW><id>13111736</id><snippet>&gt;&gt;&gt; "47" &lt; 200
False
&gt;&gt;&gt; "47" &lt; 47
False
&gt;&gt;&gt; "47" &lt; 2
False
&gt;&gt;&gt; 100 &lt; "23"
True
&gt;&gt;&gt; 100 &lt; "1"
True
&gt;&gt;&gt; 100 &lt; "-23"
True
</snippet></ROW><ROW><id>13111736</id><snippet>You guessed 5
5 &lt;class 'int'&gt; 35 &lt;class 'int'&gt;
False False True
You guessed 5 guess higher
You have -1 left
</snippet></ROW><ROW><id>13111832</id><snippet>datetime</snippet></ROW><ROW><id>13111832</id><snippet>time_zone</snippet></ROW><ROW><id>13111832</id><snippet>pytz</snippet></ROW><ROW><id>13111832</id><snippet>utc_offset</snippet></ROW><ROW><id>13111832</id><snippet>time_zone</snippet></ROW><ROW><id>13111832</id><snippet>tzinfo</snippet></ROW><ROW><id>13111832</id><snippet>python-dateutil</snippet></ROW><ROW><id>13111832</id><snippet>tzoffset</snippet></ROW><ROW><id>13111832</id><snippet>tzinfo</snippet></ROW><ROW><id>13111832</id><snippet>datetime</snippet></ROW><ROW><id>13111832</id><snippet>import pytz
import twitter

from datetime import  datetime
from dateutil.tz import tzoffset

USERNAME = 'ttytter'

api = twitter.Api()

# get a 'tzinfo' instance with the UTC offset for the user's local time
user = api.GetUser(USERNAME)
localtime_tz = tzoffset(user.time_zone, user.utc_offset)

statuses = api.GetUserTimeline(USERNAME)
for s in statuses[:1]:
    # get UTC timestamp from seconds since epoch
    utc_dt = datetime.utcfromtimestamp(s.created_at_in_seconds).replace(tzinfo=pytz.utc)
    print('utc: {}'.format(utc_dt))
    # convert to local time in the user's timezone
    localtime_dt = utc_dt.astimezone(localtime_tz)
    print('localtime [{}]: {}'.format(localtime_dt.tzname(), localtime_dt))
</snippet></ROW><ROW><id>13111832</id><snippet>utc: 2012-10-20 04:56:47+00:00
localtime [Pacific Time (US &amp; Canada)]: 2012-10-19 20:56:47-08:00
</snippet></ROW><ROW><id>13111932</id><snippet>In [31]: first_line = open("toyota.dot").readline()

In [32]: print repr(first_line)
'    1\t958164\tTOYOTA MOTOR CORPORATION\tTOYOTA\tLAND CRUISER\t1994\t\t19941223\tN\t0\t0\tSERVICE BRAKES, HYDRAULIC:ANTILOCK\tARNOLD      \tCA\tJT3DJ81W8R0\t19950103\t19950103\t\t\tABS SYSTEM FAILURE, AT 20MPH.  TT\tEVOQ\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tV\t\n'
</snippet></ROW><ROW><id>13111932</id><snippet>\t</snippet></ROW><ROW><id>13111932</id><snippet>.split()</snippet></ROW><ROW><id>13111932</id><snippet>In [33]: first_line.split("\t")
Out[33]: 
['    1',
 '958164',
 'TOYOTA MOTOR CORPORATION',
 'TOYOTA',
 'LAND CRUISER',
 '1994',
[... etc ...]
 '\n']
</snippet></ROW><ROW><id>13111932</id><snippet>In [34]: first_line.split("\t")[11]
Out[34]: 'SERVICE BRAKES, HYDRAULIC:ANTILOCK'

In [35]: first_line.split("\t")[12]
Out[35]: 'ARNOLD      '
</snippet></ROW><ROW><id>13111932</id><snippet>In [36]: first_line.split("\t")[12].strip()
Out[36]: 'ARNOLD'
</snippet></ROW><ROW><id>13111932</id><snippet>with open("toyota.dot") as data:
    for line in data:
        parts = line.split("\t")
</snippet></ROW><ROW><id>13111932</id><snippet>csv.reader</snippet></ROW><ROW><id>13111932</id><snippet>delimiter="\t"</snippet></ROW><ROW><id>13112003</id><snippet>m = user_login('some message')
print m
</snippet></ROW><ROW><id>13112236</id><snippet>mongoengine</snippet></ROW><ROW><id>13112236</id><snippet>mongoengine</snippet></ROW><ROW><id>13112236</id><snippet>values</snippet></ROW><ROW><id>13112236</id><snippet>values = ListField(StringField(max_length=30, required=False))
</snippet></ROW><ROW><id>13112236</id><snippet>values = ListField(StringField(max_length=100, required=False))
</snippet></ROW><ROW><id>13112269</id><snippet>findAll</snippet></ROW><ROW><id>13112269</id><snippet>&gt;&gt;&gt; a = soup.findAll("a", attrs={"name": "1"})[0]
</snippet></ROW><ROW><id>13112269</id><snippet>&gt;&gt;&gt; a.next
u'1) Text Editor\n'
</snippet></ROW><ROW><id>13112269</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>13112269</id><snippet>&gt;&gt;&gt; a.findNext("b")
&lt;b&gt;Application Name: Notepad&lt;/b&gt;
</snippet></ROW><ROW><id>13112269</id><snippet>attrs</snippet></ROW><ROW><id>13112269</id><snippet>name</snippet></ROW><ROW><id>13112269</id><snippet>findAll()</snippet></ROW><ROW><id>13112269</id><snippet>&gt;&gt;&gt; a = soup.findAll("a", href="whatever")
</snippet></ROW><ROW><id>13112688</id><snippet>runserver</snippet></ROW><ROW><id>13112688</id><snippet>models.py</snippet></ROW><ROW><id>13112688</id><snippet>models.py</snippet></ROW><ROW><id>13112688</id><snippet>admin.py</snippet></ROW><ROW><id>13112688</id><snippet>autodiscover</snippet></ROW><ROW><id>13112688</id><snippet>INSTALLED_APPS = [
    'django.contrib.auth', 
    'django.contrib.contenttypes', 
    'django.contrib.sessions'
    'django.contrib.messages',
    'django.contrib.admin',
    #...
    'myapp',
    #...
]
</snippet></ROW><ROW><id>13112688</id><snippet>myapp</snippet></ROW><ROW><id>13112688</id><snippet>myapp</snippet></ROW><ROW><id>13112688</id><snippet>autodiscover</snippet></ROW><ROW><id>13112688</id><snippet>ImportError: No module named myapp</snippet></ROW><ROW><id>13112688</id><snippet>touch wsgi.py</snippet></ROW><ROW><id>13112688</id><snippet>...

# tell django to find settings at APPS_DIR/mainsite/settings.py'
os.environ['DJANGO_SETTINGS_MODULE'] = 'mainsite.settings'

# hand off to the wsgi application
application = WSGIHandler()
</snippet></ROW><ROW><id>13112702</id><snippet>pip install matplotlib</snippet></ROW><ROW><id>13112913</id><snippet>In [116]: df
Out[116]: 
     a  b         c  d        f
0  one  3  0.493808  a      bob
1  two  8  0.150585  b    alice
2  one  6  0.641816  c  michael
3  two  5  0.935653  d      joe
4  one  1  0.521159  e     kate
</snippet></ROW><ROW><id>13112913</id><snippet>df_view = df.ix[:,'b':'d']</snippet></ROW><ROW><id>13112913</id><snippet>#I want all columns except two 
cols = df.columns.tolist()    
mycols = [x for x in cols if not x in ['a','f']]
df_view = df[mycols]
</snippet></ROW><ROW><id>13112913</id><snippet>In [158]: df_view.apply(lambda x: x /2)
Out[158]: 
   b         c   d
0  1  0.246904  20
1  4  0.075293  25
2  3  0.320908  28
3  2  0.467827  28
4  0  0.260579  24
</snippet></ROW><ROW><id>13112913</id><snippet>In [156]: df.update(df_view.apply(lambda x: x/2))

In [157]: df
Out[157]: 
     a  b         c   d        f
0  one  1  0.246904  20      bob
1  two  4  0.075293  25    alice
2  one  3  0.320908  28  michael
3  two  2  0.467827  28      joe
4  one  0  0.260579  24     kate
</snippet></ROW><ROW><id>13112955</id><snippet>PyObject *o = PyTuple_GetItem(args, i);
if (PyUnicode_CheckExact(o) &amp;&amp; PyUnicode_CompareWithASCIIString(o, "Python")==0){
    printf("Do something else ..\n");
} else {
    err = PyFile_WriteObject(o, file, Py_PRINT_RAW);
    if (err)
        return NULL;
}
</snippet></ROW><ROW><id>13112955</id><snippet>if (PyUnicode_CheckExact(o)) {
    PyObject* utf8 = PyUnicode_AsUTF16String(o);
    if (strcmp(PyString_AsString(o), "Python")==0) {
        printf("Do something else (unicode)\n");
    }
    Py_DECREF(utf8);
} else if (PyString_CheckExact(o) &amp;&amp; strcmp(PyString_AsString(o), "Python")==0){
    printf("Do something else (str) ..\n");
} else {
    err = PyFile_WriteObject(o, file, Py_PRINT_RAW);
    if (err)
        return NULL;
}
</snippet></ROW><ROW><id>13112955</id><snippet>u'Python'</snippet></ROW><ROW><id>13112955</id><snippet>case PRINT_ITEM</snippet></ROW><ROW><id>13112955</id><snippet>Modules/ceval.c</snippet></ROW><ROW><id>13112955</id><snippet>print</snippet></ROW><ROW><id>13112955</id><snippet>sys.stdout</snippet></ROW><ROW><id>13112985</id><snippet>class MyClass(object):
    def __init__(self, attribute1, attribute2, ...):
        self.attribute1 = attribute1
        self.attribute2 = attribute2
        # ...

    @staticmethod
    def load_from_db(number):
        # set up and query database
        record = cursor.fetchone()
        if record == None:
            return None
        else:
            return MyClass(record['Field1'], record['Field2'], ...)
</snippet></ROW><ROW><id>13112985</id><snippet>my_obj = MyClass.load_from_db(number)
</snippet></ROW><ROW><id>13112985</id><snippet>__init__</snippet></ROW><ROW><id>13112985</id><snippet>MyClass()</snippet></ROW><ROW><id>13112985</id><snippet>load_from_db()</snippet></ROW><ROW><id>13113018</id><snippet>urlparse</snippet></ROW><ROW><id>13113018</id><snippet>&gt;&gt;&gt; bits = urlparse.urlparse('http://www.example.com/foo?bar=zoo&amp;a=b')
&gt;&gt;&gt; bits.query
'bar=zoo&amp;a=b'
&gt;&gt;&gt; urlparse.parse_qs(bits.query)
{'a': ['b'], 'bar': ['zoo']}
</snippet></ROW><ROW><id>13113182</id><snippet>pip install psycopg2
</snippet></ROW><ROW><id>13113512</id><snippet>18:30:00.000Z</snippet></ROW><ROW><id>13113512</id><snippet>18:30:00.001Z</snippet></ROW><ROW><id>13113512</id><snippet>Z</snippet></ROW><ROW><id>13113512</id><snippet>0</snippet></ROW><ROW><id>13113512</id><snippet>1</snippet></ROW><ROW><id>13113512</id><snippet>2012-10-29T18:30:00+01:00</snippet></ROW><ROW><id>13113858</id><snippet>get_pressed</snippet></ROW><ROW><id>13113858</id><snippet>while True</snippet></ROW><ROW><id>13113858</id><snippet>for event in pygame.event.get():</snippet></ROW><ROW><id>13113858</id><snippet>get_pressed</snippet></ROW><ROW><id>13113886</id><snippet>def all_paths(r, c):
    current = triangle[r][c]
    if r &lt; len(triangle) - 1:
        below_paths = all_paths(r+1, c) + all_paths(r+1, c+1)
        return [[current] + path for path in below_paths]
    else:
        return [[current]]
</snippet></ROW><ROW><id>13113886</id><snippet>all_paths(r, c)</snippet></ROW><ROW><id>13113886</id><snippet>r</snippet></ROW><ROW><id>13113886</id><snippet>c</snippet></ROW><ROW><id>13113886</id><snippet>all_paths(0, 0)</snippet></ROW><ROW><id>13114147</id><snippet>&lt;textarea id=reply_body name=reply_body &gt;{{reply_body}}&lt;/textarea&gt;
</snippet></ROW><ROW><id>13114179</id><snippet>dict</snippet></ROW><ROW><id>13114179</id><snippet>    def a(self, d=None):
        if d is None:
            d = {}
</snippet></ROW><ROW><id>13114219</id><snippet>now</snippet></ROW><ROW><id>13114219</id><snippet>NOW()</snippet></ROW><ROW><id>13114219</id><snippet>c.execute("SELECT id, message FROM tasks WHERE date &lt;= NOW() AND done = 0;")
</snippet></ROW><ROW><id>13114300</id><snippet>from flask import render_template, Markup
from app import app
from config import POSTS_PER_PAGE
from models import Announcement, VideoAnnouncement

@app.route('/')
@app.route('/index')
@app.route('/index/&lt;int:page&gt;')
def index(page = 1):
    loggedOut = True
    query = Announcement.query.order_by(Announcement.id.desc())
    announcements = query.paginate(page, POSTS_PER_PAGE, True)
    videoAnnounce = VideoAnnouncement.query.all()
    return render_template("index.html", announcements = announcements, videoAnnouncements = videoAnnounce , loggedOut = loggedOut)
</snippet></ROW><ROW><id>13114364</id><snippet>from Bio.Seq import Seq

seq = Seq("CCTCAGCGAGGACAGCAAGGGACTAGCCAGGAGGGAGAACAGAAACTCCAGAACATCTTGGAAATAGCTCCCAGAAAAGCAAGCAGCCAACCAGGCAGGTTCTGTCCCTTTCACTCACTGGCCCAAGGCGCCACATCTCCCTCCAGAAAAGACACCATGAGCACAGAAAGCATGATCCGCGACGTGGAACTGGCAGAAGAGGCACTCCCCCAAAAGATGGGGGGCTTCCAGAACTCCAGGCGGTGCCTATGTCTCAGCCTCTTCTCATTCCTGCTTGTGGCAGGGGCCACCACGCTCTTCTGTCTACTGAACTTCGGGGTGATCGGTCCCCAAAGGGATGAGAAGTTCCCAAATGGCCTCCCTCTCATCAGTTCTATGGCCCAGACCCTCACACTCAGATCATCTTCTCAAAATTCGAGTGACAAGCCTGTAGCCCACGTCGTAGCAAACCACCAAGTGGAGGAGCAGCTGGAGTGGCTGAGCCAGCGCGCCAACGCCCTCCTGGCCAACGGCATGGATCTCAAAGACAACCAACTAGTGGTGCCAGCCGATGGGTTGTACCTTGTCTACTCCCAGGTTCTCTTCAAGGGACAAGGCTGCCCCGACTACGTGCTCCTCACCCACACCGTCAGCCGATTTGCTATCTCATACCAGGAGAAAGTCAACCTCCTCTCTGCCGTCAAGAGCCCCTGCCCCAAGGACACCCCTGAGGGGGCTGAGCTCAAACCCTGGTATGAGCCCATATACCTGGGAGGAGTCTTCCAGCTGGAGAAGGGGGACCAACTCAGCGCTGAGGTCAATCTGCCCAAGTACTTAGACTTTGCGGAGTCCGGGCAGGTCTACTTTGGAGTCATTGCTCTGTGAAGGGAATGGGTGTTCATCCATTCTCTACCCAGCCCCCACTCTGACCCCTTTACTCTGACCCCTTTATTGTCTACTCCTCAGAGCCCCCAGTCTGTATCCTTCTAACTTAGAAAGGGGATTATGGCTCAGGGTCCAACTCTGTGCTCAGAGCTTTCAACAACTACTCAGAAACACAAGATGCTGGGACAGTGACCTGGACTGTGGGCCTCTCATGCACCACCATCAAGGACTCAAATGGGCTTTCCGAATTCACTGGAGCCTCGAATGTCCATTCCTGAGTTCTGCAAAGGGAGAGTGGTCAGGTTGCCTCTGTCTCAGAATGAGGCTGGATAAGATCTCAGGCCTTCCTACCTTCAGACCTTTCCAGATTCTTCCCTGAGGTGCAATGCACAGCCTTCCTCACAGAGCCAGCCCCCCTCTATTTATATTTGCACTTATTATTTATTATTTATTTATTATTTATTTATTTGCTTATGAATGTATTTATTTGGAAGGCCGGGGTGTCCTGGAGGACCCAGTGTGGGAAGCTGTCTTCAGACAGACATGTTTTCTGTGAAAACGGAGCTGAGCTGTCCCCACCTGGCCTCTCTACCTTGTTGCCTCCTCTTTTGCTTATGTTTAAAACAAAATATTTATCTAACCCAATTGTCTTAATAACGCTGATTTGGTGACCAGGCTGTCGCTACATCACTGAACCTCTGCTCCCCACGGGAGCCGTGACTGTAATCGCCCTACGGGTCATTGAGAGAAATAA")


table = 1
min_pro_len = 100

for strand, nuc in [(+1, seq), (-1, seq.reverse_complement())]:
    for frame in range(3):
        for pro in nuc[frame:].translate(table).split("*"):
            if len(pro) &gt;= min_pro_len:
                print "%s...%s - length %i, strand %i, frame %i" % (pro[:30], pro[-3:], len(pro), strand, frame)
</snippet></ROW><ROW><id>13114364</id><snippet>seq = Seq("ACGT")</snippet></ROW><ROW><id>13114364</id><snippet>*</snippet></ROW><ROW><id>13114364</id><snippet>split</snippet></ROW><ROW><id>13114364</id><snippet>AUG</snippet></ROW><ROW><id>13114364</id><snippet>ATG</snippet></ROW><ROW><id>13114364</id><snippet>TAA</snippet></ROW><ROW><id>13114364</id><snippet>TAG</snippet></ROW><ROW><id>13114364</id><snippet>TGA</snippet></ROW><ROW><id>13114364</id><snippet>print nuc[frame:].translate(table)
</snippet></ROW><ROW><id>13114364</id><snippet>PQRGQQGTSQEGEQKLQNILEIAPRKASSQPGRFCPFHSLAQGATSPSRKDTMSTESMIRDVELAEEALPQKMGGFQNSRRCLCLSLFSFLLVAGATTLFCLLNFGVIGPQRDEKFPNGLPLISSMAQTLTLRSSSQNSSDKPVAHVVANHQVEEQLEWLSQRANALLANGMDLKDNQLVVPADGLYLVYSQVLFKGQGCPDYVLLTHTVSRFAISYQEKVNLLSAVKSPCPKDTPEGAELKPWYEPIYLGGVFQLEKGDQLSAEVNLPKYLDFAESGQVYFGVIAL*REWVFIHSLPSPHSDPFTLTPLLSTPQSPQSVSF*LRKGIMAQGPTLCSELSTTTQKHKMLGQ*PGLWASHAPPSRTQMGFPNSLEPRMSIPEFCKGRVVRLPLSQNEAG*DLRPSYLQTFPDSSLRCNAQPSSQSQPPSIYICTYYLLFIYYLFICL*MYLFGRPGCPGGPSVGSCLQTDMFSVKTELSCPHLASLPCCLLFCLCLKQNIYLTQLS**R*FGDQAVATSLNLCSPREP*L*SPYGSLREI
</snippet></ROW><ROW><id>13114364</id><snippet>output = "selected tupple is " + str(selected_tupple) + "\n"
output += final_seq + "\n"
output += "The longest orf length is " + str(max_val) + "\n"
return output
</snippet></ROW><ROW><id>13114523</id><snippet>"^(a)bc(1)23" and "ab(c)12(3)$"</snippet></ROW><ROW><id>13114597</id><snippet>**kwargs</snippet></ROW><ROW><id>13114597</id><snippet>def foo(**kwargs):
    txt = {}
    for k, v in kwargs.items():
        if v:
            txt[k] = v
    return txt
</snippet></ROW><ROW><id>13114597</id><snippet>def foo(**kwargs):
    return dict(((k,v) for k, v in kwargs.items() if v))
</snippet></ROW><ROW><id>13114597</id><snippet>ALLOWED_PARAMS = ('bar','baz','qux','haz')</snippet></ROW><ROW><id>13114597</id><snippet>if v</snippet></ROW><ROW><id>13114597</id><snippet>if v and k in ALLOWED_PARAMS</snippet></ROW><ROW><id>13114597</id><snippet>def foo(bar=None, baz=None, qux=None, haz=None): 
    return {k:v for k,v in locals().items() if v}
</snippet></ROW><ROW><id>13114597</id><snippet>KWARGS_TO_FUNCTIONS = {
    'bar':fn_bar,
    'baz':fn_baz, 
    'qux':fn_qux,
    'haz':fn_haz,
}

def foo(**kwargs):
    for k, v in kwargs.items():
        if v:
            try:
                KWARGS_TO_FUNCTIONS[k](v)
            except KeyError:
                pass # We didn't want that kwarg.
</snippet></ROW><ROW><id>13114731</id><snippet>from email import header
mail.send_mail("sender@example.com", "receiver@example.com", 
               str(header.Header(u"sübject", "utf-8")), "body")
</snippet></ROW><ROW><id>13114774</id><snippet>r'"\d\.\d"'</snippet></ROW><ROW><id>13114774</id><snippet>In [109]: import re

In [110]: text = '''&lt;a id="1.1"&gt;
&lt;a id="1.1.1"&gt;
&lt;a id="1.1.2"&gt;
&lt;a id="1.1.3"&gt;
&lt;a id="1.2"&gt;
&lt;a id="1.2.1"&gt;'''.splitlines()

In [111]: [line for line in text if re.search(r'"\d\.\d"', line)]
Out[111]: ['&lt;a id="1.1"&gt;', '&lt;a id="1.2"&gt;']
</snippet></ROW><ROW><id>13114829</id><snippet>def test(length):
    result = []
    dict = {}
    _test(length, result, dict)
    return result, dict

def _test(length, result, dict):
    if length == 10:
        return
    else:
        result.append(length)
        dict[length] = length + 1
        _test(length + 1, result, dict)

x, y = test(0)
print x, y
</snippet></ROW><ROW><id>13114931</id><snippet>class Generator:
    words = ""  # you should put words and letters here. this will be attribute and both get_words() and sort_words() can see this
    letters = []
    def get_words(self):
        words = raw_input("input the letters\n")
        letters = []
        # i = 0 : no effect. it just local variable with method get_words

    def sort_words(self):
        i = 0  # must be assign value before use
        for word in words:
        letters.append(word)
        print letters[i]
            i = i + 1
</snippet></ROW><ROW><id>13114931</id><snippet>self</snippet></ROW><ROW><id>13114931</id><snippet>generator = Generator()
generator.get_words()
generator.sort_words()
</snippet></ROW><ROW><id>13114931</id><snippet>def get_words():
    global words
    global letters
    words = raw_input("input the letters\n")
    letters = []
    # global i=0 : you can do that, but SHOULDN'T

def sort_words():
    i = 0 # i must be assign value before use
    for word in words:
        letters.append(word)
        print letters[i]
        i = i + 1
</snippet></ROW><ROW><id>13114931</id><snippet>get_words()
sort_words()
</snippet></ROW><ROW><id>13114956</id><snippet>&lt;a name=zone&gt;</snippet></ROW><ROW><id>13114956</id><snippet>&lt;a name=zone&gt;</snippet></ROW><ROW><id>13114956</id><snippet>from bs4 import BeautifulSoup

# I put the HTML in a file, but this will work with a URL as well
with open('weather.html', 'r') as f:
  fcst = f.read()

# Turn the html into a navigable soup object
soup = BeautifulSoup(fcst)

# Define your zones
zones = ['AKZ214', 'AKZ215', 'AKZ213']

weatherFull = []

# This is a more Pythonic loop structure - instead of looping over
# a range of len(zones), simply iterate over each element itself
for zone in zones:
  # Here we use BS's built-in 'find' function to find the 'a' element
  # with a name = the zone in question (as this is the pattern).
  zone_node = soup.find('a', {'name': zone})

  # This loop will continue to cycle through the elements after the 'a'
  # tag until it hits another 'a' (this is highly structure dependent :) )
  while True:
    weatherFull.append(zone_node)
    # Set the tag node = to the next node
    zone_node = zone_node.nextSibling
    # If the next node's tag name = 'a', break out and go to the next zone
    if getattr(zone_node, 'name', None)  == 'a':
      break

# Process weatherFull however you like
print weatherFull
</snippet></ROW><ROW><id>13114993</id><snippet>metar.txt</snippet></ROW><ROW><id>13114993</id><snippet>with</snippet></ROW><ROW><id>13114993</id><snippet>with open('metar.txt', 'w') as f:
    for metar in data:
        raw_text = metar.find('raw_text').text
        station = metar.find('station_id').text
        category = metar.find('flight_category').text

        f.write("%s is now reporting %s condition:" % (station, category))
        f.write("\n%s" %raw_text)
</snippet></ROW><ROW><id>13114993</id><snippet>file</snippet></ROW><ROW><id>13114993</id><snippet>file</snippet></ROW><ROW><id>13115081</id><snippet>self.beginInsertRows(self.createIndex(0, 0), index, index)
</snippet></ROW><ROW><id>13115081</id><snippet>self.createIndex(0, 0)</snippet></ROW><ROW><id>13115081</id><snippet>QModelIndex</snippet></ROW><ROW><id>13115081</id><snippet>parent</snippet></ROW><ROW><id>13115081</id><snippet>beginInsertRows</snippet></ROW><ROW><id>13115081</id><snippet>parent</snippet></ROW><ROW><id>13115081</id><snippet>QModelIndex</snippet></ROW><ROW><id>13115081</id><snippet>self.beginInsertRows(QtCore.QModelIndex(), index, index)
# or depending on how you import
self.beginInsertRows(QModelIndex(), index, index)
</snippet></ROW><ROW><id>13115081</id><snippet>index</snippet></ROW><ROW><id>13115081</id><snippet>createIndex</snippet></ROW><ROW><id>13115081</id><snippet>index</snippet></ROW><ROW><id>13115081</id><snippet>QModelIndex</snippet></ROW><ROW><id>13115081</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>13115081</id><snippet>index</snippet></ROW><ROW><id>13115081</id><snippet>__init__</snippet></ROW><ROW><id>13115081</id><snippet>figure</snippet></ROW><ROW><id>13115081</id><snippet>EMPTY</snippet></ROW><ROW><id>13115081</id><snippet>data</snippet></ROW><ROW><id>13115081</id><snippet>None</snippet></ROW><ROW><id>13115081</id><snippet>COLUMNS</snippet></ROW><ROW><id>13115081</id><snippet>figures</snippet></ROW><ROW><id>13115081</id><snippet>__init__</snippet></ROW><ROW><id>13115199</id><snippet>staffButton = Button(..., command=lambda btn=i:self.openTabHere(isLeft,btn))
</snippet></ROW><ROW><id>13115199</id><snippet>isLeft</snippet></ROW><ROW><id>13115204</id><snippet>pattern = re.compile(r"\[.*?([0-9]+(?:\.[0-9]+)?).*?\]")
pre, post = [float(x) for x in re.findall(pattern, thestring)]
</snippet></ROW><ROW><id>13115205</id><snippet>decimal</snippet></ROW><ROW><id>13115205</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal(-1200)
Decimal('-1200')
&gt;&gt;&gt; decimal.Decimal(-1200).exp()
Decimal('7.024601888177132554529322758E-522')
</snippet></ROW><ROW><id>13115205</id><snippet>decimal</snippet></ROW><ROW><id>13115205</id><snippet>mpmath</snippet></ROW><ROW><id>13115205</id><snippet>&gt;&gt;&gt; import mpmath
&gt;&gt;&gt; mpmath.exp(-1200)
mpf('7.0246018881771323e-522')
&gt;&gt;&gt; mpmath.mp.dps = 200
&gt;&gt;&gt; mpmath.exp(-1200)
mpf('7.0246018881771325545293227583680003334372949620241053728126200964731446389957280922886658181655138626308272350874157946618434229308939128146439669946631241632494494046687627223476088395986988628688095132e-522')
</snippet></ROW><ROW><id>13115276</id><snippet>articleNum</snippet></ROW><ROW><id>13115276</id><snippet>with</snippet></ROW><ROW><id>13115276</id><snippet>&lt;NEW ARTICLE&gt;</snippet></ROW><ROW><id>13115276</id><snippet>articleNum</snippet></ROW><ROW><id>13115276</id><snippet>line.split()</snippet></ROW><ROW><id>13115276</id><snippet>articleNum</snippet></ROW><ROW><id>13115276</id><snippet>articleNum</snippet></ROW><ROW><id>13115279</id><snippet>send</snippet></ROW><ROW><id>13115279</id><snippet>send</snippet></ROW><ROW><id>13115279</id><snippet>yield</snippet></ROW><ROW><id>13115279</id><snippet>x</snippet></ROW><ROW><id>13115279</id><snippet>next(g)</snippet></ROW><ROW><id>13115279</id><snippet>b</snippet></ROW><ROW><id>13115279</id><snippet>g.send(5)</snippet></ROW><ROW><id>13115279</id><snippet>send</snippet></ROW><ROW><id>13115279</id><snippet>yield i</snippet></ROW><ROW><id>13115279</id><snippet>b</snippet></ROW><ROW><id>13115279</id><snippet>b</snippet></ROW><ROW><id>13115279</id><snippet>yield i</snippet></ROW><ROW><id>13115279</id><snippet>send(5)</snippet></ROW><ROW><id>13115279</id><snippet>x = (yield)</snippet></ROW><ROW><id>13115279</id><snippet>next(g)</snippet></ROW><ROW><id>13115279</id><snippet>x = yield</snippet></ROW><ROW><id>13115279</id><snippet>next(g)</snippet></ROW><ROW><id>13115279</id><snippet>x</snippet></ROW><ROW><id>13115279</id><snippet>send</snippet></ROW><ROW><id>13115279</id><snippet>x = yield</snippet></ROW><ROW><id>13115279</id><snippet>x</snippet></ROW><ROW><id>13115279</id><snippet>send</snippet></ROW><ROW><id>13115279</id><snippet>b</snippet></ROW><ROW><id>13115279</id><snippet>a</snippet></ROW><ROW><id>13115279</id><snippet>next(g)</snippet></ROW><ROW><id>13115279</id><snippet>b</snippet></ROW><ROW><id>13115279</id><snippet>x</snippet></ROW><ROW><id>13115279</id><snippet>a</snippet></ROW><ROW><id>13115279</id><snippet>x = yield</snippet></ROW><ROW><id>13115279</id><snippet>next(g)</snippet></ROW><ROW><id>13115279</id><snippet>g.send(5)</snippet></ROW><ROW><id>13115457</id><snippet>&gt;&gt;&gt; a = [0,1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; a[3:7] = []
&gt;&gt;&gt; a
[0, 1, 2, 7, 8, 9]
</snippet></ROW><ROW><id>13115473</id><snippet>In [26]: data
Out[26]: 
           Date   Close  Adj Close
251  2011-01-03  147.48     143.25
250  2011-01-04  147.64     143.41
249  2011-01-05  147.05     142.83
248  2011-01-06  148.66     144.40
247  2011-01-07  147.93     143.69

In [27]: data.set_index('Date').diff()
Out[27]: 
            Close  Adj Close
Date                        
2011-01-03    NaN        NaN
2011-01-04   0.16       0.16
2011-01-05  -0.59      -0.58
2011-01-06   1.61       1.57
2011-01-07  -0.73      -0.71
</snippet></ROW><ROW><id>13115486</id><snippet>Clock.tick(fps_cap)</snippet></ROW><ROW><id>13115636</id><snippet>'region': obj.region.name if obj.region else "None"
</snippet></ROW><ROW><id>13115636</id><snippet>'region': obj["region"]["name"] if "region" in obj and obj["region"] else "None"
</snippet></ROW><ROW><id>13115636</id><snippet>obj</snippet></ROW><ROW><id>13115740</id><snippet>except smtplib.SMTPException:
</snippet></ROW><ROW><id>13115740</id><snippet>from smtplib import SMTPException
</snippet></ROW><ROW><id>13116080</id><snippet>and</snippet></ROW><ROW><id>13116080</id><snippet>def strParse(str):
    a = 't'
    b = 'br'
    c = 'ht'
    if a in str and b in str and c in str:
        print('Ok!')
</snippet></ROW><ROW><id>13116080</id><snippet>str</snippet></ROW><ROW><id>13116080</id><snippet>values = ['t', 'br', 'ht']
if all(x in instr for x in values):
    print("Ok!")
</snippet></ROW><ROW><id>13116500</id><snippet>-framework</snippet></ROW><ROW><id>13116500</id><snippet>cc test.cpp -framework Python
</snippet></ROW><ROW><id>13116500</id><snippet>cc test.cpp -L /Library/Frameworks/Python.framework/Versions/2.7/lib/ -l python2.7
</snippet></ROW><ROW><id>13116500</id><snippet>Xcode 3.2.6</snippet></ROW><ROW><id>13116500</id><snippet>gcc-4.2</snippet></ROW><ROW><id>13116500</id><snippet>c++</snippet></ROW><ROW><id>13116500</id><snippet>gcc</snippet></ROW><ROW><id>13116500</id><snippet>g++ test.cpp -framework Python
</snippet></ROW><ROW><id>13116500</id><snippet>c++ test.cpp -framework Python
</snippet></ROW><ROW><id>13116674</id><snippet>DEBUG -&gt; INFO -&gt; WARNING -&gt; ERROR -&gt; CRITICAL</snippet></ROW><ROW><id>13116674</id><snippet>WARNING</snippet></ROW><ROW><id>13116674</id><snippet>WARNING</snippet></ROW><ROW><id>13116674</id><snippet>setLevel</snippet></ROW><ROW><id>13116674</id><snippet>import logging

logging.getLogger().setLevel(logging.ERROR)

logging.error('first error')
logging.debug('first debug')

logging.getLogger().setLevel(logging.DEBUG)

logging.error('second error')
logging.debug('second debug')
</snippet></ROW><ROW><id>13116674</id><snippet>getLogger()</snippet></ROW><ROW><id>13116774</id><snippet>import re

# input is a list of tokens (token is a number or operator)
tokens = raw_input()

# remove whitespace
tokens = re.sub('\s+', '', tokens)

# split by addition/subtraction operators
tokens = re.split('(-|\+)', tokens)

# takes in a string of numbers, *s, and /s. returns the result
def solve_term(tokens):
    tokens = re.split('(/|\*)', tokens)
    ret = float(tokens[0])
    for op, num in &lt;FILL THIS IN&gt;:
        # &lt;apply the operation 'op' to the number 'num'&gt;
    return ret

# initialize final result to the first term's value
result = solve_term(tokens[0])

# calculate the final result by adding/subtracting terms
for op, num in &lt;FILL THIS IN&gt;:
    result +=  solve_term(num) * (1 if op == '+' else -1)

print result
</snippet></ROW><ROW><id>13117229</id><snippet>class Bottle(object):</snippet></ROW><ROW><id>13117229</id><snippet>def _handle(self, environ):
    try:
        environ['bottle.app'] = self
+       url_rewrite.apply(environ)    #Added mod_rewrite
        request.bind(environ)
        response.bind()
        route, args = self.router.match(environ)
        environ['route.handle'] = route
        environ['bottle.route'] = route
        environ['route.url_args'] = args
        return route.call(**args)
</snippet></ROW><ROW><id>13117229</id><snippet>###############################################################################
# Nippey #### 29.10.2012 #### mod_rewrite #####################################
###############################################################################
# This modification to bottly.py allows the application of rewrite rules to 
# requests _before_ they are processed by the routing system

class UrlRewriteException(BottleException):
    """ This is a base class for all rewrite related exceptions """

class UrlRewrite():
    """ This class processes every URL before is is passed to the routing system 
    In case one of the included rewrite rules matches the URL, the URL will be modified.
    New rules can be added via the .addRule(str, str, bool) method.
    For each requested URL, the method apply will be called with the environ variable as parameter.
    """

    def __init__(self):
        """ Initiates the rules variable """
        print("UrlRewrite init.")
        self.rules = []

    def addRule(self, match, replace, final=False):
        """ Add a new rule.
        match:   Regular expression to search for. Can be a string or a compiled regular expression
        replace: Replacement string. May use backreferences.
        final:   If a rule with &lt;final=True&gt; matches the URL, the evaluation will be stopped afterwards
        """
        print("UrlRewrite addRule.")
        if type(match) is not str and type(replace) is not str:
            raise UrlRewriteException
        pattern = re.compile(match)
        self.rules.append({'pattern':pattern, 'repl':replace, 'final':bool(final)})

    def apply(self, environ):
        """ Test a URL for a match of one of the saved rules and rewrite it if required
        environ: Environmental variable created by bottle on each request. Contains the PATH_INFO 
                 information, modification will happen with the reference to this variable.
        returns: Returns true if a rewrite has been executed. Not used by the main program (yet)
                 Original path will still be available as PATH_INFO_ORIGINAL in the environ variable
        """
        print("UrlRewrite apply.")
        rewritten = False
        url = environ['PATH_INFO']
        for rule in self.rules:             #Try to alppy each of the rules
            (url, noSubs) = rule['pattern'].subn(rule['repl'], url)
            if noSubs &gt; 0:
                rewritten = True
                if rule['final']:
                    break
        if rewritten:
            environ['PATH_INFO_ORIGINAL'] = environ['PATH_INFO']
            environ['PATH_INFO'] = url
            return True
        return False

    """ EXAMPLES:

    #Backreferences may be used by the replacement string
    from bottle import url_rewrite
    url_rewrite.addRule("^/he(l*)o", r"/by\1e", False)
    #Input:  "/hello/test_hello" 
    #Output: "/bye/test_hello"

    #All matching occurences will be replaced
    from bottle import url_rewrite
    url_rewrite.addRule("hello", "bye", False)
    #Input:  "/hello/test_hello" 
    #Output: "/bye/test_bye"

    #Rules will be applied in successive order
    from bottle import url_rewrite
    url_rewrite.addRule("hello", "hi", False)
    url_rewrite.addRule("hi", "bye", False)
    #Input:  "/hello/test_hello" 
    #Output: "/bye/test_bye"

    #Rules won't be re-applied from the start if one rule matches
    from bottle import url_rewrite
    url_rewrite.addRule("hi", "bye", False)
    url_rewrite.addRule("hello", "hi", False)
    #Input:  "/hello/test_hello" 
    #Output: "/hi/test_hi"

    #After applying a rule with &lt;final&gt; set to True, the evaluation will be finished
    from bottle import url_rewrite
    url_rewrite.addRule("hello", "hi", True)
    url_rewrite.addRule("hi", "bye", False)
    #Input:  "/hello/test_hello" 
    #Output: "/hi/test_hi"
    """
# END class UrlRewrite

url_rewrite = UrlRewrite()
# END ## mod_rewrite ## Nippey
</snippet></ROW><ROW><id>13117751</id><snippet>Counter()</snippet></ROW><ROW><id>13117751</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from collections import Counter

&gt;&gt;&gt; x='1234328732'
&gt;&gt;&gt; c=Counter(re.findall(r'\d',x))
&gt;&gt;&gt; [x for x in c if c[x]&gt;1]
['3', '2']


&gt;&gt;&gt; x='1231231234' 
&gt;&gt;&gt; c=Counter(re.findall(r'\d',x))
&gt;&gt;&gt; [x for x in c if c[x]&gt;1]
['1', '3', '2']
</snippet></ROW><ROW><id>13118112</id><snippet>import shutil
shutil.rmtree('/path/to/your/dir/')
</snippet></ROW><ROW><id>13118495</id><snippet>Message.get_payload().rsplit('\r\n', 2)[0]
</snippet></ROW><ROW><id>13118495</id><snippet>&gt;&gt;&gt; s = 'Hi,\r\n\r\nThis is my email.\r\n.\r\n'
&gt;&gt;&gt; print s.rsplit('\r\n', 2)[0]
Hi,

This is my email.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13118495</id><snippet>&lt;CRLF&gt;</snippet></ROW><ROW><id>13119101</id><snippet>os.system</snippet></ROW><ROW><id>13119101</id><snippet>s</snippet></ROW><ROW><id>13119101</id><snippet>os.waitpid</snippet></ROW><ROW><id>13119122</id><snippet>#!/bin/bash  
source /path/to/active
gunicorn_django -c $(pwd)/path/to/conffilefrom/presentworkingdirectory -D
</snippet></ROW><ROW><id>13119150</id><snippet>def test_cache():
    with mock.patch('myapp.myfile.signal_handler_post_save_user', autospec=True) as mocked_handler:
        post_save.connect(mocked_handler, sender=User, dispatch_uid='test_cache_mocked_handler')
        # do stuff that will call the post_save of User
    self.assert_equal(mocked_handler.call_count, 1)
</snippet></ROW><ROW><id>13119150</id><snippet>autospec=True</snippet></ROW><ROW><id>13119150</id><snippet>mock.patch</snippet></ROW><ROW><id>13119150</id><snippet>post_save.connect</snippet></ROW><ROW><id>13119150</id><snippet>MagicMock</snippet></ROW><ROW><id>13119196</id><snippet>results.rows</snippet></ROW><ROW><id>13119196</id><snippet>results[n]</snippet></ROW><ROW><id>13119196</id><snippet>n</snippet></ROW><ROW><id>13119196</id><snippet>name</snippet></ROW><ROW><id>13119196</id><snippet>headshot</snippet></ROW><ROW><id>13119196</id><snippet>import collections

def flatten(d, parent_key=''):
    items = []
    for k, v in d.items():
        new_key = parent_key + '_' + k if parent_key else k
        if isinstance(v, collections.MutableMapping):
            items.extend(flatten(v, new_key).items())
        else:
            items.append((new_key, v))
    return dict(items)

flattened_records = [flatten(record) for record in results.rows]
df = DataFrame(flattened_records)
</snippet></ROW><ROW><id>13119196</id><snippet>flatten</snippet></ROW><ROW><id>13119196</id><snippet>results.rows</snippet></ROW><ROW><id>13119430</id><snippet>.reshape</snippet></ROW><ROW><id>13119430</id><snippet>.reshape</snippet></ROW><ROW><id>13119430</id><snippet>__array_finalize__</snippet></ROW><ROW><id>13119430</id><snippet>MaskedArray</snippet></ROW><ROW><id>13119430</id><snippet>_update_from</snippet></ROW><ROW><id>13119430</id><snippet>_fill_value</snippet></ROW><ROW><id>13119430</id><snippet>_optinfo</snippet></ROW><ROW><id>13119430</id><snippet>_update_method</snippet></ROW><ROW><id>13119430</id><snippet>__array_finalize__</snippet></ROW><ROW><id>13119450</id><snippet>str.split()</snippet></ROW><ROW><id>13119450</id><snippet>&gt;&gt;&gt; strrs="LIFE IS FULL"
&gt;&gt;&gt; strrs.split()
['LIFE', 'IS', 'FULL']
</snippet></ROW><ROW><id>13119481</id><snippet>PATH</snippet></ROW><ROW><id>13119481</id><snippet>$ python --version
sh.exe: python: command not found
</snippet></ROW><ROW><id>13119481</id><snippet>C:\Python</snippet></ROW><ROW><id>13119481</id><snippet>PATH</snippet></ROW><ROW><id>13119481</id><snippet>C:\&gt; python --version
Python 2.7.2
</snippet></ROW><ROW><id>13119481</id><snippet>PATH</snippet></ROW><ROW><id>13119481</id><snippet>.bashrc</snippet></ROW><ROW><id>13119481</id><snippet>%USERPROFILE%</snippet></ROW><ROW><id>13119481</id><snippet>C:\&gt;notepad %USERPROFILE%\.bashrc
</snippet></ROW><ROW><id>13119481</id><snippet>C:\Python</snippet></ROW><ROW><id>13119481</id><snippet>PATH</snippet></ROW><ROW><id>13119481</id><snippet>$ echo export PATH=/c/Python:\$PATH &gt;&gt; ~/.bashrc
</snippet></ROW><ROW><id>13120193</id><snippet>ID | domain             | name
1  | site-a.example.com | John's blog
2  | site-b.example.com | David's blog
</snippet></ROW><ROW><id>13120193</id><snippet>ID | site_id | title                         | ...
1  | 1       | Some title for John's article | ...
2  | 1       | Another post by John          | ...
3  | 2       | David's blog post             | ...
</snippet></ROW><ROW><id>13120266</id><snippet>import</snippet></ROW><ROW><id>13120266</id><snippet>print "Importing module a"
var = ""
</snippet></ROW><ROW><id>13120266</id><snippet>import testa
testa.var = "test"
</snippet></ROW><ROW><id>13120266</id><snippet>import testa
print testa.var
</snippet></ROW><ROW><id>13120266</id><snippet>&gt;&gt;&gt; import testb
Importing module a
&gt;&gt;&gt; import testc
test
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13120266</id><snippet>var</snippet></ROW><ROW><id>13120279</id><snippet>csv</snippet></ROW><ROW><id>13120279</id><snippet>io.BytesIO</snippet></ROW><ROW><id>13120279</id><snippet>io.StringIO</snippet></ROW><ROW><id>13120279</id><snippet>UnicodeReader</snippet></ROW><ROW><id>13120279</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>13120547</id><snippet>self.root.deiconify()</snippet></ROW><ROW><id>13120712</id><snippet>def find_images(arg, directory, files):
    for file_ in files:
        filename, extension = os.path.splitext(file_)
        if extension in ['.jpeg', '.jpg', '.png']:
            get_exif_data(os.path.join(directory, file_))

os.path.walk(path, find_image, None)
</snippet></ROW><ROW><id>13120979</id><snippet>zip(*...)</snippet></ROW><ROW><id>13120979</id><snippet>list(zip(*...))</snippet></ROW><ROW><id>13120979</id><snippet>cols = zip(*data_set_tup)
normal_cols = [cols[0]] # first column doesn't need to be normalised
for j in cols[1:]:
    max_j = max(j)
    min_j = min(j)
    normal_cols.append(tuple((k-min_j)/(max_j-min_j) for k in j)

normal_list = zip(*normal_cols)
</snippet></ROW><ROW><id>13121051</id><snippet>from datetime import timedelta

start=int(timedelta(hours=1, minutes=46, seconds=40).total_seconds())

YouTubeVideo("Pi9NpxAvYSs", start=start, autoplay=1, theme="light", color="red")
</snippet></ROW><ROW><id>13121051</id><snippet>from datetime import timedelta

class YouTubeVideo(object):
    def __init__(self, id, width=400, height=300, start=timedelta()):
        self.id = id
        self.width = width
        self.height = height
        self.start = start.total_seconds()

    def _repr_html_(self):
        return """
            &lt;iframe
                width="%i"
                height="%i"
                src="http://www.youtube.com/embed/%s?start=%i"
                frameborder="0"
                allowfullscreen
            &gt;&lt;/iframe&gt;
        """%(self.width, self.height, self.id, self.start)
</snippet></ROW><ROW><id>13121051</id><snippet>YouTubeVideo("Pi9NpxAvYSs", start=timedelta(hours=1, minutes=47, seconds=3))
</snippet></ROW><ROW><id>13121276</id><snippet>re.compile(r'&lt;[^&gt;]+&gt;').sub('', string).split()</snippet></ROW><ROW><id>13121525</id><snippet>0x</snippet></ROW><ROW><id>13121525</id><snippet>0x</snippet></ROW><ROW><id>13121628</id><snippet>&gt;&gt;&gt; with open("data1.txt") as f:
...     lines=f.read()
...     spl=lines.split("&lt;NEW ARTICLE&gt;")[1:]
...     dic=dict((i,x.strip()) for i,x in enumerate(spl))
...     print dic
... 
{0: 'Take a look at \nwhat I found.',
 1: 'It looks like something\ndark and shiny.',
 2: 'But how can something be dark\nand shiny at the same time?',
 3: 'I have no idea.'}
</snippet></ROW><ROW><id>13122090</id><snippet>os.listdir</snippet></ROW><ROW><id>13122090</id><snippet>sorted</snippet></ROW><ROW><id>13122090</id><snippet>key</snippet></ROW><ROW><id>13122404</id><snippet>0b1</snippet></ROW><ROW><id>13122404</id><snippet>0b11111111</snippet></ROW><ROW><id>13122404</id><snippet>0b1111111111111111</snippet></ROW><ROW><id>13122404</id><snippet>&gt; x = -1
&gt; print(bin(x &amp; 0xffffffff)) # 32-bit output
0b11111111111111111111111111111111
</snippet></ROW><ROW><id>13122404</id><snippet>0</snippet></ROW><ROW><id>13122486</id><snippet>os.listdir</snippet></ROW><ROW><id>13122486</id><snippet>import os
&gt;&gt;&gt; os.listdir(u'c:\\')
[u'$Recycle.Bin', u'Config.Msi', u'Documents and Settings', u'hiberfil.sys', (...)]
</snippet></ROW><ROW><id>13122717</id><snippet>B</snippet></ROW><ROW><id>13122717</id><snippet>A</snippet></ROW><ROW><id>13122717</id><snippet>class B(A):
    def __init__(self, some, args):
        A.__init__(self, some, args)

    @classmethod
    def fromA(cls, theA, extra=some_default):
        newB = cls(theA.some, theA.args)
        newB.extra = extra
        return newB
</snippet></ROW><ROW><id>13122917</id><snippet>items = raw_string.cssselect('div.items div.item')

texts = [item.xpath('br[1]/preceding-sibling::node()') for item in items]
</snippet></ROW><ROW><id>13122917</id><snippet>br[1]</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>div.item</snippet></ROW><ROW><id>13122917</id><snippet>preceding-sibling::</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>node()</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>hr</snippet></ROW><ROW><id>13122917</id><snippet>html = """&lt;div class="items"&gt;
  &lt;div class="item"&gt;
   &lt;br&gt;
   ItemLine1 ItemLine1 ItemLine1
   &lt;a href=""&gt;item&lt;/a&gt;
   Itemline1-b
   &lt;br&gt; 
   &lt;a class="z"&gt;item2&lt;/a&gt;
   ItemLine2 ItemLine2 ItemLine2
   &lt;br&gt;&lt;br&gt;
   Itemline3
 &lt;/div&gt;
 &lt;br&gt;
&lt;/div&gt;"""

doc = lxml.html.fromstring(html)
itemlist = doc.cssselect('div.items div.item')
</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>text</snippet></ROW><ROW><id>13122917</id><snippet>tail</snippet></ROW><ROW><id>13122917</id><snippet>def paras_by_br_nodes(parent):
    """Return a list of node children of parent (including text nodes) grouped by "paragraphs" which are delimited by &lt;br/&gt; elements."""
    paralist = []
    paras = []
    for node in parent.xpath('node()'):
        if getattr(node, 'tag', None) == 'br':
            paralist.append(paras)
            paras = []
        else:
            paras.append(node)
        paralist.append(paras)
        return paralist


print paras_by_br_nodes(itemlist[0])
</snippet></ROW><ROW><id>13122917</id><snippet>[['\n       '],
 ['\n       ItemLine1 ItemLine1 ItemLine1\n\t\t', &lt;Element a at 0x10498a350&gt;, '\n\t\tItemline1-b\n       '],
 [&lt;Element a at 0x10498a230&gt;, '\n       ItemLine2 ItemLine2 ItemLine2\n       '],
 [], 
 ['\n       Itemline3\n ']]
</snippet></ROW><ROW><id>13122917</id><snippet>text</snippet></ROW><ROW><id>13122917</id><snippet>tail</snippet></ROW><ROW><id>13122917</id><snippet>def paras_by_br_text(parent):
    paralist=[]
    para=[parent.text]
    for item in parent:
        if item.tag=='br':
            paralist.append(para)
            para = [item.tail]
        else:
            para.append(item)
    paralist.append(para)
    return paralist

print paras_by_br_text(itemlist[0])
</snippet></ROW><ROW><id>13122917</id><snippet>br.tail</snippet></ROW><ROW><id>13122917</id><snippet>parent.text</snippet></ROW><ROW><id>13122917</id><snippet>[['\n       '],
 ['\n       ItemLine1 ItemLine1 ItemLine1\n\t\t', &lt;Element a at 0x1042f5170&gt;],
 [&lt;Element a at 0x1042f5290&gt;],
 [],
 ['\n       Itemline3\n ']]
</snippet></ROW><ROW><id>13122917</id><snippet>br</snippet></ROW><ROW><id>13122917</id><snippet>p</snippet></ROW><ROW><id>13122917</id><snippet>def paras_by_br(parent):
    paralist = []
    para = lxml.html.etree.Element('para')
    if parent.text:
        para.text = parent.text
    for item in parent:
        if item.tag=='br':
            paralist.append(para)
            para = lxml.html.etree.Element('para')
            if item.tail:
                para.text = item.tail
        else:
            para.append(item)
    return paralist

paralist = paras_by_br(itemlist[0])

print "\n--------\n".join(lxml.html.etree.tostring(para) for para in paralist)
</snippet></ROW><ROW><id>13122917</id><snippet>&lt;para&gt;
       &lt;/para&gt;
--------
&lt;para&gt;
       ItemLine1 ItemLine1 ItemLine1
        &lt;a href=""&gt;item&lt;/a&gt;
        Itemline1-b
       &lt;/para&gt;
--------
&lt;para&gt;&lt;a class="z"&gt;item2&lt;/a&gt;
       ItemLine2 ItemLine2 ItemLine2
       &lt;/para&gt;
--------
&lt;para/&gt;
</snippet></ROW><ROW><id>13122917</id><snippet>para</snippet></ROW><ROW><id>13123189</id><snippet>In [55]: df
Out[55]:
             counts
ch det time
1  1   0        123
   2   0        121
   3   0        125
2  1   0        212
   2   0        210
   3   0        210
1  1   1        124
   2   1        125
   3   1        123
2  1   1        210
   2   1        209
   3   1        213

In [56]: df.index
Out[56]:
MultiIndex
[(1L, 1L, 0L) (1L, 2L, 0L) (1L, 3L, 0L) (2L, 1L, 0L) (2L, 2L, 0L)
 (2L, 3L, 0L) (1L, 1L, 1L) (1L, 2L, 1L) (1L, 3L, 1L) (2L, 1L, 1L)
 (2L, 2L, 1L) (2L, 3L, 1L)]

In [57]: df.index.names
Out[57]: ['ch', 'det', 'time']

In [58]: df.groupby(level=['ch', 'time']).mean()
Out[58]:
             counts
ch time
1  0     123.000000
   1     124.000000
2  0     210.666667
   1     210.666667
</snippet></ROW><ROW><id>13123854</id><snippet>change_form.html</snippet></ROW><ROW><id>13123854</id><snippet>{% extends "admin/change_form.html" %}
</snippet></ROW><ROW><id>13123854</id><snippet>{% extends "admin/guardian/model/change_form.html" %}
</snippet></ROW><ROW><id>13123854</id><snippet>GuardedModelAdmin</snippet></ROW><ROW><id>13123854</id><snippet>class MyModel(GuardedModelAdmin):
    change_form_template = 'admin/appname/mymodel/change_form.html'
</snippet></ROW><ROW><id>13123854</id><snippet>change_form.html</snippet></ROW><ROW><id>13123880</id><snippet>render_to_response('foo.html', {..., 'range': range(9), ...}, ...)
</snippet></ROW><ROW><id>13123880</id><snippet>{% for i in range %}
    {% include 'feeds/feature.html'%}
{% endfor %}
</snippet></ROW><ROW><id>13123880</id><snippet>{% for i in "123456789" %}
    {% include 'feeds/feature.html'%}
{% endfor %}
</snippet></ROW><ROW><id>13124061</id><snippet>0x0d</snippet></ROW><ROW><id>13124061</id><snippet>0x0a</snippet></ROW><ROW><id>13124061</id><snippet>0x0a</snippet></ROW><ROW><id>13124085</id><snippet>{% include "name_snippet.html" with person="Jane" greeting="Hello" %}</snippet></ROW><ROW><id>13124085</id><snippet>{% include "name_snippet.html" with greeting="Hi" only %}</snippet></ROW><ROW><id>13124146</id><snippet>shopify.Asset.find()</snippet></ROW><ROW><id>13124146</id><snippet>asset = shopify.Asset.find(assets[0].key, theme_id=assets[0].theme_id)
print asset.value
</snippet></ROW><ROW><id>13124322</id><snippet>db.Model</snippet></ROW><ROW><id>13124333</id><snippet>\x</snippet></ROW><ROW><id>13124333</id><snippet>\n</snippet></ROW><ROW><id>13124333</id><snippet>\'</snippet></ROW><ROW><id>13124333</id><snippet>repr()</snippet></ROW><ROW><id>13124333</id><snippet>&gt;&gt;&gt; chr(65)
'A'
&gt;&gt;&gt; chr(11)
'\x0b'
</snippet></ROW><ROW><id>13124333</id><snippet>hex()</snippet></ROW><ROW><id>13124333</id><snippet>.encode('hex')</snippet></ROW><ROW><id>13124333</id><snippet>0x</snippet></ROW><ROW><id>13124333</id><snippet>'%x'</snippet></ROW><ROW><id>13124333</id><snippet>'%X'</snippet></ROW><ROW><id>13124333</id><snippet>&gt;&gt;&gt; hex(11)
'0xb'
&gt;&gt;&gt; '\x0b'.encode('hex')
'0b'
&gt;&gt;&gt; '%x' % (11,)
'b'
&gt;&gt;&gt; '%X' % (11,)
'B'
</snippet></ROW><ROW><id>13124333</id><snippet>str(number)</snippet></ROW><ROW><id>13124333</id><snippet>struct</snippet></ROW><ROW><id>13124333</id><snippet>xx</snippet></ROW><ROW><id>13124333</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; xx = '\x03\xff'
&gt;&gt;&gt; struct.pack('&lt;H', *struct.unpack('&gt;H', xx))
'\xff\x03'
</snippet></ROW><ROW><id>13124354</id><snippet>self.fig.canvas.draw()</snippet></ROW><ROW><id>13124354</id><snippet>def onpick(self,event):
    x = event.mouseevent.xdata
    y = event.mouseevent.ydata
    L =  self.ax.axvline(x=x)
    self.fig.canvas.draw()
</snippet></ROW><ROW><id>13124853</id><snippet>    def send_stuff(data):
        self.transport.write(data, (host, port))
</snippet></ROW><ROW><id>13124853</id><snippet>#Now how to I access send_stuff
</snippet></ROW><ROW><id>13124853</id><snippet># Save the listener instance in a local variable
network = listener()
reactor.listenUDP(10000, network)

# Use the local variable to connect a GUI event to the network
MyGUIApplication().connect_button("send_button", network.send_stuff)

# Use the local variable to implement a signal handler that sends data
def report_signal(*ignored):
    reactor.callFromThread(network.send_stuff, "got sigint")
signal.signal(signal.SIGINT, report_signal)

# Pass the object referenced by the local variable to the initializer of another
# network-related object so it can save the reference and later call methods on it
# when it gets events it wants to respond to.
reactor.listenUDP(20000, AnotherDatagramProtocol(network))
</snippet></ROW><ROW><id>13124859</id><snippet>def drawArrow(A, B):
    plt.arrow(A[0], A[1], B[0] - A[0], B[1] - A[1],
              head_width=3, length_includes_head=True)
</snippet></ROW><ROW><id>13125110</id><snippet>usertable</snippet></ROW><ROW><id>13125110</id><snippet>query = 'select * from some.{usertable}.userinfo'.format(usertable=usertable)
</snippet></ROW><ROW><id>13125197</id><snippet>super</snippet></ROW><ROW><id>13125197</id><snippet>super</snippet></ROW><ROW><id>13125197</id><snippet>object</snippet></ROW><ROW><id>13125197</id><snippet>class FirstBase(object):
    def __init__(self, detail_text=None, backed_object=None,
                 window=None, droppable_zone_obj=None,
                 bound_zone_obj=None, on_drag_opacity=None, **kwargs):
        super(FirstBase, self).__init__(**kwargs)

class SecondBase(object):
    def __init__(self, size=(0,0), texture=None, desc="",
                 backed_object=None, window=None, **kwargs):
        super(SecondBase, self).__init__(**kwargs)

class Child(FirstBase, SecondBase):
    def __init__(self, **kwargs):
        super(Child, self).__init__(**kwargs)
</snippet></ROW><ROW><id>13125197</id><snippet>&gt;&gt;&gt; Child()
&lt;__main__.Child object at 0x7f4aef413bd0&gt;
&gt;&gt;&gt; Child(detail_text="abc")
&lt;__main__.Child object at 0x7f4aef413cd0&gt;
&gt;&gt;&gt; Child(bogus_kw=123)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "test.py", line 14, in __init__
    super(Child, self).__init__(**kwargs)
  File "test.py", line 5, in __init__
    super(FirstBase, self).__init__(**kwargs)
  File "test.py", line 10, in __init__
    super(SecondBase, self).__init__(**kwargs)
TypeError: object.__init__() takes no parameters
</snippet></ROW><ROW><id>13125374</id><snippet>import SocketServer
import SimpleHTTPServer

PORT = 8000

class MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        import your_module
        return your_module.do_something()

httpd = SocketServer.TCPServer(('', PORT), MyHandler)
print "serving at port", PORT
httpd.serve_forever()
</snippet></ROW><ROW><id>13125479</id><snippet>from google.appengine.ext import db

model_class = db.class_for_kind("my_model")     # this method is not published
query = model_class.all()
print query.count()
</snippet></ROW><ROW><id>13125479</id><snippet>__import__("my_model_path", globals(), locals(), ["my_model"]], -1)
</snippet></ROW><ROW><id>13125553</id><snippet>r+</snippet></ROW><ROW><id>13125553</id><snippet>seek(0)</snippet></ROW><ROW><id>13125559</id><snippet>do_atom()</snippet></ROW><ROW><id>13125559</id><snippet>def run(self):
    atoms = # get atoms
    for atom in atoms:
        if self.stop_at_next_check:
             break
        self.current_atom = atom
        atom.do_work()
</snippet></ROW><ROW><id>13125572</id><snippet>map</snippet></ROW><ROW><id>13125572</id><snippet>split</snippet></ROW><ROW><id>13125572</id><snippet>float</snippet></ROW><ROW><id>13125572</id><snippet>with open('data.txt') as f:
    for l in f:
        name,hours = l.split(',',1)
        print '%s:%s' % (name, sum([float(x) for x in hours.split(',')]))
</snippet></ROW><ROW><id>13125572</id><snippet>Willy:67.0
Georgy:94.5
Addi:60.0
Lisy:52.0
Willy:70.0
</snippet></ROW><ROW><id>13125572</id><snippet>with open('data.txt') as f:
    d = {}
    for l in f:
        name,hours = l.split(',',1)
        if name in d:
            d[name] = d[name] +  int(sum([float(x) for x in hours.split(',')]))
        else:
            d[name] = int(sum([float(x) for x in hours.split(',')]))
for n in d:
    print '%s:%s' % (n, d[n])
</snippet></ROW><ROW><id>13125572</id><snippet>Willy:137.0
Georgy:94.5
Addi:60.0
Lisy:52.0
</snippet></ROW><ROW><id>13125877</id><snippet>def connect_to(db, *args):
    if db == "MySQL":
        return MySQL(*args)
    elif db == "Oracle":
        return Oracle(*args)
    else:
        raise ValueError("unknown database type: %r" % db)
</snippet></ROW><ROW><id>13125877</id><snippet>isinstance</snippet></ROW><ROW><id>13126044</id><snippet>split()</snippet></ROW><ROW><id>13126044</id><snippet>int()</snippet></ROW><ROW><id>13126044</id><snippet>map()</snippet></ROW><ROW><id>13126044</id><snippet>In [10]: lis=['25 32 49 50 61 72 78 41\n',
   ....:  '41 51 69 72 33 81 24 66\n']

In [11]: [map(int,x.split()) for x in lis]
Out[11]: [[25, 32, 49, 50, 61, 72, 78, 41], [41, 51, 69, 72, 33, 81, 24, 66]]
</snippet></ROW><ROW><id>13126044</id><snippet>In [14]: [[int(y) for y in x.split()] for x in lis]
Out[14]: [[25, 32, 49, 50, 61, 72, 78, 41], [41, 51, 69, 72, 33, 81, 24, 66]]
</snippet></ROW><ROW><id>13126044</id><snippet>readlines()</snippet></ROW><ROW><id>13126044</id><snippet>with open("file") as f:
    lis=[map(int,line.split()) for line in f]
    print lis
...
[[25, 32, 49, 50, 61, 72, 78, 41], [41, 51, 69, 72, 33, 81, 24, 66]]
</snippet></ROW><ROW><id>13126075</id><snippet>np.loadtxt</snippet></ROW><ROW><id>13126075</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>13126075</id><snippet>textscan</snippet></ROW><ROW><id>13126398</id><snippet>&lt;object&gt;</snippet></ROW><ROW><id>13126398</id><snippet>&lt;param&gt;</snippet></ROW><ROW><id>13126398</id><snippet>&lt;embed&gt;</snippet></ROW><ROW><id>13126398</id><snippet>SANITIZE_HTML</snippet></ROW><ROW><id>13126398</id><snippet>feedparser.SANITIZE_HTML = False
</snippet></ROW><ROW><id>13126398</id><snippet>_HTMLSanitizer.acceptable_elements</snippet></ROW><ROW><id>13126398</id><snippet>_HTMLSanitizer.acceptable_elements.update(['object', 'param', 'embed'])
</snippet></ROW><ROW><id>13126398</id><snippet>lxml.html.clean</snippet></ROW><ROW><id>13126398</id><snippet>host_whitelist</snippet></ROW><ROW><id>13126420</id><snippet>def autodestroy(event):
    event.widget.delete("current")
</snippet></ROW><ROW><id>13126420</id><snippet>def clicked(event):
    canvas = event.widget
</snippet></ROW><ROW><id>13126420</id><snippet>CURRENT</snippet></ROW><ROW><id>13126420</id><snippet>    rect = canvas.find_withtag("current")[0]
</snippet></ROW><ROW><id>13126420</id><snippet>find_closest</snippet></ROW><ROW><id>13126420</id><snippet>find_overlapping</snippet></ROW><ROW><id>13126420</id><snippet>find_enclosed</snippet></ROW><ROW><id>13126420</id><snippet>    canvas = event.widget
    x = canvas.canvasx(event.x)
    y = canvas.canvasy(event.y)
    rect = canvas.find_closest(x, y)[0]
</snippet></ROW><ROW><id>13126420</id><snippet>find_</snippet></ROW><ROW><id>13126420</id><snippet>canvas.delete</snippet></ROW><ROW><id>13126420</id><snippet>    canvas.delete(rect)
</snippet></ROW><ROW><id>13126420</id><snippet>def autodestroy(event):
    event.widget.delete("current")
</snippet></ROW><ROW><id>13126420</id><snippet>Tkinter.CURRENT</snippet></ROW><ROW><id>13126420</id><snippet>"current"</snippet></ROW><ROW><id>13126468</id><snippet>conditions.list</snippet></ROW><ROW><id>13126468</id><snippet>conditionTable = None     # shouldn't call it list if it's a dict

def get_cond_table():
    global conditionTable
    if conditionTable is None:
        conditionTable = listToDictionary(conditions.list)
    return conditionTable
</snippet></ROW><ROW><id>13126468</id><snippet>conditionList</snippet></ROW><ROW><id>13126468</id><snippet>get_cond_table()</snippet></ROW><ROW><id>13126582</id><snippet>.*</snippet></ROW><ROW><id>13126582</id><snippet>?</snippet></ROW><ROW><id>13126582</id><snippet>r'\[.*?(?P&lt;cost&gt;\d+(?:\.\d+)?).*\]'
</snippet></ROW><ROW><id>13126582</id><snippet>.number</snippet></ROW><ROW><id>13126582</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; costre = re.compile(r'\[.*?(?P&lt;cost&gt;\d+(?:\.\d+)?).*\]')
&gt;&gt;&gt; costre.match('[Post-Avatar Mode: 0 MP]').groups()
('0',)
&gt;&gt;&gt; costre.match('[Post-Avatar Mode: 5.50 MP]').groups()
('5.50',)
&gt;&gt;&gt; costre.match('[Post-Avatar Mode: 1.2 MP]').groups()
('1.2',)
</snippet></ROW><ROW><id>13126598</id><snippet>winner_result</snippet></ROW><ROW><id>13126598</id><snippet>return</snippet></ROW><ROW><id>13126598</id><snippet>return</snippet></ROW><ROW><id>13126598</id><snippet>if/elif/else</snippet></ROW><ROW><id>13126598</id><snippet>winner_result</snippet></ROW><ROW><id>13126598</id><snippet>winner_result = 'win'</snippet></ROW><ROW><id>13126598</id><snippet>winner_result == 'win'</snippet></ROW><ROW><id>13126598</id><snippet>winner_result</snippet></ROW><ROW><id>13126598</id><snippet>win/lose/tie</snippet></ROW><ROW><id>13126598</id><snippet>main</snippet></ROW><ROW><id>13126598</id><snippet>winner_result</snippet></ROW><ROW><id>13126598</id><snippet>main</snippet></ROW><ROW><id>13126598</id><snippet>global win, lose, tie</snippet></ROW><ROW><id>13126598</id><snippet>winner_result</snippet></ROW><ROW><id>13126739</id><snippet>clean_&lt;fieldname&gt;</snippet></ROW><ROW><id>13126739</id><snippet>cleaned_data</snippet></ROW><ROW><id>13126739</id><snippet>def clean_name(self):
    cleaned_data = self.cleaned_data

    name = cleaned_data.get('name', '')
    if MyModel.objects.filter(name__iexact=name).exists():
        raise forms.ValidationError(_(u"This already exists."))
    return name
</snippet></ROW><ROW><id>13126830</id><snippet># in your __init__ method:
def __init__(...):
    # ...
    self.add_event_handler('message', self.recv_message)

def recv_message(self, msg):
    # You'll probably want to ignore error and headline messages.
    # If you want to handle group chat messages, add 'groupchat' to the list.
    if msg['type'] in ('chat', 'normal'):
        print "%s says: %s" % (msg['from'], msg['body'])
</snippet></ROW><ROW><id>13126830</id><snippet>SendMsgBot</snippet></ROW><ROW><id>13126837</id><snippet>from colorama import Fore, init
import re
init()

tagged_text = [('Stately', 'RB'), (',', ','), ('plump', 'VB'), ('Buck', 'NNP'), ('Mulligan', 'NNP'), ('came', 'VBD'),
                ('from', 'IN'), ('the', 'DT'), ('stairhead', 'NN'), (',', ','), ('bearing', 'VBG'), ('a', 'DT'), 
                ('bowl', 'NN'), ('of', 'IN'), ('lather', 'NN'), ('on', 'IN'), ('which', 'WDT'), ('a', 'DT'),
                ('mirror', 'NN'), ('and', 'CC'), ('a', 'DT'),('razor', 'NN'), ('lay', 'NN'), ('crossed', 'VBD'),
                ('.', '.'), ('The', 'DET'), ('function', 'NN'), ('f', 'SYM'), ('(','('),('x','SYM'),(',',','),
                ('y','SYM'),(')',')'),('takes','VB'), ('two', 'CD'), ('arguments', 'NN'), ('.','.')]
origtext = 'Stately, plump Buck Mulligan came from the stairhead, bearing a bowl of lather on which a mirror and a razor lay crossed. The function f(x,y) takes two arguments.'

colordict = {'VB': Fore.GREEN, 'VBD': Fore.GREEN, 'NN': Fore.BLUE}

colorwords = ''
for word, tag in tagged_text:
    color = Fore.BLACK
    word = re.match(r'\s*%s\s*' % re.escape(word), origtext).group()
    origtext = origtext.split(word,1)[1]
    if tag in colordict:
        color = colordict[tag]
    colorwords += color + word

print colorwords
</snippet></ROW><ROW><id>13126915</id><snippet>traceback.print_stack(limit=2)
</snippet></ROW><ROW><id>13126926</id><snippet>exec</snippet></ROW><ROW><id>13126926</id><snippet>__main__</snippet></ROW><ROW><id>13126926</id><snippet>sys.modules['__main__'].__setattr__('xxx', 42)
</snippet></ROW><ROW><id>13126926</id><snippet>sys.modules['__main__'].__delattr__('xxx')
</snippet></ROW><ROW><id>13126926</id><snippet>globals()</snippet></ROW><ROW><id>13126926</id><snippet>globals()['xxx'] = 42
</snippet></ROW><ROW><id>13126926</id><snippet>del globals()['xxx']
</snippet></ROW><ROW><id>13126926</id><snippet>globals()</snippet></ROW><ROW><id>13126926</id><snippet>sys.modules[__name__].__dict__</snippet></ROW><ROW><id>13126926</id><snippet>eval</snippet></ROW><ROW><id>13126934</id><snippet>lst</snippet></ROW><ROW><id>13126934</id><snippet>if (len(set(lst)) &lt;= 1):
    ....
</snippet></ROW><ROW><id>13127114</id><snippet>uuid1()</snippet></ROW><ROW><id>13127150</id><snippet>HTMLParser</snippet></ROW><ROW><id>13127150</id><snippet>from HTMLParser import HTMLParser

class extract_href(HTMLParser):
    def handle_starttag(self, tag, attrs):
        if tag == "a":
            for key, val in attrs:
                if key == 'href':
                    print val

parser = extract_href()
parser.feed("""&lt;p&gt;&lt;a href='www.stackoverflow.com'&gt;link&lt;/a&gt;&lt;/p&gt;""")
</snippet></ROW><ROW><id>13127156</id><snippet>dateutil</snippet></ROW><ROW><id>13127156</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse('Mon, 29 Oct 2012 13:07:07 GMT')
datetime.datetime(2012, 10, 29, 13, 7, 7, tzinfo=tzutc())
&gt;&gt;&gt; parse('2012-10-29 12:57:08')
datetime.datetime(2012, 10, 29, 12, 57, 8)
</snippet></ROW><ROW><id>13127156</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13127156</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>13127156</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime('Mon, 29 Oct 2012 13:07:07 GMT', '%a, %d %b %Y %H:%M:%S %Z')
datetime.datetime(2012, 10, 29, 13, 7, 7)
</snippet></ROW><ROW><id>13127401</id><snippet>return</snippet></ROW><ROW><id>13127401</id><snippet>for name in tree.iter('name'):
    if name.text.lower() == nome.lower():
        c = Context({'id' : name.text})
        r1 = HttpResponse(t.render(c), mimetype='application/xml')
        return r1
 # move return indentation to match here, i.e after the for loop completes
</snippet></ROW><ROW><id>13127401</id><snippet>return</snippet></ROW><ROW><id>13127401</id><snippet>else</snippet></ROW><ROW><id>13127401</id><snippet>for name in tree.iter('name'):
    if name.text.lower() == nome.lower():
        c = Context({'id' : name.text})
        r1 = HttpResponse(t.render(c), mimetype='application/xml')
    else:  r1 = HttpResponse(t.render(Context({'id' : 'prova'})), mimetype='application/xml')
return r1
</snippet></ROW><ROW><id>13127673</id><snippet>gallery_list = tuple(chain.from_iterable(grade_pk_categories,grade_pk_galleries,grade_k_categories,grade_k_galleries,grade_1_categories,grade_1_galleries,grade_2_categories,grade_2_galleries,grade_3_categories,grade_3_galleries,grade_4_categories,grade_4_galleries,grade_5_categories,grade_5_galleries,grade_6_categories,grade_6_galleries,grade_7_categories,grade_7_galleries,grade_8_categories,grade_8_galleries))
</snippet></ROW><ROW><id>13127673</id><snippet>set</snippet></ROW><ROW><id>13127673</id><snippet>gallery_list = list(sorted(frozenset(gallery_list), key=attrgetter('display_order')))
</snippet></ROW><ROW><id>13127673</id><snippet>for loop</snippet></ROW><ROW><id>13127673</id><snippet>grade_titles = ['pre-k', 'k', '1', '2', '3', '4', '5', '6', '7', '8']
gallery_list = []
for grade_title in grade_titles:
    grade = GradeLevel.objects.prefetch_related().get(title=grade_title)
    grade_categories = grade_pk.grade_cats.filter(active=True,featured=True)
    grade_galleries = grade_pk.grade_curriculum.filter(active=True,featured=True)
    gallery_list.extend(grade_categories)
    gallery_list.extend(grade_galleries)
gallery_list = list(sorted(frozenset(gallery_list), key=attrgetter('display_order')))
</snippet></ROW><ROW><id>13127868</id><snippet>offset_x</snippet></ROW><ROW><id>13127868</id><snippet>offset_y</snippet></ROW><ROW><id>13127868</id><snippet>x + offset_x</snippet></ROW><ROW><id>13127868</id><snippet>y + offset_y</snippet></ROW><ROW><id>13127956</id><snippet>black = pygame.Color('black')
</snippet></ROW><ROW><id>13127956</id><snippet>while True:
    Board.fill(black)
    pygame.draw.rect(Board, (0, 0, 255), (player.x, player.y, 12, 12))
</snippet></ROW><ROW><id>13128207</id><snippet>imp</snippet></ROW><ROW><id>13128207</id><snippet>__import__</snippet></ROW><ROW><id>13128207</id><snippet>__init__.py</snippet></ROW><ROW><id>13128207</id><snippet>__init__.py</snippet></ROW><ROW><id>13128207</id><snippet>__all__</snippet></ROW><ROW><id>13128207</id><snippet>from yourpackage import *</snippet></ROW><ROW><id>13128386</id><snippet>os.fork</snippet></ROW><ROW><id>13128386</id><snippet>import multiprocessing as mp
import numpy as np
import logging
import os

logger = mp.log_to_stderr(logging.WARNING)

def free_memory():
    total = 0
    with open('/proc/meminfo', 'r') as f:
        for line in f:
            line = line.strip()
            if any(line.startswith(field) for field in ('MemFree', 'Buffers', 'Cached')):
                field, amount, unit = line.split()
                amount = int(amount)
                if unit != 'kB':
                    raise ValueError(
                        'Unknown unit {u!r} in /proc/meminfo'.format(u = unit))
                total += amount
    return total

def worker(i):
    x = data[i,:].sum()    # Exercise access to data
    logger.warn('Free memory: {m}'.format(m = free_memory()))

def main():
    procs = [mp.Process(target = worker, args = (i, )) for i in range(4)]
    for proc in procs:
        proc.start()
    for proc in procs:
        proc.join()

logger.warn('Initial free: {m}'.format(m = free_memory()))
N = 15000
data = np.ones((N,N))
logger.warn('After allocating data: {m}'.format(m = free_memory()))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13128386</id><snippet>[WARNING/MainProcess] Initial free: 2522340
[WARNING/MainProcess] After allocating data: 763248
[WARNING/Process-1] Free memory: 760852
[WARNING/Process-2] Free memory: 757652
[WARNING/Process-3] Free memory: 757264
[WARNING/Process-4] Free memory: 756760
</snippet></ROW><ROW><id>13128386</id><snippet>float64</snippet></ROW><ROW><id>13128386</id><snippet>__main__</snippet></ROW><ROW><id>13128437</id><snippet>print(...)</snippet></ROW><ROW><id>13128437</id><snippet>yield ...</snippet></ROW><ROW><id>13128437</id><snippet>list(individual(nest))  #this is prefered
</snippet></ROW><ROW><id>13128437</id><snippet>[ x for x in individual(nest) ]  #This is just for demonstration.
</snippet></ROW><ROW><id>13128601</id><snippet>E={A:(B,C,D)for A in A}</snippet></ROW><ROW><id>13128601</id><snippet>def create_database(f)
    """ Returns a populated dictionary.  Iterates over the input 'f'. """
    data = {}
    for line in f:
        # add stuff to data
        key, datum = parse_line(line)
        data[key] = datum
    return data
</snippet></ROW><ROW><id>13128650</id><snippet>s = s.replace("z", "s")
s.split("s")
</snippet></ROW><ROW><id>13128705</id><snippet>super()</snippet></ROW><ROW><id>13128705</id><snippet>/* Cooperative 'super' */

typedef struct {
    PyObject_HEAD
    PyTypeObject *type;
    PyObject *obj;
    PyTypeObject *obj_type;
} superobject;

static PyMemberDef super_members[] = {
    {"__thisclass__", T_OBJECT, offsetof(superobject, type), READONLY,
     "the class invoking super()"},
    {"__self__",  T_OBJECT, offsetof(superobject, obj), READONLY,
     "the instance invoking super(); may be None"},
    {"__self_class__", T_OBJECT, offsetof(superobject, obj_type), READONLY,
     "the type of the instance invoking super(); may be None"},
    {0}
};

static void
super_dealloc(PyObject *self)
{
    superobject *su = (superobject *)self;

    _PyObject_GC_UNTRACK(self);
    Py_XDECREF(su-&gt;obj);
    Py_XDECREF(su-&gt;type);
    Py_XDECREF(su-&gt;obj_type);
    Py_TYPE(self)-&gt;tp_free(self);
}

static PyObject *
super_repr(PyObject *self)
{
    superobject *su = (superobject *)self;

    if (su-&gt;obj_type)
        return PyUnicode_FromFormat(
            "&lt;super: &lt;class '%s'&gt;, &lt;%s object&gt;&gt;",
            su-&gt;type ? su-&gt;type-&gt;tp_name : "NULL",
            su-&gt;obj_type-&gt;tp_name);
    else
        return PyUnicode_FromFormat(
            "&lt;super: &lt;class '%s'&gt;, NULL&gt;",
            su-&gt;type ? su-&gt;type-&gt;tp_name : "NULL");
}

static PyObject *
super_getattro(PyObject *self, PyObject *name)
{
    superobject *su = (superobject *)self;
    int skip = su-&gt;obj_type == NULL;

    if (!skip) {
        /* We want __class__ to return the class of the super object
           (i.e. super, or a subclass), not the class of su-&gt;obj. */
        skip = (PyUnicode_Check(name) &amp;&amp;
            PyUnicode_GET_LENGTH(name) == 9 &amp;&amp;
            PyUnicode_CompareWithASCIIString(name, "__class__") == 0);
    }

    if (!skip) {
        PyObject *mro, *res, *tmp, *dict;
        PyTypeObject *starttype;
        descrgetfunc f;
        Py_ssize_t i, n;

        starttype = su-&gt;obj_type;
        mro = starttype-&gt;tp_mro;

        if (mro == NULL)
            n = 0;
        else {
            assert(PyTuple_Check(mro));
            n = PyTuple_GET_SIZE(mro);
        }
        for (i = 0; i &lt; n; i++) {
            if ((PyObject *)(su-&gt;type) == PyTuple_GET_ITEM(mro, i))
                break;
        }
        i++;
        res = NULL;
        /* keep a strong reference to mro because starttype-&gt;tp_mro can be
           replaced during PyDict_GetItem(dict, name)  */
        Py_INCREF(mro);
        for (; i &lt; n; i++) {
            tmp = PyTuple_GET_ITEM(mro, i);
            if (PyType_Check(tmp))
                dict = ((PyTypeObject *)tmp)-&gt;tp_dict;
            else
                continue;
            res = PyDict_GetItem(dict, name);
            if (res != NULL) {
                Py_INCREF(res);
                f = Py_TYPE(res)-&gt;tp_descr_get;
                if (f != NULL) {
                    tmp = f(res,
                        /* Only pass 'obj' param if
                           this is instance-mode super
                           (See SF ID #743627)
                        */
                        (su-&gt;obj == (PyObject *)
                                    su-&gt;obj_type
                            ? (PyObject *)NULL
                            : su-&gt;obj),
                        (PyObject *)starttype);
                    Py_DECREF(res);
                    res = tmp;
                }
                Py_DECREF(mro);
                return res;
            }
        }
        Py_DECREF(mro);
    }
    return PyObject_GenericGetAttr(self, name);
}

static PyTypeObject *
supercheck(PyTypeObject *type, PyObject *obj)
{
    /* Check that a super() call makes sense.  Return a type object.

       obj can be a class, or an instance of one:

       - If it is a class, it must be a subclass of 'type'.      This case is
         used for class methods; the return value is obj.

       - If it is an instance, it must be an instance of 'type'.  This is
         the normal case; the return value is obj.__class__.

       But... when obj is an instance, we want to allow for the case where
       Py_TYPE(obj) is not a subclass of type, but obj.__class__ is!
       This will allow using super() with a proxy for obj.
    */

    /* Check for first bullet above (special case) */
    if (PyType_Check(obj) &amp;&amp; PyType_IsSubtype((PyTypeObject *)obj, type)) {
        Py_INCREF(obj);
        return (PyTypeObject *)obj;
    }

    /* Normal case */
    if (PyType_IsSubtype(Py_TYPE(obj), type)) {
        Py_INCREF(Py_TYPE(obj));
        return Py_TYPE(obj);
    }
    else {
        /* Try the slow way */
        PyObject *class_attr;

        class_attr = _PyObject_GetAttrId(obj, &amp;PyId___class__);
        if (class_attr != NULL &amp;&amp;
            PyType_Check(class_attr) &amp;&amp;
            (PyTypeObject *)class_attr != Py_TYPE(obj))
        {
            int ok = PyType_IsSubtype(
                (PyTypeObject *)class_attr, type);
            if (ok)
                return (PyTypeObject *)class_attr;
        }

        if (class_attr == NULL)
            PyErr_Clear();
        else
            Py_DECREF(class_attr);
    }

    PyErr_SetString(PyExc_TypeError,
                    "super(type, obj): "
                    "obj must be an instance or subtype of type");
    return NULL;
}

static PyObject *
super_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    superobject *su = (superobject *)self;
    superobject *newobj;

    if (obj == NULL || obj == Py_None || su-&gt;obj != NULL) {
        /* Not binding to an object, or already bound */
        Py_INCREF(self);
        return self;
    }
    if (Py_TYPE(su) != &amp;PySuper_Type)
        /* If su is an instance of a (strict) subclass of super,
           call its type */
        return PyObject_CallFunctionObjArgs((PyObject *)Py_TYPE(su),
                                            su-&gt;type, obj, NULL);
    else {
        /* Inline the common case */
        PyTypeObject *obj_type = supercheck(su-&gt;type, obj);
        if (obj_type == NULL)
            return NULL;
        newobj = (superobject *)PySuper_Type.tp_new(&amp;PySuper_Type,
                                                 NULL, NULL);
        if (newobj == NULL)
            return NULL;
        Py_INCREF(su-&gt;type);
        Py_INCREF(obj);
        newobj-&gt;type = su-&gt;type;
        newobj-&gt;obj = obj;
        newobj-&gt;obj_type = obj_type;
        return (PyObject *)newobj;
    }
}

static int
super_init(PyObject *self, PyObject *args, PyObject *kwds)
{
    superobject *su = (superobject *)self;
    PyTypeObject *type = NULL;
    PyObject *obj = NULL;
    PyTypeObject *obj_type = NULL;

    if (!_PyArg_NoKeywords("super", kwds))
        return -1;
    if (!PyArg_ParseTuple(args, "|O!O:super", &amp;PyType_Type, &amp;type, &amp;obj))
        return -1;

    if (type == NULL) {
        /* Call super(), without args -- fill in from __class__
           and first local variable on the stack. */
        PyFrameObject *f = PyThreadState_GET()-&gt;frame;
        PyCodeObject *co = f-&gt;f_code;
        Py_ssize_t i, n;
        if (co == NULL) {
            PyErr_SetString(PyExc_SystemError,
                            "super(): no code object");
            return -1;
        }
        if (co-&gt;co_argcount == 0) {
            PyErr_SetString(PyExc_SystemError,
                            "super(): no arguments");
            return -1;
        }
        obj = f-&gt;f_localsplus[0];
        if (obj == NULL) {
            PyErr_SetString(PyExc_SystemError,
                            "super(): arg[0] deleted");
            return -1;
        }
        if (co-&gt;co_freevars == NULL)
            n = 0;
        else {
            assert(PyTuple_Check(co-&gt;co_freevars));
            n = PyTuple_GET_SIZE(co-&gt;co_freevars);
        }
        for (i = 0; i &lt; n; i++) {
            PyObject *name = PyTuple_GET_ITEM(co-&gt;co_freevars, i);
            assert(PyUnicode_Check(name));
            if (!PyUnicode_CompareWithASCIIString(name,
                                                  "__class__")) {
                Py_ssize_t index = co-&gt;co_nlocals +
                    PyTuple_GET_SIZE(co-&gt;co_cellvars) + i;
                PyObject *cell = f-&gt;f_localsplus[index];
                if (cell == NULL || !PyCell_Check(cell)) {
                    PyErr_SetString(PyExc_SystemError,
                      "super(): bad __class__ cell");
                    return -1;
                }
                type = (PyTypeObject *) PyCell_GET(cell);
                if (type == NULL) {
                    PyErr_SetString(PyExc_SystemError,
                      "super(): empty __class__ cell");
                    return -1;
                }
                if (!PyType_Check(type)) {
                    PyErr_Format(PyExc_SystemError,
                      "super(): __class__ is not a type (%s)",
                      Py_TYPE(type)-&gt;tp_name);
                    return -1;
                }
                break;
            }
        }
        if (type == NULL) {
            PyErr_SetString(PyExc_SystemError,
                            "super(): __class__ cell not found");
            return -1;
        }
    }

    if (obj == Py_None)
        obj = NULL;
    if (obj != NULL) {
        obj_type = supercheck(type, obj);
        if (obj_type == NULL)
            return -1;
        Py_INCREF(obj);
    }
    Py_INCREF(type);
    su-&gt;type = type;
    su-&gt;obj = obj;
    su-&gt;obj_type = obj_type;
    return 0;
}

PyDoc_STRVAR(super_doc,
"super() -&gt; same as super(__class__, &lt;first argument&gt;)\n"
"super(type) -&gt; unbound super object\n"
"super(type, obj) -&gt; bound super object; requires isinstance(obj, type)\n"
"super(type, type2) -&gt; bound super object; requires issubclass(type2, type)\n"
"Typical use to call a cooperative superclass method:\n"
"class C(B):\n"
"    def meth(self, arg):\n"
"        super().meth(arg)\n"
"This works for class methods too:\n"
"class C(B):\n"
"    @classmethod\n"
"    def cmeth(cls, arg):\n"
"        super().cmeth(arg)\n");

static int
super_traverse(PyObject *self, visitproc visit, void *arg)
{
    superobject *su = (superobject *)self;

    Py_VISIT(su-&gt;obj);
    Py_VISIT(su-&gt;type);
    Py_VISIT(su-&gt;obj_type);

    return 0;
}

PyTypeObject PySuper_Type = {
    PyVarObject_HEAD_INIT(&amp;PyType_Type, 0)
    "super",                                    /* tp_name */
    sizeof(superobject),                        /* tp_basicsize */
    0,                                          /* tp_itemsize */
    /* methods */
    super_dealloc,                              /* tp_dealloc */
    0,                                          /* tp_print */
    0,                                          /* tp_getattr */
    0,                                          /* tp_setattr */
    0,                                          /* tp_reserved */
    super_repr,                                 /* tp_repr */
    0,                                          /* tp_as_number */
    0,                                          /* tp_as_sequence */
    0,                                          /* tp_as_mapping */
    0,                                          /* tp_hash */
    0,                                          /* tp_call */
    0,                                          /* tp_str */
    super_getattro,                             /* tp_getattro */
    0,                                          /* tp_setattro */
    0,                                          /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |
        Py_TPFLAGS_BASETYPE,                    /* tp_flags */
    super_doc,                                  /* tp_doc */
    super_traverse,                             /* tp_traverse */
    0,                                          /* tp_clear */
    0,                                          /* tp_richcompare */
    0,                                          /* tp_weaklistoffset */
    0,                                          /* tp_iter */
    0,                                          /* tp_iternext */
    0,                                          /* tp_methods */
    super_members,                              /* tp_members */
    0,                                          /* tp_getset */
    0,                                          /* tp_base */
    0,                                          /* tp_dict */
    super_descr_get,                            /* tp_descr_get */
    0,                                          /* tp_descr_set */
    0,                                          /* tp_dictoffset */
    super_init,                                 /* tp_init */
    PyType_GenericAlloc,                        /* tp_alloc */
    PyType_GenericNew,                          /* tp_new */
    PyObject_GC_Del,                            /* tp_free */
};
</snippet></ROW><ROW><id>13128705</id><snippet>super_init</snippet></ROW><ROW><id>13128705</id><snippet>type == NULL</snippet></ROW><ROW><id>13128705</id><snippet>NULL</snippet></ROW><ROW><id>13128705</id><snippet>super</snippet></ROW><ROW><id>13128705</id><snippet>super</snippet></ROW><ROW><id>13128705</id><snippet>SystemError</snippet></ROW><ROW><id>13128776</id><snippet>asdf"</snippet></ROW><ROW><id>13128776</id><snippet>""</snippet></ROW><ROW><id>13128899</id><snippet>thread = thread1</snippet></ROW><ROW><id>13128899</id><snippet>thread = thread1()</snippet></ROW><ROW><id>13128899</id><snippet>__init__</snippet></ROW><ROW><id>13128899</id><snippet>run</snippet></ROW><ROW><id>13128899</id><snippet>__init__</snippet></ROW><ROW><id>13128899</id><snippet>super()</snippet></ROW><ROW><id>13128899</id><snippet>class thread1(threading.Thread):
    def run(self):
        file = open("/home/antoni4040/file.txt", "r")
        data = file.read()
        num = 1
        while True:
           if str(num) in data:
               clas = ExportToGIMP
               clas.update()
           num += 1     

thread = thread1()
        thread.start()
        thread.join()
</snippet></ROW><ROW><id>13128932</id><snippet>del</snippet></ROW><ROW><id>13128932</id><snippet>del var</snippet></ROW><ROW><id>13128932</id><snippet>del a
del a,b
del l[0]
del l[:]
</snippet></ROW><ROW><id>13128932</id><snippet>random_tile.remove(random.choice(tiles))
</snippet></ROW><ROW><id>13128932</id><snippet>index = random.randint(0, len(l)-1)
del l[index]
</snippet></ROW><ROW><id>13129176</id><snippet>LoadLibrary</snippet></ROW><ROW><id>13129176</id><snippet>FreeLibrary</snippet></ROW><ROW><id>13129176</id><snippet>import ctypes

# get the module handle and create a ctypes library object
libHandle = ctypes.windll.kernel32.LoadLibraryA('mydll.dll')
lib = ctypes.WinDLL(None, handle=libHandle)

# do stuff with lib in the usual way
lib.Foo(42, 666)

# clean up by removing reference to the ctypes library object
del lib

# unload the DLL
ctypes.windll.kernel32.FreeLibrary(libHandle)
</snippet></ROW><ROW><id>13129371</id><snippet>print [map(str.strip, line.split(':')) for line in re.split('&lt;.*?&gt;', string) if ':' in line]
# [['Your Hunger Level', 'Very Hungery'], ['Food You Crave', 'Tomato']]
</snippet></ROW><ROW><id>13129371</id><snippet>dict</snippet></ROW><ROW><id>13129371</id><snippet>lookup = dict(map(str.strip, line.split(':')) for line in re.split('&lt;.*?&gt;', text) if ':' in line)
print lookup['Your Hunger Level']
# 'Very Hungry'
</snippet></ROW><ROW><id>13129543</id><snippet>itertools.product()</snippet></ROW><ROW><id>13129543</id><snippet>&gt;&gt;&gt; list_1 = ['1','2','3']
&gt;&gt;&gt; list_2 = ['2','5','7']
&gt;&gt;&gt; list_3 = ['9','9','8']
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; ["".join(x) for x in product(list_1,list_2,list_3)]
['129', '129', '128', '159', '159', '158', '179', '179', '178', '229', '229', '228', '259', '259', '258', '279', '279', '278', '329', '329', '328', '359', '359', '358', '379', '379', '378']
</snippet></ROW><ROW><id>13129627</id><snippet>import itertools

def neighbours(items, fill=None):
    """Yeild the elements with their neighbours as (before, element, after).

    neighbours([1, 2, 3]) --&gt; (None, 1, 2), (1, 2, 3), (2, 3, None)

    """
    before = itertools.chain([fill], items)
    after = itertools.chain(items, [fill]) #You could use itertools.zip_longest() later instead.
    next(after)
    return zip(before, items, after)

def split_not_neighbour(seq, mark):
    """Split the sequence on each item where the item is not the mark, or next
    to the mark.

    split_not_neighbour([1, 0, 2, 3, 4, 5, 0], 0) --&gt; (1, 2), (5)

    """
    output = []
    for items in neighbours(seq):
        if mark in items:
            _, item, _ = items
            if item != mark:
                output.append(item)
        else:
            if output:
                yield output
                output = []
    if output:
        yield output
</snippet></ROW><ROW><id>13129627</id><snippet>&gt;&gt;&gt; l = ['a', '&gt;&gt;', 'b', '&gt;&gt;', 'd', 'e', 'f', 'g', '&gt;&gt;', 'i', '&gt;&gt;', '&gt;&gt;',
...      'j', 'k', 'l', '&gt;&gt;', '&gt;&gt;']
&gt;&gt;&gt; print(list(split_not_neighbour(l, "&gt;&gt;")))
[['a', 'b', 'd'], ['g', 'i', 'j'], ['l']]
</snippet></ROW><ROW><id>13129627</id><snippet>def split_not_neighbour(seq, mark):
    """Split the sequence on each item where the item is not the mark, or next
    to the mark.

    split_not_neighbour([1, 0, 2, 3, 4, 5, 0], 0) --&gt; (1, 2), (5)

    """
    neighboured = neighbours(seq)
    for _, items in itertools.groupby(neighboured, key=lambda x: mark not in x):
        yield [item for _, item, _ in items if item != mark]
</snippet></ROW><ROW><id>13129762</id><snippet>wx.SimpleHtmlListBox</snippet></ROW><ROW><id>13129762</id><snippet>wx.HtmlListBox</snippet></ROW><ROW><id>13129762</id><snippet>ItemContainer</snippet></ROW><ROW><id>13129762</id><snippet>cgi.escape</snippet></ROW><ROW><id>13129762</id><snippet>import wx
import cgi

class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self,None)
        lb = wx.SimpleHtmlListBox(self)
        lb.Append( cgi.escape("foo &lt;&amp;&gt; bar") )
        lb.Append("&lt;b&gt;Line 1&lt;/b&gt; &lt;br&gt; Line 2")

app = wx.PySimpleApp()
frame = MyFrame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>13129809</id><snippet>self.Nodes[node]</snippet></ROW><ROW><id>13129809</id><snippet>def show_values(self):
    for node in self.Nodes:
        nod = self.Nodes[node]
        print getattr(self.M, nod).value
</snippet></ROW><ROW><id>13129809</id><snippet>getattr(foo, 'bar')</snippet></ROW><ROW><id>13129809</id><snippet>foo.bar</snippet></ROW><ROW><id>13129809</id><snippet>self.M</snippet></ROW><ROW><id>13129809</id><snippet>def show_values(self):
    for node in self.Nodes:
        nod = self.Nodes[node]
        print self.M[nod].value
</snippet></ROW><ROW><id>13129977</id><snippet>$ f2py -c -m mod nfw.f90

$ python
import mod
mod.nfw.c

array(0.0)
</snippet></ROW><ROW><id>13129983</id><snippet>└──&gt; xset q | grep LED
  auto repeat:  off    key click percent:  0    LED mask:  00000000
└──&gt; xset q | grep LED
  auto repeat:  off    key click percent:  0    LED mask:  00000001
</snippet></ROW><ROW><id>13129983</id><snippet>&gt;&gt;&gt; import commands
&gt;&gt;&gt; # Caps Lock is off.
&gt;&gt;&gt; commands.getoutput('xset q | grep LED')[65]
'0'
&gt;&gt;&gt; # Setting Caps Lock on now.
&gt;&gt;&gt; commands.getoutput('xset q | grep LED')[65]
'1'
</snippet></ROW><ROW><id>13130203</id><snippet>words</snippet></ROW><ROW><id>13130203</id><snippet>l.split()</snippet></ROW><ROW><id>13130222</id><snippet>class Person(db.Model):
  __tablename__ = 'people'
  id       = db.Column(db.Integer, primary_key = True)
  forename = db.Column(db.String(64))
  surname  = db.Column(db.String(64))

  memberships = db.relationship('Membership', backref='person')

  @property
  def name(self):
    return self.forename + ' ' + self.surname

  def __repr__(self):
    return '&lt;Person %r %r&gt;' % (self.forename, self.surname)

class User(db.Model):
  __tablename__ = 'users'
  id       = db.Column(db.Integer, db.ForeignKey('people.id'), primary_key = True)
  email    = db.Column(db.String(120), index = True, unique = True)
  role     = db.Column(db.SmallInteger, default = ROLE_USER)

  salt     = db.Column(db.BINARY(8))
  password = db.Column(db.BINARY(20))

  person   = db.relationship('Person')
</snippet></ROW><ROW><id>13130222</id><snippet>&gt;&gt;&gt; p = models.Person.query.get(3)
&gt;&gt;&gt; u = models.User(person=p, email="example@example.com")
&gt;&gt;&gt; u.set_password('password')
&gt;&gt;&gt; db.session.add(u)
&gt;&gt;&gt; db.session.commit()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13130357</id><snippet>import numpy as np
count,division = np.histogram(serie)
</snippet></ROW><ROW><id>13130357</id><snippet>count,division = np.histogram(serie,bins = [-201,-149,949,1001])
</snippet></ROW><ROW><id>13130357</id><snippet>serie.hist(bins=division)
</snippet></ROW><ROW><id>13130584</id><snippet>O(n)</snippet></ROW><ROW><id>13130584</id><snippet>sort</snippet></ROW><ROW><id>13130584</id><snippet>O(n*log(n))</snippet></ROW><ROW><id>13130584</id><snippet>import os
from collections import namedtuple

directory = #file directory
os.chdir(directory)

newest_files = {}
Entry = namedtuple('Entry',['date','file_name'])

for file_name in os.listdir(directory):
    name,ext = os.path.splitext(file_name)
    cashed_file = newest_files.get(name)
    this_file_date = os.path.getmtime(file_name)
    if cashed_file is None:
        newest_files[name] = Entry(this_file_date,file_name)
    else:
        if this_file_date &gt; cashed_file.date: #replace with the newer one
            newest_files[name] = Entry(this_file_date,file_name)
</snippet></ROW><ROW><id>13130584</id><snippet>newest_files</snippet></ROW><ROW><id>13130584</id><snippet>O(1)</snippet></ROW><ROW><id>13130584</id><snippet>n</snippet></ROW><ROW><id>13130584</id><snippet>O(n)</snippet></ROW><ROW><id>13130584</id><snippet>for file_name in os.listdir(directory):
    name,ext = os.path.splitext(file_name)
    cashed_file_name = newest_files.get(name).file_name
    if file_name != cashed_file_name: #it's not the newest with this name
        os.remove(file_name)
</snippet></ROW><ROW><id>13130584</id><snippet>    else:
        if this_file_date &gt; cashed_file.date: #replace with the newer one
            newest_files[name] = Entry(this_file_date,file_name)
            os.remove(cashed_file.file_name) #this line added
</snippet></ROW><ROW><id>13130602</id><snippet>print test.sort_word_list()
</snippet></ROW><ROW><id>13130602</id><snippet>parser</snippet></ROW><ROW><id>13130602</id><snippet>word_list</snippet></ROW><ROW><id>13130602</id><snippet>print test.word_list</snippet></ROW><ROW><id>13130602</id><snippet>sort_word_list</snippet></ROW><ROW><id>13130602</id><snippet>sorted_word_list</snippet></ROW><ROW><id>13130602</id><snippet>print test.sort_word_list</snippet></ROW><ROW><id>13130602</id><snippet>None</snippet></ROW><ROW><id>13130602</id><snippet>sort</snippet></ROW><ROW><id>13130602</id><snippet>num_words</snippet></ROW><ROW><id>13130602</id><snippet>num_words</snippet></ROW><ROW><id>13130602</id><snippet>@property</snippet></ROW><ROW><id>13131141</id><snippet>.*</snippet></ROW><ROW><id>13131141</id><snippet>import re

string1 = '1.0) The Ugly Duckling (TUD) (10 Dollars)'
string2 = '1.0) Little 1 Red Riding Hood (9.50 Dollars)'

result = re.match(r'(.*?)\)([ \t]+)?(?P&lt;item&gt;.*)\(.*?(?P&lt;dollaramount&gt;(\d+)?(\.\d+)?).*([ \t]+)?Dollars(\))?', string1)

print repr(result.groups())
print result.group('item')
print result.group('dollaramount')
</snippet></ROW><ROW><id>13131141</id><snippet>*?</snippet></ROW><ROW><id>13131141</id><snippet>\([^)]*\)</snippet></ROW><ROW><id>13131141</id><snippet>r'something'</snippet></ROW><ROW><id>13131141</id><snippet>(\(.*?\))?</snippet></ROW><ROW><id>13131141</id><snippet>(TUD)</snippet></ROW><ROW><id>13131206</id><snippet>import SocketServer

PORT = 5000

class Server(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    daemon_threads = True

class Handler(SocketServer.BaseRequestHandler):
    def handle(self):
        # TODO: handle this client
        # this sample acts as an echo server
        while True:
            data = self.request.recv(1024)
            if not data:
                break
            self.request.sendall(data)

if __name__ == '__main__':
    server = Server(('', PORT), Handler)
    server.serve_forever()
</snippet></ROW><ROW><id>13131234</id><snippet>p = db.Programs.find_one({'Title':'...'})

pipe = [
        {'$match':{'_Program':DBRef('Programs',p['_id']),'Duration':{'$gt':0}}},
        {'$group':{'_id':'$_Program', 'AverageDuration':{'$avg':'$Duration'}}}
        ]

eps = db.Episodes.aggregate(pipeline=pipe)

print eps['result']
</snippet></ROW><ROW><id>13131445</id><snippet>from nltk import stem
stemmer = stem.Regexp('s$|es$|era$|erez$|ions$| &lt;etc&gt; ')
</snippet></ROW><ROW><id>13131445</id><snippet>&gt;&gt;&gt; from nltk.stem.snowball import FrenchStemmer
&gt;&gt;&gt; stemmer = FrenchStemmer
&gt;&gt;&gt; stemmer.stem('voudrais')
u'voudr'
&gt;&gt;&gt; stemmer.stem('animaux')
u'animal'
&gt;&gt;&gt; stemmer.stem('yeux')
u'yeux'
&gt;&gt;&gt; stemmer.stem('dors')
u'dor'
&gt;&gt;&gt; stemmer.stem('couvre')
u'couvr'
</snippet></ROW><ROW><id>13131536</id><snippet>&gt;&gt;&gt; chr(int('49', 16))
'I'
</snippet></ROW><ROW><id>13131536</id><snippet>\x49</snippet></ROW><ROW><id>13131536</id><snippet>I</snippet></ROW><ROW><id>13131536</id><snippet>\x49</snippet></ROW><ROW><id>13131536</id><snippet>int('49', 16)</snippet></ROW><ROW><id>13131536</id><snippet>73</snippet></ROW><ROW><id>13131536</id><snippet>73</snippet></ROW><ROW><id>13131536</id><snippet>I</snippet></ROW><ROW><id>13131536</id><snippet>ord('I')</snippet></ROW><ROW><id>13131536</id><snippet>73</snippet></ROW><ROW><id>13131601</id><snippet>root.attributes("-alpha", 0)
</snippet></ROW><ROW><id>13131605</id><snippet>'\xff'</snippet></ROW><ROW><id>13131605</id><snippet>FF</snippet></ROW><ROW><id>13131605</id><snippet>socket</snippet></ROW><ROW><id>13131609</id><snippet>import numpy as np

def f1():
    "np.array + nested lists"
    my_array = np.array([[1, 3], [2.4, -1]])

def f2():
    "np.array + nested tuples"
    my_array = np.array(((1, 3), (2.4, -1)))

def f3():
    "Completely unrolled"
    my_array = np.empty((2,2),dtype=float)
    my_array[0,0] = 1
    my_array[0,1] = 3
    my_array[1,0] = 2.4
    my_array[1,1] = -1

def f4():
    "empty + ravel + list"
    my_array = np.empty((2,2),dtype=float)
    my_array.ravel()[:] = [1,3,2.4,-1]

def f5():
    "empty + ravel + tuple"
    my_array = np.empty((2,2),dtype=float)
    my_array.ravel()[:] = (1,3,2.4,-1)

def f6():
    "empty + slice assignment"
    my_array = np.empty((2,2),dtype=float)
    my_array[0,:] = (1,3)
    my_array[1,:] = (2.4,-1)

def f7():
    "empty + index assignment"
    my_array = np.empty((2,2),dtype=float)
    my_array[0] = (1,3)
    my_array[1] = (2.4,-1)

def f8():
    "np.array + flat list + reshape"
    my_array = np.array([1, 3, 2.4, -1]).reshape((2,2))

def f9():
    "np.empty + ndarray.flat  (Pierre GM)"
    my_array = np.empty((2,2), dtype=float)
    my_array.flat = (1,3,2.4,-1)

def f10():
    "np.fromiter (Bi Roco)"
    my_array = np.fromiter((1,3,2.4,-1), dtype=float).reshape((2,2))

import timeit
results = {}
for i in range(1,11):
    func_name = 'f%d'%i
    my_import = 'from __main__ import %s'%func_name
    func_doc = globals()[func_name].__doc__
    results[func_name] = (timeit.timeit(func_name+'()',
                                        my_import,
                                        number=100000),
                          '\t'.join((func_name,func_doc)))

for result in sorted(results.values()):
    print '\t'.join(map(str,result))
</snippet></ROW><ROW><id>13131609</id><snippet>0.158674955368  f3  Completely unrolled
0.225094795227  f10 np.fromiter (Bi Roco)
0.737828969955  f8  np.array + flat list + reshape
0.782918930054  f5  empty + ravel + tuple
0.786983013153  f9  np.empty + ndarray.flat  (Pierre GM)
0.814703941345  f4  empty + ravel + list
1.2375421524    f7  empty + index assignment
1.32230591774   f2  np.array + nested tuples
1.3752617836    f6  empty + slice assignment
1.39459013939   f1  np.array + nested lists
</snippet></ROW><ROW><id>13131690</id><snippet>wherever</snippet></ROW><ROW><id>13131690</id><snippet>class BraceMessage(object):
    def __init__(self, fmt, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)
</snippet></ROW><ROW><id>13131690</id><snippet>from wherever import BraceMessage as __

log.debug(__('Message with {0} {name}', 2, name='placeholders'))
</snippet></ROW><ROW><id>13131694</id><snippet>import binascii
gsm = ("@£$¥èéùìòÇ\nØø\rÅåΔ_ΦΓΛΩΠΨΣΘΞ\x1bÆæßÉ !\"#¤%&amp;'()*+,-./0123456789:;&lt;=&gt;?"
       "¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ`¿abcdefghijklmnopqrstuvwxyzäöñüà")
ext = ("````````````````````^```````````````````{}`````\\````````````[~]`"
       "|````````````````````````````````````€``````````````````````````")

def gsm_encode(plaintext):
    result = []
    for c in plaintext:
        idx = gsm.find(c)
        if idx != -1:
            result.append(chr(idx))
            continue
        idx = ext.find(c)
        if idx != -1:
            result.append(chr(27) + chr(idx))
    return ''.join(result).encode('hex')

def gsm_decode(hexstr):
    res = hexstr.decode('hex')
    res = iter(res)
    result = []
    for c in res:
        if c == chr(27):
            c = next(res)
            result.append(ext[ord(c)])
        else:
            result.append(gsm[ord(c)])
    return ''.join(result)

code = gsm_encode("Hello World {}")
print(code)
# 64868d8d903a7390938d853a1b281b29
print(gsm_decode(code))
# Hello World {}
</snippet></ROW><ROW><id>13131738</id><snippet>requirements.txt</snippet></ROW><ROW><id>13131738</id><snippet>pip freeze</snippet></ROW><ROW><id>13131738</id><snippet>requirements.txt</snippet></ROW><ROW><id>13131738</id><snippet>matplotlib</snippet></ROW><ROW><id>13131738</id><snippet>requirements.txt</snippet></ROW><ROW><id>13131738</id><snippet>matplotlib</snippet></ROW><ROW><id>13131738</id><snippet>apt-get install</snippet></ROW><ROW><id>13131816</id><snippet>hint = random.choice(list({a, b, c, d, e, f} - {killer, previous_guess}))
</snippet></ROW><ROW><id>13131871</id><snippet>from googlemaps import GoogleMaps, GoogleMapsError

def get_distance(address, destination):
    try:
        gmaps = GoogleMaps(api_key)
        directions = gmaps.directions(address,destination)
        distance = directions['Directions']['Distance']['meters']/1600.0
        return distance
    except GoogleMapsError:
        pass
</snippet></ROW><ROW><id>13131876</id><snippet>*</snippet></ROW><ROW><id>13131876</id><snippet>c</snippet></ROW><ROW><id>13131876</id><snippet>*</snippet></ROW><ROW><id>13131876</id><snippet>c</snippet></ROW><ROW><id>13131876</id><snippet>cj</snippet></ROW><ROW><id>13131876</id><snippet>c</snippet></ROW><ROW><id>13131876</id><snippet>parser = argparse.ArgumentParser(description="test")
parser.add_argument('c', nargs='+')
parser.add_argument('cj', nargs='+')
</snippet></ROW><ROW><id>13131876</id><snippet>{'cj': ['1'], 'c': ['cj']}
</snippet></ROW><ROW><id>13131876</id><snippet>+</snippet></ROW><ROW><id>13132109</id><snippet>a = zeros((3,3))
b = array([0, 2, 1])
vals = array([1.2, 1.4, 1.6])
</snippet></ROW><ROW><id>13132109</id><snippet>arange</snippet></ROW><ROW><id>13132109</id><snippet>r_</snippet></ROW><ROW><id>13132109</id><snippet>&gt;&gt;&gt; a[r_[:len(b)], b] = vals


array([[ 1.2,  0. ,  0. ],
       [ 0. ,  0. ,  1.4],
       [ 0. ,  1.6,  0. ]])
</snippet></ROW><ROW><id>13132140</id><snippet>for program_files in (os.path.join("C:", "Program\ Files"), os.path.join("C:", "Program\ Files\ (x86)"):
    for dir in os.listdir(program_files):
        if os.path.exists(os.path.join(program_files, dir, arr[2]) + ".exe"):
            subprocess.Popen(os.path.join(program_files, dir, arr[2]) + ".exe")
</snippet></ROW><ROW><id>13132358</id><snippet>Referer</snippet></ROW><ROW><id>13132358</id><snippet>urllib2</snippet></ROW><ROW><id>13132358</id><snippet>requests</snippet></ROW><ROW><id>13132358</id><snippet>import requests

url = 'http://www.grandexchangecentral.com/include/gecgraphjson.php?jsid=10350'
r = requests.get(url, headers={'Referer': 'www.grandexchangecentral.com'})

data = r.json
</snippet></ROW><ROW><id>13133019</id><snippet>DictReader</snippet></ROW><ROW><id>13133019</id><snippet>excel-tab</snippet></ROW><ROW><id>13133019</id><snippet>rows</snippet></ROW><ROW><id>13133019</id><snippet>&gt;&gt;&gt; with open(r'd:\file.csv','rb') as f:
...     reader = csv.DictReader(f,dialect='excel-tab')
...     rows = list(reader)
...
&gt;&gt;&gt; [x['User ID'] for x in rows if x['Application'] == 'Central']
['002', '078']
</snippet></ROW><ROW><id>13133246</id><snippet>from flask import request

@app.route('/summary',methods = ['GET'])
def api_summary_2():
    filename = request.args.get('file', None)
    if filename is None:
        abort(404)
    else:
        return api_summary(filename)
</snippet></ROW><ROW><id>13133316</id><snippet>In [57]: abs(2 - -9)
Out[57]: 11

In [58]: abs(-1 - 5)
Out[58]: 6
</snippet></ROW><ROW><id>13133321</id><snippet>def parse(text):
    chunks = ['']

    for character in text:
        if character.isdigit():
            if chunks[-1].isdigit():   # If the last chunk is already a number
                chunks[-1] += character  # Add onto that number
            else:
                chunks.append(character) # Start a new number chunk
        elif character in '+-/*':
            chunks.append(character)  # This doesn't account for `1 ++ 2`.

    return chunks[1:]
</snippet></ROW><ROW><id>13133321</id><snippet>&gt;&gt;&gt; parse('123 + 123')
['123', '+', '123']
&gt;&gt;&gt; parse('123 + 123 / 123 + 123')
['123', '+', '123', '/', '123', '+', '123']
</snippet></ROW><ROW><id>13133321</id><snippet>.isdigit()</snippet></ROW><ROW><id>13133491</id><snippet>Point</snippet></ROW><ROW><id>13133491</id><snippet>&gt;&gt;&gt; import shapely
&gt;&gt;&gt; from shapely.geometry.point import Point
&gt;&gt;&gt; p = Point(0, 0)
&gt;&gt;&gt; circle = p.buffer(1.0)
&gt;&gt;&gt; list(circle.exterior.coords)
[(1.0, 0.0), (0.99518472667219693, -0.098017140329560506), (0.98078528040323054, -0.19509032201612808), (0.95694033573220894, -0.29028467725446211), (0.92387953251128696, -0.38268343236508939), (0.88192126434835527, -0.4713967368259972), (0.83146961230254557, -0.55557023301960173), (0.77301045336273744, -0.63439328416364493), (0.70710678118654813, -0.70710678118654691), (0.63439328416364626, -0.77301045336273633), (0.55557023301960307, -0.83146961230254468), (0.47139673682599859, -0.88192126434835449), (0.38268343236509084, -0.92387953251128629), (0.29028467725446361, -0.95694033573220849), (0.19509032201612964, -0.98078528040323021), (0.098017140329562089, -0.99518472667219671), (1.615542552166338e-15, -1.0), (-0.098017140329558883, -0.99518472667219704), (-0.19509032201612647, -0.98078528040323076), (-0.2902846772544605, -0.95694033573220938), (-0.38268343236508784, -0.92387953251128752), (-0.4713967368259957, -0.88192126434835605), (-0.55557023301960051, -0.83146961230254635), (-0.63439328416364393, -0.77301045336273821), (-0.70710678118654624, -0.70710678118654879), (-0.77301045336273588, -0.63439328416364682), (-0.83146961230254435, -0.55557023301960362), (-0.88192126434835427, -0.47139673682599903), (-0.92387953251128618, -0.38268343236509111), (-0.95694033573220849, -0.29028467725446366), (-0.98078528040323021, -0.19509032201612947), (-0.99518472667219682, -0.098017140329561714), (-1.0, -1.010639055082363e-15), (-0.99518472667219693, 0.098017140329559702), (-0.98078528040323065, 0.1950903220161275), (-0.95694033573220905, 0.29028467725446172), (-0.92387953251128696, 0.38268343236508923), (-0.88192126434835527, 0.47139673682599725), (-0.83146961230254546, 0.55557023301960196), (-0.7730104533627371, 0.63439328416364527), (-0.70710678118654768, 0.70710678118654746), (-0.63439328416364593, 0.77301045336273666), (-0.55557023301960295, 0.83146961230254479), (-0.4713967368259987, 0.88192126434835449), (-0.38268343236509117, 0.92387953251128618), (-0.29028467725446411, 0.95694033573220838), (-0.19509032201613041, 0.98078528040322999), (-0.098017140329563102, 0.9951847266721966), (-2.8482262121737323e-15, 1.0), (0.098017140329557426, 0.99518472667219715), (0.19509032201612481, 0.9807852804032311), (0.29028467725445867, 0.95694033573220993), (0.3826834323650859, 0.9238795325112884), (0.47139673682599365, 0.88192126434835716), (0.55557023301959818, 0.8314696123025479), (0.63439328416364149, 0.77301045336274021), (0.70710678118654358, 0.70710678118655146), (0.77301045336273322, 0.63439328416365004), (0.83146961230254179, 0.5555702330196074), (0.88192126434835194, 0.47139673682600342), (0.92387953251128407, 0.38268343236509617), (0.95694033573220671, 0.29028467725446927), (0.98078528040322899, 0.19509032201613569), (0.99518472667219615, 0.098017140329568472), (1.0, 8.2385270480656025e-15), (1.0, 0.0)]
</snippet></ROW><ROW><id>13133491</id><snippet>0.0966</snippet></ROW><ROW><id>13133887</id><snippet>map</snippet></ROW><ROW><id>13133887</id><snippet>functools.partial</snippet></ROW><ROW><id>13133887</id><snippet>&gt;&gt;&gt; def add(x, y):
...     return x+y
&gt;&gt;&gt; map(functools.partial(add, y=10), [1, 2, 3])
[11, 12, 13]
</snippet></ROW><ROW><id>13133887</id><snippet>for item in [1, 2, 3]:
   add(item, 10)
</snippet></ROW><ROW><id>13134054</id><snippet>((peer\s\d\s\S+\s\S+\r+\n+)+)
</snippet></ROW><ROW><id>13134362</id><snippet>def gen():
    for chrom in bins:
        for a_bin in bins[chrom]:
           for pos in a_bin:
               yield pos
</snippet></ROW><ROW><id>13134362</id><snippet>gen()</snippet></ROW><ROW><id>13134362</id><snippet>for pos in gen():
    pass # add loop code here
</snippet></ROW><ROW><id>13134362</id><snippet>gen()</snippet></ROW><ROW><id>13134559</id><snippet>etree.tostring</snippet></ROW><ROW><id>13134559</id><snippet>from lxml import etree as ET

def pp(e):
    print ET.tostring(e, pretty_print=True)
    print

root = ET.XML("""\
&lt;project id="8dce5d94-4273-47ef-8d1b-0c7882f91caa" kpf_version="4"&gt;
&lt;livefolder id="8744bc67-1b9e-443d-ba9f-96e1d0007ba8" idref="707cd68a-33b5-4051-9e40-8ba686c2fdb8"&gt;Mooo&lt;/livefolder&gt;
&lt;livefolder id="8744bc67-1b9e-443d-ba9f" idref="707cd68a-33b5-4051-9e40-8ba686c2fdb8" /&gt;
&lt;preference-set idref="8dce5d94-4273-47ef-8d1b-0c7882f91caa"&gt;
  &lt;boolean id="import_live"&gt;0&lt;/boolean&gt;
&lt;/preference-set&gt;
&lt;/project&gt;
""")
pp(root)


xslt = ET.XML("""\
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:template match="*"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="*"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
""")
tr = ET.XSLT(xslt)

doc2 = tr(root)
root2 = doc2.getroot()
pp(root2)
</snippet></ROW><ROW><id>13134559</id><snippet>&lt;project id="8dce5d94-4273-47ef-8d1b-0c7882f91caa" kpf_version="4"&gt;
  &lt;livefolder id="8744bc67-1b9e-443d-ba9f-96e1d0007ba8" idref="707cd68a-33b5-4051-9e40-8ba686c2fdb8"&gt;Mooo&lt;/livefolder&gt;
  &lt;livefolder id="8744bc67-1b9e-443d-ba9f" idref="707cd68a-33b5-4051-9e40-8ba686c2fdb8"/&gt;
  &lt;preference-set idref="8dce5d94-4273-47ef-8d1b-0c7882f91caa"&gt;
    &lt;boolean id="import_live"&gt;0&lt;/boolean&gt;
  &lt;/preference-set&gt;
&lt;/project&gt;

&lt;project&gt;
  &lt;livefolder/&gt;
  &lt;livefolder/&gt;
  &lt;preference-set&gt;
    &lt;boolean/&gt;
  &lt;/preference-set&gt;
&lt;/project&gt;
</snippet></ROW><ROW><id>13134686</id><snippet>filters = tables.Filters(complevel=4, complib='blosc')
atom = tables.Float32Atom()
array = h5_f.createCArray(group, 'ArrayA', atom, shape, filters=filters)
array[:] = data
</snippet></ROW><ROW><id>13134778</id><snippet>def sum10(a, b):
    if sum([a, b]) % 10 == 0: return True; return False
</snippet></ROW><ROW><id>13134778</id><snippet>def sum10(a, b):
    if sum([a, b]) % 10 == 0: 
        return True; return False
</snippet></ROW><ROW><id>13134778</id><snippet>return False</snippet></ROW><ROW><id>13134778</id><snippet>    if sum([a, b]) % 10 == 0: 
        return True
    return False
</snippet></ROW><ROW><id>13134778</id><snippet>    return sum([a, b]) % 10 == 0
</snippet></ROW><ROW><id>13134778</id><snippet>    return True if sum([a, b]) % 10 == 0 else False
</snippet></ROW><ROW><id>13134778</id><snippet>    return False if (a+b) % 10 else True
</snippet></ROW><ROW><id>13134778</id><snippet>    return not (a + b) % 10
</snippet></ROW><ROW><id>13135180</id><snippet>from urllib import urlopen
airports = 'KSFO, KSJC, KOAK'

for airport_code in airports.split(","):
    for metar in urlopen('http://weather.noaa.gov/pub/data/observations/metar/stations/%s.TXT' % airport_code.strip()):
        metar = metar.decode("utf-8")
        print metar
</snippet></ROW><ROW><id>13135251</id><snippet>pairwise</snippet></ROW><ROW><id>13135251</id><snippet>itertools</snippet></ROW><ROW><id>13135251</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>13135251</id><snippet>itertools</snippet></ROW><ROW><id>13135251</id><snippet>for a, b in pairwise(gen):
    func(b[1], a[1])
    func(b[1], a[2])
</snippet></ROW><ROW><id>13135539</id><snippet>SubElement</snippet></ROW><ROW><id>13135539</id><snippet>group = SubElement(user, "group")
# ...
</snippet></ROW><ROW><id>13135792</id><snippet>instancecheck</snippet></ROW><ROW><id>13135792</id><snippet>class Enumeration(type):
    def __instancecheck__(self, other):
        print 'hi'
        return True


class EnumInt(int):
    __metaclass__ = Enumeration

print isinstance('foo', EnumInt) # prints True
</snippet></ROW><ROW><id>13135792</id><snippet>isinstance(A, B)</snippet></ROW><ROW><id>13135792</id><snippet>B</snippet></ROW><ROW><id>13135792</id><snippet>__instancecheck__</snippet></ROW><ROW><id>13135792</id><snippet>isinstance(A, B):
    C = class-of(B)
    return C.__instancecheck__(A)
</snippet></ROW><ROW><id>13135792</id><snippet>B</snippet></ROW><ROW><id>13135792</id><snippet>C</snippet></ROW><ROW><id>13135888</id><snippet>jSON.Parse</snippet></ROW><ROW><id>13135888</id><snippet>dataType: 'json'</snippet></ROW><ROW><id>13136153</id><snippet>/usr/lib/python2.6/site-packages/pysqlite*.egg/</snippet></ROW><ROW><id>13136153</id><snippet>installed-files.txt</snippet></ROW><ROW><id>13136153</id><snippet>pip</snippet></ROW><ROW><id>13136153</id><snippet>installed-files.txt</snippet></ROW><ROW><id>13136153</id><snippet>pysqlite/</snippet></ROW><ROW><id>13136153</id><snippet>pysqlite.egg</snippet></ROW><ROW><id>13136184</id><snippet>from django.contrib.auth import authenticate, login as auth_login

if request.method == 'POST':
    form = UserLoginForm(request.POST or None)
    if form.is_valid():
        username = User.objects.get(email=form.cleaned_data['email'])
        password = form.cleaned_data['password']
        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                auth_login(request, user)
                return HttpResponseRedirect(request.GET.get('next',
                                            settings.LOGIN_REDIRECT_URL))
        else:
            error = 'Invalid username or password.'
</snippet></ROW><ROW><id>13136328</id><snippet>In [1]: strs=0.000441074371338

In [2]: "{0:e}".format(strs)
Out[2]: '4.410744e-04'

In [3]: "{0:.4f}".format(strs)
Out[3]: '0.0004'

In [9]: "{0:.0f} us".format(strs*1000*1000)
Out[9]: '441 us'
</snippet></ROW><ROW><id>13136353</id><snippet>vars()[file_name+"_values"] = A
</snippet></ROW><ROW><id>13136353</id><snippet>file_name+"_"+"values"</snippet></ROW><ROW><id>13136353</id><snippet>values = dict()
values[file_name] = A
</snippet></ROW><ROW><id>13136482</id><snippet>use UML::State;

my $diagram = UML::State-&gt;new(
  $node_array,
  $start_list,
  $accept_list,
  $edges
);

# You may change these defaults (doing so may even work):
$UML::State::ROW_SPACING = 75;  # all numbers are in pixels
$UML::State::LEFT_MARGIN = 20;
$UML::State::WIDTH       = 800;
$UML::State::HEIGHT      = 800;

print $diagram-&gt;draw(); 
</snippet></ROW><ROW><id>13137082</id><snippet>or</snippet></ROW><ROW><id>13137082</id><snippet>and</snippet></ROW><ROW><id>13137082</id><snippet>x and y</snippet></ROW><ROW><id>13137082</id><snippet>x</snippet></ROW><ROW><id>13137082</id><snippet>x</snippet></ROW><ROW><id>13137082</id><snippet>y</snippet></ROW><ROW><id>13137082</id><snippet>x or y</snippet></ROW><ROW><id>13137082</id><snippet>x</snippet></ROW><ROW><id>13137082</id><snippet>x</snippet></ROW><ROW><id>13137082</id><snippet>y</snippet></ROW><ROW><id>13137082</id><snippet>bool()</snippet></ROW><ROW><id>13137082</id><snippet>&gt;&gt;&gt; bool(False or 'name')
True
</snippet></ROW><ROW><id>13137095</id><snippet>f.flush()</snippet></ROW><ROW><id>13137095</id><snippet>In [17]: f.flush.__doc__
Out[17]: 'flush() -&gt; None.  Flush the internal I/O buffer.'
</snippet></ROW><ROW><id>13137095</id><snippet>with</snippet></ROW><ROW><id>13137095</id><snippet>with open("file.txt","w") as f:
    while(operator):
        f.write("string")
        f.flush()
</snippet></ROW><ROW><id>13137100</id><snippet>from gi.repository import Gio</snippet></ROW><ROW><id>13137110</id><snippet>sorted()</snippet></ROW><ROW><id>13137110</id><snippet>sorted(set(a))
</snippet></ROW><ROW><id>13137110</id><snippet>list()</snippet></ROW><ROW><id>13137162</id><snippet>defaultdict</snippet></ROW><ROW><id>13137162</id><snippet>from collections import defaultdict

total_times = defaultdict(list)

for i in range(0,7):
   total_times[i] = [entry['work'] for entry in timesheet_entries if within_dates(i)]
</snippet></ROW><ROW><id>13137162</id><snippet>within_dates</snippet></ROW><ROW><id>13137162</id><snippet>for i in total_times:
   print 'Total for i ', sum(total_times[i])
</snippet></ROW><ROW><id>13137200</id><snippet>ElementTree</snippet></ROW><ROW><id>13137200</id><snippet># somepackage.py

try:
  from lxml import etree
  print("running with lxml.etree")
except ImportError:
  try:
    # Python 2.5
    import xml.etree.cElementTree as etree
    print("running with cElementTree on Python 2.5+")
  except ImportError:
    try:
      # Python 2.5
      import xml.etree.ElementTree as etree
      print("running with ElementTree on Python 2.5+")
    except ImportError:
      try:
        # normal cElementTree install
        import cElementTree as etree
        print("running with cElementTree")
      except ImportError:
        try:
          # normal ElementTree install
          import elementtree.ElementTree as etree
          print("running with ElementTree")
        except ImportError:
          print("Failed to import ElementTree from any known place")
</snippet></ROW><ROW><id>13137200</id><snippet>somepackage</snippet></ROW><ROW><id>13137200</id><snippet>etree</snippet></ROW><ROW><id>13137450</id><snippet>libvirt</snippet></ROW><ROW><id>13137450</id><snippet>$ brew install libvirt
</snippet></ROW><ROW><id>13137450</id><snippet>libvirt</snippet></ROW><ROW><id>13137873</id><snippet>.iter_content()</snippet></ROW><ROW><id>13137873</id><snippet>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r.iter_content():
            f.write(chunk)
</snippet></ROW><ROW><id>13137873</id><snippet>.iter_content()</snippet></ROW><ROW><id>13137873</id><snippet>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r.iter_content(1024):
            f.write(chunk)
</snippet></ROW><ROW><id>13137873</id><snippet>stream=True</snippet></ROW><ROW><id>13137873</id><snippet>requests</snippet></ROW><ROW><id>13137873</id><snippet>r.raw</snippet></ROW><ROW><id>13137873</id><snippet>.iter_*</snippet></ROW><ROW><id>13137900</id><snippet>my_button.objectName()
</snippet></ROW><ROW><id>13137900</id><snippet>self.pushButton_9_3.objectName()
</snippet></ROW><ROW><id>13138093</id><snippet>.travis.yml</snippet></ROW><ROW><id>13138093</id><snippet>matrix:
  exclude:
   - python: "2.5"
     env: DJANGO=https://github.com/django/django/zipball/master
</snippet></ROW><ROW><id>13138131</id><snippet>software.exe</snippet></ROW><ROW><id>13138131</id><snippet>software.exe -script runtests.py</snippet></ROW><ROW><id>13138131</id><snippet>software.exe</snippet></ROW><ROW><id>13138131</id><snippet>software.exe</snippet></ROW><ROW><id>13138131</id><snippet>software.exe</snippet></ROW><ROW><id>13138131</id><snippet>python.exe</snippet></ROW><ROW><id>13138198</id><snippet>pip</snippet></ROW><ROW><id>13138198</id><snippet>pip</snippet></ROW><ROW><id>13138198</id><snippet>virtualenv</snippet></ROW><ROW><id>13138198</id><snippet>pip</snippet></ROW><ROW><id>13138198</id><snippet>virtualenv</snippet></ROW><ROW><id>13138198</id><snippet>numpy</snippet></ROW><ROW><id>13138198</id><snippet>apt-get</snippet></ROW><ROW><id>13138301</id><snippet>Dir</snippet></ROW><ROW><id>13138301</id><snippet>dir.c</snippet></ROW><ROW><id>13138301</id><snippet>'.svn'</snippet></ROW><ROW><id>13138301</id><snippet>'.git'</snippet></ROW><ROW><id>13138301</id><snippet>'.hg'</snippet></ROW><ROW><id>13138301</id><snippet>dirs</snippet></ROW><ROW><id>13138301</id><snippet>for root, dirs, files in os.walk(path):
    for skip in ('.hg', '.git', '.svn', '.bzr'):
        if skip in dirs:
            dirs.remove(skip)
        # Now process other stuff at this level, i.e.
        # in directory "root". The skipped folders
        # won't be recursed into.
</snippet></ROW><ROW><id>13138361</id><snippet>WampServerProtocol.dispatch</snippet></ROW><ROW><id>13138588</id><snippet>data</snippet></ROW><ROW><id>13138588</id><snippet>0</snippet></ROW><ROW><id>13138588</id><snippet>1</snippet></ROW><ROW><id>13138588</id><snippet>0</snippet></ROW><ROW><id>13138588</id><snippet>1</snippet></ROW><ROW><id>13138588</id><snippet>import numpy as np

idx = t[np.abs(np.diff(data)) == 1]
lasting_times = idx[1::2] - idx[::2]
</snippet></ROW><ROW><id>13138588</id><snippet>1</snippet></ROW><ROW><id>13138588</id><snippet>1</snippet></ROW><ROW><id>13138588</id><snippet>diff = np.diff(data)
lasting_times = t[diff == -1] - t[1:][diff == 1]
</snippet></ROW><ROW><id>13138588</id><snippet>data</snippet></ROW><ROW><id>13138588</id><snippet>0</snippet></ROW><ROW><id>13138735</id><snippet>print opts.some_option.decode(sys.stdin.encoding)
</snippet></ROW><ROW><id>13138735</id><snippet>unicode(opts.some_option)</snippet></ROW><ROW><id>13138735</id><snippet>ascii</snippet></ROW><ROW><id>13138993</id><snippet>set</snippet></ROW><ROW><id>13138993</id><snippet>list</snippet></ROW><ROW><id>13138993</id><snippet>list</snippet></ROW><ROW><id>13138993</id><snippet>set</snippet></ROW><ROW><id>13138993</id><snippet>&gt;&gt;&gt; set(x['created_by'] for x in dave)
set(['admin', 'adam'])

&gt;&gt;&gt; list(set(x['created_by'] for x in dave))
['admin', 'adam']
</snippet></ROW><ROW><id>13139171</id><snippet>from foo import bar</snippet></ROW><ROW><id>13139171</id><snippet>bar</snippet></ROW><ROW><id>13139171</id><snippet>from myModules.myModule import myClass
# this will cause myModule.py to be evaluated.  only myClass is in scope

from myModules import myModule
# since myModule has already been imported, myModule.py is not evaluated again. 
# but now myModule is in scope.

reload(myModule)
# this will cause myModule.py to be evaluated again.
</snippet></ROW><ROW><id>13139171</id><snippet>sys.modules</snippet></ROW><ROW><id>13139306</id><snippet>action</snippet></ROW><ROW><id>13139306</id><snippet>&lt;form method="POST" action="/user-login"&gt;
  {% csrf_token %}
</snippet></ROW><ROW><id>13139306</id><snippet>POST</snippet></ROW><ROW><id>13139306</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>13139642</id><snippet>scatter</snippet></ROW><ROW><id>13139642</id><snippet>color</snippet></ROW><ROW><id>13139642</id><snippet>x = linspace(0,10)
y1 = randn(50)
y2 = randn(50)+10

scatter(x, y1, color='red')
scatter(x, y2, color='blue')
</snippet></ROW><ROW><id>13139907</id><snippet>expr</snippet></ROW><ROW><id>13139907</id><snippet>expr = operatorPrecedence(operand,
    [(".", 2, opAssoc.LEFT),
     ("+", 2, opAssoc.LEFT),]
    )
</snippet></ROW><ROW><id>13139907</id><snippet>expr = operatorPrecedence(operand,
    [(".", 2, opAssoc.RIGHT),
     ("+", 2, opAssoc.LEFT),]
    )
</snippet></ROW><ROW><id>13139907</id><snippet>for t in test:
    print expr_def.parseString(t).asList()
</snippet></ROW><ROW><id>13139907</id><snippet>['P', '=', ['A', '.', [['B', '.', 'C'], '+', ['E', '.', 'D']]]]
['P', '=', ['A', '.', ['B', '.', 'C']]]
</snippet></ROW><ROW><id>13140228</id><snippet>vars</snippet></ROW><ROW><id>13140228</id><snippet>locals</snippet></ROW><ROW><id>13140228</id><snippet>globals</snippet></ROW><ROW><id>13140228</id><snippet>file</snippet></ROW><ROW><id>13140228</id><snippet>def open_catch_down():
    file = raw_input(...) #this variable is local to the function
    [...]

print file                #here, file references the built-in file type
</snippet></ROW><ROW><id>13140228</id><snippet>file</snippet></ROW><ROW><id>13140228</id><snippet>file</snippet></ROW><ROW><id>13140228</id><snippet>filename</snippet></ROW><ROW><id>13140228</id><snippet>file</snippet></ROW><ROW><id>13140228</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>13140228</id><snippet>def open_catch_down():
    filename = raw_input(...) #your file name

    #... rest of the code

    return filename

filename = open_catch_down()
print filename
</snippet></ROW><ROW><id>13140482</id><snippet>find -type f | xargs ls -lrt -d -1 $PWD/* | awk '{print $5,$6,$7,$8,$9}' | your_python_program.py
</snippet></ROW><ROW><id>13140482</id><snippet>...
for line in sys.stdin:
   #process input
</snippet></ROW><ROW><id>13140482</id><snippet>os.walk</snippet></ROW><ROW><id>13140482</id><snippet>def f():
    w = os.walk('/')
    for path in w:
        if os.path.isfile(path[0]) yield path[0]
</snippet></ROW><ROW><id>13140703</id><snippet>$.ajaxSetup({data: {csrfmiddlewaretoken: '{{ csrf_token }}' },});
</snippet></ROW><ROW><id>13140711</id><snippet>#!/usr/bin/python

import logging
import subprocess
import sys

def forever():
    cmd = [sys.executable, 'infinit.py']
    while 1:
        try:
            print 'running new instance of:'
            print ' '.join(cmd)
            popen = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE, universal_newlines=True)

            for line in iter(popen.stderr.readline, ""):
                print line,

        except Exception as e:
            print 'Something bad happend'
            logging.error(e)

if __name__ == '__main__':
    forever()
</snippet></ROW><ROW><id>13140711</id><snippet>#!/usr/bin/python

import logging
import sys
import time

logging.basicConfig(level=logging.INFO)

sys.stdout = sys.stderr

i = 0
while 1:
    i += 1
    logging.info('i: {0}'.format(i))
    print i
    time.sleep(0.2)
</snippet></ROW><ROW><id>13140711</id><snippet>#!/usr/bin/python

import logging
import subprocess
import sys

def forever():
    CMD = [sys.executable, 'infinit.py']
    while 1:
        try:
            print 'running new instance of:'
            print ' '.join(CMD)

            popen = subprocess.Popen(CMD, stdout=subprocess.PIPE)
            for line in iter(popen.stdout.readline, ""):
                print line,

        except Exception as e:
            print 'Something bad happend'
            logging.error(e)
        finally:
            print


if __name__ == '__main__':
    forever()
</snippet></ROW><ROW><id>13140711</id><snippet>#!/usr/bin/python

import logging
import sys
import time


class FlushFile(object):
    """Write-only flushing wrapper for file-type objects."""
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

logging.basicConfig(level=logging.INFO)

sys.stdout = FlushFile(sys.stdout)


i = 0
while 1:
    i += 1
    logging.info('i: {0}'.format(i))
    print i
    time.sleep(0.2)
</snippet></ROW><ROW><id>13140732</id><snippet>if</snippet></ROW><ROW><id>13140732</id><snippet>&gt;&gt;&gt; dis.dis(compile("if not True: pass", "None", "exec",))
  1           0 LOAD_NAME                0 (True)
              3 POP_JUMP_IF_TRUE         9
              6 JUMP_FORWARD             0 (to 9)
        &gt;&gt;    9 LOAD_CONST               0 (None)
             12 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(compile("if True: pass", "None", "exec",))
  1           0 LOAD_NAME                0 (True)
              3 POP_JUMP_IF_FALSE        9
              6 JUMP_FORWARD             0 (to 9)
        &gt;&gt;    9 LOAD_CONST               0 (None)
             12 RETURN_VALUE        
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13141088</id><snippet>@mock.patch('%s.ftp2email.shutil.move' % __name__)
def test_mark_message(self, move_mock):

    self.ch.mark_message('/path/to/message.xml')
    move_mock.assert_called_with('/path/to/message.xml',
                                 '/path/to/archived/message.xml')
</snippet></ROW><ROW><id>13141199</id><snippet>}</snippet></ROW><ROW><id>13141199</id><snippet>[^}]</snippet></ROW><ROW><id>13141199</id><snippet>{</snippet></ROW><ROW><id>13141199</id><snippet>r"\{[^}]*"
</snippet></ROW><ROW><id>13141199</id><snippet>re.S</snippet></ROW><ROW><id>13141199</id><snippet>.</snippet></ROW><ROW><id>13141199</id><snippet>.</snippet></ROW><ROW><id>13141199</id><snippet>re.S</snippet></ROW><ROW><id>13141199</id><snippet>re.M</snippet></ROW><ROW><id>13141199</id><snippet>^</snippet></ROW><ROW><id>13141199</id><snippet>$</snippet></ROW><ROW><id>13141199</id><snippet>{</snippet></ROW><ROW><id>13141199</id><snippet>r"(?&lt;=\{)[^}]*"
</snippet></ROW><ROW><id>13141199</id><snippet>{</snippet></ROW><ROW><id>13141238</id><snippet>actions CallScript
{
    python script.py
}

CallScript sourcefile.c ;
</snippet></ROW><ROW><id>13141238</id><snippet>rule GenerateSource
{
    local source = [ FGristFiles $(1) ] ;
    MakeLocate $(source) : $(LOCATE_SOURCE) ;
    Clean clean : $(source) ;
    GenerateSource1 $(source) ;
}

actions GenerateSource1
{
    python script.py $(1)
}

GenerateSource sourcefile.c ;

Main foo : sourcefile.c ;
</snippet></ROW><ROW><id>13141252</id><snippet>from django.db import models
Organization.objects.filter(models.Q(members=me) | models.Q(founder=me))
</snippet></ROW><ROW><id>13141311</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(html_string)
# To find just 'Uge##' or 'uge##', as specified in the question:
urls = [el["href"] for el in soup.findAll("a", href=re.compile("[Uu]ge\d+"))]
# To find without regard to case at all:
urls = [el["href"] for el in soup.findAll("a", href=re.compile("(?i)uge\d+"))]
</snippet></ROW><ROW><id>13141563</id><snippet>gradient</snippet></ROW><ROW><id>13141563</id><snippet>numpy.gradient(f, *varargs)</snippet></ROW><ROW><id>13141563</id><snippet>f: array_like.</snippet></ROW><ROW><id>13141563</id><snippet>*varargs:</snippet></ROW><ROW><id>13141563</id><snippet>g: ndarray.</snippet></ROW><ROW><id>13141831</id><snippet>struct</snippet></ROW><ROW><id>13141831</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&lt;Q', 5707435436569584000)
'\x80\xe14OJ\xe24O'
&gt;&gt;&gt; struct.pack('&lt;Q', 5707435436569584202)
'J\xe24OJ\xe24O'
</snippet></ROW><ROW><id>13141831</id><snippet>&lt;</snippet></ROW><ROW><id>13141831</id><snippet>Q</snippet></ROW><ROW><id>13141831</id><snippet>14OJ</snippet></ROW><ROW><id>13141831</id><snippet>24O</snippet></ROW><ROW><id>13141831</id><snippet>J</snippet></ROW><ROW><id>13141831</id><snippet>&gt;&gt;&gt; struct.pack('&lt;Q', 5707435436569584202).encode('hex')
'4ae2344f4ae2344f'
&gt;&gt;&gt; '\x4a\xe2\x34\x4f\x4a\xe2\x34\x4f'
'J\xe24OJ\xe24O'
</snippet></ROW><ROW><id>13141856</id><snippet>file = open("image.jpg", "rb")
binary = file.read()
loader = gtk.gdk.PixbufLoader("jpeg")
loader.write(binary)
loader.close()
pixbuf = loader.get_pixbuf()
</snippet></ROW><ROW><id>13141856</id><snippet>pixbuf</snippet></ROW><ROW><id>13141975</id><snippet>vowels = [ c for c in str1 if c in 'aeo' ]
</snippet></ROW><ROW><id>13141975</id><snippet>'a' | 'e' | 'o'</snippet></ROW><ROW><id>13141975</id><snippet>|</snippet></ROW><ROW><id>13141975</id><snippet>&gt;&gt;&gt; str1 = 'sator arepo tenet opera rotas'
&gt;&gt;&gt; vowels = [ c for c in str1 if c in 'aeo' ]
&gt;&gt;&gt; print vowels
['a', 'o', 'a', 'e', 'o', 'e', 'e', 'o', 'e', 'a', 'o', 'a']
</snippet></ROW><ROW><id>13141975</id><snippet>is</snippet></ROW><ROW><id>13141975</id><snippet>is</snippet></ROW><ROW><id>13141975</id><snippet>a = 565
b = 565
print a == b #True
print a is b #False (!)
</snippet></ROW><ROW><id>13141975</id><snippet>a</snippet></ROW><ROW><id>13141975</id><snippet>b</snippet></ROW><ROW><id>13142064</id><snippet>surf.set_clim([np.min(Z),np.max(Z)])
</snippet></ROW><ROW><id>13142064</id><snippet>NaN</snippet></ROW><ROW><id>13142074</id><snippet>import sys

def get_path():
    namespace = sys._getframe(1).f_globals  # caller's globals
    return namespace.get('__file__')
</snippet></ROW><ROW><id>13142115</id><snippet>def max_heapify(A, i):
    left = 2 * i + 1
    right = 2 * i + 2
    largest = i
    if left &lt; len(A) and A[left] &gt; A[largest]:
        largest = left
    if right &lt; len(A) and A[right] &gt; A[largest]:
        largest = right
    if largest != i:
        A[i], A[largest] = A[largest], A[i]
        max_heapify(A, largest)

def build_max_heap(A):
    for i in range(len(A) // 2, -1, -1):
        max_heapify(A, i)
</snippet></ROW><ROW><id>13142115</id><snippet>def ptree(A, i=0, indent=0):
    if i &lt; len(A):
        print '  ' * indent, A[i]
        ptree(A, i * 2 + 1, indent + 1)
        ptree(A, i * 2 + 2, indent + 1)

A = range(9) 
build_max_heap(A)
ptree(A)
</snippet></ROW><ROW><id>13142115</id><snippet> 8
   7
     3
       1
       0
     4
   6
     5
     2
</snippet></ROW><ROW><id>13142115</id><snippet>next()</snippet></ROW><ROW><id>13142115</id><snippet>StopIteration</snippet></ROW><ROW><id>13142115</id><snippet>next</snippet></ROW><ROW><id>13142140</id><snippet>Spain</snippet></ROW><ROW><id>13142140</id><snippet>new_user = User(name='Johnny', country_id=session.query(Country).filter_by(name='Spain').one().id)
</snippet></ROW><ROW><id>13142140</id><snippet>country = session.query(Country).filter_by(name='Spain').one()
new_user = User(name='Johnny', country_id=country.id)
</snippet></ROW><ROW><id>13142140</id><snippet>User.country</snippet></ROW><ROW><id>13142140</id><snippet>relationship</snippet></ROW><ROW><id>13142140</id><snippet>country = session.query(Country).filter_by(name='Spain').one()
new_user = User(name='Johnny', country=country)
</snippet></ROW><ROW><id>13142140</id><snippet>User.country</snippet></ROW><ROW><id>13142140</id><snippet>users</snippet></ROW><ROW><id>13142140</id><snippet>backref</snippet></ROW><ROW><id>13142140</id><snippet>list</snippet></ROW><ROW><id>13142140</id><snippet>country = session.query(Country).filter_by(name='Spain').one()
country.users.add(User(name='Johnny'))
</snippet></ROW><ROW><id>13142356</id><snippet>test=[[False]*28]*24</snippet></ROW><ROW><id>13142356</id><snippet>False</snippet></ROW><ROW><id>13142356</id><snippet>test = [ [False]*28 for _ in range(24) ]
</snippet></ROW><ROW><id>13142356</id><snippet>False</snippet></ROW><ROW><id>13142356</id><snippet>numpy</snippet></ROW><ROW><id>13142356</id><snippet>import numpy as np
test = np.zeros((24,28),dtype=bool)
</snippet></ROW><ROW><id>13142375</id><snippet>your_string.strip("0")
</snippet></ROW><ROW><id>13142375</id><snippet>.rstrip</snippet></ROW><ROW><id>13142375</id><snippet>.lstrip</snippet></ROW><ROW><id>13142375</id><snippet>trailing_removed = [s.rstrip("0") for s in listOfNum]
leading_removed = [s.lstrip("0") for s in listOfNum]
both_removed = [s.strip("0") for s in listOfNum]
</snippet></ROW><ROW><id>13142398</id><snippet>import sys
from PyQt4 import QtCore, QtGui, QtSvg
from PyQt4.QtWebKit import QGraphicsWebView
if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)

    scene = QtGui.QGraphicsScene()
    view = QtGui.QGraphicsView(scene)

    br = QtSvg.QGraphicsSvgItem("C:\my_interactive_svg.svg").boundingRect()

    webview = QGraphicsWebView()
    webview.load(QtCore.QUrl("C:\my_interactive_svg.svg"))
    webview.setFlags(QtGui.QGraphicsItem.ItemClipsToShape)
    webview.setCacheMode(QtGui.QGraphicsItem.NoCache)
    webview.resize(br.width(), br.height())

    scene.addItem(webview)
    view.resize(br.width()+10, br.height()+10)
    view.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13142398</id><snippet>webview.size()</snippet></ROW><ROW><id>13142474</id><snippet>\s</snippet></ROW><ROW><id>13142474</id><snippet>-</snippet></ROW><ROW><id>13142474</id><snippet>^[a-zA-Z0-9_\s-]{3,100}$
</snippet></ROW><ROW><id>13143060</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>13143060</id><snippet>fields = ('mykey1', 'mykey2', ...)
with open('output.csv', 'wb') as f:
    writer = csv.DictWriter(f, fields)
    writer.writerow({f: f for f in fields})  # write a header row
    for entry in myList:
        write.writerow(entry)
</snippet></ROW><ROW><id>13143076</id><snippet>os.environ</snippet></ROW><ROW><id>13143076</id><snippet>os._Environ</snippet></ROW><ROW><id>13143076</id><snippet>os._Environ</snippet></ROW><ROW><id>13143076</id><snippet>os._Environ.__setitem__()</snippet></ROW><ROW><id>13143076</id><snippet>putenv()</snippet></ROW><ROW><id>13143076</id><snippet>self._data</snippet></ROW><ROW><id>13143076</id><snippet>def __setitem__(self, key, value):
    key = self.encodekey(key)
    value = self.encodevalue(value)
    self.putenv(key, value)
    self._data[key] = value
</snippet></ROW><ROW><id>13143154</id><snippet>from itertools import product

pro = product(A,B)
C = map(lambda x: func(*x), pro)
</snippet></ROW><ROW><id>13143330</id><snippet># a is your array
bytes = a.itemsize * a.size
</snippet></ROW><ROW><id>13143330</id><snippet>bytes = a.dtype.itemsize * a.size
</snippet></ROW><ROW><id>13143694</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>13143697</id><snippet>iterparse</snippet></ROW><ROW><id>13143697</id><snippet># get an iterable
context = iterparse(source, events=("start", "end"))

# turn it into an iterator
context = iter(context)

# get the root element
event, root = context.next()

for event, elem in context:
    if event == "end" and elem.tag == "record":
        ... process record elements ...
        root.clear()
</snippet></ROW><ROW><id>13143918</id><snippet>import Image, ImageDraw # PIL modules

withlines = Image.open('withgrid.jpg')
nolines   = Image.open('nogrid.jpg')

def findlines(image):
    w,h, = image.size
    s = w*h
    im = image.point(lambda i: 255 * (i &lt; 60))   # threshold
    d = im.getdata()      # faster than per-pixel operations

    linecolumns = []

    for col in range(w):
        black = sum( (d[x] for x in range(col, s, w)) )//255
        if black &gt; 450:
            linecolumns += [col]

    # return an image showing the detected lines
    im2 = image.convert('RGB')
    draw = ImageDraw.Draw(im2)        
    for col in linecolumns:
        draw.line( (col,0,col,h-1), fill='#f00', width = 1)

    return im2

findlines(withlines).show()
findlines(nolines).show()
</snippet></ROW><ROW><id>13144457</id><snippet>#!/usr/bin/python

import sys

# Test that script was run directly
if __name__=='__main__':
    for line in sys.stdin:
       hour = re.search(r'\b([0-9]{2}):', line).group(1)
else:
    print 'Imported local time.py instead of global time module!'
    sys.exit(1)
</snippet></ROW><ROW><id>13144541</id><snippet>--notebook-dir=/home/foo/wherever</snippet></ROW><ROW><id>13144541</id><snippet>ipython notebook --help</snippet></ROW><ROW><id>13144587</id><snippet>match()</snippet></ROW><ROW><id>13144587</id><snippet>search()</snippet></ROW><ROW><id>13144587</id><snippet>match()</snippet></ROW><ROW><id>13144587</id><snippet>\A</snippet></ROW><ROW><id>13144587</id><snippet>re.M</snippet></ROW><ROW><id>13144587</id><snippet>^</snippet></ROW><ROW><id>13144587</id><snippet>$</snippet></ROW><ROW><id>13144587</id><snippet>re.S | re.M</snippet></ROW><ROW><id>13144607</id><snippet>import urllib2
from django.core.files.base import ContentFile

content = ContentFile(urllib2.urlopen(url).read())
article.image.save('%i.jpg' % article.pk, content, save=True)
</snippet></ROW><ROW><id>13144607</id><snippet>from urllib import urlretrieve
urlretrieve(url, '%i.jpg' % article.pk)
</snippet></ROW><ROW><id>13144672</id><snippet>cmd &gt; location of scripts

pyinstaller.py --onefile &lt;yourscript&gt;
</snippet></ROW><ROW><id>13144764</id><snippet>np.matrix</snippet></ROW><ROW><id>13144764</id><snippet>data</snippet></ROW><ROW><id>13144764</id><snippet>__new__</snippet></ROW><ROW><id>13144764</id><snippet>__init__</snippet></ROW><ROW><id>13144764</id><snippet>class MyMatrix(np.matrix):
    def __new__(cls):
        # note that we have to send cls to super's __new__, even though we gave it to super already.
        # I think this is because __new__ is technically a staticmethod even though it should be a classmethod
        return super(MyMatrix, cls).__new__(cls, "1 2; 3 4")

mat = MyMatrix()

print mat
# outputs [[1 2] [3 4]]
</snippet></ROW><ROW><id>13144764</id><snippet>__new__</snippet></ROW><ROW><id>13144764</id><snippet>__init__</snippet></ROW><ROW><id>13144764</id><snippet>def mymatrix():
    return np.matrix('1 2; 3 4')

mat = mymatrix()
print mat
# outputs [[1 2] [3 4]]
</snippet></ROW><ROW><id>13144909</id><snippet>"/\*(?P&lt;contents&gt;.*?)\*/"
</snippet></ROW><ROW><id>13144909</id><snippet>.*</snippet></ROW><ROW><id>13144909</id><snippet>findall</snippet></ROW><ROW><id>13144909</id><snippet>search</snippet></ROW><ROW><id>13145000</id><snippet>int main(){
  auto map = boost::adaptors::transformed; // shorten the name
  auto sink = generate(1) | map([](int x){ return 2*x; })
                          | map([](int x){ return x+1; })
                          | map([](int x){ return 3*x; });
  for(auto i : sink)
    std::cout &lt;&lt; i &lt;&lt; "\n";
}
</snippet></ROW><ROW><id>13145000</id><snippet>generate</snippet></ROW><ROW><id>13145270</id><snippet>satellite_output.x[k]</snippet></ROW><ROW><id>13145310</id><snippet>ssh hostname uptime
</snippet></ROW><ROW><id>13145310</id><snippet>.ssh/authorized_keys</snippet></ROW><ROW><id>13145310</id><snippet>s = boto.manage.cmdshell.SSHClient(hostname, uname='root')
s.run('uptime')
</snippet></ROW><ROW><id>13145384</id><snippet>print (int(hexlify(corr),16))&amp;0x01
</snippet></ROW><ROW><id>13145392</id><snippet>In [51]: lis=["1.jpg","10.jpg","11.jpg","2.jpg","20.jpg"]

In [52]: sorted(lis,key=lambda x:int(x.split(".")[0]))
Out[52]: ['1.jpg', '2.jpg', '10.jpg', '11.jpg', '20.jpg']
</snippet></ROW><ROW><id>13145394</id><snippet>onStart</snippet></ROW><ROW><id>13145407</id><snippet>Count</snippet></ROW><ROW><id>13145407</id><snippet>distinct</snippet></ROW><ROW><id>13145407</id><snippet>p = Project.objects.all().annotate(Count('informationunit__username', 
                                         distinct=True))
</snippet></ROW><ROW><id>13145410</id><snippet>import *</snippet></ROW><ROW><id>13145410</id><snippet>pylab</snippet></ROW><ROW><id>13145410</id><snippet>#!/usr/bin/env python
from pylab import *

x = linspace(0.1, 2*pi, 10)
markerline, stemlines, baseline = stem(x, cos(x), '-.')
setp(markerline, 'markerfacecolor', 'b')
setp(baseline, 'color','r', 'linewidth', 2)

show()
</snippet></ROW><ROW><id>13145410</id><snippet>bottom</snippet></ROW><ROW><id>13145410</id><snippet>#!/usr/bin/env python
from pylab import *

x = linspace(0.1, 2*pi, 10)
stem(x, cos(x), '-.', bottom=-2)

show()
</snippet></ROW><ROW><id>13145419</id><snippet>max()</snippet></ROW><ROW><id>13145419</id><snippet>itemgetter()</snippet></ROW><ROW><id>13145419</id><snippet>In [53]: lis=[(101, 153), (255, 827), (361, 961)]

In [81]: from operator import itemgetter

In [82]: max(lis,key=itemgetter(1))[0]    #faster solution
Out[82]: 361
</snippet></ROW><ROW><id>13145419</id><snippet>lambda</snippet></ROW><ROW><id>13145419</id><snippet>In [54]: max(lis,key=lambda item:item[1])
Out[54]: (361, 961)

In [55]: max(lis,key=lambda item:item[1])[0]
Out[55]: 361
</snippet></ROW><ROW><id>13145419</id><snippet>timeit</snippet></ROW><ROW><id>13145419</id><snippet>In [30]: %timeit max(lis,key=itemgetter(1))
1000 loops, best of 3: 232 us per loop

In [31]: %timeit max(lis,key=lambda item:item[1])
1000 loops, best of 3: 556 us per loop
</snippet></ROW><ROW><id>13145569</id><snippet>TypeError: cannot create 'NoneType' instances
</snippet></ROW><ROW><id>13145660</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>13145660</id><snippet>{{ request }}</snippet></ROW><ROW><id>13145660</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>13145660</id><snippet>#TEMPLATE_CONTEXT_PROCESSORS = (
#        "django.contrib.auth.context_processors.auth",
#        'django.core.context_processors.i18n',
#        'django.core.context_processors.request',
#        'django.core.context_processors.media',
#        'django.core.context_processors.static',
#        'zinnia.context_processors.version',
#)
</snippet></ROW><ROW><id>13145671</id><snippet>find_</snippet></ROW><ROW><id>13145671</id><snippet>find_closest</snippet></ROW><ROW><id>13145671</id><snippet>find_overlapping</snippet></ROW><ROW><id>13145692</id><snippet>new_d = {key: old_d[key] for key in myList}
</snippet></ROW><ROW><id>13145692</id><snippet>dict</snippet></ROW><ROW><id>13145692</id><snippet>new_d = dict((key, old_d[key]) for key in myList)
</snippet></ROW><ROW><id>13145695</id><snippet>n_jobs</snippet></ROW><ROW><id>13146156</id><snippet>&gt;&gt; RubyPython.start(:python_exe =&gt; "python2.6")
</snippet></ROW><ROW><id>13146156</id><snippet>&gt;&gt; RubyPython.start(:python_exe =&gt; "/usr/local/bin/pypy")
RubyPython::InvalidInterpreter: An invalid interpreter was specified.
    from /Library/Ruby/Gems/1.8/gems/rubypython-0.6.3/lib/rubypython.rb:67:in `start'
    from /Library/Ruby/Gems/1.8/gems/rubypython-0.6.3/lib/rubypython/python.rb:10:in `synchronize'
    from /Library/Ruby/Gems/1.8/gems/rubypython-0.6.3/lib/rubypython/python.rb:10:in `synchronize'
    from /Library/Ruby/Gems/1.8/gems/rubypython-0.6.3/lib/rubypython.rb:54:in `start'
    from (irb):4
</snippet></ROW><ROW><id>13146204</id><snippet>data_files</snippet></ROW><ROW><id>13146204</id><snippet>setup.py</snippet></ROW><ROW><id>13146204</id><snippet>from setuptools import setup

APP = ['app.py']
DATA_FILES = [('', ['images'])]
OPTIONS = {'argv_emulation': True}

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
)
</snippet></ROW><ROW><id>13146204</id><snippet>&lt;app.app&gt;/Contents/Resources</snippet></ROW><ROW><id>13146204</id><snippet>images/</snippet></ROW><ROW><id>13146204</id><snippet>images/</snippet></ROW><ROW><id>13146204</id><snippet>DATA_FILES = [
    ('images', ['images/picture.jpg', 'images/picture2.png']),
    ('images/icons', ['images/icons/ico1.ico'])
]
</snippet></ROW><ROW><id>13146204</id><snippet>from glob import glob
...
DATA_FILES = [
    ('images', glob('images/*.jpg')),
]
</snippet></ROW><ROW><id>13146383</id><snippet>subprocess</snippet></ROW><ROW><id>13146383</id><snippet>Popen</snippet></ROW><ROW><id>13146591</id><snippet>&gt;&gt;&gt; from croniter import croniter
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; base = datetime(2010, 1, 25, 4, 46)
&gt;&gt;&gt; iter = croniter('*/5 * * * *', base)  # every 5 minites
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-01-25 04:50:00
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-01-25 04:55:00
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-01-25 05:00:00
&gt;&gt;&gt;
&gt;&gt;&gt; iter = croniter('2 4 * * mon,fri', base)  # 04:02 on every Monday and Friday
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-01-26 04:02:00
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-01-30 04:02:00
&gt;&gt;&gt; print iter.get_next(datetime)   # 2010-02-02 04:02:00
</snippet></ROW><ROW><id>13146935</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as patches
import matplotlib.cm as cm

def draw_rect(x, y, z):
    rect = patches.Rectangle((x,y), 1, 1, color = jet(z))
    ax.add_patch(rect)

jet = plt.get_cmap('jet')
fig = plt.figure()
ax = fig.add_subplot(111)

darray = np.array([[2, 3, 7, 7],
                   [4, 8, 2, 3],
                   [6, 1, 9, 5],
                   [3, 4, 8, 4]], dtype = 'float')
darray_norm = darray/darray.max()

posarray = [3.767, 1.85, 0.762]
x = np.cumsum(np.hstack((0, np.array(posarray)+1)))

for j, i in np.ndindex(darray.shape):
    draw_rect(x[j], i, darray_norm[i, j])
ax.set_xlim(x.min(),x.max()+1)
ax.set_ylim(0,len(darray))
ax.invert_yaxis()    
m = cm.ScalarMappable(cmap = jet)
m.set_array(darray)
plt.colorbar(m)
plt.show()
</snippet></ROW><ROW><id>13147135</id><snippet>Seq</snippet></ROW><ROW><id>13147135</id><snippet>from Bio import SeqIO

with open("outfile.txt","w") as f:
        for seq_record in SeqIO.parse("infile.fasta", "fasta"):
                f.write(str(seq_record.id) + "\n")
                f.write(str(seq_record.seq[:10]) + "\n")  #first 10 base positions
                f.write(str(seq_record.seq[-10:]) + "\n") #last 10 base positions
</snippet></ROW><ROW><id>13147415</id><snippet>from django import template
from django.utils.safestring import mark_safe

register = template.Library()
@register.filter(name='formattedtext')

def formattedtext(value):
    try:
        scoringTemplate = "&lt;b&gt;" + value + "&lt;/b&gt;"
        print scoringTemplate #return string with "&lt;b&gt;text&lt;/b&gt;"
        return mark_safe(scoringTemplate)   # unescaped, raw html
    except ValueError:
        return value
    except:
        return value
</snippet></ROW><ROW><id>13147544</id><snippet>bytes</snippet></ROW><ROW><id>13147544</id><snippet>open(pjoin(curdir, 'a.file'))</snippet></ROW><ROW><id>13147544</id><snippet>open(pjoin(curdir, 'store.json'), 'rb')</snippet></ROW><ROW><id>13147544</id><snippet>rb</snippet></ROW><ROW><id>13147926</id><snippet>main/__init__.py</snippet></ROW><ROW><id>13147926</id><snippet>myapp</snippet></ROW><ROW><id>13147926</id><snippet>import utils
from modules.layer4 import layer4
</snippet></ROW><ROW><id>13147926</id><snippet>$ cat myapp/main.py 
import utils
from modules.layer4 import layer4
from modules.iptables import iptables

$ cat myapp/modules/iptables/iptables.py
from modules.layer4 import layer4

$ cat myapp/modules/layer4/layer4.py
import utils
</snippet></ROW><ROW><id>13147953</id><snippet>route_kwargs_decoded = {}
for key, value in self.request.route_kwargs.iteritems():
    route_kwargs_decoded[key] = value.decode('utf-8')
self.request.route_kwargs = route_kwargs_decoded
</snippet></ROW><ROW><id>13148109</id><snippet>import requests

URL = 'https://www.yourlibrary.ca/account/index.cfm'
payload = {
    'barcode': 'your user name/login',
    'telephone_primary': 'your password',
    'persistent': '1'  # remember me
}

session = requests.session()
r = requests.post(URL, data=payload)
print r.cookies
</snippet></ROW><ROW><id>13148109</id><snippet>form</snippet></ROW><ROW><id>13148109</id><snippet>input</snippet></ROW><ROW><id>13148109</id><snippet>name</snippet></ROW><ROW><id>13148109</id><snippet>request.session</snippet></ROW><ROW><id>13148109</id><snippet>session.get(someurl, ...)</snippet></ROW><ROW><id>13148241</id><snippet># html comes with BOM everywhere, which is real ***, get rid of it!
html = html.replace(b'\xEF\xBB\xBF', b'')
html = html.decode("utf-8")
</snippet></ROW><ROW><id>13148241</id><snippet>b</snippet></ROW><ROW><id>13148241</id><snippet>replace(u'\uFEFF', u'')</snippet></ROW><ROW><id>13148307</id><snippet>&lt;?php 

class FileGrep {
    private $dirs;      // Scanned directories list
    private $files;     // Found files list
    private $matches;   // Matches list

    function __construct() {
        $this-&gt;dirs = array();
        $this-&gt;files = array();
        $this-&gt;matches = array();
    }

    function findFiles($path, $recursive = TRUE) {
        $this-&gt;dirs[] = realpath($path);
        foreach (scandir($path) as $file) {
            if (($file != '.') &amp;&amp; ($file != '..')) {
                $fullname = realpath("{$path}/{$file}");
                if (is_dir($fullname) &amp;&amp; !is_link($fullname) &amp;&amp; $recursive) {
                    if (!in_array($fullname, $this-&gt;dirs)) {
                        $this-&gt;findFiles($fullname, $recursive);
                    }
                } else if (is_file($fullname)){
                    $this-&gt;files[] = $fullname;
                }
            }
        }
        return($this-&gt;files);
    }

    function searchFiles($pattern) {
        $this-&gt;matches = array();
        foreach ($this-&gt;files as $file) {
            if ($contents = file_get_contents($file)) {
                if (preg_match($pattern, $contents, $matches) &gt; 0) {
                    //echo $file."\n";
                    $this-&gt;matches = array_merge($this-&gt;matches, $matches);
                }
            }
        }
        return($this-&gt;matches);
    }
}


// Usage example:

$fg = new FileGrep();
$files = $fg-&gt;findFiles('.');               // List all the files in current directory and its subdirectories
$matches = $fg-&gt;searchFiles('/open/');      // Search for the "open" string in all those files

?&gt;
&lt;html&gt;
    &lt;body&gt;
        &lt;pre&gt;&lt;?php print_r($matches) ?&gt;&lt;/pre&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13148309</id><snippet>*/+-</snippet></ROW><ROW><id>13148309</id><snippet>def find_operator_right(text):
    position = -1

    for oper in '*/+-':
        index = text.rfind(oper)

        if index &gt; position:
            position = index

    return position
</snippet></ROW><ROW><id>13148309</id><snippet>right_index = max(map(text.rfind, '+-/*'))
</snippet></ROW><ROW><id>13148364</id><snippet>itertools.product</snippet></ROW><ROW><id>13148364</id><snippet>from itertools import product

with open('testing2.txt') as fin:
    for line in fin:
        items = line.split()
        first, rest = items[0], items[1:]
        for i, j in product(first, rest):
            print i, j
</snippet></ROW><ROW><id>13148394</id><snippet>parse_args()</snippet></ROW><ROW><id>13148394</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-b', action="store_true")
parser.add_argument('-c', action="store_true")
parser.add_argument('-d', action="store_true")
parser.add_argument('-a', action="store_true")
args = parser.parse_args()
if args.a: args.b = args.c = args.d = True
</snippet></ROW><ROW><id>13148394</id><snippet>import argparse
class AllAction(argparse.Action):
    def __call__(self, parser, args, values, option_string = None):
        # print '{n} {v} {o}'.format(n = args, v = values, o = option_string)
        for param in ['a', 'b', 'c', 'd']:
            setattr(args, param, True)

parser = argparse.ArgumentParser()
parser.add_argument('-b', action="store_true")
parser.add_argument('-c', action="store_true")
parser.add_argument('-d', action="store_true")
parser.add_argument('-a', action = AllAction, nargs = '?')
args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>13148471</id><snippet>csv.DictReader</snippet></ROW><ROW><id>13148471</id><snippet>rows = [{'Type': 'Vegetable', 'Name': 'Lettuce', 'Application': 'StoreA'},
        {'Type': 'Fruit', 'Name': 'Apple', 'Application': 'StoreB'},
        {'Type': 'Vegetable', 'Name': 'Orange', 'Application': 'StoreB'},
        {'Type': 'Fruit', 'Name': 'Pear', 'Application': 'StoreC'},
        {'Type': 'Dairy', 'Name': 'Milk', 'Application': 'StoreA'},
        {'Type': 'Fruit', 'Name': 'Plum', 'Application': 'StoreB'},
        {'Type': 'Fruit', 'Name': 'Plum', 'Application': 'StoreA'}]
</snippet></ROW><ROW><id>13148471</id><snippet>result = {}
for row in rows:
    stores = result.setdefault(row['Type'], {})
    names = stores.setdefault(row['Application'], [])
    names.append(row['Name'])

&gt;&gt;&gt; pprint.pprint(result)
{'Dairy': {'StoreA': ['Milk']},
 'Fruit': {'StoreA': ['Plum'],
           'StoreB': ['Apple', 'Plum'],
           'StoreC': ['Pear']},
 'Vegetable': {'StoreA': ['Lettuce'],
               'StoreB': ['Orange']}}
</snippet></ROW><ROW><id>13148471</id><snippet>for</snippet></ROW><ROW><id>13148471</id><snippet>for row in rows:
    result.setdefault(row['Type'], {}).setdefault(row['Application'], []).append(row['Name'])
</snippet></ROW><ROW><id>13148598</id><snippet>split</snippet></ROW><ROW><id>13148598</id><snippet>In [1]: str = "def Hello(self,event):"
In [2]: str.split(' ')[1].split('(')[0]
</snippet></ROW><ROW><id>13148660</id><snippet>di = {"a": 3, "children": [{"b": 5}, {"c": 6}]}
di['children'] = [el for el in di['children'] if el not in di['children']]
</snippet></ROW><ROW><id>13148660</id><snippet>di = {"a": 3, "children": [{"b": 5}, {"c": 6}]}
di['children'] = []
</snippet></ROW><ROW><id>13149215</id><snippet>for</snippet></ROW><ROW><id>13149215</id><snippet>i</snippet></ROW><ROW><id>13149215</id><snippet>o</snippet></ROW><ROW><id>13149215</id><snippet>in</snippet></ROW><ROW><id>13149215</id><snippet>(("&amp;","&amp;"),("&gt;", "&gt;"),("&lt;", "&amp;lt"),('"', """))</snippet></ROW><ROW><id>13149215</id><snippet>replace</snippet></ROW><ROW><id>13149215</id><snippet>i</snippet></ROW><ROW><id>13149215</id><snippet>o</snippet></ROW><ROW><id>13149215</id><snippet>s</snippet></ROW><ROW><id>13149290</id><snippet>zip</snippet></ROW><ROW><id>13149290</id><snippet>my_list2, my_list1 = zip(*my_list)
</snippet></ROW><ROW><id>13149290</id><snippet>my_list2, my_list1 = map(list, zip(*my_list))
</snippet></ROW><ROW><id>13149341</id><snippet>string = "Article One News"
words = string.split()

i = 0
while i &lt; len(words):
    word = words[i]
    # Do whatever you want with this word
    i += 1
</snippet></ROW><ROW><id>13149460</id><snippet>import codecs

original_document_encoding = "shift-jis" # common japanese encoding.
with codecs.open("rshmn10j.txt", 'r', encoding=original_document_encoding) as in_f:
    unicode_content = in_f.read()

with codecs.open("rshmn10j.out.txt", 'w', encoding='utf-8') as out_f:
    out_f.write(unicode_content)
</snippet></ROW><ROW><id>13149460</id><snippet>with</snippet></ROW><ROW><id>13149582</id><snippet>cur.execute("INSERT INTO foo(bar) VALUES (?);", (bar,))
</snippet></ROW><ROW><id>13149582</id><snippet>bar</snippet></ROW><ROW><id>13149675</id><snippet>(X^T*X)^-1 * X^T * Y</snippet></ROW><ROW><id>13149675</id><snippet>a = X^T*X</snippet></ROW><ROW><id>13149675</id><snippet>b = X^T*Y</snippet></ROW><ROW><id>13149675</id><snippet>a^-1 * b</snippet></ROW><ROW><id>13149675</id><snippet>numpy.dot(X0, Y)</snippet></ROW><ROW><id>13149675</id><snippet>X^T*Y</snippet></ROW><ROW><id>13149675</id><snippet>X^T*X</snippet></ROW><ROW><id>13149743</id><snippet>15&gt;10==True</snippet></ROW><ROW><id>13149743</id><snippet>15 &gt; 10 and 10 == True
</snippet></ROW><ROW><id>13149743</id><snippet>False</snippet></ROW><ROW><id>13149743</id><snippet>15&gt;1==True</snippet></ROW><ROW><id>13149743</id><snippet>15 &gt; 1 and 1 == True
</snippet></ROW><ROW><id>13149743</id><snippet>True</snippet></ROW><ROW><id>13149743</id><snippet>comparison    ::=  or_expr ( comp_operator or_expr )*
comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "&lt;&gt;" | "!="
                   | "is" ["not"] | ["not"] "in"
</snippet></ROW><ROW><id>13150000</id><snippet>#!/usr/bin/python

import sys              # enables operations on system objects (files!)
import Image            # basic image processing/manipulation, just what we want

im = Image.open('img.png')       # open the image file as a python image object
with open('data.dat', 'w') as f: # open the data file to be written
    for i in range(im.size[0]):  # loop over columns
        counter = sum(im.getpixel((i,j)) for j in range(im.size[1]))
        f.write(str(i)+'\t'+str(counter)+'\n')  # write to data file
</snippet></ROW><ROW><id>13150000</id><snippet>#!/usr/bin/gnuplot

set terminal pngcairo size 925,900
set output 'plot.png'
#set terminal pdfcairo
#set output 'plot.pdf'
set multiplot

## first plot
set origin 0,0.025              # this plot will be on the bottom
set size 1,0.75                 # and fill 3/4 of the whole canvas

set title "Black count in XKCD 'Self-Description'"
set xlabel 'Column'
set ylabel "Black\ncount" norotate offset screen 0.0125

set lmargin at screen 0.15      # make plot area correct size
set rmargin at screen 0.95      # width = 740 px = (0.95-0.15)*925 px

set border 0                    # these settings are just to make the data
set grid                        # stand out and not overlap with the tics, etc.
set tics nomirror
set xtics scale 0.5 out 
set ytics scale 0

set xr [0:740]                  # x range such that there is one spike/pixel

## uncomment if gnuplot version &gt;= 4.6.0
## this will autoset the x and y ranges
#stats 'data.dat'
#set xr [STATS_min_x:STATS_max_x+1]
#set yr [STATS_min_y:STATS_may_y]

plot 'data.dat' with impulse notitle lc 'black'

## second plot
set origin 0,0.75               # this plot will be on top
set size 1,0.25                 # and fill 1/4 of the canvas

unset ylabel; unset xlabel      # clean up a bit...
unset border; unset grid; unset tics; unset title

set size ratio -1               # ensures image proper ratio
plot 'img.png' binary filetype=png with rgbimage

unset multiplot         # important to unset multiplot!
</snippet></ROW><ROW><id>13150000</id><snippet>img.png</snippet></ROW><ROW><id>13150000</id><snippet>$ chmod 755 grayscalecount.py plot.plt
</snippet></ROW><ROW><id>13150000</id><snippet>$ ./grayscalecount.py
$ ./plot.plt
</snippet></ROW><ROW><id>13150007</id><snippet>settings.py</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_ROOT = '/abs/path/to/media/'
</snippet></ROW><ROW><id>13150007</id><snippet>models.ImageField(upload_to='movie_posters')
</snippet></ROW><ROW><id>13150007</id><snippet>/abs/path/to/media/movie_posters/
/abs/path/to/media/movie_posters/poster.jpg &lt;- example
</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13150007</id><snippet>settings.py</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL = 'http://localhost/media/'
</snippet></ROW><ROW><id>13150007</id><snippet>movie_posters/poster.jpg</snippet></ROW><ROW><id>13150007</id><snippet>/abs/path/to/media/movie_posters/poster.jpg</snippet></ROW><ROW><id>13150007</id><snippet>http://localhost/media/movie_posters/poster.jpg</snippet></ROW><ROW><id>13150007</id><snippet>{{ MEDIA_URL }}{{ movie.poster }}
</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13150007</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13150007</id><snippet>ImageField</snippet></ROW><ROW><id>13150007</id><snippet>FileField</snippet></ROW><ROW><id>13150007</id><snippet>url</snippet></ROW><ROW><id>13150007</id><snippet>{{ movie.poster.url }}
</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>13150007</id><snippet>python -m SimpleHTTPServer 8090
</snippet></ROW><ROW><id>13150007</id><snippet>MEDIA_URL = 'http://localhost:8090/'
</snippet></ROW><ROW><id>13150043</id><snippet>return max(self.recursive_dynamic_knap(v, w, i+1,W), self.recursive_dynamic_knap(v, w, i+1, W-w[i]) + v[i])</snippet></ROW><ROW><id>13150043</id><snippet>recursive_dynamic_knap</snippet></ROW><ROW><id>13150043</id><snippet>v</snippet></ROW><ROW><id>13150043</id><snippet>max()</snippet></ROW><ROW><id>13150043</id><snippet>int</snippet></ROW><ROW><id>13150048</id><snippet>&gt;&gt;&gt; a = np.zeros((10, 0))
&gt;&gt;&gt; a.shape
(10, 0)
</snippet></ROW><ROW><id>13150048</id><snippet>ndarray.resize</snippet></ROW><ROW><id>13150097</id><snippet>class MyClass(object):
    def __init__(self, data):
        if not isinstance(data, correct_type):
            raise TypeError("data argument must be of type X")
</snippet></ROW><ROW><id>13150097</id><snippet>try:
    myInstance = MyClass(questionable_data)

except TypeError:
    #data is not the correct type. "pass" or handle in an alternative way. 
</snippet></ROW><ROW><id>13150097</id><snippet>if isinstance(data, correct_type):
    myInstance = MyClass(data)
else:
    #data is not the correct type. "pass" or handle in an alternative way. 
</snippet></ROW><ROW><id>13150274</id><snippet>if dellon == 1:
    print("\n(1) Dellon")
</snippet></ROW><ROW><id>13150274</id><snippet>dellon</snippet></ROW><ROW><id>13150274</id><snippet>dellon</snippet></ROW><ROW><id>13150274</id><snippet>if choice == 1:
    dellon(0)
</snippet></ROW><ROW><id>13150274</id><snippet>dellon</snippet></ROW><ROW><id>13150274</id><snippet>0</snippet></ROW><ROW><id>13150274</id><snippet>dellon</snippet></ROW><ROW><id>13150274</id><snippet>if dellon == 1:</snippet></ROW><ROW><id>13150274</id><snippet>dellon</snippet></ROW><ROW><id>13150459</id><snippet>import io
import time

def checklog(fs,logfile):
    trytimes = 10
    line = ''
    while line == '':
        time.sleep(1)
        line = fs.readline().replace('\n','')
        trytimes = trytimes - 1
        while trytimes == 0 and line == '':
            try:
                fs = io.open(logfile,'rb')
                fs.seek(0,2)
                trytimes = 10
                break
            except:
                time.sleep(10)
    return line,fs


logfile="app.log"
fs = io.open(logfile,'rb')
fs.seek(0,2)# seek to tail of the logfile
while True:
    line = fs.readline().replace('\n','')
    while line == '':
        line,fs = checklog(fs,logfile)
        #do something for line;
</snippet></ROW><ROW><id>13150498</id><snippet>$ pattern="\\&lt;($(grep '^#define ' Strings.h | cut -d' ' -f2 | tr '\n' '|' | sed 's/|$//'))\\&gt;"
$ find project_dir -iname '*.m' -exec egrep -Hno "${pattern}" {} + &gt; matches
</snippet></ROW><ROW><id>13150498</id><snippet>project_dir/bar.m:132:LATITUDE_WORD
project_dir/baz.m:22:LONGITUDE_WORD
project_dir/bim.m:112:LONGITUDE_WORD
project_dir/foo.m:42:LATITUDE_WORD
</snippet></ROW><ROW><id>13150498</id><snippet>matches</snippet></ROW><ROW><id>13150498</id><snippet>for word in $(grep '^#define ' Strings.h | cut -d' ' -f2)
do
    if ! cut -d':' -f3 matches | grep -q "${word}"
    then
        echo "${word}"
    fi
done
</snippet></ROW><ROW><id>13150576</id><snippet>persons = query(Entity).filter_by(entity_type='persons').all()
</snippet></ROW><ROW><id>13150576</id><snippet>ptable = Person.__table__
rows = query(ptable).filter(ptable.c.foo == 'bar').all()
</snippet></ROW><ROW><id>13150576</id><snippet>from sqlalchemy.orm import mapper
nperson = mapper(Person, Person.__table__, non_primary=True)
people = query(nperson).filter(nperson.c.foo == 'bar').all()
</snippet></ROW><ROW><id>13150576</id><snippet>class Employee(Person)</snippet></ROW><ROW><id>13150579</id><snippet>adcout &gt;&gt;= 1       # first bit is 'null' so drop it
return adcout
</snippet></ROW><ROW><id>13150579</id><snippet>return adcout;
</snippet></ROW><ROW><id>13150588</id><snippet>knap_array = []

for i in range(1, len(v)): #The index out of range error occurs here:
    knap_array.append([v[i],w[i]])
</snippet></ROW><ROW><id>13150600</id><snippet>content.split</snippet></ROW><ROW><id>13150600</id><snippet>content</snippet></ROW><ROW><id>13150600</id><snippet>&lt;built-in method split of str object at 0x100894200&gt;</snippet></ROW><ROW><id>13150600</id><snippet>content = content.split()
</snippet></ROW><ROW><id>13150600</id><snippet>str.split</snippet></ROW><ROW><id>13150600</id><snippet>str</snippet></ROW><ROW><id>13150600</id><snippet>str.join</snippet></ROW><ROW><id>13150600</id><snippet>content = ",".join(content) # joins all members of the list with commas
</snippet></ROW><ROW><id>13150600</id><snippet>split</snippet></ROW><ROW><id>13150627</id><snippet>list(obj)</snippet></ROW><ROW><id>13150627</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13150627</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13150627</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13150650</id><snippet>get_multi_async</snippet></ROW><ROW><id>13150650</id><snippet>future</snippet></ROW><ROW><id>13150650</id><snippet>.get_result()</snippet></ROW><ROW><id>13150650</id><snippet>keys
 -Sequence of keys

**ctx_options 
 -Context options 
</snippet></ROW><ROW><id>13151172</id><snippet>from instagram.client import InstagramAPI

api = InstagramAPI(client_id='YOUR_CLIENT_ID', client_secret='YOUR_CLIENT_SECRET')
popular_media = api.media_popular(count=20)
for media in popular_media:
    print media.images['standard_resolution'].url
</snippet></ROW><ROW><id>13151294</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13151294</id><snippet>def recursively_default_dict():
    return collections.defaultdict(recursively_default_dict)

my_dict = recursively_default_dict()
my_dict['a']['b'] = 'c'
</snippet></ROW><ROW><id>13151530</id><snippet>__init__.py</snippet></ROW><ROW><id>13151530</id><snippet>root</snippet></ROW><ROW><id>13151530</id><snippet>folder1</snippet></ROW><ROW><id>13151530</id><snippet>folder2</snippet></ROW><ROW><id>13151530</id><snippet>__init__.py</snippet></ROW><ROW><id>13151530</id><snippet>from folder1 import file1
</snippet></ROW><ROW><id>13151530</id><snippet>__init__.py</snippet></ROW><ROW><id>13151530</id><snippet>__all__</snippet></ROW><ROW><id>13151530</id><snippet>from package import *</snippet></ROW><ROW><id>13151743</id><snippet>myArr = [[0 for col in range(n)] for row in range(W)]
for i in range(w[n], W):
            myArr[n][i] = v[n]
</snippet></ROW><ROW><id>13151867</id><snippet>&gt;&gt;&gt; d = [{'type_id': 6, 'type_name': 'Type 1'}, {'type_id': 12, 'type_name': 'Type 2'}]
&gt;&gt;&gt; print [{'type':x['type_id'],'name':x['type_name']} for x in d]
[{'type': 6, 'name': 'Type 1'}, {'type': 12, 'name': 'Type 2'}]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13151880</id><snippet>m=StringVar()
</snippet></ROW><ROW><id>13151880</id><snippet>inputfield = Entry ( self,textvariable=m )

self.inputfield.bind('&lt;Return&gt;',self.xyz)  #to call xyz which you may want to define
</snippet></ROW><ROW><id>13151880</id><snippet>message = Message(self,textvariable=m) #to update continuously the message which i hope you meant by "live"
</snippet></ROW><ROW><id>13151884</id><snippet># In models.py

class Venue(models.Model):
    ....
    name = models.CharField(max_length=100)
    ....
    images = models.ForeignKey(VenueImage)

class VenueImage(models.Model):
    image = models.ImageField(upload_to=VENUE_IMAGE_PATH)

# In views.py

def list(request):
    venues = Venue.objects.all()
    return render(request,
                  'venues/list.html',
                  {'venues': venues'})

# In template

{% for venue in venues %}
&lt;a href '#'&gt;{{ venue.name }}&lt;/a&gt;
...
{% for image in venue.images %}
&lt;img class='venue_image' src=''{{ image.url }}' alt=''&gt;
{% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>13152001</id><snippet>activeIndex = categoryListbox.index('active')
</snippet></ROW><ROW><id>13152001</id><snippet>selectCategoryButton = Tkinter.Button(text="Select Category", command= lambda: selectCategory(categoryListbox.index('active')))
</snippet></ROW><ROW><id>13152274</id><snippet>std::iota</snippet></ROW><ROW><id>13152274</id><snippet>std::vector&lt;int&gt; x(10);
std::iota(std::begin(x), std::end(x), 0); //0 is the starting number
</snippet></ROW><ROW><id>13152460</id><snippet>reduce</snippet></ROW><ROW><id>13152460</id><snippet>p</snippet></ROW><ROW><id>13152460</id><snippet>sum</snippet></ROW><ROW><id>13152460</id><snippet>return [x for x in range(1, 1000) 
          if x == sum(math.factorial(int(q)) for q in str(x))]
</snippet></ROW><ROW><id>13152460</id><snippet>functools.reduce</snippet></ROW><ROW><id>13152460</id><snippet>reduce(f, [a, b, c, d, ...]) == f(f(f(a, b), c), d) ...
</snippet></ROW><ROW><id>13152460</id><snippet>reduce</snippet></ROW><ROW><id>13152460</id><snippet>   int(reduce(lambda p, q: factorial(int(p)) + factorial(int(q)), str(x)))
== int(reduce(lambda p, q: factorial(int(p)) + factorial(int(q)), "145"))
== int(factorial(factorial(1) + factorial(4)) + factorial(5))
== int(factorial(1 + 24) + 120)
== int(15511210043330985984000000 + 120)
== 15511210043330985984000120
</snippet></ROW><ROW><id>13152460</id><snippet>reduce</snippet></ROW><ROW><id>13152460</id><snippet> reduce(lambda p,q: p + math.factorial(int(q)),  str(x),  0)
#                   ^                                     ^
#                   No need to factorial                  Add initializer too
</snippet></ROW><ROW><id>13152759</id><snippet>def removew(d):
  for k, v in d.iteritems():
    if isinstance(v, dict):
      removew(v)
    else:
      d[k]=v.strip()


removew(dict1)
print dict1
</snippet></ROW><ROW><id>13152759</id><snippet>{'1434': {'2012-10-29': {'275174': {'declaration_details': {'UTCC': '38483', 'CNRE': '8334', 'CASH': '55096.0'}, 'sales_details': {'UTCC': '38483.0', 'CNRE': '8334.0', 'CASH': '55098.0'}}, '275126': {'declaration_details': {'CNIS': '63371'}, 'sales_details': {'CNIS': '63371.0'}}, '275176': {'declaration_details': {'UTCC': '129909', 'CNRE': '28999', 'CASH': '93200.0', 'PBGV': '1700'}, 'sales_details': {'UTCC': '131619.0', 'CNRE': '28999.0', 'CASH': '92880.0', 'PBGV': '1700.0'}}, '275169': {'declaration_details': {'CNRE': '19462', 'AMCC': '118616', 'CASH': '120678.0'}, 'sales_details': {'UTCC': '118616.0', 'CNRE': '19462.0', 'CASH': '120677.0'}}, '266741': {'declaration_details': {'UTCC': '42678', 'CNRE': '4119', 'CASH': '24944.0'}, 'sales_details': {'UTCC': '42678.0', 'CNRE': '4119.0', 'CASH': '24944.0'}}}}}
</snippet></ROW><ROW><id>13152759</id><snippet>strip()</snippet></ROW><ROW><id>13152759</id><snippet>def removew(d):
    return   {k.strip():removew(v)
             if isinstance(v, dict)
             else v.strip()
             for k, v in d.iteritems()}
removew(dict1)
</snippet></ROW><ROW><id>13153296</id><snippet>class MyHTMLParser(HTMLParser):
    start = False;
    counter = 0;
    ...
</snippet></ROW><ROW><id>13153296</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>False</snippet></ROW><ROW><id>13153296</id><snippet>counter</snippet></ROW><ROW><id>13153296</id><snippet>0</snippet></ROW><ROW><id>13153296</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>False</snippet></ROW><ROW><id>13153296</id><snippet>counter</snippet></ROW><ROW><id>13153296</id><snippet>0</snippet></ROW><ROW><id>13153296</id><snippet>start = True</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>13153296</id><snippet>handle_starttag</snippet></ROW><ROW><id>13153296</id><snippet>handle_data</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>self.start</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>self</snippet></ROW><ROW><id>13153296</id><snippet>def</snippet></ROW><ROW><id>13153296</id><snippet>self</snippet></ROW><ROW><id>13153296</id><snippet>self</snippet></ROW><ROW><id>13153296</id><snippet>self</snippet></ROW><ROW><id>13153296</id><snippet>__init__</snippet></ROW><ROW><id>13153296</id><snippet>self.attribute</snippet></ROW><ROW><id>13153296</id><snippet>class MyHTMLParser(HTMLParser):
    def __init__(self):
        start = False
        counter = 0

    def handle_starttag(self, tag, attrs):
        if(tag == 'TBODY'):
            self.start = True
            self.counter += 1

    def handle_data(self, data):
        if (self.start == True):
            print data
</snippet></ROW><ROW><id>13153296</id><snippet>handle_starttag</snippet></ROW><ROW><id>13153296</id><snippet>handle_data</snippet></ROW><ROW><id>13153296</id><snippet>start</snippet></ROW><ROW><id>13153296</id><snippet>global</snippet></ROW><ROW><id>13153296</id><snippet>nonlocal</snippet></ROW><ROW><id>13153296</id><snippet>self</snippet></ROW><ROW><id>13153391</id><snippet>Poll</snippet></ROW><ROW><id>13153391</id><snippet>poll</snippet></ROW><ROW><id>13153391</id><snippet>  Poll.objects.all()
</snippet></ROW><ROW><id>13153553</id><snippet>listenUDP</snippet></ROW><ROW><id>13153553</id><snippet>twisted.pair</snippet></ROW><ROW><id>13153553</id><snippet>IReadDescriptor</snippet></ROW><ROW><id>13153553</id><snippet>IWriteDescriptor</snippet></ROW><ROW><id>13153553</id><snippet>IReactorFDSet</snippet></ROW><ROW><id>13154391</id><snippet>dir()</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>__dir__</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def spam(self): pass
... 
&gt;&gt;&gt; class Bar(object):
...     def ham(self): pass
... 
&gt;&gt;&gt; class CustomDirMetaclass(type):
...     def __dir__(cls):
...         return ['eggs']
... 
&gt;&gt;&gt; class Baz(Foo, Bar):
...     __metaclass__ = CustomDirMetaclass
...     def eggs(self): pass
... 
&gt;&gt;&gt; dir(Baz)
['eggs']
&gt;&gt;&gt; getMembers(Baz)
set(['eggs'])
&gt;&gt;&gt; getMembersWithBases(Baz)
set(['__module__', '__getattribute__', 'eggs', '__reduce__', '__subclasshook__', '__dict__', '__sizeof__', '__weakref__', '__init__', 'ham', '__setattr__', '__reduce_ex__', '__new__', 'spam', '__format__', '__class__', '__doc__', '__delattr__', '__repr__', '__hash__', '__str__'])
</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>getMembersWithBases()</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>dir()</snippet></ROW><ROW><id>13154391</id><snippet>dir()</snippet></ROW><ROW><id>13154391</id><snippet>__bases__</snippet></ROW><ROW><id>13154391</id><snippet>__dir__()</snippet></ROW><ROW><id>13154766</id><snippet>[list(l[0]) for l in mylist]
</snippet></ROW><ROW><id>13154766</id><snippet>&gt;&gt;&gt; mylist = [['ANTT'],['XSOB']]
&gt;&gt;&gt; [list(l[0]) for l in mylist]
[['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']]
</snippet></ROW><ROW><id>13155030</id><snippet>import matplotlib.pyplot as plt
plt.plot(range(10))
plt.show()
</snippet></ROW><ROW><id>13155030</id><snippet>import matplotlib            
print matplotlib.rcParams['backend']
</snippet></ROW><ROW><id>13155030</id><snippet>pyplot.show()</snippet></ROW><ROW><id>13155246</id><snippet>\b</snippet></ROW><ROW><id>13155246</id><snippet>html = """
&lt;html&gt;
 &lt;a&gt;abc&lt;/a&gt;
 &lt;a&gt;a.b.c.&lt;/a&gt;
 &lt;a&gt;blah (abc)&lt;/a&gt;
 &lt;a&gt;abc-blah&lt;/a&gt;
 &lt;a&gt;blah-abc&lt;/a&gt;
 &lt;a&gt;blah abc blah&lt;/a&gt;
 &lt;a&gt;blah-abc-blah&lt;/a&gt;
 &lt;a&gt;qweabcrty&lt;/a&gt;
&lt;/html&gt;"""

import re
print re.sub(r'\b(abc|a\.\b.\.c)\b', '@@@', html)
</snippet></ROW><ROW><id>13155246</id><snippet>&lt;html&gt;
 &lt;a&gt;@@@&lt;/a&gt;
 &lt;a&gt;@@@.&lt;/a&gt;
 &lt;a&gt;blah (@@@)&lt;/a&gt;
 &lt;a&gt;@@@-blah&lt;/a&gt;
 &lt;a&gt;blah-@@@&lt;/a&gt;
 &lt;a&gt;blah @@@ blah&lt;/a&gt;
 &lt;a&gt;blah-@@@-blah&lt;/a&gt;
 &lt;a&gt;qweabcrty&lt;/a&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13155805</id><snippet>array.arrays</snippet></ROW><ROW><id>13155805</id><snippet>import binascii
import struct
import array
x = binascii.unhexlify('b62e000052e366667a66408d')
y = array.array('h', x)  
y.byteswap()
s = struct.Struct('&lt;Id')
print(s.unpack_from(y))

# (46638, 943.2999999994321)
</snippet></ROW><ROW><id>13155805</id><snippet>h</snippet></ROW><ROW><id>13155805</id><snippet>array.array('h', x)</snippet></ROW><ROW><id>13155805</id><snippet>array.array</snippet></ROW><ROW><id>13155805</id><snippet>x</snippet></ROW><ROW><id>13155805</id><snippet>H</snippet></ROW><ROW><id>13155941</id><snippet> test = "anil13@@"
 new = tuple(test)
 data = list(new)
 is_symb =False
 is_digit = False
 is_alpha = False

 for d in data :
    if d.isdigit() :
       is_digit = True
    if d.isalpha():
       is_alpha = True
    if not d.isdigit() and not d.isalpha():
       is_symb =True
       break
if is_symb == False and is_digit == True and is_alpha == True:
   print "pwd matchd::::"
else :
   print "pwd dosen't match..."
</snippet></ROW><ROW><id>13155971</id><snippet>print("DB Updated: " + 
    datetime.datetime.fromtimestamp(
        int(stats_dict["db_update"])
    ).strftime('%a %b %d %H:%M:%S %Y')
)
</snippet></ROW><ROW><id>13155971</id><snippet> print("DB Updated: " +
      datetime.datetime.fromtimestamp(
        int(stats_dict["db_update"])).
        strftime('%a %b %d %H:%M:%S %Y'))
</snippet></ROW><ROW><id>13156205</id><snippet>def outer(x=None):
    def inner(y=0):
        if y:
            x = y
        return x    # outer.x or inner.x?
</snippet></ROW><ROW><id>13156205</id><snippet>def my_decorator(key=None, timeout=None, retry=0):
    def _my_decorator(func):
        func_key = key or func.__name__
        ...
</snippet></ROW><ROW><id>13156306</id><snippet>select</snippet></ROW><ROW><id>13156306</id><snippet>stdout</snippet></ROW><ROW><id>13156306</id><snippet>Popen</snippet></ROW><ROW><id>13156306</id><snippet>from subprocess import Popen, PIPE
from select import select

cmd = ('lzma', '-kdc', '-S', 'bi5', 'path/to/datafile')
p = Popen(cmd, stdout=PIPE)

while p.poll() == None:
    r,w,e = select([p.stdout], [], [])
    if r:
        data = p.stdout.read(512)
        # unpack and append to csv file ...
</snippet></ROW><ROW><id>13156359</id><snippet>sum</snippet></ROW><ROW><id>13156359</id><snippet>chunk</snippet></ROW><ROW><id>13156359</id><snippet>lambda</snippet></ROW><ROW><id>13156359</id><snippet>reduce</snippet></ROW><ROW><id>13156359</id><snippet>|</snippet></ROW><ROW><id>13156359</id><snippet>ip.split(".")</snippet></ROW><ROW><id>13156359</id><snippet>"192.168.0.1"</snippet></ROW><ROW><id>13156359</id><snippet>["192", "168", "0", "1"]</snippet></ROW><ROW><id>13156359</id><snippet>map</snippet></ROW><ROW><id>13156359</id><snippet>["192", "168", "0", "1"]</snippet></ROW><ROW><id>13156359</id><snippet>[192, 168, 0, 1]</snippet></ROW><ROW><id>13156359</id><snippet>reduce</snippet></ROW><ROW><id>13156359</id><snippet>lambda</snippet></ROW><ROW><id>13156359</id><snippet>labmda</snippet></ROW><ROW><id>13156359</id><snippet>(((192&lt;&lt;8 | 168) &lt;&lt; 8 | 0)&lt;&lt;8 | 1) = 192&lt;&lt;24 | 168&lt;&lt;16 | 0&lt;&lt;8 | 1
</snippet></ROW><ROW><id>13156533</id><snippet>a = list(a)
</snippet></ROW><ROW><id>13156533</id><snippet>chain()</snippet></ROW><ROW><id>13156619</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'mydatabase',
        'TEST_NAME': 'mytestdatabase'
    }
}
</snippet></ROW><ROW><id>13156715</id><snippet>codecs</snippet></ROW><ROW><id>13156715</id><snippet>import json
import codecs

json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))
</snippet></ROW><ROW><id>13156715</id><snippet>utf-8-sig</snippet></ROW><ROW><id>13156715</id><snippet>loads</snippet></ROW><ROW><id>13156715</id><snippet>json.loads(open('sample.json').read().decode('utf-8-sig'))
</snippet></ROW><ROW><id>13156785</id><snippet>def getConfiguration(config_id):
    """ Signature:  getConfiguration(int): array&lt;string&gt;"""

    return ["feature_1", "feature_2"]
</snippet></ROW><ROW><id>13156785</id><snippet>config_list:array&lt;string&gt;               # initialize array of string
(config_list) = getConfigurationList(1) # assign script output to that array

{first_item = config_list[0]}           # get the first string("feature_1") 
{second_item = config_list[1]}          # get the second string("feature_2") 
</snippet></ROW><ROW><id>13157009</id><snippet>from collections import defaultdict

def clean_line(line):
    name, _, value = line.partition(':')
    return name.strip(), value.strip()

def process_file(dic_, file, key):
    for line in file:
        name, value = clean_line(line)
        dic_[name][key] = value

def f_phone_addr(phonefile, addrfile):

    out = defaultdict(dict)
    with open(phonefile) as pf, open(addrfile) as af:
        process_file(out, pf, 'phone')
        process_file(out, af, 'address')
    return out
</snippet></ROW><ROW><id>13157212</id><snippet>import xlrd
import xlwt
import xlutils
from xlutils.copy import copy 

r_book = xlrd.open_workbook(fname)
w_book = xlutils.copy.copy(r_book)
r_sheet = r_book.sheets()[0] # Taking the first sheet
w_sheet = w_book.get_sheet(0)

x_y_value = r_sheet.cell(X, Y).value
w_sheet.write(A, B, x_y_value)
w_book.save(fname)
</snippet></ROW><ROW><id>13157233</id><snippet>data =  ['32', '22', '12', '32', '22', '12', '31', '21', '11']
dict((x, data.count(x)) for x in data)
</snippet></ROW><ROW><id>13157233</id><snippet>{'11': 1, '12': 2, '21': 1, '22': 2, '31': 1, '32': 2}
</snippet></ROW><ROW><id>13157458</id><snippet>import re

re.findall(r'\\bibitem\{(.*?)\}', latex_text)     # ['item1', 'item2']
</snippet></ROW><ROW><id>13157495</id><snippet>reversed()</snippet></ROW><ROW><id>13157495</id><snippet>return gearman_job.data[::-1]
</snippet></ROW><ROW><id>13157495</id><snippet>&gt;&gt;&gt; reversed('somedata')
&lt;reversed object at 0x100480e50&gt;
&gt;&gt;&gt; 'somedata'[::-1]
'atademos'
</snippet></ROW><ROW><id>13157551</id><snippet>url(r'^home/(Physician|Vendor)/$, 'ViewerLog', name="monitor_viewerLog"),
</snippet></ROW><ROW><id>13157551</id><snippet>(?:...)</snippet></ROW><ROW><id>13157551</id><snippet>url(r'^home/(?:Physician|Vendor)/$, 'ViewerLog', name="monitor_viewerLog"),
</snippet></ROW><ROW><id>13157583</id><snippet>.*</snippet></ROW><ROW><id>13157583</id><snippet>]]</snippet></ROW><ROW><id>13157583</id><snippet>[[</snippet></ROW><ROW><id>13157583</id><snippet>?</snippet></ROW><ROW><id>13157583</id><snippet>p = re.compile(r"\[\[(.*?)\]\]")
</snippet></ROW><ROW><id>13157583</id><snippet>p = re.compile(r"\[\[((?:(?!\]\]).)*)\]\]")
</snippet></ROW><ROW><id>13157583</id><snippet>\[\[        # Match [[
(           # Match and capture...
 (?:        # ...the following regex:
  (?!\]\])  # (only if we're not at the start of the sequence ]]
  .         # any character
 )*         # Repeat any number of times
)           # End of capturing group
\]\]        # Match ]]
</snippet></ROW><ROW><id>13157761</id><snippet>.index()</snippet></ROW><ROW><id>13157761</id><snippet>.find()</snippet></ROW><ROW><id>13157761</id><snippet>.index()</snippet></ROW><ROW><id>13157761</id><snippet>.find()</snippet></ROW><ROW><id>13157761</id><snippet>uncompressedChars.join()</snippet></ROW><ROW><id>13157761</id><snippet>''.join(uncompressedChars)</snippet></ROW><ROW><id>13157761</id><snippet>timesRepeated = int(line[slashIndex+1:verticalBarIndex+3], 16)</snippet></ROW><ROW><id>13157761</id><snippet>timesRepeated = int(line[slashIndex+1:slashIndex+3], 16)</snippet></ROW><ROW><id>13157761</id><snippet>uncompressedChars = []</snippet></ROW><ROW><id>13157761</id><snippet>uncompressedChars = [repeatedChar]</snippet></ROW><ROW><id>13157873</id><snippet>d = {'name': 'user'}
print d['name']
user
</snippet></ROW><ROW><id>13157994</id><snippet>numpy.zeros</snippet></ROW><ROW><id>13157994</id><snippet>&gt;&gt;&gt; a = [[0]*10]*10
&gt;&gt;&gt; a
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; a[0][0] = 1
&gt;&gt;&gt; a
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>13157994</id><snippet>zeros = [ [0]*M for _ in xrange(N) ]
</snippet></ROW><ROW><id>13157994</id><snippet>numpy</snippet></ROW><ROW><id>13158109</id><snippet>df = DataFrame({'event': range(1,4), 'unixtime': [1346617885925, 1346961625305,1347214217566]})
df['day'] = df['unixtime'].apply(lambda x: datetime.fromtimestamp(x/1000).date())
df['arbday']=df['day'].map(lambda x: (x-df.get_value(df[df.event == 1].first_valid_index(), 'day')).days+1)
print df
</snippet></ROW><ROW><id>13158109</id><snippet>   event       unixtime         day  arbday
0      1  1346617885925  2012-09-02       1
1      2  1346961625305  2012-09-06       5
2      3  1347214217566  2012-09-09       8
</snippet></ROW><ROW><id>13158292</id><snippet>for line in lines:
    if line.startswith(' My_NUMBER                 ='):
        num = line.split('=')[-1].strip()
        print num
</snippet></ROW><ROW><id>13158334</id><snippet>sql</snippet></ROW><ROW><id>13158334</id><snippet>SELECT *
FROM magazine m
WHERE NOT EXISTS (
  SELECT 1 FROM issue i WHERE i.magazine_id = m.id AND i."date" = $1
);
</snippet></ROW><ROW><id>13158334</id><snippet>$1</snippet></ROW><ROW><id>13158334</id><snippet>%s</snippet></ROW><ROW><id>13158334</id><snippet>?</snippet></ROW><ROW><id>13158334</id><snippet>"date"</snippet></ROW><ROW><id>13158587</id><snippet>[constants]
key = value
x = 0
y = 1
</snippet></ROW><ROW><id>13158587</id><snippet>from ConfigParser import SafeConfigParser
class MyClass(object):
    def __init__(self, **kwargs):
        self.config = SafeConfigParser(defaults=kwargs).read('config.ini')

    def get_x(self):
        return self.config.get('constants', 'x')
</snippet></ROW><ROW><id>13158587</id><snippet>class MyClass(object):
    ...
    def __getattr__(self, key):
        return self.config.get('constants', key)
</snippet></ROW><ROW><id>13158587</id><snippet>from . import config
class Myclass(object):
    def __getattr__(self, key):
        return getattr(config, key)
</snippet></ROW><ROW><id>13159040</id><snippet>TypeError: put() takes exactly 1 argument (2 given)
</snippet></ROW><ROW><id>13159040</id><snippet>class MainHandler(webapp2.RequestHandler):
    def put(self, param):
        self.response.write('test put')
</snippet></ROW><ROW><id>13159079</id><snippet>enumerate()</snippet></ROW><ROW><id>13159079</id><snippet> for index,x in enumerate(lst1):
      lst1[index] += lst2[index]
</snippet></ROW><ROW><id>13159079</id><snippet>enumerate()</snippet></ROW><ROW><id>13159079</id><snippet>enumerate</snippet></ROW><ROW><id>13159079</id><snippet>tuples</snippet></ROW><ROW><id>13159079</id><snippet>enumerate()</snippet></ROW><ROW><id>13159079</id><snippet>In [50]: lst1=['a','b','c','s']

In [51]: list(enumerate(lst1))         #default index values, i.e 0
Out[51]: [(0, 'a'), (1, 'b'), (2, 'c'), (3, 's')]

In [53]: list(enumerate(lst1,1))       #index started at 1 
Out[53]: [(1, 'a'), (2, 'b'), (3, 'c'), (4, 's')]
</snippet></ROW><ROW><id>13159457</id><snippet>'test(?![a-z])'
</snippet></ROW><ROW><id>13159457</id><snippet>'test([^a-z]|$)'
</snippet></ROW><ROW><id>13159648</id><snippet>input</snippet></ROW><ROW><id>13159648</id><snippet>eval(raw_input(prompt))</snippet></ROW><ROW><id>13159648</id><snippet>raw_input</snippet></ROW><ROW><id>13160018</id><snippet>update</snippet></ROW><ROW><id>13160018</id><snippet>pymongo</snippet></ROW><ROW><id>13160018</id><snippet>db.user_account.update({"email-id": "specific"}, {"$set": {"password": "1233"}})</snippet></ROW><ROW><id>13160261</id><snippet>testpinax</snippet></ROW><ROW><id>13160261</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13160261</id><snippet>testpinax</snippet></ROW><ROW><id>13160457</id><snippet>from easyzone import easyzone
z = easyzone.zone_from_file('example.com', '/var/namedb/example.com')
</snippet></ROW><ROW><id>13160631</id><snippet>a = [1]
try:
    index_valeu = a.index(44)
except ValueError:
    index_valeu = -1
</snippet></ROW><ROW><id>13160636</id><snippet>OUTER JOIN</snippet></ROW><ROW><id>13160636</id><snippet>User.select(User, fn.Count(Tweet.id).alias('count')) \
    .join(Tweet, JOIN_LEFT_OUTER).group_by(User)
</snippet></ROW><ROW><id>13160799</id><snippet>def clean_email(self):
    """ Validate that the e-mail address is unique. """
    if User.objects.filter(email__iexact=self.cleaned_data['email']):
        raise forms.ValidationError(_('This email is already in use. Please supply a different email.'))
    return self.cleaned_data['email']
</snippet></ROW><ROW><id>13160799</id><snippet>def clean_email(self):
    """ Validate that the e-mail address is unique. """
    if User.objects.filter(email__iexact=self.cleaned_data['email']):
        raise forms.ValidationError(_('This email is already in use. Please supply a different email.'))
    if not Roster.objects.filter(email__iexact=self.cleaned_data['email']):
        raise forms.ValidationError(_('You are not able to signup as you are not part of the Roster.'))
    return self.cleaned_data['email']
</snippet></ROW><ROW><id>13160947</id><snippet>'django.contrib.contenttypes',
</snippet></ROW><ROW><id>13161052</id><snippet>POINTER(POINTER(c_char))
</snippet></ROW><ROW><id>13161052</id><snippet>POINTER(POINTER(c_char))</snippet></ROW><ROW><id>13161052</id><snippet>POINTER(c_char_p)</snippet></ROW><ROW><id>13161315</id><snippet>print</snippet></ROW><ROW><id>13161315</id><snippet>end=</snippet></ROW><ROW><id>13161315</id><snippet>sys.stdout</snippet></ROW><ROW><id>13161315</id><snippet>#!/usr/bin/env python3
import sys
import cgi
tmp = cgi.FieldStorage()
dat = tmp['upload_file']
import mimetypes
gtype,encoding = mimetypes.guess_type(dat.filename)

sys.stdout.buffer.write (b'Content-type:' + gtype.encode('ascii') + b'\r\n\r\n')
sys.stdout.buffer.write (dat.file.read())
</snippet></ROW><ROW><id>13161661</id><snippet>newlines</snippet></ROW><ROW><id>13161661</id><snippet>''</snippet></ROW><ROW><id>13161661</id><snippet>open</snippet></ROW><ROW><id>13161661</id><snippet>newline</snippet></ROW><ROW><id>13161661</id><snippet>with open(EMCMD_INCORRECT_PARAMS, 'r') as fd_usage:
    usageLines = fd_usage.read().replace('\n', fd_usage.newline)
</snippet></ROW><ROW><id>13161661</id><snippet>read</snippet></ROW><ROW><id>13161952</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>13161952</id><snippet>TEMPLATE_DIRS = (
    '/path/to/mysite/templates'
)
</snippet></ROW><ROW><id>13161952</id><snippet>TEMPLATE_DIRS = (
    '/path/to/mysite/templates',
)
</snippet></ROW><ROW><id>13162049</id><snippet>x</snippet></ROW><ROW><id>13162049</id><snippet>user_words</snippet></ROW><ROW><id>13162049</id><snippet>import random

user_words = input("Enter a word or sentence: ") #Gets user input

word = user_words.split()  #no need of list()

def Jumble_One_Word(x):

    if len(x) &gt; 2: #Only need to change words longer than 2


      first_letter = x[0] #Takes the first letter out and defines it

      last_letter = x[-1] #Takes the last letter out and defines it

      letters = list(x[1:-1]) #Takes the rest and puts them into a list

      random.shuffle(letters) #shuffles the list above

      middle_letters = "".join(letters) #Joins the shuffled list

      final_word = "".join([first_letter, middle_letters, last_letter]) #Puts finalword all back  in place as a list

      return final_word # better return from function inste


for i in word:                 #you can iterate this way too
    print (Jumble_One_Word(i))
</snippet></ROW><ROW><id>13162049</id><snippet>$ python3 abc.py
Enter a word or sentence: python guido spam
pyhton
giudo
sapm
</snippet></ROW><ROW><id>13162192</id><snippet>def initialize_upload(options):
  youtube = get_authenticated_service()

  tags = None
  if options.keywords:
    tags = options.keywords.split(",")

  insert_request = youtube.videos().insert(
    part="snippet,status",
    body=dict(
      snippet=dict(
        title=options.title,
        description=options.description,
        tags=tags,
        categoryId=options.category
      ),
      status = dict(
        privacyStatus=options.privacyStatus
      )
    ),
    media_body=MediaFileUpload(options.file, chunksize=-1, resumable=True)
  )

  resumable_upload(insert_request)
</snippet></ROW><ROW><id>13162639</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>13162639</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>13162639</id><snippet>print os.path.abspath("/var/lib/blob_files/myfile.blob")
&gt;&gt;&gt; C:\var\lib\blob_files\myfile.blob

print os.path.abspath(os.path.expanduser("~/blob_files/myfile.blob"))
&gt;&gt;&gt; C:\Users\jerry\blob_files\myfile.blob
</snippet></ROW><ROW><id>13162639</id><snippet>expanduser()</snippet></ROW><ROW><id>13162639</id><snippet>~</snippet></ROW><ROW><id>13162639</id><snippet>import os
def fixpath(path):
    return os.path.abspath(os.path.expanduser(path))
</snippet></ROW><ROW><id>13162639</id><snippet>C:</snippet></ROW><ROW><id>13162639</id><snippet>import os
def fixpath(path):
    path = os.path.normpath(os.path.expanduser(path))
    if path.startswith("\\"): return "C:" + path
    return path
</snippet></ROW><ROW><id>13162875</id><snippet>sigma</snippet></ROW><ROW><id>13162875</id><snippet>curve_fit</snippet></ROW><ROW><id>13162875</id><snippet>1.0/sigma</snippet></ROW><ROW><id>13162875</id><snippet>sigma</snippet></ROW><ROW><id>13162875</id><snippet>N</snippet></ROW><ROW><id>13162875</id><snippet>ydata</snippet></ROW><ROW><id>13162875</id><snippet>sigma</snippet></ROW><ROW><id>13162875</id><snippet>curve_fit</snippet></ROW><ROW><id>13162875</id><snippet>sigma</snippet></ROW><ROW><id>13162875</id><snippet>sigma = (length_of_error_bar/2)**2
</snippet></ROW><ROW><id>13162988</id><snippet>repoze.catalog</snippet></ROW><ROW><id>13162988</id><snippet>repoze.catalog</snippet></ROW><ROW><id>13162988</id><snippet>FileStorageCatalogFactory</snippet></ROW><ROW><id>13162988</id><snippet>repoze.catalog.catalog.Catalog</snippet></ROW><ROW><id>13162988</id><snippet>from repoze.catalog.catalog import Catalog

if 'mycatalog' not in zodbroot:
    zodbroot['mycatalog'] = Catalog()
</snippet></ROW><ROW><id>13163175</id><snippet>TimeSpan t = (DateTime.UtcNow - new DateTime(1970, 1, 1));
int timestamp  = (int) t.TotalSeconds;
</snippet></ROW><ROW><id>13163254</id><snippet>parser_class = parser2.Parsers()
</snippet></ROW><ROW><id>13163254</id><snippet>parser_class.parse_subject(word_list, ('noun', 'player'))
</snippet></ROW><ROW><id>13163254</id><snippet>parse_verb</snippet></ROW><ROW><id>13163254</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "ex48/parser2.py", line 60, in parse_subject
    verb = parse_verb(word_list)
NameError: global name 'parse_verb' is not defined
</snippet></ROW><ROW><id>13163254</id><snippet>verb = self.parse_verb(word_list)</snippet></ROW><ROW><id>13163254</id><snippet>parse_verb</snippet></ROW><ROW><id>13163254</id><snippet>self</snippet></ROW><ROW><id>13163298</id><snippet>/usr/lib/python2.7/dist-packages</snippet></ROW><ROW><id>13163298</id><snippet>sys.path</snippet></ROW><ROW><id>13163505</id><snippet>from imp import *
file, pathname, description = find_module('nltk')
nltk = load_module('nltk', file, pathname, ('.py', 'U', 1))
</snippet></ROW><ROW><id>13163505</id><snippet>file, pathname, description = find_module('nltk', '/path/to/nltk')
</snippet></ROW><ROW><id>13163748</id><snippet>Py_file_input</snippet></ROW><ROW><id>13163748</id><snippet>PyEval_GetBuiltins</snippet></ROW><ROW><id>13163748</id><snippet>"__builtins__"</snippet></ROW><ROW><id>13163812</id><snippet>while countValue&lt;=9:</snippet></ROW><ROW><id>13163812</id><snippet>&gt;=</snippet></ROW><ROW><id>13164092</id><snippet>from flask import jsonify
from werkzeug.security import safe_join

@app.route("/gallery")
def gallery():
    images = get_images_from_dir("some/base/path/*.jpg")
    return render_template("gallery.html", images=images)


@app.route("/search/images", methods=["POST"])
def search_images():
    glob_path = request.form["image_query"]
    glob_path = safe_join("/some/base/path", glob_path)
    return jsonify(images=get_images_from_dir(glob_path))
</snippet></ROW><ROW><id>13164092</id><snippet>&lt;!-- snip --&gt;
&lt;script&gt;
// jQuery here - you can use anything you want :-)
$.post({
    url: "{{ url_for("search_images") }}",
    success: function(data) {
        console.log(data);
    },
    error: function() { console.log("Error", arguments); }
});
&lt;/script&gt;
</snippet></ROW><ROW><id>13164275</id><snippet>Scan</snippet></ROW><ROW><id>13164275</id><snippet>esk = None

while True:
    # load this batch
    scan_generator = MyTable.scan(max_results=10, exclusive_start_key=esk)

    # do something usefull
    for item in scan_generator:
        pass  # do something usefull
    # are we done yet ?
    else:
        break;

    # Load the last keys
    esk = scan_generator.kwargs['exclusive_start_key'].values()
</snippet></ROW><ROW><id>13164275</id><snippet>Scan</snippet></ROW><ROW><id>13165344</id><snippet>self</snippet></ROW><ROW><id>13165344</id><snippet>self.update({1:"you", 2:"and me"})
</snippet></ROW><ROW><id>13165344</id><snippet>dict.__init__(self, {1:"you", 2:"and me"})
</snippet></ROW><ROW><id>13165344</id><snippet>__new__</snippet></ROW><ROW><id>13165365</id><snippet>log(scale)</snippet></ROW><ROW><id>13165500</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>13165500</id><snippet>repr()</snippet></ROW><ROW><id>13165500</id><snippet>str()</snippet></ROW><ROW><id>13165500</id><snippet>str()</snippet></ROW><ROW><id>13165500</id><snippet>In [7]: import ast

In [10]: dic = {u'key-a':u'val-a', "key-b":"val-b"}

In [11]: strs=repr(dic)

In [12]: strs
Out[12]: "{'key-b': 'val-b', u'key-a': u'val-a'}"

In [13]: ast.literal_eval(strs)
Out[13]: {u'key-a': u'val-a', 'key-b': 'val-b'}
</snippet></ROW><ROW><id>13165527</id><snippet>username = "test"

#....

username = driver.find_element_by_id('Email')
username.send_keys(username)
</snippet></ROW><ROW><id>13165527</id><snippet>Email</snippet></ROW><ROW><id>13165527</id><snippet>username</snippet></ROW><ROW><id>13165527</id><snippet>send_keys</snippet></ROW><ROW><id>13165527</id><snippet>len</snippet></ROW><ROW><id>13165527</id><snippet>send_keys</snippet></ROW><ROW><id>13165527</id><snippet>user_field = driver.find_element_by_id('Email')
user_field.send_keys(username)
</snippet></ROW><ROW><id>13165711</id><snippet>In [23]: re.sub(r"'([^']+)'", r"'\1a'", "(r' ', ' '),", 1)
Out[23]: "(r' a', ' '),"
</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>(</snippet></ROW><ROW><id>13165711</id><snippet>\1</snippet></ROW><ROW><id>13165711</id><snippet>)</snippet></ROW><ROW><id>13165711</id><snippet>\1</snippet></ROW><ROW><id>13165711</id><snippet>[^']</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>+</snippet></ROW><ROW><id>13165711</id><snippet>[^']</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>\1</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165711</id><snippet>'</snippet></ROW><ROW><id>13165714</id><snippet># file: literal_eval.py

import ast

def literal_eval(value):
    return ast.literal_eval(value)

from django import template
register = template.Library()
register.filter('literal_eval', literal_eval)
</snippet></ROW><ROW><id>13165714</id><snippet>{% load literal_eval %}

{{ some_str|literal_eval }}
</snippet></ROW><ROW><id>13165714</id><snippet>repr</snippet></ROW><ROW><id>13165714</id><snippet>literal_eval</snippet></ROW><ROW><id>13165714</id><snippet>json.dumps</snippet></ROW><ROW><id>13165714</id><snippet>json.loads</snippet></ROW><ROW><id>13165887</id><snippet>Tk</snippet></ROW><ROW><id>13165887</id><snippet>mainloop</snippet></ROW><ROW><id>13165887</id><snippet>bind(...,"+")</snippet></ROW><ROW><id>13165887</id><snippet>&lt;&lt;EverybodyDoSomething&gt;&gt;</snippet></ROW><ROW><id>13165887</id><snippet>bind(..."+")</snippet></ROW><ROW><id>13166591</id><snippet>message = """\
This is a multi-line message.

 + Source lines match string lines 1:1.
 + No '\\n' noise.
"""
</snippet></ROW><ROW><id>13166591</id><snippet>textwrap.dedent()</snippet></ROW><ROW><id>13166591</id><snippet>def f():
   """Indented docstrings look good.

   If you'll peek at f.__doc__, you'll see leading whitespace here.
   But we don't care because pydoc, doctest and other docstring-parsing
   tools are smart enough to strip it.
   """
   if X:
       print """\
Here I'm writing flush-left to avoid leading whitespace.
But this breaks the visual flow in a horrible way!
"""
   print "where am I now? how did I get here?"
   print textwrap.dedent("""\
       This is much better!  I can have the cake and eat it.
       Unlike docstrings, don't start the first line after quotes.
       """)
</snippet></ROW><ROW><id>13166591</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>13166591</id><snippet>xpath = ("//td[text()='activeThreadCount']"
         "/following-sibling::*"
         "/text()")
</snippet></ROW><ROW><id>13166781</id><snippet> repo = git.Repo('repo_name')
 o = repo.remotes.origin
 o.pull()
</snippet></ROW><ROW><id>13166967</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; resp = '{"status_code": 200, "data": {"units": -1, "tz_offset": -4, "unit": "day", "link_clicks": 535}, "status_txt": "OK"}'
&gt;&gt;&gt; resp_object = json.loads(resp)
&gt;&gt;&gt; resp_object and resp_object.get('data', {}).get('link_clicks', 0) or 0
535
</snippet></ROW><ROW><id>13167232</id><snippet>__loader__</snippet></ROW><ROW><id>13167232</id><snippet>__loader__</snippet></ROW><ROW><id>13167232</id><snippet>type(module.__loader__)</snippet></ROW><ROW><id>13167232</id><snippet>&gt;&gt;&gt; CUSTOM_LOADERS = [MyCustomLoader1, MyCustomLoader2]
&gt;&gt;&gt; type(xml.__loader__) in CUSTOM_LOADERS
True
</snippet></ROW><ROW><id>13167232</id><snippet>not in</snippet></ROW><ROW><id>13167289</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib

post_params = {
    param1 : val1,
    param2 : val2,
    param3 : val3
        }
post_args = urllib.urlencode(post_params)

url = 'http://www.website.com/'
fp = urllib.urlopen(url, post_args)
soup = BeautifulSoup(fp)
</snippet></ROW><ROW><id>13167345</id><snippet>s1</snippet></ROW><ROW><id>13167345</id><snippet>s2</snippet></ROW><ROW><id>13167345</id><snippet>swap0</snippet></ROW><ROW><id>13167345</id><snippet>def swap0(s1, s2):
    assert type(s1) == list and type(s2) == list
    tmp = s1[:]
    s1[:] = s2
    s2[:] = tmp
</snippet></ROW><ROW><id>13167345</id><snippet>s1, s2 = s2, s1
</snippet></ROW><ROW><id>13167379</id><snippet>Image</snippet></ROW><ROW><id>13167379</id><snippet>import Image
picture = Image.open("/path/to/my/picture.jpg")
r,g,b = picture.getpixel( (0,0) )
print("Red: {0}, Green: {1}, Blue: {2}".format(r,g,b))
</snippet></ROW><ROW><id>13167379</id><snippet>&gt;&gt;&gt; import Image
&gt;&gt;&gt; picture = Image.open("/home/gizmo/Downloads/image_launch_a5.jpg")
&gt;&gt;&gt; r,g,b = picture.getpixel( (0,0) )
&gt;&gt;&gt; print("Red: {0}, Green: {1}, Blue: {2}".format(r,g,b))
Red: 138, Green: 161, Blue: 175
</snippet></ROW><ROW><id>13167379</id><snippet>import Image
picture = Image.open("/path/to/my/picture.jpg")

# Get the size of the image
width, height = picture.size()

# Process every pixel
for x in width:
   for y in height:
       current_color = picture.getpixel( (x,y) )
       ####################################################################
       # Do your logic here and create a new (R,G,B) tuple called new_color
       ####################################################################
       picture.putpixel( (x,y), new_color)
</snippet></ROW><ROW><id>13167382</id><snippet>save_model</snippet></ROW><ROW><id>13167382</id><snippet>class QuestionForm(ModelForm):
    def save(self, user=None, force_insert=False, force_update=False, commit=True):
        q = super(QuestionForm, self).save(commit=False)
        q.author = user
        if commit:
            q.save()
        return q

    class Meta:
        model = Question
        exclude = ('author', 'pub_date')

def add_question(request):
    if request.method == "POST":
        form = QuestionForm(request.POST, request.FILES)
        if form.is_valid():
            form.save(user=request.user)
            return HttpResponseRedirect("/home/")
    else:
        form = QuestionForm()
        return render_to_response("qanda/add_question.html", {'form': form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13167462</id><snippet>pickle.dumps(obj)</snippet></ROW><ROW><id>13167462</id><snippet>json.dumps(obj)</snippet></ROW><ROW><id>13167528</id><snippet>python m.py 'Clockwork Orange', year='1971'
</snippet></ROW><ROW><id>13167528</id><snippet>sys.argv</snippet></ROW><ROW><id>13167528</id><snippet>['m.py', 'Clockwork Orange,', 'year=1971']
</snippet></ROW><ROW><id>13167528</id><snippet>script, movie_name, params = argv
</snippet></ROW><ROW><id>13167528</id><snippet>movie_name</snippet></ROW><ROW><id>13167528</id><snippet>'Clockwork Orange,'</snippet></ROW><ROW><id>13167528</id><snippet>params</snippet></ROW><ROW><id>13167528</id><snippet>'year=1971'</snippet></ROW><ROW><id>13167528</id><snippet>result = movie_db.search('Clockwork Orange,', 'year=1971')
</snippet></ROW><ROW><id>13167528</id><snippet>result = movie_db.search('Clockwork Orange', year='1971')
</snippet></ROW><ROW><id>13167528</id><snippet>params = dict(pair.split('=') for pair in argv[2:])
result = movie_db.search(movie_name, **params)
</snippet></ROW><ROW><id>13167528</id><snippet>dict</snippet></ROW><ROW><id>13167528</id><snippet>{'year': '1971'}</snippet></ROW><ROW><id>13167528</id><snippet>**</snippet></ROW><ROW><id>13167528</id><snippet>dict</snippet></ROW><ROW><id>13167625</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html_doc)
images = list(soup.findAll('img'))
print images[0]['src']
</snippet></ROW><ROW><id>13167761</id><snippet>with open("data1.txt") as f:
    head,sub,auth = [f.readline().strip() for i in range(3)]
    data=f.read()
    print head,sub,auth,data
</snippet></ROW><ROW><id>13167761</id><snippet>filter()</snippet></ROW><ROW><id>13167761</id><snippet> with open("data1.txt") as f:
    head,sub,auth =filter(None,(f.readline().strip() for i in range(6)))
    data=f.read()
    print head,sub,auth,,data
</snippet></ROW><ROW><id>13167885</id><snippet>text</snippet></ROW><ROW><id>13167885</id><snippet>text</snippet></ROW><ROW><id>13167885</id><snippet>text</snippet></ROW><ROW><id>13167885</id><snippet>for text in glob.glob('*.txt')</snippet></ROW><ROW><id>13167885</id><snippet>'file2.txt'</snippet></ROW><ROW><id>13167885</id><snippet>python my_script.py | tee output.txt
</snippet></ROW><ROW><id>13167885</id><snippet>output.txt</snippet></ROW><ROW><id>13167885</id><snippet>print</snippet></ROW><ROW><id>13167885</id><snippet>print</snippet></ROW><ROW><id>13167885</id><snippet>print</snippet></ROW><ROW><id>13167885</id><snippet>with open('output.txt', 'w') as f:
    def my_print(str):
        print str
        f.write(str + '\n')

    for filename in glob.glob('*.txt'):
        my_print(filename)
</snippet></ROW><ROW><id>13167885</id><snippet>print</snippet></ROW><ROW><id>13167885</id><snippet>sys.stdout</snippet></ROW><ROW><id>13167910</id><snippet>zip()</snippet></ROW><ROW><id>13167910</id><snippet>zip(lst, lst[1:])
</snippet></ROW><ROW><id>13167910</id><snippet>list</snippet></ROW><ROW><id>13167910</id><snippet>&gt;&gt;&gt; lst = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
&gt;&gt;&gt; zip(lst, lst[1:])
[('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'G')]
</snippet></ROW><ROW><id>13167910</id><snippet>from itertools import tee, izip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>13168024</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>13168024</id><snippet>request.POST</snippet></ROW><ROW><id>13168024</id><snippet>if "name" not in self.request.POST:
    self.response.write('Name not in form')
else:
    self.response.write(self.request.POST["name"]) 
</snippet></ROW><ROW><id>13168035</id><snippet>"bla"</snippet></ROW><ROW><id>13168035</id><snippet>"13" in a</snippet></ROW><ROW><id>13168035</id><snippet>"bla" and "13" in a</snippet></ROW><ROW><id>13168035</id><snippet>("bla" in a) and ("13" in a)</snippet></ROW><ROW><id>13168163</id><snippet>OneToOneField</snippet></ROW><ROW><id>13168163</id><snippet>related_name</snippet></ROW><ROW><id>13168163</id><snippet>venue = Venue.objects.get(...)
venue.name             &lt;- Venue attribute
venue.venueProfile.foo &lt;- VenueProfile attribute
</snippet></ROW><ROW><id>13168163</id><snippet>profile = VenueProfile.objects.filter(...).select_related('venue')[0]
venue = profile.venue &lt;- no extra query
</snippet></ROW><ROW><id>13168163</id><snippet>venue = Venue.objects.filter(...).prefetch_related('venueProfile')[0]
</snippet></ROW><ROW><id>13168163</id><snippet>def all_venues(request):
    # note that querying profiles...
    venues = VenueProfile.objects.all().select_related('venue')
    return render_to_response('template.html', {'venues':venues})

def venue(request, venue_id):
    venue = VenueProfile.objects.filter(venue__pk=venue_id).select_related('venue')
    if len(venue) == 1:
        venue = venue[0]
    else:
        raise Http404
    ...
</snippet></ROW><ROW><id>13168163</id><snippet>url(r'^venue/all/$', 'all_venues', name='all_venues'),
url(r'^venue/(?P&lt;venue_id&gt;\d+)/$', 'venue', name='venue'),
</snippet></ROW><ROW><id>13168163</id><snippet>{% load url from future %}
{% for venue_profile in venues %}
    {% with venue=venue_profile.venue profile=venue_profile %}
        &lt;ul&gt;
            &lt;li&gt;
                &lt;a href="{% url 'venue' venue_id=venue.pk %}"&gt;
                    {{ venue.name }}&lt;/a&gt;&lt;br&gt;
                &lt;img href="{{ venue.image.url }}"&gt;&lt;br&gt;
                {{ profile.foo }}
            &lt;/li&gt;
        &lt;/ul&gt;
    {% endwith %}
{% empty %}
    No venues
{% endfor %}
</snippet></ROW><ROW><id>13168243</id><snippet>git commit</snippet></ROW><ROW><id>13168243</id><snippet>stdin</snippet></ROW><ROW><id>13168243</id><snippet>stdout</snippet></ROW><ROW><id>13168243</id><snippet>TemporaryFile</snippet></ROW><ROW><id>13168243</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>13168243</id><snippet>import tempfile
import subprocess
import os

def edit(data):
    fdes = -1
    path = None
    fp = None
    try:
        fdes, path = tempfile.mkstemp(suffix='.txt', text=True)
        fp = os.fdopen(fdes, 'w+')
        fdes = -1
        fp.write(data)
        fp.close()
        fp = None

        editor = (os.environ.get('VISUAL') or
                  os.environ.get('EDITOR') or
                  'nano')
        subprocess.check_call([editor, path])

        fp = open(path, 'r')
        return fp.read()
    finally:
        if fp is not None:
            fp.close()
        elif fdes &gt;= 0:
            os.close(fdes)
        if path is not None:
            try:
                os.unlink(path)
            except OSError:
                pass

text = edit('Hello, World!')
print(text)
</snippet></ROW><ROW><id>13168243</id><snippet>subprocess</snippet></ROW><ROW><id>13168243</id><snippet>subprocess</snippet></ROW><ROW><id>13168274</id><snippet>zip()</snippet></ROW><ROW><id>13168274</id><snippet>In [25]: l1 = [('a', 2), ('b', 3), ('z', 5)]

In [26]: l2 = [('a', 1), ('b', 2), ('c', 3)]

In [27]: [x[0] for x,y in zip(l1,l2) if x[0]==y[0]]
Out[27]: ['a', 'b']
</snippet></ROW><ROW><id>13168274</id><snippet>In [36]: [x[0] for x in l1 if any(x[0]==y[0] for y in l2)]
Out[36]: ['a', 'b']
</snippet></ROW><ROW><id>13168274</id><snippet>sets</snippet></ROW><ROW><id>13168274</id><snippet>In [43]: from operator import itemgetter

In [44]: set(map(itemgetter(0),l1)) &amp; set(map(itemgetter(0),l2))
Out[44]: set(['a', 'b'])
</snippet></ROW><ROW><id>13168496</id><snippet>def user_text(self):
    print "which door do you open:"
    print "left or right?"

    door = raw_input("&gt; ")

    if door == "left":
        print "you have chosen the left door"
        return door
    elif door == "right":
        print "you have chosen the right door"
        return door
    else:
        print "you must choose a door"
        return self.user_text()  # don't forget to return in the recursion case
</snippet></ROW><ROW><id>13168496</id><snippet>def comp_door(self):
    choice = self.door_decision.user_text()  # actually use the returned result

    if choice == "left":
        self.left_door()
    elif choice == "right":
        self.right_door()
    else:
        print "incorrect input"
</snippet></ROW><ROW><id>13168585</id><snippet>run_command</snippet></ROW><ROW><id>13168585</id><snippet>view.run_command("insert_snippet", {"name": "Packages/etc/my.sublime-snippet"})
view.run_command("insert", {"characters": "field 1"})
view.run_command("next_field")
view.run_command("insert", {"characters": "field 2"})
view.run_command("next_field")
view.run_command("insert", {"characters": "field 3"})
</snippet></ROW><ROW><id>13168655</id><snippet>self.A[i] = self.A[i] + 1</snippet></ROW><ROW><id>13168655</id><snippet>self.A[i] + 1</snippet></ROW><ROW><id>13168655</id><snippet>self.A[i]</snippet></ROW><ROW><id>13168655</id><snippet>from multiprocessing import Process, Manager
import random

class MyProc(Process):
    def __init__(self, B, length):
        Process.__init__(self)
        self.B = B
        self.length = length

    def run(self):
        i = random.randint(0, self.length-1)
        self.B.append(i)

if __name__ == '__main__':
    procs = []
    M = Manager()
    a = range(15)
    b = M.list()
    print('A: {0}'.format(a))
    print('sum(A) = {0}'.format(sum(a)))

    for i in range(100):
        procs.append(MyProc(b, len(a)))

    map(lambda x: x.start(), procs)
    map(lambda x: x.join(), procs)

    for i in b:
        a[i] = a[i] + 1

    print('A: {0}'.format(a))
    print('sum(A) = {0}'.format(sum(a)))
</snippet></ROW><ROW><id>13168677</id><snippet>\"backslash\"</snippet></ROW><ROW><id>13168677</id><snippet>pbsnodes -x | xmlparse -t '"interactive-00"'
</snippet></ROW><ROW><id>13168776</id><snippet>no_Punct = re.sub('(\s)([-]+)(\s)', r'\1', re.sub('(\w)([?:!.,;-]+)(\s)', r'\1 ', raw))
</snippet></ROW><ROW><id>13168776</id><snippet>no_Punct = re.sub('(?&lt;=\w)[?:!.,;-]+(?=\s)|(?&lt;=\s)-+\s', '', raw)
</snippet></ROW><ROW><id>13168786</id><snippet>xdg</snippet></ROW><ROW><id>13168786</id><snippet>pip install pyxdg
</snippet></ROW><ROW><id>13168790</id><snippet>numpy.dot(numpy.dot(a, m), a)
</snippet></ROW><ROW><id>13168802</id><snippet>runserver --traceback</snippet></ROW><ROW><id>13169002</id><snippet>&lt;form id="myform"&gt;
&lt;input id="my_text"&gt;
&lt;button id="submit_btn"&gt;
&lt;/form&gt;
&lt;div id="result"&gt;
&lt;/div&gt;
&lt;script&gt;
//you need to use jquery for this part
$("#submit_btn").click( function() {
    $("#result").load("/path/to/cgi?my_text="+$("#my_text").val())
})
&lt;/script&gt;
</snippet></ROW><ROW><id>13169002</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="someother.html" method="get"&gt;
&lt;input id="my_text"&gt;
&lt;input type="button" id="my_button" value="click me"&gt;
&lt;/form&gt;
&lt;div id="result"&gt;

&lt;/div&gt;
&lt;script&gt;
$("#my_button").click(function(){
     $("#result").load("");
})
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13169002</id><snippet>load("")</snippet></ROW><ROW><id>13169178</id><snippet>from math import ceil

batch_size = 1000

for start_at in range(int(ceil(total_rows / 1000 * 1.0))):
    sql = 'SELECT `id` from `RECORDS` ORDER BY `id` DESC LIMIT %i, %i'
    sql = sql % (start_at * batch_size, batch_size)
    # fetch rows
</snippet></ROW><ROW><id>13169339</id><snippet>from collections import namedtuple

Event1 = namedtuple("Event", ['attr1', 'attr2', 'attr3', 'attr4'])
Event2 = namedtuple("Event", ['attr1', 'attr2', 'attr3', 'attr4', 'attr5'])

def handle_event(event):
    print event.attr5

handle_event(Event2(1,2,3,4,5))
handle_event(Event1(1,2,3,4))
</snippet></ROW><ROW><id>13169339</id><snippet>AttributeError: 'Event' object has no attribute 'attr5'</snippet></ROW><ROW><id>13169484</id><snippet>sorted(feed, key=lambda x:x[7], reverse=True)
</snippet></ROW><ROW><id>13169665</id><snippet>buildCoder</snippet></ROW><ROW><id>13169665</id><snippet>shift</snippet></ROW><ROW><id>13169665</id><snippet>coder</snippet></ROW><ROW><id>13169665</id><snippet>applyCoder</snippet></ROW><ROW><id>13169665</id><snippet>text</snippet></ROW><ROW><id>13169665</id><snippet>coder</snippet></ROW><ROW><id>13169665</id><snippet>applyShift</snippet></ROW><ROW><id>13169665</id><snippet>shift</snippet></ROW><ROW><id>13169665</id><snippet>text</snippet></ROW><ROW><id>13169665</id><snippet>applyCoder</snippet></ROW><ROW><id>13169665</id><snippet>text</snippet></ROW><ROW><id>13169665</id><snippet>coder</snippet></ROW><ROW><id>13169665</id><snippet>text</snippet></ROW><ROW><id>13169665</id><snippet>coder</snippet></ROW><ROW><id>13169665</id><snippet>coder</snippet></ROW><ROW><id>13169665</id><snippet>buildCoder</snippet></ROW><ROW><id>13169665</id><snippet>shift</snippet></ROW><ROW><id>13169665</id><snippet>def applyShift(text, shift):
  # Get our coder using buildCoder and shift
  coder = buildCoder(shift)
  # Now get our coded string using coder and text
  coded_text = applyCoder(text, coder)
  # We have our coded text!  Let's return it:
  return coded_text
</snippet></ROW><ROW><id>13169685</id><snippet>#Python 2.7.3

import Tkinter as tk
import ttk

class toggledFrame(tk.Frame):
    def __init__(self, parent, text='',**options):
        tk.Frame.__init__(self, parent, **options)
        self.show=tk.IntVar()
        self.show.set(0)
        self.titleFrame=ttk.Frame(self)
        self.titleFrame.pack(fill=tk.X, expand=1)
        ttk.Label(self.titleFrame, text=text).pack(side=tk.LEFT, fill=tk.X, expand=1)
        self.toggleButton=ttk.Checkbutton(self.titleFrame, width=2,text='+', command=self.toggle, variable=self.show, style='Toolbutton')
        self.toggleButton.pack(side=tk.LEFT)
        self.subFrame=tk.Frame(self, relief=tk.SUNKEN,borderwidth=1)
    def toggle(self):
        if bool(self.show.get()):
            self.subFrame.pack(fill=tk.X, expand=1)
            self.toggleButton.configure(text='-')
        else:
            self.subFrame.forget()
            self.toggleButton.configure(text='+')

#Example
app=tk.Tk()

t=toggledFrame(app, text='Rotate', relief=tk.RAISED,borderwidth=1)
t.pack(fill=tk.X, expand=1, pady=2, padx=2, anchor=tk.N)
ttk.Label(t.subFrame,text='Rotation [deg]:').pack(side=tk.LEFT, fill=tk.X, expand=1)
ttk.Entry(t.subFrame).pack(side=tk.LEFT)

t2=toggledFrame(app, text='Resize', relief=tk.RAISED,borderwidth=1)
t2.pack(fill=tk.X, expand=1, pady=2, padx=2,anchor=tk.N)
for i in range(10):
    ttk.Label(t2.subFrame, text='Test'+str(i)).pack()

t3=toggledFrame(app, text='Fooo', relief=tk.RAISED,borderwidth=1)
t3.pack(fill=tk.X, expand=1, pady=2, padx=2,anchor=tk.N)
for i in range(10):
    ttk.Label(t3.subFrame, text='Bar'+str(i)).pack()

tk.mainloop()
</snippet></ROW><ROW><id>13169755</id><snippet>[2:]</snippet></ROW><ROW><id>13169755</id><snippet>range(len(original))</snippet></ROW><ROW><id>13169755</id><snippet>range(len(something))</snippet></ROW><ROW><id>13169755</id><snippet>for x in string</snippet></ROW><ROW><id>13169755</id><snippet>def expand(original):
    var = ""
    symbols = original[:2]
    for digit in original[2:]:
        var += (digit + symbols)
    return var
</snippet></ROW><ROW><id>13169755</id><snippet>&gt;&gt;&gt; expand('+*1234')
'1+*2+*3+*4+*'
</snippet></ROW><ROW><id>13169755</id><snippet>from itertools import cycle

def expand(original):
    var = ""
    symbols = cycle(original[:2])
    for digit in original[2:]:
        var += (digit + next(symbols))
    return var[:-1]
</snippet></ROW><ROW><id>13169755</id><snippet>+</snippet></ROW><ROW><id>13169755</id><snippet>+=</snippet></ROW><ROW><id>13169755</id><snippet>str.join()</snippet></ROW><ROW><id>13169755</id><snippet>from itertools import cycle

def expand(original):
    chars = []
    symbols = cycle(original[:2])
    for digit in original[2:]:
        chars.extend([digit, next(symbols)])
    return "".join(chars[:-1])
</snippet></ROW><ROW><id>13169755</id><snippet>next(symbols)</snippet></ROW><ROW><id>13169755</id><snippet>zip()</snippet></ROW><ROW><id>13169755</id><snippet>from itertools import cycle

def expand(original):
    chars = []
    for symbol, digit in zip(cycle(original[:2]), original[2:]):
        chars.extend([digit, symbol])
    return "".join(chars[:-1])
</snippet></ROW><ROW><id>13169755</id><snippet>cycle()</snippet></ROW><ROW><id>13169755</id><snippet>def cycle(iterable):
    # cycle('ABCD') --&gt; A B C D A B C D A B C D ...
    saved = []
    for element in iterable:
        yield element
        saved.append(element)
    while saved:
        for element in saved:
            yield element
</snippet></ROW><ROW><id>13169786</id><snippet>your_str.splitlines()</snippet></ROW><ROW><id>13169786</id><snippet>your_str.split('\n')</snippet></ROW><ROW><id>13169786</id><snippet>out = []
buff = []
for c in your_str:
    if c == '\n':
        out.append(''.join(buff))
        buff = []
    else:
        buff.append(c)
else:
    if buff:
       out.append(''.join(buff))

print out
</snippet></ROW><ROW><id>13169974</id><snippet>class Enum(object):
    def __init__(self, a, b): 
        self.one = a
        self.two = b 

    def __metaclass__(name, bases, dict):
        cls = type(name, bases, dict)
        cls.ZERO = cls(0, 0)
        cls.ONE = cls(0, 1)
        return cls 
</snippet></ROW><ROW><id>13170010</id><snippet># helper functions
def getRGB(pix):
    return getRed(pix), getGreen(pix), getBlue(pix)

def setRGB(pix, r, g, b):
    setRed(pix,r)
    setGreen(pix,g)
    setBlue(pix,b)

def markYellow(pic):
    for pix in getPixels(pic):
        r, g, b = getRGB(pix)
        if r &gt; 200 and b &lt; 90 and g &gt; 150:
            setRGB(pix, 255, 255, 255) 
        else:
            setRGB(pix, 0, 0, 0)

def pctMarked(pic):
    # is there a more direct way to get the totalPixels?
    # totalPixels = len(pic) # perhaps?
    totalPixels = sum(1 for pix in getPixels(pic))
    whitePixels = sum(getRGB(pix) == (255, 255, 255) for pix in getPixels(pic))
    return whitePixels / float(totalPixels)
</snippet></ROW><ROW><id>13170028</id><snippet>bbutton</snippet></ROW><ROW><id>13170028</id><snippet>Plotter()</snippet></ROW><ROW><id>13170028</id><snippet>bbutton</snippet></ROW><ROW><id>13170028</id><snippet>Plotter</snippet></ROW><ROW><id>13170028</id><snippet>buttonaxe._button = bbutton
</snippet></ROW><ROW><id>13170208</id><snippet>    new_product = shopify.Product()
    new_product.product_type = p.category()
    new_product.body_html = p.description
    new_product.title = "atisundar "+ p.caption
    new_product.vendor = "atisundar"

    image1 = shopify.Image()
    image1.src = p.image.url()

    new_product.images = [image1]
    new_product.save()
</snippet></ROW><ROW><id>13170546</id><snippet>crop</snippet></ROW><ROW><id>13170546</id><snippet>image.crop(200, 200, 200, 200)
window.add(image)
window.wait()
window.close()
</snippet></ROW><ROW><id>13170924</id><snippet>venue</snippet></ROW><ROW><id>13170924</id><snippet>pk</snippet></ROW><ROW><id>13170924</id><snippet>venues</snippet></ROW><ROW><id>13170924</id><snippet>from django.shortcuts import render

def venue(request,venue_id):
    the_venue = get_object_or_404(Venue,pk=venue_id)
    return render(request,'venues/venueprofile',{'venue',the_venue})
</snippet></ROW><ROW><id>13170924</id><snippet>{% load url from future %}
&lt;a href="{% url 'venue' venue_id=venue.pk %}"&gt;{{venue.name}}&lt;/a&gt;
</snippet></ROW><ROW><id>13170931</id><snippet>Plan.objects.filter(region__name="CA").annotate(avg_temperature=Avg("region__weather__temp_max"))</snippet></ROW><ROW><id>13170931</id><snippet>avg_temperature</snippet></ROW><ROW><id>13171068</id><snippet>place = (postal_code , place , f_name) 

cur.execute("insert into place(postal_code ,place,f_name) values(?,?,(select c_id from customers where fname =?))",place)
</snippet></ROW><ROW><id>13171229</id><snippet>w = Weather.objects.get(pk=1)
w.region.plan.name
w.district.plan.name
w.temp_max
w.temp_min
</snippet></ROW><ROW><id>13171229</id><snippet>w.region</snippet></ROW><ROW><id>13171229</id><snippet>name</snippet></ROW><ROW><id>13171229</id><snippet>w.region.name</snippet></ROW><ROW><id>13171229</id><snippet>w.district</snippet></ROW><ROW><id>13171229</id><snippet>w.region.plan</snippet></ROW><ROW><id>13171229</id><snippet>w.district.plan</snippet></ROW><ROW><id>13171229</id><snippet>p = Plan.objects.get(pk=1) # get a Plan
p.region.weather_set.all() # all "weathers" for the region for this plan
p.district.weather_set.all() # all "weathers" for the district for this plan
</snippet></ROW><ROW><id>13171229</id><snippet>plans = Plan.objects.filter(region__name='Region 1') # all plans for that region
for plan in plans:
   region_weather = plan.region.weather_set.all()
   district_weather = plan.district.weather_set.all()
</snippet></ROW><ROW><id>13171414</id><snippet>S = np.array([])
num = len(data) ** 2  # This is not the same as 2 ** len(data) !!
y = product(data, repeat=2)
for x in count():
    while x &lt;= num:
        z = y.next()
        i, j = z
        s = np.dot(i, j)
        S = np.insert(S, x, s)
        break #for the 'StopIteration' issue
    return np.reshape(S, (num, num))
</snippet></ROW><ROW><id>13171608</id><snippet>st</snippet></ROW><ROW><id>13171608</id><snippet>ch</snippet></ROW><ROW><id>13171608</id><snippet>def vowels_or_not(st, ch):
    vowels = ('a','e','i','o','u','A','E','I','O','U')
    a = 0
    aux = ''
    for i in range(len(st)):
        if (st[i] == ch):
            break
        else:
            if (st[i] in vowels):
                aux = aux + st[i]
                a = a + 1
            if (st[i] not in vowels):
                aux = aux + '$'
                a = a + 1
    return aux
</snippet></ROW><ROW><id>13171608</id><snippet>&gt;&gt;&gt; vowels_or_not('a', 'X')
'a'
&gt;&gt;&gt; vowels_or_not('aaaAX', 'X')
'aaaA'
&gt;&gt;&gt; vowels_or_not('aaabX', 'X')
'aaa$'
</snippet></ROW><ROW><id>13172015</id><snippet>mod_wsgi</snippet></ROW><ROW><id>13172015</id><snippet>pre_save</snippet></ROW><ROW><id>13172015</id><snippet>post_save</snippet></ROW><ROW><id>13172180</id><snippet>action = ""</snippet></ROW><ROW><id>13172231</id><snippet>qrcode</snippet></ROW><ROW><id>13172231</id><snippet>PATH</snippet></ROW><ROW><id>13172388</id><snippet>#views.py
def add_question(request, movie_id):
    if request.method == "POST":
        form = QuestionForm(request.POST, request.FILES)
        if form.is_valid():
            question = form.save(user = request.user)
            question.movie = Movie.objects.get(pk = movie_id)
            question.save()
            return HttpResponseRedirect("/home/")
    else:
        form = QuestionForm()
    return render_to_response("qanda/add_question.html", {'form': form}, context_instance = RequestContext(request)
</snippet></ROW><ROW><id>13172388</id><snippet>home</snippet></ROW><ROW><id>13172388</id><snippet>/home/</snippet></ROW><ROW><id>13172388</id><snippet>/myhome/</snippet></ROW><ROW><id>13172388</id><snippet># URL Conf
url(r'^home/$', 'home_view', name="home_url"),
url(r'^(?P&lt;movie_id&gt;\d+)/add_question/$', 'add_question', name="add_question_url"),
url(r'^home/(?P&lt;movie_id&gt;\d+)/$', 'movie_view', name="movie_url"),
</snippet></ROW><ROW><id>13172388</id><snippet>name</snippet></ROW><ROW><id>13172388</id><snippet>from django.core.urlresolvers import reverse

def some_view(request):
    ...
    return HttpResponseRedirect(reverse('home_url'))
</snippet></ROW><ROW><id>13172388</id><snippet>name</snippet></ROW><ROW><id>13172388</id><snippet>def some_view(request, movie_id):
    ...
    return HttpResponseRedirect(reverse('movie_url', kwargs={'movie_id':movie_id}))
</snippet></ROW><ROW><id>13173064</id><snippet>Makefile</snippet></ROW><ROW><id>13173064</id><snippet>#ifndef _ORIGINAL_H_
#define _ORIGINAL_H_

int _original_print(const char *data);

#endif /*_ORIGINAL_H_*/
</snippet></ROW><ROW><id>13173064</id><snippet>#include &lt;stdio.h&gt;
#include "original.h"

int _original_print(const char *data)
{
  return printf("o: %s",data);
}
</snippet></ROW><ROW><id>13173064</id><snippet>#include &lt;Python.h&gt;
#include "original.h"

static PyObject *myext_print(PyObject *, PyObject *);

static PyMethodDef Methods[] = {
  {"printx", myext_print, METH_VARARGS,"Print"},
  {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC initmyext(void)
{
  PyObject *m;
  m = Py_InitModule("myext",Methods);
}

static PyObject *myext_print(PyObject *self, PyObject *args)
{
  const char *data;
  int no_chars_printed;
  if(!PyArg_ParseTuple(args, "s", &amp;data)){
      return NULL;
  }
    no_chars_printed = _original_print(data);
    return Py_BuildValue("i",no_chars_printed);  
}
</snippet></ROW><ROW><id>13173064</id><snippet>PYTHON_INCLUDE = -I/usr/include/python2.6
PYTHON_LIB = -lpython2.6
USER_LIBRARY = -L/usr/lib
GCC = gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -fPIC -DMAJOR_VERSION=1 -DMINOR_VERSION=0 -I/usr/include -I/usr/include/python2.6 

win32 : myext.o
    - gcc -shared myext.o $(USER_LIBRARY) $(PYTHON_LIB) -o myext.dll

linux : myext.o
    - gcc -shared myext.o $(USER_LIBRARY) $(PYTHON_LIB) -o myext.so

myext.o: stub.o original.o
    - ld -r stub.o original.o -o myext.o

stub.o: stub.c
    - $(GCC) -c stub.c -o stub.o

original.o: original.c
    - $(GCC) -c original.c -o original.o

clean: myext.o
    - rm stub.o original.o stub.c~ original.c~ Makefile~
</snippet></ROW><ROW><id>13173064</id><snippet>import myext
myext.printx('hello world')
</snippet></ROW><ROW><id>13173198</id><snippet>import xml.etree.ElementTree as ET

doc    = ET.parse("users.xml")
root = doc.getroot() #Returns the root element for this tree.
root_new  = ET.Element("person") 
for child in root:
    name                = child.attrib['name']
    password             = child.attrib['password']

    user  = ET.SubElement(root_new, "user") # create subelement in cycle! 
    user.set("username",name)               # username variable is not declared
    user.set("password",password)

tree = ET.ElementTree(root_new)
tree.write("new.xml")

import sys
tree.write(sys.stdout)
</snippet></ROW><ROW><id>13173314</id><snippet>lambda v: v</snippet></ROW><ROW><id>13173314</id><snippet>def any(v):
    return v
</snippet></ROW><ROW><id>13173314</id><snippet>type_</snippet></ROW><ROW><id>13173314</id><snippet>None</snippet></ROW><ROW><id>13173314</id><snippet>if</snippet></ROW><ROW><id>13173314</id><snippet>any</snippet></ROW><ROW><id>13173605</id><snippet>class Helper:pass 

# use name space
def one(a):  
    a.x=1
    a.y=2
    a.z=3
    a.h=33
    a.j=454
    a.l=353
    a.m=898

def two(a):
    a.y=7

a=Helper()

one(a)
print(a.x,a.y)
two(a)
print(a.x,a.y)

#-------------------------------------------------------------------
# I think you have solution and dont need to read next lines :)
# next lines are just bonus ;)
#-------------------------------------------------------------------

# you could use more independent "namespaces"
b=Helper()
one(b)
print(b.y)
print(a.y)  # "namespace a" is unchanged

# if you like to see which attributes are defined you could use funciton dir
# (under python3 it is a little more complicated)
print(dir(a))
print(dir(b))

# please dont do next lines at home!!! :P:P:P (__builtins__ is special you could get unwanted results!) 
one(__builtins__)

print(x) # 
</snippet></ROW><ROW><id>13173665</id><snippet>issubclass</snippet></ROW><ROW><id>13173665</id><snippet>isinstance</snippet></ROW><ROW><id>13173665</id><snippet>issubclass</snippet></ROW><ROW><id>13173665</id><snippet>import mymodule as t
for att in dir(t):
   someclass = getattr(t, att)
   if isinstance (someclass, type) and issubclass(someclass, TargetClass):
       print ("Do something with %s" % att)
</snippet></ROW><ROW><id>13173687</id><snippet>os.path.expanduser('~')</snippet></ROW><ROW><id>13173687</id><snippet>.pylintrc</snippet></ROW><ROW><id>13173687</id><snippet>expanduser</snippet></ROW><ROW><id>13173687</id><snippet>import os
print os.path.expanduser('~')
</snippet></ROW><ROW><id>13173687</id><snippet>.pylintrc</snippet></ROW><ROW><id>13173687</id><snippet>pylintrc</snippet></ROW><ROW><id>13173687</id><snippet>__init__.py</snippet></ROW><ROW><id>13173687</id><snippet>pylintrc</snippet></ROW><ROW><id>13174025</id><snippet>import functools # python3 compatibility (for reduce function)

# unsorted - see 3,4 are swaped!
masterVars = ["1", "2", "4", "3", "5", "6", "7", "8", "9", "10"]

input_dict=dict(headerGroup1 = ["1", "2", "3", "4", "5"],headerGroup2 = ["6", "7", "8", "9", "10"],headerGroup3 = ["1", "2", "3", "4", "5"])

# used builtins sorted function for sorting 
new_master_file=[' '.join(j[0])+' '+j[1] for j in [functools.reduce(lambda a,b:(i in input_dict[b] and a[0]+[b] or a[0],i),input_dict,[[],i]) for i in sorted(masterVars,key=int)]]

for i in new_master_file:
    print (i)
</snippet></ROW><ROW><id>13174033</id><snippet>movie_add</snippet></ROW><ROW><id>13174033</id><snippet>&lt;ul&gt;
  {% for movie in movies %}
  &lt;li&gt;{{ movie.name }} &lt;a href="{% url movie_add movie.id %}"&gt;add&lt;/a&gt;&lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
&lt;div id="loadDiv"&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>13174033</id><snippet>a</snippet></ROW><ROW><id>13174033</id><snippet>$('a').click(function(ev) {
  ev.preventDefault();

  $.ajax({
    url: $(this).attr('href'),
    success: function(data) {
      $('#loadDiv').html(data);
    }
  });
</snippet></ROW><ROW><id>13174135</id><snippet>stages = root.findall("./ep_150/stage")        

print '\n\nreviews for id=p4645\n'

for stage in stages:
    for rev in stage.findall('review'):
        if rev.attrib['id']=='p4645':
            print stage.attrib['name'], rev.attrib['name']
</snippet></ROW><ROW><id>13174135</id><snippet>root = ET.fromstring(xmldata)

stages = root.findall("./ep_150/stage[@department='animation']")

print 'Stages in animation department....\n'

for stage in stages:
    print stage.attrib['name']

stages = root.findall("./ep_150/stage")        

print '\n\nreviews for id=p4645\n'

for stage in stages:
    for rev in stage.findall("review[@id='p4645']"):
        print stage.attrib['name'], rev.attrib['name']
</snippet></ROW><ROW><id>13174148</id><snippet>r'=((["\']).*?\2)'
</snippet></ROW><ROW><id>13174374</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>13174374</id><snippet>[]</snippet></ROW><ROW><id>13174374</id><snippet>manage.py shell</snippet></ROW><ROW><id>13174374</id><snippet>from django.conf import settings; print settings.TEMPLATE_DIRS[0]</snippet></ROW><ROW><id>13174374</id><snippet>manage.py shell</snippet></ROW><ROW><id>13174374</id><snippet>from django.template import loader; print loader.get_template('home.html')</snippet></ROW><ROW><id>13174534</id><snippet>a = ['a', 'b', 'c']
res = "".join(a)
</snippet></ROW><ROW><id>13174534</id><snippet>list(res)
</snippet></ROW><ROW><id>13174683</id><snippet>.o</snippet></ROW><ROW><id>13174683</id><snippet>.so</snippet></ROW><ROW><id>13174683</id><snippet>--no-undefined</snippet></ROW><ROW><id>13174683</id><snippet>g++</snippet></ROW><ROW><id>13174683</id><snippet>clang++</snippet></ROW><ROW><id>13174683</id><snippet>-Wl,--no-undefined</snippet></ROW><ROW><id>13174701</id><snippet>try</snippet></ROW><ROW><id>13174701</id><snippet>if __name__ == '__main__':

try:
    raise Exception()
except:
    import pdb
    pdb.set_trace()
</snippet></ROW><ROW><id>13174701</id><snippet>sys.excepthook</snippet></ROW><ROW><id>13174701</id><snippet>## {{{ http://code.activestate.com/recipes/65287/ (r5)
# code snippet, to be included in 'sitecustomize.py'
import sys

def info(type, value, tb):
   if hasattr(sys, 'ps1') or not sys.stderr.isatty():
      # we are in interactive mode or we don't have a tty-like
      # device, so we call the default hook
      sys.__excepthook__(type, value, tb)
   else:
      import traceback, pdb
      # we are NOT in interactive mode, print the exception...
      traceback.print_exception(type, value, tb)
      print
      # ...then start the debugger in post-mortem mode.
      pdb.pm()

sys.excepthook = info
## end of http://code.activestate.com/recipes/65287/ }}}
</snippet></ROW><ROW><id>13174720</id><snippet>import matplotlib.pyplot as plt
plt.close()
</snippet></ROW><ROW><id>13174720</id><snippet>plt.close('all')</snippet></ROW><ROW><id>13175354</id><snippet>nargs='?'</snippet></ROW><ROW><id>13175354</id><snippet>'?'</snippet></ROW><ROW><id>13175354</id><snippet>nargs='?'</snippet></ROW><ROW><id>13175354</id><snippet>argparse</snippet></ROW><ROW><id>13175354</id><snippet>action='store'</snippet></ROW><ROW><id>13175354</id><snippet>nargs=1</snippet></ROW><ROW><id>13175354</id><snippet>nargs</snippet></ROW><ROW><id>13175364</id><snippet>C:\&gt; mode con: cols=25 lines=80
</snippet></ROW><ROW><id>13175364</id><snippet>subprocess.Popen(["mode", "con:", "cols=25", "lines=80"])
</snippet></ROW><ROW><id>13176124</id><snippet>x_row = [0]*(seq1_len+1)</snippet></ROW><ROW><id>13176124</id><snippet>matrix = [x_row]*(seq2_len+1)</snippet></ROW><ROW><id>13176124</id><snippet>matrix[4][5]=5</snippet></ROW><ROW><id>13176124</id><snippet>print matrix</snippet></ROW><ROW><id>13176153</id><snippet>getattr(MyModel, attrib_name) 
</snippet></ROW><ROW><id>13176153</id><snippet>attrib_name</snippet></ROW><ROW><id>13176250</id><snippet>submitButton</snippet></ROW><ROW><id>13176250</id><snippet>theHiddenInput</snippet></ROW><ROW><id>13176250</id><snippet>$('.submitButton').click(function() {
    this.form.theHiddenInput.value = this.name;
});
</snippet></ROW><ROW><id>13176250</id><snippet>if (request.POST.get('theHiddenInput') == 'foo'):
    return 'foo'
if (request.POST.get('theHiddenInput') == 'bar'):
    return 'bar'
</snippet></ROW><ROW><id>13176281</id><snippet>stdout</snippet></ROW><ROW><id>13176281</id><snippet>cStringIO</snippet></ROW><ROW><id>13176572</id><snippet>path</snippet></ROW><ROW><id>13176572</id><snippet>bindparam()</snippet></ROW><ROW><id>13176572</id><snippet>.contains()</snippet></ROW><ROW><id>13176572</id><snippet>.startswith()</snippet></ROW><ROW><id>13176572</id><snippet>from sqlalchemy.sql.expression import bindparam

session.query(Site).filter(bindparam('path', path).contains(Site.path_prefix))
</snippet></ROW><ROW><id>13176572</id><snippet>.contains()</snippet></ROW><ROW><id>13176572</id><snippet>? LIKE CONCAT('%', Site.path_prefix, '%')
</snippet></ROW><ROW><id>13176572</id><snippet>? LIKE '%' || Site.path_prefix || '%'
</snippet></ROW><ROW><id>13176572</id><snippet>.startswith()</snippet></ROW><ROW><id>13176572</id><snippet>from sqlalchemy.sql.expression import bindparam

session.query(Site).filter(bindparam('path', path).startswith(Site.path_prefix))
</snippet></ROW><ROW><id>13176769</id><snippet>def has_required_talents(self, talent)
   required_list = talent.talents_required.values_list('id', flat=True)
   hero_talents = self.hero.talents.values_list('id', flat=True)
   for item in required_list:
      if not item in hero_talents:
         return False
   return True
</snippet></ROW><ROW><id>13176769</id><snippet>def has_required_talents(self, talent)
   required_list = set(talent.talents_required.values_list('id', flat=True))
   hero_talents = set(self.hero.talents.values_list('id', flat=True))
   if required_list.issubset(hero_talents):
      return True
   return False
</snippet></ROW><ROW><id>13177577</id><snippet>SELECT max(id) FROM table_name</snippet></ROW><ROW><id>13177577</id><snippet>cursor = sqlite3.execute('SELECT max(id) FROM table_name')
max_id = cursor.fetchone()[0]
</snippet></ROW><ROW><id>13177577</id><snippet>fetchone()</snippet></ROW><ROW><id>13177577</id><snippet>fetchone()[0]</snippet></ROW><ROW><id>13177581</id><snippet>lower = ctypes.cschar(&lt;somevalue&gt;)
upper = ctypes.cschar(&lt;anothervalue&gt;)
combined = ctypes.csshort( lower + (upper &lt;&lt; 8) )
</snippet></ROW><ROW><id>13177620</id><snippet>import random

x = random.randint(0,10)
y = 7
while x != y:
    print(x)   #Print old (non-7) random number
    x = random.randint(0,10)  #pick a new number.  I hope it's 7 so we can end this madness

print("You found {0}.  Congrats.  Go have a beer.".format(y))
</snippet></ROW><ROW><id>13177647</id><snippet>(.+\S)</snippet></ROW><ROW><id>13177647</id><snippet>'\S</snippet></ROW><ROW><id>13177647</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; reg=re.compile('\s*(.+\S)\s+(\S+)')
&gt;&gt;&gt; reg.findall(line)
[('filename with spaces', 'crc')]
</snippet></ROW><ROW><id>13177647</id><snippet>&gt;&gt;&gt; comment_line_regex=re.compile('\s*;.*')
&gt;&gt;&gt; line1='   filename with spaces    crc  '
&gt;&gt;&gt; line2=';  filename with spaces    crc  '
&gt;&gt;&gt; line3='  ;  filename with spaces    crc  '
&gt;&gt;&gt; lines = [line1, line2, line3]
</snippet></ROW><ROW><id>13177647</id><snippet>&gt;&gt;&gt; [reg.findall(l) for l in lines if not comment_line_regex.match(l)]
[[('filename with spaces', 'crc')]]
</snippet></ROW><ROW><id>13177647</id><snippet>&gt;&gt;&gt; for line in lines:
...     if not comment_line_regex.match(line):
...             print reg.findall(line)
... 
[('filename with spaces', 'crc')]
</snippet></ROW><ROW><id>13177791</id><snippet>Action</snippet></ROW><ROW><id>13177791</id><snippet>otherscript</snippet></ROW><ROW><id>13177791</id><snippet>parse_known_args</snippet></ROW><ROW><id>13177791</id><snippet>sys.argv</snippet></ROW><ROW><id>13177791</id><snippet>import shlex
s = shlex.split("./script --arg1 --cmdname otherscript --a1 --a2 --cmdname-- --arg3")
def preprocess(lst):
    """
    process an iterable into 2 lists.
    The second list contains the portion bracketed by '--cmdname' and '--cmdname--'
    whereas the first portion contains the rest of it.
    """
    argv1,argv2 = [],[]
    current = argv1
    for i in lst:
        if i == '--cmdname':
           current = argv2
        elif i == '--cmdname--':
           current = argv1
        else:
           current.append(i)
    return argv1,argv2

l1,l2 = preprocess(s)
print l1
print l2
</snippet></ROW><ROW><id>13177791</id><snippet>preprocess</snippet></ROW><ROW><id>13177791</id><snippet>.index</snippet></ROW><ROW><id>13177791</id><snippet>sys.argv</snippet></ROW><ROW><id>13177791</id><snippet>def preprocess(lst):
    """
    process an iterable into 2 lists.
    The second list contains the portion bracketed by '--cmdname' and '--cmdname--'
    whereas the first portion contains the rest of it.
    """
    try:
        i1 = lst.index('--cmdname')
        i2 = lst.index('--cmdname--')
        argv1 = lst[i1+1:i2]
        argv2 = lst[:i1]+lst[i2+1:]
    except ValueError:
        argv1 = lst
        argv2 = []

    return argv1,argv2
</snippet></ROW><ROW><id>13177791</id><snippet>./script --arg1 --cmd "otherscript --a1 --a2" --arg3
</snippet></ROW><ROW><id>13177791</id><snippet>cmd</snippet></ROW><ROW><id>13177791</id><snippet>argparse</snippet></ROW><ROW><id>13177791</id><snippet>type=shlex.split</snippet></ROW><ROW><id>13178111</id><snippet>polling</snippet></ROW><ROW><id>13178111</id><snippet>long polling</snippet></ROW><ROW><id>13178111</id><snippet>web sockets</snippet></ROW><ROW><id>13178453</id><snippet>cairo</snippet></ROW><ROW><id>13178453</id><snippet>ms</snippet></ROW><ROW><id>13178453</id><snippet>mew</snippet></ROW><ROW><id>13178453</id><snippet>alpha</snippet></ROW><ROW><id>13178453</id><snippet>plt.scatter(x, y)
</snippet></ROW><ROW><id>13178453</id><snippet>plt.plot(x, y, 'o', ms=3, mew=0, alpha=0.3)
</snippet></ROW><ROW><id>13178967</id><snippet>sometuple[1]
</snippet></ROW><ROW><id>13178967</id><snippet>easyzone</snippet></ROW><ROW><id>13178967</id><snippet>easyzone.easyzone.Name</snippet></ROW><ROW><id>13178967</id><snippet>.name</snippet></ROW><ROW><id>13178967</id><snippet>.soa</snippet></ROW><ROW><id>13178967</id><snippet>.ttl</snippet></ROW><ROW><id>13178967</id><snippet>print sometuple[1].name
</snippet></ROW><ROW><id>13178967</id><snippet>.soa</snippet></ROW><ROW><id>13178967</id><snippet>.mname</snippet></ROW><ROW><id>13178967</id><snippet>.rname</snippet></ROW><ROW><id>13178967</id><snippet>.serial</snippet></ROW><ROW><id>13178967</id><snippet>.refresh</snippet></ROW><ROW><id>13178967</id><snippet>.retry</snippet></ROW><ROW><id>13178967</id><snippet>.expire</snippet></ROW><ROW><id>13178967</id><snippet>.minttl</snippet></ROW><ROW><id>13179379</id><snippet>(?&gt; ...)</snippet></ROW><ROW><id>13179379</id><snippet>re</snippet></ROW><ROW><id>13179379</id><snippet>re</snippet></ROW><ROW><id>13179386</id><snippet>'django.contrib.auth.backends.ModelBackend',
</snippet></ROW><ROW><id>13179558</id><snippet>locals()</snippet></ROW><ROW><id>13179558</id><snippet>globals()</snippet></ROW><ROW><id>13179558</id><snippet>dir()</snippet></ROW><ROW><id>13179558</id><snippet>locals().keys()</snippet></ROW><ROW><id>13179558</id><snippet>globals()</snippet></ROW><ROW><id>13179558</id><snippet>locals()</snippet></ROW><ROW><id>13179558</id><snippet>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__']
&gt;&gt;&gt; locals().keys()
['__builtins__', '__name__', '__doc__', '__package__']
&gt;&gt;&gt; def foo():
...     return locals().keys(), globals().keys()
... 
&gt;&gt;&gt; foo()
([], ['__builtins__', '__name__', 'foo', '__doc__', '__package__'])
</snippet></ROW><ROW><id>13179791</id><snippet>@ECHO OFF
PATH_TO_PYTHON\python.exe PATH_TO_SCRIPT.py
</snippet></ROW><ROW><id>13179791</id><snippet>@ECHO OFF
python PATH_TO_SCRIPT.py
</snippet></ROW><ROW><id>13179961</id><snippet>StringVar.trace</snippet></ROW><ROW><id>13179961</id><snippet>statusmsg</snippet></ROW><ROW><id>13179961</id><snippet>bal</snippet></ROW><ROW><id>13179961</id><snippet>Tix</snippet></ROW><ROW><id>13179961</id><snippet>Balloon</snippet></ROW><ROW><id>13180078</id><snippet>glVertexPointer</snippet></ROW><ROW><id>13180078</id><snippet>None</snippet></ROW><ROW><id>13180078</id><snippet>glVertexPointer (3, GL_FLOAT, 0, None)
</snippet></ROW><ROW><id>13180215</id><snippet>def seconds(time_str):
    end_time = datetime.datetime.strptime(time_str,'%H:%M:%S')
    delta = end_time - datetime.datetime.strptime('0:0:0','%H:%M:%S')
    return delta.total_seconds()


df_SOF1.D_Time = df_SOF1.D_Time.apply(seconds)
</snippet></ROW><ROW><id>13180215</id><snippet>&gt;&gt;&gt; df_SOF1.groupby('CostCentre').sum()
            Location  D_Time  count
CostCentre                         
0                 45   27180     69
2073             420  594660     21
</snippet></ROW><ROW><id>13180215</id><snippet>timeit.timeit("sec('01:01:01')", setup="from __main__ import sec",
              number=10000)
1.025843858718872

timeit.timeit("seconds('01:01:01')", setup="from __main__ import seconds",
              number=10000)
0.6128969192504883 
</snippet></ROW><ROW><id>13180320</id><snippet>if all(c.upper() in 'ATGC' for c in seq_record.seq):
    pass # it's DNA
</snippet></ROW><ROW><id>13180578</id><snippet>for line in myfile:</snippet></ROW><ROW><id>13180578</id><snippet>file</snippet></ROW><ROW><id>13180578</id><snippet>myfile()</snippet></ROW><ROW><id>13180578</id><snippet>file.__call__</snippet></ROW><ROW><id>13180825</id><snippet>sage: st1= matrix([
[ 1, 0, 0, 0,-1,-1,-1, 0, 0, 0],
[ 0, 1, 0, 0, 1, 0, 0,-1,-1, 0],
[ 0, 0, 0, 0, 0, 1, 0, 1, 0,-1],
[ 0, 0, 0, 0, 0, 0, 1, 0, 0,-1],
[ 0, 0, 0,-1, 0, 0, 0, 0, 0, 1],
[ 0, 0,-1, 0, 0, 0, 0, 0, 1, 1]])
sage: K = st1.right_kernel(); K
Free module of degree 10 and rank 4 over Integer Ring
Echelon basis matrix:
[ 1  0  0  1  0  0  1  1 -1  1]
[ 0  1  0  1  0 -1  1  2 -1  1]
[ 0  0  1 -1  0  1 -1 -2  2 -1]
[ 0  0  0  0  1 -1  0  1  0  0]
sage: M = K.basis_matrix()
</snippet></ROW><ROW><id>13180825</id><snippet>gram_schmidt</snippet></ROW><ROW><id>13180825</id><snippet>M.gram_schmidt?</snippet></ROW><ROW><id>13180825</id><snippet>sage: M.gram_schmidt() # rows are orthogonal, not orthonormal
(
[     1      0      0      1      0      0      1      1     -1      1]
[    -1      1      0      0      0     -1      0      1      0      0]
[  5/12    3/4      1    1/6      0    1/4    1/6  -1/12    5/6    1/6]
[ 12/31 -25/62   4/31  -9/62      1 -29/62  -9/62  10/31  17/62  -9/62],

[    1     0     0     0]
[    1     1     0     0]
[ -7/6  -3/4     1     0]
[  1/6   1/2 -4/31     1]
)
sage: M.gram_schmidt()[0] # rows are orthogonal, not orthonormal
[     1      0      0      1      0      0      1      1     -1      1]
[    -1      1      0      0      0     -1      0      1      0      0]
[  5/12    3/4      1    1/6      0    1/4    1/6  -1/12    5/6    1/6]
[ 12/31 -25/62   4/31  -9/62      1 -29/62  -9/62  10/31  17/62  -9/62]
sage: M.change_ring(RDF).gram_schmidt()[0] # orthonormal
[  0.408248290464              0.0              0.0   0.408248290464              0.0              0.0   0.408248290464   0.408248290464  -0.408248290464   0.408248290464]
[            -0.5              0.5              0.0              0.0              0.0             -0.5              0.0              0.5              0.0              0.0]
[  0.259237923683   0.466628262629   0.622171016838   0.103695169473              0.0    0.15554275421   0.103695169473 -0.0518475847365   0.518475847365   0.103695169473]
[  0.289303646409   -0.30135796501  0.0964345488031  -0.108488867403   0.747367753224  -0.349575239411  -0.108488867403   0.241086372008   0.204923416206  -0.108488867403]
</snippet></ROW><ROW><id>13180825</id><snippet>st1</snippet></ROW><ROW><id>13180825</id><snippet>change_ring(RDF)</snippet></ROW><ROW><id>13180825</id><snippet>RDF</snippet></ROW><ROW><id>13180825</id><snippet>st1</snippet></ROW><ROW><id>13180825</id><snippet>1</snippet></ROW><ROW><id>13180825</id><snippet>1.0</snippet></ROW><ROW><id>13180825</id><snippet>st1</snippet></ROW><ROW><id>13180825</id><snippet>change_ring</snippet></ROW><ROW><id>13180879</id><snippet>*</snippet></ROW><ROW><id>13180879</id><snippet>In [2]: lis=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

In [3]: zip(*lis)
Out[3]: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>13180954</id><snippet>_main</snippet></ROW><ROW><id>13180954</id><snippet>_main</snippet></ROW><ROW><id>13180954</id><snippet>pypy problem204.py</snippet></ROW><ROW><id>13180954</id><snippet>timeit</snippet></ROW><ROW><id>13181036</id><snippet>Ctrl-C</snippet></ROW><ROW><id>13181036</id><snippet>try:
    while True:
        do_something()
except KeyboardInterrupt:
    pass
</snippet></ROW><ROW><id>13181036</id><snippet>Ctrl-C</snippet></ROW><ROW><id>13181036</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>13181102</id><snippet>from xml.etree import ElementTree

tree = ElementTree.parse('filename.html')
for elem in tree.findall('img'):
    print elem['src']
</snippet></ROW><ROW><id>13181176</id><snippet>time</snippet></ROW><ROW><id>13181176</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.gmtime(0)
time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
</snippet></ROW><ROW><id>13181201</id><snippet>from django.core.cache import cache

...

CACHE_TIMEOUT = 3600      # choose your timeout

def data(request):
    jsonstring = cache.get('elections')

    if jsonstring is None:
        data = [{
                "title": election.title,
                "description": election.description,
                "priority": election.priority,
                "decided": election.decided,
                "candidates": [
                      {
                         "name": candidate.name,
                         "percent": candidate.percent,
                         "totalvotes": candidate.totalvotes,
                         "partyname": candidate.partyname,
                         "partyabbrv": candidate.partyabbrv,
                    } for candidate in election.candidates_set.all()
                  ],
                } for election in race.objects.all()]

        jsonstring = simplejson.dumps(data)
        cache.set('elections', jsonstring, CACHE_TIMEOUT)

    callback = request.GET.get('callback')

    if callback:
        response = HttpResponse("%s(%s)" % (callback, jsonstring),
                                mimetype="application/json")
    else:
        response = HttpResponse('{"races":' + jsonstring + '}',
                                mimetype="application/json")

    return response
</snippet></ROW><ROW><id>13181201</id><snippet>settings.py</snippet></ROW><ROW><id>13181201</id><snippet>CACHE</snippet></ROW><ROW><id>13181271</id><snippet>.clear()</snippet></ROW><ROW><id>13181271</id><snippet>.clear()</snippet></ROW><ROW><id>13181495</id><snippet>ListStore</snippet></ROW><ROW><id>13181495</id><snippet>namedtuple</snippet></ROW><ROW><id>13181495</id><snippet>ListStore</snippet></ROW><ROW><id>13181495</id><snippet>gtk.ListStore(*yourtuple)</snippet></ROW><ROW><id>13181605</id><snippet>totalgames</snippet></ROW><ROW><id>13181605</id><snippet>players</snippet></ROW><ROW><id>13181605</id><snippet>import json
response = '{"response": {"players": [{"steamid": "12345","communityvisibilitystate": 3,"profilestate": 1,"personaname": "aSteamID","lastlogoff": 1351676021,"profileurl": "http:\/\/steamcommunity.com\/id\/aSteamID\/","avatar": "http:\/\/media.steampowered.com\/steamcommunity\/public\/images\/avatars\/b2\/b261f66a17bfa6c95b24f8b4c6b58bb3776d57e4.jpg","avatarmedium": "http:\/\/media.steampowered.com\/steamcommunity\/public\/images\/avatars\/b2\/b261f66a17bfa6c95b24f8b4c6b58bb3776d57e4_medium.jpg","avatarfull": "http:\/\/media.steampowered.com\/steamcommunity\/public\/images\/avatars\/b2\/b261f66a17bfa6c95b24f8b4c6b58bb3776d57e4_full.jpg","personastate": 4,"realname": "Real Name","primaryclanid": "103582791429705688","timecreated": 1250966723,"loccountrycode": "GB"}]}}'
data = json.loads(response)
for player in data["response"]["players"]:
    # add code to get game count by player here                  
    # set to zero for this example
    totalgames = 0
    player["totalgames"] = totalgames

print json.dumps(data, sort_keys=True, indent=4)
</snippet></ROW><ROW><id>13181615</id><snippet>__name__</snippet></ROW><ROW><id>13181615</id><snippet>__main__</snippet></ROW><ROW><id>13181615</id><snippet>__name__</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules</snippet></ROW><ROW><id>13181615</id><snippet>__main__</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules</snippet></ROW><ROW><id>13181615</id><snippet>import mod1</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules</snippet></ROW><ROW><id>13181615</id><snippet>mod1</snippet></ROW><ROW><id>13181615</id><snippet>mod1</snippet></ROW><ROW><id>13181615</id><snippet>mod1.py</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules</snippet></ROW><ROW><id>13181615</id><snippet>__main__</snippet></ROW><ROW><id>13181615</id><snippet>mod1</snippet></ROW><ROW><id>13181615</id><snippet>var1</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules['__main__']</snippet></ROW><ROW><id>13181615</id><snippet>func1B</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules['mod1']</snippet></ROW><ROW><id>13181615</id><snippet>var1</snippet></ROW><ROW><id>13181615</id><snippet>python driver.py</snippet></ROW><ROW><id>13181615</id><snippet>driver.py</snippet></ROW><ROW><id>13181615</id><snippet>__main__</snippet></ROW><ROW><id>13181615</id><snippet>mod1</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules['mod1']</snippet></ROW><ROW><id>13181615</id><snippet>func1A</snippet></ROW><ROW><id>13181615</id><snippet>var1</snippet></ROW><ROW><id>13181615</id><snippet>sys.modules['mod1']</snippet></ROW><ROW><id>13181615</id><snippet>func1B</snippet></ROW><ROW><id>13181744</id><snippet>i</snippet></ROW><ROW><id>13181744</id><snippet>j</snippet></ROW><ROW><id>13182163</id><snippet>dateutil</snippet></ROW><ROW><id>13182163</id><snippet>iso8601</snippet></ROW><ROW><id>13182163</id><snippet>&gt;&gt;&gt; import iso8601
&gt;&gt;&gt; iso8601.parse_date('2012-11-01T04:16:13-04:00')
datetime.datetime(2012, 11, 1, 4, 16, 13, tzinfo=&lt;FixedOffset '-04:00'&gt;)
</snippet></ROW><ROW><id>13182163</id><snippet>iso8601</snippet></ROW><ROW><id>13182163</id><snippet>python-dateutil</snippet></ROW><ROW><id>13182236</id><snippet>i, a</snippet></ROW><ROW><id>13182236</id><snippet>for i,a in enumerate( ['some', 'list'])
</snippet></ROW><ROW><id>13182236</id><snippet>$array = ['some', 'array']; 
// Or, for PHP &lt; 5.4: $array = array( 'some', 'array');
foreach( $array as $i =&gt; $a)
</snippet></ROW><ROW><id>13182512</id><snippet>place</snippet></ROW><ROW><id>13182512</id><snippet>self.image = tk.PhotoImage(...)
label = tk.Label(self,image=self.image)
label.place(x=0, y=0, relwidth=1.0, relheight=1.0, anchor="nw")
</snippet></ROW><ROW><id>13182822</id><snippet>os.wait</snippet></ROW><ROW><id>13182822</id><snippet>procs = [subprocess.Popen(cmd) for cmd in (p1,p2)]
pid, _ = os.wait()
for p in procs:
    if p.pid != pid:
        p.kill()
</snippet></ROW><ROW><id>13182827</id><snippet># Create circle mask
convert -size 200x200 xc:white \
        -draw 'circle 100,100 60,60' \
        -blur 0x10 \
         circle.jpg
# Apply effect
composite circle.jpg me.jpg -displace 15x15 me_circle.jpg
</snippet></ROW><ROW><id>13182827</id><snippet># Create mask with text
convert -size 200x200 \
        -font Helvetica -pointsize 52 \
        -background white \
        -fill black label:'Stack\nOverflow' \
        -distort Arc 360 \
         font.jpg
# Apply effect 
composite font.jpg me.jpg -displace 15x15 me_font.jpg
</snippet></ROW><ROW><id>13182866</id><snippet>class</snippet></ROW><ROW><id>13182866</id><snippet># factorial :: Int -&gt; Int
def factorial(n):
    return product(down(n))

# product :: [Int] -&gt; Int
def product(arr):
    if len(arr) == 0: return 1
    a, ar = arr[0], arr[1:]
    return a * product(ar)

# down :: Int -&gt; [Int]
def down(n):
    if n == 0: return []
    return [n] + down(n - 1)
</snippet></ROW><ROW><id>13182866</id><snippet>reduce</snippet></ROW><ROW><id>13183439</id><snippet>try:
    People.objects.get(id=my_id)
except People.DoesNotExist:
    send_notification_to_add_that_id(my_id)
</snippet></ROW><ROW><id>13183439</id><snippet>people = People.objects.filter(id=my_id)
if people.exists():
    person = people[0]
</snippet></ROW><ROW><id>13183439</id><snippet>filter</snippet></ROW><ROW><id>13183439</id><snippet>QuerySet</snippet></ROW><ROW><id>13183439</id><snippet>Person</snippet></ROW><ROW><id>13183439</id><snippet>People</snippet></ROW><ROW><id>13183619</id><snippet>pip</snippet></ROW><ROW><id>13183619</id><snippet>PATH</snippet></ROW><ROW><id>13183619</id><snippet>pip-2.6</snippet></ROW><ROW><id>13183619</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/bin/
</snippet></ROW><ROW><id>13183619</id><snippet>PATH</snippet></ROW><ROW><id>13183619</id><snippet>export</snippet></ROW><ROW><id>13183619</id><snippet>setenv</snippet></ROW><ROW><id>13183619</id><snippet>~/.bashrc</snippet></ROW><ROW><id>13183619</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>13183641</id><snippet>clean</snippet></ROW><ROW><id>13183641</id><snippet>class CustomForm(forms.Form):
    custom_field = CustomField()

    def clean(self):
        cleaned_data = super(CustomForm, self).clean()
        custom_field = cleaned_data.get("custom_field")
        ...
</snippet></ROW><ROW><id>13183641</id><snippet>clean</snippet></ROW><ROW><id>13183641</id><snippet>Field.clean()</snippet></ROW><ROW><id>13183641</id><snippet>clean_&lt;fieldname&gt;()</snippet></ROW><ROW><id>13183641</id><snippet>Form.clean()</snippet></ROW><ROW><id>13183641</id><snippet>cleaned_data</snippet></ROW><ROW><id>13183871</id><snippet>Canvas.find_all</snippet></ROW><ROW><id>13183871</id><snippet>in</snippet></ROW><ROW><id>13183871</id><snippet>if item in my_canvas.find_all():
   my_canvas.delete(item)
else:
   print("Item not on canvas")
</snippet></ROW><ROW><id>13184004</id><snippet>def kbin(l, k, ordered=True):
    """
    Return sequence ``l`` partitioned into ``k`` bins.

    Examples
    ========

    The default is to give the items in the same order, but grouped
    into k partitions:

    &gt;&gt;&gt; for p in kbin(range(5), 2):
    ...     print p
    ...
    [[0], [1, 2, 3, 4]]
    [[0, 1], [2, 3, 4]]
    [[0, 1, 2], [3, 4]]
    [[0, 1, 2, 3], [4]]

    Setting ``ordered`` to None means that the order of the elements in
    the bins is irrelevant and the order of the bins is irrelevant. Though
    they are returned in a canonical order as lists of lists, all lists
    can be thought of as sets.

    &gt;&gt;&gt; for p in kbin(range(3), 2, ordered=None):
    ...     print p
    ...
    [[0, 1], [2]]
    [[0], [1, 2]]
    [[0, 2], [1]]

    """
    from sympy.utilities.iterables import (
        permutations, multiset_partitions, partitions)

    def partition(lista, bins):
        #  EnricoGiampieri's partition generator from
        #  http://stackoverflow.com/questions/13131491/
        #  partition-n-items-into-k-bins-in-python-lazily
        if len(lista) == 1 or bins == 1:
            yield [lista]
        elif len(lista) &gt; 1 and bins &gt; 1:
            for i in range(1, len(lista)):
                for part in partition(lista[i:], bins - 1):
                    if len([lista[:i]] + part) == bins:
                        yield [lista[:i]] + part
    if ordered:
        for p in partition(l, k):
            yield p
    else:
        for p in multiset_partitions(l, k):
            yield p
</snippet></ROW><ROW><id>13184009</id><snippet>str.find</snippet></ROW><ROW><id>13184009</id><snippet>def findStrAfterStr(myString, searchText, afterText):
    after_index = myString.index(afterText)
    return myString.find(searchText, after_index)
</snippet></ROW><ROW><id>13184009</id><snippet>import re

def findStrAfterStr(myString, searchText, afterText):
    pattern = "{0}.*?({1})".format(re.escape(afterText), re.escape(searchText))
    match = re.search(pattern, myString)
    return match.start(1) if match else -1
</snippet></ROW><ROW><id>13184109</id><snippet>height = input("Please enter the tree height : ")
height1 = height
trunk = height/3
spacevar = str(" ")

for i in range(0,height):
    print spacevar*(height-1)+"*"*(((i+1)*2)-1)
    height = height-1
for p in range (0,trunk):
    print spacevar*(height1-1)+"*"
</snippet></ROW><ROW><id>13184117</id><snippet>from threading import Thread, Event

class Repeat(Thread):
    def __init__(self,delay,function,*args,**kwargs):
        Thread.__init__(self)
        self.abort = Event()
        self.delay = delay
        self.args = args
        self.kwargs = kwargs
        self.function = function
    def stop(self):
        self.abort.set()
    def run(self):
        while not self.abort.isSet():
            self.function(*self.args,**self.kwargs)
            self.abort.wait(self.delay)
</snippet></ROW><ROW><id>13184117</id><snippet>from time import sleep
def do_work(foo):
    print "busy", foo
r = Repeat(1,do_work,3.14) # execute do_work(3.14) every second
r.start() # start the thread
sleep(5)  # let this demo run for 5s
r.stop()  # tell the thread to wake up and stop
r.join()  # don't forget to .join() before your script ends
</snippet></ROW><ROW><id>13184173</id><snippet>use Test::Parser::Sar;
use JSON::Any;

my $parser = Test::Parser::Sar-&gt;new;
$parser-&gt;parse($sar_text)
   or die $parser-&gt;error(), "\n";

my $json = JSON::Any-&gt;new;
print $json-&gt;to_json($parser-&gt;data);
</snippet></ROW><ROW><id>13184220</id><snippet>requests/__init__.py</snippet></ROW><ROW><id>13184220</id><snippet>game/core.py</snippet></ROW><ROW><id>13184220</id><snippet>requests/exceptions.py</snippet></ROW><ROW><id>13184220</id><snippet>requests/__init__.py</snippet></ROW><ROW><id>13184220</id><snippet>from module import *</snippet></ROW><ROW><id>13184220</id><snippet>*</snippet></ROW><ROW><id>13184220</id><snippet>game/game.py</snippet></ROW><ROW><id>13184220</id><snippet>game/core.py</snippet></ROW><ROW><id>13184220</id><snippet>game/exceptions.py</snippet></ROW><ROW><id>13184220</id><snippet>game/__init__.py</snippet></ROW><ROW><id>13184361</id><snippet>label='left'</snippet></ROW><ROW><id>13184361</id><snippet>s.resample('Q',label='left')    

Out[57]:
2011-12-31    100
2012-03-31    200
Freq: Q-DEC
</snippet></ROW><ROW><id>13184390</id><snippet>.deleteLater()</snippet></ROW><ROW><id>13184390</id><snippet>def remRow(self, row):
    self.gridlayout.removeWidget(self.entries[row])
    self.entries[row].deleteLater()
    del self.entries[row]
</snippet></ROW><ROW><id>13184486</id><snippet>import os
print os.getenv('APPDATA')
</snippet></ROW><ROW><id>13184627</id><snippet>class Foo(object):
    def bar():
        def bar(n):
            if n == 0:
               return "bar"
            return bar(n-1)
        return bar
    bar = staticmethod(bar())
</snippet></ROW><ROW><id>13184627</id><snippet>Foo.bar</snippet></ROW><ROW><id>13184627</id><snippet>bar</snippet></ROW><ROW><id>13184627</id><snippet>Foo</snippet></ROW><ROW><id>13184627</id><snippet>bar</snippet></ROW><ROW><id>13184627</id><snippet>classmethod</snippet></ROW><ROW><id>13184639</id><snippet>#forms.py

PAYMENT_PLAN = {
    ('A', 'A'),
    ('B', 'B'),
    ('C', 'C'),
}

class SurveyForm(ModelForm):
    class Meta:
        model = Survey
        widgets = {
            'pay_plan': Select(choices=PAY_PLAN),
            ...
        }
</snippet></ROW><ROW><id>13184639</id><snippet>NameError: name 'PAY_PLAN' is not defined
</snippet></ROW><ROW><id>13184793</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13184793</id><snippet>df2</snippet></ROW><ROW><id>13184793</id><snippet>                                             a  b  c
0   ['john quincy', 'tom jones', 'jerry rice']  9  7
1  ['bob smith', 'sally ride', 'little wayne']  2  3
2                   ['seven', 'eight', 'nine']  4  0
3                  ['ten', 'eleven', 'twelve']  5  9

df1.to_csv('temp.csv')
df2 = read_csv('temp.csv')
</snippet></ROW><ROW><id>13184793</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13184793</id><snippet>import ast
fd2['a']=df2['a'].apply(lambda x: ast.literal_eval(x))
type(df2['a'][1])
</snippet></ROW><ROW><id>13184793</id><snippet>list
</snippet></ROW><ROW><id>13184824</id><snippet>if len(my_sep) &gt; 1:
    print(" the delimiter is too long")
    return None
</snippet></ROW><ROW><id>13184824</id><snippet>None</snippet></ROW><ROW><id>13184824</id><snippet>def main():
    #your main program here
    my_str = input("Enter a string to be split: ")
    my_sep = input("Enter the delimiter character: ") 
    if len(my_sep) &gt; 1:
        print(" the delimeter is too long.")
        return None
    result = # do the actual splitting code here
    return result

result = main()
print("the result is:", result)
</snippet></ROW><ROW><id>13184824</id><snippet># do the actual splitting code here</snippet></ROW><ROW><id>13184824</id><snippet>Enter a string to be split: Hello, World
Enter the delimiter character: ,
 the result is: ['Hello', ' World']

Enter a string to be split: Hello, World
Enter the delimiter character: lo
 the delimiter is too long.
 the result is: None
</snippet></ROW><ROW><id>13184995</id><snippet>line[28:-1]
</snippet></ROW><ROW><id>13184995</id><snippet>re.match(r".* '(.*)'", line).group(1)
</snippet></ROW><ROW><id>13184995</id><snippet>re.match(r"Location:\s!!python/unicode\s'(.*)'", q).group(1)
</snippet></ROW><ROW><id>13185083</id><snippet>auto_id</snippet></ROW><ROW><id>13185107</id><snippet>int</snippet></ROW><ROW><id>13185107</id><snippet>price = input("Enter Price ")
cash = input("Enter Cash ")
coins = [100, 50, 20, 10, 5, 1, 0.5]
change = cash-price
i = 0
while i&lt;len(coins):
    print int(change/coins[i]),str(" X "),coins[0+i]
    if change&gt;0:
        change = change-(int(change/coins[i])*coins[i])
    else:
        change = max(change,0)
    i=i+1
</snippet></ROW><ROW><id>13185251</id><snippet>    self.str = u'%s (%s days)' % (self.date().date(), self.no_days())
    self.trigger = trigger
</snippet></ROW><ROW><id>13185251</id><snippet>    self.trigger = trigger
    self.str = u'%s (%s days)' % (self.date().date(), self.no_days())
</snippet></ROW><ROW><id>13185251</id><snippet>no_days</snippet></ROW><ROW><id>13185251</id><snippet>self.trigger</snippet></ROW><ROW><id>13185251</id><snippet>no_days</snippet></ROW><ROW><id>13185251</id><snippet>self.trigger</snippet></ROW><ROW><id>13185251</id><snippet>if self.trigger:
    if days &lt; self.trigger:
</snippet></ROW><ROW><id>13185700</id><snippet>default</snippet></ROW><ROW><id>13185700</id><snippet>from sqlalchemy.sql import func

def maxnumber_for_threadid(context):
    return post_table.select([func.max(post_table.c.number)]).where(post_table.c.thread_id==context.current_parameters['thread_id'])
</snippet></ROW><ROW><id>13185700</id><snippet>context</snippet></ROW><ROW><id>13185700</id><snippet>number</snippet></ROW><ROW><id>13185700</id><snippet>thread_id</snippet></ROW><ROW><id>13185700</id><snippet>BEGIN TRANSACTION;
SELECT MAX(number)+1 FROM posts WHERE thread_id=? FOR UPDATE;
INSERT INTO posts (thread_id, number) VALUES (?, ?); -- number is from previous query
COMMIT;
</snippet></ROW><ROW><id>13185700</id><snippet>FOR UPDATE</snippet></ROW><ROW><id>13185700</id><snippet>number</snippet></ROW><ROW><id>13186222</id><snippet>bar.py</snippet></ROW><ROW><id>13186222</id><snippet>import foo</snippet></ROW><ROW><id>13186222</id><snippet>foo.func_in_foo()</snippet></ROW><ROW><id>13186222</id><snippet>from foo import func_in_foo</snippet></ROW><ROW><id>13186274</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; 
&gt;&gt;&gt; special = set(string.punctuation + string.whitespace)
&gt;&gt;&gt; s = "One two  three    tab\ttabandspace\t end"
&gt;&gt;&gt; 
&gt;&gt;&gt; split_combined = [''.join(g) for k, g in groupby(s, lambda c: c in special)]
&gt;&gt;&gt; split_combined
['One', ' ', 'two', '  ', 'three', '    ', 'tab', '\t', 'tabandspace', '\t ', 'end']
&gt;&gt;&gt; split_separated = [''.join(g) for k, g in groupby(s, lambda c: c if c in special else False)]
&gt;&gt;&gt; split_separated
['One', ' ', 'two', '  ', 'three', '    ', 'tab', '\t', 'tabandspace', '\t', ' ', 'end']
</snippet></ROW><ROW><id>13186274</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>13186274</id><snippet>.get</snippet></ROW><ROW><id>13186274</id><snippet>lambda</snippet></ROW><ROW><id>13186274</id><snippet>groupby</snippet></ROW><ROW><id>13186274</id><snippet>&gt;&gt;&gt; groupby("sentence", lambda c: c in 'nt')
&lt;itertools.groupby object at 0x9805af4&gt;
&gt;&gt;&gt; [(k, list(g)) for k,g in groupby("sentence", lambda c: c in 'nt')]
[(False, ['s', 'e']), (True, ['n', 't']), (False, ['e']), (True, ['n']), (False, ['c', 'e'])]
</snippet></ROW><ROW><id>13186274</id><snippet>&gt;&gt;&gt; special = dict.fromkeys(string.punctuation + string.whitespace, True)
&gt;&gt;&gt; s = "One two  three    tab\ttabandspace\t end"
&gt;&gt;&gt; [''.join(g) for k,g in groupby(s, special.get)]
['One', ' ', 'two', '  ', 'three', '    ', 'tab', '\t', 'tabandspace', '\t ', 'end']
</snippet></ROW><ROW><id>13186274</id><snippet>.get</snippet></ROW><ROW><id>13186274</id><snippet>None</snippet></ROW><ROW><id>13186474</id><snippet>(require 'cl)
(setq mylist '("foo" "bar" "baz" "qux" "frobnitz"))
(subseq mylist 1 4)
;; ("bar" "baz" "qux")
</snippet></ROW><ROW><id>13186493</id><snippet>$</snippet></ROW><ROW><id>13186493</id><snippet>In [33]: s = 'abcde'

In [34]: for c in 'aeiou':
   ....:     s = s.replace(c, '$')
   ....:
   ....:

In [35]: s
Out[35]: '$bcd$'
</snippet></ROW><ROW><id>13186493</id><snippet>In [6]: s = 'abcde'

In [7]: replace = ''

In [8]: for c in s:
   ...:     if c not in 'aeiou':
   ...:         replace += c
   ...:
   ...:

In [9]: for c in replace:
   ...:     s = s.replace(c, '$')
   ...:
   ...:

In [10]: s
Out[10]: 'a$$$e'
</snippet></ROW><ROW><id>13186498</id><snippet>file_name = files.blobstore.create(mime_type='image/png',_blobinfo_uploaded_filename=file_name_from_url)
</snippet></ROW><ROW><id>13186563</id><snippet>def bar():  return 1
mydct = {'foo': bar}
</snippet></ROW><ROW><id>13186563</id><snippet>mydct['foo']()
</snippet></ROW><ROW><id>13186629</id><snippet>manage.py</snippet></ROW><ROW><id>13186629</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>13186629</id><snippet>manage.py</snippet></ROW><ROW><id>13186629</id><snippet>project.settings</snippet></ROW><ROW><id>13186629</id><snippet>import project.settings</snippet></ROW><ROW><id>13186707</id><snippet>class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self,None)
        self.textCtrl = wx.TextCtrl(self) # create with Frame as parent
        self.textCtrl = None # has no effect on the TextCtrl
</snippet></ROW><ROW><id>13186707</id><snippet>self.textCtrl.Destroy()
</snippet></ROW><ROW><id>13186707</id><snippet>self.DestroyChildren()
</snippet></ROW><ROW><id>13186852</id><snippet>$ python2.5 -c 'import datetime; print(datetime.datetime.min - datetime.timedelta(days=2))'
0001-00-255 00:00:00
$ python2.6 -c 'import datetime; print(datetime.datetime.min - datetime.timedelta(days=2))'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
OverflowError: date value out of range
$ python2.7 -c 'import datetime; print(datetime.datetime.min - datetime.timedelta(days=2))'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
OverflowError: date value out of range
$ python3.3 -c 'import datetime; print(datetime.datetime.min - datetime.timedelta(days=2))'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
OverflowError: date value out of range
</snippet></ROW><ROW><id>13186913</id><snippet>groupby(..., lambda x: my_normal_function(x, other, arguments))
</snippet></ROW><ROW><id>13186946</id><snippet>from poly import Polynomial as p
from math import exp,factorial

def get_input(n):
    ''' get n numbers from stdin '''
    entered = list()
    for i in range(n):
        print 'input number '
    entered.append(raw_input())
    return entered

def some_input():
    return [[2,3,4],[4,3,2]]



get input from cmd line                                                                                                                                   
n = 3                                                                                                                                                     
a = get_input(n)                                                                                                                                          
b = get_input(n)                                                                                                                                          


#a,b = some_input()

ap = p(a)
bp = p(b)


print 'entered : ',a,b

c = ap+bp

print 'a + b = ',c

print exp(3)

x = ap
print x

sum = p([0])
for k in range(1,5):
    el = x
    for j in range(1,k):
        el  el * x
        print 'el: ',el
    if el!=None and sum!=None:
        sum = sum + el
        print 'sum ',sum
</snippet></ROW><ROW><id>13186946</id><snippet>entered :  [2, 3, 4] [4, 3, 2]
a + b =  6*1 + 6*x + 6*x^2
20.0855369232
2*1 + 3*x + 4*x^2
sum  2*1 + 3*x + 4*x^2
el:  4*1 + 12*x + 25*x^2 + 24*x^3 + 16*x^4
sum  6*1 + 15*x + 29*x^2 + 24*x^3 + 16*x^4
el:  4*1 + 12*x + 25*x^2 + 24*x^3 + 16*x^4
el:  8*1 + 36*x + 102*x^2 + 171*x^3 + 204*x^4 + 144*x^5 + 64*x^6
sum  14*1 + 51*x + 131*x^2 + 195*x^3 + 220*x^4 + 144*x^5 + 64*x^6
el:  4*1 + 12*x + 25*x^2 + 24*x^3 + 16*x^4
el:  8*1 + 36*x + 102*x^2 + 171*x^3 + 204*x^4 + 144*x^5 + 64*x^6
el:  16*1 + 96*x + 344*x^2 + 792*x^3 + 1329*x^4 + 1584*x^5 + 1376*x^6 + 768*x^7 + 256*x^8
sum  30*1 + 147*x + 475*x^2 + 987*x^3 + 1549*x^4 + 1728*x^5 + 1440*x^6 + 768*x^7 + 256*x^8
</snippet></ROW><ROW><id>13187017</id><snippet>df1 = DataFrame({'a':a})
df2 = DataFrame({'aa':aa})
df3 = DataFrame({'apol':apol})
df=df1.append([df2,df3]).sort_index()
print df.resample('Q-APR',loffset='-1m').T
</snippet></ROW><ROW><id>13187017</id><snippet>      2011-09-30  2011-12-31  2012-03-31
a           1728        1635        1733
aa          6419        5989        6006
apol        1100        1179         969
</snippet></ROW><ROW><id>13187062</id><snippet>id_triangle = lambda a, b, c: {0: 'scalene', 1: 'isoceles', 3: 'equilateral'}\
                              [(a == b) + (a == c) + (b == c)]
</snippet></ROW><ROW><id>13187062</id><snippet>print('Your triangle is %s.' % id_triangle(t1, t2, t3))
</snippet></ROW><ROW><id>13187365</id><snippet>$postdata = file_get_contents("php://input"); 
</snippet></ROW><ROW><id>13187510</id><snippet>tweepy</snippet></ROW><ROW><id>13187510</id><snippet>setup.py</snippet></ROW><ROW><id>13187510</id><snippet>requirements.txt</snippet></ROW><ROW><id>13187510</id><snippet>tweepy</snippet></ROW><ROW><id>13187510</id><snippet>tweepy</snippet></ROW><ROW><id>13187510</id><snippet>pip</snippet></ROW><ROW><id>13187596</id><snippet>def f_one(id, time):
    pass

def f_two(id, time):
    pass

d = {"blah blah":"f_one", "blah blah blah":"f_one", "otherblah","f_two"
locals()[d[str(nameid)]](id, time)
</snippet></ROW><ROW><id>13187596</id><snippet>locals()</snippet></ROW><ROW><id>13187596</id><snippet>globals()</snippet></ROW><ROW><id>13187683</id><snippet>from inspect import getmembers, isfunction, getsource

import your_module
print getmembers(your_module, isfunction)
# [('anotherfile', &lt;function anotherfile at 0x028129B0&gt;), ('ihavefile', &lt;function ihavefile at 0x027F3570&gt;)]
for name, func in getmembers(your_module, isfunction):
    print getsource(func)
</snippet></ROW><ROW><id>13187790</id><snippet>Thread</snippet></ROW><ROW><id>13187790</id><snippet>def worker(par1, par2):
    pass # do something

thread = threading.Thread(target=worker, args=("something", 0.0))
thread.start()
</snippet></ROW><ROW><id>13187948</id><snippet>.exe</snippet></ROW><ROW><id>13187948</id><snippet>.exe</snippet></ROW><ROW><id>13188112</id><snippet>from django.core.cache import cache
from UserDict import DictMixin

class LazyCachedDict(DictMixin):
    def __init__(self, key_prefix):
        self.key_prefix = key_prefix

    def __getitem__(self, name):
        return cache.get('%s:%s' % (self.key_prefix, name))

    def __setitem__(self, name, value):
        return cache.set('%s:%s' % (self.key_prefix, name), value)

    def __delitem__(self, name):
        return cache.delete('%s:%s' % (self.key_prefix, name))

    def has_key(self, name):
        return cache.has_key(name)

    def keys():
        ## Just fill the gap, as the cache object doesn't provide
        ## a method to list cache keys..
        return []
</snippet></ROW><ROW><id>13188112</id><snippet>projects_map = cache.get('projects_map')
projects_map.get('search term')
</snippet></ROW><ROW><id>13188112</id><snippet>projects_map = LazyCachedDict('projects_map')
projects_map.get('search term')
</snippet></ROW><ROW><id>13188170</id><snippet>def add(a, b):
    return a + b
</snippet></ROW><ROW><id>13188170</id><snippet>def search(myBigFancyX, myBigFancyList):

    counter = 0
    for number in myBigFancyList:
        if number == myBigFancyX:
            counter += 1
    return counter

if __name__ == "__main__":

    l = [4, 10, 4, 2, 9, 5, 4 ]
    x = int(input("Enter an element to search for in the list: "))

    occurances = search(x, l)
    if occurances == 0:
        print("element does not occur in the list")
    else:
        print("the number of occurrences in L: ", occurances)
</snippet></ROW><ROW><id>13188275</id><snippet>str()</snippet></ROW><ROW><id>13188275</id><snippet>replace()</snippet></ROW><ROW><id>13188275</id><snippet>u</snippet></ROW><ROW><id>13188275</id><snippet>\r\n</snippet></ROW><ROW><id>13188275</id><snippet>In [21]: strs=u'\r\nFoo\r\nBar'

In [22]: str(strs).replace("\r\n","")
Out[22]: 'FooBar'
</snippet></ROW><ROW><id>13188275</id><snippet>replace()</snippet></ROW><ROW><id>13188275</id><snippet>\r\n</snippet></ROW><ROW><id>13188275</id><snippet>In [23]: strs.replace("\r\n","")
Out[23]: u'FooBar'
</snippet></ROW><ROW><id>13188485</id><snippet>b = [el[0] for el in a]
</snippet></ROW><ROW><id>13188485</id><snippet>from operator import itemgetter
b = map(itemgetter(0), a)
</snippet></ROW><ROW><id>13188485</id><snippet>import numpy as np
a = [ [1,2], [2,9], [3,7] ]
na = np.array(a)
print na[:,0]
# array([1, 2, 3])
</snippet></ROW><ROW><id>13188485</id><snippet>zip</snippet></ROW><ROW><id>13188485</id><snippet>print zip(*a)[0]
</snippet></ROW><ROW><id>13188842</id><snippet>import colorsys
from PIL import Image

def recolor(im, r, g, b):
    h, l, s = colorsys.rgb_to_hls(r/255.0, g/255.0, b/255.0)
    result = im.copy()
    pix = result.load()
    for y in range(result.size[1]):
        for x in range(result.size[0]):
            r2, g2, b2, a = pix[x, y]
            h2, l2, s2 = colorsys.rgb_to_hls(r2/255.0, g2/255.0, b2/255.0)
            r3, g3, b3 = colorsys.hls_to_rgb(h, l2, s)
            pix[x, y] = (int(r3*255.99), int(g3*255.99), int(b3*255.99), a)
    return result

recolor(im_flag, 255, 0, 0).save(r'c:\temp\red_flag.png')
</snippet></ROW><ROW><id>13189070</id><snippet>os.kill</snippet></ROW><ROW><id>13189070</id><snippet>webbrowser</snippet></ROW><ROW><id>13189070</id><snippet>subprocess</snippet></ROW><ROW><id>13189070</id><snippet>import time
import subprocess

p = subprocess.Popen(["firefox", "http://www.facebook.com"])
time.sleep(600)
p.kill()
</snippet></ROW><ROW><id>13189083</id><snippet>process.wait()</snippet></ROW><ROW><id>13189083</id><snippet>threading.Event</snippet></ROW><ROW><id>13189083</id><snippet>#!/usr/bin/env python
import shlex
import subprocess
import threading


def kill_all(processes):
    for p in processes:
        try:
            if p.poll() is None:
                p.kill()  # note: it may leave orphans
                p.wait()
        except:  # pylint: disable=W0702
            pass  # ignore whatever it is (including SIGINT)


def wait(process, exit_event):
    try:
        process.wait()
    finally:
        exit_event.set()  # signal the process has exited


def main():
    # start processes
    cmd = "/bin/bash -c 'echo start {0}; sleep {0}; echo done {0}'".format
    processes = []
    for i in range(1, 3):
        try:
            processes.append(subprocess.Popen(shlex.split(cmd(i))))
        except EnvironmentError:
            kill_all(processes)  # failed to start some process; kill'em all
            return 1  # error

    # wait until at least one process finishes
    exit_event = threading.Event()
    for p in processes:
        threading.Thread(target=wait, args=(p, exit_event)).start()

    exit_event.wait()
    kill_all(processes)

if __name__ == "__main__":
    import sys
    sys.exit(main())
</snippet></ROW><ROW><id>13189083</id><snippet>start 1
start 2
done 1
</snippet></ROW><ROW><id>13189438</id><snippet>RawJavaScriptText</snippet></ROW><ROW><id>13189438</id><snippet>dumps</snippet></ROW><ROW><id>13189438</id><snippet>&gt;&gt;&gt; data = {'foo': '@@x@@'}
&gt;&gt;&gt; print json.dumps(data)
{"foo": "@@x@@"}
&gt;&gt;&gt; print json.dumps(data).replace('"@@x@@"', 'some_variable_name')
{"foo": some_variable_name}
</snippet></ROW><ROW><id>13189619</id><snippet>def main():
    # When you assign variables here, make sure you are putting the int outside
    # You also don't need to reference the variable twice
    a = int(input("enter a number: "))
    b = int(input("enter a number: "))

    # Here is where your call goes (try to avoid using variable names that
    # are the same as Python keywords, such as sum)
    s = my_sum(a, b)

    print(" result: ", s)
</snippet></ROW><ROW><id>13189619</id><snippet>def my_sum(a, b):
    return a + b
</snippet></ROW><ROW><id>13189619</id><snippet>s = my_sum(a, b)</snippet></ROW><ROW><id>13189619</id><snippet>s</snippet></ROW><ROW><id>13189619</id><snippet>def main()</snippet></ROW><ROW><id>13189619</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13189630</id><snippet>import timeit
import datetime
def getList(size):
    s=[]
    for i in range(size):
        s.append(str(i))
    return s

def getSubList(size):
    s=[]
    for i in range(size/2):
        s.append(str(i))
    return s

def testSet(size):
    s=set(getList(size))
    sublist=set(getSubList(size))
    list(s&amp;sublist)


def testIntersection(size):
    s=set(getList(size))
    sublist=set(getSubList(size))
    list(s.intersection(sublist))

def bruteForce(size):
    s=getList(size)
    sublist=getSubList(size)
    final=[]
    for elem in sublist:
        try:
            if s.index(elem)!=-1:
                final.append(elem)
        except ValueError:
            pass
currentsize=1000
for i in range(3):
    t1=datetime.datetime.now()
    testSet(1000)
    t2=datetime.datetime.now()
    testIntersection(currentsize)
    t3=datetime.datetime.now()
    bruteForce(currentsize)
    t4=datetime.datetime.now()
    print "Size="+str(currentsize)
    print "setoptime:"+str(t2-t1)
    print "setintersectiontime:"+str(t3-t2)
    print "bruteforcetime:"+str(t4-t3)
    currentsize=currentsize*10
</snippet></ROW><ROW><id>13189667</id><snippet>params</snippet></ROW><ROW><id>13189667</id><snippet>raw()</snippet></ROW><ROW><id>13189667</id><snippet>var_id = 10
var_city = 20
var_state = 30

mymodel.objects.raw('''SELECT * from users 
                       where id = %s and
                       city = %s and 
                       state = %s ''', [var_id, var_city, var_state])
</snippet></ROW><ROW><id>13189667</id><snippet>params</snippet></ROW><ROW><id>13189667</id><snippet>%s</snippet></ROW><ROW><id>13189667</id><snippet>&gt;&gt;&gt; query = 'SELECT * FROM myapp_person WHERE last_name = %s' % lname
&gt;&gt;&gt; Person.objects.raw(query)
</snippet></ROW><ROW><id>13189924</id><snippet>&lt;enclosure</snippet></ROW><ROW><id>13189924</id><snippet>&lt;link rel="enclosure"</snippet></ROW><ROW><id>13189924</id><snippet>&lt;media:content xmlns:media="http://search.yahoo.com/mrss/"</snippet></ROW><ROW><id>13189924</id><snippet>&lt;feedburner:origEnclosureLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"</snippet></ROW><ROW><id>13190690</id><snippet>readlines()</snippet></ROW><ROW><id>13190690</id><snippet>In [19]: with open('codes.txt', 'r') as f:
   ....:     contents = f.read().split(';')
   ....:
   ....:

In [20]: contents
Out[20]:
['TKF6J-KXP6V-F499V-Q9XPC-7J6TZ',
 'J9YCV-D4TH6-WWWWV-F2RM7-F63XZ',
 'GXKCC-QDT34-3JRY4-TWKHX-R763Z',
 '']
</snippet></ROW><ROW><id>13190690</id><snippet>string</snippet></ROW><ROW><id>13190708</id><snippet>for character in the string:
    for target in charPositionToFind:
        test if character == target
</snippet></ROW><ROW><id>13190708</id><snippet>for target in charPositionToFind:
    for character in the string:
        test if character == target
</snippet></ROW><ROW><id>13190708</id><snippet>string = "ABCDEYYFGHIAAJKVLMNOPDCQRSTAAVVVUVWXYZ"
charPositionToFind = 'ADVY'
target_set = set(charPositionToFind)
position = [index for index, char in enumerate(string) if char in target_set]
</snippet></ROW><ROW><id>13191098</id><snippet>request.query_string</snippet></ROW><ROW><id>13191520</id><snippet>.PY</snippet></ROW><ROW><id>13191520</id><snippet>PATHEXT</snippet></ROW><ROW><id>13191520</id><snippet>.\hello.py</snippet></ROW><ROW><id>13191520</id><snippet>.\hello</snippet></ROW><ROW><id>13191520</id><snippet>ShellExecute</snippet></ROW><ROW><id>13191520</id><snippet>Python.File</snippet></ROW><ROW><id>13191520</id><snippet>ftype Python.File</snippet></ROW><ROW><id>13191520</id><snippet>$env:pathext = $env:pathext + ";.PY"
</snippet></ROW><ROW><id>13192100</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
print [a["href"] for a in soup.select('h3.r a')]
</snippet></ROW><ROW><id>13192171</id><snippet>.gitignore</snippet></ROW><ROW><id>13192171</id><snippet>django</snippet></ROW><ROW><id>13192396</id><snippet>OrderedDict</snippet></ROW><ROW><id>13192396</id><snippet>OrderedDict</snippet></ROW><ROW><id>13192396</id><snippet>dict</snippet></ROW><ROW><id>13192396</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d=OrderedDict()
&gt;&gt;&gt; d["key1"]="foo"
&gt;&gt;&gt; d["key2"]="bar"
&gt;&gt;&gt; d
OrderedDict([('key1', 'foo'), ('key2', 'bar')])
</snippet></ROW><ROW><id>13192396</id><snippet>OrderedDict</snippet></ROW><ROW><id>13193113</id><snippet>shutil.copy</snippet></ROW><ROW><id>13193113</id><snippet>file</snippet></ROW><ROW><id>13193113</id><snippet>shutil.copy(fullpath, dest)
</snippet></ROW><ROW><id>13193218</id><snippet>line = '::1 - - [29/Oct/2012:15:20:15 +0530] "GET /phpMyAdmin/ HTTP/1.1" 200 6961 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.77 Safari/537.1"'
</snippet></ROW><ROW><id>13193218</id><snippet>lElements = line.split('[')
lElements = lElements[0] + lElements[1].split(']')
</snippet></ROW><ROW><id>13193218</id><snippet>lElements[0] = '::1 - - ' #IPv6 localhost = ::1
lElements[1] = '29/Oct/2012:15:20:15 +0530'
lElements[2] = ' "GET /phpMyAdmin/ HTTP/1.1" 200 6961 "-" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.77 Safari/537.1"'
</snippet></ROW><ROW><id>13193218</id><snippet>ip_address = lElements[0].split('-')[0] # I'm just throwing away those dashes. are they important?
http_info = lElements[2].split('"')[1] # = 'GET /phpMyAdmin/ HTTP/1.1'
url = http_info.split()[1]  # = '/phpMyAdmin/'

"""
so now we have the ip address and the url. the next bit of code updates a dictionary dAccessCount as the number of url accesses increases...
dAccessCount should be set to {} initially
"""

if ip_address in dAccessCount:
    if url in dAccessCount[ip_address]:
        dAccessCount[ip_address][url]+=1
    else:
        dAccessCount[ip_address][url]=1
else:
    dAccessCount[ip_address] = {url:1}
</snippet></ROW><ROW><id>13193246</id><snippet>job_server.submit(t.run)</snippet></ROW><ROW><id>13193246</id><snippet>t</snippet></ROW><ROW><id>13193246</id><snippet>run</snippet></ROW><ROW><id>13193491</id><snippet>self.scaleText[i]</snippet></ROW><ROW><id>13193491</id><snippet>scaleText[i]</snippet></ROW><ROW><id>13193491</id><snippet>self . scaleText = self . appendValue( 4, DoubleVar( ) )
</snippet></ROW><ROW><id>13193491</id><snippet>DoubleVar</snippet></ROW><ROW><id>13193491</id><snippet>appendValue()</snippet></ROW><ROW><id>13193491</id><snippet>Tkinter</snippet></ROW><ROW><id>13193573</id><snippet>threading</snippet></ROW><ROW><id>13193573</id><snippet>threading.currentThread()</snippet></ROW><ROW><id>13193573</id><snippet>_after_fork</snippet></ROW><ROW><id>13193573</id><snippet>os.fork()</snippet></ROW><ROW><id>13193573</id><snippet>threading._DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>__stop</snippet></ROW><ROW><id>13193573</id><snippet>import threading
threading._DummyThread._Thread__stop = lambda x: 42
</snippet></ROW><ROW><id>13193573</id><snippet>threading</snippet></ROW><ROW><id>13193573</id><snippet>threading.currentThread()</snippet></ROW><ROW><id>13193573</id><snippet>Thread</snippet></ROW><ROW><id>13193573</id><snippet>threading._DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>Thread</snippet></ROW><ROW><id>13193573</id><snippet>Thread</snippet></ROW><ROW><id>13193573</id><snippet>self.__block</snippet></ROW><ROW><id>13193573</id><snippet>Thread</snippet></ROW><ROW><id>13193573</id><snippet>self.__block</snippet></ROW><ROW><id>13193573</id><snippet>_DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>_DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>self.__block</snippet></ROW><ROW><id>13193573</id><snippet>threading._after_fork</snippet></ROW><ROW><id>13193573</id><snippet>Thread.__stop</snippet></ROW><ROW><id>13193573</id><snippet>Thread.__stop</snippet></ROW><ROW><id>13193573</id><snippet>__block</snippet></ROW><ROW><id>13193573</id><snippet>_DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>Thread.__stop</snippet></ROW><ROW><id>13193573</id><snippet>__block</snippet></ROW><ROW><id>13193573</id><snippet>__stop</snippet></ROW><ROW><id>13193573</id><snippet>_stop</snippet></ROW><ROW><id>13193573</id><snippet>_DummyThread</snippet></ROW><ROW><id>13193573</id><snippet>_stop</snippet></ROW><ROW><id>13193931</id><snippet> if one of A or B is empty -&gt; return the other string
</snippet></ROW><ROW><id>13193931</id><snippet>   split each of A, B into the first char and the rest (eg. XYZ =&gt; X, YZ)
   (recursive call) S = interlaced version of rest(A),rest(B)
   return first-char(A) + first-char(B) + S
</snippet></ROW><ROW><id>13194543</id><snippet>public class SimpleTable {
    private final List&lt;RandomAccessFile&gt; files = new ArrayList&lt;RandomAccessFile&gt;();
    private final List&lt;FloatBuffer&gt; buffers = new ArrayList&lt;FloatBuffer&gt;();
    private final File baseDir;
    private final int rows;

    private SimpleTable(File baseDir, int rows) {
        this.baseDir = baseDir;
        this.rows = rows;
    }

    public static SimpleTable create(String baseName, int rows) throws IOException {
        File baseDir = new File(baseName);
        if (!baseDir.mkdirs()) throw new IOException("Failed to create " + baseName);
        PrintWriter pw = new PrintWriter(baseName + "/rows");
        pw.println(rows);
        pw.close();
        return new SimpleTable(baseDir, rows);
    }

    public static SimpleTable load(String baseName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(baseName + "/rows"));
        int rows = Integer.parseInt(br.readLine());
        br.close();
        File baseDir = new File(baseName);
        SimpleTable table = new SimpleTable(baseDir, rows);
        File[] files = baseDir.listFiles();
        Arrays.sort(files);
        for (File file : files) {
            if (!file.getName().endsWith(".float")) continue;
            table.addColumnForFile(file);
        }
        return table;
    }

    private FloatBuffer addColumnForFile(File file) throws IOException {
        RandomAccessFile rw = new RandomAccessFile(file, "rw");
        MappedByteBuffer mbb = rw.getChannel().map(FileChannel.MapMode.READ_WRITE, 0, rows * 8);
        mbb.order(ByteOrder.nativeOrder());
        FloatBuffer db = mbb.asFloatBuffer();
        files.add(rw);
        buffers.add(db);
        return db;
    }

    public int rows() {
        return rows;
    }

    public int columns() {
        return buffers.size();
    }

    public FloatBuffer addColumn() throws IOException {
        return addColumnForFile(new File(baseDir, String.format("%04d.float", buffers.size())));
    }

    public FloatBuffer getColumn(int n) {
        return buffers.get(n);
    }

    public void close() throws IOException {
        for (RandomAccessFile file : files) {
            file.close();
        }
        files.clear();
        buffers.clear();
    }
}

public class SimpleTableTestMain {
    public static void main(String... args) throws IOException {
        long start = System.nanoTime();
        SimpleTable st = SimpleTable.create("test", 3 * 1000 * 1000);
        for (int i = 0; i &lt; 50; i++) {
            FloatBuffer db = st.addColumn();
            for (int j = 0; j &lt; db.capacity(); j++)
                db.put(j, i + j);
        }
        st.close();

        long mid = System.nanoTime();

        SimpleTable st2 = SimpleTable.load("test");
        for (int i = 0; i &lt; 50; i++) {
            FloatBuffer db = st2.getColumn(i);
            double sum = 0;
            for (int j = 0; j &lt; db.capacity(); j++)
                sum += db.get(j);
            assert sum &gt; 0;
        }

        long end = System.nanoTime();
        System.out.printf("Took %.3f seconds to write and %.3f seconds to read %,d rows and %,d columns%n",
                (mid - start) / 1e9, (end - mid) / 1e9, st2.rows(), st2.columns());
        st2.close();
    }
}
</snippet></ROW><ROW><id>13194543</id><snippet>Took 2.070 seconds to write and 2.206 seconds to read 3,000,000 rows and 50 columns
</snippet></ROW><ROW><id>13194629</id><snippet>In [44]: stringy[stringy.rfind('.'):stringy.rfind('.')+4]
Out[44]: '.pdf'
</snippet></ROW><ROW><id>13194665</id><snippet>class AnonymousBlogpostHandler(AnonymousBaseHandler):
    model = Blogpost
    fields = ('title', 'content')
</snippet></ROW><ROW><id>13194665</id><snippet>model</snippet></ROW><ROW><id>13194702</id><snippet>#!/usr/bin/python
import os.path

def lvl_down(path):
    return os.path.split(path)[0]

def lvl_up(path, up_dir):
    return os.path.join(path, updir)

print(lvl_down('a/b/c'))   # prints a/b
print(lvl_up('a/b/c','d')) # prints a/b/c/d
</snippet></ROW><ROW><id>13194957</id><snippet>$ rm -r VIRTUALENVDIR
$ virtualenv VIRTUALENVDIR
$ . VIRTUALENVDIR/bin/activate

# then pip install any required packages, if your project has a requirements.txt file,
# this is simply:
$ pip install -r requirements.txt

# otherwise, you will have to install each package
$ pip install packagename
$ pip install packagename==version
</snippet></ROW><ROW><id>13195348</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; force_decimal = partial(int, base=10)
&gt;&gt;&gt; force_decimal("01")
1
&gt;&gt;&gt; force_decimal("0102301")
102301
</snippet></ROW><ROW><id>13195781</id><snippet>1 + (1)
"foo" + ("bar")
</snippet></ROW><ROW><id>13195781</id><snippet>def foo(arg):
    pass

foo("bar")
</snippet></ROW><ROW><id>13195781</id><snippet>print</snippet></ROW><ROW><id>13195781</id><snippet>a = 1
print("foobar")
print(a)
</snippet></ROW><ROW><id>13195781</id><snippet>a = 1
print "foobar"
print a
</snippet></ROW><ROW><id>13195781</id><snippet>print</snippet></ROW><ROW><id>13195781</id><snippet>print</snippet></ROW><ROW><id>13195781</id><snippet>print (1,2)
</snippet></ROW><ROW><id>13195781</id><snippet>(1,2)</snippet></ROW><ROW><id>13195781</id><snippet>a = (1,2)
print a 
</snippet></ROW><ROW><id>13195781</id><snippet>print(1,2)  #py2x equivalent:  print 1,2
</snippet></ROW><ROW><id>13195781</id><snippet>print('{0} {1}'.format(1,2))
</snippet></ROW><ROW><id>13195781</id><snippet>print('%d %d'%(1,2))
</snippet></ROW><ROW><id>13195781</id><snippet>2to3</snippet></ROW><ROW><id>13195781</id><snippet>2to3</snippet></ROW><ROW><id>13196175</id><snippet>filename = sorted(os.listdir(location))[-1]
data = open(os.path.join(location, filename)).read()
</snippet></ROW><ROW><id>13196479</id><snippet>from lib.agent.errors import SomeException
</snippet></ROW><ROW><id>13196479</id><snippet>lib/agent/socket.py</snippet></ROW><ROW><id>13196479</id><snippet>lib/agent/some_agent_script.py</snippet></ROW><ROW><id>13196479</id><snippet>import socket</snippet></ROW><ROW><id>13196479</id><snippet>from __future__ import absolute_import

import .errors
</snippet></ROW><ROW><id>13196552</id><snippet>FileDialog</snippet></ROW><ROW><id>13196594</id><snippet>extent=(left, right, bottom, top)</snippet></ROW><ROW><id>13196594</id><snippet>plt.imshow</snippet></ROW><ROW><id>13196594</id><snippet>x = np.random.randn(2, 10)
y = np.ones((4, 10))
x[0] = 0  # To make it clear which side is up, etc
y[0] = -1

plt.imshow(x, extent=(0, 10, 0, 2))
plt.imshow(y, extent=(0, 10, 2, 6))
# This is necessary, else the plot gets scaled and only shows the last array
plt.ylim(0, 6)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>13196662</id><snippet>os.environ</snippet></ROW><ROW><id>13196662</id><snippet>import os
print (os.environ['PATH'])
</snippet></ROW><ROW><id>13196934</id><snippet>if item in uniq</snippet></ROW><ROW><id>13196934</id><snippet>and</snippet></ROW><ROW><id>13196934</id><snippet>False</snippet></ROW><ROW><id>13196934</id><snippet>True</snippet></ROW><ROW><id>13197136</id><snippet>txt</snippet></ROW><ROW><id>13197136</id><snippet>ann.txt.set_text('new text')
plt.draw()
</snippet></ROW><ROW><id>13197136</id><snippet>plt.draw()</snippet></ROW><ROW><id>13197448</id><snippet>re.sub(r"(?m)^.*\r(?!$)", "", text)
</snippet></ROW><ROW><id>13197448</id><snippet>(?m)</snippet></ROW><ROW><id>13197448</id><snippet>^</snippet></ROW><ROW><id>13197448</id><snippet>$</snippet></ROW><ROW><id>13197448</id><snippet>.*</snippet></ROW><ROW><id>13197448</id><snippet>^</snippet></ROW><ROW><id>13197448</id><snippet>\r</snippet></ROW><ROW><id>13197448</id><snippet>(?!$)</snippet></ROW><ROW><id>13197689</id><snippet>Collections.Counter()</snippet></ROW><ROW><id>13197689</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; strs="assassin"
&gt;&gt;&gt; Counter(strs)
Counter({'s': 4, 'a': 2, 'i': 1, 'n': 1})
</snippet></ROW><ROW><id>13197689</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13197689</id><snippet>&gt;&gt;&gt; [[k,len(list(g))] for k, g in groupby(strs)]
[['a', 1], ['s', 2], ['a', 1], ['s', 2], ['i', 1], ['n', 1]]
</snippet></ROW><ROW><id>13197769</id><snippet>$ django-admin.py startproject [your_project_name] --template=https://github.com/pinax/pinax-project-account/zipball/master 
</snippet></ROW><ROW><id>13197769</id><snippet>pip install --requirement requirements.txt
</snippet></ROW><ROW><id>13197891</id><snippet>sleep</snippet></ROW><ROW><id>13197891</id><snippet>import time

while True:
    now = time.time()            # get the time
    do_something()               # do your stuff
    elapsed = time.time() - now  # how long was it running?
    time.sleep(1.-elapsed)       # sleep accordingly so the full iteration takes 1 second
</snippet></ROW><ROW><id>13197891</id><snippet>LoopingCall</snippet></ROW><ROW><id>13197891</id><snippet>from twisted.internet import task
from twisted.internet import reactor

def do_something():
    pass # do your work here

task.LoopingCall(do_something).start(1.0)
reactor.run()
</snippet></ROW><ROW><id>13197963</id><snippet>str</snippet></ROW><ROW><id>13197963</id><snippet>string</snippet></ROW><ROW><id>13197963</id><snippet>print repr(string)</snippet></ROW><ROW><id>13197963</id><snippet>string</snippet></ROW><ROW><id>13197963</id><snippet>string</snippet></ROW><ROW><id>13197963</id><snippet>str</snippet></ROW><ROW><id>13198035</id><snippet>iter_content()</snippet></ROW><ROW><id>13198035</id><snippet>.text</snippet></ROW><ROW><id>13198035</id><snippet>.content</snippet></ROW><ROW><id>13198035</id><snippet>iter_content()</snippet></ROW><ROW><id>13198035</id><snippet>.text</snippet></ROW><ROW><id>13198035</id><snippet>from requests.compat import chardet

r = requests.get("http://www.december.com/html/demo/hello.html", prefetch=False)
peek = r.iter_content(256).next()
mime = magic.from_buffer(peek, mime=True)

if mime == "text/html":
    contents = peek + b''.join(r.iter_content(10 * 1024))
    encoding = r.encoding
    if encoding is None:
        # detect encoding
        encoding = chardet.detect(contents)['encoding']
    try:
        textcontent = str(contents, encoding, errors='replace')
    except (LookupError, TypeError):
        textcontent = str(contents, errors='replace')
    print(textcontent)
</snippet></ROW><ROW><id>13198035</id><snippet>r = requests.get("http://www.december.com/html/demo/hello.html", prefetch=False)
mime = magic.from_buffer(r.iter_content(256).next(), mime=True)

if mime == "text/html":
     print(r.requests.get("http://www.december.com/html/demo/hello.html").text)
</snippet></ROW><ROW><id>13198035</id><snippet>r = requests.get("http://www.december.com/html/demo/hello.html", prefetch=False)
peek = r.iter_content(256).next()
mime = magic.from_buffer(peek, mime=True)

if mime == "text/html":
    contents = peek + ''.join(r.iter_content(10 * 1024))
    encoding = r.encoding
    if encoding is None:
        # detect encoding
        encoding = chardet.detect(contents)['encoding']
    try:
        textcontent = unicode(contents, encoding, errors='replace')
    except (LookupError, TypeError):
        textcontent = unicode(contents, errors='replace')
    print(textcontent)
</snippet></ROW><ROW><id>13198050</id><snippet>def groupfinder(userid, request):
    user = request.db.query(User).filter_by(id=userid).first()
    if user is not None:
        # somehow get the list of sites they are members
        sites = user.allowed_sites
        return ['site:%d' % s.id for s in sites]

class SiteFactory(object):
    def __init__(self, request):
        self.request = request

    def __getitem__(self, key):
        site = self.request.db.query(Site).filter_by(id=key).first()
        if site is None:
            raise KeyError
        site.__parent__ = self
        site.__name__ = key
        site.__acl__ = [
            (Allow, 'site:%d' % site.id, 'view'),
        ]
        return site
</snippet></ROW><ROW><id>13198050</id><snippet>site</snippet></ROW><ROW><id>13198050</id><snippet>__acl__</snippet></ROW><ROW><id>13198050</id><snippet>groupfinder</snippet></ROW><ROW><id>13198050</id><snippet>request.db</snippet></ROW><ROW><id>13198050</id><snippet>def site_pregenerator(request, elements, kw):
    # request.route_url(route_name, *elements, **kw)
    from pyramid.traversal import find_interface
    # we use find_interface in case we improve our hybrid traversal process
    # to take us deeper into the hierarchy, where Site might be context.__parent__
    site = find_interface(request.context, Site)
    if site is not None:
        kw['site_id'] = site.id
    return elements, kw
</snippet></ROW><ROW><id>13198050</id><snippet>site_id</snippet></ROW><ROW><id>13198050</id><snippet>def add_site_route(config, name, pattern, **kw):
    kw['traverse'] = '/{site_id}'
    kw['factory'] = SiteFactory
    kw['pregenerator'] = site_pregenerator

    if pattern.startswith('/'):
        pattern = pattern[1:]
    config.add_route(name, '/site/{site_id}/' + pattern, **kw)

def main(global_conf, **settings):
    config = Configurator(settings=settings)

    authn_policy = AuthTktAuthenticationPolicy('seekrit', callback=groupfinder)
    config.set_authentication_policy(authn_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())

    config.add_directive(add_site_route, 'add_site_route')

    config.include(site_routes)
    config.scan()
    return config.make_wsgi_app()

def site_routes(config):
    config.add_site_route('site_users', '/user')
    config.add_site_route('site_items', '/items')
</snippet></ROW><ROW><id>13198050</id><snippet>@view_config(route_name='site_users', permission='view')
def users_view(request):
    site = request.context
</snippet></ROW><ROW><id>13198050</id><snippet>add_site_route</snippet></ROW><ROW><id>13198050</id><snippet>config</snippet></ROW><ROW><id>13198050</id><snippet>add_route</snippet></ROW><ROW><id>13198050</id><snippet>{site_id}</snippet></ROW><ROW><id>13198050</id><snippet>/{site_id}</snippet></ROW><ROW><id>13198050</id><snippet>/{site_id}</snippet></ROW><ROW><id>13198050</id><snippet>/</snippet></ROW><ROW><id>13198050</id><snippet>SiteFactory</snippet></ROW><ROW><id>13198050</id><snippet>__getitem__</snippet></ROW><ROW><id>13198050</id><snippet>{site_id}</snippet></ROW><ROW><id>13198050</id><snippet>__parent__</snippet></ROW><ROW><id>13198050</id><snippet>__name__</snippet></ROW><ROW><id>13198050</id><snippet>find_interface</snippet></ROW><ROW><id>13198050</id><snippet>__acl__</snippet></ROW><ROW><id>13198050</id><snippet>Site</snippet></ROW><ROW><id>13198050</id><snippet>route_url</snippet></ROW><ROW><id>13198050</id><snippet>request.context</snippet></ROW><ROW><id>13198050</id><snippet>site.id == 1</snippet></ROW><ROW><id>13198050</id><snippet>users_view</snippet></ROW><ROW><id>13198050</id><snippet>HTTPForbidden</snippet></ROW><ROW><id>13199255</id><snippet>[\^a]b</snippet></ROW><ROW><id>13199255</id><snippet>ab</snippet></ROW><ROW><id>13199255</id><snippet>^b</snippet></ROW><ROW><id>13199255</id><snippet>'b'</snippet></ROW><ROW><id>13199255</id><snippet>re.match()</snippet></ROW><ROW><id>13199255</id><snippet>^</snippet></ROW><ROW><id>13199255</id><snippet>\A</snippet></ROW><ROW><id>13199255</id><snippet>re.search()</snippet></ROW><ROW><id>13199255</id><snippet>(^|a)b
</snippet></ROW><ROW><id>13199255</id><snippet>'bob'</snippet></ROW><ROW><id>13199255</id><snippet>ab</snippet></ROW><ROW><id>13199255</id><snippet>'taboo'</snippet></ROW><ROW><id>13199255</id><snippet>b</snippet></ROW><ROW><id>13199255</id><snippet>a</snippet></ROW><ROW><id>13199255</id><snippet>^b|ab</snippet></ROW><ROW><id>13199255</id><snippet>b</snippet></ROW><ROW><id>13199255</id><snippet>a</snippet></ROW><ROW><id>13199255</id><snippet>x</snippet></ROW><ROW><id>13199255</id><snippet>2</snippet></ROW><ROW><id>13199255</id><snippet>5</snippet></ROW><ROW><id>13199255</id><snippet>(^|[ax25])b
</snippet></ROW><ROW><id>13199341</id><snippet>*arguments</snippet></ROW><ROW><id>13199341</id><snippet>params</snippet></ROW><ROW><id>13199341</id><snippet>order_by(*params)
</snippet></ROW><ROW><id>13199341</id><snippet>**kwargs</snippet></ROW><ROW><id>13199341</id><snippet>params = dict(a='a', b='b', c='c')
somemethod(**params)
</snippet></ROW><ROW><id>13199341</id><snippet>somemethod</snippet></ROW><ROW><id>13199341</id><snippet>a</snippet></ROW><ROW><id>13199341</id><snippet>b</snippet></ROW><ROW><id>13199341</id><snippet>c</snippet></ROW><ROW><id>13199341</id><snippet>**kw</snippet></ROW><ROW><id>13199341</id><snippet>**params</snippet></ROW><ROW><id>13199341</id><snippet>*args</snippet></ROW><ROW><id>13199586</id><snippet># at module level (not inside class or function)
finish = False
def signal_handler(signal, frame):
    global finish
    finish = True

signal.signal(signal.SIGINT, signal_handler)

# wherever you have your file downloading code (same module)
for file_ in files_to_download:
    if finish:
        break
    urllib.urlretrieve("".join(baseurl, file_), os.path.join(".", file_)) 
</snippet></ROW><ROW><id>13199592</id><snippet>viewer</snippet></ROW><ROW><id>13199592</id><snippet>class MainWindow(QtGui.QMainWindow):
        def __init__(self, parent = None):
                QtGui.QWidget.__init__(self, parent)
        .....
        def DoOpenImageViewer(self):
                self.viewer = ImageViewerMainWindow("C:\image.jpg")
                self.viewer.show()
</snippet></ROW><ROW><id>13199813</id><snippet>sorted(your_list, key=lambda x: x[1], reverse=True)
</snippet></ROW><ROW><id>13199813</id><snippet>your_list.sort(key=lambda x: x[1], reverse=True)
</snippet></ROW><ROW><id>13199813</id><snippet>reverse=True</snippet></ROW><ROW><id>13199813</id><snippet>lambda x: -x[1]</snippet></ROW><ROW><id>13199813</id><snippet>reverse</snippet></ROW><ROW><id>13199813</id><snippet>key=operator.itemgetter(1)</snippet></ROW><ROW><id>13199813</id><snippet>lambda</snippet></ROW><ROW><id>13200121</id><snippet>json.loads()</snippet></ROW><ROW><id>13200121</id><snippet>'name'</snippet></ROW><ROW><id>13200121</id><snippet>names = [city['name'] for city in data['list']]
</snippet></ROW><ROW><id>13200121</id><snippet>&gt;&gt;&gt; names
[u'Osijek', u'Visnjevac']
</snippet></ROW><ROW><id>13200121</id><snippet>data</snippet></ROW><ROW><id>13200147</id><snippet>import subprocess

class Base:
    def __init__(self):  #don't forget `self`!!!
        self.call = subprocess.call

instance = Base()
print (instance.call(['echo','foo']))
</snippet></ROW><ROW><id>13200147</id><snippet>import subprocess

class Base:
    call = staticmethod(subprocess.call)
    def __init__(self):
        self.call(["echo","bar"])

instance = Base()
print (instance.call(['echo','foo']))
</snippet></ROW><ROW><id>13200147</id><snippet>call</snippet></ROW><ROW><id>13200147</id><snippet>subprocess.call</snippet></ROW><ROW><id>13200227</id><snippet>resultlist=[]
for i in snipppets1:
 for j in snippets2:
  resultlist.append(i+j)
print resultlist
</snippet></ROW><ROW><id>13200875</id><snippet>character_gen</snippet></ROW><ROW><id>13200875</id><snippet>buy_weapon</snippet></ROW><ROW><id>13200875</id><snippet>weapon_code</snippet></ROW><ROW><id>13200875</id><snippet>barracks</snippet></ROW><ROW><id>13200875</id><snippet>combat_engine</snippet></ROW><ROW><id>13200875</id><snippet>combat_engine</snippet></ROW><ROW><id>13200875</id><snippet>elif</snippet></ROW><ROW><id>13200875</id><snippet>break</snippet></ROW><ROW><id>13200875</id><snippet>combat_engine</snippet></ROW><ROW><id>13200875</id><snippet>combat_engine</snippet></ROW><ROW><id>13200875</id><snippet>barracks</snippet></ROW><ROW><id>13200875</id><snippet>barracks</snippet></ROW><ROW><id>13200875</id><snippet>weapon_code</snippet></ROW><ROW><id>13200875</id><snippet>weapon_code</snippet></ROW><ROW><id>13200875</id><snippet>buy_weapon</snippet></ROW><ROW><id>13200875</id><snippet>buy_weapon</snippet></ROW><ROW><id>13200875</id><snippet>weapon_code</snippet></ROW><ROW><id>13200875</id><snippet>raw_input("""
Your current weapon is now a %s. Press Enter To Continue
""" % current_weapon)
</snippet></ROW><ROW><id>13200875</id><snippet>buy_weapon</snippet></ROW><ROW><id>13200875</id><snippet>character_gen</snippet></ROW><ROW><id>13200875</id><snippet>character_gen</snippet></ROW><ROW><id>13200875</id><snippet>break</snippet></ROW><ROW><id>13200875</id><snippet>print "You defeated the %s! Great Job!"</snippet></ROW><ROW><id>13200913</id><snippet>try:
    var2 = int(var)
</snippet></ROW><ROW><id>13200913</id><snippet>if (var in ["+", "-", "/", "*"])
</snippet></ROW><ROW><id>13200913</id><snippet>if len(var) != and ... see above
</snippet></ROW><ROW><id>13200913</id><snippet>if myvar[0] is ".":
</snippet></ROW><ROW><id>13200913</id><snippet>if int(myvar) == 0:
</snippet></ROW><ROW><id>13200916</id><snippet>s = 'mqRMRsL'
result = ''.join(sorted(s, key=lambda c:(c.lower(), c)))
# LMmqRRs
</snippet></ROW><ROW><id>13200916</id><snippet>s = 'mqRMRsL'
result = ''.join(sorted(s, key=str.lower))
# LmMqRRs
</snippet></ROW><ROW><id>13201068</id><snippet>urls = raw_input("Enter yer urls! ")
</snippet></ROW><ROW><id>13201068</id><snippet>for url in urls.split():
    webbrowser.open(url,new=new)
</snippet></ROW><ROW><id>13201181</id><snippet>def inAll(x, *lsts):
    return all((x in l) for l in lsts)
</snippet></ROW><ROW><id>13201181</id><snippet>x</snippet></ROW><ROW><id>13201181</id><snippet>x</snippet></ROW><ROW><id>13201181</id><snippet>x</snippet></ROW><ROW><id>13201181</id><snippet>def inAll(xs, *lsts):
    return all(all(x in l for x in xs) for l in lsts)
</snippet></ROW><ROW><id>13201370</id><snippet>DictReader</snippet></ROW><ROW><id>13201370</id><snippet>reader = DictReader(open('name_of_file.csv'))
reader.fieldnames
</snippet></ROW><ROW><id>13201746</id><snippet>In [73]: x = np.array([1.33333, 2.56, 9.99999, 16.0])

In [74]: x.round()
Out[76]: array([  1.,   3.,  10.,  16.])
</snippet></ROW><ROW><id>13201918</id><snippet>td</snippet></ROW><ROW><id>13201918</id><snippet>class='small'</snippet></ROW><ROW><id>13201918</id><snippet>valign='top'</snippet></ROW><ROW><id>13201918</id><snippet>soup = BeautifulSoup(s)
tds = soup.find_all('td', attrs={'class': 'small', 'valign': 'top'})
the_td = tds[0].text.strip()
</snippet></ROW><ROW><id>13201922</id><snippet>fabric</snippet></ROW><ROW><id>13201946</id><snippet>None</snippet></ROW><ROW><id>13201946</id><snippet>username</snippet></ROW><ROW><id>13201946</id><snippet>self</snippet></ROW><ROW><id>13201946</id><snippet>    @staticmethod
    def get_username():
        if username is None:
        ...
</snippet></ROW><ROW><id>13201946</id><snippet>self</snippet></ROW><ROW><id>13201946</id><snippet>a.get_username()</snippet></ROW><ROW><id>13201946</id><snippet>a</snippet></ROW><ROW><id>13201946</id><snippet>self</snippet></ROW><ROW><id>13201946</id><snippet>class A:
    username = None
    @classmethod
    def get_username(cls):
        if cls.username is None:
            try:
                uname = os.environ["USER"]
            except:
                print("Couldn't find a user name")
            else:
                cls.username = uname
        return cls.username
</snippet></ROW><ROW><id>13201946</id><snippet>get_username</snippet></ROW><ROW><id>13201946</id><snippet>class A:
    @memoize
    @staticmethod
    def get_username():
        try:
            return os.environ["USER"]
        except:
            print("Couldn't find a user name")
            return None
</snippet></ROW><ROW><id>13201946</id><snippet>@staticmethod</snippet></ROW><ROW><id>13201946</id><snippet>A</snippet></ROW><ROW><id>13201946</id><snippet>get_username</snippet></ROW><ROW><id>13201968</id><snippet>__cinit__()</snippet></ROW><ROW><id>13201968</id><snippet>cdef</snippet></ROW><ROW><id>13201968</id><snippet>def __cinit__(self, double val1=-1, double val2=-1): 
    if val1 == -1 or val2 == -1:
        self.thisptr = new Node()
    else:
        self.thisptr = new Node(val1,val2)
</snippet></ROW><ROW><id>13201968</id><snippet>-1</snippet></ROW><ROW><id>13201968</id><snippet>None</snippet></ROW><ROW><id>13201968</id><snippet>def __cinit__(self, val1=None, val2=None):
    if val1 is not None and val2 is not None:
        self.thisptr = new Node(val1, val2)
    else:
        self.thisptr = new Node()
</snippet></ROW><ROW><id>13202159</id><snippet>fabfile</snippet></ROW><ROW><id>13202159</id><snippet>roledefs</snippet></ROW><ROW><id>13202159</id><snippet>hosts = {
    "rack": ["rack1", "rack2"],
    "external_rack": ["external_rack1", "external_rack2"]
}

env.roledefs = {"rack_machines": hosts["rack"]}

@task
def set_hosts(hostset="rack"):
    if hostset in hosts:
        env.roledefs["rack_machines"] = hosts[hostset]
    else:
        print "Invalid hostset"

@roles("rack_machines")
def business():
    pass
</snippet></ROW><ROW><id>13202159</id><snippet>fab set_hosts:external_rack business</snippet></ROW><ROW><id>13202203</id><snippet>soup = BeautifulSoup(html)
divTag = soup.find_all("div", {"class":"tablebox"}

for tag in divTag:
    tdTags = tag.find_all("td", {"class":"align-right"})
    for tag in tdTags:
        print tag.text
</snippet></ROW><ROW><id>13202232</id><snippet>import functools
from PySide.QtCore import QTimer

def onTimer(initParams):
    # use initParams
    # your code here...

myInitParams = "Init!"
timerCallback = functools.partial(onTimer, initParams=myInitParams)
myTimer = QTimer()
myTimer.timeout.connect(timerCallback)
myTimer.start( 1000) #once a sec

#Your QApplication goes below...
</snippet></ROW><ROW><id>13202455</id><snippet>sudo python /home/hafiz/Downloads/Django-1.0.4/setup.py install</snippet></ROW><ROW><id>13202455</id><snippet>root</snippet></ROW><ROW><id>13202455</id><snippet>changing mode of /usr/local/bin/django-admin.py to 775
</snippet></ROW><ROW><id>13202455</id><snippet>sudo</snippet></ROW><ROW><id>13202616</id><snippet>&gt;&gt;&gt; s = '717765717777716571a7202020'
&gt;&gt;&gt; ['0x' + s[i:i+2] for i in range(0, len(s), 2)]
['0x71', '0x77', '0x65', '0x71', '0x77', '0x77', '0x71', '0x65', '0x71', '0xa7', '0x20', '0x20', '0x20']
</snippet></ROW><ROW><id>13202616</id><snippet>&gt;&gt;&gt; ','.join('0x' + s[i:i+2] for i in range(0, len(s), 2))
'0x71,0x77,0x65,0x71,0x77,0x77,0x71,0x65,0x71,0xa7,0x20,0x20,0x20'
</snippet></ROW><ROW><id>13202644</id><snippet>import os, time, gzip
import xml.etree.cElementTree as ET
from xml.etree.cElementTree import ElementTree

. . . 

f = gzip.open('/home/joe/file.txt.gz', 'wb')
ElementTree(child).write(f) 
f.close()
</snippet></ROW><ROW><id>13202685</id><snippet>import datetime
(y,w,d ) = date.isocalendar()
#w will be the iso week number, d the day of week
(y2,wb,d2) = datetime.datetime(date.year,date.month,1).isocalendar()
wkcount = 1 if d&gt;=d2 else 0
# you need to account whether your date is a weekday after the one of the first of the month or not
print "BYDAY=%d%s"%(w-wb+wkcount,date.strftime("%a").upper()[0:2])
</snippet></ROW><ROW><id>13203077</id><snippet>help_text</snippet></ROW><ROW><id>13203077</id><snippet>__init__</snippet></ROW><ROW><id>13203077</id><snippet>from django.contrib.auth.forms import UserCreationForm
from django import forms

class UserCreateForm(UserCreationForm):
    email = forms.EmailField(required=True)

    def __init__(self, *args, **kwargs):
        super(UserCreateForm, self).__init__(*args, **kwargs)

        for fieldname in ['username', 'password1', 'password2']:
            self.fields[fieldname].help_text = None

print UserCreateForm()
</snippet></ROW><ROW><id>13203077</id><snippet>&lt;tr&gt;&lt;th&gt;&lt;label for="id_username"&gt;Username:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input id="id_username" type="text" name="username" maxlength="30" /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;label for="id_password1"&gt;Password:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="password" name="password1" id="id_password1" /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;label for="id_password2"&gt;Password confirmation:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="password" name="password2" id="id_password2" /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;&lt;label for="id_email"&gt;Email:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type="text" name="email" id="id_email" /&gt;&lt;/td&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>13203077</id><snippet>class UserCreateForm(UserCreationForm):
    password2 = forms.CharField(label=_("Wahtever""), widget=MyPasswordInput 
</snippet></ROW><ROW><id>13203078</id><snippet>Content-Type</snippet></ROW><ROW><id>13203078</id><snippet>hello.py</snippet></ROW><ROW><id>13203078</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import MySQLdb
print "Content-Type: text/html\n"                  
#   newline after headers!    ^^ 
print "&lt;html&gt;&lt;head&gt;&lt;title&gt;Книги&lt;/title&gt;&lt;/head&gt;"
...
</snippet></ROW><ROW><id>13203078</id><snippet>/var/log/apache/error.log</snippet></ROW><ROW><id>13203146</id><snippet>easy_install python-Levenshtein</snippet></ROW><ROW><id>13203175</id><snippet>utf-16</snippet></ROW><ROW><id>13203175</id><snippet>hindi_string = open('hindi.txt').read().decode('utf-16')
data = { 'text' : hindi_string.encode('utf-8') }
...
</snippet></ROW><ROW><id>13203387</id><snippet>def insertSources(self, srctype, link):
    """ Insert rss sources so we can parse them """
    new = {srctype: link}
    self.__sources.insert(new)
</snippet></ROW><ROW><id>13203387</id><snippet>def insertSources(self, srctype, link):
    """ Insert rss sources so we can parse them """
    new = {'srctype': srctype, 'link': link}
    self.__sources.insert(new)
</snippet></ROW><ROW><id>13203387</id><snippet>getSources()</snippet></ROW><ROW><id>13203387</id><snippet>srctype</snippet></ROW><ROW><id>13203387</id><snippet>find()</snippet></ROW><ROW><id>13203387</id><snippet>find_one()</snippet></ROW><ROW><id>13203387</id><snippet>{'srctype': type}</snippet></ROW><ROW><id>13203617</id><snippet>i_2 - i_1</snippet></ROW><ROW><id>13203617</id><snippet>i_1</snippet></ROW><ROW><id>13203617</id><snippet>i_2</snippet></ROW><ROW><id>13203700</id><snippet>Remove an internal header by giving a replacement without
content on the right side of the colon, as in: -H "Host:".
</snippet></ROW><ROW><id>13203820</id><snippet>return HttpResponseRedirect("/%s/" % topic.id)
</snippet></ROW><ROW><id>13203890</id><snippet>def addToFile(file, what):
    f = open(file, 'a').write(what) 
</snippet></ROW><ROW><id>13204073</id><snippet>find_all</snippet></ROW><ROW><id>13204073</id><snippet>markets</snippet></ROW><ROW><id>13204073</id><snippet>markets[0].contents[0]
</snippet></ROW><ROW><id>13204073</id><snippet>markets</snippet></ROW><ROW><id>13204073</id><snippet>[0]</snippet></ROW><ROW><id>13204073</id><snippet>contents</snippet></ROW><ROW><id>13204073</id><snippet>[0]</snippet></ROW><ROW><id>13204098</id><snippet>@ = 40
. = 2E
com = 636f6d
_ = 5f
a-z = (4[1-9a-f]|5[0-9a])
A-Z = (6[1-9a-f]|7[0-9a])
- = 2d
</snippet></ROW><ROW><id>13204098</id><snippet>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/

/^(((4[1-9a-f]|5[0-9a])|(6[1-9a-f]|7[0-9a])|[0-9]|5f|2E|2d)+)40(([0-9]|(4[1-9a-f]|5[0-9a])|(6[1-9a-f]|7[0-9a])|2E|2d)+)2E(((4[1-9a-f]|5[0-9a])|(6[1-9a-f]|7[0-9a])){2,6})$/
</snippet></ROW><ROW><id>13204098</id><snippet>/^
(
    (
        (4[1-9a-f]|5[0-9a])     // a-z
        |(6[1-9a-f]|7[0-9a])    // A-Z
        |[0-9]                  // 0-9
        |5f                     // _
        |2E                     // .
        |2d                     // -
    )+ // 1 or more times
) 
40
(
    (
        [0-9]                   // 0-9
        |(4[1-9a-f]|5[0-9a])    // a-z
        |(6[1-9a-f]|7[0-9a])    // A-Z
        |2E                     // .
        |2d                     // -
    )+ // 1 or more times
)
2E                              // .
(
    (
        (4[1-9a-f]|5[0-9a])     // a-z
        |(6[1-9a-f]|7[0-9a])    // A-Z
    ){2,6} // between 2 and 6 times
)$/
</snippet></ROW><ROW><id>13204108</id><snippet>def mapInsert(key, value, map1):
  if isinstance(map1, EmptyMap):
    return mkNonEmptyMap(mkEmptyMap(), key, value, mkEmptyMap())
  else:
    if map1.key == key:
      map1.value = value;
    else if map1.key &gt; key:
      return map1.left = mapInsert(key, value, map1.left)
    else:
      return map1.right = mapInsert(key, value, map1.right)
</snippet></ROW><ROW><id>13204132</id><snippet>append</snippet></ROW><ROW><id>13204132</id><snippet>&gt;&gt;&gt; inside = ['thing', 'other thing']
&gt;&gt;&gt; inside.append('another thing')
&gt;&gt;&gt; inside
['thing', 'other thing', 'another thing']
</snippet></ROW><ROW><id>13204132</id><snippet>Item</snippet></ROW><ROW><id>13204132</id><snippet>append</snippet></ROW><ROW><id>13204132</id><snippet>extend</snippet></ROW><ROW><id>13204132</id><snippet>+=</snippet></ROW><ROW><id>13204132</id><snippet>extend</snippet></ROW><ROW><id>13204132</id><snippet>&gt;&gt;&gt; inside = ['thing', 'other thing']
&gt;&gt;&gt; in_hand = ['sword', 'lamp']
&gt;&gt;&gt; inside += in_hand
&gt;&gt;&gt; inside
['thing', 'other thing', 'sword', 'lamp']
</snippet></ROW><ROW><id>13204132</id><snippet>join</snippet></ROW><ROW><id>13204132</id><snippet>&gt;&gt;&gt; ', '.join(inside)
'thing, other thing, another thing'
</snippet></ROW><ROW><id>13204132</id><snippet>join</snippet></ROW><ROW><id>13204132</id><snippet>str</snippet></ROW><ROW><id>13204132</id><snippet>join</snippet></ROW><ROW><id>13204132</id><snippet>&gt;&gt;&gt; 'Inside = ' + str(inside)
"Inside = ['thing', 'other thing', 'sword', 'lamp']"
&gt;&gt;&gt; 'Inside = ' + ', '.join(inside)
'Inside = thing, other thing, another thing'
</snippet></ROW><ROW><id>13204132</id><snippet>repr</snippet></ROW><ROW><id>13204132</id><snippet>&gt;&gt;&gt; class Item(object):
...   def __init__(self, desc):
...     self.desc = desc
...   def __repr__(self):
...     return 'Item(' + repr(self.desc) + ')'
...   def __repr__(self):
...     return self.desc
...
&gt;&gt;&gt; inside = [Item('thing'), Item('other thing')]
&gt;&gt;&gt; 'Inside = ' + repr(inside)
... "Inside = [Item('thing'), Item('other thing')]"
&gt;&gt;&gt; 'Inside = ' + str(inside)
... "Inside = [Item('thing'), Item('other thing')]"
&gt;&gt;&gt; 'Inside = ' + ', '.join(str(i) for i in inside)
... 'Inside = thing, other thing'
</snippet></ROW><ROW><id>13204132</id><snippet>str</snippet></ROW><ROW><id>13204132</id><snippet>Item</snippet></ROW><ROW><id>13204132</id><snippet>repr</snippet></ROW><ROW><id>13204132</id><snippet>str</snippet></ROW><ROW><id>13204132</id><snippet>str(i) for i in inside</snippet></ROW><ROW><id>13204132</id><snippet>class Backpack:
    def __init__(self):
        self.inside = []
    def add(self, toadd):
        self.inside.append(toadd)
    def addmany(self, listtoadd):
        self.inside += listtoadd
    def __str__(self):
        return ', '.join(str(i) for i in self.inside)

pack = Backpack()
pack.add('thing')
pack.add('other thing')
pack.add('another thing')
print 'Your backpack contains:', pack
</snippet></ROW><ROW><id>13204132</id><snippet>Your backpack contains: thing, other thing, another thing
</snippet></ROW><ROW><id>13204175</id><snippet>import subprocess
import sys


args = sys.argv[1:]
env = {}
while args:
    env[args.pop(0)] = args.pop(0)


subprocess.call(['python', 'script.py'], env=env)
</snippet></ROW><ROW><id>13204175</id><snippet>subprocess.call('ssh -i &lt;identify file&gt; username@hostname '
                'python &lt;script_on_linux_machine&gt; %s %s' % (key, value))
</snippet></ROW><ROW><id>13204270</id><snippet>name</snippet></ROW><ROW><id>13204270</id><snippet>li = [{'name': 'Peter'}, {'name': 'Anna'}]
new_li = []
for p in li:
    new_p = {'name': p['name'] + ' Williams'}
    new_li.append(new_p)
</snippet></ROW><ROW><id>13204270</id><snippet>li = [{'name': 'Peter'}, {'name': 'Anna'}]
new_li = [{'name': p['name'] + ' Williams'} for p in li]
</snippet></ROW><ROW><id>13204296</id><snippet>body</snippet></ROW><ROW><id>13204296</id><snippet>u'content'</snippet></ROW><ROW><id>13204296</id><snippet>'%s' % ...</snippet></ROW><ROW><id>13204296</id><snippet>import json

# This is a correct JSON blob

body = '[{"content": "Test\\r\\n", "body_section": 1, "charset": "utf-8", "type": "text/plain"}, {"content": "Test\\r\\n", "body_section": 2
, "charset": "utf-8", "type": "text/html"}]'

# And this is a correct object
data = json.loads(body)

# If I were to print this object into a string, I would get 
# [{u'content': u'Test\r\n', u'type': u'text/plain', u'charset'...
# and a subsequent json.load would fail.

# Remove the comment to check whether the error is the same (it is not on
# my system, but I'm betting it depends on JSON implementation and/or python version)

# body = '%s' % data

print body

print json.loads(body)
</snippet></ROW><ROW><id>13204380</id><snippet>list()</snippet></ROW><ROW><id>13204380</id><snippet>list()</snippet></ROW><ROW><id>13204380</id><snippet>&gt;&gt;&gt; words = ['BLUE', 'ORANGE', 'YELLOW', 'GREEN', 'BLACK', 'PURPLE', 'BROWN']
&gt;&gt;&gt; [list(word) for word in words]
[['B', 'L', 'U', 'E'], ['O', 'R', 'A', 'N', 'G', 'E'], ['Y', 'E', 'L', 'L', 'O', 'W'], ['G', 'R', 'E', 'E', 'N'], ['B', 'L', 'A', 'C', 'K'], ['P', 'U', 'R', 'P', 'L', 'E'], ['B', 'R', 'O', 'W', 'N']]
</snippet></ROW><ROW><id>13204380</id><snippet>append()</snippet></ROW><ROW><id>13204380</id><snippet>list1</snippet></ROW><ROW><id>13204380</id><snippet>append</snippet></ROW><ROW><id>13204380</id><snippet>&gt;&gt;&gt; first_list = ['BLUE', 'ORANGE', 'YELLOW', 'GREEN', 'BLACK', 'PURPLE', 'BROWN']
&gt;&gt;&gt; list_1 = []
&gt;&gt;&gt; for i in range (len(first_list)):
...     list_1.append(list(first_list[i]))
... 
&gt;&gt;&gt; list_1
[['B', 'L', 'U', 'E'], ['O', 'R', 'A', 'N', 'G', 'E'], ['Y', 'E', 'L', 'L', 'O', 'W'], ['G', 'R', 'E', 'E', 'N'], ['B', 'L', 'A', 'C', 'K'], ['P', 'U', 'R', 'P', 'L', 'E'], ['B', 'R', 'O', 'W', 'N']]
</snippet></ROW><ROW><id>13204603</id><snippet>http.server</snippet></ROW><ROW><id>13204603</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>13205114</id><snippet>__getattr__</snippet></ROW><ROW><id>13205114</id><snippet>class Meta(type):

    def __new__(mcls, name, bases, dikt):
        fgetattr = dikt.get('__getattr__')
        if fgetattr is not None:
            setattr(mcls, '__getattr__', fgetattr)
        return super(Meta, mcls).__new__(mcls, name, bases, dikt)

class Generator(object):
    __metaclass__ = Meta

    def __getattr__(obj, name):

        def f(self):
            return "Result of %s for %r" % (name, self)
        f.__name__ = name

        if isinstance(obj, type):
            setattr(obj, name, f)
        else:
            setattr(type(obj), name, f)
        return getattr(obj, name)
</snippet></ROW><ROW><id>13205114</id><snippet>__get__</snippet></ROW><ROW><id>13205114</id><snippet>getattr</snippet></ROW><ROW><id>13205114</id><snippet>__getattr__</snippet></ROW><ROW><id>13205114</id><snippet>isinstance</snippet></ROW><ROW><id>13205114</id><snippet>&gt;&gt;&gt; g = Generator()
&gt;&gt;&gt; g.foo
&lt;bound method Generator.foo of &lt;__main__.Generator object at 0xb7248c2c&gt;&gt;
&gt;&gt;&gt; Generator.foo
&lt;unbound method Generator.foo&gt;
&gt;&gt;&gt; g.bar
&lt;bound method Generator.bar of &lt;__main__.Generator object at 0xb7248c2c&gt;&gt;
&gt;&gt;&gt; Generator.bar
&lt;unbound method Generator.bar&gt;
&gt;&gt;&gt; g.foo()
'Result of foo for &lt;__main__.Generator object at 0xb7248c2c&gt;'
&gt;&gt;&gt; Generator.foo(g)
'Result of foo for &lt;__main__.Generator object at 0xb7248c2c&gt;'
&gt;&gt;&gt; 'foo' in vars(Generator), 'bar' in vars(Generator)
(True, True)
</snippet></ROW><ROW><id>13205125</id><snippet>def myLog(x,b):
    exp = 0
    ans = 1
    while ans&lt;x:
        ans *= b
        exp += 1
    if ans == x:
        return exp  
    else:
        raise ValueError("can't find a suitable exponent")

In [10]: myLog(16,2)
Out[10]: 4
</snippet></ROW><ROW><id>13205170</id><snippet>NSEvent addGlobalMonitor...</snippet></ROW><ROW><id>13205171</id><snippet>class Individual():
  # genome definition
  genes = []
  def __init__(self):
      for i in xrange(10):
              self.genes.append(i)

ind_1 = Individual()
print ind_1.genes
ind_2 = Individual()
print ind_1.genes
print ind_2.genes
</snippet></ROW><ROW><id>13205171</id><snippet>class Individual():
  # genome definition
  def __init__(self):
      self.genes = []
      for i in xrange(10):
              self.genes.append(i)

ind_1 = Individual()
print ind_1.genes
ind_2 = Individual()
print ind_1.genes
print ind_2.genes
</snippet></ROW><ROW><id>13205171</id><snippet>&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>13205171</id><snippet>&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>13205171</id><snippet># individual class
class Individual():
  # genome definition
  Genes_      = []    # genes list

  # constructor
  def __init__(self, gen, indv):
    # assign indices
    self.generation_ = gen
    self.indiv_      = indv
    self.fitness_    = random.random()
</snippet></ROW><ROW><id>13205171</id><snippet># individual class
class Individual():

  # constructor
  def __init__(self, gen, indv):
    # genome definition
    self.Genes_      = []    # genes list
    # assign indices
    self.generation_ = gen
    self.indiv_      = indv
    self.fitness_    = random.random()
</snippet></ROW><ROW><id>13205230</id><snippet>f</snippet></ROW><ROW><id>13205230</id><snippet>g</snippet></ROW><ROW><id>13205230</id><snippet>f</snippet></ROW><ROW><id>13205230</id><snippet>g</snippet></ROW><ROW><id>13205230</id><snippet>f</snippet></ROW><ROW><id>13205230</id><snippet>g</snippet></ROW><ROW><id>13205230</id><snippet>f</snippet></ROW><ROW><id>13205230</id><snippet>g</snippet></ROW><ROW><id>13205230</id><snippet>f</snippet></ROW><ROW><id>13205230</id><snippet>fsec</snippet></ROW><ROW><id>13205230</id><snippet>g</snippet></ROW><ROW><id>13205230</id><snippet>gsec</snippet></ROW><ROW><id>13205230</id><snippet>fsec</snippet></ROW><ROW><id>13205230</id><snippet>gsec</snippet></ROW><ROW><id>13205230</id><snippet>gsec</snippet></ROW><ROW><id>13205230</id><snippet>fsec</snippet></ROW><ROW><id>13205353</id><snippet>print [word for word in words if word[0].isupper() ]
</snippet></ROW><ROW><id>13205353</id><snippet>for word in words:
    if word[0].isupper():
        list1.append(word)
</snippet></ROW><ROW><id>13205354</id><snippet>filter(None, (data_grabber(x) for x in websites))
</snippet></ROW><ROW><id>13205354</id><snippet>data_grabber</snippet></ROW><ROW><id>13205354</id><snippet>filter</snippet></ROW><ROW><id>13205354</id><snippet>None</snippet></ROW><ROW><id>13205354</id><snippet>&gt;&gt;&gt; %timeit filter(None, [None for x in range(100000)])
100 loops, best of 3: 9.22 ms per loop
</snippet></ROW><ROW><id>13205354</id><snippet>None</snippet></ROW><ROW><id>13205604</id><snippet>from memory_profiler import profiler</snippet></ROW><ROW><id>13205604</id><snippet>python -m memory_profiler example.py
</snippet></ROW><ROW><id>13205630</id><snippet>vctorsig = vctor</snippet></ROW><ROW><id>13205630</id><snippet>vctorsig</snippet></ROW><ROW><id>13205630</id><snippet>vctor</snippet></ROW><ROW><id>13205630</id><snippet>vctorsig = list(vctor)</snippet></ROW><ROW><id>13205817</id><snippet>baseDict = {
  'topRegex': r'(&lt;!--make_database header end--&gt;)'
}
</snippet></ROW><ROW><id>13205817</id><snippet>TopnTail</snippet></ROW><ROW><id>13205817</id><snippet>topRegEx = re.compile(baseDict['topRegex'])
</snippet></ROW><ROW><id>13205817</id><snippet>'''re.compile(r'(&lt;!--make_database header end--&gt;)')'''</snippet></ROW><ROW><id>13205817</id><snippet>str</snippet></ROW><ROW><id>13205817</id><snippet>search</snippet></ROW><ROW><id>13205979</id><snippet>&gt;&gt;&gt; newMap = mapInsert1('one', 1, mapInsert1('two', 2, mkEmptyMap()))
</snippet></ROW><ROW><id>13205979</id><snippet>&gt;&gt;&gt; newMap = mapInsert1('one', 1, mkEmptyMap())
&gt;&gt;&gt; newMap.right = mapInsert1('two', 2, mkEmptyMap()))
</snippet></ROW><ROW><id>13205979</id><snippet>elif key == node.key</snippet></ROW><ROW><id>13205979</id><snippet>mapInsert1</snippet></ROW><ROW><id>13205979</id><snippet>class Map():
    __slots__ = ('left', 'key', 'value', 'right')

    def __init__(self, left, key, value, right):
        self.left = left
        self.key = key
        self.value = value
        self.right = right

    def insert(self, left, key, value, right):
        self.left = left
        self.key = key
        self.value = value
        self.right = right

    def isEmpty(self):
        return self.left == self.right == self.key == self.value == None

def mkEmptyMap():
    return Map(None, None, None, None)

def mapInsert1(key, value, node):
    if node.isEmpty():
        print '0'
        node.insert(mkEmptyMap(), key, value, mkEmptyMap())
        return node
    else:
        if key &gt; node.key:
            print '1'
            return mapInsert1(key, value, node.right)
        elif key &lt; node.key:
            print '2'
            return mapInsert1(key, value, node.left)
        elif key == node.key:
            print '3'
            node.value = value
            return node
        else:
            raise TypeError('Bad Map')
</snippet></ROW><ROW><id>13205979</id><snippet>&gt;&gt;&gt; root = mapInsert1('five', 5, mkEmptyMap())
&gt;&gt;&gt; mapInsert1('four', 4, root)
&gt;&gt;&gt; mapInsert1('ace', 1, root)
&gt;&gt;&gt; mapInsert1('five', 'five', root)
&gt;&gt;&gt; root.left.isEmpty()
Out: False
&gt;&gt;&gt; root.left.key
Out: 'ace'
&gt;&gt;&gt; root.left.value
Out: 1
&gt;&gt;&gt; root.right.isEmpty()
Out: False
&gt;&gt;&gt; root.right.key
Out: 'four'
&gt;&gt;&gt; root.right.value
Out: 4
&gt;&gt;&gt; root.key
Out: 'five'
&gt;&gt;&gt; root.value
Out: 'five'
</snippet></ROW><ROW><id>13205987</id><snippet>0x4c1906</snippet></ROW><ROW><id>13206021</id><snippet>resource.py</snippet></ROW><ROW><id>13206021</id><snippet>resource</snippet></ROW><ROW><id>13206061</id><snippet>re.sub(r'\d+\.\d*', lambda match: str(int(round(float(match.group(0))))), line)
</snippet></ROW><ROW><id>13206149</id><snippet>['guid:%d' % i for i in xrange(0, 100002, 2)]</snippet></ROW><ROW><id>13206149</id><snippet>['guid:%d' % i for i in range(0, 100002, 2)]</snippet></ROW><ROW><id>13206307</id><snippet>from pyparsing import *

and_keyword = CaselessKeyword("and")
or_keyword = CaselessKeyword("or")
in_operation = CaselessKeyword("in")

value = quotedString | Word(alphanums)
comparisonOp = oneOf("= != &gt; &lt; &gt;= &lt;=")
LPAR,RPAR = map(Suppress,"()")
valueList = LPAR + delimitedList(value) + RPAR
comparisonExpr = value + comparisonOp + value | value + in_operation + Group(valueList)
def makePymongoComparison(tokens):
    v1,op,v2 = tokens
    if op != 'in':
        if op != '=':
            op = {
                "!=" : "$ne",
                "&gt;"  : "$gt",
                "&lt;"  : "$lt",
                "&gt;=" : "$gte",
                "&lt;=" : "$lte",
                }[op]
            v2 = "{'%s': '%s'}" % (op, v2)
        return "{'%s': '%s'}" % (v1, v2)
    else:
        return "{'%s': {'$in': [%s]}}" % (v1, ','.join("'%s'"%v for v in v2))
comparisonExpr.setParseAction(makePymongoComparison)

def handleBinaryOp(op):
    def pa(tokens):
        return "{'$%s': %s}" % (op, ', '.join(tokens.asList()[0][::2]))
    return pa
handleAnd = handleBinaryOp("and")
handleOr  = handleBinaryOp("or")
whereOperand = comparisonExpr
where_expr = operatorPrecedence(whereOperand,
    [
    (and_keyword, 2, opAssoc.LEFT, handleAnd),
    (or_keyword, 2, opAssoc.LEFT, handleOr),
    ])

where_condition = Group(CaselessLiteral("where") + where_expr)

print where_expr.parseString("(Sal = 1000 or Sal=5000) AND Car&gt;2")[0]
print where_expr.parseString("(Sal = 1000 or Sal=5000) AND Car in (1,2,3)")[0]
</snippet></ROW><ROW><id>13206307</id><snippet>{'$and': {'$or': {'Sal': '1000'}, {'Sal': '5000'}}, {'Car': '{'$gt': '2'}'}}
{'$and': {'$or': {'Sal': '1000'}, {'Sal': '5000'}}, {'Car': {'$in': ['1','2','3']}}}
</snippet></ROW><ROW><id>13206312</id><snippet>keys = [k.parent() for k in result_keys]
</snippet></ROW><ROW><id>13206457</id><snippet>brew update
brew tap homebrew/homebrew-dupes
brew install apple-gcc42
</snippet></ROW><ROW><id>13206545</id><snippet>re.sub(r'(.*_)\d*(\..*)', r'\g&lt;1&gt;8000\2', baseName)
</snippet></ROW><ROW><id>13206775</id><snippet>fixedPoint()</snippet></ROW><ROW><id>13206775</id><snippet>x</snippet></ROW><ROW><id>13206775</id><snippet>sqrt()</snippet></ROW><ROW><id>13206775</id><snippet>tryit()</snippet></ROW><ROW><id>13206775</id><snippet>a</snippet></ROW><ROW><id>13206775</id><snippet>tryit()</snippet></ROW><ROW><id>13206928</id><snippet>0.1</snippet></ROW><ROW><id>13206928</id><snippet>0</snippet></ROW><ROW><id>13206928</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; while a &gt; 0:
...     a = a - 0.1
...     print(repr(a))
...
0.9
0.8
0.7000000000000001
0.6000000000000001
0.5000000000000001
0.40000000000000013
0.30000000000000016
0.20000000000000015
0.10000000000000014
1.3877787807814457e-16
-0.09999999999999987
</snippet></ROW><ROW><id>13206928</id><snippet>if abs(a) &lt; 0.000001:</snippet></ROW><ROW><id>13206941</id><snippet>.strip()</snippet></ROW><ROW><id>13206941</id><snippet>    for i in self.infile:
        self.file_string.append(i.strip())
</snippet></ROW><ROW><id>13206941</id><snippet>.lstrip()</snippet></ROW><ROW><id>13206941</id><snippet>.rstrip()</snippet></ROW><ROW><id>13206967</id><snippet>&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; y = [7,8,9,10,11,12,13,14,15,16,17]
&gt;&gt;&gt; lnx, lny = len(x), len(y)
&gt;&gt;&gt; groupatleast = (lny + lnx - 1) // lnx
&gt;&gt;&gt; x2y = {}
&gt;&gt;&gt; for i in range(lnx):
    x2y[x[i]] = y[i*groupatleast: (i+1)*groupatleast]


&gt;&gt;&gt; x2y[x[i]] += y[(i+1)*groupatleast:]
&gt;&gt;&gt; for x1,ylist in sorted(x2y.items()):
    for y1 in ylist:
        print ("%i: %i" % (x1, y1))


1: 7
1: 8
1: 9
2: 10
2: 11
2: 12
3: 13
3: 14
3: 15
4: 16
4: 17
&gt;&gt;&gt; 
&gt;&gt;&gt; # Help:
&gt;&gt;&gt; lnx, lny
(4, 11)
&gt;&gt;&gt; groupatleast
3
&gt;&gt;&gt; x2y
{1: [7, 8, 9], 2: [10, 11, 12], 3: [13, 14, 15], 4: [16, 17]}
&gt;&gt;&gt; ylist
[16, 17]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13207152</id><snippet>lastLocation = None
lastTime = None
skip = False

bestLocation = None
bestTime = None

for line in text.split('\n'):    
    line.find('Location')
    if line.find('Location') == 0:
        # Build Location
        skip = False
        print "  Found Build location"
        lastLocation = line.split(":")[1].lstrip()       
    elif line.find('Status') == 0:
        # Status
        print "  Found Status"
        status = line.split(":")
        status1 = status[1].strip()
        if status1 != "Approved":
            skip = True
    elif line.find('BuildDate') == 0 and not skip:
        # Main Make
        print "  Found BuildDate"
        timeStr = line.split(":", 1)[1].lstrip()
        lastTime = datetime.datetime.strptime(timeStr, "%m/%d/%Y %H:%M:%S")
        if bestTime == None or bestTime &lt; lastTime:
            bestTime = lastTime
            bestLocation = lastLocation
print lastLocation
</snippet></ROW><ROW><id>13207245</id><snippet>def all_remainders(num, denom):
  value = num
  yield value # we want the original number 
  while value &gt;= denom:
    value -= denom
    yield value
</snippet></ROW><ROW><id>13207245</id><snippet>&gt;&gt;&gt; list(all_remainders(34, 5))
[34, 29, 24, 19, 14, 9, 4]
&gt;&gt;&gt; list(all_remainders(34, 17))
[34, 17, 0]
&gt;&gt;&gt; _
</snippet></ROW><ROW><id>13207245</id><snippet>range</snippet></ROW><ROW><id>13207245</id><snippet>result = []
for remainder in all_remainders(34, 5):
  for nested_remainder in all_remainders(remainder, 3):
    result.append(nested_remainder)

print result
</snippet></ROW><ROW><id>13207245</id><snippet>set</snippet></ROW><ROW><id>13207245</id><snippet>result = set(nested_remainder 
    for remainder in all_remainders(34, 5) 
    for nested_remainder in all_remainders(remainder, 7)
)

print result
</snippet></ROW><ROW><id>13207326</id><snippet>good.write('"' + email.strip() + '"\n')
</snippet></ROW><ROW><id>13207326</id><snippet>.format</snippet></ROW><ROW><id>13207326</id><snippet>good.write('"{}"\n'.format(email.strip()))
</snippet></ROW><ROW><id>13207437</id><snippet>setuptools</snippet></ROW><ROW><id>13207548</id><snippet>a_file = open('E:\Python Win7-64-AMD 3.3\Test', encoding='utf-8')
</snippet></ROW><ROW><id>13207548</id><snippet>a_file = open('E:\Python Win7-64-AMD 3.3\Test\a.txt', encoding='utf-8')
</snippet></ROW><ROW><id>13207548</id><snippet>a.txt</snippet></ROW><ROW><id>13207548</id><snippet>r</snippet></ROW><ROW><id>13207548</id><snippet>\n</snippet></ROW><ROW><id>13207548</id><snippet>a_file = open(r'E:\Python Win7-64-AMD 3.3\Test\a.txt', encoding='utf-8')
</snippet></ROW><ROW><id>13207713</id><snippet>print(", ".join(LIST))
</snippet></ROW><ROW><id>13207713</id><snippet>repr</snippet></ROW><ROW><id>13207713</id><snippet>str</snippet></ROW><ROW><id>13207713</id><snippet>LIST = [1, "foo", 3.5, { "hello": "bye" }]
print( ", ".join( repr(e) for e in LIST ) )
</snippet></ROW><ROW><id>13207713</id><snippet>1, 'foo', 3.5, {'hello': 'bye'}
</snippet></ROW><ROW><id>13207760</id><snippet>print("hello")</snippet></ROW><ROW><id>13207760</id><snippet>print</snippet></ROW><ROW><id>13207760</id><snippet>Python 3.1.2 (release31-maint, Dec  9 2011, 20:50:50) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print 3
  File "&lt;stdin&gt;", line 1
    print 3
          ^
SyntaxError: invalid syntax

&gt;&gt;&gt; print(3)                  # works fine
3
</snippet></ROW><ROW><id>13207785</id><snippet>User</snippet></ROW><ROW><id>13207785</id><snippet>############ username case-insensitivity ############
class iunicode(unicode):
    def __init__(self, value):
        super(iunicode, self).__init__(value)
        self.value = value

    def __eq__(self, other):
        if isinstance(other, str) or isinstance(other, unicode):
            return self.value.lower() == other.lower()
        if isinstance(other, self.__class__):
            return other == self.value


def custom_getattribute(self, name):
    val = object.__getattribute__(self, name)
    if name == "username":
        val = iunicode(val)
    return val

def auth_user_save(self, *args, **kwargs): # Ensures lowercase usernames
    username = self.username
    if username and type(username) in [unicode, str, iunicode]:
        self.username = username.lower()   # Only lower case allowed
    super(User, self).save(*args, **kwargs)

User.__getattribute__ = custom_getattribute
User.save = MethodType(auth_user_save, None, User)
#####################################################
</snippet></ROW><ROW><id>13207785</id><snippet>from django.test.testcases import TestCase

def create_user(data='testuser'):
    email = '%s@%s.com' % (data, data)
    user = G(User, username=data, email=email, is_active=True)
    user.set_password(data)
    user.save()
    return user

class UsernameCaseInsensitiveTests(TestCase):

    def test_user_create(self):
        testuser = 'testuser'
        user = create_user(testuser)
        # Lowercase
        self.assertEqual(testuser, user.username)
        # Uppercase
        user.username = testuser.upper()
        user.save()
        self.assertEqual(testuser, user.username)

def test_username_eq(self):
    testuser = 'testuser'
    user = create_user(testuser)
    self.assertTrue(isinstance(user.username, iunicode))
    self.assertEqual(user.username, testuser)
    self.assertEqual(user.username, testuser.upper())
    self.assertTrue(user.username == testuser.upper())
    self.assertTrue(testuser.upper() == user.username)
    self.assertTrue(user.username == iunicode(testuser.upper()))
</snippet></ROW><ROW><id>13207785</id><snippet>###################### QuerySet #############################
def _filter_or_exclude(self, negate, *args, **kwargs):
    if 'username' in kwargs:
        kwargs['username__iexact'] = kwargs['username']
        del kwargs['username']
    if args or kwargs:
        assert self.query.can_filter(),\
        "Cannot filter a query once a slice has been taken."
    from django.db.models import Q
    clone = self._clone()
    if negate:
        clone.query.add_q(~Q(*args, **kwargs))
    else:
        clone.query.add_q(Q(*args, **kwargs))
    return clone

from django.db.models.query import QuerySet
QuerySet._filter_or_exclude = _filter_or_exclude
#############################################################
</snippet></ROW><ROW><id>13207785</id><snippet>User.objects.get(username='yugal')</snippet></ROW><ROW><id>13207785</id><snippet>User.objects.get(username='YUGAl')</snippet></ROW><ROW><id>13207944</id><snippet>url</snippet></ROW><ROW><id>13207944</id><snippet>def url(parser, token):</snippet></ROW><ROW><id>13207944</id><snippet>&lt;your_django_path&gt;/templatetags/future.py</snippet></ROW><ROW><id>13207944</id><snippet>try ... except</snippet></ROW><ROW><id>13207968</id><snippet>random.choice</snippet></ROW><ROW><id>13207968</id><snippet>.keys()</snippet></ROW><ROW><id>13207968</id><snippet>import random

key = random.choice(list(topic.keys()))
value = random.choice(topic[key])
</snippet></ROW><ROW><id>13207968</id><snippet>.keys()</snippet></ROW><ROW><id>13207968</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; topic = {'Countries': ['Somalia', 'Bermuda'],
...          'Cars'     : ['Tesla', 'Lotus']
... }
&gt;&gt;&gt; key = random.choice(list(topic.keys()))
&gt;&gt;&gt; value = random.choice(topic[key])
&gt;&gt;&gt; value
'Tesla'
</snippet></ROW><ROW><id>13208302</id><snippet>'%04o' % 0100  # 0100
</snippet></ROW><ROW><id>13208584</id><snippet>###### QuerySet #######
def _filter_or_exclude(self, negate, *args, **kwargs):
    if 'username' in kwargs:
        kwargs['username__iexact'] = kwargs['username']
        del kwargs['username']
    if args or kwargs:
        assert self.query.can_filter(),\
        "Cannot filter a query once a slice has been taken."
    from django.db.models import Q
    clone = self._clone()
    if negate:
        clone.query.add_q(~Q(*args, **kwargs))
    else:
        clone.query.add_q(Q(*args, **kwargs))
    return clone

from django.db.models.query import QuerySet
QuerySet._filter_or_exclude = _filter_or_exclude
######################
</snippet></ROW><ROW><id>13209268</id><snippet>if</snippet></ROW><ROW><id>13209268</id><snippet>def function():
    return (0 if ((A == 0) or (C != 0) or (A &gt; 4)) else
            someOtherFunction())
</snippet></ROW><ROW><id>13209268</id><snippet>def function():
    return (0 if A == 0 else
            0 if C != 0 else
            0 if A &gt; 4 else
            someOtherFunction())
</snippet></ROW><ROW><id>13209268</id><snippet>(&lt;cond1&gt; and func1()) or (&lt;cond2&gt; and func2()) or (func3())
</snippet></ROW><ROW><id>13209268</id><snippet>if &lt;cond1&gt;:   func1()
elif &lt;cond2&gt;: func2()
else:         func3()
</snippet></ROW><ROW><id>13209268</id><snippet>&lt;cond1&gt;</snippet></ROW><ROW><id>13209268</id><snippet>func1()</snippet></ROW><ROW><id>13209268</id><snippet>False</snippet></ROW><ROW><id>13209268</id><snippet>0</snippet></ROW><ROW><id>13209268</id><snippet>None</snippet></ROW><ROW><id>13209268</id><snippet>&lt;cond2&gt;</snippet></ROW><ROW><id>13209268</id><snippet>func2</snippet></ROW><ROW><id>13209268</id><snippet>(&lt;cond1&gt; and func1())
</snippet></ROW><ROW><id>13209268</id><snippet>func1()</snippet></ROW><ROW><id>13209268</id><snippet>&lt;cond1&gt;</snippet></ROW><ROW><id>13209268</id><snippet>func1()</snippet></ROW><ROW><id>13209268</id><snippet>(&lt;cond1&gt; and func1())</snippet></ROW><ROW><id>13209268</id><snippet>False</snippet></ROW><ROW><id>13209268</id><snippet>(&lt;cond2&gt; and func2())</snippet></ROW><ROW><id>13209268</id><snippet>type(z)==types.ComplexType and z.real or z</snippet></ROW><ROW><id>13209268</id><snippet>z = (0+4j)</snippet></ROW><ROW><id>13209268</id><snippet>z.real</snippet></ROW><ROW><id>13209453</id><snippet>l = re.compile("(?&lt;!^)\s+(?=[A-Z])(?!.\s)").split(s)
</snippet></ROW><ROW><id>13209560</id><snippet>f2</snippet></ROW><ROW><id>13209560</id><snippet>f1</snippet></ROW><ROW><id>13209560</id><snippet>global</snippet></ROW><ROW><id>13209560</id><snippet>def f1(a):
    def f2(x):
       return a+x
    return 2*a, f2
</snippet></ROW><ROW><id>13209560</id><snippet>result, f2 = f1(somevariable_or_literal)</snippet></ROW><ROW><id>13209560</id><snippet>global</snippet></ROW><ROW><id>13209560</id><snippet>global</snippet></ROW><ROW><id>13209560</id><snippet>f2 = None

def f1(a):
    global f2
    def f2_local(x):
         return a+x
    f2 = f2_local
    return 2*a
</snippet></ROW><ROW><id>13209560</id><snippet>f2</snippet></ROW><ROW><id>13209560</id><snippet>f1</snippet></ROW><ROW><id>13209591</id><snippet>with</snippet></ROW><ROW><id>13209591</id><snippet>ModelForm</snippet></ROW><ROW><id>13209591</id><snippet>with</snippet></ROW><ROW><id>13209609</id><snippet>match = re.search(r'(?m)\A(.*).*(?:\n?^\1.*$)*\n?\Z', text)
</snippet></ROW><ROW><id>13209921</id><snippet>x = csr_matrix(np.random.rand(1000) &gt; 0.99).T
print x.shape   # (1000, 1)
</snippet></ROW><ROW><id>13209927</id><snippet>colander</snippet></ROW><ROW><id>13209927</id><snippet>import colander
import limone


@limone.content_schema
class Characteristic(colander.MappingSchema):
    id = colander.SchemaNode(colander.Int(),
                             validator=colander.Range(0, 9999))
    name = colander.SchemaNode(colander.String())
    rating = colander.SchemaNode(colander.String())        


class Characteristics(colander.SequenceSchema):
    characteristic = Characteristic()


@limone.content_schema
class Person(colander.MappingSchema):
    id = colander.SchemaNode(colander.Int(),
                             validator=colander.Range(0, 9999))
    name = colander.SchemaNode(colander.String())
    phone = colander.SchemaNode(colander.String())
    characteristics = Characteristics()


class Data(colander.SequenceSchema):
    person = Person()
</snippet></ROW><ROW><id>13209927</id><snippet>deserialized = Data().deserialize(json.loads(json_string)) 
</snippet></ROW><ROW><id>13210092</id><snippet>SimpleTest</snippet></ROW><ROW><id>13210092</id><snippet>self</snippet></ROW><ROW><id>13210092</id><snippet>unittest</snippet></ROW><ROW><id>13210092</id><snippet>TestCase</snippet></ROW><ROW><id>13210092</id><snippet>methodName</snippet></ROW><ROW><id>13210092</id><snippet>self.name_of_helper_method()</snippet></ROW><ROW><id>13210092</id><snippet>unittest</snippet></ROW><ROW><id>13210092</id><snippet>unittest</snippet></ROW><ROW><id>13210299</id><snippet> u'coordinates': None,
 u'place': {u'attributes': {},
            u'bounding_box': {u'coordinates': [[[-122.51368188,
                                                 37.70813196],
                                                [-122.35845384,
                                                 37.70813196],
                                                [-122.35845384,
                                                 37.83245301],
                                                [-122.51368188,
                                                 37.83245301]]],
                              u'type': u'Polygon'},
            u'country': u'United States',
            u'country_code': u'US',
            u'full_name': u'San Francisco, CA',
            u'id': u'5a110d312052166f',
            u'name': u'San Francisco',
            u'place_type': u'city',
            u'url': u'http://api.twitter.com/1/geo/id/5a110d312052166f.json'},
</snippet></ROW><ROW><id>13210299</id><snippet> u'coordinates': {u'type': 'Point', u'coordinates': [-122.51368188, 37.83245301]}
</snippet></ROW><ROW><id>13210319</id><snippet>",".join(vote for vote in Vote) 
</snippet></ROW><ROW><id>13210319</id><snippet>/static</snippet></ROW><ROW><id>13210518</id><snippet>try</snippet></ROW><ROW><id>13210518</id><snippet>traceback.extract_stack</snippet></ROW><ROW><id>13210518</id><snippet>traceback.extract_stack</snippet></ROW><ROW><id>13210518</id><snippet>logging</snippet></ROW><ROW><id>13210518</id><snippet>logging</snippet></ROW><ROW><id>13210518</id><snippet>traceback</snippet></ROW><ROW><id>13210518</id><snippet>traceback</snippet></ROW><ROW><id>13210518</id><snippet>import sys

class FauxTb(object):
    def __init__(self, tb_frame, tb_lineno, tb_next):
        self.tb_frame = tb_frame
        self.tb_lineno = tb_lineno
        self.tb_next = tb_next

def current_stack(skip=0):
    try: 1/0
    except ZeroDivisionError:
        f = sys.exc_info()[2].tb_frame
    for i in xrange(skip + 2):
        f = f.f_back
    lst = []
    while f is not None:
        lst.append((f, f.f_lineno))
        f = f.f_back
    return lst

def extend_traceback(tb, stack):
    """Extend traceback with stack info."""
    head = tb
    for tb_frame, tb_lineno in stack:
        head = FauxTb(tb_frame, tb_lineno, head)
    return head

def full_exc_info():
    """Like sys.exc_info, but includes the full traceback."""
    t, v, tb = sys.exc_info()
    full_tb = extend_traceback(tb, current_stack(1))
    return t, v, full_tb
</snippet></ROW><ROW><id>13210518</id><snippet>import logging

def func():
    try:
        raise Exception('Dummy')
    except:
        logging.error("Something awful happened!", exc_info=full_exc_info())

def func2():
    func()

func2()
</snippet></ROW><ROW><id>13210518</id><snippet>ERROR:root:Something awful happened!
Traceback (most recent call last):
  File "a.py", line 52, in &lt;module&gt;
    func2()
  File "a.py", line 49, in func2
    func()
  File "a.py", line 43, in func
    raise Exception('Dummy')
Exception: Dummy
</snippet></ROW><ROW><id>13210518</id><snippet>pdb.post_mortem()</snippet></ROW><ROW><id>13210675</id><snippet>&gt;&gt;&gt; u'Syst\xc3\xa8me'.encode('latin-1').decode('utf-8')
u'Syst\xe8me'
</snippet></ROW><ROW><id>13210709</id><snippet>process_request</snippet></ROW><ROW><id>13210709</id><snippet>middleware.py</snippet></ROW><ROW><id>13210709</id><snippet>...
class WebkitDownloader( object ):
    def process_request( self, request, spider ):
        if not isinstance(request, FormRequest):
            webview = webkit.WebView()
            ...
</snippet></ROW><ROW><id>13210709</id><snippet>DOWNLOADER_MIDDLEWARES = {
    'mybot.middleware.WebkitDownloader': 1000,
    ...
}
</snippet></ROW><ROW><id>13210800</id><snippet>conn = imaplib.IMAP4_SSL(imap_server)

try:
    (retcode, capabilities) = conn.login(imap_user, imap_password)
except:
    print sys.exc_info()[1]
    sys.exit(1)

conn.select(readonly=1) # Select inbox or default namespace
(retcode, messages) = conn.search(None, '(UNSEEN)')
if retcode == 'OK':
    for num in messages[0].split(' '):
        print 'Processing :', message
        typ, data = conn.fetch(num,'(RFC822)')
        msg = email.message_from_string(data[0][1])
        typ, data = conn.store(num,'-FLAGS','\\Seen')
        if ret == 'OK':
            print data,'\n',30*'-'
            print msg

conn.close()
</snippet></ROW><ROW><id>13210800</id><snippet>def getMsgs(servername="myimapserverfqdn"):
  usernm = getpass.getuser()
  passwd = getpass.getpass()
  subject = 'Your SSL Certificate'
  conn = imaplib.IMAP4_SSL(servername)
  conn.login(usernm,passwd)
  conn.select('Inbox')
  typ, data = conn.search(None,'(UNSEEN SUBJECT "%s")' % subject)
  for num in data[0].split():
    typ, data = conn.fetch(num,'(RFC822)')
    msg = email.message_from_string(data[0][1])
    typ, data = conn.store(num,'-FLAGS','\\Seen')
    yield msg

def getAttachment(msg,check):
  for part in msg.walk():
    if part.get_content_type() == 'application/octet-stream':
      if check(part.get_filename()):
        return part.get_payload(decode=1)
</snippet></ROW><ROW><id>13210948</id><snippet>move = ChessBoard().make_move
move("e4")
move("e5")
</snippet></ROW><ROW><id>13210948</id><snippet>board = ChessBoard()
move = board.make_move
give_up = board.give_up
# call methods
</snippet></ROW><ROW><id>13211049</id><snippet>import string

vals = string.letters
def spy_code(txt,n):
    result = ''
    for i in txt:
        if i in vals:
            c = ord(i)+n
            if ord(i) != c:
                b = chr(c)
                result += b
        else:
            result += i
    print result

spy_code('abord mission, dont atk teacher!',5)
</snippet></ROW><ROW><id>13211049</id><snippet>fgtwi rnxxnts, itsy fyp yjfhmjw!
</snippet></ROW><ROW><id>13211184</id><snippet>listRegex = re.findall(r'\*\[\[.*', testString)
</snippet></ROW><ROW><id>13211184</id><snippet>listRegex = re.findall(R'[*][[][[].*', testString)
</snippet></ROW><ROW><id>13211184</id><snippet>.../Packages/Python/Regular Expressions (Python).tmLanguage</snippet></ROW><ROW><id>13211184</id><snippet>&lt;key&gt;name&lt;/key&gt;
&lt;string&gt;constant.other.character-class.set.regexp&lt;/string&gt;
&lt;key&gt;patterns&lt;/key&gt;
&lt;array&gt;
</snippet></ROW><ROW><id>13211184</id><snippet>    &lt;dict&gt;
        &lt;key&gt;match&lt;/key&gt;
        &lt;string&gt;\[&lt;/string&gt;
    &lt;/dict&gt;
</snippet></ROW><ROW><id>13211184</id><snippet>    &lt;dict&gt;
        &lt;key&gt;include&lt;/key&gt;
        &lt;string&gt;#character-class&lt;/string&gt;
    &lt;/dict&gt;
</snippet></ROW><ROW><id>13211486</id><snippet>mkvirtualenv -p python2.7 --distribute mysite
cd ~/work
pinax-admin setup_project -b basic mysite
cd mysite
pip install -r requirements/base.txt
python manage.py collectstatic
python manage.py syncdb
python manage.py runserver 8001
</snippet></ROW><ROW><id>13211486</id><snippet># Additional directories which hold static files
STATICFILES_DIRS = [
    os.path.join(PROJECT_ROOT, "static"),
]
</snippet></ROW><ROW><id>13211486</id><snippet>static</snippet></ROW><ROW><id>13211486</id><snippet>bootstrap.min.css</snippet></ROW><ROW><id>13211486</id><snippet>.topbar-inner, .topbar .fill {
background-color: #222;
...
}
</snippet></ROW><ROW><id>13211486</id><snippet>static</snippet></ROW><ROW><id>13211486</id><snippet>templates/site_base.html</snippet></ROW><ROW><id>13211486</id><snippet>.topbar-inner, .topbar .fill {
    background-color: red;
    background-image: -webkit-linear-gradient(top, #333, #FF4242);
    background-image: -o-linear-gradient(top, #333, #FF4242);
    background-image: linear-gradient(top, #333, #FF4242);
}
</snippet></ROW><ROW><id>13211486</id><snippet>mysite/templates/homepage.html</snippet></ROW><ROW><id>13211486</id><snippet>{% extends "banner_base.html" %}

{% load i18n %}

{% block extra_head %}
&lt;link rel="stylesheet" href="{{ STATIC_URL }}css/my_custom_stuff.css"&gt;
{% endblock %}

{% block head_title %}{% trans "Welcome" %}{% endblock %}

{% block body_class %}home{% endblock %}

{% block banner %}
    &lt;h1&gt;{% trans "Welcome to Pinax" %}&lt;/h1&gt;
    &lt;p&gt;
        {% blocktrans %}
        &lt;b&gt;Pinax&lt;/b&gt; is a &lt;a href="http://djangoproject.com/"&gt;Django&lt;/a&gt;
        project intended to provide a starting point for websites. By
        integrating numerous reusable Django apps to take care of the
        things that many sites have in common, it lets you focus on what
        makes your site different.
        {% endblocktrans %}
    &lt;/p&gt;

    &lt;h2&gt;About Zero Project&lt;/h2&gt;
    &lt;p&gt;
        {% blocktrans %}
        This project lays the foundation for all other Pinax starter projects. It
        provides the project directory layout and some key infrastructure apps on
        which the other starter projects are based.
        {% endblocktrans %}
    &lt;/p&gt;

    &lt;p&gt;&lt;a href="http://pinaxproject.com/" class="btn primary large"&gt;{% trans "Learn more »" %}&lt;/a&gt;&lt;/p&gt;
{% endblock %}
</snippet></ROW><ROW><id>13211486</id><snippet>{% block extra_head %}
&lt;link rel="stylesheet" href="{{ STATIC_URL }}css/my_custom_stuff.css"&gt;
{% endblock %}
</snippet></ROW><ROW><id>13211486</id><snippet>mysite/templates/site_base.html</snippet></ROW><ROW><id>13211486</id><snippet>my_custom_stuff.css</snippet></ROW><ROW><id>13211486</id><snippet>my_custom_stuff.css</snippet></ROW><ROW><id>13211486</id><snippet>mysite/static/css</snippet></ROW><ROW><id>13211513</id><snippet>happyBirthdayEmily</snippet></ROW><ROW><id>13211513</id><snippet>&gt;&gt;&gt;birthday2.happyBirthdayEmily()
</snippet></ROW><ROW><id>13211513</id><snippet>birthday2.</snippet></ROW><ROW><id>13211513</id><snippet>happyBirthdayEmily()</snippet></ROW><ROW><id>13211513</id><snippet>birthday2</snippet></ROW><ROW><id>13211513</id><snippet>birthday2</snippet></ROW><ROW><id>13211513</id><snippet>happyBirthdayEmily()</snippet></ROW><ROW><id>13211561</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>13211561</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [[k,len(list(g))] for k,g in groupby("baaaaab")]
[['b', 1], ['a', 5], ['b', 1]]
</snippet></ROW><ROW><id>13211561</id><snippet>strs = raw_input("Enter a string:")
lis=[]
for x in strs:
   if len(lis)!=0:
      if lis[-1][0]==x:
         lis[-1][1]+=1
      else:
         lis.append([x,1])
   else:
       lis.append([x,1])         
print lis                   
</snippet></ROW><ROW><id>13211561</id><snippet>Enter a string:aaabbbcccdef
[['a', 3], ['b', 3], ['c', 3], ['d', 1], ['e', 1], ['f', 1]]
</snippet></ROW><ROW><id>13211581</id><snippet>whatever</snippet></ROW><ROW><id>13211581</id><snippet>generateChars</snippet></ROW><ROW><id>13211581</id><snippet>Password</snippet></ROW><ROW><id>13211581</id><snippet>PasswordHelper</snippet></ROW><ROW><id>13211581</id><snippet>Password.PasswordHelper.generateChars(3)
</snippet></ROW><ROW><id>13211581</id><snippet>from Password import PasswordHelper
...
PasswordHelper.generateChars(3)
</snippet></ROW><ROW><id>13211845</id><snippet>functools.partial</snippet></ROW><ROW><id>13211845</id><snippet>cosine</snippet></ROW><ROW><id>13211845</id><snippet>A</snippet></ROW><ROW><id>13211845</id><snippet>map</snippet></ROW><ROW><id>13211845</id><snippet>M</snippet></ROW><ROW><id>13211845</id><snippet>map(partial(cosine,v=A), M.transpose())
</snippet></ROW><ROW><id>13212195</id><snippet>while</snippet></ROW><ROW><id>13212195</id><snippet>else</snippet></ROW><ROW><id>13212239</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(4).reshape(4,1)
&gt;&gt;&gt; a
array([[0],
       [1],
       [2],
       [3]])
&gt;&gt;&gt; a.ravel()
array([0, 1, 2, 3])
&gt;&gt;&gt; a.squeeze()
array([0, 1, 2, 3])
&gt;&gt;&gt; a[:,0]
array([0, 1, 2, 3])
&gt;&gt;&gt;
&gt;&gt;&gt; a[:,0].shape
(4,)
</snippet></ROW><ROW><id>13212278</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.finfo(np.double).eps
2.2204460492503131e-16
&gt;&gt;&gt; np.finfo(np.single).eps
1.1920929e-07
</snippet></ROW><ROW><id>13212309</id><snippet>class Proxy(object):
    def __init__(self, obj):
        object.__setattr__(self, '__obj', obj)
    def __getattribute__(self, name):
        return getattr(object.__getattribute__(self, '__obj'), name)


a = range(10)
p = Proxy(a)

p.append(10) # etc...
</snippet></ROW><ROW><id>13212309</id><snippet>__setattribute__</snippet></ROW><ROW><id>13212309</id><snippet>__delattribute__</snippet></ROW><ROW><id>13212309</id><snippet>append</snippet></ROW><ROW><id>13212501</id><snippet>Canvas.itemconfig</snippet></ROW><ROW><id>13212501</id><snippet>item = K.create_rectangle(x1,y1,x2,y2,options...)
K.itemconfig(item,options)
</snippet></ROW><ROW><id>13212501</id><snippet>Canvas.move</snippet></ROW><ROW><id>13212501</id><snippet>import Tkinter as tk

root = tk.Tk()
canvas = tk.Canvas(root)
canvas.pack()
item = canvas.create_rectangle(50, 25, 150, 75, fill="blue")

def callback():
    canvas.itemconfig(item,fill='red')

button = tk.Button(root,text='Push me!',command=callback)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>13212668</id><snippet>IMAPClient</snippet></ROW><ROW><id>13212668</id><snippet>imaplib</snippet></ROW><ROW><id>13212668</id><snippet>server.fetch([456], ['BODY[HEADER.FIELDS (FROM)]'])
# {456: {'BODY[HEADER.FIELDS (FROM)]': 'From: Facebook &lt;register+mr4k25sa@facebookmail.com&gt;\r\n\r\n', 'SEQ': 456}}
</snippet></ROW><ROW><id>13212668</id><snippet>server.fetch([456], ['BODY[TEXT]'])
# {456: {'BODY[TEXT]': "Hey Jon,\r\n\r\nYou recently entered a new contact email [snip]", 'SEQ': 456}}
</snippet></ROW><ROW><id>13212668</id><snippet>import email
m = server.fetch([456], ['RFC822'])
msg = email.message_from_string(m[456]['RFC822'])
print msg['from']
# Facebook &lt;register+mr4k25sa@facebookmail.com&gt;
from email.utils import parseaddr
print parseaddr(msg['from'])
# ('Facebook', 'register+mr4k25sa@facebookmail.com')
print msg.get_payload()
# content of email...
</snippet></ROW><ROW><id>13212725</id><snippet>True</snippet></ROW><ROW><id>13212725</id><snippet>&gt;&gt;&gt; a = (i for i in range(10))
&gt;&gt;&gt; bool(a)
True
</snippet></ROW><ROW><id>13212725</id><snippet>i</snippet></ROW><ROW><id>13212725</id><snippet>-'</snippet></ROW><ROW><id>13212725</id><snippet>range</snippet></ROW><ROW><id>13212767</id><snippet>CallableKlass</snippet></ROW><ROW><id>13212767</id><snippet>&gt;&gt;&gt; class Foo(object):
...     d = {'foo': 'bar'}
...     (lambda stuff: d[stuff])('foo')
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    class Foo(object):
  File "&lt;pyshell#3&gt;", line 3, in Foo
    (lambda stuff: d[stuff])('foo')
  File "&lt;pyshell#3&gt;", line 3, in &lt;lambda&gt;
    (lambda stuff: d[stuff])('foo')
NameError: global name 'd' is not defined
&gt;&gt;&gt; class Foo(object):
...     d = {'foo': 'bar'}
...     def f(stuff):
...         d[stuff]
...     f('foo')
Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 1, in &lt;module&gt;
    class Foo(object):
  File "&lt;pyshell#4&gt;", line 5, in Foo
    f('foo')
  File "&lt;pyshell#4&gt;", line 4, in f
    d[stuff]
NameError: global name 'd' is not defined
</snippet></ROW><ROW><id>13212869</id><snippet>avatar_size = (59,59)
method = Image.NEAREST if im.size == avatar_size else Image.ANTIALIAS
formatted_im = ImageOps.fit(im, avatar_size, method = method, centering = (0.5,0.5)) 
formatted_im.save('foo.jpg', 'JPEG', quality=95)
</snippet></ROW><ROW><id>13212881</id><snippet>nonlocal</snippet></ROW><ROW><id>13212881</id><snippet>def foo():
    def bar():
        foo.foobar = 'foobaz'  #change the function attribute

    foo.foobar = 'foobar'     #declare as function attribute
    print foo.foobar
    bar()
    print foo.foobar
foo() 
</snippet></ROW><ROW><id>13212881</id><snippet>foobar
foobaz
</snippet></ROW><ROW><id>13213021</id><snippet>newFile.write(str(random.randint(0, 1000))+'\n')
</snippet></ROW><ROW><id>13213021</id><snippet>   with tempfile.NamedTemporaryFile(mode = 'w+', delete = False) as newFile:
</snippet></ROW><ROW><id>13213021</id><snippet>modfile</snippet></ROW><ROW><id>13213021</id><snippet>   return newFile.name
</snippet></ROW><ROW><id>13213021</id><snippet>squared_num</snippet></ROW><ROW><id>13213021</id><snippet>filename = modfile(file_len)
output = squared_num(filename)
</snippet></ROW><ROW><id>13213021</id><snippet>squared_num</snippet></ROW><ROW><id>13213021</id><snippet>with open(filename, 'r') as f:
    for l in f:
        exp = float(l)**2       # `l` is a string. Convert to float before squaring
        output_box.append(exp)  # build output_box with append
</snippet></ROW><ROW><id>13213021</id><snippet>import random, tempfile 

def modfile(file_len):
       with tempfile.NamedTemporaryFile(mode = 'w+', delete = False) as newFile:
            for x in range(file_len):
                 newFile.write(str(random.randint(0, 1000))+'\n')
            print(newFile)
       return newFile.name

# Squares random numbers in the file and returns them as a list.
def squared_num(filename):
    output_box = list()
    with open(filename, 'r') as f:
        for l in f:
            exp = float(l)**2
            output_box.append(exp)
    print(output_box)
    return output_box

print("This program reads a file with numbers in it - i.e. prints numbers into a blank file - and returns their conservative squares.")
file_len = random.randint(1, 100)
filename = modfile(file_len)
output = squared_num(filename)
print("The squared numbers are:")
print(output)
</snippet></ROW><ROW><id>13213021</id><snippet>modfile</snippet></ROW><ROW><id>13213021</id><snippet>squared_num</snippet></ROW><ROW><id>13213047</id><snippet>msg</snippet></ROW><ROW><id>13213047</id><snippet>message_lines = msg.get_payload().splitlines()
</snippet></ROW><ROW><id>13213047</id><snippet>for line in message_lines:
    if 'Walmart' in line:
        pass # do whatever
</snippet></ROW><ROW><id>13213047</id><snippet>(retcode, messages) = conn.search(None, '(UNSEEN) (TEXT walmart)')
</snippet></ROW><ROW><id>13213047</id><snippet>(retcode, messages) = conn.search(None, '(UNSEEN) (SUBJECT Thanks for your Walmart.com Order)')
</snippet></ROW><ROW><id>13213165</id><snippet>StaticText</snippet></ROW><ROW><id>13213165</id><snippet>class CustomStatusBar(wx.StatusBar):
    """A custom status bar for displaying the application version in the bottom
    right corner."""
    def __init__(self, parent):
        wx.StatusBar.__init__(self, parent, -1)

        self.SetFieldsCount(2)
        self.SetStatusWidths([-1, -1])

        # Set up the version label.
        self.version_label = wx.StaticText(self, -1, 'Version: ' + VERSION)
        self.reposition_version_label()

        # Listen to the resize event.
        self.Bind(wx.EVT_SIZE, self.on_resize)

    def on_resize(self, event):
        self.reposition_version_label()

    def reposition_version_label(self):
        # Get the rect of the second field.
        field_rect = self.GetFieldRect(1)
        label_rect = self.version_label.GetRect()

        # Reduce the width of the field rect to the width of the label rect and
        # increase it's x value by the same about. This will result in it being
        # right aligned.
        width_diff = field_rect.width - label_rect.width

        field_rect.width = label_rect.width
        field_rect.x += width_diff

        # On windows, the text is a little too high up, so increase the Y value
        # a little.
        if sys.platform == 'win32':
            field_rect.y += 3

        # Set the resulting rect to the label.
        self.version_label.SetRect(field_rect)
</snippet></ROW><ROW><id>13213165</id><snippet>Frame</snippet></ROW><ROW><id>13213165</id><snippet>self.statusbar = CustomStatusBar(self)
self.SetStatusBar(self.statusbar)
</snippet></ROW><ROW><id>13213165</id><snippet>def set_status_text(text):
    self.statusbar.SetStatusText(text, 0)
</snippet></ROW><ROW><id>13213303</id><snippet>In [10]: def printNumber(num=None):
    return num if num is not None else random()
   ....: 

In [12]: printNumber()
Out[12]: 0.9620725546432438

In [13]: printNumber()
Out[13]: 0.8188258892156928

In [15]: printNumber(10)
Out[15]: 10
</snippet></ROW><ROW><id>13213487</id><snippet>s1</snippet></ROW><ROW><id>13213487</id><snippet>s2</snippet></ROW><ROW><id>13213487</id><snippet>s1</snippet></ROW><ROW><id>13213487</id><snippet>s2</snippet></ROW><ROW><id>13213487</id><snippet>s1[1:]</snippet></ROW><ROW><id>13213487</id><snippet>s2[1:]</snippet></ROW><ROW><id>13213487</id><snippet>def recstr(s1, s2, answer=''):
    if not s1:
        return answer+s2
    if not s2:
        return answer+s1
    return recstr(s1[1:], s2[1:], answer+s1[0]+s2[0])

In [15]: s1,s2 = 'abcd', 'xyz'

In [16]: print recstr(s1,s2)
axbyczd
</snippet></ROW><ROW><id>13213487</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>13213487</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>13213487</id><snippet>In [23]: zips = itertools.izip_longest(s1,s2, fillvalue='')

In [24]: ''.join(itertools.chain.from_iterable(zips))
Out[24]: 'axbyczd'
</snippet></ROW><ROW><id>13213487</id><snippet>fillvalue</snippet></ROW><ROW><id>13213487</id><snippet>izip_longest</snippet></ROW><ROW><id>13213524</id><snippet>random.uniform()</snippet></ROW><ROW><id>13213524</id><snippet>N</snippet></ROW><ROW><id>13213524</id><snippet>a &lt;= N &lt;= b</snippet></ROW><ROW><id>13213524</id><snippet>a &lt;= b</snippet></ROW><ROW><id>13213524</id><snippet>b &lt;= N &lt;= a</snippet></ROW><ROW><id>13213524</id><snippet>b &lt; a</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>a + (b-a) * random()</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>uniform()</snippet></ROW><ROW><id>13213524</id><snippet>random.random()</snippet></ROW><ROW><id>13213524</id><snippet>a</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>a + (b-a) * (1.0 - epsilon/2)</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>b</snippet></ROW><ROW><id>13213524</id><snippet>epsilon</snippet></ROW><ROW><id>13213524</id><snippet>sys.float_info</snippet></ROW><ROW><id>13213524</id><snippet>1.0 - epsilon/2</snippet></ROW><ROW><id>13213524</id><snippet>random.random()</snippet></ROW><ROW><id>13213596</id><snippet>parseaddr</snippet></ROW><ROW><id>13213596</id><snippet>&gt;&gt;&gt; from email.utils import parseaddr
&gt;&gt;&gt; a = 'From: First Last &lt;first.last@domain.com&gt;'
&gt;&gt;&gt; parseaddr(a)
('First Last', 'first.last@domain.com')
</snippet></ROW><ROW><id>13213664</id><snippet>import hashlib

a = hashlib.md5('alsdkfjasldfjkasdlf')
b = a.hexdigest()
as_int = int(b, 16)
print bin(as_int)[2:]
# 11110000110010001100111010111001011010101011110001010000011010010010100111100
</snippet></ROW><ROW><id>13213759</id><snippet>In [2]: def foo():pass
   ...: 

In [3]: foo.bar="text"

In [4]: foo.bar
Out[4]: 'text'
</snippet></ROW><ROW><id>13213805</id><snippet>EOFError</snippet></ROW><ROW><id>13213805</id><snippet>input()</snippet></ROW><ROW><id>13213805</id><snippet>scores = []
while True:
    try:
        scores.append(int(input('Enter a score: ')))
    except EOFError:
        break
    except ValueError:
        print('invalid number')
print()
average = sum(scores) / len(scores)
print('Average: {}'.format(average))
print('Number of scores above average: {}'
      .format(sum(x &gt; average for x in scores)))
</snippet></ROW><ROW><id>13213805</id><snippet>eval</snippet></ROW><ROW><id>13213831</id><snippet>tweepy</snippet></ROW><ROW><id>13213831</id><snippet>Cursor</snippet></ROW><ROW><id>13213831</id><snippet>n</snippet></ROW><ROW><id>13213831</id><snippet>Cursor</snippet></ROW><ROW><id>13213831</id><snippet>api.followers_ids()</snippet></ROW><ROW><id>13213885</id><snippet>print u'This is a full block: \u2588'
</snippet></ROW><ROW><id>13213904</id><snippet>import os
import pygame
from pygame.locals import *

def load_sliced_sprites(w, h, filename):
    '''
    Specs :
        Master can be any height.
        Sprites frames width must be the same width
        Master width must be len(frames)*frame.width
    Assuming you ressources directory is named "resources"
    '''
    images = []
    master_image = pygame.image.load(os.path.join('resources', filename)).convert_alpha()

    master_width, master_height = master_image.get_size()
    for i in xrange(int(master_width/w)):
        images.append(master_image.subsurface((i*w,0,w,h)))
    return images



class AnimatedSprite(pygame.sprite.Sprite):
    def __init__(self, images, fps = 10):
        pygame.sprite.Sprite.__init__(self)
        self._images = images

        # Track the time we started, and the time between updates.
        # Then we can figure out when we have to switch the image.
        self._start = pygame.time.get_ticks()
        self._delay = 1000 / fps
        self._last_update = 0
        self._frame = 0

        # Call update to set our first image.
        self.update(pygame.time.get_ticks())

    def update(self, t):
        # Note that this doesn't work if it's been more that self._delay
        # time between calls to update(); we only update the image once
        # then, but it really should be updated twice.

        if t - self._last_update &gt; self._delay:
            self._frame += 1
            #if self._frame &gt;= len(self._images): self._frame = 0
            if self._frame &lt; len(self._images):
                self.image = self._images[self._frame]
                self._last_update = t

    def getimage(self):
        return self.image

    def isfinished(self):
        if self._frame == len(self._images):
            return True
        else:
            return False

    def reset(self):
        if self._frame &gt;= len(self._images): self._frame = 0

if __name__ == "__main__":
    print "the game"
    pygame.init()
    screen = pygame.display.set_mode((800,600))

    images = load_sliced_sprites(100, 71, "spinning_roundhouse_kick.png")
    sprite = AnimatedSprite(images, 20)
    #while pygame.event.poll().type != KEYDOWN:
    while True:
        screen.fill((255,255,255))
        event = pygame.event.poll()
        if event.type == KEYDOWN and event.key == K_a:
            #print "keydown"
            #for image in images:
            while True:
                #print "frame"
                #print sprite._frame
                #print sprite.isfinished()
                time = pygame.time.get_ticks()
                sprite.update(time)
                screen.blit(sprite.getimage(), (0,0))
                pygame.display.update()
                #sprite.reset()
                if sprite.isfinished() == True:
                    sprite.reset()
                    break

        #time = pygame.time.get_ticks()
        #sprite.update(time)
        #screen.blit(sprite.image, (0,0))

        pygame.display.update()
</snippet></ROW><ROW><id>13214012</id><snippet>#TODO: change user agent string
hdr = { 'User-Agent' : 'super happy flair bot by /u/spladug' }
req = urllib2.Request(url, headers=hdr)
html = urllib2.urlopen(req).read()
</snippet></ROW><ROW><id>13214012</id><snippet>httplib</snippet></ROW><ROW><id>13214012</id><snippet>import httplib
import time

lst = """
science
scifi
"""

hdr= { 'User-Agent' : 'super happy flair bot by /u/spladug' }
conn = httplib.HTTPConnection('www.reddit.com')
for name in lst.split():
    conn.request('GET', '/r/'+name, headers=hdr)
    print conn.getresponse().read()
    time.sleep(2)
conn.close()
</snippet></ROW><ROW><id>13214054</id><snippet>points_x = int((x_sup - x_inf) / h)
points_y = int((y_sup - y_inf) / h)
</snippet></ROW><ROW><id>13214054</id><snippet>a = np.zeros((points_y, points_x))
</snippet></ROW><ROW><id>13214054</id><snippet>for i in xrange(points_y):
  for j in xrange(points_x):
    a[i,j] = i
</snippet></ROW><ROW><id>13214054</id><snippet>a = np.zeros((5,6))
for i in xrange(5):
  for j in xrange(6):
    a[i,j] = i

array([[ 0.,  0.,  0.,  0.,  0.,  0.],
   [ 1.,  1.,  1.,  1.,  1.,  1.],
   [ 2.,  2.,  2.,  2.,  2.,  2.],
   [ 3.,  3.,  3.,  3.,  3.,  3.],
   [ 4.,  4.,  4.,  4.,  4.,  4.]])
</snippet></ROW><ROW><id>13214159</id><snippet>pip</snippet></ROW><ROW><id>13214159</id><snippet>pip install -t . {package-name}</snippet></ROW><ROW><id>13214200</id><snippet>[x + y for x, y in zip(string, string[i:])]
</snippet></ROW><ROW><id>13214200</id><snippet>i</snippet></ROW><ROW><id>13214200</id><snippet>&gt;&gt;&gt; string = "BCVDBCVCBCBD"
&gt;&gt;&gt; i = 2
&gt;&gt;&gt; [x + y for x, y in zip(string, string[i:])]
['BV', 'CD', 'VB', 'DC', 'BV', 'CC', 'VB', 'CC', 'BB', 'CD']
</snippet></ROW><ROW><id>13214222</id><snippet>import socks
import socket

# Can be socks4/5
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS4,'127.0.0.1', 9050)
socket.socket = socks.socksocket

# Magic!
def getaddrinfo(*args):
    return [(socket.AF_INET, socket.SOCK_STREAM, 6, '', (args[0], args[1]))]
socket.getaddrinfo = getaddrinfo

import urllib
</snippet></ROW><ROW><id>13214343</id><snippet>def f():
    # some magic code here

def g():
    f()
</snippet></ROW><ROW><id>13214343</id><snippet>g()</snippet></ROW><ROW><id>13214414</id><snippet>import functools


def catch_wrap(on_err):
    def wrapper(func):
        @functools.wraps(func)
        def inner(*args, **kw):
            try:
                return func(*args, **kw)
            except Exception:
                return on_err
        return inner
    return wrapper
</snippet></ROW><ROW><id>13214414</id><snippet>@catch_wrap('SPAM!')
def doer():
    """
    YUP
    """
    1 / 0
    return 'EGGS!'


print doer()
print doer.__doc__
</snippet></ROW><ROW><id>13214592</id><snippet>import httplib2

from apiclient.discovery import build
from oauth2client.client import SignedJwtAssertionCredentials

# REPLACE WITH YOUR Project ID
PROJECT_NUMBER = 'XXXXXXXXXXX'
# REPLACE WITH THE SERVICE ACCOUNT EMAIL FROM GOOGLE DEV CONSOLE
SERVICE_ACCOUNT_EMAIL = 'XXXXX@developer.gserviceaccount.com'

# OBTAIN THE KEY FROM THE GOOGLE APIs CONSOLE
# More instructions here: http://goo.gl/w0YA0
f = file('key.p12', 'rb')
key = f.read()
f.close()

credentials = SignedJwtAssertionCredentials(
    SERVICE_ACCOUNT_EMAIL,
    key,
    scope='https://www.googleapis.com/auth/bigquery')

http = httplib2.Http()
http = credentials.authorize(http)

service = build('bigquery', 'v2')
datasets = service.datasets()
response = datasets.list(projectId=PROJECT_NUMBER).execute(http)

print 'Dataset list:'
for dataset in response['datasets']:
  print '%s' % dataset['datasetReference']['datasetId']
</snippet></ROW><ROW><id>13214728</id><snippet>import webbrowser
webbrowser.open_new('steam://defrag/440')
</snippet></ROW><ROW><id>13214945</id><snippet>matrix = [
   ["Ah!",  "We do have some Camembert", "sir"],
   ["It's a bit", "runny", "sir"],
   ["Well,",  "as a matter of fact it's", "very runny, sir"],
   ["I think it's runnier",  "than you",  "like it, sir"]
]

s = [[str(e) for e in row] for row in matrix]
lens = [max(map(len, col)) for col in zip(*s)]
fmt = '\t'.join('{{:{}}}'.format(x) for x in lens)
table = [fmt.format(*row) for row in s]
print '\n'.join(table)
</snippet></ROW><ROW><id>13214945</id><snippet>Ah!                     We do have some Camembert   sir            
It's a bit              runny                       sir            
Well,                   as a matter of fact it's    very runny, sir
I think it's runnier    than you                    like it, sir  
</snippet></ROW><ROW><id>13215122</id><snippet>rstrip</snippet></ROW><ROW><id>13215255</id><snippet>animation</snippet></ROW><ROW><id>13215255</id><snippet>from Tkinter import *
import time

class alien(object):
     def __init__(self):
        self.root = Tk()
        self.canvas = Canvas(self.root, width=400, height = 400)
        self.canvas.pack()
        self.alien1 = self.canvas.create_oval(20, 260, 120, 360, outline='white',         fill='blue')
        self.alien2 = self.canvas.create_oval(2, 2, 40, 40, outline='white', fill='red')
        self.canvas.pack()
        self.root.after(0, self.animation)
        self.root.mainloop()

     def animation(self):
        track = 0
        while True:
            x = 5
            y = 0
            if track == 0:
               for i in range(0,51):
                    time.sleep(0.025)
                    self.canvas.move(self.alien1, x, y)
                    self.canvas.move(self.alien2, x, y)
                    self.canvas.update()
               track = 1
               print "check"

            else:
               for i in range(0,51):
                    time.sleep(0.025)
                    self.canvas.move(self.alien1, -x, y)
                    self.canvas.move(self.alien2, -x, y)
                    self.canvas.update()
               track = 0
            print track

alien()
</snippet></ROW><ROW><id>13215289</id><snippet>open('%r.csv', 'wb') % names[q]</snippet></ROW><ROW><id>13215289</id><snippet>open('%r.csv'  % names[q], 'wb')</snippet></ROW><ROW><id>13215289</id><snippet>names[q]</snippet></ROW><ROW><id>13215289</id><snippet>file</snippet></ROW><ROW><id>13215289</id><snippet>TypeError</snippet></ROW><ROW><id>13215289</id><snippet>format</snippet></ROW><ROW><id>13215289</id><snippet>%r.csv</snippet></ROW><ROW><id>13215289</id><snippet>open</snippet></ROW><ROW><id>13215289</id><snippet># Tuples
data = [("cat", [1, 2, 3, 4]), ("dog", [5, 6, 7])]
for name, file_data in data:
    print name, "=&gt;", file_data

# Dictionary (assumes only one instance of name per data point)
data = {"cat": [1, 2, 3, 4], "dog": [5, 6, 7]}
for name, file_data in data.items():
    print name, "=&gt;", file_data

# Class instances (ignore this one if you haven't done any OO before)
# (You don't need it if you don't *know* you need it).
class MyDataType(object):
    def __init__(self, name, data):
        self.name = name
        self.data = data

data = [MyDataType("cat", [1, 2, 3, 4]), MyDataType("dog", [5, 6, 7])]
for data_point in data:
    print data_point.name, "=&gt;", data_point.data
</snippet></ROW><ROW><id>13215392</id><snippet>__init__.py</snippet></ROW><ROW><id>13215392</id><snippet>- somepackage (Folder)
    - __init__.py (File)
    - somemodule.py (File)
        - SomeClass (Code)
        - some_function (Code)
</snippet></ROW><ROW><id>13215904</id><snippet>isinstance(foo, str)</snippet></ROW><ROW><id>13215904</id><snippet>bytes</snippet></ROW><ROW><id>13215904</id><snippet>str</snippet></ROW><ROW><id>13215904</id><snippet>unicode</snippet></ROW><ROW><id>13215904</id><snippet>basestring</snippet></ROW><ROW><id>13215904</id><snippet>str</snippet></ROW><ROW><id>13215904</id><snippet>bytes</snippet></ROW><ROW><id>13215904</id><snippet>bytes</snippet></ROW><ROW><id>13215904</id><snippet>str</snippet></ROW><ROW><id>13215904</id><snippet>bytes</snippet></ROW><ROW><id>13215904</id><snippet>isinstance(foo, (str, bytes))</snippet></ROW><ROW><id>13215998</id><snippet>open</snippet></ROW><ROW><id>13215998</id><snippet>CreateFile</snippet></ROW><ROW><id>13215998</id><snippet>IOError</snippet></ROW><ROW><id>13215998</id><snippet>r+</snippet></ROW><ROW><id>13215998</id><snippet>dwAccessMode</snippet></ROW><ROW><id>13215998</id><snippet>GENERIC_READ|GENERIC_WRITE</snippet></ROW><ROW><id>13215998</id><snippet>dwCreationDisposition</snippet></ROW><ROW><id>13215998</id><snippet>OPEN_EXISTING</snippet></ROW><ROW><id>13215998</id><snippet>w</snippet></ROW><ROW><id>13215998</id><snippet>dwAccessMode</snippet></ROW><ROW><id>13215998</id><snippet>GENERIC_WRITE</snippet></ROW><ROW><id>13215998</id><snippet>dwCreationDisposition</snippet></ROW><ROW><id>13215998</id><snippet>CREATE_ALWAYS</snippet></ROW><ROW><id>13215998</id><snippet>CreateFile</snippet></ROW><ROW><id>13215998</id><snippet>CREATE_ALWAYS</snippet></ROW><ROW><id>13215998</id><snippet>FILE_ATTRIBUTE_NORMAL</snippet></ROW><ROW><id>13215998</id><snippet>CreateFile</snippet></ROW><ROW><id>13215998</id><snippet>ERROR_ACCESS_DENIED</snippet></ROW><ROW><id>13215998</id><snippet>FILE_ATTRIBUTE_HIDDEN</snippet></ROW><ROW><id>13215998</id><snippet>FILE_ATTRIBUTE_SYSTEM</snippet></ROW><ROW><id>13215998</id><snippet>CreateFile</snippet></ROW><ROW><id>13215998</id><snippet>FILE_ATTRIBUTE_HIDDEN</snippet></ROW><ROW><id>13215998</id><snippet>dwFlagsAndAttributes</snippet></ROW><ROW><id>13215998</id><snippet>FILE_ATTRIBUTE_NORMAL</snippet></ROW><ROW><id>13216076</id><snippet>&gt;&gt;&gt; bisect.bisect_left(pj, d1)
1
&gt;&gt;&gt; pj[bisect.bisect_left(pj, d1)]
datetime.datetime(1922, 1, 6, 0, 0)
</snippet></ROW><ROW><id>13216084</id><snippet>cp437</snippet></ROW><ROW><id>13216084</id><snippet>print u'\u2022'
</snippet></ROW><ROW><id>13216084</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>13216084</id><snippet>T:\&gt; set PYTHONIOENCODING=cp437:xmlcharrefreplace
T:\&gt; python your_script.py
</snippet></ROW><ROW><id>13216084</id><snippet>print u'\u2022'.encode('cp437', 'xmlcharrefreplace')
</snippet></ROW><ROW><id>13216084</id><snippet>&lt;build_location/&gt;</snippet></ROW><ROW><id>13216084</id><snippet>import sys
from xml.etree import cElementTree as etree

input_file = sys.stdin # filename or file object
tree = etree.parse(input_file)
print('\n'.join(elem.text for elem in tree.iter('build_location')))
</snippet></ROW><ROW><id>13216084</id><snippet>iterparse()</snippet></ROW><ROW><id>13216084</id><snippet>import sys
from xml.etree import cElementTree as etree

input_file = sys.stdin
context = iter(etree.iterparse(input_file, events=('start', 'end')))
_, root = next(context) # get root element
for event, elem in context:
    if event == 'end' and elem.tag == 'build_location':
       print(elem.text)
       root.clear() # free memory
</snippet></ROW><ROW><id>13216161</id><snippet>import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.finance import candlestick
from matplotlib.finance import volume_overlay3
from matplotlib.dates import num2date
from matplotlib.dates import date2num
import matplotlib.mlab as mlab
import datetime

datafile = 'data.csv'
r = mlab.csv2rec(datafile, delimiter=';')

# the dates in my example file-set are very sparse (and annoying) change the dates to be sequential
for i in range(len(r)-1):
    r['date'][i+1] = r['date'][i] + datetime.timedelta(days=1)

candlesticks = zip(date2num(r['date']),r['open'],r['close'],r['max'],r['min'],r['volume'])

fig = plt.figure()
ax = fig.add_subplot(1,1,1)

ax.set_ylabel('Quote ($)', size=20)
candlestick(ax, candlesticks,width=1,colorup='g', colordown='r')

# shift y-limits of the candlestick plot so that there is space at the bottom for the volume bar chart
pad = 0.25
yl = ax.get_ylim()
ax.set_ylim(yl[0]-(yl[1]-yl[0])*pad,yl[1])

# create the second axis for the volume bar-plot
ax2 = ax.twinx()


# set the position of ax2 so that it is short (y2=0.32) but otherwise the same size as ax
ax2.set_position(matplotlib.transforms.Bbox([[0.125,0.1],[0.9,0.32]]))

# get data from candlesticks for a bar plot
dates = [x[0] for x in candlesticks]
dates = np.asarray(dates)
volume = [x[5] for x in candlesticks]
volume = np.asarray(volume)

# make bar plots and color differently depending on up/down for the day
pos = r['open']-r['close']&lt;0
neg = r['open']-r['close']&gt;0
ax2.bar(dates[pos],volume[pos],color='green',width=1,align='center')
ax2.bar(dates[neg],volume[neg],color='red',width=1,align='center')

#scale the x-axis tight
ax2.set_xlim(min(dates),max(dates))
# the y-ticks for the bar were too dense, keep only every third one
yticks = ax2.get_yticks()
ax2.set_yticks(yticks[::3])

ax2.yaxis.set_label_position("right")
ax2.set_ylabel('Volume', size=20)

# format the x-ticks with a human-readable date. 
xt = ax.get_xticks()
new_xticks = [datetime.date.isoformat(num2date(d)) for d in xt]
ax.set_xticklabels(new_xticks,rotation=45, horizontalalignment='right')

plt.ion()
plt.show()
</snippet></ROW><ROW><id>13216413</id><snippet>In [71]: df
Out[71]: 
     speed  time
loc             
A       63     0
B       61     0
C       63     0
D       65     0
A       73     5
B       71     5
C       73     5
D       75     5

In [72]: df.reset_index().pivot('loc', 'time', 'speed')
Out[72]: 
time   0   5
loc         
A     63  73
B     61  71
C     63  73
D     65  75
</snippet></ROW><ROW><id>13216925</id><snippet>file</snippet></ROW><ROW><id>13216925</id><snippet>write</snippet></ROW><ROW><id>13216925</id><snippet>str</snippet></ROW><ROW><id>13216925</id><snippet>print</snippet></ROW><ROW><id>13216925</id><snippet>write(string)</snippet></ROW><ROW><id>13216925</id><snippet>None</snippet></ROW><ROW><id>13216925</id><snippet>sys.stdout</snippet></ROW><ROW><id>13216925</id><snippet>with open('redata.txt', 'w') as redata: # note that it will overwrite old content
    for i in range(randrange(5,11)):
        ...
        print('...', file=redata)
</snippet></ROW><ROW><id>13216925</id><snippet>open</snippet></ROW><ROW><id>13216999</id><snippet>['foo', '', '', '', '', 'spam', '', 'foo', '', '666'] 
</snippet></ROW><ROW><id>13216999</id><snippet>item.split()</snippet></ROW><ROW><id>13216999</id><snippet>for line in open('city.dat'):
    data = line.split()
    if data[-2] == 'CITYNAME':
       count += 1
       numbers += float(data[-1])
</snippet></ROW><ROW><id>13216999</id><snippet>data = map(lambda x: x.split(), open('city.dat'))
</snippet></ROW><ROW><id>13216999</id><snippet>filtered_cities = filter(lambda x: x[-2] == 'CITYNAME', data)
</snippet></ROW><ROW><id>13217010</id><snippet>incomingConnection</snippet></ROW><ROW><id>13217010</id><snippet>QTcpServer</snippet></ROW><ROW><id>13217010</id><snippet>incomingConnection</snippet></ROW><ROW><id>13217010</id><snippet>class Server(QObject):
    def __init__(self, parent=None):
        QObject.__init__(self)

    def incomingConnection(self, handle):
        print "incoming"
        self.client = Client(self)
        self.client.SetSocket(handle)

    def StartServer(self):
        self.server = QTcpServer()
        self.server.incomingConnection = self.incomingConnection
        if self.server.listen(QHostAddress("0.0.0.0"), 8888):
            print "Server is awake"    
        else:
            print "Server couldn't wake up"
</snippet></ROW><ROW><id>13217038</id><snippet>random.randint(a, b)</snippet></ROW><ROW><id>13217038</id><snippet>random.SystemRandom().randint(a, b)</snippet></ROW><ROW><id>13217038</id><snippet>os.urandom()</snippet></ROW><ROW><id>13217038</id><snippet>import random

r = random.SystemRandom()
s = "some string"
print(r.choice(s)) # print random character from the string
print(s[r.randrange(len(s))]) # same
</snippet></ROW><ROW><id>13217089</id><snippet>PyArg_ParseTuple()</snippet></ROW><ROW><id>13217089</id><snippet>CPython implementation details</snippet></ROW><ROW><id>13217089</id><snippet>PyArg_ParseTuple()</snippet></ROW><ROW><id>13217441</id><snippet>x = [(a,b,c) for c in range(1,1001) for b in range(1, c) for a in range(1,b) if a**2+b**2==c**2]
print x 
</snippet></ROW><ROW><id>13217450</id><snippet>os.system</snippet></ROW><ROW><id>13217450</id><snippet>os.popen</snippet></ROW><ROW><id>13217450</id><snippet>subprocess</snippet></ROW><ROW><id>13217450</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13217450</id><snippet>communicate()</snippet></ROW><ROW><id>13217450</id><snippet>check_output</snippet></ROW><ROW><id>13217450</id><snippet>&gt;&gt;&gt; subprocess.check_output(['ls', '-a'])
'.\n..\n'
</snippet></ROW><ROW><id>13217453</id><snippet>Warning</snippet></ROW><ROW><id>13217453</id><snippet>_warnings</snippet></ROW><ROW><id>13217453</id><snippet>_warnings</snippet></ROW><ROW><id>13217453</id><snippet>try:
    _warnings = Main.sanity_check()
except CustomException1, e:
    # handle exception
except CustomException2, e:
    # handle exception

for w in _warnings:
    if isinstance(w, NoSpaceWarning):
        pass # handle warning
    if isinstance(w, NewerVersionWarning):
        pass # handle warning
</snippet></ROW><ROW><id>13217871</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-A', action = 'store_true')
parser.add_argument('-B', action = 'store_true')
args, unk = parser.parse_known_args()

file_parser = argparse.ArgumentParser()
file_parser.add_argument('-C', action = 'store_true')
file_parser.add_argument('-D', action = 'store_true')
file_parser.add_argument('-V', "--variable-list")
file_parser.add_argument('file')

fargs=[]
n=len(unk)
while True:
        i=0
        for i in  range(n): # finding longest fully parsable tail
            Parsed, unkf = file_parser.parse_known_args(unk[i:n])
            if not unkf: break
        if i==n: # did not found parsable tail
            file_parser.parse_args(unk[0:n]) # cause error 
        else:
            fargs.append(Parsed)
            n=i
        if (n&lt;=0): break
fargs.reverse()

print args
for argl in fargs:
        print argl
</snippet></ROW><ROW><id>13217871</id><snippet>myscript.py -A -B -C -D file1 -C -V a,b,c file
</snippet></ROW><ROW><id>13217871</id><snippet>Namespace(A=True, B=True)
Namespace(C=True, D=True, file='file1', variable_list=None)
Namespace(C=True, D=False, file='file2', variable_list='a,b,c')
</snippet></ROW><ROW><id>13218016</id><snippet>10**9</snippet></ROW><ROW><id>13218016</id><snippet>a= [I]*N</snippet></ROW><ROW><id>13218016</id><snippet>1</snippet></ROW><ROW><id>13218066</id><snippet>entry</snippet></ROW><ROW><id>13218066</id><snippet>class App:    
    def __init__(self, master):
        self.e1 = Entry(master)
        self.e1.grid(row=1, column=0, sticky=N)
        Button(master, text="Start", command=self.OnButtonClick).grid(row=4, column=0)
</snippet></ROW><ROW><id>13218066</id><snippet>self.e1</snippet></ROW><ROW><id>13218066</id><snippet>OnButtonClick</snippet></ROW><ROW><id>13218066</id><snippet>s</snippet></ROW><ROW><id>13218066</id><snippet>    def OnButtonClick(self):
        value = self.e1.get()
</snippet></ROW><ROW><id>13218279</id><snippet>django-admin.py</snippet></ROW><ROW><id>13218279</id><snippet>-bash: django-admin.py: command not found
</snippet></ROW><ROW><id>13218279</id><snippet>/usr/local/lib/python2.X/site-packages/</snippet></ROW><ROW><id>13218279</id><snippet>sudo ln -s /usr/local/lib/python2.4/site-packages/django/bin/django-admin.py /usr/local/bin/django-admin.py
</snippet></ROW><ROW><id>13218279</id><snippet>/usr/local/lib/python2.6/dist-packages/</snippet></ROW><ROW><id>13218279</id><snippet>sudo ln -s /usr/local/lib/python2.6/dist-packages/django/bin/django-admin.py /usr/local/bin/django-admin.py
</snippet></ROW><ROW><id>13218279</id><snippet>sudo chmod +x /usr/local/bin/django-admin.py
</snippet></ROW><ROW><id>13218279</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>13218279</id><snippet>$ echo $PATH
/home/sebbe/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</snippet></ROW><ROW><id>13218279</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>13218349</id><snippet>from itertools import groupby
my_string= "google"
[(c, len(list(i))) for c, i in groupby(my_string)]
</snippet></ROW><ROW><id>13218471</id><snippet>ip</snippet></ROW><ROW><id>13218471</id><snippet>broadcast</snippet></ROW><ROW><id>13218471</id><snippet>from subprocess import call
call(["ifconfig", "eth0", "192.168.1.5", "netmask", "255.255.255.0", "broadcast", "192.168.2.255"])
</snippet></ROW><ROW><id>13218634</id><snippet>L[0]</snippet></ROW><ROW><id>13218634</id><snippet>L=[10,20,30]</snippet></ROW><ROW><id>13218634</id><snippet>L[0]</snippet></ROW><ROW><id>13218634</id><snippet>10</snippet></ROW><ROW><id>13218634</id><snippet>L[0]</snippet></ROW><ROW><id>13218634</id><snippet>10</snippet></ROW><ROW><id>13218634</id><snippet>L[0] = 100</snippet></ROW><ROW><id>13218634</id><snippet>0</snippet></ROW><ROW><id>13218634</id><snippet>100</snippet></ROW><ROW><id>13218634</id><snippet>10 = 100</snippet></ROW><ROW><id>13218634</id><snippet>10</snippet></ROW><ROW><id>13218634</id><snippet>L[0] = 100</snippet></ROW><ROW><id>13218634</id><snippet>L[0]</snippet></ROW><ROW><id>13218721</id><snippet>from django.db.models import Count

Device.objects.values('build').annotate(count=Count('pk'))
# -&gt; [{'build': '1', 'count': 3}, {'build': '2', 'count': 4}]
</snippet></ROW><ROW><id>13218750</id><snippet>variable1</snippet></ROW><ROW><id>13218750</id><snippet>variable2</snippet></ROW><ROW><id>13218750</id><snippet>cpu_temperature</snippet></ROW><ROW><id>13218750</id><snippet>hdd_temperature</snippet></ROW><ROW><id>13218750</id><snippet>temperatures = {
    "cpu": ...,
    "hdd": ...,
    ...
}
</snippet></ROW><ROW><id>13218891</id><snippet>model.predict</snippet></ROW><ROW><id>13218891</id><snippet>model = OLS(labels[:half], data[:half])
results = model.fit()
predictions = results.predict(data[half:])
</snippet></ROW><ROW><id>13218891</id><snippet>results = OLS(labels[:half], data[:half]).fit()
predictions = results.predict(data[half:])
</snippet></ROW><ROW><id>13218899</id><snippet>defaultdict</snippet></ROW><ROW><id>13218899</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for item in a:
...     d[item[0]].append(item[1:])
...
&gt;&gt;&gt; d
defaultdict(&lt;class 'list'&gt;, {'textVerify': [('AH', 'SELECT SERVICES'), 
('F7', 'est1&gt;')], 'imageVerify': [('duck.gif',), ('egg.gif',)], 
'audioVerify': [('091;0',)]})
</snippet></ROW><ROW><id>13218899</id><snippet>&gt;&gt;&gt; d['textVerify']
[('AH', 'SELECT SERVICES'), ('F7', 'test1&gt;')]
&gt;&gt;&gt; d['textVerify'][0][0]
'AH'
</snippet></ROW><ROW><id>13218899</id><snippet>OrderedDict</snippet></ROW><ROW><id>13218899</id><snippet>.setdefault()</snippet></ROW><ROW><id>13218899</id><snippet>&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for x in a:
...     d.setdefault(x[0],[]).append(x[1:])
...
&gt;&gt;&gt; d
OrderedDict([('textVerify', [('AH', 'SELECT SERVICES'), ('F7', 'test1&gt;')]), 
('audioVerify', [('091;0',)]), ('imageVerify', [('duck.gif',), ('egg.gif',)])])
</snippet></ROW><ROW><id>13218990</id><snippet>import time

def localTzname():
    offsetHour = time.timezone / 3600
    return 'Etc/GMT%+d' % offsetHour
</snippet></ROW><ROW><id>13218990</id><snippet>import time

def localTzname():
    if time.daylight:
        offsetHour = time.altzone / 3600
    else:
        offsetHour = time.timezone / 3600
    return 'Etc/GMT%+d' % offsetHour
</snippet></ROW><ROW><id>13219173</id><snippet>.get()</snippet></ROW><ROW><id>13219173</id><snippet>IndexError</snippet></ROW><ROW><id>13219173</id><snippet>us = User.objects.filter(id=someid)
try:
   u = us[0]
except IndexError:
    #item does not exist.
</snippet></ROW><ROW><id>13219338</id><snippet>get...</snippet></ROW><ROW><id>13219338</id><snippet>class TestClass(object):
    def __init__(self):
        pass

    @property
    def get_data1_from_db(self):
        data= {'1_testkey':'1_testvalue',"1_testkey2":"1_testvalue2"}
        return data.values()

    @property
    def get_data2_from_db(self):
        data= {'2_testkey':'2_testvalue',"2_testkey2":"2_testvalue2"}
        return data.values()

testcase = TestClass()
print testcase.get_data1_from_db  # ['1_testvalue', '1_testvalue2']
print testcase.get_data2_from_db  # ['2_testvalue', '2_testvalue2']
</snippet></ROW><ROW><id>13219401</id><snippet>compose</snippet></ROW><ROW><id>13219401</id><snippet>functools</snippet></ROW><ROW><id>13219401</id><snippet>compose(f,g)</snippet></ROW><ROW><id>13219401</id><snippet>f(g(x))</snippet></ROW><ROW><id>13219401</id><snippet>g(f(x))</snippet></ROW><ROW><id>13219401</id><snippet>h = lambda x: f(g(x))</snippet></ROW><ROW><id>13219401</id><snippet>compose</snippet></ROW><ROW><id>13219401</id><snippet># Scott Daniels, http://code.activestate.com/recipes/52902-function-composition/
# Lightly edited for style.
class Compose(object):
    '''Compose functions. compose(f,g,x...)(y...) = f(g(y...),x...))'''
    def __init__(self, f, g, *args, **kwargs):
        self.f = f
        self.g = g
        self.pending = args[:]
        self.kwargs = kwargs.copy()

    def __call__(self, *args, **kwargs):
        return self.f(self.g(*args, **kwargs), *self.pending, **self.kwargs)


class Starcompose:
    '''Compose functions. Starcompose(f,g,x...)(y...) = f(*g(y...),x...))'''
    TupleType = type(())

    def __init__(self, f, g, *args, **kwargs):
        self.f = f
        self.g = g
        self.pending = args[:]
        self.kwargs = kwargs.copy()

    def __call__(self, *args, **kwargs):
        mid = self.g(*args, **kwargs)
        if isinstance(mid, self.TupleType):
            return self.f(*(mid + self.pending), **self.kwargs)
        return self.f(mid, *self.pending, **self.kwargs)
</snippet></ROW><ROW><id>13219401</id><snippet>functional</snippet></ROW><ROW><id>13219401</id><snippet>compose_many</snippet></ROW><ROW><id>13219401</id><snippet>def compose(f1, f2):
    def composition(*args, **kwargs):
        return f1(f2(*args, **kwargs))
    return composition

def compose_many(*funcs):
    return reduce(compose, funcs)
</snippet></ROW><ROW><id>13219404</id><snippet>math</snippet></ROW><ROW><id>13219404</id><snippet>In [16]: strs="1,7320508075688772"

In [17]: num=float(".".join(strs.split(",")))

In [19]: math.ceil(num**2)
Out[19]: 3.0
</snippet></ROW><ROW><id>13219404</id><snippet>In [25]: math.ceil(1.414**2)
Out[25]: 2.0

In [26]: math.ceil(2.23606**2)
Out[26]: 5.0

In [28]: math.ceil(1.7320508075688772**2)
Out[28]: 3.0
</snippet></ROW><ROW><id>13219913</id><snippet>tree.xpath('//td[not(@class="naglczas")]')
</snippet></ROW><ROW><id>13219913</id><snippet>lxml.html.parse()</snippet></ROW><ROW><id>13220006</id><snippet>"FILE"</snippet></ROW><ROW><id>13220006</id><snippet>parser.add_argument("FILE", help="File to store as Gist", nargs="+")
</snippet></ROW><ROW><id>13220030</id><snippet>import itertools

a = [[1, 2, 3], [4, 5, 6]]
filler = ['cat']
print list(itertools.chain.from_iterable(zip(a, [filler] * len(a))))
</snippet></ROW><ROW><id>13220030</id><snippet>[[1, 2, 3], ['cat'], [4, 5, 6], ['cat']]
</snippet></ROW><ROW><id>13220128</id><snippet>setup.py</snippet></ROW><ROW><id>13220128</id><snippet>x = 5
mylist = [ 1, 2, 3]
y = myfunc(4)
z = myfunc(x)
</snippet></ROW><ROW><id>13220128</id><snippet>main.py</snippet></ROW><ROW><id>13220128</id><snippet>def myfunc(n):
    return n**2

def parse_setup(filename):
    globalsdict = {'__builtins__': None, 'myfunc': myfunc}  # put predefined things here
    localsdict = {}  # will be populated by executed script
    execfile(filename, globalsdict, localsdict)
    return localsdict

results = parse_setup('setup.py')
print results  # {'y': 16, 'x': 5, 'z': 25, 'mylist': [1, 2, 3]}
</snippet></ROW><ROW><id>13220164</id><snippet>np.bincount</snippet></ROW><ROW><id>13220164</id><snippet>import numpy as np
from collections import Counter

def increment_counts_in_matrix_from_chain(markov_chain, transition_counts_matrix):
    for i in xrange(1, len(markov_chain)):
        old_state = markov_chain[i - 1]
        new_state = markov_chain[i]
        transition_counts_matrix[old_state, new_state] += 1

def using_counter(chain, counts_matrix):
    counts = Counter(zip(chain[:-1], chain[1:]))
    from_, to = zip(*counts.keys())
    counts_matrix[from_, to] = counts.values()

def using_bincount(chain, counts_matrix):
    flat_coords = np.ravel_multi_index((chain[:-1], chain[1:]), counts_matrix.shape)
    counts_matrix.flat = np.bincount(flat_coords, minlength=counts_matrix.size)

def using_bincount_reshape(chain, counts_matrix):
    flat_coords = np.ravel_multi_index((chain[:-1], chain[1:]), counts_matrix.shape)
    return np.bincount(flat_coords, minlength=counts_matrix.size).reshape(counts_matrix.shape)
</snippet></ROW><ROW><id>13220164</id><snippet>In [373]: t = np.random.randint(0,50, 500)
In [374]: m1 = np.zeros((50,50))
In [375]: m2 = m1.copy()
In [376]: m3 = m1.copy()

In [377]: timeit increment_counts_in_matrix_from_chain(t, m1)
100 loops, best of 3: 2.79 ms per loop

In [378]: timeit using_counter(t, m2)
1000 loops, best of 3: 924 us per loop

In [379]: timeit using_bincount(t, m3)
10000 loops, best of 3: 57.1 us per loop
</snippet></ROW><ROW><id>13220164</id><snippet>flat</snippet></ROW><ROW><id>13220164</id><snippet>In [80]: timeit using_bincount_reshape(t, m3)
10000 loops, best of 3: 22.3 us per loop
</snippet></ROW><ROW><id>13220355</id><snippet>x</snippet></ROW><ROW><id>13220355</id><snippet>x = np.linspace(-5.0, 5.0, 10000)</snippet></ROW><ROW><id>13220355</id><snippet>exp(-x*x)</snippet></ROW><ROW><id>13220355</id><snippet>x</snippet></ROW><ROW><id>13220355</id><snippet>x = -10</snippet></ROW><ROW><id>13220355</id><snippet>x = 0</snippet></ROW><ROW><id>13220355</id><snippet>tcrit</snippet></ROW><ROW><id>13220355</id><snippet>odeint</snippet></ROW><ROW><id>13220355</id><snippet>y3 = integrate.odeint(df, f0, x, tcrit = [0])
</snippet></ROW><ROW><id>13220355</id><snippet>odeint</snippet></ROW><ROW><id>13220355</id><snippet>import matplotlib.pyplot as plt
import scipy.integrate as integrate
import numpy as np
import math


def euler(df, f0, x):
    h = x[1] - x[0]
    y = [f0]
    for i in xrange(len(x) - 1):
        y.append(y[i] + h * df(y[i], x[i]))
    return y


def i(df, f0, x):
    h = x[1] - x[0]
    y = [f0]
    y.append(y[0] + h * df(y[0], x[0]))
    for i in xrange(1, len(x) - 1):
        fn = df(y[i], x[i])
        fn1 = df(y[i - 1], x[i - 1])
        y.append(y[i] + (3 * fn - fn1) * h / 2)
    return y

def df(y, x):
   return 2.0 / np.sqrt(np.pi) * np.exp(-x * x)

if __name__ == "__main__":
    f0 = 0.0
    x = np.linspace(-10.0, 10.0, 10000)

    y1 = euler(df, f0, x)
    y2 = i(df, f0, x)
    y3 = integrate.odeint(df, f0, x, tcrit = [0])

    plt.plot(x, y1)
    plt.plot(x, y2)
    plt.plot(x, y3)
    plt.legend(["euler", "modified", "odeint"], loc='best')
    plt.grid(True)
    plt.show()
</snippet></ROW><ROW><id>13220546</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13220638</id><snippet>chdir "C:\Users\Sten Sootla\Documents\Chess project\"
python client.py
</snippet></ROW><ROW><id>13220674</id><snippet>forms.py</snippet></ROW><ROW><id>13220674</id><snippet>{{ form }}</snippet></ROW><ROW><id>13220674</id><snippet>forms.py</snippet></ROW><ROW><id>13220681</id><snippet>class my_large_num(object):

    def __init__(self):
        self.num_iterations = 0

    def __iter__(self):
        return self


    def next(self):
        if self.num_iterations &lt; 1:
            self.num_iterations += 1
            return 10**200
        else:
            raise StopIteration()
</snippet></ROW><ROW><id>13220681</id><snippet>import pickle
pickled_repr = pickle.dumps(my_large_num())
restored_object = pickle.loads(pickled_repr)
sum(restored_object)
</snippet></ROW><ROW><id>13220681</id><snippet>next()</snippet></ROW><ROW><id>13220681</id><snippet>StopIteration</snippet></ROW><ROW><id>13220681</id><snippet>10**200</snippet></ROW><ROW><id>13220941</id><snippet>:python import datetime
:%s/\v\w+\ \d{2}\ \d{4}/\=pyeval('datetime.datetime.strptime(vim.eval("submatch(0)"), "%b %d %Y").isoformat()')/g
</snippet></ROW><ROW><id>13220941</id><snippet>function Pyeval(expr)
    python import json
    python vim.command('return '+json.dumps(eval(vim.eval('a:expr'))))
endfunction
</snippet></ROW><ROW><id>13220941</id><snippet>pyeval</snippet></ROW><ROW><id>13220941</id><snippet>Pyeval</snippet></ROW><ROW><id>13220981</id><snippet>'.'</snippet></ROW><ROW><id>13220981</id><snippet>sys.path</snippet></ROW><ROW><id>13220981</id><snippet>os.chdir()</snippet></ROW><ROW><id>13220981</id><snippet>import lib.libcode</snippet></ROW><ROW><id>13220981</id><snippet>runit.py</snippet></ROW><ROW><id>13220981</id><snippet>#!/usr/bin/python
import  sys, os

if __name__ == "__main__":
    sys.path[0:0] = ['.']  # prefix current directory to list
    os.chdir('/home/moorepe/src/testpk')
    print "working path =", os.getcwd()
    import lib.libcode
</snippet></ROW><ROW><id>13220992</id><snippet>In [1]: f = open('ints','wb')
In [2]: x = numpy.int16(array([1,2,3]))
Out[2]: array([1, 2, 3], dtype=int16)
In [3]: f.write(x)
In [4]: f.close()
</snippet></ROW><ROW><id>13220992</id><snippet>In [5]: f = open('ints','wb')
In [6]: x = f.read()
In [7]: x
Out[7]: '\x01\x00\x02\x00\x03\x00'
In [8]: numpy.fromstring(x, dtype=np.uint16, count=3)
Out[8]: array([1, 2, 3], dtype=uint16)
</snippet></ROW><ROW><id>13221052</id><snippet>global</snippet></ROW><ROW><id>13221052</id><snippet>x = blah</snippet></ROW><ROW><id>13221052</id><snippet>data.pop(cnt)</snippet></ROW><ROW><id>13221052</id><snippet>global</snippet></ROW><ROW><id>13221088</id><snippet>email</snippet></ROW><ROW><id>13221088</id><snippet>from sqlalchemy.sql.expression import select

used_emails = [row.email for row
               in db.execute(select([halo4.c.email], halo4.c.email!='')]
</snippet></ROW><ROW><id>13221088</id><snippet>select()</snippet></ROW><ROW><id>13221088</id><snippet>SELECT</snippet></ROW><ROW><id>13221088</id><snippet>email</snippet></ROW><ROW><id>13221088</id><snippet>execute()</snippet></ROW><ROW><id>13221088</id><snippet>ResultProxy</snippet></ROW><ROW><id>13221088</id><snippet>email</snippet></ROW><ROW><id>13221088</id><snippet>ResultProxy</snippet></ROW><ROW><id>13221195</id><snippet>App.py</snippet></ROW><ROW><id>13221195</id><snippet>from Blog.Views import Home
</snippet></ROW><ROW><id>13221195</id><snippet>Blog</snippet></ROW><ROW><id>13221195</id><snippet>sys.path</snippet></ROW><ROW><id>13221195</id><snippet>python start.py</snippet></ROW><ROW><id>13221195</id><snippet>start.py</snippet></ROW><ROW><id>13221195</id><snippet>from Blog.Views import Home
</snippet></ROW><ROW><id>13221195</id><snippet>from Views import Home
</snippet></ROW><ROW><id>13221195</id><snippet>start.py</snippet></ROW><ROW><id>13221195</id><snippet>Blog</snippet></ROW><ROW><id>13221195</id><snippet>python start.py</snippet></ROW><ROW><id>13221195</id><snippet>start.py</snippet></ROW><ROW><id>13221195</id><snippet>Blog</snippet></ROW><ROW><id>13221195</id><snippet>Blog</snippet></ROW><ROW><id>13221195</id><snippet>from
Blog.Views ...</snippet></ROW><ROW><id>13221195</id><snippet>Blog</snippet></ROW><ROW><id>13221331</id><snippet>property</snippet></ROW><ROW><id>13221331</id><snippet>valuesonly</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method</snippet></ROW><ROW><id>13221331</id><snippet>def get_data_method(self):
    a = 2
</snippet></ROW><ROW><id>13221331</id><snippet>a</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method()</snippet></ROW><ROW><id>13221331</id><snippet>None</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method()</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method</snippet></ROW><ROW><id>13221331</id><snippet>valuesonly</snippet></ROW><ROW><id>13221331</id><snippet>valuesonly</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method</snippet></ROW><ROW><id>13221331</id><snippet>class DataMethodGetter(object):
    def __init__(self, parent):
        self.parent = parent

    @property
    def valuesonly(self):
        return format_as_values_only(self.parent.data)

class Testings(object):
    # rest of class def here
    def get_data_method(self):
        self.data = {'blah': 'blah'}
        return DataMethodGetter(self)
</snippet></ROW><ROW><id>13221331</id><snippet>valuesonly</snippet></ROW><ROW><id>13221331</id><snippet>Testing</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method</snippet></ROW><ROW><id>13221331</id><snippet>get_data_method(valuesonly=True)</snippet></ROW><ROW><id>13221497</id><snippet>return_inverse</snippet></ROW><ROW><id>13221497</id><snippet>In [203]: l[:,0]
Out[203]: array([2, 2, 2, 4, 4, 4, 8, 8, 8])

In [204]: np.unique(l[:,0], return_inverse = True)
Out[204]: (array([2, 4, 8]), array([0, 0, 0, 1, 1, 1, 2, 2, 2]))
</snippet></ROW><ROW><id>13221497</id><snippet>np.unique</snippet></ROW><ROW><id>13221497</id><snippet>l[:,0]</snippet></ROW><ROW><id>13221497</id><snippet>array([2, 4, 8])</snippet></ROW><ROW><id>13221497</id><snippet>l[:,0]</snippet></ROW><ROW><id>13221497</id><snippet>np.unique</snippet></ROW><ROW><id>13221497</id><snippet>import numpy as np
import matplotlib.pyplot as plt

l = np.array([ (2,2,1), (2,4,0), (2,8,0),
               (4,2,0), (4,4,1), (4,8,0),
               (8,2,0), (8,4,0), (8,8,1) ])

x, xrank = np.unique(l[:,0], return_inverse = True)
y, yrank = np.unique(l[:,1], return_inverse = True)

a = np.zeros((max(xrank)+1, max(yrank)+1))
a[xrank,yrank] = l[:,2]

fig = plt.figure()
ax = plt.subplot(111)

ax.pcolor(x, y, a)   
plt.show()
</snippet></ROW><ROW><id>13221576</id><snippet>web.application</snippet></ROW><ROW><id>13221576</id><snippet>Home</snippet></ROW><ROW><id>13221576</id><snippet>locals</snippet></ROW><ROW><id>13221576</id><snippet>globals</snippet></ROW><ROW><id>13221576</id><snippet>import web
class AppInstance(object):
    def __init__(self):
        from Views import Home
        self.urls = (
                "/", "Home",
                )
        self.app = web.application(self.urls, locals())
        #                                     ^^^^^^
    def run(self):
        self.app.run()
</snippet></ROW><ROW><id>13221576</id><snippet>import web
from Views import Home # &lt;-- Moved into global namespace
class AppInstance(object):
    def __init__(self):
        self.urls = (
                "/", "Home",
                )
        self.app = web.application(self.urls, globals())
    def run(self):
        self.app.run()
</snippet></ROW><ROW><id>13221751</id><snippet>class Moment(db.Model):
    user = db.IntegerProperty()
    index = db.IntegerProperty()
    date = db.DateTimeProperty()
    qx = db.FloatProperty()
    qy = db.FloatProperty()
    qz = db.FloatProperty()
    qw = db.FloatProperty()
    latitude = db.FloatProperty()
    longitude = db.FloatProperty()
    image = db.BlobProperty()

class UploadHandler(webapp2.RequestHandler):
    def post(self):
        obj = biplist.readPlistFromString(self.request.body)
        Moment(user = obj['user'],
               index = obj['index'],
               date = obj['date'],
               qx = obj['qx'],
               qy = obj['qy'],
               qz = obj['qz'],
               qw = obj['qw'],
               latitude = obj['latitude'],
               longitude = obj['longitude'],
               image = obj['image']).put()
</snippet></ROW><ROW><id>13221890</id><snippet>men|women|children</snippet></ROW><ROW><id>13221890</id><snippet>.*?</snippet></ROW><ROW><id>13221890</id><snippet>\D*?</snippet></ROW><ROW><id>13222012</id><snippet>http://localhost:8080/oauth2callback
</snippet></ROW><ROW><id>13222012</id><snippet>/</snippet></ROW><ROW><id>13222012</id><snippet>http://localhost:8080/oauth2callback/
</snippet></ROW><ROW><id>13222192</id><snippet>+str</snippet></ROW><ROW><id>13222192</id><snippet>'Length of 1st open reading frame is:'+str(seq1)</snippet></ROW><ROW><id>13222192</id><snippet>+</snippet></ROW><ROW><id>13222192</id><snippet>str</snippet></ROW><ROW><id>13222193</id><snippet>outstring += "&lt;td&gt;&lt;a href=" + wikilinklis[i] + "&gt;PLlist[0]&lt;/a&gt;&lt;/td&gt;\n"
</snippet></ROW><ROW><id>13222193</id><snippet>wikilinks</snippet></ROW><ROW><id>13222217</id><snippet>with open('sample.txt') as sample:
    num_testcases = int(sample.readline())
    assert 1 &lt;= num_testcases &lt;= 5
    for testcase in range(num_testcases):
        num_elems = int(sample.readline())
        assert 1 &lt;= num_elems &lt;= 10000
        elems = map(int, sample.readline().split())
        assert len(elems) == num_elems
        assert all(1 &lt;= elem &lt;= 100000 for elem in elems)
        method_test(elems)
</snippet></ROW><ROW><id>13222366</id><snippet>class Rect:
    """simple rectangle (size only) which remembers double its w,h
       as demo of properties
    """
</snippet></ROW><ROW><id>13222366</id><snippet>class Rect(object):
    """simple rectangle (size only) which remembers double its w,h
       as demo of properties
    """
</snippet></ROW><ROW><id>13222366</id><snippet>property</snippet></ROW><ROW><id>13222366</id><snippet>object</snippet></ROW><ROW><id>13222590</id><snippet>pypm</snippet></ROW><ROW><id>13222590</id><snippet>1.3.4</snippet></ROW><ROW><id>13222590</id><snippet>./your_virtualenv/bin/pip install -r path/to/requirements.txt</snippet></ROW><ROW><id>13222697</id><snippet>&gt;&gt;&gt; urllib.urlretrieve('https://wa151.avayalive.com/WAAdminPanel/login.aspx?ReturnUrl=%2fWAAdminPanel%2fprivate%2fHome.aspx')
---------------------------------------------------------------------------
ContentTooShortError                      Traceback (most recent call last)
...
ContentTooShortError: retrieval incomplete: got only 11365 out of 13805 bytes
</snippet></ROW><ROW><id>13222697</id><snippet>requests</snippet></ROW><ROW><id>13222697</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('https://wa151.avayalive.com/WAAdminPanel/login.aspx?ReturnUrl=%2fWAAdminPanel%2fprivate%2fHome.aspx')
&gt;&gt;&gt; with open(somefilepath, 'w') as f:
...     f.write(r.text)
</snippet></ROW><ROW><id>13222756</id><snippet>print("Your code was %04i" % count)
</snippet></ROW><ROW><id>13222756</id><snippet>.format()</snippet></ROW><ROW><id>13222756</id><snippet>print("Your code was {:04n}".format(count))
</snippet></ROW><ROW><id>13222957</id><snippet>dist = math.sqrt((circle1.x-circle2.x)**2 + (circle1.y-circle2.y)**2) - circle1.r - circle2.r
</snippet></ROW><ROW><id>13222957</id><snippet> a = segment[1].y - segment[0].y
 b = segment[0].x - segment[1].x
 c = - segment[0].x * a - segment[0].y * b 
 dx = segment[1].x - segment[0].x
 dy = segment[1].y - segment[0].y
 nc0 = - segment[0].x * dx - segment[0].y * dy
 nc1 = - segment[1].x * dx - segment[1].y * dy
 if ((dx * x + dy * y + nc0) &lt; 0) dist = math.sqrt((x-segment[0].x)**2 + (y-segment[0].y)**2)
 elif((dx * x + dy * y + nc1) &lt; 0) dist = math.sqrt((x-segment[1].x)**2 + (y-segment[1].y)**2)
 else dist = (a*x + b*y + c) / math.sqrt(a**2 + b**2)
</snippet></ROW><ROW><id>13223080</id><snippet>split</snippet></ROW><ROW><id>13223080</id><snippet>int</snippet></ROW><ROW><id>13223080</id><snippet>['3', '7']</snippet></ROW><ROW><id>13223080</id><snippet>[3, 7]</snippet></ROW><ROW><id>13223080</id><snippet>with open('A.txt') as f:
    Alist = []
    for line in f:
        part = []
        for x in line.split(','):
            part.append(int(x))
        Alist.append(part)
</snippet></ROW><ROW><id>13223080</id><snippet>with</snippet></ROW><ROW><id>13223080</id><snippet>with open('A.txt') as f:
    Alist = []
    for line in f:
        part = [int(x) for x in line.split(',')]
        Alist.append(part)
</snippet></ROW><ROW><id>13223080</id><snippet>with open('A.txt') as f:
    Alist = [[int(x) for x in line.split(',')] for line in f]
</snippet></ROW><ROW><id>13223178</id><snippet>file1 = input().strip()
</snippet></ROW><ROW><id>13223178</id><snippet>input()</snippet></ROW><ROW><id>13223206</id><snippet>col2</snippet></ROW><ROW><id>13223206</id><snippet>col3</snippet></ROW><ROW><id>13223206</id><snippet>output = []
for row in reader:
    output.append(dict(k, v) for k, v in row if k in ('id', 'col2', 'col3'))
output.sort(key=lambda x: x['col3'])
return output[:10]
</snippet></ROW><ROW><id>13223206</id><snippet>f = open('SNPs.csv')
reader = csv.Reader(f, delimiter=',', quotechar='"')
output = [row for row in reader]
output.sort(key=lambda x: x[3])
return dict((row[0], (row[3], row[4])) for row in output[:10])
</snippet></ROW><ROW><id>13223376</id><snippet>def read():
    with open('test.txt', 'r') as f:
        for line in f:
            print(line)
</snippet></ROW><ROW><id>13223376</id><snippet>def read():
    with open('test.txt', 'r') as f:
        lines = f.readlines()
        print lines[1]
</snippet></ROW><ROW><id>13223488</id><snippet>import cql
con = cql.connect(host, port, keyspace)
cursor = con.cursor()
cursor.execute("CQL QUERY", dict(kw='Foo', kw2='Bar, etc...))
</snippet></ROW><ROW><id>13223488</id><snippet>connection = cql.connect('localhost:9160', cql_version='3.0.0')
</snippet></ROW><ROW><id>13223488</id><snippet>import cql
con = cql.connect('172.24.24.24', 9160,  keyspace, cql_version='3.0.0')
print ("Connected!")
cursor = con.cursor()
CQLString = "INSERT INTO event_attend (event_id, event_type, event_user_id) VALUES (131, 'Party', 3156);"
cursor.execute(CQLString)
</snippet></ROW><ROW><id>13223577</id><snippet>    # Copyright 2002-2012 Rally Software Development Corp. All Rights Reserved.

    require 'rally_api'

    $my_base_url       = "https://rally1.rallydev.com/slm"
    $my_username       = "user@company.com"
    $my_password       = "password"
    $my_workspace      = "My Workspace"
    $my_project        = "My Project"
    $wsapi_version     = "1.37"

    # Test Folders
    $source_test_folder_formatted_id = "TF4"
    $target_test_folder_formatted_id = "TF8"

    # Load (and maybe override with) my personal/private variables from a file...
    my_vars= File.dirname(__FILE__) + "/my_vars.rb"
    if FileTest.exist?( my_vars ) then require my_vars end

    #==================== Make a connection to Rally ====================
    config                  = {:base_url =&gt; $my_base_url}
    config[:username]       = $my_username
    config[:password]       = $my_password
    config[:workspace]      = $my_workspace
    config[:project]        = $my_project
    config[:version]        = $wsapi_version

    @rally = RallyAPI::RallyRestJson.new(config)

    begin

      # Lookup source Test Folder
      source_test_folder_query = RallyAPI::RallyQuery.new()
      source_test_folder_query.type = :testfolder
      source_test_folder_query.fetch = true
      source_test_folder_query.query_string = "(FormattedID = \"" + $source_test_folder_formatted_id + "\")"

      source_test_folder_result = @rally.find(source_test_folder_query)

      # Lookup Target Test Folder
      target_test_folder_query = RallyAPI::RallyQuery.new()
      target_test_folder_query.type = :testfolder
      target_test_folder_query.fetch = true
      target_test_folder_query.query_string = "(FormattedID = \"" + $target_test_folder_formatted_id + "\")"

      target_test_folder_result = @rally.find(target_test_folder_query)

      if source_test_folder_result.total_result_count == 0
        puts "Source Test Folder: " + $source_test_folder_formatted_id + "not found. Exiting."
        exit
      end

      if target_test_folder_result.total_result_count == 0
        puts "Target Test Folder: " + $target_test_folder_formatted_id + "not found. Target must exist before copying."
        exit
      end

      source_test_folder = source_test_folder_result.first()
      target_test_folder = target_test_folder_result.first()

      # Populate full object for Target Test Folder
      full_target_test_folder = target_test_folder.read

      # Get Target Project
      target_project = full_target_test_folder["Project"]

      # Grab collection of Source Test Cases
      source_test_cases = source_test_folder["TestCases"]

      # Loop through Source Test Cases and Copy to Target
      source_test_cases.each do |source_test_case|
        # Get full object for Source Test Case
        full_source_test_case = source_test_case.read

        # Check if there's an Owner
        if !full_source_test_case["Owner"].nil?
          source_owner = full_source_test_case["Owner"]
        else
          source_owner = nil
        end

        # Populate field data from Source to Target
        target_test_case_fields = {}
        target_test_case_fields["Package"] = full_source_test_case["Package"]
        target_test_case_fields["Description"] = full_source_test_case["Description"]
        target_test_case_fields["Method"] = full_source_test_case["Method"]
        target_test_case_fields["Name"] = full_source_test_case["Name"]
        target_test_case_fields["Objective"] = full_source_test_case["Objective"]
        target_test_case_fields["Owner"] = source_owner
        target_test_case_fields["PostConditions"] = full_source_test_case["PostConditions"]
        target_test_case_fields["PreConditions"] = full_source_test_case["PreConditions"]
        target_test_case_fields["Priority"] = full_source_test_case["Priority"]
        target_test_case_fields["Project"] = target_project
        target_test_case_fields["Risk"] = full_source_test_case["Risk"]
        target_test_case_fields["ValidationInput"] = full_source_test_case["ValidationInput"]
        target_test_case_fields["ValidationExpectedResult"] = full_source_test_case["ValidationExpectedResult"]
        target_test_case_fields["Tags"] = full_source_test_case["Tags"]
        target_test_case_fields["TestFolder"] = target_test_folder

        # Create the Target Test Case
        begin
          target_test_case = @rally.create(:testcase, target_test_case_fields)
          puts "Test Case: #{full_source_test_case["FormattedID"]} successfully copied to #{full_target_test_folder["FormattedID"]}"
        rescue =&gt; ex
          puts "Test Case: #{full_source_test_case["FormattedID"]} not copied due to error"
          puts ex
        end

        # Now Copy Test Steps
        # Add Test Case Steps
        source_test_case_steps = full_source_test_case["Steps"]

        source_test_case_steps.each do |source_test_case_step|
          full_source_step = source_test_case_step.read
          target_step_fields = {}
          target_step_fields["TestCase"] = target_test_case
          target_step_fields["StepIndex"] = full_source_step["StepIndex"]
          target_step_fields["Input"] = full_source_step["Input"]
          target_step_fields["ExpectedResult"] = full_source_step["ExpectedResult"]
          begin
            target_test_case_step = @rally.create(:testcasestep, target_step_fields)
            puts "===&gt; Copied TestCaseStep: #{target_test_case_step["_ref"]}"
          rescue =&gt; ex
            puts "Test Case Step not copied due to error:"
            puts ex
          end
        end

          # Now Copy Attachments
          source_attachments = full_source_test_case["Attachments"]

        source_attachments.each do |source_attachment|
          full_source_attachment = source_attachment.read
          source_attachment_content = full_source_attachment["Content"]
          full_source_attachment_content = source_attachment_content.read

          # Create AttachmentContent Object for Target
          target_attachment_content_fields = {}
          target_attachment_content_fields["Content"] = full_source_attachment_content["Content"]
          begin
            target_attachment_content = @rally.create(:attachmentcontent, target_attachment_content_fields)
            puts "===&gt; Copied AttachmentContent: #{target_attachment_content["_ref"]}"
          rescue =&gt; ex
            puts "AttachmentContent not copied due to error:"
            puts ex
          end

          # Now Create Attachment Container
          target_attachment_fields = {}
          target_attachment_fields["Name"] = full_source_attachment["Name"]
          target_attachment_fields["Description"] = full_source_attachment["Description"]
          target_attachment_fields["Content"] = target_attachment_content
          target_attachment_fields["ContentType"] = full_source_attachment["ContentType"]
          target_attachment_fields["Size"] = full_source_attachment["Size"]
          target_attachment_fields["Artifact"] = target_test_case
          target_attachment_fields["User"] = full_source_attachment["User"]
          begin
            target_attachment = @rally.create(:attachment, target_attachment_fields)
            puts "===&gt; Copied Attachment: #{target_attachment["_ref"]}"
          rescue =&gt; ex
            puts "Attachment not copied due to error:"
            puts ex
          end
        end
      end
    end
</snippet></ROW><ROW><id>13223867</id><snippet>x_file = open(os.path.join(direct, "5_1.txt"), "r")  
</snippet></ROW><ROW><id>13223867</id><snippet>x_file = open(direct+"/5_1.txt", "r")
</snippet></ROW><ROW><id>13223949</id><snippet># By Armin Moser

from mpl_toolkits.mplot3d import Axes3D
import matplotlib
import numpy as np
from matplotlib import cm
from matplotlib import pyplot as plt
step = 0.04
maxval = 1.0
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# create supporting points in polar coordinates
r = np.linspace(0,1.25,50)
p = np.linspace(0,2*np.pi,50)
R,P = np.meshgrid(r,p)
# transform them to cartesian system
X,Y = R*np.cos(P),R*np.sin(P)

#Z = ((R**2 - 1)**2)
Z = (X**2 + 0.2*Y**2 -1)**2   # &lt;------- edit

ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet)
#ax.set_zlim3d(0, 1)
ax.set_xlabel(r'$\phi_\mathrm{real}$')
ax.set_ylabel(r'$\phi_\mathrm{im}$')
ax.set_zlabel(r'$V(\phi)$')
plt.show()
</snippet></ROW><ROW><id>13223955</id><snippet>result</snippet></ROW><ROW><id>13223955</id><snippet>import re

ciph = "hello there"
result = ""
for c in ciph:
    result += str((hex(ord(c))))[2:]

# reverse it
orig = ""
for code in re.findall('..', result):
    orig += chr(int(code, 16))
print orig  # "hello there"
</snippet></ROW><ROW><id>13224019</id><snippet>u='\x87\x0e)\xb9\xb0\x0f\t"c\xc7\xf1\x97B\xc6\x17\xee\xab\x1d\xbf\xc0\xd0\x06j\xc3'.decode('UTF16')
print type(u)
</snippet></ROW><ROW><id>13224031</id><snippet>if build_loc is not None:
    Target_list.append(build_loc.rstrip('\r\n'))
</snippet></ROW><ROW><id>13224178</id><snippet>for row in file:
    do_something_with_row
</snippet></ROW><ROW><id>13224178</id><snippet>if line.startswith('OBAMA'):
    last_seen=OBAMA
    OBAMA.append(line)
elif blah blah blah

else:
    last_seen.append(line)
</snippet></ROW><ROW><id>13224492</id><snippet>print "{string1} ${{a}} {string1}".format(string1="hello")
</snippet></ROW><ROW><id>13224566</id><snippet>from matplotlib.mlab import PCA
data = array(randint(10,size=(10,3)))
results = PCA(data)
</snippet></ROW><ROW><id>13224829</id><snippet>population</snippet></ROW><ROW><id>13224829</id><snippet>__str__</snippet></ROW><ROW><id>13224829</id><snippet>len</snippet></ROW><ROW><id>13224829</id><snippet>class Book(object):               
  scale=(1,5)

  def __init__(self, title):        
      self.title = title
      self.ratings = []

  def rate(self,rating):
      if rating in range(self.scale[0]-1, self.scale[1]+1):
          self.ratings.append(rating)

  def __str__(self):
      return '"{0}" rates an average of {1} from {2} reviews.'.format(
         self.title, sum(self.ratings)/float(len(self.ratings)), len(self.ratings))

&gt;&gt; mybook = Book('Zen of Python')
&gt;&gt; mybook.rate(5)
&gt;&gt; mybook.rate(3)
&gt;&gt; mybook.rate(5)
&gt;&gt; str(mybook)
&gt;&gt; "Zen of Python" rate an average of 4.333333333 from 3 reviews.
</snippet></ROW><ROW><id>13225252</id><snippet>current_level = Tkinter.StringVar()
Tkinter.Label(master, textvariable=current_level)
</snippet></ROW><ROW><id>13225252</id><snippet>current_level.set('Level 2')
</snippet></ROW><ROW><id>13225264</id><snippet>import locale
locale.setlocale(locale.LC_NUMERIC, "")
def format_num(num):
    """Format a number according to given places.
    Adds commas, etc. Will truncate floats into ints!"""

    try:
        inum = int(num)
        return locale.format("%.*f", (0, inum), True)

    except (ValueError, TypeError):
        return str(num)


def get_max_width(table, index):
    """Get the maximum width of the given column index"""
    return max([len(format_num(row[index])) for row in table])

def pprint_table(out, table):
    """Prints out a table of data, padded for alignment
    @param out: Output stream (file-like object)
    @param table: The table to print. A list of lists.
    Each row must have the same number of columns. """
    col_paddings = []

    for i in range(len(table[0])):
        col_paddings.append(get_max_width(table, i))

    for row in table:
        # left col
        print &gt;&gt; out, row[0].ljust(col_paddings[0] + 1),
        # rest of the cols
        for i in range(1, len(row)):
            col = format_num(row[i]).rjust(col_paddings[i] + 2)
            print &gt;&gt; out, col,
        print &gt;&gt; out


table = [["", "taste", "land speed", "life"],
    ["spam", 300101, 4, 1003],
    ["eggs", 105, 13, 42],
    ["lumberjacks", 13, 105, 10]]

import sys
out = sys.stdout
pprint_table(out, table)
</snippet></ROW><ROW><id>13225264</id><snippet>table</snippet></ROW><ROW><id>13225264</id><snippet>rjust</snippet></ROW><ROW><id>13225264</id><snippet>ljust</snippet></ROW><ROW><id>13225265</id><snippet>ordered</snippet></ROW><ROW><id>13225265</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; # regular unsorted dictionary
&gt;&gt;&gt; d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

&gt;&gt;&gt; # dictionary sorted by key
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

&gt;&gt;&gt; # dictionary sorted by value
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

&gt;&gt;&gt; # dictionary sorted by length of the key string
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])
</snippet></ROW><ROW><id>13225322</id><snippet>def TradeGroupSort(trade_group):
  """Sorting the trade group."""
  group, _ = trade_group  # The value is a tuple ('XYZ', 50) for e.g.
  return trade_groups.index(group)
</snippet></ROW><ROW><id>13225322</id><snippet>SortTotals(trade_group_totals, operator.itemgetter(0), TradeGroupSort)
</snippet></ROW><ROW><id>13225418</id><snippet>for</snippet></ROW><ROW><id>13225418</id><snippet>for &lt;variable&gt; in &lt;iterable&gt;</snippet></ROW><ROW><id>13225418</id><snippet>if</snippet></ROW><ROW><id>13225418</id><snippet>if depth &lt;= 0:
    return

for item in os.listdir(pathname):
</snippet></ROW><ROW><id>13225627</id><snippet>SYN</snippet></ROW><ROW><id>13225627</id><snippet>FIN</snippet></ROW><ROW><id>13225627</id><snippet>tun</snippet></ROW><ROW><id>13225646</id><snippet>def _walk (self, starting_node) :
    if starting_node is not self._nil :
        for x in self._walk(starting_node.left):
            yield x
        yield starting_node
        for x in self._walk(starting_node.right):
            yield x

def traverse(self):
    starting_node = ???     # maybe these are passed as
    func = ???              # parameters to traverse
    for node in self._walk(starting_node):
        yield func(node)
</snippet></ROW><ROW><id>13225646</id><snippet>traverse</snippet></ROW><ROW><id>13225646</id><snippet>imap(func, self._walk(starting_node))
</snippet></ROW><ROW><id>13225646</id><snippet>(func(x) for x in self._walk(starting_node))
</snippet></ROW><ROW><id>13225646</id><snippet>def _walk (self, starting_node) :
    while starting_node is not self._nil :
        for x in self._walk(starting_node.left):
            yield x
        yield starting_node
        starting_node = starting_node.right
</snippet></ROW><ROW><id>13225651</id><snippet>animation</snippet></ROW><ROW><id>13225795</id><snippet>fname</snippet></ROW><ROW><id>13225795</id><snippet>import os

# path is your starting point - everything under it will be searched
path = os.getcwd()    
fname = 'file1.txt'
my_files = []

# Start iterating, and anytime we see a file that matches fname,
# add to our list    
for root, dirs, files in os.walk(path):
  for name in files:
    if name == fname:
      # root here is the path to the file
      my_files.append(os.path.join(root, name))

print my_files
</snippet></ROW><ROW><id>13225795</id><snippet>import os

def findAll(fname, start_dir=os.getcwd()):
  my_files = []
  for root, dirs, files in os.walk(start_dir):
    for name in files:
      if name == fname:
        my_files.append(os.path.join(root, name))
  return my_files


print findAll('file1.txt')
print findAll('file1.txt', '/some/other/starting/directory')
</snippet></ROW><ROW><id>13226137</id><snippet>/</snippet></ROW><ROW><id>13226137</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>13226214</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('main_folder/*/*.txt')
['main_folder/folder_1/file2.txt', 'main_folder/folder_2/file3.txt']
</snippet></ROW><ROW><id>13226352</id><snippet>MultiIndex</snippet></ROW><ROW><id>13226352</id><snippet>import pandas as pd
import numpy as np

np.arrays = [['one','one','one','two','two','two'],[1,2,3,1,2,3]]

df = pd.DataFrame(np.random.randn(6,2),index=pd.MultiIndex.from_tuples(zip(*np.arrays)),columns=['A','B'])

df  # This is the dataframe we have generated

          A         B
one 1 -0.732470 -0.313871
    2 -0.031109 -2.068794
    3  1.520652  0.471764
two 1 -0.101713 -1.204458
    2  0.958008 -0.455419
    3 -0.191702 -0.915983
</snippet></ROW><ROW><id>13226352</id><snippet>df</snippet></ROW><ROW><id>13226352</id><snippet>df.ndim

2
</snippet></ROW><ROW><id>13226352</id><snippet>one</snippet></ROW><ROW><id>13226352</id><snippet>1</snippet></ROW><ROW><id>13226352</id><snippet>-0.790620  0.229276</snippet></ROW><ROW><id>13226352</id><snippet>one</snippet></ROW><ROW><id>13226352</id><snippet>2</snippet></ROW><ROW><id>13226352</id><snippet>0.751353 -1.623718</snippet></ROW><ROW><id>13226352</id><snippet>one</snippet></ROW><ROW><id>13226352</id><snippet>3</snippet></ROW><ROW><id>13226352</id><snippet>2.174736 -0.144823</snippet></ROW><ROW><id>13226352</id><snippet>In [44]: df.ix["one"]
Out[44]: 
          A         B
1 -0.732470 -0.313871
2 -0.031109 -2.068794
3  1.520652  0.471764
</snippet></ROW><ROW><id>13226352</id><snippet>In [45]: df.ix["one"].ix[1]
Out[45]: 
A   -0.732470
B   -0.313871
Name: 1
</snippet></ROW><ROW><id>13226352</id><snippet>In [46]: df.ix["one"].ix[1]["A"]
Out[46]: -0.73247029752040727
</snippet></ROW><ROW><id>13226352</id><snippet>groupby</snippet></ROW><ROW><id>13226352</id><snippet>In [47]: df.xs('one')
Out[47]: 
          A         B
1 -0.732470 -0.313871
2 -0.031109 -2.068794
3  1.520652  0.471764
</snippet></ROW><ROW><id>13226352</id><snippet>In [48]: df.xs('B', axis=1)
Out[48]: 
one  1   -0.313871
     2   -2.068794
     3    0.471764
two  1   -1.204458
     2   -0.455419
     3   -0.915983
Name: B
</snippet></ROW><ROW><id>13226368</id><snippet>default=date.today()</snippet></ROW><ROW><id>13226368</id><snippet>default=timezone.now</snippet></ROW><ROW><id>13226368</id><snippet>models.py</snippet></ROW><ROW><id>13226737</id><snippet>count</snippet></ROW><ROW><id>13226737</id><snippet>count</snippet></ROW><ROW><id>13226737</id><snippet>0.0</snippet></ROW><ROW><id>13226737</id><snippet>def percentage(list_of_lists, substring):
    percentage = []
    for item in list_of_lists:
        count = 0.0
        for i in item:
            if substring == i[0:3]:
                count += 1
        percentage.append(int(count / len(item) * 100))
    return percentage

# Test
In [17]: l = [['aaa111', 'aba123', 'aaa123'], ['aaa302', 'cad222']]
In [18]: s = 'aaa'
In [19]: percentage(l,s)
Out[19]: [66, 50]
</snippet></ROW><ROW><id>13226877</id><snippet>def flip_member(x):
    if x == 1:
        x += 1
    else:
        x -= 1
    return x
</snippet></ROW><ROW><id>13226938</id><snippet>im = cv2.imread('./test_imgs/zzzyj.jpg')
cv2.imshow('Image', cv2.blur(im, (3,3)))
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>13227303</id><snippet>oauth2client/appengine.py</snippet></ROW><ROW><id>13227303</id><snippet>/oauth2callback</snippet></ROW><ROW><id>13227389</id><snippet>import ast

list(ast.literal_eval('"2012-11-05", "filename", 1, 2, 3, 4, 5, 6, 7, 0.11, 0.22, 0.33'))
</snippet></ROW><ROW><id>13227591</id><snippet>from selenium import webdriver
options = webdriver.ChromeOptions()
# set some options
# for example:
# options.add_argument('--disable-logging')
driver = webdriver.Remote(desired_capabilities=options.to_capabilities())
</snippet></ROW><ROW><id>13227661</id><snippet>d1.date() == d2.date()
</snippet></ROW><ROW><id>13227661</id><snippet>datetime.date()</snippet></ROW><ROW><id>13227683</id><snippet>&gt;&gt;&gt; max(a, key=tuple)
array([8, 3])
</snippet></ROW><ROW><id>13227683</id><snippet>max</snippet></ROW><ROW><id>13227683</id><snippet>np.max</snippet></ROW><ROW><id>13227683</id><snippet>.tolist</snippet></ROW><ROW><id>13227683</id><snippet>max(a, key=operator.methodcaller('tolist'))
</snippet></ROW><ROW><id>13227877</id><snippet>def pagetext(text_lined, num_lines=25):
   for index,line in enumerate(text_lined):
       if index % num_lines == 0 and index:
           input=raw_input("Hit any key to continue press q to quit")
           if input.lower() == 'q':
               break
       else:
           print line
</snippet></ROW><ROW><id>13227933</id><snippet>index100</snippet></ROW><ROW><id>13227933</id><snippet>index200</snippet></ROW><ROW><id>13227933</id><snippet>index300</snippet></ROW><ROW><id>13227933</id><snippet>index900</snippet></ROW><ROW><id>13227933</id><snippet>rules = (Rule (SgmlLinkExtractor(allow=("index\d00\.html", ),restrict_xpaths=('//p[@id="nextpage"]',))
, callback="parse_items", follow= True),
)
</snippet></ROW><ROW><id>13228082</id><snippet>setUp</snippet></ROW><ROW><id>13228169</id><snippet>with open('input_file', 'r') as input_file:
    with open('output_file', 'w') as output_file:
        for line in input_file:
            if should_delete(line):
                pass
            else:
                output_file.write(line)
</snippet></ROW><ROW><id>13228169</id><snippet>should_delete</snippet></ROW><ROW><id>13228169</id><snippet>io.IOBase.truncate</snippet></ROW><ROW><id>13228215</id><snippet>   {% for item in solved_list%}
        &lt;input type = "checkbox" name="{{item.id}}" &gt; {{item.solution}}
   {% endfor %}
</snippet></ROW><ROW><id>13228215</id><snippet> if request.method == 'POST':
      for soln in solutions_list: 
         solution_id = request.POST.get(str(soln.id))    
         if solution_id:
            MarkedSolved.objects.create(
             is_solution = True,
             related_task = Task.objects.get(id=task_id),
             related_solution = soln
            )
</snippet></ROW><ROW><id>13228292</id><snippet>sudo port install py27-mysql
</snippet></ROW><ROW><id>13228381</id><snippet>doc    = ET.parse("test.xml")
root = doc.getroot() #Returns the root element for this tree.
root_new  = ET.Element("animals") 
for child in root:
    name             = child.attrib['name']
    fullname         = child.attrib['fullname']
    animal    = ET.SubElement(root_new, "animal") 
    animal.set("name",name)               
    animal.set("fullname",fullname) 

    for g in child.findall("food"):
        food = ET.SubElement(animal, "food")   
        food.text = g.text

tree = ET.ElementTree(root_new)
tree.write(sys.stdout)
</snippet></ROW><ROW><id>13228676</id><snippet>lxml</snippet></ROW><ROW><id>13228676</id><snippet>&gt;&gt;&gt; s = """&lt;rel_notes&gt;
    1.)Please move to this build for all further test and development 
    activities .
    2.)Please use this as a basebuild to verify 
    compilation and sanity
    3.)Any CL that nees to be integrated must 
    have a CL
&lt;/rel_notes&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; root = etree.fromstring(s)
&gt;&gt;&gt; root.text
'\n    1.)Please move to this build for all further test and development \n    activities .\n    2.)Please use this as a basebuild to verify \n    compilation and sanity\n    3.)Any CL that nees to be integrated must \n    have a CL\n'
&gt;&gt;&gt; print root.text

    1.)Please move to this build for all further test and development 
    activities .
    2.)Please use this as a basebuild to verify 
    compilation and sanity
    3.)Any CL that nees to be integrated must 
    have a CL

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13228715</id><snippet>def StateDecorator(fn):
    class cls(State):
        def __call__(self):
            super().__call__()
            fn(self)
    return cls

@StateDecorator
def concreteState(self):
    print("cc", self)

concreteState
&lt;class '__main__.cls'&gt;
</snippet></ROW><ROW><id>13228799</id><snippet>Jay_Chou()</snippet></ROW><ROW><id>13228799</id><snippet>Jay = Jay_chou(x,y)</snippet></ROW><ROW><id>13228799</id><snippet>n%3</snippet></ROW><ROW><id>13228799</id><snippet>raw_input()</snippet></ROW><ROW><id>13228799</id><snippet>int()</snippet></ROW><ROW><id>13228799</id><snippet>In [13]: '1'%3
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-13-39edc619f812&gt; in &lt;module&gt;()
----&gt; 1 '1'%3

TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>13228799</id><snippet>Jay = Jay_chou(int(x),int(y))</snippet></ROW><ROW><id>13228799</id><snippet>Enter the digit on the phone (0-9): 3
Enter the digit on the phone (0-9): 4
d

#and for 1,1:

Enter the digit on the phone (0-9): 1
Enter the digit on the phone (0-9): 1
.
</snippet></ROW><ROW><id>13229289</id><snippet>__str__</snippet></ROW><ROW><id>13229289</id><snippet>__repr__</snippet></ROW><ROW><id>13229289</id><snippet>__str__</snippet></ROW><ROW><id>13229289</id><snippet>__repr__</snippet></ROW><ROW><id>13229289</id><snippet>eval(repr(obj)) == obj</snippet></ROW><ROW><id>13229289</id><snippet>Point</snippet></ROW><ROW><id>13229289</id><snippet>__str__</snippet></ROW><ROW><id>13229289</id><snippet>__repr__</snippet></ROW><ROW><id>13229289</id><snippet>class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __str__(self):
        return "(%.2f, %.2f)" % (self.x, self.y)
    def __repr__(self):
        return "Point(x=%r, y=%r)" % (self.x, self.y)
    def __eq__(self, other):
        return isinstance(other, Point) and self.x == other.x and self.y == other.y
</snippet></ROW><ROW><id>13229349</id><snippet>urllib2</snippet></ROW><ROW><id>13229349</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url = "http://graph.facebook.com/4/picture"
&gt;&gt;&gt; req = urllib2.Request(url)
&gt;&gt;&gt; res = urllib2.urlopen(req)
&gt;&gt;&gt; finalUrl = res.geturl()
&gt;&gt;&gt; finalUrl
'http://profile.ak.fbcdn.net/hprofile-ak-prn1/157340_4_3955636_q.jpg'
</snippet></ROW><ROW><id>13229349</id><snippet>url</snippet></ROW><ROW><id>13229349</id><snippet>{
   "id": "4",
   "picture": {
      "data": {
         "url": "http://profile.ak.fbcdn.net/hprofile-ak-prn1/157340_4_3955636_q.jpg",
         "is_silhouette": false
      }
   }
}
</snippet></ROW><ROW><id>13229555</id><snippet>ArgParse</snippet></ROW><ROW><id>13229555</id><snippet>getopt</snippet></ROW><ROW><id>13229667</id><snippet>from numpy import array

a = array(
    [
    array([ [6,2], [6,2] ]),
    array([ [8,3], [8,3] ]),
    array([ [4,2], [4,2] ])
    ]
)

print a.max(axis=0)
#[[8 3]
# [8 3]]
</snippet></ROW><ROW><id>13230090</id><snippet>\n</snippet></ROW><ROW><id>13230090</id><snippet>\n</snippet></ROW><ROW><id>13230090</id><snippet>recv(200)</snippet></ROW><ROW><id>13230090</id><snippet>rec = ""
while True:
    rec += connection.recv(1024)
    rec_end = rec.find('\n')
    if rec_end != -1:
        data = rec[:rec_end]

        # Do whatever you want with data here

        rec = rec[rec_end+1:]
</snippet></ROW><ROW><id>13230340</id><snippet>add_translation_dirs</snippet></ROW><ROW><id>13230376</id><snippet>TDSVER=8.0 tsql -H XXXXXXXX.database.windows.net -U Username -D DatabaseName -p 1433 -P Password
</snippet></ROW><ROW><id>13230510</id><snippet>to_mongo</snippet></ROW><ROW><id>13230510</id><snippet>object.to_mongo()
</snippet></ROW><ROW><id>13231760</id><snippet>def keyDown(self,e):
    if e.keystring == "f2":                
        selectedNumber = ""
    elif e.keystring == "enter":
        print int(selectedNumber) # If you are only printing you don't need int()
        selectedNumber = ""
    else:
        selectedNumber += e.keystring
</snippet></ROW><ROW><id>13231957</id><snippet>python-dateutil</snippet></ROW><ROW><id>13231957</id><snippet>parse</snippet></ROW><ROW><id>13231957</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse('03/02/2001 04:05:06')
datetime.datetime(2001, 3, 2, 4, 5, 6)
</snippet></ROW><ROW><id>13231957</id><snippet>defaults read</snippet></ROW><ROW><id>13231957</id><snippet>$ defaults read .GlobalPreferences AppleICUDateFormatStrings
{
    1 = "yyyy/M/d";
}
$ defaults read .GlobalPreferences AppleICUTimeFormatStrings
{
    1 = "kk:mm ";
    2 = "kk:mm:ss ";
    3 = "kk:mm:ss  z";
    4 = "kk:mm:ss  v";
}
</snippet></ROW><ROW><id>13231957</id><snippet>Language &amp; Text</snippet></ROW><ROW><id>13232934</id><snippet>nargs="+"</snippet></ROW><ROW><id>13232934</id><snippet>parser.add_argument("foo", help="Give me an arbitrary number of arguments", nargs="+")
</snippet></ROW><ROW><id>13232988</id><snippet>import json

from myspecialpackage import json
</snippet></ROW><ROW><id>13232988</id><snippet>as</snippet></ROW><ROW><id>13232988</id><snippet>from myspecialpackage import json as special_json
</snippet></ROW><ROW><id>13233147</id><snippet>tempfile.gettempdir()</snippet></ROW><ROW><id>13233147</id><snippet>.this-is-a-test-homedir</snippet></ROW><ROW><id>13233200</id><snippet>eval('import foo')</snippet></ROW><ROW><id>13233200</id><snippet>except:</snippet></ROW><ROW><id>13233200</id><snippet>for dbmodule in ['dbhash', 'gdbm', 'dbm', 'dumbdbm']:
    try:
        __import__(dbmodule)
    except ImportError:
        pass
    else:
        # If we found the module, ensure it's copied to the build directory.
        packages.append(dbmodule)
</snippet></ROW><ROW><id>13233240</id><snippet>2**4</snippet></ROW><ROW><id>13233240</id><snippet>itertools.product([0, 1], 4)</snippet></ROW><ROW><id>13233240</id><snippet>0</snippet></ROW><ROW><id>13233240</id><snippet>1</snippet></ROW><ROW><id>13233240</id><snippet>off</snippet></ROW><ROW><id>13233240</id><snippet>on</snippet></ROW><ROW><id>13233240</id><snippet>off[i]</snippet></ROW><ROW><id>13233240</id><snippet>0</snippet></ROW><ROW><id>13233240</id><snippet>on[i]</snippet></ROW><ROW><id>13233240</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; off = [5.53,3.12,3.75,4.75]
&gt;&gt;&gt; on = [1.05,1.5,2.1,1.7]
&gt;&gt;&gt; for choices in itertools.product([0, 1], repeat=len(off)):
...     print [(on[i] if choice else off[i]) for i, choice in enumerate(choices)]
... 
[5.53, 3.12, 3.75, 4.75]
[5.53, 3.12, 3.75, 1.7]
[5.53, 3.12, 2.1, 4.75]
[5.53, 3.12, 2.1, 1.7]
... &lt;10 more entries omitted ...&gt;
[1.05, 1.5, 2.1, 4.75]
[1.05, 1.5, 2.1, 1.7]
</snippet></ROW><ROW><id>13233240</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; for choices in itertools.product([0, 1], repeat=len(off)):
...     elts = [(on[i] if choice else off[i]) for i, choice in enumerate(choices)]
...     print reduce(operator.mul, elts, 1)
... 
307.32975
109.9917
172.10466
61.595352
...
</snippet></ROW><ROW><id>13233240</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.choose([0, 1, 0, 1], [off, on])
array([ 5.53,  1.5 ,  3.75,  1.7 ])
&gt;&gt;&gt; numpy.product(numpy.choose([0, 1, 0, 1], [off, on]))
52.880624999999995
</snippet></ROW><ROW><id>13233240</id><snippet>&gt;&gt;&gt; for c in itertools.product([0, 1], repeat=4):
...     print numpy.product(numpy.choose(c, [off, on]))
... 
307.32975
109.9917
172.10466
61.595352
147.7546875
52.880625
...
</snippet></ROW><ROW><id>13233577</id><snippet>flask.Flask.select_jinja_autoescape()</snippet></ROW><ROW><id>13233577</id><snippet>class JHtmlEscapingFlask(Flask):

    def select_jinja_autoescape(self, filename):
        if filename is None:
            return False
        if filename.endswith('.jhtml'):
            return True
        return Flask.select_jinja_autoescape(self, filename)

app = JHtmlEscapingFlask(__name__)
</snippet></ROW><ROW><id>13233577</id><snippet>app = Flask(__name__)</snippet></ROW><ROW><id>13233660</id><snippet>import urllib
from bs4 import BeautifulSoup

html = urllib.urlopen('http://www.last.fm/user/Jehl/charts?rangetype=overall&amp;subtype=artists').read()
soup = BeautifulSoup(html)
print soup('a')
# prints [&lt;a href="/" id="lastfmLogo"&gt;Last.fm&lt;/a&gt;, &lt;a class="nav-link" href="/music"&gt;Music&lt;/a&gt;....
</snippet></ROW><ROW><id>13233660</id><snippet>for link in soup('a'):
    print link.get_text()
</snippet></ROW><ROW><id>13233688</id><snippet>multiprocessing</snippet></ROW><ROW><id>13233688</id><snippet>self._value</snippet></ROW><ROW><id>13233688</id><snippet>self._value</snippet></ROW><ROW><id>13234046</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>13234198</id><snippet>#!/usr/bin/env python
rows = 20
cols = 20
pre_list = {}

count = 0
pre_list = {}
for i in xrange(0, rows + 1):
    for j in xrange(0, rows + 1):
        pre_list[(i,j)] = []

for i in xrange(0, rows + 1):
    for j in xrange(0, rows + 1):
        if i &gt; 0:
            pre_list[(i,j)].append((i-1, j))
        if j &gt; 0:
            pre_list[(i,j)].append((i, j-1))

route = {(rows,cols):1}

keys = route.keys()
while True:
    if not keys:
        break

    new_route = {}
    for key in keys:
        # print 'key', key
        pre = pre_list[key]
        if not pre:
            continue
        for item in pre:
            new_route[item] = 1
            # print 'route', route
            if item in route:
                route[item] += route[key]
            else:
                route[item] = route[key]
            # print 'route', route
        route[key] = 0
        # print new_route
    keys = new_route.keys()
    # print 'new keys', keys

print route[(0,0)]
</snippet></ROW><ROW><id>13234339</id><snippet>elem['title']</snippet></ROW><ROW><id>13234339</id><snippet>titlelist=[elem['title'] for elem in soup.findAll('td', attrs={X : Y})]
</snippet></ROW><ROW><id>13234339</id><snippet>soup.findAll('td', attrs={X : Y})</snippet></ROW><ROW><id>13234339</id><snippet>soup.findAll('td', attrs={X : Y})</snippet></ROW><ROW><id>13234339</id><snippet>elements = `soup.findAll('td', attrs={X : Y})`
titlelist=[]
for elem in elements:
    titlelist.append(elem['title'])
</snippet></ROW><ROW><id>13234339</id><snippet>title</snippet></ROW><ROW><id>13234339</id><snippet>has_key()</snippet></ROW><ROW><id>13234339</id><snippet>    elements = `soup.findAll('td')`
    titlelist=[]
    for elem in elements:
        if elem.has_key('title'):
            titlelist.append(elem['title'])
    print titlelist
</snippet></ROW><ROW><id>13234481</id><snippet># structure returned by get_metadata function.
MetaDataTuple = collections.namedtuple("MetaDataTuple",
        "coltype, colname, default, m2m, nullable, uselist, collection")


def get_metadata_iterator(class_):
    for prop in class_mapper(class_).iterate_properties:
        name = prop.key
        if name.startswith("_") or name == "id" or name.endswith("_id"):
            continue
        md = _get_column_metadata(prop)
        if md is None:
            continue
        yield md


def get_column_metadata(class_, colname):
    prop = class_mapper(class_).get_property(colname)
    md = _get_column_metadata(prop)
    if md is None:
        raise ValueError("Not a column name: %r." % (colname,))
    return md


def _get_column_metadata(prop):
    name = prop.key
    m2m = False
    default = None
    nullable = None
    uselist = False
    collection = None
    proptype = type(prop)
    if proptype is ColumnProperty:
        coltype = type(prop.columns[0].type).__name__
        try:
            default = prop.columns[0].default
        except AttributeError:
            default = None
        else:
            if default is not None:
                default = default.arg(None)
        nullable = prop.columns[0].nullable
    elif proptype is RelationshipProperty:
        coltype = RelationshipProperty.__name__
        m2m = prop.secondary is not None
        nullable = prop.local_side[0].nullable
        uselist = prop.uselist
        if prop.collection_class is not None:
            collection = type(prop.collection_class()).__name__
        else:
            collection = "list"
    else:
        return None
    return MetaDataTuple(coltype, str(name), default, m2m, nullable, uselist, collection)


def get_metadata(class_):
    """Returns a list of MetaDataTuple structures.
    """
    return list(get_metadata_iterator(class_))


def get_metadata_map(class_):
    rv = {}
    for metadata in get_metadata_iterator(class_):
        rv[metadata.colname] = metadata
    return rv
</snippet></ROW><ROW><id>13234481</id><snippet>mapper = class_mapper(ORMClass)
pkname = str(mapper.primary_key[0].name)
</snippet></ROW><ROW><id>13234508</id><snippet>+</snippet></ROW><ROW><id>13234508</id><snippet>&gt;&gt;&gt; '가' + 'ㄱ'
'\xea\xb0\x80\xe3\x84\xb1'
&gt;&gt;&gt; u'가' + u'ㄱ'
u'\uac00\u3131'
&gt;&gt;&gt; print u'가' + u'ㄱ'
가ㄱ
</snippet></ROW><ROW><id>13234508</id><snippet>output1 + output2
</snippet></ROW><ROW><id>13234661</id><snippet>    private void ForceSetBaudRate(string portName, int baudRate)
    {
        if (Type.GetType ("Mono.Runtime") == null) return; //It is not mono === not linux! 
        string arg = String.Format("-F {0} speed {1}",portName , baudRate);
        var proc = new Process
            {
                EnableRaisingEvents = false,
                StartInfo = {FileName = @"stty", Arguments = arg}
            };
        proc.Start();
        proc.WaitForExit();
    }
</snippet></ROW><ROW><id>13234661</id><snippet>    _serialPort.PortName = PortName;
    _serialPort.BaudRate = BaudRate;
    _serialPort.Open();
    ForceSetBaudRate(PortName, BaudRate);
</snippet></ROW><ROW><id>13235057</id><snippet>func.__dict__</snippet></ROW><ROW><id>13235057</id><snippet>&gt;&gt;&gt; def func():
...     pass
... 
&gt;&gt;&gt; func.a = 19
&gt;&gt;&gt; 
&gt;&gt;&gt; func.__dict__
{'a': 19}
&gt;&gt;&gt; vars(func)
{'a': 19}
&gt;&gt;&gt; vars(func) is func.__dict__
True
</snippet></ROW><ROW><id>13235564</id><snippet>if all(s in row for s in search):
</snippet></ROW><ROW><id>13235564</id><snippet>if any(s in row for s in search):
</snippet></ROW><ROW><id>13235564</id><snippet>search</snippet></ROW><ROW><id>13235564</id><snippet>search = set(search)
...
</snippet></ROW><ROW><id>13235564</id><snippet>set</snippet></ROW><ROW><id>13235564</id><snippet>tuple</snippet></ROW><ROW><id>13235564</id><snippet>set</snippet></ROW><ROW><id>13235564</id><snippet>if any(r in search for r in row):
</snippet></ROW><ROW><id>13235564</id><snippet>if search.intersection(row):
   ...
</snippet></ROW><ROW><id>13235564</id><snippet>any</snippet></ROW><ROW><id>13235564</id><snippet>row</snippet></ROW><ROW><id>13235564</id><snippet>with open(fRoot + "\\EPP.txt", "r") as f:
    search = set(line.rstrip('\n') for line in f)
</snippet></ROW><ROW><id>13235910</id><snippet>&lt;a href="http://docs.python.org/2/library/os.path.html#os.path.isabs"&gt;os.path.isabs&lt;/a&gt;(&lt;em&gt;PATH&lt;/em&gt;)</snippet></ROW><ROW><id>13236088</id><snippet>pysqlite</snippet></ROW><ROW><id>13236088</id><snippet>sqlite3</snippet></ROW><ROW><id>13236088</id><snippet>try</snippet></ROW><ROW><id>13236088</id><snippet>except ImportError</snippet></ROW><ROW><id>13236088</id><snippet>try:
    import sqlite3
except ImportError:
    from pysqlite2 import dbapi2 as sqlite3
</snippet></ROW><ROW><id>13236205</id><snippet>&gt;&gt;&gt; def listmaker(num):
    l = []
    for i in xrange(1, num+1):
        for j in xrange(i):
            l.append(i)
    return l

&gt;&gt;&gt; print listmaker(4)
[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
</snippet></ROW><ROW><id>13236205</id><snippet>&gt;&gt;&gt; def listmaker2(num):
    return [y for z in [[x]*(x) for x in xrange(1, num+1)] for y in z]

&gt;&gt;&gt; print listmaker2(4)
[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
</snippet></ROW><ROW><id>13236205</id><snippet>&gt;&gt;&gt; def listmaker3(num):
    l = []
    for i in xrange(1, num+1):
        l.extend([i]*(i))
    return l

&gt;&gt;&gt; print listmaker3(4)
[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
</snippet></ROW><ROW><id>13236220</id><snippet>ValueError: matplotlib display text must have all code points &lt; 128 
or use Unicode strings
</snippet></ROW><ROW><id>13236220</id><snippet>xlabel</snippet></ROW><ROW><id>13236220</id><snippet>ax.set_xlabel(u"something at 55°")
</snippet></ROW><ROW><id>13236894</id><snippet>id="myModal"</snippet></ROW><ROW><id>13236894</id><snippet>href="#myModal"</snippet></ROW><ROW><id>13236894</id><snippet>id="{{client.pk}}"</snippet></ROW><ROW><id>13236894</id><snippet>href="#{{client.pk}}"</snippet></ROW><ROW><id>13236948</id><snippet>if line.strip().startswith('keywords'):
    line = line.replace(';',',')
outfile.write(line) 
</snippet></ROW><ROW><id>13237078</id><snippet>library.zip</snippet></ROW><ROW><id>13237078</id><snippet>PATH</snippet></ROW><ROW><id>13237078</id><snippet>cd</snippet></ROW><ROW><id>13237605</id><snippet>import string 

def variation(stem, word):
    return word.lower() in [stem, stem + 'es', stem + 's']

def variations(sentence, stem):
    sentence = cleanPunctuation(sentence).split()
    return ( (i, w) for i, w in enumerate(sentence) if variation(stem, w) )

def cleanPunctuation(sentence):
    exclude = set(string.punctuation)
    return ''.join(ch for ch in sentence if ch not in exclude)

def firstVariation(sentence, stem):
    for i, w  in variations(sentence, stem):
        return i, w

sentence = "First coach, here another two coaches. Coaches are nice."

print firstVariation(sentence, 'coach')

# print all variations/forms of 'coach' found in the sentence:
print "\n".join([str(i) + ' ' + w for i,w in variations(sentence, 'coach')])
</snippet></ROW><ROW><id>13237991</id><snippet>key</snippet></ROW><ROW><id>13237991</id><snippet>sorted()</snippet></ROW><ROW><id>13237991</id><snippet>sort()</snippet></ROW><ROW><id>13237991</id><snippet>yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)
</snippet></ROW><ROW><id>13237991</id><snippet>&gt;&gt;&gt; yourdata = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
&gt;&gt;&gt; yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)
&gt;&gt;&gt; yourdata
[{'key': {'subkey': 10}}, {'key': {'subkey': 5}}, {'key': {'subkey': 1}}]
</snippet></ROW><ROW><id>13237991</id><snippet>key</snippet></ROW><ROW><id>13237991</id><snippet>subkey</snippet></ROW><ROW><id>13238145</id><snippet>import argparse
p = argparse.ArgumentParser()
p.add_argument('a', nargs='*')
res = p.parse_args()
print res.a
</snippet></ROW><ROW><id>13238145</id><snippet>% python test.py 1 2 3
['1', '2', '3']
</snippet></ROW><ROW><id>13238301</id><snippet>driver.find_element_by_id("formControl")
</snippet></ROW><ROW><id>13238307</id><snippet>zero</snippet></ROW><ROW><id>13238307</id><snippet>free()</snippet></ROW><ROW><id>13238307</id><snippet>NULL</snippet></ROW><ROW><id>13238307</id><snippet>PyObject</snippet></ROW><ROW><id>13238307</id><snippet>PyObject</snippet></ROW><ROW><id>13238307</id><snippet>O</snippet></ROW><ROW><id>13238307</id><snippet>static PyObject *my_callback = NULL;

static PyObject* my_set_callback(PyObject *dummy, PyObject *args)
{
    PyObject *result = NULL;    
    if (PyArg_ParseTuple(args, "O:set_callback", &amp;my_callback)) {
        if (!PyCallable_Check(my_callback)) {
            PyErr_SetString(PyExc_TypeError, "parameter must be callable");
            return NULL;
        }
        Py_XINCREF(my_callback); /* Add a reference to new callback */           
        Py_INCREF(Py_None);      /* Boilerplate to return "None" */
        result = Py_None;
    }
    return result;
}
</snippet></ROW><ROW><id>13238441</id><snippet>#!/usr/bin/env python
import matplotlib

from pylab import *
from matplotlib.colors import colorConverter


#Some simple functions to generate colours.
def pastel(colour, weight=2.4):
    """ Convert colour into a nice pastel shade"""
    rgb = asarray(colorConverter.to_rgb(colour))
    # scale colour
    maxc = max(rgb)
    if maxc &lt; 1.0 and maxc &gt; 0:
        # scale colour
        scale = 1.0 / maxc
        rgb = rgb * scale
    # now decrease saturation
    total = sum(rgb)
    slack = 0
    for x in rgb:
        slack += 1.0 - x

    # want to increase weight from total to weight
    # pick x s.t.  slack * x == weight - total
    # x = (weight - total) / slack
    x = (weight - total) / slack

    rgb = [c + (x * (1.0-c)) for c in rgb]

    return rgb

def get_colours(n):
    """ Return n pastel colours. """
    base = asarray([[1,0,0], [0,1,0], [0,0,1]])

    if n &lt;= 3:
        return base[0:n]

    # how many new colours to we need to insert between
    # red and green and between green and blue?
    needed = (((n - 3) + 1) / 2, (n - 3) / 2)

    colours = []
    for start in (0, 1):
        for x in linspace(0, 1, needed[start]+2):
            colours.append((base[start] * (1.0 - x)) +
                           (base[start+1] * x))

    return [pastel(c) for c in colours[0:n]]



axes([0.2, 0.2, 0.7, 0.6])   # leave room below the axes for the table

data = [[  66386,  174296,   75131,  577908,   32015],
        [  58230,  381139,   78045,   99308,  160454],
        [  89135,   80552,  152558,  497981,  603535],
        [  78415,   81858,  150656,  193263,   69638],
        [ 139361,  331509,  343164,  781380,   52269]]

colLabels = ('Freeze', 'Wind', 'Flood', 'Quake', 'Hail')
rowLabels = ['%d year' % x for x in (100, 50, 20, 10, 5)]

# Get some pastel shades for the colours
colours = get_colours(len(colLabels))
colours.reverse()
rows = len(data)

ind = arange(len(colLabels)) + 0.3  # the x locations for the groups
cellText = []
width = 0.4     # the width of the bars
yoff = array([0.0] * len(colLabels)) # the bottom values for stacked bar chart
for row in xrange(rows):
    bar(ind, data[row], width, bottom=yoff, color=colours[row])
    yoff = yoff + data[row]
    cellText.append(['%1.1f' % (x/1000.0) for x in yoff])

# Add a table at the bottom of the axes
colours.reverse()
cellText.reverse()
the_table = table(cellText=cellText,
                  rowLabels=rowLabels, rowColours=colours,
                  colLabels=colLabels,
                  loc='bottom')
ylabel("Loss $1000's")
vals = arange(0, 2500, 500)
yticks(vals*1000, ['%d' % val for val in vals])
xticks([])
title('Loss by Disaster')

show()
</snippet></ROW><ROW><id>13238441</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#Create a figure and axes with room for the table
fig = plt.figure()
ax = plt.axes([0.2, 0.2, 0.7, 0.6])

#Create labels for the rows and columns as tuples
colLabels = ('36', '40', '44', '48', '149', '153', '157', '161', '165')
rowLabels = ('UDL DL', 'UDP UL', 'TCP DL', 'TCP UL')

#Table data as a numpy array
tableData = np.array([[  36.7128,  37.684,   38.283,  48.425,   32.839, 36.424, 34.440, 31.642, 35.710],
        [  36.7128,  37.684,   38.283,  48.425,   32.839, 36.424, 34.440, 31.642, 35.710],
        [  36.7128,  37.684,   38.283,  48.425,   32.839, 36.424, 34.440, 31.642, 35.710],
        [  36.7128,  37.684,   38.283,  48.425,   32.839, 36.424, 34.440, 31.642, 35.710]])

#Get the current color cycle as a list, then reset the cycle to be at the beginning
colors = []     
while True:
    colors.append(ax._get_lines.color_cycle.next())
    if colors[0] == colors[-1] and len(colors)&gt;1:
        colors.pop(-1)
        break

for i in xrange(len(colors)-1):
    ax._get_lines.color_cycle.next()

#Show the table
table = plt.table(cellText=tableData,
                  rowLabels=rowLabels, rowColours=colors,
                  colLabels=colLabels,
                  loc='bottom')

#Make some line plots
x = np.linspace(0,10,100)                  
ax.plot(x,np.sin(x))
ax.plot(x,-1*np.sin(x))
ax.plot(x,np.cos(x))
ax.plot(x,-1*np.cos(x))

#Turn off x-axis ticks and show the plot              
plt.xticks([])
plt.show()
</snippet></ROW><ROW><id>13238477</id><snippet>findAll("div")</snippet></ROW><ROW><id>13238477</id><snippet>class=="line-down"</snippet></ROW><ROW><id>13238523</id><snippet>a[0][1] - a[1][x]</snippet></ROW><ROW><id>13238523</id><snippet>a[0][0] - a[2][0]</snippet></ROW><ROW><id>13238523</id><snippet>a[1][0] - a[2][0]</snippet></ROW><ROW><id>13238523</id><snippet>result = []
for i, sub_x in enumerate(a[:-1]):
    for sub_y in a[i+1:]:
        for x in sub_x:
            result.append([x - y for y in sub_y])

&gt;&gt;&gt; result
[[-1, -2, -5, -6], [3, 2, -1, -2], [-9], [-5], [-8], [-7], [-4], [-3]]
</snippet></ROW><ROW><id>13238523</id><snippet>[[x - y for y in sub_y]
     for i, sub_x in enumerate(a[:-1]) for sub_y in a[i+1:] for x in sub_x]
</snippet></ROW><ROW><id>13238634</id><snippet>QInpuMask</snippet></ROW><ROW><id>13238634</id><snippet>5_,_4_3._2</snippet></ROW><ROW><id>13238634</id><snippet>__,543.2_</snippet></ROW><ROW><id>13238634</id><snippet>_5,4__3._2</snippet></ROW><ROW><id>13238634</id><snippet>QDoubleSpinBox</snippet></ROW><ROW><id>13238634</id><snippet>self.spinXPosition = QtGui.QDoubleSpinBox(self)
self.spinXPosition.setRange(0, 10000)
self.spinXPosition.setDecimals(2)
</snippet></ROW><ROW><id>13238743</id><snippet>None</snippet></ROW><ROW><id>13238743</id><snippet>NoneType</snippet></ROW><ROW><id>13238743</id><snippet>type(i) is None</snippet></ROW><ROW><id>13238743</id><snippet>False</snippet></ROW><ROW><id>13238743</id><snippet>type(i) is type(None)</snippet></ROW><ROW><id>13238932</id><snippet>def time_after_time(time_a, time_b):
    time_a_min = time_a.hour * 60 + time_a.minute
    time_b_min = time_b.hour * 60 + time_b.minute
    out_min = time_b_min - time_a_min
    if out_min &lt; 0:
        out_min += 24 * 60
    return datetime.time(out_min / 60, out_min % 60)
</snippet></ROW><ROW><id>13239135</id><snippet>call_command(...)</snippet></ROW><ROW><id>13239135</id><snippet>call_command</snippet></ROW><ROW><id>13239135</id><snippet>Process</snippet></ROW><ROW><id>13239135</id><snippet> p = Process(target=call_command, args = ("processphoto", 1000))
</snippet></ROW><ROW><id>13239305</id><snippet>list</snippet></ROW><ROW><id>13239305</id><snippet>tuple</snippet></ROW><ROW><id>13239305</id><snippet>dict</snippet></ROW><ROW><id>13239305</id><snippet>In [1]: mylist = []

In [2]: mylist.append(('key', 'value'))

In [3]: mylist.insert(0, ('foo', 'bar'))
</snippet></ROW><ROW><id>13239305</id><snippet>dict</snippet></ROW><ROW><id>13239305</id><snippet>In [4]: dict(mylist)
Out[4]: {'foo': 'bar', 'key': 'value'}
</snippet></ROW><ROW><id>13239305</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13239316</id><snippet>import sys, os
from collections import defaultdict

filenames = sys.argv[1:]

# collect like-named files
groups = defaultdict(set)
for filename in filenames:
    key = filename.split('.')[0].split("-")[0]
    groups[key].add(filename)

# work on each group
for names in groups.values():
    target_name = sorted(names)[0] # or min(names, key=len), or whatever
    largest_file = max(names, key=os.path.getsize)

    os.rename(largest_file, target_name)

    to_remove = names.difference((largest_file, target_name))
    for name in to_remove:
        os.remove(name)
</snippet></ROW><ROW><id>13239366</id><snippet>.__file__</snippet></ROW><ROW><id>13239476</id><snippet>msg.get_payload()
</snippet></ROW><ROW><id>13239599</id><snippet>input()</snippet></ROW><ROW><id>13239599</id><snippet>stdin</snippet></ROW><ROW><id>13239599</id><snippet>stdout</snippet></ROW><ROW><id>13239599</id><snippet>/* Fallback if we're not interactive */
if (promptarg != NULL) {
    if (PyFile_WriteObject(promptarg, fout, Py_PRINT_RAW) != 0)
         return NULL;
}
tmp = _PyObject_CallMethodId(fout, &amp;PyId_flush, "");
if (tmp == NULL)
    PyErr_Clear();
else
    Py_DECREF(tmp);
return PyFile_GetLine(fin, -1);
</snippet></ROW><ROW><id>13239599</id><snippet>PyFile_GetLine</snippet></ROW><ROW><id>13239599</id><snippet>readline</snippet></ROW><ROW><id>13239599</id><snippet>sys.std*</snippet></ROW><ROW><id>13239599</id><snippet>try: finally:</snippet></ROW><ROW><id>13239599</id><snippet>mock</snippet></ROW><ROW><id>13239599</id><snippet>from unittest.mock import patch
from io import StringIO

with patch("sys.stdin", StringIO("FOO")), patch("sys.stdout", new_callable=StringIO) as mocked_out:
    x = input()
    print("Read:", x)

assert mocked_out.getvalue() == "Read: FOO\n"
</snippet></ROW><ROW><id>13239873</id><snippet>long</snippet></ROW><ROW><id>13239873</id><snippet>long</snippet></ROW><ROW><id>13239895</id><snippet>requests</snippet></ROW><ROW><id>13239895</id><snippet>import urllib2
# create a password manager
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()

# Add the username and password.
# If we knew the realm, we could use it instead of None.
top_level_url = "http://example.com/foo/"
password_mgr.add_password(None, top_level_url, username, password)

handler = urllib2.HTTPBasicAuthHandler(password_mgr)

# create "opener" (OpenerDirector instance)
opener = urllib2.build_opener(handler)

# use the opener to fetch a URL
opener.open(a_url)

# Install the opener.
# Now all calls to urllib2.urlopen use our opener.
urllib2.install_opener(opener)
</snippet></ROW><ROW><id>13239898</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; c = boto.connect_s3()
&gt;&gt;&gt; bucket = c.lookup('mybucketname')
&gt;&gt;&gt; l = [(k.last_modified, k) for k in bucket]
&gt;&gt;&gt; key_to_download = sorted(l, cmp=lambda x,y: cmp(x[0], y[0]))[-1][1]
&gt;&gt;&gt; key_to_download.get_contents_to_filename('myfile')
</snippet></ROW><ROW><id>13240191</id><snippet>sys.path.append(os.path.dirname(__file__))
</snippet></ROW><ROW><id>13240460</id><snippet>yield from</snippet></ROW><ROW><id>13240460</id><snippet>from itertools import takewhile, islice, count

def chunk(stream, size):
    return takewhile(bool, (list(islice(stream, size)) for _ in count()))
</snippet></ROW><ROW><id>13240460</id><snippet>&gt;&gt;&gt; list(chunk((i for i in range(3)), 3))
[[0, 1, 2]]
&gt;&gt;&gt; list(chunk((i for i in range(6)), 3))
[[0, 1, 2], [3, 4, 5]]
&gt;&gt;&gt; list(chunk((i for i in range(8)), 3))
[[0, 1, 2], [3, 4, 5], [6, 7]]
</snippet></ROW><ROW><id>13240460</id><snippet>chunk_input_stream</snippet></ROW><ROW><id>13240460</id><snippet>iter()</snippet></ROW><ROW><id>13240460</id><snippet>repeat</snippet></ROW><ROW><id>13240460</id><snippet>cycle</snippet></ROW><ROW><id>13240460</id><snippet>count()</snippet></ROW><ROW><id>13240487</id><snippet>virtualenv</snippet></ROW><ROW><id>13240487</id><snippet>sys.path</snippet></ROW><ROW><id>13240487</id><snippet>virtualenv x --system-site-packages</snippet></ROW><ROW><id>13240487</id><snippet>x</snippet></ROW><ROW><id>13240487</id><snippet>site-packages</snippet></ROW><ROW><id>13240487</id><snippet>sys.path</snippet></ROW><ROW><id>13240487</id><snippet>/app/python/lib/python2.7/site-packages</snippet></ROW><ROW><id>13240487</id><snippet>virtualenv</snippet></ROW><ROW><id>13240487</id><snippet>--system-site-packages</snippet></ROW><ROW><id>13240487</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13240775</id><snippet>In [39]: from bs4 import BeautifulSoup

In [40]: s = """\
   ....: &lt;a href="http://example.com"&gt;TEXT&lt;/a&gt;
   ....: &lt;a href="http://example.com/link"&gt;TEXT&lt;/a&gt;
   ....: &lt;a href="http://example.com/page"&gt;TEXT&lt;/a&gt;
   ....: &lt;a href="http://dontmatchme.com/page"&gt;WRONGTEXT&lt;/a&gt;"""

In [41]: soup = BeautifulSoup(s)

In [42]: for link in soup.findAll('a', href=True, text='TEXT'):
   ....:     print link['href']
   ....:
   ....:
http://example.com
http://example.com/link
http://example.com/page
</snippet></ROW><ROW><id>13240817</id><snippet>val = self.__old_save(self, *args, **kwargs)
</snippet></ROW><ROW><id>13240875</id><snippet>a</snippet></ROW><ROW><id>13240875</id><snippet>b</snippet></ROW><ROW><id>13240875</id><snippet>d = (a - b).normalized()</snippet></ROW><ROW><id>13240875</id><snippet>[ d.x, d.y]
[-d.y, d.x]
</snippet></ROW><ROW><id>13240875</id><snippet>center = sum(convexhullpoints) / len(convexhullpoints)
size = 2 * sum(abs(p - center) for p in convexhullpoints) / len(convexhullpoints)
</snippet></ROW><ROW><id>13241120</id><snippet>loseConnection</snippet></ROW><ROW><id>13241120</id><snippet>clients</snippet></ROW><ROW><id>13241120</id><snippet>def connectionLost(self, reason):
    Factory.clients.remove(self)
</snippet></ROW><ROW><id>13241120</id><snippet>clients</snippet></ROW><ROW><id>13241120</id><snippet>Factory.clients</snippet></ROW><ROW><id>13241120</id><snippet>class botfactory(Factory):

    def buildProtocol(self, addr):
        protocol = bottalk()
        protocol.factory = self
        return protocol

factory = botfactory()
factory.clients = []

StandardIO(factory.buildProtocol(None))

reactor.listenTCP(8123, factory)
</snippet></ROW><ROW><id>13241120</id><snippet>bottalk</snippet></ROW><ROW><id>13241120</id><snippet>self.factory.clients</snippet></ROW><ROW><id>13241120</id><snippet>Factory.clients</snippet></ROW><ROW><id>13241168</id><snippet>gps&lt;b&gt;d&lt;/b&gt;</snippet></ROW><ROW><id>13241258</id><snippet>\n</snippet></ROW><ROW><id>13241258</id><snippet>\</snippet></ROW><ROW><id>13241258</id><snippet>n</snippet></ROW><ROW><id>13241258</id><snippet>s = r'\nthis is a string'
s = s.strip()
print s
s = s.strip(r'\n')
print s
</snippet></ROW><ROW><id>13241258</id><snippet>\n</snippet></ROW><ROW><id>13241258</id><snippet>if s.startswith(r'\n'): s = s[2:]
</snippet></ROW><ROW><id>13241258</id><snippet>re.sub</snippet></ROW><ROW><id>13241258</id><snippet>re.sub(r'^(?:\\n)+','',r'\n\nfoobar')
</snippet></ROW><ROW><id>13241465</id><snippet>a = "    indented string"
leading_spaces = len(a) - len(a.lstrip())
print leading_spaces
</snippet></ROW><ROW><id>13241465</id><snippet>&gt;&gt;&gt; a = "    indented string"
&gt;&gt;&gt; leading_spaces = len(a) - len(a.lstrip())
&gt;&gt;&gt; print leading_spaces
4
</snippet></ROW><ROW><id>13241465</id><snippet>&gt;&gt;&gt; a = "\t\tindented string"
&gt;&gt;&gt; leading_spaces = len(a) - len(a.lstrip())
&gt;&gt;&gt; print leading_spaces
2
</snippet></ROW><ROW><id>13241465</id><snippet>with open("myfile.txt") as afile:
    line_lengths = [len(line) - len(line.lstrip()) for line in afile]
</snippet></ROW><ROW><id>13241517</id><snippet>var pySrc =
@"def Cal d(Numb1, Numb2):
    retur umb1 + Numb2";

// host python and execute script
var engine = IronPython.Hosting.Python.CreateEngine();
var scope = engine.CreateScope();
engine.Execute(pySrc, scope);

// get function and dynamically invoke
var calcAdd = scope.GetVariable("CalcAdd");
var result = calcAdd(34, 8); // returns 42 (Int32)

// get function with a strongly typed signature
var calcAddTyped = scope.GetVariable&lt;Func&lt;decimal, decimal, decimal&gt;&gt;("CalcAdd");
var resultTyped = calcAddTyped(5, 7); // returns 12m
</snippet></ROW><ROW><id>13241637</id><snippet>increment(tag)
</snippet></ROW><ROW><id>13241637</id><snippet>get_count(tag)
</snippet></ROW><ROW><id>13241797</id><snippet>x.select('//div[@id="texto"]//text()').extract()
</snippet></ROW><ROW><id>13241797</id><snippet>|</snippet></ROW><ROW><id>13241797</id><snippet>'&lt;xpath1&gt;|&lt;xpath2&gt;'
</snippet></ROW><ROW><id>13241797</id><snippet>|</snippet></ROW><ROW><id>13241797</id><snippet>x.select('//div[@id="texto"]/text() | //div[@id="texto"]/p/text()')
</snippet></ROW><ROW><id>13241799</id><snippet>"attriubtes": ["id", "name"]</snippet></ROW><ROW><id>13241799</id><snippet>product</snippet></ROW><ROW><id>13241799</id><snippet>id_product</snippet></ROW><ROW><id>13241799</id><snippet>id_product</snippet></ROW><ROW><id>13241799</id><snippet>product</snippet></ROW><ROW><id>13241799</id><snippet>name</snippet></ROW><ROW><id>13241799</id><snippet>category</snippet></ROW><ROW><id>13241799</id><snippet>"dimensions": [
    {"name": "user", "attributes": ["id", "name"]},
    {"name": "product", "attributes": ["id", "name"]},
    {"name": "date"}
],
</snippet></ROW><ROW><id>13241799</id><snippet>"cubes": [
    {
        "name": "purchases",
        "dimensions": ["user", "product", "date"],
        ...
</snippet></ROW><ROW><id>13241799</id><snippet>attribute</snippet></ROW><ROW><id>13241799</id><snippet>price</snippet></ROW><ROW><id>13241799</id><snippet>product.id</snippet></ROW><ROW><id>13241799</id><snippet>dimension.attribute</snippet></ROW><ROW><id>13241799</id><snippet>"mappings": {
    "price": "products.price",
    "product.id": "products.id",
    "product.name": "products.name",
    "user.id": "users.id",
    "user.name": "users.name"
}
</snippet></ROW><ROW><id>13241799</id><snippet>fact purchases
id | date | user_id | product_id | amount

dimension product
id | name | price

dimension user
id | name
</snippet></ROW><ROW><id>13241799</id><snippet>amount</snippet></ROW><ROW><id>13241799</id><snippet>count</snippet></ROW><ROW><id>13241799</id><snippet>price</snippet></ROW><ROW><id>13241799</id><snippet>product</snippet></ROW><ROW><id>13241799</id><snippet>{
    "dimensions": [
        {"name": "user", "attributes": ["id", "name"]},
        {"name": "product", "attributes": ["id", "name"]},
        {"name": "date"}
    ],
    "cubes": [
        {
            "name": "purchases",
            "dimensions": ["user", "product", "date"],
            "measures": ["price"],
            "mappings": {
                "price": "products.price",
                "product.id": "products.id",
                "product.name": "products.name",
                "user.id": "users.id",
                "user.name": "users.name"
            },
            "joins": [
                {
                    "master": "purchases.user_id",
                    "detail": "users.id"
                },
                {
                    "master": "purchases.product_id",
                    "detail": "products.id"
                }
            ]
        }

    ]
}
</snippet></ROW><ROW><id>13241799</id><snippet>slicer</snippet></ROW><ROW><id>13241799</id><snippet>slicer.ini</snippet></ROW><ROW><id>13241799</id><snippet>[server]
backend: sql
port: 5000
log_level: info
prettyprint: yes

[workspace]
url: sqlite:///data.sqlite

[model]
path: model.json
</snippet></ROW><ROW><id>13241799</id><snippet>url</snippet></ROW><ROW><id>13241799</id><snippet>[workspace]</snippet></ROW><ROW><id>13241799</id><snippet>path</snippet></ROW><ROW><id>13241799</id><snippet>[model]</snippet></ROW><ROW><id>13241799</id><snippet>curl "http://localhost:5000/aggregate"
</snippet></ROW><ROW><id>13241799</id><snippet>curl "http://localhost:5000/aggregate?drilldown=product"
</snippet></ROW><ROW><id>13241941</id><snippet>y[1]</snippet></ROW><ROW><id>13241941</id><snippet>y[1][0]</snippet></ROW><ROW><id>13242123</id><snippet>cython -a</snippet></ROW><ROW><id>13242123</id><snippet>res[i,j,:] = [C,X,0]
</snippet></ROW><ROW><id>13242123</id><snippet>[C,X,0]</snippet></ROW><ROW><id>13242123</id><snippet>(i, j, slice(None))</snippet></ROW><ROW><id>13242123</id><snippet>res.__setitem__</snippet></ROW><ROW><id>13242123</id><snippet>cdef double v1, v2, v3</snippet></ROW><ROW><id>13242123</id><snippet>v1, v2, v3 = C, X, 0</snippet></ROW><ROW><id>13242123</id><snippet>v1, v2, v3</snippet></ROW><ROW><id>13242123</id><snippet>res[i,j,0]</snippet></ROW><ROW><id>13242634</id><snippet>repo_information</snippet></ROW><ROW><id>13242634</id><snippet>[
  ['name'],
  ['name2'],
  ['name3']
]
</snippet></ROW><ROW><id>13242634</id><snippet>writerows</snippet></ROW><ROW><id>13242634</id><snippet>def write_to_csv(list_writer, info):
    list_writer.writerows(info)
</snippet></ROW><ROW><id>13242634</id><snippet>for repo in list_of_repos:            
        repo_information.append(repo['name'])
    print repo_information # ['name', 'name2', 'name3']
    return repo_information
</snippet></ROW><ROW><id>13242634</id><snippet>writerow</snippet></ROW><ROW><id>13242643</id><snippet>&lt;name&gt;Macro</snippet></ROW><ROW><id>13242643</id><snippet>JustASample</snippet></ROW><ROW><id>13242643</id><snippet>JustASampleMacro</snippet></ROW><ROW><id>13242643</id><snippet>MyMacro</snippet></ROW><ROW><id>13242643</id><snippet>My</snippet></ROW><ROW><id>13242643</id><snippet>[[My]]</snippet></ROW><ROW><id>13242643</id><snippet>.pyc</snippet></ROW><ROW><id>13242681</id><snippet>name</snippet></ROW><ROW><id>13242681</id><snippet>Request.get</snippet></ROW><ROW><id>13242681</id><snippet>Request.get_all(name)</snippet></ROW><ROW><id>13242681</id><snippet>Request.get(name, allow_multiple=True)</snippet></ROW><ROW><id>13242681</id><snippet>def post(self):
    adjectives = self.request.get('adjective' allow_multiple=True)
    for a in adjectives:
        # increment count
        self.adjective_count[a] += 1 # or whatever

        # do more stuff with adjective a, if you want

    # do other stuff with the request
</snippet></ROW><ROW><id>13242922</id><snippet>python (filename).py</snippet></ROW><ROW><id>13242922</id><snippet>PATH</snippet></ROW><ROW><id>13242922</id><snippet>#!usr\bin\python</snippet></ROW><ROW><id>13242940</id><snippet>list</snippet></ROW><ROW><id>13242940</id><snippet>dict</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>int</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>def __init__(self, target, low, high):
    self.target, self.low, self.high = int(target), int(low), int(high)
</snippet></ROW><ROW><id>13242940</id><snippet>__int__</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>explicit operator int() const</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt foo(BoundInt param) { BoundInt local = param; return local; }
BoundInt bar;
BoundInt baz = foo(bar);
</snippet></ROW><ROW><id>13242940</id><snippet>bar</snippet></ROW><ROW><id>13242940</id><snippet>param</snippet></ROW><ROW><id>13242940</id><snippet>param</snippet></ROW><ROW><id>13242940</id><snippet>local</snippet></ROW><ROW><id>13242940</id><snippet>local</snippet></ROW><ROW><id>13242940</id><snippet>baz</snippet></ROW><ROW><id>13242940</id><snippet>def foo(param): local = param; return local
bar = BoundInt();
baz = foo(bar)
</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>baz</snippet></ROW><ROW><id>13242940</id><snippet>bar</snippet></ROW><ROW><id>13242940</id><snippet>baz</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt(baz)</snippet></ROW><ROW><id>13242940</id><snippet>pickle</snippet></ROW><ROW><id>13242940</id><snippet>deepcopy</snippet></ROW><ROW><id>13242940</id><snippet>__cmp__</snippet></ROW><ROW><id>13242940</id><snippet>int</snippet></ROW><ROW><id>13242940</id><snippet>int</snippet></ROW><ROW><id>13242940</id><snippet>dir(int())</snippet></ROW><ROW><id>13242940</id><snippet>fractions.Fraction</snippet></ROW><ROW><id>13242940</id><snippet>x</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>y</snippet></ROW><ROW><id>13242940</id><snippet>int</snippet></ROW><ROW><id>13242940</id><snippet>x+y</snippet></ROW><ROW><id>13242940</id><snippet>int</snippet></ROW><ROW><id>13242940</id><snippet>y+x</snippet></ROW><ROW><id>13242940</id><snippet>x+=y</snippet></ROW><ROW><id>13242940</id><snippet>&gt;&gt;&gt; i = BoundInt(3, 0, 10)
&gt;&gt;&gt; j = i
&gt;&gt;&gt; i.set(5)
&gt;&gt;&gt; j
5
</snippet></ROW><ROW><id>13242940</id><snippet>j = i</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt &amp;j = i</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt j = i</snippet></ROW><ROW><id>13242940</id><snippet>BoundInt</snippet></ROW><ROW><id>13242940</id><snippet>set</snippet></ROW><ROW><id>13242940</id><snippet>__iadd__</snippet></ROW><ROW><id>13242940</id><snippet>__iadd__</snippet></ROW><ROW><id>13242940</id><snippet>i += 2</snippet></ROW><ROW><id>13242940</id><snippet>i = i.__add__(2)</snippet></ROW><ROW><id>13242940</id><snippet>i</snippet></ROW><ROW><id>13243010</id><snippet> shortvids = ['youtu.be/'+x.split('=')[1] for x in videos]
</snippet></ROW><ROW><id>13243010</id><snippet>['youtu.be/oKI-tD0L18A', 'youtu.be/82LCKBdjywQ', 'youtu.be/GpNSip5gyKo']
</snippet></ROW><ROW><id>13243090</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; c = '[{"changed_aspect": "media", "subscription_id": "xxxx", "object": "user", "object_id": "xxxx", "time": "xxxxxx"}]'
&gt;&gt;&gt; data = json.loads(c)
&gt;&gt;&gt; data[0]['changed_aspect']
u'media'
</snippet></ROW><ROW><id>13243348</id><snippet>r"kill(?:ed|ing|s)[^\d.]*(\d+)[^.]*?(?:men|women|children|people)?"
</snippet></ROW><ROW><id>13243348</id><snippet>.</snippet></ROW><ROW><id>13243465</id><snippet>glob</snippet></ROW><ROW><id>13243465</id><snippet>.
├── ~a~b~c.csv
├── file.csv
├── ~foo~bar~f1.csv
└── hello.txt
</snippet></ROW><ROW><id>13243465</id><snippet>import os, glob
for f in glob.glob('~*~*~*.csv'):
    os.rename(f,f.split('~')[-1])
</snippet></ROW><ROW><id>13243465</id><snippet>.
├── c.csv
├── f1.csv
├── file.csv
└── hello.txt
</snippet></ROW><ROW><id>13243566</id><snippet>myMax = line</snippet></ROW><ROW><id>13243566</id><snippet>myMax = int(line)</snippet></ROW><ROW><id>13243566</id><snippet>if int(line) &gt; int(myMax):</snippet></ROW><ROW><id>13243566</id><snippet>if int(line) &gt; myMax:</snippet></ROW><ROW><id>13243573</id><snippet>,"</snippet></ROW><ROW><id>13243573</id><snippet>,</snippet></ROW><ROW><id>13243573</id><snippet>","</snippet></ROW><ROW><id>13243573</id><snippet>&gt;&gt;&gt; x = '"2","black,white","more","stuff"'
&gt;&gt;&gt; x
'"2","black,white","more","stuff"'
&gt;&gt;&gt; x.split(',"')
['"2"', 'black,white"', 'more"', 'stuff"']
&gt;&gt;&gt; [y.strip('"') for y in x.split(',"')]
['2', 'black,white', 'more', 'stuff']
</snippet></ROW><ROW><id>13243573</id><snippet>shlex</snippet></ROW><ROW><id>13243573</id><snippet>&gt;&gt;&gt; x = '"2","black,white","more","stuff"'
&gt;&gt;&gt; x
'"2","black,white","more","stuff"'
&gt;&gt;&gt; import shlex
&gt;&gt;&gt; y = shlex.shlex(x)
&gt;&gt;&gt; [i.strip('"') for i in y if i != ',']
['2', 'black,white', 'more', 'stuff']
</snippet></ROW><ROW><id>13243598</id><snippet>Model.objects.filter(...)</snippet></ROW><ROW><id>13243598</id><snippet>qset[0]</snippet></ROW><ROW><id>13243598</id><snippet>__getitem__</snippet></ROW><ROW><id>13243598</id><snippet>limit 1</snippet></ROW><ROW><id>13243619</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; d = [Fraction(1, 8), Fraction(1, 7), Fraction(1, 6), Fraction(1, 5), Fraction(1, 4),          Fraction(2, 7), Fraction(1, 3), Fraction(3, 8), Fraction(2, 5) , Fraction(3, 7), Fraction(1,   2), Fraction(4, 7), Fraction(3, 5), Fraction(5, 8), Fraction(2, 3), Fraction(5, 7), Fraction(3, 4), Fraction(4, 5), Fraction(5,6), Fraction(6, 7), Fraction(7, 8)]
&gt;&gt;&gt; d.index(Fraction(1,6))
2
</snippet></ROW><ROW><id>13243667</id><snippet>from django.template.defaultfilters import slugify

class Migration(DataMigration):

    def forwards(self, orm):
        for obj in orm.MyModel.objects.filter(slug__isnull=True):
            slug = slugify(obj.name)
            obj.slug = slug
            suffix = 2
            while orm.MyModel.objects.filter(slug=obj.slug).exists():
                obj.slug = "%s-%d" % (slug, suffix)
                suffix = suffix + 1
            obj.save()


    def backwards(self, orm):
        pass # no need to change anything
</snippet></ROW><ROW><id>13243710</id><snippet>a</snippet></ROW><ROW><id>13243710</id><snippet>data = {}
test = func()   # "a"
data[test] = foo()
</snippet></ROW><ROW><id>13243731</id><snippet>listAllMatches</snippet></ROW><ROW><id>13243731</id><snippet>sol.line[0]</snippet></ROW><ROW><id>13243731</id><snippet>reg_text</snippet></ROW><ROW><id>13243731</id><snippet>grammar</snippet></ROW><ROW><id>13243731</id><snippet>from pyparsing import *
latex_h  = QuotedString("$")('latex')
reg_text = Word(alphas)('text')
grammar  = Group(OneOrMore( latex_h | reg_text ))('line')

def parse_reg_text(s, loc, toks):
    if toks.text == 'dog':
        return "atomic " + toks.text
    else:
        return "ninja " + toks.text

reg_text.setParseAction(parse_reg_text)

sol = grammar.parseString('''dog $x^2$ cat $y^3$''')
print sol.dump()
</snippet></ROW><ROW><id>13243731</id><snippet>[['atomic dog', 'x^2', 'ninja cat', 'y^3']]
- line: ['atomic dog', 'x^2', 'ninja cat', 'y^3']
  - latex: y^3
  - text: ninja cat
</snippet></ROW><ROW><id>13243870</id><snippet>return</snippet></ROW><ROW><id>13243870</id><snippet>yield</snippet></ROW><ROW><id>13243870</id><snippet>return</snippet></ROW><ROW><id>13243870</id><snippet>&gt;&gt;&gt; def f():
...     return
...     yield
... 
&gt;&gt;&gt; list(f())
[]
</snippet></ROW><ROW><id>13243870</id><snippet>if</snippet></ROW><ROW><id>13243870</id><snippet>yield</snippet></ROW><ROW><id>13243870</id><snippet>yield</snippet></ROW><ROW><id>13243870</id><snippet>&gt;&gt;&gt; def f():
...     yield
... 
&gt;&gt;&gt; list(f())
[None]
</snippet></ROW><ROW><id>13243951</id><snippet>resample()</snippet></ROW><ROW><id>13243951</id><snippet>In [72]: centers = {}

In [73]: for center, idx in df.groupby("CostCentre").groups.iteritems():
   ....:     timediff = df.ix[idx].set_index("Date")['TimeDifference']
   ....:     centers[center] = timediff.resample("W", how=sum)

In [77]: pd.concat(centers, names=['CostCentre'])
Out[77]: 
CostCentre  Date      
0           2012-09-09         0
            2012-09-16     89522
            2012-09-23         6
            2012-09-30       161
2073        2012-09-09    141208
            2012-09-16    113024
            2012-09-23    169599
            2012-09-30    170780
6078        2012-09-09    171481
            2012-09-16    160871
            2012-09-23    153976
            2012-09-30    122972
</snippet></ROW><ROW><id>13243951</id><snippet>parse_dates</snippet></ROW><ROW><id>13243951</id><snippet>True</snippet></ROW><ROW><id>13243951</id><snippet>index_col</snippet></ROW><ROW><id>13243951</id><snippet>In [28]: df = pd.read_clipboard(sep=' +', parse_dates=True, index_col=0,
   ....:                        dayfirst=True)

In [30]: df.head()
Out[30]: 
              CostCentre  TimeDifference
DateOccurred                            
2012-09-03          2073           28138
2012-09-03          6078           34844
2012-09-03          8273           31215
2012-09-03          8367           28160
2012-09-03          8959           32037
</snippet></ROW><ROW><id>13243951</id><snippet>In [37]: x = df.groupby("CostCentre").apply(lambda df: 
   ....:         df['TimeDifference'].resample("W", how=sum))

In [38]: x.head(12)
Out[38]: 
CostCentre  DateOccurred
0           2012-09-09           0
            2012-09-16       89522
            2012-09-23           6
            2012-09-30         161
2073        2012-09-09      141208
            2012-09-16      113024
            2012-09-23      169599
            2012-09-30      170780
6078        2012-09-09      171481
            2012-09-16      160871
            2012-09-23      153976
            2012-09-30      122972
</snippet></ROW><ROW><id>13243973</id><snippet>import Tkinter as tk


class DateEntry(tk.Frame):
    def __init__(self, master, frame_look={}, **look):
        args = dict(relief=tk.SUNKEN, border=1)
        args.update(frame_look)
        tk.Frame.__init__(self, master, **args)

        args = {'relief': tk.FLAT}
        args.update(look)

        self.entry_1 = tk.Entry(self, width=2, **args)
        self.label_1 = tk.Label(self, text='/', **args)
        self.entry_2 = tk.Entry(self, width=2, **args)
        self.label_2 = tk.Label(self, text='/', **args)
        self.entry_3 = tk.Entry(self, width=4, **args)

        self.entry_1.pack(side=tk.LEFT)
        self.label_1.pack(side=tk.LEFT)
        self.entry_2.pack(side=tk.LEFT)
        self.label_2.pack(side=tk.LEFT)
        self.entry_3.pack(side=tk.LEFT)

        self.entry_1.bind('&lt;KeyRelease&gt;', self._e1_check)
        self.entry_2.bind('&lt;KeyRelease&gt;', self._e2_check)
        self.entry_3.bind('&lt;KeyRelease&gt;', self._e3_check)

    def _backspace(self, entry):
        cont = entry.get()
        entry.delete(0, tk.END)
        entry.insert(0, cont[:-1])

    def _e1_check(self, e):
        cont = self.entry_1.get()
        if len(cont) &gt;= 2:
            self.entry_2.focus()
        if len(cont) &gt; 2 or not cont[-1].isdigit():
            self._backspace(self.entry_1)
            self.entry_1.focus()

    def _e2_check(self, e):
        cont = self.entry_2.get()
        if len(cont) &gt;= 2:
            self.entry_3.focus()
        if len(cont) &gt; 2 or not cont[-1].isdigit():
            self._backspace(self.entry_2)
            self.entry_2.focus()

    def _e3_check(self, e):
        cont = self.entry_2.get()
        if len(cont) &gt; 4 or not cont[-1].isdigit():
            self._backspace(self.entry_3)

    def get(self):
        return self.entry_1.get(), self.entry_2.get(), self.entry_3.get()


if __name__ == '__main__':
    def show_contents(e):
        print dentry.get()

    win = tk.Tk()
    win.title('DateEntry demo')

    dentry = DateEntry(win, font=('Helvetica', 40, tk.NORMAL), border=0)
    dentry.pack()

    win.bind('&lt;Return&gt;', show_contents)
    win.mainloop()
</snippet></ROW><ROW><id>13244026</id><snippet>ax.plot_wireframe(T, z, abs(U), cstride=1000)
</snippet></ROW><ROW><id>13244026</id><snippet>drawPropagation(1.0, 1.0, numpy.linspace(-2, 2, 10))
</snippet></ROW><ROW><id>13244026</id><snippet>import numpy
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot
from matplotlib.collections import PolyCollection

def drawPropagation(beta2, C, z):
    """ beta2 in ps / km
        C is chirp
        z is an array of z positions """
    T = numpy.linspace(-10, 10, 100)
    sx = T.size
    sy = z.size

    T = numpy.tile(T, (sy, 1))
    z = numpy.tile(z, (sx, 1)).T

    U = 1 / numpy.sqrt(1 - 1j*beta2*z * (1 + 1j * C)) * numpy.exp(- 0.5 * (1 + 1j * C) * T * T / (1 - 1j*beta2*z*(1 + 1j*C)))

    fig = pyplot.figure()
    ax = fig.add_subplot(1,1,1, projection='3d')
    U = numpy.abs(U)

    verts = []
    for i in xrange(T.shape[0]):
        verts.append(zip(T[i, :], U[i, :]))

    poly = PolyCollection(verts, facecolors=(1,1,1,1), edgecolors=(0,0,1,1))
    ax.add_collection3d(poly, zs=z[:, 0], zdir='y')
    ax.set_xlim3d(numpy.min(T), numpy.max(T))
    ax.set_ylim3d(numpy.min(z), numpy.max(z))
    ax.set_zlim3d(numpy.min(U), numpy.max(U))

drawPropagation(1.0, 1.0, numpy.linspace(-2, 2, 10))
pyplot.show()
</snippet></ROW><ROW><id>13244157</id><snippet>subjects = [allmyfilenames]
    for subj in subjects:
        with open('C:/%s.txt' %subj, 'r') as datafile:
            data = json.load(datafile)
            if data[0]['parameter']['mean'] &gt; 0.5:
                print subj
</snippet></ROW><ROW><id>13244210</id><snippet>In [59]: h, edges = histogramdd([[1,2,4],[4,2,8],[3,2,1],[2,1,2],[2,1,3],[2,1,1],[2,1,4]],bins=3)
h.shape
Out[59]: (3, 3, 3, 3, 3, 3, 3)
</snippet></ROW><ROW><id>13244210</id><snippet>In [60]: h, edges = histogramdd(array([[1,2,4],[4,2,8],[3,2,1],[2,1,2],[2,1,3],[2,1,1],[2,1,4]]),bins=3)
h.shape
Out[60]: (3, 3, 3)
</snippet></ROW><ROW><id>13244210</id><snippet>In [61]: h, edges = histogramdd(array([[1,2,4],[4,2,8],[3,2,1],[2,1,2],[2,1,3],[2,1,1],[2,1,4]]),bins=3)
In [64]: h
Out[64]:
array([[[ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  1.,  0.]],

       [[ 3.,  1.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  0.,  0.]],

       [[ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 1.,  0.,  1.]]])
In [65]: edges
Out[65]:
[array([ 1.,  2.,  3.,  4.]),
 array([ 1.        ,  1.33333333,  1.66666667,  2.        ]),
 array([ 1.        ,  3.33333333,  5.66666667,  8.        ])]
</snippet></ROW><ROW><id>13244210</id><snippet>[1,2,4], [4,2,8], etc</snippet></ROW><ROW><id>13244210</id><snippet>[1,2,4]</snippet></ROW><ROW><id>13244210</id><snippet>array([1.,2.,3.,4.])</snippet></ROW><ROW><id>13244210</id><snippet>array([ 1.        ,  1.33333333,  1.66666667,  2.        ])</snippet></ROW><ROW><id>13244210</id><snippet>array([ 1.        ,  3.33333333,  5.66666667,  8.        ])</snippet></ROW><ROW><id>13244210</id><snippet>[1,2,4]</snippet></ROW><ROW><id>13244210</id><snippet>[[ 0.,  0.,  0.],
[ 0.,  0.,  0.],
[ 0.,  1*.,  0.]] 
</snippet></ROW><ROW><id>13244210</id><snippet>[4,2,8]</snippet></ROW><ROW><id>13244210</id><snippet>[[ 0.,  0.,  0.],
[ 0.,  0.,  0.],
[ 1.,  0.,  1.*]]])
</snippet></ROW><ROW><id>13244210</id><snippet>[3,2,1]</snippet></ROW><ROW><id>13244210</id><snippet>[[ 0.,  0.,  0.],
 [ 0.,  0.,  0.],
 [ 1.*,  0.,  1.]]
</snippet></ROW><ROW><id>13244232</id><snippet>CREATE UNIQUE INDEX IDX_Movies ON table(Name, Movie)
</snippet></ROW><ROW><id>13244299</id><snippet>frozenset</snippet></ROW><ROW><id>13244299</id><snippet>&gt;&gt;&gt; Z = {(1,1): 0, (2,2):1, (3,3):3}
&gt;&gt;&gt; hash(Z)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
&gt;&gt;&gt; frozenset(Z.items())
frozenset([((2, 2), 1), ((1, 1), 0), ((3, 3), 3)])
&gt;&gt;&gt; hash(frozenset(Z.items()))
-4860320417062922210
</snippet></ROW><ROW><id>13244299</id><snippet>Z.items()</snippet></ROW><ROW><id>13244416</id><snippet>msg_body="""&lt;HTML&gt;&lt;head&gt;&lt;/head&gt;
          &lt;body&gt;Test
          &lt;br&gt;Hi All, &lt;br&gt;
          &lt;b&gt;Wiki @&lt;a href="%s"&gt;%s&lt;/a&gt; (listed @ go\link) &lt;br&gt;&lt;br&gt;
          &lt;b&gt;Release notes:&lt;/b&gt; %s  &lt;br&gt;&lt;br&gt;
          &lt;b&gt;Host/Riva Build Combo:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;
          &lt;b&gt;Loading instructions:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;
          &lt;b&gt;CR fixes:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;
          Thanks,&lt;br&gt;
          B team
          &lt;/body&gt;&lt;/html&gt;
          """ % (wikiURL, Releasenotes, table, Load_ins, crInfo)
</snippet></ROW><ROW><id>13244428</id><snippet># ...

from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__.split('.')[0])

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///path/database.db'
#app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://user:pass@localhost/database'

db = SQLAlchemy(app)

class Entry(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.Text)
    text = db.Column(db.Text)

    def __init__(self, title, text):
        self.title = title
        self.text = text

    def uppercase(self):
        self.title = self.title.upper()
        self.text = self.text.upper()
</snippet></ROW><ROW><id>13244428</id><snippet>$ python -c "from your_app import db; db.create_all()"
</snippet></ROW><ROW><id>13244428</id><snippet>entry = Entry('test', 'entry')
entry.uppercase()

db.session.add(entry)
db.session.commit()
</snippet></ROW><ROW><id>13244563</id><snippet>for child in root:
    name                = child.attrib['name']
    cost                = child.attrib['cost']
    # create "book" here
    book    = ET.SubElement(root_new, "book") 
    book.set("name",name)               
    book.set("cost",cost) 
    if 'color' in child.attrib:
        color               = child.attrib['color']
        book.set("color",color) 
    if 'weight' in child.attrib:
        weight              = child.attrib['weight']
        book.set("weight",weight)
</snippet></ROW><ROW><id>13244650</id><snippet>null</snippet></ROW><ROW><id>13244650</id><snippet>x == null</snippet></ROW><ROW><id>13244650</id><snippet>None</snippet></ROW><ROW><id>13244650</id><snippet>not None</snippet></ROW><ROW><id>13244650</id><snippet>&gt;&gt;&gt; not None
True
</snippet></ROW><ROW><id>13244662</id><snippet>import json

store_dic = { "key1": "value1", "key2": "value2" }

with fs as open(store_file, "w"):
    json.dump(store_dic, fs)
</snippet></ROW><ROW><id>13244891</id><snippet>"&lt;font face = 'Arial' &gt; Wiki @&lt;a href=%s&gt;%s&lt;/a&gt; (listed @ go\wbit)&lt;/font&gt; &lt;br&gt;&lt;br&gt;"
</snippet></ROW><ROW><id>13244891</id><snippet>style='font:arial normal'</snippet></ROW><ROW><id>13244891</id><snippet>msg_body=("&lt;HTML&gt;&lt;head&gt;&lt;/head&gt;"
          "&lt;body&gt;BCC Warning:"
          "&lt;br&gt;Hi All, &lt;br&gt;"
          "&lt;br&gt;&lt;br&gt;"
          "&lt;div style='font:Arial normal; color:#990000'&gt; Wiki @&lt;a href=%s&gt;%s&lt;/a&gt; (listed @ go\wbit)&lt;/div&gt; &lt;br&gt;&lt;br&gt;"
          "&lt;b&gt;Release notes:&lt;/b&gt; %s  &lt;br&gt;&lt;br&gt;" 
          "&lt;b&gt;Build Combo:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;" 
          "&lt;b&gt;Loading instructions:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;"
          "&lt;b&gt;CR fixes:&lt;/b&gt;&lt;br&gt;%s&lt;br&gt;&lt;br&gt;"
          "Thanks,&lt;br&gt;"
          "Build team"
          "&lt;/body&gt;&lt;/html&gt;"
          ) % (wikiURL,wikiURL,Releasenotes,table,Load_ins,crInfo)
</snippet></ROW><ROW><id>13245209</id><snippet>BookCollection</snippet></ROW><ROW><id>13245209</id><snippet>parse</snippet></ROW><ROW><id>13245209</id><snippet>get</snippet></ROW><ROW><id>13245209</id><snippet>set</snippet></ROW><ROW><id>13245209</id><snippet>class BookCollection( object ):
    def __init__( self, xml_path ):
        """call the parse with the xml_path here"""
        self.bookList = []#This is a list of tuples

    def _parse( self, xml_path ):
        """This method is private and only parses the 
           xml and stores the books as tuples in a list"""

    def get( self, title ):
        """This method allows the user of this class to get 
           a book from the list of tuples"""

    def _set( self, title, cost, weight, cover=None ):
        """This method sets and adds a book tuple to the 
           list of book tuples"""
</snippet></ROW><ROW><id>13245209</id><snippet>to_xml</snippet></ROW><ROW><id>13245347</id><snippet>lists</snippet></ROW><ROW><id>13245347</id><snippet>set</snippet></ROW><ROW><id>13245347</id><snippet>list</snippet></ROW><ROW><id>13245347</id><snippet>def unique_lists( *lists )</snippet></ROW><ROW><id>13245347</id><snippet>ret_list = []
for l in lists:
    ret_list = ret_list + l

return set( ret_list )
</snippet></ROW><ROW><id>13245477</id><snippet>canReadLine()</snippet></ROW><ROW><id>13245477</id><snippet>"\n"</snippet></ROW><ROW><id>13245477</id><snippet>"\n"</snippet></ROW><ROW><id>13245503</id><snippet>zip</snippet></ROW><ROW><id>13245503</id><snippet>a</snippet></ROW><ROW><id>13245503</id><snippet>b</snippet></ROW><ROW><id>13245503</id><snippet>a = "hello"
b = "world"
print zip(a, b)
&gt;&gt;&gt;
    [('h', 'w'), ('e', 'o'), ('l', 'r'), ('l', 'l'), ('o', 'd')]
</snippet></ROW><ROW><id>13245671</id><snippet>flip.
</snippet></ROW><ROW><id>13245768</id><snippet>def handleCollision(collidedLands, testRectangle):
    newRectangle = Rectangle(testRectangle.X + xVelocity, testRectangle.Y)
    return newRectangle
</snippet></ROW><ROW><id>13245813</id><snippet>netstat</snippet></ROW><ROW><id>13245813</id><snippet>/proc/net/tcp</snippet></ROW><ROW><id>13245824</id><snippet>fp = Fixedpoint()
fp.set(engine='datalog',generate_explanations=True)
</snippet></ROW><ROW><id>13245846</id><snippet>import os
print "user who executed the code: %d" % os.getuid()
print "current effective user: %d" % os.geteuid()
if os.getuid() == 0:
    os.seteuid(65534) # user id of the user "nobody"
    print "current effective user: %d" % os.geteuid()
    # do what you need to do with non-root privileges here, e.g. write to a file
    print &gt;&gt; open("/tmp/foobar.txt", "w"), "hello world"
    os.seteuid(0)
print "current effective user: %d" % os.geteuid()
</snippet></ROW><ROW><id>13246144</id><snippet>f = open ('test')
for line in f:
    print line
</snippet></ROW><ROW><id>13246346</id><snippet>__unicode__</snippet></ROW><ROW><id>13246346</id><snippet>__str__</snippet></ROW><ROW><id>13246346</id><snippet>.encode()</snippet></ROW><ROW><id>13246346</id><snippet>def __unicode__(self):
    return u"{0} {1}".format(self.text, self.title)
</snippet></ROW><ROW><id>13246510</id><snippet>test\test</snippet></ROW><ROW><id>13246510</id><snippet>os.path.isdir</snippet></ROW><ROW><id>13246510</id><snippet>    for item in os.listdir(pathname):
        n = os.path.join(pathname, item)
        if os.path.isdir(n):
            # List a directory on n
            scan(n, signatures, depth)
        else:
            # Do what you should for a file
</snippet></ROW><ROW><id>13246568</id><snippet>def tryit(fn):
    def wraps(*args, **kwargs):
        try:
            fn(*args, **kwargs)
        except Exception, e:
            print e
    return wraps

def doStuff(x, y):
    return x / y

@tryit
def main(arg1, arg2):
    print doStuff(arg1, arg2)

if __name__ == "__main__":
    main(1, 10.0)
    main(100, 0)
</snippet></ROW><ROW><id>13246568</id><snippet>0.1
integer division or modulo by zero
</snippet></ROW><ROW><id>13246832</id><snippet>url(r'^$', 'musicproject.midi_app.views.index'),
</snippet></ROW><ROW><id>13246832</id><snippet> url(r'^$', 'midi_app.views.index'),
</snippet></ROW><ROW><id>13246940</id><snippet>try:
   smtpObj = smtplib.SMTP('smtp.gmail.com', 587) # or 465
   smtpObj.ehlo()
   smtpObj.starttls()
   smtpObj.login(account, password)
   smtpObj.sendmail(sender, receivers, message)         
   print "Successfully sent email"
except:
   print "Error: unable to send email"
</snippet></ROW><ROW><id>13246940</id><snippet>import os
import email
import email.encoders
import email.mime.text
import smtplib

# message/email details
my_email = 'myemail@gmail.com'
my_passw = 'asecret!'
recipients = ['jack@gmail.com', 'jill@gmail.com']
subject = 'This is an email'
message = 'This is the body of the email.'
file_name = 'C:\\temp\\test.txt'

# build the message
msg = email.MIMEMultipart.MIMEMultipart()
msg['From'] = my_email
msg['To'] = ', '.join(recipients)
msg['Date'] = email.Utils.formatdate(localtime=True)
msg['Subject'] = subject
msg.attach(email.MIMEText.MIMEText(message))

# build the attachment
att = email.MIMEBase.MIMEBase('application', 'octet-stream')
att.set_payload(open(file_name, 'rb').read())
email.Encoders.encode_base64(att)
att.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(file_name))
msg.attach(att)

# send the message
srv = smtplib.SMTP('smtp.gmail.com', 587)
srv.ehlo()
srv.starttls()
srv.login(my_email, my_passw)
srv.sendmail(my_email, recipients, msg.as_string())
</snippet></ROW><ROW><id>13247037</id><snippet>is</snippet></ROW><ROW><id>13247037</id><snippet>==</snippet></ROW><ROW><id>13247037</id><snippet>&gt;&gt;&gt; a = "foo"
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; c = a[:]
&gt;&gt;&gt; a is c
True
</snippet></ROW><ROW><id>13247037</id><snippet>&gt;&gt;&gt; a = "foo"
&gt;&gt;&gt; b = "foo"
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>13247037</id><snippet>var2</snippet></ROW><ROW><id>13247037</id><snippet>list</snippet></ROW><ROW><id>13247037</id><snippet>var2[:]</snippet></ROW><ROW><id>13247037</id><snippet>var2</snippet></ROW><ROW><id>13247037</id><snippet>&gt;&gt;&gt; a = list("foo")
&gt;&gt;&gt; a
['f', 'o', 'o']
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a
True
&gt;&gt;&gt; c = a[:]
&gt;&gt;&gt; c is a
False
&gt;&gt;&gt; b.pop()
'o'
&gt;&gt;&gt; a
['f', 'o']
&gt;&gt;&gt; b
['f', 'o']
&gt;&gt;&gt; c
['f', 'o', 'o']
</snippet></ROW><ROW><id>13247075</id><snippet>fOWOO = firstOperationWithOneOperator
</snippet></ROW><ROW><id>13247075</id><snippet>fOWOO(num1, fOWOO(num2, num3, op2), op1)  # num1 `op1` (num2 `op2` num3)
</snippet></ROW><ROW><id>13247075</id><snippet>fOWOO(fOWOO(num1, num2, op1), num3, op2)  # (num1 `op1` num2) `op2` num3
</snippet></ROW><ROW><id>13247075</id><snippet>op1</snippet></ROW><ROW><id>13247075</id><snippet>op2</snippet></ROW><ROW><id>13247075</id><snippet>2 / 3 + 4</snippet></ROW><ROW><id>13247075</id><snippet>fOWOO(fOWOO(2, 3, '/'), 4, '+')</snippet></ROW><ROW><id>13247075</id><snippet>2 + 3 / 4</snippet></ROW><ROW><id>13247075</id><snippet>fOWOO(2, fOWOO(3, 4, '/'), '+')</snippet></ROW><ROW><id>13247222</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>13247222</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>13247378</id><snippet>setModelColumn</snippet></ROW><ROW><id>13247378</id><snippet>modelColumn</snippet></ROW><ROW><id>13247378</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>13247381</id><snippet>ColorLayer</snippet></ROW><ROW><id>13247381</id><snippet>cocos.layer.ColorLayer</snippet></ROW><ROW><id>13247381</id><snippet>on_enter</snippet></ROW><ROW><id>13247381</id><snippet>self</snippet></ROW><ROW><id>13247381</id><snippet>f_refresh_marks</snippet></ROW><ROW><id>13247381</id><snippet>from cocos.director import director
from cocos.layer import base_layers


import sys
import math
import os

import pyglet
import cocos


world_width = 1000
world_height = 1000
class NetworkMap(cocos.layer.ScrollableLayer):
    def __init__(self, world_width, world_height):
        self.world_width = world_width
        self.world_height = world_height
        super(NetworkMap, self).__init__()
        bg = cocos.layer.ColorLayer(170,170,0,255,width=500,height=500)
        self.px_width = world_width
        self.px_height = world_height
        self.add(bg,z=0)

class TestScene(cocos.scene.Scene):
    def __init__(self):
        super(TestScene,self).__init__()

    def on_enter(self):
        director.push_handlers(self.on_cocos_resize)
        super(TestScene, self).on_enter()

    def on_cocos_resize(self, usable_width, usable_height):
        self.f_refresh_marks()

    def f_refresh_marks(self):
        pass

def main():
    director.init(world_width, world_height, do_not_scale=True)
    scene = TestScene()
    world_map = NetworkMap(world_width, world_height)
    scroller = cocos.layer.ScrollingManager()
    scroller.add(world_map)
    scene.add(scroller)
    director.run(scene)

if __name__ == '__main__': main()
</snippet></ROW><ROW><id>13247531</id><snippet>LastName</snippet></ROW><ROW><id>13247531</id><snippet>FirstName</snippet></ROW><ROW><id>13247531</id><snippet>cfmail.cfm?LName=LastName&amp;FName=FirstName</snippet></ROW><ROW><id>13248009</id><snippet>db.commit()</snippet></ROW><ROW><id>13248062</id><snippet>r+</snippet></ROW><ROW><id>13248062</id><snippet>a+</snippet></ROW><ROW><id>13248151</id><snippet>xml.etree</snippet></ROW><ROW><id>13248151</id><snippet>from xml.etree import ElementTree as et
xmlstr="""\
&lt;?xml version="1.0"?&gt;
&lt;area&gt;
  &lt;media&gt;
    &lt;options&gt;
         &lt;name&gt;Jaipur&lt;/name&gt;
    &lt;/options&gt;
 &lt;/media&gt;
&lt;/area&gt;"""
doc=et.fromstring(xmlstr)
doc.find('.//name').text='Mumbai'
print et.tostring(doc)
</snippet></ROW><ROW><id>13248151</id><snippet>&lt;area&gt;
  &lt;media&gt;
    &lt;options&gt;
         &lt;name&gt;Mumbai&lt;/name&gt;
    &lt;/options&gt;
 &lt;/media&gt;
&lt;/area&gt;
</snippet></ROW><ROW><id>13248303</id><snippet>python</snippet></ROW><ROW><id>13248303</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13248303</id><snippet>__init__.py</snippet></ROW><ROW><id>13248303</id><snippet>A</snippet></ROW><ROW><id>13248303</id><snippet>c.py</snippet></ROW><ROW><id>13248303</id><snippet>from A.a import something
from A.b import something

# or

import A
A.a.something
A.b.something
</snippet></ROW><ROW><id>13248336</id><snippet>glEnable(GL_CULL_FACE)</snippet></ROW><ROW><id>13248336</id><snippet>glCullFace(GL_FRONT)</snippet></ROW><ROW><id>13248336</id><snippet>glCullFace(GL_BACK)</snippet></ROW><ROW><id>13248437</id><snippet>for link in soup.select('td.subjectCell a'):
    print link.text
</snippet></ROW><ROW><id>13248437</id><snippet>a</snippet></ROW><ROW><id>13248437</id><snippet>td</snippet></ROW><ROW><id>13248703</id><snippet># dbcli.py
import plac
from sqlalchemy.ext.sqlsoup import SqlSoup

@plac.annotations(
    db=plac.Annotation("Connection string", type=SqlSoup),
    header=plac.Annotation("Header", 'flag', 'H'),
    sqlcmd=plac.Annotation("SQL command", 'option', 'c', str, metavar="SQL"),
    delimiter=plac.Annotation("Column separator", 'option', 'd'),
    scripts=plac.Annotation("SQL scripts"),
    )
def main(db, header, sqlcmd, delimiter="|", *scripts):
    "A script to run queries and SQL scripts on a database"
    yield 'Working on %s' % db.bind.url

    if sqlcmd:
        result = db.bind.execute(sqlcmd)
        if header: # print the header
            yield delimiter.join(result.keys())
        for row in result: # print the rows
            yield delimiter.join(map(str, row))

    for script in scripts:
        db.bind.execute(open(script).read())
        yield 'executed %s' % script

if __name__ == '__main__':
    for output in plac.call(main):
        print(output)
</snippet></ROW><ROW><id>13248703</id><snippet>usage: dbcli.py [-h] [-H] [-c SQL] [-d |] db [scripts [scripts ...]]

A script to run queries and SQL scripts on a database

positional arguments:
  db                    Connection string
  scripts               SQL scripts

optional arguments:
  -h, --help            show this help message and exit
  -H, --header          Header
  -c SQL, --sqlcmd SQL  SQL command
  -d |, --delimiter |   Column separator
</snippet></ROW><ROW><id>13249115</id><snippet>In [29]: strs1="PARTITION BY HASH(SOME_THING)"

In [30]: strs2="SUBPARTITION BY HASH(SOME_THING)"

In [31]: bool(re.match(r"^PARTITION BY HASH",strs1))
Out[31]: True

In [32]: bool(re.match(r"^PARTITION BY HASH",strs2))
Out[32]: False
</snippet></ROW><ROW><id>13249231</id><snippet>shlex</snippet></ROW><ROW><id>13249231</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; s = shlex.shlex("command 'my \'ugly\' argument' other \"arguments\" and options", posix=True)
&gt;&gt;&gt; s.whitespace_split = True
&gt;&gt;&gt; s.commenters = ''
&gt;&gt;&gt; next(s)
'command'
&gt;&gt;&gt; next(s)
'my ugly argument'
&gt;&gt;&gt; s.instream.read()
'other "arguments" and options'
</snippet></ROW><ROW><id>13249436</id><snippet>import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
</snippet></ROW><ROW><id>13249486</id><snippet>pysqlite2</snippet></ROW><ROW><id>13249486</id><snippet>sqlite3</snippet></ROW><ROW><id>13249486</id><snippet>_sqlite.pyd</snippet></ROW><ROW><id>13249486</id><snippet>sqlite3</snippet></ROW><ROW><id>13249486</id><snippet>pysqlite2</snippet></ROW><ROW><id>13249486</id><snippet>pysqlite2</snippet></ROW><ROW><id>13249486</id><snippet>sqlite3</snippet></ROW><ROW><id>13249486</id><snippet>pysqlite2.py</snippet></ROW><ROW><id>13249486</id><snippet>from sqlite3 import *
</snippet></ROW><ROW><id>13249552</id><snippet>importlib</snippet></ROW><ROW><id>13249552</id><snippet>import importlib

mod = importlib.import_module('signal')
loc = locals()
for name in dir(mod):
    if name.startswith('SIG'):
        loc[name] = getattr(mod, name)
del mod, loc, importlib
</snippet></ROW><ROW><id>13250402</id><snippet>def consumer(func):
    def wrapper(*args,**kw):
        gen = func(*args, **kw)
        gen.next()
        return gen
    wrapper.__name__ = func.__name__
    wrapper.__dict__ = func.__dict__
    wrapper.__doc__  = func.__doc__
    return wrapper
</snippet></ROW><ROW><id>13250402</id><snippet>consumer</snippet></ROW><ROW><id>13250402</id><snippet>@consumer
def thumbnail_pager(pagesize, thumbsize, destination):
    while True:
        page = new_image(pagesize)
        rows, columns = pagesize / thumbsize
        pending = False
        try:
            for row in xrange(rows):
                for column in xrange(columns):
                    thumb = create_thumbnail((yield), thumbsize)
                    page.write(
                        thumb, col*thumbsize.x, row*thumbsize.y
                    )
                    pending = True
        except GeneratorExit:
            # close() was called, so flush any pending output
            if pending:
                destination.send(page)

            # then close the downstream consumer, and exit
            destination.close()
            return
        else:
            # we finished a page full of thumbnails, so send it
            # downstream and keep on looping
            destination.send(page)

@consumer
def jpeg_writer(dirname):
    fileno = 1
    while True:
        filename = os.path.join(dirname,"page%04d.jpg" % fileno)
        write_jpeg((yield), filename)
        fileno += 1


# Put them together to make a function that makes thumbnail
# pages from a list of images and other parameters.      
#
def write_thumbnails(pagesize, thumbsize, images, output_dir):
    pipeline = thumbnail_pager(
        pagesize, thumbsize, jpeg_writer(output_dir)
    )

    for image in images:
        pipeline.send(image)

    pipeline.close()
</snippet></ROW><ROW><id>13250576</id><snippet>import xml.etree.ElementTree as ET
import sys   


class MyXmlParser(object):

    def __init__(self, xml_file_name):
        self.doc  = ET.parse(xml_file_name)
        self.root = doc.getroot()

    def do_something(self, output = sys.stdout):
        root_new  = ET.Element("users") 
        for child in self.root:
            username             = child.attrib['username']
            password             = child.attrib['password']   
            # create "user" here
            user    = ET.SubElement(root_new, "user") 
            user.set("username",username)               
            user.set("password",password) 
            # checking attribute - skip KeyError
            try:
                remote_access   = child.attrib['remote_access']
                user.set("remote_access", remote_access) 
            except KeyError:
                pass

            for g in child.findall("group"):
                # create "group" here
                group     = ET.SubElement(user,"group")  
                if g.text != "lion":
                    group.text = g.text 
        tree = ET.ElementTree(root_new)
        tree.write(output)

def main():
    my_parser = MyXmlParser("users.xml")
    my_parser.do_something()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13250685</id><snippet>Statusmessages.objects.filter(pk__in=Statusmessages.objects.filter(time__lt=date).values_list('pk')[:30000]).delete()
</snippet></ROW><ROW><id>13250716</id><snippet>www:~# crontab -l

DJANGO_SETTINGS_MODULE=djangocron.settings
PATH=...
PYTHONPATH=/home/django
MAILTO="cron-notices@example.com"
...
# m h  dom mon dow   command
10-50/10 * * * *               /home/django/cleanup_actions.py
...
</snippet></ROW><ROW><id>13250735</id><snippet>memcache.add</snippet></ROW><ROW><id>13250735</id><snippet>memcache.add</snippet></ROW><ROW><id>13250910</id><snippet>import ipy_autoreload
</snippet></ROW><ROW><id>13250910</id><snippet>IPython</snippet></ROW><ROW><id>13250910</id><snippet>pip install ipython
</snippet></ROW><ROW><id>13250910</id><snippet>sudo pip install ipython
</snippet></ROW><ROW><id>13250910</id><snippet>IPython</snippet></ROW><ROW><id>13250910</id><snippet>pip install</snippet></ROW><ROW><id>13250910</id><snippet>easy_install -a readline   # `sudo easy_install -a readline` for system-wide install of course.
</snippet></ROW><ROW><id>13250910</id><snippet>IPython</snippet></ROW><ROW><id>13250910</id><snippet>IPython 0.13.1</snippet></ROW><ROW><id>13250910</id><snippet>%load_ext autoreload</snippet></ROW><ROW><id>13251188</id><snippet>\x34</snippet></ROW><ROW><id>13251188</id><snippet>4</snippet></ROW><ROW><id>13251188</id><snippet>4</snippet></ROW><ROW><id>13251188</id><snippet>\x78</snippet></ROW><ROW><id>13251188</id><snippet>x</snippet></ROW><ROW><id>13251188</id><snippet>x</snippet></ROW><ROW><id>13251188</id><snippet>4</snippet></ROW><ROW><id>13251188</id><snippet>\x98\xff\xff</snippet></ROW><ROW><id>13251188</id><snippet>len(s)</snippet></ROW><ROW><id>13251188</id><snippet>    +---+---+------+------+------+
s = | 4 | x | \x98 | \xff | \xff |
    +---+---+------+------+------+
</snippet></ROW><ROW><id>13251193</id><snippet>errors='ignore'</snippet></ROW><ROW><id>13251193</id><snippet>bytes.decode</snippet></ROW><ROW><id>13251193</id><snippet>for file_name in os.listdir(self.path_to_dir):
    if not file_name.startswith("!"):
        fullpath = os.path.join(self.path_to_dir, file_name)
        with open(fullpath, 'r', encoding ='utf-8', errors='ignore') as body:
            yield [file_name, body.read()]  
</snippet></ROW><ROW><id>13251193</id><snippet>os.path.join</snippet></ROW><ROW><id>13251193</id><snippet>add_slash</snippet></ROW><ROW><id>13251226</id><snippet>return</snippet></ROW><ROW><id>13251226</id><snippet>try:
    myfunc()
except MyException:
    ...
else:
    ...
</snippet></ROW><ROW><id>13251490</id><snippet>A.Value</snippet></ROW><ROW><id>13251490</id><snippet>import qualified Data.HashMap.Strict as M
import qualified Data.Vector as V
import qualified Data.Text as T

-- ... rest of the code more or less as before ...

navigate :: A.Value -&gt; [String] -&gt; BSL.ByteString
navigate value        []       = A.encode value
navigate (A.Array vs) (x : xs) = navigate (vs V.! read   x) xs
navigate (A.Object o) (x : xs) = navigate (o  M.! T.pack x) xs
</snippet></ROW><ROW><id>13251490</id><snippet>A.Value</snippet></ROW><ROW><id>13251490</id><snippet>data Value
  = Object !(HashMap Text Value)
  | Array  !(Vector Value)
  | ...  -- other constructors
</snippet></ROW><ROW><id>13251490</id><snippet>navigate</snippet></ROW><ROW><id>13251490</id><snippet>!</snippet></ROW><ROW><id>13251490</id><snippet>read</snippet></ROW><ROW><id>13251490</id><snippet>T.pack</snippet></ROW><ROW><id>13251490</id><snippet>Text</snippet></ROW><ROW><id>13251836</id><snippet>print json.dumps(data_structure, cls = MyEncoder)
</snippet></ROW><ROW><id>13251836</id><snippet>{"layer1": {"layer2": {"layer3_2": "string", "layer3_1": "MyEncoder::NoIndent object"}}}
</snippet></ROW><ROW><id>13252040</id><snippet>class Post(Document):
    title = StringField()
    tags = ListField(StringField())

post1 = Post(title='Fun with MongoEngine', tags=['mongodb', 'mongoengine']).save()
post2 = Post(title='Loving Mongo', tags=['mongodb']).save()
</snippet></ROW><ROW><id>13252040</id><snippet>{
  "tags": [ "mongodb", "mongoengine" ],
  "title": "Fun with MongoEngine"
}
{
  "tags": [ "mongodb" ],
  "title": "Loving Mongo"
}
</snippet></ROW><ROW><id>13252040</id><snippet>find()</snippet></ROW><ROW><id>13252040</id><snippet>mongodb</snippet></ROW><ROW><id>13252040</id><snippet>Post.objects(tags__contains='mongodb')
</snippet></ROW><ROW><id>13252040</id><snippet>tag_cloud = Post.objects(tags__contains='mongodb').item_frequencies('tags')

&gt; print tag_cloud
{'mongodb': 2, 'mongoengine': 1}
&gt; tag_cloud['mongodb']
2
</snippet></ROW><ROW><id>13252112</id><snippet>import json

class NoIndent(object):
    def __init__(self, value):
        self.value = value
    def __repr__(self):
        if not isinstance(self.value, (list, tuple)):
            return repr(self.value)
        else:  # assume it's a list or tuple of coordinates stored as dicts
            delimiters = '[]' if isinstance(self.value, list) else '()'
            pairs = ('{!r}:{}'.format(*component)
                         for coordinate in self.value
                             for component in sorted(coordinate.items()))
            pairs = ('{{{}, {}}}'.format(*pair)
                         for pair in zip(*[iter(pairs)]*2))
            return delimiters[0] + ', '.join(pairs) + delimiters[1]

class MyEncoder(json.JSONEncoder):
    def default(self, obj):
        return(repr(obj) if isinstance(obj, NoIndent) else
               json.JSONEncoder.default(self, obj))

data_structure = {
    'layer1': {
        'layer2': {
            'layer3_1': NoIndent([{"x":1,"y":7}, {"x":0,"y":4},
                                  {"x":5,"y":3}, {"x":6,"y":9}]),
            'layer3_2': 'string'
        }
    }
}

print json.dumps(data_structure, cls=MyEncoder, indent=2)
</snippet></ROW><ROW><id>13252112</id><snippet>{
  "layer1": {
    "layer2": {
      "layer3_2": "string", 
      "layer3_1": "[{'x':1, 'y':7}, {'x':0, 'y':4}, {'x':5, 'y':3}, {'x':6, 'y':9}]"
    }
  }
}
</snippet></ROW><ROW><id>13252348</id><snippet>all</snippet></ROW><ROW><id>13252348</id><snippet>isinstance</snippet></ROW><ROW><id>13252348</id><snippet>all(isinstance(x,int) for x in lst)
</snippet></ROW><ROW><id>13252348</id><snippet>isinstance</snippet></ROW><ROW><id>13252348</id><snippet>all(isinstance(x,(int,long)) for x in lst)
</snippet></ROW><ROW><id>13252348</id><snippet>class MyInt(int):
     pass

print(isinstance(MyInt('3'),int)) #True
</snippet></ROW><ROW><id>13252348</id><snippet>all(type(x) is int for x in lst)</snippet></ROW><ROW><id>13252348</id><snippet>def homogeneous_type(seq):
    iseq = iter(seq)
    first_type = type(next(iseq))
    return first_type if all( (type(x) is first_type) for x in iseq ) else False
</snippet></ROW><ROW><id>13252348</id><snippet>import inspect
def common_bases(seq):
    iseq = iter(seq)
    bases = set(inspect.getmro(type(next(iseq))))
    for item in iseq:
        bases = bases.intersection(inspect.getmro(type(item)))
        if not bases:
           break
    return bases
</snippet></ROW><ROW><id>13252929</id><snippet>MyXmlParser</snippet></ROW><ROW><id>13252929</id><snippet>    def __init__(self, users=None):
        self.doc = ET.parse("users.xml")
        self.root = self.doc.getroot()
</snippet></ROW><ROW><id>13252929</id><snippet>if __name__==" __main_ ":
    parser = MyXmlParser()
    parser.do_something()
</snippet></ROW><ROW><id>13252929</id><snippet>&lt;users&gt;&lt;user password="admin" remote_access="yes" username="admin" /&gt;&lt;user password="user1" username="private_user1"&gt;&lt;group&gt;group1&lt;/group&gt;&lt;group&gt;group2&lt;/group&gt;&lt;/user&gt;&lt;user password="user2" username="private_user2"&gt;&lt;group&gt;group1&lt;/group&gt;&lt;group&gt;group2&lt;/group&gt;&lt;/user&gt;&lt;/users&gt;
</snippet></ROW><ROW><id>13252961</id><snippet>cursor()</snippet></ROW><ROW><id>13252961</id><snippet>None</snippet></ROW><ROW><id>13252986</id><snippet>ravel</snippet></ROW><ROW><id>13252986</id><snippet>flatten</snippet></ROW><ROW><id>13252986</id><snippet>ndarray</snippet></ROW><ROW><id>13252986</id><snippet>&gt;&gt;&gt; a = numpy.arange(9).reshape(3, 3)
&gt;&gt;&gt; a.ravel()
array([0, 1, 2, 3, 4, 5, 6, 7, 8])
</snippet></ROW><ROW><id>13252986</id><snippet>ravel</snippet></ROW><ROW><id>13252986</id><snippet>concatenate</snippet></ROW><ROW><id>13252986</id><snippet>flatten</snippet></ROW><ROW><id>13252986</id><snippet>&gt;&gt;&gt; a.ravel()[5] = 99
&gt;&gt;&gt; a
array([[ 0,  1,  2],
       [ 3,  4, 99],
       [ 6,  7,  8]])
&gt;&gt;&gt; a.flatten()[5] = 77
&gt;&gt;&gt; a
array([[ 0,  1,  2],
       [ 3,  4, 99],
       [ 6,  7,  8]])
</snippet></ROW><ROW><id>13252986</id><snippet>flatten</snippet></ROW><ROW><id>13252986</id><snippet>concatenate</snippet></ROW><ROW><id>13252986</id><snippet>&gt;&gt;&gt; %timeit a.ravel()
1000000 loops, best of 3: 468 ns per loop
&gt;&gt;&gt; %timeit a.flatten()
1000000 loops, best of 3: 1.42 us per loop
&gt;&gt;&gt; %timeit numpy.concatenate(a)
100000 loops, best of 3: 2.26 us per loop
</snippet></ROW><ROW><id>13252986</id><snippet>reshape</snippet></ROW><ROW><id>13252986</id><snippet>&gt;&gt;&gt; a = numpy.arange(9).reshape(3, 3)
&gt;&gt;&gt; a.reshape(1, -1)
array([[0, 1, 2, 3, 4, 5, 6, 7, 8]])
&gt;&gt;&gt; %timeit a.reshape(1, -1)
1000000 loops, best of 3: 736 ns per loop
</snippet></ROW><ROW><id>13253140</id><snippet>def new_path(fcheck,fpath):
    """
    fcheck --&gt; filename to check
    fpath  --&gt; file with path component to transfer 
               if fcheck has no path component
    """
    head,tail = os.path.split(fcheck)
    return os.path.join(os.path.split(fpath)[0],tail) if not head else fcheck

new_path('foo/bar','baz/qux')   #'foo/bar'  -- has path component.  Leave alone
new_path('bar','baz/qux')       #'baz/bar'  -- No path component.  Transfer
new_path('bar','qux')           #'bar'      -- Neither has path component.  Path must be '.'.  Leave alone.
</snippet></ROW><ROW><id>13253208</id><snippet>app = bottle.app()
resource = WSGIResource(reactor, reactor.getThreadPool(), app)
factory = Site(resource)
reactor.listenTCP(config.WEBSITE_PORT, factory) 
</snippet></ROW><ROW><id>13253327</id><snippet>/Users/Dao/Desktop/sympy.py
</snippet></ROW><ROW><id>13253327</id><snippet>sympy.py</snippet></ROW><ROW><id>13253327</id><snippet>sympy</snippet></ROW><ROW><id>13253327</id><snippet>from sympy import Symbol</snippet></ROW><ROW><id>13253327</id><snippet>Symbol</snippet></ROW><ROW><id>13253327</id><snippet>Desktop/sympy.pyc</snippet></ROW><ROW><id>13253327</id><snippet>Desktop/sympy.pyo</snippet></ROW><ROW><id>13253327</id><snippet>sympy</snippet></ROW><ROW><id>13253327</id><snippet>&gt;&gt;&gt; from sympy import Symbol
&gt;&gt;&gt; Symbol
&lt;class 'sympy.core.symbol.Symbol'&gt;
</snippet></ROW><ROW><id>13253427</id><snippet>class System(models.Model):
    pass

class Interface(models.Model):
    assigned_to = models.ManyToManyField(to=User)
    system = models.ForeignKey(System)

    @property
    def systems(self):
        Interface.objects.get(system=self.system).interfacedsystem_set.all()         

class InterfacedSystem(models.Model):
    interface = models.ForeignKey(Interface)
    system = models.ForeignKey(System)
</snippet></ROW><ROW><id>13253770</id><snippet>ft = np.fft.fft(y)
integral = sum(ft[105:121])
</snippet></ROW><ROW><id>13253770</id><snippet>integral = np.trapz(ft[105:121])
</snippet></ROW><ROW><id>13253770</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = x=np.arange(0,15,0.01)
&gt;&gt;&gt; from numpy import exp,pi
&gt;&gt;&gt; y=exp(-0.3*x)*exp(x*pi*20j)+exp(-0.9*x)*exp(x*pi*25j)+exp(-0.9*x)*exp(x*pi*15j)
&gt;&gt;&gt; ft = np.fft.fft(y)
&gt;&gt;&gt; np.trapz(ft[105:121])
(642.14009362811771+142.9776425340925j)
&gt;&gt;&gt; sum(ft[105:121])
(652.29308789751224+152.70583448308713j)
</snippet></ROW><ROW><id>13253789</id><snippet>$ vimtutor</snippet></ROW><ROW><id>13253789</id><snippet>:help</snippet></ROW><ROW><id>13253789</id><snippet>:help 'option'</snippet></ROW><ROW><id>13253789</id><snippet>option</snippet></ROW><ROW><id>13253789</id><snippet>:help :command</snippet></ROW><ROW><id>13253789</id><snippet>command</snippet></ROW><ROW><id>13253789</id><snippet>&lt;C-]&gt;</snippet></ROW><ROW><id>13253789</id><snippet>vimrc</snippet></ROW><ROW><id>13253789</id><snippet>&lt;C-]&gt;</snippet></ROW><ROW><id>13253789</id><snippet>:help tags</snippet></ROW><ROW><id>13253789</id><snippet>netrw</snippet></ROW><ROW><id>13253789</id><snippet>:Ex</snippet></ROW><ROW><id>13253789</id><snippet>:help motion.txt</snippet></ROW><ROW><id>13253807</id><snippet>    import glob
    from xml.etree import ElementTree
    from xml.dom import minidom

    def prettify(elem):
        """Return a pretty-printed XML string for the Element.
        """
        rough_string = ElementTree.tostring(elem, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ")

    import xml.etree.ElementTree as ET

    path = "/home/unkuiri/Ubuntu One/Wallpapers/*"


    background = ET.Element('background')
    dirList = glob.glob(path)
    starttime = ET.SubElement(background, 'starttime')
    year = ET.SubElement(starttime, 'year')
    year.text = '2012'
    month = ET.SubElement(starttime, 'month')
    month.text = '10'
    day = ET.SubElement(starttime, 'day')
    day.text = '10'
    hour = ET.SubElement(starttime, 'hour')
    hour.text = '00'
    minute = ET.SubElement(starttime, 'minute')
    minute.text = '00'
    second = ET.SubElement(starttime, 'second')
    second.text = '00'


    for i,fname in enumerate(dirList):    

        static = ET.SubElement(background, 'static')
        duration_stat = ET.SubElement(static, 'duration')
        duration_stat.text = '1795.0'
        files = ET.SubElement(static, 'file')
        transition = ET.SubElement(background, 'transition')
        duration_trans = ET.SubElement(transition, 'duration')
        duration_trans.text = '5.0'
        from1 = ET.SubElement(transition, 'from')
        to = ET.SubElement(transition, 'to')

        from1.text = dirList[i-1]

        files.text = dirList[i-1]

        to.text = dirList[i]


    print prettify(background)
</snippet></ROW><ROW><id>13253839</id><snippet>set(bird.color for bird in birds)
</snippet></ROW><ROW><id>13254104</id><snippet>__init__.py</snippet></ROW><ROW><id>13254104</id><snippet>__init__.py</snippet></ROW><ROW><id>13254104</id><snippet>__init__.py</snippet></ROW><ROW><id>13254104</id><snippet>from module import something</snippet></ROW><ROW><id>13254104</id><snippet>import module as alias</snippet></ROW><ROW><id>13254104</id><snippet>from something.otherthing.js import foo
from something.otherthing import js as bar
import something.otherthing.js as hamspam
</snippet></ROW><ROW><id>13254290</id><snippet>[{k: v for k, v in d.iteritems() if k != 'mykey1'} for d in mylist]
</snippet></ROW><ROW><id>13254290</id><snippet>.iteritems()</snippet></ROW><ROW><id>13254290</id><snippet>.items()</snippet></ROW><ROW><id>13254290</id><snippet>[dict((k, v) for k, v in d.iteritems() if k != 'mykey1') for d in mylist]
</snippet></ROW><ROW><id>13254290</id><snippet>{key: value ...}</snippet></ROW><ROW><id>13254405</id><snippet>key</snippet></ROW><ROW><id>13254405</id><snippet>sorted</snippet></ROW><ROW><id>13254405</id><snippet>with open('input') as f:
    sorted_file = sorted(f)

#save to a file
with open('output') as f:
    f.writelines(sorted_file)

#write to stdout
import sys
sys.stdout.writelines(sorted_file)
</snippet></ROW><ROW><id>13254961</id><snippet>USE_TZ = False</snippet></ROW><ROW><id>13254961</id><snippet>settings.py</snippet></ROW><ROW><id>13254961</id><snippet>pytz</snippet></ROW><ROW><id>13254961</id><snippet>pip install pytz
</snippet></ROW><ROW><id>13254961</id><snippet>America/Chicago</snippet></ROW><ROW><id>13254961</id><snippet>pytz</snippet></ROW><ROW><id>13255137</id><snippet>from byteplay import *                                                                                 

def foo():                                                                                             
    x = 10                                                                                             
    print 'inside ',x                                                                                  
    return 42                                                                                          

c = Code.from_code(foo.func_code)                                                                      
print c.code                                                                                           

ret = foo()                                                                                            
print 'outside: ',ret                                                                                  

c.code[10] = (LOAD_CONST,1000)                                                                         

foo.func_code = c.to_code()                                                                            
print '*'*20                                                                                           
print c.code                                                                                           

ret = foo()                                                                                            

print 'outside: ',ret  
</snippet></ROW><ROW><id>13255137</id><snippet>  4           1 LOAD_CONST           10
              2 STORE_FAST           x

  5           4 LOAD_CONST           'inside '
              5 PRINT_ITEM           
              6 LOAD_FAST            x
              7 PRINT_ITEM           
              8 PRINT_NEWLINE        

  6          10 LOAD_CONST           42
             11 RETURN_VALUE         

inside  10
outside:  42
********************

  4           1 LOAD_CONST           10
              2 STORE_FAST           x

  5           4 LOAD_CONST           'inside '
              5 PRINT_ITEM           
              6 LOAD_FAST            x
              7 PRINT_ITEM           
              8 PRINT_NEWLINE        

  6          10 LOAD_CONST           1000
             11 RETURN_VALUE         

inside  10
outside:  1000
</snippet></ROW><ROW><id>13255156</id><snippet>class</snippet></ROW><ROW><id>13255156</id><snippet>class inversionCount:
</snippet></ROW><ROW><id>13255156</id><snippet>Class</snippet></ROW><ROW><id>13255156</id><snippet>Class</snippet></ROW><ROW><id>13255156</id><snippet>class</snippet></ROW><ROW><id>13255156</id><snippet>class</snippet></ROW><ROW><id>13255307</id><snippet>request.session</snippet></ROW><ROW><id>13255307</id><snippet>session</snippet></ROW><ROW><id>13255307</id><snippet>Undefined</snippet></ROW><ROW><id>13255546</id><snippet>e</snippet></ROW><ROW><id>13255546</id><snippet>x=[[1,2,3,4], [11,22,33,44]]
for e in x:
    for e in e:
        print e
    print e
</snippet></ROW><ROW><id>13255804</id><snippet>&gt;&gt;&gt; k,j = np.meshgrid(np.arange(a.shape[1]),np.arange(a.shape[0]))
&gt;&gt;&gt; k
array([[0, 1, 2, 3, 4],
       [0, 1, 2, 3, 4],
       [0, 1, 2, 3, 4]])
&gt;&gt;&gt; j
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2]])
&gt;&gt;&gt; a[j,k,getters]
array([[  0,   8,  16,  21,  29],
       [ 37,  42,  50,  58,  63],
       [ 71,  79,  84,  92, 100]])
</snippet></ROW><ROW><id>13255804</id><snippet>k</snippet></ROW><ROW><id>13255804</id><snippet>j</snippet></ROW><ROW><id>13255804</id><snippet>j,k = np.indices(a.shape[:2])</snippet></ROW><ROW><id>13255804</id><snippet>meshgrid</snippet></ROW><ROW><id>13255850</id><snippet>self.channel</snippet></ROW><ROW><id>13255850</id><snippet>recv()</snippet></ROW><ROW><id>13255850</id><snippet>data = self.channel.recv ( 1024 )
if not data: break # &lt;&lt;&lt; ADD THIS
</snippet></ROW><ROW><id>13255850</id><snippet>if not data or 'exit' in data: 
</snippet></ROW><ROW><id>13255931</id><snippet>np.savetxt(outfile, array(data_slice).reshape(1,), fmt='%1.4e')
</snippet></ROW><ROW><id>13255931</id><snippet>array(1).shape == tuple()
#True
</snippet></ROW><ROW><id>13255931</id><snippet>np.savetxt(outfile, data, fmt='%1.4e')
</snippet></ROW><ROW><id>13256190</id><snippet>&gt;&gt;&gt; np.vstack((y, z))[:,(y &gt;= 4) &amp; (y &lt;= 8)]
array([[  4.00000000e+00,   4.12310563e+00,   4.24264069e+00,
          4.35889894e+00,   4.47213595e+00,   4.58257569e+00,
          4.69041576e+00,   4.79583152e+00,   4.89897949e+00,
          ...
          7.81024968e+00,   7.87400787e+00,   7.93725393e+00,
          8.00000000e+00],
       [  2.56000000e+02,   2.89000000e+02,   3.24000000e+02,
          3.61000000e+02,   4.00000000e+02,   4.41000000e+02,
          ...
          3.72100000e+03,   3.84400000e+03,   3.96900000e+03,
          4.09600000e+03]])
</snippet></ROW><ROW><id>13256190</id><snippet>vstack()</snippet></ROW><ROW><id>13256190</id><snippet>y</snippet></ROW><ROW><id>13256190</id><snippet>z</snippet></ROW><ROW><id>13256190</id><snippet>[...]</snippet></ROW><ROW><id>13256287</id><snippet>categories = unipart.categories.exclude(
                 categorieschild__unipart = unipart).distinct()
</snippet></ROW><ROW><id>13256287</id><snippet>categorieschild</snippet></ROW><ROW><id>13256692</id><snippet>/home/billy/myapps/my_server/sessions</snippet></ROW><ROW><id>13256692</id><snippet>ps aux</snippet></ROW><ROW><id>13256692</id><snippet>settings.SESSION_ENGINE</snippet></ROW><ROW><id>13256908</id><snippet>start_new_session</snippet></ROW><ROW><id>13256908</id><snippet>C</snippet></ROW><ROW><id>13256908</id><snippet>#!/usr/bin/env python
import os
import sys
import platform
from subprocess import Popen, PIPE

# set system/version dependent "start_new_session" analogs
kwargs = {}
if platform.system() == 'Windows':
    # from msdn [1]
    CREATE_NEW_PROCESS_GROUP = 0x00000200  # note: could get it from subprocess
    DETACHED_PROCESS = 0x00000008          # 0x8 | 0x200 == 0x208
    kwargs.update(creationflags=DETACHED_PROCESS | CREATE_NEW_PROCESS_GROUP)  
elif sys.version_info &lt; (3, 2):  # assume posix
    kwargs.update(preexec_fn=os.setsid)
else:  # Python 3.2+ and Unix
    kwargs.update(start_new_session=True)

p = Popen(["C"], stdin=PIPE, stdout=PIPE, stderr=PIPE, **kwargs)
assert not p.poll()
</snippet></ROW><ROW><id>13257108</id><snippet>recv()</snippet></ROW><ROW><id>13257108</id><snippet>else:</snippet></ROW><ROW><id>13257108</id><snippet>if data:</snippet></ROW><ROW><id>13257124</id><snippet>#!/usr/bin/python

from xml.dom.minidom import parse

dom = parse('C:/Users/Simon/Documents/tif/Metadata/metadata_test1.xml')

ids  = dom.getElementsByTagName('sceneID')
for id in ids:
    print "%s" % id.childNodes[0].nodeValue
</snippet></ROW><ROW><id>13257134</id><snippet>import json
import datetime


class Custom_JSONEncoder(json.JSONEncoder):
    def default(self, obj, **kwargs):
        if isinstance(obj, datetime.datetime):
            # Use the appropriate format for datetime
            return obj.strftime('%Y-%m-%d %I:%M%p')
        return None
</snippet></ROW><ROW><id>13257392</id><snippet>matplotlib.pyplot.xticks</snippet></ROW><ROW><id>13257392</id><snippet>xticks(x_values)
</snippet></ROW><ROW><id>13257392</id><snippet>ipython --pylab</snippet></ROW><ROW><id>13257392</id><snippet>In [1]: x_values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

In [2]: scatter(x_values, x_values)
Out[2]: &lt;matplotlib.collections.PathCollection at 0x39686d0&gt;

In [3]: xticks(x_values)
</snippet></ROW><ROW><id>13257392</id><snippet>xticks</snippet></ROW><ROW><id>13257392</id><snippet>xticks(range(0, int(xticks()[0][-1])+1, 10))
</snippet></ROW><ROW><id>13257434</id><snippet>a = 0
for i in range (0,50):
    for j in range(i+1,50):
        for k in range(j+1,50):
            for l in range(k+1,50):
                for m in range(l+1,50):
                    for n in range(m+1,50):
                        a += 1

print( a )
</snippet></ROW><ROW><id>13257434</id><snippet>time python test.py
15890700

real   0m6.015s
user   0m5.940s
sys    0m0.032s
</snippet></ROW><ROW><id>13257434</id><snippet>sage</snippet></ROW><ROW><id>13257456</id><snippet>pygame.event.Event</snippet></ROW><ROW><id>13257456</id><snippet>eventObj.type</snippet></ROW><ROW><id>13257456</id><snippet>eventObj.dict</snippet></ROW><ROW><id>13257508</id><snippet>cube(4)</snippet></ROW><ROW><id>13257508</id><snippet>&gt;&gt;&gt; def cube(x): return x*x*x
...
&gt;&gt;&gt; cube(4)
64
</snippet></ROW><ROW><id>13257666</id><snippet>&gt;&gt;&gt; s = "((abc)((123))())blabla"
&gt;&gt;&gt; count = 0
&gt;&gt;&gt; for i,e in enumerate(s):
    if e == '(':
        count += 1
    elif e == ')':
        count -= 1
    if not count:
        break


&gt;&gt;&gt; s[:i + 1]
'((abc)((123))())'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13257677</id><snippet>In [20]: df = pd.DataFrame({'A':[1,1,2,2],'B':[1,2,1,2],'values':np.arange(10,30,5)})

In [21]: df
Out[21]:
   A  B  values
0  1  1      10
1  1  2      15
2  2  1      20
3  2  2      25

In [22]: df['sum_values_A'] = df.groupby('A')['values'].transform(np.sum)

In [23]: df
Out[23]:
   A  B  values  sum_values_A
0  1  1      10            25
1  1  2      15            25
2  2  1      20            45
3  2  2      25            45
</snippet></ROW><ROW><id>13257690</id><snippet>d = {10:'A', 9:'A', 8:'B', 7:'C', 6:'D', 5:'F', 4:'F', 3:'F', 2:'F', 1:'F', 0:'F'}
print d[int(95.0/10)]  #same as `d[95//10]`.
</snippet></ROW><ROW><id>13257690</id><snippet>d = dict(zip(range(10,-1,-1),'AABCDFFFFFF'))
</snippet></ROW><ROW><id>13257690</id><snippet>class GradeBook(dict):
    def __getitem__(self,key):
        return dict.__getitem__(self,key//10)

    def __missing__(self,key):
        if key &gt; 9:
            return 'A'
        elif key &lt; 5:
            return 'F'

d = GradeBook(zip(range(5,10),'FDCBA'))
print d[100]
print d[45]
print d[120]
print d[45.2]
print d[72.8]
</snippet></ROW><ROW><id>13257741</id><snippet>__key__</snippet></ROW><ROW><id>13257767</id><snippet>def has_background_attribute(tag):
    return tag.has_key('background')

soup.find_all(has_background_attribute)
</snippet></ROW><ROW><id>13257767</id><snippet>soup.find_all(background = re.compile("your_regex"))
</snippet></ROW><ROW><id>13257789</id><snippet>    for i, j in zip(path_loss_list,throughput_values):
        plt.annotate( "%s" %str(j), xy=(i,j), xytext=(0, 5), ha='right', textcoords='offset points')
</snippet></ROW><ROW><id>13257789</id><snippet>xytext = (0, 8).</snippet></ROW><ROW><id>13257789</id><snippet>   for i, j in zip(path_loss_list,throughput_values):
       if not j&gt; 59:
           plt.annotate( "%s" %str(j), xy=(i,j), xytext=(-5, 5), ha='right', textcoords='offset points')
       else:
          plt.annotate( "%s" %str(j), xy=(i,j), xytext=(0, 5), ha='right', textcoords='offset points')
</snippet></ROW><ROW><id>13257869</id><snippet>os.fdopen</snippet></ROW><ROW><id>13257869</id><snippet>strace(1)</snippet></ROW><ROW><id>13257869</id><snippet>os.open()</snippet></ROW><ROW><id>13257869</id><snippet>open(2)</snippet></ROW><ROW><id>13257997</id><snippet> f = open('secrets.py', 'r')
 paths = f.readlines()

 f_list = open("filelist.txt", "r")
 file_list = map(lambda x: x.rstrip('\n'), f_list.readlines())

 ....
 ....
</snippet></ROW><ROW><id>13257997</id><snippet>    for file in files: 
       if file in file_list# &lt;--- this is the condition you need to add to your code
          srcFile = os.path.join(srcDir, file)
       ....
</snippet></ROW><ROW><id>13258220</id><snippet>return not (a or b)
</snippet></ROW><ROW><id>13258275</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13258275</id><snippet>dict</snippet></ROW><ROW><id>13258275</id><snippet>__init__</snippet></ROW><ROW><id>13258275</id><snippet>update</snippet></ROW><ROW><id>13258275</id><snippet>import collections
dd = collections.OrderedDict({
  'units': 'imperial',
  'fit': 'fit' ,
  'height': [ 'height' ],
  'weight': [ 'weight' ],
  'neck': [ 'neck' ],
})

print( dd )  #Order not preserved


#Pass an iterable of 2-tuples to preserve order.
ddd = collections.OrderedDict([
  ('units', 'imperial'),
  ('fit', 'fit') ,
  ('height', [ 'height' ]),
  ('weight', [ 'weight' ]),
  ('neck', [ 'neck' ]),
])

print( ddd ) #Order preserved
</snippet></ROW><ROW><id>13258351</id><snippet>extend()</snippet></ROW><ROW><id>13258351</id><snippet>append()</snippet></ROW><ROW><id>13258351</id><snippet> totalList.extend(returnList())
</snippet></ROW><ROW><id>13258363</id><snippet>def levelVarsGetter(l):
    return {'URLRegEx': baseDict['L%dRegex' % l],
            'titleRegEx': baseDict['L%dTitleRegex' % l],
            'buildPortion': baseDict['L%dbuildPortion' % l],
            'levelParser': 'level_%d' % l}
</snippet></ROW><ROW><id>13258363</id><snippet>baseDict</snippet></ROW><ROW><id>13258363</id><snippet>{1: {"Regex": ..., "TitleRegex": ..., "buildPortion": ...},
 2: {"Regex": ..., "TitleRegex": ..., "buildPortion": ...}...
</snippet></ROW><ROW><id>13258363</id><snippet>levels = [{"Regex": ..., "TitleRegex": ..., "buildPortion": ...},
          {"Regex": ..., "TitleRegex": ..., "buildPortion": ...}...
</snippet></ROW><ROW><id>13258363</id><snippet>levels[0]</snippet></ROW><ROW><id>13258363</id><snippet>Level</snippet></ROW><ROW><id>13258363</id><snippet>regex</snippet></ROW><ROW><id>13258363</id><snippet>title_regex</snippet></ROW><ROW><id>13258363</id><snippet>Level</snippet></ROW><ROW><id>13258363</id><snippet>class Level:
    def __init__(self, url_regex, title_regex, build_portion):
        self.url_regex = url_regex
        self.title_regex = title_regex
        self.build_portion = build_portion

    def method1(self):
        """use build_portion to do something"""
        self.build_portion.do_something()

    def method2(self):
        """use title_regex and url_regex to do something else"""
        x = self.title_regex + self.url_regex 
        x.do_something_else()
</snippet></ROW><ROW><id>13258498</id><snippet>pat1 = re.compile("CREATE TABLE .+ FROM (\w+)\..+")
</snippet></ROW><ROW><id>13258498</id><snippet>\w</snippet></ROW><ROW><id>13258498</id><snippet>\.</snippet></ROW><ROW><id>13258498</id><snippet>.+</snippet></ROW><ROW><id>13258498</id><snippet>address</snippet></ROW><ROW><id>13258582</id><snippet>In [13]: import dateutil.parser as parser

In [14]: parser.parse("19970902T090000")
Out[14]: datetime.datetime(1997, 9, 2, 9, 0)

In [15]: import datetime as dt

In [16]: now = dt.datetime.now()

In [17]: now.isoformat()
Out[18]: '2012-11-06T15:08:51.393631'

In [19]: parser.parse('2012-11-06T15:08:51.393631')
Out[19]: datetime.datetime(2012, 11, 6, 15, 8, 51, 393631)

In [20]: parser.parse('November 6, 2012')
Out[20]: datetime.datetime(2012, 11, 6, 0, 0)
</snippet></ROW><ROW><id>13258582</id><snippet>10-09-2003</snippet></ROW><ROW><id>13258582</id><snippet>dateutil</snippet></ROW><ROW><id>13258582</id><snippet>dayfirst</snippet></ROW><ROW><id>13258582</id><snippet>yearfirst</snippet></ROW><ROW><id>13258582</id><snippet>In [21]: parser.parse("10-09-2003")
Out[21]: datetime.datetime(2003, 10, 9, 0, 0)

In [22]: parser.parse("10-09-2003", dayfirst = True)
Out[22]: datetime.datetime(2003, 9, 10, 0, 0)

In [23]: parser.parse("10-09-03", yearfirst = True)
Out[23]: datetime.datetime(2010, 9, 3, 0, 0)
</snippet></ROW><ROW><id>13258729</id><snippet>DEBUG=True</snippet></ROW><ROW><id>13258729</id><snippet>DEBUG=False</snippet></ROW><ROW><id>13258729</id><snippet>manage.py collectstatic</snippet></ROW><ROW><id>13258729</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>13258729</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13258832</id><snippet>if src in mac_dict.values():
</snippet></ROW><ROW><id>13258832</id><snippet>if mac_dict.has_key(src):
</snippet></ROW><ROW><id>13258860</id><snippet>'\n'.join(str(e) for e in data)
</snippet></ROW><ROW><id>13258860</id><snippet>''.join(str(e) for e in data)
</snippet></ROW><ROW><id>13259057</id><snippet>&gt;&gt;&gt; d
   Stuff
0     a
1     b
2     c
3     d
&gt;&gt;&gt; dict(zip(d.Stuff, d.Stuff.map(ord)))
{'a': 97, 'b': 98, 'c': 99, 'd': 100}
</snippet></ROW><ROW><id>13259205</id><snippet>sys.stderr</snippet></ROW><ROW><id>13259205</id><snippet>'backslashreplace'</snippet></ROW><ROW><id>13259205</id><snippet>from __future__ import unicode_literals, print_function
import sys

s = 'unicode "\u2323" smile'
print(s)
print(s, file=sys.stderr)
try:
    raise RuntimeError(s)
except Exception as e:
    print(e.args[0])
    print(e.args[0], file=sys.stderr)
    raise
</snippet></ROW><ROW><id>13259205</id><snippet>$ PYTHONIOENCODING=ascii:ignore python3 raise_unicode.py
unicode "" smile
unicode "\u2323" smile
unicode "" smile
unicode "\u2323" smile
Traceback (most recent call last):
  File "raise_unicode.py", line 8, in &lt;module&gt;
    raise RuntimeError(s)
RuntimeError: unicode "\u2323" smile
</snippet></ROW><ROW><id>13259205</id><snippet>$ PYTHONIOENCODING=ascii:ignore python2 raise_unicode.py
unicode "" smile
unicode "" smile
unicode "" smile
unicode "" smile
Traceback (most recent call last):
  File "raise_unicode.py", line 8, in &lt;module&gt;
    raise RuntimeError(s)
RuntimeError
</snippet></ROW><ROW><id>13259205</id><snippet>T:\&gt; set PYTHONIOENCODING=ascii:ignore
T:\&gt; python raise_unicode.py
</snippet></ROW><ROW><id>13259205</id><snippet>$ python3 raise_unicode.py
unicode "⌣" smile
unicode "⌣" smile
unicode "⌣" smile
unicode "⌣" smile
Traceback (most recent call last):
  File "raise_unicode.py", line 8, in &lt;module&gt;
    raise RuntimeError(s)
RuntimeError: unicode "⌣" smile
</snippet></ROW><ROW><id>13259234</id><snippet>2y</snippet></ROW><ROW><id>13259326</id><snippet>words_list.append(...)</snippet></ROW><ROW><id>13259326</id><snippet>words_list.extend(contents[i].split())
</snippet></ROW><ROW><id>13259326</id><snippet>words_list</snippet></ROW><ROW><id>13259326</id><snippet>def read_words(words_file):
    return [word for line in open(words_file, 'r') for word in line.split()]
</snippet></ROW><ROW><id>13259435</id><snippet>import sys

_pyversion = sys.version_info[0]

def callback_method(func):
    def notify(self,*args,**kwargs):
        for _,callback in self._callbacks:
            callback()
        return func(self,*args,**kwargs)
    return notify

class NotifyList(list):
    extend = callback_method(list.extend)
    append = callback_method(list.append)
    remove = callback_method(list.remove)
    pop = callback_method(list.pop)
    __delitem__ = callback_method(list.__delitem__)
    __setitem__ = callback_method(list.__setitem__)
    __iadd__ = callback_method(list.__iadd__)
    __imul__ = callback_method(list.__imul__)

    #Take care to return a new NotifyList if we slice it.
    if _pyversion &lt; 3:
        __setslice__ = callback_method(list.__setslice__)
        __delslice__ = callback_method(list.__delslice__)
        def __getslice__(self,*args):
            return self.__class__(list.__getslice__(self,*args))

    def __getitem__(self,item):
        if isinstance(item,slice):
            return self.__class__(list.__getitem__(self,item))
        else:
            return list.__getitem__(self,item)

    def __init__(self,*args):
        list.__init__(self,*args)
        self._callbacks = []
        self._callback_cntr = 0

    def register_callback(self,cb):
        self._callbacks.append((self._callback_cntr,cb))
        self._callback_cntr += 1
        return self._callback_cntr - 1

    def unregister_callback(self,cbid):
        for idx,(i,cb) in enumerate(self._callbacks):
            if i == cbid:
                self._callbacks.pop(idx)
                return cb
        else:
            return None


if __name__ == '__main__':
    A = NotifyList(range(10))
    def cb():
        print ("Modify!")

    #register a callback
    cbid = A.register_callback(cb)

    A.append('Foo')
    A += [1,2,3]
    A *= 3
    A[1:2] = [5]
    del A[1:2]

    #Add another callback.  They'll be called in order (oldest first)
    def cb2():
        print ("Modify2")
    A.register_callback(cb2)
    print ("-"*80)
    A[5] = 'baz'
    print ("-"*80)

    #unregister the first callback
    A.unregister_callback(cbid)

    A[5] = 'qux'
    print ("-"*80)

    print (A)
    print (type(A[1:3]))
    print (type(A[1:3:2]))
    print (type(A[5]))
</snippet></ROW><ROW><id>13259435</id><snippet>__iadd__</snippet></ROW><ROW><id>13259435</id><snippet>__imul__</snippet></ROW><ROW><id>13259847</id><snippet>iterparse</snippet></ROW><ROW><id>13259847</id><snippet>for event, elem in iterparse(source):
    if elem.tag == "record":
        ... process record elements ...
        elem.clear()
</snippet></ROW><ROW><id>13259879</id><snippet>string</snippet></ROW><ROW><id>13259879</id><snippet>computeMD5hash("The quick brown fox jumps over the lazy dog")
</snippet></ROW><ROW><id>13259879</id><snippet>m.update((string))
</snippet></ROW><ROW><id>13259879</id><snippet>m.update(string.encode('utf-8')
</snippet></ROW><ROW><id>13259879</id><snippet>from hashlib import</snippet></ROW><ROW><id>13259879</id><snippet>md5string</snippet></ROW><ROW><id>13259879</id><snippet>import hashlib</snippet></ROW><ROW><id>13259879</id><snippet>digest()</snippet></ROW><ROW><id>13259879</id><snippet>hexdigest()</snippet></ROW><ROW><id>13259879</id><snippet>import hashlib

def computeMD5hash(string):
    m = hashlib.md5()
    m.update(string.encode('utf-8'))
    return m.hexdigest()
</snippet></ROW><ROW><id>13259889</id><snippet>__main__</snippet></ROW><ROW><id>13259889</id><snippet>from sqlalchemy.orm import Session, object_session
from sqlalchemy import event

def preserve_deleted(class_):
    def copy_col(col):
        newcol = col.copy()
        newcol.constraints = set()
        return newcol
    keys = class_.__table__.c.keys()
    cols = dict(
        (col.key, copy_col(col)) for col in class_.__table__.c
    )
    cols['__tablename__'] = "%s_deleted" % class_.__table__.name

    class History(object):
        def restore(self):
            sess = object_session(self)
            sess.delete(self)
            sess.add(copy_inst(self, class_))

    hist_class = type(
                    '%sDeleted' % class_.__name__,
                    (History, Base),
                    cols)

    def copy_inst(fromobj, tocls):
        return tocls(**dict(
                        (key, getattr(fromobj, key))
                        for key in keys
                    ))
    @event.listens_for(Session, 'before_flush')
    def check_deleted(session, flush_context, instances):
        for del_ in session.deleted:
            if isinstance(del_, class_):
                h = copy_inst(del_, hist_class)
                session.add(h)
    class_.deleted = hist_class
    return class_

if __name__ == '__main__':

    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy import Column, ForeignKey, Integer, String
    from sqlalchemy.orm import relationship, Session
    from sqlalchemy import create_engine

    Base = declarative_base()

    @preserve_deleted
    class A(Base):
        __tablename__ = "a"

        id = Column(Integer, primary_key=True)
        data1 = Column(String)
        data2 = Column(String)

    @preserve_deleted
    class B(Base):
        __tablename__ = 'b'
        id = Column(Integer, primary_key=True)
        data1 = Column(String)
        a_id = Column(Integer, ForeignKey('a.id'))
        a = relationship("A")

    e = create_engine('sqlite://', echo=True)

    Base.metadata.create_all(e)

    s = Session(e)

    a1, a2, a3, a4 = \
        A(data1='a1d1', data2='a1d2'),\
        A(data1='a2d1', data2='a2d2'),\
        A(data1='a3d1', data2='a3d2'),\
        A(data1='a4d1', data2='a4d2')

    b1, b2, b3, b4 = \
        B(data1='b1', a=a1),\
        B(data1='b2', a=a1),\
        B(data1='b3', a=a3),\
        B(data1='b4', a=a4)

    s.add_all([
        a1, a2, a3, a4,
        b1, b2, b3, b4
    ])
    s.commit()

    assert s.query(A.id).order_by(A.id).all() == [(1, ), (2, ), (3, ), (4, )]
    assert s.query(B.id).order_by(B.id).all() == [(1, ), (2, ), (3, ), (4, )]

    s.delete(a2)
    s.delete(b2)
    s.delete(b3)
    s.delete(a3)
    s.commit()

    assert s.query(A.id).order_by(A.id).all() == [(1, ), (4, )]
    assert s.query(B.id).order_by(B.id).all() == [(1, ), (4, )]

    a2_deleted = s.query(A.deleted).filter(A.deleted.id == 2).one()
    a2_deleted.restore()

    b3_deleted = s.query(B.deleted).filter(B.deleted.id == 3).one()
    a3_deleted = s.query(A.deleted).filter(A.deleted.id == 3).one()
    b3_deleted.restore()
    a3_deleted.restore()

    s.commit()

    assert s.query(A.id).order_by(A.id).all() == [(1, ), (2, ), (3, ), (4, )]
    assert s.query(B.id).order_by(B.id).all() == [(1, ), (3, ), (4, )]
</snippet></ROW><ROW><id>13259916</id><snippet>from paste.reloader import watch_file

#
# logic that puts list of your non-source file names suitable 
# for open() into iterable non_source_file_list
#

for non_source_file in non_source_file_list:
    watch_file(non_source_file_name)
</snippet></ROW><ROW><id>13259955</id><snippet>DotNet4Class.dll</snippet></ROW><ROW><id>13259994</id><snippet>__init__()</snippet></ROW><ROW><id>13260027</id><snippet>import pexpect

child = pexpect.spawn('ftp ftp.openbsd.org')
child.expect('Name .*: ')
child.sendline('anonymous')
child.expect('Password:')
child.sendline('noah@example.com')
child.expect('ftp&gt; ')
child.sendline('cd pub')
child.expect('ftp&gt; ')
child.sendline('get ls-lR.gz')
child.expect('ftp&gt; ')
child.sendline('bye')
</snippet></ROW><ROW><id>13260027</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13260027</id><snippet>import subprocess

script = subprocess.Popen(['script.sh'], stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE, shell=True)
</snippet></ROW><ROW><id>13260027</id><snippet>shell=True</snippet></ROW><ROW><id>13260027</id><snippet>script.stdout</snippet></ROW><ROW><id>13260027</id><snippet>script.stdin</snippet></ROW><ROW><id>13260388</id><snippet>from collections import Counter

coupons = [[1,4,7,34,45,67]  , [2,8,16,34,35,38],
           [7,12,13,26,29,34], [1,2,3,4,5,6]]
result  = [7,12,13,26,29,34]

answer = Counter([6-len(set(result)-set(s)) for s in coupons])
</snippet></ROW><ROW><id>13260388</id><snippet>Counter</snippet></ROW><ROW><id>13260388</id><snippet>answer[0]
&gt; 1

...

answer[6]
&gt; 1
</snippet></ROW><ROW><id>13260388</id><snippet>[Counter([6-len(set(result)-set(s)) for s in coupons])[x] for x in xrange(7)]
</snippet></ROW><ROW><id>13260398</id><snippet>result = [r[0] for r in result]
</snippet></ROW><ROW><id>13260398</id><snippet>result = [r for r, in result]
</snippet></ROW><ROW><id>13260566</id><snippet>class Organism(object):
    def reproduce(self):
        #use self here to customize the new organism ...
        return Organism()
</snippet></ROW><ROW><id>13260566</id><snippet>class Organism(object):
    @classmethod
    def reproduce(cls):
        return cls()
</snippet></ROW><ROW><id>13260566</id><snippet>class Organism(object):
    def reproduce(self):
        #use self here to customize the new organism ...
        return self.__class__()
</snippet></ROW><ROW><id>13260566</id><snippet>organism = Organism()
new_organism = organism.reproduce()
</snippet></ROW><ROW><id>13260575</id><snippet>a</snippet></ROW><ROW><id>13260575</id><snippet>np.all(np.array(a, dtype=np.int8) == a)
</snippet></ROW><ROW><id>13260575</id><snippet>ndarray</snippet></ROW><ROW><id>13260575</id><snippet>ndarray</snippet></ROW><ROW><id>13260575</id><snippet>&gt;&gt;&gt; a = [0, 0, 0, 0, 0, 0.123456789]
&gt;&gt;&gt; np.all(np.array(a, dtype=np.float32) == a)
False
&gt;&gt;&gt; np.all(np.array(a, dtype=np.float64) == a)
True
</snippet></ROW><ROW><id>13260640</id><snippet>def compare(l0, l1):
    """
    &gt;&gt;&gt; l0 = [1, 2, [[10, 20, 30], [40, 50, 60], [70, 80, 90]], 3]
    &gt;&gt;&gt; l1 = [[11, 21, 31], [41, 51, 61], [71, 81, 91]]
    &gt;&gt;&gt; compare(l0, l1)
    ([], [10, 40, 70])

    &gt;&gt;&gt; l0 = [1, 2, [[10, 20, 30], [40, 50, 60], [70, 80, 90]], 3]
    &gt;&gt;&gt; l1 = [[10, 21, 31], [41, 51, 61], [71, 81, 91]]
    &gt;&gt;&gt; compare(l0, l1)
    ([10], [40, 70])

    &gt;&gt;&gt; l0 = [1, 2, [[10, 20, 30], [40, 50, 60], [70, 80, 90]], 3]
    &gt;&gt;&gt; l1 = [[10, 21, 31], [40, 51, 61], [70, 81, 91]]
    &gt;&gt;&gt; compare(l0, l1)
    ([10, 40, 70], [])
    """
    first_entries_l0 = [x[0] for x in l0[2]]
    first_entries_l1 = [x[0] for x in l1]

    equals = [x for x in first_entries_l0 if x in first_entries_l1]
    unique = [x for x in first_entries_l0 if x not in first_entries_l1]

    return equals, unique
</snippet></ROW><ROW><id>13260640</id><snippet>python -m doctest code.py
</snippet></ROW><ROW><id>13260705</id><snippet>return</snippet></ROW><ROW><id>13260705</id><snippet>def newton(x):
    while abs(x**(1/2)- k) &gt;= 10**(-10):
        if k &gt;= 0:
            x = (x+k/x)/(2)
        elif k &lt; 0:
            raise ValueError ("Cannot take the square root of a negative number")
    return x
</snippet></ROW><ROW><id>13260705</id><snippet>k</snippet></ROW><ROW><id>13260705</id><snippet>def newton(x, k):
    if k &lt; 0:
            raise ValueError ("Cannot take the square root of a negative number")
    while abs(x ** (1 / 2) - k) &gt;= 10 ** (-10):
        x = (x + k / x) / 2
    return x
</snippet></ROW><ROW><id>13260981</id><snippet>datetime.datetime.utcfromtimestamp()</snippet></ROW><ROW><id>13260981</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>13260981</id><snippet>import calendar, datetime

# Convert a unix time u to a datetime object d, and vice versa
def dt(u): return datetime.datetime.utcfromtimestamp(u)
def ut(d): return calendar.timegm(d.timetuple())
</snippet></ROW><ROW><id>13260981</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>13260981</id><snippet>time.time()</snippet></ROW><ROW><id>13260981</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13260981</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13260981</id><snippet>fromtimestamp()</snippet></ROW><ROW><id>13260981</id><snippet>&gt;&gt;&gt; datetime.datetime.fromtimestamp(1004260000) 
datetime.datetime(2001, 10, 28, 1, 6, 40)
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1004256400)
datetime.datetime(2001, 10, 28, 1, 6, 40)
</snippet></ROW><ROW><id>13261061</id><snippet>b[a]</snippet></ROW><ROW><id>13261061</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1, 3, 2, 0])
&gt;&gt;&gt; b = np.array([0, 2, 1, 3])
&gt;&gt;&gt; c = b[a]
&gt;&gt;&gt; print c
[2 3 1 0]
</snippet></ROW><ROW><id>13261088</id><snippet>for i in p:
   print i.ip()
</snippet></ROW><ROW><id>13261120</id><snippet>repr</snippet></ROW><ROW><id>13261120</id><snippet>&gt;&gt;&gt; a='\x05\x03\x87'
&gt;&gt;&gt; print a
?
&gt;&gt;&gt; print repr(a)
'\x05\x03\x87'
</snippet></ROW><ROW><id>13261120</id><snippet>&gt;&gt;&gt; print ''.join(map(lambda c:'\\x%02x'%c, map(ord, a)))
\x05\x03\x87
</snippet></ROW><ROW><id>13261403</id><snippet>http://.../?urls=foo&amp;urls=bar&amp;...
</snippet></ROW><ROW><id>13261403</id><snippet>request.GET.getlist('urls')
</snippet></ROW><ROW><id>13261421</id><snippet>re.match(pattern, string, flags=0)¶
If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding MatchObject instance. Return None if the string does not match the pattern; note that this is different from a zero-length match
</snippet></ROW><ROW><id>13261421</id><snippet>m</snippet></ROW><ROW><id>13261421</id><snippet>m</snippet></ROW><ROW><id>13261421</id><snippet>None</snippet></ROW><ROW><id>13261421</id><snippet>groupdict</snippet></ROW><ROW><id>13261421</id><snippet>m</snippet></ROW><ROW><id>13261421</id><snippet>m</snippet></ROW><ROW><id>13261421</id><snippet>None</snippet></ROW><ROW><id>13261588</id><snippet>&gt; db.Users.find({'username':'johncit','smart_searches':{'$elemMatch':{'name':'blabla'}}},{'smart_searches.$.terms':1}).pretty()
{
    "_id" : ObjectId("5099ab303d550a068f16d5c5"),
    "smart_searches" : [
        {
            "name" : "blabla",
            "terms" : {
                "title" : "whatever",
                "otherfield" : 500
            }
        }
    ]
}
</snippet></ROW><ROW><id>13261588</id><snippet>db.Users.update({'username':'johncit',
                 'smart_searches':{'$elemMatch':{'name':'blabla'}}},
                  {$set:{'smart_searches.$.terms':{title:'changed',otherfield:200}}},
                  false,true)
</snippet></ROW><ROW><id>13261785</id><snippet>len(A) == n</snippet></ROW><ROW><id>13261785</id><snippet>len(B) == N</snippet></ROW><ROW><id>13261785</id><snippet>N</snippet></ROW><ROW><id>13261785</id><snippet>n</snippet></ROW><ROW><id>13261785</id><snippet>m</snippet></ROW><ROW><id>13261785</id><snippet>N = m*n</snippet></ROW><ROW><id>13261785</id><snippet>import numpy as np
A = np.zeros(10)
B = np.ones(20)

n = len(A)
C = np.concatenate([A.reshape(n, 1), B.reshape(n, -1)], axis=1)
C = C.ravel()
</snippet></ROW><ROW><id>13261785</id><snippet>-1</snippet></ROW><ROW><id>13261785</id><snippet>reshape</snippet></ROW><ROW><id>13261785</id><snippet>B.reshape(n, len(B)//n)</snippet></ROW><ROW><id>13261785</id><snippet>all(B == j)</snippet></ROW><ROW><id>13261785</id><snippet>import numpy as np
A = np.zeros(10)
j = 1.

C = np.zeros([10, 3])
C[:, 0] = A
C[:, 1:] = j
C = C.ravel()
</snippet></ROW><ROW><id>13261795</id><snippet>&gt;&gt;&gt; a[[list(a[:, 0]).index(i) for i in a[0]]]
array([['', 'z', 'b', 'd'],
       ['z', '3', '9', '2'],
       ['b', '2', '5', '7'],
       ['d', '0', '1', '3']], 
       dtype='|S1')
</snippet></ROW><ROW><id>13261937</id><snippet>Timer</snippet></ROW><ROW><id>13261937</id><snippet>active_count</snippet></ROW><ROW><id>13261966</id><snippet>concatenated = pd.concat([bb, cc])

concatenated

                      0         1
class  sample                    
2      22      0.730631  0.656266
       33      0.871282  0.942768
3      44      0.081831  0.714360
       55      0.600095  0.770108
5      66      0.128320  0.970817
       66      0.160488  0.969077
       77      0.919263  0.008597
6      77      0.811914  0.123960
       88      0.639887  0.262943
       88      0.312303  0.660786
</snippet></ROW><ROW><id>13261966</id><snippet> cols = ['d1']*2 + ['d2']*2  # &lt;-- this creates ['d1', 'd1', 'd2', 'd2']
</snippet></ROW><ROW><id>13261966</id><snippet>In [62]: aa
Out[62]: 
                 d1        d1        d2        d2
class idx                                        
0     00   0.805445  0.442059  0.296162  0.041271
      11   0.384600  0.723297  0.997918  0.006661
1     22   0.685997  0.794470  0.541922  0.326008
      33   0.117422  0.667745  0.662031  0.634429
</snippet></ROW><ROW><id>13261966</id><snippet>In [64]: bb
Out[64]: 
                 d1        d1        d2        d2
class idx                                        
2     44   0.465559  0.496039  0.044766  0.649145
      55   0.560626  0.684286  0.929473  0.607542
3     66   0.526605  0.836667  0.608098  0.159471
      77   0.216756  0.749625  0.096782  0.547273
4     88   0.619338  0.032676  0.218736  0.684045
      99   0.987934  0.349520  0.346036  0.926373
</snippet></ROW><ROW><id>13261966</id><snippet>pandas.append()</snippet></ROW><ROW><id>13261966</id><snippet>concat()</snippet></ROW><ROW><id>13261966</id><snippet>cols2 = ['d1', 'd2', 'd3', 'd4']

cc = pandas.DataFrame(x1, index=y1, columns=cols2)
cc.index.names = names

dd = pandas.DataFrame(x2, index=y2, columns=cols2)
cc.index.names = names
</snippet></ROW><ROW><id>13261966</id><snippet>In [70]: cc.append(dd)
Out[70]: 
                 d1        d2        d3        d4
class idx                                        
0     00   0.805445  0.442059  0.296162  0.041271
      11   0.384600  0.723297  0.997918  0.006661
1     22   0.685997  0.794470  0.541922  0.326008
      33   0.117422  0.667745  0.662031  0.634429
2     44   0.465559  0.496039  0.044766  0.649145
      55   0.560626  0.684286  0.929473  0.607542
3     66   0.526605  0.836667  0.608098  0.159471
      77   0.216756  0.749625  0.096782  0.547273
4     88   0.619338  0.032676  0.218736  0.684045
      99   0.987934  0.349520  0.346036  0.926373
</snippet></ROW><ROW><id>13262083</id><snippet>[min(arr, key=lambda s:s['value']) for arr in my_array]
</snippet></ROW><ROW><id>13262248</id><snippet>while</snippet></ROW><ROW><id>13262248</id><snippet>a_game = Game("central_corridor")
a_game.play()
</snippet></ROW><ROW><id>13262248</id><snippet>a_game</snippet></ROW><ROW><id>13262248</id><snippet>start_value</snippet></ROW><ROW><id>13262248</id><snippet>central_corridor</snippet></ROW><ROW><id>13262248</id><snippet>a_game.play()</snippet></ROW><ROW><id>13262248</id><snippet>def play(self):
    next_room_name = self.start

    while True:
        print "\n--------"
        room = getattr(self, next_room_name)
        next_room_name = room()
</snippet></ROW><ROW><id>13262248</id><snippet>next_room_name</snippet></ROW><ROW><id>13262248</id><snippet>central_corridor</snippet></ROW><ROW><id>13262248</id><snippet>while</snippet></ROW><ROW><id>13262248</id><snippet>while</snippet></ROW><ROW><id>13262248</id><snippet>while</snippet></ROW><ROW><id>13262248</id><snippet>next_room_name</snippet></ROW><ROW><id>13262248</id><snippet>self.start</snippet></ROW><ROW><id>13262248</id><snippet>room</snippet></ROW><ROW><id>13262248</id><snippet>next_room_name</snippet></ROW><ROW><id>13262248</id><snippet>central_corridor</snippet></ROW><ROW><id>13262248</id><snippet>death</snippet></ROW><ROW><id>13262248</id><snippet>room = death</snippet></ROW><ROW><id>13262248</id><snippet>next_room_name=</snippet></ROW><ROW><id>13262248</id><snippet>death()</snippet></ROW><ROW><id>13262303</id><snippet>import re, sys
for line in sys.stdin:
    match = re.search(r'`?\w+`?\s\w+\(\d+(,\s?\d+)?\)', line)
    if match:
        print match.group(0)
</snippet></ROW><ROW><id>13262404</id><snippet>for dVals in yourData:
    print max(dVals['items'], key=lambda x:x['age'])
</snippet></ROW><ROW><id>13262404</id><snippet>print [max(dVals['items'], key=lambda x: x['age']) for dVals in yourData]

{'id': 0, 'age': 17, 'name': 'Pam1'}
{'id': 1, 'age': 8, 'name': 'Tom12'}
{'id': 2, 'age': 77, 'name': 'Pam13'}
</snippet></ROW><ROW><id>13262672</id><snippet>import scipy
from scipy import stats
from itertools import combinations

data = [[1, 2, 4], [9, 5, 1], [8, 3, 3]]

def pearson(x, y):
    series1 = data[x]
    series2 = data[y]
    if x != y:
        return scipy.stats.pearsonr(series1, series2)

h = [pearson(x,y) for x,y in combinations(len(data), 2)]
</snippet></ROW><ROW><id>13262672</id><snippet>h = [stats.pearsonr(data[x], data[y]) for x,y in combinations(len(data), 2)]
</snippet></ROW><ROW><id>13262811</id><snippet>a = "comedy"
b = "political"
c = "philisophical"
d = "tragedy"

user_input = input("Would you like to read: comedy, political, philisophical, or tragedy?")

if user_input == a:
    user_input = input("Would you like the author's nationality to be: English or French?")

    if user_input == e:
        #do more stuff
</snippet></ROW><ROW><id>13262811</id><snippet>def comedy():
    print("comedy")

def political():
    print("political")

def philisophical():
    print("philisophical")

def tragedy():
    print("tragedy")

types = {"comedy":comedy,
         "political":political,
         "philisophical":philisophical,
         "tragedy":tragedy
        }

user_input = input()

types[user_input]()
</snippet></ROW><ROW><id>13262897</id><snippet>result = [s for s in original if s not in filtered]
</snippet></ROW><ROW><id>13262897</id><snippet>filter</snippet></ROW><ROW><id>13262897</id><snippet>filter(lambda x: x not in filtered, original)
</snippet></ROW><ROW><id>13262945</id><snippet>&lt;p&gt;
&lt;input type="text" name="message" size="60" /&gt;&lt;br /&gt;
&lt;input type="button" value="Submit" onclick="addMsg()" /&gt;
&lt;/p&gt;
&lt;div id="chatcontent"&gt; &lt;/div&gt;
&lt;script&gt;
function addMsg() {
    var message = $('input[name=message]').val();
    $.ajax({
        type: "POST",
        url: "/chat",
        data: {'message': message},
        cache: false
    });
}
&lt;/script&gt;
</snippet></ROW><ROW><id>13262993</id><snippet>f1</snippet></ROW><ROW><id>13262993</id><snippet>f2</snippet></ROW><ROW><id>13262993</id><snippet>f3</snippet></ROW><ROW><id>13262993</id><snippet>outfilepath</snippet></ROW><ROW><id>13262993</id><snippet>f1</snippet></ROW><ROW><id>13262993</id><snippet>outfilepath</snippet></ROW><ROW><id>13262993</id><snippet>f2</snippet></ROW><ROW><id>13262993</id><snippet>outfilepath</snippet></ROW><ROW><id>13262993</id><snippet>def readwrite(infilepaths, outfilepath):
    with open(outfilepath, 'w') as outfile:
        outfile.write(threeLinesOfHeader + '\n')
        for infilepath in infilepaths:
            with open(infilepath) as infile:
                skipLines = 4
                for _ in range(skipLines):
                    infile.readline()
                values = itertools.chain.from_iterable(line.strip().split() for line in infile)
                outfile.write('\n'.join(values) + '\n')
    print 'done'
</snippet></ROW><ROW><id>13263145</id><snippet>pip search package_name</snippet></ROW><ROW><id>13263145</id><snippet>pip install package_name
</snippet></ROW><ROW><id>13263145</id><snippet>github.com</snippet></ROW><ROW><id>13263145</id><snippet>bitbucket.com</snippet></ROW><ROW><id>13263145</id><snippet>pip install -e git+git://github.com/the/repo/url.git#egg=package_name
</snippet></ROW><ROW><id>13263145</id><snippet>pickle</snippet></ROW><ROW><id>13263145</id><snippet>pprint</snippet></ROW><ROW><id>13263145</id><snippet>pydumper.py</snippet></ROW><ROW><id>13263145</id><snippet>.py</snippet></ROW><ROW><id>13263145</id><snippet>pydumper.py</snippet></ROW><ROW><id>13263145</id><snippet>from pydumper import *
</snippet></ROW><ROW><id>13263145</id><snippet>from pydumper import Dumper
</snippet></ROW><ROW><id>13263587</id><snippet>case insensitive constraints</snippet></ROW><ROW><id>13263587</id><snippet>def _check_unique_insesitive(self, cr, uid, ids, context=None):
    sr_ids = self.search(cr, 1 ,[], context=context)
    lst = [x.FIELD.lower() for x in self.browse(cr, uid, sr_ids, context=context) if x.FIELD and x.id not in ids]
    for self_obj in self.browse(cr, uid, ids, context=context):

    if self_obj.FILD and self_obj.FILD.lower() in  lst:
        return False
    return True

_constraints = [(_check_unique_insesitive, 'Error: UNIQUE MSG', ['FIELD'])]
</snippet></ROW><ROW><id>13263630</id><snippet>l = ['jj01','gg01',',','yy01','hh01',',','yy04','uu01']
joined = ':'.join(l)
separated = joined.split(':,:')
final = [x.split(':') for x in separated]
</snippet></ROW><ROW><id>13263630</id><snippet>final = [x.split(':') for x in ':'.join(l).split(':,:')]
</snippet></ROW><ROW><id>13263655</id><snippet>Button (root, text="+", command=add_line(N)).grid(row=N, column=2, padx=3)
</snippet></ROW><ROW><id>13263655</id><snippet>Button (root, text="+", command=lambda:add_line(N)).grid(row=N, column=2, padx=3)
</snippet></ROW><ROW><id>13263655</id><snippet>add_line</snippet></ROW><ROW><id>13263682</id><snippet>&gt;&gt;&gt; s = "2012-11-04 23:00:07 10.1.151.54 GET /pages/index.aspx - 80 - 10.1.151.5
9 - 200 0 64 374"
&gt;&gt;&gt; s.split()[4]
'/pages/index.aspx'
</snippet></ROW><ROW><id>13263682</id><snippet>/phones/pages/nokia_overview.aspx pid=46&amp;cid=raj
  80</snippet></ROW><ROW><id>13263682</id><snippet>.aspx</snippet></ROW><ROW><id>13263682</id><snippet>&gt;&gt;&gt; s = "/phones/pages/nokia_overview.aspx pid=46&amp;cid=raj 80"
&gt;&gt;&gt; s.split()[0]
'/phones/pages/nokia_overview.aspx'
</snippet></ROW><ROW><id>13263753</id><snippet>        f.write(line.rsplit(' ', 1)[0] + "\'%s'\n"%add_name)
</snippet></ROW><ROW><id>13263753</id><snippet>        f.write(line.rsplit('=', 1)[0] + "=\'%s'\n"%add_name)
</snippet></ROW><ROW><id>13263753</id><snippet>=</snippet></ROW><ROW><id>13263753</id><snippet>=</snippet></ROW><ROW><id>13263753</id><snippet>=</snippet></ROW><ROW><id>13264122</id><snippet>source</snippet></ROW><ROW><id>13264122</id><snippet>print os.system('rsync -zvr --progress {source} /home/zurelsoft/R'.format(source=source))
</snippet></ROW><ROW><id>13264122</id><snippet>subprocess</snippet></ROW><ROW><id>13264122</id><snippet>subprocess.call(['rsync','-zvr','--progress',source,'/home/zurelsoft/R'])
</snippet></ROW><ROW><id>13264122</id><snippet>; rm -rf ~;</snippet></ROW><ROW><id>13264398</id><snippet>&lt;script type="text/javascript"&gt;
function send_request() {
    $.ajax({
        type: 'POST',
        url: '/ajaxredirect/',
        data: $('#your_form').serialize(),
        crossDomain: false,
        success: function(ctx) { console.log(ctx); },
    });
}
&lt;/script&gt;
</snippet></ROW><ROW><id>13264398</id><snippet>from django.views.generic import View
from braces.views import JSONResponseMixin, AjaxResponseMixin

class AjaxResponseView(JSONResponseMixin, AjaxResponseMixin, View):
    def post_ajax(self, request, *args, **kwargs):
        data = request.POST.items() # form data
        ctx = {'hi': 'hello'}
        return self.render_json_response(ctx)
</snippet></ROW><ROW><id>13264781</id><snippet>/admin/sites/site</snippet></ROW><ROW><id>13264781</id><snippet>SITE_ID</snippet></ROW><ROW><id>13264832</id><snippet>for line in fin</snippet></ROW><ROW><id>13264832</id><snippet>fin.seek(0)</snippet></ROW><ROW><id>13264832</id><snippet>fin.readlines()</snippet></ROW><ROW><id>13264832</id><snippet>Counter</snippet></ROW><ROW><id>13264832</id><snippet>from collections import Counter
with open('file') as fin:
    result = Counter()
    for line in fin:
        result += Counter(set(line.strip().lower()))
</snippet></ROW><ROW><id>13264832</id><snippet>defaultdict</snippet></ROW><ROW><id>13264832</id><snippet>from collections import defaultdict
with open('file') as fin:
    result = defaultdict(int)
    for line in fin:
        chars = set(line.strip().lower())
        for c in chars:
            result[c] += 1
</snippet></ROW><ROW><id>13264832</id><snippet>setdefault</snippet></ROW><ROW><id>13264832</id><snippet>fin = open('file')
result = dict()
for line in fin:
    chars = set(line.strip().lower())
    for c in chars:
        result[c] = result.setdefault(c,0) + 1

fin.close()
</snippet></ROW><ROW><id>13264865</id><snippet>import collections
import multiprocessing
import os
import random
import time

def generate_stuff():
    for foo in range(100):
        yield foo

def process(moo):
    #print moo
    time.sleep(random.randint(0, 50) / 10.)
    return os.getpid()

pool = multiprocessing.Pool()
pids = pool.map(func=process, iterable=generate_stuff(), chunksize=1)
pool.close()
print collections.Counter(pids)
</snippet></ROW><ROW><id>13264865</id><snippet>chunksize</snippet></ROW><ROW><id>13264865</id><snippet>Counter({98935: 16, 98936: 16, 98939: 13, 98937: 12, 98942: 12, 98938: 11, 98940: 11, 98941: 9})
</snippet></ROW><ROW><id>13264865</id><snippet>Pool()</snippet></ROW><ROW><id>13264865</id><snippet>Pool(4)</snippet></ROW><ROW><id>13264865</id><snippet>Counter({98965: 31, 98962: 24, 98964: 23, 98963: 22})
</snippet></ROW><ROW><id>13264865</id><snippet>map</snippet></ROW><ROW><id>13264865</id><snippet>map_async</snippet></ROW><ROW><id>13264865</id><snippet>self._taskqueue</snippet></ROW><ROW><id>13264865</id><snippet>Queue.Queue</snippet></ROW><ROW><id>13264865</id><snippet>map</snippet></ROW><ROW><id>13264865</id><snippet>len(iterable) / (len(self._pool) * 4)</snippet></ROW><ROW><id>13265186</id><snippet>bool()</snippet></ROW><ROW><id>13265186</id><snippet>not</snippet></ROW><ROW><id>13265186</id><snippet>__len__</snippet></ROW><ROW><id>13265186</id><snippet>%timeit</snippet></ROW><ROW><id>13265186</id><snippet>Python 2.7.1 (r271:86832, Jul 31 2011, 19:30:53), [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin</snippet></ROW><ROW><id>13265186</id><snippet>bool(…)</snippet></ROW><ROW><id>13265186</id><snippet>True if … else False</snippet></ROW><ROW><id>13265196</id><snippet>from collections import OrderedDict

class DefaultListOrderedDict(OrderedDict):
    def __missing__(self,k):
        self[k] = []
        return self[k]

keys=['blk','pri','ani']
vals1=['blocking','primary','anim']
vals2=['S1','S2','S3']
dic = DefaultListOrderedDict()
for i,key in enumerate(keys):
    dic[key].append(vals1[i])
    dic[key].append(vals2[i])

print dic
</snippet></ROW><ROW><id>13265196</id><snippet>defaultdict</snippet></ROW><ROW><id>13265196</id><snippet>__init__</snippet></ROW><ROW><id>13265196</id><snippet>list</snippet></ROW><ROW><id>13265243</id><snippet>\s*</snippet></ROW><ROW><id>13265243</id><snippet>&gt;&gt;&gt; import re 
&gt;&gt;&gt; s = '''Hello World )   
...         ;'''
&gt;&gt;&gt; re.sub(r'\s*;', ';', s)
'Hello World );'
</snippet></ROW><ROW><id>13265243</id><snippet>\s*;</snippet></ROW><ROW><id>13265243</id><snippet>re.sub()</snippet></ROW><ROW><id>13265243</id><snippet>with open(path) as f:
    fixed = re.sub(r'\s*;', ';', f.read())
</snippet></ROW><ROW><id>13265464</id><snippet>pw</snippet></ROW><ROW><id>13265464</id><snippet>salt</snippet></ROW><ROW><id>13265464</id><snippet>pw_bytes = pw.encode('utf-8')
salt_bytes = salt.encode('utf-8')
return hashlib.sha256(pw_bytes + salt_bytes).hexdigest() + "," + salt
</snippet></ROW><ROW><id>13265530</id><snippet>enctype="multipart/form-data"
</snippet></ROW><ROW><id>13265748</id><snippet>-journal</snippet></ROW><ROW><id>13265748</id><snippet>-journal</snippet></ROW><ROW><id>13265917</id><snippet>__init__()</snippet></ROW><ROW><id>13266118</id><snippet>conn.request("POST", report_path, bulkData,headers)
</snippet></ROW><ROW><id>13266118</id><snippet>&lt;?
$data = json_decode(file_get_contents('php://input'));
?&gt;
</snippet></ROW><ROW><id>13266135</id><snippet>from csv import reader

def proceed(size):
    with open(filename) as f:
        data = list(csv.reader(f))
        if len(data) &gt; size:
            return
        else:
            for line in data:
                #do action


weights = {'user1': 4, 'user2': 5}  
for k,v in weights.iteritems():
    proceed(v)
</snippet></ROW><ROW><id>13266135</id><snippet>def proceed(size):
    if sum(1 for row in csv.reader(open(filename))) &gt; size:
        return
    else:
        for line in csv.reader(open(filename)):
            #do action
</snippet></ROW><ROW><id>13266562</id><snippet>__init__</snippet></ROW><ROW><id>13266562</id><snippet>__slots__</snippet></ROW><ROW><id>13266596</id><snippet>raw_input</snippet></ROW><ROW><id>13266596</id><snippet>print</snippet></ROW><ROW><id>13266596</id><snippet>recv</snippet></ROW><ROW><id>13266596</id><snippet>send</snippet></ROW><ROW><id>13266596</id><snippet>makefile</snippet></ROW><ROW><id>13266596</id><snippet>import random
import socket
rannum = random.randrange(0,10,1)
print rannum
counter = 0
a=0

sock = socket.socket()
sock.bind(('127.0.0.1', 12345))
sock.listen(5)
clientsock, addr = sock.accept()
client = clientsock.makefile('r+')

while(a==0):
client.write('What is your guess?: ')
guess = int(client.readline())
counter = counter + 1

diff = abs(guess - rannum)
if(diff &gt;5):
    client.write("Way Off!\n")

…
</snippet></ROW><ROW><id>13266596</id><snippet>nc localhost 12345</snippet></ROW><ROW><id>13266596</id><snippet>nc</snippet></ROW><ROW><id>13266596</id><snippet>socket.connect</snippet></ROW><ROW><id>13266596</id><snippet>makefile</snippet></ROW><ROW><id>13266596</id><snippet>readline</snippet></ROW><ROW><id>13266596</id><snippet>select.select</snippet></ROW><ROW><id>13266596</id><snippet>asyncore</snippet></ROW><ROW><id>13266596</id><snippet>twisted</snippet></ROW><ROW><id>13266596</id><snippet>accept</snippet></ROW><ROW><id>13266984</id><snippet>foursquare.RateLimitExceeded</snippet></ROW><ROW><id>13266984</id><snippet>foursquare.FoursquareException</snippet></ROW><ROW><id>13267166</id><snippet>chunk</snippet></ROW><ROW><id>13267166</id><snippet>start+10</snippet></ROW><ROW><id>13267166</id><snippet>chunk</snippet></ROW><ROW><id>13267166</id><snippet>block = lines[start:start+10]
</snippet></ROW><ROW><id>13267166</id><snippet>start += 10</snippet></ROW><ROW><id>13267166</id><snippet>itertools.islice()</snippet></ROW><ROW><id>13267166</id><snippet> with open("data1.txt") as f:
    slc=islice(f,5)            #replace 5 by 10 in your case
    for x in slc:
        print x.strip()
    while raw_input("wanna see more : ") in("y","Y"):     
        slc=islice(f,5)        #replace 5 by 10 in your case
        for x in slc:
            print x.strip()
</snippet></ROW><ROW><id>13267166</id><snippet>1
2
3
4
5
wanna see more : y
6
7
8
9
10
wanna see more : n
</snippet></ROW><ROW><id>13267368</id><snippet>conftest.py</snippet></ROW><ROW><id>13267368</id><snippet>scope='session'</snippet></ROW><ROW><id>13267502</id><snippet>letters = [chr(i) for i in range(97,97+26)]
print letters
max = 300

def searchWord(orig,word, curindex,counter):
    if counter&gt;max: return

    if counter==0:
        s = letters[0] + word[1:]            
        searchWord(orig,s,0,counter+1)
    else:
        c = word[curindex]

        print 'checking ',word,curindex
        s = word
        i = letters.index(c)

        if i==len(letters)-1 and curindex==len(orig)-1:
            print 'done'
            return

        if i==len(letters)-1: 
            print 'end of letters reached'
            print 'curindex',curindex
            s = list(word)
            s[curindex] = list(orig)[curindex]
            s[curindex+1] = letters[0]
            s[1] = letters[0]
            s = ''.join(s)
            searchWord(orig,s,curindex+1,counter+1)

        else:
            s = list(word)
            try:
                s[curindex] = letters[i+1]
            except:
                print '?? ',s,curindex,letters[i]

            s = ''.join(s)
            searchWord(orig,s ,curindex,counter+1)


searchWord("weke","weke",0,0)
</snippet></ROW><ROW><id>13267502</id><snippet>corpus_words = {'wake',....} # this is in memory
allowed = word in corpus_words # perhaps improve this with adjusted binary search
</snippet></ROW><ROW><id>13267502</id><snippet>word = 'weke'             
suggestions = list()                                                      
letters = [chr(x) for x in range(97,97+26)]                                     
for i in range(len(word)):                                                      
    for a in letters: # or do this in a smarter way to iterate                                                           
        newword = word                                                          
        newword[i] = a                                                          
        if newword in corpus: suggestions.append(newword)
</snippet></ROW><ROW><id>13267954</id><snippet>field</snippet></ROW><ROW><id>13267954</id><snippet>UPDATE table SET "field"="value"
</snippet></ROW><ROW><id>13267954</id><snippet>UPDATE table SET field="value"
</snippet></ROW><ROW><id>13267954</id><snippet>field</snippet></ROW><ROW><id>13267954</id><snippet>'UPDATE table SET %s=?' % ('field',)
</snippet></ROW><ROW><id>13268043</id><snippet>def reverse(regex, dict):
    replacer_regex = re.compile('''
        \(\?P\&lt;         # Match the opening
            (.+?)       # Match the group name into group 1
        \&gt;\(.*?\)\)     # Match the rest
        '''
        , re.VERBOSE)

    return replacer_regex.sub(lambda m : dict[m.group(1)], regex)
</snippet></ROW><ROW><id>13268043</id><snippet>regex_compiled.pattern
</snippet></ROW><ROW><id>13268224</id><snippet>getent shadow | egrep '^[^:]*:[*!]:' -v | cut -f1 -d:
</snippet></ROW><ROW><id>13268224</id><snippet>getent passwd | cut -f1 -d:
</snippet></ROW><ROW><id>13268224</id><snippet>www-data</snippet></ROW><ROW><id>13268506</id><snippet>TABLE pages (
    `absolute_url` VARCHAR(255) NOT NULL,
    `visited` TINYINT(1) DEFAULT 0,
    -- Additional fields
    UNIQUE KEY (`absolute_url`)
)
</snippet></ROW><ROW><id>13268506</id><snippet>absolute_url</snippet></ROW><ROW><id>13268506</id><snippet>http[s]://</snippet></ROW><ROW><id>13268506</id><snippet>visited</snippet></ROW><ROW><id>13268506</id><snippet>database.insert( 'http://www.harvard.edu')
database.insert( 'http://www.berkeley.edu')

# In case of failure you'll start at this point:
while database.get_count( WHERE visited = 0) &lt; 0:

    for url in database.get_records( WHERE visited = 0):
        content = http_client.load(url)
        time.sleep(5) # You don't want to flood server

        # Problematic URLs will be parsed later
        if (not content) or (http_client.is_error):
            continue; 

        for i in content.get_all_urls():
            i = make_absolute(i, url)

            # Also don't crawl remote sites, images, ...
            if not is_valid_url(i):
                continue
            database.insert(i)
</snippet></ROW><ROW><id>13268917</id><snippet>re.sub()</snippet></ROW><ROW><id>13268917</id><snippet>start, end = span(group)</snippet></ROW><ROW><id>13268917</id><snippet>d = { 'something': 'completely',
      'something2': 'different' }

def repl(m):
    s = m.group(1)
    return d[s]

s = "/(?P&lt;something&gt;\w+)/whatever/(?P&lt;something2&gt;\w+)"
p = re.compile(r'\(\?P&lt;(.*?)&gt;\\w\+\)')

print p.sub(repl, s)
</snippet></ROW><ROW><id>13268917</id><snippet>/completely/whatever/different</snippet></ROW><ROW><id>13269514</id><snippet>CELERYD_POOL = 'gevent'
</snippet></ROW><ROW><id>13269567</id><snippet>write(socket_fd, buffer, strlen(buffer));
</snippet></ROW><ROW><id>13269567</id><snippet>write(connection_fd, buffer, strlen(buffer));
</snippet></ROW><ROW><id>13269594</id><snippet>global</snippet></ROW><ROW><id>13269594</id><snippet>global</snippet></ROW><ROW><id>13269594</id><snippet>x</snippet></ROW><ROW><id>13269594</id><snippet>ClassA.GetExpBidBrice()</snippet></ROW><ROW><id>13269594</id><snippet>ClassA.GetExpAskPrice()</snippet></ROW><ROW><id>13269594</id><snippet>ClassB.GetExpBidBrice()</snippet></ROW><ROW><id>13269594</id><snippet>ClassB.GetExpAskPrice()</snippet></ROW><ROW><id>13269594</id><snippet>x</snippet></ROW><ROW><id>13270033</id><snippet>2</snippet></ROW><ROW><id>13270033</id><snippet>'RbB2'</snippet></ROW><ROW><id>13270033</id><snippet>TeX</snippet></ROW><ROW><id>13270033</id><snippet>$\tt{RbB_{2}}$</snippet></ROW><ROW><id>13270033</id><snippet>c</snippet></ROW><ROW><id>13270033</id><snippet>import re
for c,h,b in np.transpose(gat):
    c = r'$\tt{{{c}}}$'.format(c = re.sub(r'(\d+)',r'_{\1}', c))
</snippet></ROW><ROW><id>13270033</id><snippet>import re
import numpy as np
import matplotlib.pyplot as pytl
from matplotlib import rc

rc('font', **{'family':'sans-serif', 'sans-serif':['Helvetica']})
rc('text', usetex = True)
recdt = np.dtype([('compound', str, 4), ('H_v', 'f4'), ('B_o', 'f4')]);
gat =  np.loadtxt('tra', dtype = object, usecols = (0, 1, 2), unpack = True);
gct, ght, gbt = [], [], []
for c, h, b in np.transpose(gat):
    c = r'$\tt{{{c}}}$'.format(c = re.sub(r'(\d+)', r'_{\1}', c))
    gct = np.append(gct, c)
    ght = np.append(ght, h)
    gbt = np.append(gbt, b)
ght = ght.astype(np.float)
gbt = gbt.astype(np.float)
hard = pytl
four = hard   #####  
four.scatter(gbt, ght)
hard.title( 'physical stuff' )
hard.xlabel('physical prop 1')
hard.ylabel('physical prop2 ')
for l, x1, y2 in zip ( gct, gbt, ght):
    print(l, x1, y2)
    hard.annotate(
        l, xy = (x1, y2), xytext = (-24, 12), textcoords = 'offset points',
        arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'),
        rotation = 0 )
hard.ylim([0, 10])
hard.savefig('hardcomp.png')
hard.show()
</snippet></ROW><ROW><id>13270106</id><snippet>listarez = lista()
</snippet></ROW><ROW><id>13270106</id><snippet>listarez.adds(a)
listarez.printer()
</snippet></ROW><ROW><id>13270110</id><snippet>from pandas import DataFrame, merge
df1 = DataFrame({'key':[1,1], 'col1':[1,2],'col2':[3,4]})
df2 = DataFrame({'key':[1,1], 'col3':[5,6]})

merge(df1, df2,on='key')[['col1', 'col2', 'col3']]
</snippet></ROW><ROW><id>13270760</id><snippet>if linalg.cond(x) &lt; 1/sys.float_info.epsilon:
    i = linalg.inv(x)
else:
    #handle it
</snippet></ROW><ROW><id>13270977</id><snippet>2.6</snippet></ROW><ROW><id>13270977</id><snippet>2.6.5</snippet></ROW><ROW><id>13270977</id><snippet>PYTHON_VERSION=2.6
</snippet></ROW><ROW><id>13271125</id><snippet>.</snippet></ROW><ROW><id>13271125</id><snippet>&gt;&gt;&gt; x = 'foobar'
&gt;&gt;&gt; y = 'foo'
&gt;&gt;&gt; sw = x.startswith
&gt;&gt;&gt; %timeit x.startswith(y)
1000000 loops, best of 3: 316 ns per loop
&gt;&gt;&gt; %timeit sw(y)
1000000 loops, best of 3: 267 ns per loop
&gt;&gt;&gt; %timeit x[:3] == y
10000000 loops, best of 3: 151 ns per loop
</snippet></ROW><ROW><id>13271125</id><snippet>startswith</snippet></ROW><ROW><id>13271125</id><snippet>&gt;&gt;&gt; def f():
...     pass
... 
&gt;&gt;&gt; %timeit f()
10000000 loops, best of 3: 105 ns per loop
</snippet></ROW><ROW><id>13271125</id><snippet>len</snippet></ROW><ROW><id>13271125</id><snippet>sw(y)</snippet></ROW><ROW><id>13271125</id><snippet>&gt;&gt;&gt; %timeit x[:len(y)] == y
1000000 loops, best of 3: 213 ns per loop
</snippet></ROW><ROW><id>13271125</id><snippet>len</snippet></ROW><ROW><id>13271125</id><snippet>len</snippet></ROW><ROW><id>13271125</id><snippet>startswith</snippet></ROW><ROW><id>13271241</id><snippet>python setup.py install</snippet></ROW><ROW><id>13271241</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>13271434</id><snippet>publicdata</snippet></ROW><ROW><id>13271434</id><snippet>samples</snippet></ROW><ROW><id>13271434</id><snippet>natality</snippet></ROW><ROW><id>13271623</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>13271623</id><snippet>datetime.datetime.strptime(u'2012-11-07T13:25:10.703Z', '%Y-%m-%dT%H:%M:%S.%fZ')
</snippet></ROW><ROW><id>13271623</id><snippet>datetime.datetime(2012, 11, 7, 13, 25, 10, 703000)
</snippet></ROW><ROW><id>13271623</id><snippet>strptime</snippet></ROW><ROW><id>13271751</id><snippet>&gt;&gt;&gt; from comtypes.client import CreateObject
&gt;&gt;&gt; Aquator = CreateObject("Aquator.Application")
&gt;&gt;&gt; Database = Aquator.LoadDatabase(r"D:\Shared", "AquatorExcel.mdb")
&gt;&gt;&gt; Project = Aquator.LoadProject(Database, "A simple project", False, False)
&gt;&gt;&gt; ModelRun = Project.ModelRunStart()
&gt;&gt;&gt; print ModelRun.ResultSet.Cost
133432.20
</snippet></ROW><ROW><id>13271761</id><snippet>In [1]: map(lambda x: x.split(":"), "12:30-14:40".split("-"))
Out[1]: [['12', '30'], ['14', '40']]
</snippet></ROW><ROW><id>13271798</id><snippet>new ObjectInputStream</snippet></ROW><ROW><id>13271802</id><snippet>Mediator</snippet></ROW><ROW><id>13271802</id><snippet>WorkController</snippet></ROW><ROW><id>13271802</id><snippet>stop()</snippet></ROW><ROW><id>13271802</id><snippet>Mediator</snippet></ROW><ROW><id>13271802</id><snippet>join</snippet></ROW><ROW><id>13271802</id><snippet>Mediator</snippet></ROW><ROW><id>13271802</id><snippet>CELERY_DISABLE_ALL_RATE_LIMITS: True
</snippet></ROW><ROW><id>13272794</id><snippet>self</snippet></ROW><ROW><id>13272794</id><snippet>def echo(self, start=0, stop=None, search=None):
    if stop is None:
        stop = len(self.codeSegment)
</snippet></ROW><ROW><id>13272794</id><snippet>None</snippet></ROW><ROW><id>13272794</id><snippet>stop</snippet></ROW><ROW><id>13272794</id><snippet>None</snippet></ROW><ROW><id>13272794</id><snippet>stop</snippet></ROW><ROW><id>13272794</id><snippet>_sentinel = object()

class makeCode:
    def echo(self, start=0, stop=_sentinel, search=None):
        if stop is _sentinel:
            stop = len(self.codeSegment)
</snippet></ROW><ROW><id>13272807</id><snippet>libbz2</snippet></ROW><ROW><id>13272969</id><snippet>def rubikstring(s):
    import string
    cumu = ''
    for c in s:
        if c in string.ascii_letters:
            if cumu: yield cumu
            cumu = ''
        cumu += c
    if cumu: yield cumu
</snippet></ROW><ROW><id>13272969</id><snippet>&gt;&gt;&gt; for i in rubikstring("RL2R'F2LD'"): i
...
'R'
'L2'
"R'"
'F2'
'L'
"D'"
</snippet></ROW><ROW><id>13272969</id><snippet>&gt;&gt;&gt; list(rubikstring("RL2R'F2LD'"))
['R', 'L2', "R'", 'F2', 'L', "D'"]
</snippet></ROW><ROW><id>13273146</id><snippet>def find_closest(A, target):
    #A must be sorted
    idx = A.searchsorted(target)
    idx = np.clip(idx, 1, len(A)-1)
    left = A[idx-1]
    right = A[idx]
    idx -= target - left &lt; right - target
    return A[idx]

arr2.sort()
closest = find_closest(arr2, arr1)
closest = np.where(abs(closest - arr1) &lt; .375, closest, np.nan)
</snippet></ROW><ROW><id>13273282</id><snippet>&gt;&gt;&gt; a = np.arange(2*3).reshape(2,3)
&gt;&gt;&gt; np.mgrid[:2, :3]
array([[[0, 0, 0],
        [1, 1, 1]],

       [[0, 1, 2],
        [0, 1, 2]]])
&gt;&gt;&gt; np.indices(a.shape)
array([[[0, 0, 0],
        [1, 1, 1]],

       [[0, 1, 2],
        [0, 1, 2]]])
&gt;&gt;&gt; a = np.arange(2*3*5).reshape(2,3,5)
&gt;&gt;&gt; (np.mgrid[:2, :3, :5] == np.indices(a.shape)).all()
True
</snippet></ROW><ROW><id>13273607</id><snippet>target="_blank"</snippet></ROW><ROW><id>13273607</id><snippet>&lt;p&gt;&lt;a href="/ads/{{each_ad.file_pdf}}" target="_blank"&gt;{{each_ad.file_pdf.name}}&lt;/a&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>13273607</id><snippet>.htaccess</snippet></ROW><ROW><id>13273607</id><snippet>attachment</snippet></ROW><ROW><id>13273706</id><snippet>user_numbers_list = []    #initialise the list
Counter = 0
for i in range(len(user_words_refined)):
    user_words_numbers = (ord(user_words_refined[Counter]))
    user_numbers_list.append(user_words_numbers)     #add to the end of the list
    print(user_numbers_list)
    Counter += 1
</snippet></ROW><ROW><id>13274199</id><snippet>In [47]: strs="4.500000+1 1.894719-3 4.600000+1 8.196721-3 4.700000+1 2.869539-3"

In [48]: [float(x.replace("+","e+").replace("-","e-")) for x in strs.split()]

Out[48]: [45.0, 0.001894719, 46.0, 0.008196721, 47.0, 0.002869539]
</snippet></ROW><ROW><id>13274273</id><snippet>for a,b,c in zip(F_list, C_approx_list, C_list)
    print(a,b,c)
</snippet></ROW><ROW><id>13274273</id><snippet>for a,b,c in zip(F_list, C_approx_list, C_list)
    print('{}\t{}\t{}'.format(a,b,c))
</snippet></ROW><ROW><id>13274273</id><snippet>for a,b,c in zip(F_list, C_approx_list, C_list)
    print(a,b,c, sep='\t')
</snippet></ROW><ROW><id>13274806</id><snippet>def sumdigits(value):
    return value and (value % 10 + sumdigits(value // 10))
</snippet></ROW><ROW><id>13274806</id><snippet>value and</snippet></ROW><ROW><id>13274806</id><snippet>value % 10</snippet></ROW><ROW><id>13274806</id><snippet>sumdigits(value // 10)</snippet></ROW><ROW><id>13274806</id><snippet>//</snippet></ROW><ROW><id>13274842</id><snippet>is_valid()</snippet></ROW><ROW><id>13274842</id><snippet>.run()</snippet></ROW><ROW><id>13274842</id><snippet>ValueError</snippet></ROW><ROW><id>13274842</id><snippet>with self.assertRaises(ValueError):
    objectundertest.run(invalid_parameter)
</snippet></ROW><ROW><id>13274842</id><snippet>is_valid()</snippet></ROW><ROW><id>13274842</id><snippet>.run()</snippet></ROW><ROW><id>13274842</id><snippet>.run()</snippet></ROW><ROW><id>13274842</id><snippet>BaseAction</snippet></ROW><ROW><id>13274842</id><snippet>class MockAction(BaseAction):
    run_called = None

    def do_run(self, param):
        self.run_called = param
</snippet></ROW><ROW><id>13274842</id><snippet>run</snippet></ROW><ROW><id>13274842</id><snippet>do_run</snippet></ROW><ROW><id>13274842</id><snippet>param</snippet></ROW><ROW><id>13275159</id><snippet>with open('filename.txt', 'w') as f:
  print &gt;&gt; f, my_object
</snippet></ROW><ROW><id>13275159</id><snippet>print()</snippet></ROW><ROW><id>13275159</id><snippet>logger</snippet></ROW><ROW><id>13275159</id><snippet>def logger(txt):    
  fh = open (LOGFILE, "a") #Get handle in append mode
  fh.write(txt)
  fh.close()
  print &gt;&gt;fh, txt
  return True 
</snippet></ROW><ROW><id>13275159</id><snippet>now, duration = 4.0, 2.0
logger("User request at %f time took %f seconds." % (now, duration))
</snippet></ROW><ROW><id>13275159</id><snippet>User request at 4.0 time took 2.0 seconds.
</snippet></ROW><ROW><id>13275159</id><snippet>%</snippet></ROW><ROW><id>13275159</id><snippet>logger "User request at %f time took %f seconds." % (now, duration)
</snippet></ROW><ROW><id>13275168</id><snippet>itertools</snippet></ROW><ROW><id>13275168</id><snippet>&gt;&gt;&gt; from itertools import product, cycle
&gt;&gt;&gt; s = 'abcde'
&gt;&gt;&gt; [''.join(chars) for chars in product(*zip(s, cycle('*')))]
['abcde', 'abcd*', 'abc*e', 'abc**', 'ab*de', 'ab*d*', 'ab**e', 'ab***', 
 'a*cde', 'a*cd*', 'a*c*e', 'a*c**', 'a**de', 'a**d*', 'a***e', 'a****', 
 '*bcde', '*bcd*', '*bc*e', '*bc**', '*b*de', '*b*d*', '*b**e', '*b***',
 '**cde', '**cd*', '**c*e', '**c**', '***de', '***d*', '****e', '*****']
</snippet></ROW><ROW><id>13275168</id><snippet>n</snippet></ROW><ROW><id>13275267</id><snippet>sklearn.svm.SVC</snippet></ROW><ROW><id>13275267</id><snippet>sklearn.linear_model.Perceptron</snippet></ROW><ROW><id>13275267</id><snippet>sklearn.linear_model.LogisticRegression</snippet></ROW><ROW><id>13275267</id><snippet>sklearn.svm.LinearSVC</snippet></ROW><ROW><id>13275267</id><snippet>liblinear</snippet></ROW><ROW><id>13275267</id><snippet>libsvm</snippet></ROW><ROW><id>13275267</id><snippet>sklearn.ensemble.ExtraTreesClassifier</snippet></ROW><ROW><id>13275267</id><snippet>n_estimators</snippet></ROW><ROW><id>13275267</id><snippet>RBFSampler</snippet></ROW><ROW><id>13275343</id><snippet>os.path.expanduser('~').decode(sys.getfilesystemencoding())
</snippet></ROW><ROW><id>13275343</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>13275343</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>13275343</id><snippet>os.path.expanduser(u'~')
</snippet></ROW><ROW><id>13275347</id><snippet>import sys, time
from PyQt4 import QtGui, QtCore

class ProgressBar(QtGui.QWidget):
    def __init__(self, parent=None, total=20):
        super(ProgressBar, self).__init__(parent)
        self.progressbar = QtGui.QProgressBar()
        self.progressbar.setMinimum(1)
        self.progressbar.setMaximum(total)
        self.button = QtGui.QPushButton('Start')
        self.button.clicked.connect(self.handleButton)
        main_layout = QtGui.QGridLayout()
        main_layout.addWidget(self.button, 0, 0)
        main_layout.addWidget(self.progressbar, 0, 1)
        self.setLayout(main_layout)
        self.setWindowTitle('Progress')
        self._active = False

    def handleButton(self):
        if not self._active:
            self._active = True
            self.button.setText('Stop')
            if self.progressbar.value() == self.progressbar.maximum():
                self.progressbar.reset()
            QtCore.QTimer.singleShot(0, self.startLoop)
        else:
            self._active = False

    def closeEvent(self, event):
        self._active = False

    def startLoop(self):
        while True:
            time.sleep(0.05)
            value = self.progressbar.value() + 1
            self.progressbar.setValue(value)
            QtGui.qApp.processEvents()
            if (not self._active or
                value &gt;= self.progressbar.maximum()):
                break
        self.button.setText('Start')
        self._active = False

app = QtGui.QApplication(sys.argv)
bar = ProgressBar(total=101)
bar.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>13275631</id><snippet>child.listChildren()</snippet></ROW><ROW><id>13275631</id><snippet>def listChildren(self):
  yield self
  for child in self.children:
    for c in child.listChildren():
      yield c
  raise StopIteration # PS: you don't need to do that explicitly
</snippet></ROW><ROW><id>13275631</id><snippet>def listChildren(self):
  yield self
  for child in self.children:
    yield from child.listChildren()
</snippet></ROW><ROW><id>13276200</id><snippet>pragma Export (C, Print_Call, "Print_Call", "Print_Call");
</snippet></ROW><ROW><id>13276200</id><snippet>function Add_Nums(A,B : in Integer) return Integer
    with Export, Convention =&gt; Ada, Link_Name =&gt; "Add_Nums";
</snippet></ROW><ROW><id>13276303</id><snippet>all((i - j) == (j - k) for i, j, k in zip(l[:-2], l[1:-1], l[2:]))
</snippet></ROW><ROW><id>13276303</id><snippet>np.all((a[:-2] - a[1:-1]) == (a[1:-1] - a[2:]))
</snippet></ROW><ROW><id>13276303</id><snippet>np.all(a[:-2] + a[2:] == 2 * a[1:-1])
</snippet></ROW><ROW><id>13276303</id><snippet>np.all(np.diff(l, 2) == 0)
</snippet></ROW><ROW><id>13276448</id><snippet>Event</snippet></ROW><ROW><id>13276448</id><snippet>finally</snippet></ROW><ROW><id>13276448</id><snippet>import time
from threading import Thread, Event


def child(quit):
    for _ in xrange(10):
        if quit.isSet():
            print "Parent is dead. Leaving child."
            return

        print "Child alive"
        time.sleep(.5)

def parent():
    quitEvent = Event()
    t = Thread(target=child, args=(quitEvent,))
    t.start()

    try:
        time.sleep(2)
        raise Exception("Parent thread raises exception")
    finally:
        quitEvent.set()

    t.join()


if __name__ == "__main__":
    t = Thread(target=parent, args=())
    t.start()
    t.join()
</snippet></ROW><ROW><id>13276448</id><snippet>Event</snippet></ROW><ROW><id>13276448</id><snippet>def child(heartbeat):
    for _ in xrange(10):
        if not heartbeat.isSet():
            print "Parent is dead. Leaving child."
            return

        heartbeat.clear()

        print "Child alive"
        time.sleep(1)

def parent():
    heartbeat = Event()
    heartbeat.set()

    t = Thread(target=child, args=(heartbeat,))
    t.start()

    i = 0
    while i &lt; 20:
        print "Parent alive"
        i += 1
        heartbeat.set()
        time.sleep(.1)

    print "Parent done looping...pretending to be deadlocked"
    time.sleep(5)

    t.join()
</snippet></ROW><ROW><id>13276466</id><snippet>class AutoVivification(dict):
</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>def __getitem__(self, item):
</snippet></ROW><ROW><id>13276466</id><snippet>__getitem()__</snippet></ROW><ROW><id>13276466</id><snippet>[...]</snippet></ROW><ROW><id>13276466</id><snippet>object[somekey]</snippet></ROW><ROW><id>13276466</id><snippet>type(object).__getitem__(object, somekey)</snippet></ROW><ROW><id>13276466</id><snippet>try</snippet></ROW><ROW><id>13276466</id><snippet> return dict.__getitem__(self, item)
</snippet></ROW><ROW><id>13276466</id><snippet>__getitem__()</snippet></ROW><ROW><id>13276466</id><snippet>__getitem__</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>item</snippet></ROW><ROW><id>13276466</id><snippet>KeyError</snippet></ROW><ROW><id>13276466</id><snippet>try:</snippet></ROW><ROW><id>13276466</id><snippet>except KeyError</snippet></ROW><ROW><id>13276466</id><snippet>    try:
        return dict.__getitem__(self, item)
    except KeyError:
        value = self[item] = type(self)()
        return value
</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>KeyError</snippet></ROW><ROW><id>13276466</id><snippet>dict.__getitem__()</snippet></ROW><ROW><id>13276466</id><snippet>self[item]</snippet></ROW><ROW><id>13276466</id><snippet>self</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>__setitem__</snippet></ROW><ROW><id>13276466</id><snippet>self</snippet></ROW><ROW><id>13276466</id><snippet>dict</snippet></ROW><ROW><id>13276466</id><snippet>a[1][2][3] = 4</snippet></ROW><ROW><id>13276466</id><snippet>a[1]</snippet></ROW><ROW><id>13276466</id><snippet>type(a).__getitem__(a, 1)</snippet></ROW><ROW><id>13276466</id><snippet>__getitem__</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>KeyError</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>1</snippet></ROW><ROW><id>13276466</id><snippet>a[1]</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>[2]</snippet></ROW><ROW><id>13276466</id><snippet>KeyError</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>2</snippet></ROW><ROW><id>13276466</id><snippet>a[1][2]</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>[3]</snippet></ROW><ROW><id>13276466</id><snippet>KeyError</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>3</snippet></ROW><ROW><id>13276466</id><snippet>a[1][2][3]</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>4</snippet></ROW><ROW><id>13276466</id><snippet>a[1][3][3] = 5</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>1</snippet></ROW><ROW><id>13276466</id><snippet>return dict.__getitem__(self, item)</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>[3]</snippet></ROW><ROW><id>13276466</id><snippet>AutoVivification</snippet></ROW><ROW><id>13276466</id><snippet>a[1]</snippet></ROW><ROW><id>13276466</id><snippet>2</snippet></ROW><ROW><id>13276500</id><snippet>csv.DictReader</snippet></ROW><ROW><id>13276500</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('t.txt') as f:
...    reader = csv.DictReader(f,dialect='excel-tab')
...    rows = list(reader)
... 
&gt;&gt;&gt; rows[0]
{'TITLE': 'Age out SRR values from buffer in Beacon miss scenario',
 'CR': '12345', 'CL': '656885', 'FA': 'Dta'}
</snippet></ROW><ROW><id>13276519</id><snippet>page = PdfFileReader(file("document.pdf", "rb")).getPage(0)
overlay = PdfFileReader(file("overlay.pdf", "rb")).getPage(0)
page.mergePage(overlay)
</snippet></ROW><ROW><id>13276519</id><snippet>overlay.pdf</snippet></ROW><ROW><id>13276519</id><snippet>os.system(command)</snippet></ROW><ROW><id>13276530</id><snippet>PyTypeObject</snippet></ROW><ROW><id>13276530</id><snippet>PyObject*</snippet></ROW><ROW><id>13276530</id><snippet>"O"</snippet></ROW><ROW><id>13276530</id><snippet>"o"</snippet></ROW><ROW><id>13276530</id><snippet>"O!"</snippet></ROW><ROW><id>13276530</id><snippet>PyObject*</snippet></ROW><ROW><id>13276530</id><snippet>PyObject*</snippet></ROW><ROW><id>13276530</id><snippet>PyObject* dict;
PyArg_ParseTuple("O!", &amp;PyDict_Type, &amp;dict);
</snippet></ROW><ROW><id>13276530</id><snippet>TypeError</snippet></ROW><ROW><id>13276635</id><snippet>fileitem.file.read()</snippet></ROW><ROW><id>13276811</id><snippet>str.join</snippet></ROW><ROW><id>13276811</id><snippet>def my_print(*args):
    print ' '.join(map(str, args))
</snippet></ROW><ROW><id>13276811</id><snippet>print</snippet></ROW><ROW><id>13276811</id><snippet>def my_print(*args):
    print(*args)
</snippet></ROW><ROW><id>13276811</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>13276811</id><snippet>print</snippet></ROW><ROW><id>13277082</id><snippet>import os


def drop_permissions():
    os.setegid(int(os.getenv("SUDO_GID")))
    os.seteuid(int(os.getenv("SUDO_UID")))


def call_without_permissions(func, *args, **kw):
    in_parent = os.fork()
    if not in_parent:
        drop_permissions()
        func(*args, **kw)
        os._exit(0)
    else:
        os.waitpid(0)
</snippet></ROW><ROW><id>13277114</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>13277114</id><snippet>ssh</snippet></ROW><ROW><id>13277114</id><snippet>foofile.txt</snippet></ROW><ROW><id>13277114</id><snippet>python argcheck.py ssh cat &lt; foofile.txt " | /path/to/bash/script.sh;"
['argcheck.py', 'ssh', 'cat', ' | /path/to/bash/script.sh;']
</snippet></ROW><ROW><id>13277114</id><snippet>&lt; foofile.txt</snippet></ROW><ROW><id>13277114</id><snippet>&lt;</snippet></ROW><ROW><id>13277114</id><snippet>ssh</snippet></ROW><ROW><id>13277114</id><snippet>stdin</snippet></ROW><ROW><id>13277114</id><snippet>ssh</snippet></ROW><ROW><id>13277114</id><snippet>s = """                                                                    
ssh x.x.x.x cat '| /path/to/bash/script.sh;'
"""

#&lt;snip&gt;

proc=subprocess.Popen(sbash,stdout=subprocess.PIPE,stderr=subprocess.PIPE,
                            stdin=subprocess.PIPE)
out,err=proc.communicate(open(fn).read())
</snippet></ROW><ROW><id>13277114</id><snippet>import subprocess
from subprocess import PIPE

with open('foo.h') as f:
    p = subprocess.Popen(['ssh','mgilson@XXXXX','cat','| cat'],stdin=f,stdout=PIPE,stderr=PIPE)
    out,err = p.communicate()
    print out
    print '#'*80
    print err
</snippet></ROW><ROW><id>13277114</id><snippet>bash</snippet></ROW><ROW><id>13277114</id><snippet>ssh mgilson@XXXXX cat &lt; foo.h '| cat'
</snippet></ROW><ROW><id>13277114</id><snippet>foo.h</snippet></ROW><ROW><id>13277120</id><snippet>&amp;num;</snippet></ROW><ROW><id>13277257</id><snippet>import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()
edges = [
    (3,6),(7,2),(8,5),(9,5),(5,13),(10,6),(6,1),(1,13),(11,2),(2,13),(12,4),(4,13)]

G.add_edges_from(edges)
nx.draw(G)
plt.show()
</snippet></ROW><ROW><id>13277449</id><snippet>print "0x%X" % value
</snippet></ROW><ROW><id>13277498</id><snippet>data</snippet></ROW><ROW><id>13277498</id><snippet>data = input('&gt; ')
if not data:
    break
tcpCliSock.send(data.encode('utf-8'))
</snippet></ROW><ROW><id>13277498</id><snippet>response = '[%s] %s' % (ctime(), data.decode('utf-8'))
tcpCliSock.send(response.encode('utf-8'))
</snippet></ROW><ROW><id>13277577</id><snippet>d</snippet></ROW><ROW><id>13277577</id><snippet>items = d.items()</snippet></ROW><ROW><id>13277577</id><snippet>ordered = sorted(items, key=lambda (_, value): value) # Not Python 3

# or,
ordered = sorted(items, key=lambda x: x[1])

# or,
import operator
ordered = sorted(items, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>13277577</id><snippet>result = ''.join(string for (string, _) in ordered)
</snippet></ROW><ROW><id>13277577</id><snippet>_</snippet></ROW><ROW><id>13277577</id><snippet>_</snippet></ROW><ROW><id>13277799</id><snippet>section_grades_list = []</snippet></ROW><ROW><id>13277799</id><snippet>sum(section_grades_list) / len(section_grades_list)</snippet></ROW><ROW><id>13278043</id><snippet>"""
Protects a Module against naive monkey patching  -
may be usefull for debugging large projects where global
variables change without notice.

Just call the "ProtectedModule"  class, with no parameters from the end of 
the module definition you want to protect, and subsequent assignments to it
should fail.

"""

from types import ModuleType
from inspect import currentframe, getmodule
import sys

class ProtectedModule(ModuleType):
    def __init__(self, module=None):
        if module is None:
            module = getmodule(currentframe(1))
        ModuleType.__init__(self, module.__name__, module.__doc__)
        self.__dict__.update(module.__dict__)
        sys.modules[self.__name__] = self

    def __setattr__(self, attr, value):
        frame = currentframe(1)
        raise ValueError("Attempt to monkey patch module %s from %s, line %d" % 
            (self.__name__, frame.f_code.co_filename, frame.f_lineno))        

if __name__ == "__main__":
    from xml.etree import ElementTree as ET
    ET = ProtectedModule(ET)
    print dir(ET)
    ET.bla = 10
    print ET.bla
</snippet></ROW><ROW><id>13278114</id><snippet>random.choice(seq)</snippet></ROW><ROW><id>13278114</id><snippet>seq</snippet></ROW><ROW><id>13278114</id><snippet>seq</snippet></ROW><ROW><id>13278114</id><snippet>IndexError</snippet></ROW><ROW><id>13278114</id><snippet>seq</snippet></ROW><ROW><id>13278114</id><snippet>thelists.index(theplayers)
</snippet></ROW></DATA>