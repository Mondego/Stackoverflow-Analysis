<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>2939547</id><snippet>intersecting_points = set(enumerate(list1)).intersection(set(enumerate(list2)))
</snippet></ROW><ROW><id>2940074</id><snippet>[project_keys.remove(project.proj_id)
 for project in projects.itervalues()
 if project.invalid]
</snippet></ROW><ROW><id>2940074</id><snippet>remove</snippet></ROW><ROW><id>2940074</id><snippet>None</snippet></ROW><ROW><id>2940074</id><snippet>project_keys</snippet></ROW><ROW><id>2940074</id><snippet>project_keys = sorted(project.proj_id
                      for project in projects.itervalues()
                      if not project.invalid)
</snippet></ROW><ROW><id>2940235</id><snippet>course</snippet></ROW><ROW><id>2940235</id><snippet>course = (DEPT_CODE + COURSE_NUMBER).setResultsName("Course")
</snippet></ROW><ROW><id>2940235</id><snippet>x=statement.parseString("CS 2110")
print(repr(x))
# (['CS', 2110], {'Course': [((['CS', 2110], {'Dept Code': [('CS', 0)], 'Course Number': [(2110, 1)]}), 0)], 'Dept Code': [('CS', 0)], 'Course Number': [(2110, 1)]})
print(x['Dept Code'])
# CS
print(x['Course Number'])
# 2110
print(x['Course'])
# ['CS', 2110]
</snippet></ROW><ROW><id>2940235</id><snippet>repr</snippet></ROW><ROW><id>2940235</id><snippet>course.setResultsName("Course")</snippet></ROW><ROW><id>2940235</id><snippet>course</snippet></ROW><ROW><id>2940235</id><snippet>course=course.setResultsName("Course")</snippet></ROW><ROW><id>2940551</id><snippet>def __iter__(self):
    import itertools
    return itertools.chain(self.items.itervalues(), self.people.itervalues())
</snippet></ROW><ROW><id>2940551</id><snippet>items</snippet></ROW><ROW><id>2940551</id><snippet>people</snippet></ROW><ROW><id>2940551</id><snippet>def __iter__(self):
    import itertools
    return itertools.chain(self.items.iteritems(), self.people.iteritems())
</snippet></ROW><ROW><id>2940844</id><snippet>realnum = Word(nums) + "." + Word(nums)
</snippet></ROW><ROW><id>2940844</id><snippet>realnum.parseString("3.14")</snippet></ROW><ROW><id>2940844</id><snippet>realnum = Combine(Word(nums) + "." + Word(nums))
</snippet></ROW><ROW><id>2940844</id><snippet>realnum.parseString("3.14")</snippet></ROW><ROW><id>2940878</id><snippet>ps -A</snippet></ROW><ROW><id>2940878</id><snippet>&gt;&gt;&gt; import subprocess, signal
&gt;&gt;&gt; p = subprocess.Popen(['ps', '-A'], stdout=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
</snippet></ROW><ROW><id>2940878</id><snippet>ps -A</snippet></ROW><ROW><id>2940878</id><snippet>out</snippet></ROW><ROW><id>2940878</id><snippet>&gt;&gt;&gt; for line in out.splitlines():
...   if 'iChat' in line:
...     pid = int(line.split(None, 1)[0])
...     os.kill(pid, signal.SIGKILL)
... 
</snippet></ROW><ROW><id>2940878</id><snippet>signal</snippet></ROW><ROW><id>2940878</id><snippet>9</snippet></ROW><ROW><id>2940878</id><snippet>signal.SIGKILL</snippet></ROW><ROW><id>2940878</id><snippet>ps</snippet></ROW><ROW><id>2940878</id><snippet>ps</snippet></ROW><ROW><id>2940878</id><snippet>/proc</snippet></ROW><ROW><id>2940903</id><snippet>course = Group(DEPT_CODE + COURSE_NUMBER).setResultsName("Course")
</snippet></ROW><ROW><id>2940903</id><snippet>Optional("or" + this)</snippet></ROW><ROW><id>2940903</id><snippet>ZeroOrMore(
"and" + that)</snippet></ROW><ROW><id>2940903</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>2940903</id><snippet>DEPT_CODE = Regex(r'[A-Z]{2,}').setResultsName("DeptCode")        
COURSE_NUMBER = Regex(r'[0-9]{4}').setResultsName("CourseNumber")
course = Group(DEPT_CODE + COURSE_NUMBER)

courseSearch = operatorPrecedence(course, 
    [
    ("not", 1, opAssoc.RIGHT),
    ("and", 2, opAssoc.LEFT),
    ("or", 2, opAssoc.LEFT),
    ])
</snippet></ROW><ROW><id>2940910</id><snippet>QWebView</snippet></ROW><ROW><id>2940910</id><snippet>&lt;span class="myhilite"&gt;...&lt;/span&gt;</snippet></ROW><ROW><id>2940910</id><snippet>myhilite</snippet></ROW><ROW><id>2940910</id><snippet>setHtml</snippet></ROW><ROW><id>2940910</id><snippet>QWebView</snippet></ROW><ROW><id>2940910</id><snippet>QWebView</snippet></ROW><ROW><id>2940910</id><snippet>QWebView</snippet></ROW><ROW><id>2940910</id><snippet>QWidget</snippet></ROW><ROW><id>2940913</id><snippet>os.path.split(path)
</snippet></ROW><ROW><id>2940913</id><snippet>paths</snippet></ROW><ROW><id>2940913</id><snippet>split_paths = [os.path.split(p) for p in paths]
</snippet></ROW><ROW><id>2940913</id><snippet>split_paths_as_lists = [list(os.path.split(p)) for p in paths]
</snippet></ROW><ROW><id>2941079</id><snippet>&gt;&gt;&gt; os.urandom(64).encode('hex')
'0bf760072ea10140d57261d2cd16bf7af1747e964c2e117700bd84b7acee331ee39fae5cff6f3f3fc3ee3f9501c9fa38ecda4385d40f10faeb75eb3a8f557909'
&gt;&gt;&gt; os.urandom(64).encode('base64')
'ZuYDN1BiB0ln73+9P8eoQ3qn3Q74QzCXSViu8lqueKAOUYchMXYgmz6WDmgJm1DyTX598zE2lClX\n4iEXXYZfRA==\n'
</snippet></ROW><ROW><id>2941201</id><snippet>import logging
</snippet></ROW><ROW><id>2941201</id><snippet>logging</snippet></ROW><ROW><id>2941281</id><snippet>settings.TEMPLATE_LOADERS</snippet></ROW><ROW><id>2941281</id><snippet>settings.TEMPLATE_LOADERS</snippet></ROW><ROW><id>2941281</id><snippet>is_usable</snippet></ROW><ROW><id>2941281</id><snippet>True</snippet></ROW><ROW><id>2941282</id><snippet>for the_input in iter(lambda: raw_input('what to print?\n'), 'quit'):
    print the_input
</snippet></ROW><ROW><id>2941282</id><snippet>for</snippet></ROW><ROW><id>2941282</id><snippet>iter</snippet></ROW><ROW><id>2941282</id><snippet>itertools</snippet></ROW><ROW><id>2941282</id><snippet>yield</snippet></ROW><ROW><id>2941282</id><snippet>__iter__</snippet></ROW><ROW><id>2941282</id><snippet>return self</snippet></ROW><ROW><id>2941282</id><snippet>next</snippet></ROW><ROW><id>2941282</id><snippet>__next__</snippet></ROW><ROW><id>2941560</id><snippet>import collections
d = collections.defaultdict(list)

with open('lakhlists.txt') as f:
    for line in f:
        aslist = line.split()  # assuming whitespace separators
        d[aslist[1]].append(aslist)
</snippet></ROW><ROW><id>2941560</id><snippet>d</snippet></ROW><ROW><id>2941735</id><snippet>from subprocess import Popen, PIPE

scpt = '''
    on run {x, y}
        return x + y
    end run'''
args = ['2', '2']

p = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
stdout, stderr = p.communicate(scpt)
print (p.returncode, stdout, stderr)
</snippet></ROW><ROW><id>2941975</id><snippet>def mk_int(s):
    s = s.strip()
    return int(s) if s else 0
</snippet></ROW><ROW><id>2942071</id><snippet>def do_work(work_info):
    q = mp.Queue()
    for (worker, dataset) in work_info.items():
      xworker = __import__(worker)
      p = mp.Process(target=xworker.do_work, args=dataset).start()
      q.put(p)
    while not q.empty():
      r = q.get()
</snippet></ROW><ROW><id>2943428</id><snippet>python</snippet></ROW><ROW><id>2943428</id><snippet>set</snippet></ROW><ROW><id>2943428</id><snippet>.__file__</snippet></ROW><ROW><id>2943478</id><snippet>python manage.py shell</snippet></ROW><ROW><id>2943478</id><snippet>import teachline.grading.models</snippet></ROW><ROW><id>2943478</id><snippet>python manage.py sql grading</snippet></ROW><ROW><id>2943520</id><snippet>aggregate</snippet></ROW><ROW><id>2943520</id><snippet>from datetime import datetime
this_month = datetime.now().month
HourEntries.objects.filter(date__month=this_month).aggregate(Sum("quantity"))
</snippet></ROW><ROW><id>2943520</id><snippet>HourEntries.objects.raw("select date_format(date, '%Y-%m') as month, sum(quantity) as hours from hourentries group by date_format(date, '%Y-%m') order by date;")
</snippet></ROW><ROW><id>2943702</id><snippet>quantlib-python</snippet></ROW><ROW><id>2943702</id><snippet>/usr/share/doc/quantlib-python/examples/american-option.py
/usr/share/doc/quantlib-python/examples/basket-option.py
/usr/share/doc/quantlib-python/examples/bermudan-swaption.py.gz
/usr/share/doc/quantlib-python/examples/european-option.py
/usr/share/doc/quantlib-python/examples/swap.py.gz
/usr/share/doc/quantlib-python/examples/test/QuantLibTestSuite.py
/usr/share/doc/quantlib-python/examples/test/bonds.py.gz
/usr/share/doc/quantlib-python/examples/test/date.py
/usr/share/doc/quantlib-python/examples/test/instruments.py
/usr/share/doc/quantlib-python/examples/test/integrals.py
/usr/share/doc/quantlib-python/examples/test/marketelements.py
/usr/share/doc/quantlib-python/examples/test/ratehelpers.py
/usr/share/doc/quantlib-python/examples/test/solvers1d.py
/usr/share/doc/quantlib-python/examples/test/termstructures.py.gz
</snippet></ROW><ROW><id>2944024</id><snippet>    try:
        return sys.modules[pkgname]
    except KeyError:
        if level &lt; 1:
            warn("Parent module '%s' not found while handling "
                 "absolute import" % pkgname, RuntimeWarning, 1)
            return None
        else:
            raise SystemError, ("Parent module '%s' not loaded, cannot "
                                "perform relative import" % pkgname)
</snippet></ROW><ROW><id>2944024</id><snippet># foo/__main__.py
import sys
mod = __import__('foo')
sys.modules["foo"]=mod

__package__='foo'
from .bar import hello

hello()
</snippet></ROW><ROW><id>2944024</id><snippet>foo</snippet></ROW><ROW><id>2944630</id><snippet>import itertools

def intersperse(x, numzeroes):
    for indices in itertools.combinations(range(len(x) + numzeroes), numzeroes):
        y = x[:]
        for i in indices:
            y.insert(0, i)
        yield y

x = [[1, 1, 2], [1, 1, 1, 2], [1, 1, 2]]
list(intersperse(x, 3))
</snippet></ROW><ROW><id>2945053</id><snippet>java.util.Arrays.binarySearch</snippet></ROW><ROW><id>2945053</id><snippet>java.util.Collections.binarySearch</snippet></ROW><ROW><id>2945053</id><snippet>List</snippet></ROW><ROW><id>2945053</id><snippet>Comparable</snippet></ROW><ROW><id>2945053</id><snippet>Comparator</snippet></ROW><ROW><id>2945053</id><snippet>List.subList(int fromIndex, int toIndex)</snippet></ROW><ROW><id>2945181</id><snippet>    # print allWords[i][j],
    print a,
</snippet></ROW><ROW><id>2945181</id><snippet>import sys  

n = int(sys.argv[1]) 
print "Beginning of the program!"

for i in range(1,n) :
   print "The number:"
   print i

if n &lt; 5 :
   print n 
   print "less than 5"  
</snippet></ROW><ROW><id>2945181</id><snippet>g</snippet></ROW><ROW><id>2945181</id><snippet>    # print allWords[i][j],
    print&gt;&gt;g, a,
</snippet></ROW><ROW><id>2945412</id><snippet>with</snippet></ROW><ROW><id>2945412</id><snippet>using</snippet></ROW><ROW><id>2945412</id><snippet>c.close()</snippet></ROW><ROW><id>2945412</id><snippet>finally</snippet></ROW><ROW><id>2945412</id><snippet>try {
    // use c
} finally {
    c.close()
}
</snippet></ROW><ROW><id>2945412</id><snippet>with</snippet></ROW><ROW><id>2945412</id><snippet>using</snippet></ROW><ROW><id>2945412</id><snippet>try..finally</snippet></ROW><ROW><id>2945412</id><snippet>try..catch</snippet></ROW><ROW><id>2945415</id><snippet>def parse(astr):
    astr=astr.replace(',','')
    astr=astr.replace('and','')    
    tokens=astr.split()
    dept=None
    number=None
    result=[]
    option=[]
    for tok in tokens:
        if tok=='or':
            result.append(option)
            option=[]
            continue
        if tok.isalpha():
            dept=tok
            number=None
        else:
            number=int(tok)
        if dept and number:
            option.append((dept,number))
    else:
        if option:
            result.append(option)
    return result

if __name__=='__main__':
    tests=[ ("CS 2110" , [[("CS", 2110)]]),
            ("CS 2110 and INFO 3300" , [[("CS", 2110), ("INFO", 3300)]]),
            ("CS 2110, INFO 3300" , [[("CS", 2110), ("INFO", 3300)]]),
            ("CS 2110, 3300, 3140", [[("CS", 2110), ("CS", 3300), ("CS", 3140)]]),
            ("CS 2110 or INFO 3300", [[("CS", 2110)], [("INFO", 3300)]]),
            ("MATH 2210, 2230, 2310, or 2940", [[("MATH", 2210), ("MATH", 2230), ("MATH", 2310)], [("MATH", 2940)]])]

    for test,answer in tests:
        result=parse(test)
        if result==answer:
            print('GOOD: {0} =&gt; {1}'.format(test,answer))
        else:
            print('ERROR: {0} =&gt; {1} != {2}'.format(test,result,answer))
            break
</snippet></ROW><ROW><id>2945415</id><snippet>GOOD: CS 2110 =&gt; [[('CS', 2110)]]
GOOD: CS 2110 and INFO 3300 =&gt; [[('CS', 2110), ('INFO', 3300)]]
GOOD: CS 2110, INFO 3300 =&gt; [[('CS', 2110), ('INFO', 3300)]]
GOOD: CS 2110, 3300, 3140 =&gt; [[('CS', 2110), ('CS', 3300), ('CS', 3140)]]
GOOD: CS 2110 or INFO 3300 =&gt; [[('CS', 2110)], [('INFO', 3300)]]
GOOD: MATH 2210, 2230, 2310, or 2940 =&gt; [[('MATH', 2210), ('MATH', 2230), ('MATH', 2310)], [('MATH', 2940)]]
</snippet></ROW><ROW><id>2945614</id><snippet>dict</snippet></ROW><ROW><id>2945614</id><snippet>display_x</snippet></ROW><ROW><id>2945614</id><snippet>display_y</snippet></ROW><ROW><id>2945614</id><snippet>named_arrays = {
  "X": array_X,
  "Y": array_Y,
  "E": array_E,
  ...
}

return (named_arrays[display_x], named_arrays[display_y])
</snippet></ROW><ROW><id>2946280</id><snippet>cPickle.loads</snippet></ROW><ROW><id>2946280</id><snippet>cPickle.dumps</snippet></ROW><ROW><id>2946280</id><snippet>dumps</snippet></ROW><ROW><id>2946280</id><snippet>latin-1</snippet></ROW><ROW><id>2946280</id><snippet>utf-8</snippet></ROW><ROW><id>2946280</id><snippet>ascii</snippet></ROW><ROW><id>2946280</id><snippet>utf-16</snippet></ROW><ROW><id>2946280</id><snippet>gem</snippet></ROW><ROW><id>2946280</id><snippet>value</snippet></ROW><ROW><id>2946280</id><snippet>cPickle.dumps</snippet></ROW><ROW><id>2946481</id><snippet>class MyModel(models.Model):

    # your fields....

    class Meta:
        verbose_name = 'Activity'
        verbose_name_plural = 'Activities'
</snippet></ROW><ROW><id>2946499</id><snippet>Object.getOwnPropertyNames</snippet></ROW><ROW><id>2946499</id><snippet>Object.getOwnPropertyNames({a: 10, b: 2});
</snippet></ROW><ROW><id>2946499</id><snippet>["b", "a"]</snippet></ROW><ROW><id>2946499</id><snippet>Object.getOwnPropertyNames(Math);
</snippet></ROW><ROW><id>2946499</id><snippet>["LN10", "PI", "E", "LOG10E", "SQRT2", "LOG2E", "SQRT1_2", "LN2", "cos", "pow", "log", "tan", "sqrt", "ceil", "asin", "abs", "max", "exp", "atan2", "random", "round", "floor", "acos", "atan", "min", "sin"]</snippet></ROW><ROW><id>2946555</id><snippet>&lt;</snippet></ROW><ROW><id>2946555</id><snippet>&gt;</snippet></ROW><ROW><id>2946555</id><snippet>bisect</snippet></ROW><ROW><id>2946555</id><snippet>from collections import defaultdict
from bisect import bisect_left

def count_intervals(sequence, intervals):
    count = defaultdict(int)
    intervals.sort()
    for item in sequence:
        pos = bisect_left(intervals, item)
        if pos == len(intervals):
            count[None] += 1
        else:
            count[intervals[pos]] += 1
    return count

data = [4,4,1,18,2,15,6,14,2,16,2,17,12,3,12,4,15,5,17]
print count_intervals(data, [10, 20])
</snippet></ROW><ROW><id>2946555</id><snippet>defaultdict(&lt;type 'int'&gt;, {10: 10, 20: 9})
</snippet></ROW><ROW><id>2946647</id><snippet>elif</snippet></ROW><ROW><id>2946647</id><snippet>return</snippet></ROW><ROW><id>2946647</id><snippet>iterated</snippet></ROW><ROW><id>2946647</id><snippet>return self.iterated(n/2)</snippet></ROW><ROW><id>2946647</id><snippet>return</snippet></ROW><ROW><id>2946647</id><snippet>None</snippet></ROW><ROW><id>2946647</id><snippet>length</snippet></ROW><ROW><id>2946647</id><snippet>def iterated(n):
    if n==1:
        return 1
    elif n%2==0:
        return 1 + iterated(n/2)
    else:
        return 1 + iterated(3*n+1)

print(iterated(5))
</snippet></ROW><ROW><id>2946712</id><snippet>&gt;&gt;&gt; uc = u'aäöüb'
&gt;&gt;&gt; uc.encode('ascii', 'ignore')
'ab'
</snippet></ROW><ROW><id>2946728</id><snippet>&lt;link rel='stylesheet' href='../css/stylesheet.css'&gt;
</snippet></ROW><ROW><id>2946852</id><snippet>webapp</snippet></ROW><ROW><id>2946852</id><snippet>if</snippet></ROW><ROW><id>2946852</id><snippet>else</snippet></ROW><ROW><id>2946852</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.1')
</snippet></ROW><ROW><id>2946852</id><snippet>elseif</snippet></ROW><ROW><id>2946852</id><snippet>elif</snippet></ROW><ROW><id>2946852</id><snippet>if</snippet></ROW><ROW><id>2946852</id><snippet>else</snippet></ROW><ROW><id>2946904</id><snippet>&gt;&gt;&gt; from heapq import nlargest
&gt;&gt;&gt; items = [100, 300, 200, 400]
&gt;&gt;&gt; indexes = [0, 1, 2, 3]
&gt;&gt;&gt; nlargest(2, indexes, key=lambda i: items[i])
[3, 1]
</snippet></ROW><ROW><id>2946933</id><snippet>freeze</snippet></ROW><ROW><id>2946933</id><snippet>Tools</snippet></ROW><ROW><id>2947881</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a[:0] = [4]
&gt;&gt;&gt; a
[4, 1, 2, 3]
</snippet></ROW><ROW><id>2947881</id><snippet>a[:0]</snippet></ROW><ROW><id>2947881</id><snippet>a</snippet></ROW><ROW><id>2947881</id><snippet>&gt;&gt;&gt; a[1:1] = [6,7]
&gt;&gt;&gt; a
[4, 6, 7, 1, 2, 3]
</snippet></ROW><ROW><id>2948109</id><snippet>import optparse

parser = optparse.OptionParser()
parser.add_option("-f", "--filename", metavar="FILE", dest="input_file", action="append")
options, args = parser.parse_args()
if options.input_file:
    args.extend(options.input_file)

for arg in args:
    process_file(arg)
</snippet></ROW><ROW><id>2948109</id><snippet>args</snippet></ROW><ROW><id>2948109</id><snippet>-f</snippet></ROW><ROW><id>2948109</id><snippet>--filename</snippet></ROW><ROW><id>2948109</id><snippet>args</snippet></ROW><ROW><id>2948546</id><snippet>signal.alarm</snippet></ROW><ROW><id>2948553</id><snippet>#!/usr/bin/env python2.4
'''Simple test of Python scoping rules'''

def enclosing():
    myvariable = 'ooh this worked'

    def myfunction():
         print 'Hope this works: ' + myvariable

    myfunction()

if __name__ == '__main__':
    enclosing()
</snippet></ROW><ROW><id>2948653</id><snippet>required=False</snippet></ROW><ROW><id>2948653</id><snippet>clean()</snippet></ROW><ROW><id>2949140</id><snippet>hwnd</snippet></ROW><ROW><id>2949140</id><snippet>WindowsText</snippet></ROW><ROW><id>2949140</id><snippet>hwnd</snippet></ROW><ROW><id>2949140</id><snippet>EnumChildWindows</snippet></ROW><ROW><id>2949140</id><snippet>hwnd</snippet></ROW><ROW><id>2949140</id><snippet>hwnd</snippet></ROW><ROW><id>2949140</id><snippet>EnumChildWindows</snippet></ROW><ROW><id>2949140</id><snippet>import win32gui

MAIN_HWND = 0

def is_win_ok(hwnd, starttext):
    s = win32gui.GetWindowText(hwnd)
    if s.startswith(starttext):
            print s
            global MAIN_HWND
            MAIN_HWND = hwnd
            return None
    return 1


def find_main_window(starttxt):
    global MAIN_HWND
    win32gui.EnumChildWindows(0, is_win_ok, starttxt)
    return MAIN_HWND


def winfun(hwnd, lparam):
    s = win32gui.GetWindowText(hwnd)
    if len(s) &gt; 3:
        print("winfun, child_hwnd: %d   txt: %s" % (hwnd, s))
    return 1

def main():
    main_app = 'EditPlus'
    hwnd = win32gui.FindWindow(None, main_app)
    print hwnd
    if hwnd &lt; 1:
        hwnd = find_main_window(main_app)
    print hwnd
    if hwnd:
        win32gui.EnumChildWindows(hwnd, winfun, None)

main()
</snippet></ROW><ROW><id>2949369</id><snippet>HtmlTemplate</snippet></ROW><ROW><id>2949369</id><snippet>if __name__ == "__main__":
    objx=HtmlTemplate()
    objx.Header()
    objx.Body()
    objx.Form()
    objx.Footer()
    objx.CloseHtml()
</snippet></ROW><ROW><id>2949497</id><snippet>abcd.zip</snippet></ROW><ROW><id>2949497</id><snippet>unzip abcd.zip</snippet></ROW><ROW><id>2949648</id><snippet>&gt;&gt;&gt; mylogfile = open("test10.txt", "w+")
&gt;&gt;&gt; print &gt;&gt; mylogfile, 'hola'
&gt;&gt;&gt; mylogfile.flush()        #just in case
&gt;&gt;&gt; print mylogfile.read()
                             #nothing because I'am at the end of the file
&gt;&gt;&gt; mylogfile.seek(0)
&gt;&gt;&gt; print mylogfile.read()
hola
</snippet></ROW><ROW><id>2949648</id><snippet>&gt;&gt;&gt; mylogfile = open("test.txt", "w")
&gt;&gt;&gt; print &gt;&gt; mylogfile, 'hola' 
&gt;&gt;&gt; mylogfile.close()
&gt;&gt;&gt; mylogfile = open("test.txt", "r")
&gt;&gt;&gt; print mylogfile.read()
hola
</snippet></ROW><ROW><id>2949961</id><snippet>triggered</snippet></ROW><ROW><id>2949961</id><snippet>QObject::sender</snippet></ROW><ROW><id>2950027</id><snippet>sys.exit('Error!')
</snippet></ROW><ROW><id>2950465</id><snippet>line = line.replace(' ', '')
</snippet></ROW><ROW><id>2950584</id><snippet>import</snippet></ROW><ROW><id>2950584</id><snippet>sys.modules</snippet></ROW><ROW><id>2950666</id><snippet>PyGILState_Ensure()</snippet></ROW><ROW><id>2950666</id><snippet>PyGILState_Release()</snippet></ROW><ROW><id>2950666</id><snippet>PyGILState_STATE gstate;
gstate = PyGILState_Ensure();

/* Perform Python actions here.  */
result = CallSomeFunction();
/* evaluate result */

/* Release the thread. No Python API allowed beyond this point. */
PyGILState_Release(gstate)
</snippet></ROW><ROW><id>2950666</id><snippet>Py_BEGIN_ALLOW_THREADS</snippet></ROW><ROW><id>2950666</id><snippet>Py_END_ALLOW_THREADS</snippet></ROW><ROW><id>2950685</id><snippet>echo</snippet></ROW><ROW><id>2950685</id><snippet>create_engine()</snippet></ROW><ROW><id>2950685</id><snippet>logging</snippet></ROW><ROW><id>2950685</id><snippet>import logging
logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
</snippet></ROW><ROW><id>2951067</id><snippet>string.split</snippet></ROW><ROW><id>2951067</id><snippet>" ".join(list)</snippet></ROW><ROW><id>2951067</id><snippet>import re
import timeit

s = "this    is   a     string"

def do_regex():
    for x in xrange(100000):
        a = re.sub(r'\s+', ' ', s)

def do_join():
    for x in xrange(100000):
        a = " ".join(s.split())


if __name__ == '__main__':
    t1 = timeit.Timer(do_regex).timeit(number=5)
    print "Regex: ", t1
    t2 = timeit.Timer(do_join).timeit(number=5)
    print "Join: ", t2


$ python revsjoin.py 
Regex:  2.70868492126
Join:  0.333452224731
</snippet></ROW><ROW><id>2951067</id><snippet>sub</snippet></ROW><ROW><id>2951067</id><snippet>re.sub</snippet></ROW><ROW><id>2951067</id><snippet>def do_regex_compile():
  pattern = re.compile(r'\s+')
  for x in xrange(100000):
    # Don't do this
    # a = re.sub(pattern, ' ', s)
    a = pattern.sub(' ', s)

$ python revsjoin.py  
Regex:  2.72924399376
Compiled Regex:  1.5852200985
Join:  0.33763718605
</snippet></ROW><ROW><id>2951132</id><snippet>bar</snippet></ROW><ROW><id>2951132</id><snippet>bar</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951132</id><snippet>foo = "bar"</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951132</id><snippet>"bar"</snippet></ROW><ROW><id>2951132</id><snippet>"foo"</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951132</id><snippet>foo</snippet></ROW><ROW><id>2951199</id><snippet>os.system("/path/to/myapp")</snippet></ROW><ROW><id>2951722</id><snippet>a if b else c</snippet></ROW><ROW><id>2951722</id><snippet>a</snippet></ROW><ROW><id>2951722</id><snippet>b</snippet></ROW><ROW><id>2951722</id><snippet>c</snippet></ROW><ROW><id>2951722</id><snippet>&gt;&gt;&gt; [a if a else 2 for a in [0,1,0,3]]
[2, 1, 2, 3]
</snippet></ROW><ROW><id>2951722</id><snippet>table = ''.join(chr(index) if index in ords_to_keep else replace_with
                for index in xrange(15))
</snippet></ROW><ROW><id>2951850</id><snippet>line</snippet></ROW><ROW><id>2951850</id><snippet>print line,
</snippet></ROW><ROW><id>2952037</id><snippet>print</snippet></ROW><ROW><id>2952037</id><snippet>__future__</snippet></ROW><ROW><id>2952130</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>2952476</id><snippet>settings.py</snippet></ROW><ROW><id>2952709</id><snippet>def test_fact(self):
    tests = [(1,1), (2,2), (3,6), (4,24), (5,120)]
    for n,f in tests:
        self.assertEqual(fact(n), f)
</snippet></ROW><ROW><id>2952829</id><snippet>os.system()</snippet></ROW><ROW><id>2952829</id><snippet>sqlite3</snippet></ROW><ROW><id>2952829</id><snippet>import sqlite3
import csv

con = sqlite3.connect('mydatabase.db')
outfile = open('mydump.csv', 'wb')
outcsv = csv.writer(outfile)

cursor = con.execute('select * from mytable')

# dump column titles (optional)
outcsv.writerow(x[0] for x in cursor.description)
# dump rows
outcsv.writerows(cursor.fetchall())

outfile.close()
</snippet></ROW><ROW><id>2952832</id><snippet>cursor.execute("select user_name from users where user_id=? for xml auto", userid)
xml = cursor.fetchone()
if xml:
    # do your xsl transformation and other processing here...
</snippet></ROW><ROW><id>2952832</id><snippet>cursor.execute("select user_name from users where user_id=? for xml auto", userid)
rows = cursor.fetchall()
xml = ''.join(row[0] for row in rows)
</snippet></ROW><ROW><id>2952906</id><snippet>locale.setlocale( locale.LC_ALL, 'en_CA.UTF-8' )
</snippet></ROW><ROW><id>2952906</id><snippet>locale.setlocale( locale.LC_ALL, '' )
</snippet></ROW><ROW><id>2952906</id><snippet>''</snippet></ROW><ROW><id>2952906</id><snippet>LANG</snippet></ROW><ROW><id>2952982</id><snippet>SELECT legid, version, segmentid, html, node_t, start, number, title 
    from ((segments inner join position using (segmentid))  
    left outer join titles using (legid, segmentid)) as LT 
    left outer join numbers using (start, legid, version);
</snippet></ROW><ROW><id>2953343</id><snippet>def intersection(first, *others):
    return set(first).intersection(*others)
</snippet></ROW><ROW><id>2953461</id><snippet>5d4h2s</snippet></ROW><ROW><id>2953461</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "5d4h2s"
&gt;&gt;&gt; p = re.compile("([0-9])([a-z])")
&gt;&gt;&gt; for m in p.findall(s):
...   print m
... 
('5', 'd')
('4', 'h')
('2', 's')
</snippet></ROW><ROW><id>2953461</id><snippet>&gt;&gt;&gt; p = re.compile("([0-9]*)([a-z])")
</snippet></ROW><ROW><id>2953461</id><snippet>&gt;&gt;&gt; s = "5d14h2s"
</snippet></ROW><ROW><id>2953461</id><snippet>&gt;&gt;&gt; p = re.compile("([\d]+)([dhms])")
</snippet></ROW><ROW><id>2953545</id><snippet>re</snippet></ROW><ROW><id>2953545</id><snippet>(?:\s*(\w+)\s*)</snippet></ROW><ROW><id>2953545</id><snippet>&gt;&gt;&gt; m = re.match(r"^\s*(\w+)\s*\|(?:\s*(\w+)\s*)*$", " network | level1 level2 leveln ")
&gt;&gt;&gt; m
&lt;_sre.SRE_Match object at 0x00F217B8&gt;
&gt;&gt;&gt; m.groups()
('network', 'leveln')
</snippet></ROW><ROW><id>2953545</id><snippet>&gt;&gt;&gt; m = re.match(r"^\s*(\w+)\s*\|((?:\s*\w+\s*)*)$", " network | level1 level2 leveln ")
&gt;&gt;&gt; m.groups()
('network', ' level1 level2 leveln ')
&gt;&gt;&gt; m.groups()[1].strip().split()
['level1', 'level2', 'leveln']
</snippet></ROW><ROW><id>2953756</id><snippet>&gt;&gt;&gt; a = '1,000,000'
&gt;&gt;&gt; int(a.replace(',', ''))
1000000
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2953843</id><snippet>'C:/mydir'
</snippet></ROW><ROW><id>2953843</id><snippet>'C:\\mydir'
</snippet></ROW><ROW><id>2953843</id><snippet>r'C:\mydir'
</snippet></ROW><ROW><id>2953843</id><snippet>os.path</snippet></ROW><ROW><id>2953843</id><snippet>os.path.join(mydir, myfile)
</snippet></ROW><ROW><id>2953851</id><snippet>os.path.expanduser(path)</snippet></ROW><ROW><id>2953851</id><snippet>os.chdir("~/Desktop/testdir/")</snippet></ROW><ROW><id>2953851</id><snippet>$HOME</snippet></ROW><ROW><id>2953888</id><snippet>#-*- coding: xxx -*-</snippet></ROW><ROW><id>2953888</id><snippet>str</snippet></ROW><ROW><id>2953888</id><snippet>unicode()</snippet></ROW><ROW><id>2953888</id><snippet>unicode</snippet></ROW><ROW><id>2953888</id><snippet>title = product[1].decode("UTF-8")
</snippet></ROW><ROW><id>2953979</id><snippet>&gt;&gt;&gt; def getOverlap(a, b):
...     return max(0, min(a[1], b[1]) - max(a[0], b[0]))

&gt;&gt;&gt; getOverlap([10, 25], [20, 38])
5
&gt;&gt;&gt; getOverlap([10, 15], [20, 38])
0
</snippet></ROW><ROW><id>2954373</id><snippet>property</snippet></ROW><ROW><id>2954373</id><snippet>def addprop(inst, name, method):
  cls = type(inst)
  if not cls.hasattr('__perinstance'):
    cls = type(cls.__name__, (cls,), {})
    cls.__perinstance = True
  setattr(cls, name, property(method))
</snippet></ROW><ROW><id>2954373</id><snippet>addprop</snippet></ROW><ROW><id>2954373</id><snippet>property</snippet></ROW><ROW><id>2954373</id><snippet>object</snippet></ROW><ROW><id>2954448</id><snippet>cookiejar</snippet></ROW><ROW><id>2954448</id><snippet>MozillaCookieJar</snippet></ROW><ROW><id>2954448</id><snippet>LWPCookieJar</snippet></ROW><ROW><id>2954448</id><snippet>import cookielib
import os
import urllib
import urllib2

# set these to whatever your fb account is
fb_username = "your@facebook.login"
fb_password = "secretpassword"

cookie_filename = "facebook.cookies"

class WebGamePlayer(object):

    def __init__(self, login, password):
        """ Start up... """
        self.login = login
        self.password = password

        self.cj = cookielib.MozillaCookieJar(cookie_filename)
        if os.access(cookie_filename, os.F_OK):
            self.cj.load()
        self.opener = urllib2.build_opener(
            urllib2.HTTPRedirectHandler(),
            urllib2.HTTPHandler(debuglevel=0),
            urllib2.HTTPSHandler(debuglevel=0),
            urllib2.HTTPCookieProcessor(self.cj)
        )
        self.opener.addheaders = [
            ('User-agent', ('Mozilla/4.0 (compatible; MSIE 6.0; '
                           'Windows NT 5.2; .NET CLR 1.1.4322)'))
        ]

        # need this twice - once to set cookies, once to log in...
        self.loginToFacebook()
        self.loginToFacebook()

        self.cj.save()

    def loginToFacebook(self):
        """
        Handle login. This should populate our cookie jar.
        """
        login_data = urllib.urlencode({
            'email' : self.login,
            'pass' : self.password,
        })
        response = self.opener.open("https://login.facebook.com/login.php", login_data)
        return ''.join(response.readlines())

test = WebGamePlayer(fb_username, fb_password)
</snippet></ROW><ROW><id>2954448</id><snippet>facebook.cookies</snippet></ROW><ROW><id>2954490</id><snippet>.readlines()</snippet></ROW><ROW><id>2954490</id><snippet>def scoreEvalFromMafLine(mafLine):
    theScore, theEval = None, None
    for word in mafLine.split():
        if word.startswith("score="):
            theScore = word.split('=')[1]
        if word.startswith("expect="):
            theEval  = word.split('=')[1]

    if theScore is None or theEval is None:
        raise Exception("Invalid line: '%s'" % line)

    return (theScore, theEval)
</snippet></ROW><ROW><id>2954541</id><snippet>#! /bin/bash
python path/to/python/program.py &amp;
</snippet></ROW><ROW><id>2954541</id><snippet>#! /bin/bash
python path/to/python/program.py &gt; results.txt 2&gt; errors.log &amp;
</snippet></ROW><ROW><id>2954686</id><snippet>128 * [0]</snippet></ROW><ROW><id>2954686</id><snippet>&gt;&gt;&gt; 3 * [0]
[0, 0, 0]
</snippet></ROW><ROW><id>2954686</id><snippet>ord(letter)</snippet></ROW><ROW><id>2954686</id><snippet>'0'</snippet></ROW><ROW><id>2954686</id><snippet>'0'</snippet></ROW><ROW><id>2954686</id><snippet>counts[48]</snippet></ROW><ROW><id>2954788</id><snippet>ctypes</snippet></ROW><ROW><id>2954788</id><snippet>fastlz.so</snippet></ROW><ROW><id>2954788</id><snippet>.dll</snippet></ROW><ROW><id>2954788</id><snippet>ctypes</snippet></ROW><ROW><id>2954788</id><snippet>ctypes</snippet></ROW><ROW><id>2955499</id><snippet>checkbox1.set_sensitive(False)
checkbox1.set_active(True)
</snippet></ROW><ROW><id>2955789</id><snippet>*.py</snippet></ROW><ROW><id>2955789</id><snippet>*.pyc</snippet></ROW><ROW><id>2955789</id><snippet>python</snippet></ROW><ROW><id>2955789</id><snippet>#! /usr/bin/env python</snippet></ROW><ROW><id>2955789</id><snippet>chmod +x script.py</snippet></ROW><ROW><id>2955789</id><snippet>./scipt.py -f</snippet></ROW><ROW><id>2955969</id><snippet>import struct
# ...
data['id'], data['time1'], data['time2'] = struct.unpack("&lt;HII", string)
</snippet></ROW><ROW><id>2955969</id><snippet>&lt;</snippet></ROW><ROW><id>2955969</id><snippet>H</snippet></ROW><ROW><id>2955969</id><snippet>I</snippet></ROW><ROW><id>2956229</id><snippet>s="145.00694,-37.80421,9 145.00686,-37.80382,9 145.00595,-37.8035,16 145.00586,37.80301,16"

lines = s.split(' ') # each line is separated by ' '
for line in lines:
    a,b,c=line.split(',') # three parts, separated by ','
    print a,b
</snippet></ROW><ROW><id>2956442</id><snippet>notify::visible</snippet></ROW><ROW><id>2956442</id><snippet>show</snippet></ROW><ROW><id>2956442</id><snippet>dialog.emit('show')
</snippet></ROW><ROW><id>2956442</id><snippet>notify::visible</snippet></ROW><ROW><id>2956550</id><snippet>import re
s = "Hi there @guy"
p = re.search(r'@(\w+)', s)
print p.group(1)
</snippet></ROW><ROW><id>2956550</id><snippet>s = "Hi there @guy "</snippet></ROW><ROW><id>2956550</id><snippet>s = "Hi there @guy,"</snippet></ROW><ROW><id>2956550</id><snippet>s = "Hi there @guy and"</snippet></ROW><ROW><id>2956550</id><snippet>s = "Hi there @guy22"</snippet></ROW><ROW><id>2956550</id><snippet>s = "Hi there @22guy"</snippet></ROW><ROW><id>2956997</id><snippet>time.mktime()</snippet></ROW><ROW><id>2956997</id><snippet>calendar.timegm()</snippet></ROW><ROW><id>2957131</id><snippet>import threading
from threading import Thread

def func1():
    print 'Working'

def func2():
    print 'Working'

if __name__ == '__main__':
    Thread(target = func1).start()
    Thread(target = func2).start()
</snippet></ROW><ROW><id>2957181</id><snippet>soup.findAll(text=True)</snippet></ROW><ROW><id>2957181</id><snippet>&gt;&gt;&gt; txt = """\
&lt;p&gt;Red&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Blue&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Yellow&lt;/p&gt;
&lt;p&gt;Light &lt;b&gt;green&lt;/b&gt;&lt;/p&gt;
"""
&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup.__version__
'3.0.7a'
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(txt)
&gt;&gt;&gt; for node in soup.findAll('p'):
    print ''.join(node.findAll(text=True))

Red
Blue
Yellow
Light green
</snippet></ROW><ROW><id>2957390</id><snippet>'.'</snippet></ROW><ROW><id>2957390</id><snippet>re.split</snippet></ROW><ROW><id>2957390</id><snippet>list</snippet></ROW><ROW><id>2957390</id><snippet>re.findall</snippet></ROW><ROW><id>2957390</id><snippet>sequenceOfAlphabets = re.findall( '.', string.uppercase )
</snippet></ROW><ROW><id>2957390</id><snippet>['A', 'B', 'C', .... ,'Z']</snippet></ROW><ROW><id>2957405</id><snippet>Column('mtype_id', ForeignKey('mtypes.mtype_id')),
</snippet></ROW><ROW><id>2957405</id><snippet>Column('mtype_id', None, ForeignKey('mtypes.mtype_id')),
</snippet></ROW><ROW><id>2958104</id><snippet>A</snippet></ROW><ROW><id>2958104</id><snippet>B</snippet></ROW><ROW><id>2958104</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; A = [['ab', 'cd', 'ef', '0', '567'], ['ghy5'], ['pop', 'eye']]
&gt;&gt;&gt; B = [['ab'], ['hi'], ['op'], ['ej']]
&gt;&gt;&gt; A = set(chain(*A))
&gt;&gt;&gt; B = set(chain(*B))
&gt;&gt;&gt; A-B
set(['ghy5', 'eye', 'ef', 'pop', 'cd', '0', '567'])
</snippet></ROW><ROW><id>2958104</id><snippet>A</snippet></ROW><ROW><id>2958104</id><snippet>&gt;&gt;&gt; remove = set(chain(*B))
&gt;&gt;&gt; A = [[x for x in S if x not in remove] for S in A].
</snippet></ROW><ROW><id>2958104</id><snippet>A</snippet></ROW><ROW><id>2958104</id><snippet>B</snippet></ROW><ROW><id>2958183</id><snippet>assert False</snippet></ROW><ROW><id>2958183</id><snippet>self.assertFalse()</snippet></ROW><ROW><id>2958187</id><snippet>handlers:

- url: /foo/.*
  script: foo.py

- url: /bar/.*
  script: bar.py
</snippet></ROW><ROW><id>2958187</id><snippet>('/[^/]+/', MainPage),
('/[^/]+/logout', LogoutPage),
('/[^/]+/login_response', LoginHandler)
</snippet></ROW><ROW><id>2958717</id><snippet>&gt;&gt;&gt; 1 / 2
0
</snippet></ROW><ROW><id>2958717</id><snippet>float</snippet></ROW><ROW><id>2958717</id><snippet>&gt;&gt;&gt; float(10 - 20) / (100 - 10)
-0.1111111111111111
</snippet></ROW><ROW><id>2958717</id><snippet>from __future__ import division</snippet></ROW><ROW><id>2958717</id><snippet>/</snippet></ROW><ROW><id>2958717</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; (10 - 20) / (100 - 10)
-0.1111111111111111
</snippet></ROW><ROW><id>2958840</id><snippet>d = {}
with open("data", 'rb') as data:
  for line in data:
    key, val = line.split(' ')
    d[key] = float(val)

ids = [max(sublist, key=lambda k: d[k]) for sublist in li]
</snippet></ROW><ROW><id>2958840</id><snippet>ids = []
for sublist in li:
  subnums = map(lambda x: d[x], sublist)
  ids.append(sublist[subnums.index(max(subnums))])
</snippet></ROW><ROW><id>2958872</id><snippet>open(filename,"rb")</snippet></ROW><ROW><id>2959017</id><snippet>sys.modules</snippet></ROW><ROW><id>2959017</id><snippet>import cpapp</snippet></ROW><ROW><id>2959017</id><snippet>sys.modules</snippet></ROW><ROW><id>2959017</id><snippet>__import__</snippet></ROW><ROW><id>2959017</id><snippet>cpapp.py</snippet></ROW><ROW><id>2959017</id><snippet>lib/reprconf.py</snippet></ROW><ROW><id>2959694</id><snippet>&gt;&gt;&gt; email = ['apples','bananas','cats','dogs','elephants','fish','gee']
&gt;&gt;&gt; start, stop = 'ban', 'ele'
&gt;&gt;&gt; ind_s = next(i for i, j in enumerate(email) if j.startswith(start))
&gt;&gt;&gt; ind_e = next(i for i, j in enumerate(email) if j.startswith(stop) and i &gt; ind_s)
&gt;&gt;&gt; email[ind_s+1:ind_e]
['cats', 'dogs']
</snippet></ROW><ROW><id>2959694</id><snippet>&gt;&gt;&gt; def get_ind(prefix, prev=-1):
    it = (i for i, j in enumerate(email) if i &gt; prev and j.startswith(prefix))
    return next(it, None)


&gt;&gt;&gt; start = get_ind('ban')
&gt;&gt;&gt; start = -1 if start is None else start
&gt;&gt;&gt; stop = get_ind('ele', start)
&gt;&gt;&gt; email[start+1:stop]
['cats', 'dogs']
</snippet></ROW><ROW><id>2959955</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; sys.modules[__name__]
&lt;module '__main__' from 'C:\Python26\Lib\idlelib\idle.pyw'&gt;
&gt;&gt;&gt; inspect.getsourcefile(sys.modules[__name__])
'C:\\Python26\\Lib\\idlelib\\idle.pyw'
</snippet></ROW><ROW><id>2959955</id><snippet># read in the source code of itself
srcfile = inspect.getsourcefile(sys.modules[__name__])
f = open(srcfile, 'r')
src = f.read()
f.close()
</snippet></ROW><ROW><id>2959955</id><snippet>'C:\\Python26\\Lib\\idlelib\\idle.pyw'</snippet></ROW><ROW><id>2960431</id><snippet>yum install unixODBC-devel</snippet></ROW><ROW><id>2960484</id><snippet>import xml.etree.ElementTree as et

doc = """&lt;TD&gt;
  Textline1&lt;BR/&gt;
  Textline2&lt;BR/&gt;
  Textline3
&lt;/TD&gt;
"""

e = et.fromstring(doc)

items = []
for x in e.getiterator():
    if x.text is not None:
        items.append(x.text.strip())
    if x.tail is not None:
        items.append(x.tail.strip())

doc2 = et.Element("lines")
for i in items:
    l=et.SubElement(doc2, "line")
    l.text = i

print(et.tostring(doc2))
</snippet></ROW><ROW><id>2960589</id><snippet>SELECT... WHERE date &lt;= NOW() &amp;&amp; date &gt;= ( NOW() - 90000 )</snippet></ROW><ROW><id>2960665</id><snippet>import urllib2
import cookielib

cookie_jar = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))

#Get the first page with the cookie, installing it in the cookie jar automatically
opener.open("http://yoursite.com/set-cookie")

#Get the second page, passing on the cookie in the cookiejar.
opener.open("http://yoursite.com/other")

#Alternatively, you can also install this opener as the default urllib2 opener:
urllib2.install_opener(opener)
#Now all urllib2 requests will use cookies:
urllib2.urlopen("http://yoursite.com/other")
</snippet></ROW><ROW><id>2960791</id><snippet>plot.savefig('hanning(%d).pdf' % num)
</snippet></ROW><ROW><id>2960791</id><snippet>%</snippet></ROW><ROW><id>2960791</id><snippet>%d</snippet></ROW><ROW><id>2960891</id><snippet>c = MyController()
c.index()
</snippet></ROW><ROW><id>2960891</id><snippet>index</snippet></ROW><ROW><id>2960891</id><snippet>self</snippet></ROW><ROW><id>2960891</id><snippet>c</snippet></ROW><ROW><id>2960891</id><snippet>self</snippet></ROW><ROW><id>2960984</id><snippet>def take(dictionary, key):
    return {key: dictionary[key]}

R = take(D, k)
</snippet></ROW><ROW><id>2960988</id><snippet>(?:@|#)\w+</snippet></ROW><ROW><id>2960988</id><snippet>[@#]\w+</snippet></ROW><ROW><id>2960988</id><snippet>findall</snippet></ROW><ROW><id>2960988</id><snippet>findall</snippet></ROW><ROW><id>2960988</id><snippet>((@|#)\w+)
|\___/   |
|group 2 |     # Read about groups to understand
\________/     # how they're defined and numbered/named
 group 1
</snippet></ROW><ROW><id>2960988</id><snippet>p = re.compile(r'((@|#)\w+)')
m = p.match('@tweet')
print m.group(1)
# @tweet
print m.group(2)
# @
</snippet></ROW><ROW><id>2960988</id><snippet>re</snippet></ROW><ROW><id>2960988</id><snippet>findall</snippet></ROW><ROW><id>2960988</id><snippet>str = 'lala @tweet boo #this &amp;that @foo#bar'

print(re.findall(r'((@|#)\w+)', str))
# [('@tweet', '@'), ('#this', '#'), ('@foo', '@'), ('#bar', '#')]
</snippet></ROW><ROW><id>2960988</id><snippet>findall</snippet></ROW><ROW><id>2960988</id><snippet>print(re.findall(r'(@|#)\w+', str))
# ['@', '#', '@', '#']
</snippet></ROW><ROW><id>2960988</id><snippet>findall</snippet></ROW><ROW><id>2960988</id><snippet>print(re.findall(r'(?:@|#)\w+', str))
# ['@tweet', '#this', '@foo', '#bar']

print(re.findall(r'[@#]\w+', str))
# ['@tweet', '#this', '@foo', '#bar']
</snippet></ROW><ROW><id>2960988</id><snippet>re</snippet></ROW><ROW><id>2961015</id><snippet>sys.stdout</snippet></ROW><ROW><id>2961015</id><snippet>from sys import stdout
mapArray = [["#","#","#"],["#","#","#"],["#","#","#"]]
for row in mapArray:
    for cell in row:
            stdout.write(cell)
    stdout.write("\n")
stdout.write("\n")
</snippet></ROW><ROW><id>2961015</id><snippet>"A space is written before each object is (converted and) written, unless the output system believes it is positioned at the beginning of a line."</snippet></ROW><ROW><id>2961015</id><snippet>sys.stdout</snippet></ROW><ROW><id>2961077</id><snippet>shelve</snippet></ROW><ROW><id>2961077</id><snippet>import shelve

T='Hiya'
val=[1,2,3]

filename='/tmp/shelve.out'
my_shelf = shelve.open(filename,'n') # 'n' for new

for key in dir():
    try:
        my_shelf[key] = globals()[key]
    except TypeError:
        #
        # __builtins__, my_shelf, and imported modules can not be shelved.
        #
        print('ERROR shelving: {0}'.format(key))
my_shelf.close()
</snippet></ROW><ROW><id>2961077</id><snippet>my_shelf = shelve.open(filename)
for key in my_shelf:
    globals()[key]=my_shelf[key]
my_shelf.close()

print(T)
# Hiya
print(val)
# [1, 2, 3]
</snippet></ROW><ROW><id>2961184</id><snippet>&gt;&gt;&gt; list(zip(*arr))[0]
('foo', 'bar')
</snippet></ROW><ROW><id>2961596</id><snippet>class Item(models.Model):
    name = models.CharField(max_length=500)
    startDate = models.DateField("Start Date", unique="true")
    endDate = models.DateField("End Date")     

    def save(self, *args, **kwargs):
        try:
            Item.objects.get(Q(startDate__range=(self.startDate,self.endDate))|Q(endDate__range=(self.sartDate,self.endDate))|Q(startDate__lt=self.startDate,endDate__gt=self.endDate))
            #raise some save error
        except Item.DoesNotExist:
            super(Item,self).save(*args,**kwargs)
</snippet></ROW><ROW><id>2961629</id><snippet>import uuid

unique_filename = uuid.uuid4()
</snippet></ROW><ROW><id>2961997</id><snippet>sum</snippet></ROW><ROW><id>2961997</id><snippet>+</snippet></ROW><ROW><id>2961997</id><snippet>sum([1,2,3]) == 6</snippet></ROW><ROW><id>2961997</id><snippet>sum([1,2,3], 10) == 16</snippet></ROW><ROW><id>2961997</id><snippet>[] + [1,2] + [3,4]</snippet></ROW><ROW><id>2961997</id><snippet>+</snippet></ROW><ROW><id>2961997</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>2961997</id><snippet>sum</snippet></ROW><ROW><id>2961997</id><snippet>sum</snippet></ROW><ROW><id>2961997</id><snippet>0 + [1,2] + [3,4]</snippet></ROW><ROW><id>2961997</id><snippet>sum</snippet></ROW><ROW><id>2961997</id><snippet>def flatten(listOfLists):
    "Flatten one level of nesting"
    return chain.from_iterable(listOfLists)
</snippet></ROW><ROW><id>2961997</id><snippet>itertools.chain</snippet></ROW><ROW><id>2961997</id><snippet>generator</snippet></ROW><ROW><id>2961997</id><snippet>list</snippet></ROW><ROW><id>2961997</id><snippet>list(flatten(my_list_of_lists))</snippet></ROW><ROW><id>2962228</id><snippet>tkinter</snippet></ROW><ROW><id>2962389</id><snippet>globals()["var_name"] = value
</snippet></ROW><ROW><id>2962389</id><snippet>setattr</snippet></ROW><ROW><id>2962389</id><snippet>__name__</snippet></ROW><ROW><id>2962389</id><snippet>import sys
setattr(sys.modules[__name__], "var_name", value)
</snippet></ROW><ROW><id>2962599</id><snippet>glVertex3{dfiX}</snippet></ROW><ROW><id>2962599</id><snippet>glVertex3(x,y,z)</snippet></ROW><ROW><id>2962681</id><snippet>gcd</snippet></ROW><ROW><id>2962681</id><snippet>Python-3.1.2/Lib/fractions.py</snippet></ROW><ROW><id>2962681</id><snippet>def gcd(a, b):
    """Calculate the Greatest Common Divisor of a and b.

    Unless b==0, the result will have the same sign as b (so that when
    b is divided by it, the result comes out positive).
    """
    while b:
        a, b = b, a%b
    return a
</snippet></ROW><ROW><id>2962690</id><snippet>glob</snippet></ROW><ROW><id>2962690</id><snippet>import glob
glob.glob("*.mesh.xml")
</snippet></ROW><ROW><id>2962690</id><snippet>directory = os.path.dirname(obj)
m = MeshExporterApplication(directory)

# you can use absolute pathes in the glob
# to ensure, that you're purging the files in 
# the right directory, e.g. "/tmp/*.mesh.xml"
for f in glob.glob("*.mesh.xml"):
    os.remove(f)
</snippet></ROW><ROW><id>2962786</id><snippet>logging.fileConfig(fname[, defaults])
</snippet></ROW><ROW><id>2962786</id><snippet>{'basedir': BASE_DIR}
</snippet></ROW><ROW><id>2962786</id><snippet>basedir</snippet></ROW><ROW><id>2962786</id><snippet>logging.ini</snippet></ROW><ROW><id>2962786</id><snippet>[SomeSection]
somefile: %(basedir)s/foobar.txt
</snippet></ROW><ROW><id>2962828</id><snippet>for line in fileinput.input(['thefile.txt'], inplace=True):
    print(line.replace('old stuff', 'shiny new stuff'))
</snippet></ROW><ROW><id>2962828</id><snippet>backup='.bk'</snippet></ROW><ROW><id>2962828</id><snippet>thefile.txt.bk</snippet></ROW><ROW><id>2963006</id><snippet>class Hand:
    cards = []
</snippet></ROW><ROW><id>2963006</id><snippet>cards</snippet></ROW><ROW><id>2963006</id><snippet>class Hand {
    static {
        cards = new object[];
    }
}
</snippet></ROW><ROW><id>2963006</id><snippet>class Hand:
    def __init__(self):
        self.cards = []
</snippet></ROW><ROW><id>2963050</id><snippet>blog.get_recent_posts(1)</snippet></ROW><ROW><id>2963050</id><snippet>print</snippet></ROW><ROW><id>2963050</id><snippet>print blog.get_recent_posts(1)['dateCreated']
</snippet></ROW><ROW><id>2963050</id><snippet>print blog.get_recent_posts(1)[0]['dateCreated']
</snippet></ROW><ROW><id>2963155</id><snippet>execute()</snippet></ROW><ROW><id>2963155</id><snippet>execute()</snippet></ROW><ROW><id>2963155</id><snippet>execute()</snippet></ROW><ROW><id>2963155</id><snippet>fetchone()</snippet></ROW><ROW><id>2963155</id><snippet>fetchmany()</snippet></ROW><ROW><id>2963155</id><snippet>fetchall()</snippet></ROW><ROW><id>2963155</id><snippet>cursor.execute('''
    SELECT *, 
        6371*1000 * acos(cos(radians(%s)) * 
        cos(radians(lat)) * cos(radians(lon) - radians(%s)) + 
        sin(radians(%s)) * sin(radians(lat))) as distance 
    FROM 
        poi_table 
    WHERE distance &lt; %s
    ORDER BY distance ASC 
    LIMIT 0, 50''', (latitude, longitude, latitude, radius,))
results = cursor.fetchall()
print results
</snippet></ROW><ROW><id>2963598</id><snippet>import easygui

easygui.msgbox("This is a message!", title="simple gui")
</snippet></ROW><ROW><id>2963619</id><snippet>_Thread__stop()</snippet></ROW><ROW><id>2963823</id><snippet>error_log  /path/to/your/error.log debug;
</snippet></ROW><ROW><id>2963823</id><snippet>debug_connection</snippet></ROW><ROW><id>2963823</id><snippet>events {
  debug_connection 1.2.3.4;
}
</snippet></ROW><ROW><id>2963986</id><snippet>&gt;&gt;&gt; results=[{"s":1,"score":100},{"s":2,"score":101},{"s":3,"score":99},{"s":4,"score":1},{"s":5,"score":1000}]

&gt;&gt;&gt; from operator import itemgetter

&gt;&gt;&gt; sorted(results, key=itemgetter("score"))
[{'s': 4, 'score': 1}, {'s': 3, 'score': 99}, {'s': 1, 'score': 100}, {'s': 2, 'score': 101}, {'s': 5, 'score': 1000}]
</snippet></ROW><ROW><id>2964007</id><snippet>Employees.cleen_all_phone_numbers()</snippet></ROW><ROW><id>2964007</id><snippet>Employee.clean_phone_number()</snippet></ROW><ROW><id>2964007</id><snippet>hrid</snippet></ROW><ROW><id>2964007</id><snippet>O(n)</snippet></ROW><ROW><id>2964007</id><snippet>O(1)</snippet></ROW><ROW><id>2964007</id><snippet>lookup_*</snippet></ROW><ROW><id>2964007</id><snippet>clean_phone_number()</snippet></ROW><ROW><id>2964135</id><snippet>import ctypes
MOUSEEVENTF_MOVE = 0x0001 # mouse move
MOUSEEVENTF_ABSOLUTE = 0x8000 # absolute move
MOUSEEVENTF_MOVEABS = MOUSEEVENTF_MOVE + MOUSEEVENTF_ABSOLUTE

MOUSEEVENTF_LEFTDOWN = 0x0002 # left button down 
MOUSEEVENTF_LEFTUP = 0x0004 # left button up 
MOUSEEVENTF_CLICK = MOUSEEVENTF_LEFTDOWN + MOUSEEVENTF_LEFTUP

def click(x, y):
    #move first
    x = 65536L * x / ctypes.windll.user32.GetSystemMetrics(0) + 1
    y = 65536L * y / ctypes.windll.user32.GetSystemMetrics(1) + 1
    ctypes.windll.user32.mouse_event(MOUSEEVENTF_MOVEABS, x, y, 0, 0)

    #then click
    ctypes.windll.user32.mouse_event(MOUSEEVENTF_CLICK, 0, 0, 0, 0)
</snippet></ROW><ROW><id>2964135</id><snippet>CHILD= None

def the_callback(child_hwnd, regex):
    '''Pass to win32gui.EnumWindows() to check all the opened windows'''
    if re.match(regex, win32gui.GetWindowText(child_hwnd)):
        CHILD= child_hwnd

win32gui.EnumChildWindows(hwnd, the_callback, regex)


if CHILD:
    (x_tl, y_tl, x_br, y_br) = win32gui.GetWindowRect(CHILD)
</snippet></ROW><ROW><id>2964254</id><snippet>foo</snippet></ROW><ROW><id>2964256</id><snippet>from django.utils.translation import ugettext_lazy as _</snippet></ROW><ROW><id>2964544</id><snippet>Q</snippet></ROW><ROW><id>2964545</id><snippet> text(x, y, s, fontdict=None, **kwargs)
</snippet></ROW><ROW><id>2964576</id><snippet>from django.db.models import Q
from itertools import combinations
# this -- the unicorn to be matched with
attr = ['horn_length', 'skin_color', 'average_speed', 'magical', 'affinity']
q = None
for c in combinations(attrs, 3):
    q_ = Q(**{c[0]: getattr(this, c[0])}) &amp; Q(**{c[1]: getattr(this, c[1])}) &amp; Q(**{c[2]: getattr(this, c[2])})
    if q is None:
        q = q_
    else:
        q = q | q_
Unicorn.objects.get(q)           
</snippet></ROW><ROW><id>2965322</id><snippet>ls /dev/disk/by-uuid</snippet></ROW><ROW><id>2965322</id><snippet>blkid</snippet></ROW><ROW><id>2965322</id><snippet>mkfs -t vfat /dev/&lt;your usb drive here&gt;</snippet></ROW><ROW><id>2965450</id><snippet>class MySudsClass():

def sudsFunction(self):

    url = "http://10.10.10.10/mywsdl.wsdl"

    # connects to WSDL file and stores location in variable 'client'
    client = Client(url)

    #I have no address set in the wsdl to the camera I connect to so I set it's location here
    client.options.location = 'http:/10.10.10.11'

    # Create 'xml_value' object to pass as an argument using the 'factory' namespace
    xml_value = client.factory.create('some_value_in_your_xml_body')

    #This send the SOAP request.
    client.service.WSDLFunction(xml_value)
</snippet></ROW><ROW><id>2965450</id><snippet>    # Namespaces to be added to XML sent 
    wsa_ns = ('wsa', 'http://schemas.xmlsoap.org/ws/2004/08/addressing')
    wsdp_ns = ('http://schemas.xmlsoap.orf/ws/2006/02/devprof')

    # Field information for extra XML headers
    message = 'mymessage'
    address_txt = 'myheader_information'

    # Soapheaders to be added to the XML code sent
    # addPrefix allow's you to addc a extra namespace. If not needed remove it.
    message_header = Element('MessageID', ns=wsa_ns).setText(message)
    address_header = Element('Address', ns=wsa_ns).setText(address_txt).addPrefix(p='wsdp', u=wsdp_ns) 

    header_list = [message_header, address_header]

    # Soapheaders being added to suds command
    client.set_options(soapheaders=header_list)
</snippet></ROW><ROW><id>2965450</id><snippet>    # Attribute to be added to the headers to make sure camera verifies information as correct
    mustAttribute = Attribute('SOAP-ENV:mustUnderstand', 'true')
    for x in header_list:
        x.append(mustAttribute)
</snippet></ROW><ROW><id>2965450</id><snippet>    license_key = Element('LicenseKey', ns=some_namespace).setText('88888-88888-8888-8888-888888888888')
    license_header = Element('LicenseHeader', ns=some_namespace).insert(license_key)

    license_attribute = Attribute(xmlns, "http://schemas.acme.eu/")
    license_header.append(license_attribute)
</snippet></ROW><ROW><id>2965493</id><snippet>&gt;&gt;&gt; for x in a[:]: # make a slice copy of the entire list
...    if len(x) &gt; 6: a.insert(0, x)
...
&gt;&gt;&gt; a
['defenestrate', 'cat', 'window', 'defenestrate']
</snippet></ROW><ROW><id>2965899</id><snippet>#4.1 - MAP - removed socket timeout; added support for chardet library
</snippet></ROW><ROW><id>2965899</id><snippet>#4.1 - MAP - remov
ed socket timeout; added support for chardet library
</snippet></ROW><ROW><id>2966087</id><snippet>class Base64PickleAdapter:
  def __init__(self, base64_input):
    ...

  def read(size=-1):
    ...   

  def readline():
    ... # Can be implemented in terms of read.
</snippet></ROW><ROW><id>2967249</id><snippet>file = open('myfile.dat', 'w+')</snippet></ROW><ROW><id>2967565</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>2967828</id><snippet>&gt;&gt;&gt; mydict={"fork" : True, "form" : True, "fold" : True, "fame" : True}
&gt;&gt;&gt; [k for k in mydict if k.startswith("for")]
['fork', 'form']
</snippet></ROW><ROW><id>2967997</id><snippet>System.Diagnostics.Process</snippet></ROW><ROW><id>2967997</id><snippet>.MainWindowHandle</snippet></ROW><ROW><id>2968404</id><snippet>interactive()</snippet></ROW><ROW><id>2968404</id><snippet>TRUE</snippet></ROW><ROW><id>2968404</id><snippet>FALSE</snippet></ROW><ROW><id>2968404</id><snippet>if(interactive())</snippet></ROW><ROW><id>2968825</id><snippet>UPDATE jiveuser
SET username = userchanges.username
FROM userchanges
WHERE userchanges.userid = jiveuser.userid
    AND userchanges.username &lt;&gt; jiveuser.username
</snippet></ROW><ROW><id>2969087</id><snippet>python setup.py sdist</snippet></ROW><ROW><id>2969087</id><snippet>data_files</snippet></ROW><ROW><id>2969087</id><snippet>package_data</snippet></ROW><ROW><id>2969087</id><snippet>package_data</snippet></ROW><ROW><id>2969121</id><snippet>Victims.create_hotspots</snippet></ROW><ROW><id>2969121</id><snippet>return</snippet></ROW><ROW><id>2969121</id><snippet>Victims.create_hotspots</snippet></ROW><ROW><id>2969121</id><snippet>save()</snippet></ROW><ROW><id>2969121</id><snippet>v= Victim.objects.create( radius, lat, lon, Poi.objects.all())
v.save()
</snippet></ROW><ROW><id>2969260</id><snippet>class Article(db.Model):
  body = db.TextProperty()

class Comment(db.Model):
  article = db.ReferenceProperty(Article)
  body = db.TextProperty()

comment = Comment.all().get()

# The explicit reference from one comment to one article
# is represented by a Key object
article_key = comment.article

# which gets lazy-loaded to a Model instance by accessing a property
article_body = comment.article.body

# The implicit back-reference from one article to many comments
# is represented by a Query object
article_comments = comment.article.comment_set

# If the article only has one comment, this gives us a round trip
comment = comment.article.comment_set.all().get()
</snippet></ROW><ROW><id>2969548</id><snippet>str</snippet></ROW><ROW><id>2969548</id><snippet>byte[]</snippet></ROW><ROW><id>2969548</id><snippet>md5</snippet></ROW><ROW><id>2969548</id><snippet>str</snippet></ROW><ROW><id>2969606</id><snippet>s.send</snippet></ROW><ROW><id>2969606</id><snippet>s.sendall</snippet></ROW><ROW><id>2969606</id><snippet>s.recv</snippet></ROW><ROW><id>2969606</id><snippet>struct</snippet></ROW><ROW><id>2969606</id><snippet>recvall</snippet></ROW><ROW><id>2969606</id><snippet>EOF</snippet></ROW><ROW><id>2969606</id><snippet>recv</snippet></ROW><ROW><id>2969606</id><snippet>pickle.loads</snippet></ROW><ROW><id>2970040</id><snippet>thesocket</snippet></ROW><ROW><id>2970040</id><snippet>with open('thefile.mp3', 'rb') as f:
    thesocket.sendall(f.read())
</snippet></ROW><ROW><id>2970494</id><snippet>pylab.rcParams['xtick.major.pad']='8'
pylab.rcParams['ytick.major.pad']='8'
</snippet></ROW><ROW><id>2970542</id><snippet>def occurrences(string, sub):
    count = start = 0
    while True:
        start = string.find(sub, start) + 1
        if start &gt; 0:
            count+=1
        else:
            return count
</snippet></ROW><ROW><id>2970586</id><snippet>find_last_col()</snippet></ROW><ROW><id>2970586</id><snippet>find_last_col(ws)</snippet></ROW><ROW><id>2970586</id><snippet>Sheet.ncols</snippet></ROW><ROW><id>2970586</id><snippet>if ws.cell_value(6, cnum):
    wsHeaders[str(ws.cell_value(6, cnum))] = (cnum, ws.ncols)
</snippet></ROW><ROW><id>2970586</id><snippet>value = ws.cell_value(6, cnum)
if value:
    wsHeaders[str(value)] = (cnum, ws.ncols)
</snippet></ROW><ROW><id>2970586</id><snippet>tests= [
    "A/B/C/D",
    "A//C//",
    "A//C//E",
    "A///D",
    "///D",
    ]
for test in tests:
    print "\nTest:", test
    row = test.split("/")
    ncols = len(row)
    # modelling the OP's code
    # (using xlrd-style 0-relative column indexes)
    d = {}
    for cnum in xrange(ncols):
        if row[cnum]:
            k = row[cnum]
            v = (cnum, ncols) #### BUG; should be ncols - 1 ("inclusive")
            print "outer", cnum, k, '=&gt;', v
            d[k] = v
            for cend in xrange(cnum + 1, ncols):
                if row[cend]:
                    k = row[cnum]
                    v = (cnum, cend - 1)
                    print "inner", cnum, cend, k, '=&gt;', v
                    d[k] = v
                    break
    print d
    # modelling a slightly better algorithm
    d = {}
    prev = None
    for cnum in xrange(ncols):
        key = row[cnum]
        if key:
            d[key] = [cnum, cnum]
            prev = key
        elif prev:
            d[prev][1] = cnum
    print d
    # if tuples are really needed (can't imagine why)
    for k in d:
        d[k] = tuple(d[k])
    print d
</snippet></ROW><ROW><id>2970586</id><snippet>Test: A/B/C/D
outer 0 A =&gt; (0, 4)
inner 0 1 A =&gt; (0, 0)
outer 1 B =&gt; (1, 4)
inner 1 2 B =&gt; (1, 1)
outer 2 C =&gt; (2, 4)
inner 2 3 C =&gt; (2, 2)
outer 3 D =&gt; (3, 4)
{'A': (0, 0), 'C': (2, 2), 'B': (1, 1), 'D': (3, 4)}
{'A': [0, 0], 'C': [2, 2], 'B': [1, 1], 'D': [3, 3]}
{'A': (0, 0), 'C': (2, 2), 'B': (1, 1), 'D': (3, 3)}

Test: A//C//
outer 0 A =&gt; (0, 5)
inner 0 2 A =&gt; (0, 1)
outer 2 C =&gt; (2, 5)
{'A': (0, 1), 'C': (2, 5)}
{'A': [0, 1], 'C': [2, 4]}
{'A': (0, 1), 'C': (2, 4)}

Test: A//C//E
outer 0 A =&gt; (0, 5)
inner 0 2 A =&gt; (0, 1)
outer 2 C =&gt; (2, 5)
inner 2 4 C =&gt; (2, 3)
outer 4 E =&gt; (4, 5)
{'A': (0, 1), 'C': (2, 3), 'E': (4, 5)}
{'A': [0, 1], 'C': [2, 3], 'E': [4, 4]}
{'A': (0, 1), 'C': (2, 3), 'E': (4, 4)}

Test: A///D
outer 0 A =&gt; (0, 4)
inner 0 3 A =&gt; (0, 2)
outer 3 D =&gt; (3, 4)
{'A': (0, 2), 'D': (3, 4)}
{'A': [0, 2], 'D': [3, 3]}
{'A': (0, 2), 'D': (3, 3)}

Test: ///D
outer 3 D =&gt; (3, 4)
{'D': (3, 4)}
{'D': [3, 3]}
{'D': (3, 3)}
</snippet></ROW><ROW><id>2970722</id><snippet>struct</snippet></ROW><ROW><id>2970722</id><snippet>(x, y)</snippet></ROW><ROW><id>2970722</id><snippet>pt1 = (1.0, 5.0)
pt2 = (2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
</snippet></ROW><ROW><id>2970722</id><snippet>from collections import namedtuple
Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)
</snippet></ROW><ROW><id>2970722</id><snippet>Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
# use index referencing
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
 # use tuple unpacking
x1, y1 = pt1
</snippet></ROW><ROW><id>2970722</id><snippet>class Point(namedtuple('Point', 'x y')):
    [...]
</snippet></ROW><ROW><id>2970722</id><snippet>&gt;&gt;&gt; Point = namedtuple('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
AttributeError: can't set attribute
</snippet></ROW><ROW><id>2970722</id><snippet>&gt;&gt;&gt; from rcdtype import *
&gt;&gt;&gt; Point = recordtype('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
&gt;&gt;&gt; print(pt1[0])
    2.0
</snippet></ROW><ROW><id>2970722</id><snippet>pt1._asdict()</snippet></ROW><ROW><id>2970722</id><snippet>{'x': 1.0, 'y': 5.0}</snippet></ROW><ROW><id>2970757</id><snippet>import Tkinter as tk

root= tk.Tk()

root.title("wm min/max")

# this removes the maximize button
root.resizable(0,0)

# # if on MS Windows, this might do the trick,
# # but I wouldn't know:
# root.attributes(toolwindow=1)

# # for no window manager decorations at all:
# root.overrideredirect(1)
# # useful for something like a splash screen

root.mainloop()
</snippet></ROW><ROW><id>2970757</id><snippet>Toplevel</snippet></ROW><ROW><id>2970757</id><snippet>toplevel.transient(1)
</snippet></ROW><ROW><id>2970789</id><snippet>xrange(N)</snippet></ROW><ROW><id>2970789</id><snippet>import itertools

for _ in itertools.repeat(None, N):
    do_something()
</snippet></ROW><ROW><id>2970794</id><snippet>/stuff/blarg.html</snippet></ROW><ROW><id>2970794</id><snippet>/css/commoncss.css</snippet></ROW><ROW><id>2970801</id><snippet>fileReader = csv.reader(csv_file.split("\n"))
</snippet></ROW><ROW><id>2970801</id><snippet>for thing in stuff:
  print thing.strip().split(",")
</snippet></ROW><ROW><id>2970873</id><snippet>audio = MP3("filename.mp3")
</snippet></ROW><ROW><id>2970873</id><snippet>picturetag = audio.tags['APIC:Folder.jpg']
</snippet></ROW><ROW><id>2970873</id><snippet>type</snippet></ROW><ROW><id>2970873</id><snippet>picturetag.type = 3
</snippet></ROW><ROW><id>2970873</id><snippet>audio.tags['APIC:Folder.jpg'] = picturetag
</snippet></ROW><ROW><id>2970873</id><snippet>audio.save()
</snippet></ROW><ROW><id>2970887</id><snippet>multiprocessing</snippet></ROW><ROW><id>2970891</id><snippet>lambda</snippet></ROW><ROW><id>2970891</id><snippet>print</snippet></ROW><ROW><id>2970891</id><snippet>print</snippet></ROW><ROW><id>2970891</id><snippet>In [1324]: from __future__ import print_function

In [1325]: f = lambda x: print(x)

In [1326]: f("HI")
HI
</snippet></ROW><ROW><id>2971002</id><snippet>A1</snippet></ROW><ROW><id>2971002</id><snippet>used = ws.UsedRange
nrows = used.Row + used.Rows.Count - 1
ncols = used.Column + used.Columns.Count - 1
</snippet></ROW><ROW><id>2971150</id><snippet>djangoforms</snippet></ROW><ROW><id>2971150</id><snippet>tipfy</snippet></ROW><ROW><id>2971228</id><snippet>stream = open(access,'r')
----&gt;log_file = stream.readlines()    
</snippet></ROW><ROW><id>2971228</id><snippet>stream = open(access,'r')
log_file = stream.readlines()    
</snippet></ROW><ROW><id>2971402</id><snippet>multiprocessing</snippet></ROW><ROW><id>2971882</id><snippet>fetch_imagery</snippet></ROW><ROW><id>2971882</id><snippet>yield</snippet></ROW><ROW><id>2971882</id><snippet>return image['src']</snippet></ROW><ROW><id>2971882</id><snippet>fetch_imagery</snippet></ROW><ROW><id>2971882</id><snippet>{% block content %}
    {% for image in fetch_boats %}
        &lt;img src="{{ image }}" /&gt;
    {% endfor %}
{% endblock %}
</snippet></ROW><ROW><id>2971882</id><snippet>img</snippet></ROW><ROW><id>2972069</id><snippet>char2 = 0</snippet></ROW><ROW><id>2972069</id><snippet>for p in range(255):
</snippet></ROW><ROW><id>2972069</id><snippet>for x in range(256):
    for p in range(256):
        print chr(x).encode("hex"),chr(p).encode("hex")
</snippet></ROW><ROW><id>2972226</id><snippet>% python -mtimeit  "l=[]"
10000000 loops, best of 3: 0.0711 usec per loop

% python -mtimeit  "l=list()"
1000000 loops, best of 3: 0.297 usec per loop
</snippet></ROW><ROW><id>2972226</id><snippet>[]</snippet></ROW><ROW><id>2972226</id><snippet>list()</snippet></ROW><ROW><id>2972664</id><snippet>plt.clf()</snippet></ROW><ROW><id>2972664</id><snippet>for i in range(200):
    matrix = complex_calculation()
    plt.set_cmap("gray")
    plt.imshow(matrix)
    plt.savefig("frame{0}.png".format(i))
    plt.clf()
</snippet></ROW><ROW><id>2972790</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; today = date.today()
&gt;&gt;&gt; date(today.year - 1, today.month, today.day) &lt; date(2009, 06, 05) &lt;= today
True
&gt;&gt;&gt; date(today.year - 1, today.month, today.day) &lt; date(2009, 06, 04) &lt;= today
False
&gt;&gt;&gt; date(today.year - 1, today.month, today.day) &lt; date(2010, 07, 04) &lt;= today
False
</snippet></ROW><ROW><id>2973362</id><snippet>blog_list = Blog.objects.all()</snippet></ROW><ROW><id>2973362</id><snippet> {% load pagination_tags %}
 {% autopaginate blog_list 10 %}
 {% paginate %}
</snippet></ROW><ROW><id>2973599</id><snippet>unique_file</snippet></ROW><ROW><id>2973599</id><snippet>from mymodule import unique_file
</snippet></ROW><ROW><id>2973599</id><snippet>def unique_file():
    # return a unique file
</snippet></ROW><ROW><id>2973969</id><snippet>count &gt; 1</snippet></ROW><ROW><id>2973969</id><snippet>for j in i</snippet></ROW><ROW><id>2973969</id><snippet>j[1:]</snippet></ROW><ROW><id>2973969</id><snippet>def count_slashes(items):
    return sum(item.count('/') for item in items)

for item in li:
    if count_slashes(item[1:]) &gt; 1:
        print item[0][1:10]
</snippet></ROW><ROW><id>2973969</id><snippet>result = [item[0][1:10] for item in li if count_slashes(item[1:]) &gt; 1]
</snippet></ROW><ROW><id>2973969</id><snippet>count_slashes</snippet></ROW><ROW><id>2974082</id><snippet>my_dict = dict.fromkeys(['a', 'b', 'c'], 10)
my_dict.update(dict.fromkeys(['b', 'e'], 20))
</snippet></ROW><ROW><id>2974082</id><snippet>&gt;&gt;&gt; my_dict = {('a', 'c', 'd'): 10, ('b', 'e'): 20}
&gt;&gt;&gt; next(v for k, v in my_dict.items() if 'c' in k)      # use .iteritems() python-2.x
10
</snippet></ROW><ROW><id>2974177</id><snippet>from subprocess import Popen
from win32process import DETACHED_PROCESS

pid = Popen(["C:\python24\python.exe", "long_run.py"],creationflags=DETACHED_PROCESS,shell=True).pid
print pid
print 'done' 
#I can now close the console or anything I want and long_run.py continues!
</snippet></ROW><ROW><id>2974202</id><snippet>wtforms.validators.EqualTo</snippet></ROW><ROW><id>2974480</id><snippet>robust_float</snippet></ROW><ROW><id>2974480</id><snippet>def robust_float(s):
    try:
        return float(s)
    except ValueError:
        if 'nan' in s.lower():
            return float('nan')
        else:
            raise
</snippet></ROW><ROW><id>2974689</id><snippet>+=</snippet></ROW><ROW><id>2974689</id><snippet>s = 'a'
ids = id(s)
s += 'b'
ids == id(s) # False, because s was reassigned to a new object
</snippet></ROW><ROW><id>2974689</id><snippet>flav</snippet></ROW><ROW><id>2974689</id><snippet>a.flavor</snippet></ROW><ROW><id>2974689</id><snippet>flav --------\
               'cherry'
a.flavor ----/
</snippet></ROW><ROW><id>2974689</id><snippet>flav += 'and grape'</snippet></ROW><ROW><id>2974689</id><snippet>flav</snippet></ROW><ROW><id>2974689</id><snippet>flav --------&gt; 'cherry and grape'
a.flavor ----&gt; 'cherry' # &lt;-- that string object never changes
</snippet></ROW><ROW><id>2974830</id><snippet>free, total, totalfree = win32file.GetDiskFreeSpaceEx(r'\\server\share')
</snippet></ROW><ROW><id>2974830</id><snippet>import sys
from ctypes import *

c_ulonglong_p = POINTER(c_ulonglong)

_GetDiskFreeSpace = windll.kernel32.GetDiskFreeSpaceExW
_GetDiskFreeSpace.argtypes = [c_wchar_p, c_ulonglong_p, c_ulonglong_p, c_ulonglong_p]

def GetDiskFreeSpace(path):
    if not isinstance(path, unicode):
        path = path.decode('mbcs') # this is windows only code
    free, total, totalfree = c_ulonglong(0), c_ulonglong(0), c_ulonglong(0)
    if not _GetDiskFreeSpace(path, pointer(free), pointer(total), pointer(totalfree)):
        raise WindowsError
    return free.value, total.value, totalfree.value
</snippet></ROW><ROW><id>2974837</id><snippet>Shape</snippet></ROW><ROW><id>2974837</id><snippet>ball</snippet></ROW><ROW><id>2974837</id><snippet>circle</snippet></ROW><ROW><id>2974837</id><snippet>triangle</snippet></ROW><ROW><id>2975194</id><snippet>def close_geometry(self, geometry):
   if geometry.empty or geometry[0].empty:
       return geometry # empty

   if(geometry[-1][-1] == geometry[0][0]):
       return geometry  # already closed

   result = None
   for linestring in geom:
      if result is None:
          resultstring = linestring.clone()
      else:
          resultstring.extend(linestring.coords)

   geom = Polygon(resultstring)

   return geom
</snippet></ROW><ROW><id>2975194</id><snippet>&gt;&gt;&gt; s1 = LineString((0, 0), (1, 1), (1, 2), (0, 1))
&gt;&gt;&gt; s1.convex_hull
&lt;Polygon object at ...&gt;
&gt;&gt;&gt; s1.convex_hull.coords
(((0.0, 0.0), (0.0, 1.0), (1.0, 2.0), (1.0, 1.0), (0.0, 0.0)),)

&gt;&gt;&gt; m1=MultiLineString(s1)
&gt;&gt;&gt; m1.convex_hull
&lt;Polygon object at...&gt;
&gt;&gt;&gt; m1.convex_hull.coords
(((0.0, 0.0), (0.0, 1.0), (1.0, 2.0), (1.0, 1.0), (0.0, 0.0)),)
</snippet></ROW><ROW><id>2975495</id><snippet>import mymodule</snippet></ROW><ROW><id>2975495</id><snippet>mymodule.py</snippet></ROW><ROW><id>2975495</id><snippet>mymodule.fib</snippet></ROW><ROW><id>2975495</id><snippet>print "any string"</snippet></ROW><ROW><id>2975562</id><snippet>Twisted</snippet></ROW><ROW><id>2975603</id><snippet>git</snippet></ROW><ROW><id>2975603</id><snippet>import facebook</snippet></ROW><ROW><id>2975645</id><snippet>nohup python bgservice.py &amp;</snippet></ROW><ROW><id>2975645</id><snippet>nohup.out</snippet></ROW><ROW><id>2975645</id><snippet>supervise</snippet></ROW><ROW><id>2975969</id><snippet>xl = win32com.client.Dispatch("Excel.Application")
wbOne = xl.Workbooks.Add()
wbTwo = xl.Workbooks.Add()
xl.ActiveWorkbook == wbOne
 False
xl.ActiveWorkbook == wbTwo 
 True
</snippet></ROW><ROW><id>2975969</id><snippet>wbOne.Activate()
xl.ActiveWorkbook == wbOne
 True
</snippet></ROW><ROW><id>2975969</id><snippet>wbOne.Close()
wbTwo.Close()
</snippet></ROW><ROW><id>2976506</id><snippet>dtstart</snippet></ROW><ROW><id>2976506</id><snippet>dtend</snippet></ROW><ROW><id>2976506</id><snippet>summary</snippet></ROW><ROW><id>2976506</id><snippet>location</snippet></ROW><ROW><id>2976506</id><snippet>url</snippet></ROW><ROW><id>2976506</id><snippet>description</snippet></ROW><ROW><id>2976506</id><snippet>cal = vobject.iCalendar()
</snippet></ROW><ROW><id>2976506</id><snippet>event = cal.add('vevent')
</snippet></ROW><ROW><id>2976506</id><snippet>event.add('summary').value = 'your summary'
event.add('dtstart').value = datetime.now() # or anything else
...
</snippet></ROW><ROW><id>2976506</id><snippet>cal.serialize()</snippet></ROW><ROW><id>2976666</id><snippet>conf = Configure(env)
status, _ = conf.TryAction("fltk-config --cflags")
if status:
  env.ParseConfig("fltk-config --cflags")
else:
  print "Failed fltk"
</snippet></ROW><ROW><id>2976666</id><snippet>  try:
    env.ParseConfig("fltk-config --cflags")
  except (OSError):
    print 'failed to run fltk-config you sure fltk is installed !?'
    sys.exit(1)
</snippet></ROW><ROW><id>2976916</id><snippet>def lookup(self, username="", guess=0,verbose=0):
        guin = guess
        result_set = []
        varsearch = "(&amp;(name=" + str(username) + ")(" + "nin" + "=" + str(guin) + "*))"
        result_id = self.l.search("", ldap.SCOPE_SUBTREE, varsearch, ["nin"])
        while True:
            try:
                result_type, result_data = self.l.result(result_id, 0, 5.0)
                if (result_data == []):
                    break
                else:
                    if result_type == ldap.RES_SEARCH_ENTRY:
                        result_set.append(result_data)
            except ldap.TIMEOUT:
                return {"name": username}
        if len(result_set) == 0:
            return self.lookup(username, guin + 1,verbose)
        else:
            if guess &lt; 1000000:
                return self.lookup(username, guess * 10,verbose)
            else:
                if verbose==1:
                    print "Bingo!",
                return str(guess)
</snippet></ROW><ROW><id>2976917</id><snippet>class Wrapper (object):
    def __init__(self, meth, *args):
        self.meth = meth
        self.args = args

   def runit(self):
       self.meth(*self.args)

class Test (object):
    def __init__(self, var):
        self.var = var
    def sayHello(self):
        print "Hello! My name is: %s" % self.var

t = Test('FooBar')
w = Wrapper( t.sayHello )

w.runit()
</snippet></ROW><ROW><id>2977932</id><snippet>import re    
re.sub("\s+"," ",string)
</snippet></ROW><ROW><id>2978212</id><snippet>data='''\
&lt;root&gt;
&lt;node1&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
&lt;/node1&gt;
&lt;/root&gt;
'''
doc = lxml.etree.XML(data)
e=doc.find('node1')
child = lxml.etree.Element("node3",attrib={'a1':'x3'})
child.text='...'
e.insert(1,child)
print(lxml.etree.tostring(doc))
</snippet></ROW><ROW><id>2978212</id><snippet>&lt;root&gt;
    &lt;node1&gt;
      &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
      &lt;node3 a1="x3"&gt;...&lt;/node3&gt;&lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
      &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
    &lt;/node1&gt;
    &lt;/root&gt;
</snippet></ROW><ROW><id>2978328</id><snippet>sorted</snippet></ROW><ROW><id>2978328</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; dice = [random.randint(1, 6) for x in range(4)]
&gt;&gt;&gt; sum(sorted(dice)[1:])
13
</snippet></ROW><ROW><id>2978328</id><snippet>&gt;&gt;&gt; sum(dice) - min(dice)
13
</snippet></ROW><ROW><id>2978339</id><snippet>QuerySet</snippet></ROW><ROW><id>2978339</id><snippet>get_my_partylines</snippet></ROW><ROW><id>2978339</id><snippet>## This class is used to replicate QuerySet methods into a manager.
## This way:  Partyline.objects.for_user(foo) works the same as
## Partyline.objects.filter(date=today).for_user(foo)
class CustomQuerySetManager(models.Manager):
    def get_query_set(self):
        return self.model.QuerySet(self.model)
    def __getattr__(self, attr, *args):
        try:
            return getattr(self.__class__, attr, *args)
        except AttributeError:
            return getattr(self.get_query_set(), attr, *args)


class Partyline(models.Model):
    ## Define fields, blah blah.
    objects = CustomQuerySetManager()
    class QuerySet(QuerySet):
        def sort_for_request(self, request):
            sort_field = request.REQUEST.get('sortby', 'did').strip()
            reverse_order = False
            if sort_field.startswith('-'):
                search = sort_field[1:]
            else:
                search = sort_field
                reverse_order = True

            # Check to see if the sort term is valid.
            if not (search in Partyline._meta.get_all_field_names()):
                sort_field = 'did'

            partylines = self.all().order_by(sort_field)
            if reverse_order:
                partylines.reverse()
            return partylines
        def for_user(self, user):
            if is_user_type(request.user, ['admin']):
                return self.all()
            else:
                ## Code from get_my_partylines goes here.
                return self.all() ## Temporary.
</snippet></ROW><ROW><id>2978339</id><snippet>def list_partylines(request):
    """
    List all `Partyline`s that we own.
    """
    partylines = Partylines.objects.for_user(request.user).sort_for_request(request)
</snippet></ROW><ROW><id>2978376</id><snippet>str.format</snippet></ROW><ROW><id>2978376</id><snippet>%</snippet></ROW><ROW><id>2978376</id><snippet>&gt;&gt;&gt; commands = {
...     'py': 'python {0}',
...     'md': 'markdown "{0}" &gt; "{0}.html"; gnome-open "{0}.html"',
... }
&gt;&gt;&gt; commands['md'].format('file.md')
'markdown "file.md" &gt; "file.md.html"; gnome-open "file.md.html"'
</snippet></ROW><ROW><id>2978680</id><snippet>mark_safe</snippet></ROW><ROW><id>2978680</id><snippet>SafeUnicode</snippet></ROW><ROW><id>2978680</id><snippet>SafeString</snippet></ROW><ROW><id>2978680</id><snippet>SafeData</snippet></ROW><ROW><id>2978680</id><snippet>89  def mark_safe(s):
90      """
91      Explicitly mark a string as safe for (HTML) output purposes. The returned
92      object can be used everywhere a string or unicode object is appropriate.
93  
94      Can be called multiple times on a single string.
95      """
96      if isinstance(s, SafeData):
97          return s
98      if isinstance(s, str) or (isinstance(s, Promise) and s._delegate_str):
99          return SafeString(s)
100     if isinstance(s, (unicode, Promise)):
101         return SafeUnicode(s)
102     return SafeString(str(s))
</snippet></ROW><ROW><id>2978680</id><snippet>SafeUnicode(s)</snippet></ROW><ROW><id>2978680</id><snippet>make_safe(s)</snippet></ROW><ROW><id>2978680</id><snippet>SafeUnicode</snippet></ROW><ROW><id>2978680</id><snippet>Promise</snippet></ROW><ROW><id>2979045</id><snippet>self.request.POST</snippet></ROW><ROW><id>2979045</id><snippet>self.request.params</snippet></ROW><ROW><id>2979600</id><snippet>from urllib import urlencode
urlencode({'b':'bbbb', 'c':'ccc'})
</snippet></ROW><ROW><id>2979757</id><snippet>point.color(R,G,B) = ( point.normalized_x, 0.5, 1-point.normalized.y )
</snippet></ROW><ROW><id>2980048</id><snippet>for row in iter(cursor.next, None):
    &lt;do something&gt;
</snippet></ROW><ROW><id>2980116</id><snippet>pickle.loads(str(textfield))
</snippet></ROW><ROW><id>2980300</id><snippet>$NAUTILUS_SCRIPT_SELECTED_FILE_PATHS</snippet></ROW><ROW><id>2980300</id><snippet>echo -e $NAUTILUS_SCRIPT_SELECTED_FILE_PATHS | xargs python uploader.py 
</snippet></ROW><ROW><id>2980422</id><snippet>class Num:
    def __init__(self, n):
        self.n = (n % 256)

    def __repr__(self):
        return repr(self.n)

     def __add__(self, other):
        return Num(self.n+int(other))

    # transform ourselves into an int, so
    # int-expecting methods can use us
    def __int__(self):
        return self.n
</snippet></ROW><ROW><id>2980422</id><snippet>&gt;&gt;&gt; a = Num(100)
&gt;&gt;&gt; print a
100
&gt;&gt;&gt; b = a + 50
&gt;&gt;&gt; print b
150
&gt;&gt;&gt; c = Num(200)
&gt;&gt;&gt; d = a + c
&gt;&gt;&gt; print d
44
</snippet></ROW><ROW><id>2980422</id><snippet>Num</snippet></ROW><ROW><id>2980446</id><snippet>def hasProperty(self, line):
    return True if re.search("^\s?[a-z-]+:[^;]+;", line) else False
</snippet></ROW><ROW><id>2980446</id><snippet>def hasProperty(self, line):
    return True if re.search("^\s*[a-z-]+:[^;]+;", line) else False
</snippet></ROW><ROW><id>2980446</id><snippet>hasProperty</snippet></ROW><ROW><id>2980446</id><snippet>\s?</snippet></ROW><ROW><id>2980501</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>2980631</id><snippet>s = ''.join('%s: %s' % (a, getattr(o, a)) for a in dir(o))
</snippet></ROW><ROW><id>2980631</id><snippet>dir</snippet></ROW><ROW><id>2980631</id><snippet>for ... in</snippet></ROW><ROW><id>2980631</id><snippet>getattr</snippet></ROW><ROW><id>2980631</id><snippet>%</snippet></ROW><ROW><id>2980631</id><snippet>''.join</snippet></ROW><ROW><id>2981036</id><snippet>def browse():
    webbrowser.open("http://127.0.0.1:8080")
cherrypy.engine.subscribe('start', browse, priority=90)
</snippet></ROW><ROW><id>2981036</id><snippet>from cherrypy import config, engine, tree

config.update(configfile)
tree.mount(ShowHTML(htmlfile), '/', configfile)
if hasattr(engine, "signal_handler"):
    engine.signal_handler.subscribe()
if hasattr(engine, "console_control_handler"):
    engine.console_control_handler.subscribe()

engine.start()
webbrowser.open("http://127.0.0.1:8080")    
engine.block()
</snippet></ROW><ROW><id>2981106</id><snippet>;</snippet></ROW><ROW><id>2981165</id><snippet>for field in self.request.arguments():
  value = self.request.get(field)
</snippet></ROW><ROW><id>2981178</id><snippet>def is_finite(x):
    return not math.isnan(x) and not math.isinf(x)

def get_floats(source):
    for x in source.split():
        try:
            yield float(x)
        except ValueError:
            pass

def get_finite_floats(source):
    return (x for x in get_floats(source) if is_finite(x))
</snippet></ROW><ROW><id>2981351</id><snippet>write()</snippet></ROW><ROW><id>2981351</id><snippet>mystyle = easyxf('pattern: pattern solid, fore_colour blue')

for row in data:
    rowx += 1
    for colx, value in enumerate(row):
        if rowx % 2 == 0:
            # apply style for even-numbered rows
            ws0.write(rowx, colx, value, mystyle)
        else:
            # no style for odd-numbered rows
            ws0.write(rowx, colx, value)
</snippet></ROW><ROW><id>2981564</id><snippet>type_name</snippet></ROW><ROW><id>2981564</id><snippet>listProperty()</snippet></ROW><ROW><id>2981835</id><snippet>import ast

# find field types
for row in csv.DictReader(my_csvfile, delimiter=delimiter):
    break
else:
    assert 0, "no rows to process"
cast = {}
for k, v in row.iteritems():
    for f in (int, float, ast.literal_eval):
        try: 
            f(v)
            cast[k] = f
            break
        except (ValueError, SyntaxError):
            pass
    else: # no suitable conversion
        cast[k] = lambda x: x.decode(encoding)

# read data
my_csvfile.seek(0)

data = [dict((k.decode(encoding), cast[k](v)) for k, v in row.iteritems())
        for row in csv.DictReader(my_csvfile, delimiter=delimiter)]
</snippet></ROW><ROW><id>2981913</id><snippet>def OnWaveletSelfAdded(event, wavelet):
  for id in wavelet.blips:
    blip = wavelet.blips[id]
    logging.debug(blip.text)
</snippet></ROW><ROW><id>2982117</id><snippet>writeheader()</snippet></ROW><ROW><id>2982117</id><snippet>writeheader()</snippet></ROW><ROW><id>2982117</id><snippet>from collections import OrderedDict
ordered_fieldnames = OrderedDict([('field1',None),('field2',None)])
with open(outfile,'wb') as fou:
    dw = csv.DictWriter(fou, delimiter='\t', fieldnames=ordered_fieldnames)
    dw.writeheader()
    # continue on to write data
</snippet></ROW><ROW><id>2982117</id><snippet>with</snippet></ROW><ROW><id>2982117</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>2982117</id><snippet>with open(infile,'rb') as fin:
    dr = csv.DictReader(fin, delimiter='\t')

# dr.fieldnames contains values from first row of `f`.
with open(outfile,'wb') as fou:
    dw = csv.DictWriter(fou, delimiter='\t', fieldnames=dr.fieldnames)
    headers = {} 
    for n in dw.fieldnames:
        headers[n] = n
    dw.writerow(headers)
    for row in dr:
        dw.writerow(row)
</snippet></ROW><ROW><id>2982117</id><snippet>with open(outfile,'wb') as fou:
    dw = csv.DictWriter(fou, delimiter='\t', fieldnames=dr.fieldnames)
    dw.writerow(dict((fn,fn) for fn in dr.fieldnames))
    for row in dr:
        dw.writerow(row)
</snippet></ROW><ROW><id>2982304</id><snippet>from random import randint

CARD_FACES = {1: "Ace", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 
              9: "9", 10: "10", 11: "Jack", 12: "Queen", 13: "King"}

def deal():
    """Deal a card - returns a value indicating a card with the Ace
       represented by 1 and the Jack, Queen and King by 11, 12, 13
       respectively.
    """
    return randint(1, 13)

def _get_hand_value(cards):
    """Get the value of a hand based on the rules for Black Jack."""
    val = 0
    for card in cards:
        if 1 &lt; card &lt;= 10:
            val += card # 2 thru 10 are worth their face values
        elif card &gt; 10:
            val += 10 # Jack, Queen and King are worth 10

    # Deal with the Ace if present.  Worth 11 if total remains 21 or lower
    # otherwise it's worth 1.
    if 1 in cards and val + 11 &lt;= 21:
        return val + 11
    elif 1 in cards:
        return val + 1
    else:
        return val    

def show_hand(name, cards):
    """Print a message showing the contents and value of a hand."""
    faces = [CARD_FACES[card] for card in cards]
    val = _get_hand_value(cards)

    if val == 21:
        note = "BLACK JACK!"
    else:
        note = ""

    print "%s's hand: %s, %s : %s %s" % (name, faces[0], faces[1], val, note)


# Deal 2 cards to both the dealer and a player and show their hands
for name in ("Dealer", "Player"):
    cards = (deal(), deal())
    show_hand(name, cards)
</snippet></ROW><ROW><id>2982306</id><snippet>print(x, end = ' ')</snippet></ROW><ROW><id>2982306</id><snippet>Old: print x,           # Trailing comma suppresses newline  
New: print(x, end=" ")  # Appends a space instead of a newline
</snippet></ROW><ROW><id>2982569</id><snippet># somewhere in a views.py

def shutdown(request):
    import os
    os.kill(os.getpid(), 9) 
</snippet></ROW><ROW><id>2982569</id><snippet>os.kill</snippet></ROW><ROW><id>2982705</id><snippet>class TypedWriter:
    """
    A CSV writer which will write rows to CSV file "f",
    which uses "fieldformats" to format fields.
    """

    def __init__(self, f, fieldnames, fieldformats, **kwds):
        self.writer = csv.DictWriter(f, fieldnames, **kwds)
        self.formats = fieldformats

    def writerow(self, row):
        self.writer.writerow(dict((k, self.formats[k] % v) 
                                  for k, v in row.iteritems()))

    def writerows(self, rows):
        for row in rows:
            self.writerow(row)
</snippet></ROW><ROW><id>2982899</id><snippet>1.5 TB / 1.5 Mbps</snippet></ROW><ROW><id>2982899</id><snippet>1.5 TB / 480 Mbps</snippet></ROW><ROW><id>2982899</id><snippet>1.5 TB / 80 Mbps</snippet></ROW><ROW><id>2982899</id><snippet>1.5 TB / 100 Mbps</snippet></ROW><ROW><id>2982899</id><snippet>dd</snippet></ROW><ROW><id>2982984</id><snippet>input</snippet></ROW><ROW><id>2982984</id><snippet>&gt;&gt;&gt; input('tell me: ')
tell me: what?
'what?'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2982984</id><snippet>curses</snippet></ROW><ROW><id>2983144</id><snippet>import operator
ops = {"+": operator.add,
       "-": operator.sub,
       "*": operator.mul,
       "/": operator.div}
op_char = raw_input('enter a operand')
op_func = ops[op_char]
result = op_func(a, b)
</snippet></ROW><ROW><id>2983148</id><snippet>&gt;&gt;&gt; x1, x2, x3, x4 = raw_input("Input number as xxxx-xxxx-xxxx-xxxx").split('-')
</snippet></ROW><ROW><id>2983148</id><snippet>rawinput</snippet></ROW><ROW><id>2983148</id><snippet>input</snippet></ROW><ROW><id>2983189</id><snippet>data = '''* list item 1
* list item 2
** list item 3
** list item 4
*** list item 5
* list item 6'''.splitlines()

class Node(object):
  def __init__(self, payload):
    self.payload = payload
    self.children = []
  def show(self, indent):
    print ' '*indent, self.payload
    for c in self.children:
      c.show(indent+2)

def makenest(linelist):
  rootnode = Node(None)
  stack = [(rootnode, 0)]
  for line in linelist:
    for i, c in enumerate(line):
      if c != '*': break
    stars, payload = line[:i], line[i:].strip()
    curlev = len(stars)
    curnod = Node(payload)
    while True:
      parent, level = stack[-1]
      if curlev &gt; level: break
      del stack[-1]
    # a child node of the current top-of-stack
    parent.children.append(curnod)
    stack.append((curnod, curlev))
  rootnode.show(0)

makenest(data)
</snippet></ROW><ROW><id>2983189</id><snippet>show</snippet></ROW><ROW><id>2983189</id><snippet>Node</snippet></ROW><ROW><id>2983189</id><snippet>class Node</snippet></ROW><ROW><id>2983189</id><snippet>  def emit(self):
    if self.children:
      return (self.payload,
              [c.emit() for c in self.children])
    else:
      return (self.payload,)
</snippet></ROW><ROW><id>2983189</id><snippet>makenest</snippet></ROW><ROW><id>2983189</id><snippet>makenest</snippet></ROW><ROW><id>2983189</id><snippet>  return [c.emit() for c in rootnode.children]

print(makenest(data))
</snippet></ROW><ROW><id>2983189</id><snippet>print</snippet></ROW><ROW><id>2983189</id><snippet>[('list item 1',), ('list item 2', [('list item 3',), ('list item 4', [('list item 5',)])]), ('list item 6',)]
</snippet></ROW><ROW><id>2983225</id><snippet>return</snippet></ROW><ROW><id>2983225</id><snippet>print</snippet></ROW><ROW><id>2983225</id><snippet>print('value is',c)
return c
</snippet></ROW><ROW><id>2983225</id><snippet>if</snippet></ROW><ROW><id>2983225</id><snippet>elif</snippet></ROW><ROW><id>2983225</id><snippet>result = calci(...)</snippet></ROW><ROW><id>2983225</id><snippet>return</snippet></ROW><ROW><id>2983225</id><snippet>finally</snippet></ROW><ROW><id>2983225</id><snippet>return</snippet></ROW><ROW><id>2983225</id><snippet>print</snippet></ROW><ROW><id>2983310</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>class Student(object):
    def __init__(self, sid, name, allocated_proj_ref, allocated_rank):
        self.sid = sid
        self.name = name
        self.allocated_project = None
        self.allocated_rank = None
</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983310</id><snippet>class StudentDBRecord(Student):
    def __init__(self, student):
        super(StudentDBRecord, self).__init__(student.sid, student.name,
            student.allocated_proj_ref, student.allocated_rank)

# this call remains the same
students_table = Table('studs', metadata,
    Column('sid', Integer, primary_key=True),
    Column('name', String),
    Column('allocated_proj_ref', Integer, ForeignKey('projs.proj_id')),
    Column('allocated_rank', Integer)
)

# this changes
mapper(StudentDBRecord, students_table, properties={'proj' : relation(Project)})
</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>copy</snippet></ROW><ROW><id>2983310</id><snippet>deepcopy</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983310</id><snippet>students = ...dict with best solution...
student_records = [StudentDBRecord(s) for s in students.itervalues()]
session.commit()
</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983310</id><snippet>object</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983310</id><snippet>class StudentDBRecord(object):
    def __init__(self, student):
        self.sid = student.sid
        self.name = student.name
        self.allocated_project = student.allocated_project
        self.allocated_rank = student.allocated_rank
</snippet></ROW><ROW><id>2983310</id><snippet>class StudentDBRecord(object):
    def __init__(self, student):
        for attr in dir(student):
            if not attr.startswith('__'):
                setattr(self, attr, getattr(student, attr))
</snippet></ROW><ROW><id>2983310</id><snippet>Student</snippet></ROW><ROW><id>2983310</id><snippet>StudentDBRecord</snippet></ROW><ROW><id>2983323</id><snippet>  Read visit count
  Add one to visit count
  Write visit count
</snippet></ROW><ROW><id>2983323</id><snippet> Grab a lock
 Read, increment, Write
 Release lock
</snippet></ROW><ROW><id>2983323</id><snippet> Read  (two users same old value)
 Increment
 First user Grab Lock, second waits
 Write  
 Release, second user grabs lock
 Write (same value!)
 Release
</snippet></ROW><ROW><id>2983323</id><snippet>  Begin transaction

  Do the visit increment stuff

  Do some serious business work

  End transaction   &lt;==== visit lock is held until here
</snippet></ROW><ROW><id>2983323</id><snippet>  Begin transaction
  Do the visit increment stuff
  Do some serious business work
  End transaction   &lt;==== visit lock and business locks held until here
</snippet></ROW><ROW><id>2983323</id><snippet>  Begin transaction
  Do some other serious business work
  Do the visit increment stuff      
  End transaction   &lt;==== visit lock and maybesame business locks held until here
</snippet></ROW><ROW><id>2983330</id><snippet>numpy</snippet></ROW><ROW><id>2983330</id><snippet>on</snippet></ROW><ROW><id>2983330</id><snippet>def inner_join(tab1, tab2, prefix1, prefix2, on):
  for r1 in tab1:
    for r2 in tab2:
      if on(r1, r2):
        row = dict((prefix1 + k1, v1) for k1, v1 in r1.items())
        row.update((prefix2 + k2, v2) for k2, v2 in r2.items())
        yield row
</snippet></ROW><ROW><id>2983330</id><snippet>O(M * N)</snippet></ROW><ROW><id>2983330</id><snippet>ON</snippet></ROW><ROW><id>2983330</id><snippet>JOIN</snippet></ROW><ROW><id>2983330</id><snippet>yielded = False</snippet></ROW><ROW><id>2983330</id><snippet>for r2</snippet></ROW><ROW><id>2983330</id><snippet>True</snippet></ROW><ROW><id>2983330</id><snippet>yield</snippet></ROW><ROW><id>2983330</id><snippet>if not yielded:</snippet></ROW><ROW><id>2983330</id><snippet>None</snippet></ROW><ROW><id>2983330</id><snippet>v2</snippet></ROW><ROW><id>2983330</id><snippet>r2</snippet></ROW><ROW><id>2983330</id><snippet>on</snippet></ROW><ROW><id>2983330</id><snippet>unique</snippet></ROW><ROW><id>2983669</id><snippet>import getpass, imaplib

M = imaplib.IMAP4()
M.login(getpass.getuser(), getpass.getpass())
M.select()
typ, data = M.search(None, 'ALL')
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    print 'Message %s\n%s\n' % (num, data[0][3])
M.close()
M.logout()
</snippet></ROW><ROW><id>2983669</id><snippet>for</snippet></ROW><ROW><id>2983669</id><snippet>for x in some_data_set:
</snippet></ROW><ROW><id>2983669</id><snippet>x</snippet></ROW><ROW><id>2983669</id><snippet>.select()</snippet></ROW><ROW><id>2983967</id><snippet>def split_list(l, sep):
    current = []
    for x in l:
        if x == sep:
            yield current
            current = []
        else:
            current.append(x)
    yield current
</snippet></ROW><ROW><id>2983967</id><snippet>list.index</snippet></ROW><ROW><id>2983967</id><snippet>def split_list(l, sep):
    i = 0
    try:
        while True:
            j = l.index(sep, i)
            yield l[i:j]
            i = j + 1
    except ValueError:
        yield l[i:]
</snippet></ROW><ROW><id>2983967</id><snippet>l = ['(', '2', '.', 'x', '.', '(', '3', '-', '1', ')', '+', '4', ')',
     '/', '3', '.', 'x', '^', '2']

for r in split_list(l, '+'):
    print r
</snippet></ROW><ROW><id>2983967</id><snippet>['(', '2', '.', 'x', '.', '(', '3', '-', '1', ')']
['4', ')', '/', '3', '.', 'x', '^', '2']
</snippet></ROW><ROW><id>2984079</id><snippet>xsi:schemaLocation="urn:schema1 schema1.xsd urn:schema2 schema2.xsd</snippet></ROW><ROW><id>2984415</id><snippet>def GetTheSum(n):
    k = 0
    for d in range(1,n):
        if NumberOfDivisors(d) == 4:
            k += d
            return k
</snippet></ROW><ROW><id>2984415</id><snippet>def GetTheSum(n):
    k = 0
    for d in range(1,n):
        if NumberOfDivisors(d) == 4:
            k += d
    return k
</snippet></ROW><ROW><id>2984506</id><snippet>fetch()</snippet></ROW><ROW><id>2984506</id><snippet>fetch()</snippet></ROW><ROW><id>2984506</id><snippet>fetch()</snippet></ROW><ROW><id>2984506</id><snippet>fetch()</snippet></ROW><ROW><id>2984506</id><snippet>users</snippet></ROW><ROW><id>2984506</id><snippet>stocknames</snippet></ROW><ROW><id>2984506</id><snippet>fetch(1000)</snippet></ROW><ROW><id>2984506</id><snippet>userall=user.all().fetch(1000)
stocknamesall=stocknames.all().fetch(1000)
# rest of the code as-is
</snippet></ROW><ROW><id>2984574</id><snippet>for index, g in enumerate(games[0:4]):
    g.output(index)
</snippet></ROW><ROW><id>2984813</id><snippet>for game in tree.games[0].game[0:4]:
    print(lxml.objectify.dump(game))
</snippet></ROW><ROW><id>2984813</id><snippet>game = None [ObjectifiedElement]
  * slot = '1'
    id = 'Bric A Bloc' [StringElement]
    title-text = 'BricABloc Hoorah' [StringElement]
    link = 'Fruit Splat' [StringElement]
</snippet></ROW><ROW><id>2984813</id><snippet>print(game)</snippet></ROW><ROW><id>2984813</id><snippet>game</snippet></ROW><ROW><id>2984905</id><snippet>sudo ln -s /usr/lib/pymodules/ /usr/lib/python2.6/pymodules
</snippet></ROW><ROW><id>2985059</id><snippet>import subprocess, time

s = subprocess.Popen(['foo', 'args'])
timeout = 1
poll_period = 0.1
s.poll()
while s.returncode is None and timeout &gt; 0:
    time.sleep(poll_period)
    timeout -= poll_period
    s.poll()
if timeout &lt;= 0:
    s.kill() # timed out
else:
    pass # completed
</snippet></ROW><ROW><id>2985145</id><snippet>def</snippet></ROW><ROW><id>2985145</id><snippet>if</snippet></ROW><ROW><id>2985145</id><snippet>function(){}</snippet></ROW><ROW><id>2985145</id><snippet>var func1=function(){};</snippet></ROW><ROW><id>2985145</id><snippet>def cat():
  print 'meowin, yo'

cat()

yip()

def yip():
  print 'barkin, yall'
</snippet></ROW><ROW><id>2985371</id><snippet>lambda</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>filter</snippet></ROW><ROW><id>2985371</id><snippet>reduce</snippet></ROW><ROW><id>2985371</id><snippet>some_list.append(foo)</snippet></ROW><ROW><id>2985371</id><snippet>new_list = some_list + [foo]</snippet></ROW><ROW><id>2985371</id><snippet>foo = [bar(item.baz()) for item in foo]
</snippet></ROW><ROW><id>2985371</id><snippet>for index, _ in enumerate(foo):
    foo[index] = bar(foo[index].baz())
</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>filter</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>filter</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>filter</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>itertools.imap</snippet></ROW><ROW><id>2985371</id><snippet>ifilter</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>filter</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>map</snippet></ROW><ROW><id>2985371</id><snippet>reduce</snippet></ROW><ROW><id>2985371</id><snippet>lambda</snippet></ROW><ROW><id>2985754</id><snippet>slice</snippet></ROW><ROW><id>2985754</id><snippet>forloop.counter0:forloop.counter</snippet></ROW><ROW><id>2985754</id><snippet>.first</snippet></ROW><ROW><id>2985754</id><snippet>forms_and_matches</snippet></ROW><ROW><id>2985754</id><snippet>zip(formset.forms, matches)</snippet></ROW><ROW><id>2985754</id><snippet>{% for form, match in forms_and_matches %}</snippet></ROW><ROW><id>2985778</id><snippet>seek</snippet></ROW><ROW><id>2985778</id><snippet>makeindex.py</snippet></ROW><ROW><id>2985778</id><snippet>import array
import sys

BLOCKSIZE = 1024 * 1024

def reader(f):
  blockstart = 0
  while True:
    block = f.read(BLOCKSIZE)
    if not block: break
    inblock = 0
    while True:
      nextnl = block.find(b'\n', inblock)
      if nextnl &lt; 0:
        blockstart += len(block)
        break
      yield nextnl + blockstart
      inblock = nextnl + 1

def doindex(fn):
  with open(fn, 'rb') as f:
    # result format: x[0] is tot # of lines,
    # x[N] is byte offset of END of line N (1+)
    result = array.array('L', [0])
    result.extend(reader(f))
    result[0] = len(result) - 1
    return result

def main():
  for fn in sys.argv[1:]:
    index = doindex(fn)
    with open(fn + '.indx', 'wb') as p:
      print('File', fn, 'has', index[0], 'lines')
      index.tofile(p)

main()
</snippet></ROW><ROW><id>2985778</id><snippet>useindex.py</snippet></ROW><ROW><id>2985778</id><snippet>import array
import sys

def readline(n, f, findex):
  f.seek(findex[n] + 1)
  bytes = f.read(findex[n+1] - findex[n])
  return bytes.decode('utf8')

def main():
  fn = sys.argv[1]
  with open(fn + '.indx', 'rb') as f:
    findex = array.array('l')
    findex.fromfile(f, 1)
    findex.fromfile(f, findex[0])
    findex[0] = -1
  with open(fn, 'rb') as f:
    for n in sys.argv[2:]:
      print(n, repr(readline(int(n), f, findex)))

main()
</snippet></ROW><ROW><id>2985778</id><snippet>$ time py3 makeindex.py kjv10.txt 
File kjv10.txt has 100117 lines

real    0m0.235s
user    0m0.184s
sys 0m0.035s
$ time py3 useindex.py kjv10.txt 12345 98765 33448
12345 '\r\n'
98765 '2:6 But this thou hast, that thou hatest the deeds of the\r\n'
33448 'the priest appointed officers over the house of the LORD.\r\n'

real    0m0.049s
user    0m0.028s
sys 0m0.020s
$ 
</snippet></ROW><ROW><id>2985778</id><snippet>$ wc kjv10.txt
100117  823156 4445260 kjv10.txt
</snippet></ROW><ROW><id>2985778</id><snippet>\r\n</snippet></ROW><ROW><id>2986161</id><snippet>0.1</snippet></ROW><ROW><id>2986161</id><snippet>1.0</snippet></ROW><ROW><id>2986161</id><snippet>&gt;&gt;&gt; f = 0.0
&gt;&gt;&gt; for _ in range (10):
...  f += 0.1
...
&gt;&gt;&gt; print f == 1.0
False
&gt;&gt;&gt; f
0.99999999999999989
&gt;&gt;&gt; str(f)
1.0
</snippet></ROW><ROW><id>2986161</id><snippet>n / m * m == n</snippet></ROW><ROW><id>2986161</id><snippet>&gt;&gt;&gt; (1.0 / 103.0) * 103.0
0.99999999999999989
</snippet></ROW><ROW><id>2986161</id><snippet>n</snippet></ROW><ROW><id>2986161</id><snippet>n + 1 != n</snippet></ROW><ROW><id>2986161</id><snippet>&gt;&gt;&gt; 10.0**200
9.9999999999999997e+199
&gt;&gt;&gt; 10.0**200 == 10.0**200 + 1
True
# How much do we have to add to 10.0**200 before its 
# floating point representation changes?
&gt;&gt;&gt; 10.0**200 == 10.0**200 + 10.0**183
True
&gt;&gt;&gt; 10.0**200 == 10.0**200 + 10.0**184
False
</snippet></ROW><ROW><id>2986161</id><snippet>&gt;&gt;&gt; 3.14
3.1400000000000001
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal('3.14')
&gt;&gt;&gt; print decimal.Decimal('3.14')
3.14
# change the precision:
&gt;&gt;&gt; decimal.getcontext().prec = 6
&gt;&gt;&gt; decimal.Decimal(1) / decimal.Decimal(7)
Decimal('0.142857')
&gt;&gt;&gt; decimal.getcontext().prec = 28
&gt;&gt;&gt; decimal.Decimal(1) / decimal.Decimal(7)
Decimal('0.1428571428571428571428571429')
</snippet></ROW><ROW><id>2986184</id><snippet>r"0.00\%"</snippet></ROW><ROW><id>2986184</id><snippet>"0.00\\%"</snippet></ROW><ROW><id>2986184</id><snippet>xlwt</snippet></ROW><ROW><id>2986184</id><snippet>5.00%</snippet></ROW><ROW><id>2986184</id><snippet>0.05</snippet></ROW><ROW><id>2986184</id><snippet>5%</snippet></ROW><ROW><id>2986184</id><snippet>.05</snippet></ROW><ROW><id>2986184</id><snippet>=A1=A2</snippet></ROW><ROW><id>2986184</id><snippet>TRUE</snippet></ROW><ROW><id>2986184</id><snippet>pyExcelerator</snippet></ROW><ROW><id>2986184</id><snippet>myStyleFont.num_format_str = '0.00%'</snippet></ROW><ROW><id>2986184</id><snippet>xlwt</snippet></ROW><ROW><id>2986184</id><snippet>easyxf</snippet></ROW><ROW><id>2986215</id><snippet>H</snippet></ROW><ROW><id>2986215</id><snippet>DepedencyArcHead</snippet></ROW><ROW><id>2986215</id><snippet>T</snippet></ROW><ROW><id>2986215</id><snippet>DependencyArcHead</snippet></ROW><ROW><id>2986215</id><snippet>_getListArcTailsWithCourse</snippet></ROW><ROW><id>2986215</id><snippet>H*T</snippet></ROW><ROW><id>2986215</id><snippet>result</snippet></ROW><ROW><id>2986215</id><snippet>H*T</snippet></ROW><ROW><id>2986215</id><snippet>_traverseForwards</snippet></ROW><ROW><id>2986215</id><snippet>H</snippet></ROW><ROW><id>2986215</id><snippet>H</snippet></ROW><ROW><id>2986215</id><snippet>T</snippet></ROW><ROW><id>2986347</id><snippet>xml.etree</snippet></ROW><ROW><id>2986422</id><snippet>import urllib

def download(url, bytes = 1024):
    """Copy the contents of a file from a given URL
    to a local file.
    """
    webFile = urllib.urlopen(url)
    localFile = open(url.split('/')[-1], 'w')
    localFile.write(webFile.read(bytes))
    webFile.close()
    localFile.close()
</snippet></ROW><ROW><id>2986426</id><snippet>sys.modules.values()</snippet></ROW><ROW><id>2986426</id><snippet>dir()</snippet></ROW><ROW><id>2986426</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def foo():
...     import csv
...     fubar = 0
...     print dir()
...
&gt;&gt;&gt; foo()
['csv', 'fubar'] # 're' is not in the current scope
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2986507</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>2986507</id><snippet>python -c "import setuptools; execfile('setup.py')" develop
</snippet></ROW><ROW><id>2986955</id><snippet>forloop</snippet></ROW><ROW><id>2986955</id><snippet>withmap</snippet></ROW><ROW><id>2986955</id><snippet>* 100</snippet></ROW><ROW><id>2986955</id><snippet>]</snippet></ROW><ROW><id>2986955</id><snippet>$ py26 -mtimeit -s'import co' 'co.forloop()'
10000 loops, best of 3: 202 usec per loop
$ py26 -mtimeit -s'import co' 'co.withmap()'
10 loops, best of 3: 601 usec per loop
</snippet></ROW><ROW><id>2986955</id><snippet>map</snippet></ROW><ROW><id>2986955</id><snippet>for</snippet></ROW><ROW><id>2986955</id><snippet>def thebest():
  entries = [d['key2'] for d in list if d['key1']]
  return len(entries), sum(entries)
</snippet></ROW><ROW><id>2986955</id><snippet>forloop</snippet></ROW><ROW><id>2986996</id><snippet>numerator</snippet></ROW><ROW><id>2986996</id><snippet>denominator</snippet></ROW><ROW><id>2986996</id><snippet>__add__</snippet></ROW><ROW><id>2986996</id><snippet>__sub__</snippet></ROW><ROW><id>2986996</id><snippet>__mul__</snippet></ROW><ROW><id>2986996</id><snippet>__div__</snippet></ROW><ROW><id>2986996</id><snippet>fractions</snippet></ROW><ROW><id>2987260</id><snippet>base64</snippet></ROW><ROW><id>2987260</id><snippet>email</snippet></ROW><ROW><id>2987260</id><snippet>RFC3977</snippet></ROW><ROW><id>2987260</id><snippet>StringIO</snippet></ROW><ROW><id>2987260</id><snippet>post()</snippet></ROW><ROW><id>2987260</id><snippet>email.Message</snippet></ROW><ROW><id>2987260</id><snippet>as_string()</snippet></ROW><ROW><id>2987334</id><snippet># transactional session
Session = sessionmaker(transactional=True)
sess = Session()
</snippet></ROW><ROW><id>2987334</id><snippet>sess.commit()</snippet></ROW><ROW><id>2987334</id><snippet>sess.rollback()</snippet></ROW><ROW><id>2987352</id><snippet>views</snippet></ROW><ROW><id>2987352</id><snippet>__init__.py</snippet></ROW><ROW><id>2987352</id><snippet>views.py</snippet></ROW><ROW><id>2987352</id><snippet>urls.py</snippet></ROW><ROW><id>2987372</id><snippet>.decode</snippet></ROW><ROW><id>2987372</id><snippet>unicode</snippet></ROW><ROW><id>2987372</id><snippet>&gt;&gt;&gt; 'D\xc3\xa9cor'.decode('utf-8')
u'D\xe9cor'
</snippet></ROW><ROW><id>2987372</id><snippet>'D\\xc3\\xa9cor'</snippet></ROW><ROW><id>2987372</id><snippet>&gt;&gt;&gt; 'D\xc3\xa9cor'.decode('string-escape').decode('utf-8')
u'D\xe9cor'
&gt;&gt;&gt; 'D\\xc3\\xa9cor'.decode('string-escape').decode('utf-8')
u'D\xe9cor'
&gt;&gt;&gt; u'D\\xc3\\xa9cor'.decode('string-escape').decode('utf-8')
u'D\xe9cor'
</snippet></ROW><ROW><id>2987372</id><snippet>unicode</snippet></ROW><ROW><id>2987372</id><snippet>str</snippet></ROW><ROW><id>2987372</id><snippet>&gt;&gt;&gt; def conv(s):
...   if isinstance(s, unicode):
...     s = s.encode('iso-8859-1')
...   return s.decode('string-escape').decode('utf-8')
... 
&gt;&gt;&gt; map(conv, [u'D\\xc3\\xa9cor', u'D\xc3\xa9cor', 'D\\xc3\\xa9cor', 'D\xc3\xa9cor'])
[u'D\xe9cor', u'D\xe9cor', u'D\xe9cor', u'D\xe9cor']
</snippet></ROW><ROW><id>2987975</id><snippet>is</snippet></ROW><ROW><id>2987975</id><snippet>is</snippet></ROW><ROW><id>2987975</id><snippet>is</snippet></ROW><ROW><id>2987975</id><snippet>is</snippet></ROW><ROW><id>2987975</id><snippet>("a" * 100) is ("a" * 100)</snippet></ROW><ROW><id>2988117</id><snippet>==</snippet></ROW><ROW><id>2988117</id><snippet>is</snippet></ROW><ROW><id>2988117</id><snippet>is</snippet></ROW><ROW><id>2988117</id><snippet>if x == True:
    # do something
</snippet></ROW><ROW><id>2988117</id><snippet>if x:
    # do something
</snippet></ROW><ROW><id>2988117</id><snippet>None</snippet></ROW><ROW><id>2988117</id><snippet>is None</snippet></ROW><ROW><id>2988117</id><snippet>== None</snippet></ROW><ROW><id>2988278</id><snippet>with open(filename) as f:
  while True:
    c = f.read(1)
    if not c:
      print "End of file"
      break
    print "Read a character:", c
</snippet></ROW><ROW><id>2988353</id><snippet>def clean_line(line):
    return re.sub(r'[ ]{2,}', ' ', re.sub(r'[\r\n]', '', line))

html_content = get_html_div_from_above()
para = BeautifulSoup(html_content)
''.join([clean_line(line) for line in para.findAll(text=True)])
</snippet></ROW><ROW><id>2988353</id><snippet>u'Available in French and English.  '
</snippet></ROW><ROW><id>2988503</id><snippet>after(delay_ms, callback, args)</snippet></ROW><ROW><id>2988503</id><snippet>from Tkinter import *
from time import strftime

class App(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.label_var = StringVar()
        self.label = Label(self, textvariable=self.label_var)
        self.label.pack()
        # Start the loop
        self.go()

    def go(self):
        self.label_var.set(strftime("%H:%M:%S"))
        # The callback is only called once, so call it every time
        self.after(1000, self.go)

app = App()
mainloop()
</snippet></ROW><ROW><id>2988764</id><snippet>&gt;&gt;&gt; try:
...     1/0
... except Exception, e:
...    print e
... 
integer division or modulo by zero
</snippet></ROW><ROW><id>2988764</id><snippet>&gt;&gt;&gt; try:
...     1/0
... except Exception as e:
...    print e
... 
integer division or modulo by zero
</snippet></ROW><ROW><id>2989049</id><snippet>Book.objects.all().delete()</snippet></ROW><ROW><id>2989149</id><snippet>class Recipe(models.Model):
    name = models.TextField(blank=False)
    ingredients = models.ManyToManyField(Ingredient, through='Components')

class Ingredient(models.Model):
    name = models.TextField(blank=False)
    slug = models.SlugField(blank=True)

class Components(models.Model):
    recipe = models.ForeignKey(Recipe)
    ingredient = models.ForeignKey(Ingredient)
    quantity = models.DecimalField()
</snippet></ROW><ROW><id>2989149</id><snippet>cake=Recipe.objects.create(name="Simple Cake")
</snippet></ROW><ROW><id>2989149</id><snippet>egg = Ingredient.objects.create(name="Egg")
milk = Ingredient.objects.create(name="milk")
</snippet></ROW><ROW><id>2989149</id><snippet>cake_ing1 = Components.objects.create(recipe=cake, ingredient=egg,quantity = 2)  
cake_ing2 = Components.objects.create(recipe=cake, ingredient=milk,quantity = 200)
</snippet></ROW><ROW><id>2989149</id><snippet>cake = Recipe.objects.get(name = "Simple Cake")
components_cake = Components.objects.get(recipe = cake)
</snippet></ROW><ROW><id>2989178</id><snippet># code not tested, only for demonstration.
# maintenancemiddleware.py
from django.conf.settings import MAINTENANCE

class MaintenanceMiddleware(object):
    def process_request(self, request):
        if MAINTENANCE:
           # redirect to a static url (like /media/maintenancemode.html)
</snippet></ROW><ROW><id>2989390</id><snippet>cogen</snippet></ROW><ROW><id>2989390</id><snippet>greenlet</snippet></ROW><ROW><id>2989390</id><snippet>greenlet</snippet></ROW><ROW><id>2989390</id><snippet>cogen</snippet></ROW><ROW><id>2989390</id><snippet>from cogen.core.coroutines import coroutine
from cogen.core.schedulers import Scheduler
from cogen.core import events

@coroutine
def test1():
    print 12
    yield events.AddCoro(test2)
    yield events.WaitForSignal(test1)
    print 34

@coroutine
def test2():
    print 56
    yield events.Signal(test1)
    yield events.WaitForSignal(test2)
    print 78

sched = Scheduler()
sched.add(test1)
sched.run()

&gt;&gt;&gt; 12
&gt;&gt;&gt; 56
&gt;&gt;&gt; 34
</snippet></ROW><ROW><id>2989390</id><snippet>greenlet</snippet></ROW><ROW><id>2989390</id><snippet>WaitForSignal</snippet></ROW><ROW><id>2989390</id><snippet>KidA% jython test.py 
12
56
34
</snippet></ROW><ROW><id>2989432</id><snippet>cherrypy.engine.start(); cherrypy.server.wait()</snippet></ROW><ROW><id>2989432</id><snippet>cherrypy.server.bus.states</snippet></ROW><ROW><id>2989509</id><snippet>import logging
log = logging.getLogger(__name__)
log.info("Whatever your info message.")
</snippet></ROW><ROW><id>2989509</id><snippet>%(name)s</snippet></ROW><ROW><id>2989509</id><snippet>%(process)d</snippet></ROW><ROW><id>2989509</id><snippet>%(thread)d</snippet></ROW><ROW><id>2989509</id><snippet>import logging
logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s %(process)d/%(threadName)s: %(message)s")
logging.getLogger('this.is.the.module').warning('Testing for SO')
</snippet></ROW><ROW><id>2989509</id><snippet>2010-06-07 08:43:10,494 WARNING this.is.the.module 14980/MainThread: Testing for SO
</snippet></ROW><ROW><id>2989589</id><snippet>class Instrument(models.Model):
    name = models.CharField(max_length=100)

class Musician(models.Model):
    firstname = models.CharField(max_length=100)
    instrument = models.ForeignKey(Instrument)
</snippet></ROW><ROW><id>2989589</id><snippet>&gt;&gt;&gt; c = Cube(['instrument__name', 'firstname'], Musician.objects.all(), len)
... #Cube(dimensions, queryset, aggregation_function)
... #You can use the Django field-lookup syntax for dates and foreign keys !!!
</snippet></ROW><ROW><id>2989589</id><snippet>&gt;&gt;&gt; c.measure_dict('firstname', 'instrument__name', full=False) == {
...     'Miles': {
...         'trumpet': {'measure': 1},
...         'sax': {'measure': 0},
...         'piano': {'measure': 0},
...     },
...     'John': {
...         'trumpet': {'measure': 0},
...         'sax': {'measure': 1},
...         'piano': {'measure': 4},
...     },
... }
</snippet></ROW><ROW><id>2989605</id><snippet>write</snippet></ROW><ROW><id>2989605</id><snippet>'is the'</snippet></ROW><ROW><id>2989605</id><snippet>None</snippet></ROW><ROW><id>2989777</id><snippet>twitter_url = 'twitter.com/%(username)s/' % {'username': 'dir01'}
</snippet></ROW><ROW><id>2989777</id><snippet>import re

def format_to_re(format):
    # Replace Python string formatting syntax with named group re syntax.
    return re.compile(re.sub(r'%\((\w+)\)s', r'(?P&lt;\1&gt;\w+)', format))

twitter_format = 'twitter.com/%(username)s/'
twitter_re = format_to_re(twitter_format)

m = twitter_re.search('twitter.com/dir01/')
print m.groupdict()
print twitter_format % m.groupdict()
</snippet></ROW><ROW><id>2989777</id><snippet>{'username': 'dir01'}
twitter.com/dir01/
</snippet></ROW><ROW><id>2989777</id><snippet>Pattern</snippet></ROW><ROW><id>2989914</id><snippet>class CounterExample(object):

    instances_created = 0

    def __init__(self):
        CounterExample.instances_created += 1

    def __del__(self):
        """ If you want to track the current number of instances
            you can add a hook in __del__. Otherwise use
            __init__ and just count up.
        """
        CounterExample.instances_created -= 1
</snippet></ROW><ROW><id>2989923</id><snippet>url(r'^register/(?P&lt;success_url&gt;[\w\/]+)/$',
    register,
    { 'backend': 'registration.backends.default.DefaultBackend' },
    name='registration_register'),
</snippet></ROW><ROW><id>2989923</id><snippet>r'^register/(?P&lt;success_url&gt;\w+)/$'
reverse('url_name', args=[my_success_url])
reverse('url_name', kwargs={'success_url': my_success_url}) // both work and do the same

r'^register/(\w+)/$'
reverse('url_name', args=[my_success_url]) // only this works
</snippet></ROW><ROW><id>2989923</id><snippet>r'^register/(?P&lt;success_url&gt;[\w\/]+(((\?)([a-zA-Z]*=\w*)){1}((&amp;)([a-zA-Z]*=\w*))*)?)/$'
</snippet></ROW><ROW><id>2990027</id><snippet>itertools.product</snippet></ROW><ROW><id>2990027</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; map(''.join, itertools.product(*letters))
apj
apk
apl
aqj
aqk
aql
...etc...
csk
csl
</snippet></ROW><ROW><id>2990152</id><snippet>for i in xrange(0,10,2):
  print(i)
</snippet></ROW><ROW><id>2990152</id><snippet>range</snippet></ROW><ROW><id>2990492</id><snippet>def __init__(self, parent, id=-1, NORM_BMP, PUSH_BMP, MOUSE_OVER_BMP, text="", 
                pos, size, **kwargs)
</snippet></ROW><ROW><id>2990492</id><snippet>def __init__(self, parent, NORM_BMP, PUSH_BMP, MOUSE_OVER_BMP, 
                pos, size, id=-1, text="", **kwargs)
</snippet></ROW><ROW><id>2990607</id><snippet>time.time()</snippet></ROW><ROW><id>2990607</id><snippet>heapq</snippet></ROW><ROW><id>2990607</id><snippet>wait()</snippet></ROW><ROW><id>2990607</id><snippet>notify()</snippet></ROW><ROW><id>2990682</id><snippet>import re
password = raw_input("Enter string to test: ")
if re.match(r'[A-Za-z0-9@#$%^&amp;+=]{8,}', password):
    # match
else:
    # no match
</snippet></ROW><ROW><id>2990682</id><snippet>{8,}</snippet></ROW><ROW><id>2990682</id><snippet>.match</snippet></ROW><ROW><id>2990997</id><snippet>strip</snippet></ROW><ROW><id>2990997</id><snippet>.</snippet></ROW><ROW><id>2990997</id><snippet>g</snippet></ROW><ROW><id>2990997</id><snippet>z</snippet></ROW><ROW><id>2991056</id><snippet>import cStringIO
imgData = cStringIO.StringIO()
pylab.savefig(imgData, format='png')

# rewind the data
imgData.seek(0)

print "Content-Type: image/png\n"
print

print imgData.read()
</snippet></ROW><ROW><id>2991338</id><snippet>let s:pp = strpart($VIMRUNTIME, 0, strlen($VIMRUNTIME)-strridx($VIMRUNTIME, "DropBox")+1) . "\\Apps\\PortablePython_1.1_py2.5.4\\App"
if (has('win32') || has('win64')) &amp;&amp; isdirectory(s:pp) 
    let $PATH .= ';' . s:pp 
endif 
</snippet></ROW><ROW><id>2992592</id><snippet>sudo apt-get install ecryptfs-utils
ecryptfs-setup-private
</snippet></ROW><ROW><id>2992592</id><snippet>mount -t ecryptfs ~/.Private ~/Private
</snippet></ROW><ROW><id>2992592</id><snippet>umount ~/Private
</snippet></ROW><ROW><id>2993025</id><snippet>def contents(self):
    return [action for action in dir(self) if all(
        not action in ['contents','start_response'],
        not action.startswith('_'),
        callable(action))]</snippet></ROW><ROW><id>2993025</id><snippet>.contents()</snippet></ROW><ROW><id>2993030</id><snippet>A</snippet></ROW><ROW><id>2993030</id><snippet>x</snippet></ROW><ROW><id>2993030</id><snippet>min ||A*x|| s.t. ||x|| = 1</snippet></ROW><ROW><id>2993030</id><snippet>[U S V] = svd(A)</snippet></ROW><ROW><id>2993030</id><snippet>V</snippet></ROW><ROW><id>2993030</id><snippet>x</snippet></ROW><ROW><id>2993030</id><snippet>U =

     -0.23024     -0.23241      0.28225     -0.59968     -0.04403     -0.67213
      -0.1818     -0.16426      0.18132      0.39639      0.83929     -0.21343
     -0.69008     -0.59685     -0.18202      0.10908     -0.20664      0.28255
     -0.65033      0.73984    -0.066702     -0.12447     0.088364       0.0442
  -0.00045131    -0.043887      0.71552     -0.32745       0.1436      0.59855
     -0.12164      0.11611       0.5813      0.59046     -0.47173     -0.25029


S =

       269.62            0            0            0            0            0
            0       4.1038            0            0            0            0
            0            0        1.656            0            0            0
            0            0            0       0.6416            0            0
            0            0            0            0      0.49215            0
            0            0            0            0            0   0.00027528


V =

    -0.002597     -0.11341      0.68728     -0.12654      0.70622    0.0050325
   -0.0024567     0.018021       0.4439      0.85217     -0.27644    0.0028357
   -0.0036713      -0.1539      0.55281      -0.4961      -0.6516   0.00013067
      -0.9999    -0.011204   -0.0068651    0.0013713    0.0014128    0.0052698
    0.0030264      0.17515      0.02341    -0.020917   -0.0054032      0.98402
     0.012996     -0.96557     -0.15623      0.10603     0.014754      0.17788
</snippet></ROW><ROW><id>2993030</id><snippet>x =

    0.0050325
    0.0028357
   0.00013067
    0.0052698
      0.98402
      0.17788
</snippet></ROW><ROW><id>2993030</id><snippet>||A*x|| = 0.00027528</snippet></ROW><ROW><id>2993030</id><snippet>x</snippet></ROW><ROW><id>2993030</id><snippet>||A*x_old|| = 0.079442</snippet></ROW><ROW><id>2993343</id><snippet>robot.submit(wavelet)</snippet></ROW><ROW><id>2993434</id><snippet>$ nm _spread.so | grep _ZN17ssrcspread_v1_0_67Mailbox11ZeroTimeoutE
     U __ZN17ssrcspread_v1_0_67Mailbox11ZeroTimeoutE
     U __ZN17ssrcspread_v1_0_67Mailbox11ZeroTimeoutE
</snippet></ROW><ROW><id>2993434</id><snippet>U</snippet></ROW><ROW><id>2993562</id><snippet>void MyView::contextMenuEvent ( QContextMenuEvent * event )
{
    QModelIndex index = indexAt(event-&gt;pos());
    if (index.data(Qt::UserRole + NEEDS_CONTEXT_MENU_ROLE_OFFSET).toBool())
        // display context menu
    else
        // don't display context menu
}
</snippet></ROW><ROW><id>2993764</id><snippet>pipe = Popen(["program", "arg1", "arg2"])
pipe.wait()
</snippet></ROW><ROW><id>2993839</id><snippet>\b</snippet></ROW><ROW><id>2993839</id><snippet>\r</snippet></ROW><ROW><id>2994050</id><snippet>find . -type f -size 63c -delete
</snippet></ROW><ROW><id>2994258</id><snippet>&gt;&gt;&gt; ['\x80'.decode('cp125' + str(x), 'replace') for x in range(9)]
[u'\u20ac', u'\u0402', u'\u20ac', u'\u20ac', u'\u20ac', u'\u20ac', u'\u20ac', u'\u20ac', u'\u20ac']
</snippet></ROW><ROW><id>2994258</id><snippet>open(fname).read()</snippet></ROW><ROW><id>2994258</id><snippet>cp1252</snippet></ROW><ROW><id>2994286</id><snippet>hashes</snippet></ROW><ROW><id>2994286</id><snippet>hashes = set(hashes)</snippet></ROW><ROW><id>2994302</id><snippet> self.Button1 = Custom_Button(self, parent, -1, 
                              "D:/Documents/Python/Normal.bmp", 
                              "D:/Documents/Python/Clicked.bmp",
                              "D:/Documents/Python/Over.bmp",
                              wx.Point(200,200), wx.Size(300,100))
</snippet></ROW><ROW><id>2994302</id><snippet>from Custom_Button import Custom_Button
</snippet></ROW><ROW><id>2994323</id><snippet>timsort</snippet></ROW><ROW><id>2994323</id><snippet>O(N)</snippet></ROW><ROW><id>2994323</id><snippet>handlers</snippet></ROW><ROW><id>2994323</id><snippet>def handle_request(req):
    for h in handlers:
        if h[1].handles(req):
            h[0] += 1
            handlers.sort(reverse=True)
            break
    else:
        return None
    return h[1]
</snippet></ROW><ROW><id>2994323</id><snippet>def handle_request(req):
    for i, h in enumerate(handlers):
        if h[1].handles(req):
            h[0] += 1
            for j in reversed(range(i+1)):
                if handlers[j][0] &lt;= h[0]:
                    break
            if j &lt; i:
                handlers[j+1:i+1] = handlers[j:i]
                handlers[j] = h
            break
    else:
        return None
    return h[1]
</snippet></ROW><ROW><id>2994323</id><snippet>sort</snippet></ROW><ROW><id>2994370</id><snippet>class Room(db.Model):
    users = db.StringListProperty()

def join(userId):
    def _transaction():
        room = Room.get_by_key_name('room_1')
        if room is None:
            room = Room(key_name = 'room_1', users = [])
        room.users.append(userId)
        room.put()
        return room.users
    return db.run_in_transaction(_transaction)
</snippet></ROW><ROW><id>2994714</id><snippet>saving_tree</snippet></ROW><ROW><id>2994714</id><snippet>global</snippet></ROW><ROW><id>2994714</id><snippet>__init__</snippet></ROW><ROW><id>2994714</id><snippet>global saving_tree</snippet></ROW><ROW><id>2994714</id><snippet>global</snippet></ROW><ROW><id>2994714</id><snippet>class BinaryDecisionTree(object):
    saving_tree = None
    def __init__ ...
        ...
        BinaryDecisionTree.saving_tree = ...
</snippet></ROW><ROW><id>2994714</id><snippet>global</snippet></ROW><ROW><id>2994714</id><snippet>class</snippet></ROW><ROW><id>2994714</id><snippet>global</snippet></ROW><ROW><id>2996026</id><snippet>while myprocess.poll() is None:
    print "Still working"
    sleep a while
</snippet></ROW><ROW><id>2996170</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>2996956</id><snippet># Python:

import my_compiled_module

def log_it(level, msg):
    print "%s: Oh, look: %s" % (level, msg)

my_compiled_module.logger = log_it

# C

static void log_it(unsigned int level, char * msg)
{
    PyObject * args = Py_BuildValue("(Is)", level, msg);
    PyObject_Call(log_it, args, NULL);
    Py_DECREF(args);
}
</snippet></ROW><ROW><id>2997035</id><snippet>class MyRecord:
    #....  
    def __getitem__(self, key):
        return getattr(self, key)
</snippet></ROW><ROW><id>2997126</id><snippet>sys.exit(0)
</snippet></ROW><ROW><id>2997126</id><snippet>import sys</snippet></ROW><ROW><id>2997126</id><snippet>sys</snippet></ROW><ROW><id>2997236</id><snippet>from gdata.youtube import service
VIDEO_ID = 'IcVqemzfyYs'
yt_service = service.YouTubeService(email=my_email,
                                password=my_password,
                                client_id=my_client_id,
                                source=my_source,
                                developer_key=my_developer_key)
yt_service.ProgrammaticLogin()
userfeed = yt_service.GetYouTubeUserFeed(username=my_email[:my_email.index('@')])
video_entry = reduce(lambda e1, e2: e1 if e1.id.text.endswith(VIDEO_ENTRY) else (e2 if e2.id.text.endswith(VIDEO_ENTRY) else None),
                     userfeed.entry)
</snippet></ROW><ROW><id>2997336</id><snippet>import pprint

dictionary = {
    4388464: ['getting'],
    43881: ['got'],
    827862 : ['Taruma', 'Varuna'],
}

d2 = {}

def add_it(d, k, words):
    knum = int(k[0])
    if len(k) == 1:
        d[knum] = {'words': words}
    else:
        dsub = d.setdefault(knum, {})
        add_it(dsub, k[1:], words)

for k, words in dictionary.items():
    add_it(d2, list(str(k)), words)


pprint.pprint(d2)
</snippet></ROW><ROW><id>2997336</id><snippet>{4: {3: {8: {8: {1: {'words': ['got']},
                 4: {6: {4: {'words': ['getting']}}}}}}},
 8: {2: {7: {8: {6: {2: {'words': ['Taruma', 'Varuna']}}}}}}}
</snippet></ROW><ROW><id>2997432</id><snippet>import decorator

@decorator.decorator
def mydecorator(f,*args, **kwargs):
    return f(*args, **kwargs)

@mydecorator
def myfunction(a,b,c):
    '''My docstring'''
    pass

help(myfunction)
# Help on function myfunction in module __main__:

# myfunction(a, b, c)
#     My docstring
</snippet></ROW><ROW><id>2997735</id><snippet>date_list = Note.objects.all().dates('created', 'year')

for years in date_list:
    Note.objects.filter(created__year = years.year)
</snippet></ROW><ROW><id>2997846</id><snippet>&gt;&gt;&gt; ts = time.mktime(time.strptime('20040412234551', '%Y%m%d%H%M%S'))
&gt;&gt;&gt; ts
1081809951.0
&gt;&gt;&gt; datetime.datetime.fromtimestamp(ts)
datetime.datetime(2004, 4, 12, 23, 45, 51)
</snippet></ROW><ROW><id>2997888</id><snippet>\W</snippet></ROW><ROW><id>2997888</id><snippet>\ba\+(?=\W)
</snippet></ROW><ROW><id>2997888</id><snippet>\ba\+(?!\w)
</snippet></ROW><ROW><id>2997888</id><snippet>a+</snippet></ROW><ROW><id>2999051</id><snippet>object</snippet></ROW><ROW><id>2999051</id><snippet>def add_method_call(func, method_name):
    def replacement(self, *args, **kw):
        getattr(self, method_name)()
        return func(self, *args, **kw)
    return replacement

def change_all_attrs(cls, added_method):
    for method_name in dir(cls):
        attr = getattr(cls, method_name)
        if callable(attr):
            setattr(cls, method_name, add_method_call(attr, added_method))

class animals(object):
    ...

change_all_attrs(animals, '_internalMethod')
</snippet></ROW><ROW><id>2999051</id><snippet>dir()</snippet></ROW><ROW><id>2999051</id><snippet>callable(attr)</snippet></ROW><ROW><id>2999051</id><snippet>change_all_attrs</snippet></ROW><ROW><id>2999051</id><snippet>change_all_attrs</snippet></ROW><ROW><id>2999274</id><snippet>def _match_function(name):
    def f(matchobj):
        lMatch = matchobj.group(1)
        return "EXTEND WITH &lt;a href='/usecase/%s/%s/'&gt;%s&lt;/a&gt;" % (name, lMatch, lMatch)
    return f

lReturn = re.sub(r'\[usecase:([ \w]+)]', _match_function(pCurrentProjectName), lReturn)
</snippet></ROW><ROW><id>2999447</id><snippet>C:\Python24\python.exe</snippet></ROW><ROW><id>2999447</id><snippet>C:\Python24\python.exe setup.py py2exe
</snippet></ROW><ROW><id>2999447</id><snippet>setup.py py2exe
</snippet></ROW><ROW><id>2999477</id><snippet>"field1"\t"Hello, world"\t"field3"</snippet></ROW><ROW><id>2999477</id><snippet>csv</snippet></ROW><ROW><id>2999477</id><snippet>Sniffer</snippet></ROW><ROW><id>2999477</id><snippet>import csv

csvfile = open("example.csv")
dialect = csv.Sniffer().sniff(csvfile.read(1024))
csvfile.seek(0)
reader = csv.reader(csvfile, dialect)

for line in reader:
    #process line
</snippet></ROW><ROW><id>2999572</id><snippet>"&lt;object(.*)youtube.com/v/(.*)\"(.*)&lt;/object&gt;"</snippet></ROW><ROW><id>2999572</id><snippet>replace("&lt;object(.*)youtube.com/v/(.*)\"(.*)&lt;/object&gt;", '&lt;a href="http://www.youtube.com/watch?v=\\2"&gt;click here&lt;/a&gt;', $str)</snippet></ROW><ROW><id>2999725</id><snippet>$ ldd /usr/bin/vim | grep python
libpython2.5.so.1.0 =&gt; /usr/lib/libpython2.5.so.1.0 (0xb6bcc000)
</snippet></ROW><ROW><id>2999725</id><snippet>vim --version</snippet></ROW><ROW><id>2999725</id><snippet>$ vim --version | tr '-' '\n' | grep python
+python +quickfix +reltime +rightleft +ruby +scrollbind +signs +smartindent 
I/usr/include/python2.5 
L/usr/lib/python2.5/config 
lpython2.5 
</snippet></ROW><ROW><id>2999725</id><snippet>:python</snippet></ROW><ROW><id>2999725</id><snippet>vim --version</snippet></ROW><ROW><id>2999833</id><snippet>__getstate__</snippet></ROW><ROW><id>2999833</id><snippet>__setstate__</snippet></ROW><ROW><id>2999833</id><snippet>http://docs.python.org/library/pickle.html#object.__getstate__</snippet></ROW><ROW><id>2999833</id><snippet>__getstate__</snippet></ROW><ROW><id>2999833</id><snippet>def __getstate__(self):
    d = dict(self.__dict__)
    del d['logger']
    return d
</snippet></ROW><ROW><id>2999833</id><snippet>__setstate__</snippet></ROW><ROW><id>2999833</id><snippet>def __setstate__(self, d):
    self.__dict__.update(d) # I *think* this is a safe way to do it
</snippet></ROW><ROW><id>2999833</id><snippet>__init__</snippet></ROW><ROW><id>2999833</id><snippet>__setstate__</snippet></ROW><ROW><id>2999905</id><snippet>studying</snippet></ROW><ROW><id>2999990</id><snippet>data = [ [ [0 for i in range(4)] for j in range(5)] for k in range(6)]
</snippet></ROW><ROW><id>2999990</id><snippet>for i in range(6):
  for j in range(5):
    data[i][j][0]=read(0)
    data[i][j][1]=read(1)
    data[i][j][2]=read(2)
</snippet></ROW><ROW><id>2999990</id><snippet>read</snippet></ROW><ROW><id>3000534</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>3000534</id><snippet>&gt;&gt;&gt; a = set()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b.add(1)
&gt;&gt;&gt; b
set([1])
&gt;&gt;&gt; a
set([1])
</snippet></ROW><ROW><id>3000534</id><snippet>x[0]</snippet></ROW><ROW><id>3000534</id><snippet>x[1]</snippet></ROW><ROW><id>3000534</id><snippet>x[2]</snippet></ROW><ROW><id>3000534</id><snippet>set</snippet></ROW><ROW><id>3000534</id><snippet>&gt;&gt;&gt; dict.fromkeys(range(2), object())
{0: &lt;object object at 0x1001da080&gt;,
 1: &lt;object object at 0x1001da080&gt;}
</snippet></ROW><ROW><id>3000970</id><snippet>import sys
sys.path.append( "&lt;path_containing_the_other_python_files&gt;" )
</snippet></ROW><ROW><id>3000970</id><snippet>os.path.abspath(__file__)</snippet></ROW><ROW><id>3000970</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>3000970</id><snippet>sys.path</snippet></ROW><ROW><id>3000970</id><snippet>__init__.py</snippet></ROW><ROW><id>3000970</id><snippet>xLibrary</snippet></ROW><ROW><id>3000970</id><snippet>sys.path</snippet></ROW><ROW><id>3000970</id><snippet>from xLibrary import my_module</snippet></ROW><ROW><id>3000970</id><snippet>import my_module</snippet></ROW><ROW><id>3001073</id><snippet> window.geometry('300x200-5+40')
</snippet></ROW><ROW><id>3001164</id><snippet>decor</snippet></ROW><ROW><id>3001164</id><snippet>@bar.decor</snippet></ROW><ROW><id>3001164</id><snippet>class bar(object):
    def __init__(self):
        self.val = 4
    def setVal(self,x):
        self.val = x
    @staticmethod
    def decor(func):
        def increment(self, x):
            return func(self, x) + self.val
        return increment

class foo(bar):
    def __init__(self):
        bar.__init__(self)
    @bar.decor
    def add(self, x):
        return x
</snippet></ROW><ROW><id>3001325</id><snippet>o</snippet></ROW><ROW><id>3001325</id><snippet>(PyObject*)</snippet></ROW><ROW><id>3001325</id><snippet>attr_name</snippet></ROW><ROW><id>3001325</id><snippet>v</snippet></ROW><ROW><id>3001325</id><snippet>PyObject *v = PyLong_FromLong((long) 23);
</snippet></ROW><ROW><id>3001325</id><snippet>23</snippet></ROW><ROW><id>3001325</id><snippet>v</snippet></ROW><ROW><id>3001947</id><snippet>BEGIN;
CREATE TEMP TABLE search_result ON COMMIT DROP AS
  SELECT entity_id
  FROM entity /* long complicated search joins and conditions ... */;
-- Fetch primary entities
SELECT entity_id, entity.x /*, ... */
FROM entity JOIN search_result USING (entity_id);
-- Fetch some related entities
SELECT entity_id, related_entity_id, related_entity.x /*, ... */
FROM related_entity JOIN search_result USING (entity_id);
-- And more, as required
END;
</snippet></ROW><ROW><id>3001998</id><snippet>unicode-escape</snippet></ROW><ROW><id>3001998</id><snippet>repr</snippet></ROW><ROW><id>3001998</id><snippet>repr(unicode_string)</snippet></ROW><ROW><id>3001998</id><snippet>unicode_string.encode('unicode-escape')</snippet></ROW><ROW><id>3001998</id><snippet>unicodeescape_string</snippet></ROW><ROW><id>3002066</id><snippet>BEGIN;
SELECT ...;
END;
</snippet></ROW><ROW><id>3002074</id><snippet>repr</snippet></ROW><ROW><id>3002074</id><snippet>repr</snippet></ROW><ROW><id>3002074</id><snippet>marshal</snippet></ROW><ROW><id>3002074</id><snippet>long</snippet></ROW><ROW><id>3002074</id><snippet>int</snippet></ROW><ROW><id>3002074</id><snippet>repr</snippet></ROW><ROW><id>3002074</id><snippet>repr</snippet></ROW><ROW><id>3002114</id><snippet>progressbar</snippet></ROW><ROW><id>3002114</id><snippet>import progressbar
from time import sleep
bar = progressbar.ProgressBar(maxval=20, \
    widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
for i in xrange(20):
    bar.update(i+1)
    sleep(0.1)
bar.finish()
</snippet></ROW><ROW><id>3002114</id><snippet>easy_install progressbar</snippet></ROW><ROW><id>3002114</id><snippet>pip install progressbar</snippet></ROW><ROW><id>3002378</id><snippet>class Dashboard(webapp.RequestHandler):
    def some_function(self):
        if data['user'].new_user and not self.request.path == '/main/new':
            self.redirect('/main/new')
            return True
        else:
            return False
    def get(self):
        if not self.some_function():
            self.response.out.write('Some output here')
</snippet></ROW><ROW><id>3002378</id><snippet>class BaseHandler(webapp.RequestHandler):
    def some_function(self):
        if data['user'].new_user and not self.request.path == '/main/new':
            self.redirect('/main/new')
            return False
        else:
            return True

class Dashboard(BaseHandler):
    def get(self):
        if not self.some_function():
            self.response.out.write('Some output here')
</snippet></ROW><ROW><id>3002501</id><snippet>f = open("tracks.txt", "r")
# omit empty lines and lines containing only whitespace
lines = [line for line in f if line.strip()]
f.close()
lines.sort()
# now write the output file
</snippet></ROW><ROW><id>3002599</id><snippet>''.join(BeautifulSoup(content).findAll(text=lambda text: 
text.parent.name != "script" and 
text.parent.name != "style"))
</snippet></ROW><ROW><id>3002751</id><snippet>&lt;h3&gt;Notes&lt;/h3&gt;
{% for year, notes in notes.items %}
    {{ year }}
    {% for note in notes %}
        {{ note }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>3002816</id><snippet>doWork(myItem, myParameters)</snippet></ROW><ROW><id>3002821</id><snippet>Ports</snippet></ROW><ROW><id>3002821</id><snippet>Switch</snippet></ROW><ROW><id>3002821</id><snippet>Switch</snippet></ROW><ROW><id>3002821</id><snippet>Ports</snippet></ROW><ROW><id>3002821</id><snippet>onChange()</snippet></ROW><ROW><id>3002821</id><snippet>Ports</snippet></ROW><ROW><id>3002998</id><snippet>ballotFname</snippet></ROW><ROW><id>3002998</id><snippet>reportFname</snippet></ROW><ROW><id>3003061</id><snippet>def inner_html(el):
    return (el.text or '') + ''.join(tostring(child) for child in el)
</snippet></ROW><ROW><id>3003061</id><snippet>.drop_tag()</snippet></ROW><ROW><id>3003061</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>3003105</id><snippet>blist</snippet></ROW><ROW><id>3003105</id><snippet>list</snippet></ROW><ROW><id>3003105</id><snippet>&gt;&gt;&gt; from blist import *
&gt;&gt;&gt; x = blist([0])             # x is a blist with one element
&gt;&gt;&gt; x *= 2**29                 # x is a blist with &gt; 500 million elements
&gt;&gt;&gt; x.append(5)                # append to x
&gt;&gt;&gt; y = x[4:-234234]           # Take a 500 million element slice from x
&gt;&gt;&gt; del x[3:1024]              # Delete a few thousand elements from x
</snippet></ROW><ROW><id>3003105</id><snippet>remove</snippet></ROW><ROW><id>3003105</id><snippet>reverse</snippet></ROW><ROW><id>3003105</id><snippet>count</snippet></ROW><ROW><id>3003106</id><snippet>from sqlobject import sqlhub, connectionForURI

sqlhub.processConnection = connectionForURI(connStr)
</snippet></ROW><ROW><id>3003284</id><snippet>&gt;&gt;&gt; class Normal(object): pass
... 
&gt;&gt;&gt; class MyObject(object, Normal): pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution
order (MRO) for bases object, Normal
</snippet></ROW><ROW><id>3003284</id><snippet>&gt;&gt;&gt; class Derived(Normal): pass
... 
&gt;&gt;&gt; class Ok(Derived, Normal): pass
... 
&gt;&gt;&gt; class Nope(Normal, Derived): pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution
order (MRO) for bases Normal, Derived
</snippet></ROW><ROW><id>3003284</id><snippet>MyMixin</snippet></ROW><ROW><id>3003284</id><snippet>list</snippet></ROW><ROW><id>3003284</id><snippet>&gt;&gt;&gt; MyMixin.__mro__
(&lt;class '__main__.MyMixin'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>3003284</id><snippet>object</snippet></ROW><ROW><id>3003284</id><snippet>MyMixin</snippet></ROW><ROW><id>3003362</id><snippet>type(variable)</snippet></ROW><ROW><id>3003362</id><snippet>if str(type(cursor)) == "&lt;type 'OracleCursor'&gt;":
       ...
</snippet></ROW><ROW><id>3003362</id><snippet>isinstance()</snippet></ROW><ROW><id>3003411</id><snippet>list_2</snippet></ROW><ROW><id>3003411</id><snippet>set</snippet></ROW><ROW><id>3003411</id><snippet>s = set(list_2)
[f for f in list_1 if not f in s]
</snippet></ROW><ROW><id>3003411</id><snippet>x in list</snippet></ROW><ROW><id>3003411</id><snippet>x in set</snippet></ROW><ROW><id>3003411</id><snippet>list(set(list_1).difference(set(list_2)))
</snippet></ROW><ROW><id>3003411</id><snippet>list_1</snippet></ROW><ROW><id>3003667</id><snippet>handlers:
- url: /site/(.+)
  script: site.py
</snippet></ROW><ROW><id>3003667</id><snippet>SiteHandler(webapp.RequestHandler):
    def get(self, site):
        # the site parameter will be what was passed in the URL!
        pass

def main():
    application = webapp.WSGIApplication([('/site/(.+)', SiteHandler)], debug=True)
    util.run_wsgi_app(application)
</snippet></ROW><ROW><id>3003667</id><snippet>/site/</snippet></ROW><ROW><id>3003667</id><snippet>SiteHandler</snippet></ROW><ROW><id>3003667</id><snippet>get()</snippet></ROW><ROW><id>3003667</id><snippet>site</snippet></ROW><ROW><id>3003778</id><snippet>http://127.0.0.1:8000/a/c/f.html/x/y/z?p=1&amp;q=2
</snippet></ROW><ROW><id>3003778</id><snippet>a</snippet></ROW><ROW><id>3003778</id><snippet>c.py</snippet></ROW><ROW><id>3003778</id><snippet>f</snippet></ROW><ROW><id>3003778</id><snippet>x, y, z = tuple(request.args)
p = request.vars['p'] # p=1
q = request.vars['q'] # q=2 
</snippet></ROW><ROW><id>3004308</id><snippet>p = db.StringProperty(choices=set(["aa", "bb", "cc"]))
</snippet></ROW><ROW><id>3004633</id><snippet>import progressbar
from time import sleep

class hello():
    def no(self):
        print 'hello!'

    def yes(self):
        print 'No!!!!!!'

    def __call__(self) :
        methods = [self.no, self.yes]
        return [ (x[0]*100/len(methods), x[1]) for x in  enumerate(methods) ]

def pro():
    bar = progressbar.ProgressBar(widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])

    for percent, method in Yep():
        bar.update(percent)
        method()
        sleep(0.1)
    bar.finish()

if __name__ == "__main__":
    Yep = hello()
    pro()
</snippet></ROW><ROW><id>3004689</id><snippet>class SecondModel(db.Model):
    pass

class FirstModel(db.Model):
    p = db.StringProperty(choices=set(["aa", "bb", "cc"]))
    r=db.ReferenceProperty(SecondModel)

class SecondModel(db.Model):
    r = db.ReferenceProperty(FirstModel)
    s=db.StringProperty()

class sss(webapp.RequestHandler):
  def get(self):
    #'''
    a=FirstModel()
    a.p='cc'
    a.put()
    b=SecondModel()
    b.r=a
    b.s='kkk'
    b.put()

    a.r=b.key()
    a.put()
    #'''
    #a=FirstModel.all().filter('p =','cc').get()
    #b=a.r
    #self.response.out.write(a.secondmodel_set.filter('r = ', a).get().s)
    self.response.out.write(b.r.p+'&lt;br/&gt;'+a.r.s)
</snippet></ROW><ROW><id>3005158</id><snippet>import re

class URLPrefixMiddleware:
    def process_request(self, request):
        request.path = re.sub('^api/','',request.path)
</snippet></ROW><ROW><id>3005249</id><snippet>&lt;exec dir="${path}/scripts" executable="python" failonerror="true"&gt;
    &lt;arg line="log_analysis.py results.log" /&gt;
&lt;/exec&gt;
</snippet></ROW><ROW><id>3005249</id><snippet>failonerror="true"</snippet></ROW><ROW><id>3005405</id><snippet>&lt;tt&gt;</snippet></ROW><ROW><id>3005405</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>3005405</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>3005405</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>3005405</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3005405</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3005843</id><snippet>TSServerProtocol</snippet></ROW><ROW><id>3005843</id><snippet>TSServerProtocol</snippet></ROW><ROW><id>3005843</id><snippet>Factory</snippet></ROW><ROW><id>3005843</id><snippet>TSServerProtocol</snippet></ROW><ROW><id>3006243</id><snippet>key_template.py</snippet></ROW><ROW><id>3006243</id><snippet>domain = 'example.com'
API_KEY = 
</snippet></ROW><ROW><id>3006243</id><snippet>API_KEY</snippet></ROW><ROW><id>3006243</id><snippet>key.py</snippet></ROW><ROW><id>3006243</id><snippet>key.py</snippet></ROW><ROW><id>3006243</id><snippet>ConfigParser</snippet></ROW><ROW><id>3006243</id><snippet>key.py</snippet></ROW><ROW><id>3006332</id><snippet>RequestContext</snippet></ROW><ROW><id>3006429</id><snippet>NewClass.__init__</snippet></ROW><ROW><id>3006429</id><snippet>NewClass.__init__</snippet></ROW><ROW><id>3006429</id><snippet>Foo.__init__</snippet></ROW><ROW><id>3006429</id><snippet>def decorate(cls):
    class NewClass(cls):
        def __init__(self):
            pass
    return NewClass
</snippet></ROW><ROW><id>3006429</id><snippet>def decorate(cls):
    old_do_something = cls.do_something
    def new_do_something(self):
        print "decorated",
        old_do_something(self)

    cls.do_something = new_do_something
    return cls

@decorate
class Foo(object):
    def __init__(self, *args, **kwargs):
        super(Foo, self).__init__(*args, **kwargs)

    def do_something(self):
        print "Foo"

f = Foo()
f.do_something()
</snippet></ROW><ROW><id>3006544</id><snippet>&amp;</snippet></ROW><ROW><id>3006544</id><snippet>and</snippet></ROW><ROW><id>3006544</id><snippet>&amp;</snippet></ROW><ROW><id>3006803</id><snippet>import matplotlib, scipy
fig = matplotlib.figure()
ax = fig.add_axes([0.1,0.1,0.8,0.8])
axicon = fig.add_axes([0.4,0.4,0.1,0.1])
ax.plot(range(5), [4,2,3,5,1])
axicon.imshow(scipy.randn(100,100))
axicon.set_xticks([])
axicon.set_yticks([])
fig.show()
</snippet></ROW><ROW><id>3006866</id><snippet>Pool.imap()</snippet></ROW><ROW><id>3006866</id><snippet>for i in p.imap(do, izip(Fastitr(seqsa, filetype='fastq'), \
        Fastitr(seqsb, filetype='fastq'))):
    pass
</snippet></ROW><ROW><id>3006866</id><snippet>for</snippet></ROW><ROW><id>3006866</id><snippet>pass</snippet></ROW><ROW><id>3006931</id><snippet>dirs</snippet></ROW><ROW><id>3006931</id><snippet>ONE</snippet></ROW><ROW><id>3006931</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; for i in a:
    if i &gt; 1:
        a.remove(i)


&gt;&gt;&gt; a
[1, 3]
</snippet></ROW><ROW><id>3007314</id><snippet>SO_BINDTODEVICE</snippet></ROW><ROW><id>3007314</id><snippet>bind(2)</snippet></ROW><ROW><id>3007314</id><snippet>ifconfig(8)</snippet></ROW><ROW><id>3007314</id><snippet>SO_BROADCAST</snippet></ROW><ROW><id>3007681</id><snippet>DateTimeProperty</snippet></ROW><ROW><id>3007681</id><snippet>import datetime
q = db.GqlQuery("SELECT * FROM LiveData WHERE timestamp &gt; :1", datetime.datetime.now())
</snippet></ROW><ROW><id>3007826</id><snippet>jobs:
 - name: my-media
   ...

 - name: something else
   ...
</snippet></ROW><ROW><id>3007826</id><snippet>jobs:
  my-media:
    frequency: 1 day
    ...
  something-else:
    frequency: 2 day
    ...
</snippet></ROW><ROW><id>3008074</id><snippet>from bzrlib.bzrdir BzrDir

accelerator_tree, source = BzrDir.open_tree_or_branch('http:URL')
source.create_checkout('/tmp/newBzrCheckout', None, True, accelerator_tree)
</snippet></ROW><ROW><id>3008296</id><snippet>&gt;&gt;&gt; gen = (float(line.partition(' ')[0]) for line in open(fname))
&gt;&gt;&gt; min(enumerate(gen), key=lambda x: abs(x[1] - a))
(3, 2.453454)
</snippet></ROW><ROW><id>3008865</id><snippet>urllib.parse</snippet></ROW><ROW><id>3008865</id><snippet>urlparse</snippet></ROW><ROW><id>3008865</id><snippet>str.split()</snippet></ROW><ROW><id>3008865</id><snippet>str.join()</snippet></ROW><ROW><id>3008865</id><snippet>urlparts = url.split('/')

if key.startswith('http://'):
    return key
elif key.startswith('/'):
    return '/'.join(urlparts[:2], key[1:])
else:
    urlparts[len(urlparts) - 1] = key
    return '/'.join(urlparts)
</snippet></ROW><ROW><id>3009110</id><snippet>from string import maketrans

"Abc".translate(maketrans("abcABC", "defDEF"))
</snippet></ROW><ROW><id>3009524</id><snippet># helper
def cl(n, func):
    # return a lambda, that returns a list, where func(tion) is called
    return (lambda: [func() for _ in range(n)])

def matrix(base, *ns):
    # the grid lambda (at the start it returns the base-element)
    grid = lambda: base

    # traverse reversed, to handle the midmost values first
    for n in reversed(ns):
        # assign a new lambda with the last grid within (and call it)
        grid = cl(n, grid)

    return grid() # call the full grid (but the matrix calls you ^^)
</snippet></ROW><ROW><id>3009524</id><snippet>&gt;&gt;&gt; from pprint import pprint as pp
&gt;&gt;&gt; 
&gt;&gt;&gt; matrix(None, 2,3)
[[None, None, None], [None, None, None]]
&gt;&gt;&gt; 
&gt;&gt;&gt; matrix(None, 4,3)
[[None, None, None], [None, None, None], [None, None, None], [None, None, None]]
&gt;&gt;&gt; 
&gt;&gt;&gt; x = matrix(None, 3,5,2)
&gt;&gt;&gt; pp(x)
[[[None, None], [None, None], [None, None], [None, None], [None, None]],
 [[None, None], [None, None], [None, None], [None, None], [None, None]],
 [[None, None], [None, None], [None, None], [None, None], [None, None]]]
&gt;&gt;&gt; x[1][3][0] = "test"
&gt;&gt;&gt; pp(x)
[[[None, None], [None, None], [None, None], [None, None], [None, None]],
 [[None, None], [None, None], [None, None], ['test', None], [None, None]],
 [[None, None], [None, None], [None, None], [None, None], [None, None]]]
</snippet></ROW><ROW><id>3009524</id><snippet>def uniq(base, l):
    # function used to replace all values with the base
    nl = []
    for i in l:
        if type(i) is list:
            nl.append(uniq(base, i)) # recursion for deep lists
        else:
            nl.append(base)
    return nl
</snippet></ROW><ROW><id>3009524</id><snippet># first arg is the base, the 0 inside the [] is just a dummy
# (for what None is the best choice usually)
&gt;&gt;&gt; x = uniq(0, [[[0]]*5]*5)
&gt;&gt;&gt; x[0][3][0] = 5
&gt;&gt;&gt; pp(x)
[[[0], [0], [0], [5], [0]],
 [[0], [0], [0], [0], [0]],
 [[0], [0], [0], [0], [0]],
 [[0], [0], [0], [0], [0]],
 [[0], [0], [0], [0], [0]]]
</snippet></ROW><ROW><id>3009524</id><snippet>np.zeros(s)</snippet></ROW><ROW><id>3009524</id><snippet>s</snippet></ROW><ROW><id>3009524</id><snippet>(3,4,5)</snippet></ROW><ROW><id>3009524</id><snippet>&gt;&gt;&gt; s = (2,2)
&gt;&gt;&gt; np.zeros(s)
array([[ 0.,  0.],
       [ 0.,  0.]])
</snippet></ROW><ROW><id>3009524</id><snippet># functions are already defined ...
import timeit
&gt;&gt;&gt; # Alex Martelli's Code
&gt;&gt;&gt; t1 = timeit.Timer( lambda: multi_dimension_list(None, 3,4,5) )
&gt;&gt;&gt; # the two mentioned above
&gt;&gt;&gt; t2 = timeit.Timer( lambda: matrix(None, 3,4,5) )
&gt;&gt;&gt; t3 = timeit.Timer( lambda: uniq(None, [[[None]*5]*4]*3) )
&gt;&gt;&gt; 
&gt;&gt;&gt; t1.timeit(10000)
2.1910018920898438
&gt;&gt;&gt; t2.timeit(10000)
0.44953203201293945
&gt;&gt;&gt; t3.timeit(10000)
0.48807907104492188
</snippet></ROW><ROW><id>3009840</id><snippet>pygame.display.init()
surface = pygame.display.set_mode((0,0),pygame.FULLSCREEN,0)
</snippet></ROW><ROW><id>3009840</id><snippet>-geometry</snippet></ROW><ROW><id>3009840</id><snippet>mplayer -geometry 640x480+20+20</snippet></ROW><ROW><id>3009954</id><snippet>LD_LIBRARY_PATH=/usr/local/lib python ./hello.py
</snippet></ROW><ROW><id>3010249</id><snippet>{'jack': 4098, 'sjoerd': 4127}</snippet></ROW><ROW><id>3010249</id><snippet>{4098: 'jack', 4127: 'sjoerd'}</snippet></ROW><ROW><id>3010249</id><snippet>dict</snippet></ROW><ROW><id>3010340</id><snippet>#!/usr/bin/perl

# should return a list of "memberUid: name" entries
@uids = `ldapsearch -x -b 'cn=testgroup,cn=groups,dc=ldap,dc=server,dc=com' | grep memberUid:`;

foreach (@uids) {
   $_ =~ s/memberUid: //;  # get rid of the "uid: " part, leaving just the name
   chomp $_;         # get rid of the pesky newline
   system "als -b \"dc=ldap,dc=server,dc=com\" -V uid=$_ &gt;&gt; vcardlist.vcf";
}
</snippet></ROW><ROW><id>3010349</id><snippet>dict((k, mydict[k]) for k in keys_to_select)
</snippet></ROW><ROW><id>3010349</id><snippet>mydict</snippet></ROW><ROW><id>3010349</id><snippet>dict((k, mydict[k]) for k in keys_to_select if k in mydict)
</snippet></ROW><ROW><id>3010510</id><snippet>MyTable.objects.filter(language__isnull=True)
</snippet></ROW><ROW><id>3010522</id><snippet>return lambda x: all( [ f(x) for f in f_array ] )
</snippet></ROW><ROW><id>3010522</id><snippet>return lambda x: all( f(x) for f in f_array )
</snippet></ROW><ROW><id>3010522</id><snippet>lambda</snippet></ROW><ROW><id>3010522</id><snippet>f</snippet></ROW><ROW><id>3010522</id><snippet>def check (x):
    for f in f_array:
        if not f (x):
            return False
    return True

return check
</snippet></ROW><ROW><id>3010522</id><snippet>def combining_function (max_a, min_a):
    constants = { }
    checks    = []

    if max_a is not None:
        constants['max_a'] = max_a
        checks.append ('x.a &lt; max_a')

    if min_a is not None:
        constants['min_a'] = min_a
        checks.append ('x.a &gt; min_a')

    if not checks:
        return lambda x: True
    else:
        func = 'def check (x): return (%s)' % ') and ('.join (checks)
        exec func in constants, constants
        return constants['check']

class X:
    def __init__(self, a):
        self.a = a

check = combining_function (3, 1)
print check (X (0)), check (X (2)), check (X (4))
</snippet></ROW><ROW><id>3010522</id><snippet>exec</snippet></ROW><ROW><id>3010605</id><snippet>GeoPtProperty</snippet></ROW><ROW><id>3010605</id><snippet>BlobProperty</snippet></ROW><ROW><id>3010605</id><snippet>struct.pack('&gt;2f', lat, lon)</snippet></ROW><ROW><id>3010605</id><snippet>GeoPt</snippet></ROW><ROW><id>3010605</id><snippet>struct</snippet></ROW><ROW><id>3010605</id><snippet>struct</snippet></ROW><ROW><id>3010605</id><snippet>GeoPt</snippet></ROW><ROW><id>3010605</id><snippet>CompressedBlobProperty</snippet></ROW><ROW><id>3010621</id><snippet>Process the file line by line.
pick = line, with probability 1/N, where N = line number
</snippet></ROW><ROW><id>3010621</id><snippet>1/1</snippet></ROW><ROW><id>3010621</id><snippet>1/2</snippet></ROW><ROW><id>3010621</id><snippet>1/3</snippet></ROW><ROW><id>3010621</id><snippet>        1            Pick line 1.
       / \
     .5  .5
     /     \
    2       1        Switch to line 2?
   / \     / \
 .67 .33 .33 .67
 /     \ /     \
2       3       1    Switch to line 3?
</snippet></ROW><ROW><id>3010621</id><snippet>Line 1: .5 * .67     = 1/3
Line 2: .5 * .67     = 1/3
Line 3: .5 * .33 * 2 = 1/3
</snippet></ROW><ROW><id>3010621</id><snippet>1/4</snippet></ROW><ROW><id>3010621</id><snippet>1/3 * 3/4 = 1/4</snippet></ROW><ROW><id>3010621</id><snippet>use strict;
use warnings;

# Ignore 5 lines.
&lt;&gt; for 1 .. 5;

# Use reservoir sampling to select pairs from remaining lines.
my (@picks, $n);
until (eof){
    my @lines;
    $lines[$_] = &lt;&gt; for 0 .. 1;

    $n ++;
    @picks = @lines if rand($n) &lt; 1;
}

print @picks;
</snippet></ROW><ROW><id>3010787</id><snippet>yum install mysql-devel
</snippet></ROW><ROW><id>3010804</id><snippet>forms = itertools.izip(base_forms, likes_forms)
</snippet></ROW><ROW><id>3010804</id><snippet>{% for (base_form,like_form) in forms %}
</snippet></ROW><ROW><id>3010809</id><snippet>self.Button1 = customButton.__init__(self, parent, -1)
</snippet></ROW><ROW><id>3010809</id><snippet>self.Button1 = customButton(parent, -1)
</snippet></ROW><ROW><id>3010809</id><snippet>__init__</snippet></ROW><ROW><id>3010919</id><snippet>os</snippet></ROW><ROW><id>3010919</id><snippet>import os
all_files = os.listdir('.') # gets all files in current directory
</snippet></ROW><ROW><id>3010919</id><snippet>os.chdir('path/to/change/to')</snippet></ROW><ROW><id>3010919</id><snippet>os</snippet></ROW><ROW><id>3010950</id><snippet>json</snippet></ROW><ROW><id>3010950</id><snippet>import json
data = json.dumps({'a': 1})
</snippet></ROW><ROW><id>3010978</id><snippet>sys.modules</snippet></ROW><ROW><id>3010978</id><snippet>from ... import</snippet></ROW><ROW><id>3010978</id><snippet>import ... from</snippet></ROW><ROW><id>3010978</id><snippet>script.py</snippet></ROW><ROW><id>3010978</id><snippet>import sys
import types
sys.modules['yay'] = types.ModuleType('yay')

import Log
import foo

yay.log = Log.Log()
foo.foo()
</snippet></ROW><ROW><id>3010978</id><snippet>foo.py</snippet></ROW><ROW><id>3010978</id><snippet>import yay

def foo():
  yay.log.Log('test')
</snippet></ROW><ROW><id>3010978</id><snippet>import this</snippet></ROW><ROW><id>3010978</id><snippet>Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>3011196</id><snippet>urlpatterns</snippet></ROW><ROW><id>3011196</id><snippet>include('urls.ajax')</snippet></ROW><ROW><id>3011196</id><snippet>ajax.urls</snippet></ROW><ROW><id>3011259</id><snippet>self.Layout()</snippet></ROW><ROW><id>3011259</id><snippet>self.GetParent().Layout()</snippet></ROW><ROW><id>3011259</id><snippet>Refresh()</snippet></ROW><ROW><id>3011259</id><snippet>Update()</snippet></ROW><ROW><id>3011654</id><snippet>if self.selectedM.get() =='Options...':</snippet></ROW><ROW><id>3011654</id><snippet>E()</snippet></ROW><ROW><id>3011654</id><snippet>TL</snippet></ROW><ROW><id>3011654</id><snippet>F()</snippet></ROW><ROW><id>3011654</id><snippet>TL</snippet></ROW><ROW><id>3011708</id><snippet>def readlinenum(filepath, n, BUFSIZ=65536):
  bufs = [None] * 2
  previous_lines = lines_so_far = 0
  with open(filepath, 'b') as f
    while True:
      bufs[0] = f.read(BUFSIZ)
      if not bufs[0]:
        raise ValueError('File %s has only %d lines, not %d',
                         filepath, lines_so_far, n)
      lines_this_block = bufs[0].count('\n')
      updated_lines_count = lines_so_far + lines_this_block
      if n &lt; updated_lines_count:
          break
      previous_lines = lines_so_far
      lines_so_far = updated_lines_count
      bufs[1] = bufs[0]
    if n == lines_so_far:
      # line split between blocks
      buf = bufs[1] + bufs[0]
      delta = n - previous_lines
    else:  # normal case
      buf = bufs[0]
      delta = n = lines_so_far
    f = cStringIO.StringIO(buf)
    for i, line in enumerate(f):
      if i == delta: break
    return line.rstrip()
</snippet></ROW><ROW><id>3011708</id><snippet>.count</snippet></ROW><ROW><id>3011708</id><snippet>linecache</snippet></ROW><ROW><id>3011708</id><snippet>'U'</snippet></ROW><ROW><id>3011708</id><snippet>$ wc kjv.txt
  114150  821108 4834378 kjv.txt
</snippet></ROW><ROW><id>3011708</id><snippet>$ python -mtimeit 'f=open("kjv.txt", "rb")' 'f.seek(0); f.read()'
100 loops, best of 3: 13.9 msec per loop
$ python -mtimeit 'f=open("kjv.txt", "rU")' 'f.seek(0); f.read()'
10 loops, best of 3: 39.2 msec per loop
</snippet></ROW><ROW><id>3011708</id><snippet>$ python -mtimeit 'f=open("kjv.txt", "rU")' 'f.seek(0)' 'for x in f: pass'
10 loops, best of 3: 54.6 msec per loop
</snippet></ROW><ROW><id>3011708</id><snippet>readline</snippet></ROW><ROW><id>3011708</id><snippet>$ python -mtimeit 'f=open("kjv.txt", "rU")' 'f.seek(0); x=1' 'while x: x=f.readline()'
10 loops, best of 3: 81.1 msec per loop
</snippet></ROW><ROW><id>3011708</id><snippet>kjv.txt</snippet></ROW><ROW><id>3011708</id><snippet>readline</snippet></ROW><ROW><id>3011781</id><snippet>a</snippet></ROW><ROW><id>3011781</id><snippet>b</snippet></ROW><ROW><id>3011781</id><snippet>b + a</snippet></ROW><ROW><id>3011781</id><snippet>a + b</snippet></ROW><ROW><id>3011781</id><snippet>or</snippet></ROW><ROW><id>3011862</id><snippet>filename = input ("filename: ");
with open (filename, "w") as f:
  f.write (input ());
</snippet></ROW><ROW><id>3011894</id><snippet>import scipy
import pylab
import scipy.cluster.hierarchy as sch

# Generate random features and distance matrix.
x = scipy.rand(40)
D = scipy.zeros([40,40])
for i in range(40):
    for j in range(40):
        D[i,j] = abs(x[i] - x[j])

# Compute and plot first dendrogram.
fig = pylab.figure(figsize=(8,8))
ax1 = fig.add_axes([0.09,0.1,0.2,0.6])
Y = sch.linkage(D, method='centroid')
Z1 = sch.dendrogram(Y, orientation='right')
ax1.set_xticks([])
ax1.set_yticks([])

# Compute and plot second dendrogram.
ax2 = fig.add_axes([0.3,0.71,0.6,0.2])
Y = sch.linkage(D, method='single')
Z2 = sch.dendrogram(Y)
ax2.set_xticks([])
ax2.set_yticks([])

# Plot distance matrix.
axmatrix = fig.add_axes([0.3,0.1,0.6,0.6])
idx1 = Z1['leaves']
idx2 = Z2['leaves']
D = D[idx1,:]
D = D[:,idx2]
im = axmatrix.matshow(D, aspect='auto', origin='lower', cmap=pylab.cm.YlGnBu)
axmatrix.set_xticks([])
axmatrix.set_yticks([])

# Plot colorbar.
axcolor = fig.add_axes([0.91,0.1,0.02,0.6])
pylab.colorbar(im, cax=axcolor)
fig.show()
fig.savefig('dendrogram.png')
</snippet></ROW><ROW><id>3011894</id><snippet>cmap</snippet></ROW><ROW><id>3011894</id><snippet>imshow</snippet></ROW><ROW><id>3011894</id><snippet>YlGnBu</snippet></ROW><ROW><id>3011894</id><snippet>add_axes</snippet></ROW><ROW><id>3011894</id><snippet>(left, bottom, width, height)</snippet></ROW><ROW><id>3011894</id><snippet>(0.5,0,0.5,1)</snippet></ROW><ROW><id>3011894</id><snippet>Axes</snippet></ROW><ROW><id>3011894</id><snippet>(0,0.5,1,0.5)</snippet></ROW><ROW><id>3011894</id><snippet>Axes</snippet></ROW><ROW><id>3011894</id><snippet>add_subplot</snippet></ROW><ROW><id>3011894</id><snippet>add_axes</snippet></ROW><ROW><id>3011894</id><snippet>add_axes([left,bottom,width,height], frame_on=False)</snippet></ROW><ROW><id>3012034</id><snippet>encode()</snippet></ROW><ROW><id>3012034</id><snippet>nodeValue.encode("utf-8")</snippet></ROW><ROW><id>3012034</id><snippet>nodeValue</snippet></ROW><ROW><id>3012034</id><snippet>open()</snippet></ROW><ROW><id>3012034</id><snippet>with open("uiStrings-fi.py", "w", "utf-8") as f:
</snippet></ROW><ROW><id>3012034</id><snippet>open()</snippet></ROW><ROW><id>3012034</id><snippet>codecs</snippet></ROW><ROW><id>3012034</id><snippet>from codecs import open
</snippet></ROW><ROW><id>3012034</id><snippet>nodeValue.encode("utf-8")</snippet></ROW><ROW><id>3012034</id><snippet>names[i]</snippet></ROW><ROW><id>3012034</id><snippet>values[i]</snippet></ROW><ROW><id>3012034</id><snippet>values[i]</snippet></ROW><ROW><id>3012034</id><snippet>names[i]</snippet></ROW><ROW><id>3012034</id><snippet>names[i].encode("utf-8")</snippet></ROW><ROW><id>3012034</id><snippet>names[i]</snippet></ROW><ROW><id>3012034</id><snippet>values[i]</snippet></ROW><ROW><id>3012034</id><snippet>unicode</snippet></ROW><ROW><id>3012185</id><snippet>for(i=0; i&lt;=80; i++) {
   char name[32];
   memset(name, 0, sizeof(name));
   FILE *fp;
   sprintf(name, "TF%d.txt", i);
   fp = fopen(name, "r");
   /* Do something */
  }
</snippet></ROW><ROW><id>3012590</id><snippet>import multiprocessing

MAX_PARALLEL_TASKS = 8 # I have an Intel Core i7 :)

pool = multiprocessing.Pool(MAX_PARALLEL_TASKS)

pool.map_async(convertfile, filelist)

pool.close()
pool.join()
</snippet></ROW><ROW><id>3012590</id><snippet>map_async</snippet></ROW><ROW><id>3012590</id><snippet>convertfile</snippet></ROW><ROW><id>3012590</id><snippet>convertfile</snippet></ROW><ROW><id>3012862</id><snippet>request.SESSION['login_tries'] = 1
</snippet></ROW><ROW><id>3012862</id><snippet>request.SESSioN['login_tries'] = 2
</snippet></ROW><ROW><id>3012921</id><snippet>with</snippet></ROW><ROW><id>3012921</id><snippet>open</snippet></ROW><ROW><id>3012921</id><snippet>with</snippet></ROW><ROW><id>3012921</id><snippet>with</snippet></ROW><ROW><id>3012921</id><snippet>with</snippet></ROW><ROW><id>3012921</id><snippet>with</snippet></ROW><ROW><id>3012921</id><snippet>with open(filename) as fp:</snippet></ROW><ROW><id>3012921</id><snippet>with lock:</snippet></ROW><ROW><id>3012921</id><snippet>lock</snippet></ROW><ROW><id>3012921</id><snippet>threading.Lock</snippet></ROW><ROW><id>3012921</id><snippet>contextmanager</snippet></ROW><ROW><id>3012921</id><snippet>contextlib</snippet></ROW><ROW><id>3012921</id><snippet>from contextlib import contextmanager
import os


@contextmanager
def working_directory(path):
    current_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(current_dir)


with working_directory("data/stuff"):
    # do something within data/stuff
# here I am back again in the original working directory
</snippet></ROW><ROW><id>3012921</id><snippet>sys.stdin</snippet></ROW><ROW><id>3012921</id><snippet>sys.stdout</snippet></ROW><ROW><id>3012921</id><snippet>sys.stderr</snippet></ROW><ROW><id>3012921</id><snippet>from contextlib import contextmanager
import sys


@contextmanager
def redirected(**kwds):
    stream_names = ["stdin", "stdout", "stderr"]
    old_streams = {}
    try:
        for sname in stream_names:
            stream = kwds.get(sname, None)
            if stream is not None and stream != getattr(sys, sname):
                old_streams[sname] = getattr(sys, sname)
                setattr(sys, sname, stream)
        yield
    finally:
        for sname, stream in old_streams.iteritems():
            setattr(sys, sname, stream)


with redirected(stdout=open("/tmp/log.txt", "w")):
     # these print statements will go to /tmp/log.txt
     print "Test entry 1"
     print "Test entry 2"
# back to the normal stdout
print "Back to normal stdout again"
</snippet></ROW><ROW><id>3012921</id><snippet>from tempfile import mkdtemp
from shutil import rmtree


@contextmanager
def temporary_dir(*args, **kwds):
    name = mkdtemp(*args, **kwds)
    try:
        yield name
    finally:
        shutil.rmtree(name)


with temporary_dir() as dirname:
    # do whatever you want
</snippet></ROW><ROW><id>3013199</id><snippet>&gt;&gt;&gt; xi = linspace(min(X), max(X))
&gt;&gt;&gt; yi = linspace(min(Y), max(Y))
&gt;&gt;&gt; zi = griddata(X, Y, Z, xi, yi)
&gt;&gt;&gt; contour(xi, yi, zi)
</snippet></ROW><ROW><id>3013199</id><snippet>&gt;&gt;&gt; from mpl_toolkits.mplot3d import Axes3D
&gt;&gt;&gt; fig = figure()
&gt;&gt;&gt; ax = Axes3D(fig)
&gt;&gt;&gt; xim, yim = meshgrid(xi, yi)
&gt;&gt;&gt; ax.plot_surface(xim, yim, zi)
&gt;&gt;&gt; show()

&gt;&gt;&gt; help(meshgrid(x, y))
    Return coordinate matrices from two coordinate vectors.
    [...]
    Examples
    --------
    &gt;&gt;&gt; X, Y = np.meshgrid([1,2,3], [4,5,6,7])
    &gt;&gt;&gt; X
    array([[1, 2, 3],
           [1, 2, 3],
           [1, 2, 3],
           [1, 2, 3]])
    &gt;&gt;&gt; Y
    array([[4, 4, 4],
           [5, 5, 5],
           [6, 6, 6],
           [7, 7, 7]])
</snippet></ROW><ROW><id>3013199</id><snippet>&gt;&gt;&gt; fig = figure()
&gt;&gt;&gt; ax = Axes3D(fig)
&gt;&gt;&gt; ax.contour(xi, yi, zi) # ax.contourf for filled contours
&gt;&gt;&gt; show()
</snippet></ROW><ROW><id>3013246</id><snippet>element.tag</snippet></ROW><ROW><id>3013246</id><snippet>&gt;&gt;&gt; xml = """\
... &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
... &lt;Book&gt;
...   &lt;Page&gt;
...     &lt;Text&gt;Blah&lt;/Text&gt;
...   &lt;/Page&gt;
... &lt;/Book&gt;
... """
&gt;&gt;&gt; import xml.etree.cElementTree as ET
&gt;&gt;&gt; root = ET.fromstring(xml)
&gt;&gt;&gt; element = root.getchildren()[0].getchildren()[0]
&gt;&gt;&gt; element.tag
'Text'
&gt;&gt;&gt; element.text
'Blah'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3013509</id><snippet>class ExcludedDateForm(ModelForm):
    class Meta:
        model = models.ExcludedDate
        exclude = ('user', 'recurring',)
    def __init__(self, user=None, **kwargs):
        super(ExcludedDateForm, self).__init__(**kwargs)
        if user:
            self.fields['category'].queryset = models.Category.objects.filter(user=user)
</snippet></ROW><ROW><id>3013509</id><snippet>form = ExcludedDateForm(user=request.user)
</snippet></ROW><ROW><id>3013686</id><snippet>value</snippet></ROW><ROW><id>3013686</id><snippet>value</snippet></ROW><ROW><id>3013686</id><snippet>def filterbyvalue(seq, value):
   for el in seq:
       if el.attribute==value: yield el
</snippet></ROW><ROW><id>3013862</id><snippet>QString QDomElement::attribute ( const QString &amp; name, const QString &amp; defValue = QString() ) const
</snippet></ROW><ROW><id>3013862</id><snippet>QDomNamedNodeMap QDomElement::attributes () const
</snippet></ROW><ROW><id>3013862</id><snippet>QDomNode QDomNamedNodeMap::item ( int index ) const
</snippet></ROW><ROW><id>3013862</id><snippet>QDomAttr QDomNode::toAttr () const
</snippet></ROW><ROW><id>3013862</id><snippet>QString name () const
</snippet></ROW><ROW><id>3013910</id><snippet>def lazyprop(fn):
    attr_name = '_lazy_' + fn.__name__
    @property
    def _lazyprop(self):
        if not hasattr(self, attr_name):
            setattr(self, attr_name, fn(self))
        return getattr(self, attr_name)
    return _lazyprop


class Test(object):

    @lazyprop
    def a(self):
        print 'generating "a"'
        return range(5)
</snippet></ROW><ROW><id>3013910</id><snippet>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.__dict__
{}
&gt;&gt;&gt; t.a
generating "a"
[0, 1, 2, 3, 4]
&gt;&gt;&gt; t.__dict__
{'_lazy_a': [0, 1, 2, 3, 4]}
&gt;&gt;&gt; t.a
[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>3013937</id><snippet>extended_chars = srange(r"[\0x80-\0x7FF]")
special_chars = ' -'''
name = Word(alphanums + alphas8bit + extended_chars + special_chars)
</snippet></ROW><ROW><id>3013937</id><snippet>extended_chars</snippet></ROW><ROW><id>3013937</id><snippet>special chars</snippet></ROW><ROW><id>3013937</id><snippet>greetingInGreek.py</snippet></ROW><ROW><id>3013937</id><snippet>extended_chars = u''.join(unichr(c) for c in xrange(127, 65536, 1))
</snippet></ROW><ROW><id>3014160</id><snippet>set_yticks()</snippet></ROW><ROW><id>3014160</id><snippet>import scipy, pylab
fig = pylab.figure()
ax = fig.add_subplot(1,1,1)
ax.plot(scipy.randn(8))
ax.set_yticks(scipy.arange(-1.5,1.5,0.25))
fig.show()
</snippet></ROW><ROW><id>3014160</id><snippet>pylab.yticks()</snippet></ROW><ROW><id>3014186</id><snippet>import glob, os
def solution():
    for fn in glob.glob("*_text.exe"):
        os.startfile(fn)
</snippet></ROW><ROW><id>3014708</id><snippet>myFTP.retrlines(command)
myFTP.dir(someDir)
</snippet></ROW><ROW><id>3014708</id><snippet>myFTP.retrlines(command, retrlinesCallback)
myFTP.dir(someDir, dirCallback)
</snippet></ROW><ROW><id>3014708</id><snippet>retrlinesCallback</snippet></ROW><ROW><id>3014708</id><snippet>dirCallback</snippet></ROW><ROW><id>3015037</id><snippet>&gt;&gt;&gt; m = 'Some Text That exists version 1.0.41.476 Fri Jun  4 16:50:56 EDT 2010'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'version (\S+)', m).group(1)
('1.0.41.476',)
</snippet></ROW><ROW><id>3015466</id><snippet>z = zipfile.ZipFile(targetFile, 'w')
(path, filename) = os.path.split(sourceFile)
bytes = file(sourceFile, 'rb')
info = zipfile.ZipInfo(filename)
info.external_attr = 33
z.writestr(info, bytes.read())
bytes.close()
z.close()
</snippet></ROW><ROW><id>3015466</id><snippet>z = zipfile.ZipFile(sourceFile, 'r')
info = z.getinfo('fileToTest.ext')
print ("create_system", info.create_system)
print ("external_attr", info.external_attr)
print ("internal_attr", info.internal_attr)
</snippet></ROW><ROW><id>3016070</id><snippet>datetime</snippet></ROW><ROW><id>3016070</id><snippet>TIME_ZONE = 'America/Phoenix'  
DATETIME_FORMAT = 'm-d-Y H:m:s T'
DATE_FORMAT = _('m-d-Y')       
JS_DATE_FORMAT = _('mm-dd-yy')
PERC_DATE_FORMAT = _('%m-%d-%Y')
</snippet></ROW><ROW><id>3016335</id><snippet>def save_formset(self, request, form, formset, change):
    if formset.model != InlineModel:
        return super(MainModelAdmin, self).save_formset(request, form, formset, change)
    instances = formset.save(commit=False)
    for instance in instances:
        if not instance.pk:
            instance.user = request.user
        instance.save()
    formset.save_m2m()
</snippet></ROW><ROW><id>3016820</id><snippet>interface</snippet></ROW><ROW><id>3016820</id><snippet>d2=Device("Bar")
</snippet></ROW><ROW><id>3016820</id><snippet>interface</snippet></ROW><ROW><id>3016820</id><snippet>Device</snippet></ROW><ROW><id>3016820</id><snippet>__init__</snippet></ROW><ROW><id>3016820</id><snippet>class Device(object):
    def __init__(self, port):
        self.interface=Interface()
        self.value1=Value(self.interface, name="value1")
        self.value2=Value(self.interface, name="value2")
        self.interface.port=port
</snippet></ROW><ROW><id>3016868</id><snippet>socket.recv()</snippet></ROW><ROW><id>3016868</id><snippet>recv</snippet></ROW><ROW><id>3016868</id><snippet>EINTR</snippet></ROW><ROW><id>3016868</id><snippet>SIGINT</snippet></ROW><ROW><id>3016868</id><snippet>recv()</snippet></ROW><ROW><id>3016868</id><snippet>recv()</snippet></ROW><ROW><id>3016868</id><snippet>SIGINT</snippet></ROW><ROW><id>3016868</id><snippet>socket.error</snippet></ROW><ROW><id>3016868</id><snippet>errno.EINTR</snippet></ROW><ROW><id>3016868</id><snippet>import errno

try:
    # do something
    result = conn.recv(bufsize)
except socket.error as (code, msg):
    if code != errno.EINTR:
        raise
</snippet></ROW><ROW><id>3017353</id><snippet>class MyRecord(Base):
     __tablename__ = "myrecord"

     id = Column(Integer, primary_key=True)
     data = Column(Unicode, nullable=False)
</snippet></ROW><ROW><id>3017775</id><snippet>iplist = []

# With takes care of all the fun file handling stuff (closing, etc.)
with open('ips.txt', 'r') as f:
    for line in f:
        iplist.append(line.strip())   # Gets rid of the newlines at the end

# Change the above to this for Python versions &lt; 2.6
f = open('ips.txt', 'r')
for line in f:
    iplist.append(line.strip())
f.close()

newip = '192.168.1.2'

if newip not in iplist:
    f = open('ips.txt', 'a') # append mode, please
    f.write(newip+'\n')
</snippet></ROW><ROW><id>3017775</id><snippet>iplist.append(newip)</snippet></ROW><ROW><id>3017837</id><snippet>function revealCite() {
  var cites_index = $("#myText").data("cites_index");

  // if no cached index exists, prepare one (one-time hit code section)
  if (!cites_index) {
    var cites = $("#myNotes cite");
    var cites_count = cites.length();
    var cites_index = {};

    for (var i=0; i&lt;cites_count; i++) {
      var cite = cites[i], group = cites_index[cite.className];
      if (!group) cites_index[cite.className] = [];
      group.push(cite);
    }
    $("#myText").data("cites_index", cites_index);
  }

  // use the index to work with related elements ("this" must be an &lt;a&gt; element)
  $(cites_index[this.className]).show();
}
</snippet></ROW><ROW><id>3017837</id><snippet>$("#myText a").each(revealCite);
</snippet></ROW><ROW><id>3017837</id><snippet>cites.each( function() {
  var group = cites_index[this.className];
  if (!group) cites_index[this.className] = [];
  group.push(this);
});
</snippet></ROW><ROW><id>3018000</id><snippet>QLineEdit</snippet></ROW><ROW><id>3018000</id><snippet>text</snippet></ROW><ROW><id>3018000</id><snippet>self.</snippet></ROW><ROW><id>3018000</id><snippet>import sys
from PyQt4.QtCore import SIGNAL
from PyQt4.QtGui import QDialog, QApplication, QPushButton, QLineEdit, QFormLayout

class Form(QDialog):
    def __init__(self, parent=None):
        super(Form, self).__init__(parent)

        self.le = QLineEdit()
        self.le.setObjectName("host")
        self.le.setText("Host")

        self.pb = QPushButton()
        self.pb.setObjectName("connect")
        self.pb.setText("Connect") 

        layout = QFormLayout()
        layout.addWidget(self.le)
        layout.addWidget(self.pb)

        self.setLayout(layout)
        self.connect(self.pb, SIGNAL("clicked()"),self.button_click)
        self.setWindowTitle("Learning")

    def button_click(self):
        # shost is a QString object
        shost = self.le.text()
        print shost


app = QApplication(sys.argv)
form = Form()
form.show()
app.exec_()
</snippet></ROW><ROW><id>3018380</id><snippet>from pylab import *
NUM_COLORS = 22

cm = get_cmap('gist_rainbow')
for i in range(NUM_COLORS):
    color = cm(1.*i/NUM_COLORS)  # color will now be an RGBA tuple

# or if you really want a generator:
cgen = (cm(1.*i/NUM_COLORS) for i in range(NUM_COLORS))
</snippet></ROW><ROW><id>3018621</id><snippet>man bash</snippet></ROW><ROW><id>3018621</id><snippet>ssh</snippet></ROW><ROW><id>3018621</id><snippet>-t</snippet></ROW><ROW><id>3018621</id><snippet>ssh -t somehost ~/bashplay/f
</snippet></ROW><ROW><id>3018777</id><snippet>import</snippet></ROW><ROW><id>3018777</id><snippet>.pyc</snippet></ROW><ROW><id>3018837</id><snippet>request[][site]
request[][datastream]
request[][facility]
request[][date]
</snippet></ROW><ROW><id>3018837</id><snippet>foreach($_POST as $request) {
    $theSiteForThisRequest = $request["site"];
    $theDatastreamForThisRequest = $request["datastream"];
    $theFacilityForThisRequest = $request["site"];
    $theDateForThisRequest = $request["date"];
}
</snippet></ROW><ROW><id>3018837</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>3018837</id><snippet>$('#yourSubmitButton').bind('click', function () {
    $('#yourForm').submit();
});
</snippet></ROW><ROW><id>3019027</id><snippet>int(log10(x))+1
</snippet></ROW><ROW><id>3019027</id><snippet>import math

def precision_and_scale(x):
    max_digits = 14
    int_part = int(abs(x))
    magnitude = 1 if int_part == 0 else int(math.log10(int_part)) + 1
    if magnitude &gt;= max_digits:
        return (magnitude, 0)
    frac_part = abs(x) - int_part
    multiplier = 10 ** (max_digits - magnitude)
    frac_digits = multiplier + int(multiplier * frac_part + 0.5)
    while frac_digits % 10 == 0:
        frac_digits /= 10
    scale = int(math.log10(frac_digits))
    return (magnitude + scale, scale)
</snippet></ROW><ROW><id>3019087</id><snippet>unsigned long long</snippet></ROW><ROW><id>3019110</id><snippet>list</snippet></ROW><ROW><id>3019110</id><snippet>dict</snippet></ROW><ROW><id>3019110</id><snippet>list</snippet></ROW><ROW><id>3019110</id><snippet>key</snippet></ROW><ROW><id>3019110</id><snippet>&gt;&gt;&gt; l = ['A','B','C','D']
&gt;&gt;&gt; for index, item in enumerate(l):
...     print index
...     print item
... 
0
A
1
B
2
C
3
D
</snippet></ROW><ROW><id>3019110</id><snippet>list</snippet></ROW><ROW><id>3019110</id><snippet>l</snippet></ROW><ROW><id>3019110</id><snippet>dict</snippet></ROW><ROW><id>3019110</id><snippet>&gt;&gt;&gt; d = {0: 'apple', 1: 'banana', 2: 'cherry', 3: 'damson', }
&gt;&gt;&gt; for k in d:
...     print k
...     print d[k]
... 
0
apple
1
banana
2
cherry
3
damson
</snippet></ROW><ROW><id>3019131</id><snippet>freetds.conf</snippet></ROW><ROW><id>3019131</id><snippet>TDSVER</snippet></ROW><ROW><id>3019264</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>3019264</id><snippet>s = [1, 2, 3, 4, 5, 6]</snippet></ROW><ROW><id>3019264</id><snippet>iter(s)</snippet></ROW><ROW><id>3019264</id><snippet>listiterator</snippet></ROW><ROW><id>3019264</id><snippet>s</snippet></ROW><ROW><id>3019264</id><snippet>[iter(s)] * n</snippet></ROW><ROW><id>3019264</id><snippet>iter(s)</snippet></ROW><ROW><id>3019264</id><snippet>[iter(s)] * 2 = [&lt;listiterator object&gt;, &lt;listiterator object&gt;]</snippet></ROW><ROW><id>3019264</id><snippet>zip</snippet></ROW><ROW><id>3019264</id><snippet>zip([1,2], [3,4], [5,6]) = [(1, 3, 5), (2, 4, 6)]</snippet></ROW><ROW><id>3019264</id><snippet>(1, 3, 5)</snippet></ROW><ROW><id>3019264</id><snippet>zip</snippet></ROW><ROW><id>3019264</id><snippet>(2, 4, 6)</snippet></ROW><ROW><id>3019264</id><snippet>zip</snippet></ROW><ROW><id>3019264</id><snippet>*</snippet></ROW><ROW><id>3019264</id><snippet>*[iter(s)]*n</snippet></ROW><ROW><id>3019264</id><snippet>[iter(s)]*n</snippet></ROW><ROW><id>3019264</id><snippet>zip</snippet></ROW><ROW><id>3019264</id><snippet>n</snippet></ROW><ROW><id>3019264</id><snippet>zip(&lt;listiterator object&gt;, &lt;listiterator object&gt;)</snippet></ROW><ROW><id>3019264</id><snippet>zip</snippet></ROW><ROW><id>3019264</id><snippet>(1, 2)</snippet></ROW><ROW><id>3019264</id><snippet>(3, 4)</snippet></ROW><ROW><id>3019264</id><snippet>(5, 6)</snippet></ROW><ROW><id>3019264</id><snippet>[(1, 2), (3, 4), (5, 6)]</snippet></ROW><ROW><id>3019396</id><snippet>&gt;&gt;&gt; print u'\u2033'.translate({0x2033:u'd'})
d
</snippet></ROW><ROW><id>3019396</id><snippet>u'\2033'</snippet></ROW><ROW><id>3019396</id><snippet>u'\u2033'</snippet></ROW><ROW><id>3019396</id><snippet>u'\203'+u'3'</snippet></ROW><ROW><id>3019396</id><snippet>u'\203'</snippet></ROW><ROW><id>3019396</id><snippet>u'\x83'</snippet></ROW><ROW><id>3019396</id><snippet>2033</snippet></ROW><ROW><id>3019396</id><snippet>0x2033</snippet></ROW><ROW><id>3019396</id><snippet>\u&lt;i&gt;xxxx&lt;/i&gt;</snippet></ROW><ROW><id>3019396</id><snippet>0x2033</snippet></ROW><ROW><id>3019396</id><snippet>string.translate</snippet></ROW><ROW><id>3019396</id><snippet>translate</snippet></ROW><ROW><id>3019396</id><snippet>string</snippet></ROW><ROW><id>3019396</id><snippet>.translate</snippet></ROW><ROW><id>3019577</id><snippet>r'(?:^|\W)(-\w+)'
</snippet></ROW><ROW><id>3019577</id><snippet>\w</snippet></ROW><ROW><id>3019877</id><snippet>os.walk</snippet></ROW><ROW><id>3019932</id><snippet>('A','B','C','D','E')</snippet></ROW><ROW><id>3019932</id><snippet>list</snippet></ROW><ROW><id>3019932</id><snippet>tuple</snippet></ROW><ROW><id>3019932</id><snippet>thetuple = ('A','B','C','D','E')
print thetuple[0]
</snippet></ROW><ROW><id>3019932</id><snippet>A</snippet></ROW><ROW><id>3019932</id><snippet>thetuple[0]</snippet></ROW><ROW><id>3019986</id><snippet>.svn</snippet></ROW><ROW><id>3019986</id><snippet>os.chmod()</snippet></ROW><ROW><id>3019986</id><snippet>stat.S_IWRITE</snippet></ROW><ROW><id>3019986</id><snippet>.svn</snippet></ROW><ROW><id>3020213</id><snippet>$ ls -lR
total 32
-rw-r--r--  1 aleax  staff    0 Jun 10 21:20 __init__.py
drwxr-xr-x  4 aleax  staff  136 Jun 10 21:28 a
-rw-r-----@ 1 aleax  staff  107 Jun 10 21:27 app.yaml
-rw-r--r--  1 aleax  staff   21 Jun 10 21:20 cc.py
-rw-r--r--  1 aleax  staff  471 Jun 10 21:25 index.yaml
-rw-r--r--  1 aleax  staff   75 Jun 10 21:20 main.py

./a:
total 8
-rw-r--r--  1 aleax  staff    0 Jun 10 21:20 __init__.py
-rw-r--r--  1 aleax  staff  130 Jun 10 21:20 aa.py
</snippet></ROW><ROW><id>3020213</id><snippet>$ for f in main.py cc.py a/aa.py; do echo "File: $f"; cat $f; echo; done
File: main.py
print 'Content-Type: text/plain'
print ''
print 'in main'
from a import aa

File: cc.py
print 'in cc'
c = 23

File: a/aa.py
import os, sys
dirname=os.path.dirname
path=os.path.join(dirname(dirname(__file__)))
sys.path.insert(0,path)
import cc
print cc.c
$ 
</snippet></ROW><ROW><id>3020213</id><snippet>in main
in cc
23
</snippet></ROW><ROW><id>3020286</id><snippet>.py</snippet></ROW><ROW><id>3020286</id><snippet>msvcrt</snippet></ROW><ROW><id>3020286</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3020286</id><snippet>mmap</snippet></ROW><ROW><id>3020286</id><snippet>subprocess</snippet></ROW><ROW><id>3020286</id><snippet>/</snippet></ROW><ROW><id>3020286</id><snippet>\</snippet></ROW><ROW><id>3020393</id><snippet>try:
    f = float(thing)
except ValueError:
    # This is not a float
    f = 0.0
</snippet></ROW><ROW><id>3020393</id><snippet>ValueError</snippet></ROW><ROW><id>3020430</id><snippet>QuerySet.only()</snippet></ROW><ROW><id>3020430</id><snippet>QuerySet.defer()</snippet></ROW><ROW><id>3020717</id><snippet>def bigproduct(*args):
  newargs = [xrange(x) for x in args]
  return itertools.product(*newargs)

for i in bigproduct(3, 2, 4):
   ....
</snippet></ROW><ROW><id>3020717</id><snippet>range()</snippet></ROW><ROW><id>3020717</id><snippet>xrange()</snippet></ROW><ROW><id>3020759</id><snippet>QTextBrowser</snippet></ROW><ROW><id>3020759</id><snippet>QObject *parent;
...
QString program = "/path/to/browser";
QStringList arguments;
arguments &lt;&lt; "--your-browser-url-option-if-any" &lt;&lt; "http://www.example.com";

QProcess *myProcess = new QProcess(parent);
myProcess-&gt;start(program, arguments);
</snippet></ROW><ROW><id>3020988</id><snippet>except Exception, detail:
</snippet></ROW><ROW><id>3021241</id><snippet>import urllib

URL = "http://host.domain.tld/resource"
XML = "&lt;xml /&gt;"

parameter = urllib.urlencode({'XML': XML})
</snippet></ROW><ROW><id>3021241</id><snippet>response = urllib.urlopen(URL, parameter)
print response.read()
</snippet></ROW><ROW><id>3021241</id><snippet>response = urllib.urlopen(URL + "?%s" % parameter)
print response.read()
</snippet></ROW><ROW><id>3021662</id><snippet>[x for n in getNeighbors(vertex) for x in getNeighbors(n)]
</snippet></ROW><ROW><id>3021662</id><snippet>sum(getNeighbors(n) for n in getNeighbors(vertex), [])
</snippet></ROW><ROW><id>3021969</id><snippet>h(x,y) = x+y
h(x,y) = x*y
h(x,y)  = x * y + (x ^ y)
h(x,y) = x *y + x + y
</snippet></ROW><ROW><id>3022159</id><snippet>sudo port install py-mysql
</snippet></ROW><ROW><id>3022316</id><snippet>(env)zifot@localhost:~/stackoverflow$ cat stackoverflow.py

engine_string = ''

from sqlalchemy import Table, Column, String, Integer, MetaData, create_engine
import sqlalchemy.orm as orm
import datetime

engine = create_engine(engine_string, echo = True)
meta = MetaData(bind = engine)

foo_table = Table('foo', meta,
    Column('id', String(3), primary_key=True),
    Column('description', String(64), nullable=False),
    Column('calculated_value', Integer, nullable=False),
)

meta.drop_all()
meta.create_all()

class MyExt(orm.interfaces.SessionExtension):
    def before_commit(self, session):
        for obj in session:
            if isinstance(obj, Foo):
                obj.calculated_value = datetime.datetime.now().second + 10

Session = orm.sessionmaker(extension = MyExt())()
Session.configure(bind = engine)

class Foo(object):
    def __init__(self, id, description):
        self.id = id
        self.description = description

orm.mapper(Foo, foo_table)

(env)zifot@localhost:~/stackoverflow$ ipython
Python 2.5.2 (r252:60911, Jan  4 2009, 17:40:26)
Type "copyright", "credits" or "license" for more information.

IPython 0.10 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object'. ?object also works, ?? prints more.

In [1]: from stackoverflow import *
2010-06-11 13:19:30,925 INFO sqlalchemy.engine.base.Engine.0x...11cc select version()
2010-06-11 13:19:30,927 INFO sqlalchemy.engine.base.Engine.0x...11cc {}
2010-06-11 13:19:30,935 INFO sqlalchemy.engine.base.Engine.0x...11cc select current_schema()
2010-06-11 13:19:30,936 INFO sqlalchemy.engine.base.Engine.0x...11cc {}
2010-06-11 13:19:30,965 INFO sqlalchemy.engine.base.Engine.0x...11cc select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=current_schema() and lower(relname)=%(name)s
2010-06-11 13:19:30,966 INFO sqlalchemy.engine.base.Engine.0x...11cc {'name': u'foo'}
2010-06-11 13:19:30,979 INFO sqlalchemy.engine.base.Engine.0x...11cc
DROP TABLE foo
2010-06-11 13:19:30,980 INFO sqlalchemy.engine.base.Engine.0x...11cc {}
2010-06-11 13:19:30,988 INFO sqlalchemy.engine.base.Engine.0x...11cc COMMIT
2010-06-11 13:19:30,997 INFO sqlalchemy.engine.base.Engine.0x...11cc select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=current_schema() and lower(relname)=%(name)s
2010-06-11 13:19:30,999 INFO sqlalchemy.engine.base.Engine.0x...11cc {'name': u'foo'}
2010-06-11 13:19:31,007 INFO sqlalchemy.engine.base.Engine.0x...11cc
CREATE TABLE foo (
        id VARCHAR(3) NOT NULL,
        description VARCHAR(64) NOT NULL,
        calculated_value INTEGER NOT NULL,
        PRIMARY KEY (id)
)


2010-06-11 13:19:31,009 INFO sqlalchemy.engine.base.Engine.0x...11cc {}
2010-06-11 13:19:31,025 INFO sqlalchemy.engine.base.Engine.0x...11cc COMMIT

In [2]: f = Foo('idx', 'foo')

In [3]: f.calculated_value

In [4]: Session.add(f)

In [5]: f.calculated_value

In [6]: Session.commit()
2010-06-11 13:19:57,668 INFO sqlalchemy.engine.base.Engine.0x...11cc BEGIN
2010-06-11 13:19:57,674 INFO sqlalchemy.engine.base.Engine.0x...11cc INSERT INTO foo (id, description, calculated_value) VALUES (%(id)s, %(description)s, %(calculated_value)s)
2010-06-11 13:19:57,675 INFO sqlalchemy.engine.base.Engine.0x...11cc {'description': 'foo', 'calculated_value': 67, 'id': 'idx'}
2010-06-11 13:19:57,683 INFO sqlalchemy.engine.base.Engine.0x...11cc COMMIT

In [7]: f.calculated_value
2010-06-11 13:20:00,755 INFO sqlalchemy.engine.base.Engine.0x...11cc BEGIN
2010-06-11 13:20:00,759 INFO sqlalchemy.engine.base.Engine.0x...11cc SELECT foo.id AS foo_id, foo.description AS foo_description, foo.calculated_value AS foo_calculated_value
FROM foo
WHERE foo.id = %(param_1)s
2010-06-11 13:20:00,761 INFO sqlalchemy.engine.base.Engine.0x...11cc {'param_1': 'idx'}
Out[7]: 67

In [8]: f.calculated_value
Out[8]: 67

In [9]: Session.commit()
2010-06-11 13:20:08,366 INFO sqlalchemy.engine.base.Engine.0x...11cc UPDATE foo SET calculated_value=%(calculated_value)s WHERE foo.id = %(foo_id)s
2010-06-11 13:20:08,367 INFO sqlalchemy.engine.base.Engine.0x...11cc {'foo_id': u'idx', 'calculated_value': 18}
2010-06-11 13:20:08,373 INFO sqlalchemy.engine.base.Engine.0x...11cc COMMIT

In [10]: f.calculated_value
2010-06-11 13:20:10,475 INFO sqlalchemy.engine.base.Engine.0x...11cc BEGIN
2010-06-11 13:20:10,479 INFO sqlalchemy.engine.base.Engine.0x...11cc SELECT foo.id AS foo_id, foo.description AS foo_description, foo.calculated_value AS foo_calculated_value
FROM foo
WHERE foo.id = %(param_1)s
2010-06-11 13:20:10,481 INFO sqlalchemy.engine.base.Engine.0x...11cc {'param_1': 'idx'}
Out[10]: 18
</snippet></ROW><ROW><id>3022432</id><snippet>sha</snippet></ROW><ROW><id>3022432</id><snippet>md5</snippet></ROW><ROW><id>3022432</id><snippet>from hashlib import sha256
from random import random
random_key = random()
sha256('%s%s%s'%('YOUR SECRET KEY',random_key,password))
</snippet></ROW><ROW><id>3022449</id><snippet>number_of_rows = len(table.findAll(lambda tag: tag.name == 'tr' and tag.findParent('table') == table))
</snippet></ROW><ROW><id>3022698</id><snippet>lines = []
while True:
    user_input = raw_input()
    if user_input.strip() == "": # empty line signals stop
        break
    lines.append(user_input)
</snippet></ROW><ROW><id>3022698</id><snippet>lines = raw_input().split(";")
</snippet></ROW><ROW><id>3022727</id><snippet>touch</snippet></ROW><ROW><id>3023569</id><snippet>CanvasItems</snippet></ROW><ROW><id>3023569</id><snippet>import win32com.client

word = win32com.client.Dispatch("Word.Application")
canvas = word.ActiveDocument.Shapes[0]
for item in canvas.CanvasItems:
    print item.TextFrame.TextRange.Text
</snippet></ROW><ROW><id>3023569</id><snippet>Find</snippet></ROW><ROW><id>3023569</id><snippet>Find</snippet></ROW><ROW><id>3023569</id><snippet>Find</snippet></ROW><ROW><id>3023569</id><snippet>find = shp.TextFrame.TextRange.Find
find.Text = source
find.Replacement.Text = target
find.Execute(Replace=1, Forward=True)
</snippet></ROW><ROW><id>3023569</id><snippet>shp.TextFrame.TextRange.Find.Execute(FindText=source, ReplaceWith=target, Replace=1, Forward=True)
</snippet></ROW><ROW><id>3023823</id><snippet>def output(meth, x):
    def ya(self, y):
        return meth(self, x) + y
    return ya

def f1(meth):
    return output(meth, 1)

class trial(object):
    @f1
    def sum1( self, x ):
        return x

&gt;&gt;&gt; trial().sum1(1)
2
</snippet></ROW><ROW><id>3023823</id><snippet>meth</snippet></ROW><ROW><id>3023823</id><snippet>func</snippet></ROW><ROW><id>3023965</id><snippet>collections</snippet></ROW><ROW><id>3023965</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; isinstance('ciao', collections.Iterable)
True
&gt;&gt;&gt; isinstance(23, collections.Iterable)
False
&gt;&gt;&gt; isinstance(xrange(23), collections.Iterable)
True
</snippet></ROW><ROW><id>3023965</id><snippet>collections.Iterable</snippet></ROW><ROW><id>3023965</id><snippet>isinstance</snippet></ROW><ROW><id>3023965</id><snippet>issubclass</snippet></ROW><ROW><id>3023965</id><snippet>__iter__</snippet></ROW><ROW><id>3023965</id><snippet>def isiterable(x):
  try: iter(x)
  except TypeError: return False
  else: return True
</snippet></ROW><ROW><id>3023965</id><snippet>isinstance(x, basestring)</snippet></ROW><ROW><id>3023965</id><snippet>def reallyiterable(x):
  return not isinstance(x, basestring) and isinstance(x, collections.Iterable)
</snippet></ROW><ROW><id>3023965</id><snippet>isinstance(x, collections.Iterator)</snippet></ROW><ROW><id>3024213</id><snippet>range</snippet></ROW><ROW><id>3024213</id><snippet>datetime</snippet></ROW><ROW><id>3024213</id><snippet>date = datetime.date.today()
YourModel.objects.filter(bar__range=(
                                datetime.datetime.combine(
                                        date,
                                        datetime.time.min
                                    ),
                                datetime.datetime.combine(
                                        date,
                                        datetime.time.max
                                    ),
                            ))
</snippet></ROW><ROW><id>3024566</id><snippet>def method2(a,b):
    tmpdict = dict(zip(a,range(len(a))))
    idx = numpy.array([tmpdict[bi] for bi in b])
</snippet></ROW><ROW><id>3024566</id><snippet>a</snippet></ROW><ROW><id>3024657</id><snippet>for l in read_file:
    l.replace("5EFF837F-EFC2-4c32-A3D4-D15C7F9E1F22",
              "5EFF837F-EFC2-4c32-A3D4-RHUI5345JO")
    # Write to file..
</snippet></ROW><ROW><id>3024782</id><snippet>[auth]</snippet></ROW><ROW><id>3024782</id><snippet>.hgrc</snippet></ROW><ROW><id>3024782</id><snippet>ssh -L 8080:localhost:80 user@hostname # run in background and leave running
</snippet></ROW><ROW><id>3024782</id><snippet>http://localhost:8080/repository</snippet></ROW><ROW><id>3024931</id><snippet>Tkinter.Spinbox(values=(1,2,3,4))
sb.delete(0,"end")
sb.insert(0,2)
</snippet></ROW><ROW><id>3025119</id><snippet>contextlib.nested</snippet></ROW><ROW><id>3025119</id><snippet>from contextlib import nested

with nested(A(), B(), C()) as (X, Y, Z):
    do_something()
</snippet></ROW><ROW><id>3025119</id><snippet>m1, m2, m3 = A(), B(), C()
with m1 as X:
    with m2 as Y:
        with m3 as Z:
            do_something()
</snippet></ROW><ROW><id>3025119</id><snippet>with</snippet></ROW><ROW><id>3025119</id><snippet>A()</snippet></ROW><ROW><id>3025119</id><snippet>B()</snippet></ROW><ROW><id>3025119</id><snippet>C()</snippet></ROW><ROW><id>3025119</id><snippet>contextlib.nested</snippet></ROW><ROW><id>3025119</id><snippet>with A() as X, B() as Y, C() as Z:
    do_something()
</snippet></ROW><ROW><id>3025119</id><snippet>with ExitStack() as stack:
    for mgr in ctx_managers:
        stack.enter_context(mgr)
    # ...
</snippet></ROW><ROW><id>3025119</id><snippet>ExitStack</snippet></ROW><ROW><id>3025119</id><snippet>contextlib.nested</snippet></ROW><ROW><id>3025391</id><snippet>index.yaml</snippet></ROW><ROW><id>3025391</id><snippet>index.yaml</snippet></ROW><ROW><id>3025471</id><snippet>__init__.py</snippet></ROW><ROW><id>3025471</id><snippet>from RecursionException import RecursionException
from RecursionResult import RecursionResult
from Recursor import Recursor
</snippet></ROW><ROW><id>3025471</id><snippet>recursor.Recursor</snippet></ROW><ROW><id>3025471</id><snippet>recursor.Recursor.Recursor</snippet></ROW><ROW><id>3026611</id><snippet>-Dfile.encoding=UTF-8</snippet></ROW><ROW><id>3026611</id><snippet>eclipse.ini</snippet></ROW><ROW><id>3026611</id><snippet>Run\Run Configurations\Python Run\configuration\Common\</snippet></ROW><ROW><id>3026611</id><snippet>Window\Preferences\General\Workspace\Text file encoding\</snippet></ROW><ROW><id>3026611</id><snippet>[python install path]\Lib\site.py</snippet></ROW><ROW><id>3026611</id><snippet>encoding = "ascii"</snippet></ROW><ROW><id>3026611</id><snippet>encoding = "utf-8"</snippet></ROW><ROW><id>3026611</id><snippet>Window\Preferences\Appearance\Colors and Fonts\Debug\Console font\Edit</snippet></ROW><ROW><id>3026611</id><snippet>print(u"שלום עולם")         # Doesn't work
print("שלום עולם")          # Works
</snippet></ROW><ROW><id>3026611</id><snippet>print(my_model.my_field)                 # Doesn't work
print(my_model.my_field.encode('utf-8')) # Works
</snippet></ROW><ROW><id>3026723</id><snippet>super</snippet></ROW><ROW><id>3026723</id><snippet>class A(object):
    @classmethod
    def load(cls):
        return cls

class B(A):
    @classmethod
    def load(cls):
        # return A.load() would simply do "A.load()" and thus return a A
        return super(B, cls).load() # super figures out how to do it right ;-)


print B.load()
</snippet></ROW><ROW><id>3026983</id><snippet>&lt;img src="static/image.jpg" /&gt;</snippet></ROW><ROW><id>3027062</id><snippet>su your_user -l -c "xauth extract - $DISPLAY" | xauth merge -
</snippet></ROW><ROW><id>3027180</id><snippet>from &lt;whatever&gt; import *</snippet></ROW><ROW><id>3027180</id><snippet>import sys

def _allimports(modnames)
  thismod = sys.modules[__name__]

  for modname in modnames:
    submodname = '%s.%s' % (thismod, modname)
    __import__(submodname)
    submod = sys.modules[submodname]
    thismod.__dict__.update(submod.__dict__)

_allimports('a b c d e'.split())  # or whatever
</snippet></ROW><ROW><id>3027180</id><snippet>thismod</snippet></ROW><ROW><id>3027180</id><snippet>modnames</snippet></ROW><ROW><id>3027180</id><snippet>modname</snippet></ROW><ROW><id>3027180</id><snippet>    setattr(thismod, modname, getattr(submod, modname))
</snippet></ROW><ROW><id>3027410</id><snippet>PartialDate</snippet></ROW><ROW><id>3027410</id><snippet>datetime.date</snippet></ROW><ROW><id>3027410</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3027410</id><snippet>PartialDateField</snippet></ROW><ROW><id>3027410</id><snippet>PartialDate</snippet></ROW><ROW><id>3027579</id><snippet>&gt;&gt; import Image
&gt;&gt; img = Image.open("foo.png")
&gt;&gt; img.size
(1729,828)
</snippet></ROW><ROW><id>3027579</id><snippet>img_dimensions = lambda f: Image.open(f).size
filenames = filter(lambda f: is_image_file(f) and img_dimensions(f)==my_dimensions, os.listdir(fullpath))
</snippet></ROW><ROW><id>3027598</id><snippet>suds.sax.text</snippet></ROW><ROW><id>3027598</id><snippet>def printEnums(obj,field):
     a=client.factory.create(str(getattr(client.factory.create( str(obj.__class__).replace('suds.sudsobject.','')),field).__class__).replace('suds.sudsobject.',''))
     for i in a:
         print i[0]
</snippet></ROW><ROW><id>3027598</id><snippet> printEnums(foo,'enumInstance')
</snippet></ROW><ROW><id>3027660</id><snippet>&gt;&gt;&gt; import graphics
&gt;&gt;&gt; help(graphics.Circle)
</snippet></ROW><ROW><id>3027785</id><snippet>:1</snippet></ROW><ROW><id>3027785</id><snippet>ref_regex = re.compile('''
(?&lt;!\w)                      # Not preceeded by any words
((?i)q(?:uote)?\s+)?            # Match 'q' or 'quote' followed by many spaces
(
    (?:(?:[1-3]|I{1,3})\s*)?    # Match an arabic or roman number between 1 and 3.
    [A-Za-z]+                   # Match many alphabetics
)\.?                            # Followed by an optional dot
(?:
    \s*(\d+)                    # Match the chapter number
    (?:
        [:.](\d+)               # Match the verse number
        (?:-(\d+))?             # Match the ending verse number
    )                    # &lt;-- no '?' here
)
(?:
    \s+
    (?:
        (?i)(?:from\s+)|        # Match the keyword 'from' or 'in'
        (?:in\s+)|
        (?P&lt;lbrace&gt;\()      # or stuff between (...)
    )\s*(\w+)
    (?(lbrace)\))
)?
''', re.X | re.U)
</snippet></ROW><ROW><id>3027785</id><snippet>/x</snippet></ROW><ROW><id>3027785</id><snippet>&gt;&gt;&gt; rx = re.compile('(.)(?=(.))')
&gt;&gt;&gt; x = rx.finditer("abcdefgh")
&gt;&gt;&gt; [y.groups() for y in x]
[('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'h')]
</snippet></ROW><ROW><id>3027910</id><snippet>&gt;&gt;&gt; bin(11893680)
'0b101101010111101110110000'
&gt;&gt;&gt; bin(743355)
'0b10110101011110111011'
&gt;&gt;&gt; 11893680 &gt;&gt; 4
743355
</snippet></ROW><ROW><id>3028525</id><snippet>conn.headers.headers</snippet></ROW><ROW><id>3028525</id><snippet>&gt;&gt;&gt; req = urllib2.Request("http://api.stackoverflow.com/0.8/users/",
                          headers={'Accept-Encoding': 'gzip, identity'})
&gt;&gt;&gt; conn = urllib2.urlopen(req)
&gt;&gt;&gt; val = conn.read()
&gt;&gt;&gt; conn.close()
&gt;&gt;&gt; val[0:25]
'\x1f\x8b\x08\x00\x00\x00\x00\x00\x04\x00\xed\xbd\x07`\x1cI\x96%&amp;/m\xca{\x7fJ'
</snippet></ROW><ROW><id>3028525</id><snippet>Accept-Encoding</snippet></ROW><ROW><id>3028597</id><snippet>setup.py install</snippet></ROW><ROW><id>3028629</id><snippet>&gt;&gt;&gt; from numpy.random.mtrand import dirichlet
&gt;&gt;&gt; print dirichlet([1] * n)
</snippet></ROW><ROW><id>3028629</id><snippet>&gt;&gt;&gt; from random import gammavariate
&gt;&gt;&gt; def dirichlet(n):
...     samples = [gammavariate(1, 1) for _ in xrange(n)]
...     sum_samples = sum(samples)
...     return [x/sum_samples for x in samples]
</snippet></ROW><ROW><id>3028721</id><snippet>import xml.dom.minidom as dom
sub_tree = dom.parse('xyz.xml')
print sub_tree.children
</snippet></ROW><ROW><id>3028721</id><snippet>&gt;&gt;&gt; print sub_tree.childNodes
[&lt;DOM Comment node " Script ve..."&gt;, &lt;DOM Comment node " Date: "07..."&gt;, &lt;DOM Element: component at 0x7fecf88c&gt;]
</snippet></ROW><ROW><id>3029020</id><snippet>cookielib.Cookie</snippet></ROW><ROW><id>3029020</id><snippet>pickle</snippet></ROW><ROW><id>3029020</id><snippet>Cookie</snippet></ROW><ROW><id>3029020</id><snippet>CookieJar</snippet></ROW><ROW><id>3029020</id><snippet>set_cookie</snippet></ROW><ROW><id>3029020</id><snippet>__iter__</snippet></ROW><ROW><id>3029020</id><snippet>for</snippet></ROW><ROW><id>3029020</id><snippet>mechanize</snippet></ROW><ROW><id>3029020</id><snippet>self._db</snippet></ROW><ROW><id>3029020</id><snippet>pickle</snippet></ROW><ROW><id>3029020</id><snippet>s = cPickle.dumps(myJar, -1)</snippet></ROW><ROW><id>3029020</id><snippet>theJar = cPickle.loads(s)</snippet></ROW><ROW><id>3029020</id><snippet>s</snippet></ROW><ROW><id>3029157</id><snippet>def all_addresses():
   ip_is = [i for i in range(256)]
   ports = [i for i in range(1024,49152)]
   # note (...) instead of [...] to create a generator instead of a list;
   # separate |for|s to iterate over the lists individually
   return (str(i1)+"."+str(i2)+"."+str(i3)+"."+str(i4)+":"+str(p)
            for i1 in ip_is
            for i2 in ip_is
            for i3 in ip_is
            for i4 in ip_is
            for p in ports)

for addr in all_addresses():
   print addr
</snippet></ROW><ROW><id>3029175</id><snippet>help('modules')</snippet></ROW><ROW><id>3029707</id><snippet>sudo port install py26-psycopg2</snippet></ROW><ROW><id>3029939</id><snippet>'[+]'</snippet></ROW><ROW><id>3029939</id><snippet>~</snippet></ROW><ROW><id>3029939</id><snippet>,</snippet></ROW><ROW><id>3029939</id><snippet>from sys import stdin, stdout

bfHelloWorld = '++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.'

# http://esoteric.sange.fi/brainfuck/bf-source/prog/yapi.b
bfPiDigits = '''&gt;  +++++ (5 digits)
[&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;+++++[&lt;+++++++++&gt;-]+&gt;&gt;&gt;&gt;&gt;&gt;+[&lt;&lt;+++[&gt;&gt;[-&lt;]&lt;[&gt;]&lt;-]&gt;&gt;
[&gt;+&gt;]&lt;[&lt;]&gt;]&gt;[[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;]&gt;&gt;&gt;+++&gt;-]&lt;[&lt;&lt;&lt;&lt;]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+[-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&lt;+[-&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;]&gt;
&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;-]&lt;&lt;&lt;&lt;&lt;-[&lt;&lt;++++++++++&gt;&gt;-]&gt;&gt;&gt;[&lt;&lt;[&lt;+&lt;&lt;+&gt;&gt;&gt;-]&lt;[&gt;+&lt;-]&lt;++&lt;&lt;+
&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;&lt;[-]&lt;&lt;-&lt;[-&gt;&gt;+&lt;-[&gt;&gt;&gt;]&gt;[[&lt;+&gt;-]&gt;+&gt;&gt;]&lt;&lt;&lt;&lt;&lt;]&gt;[-]&gt;+&lt;&lt;&lt;-[&gt;&gt;+&lt;&lt;-]&lt;]&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;
&gt;[-]&gt;[&lt;&lt;&lt;+&gt;&gt;&gt;-]&lt;&lt;++++++++++&lt;[-&gt;&gt;+&lt;-[&gt;&gt;&gt;]&gt;[[&lt;+&gt;-]&gt;+&gt;&gt;]&lt;&lt;&lt;&lt;&lt;]&gt;[-]&gt;+&gt;[&lt;&lt;+&lt;+&gt;&gt;&gt;-]&lt;&lt;&lt;
&lt;+&lt;+&gt;&gt;[-[-[-[-[-[-[-[-[-&lt;-&gt;[-&lt;+&lt;-&gt;&gt;]]]]]]]]]]&lt;[+++++[&lt;&lt;&lt;++++++++&lt;++++++++&gt;&gt;&gt;&gt;-]&lt;
&lt;&lt;&lt;+&lt;-&gt;&gt;&gt;&gt;[&gt;+&lt;&lt;&lt;+++++++++&lt;-&gt;&gt;&gt;-]&lt;&lt;&lt;&lt;&lt;[&gt;&gt;+&lt;&lt;-]+&lt;[-&gt;-&lt;]&gt;[&gt;&gt;.&lt;&lt;&lt;&lt;[+.[-]]&gt;&gt;-]&gt;[&gt;&gt;.&lt;&lt;
-]&gt;[-]&gt;[-]&gt;&gt;&gt;[&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;&lt;-]]&gt;&gt;[-]&lt;&lt;&lt;[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]++++++++++.
'''

code = bfPiDigits   # the code
data = [0] * 255    # data memory
cp = 0              # code pointer
dp = 0              # data pointer

while cp &lt; len(code):
    cmd = code[cp]
    if   cmd == '&gt;': dp += 1
    elif cmd == '&lt;': dp -= 1
    elif cmd == '+': data[dp] += 1 
    elif cmd == '-': data[dp] -= 1 
    elif cmd == '.': stdout.write(chr(data[dp]))
    elif cmd == ',': data[dp] = ord(stdin.read(1))
    elif cmd == '[' and not data[dp]: # skip loop if ==0
        n = 0
        while True:
            cmd = code[cp]
            if   cmd == '[': n += 1
            elif cmd == ']': n -= 1
            if not n: break
            cp += 1
    elif cmd == ']' and data[dp]:  # loop back if !=0
        n = 0
        while True:
            cmd = code[cp]
            if   cmd == '[': n+=1
            elif cmd == ']': n-=1
            if not n: break
            cp -= 1
    cp += 1
</snippet></ROW><ROW><id>3030295</id><snippet>root=int(sqrt(x))
</snippet></ROW><ROW><id>3030295</id><snippet>root=int(sqrt(x))+1
</snippet></ROW><ROW><id>3030295</id><snippet>int(sqrt(9))</snippet></ROW><ROW><id>3030295</id><snippet>3</snippet></ROW><ROW><id>3030295</id><snippet>range(3, 3, 2)</snippet></ROW><ROW><id>3030295</id><snippet>[]</snippet></ROW><ROW><id>3030295</id><snippet>3</snippet></ROW><ROW><id>3030295</id><snippet>if(x&lt;=1):
   prime = False
</snippet></ROW><ROW><id>3030363</id><snippet>f.truncate(0)</snippet></ROW><ROW><id>3030363</id><snippet>f.seek(0)</snippet></ROW><ROW><id>3030656</id><snippet>from collections import defaultdict

class Crosstab(object):

    def __init__(self):
        self.count = defaultdict(lambda: defaultdict(int))
        self.row_tot = defaultdict(int)
        self.col_tot = defaultdict(int)
        self.grand_tot = 0

    def add(self, r, c, n):
        self.count[r][c] += n
        self.row_tot[r] += n
        self.col_tot[c] += n
        self.grand_tot += n

def load_data(line_iterator, conv_funcs):
    ct = Crosstab()
    for line in line_iterator:
        r, c, n = [func(s) for func, s in zip(conv_funcs, line.split(','))]
        ct.add(r, c, n)
    return ct

def display_all_2x2_tables(crosstab):
    for rx in crosstab.row_tot:
        for cx in crosstab.col_tot:
            a = crosstab.count[rx][cx]
            b = crosstab.col_tot[cx] - a
            c = crosstab.row_tot[rx] - a
            d = crosstab.grand_tot - a - b - c
            assert all(x &gt;= 0 for x in (a, b, c, d))
            print ",".join(str(x) for x in (rx, cx, a, b, c, d))

if __name__ == "__main__":

    # inputfile
    # &lt;word, time, frequency&gt;
    lines = """\
    apple, 1, 3
    banana, 1, 2
    apple, 2, 1
    banana, 2, 4
    orange, 3, 1""".splitlines()

    ct = load_data(lines, (str.strip, int, int))
    display_all_2x2_tables(ct)
</snippet></ROW><ROW><id>3030656</id><snippet>orange,1,0,5,1,5
orange,2,0,5,1,5
orange,3,1,0,0,10
apple,1,3,2,1,5
apple,2,1,4,3,3
apple,3,0,1,4,6
banana,1,2,3,4,2
banana,2,4,1,2,4
banana,3,0,1,6,4
</snippet></ROW><ROW><id>3030662</id><snippet>&gt;&gt;&gt; y[(1 &lt; x) &amp; (x &lt; 5)]
array(['o', 'o', 'a'], 
      dtype='|S1')
</snippet></ROW><ROW><id>3030755</id><snippet>print</snippet></ROW><ROW><id>3030755</id><snippet>softspace</snippet></ROW><ROW><id>3030755</id><snippet>sys.stdout</snippet></ROW><ROW><id>3030755</id><snippet>print</snippet></ROW><ROW><id>3030755</id><snippet>import random
import sys
import thread
import threading
import time

def wait():
  time.sleep(random.random())
  return 'W'

def targ():
  for n in range(8):
    wait()
    print 'Thr', wait(), thread.get_ident(), wait(), 'at', wait(), n

tls = threading.local()

class ThreadSafeFile(object):
  def __init__(self, f):
    self.f = f
    self.lock = threading.RLock()
    self.nesting = 0

  def _getlock(self):
    self.lock.acquire()
    self.nesting += 1

  def _droplock(self):
    nesting = self.nesting
    self.nesting = 0
    for i in range(nesting):
      self.lock.release()

  def __getattr__(self, name):
    if name == 'softspace':
      return tls.softspace
    else:
      raise AttributeError(name)

  def __setattr__(self, name, value):
    if name == 'softspace':
      tls.softspace = value
    else:
      return object.__setattr__(self, name, value)

  def write(self, data):
    self._getlock()
    self.f.write(data)
    if data == '\n':
      self._droplock()

# comment the following statement out to get guaranteed chaos;-)
sys.stdout = ThreadSafeFile(sys.stdout)

thrs = []
for i in range(8):
  thrs.append(threading.Thread(target=targ))
print 'Starting'
for t in thrs:
  t.start()
for t in thrs:
  t.join()
print 'Done'
</snippet></ROW><ROW><id>3030755</id><snippet>wait</snippet></ROW><ROW><id>3030755</id><snippet>Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1338986496 W at W 0
Thr W -1341116416 W at W 0
Thr W -1337921536 W at W 0
Thr W -1341648896 W at W 0
Thr W -1338454016 W at W 0
Thr W -1339518976 W at W 0
Thr W -1340583936 W at W 1
Thr W -1340051456 W at W 1
Thr W -1338986496 W at W 1
  ...more of the same...
</snippet></ROW><ROW><id>3030755</id><snippet>time.sleep</snippet></ROW><ROW><id>3030755</id><snippet>wait</snippet></ROW><ROW><id>3030755</id><snippet>Thr W -1341648896 W at W 0
Thr W -1341116416 W at W 0
Thr W -1341648896 W at W 1
Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1341116416 W at W 1
Thr W -1341116416 W at W 2
Thr W -1338986496 W at W 0
  ...more of the same...
</snippet></ROW><ROW><id>3030755</id><snippet>print 'ciao',</snippet></ROW><ROW><id>3030755</id><snippet>\n</snippet></ROW><ROW><id>3030755</id><snippet>softspace</snippet></ROW><ROW><id>3030800</id><snippet>&gt; [b for b in B if b[2:4] in [a[2:4] for a in A]]
[[1, 17, 3, 5], [141, 25, 14, 10]]
</snippet></ROW><ROW><id>3030800</id><snippet>A</snippet></ROW><ROW><id>3030800</id><snippet>&gt; a_slices = [a[2:4] for a in A]
&gt; [b for b in B if b[2:4] in a_slices]
[[1, 17, 3, 5], [141, 25, 14, 10]]
</snippet></ROW><ROW><id>3030800</id><snippet>&gt; [b[:-1] + a[:1] for b in B for a in A if b[2:4] == a[2:4]]
[[1, 17, 3, 1], [141, 25, 14, 5]]
</snippet></ROW><ROW><id>3030814</id><snippet>class Account(object):

    def __init__(self, initial):
        self.balance = initial

    def deposit(self, amt):
        self.balance += amt

    def withdraw(self, amt):
        self.balance -= amt

    def getbalance(self):
        return self.balance

a = Account(1000.00)
a.deposit(550.23)
a.deposit(100)
a.withdraw(50)

print a.getbalance()
</snippet></ROW><ROW><id>3030855</id><snippet>gtk.StatusIcon</snippet></ROW><ROW><id>3030995</id><snippet>/F</snippet></ROW><ROW><id>3030995</id><snippet>8BIM</snippet></ROW><ROW><id>3030995</id><snippet>struct</snippet></ROW><ROW><id>3031000</id><snippet>manage.py</snippet></ROW><ROW><id>3031026</id><snippet>print repr(line)
</snippet></ROW><ROW><id>3031026</id><snippet>'\rSET ENABLE ACK\n'
</snippet></ROW><ROW><id>3031026</id><snippet>line.find('\r')
line.startswith('\r')
'\r' in line
</snippet></ROW><ROW><id>3031026</id><snippet>&gt;&gt;&gt; line = '\rSET ENABLE ACK\n'
&gt;&gt;&gt; print repr(line)
'\rSET ENABLE ACK\n'
&gt;&gt;&gt; line.find('\r')
0
&gt;&gt;&gt; line.startswith('\r')
True
&gt;&gt;&gt; '\r' in line
True
</snippet></ROW><ROW><id>3031026</id><snippet>&gt;&gt;&gt; print line
SET ENABLE ACK

&gt;&gt;&gt; print repr(line)
'\rSET ENABLE ACK\n'
&gt;&gt;&gt; print len(line)
16
&gt;&gt;&gt; print len(repr(line))
20
</snippet></ROW><ROW><id>3031057</id><snippet>"..."</snippet></ROW><ROW><id>3031057</id><snippet>'...'</snippet></ROW><ROW><id>3031057</id><snippet>b"..."</snippet></ROW><ROW><id>3031057</id><snippet>b'...'</snippet></ROW><ROW><id>3031057</id><snippet>b"aeiou"</snippet></ROW><ROW><id>3031104</id><snippet>import string

def allsimilar(word, valid):
  wl = list(word)
  for i, c in enumerate(wl):
    for x in string.ascii_lowercase:
      if x == c: continue
      wl[i] = x
      nw = ''.join(wl)
      if valid(nw): yield nw
    wl[i] = c
</snippet></ROW><ROW><id>3031104</id><snippet>list(allsimilar(word, valid))</snippet></ROW><ROW><id>3031104</id><snippet>wl</snippet></ROW><ROW><id>3031104</id><snippet>nw = word[:i] + x + word[i+1:]
</snippet></ROW><ROW><id>3031104</id><snippet>import array</snippet></ROW><ROW><id>3031104</id><snippet>  wl = array.array('c', word)
</snippet></ROW><ROW><id>3031104</id><snippet>list(word)</snippet></ROW><ROW><id>3031270</id><snippet>class dotdictify(dict):
    marker = object()
    def __init__(self, value=None):
        if value is None:
            pass
        elif isinstance(value, dict):
            for key in value:
                self.__setitem__(key, value[key])
        else:
            raise TypeError, 'expected dict'

    def __setitem__(self, key, value):
        if isinstance(value, dict) and not isinstance(value, dotdictify):
            value = dotdictify(value)
        dict.__setitem__(self, key, value)

    def __getitem__(self, key):
        found = self.get(key, dotdictify.marker)
        if found is dotdictify.marker:
            found = dotdictify()
            dict.__setitem__(self, key, found)
        return found

    __setattr__ = __setitem__
    __getattr__ = __getitem__

life = {'bigBang' :
          {'stars':
               {'planets': {}
                }
           }
}

life = dotdictify(life)

print life.bigBang.stars.planets
life.bigBang.stars.planets.earth = { 'singleCellLife' : {} }
print life.bigBang.stars.planets
</snippet></ROW><ROW><id>3031325</id><snippet>pickle.loads()</snippet></ROW><ROW><id>3031363</id><snippet>gtk.Image</snippet></ROW><ROW><id>3031363</id><snippet>gtk.Image</snippet></ROW><ROW><id>3031363</id><snippet>gtk.Button</snippet></ROW><ROW><id>3031565</id><snippet>GOTO #10</snippet></ROW><ROW><id>3031565</id><snippet>GOTO #3</snippet></ROW><ROW><id>3031575</id><snippet>def ancestor_list_validator(l):
  if len(l) != len(set(l)):
    raise Exception("Repeated values in ancestor list!")

class Post(db.Model):
  # ...
  ancestors = db.ListProperty(db.Key, validator=ancestor_list_validator)
</snippet></ROW><ROW><id>3031925</id><snippet>d.default_factory = None</snippet></ROW><ROW><id>3031925</id><snippet>dict</snippet></ROW><ROW><id>3032002</id><snippet>DEBUG = os.environ['SERVER_SOFTWARE'].startswith("Dev")
</snippet></ROW><ROW><id>3032231</id><snippet># d is the dictionary
# notbusy is a list
d[ notbusy.pop() ] = ... # init the socket
</snippet></ROW><ROW><id>3032536</id><snippet>ctypes</snippet></ROW><ROW><id>3032536</id><snippet>win32all</snippet></ROW><ROW><id>3032536</id><snippet>cython</snippet></ROW><ROW><id>3032552</id><snippet>django.core.management.commands.runserver</snippet></ROW><ROW><id>3032552</id><snippet>WSGIHandler</snippet></ROW><ROW><id>3032552</id><snippet>AdminMediaHandler</snippet></ROW><ROW><id>3032552</id><snippet>AdminMediaHandler</snippet></ROW><ROW><id>3032564</id><snippet>thetable</snippet></ROW><ROW><id>3032564</id><snippet>replaceWith(thetable)</snippet></ROW><ROW><id>3032564</id><snippet>replaceWith('')</snippet></ROW><ROW><id>3032564</id><snippet>table</snippet></ROW><ROW><id>3032564</id><snippet>table</snippet></ROW><ROW><id>3032564</id><snippet>from pyparsing import Suppress, replaceWith, makeHTMLTags, SkipTo
#...
data = 'before&lt;script&gt;ciao&lt;table&gt;buh&lt;/table&gt;bye&lt;/script&gt;after'

tableOpen, tableClose = makeHTMLTags("table")
tableBody = tableOpen + SkipTo(tableClose) + tableClose
thetable = (tableBody).searchString(data)[0][2]

removeText = replaceWith(thetable)
scriptOpen, scriptClose = makeHTMLTags("script")
scriptBody = scriptOpen + SkipTo(scriptClose) + scriptClose
scriptBody.setParseAction(removeText)
data = (scriptBody).transformString(data)

print data
</snippet></ROW><ROW><id>3032564</id><snippet>beforebuhafter</snippet></ROW><ROW><id>3032568</id><snippet>(//label)[2]</snippet></ROW><ROW><id>3032568</id><snippet>//label[2]</snippet></ROW><ROW><id>3032568</id><snippet>label</snippet></ROW><ROW><id>3032568</id><snippet>label</snippet></ROW><ROW><id>3032568</id><snippet>label</snippet></ROW><ROW><id>3032568</id><snippet>label</snippet></ROW><ROW><id>3032582</id><snippet>sel.click(u"xpath=//a[text()='Submit \xbb')]")
</snippet></ROW><ROW><id>3032582</id><snippet>//a[text()='Submit »')]</snippet></ROW><ROW><id>3032594</id><snippet>def addValue(val):
    def decorator(func):
        def add(x):
            return func(x) + val
        return add
    return decorator
</snippet></ROW><ROW><id>3032594</id><snippet>@addTwo</snippet></ROW><ROW><id>3032594</id><snippet>addTwo</snippet></ROW><ROW><id>3032594</id><snippet>@addValue(4)</snippet></ROW><ROW><id>3032594</id><snippet>addValue(4)</snippet></ROW><ROW><id>3032790</id><snippet>sudo service cherokee start
ps aux | grep uwsgi 
# you should see nothing from this ps command

# now hit your web app
sudo service cherokee stop
ps aux | grep uwsgi
# you should see the instance of uwsgi that cherokee started
</snippet></ROW><ROW><id>3032790</id><snippet>sudo killall -HUP uwsgi
</snippet></ROW><ROW><id>3032887</id><snippet>def my_tag(parser, token):
  # ... some code
  return MyNode(...)

class MyNode(template.Node):
  def render(self, context):
     # here is where you write your &lt;script&gt; tags
</snippet></ROW><ROW><id>3032887</id><snippet>class MyNode(template.Node):
  def render(self, context):
     if '_included_faceboxify_deps' in context:
       # render your &lt;script&gt; dependency includes
       context['_included_faceboxify_deps'] = True
     # render your &lt;script&gt;s that are specific for this call
</snippet></ROW><ROW><id>3033195</id><snippet>06-13 09:58AM 04.933 /favicon.ico 404 344ms 310cpu_ms 0kb Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.70 Safari/533.4,gzip(gfe)
199.107.215.203 - - [13/Jun/2010:09:58:05 -0700] "GET /favicon.ico HTTP/1.1" 404 124 - "Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.70 Safari/533.4,gzip(gfe)" "XXXXXXXX.appspot.com"

I 06-13 09:58AM 05.276

This request caused a new process to be started for your application, and thus caused your application code to be loaded for the first time. This request may thus take longer and use more CPU than a typical request for your application
</snippet></ROW><ROW><id>3033241</id><snippet>assert_case_sensitive</snippet></ROW><ROW><id>3033241</id><snippet>assert_case_insensitive</snippet></ROW><ROW><id>3033241</id><snippet>wrapper</snippet></ROW><ROW><id>3033241</id><snippet>assert_case_insensitive</snippet></ROW><ROW><id>3033241</id><snippet>assert_case_insensitive</snippet></ROW><ROW><id>3033241</id><snippet>assert_case_insensitive</snippet></ROW><ROW><id>3033241</id><snippet>*args</snippet></ROW><ROW><id>3033241</id><snippet>**kargs</snippet></ROW><ROW><id>3033241</id><snippet>*something</snippet></ROW><ROW><id>3033241</id><snippet>**something</snippet></ROW><ROW><id>3033241</id><snippet>*something</snippet></ROW><ROW><id>3033241</id><snippet>**something</snippet></ROW><ROW><id>3033241</id><snippet>*(iterable sequence)</snippet></ROW><ROW><id>3033241</id><snippet>**(dictionary)</snippet></ROW><ROW><id>3033241</id><snippet>wrapper</snippet></ROW><ROW><id>3033289</id><snippet>m = re.match('Season ([0-9]+), Episode ([0-9]+): .*', s)
(season, episode) = (int(m.group(1)), int(m.group(2)))
</snippet></ROW><ROW><id>3034036</id><snippet>&gt;&gt;&gt; arrays = [(-1,+1), (-2,+2), (-3,+3)]
&gt;&gt;&gt; list(itertools.product(*arrays))
[(-1, -2, -3), (-1, -2, 3), (-1, 2, -3), (-1, 2, 3), (1, -2, -3), (1, -2, 3), (1, 2, -3), (1, 2, 3)]
</snippet></ROW><ROW><id>3034217</id><snippet>counts = arange(0, len(list_of_dates))
plot(list_of_dates, counts)
</snippet></ROW><ROW><id>3034217</id><snippet>plot</snippet></ROW><ROW><id>3034217</id><snippet>from pyplot import hist
from matplotlib.dates import date2num
hist(date2num(list_of_dates), cumulative=True)
</snippet></ROW><ROW><id>3034217</id><snippet>grouped_dates = [[d, len(list(g))] for d,g in itertools.groupby(list_of_dates, lambda k: k.date())]
dates, counts = grouped_dates.transpose()
counts = counts.cumsum()
step(dates, counts)
</snippet></ROW><ROW><id>3034217</id><snippet>groupby</snippet></ROW><ROW><id>3034217</id><snippet>itertools</snippet></ROW><ROW><id>3034217</id><snippet>datetime</snippet></ROW><ROW><id>3034217</id><snippet>step</snippet></ROW><ROW><id>3034217</id><snippet>plot</snippet></ROW><ROW><id>3034217</id><snippet>cumsum</snippet></ROW><ROW><id>3034217</id><snippet>from matplotlib.dates import drange, num2date
date_dict = dict((d, len(list(g))) for d,g in itertools.groupby(list_of_dates, lambda k: k.date()))
dates = num2date(drange(min(list_of_dates).date(), max(list_of_dates).date() + timedelta(1), timedelta(1)))
counts = asarray([date_dict.get(d.date(), 0) for d in dates]).cumsum()
step(dates, counts)
</snippet></ROW><ROW><id>3034217</id><snippet>step</snippet></ROW><ROW><id>3034499</id><snippet>grid = [...] * nrows
</snippet></ROW><ROW><id>3034499</id><snippet>&gt;&gt;&gt; grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]
&gt;&gt;&gt; for r in range(nrows):
...     for c in range(ncols):
...             grid[r][c] = int(random() * 100)
... 
&gt;&gt;&gt; pprint(grid)
[[67, 40, 41, 50, 92],
 [26, 42, 64, 77, 77],
 [65, 67, 88, 77, 76],
 [36, 21, 41, 29, 25],
 [98, 77, 38, 40, 96]]
</snippet></ROW><ROW><id>3034499</id><snippet>grid = [[0] * ncols for row in range(ncols)]
</snippet></ROW><ROW><id>3034582</id><snippet>vmin</snippet></ROW><ROW><id>3034582</id><snippet>vmax</snippet></ROW><ROW><id>3034582</id><snippet>pylab.imshow(im, vmin=0, vmax=20)
</snippet></ROW><ROW><id>3034831</id><snippet>def I (self,event):
    S1 = TL.entryVariableS.get()
    TL.sclS.set(S1)
    TL.sclS.set(TL.sclS.get())
    S1 = TL.entryVariableS.get()
    TL.sclS.set(S1)
</snippet></ROW><ROW><id>3035096</id><snippet>Lib/site-packages/matplotlib/__init__.py</snippet></ROW><ROW><id>3035096</id><snippet>nn = numpy.__version__.split('.')
if not (int(nn[0]) &gt;= 1 and int(nn[1]) &gt;= 1):
    raise ImportError(
            'numpy 1.1 or later is required; you have %s' % numpy.__version__)
</snippet></ROW><ROW><id>3035096</id><snippet>if not ((int(nn[0]) &gt;= 1 and int(nn[1]) &gt;= 1) or int(nn[0]) &gt;= 2):
</snippet></ROW><ROW><id>3035096</id><snippet>if not (float('.'.join(nn[2:])) &gt;= 1.1):
</snippet></ROW><ROW><id>3035193</id><snippet>def setUp(self):
    p = Person.objects.create(name="Alex")

    for i in range(self.num_entries):
        Entry.objects.create(author=p, title="Entry with number %s" % i, text="foobar " * i)

    Entry.indexer.update()
</snippet></ROW><ROW><id>3035193</id><snippet>def custom_run_tests(test_labels, verbosity=1, interactive=True, extra_tests=[]):
    """Set the test indices"""
    settings.CATEGORY_CLASSIFIER_DATA = settings.TEST_CLASSIFIER_DATA    
    return run_tests(test_labels, verbosity, interactive, extra_tests)
</snippet></ROW><ROW><id>3035193</id><snippet>TEST_RUNNER = 'search.tests.custom_run_tests'
</snippet></ROW><ROW><id>3035237</id><snippet>vcvarsall.bat</snippet></ROW><ROW><id>3035237</id><snippet>%PATH%</snippet></ROW><ROW><id>3035296</id><snippet>__del__</snippet></ROW><ROW><id>3035362</id><snippet>'#'.join( [example_string[a:a+6] for a in range(0,len(example_string),6)])
</snippet></ROW><ROW><id>3035362</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer( "'#'.join([s[a:a+6] for a in range(0,len(s),6)])", "s='x'*100").timeit()
4.9556539058685303
</snippet></ROW><ROW><id>3035415</id><snippet>od -c &lt;&lt;&lt; '</snippet></ROW><ROW><id>3035415</id><snippet>'</snippet></ROW><ROW><id>3035415</id><snippet>\x1b0Q</snippet></ROW><ROW><id>3035415</id><snippet>xterm</snippet></ROW><ROW><id>3035691</id><snippet>&gt;&gt;&gt; class C(str):
...     def __getattribute__(self, name):
...         if name == '__class__':
...             return str
...         else:
...             return super(C, self).__getattribute__(name)
...         
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.__class__
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>3036564</id><snippet>tempfile</snippet></ROW><ROW><id>3036737</id><snippet>from django.contrib.admin.filterspecs import RelatedFilterSpec, FilterSpec
from models import Gallery

class GalleryFilterSpec(RelatedFilterSpec):
    def __init__(self, f, request, params, model, model_admin):
        self.lookup_kwarg = f.name
        self._lookup_model = f.rel.to
        self.lookup_val = request.GET.get(self.lookup_kwarg, None)
        self.user = request.user
        self.lookup_choices = [(g.pk, g.name) for g in Gallery.objects.all()]

    def has_output(self):
        return len(self.lookup_choices) &gt; 1

    def title(self):
        return self._lookup_model._meta.verbose_name

FilterSpec.filter_specs.insert(0, 
        (lambda f: f.rel.to == Gallery, GalleryFilterSpec))
</snippet></ROW><ROW><id>3036737</id><snippet>filters.py</snippet></ROW><ROW><id>3036737</id><snippet>admin.py</snippet></ROW><ROW><id>3036737</id><snippet>models.ManyToManyField</snippet></ROW><ROW><id>3036737</id><snippet>django.contrib.admin.views.main.ChangeList.get_filters</snippet></ROW><ROW><id>3036844</id><snippet>man</snippet></ROW><ROW><id>3036844</id><snippet>man</snippet></ROW><ROW><id>3036844</id><snippet>#</snippet></ROW><ROW><id>3036844</id><snippet>s = re.sub(".\x08", "", s)
</snippet></ROW><ROW><id>3036920</id><snippet>__getitem__</snippet></ROW><ROW><id>3036920</id><snippet>class parent_class:
    def __init__(self):
        self.title = multilang("hello world");

class multilang:
    def __init__(self, text):
        pass
    def __getitem__(self, key):
        if key == 'en':
            return "hello world";
</snippet></ROW><ROW><id>3037169</id><snippet>outtext</snippet></ROW><ROW><id>3037169</id><snippet>s</snippet></ROW><ROW><id>3037169</id><snippet>for couple in findreplace:
    s = s.replace(couple[0],couple[1])

s = re.compile('Title: (.*)', re.I).sub(r'\\title {\1}', s)
s = re.compile('Author: (.*)', re.I).sub(r'\\author {\1}', s)
s = re.compile('Date: (.*)', re.I).sub(r'\\date {\1}', s)
</snippet></ROW><ROW><id>3037288</id><snippet>raw()</snippet></ROW><ROW><id>3037288</id><snippet>.count()</snippet></ROW><ROW><id>3037288</id><snippet>.raw()</snippet></ROW><ROW><id>3037288</id><snippet>len()</snippet></ROW><ROW><id>3037288</id><snippet>sum(1 for result in results)
</snippet></ROW><ROW><id>3037292</id><snippet>factorial(n)</snippet></ROW><ROW><id>3037292</id><snippet>gamma(n+1)</snippet></ROW><ROW><id>3037292</id><snippet>scipy.special</snippet></ROW><ROW><id>3037292</id><snippet>gammaln</snippet></ROW><ROW><id>3037292</id><snippet>from itertools import izip
from numpy import array, log, exp
from scipy.special import gammaln

def log_factorial(x):
    """Returns the logarithm of x!
    Also accepts lists and NumPy arrays in place of x."""
    return gammaln(array(x)+1)

def multinomial(n, xs, ps):
    xs, ps = array(xs), array(ps)
    result = log_factorial(n) - sum(log_factorial(xs)) + sum(xs * log(ps))
    return exp(result)
</snippet></ROW><ROW><id>3037292</id><snippet>gammaln</snippet></ROW><ROW><id>3037292</id><snippet>def gammaln(n):
    """Logarithm of Euler's gamma function for discrete values."""
    if n &lt; 1:
        return float('inf')
    if n &lt; 3:
        return 0.0
    c = [76.18009172947146, -86.50532032941677, \
         24.01409824083091, -1.231739572450155, \
         0.001208650973866179, -0.5395239384953 * 0.00001]
    x, y = float(n), float(n)
    tm = x + 5.5
    tm -= (x + 0.5) * log(tm)
    se = 1.0000000000000190015
    for j in range(6):
        y += 1.0
        se += c[j] / y
    return -tm + log(2.5066282746310005 * se / x)
</snippet></ROW><ROW><id>3037292</id><snippet>dict</snippet></ROW><ROW><id>3037292</id><snippet>amino_acids</snippet></ROW><ROW><id>3037292</id><snippet>amino_acids</snippet></ROW><ROW><id>3037292</id><snippet>amino_acid_dict = dict((amino_acid[0], amino_acid) for amino_acid in amino_acids)
print amino_acid_dict
{"A": ["A", 0.25, 1], "S": ["S", 0.25, 1], "T": ["T", 0.25, 1], "P": ["P", 0.25, 1]}
</snippet></ROW><ROW><id>3037292</id><snippet>freq_A = amino_acid_dict["A"][1]
count_A = amino_acid_dict["A"][2]
</snippet></ROW><ROW><id>3037292</id><snippet>for quadruplet in quadruplets:
    probs = [amino_acid_dict[aa][1] for aa in quadruplet]
    counts = [amino_acid_dict[aa][2] for aa in quadruplet]
    print quadruplet, multinomial(n, probs, counts)
</snippet></ROW><ROW><id>3037601</id><snippet>execute()</snippet></ROW><ROW><id>3037601</id><snippet>%%</snippet></ROW><ROW><id>3037631</id><snippet>&gt;&gt;&gt; d = {'a': set([1, 2]), 'b': set([3, 4])}
&gt;&gt;&gt; d
{'a': set([1, 2]), 'b': set([3, 4])}
</snippet></ROW><ROW><id>3037631</id><snippet>&gt;&gt;&gt; d.update((k, frozenset(v)) for k, v in d.iteritems())
</snippet></ROW><ROW><id>3037631</id><snippet>&gt;&gt;&gt; d
{'a': frozenset([1, 2]), 'b': frozenset([3, 4])}
</snippet></ROW><ROW><id>3037976</id><snippet>random.py</snippet></ROW><ROW><id>3037976</id><snippet>"""Get the next random number in the range [0.0, 1.0)."""
</snippet></ROW><ROW><id>3037976</id><snippet>)</snippet></ROW><ROW><id>3037976</id><snippet>[</snippet></ROW><ROW><id>3037976</id><snippet>]</snippet></ROW><ROW><id>3037976</id><snippet>(</snippet></ROW><ROW><id>3037976</id><snippet>)</snippet></ROW><ROW><id>3037976</id><snippet>(a, b]</snippet></ROW><ROW><id>3037976</id><snippet>[a, b)</snippet></ROW><ROW><id>3037981</id><snippet>replaceAll("(DEBUG[1-5]\s*\\(\")\"[^:]+:\\s+([^;]+)", "$1$2");
</snippet></ROW><ROW><id>3038368</id><snippet>import os
dir_of_current_module = os.path.dirname(__file__)
</snippet></ROW><ROW><id>3038572</id><snippet>import os

PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))

...

MEDIA_ROOT = PROJECT_PATH + '/media/'

TEMPLATE_DIRS = (
    PROJECT_PATH + '/templates/'
)
</snippet></ROW><ROW><id>3038572</id><snippet>/</snippet></ROW><ROW><id>3038572</id><snippet>.../admin/</snippet></ROW><ROW><id>3038572</id><snippet>TEMPLATE_DIRS = (
    'C:/django-project/myapp/mytemplates/'
)
</snippet></ROW><ROW><id>3038572</id><snippet>TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)
</snippet></ROW><ROW><id>3038592</id><snippet>mechanize</snippet></ROW><ROW><id>3038691</id><snippet>$ python2.6 biggraph.py 4 6
biggraph generate 10000 nodes     00:00:00
biggraph generate 1000000 edges   00:00:00
biggraph add edges                00:00:05
biggraph Dijkstra                 00:01:32
biggraph shortest_path done       00:04:15
step: 1915 2
step: 0 1
biggraph walk done                00:04:15
path: [9999, 1915, 0]
</snippet></ROW><ROW><id>3038691</id><snippet>shortest_path</snippet></ROW><ROW><id>3038691</id><snippet>biggraph 5 6</snippet></ROW><ROW><id>3038691</id><snippet>biggraph generate 100000 nodes    00:00:00
biggraph generate 1000000 edges   00:00:00
biggraph add edges                00:00:07
biggraph Dijkstra                 00:01:27
biggraph shortest_path done       00:23:44
step: 48437 4
step: 66200 3
step: 83824 2
step: 0 1
biggraph walk done                00:23:44
path: [99999, 48437, 66200, 83824, 0]
</snippet></ROW><ROW><id>3038691</id><snippet>#!/usr/bin/python

import pygraph.classes.graph
import pygraph.algorithms
import pygraph.algorithms.minmax
import time
import random
import sys

if len(sys.argv) != 3:
    print ('usage %s: node_exponent edge_exponent' % sys.argv[0])
    sys.exit(1)

nnodes = 10**int(sys.argv[1])
nedges = 10**int(sys.argv[2])

start_time = time.clock()
def timestamp(s):
    t = time.gmtime(time.clock() - start_time)
    print 'biggraph', s.ljust(24), time.strftime('%H:%M:%S', t)

timestamp('generate %d nodes' % nnodes)
bg = pygraph.classes.graph.graph()
bg.add_nodes(xrange(nnodes))

timestamp('generate %d edges' % nedges)
edges = set()
while len(edges) &lt; nedges:
    left, right = random.randrange(nnodes), random.randrange(nnodes)
    if left == right:
        continue
    elif left &gt; right:
        left, right = right, left
    edges.add((left, right))

timestamp('add edges')
for edge in edges:
    bg.add_edge(edge)

timestamp("Dijkstra")
target = 0
span, dist = pygraph.algorithms.minmax.shortest_path(bg, target)
timestamp('shortest_path done')

# the paths from any node to target is in dict span, let's
# pick any arbitrary node (the last one) and walk to the
# target from there, the associated distance will decrease
# monotonically
lastnode = nnodes - 1
path = []
while lastnode != target:
    nextnode = span[lastnode]
    print 'step:', nextnode, dist[lastnode]
    assert nextnode in bg.neighbors(lastnode)
    path.append(lastnode)
    lastnode = nextnode
path.append(target)
timestamp('walk done')
print 'path:', path
</snippet></ROW><ROW><id>3038832</id><snippet>&#0;</snippet></ROW><ROW><id>3039563</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; x = u'http://www.odevsitesi.com/ara.asp?kelime=doğanın dengesinin bozulması' 
&gt;&gt;&gt; y = x.encode('iso-8859-9')
&gt;&gt;&gt; # just to show what the split of y looks like (we can also handle it as a tuple):
&gt;&gt;&gt; urlparse.urlsplit(y)
SplitResult(scheme='http', netloc='www.odevsitesi.com', path='/ara.asp', query='kelime=do\xf0an\xfdn dengesinin bozulmas\xfd', fragment='')
&gt;&gt;&gt; z = urlparse.urlsplit(y)
&gt;&gt;&gt; quoted = z[:3] + (urllib.quote(z.query), z.fragment)
&gt;&gt;&gt; # now just to show you what the 'quoted' tuple looks like:
&gt;&gt;&gt; quoted
('http', 'www.odevsitesi.com', '/ara.asp', 'kelime%3Ddo%F0an%FDn%20dengesinin%20bozulmas%FD', '')
&gt;&gt;&gt; # and finally putting it back together:
&gt;&gt;&gt; urlparse.urlunsplit(quoted)
'http://www.odevsitesi.com/ara.asp?kelime%3Ddo%F0an%FDn%20dengesinin%20bozulmas%FD'
</snippet></ROW><ROW><id>3039629</id><snippet>import fileinput

for line in fileinput.input(['test.py'], inplace=True):
  print line.replace('027FC8EBC2D1', 'NewValue'),
</snippet></ROW><ROW><id>3039629</id><snippet>input</snippet></ROW><ROW><id>3039629</id><snippet>print</snippet></ROW><ROW><id>3039629</id><snippet>fileinput</snippet></ROW><ROW><id>3039629</id><snippet>print</snippet></ROW><ROW><id>3039629</id><snippet>line</snippet></ROW><ROW><id>3039706</id><snippet>print(str2.encode('raw_unicode_escape').decode('ascii'))
</snippet></ROW><ROW><id>3039706</id><snippet>repr</snippet></ROW><ROW><id>3039706</id><snippet>ascii</snippet></ROW><ROW><id>3039844</id><snippet>$ /usr/local/bin/ctags *py
</snippet></ROW><ROW><id>3039844</id><snippet>tags</snippet></ROW><ROW><id>3039844</id><snippet>$ cat tags
!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME  Exuberant Ctags //
!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/
!_TAG_PROGRAM_VERSION   5.7 //
Foo a.py    /^class Foo(object):$/;"    c
amethod a.py    /^  def amethod(self): pass$/;" m   class:Foo
</snippet></ROW><ROW><id>3039844</id><snippet>tags</snippet></ROW><ROW><id>3039844</id><snippet>:help tags</snippet></ROW><ROW><id>3039907</id><snippet>set HTTP_PROXY=http://google.cn:80 
set HTTPS_PROXY=http://google.cn:80 
</snippet></ROW><ROW><id>3039967</id><snippet>global</snippet></ROW><ROW><id>3039967</id><snippet>global</snippet></ROW><ROW><id>3040117</id><snippet>pipe.communicate( data )
</snippet></ROW><ROW><id>3040117</id><snippet>pipe.communicate( data.encode('utf8') )
</snippet></ROW><ROW><id>3040164</id><snippet>expire_on_commit=False</snippet></ROW><ROW><id>3040164</id><snippet>sessionmaker()</snippet></ROW><ROW><id>3040164</id><snippet>expire_on_commit</snippet></ROW><ROW><id>3040164</id><snippet>False</snippet></ROW><ROW><id>3040164</id><snippet>session.expire_on_commit = False</snippet></ROW><ROW><id>3040454</id><snippet>def samplesof(requested_cond, conditions):
    return next(s for c, s in conditions if c==requested_cond)
</snippet></ROW><ROW><id>3040454</id><snippet>def ordered_union(the_conds, conditions):
    return [s for c in the_conds for s in samplesof(c, conditions)]
</snippet></ROW><ROW><id>3040454</id><snippet>aux_set = set(the_conds)
samples_by_cond = dict((c, s) for c, s in conditions if c in aux_set)
return [s for c in the_conds for s in samples_by_cond[c]]
</snippet></ROW><ROW><id>3040454</id><snippet>conditions</snippet></ROW><ROW><id>3040454</id><snippet>conditions</snippet></ROW><ROW><id>3040454</id><snippet>class Sensible(object):
  def __init__(self, conditions):
    self.seq = []
    self.dic = {}
    for c, s in conditions:
      self.seq.append(c)
      self.dic[c] = s
  def samplesof(self, requested_condition):
    return self.dic[requested_condition]
  def ordered_union(self, the_conds):
    return [s for c in the_conds for s in self.dic[c]]
</snippet></ROW><ROW><id>3040454</id><snippet>self.seq</snippet></ROW><ROW><id>3040797</id><snippet>import re

regexes = [
    "foo.*",
    "bar.*",
    "qu*x"
    ]

# Make a regex that matches if any of our regexes match.
combined = "(" + ")|(".join(regexes) + ")"

if re.match(combined, mystring):
    print "Some regex matched!"
</snippet></ROW><ROW><id>3040834</id><snippet>for k in sorted(D, key=int):
  print '%s: %r' % (k, D[k])
</snippet></ROW><ROW><id>3040917</id><snippet>wget 'http://search.twitter.com/search.json?q=hi' -O hi.json
</snippet></ROW><ROW><id>3040917</id><snippet>wget 'http://search.twitter.com/search.json?q=hi' -O - &gt;&gt; hi.json
</snippet></ROW><ROW><id>3040917</id><snippet>urllib.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')
</snippet></ROW><ROW><id>3040917</id><snippet>hi_web = urllib2.urlopen('http://search.twitter.com/search.json?q=hi');
with open('hi.json', 'ab') as hi_file:
  hi_file.write(hi_web.read())
</snippet></ROW><ROW><id>3040929</id><snippet>from subprocess import Popen, PIPE
output = Popen(["/usr/bin/whois", "abc.com"], stdout = PIPE).communicate()[0]
</snippet></ROW><ROW><id>3040929</id><snippet>stdout = PIPE</snippet></ROW><ROW><id>3040929</id><snippet>stdout</snippet></ROW><ROW><id>3041252</id><snippet>{% url admin:password_change as password_change_url %}
</snippet></ROW><ROW><id>3041252</id><snippet>"this" if condition else "that"</snippet></ROW><ROW><id>3041321</id><snippet>gst.element_link_many(filesrc, decode, convert, sink)
</snippet></ROW><ROW><id>3041321</id><snippet>decodebin</snippet></ROW><ROW><id>3041321</id><snippet>gst-inspect decodebin</snippet></ROW><ROW><id>3041321</id><snippet>Pad Templates:
  SINK template: 'sink'
    Availability: Always
    Capabilities:
      ANY

  SRC template: 'src%d'
    Availability: Sometimes
    Capabilities:
      ANY
</snippet></ROW><ROW><id>3041321</id><snippet>gst-inspect decodebin</snippet></ROW><ROW><id>3041321</id><snippet>#!/usr/bin/python

import pygst
pygst.require('0.10')
import gst

import pygtk
pygtk.require('2.0')
import gtk

# this is very important, without this, callbacks from gstreamer thread
# will messed our program up
gtk.gdk.threads_init()

def on_new_decoded_pad(dbin, pad, islast):
    decode = pad.get_parent()
    pipeline = decode.get_parent()
    convert = pipeline.get_by_name('convert')
    decode.link(convert)
    pipeline.set_state(gst.STATE_PLAYING)
    print "linked!"

def main():
    pipeline = gst.Pipeline('pipleline')

    filesrc = gst.element_factory_make("filesrc", "filesrc")
    filesrc.set_property('location', 'C:/a.mp3')

    decode = gst.element_factory_make("decodebin", "decode")

    convert = gst.element_factory_make('audioconvert', 'convert')

    sink = gst.element_factory_make("autoaudiosink", "sink")

    pipeline.add(filesrc, decode, convert, sink)
    gst.element_link_many(filesrc, decode)
    gst.element_link_many(convert, sink)

    decode.connect("new-decoded-pad", on_new_decoded_pad)

    pipeline.set_state(gst.STATE_PAUSED)

    gtk.main()

main()
</snippet></ROW><ROW><id>3041321</id><snippet>gst.parse_launch</snippet></ROW><ROW><id>3041321</id><snippet>playbin</snippet></ROW><ROW><id>3041447</id><snippet>input_element.find('..')
</snippet></ROW><ROW><id>3041447</id><snippet>def get_ancestors_recursively(e, b):
    "Finds ancestors of b in the element tree e."
    return _get_ancestors_recursively(e.getroot(), b, [])

def _get_ancestors_recursively(s, b, acc):
    "Recursive variant. acc is the built-up list of ancestors so far."
    if s == b:
        return acc
    else:
        for child in s.getchildren():
            newacc = acc[:]
            newacc.append(s)
            res = _get_ancestors_recursively(child, b, newacc)
            if res is not None:
                return res
        return None
</snippet></ROW><ROW><id>3041585</id><snippet>os.environ['PATH_INFO']</snippet></ROW><ROW><id>3041585</id><snippet>os.environ['REQUEST_URI']</snippet></ROW><ROW><id>3041585</id><snippet>request_uri = environ['REQUEST_URI']
request_uri = re.sub(r'%2f', '****', request_uri, re.I)
environ['PATH_INFO'] = urllib.unquote(request_uri)
</snippet></ROW><ROW><id>3041585</id><snippet>****</snippet></ROW><ROW><id>3041868</id><snippet>import datetime
import itertools

accrual_months_days = (1,1), (4,1), (7,1), (10,1)

def accruals(begin_date, end_date, hours_per=8):
  """Vacation accrued between begin_date and end_date included."""
  cur_year = begin_date.year - 1
  result = 0
  for m, d in itertools.cycle(accrual_months_days):
    if m == 1: cur_year += 1
    d = datetime.date(cur_year, m, d)
    if d &lt; begin_date: continue
    if d &gt; end_date: return result
    result += hours_per

if __name__ == '__main__':  # examples
  print accruals(datetime.date(2010, 1, 12), datetime.date(2010, 9, 20))
  print accruals(datetime.date(2010, 4, 20), datetime.date(2012, 12, 21))
  print accruals(datetime.date(2010, 12, 21), datetime.date(2012, 4, 20))
</snippet></ROW><ROW><id>3041990</id><snippet>raw_input()</snippet></ROW><ROW><id>3041990</id><snippet>import sys

def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits &lt;Enter&gt;.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":True,   "y":True,  "ye":True,
             "no":False,     "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")
# Usage example

&gt;&gt;&gt; query_yes_no("Is cabbage yummier than cauliflower?")
Is cabbage yummier than cauliflower? [Y/n] oops
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [Y/n] y
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>3042289</id><snippet>&gt;&gt;&gt; 2 + 2
4
&gt;&gt;&gt; '2' + '2'
'22'
</snippet></ROW><ROW><id>3042289</id><snippet>&gt;&gt;&gt; str(int('0671', 8))
'441'
</snippet></ROW><ROW><id>3042289</id><snippet>int(s, 8)</snippet></ROW><ROW><id>3042289</id><snippet>s</snippet></ROW><ROW><id>3042289</id><snippet>str(n)</snippet></ROW><ROW><id>3042289</id><snippet>n</snippet></ROW><ROW><id>3042321</id><snippet>import os
print os.getegid()
</snippet></ROW><ROW><id>3042639</id><snippet>dict</snippet></ROW><ROW><id>3042639</id><snippet>get</snippet></ROW><ROW><id>3042639</id><snippet>def get_foo(needle):
    haystack = object_dict()
    return haystack.get(needle)
</snippet></ROW><ROW><id>3042750</id><snippet>title_template</snippet></ROW><ROW><id>3042750</id><snippet>description_template</snippet></ROW><ROW><id>3042899</id><snippet>sourcefile = "C:\\Python25\\PC_New.txt" 
filename2 = "C:\\Python25\\PC_reduced.txt"

offending = ["Exception","Integer","RuntimeException"]

def fixup( filename ): 
    fin = open( filename ) 
    fout = open( filename2 , "w") 
    for line in fin: 
        if True in [item in line for item in offending]:
            continue
        fout.write(line)
    fin.close() 
    fout.close() 

fixup(sourcefile)
</snippet></ROW><ROW><id>3042899</id><snippet>for line in fin: 
    if not True in [item in line for item in offending]:
        fout.write(line)
</snippet></ROW><ROW><id>3043778</id><snippet>RLIMIT_RSS
Specifies the limit (in pages) of  the  process's  resident  set
(the  number of virtual pages resident in RAM).  This limit only
has effect in Linux 2.4.x, x &lt; 30, and there only affects  calls
to madvise(2) specifying MADV_WILLNEED.
</snippet></ROW><ROW><id>3043933</id><snippet>re.sub</snippet></ROW><ROW><id>3043933</id><snippet>r = re.compile(r"(self\.uid\s*=\s*)'\w{12}'")
for line in fileinput.input(['file.py'], inplace=True):
    print r.sub(r"\1'%s'" %sys.argv[1],line),
</snippet></ROW><ROW><id>3043961</id><snippet>deepcopy</snippet></ROW><ROW><id>3043961</id><snippet>deepcopy</snippet></ROW><ROW><id>3043961</id><snippet>copy.py</snippet></ROW><ROW><id>3043961</id><snippet>sorted</snippet></ROW><ROW><id>3043961</id><snippet>a=1</snippet></ROW><ROW><id>3043961</id><snippet>1</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>a=1</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>&gt;&gt;&gt; a = []      # construct a new list, attach a tag named "a" to it
&gt;&gt;&gt; b = a       # attach a tag named "b" to the object which is tagged by "a"
&gt;&gt;&gt; a.append(1) # append 1 to the list tagged by "a"
&gt;&gt;&gt; print b     # print the list tagged by "b"
[1]
</snippet></ROW><ROW><id>3043961</id><snippet>&gt;&gt;&gt; a = ()      # construct a new tuple, attach a tag named "a" to it
&gt;&gt;&gt; b = a       # now "b" refers to the same empty tuple as "a"
&gt;&gt;&gt; a += (1, 2) # appending some elements to the tuple
&gt;&gt;&gt; print b
()
</snippet></ROW><ROW><id>3043961</id><snippet>a += (1, 2)</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>(1, 2)</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>b</snippet></ROW><ROW><id>3043961</id><snippet>a = a+2</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>a</snippet></ROW><ROW><id>3043961</id><snippet>frozenset</snippet></ROW><ROW><id>3043961</id><snippet>PointDistance</snippet></ROW><ROW><id>3043961</id><snippet>namedtuple</snippet></ROW><ROW><id>3043961</id><snippet>collections</snippet></ROW><ROW><id>3043961</id><snippet>from collections import namedtuple
PointDistance = namedtuple("PointDistance", "point distance")
</snippet></ROW><ROW><id>3043961</id><snippet>PointDistance</snippet></ROW><ROW><id>3043961</id><snippet>point</snippet></ROW><ROW><id>3043961</id><snippet>distance</snippet></ROW><ROW><id>3043961</id><snippet>for</snippet></ROW><ROW><id>3043961</id><snippet>point</snippet></ROW><ROW><id>3043961</id><snippet>for</snippet></ROW><ROW><id>3043961</id><snippet>distance</snippet></ROW><ROW><id>3043961</id><snippet>sorted</snippet></ROW><ROW><id>3043961</id><snippet>sorted</snippet></ROW><ROW><id>3043961</id><snippet>heapq</snippet></ROW><ROW><id>3043961</id><snippet>k</snippet></ROW><ROW><id>3043961</id><snippet>heapq</snippet></ROW><ROW><id>3043961</id><snippet>sorted</snippet></ROW><ROW><id>3043961</id><snippet>deepcopy</snippet></ROW><ROW><id>3044252</id><snippet>story = db.get(story_key)
author_id = Story.author.get_value_for_datastore(story).id()
</snippet></ROW><ROW><id>3044448</id><snippet>&gt;&gt;&gt; s = """return_value ClassName::MethodName(args)
{MehodBody {} } """
&gt;&gt;&gt; re.findall(r'\b(\w+)::(\w+)\([^{]+\{(.+)}', s, re.S)
[('ClassName', 'MethodName', 'MehodBody {} ')]
</snippet></ROW><ROW><id>3044570</id><snippet>Could not determine join condition between parent/child tables...</snippet></ROW><ROW><id>3044570</id><snippet>Group_To_Group</snippet></ROW><ROW><id>3044570</id><snippet>mapper(Group_To_Group, t_group_groups, properties={
    'parent_group':relationship(Group,
        primaryjoin=(t_group_groups.c.parent_group_id==t_groups.c.id),),
    'child_group':relationship(Group,
        primaryjoin=(t_group_groups.c.child_group_id==t_groups.c.id),),
})
</snippet></ROW><ROW><id>3044570</id><snippet>backref</snippet></ROW><ROW><id>3044570</id><snippet>Group</snippet></ROW><ROW><id>3044957</id><snippet>pycurl_connect = pycurl.Curl()
pycurl_connect.setopt(pycurl.URL, your_url)
pycurl_connect.setopt(pycurl.HTTPHEADER, ['header_name1: header_value1',
                                          'header_name2: header_value2'])
pycurl_connect.perform()
</snippet></ROW><ROW><id>3045144</id><snippet>Queue</snippet></ROW><ROW><id>3045148</id><snippet>pyhook</snippet></ROW><ROW><id>3045167</id><snippet>lft</snippet></ROW><ROW><id>3045167</id><snippet>rght</snippet></ROW><ROW><id>3045167</id><snippet>reparent_children</snippet></ROW><ROW><id>3045167</id><snippet>save()</snippet></ROW><ROW><id>3045167</id><snippet>def reparent_children(self, parent):
    print "Reparenting"
    for child in self.get_children():
        print "Working on", child.first_name, "to parent", parent.email
        parent = Node.objects.get(id=parent.id)
        current_child = Node.objects.get(id = child.id)
        current_child.move_to(parent, 'last-child')
        current_child.save()
</snippet></ROW><ROW><id>3045218</id><snippet>s</snippet></ROW><ROW><id>3045218</id><snippet>int(s,0)
</snippet></ROW><ROW><id>3045343</id><snippet>class A:
   def __init__(self):
      self.name = 'hi'

x = 3
a = A()

def foo():
   a.name = 'Bedevere'
   x = 9

foo()
print x, a.name #outputs 3 Bedevere
</snippet></ROW><ROW><id>3045343</id><snippet>class Knights:
   def __init__(self, name='Bedevere'):
       self.name = name
   def knight(self):
       self.name = 'Sir ' + self.name
   def speak(self):
       print self.name + ":", "Run away!"

class FerociousRabbit:
   def __init__(self):
       self.death = "awaits you with sharp pointy teeth!"
   def speak(self):
       print "Squeeeeeeee!"

def cave(thing):
   thing.speak()
   if isinstance(thing, Knights):
       thing.knight()

def scene():
   k = Knights()
   k2 = Knights('Launcelot')
   b = FerociousRabbit()
   for i in (b, k, k2):
      cave(i)
</snippet></ROW><ROW><id>3045343</id><snippet>class Tim:
   def speak(self):
       print "Death awaits you with sharp pointy teeth!"
</snippet></ROW><ROW><id>3045355</id><snippet>def someView(request):
  surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 100, 100)
  context = cairo.Context(surface)
  # Draw something ...

  response = HttpResponse(mimetype="image/png")
  surface.write_to_png(response)
  return response
</snippet></ROW><ROW><id>3045403</id><snippet>__init__</snippet></ROW><ROW><id>3045403</id><snippet>&gt;&gt;&gt; class Foo(object):
...   bar = []          # defines a class variable on Foo (shared by all instances)
...
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; b = Foo()
&gt;&gt;&gt; a.bar.append(1)     # appends the value 1 to the previously empty list Foo.bar
&gt;&gt;&gt; b.bar               # returns the value of the class variable Foo.bar
[1]
&gt;&gt;&gt; a.bar = 1           # binds 1 to the instance variable a.bar, masking the access
&gt;&gt;&gt; a.bar               # you previously had to the class variable through a.bar
1
&gt;&gt;&gt; b.bar               # b doesn't have an instance variable 'bar' so this still
[1]                     # returns the class variable
&gt;&gt;&gt; a.bar = []          # bind a's instance variable to to an empty list
&gt;&gt;&gt; a.bar
[]
&gt;&gt;&gt; b.bar               # b doesn't have an instance variable 'bar' so this still
[1]                     # returns the class variable
&gt;&gt;&gt; del a.bar           # unbinds a's instance variable unmasking the class variable
&gt;&gt;&gt; a.bar               # so a.bar now returns the list with 1 in it.
[1]
</snippet></ROW><ROW><id>3045403</id><snippet>Foo.bar</snippet></ROW><ROW><id>3045681</id><snippet>import pythoncom</snippet></ROW><ROW><id>3045681</id><snippet>try except</snippet></ROW><ROW><id>3046247</id><snippet>def flatten(lst):
    for elem in lst:
        if type(elem) in (tuple, list):
            for i in flatten(elem):
                yield i
        else:
            yield elem
</snippet></ROW><ROW><id>3046247</id><snippet>list()</snippet></ROW><ROW><id>3046247</id><snippet>flattenedList = list(flatten(nestedList))
</snippet></ROW><ROW><id>3046325</id><snippet>gdk_pixbuf_save()</snippet></ROW><ROW><id>3046325</id><snippet>#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gdk/gdk.h&gt;
#include &lt;cairo.h&gt;

int main(int argc, char **argv)
{
    gdk_init(&amp;argc, &amp;argv);

    GdkWindow *w = gdk_get_default_root_window();

    gint width, height;
    gdk_drawable_get_size(GDK_DRAWABLE(w), &amp;width, &amp;height);

    GdkPixbuf *pb = gdk_pixbuf_get_from_drawable(NULL, 
                       GDK_DRAWABLE(w), 
                       NULL, 
                       0,0,0,0,width,height);

    if(pb != NULL) {
        cairo_surface_t *surf = cairo_image_surface_create(CAIRO_FORMAT_RGB24, 
                                                           width, height);
        cairo_t *cr = cairo_create(surf);
        gdk_cairo_set_source_pixbuf(cr, pb, 0, 0);
        cairo_paint(cr);
        cairo_surface_write_to_png(surf, "screenshot.png");
        g_print("Screenshot saved to screenshot.png.\n");
    } else {
        g_print("Unable to get the screenshot.\n");
    }
    return 0;
}
</snippet></ROW><ROW><id>3046325</id><snippet>gcc -std=gnu99 `pkg-config --libs --cflags gdk-2.0` screenshot.c -o screenshot
</snippet></ROW><ROW><id>3046325</id><snippet>gdk_pixbuf_save(pb, "screenshot.png", "png", NULL);
</snippet></ROW><ROW><id>3046416</id><snippet>#make sure DNS is running before you start
if not natlink.isNatSpeakRunning():
  raiseError('must start up Dragon NaturallySpeaking first!')
  shutdownServer()
  return
#connect to natlink and load the grammer it's supposed to recognize
natlink.natConnect()
loggerGrammar = LoggerGrammar()
loggerGrammar.initialize()
if natlink.getMicState() == 'off':
   natlink.setMicState('on')
userName = 'Danni'
natlink.openUser(userName)
#natlink.waitForSpeech() continuous loop waiting for input. 
#Results are sent to gotResultsObject method of the logger grammar
natlink.waitForSpeech()
natlink.natDisconnect()
</snippet></ROW><ROW><id>3046546</id><snippet>title</snippet></ROW><ROW><id>3046546</id><snippet>class Category(models.Model):
    groups = models.ManyToManyField(Group)
    @property
    def title(self):
        return self._title
    def save( self, *args, **kw  ):
        try:
            self._title
        except AttributeError:
            self._title= defaultdict()
        super( Category, self ).save( *args, **kw )
</snippet></ROW><ROW><id>3046550</id><snippet>django.db.models.Q</snippet></ROW><ROW><id>3046550</id><snippet>from django.db.models import Q

model = get_object_or_404(MyModel, ~Q(status='deleted'), pk=id)
</snippet></ROW><ROW><id>3046550</id><snippet>~</snippet></ROW><ROW><id>3046550</id><snippet>|</snippet></ROW><ROW><id>3046550</id><snippet>pk=id</snippet></ROW><ROW><id>3046566</id><snippet>class MyDuckType(sqlalchemy.types.TypeDecorator):
    """
    SQLALchemy custom column type, designed to let sqlite handle the typing 
    using 'numeric affinity' which intelligently handles both numbers and strings
    """
    impl = sqlite.NUMERIC

    def bind_processor(self, dialect):
        #function for type coercion during db write
        return None #ie pass value as-is, let sqlite do the typing

    def result_processor(self, dialect, coltype):
        #function for type coercion during db read
        return None #ie pass value as sqlite has stored it, should be ducktyped already

    def process_bind_param(self, value, dialect):
        #any changes to an individual value before store in DN
        return value

    def process_result_value(self, value, dialect):
        #any changes to an individual value after retrieve from DB
        return value

    def copy(self):
        #not quite sure what this is for
        return MyDuckType()
</snippet></ROW><ROW><id>3046566</id><snippet>def get_database_tables(engine):
    meta = MetaData()
    meta.reflect(bind=engine)
    tables = meta.raw_tables
    for tbl in tables.values():
        for col in tbl.c:
            col.type = MyDuckType()
    return tables
</snippet></ROW><ROW><id>3046664</id><snippet>def get_list(file, cmp, fout):
    ind, _ = min(enumerate(file), key=lambda x: abs(x[1] - cmp))
    return fout[ind].rstrip('\n').split(' ')

root = r'c:\begpython\wavnk'
header = 6
for lst in lists:
    save = database_index[lst]
    index, base, _, abs2, abs1, *_ = save
    using_data[index] = save

    base = os.path.join(root, base.replace('phone', 'text'))
    fin, fout = base + '.pm', base + '.mcep'
    file = open(fin)
    fout = open(fout).readlines()
    [next(file) for _ in range(header)]
    file = [float(line.partition(' ')[0]) for line in file]
    join_cost_index_end[index] = get_list(file, float(abs1), fout)
    join_cost_index_strt[index] = get_list(file, float(abs2), fout)
</snippet></ROW><ROW><id>3046664</id><snippet>range(len(sequence))</snippet></ROW><ROW><id>3047435</id><snippet>import sqlite3
conn = sqlite3.connect(':memory:')
</snippet></ROW><ROW><id>3047967</id><snippet>class FirstModelForm(forms.ModelForm):
    class Meta:
        model = TheModel
        fields = ('title',)
    def clean_title(self....
</snippet></ROW><ROW><id>3047967</id><snippet>clean_&lt;fieldname&gt;</snippet></ROW><ROW><id>3047967</id><snippet>class SecondModelForm(FirstModelForm):
    class Meta:
        model = TheModel
        fields = ('title', 'description')
</snippet></ROW><ROW><id>3048155</id><snippet># -*- coding: utf-8 -*-

import re
match = re.search(u'\\bשלום\\b', u'שלום עולם', re.U)
</snippet></ROW><ROW><id>3048925</id><snippet>&gt;&gt;&gt; a = 0.3
&gt;&gt;&gt; print a
0.3
&gt;&gt;&gt; a
0.29999999999999999
</snippet></ROW><ROW><id>3048925</id><snippet>a</snippet></ROW><ROW><id>3048925</id><snippet>0.3</snippet></ROW><ROW><id>3048925</id><snippet>print</snippet></ROW><ROW><id>3048925</id><snippet>a</snippet></ROW><ROW><id>3048925</id><snippet>&gt; (1 + .1) * 1000000000
  1100000000
&gt; (1 + .1) * 100000000000000
  110000000000000.02
</snippet></ROW><ROW><id>3049352</id><snippet>qry = (session.query(
                table.c.field1,
                table.c.field2,
                # #strftime* for year-month works on sqlite; 
                # @todo: find proper function for mysql (as in the question)
                # Also it is not clear if only MONTH part is enough, so that
                # May-2001 and May-2009 can be joined, or YEAR-MONTH must be used
                func.strftime('%Y-%m', table.c.datestamp),
                func.count(),
                )
        # optionally check only last 2 month data (could have partial months)
        .filter(table.c.datestamp &lt; datetime.date.today() - datetime.timedelta(60))
        .group_by(
                table.c.field1,
                table.c.field2,
                func.strftime('%Y-%m', table.c.datestamp),
                )
        # comment this line out to see all the groups
        .having(func.count()&gt;1)
      )
</snippet></ROW><ROW><id>3049475</id><snippet>ASCII                41
Windows-1252         41
ISO-8859-15          41
UTF-8                41
UTF-16BE             00 41
</snippet></ROW><ROW><id>3049475</id><snippet>ASCII                -
Windows-1252         80
ISO-8859-15          A4
UTF-8                E2 82 AC
UTF-16BE             20 AC
</snippet></ROW><ROW><id>3049475</id><snippet>ASCII                -
Windows-1252         -
ISO-8859-15          -
UTF-8                F0 9D 94 8A
UTF-16BE             D8 35 DD 0A
</snippet></ROW><ROW><id>3049475</id><snippet>ASCII                65 - (doesn't support the combining accent)
Windows-1252         65 - (doesn't support the combining accent)
ISO-8859-15          65 - (doesn't support the combining accent)
UTF-8                65 CC 81
UTF-16BE             00 65 03 01
</snippet></ROW><ROW><id>3049575</id><snippet>Table</snippet></ROW><ROW><id>3049575</id><snippet>utilities</snippet></ROW><ROW><id>3049698</id><snippet>x in y</snippet></ROW><ROW><id>3049698</id><snippet>x == y[i]</snippet></ROW><ROW><id>3049698</id><snippet>fancy_obj</snippet></ROW><ROW><id>3049698</id><snippet>arg</snippet></ROW><ROW><id>3049698</id><snippet>__eq__</snippet></ROW><ROW><id>3049698</id><snippet>fancy_objs</snippet></ROW><ROW><id>3049698</id><snippet>arg</snippet></ROW><ROW><id>3049698</id><snippet>(1, fancy_obj(arg='C:\\'),) in haystack</snippet></ROW><ROW><id>3049733</id><snippet>import array
from System import Array, Char

x = array.array('c', 'abc')

y = Array[Char](x)
</snippet></ROW><ROW><id>3050204</id><snippet>new_pixels = []
for row in pixels:
    new_row = array('B', row)
    i = 0
    while i &lt; len(new_row):
        r = new_row[i]
        g = new_row[i + 1]
        b = new_row[i + 2]
        if r&gt;threshold and g&gt;threshold and b&gt;threshold:
            m = int((r+g+b)/3)
            if nearly_eq(r,m,tolerance) and nearly_eq(g,m,tolerance) and nearly_eq(b,m,tolerance):
                new_row[i + 3] = 0
        i += 4
    new_pixels.append(new_row)
</snippet></ROW><ROW><id>3050269</id><snippet>import wmi

c = wmi.WMI()

for service in c.Win32_Service(Name="W3SVC"):
    result, = service.StopService()
</snippet></ROW><ROW><id>3050269</id><snippet>for service in c.IIsWebService():
    result, = service.StopService()
</snippet></ROW><ROW><id>3050270</id><snippet>import threading
dlock = threading.Lock()
d = {}
</snippet></ROW><ROW><id>3050270</id><snippet>d</snippet></ROW><ROW><id>3050270</id><snippet>with</snippet></ROW><ROW><id>3050270</id><snippet>with dlock:
    found = k in d
</snippet></ROW><ROW><id>3050270</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>3050270</id><snippet>d</snippet></ROW><ROW><id>3050270</id><snippet>d</snippet></ROW><ROW><id>3050270</id><snippet>if k in d:</snippet></ROW><ROW><id>3050270</id><snippet>d.get(k)</snippet></ROW><ROW><id>3050270</id><snippet>Queue.Queue</snippet></ROW><ROW><id>3050374</id><snippet>Received: (qmail 8580 invoked from network); 15 Jun 2010 21:43:22 -0400
Received: from mail-fx0-f44.google.com (209.85.161.44) by ip-73-187-35-131.ip.secureserver.net with SMTP; 15 Jun 2010 21:43:22 -0400
Received: by fxm19 with SMTP id 19so170709fxm.3 for &lt;username@domain.com&gt;; Tue, 15 Jun 2010 18:47:33 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.103.84.1 with SMTP id m1mr2774225mul.26.1276652853684; Tue, 15 Jun 2010 18:47:33 -0700 (PDT)
Received: by 10.123.143.4 with HTTP; Tue, 15 Jun 2010 18:47:33 -0700 (PDT)
Date: Tue, 15 Jun 2010 20:47:33 -0500
Message-ID: &lt;AANLkTikFsIjJ3KYW1HJWcAqQlGXNiXE2YMzrj39I0tdB@mail.gmail.com&gt;
Subject: TEST 12
From: Full Name &lt;username@sender.com&gt;
To: username@domain.com
Content-Type: text/plain; charset=ISO-8859-1

ONE
TWO
THREE
</snippet></ROW><ROW><id>3050374</id><snippet>msg = email.message_from_string(msgtxt)
print msg['Subject']
</snippet></ROW><ROW><id>3050374</id><snippet>TEST 12</snippet></ROW><ROW><id>3050403</id><snippet>def OnKeyboardEvent(event):
    if event.Alt == 32 and event.KeyID == 49:
        print 'HERE WILL BE THE CODE'

    # return True to pass the event to other handlers
    return True
</snippet></ROW><ROW><id>3050436</id><snippet>yield</snippet></ROW><ROW><id>3050436</id><snippet>return</snippet></ROW><ROW><id>3050436</id><snippet>itertools.chain</snippet></ROW><ROW><id>3050436</id><snippet>fee().fie().fo().fum()</snippet></ROW><ROW><id>3050436</id><snippet>fum</snippet></ROW><ROW><id>3050436</id><snippet>remote(host, **kwargs)</snippet></ROW><ROW><id>3050436</id><snippet>class RPC(object):
    def __init__(self, host):
        self._host = host
        self._kws = {}
    def doit(self, **morekws):
        return remote(self._host, **dict(self._kws, **morekws))
    def __getattr__(self, name):
        def setkw(value):
            self._kws[name] = value
            return self
        return setkw
</snippet></ROW><ROW><id>3050436</id><snippet>RPC(x).foo('bar').baz('bap').doit()</snippet></ROW><ROW><id>3050436</id><snippet>remote(x, foo=bar, baz=bap)</snippet></ROW><ROW><id>3050436</id><snippet>doit</snippet></ROW><ROW><id>3050521</id><snippet>/usr/local</snippet></ROW><ROW><id>3050521</id><snippet>/usr/local/bin/pythonX.Y</snippet></ROW><ROW><id>3050521</id><snippet>/usr/local/python</snippet></ROW><ROW><id>3050521</id><snippet>/usr/</snippet></ROW><ROW><id>3050521</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>3050521</id><snippet>PATH</snippet></ROW><ROW><id>3050521</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3050521</id><snippet>/usr/bin</snippet></ROW><ROW><id>3050521</id><snippet>python</snippet></ROW><ROW><id>3050610</id><snippet>def getHome():
  if hasattr(sys, "frozen"):
    if sys.platform == "darwin": # OS X
      return os.path.join(os.path.dirname(os.path.dirname(sys.executable)), "Resources")
    return os.path.dirname(sys.executable)
  else:
    return os.path.dirname(__file__)
</snippet></ROW><ROW><id>3050610</id><snippet>__file__</snippet></ROW><ROW><id>3050813</id><snippet>db.get</snippet></ROW><ROW><id>3050894</id><snippet>import Image, numpy

def subimg(img1,img2):
    img1=numpy.asarray(img1)
    img2=numpy.asarray(img2)

    #img1=numpy.array([[1,2,3],[4,5,6],[7,8,9]])
    #img2=numpy.array([[0,0,0,0,0],[0,1,2,3,0],[0,4,5,6,0],[0,7,8,9,0],[0,0,0,0,0]])

    img1y=img1.shape[0]
    img1x=img1.shape[1]

    img2y=img2.shape[0]
    img2x=img2.shape[1]

    stopy=img2y-img1y+1
    stopx=img2x-img1x+1

    for x1 in range(0,stopx):
        for y1 in range(0,stopy):
            x2=x1+img1x
            y2=y1+img1y

            pic=img2[y1:y2,x1:x2]
            test=pic==img1

            if test.all():
                return x1, y1

    return False

small=Image.open('small.tif')
big=Image.open('big.tif')

print subimg(small, big)
</snippet></ROW><ROW><id>3050950</id><snippet>print()</snippet></ROW><ROW><id>3051023</id><snippet>test.py</snippet></ROW><ROW><id>3051023</id><snippet>PluginB</snippet></ROW><ROW><id>3051023</id><snippet>BasePlugin</snippet></ROW><ROW><id>3051023</id><snippet>    print PluginA.__mro__
    print PluginB.__mro__
</snippet></ROW><ROW><id>3051023</id><snippet>(&lt;class 'plugina_plugin.PluginA'&gt;, &lt;class 'base.BasePlugin'&gt;, &lt;type 'object'&gt;)
(&lt;class 'backends.digger.test.PluginB'&gt;, &lt;class 'backends.digger.base.BasePlugin'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>3051023</id><snippet>plugina_plugin.py</snippet></ROW><ROW><id>3051023</id><snippet>BasePlugin</snippet></ROW><ROW><id>3051023</id><snippet>from base import BasePlugin
</snippet></ROW><ROW><id>3051023</id><snippet>from backends.digger.base import BasePlugin
</snippet></ROW><ROW><id>3051084</id><snippet>import SendKeys
SendKeys.SendKeys("Hello world")
</snippet></ROW><ROW><id>3051084</id><snippet>import SendKeys
SendKeys.SendKeys("""
    {LWIN}
    {PAUSE .25}
    r
    Notepad.exe{ENTER}
    {PAUSE 1}
    Hello{SPACE}World!
    {PAUSE 1}
    %{F4}
    n
""")
</snippet></ROW><ROW><id>3051084</id><snippet>import win32api
import win32com.client

shell = win32com.client.Dispatch("WScript.Shell")
shell.Run("calc")
win32api.Sleep(100)
shell.AppActivate("Calculator")
win32api.Sleep(100)
shell.SendKeys("1{+}")
win32api.Sleep(500)
shell.SendKeys("2")
win32api.Sleep(500)
shell.SendKeys("~") # ~ is the same as {ENTER}
win32api.Sleep(500)
shell.SendKeys("*3")
win32api.Sleep(500)
shell.SendKeys("~")
win32api.Sleep(2500)
</snippet></ROW><ROW><id>3051242</id><snippet>public static int createIntFrom16( byte _8Bit1, byte _8Bit2 ) {
    return ( 8Bit1&lt;&lt;8 ) | ( 8Bit2 &amp;0x00FF );
}
</snippet></ROW><ROW><id>3051242</id><snippet>public static byte[] createBytesFromInt(int i) {
    byte[] bytes = new byte[2];
    bytes[0]=(byte)(i&gt;&gt;8);
    bytes[1]=(byte)i;
    return bytes;
}
</snippet></ROW><ROW><id>3051389</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as Soup
&gt;&gt;&gt; from soupselect import select
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; soup = Soup(urllib.urlopen('http://slashdot.org/'))
&gt;&gt;&gt; select(soup, 'div.title h3')
[&lt;h3&gt;&lt;span&gt;&lt;a href='//science.slashdot.org/'&gt;Science&lt;/a&gt;:&lt;/span&gt;&lt;/h3&gt;,
 &lt;h3&gt;&lt;a href='//slashdot.org/articles/07/02/28/0120220.shtml'&gt;Star Trek&lt;/h3&gt;,
..]
</snippet></ROW><ROW><id>3051648</id><snippet>f = lambda x,y: x if x == y else False
# for Python &lt;= 2.4 use this instead:
# f = lambda x,y: x == y and x or False
# test rows
[reduce(f,r) for r in array]
# test columns
reduce(lambda r,s: map(f,r,s), array)
</snippet></ROW><ROW><id>3052508</id><snippet>commands.getstatusoutput(cmd)</snippet></ROW><ROW><id>3052508</id><snippet>{ cmd  ; } 2&gt;&amp;1
</snippet></ROW><ROW><id>3052508</id><snippet>{ find / &gt; tmp.txt &amp; ; } 2 &gt;&amp; 1
</snippet></ROW><ROW><id>3052508</id><snippet>;</snippet></ROW><ROW><id>3052508</id><snippet>&amp;</snippet></ROW><ROW><id>3052508</id><snippet>os.spawn</snippet></ROW><ROW><id>3052508</id><snippet>subprocess.Popen("find / &gt; tmp.txt", shell=True)
</snippet></ROW><ROW><id>3052516</id><snippet>from genshi.template import MarkupTemplate

tpl_xml = '''
&lt;doc xmlns:py="http://genshi.edgewall.org/"&gt;
&lt;p py:for="i in data"&gt;${i}&lt;/p&gt;
&lt;/doc&gt;
'''

tpl = MarkupTemplate(tpl_xml)
stream = tpl.generate(data=xrange(10000000))

with open('output.xml', 'w') as f:
    stream.render(out=f)
</snippet></ROW><ROW><id>3052516</id><snippet>from mako.template import Template
from mako.runtime import Context

tpl_xml = '''
&lt;doc&gt;
% for i in data:
&lt;p&gt;${i}&lt;/p&gt;
% endfor
&lt;/doc&gt;
'''

tpl = Template(tpl_xml)

with open('output.xml', 'w') as f:
    ctx = Context(f, data=xrange(10000000))
    tpl.render_context(ctx)
</snippet></ROW><ROW><id>3052548</id><snippet>Is Twisted the right choice for this?</snippet></ROW><ROW><id>3052548</id><snippet>Are there other options?</snippet></ROW><ROW><id>3052548</id><snippet>If not, is my implementation of the system flawed?</snippet></ROW><ROW><id>3052548</id><snippet>p.wait()</snippet></ROW><ROW><id>3052576</id><snippet>{% if %}</snippet></ROW><ROW><id>3052576</id><snippet>{% ifequal %}</snippet></ROW><ROW><id>3052576</id><snippet>{% if %}</snippet></ROW><ROW><id>3052592</id><snippet>os.environ</snippet></ROW><ROW><id>3052592</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ['HUDSON_HOME'] = 'http://localhost:8080'
</snippet></ROW><ROW><id>3052827</id><snippet>def foo():
    x = 'hello world'
    return x  # return 'hello world' would do, too

foo()
print x    # NameError - x is not defined outside the function

y = foo()
print y    # this works

x = foo()
print x    # this also works, and it's a completely different x than that inside
           # foo()

z = bar(x) # of course, now you can use x as you want

z = bar(foo()) # but you don't have to
</snippet></ROW><ROW><id>3052840</id><snippet>include</snippet></ROW><ROW><id>3052840</id><snippet>{% include 'header.html' %}
    Body
{% include 'footer.html' %}
</snippet></ROW><ROW><id>3052869</id><snippet>some_name = 'wee'
setattr(my_entity, some_name, 'value')
print getattr(my_entity, some_name)
my_entity.put()
</snippet></ROW><ROW><id>3052869</id><snippet>setattr</snippet></ROW><ROW><id>3052869</id><snippet>getattr</snippet></ROW><ROW><id>3053032</id><snippet>unique=True</snippet></ROW><ROW><id>3053032</id><snippet>class Getdata(models.Model):
    title = models.CharField(max_length=255, unique=True)
    state = models.CharField(max_length=2, choices=STATE, default="0")
    name = models.ForeignKey(School)
    created_by = models.ForeignKey(profile)
</snippet></ROW><ROW><id>3053032</id><snippet>class Getdata(models.Model):
    title = models.CharField(max_length=255)
    state = models.CharField(max_length=2, choices=STATE, default="0")
    name = models.ForeignKey(School)
    created_by = models.ForeignKey(profile)
    class Meta:
        unique_together = ["title", "state", "name"]
</snippet></ROW><ROW><id>3053299</id><snippet>super(Class2, self).__init__()
</snippet></ROW><ROW><id>3053299</id><snippet>super</snippet></ROW><ROW><id>3053299</id><snippet>Class1</snippet></ROW><ROW><id>3053299</id><snippet>__init__</snippet></ROW><ROW><id>3053704</id><snippet>x</snippet></ROW><ROW><id>3053704</id><snippet>y</snippet></ROW><ROW><id>3053745</id><snippet>setattr(some_object, 'some_attribute', 42);
</snippet></ROW><ROW><id>3054024</id><snippet>map&lt;pair&lt;..., string&gt;, ...&gt;</snippet></ROW><ROW><id>3054120</id><snippet>import cStringIO
fp = cStringIO.StringIO()
MyImage.save(fp,'GIF')
MyPhotoImage = PhotoImage(data=fp.getvalue())
</snippet></ROW><ROW><id>3054120</id><snippet>from Tkinter import *
from PIL import ImageGrab
import cStringIO, base64

window = Tk()

box = (100,100,500,500)
MyImage = ImageGrab.grab(box)

fp = cStringIO.StringIO()
MyImage.save(fp,'GIF')    

MyPhotoImage = PhotoImage(data=base64.encodestring(fp.getvalue())) 
PictureLabel = Label(image=MyPhotoImage)
PictureLabel.pack()
PictureLabel.image = MyPhotoImage

window.mainloop()
</snippet></ROW><ROW><id>3054156</id><snippet>"%0.2f" % yournumber
</snippet></ROW><ROW><id>3054156</id><snippet>def twoDigits(x):
    return int(100*x)/100.0
</snippet></ROW><ROW><id>3054286</id><snippet>num</snippet></ROW><ROW><id>3054286</id><snippet>xrange</snippet></ROW><ROW><id>3054286</id><snippet>range</snippet></ROW><ROW><id>3054286</id><snippet>z = []
for i in range(loop_count):
   z.append(str(i))
return "".join(z)
</snippet></ROW><ROW><id>3054402</id><snippet>&gt;&gt;&gt; l = ['955.159', '62.8168', '', '', '', '', '', '', '', '', '', '', '', '', '', '29', '30', '0', '0']
&gt;&gt;&gt; filter(bool, l) # remove empty values
['955.159', '62.8168', '29', '30', '0', '0']
&gt;&gt;&gt; map(float, filter(bool, l)) # remove empty values and convert the rest to floats
[955.15899999999999, 62.816800000000001, 29.0, 30.0, 0.0, 0.0]
</snippet></ROW><ROW><id>3054402</id><snippet>NULL</snippet></ROW><ROW><id>3054402</id><snippet>&gt;&gt;&gt; map(lambda x: x or 'NULL', l)
['955.159', '62.8168', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', '29', '30', '0', '0']
</snippet></ROW><ROW><id>3054422</id><snippet>request.session.session_key</snippet></ROW><ROW><id>3054505</id><snippet>register</snippet></ROW><ROW><id>3054505</id><snippet>registry = {}

class RegisteringType(type):
    def __init__(cls, name, bases, attrs):
        for key, val in attrs.iteritems():
            properties = getattr(val, 'register', None)
            if properties is not None:
                registry['%s.%s' % (name, key)] = properties

def register(*args):
    def decorator(f):
        f.register = tuple(args)
        return f
    return decorator

class MyClass(object):
    __metaclass__ = RegisteringType
    @register('prop1','prop2')
    def my_method( arg1,arg2 ):
        pass

    @register('prop3','prop4')
    def my_other_method( arg1,arg2 ):
        pass

print registry
</snippet></ROW><ROW><id>3054505</id><snippet>{'MyClass.my_other_method': ('prop3', 'prop4'), 'MyClass.my_method': ('prop1', 'prop2')}
</snippet></ROW><ROW><id>3054831</id><snippet>foo = """
this is 
a multi-line string.
"""

def f1(foo=foo): return iter(foo.splitlines())

def f2(foo=foo):
    retval = ''
    for char in foo:
        retval += char if not char == '\n' else ''
        if char == '\n':
            yield retval
            retval = ''
    if retval:
        yield retval

def f3(foo=foo):
    prevnl = -1
    while True:
      nextnl = foo.find('\n', prevnl + 1)
      if nextnl &lt; 0: break
      yield foo[prevnl + 1:nextnl]
      prevnl = nextnl

if __name__ == '__main__':
  for f in f1, f2, f3:
    print list(f())
</snippet></ROW><ROW><id>3054831</id><snippet>timeit</snippet></ROW><ROW><id>3054831</id><snippet>* 100</snippet></ROW><ROW><id>3054831</id><snippet>foo</snippet></ROW><ROW><id>3054831</id><snippet>$ python -mtimeit -s'import asp' 'list(asp.f3())'
1000 loops, best of 3: 370 usec per loop
$ python -mtimeit -s'import asp' 'list(asp.f2())'
1000 loops, best of 3: 1.36 msec per loop
$ python -mtimeit -s'import asp' 'list(asp.f1())'
10000 loops, best of 3: 61.5 usec per loop
</snippet></ROW><ROW><id>3054831</id><snippet>list()</snippet></ROW><ROW><id>3054831</id><snippet>find</snippet></ROW><ROW><id>3054831</id><snippet>splitlines</snippet></ROW><ROW><id>3054831</id><snippet>+=</snippet></ROW><ROW><id>3054831</id><snippet>from cStringIO import StringIO

def f4(foo=foo):
    stri = StringIO(foo)
    while True:
        nl = stri.readline()
        if nl != '':
            yield nl.strip('\n')
        else:
            raise StopIteration
</snippet></ROW><ROW><id>3054831</id><snippet>$ python -mtimeit -s'import asp' 'list(asp.f4())'
1000 loops, best of 3: 406 usec per loop
</snippet></ROW><ROW><id>3054831</id><snippet>.find</snippet></ROW><ROW><id>3054831</id><snippet>f3</snippet></ROW><ROW><id>3054831</id><snippet>f4</snippet></ROW><ROW><id>3054831</id><snippet>from cStringIO import StringIO

def f4(foo=foo):
    stri = StringIO(foo)
    while True:
        nl = stri.readline()
        if nl == '': break
        yield nl.strip('\n')
</snippet></ROW><ROW><id>3054831</id><snippet>\n</snippet></ROW><ROW><id>3054831</id><snippet>while</snippet></ROW><ROW><id>3054831</id><snippet>return iter(stri)</snippet></ROW><ROW><id>3054831</id><snippet>iter</snippet></ROW><ROW><id>3054831</id><snippet>    return itertools.imap(lambda s: s.strip('\n'), stri)
</snippet></ROW><ROW><id>3054831</id><snippet>strip</snippet></ROW><ROW><id>3054875</id><snippet>import os
os.getpid()
</snippet></ROW><ROW><id>3054875</id><snippet>import os, signal
os.kill(5383, signal.SIGKILL)
</snippet></ROW><ROW><id>3054875</id><snippet>import subprocess as s
def killProcess(pid):
    s.Popen('taskkill /F /PID {0}'.format(pid), shell=True)
</snippet></ROW><ROW><id>3054894</id><snippet>None</snippet></ROW><ROW><id>3054894</id><snippet>copy = pexpect.spawn('ssh service@10.10.10.10', timeout=None)
</snippet></ROW><ROW><id>3054894</id><snippet>None</snippet></ROW><ROW><id>3055223</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>3055223</id><snippet>queryset</snippet></ROW><ROW><id>3055223</id><snippet>Objtree.objects.filter(type__name='group', parent_id=50)
</snippet></ROW><ROW><id>3055223</id><snippet>__init__</snippet></ROW><ROW><id>3055223</id><snippet>class GroupAdd(forms.Form):
    parent_id = forms.IntegerField(widget=forms.HiddenInput)
    choices = forms.ModelChoiceField(queryset=None)

    def __init__(self, *args, **kwargs):
        pid = kwargs.pop('parent_id', None)
        super(GroupAdd, self).__init__(*args, **kwargs)
        self.fields['choices'].queryset = Objtree.objects.filter(
                                              type__name='group', parent_id=pid
                                          )
</snippet></ROW><ROW><id>3055225</id><snippet>from PythonMagickWand import *
from ctypes import *

arrayType = c_double * 8  
pointsNew = arrayType()
pointsNew[0] = c_double(121.523809524)
pointsNew[1] = c_double(317.79638009)
pointsNew[2] = c_double(141)
pointsNew[3] = c_double(275) 
pointsNew[4] = c_double(346.158730159)
pointsNew[5] = c_double(312.628959276)
pointsNew[6] = c_double(319)
pointsNew[7] = c_double(275)

ShepardsDistortion = DistortImageMethod(14)

MagickWandGenesis()
wand = NewMagickWand()
MagickReadImage(wand,'/home/user/image.png')
MagickDistortImage(wand,ShepardsDistortion, 8, pointsNew, False)
MagickWriteImage(wand,'/home/user/image_mod22.jpg')
</snippet></ROW><ROW><id>3055225</id><snippet>ShepardsDistortion = DistortImageMethod(14)
</snippet></ROW><ROW><id>3055283</id><snippet>t = numpy.arange(0.,0.03,1)
</snippet></ROW><ROW><id>3055356</id><snippet>for l in [a, b, c]:
    del l[-2:]
</snippet></ROW><ROW><id>3055356</id><snippet>for l in [a, b, c]:
    del l[:-2]
</snippet></ROW><ROW><id>3055356</id><snippet>a</snippet></ROW><ROW><id>3055356</id><snippet>b</snippet></ROW><ROW><id>3055356</id><snippet>c</snippet></ROW><ROW><id>3055357</id><snippet>class Global(dict):
    def undefined(self, *args, **kargs):
        return u'ran undefined'

    def __getitem__(self, key):
        if dict.has_key(self, key):
            return dict.__getitem__(self, key)
        return self.undefined

src = """
def foo():
    return u'ran foo'

print foo()
print callme(1,2)
"""

code = compile(src, '&lt;no file&gt;', 'exec')

globals = Global()
eval(code, globals)
</snippet></ROW><ROW><id>3055357</id><snippet>ran foo
ran undefined
</snippet></ROW><ROW><id>3055380</id><snippet>for L in m:
    try:
        L.remove(345)
    except ValueError:
        pass
</snippet></ROW><ROW><id>3055380</id><snippet>list.remove</snippet></ROW><ROW><id>3055380</id><snippet>def remove_nested(L, x):
    for S in L:
        try:
            S.remove(x)
        except ValueError:
            pass
        else:
            break  # Value was found and removed
    else:
        raise ValueError("remove_nested(L, x): x not in nested list")
</snippet></ROW><ROW><id>3055541</id><snippet>def method1():
  out_str = ''
  for num in xrange(loop_count):
    out_str += `num`
  return out_str
</snippet></ROW><ROW><id>3055541</id><snippet>def method4():
  str_list = []
  for num in xrange(loop_count):
    str_list.append(`num`)
  return ''.join(str_list)
</snippet></ROW><ROW><id>3055762</id><snippet>&gt;&gt;&gt; lst = ['tag1', 'tag2', 'tag3 tag3']
&gt;&gt;&gt; ', '.join(lst)
'tag1, tag2, tag3 tag3'
</snippet></ROW><ROW><id>3055762</id><snippet>[</snippet></ROW><ROW><id>3055762</id><snippet>]</snippet></ROW><ROW><id>3055762</id><snippet>'</snippet></ROW><ROW><id>3055995</id><snippet>libsqlite3-0  (= 3.6.10-1ubuntu0.2)</snippet></ROW><ROW><id>3055995</id><snippet>apt-get update</snippet></ROW><ROW><id>3055995</id><snippet>sudo apt-get update</snippet></ROW><ROW><id>3056059</id><snippet>inspect.currentframe().f_back.f_lineno
</snippet></ROW><ROW><id>3056276</id><snippet>rbp@apfelstrudel ~$ python
Python 2.6.2 (r262:71600, Apr 16 2009, 09:17:39) 
[GCC 4.0.1 (Apple Computer, Inc. build 5250)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from scipy import stats
&gt;&gt;&gt; print stats.binom_test.__doc__

    Perform a test that the probability of success is p.

    This is an exact, two-sided test of the null hypothesis
    that the probability of success in a Bernoulli experiment
    is `p`.

    Parameters
    ----------
    x : integer or array_like
        the number of successes, or if x has length 2, it is the
        number of successes and the number of failures.
    n : integer
        the number of trials.  This is ignored if x gives both the
        number of successes and failures
    p : float, optional
        The hypothesized probability of success.  0 &lt;= p &lt;= 1. The
        default value is p = 0.5

    Returns
    -------
    p-value : float
        The p-value of the hypothesis test

    References
    ----------
    .. [1] http://en.wikipedia.org/wiki/Binomial_test


&gt;&gt;&gt; stats.binom_test(500, 10000)
4.9406564584124654e-324
</snippet></ROW><ROW><id>3056293</id><snippet>return render_to_response('your_template.html', {'h': h})
</snippet></ROW><ROW><id>3056930</id><snippet>import json, urllib, urllib2
data = json.dumps(sandwiches)
urllib2.urlopen(myurl, urllib.urlencode({'data': data}))
</snippet></ROW><ROW><id>3056930</id><snippet>data = request.POST['data']
sandwiches = json.loads(data)
</snippet></ROW><ROW><id>3057199</id><snippet>&lt;Button Click="Foo"&gt;</snippet></ROW><ROW><id>3057199</id><snippet>XamlReader</snippet></ROW><ROW><id>3057199</id><snippet>+=</snippet></ROW><ROW><id>3057391</id><snippet>EnumValue</snippet></ROW><ROW><id>3057391</id><snippet>v.search(value)</snippet></ROW><ROW><id>3057391</id><snippet>v.search(str(value))</snippet></ROW><ROW><id>3057391</id><snippet>value</snippet></ROW><ROW><id>3057834</id><snippet>repr()</snippet></ROW><ROW><id>3057834</id><snippet>open(filename, 'rb')</snippet></ROW><ROW><id>3057834</id><snippet>delimeter=" "</snippet></ROW><ROW><id>3057834</id><snippet>delimiter="\t"</snippet></ROW><ROW><id>3057834</id><snippet>DEBUG = True
f = open('v2-host_tfdf_en.txt', 'rb')
if DEBUG:
    rawdata = f.read(200)
    f.seek(0)
    print 'rawdata', repr(rawdata)
    # what is the delimiter between fields? between rows?
tfdf_Reader = csv.reader(f,delimiter=' ')
c = 0
for row in tfdf_Reader:
    c = c + 1
    if DEBUG and c &lt;= 10:
        print "row", c, repr(row)
        # Are you getting rows like you expect?
print "rowcount", c
</snippet></ROW><ROW><id>3057834</id><snippet>Error: field larger than field limit (131072)</snippet></ROW><ROW><id>3057834</id><snippet>View/Show Symbol/Show all characters</snippet></ROW><ROW><id>3057834</id><snippet>csv</snippet></ROW><ROW><id>3057834</id><snippet>f = open('v2-host_tfdf_en.txt', 'r') # NOT 'rb'
rows = [line.split() for line in f]
</snippet></ROW><ROW><id>3057858</id><snippet>1 - residual / sum((y - y.mean())**2) 
</snippet></ROW><ROW><id>3057858</id><snippet>1 - residual / (n * y.var())
</snippet></ROW><ROW><id>3057858</id><snippet>import numpy as np

# Make some data...
n = 10
x = np.arange(n)
y = 3 * x + 5 + np.random.random(n)

# Note that polyfit is an easier way to do this...
# It would just be "model, resid = np.polyfit(x,y,1,full=True)[:2]" 
A = np.vstack((x, np.ones(n))).T
model, resid = np.linalg.lstsq(A, y)[:2]

r2 = 1 - resid / (y.size * y.var())
print r2
</snippet></ROW><ROW><id>3057974</id><snippet>defer()</snippet></ROW><ROW><id>3058047</id><snippet>       | &lt;1    2    3    4    5+
-------|----------------------------
&lt;10000 | 3.6   6.5  9.1  11.5 13.8
20000  | 3.9   7.3  10.0 13.1 15.9
20000+ | 4.5   9.2  12.2 14.8 18.2
</snippet></ROW><ROW><id>3058047</id><snippet>       |  0     1    2    3    4
-------|----------------------------
   0   | 3.6   6.5  9.1  11.5 13.8
   1   | 3.9   7.3  10.0 13.1 15.9
   2   | 4.5   9.2  12.2 14.8 18.2
</snippet></ROW><ROW><id>3058047</id><snippet>import numpy as np
from scipy.ndimage import map_coordinates

#-- Setup ---------------------------
z = np.array([ [3.6, 6.5, 9.1, 11.5, 13.8],
               [3.9, 7.3, 10.0, 13.1, 15.9],
               [4.5, 9.2, 12.2, 14.8, 18.2] ])
ny, nx = z.shape
xmin, xmax = 1, 5
ymin, ymax = 10000, 20000

# Points we want to interpolate at
x1, y1 = 1.3, 25000
x2, y2 = 0.2, 50000
x3, y3 = 2.5, 15000

# To make our lives easier down the road, let's 
# turn these into arrays of x &amp; y coords
xi = np.array([x1, x2, x3], dtype=np.float)
yi = np.array([y1, y2, y3], dtype=np.float)

# Now, we'll set points outside the boundaries to lie along an edge
xi[xi &gt; xmax] = xmax
xi[xi &lt; xmin] = xmin

# To deal with the "hard" break, we'll have to treat y differently, 
# so we're ust setting the min here...
yi[yi &lt; ymin] = ymin

# We need to convert these to (float) indicies
#   (xi should range from 0 to (nx - 1), etc)
xi = (nx - 1) * (xi - xmin) / (xmax - xmin)

# Deal with the "hard" break in the y-direction
yi = (ny - 2) * (yi - ymin) / (ymax - ymin)
yi[yi &gt; 1] = 2.0

# Now we actually interpolate
# map_coordinates does cubic interpolation by default, 
# use "order=1" to preform bilinear interpolation instead...
z1, z2, z3 = map_coordinates(z, [yi, xi])

# Display the results
for X, Y, Z in zip((x1, x2, x3), (y1, y2, y3), (z1, z2, z3)):
    print X, ',', Y, '--&gt;', Z
</snippet></ROW><ROW><id>3058047</id><snippet>1.3 , 25000 --&gt; 5.1807375
0.2 , 50000 --&gt; 4.5
2.5 , 15000 --&gt; 8.12252371652
</snippet></ROW><ROW><id>3058395</id><snippet>$ touch emptyfile
$ tar -tvf emptyfile
</snippet></ROW><ROW><id>3058461</id><snippet>* A MacPython 2.5 folder in your Applications folder. In here you find
</snippet></ROW><ROW><id>3058461</id><snippet>virtualenv</snippet></ROW><ROW><id>3058574</id><snippet>lxml</snippet></ROW><ROW><id>3058574</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>3058574</id><snippet>type</snippet></ROW><ROW><id>3058574</id><snippet>&lt;link rel="alternate" type="application/atom+xml" title="My Weblog feed" href="/feed/" /&gt;
</snippet></ROW><ROW><id>3058574</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>3058642</id><snippet>test['ifAction']</snippet></ROW><ROW><id>3058642</id><snippet>test[['ifAction','ifDocu']]</snippet></ROW><ROW><id>3058642</id><snippet>test['ifAction']</snippet></ROW><ROW><id>3058642</id><snippet>test['ifDocu']</snippet></ROW><ROW><id>3058642</id><snippet>test['ifAction'][0]=1
test['ifDocu'][0]=1
</snippet></ROW><ROW><id>3058642</id><snippet>import numpy as np
test=np.rec.array([(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
   (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)], 
  dtype=[('ifAction', '|i1'), ('ifDocu', '|i1'), ('ifComedy', '|i1')])

print(test[['ifAction','ifDocu']])
# [(0, 0) (0, 0) (0, 0) (0, 0) (0, 0) (0, 0) (0, 0) (0, 0) (0, 0) (0, 0)]
test['ifAction'][0]=1
test['ifDocu'][0]=1

print(test[['ifAction','ifDocu']][0])
# (1, 1)
test['ifAction'][0:10]=1
test['ifDocu'][0:10]=1

print(test[['ifAction','ifDocu']])
# [(1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1)]
</snippet></ROW><ROW><id>3058656</id><snippet>sys.version_info</snippet></ROW><ROW><id>3058656</id><snippet>import sys
if sys.version_info[0] == 2:
    input = raw_input
# Now you can use
input()
</snippet></ROW><ROW><id>3058656</id><snippet>input</snippet></ROW><ROW><id>3058656</id><snippet>import sys
if sys.version_info[0] == 2:
    my_input = raw_input
else:
    my_input = input
# Now you can use
my_input()
</snippet></ROW><ROW><id>3058656</id><snippet>input</snippet></ROW><ROW><id>3058656</id><snippet>__builtins__.input</snippet></ROW><ROW><id>3058685</id><snippet>class Node(object):

  def __init__(self, payload):
    self.payload = payload
    self.left = self.right = 0

    # this concludes the "how to represent" asked in the question.  Once you
    # represent a BST tree like this, you can of course add a variety of
    # methods to modify it, "walk" over it, and so forth, such as:

  def insert(self, othernode):
    "Insert Node `othernode` under Node `self`."
    if self.payload &lt;= othernode.payload:
      if self.left: self.left.insert(othernode)
      else: self.left = othernode
    else:
      if self.right: self.right.insert(othernode)
      else: self.right = othernode

  def inorderwalk(self):
    "Yield this Node and all under it in increasing-payload order."
    if self.left:
      for x in self.left.inorderwalk(): yield x
    yield self
    if self.right:
      for x in self.right.inorderwalk(): yield x

  def sillywalk(self):
    "Tiny, silly subset of `inorderwalk` functionality as requested."
    if self.left:
      self.left.sillywalk()
    print(self.payload)
    if self.right:
      self.right.sillywalk()
</snippet></ROW><ROW><id>3058685</id><snippet>sillywalk</snippet></ROW><ROW><id>3058685</id><snippet>walk</snippet></ROW><ROW><id>3058685</id><snippet>for x in tree.walk(): print(x.payload)
</snippet></ROW><ROW><id>3058685</id><snippet>walk</snippet></ROW><ROW><id>3058685</id><snippet>sillywalk</snippet></ROW><ROW><id>3058685</id><snippet>yield</snippet></ROW><ROW><id>3058685</id><snippet>print</snippet></ROW><ROW><id>3058685</id><snippet>__init__</snippet></ROW><ROW><id>3058685</id><snippet>payload</snippet></ROW><ROW><id>3058685</id><snippet>left</snippet></ROW><ROW><id>3058685</id><snippet>right</snippet></ROW><ROW><id>3058685</id><snippet>None</snippet></ROW><ROW><id>3058685</id><snippet>Node</snippet></ROW><ROW><id>3058685</id><snippet>insert</snippet></ROW><ROW><id>3058685</id><snippet>walk</snippet></ROW><ROW><id>3058685</id><snippet>sillywalk</snippet></ROW><ROW><id>3059012</id><snippet>from BeautifulSoup import BeautifulSoup

xml = """&lt;xml&gt;
  &lt;web:Web&gt;
    &lt;web:Total&gt;4000&lt;/web:Total&gt;
    &lt;web:Offset&gt;0&lt;/web:Offset&gt;
  &lt;/web:Web&gt;
&lt;/xml&gt;"""

doc = BeautifulSoup( xml )
print doc.find( 'web:total' ).string
print doc.find( 'web:offset' ).string
</snippet></ROW><ROW><id>3059012</id><snippet>from BeautifulSoup import BeautifulSoup

xml = """&lt;xml&gt;
  &lt;Web&gt;
    &lt;Total&gt;4000&lt;/Total&gt;
    &lt;Offset&gt;0&lt;/Offset&gt;
  &lt;/Web&gt;
&lt;/xml&gt;"""

doc = BeautifulSoup( xml )
print doc.xml.web.total.string
print doc.xml.web.offset.string
</snippet></ROW><ROW><id>3059012</id><snippet>web:Web</snippet></ROW><ROW><id>3059012</id><snippet>web:web</snippet></ROW><ROW><id>3059012</id><snippet>Web</snippet></ROW><ROW><id>3059012</id><snippet>web</snippet></ROW><ROW><id>3059012</id><snippet>web:web</snippet></ROW><ROW><id>3059012</id><snippet>web:web</snippet></ROW><ROW><id>3059140</id><snippet>import wave</snippet></ROW><ROW><id>3059140</id><snippet>wave.open('the.wav', 'r')</snippet></ROW><ROW><id>3059140</id><snippet>.readframes</snippet></ROW><ROW><id>3059140</id><snippet>.getnchannels</snippet></ROW><ROW><id>3059140</id><snippet>.getsampwidth</snippet></ROW><ROW><id>3059140</id><snippet>array</snippet></ROW><ROW><id>3059140</id><snippet>'B'</snippet></ROW><ROW><id>3059140</id><snippet>'H'</snippet></ROW><ROW><id>3059140</id><snippet>'L'</snippet></ROW><ROW><id>3059140</id><snippet>itemsize</snippet></ROW><ROW><id>3059140</id><snippet>array</snippet></ROW><ROW><id>3059140</id><snippet>array</snippet></ROW><ROW><id>3059319</id><snippet>rx = re.compile(r'(foo: ")(.*?)(".*)')
s_new = rx.sub(r'\g&lt;1&gt;pears\g&lt;3&gt;', s)
print(s_new)
</snippet></ROW><ROW><id>3059319</id><snippet>?</snippet></ROW><ROW><id>3059319</id><snippet>"</snippet></ROW><ROW><id>3059319</id><snippet>"</snippet></ROW><ROW><id>3059319</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>3059319</id><snippet>\g&lt;number&gt;</snippet></ROW><ROW><id>3059319</id><snippet>\1</snippet></ROW><ROW><id>3059319</id><snippet>g&lt;1&gt;</snippet></ROW><ROW><id>3059319</id><snippet>\1</snippet></ROW><ROW><id>3059345</id><snippet>print repr(data)
</snippet></ROW><ROW><id>3059345</id><snippet>print data.encode('hex')
</snippet></ROW><ROW><id>3059345</id><snippet>print ' '.join([str(ord(a)) for a in data])
</snippet></ROW><ROW><id>3059500</id><snippet>mailto:</snippet></ROW><ROW><id>3059500</id><snippet>webbrowser</snippet></ROW><ROW><id>3059500</id><snippet>smtplib</snippet></ROW><ROW><id>3059500</id><snippet>webbrowser</snippet></ROW><ROW><id>3059500</id><snippet>mailto:</snippet></ROW><ROW><id>3059500</id><snippet>webbrowser</snippet></ROW><ROW><id>3060359</id><snippet>db.Files.save({ "fn" : "/tmp/somefile", "ts" : [ { "t" : "places" }, { "t" : "locations" }] });
db.Files.save({ "fn" : "/tmp/someotherfile", "ts" : [ { "t" : "locations" }] });
</snippet></ROW><ROW><id>3060359</id><snippet>db.Tags.save({ "t" : "places" });
db.Tags.save({ "t" : "locations" });
db.Files.save({ "fn" : "/tmp/somefile", "t" : [ { "i" : ObjectId("IdOfPlaces") }, { "i" : ObjectId("IdOfLocations") }] });
</snippet></ROW><ROW><id>3060359</id><snippet>db.Files.find({ "_id" : ObjectId("4c19e79e244f000000007e0d") });
db.Files.find({ "fn" : "/tmp/somefile" });
</snippet></ROW><ROW><id>3060359</id><snippet>db.Files.find({ ts : { t : "locations" } })
db.Files.find({ t : { i : ObjectId("4c19e79e244f000000007e0d") } })
</snippet></ROW><ROW><id>3060411</id><snippet>urls.py</snippet></ROW><ROW><id>3060411</id><snippet>site_urls.py</snippet></ROW><ROW><id>3060411</id><snippet>from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^django/demoInstall/', include('site_urls.py')),
)
</snippet></ROW><ROW><id>3060435</id><snippet>import fileinput

for fl, line in zip(li, fileinput.input(['a.txt'], inplace=True)):
    print(line.strip() + '\t' + str(fl))
</snippet></ROW><ROW><id>3060672</id><snippet>LoggerAdapter</snippet></ROW><ROW><id>3061309</id><snippet>import copy, re

myMassage = [(re.compile('&lt;!-([^-])'), lambda match: '&lt;!--' + match.group(1))]
myNewMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)
myNewMassage.extend(myMassage)

BeautifulSoup(badString, markupMassage=myNewMassage)
# Foo&lt;!--This comment is malformed.--&gt;Bar&lt;br /&gt;Baz
</snippet></ROW><ROW><id>3061354</id><snippet>for x, _,_ in points:
    print(x)
</snippet></ROW><ROW><id>3061789</id><snippet>.shape</snippet></ROW><ROW><id>3061789</id><snippet>&gt;&gt;&gt; a.shape
(2, 2)
</snippet></ROW><ROW><id>3062454</id><snippet>'\n'</snippet></ROW><ROW><id>3062454</id><snippet>raw_input</snippet></ROW><ROW><id>3062454</id><snippet>sys.stdin.read(1)</snippet></ROW><ROW><id>3062617</id><snippet>self.request.POST</snippet></ROW><ROW><id>3062617</id><snippet>get</snippet></ROW><ROW><id>3062617</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>3062617</id><snippet>file.type</snippet></ROW><ROW><id>3062617</id><snippet>file.name</snippet></ROW><ROW><id>3062617</id><snippet>mimetypes.guess_type()</snippet></ROW><ROW><id>3062695</id><snippet>record</snippet></ROW><ROW><id>3062695</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; rec = logging.LogRecord('bob', 1, 'foo', 23, 'ciao', (), False)
</snippet></ROW><ROW><id>3062695</id><snippet>dir</snippet></ROW><ROW><id>3062695</id><snippet>&gt;&gt;&gt; dir(rec)
['__doc__', '__init__', '__module__', '__str__', 'args', 'created',
 'exc_info', 'exc_text', 'filename', 'funcName', 'getMessage', 'levelname',
 'levelno', 'lineno', 'module', 'msecs', 'msg', 'name', 'pathname', 'process',
 'processName', 'relativeCreated', 'thread', 'threadName']
&gt;&gt;&gt; rec.levelno
1
&gt;&gt;&gt; rec.levelname
'Level 1'
</snippet></ROW><ROW><id>3062695</id><snippet>rec.getMessage()</snippet></ROW><ROW><id>3062695</id><snippet>rec</snippet></ROW><ROW><id>3062839</id><snippet>interface</snippet></ROW><ROW><id>3062839</id><snippet> @i = 1;
</snippet></ROW><ROW><id>3062839</id><snippet>i</snippet></ROW><ROW><id>3062839</id><snippet>FixNum</snippet></ROW><ROW><id>3062839</id><snippet>interface</snippet></ROW><ROW><id>3062966</id><snippet>2**19937-1</snippet></ROW><ROW><id>3062966</id><snippet>2**19937</snippet></ROW><ROW><id>3062966</id><snippet>2**19937-1</snippet></ROW><ROW><id>3062966</id><snippet>2**19937-1</snippet></ROW><ROW><id>3062966</id><snippet>2081!</snippet></ROW><ROW><id>3062966</id><snippet>2**19937</snippet></ROW><ROW><id>3063104</id><snippet>simple_bind("cn=username,cn=Users,dc=domian, dc=net",'password$R')
</snippet></ROW><ROW><id>3063104</id><snippet>   simple_bind("domain/username",'password$R')
</snippet></ROW><ROW><id>3063296</id><snippet>ssh -R 10022:localhost:22 your_server_address
</snippet></ROW><ROW><id>3063296</id><snippet>ssh -p 10022 localhost
</snippet></ROW><ROW><id>3063296</id><snippet>while read line; do python python_script.py -l "$line"; scp -P 10022 *.pdf localhost:path/to/put/files/; rm *.pdf; done &lt; pdfURLs.txt
</snippet></ROW><ROW><id>3063296</id><snippet>while read line; do ssh -n server_address "cd tmp_download_directory &amp;&amp; rm -f *.pdf &amp;&amp; python python_script.py -l $line" &amp;&amp; scp server_address:tmp_download_directory/*.pdf /local/path/to/put/files/; done &lt; pdfURLs.txt; ssh server_address "rm -f tmp_download_directory/*.pdf"
</snippet></ROW><ROW><id>3063352</id><snippet>PYTHONPATH=fullPathOfMyEgg</snippet></ROW><ROW><id>3063352</id><snippet>import someModuleInMyEgg</snippet></ROW><ROW><id>3063492</id><snippet>-W ignore::DeprecationWarning</snippet></ROW><ROW><id>3063492</id><snippet>-W ignore</snippet></ROW><ROW><id>3063492</id><snippet>#!</snippet></ROW><ROW><id>3063492</id><snippet>#!/usr/bin/env python -W ignore::DeprecationWarning</snippet></ROW><ROW><id>3063562</id><snippet>from struct import *
# Two integers to a floating point
i1 = 0xC3F5
i2 = 0x4840
f = unpack('f',pack('&gt;HH',i1,i2))[0]

# Floating point to two integers
i1, i2 = unpack('&gt;HH',pack('f',3.14))
</snippet></ROW><ROW><id>3063698</id><snippet>source</snippet></ROW><ROW><id>3063698</id><snippet>os.execl</snippet></ROW><ROW><id>3063698</id><snippet>PATH</snippet></ROW><ROW><id>3063698</id><snippet>os.execlp</snippet></ROW><ROW><id>3063698</id><snippet>/bin/bash</snippet></ROW><ROW><id>3063698</id><snippet>source</snippet></ROW><ROW><id>3063698</id><snippet>os.execl("/bin/bash", "a.txt")
</snippet></ROW><ROW><id>3063833</id><snippet>mon(day)?|tue(sday)?|wed(nesday)?</snippet></ROW><ROW><id>3063833</id><snippet>?</snippet></ROW><ROW><id>3063833</id><snippet>(?:___)</snippet></ROW><ROW><id>3063833</id><snippet>mon(?:day)?|tue(?:sday)?|wed(?:nesday)?</snippet></ROW><ROW><id>3063833</id><snippet>(?:mon|fri|sun)(?:day)?</snippet></ROW><ROW><id>3063833</id><snippet>Matcher</snippet></ROW><ROW><id>3063833</id><snippet>monday|tuesday|....</snippet></ROW><ROW><id>3063833</id><snippet>import java.util.regex.*;
public class PartialMatch {
   public static void main(String[] args) {
      String[] tests = {
         "sunday", "sundae", "su", "mon", "mondayyyy", "frida"
      };
      Pattern p = Pattern.compile("(?:sun|mon|tues|wednes|thurs|fri|satur)day");
      for (String test : tests) {
         Matcher m = p.matcher(test);
         System.out.printf("%s = %s%n", test, 
            m.matches() ? "Exact match!" :
            m.hitEnd() ? "Partial match of " + test.length():
            "No match!"
         );
      }
   }
}
</snippet></ROW><ROW><id>3063833</id><snippet>sunday = Exact match!
sundae = No match!
su = Partial match of 2
mon = Partial match of 3
mondayyyy = No match!
frida = Partial match of 5
</snippet></ROW><ROW><id>3064143</id><snippet>&gt;&gt;&gt; f1 = 25.4
&gt;&gt;&gt; f2 = f1
&gt;&gt;&gt; 
&gt;&gt;&gt; for i in xrange(1, 11):
...     f2 /= 10.0          # to cm
...     f2 *= (1.0 / 2.54)  # to in
...     f2 *= 25.4          # back to mm
...     print 'after %2d loops there are %2d doubles between them' % (i, dulpdiff(f1, f2))
... 
after  1 loops there are  1 doubles between them
after  2 loops there are  2 doubles between them
after  3 loops there are  3 doubles between them
after  4 loops there are  4 doubles between them
after  5 loops there are  6 doubles between them
after  6 loops there are  7 doubles between them
after  7 loops there are  8 doubles between them
after  8 loops there are 10 doubles between them
after  9 loops there are 10 doubles between them
after 10 loops there are 10 doubles between them
</snippet></ROW><ROW><id>3064143</id><snippet>&gt;&gt;&gt; # 0 degrees Fahrenheit is -32 / 1.8 degrees Celsius
... f = -32 / 1.8
&gt;&gt;&gt; s = str(f)
&gt;&gt;&gt; s
'-17.7777777778'
&gt;&gt;&gt; # floats between them...
... fulpdiff(f, float(s))
0
&gt;&gt;&gt; # doubles between them...
... dulpdiff(f, float(s))
6255L
</snippet></ROW><ROW><id>3064143</id><snippet>import struct
from functools import partial

# (c) 2010 Eric L. Frederich
#
# Python implementation of algorithms detailed here...
# from http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm

def c_mem_cast(x, f=None, t=None):
    '''
    do a c-style memory cast

    In Python...

    x = 12.34
    y = c_mem_cast(x, 'd', 'l')

    ... should be equivilent to the following in c...

    double x = 12.34;
    long   y = *(long*)&amp;x;
    '''
    return struct.unpack(t, struct.pack(f, x))[0]

dbl_to_lng = partial(c_mem_cast, f='d', t='l')
lng_to_dbl = partial(c_mem_cast, f='l', t='d')
flt_to_int = partial(c_mem_cast, f='f', t='i')
int_to_flt = partial(c_mem_cast, f='i', t='f')

def ulp_diff_maker(converter, negative_zero):
    '''
    Getting the ulp difference of floats and doubles is similar.
    Only difference if the offset and converter.
    '''
    def the_diff(a, b):

        # Make a integer lexicographically ordered as a twos-complement int
        ai = converter(a)
        if ai &lt; 0:
            ai = negative_zero - ai

        # Make b integer lexicographically ordered as a twos-complement int
        bi = converter(b)
        if bi &lt; 0:
            bi = negative_zero - bi

        return abs(ai - bi)

    return the_diff

# double ULP difference
dulpdiff = ulp_diff_maker(dbl_to_lng, 0x8000000000000000)
# float  ULP difference
fulpdiff = ulp_diff_maker(flt_to_int, 0x80000000        )

# default to double ULP difference
ulpdiff = dulpdiff
ulpdiff.__doc__ = '''
Get the number of doubles between two doubles.
'''
</snippet></ROW><ROW><id>3064348</id><snippet>AtoB = {"A1":"B1", "A2":"B2"}
AtoB.get("A3", None)
=&gt; None
</snippet></ROW><ROW><id>3064351</id><snippet>tree=ET.parse(s)
</snippet></ROW><ROW><id>3064351</id><snippet>tree=ET.fromstring(s)
</snippet></ROW><ROW><id>3064351</id><snippet>import urllib
import xml.etree.ElementTree as ET
def getWeather(city):

    #create google weather api url
    url = "http://www.google.com/ig/api?weather=" + urllib.quote(city)

    try:
        # open google weather api url
        f = urllib.urlopen(url)
    except:
        # if there was an error opening the url, return
        return "Error opening url"

    # read contents to a string
    s = f.read()

    tree=ET.fromstring(s)

    current= tree.find("weather/current_conditions/condition")
    condition_data = current.get("data")  
    weather = condition_data  
    if weather == "&lt;?xml version=":
        return "Invalid city"

    #return the weather condition
    return weather

def main():
    while True:
        city = raw_input("Give me a city: ")
        weather = getWeather(city)
        print(weather)
</snippet></ROW><ROW><id>3064433</id><snippet>PYTHON_EGG_CACHE</snippet></ROW><ROW><id>3064433</id><snippet>easy_install</snippet></ROW><ROW><id>3064433</id><snippet>easy_install -Z</snippet></ROW><ROW><id>3064986</id><snippet>import csv
import pyodbc

MDB = 'c:/path/to/my.mdb'
DRV = '{Microsoft Access Driver (*.mdb)}'
PWD = 'mypassword'

conn = pyodbc.connect('DRIVER=%s;DBQ=%s;PWD=%s' % (DRV,MDB,PWD))
curs = conn.cursor()

SQL = 'SELECT * FROM mytable;' # insert your query here
curs.execute(SQL)

rows = curs.fetchall()

curs.close()
conn.close()

# you could change the 'w' to 'a' for subsequent queries
csv_writer = csv.writer(open('mytable.csv', 'w'), lineterminator='\n')

for row in rows:
    csv_writer.writerow(row)
</snippet></ROW><ROW><id>3065118</id><snippet>class QuestionForm(forms.Form):
    answer = forms.CharField()

def questions(request):
    if request.method == 'POST':
        form = QuestionForm(request.POST) 
        if form.is_valid():
            # Process the data in form.cleaned_data
            return HttpResponseRedirect('/done/')
    else:
        form = QuestionForm() # An unbound form

    return render_to_response('questions.html', {'form': form,})
</snippet></ROW><ROW><id>3065286</id><snippet>dajaxice_autodiscover</snippet></ROW><ROW><id>3065286</id><snippet>__init.py__</snippet></ROW><ROW><id>3065286</id><snippet>core</snippet></ROW><ROW><id>3065286</id><snippet>python manage.py shell</snippet></ROW><ROW><id>3065286</id><snippet>import dajaxice</snippet></ROW><ROW><id>3066158</id><snippet>l</snippet></ROW><ROW><id>3066158</id><snippet>first.py</snippet></ROW><ROW><id>3066158</id><snippet>second.py</snippet></ROW><ROW><id>3066158</id><snippet>$ cat first.py second.py 
#first.py
def demo():
    some_list = []
    for i in 'string':
         some_list.append( i )
    return list

#second.py 
from first import demo

some_list = demo()
print some_list 

$python second.py
['s', 't', 'r', 'i', 'n', 'g']
</snippet></ROW><ROW><id>3066158</id><snippet>from</snippet></ROW><ROW><id>3066158</id><snippet>import</snippet></ROW><ROW><id>3066158</id><snippet>demo</snippet></ROW><ROW><id>3066158</id><snippet>first</snippet></ROW><ROW><id>3066676</id><snippet>for key in (k for k in keys if not d[k]):
   ....
</snippet></ROW><ROW><id>3066718</id><snippet>proc.stdin.write('message')

# ...figure out how long or why you need to wait...

proc.stdin.write('message2')
</snippet></ROW><ROW><id>3066772</id><snippet>import urllib

def getWeather(city):
    ''' given city name or postal code,
        return dictionary with current weather conditions
    '''
    url = 'http://www.google.com/ig/api?weather='
    try:
        f = urllib.urlopen(url + urllib.quote(city))
    except:
        return "Error opening url"
    s = f.read().replace('\r','').replace('\n','')
    if '&lt;problem' in s:
        return "Problem retreaving weather (invalid city?)"

    weather = s.split('&lt;/current_conditions&gt;')[0]  \
               .split('&lt;current_conditions&gt;')[-1]  \
               .strip('&lt;/&gt;')                       
    wdict = dict(i.split(' data="') for i in weather.split('"/&gt;&lt;'))
    return wdict
</snippet></ROW><ROW><id>3066772</id><snippet>&gt;&gt;&gt; weather = getWeather('94043')
&gt;&gt;&gt; weather
{'temp_f': '67', 'temp_c': '19', 'humidity': 'Humidity: 61%', 'wind_condition': 'Wind: N at 21 mph', 'condition': 'Sunny', 'icon': '/ig/images/weather/sunny.gif'}
&gt;&gt;&gt; weather['humidity']
'Humidity: 61%'
&gt;&gt;&gt; print '%(condition)s\nTemperature %(temp_c)s C (%(temp_f)s F)\n%(humidity)s\n%(wind_condition)s' % weather
Sunny
Temperature 19 C (67 F)
Humidity: 61%
Wind: N at 21 mph
</snippet></ROW><ROW><id>3066772</id><snippet>str.split(sep)</snippet></ROW><ROW><id>3066772</id><snippet>'text1&lt;tag&gt;text2&lt;/tag&gt;text3'.split('&lt;/tag&gt;')</snippet></ROW><ROW><id>3066772</id><snippet>['text1&lt;tag&gt;text2', 'text3']</snippet></ROW><ROW><id>3066772</id><snippet>[0]</snippet></ROW><ROW><id>3066772</id><snippet>'text1&lt;tag&gt;text2'</snippet></ROW><ROW><id>3066821</id><snippet>In [86]: %timeit new_function2(close, volume, INTERVAL_LENGTH)
1 loops, best of 3: 1.15 s per loop
</snippet></ROW><ROW><id>3066821</id><snippet>In [61]: %timeit new_function(close, volume, INTERVAL_LENGTH)
1 loops, best of 3: 15.7 s per loop
</snippet></ROW><ROW><id>3066821</id><snippet>In [62]: %timeit old_function(close, volume, INTERVAL_LENGTH)
1 loops, best of 3: 53.1 s per loop
</snippet></ROW><ROW><id>3066821</id><snippet>import numpy as np

ARRAY_LENGTH = 500000
INTERVAL_LENGTH = 15
close = np.arange(ARRAY_LENGTH, dtype=np.float)
volume = np.arange(ARRAY_LENGTH, dtype=np.float)

def old_function(close, volume, INTERVAL_LENGTH):
    results = []
    for i in xrange(len(close) - INTERVAL_LENGTH):
        for j in xrange(i+1, i+INTERVAL_LENGTH):
            ret = close[j] / close[i]
            vol = sum( volume[i+1:j+1] )
            if (ret &gt; 1.0001) and (ret &lt; 1.5) and (vol &gt; 100):
                results.append( (i, j, ret, vol) )
    return results


def new_function(close, volume, INTERVAL_LENGTH):
    results = []
    for i in xrange(close.size - INTERVAL_LENGTH):
        vol = volume[i+1:i+INTERVAL_LENGTH].cumsum()
        ret = close[i+1:i+INTERVAL_LENGTH] / close[i]

        filter = (ret &gt; 1.0001) &amp; (ret &lt; 1.5) &amp; (vol &gt; 100)
        j = np.arange(i+1, i+INTERVAL_LENGTH)[filter]

        tmp_results = zip(j.size * [i], j, ret[filter], vol[filter])
        results.extend(tmp_results)
    return results

def new_function2(close, volume, INTERVAL_LENGTH):
    vol, ret = [], []
    I, J = [], []
    for k in xrange(1, INTERVAL_LENGTH):
        start = k
        end = volume.size - INTERVAL_LENGTH + k
        vol.append(volume[start:end])
        ret.append(close[start:end])
        J.append(np.arange(start, end))
        I.append(np.arange(volume.size - INTERVAL_LENGTH))

    vol = np.vstack(vol)
    ret = np.vstack(ret)
    J = np.vstack(J)
    I = np.vstack(I)

    vol = vol.cumsum(axis=0)
    ret = ret / close[:-INTERVAL_LENGTH]

    filter = (ret &gt; 1.0001) &amp; (ret &lt; 1.5) &amp; (vol &gt; 100)

    vol = vol[filter]
    ret = ret[filter]
    I = I[filter]
    J = J[filter]

    output = zip(I.flat,J.flat,ret.flat,vol.flat)
    return output

results = old_function(close, volume, INTERVAL_LENGTH)
results2 = new_function(close, volume, INTERVAL_LENGTH)
results3 = new_function(close, volume, INTERVAL_LENGTH)

# Using sets to compare, as the output 
# is in a different order than the original function
print set(results) == set(results2)
print set(results) == set(results3)
</snippet></ROW><ROW><id>3066960</id><snippet>#script2.py
from script1 import x
</snippet></ROW><ROW><id>3066960</id><snippet>$mkdir some_dir
$echo $PYTHONPATH
</snippet></ROW><ROW><id>3066960</id><snippet>x</snippet></ROW><ROW><id>3066960</id><snippet>$cat &gt;some_dir/module_a.py &lt;&lt;.
&gt; x = "hola"
&gt; .
</snippet></ROW><ROW><id>3066960</id><snippet>$cat &gt;module_b.py&lt;&lt;.
&gt; from module_a import x
&gt; print x
&gt; .
</snippet></ROW><ROW><id>3066960</id><snippet>$python module_b.py 
Traceback (most recent call last):
  File "module_b.py", line 1, in &lt;module&gt;
    from module_a import x
ImportError: No module named module_a
</snippet></ROW><ROW><id>3066960</id><snippet>$export PYTHONPATH=some_dir
$python module_b.py 
 hola
</snippet></ROW><ROW><id>3066987</id><snippet>appcfg.py download_data --application=app_id --url=http://etc --filename=file 
</snippet></ROW><ROW><id>3066989</id><snippet>list(set(arr))
</snippet></ROW><ROW><id>3067263</id><snippet>byip</snippet></ROW><ROW><id>3067263</id><snippet>byhash</snippet></ROW><ROW><id>3067263</id><snippet>myarray[hash] = myarray[ip]
assert not(myarray[hash] == myarray[ip])
</snippet></ROW><ROW><id>3067263</id><snippet>assert</snippet></ROW><ROW><id>3067263</id><snippet>myarray</snippet></ROW><ROW><id>3067531</id><snippet>from repoze.what.plugins.pylonshq import ControllerProtector

allow_only = All(not_anonymous(msg=l_(u'You must be logged on')),
                     my_custom_predicate(msg=l_(u'something wrong')))

@ControllerProtector(allow_only)
class MyController(BaseController):

    def index(self, **kw):
        return dict()
</snippet></ROW><ROW><id>3067672</id><snippet>class DisjointSet(object):

    def __init__(self):
        self.leader = {} # maps a member to the group's leader
        self.group = {} # maps a group leader to the group (which is a set)

    def add(self, a, b):
        leadera = self.leader.get(a)
        leaderb = self.leader.get(b)
        if leadera is not None:
            if leaderb is not None:
                if leadera == leaderb: return # nothing to do
                groupa = self.group[leadera]
                groupb = self.group[leaderb]
                if len(groupa) &lt; len(groupb):
                    a, leadera, groupa, b, leaderb, groupb = b, leaderb, groupb, a, leadera, groupa
                groupa |= groupb
                del self.group[leaderb]
                for k in groupb:
                    self.leader[k] = leadera
            else:
                self.group[leadera].add(b)
                self.leader[b] = leadera
        else:
            if leaderb is not None:
                self.group[leaderb].add(a)
                self.leader[a] = leaderb
            else:
                self.leader[a] = self.leader[b] = a
                self.group[a] = set([a, b])

data = """T1 T2
T3 T4
T5 T1
T3 T6
T7 T8
T3 T7
T9 TA
T1 T9"""
# data is chosen to demonstrate each of 5 paths in the code
from pprint import pprint as pp
ds = DisjointSet()
for line in data.splitlines():
    x, y = line.split()
    ds.add(x, y)
    print
    print x, y
    pp(ds.leader)
    pp(ds.group)
</snippet></ROW><ROW><id>3067672</id><snippet>T1 T9
{'T1': 'T1',
 'T2': 'T1',
 'T3': 'T3',
 'T4': 'T3',
 'T5': 'T1',
 'T6': 'T3',
 'T7': 'T3',
 'T8': 'T3',
 'T9': 'T1',
 'TA': 'T1'}
{'T1': set(['T1', 'T2', 'T5', 'T9', 'TA']),
 'T3': set(['T3', 'T4', 'T6', 'T7', 'T8'])}
</snippet></ROW><ROW><id>3067759</id><snippet>url.py</snippet></ROW><ROW><id>3067759</id><snippet>url(r'^page/(?P&lt;slug&gt;.*)/$','my_app.views.page_detail', name='page_url'),
</snippet></ROW><ROW><id>3067759</id><snippet>my_app/views.py</snippet></ROW><ROW><id>3067759</id><snippet>def page_detail (request, slug):
    return render_to_response('page/' + slug + '.html', {},
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>3067759</id><snippet>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
    "http://www.w3.org/TR/REC-html40/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;{{ flatpage.title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% load evaluate_tag %} 
{% evaluate flatpage.content %} 
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>3068028</id><snippet># Setting this to false will allow Jython to provide access to
# non-public fields, methods, and constructors of Java objects.
python.security.respectJavaAccessibility = false
</snippet></ROW><ROW><id>3068471</id><snippet>try:
    conn.excecute('...')
except IntegrityError:
    pass
</snippet></ROW><ROW><id>3068475</id><snippet>exec</snippet></ROW><ROW><id>3068475</id><snippet>ast</snippet></ROW><ROW><id>3070118</id><snippet>(in view: value = 1)
{{ value|stringformat:"04d" }} # displays as 0001
</snippet></ROW><ROW><id>3070270</id><snippet>object_dict = {x.id: x for x in object_list}
</snippet></ROW><ROW><id>3070270</id><snippet>object_dict = dict((x.id, x) for x in object_list)
</snippet></ROW><ROW><id>3070270</id><snippet>(x.id, x) for x in object_list</snippet></ROW><ROW><id>3070270</id><snippet>((x.id, x) for x in object_list)</snippet></ROW><ROW><id>3070270</id><snippet>id()</snippet></ROW><ROW><id>3070270</id><snippet>object_dict = {id(x): x for x in object_list}
</snippet></ROW><ROW><id>3070270</id><snippet>object_dict = dict((id(x), x) for x in object_list)
</snippet></ROW><ROW><id>3070421</id><snippet>logging.disable(logging.CRITICAL)
</snippet></ROW><ROW><id>3070624</id><snippet>&gt;&gt;&gt; def f(someit):
...   a, b, c = someit()
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (someit)
              3 CALL_FUNCTION            0
              6 UNPACK_SEQUENCE          3
              9 STORE_FAST               1 (a)
             12 STORE_FAST               2 (b)
             15 STORE_FAST               3 (c)
             18 LOAD_CONST               0 (None)
             21 RETURN_VALUE        
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3070624</id><snippet>UNPACK_SEQUENCE 3</snippet></ROW><ROW><id>3070624</id><snippet>someit</snippet></ROW><ROW><id>3070624</id><snippet>&gt;&gt;&gt; def g(someit):
...   a, b, c = limit(someit(), 3)
... 
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_GLOBAL              0 (limit)
              3 LOAD_FAST                0 (someit)
              6 CALL_FUNCTION            0
              9 LOAD_CONST               1 (3)
             12 CALL_FUNCTION            2
             15 UNPACK_SEQUENCE          3
             18 STORE_FAST               1 (a)
             21 STORE_FAST               2 (b)
             24 STORE_FAST               3 (c)
             27 LOAD_CONST               0 (None)
             30 RETURN_VALUE        
</snippet></ROW><ROW><id>3070624</id><snippet>limit</snippet></ROW><ROW><id>3070624</id><snippet>itertools.slice</snippet></ROW><ROW><id>3070624</id><snippet>limit</snippet></ROW><ROW><id>3070624</id><snippet>load-const; call function</snippet></ROW><ROW><id>3070689</id><snippet>__a</snippet></ROW><ROW><id>3070689</id><snippet>_&lt;classname&gt;__&lt;variablename&gt;</snippet></ROW><ROW><id>3070689</id><snippet>__&lt;variablename&gt;</snippet></ROW><ROW><id>3070689</id><snippet>__&lt;variablename&gt;</snippet></ROW><ROW><id>3070854</id><snippet>def yieldContext(l, func):
    l = [''] + l + ['']
    for i, s in enumerate(l):
        if func(s):
            yield ' '.join(l[i-1:i+2]).strip()
</snippet></ROW><ROW><id>3070854</id><snippet>&gt;&gt;&gt; print list(yieldContext(ex_paragraph, t1))
['The quick brown fox jumps over the fence. Where there is another red fox. They run off together.']

&gt;&gt;&gt; print list(yieldContext(ex_paragraph, t2))
['The quick brown fox jumps over the fence. Where there is another red fox.']
</snippet></ROW><ROW><id>3070854</id><snippet>def yieldContext(l, func):
    l = [''] + l + ['']
    return [' '.join(l[i-1:i+2]).strip() for i, s in enumerate(l) if func(s)]
</snippet></ROW><ROW><id>3071402</id><snippet>__file__</snippet></ROW><ROW><id>3071402</id><snippet>_log_config_file = 'logging.conf'
_log_config_location = resource_stream(__name__, _log_config_file)
logging.config.fileConfig(_log_config_location)
_log = logging.getLogger('package.module')
</snippet></ROW><ROW><id>3071441</id><snippet>In [13]: import scipy.stats as ss
In [19]: ss.rankdata([3, 1, 4, 15, 92])
Out[19]: array([ 2.,  1.,  3.,  4.,  5.])

In [20]: ss.rankdata([1, 2, 3, 3, 3, 4, 5])
Out[20]: array([ 1.,  2.,  4.,  4.,  4.,  6.,  7.])
</snippet></ROW><ROW><id>3071441</id><snippet>R</snippet></ROW><ROW><id>3071441</id><snippet>rank</snippet></ROW><ROW><id>3071441</id><snippet>scipy</snippet></ROW><ROW><id>3071441</id><snippet>def rank_simple(vector):
    return sorted(range(len(vector)), key=vector.__getitem__)

def rankdata(a):
    n = len(a)
    ivec=rank_simple(a)
    svec=[a[rank] for rank in ivec]
    sumranks = 0
    dupcount = 0
    newarray = [0]*n
    for i in xrange(n):
        sumranks += i
        dupcount += 1
        if i==n-1 or svec[i] != svec[i+1]:
            averank = sumranks / float(dupcount) + 1
            for j in xrange(i-dupcount+1,i+1):
                newarray[ivec[j]] = averank
            sumranks = 0
            dupcount = 0
    return newarray

print(rankdata([3, 1, 4, 15, 92]))
# [2.0, 1.0, 3.0, 4.0, 5.0]
print(rankdata([1, 2, 3, 3, 3, 4, 5]))
# [1.0, 2.0, 4.0, 4.0, 4.0, 6.0, 7.0]
</snippet></ROW><ROW><id>3071789</id><snippet>ctypes</snippet></ROW><ROW><id>3071789</id><snippet>from ctypes import *

your_dll = cdll.LoadLibrary("your_dll.dll")

PFloat = POINTER(c_float)
PInt   = POINTER(c_int)

p_data    = PFloat()
p_classes = PInt()
buff      = create_string_buffer(1024)
n1        = c_int( 0 )
n2        = c_int( 0 )

ret = your_dll.read_data( buff, byref(n1), byref(n2), byref(p_data), byref(p_classes) )

print('Data:    ', p_data.contents)
print('Classes: ', p_classes.contents)
</snippet></ROW><ROW><id>3071942</id><snippet>fc( int N, double* a, double* b, double* z )  # z = a + b
</snippet></ROW><ROW><id>3071942</id><snippet>python f-setup.py build_ext --inplace</snippet></ROW><ROW><id>3071942</id><snippet>f.pyx</snippet></ROW><ROW><id>3071942</id><snippet>fc.cpp</snippet></ROW><ROW><id>3071942</id><snippet>f.so</snippet></ROW><ROW><id>3071942</id><snippet>python test-f.py</snippet></ROW><ROW><id>3071942</id><snippet>import f</snippet></ROW><ROW><id>3071942</id><snippet>f.so</snippet></ROW><ROW><id>3071942</id><snippet>f.fpy( ... )</snippet></ROW><ROW><id>3071942</id><snippet>fc( ... )</snippet></ROW><ROW><id>3071942</id><snippet>python f-setup.py</snippet></ROW><ROW><id>3071942</id><snippet>distutils</snippet></ROW><ROW><id>3071942</id><snippet>cython f.pyx -&gt; f.cpp</snippet></ROW><ROW><id>3071942</id><snippet>f.cpp</snippet></ROW><ROW><id>3071942</id><snippet>fc.cpp</snippet></ROW><ROW><id>3071942</id><snippet>f.o fc.o</snippet></ROW><ROW><id>3071942</id><snippet>f.so</snippet></ROW><ROW><id>3071942</id><snippet>import f</snippet></ROW><ROW><id>3071942</id><snippet>distutils</snippet></ROW><ROW><id>3071942</id><snippet>f.so</snippet></ROW><ROW><id>3071942</id><snippet>make</snippet></ROW><ROW><id>3071942</id><snippet>setup.py</snippet></ROW><ROW><id>3071942</id><snippet>cython f.pyx</snippet></ROW><ROW><id>3071942</id><snippet>g++ -c ... f.cpp</snippet></ROW><ROW><id>3071942</id><snippet>f.pyx</snippet></ROW><ROW><id>3071942</id><snippet>f.cpp</snippet></ROW><ROW><id>3071942</id><snippet>rm -r build/</snippet></ROW><ROW><id>3071942</id><snippet>setup.py</snippet></ROW><ROW><id>3071942</id><snippet>cython --cplus f.pyx -&gt; f.cpp  # see cython -h</snippet></ROW><ROW><id>3071942</id><snippet>g++ -c ... f.cpp -&gt; f.o</snippet></ROW><ROW><id>3071942</id><snippet>g++ -c ... fc.cpp -&gt; fc.o</snippet></ROW><ROW><id>3071942</id><snippet>cc-lib f.o fc.o -&gt; dynamic library f.so</snippet></ROW><ROW><id>3071942</id><snippet>cc-lib-mac</snippet></ROW><ROW><id>3071942</id><snippet>cython-numpy-c-demo</snippet></ROW><ROW><id>3071942</id><snippet>sh cython-numpy-c-demo</snippet></ROW><ROW><id>3071942</id><snippet>#--------------------------------------------------------------------------------
cat &gt;f.pyx &lt;&lt;\!
# f.pyx: numpy arrays -&gt; extern from "fc.h"
# 3 steps:
# cython f.pyx  -&gt; f.c
# link: python f-setup.py build_ext --inplace  -&gt; f.so, a dynamic library
# py test-f.py: import f gets f.so, f.fpy below calls fc()

import numpy as np
cimport numpy as np

cdef extern from "fc.h": 
    int fc( int N, double* a, double* b, double* z )  # z = a + b

def fpy( N,
    np.ndarray[np.double_t,ndim=1] A,
    np.ndarray[np.double_t,ndim=1] B,
    np.ndarray[np.double_t,ndim=1] Z ):
    """ wrap np arrays to fc( a.data ... ) """
    assert N &lt;= len(A) == len(B) == len(Z)
    fcret = fc( N, &lt;double*&gt; A.data, &lt;double*&gt; B.data, &lt;double*&gt; Z.data )
        # fcret = fc( N, A.data, B.data, Z.data )  grr char*
    return fcret

!

#--------------------------------------------------------------------------------
cat &gt;fc.h &lt;&lt;\!
// fc.h: numpy arrays from cython , double*

int fc( int N, const double a[], const double b[], double z[] );
!

#--------------------------------------------------------------------------------
cat &gt;fc.cpp &lt;&lt;\!
// fc.cpp: z = a + b, numpy arrays from cython

#include "fc.h"
#include &lt;stdio.h&gt;

int fc( int N, const double a[], const double b[], double z[] )
{
    printf( "fc: N=%d a[0]=%f b[0]=%f \n", N, a[0], b[0] );
    for( int j = 0;  j &lt; N;  j ++ ){
        z[j] = a[j] + b[j];
    }
    return N;
}
!

#--------------------------------------------------------------------------------
cat &gt;f-setup.py &lt;&lt;\!
# python f-setup.py build_ext --inplace
#   cython f.pyx -&gt; f.cpp
#   g++ -c f.cpp -&gt; f.o
#   g++ -c fc.cpp -&gt; fc.o
#   link f.o fc.o -&gt; f.so

# distutils uses the Makefile distutils.sysconfig.get_makefile_filename()
# for compiling and linking: a sea of options.

# http://docs.python.org/distutils/introduction.html
# http://docs.python.org/distutils/apiref.html  20 pages ...
# http://stackoverflow.com/questions/tagged/distutils+python

import numpy
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext
# from Cython.Build import cythonize

ext_modules = [Extension(
    name="f",
    sources=["f.pyx", "fc.cpp"],
        # extra_objects=["fc.o"],  # if you compile fc.cpp separately
    include_dirs = [numpy.get_include()],  # .../site-packages/numpy/core/include
    language="c++",
        # libraries=
        # extra_compile_args = "...".split(),
        # extra_link_args = "...".split()
    )]

setup(
    name = 'f',
    cmdclass = {'build_ext': build_ext},
    ext_modules = ext_modules,
        # ext_modules = cythonize(ext_modules)  ? not in 0.14.1
    # version=
    # description=
    # author=
    # author_email=
    )

# test: import f
!

#--------------------------------------------------------------------------------
cat &gt;test-f.py &lt;&lt;\!
#!/usr/bin/env python
# test-f.py

import numpy as np
import f  # loads f.so from cc-lib: f.pyx -&gt; f.c + fc.o -&gt; f.so

N = 3
a = np.arange( N, dtype=np.float64 )
b = np.arange( N, dtype=np.float64 )
z = np.ones( N, dtype=np.float64 ) * np.NaN

fret = f.fpy( N, a, b, z )
print "fpy -&gt; fc z:", z

!

#--------------------------------------------------------------------------------
cat &gt;cc-lib-mac &lt;&lt;\!
#!/bin/sh
me=${0##*/}
case $1 in
"" )
    set --  f.cpp fc.cpp ;;  # default: g++ these
-h* | --h* )
    echo "
$me [g++ flags] xx.c yy.cpp zz.o ...
    compiles .c .cpp .o files to a dynamic lib xx.so
"
    exit 1
esac

# Logically this is simple, compile and link,
# but platform-dependent, layers upon layers, gloom, doom

base=${1%.c*}
base=${base%.o}
set -x

g++ -dynamic -arch ppc \
    -bundle -undefined dynamic_lookup \
    -fno-strict-aliasing -fPIC -fno-common -DNDEBUG `# -g` -fwrapv \
    -isysroot /Developer/SDKs/MacOSX10.4u.sdk \
    -I/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 \
    -I${Pysite?}/numpy/core/include \
    -O2 -Wall \
    "$@" \
    -o $base.so

# undefs: nm -gpv $base.so | egrep '^ *U _+[^P]'
!

# 23 Feb 2011 13:38
</snippet></ROW><ROW><id>3071947</id><snippet>params.getlist('foo')</snippet></ROW><ROW><id>3072261</id><snippet>upload_data --application=zjm1126 --config_file=upload/str_loader.py --filename=upload/a.csv --kind=College --url=http://localhost:8100/rem
</snippet></ROW><ROW><id>3072391</id><snippet>response.headers['P3P'] = 'CP="IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT"'
</snippet></ROW><ROW><id>3072691</id><snippet>__path__</snippet></ROW><ROW><id>3073049</id><snippet>class TestMyClass(unittest.TestCase):
    def test_should_raise(self):
        x = myClass()
        def assign_bad_name():
            x.name = "7"
        self.assertRaises(ValueError, assign_bad_name)
</snippet></ROW><ROW><id>3073183</id><snippet>import xml.etree.ElementTree as xml
</snippet></ROW><ROW><id>3073183</id><snippet>user@Comp test$ cat test.py 
import xml.etree.ElementTree as xml

root = xml.Element('root')
child = xml.Element('child')
root.append(child)
child.attrib['name'] = "Charlie"
file = open("test.xml", 'w')
xml.ElementTree(root).write(file)
file.close()

user@Comp test$ /usr/bin/python2.5 --version
Python 2.5.4
user@Comp test$ /usr/bin/python2.5 test.py 
user@Comp test$ cat test.xml 
&lt;root&gt;&lt;child name="Charlie" /&gt;&lt;/root&gt;user@Comp test$ 
</snippet></ROW><ROW><id>3073327</id><snippet>class Bar:
    pass

class MyUnpickler(pickle.Unpickler):
    def find_class(self, module, name):
        if module == "foo" and name == "Bar":
            return Bar
        else:
            return pickle.Unpickler.find_class(self, module, name)

bars = MyUnpickler(open("objects.pkl")).load()
</snippet></ROW><ROW><id>3073327</id><snippet>baz</snippet></ROW><ROW><id>3073327</id><snippet>baz.Bar</snippet></ROW><ROW><id>3073327</id><snippet>foo.Bar</snippet></ROW><ROW><id>3073327</id><snippet>foo.Bar</snippet></ROW><ROW><id>3073327</id><snippet>baz.Bar</snippet></ROW><ROW><id>3073327</id><snippet>isinstance</snippet></ROW><ROW><id>3073327</id><snippet>type</snippet></ROW><ROW><id>3073327</id><snippet>Bar</snippet></ROW><ROW><id>3073327</id><snippet>foo</snippet></ROW><ROW><id>3073368</id><snippet>__init__.py</snippet></ROW><ROW><id>3073368</id><snippet>nosetests</snippet></ROW><ROW><id>3073368</id><snippet>import</snippet></ROW><ROW><id>3073368</id><snippet>import dir.foo</snippet></ROW><ROW><id>3073368</id><snippet>dir</snippet></ROW><ROW><id>3073732</id><snippet>foo()</snippet></ROW><ROW><id>3073732</id><snippet>bar()</snippet></ROW><ROW><id>3073732</id><snippet>foo()</snippet></ROW><ROW><id>3073732</id><snippet>bar()</snippet></ROW><ROW><id>3073732</id><snippet>bar()</snippet></ROW><ROW><id>3073732</id><snippet>bar()</snippet></ROW><ROW><id>3073988</id><snippet>from BeautifulSoup import BeautifulSoup
tree = BeautifulSoup(bad_html)
good_html = tree.prettify()
</snippet></ROW><ROW><id>3074227</id><snippet>class CollegeExporter(bulkloader.Exporter):
    def __init__(self):
        bulkloader.Exporter.__init__(self, 'College',
                                   [
                                    ('cid', str, None),
                                    ('name', lambda x: unicode(x, 'utf8'), None),
                                   ])
exporters = [CollegeExporter]
</snippet></ROW><ROW><id>3074227</id><snippet>appcfg.py update zjm1126</snippet></ROW><ROW><id>3074227</id><snippet>appcfg.py download_data --config_file=upload/str_loader.py --application=zjm1126 --kind=College  --url=http://localhost:8100/remote_api --filename=b.csv
</snippet></ROW><ROW><id>3074270</id><snippet>reply = "text to be sent ...."
texts = []

count = 0
current_text = []
for word in reply.split():
   if count + len(word) &lt; (160 if len(texts) % 2 == 0 else (160-17)):
      current_text.append(word)
      count += (len(word) + 1)
   else:
      count = 0
      if len(texts) % 2 != 0):
         #odd-numbered text gets additional message...
         texts.append(" ".join(current_text) + "\nreply m for more")
      else:
         texts.append(" ".join(current_text))
   current_text = []
</snippet></ROW><ROW><id>3074404</id><snippet>__eq__</snippet></ROW><ROW><id>3074404</id><snippet>__ne__</snippet></ROW><ROW><id>3074404</id><snippet>class UserAccount(db.Model):

    def __eq__(self, other):
        if isinstance(other, UserAccount):
            return self.user_id == other.user_id
        return NotImplemented

    def __ne__(self, other):
        result = self.__eq__(other)
        if result is NotImplemented:
            return result
        return not result
</snippet></ROW><ROW><id>3074642</id><snippet>def test_function():
    print "Test Function -- Mod 1"
</snippet></ROW><ROW><id>3074642</id><snippet>def test_function():
    print "Test Function -- Mod 2"
</snippet></ROW><ROW><id>3074642</id><snippet>#!/usr/bin/python

import sys

import Mod_1

Mod_1.test_function()

del sys.modules['Mod_1']

sys.modules['Mod_1'] = __import__('Mod_2')

import Mod_1

Mod_1.test_function()
</snippet></ROW><ROW><id>3074747</id><snippet>def f():
    print 1
    yield
    print 2

f=contextlib.contextmanager(f)
with f():
    print 3
</snippet></ROW><ROW><id>3074747</id><snippet>@contextlib.contextmanager
def f():
    print 1
    yield
    print 2
with f:
    print 3
</snippet></ROW><ROW><id>3074747</id><snippet>    with f:
AttributeError: 'function' object has no attribute '__exit__'
</snippet></ROW><ROW><id>3074759</id><snippet>nick = data.split('!')[ 0 ].replace(':',' ') 
</snippet></ROW><ROW><id>3074759</id><snippet>:</snippet></ROW><ROW><id>3074759</id><snippet/></ROW><ROW><id>3074759</id><snippet>"s0urd "</snippet></ROW><ROW><id>3074759</id><snippet>"s0urd"</snippet></ROW><ROW><id>3074759</id><snippet>nick = data.split('!')[ 0 ].replace(':','')
</snippet></ROW><ROW><id>3074759</id><snippet>''</snippet></ROW><ROW><id>3075080</id><snippet>&gt;&gt;&gt; r = DataResult()
&gt;&gt;&gt; r.add_poi(-34.96615974838191, 149.89967626953126)
&gt;&gt;&gt; r.add_locale(-34.72271328279892, 150.46547216796876)
&gt;&gt;&gt;r.add_poi(-34.67303411621243, 149.96559423828126)

&gt;&gt;&gt; print r
{"data": [{"type": "locale", "lat": -34.43778387240597, "lon": 150.04799169921876},
{"type": "poi", "lat": -34.96615974838191, "lon": 149.89967626953126},
{"type": "locale", "lat": -34.72271328279892, "lon": 150.46547216796876},
{"type": "poi", "lat": -34.67303411621243, "lon": 149.96559423828126}]}
</snippet></ROW><ROW><id>3075080</id><snippet>DataResult</snippet></ROW><ROW><id>3075080</id><snippet>__str__</snippet></ROW><ROW><id>3075080</id><snippet>__unicode__</snippet></ROW><ROW><id>3075080</id><snippet>add_poi</snippet></ROW><ROW><id>3075080</id><snippet>def add_poi(self, lat, lon):
    self.append(PoiData(lat, lon))
</snippet></ROW><ROW><id>3075080</id><snippet>PoiData</snippet></ROW><ROW><id>3075100</id><snippet>-PPIDFILE, --pidfile=PIDFILE</snippet></ROW><ROW><id>3075271</id><snippet>if logger.isEnabledFor(logging.DEBUG):
    logger.debug("Message with %s, %s", expensive_func1(),
                                        expensive_func2())
</snippet></ROW><ROW><id>3075329</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>3075329</id><snippet>bin</snippet></ROW><ROW><id>3075329</id><snippet>$PATH</snippet></ROW><ROW><id>3075329</id><snippet>/usr/bin</snippet></ROW><ROW><id>3075329</id><snippet>do shell script</snippet></ROW><ROW><id>3075329</id><snippet>python</snippet></ROW><ROW><id>3075329</id><snippet>do shell script</snippet></ROW><ROW><id>3075329</id><snippet>sh</snippet></ROW><ROW><id>3075329</id><snippet>bash</snippet></ROW><ROW><id>3075329</id><snippet>do shell script ". ${HOME}/.bash_profile; python -c 'import sys; print(sys.version)'"
</snippet></ROW><ROW><id>3075386</id><snippet>store.url = request.POST.get('url',""),
store.data = request.POST['data'],
</snippet></ROW><ROW><id>3075389</id><snippet>if expression: action()
code_continues()
</snippet></ROW><ROW><id>3075389</id><snippet>if expression: action()

code_continues()
</snippet></ROW><ROW><id>3075389</id><snippet>if</snippet></ROW><ROW><id>3075568</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2
import re

html_page = urllib2.urlopen("http://www.yourwebsite.com")
soup = BeautifulSoup(html_page)
for link in soup.findAll('a'):
    print link.get('href')
</snippet></ROW><ROW><id>3075568</id><snippet>http://</snippet></ROW><ROW><id>3075568</id><snippet>soup.findAll('a', attrs={'href': re.compile("^http://")})
</snippet></ROW><ROW><id>3075668</id><snippet>os.walk</snippet></ROW><ROW><id>3075668</id><snippet>import os

def lowercase_rename( dir ):
    # renames all subforders of dir, not including dir itself
    def rename_all( root, items):
        for name in items:
            try:
                os.rename( os.path.join(root, name), 
                                    os.path.join(root, name.lower()))
            except OSError:
                pass # can't rename it, so what

    # starts from the bottom so paths further up remain valid after renaming
    for root, dirs, files in os.walk( dir, topdown=False ):
        rename_all( root, dirs )
        rename_all( root, files)
</snippet></ROW><ROW><id>3075668</id><snippet>os.walk</snippet></ROW><ROW><id>3076102</id><snippet>#!/usr/bin/env python2.6
import time
import multiprocessing

class Model:
    name = ""
    def __init__(self,name):
        self.name = name

def run_experiment(id, model):
    print "Experiment %d is starting" % id
    for _ in range(0,60):
        print "Hey %s from experiment %d" % (model.name, id)
        time.sleep(1)
    print "Experiment %d is done" % id
    return "Result for %d" % id


if __name__ == "__main__":
    model = Model("statictistical model")
    experiments = ((i, model) for i in range(0, 5))
    pool = multiprocessing.Pool(3)

    results = [pool.apply_async(run_experiment, experiment) for experiment in experiments]
    for result in results:
        r = result.get()
        # do something with r
        # or nothing, i suppose...
</snippet></ROW><ROW><id>3076102</id><snippet>multiprocessing</snippet></ROW><ROW><id>3076102</id><snippet>__main__</snippet></ROW><ROW><id>3076102</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>3076117</id><snippet>application/octect-stream</snippet></ROW><ROW><id>3076117</id><snippet>- url: /download
  static_dir: static/download
  mime_type : application/octect-stream
</snippet></ROW><ROW><id>3076281</id><snippet>def vector_intersection(v1,v2,d1,d2):
    '''
    v1 and v2 - Vector points
    d1 and d2 - Direction vectors
    returns the intersection point for the two vector line equations.
    '''
    if d1[0] == 0 and d2[0] != 0 or d1[1] == 0 and d2[1] != 0:
        if d1[0] == 0 and d2[0] != 0:
            mu = float(v1[0] - v2[0])/d2[0]
        elif d1[1] == 0 and d2[1] != 0:
            mu = float(v1[1] - v2[1])/d2[1]
        return (v2[0] + mu* d2[0],v2[1] + mu * d2[1])
    else:
        if d1[0] != 0 and d1[1] != 0 and d2[0] != 0 and d2[1] != 0:
            if d1[1]*d2[0] - d1[0]*d2[1] == 0:
                raise ValueError('Direction vectors are invalid. (Parallel)')
            lmbda = float(v1[0]*d2[1] - v1[1]*d2[0] - v2[0]*d2[1] + v2[1]*d2[0])/(d1[1]*d2[0] - d1[0]*d2[1])
        elif d2[0] == 0 and d1[0] != 0:
            lmbda = float(v2[0] - v1[0])/d1[0]
        elif d2[1] == 0 and d1[1] != 0:
            lmbda = float(v2[1] - v1[1])/d1[1]
        else:
            raise ValueError('Direction vectors are invalid.')
        return (v1[0] + lmbda* d1[0],v1[1] + lmbda * d1[1])
</snippet></ROW><ROW><id>3076304</id><snippet>urllib2</snippet></ROW><ROW><id>3076304</id><snippet>&gt;&gt;&gt; data = urllib2.urlopen('http://www.example.com').read()
&gt;&gt;&gt; print data
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;META http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;TITLE&gt;Example Web Page&lt;/TITLE&gt;
&lt;/HEAD&gt; 
&lt;body&gt;  
&lt;p&gt;You have reached this web page by typing "example.com",
"example.net",
  or "example.org" into your web browser.&lt;/p&gt;
&lt;p&gt;These domain names are reserved for use in documentation and are not available 
  for registration. See &lt;a href="http://www.rfc-editor.org/rfc/rfc2606.txt"&gt;RFC 
  2606&lt;/a&gt;, Section 3.&lt;/p&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

&gt;&gt;&gt;
</snippet></ROW><ROW><id>3076304</id><snippet>content-type</snippet></ROW><ROW><id>3076304</id><snippet>&gt;&gt;&gt; stream = urllib2.urlopen('http://www.example.com')
&gt;&gt;&gt; stream.headers['content-type']
'text/html; charset=UTF-8'
&gt;&gt;&gt; data = stream.read()
&gt;&gt;&gt; print data[:100]
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;META http-equiv=
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3076407</id><snippet>acquire</snippet></ROW><ROW><id>3076407</id><snippet>release</snippet></ROW><ROW><id>3076563</id><snippet>def factory(description):
    if   description == "It's flat":  return Line(description)
    elif description == "It's spiky": return Triangle(description)
    elif description == "It's big":   return Rectangle(description)
</snippet></ROW><ROW><id>3076563</id><snippet>def factory(description):
    class = {"It's flat":Line("It's flat"), "It's spiky":Triangle("It's spiky"), "It's big":Rectangle("It's big")}
    return class[description]
</snippet></ROW><ROW><id>3076563</id><snippet>class Line(Shape):
    def __init__(self, description):
        self.desc = description
    def number_of_edges(self, parameters):
        return 1
</snippet></ROW><ROW><id>3076682</id><snippet>db = server['test']
for doc in db:
    print doc
    for key in db[doc].keys():
        print key
</snippet></ROW><ROW><id>3076705</id><snippet>$ python -mtimeit -s 'import math;xs=range(10)' 'sum(map(math.sqrt, xs))'
100000 loops, best of 3: 2.96 usec per loop
$ python -mtimeit -s 'import math;xs=range(10)' 'sum([math.sqrt(x) for x in xs)]'
100000 loops, best of 3: 3.75 usec per loop
$ python -mtimeit -s 'import math;xs=range(10)' 'sum(math.sqrt(x) for x in xs)'
100000 loops, best of 3: 3.71 usec per loop
</snippet></ROW><ROW><id>3076705</id><snippet>$ python -mtimeit -s'xs=range(10)' 'sum(map(lambda x: x+2, xs))'
100000 loops, best of 3: 2.98 usec per loop
$ python -mtimeit -s'xs=range(10)' 'sum([x+2 for x in xs])'
100000 loops, best of 3: 1.66 usec per loop
$ python -mtimeit -s'xs=range(10)' 'sum(x+2 for x in xs)'
100000 loops, best of 3: 1.48 usec per loop
</snippet></ROW><ROW><id>3076705</id><snippet>$ python -mtimeit -s'xs=range(10)' 'list(map(lambda x: x+2, xs))'
100000 loops, best of 3: 3.19 usec per loop
$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 1.21 usec per loop
$ python -mtimeit -s'xs=range(10)' 'list(x+2 for x in xs)'
100000 loops, best of 3: 3.36 usec per loop
</snippet></ROW><ROW><id>3076705</id><snippet>map</snippet></ROW><ROW><id>3076705</id><snippet>map</snippet></ROW><ROW><id>3076819</id><snippet>ctypes.wstring_at()</snippet></ROW><ROW><id>3076819</id><snippet>ctypes.addressof()</snippet></ROW><ROW><id>3076819</id><snippet>def wszarray_to_list(array):
    offset = 0
    while offset &lt; ctypes.sizeof(array):
        sz = ctypes.wstring_at(ctypes.addressof(array) + offset*2)
        if sz:
            yield sz
            offset += len(sz)+1
        else:
            break
</snippet></ROW><ROW><id>3076863</id><snippet>&gt;&gt;&gt; import tempfile
&gt;&gt;&gt; f = tempfile.NamedTemporaryFile(mode='w+t', delete=False)
&gt;&gt;&gt; n = f.name
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(['nano', n])
</snippet></ROW><ROW><id>3076863</id><snippet>0
&gt;&gt;&gt; with open(n) as f: print f.read()
... 
Hello world!


&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3076883</id><snippet>foo</snippet></ROW><ROW><id>3076883</id><snippet>bar</snippet></ROW><ROW><id>3076883</id><snippet>__repr__</snippet></ROW><ROW><id>3076883</id><snippet>__eq__</snippet></ROW><ROW><id>3076883</id><snippet>__cmp__</snippet></ROW><ROW><id>3076883</id><snippet>__eq__</snippet></ROW><ROW><id>3076883</id><snippet>__eq__</snippet></ROW><ROW><id>3076883</id><snippet>__cmp__</snippet></ROW><ROW><id>3076883</id><snippet>__hash__</snippet></ROW><ROW><id>3076987</id><snippet>.courses</snippet></ROW><ROW><id>3076987</id><snippet>.courses</snippet></ROW><ROW><id>3076987</id><snippet>.forwardLinks</snippet></ROW><ROW><id>3076987</id><snippet>def __eq__(self, other):
    if not isinstance(other, DependencyArcTail):
        return False

    return (set(self.courses) == set(other.courses) and
            set(self.forwardLinks) == set(other.forwardLinks))

def __hash__(self):
    return hash((frozenset(self.courses), frozenset(self.forwardLinks)))
</snippet></ROW><ROW><id>3076987</id><snippet>__eq__</snippet></ROW><ROW><id>3076987</id><snippet>__hash__</snippet></ROW><ROW><id>3076987</id><snippet>__hash__</snippet></ROW><ROW><id>3076987</id><snippet>tuple</snippet></ROW><ROW><id>3076987</id><snippet>set</snippet></ROW><ROW><id>3076987</id><snippet>frozenset</snippet></ROW><ROW><id>3076998</id><snippet>"foo" "bar"</snippet></ROW><ROW><id>3076998</id><snippet>"foobar"</snippet></ROW><ROW><id>3076998</id><snippet>parser.add_option("--my-option", dest="my_option", nargs=2, default=None, 
          help="Here is a long description of my option.  It does many things "
          "but I want the shell to decide how to display this explanation. However, "
          "I want newlines in this string.") 
</snippet></ROW><ROW><id>3077047</id><snippet>getiterator</snippet></ROW><ROW><id>3077047</id><snippet>ElementTree</snippet></ROW><ROW><id>3077047</id><snippet>iter</snippet></ROW><ROW><id>3077047</id><snippet>lxml</snippet></ROW><ROW><id>3077047</id><snippet>ElementTree</snippet></ROW><ROW><id>3077126</id><snippet>from xml.dom import minidom

xmldoc = minidom.parse("so.xml")

values = {}

for stat in xmldoc.getElementsByTagName("hostvalue"):
    attr = stat.attributes["name"].value
    value = "\n".join([x.data for x in stat.childNodes])
    values[attr] = value

print repr(values)
</snippet></ROW><ROW><id>3077126</id><snippet>$ ./parse.py 
{u'num_proc': u'1', u'arch_string': u'lx24-x86', u'load_avg': u'0.01'}
</snippet></ROW><ROW><id>3077126</id><snippet>&lt;hostvalue&gt;</snippet></ROW><ROW><id>3077173</id><snippet>dict((k, v) for (k, v) in somedict.iteritems() if not k.startswith('someprefix'))
</snippet></ROW><ROW><id>3077234</id><snippet>from mercurial.i18n import _
</snippet></ROW><ROW><id>3077234</id><snippet>_</snippet></ROW><ROW><id>3077296</id><snippet>from django.template import Context, Template

template = Template("this is a template string! {{ foo }}")
c = Context({"foo": "barbarbar"})
print template.render(c)
</snippet></ROW><ROW><id>3077307</id><snippet>addWidget</snippet></ROW><ROW><id>3077307</id><snippet>children()</snippet></ROW><ROW><id>3077307</id><snippet>count()</snippet></ROW><ROW><id>3077307</id><snippet>itemAt( int )</snippet></ROW><ROW><id>3077307</id><snippet>QLayoutItem</snippet></ROW><ROW><id>3077307</id><snippet>removeItem( QLayoutItem* )</snippet></ROW><ROW><id>3077307</id><snippet>addWidget</snippet></ROW><ROW><id>3077307</id><snippet>QObject</snippet></ROW><ROW><id>3077307</id><snippet>children()</snippet></ROW><ROW><id>3077307</id><snippet>QObject</snippet></ROW><ROW><id>3077307</id><snippet>count</snippet></ROW><ROW><id>3077307</id><snippet>itemAt</snippet></ROW><ROW><id>3077588</id><snippet>gtk.EventBox</snippet></ROW><ROW><id>3077588</id><snippet>gtk.EventBox</snippet></ROW><ROW><id>3077588</id><snippet>import gtk

class MainWindow():
    def __init__(self):
        self.window = gtk.Window()
        self.box = gtk.EventBox ()
        self.window.add (self.box)
        self.box.add (gtk.Label ('some text'))
        self.window.show_all()

        import sys
        self.box.connect ('button-press-event',
                          lambda widget, event:
                              sys.stdout.write ('%s // %s\n' % (widget, event)))

if __name__ == "__main__":
    main = MainWindow()
    gtk.main()
</snippet></ROW><ROW><id>3077588</id><snippet>gtk.Button</snippet></ROW><ROW><id>3077811</id><snippet>path = u'G:\path'
for infile in glob.glob( os.path.join(path, u'*') ):
    print( u"current file is: ", infile)
</snippet></ROW><ROW><id>3077860</id><snippet>/usr/local</snippet></ROW><ROW><id>3077860</id><snippet>mysql_config.path = "mysql_config"</snippet></ROW><ROW><id>3077860</id><snippet>mysql_config.path = "/usr/local/mysql-5.1.48-osx10.6-x86/bin/mysql_config"</snippet></ROW><ROW><id>3077860</id><snippet>python setup.py build</snippet></ROW><ROW><id>3077860</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>3077928</id><snippet>def repeat(string, length):
  L = len(string)
  return string * (length // L) + string[:length % L]
</snippet></ROW><ROW><id>3077928</id><snippet>string</snippet></ROW><ROW><id>3077928</id><snippet>length</snippet></ROW><ROW><id>3077928</id><snippet>'Hello World'</snippet></ROW><ROW><id>3077928</id><snippet>61</snippet></ROW><ROW><id>3077928</id><snippet>'Hello World'*100</snippet></ROW><ROW><id>3077928</id><snippet>61*123</snippet></ROW><ROW><id>3077928</id><snippet>length</snippet></ROW><ROW><id>3077928</id><snippet>//</snippet></ROW><ROW><id>3077929</id><snippet>get_absolute_url()</snippet></ROW><ROW><id>3078068</id><snippet>a = XMLChild(list3, 2)
b = XMLParent(list2, 1, a)
XMLParent(list1, 0, b)
</snippet></ROW><ROW><id>3078068</id><snippet>a = XMLChild(list3, 2)
b = XMLParent(list2, 1, a)
print XMLParent(list1, 0, b)
</snippet></ROW><ROW><id>3078371</id><snippet>nginx</snippet></ROW><ROW><id>3078371</id><snippet>memcached</snippet></ROW><ROW><id>3078556</id><snippet>insert</snippet></ROW><ROW><id>3078556</id><snippet>find_place</snippet></ROW><ROW><id>3078556</id><snippet>_do_insert</snippet></ROW><ROW><id>3078556</id><snippet>Node</snippet></ROW><ROW><id>3078556</id><snippet>def insert(self,t):
    '''inserts a new element into the tree'''
    if self.root is None:
        self.root = Node(t)
    else:
        self._do_insert(self.root,t)

def _do_insert(self,parent,t):
    if t &gt; parent.key:
        if parent.left is None:
            parent.left = Node(t)
        else:
            self._do_insert(parent.left,t)
    elif t &lt; parent.key:
        if parent.right is None:
            parent.right = Node(t)
        else:
            self._do_insert(parent.right,t)
    else:
        # raise a KeyError or something appropriate?
        pass
</snippet></ROW><ROW><id>3078865</id><snippet>self.request.files</snippet></ROW><ROW><id>3078865</id><snippet>self.get_argument()</snippet></ROW><ROW><id>3079120</id><snippet>import os
files = os.listdir('.')
natsort(files)
index = 0
for filename in files:
    os.rename(filename, str(index).zfill(7)+'.png')
    index += 1
</snippet></ROW><ROW><id>3079179</id><snippet>def get_unread_msgs(user, passwd):
    auth = URL.HTTPBasicAuthHandler()
    auth.add_password(
            realm='New mail feed',
            uri='https://mail.google.com',
            user='%s'%user,
            passwd=passwd
            )
    opener = URL.build_opener(auth)
    URL.install_opener(opener)
    try:
        feed= URL.urlopen('https://mail.google.com/mail/feed/atom')
        return feed.read()
    except HTTPError, e:
        if e.code == 401:
            print "authorization failed"            
        else:
            raise e # or do something else
    except: #A general except clause is discouraged, I let it in because you had it already
        return None
</snippet></ROW><ROW><id>3079320</id><snippet>try</snippet></ROW><ROW><id>3079320</id><snippet>except</snippet></ROW><ROW><id>3079320</id><snippet>else</snippet></ROW><ROW><id>3079320</id><snippet>while True:</snippet></ROW><ROW><id>3079320</id><snippet>else</snippet></ROW><ROW><id>3079320</id><snippet>break</snippet></ROW><ROW><id>3079320</id><snippet>except</snippet></ROW><ROW><id>3079320</id><snippet>continue</snippet></ROW><ROW><id>3079320</id><snippet>#!/usr/bin/python -i
# -*- coding: utf-8 -*-

import xmlrpclib, socket
from sys import exit

# Create an object to represent our server.

#server = xmlrpclib.Server(server_url) and print 'Xmlrpclib.Server object `__main__.server\' of URL `', server_url, "' created"
server_url = str(raw_input("Server: "))
server = xmlrpclib.ServerProxy(server_url)
while True:
    try:
        server.system.listMethods()
    except xmlrpclib.ProtocolError, socket.error:
        print 'Unable to connect to server. Please try again'
        server_url = str(raw_input("Server: "))
        server = xmlrpclib.ServerProxy(server_url)
        continue
    except EOFError:
        exit(1)
    else:
        break

print 'Xmlrpclib.Server object `__main__.server\' of URL `', server_url, "' created"

# Python interpreter starts...
</snippet></ROW><ROW><id>3079393</id><snippet>class A(object):
    def __setattr__(self, name, value):
        allowed = ('x',)
        if name in allowed:
            self.__dict__[name]  = value
        else:
            raise AttributeError('No attribute: %s' % name) 
</snippet></ROW><ROW><id>3079393</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.x = 5
&gt;&gt;&gt; a.other = 5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "myc.py", line 7, in __setattr__
    raise AttributeError('No attribute: %s' % name)
AttributeError: No attribute: other   
</snippet></ROW><ROW><id>3079433</id><snippet>[buildout]
parts = pysql

[pysql]
recipe = zc.recipe.egg:custom
egg = PySQLite
undef=SQLITE_OMIT_LOAD_EXTENSION
</snippet></ROW><ROW><id>3079477</id><snippet>sound/
  __init__.py
  effects/
          __init__.py
          common.py
          echo.py
          surround.py
          reverse.py
</snippet></ROW><ROW><id>3079477</id><snippet>__init__.py</snippet></ROW><ROW><id>3079477</id><snippet>common.py</snippet></ROW><ROW><id>3079477</id><snippet>effectList = []
import echo
import surround   # Could write code to import *.py instead
...
</snippet></ROW><ROW><id>3079477</id><snippet>__init__.py</snippet></ROW><ROW><id>3079477</id><snippet>from common import *
</snippet></ROW><ROW><id>3079477</id><snippet>echo.py</snippet></ROW><ROW><id>3079477</id><snippet>import common
common.effectList.append({'name': 'echo'})
</snippet></ROW><ROW><id>3079477</id><snippet>import sound.effect

for effect_name,effect in sound.effect.effectlist.items():
    #....
</snippet></ROW><ROW><id>3079554</id><snippet>x()
</snippet></ROW><ROW><id>3079554</id><snippet>None</snippet></ROW><ROW><id>3079554</id><snippet>self.y</snippet></ROW><ROW><id>3079554</id><snippet>self.y</snippet></ROW><ROW><id>3079554</id><snippet>None</snippet></ROW><ROW><id>3079554</id><snippet>argument</snippet></ROW><ROW><id>3079554</id><snippet>self.y</snippet></ROW><ROW><id>3079554</id><snippet>self.y</snippet></ROW><ROW><id>3079573</id><snippet>    empty = wx.EmptyBitmap(parent.imageWidth,12+parent.imageHeight)
    dc = wx.MemoryDC()
    dc.SelectObject(empty)
    dc.SetTextForeground(parent.colorFont)
    dc.SetPen(wx.Pen('WHITE', 1))
    dc.DrawLine(0, 3, parent.imageWidth, 3)
    dc.DrawLine(0, 6, parent.imageWidth, 6)
    dc.DrawLine(0, 9, parent.imageWidth, 9)
    dc.DrawBitmap(imageSmall[len(imageSmall)-1], 0, 12, True)
    dc.SelectObject(wx.NullBitmap)

    wx.StaticBitmap.__init__(self, parent, id, bitmap=empty, pos=(position[0], position[1]), size=(parent.imageWidth, parent.imageHeight))
</snippet></ROW><ROW><id>3079975</id><snippet>try:
    import Fibo
except ImportError:
    import sys
    from os.path import join, abspath, dirname
    parentpath = abspath(join(dirname(__file__), '..'))
    srcpath = join(parentpath, 'src')
    sys.path.append(srcpath)
    import Fibo

def main():
    Fibo.fib(100)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3079975</id><snippet>del</snippet></ROW><ROW><id>3079975</id><snippet>except</snippet></ROW><ROW><id>3080574</id><snippet>less</snippet></ROW><ROW><id>3080574</id><snippet>PAGER</snippet></ROW><ROW><id>3080651</id><snippet>passwd</snippet></ROW><ROW><id>3080651</id><snippet>echo</snippet></ROW><ROW><id>3080651</id><snippet>echo -e "oldpass\\nnewpass\\nnewpass" | passwd
</snippet></ROW><ROW><id>3080651</id><snippet>-e</snippet></ROW><ROW><id>3080651</id><snippet>echo</snippet></ROW><ROW><id>3080830</id><snippet>from cherrypy.lib import file_generator
import StringIO
</snippet></ROW><ROW><id>3080830</id><snippet>def index(self):
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
    cherrypy.response.headers['Content-Type'] = "image/png"

    buffer = StringIO.StringIO()
    surface.write_to_png(buffer)
    buffer.seek(0)

    return file_generator(buffer)
</snippet></ROW><ROW><id>3080830</id><snippet>cherrypy.response.headers['Content-Disposition'] = 'attachment; filename="file.png"'
</snippet></ROW><ROW><id>3081218</id><snippet>join(temp)</snippet></ROW><ROW><id>3081218</id><snippet>join(a)</snippet></ROW><ROW><id>3081218</id><snippet>split</snippet></ROW><ROW><id>3081218</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; f='tanto va\nla gatta al lardo'
&gt;&gt;&gt; re.split(r'(\s+)', f)
['tanto', ' ', 'va', '\n', 'la', ' ', 'gatta', ' ', 'al', ' ', 'lardo']
</snippet></ROW><ROW><id>3081218</id><snippet>re.split</snippet></ROW><ROW><id>3081218</id><snippet>''.join</snippet></ROW><ROW><id>3081218</id><snippet>&gt;&gt;&gt; x = re.split(r'(\s+)', f)
&gt;&gt;&gt; y = x[::2]
&gt;&gt;&gt; y
['tanto', 'va', 'la', 'gatta', 'al', 'lardo']
</snippet></ROW><ROW><id>3081218</id><snippet>y</snippet></ROW><ROW><id>3081218</id><snippet>&gt;&gt;&gt; y[:] = [z+z for z in y]
&gt;&gt;&gt; y
['tantotanto', 'vava', 'lala', 'gattagatta', 'alal', 'lardolardo']
</snippet></ROW><ROW><id>3081218</id><snippet>&gt;&gt;&gt; x[::2] = y
&gt;&gt;&gt; ''.join(x)
'tantotanto vava\nlala gattagatta alal lardolardo'
</snippet></ROW><ROW><id>3081218</id><snippet>\n</snippet></ROW><ROW><id>3081296</id><snippet>CREATE TABLE objects ( id INTEGER PRIMARY KEY, name VARCHAR );
CREATE TABLE comments ( object_id INTEGER REFERENCES objects (id), text VARCHAR NOT NULL, date TIMESTAMP NOT NULL );

INSERT INTO objects (id, name) VALUES (1, 'object 1'), (2, 'object 2');
INSERT INTO comments (object_id, text, date) VALUES
   (1, 'object 1 comment 1', '2010-01-02'),
   (1, 'object 1 comment 2', '2010-01-05'),
   (2, 'object 2 comment 1', '2010-01-08'),
   (2, 'object 2 comment 2', '2010-01-09');

SELECT * FROM objects o JOIN comments c ON (o.id = c.object_id);
</snippet></ROW><ROW><id>3081296</id><snippet>SELECT * FROM (
    SELECT
        o.*, c.*,
        rank() OVER (PARTITION BY object_id ORDER BY date DESC) AS r
    FROM objects o JOIN comments c ON (o.id = c.object_id)
) AS s
WHERE r = 1;
</snippet></ROW><ROW><id>3081296</id><snippet>last_comment_id</snippet></ROW><ROW><id>3081360</id><snippet>&gt;&gt;&gt; print datetime.date.today()-datetime.timedelta(1)
&gt;&gt;&gt; 2010-06-19
</snippet></ROW><ROW><id>3081508</id><snippet>car = Car()
car.store = False
</snippet></ROW><ROW><id>3081508</id><snippet>store</snippet></ROW><ROW><id>3081508</id><snippet>False</snippet></ROW><ROW><id>3081508</id><snippet>__init__</snippet></ROW><ROW><id>3081955</id><snippet>featx</snippet></ROW><ROW><id>3081955</id><snippet>negfeats = [feat(x) for x in words]</snippet></ROW><ROW><id>3081955</id><snippet>from nltk.corpus import movie_reviews
from multiprocessing import Pool

def featx(words):
    return dict([(word, True) for word in words])

if __name__ == "__main__":
    negids = movie_reviews.fileids('neg')
    posids = movie_reviews.fileids('pos')

    p = Pool(2)
    negfeats =[]
    posfeats =[]

    for f in negids:
        words = movie_reviews.words(fileids=[f]) 
        negfeats = p.map(featx, words)

    print len(negfeats)
</snippet></ROW><ROW><id>3082144</id><snippet>wget https://username:password@bitbucket.org/user/repo/get/REVISIONHASH.zip
</snippet></ROW><ROW><id>3082252</id><snippet>import</snippet></ROW><ROW><id>3082252</id><snippet>#include</snippet></ROW><ROW><id>3082252</id><snippet>.py</snippet></ROW><ROW><id>3082252</id><snippet>global</snippet></ROW><ROW><id>3082252</id><snippet>NameError</snippet></ROW><ROW><id>3082252</id><snippet>try:
    duck.quack()
except NameError:
    pass
</snippet></ROW><ROW><id>3082252</id><snippet>duck</snippet></ROW><ROW><id>3082252</id><snippet>try:
    duck.quack()
except AttributeError:
    pass
</snippet></ROW><ROW><id>3082252</id><snippet>duck</snippet></ROW><ROW><id>3082252</id><snippet>quack</snippet></ROW><ROW><id>3082252</id><snippet>AttributeError</snippet></ROW><ROW><id>3082901</id><snippet>_xxx</snippet></ROW><ROW><id>3082901</id><snippet>_abcoll</snippet></ROW><ROW><id>3082901</id><snippet>_thread</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>$ touch _ast.py
$ python -c 'from _ast import *; print(dir())'
['AST', 'Add', 'And', 'Assert', 'Assign', 'Attribute ...
</snippet></ROW><ROW><id>3082901</id><snippet>_</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>sys</snippet></ROW><ROW><id>3082901</id><snippet>$ touch sys.py
$ python -c 'from sys import *; print(dir())'
['__builtins__', '__doc__', '__name__', '__package__', 'api_version', 'argv', ...
</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>ast</snippet></ROW><ROW><id>3082901</id><snippet>from _ast import *
</snippet></ROW><ROW><id>3082901</id><snippet>ast.py</snippet></ROW><ROW><id>3082901</id><snippet>ast</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>ast</snippet></ROW><ROW><id>3082901</id><snippet>_ast</snippet></ROW><ROW><id>3082901</id><snippet>ast</snippet></ROW><ROW><id>3083485</id><snippet>friends.get()</snippet></ROW><ROW><id>3083485</id><snippet>https://graph.facebook.com/me/friends will get a list of your friends then
https://graph.facebook.com/{{ID}}/friends will get the friends of your friend with id {{ID}}
</snippet></ROW><ROW><id>3083673</id><snippet>python manage.py --help
</snippet></ROW><ROW><id>3083673</id><snippet>help</snippet></ROW><ROW><id>3083673</id><snippet>&gt;&gt;&gt; help('help')

Welcome to Python 2.5!  This is the online help utility.
....
</snippet></ROW><ROW><id>3083736</id><snippet> f = open(path, "wb")
 f.write("*"*os.path.getsize(path))
 f.close()
 os.unlink(path)
</snippet></ROW><ROW><id>3083736</id><snippet>linux wipe</snippet></ROW><ROW><id>3083736</id><snippet>srm</snippet></ROW><ROW><id>3083882</id><snippet>&lt;someversion&gt;</snippet></ROW><ROW><id>3083984</id><snippet>for i in {1..1000}; do nohup python test.py &amp; done
</snippet></ROW><ROW><id>3084273</id><snippet>django.contrib.messages</snippet></ROW><ROW><id>3084489</id><snippet>class SillyWalk(object):
    def is_silly_enough(walk):
        return (False, "It's never silly enough")

    def walk(self, appraisal_function=is_silly_enough):
        self.do_stuff()
        (was_good_enough, reason) = appraisal_function(self)
        if not was_good_enough:
            self.execute_self_modifying_code(reason)
        return appraisal_function
    def do_stuff(self):
        pass
    def execute_self_modifying_code(self, problem):
        deepjuju.kiss_booboo_better(self, problem)
</snippet></ROW><ROW><id>3084489</id><snippet>&gt;&gt;&gt; SillyWalk.is_silly_enough
&lt;unbound method SillyWalk.is_silly_enough&gt;
</snippet></ROW><ROW><id>3084489</id><snippet>&gt;&gt;&gt; SillyWalk.walk.im_func.func_defaults[0] # the default argument to .walk
&lt;function is_silly_enough at 0x0000000002212048&gt;
</snippet></ROW><ROW><id>3084489</id><snippet>    is_silly_enough = staticmethod(is_silly_enough)
</snippet></ROW><ROW><id>3084609</id><snippet>from ctypes import * 

your_dll = cdll.LoadLibrary("your_dll.dll") 

PFloat = POINTER(c_float) 
PInt   = POINTER(c_int) 

p_data    = PFloat() 
p_classes = PInt() 
buff      = create_string_buffer(1024) 
n1        = c_int( 0 ) 
n2        = c_int( 0 ) 

ret = your_dll.read_data( buff, byref(n1), byref(n2), byref(p_data), byref(p_classes) ) 

print('Data:    ', p_data.contents) 
print('Classes: ', p_classes.contents) 
</snippet></ROW><ROW><id>3084642</id><snippet>getPage</snippet></ROW><ROW><id>3084642</id><snippet>timeout</snippet></ROW><ROW><id>3084642</id><snippet>Deferred</snippet></ROW><ROW><id>3084642</id><snippet>getPage</snippet></ROW><ROW><id>3084660</id><snippet>w = ['a', 'b', 'c']
s = '%s\t%s\t%s\n' % tuple(w)
</snippet></ROW><ROW><id>3084674</id><snippet>yield</snippet></ROW><ROW><id>3084674</id><snippet>yield</snippet></ROW><ROW><id>3084674</id><snippet>yield</snippet></ROW><ROW><id>3084674</id><snippet>###########################################
print "Function iterator using yield",

def gen():
    for x in range(0, 10):
        yield x

f = gen()
try:
    while True:
        print f.next(),
except StopIteration:
    pass

for x in gen():
    print x,

print

##########################################
print "Class iterator defining iter and next",

class gen2(object):

    def __init__(self):
        self.index = 0;
        self.limit = 10;

    def __iter__(self):
        return self

    def next(self):
        if self.index &gt;= self.limit:
            raise StopIteration
        self.index += 1;
        return self.index - 1;


f = gen2()
try:
    while True:
        print f.next(),
except StopIteration:
    pass

for x in gen2():
    print x,
print

##########################################
print "Function iterator using iter() and sentinel",
def gen3():
    def g3():
        if g3.index is None:
            g3.index = 0
        g3.index += 1;
        return g3.index - 1

    g3.index = None
    return iter(g3, 10)

f = gen3()
try:
    while True:
        print f.next(),
except StopIteration:
    pass

for x in gen3():
    print x,
print
</snippet></ROW><ROW><id>3084674</id><snippet>def main_hook(self,f):
    while (self.shouldContinue()):
        #do some preparations
        for v in f(self):
            yield v
        #do some tear down
</snippet></ROW><ROW><id>3084838</id><snippet>/opt/local/lib</snippet></ROW><ROW><id>3084838</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>3084838</id><snippet>.app</snippet></ROW><ROW><id>3084843</id><snippet>cursor.execute("call procedure('%s');" % variable )
</snippet></ROW><ROW><id>3085193</id><snippet>filename.py</snippet></ROW><ROW><id>3085193</id><snippet>C:\Python31</snippet></ROW><ROW><id>3085193</id><snippet>PATH</snippet></ROW><ROW><id>3085246</id><snippet>pydoc -p 8080
</snippet></ROW><ROW><id>3085283</id><snippet>import myText2Speech
... code above ...

hellobtn.Bind(wx.EVT_BUTTON, self.OnButton)

def OnButton(self, event):
    """Prep whatever's needed, and call function txt2speech module."""
</snippet></ROW><ROW><id>3085443</id><snippet>codecs.open</snippet></ROW><ROW><id>3085443</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>3085443</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>3085443</id><snippet>open</snippet></ROW><ROW><id>3085443</id><snippet>codecs.open</snippet></ROW><ROW><id>3085443</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>3085918</id><snippet>#!/bin/sh
# Set target string, files to search, location of p4 executable...
TARGET='\r\n'
DEPOT_PATH="//depot/src/..."
CHANGE=$1
P4CMD="/usr/local/bin/p4 -p 1666 -c copychecker"
XIT=0
echo ""
# For each file, strip off #version and other non-filename info
# Use sed to swap spaces w/"%" to obtain single arguments for "for"
for FILE in `$P4CMD files $DEPOT_PATH@=$CHANGE | \
  sed -e 's/\(.*\)\#[0-9]* - .*$/\1/' -e 's/ /%/g'`
do
  # Undo the replacement to obtain filename...
  FILE="`echo $FILE | sed -e 's/%/ /g'`"
# ...and use @= specifier to access file contents:
  # p4 print -q //depot/src/file.c@=12345
  if $P4CMD print -q "$FILE@=$CHANGE" | fgrep "$TARGET" &gt; /dev/null
  then 
      echo "Submit fails: '$TARGET' not found in $FILE"
      XIT=1
  else
      echo ""

  fi
done
exit $XIT
</snippet></ROW><ROW><id>3085918</id><snippet>then</snippet></ROW><ROW><id>3085918</id><snippet>else</snippet></ROW><ROW><id>3085918</id><snippet>if</snippet></ROW><ROW><id>3085918</id><snippet>grep</snippet></ROW><ROW><id>3085918</id><snippet>fgrep</snippet></ROW><ROW><id>3085918</id><snippet>-q</snippet></ROW><ROW><id>3086399</id><snippet>required</snippet></ROW><ROW><id>3086399</id><snippet>$LOADED_FEATURES</snippet></ROW><ROW><id>3086399</id><snippet>require</snippet></ROW><ROW><id>3086399</id><snippet>require</snippet></ROW><ROW><id>3086399</id><snippet>$LOADED_FEATURES.last if require 'yaml'
# =&gt; 'C:/Program Files/Ruby/lib/ruby/1.9.1/yaml.rb'
</snippet></ROW><ROW><id>3086399</id><snippet>require</snippet></ROW><ROW><id>3086399</id><snippet>$LOADED_FEATURES</snippet></ROW><ROW><id>3086399</id><snippet>require 'yaml'
# =&gt; true
# true means: the file was loaded

$LOADED_FEATURES.last
# =&gt; 'C:/Program Files/Ruby/lib/ruby/1.9.1/yaml.rb'

require 'json'
$LOADED_FEATURES.last
# =&gt; 'C:/Program Files/Ruby/lib/ruby/1.9.1/json.rb'

require 'yaml'
# =&gt; false
# false means: the file wasn't loaded again, because it has already been loaded

$LOADED_FEATURES.last
# =&gt; 'C:/Program Files/Ruby/lib/ruby/1.9.1/json.rb'
# Last loaded feature is still JSON, because YAML wasn't actually loaded twice
</snippet></ROW><ROW><id>3086399</id><snippet>require</snippet></ROW><ROW><id>3086399</id><snippet>require</snippet></ROW><ROW><id>3086399</id><snippet>require 'yaml'</snippet></ROW><ROW><id>3086399</id><snippet>yaml.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/i386-mingw32/stringio.so</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/i386-mingw32/syck.so</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/error.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/basenode.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/syck.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/tag.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/stream.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/constants.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/date/format.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/date.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/rubytypes.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck/types.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/yaml/syck.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/syck.rb</snippet></ROW><ROW><id>3086399</id><snippet>C:/Program Files/Ruby/lib/ruby/1.9.1/yaml.rb</snippet></ROW><ROW><id>3086406</id><snippet>eng_tot</snippet></ROW><ROW><id>3086406</id><snippet>if 'eng_tot' in line.split(): process_blocks</snippet></ROW><ROW><id>3086406</id><snippet>if re.match("\s+-+\s+", line): proccess_metrics_block</snippet></ROW><ROW><id>3086406</id><snippet>sanitized_line = line[8:]</snippet></ROW><ROW><id>3086406</id><snippet>eng_total = line.split()[0]</snippet></ROW><ROW><id>3086406</id><snippet>re</snippet></ROW><ROW><id>3086406</id><snippet>import re</snippet></ROW><ROW><id>3086406</id><snippet>process_blocks</snippet></ROW><ROW><id>3086406</id><snippet>process_metrics_block</snippet></ROW><ROW><id>3086406</id><snippet>while</snippet></ROW><ROW><id>3086406</id><snippet>if</snippet></ROW><ROW><id>3086406</id><snippet>import re

def find_header(lines):
  for (i, line) in enumerate(lines):
    if 'eng_tot' in line.split():
      return i
  return None

def find_next_separator(lines, start):
  for (i, line) in enumerate(lines[start+1:]):
    if re.match("\s*-+\s*", line):
      return i + start + 1
  return None

if __name__ == '__main__':
  totals = []
  lines = open('so.txt').readlines()

  header = find_header(lines)
  start = find_next_separator(lines, header+1)

  while True:
    end = find_next_separator(lines, start+1)
    if end is None: break

    # Pull out block, after line of dashes.
    metrics_block = lines[start+1:end]

    # Pull out 2nd column from 1st line of metrics.
    eng_total = metrics_block[0].split()[1]
    totals.append(eng_total)

    start = end

  print totals
</snippet></ROW><ROW><id>3086406</id><snippet>def metric_block_iter(lines):
  start = find_next_separator(lines, find_header(lines)+1)
  while True:
    end = find_next_separator(lines, start+1)
    if end is None: break
    yield (start, end)
    start = end


if __name__ == '__main__':
  totals = []
  lines = open('so.txt').readlines()

  for (start, end) in metric_block_iter(lines):
    # Pull out block, after line of dashes.
    metrics_block = lines[start+1:end]

    # Pull out 2nd column from 1st line of metrics.
    eng_total = metrics_block[0].split()[1]
    totals.append(eng_total)

  print totals
</snippet></ROW><ROW><id>3086573</id><snippet>&gt;&gt; sys.getsizeof(1.0)
16
&gt;&gt;&gt; d = dict.fromkeys((float(i) for i in range(1500)), 2.0)
&gt;&gt;&gt; sys.getsizeof(d)
98444
</snippet></ROW><ROW><id>3086573</id><snippet>getsizeof</snippet></ROW><ROW><id>3086573</id><snippet>&gt;&gt;&gt; sys.getsizeof(Sic)
452
&gt;&gt;&gt; sys.getsizeof(Sic())
32
&gt;&gt;&gt; sys.getsizeof(Sic().__dict__)
524
</snippet></ROW><ROW><id>3086573</id><snippet>(524 + 32) * 1550</snippet></ROW><ROW><id>3086797</id><snippet>None</snippet></ROW><ROW><id>3086797</id><snippet>NULL</snippet></ROW><ROW><id>3086797</id><snippet>'None'</snippet></ROW><ROW><id>3086797</id><snippet>None</snippet></ROW><ROW><id>3086797</id><snippet>'null'</snippet></ROW><ROW><id>3086797</id><snippet>NameError</snippet></ROW><ROW><id>3086869</id><snippet>stdout, stderr = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr.PIPE).communicate()
</snippet></ROW><ROW><id>3087011</id><snippet>import csv
toCSV = [{'name':'bob','age':25,'weight':200},{'name':'jim','age':31,'weight':180}]
keys = ['name', 'age', 'weight']
f = open('people.csv', 'wb')
dict_writer = csv.DictWriter(f, keys)
dict_writer.writer.writerow(keys)
dict_writer.writerows(toCSV)
</snippet></ROW><ROW><id>3087143</id><snippet>for</snippet></ROW><ROW><id>3087143</id><snippet>break</snippet></ROW><ROW><id>3087143</id><snippet>return</snippet></ROW><ROW><id>3087143</id><snippet>StopIteration</snippet></ROW><ROW><id>3087415</id><snippet>file = open('FilePath/OUTPUT.01')
lines = file.read()
file.close()
with open("output.txt","w") as f:
    for match in re.finditer(r"(?m)^\s*-+\s+\S+\s+(-?[\d.]+E[+-]\d+)", lines):
        f.write(match.group(1)+"\n")
</snippet></ROW><ROW><id>3087415</id><snippet>-</snippet></ROW><ROW><id>3087415</id><snippet>output.txt</snippet></ROW><ROW><id>3087415</id><snippet>(?m)                 # allow ^ to match at start of line, not just start of string
^                    # anchor the search at the start of the line
\s*                  # match any leading whitespace
-+                   # match one or more dashes
\s+                  # match trailing whitespace, including linebreak characters
\S+                  # match a run of non-whitespace characters (we're now one line ahead of the dashes
\s+                  # match a run of whitespace
(-?[\d.]+E[+-]\d+)   # match a number in scientific notation
</snippet></ROW><ROW><id>3087436</id><snippet>^(?!This).*That$
</snippet></ROW><ROW><id>3087436</id><snippet>^             # Start of string
  (?!This)    # Assert that "This" can't be matched here
  .*          # Match the rest of the string
  That        # making sure we match "That"
$             # right at the end of the string
</snippet></ROW><ROW><id>3087436</id><snippet>\b(?!This)\w*That\b
</snippet></ROW><ROW><id>3087436</id><snippet>\b</snippet></ROW><ROW><id>3087436</id><snippet>\w</snippet></ROW><ROW><id>3087436</id><snippet>\S</snippet></ROW><ROW><id>3087436</id><snippet>words = re.findall(r"\b(?!This)\w*That\b", text)</snippet></ROW><ROW><id>3088152</id><snippet>dev.new() # opens a new window, and can control the size
dev.off() # closes the window
</snippet></ROW><ROW><id>3088518</id><snippet>python -h</snippet></ROW><ROW><id>3088674</id><snippet>request</snippet></ROW><ROW><id>3088898</id><snippet>def deepReplace(d, key, value):
    if isinstance(d, dict):
        if key in d:
            d[key] = value
            return True
        else:
            for k,v in d.iteritems():
                if deepReplace(v, key, value):
                    return True
    return False
</snippet></ROW><ROW><id>3088898</id><snippet>def deepReplace(d, key, value):
    if isinstance(d, dict):
        if key in d:
            d[key] = value
        else:
            for k,v in d.iteritems():
                deepReplace(v, key, value):
</snippet></ROW><ROW><id>3089044</id><snippet>f = open("%s.sql" % (today), "w")
</snippet></ROW><ROW><id>3089044</id><snippet>"%s.sql"</snippet></ROW><ROW><id>3089044</id><snippet>"w" % (today)</snippet></ROW><ROW><id>3089044</id><snippet>"w"</snippet></ROW><ROW><id>3089103</id><snippet>xmldoc = fromstring(page.decode('utf-8'))
</snippet></ROW><ROW><id>3089192</id><snippet>dict.get(key, default)</snippet></ROW><ROW><id>3089192</id><snippet>dict[key]</snippet></ROW><ROW><id>3089192</id><snippet>default</snippet></ROW><ROW><id>3089192</id><snippet>None</snippet></ROW><ROW><id>3089192</id><snippet>dict.get(key)</snippet></ROW><ROW><id>3089192</id><snippet>None</snippet></ROW><ROW><id>3089192</id><snippet>KeyError</snippet></ROW><ROW><id>3089192</id><snippet>[]</snippet></ROW><ROW><id>3089310</id><snippet>global</snippet></ROW><ROW><id>3089310</id><snippet>import sys
thismodule = sys.modules[__name__]
thismodule.foo = 'bar'

def update_foo():
  thismodule.foo = 'baz'
</snippet></ROW><ROW><id>3089310</id><snippet>thismodule</snippet></ROW><ROW><id>3089310</id><snippet>global</snippet></ROW><ROW><id>3089310</id><snippet>thismodule</snippet></ROW><ROW><id>3089310</id><snippet>foo</snippet></ROW><ROW><id>3089310</id><snippet>foo</snippet></ROW><ROW><id>3089339</id><snippet>join</snippet></ROW><ROW><id>3089339</id><snippet>daemon</snippet></ROW><ROW><id>3089339</id><snippet>False</snippet></ROW><ROW><id>3089515</id><snippet>doc_id = db.test.insert({"foo": 1})
db.test.remove(doc_id)
</snippet></ROW><ROW><id>3089789</id><snippet>inpath</snippet></ROW><ROW><id>3089789</id><snippet>inpath = sys.argv[1]
inpath = inpath.decode("UTF-8")
filein = open(inpath, "rb")
</snippet></ROW><ROW><id>3089951</id><snippet>import imp
imp.find_module(module_name)
</snippet></ROW><ROW><id>3089951</id><snippet>__path__</snippet></ROW><ROW><id>3090131</id><snippet>p_1 = p_0 + 2*pi*t*(f_0-f_1)</snippet></ROW><ROW><id>3090131</id><snippet>t</snippet></ROW><ROW><id>3090131</id><snippet>from pylab import *

sample_rate = .001
f0, f1 = 10, 20
t_change = 2

times = arange(0, 4, sample_rate)

ramp = 1./(1+exp(-6.*(times-t_change)))
freq = f0*(1-ramp)+f1*ramp
phase_correction = add.accumulate(times*concatenate((zeros(1), 2*pi*(freq[:-1]-freq[1:]))))

figure()
subplot(311)
plot(times, freq)
subplot(312)
plot(times, sin(2*pi*freq*times))
subplot(313)
plot(times, sin(2*pi*freq*times+phase_correction))

show()
</snippet></ROW><ROW><id>3090142</id><snippet>bundle_files=3</snippet></ROW><ROW><id>3090183</id><snippet>foo = [1,2,3]
print max(foo)
</snippet></ROW><ROW><id>3090342</id><snippet>try:
   x = SomeModel.objects.get(foo='bar')
except SomeModel.DoesNotExist:
   x = None
</snippet></ROW><ROW><id>3090342</id><snippet>safe_get</snippet></ROW><ROW><id>3090460</id><snippet>from scripttest import TestFileEnvironment

env = TestFileEnvironment('./scratch')

def test_script():
    env.reset()
    result = env.run('do_awesome_thing testfile --with extra_win --file %s' % filename)
    # or use a list like ['do_awesome_thing', 'testfile', ...]
    assert result.stdout.startswith('Creating awesome file')
    assert filename in result.files_created
</snippet></ROW><ROW><id>3090778</id><snippet>bisect</snippet></ROW><ROW><id>3090798</id><snippet>+</snippet></ROW><ROW><id>3090798</id><snippet>\</snippet></ROW><ROW><id>3090831</id><snippet>self.__einzahlen -&gt; self.einzaheln</snippet></ROW><ROW><id>3090831</id><snippet>self.__stand</snippet></ROW><ROW><id>3090831</id><snippet>self.__stand</snippet></ROW><ROW><id>3090831</id><snippet>getStand()</snippet></ROW><ROW><id>3090831</id><snippet>def zinsenGutschreiben(self):
    zinsen = self.getStand() * (self.__zinssatz / 100)
    self.einzahlen(zinsen)
</snippet></ROW><ROW><id>3091332</id><snippet>variable = something if condition else something_else
</snippet></ROW><ROW><id>3091332</id><snippet>variable = condition and something or something_else
</snippet></ROW><ROW><id>3091474</id><snippet>go.py</snippet></ROW><ROW><id>3091474</id><snippet>/etc/init.d/</snippet></ROW><ROW><id>3091474</id><snippet>#!/bin/bash
python /home/myuser/go.py
</snippet></ROW><ROW><id>3091474</id><snippet>ln -s /etc/init.d/go.sh /home/myuser/go.sh
</snippet></ROW><ROW><id>3091474</id><snippet>/etc/rc.local</snippet></ROW><ROW><id>3091474</id><snippet>/home/myuser/go.sh</snippet></ROW><ROW><id>3091474</id><snippet>go.sh</snippet></ROW><ROW><id>3091651</id><snippet>mysql.h</snippet></ROW><ROW><id>3091702</id><snippet>mount -t smbfs //user@server/sharename share
</snippet></ROW><ROW><id>3091702</id><snippet>subprocess</snippet></ROW><ROW><id>3091702</id><snippet>share</snippet></ROW><ROW><id>3091702</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>3091702</id><snippet>umount share
</snippet></ROW><ROW><id>3091702</id><snippet>from contextlib import contextmanager
import os
import shutil
import subprocess

@contextmanager
def mounted(remote_dir, local_dir):
    local_dir = os.path.abspath(local_dir)
    retcode = subprocess.call(["/sbin/mount", "-t", "smbfs", remote_dir, local_dir])
    if retcode != 0:
        raise OSError("mount operation failed")
    try:
        yield
    finally:
        retcode = subprocess.call(["/sbin/umount", local_dir])
        if retcode != 0:
            raise OSError("umount operation failed")

with mounted(remote_dir, local_dir):
    shutil.copy(file_to_be_copied, local_dir)
</snippet></ROW><ROW><id>3091702</id><snippet>mounted</snippet></ROW><ROW><id>3091702</id><snippet>network_share_auth</snippet></ROW><ROW><id>3091702</id><snippet>platform</snippet></ROW><ROW><id>3092067</id><snippet>"Name" "Tom" "CODE 041" "Has"
"Address" "NSYSTEMS c/o" "First Term" "123" 18  
"Occ" "Engineer" "Level1" "JT" 18
</snippet></ROW><ROW><id>3092067</id><snippet>import csv
reader = csv.reader(open('test.txt'), delimiter=' ', quotechar='"')
for row in reader:
    print(row)
</snippet></ROW><ROW><id>3092067</id><snippet>['Name', 'Tom', 'CODE 041', 'Has']
['Address', 'NSYSTEMS c/o', 'First Term', '123', '18']
['Occ', 'Engineer', 'Level1', 'JT', '18']
</snippet></ROW><ROW><id>3092067</id><snippet>delimiter='\t'</snippet></ROW><ROW><id>3092341</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, root):

        tk.Frame.__init__(self, root)
        self.canvas = tk.Canvas(root, borderwidth=0, background="#ffffff")
        self.frame = tk.Frame(self.canvas, background="#ffffff")
        self.vsb = tk.Scrollbar(root, orient="vertical", command=self.canvas.yview)
        self.canvas.configure(yscrollcommand=self.vsb.set)

        self.vsb.pack(side="right", fill="y")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.canvas.create_window((4,4), window=self.frame, anchor="nw", 
                                  tags="self.frame")

        self.frame.bind("&lt;Configure&gt;", self.OnFrameConfigure)

        self.populate()

    def populate(self):
        '''Put in some fake data'''
        for row in range(100):
            tk.Label(self.frame, text="%s" % row, width=3, borderwidth="1", 
                     relief="solid").grid(row=row, column=0)
            t="this is the second colum for row %s" %row
            tk.Label(self.frame, text=t).grid(row=row, column=1)

    def OnFrameConfigure(self, event):
        '''Reset the scroll region to encompass the inner frame'''
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

if __name__ == "__main__":
    root=tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>3092692</id><snippet># Your script.
import foo

foo.main()

# The file being imported.
def main():
    print "running foo.main()"

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3092692</id><snippet>execfile</snippet></ROW><ROW><id>3092692</id><snippet># Your script.
import sys

import foo

bar = 999
sys.argv = ['blah', 'fubb']

execfile( 'foo.py', globals() )

# The file being exec'd.
if __name__ == "__main__":
    print bar
    print sys.argv
</snippet></ROW><ROW><id>3092721</id><snippet>sudo pip install -f http://www.dnspython.org/kits/1.8.0/ dnspython
</snippet></ROW><ROW><id>3092721</id><snippet>import threading
from dns import resolver

class Resolver(threading.Thread):
    def __init__(self, address, result_dict):
        threading.Thread.__init__(self)
        self.address = address
        self.result_dict = result_dict

    def run(self):
        try:
            result = resolver.query(self.address)[0].to_text()
            self.result_dict[self.address] = result
        except resolver.NXDOMAIN:
            pass


def main():
    infile = open("domainlist", "r")
    intext = infile.readlines()
    threads = []
    results = {}
    for address in [address.strip() for address in intext if address.strip()]:
        resolver_thread = Resolver(address, results)
        threads.append(resolver_thread)
        resolver_thread.start()

    for thread in threads:
        thread.join()

    outfile = open('final.csv', 'w')
    outfile.write("\n".join("%s,%s" % (address, ip) for address, ip in results.iteritems()))
    outfile.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3092983</id><snippet>import apt
cache=apt.Cache()
cache.update()
cache.open(None)
cache.upgrade()
for pkg in cache.getChanges():
    print pkg.sourcePackageName, pkg.isUpgradeable
</snippet></ROW><ROW><id>3093027</id><snippet>variant PyBoolToVariant(PyObject *value) {
    return value == Py_True;
}

Map&lt;PyTypeObject*,variant* (PyObject*)&gt; function_map;

function_map.add(PyBool, PyBoolToVariant);
</snippet></ROW><ROW><id>3093027</id><snippet>variant makeVariant(PyObject *value) {
    return (*function_map.get(value-&gt;ob_type))(value);
}
</snippet></ROW><ROW><id>3093027</id><snippet>&lt;PyTypeObject*, variant*(PyObject*)</snippet></ROW><ROW><id>3093876</id><snippet>re.sub("&gt;\s*&lt;","&gt;&lt;","[here your html string]")</snippet></ROW><ROW><id>3093876</id><snippet>string.replace("&gt;\n","&gt;")</snippet></ROW><ROW><id>3094442</id><snippet>proc = subprocess.Popen(['find', '/'], stdout=open('tmp.txt', 'w'))
if proc.wait() == 0:
  pass
</snippet></ROW><ROW><id>3094442</id><snippet>import tempfile</snippet></ROW><ROW><id>3094442</id><snippet>os.walk</snippet></ROW><ROW><id>3094668</id><snippet>Map&lt;String, String&gt; myMap = new HashMap&lt;String, String&gt;();
myMap.put("foo", "23");
myMap.put("bar", "helloworld");
</snippet></ROW><ROW><id>3094816</id><snippet>mylist[:] = [s.replace(':', '') for s in mylist]
</snippet></ROW><ROW><id>3094816</id><snippet>mylist</snippet></ROW><ROW><id>3094816</id><snippet>mylist[:]</snippet></ROW><ROW><id>3094816</id><snippet>mylist</snippet></ROW><ROW><id>3094816</id><snippet>mylist[:] = ...</snippet></ROW><ROW><id>3094816</id><snippet>mylist</snippet></ROW><ROW><id>3094896</id><snippet>   char pySearchPath[] = "/users/abc/Python26";
   Py_SetPythonHome(pySearchPath);
   Py_Initialize();
   PyRun_SimpleString("from time import time,ctime\n"
                     "print 'Today is',ctime(time())\n");
   cerr &lt;&lt; Py_GetPath() &lt;&lt; endl;
</snippet></ROW><ROW><id>3094978</id><snippet>with open('socalledbig.txt', 'rt') as f:
    lines = f.readlines()
</snippet></ROW><ROW><id>3094978</id><snippet>starts</snippet></ROW><ROW><id>3094978</id><snippet>ends</snippet></ROW><ROW><id>3094978</id><snippet>len(lines)</snippet></ROW><ROW><id>3094978</id><snippet>names</snippet></ROW><ROW><id>3094978</id><snippet>assert len(starts) == len(ends) == len(names)

for s, e, n in zip(starts, ends, names):
    with open(n, 'wt') as f:
        f.writelines(lines[s:e])
</snippet></ROW><ROW><id>3094978</id><snippet>'begin'</snippet></ROW><ROW><id>3094978</id><snippet>'end'</snippet></ROW><ROW><id>3094978</id><snippet>result0.txt</snippet></ROW><ROW><id>3094978</id><snippet>result1.txt</snippet></ROW><ROW><id>3094978</id><snippet>outfile = 0
starts = []
ends = []
names = []
for i, line in enumerate(lines):
  if 'begin' in line:
    if 'end' in line:
      raise ValueError('Both begin and end: %r' % line)
    starts.append(i)
    names.append('result%d.txt' % outfile)
    outfile += 1
  elif 'end' in line:
    ends.append(i + 1)  # remember ends are EXCLUDED, hence the +1
</snippet></ROW><ROW><id>3094978</id><snippet>assert</snippet></ROW><ROW><id>3094978</id><snippet>starts</snippet></ROW><ROW><id>3094978</id><snippet>ends</snippet></ROW><ROW><id>3094978</id><snippet>names</snippet></ROW><ROW><id>3095124</id><snippet>from my_module import my_function as f</snippet></ROW><ROW><id>3095417</id><snippet>marshal()</snippet></ROW><ROW><id>3095417</id><snippet>class MyTestCase(unittest.TestCase):
    def assertFieldsEqual(self, obj, expectedFieldValDict):
        for fieldName, fieldVal in expectedFieldValDict.items():
            self.assertFieldEqual(obj, fieldName, fieldVal)
    def assertFieldEqual(self, obj, fieldName, expectedFieldVal):
        actualFieldVal = getattr(obj, fieldName)
        if expectedFieldVal != actualFieldVal:
            msg = "Field %r doesn't match: expected %r, actual %r" % \
                (fieldName, expectedFieldVal, actualFieldVal)
            self.fail(msg)

class NumsTests(MyTestCase):
    def setUp(self):
        self.initFields = {'n1': 10, 'n2': 20, 'n3': 30}
        self.nums = Nums(**initFields)
    def test_init(self):
        self.assertFieldsEqual(self.nums, self.initFields)
</snippet></ROW><ROW><id>3095417</id><snippet>assertFieldsEqual</snippet></ROW><ROW><id>3095417</id><snippet>assertFieldEqual</snippet></ROW><ROW><id>3095417</id><snippet>def test_marshal(self):
    expected = '...'
    self.assertEqual(expected, self.nums.marshal())
</snippet></ROW><ROW><id>3095509</id><snippet>#!/bin/bash
/PATH/TO/mysqldump -u root -p***** normalisation &gt; /SOMEOTHER/PATH/TO/$(date '+%Y-%m-%d').sql
</snippet></ROW><ROW><id>3095509</id><snippet>0 0 * * * /PATH/TO/mysql_backup.sh 
</snippet></ROW><ROW><id>3095600</id><snippet>with open(fname, 'w') as file:
    for match in re.finditer(r'Item A(.+?)Item B', subject, re.I):
        s = match.group(1)
        if len(s) &gt; 50:
            file.write(s)
</snippet></ROW><ROW><id>3095600</id><snippet>re</snippet></ROW><ROW><id>3095763</id><snippet>get_next_by_FOO()</snippet></ROW><ROW><id>3095763</id><snippet>get_previous_by_FOO()</snippet></ROW><ROW><id>3096424</id><snippet>_Z20ComputeGeometryImagePciPf</snippet></ROW><ROW><id>3096424</id><snippet>extern "C" void ComputeGeometryImage(char * input_image, 
                                     int geometry_image_size, 
                                     float * output);
</snippet></ROW><ROW><id>3096424</id><snippet>extern "C"
{
    void foo(int i);
    void bar(char c);
}
</snippet></ROW><ROW><id>3096613</id><snippet>.format</snippet></ROW><ROW><id>3096613</id><snippet>textwrap</snippet></ROW><ROW><id>3096613</id><snippet>from textwrap import fill
def formatItem(left, right):
   wrapped = fill(right, width=41, subsequent_indent=' '*15)
   return '  {0:&lt;13}{1}'.format(left, wrapped)

...

&gt;&gt;&gt; print(formatItem('0123', 'This is some long text which would wrap past the 80 column mark and go onto the next line number of times blah blah blah.'))
  0123         This is some long text which would wrap
               past the 80 column mark
               and go onto the next line
               number of times blah blah
               blah.
</snippet></ROW><ROW><id>3096613</id><snippet>from textwrap import wrap
from itertools import zip_longest
def twoColumn(left, right, leftWidth=13, rightWidth=41, indent=2, separation=2):
    lefts = wrap(left, width=leftWidth)
    rights = wrap(right, width=rightWidth)
    results = []
    for l, r in zip_longest(lefts, rights, fillvalue=''):
       results.append('{0:{1}}{2:{5}}{0:{3}}{4}'.format('', indent, l, separation, r, leftWidth))
    return "\n".join(results)

&gt;&gt;&gt; print(twoColumn("I'm trying to format some strings for output on the command-line", "report style, and am looking for the easiest method to format a string such that I can get automatic paragraph formatting."))
  I'm trying to  report style, and am looking for the
  format some    easiest method to format a string such
  strings for    that I can get automatic paragraph
  output on the  formatting.
  command-line   
</snippet></ROW><ROW><id>3096984</id><snippet>datetime</snippet></ROW><ROW><id>3096984</id><snippet>strptime</snippet></ROW><ROW><id>3096984</id><snippet>from datetime import datetime
s1 = '10:33:26'
s2 = '11:15:49' # for example
FMT = '%H:%M:%S'
tdelta = datetime.strptime(s1, FMT) - datetime.strptime(s2, FMT)
</snippet></ROW><ROW><id>3096984</id><snippet>timedelta</snippet></ROW><ROW><id>3096984</id><snippet>datetime</snippet></ROW><ROW><id>3097287</id><snippet>def U(f): return f(f)

def fibnr(f):
    def lam(n):
        if (n &lt; 2): return 1
        return f(f)(n-1) + f(f)(n-2)
    return lam
</snippet></ROW><ROW><id>3097287</id><snippet>def fibnr(f): return lambda n: 1 if (n &lt; 2) else f(f)(n-1) + f(f)(n-2)
</snippet></ROW><ROW><id>3097287</id><snippet>((f f) x)</snippet></ROW><ROW><id>3097287</id><snippet>f(f(x))</snippet></ROW><ROW><id>3097287</id><snippet>f(f)(x)</snippet></ROW><ROW><id>3097292</id><snippet>BCM_SETSHIELD</snippet></ROW><ROW><id>3097292</id><snippet>true</snippet></ROW><ROW><id>3097310</id><snippet>seconds_per_unit = {"s": 1, "m": 60, "h": 3600, "d": 86400, "w": 604800}

def convert_to_seconds(s):
    return int(s[:-1]) * seconds_per_unit[s[-1]]
</snippet></ROW><ROW><id>3097630</id><snippet>import sympy

x, y, z = sympy.symbols('xyz')

p1 = 2*x*x
p2 = 3*y + 1
p3 = z

p4 = p1*p2*p3

print p4

print p4.diff(x)
print p4.diff(y)
print p4.diff(z)
</snippet></ROW><ROW><id>3097630</id><snippet>2*z*x**2*(1 + 3*y)
4*x*z*(1 + 3*y)
6*z*x**2
2*x**2*(1 + 3*y)
</snippet></ROW><ROW><id>3097670</id><snippet>quoteattr</snippet></ROW><ROW><id>3097896</id><snippet>dict.itervalues().next()
</snippet></ROW><ROW><id>3097896</id><snippet>next (iter (dict.values()))
</snippet></ROW><ROW><id>3097896</id><snippet>key, value = dict.popitem()
</snippet></ROW><ROW><id>3097896</id><snippet>dict</snippet></ROW><ROW><id>3098144</id><snippet>malloc</snippet></ROW><ROW><id>3098144</id><snippet>os.fork</snippet></ROW><ROW><id>3098182</id><snippet>if 'test' in sys.argv:
    DATABASE_ENGINE = 'sqlite3'
</snippet></ROW><ROW><id>3098182</id><snippet>if 'test' in sys.argv:
    DATABASES['default'] = {'ENGINE': 'sqlite3'}
</snippet></ROW><ROW><id>3098182</id><snippet>if 'test' in sys.argv:
    DATABASES['default'] = {'ENGINE': 'django.db.backends.sqlite3'}
</snippet></ROW><ROW><id>3098240</id><snippet>deferToThread</snippet></ROW><ROW><id>3098240</id><snippet>reactor.run()</snippet></ROW><ROW><id>3098240</id><snippet>deferToThread</snippet></ROW><ROW><id>3098240</id><snippet>import time

from twisted.internet import reactor
from twisted.internet.defer import gatherResults
from twisted.internet.threads import deferToThread, blockingCallFromThread

def workReallyHard():
    "'Work' function, invoked in a thread."
    time.sleep(0.2)

def longOperation():
    for x in range(10):
        workReallyHard()
        blockingCallFromThread(reactor, startShortOperation, x)
    result = blockingCallFromThread(reactor, gatherResults, shortOperations)
    return 'hooray', result

def shortOperation(value):
    workReallyHard()
    return value * 100

shortOperations = []

def startShortOperation(value):
    def done(result):
        print 'Short operation complete!', result
        return result
    shortOperations.append(
        deferToThread(shortOperation, value).addCallback(done))

d = deferToThread(longOperation)
def allDone(result):
    print 'Long operation complete!', result
    reactor.stop()
d.addCallback(allDone)

reactor.run()
</snippet></ROW><ROW><id>3098240</id><snippet>allDone</snippet></ROW><ROW><id>3098250</id><snippet>:sp $VIMRUNTIME/syntax/python.vim</snippet></ROW><ROW><id>3098250</id><snippet>'''</snippet></ROW><ROW><id>3098250</id><snippet>"""</snippet></ROW><ROW><id>3098250</id><snippet>fold</snippet></ROW><ROW><id>3098250</id><snippet>foldmethod=syntax</snippet></ROW><ROW><id>3098263</id><snippet>a = lambda: 1
print a.func_code.co_filename
print a.func_code.co_firstlineno
</snippet></ROW><ROW><id>3098263</id><snippet>a.__code__</snippet></ROW><ROW><id>3098273</id><snippet>t = "1:12:23"
(h, m, s) = t.split(':')
result = int(h) * 3600 + int(m) * 60 + int(s)
</snippet></ROW><ROW><id>3098403</id><snippet>&gt;&gt;&gt; f = "2.5"
&gt;&gt;&gt; i = "9"
&gt;&gt;&gt; ci = int(i)
&gt;&gt;&gt; ci
9
&gt;&gt;&gt; cf = float(f)
&gt;&gt;&gt; cf
2.5
&gt;&gt;&gt; g = "dsa"
&gt;&gt;&gt; cg = float(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for float(): dsa
&gt;&gt;&gt; try:
...   cg = float(g)
... except:
...   print "g is not a float"
...
g is not a float
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3099069</id><snippet>a.txt</snippet></ROW><ROW><id>3099069</id><snippet>"</snippet></ROW><ROW><id>3099069</id><snippet>ab"cdef"g
h"ijk"lmno"p
q
</snippet></ROW><ROW><id>3099069</id><snippet>ab
cdef
g\n
h
ijk
lmno
p\n
q\n
</snippet></ROW><ROW><id>3099081</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; from dateutil import rrule, relativedelta
&gt;&gt;&gt; every_third_tuesday = rrule.rrule(rrule.MONTHLY, 
                                      byweekday=relativedelta.TU(3), 
                                      dtstart=date.today(), 
                                      count=3)
&gt;&gt;&gt; for tt in every_third_tuesday:
...   print tt.date()
... 
2010-07-20
2010-08-17
2010-09-21
</snippet></ROW><ROW><id>3099106</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.5/Extras/lib/python</snippet></ROW><ROW><id>3099106</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>3099255</id><snippet>source= '/Unzip.sh' 
destination ='/var/mpx/www/http/Unzip.sh'
</snippet></ROW><ROW><id>3099863</id><snippet>def login(request):
    m = Member.objects.get(username=request.POST['username'])
    if m.password == request.POST['password']:
        request.session['member_id'] = m.id
        return HttpResponse("You're logged in.")
    else:
        return HttpResponse("Your username and password didn't match.")
</snippet></ROW><ROW><id>3099916</id><snippet>gtk.gdk.Pixbuf</snippet></ROW><ROW><id>3099916</id><snippet>fill</snippet></ROW><ROW><id>3099925</id><snippet>  def RunFunctionAndGetResult(chan, func, *args, **kwargs):
      chan.send(func(*args, **kwargs))
</snippet></ROW><ROW><id>3100008</id><snippet>{1, 2, 3, 4, 5, 6}</snippet></ROW><ROW><id>3100008</id><snippet>{1, 2, 3, 4, 5, 6}</snippet></ROW><ROW><id>3100008</id><snippet>itertools</snippet></ROW><ROW><id>3100008</id><snippet>import itertools
x = [1, 2, 3, 4, 5, 6]
[p for p in itertools.product(x, repeat=2)]
[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), 
 (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), 
 (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), 
 (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]
</snippet></ROW><ROW><id>3100008</id><snippet>import random
random.choice([p for p in itertools.product(x, repeat=2)])
(6, 3)
</snippet></ROW><ROW><id>3100114</id><snippet>import xml.etree.ElementTree as etree</snippet></ROW><ROW><id>3100114</id><snippet>from lxml import etree</snippet></ROW><ROW><id>3100114</id><snippet>pretty_print</snippet></ROW><ROW><id>3100114</id><snippet>tree.write(filename, pretty_print=True)
</snippet></ROW><ROW><id>3100114</id><snippet>etree.tostring</snippet></ROW><ROW><id>3100637</id><snippet>created = models.DateTimeField(auto_now_add=True)
</snippet></ROW><ROW><id>3100803</id><snippet>def login(request, *args, **kwargs):
    from django.contrib.auth.forms import AuthenticationForm
    if request.method == 'POST':
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            # login successful
            do_something()
    from django.contrib.auth.views import login as authlogin
    return authlogin(request, *args, **kwargs)
</snippet></ROW><ROW><id>3100803</id><snippet>def logout(request, *args, **kwargs):
    do_something() 
    from django.contrib.auth.views import logout as authlogout
    return authlogout(request, *args, **kwargs)
</snippet></ROW><ROW><id>3100803</id><snippet>urls.py</snippet></ROW><ROW><id>3100803</id><snippet>request</snippet></ROW><ROW><id>3100820</id><snippet>String.split(String regex, int limit)</snippet></ROW><ROW><id>3100820</id><snippet>limit</snippet></ROW><ROW><id>3100820</id><snippet>n</snippet></ROW><ROW><id>3100820</id><snippet>n - 1</snippet></ROW><ROW><id>3100820</id><snippet>n</snippet></ROW><ROW><id>3100820</id><snippet>n</snippet></ROW><ROW><id>3100820</id><snippet>n</snippet></ROW><ROW><id>3100820</id><snippet>static void dump(String[] ss) {
    for (String s: ss) {
        System.out.print("[" + s + "]");
    }
    System.out.println();
}
public static void main(String[] args) {
    String text = "a-b-c-d---";

    dump(text.split("-"));
    // prints "[a][b][c][d]"

    dump(text.split("-", 2));
    // prints "[a][b-c-d---]"

    dump(text.split("-", -1));
    // [a][b][c][d][][][]

}
</snippet></ROW><ROW><id>3100820</id><snippet>Matcher</snippet></ROW><ROW><id>3100820</id><snippet>substring</snippet></ROW><ROW><id>3100820</id><snippet>static String[] partition(String s, String regex) {
    Matcher m = Pattern.compile(regex).matcher(s);
    if (m.find()) {
        return new String[] {
            s.substring(0, m.start()),
            m.group(),
            s.substring(m.end()),
        };
    } else {
        throw new NoSuchElementException("Can't partition!");
    }
}
public static void main(String[] args) {
    dump(partition("james007bond111", "\\d+"));
    // prints "[james][007][bond111]"
}
</snippet></ROW><ROW><id>3100820</id><snippet>\d+</snippet></ROW><ROW><id>3100820</id><snippet>\d</snippet></ROW><ROW><id>3100820</id><snippet>+</snippet></ROW><ROW><id>3100918</id><snippet>__getattr__</snippet></ROW><ROW><id>3100918</id><snippet>self.module</snippet></ROW><ROW><id>3100918</id><snippet>self.string</snippet></ROW><ROW><id>3100918</id><snippet>self.string</snippet></ROW><ROW><id>3100918</id><snippet>import base64

class ModuledString(object):
    def __init__(self, string):
        self.string = string

    def __getattr__(self, attrname):
        def func(*args, **kwargs):
            result = getattr(self.module, attrname)(self.string, *args, **kwargs)
            self.string = result
            return result
        return func

    def __str__(self):
        return str(self.string)
</snippet></ROW><ROW><id>3100918</id><snippet>class B64String(ModuledString):
    module = base64

if __name__ == '__main__':
    string = B64String('Foo Bar')
    print string
    # 'Foo Bar'
    print string.b64encode()
    # 'Rm9vIEJhcg=='
    print string
    # 'Rm9vIEJhcg=='
    string.string = 'QmFyIEZvbw=='
    print string
    # 'QmFyIEZvbw=='
    print string.b64decode()
    # 'Bar Foo'
</snippet></ROW><ROW><id>3100918</id><snippet>b64encode</snippet></ROW><ROW><id>3100918</id><snippet>b64decode</snippet></ROW><ROW><id>3100918</id><snippet>__getattr__</snippet></ROW><ROW><id>3100933</id><snippet>&lt;</snippet></ROW><ROW><id>3100933</id><snippet>&gt;</snippet></ROW><ROW><id>3100933</id><snippet>import re
input_text = '&lt;a bob&gt;i &lt;b&gt;c&lt;/b&gt;&lt;/a&gt;'
output_text = re.sub('&lt;[^&gt;]*&gt;', '', input_text)
print output_text
</snippet></ROW><ROW><id>3100933</id><snippet>i c
</snippet></ROW><ROW><id>3100933</id><snippet>&lt;a name="b&gt;c"&gt;hey&lt;/a&gt;</snippet></ROW><ROW><id>3100933</id><snippet>&gt;</snippet></ROW><ROW><id>3101141</id><snippet>ua</snippet></ROW><ROW><id>3101141</id><snippet>ub</snippet></ROW><ROW><id>3101288</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.array([0,1,2,3])
y = np.array([20,21,22,23])
my_xticks = ['John','Arnold','Mavis','Matt']
plt.xticks(x, my_xticks)
plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>3101869</id><snippet>re.sub('\d+', lambda x:x.group().zfill(padding), s)
</snippet></ROW><ROW><id>3101869</id><snippet>&gt;&gt;&gt; s = "Flat 12A High Rise 101B"
&gt;&gt;&gt; padding = 5
&gt;&gt;&gt; re.sub('\d+', lambda x:x.group().zfill(padding), s)
'Flat 00012A High Rise 00101B'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3102083</id><snippet>&gt;&gt;&gt; print "C:\Program Files\AHSDK\bin\ahscript.dll"
C:\Program Files\AHSDinhscript.dll
</snippet></ROW><ROW><id>3102083</id><snippet>ctypes.WinDLL(r"C:\Program Files\AHSDK\bin\ahscript.dll")
</snippet></ROW><ROW><id>3102083</id><snippet>ctypes.WinDLL("C:\\Program Files\\AHSDK\\bin\\ahscript.dll")
</snippet></ROW><ROW><id>3102318</id><snippet>&gt;&gt;&gt; m = __import__('xml.sax')
&gt;&gt;&gt; m.__name__
'xml'
&gt;&gt;&gt; m = __import__('xml.sax', fromlist=[''])
&gt;&gt;&gt; m.__name__
'xml.sax'
</snippet></ROW><ROW><id>3102501</id><snippet>threading</snippet></ROW><ROW><id>3102501</id><snippet>thread</snippet></ROW><ROW><id>3102501</id><snippet>signal</snippet></ROW><ROW><id>3102501</id><snippet>pause()</snippet></ROW><ROW><id>3102501</id><snippet>import signal

RUN = True

def handle(a, b):
    global RUN
    print "handled"
    RUN = False

signal.signal(signal.SIGTERM, handle)
while RUN:
    signal.pause()
print "Stopping"
</snippet></ROW><ROW><id>3102548</id><snippet>destroy</snippet></ROW><ROW><id>3102548</id><snippet>gtk.main_quit()</snippet></ROW><ROW><id>3102548</id><snippet>def on_destroy(widget, user_data=None):
    # Exit the app
    gtk.main_quit()

window.connect('destroy', on_destroy)
</snippet></ROW><ROW><id>3102548</id><snippet>gtk.main()
</snippet></ROW><ROW><id>3102548</id><snippet>gtk.main_quit()</snippet></ROW><ROW><id>3102548</id><snippet>glib</snippet></ROW><ROW><id>3102548</id><snippet>gobject</snippet></ROW><ROW><id>3102548</id><snippet>.ui</snippet></ROW><ROW><id>3102665</id><snippet>comtypes</snippet></ROW><ROW><id>3102665</id><snippet>comtypes</snippet></ROW><ROW><id>3102665</id><snippet>from comtypes.client import CreateObject

access = CreateObject('Access.Application')

from comtypes.gen import Access

DBEngine = access.DBEngine
db = DBEngine.CreateDatabase('test.mdb', Access.DB_LANG_GENERAL)
      # For me, test.mdb was created in my My Documents folder when I ran the script 

db.BeginTrans()

db.Execute("CREATE TABLE test (ID Text, numapples Integer)")
db.Execute("INSERT INTO test VALUES ('ABC', 3)")

db.CommitTrans()
db.Close()
</snippet></ROW><ROW><id>3102665</id><snippet>CreateObject</snippet></ROW><ROW><id>3102887</id><snippet>def f():
    print "the reactor is running now"

reactor.callWhenRunning(f)
</snippet></ROW><ROW><id>3102887</id><snippet>callWhenRunning</snippet></ROW><ROW><id>3102887</id><snippet>reactor.callLater(0, f)
</snippet></ROW><ROW><id>3102887</id><snippet>callWhenRunning</snippet></ROW><ROW><id>3102887</id><snippet>reactor.addSystemEventTrigger('after', 'startup', f)
</snippet></ROW><ROW><id>3102887</id><snippet>twistd(1)</snippet></ROW><ROW><id>3102887</id><snippet>from twisted.application.service import Service

class ThingDoer(Service):
    def startService(self):
        print "The reactor is running now."
</snippet></ROW><ROW><id>3102887</id><snippet>from twisted.application.service import Application

from thatmodule import ThingDoer

application = Application("Do Things")
ThingDoer().setServiceParent(application)
</snippet></ROW><ROW><id>3102887</id><snippet>twistd(1)</snippet></ROW><ROW><id>3102887</id><snippet>$ twistd -ny thatfile.tac
</snippet></ROW><ROW><id>3102887</id><snippet>class CatChannel(channel.SSHChannel):
    name = 'session'

    def openFailed(self, reason):
        print 'echo failed', reason

    def channelOpen(self, ignoredData):
        self.data = ''
        d = self.conn.sendRequest(self, 'exec', common.NS('cat'), wantReply = 1)
        d.addCallback(self._cbRequest) 

    def _cbRequest(self, ignored):
        self.write('hello conch\n')
        self.conn.sendEOF(self)

    def dataReceived(self, data):
        self.data += data

    def closed(self):
        print 'got data from cat: %s' % repr(self.data)
        self.loseConnection()
        reactor.stop()
</snippet></ROW><ROW><id>3102887</id><snippet>channelOpen</snippet></ROW><ROW><id>3102887</id><snippet>Deferred</snippet></ROW><ROW><id>3102887</id><snippet>cat</snippet></ROW><ROW><id>3102887</id><snippet>_cbRequest</snippet></ROW><ROW><id>3102887</id><snippet>dataReceived</snippet></ROW><ROW><id>3102887</id><snippet>closed</snippet></ROW><ROW><id>3102887</id><snippet>closed</snippet></ROW><ROW><id>3103055</id><snippet>value = "peña"

value.encode("utf8")
</snippet></ROW><ROW><id>3103151</id><snippet> url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q= ' + urllib.quote_plus(query)
</snippet></ROW><ROW><id>3103224</id><snippet>platform</snippet></ROW><ROW><id>3103224</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.machine()
'x86'
&gt;&gt;&gt; platform.version()
'5.1.2600'
&gt;&gt;&gt; platform.platform()
'Windows-XP-5.1.2600-SP2'
&gt;&gt;&gt; platform.uname()
('Windows', 'name', 'XP', '5.1.2600', 'x86', 'x86 Family 6 Model 15 Stepping 6, GenuineIntel')
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.processor()
'x86 Family 6 Model 15 Stepping 6, GenuineIntel'
</snippet></ROW><ROW><id>3103394</id><snippet>import csv
r = csv.reader(open("data.csv"))
line1=r.next()
line2=r.next()
</snippet></ROW><ROW><id>3103492</id><snippet>someprop</snippet></ROW><ROW><id>3103492</id><snippet>o</snippet></ROW><ROW><id>3103492</id><snippet>SomeClass</snippet></ROW><ROW><id>3103492</id><snippet>SomeClass</snippet></ROW><ROW><id>3103492</id><snippet>o</snippet></ROW><ROW><id>3103492</id><snippet>__get__</snippet></ROW><ROW><id>3103492</id><snippet>Lazy</snippet></ROW><ROW><id>3103492</id><snippet>Lazy</snippet></ROW><ROW><id>3103492</id><snippet>__get__</snippet></ROW><ROW><id>3103492</id><snippet>    @Lazy
    def someprop(self):
       ...
</snippet></ROW><ROW><id>3103492</id><snippet>    def someprop(self):
       ...
    someprop = Lazy(someprop)
</snippet></ROW><ROW><id>3103492</id><snippet>Lazy</snippet></ROW><ROW><id>3103492</id><snippet>someprop</snippet></ROW><ROW><id>3103492</id><snippet>Lazy</snippet></ROW><ROW><id>3103492</id><snippet>__get__</snippet></ROW><ROW><id>3103492</id><snippet>someprop</snippet></ROW><ROW><id>3103492</id><snippet>o</snippet></ROW><ROW><id>3103492</id><snippet>SomeClass</snippet></ROW><ROW><id>3103926</id><snippet>from ctypes import CDLL, c_uint, c_char_p

class Flag(object):
    flags = [(0x1, 'fun'), (0x2, 'toy')]
    @classmethod
    def from_param(cls, data):
        return c_uint(encode_flags(self.flags, data))

libc = CDLL('libc.so.6')
printf = libc.printf
printf.argtypes = [c_char_p, Flag]

printf("hello %d\n", ["fun", "toy"])
</snippet></ROW><ROW><id>3104191</id><snippet>print tree["{}artist"]
</snippet></ROW><ROW><id>3104191</id><snippet>print tree.xpath("artist")
</snippet></ROW><ROW><id>3104540</id><snippet>wx.Frame</snippet></ROW><ROW><id>3104540</id><snippet>wx.Panel</snippet></ROW><ROW><id>3104540</id><snippet>def expanded(widget, padding=0):
    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(widget, 1, wx.EXPAND|wx.ALL, padding)
    return sizer

class Panel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.text = wx.StaticText(self, label='Panel 1')
        self.SetSizer(expanded(self.text))
</snippet></ROW><ROW><id>3104556</id><snippet>get()</snippet></ROW><ROW><id>3104556</id><snippet>result = &lt;Model Class&gt;.all().filter('&lt;column&gt; =', &lt;wanted value&gt;).get()
</snippet></ROW><ROW><id>3104558</id><snippet>class FieldUser(models.Model):
    field1 = models.IntegerField()
    field2 = models.CharField() #etc
    class Meta:
        abstract=True #abstract class does not create a db table

class RealUser(FieldUser, auth.User):
    pass #abstract nature is not inherited, will create its own table to go with the user table

class FakeUser(FieldUser):
    pass #again, will create its own table
</snippet></ROW><ROW><id>3104932</id><snippet>SELECT * FROM domain WHERE timestamp between '12:00' and '12:02'
</snippet></ROW><ROW><id>3104932</id><snippet>0.0000219907 + 0.0000000002 N^3
</snippet></ROW><ROW><id>3105232</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>3105232</id><snippet>dict</snippet></ROW><ROW><id>3105232</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; errors = collections.defaultdict(tuple)
&gt;&gt;&gt; errors['id'] += ('error1',)
&gt;&gt;&gt; errors['id'] += ('error2',)
&gt;&gt;&gt; errors['id']
('error1', 'error2')
</snippet></ROW><ROW><id>3105370</id><snippet>?</snippet></ROW><ROW><id>3105370</id><snippet>:name</snippet></ROW><ROW><id>3105370</id><snippet>self.cursor.execute(
  "select string from stringtable where string like ? and type = ?",
  ('%'+searchstr+'%', type))
</snippet></ROW><ROW><id>3105370</id><snippet>?</snippet></ROW><ROW><id>3105516</id><snippet>form = addlaundry()
</snippet></ROW><ROW><id>3105516</id><snippet>addlaundry</snippet></ROW><ROW><id>3105516</id><snippet>request</snippet></ROW><ROW><id>3105771</id><snippet>copytree</snippet></ROW><ROW><id>3105859</id><snippet># directly access the default handler and set its format directly
logging.getLogger().handlers[0].setFormatter(fr)
</snippet></ROW><ROW><id>3105859</id><snippet>handlers</snippet></ROW><ROW><id>3105859</id><snippet>logging</snippet></ROW><ROW><id>3105859</id><snippet>handlers</snippet></ROW><ROW><id>3106081</id><snippet>class_&lt;blpapi_Request_t&gt;;</snippet></ROW><ROW><id>3106081</id><snippet>class_&lt;blpapi_Request_t&gt;("blpapi_Request_t");
</snippet></ROW><ROW><id>3106123</id><snippet>import</snippet></ROW><ROW><id>3106123</id><snippet>boo.py</snippet></ROW><ROW><id>3106123</id><snippet>bar.py</snippet></ROW><ROW><id>3106123</id><snippet>import foo
import boo
import __builtin__
__builtin__.foo = foo
</snippet></ROW><ROW><id>3106123</id><snippet>foo</snippet></ROW><ROW><id>3106123</id><snippet>foo</snippet></ROW><ROW><id>3106123</id><snippet>boo.py</snippet></ROW><ROW><id>3106236</id><snippet>**kwargs</snippet></ROW><ROW><id>3106236</id><snippet>def foo(a=4, b=3):
    return a+b
def bar(func, *args, **kwargs):
    return func(*args, **kwargs)

print bar(foo, b=12) # prints 16
</snippet></ROW><ROW><id>3106236</id><snippet>*args</snippet></ROW><ROW><id>3106236</id><snippet>**kwargs</snippet></ROW><ROW><id>3106236</id><snippet>*args</snippet></ROW><ROW><id>3106236</id><snippet>**kwargs</snippet></ROW><ROW><id>3106236</id><snippet>*panda</snippet></ROW><ROW><id>3106236</id><snippet>**grilled_cheese</snippet></ROW><ROW><id>3106518</id><snippet>application/xml</snippet></ROW><ROW><id>3106518</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>3106518</id><snippet>req = urllib2.Request(url=url, 
                      data=xml_string, 
                      headers={'Content-Type': 'application/xml'})
urllib2.urlopen(req)
</snippet></ROW><ROW><id>3106539</id><snippet>v</snippet></ROW><ROW><id>3106539</id><snippet>Vector2D</snippet></ROW><ROW><id>3106539</id><snippet>float()</snippet></ROW><ROW><id>3106766</id><snippet># geetree.py
import xml.etree.ElementTree as ET

class GeeElem(object):
    """Wrapper around an ElementTree element. a['foo'] gets the
       attribute foo, a.foo gets the first subelement foo."""
    def __init__(self, elem):
        self.etElem = elem

    def __getitem__(self, name):
        res = self._getattr(name)
        if res is None:
            raise AttributeError, "No attribute named '%s'" % name
        return res

    def __getattr__(self, name):
        res = self._getelem(name)
        if res is None:
            raise IndexError, "No element named '%s'" % name
        return res

    def _getelem(self, name):
        res = self.etElem.find(name)
        if res is None:
            return None
        return GeeElem(res)

    def _getattr(self, name):
        return self.etElem.get(name)

class GeeTree(object):
    "Wrapper around an ElementTree."
    def __init__(self, fname):
        self.doc = ET.parse(fname)

    def __getattr__(self, name):
        if self.doc.getroot().tag != name:
            raise IndexError, "No element named '%s'" % name
        return GeeElem(self.doc.getroot())

    def getroot(self):
        return self.doc.getroot()
</snippet></ROW><ROW><id>3106766</id><snippet>&gt;&gt;&gt; import geetree
&gt;&gt;&gt; t = geetree.GeeTree('foo.xml')
&gt;&gt;&gt; t.xml_api_reply.weather.forecast_information.city['data']
'Mountain View, CA'
&gt;&gt;&gt; t.xml_api_reply.weather.current_conditions.temp_f['data']
'68'
</snippet></ROW><ROW><id>3107037</id><snippet>import web.views.home as views_list
urlpatterns = patterns('',
    (r'^$', 'web.views.home.index'),
    *[(r'^home/%s' % i, 'web.views.home.%s' % i) for i in dir(views_list)]
)
</snippet></ROW><ROW><id>3107159</id><snippet>" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
</snippet></ROW><ROW><id>3107169</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>3107169</id><snippet>sudo apt-get install python-m2crypto
</snippet></ROW><ROW><id>3107229</id><snippet>def levenshtein_distance(first, second):
    """Find the Levenshtein distance between two strings."""
    if len(first) &gt; len(second):
        first, second = second, first
    if len(second) == 0:
        return len(first)
    first_length = len(first) + 1
    second_length = len(second) + 1
    distance_matrix = [[0] * second_length for x in range(first_length)]
    for i in range(first_length):
       distance_matrix[i][0] = i
    for j in range(second_length):
       distance_matrix[0][j]=j
    for i in xrange(1, first_length):
        for j in range(1, second_length):
            deletion = distance_matrix[i-1][j] + 1
            insertion = distance_matrix[i][j-1] + 1
            substitution = distance_matrix[i-1][j-1]
            if first[i-1] != second[j-1]:
                substitution += 1
            distance_matrix[i][j] = min(insertion, deletion, substitution)
    return distance_matrix[first_length-1][second_length-1]

def percent_diff(first, second):
    return 100*levenshtein_distance(a, b) / float(max(len(a), len(b)))

a = "the quick brown fox"
b = "the quick vrown fox"
print '%.2f' % percent_diff(a, b)
</snippet></ROW><ROW><id>3107248</id><snippet>lambda: a_function(**kwargs)</snippet></ROW><ROW><id>3107248</id><snippet>kwargs</snippet></ROW><ROW><id>3107248</id><snippet>commands.append(lambda kwargs=kwargs: a_function(**kwargs))</snippet></ROW><ROW><id>3107252</id><snippet>&gt;&gt;&gt; class X(object):
...   def __str__(self): return 'str'
...   def __unicode__(self): return u'unicode'
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; print u'%s' % x
unicode
</snippet></ROW><ROW><id>3107349</id><snippet>[list(c.getiterator()) for c in contextlist]</snippet></ROW><ROW><id>3107349</id><snippet>c</snippet></ROW><ROW><id>3107349</id><snippet>[(c, list(c.getiterator())) for c in contextlist]</snippet></ROW><ROW><id>3107349</id><snippet>[x for x in whatever]</snippet></ROW><ROW><id>3107349</id><snippet>list(whatever)</snippet></ROW><ROW><id>3107534</id><snippet>form.data['field']</snippet></ROW><ROW><id>3107534</id><snippet>form.field.value</snippet></ROW><ROW><id>3107534</id><snippet>a</snippet></ROW><ROW><id>3107534</id><snippet>b</snippet></ROW><ROW><id>3107534</id><snippet>a</snippet></ROW><ROW><id>3107534</id><snippet>a</snippet></ROW><ROW><id>3107534</id><snippet>x.y</snippet></ROW><ROW><id>3107534</id><snippet>x</snippet></ROW><ROW><id>3107534</id><snippet>y</snippet></ROW><ROW><id>3107534</id><snippet>form.field</snippet></ROW><ROW><id>3107534</id><snippet>value</snippet></ROW><ROW><id>3107534</id><snippet>.value</snippet></ROW><ROW><id>3107534</id><snippet>class Form(object):
   ...
   def __getattr__(self, name):
       return self.data[name]
</snippet></ROW><ROW><id>3107534</id><snippet>class Form(object):
   ...
   @property
   def data(self):
       return self.__dict__
</snippet></ROW><ROW><id>3107534</id><snippet>.value</snippet></ROW><ROW><id>3107534</id><snippet>class KouWrap(object):
   def __init__(self, value):
       self.value = value

class Form(object):
   ...
   def __getattr__(self, name):
       return KouWrap(self.data[name])
</snippet></ROW><ROW><id>3107534</id><snippet>form.field.value = 23</snippet></ROW><ROW><id>3107534</id><snippet>form.data</snippet></ROW><ROW><id>3107534</id><snippet>class MciWrap(object):
   def __init__(self, data, k):
       self._data = data
       self._k = k
   @property
   def value(self):
       return self._data[self._k]
   @value.setter
   def value(self, v)
       self._data[self._k] = v

class Form(object):
   ...
   def __getattr__(self, name):
       return MciWrap(self.data, name)
</snippet></ROW><ROW><id>3107597</id><snippet>class MyControllerWithUserProperty(BaseController):

   def __before__(self, action, **params):
       # check the cookies
       # ...

       self.user = &lt;user object&gt;

       # set others properties
       # ...
</snippet></ROW><ROW><id>3107652</id><snippet>helpers</snippet></ROW><ROW><id>3107652</id><snippet>def tweets(**params):
   context = {}
   return render('tweets.mako', context)
</snippet></ROW><ROW><id>3107652</id><snippet>tweets widget</snippet></ROW><ROW><id>3107652</id><snippet>   h.tweets()
</snippet></ROW><ROW><id>3107741</id><snippet> &gt;&gt;&gt; export PYTHONPATH...
</snippet></ROW><ROW><id>3107741</id><snippet> $ export PYTHONPATH="$PYTHONPATH:/where/module/lives/"
 $ python
 Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56)
 &gt;&gt;&gt; import MySQLdb
 &gt;&gt;&gt;
</snippet></ROW><ROW><id>3107823</id><snippet>csv</snippet></ROW><ROW><id>3107823</id><snippet>import csv
reader = csv.reader(open(file, "rb"), dialect="excel") # Python 2.x
# Python 3: reader = csv.reader(open(file, newline=""), dialect="excel")
</snippet></ROW><ROW><id>3107823</id><snippet>reader</snippet></ROW><ROW><id>3107823</id><snippet>import csv
reader = csv.DictReader(open(file, "rb"), dialect="excel") # Python 2.x
# Python 3: reader = csv.DictReader(open(file, newline=""), dialect="excel")
</snippet></ROW><ROW><id>3107823</id><snippet>DictReader</snippet></ROW><ROW><id>3107823</id><snippet>dict</snippet></ROW><ROW><id>3107823</id><snippet>for row in reader:
    print(row)
</snippet></ROW><ROW><id>3107823</id><snippet>{'Name': 'Nick', 'Designation': 'F4321', 'Type': 'Subject', 'Total': '29', 'First-term assessment': '10', 'Second-term assessment': '19', 'Description': 'D1234'}
{'Name': 'HTML', 'Designation': 'F4321', 'Type': 'Unit', 'Total': '', 'First-term assessment': '18', 'Second-term assessment': '', 'Description': 'D1234-1'}
{'Name': 'Tags', 'Designation': 'F4321', 'Type': 'Topic', 'Total': '', 'First-term assessment': '18', 'Second-term assessment': '', 'Description': 'First Term'}
{'Name': 'Review of representation of HTML', 'Designation': '', 'Type': 'Subtopic', 'Total': '', 'First-term assessment': '', 'Second-term assessment': '', 'Description': ''}
</snippet></ROW><ROW><id>3108054</id><snippet>pyserial</snippet></ROW><ROW><id>3108054</id><snippet>ctypes</snippet></ROW><ROW><id>3108054</id><snippet>pyserial</snippet></ROW><ROW><id>3108056</id><snippet>php -a 
</snippet></ROW><ROW><id>3108056</id><snippet>&lt;?php echo 'Hello!'; ?&gt;
</snippet></ROW><ROW><id>3108076</id><snippet>u'9' &gt; u'10'</snippet></ROW><ROW><id>3108076</id><snippet>int</snippet></ROW><ROW><id>3108076</id><snippet>max(MyCount.keys(), key=int)
</snippet></ROW><ROW><id>3108229</id><snippet>tril</snippet></ROW><ROW><id>3108229</id><snippet>triu</snippet></ROW><ROW><id>3108229</id><snippet>identity</snippet></ROW><ROW><id>3108229</id><snippet>import numpy as np
A = np.array([[ 8. , -6. , 2. ], 
              [-0.5, 8. , -6. ], 
              [ 0.5, -0.5, 2. ]])

U = np.triu(A)

#[[ 8. -6.  2.]
# [-0.  8. -6.]
# [ 0. -0.  2.]]

L = np.tril(A, k=-1) + np.identity(3)

#[[ 1.   0.   0. ]
# [-0.5  1.   0. ]
# [ 0.5 -0.5  1. ]]
</snippet></ROW><ROW><id>3108244</id><snippet>ret = SSL_CTX_use_PrivateKey_file(self-&gt;ctx, key_file, SSL_FILETYPE_PEM);
</snippet></ROW><ROW><id>3108244</id><snippet>SSL_CTX_set_default_passwd_cb_userdata</snippet></ROW><ROW><id>3108244</id><snippet>from OpenSSL import SSL
ctx = SSL.Context(SSL.SSLv23_METHOD)
ctx.set_passwd_cb(lambda *unused: "yourpassword")
ctx.use_privatekey_file(keyFilename)
ctx.use_certificate_file(certFilename)
someSocket = SSL.Connection(ctx, socket.socket())
</snippet></ROW><ROW><id>3108272</id><snippet>$ su root python setup.py install
</snippet></ROW><ROW><id>3108301</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3108301</id><snippet>sys.path</snippet></ROW><ROW><id>3108301</id><snippet>sys.path.append('/path/to/whatever')
</snippet></ROW><ROW><id>3108301</id><snippet>sys.path</snippet></ROW><ROW><id>3108301</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3108301</id><snippet>:</snippet></ROW><ROW><id>3108301</id><snippet>;</snippet></ROW><ROW><id>3108301</id><snippet>site.addsitedir</snippet></ROW><ROW><id>3108301</id><snippet>.pth</snippet></ROW><ROW><id>3108301</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3108559</id><snippet>datetime.strptime</snippet></ROW><ROW><id>3108559</id><snippet>from datetime import datetime
d = datetime.strptime(s, '%B %d, %Y')
</snippet></ROW><ROW><id>3109118</id><snippet>exec "def f():\n " + " \n".join(code_string.splitlines()) + "\n" 
</snippet></ROW><ROW><id>3109270</id><snippet>type</snippet></ROW><ROW><id>3109270</id><snippet>class Section(models.Model):
    survey = models.ForeignKey(Survey)
    name = models.CharField(max_length=100)

    class Meta:
        abstract = True        # no db table created for this model

    def __unicode__(self):
        return self.name


class RatingSection(Section):
    pass

class MultiChoiceSection(Section):
    can_select_multiple = models.BooleanField()
</snippet></ROW><ROW><id>3109355</id><snippet>formfield_for_manytomany</snippet></ROW><ROW><id>3109355</id><snippet>django.contrib.admin.options</snippet></ROW><ROW><id>3109355</id><snippet>def formfield_for_manytomany(self, db_field, request=None, **kwargs):
    """
    Get a form Field for a ManyToManyField.
    """
    # If it uses an intermediary model that isn't auto created, don't show
    # a field in admin.
    if not db_field.rel.through._meta.auto_created:
        return None    # return something suitable for your needs here!
    db = kwargs.get('using')

    if db_field.name in self.raw_id_fields:
        kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.rel, using=db)
        kwargs['help_text'] = ''
    elif db_field.name in (list(self.filter_vertical) + list(self.filter_horizontal)):
        kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, (db_field.name in self.filter_vertical))
</snippet></ROW><ROW><id>3109481</id><snippet>matplotlib.pyplot.plot(raw_audio_data)
</snippet></ROW><ROW><id>3109576</id><snippet>PythonPath "['/path/to/my base dir']"
</snippet></ROW><ROW><id>3109590</id><snippet>PATH</snippet></ROW><ROW><id>3109758</id><snippet>{'key':value, ...}</snippet></ROW><ROW><id>3109758</id><snippet>k</snippet></ROW><ROW><id>3109758</id><snippet>v</snippet></ROW><ROW><id>3109867</id><snippet>parentNode.remove(childNode)</snippet></ROW><ROW><id>3109867</id><snippet>&gt;&gt;&gt; etree.tostring(tree)
'&lt;book&gt; &lt;bookname child="test"&gt;  &lt;text&gt; Works &lt;/text&gt;  &lt;text&gt; Doesnt work &lt;/text&gt;    &lt;/bookname&gt;&lt;/book&gt;'
&gt;&gt;&gt; bookname=tree[0]
&gt;&gt;&gt; text2=bookname[1]
&gt;&gt;&gt; bookname.remove(text2)
&gt;&gt;&gt; etree.tostring(tree)
'&lt;book&gt; &lt;bookname child="test"&gt;  &lt;text&gt; Works &lt;/text&gt;  &lt;/bookname&gt;&lt;/book&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3109992</id><snippet>pydoc</snippet></ROW><ROW><id>3109992</id><snippet>def getdocloc(self, object):
    """Return the location of module docs or None"""

    try:
        file = inspect.getabsfile(object)
    except TypeError:
        file = '(built-in)'

    docloc = os.environ.get("PYTHONDOCS",
                            "http://docs.python.org/library")
    basedir = os.path.join(sys.exec_prefix, "lib",
                           "python"+sys.version[0:3])
    if (isinstance(object, type(os)) and
        (object.__name__ in ('errno', 'exceptions', 'gc', 'imp',
                             'marshal', 'posix', 'signal', 'sys',
                             'thread', 'zipimport') or
         (file.startswith(basedir) and
          not file.startswith(os.path.join(basedir, 'site-packages'))))):
        if docloc.startswith("http://"):
            docloc = "%s/%s" % (docloc.rstrip("/"), object.__name__)
        else:
            docloc = os.path.join(docloc, object.__name__ + ".html")
    else:
        docloc = None
    return docloc
</snippet></ROW><ROW><id>3110094</id><snippet>&gt;&gt;&gt; names = "name:fred, name:wilma, name:barney, name2:gauss, name2:riemann"
&gt;&gt;&gt; pairs = [x.split(':') for x in names.split(", ")]
&gt;&gt;&gt; attrs = [x[1] for x in pairs if x[0]=='name']
&gt;&gt;&gt; attrs 
['fred', 'wilma', 'barney']
&gt;&gt;&gt; def is_name_attribute(x):
...     return x in attrs
...
&gt;&gt;&gt; is_name_attribute('fred')
True
&gt;&gt;&gt; is_name_attribute('gauss')
False
</snippet></ROW><ROW><id>3110164</id><snippet>name = u'\xe4\xf6\xfc'.encode('utf-8')
userInfo = [('Name', name)]
</snippet></ROW><ROW><id>3110218</id><snippet>{% if %}</snippet></ROW><ROW><id>3110218</id><snippet>{% else %}</snippet></ROW><ROW><id>3110218</id><snippet>firstof</snippet></ROW><ROW><id>3110218</id><snippet>{% firstof var1 var2 var3 %}
</snippet></ROW><ROW><id>3110640</id><snippet>object</snippet></ROW><ROW><id>3110670</id><snippet>__getitem__</snippet></ROW><ROW><id>3110875</id><snippet>for row in liststore:...</snippet></ROW><ROW><id>3110875</id><snippet>for col_value in row:...</snippet></ROW><ROW><id>3110875</id><snippet>row_n = 0
col_n = 2
liststore[row_n][col_n] = 'new value'
</snippet></ROW><ROW><id>3110875</id><snippet>gtk.TreeIter</snippet></ROW><ROW><id>3110875</id><snippet>row_iter</snippet></ROW><ROW><id>3110875</id><snippet>liststore.set_value(row_iter, col_n, 'new value')
</snippet></ROW><ROW><id>3110940</id><snippet>writelines</snippet></ROW><ROW><id>3110940</id><snippet>outputfile.writelines(sorted(data, key=len, reverse=True)[:3])
</snippet></ROW><ROW><id>3110940</id><snippet>open</snippet></ROW><ROW><id>3110940</id><snippet>do_something_with_input</snippet></ROW><ROW><id>3110940</id><snippet>inputfile</snippet></ROW><ROW><id>3110940</id><snippet>write_results</snippet></ROW><ROW><id>3110940</id><snippet>&gt;&gt;&gt; a = (i for i in range(2))
&gt;&gt;&gt; list(a)
[0, 1]
&gt;&gt;&gt; list(a)
[]
</snippet></ROW><ROW><id>3110940</id><snippet>sorted(...)</snippet></ROW><ROW><id>3111015</id><snippet>class DailyProgress(db.Model):
    date = db.DateTimeProperty(auto_now_add=True)
    score = db.IntegerProperty()
</snippet></ROW><ROW><id>3111024</id><snippet>curl</snippet></ROW><ROW><id>3111024</id><snippet>icy-name:</snippet></ROW><ROW><id>3111024</id><snippet>$ curl http://89.238.146.142:7030 | head -5
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 13191    0 13191    0     0  16013      0 --:--:-- --:--:-- --:--:-- 28516ICY 200 OK
icy-notice1:&lt;BR&gt;This stream requires &lt;a href="http://www.winamp.com/"&gt;Winamp&lt;/a&gt;&lt;BR&gt;
icy-notice2:SHOUTcast Distributed Network Audio Server/Linux v1.9.8&lt;BR&gt;
icy-name:Ibiza Global Radio
icy-genre:Electronic
100 33463    0 33463    0     0  30954      0 --:--:--  0:00:01 --:--:-- 46579
curl: (23) Failed writing body
$ 
</snippet></ROW><ROW><id>3111024</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://89.238.146.142:7030')
&gt;&gt;&gt; for i, line in enumerate(f):
...   if line.startswith('icy-name') or i &gt; 20: break
... 
&gt;&gt;&gt; if i &gt; 20: print 'failed to find station name'
... else: print 'station name is', line.replace('icy-name:', '')
... 
station name is Ibiza Global Radio

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3111024</id><snippet>.lower()</snippet></ROW><ROW><id>3111139</id><snippet>connectFtp</snippet></ROW><ROW><id>3111139</id><snippet>ftp</snippet></ROW><ROW><id>3111139</id><snippet>upload</snippet></ROW><ROW><id>3111139</id><snippet>return ftp</snippet></ROW><ROW><id>3111139</id><snippet>connectFtp</snippet></ROW><ROW><id>3111139</id><snippet>yield connectFtp</snippet></ROW><ROW><id>3111139</id><snippet>readList</snippet></ROW><ROW><id>3111139</id><snippet>for ftp in readList():</snippet></ROW><ROW><id>3111139</id><snippet>upload</snippet></ROW><ROW><id>3111386</id><snippet>dil.py</snippet></ROW><ROW><id>3111386</id><snippet>def make(percentmissing):
  global d
  d = dict.fromkeys(range(100-percentmissing), 1)

def addit(d, k):
  d[k] = k

def with_in():
  dc = d.copy()
  for k in range(100):
    if k not in dc:
      addit(dc, k)
    lc = dc[k]

def with_ex():
  dc = d.copy()
  for k in range(100):
    try: lc = dc[k]
    except KeyError:
      addit(dc, k)
      lc = dc[k]

def with_ge():
  dc = d.copy()
  for k in range(100):
    lc = dc.get(k)
    if lc is None:
      addit(dc, k)
      lc = dc[k]
</snippet></ROW><ROW><id>3111386</id><snippet>timeit</snippet></ROW><ROW><id>3111386</id><snippet>$ python -mtimeit -s'import dil; dil.make(10)' 'dil.with_in()'
10000 loops, best of 3: 28 usec per loop
$ python -mtimeit -s'import dil; dil.make(10)' 'dil.with_ex()'
10000 loops, best of 3: 41.7 usec per loop
$ python -mtimeit -s'import dil; dil.make(10)' 'dil.with_ge()'
10000 loops, best of 3: 46.6 usec per loop
</snippet></ROW><ROW><id>3111386</id><snippet>in</snippet></ROW><ROW><id>3111386</id><snippet>$ python -mtimeit -s'import dil; dil.make(1)' 'dil.with_in()'
10000 loops, best of 3: 24.6 usec per loop
$ python -mtimeit -s'import dil; dil.make(1)' 'dil.with_ex()'
10000 loops, best of 3: 23.4 usec per loop
$ python -mtimeit -s'import dil; dil.make(1)' 'dil.with_ge()'
10000 loops, best of 3: 42.7 usec per loop
</snippet></ROW><ROW><id>3111386</id><snippet>exception</snippet></ROW><ROW><id>3111386</id><snippet>get</snippet></ROW><ROW><id>3111386</id><snippet>in</snippet></ROW><ROW><id>3111386</id><snippet>class dd(dict):
   def __init__(self, *a, **k):
     dict.__init__(self, *a, **k)
   def __missing__(self, k):
     addit(self, k)
     return self[k]

def with_dd():
  dc = dd(d)
  for k in range(100):
    lc = dc[k]
</snippet></ROW><ROW><id>3111386</id><snippet>$ python -mtimeit -s'import dil; dil.make(1)' 'dil.with_dd()'
10000 loops, best of 3: 46.1 usec per loop
$ python -mtimeit -s'import dil; dil.make(10)' 'dil.with_dd()'
10000 loops, best of 3: 55 usec per loop
</snippet></ROW><ROW><id>3111386</id><snippet>get</snippet></ROW><ROW><id>3111386</id><snippet>defaultdict</snippet></ROW><ROW><id>3111386</id><snippet>dd</snippet></ROW><ROW><id>3111386</id><snippet>__missing__</snippet></ROW><ROW><id>3111656</id><snippet>RequestHandler.request.remote_ip</snippet></ROW><ROW><id>3111656</id><snippet>...
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write(repr(self.request))
...
</snippet></ROW><ROW><id>3111660</id><snippet>other</snippet></ROW><ROW><id>3111660</id><snippet>def __iadd__(self, other):
    self.h += other.h
    self.m += other.m
    self.s += other.s
</snippet></ROW><ROW><id>3111660</id><snippet>other</snippet></ROW><ROW><id>3111660</id><snippet>int</snippet></ROW><ROW><id>3111660</id><snippet>MyTime</snippet></ROW><ROW><id>3111660</id><snippet>isinstance</snippet></ROW><ROW><id>3111875</id><snippet>events = """\
1-hammer 
1-screwdriver 
1-nails 
2-hammer 
2-nails 
3-screws 
3-screwdriver 
4-nails 
4-screws""".splitlines()
events = sorted(map(str.strip,e.split('-')) for e in events)

from collections import defaultdict
from itertools import groupby

# tally each occurrence of each pair of items
summary = defaultdict(int)
for val,items in groupby(events, key=lambda x:x[0]):
    items = sorted(it[1] for it in items)
    for i,item1 in enumerate(items):
        for item2 in items[i+1:]:
            summary[(item1,item2)] += 1
            summary[(item2,item1)] += 1

# now convert raw pair counts into friendlier lookup table
pairmap = defaultdict(dict)
for k,v in summary.items():
    item1, item2 = k
    pairmap[item1][item2] = v

# print the results    
for k,v in sorted(pairmap.items()):
    print k,':',v
</snippet></ROW><ROW><id>3111875</id><snippet>hammer : {'nails': 2, 'screwdriver': 1}
nails : {'screws': 1, 'hammer': 2, 'screwdriver': 1}
screwdriver : {'screws': 1, 'nails': 1, 'hammer': 1}
screws : {'nails': 1, 'screwdriver': 1}
</snippet></ROW><ROW><id>3112178</id><snippet>assert</snippet></ROW><ROW><id>3112178</id><snippet>SyntaxWarning: assertion is always true, perhaps remove parentheses?</snippet></ROW><ROW><id>3112178</id><snippet>assert</snippet></ROW><ROW><id>3112178</id><snippet>True</snippet></ROW><ROW><id>3112178</id><snippet>assert True</snippet></ROW><ROW><id>3112178</id><snippet>assert(1==2, "hi")</snippet></ROW><ROW><id>3112311</id><snippet>cur.mogrify("SELECT * FROM foo WHERE foo.bar = %s", ("foo 'bar' \"baz",))
</snippet></ROW><ROW><id>3112485</id><snippet>urllib2</snippet></ROW><ROW><id>3112485</id><snippet>HTTPSConnection</snippet></ROW><ROW><id>3112485</id><snippet>httplib</snippet></ROW><ROW><id>3112485</id><snippet>urllib2</snippet></ROW><ROW><id>3112485</id><snippet>httplib</snippet></ROW><ROW><id>3112485</id><snippet>httplib</snippet></ROW><ROW><id>3112485</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>3112485</id><snippet>httplib</snippet></ROW><ROW><id>3112717</id><snippet>os.path.exists()</snippet></ROW><ROW><id>3112717</id><snippet>stat()</snippet></ROW><ROW><id>3113022</id><snippet>port = 80</snippet></ROW><ROW><id>3113214</id><snippet>open('c:\example2\media\uploads\test5.txt')</snippet></ROW><ROW><id>3113214</id><snippet>\t</snippet></ROW><ROW><id>3113214</id><snippet>&gt;&gt;&gt; path = 'c:\example2\media\uploads\test5.txt'
&gt;&gt;&gt; path
'c:\\example2\\media\\uploads\test5.txt'
</snippet></ROW><ROW><id>3113214</id><snippet>\t</snippet></ROW><ROW><id>3113214</id><snippet>&gt;&gt;&gt; path = r'c:\example2\media\uploads\test5.txt'
&gt;&gt;&gt; path
'c:\\example2\\media\\uploads\\test5.txt'
</snippet></ROW><ROW><id>3113214</id><snippet>&gt;&gt;&gt; path = 'c:\example2\media\uploads\test5.txt'
&gt;&gt;&gt; path.replace("\t","\\t")
'c:\\example2\\media\\uploads\\test5.txt'
</snippet></ROW><ROW><id>3113214</id><snippet>\b</snippet></ROW><ROW><id>3113214</id><snippet>\r</snippet></ROW><ROW><id>3113214</id><snippet>\n</snippet></ROW><ROW><id>3113411</id><snippet>-lgomp</snippet></ROW><ROW><id>3113627</id><snippet>import subprocess
print subprocess.__file__
</snippet></ROW><ROW><id>3113627</id><snippet>subprocess</snippet></ROW><ROW><id>3113948</id><snippet>std::exception</snippet></ROW><ROW><id>3113948</id><snippet>what()</snippet></ROW><ROW><id>3113948</id><snippet>try
{
    ...
}
catch (const std::exception &amp;exc)
{
    std::err &lt;&lt; exc.what() &lt;&lt; std::endl;
}
</snippet></ROW><ROW><id>3114029</id><snippet>False</snippet></ROW><ROW><id>3114029</id><snippet>0</snippet></ROW><ROW><id>3114029</id><snippet>[]</snippet></ROW><ROW><id>3114029</id><snippet>(,)</snippet></ROW><ROW><id>3114029</id><snippet>assert</snippet></ROW><ROW><id>3114156</id><snippet>locals()</snippet></ROW><ROW><id>3114156</id><snippet>#other_module.py
def some_func(lcls):
    print(lcls.x)
</snippet></ROW><ROW><id>3114156</id><snippet>&gt;&gt;&gt; import other_module
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; x = 'Hello World'
&gt;&gt;&gt; 
&gt;&gt;&gt; class MyLocals(object):
...     def __init__(self, lcls):
...             self.lcls = lcls
...     def __getattr__(self, name):
...             return self.lcls[name]
... 
&gt;&gt;&gt; # Call your function with an instance of this instead.
&gt;&gt;&gt; other_module.some_func(MyLocals(locals()))
'Hello World'
</snippet></ROW><ROW><id>3114185</id><snippet>self.selenium = selenium("localhost", 4444, "*chrome", "http://megagate-ffcdcb.xl_net.internal/")
</snippet></ROW><ROW><id>3114185</id><snippet>self.selenium = selenium("localhost", self.browser, self.port, "http://megagate-ffcdcb.xl_net.internal/")
</snippet></ROW><ROW><id>3114274</id><snippet>auth = None
for attrname in ['Author', 'Creator']:
    if hasattr(page.ItemAttributes, attrname):
        auth = getattr(page.ItemAttributes, attrname)
        break
</snippet></ROW><ROW><id>3114274</id><snippet>else</snippet></ROW><ROW><id>3114274</id><snippet>for</snippet></ROW><ROW><id>3114274</id><snippet>for attrname in ['Author', 'Creator']:
    if hasattr(page.ItemAttributes, attrname):
        auth = getattr(page.ItemAttributes, attrname)
        break
else:
    auth = None
</snippet></ROW><ROW><id>3114347</id><snippet>def my_method(self, objs=None):
    if objs is None:
        objs = get_objects()
    for obj in objs:
        do_something(obj)
</snippet></ROW><ROW><id>3114423</id><snippet>def has_elements(iter):
  from itertools import tee
  iter, any_check = tee(iter)
  try:
    any_check.next()
    return True, iter
  except StopIteration:
    return False, iter

has_el, iter = has_elements(iter)
if has_el:
  # not empty
</snippet></ROW><ROW><id>3114423</id><snippet>first = next(iter, None)
if first:
  # Do something
</snippet></ROW><ROW><id>3114549</id><snippet>def calculate_path(v1, v2):
  return [v1, ..., v2]

from SimpleXMLRPCServer import SimpleXMLRPCServer
server = SimpleXMLRPCServer(('localhost', 9393))
server.register_function(calculate_path)
server.serve_forever()
</snippet></ROW><ROW><id>3114549</id><snippet>calculate_path</snippet></ROW><ROW><id>3114929</id><snippet>import zipfile
from lxml import etree

def get_epub_info(fname):
    ns = {
        'n':'urn:oasis:names:tc:opendocument:xmlns:container',
        'pkg':'http://www.idpf.org/2007/opf',
        'dc':'http://purl.org/dc/elements/1.1/'
    }

    # prepare to read from the .epub file
    zip = zipfile.ZipFile(fname)

    # find the contents metafile
    txt = zip.read('META-INF/container.xml')
    tree = etree.fromstring(txt)
    cfname = tree.xpath('n:rootfiles/n:rootfile/@full-path',namespaces=ns)[0]

    # grab the metadata block from the contents metafile
    cf = zip.read(cfname)
    tree = etree.fromstring(cf)
    p = tree.xpath('/pkg:package/pkg:metadata',namespaces=ns)[0]

    # repackage the data
    res = {}
    for s in ['title','language','creator','date','identifier']:
        res[s] = p.xpath('dc:%s/text()'%(s),namespaces=ns)[0]

    return res
</snippet></ROW><ROW><id>3114929</id><snippet>{
    'date': '2009-12-26T17:03:31',
    'identifier': '25f96ff0-7004-4bb0-b1f2-d511ca4b2756',
    'creator': 'John Grisham',
    'language': 'UND',
    'title': 'Ford County'
}
</snippet></ROW><ROW><id>3115131</id><snippet>self</snippet></ROW><ROW><id>3115131</id><snippet>class Adapter:
    def __init__(self, side1, side2):
        self.side1 = side1
        self.side2 = side2

sideX = ('rca', 'm')
sideY = ('bnc', 'f')
x = Adapter(sideX, sideY)
</snippet></ROW><ROW><id>3115480</id><snippet>unique_together = (('content_type', 'object_id', 'key', 'user', 'ip_address'))
</snippet></ROW><ROW><id>3115548</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; f = open('a.html')
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(f)
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; g = open('a.xml', 'w')
&gt;&gt;&gt; print &gt;&gt; g, soup.prettify()
&gt;&gt;&gt; g.close()
</snippet></ROW><ROW><id>3115548</id><snippet>doctype</snippet></ROW><ROW><id>3115548</id><snippet>HTML</snippet></ROW><ROW><id>3115548</id><snippet>&gt;&gt;&gt; lines = soup.prettify().splitlines()
&gt;&gt;&gt; lines[0] = ('&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"'
                '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;')
&gt;&gt;&gt; print &gt;&gt; g, '\n'.join(lines)
</snippet></ROW><ROW><id>3115743</id><snippet>handleR = open(self.getInput(), 'rb')
handleW = open(self.getOutput(), 'wb')
</snippet></ROW><ROW><id>3115743</id><snippet>char = chr(int(byte, 2))
</snippet></ROW><ROW><id>3115743</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>3115743</id><snippet>|</snippet></ROW><ROW><id>3115743</id><snippet>handleW.write(bytes([char]))
</snippet></ROW><ROW><id>3115743</id><snippet>handleW.write(bytes([int(byte, 2)]))
</snippet></ROW><ROW><id>3115743</id><snippet>chr</snippet></ROW><ROW><id>3116495</id><snippet>print "hello World!"
</snippet></ROW><ROW><id>3116495</id><snippet>class HelloWorld {
  static public void main( String args[] ) {
    System.out.println( "Hello World!" );
  }
}
</snippet></ROW><ROW><id>3116502</id><snippet>f = open('boo.txt')
lines = [line for line in f]
f.close()
import random
selectedline = random.choice(lines)
print (selectedline)
</snippet></ROW><ROW><id>3116643</id><snippet>Authorization</snippet></ROW><ROW><id>3116643</id><snippet>import base64

class BasicAuthHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        scheme, _, token= self.request.headers.get('Authorization', '').partition(' ')
        if scheme.lower()=='basic':
            user, _, pwd= base64.decodestring(token).partition(':')
            # if pwd matches user:
                return user
        return None

    def get(self):
        if not self.get_current_user():
            self.set_status(401)
            self.set_header('WWW-Authenticate', 'basic realm="Example site"')
            # produce error/login page for user to see if they press escape to
            # cancel authorisation
            return
</snippet></ROW><ROW><id>3116685</id><snippet>k1 = 'k1'
k2 = 'k2'
v1 = 'v1'
v2 = 'v2'
l1 = [ {k1:v1} , {k2:v2}, {v1:k1} ]

kv = [e.items()[0] for e in l1]
print(kv)

vk = [(v, k) for (k, v) in kv]
print(vk)

result = [(k, v) for (k, v) in kv if (k, v) in vk]
print(result)
</snippet></ROW><ROW><id>3116689</id><snippet>lxml.html.parse</snippet></ROW><ROW><id>3116689</id><snippet>&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; from lxml.html import parse
&gt;&gt;&gt; page = urlopen('http://www.google.com')
&gt;&gt;&gt; p = parse(page)
&gt;&gt;&gt; p.getroot()
&lt;Element html at 1304050&gt;
</snippet></ROW><ROW><id>3116689</id><snippet>lxml.etree.parse</snippet></ROW><ROW><id>3117257</id><snippet>class WebSvc(models.Model):
    ...

    def _get_state():
        return self.cast().get_state()

    state = property(_get_state)
</snippet></ROW><ROW><id>3117257</id><snippet>class WebSvc(models.Model):
    ...
    def __init__(*args, **kwargs):
        super(WebSvc, self).__init__(*args,**kwargs)
        self.state = self.caste().get_state()
</snippet></ROW><ROW><id>3117433</id><snippet>selenium = selenium("localhost", 4444, "*chrome", "http://localhost:8000/")
selenium.sessionId = "0asdd234234023424foo" #Get this from the Se window
</snippet></ROW><ROW><id>3117433</id><snippet>selenium.click()</snippet></ROW><ROW><id>3117433</id><snippet>selenium.get_eval('...js...')</snippet></ROW><ROW><id>3117433</id><snippet>click()</snippet></ROW><ROW><id>3117433</id><snippet>selenium.click('blah_tab_locator')</snippet></ROW><ROW><id>3117433</id><snippet>sleep()</snippet></ROW><ROW><id>3118051</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3118051</id><snippet>sys.path</snippet></ROW><ROW><id>3118051</id><snippet>~/python/project1
~/python/project2
~/python/libs/stuff.py
~/python/libs/other.py
</snippet></ROW><ROW><id>3118051</id><snippet>PYTHONPATH='~/python/libs'</snippet></ROW><ROW><id>3118051</id><snippet>import sys, os
sys.path.append(os.path.expanduser('~/python/libs')) # or give the full path
</snippet></ROW><ROW><id>3118051</id><snippet>import stuff, other</snippet></ROW><ROW><id>3118051</id><snippet>~/python/project1
~/python/project2
~/python/libs/mylibname/__init__.py
~/python/libs/mylibname/stuff.py
~/python/libs/mylibname/other.py
</snippet></ROW><ROW><id>3118051</id><snippet>~/python/libs/mylibname/__init__.py</snippet></ROW><ROW><id>3118051</id><snippet>mylibname</snippet></ROW><ROW><id>3118051</id><snippet>from mylibname import stuff, other</snippet></ROW><ROW><id>3118532</id><snippet>add()</snippet></ROW><ROW><id>3118532</id><snippet>arcname</snippet></ROW><ROW><id>3118532</id><snippet>tar.add("/home/user/bla/mydir/", arcname="mydir")
</snippet></ROW><ROW><id>3118534</id><snippet>class foo(Structure):
    _fields_=[("i",c_int),
              ("b1",POINTER(c_int)),
              ("w1",POINTER(c_float))]
</snippet></ROW><ROW><id>3118534</id><snippet>myfoo.w1[5]</snippet></ROW><ROW><id>3118534</id><snippet>w1</snippet></ROW><ROW><id>3118534</id><snippet>float *w1</snippet></ROW><ROW><id>3118534</id><snippet>myfoo-&gt;w1[5]</snippet></ROW><ROW><id>3118550</id><snippet>workdir = '/Volumes/place/sub place'

def myFunc(_, dir, flist):
    for f in flist:
        fpath = os.path.join(dir, f) # need to make a full path first
        print f, fpath, os.path.isfile(fpath)

os.path.walk(workdir,myFunc,None)
</snippet></ROW><ROW><id>3118550</id><snippet>os.walk</snippet></ROW><ROW><id>3118573</id><snippet>-m</snippet></ROW><ROW><id>3118573</id><snippet>nosetests</snippet></ROW><ROW><id>3118573</id><snippet>-m</snippet></ROW><ROW><id>3118573</id><snippet>testMatch</snippet></ROW><ROW><id>3118573</id><snippet>__test__ = False</snippet></ROW><ROW><id>3119031</id><snippet>__getattr__</snippet></ROW><ROW><id>3119031</id><snippet>class foo(object):
    def f1(self):
        print "original f1"
    def f2(self):
        print "original f2"

class foo_decorator(object):
    def __init__(self, decoratee):
        self._decoratee = decoratee
    def f1(self):
        print "decorated f1"
        self._decoratee.f1()
    def __getattr__(self, name):
        return getattr(self._decoratee, name)

u = foo()
v = foo_decorator(u)
v.f1()
v.f2()
</snippet></ROW><ROW><id>3119212</id><snippet>#XXX
</snippet></ROW><ROW><id>3119430</id><snippet>num_format_str</snippet></ROW><ROW><id>3119430</id><snippet>XFStyle</snippet></ROW><ROW><id>3119430</id><snippet>import xlwt

# d can also be a datetime object
d = 40299.2501157407

wb = xlwt.Workbook()
sheet = wb.add_sheet('new')

style = xlwt.XFStyle()
style.num_format_str = 'DD-MM-YYYY'

sheet.write(5, 5, d, style)
wb.save('test_new.xls')
</snippet></ROW><ROW><id>3119544</id><snippet>""" invdisttree.py: inverse-distance-weighted interpolation using KDTree
    fast, solid, local
"""
from __future__ import division
import numpy as np
from scipy.spatial import cKDTree as KDTree
    # http://docs.scipy.org/doc/scipy/reference/spatial.html

__date__ = "2010-11-09 Nov"  # weights, doc

#...............................................................................
class Invdisttree:
    """ inverse-distance-weighted interpolation using KDTree:
invdisttree = Invdisttree( X, z )  -- data points, values
interpol = invdisttree( q, nnear=3, eps=0, p=1, weights=None, stat=0 )
    interpolates z from the 3 points nearest each query point q;
    For example, interpol[ a query point q ]
    finds the 3 data points nearest q, at distances d1 d2 d3
    and returns the IDW average of the values z1 z2 z3
        (z1/d1 + z2/d2 + z3/d3)
        / (1/d1 + 1/d2 + 1/d3)
        = .55 z1 + .27 z2 + .18 z3  for distances 1 2 3

    q may be one point, or a batch of points.
    eps: approximate nearest, dist &lt;= (1 + eps) * true nearest
    p: use 1 / distance**p
    weights: optional multipliers for 1 / distance**p, of the same shape as q
    stat: accumulate wsum, wn for average weights

How many nearest neighbors should one take ?
a) start with 8 11 14 .. 28 in 2d 3d 4d .. 10d; see Wendel's formula
b) make 3 runs with nnear= e.g. 6 8 10, and look at the results --
    |interpol 6 - interpol 8| etc., or |f - interpol*| if you have f(q).
    I find that runtimes don't increase much at all with nnear -- ymmv.

p=1, p=2 ?
    p=2 weights nearer points more, farther points less.
    In 2d, the circles around query points have areas ~ distance**2,
    so p=2 is inverse-area weighting. For example,
        (z1/area1 + z2/area2 + z3/area3)
        / (1/area1 + 1/area2 + 1/area3)
        = .74 z1 + .18 z2 + .08 z3  for distances 1 2 3
    Similarly, in 3d, p=3 is inverse-volume weighting.

Scaling:
    if different X coordinates measure different things, Euclidean distance
    can be way off.  For example, if X0 is in the range 0 to 1
    but X1 0 to 1000, the X1 distances will swamp X0;
    rescale the data, i.e. make X0.std() ~= X1.std() .

A nice property of IDW is that it's scale-free around query points:
if I have values z1 z2 z3 from 3 points at distances d1 d2 d3,
the IDW average
    (z1/d1 + z2/d2 + z3/d3)
    / (1/d1 + 1/d2 + 1/d3)
is the same for distances 1 2 3, or 10 20 30 -- only the ratios matter.
In contrast, the commonly-used Gaussian kernel exp( - (distance/h)**2 )
is exceedingly sensitive to distance and to h.

    """
# anykernel( dj / av dj ) is also scale-free
# error analysis, |f(x) - idw(x)| ? todo: regular grid, nnear ndim+1, 2*ndim

    def __init__( self, X, z, leafsize=10, stat=0 ):
        assert len(X) == len(z), "len(X) %d != len(z) %d" % (len(X), len(z))
        self.tree = KDTree( X, leafsize=leafsize )  # build the tree
        self.z = z
        self.stat = stat
        self.wn = 0
        self.wsum = None;

    def __call__( self, q, nnear=6, eps=0, p=1, weights=None ):
            # nnear nearest neighbours of each query point --
        q = np.asarray(q)
        qdim = q.ndim
        if qdim == 1:
            q = np.array([q])
        if self.wsum is None:
            self.wsum = np.zeros(nnear)

        self.distances, self.ix = self.tree.query( q, k=nnear, eps=eps )
        interpol = np.zeros( (len(self.distances),) + np.shape(self.z[0]) )
        jinterpol = 0
        for dist, ix in zip( self.distances, self.ix ):
            if nnear == 1:
                wz = self.z[ix]
            elif dist[0] &lt; 1e-10:
                wz = self.z[ix[0]]
            else:  # weight z s by 1/dist --
                w = 1 / dist**p
                if weights is not None:
                    w *= weights[ix]  # &gt;= 0
                w /= np.sum(w)
                wz = np.dot( w, self.z[ix] )
                if self.stat:
                    self.wn += 1
                    self.wsum += w
            interpol[jinterpol] = wz
            jinterpol += 1
        return interpol if qdim &gt; 1  else interpol[0]

#...............................................................................
if __name__ == "__main__":
    import sys

    N = 10000
    Ndim = 2
    Nask = N  # N Nask 1e5: 24 sec 2d, 27 sec 3d on mac g4 ppc
    Nnear = 8  # 8 2d, 11 3d =&gt; 5 % chance one-sided -- Wendel, mathoverflow.com
    leafsize = 10
    eps = .1  # approximate nearest, dist &lt;= (1 + eps) * true nearest
    p = 1  # weights ~ 1 / distance**p
    cycle = .25
    seed = 1

    exec "\n".join( sys.argv[1:] )  # python this.py N= ...
    np.random.seed(seed )
    np.set_printoptions( 3, threshold=100, suppress=True )  # .3f

    print "\nInvdisttree:  N %d  Ndim %d  Nask %d  Nnear %d  leafsize %d  eps %.2g  p %.2g" % (
        N, Ndim, Nask, Nnear, leafsize, eps, p)

    def terrain(x):
        """ ~ rolling hills """
        return np.sin( (2*np.pi / cycle) * np.mean( x, axis=-1 ))

    known = np.random.uniform( size=(N,Ndim) ) ** .5  # 1/(p+1): density x^p
    z = terrain( known )
    ask = np.random.uniform( size=(Nask,Ndim) )

#...............................................................................
    invdisttree = Invdisttree( known, z, leafsize=leafsize, stat=1 )
    interpol = invdisttree( ask, nnear=Nnear, eps=eps, p=p )

    print "average distances to nearest points: %s" % \
        np.mean( invdisttree.distances, axis=0 )
    print "average weights: %s" % (invdisttree.wsum / invdisttree.wn)
        # see Wikipedia Zipf's law
    err = np.abs( terrain(ask) - interpol )
    print "average |terrain() - interpolated|: %.2g" % np.mean(err)

    # print "interpolate a single point: %.2g" % \
    #     invdisttree( known[0], nnear=Nnear, eps=eps )
</snippet></ROW><ROW><id>3119921</id><snippet>matrix[:]</snippet></ROW><ROW><id>3119921</id><snippet>a = [[4]]
b = a[:]
a[0].append(5)
print b[0] # Outputs [4, 5], as a[0] and b[0] point to the same array
</snippet></ROW><ROW><id>3119921</id><snippet>a</snippet></ROW><ROW><id>3119921</id><snippet>deepcopy()</snippet></ROW><ROW><id>3119921</id><snippet>a = [[4]]
c = copy.deepcopy(a)
a[0].append(5)
print c[0] # Outputs [4], as c[0] is a copy of the elements of a[0] into a new array
</snippet></ROW><ROW><id>3119921</id><snippet>return final.append(li)</snippet></ROW><ROW><id>3119921</id><snippet>append</snippet></ROW><ROW><id>3119921</id><snippet>final</snippet></ROW><ROW><id>3119921</id><snippet>None</snippet></ROW><ROW><id>3120117</id><snippet>_cache = {}

def get_page_type(type_name):
    if type_name not in _cache:
        _cache[type_name] = PageType.objects.get(type=type_name)
    return _cache[type_name]
</snippet></ROW><ROW><id>3120117</id><snippet>get_page_type('Main')</snippet></ROW><ROW><id>3120219</id><snippet>.encode('iso-8859-1') 
</snippet></ROW><ROW><id>3120219</id><snippet>.decode('iso-8859-1')
</snippet></ROW><ROW><id>3120485</id><snippet>text = 'some spaces variable = 7 = ...'
if '=' in text:
    chunks = text.split('=')
    assignedval = chunks[1]#second value, 7
    print 'assigned value is', assignedval
else:
    print 'no assignment in line'
</snippet></ROW><ROW><id>3120508</id><snippet>re.findall</snippet></ROW><ROW><id>3120508</id><snippet>r"cup|bike|run"</snippet></ROW><ROW><id>3120508</id><snippet>"|".join(wordlist)</snippet></ROW><ROW><id>3120508</id><snippet>re.findall</snippet></ROW><ROW><id>3120508</id><snippet>r"\b(cup|bike|run)\b"</snippet></ROW><ROW><id>3120602</id><snippet>NSMutableHTTPURLRequest</snippet></ROW><ROW><id>3120602</id><snippet>NSMutableURLRequest</snippet></ROW><ROW><id>3120602</id><snippet>NSURLConnection</snippet></ROW><ROW><id>3120602</id><snippet>NSHTTPCookieStorage</snippet></ROW><ROW><id>3120602</id><snippet>NSHTTPCookie</snippet></ROW><ROW><id>3120602</id><snippet>urlopen</snippet></ROW><ROW><id>3120602</id><snippet>CFReadStreamCreateForHTTPRequest</snippet></ROW><ROW><id>3120633</id><snippet>ftplib</snippet></ROW><ROW><id>3120633</id><snippet>ftplib</snippet></ROW><ROW><id>3120633</id><snippet>ftplib</snippet></ROW><ROW><id>3120633</id><snippet>ftplib</snippet></ROW><ROW><id>3120633</id><snippet>ftplib</snippet></ROW><ROW><id>3120650</id><snippet>__new__</snippet></ROW><ROW><id>3120650</id><snippet>class MySet(frozenset):

    def __new__(cls, *args):
        if args and isinstance (args[0], basestring):
            args = (args[0].split (),) + args[1:]
        return super (MySet, cls).__new__(cls, *args)

print MySet ('foo bar baz')
</snippet></ROW><ROW><id>3120650</id><snippet>MySet(['baz', 'foo', 'bar'])
</snippet></ROW><ROW><id>3120769</id><snippet>ProgramViewHandler.get()</snippet></ROW><ROW><id>3120769</id><snippet>slug</snippet></ROW><ROW><id>3120769</id><snippet>main.py</snippet></ROW><ROW><id>3120769</id><snippet>application = webapp.WSGIApplication([(r'/(.*)', ProgramViewHandler)])
</snippet></ROW><ROW><id>3120769</id><snippet>ProgramViewHandler.get()</snippet></ROW><ROW><id>3120769</id><snippet>slug</snippet></ROW><ROW><id>3120864</id><snippet>django-admin.py makemessages -l zh_CN</snippet></ROW><ROW><id>3120864</id><snippet>django-admin.py makemessages -l zh-CN</snippet></ROW><ROW><id>3120864</id><snippet>zh_CN</snippet></ROW><ROW><id>3120864</id><snippet>zh-CN</snippet></ROW><ROW><id>3121298</id><snippet>Term | Doc1 | Doc2
Foo     .3     .7
Bar  |  0   |  8
Baz  |  1   |  1
</snippet></ROW><ROW><id>3121311</id><snippet>urlencode</snippet></ROW><ROW><id>3121311</id><snippet>str</snippet></ROW><ROW><id>3121311</id><snippet>mp3_data = {'album': u'Metamorphine',
     'group': 'monoku',
     'name': u'Son Of Venus (Danny\xb4s Song)',
     'artist': u'Leandra',
     'checksum': '2836e33d42baf947e8c8adef48921f2f76fcb37eea9c50b0b59d7651',
     'track_number': 8,
     'year': '2008', 'genre': 'Darkwave',
     'path': u'/media/data/musik/Leandra/2008. Metamorphine/08. Son Of Venus (Danny\xb4s Song).mp3',
     'user_email': 'diegueus9@gmail.com',
     'size': 6624104}

str_mp3_data = {}
for k, v in mp3_data.iteritems():
    str_mp3_data[k] = unicode(v).encode('utf-8')
data = urllib.urlencode(str_mp3_data)
</snippet></ROW><ROW><id>3121311</id><snippet>str</snippet></ROW><ROW><id>3121311</id><snippet>urlencode</snippet></ROW><ROW><id>3121357</id><snippet>key_name</snippet></ROW><ROW><id>3121357</id><snippet>key_name</snippet></ROW><ROW><id>3121357</id><snippet>key_name</snippet></ROW><ROW><id>3121357</id><snippet>Comment</snippet></ROW><ROW><id>3121398</id><snippet>AddHandler fcgid-script .fcgi
AddHandler application/x-httpd-php5s .php
# For security reasons, Option followsymlinks cannot be overridden.
#Options +FollowSymLinks
Options +SymLinksIfOwnerMatch
RewriteEngine On
RewriteBase /
RewriteRule ^(subfolder/.*)$ - [L]
RewriteRule ^(media/.*)$ - [L]
RewriteRule ^(django\.fcgi/.*)$ - [L]
RewriteRule ^(.*)$ django.fcgi/$1 [L]
</snippet></ROW><ROW><id>3121406</id><snippet>numpy</snippet></ROW><ROW><id>3121406</id><snippet>loadtxt</snippet></ROW><ROW><id>3121406</id><snippet>savetxt</snippet></ROW><ROW><id>3121406</id><snippet>numpy</snippet></ROW><ROW><id>3121659</id><snippet>cwd</snippet></ROW><ROW><id>3121659</id><snippet>-C</snippet></ROW><ROW><id>3121659</id><snippet>make -C ../dir1/dir2/dir3/make
</snippet></ROW><ROW><id>3121659</id><snippet>-C / -C etc</snippet></ROW><ROW><id>3121659</id><snippet>-C /etc</snippet></ROW><ROW><id>3121710</id><snippet>2.X</snippet></ROW><ROW><id>3121710</id><snippet>3.X</snippet></ROW><ROW><id>3121710</id><snippet>2.X</snippet></ROW><ROW><id>3121710</id><snippet>3.x</snippet></ROW><ROW><id>3121710</id><snippet>print</snippet></ROW><ROW><id>3121710</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>3121723</id><snippet>def messageCB(sess,mess):
    print 'MESSAGE'*100
    nick=mess.getFrom().getResource()
    text=mess.getBody()
    #print mess,nick
    print text

client.RegisterHandler('message',messageCB)

while 1:
    client.Process(1)
</snippet></ROW><ROW><id>3121985</id><snippet>sorted_by_second = sorted(data, key=lambda tup: tup[1])
</snippet></ROW><ROW><id>3121985</id><snippet>data.sort(key=lambda tup: tup[1])  // sorts in place
</snippet></ROW><ROW><id>3122147</id><snippet>with open("filename.txt", 'r') as f:
    data = [map(int, line.split()) for line in f]
</snippet></ROW><ROW><id>3122147</id><snippet>with</snippet></ROW><ROW><id>3122147</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>3122195</id><snippet>gzip</snippet></ROW><ROW><id>3122195</id><snippet>import gzip
f = gzip.open('/home/joe/file.txt.gz', 'rb')
file_content = f.read()
f.close()
</snippet></ROW><ROW><id>3122216</id><snippet>csv</snippet></ROW><ROW><id>3122216</id><snippet>Reader</snippet></ROW><ROW><id>3122216</id><snippet>csv.reader()</snippet></ROW><ROW><id>3122216</id><snippet>next()</snippet></ROW><ROW><id>3122216</id><snippet>for</snippet></ROW><ROW><id>3122216</id><snippet>r = csv.reader(...)
headers = r.next()
for fields in r:
    # do stuff
</snippet></ROW><ROW><id>3122216</id><snippet>DictReader</snippet></ROW><ROW><id>3122238</id><snippet>[address.strip() for address in intext if address.strip()]</snippet></ROW><ROW><id>3122397</id><snippet>except:</snippet></ROW><ROW><id>3122397</id><snippet>except:</snippet></ROW><ROW><id>3122397</id><snippet>return</snippet></ROW><ROW><id>3122397</id><snippet>print(...)</snippet></ROW><ROW><id>3122397</id><snippet>copy()</snippet></ROW><ROW><id>3122502</id><snippet>       if w.startswith(node[0][:wlen-i],i):
            if wlen - i &gt; len(node[0]):
                i += len(node[0])
                d = node[1]
            return True
</snippet></ROW><ROW><id>3122502</id><snippet>       if w.startswith(node[0][:wlen-i],i):
            if wlen - i &gt; len(node[0]):
                i += len(node[0])
                d = node[1]
            else:
                return True
</snippet></ROW><ROW><id>3122521</id><snippet>glob</snippet></ROW><ROW><id>3122521</id><snippet>import glob
for f in glob.glob("*.f"):
    print f
</snippet></ROW><ROW><id>3122558</id><snippet>$ ./jython
Jython 2.2.1 on java1.6.0_17
Type "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://www.python.org/')
&gt;&gt;&gt; print f.read(100)
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtm
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3122558</id><snippet>&lt;JYTHON_HOME&gt;/lib
</snippet></ROW><ROW><id>3122558</id><snippet>&lt;MEANDRE_HOME&gt;/run/Jython/Lib
</snippet></ROW><ROW><id>3122575</id><snippet>import collections

def hasher():
  return collections.defaultdict(hasher)

hash = hasher()
hash['element1']['sub1']['subsub1'] = 'value1'
if 'subsub1' in hash['element1']['sub1']:
  print 'found value'
</snippet></ROW><ROW><id>3122650</id><snippet>from package import module</snippet></ROW><ROW><id>3122650</id><snippet>package/module.py</snippet></ROW><ROW><id>3122650</id><snippet>package/__init__.py</snippet></ROW><ROW><id>3122650</id><snippet>'module'</snippet></ROW><ROW><id>3122650</id><snippet>dir(package)</snippet></ROW><ROW><id>3122650</id><snippet>'module'</snippet></ROW><ROW><id>3122650</id><snippet>dir</snippet></ROW><ROW><id>3122650</id><snippet>dir</snippet></ROW><ROW><id>3122785</id><snippet>CC='/usr/bin/gcc-4.0' python2.5 setup.py build
</snippet></ROW><ROW><id>3123323</id><snippet>from django.contrib.admin.models import LogEntry

class LogEntryAdmin(admin.ModelAdmin):
    readonly_fields = ('content_type', 'user', 'action_time')

admin.site.register(LogEntry, LogEntryAdmin)
</snippet></ROW><ROW><id>3123398</id><snippet>c = (x &gt;&gt; 8) &amp; 0xff
f = x &amp; 0xff
</snippet></ROW><ROW><id>3123398</id><snippet>&gt;&gt;&gt; (10303 &gt;&gt; 8) &amp;0xff
40
&gt;&gt;&gt; (1030333333 &gt;&gt; 8) &amp;0xff
163
&gt;&gt;&gt; (1030333333 &gt;&gt; 8) 
4024739
</snippet></ROW><ROW><id>3123411</id><snippet>/home/user/test/foo/foo.py
</snippet></ROW><ROW><id>3123411</id><snippet>/home/user&gt; python test/foo/foo.py
</snippet></ROW><ROW><id>3123411</id><snippet>/home/user</snippet></ROW><ROW><id>3123411</id><snippet>import os

def script_dir():
    return os.path.dirname(os.path.realpath(__file__))
</snippet></ROW><ROW><id>3123722</id><snippet>urlpatterns += patterns('myapp.views',

    url(r'^getstuff/$', 'getstuff' ),
)
</snippet></ROW><ROW><id>3123722</id><snippet>def getstuff(request):

   do whatever in python

   return HttpResponse(stuff to return)
</snippet></ROW><ROW><id>3123883</id><snippet>import logging
log = logging.getLogger(__name__)
log.debug('hello world')
</snippet></ROW><ROW><id>3123964</id><snippet>POST</snippet></ROW><ROW><id>3123964</id><snippet>QueryDict</snippet></ROW><ROW><id>3123964</id><snippet>service = request.POST.getlist('service')
</snippet></ROW><ROW><id>3124223</id><snippet>class Cliente(models.Model):
    """This is the client data model, it holds all client information. This
       docstring has to be improved."""
    def number():
        no = Cliente.objects.count()
        if no == None:
            return 1
        else:
            return no + 1

    clientcode = models.IntegerField(_('Code'), max_length=6, unique=True, \
    default=number)

    [... here goes the rest of your model ...]
</snippet></ROW><ROW><id>3124223</id><snippet>number</snippet></ROW><ROW><id>3124223</id><snippet>clientcode</snippet></ROW><ROW><id>3124223</id><snippet>clientcode</snippet></ROW><ROW><id>3124633</id><snippet>soup = BeautifulSoup("""
&lt;p class='animal'&gt;cats&lt;/p&gt;
&lt;p class='attribute'&gt;they meow&lt;/p&gt;
&lt;p class='attribute'&gt;they have fur&lt;/p&gt;
&lt;p class='animal'&gt;turtles&lt;/p&gt;
&lt;p class='attribute'&gt;they don't make noises&lt;/p&gt;
&lt;p class='attribute'&gt;they have shells&lt;/p&gt;
""")

animals = []
attributes = {}

for p in soup.findAll('p'):
    if (p['class'] == 'animal'):
        animals.append(p.string)
    elif (p['class'] == 'attribute'):
        if animals[-1] not in attributes.keys():
            attributes[animals[-1]] = [p.string]
        else:
            attributes[animals[-1]].append(p.string)

print animals
print attributes
</snippet></ROW><ROW><id>3125001</id><snippet>from django.db.models import Count
School.objects.filter(student__type='ug').annotate(
                      num_students=Count('student')
                     ).order_by('num_students')
</snippet></ROW><ROW><id>3125001</id><snippet>aggregate</snippet></ROW><ROW><id>3125001</id><snippet>filter</snippet></ROW><ROW><id>3125209</id><snippet>__future__</snippet></ROW><ROW><id>3125209</id><snippet>print val1 / (val2 + 0.0)
print (val1 + 0.0) / val2
print float(val1) / val2
print val1 / float(val2)
</snippet></ROW><ROW><id>3125289</id><snippet>ser = serial.Serial(3,115200,timeout=1)
ser.read()
#or ser.write("whatever")

Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    ser.read(1)
  File "build\bdist.win-amd64\egg\serial\serialwin32.py", line 236, in read
    raise SerialException("ReadFile failed (%s)" % ctypes.WinError())
SerialException: ReadFile failed ([Error 6] The handle is invalid.)
</snippet></ROW><ROW><id>3125289</id><snippet>def write(self, data):
        """Output the given string over the serial port."""
        if not self.hComPort: raise portNotOpenError
        #~ if not isinstance(data, (bytes, bytearray)):
            #~ raise TypeError('expected %s or bytearray, got %s' % (bytes, type(data)))
        # convert data (needed in case of memoryview instance: Py 3.1 io lib), ctypes doesn't like memoryview
        data = bytes(data)
        if data:
            #~ win32event.ResetEvent(self._overlappedWrite.hEvent)
            n = win32.DWORD()
            err = win32.WriteFile(self.hComPort, data, len(data), ctypes.byref(n), self._overlappedWrite)
            if not err and win32.GetLastError() != win32.ERROR_IO_PENDING:
                raise SerialException("WriteFile failed (%s)" % ctypes.WinError())
</snippet></ROW><ROW><id>3125349</id><snippet>--disable-msg-cat=C</snippet></ROW><ROW><id>3125384</id><snippet>def set_foo(self, foo, skip_save=False):
    self.foo = foo
    if not skip_save:
        self.save()
</snippet></ROW><ROW><id>3125421</id><snippet>-level</snippet></ROW><ROW><id>3125421</id><snippet>level_image</snippet></ROW><ROW><id>3125421</id><snippet>import colorsys

class Level(object):

    def __init__(self, minv, maxv, gamma):
        self.minv= minv/255.0
        self.maxv= maxv/255.0
        self._interval= self.maxv - self.minv
        self._invgamma= 1.0/gamma

    def new_level(self, value):
        if value &lt;= self.minv: return 0.0
        if value &gt;= self.maxv: return 1.0
        return ((value - self.minv)/self._interval)**self._invgamma

    def convert_and_level(self, band_values):
        h, s, v= colorsys.rgb_to_hsv(*(i/255.0 for i in band_values))
        new_v= self.new_level(v)
        return tuple(int(255*i)
                for i
                in colorsys.hsv_to_rgb(h, s, new_v))

def level_image(image, minv=0, maxv=255, gamma=1.0):
    """Level the brightness of image (a PIL.Image instance)
    All values ≤ minv will become 0
    All values ≥ maxv will become 255
    gamma controls the curve for all values between minv and maxv"""

    if image.mode != "RGB":
        raise ValueError("this works with RGB images only")

    new_image= image.copy()

    leveller= Level(minv, maxv, gamma)
    levelled_data= [
        leveller.convert_and_level(data)
        for data in image.getdata()]
    new_image.putdata(levelled_data)
    return new_image
</snippet></ROW><ROW><id>3125421</id><snippet>.point</snippet></ROW><ROW><id>3125581</id><snippet>devnull = open('/dev/null', 'w')
subprocess.Popen(shlex.split(command_line), stdout=devnull)
</snippet></ROW><ROW><id>3125581</id><snippet>devnull = open('/dev/null', 'w')
process = subprocess.Popen(shlex.split(command_line), stdout=devnull)
retcode = process.wait()
</snippet></ROW><ROW><id>3125581</id><snippet>devnull = open('/dev/null', 'w')
process = subprocess.Popen(shlex.split(command_line), stdout=devnull, stderr=devnull)
retcode = process.wait()
</snippet></ROW><ROW><id>3125698</id><snippet>~$ echo "i = 5" &gt; start.py
~$ python -i start.py 
&gt;&gt;&gt; i
5
</snippet></ROW><ROW><id>3125734</id><snippet>ls</snippet></ROW><ROW><id>3126035</id><snippet>focus_set()</snippet></ROW><ROW><id>3126035</id><snippet>focus_force()</snippet></ROW><ROW><id>3126454</id><snippet>TextLayout</snippet></ROW><ROW><id>3126454</id><snippet>TextLayout.width</snippet></ROW><ROW><id>3126454</id><snippet>width</snippet></ROW><ROW><id>3126454</id><snippet>TextLayout</snippet></ROW><ROW><id>3126454</id><snippet>                               x = self.width / 2,
                               y = self.height / 2,
</snippet></ROW><ROW><id>3126454</id><snippet>TextLayout</snippet></ROW><ROW><id>3126847</id><snippet>n-columns</snippet></ROW><ROW><id>3126847</id><snippet>n-rows</snippet></ROW><ROW><id>3126847</id><snippet>cols = mytable.get_property('n-columns')
rows = mytable.get_property('n-rows')
</snippet></ROW><ROW><id>3126955</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFKD', u'o\u00af')
u'o \u0304'
</snippet></ROW><ROW><id>3126955</id><snippet>'½'</snippet></ROW><ROW><id>3126955</id><snippet>'1'</snippet></ROW><ROW><id>3126955</id><snippet>'⁄'</snippet></ROW><ROW><id>3126955</id><snippet>'2'</snippet></ROW><ROW><id>3126955</id><snippet>'²'</snippet></ROW><ROW><id>3126955</id><snippet>'2'</snippet></ROW><ROW><id>3126955</id><snippet>'①'</snippet></ROW><ROW><id>3126955</id><snippet>'1'</snippet></ROW><ROW><id>3127118</id><snippet>gtk_widget_set_name</snippet></ROW><ROW><id>3127118</id><snippet>set_name</snippet></ROW><ROW><id>3127296</id><snippet>delete_message()</snippet></ROW><ROW><id>3127296</id><snippet>mark_as_spam()</snippet></ROW><ROW><id>3127296</id><snippet>do_stuff(action)</snippet></ROW><ROW><id>3127296</id><snippet>render_inbox(request)</snippet></ROW><ROW><id>3127423</id><snippet>from numpy import matrix
from numpy import linalg
A = matrix( [[1,2,3],[11,12,13],[21,22,23]]) # Creates a matrix.
x = matrix( [[1],[2],[3]] )                  # Creates a matrix (like a column vector).
y = matrix( [[1,2,3]] )                      # Creates a matrix (like a row vector).
print A.T                                    # Transpose of A.
print A*x                                    # Matrix multiplication of A and x.
print A.I                                    # Inverse of A.
print linalg.solve(A, x)     # Solve the linear equation system.
</snippet></ROW><ROW><id>3127956</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>3128084</id><snippet>time.localtime(seconds)</snippet></ROW><ROW><id>3128550</id><snippet>activate_this.py</snippet></ROW><ROW><id>3128550</id><snippet>execfile</snippet></ROW><ROW><id>3128550</id><snippet>activate_this = os.path.join("path/to/radioenv", "bin/activate_this.py")
execfile(activate_this, dict(__file__=activate_this))
</snippet></ROW><ROW><id>3128671</id><snippet>data = urlopen(uri).read().decode(encoding)
f = open(file_name, 'wb')
f.write(data.encode('utf-8'))
f.close()
</snippet></ROW><ROW><id>3128715</id><snippet>CONFIG_FILE = '/path/to/config/file'

root.sclX = ...

try:
    with open(CONFIG_FILE, 'r') as f:
        root.sclX.set(int(f.read()))
except IOError:    # this is what happens if the file doesn't exist
    pass

...
root.mainloop()

# this needs to run when your program exits
with open(CONFIG_FILE, 'w') as f:
    f.write(str(root.sclX.get()))
</snippet></ROW><ROW><id>3128757</id><snippet>my_xml_string = """
&lt;root&gt;
      &lt;content&gt;
        &lt;one&gt;A value&lt;/one&gt;
        &lt;two&gt;Here goes for ...&lt;/two&gt;
      &lt;/content&gt;
&lt;/root&gt;"""

xml = parseString(xml_string)
result = xml.getElementsByTagName('one')[0].firstChild.data
</snippet></ROW><ROW><id>3129009</id><snippet>import MySQLdb.cursors

db = MySQLdb.connect(db=database, host=localhost,
                     port=3306, user=user, passwd=pass,
                     cursorclass=MySQLdb.cursors.DictCursor)
cur = db.cursor()

#this is not string interpolation, everything is quoted for you automatically
cur.execute("select id, name from table where id = %s", (321,))

for row in cur.fetchall():
    print "%s. %s" % (row['id'], row['name'])

cur.execute("insert into table (id, name) values (%s, %s)", (123, 'foo'))
db.commit() # required, because autocommit is off by default
</snippet></ROW><ROW><id>3129330</id><snippet>from win32api import GetSystemMetrics
print "width =", GetSystemMetrics (0)
print "height =",GetSystemMetrics (1)
</snippet></ROW><ROW><id>3129389</id><snippet>mousemask</snippet></ROW><ROW><id>3129404</id><snippet>import numpy as np
from numpy import array

ypoints = np.r_[array([0, 2.1, 2.4]),    # first dataset, 3 points
           array([0.1, 2.1, 2.9]),  # second dataset
           array([-0.1, 1.4])]      # only 2 points

xpoints = [array([0, 2, 2.5]),      # first dataset
           array([0, 2, 3]),        # second, also x coordinates are different
           array([0, 1.5])]         # the first coordinate is always 0

xp = np.hstack(xpoints)
indicator = []
for i,a in enumerate(xpoints):
    indicator.extend([i]*len(a))

indicator = np.array(indicator)


x = xp[:,None]*(indicator[:,None]==np.arange(3)).astype(int)
x = np.hstack((np.ones((xp.shape[0],1)),x))

print np.dot(np.linalg.pinv(x), ypoints)
# [ 0.01947973  0.98656987  0.98481549  0.92034684]
</snippet></ROW><ROW><id>3129404</id><snippet>&gt;&gt;&gt; x
array([[ 1. ,  0. ,  0. ,  0. ],
       [ 1. ,  2. ,  0. ,  0. ],
       [ 1. ,  2.5,  0. ,  0. ],
       [ 1. ,  0. ,  0. ,  0. ],
       [ 1. ,  0. ,  2. ,  0. ],
       [ 1. ,  0. ,  3. ,  0. ],
       [ 1. ,  0. ,  0. ,  0. ],
       [ 1. ,  0. ,  0. ,  1.5]])
</snippet></ROW><ROW><id>3129407</id><snippet>f.read()</snippet></ROW><ROW><id>3129407</id><snippet>f</snippet></ROW><ROW><id>3129407</id><snippet>ur = response.decode('utf8')</snippet></ROW><ROW><id>3129407</id><snippet>json.loads(ur)</snippet></ROW><ROW><id>3129420</id><snippet>db.delete</snippet></ROW><ROW><id>3129420</id><snippet> dev_appserver.py --clear_datastore myapp
</snippet></ROW><ROW><id>3129455</id><snippet>--num_threads=4</snippet></ROW><ROW><id>3129622</id><snippet>$ python ./my_script.py
$ ksh ~/bin/redouble.sh
$ lua5.1 /usr/local/bin/osbf3
</snippet></ROW><ROW><id>3129622</id><snippet>#!</snippet></ROW><ROW><id>3129622</id><snippet>#!</snippet></ROW><ROW><id>3129622</id><snippet>execve(2)</snippet></ROW><ROW><id>3129622</id><snippet>#!</snippet></ROW><ROW><id>3129622</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3129622</id><snippet>python</snippet></ROW><ROW><id>3129622</id><snippet>$PATH</snippet></ROW><ROW><id>3129622</id><snippet>$PATH</snippet></ROW><ROW><id>3129622</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>3129622</id><snippet>/usr/bin</snippet></ROW><ROW><id>3129622</id><snippet>#!/usr/bin/python2.5
</snippet></ROW><ROW><id>3129622</id><snippet>#!python
</snippet></ROW><ROW><id>3129622</id><snippet>python</snippet></ROW><ROW><id>3129661</id><snippet>.so</snippet></ROW><ROW><id>3129661</id><snippet>.so</snippet></ROW><ROW><id>3129661</id><snippet>otool -L</snippet></ROW><ROW><id>3129661</id><snippet>$ otool -L /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload/_curses.so
/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload/_curses.so:
    /Library/Frameworks/Python.framework/Versions/2.6/lib/libncurses.5.dylib (compatibility version 5.0.0, current version 5.0.0)
    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.3.10)
</snippet></ROW><ROW><id>3129661</id><snippet>_curses.so</snippet></ROW><ROW><id>3129661</id><snippet>$ python
&gt;&gt;&gt; import _curses
&gt;&gt;&gt; _curses.__file__
</snippet></ROW><ROW><id>3129661</id><snippet>_curses.so</snippet></ROW><ROW><id>3129661</id><snippet>otool -L</snippet></ROW><ROW><id>3129661</id><snippet>.so</snippet></ROW><ROW><id>3129661</id><snippet>python.org</snippet></ROW><ROW><id>3129661</id><snippet>.dmg</snippet></ROW><ROW><id>3129661</id><snippet>.dmg</snippet></ROW><ROW><id>3129661</id><snippet>/usr/local</snippet></ROW><ROW><id>3129661</id><snippet>.bashrc</snippet></ROW><ROW><id>3129661</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3129661</id><snippet>/usr/bin</snippet></ROW><ROW><id>3129661</id><snippet>_curses.so</snippet></ROW><ROW><id>3130037</id><snippet>"rb"</snippet></ROW><ROW><id>3130186</id><snippet>import urllib2

urllib2.urlopen('http://example.com', 'a=1&amp;b=2')
</snippet></ROW><ROW><id>3130238</id><snippet>import re
import sys

teststring1 = "abc"
teststring2 = "  a"

myre = '^\s{0,2}(\w)(\w?)(\w?)$'

if re.search(myre,teststring1):
    print re.search(myre,teststring1).group(1)

if re.search(myre,teststring2):
   print re.search(myre,teststring2).group(1)
</snippet></ROW><ROW><id>3130238</id><snippet>a</snippet></ROW><ROW><id>3130238</id><snippet>!= 3</snippet></ROW><ROW><id>3130263</id><snippet>('msiexec /i whatever.msi')</snippet></ROW><ROW><id>3130263</id><snippet>subprocess</snippet></ROW><ROW><id>3130263</id><snippet>msiexec</snippet></ROW><ROW><id>3130349</id><snippet>&gt;&gt;&gt; import pylab
&gt;&gt;&gt; fig = pylab.figure()

&gt;&gt;&gt; pylab.axis('off')
(0.0, 1.0, 0.0, 1.0)
&gt;&gt;&gt; pylab.plot([1,3,1,2,3])
[&lt;matplotlib.lines.Line2D object at 0x37d8cd0&gt;]
&gt;&gt;&gt; pylab.plot([3,1,1,2,1])
[&lt;matplotlib.lines.Line2D object at 0x37d8d10&gt;]

&gt;&gt;&gt; fig.get_size_inches()    # check default size (width, height)
array([ 8.,  6.])
&gt;&gt;&gt; fig.set_size_inches(4,3) 
&gt;&gt;&gt; fig.get_dpi()            # check default dpi (in inches)
80
&gt;&gt;&gt; fig.set_dpi(40)

# using bbox_inches='tight' and pad_inches=0 
# I managed to remove most of the padding; 
# but a small amount still persists
&gt;&gt;&gt; fig.savefig('out.svg', transparent=True, bbox_inches='tight', pad_inches=0)
</snippet></ROW><ROW><id>3130349</id><snippet>savefig()</snippet></ROW><ROW><id>3130443</id><snippet>input</snippet></ROW><ROW><id>3130443</id><snippet>[2, 1, 3, 4, 5]</snippet></ROW><ROW><id>3130443</id><snippet>[(1, 2), (1, 1), (1, 3), (1, 4), (1, 5)]
</snippet></ROW><ROW><id>3130443</id><snippet>x[0]</snippet></ROW><ROW><id>3130443</id><snippet>x[1]</snippet></ROW><ROW><id>3130443</id><snippet>1</snippet></ROW><ROW><id>3130443</id><snippet>reduce(
    lambda a, b: a if a[1] + b[1] &gt; 8 else (a[0] + b[0], a[1] + b[1]),
    map(lambda x: (1, x), input))
</snippet></ROW><ROW><id>3130443</id><snippet>(3, 6)</snippet></ROW><ROW><id>3130443</id><snippet>6</snippet></ROW><ROW><id>3130443</id><snippet>3</snippet></ROW><ROW><id>3130886</id><snippet>client = models.ForeignKey(Client, limit_choices_to = {'is_provider': True})
</snippet></ROW><ROW><id>3131013</id><snippet>import pprint

data = [
    {'title': 'Section 1', 'level': 1, 'page_number': 1},
    {'title': 'Section 1.1', 'level': 2, 'page_number': 2},
    {'title': 'Section 1.2', 'level': 2, 'page_number': 3},
    {'title': 'Section 2', 'level': 1, 'page_number': 4},
    {'title': 'Section 2.1', 'level': 2, 'page_number': 42},
    {'title': 'Section 2.1.1', 'level': 3, 'page_number': 42},
    {'title': 'Section 3', 'level': 1, 'page_number': 42},
]

toc = []
stack = [toc]
for d in data:
    d['sub'] = []   
    while d['level'] &lt; len(stack):
        stack.pop()
    while d['level']  &gt; len(stack):
        stack.append(stack[-1][-1]['sub'])
    stack[-1].append(d)


pprint.pprint(toc)
</snippet></ROW><ROW><id>3131013</id><snippet>[{'level': 1,
  'page_number': 1,
  'sub': [{'level': 2, 'page_number': 2, 'sub': [], 'title': 'Section 1.1'},
          {'level': 2, 'page_number': 3, 'sub': [], 'title': 'Section 1.2'}],
  'title': 'Section 1'},
 {'level': 1,
  'page_number': 4,
  'sub': [{'level': 2,
           'page_number': 42,
           'sub': [{'level': 3,
                    'page_number': 42,
                    'sub': [],
                    'title': 'Section 2.1.1'}],
           'title': 'Section 2.1'}],
  'title': 'Section 2'},
 {'level': 1, 'page_number': 42, 'sub': [], 'title': 'Section 3'}]
</snippet></ROW><ROW><id>3131165</id><snippet>AddHandler fastcgi-script .fcgi
RewriteEngine On
RewriteRule ^(/media.*)$ /$1 [QSA,PT]
RewriteRule ^(/adminmedia.*)$ /$1 [QSA, PT]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_URI} !^/blog(/.*)?$
RewriteRule ^(.*)$ dispatch.fcgi/$1 [QSA,L]
</snippet></ROW><ROW><id>3131165</id><snippet>RewriteCond</snippet></ROW><ROW><id>3131165</id><snippet>/blog</snippet></ROW><ROW><id>3131165</id><snippet>/blog/whatever</snippet></ROW><ROW><id>3131165</id><snippet>dispatch.fcgi</snippet></ROW><ROW><id>3131165</id><snippet>.htaccess</snippet></ROW><ROW><id>3131165</id><snippet>/blog</snippet></ROW><ROW><id>3131165</id><snippet>RewriteBase /blog/</snippet></ROW><ROW><id>3131165</id><snippet>RewriteEngine On</snippet></ROW><ROW><id>3131189</id><snippet>communicate()</snippet></ROW><ROW><id>3131189</id><snippet>communicate()</snippet></ROW><ROW><id>3131189</id><snippet>stdout</snippet></ROW><ROW><id>3131189</id><snippet>stdin</snippet></ROW><ROW><id>3131189</id><snippet>Popen</snippet></ROW><ROW><id>3131289</id><snippet>scope()</snippet></ROW><ROW><id>3131289</id><snippet>os</snippet></ROW><ROW><id>3131289</id><snippet>import</snippet></ROW><ROW><id>3131289</id><snippet>scope</snippet></ROW><ROW><id>3131289</id><snippet>os</snippet></ROW><ROW><id>3131289</id><snippet>print os</snippet></ROW><ROW><id>3131289</id><snippet>&gt;&gt;&gt; x = 3
&gt;&gt;&gt; def printx():
...     print x # will print the global x
...
&gt;&gt;&gt; def printx2():
...     print x # will try to print the local x
...     x = 4
...
&gt;&gt;&gt; printx()
3
&gt;&gt;&gt; printx2()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in printx2
UnboundLocalError: local variable 'x' referenced before assignment
</snippet></ROW><ROW><id>3131289</id><snippet>os</snippet></ROW><ROW><id>3131289</id><snippet>os</snippet></ROW><ROW><id>3131289</id><snippet>&gt;&gt;&gt; os
&lt;module 'os' from 'C:\CDL_INSTALL\install\Python26\lib\os.pyc'&gt;
&gt;&gt;&gt; def bad_os():
...     print os
...     os = "assigning a string to local os"
...
&gt;&gt;&gt; bad_os()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in bad_os
UnboundLocalError: local variable 'os' referenced before assignment
</snippet></ROW><ROW><id>3131289</id><snippet>&gt;&gt;&gt; def example1():
...     print never_used # will be interpreted as a global
...
&gt;&gt;&gt; def example2():
...     print used_later # will be interpreted as the local assigned later
...     used_later = 42
...
&gt;&gt;&gt; example1()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in example1
NameError: global name 'never_used' is not defined
&gt;&gt;&gt; example2()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in example2
UnboundLocalError: local variable 'used_later' referenced before assignment
</snippet></ROW><ROW><id>3131491</id><snippet>value_to_string</snippet></ROW><ROW><id>3131491</id><snippet>class MyDateTimeField(DateTimeField)
    def value_to_string(self, obj):
        val = self._get_val_from_obj(obj)
        if val is None:
            data = ''
        else:
            data = val.isoformat()
        return data
</snippet></ROW><ROW><id>3131491</id><snippet>serializers.python.Serializer.handle_field</snippet></ROW><ROW><id>3131491</id><snippet>class MyJSONEncoder(DjangoJSONEncoder):
    def default(self, o):
        if isinstance(o, datetime.datetime):
            return o.isoformat()
        else:
            return super(MyJSONEncoder, self).default(o)
</snippet></ROW><ROW><id>3131491</id><snippet>wadofstuff</snippet></ROW><ROW><id>3131491</id><snippet>from wadofstuff.django.serializers.json import Serializer
class BetterSerializer(Serializer):
    """
    Convert a queryset to JSON.
    """
    def end_serialization(self):
        """Output a JSON encoded queryset."""
        self.options.pop('stream', None)
        self.options.pop('fields', None)
        self.options.pop('excludes', None)
        self.options.pop('relations', None)
        self.options.pop('extras', None)
        simplejson.dump(self.objects, self.stream, cls=MyJSONEncoder,
            **self.options)
</snippet></ROW><ROW><id>3131644</id><snippet>import Xlib.display
display = Xlib.display.Display()
window = display.get_input_focus().focus
wmname = window.get_wm_name()
wmclass = window.get_wm_class()
if wmclass is None and wmname is None:
    window = window.query_tree().parent
    wmname = window.get_wm_name()
print "WM Name: %s" % ( wmname, )
</snippet></ROW><ROW><id>3131997</id><snippet>bar</snippet></ROW><ROW><id>3131997</id><snippet>struct FOO_ *bar(int);</snippet></ROW><ROW><id>3131997</id><snippet>foo_parameter</snippet></ROW><ROW><id>3131997</id><snippet>foo</snippet></ROW><ROW><id>3131997</id><snippet>struct FOO_</snippet></ROW><ROW><id>3131997</id><snippet>bar(int)</snippet></ROW><ROW><id>3131997</id><snippet>struct FOO_</snippet></ROW><ROW><id>3131997</id><snippet>#!/usr/bin/env python
from ctypes import *

class foo(Structure):
    _fields_=[("i",c_int),
              ("b1",POINTER(c_int)),
              ("w1",POINTER(c_float))]

myclib = cdll.LoadLibrary("./libexample.so")
temp_foo = foo(1,None,None)
foo = myclib.bar(temp_foo.i)
myclib.foo_write(foo)
</snippet></ROW><ROW><id>3131997</id><snippet>bar()</snippet></ROW><ROW><id>3132098</id><snippet>u'c:\\path\\somewhere'
</snippet></ROW><ROW><id>3132098</id><snippet>b</snippet></ROW><ROW><id>3132098</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>3132187</id><snippet>property_map:
 - property: __key__
   external_name: key
   export_transform: transform.key_id_or_name_as_string
   import_transform: transform.create_foreign_key('Kind', key_is_id=True)
</snippet></ROW><ROW><id>3132309</id><snippet>history-previous</snippet></ROW><ROW><id>3132423</id><snippet>scrapy/cmdline.py</snippet></ROW><ROW><id>3132423</id><snippet>run</snippet></ROW><ROW><id>3132423</id><snippet>crawl</snippet></ROW><ROW><id>3132423</id><snippet>scrapy/commands/crawl.py</snippet></ROW><ROW><id>3132423</id><snippet>scrapymanager.start()</snippet></ROW><ROW><id>3132423</id><snippet>subprocess</snippet></ROW><ROW><id>3132585</id><snippet>#!/usr/bin/env python

import datetime

def hrdd(d1, d2):
    """
    Human-readable date difference.
    """
    _d1 = datetime.datetime.strptime(d1, "%a %b %d %H:%M:%S %Y")
    _d2 = datetime.datetime.strptime(d2, "%a %b %d %H:%M:%S %Y")
    diff = _d2 - _d1
    return diff.days # &lt;-- alternatively: diff.seconds 

if __name__ == '__main__':
    d1 = "Mon Jun 28 10:51:07 2010"
    d2 = "Fri Jun 18 10:18:43 2010"
    d3 = "Wed Dec 15 09:18:43 2010"

    print hrdd(d1, d2)
    # ==&gt; -11
    print hrdd(d2, d1)
    # ==&gt; 10
    print hrdd(d1, d3)
    # ==&gt; 169
    # ...
</snippet></ROW><ROW><id>3132908</id><snippet>__new__</snippet></ROW><ROW><id>3132908</id><snippet>__init__</snippet></ROW><ROW><id>3132908</id><snippet>__init__</snippet></ROW><ROW><id>3132908</id><snippet>__new__</snippet></ROW><ROW><id>3132908</id><snippet>__new__</snippet></ROW><ROW><id>3132908</id><snippet>__init__</snippet></ROW><ROW><id>3132908</id><snippet>__new__</snippet></ROW><ROW><id>3133149</id><snippet>zlib</snippet></ROW><ROW><id>3133149</id><snippet>s = 'Hello, world'
encoded = zlib.compress(s).encode('base64')
</snippet></ROW><ROW><id>3133415</id><snippet>PythonPath "sys.path+['/mydir']"  
</snippet></ROW><ROW><id>3133631</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datestring = "1277722499.82"

&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(float(datestring))
&gt;&gt;&gt; print dt
2010-06-28 11:54:59.820000
</snippet></ROW><ROW><id>3133843</id><snippet>python -E second.py</snippet></ROW><ROW><id>3133957</id><snippet>#!/usr/bin/env python

token_list = ['a', 'b', 'c']

contradictions = {
    'a': set(['b']),
    'b': set(['a']),
    'c': set()
}

result = []

while token_list:
    token = token_list.pop()
    new = [set([token])]
    for r in result:
        if token not in contradictions or not r &amp; contradictions[token]:
            new.append(r | set([token]))
    result.extend(new)

print result
</snippet></ROW><ROW><id>3134302</id><snippet>BEGIN TRANSACTION ... COMMIT</snippet></ROW><ROW><id>3134370</id><snippet>app.yaml</snippet></ROW><ROW><id>3134370</id><snippet>helloworld.py</snippet></ROW><ROW><id>3134370</id><snippet>main</snippet></ROW><ROW><id>3134370</id><snippet>application = webapp.WSGIApplication(
                                     [('/', MainPage),
                                      ('/sign', Guestbook)],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3134370</id><snippet>import</snippet></ROW><ROW><id>3134370</id><snippet>.py</snippet></ROW><ROW><id>3134370</id><snippet>.py</snippet></ROW><ROW><id>3134370</id><snippet>main</snippet></ROW><ROW><id>3134370</id><snippet>webapp</snippet></ROW><ROW><id>3134370</id><snippet>get</snippet></ROW><ROW><id>3134370</id><snippet>post</snippet></ROW><ROW><id>3134370</id><snippet>put</snippet></ROW><ROW><id>3134370</id><snippet>delete</snippet></ROW><ROW><id>3134382</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>3134382</id><snippet>$PATH</snippet></ROW><ROW><id>3134382</id><snippet>.bashrc</snippet></ROW><ROW><id>3134382</id><snippet>export PATH="/opt/local/bin:${PATH}"
</snippet></ROW><ROW><id>3134382</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>3134382</id><snippet>python2.6</snippet></ROW><ROW><id>3134382</id><snippet>python</snippet></ROW><ROW><id>3134382</id><snippet>python</snippet></ROW><ROW><id>3134382</id><snippet>python2.6</snippet></ROW><ROW><id>3134382</id><snippet>alias python=python2.6</snippet></ROW><ROW><id>3134382</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>3134382</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>3134382</id><snippet>python_select</snippet></ROW><ROW><id>3134382</id><snippet>python</snippet></ROW><ROW><id>3134842</id><snippet>sql = "SELECT column FROM table WHERE col1=%s AND col2=%s" 
params = (col1_value, col2_value)
cursor.execute(sql, params)
</snippet></ROW><ROW><id>3134943</id><snippet>PrintingList = list()</snippet></ROW><ROW><id>3134943</id><snippet>PrintingList = [newValue]</snippet></ROW><ROW><id>3134943</id><snippet>triangle(10)</snippet></ROW><ROW><id>3134943</id><snippet>[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
[1, 6, 15, 20, 15, 6, 1]
[1, 7, 21, 35, 35, 21, 7, 1]
[1, 8, 28, 56, 70, 56, 28, 8, 1]
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
</snippet></ROW><ROW><id>3135079</id><snippet>class geoLocation:
    def __init__(self, lat, long):
        """init class from lat,long as radians"""

    @classmethod
    def fromDegrees(cls, dlat, dlong):
        """creat `cls` from lat,long in degrees """
        return cls( to_radians(dlat), to_radians(dlong))

    @classmethod
    def fromRadians(cls, lat, long): # just in case
        return cls(lat, long)

obj = geoLocation.fromDegrees(10,20) # returns a new geoLocation object
</snippet></ROW><ROW><id>3135195</id><snippet>for address in [address.strip() for address in intext if address.strip()]:
        loop=True
        while loop:
            if len(threads)&lt;20:
                resolver_thread = Resolver(address, results, threads)
                threads.append(resolver_thread)
                resolver_thread.start()
                loop=False
            else: 
                time.sleep(.25)
</snippet></ROW><ROW><id>3135368</id><snippet>Image.open</snippet></ROW><ROW><id>3135368</id><snippet>def do_post_processing(filename):
    with open(str(filename), 'rb') as f:
        image = Image.open(f)
        ...
        del new_image, image
    os.remove(str(filename))
    os.rename(...)
</snippet></ROW><ROW><id>3136001</id><snippet>def method(self, alpha, beta, gamma, delta, epsilon, zeta, eta,
        theta, iota, kappa):
    pass
</snippet></ROW><ROW><id>3136069</id><snippet>i = 5 + Tup()[0]
</snippet></ROW><ROW><id>3136191</id><snippet>{|begin|then|do|...</snippet></ROW><ROW><id>3136191</id><snippet>}|end</snippet></ROW><ROW><id>3136352</id><snippet>\n</snippet></ROW><ROW><id>3136352</id><snippet>def clearscreen(numlines=100):
    """Clear the console.
    numlines is an optional argument used only as a fall-back.
    """
    import os
    if os.name == "posix":
        # Unix/Linux/MacOS/BSD/etc
        os.system('clear')
    elif os.name in ("nt", "dos", "ce"):
        # DOS/Windows
        os.system('CLS')
    else:
        # Fallback for other operating systems.
        print '\n' * numlines
</snippet></ROW><ROW><id>3136703</id><snippet>words = [w.replace('[br]', '&lt;br /&gt;') for w in words]</snippet></ROW><ROW><id>3136853</id><snippet>platform</snippet></ROW><ROW><id>3136853</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.mac_ver()
('10.6.3', ('', '', ''), 'i386')
&gt;&gt;&gt; print platform.mac_ver()[0]
10.6.3
</snippet></ROW><ROW><id>3136882</id><snippet>cs = contour(X,Y,A,0)
data = cs.collections[0].get_paths()[1]
</snippet></ROW><ROW><id>3137008</id><snippet>twiny()</snippet></ROW><ROW><id>3137008</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# plot f(x)=x for two different x ranges
x1 = np.linspace(0, 1, 50)
x2 = np.linspace(0, 2, 50)
fig = plt.figure()

ax1 = fig.add_subplot(111)
ax1.plot(x1, x1,'b--')

ax2 = ax1.twiny()
ax2.plot(x2, x2, 'go')

plt.show()
</snippet></ROW><ROW><id>3137008</id><snippet>ax2.plot(x2, x2, alpha=0)
</snippet></ROW><ROW><id>3137022</id><snippet>def func1(a=1, b=2, c=3):
    func2(**locals())
</snippet></ROW><ROW><id>3137022</id><snippet>locals()</snippet></ROW><ROW><id>3137022</id><snippet>func2</snippet></ROW><ROW><id>3137073</id><snippet>easy_install django
</snippet></ROW><ROW><id>3137073</id><snippet>pip install django
</snippet></ROW><ROW><id>3137152</id><snippet>self._content</snippet></ROW><ROW><id>3137152</id><snippet>content.setter</snippet></ROW><ROW><id>3137152</id><snippet>self._content.seek(0)</snippet></ROW><ROW><id>3137169</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>3137169</id><snippet>C1 = text1.get(1.0, END)
C2 = text2.get(1.0, END)
</snippet></ROW><ROW><id>3137169</id><snippet>Paste</snippet></ROW><ROW><id>3137169</id><snippet>text2</snippet></ROW><ROW><id>3137169</id><snippet>text2.delete(1.0, END)
text2.insert(END, "Whatever: %s and: %s" % (C1, C2))
</snippet></ROW><ROW><id>3137314</id><snippet># remove previous selection, if any
text_widget.tag_remove(Tkinter.SEL, "1.0", Tkinter.END)
# select all
text_widget.tag_add(Tkinter.SEL, "1.0", Tkinter.END)
# place cursor
text_widget.mark_set(Tkinter.INSERT, Tkinter.END)
</snippet></ROW><ROW><id>3137397</id><snippet>def testF(self):
    for tuple1, tuple2 in zip(f(range(1,3)), [(1.0, 2), (0.5, 4)]):
        for val1, val2 in zip(tuple1, tuple2):
            if type(val2) is float:
                self.assertAlmostEquals(val1, val2, 5)
            else:
                self.assertEquals(val1, val2)
</snippet></ROW><ROW><id>3137397</id><snippet>if type(val2) in [float, decimal.Decimal]:</snippet></ROW><ROW><id>3137400</id><snippet>import logging
log = logging.getLogger(__name__)
log.debug('Your trace message')
</snippet></ROW><ROW><id>3137504</id><snippet>def test_comparison():
    for file in os.listdir(DIRECTORY):
        yield run_cmp_test, file

def run_cmp_test(file):
    # Run the tests
</snippet></ROW><ROW><id>3137521</id><snippet>for i in &lt;whatever&gt;: &lt;loopbody&gt;</snippet></ROW><ROW><id>3137521</id><snippet>&lt;whatever&gt;</snippet></ROW><ROW><id>3137521</id><snippet>&lt;loopbody&gt;</snippet></ROW><ROW><id>3137521</id><snippet>_aux = iter(&lt;whatever&gt;)
while True:
  try: i = next(_aux)
  except StopIteration: break
  &lt;loopbody&gt;
</snippet></ROW><ROW><id>3137521</id><snippet>_aux</snippet></ROW><ROW><id>3137521</id><snippet>&lt;whatever&gt;</snippet></ROW><ROW><id>3137521</id><snippet>iter()</snippet></ROW><ROW><id>3137521</id><snippet>next</snippet></ROW><ROW><id>3137521</id><snippet>break</snippet></ROW><ROW><id>3137521</id><snippet>&lt;loopbody&gt;</snippet></ROW><ROW><id>3137521</id><snippet>list</snippet></ROW><ROW><id>3137521</id><snippet>for item in (i * 2 for i in range(1, 10)): ...
</snippet></ROW><ROW><id>3137521</id><snippet>next()</snippet></ROW><ROW><id>3137521</id><snippet>i</snippet></ROW><ROW><id>3137521</id><snippet>break</snippet></ROW><ROW><id>3137541</id><snippet>;</snippet></ROW><ROW><id>3137541</id><snippet>import datetime
import csv

WEEK = datetime.timedelta(weeks=1)
DAY = datetime.timedelta(days=1)
MONTH = datetime.timedelta(days=30)

# read the entire file to memory in a dict keyed by date
data = {}
with open('file.csv') as csvfile:
    for row in csv.DictReader(csvfile):
        data[datetime.datetime.strptime(row['date'], '%d/%m/%y').date()] = row
</snippet></ROW><ROW><id>3137541</id><snippet># blood pressure one week ago:
print data[(datetime.datetime.now() - WEEK).date()]['blood_pressure']

# the entire data for two months ago:
print data[(datetime.datetime.now() - 2 * MONTH).date()]
</snippet></ROW><ROW><id>3137541</id><snippet>dateutil</snippet></ROW><ROW><id>3137541</id><snippet>relativedelta</snippet></ROW><ROW><id>3137541</id><snippet>import sqlite3
import datetime

# connect to db
con = sqlite3.connect('myfile.db', detect_types=sqlite3.PARSE_DECLTYPES)

date_i_want = datetime.date(2001, 1, 6)
cur.execute('SELECT * FROM data WHERE date = ?', (date_i_want,))
row = cur.fetchone()
</snippet></ROW><ROW><id>3137694</id><snippet>__gproperties__</snippet></ROW><ROW><id>3137694</id><snippet>gobject.TYPE_ENUM</snippet></ROW><ROW><id>3137694</id><snippet>pygobject-codegen-2.0</snippet></ROW><ROW><id>3137694</id><snippet>gobject.TYPE_INT</snippet></ROW><ROW><id>3137768</id><snippet>class MyDict(dict):
    def __setitem__(self,key,value):
        if key=='message':
            dict.__setitem__(self,'message','')
            dict.__setitem__(self,'last_message',value) 
        else:
            dict.__setitem__(self,key,value)

class A(object):
    def __init__(self):
            self._b = MyDict({"message": "", 
                       "last_message": ""})
    @property
    def b(self):
        return self._b

a=A()
a.b['message']='hello'
print(a.b['message'])
# ''
print(a.b['last_message'])
# hello
</snippet></ROW><ROW><id>3137768</id><snippet>a.b['message']='hello'
</snippet></ROW><ROW><id>3137768</id><snippet>a.b</snippet></ROW><ROW><id>3137768</id><snippet>b</snippet></ROW><ROW><id>3137768</id><snippet>self._b</snippet></ROW><ROW><id>3137768</id><snippet>self._b['message']='hello'</snippet></ROW><ROW><id>3137768</id><snippet>__setitem__</snippet></ROW><ROW><id>3137768</id><snippet>MyDict</snippet></ROW><ROW><id>3137914</id><snippet>(file, pathname, description)</snippet></ROW><ROW><id>3137914</id><snippet>file</snippet></ROW><ROW><id>3137914</id><snippet>None</snippet></ROW><ROW><id>3137914</id><snippet>ImportError</snippet></ROW><ROW><id>3137914</id><snippet>try</snippet></ROW><ROW><id>3137914</id><snippet>except</snippet></ROW><ROW><id>3137914</id><snippet>if file is None:</snippet></ROW><ROW><id>3137914</id><snippet>try</snippet></ROW><ROW><id>3137914</id><snippet>finally</snippet></ROW><ROW><id>3137914</id><snippet>name</snippet></ROW><ROW><id>3137914</id><snippet>find_module</snippet></ROW><ROW><id>3138940</id><snippet>WorkerManager</snippet></ROW><ROW><id>3138940</id><snippet>Worker</snippet></ROW><ROW><id>3138940</id><snippet>from multiprocessing import Process, Queue

class Result(object):
    '''Result from start to end.'''
    def __init__(self, start, end, data):
        self.start = start
        self.end = end
        self.data = data


class Worker(Process):
    '''Joins two results into one result.'''
    def __init__(self, result_queue, pair):
        self.result_queue = result_queue
        self.pair = pair
        super(Worker, self).__init__()

    def run(self):
        left, right = self.pair
        result = Result(left.start, right.end,
                        '(%s, %s)' % (left.data, right.data))
        self.result_queue.put(result)


class WorkerManager(Process):
    '''
    Takes results from result_queue, pairs them
    and assigns workers to process them.
    Returns final result into final_queue.
    '''
    def __init__(self, result_queue, final_queue, start, end):
        self._result_queue = result_queue
        self._final_queue = final_queue
        self._start = start
        self._end = end
        self._results = []
        super(WorkerManager, self).__init__()

    def run(self):
        while True:
            result = self._result_queue.get()
            self._add_result(result)
            if self._has_final_result():
                self._final_queue.put(self._get_final_result())
                return
            pair = self._find_adjacent_pair()
            if pair:
                self._start_worker(pair)

    def _add_result(self, result):
        self._results.append(result)
        self._results.sort(key=lambda result: result.start)

    def _has_final_result(self):
        return (len(self._results) == 1
                and self._results[0].start == self._start
                and self._results[0].end == self._end)

    def _get_final_result(self):
        return self._results[0]

    def _find_adjacent_pair(self):
        for i in xrange(len(self._results) - 1):
            left, right = self._results[i], self._results[i + 1]
            if left.end == right.start:
                self._results = self._results[:i] + self._results[i + 2:]
                return left, right

    def _start_worker(self, pair):
        worker = Worker(self._result_queue, pair)
        worker.start()

if __name__ == '__main__':
    DATA = [Result(i, i + 1, str(i)) for i in xrange(6)]
    result_queue = Queue()
    final_queue = Queue()
    start = 0
    end = len(DATA)
    man = WorkerManager(result_queue, final_queue, start, end)
    man.start()
    for res in DATA:
        result_queue.put(res)
    final = final_queue.get()
    print final.start
    # 0
    print final.end
    # 6
    print final.data
    # For example:
    # (((0, 1), (2, 3)), (4, 5))
</snippet></ROW><ROW><id>3138940</id><snippet>Worker</snippet></ROW><ROW><id>3138940</id><snippet>(((0, 1), (2, 3)), (4, 5))</snippet></ROW><ROW><id>3138940</id><snippet>(0, 1)</snippet></ROW><ROW><id>3138940</id><snippet>(2, 3)</snippet></ROW><ROW><id>3138940</id><snippet>((0, 1), (2, 3))</snippet></ROW><ROW><id>3138940</id><snippet>(4, 5)</snippet></ROW><ROW><id>3139092</id><snippet>return self._api 
</snippet></ROW><ROW><id>3139770</id><snippet>update_ordering(model, order):
    """ order is in the form [id,id,id,id] for example: [8,4,5,1,3] """
    original_order = model.objects.value_list('id', flat=True).order_by('order')
    order = filter( lambda x: x[1]!=x[2], zip(xrange(len(order)), order, original_order))
    for i in order:
        model.objects.filter(id=i[1]).update(order=i[0])
</snippet></ROW><ROW><id>3139935</id><snippet>&gt;&gt;&gt; seq = [100, 2, 400, 500, 400]
&gt;&gt;&gt; heapq.nlargest(2, enumerate(seq), key=lambda x: x[1])
[(3, 500), (2, 400)]
</snippet></ROW><ROW><id>3140174</id><snippet>label1 = gtk.Label("Label 1")
label2 = gtk.Label("Label 2")
label3 = gtk.Label("Label 3")

box.pack_start(label1)
box.pack_start(label2)
box.pack_start(label3)
</snippet></ROW><ROW><id>3140174</id><snippet>box1 = gtk.HBox()
label1 = gtk.Label("Label 1")
box1.pack_start(label1)

box2 = gtk.HBox()
label2 = gtk.Label("Label 2")
box2.pack_start(label2)

box3 = gtk.HBox()
label3 = gtk.Label("Label 3")
box3.pack_start(label3)

box.pack_start(box1)
box.pack_start(box2)
box.pack_start(box3)
</snippet></ROW><ROW><id>3140676</id><snippet>mul</snippet></ROW><ROW><id>3140834</id><snippet>tr/td[@class='name']/following-sibling::td
</snippet></ROW><ROW><id>3140834</id><snippet>tr[td[@class='name'] ='Brand']/td[@class='desc']
</snippet></ROW><ROW><id>3140834</id><snippet>tr</snippet></ROW><ROW><id>3140834</id><snippet>tr</snippet></ROW><ROW><id>3140834</id><snippet>td</snippet></ROW><ROW><id>3140834</id><snippet>class</snippet></ROW><ROW><id>3140834</id><snippet>'name'</snippet></ROW><ROW><id>3140834</id><snippet>td</snippet></ROW><ROW><id>3140834</id><snippet>class</snippet></ROW><ROW><id>3140834</id><snippet>'desc'</snippet></ROW><ROW><id>3140971</id><snippet>if</snippet></ROW><ROW><id>3141216</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>3141216</id><snippet>x=1, a=1, b=2, c=3</snippet></ROW><ROW><id>3141216</id><snippet>x</snippet></ROW><ROW><id>3141216</id><snippet>&gt;&gt;&gt; def f(x): pass
... 
&gt;&gt;&gt; f(1, x=2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'x'
&gt;&gt;&gt; f(x=2, *(1,))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() got multiple values for keyword argument 'x'
</snippet></ROW><ROW><id>3141447</id><snippet># main.py

# ...snip...

if __name__ == '__main__':

    # Handle configuration settings, calling cherrypy.tree.mount in the process
    generate_app(options.environment)

    # Run the web server
    engine = cherrypy.engine
    try:
        engine.start()
    except:
        sys.exit(1)
    else:
        engine.block()
</snippet></ROW><ROW><id>3141611</id><snippet>values</snippet></ROW><ROW><id>3141611</id><snippet>dict</snippet></ROW><ROW><id>3141611</id><snippet>soup.findAll</snippet></ROW><ROW><id>3141611</id><snippet>values = dict(soup.findAll('input',checked="checked"))
</snippet></ROW><ROW><id>3141611</id><snippet>soup.findAll</snippet></ROW><ROW><id>3141611</id><snippet>soup.findAll</snippet></ROW><ROW><id>3141611</id><snippet>findAll</snippet></ROW><ROW><id>3141611</id><snippet>for cell in values:
    for attribute in cell:
        out.write(attribute + ';' + str(cell[attribute]) + ';\r')
</snippet></ROW><ROW><id>3141837</id><snippet>import re

# Don't bother matching everything, just the bits that matter.
pat = re.compile(r'AssemblyFileVersion.*\.(\d+)"')


# ... lines omitted which set up read_file, write_file etc.

for line in read_file:
    m = pat.search(line)
    if m:
        start, end = m.span(1)
        line = line[:start] + str(int(line[start:end]) + 1) + line[end:]
    write_file.write(line)
</snippet></ROW><ROW><id>3141905</id><snippet>DATABASE_ENGINE = 'mysql'
DATABASE_OPTIONS = {"init_command": "SET storage_engine=INNODB"}
</snippet></ROW><ROW><id>3141905</id><snippet>DATABASES = {
             'default': {
                         'ENGINE': 'mysql',
                         'OPTIONS': {'init_command': 'SET storage_engine=INNODB'}
                        }
            }
</snippet></ROW><ROW><id>3142228</id><snippet>f = open("tools.tar.gz", "wb")
</snippet></ROW><ROW><id>3142228</id><snippet>\n</snippet></ROW><ROW><id>3142228</id><snippet>\r\n</snippet></ROW><ROW><id>3142319</id><snippet>_sre.so</snippet></ROW><ROW><id>3142319</id><snippet>cp = re.compile(ur"""
(?:(
    # Numbered books
    (?:(?:Third|Thir|Thi|III|3rd|Th|3)\ ? 
       (?:John|Joh|Jhn|Jo|Jn|Jn|J))
    # Other books
    |Thessalonians|John|Th|Jn)\ ? 
  # Lookahead for numbers or punctuation
  (?![^\d:., ]))

|
</snippet></ROW><ROW><id>3142319</id><snippet>(?=[\d:., ]))</snippet></ROW><ROW><id>3142319</id><snippet>(?![^\d:., ]))</snippet></ROW><ROW><id>3142319</id><snippet>_sre.so</snippet></ROW><ROW><id>3142379</id><snippet>for x in range(2,int(sqrt(num))):
    if( num % x == 0 ):
        flag = False
</snippet></ROW><ROW><id>3142379</id><snippet>range(2, Y)</snippet></ROW><ROW><id>3142379</id><snippet>Y</snippet></ROW><ROW><id>3142379</id><snippet>1 + int(...</snippet></ROW><ROW><id>3142379</id><snippet>range</snippet></ROW><ROW><id>3142379</id><snippet>if somebool: return True
else: return False
</snippet></ROW><ROW><id>3142379</id><snippet>return somebool</snippet></ROW><ROW><id>3142379</id><snippet>from math import sqrt

def isPrime(num):
    for x in range(3, int(1 + sqrt(num)), 2):
        if num % x == 0: return False
    return True

def main():
    i, n = 0, 3
    end = 6
    while i &lt; end:
        if isPrime(n):
            i += 1
            print n
        n += 2

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3142379</id><snippet>n</snippet></ROW><ROW><id>3142379</id><snippet>range</snippet></ROW><ROW><id>3142379</id><snippet>def isPrime(num):
    return all(num % x for x n range(3, int(1 + sqrt(num)), 2))
</snippet></ROW><ROW><id>3142379</id><snippet>all</snippet></ROW><ROW><id>3142379</id><snippet>import itertools as it

def odd():
    for n in it.count(1):
        yield n + n + 1

def main():
    end = 5        
    for i, n in enumerate(it.ifilter(isPrime, odd())):
        print n
        if i &gt;= end: break
</snippet></ROW><ROW><id>3142379</id><snippet>odd</snippet></ROW><ROW><id>3142379</id><snippet>enumerate</snippet></ROW><ROW><id>3142379</id><snippet>itertools</snippet></ROW><ROW><id>3142379</id><snippet>enumerate</snippet></ROW><ROW><id>3142379</id><snippet>all</snippet></ROW><ROW><id>3142379</id><snippet>any</snippet></ROW><ROW><id>3142379</id><snippet>itertools</snippet></ROW><ROW><id>3142379</id><snippet>itertools</snippet></ROW><ROW><id>3142408</id><snippet>exarkun@boson:/tmp/irc-server$ cat &gt; passwd
alice:secret
bob:19820522
exarkun@boson:/tmp/irc-server$ twistd -n words --irc-port 6667 --auth file:passwd
2010-06-29 11:51:26-0400 [-] Log opened.
2010-06-29 11:51:26-0400 [-] twistd 10.0.0+r29436 (/usr/bin/python 2.6.4) starting up.
2010-06-29 11:51:26-0400 [-] reactor class: twisted.internet.selectreactor.SelectReactor.
2010-06-29 11:51:26-0400 [-] twisted.words.service.IRCFactory starting on 6667
2010-06-29 11:51:26-0400 [-] Starting factory &lt;twisted.words.service.IRCFactory instance at 0x9ddbf8c&gt;
</snippet></ROW><ROW><id>3142408</id><snippet>twisted.words.protocols.irc.IRC</snippet></ROW><ROW><id>3142408</id><snippet>twistd words</snippet></ROW><ROW><id>3142445</id><snippet>"1/2/3".split("/")
</snippet></ROW><ROW><id>3142445</id><snippet>strip('/')</snippet></ROW><ROW><id>3142578</id><snippet>get</snippet></ROW><ROW><id>3142578</id><snippet>list</snippet></ROW><ROW><id>3142578</id><snippet>def get(alist, index, default):
  try: return alist[index]
  except IndexError: return default
</snippet></ROW><ROW><id>3142578</id><snippet>abcd = [1, 2, 3, 4]
item = get(abcd, 5, 0)
</snippet></ROW><ROW><id>3142578</id><snippet>list</snippet></ROW><ROW><id>3142578</id><snippet>class mylist(list):
  def get(self, index, default):
    try: return self[index]
    except IndexError: return default
</snippet></ROW><ROW><id>3142578</id><snippet>abcd = mylist([1, 2, 3, 4])
item = abcd.get(5, 0)
</snippet></ROW><ROW><id>3142769</id><snippet>&gt;&gt;&gt; exist = {u'title': 2, u'actual bitrate': 4, u'id': 1, u'game slot': 0, u'Suggested Bitrate': 3}
&gt;&gt;&gt; l = [1.0, u'GOLD_Spider Solitaire', u'Spider\\nSolitaire', 120000.0, 120000.0]
&gt;&gt;&gt; dict((k, l[v]) for k, v in exist.iteritems())
{u'Suggested Bitrate': 120000.0, u'game slot': 1.0, u'actual bitrate': 120000.0, u'id': u'GOLD_Spider Solitaire', u'title': u'Spider\\nSolitaire'}
</snippet></ROW><ROW><id>3142769</id><snippet>&gt;&gt;&gt; {k: l[v] for k, v in exist.items()}
{'Suggested Bitrate': 120000.0, 'game slot': 1.0, 'actual bitrate': 120000.0, 'id': 'GOLD_Spider Solitaire', 'title': 'Spider\\nSolitaire'}
</snippet></ROW><ROW><id>3143047</id><snippet>sorted(score.items(), key=lambda x:-x[1])
</snippet></ROW><ROW><id>3143047</id><snippet>&gt;&gt;&gt; score= {1:0.98876, 8:0.12245, 13:0.57689}
&gt;&gt;&gt; sorted(score.items(), key=lambda x:-x[1])
[(1, 0.98875999999999997), (13, 0.57689000000000001), (8, 0.12245)]
&gt;&gt;&gt; print [(y,x) for (x,y) in _]
[(0.98875999999999997, 1), (0.57689000000000001, 13), (0.12245, 8)]
</snippet></ROW><ROW><id>3143120</id><snippet>import gio
import os

def directory_changed(monitor, file1, file2, evt_type):
    if os.path.isdir(file2):    #maybe this needs to be file1?
        add_monitor(file2) 
    print "Changed:", file1, file2, evt_type

def add_monitor(dir):
    gfile = gio.File(dir)
    monitor = gfile.monitor_directory(gio.FILE_MONITOR_NONE, None)
    monitor.connect("changed", directory_changed) 

add_monitor('.')

import glib
ml = glib.MainLoop()
ml.run()
</snippet></ROW><ROW><id>3143120</id><snippet>os.listdir</snippet></ROW><ROW><id>3143120</id><snippet>import time
import os

class Watcher(object):
    def __init__(self):
        self.dirs = []
        self.snapshots = {}

    def add_dir(self, dir):
        self.dirs.append(dir)

    def check_for_changes(self, dir):
        snapshot = self.snapshots.get(dir)
        curstate = os.listdir(dir)
        if not snapshot:
            self.snapshots[dir] = curstate
        else:
            if not snapshot == curstate:
                print 'Changes: ',
                for change in set(curstate).symmetric_difference(set(snapshot)):
                    if os.path.isdir(change):
                        print "isdir"
                        self.add_dir(change)
                    print change,

                self.snapshots[dir] = curstate
                print

    def mainloop(self):
        if len(self.dirs) &lt; 1:
            print "ERROR: Please add a directory with add_dir()"
            return

        while True:
            for dir in self.dirs:
                self.check_for_changes(dir)
            time.sleep(4) # Don't want to be a resource hog

w = Watcher()
w.add_dir('.')


w.mainloop()
</snippet></ROW><ROW><id>3143260</id><snippet>alist = cursor.fetchall()</snippet></ROW><ROW><id>3143260</id><snippet>tuple(i[0] for i in alist)</snippet></ROW><ROW><id>3143432</id><snippet>itertools</snippet></ROW><ROW><id>3143432</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3143561</id><snippet>consumer.register('kind', callback_func)
consumer.wait()
# more code goes here...
</snippet></ROW><ROW><id>3143561</id><snippet>raise</snippet></ROW><ROW><id>3143561</id><snippet>callback_func</snippet></ROW><ROW><id>3143561</id><snippet>wait()</snippet></ROW><ROW><id>3143561</id><snippet>unittest</snippet></ROW><ROW><id>3143774</id><snippet>import cProfile
cProfile.runctx('self.doSomething()',globals(),locals())
</snippet></ROW><ROW><id>3143774</id><snippet>import cProfile
cProfile.runctx('self.doSomething(x,y,z)',globals(),locals())
</snippet></ROW><ROW><id>3143867</id><snippet>items = ['foo','bar','item','item2','item3']
for elm in items:
    setattr(self.ui, elm, False)
</snippet></ROW><ROW><id>3143932</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; print(''.join(inspect.getsourcelines(inspect.getsourcelines)[0]))
def getsourcelines(object):
    """Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An IOError is
    raised if the source code cannot be retrieved."""
    lines, lnum = findsource(object)

    if ismodule(object): return lines, 0
    else: return getblock(lines[lnum:]), lnum + 1
</snippet></ROW><ROW><id>3143943</id><snippet>parent</snippet></ROW><ROW><id>3143943</id><snippet>mptt.register(MyModel)</snippet></ROW><ROW><id>3144107</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3144107</id><snippet>sys.path.append('/path/to/search')</snippet></ROW><ROW><id>3144107</id><snippet>sys.path</snippet></ROW><ROW><id>3144107</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3144107</id><snippet>sys.path</snippet></ROW><ROW><id>3144107</id><snippet>site.addsitedir</snippet></ROW><ROW><id>3144107</id><snippet>sys.path</snippet></ROW><ROW><id>3144107</id><snippet>addsitedir</snippet></ROW><ROW><id>3144107</id><snippet>.pth</snippet></ROW><ROW><id>3144107</id><snippet>sys.path</snippet></ROW><ROW><id>3144107</id><snippet>site-packages</snippet></ROW><ROW><id>3144107</id><snippet>sys.path</snippet></ROW><ROW><id>3144107</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3144107</id><snippet>from os.path import dirname
sys.path.append(dirname(__file__))
</snippet></ROW><ROW><id>3144567</id><snippet>import termios, fcntl, sys, os
fd = sys.stdin.fileno()

oldterm = termios.tcgetattr(fd)
newattr = termios.tcgetattr(fd)
newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO
termios.tcsetattr(fd, termios.TCSANOW, newattr)

oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

try:
    while 1:
        try:
            c = sys.stdin.read(1)
            print "Got character", `c`
        except IOError: pass
finally:
    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
</snippet></ROW><ROW><id>3144906</id><snippet>import time
start = time.time()
do_long_code()
print "it took", time.time() - start, "seconds."
</snippet></ROW><ROW><id>3144906</id><snippet>def test():
    "Time me"
    L = []
    for i in range(100):
        L.append(i)

if __name__=='__main__':
    from timeit import Timer
    t = Timer("test()", "from __main__ import test")
    print t.timeit()
</snippet></ROW><ROW><id>3145092</id><snippet>s[i:i+60]</snippet></ROW><ROW><id>3145092</id><snippet>s[i:i+60]</snippet></ROW><ROW><id>3145102</id><snippet>#!/usr/bin/env python

from  PyQt4.QtGui import *
from  PyQt4.QtCore import *
from PyQt4.QtSvg import *
import sys

if __name__ == '__main__':

    app = QApplication(sys.argv)

    data = """... (my valid svg) ..."""

    svg = QSvgRenderer(QByteArray(data))
    qim = QImage(int(2000), int(1000), QImage.Format_ARGB32)                                                                                                                                                                                 
    painter = QPainter()

    painter.begin(qim)
    svg.render(painter)
    painter.end()

    print "null:", qim.isNull()
    qim.save('test2.png')
</snippet></ROW><ROW><id>3145263</id><snippet>#original code ....
linecount += 1

#this is modified section
t = self._testReplacePDFTag.search(lines)
if t:
    tMatchList = self._testReplacePDFTag.findall(lines)

#end modified section

pMatchList = self._pdfPathRegex.findall(lines)
</snippet></ROW><ROW><id>3145306</id><snippet>$</snippet></ROW><ROW><id>3145306</id><snippet>$ a=$'abc     def\nghi  jkl'    # a way to get a newline in the value in a readable way
$ echo $a                       # without quotes, whitespace is collapsed
abc def ghi jkl
$ echo "$a"                     # with quotes it's preserved
abc     def
ghi  jkl
</snippet></ROW><ROW><id>3145306</id><snippet>grep</snippet></ROW><ROW><id>3145306</id><snippet>find</snippet></ROW><ROW><id>3145306</id><snippet>join</snippet></ROW><ROW><id>3145306</id><snippet>paste</snippet></ROW><ROW><id>3145306</id><snippet>pr</snippet></ROW><ROW><id>3145306</id><snippet>sed</snippet></ROW><ROW><id>3145306</id><snippet>bc</snippet></ROW><ROW><id>3145308</id><snippet>&gt;&gt;&gt; re.search(u'[\u30a0-\u30ff]', u'カタカナ')
&lt;_sre.SRE_Match object at 0x7fa0dbb62578&gt;
</snippet></ROW><ROW><id>3145363</id><snippet>None</snippet></ROW><ROW><id>3145363</id><snippet>class Unusable:
    def __init__(self):
        self.alive = True

    def notcleanedup(func):
        def operation(self, *args, **kwargs):
            if self.alive:
                func(self, *args, **kwargs)
            else:
                raise Exception("Use after cleanup")

        return operation

    @notcleanedup
    def sensitive(self, a, b):
        print a, b

    def cleanup(self):
        self.alive = False
</snippet></ROW><ROW><id>3145390</id><snippet>sum(int(n) for n in str(2**1000))
</snippet></ROW><ROW><id>3145470</id><snippet>def foo(): pass
foo[3]
</snippet></ROW><ROW><id>3145470</id><snippet>wordify(40)</snippet></ROW><ROW><id>3145470</id><snippet>"fourty"</snippet></ROW><ROW><id>3145470</id><snippet>"forty"</snippet></ROW><ROW><id>3145496</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3145496</id><snippet>class Article(object):
    def __init__(self, pub_date):
        self.pub_date = pub_date


if __name__ == '__main__':
    from datetime import date
    import itertools
    import operator

    # You'll use your Article query here instead:
    # a_list = Article.objects.filter(pub_date__lte = date.today())
    a_list = [
        Article(date(2010, 1, 2)),
        Article(date(2010, 2, 3)),
        Article(date(2010, 1, 2)),
        Article(date(2011, 3, 2)),
    ]


    keyfunc = operator.attrgetter('pub_date')

    a_list = sorted(a_list, key = keyfunc)
    group_list = [{ k.strftime('%Y-%m-%d') : list(g)} 
                  for k, g in itertools.groupby(a_list, keyfunc)]

    print group_list
</snippet></ROW><ROW><id>3145496</id><snippet>[{'2010-01-02': [&lt;__main__.Article object at 0xb76c4fec&gt;, &lt;__main__.Article object at 0xb76c604c&gt;]}, {'2010-02-03': [&lt;__main__.Article object at 0xb76c602c&gt;]}, {'2011-03-02': [&lt;__main__.Article object at 0xb76c606c&gt;]}]
</snippet></ROW><ROW><id>3145852</id><snippet>def conjoin(*fns):
    def conjoined(x):
        for fn in fns:
            if not fn(x): return False
        return True
    return conjoined
</snippet></ROW><ROW><id>3145852</id><snippet>ifilter(conjoined(lambda x: x not in block_list, lambda x: x in accept_list),
        read_records(filename))
</snippet></ROW><ROW><id>3145852</id><snippet>disjoin</snippet></ROW><ROW><id>3145852</id><snippet>def disjoin(*fns):
    def disjoined(x):
        for fn in fns:
            if fn(x): return True
        return False
    return disjoined
</snippet></ROW><ROW><id>3145852</id><snippet>x</snippet></ROW><ROW><id>3145852</id><snippet>all</snippet></ROW><ROW><id>3145852</id><snippet>any</snippet></ROW><ROW><id>3145852</id><snippet>invert</snippet></ROW><ROW><id>3145852</id><snippet>def invert(fn):
    return lambda x: not fn(x)
</snippet></ROW><ROW><id>3145913</id><snippet>t</snippet></ROW><ROW><id>3145913</id><snippet>if z==s and int(z)&gt;t:
    t = int(z)
</snippet></ROW><ROW><id>3145913</id><snippet>if z==s:
    t = max(t,int(z))
</snippet></ROW><ROW><id>3145913</id><snippet>def isPalindrome(x):
    s = str(x)
    return s == s[::-1]

t = 0
for x in range(100, 1000):
    for y in range(100, 1000):
        z = x * y
        if isPalindrome(z) and z &gt; t:
            t = z
print t
</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>4</snippet></ROW><ROW><id>3145965</id><snippet>def makeActions():
    def make_lambda( j ):
        return lambda x: j * x # the j here is still a name, but now it wont change anymore

    acts = []
    for i in range(5):
        # now you're pushing the current i as a value to another scope and 
        # bind it there, under a new name
        acts.append(make_lambda(i))
    return acts
</snippet></ROW><ROW><id>3145965</id><snippet>i = 5 
myList = [i, i, i] 
i = 6
print(myList) # myList is still [5, 5, 5].
</snippet></ROW><ROW><id>3145965</id><snippet>i=6</snippet></ROW><ROW><id>3145965</id><snippet>6</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>myList = [i, i, i]</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>mylist[0], mylist[1], mylist[2]</snippet></ROW><ROW><id>3145965</id><snippet>mylist[0]=5</snippet></ROW><ROW><id>3145965</id><snippet>mylist[1]=5</snippet></ROW><ROW><id>3145965</id><snippet>mylist[2]=5</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>myList</snippet></ROW><ROW><id>3145965</id><snippet>mylist[0]</snippet></ROW><ROW><id>3145965</id><snippet>=</snippet></ROW><ROW><id>3145965</id><snippet>=</snippet></ROW><ROW><id>3145965</id><snippet>lambda x:x**i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>makeActions</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145965</id><snippet>i</snippet></ROW><ROW><id>3145985</id><snippet>def format_row [html] (head, value):
    "&lt;tr valign=top align=left&gt;\n"
    "  &lt;th align=left&gt;%s&lt;/th&gt;\n" % head
    "  &lt;td&gt;%s&lt;/td&gt;\n" % value
    "&lt;/tr&gt;\n"
</snippet></ROW><ROW><id>3145985</id><snippet>[html]</snippet></ROW><ROW><id>3145985</id><snippet>Quixote</snippet></ROW><ROW><id>3145985</id><snippet>[html]</snippet></ROW><ROW><id>3145985</id><snippet>.ptl</snippet></ROW><ROW><id>3145985</id><snippet>import</snippet></ROW><ROW><id>3145985</id><snippet>Quixote</snippet></ROW><ROW><id>3145985</id><snippet>&gt;&gt;&gt; from nevow import flat, stan
&gt;&gt;&gt; html = stan.Tag('html')
&gt;&gt;&gt; p = stan.Tag('p')
&gt;&gt;&gt; someStan = html[ p(style='font-family: Verdana;')[ "Hello, ", "world!" ] ]
&gt;&gt;&gt; flat.flatten(someStan)
'&lt;html&gt;&lt;p style="font-family: Verdana;"&gt;Hello, world!&lt;/p&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>3146014</id><snippet>GetBetSize</snippet></ROW><ROW><id>3146038</id><snippet>@staticmethod</snippet></ROW><ROW><id>3146038</id><snippet>class Globals:
    __master = None
    somevar = 1
    othervar = 2

    @staticmethod
    def get_master():
        if Globals.__master is None:
            Globals.__master = Globals()

        return Globals.__master

g1 = Globals.get_master()
g2 = Globals.get_master()
g1.somevar += 1

print g1.somevar
print g2.somevar
</snippet></ROW><ROW><id>3146038</id><snippet>2
2
</snippet></ROW><ROW><id>3146197</id><snippet>import functools

class MetaTrackinits(type):

  being_inited = []

  def __new__(cls, n, b, d):
    clob = type.__new__(cls, n, b, d)

    theinit = getattr(clob, '__init__')
    @functools.wraps(theinit)
    def __init__(self, *a, **k):
      MetaTrackinits.being_inited.append(self)
      try: theinit(self, *a, **k)
      finally: MetaTrackinits.being_inited.pop()
    setattr(clob, '__init__', __init__)

    def Instantiator(self, where=-2):
      return MetaTrackinits.being_inited[where]
    setattr(clob, 'Instantiator', Instantiator)

    return clob

__metaclass__ = MetaTrackinits


class Parent():
  def __init__(self):
    self.child = Child()

class Child():
  def __init__(self):
    self.parent = self.Instantiator()


p = Parent()
print p
print p.child.parent
</snippet></ROW><ROW><id>3146197</id><snippet>&lt;__main__.Parent object at 0xd0750&gt;
&lt;__main__.Parent object at 0xd0750&gt;
</snippet></ROW><ROW><id>3146197</id><snippet>__metaclass__</snippet></ROW><ROW><id>3146279</id><snippet>import StringIO
import mox
import urllib2
from lxml import etree

# set up the test
m = mox.Mox()
response = StringIO.StringIO("""&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;foo&gt;bar&lt;/foo&gt;""")
m.StubOutWithMock(urllib2, 'urlopen')
urllib2.urlopen(mox.IgnoreArg(), timeout=10).AndReturn(response)
m.ReplayAll()

# code under test
response2 = urllib2.urlopen("http://rss.slashdot.org/Slashdot/slashdot", timeout=10)
xcontent = etree.parse(response2)

# verify test
m.VerifyAll()
</snippet></ROW><ROW><id>3146588</id><snippet>javascript</snippet></ROW><ROW><id>3146588</id><snippet>super()</snippet></ROW><ROW><id>3146588</id><snippet>super()</snippet></ROW><ROW><id>3146588</id><snippet>javascript</snippet></ROW><ROW><id>3146588</id><snippet>{% block javascript %}
    {{ super() }}

    function foo(x, y) {
        return x + y;
    }
{% endblock %}
</snippet></ROW><ROW><id>3146590</id><snippet>open()</snippet></ROW><ROW><id>3147584</id><snippet>s = "fname:John,lname:doe,mname:dunno,city:Florida"
sd = dict(u.split(":") for u in s.split(","))
</snippet></ROW><ROW><id>3147837</id><snippet>  def send_command(self, commands):
</snippet></ROW><ROW><id>3147948</id><snippet>static PyObject* test_method(PyObject* self, PyObject* args)
</snippet></ROW><ROW><id>3147948</id><snippet>test_method</snippet></ROW><ROW><id>3147948</id><snippet>self</snippet></ROW><ROW><id>3147948</id><snippet>test_method</snippet></ROW><ROW><id>3147948</id><snippet>self</snippet></ROW><ROW><id>3147948</id><snippet>Py_InitModule4()</snippet></ROW><ROW><id>3147948</id><snippet>Py_InitModule()</snippet></ROW><ROW><id>3147948</id><snippet>self</snippet></ROW><ROW><id>3147968</id><snippet>echo 'import  __main__,inspect;print inspect.getsource(__main__)' | python
</snippet></ROW><ROW><id>3147968</id><snippet>__main__</snippet></ROW><ROW><id>3147968</id><snippet>dis</snippet></ROW><ROW><id>3147968</id><snippet>$ echo -e 'import  __main__,dis;print dis.dis(__main__)' | python
None
</snippet></ROW><ROW><id>3147968</id><snippet>$ echo -e "import  __main__,dis;print dis.dis(__main__)\ndef x():\n pass" | python
None
</snippet></ROW><ROW><id>3148029</id><snippet>def getNodeDepsTree(self, node, back_path=None):
    """Return whole dependency tree for given node"""
    # List of current node dependencies
    node_deps = []

    if not back_path:
        back_path = []

    # Push current node into return path list
    back_path.append(node)

    # Get current node dependencies list
    deps = getNodeDeps(node)

    for dep in deps:
        # If dependency persist in list of visited nodes - it's a recursion
        if dep in back_path:
            pos = back_path.index(dep)
            self.log.error("Recursive link detected. '" + node
                    + "', contains a recursive link to '" + dep
                    + "'. Removing dependency. Recursive loop is:\n\t"
                    + '\n\t'.join(back_path[pos:]))
            continue
        # Recursively call self for child nodes
        node_deps.extend(self.getNodeDepsTree(dep, back_path))

    # Finally add current node as dependency
    node_deps.append(node)

    # Remove current node from list of visited nodes and return
    back_path.pop()

    return node_deps
</snippet></ROW><ROW><id>3148101</id><snippet>class Personage(models.Model):
    prenom = models.CharField(max_length=255)

    @property
    def first_name(self):
        return self.prenom
</snippet></ROW><ROW><id>3148101</id><snippet>personage = Personage.objects.all()[0]
personage.first_name
</snippet></ROW><ROW><id>3148436</id><snippet>from collections import defaultdict
d = { 'ID' : 0, 'COL1' : 'hi' }
cursor.execute(sql_insert, defaultdict(str, d))
</snippet></ROW><ROW><id>3148436</id><snippet>defaultdict</snippet></ROW><ROW><id>3148436</id><snippet>KeyError</snippet></ROW><ROW><id>3148436</id><snippet>DEFAULTS = { ... whatever ... }
d = { 'ID' : 0, 'COL1' : 'hi' }
cursor.execute(sql_insert, dict(DEFAULTS).update(d))
</snippet></ROW><ROW><id>3148739</id><snippet>def example():
  try:
    return pickle.loads("")
  except EOFError:
    return None
</snippet></ROW><ROW><id>3148964</id><snippet>model_obj</snippet></ROW><ROW><id>3148964</id><snippet>foom2m</snippet></ROW><ROW><id>3148964</id><snippet>related_model = model_obj.__class_.foom2m.field.rel.to
</snippet></ROW><ROW><id>3149375</id><snippet>my.smtp.server.com</snippet></ROW><ROW><id>3149375</id><snippet>my.smtp.server.com</snippet></ROW><ROW><id>3149375</id><snippet>my.smtp.server.com</snippet></ROW><ROW><id>3149493</id><snippet>&gt;&gt;&gt; # Find runs of consecutive numbers using groupby.  The key to the solution
&gt;&gt;&gt; # is differencing with a range so that consecutive numbers all appear in
&gt;&gt;&gt; # same group.
&gt;&gt;&gt; data = [ 1,  4,5,6, 10, 15,16,17,18, 22, 25,26,27,28]
&gt;&gt;&gt; for k, g in groupby(enumerate(data), lambda (i,x):i-x):
...     print map(itemgetter(1), g)
...
[1]
[4, 5, 6]
[10]
[15, 16, 17, 18]
[22]
[25, 26, 27, 28]
</snippet></ROW><ROW><id>3149493</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from itertools import *
&gt;&gt;&gt; seq2 = [1, 2, 4, 5, 6, 8, 9, 10]
&gt;&gt;&gt; list = []
&gt;&gt;&gt; for k, g in groupby(enumerate(seq2), lambda (i,x):i-x):
...     list.append(map(itemgetter(1), g))
... 
&gt;&gt;&gt; print list
[[1, 2], [4, 5, 6], [8, 9, 10]]
</snippet></ROW><ROW><id>3149493</id><snippet>&gt;&gt;&gt; [map(itemgetter(1), g) for k, g in groupby(enumerate(seq2), lambda (i,x):i-x)]
[[1, 2], [4, 5, 6], [8, 9, 10]]
</snippet></ROW><ROW><id>3149511</id><snippet>++</snippet></ROW><ROW><id>3149511</id><snippet>+(+(a))</snippet></ROW><ROW><id>3149511</id><snippet>+= 1</snippet></ROW><ROW><id>3149735</id><snippet>max(enumerate(props), key = lambda tup: len(tup[1]))
</snippet></ROW><ROW><id>3149735</id><snippet>(index, list)</snippet></ROW><ROW><id>3149875</id><snippet>mydll.PrintArray.restype = None
mydll.PrintArray(px)
</snippet></ROW><ROW><id>3150675</id><snippet>python setup.py py2exe
</snippet></ROW><ROW><id>3150768</id><snippet>for p in xrange(7,0, -1):
    parliment = "A%d" % p
    print p
</snippet></ROW><ROW><id>3150768</id><snippet>for year in xrange(2010, 2000, -1):
    print year

for filenum in xrange(100,200):
    fnum = "%.4d" % filenum
    print fnum
</snippet></ROW><ROW><id>3150768</id><snippet># Just create a string with the format specifier in it: %.4d - a [d]ecimal with a
# precision/width of 4 - so instead of 3 you'll get 0003
search_url = "http://www.europarl.europa.eu/sides/getDoc.do?type=REPORT&amp;mode=XML&amp;reference=A7-2010-%.4d&amp;language=EN"

# This creates a Python generator. They're super powerful and fun to use,
# and you can iterate over them, just like a collection.
# 1 is the default step, so no need for it in this case
for number in xrange(1,190):   
    print search_url % number
</snippet></ROW><ROW><id>3150768</id><snippet>search_url = "http://www.europarl.europa.eu/sides/getDoc.do?type=REPORT&amp;mode=XML&amp;reference=A%d-%d-%.4d&amp;language=EN"</snippet></ROW><ROW><id>3150768</id><snippet>%d</snippet></ROW><ROW><id>3150768</id><snippet>%d</snippet></ROW><ROW><id>3150768</id><snippet>%.4d</snippet></ROW><ROW><id>3150768</id><snippet>print search_url % (parliment, year, number)</snippet></ROW><ROW><id>3150901</id><snippet>items = ['foo', 'bar', 'item', 'item2', 'item3']
for elm in items:
    getattr(self.ui, elm).setEnabled(False)
</snippet></ROW><ROW><id>3151011</id><snippet>self.request.get()</snippet></ROW><ROW><id>3151011</id><snippet>json.loads()</snippet></ROW><ROW><id>3151011</id><snippet>json.load()</snippet></ROW><ROW><id>3151065</id><snippet>python aloha.py 5</snippet></ROW><ROW><id>3151065</id><snippet>s = 5</snippet></ROW><ROW><id>3151141</id><snippet>attribute1 = self.attribute1
# do stuff with attribute1
</snippet></ROW><ROW><id>3151171</id><snippet>"'"</snippet></ROW><ROW><id>3151171</id><snippet>'\''</snippet></ROW><ROW><id>3151171</id><snippet>&gt;&gt;&gt; "didn't".replace("'", "")
'didnt'
</snippet></ROW><ROW><id>3151575</id><snippet>main.py</snippet></ROW><ROW><id>3151575</id><snippet>app.yaml</snippet></ROW><ROW><id>3151882</id><snippet>#!/bin/bash
packages=($1)
targets=($2)
if (("${#packages[@]}" != "${#targets[@]}"))
then
    echo 'Number of packages and number of targets differ' &gt;&amp;2
    exit 1
fi
for index in "${!packages[@]}"
do
    package="${packages[$index]}"
    target="${targets[$index]}"
    package_fs="debian/tmp/$package"
    mkdir -p "$package_fs"
    make "DESTDIR=$package_fs" "$target"
done
</snippet></ROW><ROW><id>3151903</id><snippet>import re

linend = re.compile(r'\r\n\r\n|\n\n')
s = 'an example\n\nstring\n\nhere'
print linend.split(s, 1)
s = 'another\r\n\r\nexample\r\n\r\nhere'
print linend.split(s, 1)
</snippet></ROW><ROW><id>3151903</id><snippet>['an example', 'string\n\nhere']
['another', 'example\r\n\r\nhere']
</snippet></ROW><ROW><id>3152044</id><snippet>def ensure_even(argnum):
  def fdec(func):
    def f(*args, **kwargs):
      assert(args[argnum] % 2 == 0)  #or assert(not args[argnum] % 2)
      return func(*args, **kwargs)
    return f
  return fdec
</snippet></ROW><ROW><id>3152044</id><snippet>@ensure_even(1)  #2nd argument must be even
def test(arg1, arg2):
  print(arg2)

test(1,2) #succeeds
test(1,3) #fails
</snippet></ROW><ROW><id>3152228</id><snippet>from google.appengine.ext import db

k = db.Key('agNiYXpyDAsSA2ZvbyIDYmFyDA')
_app = k.app()
path = []
while k is not None:
  path.append(k.id_or_name())
  path.append(k.kind())
  k = k.parent()
path.reverse()
print 'app=%r, path=%r' % (_app, path)
</snippet></ROW><ROW><id>3152228</id><snippet>app=u'baz', path=[u'foo', u'bar']
</snippet></ROW><ROW><id>3152228</id><snippet>to_path</snippet></ROW><ROW><id>3152228</id><snippet>Key</snippet></ROW><ROW><id>3152228</id><snippet>k = db.Key('agNiYXpyDAsSA2ZvbyIDYmFyDA')
_app = k.app()
path = k.to_path()
print 'app=%r, path=%r' % (_app, path)
</snippet></ROW><ROW><id>3152236</id><snippet>(?P&lt;name&gt;CONTENTS)
</snippet></ROW><ROW><id>3152236</id><snippet>r.group("name")</snippet></ROW><ROW><id>3152236</id><snippet>r.group("usethis")</snippet></ROW><ROW><id>3152236</id><snippet>usethis</snippet></ROW><ROW><id>3152329</id><snippet>def __before__(self):
    model.Session.close()
</snippet></ROW><ROW><id>3152368</id><snippet>result = re.findall("(?:^|\s)(#[a-zA-Z]+)", text, re.MULTILINE)
</snippet></ROW><ROW><id>3152719</id><snippet>import wave

start_time = 5.43
stop_time = 5.81
time_period = stop_time - start_time
wav = wave.open('test.wav')
time_period_frames = time_period * wav.getnframes()
</snippet></ROW><ROW><id>3152846</id><snippet>incoming_data = [item.split(",")[1] for item in stream if item]
</snippet></ROW><ROW><id>3152846</id><snippet>if item</snippet></ROW><ROW><id>3152846</id><snippet>stream</snippet></ROW><ROW><id>3152922</id><snippet>Point</snippet></ROW><ROW><id>3152922</id><snippet>point</snippet></ROW><ROW><id>3152922</id><snippet>__add__</snippet></ROW><ROW><id>3152922</id><snippet>__sub__</snippet></ROW><ROW><id>3152922</id><snippet>__iadd__</snippet></ROW><ROW><id>3152922</id><snippet>__isub__</snippet></ROW><ROW><id>3152922</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, p):
        return Point(self.x + p.x, self.y + p.y)

    def __sub__(self, p):
        return Point(self.x - p.x, self.y - p.y)
</snippet></ROW><ROW><id>3152922</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def _adjust(self, x, y):
        return Point(self.x + x, self.y + y)

    def __add__(self, p):
        return self._adjust(p.x, p.y)

    def __sub__(self, p):
        return self._adjust(-p.x, -p.y)
</snippet></ROW><ROW><id>3153049</id><snippet>def __number():
    # "Factura" object in format "n/year"
    latest_object = Factura.objects.filter(f_type__exact=False).latest('number')

    # Better name can be available if you explain why the first number is important and what it means
    # Do Factura objects not have a __repr__ or __str__ method that you must cast it?
    first_number = int(str(latest_object).split('/')[0])
    current_year = date.today().strftime('%y')
    # Use "is None" rather than "== None"
    if first_number is None:
        return '1/%d' % current_year
    # No else needed because of return above
    # Why do we add 1 to first number? Comments should explain _why_, not how
    return '%d/%d' % (first_number + 1, current_year)
</snippet></ROW><ROW><id>3153143</id><snippet>class Category(models.Model):
   name = models.CharField(max_length=30, unique=True)

   def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>3153184</id><snippet>print MyClass.mynum
</snippet></ROW><ROW><id>3153184</id><snippet>self.mynum += 1
</snippet></ROW><ROW><id>3153184</id><snippet>self.mylist.append("Hey!")
</snippet></ROW><ROW><id>3153184</id><snippet>print MyClass.mylist
</snippet></ROW><ROW><id>3153537</id><snippet>numpy.where()</snippet></ROW><ROW><id>3153850</id><snippet>cvFindHomography</snippet></ROW><ROW><id>3153850</id><snippet>cvWarpPerspective</snippet></ROW><ROW><id>3154036</id><snippet>list</snippet></ROW><ROW><id>3154036</id><snippet>&gt;&gt;&gt; a = [1,1,2,3,5,8,13,21]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for x in itertools.takewhile(lambda val: val != 8, a):
...     print x
...
1
1
2
3
5
</snippet></ROW><ROW><id>3154278</id><snippet>class Lexer:
    DATE = 1
    STRING = 2
    COMMA = 3
    COLON = 4
    BIRTHDAY = 5
    OF = 6

    keywords = { 'birthday': BIRTHDAY, 'of': OF, ',': COMMA, ':', COLON }

    def next_token():
        if have_saved_token:
            have_saved_token = False
            return saved_type, saved_value
        if date_re.match(): return DATE, date
        str = read_word()
        if str in keywords.keys(): return keywords[str], str
        return STRING, str

    def keep(type, value):
        have_saved_token = True
        saved_type = type
        saved_value = value
</snippet></ROW><ROW><id>3154278</id><snippet>'s</snippet></ROW><ROW><id>3154278</id><snippet>s</snippet></ROW><ROW><id>3154278</id><snippet>def parseNameInPluralForm():
    name = parseName()
    if name.ends_with("'s"): name.remove_from_end("'s")
    elif name.ends_with("s"): name.remove_from_end("s")
    return name
</snippet></ROW><ROW><id>3154278</id><snippet>first-name</snippet></ROW><ROW><id>3154278</id><snippet>first-name last-name</snippet></ROW><ROW><id>3154278</id><snippet>def parseName():
    type, firstName = Lexer.next_token()
    if type != Lexer.STRING: raise ParseError()
    type, lastName = Lexer.next_token()
    if type == Lexer.STRING: # first-name last-name
        return firstName + ' ' + lastName
    else:
        Lexer.keep(type, lastName)
        return firstName
</snippet></ROW><ROW><id>3154278</id><snippet>def parseBirthday():
    type, data = Lexer.next_token()
    if type == Lexer.DATE: # 1, 3 &amp; 4
        date = data
        type, data = Lexer.next_token()
        if type == Lexer.COLON or type == Lexer.COMMA: # 1 &amp; 4
            person = parsePersonInPluralForm()
            type, data = Lexer.next_token()
            if type != Lexer.BIRTHDAY: raise ParseError()
        elif type == Lexer.BIRTHDAY: # 3
            type, data = Lexer.next_token()
            if type != Lexer.OF: raise ParseError()
            person = parsePerson()
    elif type == Lexer.STRING: # 2 &amp; 5
        Lexer.keep(type, data)
        person = parsePersonInPluralForm()
        type, data = Lexer.next_token()
        if type != Lexer.BIRTHDAY: raise ParseError()
        type, data = Lexer.next_token()
        if type == Lexer.COMMA: # 2
            type, data = Lexer.next_token()
        if type != Lexer.DATE: raise ParseError()
        date = data
    else:
        raise ParseError()
    return person, date
</snippet></ROW><ROW><id>3154308</id><snippet>def get_width(num_characters):
    return int((1+num_characters) * 256)
</snippet></ROW><ROW><id>3154417</id><snippet>items = soup.findAll(id="info")
print items[0].span.b.contents[0]
print items[0].contents[3].strip()
print items[0].contents[5].strip().split(":", 1)[1]
</snippet></ROW><ROW><id>3154466</id><snippet>BlissLiesHere</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154494</id><snippet>handleCommand</snippet></ROW><ROW><id>3154494</id><snippet>def handleCommand(self, command, prefix, params):
    """Determine the function to call for the given command and call
    it with the given arguments.
    """
    method = getattr(self, "irc_%s" % command, None)
    try:
        if method is not None:
            method(prefix, params)
        else:
            self.irc_unknown(prefix, command, params)
    except:
        log.deferr()
</snippet></ROW><ROW><id>3154494</id><snippet>getattr</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154494</id><snippet>irc_PRIVMSG</snippet></ROW><ROW><id>3154494</id><snippet>irc_JOIN</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>JOIN</snippet></ROW><ROW><id>3154494</id><snippet>JOIN</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>userJoined</snippet></ROW><ROW><id>3154494</id><snippet>def irc_JOIN(self, prefix, params):
    """  
    Called when a user joins a channel.
    """
    nick = string.split(prefix,'!')[0]
    channel = params[-1]
    if nick == self.nickname:
        self.joined(channel)
    else:
        self.userJoined(nick, channel)
</snippet></ROW><ROW><id>3154494</id><snippet>joined</snippet></ROW><ROW><id>3154494</id><snippet>userJoined</snippet></ROW><ROW><id>3154494</id><snippet>userJoined</snippet></ROW><ROW><id>3154494</id><snippet>joined</snippet></ROW><ROW><id>3154494</id><snippet>privmsg</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>handleCommand</snippet></ROW><ROW><id>3154494</id><snippet>irc_unknown</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154494</id><snippet>handleCommand</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>privmsg</snippet></ROW><ROW><id>3154494</id><snippet>irc_PRIVMSG</snippet></ROW><ROW><id>3154494</id><snippet>privmsg</snippet></ROW><ROW><id>3154494</id><snippet>irc_*</snippet></ROW><ROW><id>3154494</id><snippet>IRCClient</snippet></ROW><ROW><id>3154504</id><snippet>function victim() {
    echo "I should be run";
    killer();
    echo "I should not";
}
function killer() {
    throw new Exception('Die!');
}

try {
    victim();
} catch (Exception $e) {
    // note that catch blocks shouldn't be empty :)
}
echo "This should still run";
</snippet></ROW><ROW><id>3154553</id><snippet>netstat | python read_netstat.py
</snippet></ROW><ROW><id>3154553</id><snippet>import sys
variable = sys.stdin.read()
</snippet></ROW><ROW><id>3154590</id><snippet>id(self.crl)</snippet></ROW><ROW><id>3154590</id><snippet>pycurl.Curl()</snippet></ROW><ROW><id>3154629</id><snippet>def iproduct(lst):
  result = 1
  for i in lst:
    result *= i
  return result
</snippet></ROW><ROW><id>3154629</id><snippet>result</snippet></ROW><ROW><id>3154629</id><snippet>1</snippet></ROW><ROW><id>3154629</id><snippet>1</snippet></ROW><ROW><id>3154629</id><snippet>iproduct(xs + ys) == iproduct(xs) * iproduct(ys)
</snippet></ROW><ROW><id>3154629</id><snippet>xs</snippet></ROW><ROW><id>3154629</id><snippet>ys</snippet></ROW><ROW><id>3154629</id><snippet>iproduct([]) == 1</snippet></ROW><ROW><id>3154629</id><snippet>product()</snippet></ROW><ROW><id>3154629</id><snippet>product([])</snippet></ROW><ROW><id>3154629</id><snippet>[]</snippet></ROW><ROW><id>3154629</id><snippet>product([], xs) == []</snippet></ROW><ROW><id>3154629</id><snippet>product([], xs) == xs</snippet></ROW><ROW><id>3154629</id><snippet>[()]</snippet></ROW><ROW><id>3154629</id><snippet>&gt;&gt;&gt; list(product([()], [1,2,3]))
[((), 1), ((), 2), ((), 3)]
</snippet></ROW><ROW><id>3154629</id><snippet>product()</snippet></ROW><ROW><id>3154629</id><snippet>product(*(xs + ys)) != product(product(*xs), product(*ys))
</snippet></ROW><ROW><id>3154629</id><snippet>[()]</snippet></ROW><ROW><id>3154629</id><snippet>[()]</snippet></ROW><ROW><id>3154629</id><snippet>def tproduct(*xss):
  # the parameters have to be lists of tuples
  return (sum(rs, ()) for rs in product(*xss))
</snippet></ROW><ROW><id>3154629</id><snippet>def tup(x): return (x,)
txs = [map(tup, x) for x in xs]
tys = [map(tup, y) for y in ys]
tproduct(*(txs + tys)) == tproduct(tproduct(*txs), tproduct(*tys))
</snippet></ROW><ROW><id>3154629</id><snippet>tproduct()</snippet></ROW><ROW><id>3154629</id><snippet>product()</snippet></ROW><ROW><id>3154629</id><snippet>[()]</snippet></ROW><ROW><id>3154629</id><snippet>[()]</snippet></ROW><ROW><id>3154629</id><snippet>product()</snippet></ROW><ROW><id>3154629</id><snippet>tproduct()</snippet></ROW><ROW><id>3154667</id><snippet>/usr/local/bin/django-admin.py</snippet></ROW><ROW><id>3154667</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3154667</id><snippet>/usr/bin</snippet></ROW><ROW><id>3154667</id><snippet>$ echo $PATH
/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin:/opt/local/bin:/usr/local/bin:/usr/bin:/bin # and so forth
</snippet></ROW><ROW><id>3154667</id><snippet>.bash_profile</snippet></ROW><ROW><id>3154667</id><snippet>$ /opt/local/bin/python2.6 /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/django/bin/django-admin.py
</snippet></ROW><ROW><id>3154717</id><snippet>save</snippet></ROW><ROW><id>3154717</id><snippet>post</snippet></ROW><ROW><id>3154723</id><snippet>recurse</snippet></ROW><ROW><id>3154723</id><snippet>recurse</snippet></ROW><ROW><id>3154723</id><snippet>function recurse(a, _toplevel=True):
  for child in a.childs:
      recurse(child, False)
  if _toplevel:
      print "Recursion done!"
</snippet></ROW><ROW><id>3154723</id><snippet>_</snippet></ROW><ROW><id>3154723</id><snippet>_toplevel</snippet></ROW><ROW><id>3154723</id><snippet>function recurse(a, _level=0):
  for child in a.childs:
      recurse(child, _level + 1)
  if _level == 0:
      print "Recursion done!"
</snippet></ROW><ROW><id>3154723</id><snippet>_toplevel</snippet></ROW><ROW><id>3155023</id><snippet>floor(log10(abs(n)))</snippet></ROW><ROW><id>3155023</id><snippet>import math
millnames=['','Thousand','Million','Billion','Trillion']
def millify(n):
    n = float(n)
    millidx=max(0,min(len(millnames)-1,
                      int(math.floor(math.log10(abs(n))/3))))
    return '%.0f %s'%(n/10**(3*millidx),millnames[millidx])
</snippet></ROW><ROW><id>3155023</id><snippet>for n in (1.23456789*10**r for r in range(-1,19,2)):
    print '%20.1f: %20s'%(n,millify(n))

                 0.1:                   0 
                12.3:                  12 
              1234.6:           1 Thousand
            123456.8:         123 Thousand
          12345678.9:           12 Million
        1234567890.0:            1 Billion
      123456789000.0:          123 Billion
    12345678900000.0:          12 Trillion
  1234567890000000.0:        1235 Trillion
123456788999999984.0:      123457 Trillion
</snippet></ROW><ROW><id>3155058</id><snippet>&gt;&gt;&gt; import pyparsing as p
&gt;&gt;&gt; ope, clo, com = map(p.Suppress, '(),')
&gt;&gt;&gt; w = p.Word(p.alphas)
&gt;&gt;&gt; s = ope + w + com + w + com + ope + p.delimitedList(w) + clo + clo
&gt;&gt;&gt; x = '(xx,yyy,(aa,bb,cc))'
&gt;&gt;&gt; list(s.parseString(x))
['xx', 'yyy', 'aa', 'bb', 'cc']
</snippet></ROW><ROW><id>3155058</id><snippet>pyparsing</snippet></ROW><ROW><id>3155058</id><snippet>s</snippet></ROW><ROW><id>3155089</id><snippet>302</snippet></ROW><ROW><id>3155089</id><snippet>httplib</snippet></ROW><ROW><id>3155089</id><snippet>urllib</snippet></ROW><ROW><id>3155089</id><snippet>200</snippet></ROW><ROW><id>3155089</id><snippet>httplib</snippet></ROW><ROW><id>3155089</id><snippet>ftp:</snippet></ROW><ROW><id>3155175</id><snippet>counter</snippet></ROW><ROW><id>3155175</id><snippet>&gt;&gt;&gt; secret = os.urandom(16)
&gt;&gt;&gt; crypto = AES.new(os.urandom(32), AES.MODE_CTR, counter=lambda: secret)
&gt;&gt;&gt; encrypted = crypto.encrypt("aaaaaaaaaaaaaaaa")
&gt;&gt;&gt; print crypto.decrypt(encrypted)
aaaaaaaaaaaaaaaa
</snippet></ROW><ROW><id>3155175</id><snippet>import array

class Secret(object):
  def __init__(self, secret=None):
    if secret is None: secret = os.urandom(16)
    self.secret = secret
    self.reset()
  def counter(self):
    for i, c in enumerate(self.current):
      self.current[i] = c + 1
      if self.current: break
    return self.current.tostring()
  def reset(self):
    self.current = array.array('B', self.secret)

secret = Secret()
crypto = AES.new(os.urandom(32), AES.MODE_CTR, counter=secret.counter)
encrypted = crypto.encrypt(16*'a' + 16*'b' + 16*'c')
secret.reset()
print crypto.decrypt(encrypted)
</snippet></ROW><ROW><id>3155458</id><snippet>takewhile(lambda x: x&lt;stop,
  (start+i*step for i in count()))</snippet></ROW><ROW><id>3155458</id><snippet>bigint</snippet></ROW><ROW><id>3155458</id><snippet>xrange</snippet></ROW><ROW><id>3155458</id><snippet>range</snippet></ROW><ROW><id>3155493</id><snippet>__getattr__()</snippet></ROW><ROW><id>3155493</id><snippet>__str__()</snippet></ROW><ROW><id>3155493</id><snippet>class FooType(type):
    def _foo_func(cls):
        return 'foo!'

    def _bar_func(cls):
        return 'bar!'

    def __getattr__(cls, key):
        if key == 'Foo':
            return cls._foo_func()
        elif key == 'Bar':
            return cls._bar_func()
        raise AttributeError(key)

    def __str__(cls):
        return 'custom str for %s' % (cls.__name__,)

class MyClass:
    __metaclass__ = FooType


print MyClass.Foo
print MyClass.Bar
print str(MyClass)
</snippet></ROW><ROW><id>3155493</id><snippet>foo!
bar!
custom str for MyClass
</snippet></ROW><ROW><id>3155493</id><snippet>__str__()</snippet></ROW><ROW><id>3155620</id><snippet>split_edge</snippet></ROW><ROW><id>3155620</id><snippet>split_facet</snippet></ROW><ROW><id>3155620</id><snippet>split_edge</snippet></ROW><ROW><id>3155620</id><snippet>[0,0,0]</snippet></ROW><ROW><id>3155620</id><snippet>[1,0,0]</snippet></ROW><ROW><id>3155620</id><snippet>[0,1,0]</snippet></ROW><ROW><id>3155620</id><snippet>[0,0,1]</snippet></ROW><ROW><id>3155620</id><snippet>[1,1,0]</snippet></ROW><ROW><id>3155620</id><snippet>[1,0,1]</snippet></ROW><ROW><id>3155620</id><snippet>[0,1,1]</snippet></ROW><ROW><id>3155620</id><snippet>[1,1,1]</snippet></ROW><ROW><id>3155650</id><snippet>i</snippet></ROW><ROW><id>3155650</id><snippet>i</snippet></ROW><ROW><id>3155650</id><snippet>for i in range(0,2):
    cmd = lambda i=i: sys.stdout.write(str(i))
    tk.Button(text="print '%d'" % i,command=cmd).pack()
</snippet></ROW><ROW><id>3156039</id><snippet>autovideosink</snippet></ROW><ROW><id>3156309</id><snippet>def visible_cb(self, model, iter, data):
    return model.iter_has_child(iter) or data.lower() in model.get_value(iter, 0).lower()
</snippet></ROW><ROW><id>3156309</id><snippet>set_visible_func</snippet></ROW><ROW><id>3156309</id><snippet>data</snippet></ROW><ROW><id>3156309</id><snippet>visible_cb</snippet></ROW><ROW><id>3156370</id><snippet>import os
os = 'some string'</snippet></ROW><ROW><id>3156819</id><snippet>#get the key
k = ob.getData().getKey()
#create a new Ipo
ni = Ipo.New('Key','ni')
#if there check if there already a key by that name, otherwise add key
if(k.ipo['Key 1'] == None):   k.ipo.addCurve('Key 1')
#add a point to the 'Key 1' ipo curve
k.ipo['Key 1'].append(BezTriple.New(6.0,0.8,0.1))
</snippet></ROW><ROW><id>3157559</id><snippet>stream=sys.stderr</snippet></ROW><ROW><id>3157559</id><snippet>def __init__(self, stream=sys.stderr, descriptions=1, verbosity=1)
</snippet></ROW><ROW><id>3157559</id><snippet>result = unittest.TextTestRunner(stream = open(os.devnull, 'w')).run(alltests)
if len(result.failures) or len(result.errors):
    print "Sorry."
</snippet></ROW><ROW><id>3157589</id><snippet>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
// add entries to the map here

for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {
    String k = entry.getKey();
    String v = entry.getValue();
    System.out.printf("%s %s\n", k, v);
}
</snippet></ROW><ROW><id>3157618</id><snippet>__name__</snippet></ROW><ROW><id>3158036</id><snippet>f = open('hr.dat', 'rb')
array = (c_int * 32487834)()
f.readinto(array)
</snippet></ROW><ROW><id>3158057</id><snippet>SummaryInformation.GetProperty(PID_TITLE)</snippet></ROW><ROW><id>3158057</id><snippet>SummaryInformation.GetProperty(PID_REVNUMBER)</snippet></ROW><ROW><id>3158075</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>3158075</id><snippet>unicode_literals</snippet></ROW><ROW><id>3158075</id><snippet>bytes</snippet></ROW><ROW><id>3158075</id><snippet>a1 = hashlib.md5("%s:%s:%s"  % (self.username, self.domain, self.password)).digest()
# note that UTF-8 may not be the encoding required by your counterpart, please check
a1 = b"%s:%s:%s" %(a1, challenge["nonce"].encode("UTF-8"), cnonce.encode("UTF-8") )
</snippet></ROW><ROW><id>3158075</id><snippet>digest()</snippet></ROW><ROW><id>3158075</id><snippet>a1 = hashlib.md5("%s:%s:%s"  % (self.username, self.domain, self.password)).digest()
a1 = "%s:%s:%s" %(a1.decode("ISO-8859-1"), challenge["nonce"], cnonce)
</snippet></ROW><ROW><id>3158169</id><snippet>wx.ListItem</snippet></ROW><ROW><id>3158169</id><snippet>wx.ListItem</snippet></ROW><ROW><id>3158169</id><snippet>wx.ListCtrl</snippet></ROW><ROW><id>3158169</id><snippet>wx.ListItem</snippet></ROW><ROW><id>3158336</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>3158336</id><snippet>chmod u+x recap.py</snippet></ROW><ROW><id>3158344</id><snippet>&gt;&gt;&gt; num2word.to_card(1e25)
'ten septillion, one billion, seventy-three million, seven hundred and forty-one thousand, eight hundred and twenty-four'

&gt;&gt;&gt; num2word.to_card(10000000000000000000000000)
'ten septillion'
</snippet></ROW><ROW><id>3158618</id><snippet>print title
</snippet></ROW><ROW><id>3158618</id><snippet>for t in title:
    print(t)
</snippet></ROW><ROW><id>3158618</id><snippet>print('\n'.join(t.string for t in title))
</snippet></ROW><ROW><id>3158618</id><snippet>print &lt;somelist&gt;</snippet></ROW><ROW><id>3159016</id><snippet>import itertools
import os

dirs = [["Weights", "No_Weights"],
        ["Male", "Female"],
        ["Caucasian", "African-American", "Asian", "Hispanic", "Indo", "Other", "Unknown"], 
        ["B20", "20", "30", "40", "50", "60", "70"]]

for item in itertools.product(*dirs):
    os.makedirs(os.path.join(*item))
</snippet></ROW><ROW><id>3159016</id><snippet>itertools.product()</snippet></ROW><ROW><id>3159016</id><snippet>os.path.join()</snippet></ROW><ROW><id>3159016</id><snippet>os.makedirs()</snippet></ROW><ROW><id>3159016</id><snippet>os.mkdir()</snippet></ROW><ROW><id>3159130</id><snippet>result = [foo(x) for x in bar]
</snippet></ROW><ROW><id>3159130</id><snippet>for x in bar:
    foo(x)
</snippet></ROW><ROW><id>3159166</id><snippet>no_integers = [x for x in mylist if not isinstance(x, int)]
</snippet></ROW><ROW><id>3159166</id><snippet>no_integers = [x for x in mylist if not (x.isdigit() 
                                         or x[0] == '-' and x[1:].isdigit())]
</snippet></ROW><ROW><id>3159166</id><snippet>is_integer = lambda s: s.isdigit() or (x[0] == '-' and x[1:].isdigit())
no_integers = filter(is_integer, mylist)
</snippet></ROW><ROW><id>3159581</id><snippet>\d{1,2}</snippet></ROW><ROW><id>3159581</id><snippet>(?&lt;=^\d\/)\d{1,2}|(?&lt;=^\d\d\/)\d{1,2}
</snippet></ROW><ROW><id>3159581</id><snippet>(?:(?&lt;=^\d\/)|(?&lt;=^\d\d\/))\d{1,2}
</snippet></ROW><ROW><id>3159581</id><snippet>\d</snippet></ROW><ROW><id>3159581</id><snippet>^\d{1,2}\/(\d{1,2})
</snippet></ROW><ROW><id>3159581</id><snippet>findall</snippet></ROW><ROW><id>3159581</id><snippet>p = re.compile(r'(?:(?&lt;=^\d\/)|(?&lt;=^\d\d\/))\d{1,2}')

print(p.findall("12/34/56"))   # "[34]"
print(p.findall("1/23/45"))    # "[23]"

p = re.compile(r'^\d{1,2}\/(\d{1,2})')

print(p.findall("12/34/56"))   # "[34]"
print(p.findall("1/23/45"))    # "[23]"

p = re.compile(r'(?&lt;=^\d{1,2}\/)\d{1,2}')
# raise error("look-behind requires fixed-width pattern")
</snippet></ROW><ROW><id>3159581</id><snippet>\d{1,2}</snippet></ROW><ROW><id>3159581</id><snippet>    String text =
        "12/34/56 date\n" +
        "1/23/45 another date\n";

    Pattern p = Pattern.compile("(?m)(?&lt;=^\\d{1,2}/)\\d{1,2}");
    Matcher m = p.matcher(text);
    while (m.find()) {
        System.out.println(m.group());
    } // "34", "23"
</snippet></ROW><ROW><id>3159581</id><snippet>(?m)</snippet></ROW><ROW><id>3159581</id><snippet>Pattern.MULTILINE</snippet></ROW><ROW><id>3159581</id><snippet>^</snippet></ROW><ROW><id>3159581</id><snippet>\</snippet></ROW><ROW><id>3159581</id><snippet>"\\"</snippet></ROW><ROW><id>3159581</id><snippet>+</snippet></ROW><ROW><id>3159581</id><snippet>var text = @"
1/23/45
12/34/56
123/45/67
1234/56/78
";

Regex r = new Regex(@"(?m)(?&lt;=^\d+/)\d{1,2}");
foreach (Match m in r.Matches(text)) {
  Console.WriteLine(m);
} // "23", "34", "45", "56"
</snippet></ROW><ROW><id>3159581</id><snippet>\</snippet></ROW><ROW><id>3159581</id><snippet>Regex r = new Regex(@"(?m)^\d+/(\d{1,2})");
foreach (Match m in r.Matches(text)) {
  Console.WriteLine("Matched [" + m + "]; month = " + m.Groups[1]);
}
</snippet></ROW><ROW><id>3159581</id><snippet>text</snippet></ROW><ROW><id>3159581</id><snippet>Matched [1/23]; month = 23
Matched [12/34]; month = 34
Matched [123/45]; month = 45
Matched [1234/56]; month = 56
</snippet></ROW><ROW><id>3160006</id><snippet>from datetime import date

def first_week():
    today = date.today()
    return today.weekday() - today.day &gt;= -1
</snippet></ROW><ROW><id>3160171</id><snippet>csv</snippet></ROW><ROW><id>3160523</id><snippet>for row in z:
    print row[1:12]
    for i in row[1:12]:
        k.write(i+'\t')
    k.write('\n')
</snippet></ROW><ROW><id>3160606</id><snippet>re.match</snippet></ROW><ROW><id>3160606</id><snippet>re.search</snippet></ROW><ROW><id>3160725</id><snippet>  QLabel *linkLabel = new QLabel;
  linkLabel-&gt;setTextFormat( Qt::RichText )
  linkLabel-&gt;setText( "&lt;a href=\"someurl\"&gt; Click me! &lt;/a&gt;" );
  connect( linkLabel, SIGNAL( linkActivated ( const QString &amp; link ) ), .... )
</snippet></ROW><ROW><id>3160772</id><snippet>'\'</snippet></ROW><ROW><id>3160772</id><snippet>result</snippet></ROW><ROW><id>3160772</id><snippet>result.replace("\\", "")</snippet></ROW><ROW><id>3160819</id><snippet>import time
import sys

toolbar_width = 40

# setup toolbar
sys.stdout.write("[%s]" % (" " * toolbar_width))
sys.stdout.flush()
sys.stdout.write("\b" * (toolbar_width+1)) # return to start of line, after '['

for i in xrange(toolbar_width):
    time.sleep(0.1) # do real work here
    # update the bar
    sys.stdout.write("-")
    sys.stdout.flush()

sys.stdout.write("\n")
</snippet></ROW><ROW><id>3160827</id><snippet> to_replace = ["h1","h2","h3","h4"]
 replaced = [ int(s.replace("h","")) for s in to_replace ]
</snippet></ROW><ROW><id>3160827</id><snippet>"(\"h1\", \"h2\", \"h3\", \"h4\")"</snippet></ROW><ROW><id>3161067</id><snippet>extra</snippet></ROW><ROW><id>3161067</id><snippet>Component.objects.extra(
    select={'fieldsum':'material_cost + labor_cost'},
    order_by=('fieldsum',)
)
</snippet></ROW><ROW><id>3161438</id><snippet>stdout</snippet></ROW><ROW><id>3161438</id><snippet>sys.stdout.flush()
</snippet></ROW><ROW><id>3161470</id><snippet>def print_file(x):
    with open('/home/me/data/db/test.blast', 'r') as h:
        for line in h:
            print line
</snippet></ROW><ROW><id>3161470</id><snippet>def print_file(x):
    with open('/home/me/data/db/test.blast', 'r') as h:
        return h.read()
</snippet></ROW><ROW><id>3161470</id><snippet>def print_file(x):
    return open('/home/me/data/db/test.blast', 'r').read()
</snippet></ROW><ROW><id>3161663</id><snippet>mystuff = [1, 2, "Foo", 34, 42, "Ni", 12, 14, "Blue"]
for x in zip(*[iter(mystuff)]*3):
    print "%d %d %s"%x
</snippet></ROW><ROW><id>3161663</id><snippet>.format</snippet></ROW><ROW><id>3161663</id><snippet>mystuff = [1, 2, "Foo", 34, 42, "Ni", 12, 14, "Blue"]
for x in zip(*[iter(mystuff)]*3):
    print "{0} {1} {2}".format(*x)
</snippet></ROW><ROW><id>3161663</id><snippet>from string import Formatter
num_terms = sum(1 for x in Formatter().parse("{0} {1} {2}"))
</snippet></ROW><ROW><id>3161663</id><snippet>mystuff = [1, 2, "Foo", 34, 42, "Ni", 12, 14, "Blue"]
fmt = "{0} {1} {2}"
num_terms = sum(1 for x in Formatter().parse(fmt))
for x in zip(*[iter(mystuff)]*num_terms):
    print fmt.format(*x)
</snippet></ROW><ROW><id>3161766</id><snippet>QMenu.exec_</snippet></ROW><ROW><id>3161766</id><snippet>class MemoryButton(QPushButton):
    def __init__(self, *args, **kw):
        QPushButton.__init__(self, *args, **kw)
        self.last_mouse_pos = None

    def mousePressEvent(self, event):
        self.last_mouse_pos = event.pos()
        QPushButton.mousePressEvent(self, event)

    def mouseReleaseEvent(self, event):
        self.last_mouse_pos = event.pos()
        QPushButton.mouseReleaseEvent(self, event)

    def get_last_pos(self):
        if self.last_mouse_pos:
            return self.mapToGlobal(self.last_mouse_pos)
        else:
            return None

button = MemoryButton("Click Me!")

def popup_menu():
    popup = QMenu()
    menu = popup.addMenu("Do Action")

    def _action(check):
        print "Action Clicked!"

    menu.addAction("Action").triggered.connect(_action)                                                             
    popup.exec_(button.get_last_pos())

button.clicked.connect(popup_menu)
</snippet></ROW><ROW><id>3161845</id><snippet>class Node:
    def __init__(self, data = None):
        self.data = data if data is not None else []
</snippet></ROW><ROW><id>3161845</id><snippet>[]</snippet></ROW><ROW><id>3162024</id><snippet>object</snippet></ROW><ROW><id>3162113</id><snippet>from captcha.models import CaptchaStore
</snippet></ROW><ROW><id>3162113</id><snippet>captcha_count = CaptchaStore.objects.count()
self.failUnlessEqual(captcha_count, 0)
</snippet></ROW><ROW><id>3162113</id><snippet>captcha_count = CaptchaStore.objects.count()
self.failUnlessEqual(captcha_count, 1)
</snippet></ROW><ROW><id>3162113</id><snippet>captcha = CaptchaStore.objects.all()[0]
registration_data = { # other registration data here
                     'captcha_0': captcha.hashkey,
                     'captcha_1': captcha.response }
</snippet></ROW><ROW><id>3162131</id><snippet>os.walk</snippet></ROW><ROW><id>3162131</id><snippet>os.listdir</snippet></ROW><ROW><id>3162131</id><snippet>cachedir.listdir</snippet></ROW><ROW><id>3162131</id><snippet>listdir</snippet></ROW><ROW><id>3162131</id><snippet>os.walk</snippet></ROW><ROW><id>3162163</id><snippet>shell=True</snippet></ROW><ROW><id>3162163</id><snippet>ls -l *.csv</snippet></ROW><ROW><id>3162163</id><snippet>ls</snippet></ROW><ROW><id>3162163</id><snippet>ls</snippet></ROW><ROW><id>3162163</id><snippet>*.csv</snippet></ROW><ROW><id>3162163</id><snippet>ls</snippet></ROW><ROW><id>3162163</id><snippet>*.csv</snippet></ROW><ROW><id>3162163</id><snippet>os.listdir</snippet></ROW><ROW><id>3162287</id><snippet>enumerate</snippet></ROW><ROW><id>3162287</id><snippet>for idx,item in enumerate(list):
</snippet></ROW><ROW><id>3162361</id><snippet>altering a file in place</snippet></ROW><ROW><id>3162361</id><snippet>import fileinput

headers = 'a b c d e'.split()
for line in fileinput.input(['thefile.blah'], inplace=True):
    if fileinput.isfirstline():
        print '\t'.join(headers)
    print line,
</snippet></ROW><ROW><id>3162559</id><snippet>struct</snippet></ROW><ROW><id>3162559</id><snippet>for j in cols:
  for i in rows:
    write Aij to file
</snippet></ROW><ROW><id>3162559</id><snippet>import struct 

def readMatrix(f):
    rows, cols = struct.unpack('&gt;ii',f.read(8))
    m = [ list(struct.unpack('&gt;%df' % rows, f.read(4*rows)))
             for c in range(cols)
        ]
    # transpose result to return
    return zip(*m)
</snippet></ROW><ROW><id>3162559</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; f = StringIO('\x00\x00\x00\x04\x00\x00\x00\x04@\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x00\x00\x00@\x80\x00\x00@\x00\x00\x00@@\x00\x00@\x00\x00\x00@\x00\x00\x00@\x00\x00\x00@\x00\x00\x00@\xc0\x00\x00@\x80\x00\x00?\x80\x00\x00@\x80\x00\x00@\x00\x00\x00')
&gt;&gt;&gt; mat = readMatrix(f)
&gt;&gt;&gt; for row in mat:
...     print row
...     
(4.0, 4.0, 2.0, 4.0)
(2.0, 2.0, 2.0, 1.0)
(3.0, 3.0, 2.0, 4.0)
(2.0, 2.0, 6.0, 2.0)
</snippet></ROW><ROW><id>3162605</id><snippet>open</snippet></ROW><ROW><id>3162605</id><snippet>split()</snippet></ROW><ROW><id>3162660</id><snippet>f=open("header.fdf","rb")
s=str(f.read())
f.close()
s=s.replace(b'PatientName',name)
</snippet></ROW><ROW><id>3162660</id><snippet>f=open("header.fdf","rb")
s=f.read()
f.close()
s=s.replace(b'PatientName',bytes(name))
</snippet></ROW><ROW><id>3162684</id><snippet>start()</snippet></ROW><ROW><id>3162684</id><snippet>run()</snippet></ROW><ROW><id>3162684</id><snippet>run()</snippet></ROW><ROW><id>3162684</id><snippet>from Tkinter import *
from PIL import ImageGrab
import cStringIO, base64, time, threading


Picturelabel = Label(BalanceFrame)
Picturelabel.grid(row=3, column=2, columnspan=3)

class PictureThread(threading.Thread):

    def run(self):
        print "test"
        box = (0,0,500,500) #x,x,width,height
        fp = cStringIO.StringIO()
    while(1):
            MyImage = ImageGrab.grab(box)
            MyImage.save(fp, 'GIF')
            self.image = PhotoImage(data=base64.encodestring(fp.getvalue()))
            Picturelabel.image = self.image
            fp.reset() # reset the fp position to the start
            fp.truncate() # and truncate the file so we don't get garbage 
            time.sleep(5)

PictureThread().start()
window.mainloop()
</snippet></ROW><ROW><id>3162717</id><snippet>A = [[]]*2</snippet></ROW><ROW><id>3162717</id><snippet>[[],[]]</snippet></ROW><ROW><id>3162717</id><snippet>A[0].append("a")
A[1].append("b")
</snippet></ROW><ROW><id>3162717</id><snippet>"a"</snippet></ROW><ROW><id>3162717</id><snippet>"b"</snippet></ROW><ROW><id>3162717</id><snippet>B = [[], []]</snippet></ROW><ROW><id>3162717</id><snippet>In [220]: A=[[]]*2

In [221]: A
Out[221]: [[], []]
</snippet></ROW><ROW><id>3162717</id><snippet>A</snippet></ROW><ROW><id>3162717</id><snippet>In [223]: id(A[0])==id(A[1])
Out[223]: True

In [224]: B=[[],[]]
</snippet></ROW><ROW><id>3162717</id><snippet>B</snippet></ROW><ROW><id>3162717</id><snippet>In [225]: id(B[0])==id(B[1])
Out[225]: False
</snippet></ROW><ROW><id>3162868</id><snippet>def foo(): 
  print "foo"
def bar(): 
  print "bar"

if sunny:
  del foo
else:
  del bar
</snippet></ROW><ROW><id>3162915</id><snippet>dict</snippet></ROW><ROW><id>3162915</id><snippet>collections.Mapping</snippet></ROW><ROW><id>3162915</id><snippet>MutableMapping</snippet></ROW><ROW><id>3162915</id><snippet>dict</snippet></ROW><ROW><id>3162915</id><snippet>__getitem__</snippet></ROW><ROW><id>3162915</id><snippet>__setitem__</snippet></ROW><ROW><id>3162915</id><snippet>__delitem__</snippet></ROW><ROW><id>3162915</id><snippet>__len__</snippet></ROW><ROW><id>3162915</id><snippet>__iter__</snippet></ROW><ROW><id>3162915</id><snippet>__contains__</snippet></ROW><ROW><id>3162915</id><snippet>import collections
import bisect

class MyDict(collections.Mapping):
  def __init__(self, contents):
    "contents must be a sequence of key/value pairs"
    self._list = sorted(contents)
  def __iter__(self):
    return (k for (k, _) in self._list)
  def __contains__(self, k):
    i = bisect.bisect_left(self._list, (k, None))
    return i &lt; len(self._list) and self._list[i][0] == k
  def __len__(self):
    return len(self._list)
  def __getitem__(self, k):
    i = bisect.bisect_left(self._list, (k, None))
    if i &gt;= len(self._list): raise KeyError(k)
    return self._list[i][1]
</snippet></ROW><ROW><id>3162915</id><snippet>__getitem__</snippet></ROW><ROW><id>3162915</id><snippet>k</snippet></ROW><ROW><id>3162915</id><snippet>self</snippet></ROW><ROW><id>3163076</id><snippet>datastore_filestub.py</snippet></ROW><ROW><id>3163076</id><snippet>os.rename</snippet></ROW><ROW><id>3163076</id><snippet>OSError</snippet></ROW><ROW><id>3163076</id><snippet>WindowsError</snippet></ROW><ROW><id>3163076</id><snippet>--use_sqlite</snippet></ROW><ROW><id>3163165</id><snippet>Book.name_*</snippet></ROW><ROW><id>3163165</id><snippet>Name</snippet></ROW><ROW><id>3163165</id><snippet>someRange</snippet></ROW><ROW><id>3163165</id><snippet>Name</snippet></ROW><ROW><id>3163165</id><snippet>Name.area2d</snippet></ROW><ROW><id>3163406</id><snippet>field_breaks</snippet></ROW><ROW><id>3163406</id><snippet>field_breaks = [0, 2, 10, 13, 21, 32, 43, ..., 250, 300]
s = ...
data = [s[x[0]:x[1]].strip() for x in zip(field_breaks[:-1], field_breaks[1:])]
</snippet></ROW><ROW><id>3163704</id><snippet>etch</snippet></ROW><ROW><id>3163704</id><snippet>libreadline</snippet></ROW><ROW><id>3163704</id><snippet>etch</snippet></ROW><ROW><id>3163704</id><snippet>squeeze</snippet></ROW><ROW><id>3163795</id><snippet>pyparsing</snippet></ROW><ROW><id>3163795</id><snippet>psyco</snippet></ROW><ROW><id>3163795</id><snippet>pyparsing</snippet></ROW><ROW><id>3163795</id><snippet>psyco</snippet></ROW><ROW><id>3163976</id><snippet>"""Password Cache

This module provides a portable interface for caching passwords.

Operations:

    Store a password.
    Retrieve a password (which may prompt for a password if it needs it).
    Test whether or not we have a password stored.
    Clear a stored password.

    Passwords are identified by a combination key app/service/user.
"""
import sys, os, random, hashlib

random.seed() # Init random number generator from other random source or system time

class PasswordCacheBase(object):
    """Base class for common functionality between different platform implementations"""
    def __init__(self, application=None):
        """PasswordCache(application)

        Creates a new store for passwords (or opens an existing one).
        The application name may be any string, but defaults to the script name.
        """
        if application is None:
            self.application = os.path.basename(sys.argv[0])
        else:
            self.application = application

    def get(self, service, user, getpass=None, cache=False):
        """Retrieve a password from the store"""
        raise NotImplementedError()

    def set(self, service, user, password):
        """Save a password in the store"""
        raise NotImplementedError()

    def exists(self, service, user):
        """Check whether a password exists"""
        try:
            pwd = self.get(service, user)
        except KeyError:
            return False
        return True

    def clear(self, service, user):
        raise NotImplementedError()

    def salt(self, service, user):
        """Get a salt value to help prevent encryption collisions. The salt string is 16 bytes long."""
        salt = hashlib.md5("%r|%s|%s|%s" % (random.random(), self.application, service, user)).digest()
        return salt


if sys.platform=="win32":
    """Interface to Windows data protection api.

    Based on code from:
    http://osdir.com/ml/python.ctypes/2003-07/msg00091.html
    """
    from ctypes import *
    from ctypes.wintypes import DWORD
    import _winreg
    import cPickle as pickle

    LocalFree = windll.kernel32.LocalFree
    # Note that CopyMemory is defined in term of memcpy:
    memcpy = cdll.msvcrt.memcpy
    CryptProtectData = windll.crypt32.CryptProtectData
    CryptUnprotectData = windll.crypt32.CryptUnprotectData


    # See http://msdn.microsoft.com/architecture/application/default.aspx?pull=/library/en-us/dnnetsec/html/SecNetHT07.asp
    CRYPTPROTECT_UI_FORBIDDEN = 0x01

    class DATA_BLOB(Structure):
        # See d:\vc98\Include\WINCRYPT.H
        # This will not work
        # _fields_ = [("cbData", DWORD), ("pbData", c_char_p)]
        # because accessing pbData will create a new Python string which is
        # null terminated.
        _fields_ = [("cbData", DWORD), ("pbData", POINTER(c_char))]

    class PasswordCache(PasswordCacheBase):
        def set(self, service, user, password):
            """Save a password in the store"""
            salt = self.salt(service, user)
            encrypted = self.Win32CryptProtectData(
                '%s' % password, salt)
            key = self._get_regkey()
            try:
                data = self._get_registrydata(key)
                data[service, user] = (salt, encrypted)
                self._put_registrydata(key, data)
            finally:
                key.Close()

        def get(self, service, user, getpass=None, cache=False):
            data = self._get_registrydata()
            try:
                salt, encrypted = data[service, user]
                decrypted = self.Win32CryptUnprotectData(encrypted, salt)
            except KeyError:
                if getpass is not None:
                    password = getpass()
                    if cache:
                        self.set(service, user, password)
                    return password
                raise
            return decrypted

        def clear(self, service=None, user=None):
            key = self._get_regkey()
            try:
                data = self._get_registrydata(key)
                if service is None:
                    if user is None:
                        data = {}
                    else:
                        for (s,u) in data.keys():
                            if u==user:
                                del data[s,u]
                else:
                    if user is None:
                        for (s,u) in data.keys():
                            if s==service:
                                del data[s,u]
                    else:
                        if (service,user) in data:
                            del data[service,user]

                self._put_registrydata(key, data)
            finally:
                key.Close()

        def _get_regkey(self):
            return _winreg.CreateKey(
                _winreg.HKEY_CURRENT_USER,
                r'Software\Python\Passwords')

        def _get_registrydata(self, regkey=None):
            if regkey is None:
                key = self._get_regkey()
                try:
                    return self._get_registrydata(key)
                finally:
                    key.Close()

            try:
                current = _winreg.QueryValueEx(regkey, self.application)[0]
                data = pickle.loads(current.decode('base64'))
            except WindowsError:
                data = {}
            return data

        def _put_registrydata(self, regkey, data):
            pickled = pickle.dumps(data)
            _winreg.SetValueEx(regkey,
                self.application,
                None,
                _winreg.REG_SZ,
                pickled.encode('base64'))

        def getData(self, blobOut):
            cbData = int(blobOut.cbData)
            pbData = blobOut.pbData
            buffer = c_buffer(cbData)
            memcpy(buffer, pbData, cbData)
            LocalFree(pbData);
            return buffer.raw

        def Win32CryptProtectData(self, plainText, entropy):
            bufferIn = c_buffer(plainText, len(plainText))
            blobIn = DATA_BLOB(len(plainText), bufferIn)
            bufferEntropy = c_buffer(entropy, len(entropy))
            blobEntropy = DATA_BLOB(len(entropy), bufferEntropy)
            blobOut = DATA_BLOB()
            # The CryptProtectData function performs encryption on the data
            # in a DATA_BLOB structure.
            # BOOL WINAPI CryptProtectData(
            #    DATA_BLOB* pDataIn,
            #    LPCWSTR szDataDescr,
            #    DATA_BLOB* pOptionalEntropy,
            #    PVOID pvReserved,
            #    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
            #    DWORD dwFlags,
            #    DATA_BLOB* pDataOut
            if CryptProtectData(byref(blobIn), u"win32crypto.py", byref(blobEntropy),
                None, None, CRYPTPROTECT_UI_FORBIDDEN, byref(blobOut)):
                return self.getData(blobOut)
            else:
                return None

        def Win32CryptUnprotectData(self, cipherText, entropy):
            bufferIn = c_buffer(cipherText, len(cipherText))
            blobIn = DATA_BLOB(len(cipherText), bufferIn)
            bufferEntropy = c_buffer(entropy, len(entropy))
            blobEntropy = DATA_BLOB(len(entropy), bufferEntropy)
            blobOut = DATA_BLOB()

            if CryptUnprotectData(byref(blobIn), None, byref(blobEntropy), None, None,
                CRYPTPROTECT_UI_FORBIDDEN, byref(blobOut)):
                return self.getData(blobOut)
            else:
                return None
else: # Not Windows, try for gnome-keyring
    import gtk # ensure that the application name is correctly set
    import gnomekeyring as gkey


    class Keyring(object):
        def __init__(self, name, server, protocol):
            self._name = name
            self._server = server
            self._protocol = protocol
            self._keyring = k = gkey.get_default_keyring_sync()
            import pdb; pdb.set_trace()
            print dir(k)

    class PasswordCache(PasswordCacheBase):
        def __init__(self, application=None):
            PasswordCacheBase.__init__(self, application)
            self._keyring = gkey.get_default_keyring_sync()

        def set(self, service, user, password):
            """Save a password in the store"""
            attrs = {
                "application": self.application,
                "user": user,
                "server": service,
            }
            gkey.item_create_sync(self._keyring,
                    gkey.ITEM_NETWORK_PASSWORD, self.application, attrs, password, True)

        def get(self, service, user, getpass=None, cache=False):
            attrs = {
                "application": self.application,
                "user": user,
                "server": service}
            try:
                items = gkey.find_items_sync(gkey.ITEM_NETWORK_PASSWORD, attrs)
            except gkey.NoMatchError:
                if getpass is not None:
                    password = getpass()
                    if cache:
                        self.set(service, user, password)
                    return password
                raise KeyError((service,user))
            return items[0].secret

        def clear(self, service=None, user=None):
            attrs = {'application':self.application}
            if user is not None:
                attrs["user"] = user
            if service is not None:
                attrs["server"] = service

            try:
                items = gkey.find_items_sync(gkey.ITEM_NETWORK_PASSWORD, attrs)
            except gkey.NoMatchError:
                return
            for item in items:
                gkey.item_delete_sync(self._keyring, item.item_id)
</snippet></ROW><ROW><id>3164161</id><snippet>process_list = []    
for id  in ids:
    process_list.append(subprocess.Popen(cmd, shell=True))
for process in process_list:
    process.wait()
</snippet></ROW><ROW><id>3165057</id><snippet>&gt;&gt;&gt; from my_projects.tools import resolve_to_name
&gt;&gt;&gt; print resolve_to_name('/some/url')
'app.views.view'
&gt;&gt;&gt; print resolve_to_name('/some/other/url')
'this_is_a_named_view'
</snippet></ROW><ROW><id>3165226</id><snippet>str</snippet></ROW><ROW><id>3165443</id><snippet>def pent_new(n):
    return (n*(3*n - 1))/2

def gen_pent_new(n):
    if n%2:
        i = (n + 1)/2
    else:
        i = -n/2
    return pent_new(i)
</snippet></ROW><ROW><id>3165443</id><snippet>n = 100000001</snippet></ROW><ROW><id>3165443</id><snippet>gen_pent</snippet></ROW><ROW><id>3165443</id><snippet># Add this code to your script
t = Timer("for i in xrange(1, 100): gen_pent(i)", "from __main__ import gen_pent")
print t.timeit()
</snippet></ROW><ROW><id>3165443</id><snippet>partition</snippet></ROW><ROW><id>3165443</id><snippet>partition</snippet></ROW><ROW><id>3165443</id><snippet>def partition_new(n):
    try:
        return partitions_new[n]
    except IndexError:
        total, sign, i = 0, 1, 1
        k = gen_pent_new(i)
        while n - k &gt;= 0:
            total += sign*partition_new(n - k)

            i += 1
            if i%2: sign *= -1
            k = gen_pent_new(i)

        partitions_new.insert(n, total)
        return total
</snippet></ROW><ROW><id>3165443</id><snippet>total</snippet></ROW><ROW><id>3165443</id><snippet>import cProfile
import pstats

cProfile.run('partition(70)', 'partition.test')
p = pstats.Stats('partition.test')
p.sort_stats('name')
p.print_stats()
</snippet></ROW><ROW><id>3165443</id><snippet>C:\Documents and Settings\ags97128\Desktop&gt;test.py
Fri Jul 02 12:42:15 2010    partition.test

         4652 function calls (4101 primitive calls) in 0.015 CPU seconds

   Ordered by: function name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      552    0.001    0.000    0.001    0.000 {len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       60    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        1    0.000    0.000    0.015    0.015 &lt;string&gt;:1(&lt;module&gt;)
     1162    0.002    0.000    0.002    0.000 {round}
     1162    0.006    0.000    0.009    0.000 C:\Documents and Settings\ags97128\Desktop\test.py:11(gen_pent)
    552/1    0.005    0.000    0.015    0.015 C:\Documents and Settings\ags97128\Desktop\test.py:26(partition)
     1162    0.002    0.000    0.002    0.000 C:\Documents and Settings\ags97128\Desktop\test.py:5(pent)
</snippet></ROW><ROW><id>3165443</id><snippet>Fri Jul 02 12:50:10 2010    partition.test

         1836 function calls (1285 primitive calls) in 0.006 CPU seconds

   Ordered by: function name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       60    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        1    0.000    0.000    0.006    0.006 &lt;string&gt;:1(&lt;module&gt;)
      611    0.002    0.000    0.003    0.000 C:\Documents and Settings\ags97128\Desktop\test.py:14(gen_pent_new)
    552/1    0.003    0.000    0.006    0.006 C:\Documents and Settings\ags97128\Desktop\test.py:40(partition_new)
      611    0.001    0.000    0.001    0.000 C:\Documents and Settings\ags97128\Desktop\test.py:8(pent_new)
</snippet></ROW><ROW><id>3165443</id><snippet>len</snippet></ROW><ROW><id>3165443</id><snippet>round</snippet></ROW><ROW><id>3165443</id><snippet>gen_pent_new</snippet></ROW><ROW><id>3165443</id><snippet>pent_new</snippet></ROW><ROW><id>3165474</id><snippet>import wx
import opencv.cv as cv
import opencv.highgui as gui


class CvMovieFrame(wx.Frame):
    TIMER_PLAY_ID = 101
    def __init__(self, parent):        

        wx.Frame.__init__(self, parent, -1,)        

        sizer = wx.BoxSizer(wx.VERTICAL)         

        self.capture = gui.cvCreateCameraCapture(0)
        frame = gui.cvQueryFrame(self.capture)
        cv.cvCvtColor(frame, frame, cv.CV_BGR2RGB)

        self.SetSize((frame.width + 300, frame.height + 100))

        self.bmp = wx.BitmapFromBuffer(frame.width, frame.height, frame.imageData)
        self.displayPanel= wx.StaticBitmap(self, -1, bitmap=self.bmp)
        sizer.Add(self.displayPanel, 0, wx.ALL, 10)

        self.shotbutton = wx.Button(self,-1, "Shot")
        sizer.Add(self.shotbutton,-1, wx.GROW)

        self.retrybutton = wx.Button(self,-1, "Retry")
        sizer.Add(self.retrybutton,-1, wx.GROW)     
        self.retrybutton.Hide()   

        #events
        self.Bind(wx.EVT_BUTTON, self.onShot, self.shotbutton)
        self.Bind(wx.EVT_BUTTON, self.onRetry, self.retrybutton)
        self.Bind(wx.EVT_PAINT, self.onPaint)
        self.Bind(wx.EVT_CLOSE, self.onClose)

        self.playTimer = wx.Timer(self, self.TIMER_PLAY_ID)
        wx.EVT_TIMER(self, self.TIMER_PLAY_ID, self.onNextFrame)

        self.fps = 8;
        self.SetSizer(sizer)
        sizer.Layout()
        self.startTimer()        

    def startTimer(self):
        if self.fps!=0: self.playTimer.Start(1000/self.fps)#every X ms
        else: self.playTimer.Start(1000/15)#assuming 15 fps        

    def onRetry(self, event):
        frame = gui.cvQueryFrame(self.capture)
        cv.cvCvtColor(frame, frame, cv.CV_BGR2RGB)
        self.bmp = wx.BitmapFromBuffer(frame.width, frame.height, frame.imageData)
        self.startTimer()
        self.shotbutton.Show()
        self.retrybutton.Hide()
        self.hasPicture = False
        self.Layout()
        event.Skip()    

    def onShot(self, event):
        frame = gui.cvQueryFrame(self.capture)
        self.playTimer.Stop()
        gui.cvSaveImage("foo.png", frame)        

        self.hasPicture = True
        self.shotbutton.Hide()
        self.retrybutton.Show()
        self.Layout()
        event.Skip()

    def onClose(self, event):
        try:
            self.playTimer.Stop()
        except:
            pass

        self.Show(False)
        self.Destroy()      

    def onPaint(self, evt):
        if self.bmp:
            self.displayPanel.SetBitmap(self.bmp)
        evt.Skip()

    def onNextFrame(self, evt):

        frame = gui.cvQueryFrame(self.capture)
        if frame:
            cv.cvCvtColor(frame, frame, cv.CV_BGR2RGB)
            self.bmp = wx.BitmapFromBuffer(frame.width, frame.height, frame.imageData)
            self.Refresh()        
        evt.Skip()

if __name__=="__main__":
    app = wx.App()
    f = CvMovieFrame(None)
    f.Centre()
    f.Show(True)
    app.MainLoop()
</snippet></ROW><ROW><id>3165524</id><snippet>def depth_first_search(self):
    yield self, 0 # root
    for child in self.get_child_nodes():
        for node, depth in child.depth_first_search():
            if(yield node, depth+1):
                yield None # for .send
                return
</snippet></ROW><ROW><id>3165524</id><snippet>it = graph.depth_first_search()
for node, depth in it: #this is why there should be pronouns for loop iterables
    stuff(node,depth)
    if quit: it.send(1) 
    # it.next() should raise StopIteration on the next for iteration
</snippet></ROW><ROW><id>3165965</id><snippet>importModule</snippet></ROW><ROW><id>3165965</id><snippet>moduleName</snippet></ROW><ROW><id>3165965</id><snippet>moduleName</snippet></ROW><ROW><id>3165965</id><snippet>importModule</snippet></ROW><ROW><id>3165965</id><snippet>from importModule.directoryName1.directoryName2.moduleName import ClassName
</snippet></ROW><ROW><id>3165965</id><snippet>moduleName</snippet></ROW><ROW><id>3165965</id><snippet>ClassName</snippet></ROW><ROW><id>3165965</id><snippet>importModule</snippet></ROW><ROW><id>3165965</id><snippet>ClassName</snippet></ROW><ROW><id>3165965</id><snippet>moduleName</snippet></ROW><ROW><id>3165965</id><snippet>A</snippet></ROW><ROW><id>3165965</id><snippet>B</snippet></ROW><ROW><id>3165965</id><snippet>B</snippet></ROW><ROW><id>3165965</id><snippet>A</snippet></ROW><ROW><id>3166005</id><snippet>def my_strip(string, chars)
  chars = Regexp.escape(chars)
  string.gsub(/\A[#{chars}]+|[#{chars}]+\Z/, "")
end

my_strip " [la[]la] ", " []"
#=&gt; "la[]la"
</snippet></ROW><ROW><id>3166348</id><snippet>&gt;&gt;&gt; s = u"\xff".encode('ascii', 'ignore')
&gt;&gt;&gt; s
''
&gt;&gt;&gt; id(s)
10667744
&gt;&gt;&gt; id("")
10666064
&gt;&gt;&gt; s == ""
True
&gt;&gt;&gt; s is ""
False
&gt;&gt;&gt; type(s) is type("")
True
</snippet></ROW><ROW><id>3166377</id><snippet>from django.db.models import Q
Publisher.objects.filter(Q(name__contains="press") | Q(country__contains="U.S.A"))
</snippet></ROW><ROW><id>3166403</id><snippet>from myfolder import *
</snippet></ROW><ROW><id>3166403</id><snippet>from folder1.folder2 import *
</snippet></ROW><ROW><id>3166673</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; onedollar = re.compile(r'^[^\$]*\$[^\$]*$')
&gt;&gt;&gt; onedollar.match('$1 off delicious ham.')
&lt;_sre.SRE_Match object at 0x7fe253c9c4a8&gt;
&gt;&gt;&gt; onedollar.match('$1 off delicious $5 ham.')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3166673</id><snippet>^</snippet></ROW><ROW><id>3166673</id><snippet>[^\$]*</snippet></ROW><ROW><id>3166673</id><snippet>$</snippet></ROW><ROW><id>3166673</id><snippet>\$</snippet></ROW><ROW><id>3166673</id><snippet>[^\$]*</snippet></ROW><ROW><id>3166673</id><snippet>$</snippet></ROW><ROW><id>3166673</id><snippet>$</snippet></ROW><ROW><id>3166802</id><snippet>class test(object): # make sure you inherit from object
    @property
    def x(self):
        return 4

p = test()
p.x # returns 4
</snippet></ROW><ROW><id>3167111</id><snippet>import os, unittest

class Tests():   

    def suite(self): #Function stores all the modules to be tested


        modules_to_test = []
        test_dir = os.listdir('.')
        for test in test_dir:
            if test.startswith('test') and test.endswith('.py'):
                modules_to_test.append(test.rstrip('.py'))

        alltests = unittest.TestSuite()
        for module in map(__import__, modules_to_test):
            module.testvars = ["variables you want to pass through"]
            alltests.addTest(unittest.findTestCases(module))
        return alltests

if __name__ == '__main__':
    MyTests = Tests()
    unittest.main(defaultTest='MyTests.suite')
</snippet></ROW><ROW><id>3167111</id><snippet>if __name__ == '__main__':
    MyTests = Tests()
    log_file = 'log_file.txt'
    f = open(log_file, "w") 
    runner = unittest.TextTestRunner(f)
    unittest.main(defaultTest='MyTests.suite', testRunner=runner)
</snippet></ROW><ROW><id>3167111</id><snippet>class SomeTestSuite(unittest.TestSuite):

    # Tests to be tested by test suite
    def makeRemoveAudioSource():
        suite = unittest.TestSuite()
        suite.AddTest(TestSomething("TestSomeClass"))

        return suite

    def suite():
        return unittest.makeSuite(TestSomething)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>3167114</id><snippet># use a Tkinter label as a panel/frame with a background image
# note that Tkinter only reads gif and ppm images
# use the Python Image Library (PIL) for other image formats
# free from [url]http://www.pythonware.com/products/pil/index.htm[/url]
# give Tkinter a namespace to avoid conflicts with PIL
# (they both have a class named Image)

import Tkinter as tk
from PIL import Image, ImageTk

root = tk.Tk()
root.title('background image')

# pick an image file you have .bmp  .jpg  .gif.  .png
# load the file and covert it to a Tkinter image object
imageFile = "Flowers.jpg"
image1 = ImageTk.PhotoImage(Image.open(imageFile))

# get the image size
w = image1.width()
h = image1.height()

# position coordinates of root 'upper left corner'
x = 0
y = 0

# make the root window the size of the image
root.geometry("%dx%d+%d+%d" % (w, h, x, y))

# root has no image argument, so use a label as a panel
panel1 = tk.Label(root, image=image1)
panel1.pack(side='top', fill='both', expand='yes')

# put a button on the image panel to test it
button2 = tk.Button(panel1, text='button2')
button2.pack(side='top')

# save the panel's image from 'garbage collection'
panel1.image = image1

# start the event loop
root.mainloop()
</snippet></ROW><ROW><id>3167138</id><snippet>from appscript import *

mail = app('Mail')
msg = mail.make(new=k.outgoing_message)
msg.subject.set("hello"),
msg.content.set("appscript")
msg.to_recipients.end.make(new=k.to_recipient, with_properties={'address':'taichino@gmail.com'})
msg.send()
</snippet></ROW><ROW><id>3167201</id><snippet># connect to database and create table
import sqlite3
conn = sqlite3.connect(":memory:")
conn.execute('''create table my_table (value1 integer, value2 integer, xml text)''')

# read text from file
f = file('/tmp/my_file.xml')
xml_string_from_file = f.read()

# insert text into database
cur = conn.cursor()
cur.execute('''insert into my_table (value1, value2, xml) values (?, ?, ?)''', (23, 42, xml_string_from_file))
cur.commit()

# read from database into variable
cur.execute('''select * from my_table''')
xml_string_from_db = cur.fetchone()[2]

# parse with the XML parser of your choice
from xml.dom.minidom import parseString
dom = parseString(xml_string_from_db)
</snippet></ROW><ROW><id>3167217</id><snippet>{n:[nested_dicts[i][n] for i in range(1,301)] for n in ["name1","name2","name3"]}
</snippet></ROW><ROW><id>3167217</id><snippet>dict((n, [nested_dicts[i][n] for i in range(1,301)]) for n in ["name1","name2","name3"])
</snippet></ROW><ROW><id>3167684</id><snippet>os.path</snippet></ROW><ROW><id>3167684</id><snippet>drive,path_and_file=os.path.splitdrive(path)
</snippet></ROW><ROW><id>3167684</id><snippet>path,file=os.path.split(path_and_file)
</snippet></ROW><ROW><id>3167684</id><snippet>folders=[]
while 1:
    path,folder=os.path.split(path)

    if folder!="":
        folders.append(folder)
    else:
        if path!="":
            folders.append(path)

        break

folders.reverse()
</snippet></ROW><ROW><id>3167684</id><snippet>"\"</snippet></ROW><ROW><id>3167684</id><snippet>folders</snippet></ROW><ROW><id>3167802</id><snippet>values</snippet></ROW><ROW><id>3167802</id><snippet>Min</snippet></ROW><ROW><id>3167802</id><snippet>Count</snippet></ROW><ROW><id>3167802</id><snippet>from django.db.models import Min, Count

Competition.objects.values('domain').filter(word_id=1545).annotate(id=Min('id'), cnt=Count('id'))
</snippet></ROW><ROW><id>3167802</id><snippet>values</snippet></ROW><ROW><id>3167835</id><snippet>eval "${prefix}${command} arg"</snippet></ROW><ROW><id>3167835</id><snippet>uplevel</snippet></ROW><ROW><id>3167835</id><snippet>eval</snippet></ROW><ROW><id>3167840</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>3167840</id><snippet>class UserModelChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
         return obj.get_full_name()
</snippet></ROW><ROW><id>3167840</id><snippet> UserModelChoiceField(queryset=User.objects.filter(is_staff=False), required = False)
</snippet></ROW><ROW><id>3168139</id><snippet>gmtime()</snippet></ROW><ROW><id>3168139</id><snippet>localtime()</snippet></ROW><ROW><id>3168244</id><snippet>urlopen</snippet></ROW><ROW><id>3168244</id><snippet>http_proxy</snippet></ROW><ROW><id>3168244</id><snippet>$ export http_proxy='http://myproxy.example.com:1234'
$ python myscript.py  # Using http://myproxy.example.com:1234 as a proxy
</snippet></ROW><ROW><id>3168244</id><snippet>proxies</snippet></ROW><ROW><id>3168244</id><snippet>urlopen</snippet></ROW><ROW><id>3168244</id><snippet>proxies = {'http': 'http://myproxy.example.com:1234'}
print "Using HTTP proxy %s" % proxies['http']
urllib.urlopen("http://www.google.com", proxies=proxies)
</snippet></ROW><ROW><id>3168244</id><snippet>candidate_proxies = ['http://proxy1.example.com:1234',
                     'http://proxy2.example.com:1234',
                     'http://proxy3.example.com:1234']
for proxy in candidate_proxies:
    print "Trying HTTP proxy %s" % proxy
    try:
        result = urllib.urlopen("http://www.google.com",
                                proxies={'http': proxies})
        print "Got URL using proxy %s" % proxy
        break
    except:
        print "Trying next proxy in 5 seconds"
        time.sleep(5)
</snippet></ROW><ROW><id>3168354</id><snippet>data = html.split("PROCEDURE", 2)[2]
</snippet></ROW><ROW><id>3168354</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3168354</id><snippet>rowspan=1</snippet></ROW><ROW><id>3168354</id><snippet>bs = BeautifulSoup.BeautifulSoup(data)
tds = bs.findAll("td", { "rowspan": 1 })
</snippet></ROW><ROW><id>3168354</id><snippet>&gt;&gt;&gt; tds[0].text
u'Title'
&gt;&gt;&gt; tds[1].text
u'Mutual assistance for the recovery of claims relating to taxes, duties and other measures'
&gt;&gt;&gt; tds[3].text
u'References'
&gt;&gt;&gt; tds[4].text
u'COM(2009)00282009/0007(CNS)2009 a&gt;'
</snippet></ROW><ROW><id>3168354</id><snippet>2</snippet></ROW><ROW><id>3168354</id><snippet>tds</snippet></ROW><ROW><id>3168354</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3168354</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3168418</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3168418</id><snippet>14:59 jsmith@upsidedown pwd
/Users/jsmith/Test/Test2/root

14:59 jsmith@upsidedown cat x/test.py
def hello():
  print "hello"

14:59 jsmith@upsidedown cat y/real.py
#!/usr/bin/python
from x import test
test.hello()

14:59 jsmith@upsidedown y/real.py
Traceback (most recent call last):
  File "y/real.py", line 3, in &lt;module&gt;
    from x import test
ImportError: No module named x
</snippet></ROW><ROW><id>3168436</id><snippet>bufsize = 0
f = open('file.txt', 'w', bufsize)
</snippet></ROW><ROW><id>3168743</id><snippet>$('#upload').click(function(){
    $('#main .right').html("{% extends 'a.html' %}")
})
</snippet></ROW><ROW><id>3168743</id><snippet>{% include %}</snippet></ROW><ROW><id>3168743</id><snippet>extends</snippet></ROW><ROW><id>3168743</id><snippet>{% ... %}</snippet></ROW><ROW><id>3168743</id><snippet>"</snippet></ROW><ROW><id>3168743</id><snippet>html()</snippet></ROW><ROW><id>3168743</id><snippet>\</snippet></ROW><ROW><id>3168743</id><snippet>&lt;/</snippet></ROW><ROW><id>3168743</id><snippet>a.html</snippet></ROW><ROW><id>3168743</id><snippet>escapejs</snippet></ROW><ROW><id>3168743</id><snippet>json</snippet></ROW><ROW><id>3168743</id><snippet>{% include %}</snippet></ROW><ROW><id>3168786</id><snippet>def has_error(filename):
    with file(filename, 'r') as logfile:
        for line in logfile:
            for regexp in MY_REGEXPS:
                if regexp.search(line):
                    return True
        return False
</snippet></ROW><ROW><id>3168975</id><snippet>raw_input</snippet></ROW><ROW><id>3169254</id><snippet>date</snippet></ROW><ROW><id>3169254</id><snippet>str</snippet></ROW><ROW><id>3169254</id><snippet>"2010-01-01"</snippet></ROW><ROW><id>3169254</id><snippet>str</snippet></ROW><ROW><id>3169254</id><snippet>date</snippet></ROW><ROW><id>3169254</id><snippet>datetime</snippet></ROW><ROW><id>3169375</id><snippet>#Original version
@opt("addpath", "yes")
def mapper1(key, value):
    for word in value.split():
        yield (key[0], word), 1

#Edits version
def mapper1(key, value):
    for word in value.split():
        yield (key, word), 1
</snippet></ROW><ROW><id>3169683</id><snippet>&gt;&gt;&gt; x = 634124502600000000
&gt;&gt;&gt; secs = x / 10.0 ** 7
&gt;&gt;&gt; secs
63412450260.0
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; delta = datetime.timedelta(seconds=secs)
&gt;&gt;&gt; delta
datetime.timedelta(733940, 34260)
&gt;&gt;&gt; ts = datetime.datetime(1,1,1) + delta
&gt;&gt;&gt; ts
datetime.datetime(2010, 6, 18, 9, 31)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3169710</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>3169710</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>3169710</id><snippet>LOAD DATA LOCAL INFILE</snippet></ROW><ROW><id>3169710</id><snippet>PROCEDURE ANALYSE</snippet></ROW><ROW><id>3169710</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>3169710</id><snippet>PROCEDURE ANALYSE</snippet></ROW><ROW><id>3169710</id><snippet>ENUM</snippet></ROW><ROW><id>3169710</id><snippet>PROCEDURE ANALYSE</snippet></ROW><ROW><id>3169710</id><snippet>SELECT DISTINCT</snippet></ROW><ROW><id>3169710</id><snippet>INSERT</snippet></ROW><ROW><id>3169710</id><snippet>INSERT</snippet></ROW><ROW><id>3169710</id><snippet>UPDATE</snippet></ROW><ROW><id>3169710</id><snippet>python manage.py inspctdb</snippet></ROW><ROW><id>3169710</id><snippet>ForeignkeyField</snippet></ROW><ROW><id>3169740</id><snippet>except Exception, e:  #you can specify type of Exception also
   print str(e)
</snippet></ROW><ROW><id>3169762</id><snippet>import itertools 
group_func = lambda o: (o.classification, o.type)
map(lambda pair: (pair[0], min(pair[1], key=lambda o: o.last - o.first)),
    itertools.groupby(sorted(l, key=group_func), group_func))
</snippet></ROW><ROW><id>3169762</id><snippet>group_func</snippet></ROW><ROW><id>3169762</id><snippet>('A', 'x')</snippet></ROW><ROW><id>3169762</id><snippet>l</snippet></ROW><ROW><id>3169762</id><snippet>sorted</snippet></ROW><ROW><id>3169762</id><snippet>groupby</snippet></ROW><ROW><id>3169762</id><snippet>group_func</snippet></ROW><ROW><id>3169762</id><snippet>map</snippet></ROW><ROW><id>3169762</id><snippet>groupby</snippet></ROW><ROW><id>3169762</id><snippet>map</snippet></ROW><ROW><id>3169762</id><snippet>pair[0]</snippet></ROW><ROW><id>3169762</id><snippet>('A', 'x')</snippet></ROW><ROW><id>3169762</id><snippet>pair[1]</snippet></ROW><ROW><id>3169762</id><snippet>last - first</snippet></ROW><ROW><id>3169817</id><snippet>print '''&lt;html&gt;
&lt;head&gt;&lt;title&gt;My first Python CGI app&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Hello, 'world'!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;'''
</snippet></ROW><ROW><id>3169817</id><snippet>.upper()</snippet></ROW><ROW><id>3169817</id><snippet>.translate()</snippet></ROW><ROW><id>3169817</id><snippet>%</snippet></ROW><ROW><id>3169817</id><snippet>r</snippet></ROW><ROW><id>3169817</id><snippet>u</snippet></ROW><ROW><id>3169853</id><snippet>import itertools

iterables = [ [1,2,3,4], [88,99], ['a','b'] ]

for t in itertools.product(*iterables):
    print t
</snippet></ROW><ROW><id>3169884</id><snippet>htm = '''&lt;p&gt;&lt;b&gt;&lt;a href="/name/abe"&gt;ABE&lt;/a&gt;&lt;/b&gt;   &lt;font class="masc"&gt;m
&lt;/font&gt;  &lt;font class="info"&gt;&lt;a href="/nmc/eng.php" class="usg"&gt;English
&lt;/a&gt;, &lt;a href="/nmc/jew.php" class="usg"&gt;Hebrew&lt;/a&gt;&lt;/font&gt;&lt;br /&gt;
Short form of &lt;a href="/name/abraham" class="nl"&gt;ABRAHAM&lt;/a&gt;'''

import BeautifulSoup

soup = BeautifulSoup.BeautifulSoup(htm)

for p in soup.findAll('p'):
  firsta = True
  shortf = False
  for c in p.recursiveChildGenerator():
    if isinstance(c, BeautifulSoup.NavigableString):
      if 'Short form of' in str(c):
        shortf = True
    elif c.name == 'a':
      if firsta or shortf:
        print c.renderContents()
        firsta = shortf = False
</snippet></ROW><ROW><id>3169934</id><snippet>while</snippet></ROW><ROW><id>3169934</id><snippet>a</snippet></ROW><ROW><id>3169934</id><snippet>while 0&lt;=degree</snippet></ROW><ROW><id>3169934</id><snippet>a</snippet></ROW><ROW><id>3169934</id><snippet>len(deg_list) &gt;= 0</snippet></ROW><ROW><id>3169934</id><snippet>deg_list</snippet></ROW><ROW><id>3169934</id><snippet>while</snippet></ROW><ROW><id>3169934</id><snippet>deg_list =[]
deg_list_a=[]
deg_list_b=[]
deg_list_c=[]
degree=input("Enter the students Degree:")
while degree &gt; 0:
    deg_list.append(degree);
    degree=input("Enter the students Degree:")
print len(deg_list)
while len(deg_list) &gt; 0:        # Strictly greater than 0, not equal to 0.
    if deg_list[0] &gt;= 16:
        # Use pop to access first element
        deg_list_a.append(deg_list.pop(0))    
    elif deg_list[0] &gt;= 10:    # One comparison per statement, only.
        deg_list_b.append(deg_list.pop(0))
    else:
        deg_list_c.append(deg_list.pop(0))  # c, not b.
print deg_list_a
print deg_list_b
print deg_list_c           
</snippet></ROW><ROW><id>3170075</id><snippet>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
</snippet></ROW><ROW><id>3170075</id><snippet>texture2D(tex, texCoord)</snippet></ROW><ROW><id>3170331</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>3170331</id><snippet>utf-8</snippet></ROW><ROW><id>3170331</id><snippet>utf-8</snippet></ROW><ROW><id>3170331</id><snippet>u</snippet></ROW><ROW><id>3170331</id><snippet>u'This is a string'</snippet></ROW><ROW><id>3170331</id><snippet>u'\u2665'</snippet></ROW><ROW><id>3170331</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>3170331</id><snippet>b</snippet></ROW><ROW><id>3170331</id><snippet>b'These are bytes'</snippet></ROW><ROW><id>3170345</id><snippet>try</snippet></ROW><ROW><id>3170345</id><snippet>except</snippet></ROW><ROW><id>3170551</id><snippet>LATIN SMALL LETTER E WITH GRAVE</snippet></ROW><ROW><id>3170551</id><snippet>0xe8</snippet></ROW><ROW><id>3170551</id><snippet>str</snippet></ROW><ROW><id>3170551</id><snippet>unicode</snippet></ROW><ROW><id>3170551</id><snippet>&gt;&gt;&gt; f = open('thefile.csv')
&gt;&gt;&gt; prob = []
&gt;&gt;&gt; for i, line in enumerate(f):
...   try: unicode(line)
...   except: prob.append(i)
...
&gt;&gt;&gt; print 'Problems in %d lines:' % len(prob)
&gt;&gt;&gt; print prob
</snippet></ROW><ROW><id>3170644</id><snippet>and</snippet></ROW><ROW><id>3170644</id><snippet>or</snippet></ROW><ROW><id>3170644</id><snippet>is None</snippet></ROW><ROW><id>3170644</id><snippet>object.updated_date</snippet></ROW><ROW><id>3170644</id><snippet>None</snippet></ROW><ROW><id>3170644</id><snippet>past</snippet></ROW><ROW><id>3170644</id><snippet>None</snippet></ROW><ROW><id>3170856</id><snippet>' '.join(names)
</snippet></ROW><ROW><id>3170856</id><snippet>string</snippet></ROW><ROW><id>3170856</id><snippet>str</snippet></ROW><ROW><id>3170856</id><snippet>split</snippet></ROW><ROW><id>3170856</id><snippet>&gt;&gt;&gt; 'Pulp Fiction'.split()
['Pulp', 'Fiction']
</snippet></ROW><ROW><id>3171806</id><snippet>Window</snippet></ROW><ROW><id>3171806</id><snippet>target</snippet></ROW><ROW><id>3171806</id><snippet>WM_FOCUS</snippet></ROW><ROW><id>3171806</id><snippet>SendMessage</snippet></ROW><ROW><id>3171806</id><snippet>import win32ui
import win32con
import time
from ctypes import *

PUL = POINTER(c_ulong)
class KeyBdInput(Structure):
    _fields_ = [("wVk", c_ushort),
                ("wScan", c_ushort),
                ("dwFlags", c_ulong),
                ("time", c_ulong),
                ("dwExtraInfo", PUL)]

class HardwareInput(Structure):
    _fields_ = [("uMsg", c_ulong),
                ("wParamL", c_short),
                ("wParamH", c_ushort)]

class MouseInput(Structure):
    _fields_ = [("dx", c_long),
                ("dy", c_long),
                ("mouseData", c_ulong),
                ("dwFlags", c_ulong),
                ("time",c_ulong),
                ("dwExtraInfo", PUL)]

class Input_I(Union):
    _fields_ = [("ki", KeyBdInput),
                 ("mi", MouseInput),
                 ("hi", HardwareInput)]

class Input(Structure):
    _fields_ = [("type", c_ulong),
                ("ii", Input_I)]

def send_char(char):
    FInputs = Input * 1
    extra = c_ulong(0)
    ii_ = Input_I()
    KEYEVENTF_UNICODE = 0x4
    ii_.ki = KeyBdInput( 0, ord(char), KEYEVENTF_UNICODE, 0, pointer(extra) )
    x = FInputs( ( 1, ii_ ) )
    windll.user32.SendInput(1, pointer(x), sizeof(x[0]))

if __name__ == '__main__':
    wnd = win32ui.FindWindow(None, '* Untitled - Notepad2 (Administrator)')
    type_this = 'jaraco'
    wnd.SetFocus()
    wnd.SetForegroundWindow()
    for char in type_this:
        send_char(char)
</snippet></ROW><ROW><id>3171849</id><snippet>&lt;SCRIPT LANGUAGE="JAVASCRIPT" SRC="mycode.js" TYPE="TEXT/JAVASCRIPT"&gt;
</snippet></ROW><ROW><id>3171849</id><snippet>&lt;SCRIPT LANGUAGE="JAVASCRIPT" SRC="mycode.py" TYPE="TEXT/JAVASCRIPT"&gt;
</snippet></ROW><ROW><id>3171849</id><snippet>var_value = "whatever you want the variable to be"

jsfile = open("myscript.js", "rb")
for line in jsfile:
  print  line.replace("$MYVAR$", var_value)

jsfile.close()
</snippet></ROW><ROW><id>3171850</id><snippet>super</snippet></ROW><ROW><id>3171850</id><snippet>class Fubb(object):
    def __init__(self, *args, **kw):
        # Crap, I can't remember how super() goes!?
</snippet></ROW><ROW><id>3171850</id><snippet>super()</snippet></ROW><ROW><id>3171850</id><snippet>__init__(self, *args, **kw)              # Copy the original method signature.

super(Fubb).__init__(self, *args, **kw)  # Add super(Type).
                     /
              -------
             /
super(Fubb, self).__init__(*args, **kw)  # Move 'self', but preserve order.
</snippet></ROW><ROW><id>3171893</id><snippet>curs.execute("""INSERT INTO akr (code, chrID, chrLOC, refBase, conBase, \
consqual, SNPqual, maxMapqual, numbReadBases) \
VALUES (%s,%s,%s,'%s','%s',%s,%s,%s,%s)""", SNPinfo) 
</snippet></ROW><ROW><id>3171893</id><snippet>INSERT INTO akr (code, chrID, chrLOC, refBase, conBase,
consqual, SNPqual, maxMapqual, numbReadBases) 
VALUES (0,1,3000248,'G','T',102,102,60,25)
</snippet></ROW><ROW><id>3172198</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; L=['a','b','a','b']
&gt;&gt;&gt; print(Counter(L))
Counter({'a': 2, 'b': 2})
&gt;&gt;&gt; print(Counter(L).items())
dict_items([('a', 2), ('b', 2)])
</snippet></ROW><ROW><id>3172198</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; L=['a','b','a','b']
&gt;&gt;&gt; d=defaultdict(int)
&gt;&gt;&gt; for item in L:
&gt;&gt;&gt;     d[item]+=1
&gt;&gt;&gt;     
&gt;&gt;&gt; print d
defaultdict(&lt;type 'int'&gt;, {'a': 2, 'b': 2})
&gt;&gt;&gt; print d.items()
[('a', 2), ('b', 2)]
</snippet></ROW><ROW><id>3172238</id><snippet>import wx.grid 

app = wx.PySimpleApp()

class Source(wx.grid.PyGridTableBase):
    def __init__(self):
        super(Source, self).__init__()
        self._editor = wx.grid.GridCellChoiceEditor()

    def IsEmptyCell(self, row, col):
        return False

    def GetValue(self, row, col):
        return repr( (row, col) )

    def SetValue(self, row, col, value):
        pass

    def GetNumberRows(self):
        return 5

    def GetNumberCols(self):
        return 5

    def GetAttr(self, row, col, kind):
        attr = wx.grid.GridCellAttr()
        self._editor.IncRef()
        attr.SetEditor( self._editor )
        return attr


frame = wx.Frame(None)
grid = wx.grid.Grid(frame)
grid.SetTable( Source() )
frame.Show()

app.MainLoop()
</snippet></ROW><ROW><id>3172240</id><snippet>re</snippet></ROW><ROW><id>3172240</id><snippet>import re
fullwords = re.findall(r'\w+', thetext)
</snippet></ROW><ROW><id>3172240</id><snippet>thetext</snippet></ROW><ROW><id>3172240</id><snippet>f.read()</snippet></ROW><ROW><id>3172240</id><snippet>f</snippet></ROW><ROW><id>3172240</id><snippet>findall</snippet></ROW><ROW><id>3172240</id><snippet>r"[\w']+"</snippet></ROW><ROW><id>3172350</id><snippet>#@staticmethod
#def address($address, $title)
</snippet></ROW><ROW><id>3172446</id><snippet>bash-completion</snippet></ROW><ROW><id>3172446</id><snippet>.deb</snippet></ROW><ROW><id>3172446</id><snippet>.rpm</snippet></ROW><ROW><id>3172446</id><snippet>setuptools</snippet></ROW><ROW><id>3172446</id><snippet>bash-completion</snippet></ROW><ROW><id>3172449</id><snippet>for</snippet></ROW><ROW><id>3172468</id><snippet>script</snippet></ROW><ROW><id>3172468</id><snippet>nonscripttags = htmlDom.findAll(lambda t: t.name != 'script', recursive=False)
</snippet></ROW><ROW><id>3172468</id><snippet>htmlDom.findAll(recursive=False, text=True)</snippet></ROW><ROW><id>3172468</id><snippet>def nonScript(tag):
    return tag.name != 'script'

def getStrings(root):
   for s in root.childGenerator():
     if hasattr(s, 'name'):    # then it's a tag
       if s.name == 'script':  # skip it!
         continue
       for x in getStrings(s): yield x
     else:                     # it's a string!
       yield s
</snippet></ROW><ROW><id>3172468</id><snippet>childGenerator</snippet></ROW><ROW><id>3172468</id><snippet>findAll</snippet></ROW><ROW><id>3172488</id><snippet>SHELL</snippet></ROW><ROW><id>3172488</id><snippet>ILS</snippet></ROW><ROW><id>3172488</id><snippet>sendmail</snippet></ROW><ROW><id>3172488</id><snippet>ILS</snippet></ROW><ROW><id>3172488</id><snippet>shell=False</snippet></ROW><ROW><id>3172558</id><snippet>hashlib</snippet></ROW><ROW><id>3172573</id><snippet>In [72]: c=(a.view(np.ubyte)-96).astype('int32')

In [73]: print(c,c.dtype)
(array([1, 2, 3, 1, 2, 3]), dtype('int32'))
</snippet></ROW><ROW><id>3172759</id><snippet>repr()</snippet></ROW><ROW><id>3172759</id><snippet>str()</snippet></ROW><ROW><id>3172759</id><snippet>unicode()</snippet></ROW><ROW><id>3172759</id><snippet>a = u"['" + u"', '".join(token.text for token in ...) + u"']"
print a
</snippet></ROW><ROW><id>3172802</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3172802</id><snippet>import subprocess
p=subprocess.Popen('FILE_1.py')
p.communicate()
</snippet></ROW><ROW><id>3172802</id><snippet>FILE_1.py</snippet></ROW><ROW><id>3172802</id><snippet>p.communicate()</snippet></ROW><ROW><id>3172802</id><snippet>FILE_1.py</snippet></ROW><ROW><id>3172940</id><snippet>def flat2gen(alist):
  for item in alist:
    if isinstance(item, list):
      for subitem in item: yield subitem
    else:
      yield item
</snippet></ROW><ROW><id>3172940</id><snippet>list(flat2gen(mylist))</snippet></ROW><ROW><id>3173102</id><snippet>from pyparsing import Regex, oneOf

THE_NAMES = \
"""Joe
bob
Jimmy X
grjiaer-rreaijgr Y
"""

THE_THINGS_THEY_DO = \
"""Joe A
bob B
Jimmy X C
Jimmy X X
grjiaer-rreaijgr Y Y
"""

ACTION = Regex('.*')
NAMES = THE_NAMES.splitlines()
print NAMES
GRAMMAR = oneOf(NAMES) + ACTION    
for line in THE_THINGS_THEY_DO.splitlines():
    print GRAMMAR.parseString(line)
</snippet></ROW><ROW><id>3173159</id><snippet>insert</snippet></ROW><ROW><id>3173159</id><snippet>l = list(...)
l.insert(index, item)
</snippet></ROW><ROW><id>3173159</id><snippet>l[index:index] = [item]
</snippet></ROW><ROW><id>3173159</id><snippet>l.insert(newindex, l.pop(oldindex))
</snippet></ROW><ROW><id>3173251</id><snippet>execfile</snippet></ROW><ROW><id>3173251</id><snippet>sys.path</snippet></ROW><ROW><id>3173251</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, r'C:\Modules\Module1')
&gt;&gt;&gt; import module
</snippet></ROW><ROW><id>3173251</id><snippet>__init__.py</snippet></ROW><ROW><id>3173251</id><snippet>import package.module</snippet></ROW><ROW><id>3173251</id><snippet>__init__.py</snippet></ROW><ROW><id>3173338</id><snippet>&gt;&gt;&gt; for i in range(100):
...    time.sleep(1)
...    sys.stdout.write("\r%d%%" %i)    # or print &gt;&gt; sys.stdout, "\r%d%%" %i,
...    sys.stdout.flush()
... 
</snippet></ROW><ROW><id>3173367</id><snippet>def make_filter(ex):
    def do_filter(path):
        pat = r'.+\.(' + ex + ')$'
        match = re.search(pat, path)
        return match and match.group(1) == ex
    return do_filter

filter(make_filter('txt'), files)
</snippet></ROW><ROW><id>3173367</id><snippet>filter(lambda path: filterex(path, 'txt'), files)
</snippet></ROW><ROW><id>3173367</id><snippet>[path for path in files if filterex(path, 'txt')]
</snippet></ROW><ROW><id>3173367</id><snippet>(path for path in files if filterex(path, 'txt'))
</snippet></ROW><ROW><id>3173388</id><snippet>urls.txt</snippet></ROW><ROW><id>3173388</id><snippet>url:</snippet></ROW><ROW><id>3173388</id><snippet>import os
import urllib

DOWNLOADS_DIR = '/python-downloader/downloaded'

# For every line in the file
for url in open('urls.txt'):
    # Split on the rightmost / and take everything on the right side of that
    name = url.rsplit('/', 1)[-1]

    # Combine the name and the downloads directory to get the local filename
    filename = os.path.join(DOWNLOADS_DIR, name)

    # Download the file if it does not exist
    if not os.path.isfile(filename):
        urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>3173393</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>3173393</id><snippet>controlUpdate()</snippet></ROW><ROW><id>3173393</id><snippet>for</snippet></ROW><ROW><id>3173631</id><snippet>csv</snippet></ROW><ROW><id>3173631</id><snippet>csv</snippet></ROW><ROW><id>3173656</id><snippet>from itertools import groupby

def group_by_name(filenames):
    '''Puts the filenames in the given iterable into a dictionary where
    the key is the first component of the filename and the value is
    a list of the filenames with that component.'''
    keyfunc = lambda f: f.split('.', 1)[0]
    return dict( (k, list(g)) for k,g in groupby(
               sorted(filenames, key=keyfunc), key=keyfunc
           ) )
</snippet></ROW><ROW><id>3173656</id><snippet>&gt;&gt;&gt; test_data = [
...   exia.frame, exia.head, exia.swords, exia.legs,
...   exia.arms, exia.pilot, exia.gn_drive, lockon_stratos.data,
...   tieria_erde.data, ribbons_almark.data, otherstuff.dada
... ]
</snippet></ROW><ROW><id>3173656</id><snippet>&gt;&gt;&gt; group_by_name(test_data)
{'exia': ['exia.arms', 'exia.frame', 'exia.gn_drive', 'exia.head',
          'exia.legs', 'exia.pilot', 'exia.swords'],
 'lockon_stratos': ['lockon_stratos.data'],
 'otherstuff': ['otherstuff.dada'],
 'ribbons_almark': ['ribbons_almark.data'],
 'tieria_erde': ['tieria_erde.data']}
</snippet></ROW><ROW><id>3173656</id><snippet>def group_by_extension(filenames):
    '''Puts the filenames in the given iterable into a dictionary where
    the key is the last component of the filename and the value is
    a list of the filenames with that extension.'''
    keyfunc = lambda f: f.split('.', 1)[1]
    return dict( (k, list(g)) for k,g in groupby(
               sorted(filenames, key=keyfunc), key=keyfunc
           ) )
</snippet></ROW><ROW><id>3173656</id><snippet>keyfunc = ...</snippet></ROW><ROW><id>3173656</id><snippet>&gt;&gt;&gt; group_by_extension(test_data)
{'arms': ['exia.arms'],
 'dada': ['otherstuff.dada'],
 'data': ['lockon_stratos.data', 'ribbons_almark.data', 'tieria_erde.data'],
 'frame': ['exia.frame'],
 'gn_drive': ['exia.gn_drive'],
 'head': ['exia.head'],
 'legs': ['exia.legs'],
 'pilot': ['exia.pilot'],
 'swords': ['exia.swords']}
</snippet></ROW><ROW><id>3173656</id><snippet>from collections import defaultdict
def group_by_both(filenames):
    '''Puts the filenames in the given iterable into two dictionaries,
    where in the first, the key is the first component of the filename,
    and in the second, the key is the last component of the filename.
    The values in each dictionary are lists of the filenames with that
    base or extension.'''
    by_name = defaultdict(list)
    by_ext = defaultdict(list)
    for f in filenames:
        name, ext = f.split('.', 1)
        by_name[name] += [f]
        by_ext[ext] += [f]
    return by_name, by_ext
</snippet></ROW><ROW><id>3173667</id><snippet>y = x[:]
</snippet></ROW><ROW><id>3173667</id><snippet>x</snippet></ROW><ROW><id>3173889</id><snippet>def myfunc(w):
    y = [el[:] for el in w]
    y[0].append('What do I need to do to get this to work here?')
    y[0].append('When I search for the manual, I get pointed to python.org, but I can\'t find the answer there.')
    return y

x = [[]]
z = myfunc(x)
print(x)
</snippet></ROW><ROW><id>3173920</id><snippet>for i in xrange(len(data)):
    data[i] = "everything"
</snippet></ROW><ROW><id>3173920</id><snippet>data[i]</snippet></ROW><ROW><id>3173920</id><snippet>data</snippet></ROW><ROW><id>3173920</id><snippet>i</snippet></ROW><ROW><id>3173920</id><snippet>for item in data
</snippet></ROW><ROW><id>3173920</id><snippet>item</snippet></ROW><ROW><id>3173920</id><snippet>xrange</snippet></ROW><ROW><id>3173920</id><snippet>for i, _ in enumerate(data):
    data[i] = "everything"
</snippet></ROW><ROW><id>3173920</id><snippet>enumerate</snippet></ROW><ROW><id>3173920</id><snippet>(index, item)</snippet></ROW><ROW><id>3173920</id><snippet>enumerate</snippet></ROW><ROW><id>3173920</id><snippet>xrange</snippet></ROW><ROW><id>3173920</id><snippet>enumerate</snippet></ROW><ROW><id>3173920</id><snippet>for i, item in enumerate(data):
    data[i] = func(item)
</snippet></ROW><ROW><id>3173920</id><snippet>data = [func(item) for item in data]
</snippet></ROW><ROW><id>3173920</id><snippet>data</snippet></ROW><ROW><id>3173920</id><snippet>func(item)</snippet></ROW><ROW><id>3173920</id><snippet>data = ["everything" for item in data]
</snippet></ROW><ROW><id>3173999</id><snippet>wx.Frame</snippet></ROW><ROW><id>3173999</id><snippet>style</snippet></ROW><ROW><id>3173999</id><snippet>wx.FRAME_SHAPED</snippet></ROW><ROW><id>3173999</id><snippet>wx.Frame</snippet></ROW><ROW><id>3174005</id><snippet>" copy the buffer into a new window, then run that buffer through python
sil %y a | below new | sil put a | sil %!python -
" indicate the output window as the current previewwindow
setlocal winheight 20
setlocal previewwindow ro nomodifiable nomodified
</snippet></ROW><ROW><id>3174005</id><snippet>:new</snippet></ROW><ROW><id>3174005</id><snippet>:below 10 new  "create a window of height 10
</snippet></ROW><ROW><id>3174039</id><snippet>reply</snippet></ROW><ROW><id>3174600</id><snippet>def getPossibleDecompositions(s):
    if s == '':
        yield []
    else:
        for pattern in patterns:
            if s.startswith(pattern):
                for x in getPossibleDecompositions(s[len(pattern):]):
                    yield [pattern] + x

for x in getPossibleDecompositions('BBBBBBBB'):
    print x
</snippet></ROW><ROW><id>3174714</id><snippet>@transaction.commit_manually
def save(self, *args, **kwargs):
    try:
        super(self.__class__, self).save(*args, **kwargs)
        self.qa.vote_down_count += 1
        self.qa.save()
    except:
        transaction.rollback()
        raise
    else:
        transaction.commit()
</snippet></ROW><ROW><id>3174714</id><snippet>@transaction.commit_manually</snippet></ROW><ROW><id>3174714</id><snippet>save()</snippet></ROW><ROW><id>3174996</id><snippet>-(void)pythonReady:(PythonClass *)pythonObject</snippet></ROW><ROW><id>3174996</id><snippet>pythonReady:</snippet></ROW><ROW><id>3174996</id><snippet>pythonReady:</snippet></ROW><ROW><id>3174996</id><snippet>pythonObject</snippet></ROW><ROW><id>3174996</id><snippet>#import &lt;Python/Python.h&gt;

@implementation PythonController (Loading)
- (void)loadPython {
    NSString *pathToScript = @"/some/path/to/script.py";
    setenv("PYTHONPATH", [@"/some/path/to/" UTF8String], 1);
    Py_SetProgramName("/usr/bin/python");
    Py_Initialize();
    FILE *pyScript = fopen([pathToScript UTF8String], "r");
    int result = PyRun_SimpleFile(pyScript, [[pathToScript lastPathComponent] UTF8String]);
    if (result != 0) { NSLog(@"Loading Python Failed!"); }
}
@end
</snippet></ROW><ROW><id>3175216</id><snippet>import urllib2, cookielib
import ClientForm
from BeautifulSoup import BeautifulSoup

first_name = "Mona"
last_name = "Sahlin"
url = 'http://www.ratsit.se/BC/Search.aspx'
cookiejar = cookielib.LWPCookieJar()
cookiejar = urllib2.HTTPCookieProcessor(cookiejar)

opener = urllib2.build_opener(cookiejar)
urllib2.install_opener(opener)

response = urllib2.urlopen(url)
forms = ClientForm.ParseResponse(response, backwards_compat=False)

# Use to print out forms to check if website design changes
for i, x in enumerate(forms):
    print 'Form[%d]: %r, %d controls' % (i, x.name, len(x.controls))
    for j, c in enumerate(x.controls):
        print ' ', j, c.__class__.__name__,
        try: n = c.name
        except AttributeError: n = 'NO NAME'
        print repr(n)

#Confirm correct form
form = forms[0]

controls = form.__dict__.get('controls')
print controls, form.controls

print "------------------------------------------------------------"
try:
    controls[1].value = first_name
    controls[2].value = last_name
    p = form.click('ctl00$cphMain$cmdButton')
    print 'p is', repr(p)
    page = urllib2.urlopen(p).read()
    ''' give error here: The following error occured: "'str' object has no attribute 'name'" '''

#    print controls[9]
    print '----------here-------'
    soup = BeautifulSoup(''.join(page))
    soup = soup.prettify()
finally:
    print 'ciao!'
</snippet></ROW><ROW><id>3175216</id><snippet>    controls[1].value = first_name
    controls[2].value = last_name
</snippet></ROW><ROW><id>3175216</id><snippet>controls[1]</snippet></ROW><ROW><id>3175216</id><snippet>controls[2]</snippet></ROW><ROW><id>3175216</id><snippet>controls</snippet></ROW><ROW><id>3175216</id><snippet>form.click</snippet></ROW><ROW><id>3175293</id><snippet>False == 0</snippet></ROW><ROW><id>3175293</id><snippet>True == 1</snippet></ROW><ROW><id>3175293</id><snippet>0</snippet></ROW><ROW><id>3175293</id><snippet>1</snippet></ROW><ROW><id>3175293</id><snippet>false = 0; true = 1</snippet></ROW><ROW><id>3175293</id><snippet>bool</snippet></ROW><ROW><id>3175293</id><snippet>int</snippet></ROW><ROW><id>3175293</id><snippet>True</snippet></ROW><ROW><id>3175293</id><snippet>False</snippet></ROW><ROW><id>3175293</id><snippet>False</snippet></ROW><ROW><id>3175293</id><snippet>True</snippet></ROW><ROW><id>3175293</id><snippet>str(...)</snippet></ROW><ROW><id>3175293</id><snippet>repr(...)</snippet></ROW><ROW><id>3175553</id><snippet>'OPTIONS': {'ssl': {'ca':'/path/to/cert.pem',},},
</snippet></ROW><ROW><id>3175579</id><snippet>__init__</snippet></ROW><ROW><id>3175579</id><snippet>class DeudaForm(forms.ModelForm):

    class Meta:
        model = Deuda
        exclude = ('propietario',)

    def __init__(self, propietario):
        forms.ModelForm.__init__(self)
        self.fields['adeudado'].queryset = User.objects.exclude(pk=d.propietario.pk)
</snippet></ROW><ROW><id>3175691</id><snippet>import ast
(options, args) = parser.parse_args()    
myopt = ast.literal_eval(options.myopt)
</snippet></ROW><ROW><id>3175876</id><snippet>table.resizeColumnsToContents()
</snippet></ROW><ROW><id>3176133</id><snippet>'y[%i]/text()' % x</snippet></ROW><ROW><id>3176133</id><snippet>'y'</snippet></ROW><ROW><id>3176133</id><snippet>'//y'</snippet></ROW><ROW><id>3176364</id><snippet>import datetime as dt
from time import sleep

now = dt.datetime.now()

if now.hour &gt;= 4 andnow.hour &lt; 5:
    sleep((60 - now.minute)*60 + (60 - now.second))
</snippet></ROW><ROW><id>3176364</id><snippet>import datetime as dt
from time import sleep

now = dt.datetime.now()
pause = dt.datetime(now.year, now.month, now.day, 4)
start = dt.datetime(now.year, now.month, now.day, 5)

if now &gt;= pause and now &lt; start:
    sleep((start - now).seconds)
</snippet></ROW><ROW><id>3176466</id><snippet>map &lt;F11&gt; :exe '!ctags -R -f ./tags ' . shellescape(system('python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"'))&lt;CR&gt;
</snippet></ROW><ROW><id>3176466</id><snippet>map &lt;F11&gt; :!ctags -R -f ./tags `python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()`&lt;CR&gt;
</snippet></ROW><ROW><id>3176809</id><snippet>from math import ceil, log10
int(pow(10, ceil(log10(abs(x or 0.1)))))
</snippet></ROW><ROW><id>3176981</id><snippet>^</snippet></ROW><ROW><id>3176981</id><snippet>re.match()</snippet></ROW><ROW><id>3176981</id><snippet>"\Z"</snippet></ROW><ROW><id>3176981</id><snippet>"$".</snippet></ROW><ROW><id>3176981</id><snippet>s</snippet></ROW><ROW><id>3176981</id><snippet>foo</snippet></ROW><ROW><id>3176981</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'foo\n'
&gt;&gt;&gt; re.match('foo$', s)
&lt;_sre.SRE_Match object at 0x00BAFE90&gt; # match -- FAIL!
&gt;&gt;&gt; re.match('foo\Z', s) # no match -- OK
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3176981</id><snippet>$</snippet></ROW><ROW><id>3176981</id><snippet>\Z</snippet></ROW><ROW><id>3177418</id><snippet>from itertools import product
def function1(*seqs):
  return (x for x in product(*seqs) if len(x) == len(set(x)))

&gt;&gt;&gt; list(function1([0,1,2], [0,3,4], [0,2,4]))
[(0, 3, 2), (0, 3, 4), (0, 4, 2), (1, 0, 2), (1, 0, 4), (1, 3, 0), (1, 3, 2), (1, 3, 4), (1, 4, 0), (1, 4, 2), (2, 0, 4), (2, 3, 0), (2, 3, 4), (2, 4, 0)]
</snippet></ROW><ROW><id>3177424</id><snippet>class MetaForm(type):
    def __new__(cls, name, bases, attrs):
        print "%s: %s" % (name, attrs)
        return type.__new__(cls, name, bases, attrs)

class BaseForm(object):
    my_attr = 1
    def __init__(self):
        print "BaseForm.__init__"

class Form(BaseForm):
    __metaclass__ = MetaForm
    def __init__(self):
        print "Form.__init__"

class CustomForm(Form):
    my_field = 2
    def __init__(self):
        print "CustomForm.__init__"

f = CustomForm()
</snippet></ROW><ROW><id>3177424</id><snippet>Form: {'__module__': '__main__', '__metaclass__': &lt;class '__main__.MetaForm'&gt;, '__init__':&lt;function __init__ at 0x0227E0F0&gt;}
CustomForm: {'__module__': '__main__', 'my_field': 2, '__init__': &lt;function __init__ at 0x0227E170&gt;}
CustomForm.__init__
</snippet></ROW><ROW><id>3177424</id><snippet>MetaForm.__new__</snippet></ROW><ROW><id>3177424</id><snippet>Form</snippet></ROW><ROW><id>3177424</id><snippet>CustomForm</snippet></ROW><ROW><id>3177424</id><snippet>BaseForm</snippet></ROW><ROW><id>3177424</id><snippet>Form</snippet></ROW><ROW><id>3177424</id><snippet>Fields</snippet></ROW><ROW><id>3177424</id><snippet>BaseForm</snippet></ROW><ROW><id>3177750</id><snippet>{{ article.company.all|join:", " }}
</snippet></ROW><ROW><id>3177791</id><snippet>logging</snippet></ROW><ROW><id>3177791</id><snippet>print&gt;&gt;sys.stderr</snippet></ROW><ROW><id>3177844</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
</snippet></ROW><ROW><id>3177844</id><snippet>sys.path</snippet></ROW><ROW><id>3177844</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages</snippet></ROW><ROW><id>3177844</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/</snippet></ROW><ROW><id>3177844</id><snippet>site-packages</snippet></ROW><ROW><id>3177844</id><snippet>Contents</snippet></ROW><ROW><id>3177844</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3177844</id><snippet>export PYTHONPATH=/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages:$PYTHONPATH
</snippet></ROW><ROW><id>3177896</id><snippet>import ctypes

ctypes.windll.WINMM.mciSendStringW(u"set cdaudio door open", None, 0, None)
</snippet></ROW><ROW><id>3177896</id><snippet>ctypes.windll.WINMM.mciSendStringW(u"open D: type cdaudio alias d_drive", None, 0, None)
ctypes.windll.WINMM.mciSendStringW(u"set d_drive door open", None, 0, None)
</snippet></ROW><ROW><id>3178052</id><snippet>... print '{0} / {1}, '.format(x+1, y), #&lt;= with a ,
</snippet></ROW><ROW><id>3178121</id><snippet>h = urllib.urlopen(website, proxies = {'http': proxylist})
</snippet></ROW><ROW><id>3178121</id><snippet>h = urllib.urlopen(website, proxies = {'http': proxy})
</snippet></ROW><ROW><id>3178133</id><snippet>findall</snippet></ROW><ROW><id>3178133</id><snippet>search</snippet></ROW><ROW><id>3178133</id><snippet>ip = urllib.urlopen('http://www.samair.ru/proxy/time-01.htm').read()
clientIp = re.findall(r"\d+\.\d+\.\d+\.\d+", ip)
</snippet></ROW><ROW><id>3178133</id><snippet>r"…"</snippet></ROW><ROW><id>3178202</id><snippet>from collections import defaultdict
import json

d = defaultdict(dict)
for date in dates:
    d[date.year][date.month] = info_for_date(date)
json.dumps(d)
</snippet></ROW><ROW><id>3178370</id><snippet>__import__</snippet></ROW><ROW><id>3178370</id><snippet>import os
import glob
for file in glob(os.path.join(os.path.dirname(os.path.abspath(__file__))), "*.py"):
    name = os.path.splitext(os.path.basename(file))[0]
    # add package prefix to name, if required
    module = __import__(name)
    for member in dir(module):
        # do something with the member named ``member``
</snippet></ROW><ROW><id>3178694</id><snippet>// Create an input and output handle
input_handle = parse_xml_document();
output_handle = new_xml_document();

// Assuming the &lt;car&gt;, &lt;color&gt; etc. nodes are
// the children of some, get them as an array
list_of_nodes = input_handle.get_list_child_nodes();

// These are empty variables for storing our data as we parse it
var car, color, speed = NULL

foreach(list_of_nodes as node)
{
  if(node.tag_name() == "speed")
  {
    speed = node.value();
    // etc for each type of non-delimiting field          
  }

  if(node.tag_name() == "car")
  {
    // If there's already a car specified, take its data,
    // insert it into the output xml structure and th
    if(car != NULL)
    {
      // Add a new child node to the output document
      node = output_handle.append_child_node("car");
      // Set the attribute on this new output node
      node.set_attribute("name", node.value());
      // Add the stored child attributes
      node.add_child("color", color);
      node.add_child("speed", speed);
    }

    // Replace the value of car afterwards. This allows the
    // first iteration to happen when there is no stored value
    // for "car".
    car = node.value();

  }
}
</snippet></ROW><ROW><id>3178846</id><snippet>Scale</snippet></ROW><ROW><id>3178846</id><snippet>Text</snippet></ROW><ROW><id>3178846</id><snippet>pickle</snippet></ROW><ROW><id>3178846</id><snippet>import Tkinter
import pickle

class simpleapp_tk(Tkinter.Tk):
    def __init__(self, parent=None):
        Tkinter.Tk.__init__(self, parent)
        self.parent = parent
        self.initialize()
        self.load_data()
        self.protocol("WM_DELETE_WINDOW", self.save_data)

    def initialize(self):
        self.sclX = Tkinter.Scale(self, from_=0, to=100, orient='horizontal',
            resolution=1,command=self.update_label)
        self.sclX.pack(ipadx=75)

        self.labelVar = Tkinter.StringVar()
        self.label = Tkinter.Label(self,textvariable=self.labelVar)
        self.label.pack(ipadx=75)

        self.frame = Tkinter.Frame(self,relief='ridge',borderwidth=4)
        self.frame.pack()
        #self.LVariable = Tkinter.StringVar()
        self.s = Tkinter.Scrollbar(self.frame)
        self.L = Tkinter.Text(self.frame, borderwidth=0, font=('Arial', 10),
            width=30, height=15)
        self.s.config(command=self.L.yview, elementborderwidth=1)
        self.L.grid(column=0, row=0, sticky='EW')
        self.s.grid(column=1, row=0, sticky='NSEW')

    def update_label(self, event):
        self.labelVar.set(100 - self.sclX.get())

    def save_data(self):
        data = {'scale': self.sclX.get(), 'text': self.L.get('1.0', 'end')}
        with file('config.data', 'wb') as f:
            pickle.dump(data, f)
        self.destroy()

    def load_data(self):
        try:
            with file('config.data', 'rb') as f:
                data = pickle.load(f)
                self.sclX.set(data['scale'])
                self.L.insert("end", data['text'])
        except IOError:
            # no config file exists
            pass

if __name__ == "__main__":
    app = simpleapp_tk()
    app.mainloop()
</snippet></ROW><ROW><id>3179110</id><snippet>list</snippet></ROW><ROW><id>3179110</id><snippet>&lt;root&gt;
&lt;node1 val="foo"&gt;derp&lt;/node1&gt;
&lt;node2 val="bar" /&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>3179110</id><snippet>root = objectify.parse("myfile.xml")
print root.node1.get("val") # prints "foo"
print root.node1.text # prints "derp"
print root.node2.get("val") # prints "bar"
</snippet></ROW><ROW><id>3179110</id><snippet>&gt;&gt;&gt; xml = """&lt;root&gt;
    &lt;node val="foo"&gt;derp&lt;/node&gt;
    &lt;node val="bar" /&gt;
    &lt;/root&gt;"""
&gt;&gt;&gt; root = objectify.fromstring(xml)
&gt;&gt;&gt; for node in root.node:
    print node.get("val")

foo
bar
</snippet></ROW><ROW><id>3179110</id><snippet>context = dict(books = root.book,
               # other stuff
               )
</snippet></ROW><ROW><id>3179119</id><snippet>property_asel = [val for is_good, val in zip(good_objects, property_a) if is_good]
</snippet></ROW><ROW><id>3179119</id><snippet>property_asel = [property_a[i] for i in good_indices]
</snippet></ROW><ROW><id>3179119</id><snippet>good_indices</snippet></ROW><ROW><id>3179119</id><snippet>property_a</snippet></ROW><ROW><id>3179160</id><snippet>from sqlalchemy.orm import relationship

...

class Profile(Base):
    __tablename__ = 'profile'

    ...

    answers = relationship("Answer", backref="profile")

    ...


class Question(Base):
    __tablename__ = 'question'

    ...

    answers = relationship("Answer", backref="question")

    ...
</snippet></ROW><ROW><id>3179610</id><snippet>class MyClass:
  Property1 = 1
</snippet></ROW><ROW><id>3179610</id><snippet>MyClass</snippet></ROW><ROW><id>3179610</id><snippet>&gt;&gt;&gt; MyClass.__dict__
{'Property1': 1, '__doc__': None, '__module__': '__main__'}
</snippet></ROW><ROW><id>3179610</id><snippet>'Property1': 1</snippet></ROW><ROW><id>3179610</id><snippet>MyClass.Property1</snippet></ROW><ROW><id>3179610</id><snippet>MyClass.__dict__</snippet></ROW><ROW><id>3179610</id><snippet>Property1</snippet></ROW><ROW><id>3179610</id><snippet>1</snippet></ROW><ROW><id>3179610</id><snippet>&gt;&gt;&gt; MyClass.Property1
1
</snippet></ROW><ROW><id>3179610</id><snippet>&gt;&gt;&gt; mc = MyClass()
</snippet></ROW><ROW><id>3179610</id><snippet>&gt;&gt;&gt; mc.__dict__
{}
</snippet></ROW><ROW><id>3179610</id><snippet>mc.Property1</snippet></ROW><ROW><id>3179610</id><snippet>mc.__dict__</snippet></ROW><ROW><id>3179610</id><snippet>'Property1'</snippet></ROW><ROW><id>3179610</id><snippet>mc</snippet></ROW><ROW><id>3179610</id><snippet>MyClass.__dict__</snippet></ROW><ROW><id>3179610</id><snippet>&gt;&gt;&gt; mc.Property1
1
</snippet></ROW><ROW><id>3179987</id><snippet>__import__</snippet></ROW><ROW><id>3179987</id><snippet>imp</snippet></ROW><ROW><id>3179987</id><snippet>&gt;&gt;&gt; sys1 = __import__("sys")
&gt;&gt;&gt; import imp
&gt;&gt;&gt; sys2 = imp.load_module("sys2", *imp.find_module("sys"))
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys is sys1 is sys2
True
</snippet></ROW><ROW><id>3180043</id><snippet>class bad(object):
    def __eq__(self, other):
        return False

x = bad()
print x is x, x==x # True, False
</snippet></ROW><ROW><id>3180154</id><snippet>for a,b in set</snippet></ROW><ROW><id>3180154</id><snippet>a,b = set[0] ... loop ... a,b = set[1] ... loop ...</snippet></ROW><ROW><id>3180154</id><snippet>set</snippet></ROW><ROW><id>3180154</id><snippet>a,b</snippet></ROW><ROW><id>3180387</id><snippet>aswfa</snippet></ROW><ROW><id>3180387</id><snippet>scipy special/_cephes.so</snippet></ROW><ROW><id>3180387</id><snippet>nm -gpv special/_cephes.so | egrep aswfa</snippet></ROW><ROW><id>3180455</id><snippet>class City(object):
   def __init__(self, name, description, country, populations):
      self.city_name = name
      # etc.

   @classmethod
   def from_id(cls, city_id):
       # initialise from DB 
</snippet></ROW><ROW><id>3180455</id><snippet> &gt;&gt;&gt; c = City('Hollowberg', '', 'Densin', 3)
 &gt;&gt;&gt; c.id
 1233L

 &gt;&gt;&gt; c2 = City.from_id(1233)
</snippet></ROW><ROW><id>3180514</id><snippet>bad_subj</snippet></ROW><ROW><id>3180514</id><snippet>'Notify [failure]'</snippet></ROW><ROW><id>3180514</id><snippet>bad_subj: %(subj)s [failure]
subj: Notify
</snippet></ROW><ROW><id>3181027</id><snippet>convert *.tiff my_combined_file.tiff
</snippet></ROW><ROW><id>3181637</id><snippet>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

EXTERN_C int __declspec(dllexport) WINAPI Sum (int x, int y);

EXTERN_C int __declspec(dllexport) WINAPI Sum (int x, int y)
{
    return x + y;
}

int main() 
{
    printf ("2+3=%d\n", Sum(2,3));
}
</snippet></ROW><ROW><id>3181637</id><snippet>/FIXED:NO</snippet></ROW><ROW><id>3181637</id><snippet>2+3=5</snippet></ROW><ROW><id>3181637</id><snippet>Sum</snippet></ROW><ROW><id>3181637</id><snippet>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

typedef int (WINAPI *PFN_SUM) (int x, int y);

int main()
{
    HMODULE hModule = LoadLibrary (TEXT("C:\\Oleg\\ExeAsDll\\Loadable.exe"));
    PFN_SUM fnSum = (PFN_SUM) GetProcAddress (hModule, "_Sum@8");
    int res = fnSum (5,4);
    printf ("5+4=%d\n", res);
    return 0;
}
</snippet></ROW><ROW><id>3181637</id><snippet>5+4=9</snippet></ROW><ROW><id>3181942</id><snippet>and</snippet></ROW><ROW><id>3181942</id><snippet>or</snippet></ROW><ROW><id>3181942</id><snippet>a or b</snippet></ROW><ROW><id>3181942</id><snippet>a</snippet></ROW><ROW><id>3181942</id><snippet>b</snippet></ROW><ROW><id>3181942</id><snippet>b</snippet></ROW><ROW><id>3181942</id><snippet>a and b</snippet></ROW><ROW><id>3181942</id><snippet>a or b</snippet></ROW><ROW><id>3181942</id><snippet>spam if foo==bar else eggs
</snippet></ROW><ROW><id>3182061</id><snippet>document</snippet></ROW><ROW><id>3182061</id><snippet>window</snippet></ROW><ROW><id>3182205</id><snippet>@tools.cache()
def _get_id(self, cr, uid, module, xml_id):
    ids = self.search(cr, uid, [('module','=',module),('name','=', xml_id)])
    if not ids:
        raise ValueError('No references to %s.%s' % (module, xml_id))
    # the sql constraints ensure us we have only one result
    return ids[0]
</snippet></ROW><ROW><id>3182205</id><snippet>            if not result3:
                self._get_id.clear_cache(cr.dbname, uid, module, xml_id)
</snippet></ROW><ROW><id>3182241</id><snippet>def MyClass(object):
    def __init__(number):
        self.number=number

my_objects = []

for i in range(100) :
    my_objects.append(MyClass(i))

#later

for obj in my_objects :
    print obj.number
</snippet></ROW><ROW><id>3182367</id><snippet>print</snippet></ROW><ROW><id>3182376</id><snippet>favs.text</snippet></ROW><ROW><id>3182376</id><snippet>for photo in favs.find('photos').findall('photo'):
    print photo.get('id')
</snippet></ROW><ROW><id>3182376</id><snippet>'445267544'
'3334987037'
</snippet></ROW><ROW><id>3182376</id><snippet>for elm in favs.getiterator():
    print elm.items()
</snippet></ROW><ROW><id>3182376</id><snippet>[('stat', 'ok')]
[('total', '2'), ('perpage', '100'), ('page', '1'), ('pages', '1')]
[('isfamily', '0'), ('title', 'The Giants of Africa'), ('farm', '1'), ('ispublic', '1'), ('server', '218'), ('isfriend', '0'), ('secret', '992df924aa'), ('owner', '49746597@N00'), ('id', '445267544'), ('date_faved', '1273873654')]
[('isfamily', '0'), ('title', 'Lava Light - Maui, Hawaii'), ('farm', '4'), ('ispublic', '1'), ('server', '3401'), ('isfriend', '0'), ('secret', '2fa1856916'), ('owner', '7765891@N08'), ('id', '3334987037'), ('date_faved', '1273873515')]
</snippet></ROW><ROW><id>3182622</id><snippet>clos['add']</snippet></ROW><ROW><id>3182622</id><snippet>sum</snippet></ROW><ROW><id>3182748</id><snippet>&gt;&gt;&gt; u'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
u'Sopet\xf3n'
</snippet></ROW><ROW><id>3182956</id><snippet>except:</snippet></ROW><ROW><id>3182956</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>3182956</id><snippet>BaseException</snippet></ROW><ROW><id>3182956</id><snippet>&gt;&gt;&gt; class X: pass
... 
&gt;&gt;&gt; raise X
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
__main__.X: &lt;__main__.X instance at 0xc9ad0&gt;
</snippet></ROW><ROW><id>3182956</id><snippet>except BaseException:</snippet></ROW><ROW><id>3182956</id><snippet>except:</snippet></ROW><ROW><id>3183160</id><snippet># -*- coding: utf-8 -*-
# (or w/ever other coding you use for unicode literals;-)
import qt, sys
a=qt.QApplication(sys.argv)
w=qt.QPushButton(u"Olá Mundo", None)
w.show()
a.exec_loop()
</snippet></ROW><ROW><id>3183465</id><snippet>Form</snippet></ROW><ROW><id>3183465</id><snippet>Field</snippet></ROW><ROW><id>3183465</id><snippet>Fields</snippet></ROW><ROW><id>3183465</id><snippet>Form</snippet></ROW><ROW><id>3183465</id><snippet>Form</snippet></ROW><ROW><id>3183465</id><snippet>Form</snippet></ROW><ROW><id>3183539</id><snippet>from math import sin, cos, asin, sqrt, degrees, radians

Earth_radius_km = 6371.0
RADIUS = Earth_radius_km

def haversine(angle_radians):
    return sin(angle_radians / 2.0) ** 2

def inverse_haversine(h):
    return 2 * asin(sqrt(h)) # radians

def distance_between_points(lat1, lon1, lat2, lon2):
    # all args are in degrees
    # WARNING: loss of absolute precision when points are near-antipodal
    lat1 = radians(lat1)
    lat2 = radians(lat2)
    dlat = lat2 - lat1
    dlon = radians(lon2 - lon1)
    h = haversine(dlat) + cos(lat1) * cos(lat2) * haversine(dlon)
    return RADIUS * inverse_haversine(h)

def bounding_box(lat, lon, distance):
    # Input and output lats/longs are in degrees.
    # Distance arg must be in same units as RADIUS.
    # Returns (dlat, dlon) such that
    # no points outside lat +/- dlat or outside lon +/- dlon
    # are &lt;= "distance" from the (lat, lon) point.
    # Derived from: http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # WARNING: problems if North/South Pole is in circle of interest
    # WARNING: problems if longitude meridian +/-180 degrees intersects circle of interest
    # See quoted article for how to detect and overcome the above problems.
    # Note: the result is independent of the longitude of the central point, so the
    # "lon" arg is not used.
    dlat = distance / RADIUS
    dlon = asin(sin(dlat) / cos(radians(lat)))
    return degrees(dlat), degrees(dlon)

if __name__ == "__main__":

    # Examples from Jan Matuschek's article

    def test(lat, lon, dist):
        print "test bounding box", lat, lon, dist
        dlat, dlon = bounding_box(lat, lon, dist)
        print "dlat, dlon degrees", dlat, dlon
        print "lat min/max rads", map(radians, (lat - dlat, lat + dlat))
        print "lon min/max rads", map(radians, (lon - dlon, lon + dlon))

    print "liberty to eiffel"
    print distance_between_points(40.6892, -74.0444, 48.8583, 2.2945) # about 5837 km
    print
    print "calc min/max lat/lon"
    degs = map(degrees, (1.3963, -0.6981))
    test(*degs, dist=1000)
    print
    degs = map(degrees, (1.3963, -0.6981, 1.4618, -1.6021))
    print degs, "distance", distance_between_points(*degs) # 872 km
</snippet></ROW><ROW><id>3183684</id><snippet>def foo():</snippet></ROW><ROW><id>3183684</id><snippet>VAR1</snippet></ROW><ROW><id>3183684</id><snippet>LISTL</snippet></ROW><ROW><id>3183684</id><snippet>VAR1 = 2</snippet></ROW><ROW><id>3183684</id><snippet>VAR1</snippet></ROW><ROW><id>3183684</id><snippet>+=</snippet></ROW><ROW><id>3183684</id><snippet>global</snippet></ROW><ROW><id>3183684</id><snippet>global VAR1</snippet></ROW><ROW><id>3183720</id><snippet>dt.replace( second=0, microsecond=0)
</snippet></ROW><ROW><id>3183767</id><snippet>strchr.restype = c_char_p
</snippet></ROW><ROW><id>3183767</id><snippet>strchr</snippet></ROW><ROW><id>3183767</id><snippet>None</snippet></ROW><ROW><id>3183767</id><snippet>NULL</snippet></ROW><ROW><id>3183777</id><snippet>objc.loadBundle</snippet></ROW><ROW><id>3183777</id><snippet>objc.lookUpClass</snippet></ROW><ROW><id>3183777</id><snippet>NSClassFromString</snippet></ROW><ROW><id>3183779</id><snippet>request.user
</snippet></ROW><ROW><id>3183821</id><snippet>import Image 
import ImageTk
from Tkinter import Tk

window = Tk()
i = Image.open("image.png") 
photo = ImageTk.PhotoImage(i)
</snippet></ROW><ROW><id>3183835</id><snippet>BlogView.urlpatterns</snippet></ROW><ROW><id>3184024</id><snippet>&gt;&gt;&gt; L = [0, 1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; [L[i:i+n] for i in range(0, len(L), n)]
[[0, 1, 2], [3, 4, 5], [6]]
&gt;&gt;&gt;
</snippet></ROW></DATA>