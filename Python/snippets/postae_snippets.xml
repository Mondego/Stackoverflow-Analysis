<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>1157958</id><snippet>&gt;&gt;&gt; import grp
&gt;&gt;&gt; groupinfo = grp.getgrnam('root')
&gt;&gt;&gt; print groupinfo[2]
0
&gt;&gt;&gt; print groupinfo.gr_gid
0
</snippet></ROW><ROW><id>1157958</id><snippet>&gt;&gt;&gt; import grp
&gt;&gt;&gt; admin = grp.getgrnam('admin')
&gt;&gt;&gt; admin
('admin', '*', 80, ['root', 'admin', 'mj'])
&gt;&gt;&gt; admin.gr_name
'admin'
&gt;&gt;&gt; admin.gr_gid
80
&gt;&gt;&gt; admin.gr_mem
['root', 'admin', 'mj']
</snippet></ROW><ROW><id>1157958</id><snippet>&gt;&gt;&gt; grp.getgrgid(80)
('admin', '*', 80, ['root', 'admin', 'mj'])
&gt;&gt;&gt; len(grp.getgrall())
73
</snippet></ROW><ROW><id>1158116</id><snippet>x.py</snippet></ROW><ROW><id>1158116</id><snippet>y.py</snippet></ROW><ROW><id>1158196</id><snippet>heapq.merge</snippet></ROW><ROW><id>1158196</id><snippet>sorted(itertools.chain(args), cmp)
</snippet></ROW><ROW><id>1159463</id><snippet>class staticmethod:
    def __init__(self, thefunc): self.f = thefunc
    def __call__(self, *a, **k): return self.f(*a, **k)
</snippet></ROW><ROW><id>1159463</id><snippet>class classmethod:
    def __init__(self, thefunc): self.f = thefunc
    def __call__(self, obj, *a, **k): return self.f(obj.__class__, *a, **k)
</snippet></ROW><ROW><id>1159463</id><snippet>@</snippet></ROW><ROW><id>1159463</id><snippet>class sic:
  def f(cls): ...
  f = classmethod(f)
</snippet></ROW><ROW><id>1159463</id><snippet>class classmethod2:
    def __init__(self, thefunc, clsnam):
        self.f = thefunc
        self.clsnam = clsnam
    def __call__(self, *a, **k):
        klass = globals()[self.clsnam]
        return self.f(klass, *a, **k)

class sic2:
  def f(cls): ...
  f = classmethod2(f, 'sic2')
</snippet></ROW><ROW><id>1159463</id><snippet>@classmethod</snippet></ROW><ROW><id>1159463</id><snippet>class</snippet></ROW><ROW><id>1159463</id><snippet>class classmethod3:
    def __init__(self, thefunc, klass):
        self.f = thefunc
        self.klass = klass
    def __call__(self, *a, **k):
        return self.f(self.klass, *a, **k)

def decorate(klass, klassmethodnames):
  for n in klassmethodnames:
    thefunc = klass.__dict__[n]
    setattr(klass, n, classmethod3(thefunc, klass))

class sic2:
  def f(cls): ...
  def g(self): ...
  def h(cls): ...
decorate(sic2, ['f', 'h'])
</snippet></ROW><ROW><id>1160104</id><snippet>math</snippet></ROW><ROW><id>1160104</id><snippet>math</snippet></ROW><ROW><id>1160104</id><snippet>math</snippet></ROW><ROW><id>1160104</id><snippet>math.log(0)</snippet></ROW><ROW><id>1160104</id><snippet>-Inf</snippet></ROW><ROW><id>1160104</id><snippet>ValueError</snippet></ROW><ROW><id>1160104</id><snippet>OverflowError</snippet></ROW><ROW><id>1160104</id><snippet>math.log(0)</snippet></ROW><ROW><id>1160104</id><snippet>OverflowError</snippet></ROW><ROW><id>1160104</id><snippet>math.log(0L)</snippet></ROW><ROW><id>1160104</id><snippet>ValueError</snippet></ROW><ROW><id>1160104</id><snippet>NaN</snippet></ROW><ROW><id>1160104</id><snippet>NaN</snippet></ROW><ROW><id>1160104</id><snippet>ValueError</snippet></ROW><ROW><id>1160104</id><snippet>EDOM</snippet></ROW><ROW><id>1160104</id><snippet>OverflowError</snippet></ROW><ROW><id>1160104</id><snippet>errno ERANGE</snippet></ROW><ROW><id>1160104</id><snippet>NaN</snippet></ROW><ROW><id>1160104</id><snippet>libm</snippet></ROW><ROW><id>1160227</id><snippet>with</snippet></ROW><ROW><id>1160227</id><snippet>import os
def touch(fname, times=None):
    with file(fname, 'a'):
        os.utime(fname, times)
</snippet></ROW><ROW><id>1160227</id><snippet>import os
def touch(fname, times=None):
    fhandle = file(fname, 'a')
    try:
        os.utime(fname, times)
    finally:
        fhandle.close()
</snippet></ROW><ROW><id>1160227</id><snippet>futimes</snippet></ROW><ROW><id>1160227</id><snippet>futimes</snippet></ROW><ROW><id>1160227</id><snippet>ctypes</snippet></ROW><ROW><id>1160227</id><snippet>os.supports_fd</snippet></ROW><ROW><id>1160227</id><snippet>os.utime</snippet></ROW><ROW><id>1160227</id><snippet>futimes</snippet></ROW><ROW><id>1160227</id><snippet>utimes</snippet></ROW><ROW><id>1160227</id><snippet>import os
def touch(fname, times=None, ns=None, dir_fd=None):
    with os.open(fname, os.O_APPEND, dir_fd=dir_fd) as f:
        os.utime(f.fileno() if os.utime in os.supports_fd else fname,
            times=times, ns=ns, dir_fd=dir_fd)
</snippet></ROW><ROW><id>1160424</id><snippet>pydoc MySQLdb
</snippet></ROW><ROW><id>1160445</id><snippet>http://mydomain.com/bla
</snippet></ROW><ROW><id>1160445</id><snippet>&lt;a href="more.html"&gt;Read more...&lt;/a&gt;
</snippet></ROW><ROW><id>1160445</id><snippet>http://mydomain.com/more.html</snippet></ROW><ROW><id>1160445</id><snippet>http://mydomain.com/bla/
</snippet></ROW><ROW><id>1160445</id><snippet>http://mydomain.com/bla/more.html</snippet></ROW><ROW><id>1160607</id><snippet>models.py</snippet></ROW><ROW><id>1160607</id><snippet>model.py</snippet></ROW><ROW><id>1161217</id><snippet>id</snippet></ROW><ROW><id>1161217</id><snippet>comment = Comments( ...)
</snippet></ROW><ROW><id>1161615</id><snippet>import fcntl, os 
fcntl.fcntl(your_process.stdout, fcntl.F_SETFL, os.O_NONBLOCK)
</snippet></ROW><ROW><id>1161691</id><snippet>class Example(object):
    def__init__(self):
        self.my_member_var = "Hello"

    def sample(self):
        print self.my_member_var

e = Example()
e.sample()
print e.my_member_var
</snippet></ROW><ROW><id>1161691</id><snippet>self.foo</snippet></ROW><ROW><id>1161691</id><snippet>myinstance.foo</snippet></ROW><ROW><id>1161821</id><snippet>print</snippet></ROW><ROW><id>1161821</id><snippet>print('Hello World')</snippet></ROW><ROW><id>1161821</id><snippet>print 'Hello World'</snippet></ROW><ROW><id>1162308</id><snippet>dnspython</snippet></ROW><ROW><id>1162636</id><snippet>for (op, code) in zip(s[0::2], s[1::2]):
    print op, code
</snippet></ROW><ROW><id>1162636</id><snippet>from itertools import izip, islice
for (op, code) in izip(islice(s, 0, None, 2), islice(s, 1, None, 2)):
    print op, code
</snippet></ROW><ROW><id>1162901</id><snippet>class Patient(models.Model):
    primary_physician = models.ForeignKey('Physician', related_name='primary_patients')
    attending_physicial = models.ForeignKey('Physician', related_name='attending_patients')
</snippet></ROW><ROW><id>1162901</id><snippet>Physician</snippet></ROW><ROW><id>1162901</id><snippet>primary_patients</snippet></ROW><ROW><id>1162901</id><snippet>attending_patients</snippet></ROW><ROW><id>1163508</id><snippet>read</snippet></ROW><ROW><id>1163508</id><snippet>struct</snippet></ROW><ROW><id>1163508</id><snippet>import struct

print struct.unpack('i', fin.read(4))
</snippet></ROW><ROW><id>1163508</id><snippet>unpack</snippet></ROW><ROW><id>1163508</id><snippet>struct.unpack('i', fin.read(4))[0]</snippet></ROW><ROW><id>1163508</id><snippet>'&lt;i'</snippet></ROW><ROW><id>1163542</id><snippet>stack = [(my_list, -1)]
while stack:
    item, level = stack.pop()

    if isinstance(item, list):
        for i in reversed(item):
            stack.append((i, level+1))
    else:
        print "\t" * level, item
</snippet></ROW><ROW><id>1163586</id><snippet>class Memory(db.Model):
    author = db.UserProperty()
    content = db.StringProperty(multiline=True)
    date = db.DateProperty(auto_now_add=True)
</snippet></ROW><ROW><id>1163586</id><snippet>from otherpyfile import Memory</snippet></ROW><ROW><id>1163586</id><snippet>import datetime</snippet></ROW><ROW><id>1163586</id><snippet>memories = db.GqlQuery("SELECT * from Memory where date = '2007-07-20'")

memories = Memory.all().filter("date=", datetime.datetime.strptime(self.request.get('date'), '%Y-%m-%d').date())

memories = Memory.all().filter("date=", self.request.get('date'))
</snippet></ROW><ROW><id>1163695</id><snippet>import GeoIP
gi = GeoIP.open("GeoLiteCity.dat", GeoIP.GEOIP_INDEX_CACHE | GeoIP.GEOIP_CHECK_CACHE)
print gi.record_by_name("74.125.67.100") # a www.google.com IP
</snippet></ROW><ROW><id>1163695</id><snippet>{'city': 'Mountain View', 'region_name': 'California', 'region': 'CA', 'area_code': 650, 'time_zone': 'America/Los_Angeles', 'longitude': -122.05740356445312, 'country_code3': 'USA', 'latitude': 37.419200897216797, 'postal_code': '94043', 'dma_code': 807, 'country_code': 'US', 'country_name': 'United States'}</snippet></ROW><ROW><id>1163968</id><snippet>asyncore</snippet></ROW><ROW><id>1163968</id><snippet>asynchat</snippet></ROW><ROW><id>1164319</id><snippet>__init__</snippet></ROW><ROW><id>1164319</id><snippet>__self__</snippet></ROW><ROW><id>1164319</id><snippet>__main__</snippet></ROW><ROW><id>1164319</id><snippet>class Car(object):
    def __init__(self,input):
        self.carName = input

    def showName(self):
        print self.carName
def main():
    a = Car("bmw")
    a.showName()
if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1165050</id><snippet>from sqlalchemy import Table
from sqlalchemy.orm import MetaData, mapper

metadata = MetaData()
metadata.bind = engine

person_table = Table(metadata, "tablename", autoload=True)

class Person(object):
    pass

mapper(Person, person_table)
</snippet></ROW><ROW><id>1165050</id><snippet>mapper()</snippet></ROW><ROW><id>1165050</id><snippet>def map_class(class_):
    table = Table(metadata, class_.__name__, autoload=True)
    mapper(class_, table)

map_class(Person)
map_class(Order)
</snippet></ROW><ROW><id>1166200</id><snippet>@with_connection
def spam(connection):
    # Do something
</snippet></ROW><ROW><id>1166200</id><snippet>def spam(connection):
    # Do something

spam = with_connection(spam)
</snippet></ROW><ROW><id>1166200</id><snippet>def with_connection(f):
    def decorated(*args, **kwargs):
        f(get_connection(...), *args, **kwargs)
    decorated._original = f
    return decorated

@with_connection
def spam(connection):
    # Do something

spam._original(testcon) # calls the undecorated function
</snippet></ROW><ROW><id>1166367</id><snippet>w = textwrap.TextWrapper(width=90,break_long_words=False,replace_whitespace=False)
</snippet></ROW><ROW><id>1166607</id><snippet>-c X python foo.py</snippet></ROW><ROW><id>1166607</id><snippet>X</snippet></ROW><ROW><id>1167292</id><snippet>&gt;&gt;&gt; from PyQt4 import QtGui
&gt;&gt;&gt; dir(QtGui.QToolBox) 
['Box', ... contextMenuPolicy', 'count', 'create', 'currentChanged'...]
</snippet></ROW><ROW><id>1167419</id><snippet>x = getattr(self, source)</snippet></ROW><ROW><id>1167419</id><snippet>source</snippet></ROW><ROW><id>1167419</id><snippet>other_data</snippet></ROW><ROW><id>1168065</id><snippet>.py</snippet></ROW><ROW><id>1168065</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>1168065</id><snippet>env</snippet></ROW><ROW><id>1168065</id><snippet>python</snippet></ROW><ROW><id>1168065</id><snippet>chmod a+x htswap
</snippet></ROW><ROW><id>1168065</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>1168065</id><snippet>/usr/bin</snippet></ROW><ROW><id>1168311</id><snippet>(number % 2 != 0)
</snippet></ROW><ROW><id>1168311</id><snippet>bool(number % 2)
</snippet></ROW><ROW><id>1168311</id><snippet>if number % 2:
    print "Odd!"
else:
    print "Even!"
</snippet></ROW><ROW><id>1168865</id><snippet>print &gt;&gt;f</snippet></ROW><ROW><id>1168865</id><snippet>for</snippet></ROW><ROW><id>1168865</id><snippet>title</snippet></ROW><ROW><id>1168865</id><snippet>description</snippet></ROW><ROW><id>1168865</id><snippet>str</snippet></ROW><ROW><id>1168865</id><snippet>for</snippet></ROW><ROW><id>1168865</id><snippet>print &gt;&gt;f</snippet></ROW><ROW><id>1168865</id><snippet>import urllib
import sys
import xml.dom.minidom

#The url of the feed
address = 'http://www.vg.no/export/Alle/rdf.hbs?kat=nyheter'

f = open('lawl.txt','w')

#Our actual xml document
document = xml.dom.minidom.parse(urllib.urlopen(address))
for item in document.getElementsByTagName('item'):
    title = item.getElementsByTagName('title')[0].firstChild.data
    link = item.getElementsByTagName('link')[0].firstChild.data
    description = item.getElementsByTagName('description')[0].firstChild.data

    str = link.strip("http://go.vg.no/cgi-bin/go.cgi/rssart/")
    print "\n"
    print "------------------------------------------------------------------"
    print '''"%s"\n\n%s\n\n(%s)''' % (title.encode('UTF8', 'replace'),
                                            description.encode('UTF8','replace'),
                                            str.encode('UTF8','replace'))
    print "------------------------------------------------------------------"
    print "\n"

    print &gt;&gt;f, "----------------------Nyeste paa VG-------------------------------"
    print &gt;&gt;f, title.encode('UTF8','replace')
    print &gt;&gt;f, description.encode('UTF8','replace')
    print &gt;&gt;f, str.encode('UTF8','replace')
    print &gt;&gt;f, "------------------------------------------------------------------"
    print &gt;&gt;f, "\n"
</snippet></ROW><ROW><id>1168943</id><snippet>search</snippet></ROW><ROW><id>1168943</id><snippet>match</snippet></ROW><ROW><id>1168943</id><snippet># DOTALL makes . match newlines 
re_UNSUB_amsterdam = re.compile(".*UNSUBSCRIBE.*", re.UNICODE | re.DOTALL)
</snippet></ROW><ROW><id>1168943</id><snippet># search will find matches even if they aren't at the start of the string
... re_UNSUB_amsterdam.search(foo) ...
</snippet></ROW><ROW><id>1168943</id><snippet>ISO_8859_2_encoded = rawdata.decode('ISO-8859-2')
</snippet></ROW><ROW><id>1169205</id><snippet> while True:
    os.system(kjor)
    time.sleep(seconds)
</snippet></ROW><ROW><id>1169205</id><snippet>for loop in xrange(240):
    os.system(kjor)
    time.sleep(seconds)
</snippet></ROW><ROW><id>1169734</id><snippet>pair[1]</snippet></ROW><ROW><id>1169734</id><snippet>for line in f:
    line = line.rstrip()
    pair = line.split(":")
    # ...etc
</snippet></ROW><ROW><id>1169769</id><snippet>coord = tuple(sum(x) for x in zip(coord, change))
</snippet></ROW><ROW><id>1169864</id><snippet>import urllib
import BeautifulSoup
page = urllib.urlopen('http://stackoverflow.com/users/95810')
soup = BeautifulSoup.BeautifulSoup(page)
therep = str(soup.find(text='Reputation').parent.previous.previous).strip()
print int(therep.replace(',',''))
</snippet></ROW><ROW><id>1169864</id><snippet>defaultdict</snippet></ROW><ROW><id>1170288</id><snippet>UPDATE app_model SET state = 'F' WHERE state &lt;&gt; 'F';
</snippet></ROW><ROW><id>1170288</id><snippet>UPDATE app_model SET state = 'F' WHERE id IN (
    SELECT id FROM app_model WHERE state &lt;&gt; 'F' ORDER BY order LIMIT 3
) AS sub;
</snippet></ROW><ROW><id>1170297</id><snippet>http://docs.python.org/library/csv.html#csv.writer</snippet></ROW><ROW><id>1170396</id><snippet>import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), "lib/mylibrary"))
</snippet></ROW><ROW><id>1170469</id><snippet>import sys
import codecs

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

class CRLFWrapper(object):
    def __init__(self, output):
        self.output = output

    def write(self, s):
        self.output.write(s.replace("\n", "\r\n"))

    def __getattr__(self, key):
        return getattr(self.output, key)

sys.stdout = CRLFWrapper(codecs.getwriter('utf-16')(sys.stdout))
print "test1"
print "test2"
</snippet></ROW><ROW><id>1170930</id><snippet>import Image
im = Image.open('filename.png')
im.show()
</snippet></ROW><ROW><id>1171730</id><snippet>from django.utils import simplejson as json

# load the object from a string
obj = json.loads( string )
</snippet></ROW><ROW><id>1171730</id><snippet>from google.appengine.dist import use_library
use_library('django', '1.0')
</snippet></ROW><ROW><id>1171730</id><snippet>runtime: python27</snippet></ROW><ROW><id>1171730</id><snippet>app.yaml</snippet></ROW><ROW><id>1171730</id><snippet>import json</snippet></ROW><ROW><id>1171993</id><snippet>profile</snippet></ROW><ROW><id>1171993</id><snippet>parent</snippet></ROW><ROW><id>1171993</id><snippet>parent = profile.parent</snippet></ROW><ROW><id>1171993</id><snippet>parent = profile.parent.get_profile()</snippet></ROW><ROW><id>1171993</id><snippet>user</snippet></ROW><ROW><id>1171993</id><snippet>profile</snippet></ROW><ROW><id>1171993</id><snippet>parent = user.parent
user.parent = parent.parent
parent.parent = user

children = user.children

for child in children:
    child.parent = parent

user.children = parent.children

for child in user.children:
    if child is user:
        child = parent

    child.parent = user

parent.children = children

for child in user.parent.children:
    if child is parent:
        child = user
</snippet></ROW><ROW><id>1172898</id><snippet>a</snippet></ROW><ROW><id>1172898</id><snippet>d</snippet></ROW><ROW><id>1172898</id><snippet>parse_str = '[a [a b] [c e f] d]'
lst = [s.strip() for s in re.split('[\[\]]', parse_str) if s.strip()]

&gt;&gt;&gt;lst
['a', 'a b', 'c e f', 'd']
</snippet></ROW><ROW><id>1173613</id><snippet>jython -m timeit -s "import random" "random.random()"
</snippet></ROW><ROW><id>1173613</id><snippet> jython -m timeit -s "import java.util.Random; random=java.util.Random()" "random.nextDouble()"
</snippet></ROW><ROW><id>1174124</id><snippet>class Foo():
    def __init__(self, frob, frotz)
        self.frobnicate = frob
        self.frotz = frotz

class Bar(Foo):
    def __init__(self, frob, frizzle)
        super().__init__(frob, 34)
        self.frazzle = frizzle
</snippet></ROW><ROW><id>1174124</id><snippet>Foo.__init__(self, frob, 34)</snippet></ROW><ROW><id>1174483</id><snippet>sum(float(i) for i in open('/tmp/1.0'))
</snippet></ROW><ROW><id>1174595</id><snippet>import waveapi.events
import waveapi.robot

def OnBlipSubmitted(properties, context):
    # Get the blip that was just submitted.
    blip = context.GetBlipById(properties['blipId'])
    # Respond to the blip (i.e. create a child blip)
    blip.CreateChild().GetDocument().SetText('That\'s so funny!')

def OnRobotAdded(properties, context):
    # Add a message to the end of the wavelet.
    wavelet = context.GetRootWavelet()
    wavelet.CreateBlip().GetDocument().SetText('Heeeeey everybody!')

if __name__ == '__main__':
    # Register the robot.
    bot = waveapi.robot.Robot(
        'The Annoying Bot',
        image_url='http://example.com/annoying-image.gif',
        version='1.0',
        profile_url='http://example.com/')
    bot.RegisterHandler(waveapi.events.BLIP_SUBMITTED, OnBlipSubmitted)
    bot.RegisterHandler(waveapi.events.WAVELET_SELF_ADDED, OnRobotAdded)
    bot.Run()
</snippet></ROW><ROW><id>1174737</id><snippet>keys = [MyModel.ref.get_value_for_datastore(x) for x in referers]
referees = db.get(keys)
</snippet></ROW><ROW><id>1175154</id><snippet>class Project:
    def __init__(self, name, actions=[], subprojects=[]):
        self.name = name
        self.actions = actions
        self.subprojects = subprojects

    def add(self, action):
        self.actions.append(action)

    def add_project(self, project)
        self.subprojects.append(project)
</snippet></ROW><ROW><id>1175154</id><snippet>class Project:
    def __init__(self, name, children=[]):
        self.name = name
        self.children = children

    def add(self, object):
        self.children.append(object)

    def mark_done(self):
        for c in self.children:
            c.mark_done()

class Action:
    def __init__(self, do):
        self.do = do
        self.done = False

    def mark_done(self):
        self.done = True
</snippet></ROW><ROW><id>1175154</id><snippet>def get_action_list(self):
    actions = []
    for c in self.children:
        if c.__class__ == self.__class__:
            actions += c.get_action_list()
        else:
            actions.append(c)
    return actions
</snippet></ROW><ROW><id>1175271</id><snippet>import wx

class ViewApp(wx.App):
    def OnInit(self):
        self.frame = ToolFrame(None, -1, "Test App")    
        self.frame.Show(True)
        return True        

class MyPopupMenu(wx.Menu):
    def __init__(self, parent):
        wx.Menu.__init__(self)

        self.parent = parent

        minimize = wx.MenuItem(self, wx.NewId(), 'Minimize')
        self.AppendItem(minimize)
        self.Bind(wx.EVT_MENU, self.OnMinimize, id=minimize.GetId())

    def OnMinimize(self, event):
        self.parent.Iconize()

class ToolFrame(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(350, 250))

        self.toolbar = self.CreateToolBar()
        self.tool_id = wx.NewId()
        for i in range(3):
            tool_id = wx.NewId()
            self.toolbar.AddCheckLabelTool(tool_id, 'Tool', wx.EmptyBitmap(10,10))
            self.toolbar.Bind(wx.EVT_MENU, self.OnTool, id=tool_id)
        self.toolbar.Realize()
        self.Centre()
        self.Show()

    def OnTool(self, event):
        if event.IsChecked():
            # Get the position of the toolbar relative to
            # the frame. This will be the upper left corner of the first tool
            bar_pos = self.toolbar.GetScreenPosition()-self.GetScreenPosition()

            # This is the position of the tool along the tool bar (1st, 2nd, 3rd, etc...)
            tool_index = self.toolbar.GetToolPos(event.GetId())

            # Get the size of the tool
            tool_size = self.toolbar.GetToolSize()

            # This is the upper left corner of the clicked tool
            upper_left_pos = (bar_pos[0]+tool_size[0]*tool_index, bar_pos[1])

            # Menu position will be in the lower right corner
            lower_right_pos = (bar_pos[0]+tool_size[0]*(tool_index+1), bar_pos[1]+tool_size[1])

            # Show upper left corner of first tool in black
            dc = wx.WindowDC(self)
            dc.SetPen(wx.Pen("BLACK", 4))
            dc.DrawCircle(bar_pos[0], bar_pos[1], 4)        

            # Show upper left corner of this tool in blue
            dc.SetPen(wx.Pen("BLUE", 4))
            dc.DrawCircle(upper_left_pos[0], upper_left_pos[1], 4)        

            # Show lower right corner of this tool in green
            dc.SetPen(wx.Pen("GREEN", 4))
            dc.DrawCircle(lower_right_pos[0], lower_right_pos[1], 4)        

            # Correct for the position of the tool bar
            menu_pos = (lower_right_pos[0]-bar_pos[0],lower_right_pos[1]-bar_pos[1])

            # Pop up the menu
            self.PopupMenu(MyPopupMenu(self), menu_pos)

if __name__ == "__main__": 
    app = ViewApp(0)
    app.MainLoop()
</snippet></ROW><ROW><id>1175410</id><snippet>class TaskListPage(webapp.RequestHandler):
    def get(self):
        user = users.get_current_user()
        tasks_query = Task.all()
        tasks = tasks_query.fetch(1000)
        if user:
          url = users.create_logout_url(self.request.uri)
        else:
          url = users.create_login_url(self.request.uri)
        template_values = {
          'tasks': tasks,
          'url': url
          }
        path = os.path.join(os.path.dirname(__file__), self.template_name())
        self.response.out.write(template.render(path, template_values))

class MainPage(TaskListPage):
    def template_name(self):
        return 'index.html'

class Gadget(TaskListPage):
    def template_name(self):
        return 'gadget.xml'
</snippet></ROW><ROW><id>1175491</id><snippet>from numpy import array

nums = array(((0.01, 0.01, 0.02, 0.04, 0.03),
              (0.00, 0.02, 0.02, 0.03, 0.02),
              (0.01, 0.02, 0.02, 0.03, 0.02),
              (0.01, 0.00, 0.01, 0.05, 0.03)))

print nums.std(axis=1)
# [ 0.0116619   0.00979796  0.00632456  0.01788854]

print nums.mean(axis=1)
# [ 0.022  0.018  0.02   0.02 ]
</snippet></ROW><ROW><id>1175554</id><snippet>re.sub</snippet></ROW><ROW><id>1175554</id><snippet>import re
REPLACEMENTS = dict([('find1', 'replace1'),
                     ('find2', 'replace2'),
                     ('find3', 'replace3')])

def replacer(m):
    return REPLACEMENTS[m.group(0)]

x = 'find1, find2, find3'
r = re.compile('|'.join(REPLACEMENTS.keys()))
print r.sub(replacer, x)
</snippet></ROW><ROW><id>1175599</id><snippet>def counts_all(targets, paragraph, word_regex=r"\w+"):
    tally = dict((target, 0) for target in targets)
    for word in re.findall(word_regex, paragraph):
        if word in tally:
            tally[word] += 1
    return [tally[target] for target in targets]

def counts_iter(targets, paragraph, word_regex=r"\w+"):
    tally = dict((target, 0) for target in targets)
    for matchobj in re.finditer(word_regex, paragraph):
        word = matchobj.group()
        if word in tally:
            tally[word] += 1
    return [tally[target] for target in targets]
</snippet></ROW><ROW><id>1175599</id><snippet>def currently_accepted_solution_augmented(targets, paragraph):
    def tester(s): 
        def f(x):
            return len(re.findall(r"\b" + x + r"\b", s))
        return f
    return map(tester(paragraph), targets)
</snippet></ROW><ROW><id>1175599</id><snippet># acknowledgement:
# this is structurally the same as one of hughdbrown's benchmark functions
def currently_accepted_solution_augmented_without_extra_closure(targets, paragraph):
    def tester(x):
        return len(re.findall(r"\b" + x + r"\b", paragraph))
    return map(tester, targets)
</snippet></ROW><ROW><id>1175599</id><snippet>paragraph.find(target)</snippet></ROW><ROW><id>1175677</id><snippet>echo=True</snippet></ROW><ROW><id>1175677</id><snippet>create_engine()</snippet></ROW><ROW><id>1175677</id><snippet>17:37:48,325 INFO  [sqlalchemy.engine.base.Engine.0x...048c] SELECT ...
17:37:48,326 INFO  [sqlalchemy.engine.base.Engine.0x...048c] {&lt;params&gt;}
17:37:48,660 DEBUG [myapp.somemessage]
</snippet></ROW><ROW><id>1175677</id><snippet>myapp.somemessage</snippet></ROW><ROW><id>1175677</id><snippet>contains_eager()</snippet></ROW><ROW><id>1175677</id><snippet>eagerload()</snippet></ROW><ROW><id>1175677</id><snippet>eagerload_all()</snippet></ROW><ROW><id>1175677</id><snippet>r + r*r2 + r*r2*r3</snippet></ROW><ROW><id>1175677</id><snippet>import cProfile as profiler
import gc, pstats, time

def profile(fn):
    def wrapper(*args, **kw):
        elapsed, stat_loader, result = _profile("foo.txt", fn, *args, **kw)
        stats = stat_loader()
        stats.sort_stats('cumulative')
        stats.print_stats()
        # uncomment this to see who's calling what
        # stats.print_callers()
        return result
    return wrapper

def _profile(filename, fn, *args, **kw):
    load_stats = lambda: pstats.Stats(filename)
    gc.collect()

    began = time.time()
    profiler.runctx('result = fn(*args, **kw)', globals(), locals(),
                    filename=filename)
    ended = time.time()

    return ended - began, load_stats, locals()['result']
</snippet></ROW><ROW><id>1175677</id><snippet>@profile
def go():
    return Session.query(FooClass).filter(FooClass.somevalue==8).all()
myfoos = go()
</snippet></ROW><ROW><id>1175677</id><snippet>cursor.execute()</snippet></ROW><ROW><id>1175677</id><snippet>Unicode</snippet></ROW><ROW><id>1175909</id><snippet>pexpect</snippet></ROW><ROW><id>1176023</id><snippet>def convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
</snippet></ROW><ROW><id>1176023</id><snippet>&gt;&gt;&gt; convert('CamelCase')
'camel_case'
&gt;&gt;&gt; convert('CamelCamelCase')
'camel_camel_case'
&gt;&gt;&gt; convert('Camel2Camel2Case')
'camel2_camel2_case'
&gt;&gt;&gt; convert('getHTTPResponseCode')
'get_http_response_code'
&gt;&gt;&gt; convert('get2HTTPResponseCode')
'get2_http_response_code'
&gt;&gt;&gt; convert('HTTPResponseCode')
'http_response_code'
&gt;&gt;&gt; convert('HTTPResponseCodeXYZ')
'http_response_code_xyz'
</snippet></ROW><ROW><id>1176023</id><snippet>first_cap_re = re.compile('(.)([A-Z][a-z]+)')
all_cap_re = re.compile('([a-z0-9])([A-Z])')
def convert(name):
    s1 = first_cap_re.sub(r'\1_\2', name)
    return all_cap_re.sub(r'\1_\2', s1).lower()
</snippet></ROW><ROW><id>1177233</id><snippet>gtk.combo_box_new_text()</snippet></ROW><ROW><id>1177233</id><snippet>combo = gtk.combo_box_new_text()
combo.append_text('hello')
combo.append_text('world')
combo.set_active(0)

box = builder.get_object('some-box')
box.pack_start(combo, False, False)
</snippet></ROW><ROW><id>1177526</id><snippet>import C:\Python\lib\module\</snippet></ROW><ROW><id>1177526</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1177837</id><snippet>         for message in prioritize():
            if DontSendEntry.objects.has_address(message.to_address):
                logging.info("skipping email to %s as on don't send list " % message.to_address)
                MessageLog.objects.log(message, 2) # @@@ avoid using literal result code
                message.delete()
                dont_send += 1
            elif message.when_to_send &gt; datetime.datetime.now():
                continue
            else:
                try:
                  ... the rest of your code ...
</snippet></ROW><ROW><id>1178089</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
... 
&gt;&gt;&gt; eval("Foo")
&lt;class '__main__.Foo'&gt;
</snippet></ROW><ROW><id>1178360</id><snippet>line.split(";")[0]
</snippet></ROW><ROW><id>1178371</id><snippet>Spam = type("Spam", (Foo, ), {"echo":echo})
spam = Spam()
spam.echo()
</snippet></ROW><ROW><id>1178780</id><snippet>base.html</snippet></ROW><ROW><id>1178780</id><snippet>base_object.html</snippet></ROW><ROW><id>1178780</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;{% block title %}Default Title{% endblock %}&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;h1&gt;{% block h1 %}{% endblock %}&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1178780</id><snippet>{% block %}</snippet></ROW><ROW><id>1178780</id><snippet>{% block %}</snippet></ROW><ROW><id>1178780</id><snippet>{% extends "base.html" %}
{% block title %}Title{% endblock %}
{% block h1 %}Title{% endblock %}
</snippet></ROW><ROW><id>1178780</id><snippet>{% block title %}{{ title }}{% endblock %}
{% block h1 %}{{ title }}{% endblock %}
</snippet></ROW><ROW><id>1178780</id><snippet>base.html</snippet></ROW><ROW><id>1178780</id><snippet>django.contrib.sites</snippet></ROW><ROW><id>1178780</id><snippet>{{ block.super }}</snippet></ROW><ROW><id>1178780</id><snippet>{% block title %}{{ block.super }} - Ask a Question{% endblock %}
</snippet></ROW><ROW><id>1179367</id><snippet>ALTER TABLE PopByCountry DROP CONSTRAINT Country_Key
</snippet></ROW><ROW><id>1179454</id><snippet>parser.ParseFile(open('sample.xml', 'rb'))
</snippet></ROW><ROW><id>1180643</id><snippet>sleep</snippet></ROW><ROW><id>1180665</id><snippet>def task():
    workon = 'workon myvenv &amp;&amp; '
    run(workon + 'git pull')
    run(workon + 'do other stuff, etc')
</snippet></ROW><ROW><id>1180665</id><snippet>prefix</snippet></ROW><ROW><id>1180665</id><snippet>def task():
    with prefix('workon myvenv'):
        run('git pull')
        run('do other stuff, etc')
</snippet></ROW><ROW><id>1180665</id><snippet>command1 &amp;&amp; command2</snippet></ROW><ROW><id>1180665</id><snippet>command1</snippet></ROW><ROW><id>1180665</id><snippet>command2</snippet></ROW><ROW><id>1180665</id><snippet>command1</snippet></ROW><ROW><id>1180671</id><snippet>pstat: profile.out</snippet></ROW><ROW><id>1180671</id><snippet>profile.out</snippet></ROW><ROW><id>1180671</id><snippet># The name of one or more pstat files (generated by the profile
# or hotshot module).  These are used to generate call graphs.
pstat: profile.out
</snippet></ROW><ROW><id>1180671</id><snippet>profile</snippet></ROW><ROW><id>1180671</id><snippet>hotspot</snippet></ROW><ROW><id>1180671</id><snippet>python -m "profile" -o profile.out mymodule.py
</snippet></ROW><ROW><id>1180671</id><snippet>hotspot</snippet></ROW><ROW><id>1180671</id><snippet>cProfile</snippet></ROW><ROW><id>1180671</id><snippet>profile</snippet></ROW><ROW><id>1180681</id><snippet>%s</snippet></ROW><ROW><id>1180681</id><snippet>%i</snippet></ROW><ROW><id>1180681</id><snippet>(i,)</snippet></ROW><ROW><id>1180681</id><snippet>i</snippet></ROW><ROW><id>1180681</id><snippet>ORDER</snippet></ROW><ROW><id>1180886</id><snippet>update</snippet></ROW><ROW><id>1180886</id><snippet>original.update(col[user])
</snippet></ROW><ROW><id>1180886</id><snippet>user = "user"

matrix = {
    "user" : {
        "a" : "b",
        "c" : "d",
        "e" : "f",
    },
}

col = {
    "user" : {
        "a" : "b_2",
        "c" : "d_2",
    },
}

original.update(col[user])

print(original)
</snippet></ROW><ROW><id>1180886</id><snippet>{'a': 'b_2', 'c': 'd_2', 'e': 'f'}
</snippet></ROW><ROW><id>1180901</id><snippet> __init__(self, name, children=[]):
</snippet></ROW><ROW><id>1180901</id><snippet> __init__(self, name, children=None):
    if children is None:
       children = []
</snippet></ROW><ROW><id>1181026</id><snippet>sa_proc = Popen('C:\\sa\\sa.exe --?')
</snippet></ROW><ROW><id>1181026</id><snippet>os.environ['COMSPEC']</snippet></ROW><ROW><id>1181026</id><snippet>, shell=True</snippet></ROW><ROW><id>1181026</id><snippet>Popen</snippet></ROW><ROW><id>1181538</id><snippet>import win32api, win32con
def click(x,y):
    win32api.SetCursorPos((x,y))
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,0,0)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,0,0)
click(10,10)
</snippet></ROW><ROW><id>1181585</id><snippet>import logging, urllib2, sys

hh = urllib2.HTTPHandler()
hsh = urllib2.HTTPSHandler()
hh.set_http_debuglevel(1)
hsh.set_http_debuglevel(1)
opener = urllib2.build_opener(hh, hsh)
logger = logging.getLogger()
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.NOTSET)
</snippet></ROW><ROW><id>1181922</id><snippet>def base36encode(number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    """Converts an integer to a base36 string."""
    if not isinstance(number, (int, long)):
        raise TypeError('number must be an integer')

    base36 = ''
    sign = ''

    if number &lt; 0:
        sign = '-'
        number = -number

    if 0 &lt;= number &lt; len(alphabet):
        return sign + alphabet[number]

    while number != 0:
        number, i = divmod(number, len(alphabet))
        base36 = alphabet[i] + base36

    return sign + base36

def base36decode(number):
    return int(number, 36)

print base36encode(1412823931503067241)
print base36decode('AQF8AA0006EH')
</snippet></ROW><ROW><id>1182350</id><snippet>from multiprocessing import Process, Queue

def do_sum(q,l):
    q.put(sum(l))

def main():
    my_list = range(1000000)

    q = Queue()

    p1 = Process(target=do_sum, args=(q,my_list[:500000]))
    p2 = Process(target=do_sum, args=(q,my_list[500000:]))
    p1.start()
    p2.start()
    r1 = q.get()
    r2 = q.get()
    print r1+r2

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>1183213</id><snippet>hexhash = hashlib.sha512("some text").hexdigest()
</snippet></ROW><ROW><id>1183228</id><snippet>$ for filename in $(seq 20020101 20090726); do wget http://www.ctrlaltdel-online.com/comics/"$filename".jpg; done
</snippet></ROW><ROW><id>1183587</id><snippet>import gc
import operator
import random
import time


nk = 1000

def popcon(d):
  for x in xrange(nk*1000):
    d['id%s' % x] = random.randrange(100*1000)

def sorted_container():
  ctr = dict()
  popcon(ctr)
  start = time.time()
  ctr_sorted = ctr.items()
  ctr_sorted.sort(key=operator.itemgetter(1))
  stend = time.time()
  return stend-start, ctr_sorted

def do_update(ctr, newones):
  start = time.time()
  dicol = dict(ctr)
  ctr.extend((k,v) for (k,v) in newones if v!=dicol.get(k,None))
  dicnu = dict(newones)
  ctr.sort(key=operator.itemgetter(1))
  newctr = [(k,v) for (k,v) in ctr if v==dicnu.get(k,v)]
  stend = time.time()
  return stend-start, newctr

def main():
  random.seed(12345)
  for x in range(3):
    duration, ctr = sorted_container()
    print 'dict-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))
    newones = [('id%s' % y, random.randrange(nk*100))
                for y in xrange(nk*990,nk*1010)]
    duration, ctr = do_update(ctr, newones)
    print 'updt-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))
    del ctr
    gc.collect()

main()
</snippet></ROW><ROW><id>1183587</id><snippet>$ time python som.py
dict-to-sorted, 0: 5.01 sec, len=1000000
updt-to-sorted, 0: 9.78 sec, len=1010000
dict-to-sorted, 1: 5.02 sec, len=1000000
updt-to-sorted, 1: 9.12 sec, len=1010000
dict-to-sorted, 2: 5.03 sec, len=1000000
updt-to-sorted, 2: 9.12 sec, len=1010000

real    0m54.073s
user    0m52.464s
sys 0m1.258s
</snippet></ROW><ROW><id>1183654</id><snippet>line = p.stdout.readline()
while line:
    print line
    line = p.stdout.readline()
</snippet></ROW><ROW><id>1183965</id><snippet>py&gt; urllib.quote(u"articles/2009/Заглавная_страница".encode("utf-8"))
'articles/2009/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0'
</snippet></ROW><ROW><id>1184036</id><snippet>__builtin__</snippet></ROW><ROW><id>1184036</id><snippet>__builtin__</snippet></ROW><ROW><id>1184036</id><snippet>__builtins__</snippet></ROW><ROW><id>1184036</id><snippet>'s'</snippet></ROW><ROW><id>1184036</id><snippet>__builtins__</snippet></ROW><ROW><id>1184036</id><snippet>__dict__</snippet></ROW><ROW><id>1184127</id><snippet> self.request.params[&lt;form element name with file&gt;].filename
</snippet></ROW><ROW><id>1184377</id><snippet>__new__</snippet></ROW><ROW><id>1184377</id><snippet>class C(int):

    def __new__(cls, val, **kwargs):
        inst = super(C, cls).__new__(cls, val)
        inst.a = kwargs.get('a', 0)
        return inst
</snippet></ROW><ROW><id>1185226</id><snippet>class AboutFrame(wx.Frame):

    title = "About this program"

    def __init__(self):
        wx.Frame.__init__(self, wx.GetApp().TopWindow, title=self.title)
</snippet></ROW><ROW><id>1185286</id><snippet>extra()</snippet></ROW><ROW><id>1185286</id><snippet>extra()</snippet></ROW><ROW><id>1185286</id><snippet>django.db</snippet></ROW><ROW><id>1185421</id><snippet>def mergesort(list):
    if len(list) &lt; 2:
        return list
    middle = len(list) / 2
    left = mergesort(list[:middle])
    right = mergesort(list[middle:])
    return merge(left, right)
</snippet></ROW><ROW><id>1185421</id><snippet>a = ["abc", "de", "f", "ghijkl"]
print sorted(a, lambda a,b: cmp(len(a), len(b)))
</snippet></ROW><ROW><id>1185529</id><snippet>s = "  \t a string example\t  "
s = s.strip()
</snippet></ROW><ROW><id>1185529</id><snippet>s = s.rstrip()
</snippet></ROW><ROW><id>1185529</id><snippet>s = s.lstrip()
</snippet></ROW><ROW><id>1185529</id><snippet>s = s.strip(' \t\n\r')
</snippet></ROW><ROW><id>1185557</id><snippet>enumerate()</snippet></ROW><ROW><id>1185557</id><snippet>def draw_menu(options, selected_index):
    for (counter, option) in enumerate(options):
        if counter == selected_index:
            print " [*] %s" % option
        else:
            print " [ ] %s" % option    

options = ['Option 0', 'Option 1', 'Option 2', 'Option 3']
draw_menu(options, 2)
</snippet></ROW><ROW><id>1185638</id><snippet>from __future__ import division # No need to cast to float when dividing
import collections, itertools, math
</snippet></ROW><ROW><id>1185638</id><snippet>Pegs = collections.namedtuple('Pegs', 'black white')
def mastermindScore(g1,g2):
  matching = len(set(g1) &amp; set(g2))
  blacks = sum(1 for v1, v2 in itertools.izip(g1,g2) if v1 == v2)
  return Pegs(blacks, matching-blacks)
</snippet></ROW><ROW><id>1185638</id><snippet>def mastermind(colours, holes):
  return dict(
    G           = set(itertools.product(colours,repeat=holes)),
    V           = set(itertools.permutations(colours, holes)),
    score       = mastermindScore,
    endstates   = (Pegs(holes, 0),))

def mediumGame():
    return mastermind(("Yellow", "Blue", "Green", "Red", "Orange", "Purple"), 4)
</snippet></ROW><ROW><id>1185638</id><snippet>def multiset(vals):
  multiset = collections.defaultdict(int)
  for val in vals: multiset[val] += 1
  return multiset
</snippet></ROW><ROW><id>1185638</id><snippet>def partition(S, func, *args, **kwargs):
  partition = collections.defaultdict(set)
  for v in S: partition[func(v, *args, **kwargs)].add(v)
  return partition
</snippet></ROW><ROW><id>1185638</id><snippet>def entropy(P):
  total = sum(P)
  return -sum(p*math.log(p, 2) for p in (v/total for v in P if v))
</snippet></ROW><ROW><id>1185638</id><snippet>def decisionEntropy(V, g, score):
  return entropy(multiset(score(gi, g) for gi in V).values())
</snippet></ROW><ROW><id>1185638</id><snippet>def bestDecision(V, G, score):
  return max((decisionEntropy(V, g, score), g in V, g) for g in G)[2]
</snippet></ROW><ROW><id>1185638</id><snippet>Node = collections.namedtuple('Node', 'decision branches')
Branch = collections.namedtuple('Branch', 'result subtree')
def lazySolutionTree(G, V, score, endstates, **kwargs):
  decision = bestDecision(V, G, score)
  branches = (Branch(result, None if result in endstates else
                   lazySolutionTree(G, pV, score=score, endstates=endstates))
              for (result, pV) in partition(V, score, decision).iteritems())
  yield Node(decision, branches) # Lazy evaluation
</snippet></ROW><ROW><id>1185638</id><snippet>def solver(scorer, **kwargs):
  lazyTree = lazySolutionTree(**kwargs)
  steps = []
  while lazyTree is not None:
    t = lazyTree.next() # Evaluate node
    result = scorer(t.decision)
    steps.append((t.decision, result))
    subtrees = [b.subtree for b in t.branches if b.result == result]
    if len(subtrees) == 0:
      raise Exception("No solution possible for given scores")
    lazyTree = subtrees[0]
  assert(result in endstates)
  return steps
</snippet></ROW><ROW><id>1185638</id><snippet>def allSolutions(**kwargs):
  def solutions(lazyTree):
    return ((((t.decision, b.result),) + solution
             for t in lazyTree for b in t.branches
             for solution in solutions(b.subtree))
            if lazyTree else ((),))
  return solutions(lazySolutionTree(**kwargs))
</snippet></ROW><ROW><id>1185638</id><snippet>def worstCaseSolution(**kwargs):
  return max((len(s), s) for s in allSolutions(**kwargs)) [1]
</snippet></ROW><ROW><id>1185638</id><snippet>def solutionLengthDistribution(**kwargs):
  return multiset(len(s) for s in allSolutions(**kwargs))
</snippet></ROW><ROW><id>1185638</id><snippet>def solutionExists(maxsteps, G, V, score, **kwargs):
  if len(V) == 1: return True
  partitions = [partition(V, score, g).values() for g in G]
  maxSize = max(len(P) for P in partitions) ** (maxsteps - 2)
  partitions = (P for P in partitions if max(len(s) for s in P) &lt;= maxSize)
  return any(all(solutionExists(maxsteps-1,G,s,score) for l,s in
                 sorted((-len(s), s) for s in P)) for i,P in
             sorted((-entropy(len(s) for s in P), P) for P in partitions))
</snippet></ROW><ROW><id>1185638</id><snippet>def lowerBoundOnWorstCaseSolution(**kwargs):
  for steps in itertools.count(1):
    if solutionExists(maxsteps=steps, **kwargs):
      return steps
</snippet></ROW><ROW><id>1185638</id><snippet>Comparison = collections.namedtuple('Comparison', 'less greater equal')
def twoDScorer(x, y):
  return Comparison(all(r[0] &lt;= r[1] for r in zip(x, y)),
                    all(r[0] &gt;= r[1] for r in zip(x, y)),
                    x == y)
def twoD():
  G = set(itertools.product(xrange(5), repeat=2))
  return dict(G = G, V = G, score = twoDScorer,
              endstates = set(Comparison(True, True, True)))
</snippet></ROW><ROW><id>1185703</id><snippet>query = MyModel.all(keys_only=True).filter('unique_property', value_to_be_used)
entity = query.get()
if entity:
    raise Exception('unique_property must have a unique value!')
</snippet></ROW><ROW><id>1185703</id><snippet>keys_only=True</snippet></ROW><ROW><id>1185703</id><snippet>get_by_key_name</snippet></ROW><ROW><id>1185703</id><snippet>None</snippet></ROW><ROW><id>1185703</id><snippet>None</snippet></ROW><ROW><id>1185703</id><snippet>class UniqueConstraint(db.Model):
    @classmethod
    def check(cls, model, **values):
        # Create a pseudo-key for use as an entity group.
        parent = db.Key.from_path(model.kind(), 'unique-values')

        # Build a list of key names to test.
        key_names = []
        for key in values:
            key_names.append('%s:%s' % (key, values[key]))

        def txn():
            result = cls.get_by_key_name(key_names, parent)
            for test in result:
                if test: return False
            for key_name in key_names:
                uc = cls(key_name=key_name, parent=parent)
                uc.put()
            return True

        return db.run_in_transaction(txn)
</snippet></ROW><ROW><id>1185703</id><snippet>UniqueConstraint.check(...)</snippet></ROW><ROW><id>1185703</id><snippet>UniqueConstraint</snippet></ROW><ROW><id>1185703</id><snippet>MyModel</snippet></ROW><ROW><id>1185816</id><snippet>def encode(s):
    l = [ord(i) for i in s]
    return ''.join([chr(i + 2) for i in l])
</snippet></ROW><ROW><id>1185918</id><snippet>//do stuff to get location of repository from MySQL into variable $x
//run shell script
$res = `python hgweb.py $x`;
</snippet></ROW><ROW><id>1186161</id><snippet>os.read</snippet></ROW><ROW><id>1186161</id><snippet>os.write</snippet></ROW><ROW><id>1186161</id><snippet>os.pipe</snippet></ROW><ROW><id>1186161</id><snippet>(1)</snippet></ROW><ROW><id>1186161</id><snippet>(2)</snippet></ROW><ROW><id>1186194</id><snippet>os.environ["LD_LIBRARY_PATH"] = ...
</snippet></ROW><ROW><id>1186194</id><snippet>ld-linux.so.2</snippet></ROW><ROW><id>1186194</id><snippet>ld.so.1</snippet></ROW><ROW><id>1186194</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>1186194</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>1186194</id><snippet>xyz.so</snippet></ROW><ROW><id>1186194</id><snippet>/some/path</snippet></ROW><ROW><id>1186194</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>1186194</id><snippet>Java</snippet></ROW><ROW><id>1186194</id><snippet>/some/path/xyz.so</snippet></ROW><ROW><id>1186194</id><snippet>x.so</snippet></ROW><ROW><id>1186194</id><snippet>x.so</snippet></ROW><ROW><id>1186194</id><snippet>xyz.so</snippet></ROW><ROW><id>1186194</id><snippet>x.so</snippet></ROW><ROW><id>1186194</id><snippet>-Wl,-rpath=/some/path</snippet></ROW><ROW><id>1186194</id><snippet>x.so</snippet></ROW><ROW><id>1186194</id><snippet>/some/path</snippet></ROW><ROW><id>1186340</id><snippet>#ifndef EXAMPLE_H
#define EXAMPLE_H

class Math {
 public:
    int pi() const {
        return this-&gt;_pi;
    }

    void pi(int pi) {
        this-&gt;_pi = pi;
    }

 private:
    int _pi;
};

#endif
</snippet></ROW><ROW><id>1186340</id><snippet>%module example

%{
    #define SWIG_FILE_WITH_INIT
    #include "example.h"
%}

[essentially example.h repeated again]
</snippet></ROW><ROW><id>1186340</id><snippet>#include "example.h"
</snippet></ROW><ROW><id>1186340</id><snippet>class PropertyVoodoo(type):
    """A metaclass. Initializes when the *class* is initialized, not
    the object. Therefore, we are free to muck around the class
    methods and, specifically, descriptors."""

    def __init__(cls, *a):
        # OK, so the list of C++ properties using the style described
        # in the OP is stored in a __properties__ magic variable on
        # the class.
        for prop in cls.__properties__:

            # Get accessor.
            def fget(self):
                # Get the SWIG class using super. We have to use super
                # because the only information we're working off of is
                # the class object itself (cls). This is not the most
                # robust way of doing things but works when the SWIG
                # class is the only superclass.
                s = super(cls, self)

                # Now get the C++ method and call its operator().
                return getattr(s, prop)()

            # Set accessor.
            def fset(self, value):
                # Same as above.
                s = super(cls, self)

                # Call its overloaded operator(int value) to set it.
                return getattr(s, prop)(value)

            # Properties in Python are descriptors, which are in turn
            # static variables on the class. So, here we create the
            # static variable and set it to the property.
            setattr(cls, prop, property(fget=fget, fset=fset))

        # type() needs the additional arguments we didn't use to do
        # inheritance. (Parent classes are passed in as arguments as
        # part of the metaclass protocol.) Usually a = [&lt;some swig
        # class&gt;] right now.
        super(PropertyVoodoo, cls).__init__(*a)

        # One more piece of work: SWIG selfishly overrides
        # __setattr__. Normal Python classes use object.__setattr__,
        # so that's what we use here. It's not really important whose
        # __setattr__ we use as long as we skip the SWIG class in the
        # inheritance chain because SWIG's __setattr__ will skip the
        # property we just created.
        def __setattr__(self, name, value):
            # Only do this for the properties listed.
            if name in cls.__properties__:
                object.__setattr__(self, name, value)
            else:
                # Same as above.
                s = super(cls, self)

                s.__setattr__(name, value)

        # Note that __setattr__ is supposed to be an instance method,
        # hence the self. Simply assigning it to the class attribute
        # will ensure it's an instance method; that is, it will *not*
        # turn into a static/classmethod magically.
        cls.__setattr__ = __setattr__
</snippet></ROW><ROW><id>1186340</id><snippet>import example
from util import PropertyVoodoo

class Math(example.Math):
    __properties__ = ['pi']
    __metaclass__  = PropertyVoodoo

m = Math()
print m.pi
m.pi = 1024
print m.pi
m.pi = 10000
print m.pi
</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_records</snippet></ROW><ROW><id>1186526</id><snippet>updated_records</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_data</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_data = [(updated_records.pop(recid, value), recid) 
                    for (value, recid) in self.sorted_data]
</snippet></ROW><ROW><id>1186526</id><snippet>.pop</snippet></ROW><ROW><id>1186526</id><snippet>updated_records</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_data</snippet></ROW><ROW><id>1186526</id><snippet>recid</snippet></ROW><ROW><id>1186526</id><snippet>value</snippet></ROW><ROW><id>1186526</id><snippet>updated_record</snippet></ROW><ROW><id>1186526</id><snippet>updated_record</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_data</snippet></ROW><ROW><id>1186526</id><snippet>self.sorted_data.extend(value, recid 
                        for recid, value in updated_records.iteritems())
self.sorted_data.sort()
</snippet></ROW><ROW><id>1186772</id><snippet> def mymodelform_factory(maps):
     class MyModelForm(forms.ModelForm):
          def __init__(self, *args, **kwargs):
               super(MyModelForm, self).__init__(*args, **kwargs)
               #use maps to customize form delcaration here
          class Meta:
               model = myModel
     return MyModelForm
</snippet></ROW><ROW><id>1186772</id><snippet> MyFormSet = modelformset_factory(MyModel, form=mymodelform_factory(maps))
</snippet></ROW><ROW><id>1186847</id><snippet>def some_func():
    print 'in test 1, unproductive'

if __name__ == '__main__':
    # test1.py executed as script
    # do something
    some_func()
</snippet></ROW><ROW><id>1186847</id><snippet>import test1

def service_func():
    print 'service func'

if __name__ == '__main__':
    # service.py executed as script
    # do something
    service_func()
    test1.some_func()
</snippet></ROW><ROW><id>1186874</id><snippet>sub.domain.tld</snippet></ROW><ROW><id>1186874</id><snippet>domain.ltd</snippet></ROW><ROW><id>1187067</id><snippet>mystartup.py</snippet></ROW><ROW><id>1187067</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>1187067</id><snippet>def _(v):
    if type(v) == type(0.0):
        print "%e" % v
    else:
        print v
</snippet></ROW><ROW><id>1187067</id><snippet>result_display.when_type(some_type)(my_print_func)</snippet></ROW><ROW><id>1187787</id><snippet>sys.exit()</snippet></ROW><ROW><id>1187787</id><snippet>import sys

def main():
    # ...

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print &gt;&gt; sys.stderr,  e
        sys.exit(1)
    else:
        sys.exit()
</snippet></ROW><ROW><id>1187787</id><snippet>main()</snippet></ROW><ROW><id>1187787</id><snippet>sys.exit()</snippet></ROW><ROW><id>1187787</id><snippet>import subprocess

command = 'thescript'
args = ['arg1', 'arg2']

while True:
    ret_code = subprocess.call([command] + args)

    if ret_code == 0:
        break
</snippet></ROW><ROW><id>1188086</id><snippet>main</snippet></ROW><ROW><id>1188086</id><snippet>import sys, traceback

def main():
    try:
        do main program stuff here
        ....
    except KeyboardInterrupt:
        print "Shutdown requested...exiting"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1188221</id><snippet>source_file = open("myfile", "r")
file_data = list(source_file.read())
source_file.close()
file_data.insert(position, data)
open("myfile", "wb").write(file_data)
</snippet></ROW><ROW><id>1188246</id><snippet>(r'^/(?P&lt;kind&gt;blog)/$', 'view.stuff'),
(r'^/(?P&lt;kind&gt;news)/$', 'view.stuff'),
</snippet></ROW><ROW><id>1188246</id><snippet>def stuff( request, kind ):
    content= news_blog.objects.filter( kind=kind )
    return render_to_response( kind+"_page", { 'content': content } )
</snippet></ROW><ROW><id>1188395</id><snippet>dict</snippet></ROW><ROW><id>1188395</id><snippet>get()</snippet></ROW><ROW><id>1188395</id><snippet>attribute_value = result.get("attribute", None)
</snippet></ROW><ROW><id>1188395</id><snippet>if not "attribute" in result:
    ...handle case where there is no attribute value...
</snippet></ROW><ROW><id>1188943</id><snippet>http://my.domain.com/my/webservice</snippet></ROW><ROW><id>1188943</id><snippet>webservice</snippet></ROW><ROW><id>1188943</id><snippet>my</snippet></ROW><ROW><id>1188943</id><snippet>http://my.domain.com/my/webservice/</snippet></ROW><ROW><id>1189075</id><snippet>def aaaargh(alist):
  for x in alist:
    print a
    a = 23
</snippet></ROW><ROW><id>1189075</id><snippet>a</snippet></ROW><ROW><id>1189075</id><snippet>print</snippet></ROW><ROW><id>1189162</id><snippet>signal</snippet></ROW><ROW><id>1189162</id><snippet>signal.signal()</snippet></ROW><ROW><id>1189162</id><snippet>thread</snippet></ROW><ROW><id>1189162</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>1189162</id><snippet>SIGINT</snippet></ROW><ROW><id>1189162</id><snippet>signal</snippet></ROW><ROW><id>1189162</id><snippet>signal</snippet></ROW><ROW><id>1189162</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>1189162</id><snippet>thread.interrupt_main()</snippet></ROW><ROW><id>1189162</id><snippet>thread</snippet></ROW><ROW><id>1189162</id><snippet>signal</snippet></ROW><ROW><id>1189434</id><snippet>?</snippet></ROW><ROW><id>1189434</id><snippet>l</snippet></ROW><ROW><id>1189434</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>1189434</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>1189434</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>1189575</id><snippet>cell_value</snippet></ROW><ROW><id>1189575</id><snippet>type()</snippet></ROW><ROW><id>1189575</id><snippet>this_row.append(s.cell_value(row,col))
</snippet></ROW><ROW><id>1189575</id><snippet>this_row.append(s.cell_value(row,col).encode('utf8'))
</snippet></ROW><ROW><id>1189575</id><snippet>cell_value</snippet></ROW><ROW><id>1189575</id><snippet>val = s.cell_value(row, col)
if isinstance(val, unicode):
    val = val.encode('utf8')
this_row.append(val)
</snippet></ROW><ROW><id>1189668</id><snippet>o = C2()
</snippet></ROW><ROW><id>1189668</id><snippet>o = classToUse()
</snippet></ROW><ROW><id>1190379</id><snippet># Method of the Element(Node) class.
def writexml(self, writer, indent="", addindent="", newl=""):
    # [snip]
    if self.childNodes:
        writer.write("&gt;%s"%(newl))
        for node in self.childNodes:
            node.writexml(writer,indent+addindent,addindent,newl)
        writer.write("%s&lt;/%s&gt;%s" % (indent,self.tagName,newl))
    else:
        writer.write("/&gt;%s"%(newl))
</snippet></ROW><ROW><id>1190379</id><snippet>&gt;&gt;&gt; doc = Document()
&gt;&gt;&gt; v = doc.appendChild(doc.createElement('v'))
&gt;&gt;&gt; v.toxml()
'&lt;v/&gt;'
&gt;&gt;&gt; v.childNodes
[]
&gt;&gt;&gt; v.appendChild(doc.createTextNode(''))
&lt;DOM Text node "''"&gt;
&gt;&gt;&gt; v.childNodes
[&lt;DOM Text node "''"&gt;]
&gt;&gt;&gt; v.toxml()
'&lt;v&gt;&lt;/v&gt;'
</snippet></ROW><ROW><id>1190379</id><snippet>Element</snippet></ROW><ROW><id>1190379</id><snippet>toxml</snippet></ROW><ROW><id>1190856</id><snippet>threading</snippet></ROW><ROW><id>1190856</id><snippet>threading</snippet></ROW><ROW><id>1190856</id><snippet>multiprocessing</snippet></ROW><ROW><id>1190856</id><snippet>Thread</snippet></ROW><ROW><id>1190856</id><snippet>Process</snippet></ROW><ROW><id>1190856</id><snippet>Queue</snippet></ROW><ROW><id>1190856</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>1191257</id><snippet>AS</snippet></ROW><ROW><id>1191257</id><snippet>INNER JOIN ... ON ...</snippet></ROW><ROW><id>1191257</id><snippet>sort_buffer</snippet></ROW><ROW><id>1191257</id><snippet>key_buffer</snippet></ROW><ROW><id>1191257</id><snippet>EXPLAIN</snippet></ROW><ROW><id>1191257</id><snippet>JOIN</snippet></ROW><ROW><id>1191710</id><snippet>EVT_MENU</snippet></ROW><ROW><id>1191710</id><snippet>EVT_MENU_OPEN</snippet></ROW><ROW><id>1191710</id><snippet>self.about_menu = wx.Menu()  # or whatever inherited class you have
self.Bind(wx.EVT_MENU_OPEN, self.on_menu_open)
</snippet></ROW><ROW><id>1191710</id><snippet>def on_menu_open(self, event):
    if event.GetMenu()==self.about_menu:
         #do something
</snippet></ROW><ROW><id>1192043</id><snippet>python_dev</snippet></ROW><ROW><id>1192439</id><snippet>results</snippet></ROW><ROW><id>1192439</id><snippet>results = s.execute()

for row in results:
    print row
</snippet></ROW><ROW><id>1192439</id><snippet>from sqlalchemy.sql import select

s = select([users_table.c.user_name, users_table.c.user_country], users_table.c.user_name == username)

for user_name, user_country in s.execute():
   print user_name, user_country
</snippet></ROW><ROW><id>1192516</id><snippet>set list listchars=tab:»·,trail:·,precedes:…,extends:…,nbsp:‗
</snippet></ROW><ROW><id>1192880</id><snippet>python</snippet></ROW><ROW><id>1192880</id><snippet>tee</snippet></ROW><ROW><id>1192880</id><snippet>python</snippet></ROW><ROW><id>1192880</id><snippet>tee</snippet></ROW><ROW><id>1192898</id><snippet>&gt;&gt;&gt; s = "a aa aaa aa"
&gt;&gt;&gt; max(s.split(), key=len)
'aaa'
</snippet></ROW><ROW><id>1192898</id><snippet>split()</snippet></ROW><ROW><id>1192898</id><snippet>max()</snippet></ROW><ROW><id>1192898</id><snippet>len()</snippet></ROW><ROW><id>1193105</id><snippet>root.replace(myFolder, "")</snippet></ROW><ROW><id>1193105</id><snippet>root.replace(myFolder, "", 1)</snippet></ROW><ROW><id>1193205</id><snippet>self.fields['myfield'].choices = [('%s' % d.id, '%s' % d.name) for d in MyModel.objects.filter(owners = user)]
</snippet></ROW><ROW><id>1194029</id><snippet>def test_evens():
    for i in range(0, 5):
        yield check_even, i, i*3

def check_even(n, nn):
    assert n % 2 == 0 or nn % 2 == 0
</snippet></ROW><ROW><id>1194766</id><snippet>stat.sort(key=lambda x: x.created_at, reverse=True)
</snippet></ROW><ROW><id>1194766</id><snippet>from operator import attrgetter
stat.sort(key=attrgetter('created_at'), reverse=True)
</snippet></ROW><ROW><id>1194800</id><snippet> class Car(models.Model):
      manufacturer = models.ForeignKey('Manufacturer')
      # ...

 class Manufacturer(models.Model):
      # ...
</snippet></ROW><ROW><id>1195696</id><snippet>local_var</snippet></ROW><ROW><id>1195696</id><snippet>func</snippet></ROW><ROW><id>1195696</id><snippet>func</snippet></ROW><ROW><id>1195696</id><snippet>print</snippet></ROW><ROW><id>1195696</id><snippet>nonlocal</snippet></ROW><ROW><id>1195696</id><snippet>print</snippet></ROW><ROW><id>1195696</id><snippet>def func1():
    local_var = [None]

    def func(args):
        print args,
        print "local_var:", local_var[0]

        local_var[0] = "local"

    func("first")
    func("second")

func1()
</snippet></ROW><ROW><id>1195768</id><snippet>.remove()</snippet></ROW><ROW><id>1195768</id><snippet>george_author = Author.objects.get(name="George")
for book in Book.objects.filter(authors__name="Georfe"):
    book.authors.add(george_author.id)
    book.authors.filter(name="Georfe").delete()
</snippet></ROW><ROW><id>1195768</id><snippet>.update(id=george_author.id)</snippet></ROW><ROW><id>1195949</id><snippet>    public class GuestbookServlet extends HttpServlet {
        public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
            UserService userService = UserServiceFactory.getUserService();
            User user = userService.getCurrentUser();

            if (user != null) {
                resp.setContentType("text/plain");
                resp.getWriter().println("Hello, " + user.getNickname());
            } else {
                resp.sendRedirect(userService.createLoginURL(req.getRequestURI()));
            }
        }
   }
</snippet></ROW><ROW><id>1196122</id><snippet>system()</snippet></ROW><ROW><id>1196122</id><snippet>spawn</snippet></ROW><ROW><id>1196122</id><snippet>import os
os.spawnl(os.P_DETACH, 'some_log_running_command')
</snippet></ROW><ROW><id>1196122</id><snippet>os.P_DETACH</snippet></ROW><ROW><id>1196122</id><snippet>os.P_NOWAIT</snippet></ROW><ROW><id>1196142</id><snippet>from django.db import models

class Province(models.Model):
    numberPlate = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=20)

class Office(models.Model):
    name = models.CharField(max_length=30)
    province = models.ForeignKey(Province)
</snippet></ROW><ROW><id>1196142</id><snippet> python manage.py syncdb
</snippet></ROW><ROW><id>1196993</id><snippet>ALT-M</snippet></ROW><ROW><id>1196993</id><snippet>CTRL-O</snippet></ROW><ROW><id>1197086</id><snippet>def do_something(attribute, objects):
    results = []
    for object in objects:
        if hasattr(object, attribute):
            results.append(getattr(object, attribute))
    return results
</snippet></ROW><ROW><id>1197086</id><snippet>def do_something(attribute, objects):
    return [getattr(o, attribute) for o in objects if hasattr(o, attribute)]
</snippet></ROW><ROW><id>1197411</id><snippet>WSGIScriptAlias / /C:/Users/Marcos/Documents/mysite/apache/django.wsgi
</snippet></ROW><ROW><id>1197411</id><snippet>WSGIScriptAlias / C:/Users/Marcos/Documents/mysite/apache/django.wsgi
</snippet></ROW><ROW><id>1197411</id><snippet>&lt;Directory C:/Users/Marcos/Documents/mysite/apache&gt;
Order deny,allow
Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>1197628</id><snippet>&gt;&gt;&gt; re.split('x*', 'foo')
['foo']
&gt;&gt;&gt; re.split("(?m)^$", "foo\n\nbar\n")
['foo\n\nbar\n']
</snippet></ROW><ROW><id>1197682</id><snippet>        # poll for terminated status till timeout is reached
        t_beginning = time.time()
        seconds_passed = 0
        while True:
            if p.poll() is not None:
                break
            seconds_passed = time.time() - t_beginning
            if timeout and seconds_passed &gt; timeout:
                p.terminate()
                raise TimeoutError(cmd, timeout)
            time.sleep(0.1)
</snippet></ROW><ROW><id>1197738</id><snippet>save</snippet></ROW><ROW><id>1197738</id><snippet>state</snippet></ROW><ROW><id>1197738</id><snippet>started</snippet></ROW><ROW><id>1198288</id><snippet>if __name__ == '__main__':
    t = tk.Tk()
    t.iconbitmap('icon.ico')

    b = tk.Button(text='test', command=exit)
    b.grid(row=0)

    t.mainloop()
</snippet></ROW><ROW><id>1198288</id><snippet>def threadmain():
    t = tk.Tk()
    t.iconbitmap('icon.ico')
    b = tk.Button(text='test', command=exit)
    b.grid(row=0)
    t.mainloop()


if __name__ == '__main__':
    thread.start_new_thread(threadmain, ())

    while 1:
        sleep(1)
</snippet></ROW><ROW><id>1198288</id><snippet>import Tkinter as tk
import thread
from time import sleep
import Queue

request_queue = Queue.Queue()
result_queue = Queue.Queue()

def submit_to_tkinter(callable, *args, **kwargs):
    request_queue.put((callable, args, kwargs))
    return result_queue.get()

t = None
def threadmain():
    global t

    def timertick():
        try:
            callable, args, kwargs = request_queue.get_nowait()
        except Queue.Empty:
            pass
        else:
            print "something in queue"
            retval = callable(*args, **kwargs)
            result_queue.put(retval)

        t.after(500, timertick)

    t = tk.Tk()
    t.configure(width=640, height=480)
    b = tk.Button(text='test', name='button', command=exit)
    b.place(x=0, y=0)
    timertick()
    t.mainloop()

def foo():
    t.title("Hello world")

def bar(button_text):
    t.children["button"].configure(text=button_text)

def get_button_text():
    return t.children["button"]["text"]

if __name__ == '__main__':
    thread.start_new_thread(threadmain, ())

    trigger = 0
    while 1:
        trigger += 1

        if trigger == 3:
            submit_to_tkinter(foo)

        if trigger == 5:
            submit_to_tkinter(bar, "changed")

        if trigger == 7:
            print submit_to_tkinter(get_button_text)

        sleep(1)
</snippet></ROW><ROW><id>1198603</id><snippet>class Province(models.Model):
    numberPlate = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=20)
    content = models.TextField()
    office = models.ManyToManyField(Office)
    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>1198675</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>1198675</id><snippet>ALTER DATABASE ... CHARACTER SET utf8 COLLATE utf8_general_ci</snippet></ROW><ROW><id>1198675</id><snippet>syncdb</snippet></ROW><ROW><id>1198675</id><snippet>SET NAMES utf8</snippet></ROW><ROW><id>1198788</id><snippet>[x for b in a for x in b]
</snippet></ROW><ROW><id>1198876</id><snippet>def partition(alist, indices):
    return [alist[i:j] for i, j in zip([0]+indices, indices+[None])]
</snippet></ROW><ROW><id>1198876</id><snippet>from itertools import izip, chain
def partition(alist, indices):
    pairs = izip(chain([0], indices), chain(indices, [None]))
    return (alist[i:j] for i, j in pairs)
</snippet></ROW><ROW><id>1198876</id><snippet>import numpy
partition = numpy.split
</snippet></ROW><ROW><id>1198935</id><snippet>def getstatusoutput(cmd): 
    """Return (status, output) of executing cmd in a shell."""
    """This new implementation should work on all platforms."""
    import subprocess
    pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True, universal_newlines=True)  
    output = "".join(pipe.stdout.readlines()) 
    sts = pipe.returncode
    if sts is None: sts = 0
    return sts, output
</snippet></ROW><ROW><id>1199113</id><snippet>import bisect
bisect.bisect_left([100,300,500,800,1000], p)
</snippet></ROW><ROW><id>1199396</id><snippet>[[col1, col2, col3, col4], # Row 1
 [col1, col2, col3, col4], # Row 2
 [col1, col2, col3, col4], # Row 3
 [col1, col2, col3, col4]] # Row 4
</snippet></ROW><ROW><id>1199396</id><snippet>&gt;&gt;&gt; cols = zip(*rows)
&gt;&gt;&gt; cols
[[row1, row2, row3, row4], # Col 1
 [row1, row2, row3, row4], # Col 2
 [row1, row2, row3, row4], # Col 3
 [row1, row2, row3, row4]] # Col 4
</snippet></ROW><ROW><id>1199481</id><snippet>import os, os.path, shutil

YUI_COMPRESSOR = 'yuicompressor-2.4.2.jar'

def compress(in_files, out_file, in_type='js', verbose=False,
             temp_file='.temp'):
    temp = open(temp_file, 'w')
    for f in in_files:
        fh = open(f)
        data = fh.read() + '\n'
        fh.close()

        temp.write(data)

        print ' + %s' % f
    temp.close()

    options = ['-o "%s"' % out_file,
               '--type %s' % in_type]

    if verbose:
        options.append('-v')

    os.system('java -jar "%s" %s "%s"' % (YUI_COMPRESSOR,
                                          ' '.join(options),
                                          temp_file))

    org_size = os.path.getsize(temp_file)
    new_size = os.path.getsize(out_file)

    print '=&gt; %s' % out_file
    print 'Original: %.2f kB' % (org_size / 1024.0)
    print 'Compressed: %.2f kB' % (new_size / 1024.0)
    print 'Reduction: %.1f%%' % (float(org_size - new_size) / org_size * 100)
    print ''

    #os.remove(temp_file)
</snippet></ROW><ROW><id>1199481</id><snippet>compress</snippet></ROW><ROW><id>1199481</id><snippet>SCRIPTS = [
    'app/js/libs/EventSource.js',
    'app/js/libs/Hash.js',
    'app/js/libs/JSON.js',
    'app/js/libs/ServiceClient.js',
    'app/js/libs/jquery.hash.js',
    'app/js/libs/Application.js',
    'app/js/intro.js',
    'app/js/jquery-extras.js',
    'app/js/settings.js',
    'app/js/api.js',
    'app/js/game.js',
    'app/js/user.js',
    'app/js/pages.intro.js',
    'app/js/pages.home.js',
    'app/js/pages.log-in.js',
    'app/js/pages.log-out.js',
    'app/js/pages.new-command.js',
    'app/js/pages.new-frame.js',
    'app/js/pages.not-found.js',
    'app/js/pages.register.js',
    'app/js/pages.outro.js',
    'app/js/outro.js',
    ]
SCRIPTS_OUT_DEBUG = 'app/js/multifarce.js'
SCRIPTS_OUT = 'app/js/multifarce.min.js'

STYLESHEETS = [
    'app/media/style.css',
    ]
STYLESHEETS_OUT = 'app/media/style.min.css'

def main():
    print 'Compressing JavaScript...'
    compress(SCRIPTS, SCRIPTS_OUT, 'js', False, SCRIPTS_OUT_DEBUG)

    print 'Compressing CSS...'
    compress(STYLESHEETS, STYLESHEETS_OUT, 'css')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1199742</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>1199742</id><snippet>class Country(db.Model):
    name = db.StringProperty(required=True)

class State(db.Model):
    country = db.ReferenceProperty(Country, collection_name='states')
    name = db.StringProperty(required=True)

class City(db.Model):
    state = db.ReferenceProperty(State, collection_name='cities')
    name = db.StringProperty(required=True)
</snippet></ROW><ROW><id>1199742</id><snippet>Country</snippet></ROW><ROW><id>1199742</id><snippet>states</snippet></ROW><ROW><id>1199742</id><snippet>State</snippet></ROW><ROW><id>1199742</id><snippet>State</snippet></ROW><ROW><id>1199742</id><snippet>cities</snippet></ROW><ROW><id>1199742</id><snippet>City</snippet></ROW><ROW><id>1199742</id><snippet># Create a new country:
us = Country(name='USA')
us.put()

# Create a new state
ca = State(name='California', country=us)
ca.put()

# Create a new city
la = City(name='Los Angeles', state=ca)
la.put()

# And another
sf = City(name='San Francisco', state=ca)
sf.put()

# Print states
for state in us.states:
    print state.name

    # Print cities
    for city in state.cities:
        print ' ' + city.name
</snippet></ROW><ROW><id>1199742</id><snippet>California
 Los Angeles
 San Francisco
</snippet></ROW><ROW><id>1200373</id><snippet>class BlackListModel(models.Model):   
   blacklist = ['a', 'b', 'c']

   # your model fields definitions...

   def save(self, *args, **kwargs):
        if self.blacklist_field in self.blacklist:
            raise Exception("Attempting to save a blacklisted value!")
        return super(BlackListModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1200522</id><snippet>File '/home/andy/projects/evecharacters/evecharacters/controllers/characters.py', line 9 in &lt;module&gt;
  from storm.local import *
ImportError: No module named local
</snippet></ROW><ROW><id>1200522</id><snippet>from storm.locals import *
</snippet></ROW><ROW><id>1200522</id><snippet>from storm.local import *
</snippet></ROW><ROW><id>1200522</id><snippet>from storm.local import *</snippet></ROW><ROW><id>1200907</id><snippet>Destroy</snippet></ROW><ROW><id>1200907</id><snippet>__del__</snippet></ROW><ROW><id>1201151</id><snippet>logging</snippet></ROW><ROW><id>1201151</id><snippet>a</snippet></ROW><ROW><id>1201151</id><snippet>b</snippet></ROW><ROW><id>1201151</id><snippet>c</snippet></ROW><ROW><id>1201151</id><snippet>a</snippet></ROW><ROW><id>1201151</id><snippet>b</snippet></ROW><ROW><id>1201151</id><snippet>c</snippet></ROW><ROW><id>1201213</id><snippet>super</snippet></ROW><ROW><id>1201213</id><snippet>class Foo(ctypes.BigEndianStructure):
    def __init__(self):
        super(Foo, self).__init__()
</snippet></ROW><ROW><id>1201456</id><snippet>Screenshot</snippet></ROW><ROW><id>1201456</id><snippet>files_in_db = Screenshot.objects.values_list('filename', flat=True).distinct()
</snippet></ROW><ROW><id>1201456</id><snippet>files_on_disc = os.listdir(settings.SCREENSHOTS_ON_DISC)
</snippet></ROW><ROW><id>1201594</id><snippet>db.commit()
</snippet></ROW><ROW><id>1202272</id><snippet>names = random.sample(open('names.txt').readlines(), count)
print names
</snippet></ROW><ROW><id>1202272</id><snippet>random.sample()</snippet></ROW><ROW><id>1202272</id><snippet>split()</snippet></ROW><ROW><id>1202272</id><snippet>random.sample()</snippet></ROW><ROW><id>1202308</id><snippet>import readline

def raw_input_no_history():
    input = raw_input()
    readline.remove_history_item(readline.get_current_history_length()-1)
    return input
</snippet></ROW><ROW><id>1202614</id><snippet>Choose(8,1)*P(one set of 5 Xs) 
- Choose(8,2)*P(a set of 5 Xs and a set of 5 Ys) 
+ Choose(8,3)*P(5 Xs, 5 Ys, 5 Zs) 
- Choose(8,4)*P(5 Xs, 5 Ys, 5 Zs, 5 As)

P(set of 5 Xs) = 20 Choose 5 * 7^15 / 8^20
P(5 Xs, 5 Ys) = 20 Choose 5,5 * 6^10 / 8^20
</snippet></ROW><ROW><id>1202875</id><snippet>csv</snippet></ROW><ROW><id>1202875</id><snippet>f = open("my_csv_file.csv", "r")
target = open("united.csv", 'w')

f.readline()
f.readline()
for line in f:
    target.write(line)
</snippet></ROW><ROW><id>1202998</id><snippet>f.seek(0)
</snippet></ROW><ROW><id>1202998</id><snippet>f.seek(0, 2)
</snippet></ROW><ROW><id>1203113</id><snippet>#!/usr/bin/env python

def format_box(title, body, width=80):
    box_line = lambda text: "*  " + text + (" " * (width - 6 - len(text))) + "  *"

    print "*" * width
    print box_line(title)
    print "*" * width
    print box_line("")

    for line in body.split("\n"):
        print box_line(line.expandtabs())

    print box_line("")
    print "*" * width

format_box(
    "Here's the title",

    "The body will go in here.  Say I put a line break here ---&gt; \n"
    "it will go to the next line.  I also want to keep track\n"
    "\t&lt;----- of tabs so I can space things out on lines if i have to"
);
</snippet></ROW><ROW><id>1203792</id><snippet>settings.py</snippet></ROW><ROW><id>1203792</id><snippet>settings.py</snippet></ROW><ROW><id>1203792</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1203792</id><snippet>/admin</snippet></ROW><ROW><id>1203996</id><snippet>wx.EVT_KEY_DOWN</snippet></ROW><ROW><id>1203996</id><snippet>import wx
import wx.aui, wx.lib.scrolledpanel

class AppFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)

        # The notebook
        self.nb = wx.aui.AuiNotebook(self)

        # Create a scrolled panel
        panel = wx.lib.scrolledpanel.ScrolledPanel(self, -1)
        panel.SetupScrolling()
        self.add_panel(panel, 'Scrolled Panel')

        # Create a normal panel
        panel = wx.Panel(self, -1)
        self.add_panel(panel, 'Simple Panel')

        # Set the notebook on the frame
        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.nb, 1, wx.EXPAND)
        self.SetSizer(self.sizer)

        # Status bar to display the key code of what was typed
        self.sb = self.CreateStatusBar()

    def add_panel(self, panel, name):
        panel.Bind(wx.EVT_KEY_DOWN, self.on_key)
        self.nb.AddPage(panel, name)

    def on_key(self, event):
        self.sb.SetStatusText("key: %d [%d]" % (event.GetKeyCode(), event.GetTimestamp()))
        event.Skip()

class TestApp(wx.App):
    def OnInit(self):
        frame = AppFrame(None, -1, 'Click on a panel and hit a key')
        frame.Show()
        self.SetTopWindow(frame)
        return 1

if __name__ == "__main__":
    app = TestApp(0)
    app.MainLoop()
</snippet></ROW><ROW><id>1204136</id><snippet>request.user</snippet></ROW><ROW><id>1204136</id><snippet>from django import forms

class UserForm(forms.Form):
    email_address = forms.EmailField(widget = forms.TextInput(attrs = {'class':'required'}))

    def __init__(self, user=None, *args, **kwargs):
        super(UserForm, self).__init__(*args, **kwargs)
        self._user = user

    def clean_email_address(self):
        email = self.cleaned_data.get('email_address')
        if self._user and self._user.email == email:
            return email
        if UserProfile.objects.filter(email=email).count():
            raise forms.ValidationError(u'That email address already exists.')
        return email
</snippet></ROW><ROW><id>1204136</id><snippet>def someview(request):
    if request.method == 'POST':
        form = UserForm(user=request.user, data=request.POST)
        if form.is_valid():
            # Do something with the data
            pass
    else:
        form = UserForm(user=request.user)
    # Rest of your view follows
</snippet></ROW><ROW><id>1204270</id><snippet>.search</snippet></ROW><ROW><id>1204270</id><snippet>&gt;&gt;&gt; _.groups()
('',)
</snippet></ROW><ROW><id>1204270</id><snippet>&gt;&gt;&gt; pat_error = re.compile(r"&gt;(\s*\w+)*&gt;")
&gt;&gt;&gt; pat_error.search(text)
&lt;_sre.SRE_Match object at 0x83ba0&gt;
&gt;&gt;&gt; _.groups()
(' the',)
</snippet></ROW><ROW><id>1204270</id><snippet>\1</snippet></ROW><ROW><id>1204270</id><snippet>&gt;&gt;&gt; pat_error.sub(r"&gt;\1", text)
'&lt;hi type="italic"&gt; the&lt;/hi&gt;'
</snippet></ROW><ROW><id>1204314</id><snippet>return HttpResponseRedirect(reverse('poll_results', kwargs={'object_id': p.id}))
</snippet></ROW><ROW><id>1204410</id><snippet>import os, sigar

sg = sigar.open()
mem = sg.mem()
sg.close() 
print mem.total() / 1024, mem.free() / 1024
</snippet></ROW><ROW><id>1204472</id><snippet>&gt;&gt;&gt; eval("for i in range(5):\n print 'hello'")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    for i in range(5):
      ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1204472</id><snippet>eval</snippet></ROW><ROW><id>1204472</id><snippet>exec</snippet></ROW><ROW><id>1204472</id><snippet>eval</snippet></ROW><ROW><id>1204472</id><snippet>exec</snippet></ROW><ROW><id>1204472</id><snippet>exec</snippet></ROW><ROW><id>1204638</id><snippet>import os.path, shutil

def remove_ext(arg, dirname, fnames):
    argfiles = (os.path.join(dirname, f) for f in fnames if f.endswith(arg))
    for f in argfiles:
        shutil.move(f, f[:-len(arg)])

os.path.walk('/some/path', remove_ext, '.tex')
</snippet></ROW><ROW><id>1204807</id><snippet>x = int(x)
y = int(y)
Distance = float(decimal((2*(x*x))((decimal(math.zsin(y)))*(decimal(math.acos(y)))))/2)
</snippet></ROW><ROW><id>1204886</id><snippet>Layout</snippet></ROW><ROW><id>1205070</id><snippet>A:(__init__.py: print 'importing A',
   B:(__init__.py: print 'importing B',
      C1:(__init__.py: print 'importing C1',
          D:(__init__.py: print 'importing D'))
      C2:(__init__.py: print 'importing C2',
          D:(__init__.py: print 'importing D'))))
</snippet></ROW><ROW><id>1205070</id><snippet>C1</snippet></ROW><ROW><id>1205070</id><snippet>C2</snippet></ROW><ROW><id>1205070</id><snippet>D</snippet></ROW><ROW><id>1205070</id><snippet>C1</snippet></ROW><ROW><id>1205070</id><snippet>C2</snippet></ROW><ROW><id>1205070</id><snippet>D</snippet></ROW><ROW><id>1205070</id><snippet>from A.B import C1
</snippet></ROW><ROW><id>1205070</id><snippet>import A.B.C1
C1 = A.B.C1
</snippet></ROW><ROW><id>1205070</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2
&gt;&gt;&gt; from A.B import C1
importing A
importing B
importing C1
&gt;&gt;&gt; C1
&lt;module 'A.B.C1' from 'A/B/C1/__init__.pyc'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1205070</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2
&gt;&gt;&gt; import A.B.C1
importing A
importing B
importing C1
&gt;&gt;&gt; C1=A.B.C1
&gt;&gt;&gt; C1
&lt;module 'A.B.C1' from 'A/B/C1/__init__.pyc'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1205070</id><snippet>from A.B import C1.D</snippet></ROW><ROW><id>1205070</id><snippet>A.B.C1.__init__.py</snippet></ROW><ROW><id>1205070</id><snippet>import D</snippet></ROW><ROW><id>1205070</id><snippet>__init__.py</snippet></ROW><ROW><id>1205070</id><snippet>A.B.C1</snippet></ROW><ROW><id>1205070</id><snippet>Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2
&gt;&gt;&gt; from A.B import C1
importing A
importing B
importing C1
importing D
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1205070</id><snippet>import models</snippet></ROW><ROW><id>1205524</id><snippet>floatsleep</snippet></ROW><ROW><id>1205524</id><snippet>from threading import Thread
import time
import sys

usb_device = 0

def usb_dump():
    for i in range(100):
        time.sleep(0.001)
        print "dumping usb"

class DumpThread(Thread):
    def run(self):
        usb_dump()

t = DumpThread()
t.start()
print "Sleep 1"
time.sleep(1)
print "End"
sys.exit(0)
</snippet></ROW><ROW><id>1205524</id><snippet>Timer</snippet></ROW><ROW><id>1205762</id><snippet>#!/usr/bin/env python

__all__ = ["monotonic_time"]

import ctypes, os

CLOCK_MONOTONIC = 1 # see &lt;linux/time.h&gt;

class timespec(ctypes.Structure):
    _fields_ = [
        ('tv_sec', ctypes.c_long),
        ('tv_nsec', ctypes.c_long)
    ]

librt = ctypes.CDLL('librt.so.1', use_errno=True)
clock_gettime = librt.clock_gettime
clock_gettime.argtypes = [ctypes.c_int, ctypes.POINTER(timespec)]

def monotonic_time():
    t = timespec()
    if clock_gettime(CLOCK_MONOTONIC, ctypes.pointer(t)) != 0:
        errno_ = ctypes.get_errno()
        raise OSError(errno_, os.strerror(errno_))
    return t.tv_sec + t.tv_nsec * 1e-9

if __name__ == "__main__":
    print monotonic_time()
</snippet></ROW><ROW><id>1205767</id><snippet>__init__</snippet></ROW><ROW><id>1205767</id><snippet>class PaymentsForm(forms.Form):
    invoice = forms.CharField(widget=forms.HiddenInput())
    total = forms.CharField(widget=forms.HiddenInput())

    def __init__(self, *args, **kwargs):
        super(PaymentsForm, self).__init__(*args, **kwargs)
        for i in xrange(10):
            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())
</snippet></ROW><ROW><id>1205767</id><snippet>__init__</snippet></ROW><ROW><id>1205767</id><snippet>    def __init__(self, repetitions, *args, **kwargs):
        super(PaymentsForm, self).__init__(*args, **kwargs)
        for i in xrange(repetitions):
            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())
</snippet></ROW><ROW><id>1205767</id><snippet>payments_form = PaymentsForm(10)
</snippet></ROW><ROW><id>1206726</id><snippet>import asyncore, socket

class client(asyncore.dispatcher):
    def __init__(self, host):
        self.host = host
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, 22))

    def handle_connect(self):
        print 'Connected to', self.host

    def handle_close(self):
        self.close()

    def handle_write(self):
        self.send('')

    def handle_read(self):
        print ' ', self.recv(1024)

clients = []
for i in range(50, 100):
    clients.append(client('cluster%d' % i))

asyncore.loop()
</snippet></ROW><ROW><id>1206726</id><snippet>Connected to cluster50
  SSH-2.0-OpenSSH_4.3

Connected to cluster51
  SSH-2.0-OpenSSH_4.3

Connected to cluster52
  SSH-2.0-OpenSSH_4.3

Connected to cluster60
  SSH-2.0-OpenSSH_4.3

Connected to cluster61
  SSH-2.0-OpenSSH_4.3

...
</snippet></ROW><ROW><id>1206924</id><snippet>import re
import math
import time
# ...
</snippet></ROW><ROW><id>1206924</id><snippet>import pkgutil
stuff = [thing[1] for thing in pkgutil.iter_modules()]
stuff.sort() # To make it easy to look through
print(stuff)
</snippet></ROW><ROW><id>1206924</id><snippet>if False:
    import re
    import email
    import time
    # ...
</snippet></ROW><ROW><id>1206924</id><snippet>src</snippet></ROW><ROW><id>1206924</id><snippet>almostimportstdlib</snippet></ROW><ROW><id>1207359</id><snippet>myVariable = testVariable or myVariable
</snippet></ROW><ROW><id>1207359</id><snippet>myVariable = request.POST.get('query', myVariable)
</snippet></ROW><ROW><id>1207461</id><snippet>somelist = [x for x in somelist if determine(x)]
</snippet></ROW><ROW><id>1207461</id><snippet>somelist = [x for x in somelist if not determine(x)]
</snippet></ROW><ROW><id>1207461</id><snippet>somelist[:] = [x for x in somelist if not determine(x)]
</snippet></ROW><ROW><id>1207461</id><snippet>filterfalse</snippet></ROW><ROW><id>1207461</id><snippet>from itertools import ifilterfalse
somelist[:] = list(ifilterfalse(determine, somelist))
</snippet></ROW><ROW><id>1207479</id><snippet>title = u"Klüft skräms inför på fédéral électoral große"
import unicodedata
unicodedata.normalize('NFKD', title).encode('ascii','ignore')
'Kluft skrams infor pa federal electoral groe'
</snippet></ROW><ROW><id>1207711</id><snippet>add_subplot</snippet></ROW><ROW><id>1207711</id><snippet>add_axes</snippet></ROW><ROW><id>1207711</id><snippet>    import matplotlib.pyplot as plt

    fig = plt.figure()

    # add_axes takes [left, bottom, width, height]
    border_width = 0.05
    ax_size = [0+border_width, 0+border_width, 
               1-2*border_width, 1-2*border-width]
    ax = fig.add_axes(ax_size)
    ax.plot_date((dates, dates), (highs, lows), '-', color='black')
    ax.plot_date(dates, closes, '-', marker='_', color='black')

    ax.set_title('Title')
    ax.grid(True)
    fig.set_figheight(96)
    fig.set_figwidth(24)
</snippet></ROW><ROW><id>1207711</id><snippet>set_figheight</snippet></ROW><ROW><id>1207711</id><snippet>set_figwidth</snippet></ROW><ROW><id>1207711</id><snippet>figure()</snippet></ROW><ROW><id>1207987</id><snippet>$ touch foo
$ ln -s foo bar
$ python
Python 2.5.1 (r251:54863, Feb  6 2009, 19:02:12) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; help(os.path.samefile)
Help on function samefile in module posixpath:

samefile(f1, f2)
    Test whether two pathnames reference the same actual file

&gt;&gt;&gt; os.path.samefile("foo", "bar")
True
</snippet></ROW><ROW><id>1208348</id><snippet>shapes = {'1':Square, '2':Circle, '3':Triangle} # just the class names in the dict

x = shapes[raw_input()]() # get class from dict, then call it to create a shape instance.
</snippet></ROW><ROW><id>1208839</id><snippet>reverse()</snippet></ROW><ROW><id>1208839</id><snippet>from django.core.urlresolvers import reverse

def myview(request):
    return HttpResponseRedirect(reverse('arch-summary', args=[1945]))
</snippet></ROW><ROW><id>1208931</id><snippet>import re

def _callback(matches):
    id = matches.group(1)
    try:
        return unichr(int(id))
    except:
        return id

def decode_unicode_references(data):
    return re.sub("&amp;#(\d+)(;|(?=\s))", _callback, data)

data = "U.S. Adviser’s Blunt Memo on Iraq: Time ‘to Go Home’"
print decode_unicode_references(data)
</snippet></ROW><ROW><id>1209358</id><snippet>threading.Thread</snippet></ROW><ROW><id>1209358</id><snippet>try</snippet></ROW><ROW><id>1209358</id><snippet>except SystemExit, e:</snippet></ROW><ROW><id>1210148</id><snippet>        try:
            f.extractall()
        except OSError, e:
            # http://bugs.python.org/issue6609
            if sys.platform.startswith('win'):
                if isinstance(e, WindowsError) and e.winerror == 267:
                    raise InvalidFile, ('uses Windows special name (%s)' % e)
            raise
</snippet></ROW><ROW><id>1210157</id><snippet>import django.contrib.auth
django.contrib.auth.models.User.objects.all().count()
</snippet></ROW><ROW><id>1210157</id><snippet>Profile.objects.all().count()
</snippet></ROW><ROW><id>1210397</id><snippet>for line in someRangeOfLines:
    for col in someRangeOfCols:
        try:
            cell= FooVal.objects().get( col = col, line = line )
        except FooVal.DoesNotExist:
            cell= None
</snippet></ROW><ROW><id>1210397</id><snippet>matrix = {}
for f in FooVal.objects().all():
    matrix[(f.line,f.col)] = f

for line in someRangeOfLines:
    for col in someRangeOfCols:
        cell= matrix.get((line,col),None)
</snippet></ROW><ROW><id>1210453</id><snippet>'\n'.join(' '.join(x) for x in zip(a, b))
</snippet></ROW><ROW><id>1210696</id><snippet>GET</snippet></ROW><ROW><id>1210696</id><snippet>def post(self):</snippet></ROW><ROW><id>1210696</id><snippet>"&lt;a href="/newtopic?id={{group.key.id}}" &gt;New topic &lt;/a&gt;"
</snippet></ROW><ROW><id>1210696</id><snippet>id=</snippet></ROW><ROW><id>1210696</id><snippet>Referer:</snippet></ROW><ROW><id>1210696</id><snippet>def get</snippet></ROW><ROW><id>1210696</id><snippet>id=</snippet></ROW><ROW><id>1210696</id><snippet>&lt;INPUT TYPE=hidden NAME=thegroupid VALUE={{ theid }}&gt; &lt;/INPUT&gt;
</snippet></ROW><ROW><id>1210696</id><snippet>theid</snippet></ROW><ROW><id>1210696</id><snippet>def post</snippet></ROW><ROW><id>1211093</id><snippet>for f in self.engine.processMovie():
    c, s = dlg.Update(f, "Processing frame %d"%f)
    if not c: break
</snippet></ROW><ROW><id>1211093</id><snippet>for f in self.engine.processMovie(): pass
</snippet></ROW><ROW><id>1211093</id><snippet>def update_state(f):
    c, s = dlg.Update(f, "Processing frame %d"%f)
    return c
self.engine.processMovie(progress=update_state)
</snippet></ROW><ROW><id>1212035</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; a.append(a.pop(0))
&gt;&gt;&gt; a
[2, 3, 4, 5, 1]
</snippet></ROW><ROW><id>1212035</id><snippet>collections.deque</snippet></ROW><ROW><id>1212035</id><snippet>&gt;&gt;&gt; a = collections.deque([1,2,3,4,5])
&gt;&gt;&gt; a
deque([1, 2, 3, 4, 5])
&gt;&gt;&gt; a.rotate(-1)
&gt;&gt;&gt; a
deque([2, 3, 4, 5, 1])
</snippet></ROW><ROW><id>1212035</id><snippet>a</snippet></ROW><ROW><id>1212035</id><snippet>&gt;&gt;&gt; c = a
&gt;&gt;&gt; # rotate a
</snippet></ROW><ROW><id>1212035</id><snippet>c</snippet></ROW><ROW><id>1212588</id><snippet>setattr(MyClass, "blah", property(self.get_blah, self.set_blah,
        self.del_blah, "bleh blih"))
</snippet></ROW><ROW><id>1212588</id><snippet>setattr(type(self), "blah", property(self.get_blah, self.set_blah,
        self.del_blah, "bleh blih"))
</snippet></ROW><ROW><id>1212662</id><snippet>hasattr</snippet></ROW><ROW><id>1212662</id><snippet>&gt;&gt;&gt; help(hasattr)
Help on built-in function hasattr in module __builtin__:

hasattr(...)
    hasattr(object, name) -&gt; bool

    Return whether the object has an attribute with the given name.
    (This is done by calling getattr(object, name) and catching exceptions.)
</snippet></ROW><ROW><id>1212662</id><snippet>inspect</snippet></ROW><ROW><id>1212907</id><snippet>def in_ipython():
    try:
        __IPYTHON__
    except NameError:
        return False
    else:
        return True
</snippet></ROW><ROW><id>1213341</id><snippet>from javax.swing import *
from java.awt import *

class Test(JFrame):
    def __init__(self):
        JFrame.__init__(self,
                        'JDesktopPane and JInternalFrame Demo',
                        size=(600, 300),
                        defaultCloseOperation=JFrame.EXIT_ON_CLOSE)

        self.desktop = JDesktopPane()
        self.contentPane.add(JScrollPane(self.desktop)) # This is the same as self.getContentPane().add(...)

        frame = JInternalFrame("Frame", 1, 1, 1, 1, size=(400, 400), visible=1)
        panel = JPanel()

        self.label = JLabel('Hello from Jython')
        panel.add(self.label)

        self.textfield1 = JTextField('Type something here',15,focusGained=self.myOnFocus)


        panel.add(self.textfield1)

        self.textfield2 = JTextField('and click Copy', 15)
        panel.add(self.textfield2)

        copyButton = JButton('Copy',actionPerformed=self.noAction)
        panel.add(copyButton)

        frame.add(panel)
        frame.pack()
        self.desktop.add(frame)

        frame.setSelected(1)
        frame.moveToFront()

    def myOnFocus(self,event):
        print "testing..."

    def noAction (self, event):
        pass

if __name__ == '__main__':
    test = Test()
    test.setLocation(100, 100)
    test.show()
</snippet></ROW><ROW><id>1213535</id><snippet># Red!
gc.set_rgb_fg_color(gtk.gdk.Color(0xff, 0x0, 0x0))
</snippet></ROW><ROW><id>1213795</id><snippet>easy_install django
</snippet></ROW><ROW><id>1213795</id><snippet>easy_install pip
</snippet></ROW><ROW><id>1213795</id><snippet>pip install django
</snippet></ROW><ROW><id>1214292</id><snippet>self.textfield1 = JTextField('Type something here',15,focusGained=self.myOnFocus,keyPressed=self.myOnKey)

#create textfield2...must be created before can be referenced below.

self.textfield1.setNextFocusableComponent(self.textfield2)
</snippet></ROW><ROW><id>1214292</id><snippet>def myOnKey(self,event):
    print str(event) # see all other info you can get.
    key_code = event.keyCode
    if key_code == 10:
        print "you pressed enter"
        # simulate the "tab" just focus next textbox...
        gotFocus = event.getComponent()
        nextToFocus = gotFocus.nextFocusableComponent
        nextToFocus.requestFocus()
</snippet></ROW><ROW><id>1214443</id><snippet>d = {'key' : ('value1', 'value2')}
</snippet></ROW><ROW><id>1214660</id><snippet>admin.py</snippet></ROW><ROW><id>1214660</id><snippet>from django.contrib import admin
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class MyUserCreationForm(UserCreationForm):
    username = forms.RegexField(
        label='Username', 
        max_length=30, 
        regex=r'^[\w-]+$',
        help_text = 'Required. 30 characters or fewer. Alphanumeric characters only (letters, digits, hyphens and underscores).',
        error_message = 'This value must contain only letters, numbers, hyphens and underscores.')

class MyUserChangeForm(UserChangeForm):
    username = forms.RegexField(
        label='Username', 
        max_length=30, 
        regex=r'^[\w-]+$',
        help_text = 'Required. 30 characters or fewer. Alphanumeric characters only (letters, digits, hyphens and underscores).',
        error_message = 'This value must contain only letters, numbers, hyphens and underscores.')

class MyUserAdmin(UserAdmin):
    form = MyUserChangeForm
    add_form = MyUserCreationForm

admin.site.unregister(User)
admin.site.register(User, MyUserAdmin)
</snippet></ROW><ROW><id>1214660</id><snippet>username</snippet></ROW><ROW><id>1214660</id><snippet>helptext</snippet></ROW><ROW><id>1214765</id><snippet>import struct
from zlib import crc32
import os

# PNG file format signature
pngsig = '\x89PNG\r\n\x1a\n'

def swap_palette(filename):
    # open in read+write mode
    with open(filename, 'r+b') as f:
        f.seek(0)
        # verify that we have a PNG file
        if f.read(len(pngsig)) != pngsig:
            raise RuntimeError('not a png file!')

        while True:
            chunkstr = f.read(8)
            if len(chunkstr) != 8:
                # end of file
                break

            # decode the chunk header
            length, chtype = struct.unpack('&gt;L4s', chunkstr)
            # we only care about palette chunks
            if chtype == 'PLTE':
                curpos = f.tell()
                paldata = f.read(length)
                # change the 3rd palette entry to cyan
                paldata = paldata[:6] + '\x00\xff\xde' + paldata[9:]

                # go back and write the modified palette in-place
                f.seek(curpos)
                f.write(paldata)
                f.write(struct.pack('&gt;L', crc32(chtype+paldata)&amp;0xffffffff))
            else:
                # skip over non-palette chunks
                f.seek(length+4, os.SEEK_CUR)

if __name__ == '__main__':
    import shutil
    shutil.copyfile('redghost.png', 'blueghost.png')
    swap_palette('blueghost.png')
</snippet></ROW><ROW><id>1214775</id><snippet>Profile.objects.filter(name__isnull=False)
</snippet></ROW><ROW><id>1214935</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>1214935</id><snippet>import errno, os, stat, shutil

def handleRemoveReadonly(func, path, exc):
  excvalue = exc[1]
  if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:
      os.chmod(path, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) # 0777
      func(path)
  else:
      raise

shutil.rmtree(filename, ignore_errors=False, onerror=handleRemoveReadonly)
</snippet></ROW><ROW><id>1215039</id><snippet>list()</snippet></ROW><ROW><id>1215039</id><snippet>def filter_data(data, predicate=lambda k, v: True):
    for d in data:
         for k, v in d.items():
               if predicate(k, v):
                    yield d


test_data = [{"key1":"value1", "key2":"value2"}, {"key1":"blabla"}, {"key1":"value1", "eh":"uh"}]
list(filter_data(test_data, lambda k, v: k == "key1" and v == "value1"))
# [{'key2': 'value2', 'key1': 'value1'}, {'key1': 'value1', 'eh': 'uh'}]
</snippet></ROW><ROW><id>1215184</id><snippet>Transform</snippet></ROW><ROW><id>1215184</id><snippet>Transform(raw_xml.encode('utf8'), stylesheet)</snippet></ROW><ROW><id>1215189</id><snippet>@echo off
call proc1.bat
proc2
</snippet></ROW><ROW><id>1215428</id><snippet>property_names=[p for p in dir(SomeClass) if isinstance(getattr(SomeClass,p),property)]
</snippet></ROW><ROW><id>1215600</id><snippet>import itertools
import operator

def main():
  for let, gen in itertools.groupby(big_gen(), key=operator.itemgetter(0)):
    secgen = itertools.imap(operator.itemgetter(1), gen)
    printer(let, secgen)
</snippet></ROW><ROW><id>1215600</id><snippet>groupby</snippet></ROW><ROW><id>1215600</id><snippet>key=</snippet></ROW><ROW><id>1215600</id><snippet>imap</snippet></ROW><ROW><id>1215600</id><snippet>printer</snippet></ROW><ROW><id>1215600</id><snippet>groupby</snippet></ROW><ROW><id>1215600</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1215697</id><snippet>mysql&gt; SELECT id, body, MATCH (title,body) AGAINST
    -&gt; ('Security implications of running MySQL as root'
    -&gt; IN NATURAL LANGUAGE MODE) AS score
    -&gt; FROM articles WHERE MATCH (title,body) AGAINST
    -&gt; ('Security implications of running MySQL as root'
    -&gt; IN NATURAL LANGUAGE MODE);
</snippet></ROW><ROW><id>1215852</id><snippet>http://www.w3.org/TR/2001/CR-css3-selectors-20011113/#nth-child-pseudo
</snippet></ROW><ROW><id>1215852</id><snippet>".item:nth-child(odd)"
</snippet></ROW><ROW><id>1216266</id><snippet>uSplit('theuser!host')
</snippet></ROW><ROW><id>1216266</id><snippet>'theuser!host'</snippet></ROW><ROW><id>1216266</id><snippet>is</snippet></ROW><ROW><id>1216266</id><snippet>is</snippet></ROW><ROW><id>1216266</id><snippet>is None</snippet></ROW><ROW><id>1216392</id><snippet>&lt;Location "/mysite"&gt;
    SetHandler python-program
    PythonHandler django.core.handlers.modpython
    SetEnv DJANGO_SETTINGS_MODULE mysite.settings
    PythonOption django.root /mysite
    PythonPath "['/root/djangoprojects/', '/root/djangoprojects/mysite','/root/djangoprojects/mysite/polls', '/var/www'] + sys.path"
    PythonDebug On
&lt;/Location&gt;
</snippet></ROW><ROW><id>1216700</id><snippet>&gt;&gt;&gt; print hashlib.__doc__
</snippet></ROW><ROW><id>1216700</id><snippet>&gt;&gt;&gt; print(hashlib.__doc__)
</snippet></ROW><ROW><id>1216902</id><snippet>&lt;bs&gt;&lt;bs&gt;&lt;bs&gt;&lt;bs&gt;&lt;bs&gt;</snippet></ROW><ROW><id>1216920</id><snippet>class Physician(Model):
   ...
   def sorted_patients(self):
      return self.patients.order_by('bed__room__unit',
                                    'bed__room__order',
                                    'bed__order')
</snippet></ROW><ROW><id>1216920</id><snippet>physician.sorted_patients</snippet></ROW><ROW><id>1216920</id><snippet>physician.patients</snippet></ROW><ROW><id>1216920</id><snippet>notes</snippet></ROW><ROW><id>1216920</id><snippet>class NoteType:
   ...
   def notes(self):
      return &lt;calculate note set&gt;
</snippet></ROW><ROW><id>1216920</id><snippet>{% for note_type in note_types %}
   &lt;div&gt;&lt;h3&gt;{{ note_type }}&lt;/h3&gt;&lt;/div&gt;
   {% for note in note_type.notes %}
      &lt;p&gt;{{ note }}&lt;/p&gt;
   {% endfor %}
   &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>1217269</id><snippet>&gt;&gt;&gt; sorted(myDict.items(), key=lambda e: e[1][2])
[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]
</snippet></ROW><ROW><id>1217269</id><snippet>key</snippet></ROW><ROW><id>1217269</id><snippet>sorted</snippet></ROW><ROW><id>1217269</id><snippet>&gt;&gt;&gt; for key, value in sorted(myDict.items(), key=lambda e: e[1][2]):
...   print key, value
... 
item2 [8, 2, 3]
item1 [7, 1, 9]
item3 [9, 3, 11]
</snippet></ROW><ROW><id>1217883</id><snippet>bisect.insort</snippet></ROW><ROW><id>1217883</id><snippet>$ python -mtimeit -s'import random, bisect; x=range(20)' 'y=list(x); bisect.insort(y, 22*random.random())'
1000000 loops, best of 3: 1.99 usec per loop
</snippet></ROW><ROW><id>1217883</id><snippet>$ python -mtimeit -s'import random, bisect; x=range(20)' 'y=list(x); y.append(22*random.random()); y.sort()'
100000 loops, best of 3: 2.78 usec per loop
</snippet></ROW><ROW><id>1217883</id><snippet>bisect</snippet></ROW><ROW><id>1217883</id><snippet>__cmp__</snippet></ROW><ROW><id>1217883</id><snippet>__le__</snippet></ROW><ROW><id>1217935</id><snippet>ModelAdmin.save_model(self, request, obj, form, change)</snippet></ROW><ROW><id>1217935</id><snippet>ModelAdmin</snippet></ROW><ROW><id>1217935</id><snippet>change</snippet></ROW><ROW><id>1217935</id><snippet>ModelAdmin.add_view(self, request, form_url='', extra_context=None)</snippet></ROW><ROW><id>1218086</id><snippet>var orders = from c in customers
             where c.Region == "WA"
             from o in c.Orders
             where o.OrderDate &gt;= cutoffDate
             select new {c.CustomerID, o.OrderID};
</snippet></ROW><ROW><id>1218086</id><snippet>orders = ( (c.customer_id, o.order_id)
           for c in customers if c.region == 'WA'
           for o in c.orders if o.date &gt;= cutoff_date)
</snippet></ROW><ROW><id>1218102</id><snippet>display.flip()</snippet></ROW><ROW><id>1218102</id><snippet>display</snippet></ROW><ROW><id>1218102</id><snippet>HWSURFACE</snippet></ROW><ROW><id>1218102</id><snippet>DOUBLEBUF</snippet></ROW><ROW><id>1218102</id><snippet>display.flip()</snippet></ROW><ROW><id>1218426</id><snippet>[easy_install]

# i don't like having zipped files.
zip_ok = 0
</snippet></ROW><ROW><id>1218627</id><snippet>  %% Main Sizer
  wxSizer:add(MainSizer, LeftPanel, [{proportion,0},{border, 2}, {flag,?wxEXPAND bor ?wxALL}]),
  wxSizer:add(MainSizer, RightPanel, [{proportion,1},{border, 2}, {flag,?wxEXPAND bor ?wxTOP bor ?wxRIGHT bor ?wxBOTTOM}]),
</snippet></ROW><ROW><id>1218742</id><snippet>__radd__</snippet></ROW><ROW><id>1218742</id><snippet>class T:
    def __init__(self,x):
    	self.x = x
    def __radd__(self, other):
    	return other + self.x

test = (T(1),T(2),T(3),200)
print sum(test)
</snippet></ROW><ROW><id>1218810</id><snippet>&gt;&gt;&gt; seg_length = 3
&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; [a[x:x+seg_length] for x in range(0,len(a),seg_length)]
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</snippet></ROW><ROW><id>1218945</id><snippet>top100 = heapq.nlargest(100, iterable [,key])
</snippet></ROW><ROW><id>1218951</id><snippet>from cStringIO import StringIO
import sys

old_stdout = sys.stdout
sys.stdout = mystdout = StringIO()

# blah blah lots of code ...

sys.stdout = old_stdout

# examine mystdout.getvalue()
</snippet></ROW><ROW><id>1219166</id><snippet>virtualenv</snippet></ROW><ROW><id>1219406</id><snippet>def data_file(fname):
    """Return the path to a data file of ours."""
    return os.path.join(os.path.split(__file__)[0], fname)
</snippet></ROW><ROW><id>1219742</id><snippet>{us.store('&lt;a href="http://www.google.com" rel="nofollow"&gt;http://www.google.com&lt;/a&gt;')}</snippet></ROW><ROW><id>1219742</id><snippet>{us}</snippet></ROW><ROW><id>1219742</id><snippet>{us.hasnext()}</snippet></ROW><ROW><id>1219742</id><snippet>{q.get_nowait()}</snippet></ROW><ROW><id>1219742</id><snippet>{threading}</snippet></ROW><ROW><id>1219754</id><snippet>&gt;&gt;&gt; ",".join(('foo', 'bar', 'baz'))
'foo,bar,baz'
</snippet></ROW><ROW><id>1219754</id><snippet>myString = myString + line
</snippet></ROW><ROW><id>1219754</id><snippet>fileIN = open("testdata.txt", "r")
myString = fileIN.read()
</snippet></ROW><ROW><id>1219754</id><snippet>for mychar in bigString:
    ... do your stuff ...
</snippet></ROW><ROW><id>1219754</id><snippet>checked = {}
...
if not checked.has_key(myChar):
    checked[myChar] = True
    ...
</snippet></ROW><ROW><id>1220642</id><snippet>iter = xrange(3).__iter__()

iter.next() # this pops 0

for i in iter:
  print i

1
2
</snippet></ROW><ROW><id>1220664</id><snippet>authkit.cookie.params.httponly = true
</snippet></ROW><ROW><id>1220664</id><snippet>Cookie.SimpleCookie</snippet></ROW><ROW><id>1220664</id><snippet>authkit.cookie.params.</snippet></ROW><ROW><id>1220664</id><snippet>httponly</snippet></ROW><ROW><id>1220664</id><snippet>SimpleCookie</snippet></ROW><ROW><id>1220895</id><snippet>import datetime

a = datetime.date(2009, 1, 1)
b = datetime.date(2009, 7, 1)
one_day = datetime.timedelta(1)

day = a

while day &lt;= b:
    # do important stuff
    day += one_day
</snippet></ROW><ROW><id>1221155</id><snippet>process.ExitCode
</snippet></ROW><ROW><id>1221218</id><snippet>&gt;&gt;&gt; from matplotlib import *
&gt;&gt;&gt; plot(xrange(10))
&gt;&gt;&gt; yticks(xrange(10), rotation='vertical')
</snippet></ROW><ROW><id>1221218</id><snippet>rotation='vertical'</snippet></ROW><ROW><id>1221359</id><snippet>#get the row with maximum number of columns
maxrowlen = 0
maxrowkey = ""
for timesid in d.keys():
    if len(timesid.keys()) &gt; maxrowlen:
         maxrowlen = len(timesid.keys())
         maxrowkey = timesid
maxrowcols = sorted(d[maxrowkey].keys())

# prepare the writing
cell_format = "%10r"    # or whatever suits your data

# create the output string
lines = []
for timesid in d.keys(): # go through all times
    line = ""
    for col in maxrowcols:  # go through the standard columns
         colstr = ""
         if col in d[timesid].keys():   # create an entry for each standard column
             colstr += cell_format % d[timesid][col]  # either from actual data
         else:
             colstr += cell_format % ""                      # or blanks
         line += colstr
    lines.append(line)

text = "\n".join(lines)
</snippet></ROW><ROW><id>1221802</id><snippet>s = set(e[1] for e in l)
</snippet></ROW><ROW><id>1221896</id><snippet>#!/usr/local/env python

import pygtk
pygtk.require('2.0')
import gtk

def motion_cb(wid, context, x, y, time):
    l.set_text('\n'.join([str(t) for t in context.targets]))
    context.drag_status(gtk.gdk.ACTION_COPY, time)
    # Returning True which means "I accept this data".
    return True

def drop_cb(wid, context, x, y, time):
    # Some data was dropped, get the data
    wid.drag_get_data(context, context.targets[-1], time)
    return True

def got_data_cb(wid, context, x, y, data, info, time):
    # Got data.
    l.set_text(data.get_text())
    context.finish(True, False, time)

w = gtk.Window()
w.set_size_request(200, 150)
w.drag_dest_set(0, [], 0)
w.connect('drag_motion', motion_cb)
w.connect('drag_drop', drop_cb)
w.connect('drag_data_received', got_data_cb)
w.connect('destroy', lambda w: gtk.main_quit())
l = gtk.Label()
w.add(l)
w.show_all()

gtk.main()
</snippet></ROW><ROW><id>1222717</id><snippet>[f(x) for x in list]
</snippet></ROW><ROW><id>1222717</id><snippet>(f(x) for x in list)
</snippet></ROW><ROW><id>1222717</id><snippet>def myFunction(x):
    print("called for: " + str(x))
    return x * x

originalList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
limit = 10
result =   [C2 for C2 in ((myFunction(C), C) for C in originalList) if C2[0] &lt; limit]
# result = [C2 for C2 in [(myFunction(C), C) for C in originalList] if C2[0] &lt; limit]
</snippet></ROW><ROW><id>1222717</id><snippet>unfiltered = [ (myFunction(C),C) for C in originalList ]
             ^                                         ^
             +---------- change these to (..) ---------+
                                 |
                                 v
unfiltered = ( (myFunction(C),C) for C in originalList )
</snippet></ROW><ROW><id>1223140</id><snippet>def dynProgSolution(text, probs):
  probUpTo = [1]
  for i in range(1, len(text)+1):
    cur = sum(v*probs[text[k:i]] for k, v in enumerate(probUpTo))
    probUpTo.append(cur)
  return probUpTo[-1]

print dynProgSolution(
  'abc',
  {'a': 0.1, 'b': 0.2, 'c': 0.3,
   'ab': 0.4, 'bc': 0.5, 'abc': 0.6}
  )
</snippet></ROW><ROW><id>1223140</id><snippet>probs['a']*probs['b']</snippet></ROW><ROW><id>1223140</id><snippet>probs['ab']</snippet></ROW><ROW><id>1223303</id><snippet>import os
os.write(fd, os.linesep)
</snippet></ROW><ROW><id>1223568</id><snippet>stdout_handel = os.popen("/var/www/nsmweb/jre1.6.0_14/bin/java -jar /var/www/nsmweb/sla.jar -t %s grep -v DAN")  % data
</snippet></ROW><ROW><id>1223568</id><snippet>stdout_handel = os.popen("/var/www/nsmweb/jre1.6.0_14/bin/java -jar /var/www/nsmweb/sla.jar -t %s grep -v DAN"  % data )
</snippet></ROW><ROW><id>1223981</id><snippet>import markdown
mode = "remove" # or "replace" or "escape"
md = markdown.Markdown(safe_mode=mode)
html = md.convert(text)
</snippet></ROW><ROW><id>1223982</id><snippet>import csv
source= csv.reader( open("some file","rb") )
dest= csv.writer( open("another file","wb") )
for row in source:
    result= row[:6] + [ row[6]+row[7]+row[8] ] + row[9:]
    dest.writerow( result )
</snippet></ROW><ROW><id>1223982</id><snippet>&gt;&gt;&gt; data=''',,Joe,Smith,New Haven,CT,"Moved from Portland, CT",,goo,
... '''.splitlines()
&gt;&gt;&gt; rdr= csv.reader( data )
&gt;&gt;&gt; row= rdr.next()
&gt;&gt;&gt; row
['', '', 'Joe', 'Smith', 'New Haven', 'CT', 'Moved from Portland, CT', '', 'goo', '' ]
&gt;&gt;&gt; row[:6] + [ row[6]+row[7]+row[8] ] +  row[9:]
['', '', 'Joe', 'Smith', 'New Haven', 'CT', 'Moved from Portland, CTgoo', '']
</snippet></ROW><ROW><id>1224760</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>1224760</id><snippet>from .email import ...</snippet></ROW><ROW><id>1224807</id><snippet>if request.method == 'POST':
    form = SomeForm(request.POST)
    if form.is_valid():
        model.attr = form.cleaned_data['attr']
        model.attr2 = form.cleaned_data['attr2']
        model.save()
else:
    form = SomeForm()
return render_to_response('page.html', {'form': form, })
</snippet></ROW><ROW><id>1224807</id><snippet>&lt;form method="POST"&gt;
{{ form.as_p }}
&lt;input type="submit"/&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>1224911</id><snippet>raise</snippet></ROW><ROW><id>1224911</id><snippet>try</snippet></ROW><ROW><id>1224911</id><snippet>except</snippet></ROW><ROW><id>1224911</id><snippet>import sys

sentinel = object()

class FakeLoader(object):
  def find_module(self, fullname, path=None):
    return self
  def load_module(*_):
    return sentinel

def fakeHook(apath):
  if apath == 'GIVINGUP!!!':
    return FakeLoader()
  raise ImportError

sys.path.append('GIVINGUP!!!')
sys.path_hooks.append(fakeHook)

def isModuleOK(modulename):
  result = __import__(modulename)
  return result is not sentinel

print 'sys', isModuleOK('sys')
print 'Cookie', isModuleOK('Cookie')
print 'nonexistent', isModuleOK('nonexistent')
</snippet></ROW><ROW><id>1224911</id><snippet>sys True
Cookie True
nonexistent False
</snippet></ROW><ROW><id>1224911</id><snippet>try</snippet></ROW><ROW><id>1224911</id><snippet>except</snippet></ROW><ROW><id>1224967</id><snippet>all</snippet></ROW><ROW><id>1224967</id><snippet>try</snippet></ROW><ROW><id>1224967</id><snippet>except AttributeError, e:</snippet></ROW><ROW><id>1224967</id><snippet>groups = Group.all()</snippet></ROW><ROW><id>1224967</id><snippet>except</snippet></ROW><ROW><id>1224967</id><snippet>Group</snippet></ROW><ROW><id>1224967</id><snippet>__bases__</snippet></ROW><ROW><id>1224967</id><snippet>dir()</snippet></ROW><ROW><id>1224967</id><snippet>Group</snippet></ROW><ROW><id>1224977</id><snippet>lambda</snippet></ROW><ROW><id>1224977</id><snippet>name = property(lambda self: self.__name, 
                lambda self, value: setattr(self, 
                                            '_X__name',
                                            self.process_value(value)))
</snippet></ROW><ROW><id>1224977</id><snippet>setattr</snippet></ROW><ROW><id>1224977</id><snippet>lambda</snippet></ROW><ROW><id>1224977</id><snippet>lambda</snippet></ROW><ROW><id>1224977</id><snippet>__name</snippet></ROW><ROW><id>1224977</id><snippet>_X__name</snippet></ROW><ROW><id>1225522</id><snippet>
from a.b import c as BAR

BAR.foo()
</snippet></ROW><ROW><id>1225656</id><snippet>incoming = 'arbit'
result = '{0} hello world {0} hello world {0}'.format(incoming)
</snippet></ROW><ROW><id>1226523</id><snippet>{% for email in Emails %}
email,
{% endfor %}
</snippet></ROW><ROW><id>1227325</id><snippet>class Test(object):

    def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2

    def __str__(self):
        return str(self.__dict__)

    def __eq__(self, other): 
        return self.__dict__ == other.__dict__

t1 = Test("foo", 42)
t2 = Test("foo", 42)
t3 = Test("bar", 42)

print t1, t2, t3
print t1 == t2
print t2 == t3
</snippet></ROW><ROW><id>1227325</id><snippet>{'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'bar'}
True
False
</snippet></ROW><ROW><id>1227325</id><snippet>__cmp__</snippet></ROW><ROW><id>1227325</id><snippet>__eq__</snippet></ROW><ROW><id>1228204</id><snippet>_fields_</snippet></ROW><ROW><id>1228204</id><snippet>class EthercatDatagram(Structure)
  _fields_ = [...]

EthercatDatagram._fields_.append(("next_command", EthercatDatagram))
</snippet></ROW><ROW><id>1228569</id><snippet>if __name__ == "__main__":
    sys.exit(main())
</snippet></ROW><ROW><id>1228569</id><snippet>sys.exit</snippet></ROW><ROW><id>1228597</id><snippet>&gt;&gt;&gt; s = list("Hello zorld")
&gt;&gt;&gt; s
['H', 'e', 'l', 'l', 'o', ' ', 'z', 'o', 'r', 'l', 'd']
&gt;&gt;&gt; s[6] = 'W'
&gt;&gt;&gt; s
['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']
&gt;&gt;&gt; "".join(s)
'Hello World'
</snippet></ROW><ROW><id>1228643</id><snippet>1 == 1.0</snippet></ROW><ROW><id>1228643</id><snippet>hash(1) != hash(1.0)</snippet></ROW><ROW><id>1228643</id><snippet>x == y</snippet></ROW><ROW><id>1228643</id><snippet>hash(x) == hash(y)</snippet></ROW><ROW><id>1228643</id><snippet>x</snippet></ROW><ROW><id>1228643</id><snippet>y</snippet></ROW><ROW><id>1228643</id><snippet>d</snippet></ROW><ROW><id>1228643</id><snippet>class W(object):

  def __init__(self, x):
    self.x = x
    self.t = type(x)

  def __eq__(self, other):
    t = type(other)
    if t != type(self):
      return False
    return self.x == other.x and self.t == other.t

  def __hash__(self):
    return hash(self.x) ^ hash(self.t)

  def __getattr__(self, name):
    return getattr(self.x, name)
</snippet></ROW><ROW><id>1228643</id><snippet>__cmp__</snippet></ROW><ROW><id>1228643</id><snippet>__le__</snippet></ROW><ROW><id>1228643</id><snippet>__repr__</snippet></ROW><ROW><id>1228643</id><snippet>W(1)</snippet></ROW><ROW><id>1228643</id><snippet>1</snippet></ROW><ROW><id>1228643</id><snippet>W(1.0)</snippet></ROW><ROW><id>1228643</id><snippet>1.0</snippet></ROW><ROW><id>1228952</id><snippet>self.sendLine(pickle.dumps({"size":filesize, 'content': contents[:20]}))
</snippet></ROW><ROW><id>1228963</id><snippet>ClientThread(arg1, arg2, kwarg1="three times!").start()
</snippet></ROW><ROW><id>1228963</id><snippet>run</snippet></ROW><ROW><id>1228963</id><snippet>run(arg1, arg2, kwarg1="three times!")
</snippet></ROW><ROW><id>1228963</id><snippet>start()</snippet></ROW><ROW><id>1228963</id><snippet>ClientThread</snippet></ROW><ROW><id>1228963</id><snippet>myThread.setMyAttribute('new value')
</snippet></ROW><ROW><id>1228963</id><snippet>Lock</snippet></ROW><ROW><id>1228963</id><snippet>run</snippet></ROW><ROW><id>1228963</id><snippet>run(self):
    localVar = globalVar # only for immutable types
    localList = globalList[:] # copy of a list
    localDict = globalDict.copy() # Warning! Shallow copy only!
</snippet></ROW><ROW><id>1229314</id><snippet>import struct

def getData():
    data = []
    for i in range( 0, 1024 ):
        data.append( 0.25 * math.sin( math.radians( i ) ) )
    return struct.pack('f'*len(data), *data)
</snippet></ROW><ROW><id>1229481</id><snippet>print</snippet></ROW><ROW><id>1229481</id><snippet>&gt;&gt;&gt; print u'\u3053'
こ
</snippet></ROW><ROW><id>1229481</id><snippet>print a.encode("utf-8")</snippet></ROW><ROW><id>1229490</id><snippet>print packet.data.header[0]
</snippet></ROW><ROW><id>1229667</id><snippet>import optparse

def optional_arg(arg_default):
    def func(option,opt_str,value,parser):
        if parser.rargs and not parser.rargs[0].startswith('-'):
            val=parser.rargs[0]
            parser.rargs.pop(0)
        else:
            val=arg_default
        setattr(parser.values,option.dest,val)
    return func

def main(args):
    parser=optparse.OptionParser()
    parser.add_option('--foo',action='callback',callback=optional_arg('empty'),dest='foo')
    parser.add_option('--file',action='store_true',default=False)
    return parser.parse_args(args)

if __name__=='__main__':
    import sys
    print main(sys.argv)
</snippet></ROW><ROW><id>1229667</id><snippet># python parser.py
(&lt;Values at 0x8e42d8: {'foo': None, 'file': False}&gt;, [])

# python parser.py --foo
(&lt;Values at 0x8e42d8: {'foo': 'empty', 'file': False}&gt;, [])

# python parser.py --foo bar
(&lt;Values at 0x8e42d8: {'foo': 'bar', 'file': False}&gt;, [])
</snippet></ROW><ROW><id>1229823</id><snippet>wx.SafeYield</snippet></ROW><ROW><id>1229823</id><snippet>import time
import wx


class Loader(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer)
        self.btn1 = wx.Button(self, label="Option 1")
        self.btn2 = wx.Button(self, label="Option 2")
        sizer.Add(self.btn1, flag=wx.EXPAND)
        sizer.Add(self.btn2, flag=wx.EXPAND)
        self.btn1.Bind(wx.EVT_BUTTON, self.OnOption1)
        self.btn2.Bind(
            wx.EVT_BUTTON, lambda e: wx.MessageBox("There is no option 2")
        )

    def OnOption1(self, event):
        self.btn1.Hide()
        self.btn2.Hide()
        self.Sizer.Add(
            wx.StaticText(self, label="Loading Option 1..."),
            1, wx.ALL | wx.EXPAND, 15
        )
        self.Layout()
        self.Update()
        AppFrame(self).Show()

class AppFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)
        time.sleep(3)
        parent.Hide()

        # the top window (Loader) is hidden so the app needs to be told to exit
        # when this window is closed
        self.Bind(wx.EVT_CLOSE, lambda e: wx.GetApp().ExitMainLoop())


app = wx.PySimpleApp()
app.TopWindow = Loader()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>1230332</id><snippet>string = "number is %d" % 1
</snippet></ROW><ROW><id>1230332</id><snippet>string = "float is %.3f" % 3.1425
</snippet></ROW><ROW><id>1230332</id><snippet>string = "number %d and float %f" % (1,3.1415)
string = "number %(mynum)d and float %(myfloat)f" % {'mynum':1,'myfloat':3.1415}
</snippet></ROW><ROW><id>1230459</id><snippet># Python 2.6.2
&gt;&gt;&gt; import json
&gt;&gt;&gt; s = r'{"a":{"a1":"{\"foo\":\"bar\",\"foo1\":\"bar1\"}"}}'
&gt;&gt;&gt; json.loads(s)
{u'a': {u'a1': u'{"foo":"bar","foo1":"bar1"}'}}
</snippet></ROW><ROW><id>1230492</id><snippet>class PreviousURLMiddleware(object):
    def process_response(request, response):
        if response.status_code == 200:
            request.session['previous_url'] = request.get_full_url()
        return response
</snippet></ROW><ROW><id>1230829</id><snippet>from PyQt4.QtCore import QObject

def makec(base):
  class X( base ):
      def __init__(self):
          self.__x = 10
      def get_x(self):
          print 'getting',
          return self.__x
      def set_x(self, x):
          print 'setting', x
          self.__x = x
      x = property(get_x, set_x)

  print 'made class of mcl', type(X), issubclass(type(X), type)
  return X

class old: pass
for base in (QObject, old):
  X = makec(base)
  x = X()
  print x.x # Should be 10
  x.x = 30
  print x.x # Should be 30
</snippet></ROW><ROW><id>1230829</id><snippet>made class of mcl &lt;type 'PyQt4.QtCore.pyqtWrapperType'&gt; True
getting 10
setting 30
getting 30
made class of mcl &lt;type 'classobj'&gt; False
getting 10
30
</snippet></ROW><ROW><id>1230829</id><snippet>classobj</snippet></ROW><ROW><id>1230829</id><snippet>x.x</snippet></ROW><ROW><id>1230829</id><snippet>x.x</snippet></ROW><ROW><id>1231136</id><snippet>import poplib
from email import parser

pop_conn = poplib.POP3_SSL('pop.gmail.com')
pop_conn.user('username')
pop_conn.pass_('password')
#Get messages from server:
messages = [pop_conn.retr(i) for i in range(1, len(pop_conn.list()[1]) + 1)]
# Concat message pieces:
messages = ["\n".join(mssg[1]) for mssg in messages]
#Parse message intom an email object:
messages = [parser.Parser().parsestr(mssg) for mssg in messages]
for message in messages:
    print message['subject']
pop_conn.quit()
</snippet></ROW><ROW><id>1231341</id><snippet>#!/usr/bin/python

import datetime
import sys, os, time, string

a = datetime.date(2009, 1, 1)
b = datetime.date(2009, 2, 1)
one_day = datetime.timedelta(1)

day = a

while day &lt;= b:
    print "Running query for \"" + str(day) + "\""

    sql="""SELECT
    d.Date,  
    SUM(d.Revenue)
    FROM Table d  
    WHERE d.Date = '%s'  
    AND d.Id = %s  
    GROUP BY d.Date  
    """ % (str(day), str(2840))

    os.system('mysql -h -sN -u  -p -e "%s" &gt; FileName-%s.txt db' % (sql, str(day)))
    day += one_day
</snippet></ROW><ROW><id>1231708</id><snippet>Update</snippet></ROW><ROW><id>1231833</id><snippet>pos_1 = 234
pos_n = 12890
min_width = len(str(pos_n))

raw_str = '... from %0*d to %0*d ...' % (min_width, pos_1, min_width, pos_n)
</snippet></ROW><ROW><id>1232055</id><snippet>def get_decorator(arg1):
    def my_decorator(function):
        print "get_decorator argument: %s" % arg1
        return function
    return my_decorator

class Foo(object):
    def __init__(self, arg1):
        self.var1 = arg1
        self.method1 = get_decorator(self.var1)(self.method1)

    def method1(self):
        print "method1"

foo = Foo("abc")
foo.method1()
</snippet></ROW><ROW><id>1232055</id><snippet>wrapper</snippet></ROW><ROW><id>1232055</id><snippet>decorator1</snippet></ROW><ROW><id>1232221</id><snippet>u = Table1.objects.get(id=1)
print u.id
print u.user.user_name
</snippet></ROW><ROW><id>1232542</id><snippet>def iterate_over_all():
    for name in __all__:
        value = globals()[name]
        yield value # or do whatever with it
</snippet></ROW><ROW><id>1232567</id><snippet>from django.core.files import File

f = File(open(os.path.join(IMPORT_DIR, 'fotos', photo), 'r'))
p = Photo(name=f.name, image=f, parent=supply.supply_ptr)
name = str(uuid1()) + os.path.splitext(f.name)[1]
p.image.save(name, f)
p.save()
</snippet></ROW><ROW><id>1232938</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; c = [7,8,9]
&gt;&gt;&gt; dict(zip(a, zip(b, c)))
{1: (4, 7), 2: (5, 8), 3: (6, 9)}
</snippet></ROW><ROW><id>1232938</id><snippet>zip</snippet></ROW><ROW><id>1232938</id><snippet>itertools.izip()</snippet></ROW><ROW><id>1232938</id><snippet>izip</snippet></ROW><ROW><id>1232938</id><snippet>zip</snippet></ROW><ROW><id>1233509</id><snippet>map(multilambda x:
      y=x+1
      return y
   , [1,2,3])
</snippet></ROW><ROW><id>1233509</id><snippet>(y, [1,2,3])</snippet></ROW><ROW><id>1233509</id><snippet>y</snippet></ROW><ROW><id>1233551</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>1233551</id><snippet>key1=val1&amp;key2=val2</snippet></ROW><ROW><id>1233628</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; l= [(1,4),(2,4),(3,4),(4,15),(5,15),(6,23),(7,23),(8,23),(9,15),(10,23),(11,15),(12,15)]
&gt;&gt;&gt; d= defaultdict( list )
&gt;&gt;&gt; for v, k in l:
...     d[k].append(v)
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {23: [6, 7, 8, 10], 4: [1, 2, 3], 15: [4, 5, 9, 11, 12]})
&gt;&gt;&gt; [ {k:d[k]} for k in sorted(d) ]
[{4: [1, 2, 3]}, {15: [4, 5, 9, 11, 12]}, {23: [6, 7, 8, 10]}]
</snippet></ROW><ROW><id>1233737</id><snippet>{% photo.image %}
</snippet></ROW><ROW><id>1233737</id><snippet>{{ photo.image }}
</snippet></ROW><ROW><id>1233737</id><snippet>{% %}</snippet></ROW><ROW><id>1233737</id><snippet>{{ }}</snippet></ROW><ROW><id>1233737</id><snippet>Photo</snippet></ROW><ROW><id>1233737</id><snippet>Recipe</snippet></ROW><ROW><id>1233737</id><snippet>Recipe</snippet></ROW><ROW><id>1233737</id><snippet>def details(request, slug='0'):
    p = get_object_or_404(Recipe, slug=slug)
    photos = p.photo_set.all()
</snippet></ROW><ROW><id>1233763</id><snippet>.execute()</snippet></ROW><ROW><id>1233763</id><snippet>.get()</snippet></ROW><ROW><id>1233763</id><snippet>.put</snippet></ROW><ROW><id>1233807</id><snippet>from PIL import Image

img = Image.open('1.png')
png_info = img.info
img.save('2.png', **png_info)
</snippet></ROW><ROW><id>1233807</id><snippet>{'transparency': 7, 'gamma': 0.45454, 'dpi': (72, 72)}
</snippet></ROW><ROW><id>1234122</id><snippet>from PyQt4 import QtCore, QtGui

import os, sys

class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)  
        self.listWidget = QtGui.QListWidget(None)
        self.setCentralWidget(self.listWidget) 

class MyWidget(QtGui.QWidget):
   def __init__(self):
        super(MyWidget, self).__init__()

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    mainWin = MainWindow()
    mainWin.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>1234122</id><snippet>print QtCore.PYQT_VERSION_STR
</snippet></ROW><ROW><id>1234620</id><snippet>centroids = [prefs[random.choice(users)] for i in range(k)]
</snippet></ROW><ROW><id>1234620</id><snippet>centroids = [prefs[u] for random.sample(users, k)]
</snippet></ROW><ROW><id>1234620</id><snippet>simple_pearson</snippet></ROW><ROW><id>1234620</id><snippet>sim_func</snippet></ROW><ROW><id>1234620</id><snippet>bestmatch=(0,0)</snippet></ROW><ROW><id>1234620</id><snippet>if d &lt; bestmatch[1]:</snippet></ROW><ROW><id>1234620</id><snippet>row[m]</snippet></ROW><ROW><id>1234620</id><snippet>row</snippet></ROW><ROW><id>1234620</id><snippet>m</snippet></ROW><ROW><id>1234620</id><snippet>  row = prefs[user_id]                    
  for m in items:
      if row[m] &gt; 0.0: centroids[i][m]+=(row[m]/len_best)
</snippet></ROW><ROW><id>1234620</id><snippet>prefs</snippet></ROW><ROW><id>1234620</id><snippet>  row = prefs[user_id]                    
  for m in row:
      centroids[i][m]+=(row[m]/len_best)
</snippet></ROW><ROW><id>1234620</id><snippet>row</snippet></ROW><ROW><id>1234620</id><snippet>prefs</snippet></ROW><ROW><id>1234620</id><snippet>row</snippet></ROW><ROW><id>1234620</id><snippet>len_best</snippet></ROW><ROW><id>1234620</id><snippet>row</snippet></ROW><ROW><id>1234705</id><snippet>connection = MySQLdb.Connect(host='**', user='**', passwd='**', db='**')
cursor = connection.cursor()
query = "LOAD DATA INFILE '/path/to/my/file' INTO TABLE sometable FIELDS TERMINATED BY ';' ENCLOSED BY '\"' ESCAPED BY '\\\\'"
cursor.execute( query )
connection.commit()
</snippet></ROW><ROW><id>1235363</id><snippet>
import numpy as np

def cartesian(arrays, out=None):
    """
    Generate a cartesian product of input arrays.

    Parameters
    ----------
    arrays : list of array-like
        1-D arrays to form the cartesian product of.
    out : ndarray
        Array to place the cartesian product in.

    Returns
    -------
    out : ndarray
        2-D array of shape (M, len(arrays)) containing cartesian products
        formed of input arrays.

    Examples
    --------
    &gt;&gt;&gt; cartesian(([1, 2, 3], [4, 5], [6, 7]))
    array([[1, 4, 6],
           [1, 4, 7],
           [1, 5, 6],
           [1, 5, 7],
           [2, 4, 6],
           [2, 4, 7],
           [2, 5, 6],
           [2, 5, 7],
           [3, 4, 6],
           [3, 4, 7],
           [3, 5, 6],
           [3, 5, 7]])

    """

    arrays = [np.asarray(x) for x in arrays]
    dtype = arrays[0].dtype

    n = np.prod([x.size for x in arrays])
    if out is None:
        out = np.zeros([n, len(arrays)], dtype=dtype)

    m = n / arrays[0].size
    out[:,0] = np.repeat(arrays[0], m)
    if arrays[1:]:
        cartesian(arrays[1:], out=out[0:m,1:])
        for j in xrange(1, arrays[0].size):
            out[j*m:(j+1)*m,1:] = out[0:m,1:]
    return out
</snippet></ROW><ROW><id>1235625</id><snippet>import codecs
buildLog = codecs.open(sys.argv[1], "r", "utf-16").readlines()
</snippet></ROW><ROW><id>1235625</id><snippet>print repr(line)
</snippet></ROW><ROW><id>1235631</id><snippet>thelist[:] = [d for d in thelist if d.get('id') != 2]
</snippet></ROW><ROW><id>1235631</id><snippet>$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); thelist[:] = [d for d in thelist if d.get('id') != 2]"
10000 loops, best of 3: 82.3 usec per loop
</snippet></ROW><ROW><id>1235631</id><snippet>$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); where=(i for i,d in enumerate(thelist) if d.get('id')==2).next(); del thelist[where]"
10000 loops, best of 3: 72.8 usec per loop
</snippet></ROW><ROW><id>1235631</id><snippet>next</snippet></ROW><ROW><id>1235631</id><snippet>.next</snippet></ROW><ROW><id>1235631</id><snippet>$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(33)]*3; import random" "thelist=list(lod); where=[i for i,d in enumerate(thelist) if d.get('id')==2]; where.reverse()" "for i in where: del thelist[i]"
10000 loops, best of 3: 23.7 usec per loop
</snippet></ROW><ROW><id>1235631</id><snippet>$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(33)]*3; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get('id') != 2]"
10000 loops, best of 3: 23.8 usec per loop
</snippet></ROW><ROW><id>1235631</id><snippet>$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(33)]*133; import random" "thelist=list(lod); where=[i for i,d in enumerate(thelist) if d.get('id')==2]; where.reverse()" "for i in where: del thelist[i]"
1000 loops, best of 3: 1.11 msec per loop
$ python -mtimeit -s"lod=[{'id':i, 'name':'nam%s'%i} for i in range(33)]*133; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get('id') != 2]"
1000 loops, best of 3: 998 usec per loop
</snippet></ROW><ROW><id>1235801</id><snippet>new</snippet></ROW><ROW><id>1235801</id><snippet>import inspect
import new

def f():
    x, y = 1, 2
    def get():
        print 'get'
    def post():
        print 'post'

for c in f.func_code.co_consts:
    if inspect.iscode(c):
        f = new.function(c, globals())
        print f # Here you have your function :].
</snippet></ROW><ROW><id>1236111</id><snippet>--dist-dir</snippet></ROW><ROW><id>1236175</id><snippet>os.symlink</snippet></ROW><ROW><id>1236327</id><snippet>print event</snippet></ROW><ROW><id>1236327</id><snippet>import wx

class GaugeFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Gauge example",
                          size=(350, 150))
        panel = wx.Panel(self, -1)
        self.count = 0
        self.gauge = wx.Gauge(panel, -1, 50, (20, 50), (250, 25))
        self.update_gauge()

    def update_gauge(self):
        self.count = self.count + 1
        if self.count &gt;= 50:
            self.count = 0
        self.gauge.SetValue(self.count)
        wx.CallLater(100, self.update_gauge)

app = wx.PySimpleApp()
GaugeFrame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>1236347</id><snippet># Mount pypi repositories into URI space
Alias /pypi   /var/pypi

# /pypi/dev: Redirect for unknown packages (fallback to pypi)
RewriteCond   /var/pypi/dev/$1 !-d
RewriteCond   /var/pypi/dev/$1 !-f
RewriteRule   ^/pypi/dev/([^/]+)/?$ http://pypi.python.org/pypi/$1/ [R,L]

RewriteCond   /var/pypi/dev/$1/$2 !-f
RewriteRule   ^/pypi/dev/([^/]+)/([^/]+)$ http://pypi.python.org/pypi/$1/$2 [R,L]

# /pypi/stable: Redirect for unknown packages (fallback to pypi)
RewriteCond   /var/pypi/stable/$1 !-d
RewriteCond   /var/pypi/stable/$1 !-f
RewriteRule   ^/pypi/stable/([^/]+)/?$ http://pypi.python.org/pypi/$1/ [R,L]

RewriteCond   /var/pypi/stable/$1/$2 !-f
RewriteRule   ^/pypi/stable/([^/]+)/([^/]+)$ http://pypi.python.org/pypi/$1/$2 [R,L]
</snippet></ROW><ROW><id>1236382</id><snippet>__del__</snippet></ROW><ROW><id>1236579</id><snippet>TK.Tk()
</snippet></ROW><ROW><id>1236716</id><snippet>{{ fruits | joinby:", " }}</snippet></ROW><ROW><id>1236716</id><snippet>joinby</snippet></ROW><ROW><id>1236716</id><snippet>def joinby(value, arg):
    return arg.join(value)
</snippet></ROW><ROW><id>1236808</id><snippet># Always prints 0-9 in order
a_list = [0,1,2,3,4,5,6,7,8,9]
for x in a_list:
    print x

# May or may not print 0-9 in order. Implementation dependent.
a_dict = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}
for x in a_dict:
    print x
</snippet></ROW><ROW><id>1236808</id><snippet>for &lt;element&gt; in &lt;iterable&gt;</snippet></ROW><ROW><id>1236808</id><snippet>iterable</snippet></ROW><ROW><id>1236808</id><snippet>next()</snippet></ROW><ROW><id>1236808</id><snippet>for..in</snippet></ROW><ROW><id>1236941</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1236941</id><snippet>import itertools

dates = [
   (1,'2009-01-01 10:15:23'),
   (2,'2009-01-01 13:21:29'),
   (3,'2009-01-02 01:03:13'),
   (4,'2009-01-03 12:20:19'),
   (5,'2009-01-03 13:01:06'),
]

for key,group in itertools.groupby(dates, key=lambda x: x[1][:11]):
   print key
   for element in group:
      print '   ', element
</snippet></ROW><ROW><id>1236941</id><snippet>2009-01-01 
    (1, '2009-01-01 10:15:23')
    (2, '2009-01-01 13:21:29')
2009-01-02 
    (3, '2009-01-02 01:03:13')
2009-01-03 
    (4, '2009-01-03 12:20:19')
    (5, '2009-01-03 13:01:06')
</snippet></ROW><ROW><id>1237087</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; print math.sin.__doc__
sin(x)

Return the sine of x (measured in radians).
</snippet></ROW><ROW><id>1237087</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; print math.sin(math.radians(68))
0.927183854567
</snippet></ROW><ROW><id>1237407</id><snippet>import pdb, sys, traceback
def info(type, value, tb):
    traceback.print_exception(type, value, tb)
    pdb.pm()
sys.excepthook = info
</snippet></ROW><ROW><id>1237407</id><snippet># code snippet, to be included in 'sitecustomize.py'
import sys

def info(type, value, tb):
   if hasattr(sys, 'ps1') or not sys.stderr.isatty():
      # we are in interactive mode or we don't have a tty-like
      # device, so we call the default hook
      sys.__excepthook__(type, value, tb)
   else:
      import traceback, pdb
      # we are NOT in interactive mode, print the exception...
      traceback.print_exception(type, value, tb)
      print
      # ...then start the debugger in post-mortem mode.
      pdb.pm()

sys.excepthook = info
</snippet></ROW><ROW><id>1237407</id><snippet># code snippet, to be included in 'sitecustomize.py'
import sys

def info(type, value, tb):
   if (#hasattr(sys, "ps1") or
       not sys.stderr.isatty() or 
       not sys.stdin.isatty()):
       # stdin or stderr is redirected, just do the normal thing
       original_hook(type, value, tb)
   else:
       # a terminal is attached and stderr is not redirected, debug 
       import traceback, pdb
       traceback.print_exception(type, value, tb)
       print
       pdb.pm()
       #traceback.print_stack()

original_hook = sys.excepthook
if sys.excepthook == sys.__excepthook__:
    # if someone already patched excepthook, let them win
    sys.excepthook = info
</snippet></ROW><ROW><id>1238316</id><snippet>format % values
</snippet></ROW><ROW><id>1238316</id><snippet>format</snippet></ROW><ROW><id>1238316</id><snippet>values</snippet></ROW><ROW><id>1238632</id><snippet>object</snippet></ROW><ROW><id>1238996</id><snippet>import os

if __name__ == "__main__":

    f = open("test", "w")
    f.write("Hello")
    f.close()

    f = open("test", "a+")
    f.seek(0, os.SEEK_SET)
    f.write("Goodbye")
    f.close()
</snippet></ROW><ROW><id>1238996</id><snippet>fseek(stream,0,SEEK_END);
</snippet></ROW><ROW><id>1239015</id><snippet>if</snippet></ROW><ROW><id>1239193</id><snippet>lxml.etree.tostring</snippet></ROW><ROW><id>1239193</id><snippet>def indent(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i
</snippet></ROW><ROW><id>1239252</id><snippet>apply_async(func[, args[, kwds[, callback]]])
</snippet></ROW><ROW><id>1239252</id><snippet>from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=1)              # Start a worker processes.
    result = pool.apply_async(f, [10], callback) # Evaluate "f(10)" asynchronously calling callback when finished.
</snippet></ROW><ROW><id>1239697</id><snippet>import bisect
m[0][:bisect.bisect(m[0],n[0][-1])]
</snippet></ROW><ROW><id>1239722</id><snippet>QNetworkReply.abort()</snippet></ROW><ROW><id>1239782</id><snippet>def comparepeople(p1, p2):
    o1 = p1.lastname, p1.firstname, p1.dob
    o2 = p2.lastname, p2.firstname, p2.dob
    return cmp(o1,o2)
</snippet></ROW><ROW><id>1239782</id><snippet>l.sort(key=lambda p:(p.lastname, p.firstname, p.dob))
</snippet></ROW><ROW><id>1240277</id><snippet>class Foo(object):
    def bar(self):
        # Do something with 'self'

def baz(inst):
    return inst.bar()

Foo.baz = baz
</snippet></ROW><ROW><id>1240277</id><snippet>self</snippet></ROW><ROW><id>1240277</id><snippet>inst</snippet></ROW><ROW><id>1240277</id><snippet>cls</snippet></ROW><ROW><id>1240791</id><snippet>client = Client(url)
result = client.service.Invoke(subm)
</snippet></ROW><ROW><id>1240791</id><snippet>result = client.last_received()
print result
</snippet></ROW><ROW><id>1241170</id><snippet>import copy

x = copy.copy(y)        # make a shallow copy of y
x = copy.deepcopy(y)    # make a deep copy of y
</snippet></ROW><ROW><id>1241609</id><snippet>import gtk

win = gtk.Window()
win.connect("destroy", gtk.main_quit)

btn = gtk.Button("test")

#make a gdk.color for red
map = btn.get_colormap() 
color = map.alloc_color("red")

#copy the current style and replace the background
style = btn.get_style().copy()
style.bg[gtk.STATE_NORMAL] = color

#set the button's style to the one you created
btn.set_style(style)

win.add(btn)
win.show_all()

gtk.main()
</snippet></ROW><ROW><id>1241764</id><snippet>__dict__</snippet></ROW><ROW><id>1241764</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</snippet></ROW><ROW><id>1242020</id><snippet>setup(
    options = {"py2exe": {"dist_dir": os.path.join("..", "foo", "bar")}},
    windows = ["pythonturtle.py"],
)
</snippet></ROW><ROW><id>1242253</id><snippet>for line in infile:
    data = line.rstrip("\n").split("|")
    kind = data[0]
    # start of changes
    if kind == "OBR":
        data[7] += "0000" # check that 7 is correct!
    # end of changes
    outrecord = "|".join(data)
    outfile.write(outrecord + "\n")
</snippet></ROW><ROW><id>1242253</id><snippet>fix_targets = {
    "OBR": [7],
    "XYZ": [1, 42],
    }
</snippet></ROW><ROW><id>1242253</id><snippet>if kind in fix_targets:
    for col_index in fix_targets[kind]:
        data[col_index] += "0000"
</snippet></ROW><ROW><id>1242332</id><snippet>&lt;VirtualHost *:80&gt;
    DocumentRoot /var/www/vtigercrm/
    ErrorLog /var/log/apache2/vtiger.error_log
    CustomLog /var/log/apache2/vtiger.access_log combined
    &lt;Directory /var/www/vtigercrm&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
    &lt;/Directory&gt;
    &lt;Location "/mysite/"&gt;
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE mysite.settings
        PythonOption django.root /mysite
        PythonPath "['/var/www/djangoprojects',] + sys.path"
        PythonDebug On
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>1242467</id><snippet>def stupid():
    global x
    x=False
</snippet></ROW><ROW><id>1242545</id><snippet>    def attach(w,c1,c2,r1,r2):
        eb = gtk.EventBox()
        a = gtk.Alignment(xalign=0.0,yalign=0.5)
        a.add(w)
        eb.add(a)
        eb.set_style(self.rowStyle)
        def ene(eb,ev):
            eb.set_state(gtk.STATE_PRELIGHT)
        def lne(eb,ev):
            eb.set_state(gtk.STATE_NORMAL)
        eb.connect('enter-notify-event', ene)
        eb.connect('leave-notify-event', lne)

        self.table.attach(eb, c1, c2, r1, r2,
                          xoptions=gtk.EXPAND|gtk.FILL,
                          yoptions=gtk.SHRINK)
</snippet></ROW><ROW><id>1242545</id><snippet>self.rowStyle</snippet></ROW><ROW><id>1242545</id><snippet>tmpeb = gtk.EventBox()
st = tmpeb.get_style().copy()
st.bg[gtk.STATE_PRELIGHT] = gtk.gdk.Color(65535,65535,0)
self.rowStyle = st
</snippet></ROW><ROW><id>1242545</id><snippet>EventBox</snippet></ROW><ROW><id>1242743</id><snippet>import matplotlib.pyplot as plt
import random

nconfigs, njobs, nservers = 3, 4, 4

width = .9/(nconfigs*njobs)  
job_colors = [(0,0,1), (0,1,0), (1,0,0), (1,0,1)]

def dim(color, fraction=.5):
    return tuple([fraction*channel for channel in color])

plt.figure()
x = 0
for iserver in range(nservers):
    for ijob in range(njobs):
        for iconfig in range(nconfigs):
            color = dim(job_colors[ijob], (iconfig+2.)/(nconfigs+1))
            plt.bar(x, 1.+random.random(), width, color=color)
            x += width
    x += .1

plt.show()
</snippet></ROW><ROW><id>1242743</id><snippet>(iconfig+2.)/(nconfigs+1)</snippet></ROW><ROW><id>1242838</id><snippet>class IntMathMixin:
    def __add__(self, other):
        return type(self)(int(self).__add__(int(other)))
    # ... analog for the others
</snippet></ROW><ROW><id>1242838</id><snippet>class Hex(IntMathMixin, int):
    def __repr__(self):
         return "0x%x"%self
    __str__=__repr__
</snippet></ROW><ROW><id>1243009</id><snippet>attach_row</snippet></ROW><ROW><id>1243009</id><snippet>__call__</snippet></ROW><ROW><id>1243009</id><snippet>__init__</snippet></ROW><ROW><id>1243099</id><snippet>ctypes.windll.kernel32.SetConsoleCtrlHandler(0, 1)</snippet></ROW><ROW><id>1243137</id><snippet>import sys
from PyQt4 import QtCore, QtGui, QtWebKit

app = QtGui.QApplication(sys.argv) 

web = QtWebKit.QWebView()
web.load(QtCore.QUrl("http://upload.wikimedia.org/wikipedia/commons/a/af/Tux.png"))
web.show()

sys.exit(app.exec_()) 
</snippet></ROW><ROW><id>1243466</id><snippet>    id         = models.Page.get_by_id(int(str(self.request.get("id"))))
</snippet></ROW><ROW><id>1243466</id><snippet>    id         = models.Page.get_by_id(int(id))
</snippet></ROW><ROW><id>1243466</id><snippet>    page_query = models.Page.get(db.Key.from_path('Page', id))
</snippet></ROW><ROW><id>1243541</id><snippet>zipfile</snippet></ROW><ROW><id>1243541</id><snippet>ZipFile.read(name[, pwd])</snippet></ROW><ROW><id>1243541</id><snippet>base64.b64encode(s[, altchars])</snippet></ROW><ROW><id>1243902</id><snippet>readline</snippet></ROW><ROW><id>1243902</id><snippet>readline</snippet></ROW><ROW><id>1243902</id><snippet>import readline
</snippet></ROW><ROW><id>1243902</id><snippet>readline</snippet></ROW><ROW><id>1243902</id><snippet>readline</snippet></ROW><ROW><id>1244757</id><snippet>fh = open("NUL","w")
subprocess.Popen("taskkill /PID " + str(p.pid), stdout = fh, stderr = fh)
fh.close()
</snippet></ROW><ROW><id>1245030</id><snippet>&lt;title&gt;{% block title %}{% endblock %} - example.com&lt;/title&gt;
[...]

&lt;h1&gt; 
  {{ self.title() }} - example.com
&lt;/h1&gt;
</snippet></ROW><ROW><id>1245169</id><snippet>SELECT SUM(), COUNT() FROM fact JOIN dimension WHERE filter GROUP BY dimension attribute</snippet></ROW><ROW><id>1246158</id><snippet>params= {
'id': acodec.getCodecId('mp3'),
'bitrate': r.bitrate,
'sample_rate': r.sample_rate,
'ext': 'mp3',
'channels': r.channels }
enc= acodec.Encoder( params )
</snippet></ROW><ROW><id>1246470</id><snippet>&gt;&gt;&gt; dict( (n,int(v)) for n,v in (a.split('=') for a in string.split() ) )
{'a': 0, 'c': 3, 'b': 1}
</snippet></ROW><ROW><id>1246679</id><snippet>import wx

def scale(widget, percentage):
    font = widget.GetFont()
    font.SetPointSize(int(font.GetPointSize() * percentage / 100.0))
    widget.SetFont(font)

class Frame(wx.Frame):
    def __init__(self):
        super(Frame, self).__init__(None, -1, 'Scaling Fonts')
        panel = wx.Panel(self, -1)
        sizer = wx.BoxSizer(wx.VERTICAL)
        for i in range(50, 201, 25):
            widget = wx.StaticText(panel, -1, 'Scale Factor = %d' % i)
            scale(widget, i)
            sizer.Add(widget, 0, wx.ALL, 5)
        panel.SetSizer(sizer)

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = Frame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>1246978</id><snippet>DEBUG = True
TEMPLATE_DEBUG = DEBUG
</snippet></ROW><ROW><id>1247039</id><snippet>import sys
import re

stars_re = re.compile('^[*]+$', re.MULTILINE)
file_line_re = re.compile(r'^File "(.*?)", line (\d*), in (.*)$')

doctest_output = sys.stdin.read()
chunks = stars_re.split(doctest_output)[1:-1]

for chunk in chunks:
    chunk_lines = chunk.strip().splitlines()
    m = file_line_re.match(chunk_lines[0])

    file, line, module = m.groups()
    failed_example = chunk_lines[2].strip()
    expected = chunk_lines[4].strip()
        got = chunk_lines[6].strip()

    print (file, line, module, failed_example, expected, got)
</snippet></ROW><ROW><id>1247287</id><snippet>&gt;&gt;&gt; print "%d%%" % 100
100%
</snippet></ROW><ROW><id>1247287</id><snippet>&lt;TABLE border="0" cellpadding="0" cellspacing="0" width="100%%"&gt;
</snippet></ROW><ROW><id>1247287</id><snippet>C:\Python26\Lib\site-packages&gt;python C:\Python26\Lib\site-packages\docutils-0.5-
py2.6.egg\EGG-INFO\scripts\rst2html.py --template=c:\temp\layout2.tpl
^Z
&lt;TABLE border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
</snippet></ROW><ROW><id>1247290</id><snippet>from collections import defaultdict    

itemdict = defaultdict(list)
for id, parent_id in itemlist:
   itemdict[parent_id].append(id)
</snippet></ROW><ROW><id>1247290</id><snippet>def printitem(id, depth=0):
    print '  '*depth, id
    for child in itemdict[id]:
        printitem(child, depth+1)
</snippet></ROW><ROW><id>1247490</id><snippet>map</snippet></ROW><ROW><id>1247490</id><snippet>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'
100000 loops, best of 3: 4.86 usec per loop
$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'
100000 loops, best of 3: 5.58 usec per loop
</snippet></ROW><ROW><id>1247490</id><snippet>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'
100000 loops, best of 3: 4.24 usec per loop
$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 2.32 usec per loop
</snippet></ROW><ROW><id>1247888</id><snippet>import random

iterations = 100000

doors = ["goat"] * 2 + ["car"]
change_wins = 0
change_loses = 0

for i in xrange(iterations):
    random.shuffle(doors)
    # you pick door n:
    n = random.randrange(3)
    # monty picks door k, k!=n and doors[k]!="car"
    sequence = range(3)
    random.shuffle(sequence)
    for k in sequence:
        if k == n or doors[k] == "car":
            continue
    # now if you change, you lose iff doors[n]=="car"
    if doors[n] == "car":
        change_loses += 1
    else:
        change_wins += 1

print "Changing has %s wins and %s losses" % (change_wins, change_loses)
perc = (100.0 * change_wins) / (change_wins + change_loses)
print "IOW, by changing you win %.1f%% of the time" % perc
</snippet></ROW><ROW><id>1247888</id><snippet>Changing has 66721 wins and 33279 losses
IOW, by changing you win 66.7% of the time
</snippet></ROW><ROW><id>1248825</id><snippet>s!foo!bar!</snippet></ROW><ROW><id>1248825</id><snippet>s/foo/bar/</snippet></ROW><ROW><id>1249054</id><snippet>trunk</snippet></ROW><ROW><id>1249054</id><snippet>head</snippet></ROW><ROW><id>1249054</id><snippet>trunk</snippet></ROW><ROW><id>1249207</id><snippet>import matplotlib
matplotlib.use('Agg') # before import pylab
import pylab
</snippet></ROW><ROW><id>1249419</id><snippet>unset PYTHONPATH</snippet></ROW><ROW><id>1249419</id><snippet>unset PYTHONSTARTUP</snippet></ROW><ROW><id>1249419</id><snippet>$ python -c'import re; print re.__file__'
</snippet></ROW><ROW><id>1249419</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/re.pyc
</snippet></ROW><ROW><id>1249424</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("[^0-9]", "", "sdkjh987978asd098as0980a98sd")
'987978098098098'
</snippet></ROW><ROW><id>1249428</id><snippet>for filename in os.listdir("."):
    lines = open(filename).readlines()
    for i, line in enumerate(lines):
        if "foo" in line:
            for x in lines[i-5 : i+6]:
                print x,
</snippet></ROW><ROW><id>1249428</id><snippet>import collections

def sliding_windows(it):
  fifo = collections.deque()
  # prime the FIFO with the first 10 
  for i, line in enumerate(it):
    fifo.append(line)
    if i == 9: break
  # keep yielding 11-line sliding-windows
  for line in it:
    fifo.append(line)
    yield fifo, 5
    fifo.popleft()

for w, i in sliding_windows(open(filename)):
  if "foo" in w[i]:
    for line in w: print line,
</snippet></ROW><ROW><id>1249740</id><snippet>clean = open('thefile.txt').read().replace('\n', '')
</snippet></ROW><ROW><id>1249740</id><snippet>clean = ''.join(l[:-1] for l in open('thefile.txt'))
</snippet></ROW><ROW><id>1249740</id><snippet>python -mtimeit</snippet></ROW><ROW><id>1249740</id><snippet>$ python -mtimeit -s"import re" "re.sub('\n','',open('AV1611Bible.txt').read())"
10 loops, best of 3: 53.9 msec per loop
$ python -mtimeit "''.join(l[:-1] for l in open('AV1611Bible.txt'))"
10 loops, best of 3: 51.3 msec per loop
$ python -mtimeit "open('AV1611Bible.txt').read().replace('\n', '')"
10 loops, best of 3: 35.1 msec per loop
</snippet></ROW><ROW><id>1249850</id><snippet>string.split()</snippet></ROW><ROW><id>1249850</id><snippet>' '.join(my_string.split())
</snippet></ROW><ROW><id>1249850</id><snippet>TEST = """This
is        a test\twith a
  mix of\ttabs,     newlines and repeating
whitespace"""

print ' '.join(TEST.split())
# Prints:
# This is a test with a mix of tabs, newlines and repeating whitespace
</snippet></ROW><ROW><id>1250118</id><snippet>python setup.py build</snippet></ROW><ROW><id>1250135</id><snippet># In b.py:
def cause_a_to_do_something():
    import a
    a.do_something()
</snippet></ROW><ROW><id>1250135</id><snippet>import b</snippet></ROW><ROW><id>1250135</id><snippet>cause_a_to_do_something()</snippet></ROW><ROW><id>1250135</id><snippet>import</snippet></ROW><ROW><id>1250137</id><snippet>visit_writer</snippet></ROW><ROW><id>1250137</id><snippet>visit_writer</snippet></ROW><ROW><id>1250347</id><snippet>elem.sourceline</snippet></ROW><ROW><id>1250374</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urljoin('http://stackoverflow.com/questions/ask',
...                  '/users/48465/jader-dias')
'http://stackoverflow.com/users/48465/jader-dias'
</snippet></ROW><ROW><id>1250392</id><snippet>&gt;&gt;&gt; cPickle.dump(Inf, file("c:/temp/a.pcl",'wb'), -1)
&gt;&gt;&gt; cPickle.load(file("c:/temp/a.pcl",'rb'))
1.#INF                   -- may be platform dependent what prints here.
</snippet></ROW><ROW><id>1250700</id><snippet>uncompressedData = bz2.BZ2File(zipFile).read()
</snippet></ROW><ROW><id>1250700</id><snippet>open(filename)</snippet></ROW><ROW><id>1250700</id><snippet>open(filename, 'r')</snippet></ROW><ROW><id>1250700</id><snippet>open(filename, 'rb')</snippet></ROW><ROW><id>1250700</id><snippet>bz2.BZ2File</snippet></ROW><ROW><id>1250700</id><snippet>2.*</snippet></ROW><ROW><id>1250700</id><snippet>open</snippet></ROW><ROW><id>1250700</id><snippet>3.*</snippet></ROW><ROW><id>1250700</id><snippet>'\0x1A'</snippet></ROW><ROW><id>1250700</id><snippet>'rb'</snippet></ROW><ROW><id>1250700</id><snippet>open</snippet></ROW><ROW><id>1250700</id><snippet>bz2.BZ2File</snippet></ROW><ROW><id>1251248</id><snippet>def graburl(url, **params):
    print "LOG: Going to %s with %r" % (url, params)
    params = urllib.urlencode(params)
    return urllib.urlopen(url, params)
</snippet></ROW><ROW><id>1251248</id><snippet>f = graburl("https://example.com/cgi-bin/query", spam=1, eggs=2, bacon=0)
</snippet></ROW><ROW><id>1251567</id><snippet>DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>1251567</id><snippet>base_fields</snippet></ROW><ROW><id>1251567</id><snippet>media</snippet></ROW><ROW><id>1251567</id><snippet>class Form(BaseForm):
    "A collection of Fields, plus their associated data."
    # This is a separate class from BaseForm in order to abstract the way
    # self.fields is specified. This class (Form) is the one that does the
    # fancy metaclass stuff purely for the semantic sugar -- it allows one
    # to define a form using declarative syntax.
    # BaseForm itself has no way of designating self.fields.
    __metaclass__ = DeclarativeFieldsMetaclass
</snippet></ROW><ROW><id>1251567</id><snippet>type</snippet></ROW><ROW><id>1251567</id><snippet>EmployeeForm</snippet></ROW><ROW><id>1251567</id><snippet>return type(EmployeeForm)('EmployeeForm', (forms.Form, ), EmployeeForm.__dict__)
</snippet></ROW><ROW><id>1251567</id><snippet>__dict__</snippet></ROW><ROW><id>1251567</id><snippet>type</snippet></ROW><ROW><id>1251653</id><snippet>v1 = 0
</snippet></ROW><ROW><id>1251653</id><snippet>v1</snippet></ROW><ROW><id>1251653</id><snippet>0</snippet></ROW><ROW><id>1251702</id><snippet>for property, value in vars(theObject).iteritems():
    print property, ": ", value
</snippet></ROW><ROW><id>1251702</id><snippet>__slots__</snippet></ROW><ROW><id>1251702</id><snippet>__dict__</snippet></ROW><ROW><id>1251929</id><snippet>__init__</snippet></ROW><ROW><id>1251929</id><snippet>class Obj(object):
    def __init__(self):
        self.users = 0
</snippet></ROW><ROW><id>1251929</id><snippet>class Obj(object):
    users = 0
</snippet></ROW><ROW><id>1251929</id><snippet>class Obj(object):
    users = []
</snippet></ROW><ROW><id>1251929</id><snippet>__init__</snippet></ROW><ROW><id>1251929</id><snippet>__init__</snippet></ROW><ROW><id>1251929</id><snippet>class Obj(object):
    class Exception(Exception): pass
    ...
</snippet></ROW><ROW><id>1251929</id><snippet>from module import Obj

try:
    o = Obj()
    o.go()
except o.Exception:
    print "error"
</snippet></ROW><ROW><id>1252100</id><snippet>__setattr__</snippet></ROW><ROW><id>1252100</id><snippet>type(type(source))</snippet></ROW><ROW><id>1252100</id><snippet>for property in self.request.arguments():
  if property != 'id':
    setattr(source, property, self.request.get(property))
</snippet></ROW><ROW><id>1252100</id><snippet>request.get</snippet></ROW><ROW><id>1252229</id><snippet>resize()</snippet></ROW><ROW><id>1252229</id><snippet>img = img.resize((150, newheight), image.ANTIALIAS)
</snippet></ROW><ROW><id>1252311</id><snippet>$("div#my-container").load("/url/to/content/ #content-id")
</snippet></ROW><ROW><id>1252311</id><snippet>/url/to/content/</snippet></ROW><ROW><id>1252311</id><snippet>#content-id</snippet></ROW><ROW><id>1252311</id><snippet>div#my-container</snippet></ROW><ROW><id>1252311</id><snippet>templates/base.html</snippet></ROW><ROW><id>1252311</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My funky example&lt;/title&gt;
        &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"&gt;&lt;/script&gt;
        {% block extrahead %}{% endblock %}
    &lt;/head&gt;
    &lt;body&gt;
        {% block content %}{% endblock %}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1252311</id><snippet>templates/page.html</snippet></ROW><ROW><id>1252311</id><snippet>{% extends "base.html" %}
{% block extrahead %}
    &lt;script type="text/javascript"&gt;
        $(function(){
            $('a.extendable').click(function(){
                $(this).after($('&lt;div class="external-content"&gt;&lt;/div&gt;').load($(this).attr('href') + ' #content'));
                return false;
            });
        });
    &lt;/script&gt;
{% endblock extrahead %}
{% block content %}
    &lt;p&gt;Hi! &lt;a href="/external/content/a/" class="extendable"&gt;Click here&lt;/a&gt; and wait for something funny to happen!&lt;/p&gt;
    &lt;p&gt;&lt;a href="/external/content/b/" class="extendable"&gt;This link&lt;/a&gt; is cool, too!&lt;/p&gt;
{% endblock content %}
</snippet></ROW><ROW><id>1252311</id><snippet>templates/a.html</snippet></ROW><ROW><id>1252311</id><snippet>{% extends "base.html" %}
{% block content %}
    &lt;div id="content"&gt;so long and thanks for all the fish&lt;/div&gt;
{% endblock %}
</snippet></ROW><ROW><id>1252311</id><snippet>templates/b.html</snippet></ROW><ROW><id>1252311</id><snippet>{% extends "base.html" %}
{% block content %}
    &lt;div id="content"&gt;Don't panic&lt;/div&gt;
{% endblock %}
</snippet></ROW><ROW><id>1252311</id><snippet>urls.py</snippet></ROW><ROW><id>1252311</id><snippet>from django.conf.urls.defaults import *
urlpatterns = patterns('django.views.generic.simple',
    (r'^$',                    'direct_to_template', {'template': 'page.html'}),
    (r'^external/content/a/$', 'direct_to_template', {'template': 'a.html'}),
    (r'^external/content/b/$', 'direct_to_template', {'template': 'b.html'}),
)
</snippet></ROW><ROW><id>1252322</id><snippet>query = db.GqlQuery("SELECT * FROM Entry WHERE editor &gt; :1",None)
</snippet></ROW><ROW><id>1252322</id><snippet>ORDER BY</snippet></ROW><ROW><id>1252329</id><snippet>regexpHandler = re.compile('(&lt;div class="deg"&gt;.*?&lt;/div&gt;)')
</snippet></ROW><ROW><id>1252329</id><snippet>regexpHandler = re.compile('&lt;div class="deg"&gt;(.*?)&lt;/div&gt;')
</snippet></ROW><ROW><id>1252329</id><snippet>result = regexHandler.search( pageData )
matchedText = result.groups()[0]
</snippet></ROW><ROW><id>1252364</id><snippet>id(x)
</snippet></ROW><ROW><id>1252364</id><snippet>x==y</snippet></ROW><ROW><id>1252364</id><snippet>x.ref is y.ref</snippet></ROW><ROW><id>1252364</id><snippet>hash</snippet></ROW><ROW><id>1252364</id><snippet>hash</snippet></ROW><ROW><id>1252500</id><snippet>d =</snippet></ROW><ROW><id>1252500</id><snippet>list</snippet></ROW><ROW><id>1252500</id><snippet>d = {'file_name':'thisfile.flt', 'item_name':'box', 'item_height':'8.7', 
     'item_width':'10.5', 'item_depth':'2.2', 'texture_file': 'red.jpg'}

order = {
    'file_name':    0,
    'item_name':    1, 
    'item_height':  2,
    'item_width':   3,
    'item_depth':   4,
    'texture_file': 5
}
</snippet></ROW><ROW><id>1252500</id><snippet>['thisfile.flt', 'box', '8.7', '10.5', '2.2', "red.jpg']</snippet></ROW><ROW><id>1252500</id><snippet>def doit(d, order):
  return  [d[k] for k in sorted(order, key=order.get)]
</snippet></ROW><ROW><id>1252644</id><snippet>os.path.join(build_dir, os.path.basename(source_file))
</snippet></ROW><ROW><id>1252644</id><snippet>build_dir / path(source_file).name
</snippet></ROW><ROW><id>1252644</id><snippet>path(build_dir, path(source_file).name)
</snippet></ROW><ROW><id>1253061</id><snippet>import pygame, os.path
from pygame.locals import *

class TranslucentSprite(pygame.sprite.Sprite):
  def __init__(self):
    pygame.sprite.Sprite.__init__(self, TranslucentSprite.container)
    self.image = pygame.image.load(os.path.join('data', 'image.bmp'))
    self.image = self.image.convert()
    self.image.set_colorkey(-1, RLEACCEL)
    self.rect = self.image.get_rect()
    self.rect.center = (320,240)

def main():
  pygame.init()
  screen = pygame.display.set_mode((640,480))
  background = pygame.Surface(screen.get_size())
  background = background.convert()
  background.fill((250,250,250))
  clock = pygame.time.Clock()
  transgroups = pygame.sprite.Group()
  TranslucentSprite.container = transgroups

  """Here's the Translucency Code"""
  transsurface = pygame.display.set_mode(screen.get_size())
  transsurface = transsurface.convert(screen)
  transsurface.fill((255,0,255))
  transsurface.set_colorkey((255,0,255))
  transsurface.set_alpha(50)

  TranslucentSprite()
  while 1:
    clock.tick(60)
    for event in pygame.event.get():
      if event.type == QUIT:
        return
      elif event.type == KEYDOWN and event.key == K_ESCAPE:
        return
    transgroups.draw(transsurface)
    screen.blit(background,(0,0))
    screen.blit(transsurface,(0,0))
    pygame.display.flip()

if __name__ == '__main__' : main()
</snippet></ROW><ROW><id>1253813</id><snippet>import marshal
def foo(x): return x*x
code_string = marshal.dumps(foo.func_code)
</snippet></ROW><ROW><id>1253813</id><snippet>import marshal, types

code = marshal.loads(code_string)
func = types.FunctionType(code, globals(), "some_func_name")

func(10)  # gives 100
</snippet></ROW><ROW><id>1254230</id><snippet>decimal</snippet></ROW><ROW><id>1254230</id><snippet>decimal.Decimal.__repr__</snippet></ROW><ROW><id>1254230</id><snippet>return 'Decimal("%s")' % str(self)
</snippet></ROW><ROW><id>1254230</id><snippet>return "Decimal('%s')" % str(self)
</snippet></ROW><ROW><id>1254230</id><snippet>str()</snippet></ROW><ROW><id>1254322</id><snippet>cmd.exe</snippet></ROW><ROW><id>1254322</id><snippet>shell=True</snippet></ROW><ROW><id>1254322</id><snippet>cmd.exe /c </snippet></ROW><ROW><id>1254322</id><snippet>COMSPEC</snippet></ROW><ROW><id>1254322</id><snippet>cmd.exe</snippet></ROW><ROW><id>1254322</id><snippet>w9xpopen</snippet></ROW><ROW><id>1254322</id><snippet>UNIX</snippet></ROW><ROW><id>1254322</id><snippet>/bin/sh -c gcc --version
</snippet></ROW><ROW><id>1254322</id><snippet>/bin/sh -c "gcc --version" gcc --version
</snippet></ROW><ROW><id>1254322</id><snippet>sh</snippet></ROW><ROW><id>1254322</id><snippet>-c</snippet></ROW><ROW><id>1254322</id><snippet>Read commands from the command_string operand instead of from the standard input.  Special parameter 0 will be set from the command_name operand and the positional parameters ($1, $2, etc.)  set from the remaining argument operands.</snippet></ROW><ROW><id>1254322</id><snippet>--- subprocess.py.orig  2009-04-19 04:43:42.000000000 +0200
+++ subprocess.py       2009-08-10 13:08:48.000000000 +0200
@@ -990,7 +990,7 @@
                 args = list(args)

             if shell:
-                args = ["/bin/sh", "-c"] + args
+                args = ["/bin/sh", "-c"] + [" ".join(args)] + args

             if executable is None:
                 executable = args[0]
</snippet></ROW><ROW><id>1254324</id><snippet>def check_file(file, size=0):
    try:
        if not os.path.exists(file):
            return False
        if (size != 0 and os.path.getsize(file) != size):
            return False
        return True
    except IOError:
        return False # or True, whatever your default is

while (check_file(rempdg,self._ndays*130160640) is False):
    try:
        shutil.copy2(locpdg, rempdg)
    except IOError:
        pass # ignore the IOError and keep going
</snippet></ROW><ROW><id>1254379</id><snippet>reload(my.module)
</snippet></ROW><ROW><id>1254491</id><snippet>%default</snippet></ROW><ROW><id>1254491</id><snippet># This example taken from http://docs.python.org/library/optparse.html#generating-help
parser.add_option("-m", "--mode",
                  default="intermediate",
                  help="interaction mode: novice, intermediate, "
                       "or expert [default: %default]")
</snippet></ROW><ROW><id>1254499</id><snippet>DATA = { u'spam': u'eggs', u'foo': frozenset([u'Gah!']), u'bar': { u'baz': 97 },
         u'list': [u'list', (True, u'Maybe'), set([u'and', u'a', u'set', 1])]}

def convert(data):
    if isinstance(data, basestring):
        return str(data)
    elif isinstance(data, collections.Mapping):
        return dict(map(convert, data.iteritems()))
    elif isinstance(data, collections.Iterable):
        return type(data)(map(convert, data))
    else:
        return data

print DATA
print convert(DATA)
# Prints:
# {u'list': [u'list', (True, u'Maybe'), set([u'and', u'a', u'set', 1])], u'foo': frozenset([u'Gah!']), u'bar': {u'baz': 97}, u'spam': u'eggs'}
# {'bar': {'baz': 97}, 'foo': frozenset(['Gah!']), 'list': ['list', (True, 'Maybe'), set(['and', 'a', 'set', 1])], 'spam': 'eggs'}
</snippet></ROW><ROW><id>1254499</id><snippet>data.encode('utf-8')</snippet></ROW><ROW><id>1254499</id><snippet>str(data)</snippet></ROW><ROW><id>1254881</id><snippet>wx.StaticText</snippet></ROW><ROW><id>1254881</id><snippet>TE_READONLY</snippet></ROW><ROW><id>1254992</id><snippet>&gt;&gt;&gt; f = StringIO('''\
... &lt;element name="a" xmlns="http://relaxng.org/ns/structure/1.0"&gt;
...  &lt;zeroOrMore&gt;
...     &lt;element name="b"&gt;
...       &lt;text /&gt;
...     &lt;/element&gt;
...  &lt;/zeroOrMore&gt;
... &lt;/element&gt;
... ''')
&gt;&gt;&gt; relaxng_doc = etree.parse(f)
&gt;&gt;&gt; relaxng = etree.RelaxNG(relaxng_doc)

&gt;&gt;&gt; valid = StringIO('&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;')
&gt;&gt;&gt; doc = etree.parse(valid)
&gt;&gt;&gt; relaxng.validate(doc)
True

&gt;&gt;&gt; invalid = StringIO('&lt;a&gt;&lt;c&gt;&lt;/c&gt;&lt;/a&gt;')
&gt;&gt;&gt; doc2 = etree.parse(invalid)
&gt;&gt;&gt; relaxng.validate(doc2)
False
</snippet></ROW><ROW><id>1255113</id><snippet>__run__.py</snippet></ROW><ROW><id>1255113</id><snippet>$ cd $JYTHON_HOME
$ cp jython.jar jythonlib.jar
$ zip -r jythonlib.jar Lib
</snippet></ROW><ROW><id>1255113</id><snippet>$ cd $MY_APP_DIRECTORY
$ cp $JYTHON_HOME/jythonlib.jar myapp.jar
$ zip myapp.jar Lib/showobjs.py
# Add path to additional jar file.
$ jar ufm myapp.jar othermanifest.mf
</snippet></ROW><ROW><id>1255113</id><snippet>__run__.py</snippet></ROW><ROW><id>1255113</id><snippet># Copy or rename your start-up script, removing the "__name__  == '__main__'" check.
$ cp mymainscript.py __run__.py
# Add your start-up script (__run__.py) to the jar.
$ zip myapp.jar __run__.py
# Add path to main jar to the CLASSPATH environment variable.
$ export CLASSPATH=/path/to/my/app/myapp.jar:$CLASSPATH
</snippet></ROW><ROW><id>1255113</id><snippet>set CLASSPATH=C:\path\to\my\app\myapp.jar;%CLASSPATH%
</snippet></ROW><ROW><id>1255113</id><snippet>$ java -jar myapp.jar mymainscript.py arg1 arg2
</snippet></ROW><ROW><id>1255113</id><snippet>$ java org.python.util.jython -jar myapp.jar arg1 arg2
$ java -cp myapp.jar org.python.util.jython -jar myapp.jar arg1 arg2
$ java -jar myapp.jar -jar myapp.jar arg1 arg2
</snippet></ROW><ROW><id>1255113</id><snippet>$ java -jar myapp.jar arg1
</snippet></ROW><ROW><id>1255113</id><snippet>__run__.py</snippet></ROW><ROW><id>1255113</id><snippet>package org.python.util;

import org.python.core.imp;
import org.python.core.PySystemState;

public class JarRunner {

    public static void run(String[] args) {
        final String runner = "__run__";
        String[] argv = new String[args.length + 1];
        argv[0] = runner;
        System.arraycopy(args, 0, argv, 1, args.length);
        PySystemState.initialize(PySystemState.getBaseProperties(), null, argv);
        imp.load(runner);
    }

    public static void main(String[] args) {
        run(args);
    }
}
</snippet></ROW><ROW><id>1255113</id><snippet>Main-Class: org.python.util.JarRunner
</snippet></ROW><ROW><id>1255113</id><snippet>$ jar ufm myapp.jar manifest.txt
</snippet></ROW><ROW><id>1255113</id><snippet>$ java -jar myapp.jar
</snippet></ROW><ROW><id>1255505</id><snippet>    self.lock.acquire()
    print "\nSubprocess started"
    p = subprocess.Popen( # etc
    stdout_value = proc.communicate('through stdin to stdout')[0]
    self.lock.release()
</snippet></ROW><ROW><id>1255505</id><snippet>stdout_value</snippet></ROW><ROW><id>1255505</id><snippet>Queue.Queue()</snippet></ROW><ROW><id>1255505</id><snippet>get</snippet></ROW><ROW><id>1255505</id><snippet>get_nowait</snippet></ROW><ROW><id>1255505</id><snippet>put</snippet></ROW><ROW><id>1255505</id><snippet>Queue</snippet></ROW><ROW><id>1255505</id><snippet>import Queue</snippet></ROW><ROW><id>1255505</id><snippet>self.lock</snippet></ROW><ROW><id>1255505</id><snippet>self.q = Queue.Queue()</snippet></ROW><ROW><id>1255505</id><snippet>__init__</snippet></ROW><ROW><id>1255505</id><snippet>stdout_value = proc.communicate(...</snippet></ROW><ROW><id>1255505</id><snippet>self.q.put(stdout_value)</snippet></ROW><ROW><id>1255505</id><snippet>jsonrpc_run_procs</snippet></ROW><ROW><id>1255505</id><snippet>while not self.q.empty():
  result = self.q.get()
  print 'One result is %r' % result
</snippet></ROW><ROW><id>1255505</id><snippet>empty</snippet></ROW><ROW><id>1255792</id><snippet>iterparse</snippet></ROW><ROW><id>1255792</id><snippet>from cStringIO import StringIO
import xml.etree.ElementTree as ET

NS_MAP = {
    'http://www.red-dove.com/ns/abc' : 'rdc',
    'http://www.adobe.com/2006/mxml' : 'mx',
    'http://www.red-dove.com/ns/def' : 'oth',
}

DATA = '''&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;rdc:container xmlns:mx="http://www.adobe.com/2006/mxml"
                 xmlns:rdc="http://www.red-dove.com/ns/abc"
                 xmlns:oth="http://www.red-dove.com/ns/def"&gt;
  &lt;mx:Style&gt;
    &lt;oth:style1/&gt;
  &lt;/mx:Style&gt;
  &lt;mx:Style&gt;
    &lt;oth:style2/&gt;
  &lt;/mx:Style&gt;
  &lt;mx:Style&gt;
    &lt;oth:style3/&gt;
  &lt;/mx:Style&gt;
&lt;/rdc:container&gt;'''

tree = ET.parse(StringIO(DATA))
some_node = tree.getroot().getchildren()[1]
print ET.fixtag(some_node.tag, NS_MAP)
some_node = some_node.getchildren()[0]
print ET.fixtag(some_node.tag, NS_MAP)
</snippet></ROW><ROW><id>1255858</id><snippet>sys.excepthook</snippet></ROW><ROW><id>1255858</id><snippet>import pdb; pdb.pm()</snippet></ROW><ROW><id>1255910</id><snippet>os._exit</snippet></ROW><ROW><id>1255910</id><snippet>finally</snippet></ROW><ROW><id>1255910</id><snippet>atexit</snippet></ROW><ROW><id>1256018</id><snippet>from __future__ import with_statement
import inspect

class button(object):
  def __enter__(self):
    # keep track of all that's already defined BEFORE the `with`
    f = inspect.currentframe(1)
    self.mustignore = dict(f.f_locals)

  def __exit__(self, exc_type, exc_value, traceback):
    f = inspect.currentframe(1)
    # see what's been bound anew in the body of the `with`
    interesting = dict()
    for n in f.f_locals:
      newf = f.f_locals[n]
      if n not in self.mustignore:
        interesting[n] = newf
        continue
      anf = self.mustignore[n]
      if id(newf) != id(anf):
        interesting[n] = newf
    if interesting:
      print 'interesting new things: %s' % ', '.join(sorted(interesting))
      for n, v in interesting.items():
        if isinstance(v, type(lambda:None)):
          print 'function %r' % n
          print v()
    else:
      print 'nothing interesting'

def main():
  for i in (1, 2):
    def ignorebefore():
      pass
    with button():
      def testing(i=i):
        return i
    def ignoreafter():
      pass

main()
</snippet></ROW><ROW><id>1256018</id><snippet>__exit__</snippet></ROW><ROW><id>1256018</id><snippet>with</snippet></ROW><ROW><id>1256018</id><snippet>with</snippet></ROW><ROW><id>1256018</id><snippet>==</snippet></ROW><ROW><id>1256018</id><snippet>is</snippet></ROW><ROW><id>1256018</id><snippet>def</snippet></ROW><ROW><id>1256018</id><snippet>testing</snippet></ROW><ROW><id>1256018</id><snippet>def</snippet></ROW><ROW><id>1256018</id><snippet>with</snippet></ROW><ROW><id>1256018</id><snippet>inspect</snippet></ROW><ROW><id>1256020</id><snippet>a= [1, 2, 3, 4, 5]
b= [1, 2, 3, 4, 5, 6, 7, 8]
c= [8, 9, 10, 12, 23, 43, 45, 56, 76, 78]
d= [1, 2, 3, 4, 5, 6, 7, 8, 45, 56, 76, 78, 12, 23, 43]

fh = open("out.txt","w")

# header line
fh.write("a\tb\td\tc\n")
# rest of file
for i in map(lambda *row: [elem or "" for elem in row], *[a,b,d,c]):
  fh.write("\t".join(map(str,i))+"\n")

fh.close()
</snippet></ROW><ROW><id>1256054</id><snippet>readUTF()</snippet></ROW><ROW><id>1256054</id><snippet>s = "abc"
out.write( struct.pack("&gt;H", len(s) ))
out.write( struct.pack("&gt;%ds" % len(s), s ))
</snippet></ROW><ROW><id>1256054</id><snippet>&gt;H</snippet></ROW><ROW><id>1256449</id><snippet>subprocess</snippet></ROW><ROW><id>1256449</id><snippet>popen2</snippet></ROW><ROW><id>1256449</id><snippet>if r.read(1):</snippet></ROW><ROW><id>1256449</id><snippet>r</snippet></ROW><ROW><id>1256705</id><snippet>field.widget = field.hidden_widget
</snippet></ROW><ROW><id>1256705</id><snippet>field.widget = field.hidden_widget()
</snippet></ROW><ROW><id>1256723</id><snippet>map = { reg1: handleReg1, reg2: handleReg2, etc }
</snippet></ROW><ROW><id>1256723</id><snippet>for reg, handler in map.items():
    result = reg.match(line)
    if result:
       handler(result)
       break
</snippet></ROW><ROW><id>1256748</id><snippet>claimer = User.objects.get(name='test')
claimed_opponents = User.objects.filter(gameclaim_opponent__me__user=claimer)
</snippet></ROW><ROW><id>1257624</id><snippet>def ntuples(lst, n):
    return zip(*[lst[i:]+lst[:i] for i in range(n)])
</snippet></ROW><ROW><id>1257624</id><snippet>from itertools import *
def ntuples(lst, n):
    return izip(*[chain(islice(lst,i,None), islice(lst,None,i)) for i in range(n)])
</snippet></ROW><ROW><id>1257624</id><snippet>from itertools import *
def ntuples(seq, n):
    iseq = iter(seq)
    curr = head = tuple(islice(iseq, n))
    for x in chain(iseq, head):
        yield curr
        curr = curr[1:] + (x,)
</snippet></ROW><ROW><id>1257737</id><snippet>timeit()</snippet></ROW><ROW><id>1257737</id><snippet>t.timeit(1)
</snippet></ROW><ROW><id>1257737</id><snippet>count = 1000
print t.timeit(count) / count
</snippet></ROW><ROW><id>1257769</id><snippet>auth_none()</snippet></ROW><ROW><id>1257769</id><snippet>paramiko.Transport</snippet></ROW><ROW><id>1257769</id><snippet>import paramiko
import socket

s = socket.socket()
s.connect(('localhost', 22))
t = paramiko.Transport(s)
t.connect()

try:
    t.auth_none('')
except paramiko.BadAuthenticationType, err:
    print err.allowed_types
</snippet></ROW><ROW><id>1257870</id><snippet>f = open("output.dat", "w")
f.write(my_data)
</snippet></ROW><ROW><id>1257870</id><snippet>f = open("output.dat", "wb")
f.write(my_data)
</snippet></ROW><ROW><id>1257956</id><snippet>make_object_list=True</snippet></ROW><ROW><id>1257956</id><snippet>archive_year</snippet></ROW><ROW><id>1257956</id><snippet>object_list</snippet></ROW><ROW><id>1257956</id><snippet>url(r'^(?P&lt;year&gt;\d{4})/$', 'archive_year', info_dict, name="entry_archive_year")
</snippet></ROW><ROW><id>1257956</id><snippet>info_dict</snippet></ROW><ROW><id>1257956</id><snippet>queryset</snippet></ROW><ROW><id>1257956</id><snippet>date_field</snippet></ROW><ROW><id>1257956</id><snippet>url(r'^(?P&lt;year&gt;\d{4}/$', 'archive_year', dict(info_dict,make_object_list=True),
        name="entry_archive_year")
</snippet></ROW><ROW><id>1257956</id><snippet>archive_year</snippet></ROW><ROW><id>1257956</id><snippet>make_object_list</snippet></ROW><ROW><id>1257956</id><snippet>object_list</snippet></ROW><ROW><id>1257956</id><snippet>make_object_list</snippet></ROW><ROW><id>1257956</id><snippet>True</snippet></ROW><ROW><id>1257956</id><snippet>object_list</snippet></ROW><ROW><id>1257956</id><snippet>object_list</snippet></ROW><ROW><id>1257956</id><snippet>object_list</snippet></ROW><ROW><id>1257956</id><snippet>False</snippet></ROW><ROW><id>1257956</id><snippet>entry_archive_year</snippet></ROW><ROW><id>1257956</id><snippet>archive_year</snippet></ROW><ROW><id>1257956</id><snippet>date_list</snippet></ROW><ROW><id>1257956</id><snippet>date_list</snippet></ROW><ROW><id>1257956</id><snippet>datetime.date</snippet></ROW><ROW><id>1257956</id><snippet>date_list</snippet></ROW><ROW><id>1257956</id><snippet>date_list</snippet></ROW><ROW><id>1257956</id><snippet>entry_archive_year</snippet></ROW><ROW><id>1257956</id><snippet>&lt;ul&gt;
  {% for month in date_list %}

    &lt;li&gt;&lt;a href="/blog/{{month|date:"Y"}}/{{month|date:"b"}}&gt;
          {{month|date:"F"}}&lt;/a&gt;&lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>1257956</id><snippet>date_list</snippet></ROW><ROW><id>1258247</id><snippet>import dateutil.parser
date1 = dateutil.parser.parse("December 12th, 2008")
date2 = dateutil.parser.parse("January 1st, 2009")
</snippet></ROW><ROW><id>1258710</id><snippet>class Foo(object):
    @classmethod
    def callRule(cls):
        Bar.ruleOn(cls.RULE1)
        Bar.ruleOn(cls.RULE2)

    @classmethod
    def check(cls):
        print "I am check"

 Foo.RULE1 = Foo.check
 Foo.RULE2 = (Foo.check,)
</snippet></ROW><ROW><id>1258883</id><snippet>login.py</snippet></ROW><ROW><id>1258883</id><snippet>scriptpath</snippet></ROW><ROW><id>1258883</id><snippet>class Family(family.Family):
    def __init__(self):
        family.Family.__init__(self)
        self.name = 'mywiki'
        self.langs = { 'en' : 'local.example.com'}

    def scriptpath(self, code):
        return '/mywiki'

    def version(self, code):
        return '1.13.5'

    def isPublic(self):
        return False

    def hostname(self, code):
        return 'local.example.com'

    def protocol(self, code):
        return 'https'
</snippet></ROW><ROW><id>1258883</id><snippet>import wikipedia
site = wikipedia.getSite('en', 'mywiki')
print site.login_address()
</snippet></ROW><ROW><id>1258883</id><snippet>login.py</snippet></ROW><ROW><id>1258883</id><snippet>response = urllib2.urlopen(urllib2.Request(self.site.protocol() + '://' + self.site.hostname() + address, data, headers))
</snippet></ROW><ROW><id>1258883</id><snippet>from ntlm import HTTPNtlmAuthHandler

user = 'DOMAIN\User'
password = "Password"
url = self.site.protocol() + '://' + self.site.hostname()

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, url, user, password)
# create the NTLM authentication handler
auth_NTLM = HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(passman)

# create and install the opener
opener = urllib2.build_opener(auth_NTLM)
urllib2.install_opener(opener)

response = urllib2.urlopen(urllib2.Request(self.site.protocol() + '://' + self.site.hostname() + address, data, headers))
</snippet></ROW><ROW><id>1258929</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>1259275</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>1259378</id><snippet>import time
epoch = int(time.mktime(mydate.timetuple())*1000)
</snippet></ROW><ROW><id>1259378</id><snippet>import time

from django import template

register = template.Library()

@register.filter
def epoch(value):
    try:
        return int(time.mktime(value.timetuple())*1000)
    except AttributeError:
        return ''
</snippet></ROW><ROW><id>1260007</id><snippet>usage, description= __doc__.split('\n\n')[:2]
</snippet></ROW><ROW><id>1260007</id><snippet>optparse</snippet></ROW><ROW><id>1260007</id><snippet>optparse</snippet></ROW><ROW><id>1260007</id><snippet>"Usage: "</snippet></ROW><ROW><id>1260007</id><snippet>usage</snippet></ROW><ROW><id>1260683</id><snippet>__setitem__</snippet></ROW><ROW><id>1260683</id><snippet>dict.__setitem__(self, key, value</snippet></ROW><ROW><id>1260683</id><snippet>class ImmutableDict(dict):
    def __setitem__(self, key, value):
        if key not in self:
             raise KeyError("Immutable dict")
        dict.__setitem__(self, key, value)

d = ImmutableDict(foo=1, bar=2)
d['foo'] = 3
print(d)
d['baz'] = 4 # Raises error
</snippet></ROW><ROW><id>1260683</id><snippet>dict.update()</snippet></ROW><ROW><id>1260683</id><snippet>setdefault()</snippet></ROW><ROW><id>1260683</id><snippet>dict.__delitem__()</snippet></ROW><ROW><id>1260683</id><snippet>dict.clear()</snippet></ROW><ROW><id>1260683</id><snippet>dict.pop()</snippet></ROW><ROW><id>1260683</id><snippet>dict.popitem()</snippet></ROW><ROW><id>1260813</id><snippet>__init__.py
</snippet></ROW><ROW><id>1260842</id><snippet>class LocalTestHost:

    def __init__(self, mst, port, local_ip, remote_if_mac, remote_if_ip, service_port):
        .
        . &lt;some initialization code&gt;
        .

        # This is the faulty line
        self.__host_operations = HostOperationsFactory().create(
                        local_ip, port, mst, remote_if_ip)
</snippet></ROW><ROW><id>1260842</id><snippet>&gt;&gt;&gt; test_hosts.LocalTestHost(1,2,3,4,5,6)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "test_hosts.py", line 709, in __init__
    self.__host_operations = HostOperationsFactory().create(
  File "test_hosts.py", line 339, in create
    remote_ip)
  File "test_hosts.py", line 110, in __init__
    packet_size, remote_ip)
TypeError: __init__() takes exactly 7 arguments (6 given)
</snippet></ROW><ROW><id>1260842</id><snippet>create</snippet></ROW><ROW><id>1260997</id><snippet>inspect.ismethod</snippet></ROW><ROW><id>1260997</id><snippet>import inspect

def foo(): pass

class Test(object):
    def method(self): pass

print inspect.ismethod(foo) # False
print inspect.ismethod(Test) # False
print inspect.ismethod(Test.method) # True
print inspect.ismethod(Test().method) # True

print callable(foo) # True
print callable(Test) # True
print callable(Test.method) # True
print callable(Test().method) # True
</snippet></ROW><ROW><id>1260997</id><snippet>callable</snippet></ROW><ROW><id>1260997</id><snippet>lambda</snippet></ROW><ROW><id>1260997</id><snippet>__call__</snippet></ROW><ROW><id>1260997</id><snippet>im_class</snippet></ROW><ROW><id>1260997</id><snippet>im_self</snippet></ROW><ROW><id>1260997</id><snippet>assert inspect.ismethod(Test().method)  
</snippet></ROW><ROW><id>1261016</id><snippet>matches = [s for s in mytext if 'foobar' in s]
</snippet></ROW><ROW><id>1261016</id><snippet>matches = [s for s in mytext if s.startswith('foobar')]
</snippet></ROW><ROW><id>1261595</id><snippet>Init = numpy.asarray [(10.0, 200.0, 500.0, 10.0)]
</snippet></ROW><ROW><id>1261595</id><snippet>Init = numpy.asarray ([10.0, 200.0, 500.0, 10.0])
</snippet></ROW><ROW><id>1261595</id><snippet>[</snippet></ROW><ROW><id>1261595</id><snippet>asarray</snippet></ROW><ROW><id>1261595</id><snippet>x[17]</snippet></ROW><ROW><id>1261906</id><snippet>kill</snippet></ROW><ROW><id>1261906</id><snippet>taskkill</snippet></ROW><ROW><id>1261906</id><snippet>Ctrl+C</snippet></ROW><ROW><id>1261906</id><snippet>Ctrl+C</snippet></ROW><ROW><id>1261906</id><snippet>raw_input(...)</snippet></ROW><ROW><id>1261906</id><snippet>Ctrl+Z</snippet></ROW><ROW><id>1261906</id><snippet>Ctrl+C</snippet></ROW><ROW><id>1261906</id><snippet>0x03</snippet></ROW><ROW><id>1261961</id><snippet>&gt;&gt;&gt; def outer():
       x = 1
       def inner():
           x = 2
           print("inner:", x)
       inner()
       print("outer:", x)


&gt;&gt;&gt; outer()
inner: 2
outer: 1
</snippet></ROW><ROW><id>1261961</id><snippet>&gt;&gt;&gt; def outer():
       x = 1
       def inner():
           nonlocal x
           x = 2
           print("inner:", x)
       inner()
       print("outer:", x)


&gt;&gt;&gt; outer()
inner: 2
outer: 2
</snippet></ROW><ROW><id>1262091</id><snippet>ipython -pdb</snippet></ROW><ROW><id>1262091</id><snippet>ipython</snippet></ROW><ROW><id>1262651</id><snippet>-- url: /loadusers
 script: myloader.py
 login: admin
</snippet></ROW><ROW><id>1262678</id><snippet>dispatcher.push_handlers(window)
</snippet></ROW><ROW><id>1262707</id><snippet>operator</snippet></ROW><ROW><id>1262707</id><snippet>operator.so</snippet></ROW><ROW><id>1262707</id><snippet>/usr/local/lib/lib-dynload</snippet></ROW><ROW><id>1262961</id><snippet>random</snippet></ROW><ROW><id>1262961</id><snippet>import random
random.sample(set([1, 2, 3, 4, 5, 6]), 2)
</snippet></ROW><ROW><id>1263545</id><snippet>class Test(object):

    def _decorator(self, foo):
        foo()

    def bar(self):
        pass
    bar = self._decorator(bar)
</snippet></ROW><ROW><id>1263545</id><snippet>self</snippet></ROW><ROW><id>1263545</id><snippet>Test</snippet></ROW><ROW><id>1263545</id><snippet>class Test(object):

    @classmethod
    def _decorator(cls, foo):
        foo()

    def bar(self):
        pass
Test.bar = Test._decorator(Test.bar)
</snippet></ROW><ROW><id>1263617</id><snippet>magic_reverse_mapping</snippet></ROW><ROW><id>1263617</id><snippet>magic_reverse_mapping = {}

class MagicRegister(type):
   def __new__(meta, name, bases, dict):
      cls = type.__new__(meta, name, bases, dict)
      magic_reverse_mapping[dict['_internal_attribute']] = cls
      return cls

class A(object):
    __metaclass__ = MagicRegister
    _internal_attribute = 'A attribute'

afoo = magic_reverse_mapping['A attribute']()
</snippet></ROW><ROW><id>1263617</id><snippet>magic_reverse_mapping = {}

def magic_register(cls):
   magic_reverse_mapping[cls._internal_attribute] = cls
   return cls

@magic_register
class A(object):
    _internal_attribute = 'A attribute'

afoo = magic_reverse_mapping['A attribute']()
</snippet></ROW><ROW><id>1263617</id><snippet>reverse_mapping = {}

class A(object):
    _internal_attribute = 'A attribute'

reverse_mapping[A._internal_attribute] = A
</snippet></ROW><ROW><id>1263811</id><snippet>import unicodedata
unicodedata.numeric(u'⅕')
</snippet></ROW><ROW><id>1263811</id><snippet>0.20000000000000001
</snippet></ROW><ROW><id>1263811</id><snippet>unicodedata.numeric(unichr[, default])</snippet></ROW><ROW><id>1264171</id><snippet>writing all the if verbose and not silent is messy
</snippet></ROW><ROW><id>1264171</id><snippet>    try:
        a_method()
    except OSError, e:
        print "a_method(): %s" % e.strerror
        sys.exit(-1)
</snippet></ROW><ROW><id>1264171</id><snippet>    docall(a_method)
</snippet></ROW><ROW><id>1264171</id><snippet>def docall(acallable):</snippet></ROW><ROW><id>1264331</id><snippet>class Wrapper(object):
  def __init__(self, it):
    self.it = it
    self.pushedback = []
  def __iter__(self):
    return self
  def next(self):
    if self.pushedback:
      return self.pushedback.pop()
    else:
      return self.it.next()
  def pushback(self, val):
    self.pushedback.append(val)
</snippet></ROW><ROW><id>1264331</id><snippet>next(self.it)</snippet></ROW><ROW><id>1264331</id><snippet>self.it.next()</snippet></ROW><ROW><id>1264331</id><snippet>__next__</snippet></ROW><ROW><id>1264331</id><snippet>next</snippet></ROW><ROW><id>1264331</id><snippet>import itertools
   ...
o, peek = itertools.tee(o)
if isneat(peek.next()): ...
</snippet></ROW><ROW><id>1264331</id><snippet>o</snippet></ROW><ROW><id>1264540</id><snippet>multipart/form-data</snippet></ROW><ROW><id>1264540</id><snippet>MultiPartForm</snippet></ROW><ROW><id>1265272</id><snippet>print time.strftime(some known struct_time)</snippet></ROW><ROW><id>1265272</id><snippet>print repr(date)</snippet></ROW><ROW><id>1265272</id><snippet>latest.GetCreatedAt()</snippet></ROW><ROW><id>1265988</id><snippet>(-1, 100)</snippet></ROW><ROW><id>1265988</id><snippet>(-1, -1)</snippet></ROW><ROW><id>1265988</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>1266942</id><snippet>$out=array_map(function($x) {return $x*$x;}, range(0, 9))
</snippet></ROW><ROW><id>1266942</id><snippet>function sq($x) {return $x*$x;}
$out=array_map('sq', range(0, 9));
</snippet></ROW><ROW><id>1267145</id><snippet>try/except</snippet></ROW><ROW><id>1267145</id><snippet>def RepresentsInt(s):
    try: 
        int(s)
        return True
    except ValueError:
        return False

&gt;&gt;&gt; print RepresentsInt("+123")
True
&gt;&gt;&gt; print RepresentsInt("10.0")
False
</snippet></ROW><ROW><id>1267211</id><snippet>self.close()</snippet></ROW><ROW><id>1267318</id><snippet>myList = filter(lambda x: myDict.get(x[1], None) != x[0], myList)
</snippet></ROW><ROW><id>1267318</id><snippet>None</snippet></ROW><ROW><id>1267487</id><snippet>import unicodedata
def eval_unicode(s):
    #sum all the unicode fractions
    u = sum(map(unicodedata.numeric, filter(lambda x: unicodedata.category(x)=="No",s)))
    #eval the regular digits (with optional dot) as a float, or default to 0
    n = float("".join(filter(lambda x:x.isdigit() or x==".", s)) or 0)
    return n+u
</snippet></ROW><ROW><id>1267487</id><snippet>import unicodedata
def eval_unicode(s):
    #sum all the unicode fractions
    u = sum(unicodedata.numeric(i) for i in s if unicodedata.category(i)=="No")
    #eval the regular digits (with optional dot) as a float, or default to 0
    n = float("".join(i for i in s if i.isdigit() or i==".") or 0)
    return n+u
</snippet></ROW><ROW><id>1267835</id><snippet>__str__</snippet></ROW><ROW><id>1267835</id><snippet>__repr__</snippet></ROW><ROW><id>1267835</id><snippet>t2.__repr_()</snippet></ROW><ROW><id>1267835</id><snippet>__unicode__</snippet></ROW><ROW><id>1267835</id><snippet>__str__</snippet></ROW><ROW><id>1267892</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; a = 4
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; c = a / b
&gt;&gt;&gt; c
0.66666666666666663
</snippet></ROW><ROW><id>1268111</id><snippet>&gt;&gt;&gt; FLAGS = ('User', 'Redo', 'Enqueue', 'Cache', 'OS',
...          'Real Application Clusters', 'SQL', 'Debug')
&gt;&gt;&gt; def getFlags(value):
...   flags = []
...   for i, flag in enumerate(FLAGS):
...     if value &amp; (1 &lt;&lt; i):
...       flags.append(flag)
...   return flags
...
&gt;&gt;&gt; print getFlags(22)
['Redo', 'Enqueue', 'OS']
</snippet></ROW><ROW><id>1268111</id><snippet>&gt;&gt;&gt; def binaryDecomposition(value):
...   return [1 &lt;&lt; i for i in xrange(len(FLAGS)) if value &amp; (1 &lt;&lt; i)]
...
&gt;&gt;&gt; print binaryDecomposition(22)
[2, 4, 16]
</snippet></ROW><ROW><id>1268461</id><snippet>x = BlogModel.BlogModel()
</snippet></ROW><ROW><id>1268461</id><snippet>from billion.model import BlogModel
</snippet></ROW><ROW><id>1268461</id><snippet>from billion.model.BlogModel import BlogModel
</snippet></ROW><ROW><id>1268461</id><snippet>x = BlogModel()
</snippet></ROW><ROW><id>1268493</id><snippet>class SomeModelForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(SomeModelForm, self).__init__(*args, **kwargs)
        self.fields['some_field'].widget = forms.CheckboxSelectMultiple()
</snippet></ROW><ROW><id>1268976</id><snippet>import urllib2
import re
from BeautifulSoup import BeautifulSoup

url = "http://forums.epicgames.com/archive/index.php?f-356-p-164.html"
page = urllib2.urlopen(url).read()
soup = BeautifulSoup(page)

# Get all the links
links = [str(match) for match in soup('a')]

s = r'&lt;a href="http://forums.epicgames.com/archive/index.php\?t-\d+.html"&gt;(.+?)&lt;/a&gt;' 
r = re.compile(s)
for link in links:
    m = r.match(link)
    if m:
        print m.groups(1)[0]
</snippet></ROW><ROW><id>1269024</id><snippet>all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = fragmentCategory.objects.get(id=1)))
</snippet></ROW><ROW><id>1269024</id><snippet>all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = 1))
</snippet></ROW><ROW><id>1269055</id><snippet>os.fork()</snippet></ROW><ROW><id>1269224</id><snippet>super(Derived, cls).do(a)
</snippet></ROW><ROW><id>1269258</id><snippet>if/else</snippet></ROW><ROW><id>1269258</id><snippet>((x &gt; y) and: [x &gt; z])
  ifTrue: [ ... ]
  ifFalse: [ ... ]
</snippet></ROW><ROW><id>1269258</id><snippet>and:</snippet></ROW><ROW><id>1269258</id><snippet>Boolean</snippet></ROW><ROW><id>1269258</id><snippet>&gt;</snippet></ROW><ROW><id>1269258</id><snippet>x</snippet></ROW><ROW><id>1269258</id><snippet>and:</snippet></ROW><ROW><id>1269258</id><snippet>Boolean</snippet></ROW><ROW><id>1269258</id><snippet>ifTrue:ifFalse:</snippet></ROW><ROW><id>1269367</id><snippet>style "font"
{
font_name = "Corbel 8"
}
widget_class "*" style "font"
gtk-font-name = "Corbel 8"
</snippet></ROW><ROW><id>1269733</id><snippet>Turn.game</snippet></ROW><ROW><id>1269733</id><snippet>Game</snippet></ROW><ROW><id>1269733</id><snippet>{{game.turn_set.all}}</snippet></ROW><ROW><id>1269733</id><snippet>Turn</snippet></ROW><ROW><id>1269733</id><snippet>Turn</snippet></ROW><ROW><id>1269733</id><snippet>Class Meta:
    ordering = ['-generated']
</snippet></ROW><ROW><id>1269733</id><snippet>{{game.turn_set.all.0}}</snippet></ROW><ROW><id>1269733</id><snippet>{{game.turn_set.all.0.generated}}</snippet></ROW><ROW><id>1269733</id><snippet>datetime</snippet></ROW><ROW><id>1269998</id><snippet>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;ctime&gt;
#include &lt;algorithm&gt;
#include &lt;windows.h&gt;

using namespace std;

void calcMain(int upperBound, vector&lt;int&gt;&amp; known);

int main()
{
    while(true)
    {
        vector&lt;int&gt; results;
        int upperBound;
        cout &lt;&lt; "Pick an upper bound: ";
        cin &gt;&gt; upperBound;
        long start, end;
        start = GetTickCount();
        calcMain(upperBound, results);
        end = GetTickCount();
        for (size_t i = 0; i &lt; results.size(); ++i) {
            cout &lt;&lt; results[i] &lt;&lt; ", ";
        }
        cout &lt;&lt; endl;
        double seconds = (double)(end-start) / 1000.0;
        cout &lt;&lt; seconds &lt;&lt; " seconds." &lt;&lt; endl &lt;&lt; endl;
    }
    return 0;
}

void calcMain(int upperBound, vector&lt;int&gt;&amp; known)
{
    vector&lt;int&gt; history;
    for(int i = 0; i &lt;= upperBound; i++)
    {
        int current = i;
        history.clear();
        while(true)
        {
                int temp = current;
                int sum = 0;
                while (temp &gt; 0) {
                    sum += (temp % 10) * (temp % 10);
                    temp /= 10;
                }
                current = sum;
                if(find(history.begin(), history.end(), current) != history.end())
                {
                        if(current == 1)
                        {
                                known.push_back(i);
                        }
                        break;
                }
                history.push_back(current);
        }
    }
}
</snippet></ROW><ROW><id>1270621</id><snippet>.__doc__</snippet></ROW><ROW><id>1270621</id><snippet>&gt;&gt;&gt; print str.__doc__
</snippet></ROW><ROW><id>1270621</id><snippet>&gt;&gt;&gt; print(str.__doc__)
</snippet></ROW><ROW><id>1270756</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import struct
&gt;&gt;&gt; inspect.getabsfile(struct)
'c:\\python26\\lib\\struct.py'
</snippet></ROW><ROW><id>1270938</id><snippet>all</snippet></ROW><ROW><id>1270938</id><snippet>if all(e is None for e in myList):
    print('all empty or None')
</snippet></ROW><ROW><id>1270938</id><snippet>False</snippet></ROW><ROW><id>1270938</id><snippet>any</snippet></ROW><ROW><id>1270938</id><snippet>if not any(myList):
    print('all empty or evaluating to False')
</snippet></ROW><ROW><id>1270970</id><snippet>fn = os.path.join(os.path.dirname(__file__), 'my_file')
</snippet></ROW><ROW><id>1271007</id><snippet>for line in lines:
    line = line[2:]
    # do something here
</snippet></ROW><ROW><id>1271388</id><snippet>Enumerable.Range</snippet></ROW><ROW><id>1271388</id><snippet>var mySequence = Enumerable.Range(0, 12);
</snippet></ROW><ROW><id>1271481</id><snippet>itertools.tee()</snippet></ROW><ROW><id>1271481</id><snippet>y = FunctionWithYield()
y, y_backup = tee(y)
for x in y:
    print(x)
for x in y_backup:
    print(x)
</snippet></ROW><ROW><id>1271495</id><snippet>c:\Python26\python.exe setup.py ...
</snippet></ROW><ROW><id>1271495</id><snippet>C:\Users\rjh&gt;assoc .py
.py=Python.File

C:\Users\rjh&gt;ftype Python.File
Python.File="C:\Python26\python.exe" "%1" %*
</snippet></ROW><ROW><id>1271914</id><snippet>TEMPLATE_CONTEXT_PREPROCESSORS</snippet></ROW><ROW><id>1271914</id><snippet>settings.py</snippet></ROW><ROW><id>1271914</id><snippet>debug</snippet></ROW><ROW><id>1271914</id><snippet>debug</snippet></ROW><ROW><id>1271914</id><snippet>settings.DEBUG</snippet></ROW><ROW><id>1271914</id><snippet>settings.INTERNAL_IPS</snippet></ROW><ROW><id>1271914</id><snippet>settings.INTERNAL_IPS</snippet></ROW><ROW><id>1272338</id><snippet>rsplit</snippet></ROW><ROW><id>1272338</id><snippet>line = "hello, world    , 1       , 2   , 3"
parts = line.rsplit(",", 3)
print parts  # prints ['hello, world    ', ' 1       ', ' 2   ', ' 3']
</snippet></ROW><ROW><id>1272338</id><snippet>strip</snippet></ROW><ROW><id>1272338</id><snippet>parts = [s.strip() for s in parts]
print parts  # prints ['hello, world', '1', '2', '3']
</snippet></ROW><ROW><id>1272505</id><snippet>del Files[5:]
</snippet></ROW><ROW><id>1272505</id><snippet>del</snippet></ROW><ROW><id>1272505</id><snippet>for file in Files[:5]:
  #...
</snippet></ROW><ROW><id>1273217</id><snippet>aptitude install python-numpy
</snippet></ROW><ROW><id>1273217</id><snippet>http://sourceforge.net/projects/numpy/files/NumPy/</snippet></ROW><ROW><id>1273217</id><snippet>http://sourceforge.net/projects/numpy/files/NumPy/</snippet></ROW><ROW><id>1273217</id><snippet>$ tar xfz numpy-n.m.tar.gz
$ cd numpy-n.m
$ python setup.py install
</snippet></ROW><ROW><id>1273233</id><snippet>assert(False)
print 'Done'
</snippet></ROW><ROW><id>1273233</id><snippet>C:\temp\py&gt;C:\Python26\python.exe test.py
Traceback (most recent call last):
  File "test.py", line 1, in &lt;module&gt;
    assert(False)
AssertionError

C:\temp\py&gt;C:\Python26\python.exe -O test.py
Done
</snippet></ROW><ROW><id>1273533</id><snippet>destination = open('fyi.xml', 'wb+')
</snippet></ROW><ROW><id>1273533</id><snippet>upload_dir = settings.MEDIA_ROOT # or wherever
destination = open(os.path.join(upload_dir, 'fyi.xml'), 'wb+')
</snippet></ROW><ROW><id>1273603</id><snippet>xticks</snippet></ROW><ROW><id>1273603</id><snippet>plot</snippet></ROW><ROW><id>1273646</id><snippet>gcc</snippet></ROW><ROW><id>1273646</id><snippet>i686-apple-darwin9-gcc-4.0.1: no input files</snippet></ROW><ROW><id>1273646</id><snippet>tar xzf psyco-1.6-src.tar.gz</snippet></ROW><ROW><id>1273646</id><snippet>python setup.py install</snippet></ROW><ROW><id>1273646</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>1274141</id><snippet>self.assertRaises(AttributeError, getattr, branch[0], "childrennodes")
</snippet></ROW><ROW><id>1274141</id><snippet>@raises(AttributeError)
def test_1(self)
    branch[0].childrennodes
</snippet></ROW><ROW><id>1274374</id><snippet>Album title1
song1 title
song1 url
song2 title
song2 url

Album title2
song1 title
song1 url
song2 title
song2 url
</snippet></ROW><ROW><id>1274374</id><snippet>from django.utils import simplejson

def gen_groups(lines):
   """ Returns contiguous groups of lines in a file """

   group = []

   for line in lines:
      line = line.strip()
      if not line and group:
         yield group
         group = []
      elif line:
         group.append(line)


def gen_albums(groups):
   """ Given groups of lines in an album file, returns albums  """

   for group in groups:
      title    = group.pop(0)
      songinfo = zip(*[iter(group)]*2)
      songs    = [dict(title=title,url=url) for title,url in songinfo]
      album    = dict(title=title, songs=songs)

      yield album


input = open('albums.txt')
groups = gen_groups(input)
albums = gen_albums(groups)

print simplejson.dumps(list(albums))
</snippet></ROW><ROW><id>1274374</id><snippet>[{"songs": [{"url": "song1 url", "title": "song1 title"}, {"url": "song2 url", "title": "song2 title"}], "title": "song2
title"},
{"songs": [{"url": "song1 url", "title": "song1 title"}, {"url": "song2 url", "title": "song2 title"}], "title": "song2
title"}]
</snippet></ROW><ROW><id>1274374</id><snippet>var url = albums[1].songs[0].url;
</snippet></ROW><ROW><id>1274465</id><snippet>newpath = r'C:\Program Files\arbitrary' 
if not os.path.exists(newpath): os.makedirs(newpath)
</snippet></ROW><ROW><id>1274505</id><snippet>$n &lt;&lt;= 1;</snippet></ROW><ROW><id>1274528</id><snippet>import os

asps = []
for root, dirs, files in os.walk(r'C:\web'):
    for file in files:
    	if file.endswith('.asp'):
    		asps.append(file)
</snippet></ROW><ROW><id>1274887</id><snippet>first,second = foo(True) or (None,None)
first,second = foo(False) or (None,None)
</snippet></ROW><ROW><id>1274918</id><snippet>rex = re.compile(r'\W+')
result = rex.sub(' ', strarg).upper()
</snippet></ROW><ROW><id>1274918</id><snippet>strarg</snippet></ROW><ROW><id>1275088</id><snippet>def Struct(*args, **kwargs):
    def init(self, *iargs, **ikwargs):
        for k,v in kwargs.items():
            setattr(self, k, v)
        for i in range(len(iargs)):
            setattr(self, args[i], iargs[i])
        for k,v in ikwargs.items():
            setattr(self, k, v)

    name = kwargs.pop("name", "MyStruct")
    kwargs.update(dict((k, None) for k in args))
    return type(name, (object,), {'__init__': init, '__slots__': kwargs.keys()})
</snippet></ROW><ROW><id>1275088</id><snippet>__init__()</snippet></ROW><ROW><id>1275088</id><snippet>&gt;&gt;&gt; Person = Struct('fname', 'age')
&gt;&gt;&gt; person1 = Person('Kevin', 25)
&gt;&gt;&gt; person2 = Person(age=42, fname='Terry')
&gt;&gt;&gt; person1.age += 10
&gt;&gt;&gt; person2.age -= 10
&gt;&gt;&gt; person1.fname, person1.age, person2.fname, person2.age
('Kevin', 35, 'Terry', 32)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1275088</id><snippet>namedtuple()</snippet></ROW><ROW><id>1275999</id><snippet>    class Choice(models.Model):
        text = models.CharField(max_length=200) 

        def calculateVotes(self):
            return Vote.objects.filter(choice = self).count()

        votes = property(calculateVotes)
</snippet></ROW><ROW><id>1275999</id><snippet>    {% for choice in choices %}
            {{choice.choice}} - {{choice.votes}} &lt;br /&gt;
    {% endfor %}
</snippet></ROW><ROW><id>1276473</id><snippet>&lt;font size="3" face="Trebuchet MS"&gt;Speak Your Mind:  &lt;/font&gt;&lt;input type="text"     
size="60" id="entry"/&gt; &lt;img valign="bottom" src='/assets/cognifyup.png' 
onMouseOver="over()" onMouseOut="out()" onMouseDown="out(); evaluate();" 
onMouseUp="over()"&gt;&lt;br&gt;&lt;br&gt;
</snippet></ROW><ROW><id>1276473</id><snippet>over()</snippet></ROW><ROW><id>1276473</id><snippet>out()</snippet></ROW><ROW><id>1276473</id><snippet>get()</snippet></ROW><ROW><id>1276473</id><snippet>getJSON()</snippet></ROW><ROW><id>1276473</id><snippet>str()</snippet></ROW><ROW><id>1276473</id><snippet>self.request.get('entry')</snippet></ROW><ROW><id>1276473</id><snippet>self.response.out.write({'evalresult': self.request.get('entry')})</snippet></ROW><ROW><id>1276473</id><snippet>self.response.out.write({'evalresult': str(self.request.get('entry'))})</snippet></ROW><ROW><id>1276473</id><snippet>getJSON()</snippet></ROW><ROW><id>1276582</id><snippet>'''Very simple enforcer of type annotations.

This toy super-decorator can decorate all functions in a given module that have 
annotations so that the type of input and output is enforced; an AssertionError is
raised on mismatch.

This module also has a test function func() which should fail and logging facility 
log which defaults to print. 

Since this is a test module, I cut corners by only checking *keyword* arguments.

'''

import sys

log = print


def func(x:'int' = 0) -&gt; 'str':
    '''An example function that fails type checking.'''
    return x


# For simplicity, I only do keyword args.
def check_type(*args):
    param, value, assert_type = args
    log('Checking {0} = {1} of {2}.'.format(*args))
    if not isinstance(value, assert_type):
        raise AssertionError(
            'Check failed - parameter {0} = {1} not {2}.'
            .format(*args))
    return value

def decorate_func(func):    
    def newf(*args, **kwargs):
        for k, v in kwargs.items():
            check_type(k, v, ann[k])
        return check_type('&lt;return_value&gt;', func(*args, **kwargs), ann['return'])

    ann = {k: eval(v) for k, v in func.__annotations__.items()}
    newf.__doc__ = func.__doc__
    newf.__type_checked = True
    return newf

def decorate_module(module = '__main__'):
    '''Enforces type from annotation for all functions in module.'''
    d = sys.modules[module].__dict__
    for k, f in d.items():
        if getattr(f, '__annotations__', {}) and not getattr(f, '__type_checked', False):
            log('Decorated {0!r}.'.format(f.__name__))
            d[k] = decorate_func(f)


if __name__ == '__main__':
    decorate_module()

    # This will raise AssertionError.
    func(x = 5)
</snippet></ROW><ROW><id>1276582</id><snippet>height = 1.75 # Bob's height in meters.
length = len(sys.modules) # Number of modules imported by program.
area = height * length # What's that supposed to mean???
</snippet></ROW><ROW><id>1276582</id><snippet>height</snippet></ROW><ROW><id>1276582</id><snippet>length</snippet></ROW><ROW><id>1276582</id><snippet>int</snippet></ROW><ROW><id>1276582</id><snippet>float</snippet></ROW><ROW><id>1276582</id><snippet>width * height -&gt; area</snippet></ROW><ROW><id>1276896</id><snippet>from subprocess import Popen

     if __name__ == '__main__':
          Popen('C:/the_programm.exe', close_fds=True)
</snippet></ROW><ROW><id>1277047</id><snippet>$ python -m timeit -s \
     "import string" \
     "''.join(ch for ch in string.printable if ch.isalnum())" 
10000 loops, best of 3: 57.6 usec per loop

$ python -m timeit -s \
    "import string" \
    "filter(str.isalnum, string.printable)"                 
10000 loops, best of 3: 37.9 usec per loop

$ python -m timeit -s \
    "import re, string" \
    "re.sub('[\W_]', '', string.printable)"
10000 loops, best of 3: 27.5 usec per loop

$ python -m timeit -s \
    "import re, string" \
    "re.sub('[\W_]+', '', string.printable)"                
100000 loops, best of 3: 15 usec per loop

$ python -m timeit -s \
    "import re, string; pattern = re.compile('[\W_]+')" \
    "pattern.sub('', string.printable)" 
100000 loops, best of 3: 11.2 usec per loop
</snippet></ROW><ROW><id>1277311</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>1277311</id><snippet>map</snippet></ROW><ROW><id>1277311</id><snippet>None</snippet></ROW><ROW><id>1277311</id><snippet>map</snippet></ROW><ROW><id>1277311</id><snippet>&gt;&gt;&gt; map(None, a, b, c)
[('a1', 'b1', 'c1'), (None, 'b2', 'c2'), (None, 'b3', None)]
</snippet></ROW><ROW><id>1277421</id><snippet>cd /tmp
wget http://lxml.de/files/lxml-2.2.2.tgz
tar -xzvf lxml-2.2.2.tgz 
cd lxml-2.2.2
python setup.py build --static-deps --libxml2-version=2.7.3  --libxslt-version=1.1.24 
sudo python setup.py install
</snippet></ROW><ROW><id>1277993</id><snippet>import operator
filter(operator.isNumberType, list_1)
</snippet></ROW><ROW><id>1277993</id><snippet>import numbers
[x for x in list_1 if isinstance(x, numbers.Number)]
</snippet></ROW><ROW><id>1278000</id><snippet>data_stream = Popen(mycmd, stdin=PIPE, stdout=PIPE)
data_stream.stdin.write("do something\n")
for line in data_stream:
  ...  # BAD!
</snippet></ROW><ROW><id>1278000</id><snippet>data_stream = Popen(mycmd, stdout=PIPE)
for line in data_stream.stdout:
   ...  # Fine
</snippet></ROW><ROW><id>1278070</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; isinstance({},collections.Mapping)
True
</snippet></ROW><ROW><id>1278351</id><snippet>def lv1(d):
  locals().update(d)
  print zap
</snippet></ROW><ROW><id>1278351</id><snippet>zap</snippet></ROW><ROW><id>1278351</id><snippet>lv1</snippet></ROW><ROW><id>1278351</id><snippet>d</snippet></ROW><ROW><id>1278351</id><snippet>exec</snippet></ROW><ROW><id>1278351</id><snippet>exec</snippet></ROW><ROW><id>1278351</id><snippet>def lv1(d):
  exec ""
  locals().update(d)
  print zap

lv1({'zap': 23})
</snippet></ROW><ROW><id>1278351</id><snippet>23</snippet></ROW><ROW><id>1278351</id><snippet>print zap</snippet></ROW><ROW><id>1278351</id><snippet>print locals()['zap']</snippet></ROW><ROW><id>1278351</id><snippet>exec</snippet></ROW><ROW><id>1278685</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

X = 10*np.random.rand(5,3)

fig = plt.figure(figsize=(15,5),facecolor='w') 
ax = fig.add_subplot(111)
ax.imshow(X, cmap=cm.jet)

plt.savefig("image.png",bbox_inches='tight',dpi=100)
</snippet></ROW><ROW><id>1278740</id><snippet>import sys, os

try:
    raise NotImplementedError("No error")
except Exception as e:
    exc_type, exc_obj, exc_tb = sys.exc_info()
    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    print(exc_type, fname, exc_tb.tb_lineno)
</snippet></ROW><ROW><id>1278792</id><snippet>if any(row[key] in (None, "") for key in row):
    # raise error
</snippet></ROW><ROW><id>1278792</id><snippet>if any(val in (None, "") for val in row.itervalues()):
    # raise error
</snippet></ROW><ROW><id>1278998</id><snippet>import py_streamhtmlparser
parser = py_streamhtmlparser.HtmlParser()
html = """&lt;html&gt;&lt;body&gt;&lt;a href='http://google.com' id=100&gt;
        link&lt;/a&gt;&lt;p&gt;&lt;a href=heise.de/&gt;&lt;/body&gt;&lt;/html&gt;"""
cur_attr = cur_value = None
for index, character in enumerate(html):
   parser.Parse(character)
   if parser.State() == py_streamhtmlparser.HTML_STATE_VALUE:
      # we are in an attribute value. Record what we got so far
      cur_tag = parser.Tag()
      cur_attr = parser.Attribute()
      cur_value = parser.Value()
      continue
   if cur_value:
      # we are not in the value anymore, but have seen one just before
      print "%r %r %r" % (cur_tag, cur_attr, cur_value)
      cur_value = None
</snippet></ROW><ROW><id>1278998</id><snippet>'a' 'href' 'http://google.com'
'a' 'id' '100'
'a' 'href' 'heise.de/'
</snippet></ROW><ROW><id>1279095</id><snippet>os.system()</snippet></ROW><ROW><id>1279095</id><snippet>subprocess</snippet></ROW><ROW><id>1279251</id><snippet>StringIO</snippet></ROW><ROW><id>1279251</id><snippet>cStringIO</snippet></ROW><ROW><id>1279291</id><snippet>ordering</snippet></ROW><ROW><id>1279291</id><snippet>Meta</snippet></ROW><ROW><id>1279291</id><snippet>ordering</snippet></ROW><ROW><id>1279291</id><snippet>class Department(models.Model):
    name = models.CharField(max_length=100)
    abbreviation = models.CharField(max_length=4)

    class Meta:
        ordering = ["name"]
</snippet></ROW><ROW><id>1279291</id><snippet>Department</snippet></ROW><ROW><id>1279291</id><snippet>ModelForm</snippet></ROW><ROW><id>1279291</id><snippet>widget</snippet></ROW><ROW><id>1279422</id><snippet>curses/__init__.py</snippet></ROW><ROW><id>1279422</id><snippet>ACS_*</snippet></ROW><ROW><id>1279422</id><snippet>_curses</snippet></ROW><ROW><id>1279422</id><snippet>initscr()</snippet></ROW><ROW><id>1279422</id><snippet>initscr()</snippet></ROW><ROW><id>1279422</id><snippet>initscr()</snippet></ROW><ROW><id>1279422</id><snippet>_curses</snippet></ROW><ROW><id>1279422</id><snippet>from curses
  import *</snippet></ROW><ROW><id>1279422</id><snippet>ACS_*</snippet></ROW><ROW><id>1279422</id><snippet>&gt;&gt;&gt; import curses
&gt;&gt;&gt; curses.ACS_ULCORNER
exception
&gt;&gt;&gt; curses.initscr()
&gt;&gt;&gt; curses.ACS_ULCORNER
&gt;&gt;&gt; 4194412
</snippet></ROW><ROW><id>1279428</id><snippet>http://dev.mysql.com/doc/refman/5.0/en/mysql-cluster.html
</snippet></ROW><ROW><id>1279554</id><snippet>max_versions = session.query(Cls.name, func.max(Cls.version).label('max_version'))\
                      .group_by(Cls.name).subquery()
objs = session.query(Cls).join((max_versions,
           and_(Cls.name == max_versions.c.name,
                Cls.version == max_versions.c.max_version)
       )).all()
</snippet></ROW><ROW><id>1279554</id><snippet>SELECT tbl.id AS tbl_id, tbl.name AS tbl_name, tbl.version AS tbl_version
FROM tbl JOIN (SELECT tbl.name AS name, max(tbl.version) AS max_version
FROM tbl GROUP BY tbl.name) AS anon_1 ON tbl.name = anon_1.name AND tbl.version = anon_1.max_version
</snippet></ROW><ROW><id>1279980</id><snippet>query = session.query(Zipcode).options(eagerload('zipcode')).filter(Zipcode.state.in_(['NH', 'ME'])).all()
</snippet></ROW><ROW><id>1280334</id><snippet>CountryNameCode</snippet></ROW><ROW><id>1280397</id><snippet>re.sub('\.(?!(\S[^. ])|\d)', '', s)
</snippet></ROW><ROW><id>1280415</id><snippet>from datetime import datetime

def copyright_dates(start_year = datetime.now().year):
    return " - ".join(str(y) for y in sorted(set([start_year, datetime.now().year])))
</snippet></ROW><ROW><id>1280464</id><snippet>import itertools
import pprint

L = [{"value1": "fssd", "value2": "dsfds", "value3": "abcd", "value4": "gk"},
    {"value1": "asdasd", "value2": "asdas", "value3": "dafdd", "value4": "sdfsdf"},
    {"value1": "sdfsf", "value2": "sdfsdf", "value3": "abcd", "value4": "gk"},
    {"value1": "asddas", "value2": "asdsa", "value3": "abcd", "value4": "gk"},
    {"value1": "asdasd", "value2": "dskksks", "value3": "ldlsld", "value4": "sdlsld"}]

getvals = operator.itemgetter('value3', 'value4')

L.sort(key=getvals)

result = []
for k, g in itertools.groupby(L, getvals):
    result.append(g.next())

L[:] = result
pprint.pprint(L)
</snippet></ROW><ROW><id>1280493</id><snippet>exec</snippet></ROW><ROW><id>1280493</id><snippet>&gt;&gt;&gt; bytecode = compile('value += 5', '&lt;string&gt;', 'exec')
&gt;&gt;&gt; mydict = {'value': 23}
&gt;&gt;&gt; exec(bytecode, mydict)
&gt;&gt;&gt; mydict['value']
28
</snippet></ROW><ROW><id>1280493</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(bytecode)
  1           0 LOAD_NAME                0 (value)
              3 LOAD_CONST               0 (5)
              6 INPLACE_ADD         
              7 STORE_NAME               0 (value)
             10 LOAD_CONST               1 (None)
             13 RETURN_VALUE
</snippet></ROW><ROW><id>1280493</id><snippet>compile</snippet></ROW><ROW><id>1280493</id><snippet>&gt;&gt;&gt; def f(): value += 5
... 
&gt;&gt;&gt; dis.dis(f.func_code)
  1           0 LOAD_FAST                0 (value)
              3 LOAD_CONST               1 (5)
              6 INPLACE_ADD         
              7 STORE_FAST               0 (value)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</snippet></ROW><ROW><id>1280493</id><snippet>exec</snippet></ROW><ROW><id>1280698</id><snippet>import pyglet

key = pyglet.window.key

win = pyglet.window.Window()
keyboard = key.KeyStateHandler()
win.push_handlers(keyboard)

print keyboard[key.UP] and keyboard[key.LEFT]
</snippet></ROW><ROW><id>1280724</id><snippet>from itertools import product
for y, x in product(range(3), repeat=2):
  do_something()
  for y1, x1 in product(range(3), repeat=2):
    do_something_else()
</snippet></ROW><ROW><id>1280800</id><snippet>import module

print dir(module) # Find functions of interest.

# For each function of interest:
help(module.interesting_function)
print module.interesting_function.func_defaults
</snippet></ROW><ROW><id>1281041</id><snippet>sizer = wx.BoxSizer(wx.VERTICAL)
sizer.Add(widget1, 0, wx.EXPAND)
sizer.Add(widget2, 1)
</snippet></ROW><ROW><id>1281103</id><snippet>Dir['**/*'].each { |f| print f }
</snippet></ROW><ROW><id>1281186</id><snippet>global</snippet></ROW><ROW><id>1281186</id><snippet>def foo():
    global G
    if G is None:
        G = 1
</snippet></ROW><ROW><id>1281186</id><snippet>global</snippet></ROW><ROW><id>1281186</id><snippet>nonlocal</snippet></ROW><ROW><id>1281186</id><snippet>global</snippet></ROW><ROW><id>1281186</id><snippet>def foo():
    x = 5
    def bar():
        nonlocal x
        x = x * 2
    bar()
    return x
</snippet></ROW><ROW><id>1281446</id><snippet>--selftest</snippet></ROW><ROW><id>1281659</id><snippet>from AppKit import NSScreen

print NSScreen.mainScreen().frame()
</snippet></ROW><ROW><id>1281659</id><snippet>NSScreen.mainScreen().frame().width
NSScreen.mainScreen().frame().height
</snippet></ROW><ROW><id>1281758</id><snippet>for i, x in enumerate(SomeArray):
    print i, x
</snippet></ROW><ROW><id>1281758</id><snippet>enumerate</snippet></ROW><ROW><id>1282019</id><snippet>pg_connection_status</snippet></ROW><ROW><id>1282027</id><snippet>d = {}
for line in open("file"):
    line=line.strip()
    if line.endswith("\\"):
        directory = line.split(":")[-1].strip().replace("\\","")
        d.setdefault(directory,[])
    if line.startswith("-&gt;"):
        song=line.split(" ")[-1]
        d[directory].append(song)
print d
</snippet></ROW><ROW><id>1282027</id><snippet># python python.py
{'Images': ['01-some_image1.jpg', '02-some_image2.jpg'], 'Music': ['01-some_song1.mp3', '02-some_song2.mp3', '03-some_song3.mp3']}
</snippet></ROW><ROW><id>1282358</id><snippet>#!/Python26/
# -*- coding: utf-8 -*-

import sys

def main(argv):
    if len(argv) &lt; 2:
        sys.stderr.write("Usage: %s &lt;file.txt&gt;" % (argv[0],))
        return 1

    f = open(sys.argv[1])
    lines = f.readlines()
    f.close()

    for line in lines:
        line = line.strip()
        etc...

if __name__ == "__main__":
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>1282550</id><snippet>super</snippet></ROW><ROW><id>1282550</id><snippet>class MyConnectionPlugin(object):
  def __init__(self, *args, **kw):
    super(MyConnectionPlugin, self).__init__(*args, **kw)
    # etc etc -- rest of initiatizations, other methods

class SecureConnection(MyConnectionPlugin,
                       httplib.HTTPSConnection, object):
  pass

class PlainConnection(MyConnectionPlugin,
                      httplib.HTTPConnection, object):
  pass

def ConnectionClass(secure):
  if secure:
    return SecureConnection
  else:
    return PlainConnection

conn = ConnectionClass(whatever_expression())()
</snippet></ROW><ROW><id>1282550</id><snippet>__class__</snippet></ROW><ROW><id>1282550</id><snippet>object</snippet></ROW><ROW><id>1282550</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; class Z(object): pass
... 
&gt;&gt;&gt; class Y(Z, httplib.HTTPConnection): pass
... 
&gt;&gt;&gt; Y.mro()
[&lt;class '__main__.Y'&gt;, &lt;class '__main__.Z'&gt;, &lt;type 'object'&gt;, &lt;class httplib.HTTPConnection at 0x264ae0&gt;]
&gt;&gt;&gt; class X(Z, httplib.HTTPConnection, object): pass
... 
&gt;&gt;&gt; X.mro()
[&lt;class '__main__.X'&gt;, &lt;class '__main__.Z'&gt;, &lt;class httplib.HTTPConnection at 0x264ae0&gt;, &lt;type 'object'&gt;]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1282550</id><snippet>object</snippet></ROW><ROW><id>1282550</id><snippet>super</snippet></ROW><ROW><id>1282557</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>1282557</id><snippet>templates/contact/update_form.html</snippet></ROW><ROW><id>1282557</id><snippet>{{ form.field.label }}</snippet></ROW><ROW><id>1282557</id><snippet>ContactInfoForm</snippet></ROW><ROW><id>1282557</id><snippet>__init__</snippet></ROW><ROW><id>1282557</id><snippet>*</snippet></ROW><ROW><id>1282557</id><snippet>*</snippet></ROW><ROW><id>1282840</id><snippet>as</snippet></ROW><ROW><id>1282840</id><snippet>aap</snippet></ROW><ROW><id>1283062</id><snippet>print</snippet></ROW><ROW><id>1283063</id><snippet>screencapture -x -T 0 /tmp/zap.png</snippet></ROW><ROW><id>1283281</id><snippet>import itertools

results = []
for x in itertools.product(range(3), repeat=12):
    if myfilter(x):
        results.append(x)
</snippet></ROW><ROW><id>1283281</id><snippet>myfilter</snippet></ROW><ROW><id>1283281</id><snippet>def myfilter(x):  # example filter, only take lists with 10 or more 1s
    return x.count(1)&gt;=10
</snippet></ROW><ROW><id>1283281</id><snippet>results = [x for x in itertools.product(range(3), repeat=12) if myfilter(x)]
</snippet></ROW><ROW><id>1283300</id><snippet>ipipe</snippet></ROW><ROW><id>1283400</id><snippet>django-tagging</snippet></ROW><ROW><id>1283400</id><snippet>tests.py</snippet></ROW><ROW><id>1283400</id><snippet>tests</snippet></ROW><ROW><id>1283486</id><snippet>import gtk
pixbuf = gtk.gdk.pixbuf_new_from_file('/path/to/the/image.png')
</snippet></ROW><ROW><id>1283486</id><snippet>pixbuf = pixbuf.scale_simple(width, height, gtk.gdk.INTERP_BILINEAR)
</snippet></ROW><ROW><id>1283486</id><snippet>image = gkt.Image()
image.set_from_pixbuf(pixbuf)
</snippet></ROW><ROW><id>1283486</id><snippet>image = gtk.image_new_from_pixbuf(pixbuf)
</snippet></ROW><ROW><id>1283500</id><snippet>import gtk

window = gtk.Window()
window.connect('delete-event',lambda widget, event: True)
</snippet></ROW><ROW><id>1283851</id><snippet>from django.contrib import admin
</snippet></ROW><ROW><id>1283851</id><snippet>import mysite.poll.urls
...
(r'^polls/', include(mysite.poll.urls)),
...
</snippet></ROW><ROW><id>1284168</id><snippet>from sqlalchemy import create_engine, MetaData
from sqlalchemy.ext.declarative import declarative_base

metadata = MetaData(create_engine(database_url), reflect=True)
Base = declarative_base(metadata)    

class Order(Base):
    __table__ = metadata.tables['orders']

class OrderLine(Base):
    __table__ = metadata.tables['orderlines']
    order = relation(Order, backref='lines')
</snippet></ROW><ROW><id>1284168</id><snippet>from cPickle import dump, load
import os

if os.path.exists('metadata.cache'):
    metadata = load(open('metadata.cache'))
    metadata.bind = create_engine(database_url)
else:
    metadata = MetaData(create_engine(database_url), reflect=True)
    dump(metadata, open('metadata.cache', 'w'))
</snippet></ROW><ROW><id>1284454</id><snippet>MyModel.objects.filter(
                       primaryid=1987
                      ).exclude(
                       timestamp__lt=min_timestamp
                      ).exclude(
                       timestamp__gt=max_timestamp
                      ).values_list('valuefield', flat=True)
</snippet></ROW><ROW><id>1284454</id><snippet>MyModel.objects.filter(
                       primaryid=1987
                      ).filter(
                       timestamp__gte=min_timestamp
                      ).exclude(
                       timestamp__gte=max_timestamp
                      ).values_list('valuefield', flat=True)
</snippet></ROW><ROW><id>1284510</id><snippet>class AssignmentFilterForm(forms.Form):
def __init__(self, pg, request = None):
	super(forms.Form, self).__init__(request)
	self.filters = []

	self.filters.append(PatientFilter('All'))
	self.filters.append(PatientFilter('Assigned', 'service__isnull', False))
	self.filters.append(PatientFilter('Unassigned', 'service__isnull', True))
	self.addPhysicians(pg)

	self.fields['filter'] = forms.ChoiceField()
	for i, f in enumerate(self.filters):
		self.fields['filter'].choices.append((i, f.name))
</snippet></ROW><ROW><id>1284802</id><snippet>import re
re.sub(pattern, '', s)
</snippet></ROW><ROW><id>1284971</id><snippet>save</snippet></ROW><ROW><id>1284971</id><snippet>daterange</snippet></ROW><ROW><id>1284971</id><snippet>from datetime import timedelta

def daterange(start_date, end_date):
    for n in range((end_date - start_date).days):
        yield start_date + timedelta(n)


class StatusEntry(models.Model):
    name = models.TextField()
    date = models.DateField()
    status = models.BooleanField()

    def __unicode__(self):
        return "%s - %s - %s" % (self.name, unicode(self.status), unicode(self.date))

    def save(self, fill=True):
        if fill and not self.id: # autofill on insert, not on update
            newest = StatusEntry.objects.all().order_by("-date")[:1]
            if newest and newest[0].date &lt; self.date:
                for date in daterange(newest[0].date + timedelta(1), self.date):
                    entry = StatusEntry(name=self.name, date=date, status=False)
                    entry.save(fill=False)
        super(StatusEntry, self).save()
</snippet></ROW><ROW><id>1285174</id><snippet>raw=True</snippet></ROW><ROW><id>1285287</id><snippet>object</snippet></ROW><ROW><id>1285287</id><snippet>__dict__</snippet></ROW><ROW><id>1285287</id><snippet>&gt;&gt;&gt; dir(object())
['__class__', '__delattr__', '__doc__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__str__']
</snippet></ROW><ROW><id>1285287</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = {}
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar = 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute 'bar'
</snippet></ROW><ROW><id>1285287</id><snippet>slots</snippet></ROW><ROW><id>1285287</id><snippet>__slots__</snippet></ROW><ROW><id>1285287</id><snippet>__dict__</snippet></ROW><ROW><id>1285287</id><snippet>&gt;&gt;&gt; class test: pass
...
&gt;&gt;&gt; getattr(test(), '__dict__')
{}
&gt;&gt;&gt; getattr(object(), '__dict__')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute '__dict__'
</snippet></ROW><ROW><id>1285287</id><snippet>__dict__</snippet></ROW><ROW><id>1285287</id><snippet>__slots__</snippet></ROW><ROW><id>1285287</id><snippet>__dict__</snippet></ROW><ROW><id>1285770</id><snippet>l = [0, 1, 1, 2, 2]
d = {}
for i in l: d[i] = d.has_key(i)

[k for k in d.keys() if not d[k]]
</snippet></ROW><ROW><id>1285920</id><snippet>&gt;&gt;&gt; if all (k in foo for k in ("foo","bar")):
...     print "They're there!"
...
They're there!
</snippet></ROW><ROW><id>1286047</id><snippet>xitem = ClientForm.Item(browser.form.find_control(name="field1"), 
        {'contents':'E', 'value':'E', 'label':'E'})
</snippet></ROW><ROW><id>1286047</id><snippet>xitem = ClientForm.Item(browser.form.find_control(name="field2"),
        {'type':'radio', 'name':'field2', 'value':'X'})
</snippet></ROW><ROW><id>1286249</id><snippet>self.gen_groups(...)</snippet></ROW><ROW><id>1286249</id><snippet>self.gen_albums(...)</snippet></ROW><ROW><id>1286249</id><snippet>TypeError</snippet></ROW><ROW><id>1286249</id><snippet>gen_groups()</snippet></ROW><ROW><id>1286249</id><snippet>def get_groups(self, lines):
    ...
</snippet></ROW><ROW><id>1286777</id><snippet>(start, end)</snippet></ROW><ROW><id>1286817</id><snippet>strptime</snippet></ROW><ROW><id>1286817</id><snippet>datetime</snippet></ROW><ROW><id>1286817</id><snippet>time</snippet></ROW><ROW><id>1286817</id><snippet>datetime</snippet></ROW><ROW><id>1286817</id><snippet>from datetime import datetime
dt = datetime.strptime(s, "%d/%m/%Y-%H:%M:%S")
</snippet></ROW><ROW><id>1286817</id><snippet>from datetime import datetime
from time import strptime
dt = datetime(*strptime(s, "%d/%m/%Y-%H:%M:%S")[0:6])
</snippet></ROW><ROW><id>1287621</id><snippet>nltk</snippet></ROW><ROW><id>1287621</id><snippet>nltk/__init__.py</snippet></ROW><ROW><id>1287621</id><snippet>nltk/internals.py</snippet></ROW><ROW><id>1287621</id><snippet>nltk</snippet></ROW><ROW><id>1287621</id><snippet>nltk</snippet></ROW><ROW><id>1287621</id><snippet>from nltk import __file__</snippet></ROW><ROW><id>1287629</id><snippet>from datetime import datetime, time
</snippet></ROW><ROW><id>1287629</id><snippet>import time
from datetime import datetime
</snippet></ROW><ROW><id>1287629</id><snippet>time</snippet></ROW><ROW><id>1288382</id><snippet>struct</snippet></ROW><ROW><id>1288382</id><snippet>array</snippet></ROW><ROW><id>1288382</id><snippet>array</snippet></ROW><ROW><id>1288382</id><snippet>array</snippet></ROW><ROW><id>1288546</id><snippet>(defun my-format-python-text ()
  "untabify and wrap python comments"
  (interactive)
  (untabify (point-min) (point-max))
  (goto-char (point-min))
  (while (re-search-forward comment-start nil t)
    (call-interactively 'fill-paragraph)
    (forward-line 1)))
</snippet></ROW><ROW><id>1288546</id><snippet>(eval-after-load "python"
  '(progn
     (define-key python-mode-map (kbd "RET") 'newline-and-indent)
     (define-key python-mode-map (kbd "&lt;f4&gt;") 'my-format-python-text)))
</snippet></ROW><ROW><id>1288546</id><snippet>RET</snippet></ROW><ROW><id>1288546</id><snippet>C-x h           ;; mark-whole-buffer
M-x untabify    ;; tabs-&gt;spaces
</snippet></ROW><ROW><id>1288546</id><snippet>(setq fill-column 79)
(setq-default tab-width 4)
</snippet></ROW><ROW><id>1288546</id><snippet>'python-mode-hook</snippet></ROW><ROW><id>1288936</id><snippet>__get__</snippet></ROW><ROW><id>1288936</id><snippet>class _MethodDecoratorAdaptor(object):
    def __init__(self, decorator, func):
        self.decorator = decorator
        self.func = func
    def __call__(self, *args, **kwargs):
        return self.decorator(self.func)(*args, **kwargs)
    def __get__(self, instance, owner):
        return self.decorator(self.func.__get__(instance, owner))

def auto_adapt_to_methods(decorator):
    """Allows you to use the same decorator on methods and functions,
    hiding the self argument from the decorator."""
    def adapt(func):
        return _MethodDecoratorAdaptor(decorator, func)
    return adapt
</snippet></ROW><ROW><id>1288936</id><snippet>def allowed(*allowed_methods):
    @auto_adapt_to_methods
    def wrapper(func):
        def wrapped(request):
            if request not in allowed_methods:
                raise ValueError("Invalid method %s" % request)
            return func(request)
        return wrapped
    return wrapper
</snippet></ROW><ROW><id>1288936</id><snippet>class Foo(object):
    @allowed('GET', 'POST')
    def do(self, request):
        print "Request %s on %s" % (request, self)

@allowed('GET')
def do(request):
    print "Plain request %s" % request

Foo().do('GET')  # Works
Foo().do('POST') # Raises
</snippet></ROW><ROW><id>1290110</id><snippet>beta</snippet></ROW><ROW><id>1290110</id><snippet>import numpy as nx
import pylab as px


def half_brace(x, beta):
    x0, x1 = x[0], x[-1]
    y = 1/(1.+nx.exp(-1*beta*(x-x0))) + 1/(1.+nx.exp(-1*beta*(x-x1)))
    return y

xmax, xstep = 20, .01
xaxis = nx.arange(0, xmax/2, xstep)
y0 = half_brace(xaxis, 10.)
y = nx.concatenate((y0, y0[::-1]))

px.plot(nx.arange(0, xmax, xstep), y)
px.show()
</snippet></ROW><ROW><id>1290677</id><snippet>python "DriveLetter:\path\to\sfood.py" "DriveLetter:\path\to\your\project"
</snippet></ROW><ROW><id>1290713</id><snippet>def material_path(instance, filename):
    return 'documents/%d' % instance.id_presentations.id

class Materials(models.Model):
    id_presentations = models.ForeignKey(Presentations)
    document = models.FileField(upload_to=material_path)
    docname = models.CharField(max_length=40)
</snippet></ROW><ROW><id>1290729</id><snippet>GetVolumeInformation</snippet></ROW><ROW><id>1290729</id><snippet>def is_drive_ready(drive_name):
    try:
        win32api.GetVolumeInformation(drive_name)
        return True
    except:
        return False

print 'ready:', is_drive_ready('c:\\') # true
print 'ready:', is_drive_ready('d:\\') # false (on my system)
</snippet></ROW><ROW><id>1290902</id><snippet>#!/usr/bin/env python
# -*- coding: utf8 -*-
def main():
    print 'hello'
    print 3/0
if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1290902</id><snippet>In [5]: out = !egg.py
Traceback (most recent call last):
  File "D:\python\note\egg.py", line 7, in &lt;module&gt;
    main()
  File "D:\python\note\egg.py", line 5, in main
    print 3/0
ZeroDivisionError: integer division or modulo by zero

In [6]: out
Out[6]: SList (.p, .n, .l, .s, .grep(), .fields(), sort() available):
0: hello

In [7]: out = !egg.py 2&gt;&amp;1

In [8]: out
Out[8]: SList (.p, .n, .l, .s, .grep(), .fields(), sort() available):
0: hello
1: Traceback (most recent call last):
2:   File "D:\python\note\egg.py", line 7, in &lt;module&gt;
3:     main()
4:   File "D:\python\note\egg.py", line 5, in main
5:     print 3/0
6: ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>1290903</id><snippet>class Counter:
def __init__(self):
    self.c = 0

def count(self):
    self.c += 1
    print 'in count() value is ' , self.c
    return self.c

class Test:
    counter = Counter() # A class variable counts its instantiations 
    print 'in class Test'
    def __init__(self):
        print 'in Testinit'
        self.counter.count() # A method that prints the number of instances of Counter

test1 = Test() # Prints 1
test2 = Test()
</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>foo.py</snippet></ROW><ROW><id>1290978</id><snippet>foo.py</snippet></ROW><ROW><id>1290978</id><snippet>Model.model</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290978</id><snippet>views.py</snippet></ROW><ROW><id>1290978</id><snippet>import foo

def index( request ):
    objects = foo.somelistofobjects()
    *etc.*
</snippet></ROW><ROW><id>1290978</id><snippet>models.py</snippet></ROW><ROW><id>1290984</id><snippet>wget</snippet></ROW><ROW><id>1290984</id><snippet>wget</snippet></ROW><ROW><id>1290984</id><snippet>-O -</snippet></ROW><ROW><id>1290984</id><snippet>wget -O - http://www.somesite.org/ &gt; /tmp/wget.out 2&gt; /tmp/wget.err
</snippet></ROW><ROW><id>1290984</id><snippet>wget</snippet></ROW><ROW><id>1290984</id><snippet>shell=True</snippet></ROW><ROW><id>1290984</id><snippet>Popen()</snippet></ROW><ROW><id>1290984</id><snippet>stderr=subprocess.PIPE</snippet></ROW><ROW><id>1290984</id><snippet>Popen()</snippet></ROW><ROW><id>1290984</id><snippet>wget</snippet></ROW><ROW><id>1290984</id><snippet>pexpect</snippet></ROW><ROW><id>1291202</id><snippet>for g in t[0].groups.all():
    print g.title
</snippet></ROW><ROW><id>1291227</id><snippet>urllib2</snippet></ROW><ROW><id>1291463</id><snippet>    tb = tb.tb_next
</snippet></ROW><ROW><id>1291463</id><snippet>sys.exc_info</snippet></ROW><ROW><id>1291608</id><snippet>wx.StaticText</snippet></ROW><ROW><id>1291608</id><snippet>TextCtrl</snippet></ROW><ROW><id>1291608</id><snippet>StaticText</snippet></ROW><ROW><id>1291858</id><snippet>server = request.META.get('wsgi.file_wrapper', None)
if server is not None and server.__module__ == 'django.core.servers.basehttp':
    print 'inside dev'
</snippet></ROW><ROW><id>1291858</id><snippet>wsgi.file_wrapper</snippet></ROW><ROW><id>1291858</id><snippet>django.core.servers.basehttp</snippet></ROW><ROW><id>1291858</id><snippet>Traceback</snippet></ROW><ROW><id>1291858</id><snippet>Request information</snippet></ROW><ROW><id>1292103</id><snippet>from settings import INSTALLED_APPS
if 'appname' in INSTALLED_APPS:
    print 'we have app'
</snippet></ROW><ROW><id>1292103</id><snippet>load_app</snippet></ROW><ROW><id>1292743</id><snippet>print max(open(your_filename, 'r'), key=len)
</snippet></ROW><ROW><id>1293021</id><snippet>render_to_response</snippet></ROW><ROW><id>1293021</id><snippet>locals()</snippet></ROW><ROW><id>1293021</id><snippet>request.POST</snippet></ROW><ROW><id>1293021</id><snippet>locals()</snippet></ROW><ROW><id>1293021</id><snippet>locals()</snippet></ROW><ROW><id>1293021</id><snippet>request</snippet></ROW><ROW><id>1293021</id><snippet>request.POST</snippet></ROW><ROW><id>1294165</id><snippet>import urllib2
from cookielib import CookieJar, DefaultCookiePolicy
policy = DefaultCookiePolicy(
rfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict)
cj = CookieJar(policy)
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
r = opener.open("http://somewebsite.com")

[str(i) for i in cj]
</snippet></ROW><ROW><id>1294165</id><snippet>['&lt;Cookie JSESSIONID=BE71BFC3EE6D9799DEBD939A7487BB08 for somewebsite.com&gt;']
</snippet></ROW><ROW><id>1294330</id><snippet>import Queue

class IndexableQueue(Queue):
  def __getitem__(self, index):
    with self.mutex:
      return self.queue[index]
</snippet></ROW><ROW><id>1294330</id><snippet>with</snippet></ROW><ROW><id>1294330</id><snippet>try</snippet></ROW><ROW><id>1294330</id><snippet>finally</snippet></ROW><ROW><id>1294402</id><snippet>blip.tv</snippet></ROW><ROW><id>1294496</id><snippet>thedata = open('thefile', 'rb').read()
sql = "INSERT INTO sometable (theblobcolumn) VALUES (%s)"
cursor.execute(sql, (thedata,))
</snippet></ROW><ROW><id>1294496</id><snippet>SELECT</snippet></ROW><ROW><id>1294496</id><snippet>cursor.execute</snippet></ROW><ROW><id>1295028</id><snippet>pyparsing</snippet></ROW><ROW><id>1295028</id><snippet>mechanize</snippet></ROW><ROW><id>1295028</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>1295028</id><snippet>Python API</snippet></ROW><ROW><id>1295028</id><snippet>from twill.commands import go, showforms, formclear, fv, submit

go('http://issola.caltech.edu/~t/qwsgi/qwsgi-demo.cgi/')
go('./widgets')
showforms()

formclear('1')
fv("1", "name", "test")
fv("1", "password", "testpass")
fv("1", "confirm", "yes")
showforms()

submit('0')
</snippet></ROW><ROW><id>1295081</id><snippet>for j in range( 1, len(P)-2 ):  # skip the ends
    for t in range( 10 ):  # t: 0 .1 .2 .. .9
        p = spline_4p( t/10, P[j-1], P[j], P[j+1], P[j+2] )
        # draw p

def spline_4p( t, p_1, p0, p1, p2 ):
    """ Catmull-Rom
        (Ps can be numpy vectors or arrays too: colors, curves ...)
    """
        # wikipedia Catmull-Rom -&gt; Cubic_Hermite_spline
        # 0 -&gt; p0,  1 -&gt; p1,  1/2 -&gt; (- p_1 + 9 p0 + 9 p1 - p2) / 16
    # assert 0 &lt;= t &lt;= 1
    return (
          t*((2-t)*t - 1)   * p_1
        + (t*t*(3*t - 5) + 2) * p0
        + t*((4 - 3*t)*t + 1) * p1
        + (t-1)*t*t         * p2 ) / 2
</snippet></ROW><ROW><id>1295443</id><snippet>f = replacement_f
</snippet></ROW><ROW><id>1295443</id><snippet>&gt;&gt;&gt; def rep(*args):
    print(*args, sep=' -- ')

&gt;&gt;&gt; def ori(*args):
    print(args)

&gt;&gt;&gt; ori('dfef', 32)
('dfef', 32)
&gt;&gt;&gt; ori = rep
&gt;&gt;&gt; ori('dfef', 32)
dfef -- 32
</snippet></ROW><ROW><id>1295977</id><snippet>xml.etree.ElementTree.parse</snippet></ROW><ROW><id>1295977</id><snippet>getroot</snippet></ROW><ROW><id>1296028</id><snippet>if 499999500000L % (2**32) == 1783293664L:
    print "Overflowed a 32-bit integer"
</snippet></ROW><ROW><id>1296028</id><snippet>a = numpy.arange(1000000, dtype=numpy.uint64)
a.sum() -&gt; 499999500000
</snippet></ROW><ROW><id>1296049</id><snippet>yourdict = {}
# ...
items = yourdict.items()
</snippet></ROW><ROW><id>1296049</id><snippet>yourdict = {}
# ...
items = list(yourdict.items())
</snippet></ROW><ROW><id>1296527</id><snippet>list</snippet></ROW><ROW><id>1296527</id><snippet>list</snippet></ROW><ROW><id>1296527</id><snippet>pop(0)</snippet></ROW><ROW><id>1296527</id><snippet>insert(0, v)</snippet></ROW><ROW><id>1296527</id><snippet>deque</snippet></ROW><ROW><id>1296613</id><snippet>typ, data = M.search(None, '(BEFORE 01-Jan-2009)')
for num in data[0].split():
   M.store(num, '+FLAGS', '\\Seen')
</snippet></ROW><ROW><id>1296689</id><snippet>&gt;&gt;&gt; import appuifw
&gt;&gt;&gt; import camera
&gt;&gt;&gt; def cb(im):
... appuifw.app.body.blit(im)
...
&gt;&gt;&gt; import graphics
&gt;&gt;&gt; appuifw.app.body=appuifw.Canvas()
&gt;&gt;&gt; camera.start_finder(cb)
</snippet></ROW><ROW><id>1297407</id><snippet>__file__</snippet></ROW><ROW><id>1297407</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1297407</id><snippet>__file__</snippet></ROW><ROW><id>1297407</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1297407</id><snippet>C:\junk\so&gt;type \junk\so\scriptpath\script1.py
import sys, os
print "script: sys.argv[0] is", repr(sys.argv[0])
print "script: __file__ is", repr(__file__)
print "script: cwd is", repr(os.getcwd())
import whereutils
whereutils.show_where()

C:\junk\so&gt;type \python26\lib\site-packages\whereutils.py
import sys, os
def show_where():
    print "show_where: sys.argv[0] is", repr(sys.argv[0])
    print "show_where: __file__ is", repr(__file__)
    print "show_where: cwd is", repr(os.getcwd())

C:\junk\so&gt;\python26\python scriptpath\script1.py
script: sys.argv[0] is 'scriptpath\\script1.py'
script: __file__ is 'scriptpath\\script1.py'
script: cwd is 'C:\\junk\\so'
show_where: sys.argv[0] is 'scriptpath\\script1.py'
show_where: __file__ is 'C:\\python26\\lib\\site-packages\\whereutils.pyc'
show_where: cwd is 'C:\\junk\\so'
</snippet></ROW><ROW><id>1297541</id><snippet>ata = b'UDP Test Data'</snippet></ROW><ROW><id>1297541</id><snippet>&gt;&gt;&gt; data = 'UDP Test Data'
&gt;&gt;&gt; udp.sendto(data, (hostname, port))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sendto() takes exactly 3 arguments (2 given)
&gt;&gt;&gt; udp.sendto(data, 0, (hostname, port))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sendto() argument 1 must be bytes or buffer, not str
&gt;&gt;&gt; data = b'UDP Test Data'
&gt;&gt;&gt; udp.sendto(data, 0, (hostname, port))
13
&gt;&gt;&gt; udp.sendto(data, (hostname, port))
13
</snippet></ROW><ROW><id>1297577</id><snippet>self.__dict__</snippet></ROW><ROW><id>1297577</id><snippet>self</snippet></ROW><ROW><id>1297577</id><snippet>__slots__</snippet></ROW><ROW><id>1297577</id><snippet>__dict__</snippet></ROW><ROW><id>1297577</id><snippet>__new__</snippet></ROW><ROW><id>1297590</id><snippet>from config.TestClass import TestClass
TestClass.add_key( "mykey", "newvalue" )
</snippet></ROW><ROW><id>1297784</id><snippet>from x import *</snippet></ROW><ROW><id>1297784</id><snippet>_test</snippet></ROW><ROW><id>1297784</id><snippet>__test</snippet></ROW><ROW><id>1297931</id><snippet>import djng

def index(request):
    return djng.Response('Hello, world')

if __name__ == '__main__':
    djng.serve(index, '0.0.0.0', 8888)
</snippet></ROW><ROW><id>1298400</id><snippet>def decode(file):
    while True:
        c = file.read(1)
        if c == "":
            # End of file
            break
        if c != "%":
            # Not an escape sequence
            yield c
            continue
        c = file.read(1)
        if c != "u":
            # One hex-byte
            yield chr(int(c + file.read(1), 16))
            continue
        # Two hex-bytes
        yield chr(int(file.read(2), 16))
        yield chr(int(file.read(2), 16))
</snippet></ROW><ROW><id>1298400</id><snippet>input = open("/path/to/input-file", "r")
output = open("/path/to/output-file", "wb")
output.writelines(decode(input))
output.close()
input.close()
</snippet></ROW><ROW><id>1298905</id><snippet> d = {}
 for i in xrange(4000000):
     d[i] = None
 # 722ms

 d = dict(itertools.izip(xrange(4000000), itertools.repeat(None)))
 # 634ms

 dict.fromkeys(xrange(4000000))
 # 558ms

 s = set(xrange(4000000))
 dict.fromkeys(s)
 # Not including set construction 353ms
</snippet></ROW><ROW><id>1299134</id><snippet>%doctest_mode
</snippet></ROW><ROW><id>1299134</id><snippet>In [1]: %doctest_mode
*** Pasting of code with "&gt;&gt;&gt;" or "..." has been enabled.
Exception reporting mode: Plain
Doctest mode is: ON
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1299203</id><snippet>/usr/local/lib/pythonX.Y/site-packages</snippet></ROW><ROW><id>1299203</id><snippet>C:\Python\</snippet></ROW><ROW><id>1299203</id><snippet>--home</snippet></ROW><ROW><id>1299203</id><snippet>--home</snippet></ROW><ROW><id>1299203</id><snippet>--prefix</snippet></ROW><ROW><id>1299203</id><snippet>--home</snippet></ROW><ROW><id>1299203</id><snippet>home/lib/python</snippet></ROW><ROW><id>1299203</id><snippet>home/bin</snippet></ROW><ROW><id>1299203</id><snippet>home/share</snippet></ROW><ROW><id>1299203</id><snippet>--prefix</snippet></ROW><ROW><id>1299203</id><snippet>prefix/lib/pythonX.Y/site-packages/</snippet></ROW><ROW><id>1299203</id><snippet>prefix/bin</snippet></ROW><ROW><id>1299203</id><snippet>prefix/share</snippet></ROW><ROW><id>1299203</id><snippet>prefix/Scripts</snippet></ROW><ROW><id>1299203</id><snippet>prefix/Data</snippet></ROW><ROW><id>1299387</id><snippet>datetime</snippet></ROW><ROW><id>1299387</id><snippet># German locale
loc= locale.setlocale(locale.LC_TIME,("de","de"))
try:
     date= datetime.date.strptime( input, "%d. %b. %Y" )
except:
     # English locale
     loc= locale.setlocale(locale.LC_TIME,("en","us"))
     date= datetime.date.strptime( input, "%d. %b. %Y" )
</snippet></ROW><ROW><id>1299684</id><snippet>unittest</snippet></ROW><ROW><id>1299684</id><snippet>test</snippet></ROW><ROW><id>1299684</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>1299684</id><snippet>imp</snippet></ROW><ROW><id>1299684</id><snippet>src</snippet></ROW><ROW><id>1299684</id><snippet>import sys
sys.path.append('../src') # OnLinux  - use r'..\src' for Windows
</snippet></ROW><ROW><id>1299684</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1299684</id><snippet>SET PYTHONPATH=path\to\module; python test.py</snippet></ROW><ROW><id>1299684</id><snippet>PYTHONPATH=path/to/module; python test.py</snippet></ROW><ROW><id>1299684</id><snippet>unittest</snippet></ROW><ROW><id>1300406</id><snippet>import re

places = {'#': 'what',
          '@': 'who',
          '!': 'why',
         }

def replace(m):
  all = m.group(0)
  first, rest = all[0], all[1:]
  return '&lt;a href="/%s/%s"&gt;%s&lt;/a&gt;' % (
    places[first], rest, all)

markedup = re.sub(r'[#!@]\w+', replace, text)
</snippet></ROW><ROW><id>1300421</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>1300442</id><snippet>c:\python26\lib\site-packages\sqlobject-0.10.4-py2.6.egg</snippet></ROW><ROW><id>1300603</id><snippet>hstore</snippet></ROW><ROW><id>1300619</id><snippet>last_digit = str(number)[-1]
</snippet></ROW><ROW><id>1300692</id><snippet>0:5</snippet></ROW><ROW><id>1300789</id><snippet>tasks = Tasks.objects.all()
</snippet></ROW><ROW><id>1300789</id><snippet>{% for t in tasks %}
    name: {{t.name}}
    description: {{t.description}}
    priority: **{{t.priority.name}}**
{% endfor %}
</snippet></ROW><ROW><id>1300979</id><snippet> image_data = get_image_data_from_blob()
 qimg = QtGui.QImage.fromData(image_data)
 pixmap = QtGui.QPixmap.fromImage(qimg)
</snippet></ROW><ROW><id>1301246</id><snippet>ascending = "".join(sorted(str(number)))

descending = "".join(sorted(str(number), reverse=True))
</snippet></ROW><ROW><id>1301246</id><snippet>&gt;&gt;&gt; number = 5896
&gt;&gt;&gt; ascending = "".join(sorted(str(number)))
&gt;&gt;&gt;
&gt;&gt;&gt; descending = "".join(sorted(str(number), reverse=True))
&gt;&gt;&gt; ascending
'5689'
&gt;&gt;&gt; descending
'9865'
</snippet></ROW><ROW><id>1301246</id><snippet>int()</snippet></ROW><ROW><id>1301246</id><snippet>&gt;&gt;&gt; int(ascending)
5689
&gt;&gt;&gt; int(descending)
9865
</snippet></ROW><ROW><id>1301306</id><snippet>A</snippet></ROW><ROW><id>1301306</id><snippet>B</snippet></ROW><ROW><id>1301306</id><snippet>B</snippet></ROW><ROW><id>1301306</id><snippet>B</snippet></ROW><ROW><id>1301306</id><snippet>B</snippet></ROW><ROW><id>1301306</id><snippet>A\d+.*?(B\d+)?
</snippet></ROW><ROW><id>1301306</id><snippet>A\d+[^B]*(B\d+)?
</snippet></ROW><ROW><id>1301306</id><snippet>B</snippet></ROW><ROW><id>1301306</id><snippet>A\d+(.*?B\d+)?
a\d+([^B]*B\d+)?
</snippet></ROW><ROW><id>1301362</id><snippet>var newlist = oldlist.Skip(1).Concat(oldlist.Take(1));
</snippet></ROW><ROW><id>1301423</id><snippet>:map &lt;F2&gt; :w\|!python %&lt;CR&gt;
</snippet></ROW><ROW><id>1301423</id><snippet>&lt;F2&gt;</snippet></ROW><ROW><id>1301528</id><snippet>&gt;&gt;&gt; import os, time
&gt;&gt;&gt; time.strftime('%X %x %Z')
'12:45:20 08/19/09 CDT'
&gt;&gt;&gt; os.environ['TZ'] = 'Europe/London'
&gt;&gt;&gt; time.tzset()
&gt;&gt;&gt; time.strftime('%X %x %Z')
'18:45:39 08/19/09 BST'
</snippet></ROW><ROW><id>1301528</id><snippet>&gt;&gt;&gt; year = time.strftime('%Y')
&gt;&gt;&gt; month = time.strftime('%m')
&gt;&gt;&gt; day = time.strftime('%d')
&gt;&gt;&gt; hour = time.strftime('%H')
&gt;&gt;&gt; minute = time.strftime('%M')
</snippet></ROW><ROW><id>1301926</id><snippet>def counted(fn):
    def wrapper(*args, **kwargs):
        wrapper.called+= 1
        return fn(*args, **kwargs)
    wrapper.called= 0
    wrapper.__name__= fn.__name__
    return wrapper

@counted
def foo():
    return

&gt;&gt;&gt; foo()
&gt;&gt;&gt; foo.called
1
</snippet></ROW><ROW><id>1301926</id><snippet>def counting(other):
    def decorator(fn):
        def wrapper(*args, **kwargs):
            other.called= 0
            try:
                return fn(*args, **kwargs)
            finally:
                print '%s was called %i times' % (other.__name__, other.called)
        wrapper.__name__= fn.__name__
        return wrapper
    return decorator

@counting(foo)
def bar():
    foo()
    foo()

&gt;&gt;&gt; bar()
foo was called 2 times
</snippet></ROW><ROW><id>1302248</id><snippet>gmt_offset_str = time_string[-3:]
gmt_offset_seconds = int(gmt_offset_str)*60*60
timestamp = time.strptime(time_string[:-4], '%Y-%m-%d %H:%M:%S')
return time.localtime(time.mktime(timestamp)-gmt_offset_seconds)
</snippet></ROW><ROW><id>1302381</id><snippet>long_string = ("Line 1 "
               "Line 2 "
               "Line 3 ")


&gt;&gt;&gt; long_string
'Line 1 Line 2 Line 3 '
</snippet></ROW><ROW><id>1302419</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1302696</id><snippet>urlparse</snippet></ROW><ROW><id>1302696</id><snippet>from urlparse import urlparse, parse_qsl

url = 'http://somesite.com/?foo=bar&amp;key=val'
print parse_qsl(urlparse(url)[4])
</snippet></ROW><ROW><id>1302696</id><snippet>[('foo', 'bar'), ('key', 'val')]
</snippet></ROW><ROW><id>1302696</id><snippet>urlparse</snippet></ROW><ROW><id>1302696</id><snippet>parse_qsl</snippet></ROW><ROW><id>1302696</id><snippet>urlparse</snippet></ROW><ROW><id>1302793</id><snippet>&gt;&gt;&gt; for t in time.tzname:
...     print t
...
Eastern Standard Time
Eastern Daylight Time
&gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 Eastern Standard Time', "%Y-%m-%d %H:%M:%S %Z")
datetime.datetime(2009, 8, 19, 14, 20, 36)
&gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 UTC', "%Y-%m-%d %H:%M:%S %Z")
datetime.datetime(2009, 8, 19, 14, 20, 36)
&gt;&gt;&gt; datetime.strptime('2009-08-19 14:20:36 GMT', "%Y-%m-%d %H:%M:%S %Z")
datetime.datetime(2009, 8, 19, 14, 20, 36)
</snippet></ROW><ROW><id>1302817</id><snippet>def combineflatten(seq):
    items= tuple(item for item in seq if not isinstance(item, tuple))
    yield items
    for item in seq:
        if isinstance(item, tuple):
            for yielded in combineflatten(item):
                yield items+yielded

&gt;&gt;&gt; tuple(combineflatten((1, 2, (3, 4), (5, 6), (7, 8, (9, 0)))))
((1, 2), (1, 2, 3, 4), (1, 2, 5, 6), (1, 2, 7, 8), (1, 2, 7, 8, 9, 0))
</snippet></ROW><ROW><id>1303101</id><snippet>from subprocess import *
p = Popen('ssh servername who', shell=True, stdout=PIPE)
p.wait()
print p.stdout.readlines()
</snippet></ROW><ROW><id>1303101</id><snippet>['usr      pts/0        2009-08-19 16:03 (kakapo)\n',
 'usr      pts/1        2009-08-17 15:51 (kakapo)\n',
 'usr      pts/5        2009-08-17 17:00 (kakapo)\n']
</snippet></ROW><ROW><id>1303101</id><snippet>p = Popen('ssh servername cat /proc/cpuinfo', shell=True, stdout=PIPE)
</snippet></ROW><ROW><id>1303354</id><snippet>list(map(chr,[66,53,0,94]))
</snippet></ROW><ROW><id>1303354</id><snippet>map</snippet></ROW><ROW><id>1303354</id><snippet># Prints "ABCD"
for ch in map(chr,[65,66,67,68]):
    print(ch)
</snippet></ROW><ROW><id>1303434</id><snippet>shutil.py</snippet></ROW><ROW><id>1303434</id><snippet>/usr/lib/python2.6</snippet></ROW><ROW><id>1303434</id><snippet>C:\Python26\lib</snippet></ROW><ROW><id>1303434</id><snippet>XXX Consider this example code rather than the ultimate tool.</snippet></ROW><ROW><id>1303619</id><snippet>2**16</snippet></ROW><ROW><id>1303619</id><snippet>2**32</snippet></ROW><ROW><id>1303619</id><snippet>base64</snippet></ROW><ROW><id>1303619</id><snippet>struct</snippet></ROW><ROW><id>1303619</id><snippet>%</snippet></ROW><ROW><id>1304088</id><snippet>mystr = "path: %s curr: %s prev: %s" % (mydict[path], curr, prev)
</snippet></ROW><ROW><id>1304749</id><snippet>counts = MyModel.objects.values('datettimefield').annotate(Count('datettimefield'))
</snippet></ROW><ROW><id>1304749</id><snippet>[{'datetimefield':&lt;date1&gt;, 'datettimefield__count':&lt;count1&gt;},
 {'datetimefield':&lt;date2&gt;, 'datettimefield__count':&lt;count2&gt;}, ...]
</snippet></ROW><ROW><id>1304749</id><snippet>cursor = connection.cursor()
cursor.execute(
     "SELECT COUNT(0) FROM `mymodel_table` "
     "GROUP BY `mydatetimefield`;"
)
counts = cursor.fetchall()
</snippet></ROW><ROW><id>1304923</id><snippet>i</snippet></ROW><ROW><id>1304923</id><snippet>fuc</snippet></ROW><ROW><id>1304923</id><snippet>i</snippet></ROW><ROW><id>1304923</id><snippet>fuc</snippet></ROW><ROW><id>1304923</id><snippet>pytest</snippet></ROW><ROW><id>1304923</id><snippet>i</snippet></ROW><ROW><id>1304923</id><snippet>a</snippet></ROW><ROW><id>1304923</id><snippet>pytest</snippet></ROW><ROW><id>1304923</id><snippet>a</snippet></ROW><ROW><id>1304923</id><snippet>pytest</snippet></ROW><ROW><id>1304923</id><snippet>a.j</snippet></ROW><ROW><id>1304923</id><snippet>a</snippet></ROW><ROW><id>1304923</id><snippet>pytest</snippet></ROW><ROW><id>1304923</id><snippet>j</snippet></ROW><ROW><id>1304923</id><snippet>j</snippet></ROW><ROW><id>1304923</id><snippet>a</snippet></ROW><ROW><id>1304923</id><snippet>a</snippet></ROW><ROW><id>1305179</id><snippet>import SOAPpy
test = 42
server = SOAPpy.SOAPProxy("http://localhost:8888")
server = server._sa ("urn:soapinterop")

hd = SOAPpy.Header()
hd.InteropTestHeader ='This should fault, as you don\'t understand the header.'
hd._setMustUnderstand ('InteropTestHeader', 0)
hd._setActor ('InteropTestHeader','http://schemas.xmlsoap.org/soap/actor/next')
server = server._hd (hd)

print server.echoInteger (test)
</snippet></ROW><ROW><id>1305179</id><snippet>import SOAPpy
test = 42
server = SOAPpy.SOAPProxy("http://localhost:8888")
server = server._sa ("urn:soapinterop")
#Header
hd = SOAPpy.Header()
hd.InteropTestHeader = 'This should fault,as you don\'t understand the header.'
hd._setMustUnderstand ('InteropTestHeader', 1)
hd._setActor ('InteropTestHeader','http://schemas.xmlsoap.org/soap/actor/next')
server = server._hd (hd)

print server.echoInteger (test)
</snippet></ROW><ROW><id>1305314</id><snippet>row[2] == day</snippet></ROW><ROW><id>1305445</id><snippet>def delete_if_not(predicate_key, some_dict):
    for key, subdict in some_dict.items():
        if not subdict.get(predicate_key, True):
            del some_dict[key]
</snippet></ROW><ROW><id>1305445</id><snippet>mydict = {
        'test1': {
                'turned_on': True,
                'other_data': 'foo',
            },
        'test2': {
            'turned_on': False,
            'other_data': 'bar',
            },
        }
delete_if_not('turned_on', mydict)
print mydict
</snippet></ROW><ROW><id>1305663</id><snippet>namedtuple</snippet></ROW><ROW><id>1305663</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')
&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])
&gt;&gt;&gt; s
MyStruct(a=1, b={'c': 2}, d=['hi'])
&gt;&gt;&gt; s.a
1
&gt;&gt;&gt; s.b
{'c': 2}
&gt;&gt;&gt; s.c
&gt;&gt;&gt; s.d
['hi']
</snippet></ROW><ROW><id>1305663</id><snippet>class Struct:
    def __init__(self, **entries): 
        self.__dict__.update(entries)
</snippet></ROW><ROW><id>1305663</id><snippet>&gt;&gt;&gt; args = {'a': 1, 'b': 2}
&gt;&gt;&gt; s = Struct(**args)
&gt;&gt;&gt; s
&lt;__main__.Struct instance at 0x01D6A738&gt;
&gt;&gt;&gt; s.a
1
&gt;&gt;&gt; s.b
2
</snippet></ROW><ROW><id>1305860</id><snippet>br.form.add_file(open(filename), 'text/plain', filename)
</snippet></ROW><ROW><id>1306154</id><snippet>"""
This module implements Obj-C-style categories for classes for Python

Copyright 2009 Ulrik Sverdrup &lt;ulrik.sverdrup@gmail.com&gt;
License: Public domain
"""

def Category(toclass, clobber=False):
    """Return a class decorator that implements the decorated class'
    methods as a Category on the class @toclass

    if @clobber is not allowed, AttributeError will be raised when
    the decorated class already contains the same attribute.
    """
    def decorator(cls):
        skip = set(("__dict__", "__module__", "__weakref__", "__doc__"))
        for attr in cls.__dict__:
            if attr in toclass.__dict__:
                if attr in skip:
                    continue
                if not clobber:
                    raise AttributeError("Category cannot override %s" % attr)
            setattr(toclass, attr, cls.__dict__[attr])
        return cls
    return decorator
</snippet></ROW><ROW><id>1306575</id><snippet>import hmac
import hashlib
import base64
dig = hmac.new(b'1234567890', msg=your_bytes_string, digestmod=hashlib.sha256).digest()
base64.b64encode(dig).decode()      # py3k-mode
'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
</snippet></ROW><ROW><id>1306653</id><snippet>&gt;&gt;&gt; a.add(('f', 'g'))
&gt;&gt;&gt; print a
set(['a', 'c', 'b', 'e', 'd', ('f', 'g')])
</snippet></ROW><ROW><id>1306653</id><snippet>set</snippet></ROW><ROW><id>1306653</id><snippet>__hash__</snippet></ROW><ROW><id>1306653</id><snippet>list</snippet></ROW><ROW><id>1306653</id><snippet>tuple</snippet></ROW><ROW><id>1306653</id><snippet>set</snippet></ROW><ROW><id>1306653</id><snippet>frozenset</snippet></ROW><ROW><id>1306653</id><snippet>dict</snippet></ROW><ROW><id>1306682</id><snippet>nested_list = [[s.upper() for s in xs] for xs in nested_list]
</snippet></ROW><ROW><id>1306682</id><snippet>map</snippet></ROW><ROW><id>1307112</id><snippet>def doit(nam, filters):
    alldims = []
    for dimname in getDimNames(nam):
      filt = filters.get(dimname, ())
      howmany = len(filt)
      if howmany == 0:
        sliciflt = slice()
      elif howmany == 1:
        sliciflt = filt[0]
      elif howmany in (2, 3):
        sliciflt = slice(*filt)
      else:
        raise RuntimeError("%d items in slice for dim %r (%r)!"
                           % (howmany, dimname, nam))
      alldims.append(sliciflt)


return readFrom.variables[nam][tuple(alldims)]
</snippet></ROW><ROW><id>1307210</id><snippet>__str__()</snippet></ROW><ROW><id>1307210</id><snippet>__unicode__()</snippet></ROW><ROW><id>1307210</id><snippet>__unicode__()</snippet></ROW><ROW><id>1307210</id><snippet>__str__()</snippet></ROW><ROW><id>1307210</id><snippet>def __str__(self):
    return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>1307210</id><snippet>str</snippet></ROW><ROW><id>1307210</id><snippet>__bytes__()</snippet></ROW><ROW><id>1307210</id><snippet>__str__()</snippet></ROW><ROW><id>1307400</id><snippet>cursor.execute ("""
   UPDATE tblTableName
   SET Year=%s, Month=%s, Day=%s, Hour=%s, Minute=%s
   WHERE Server=%s
""", (Year, Month, Day, Hour, Minute, ServerID))
</snippet></ROW><ROW><id>1307400</id><snippet>cursor.execute ("UPDATE tblTableName SET Year=%s, Month=%s, Day=%s, Hour=%s, Minute=%s WHERE Server='%s' " % (Year, Month, Day, Hour, Minute, ServerID))
</snippet></ROW><ROW><id>1307672</id><snippet>def raw_print(str, *args):
    out_str = str % args
    sys.stdout.write(out_str)

class DeferredAsserter(object):
    def __init__(self):
        self.broken = False
    def assert_equal(self, expected, actual):
        outstr = '%s == %s...' % (expected, actual)
        raw_print(outstr)
        try:
            assert expected == actual
        except AssertionError:
            raw_print('FAILED\n\n')
            self.broken = True
        except Exception, e:
            raw_print('ERROR\n')
            traceback.print_exc()
            self.broken = True
        else:
            raw_print('PASSED\n\n')

    def invoke(self):
        assert not self.broken
</snippet></ROW><ROW><id>1307689</id><snippet>class MyGroup(models.Model):
    name = models.CharField(max_length=100)

class Membership(models.Model):
    group = models.ForeignKey(MyGroup)
    member = models.ForeignKey(User)

    invited_by = models.ForeignKey(User, related_name='invited_set')
</snippet></ROW><ROW><id>1307689</id><snippet>group.members.all()</snippet></ROW><ROW><id>1307689</id><snippet>group.membership_set.all()</snippet></ROW><ROW><id>1307783</id><snippet>wait=True
while wait:
   url=urllib.urlopen('http://'+username+':'+password+'@localhost/httpAuth/action.html?add2Queue='+btid+'&amp;system.name=&lt;btid&gt;&amp;system.value=&lt;'+btid+'&gt;&amp;system.name=&lt;buildNumber&gt;&amp;system.value=&lt;'+buildNumber+'&gt;')
   if url.getcode()!=404:
     wait=False
   else:
     time.sleep(60)
</snippet></ROW><ROW><id>1308024</id><snippet>sys.stderr</snippet></ROW><ROW><id>1308024</id><snippet>logging.raiseExceptions = 0
</snippet></ROW><ROW><id>1308024</id><snippet>raiseExceptions</snippet></ROW><ROW><id>1308024</id><snippet>SMTPHandler</snippet></ROW><ROW><id>1308024</id><snippet>logging</snippet></ROW><ROW><id>1308024</id><snippet>SystemExit</snippet></ROW><ROW><id>1308024</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>1308060</id><snippet>ZEROFILL</snippet></ROW><ROW><id>1308060</id><snippet>VARCHAR</snippet></ROW><ROW><id>1308060</id><snippet>"%02d" % val</snippet></ROW><ROW><id>1308060</id><snippet>CAST(my_column AS VARCHAR)</snippet></ROW><ROW><id>1308261</id><snippet>{% regroup notices by year as year_list %}


{% for year in year_list %}
  &lt;h2&gt;{{ year.grouper }}&lt;h2&gt;

  &lt;ul&gt;
  {% for notice in year.list %}
     &lt;li&gt;{{ notice.text }}&lt;/li&gt;
  {% endfor %}
  &lt;/ul&gt;
{% endfor %}
</snippet></ROW><ROW><id>1308261</id><snippet>{% ifchanged %}</snippet></ROW><ROW><id>1308469</id><snippet>&gt;&gt;&gt; from Foundation import *
&gt;&gt;&gt; a = NSArray.arrayWithObjects_("a", "b", "c", None)
&gt;&gt;&gt; a
(
      a,
      b,
      c
)
&gt;&gt;&gt; a[1]
'b'
&gt;&gt;&gt; a.objectAtIndex_(1)
'b'
&gt;&gt;&gt; type(a)
&lt;objective-c class NSCFArray at 0x7fff708bc178&gt;
</snippet></ROW><ROW><id>1308469</id><snippet>In [1]: from Foundation import *

In [2]: a = NSBundle.allFrameworks()

In [3]: ?a
Type:       NSCFArray
Base Class: &lt;objective-c class NSCFArray at 0x1002adf40&gt;
</snippet></ROW><ROW><id>1308469</id><snippet>@interface Abstract : NSObject
- (unsigned int) foo: (NSString *) aBar;
+ newConcrete;
@end

@implementation Abstract
- (unsigned int) foo: (NSString *) aBar { return 42; }
+ newConcrete { return [[NSClassFromString(@"MyConcrete") new] autorelease]; }
@end

.....

class Concrete(Abstract):
    def foo_(self, s): return s.length()

.....

x = [Abstract newFoo];
[x  foo: @"bar"];
</snippet></ROW><ROW><id>1308789</id><snippet>from twisted.internet.protocol import ServerFactory

class LocalOnlyFactory(ServerFactory):
    def buildProtocol(self, addr):
        if addr.host == "127.0.0.1":
            return ServerFactory.buildProtocol(self, addr)
        return None
</snippet></ROW><ROW><id>1309257</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import glib

def timer_cb():
    print "5 seconds elapsed."
    return False

def show_cb(widget, data=None):
    glib.timeout_add(5000, timer_cb)

def destroy_cb(widget, data=None):
    gtk.main_quit()

def main():
    window = gtk.Window(gtk.WINDOW_TOPLEVEL)

    window.connect("show", show_cb)

    window.connect("destroy", destroy_cb)

    window.show()

    gtk.main()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1309412</id><snippet>def load_module_attr (path):
    modname, attr = path.rsplit ('.', 1)
    mod = __import__ (modname, {}, {}, [attr])
    return getattr (mod, attr)

def my_view (request):
    model_name = "myapp.models.Song" # Get from command line, user, wherever
    model = load_module_attr (model_name)
    print model.objects.all()
</snippet></ROW><ROW><id>1309446</id><snippet>def goback(date, days):
    delta = datetime.timedelta( days=days + 2*(days//5) )
    if date.weekday() == 5:
        delta += datetime.timedelta(days=1)
    elif date.weekday() == 6:
        delta += datetime.timedelta(days=2)
    else:
        leftover = date.weekday() - days % 5
        if leftover &lt; 0: 
            delta += datetime.timedelta(days=2)
    return date - delta
</snippet></ROW><ROW><id>1309534</id><snippet>tftpd</snippet></ROW><ROW><id>1309534</id><snippet> Unfortunately, on multi-homed systems, it is impossible for tftpd to
 determine the address on which a packet was received. As a result, tftpd
 uses two different mechanisms to guess the best source address to use for
 replies. If the socket that inetd(8) passed to tftpd is bound to a par‐
 ticular address, tftpd uses that address for replies. Otherwise, tftpd
 uses ‘‘UDP connect’’ to let the kernel choose the reply address based on
 the destination of the replies and the routing tables. This means that
 most setups will work transparently, while in cases where the reply
 address must be fixed, the virtual hosting feature of inetd(8) can be
 used to ensure that replies go out from the correct address.  These con‐
 siderations are important, because most tftp clients will reject reply
 packets that appear to come from an unexpected address.
</snippet></ROW><ROW><id>1309682</id><snippet>from django.core.files import File  # you need this somewhere


# The following actually resides in a method of my model

result = urllib.urlretrieve(image_url) # image_url is a URL to an image

# self.photo is the ImageField
self.photo.save(
    os.path.basename(self.url),
    File(open(result[0]))
    )

self.save()
</snippet></ROW><ROW><id>1309682</id><snippet>class CachedImage(models.Model):
    url = models.CharField(max_length=255, unique=True)
    photo = models.ImageField(upload_to=photo_path, blank=True)

    def cache(self):
        """Store image locally if we have a URL"""

        if self.url and not self.photo:
            result = urllib.urlretrieve(self.url)
            self.photo.save(
                    os.path.basename(self.url),
                    File(open(result[0]))
                    )
            self.save()
</snippet></ROW><ROW><id>1309759</id><snippet>%</snippet></ROW><ROW><id>1309759</id><snippet>*</snippet></ROW><ROW><id>1309759</id><snippet>print('%d' % 2 * 4)
</snippet></ROW><ROW><id>1309759</id><snippet>print( ('%d' % 2) * 4)
</snippet></ROW><ROW><id>1309764</id><snippet>def detectit(response):
   # try headers &amp;c, then, worst case...:
   content = response.read()
   response.read = lambda: content
   # now detect based on content
</snippet></ROW><ROW><id>1309764</id><snippet>response.read()</snippet></ROW><ROW><id>1309764</id><snippet>lambda</snippet></ROW><ROW><id>1310001</id><snippet>?</snippet></ROW><ROW><id>1310001</id><snippet>&gt;&gt;&gt; result_set = c.execute('SELECT * FROM distro WHERE id IN (%s)' %
                           ','.join('?'*len(desired_ids)), desired_ids)
&gt;&gt;&gt; print result_set.fetchall()
[(1, u'Ubuntu'), (2, u'Fedora'), (5, u'SuSE')]
</snippet></ROW><ROW><id>1310008</id><snippet>import socket
socket.setdefaulttimeout(120)
</snippet></ROW><ROW><id>1310297</id><snippet>exec</snippet></ROW><ROW><id>1310297</id><snippet>in</snippet></ROW><ROW><id>1310297</id><snippet>&gt;&gt;&gt; class X(object): pass
... 
&gt;&gt;&gt; x=X()
&gt;&gt;&gt; exec 'a=23' in vars(x)
&gt;&gt;&gt; x.a
23
</snippet></ROW><ROW><id>1310297</id><snippet>exec</snippet></ROW><ROW><id>1310297</id><snippet>x</snippet></ROW><ROW><id>1310297</id><snippet>exec</snippet></ROW><ROW><id>1310533</id><snippet>class JobCategory(models.Model):
    title = models.CharField(_('title'), max_length=50, help_text=_("Max 50 chars. Required."))
    slug = models.SlugField(_('slug'), help_text=_("Only letters, numbers, or hyphens. Required."))

    class Meta:
        verbose_name = _('job category')
        verbose_name_plural = _('job categories')

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('djobs_category_jobs', args=[self.slug])

    @property
    def active_job_count(self):
        return len(Job.active.filter(category=self))

class ActiveJobManager(models.Manager):
    def get_query_set(self):
        return super(ActiveJobManager, self).get_query_set().filter(created_date__gte=datetime.datetime.now() - datetime.timedelta(days=30))

class Job(models.Model):
    title = models.CharField(_('title'), max_length=50, help_text=_("Max 50 chars. Required."))
    description = models.TextField(_('description'), help_text=_("Required."))
    category = models.ForeignKey(JobCategory, related_name='jobs')
    employment_type = models.CharField(_('employment type'), max_length=5, choices=EMPLOYMENT_TYPE_CHOICES, help_text=_("Required."))
    employment_level = models.CharField(_('employment level'), max_length=5, choices=EMPLOYMENT_LEVEL_CHOICES, help_text=_("Required."))
    employer = models.ForeignKey(Employer)
    location = models.ForeignKey(Location)
    contact = models.ForeignKey(Contact)
    allow_applications = models.BooleanField(_('allow applications'))
    created_date = models.DateTimeField(auto_now_add=True)

    objects = models.Manager()
    active = ActiveJobManager()

    class Meta:
        verbose_name = _('job')
        verbose_name_plural = _('jobs')

    def __unicode__(self):
        return '%s at %s' % (self.title, self.employer.name)
</snippet></ROW><ROW><id>1310533</id><snippet>def job_categories():
    categories = JobCategory.objects.all()
    return {'categories': categories}
</snippet></ROW><ROW><id>1310787</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.gmtime(0)
(1970, 1, 1, 0, 0, 0, 3, 1, 0)
</snippet></ROW><ROW><id>1310928</id><snippet>static PyObject *fastint_int(PyObject *self, PyObject *args) {
    char *s; unsigned r = 0;
    if (!PyArg_ParseTuple(args, "s", &amp;s)) return NULL;
    for (r = 0; *s; r = r * 10 + *s++ - '0');
    return Py_BuildValue("i", r);
}
</snippet></ROW><ROW><id>1311094</id><snippet>__init__</snippet></ROW><ROW><id>1311094</id><snippet>__init__(self, redirect=False, filename=None, useBestVisual=False, clearSigInt=True)</snippet></ROW><ROW><id>1311094</id><snippet>redirect=True</snippet></ROW><ROW><id>1311094</id><snippet>sys.stdout</snippet></ROW><ROW><id>1311094</id><snippet>sys.stderr</snippet></ROW><ROW><id>1311094</id><snippet>redirect==True and filename is None</snippet></ROW><ROW><id>1311980</id><snippet>{% if %}</snippet></ROW><ROW><id>1311980</id><snippet>{% for %}</snippet></ROW><ROW><id>1312389</id><snippet>a = global_dict["foo"]
</snippet></ROW><ROW><id>1312389</id><snippet>global_dict["bar"] = "hello"
</snippet></ROW><ROW><id>1312389</id><snippet>global_dict["baz"] = "world"
</snippet></ROW><ROW><id>1312389</id><snippet>if "foo" not in global_dict:
   global_dict["foo"] = 1
</snippet></ROW><ROW><id>1312389</id><snippet>global_dict["foo"] = 2
</snippet></ROW><ROW><id>1312389</id><snippet>lock = RLock()

def thread_A():
    lock.acquire()
    try:
        if "foo" not in global_dict:
            global_dict["foo"] = 1
    finally:
        lock.release()

def thread_B():
    lock.acquire()
    try:
        global_dict["foo"] = 2
    finally:
        lock.release()
</snippet></ROW><ROW><id>1312542</id><snippet>ProgressBar.render()</snippet></ROW><ROW><id>1312800</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>1312800</id><snippet>def __init__(self):
    ...
    QObject.connect(self.cbLayer, SIGNAL("currentIndexChanged(int)"), self.warn)

def warn(index):
    QMessageBox.warning(self, "items: ", do_stuff(cbLayer.itemData(index)) )

def do_stuff(self, item):
    QMessageBox.warning(self, str(item))
</snippet></ROW><ROW><id>1312870</id><snippet>a()</snippet></ROW><ROW><id>1312870</id><snippet>__init__</snippet></ROW><ROW><id>1312870</id><snippet>num</snippet></ROW><ROW><id>1312870</id><snippet>def __init__(self,num):
    if callable(num):
        raise TypeError('Printer decorator takes an argument')
    self.__num=num
</snippet></ROW><ROW><id>1313592</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>1313592</id><snippet>REMOTE_USER</snippet></ROW><ROW><id>1313592</id><snippet>class MyModel(django.db.Model):
    MyTextField = django.db.TextField(db_column="mytextfield", primary_key=True)

    class Meta:
        db_table = "my_table"
</snippet></ROW><ROW><id>1313592</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>1313837</id><snippet>foo = latestpdf(d)</snippet></ROW><ROW><id>1313868</id><snippet>zipfile.ZipFile</snippet></ROW><ROW><id>1313868</id><snippet>StringIO</snippet></ROW><ROW><id>1313868</id><snippet>BytesIO</snippet></ROW><ROW><id>1313868</id><snippet>try:
  from cStringIO import StringIO
except:
  from StringIO import StringIO
import zipfile

fp = StringIO('PK\x03\x04\x14')
zfp = zipfile.ZipFile(fp, "r")
</snippet></ROW><ROW><id>1313937</id><snippet>list_filter = ['group']
</snippet></ROW><ROW><id>1313937</id><snippet>list_filter = ['group_set']
</snippet></ROW><ROW><id>1314138</id><snippet>&lt;A href="http://cad.chp.ca.gov/iiqr.asp?Center=RDCC&amp;LogNumber=0197D0820&amp;t=Traffic%20Hazard&amp;l=3358%20MYRTLE&amp;b="&gt;</snippet></ROW><ROW><id>1314138</id><snippet>"Center=RDCC&amp;LogNumber=0197D0820&amp;t=Traffic%20Hazard&amp;l=3358%20MYRTLE&amp;b="</snippet></ROW><ROW><id>1314352</id><snippet>str.isalpha</snippet></ROW><ROW><id>1314352</id><snippet>my_list = ['foo','bar','baz','&gt;=','5.2']

# With
only_words = [token for token in my_list if token.isalpha()]

# Without
only_words = filter(str.isalpha, my_list)
</snippet></ROW><ROW><id>1314352</id><snippet>map</snippet></ROW><ROW><id>1314352</id><snippet>filter</snippet></ROW><ROW><id>1314571</id><snippet>&gt;&gt;&gt; from subprocess import Popen, PIPE
&gt;&gt;&gt; stdout, stderr = Popen(['ssh', 'user@remote_computer', 'ps -ef'],
...                        stdout=PIPE).communicate()
&gt;&gt;&gt; print(stdout)
</snippet></ROW><ROW><id>1314571</id><snippet>ssh-agent</snippet></ROW><ROW><id>1314625</id><snippet>if value is not None and not value.has_key():
</snippet></ROW><ROW><id>1314625</id><snippet>value</snippet></ROW><ROW><id>1314625</id><snippet>db.Model</snippet></ROW><ROW><id>1314625</id><snippet>has_key</snippet></ROW><ROW><id>1314625</id><snippet>db.Model</snippet></ROW><ROW><id>1314625</id><snippet>db.Model</snippet></ROW><ROW><id>1314625</id><snippet>db.Model</snippet></ROW><ROW><id>1314698</id><snippet>-k</snippet></ROW><ROW><id>1314698</id><snippet>-x &lt;proxyhost[:port]&gt;</snippet></ROW><ROW><id>1314698</id><snippet>-k</snippet></ROW><ROW><id>1314698</id><snippet>curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
</snippet></ROW><ROW><id>1314698</id><snippet>-x</snippet></ROW><ROW><id>1314698</id><snippet>curl_setopt($curl, CURLOPT_PROXY, '&lt;proxyhost[:port]&gt;');
</snippet></ROW><ROW><id>1314739</id><snippet>URL url = new URL(fileUrl);
InputStream dis = url.openStream();
byte[] header = new byte[HEADER_SIZE];
dis.read(header);
</snippet></ROW><ROW><id>1315403</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1315403</id><snippet>__file__</snippet></ROW><ROW><id>1315403</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1315403</id><snippet>__file__</snippet></ROW><ROW><id>1315403</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1315403</id><snippet>import os, sys
dirname, filename = os.path.split(os.path.abspath(sys.argv[0]))
print os.path.join(dirname, "b.txt")
</snippet></ROW><ROW><id>1315446</id><snippet>found_f = False
try:
    opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
for o, a in opts:
    if o == '-f':
      process_f()
      found_f = True
    elif ...
if not found_f:
    print "-f was not given"
    usage()
    sys.exit(2)
</snippet></ROW><ROW><id>1315722</id><snippet>using System;
using System.Diagnostics;

namespace Test {

    class TrueCrypeStart
    {
        static void Main(string[] args)
        {

            string password = getPassword(...);
            Process tc= new Process();

            tc.StartInfo.FileName   = "TrueCrypt.exe";
            tc.StartInfo.Arguments = string.Format("/v \"{0}\" /p \"{1}\" /q", ...mount info ..., password); // for quiet!

            tc.Start();
        }
    }
}
</snippet></ROW><ROW><id>1316008</id><snippet>try:
    some_code_that_can_cause_an_exception()
    code_that_needs_to_run_when_there_are_no_exceptions()
except:
    some_code_to_handle_exceptions()
</snippet></ROW><ROW><id>1316008</id><snippet>else</snippet></ROW><ROW><id>1316008</id><snippet>else</snippet></ROW><ROW><id>1316008</id><snippet>code_that_needs_to_run_when_there_are_no_exceptions</snippet></ROW><ROW><id>1316104</id><snippet>import itertools

for x, y, z in itertools.product(*map(xrange, (x_dim, y_dim, z_dim)):
    ...
</snippet></ROW><ROW><id>1316104</id><snippet>cube = numpy.array(list(itertools.product((0,1), (0,1), (0,1))))
print cube
array([[0, 0, 0],
       [0, 0, 1],
       [0, 1, 0],
       [0, 1, 1],
       [1, 0, 0],
       [1, 0, 1],
       [1, 1, 0],
       [1, 1, 1]])
</snippet></ROW><ROW><id>1316104</id><snippet>print cube + (10,100,1000)
array([[  10,  100, 1000],
       [  10,  100, 1001],
       [  10,  101, 1000],
       [  10,  101, 1001],
       [  11,  100, 1000],
       [  11,  100, 1001],
       [  11,  101, 1000],
       [  11,  101, 1001]])
</snippet></ROW><ROW><id>1316104</id><snippet>cube + (x,y,z)</snippet></ROW><ROW><id>1316104</id><snippet>import itertools, numpy

cube = numpy.array(list(itertools.product((0,1), (0,1), (0,1))))

x_dim = y_dim = z_dim = 10

for offset in itertools.product(*map(xrange, (x_dim, y_dim, z_dim))):
    work_with_cube(cube+offset)
</snippet></ROW><ROW><id>1316104</id><snippet>itertools.product</snippet></ROW><ROW><id>1316104</id><snippet>itertools.product(a,b,c)</snippet></ROW><ROW><id>1316104</id><snippet>map(xrange, ...)</snippet></ROW><ROW><id>1316104</id><snippet>*map(...)</snippet></ROW><ROW><id>1316245</id><snippet>$ python -m timeit -s 'text="foo"' 'text.startswith("a")'
1000000 loops, best of 3: 0.537 usec per loop

$ python -m timeit -s 'text="foo"' 'text[0]=="a"'
1000000 loops, best of 3: 0.22 usec per loop
</snippet></ROW><ROW><id>1316245</id><snippet>text[0]</snippet></ROW><ROW><id>1316546</id><snippet>import httplib2
h = httplib2.Http(".cache")
resp, content = h.request("http://example.org/", "GET")
</snippet></ROW><ROW><id>1316693</id><snippet># pylint: disable-msg=E0611</snippet></ROW><ROW><id>1316693</id><snippet>email</snippet></ROW><ROW><id>1316696</id><snippet> #...
 (r'^$', index),
 #...
</snippet></ROW><ROW><id>1316728</id><snippet>class Foo(object):
    def __init__(self,name,weight):
    	self.name = name
    	self.weight = weight

&gt;&gt;&gt; D = {}
&gt;&gt;&gt; D['1L'] = Foo("James",67)
&gt;&gt;&gt; D['2L'] = Foo("Jack",83)
&gt;&gt;&gt; D
{'2L': &lt;__main__.Foo object at 0x013EB330&gt;,
 '1L': &lt;__main__.Foo object at 0x00C402D0&gt;}

&gt;&gt;&gt; D['1L'].name
'James'
</snippet></ROW><ROW><id>1316728</id><snippet>DictName[KEY].attritbute</snippet></ROW><ROW><id>1316754</id><snippet>from google.appengine.dist import use_library
use_library('django', '1.0')
</snippet></ROW><ROW><id>1316789</id><snippet>f</snippet></ROW><ROW><id>1316789</id><snippet>f</snippet></ROW><ROW><id>1316789</id><snippet>f</snippet></ROW><ROW><id>1316789</id><snippet>def f(self=self):</snippet></ROW><ROW><id>1316789</id><snippet>def g(req, self=self):</snippet></ROW><ROW><id>1316789</id><snippet>self</snippet></ROW><ROW><id>1316793</id><snippet>gc.collect()</snippet></ROW><ROW><id>1316959</id><snippet>''.join</snippet></ROW><ROW><id>1316959</id><snippet>string.joinfields</snippet></ROW><ROW><id>1316959</id><snippet>array</snippet></ROW><ROW><id>1316959</id><snippet>''.join</snippet></ROW><ROW><id>1316959</id><snippet>timeit</snippet></ROW><ROW><id>1317128</id><snippet>import MySQLdb

conn = MySQLdb.connect(host="localhost", user="root", passwd="nobodyknow", db="amit")
cursor = conn.cursor()

stmt = "SELECT * FROM overflows"
cursor.execute(stmt)

# Fetch and output
result = cursor.fetchall()
print result

# get the number of rows
numrows = int(cursor.rowcount)

# Close connection
conn.close()
</snippet></ROW><ROW><id>1317412</id><snippet>for key in myRDP:
    name = myNames.get(key, None)
    if name:
        print key, name
</snippet></ROW><ROW><id>1317412</id><snippet>dict.get</snippet></ROW><ROW><id>1317412</id><snippet>None</snippet></ROW><ROW><id>1317578</id><snippet>&gt;&gt;&gt; .1
0.10000000000000001
</snippet></ROW><ROW><id>1317578</id><snippet>repr</snippet></ROW><ROW><id>1317578</id><snippet>&gt;&gt;&gt; repr(.1)
'0.10000000000000001'
</snippet></ROW><ROW><id>1317578</id><snippet>&gt;&gt;&gt; str(.1)
'0.1'
</snippet></ROW><ROW><id>1317578</id><snippet>&gt;&gt;&gt; '%.5f' % .1
'0.10000'
&gt;&gt;&gt; '%.5f' % .12345678
'0.12346'
</snippet></ROW><ROW><id>1317642</id><snippet>sed</snippet></ROW><ROW><id>1317642</id><snippet>import foo</snippet></ROW><ROW><id>1317642</id><snippet>foo</snippet></ROW><ROW><id>1317642</id><snippet>foo</snippet></ROW><ROW><id>1317642</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>1317965</id><snippet>f(1, *(2,3,4), **{'keyword':13})
</snippet></ROW><ROW><id>1318251</id><snippet>class HotelController(Controller):
    """ Controller to handle requests to Hotels """

    def index(self):
        """ Handle the index page here """
        pass

    def addNewHotel(self):
        """ Register a new hotel here """
        pass

    def lookup(self, state_name, *remainder):
        """ Read the state, create a new StateController and dispatch """
        state_dispatch = StateController(state_name)
        return state_dispatch, remainder

class StateController(object):
    """ Controller used to dispatch """

    def __init__(self, state_name):
        # do your work on the state here
        pass

    def create(self, state_name):
        """ Create a new state here """

    def lookup(self, city_name, *remainder):
        """ keep on dispatching to other controllers """
        city_dispatch = CityController(city_name)
        return city_dispatch, remainder
</snippet></ROW><ROW><id>1318939</id><snippet>import os
import somefakelib

def myfunc(x):
    blah = "Something"
    print os.listdir( x+blh )
</snippet></ROW><ROW><id>1318939</id><snippet>C:  1: Missing docstring
F:  2: Unable to import 'somefakelib' (No module named somefakelib)
C:  4:myfunc: Missing docstring
C:  4:myfunc: Invalid name "x" (should match [a-z_][a-z0-9_]{2,30}$)
C:  4:myfunc: Invalid name "x" (should match [a-z_][a-z0-9_]{2,30}$)
E:  6:myfunc: Undefined variable 'blh'
W:  5:myfunc: Unused variable 'blah'
W:  2: Unused import somefakelib
</snippet></ROW><ROW><id>1318939</id><snippet>#pylint:disable-msg=R0903,C0103,R0903,F0401,C0301
</snippet></ROW><ROW><id>1318939</id><snippet>pylint --disable-msg=R0903,C0103,R0903,F0401,C0301 myfile.py
</snippet></ROW><ROW><id>1318939</id><snippet>C:  1: Missing docstring
C:  4:myfunc: Missing docstring
E:  6:myfunc: Undefined variable 'blh'
W:  5:myfunc: Unused variable 'blah'
W:  2: Unused import somefakelib
</snippet></ROW><ROW><id>1318939</id><snippet>example.py:2: 'somefakelib' imported but unused
example.py:6: undefined name 'blh'
</snippet></ROW><ROW><id>1318939</id><snippet>pep8.py</snippet></ROW><ROW><id>1318939</id><snippet>example.py:4:1: E302 expected 2 blank lines, found 1
example.py:6:23: E201 whitespace after '('
example.py:6:32: W292 no newline at end of file
</snippet></ROW><ROW><id>1318939</id><snippet>pep8.py</snippet></ROW><ROW><id>1319135</id><snippet>func</snippet></ROW><ROW><id>1319135</id><snippet>func</snippet></ROW><ROW><id>1319150</id><snippet>argtypes</snippet></ROW><ROW><id>1319219</id><snippet>bc = 'on' if c.page=='blog' else 'off'
</snippet></ROW><ROW><id>1319353</id><snippet>first_list = [1, 2, 2, 5]
second_list = [2, 5, 7, 9]

in_first = set(first_list)
in_second = set(second_list)

in_second_but_not_in_first = in_second - in_first

result = first_list + list(in_second_but_not_in_first)
print result  # Prints [1, 2, 2, 5, 9, 7]
</snippet></ROW><ROW><id>1319353</id><snippet>print first_list + list(set(second_list) - set(first_list))
</snippet></ROW><ROW><id>1319417</id><snippet>element</snippet></ROW><ROW><id>1319417</id><snippet>element = ET.parse(fp).getroot()
</snippet></ROW><ROW><id>1319417</id><snippet>element = ET.parse(fp)
</snippet></ROW><ROW><id>1319417</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;ItemSearchResponse&gt;
  &lt;Items&gt;
    &lt;Item&gt;
      &lt;ItemAttributes&gt;
        &lt;ListPrice&gt;
          &lt;Amount&gt;2260&lt;/Amount&gt;
        &lt;/ListPrice&gt;
      &lt;/ItemAttributes&gt;
      &lt;Offers&gt;
        &lt;Offer&gt;
          &lt;OfferListing&gt;
            &lt;Price&gt;
              &lt;Amount&gt;1853&lt;/Amount&gt;
            &lt;/Price&gt;
          &lt;/OfferListing&gt;
        &lt;/Offer&gt;
      &lt;/Offers&gt;
    &lt;/Item&gt;
  &lt;/Items&gt;
&lt;/ItemSearchResponse&gt;
</snippet></ROW><ROW><id>1319417</id><snippet>e = element.findall('Items/Item/ItemAttributes/ListPrice/Amount')
</snippet></ROW><ROW><id>1319417</id><snippet>from elementtree import ElementTree as ET
fp = open("output.xml","r")
element = ET.parse(fp)
e = element.findall('Items/Item/ItemAttributes/ListPrice/Amount')
for i in e:
  print i.text
</snippet></ROW><ROW><id>1319417</id><snippet>from elementtree import ElementTree as ET
fp = open("output.xml","r")
element = ET.parse(fp)

namespace = "{http://webservices.amazon.com/AWSECommerceService/2008-08-19}"
e = element.findall('{0}Items/{0}Item/{0}ItemAttributes/{0}ListPrice/{0}Amount'.format(namespace))
for i in e:
    print i.text
</snippet></ROW><ROW><id>1319433</id><snippet>class StatusCodeException(Exception):
  def __init__(self, code):
    self.status_code = code

class RedirectException(StatusCodeException):
  def __init__(self, location, status=302):
    super(RedirectException, self).__init__(status)
    self.location = location

class ForbiddenException(StatusCodeException):
  def __init__(self):
    super(ForbiddenException, self).__init__(403)

class ExtendedHandler(webapp.RequestHandler):
  def handle_exception(self, exception, debug_mode):
    if isinstance(exception, RedirectException):
      self.redirect(exception.location)
    else:
      self.error(exception.status_code)
</snippet></ROW><ROW><id>1319675</id><snippet>class MyException(Exception):
    pass
</snippet></ROW><ROW><id>1319675</id><snippet>class ValidationError(Exception):
    def __init__(self, message, Errors):

        # Call the base class constructor with the parameters it needs
        Exception.__init__(self, message)

        # Now for your custom code...
        self.Errors = Errors
</snippet></ROW><ROW><id>1319675</id><snippet>e.Errors</snippet></ROW><ROW><id>1320202</id><snippet>class Crazy(object):
  def __init__(self):
    self.d = {}
    self.L = []
    self.sorted = True
  def __getitem__(self, k):
    return self.d[k]
  def __setitem__(self, k, v):
    if k not in self.d:
      self.L.append(k)
      self.sorted = False
    self.d[k] = v
  def __delitem__(self, k):
    del self.d[k]
    self.L.remove(k)
  def __iter__(self):
    if not self.sorted:
      self.L.sort()
      self.sorted = True
    return iter(self.L)
</snippet></ROW><ROW><id>1320202</id><snippet>self.L.sort()</snippet></ROW><ROW><id>1320202</id><snippet>__setitem__</snippet></ROW><ROW><id>1320242</id><snippet>def override(f):
  f.override = True
  return f
</snippet></ROW><ROW><id>1320242</id><snippet>@override
def foobar(self): ...
</snippet></ROW><ROW><id>1320242</id><snippet>class Myclass...:</snippet></ROW><ROW><id>1320242</id><snippet>@checkedclass
class MyClass(whateverbasesyouwantorneed):
    ...
</snippet></ROW><ROW><id>1320242</id><snippet>import inspect

def checkedclass(klass):
    oopses = []
    class Fakeclass(klass.__bases__): pass
    for m in inspect.getmembers(klass, inspect.ismethod):
        if not hasattr(Fakeclass, m.__name__): pass
        if hasattr(m, 'override'): pass
        oopses.append(m)
    if oopses:
        ...scream and shout about the accidents!!!...
    return klass
</snippet></ROW><ROW><id>1320242</id><snippet>@override</snippet></ROW><ROW><id>1320242</id><snippet>@checkedclass</snippet></ROW><ROW><id>1320563</id><snippet>button.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse("red"))</snippet></ROW><ROW><id>1320669</id><snippet># This code will work fine, note we are assigning the result 
# of the BeautifulSoup object to prevent it from printing immediately.
from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(u'\xa0')

# This will probably show the error you saw
print soup

# And this would probably be fine
print soup.encode('utf-8')
</snippet></ROW><ROW><id>1320744</id><snippet>glob</snippet></ROW><ROW><id>1320744</id><snippet>tifCounter = len(glob.glob1(myPath,"*.tif"))
</snippet></ROW><ROW><id>1321039</id><snippet>def point_to_index(point):
    try:
        return points_dict.get(point, points.index(point))
    except:
        if len(points) &gt;= max_cache:
            del points_dict[points[len(points)-max_cache]]
        points.append(point)
        points_dict[points] = len(points)-1
        return len(points)-1
</snippet></ROW><ROW><id>1321060</id><snippet>fcntl.lockf(fileobj.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)</snippet></ROW><ROW><id>1321060</id><snippet>fcntl.lockf(fileobj.fileno(), fcntl.LOCK_UN)</snippet></ROW><ROW><id>1321345</id><snippet>import distutils.core
from distutils.command.install import install
...
class my_install(install):
    def run(self):
        install.run(self)
        # Custom stuff here
        # distutils.command.install actually has some nice helper methods
        # and interfaces. I strongly suggest reading the docstrings.
...
distutils.core.setup(..., cmdclass=dict(install=my_install), ...)
</snippet></ROW><ROW><id>1321714</id><snippet>def make_image_from_file(fname):
  im = gtk.Image()
  im.set_from_file(fname)
  return im

self.out_button.set_image(make_image_from_file(..))
</snippet></ROW><ROW><id>1321714</id><snippet>gtk.image_new_from_file(filename)
</snippet></ROW><ROW><id>1322152</id><snippet>types</snippet></ROW><ROW><id>1322152</id><snippet>primitiveTypes</snippet></ROW><ROW><id>1322152</id><snippet>if type(myvar) in primitiveTypes:
    ...
</snippet></ROW><ROW><id>1322152</id><snippet>if isinstance(myvar, primitiveTypes): ...
</snippet></ROW><ROW><id>1322524</id><snippet>import time

def isTimeFormat(input):
    try:
        time.strptime(input, '%H:%M')
        return True
    except ValueError:
        return False

&gt;&gt;&gt;isTimeFormat('12:12')
True

&gt;&gt;&gt;isTimeFormat('012:12')
False
</snippet></ROW><ROW><id>1323025</id><snippet>import bisect

def closest(haystack, needle):
    if len(haystack) == 0: return None, None

    index = bisect.bisect_left(haystack, needle)
    if index == 0:
        return None, haystack[0]
    if index == len(haystack):
        return haystack[index], None
    if haystack[index] == needle:
        return haystack[index], haystack[index]        
    return haystack[index-1], haystack[index]
</snippet></ROW><ROW><id>1323426</id><snippet>in</snippet></ROW><ROW><id>1323426</id><snippet>has_key()</snippet></ROW><ROW><id>1323458</id><snippet>Ignore this exception location</snippet></ROW><ROW><id>1323458</id><snippet>try except</snippet></ROW><ROW><id>1323554</id><snippet>import unittest

class CommonTests(object):
    def testCommon(self):
        print 'Calling BaseTest:testCommon'
        value = 5
        self.assertEquals(value, 5)

class SubTest1(unittest.TestCase, CommonTests):

    def testSub1(self):
        print 'Calling SubTest1:testSub1'
        sub = 3
        self.assertEquals(sub, 3)


class SubTest2(unittest.TestCase, CommonTests):

    def testSub2(self):
        print 'Calling SubTest2:testSub2'
        sub = 4
        self.assertEquals(sub, 4)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>1323966</id><snippet>hg</snippet></ROW><ROW><id>1323966</id><snippet>nose</snippet></ROW><ROW><id>1323966</id><snippet>nose</snippet></ROW><ROW><id>1324114</id><snippet>ord</snippet></ROW><ROW><id>1324114</id><snippet>None</snippet></ROW><ROW><id>1324114</id><snippet>def translate_non_alphanumerics(to_translate, translate_to=u'_'):
    not_letters_or_digits = u'!"#%\'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~'
    translate_table = dict((ord(char), translate_to) for char in not_letters_or_digits)
    return to_translate.translate(translate_table)

&gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!')
u'_foo__'
</snippet></ROW><ROW><id>1324114</id><snippet>ord</snippet></ROW><ROW><id>1324114</id><snippet>translate_to</snippet></ROW><ROW><id>1324114</id><snippet>&gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!', u'bad')
u'badfoobadbad'
</snippet></ROW><ROW><id>1324264</id><snippet>import pdb

def Pdb_reset_list(self, arg):
    self.lineno = None
    print &gt;&gt;self.stdout, "Reset list position."
pdb.Pdb.do_reset = Pdb_reset_list
pdb.Pdb.do_rl = Pdb_reset_list

a = 1
b = 2

pdb.set_trace()

print a, b
</snippet></ROW><ROW><id>1324264</id><snippet>list</snippet></ROW><ROW><id>1324264</id><snippet>import pdb
Pdb = pdb.Pdb

Pdb._do_list = Pdb.do_list
def pdb_list_wrapper(self, arg):
    if arg.strip().lower() in ('r', 'reset', 'c', 'current'):
        self.lineno = None
        arg = ''
    self._do_list(arg)
Pdb.do_list = Pdb.do_l = pdb_list_wrapper

a = 1
b = 2

pdb.set_trace()

print a, b
</snippet></ROW><ROW><id>1324649</id><snippet>ordering</snippet></ROW><ROW><id>1324649</id><snippet>Meta</snippet></ROW><ROW><id>1324649</id><snippet>class Article(models.Model):
    ....

    class Meta:
        ordering = ['surname', 'name']
</snippet></ROW><ROW><id>1324848</id><snippet>from datetime import datetime, timedelta

START, END = xrange(2)
def tparse(timestring):
    return datetime.strptime(timestring, '%H:%M')

def sum_intervals(intervals):
    times = []
    for interval in intervals:
        times.append((tparse(interval[START]), START))
        times.append((tparse(interval[END]), END))
    times.sort()

    started = 0
    result = timedelta()
    for t, type in times:
        if type == START:
            if not started:
                start_time = t
            started += 1
        elif type == END:
            started -= 1
            if not started:
               result += (t - start_time) 
    return result
</snippet></ROW><ROW><id>1324848</id><snippet>intervals = [
                ('16:30', '20:00'),
                ('15:00', '19:00'),
            ]
print sum_intervals(intervals)
</snippet></ROW><ROW><id>1324848</id><snippet>5:00:00
</snippet></ROW><ROW><id>1324848</id><snippet>intervals = [
                ('16:30', '20:00'),
                ('15:00', '19:00'),
                ('03:00', '04:00'),
                ('06:00', '08:00'),
                ('07:30', '11:00'),
            ]
print sum_intervals(intervals)
</snippet></ROW><ROW><id>1324848</id><snippet>11:00:00
</snippet></ROW><ROW><id>1324939</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array(l)
&gt;&gt;&gt; a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>1324939</id><snippet>&gt;&gt;&gt; l * 2
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a * 2
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
</snippet></ROW><ROW><id>1324939</id><snippet>&gt;&gt;&gt; l + 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate list (not "int") to list
&gt;&gt;&gt; a + 2
array([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
&gt;&gt;&gt; l / 2.0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for /: 'list' and 'float'
&gt;&gt;&gt; a / 2.0
array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])
</snippet></ROW><ROW><id>1324939</id><snippet>&gt;&gt;&gt; a + a
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
&gt;&gt;&gt; a + l
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
</snippet></ROW><ROW><id>1325265</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def special_match(strg, search=re.compile(r'[^a-z0-9.]').search):
...     return not bool(search(strg))
...
&gt;&gt;&gt; special_match("")
True
&gt;&gt;&gt; special_match("az09.")
True
&gt;&gt;&gt; special_match("az09.\n")
False
# The above test case is to catch out any attempt to use re.match()
# with a `$` instead of `\Z` -- see point (6) below.
&gt;&gt;&gt; special_match("az09.#")
False
&gt;&gt;&gt; special_match("az09.X")
False
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1325265</id><snippet>==== Earlier text ====
</snippet></ROW><ROW><id>1325265</id><snippet>reg=re.compile('^[a-z0-9\.]+$')
&gt;&gt;&gt;reg.match('jsdlfjdsf12324..3432jsdflsdf')
True
</snippet></ROW><ROW><id>1325265</id><snippet>True</snippet></ROW><ROW><id>1325265</id><snippet>^</snippet></ROW><ROW><id>1325265</id><snippet>^</snippet></ROW><ROW><id>1325265</id><snippet>prompt&gt;rem OP's version -- NOTE: OP used raw string!

prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import
re;reg=re.compile(r'[^a-z0-9\.]')" "not bool(reg.search(t))"
1000000 loops, best of 3: 1.43 usec per loop

prompt&gt;rem OP's version w/o backslash

prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import
re;reg=re.compile(r'[^a-z0-9.]')" "not bool(reg.search(t))"
1000000 loops, best of 3: 1.44 usec per loop

prompt&gt;rem cleaned-up version of accepted answer

prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import
re;reg=re.compile(r'[a-z0-9.]+\Z')" "bool(reg.match(t))"
100000 loops, best of 3: 2.07 usec per loop

prompt&gt;rem accepted answer

prompt&gt;\python26\python -mtimeit -s"t='jsdlfjdsf12324..3432jsdflsdf';import
re;reg=re.compile('^[a-z0-9\.]+$')" "bool(reg.match(t))"
100000 loops, best of 3: 2.08 usec per loop
</snippet></ROW><ROW><id>1325265</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; bool(re.compile('^[a-z0-9\.]+$').match('1234\n'))
True # uh-oh
&gt;&gt;&gt; bool(re.compile('^[a-z0-9\.]+\Z').match('1234\n'))
False
</snippet></ROW><ROW><id>1325533</id><snippet>&gt;&gt;&gt; a = (c_byte * 4)()
&gt;&gt;&gt; a
&lt;__main__.c_byte_Array_4 object at 0xb7da2df4&gt;
&gt;&gt;&gt; cast(a, POINTER(c_int))
&lt;ctypes.LP_c_long object at ...&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1325560</id><snippet>f.id</snippet></ROW><ROW><id>1325768</id><snippet>namedtuple</snippet></ROW><ROW><id>1325768</id><snippet>from collections import namedtuple

Foo = namedtuple('Foo', ['bar', 'quux'])

foo = Foo(bar=13, quux=74)
print foo.bar, foo.quux

foo2 = Foo()  # error
</snippet></ROW><ROW><id>1325768</id><snippet>property()</snippet></ROW><ROW><id>1325927</id><snippet>fileinput</snippet></ROW><ROW><id>1325927</id><snippet>import fileinput

processing_foo1s = False

for line in fileinput.input('1.txt', inplace=1):
  if line.startswith('foo1'):
    processing_foo1s = True
  else:
    if processing_foo1s:
      print 'foo bar'
    processing_foo1s = False
  print line,
</snippet></ROW><ROW><id>1325927</id><snippet>.bak</snippet></ROW><ROW><id>1325927</id><snippet>"foo bar"</snippet></ROW><ROW><id>1325927</id><snippet>foo1</snippet></ROW><ROW><id>1326219</id><snippet>Python 2.6.2 on a 3GHz Intel Core 2

Kid template                         696.89 ms
Kid template + cElementTree          649.88 ms
Genshi template + tag builder        431.01 ms
Genshi tag builder                   389.39 ms
Django template                      352.68 ms
Genshi template                      266.35 ms
ElementTree                          180.06 ms
cElementTree                         107.85 ms
StringIO                              41.48 ms
Jinja 2                               36.38 ms
Cheetah template                      34.66 ms
Mako Template                         29.06 ms
Spitfire template                     21.80 ms
Tenjin                                18.39 ms
Spitfire template -O1                 11.86 ms
cStringIO                              5.80 ms
Spitfire template -O3                  4.91 ms
Spitfire template -O2                  4.82 ms
generator concat                       4.06 ms
list concat                            3.99 ms
generator concat optimized             2.84 ms
list concat optimized                  2.62 ms
</snippet></ROW><ROW><id>1326860</id><snippet>import shelve

a = 'trxns.xml'
b = 'foobar.xml'
c = 'profile.xml'

urls = [a, b, c]
cache = shelve.open('my.cache', 'c')

try:
    cache[a] = a*1000
    cache[b] = b*10000
finally:
    cache.close()


cache = shelve.open('my.cache', 'c')

try:
    print cache.keys()
    print [url for url in urls if cache.has_key(url)]
    print cache.keys()
finally:
    cache.close()
</snippet></ROW><ROW><id>1326860</id><snippet>[]
['trxns.xml', 'foobar.xml']
['foobar.xml', 'trxns.xml']
</snippet></ROW><ROW><id>1327025</id><snippet>from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

    def _get_full_name(self):
        return "%s %s" % (self.first_name, self.last_name)

    def _set_full_name(self, combined_name):
        self.first_name, self.last_name = combined_name.split(' ', 1)

    full_name = property(_get_full_name)

    full_name_2 = property(_get_full_name, _set_full_name)
</snippet></ROW><ROW><id>1327227</id><snippet>def fn(*args):
    fn2(['foo', 'bar'] + list(args))
</snippet></ROW><ROW><id>1327389</id><snippet>title_search = re.search('&lt;title&gt;(.*)&lt;/title&gt;', html, re.IGNORECASE)

if title_search:
    title = title_search.group(1)
</snippet></ROW><ROW><id>1327425</id><snippet>def is_sublist_of_any_list(cand, lists):
    # Compare candidate to a single list
    def is_sublist_of_list(cand, target):
        try:
            i = 0            
            try:
                start = target.index(cand[0])
            except:
                return False

            while start &lt; (len(target) + len(cand)) - start:
                if cand == target[start:len(cand)]:
                    return True
                else:
                    start = target.index(cand[0], start + 1)
        except ValueError:
            return False

    # See if candidate matches any other list
    return any(is_sublist_of_list(cand, target) for target in lists if len(cand) &lt;= len(target))

# Compare candidates to all other lists
def super_lists(lists):
    a = [cand for i, cand in enumerate(lists) if not is_sublist_of_any_list(cand, lists[:i] + lists[i+1:])]
    return a

lists = [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [1], [1, 2, 3, 4], [1, 2], [17, 18, 19, 22, 41, 48], [2, 3], [1, 2, 3], [50, 69], [1, 2, 3], [2, 3, 21], [1, 2, 3], [1, 2, 4, 8], [1, 2, 4, 5, 6]]
expect = [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [17, 18, 19, 22, 41, 48], [50, 69],  [2, 3, 21], [1, 2, 4, 8], [1, 2, 4, 5, 6]]

def test():
    out = super_lists(list(lists))

    print "In  : ", lists
    print "Out : ", out

    assert (out == expect)
</snippet></ROW><ROW><id>1327425</id><snippet>In  :  [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [1], [1, 2, 3, 4], [1, 2], [17, 18, 19, 22, 41, 48], [2, 3], [1, 2, 3], [50, 69], [1, 2, 3], [2, 3, 21], [1, 2, 3], [1, 2, 4, 8], [1, 2, 4, 5, 6]]
Out :  [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [17, 18, 19, 22, 41, 48], [50, 69], [2, 3, 21], [1, 2, 4, 8], [1, 2, 4, 5, 6]]
</snippet></ROW><ROW><id>1327564</id><snippet>import functools

...

fooA = functools.partial(call_one, _fooA)
fooB = functools.partial(call_one, _fooB)
</snippet></ROW><ROW><id>1327564</id><snippet>def refactorMe(func):
    def wrapper(parm1, parm2):
        if parm1:
            code_chunk_1

        func(parm1)

        if parm2[-1]:
            code_chunk_2

    return wrapper
</snippet></ROW><ROW><id>1327564</id><snippet>def _refactorMe(func):
        @functools.wraps(func) #the wraps decorator propagates name/docsting
        def wrapper(parm1, parm2):
            if parm1:
                code_chunk_1

            func(parm1, parm2)

            if parm2:
                code_chunk_2

        return wrapper
</snippet></ROW><ROW><id>1327564</id><snippet>@_refactorMe
def fooB(param1, param2):
    fooB_code  #uses only param1


@_refactorMe
def fooB(param1, param2):
    fooB_code  #uses only param1
</snippet></ROW><ROW><id>1328264</id><snippet>.. automodule:: module
   :members:
</snippet></ROW><ROW><id>1328675</id><snippet>read(1)</snippet></ROW><ROW><id>1328675</id><snippet>read(inWaiting())</snippet></ROW><ROW><id>1328899</id><snippet>pickle.py</snippet></ROW><ROW><id>1328899</id><snippet>copy_reg.py</snippet></ROW><ROW><id>1328899</id><snippet>pickle.Pickler</snippet></ROW><ROW><id>1328899</id><snippet>save_inst</snippet></ROW><ROW><id>1328899</id><snippet>    if self.bin:
        save(cls)
        for arg in args:
            save(arg)
        write(OBJ)
    else:
        for arg in args:
            save(arg)
        write(INST + cls.__module__ + '\n' + cls.__name__ + '\n')
</snippet></ROW><ROW><id>1328899</id><snippet>save_global</snippet></ROW><ROW><id>1328899</id><snippet>Unpickler</snippet></ROW><ROW><id>1328899</id><snippet>_instantiate</snippet></ROW><ROW><id>1328899</id><snippet>find_class</snippet></ROW><ROW><id>1328899</id><snippet>def find_class(self, module, name):
    # Subclasses may override this
    __import__(module)
    mod = sys.modules[module]
    klass = getattr(mod, name)
    return klass
</snippet></ROW><ROW><id>1328899</id><snippet>find_class</snippet></ROW><ROW><id>1329140</id><snippet>gtk.Dialog.set_modal(True)</snippet></ROW><ROW><id>1330779</id><snippet>SAVEPOINT a;
INSERT INTO ....;
-- on error:
ROLLBACK TO SAVEPOINT a;
UPDATE ...;
-- on success:
RELEASE SAVEPOINT a;
</snippet></ROW><ROW><id>1331147</id><snippet>${url('/static/resource.css')}
</snippet></ROW><ROW><id>1331227</id><snippet>x = struct.pack(4*'B' + 'HB'[ALPHA&lt;256] + 4*'B', *data)
</snippet></ROW><ROW><id>1331250</id><snippet>*.pyc</snippet></ROW><ROW><id>1331250</id><snippet>compile</snippet></ROW><ROW><id>1331250</id><snippet>touch</snippet></ROW><ROW><id>1331250</id><snippet>find -name \\*.py -exec touch \\{\\} \\;</snippet></ROW><ROW><id>1331541</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; x = 2
&gt;&gt;&gt; sys.getsizeof(x)
14
&gt;&gt;&gt; sys.getsizeof(sys.getsizeof)
32
&gt;&gt;&gt; sys.getsizeof('this')
38
&gt;&gt;&gt; sys.getsizeof('this also')
48
</snippet></ROW><ROW><id>1331541</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; 
&gt;&gt;&gt; d = {
...     "int": 0,
...     "float": 0.0,
...     "dict": dict(),
...     "set": set(),
...     "tuple": tuple(),
...     "list": list(),
...     "str": "a",
...     "unicode": u"a",
...     "decimal": decimal.Decimal(0),
...     "object": object(),
... }
&gt;&gt;&gt; for k, v in sorted(d.iteritems()):
...     print k, sys.getsizeof(v)
...
decimal 40
dict 140
float 16
int 12
list 36
object 8
set 116
str 25
tuple 28
unicode 28
</snippet></ROW><ROW><id>1331541</id><snippet>decimal 36
dict 136
float 16
int 12
list 32
object 8
set 112
str 22
tuple 24
unicode 32
</snippet></ROW><ROW><id>1331541</id><snippet>decimal 52
dict 144
float 16
int 14
list 32
object 8
set 112
str 26
tuple 24
unicode 26
</snippet></ROW><ROW><id>1331840</id><snippet>"\r\n?|\n"</snippet></ROW><ROW><id>1331840</id><snippet>"[\r\n]+"</snippet></ROW><ROW><id>1332679</id><snippet>assertEqual = assertEquals = failUnlessEqual
</snippet></ROW><ROW><id>1332697</id><snippet>&gt;&gt;&gt;import os
&gt;&gt;&gt;os.system("java -version")

java version "1.5.0_19"
</snippet></ROW><ROW><id>1333116</id><snippet>ssh hudson@test "python/runtest.py \"$XAS_SVN\""
</snippet></ROW><ROW><id>1333414</id><snippet>done = set()
while len(queue) &gt; 0 :
   item = queue.pop()
   h = hash(item)
   if h not in done :
      process(item)
      done.add(h)
</snippet></ROW><ROW><id>1334038</id><snippet>result = default.copy()
result.update((k, v) for k, v in user.iteritems() if v is not None)
</snippet></ROW><ROW><id>1334202</id><snippet>isLinux</snippet></ROW><ROW><id>1334202</id><snippet>debug = getUserInput(isLinux=True)
</snippet></ROW><ROW><id>1334242</id><snippet>def completefactory(baseclass):
    class AutoComplete(baseclass):
        pass
    return AutoComplete
</snippet></ROW><ROW><id>1334242</id><snippet>TextAutoComplete = completefactory(TextCtrl)
PriceAutoComplete = completefactory(PriceCtrl)
</snippet></ROW><ROW><id>1334242</id><snippet>TextAutoComplete</snippet></ROW><ROW><id>1334242</id><snippet>class TextAutocomplete(TextCtrl, AutoComplete):
    pass
</snippet></ROW><ROW><id>1334705</id><snippet>__new__</snippet></ROW><ROW><id>1334705</id><snippet>__init__</snippet></ROW><ROW><id>1334705</id><snippet>__init__</snippet></ROW><ROW><id>1334705</id><snippet>self.host = host
self.userid = userid
etc.
</snippet></ROW><ROW><id>1334705</id><snippet>GetDataStore</snippet></ROW><ROW><id>1334705</id><snippet>conn = _mssql.connect(server=self.host, user=self.userid, etc.)
</snippet></ROW><ROW><id>1334758</id><snippet>from difflib import SequenceMatcher
text1 = open(file1).read()
text2 = open(file2).read()
m = SequenceMatcher(None, text1, text2)
m.ratio()
</snippet></ROW><ROW><id>1335148</id><snippet> class ClassA(Base):
     ...
     b_id = Column(None, ForeignKey('b.id'))
     b = relation(ClassB)
</snippet></ROW><ROW><id>1335148</id><snippet> my_object = ClassA()
 my_object.b = "foo"
</snippet></ROW><ROW><id>1335148</id><snippet> my_object.b_id = "foo"
 # or
 my_object.b = session.query(ClassB).get("foo")
</snippet></ROW><ROW><id>1335582</id><snippet>__hash__()</snippet></ROW><ROW><id>1335582</id><snippet>__cmp__()</snippet></ROW><ROW><id>1335582</id><snippet>__hash__()</snippet></ROW><ROW><id>1335582</id><snippet>x.__hash__()</snippet></ROW><ROW><id>1335582</id><snippet>id(x)</snippet></ROW><ROW><id>1335582</id><snippet>id</snippet></ROW><ROW><id>1335634</id><snippet>urllib</snippet></ROW><ROW><id>1336751</id><snippet>import signal
TIMEOUT = 5 # number of seconds your want for timeout

def interrupted(signum, frame):
    "called when read times out"
    print 'interrupted!'
signal.signal(signal.SIGALRM, interrupted)

def input():
    try:
            print 'You have 5 seconds to type in your stuff...'
            foo = raw_input()
            return foo
    except:
            # timeout
            return

# set alarm
signal.alarm(TIMEOUT)
s = input()
# disable the alarm after success
signal.alarm(0)
print 'You typed', s
</snippet></ROW><ROW><id>1336821</id><snippet>class Chunker(object):
    """Split `iterable` on evenly sized chunks.

    Leftovers are remembered and yielded at the next call.
    """
    def __init__(self, chunksize):
        assert chunksize &gt; 0
        self.chunksize = chunksize        
        self.chunk = []

    def __call__(self, iterable):
        """Yield items from `iterable` `self.chunksize` at the time."""
        assert len(self.chunk) &lt; self.chunksize
        for item in iterable:
            self.chunk.append(item)
            if len(self.chunk) == self.chunksize:
                # yield collected full chunk
                yield self.chunk
                self.chunk = []
</snippet></ROW><ROW><id>1336821</id><snippet>chunker = Chunker(3)
for s in "abcd", "efgh":
    for chunk in chunker(s):
        print ''.join(chunk)

if chunker.chunk: # is there anything left?
    print ''.join(chunker.chunk)
</snippet></ROW><ROW><id>1336821</id><snippet>abc
def
gh
</snippet></ROW><ROW><id>1336851</id><snippet>from string import Template

class MyTemplate(Template):
    delimiter = '#'
    idpattern = r'[a-z][_a-z0-9]*'

&gt;&gt;&gt; s = MyTemplate('#who likes $what')
&gt;&gt;&gt; s.substitute(who='tim', what='kung pao')
'tim likes $what'
</snippet></ROW><ROW><id>1336890</id><snippet>__slots__</snippet></ROW><ROW><id>1336890</id><snippet>__slots__</snippet></ROW><ROW><id>1336890</id><snippet>__slots__</snippet></ROW><ROW><id>1336890</id><snippet>__dict__</snippet></ROW><ROW><id>1336890</id><snippet>class Obj(object):
  __slots__ = ('i', 'l')
  def __init__(self, i):
    self.i = i
    self.l = []
all = {}
for i in range(1000000):
  all[i] = Obj(i)
</snippet></ROW><ROW><id>1336890</id><snippet>class Obj(object):
  def __init__(self, i):
    self.i = i
    self.l = []
all = {}
for i in range(1000000):
  all[i] = Obj(i)
</snippet></ROW><ROW><id>1336890</id><snippet>all = {}
for i in range(1000000):
  o = {}
  o['i'] = i
  o['l'] = []
  all[i] = o
</snippet></ROW><ROW><id>1336890</id><snippet>import collections

Obj = collections.namedtuple('Obj', 'i l')

all = {}
for i in range(1000000):
  all[i] = Obj(i, [])
</snippet></ROW><ROW><id>1336890</id><snippet>$ lshw | grep product | head -n 1
          product: Intel(R) Pentium(R) M processor 1.60GHz
$ python --version
Python 2.5
$ time python test_obj.py &amp;&amp; time python test_dict.py &amp;&amp; time python test_slots.py 

real    0m27.398s (using 'normal' object)
real    0m16.747s (using __dict__)
real    0m11.777s (using __slots__)
</snippet></ROW><ROW><id>1336890</id><snippet>$ python --version
Python 2.6.2
$ time python test_obj.py &amp;&amp; time python test_dict.py &amp;&amp; time python test_slots.py &amp;&amp; time python test_namedtuple.py 

real    0m27.197s (using 'normal' object)
real    0m17.657s (using __dict__)
real    0m12.249s (using __slots__)
real    0m12.262s (using namedtuple)
</snippet></ROW><ROW><id>1336890</id><snippet>__slots__</snippet></ROW><ROW><id>1336890</id><snippet>__slots__</snippet></ROW><ROW><id>1336891</id><snippet>fmin_cobyla()</snippet></ROW><ROW><id>1336891</id><snippet>b9</snippet></ROW><ROW><id>1336891</id><snippet>b10</snippet></ROW><ROW><id>1336891</id><snippet>fmin_cobyla()</snippet></ROW><ROW><id>1336891</id><snippet>fmin_cobyla()</snippet></ROW><ROW><id>1336891</id><snippet>b9 = lambda x: x[2] - x[3]
</snippet></ROW><ROW><id>1336891</id><snippet>b10</snippet></ROW><ROW><id>1336891</id><snippet>fmin_cobyla()</snippet></ROW><ROW><id>1337175</id><snippet>$ ipython
...
In [1]: %run file.py

Trying:
    3+2
Expecting:
    5
ok
1 items had no tests:
    __main__
1 items passed all tests:
   1 tests in __main__.Foo
1 tests in 2 items.
1 passed and 0 failed.
Test passed.

In [2]:
</snippet></ROW><ROW><id>1337175</id><snippet>ipython file.py</snippet></ROW><ROW><id>1337175</id><snippet>doctest.testmod()</snippet></ROW><ROW><id>1337175</id><snippet>__main__</snippet></ROW><ROW><id>1337175</id><snippet>__main__</snippet></ROW><ROW><id>1337175</id><snippet>__main__</snippet></ROW><ROW><id>1337175</id><snippet>if __name__ == '__main__':
    import doctest
    import the_current_module
    doctest.testmod(the_current_module)
</snippet></ROW><ROW><id>1337175</id><snippet>ipython_doctest</snippet></ROW><ROW><id>1337175</id><snippet>#! /usr/bin/env bash

echo "__IP.magic_run(\"$1\")" &gt; __ipython_run.py
ipython __ipython_run.py
</snippet></ROW><ROW><id>1337175</id><snippet>%run argname</snippet></ROW><ROW><id>1337175</id><snippet>$ ./ipython_doctest file.py
Trying:
    3+2
Expecting:
    5
ok
1 items had no tests:
    __main__
1 items passed all tests:
   1 tests in __main__.Foo
1 tests in 2 items.
1 passed and 0 failed.
Test passed.
Python 2.5 (r25:51908, Mar  7 2008, 03:27:42) 
Type "copyright", "credits" or "license" for more information.

IPython 0.9.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object'. ?object also works, ?? prints more.

In [1]:
</snippet></ROW><ROW><id>1337185</id><snippet>re.sub(r'\r\n|\r|\n', '\r\n', msg)</snippet></ROW><ROW><id>1337185</id><snippet>msg.replace('\r\n','\n').replace('\r','\n').replace('\n','\r\n')</snippet></ROW><ROW><id>1337871</id><snippet>class Building(Base):
    __tablename__ = 'building'
    id = Column(Integer, primary_key=True)
    building_type = Column(String(32), nullable=False)
    x = Column(Float, nullable=False)
    y = Column(Float, nullable=False)
    __mapper_args__ = {'polymorphic_on': building_type}

class Commercial(Building):
    __mapper_args__ = {'polymorphic_identity': 'commercial'}
    business = Column(String(50))

class Residential(Building):
    __mapper_args__ = {'polymorphic_identity': 'residential'}
    num_residents = Column(Integer)
</snippet></ROW><ROW><id>1337871</id><snippet>__tablename__ = 'commercial'
id = Column(None, ForeignKey('building.id'), primary_key=True)
</snippet></ROW><ROW><id>1337871</id><snippet># buildings that are within x&gt;5 and y&gt;3
session.query(Building).filter((Building.x &gt; 5) &amp; (Building.y &gt; 3))
# Residential buildings that have only 1 resident
session.query(Residential).filter(Residential.num_residents == 1)
</snippet></ROW><ROW><id>1337871</id><snippet>query.with_polymorphic()</snippet></ROW><ROW><id>1337976</id><snippet>property</snippet></ROW><ROW><id>1337976</id><snippet>@property</snippet></ROW><ROW><id>1337976</id><snippet>object</snippet></ROW><ROW><id>1337976</id><snippet>class Point:
</snippet></ROW><ROW><id>1337976</id><snippet>class Point(object):
</snippet></ROW><ROW><id>1337976</id><snippet>setter</snippet></ROW><ROW><id>1338491</id><snippet>&gt;&gt;&gt; import bsddb
&gt;&gt;&gt; bt = bsddb.btopen('bt')
&gt;&gt;&gt; bt.close()
&gt;&gt;&gt; bsddb.hashopen('bt')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "/usr/lib/python2.4/bsddb/__init__.py", line 298, in hashopen
    d.open(file, db.DB_HASH, flags, mode)
bsddb.db.DBInvalidArgError: (22, 'Invalid argument -- ./bt: unexpected file type or format')
</snippet></ROW><ROW><id>1338491</id><snippet>file</snippet></ROW><ROW><id>1338491</id><snippet>$ file /etc/aliases.db cert8.db 
/etc/aliases.db: Berkeley DB (Hash, version 8, native byte-order)
cert8.db:        Berkeley DB 1.85 (Hash, version 2, native byte-order)
</snippet></ROW><ROW><id>1338491</id><snippet>&gt;&gt;&gt; db = bsddb.hashopen('/etc/aliases.db')    # works, but...
&gt;&gt;&gt; db = bsddb.hashopen('cert8.db')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "/usr/lib/python2.4/bsddb/__init__.py", line 298, in hashopen
    d.open(file, db.DB_HASH, flags, mode)
bsddb.db.DBInvalidArgError: (22, 'Invalid argument -- ./cert8.db: unexpected file type or format')
</snippet></ROW><ROW><id>1338491</id><snippet>db_dump</snippet></ROW><ROW><id>1338491</id><snippet>db_dump185</snippet></ROW><ROW><id>1338491</id><snippet>db_load</snippet></ROW><ROW><id>1338532</id><snippet>a = line_parts[0] or "0"
</snippet></ROW><ROW><id>1338532</id><snippet>def fn(arg1, arg2=None):
    arg2 = arg2 or ["weird default value"]
</snippet></ROW><ROW><id>1338667</id><snippet>thescript.foo</snippet></ROW><ROW><id>1338667</id><snippet>Some_Object</snippet></ROW><ROW><id>1338667</id><snippet>some_function</snippet></ROW><ROW><id>1338667</id><snippet>some_function.func_globals</snippet></ROW><ROW><id>1338667</id><snippet>import new
f=new.function(some_function.func_code, {})
</snippet></ROW><ROW><id>1338667</id><snippet>f()</snippet></ROW><ROW><id>1338667</id><snippet>NameError: global name 'foo' is not defined</snippet></ROW><ROW><id>1338667</id><snippet>some_function</snippet></ROW><ROW><id>1338667</id><snippet>def noglobal(f):
    return new.function(f.func_code, {})
...
@noglobal
def some_function(): ...
</snippet></ROW><ROW><id>1338667</id><snippet>some_function</snippet></ROW><ROW><id>1338726</id><snippet>logging.info("NEW_SCORE: %s", score)
</snippet></ROW><ROW><id>1338726</id><snippet>%</snippet></ROW><ROW><id>1338726</id><snippet>logging</snippet></ROW><ROW><id>1338726</id><snippet>%s</snippet></ROW><ROW><id>1338726</id><snippet>logging</snippet></ROW><ROW><id>1338726</id><snippet>%s</snippet></ROW><ROW><id>1338726</id><snippet>logging.info</snippet></ROW><ROW><id>1338726</id><snippet>str</snippet></ROW><ROW><id>1338726</id><snippet>+</snippet></ROW><ROW><id>1338726</id><snippet>logging</snippet></ROW><ROW><id>1338726</id><snippet>%</snippet></ROW><ROW><id>1338726</id><snippet>format</snippet></ROW><ROW><id>1338732</id><snippet> "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1")
</snippet></ROW><ROW><id>1338732</id><snippet>  "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1", rand2=rand2)
</snippet></ROW><ROW><id>1338732</id><snippet>  "...WHERE rand1 &gt; :1 ORDER BY rand LIMIT 1", rand2)
</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>class Bunch(object):
  def __init__(self, adict):
    self.__dict__.update(adict)
</snippet></ROW><ROW><id>1338739</id><snippet>config</snippet></ROW><ROW><id>1338739</id><snippet>config.account_receivable</snippet></ROW><ROW><id>1338739</id><snippet>config</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>cb = Bunch(config)
</snippet></ROW><ROW><id>1338739</id><snippet>cb.config_account</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>dict</snippet></ROW><ROW><id>1338739</id><snippet>config</snippet></ROW><ROW><id>1338739</id><snippet>cb.foo = 23</snippet></ROW><ROW><id>1338739</id><snippet>config['foo'] = 23</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>class RwBunch(object):
  def __init__(self, adict):
    self.__dict__ = adict
</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>Bunch</snippet></ROW><ROW><id>1338739</id><snippet>dict</snippet></ROW><ROW><id>1338739</id><snippet>RwBunch</snippet></ROW><ROW><id>1338739</id><snippet>dict</snippet></ROW><ROW><id>1338739</id><snippet>dict</snippet></ROW><ROW><id>1338860</id><snippet>loadTestsFromTestCase</snippet></ROW><ROW><id>1338860</id><snippet>Boy.BoyTest</snippet></ROW><ROW><id>1338860</id><snippet>BoyTest</snippet></ROW><ROW><id>1338860</id><snippet>Boy</snippet></ROW><ROW><id>1338860</id><snippet>BoyTest</snippet></ROW><ROW><id>1338866</id><snippet>__str__</snippet></ROW><ROW><id>1338866</id><snippet>class efloat(float):
    def __repr__(self):
        return "here's my number: %s" % self
</snippet></ROW><ROW><id>1338866</id><snippet>self+0</snippet></ROW><ROW><id>1338866</id><snippet>self*1</snippet></ROW><ROW><id>1338866</id><snippet>float.__add__(self, 0)</snippet></ROW><ROW><id>1339473</id><snippet>def Game(x):
    # x, str(x), position
    stack = [(x,str(x),0)]
    # return value
    res = None

    while stack:
        if res is not None:
            # we have a return value
            if not res:
                stack.pop()
                res = True
                continue
            # res is True, continue to search
            res = None
        x, s, pos = stack.pop()
        if x == 0:
            res = True
            continue
        if pos == len(s):
            # end of loop, return False
            res = False
            continue
        stack.append((x,s,pos+1))
        digit = s[pos]
        if digit == '0':
            continue
        x -= int(digit)
        # recurse, starting with position 0
        stack.append((x,str(x),0))

    return res
</snippet></ROW><ROW><id>1340168</id><snippet>&gt;&gt;&gt; re.match(r"\\t", r"\t")
&lt;_sre.SRE_Match object at 0xb7ce5d78&gt;
</snippet></ROW><ROW><id>1340168</id><snippet>&gt;&gt;&gt; re.match(r"\\", r"\\")
&lt;_sre.SRE_Match object at ...&gt;
&gt;&gt;&gt; re.match("\\\\", r"\\")
&lt;_sre.SRE_Match object at ...&gt;
</snippet></ROW><ROW><id>1340499</id><snippet>import numpy as np
from matplotlib import pylab as pl

dataOne = get_data_one()
dataTwo = get_data_two()

hN = pl.hist(dataTwo, orientation='horizontal', normed=0, rwidth=0.8, label='ONE')
hS = pl.hist(dataOne, bins=hN[1], orientation='horizontal', normed=0, 
    rwidth=0.8, label='TWO')

for p in hS[2]:
    p.set_width( - p.get_width())

xmin = min([ min(w.get_width() for w in hS[2]), 
                min([w.get_width() for w in hN[2]]) ])
xmin = np.floor(xmin)
xmax = max([ max(w.get_width() for w in hS[2]), 
                max([w.get_width() for w in hN[2]]) ])
xmax = np.ceil(xmax)
range = xmax - xmin
delta = 0.0 * range
pl.xlim([xmin - delta, xmax + delta])
xt = pl.xticks()
n = xt[0]
s = ['%.1f'%abs(i) for i in n]
pl.xticks(n, s)
pl.legend(loc='best')
pl.axvline(0.0)
pl.show()
</snippet></ROW><ROW><id>1341718</id><snippet>hits = dict.fromkeys(param_sets, [])
</snippet></ROW><ROW><id>1341718</id><snippet>hits = dict()
onelist = []
for k in param_sets:
    hits[k] = onelist
</snippet></ROW><ROW><id>1341718</id><snippet>hits</snippet></ROW><ROW><id>1341718</id><snippet>hits = dict()
for k in param_sets:
    hits[k] = []
</snippet></ROW><ROW><id>1341718</id><snippet>hits = dict((k, []) for k in param_sets)
</snippet></ROW><ROW><id>1341718</id><snippet>newdict = dict(olddict)
newlist = list(oldlist)
newset = set(oldset)
</snippet></ROW><ROW><id>1341718</id><snippet>newlist = list(oldset)</snippet></ROW><ROW><id>1341822</id><snippet>import pyparsing</snippet></ROW><ROW><id>1341822</id><snippet>from pyparsing import Word, alphas
greet = Word( alphas ) + "," + Word( alphas ) + "!" # &lt;-- grammar defined here
hello = "Hello, World!"
print "Content-type: text/plain\n"
print hello, "-&gt;", greet.parseString( hello )
</snippet></ROW><ROW><id>1341822</id><snippet>handlers:</snippet></ROW><ROW><id>1341822</id><snippet>- url: /parshello
  script: greeting.py
</snippet></ROW><ROW><id>1341822</id><snippet>http://localhost:8083/parshello</snippet></ROW><ROW><id>1341822</id><snippet>Hello, World! -&gt; ['Hello', ',', 'World', '!']
</snippet></ROW><ROW><id>1342079</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>1342079</id><snippet>u</snippet></ROW><ROW><id>1342079</id><snippet>s.replace(u"Â ", "")</snippet></ROW><ROW><id>1342079</id><snippet>s</snippet></ROW><ROW><id>1342079</id><snippet>s = s.decode('utf-8')</snippet></ROW><ROW><id>1342079</id><snippet>string.replace</snippet></ROW><ROW><id>1342164</id><snippet>mod = __import__('foo.bar', fromlist = ['some_module'])
</snippet></ROW><ROW><id>1342164</id><snippet>some_module</snippet></ROW><ROW><id>1342164</id><snippet>mod.some_module</snippet></ROW><ROW><id>1342164</id><snippet>the_module = getattr(mod, 'some_module')
</snippet></ROW><ROW><id>1342617</id><snippet>if any(t &lt; 0 for t in x):
    # do something
</snippet></ROW><ROW><id>1342617</id><snippet>if (True in (t &lt; 0 for t in x)):
</snippet></ROW><ROW><id>1342688</id><snippet>{@csm</snippet></ROW><ROW><id>1342688</id><snippet>r'\{@csm((?:\.\w+)+)\}'
</snippet></ROW><ROW><id>1342817</id><snippet>property</snippet></ROW><ROW><id>1342817</id><snippet>class MyModel(models.Model):
    _first_name = models.CharField(max_length=100, db_column='first_name')

    @property
    def first_name(self):
        return self._first_name or self.user.first_name

    @first_name.setter
    def first_name(self, value):
       self._first_name = value
</snippet></ROW><ROW><id>1342817</id><snippet>myinstance.first_name = 'daniel'</snippet></ROW><ROW><id>1342817</id><snippet>save()</snippet></ROW><ROW><id>1342817</id><snippet>def save(self, *args, **kwargs):
    if not self.first_name:
        self.first_name = self.user.first_name
    # now call the default save() method
    super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1343173</id><snippet>eulerproject/
    euler/
        __init__.py
        euler1.py
        ...
        tests/
            ...
    setup.py
</snippet></ROW><ROW><id>1343173</id><snippet>PYTHONPATH=/path/to/eulerproject/:$PYTHONPATH</snippet></ROW><ROW><id>1343173</id><snippet>from euler import euler1
</snippet></ROW><ROW><id>1343173</id><snippet>nose</snippet></ROW><ROW><id>1343173</id><snippet>eulerproject/
    runtests.py
    euler/
        __init__.py
        euler1.py
        ...
        tests/
            __init__.py
           testeulern.py
</snippet></ROW><ROW><id>1343173</id><snippet>runtests.py</snippet></ROW><ROW><id>1343173</id><snippet>from euler.tests.testeulern import TestCase</snippet></ROW><ROW><id>1343173</id><snippet>testeulern.py</snippet></ROW><ROW><id>1343173</id><snippet>from .. import euler1</snippet></ROW><ROW><id>1343188</id><snippet>void foo(const int *num) {
    num = new int(*num * 2);
}

const int *a = new int(4);
foo(a);

print(a);
</snippet></ROW><ROW><id>1343273</id><snippet>Formatter</snippet></ROW><ROW><id>1343273</id><snippet>class MyFormatter(logging.Formatter):
    def format(self, record):
        #compute s according to record.levelno
        #for example, by setting self._fmt
        #according to the levelno, then calling
        #the superclass to do the actual formatting
        return s
</snippet></ROW><ROW><id>1343273</id><snippet>MyFormatter</snippet></ROW><ROW><id>1343568</id><snippet>for s in re.finditer(r"([A-Z][a-z]+[. ]+)+([A-Z][a-z]+)?", text):
    print s.group(0)
</snippet></ROW><ROW><id>1343568</id><snippet>Conan Doyle
Holmes
Dr. Joseph Bell
Doyle
Edinburgh Royal Infirmary. Like Holmes
Bell
Michael Harrison
Ellery Queen
Mystery Magazine
Wendell Scherer
England
</snippet></ROW><ROW><id>1343682</id><snippet>outfile = open("/path/to/file", "w")
[...]
outfile.write([...])
</snippet></ROW><ROW><id>1343823</id><snippet>except</snippet></ROW><ROW><id>1343823</id><snippet>raise</snippet></ROW><ROW><id>1343823</id><snippet>expected_exceptions = KeyError, AttributeError, TypeError
</snippet></ROW><ROW><id>1343823</id><snippet>except expected_exceptions:</snippet></ROW><ROW><id>1343823</id><snippet>except:</snippet></ROW><ROW><id>1343823</id><snippet>try:
    foo1()
except expected_exceptions:
    try:
        if condition:
            foobetter()
        else:
            raise
    except expected_exceptions:
        handleError()
</snippet></ROW><ROW><id>1343823</id><snippet>def may_raise(expected_exceptions, somefunction, *a, **k):
  try:
    return False, somefunction(*a, **k)
  except expected_exceptions:
    return True, None
</snippet></ROW><ROW><id>1343823</id><snippet>failed, _ = may_raise(expected_exceptions, foo1)
if failed and condition:
  failed, _ = may_raise(expected_exceptions, foobetter)
if failed:
  handleError()
</snippet></ROW><ROW><id>1343823</id><snippet>may_raise</snippet></ROW><ROW><id>1344098</id><snippet>StringIO</snippet></ROW><ROW><id>1344098</id><snippet>HttpResponse</snippet></ROW><ROW><id>1344098</id><snippet>application/pdf</snippet></ROW><ROW><id>1344098</id><snippet>Content-Disposition</snippet></ROW><ROW><id>1344098</id><snippet>border="1"</snippet></ROW><ROW><id>1344098</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>1344229</id><snippet>mapping = {X1: Y1, X2: Y2, X3: Y3}
mapping[X4] = Y4
mapping[X5] = Y5

for X,Y in mapping.items():
    if Y is not None:
        obj[X][0] = Y
</snippet></ROW><ROW><id>1344479</id><snippet>import pdb;pdb.set_trace()
</snippet></ROW><ROW><id>1344479</id><snippet>init_model()</snippet></ROW><ROW><id>1344479</id><snippet>where</snippet></ROW><ROW><id>1344479</id><snippet>w(here)
Print a stack trace, with the most recent frame at the bottom.
An arrow indicates the "current frame", which determines the
context of most commands.  'bt' is an alias for this command.
</snippet></ROW><ROW><id>1345050</id><snippet>re.sub(r'^-+|-+$', lambda m: ' '*len(m.group()), '---ab---c-def--')
</snippet></ROW><ROW><id>1345291</id><snippet>[1, 2, 3]
</snippet></ROW><ROW><id>1345697</id><snippet>GetBinaryType</snippet></ROW><ROW><id>1345697</id><snippet>import win32file
type=GetBinaryType("myfile.exe")
if type==win32file.SCS_32BIT_BINARY:
    print "32 bit"
# And so on
</snippet></ROW><ROW><id>1345697</id><snippet>import struct

IMAGE_FILE_MACHINE_I386=332
IMAGE_FILE_MACHINE_IA64=512
IMAGE_FILE_MACHINE_AMD64=34404

f=open("c:\windows\explorer.exe", "rb")

s=f.read(2)
if s!="MZ":
    print "Not an EXE file"
else:
    f.seek(60)
    s=f.read(4)
    header_offset=struct.unpack("&lt;L", s)[0]
    f.seek(header_offset+4)
    s=f.read(2)
    machine=struct.unpack("&lt;H", s)[0]

    if machine==IMAGE_FILE_MACHINE_I386:
        print "IA-32 (32-bit x86)"
    elif machine==IMAGE_FILE_MACHINE_IA64:
        print "IA-64 (Itanium)"
    elif machine==IMAGE_FILE_MACHINE_AMD64:
        print "AMD64 (64-bit x86)"
    else:
        print "Unknown architecture"

f.close()
</snippet></ROW><ROW><id>1345852</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = datetime.datetime.now()
&gt;&gt;&gt; b = datetime.datetime.now()
&gt;&gt;&gt; c = b - a
datetime.timedelta(0, 8, 562000)
&gt;&gt;&gt; divmod(c.days * 86400 + c.seconds, 60)
(0, 8)      # 0 minutes, 8 seconds
</snippet></ROW><ROW><id>1346017</id><snippet># initialisation
from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('site one', site_one_page_one_data)
guesser.train('site one', site_one_page_two_data)
# ...etc...
guesser.train('site two', site_two_page_one_data)
guesser.train('site two', site_two_page_two_data)
# ...etc...
guesser.save()

# run time
guesser.load()
results = guesser.guess(page_I_want_to_classify)
</snippet></ROW><ROW><id>1346039</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.byteorder
'little'
</snippet></ROW><ROW><id>1346039</id><snippet>'big'</snippet></ROW><ROW><id>1346134</id><snippet>class Command( object ):
    name= "name"
    def setup_opts( self, parser ):
        """Add any options to the parser that this command needs."""
        pass
    def execute( self, context, options, args ):
        """Execute the command in some application context with some options and args."""
        raise NotImplemented
</snippet></ROW><ROW><id>1346134</id><snippet>Install</snippet></ROW><ROW><id>1346134</id><snippet>Remove</snippet></ROW><ROW><id>1346134</id><snippet>commands = [ 
    Install(),
    Remove(),
]
def main():
    parser= optparse.OptionParser()
    for c in commands:
        c.setup_opts( parser )
    options, args = parser.parse()
    command= None
    for c in commands:
        if c.name.startswith(args[0].lower()):
            command= c
            break
    if command:
        status= command.execute( context, options, args[1:] )
    else:
        logger.error( "Command %r is unknown", args[0] )
        status= 2
    sys.exit( status )
</snippet></ROW><ROW><id>1346401</id><snippet>signals.request_finished.connect(close_connection)</snippet></ROW><ROW><id>1346401</id><snippet>connection.close()</snippet></ROW><ROW><id>1347128</id><snippet>src[0:i-1].append(src[-1])
</snippet></ROW><ROW><id>1347128</id><snippet>src[0:i-1] + src[-1:] #note the trailing ":", we want a list not an element
</snippet></ROW><ROW><id>1347456</id><snippet>get_all_data</snippet></ROW><ROW><id>1347521</id><snippet>$ paste c1 c2 | awk '{print $1 + $2}'
</snippet></ROW><ROW><id>1347521</id><snippet>$ paste c1 c2 | while read i j; do echo $(($i+$j)); done
</snippet></ROW><ROW><id>1347854</id><snippet>"C:\Users\Eric\Desktop\beeline.txt"
</snippet></ROW><ROW><id>1347854</id><snippet>\U</snippet></ROW><ROW><id>1347854</id><snippet>r</snippet></ROW><ROW><id>1348073</id><snippet>os.open()</snippet></ROW><ROW><id>1348073</id><snippet>os.O_CREAT</snippet></ROW><ROW><id>1348073</id><snippet>os.O_EXCL</snippet></ROW><ROW><id>1348073</id><snippet>&gt;&gt;&gt; fd = os.open("x", os.O_WRONLY | os.O_CREAT | os.O_EXCL)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OSError: [Errno 17] File exists: 'x'
</snippet></ROW><ROW><id>1348073</id><snippet>os.fdopen()</snippet></ROW><ROW><id>1348073</id><snippet>&gt;&gt;&gt; fd = os.open("y", os.O_WRONLY | os.O_CREAT | os.O_EXCL)
&gt;&gt;&gt; f = os.fdopen(fd)  # f is now a standard Python file object
</snippet></ROW><ROW><id>1348073</id><snippet>open()</snippet></ROW><ROW><id>1348073</id><snippet>x</snippet></ROW><ROW><id>1348298</id><snippet>p = pexpect.spawn(your_cmd_here)
p.sendcontrol('z')
</snippet></ROW><ROW><id>1348903</id><snippet>ctypes.cdll.msvcrt</snippet></ROW><ROW><id>1348903</id><snippet>ctypes.cdll.anything</snippet></ROW><ROW><id>1348903</id><snippet>anything.dll</snippet></ROW><ROW><id>1348903</id><snippet>ctypes.cdll.msvcrt</snippet></ROW><ROW><id>1348903</id><snippet>msvcrt.dll</snippet></ROW><ROW><id>1348903</id><snippet>msvcrt</snippet></ROW><ROW><id>1348903</id><snippet>ctypes.cdll.msvcr90</snippet></ROW><ROW><id>1348903</id><snippet>find_msvcrt()</snippet></ROW><ROW><id>1348903</id><snippet>ctypes.CDLL</snippet></ROW><ROW><id>1349528</id><snippet>import re
reg=re.compile('(\w+)[:=] ?"?(\w+)"?')

&gt;&gt;&gt;dict(reg.findall(headers))

{'username': 'Foobear', 'realm': 'testrealm', 'qop': 'chap', 'cnonce': '5ccc069c403ebaf9f0171e9517f40e41', 'response': '6629fae49393a05397450978507c4ef1', 'Authorization': 'Digest'}
</snippet></ROW><ROW><id>1349666</id><snippet>import xlwt
wb = xlwt.Workbook()
ws = wb.add_sheet('Test Sheet')
lte = u'\u2264'
gte = u'\u2265'
ws.write(0,0,lte+gte)
wb.save('foo.xls')
</snippet></ROW><ROW><id>1349666</id><snippet>#-*- coding: utf-8 -*- 
import xlwt
wb = xlwt.Workbook()
ws = wb.add_sheet('Test Sheet')
lte = u'≤'
gte = u'≥'
ws.write(0,0,lte+gte)
wb.save('foo.xls')
</snippet></ROW><ROW><id>1350154</id><snippet>origin = None | 'lower' | 'upper'</snippet></ROW><ROW><id>1350154</id><snippet>from pylab import *
A = arange(25)/25.
A = A.reshape((5,5))

figure()
imshow(A, interpolation='nearest', origin='lower')

figure()
imshow(A, interpolation='nearest')

d = arange(5)
figure()
plot(d)
ylim(5, 0)

show()
</snippet></ROW><ROW><id>1350199</id><snippet>from numpy import *
a = arange(4).reshape((2,2))
print a**2
</snippet></ROW><ROW><id>1350199</id><snippet>[[0 1]
 [4 9]]
</snippet></ROW><ROW><id>1350240</id><snippet># tmp.py
print __debug__


$ python tmp.py
True
$ python -O tmp.py
False
</snippet></ROW><ROW><id>1350240</id><snippet>-O</snippet></ROW><ROW><id>1350240</id><snippet>    # Display error documents for 401, 403, 404 status codes (and
    # 500 when debug is disabled)
    if asbool(config['debug']):
        app = StatusCodeRedirect(app)
    else:
        app = StatusCodeRedirect(app, [400, 401, 403, 404, 500])
</snippet></ROW><ROW><id>1350240</id><snippet>config['debug']</snippet></ROW><ROW><id>1350906</id><snippet># my_imports.py
'''Here go all of my imports'''
import sys
import functools
from contextlib import contextmanager  # This is a long name, no chance to confuse it.
....


# something1.py
'''One of my project files.'''
from my_imports import * 
....

# something2.py
'''Another project file.'''
from my_imports import * 
....
</snippet></ROW><ROW><id>1350906</id><snippet>from module import *</snippet></ROW><ROW><id>1350906</id><snippet>from module import *</snippet></ROW><ROW><id>1350906</id><snippet># something1.py
'''One of my project files. Takes care of main cycle.'''
import sys
....

# something2.py
'''Another project file. Main program logic.'''
import functools
from contextlib import contextmanager  # This is a long name, no chance to confuse it.
....
</snippet></ROW><ROW><id>1350981</id><snippet>import sys
class MyException(Exception): pass

try:
    raise TypeError("test")
except TypeError, e:
    raise MyException(), None, sys.exc_info()[2]
</snippet></ROW><ROW><id>1351222</id><snippet>id | var            
1  |  10            
1  |  11          
2  |  10
</snippet></ROW><ROW><id>1351309</id><snippet>for od in clist:

    o = Offer()
    o.network_id = od['network_id']
    o.external_id = od['external_id']
    o.title = od['title']
    o.updated = datetime.datetime.now()
    payout = od['payout']
    countrylist = od['countries']

    for country in countrylist:
        opayout = OfferPayout()
        opayout.payout = od['payout']
        country_obj = Country()
        country_obj.name = country
        opayout.country = country_obj

        o.offerpayout.append(opayout)

     session.merge(o)
     session.flush()
</snippet></ROW><ROW><id>1351594</id><snippet>objc.IBOutlet</snippet></ROW><ROW><id>1352027</id><snippet>class a:
    @classmethod
    def spam(cls):
        # not really pass, but you get the idea
        pass

    lut = [1,
           3,
           17,
           [12,34],
           5,
           spam]


assert a().lut[-1] == a.spam
assert a.spam() is None
</snippet></ROW><ROW><id>1352086</id><snippet>level</snippet></ROW><ROW><id>1352086</id><snippet>parent</snippet></ROW><ROW><id>1352086</id><snippet>left</snippet></ROW><ROW><id>1352086</id><snippet>right</snippet></ROW><ROW><id>1352392</id><snippet> webbrowser.get('firefox').open(url)
</snippet></ROW><ROW><id>1352415</id><snippet>pickle</snippet></ROW><ROW><id>1352415</id><snippet>locmem.py</snippet></ROW><ROW><id>1352521</id><snippet>$ python -mtimeit -s'lst=[1,2,3,0,1,2]*1000' 'for i in xrange(len(lst)): elem=lst[i]'
1000 loops, best of 3: 480 usec per loop
$ python -mtimeit -s'lst=[1,2,3,0,1,2]*1000' 'for i, elem in enumerate(lst): pass'
1000 loops, best of 3: 473 usec per loop
</snippet></ROW><ROW><id>1352521</id><snippet>timeit</snippet></ROW><ROW><id>1352521</id><snippet>for</snippet></ROW><ROW><id>1352521</id><snippet>v</snippet></ROW><ROW><id>1352521</id><snippet>elem</snippet></ROW><ROW><id>1352521</id><snippet>elem</snippet></ROW><ROW><id>1352521</id><snippet>elem</snippet></ROW><ROW><id>1352521</id><snippet>i</snippet></ROW><ROW><id>1352841</id><snippet>url(r'^so/(?P&lt;required&gt;\d+)/$', 'myapp.so', name='something'),
url(r'^so/(?P&lt;required&gt;\d+)/(?P&lt;optional&gt;.*)/$', 'myapp.so', name='something_else'),
</snippet></ROW><ROW><id>1352908</id><snippet>for c in colors[:]:
    if c == 'green':
        colors.remove(c)
</snippet></ROW><ROW><id>1352938</id><snippet>$PATH</snippet></ROW><ROW><id>1352938</id><snippet>%PATH</snippet></ROW><ROW><id>1352938</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>1352938</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>1352938</id><snippet>#!/usr/local/bin/python2.5</snippet></ROW><ROW><id>1352938</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>1353037</id><snippet>&gt;&gt;&gt; import multiprocessing, logging
&gt;&gt;&gt; logger = multiprocessing.log_to_stderr()
&gt;&gt;&gt; logger.setLevel(multiprocessing.SUBDEBUG)
</snippet></ROW><ROW><id>1353193</id><snippet>ScopedSession.add</snippet></ROW><ROW><id>1353193</id><snippet>add</snippet></ROW><ROW><id>1353193</id><snippet>ScopedSession.remove()</snippet></ROW><ROW><id>1353193</id><snippet>query_property</snippet></ROW><ROW><id>1353193</id><snippet>ScopedSession.mapper</snippet></ROW><ROW><id>1353193</id><snippet>__init__(**kwargs)</snippet></ROW><ROW><id>1353193</id><snippet>save_on_init</snippet></ROW><ROW><id>1353193</id><snippet>ScopedSession.mapper</snippet></ROW><ROW><id>1353193</id><snippet>ScopedSession.mapper</snippet></ROW><ROW><id>1353231</id><snippet>lineedit = QtGui.QLineEdit()    
lineedit.setStyleSheet("""QLineEdit {
     background-image: url(:/images/magnifier.png);
     background-repeat: no-repeat;
     background-position: right;
     background-clip: padding;
     padding-right: 16px;
}""")
</snippet></ROW><ROW><id>1353862</id><snippet>log_slow_queries</snippet></ROW><ROW><id>1353862</id><snippet>long_query_time</snippet></ROW><ROW><id>1354517</id><snippet>&gt;&gt;&gt; s = your_string
&gt;&gt;&gt; s.split()
['MiamiPete:', "today's", '"Last', 'Call"', 'is', 'now', 'up', 'http://bit.ly/MGDzu', '#stocks', '#stockmarket', '#finance', '#money']
&gt;&gt;&gt; url = [i for i in s.split() if i.startswith('http://')]
&gt;&gt;&gt; url
['http://bit.ly/MGDzu']
&gt;&gt;&gt; tags = [i for i in s.split() if i.startswith('#')]
&gt;&gt;&gt; tags
['#stocks', '#stockmarket', '#finance', '#money']
&gt;&gt;&gt; ' '.join(i for i in s.split() if i not in url+tags)
'MiamiPete: today\'s "Last Call" is now up'
</snippet></ROW><ROW><id>1354619</id><snippet>10**9</snippet></ROW><ROW><id>1354619</id><snippet>10**9/ln(10**9)</snippet></ROW><ROW><id>1354619</id><snippet>array.array("L")</snippet></ROW><ROW><id>1354619</id><snippet>fromfile</snippet></ROW><ROW><id>1354619</id><snippet>fromstring</snippet></ROW><ROW><id>1354619</id><snippet>array.array</snippet></ROW><ROW><id>1354619</id><snippet>shelve</snippet></ROW><ROW><id>1355303</id><snippet>\xf3</snippet></ROW><ROW><id>1355303</id><snippet>body.decode('iso-8859-1')</snippet></ROW><ROW><id>1355303</id><snippet>body.decode('iso-8859-1').encode('utf-8')</snippet></ROW><ROW><id>1355568</id><snippet>def DELETEMIN( A ):
        if A.leftchild is None:
                return A.element, A.rightchild
        else:
                return DELETEMIN( A.leftchild )
</snippet></ROW><ROW><id>1355568</id><snippet>foo = DELETEMIN( bar )</snippet></ROW><ROW><id>1355568</id><snippet>foo, bar = DELETEMIN( bar )
</snippet></ROW><ROW><id>1355744</id><snippet>example.py</snippet></ROW><ROW><id>1355744</id><snippet>import</snippet></ROW><ROW><id>1355744</id><snippet>from libcloud.drivers import EC2, Slicehost, Rackspace
</snippet></ROW><ROW><id>1355744</id><snippet>EC2</snippet></ROW><ROW><id>1355744</id><snippet>libcloud.drivers</snippet></ROW><ROW><id>1355744</id><snippet>libcloud.drivers</snippet></ROW><ROW><id>1355744</id><snippet>EC2</snippet></ROW><ROW><id>1355744</id><snippet>__init__.py</snippet></ROW><ROW><id>1355744</id><snippet>libcloud/drivers/</snippet></ROW><ROW><id>1355744</id><snippet>example.py</snippet></ROW><ROW><id>1355744</id><snippet>libcloud/drivers/__init__.py</snippet></ROW><ROW><id>1355744</id><snippet>EC2</snippet></ROW><ROW><id>1355862</id><snippet>eval</snippet></ROW><ROW><id>1355862</id><snippet>#include &lt;iostream&gt;</snippet></ROW><ROW><id>1355862</id><snippet>&lt;iostream&gt;</snippet></ROW><ROW><id>1355862</id><snippet>&lt;iostream&gt;</snippet></ROW><ROW><id>1355862</id><snippet>cout</snippet></ROW><ROW><id>1355862</id><snippet>&lt;iostream&gt;</snippet></ROW><ROW><id>1355862</id><snippet>std</snippet></ROW><ROW><id>1355862</id><snippet>using namespace std;</snippet></ROW><ROW><id>1355862</id><snippet>from std import *</snippet></ROW><ROW><id>1355862</id><snippet>#include</snippet></ROW><ROW><id>1355862</id><snippet>import std</snippet></ROW><ROW><id>1355862</id><snippet>using namespace std;</snippet></ROW><ROW><id>1355862</id><snippet>std</snippet></ROW><ROW><id>1355862</id><snippet>using namespace</snippet></ROW><ROW><id>1355862</id><snippet>using std::cout;</snippet></ROW><ROW><id>1355862</id><snippet>using namespace</snippet></ROW><ROW><id>1355862</id><snippet>main</snippet></ROW><ROW><id>1355862</id><snippet>__main__</snippet></ROW><ROW><id>1355862</id><snippet>std::cout</snippet></ROW><ROW><id>1355862</id><snippet>cout</snippet></ROW><ROW><id>1355862</id><snippet>using namespace std;</snippet></ROW><ROW><id>1355862</id><snippet>using std::cout</snippet></ROW><ROW><id>1355862</id><snippet>import std</snippet></ROW><ROW><id>1355862</id><snippet>from std import *</snippet></ROW><ROW><id>1355862</id><snippet>from std import cout</snippet></ROW><ROW><id>1355862</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1355862</id><snippet>cout &lt;&lt; value</snippet></ROW><ROW><id>1355862</id><snippet>cout</snippet></ROW><ROW><id>1355862</id><snippet>value</snippet></ROW><ROW><id>1355862</id><snippet>print</snippet></ROW><ROW><id>1355862</id><snippet>main</snippet></ROW><ROW><id>1355862</id><snippet>return 0;</snippet></ROW><ROW><id>1355862</id><snippet>main</snippet></ROW><ROW><id>1355862</id><snippet>exit</snippet></ROW><ROW><id>1355862</id><snippet>exit</snippet></ROW><ROW><id>1355951</id><snippet>__class__</snippet></ROW><ROW><id>1355951</id><snippet>__new__</snippet></ROW><ROW><id>1355951</id><snippet>super</snippet></ROW><ROW><id>1356065</id><snippet>print "Name: %-20s Price: %10d" % (i.name, i.price)
</snippet></ROW><ROW><id>1356065</id><snippet>.</snippet></ROW><ROW><id>1357015</id><snippet>import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)
</snippet></ROW><ROW><id>1357015</id><snippet>a.main()</snippet></ROW><ROW><id>1357350</id><snippet>super(Alpha, self).__init__()
</snippet></ROW><ROW><id>1357817</id><snippet>def onelevelok(parent, thislevel):
  for fn in os.listdir(parent):
    if fn.lower() == thislevel.lower():
      return fn == thislevel
  raise ValueError('No %r in dir %r!' % (
      thislevel, parent))
</snippet></ROW><ROW><id>1357817</id><snippet>def allpathok(path):
  levels = os.path.split(path)
  if os.path.isabs(path):
    top = ['/']
  else:
    top = ['.']
  return all(onelevelok(p, t)
             for p, t in zip(top+levels, levels))
</snippet></ROW><ROW><id>1357817</id><snippet>foo/bar</snippet></ROW><ROW><id>1357817</id><snippet>foo</snippet></ROW><ROW><id>1357817</id><snippet>zip</snippet></ROW><ROW><id>1357817</id><snippet>levels</snippet></ROW><ROW><id>1357817</id><snippet>zip</snippet></ROW><ROW><id>1357817</id><snippet>all</snippet></ROW><ROW><id>1357817</id><snippet>False</snippet></ROW><ROW><id>1358161</id><snippet>def toUTCc(d):
    return tz.normalize(tz.localize(d)).astimezone(pytz.utc)

print "Test: ", datetime.datetime.utcnow(), " = ", toUTC(datetime.datetime.now())
</snippet></ROW><ROW><id>1358787</id><snippet>dict1 = {'a': [(1, 2), (3, 4)], 'b': [(1, 2), (5, 6)]}
dict2 = {'a': [(1, 2), (5, 6)], 'b': [(1, 2), (7, 8)]}
</snippet></ROW><ROW><id>1358787</id><snippet>&gt;&gt;&gt; dict( (key,[tuple(v) for v in dict1[key]]) for key in dict1 )
{'a': [(1, 2), (3, 4)], 'b': [(1, 2), (5, 6)]}
</snippet></ROW><ROW><id>1358787</id><snippet>&gt;&gt;&gt; dict1t= dict( (key,[tuple(v) for v in dict1[key]]) for key in dict1 )
&gt;&gt;&gt; dict2t= dict( (key,[tuple(v) for v in dict2[key]]) for key in dict2 )
&gt;&gt;&gt; set(dict1t['a'])-set(dict2t['a'])
set([(3, 4)])
</snippet></ROW><ROW><id>1358832</id><snippet>__setattr__</snippet></ROW><ROW><id>1358832</id><snippet>class const(object):
  def __init__(self, val): self.val = val
  def __get__(self, *_): return self.val
  def __set__(self, *_): raise TypeError("Can't reset const!")

class mcl(type):
  def __init__(cls, *a, **k):
    mkl = cls.__class__
    class spec(mkl): pass
    for n, v in vars(cls).items():
      if isinstance(v, const):
        setattr(spec, n, v)
    spec.__name__ = mkl.__name__
    cls.__class__ = spec

class with_const:
  __metaclass__ = mcl

class foo(with_const):
  CLASS_CONSTANT = const('this is a constant')

print foo().CLASS_CONSTANT
print foo.CLASS_CONSTANT
foo.CLASS_CONSTANT = 'Oops!'
print foo.CLASS_CONSTANT
</snippet></ROW><ROW><id>1358832</id><snippet>__setattr__</snippet></ROW><ROW><id>1358832</id><snippet>const</snippet></ROW><ROW><id>1358832</id><snippet>__setattr__</snippet></ROW><ROW><id>1358983</id><snippet>plt.figure(i)</snippet></ROW><ROW><id>1358983</id><snippet>plt.subplot(4,4,i+1)</snippet></ROW><ROW><id>1359279</id><snippet>aprime, bprime = zip(*[(a1,b1) for a1,b1,c1 in zip(a,b,c) if c1==0])
</snippet></ROW><ROW><id>1359467</id><snippet>subprocess</snippet></ROW><ROW><id>1359467</id><snippet>Popen</snippet></ROW><ROW><id>1359467</id><snippet>kill()</snippet></ROW><ROW><id>1359467</id><snippet>Popen</snippet></ROW><ROW><id>1359467</id><snippet>import time

def wait_timeout(proc, seconds):
    """Wait for a process to finish, or raise exception after timeout"""
    start = time.time()
    end = start + seconds
    interval = min(seconds / 1000.0, .25)

    while True:
        result = proc.poll()
        if result is not None:
            return result
        if time.time() &gt;= end:
            raise RuntimeError("Process timed out")
        time.sleep(interval)
</snippet></ROW><ROW><id>1360102</id><snippet>startupinfo = subprocess.STARTUPINFO()
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
p = subprocess.Popen(args = "demo.exe", stdout=subprocess.PIPE, startupinfo=startupinfo)
</snippet></ROW><ROW><id>1360522</id><snippet>import Xlib.display

screen = Xlib.display.Display().screen()
root_win = screen.root

num_of_fs = 0
for window in root_win.query_tree()._data['children']:
    window_name = window.get_wm_name()
    width = window.get_geometry()._data["width"]
    height = window.get_geometry()._data["height"]

    if width == screen.width_in_pixels and height == screen.height_in_pixels:
        num_of_fs += 1

print num_of_fs
</snippet></ROW><ROW><id>1360535</id><snippet>imp = Import('http://schemas.xmlsoap.org/soap/encoding/')
# Below is your targetNamespace presented in WSDL. Remember
# that you can add more namespaces by appending more imp.filter.add
imp.filter.add('http://someURL.asmx') 
doctor = ImportDoctor(imp) 
client = Client(url, doctor=doctor)
</snippet></ROW><ROW><id>1360674</id><snippet>[pair[1] for pairlist in dict1.values() for pair in pairlist]
</snippet></ROW><ROW><id>1360674</id><snippet>dict1.values()</snippet></ROW><ROW><id>1360674</id><snippet>for pairlist in dict1.values()</snippet></ROW><ROW><id>1360674</id><snippet>for pair in pairlist</snippet></ROW><ROW><id>1360674</id><snippet>pair[1]</snippet></ROW><ROW><id>1360674</id><snippet>&gt;&gt;&gt; dict1 = {}
&gt;&gt;&gt; dict1['a'] = [[1,2], [3,4]]
&gt;&gt;&gt; dict1['b'] = [[5, 6], [42, 69], [220, 284]]
&gt;&gt;&gt; 
&gt;&gt;&gt; dict1.values()
[[[1, 2], [3, 4]], [[5, 6], [42, 69], [220, 284]]]
&gt;&gt;&gt; 
&gt;&gt;&gt; [pairlist for pairlist in dict1.values()]
[[[1, 2], [3, 4]], [[5, 6], [42, 69], [220, 284]]]
&gt;&gt;&gt; # No real difference here, but we can refer to each list now.
&gt;&gt;&gt; 
&gt;&gt;&gt; [pair for pairlist in dict1.values() for pair in pairlist]
[[1, 2], [3, 4], [5, 6], [42, 69], [220, 284]]
&gt;&gt;&gt; 
&gt;&gt;&gt; # Finally...
&gt;&gt;&gt; [pair[1] for pairlist in dict1.values() for pair in pairlist]
[2, 4, 6, 69, 284]
</snippet></ROW><ROW><id>1361058</id><snippet>def func():
    a = 10
    print a

co = func.func_code
modified_consts = list(co.co_consts)
for idx, val in enumerate(modified_consts):
    if modified_consts[idx] == 10: modified_consts[idx] = 15

modified_consts = tuple(modified_consts)

import types
modified_code = types.CodeType(co.co_argcount, co.co_nlocals, co.co_stacksize, co.co_flags, co.co_code, modified_consts, co.co_names, co.co_varnames, co.co_filename, co.co_name, co.co_firstlineno, co.co_lnotab)
modified_func = types.FunctionType(modified_code, func.func_globals)
# 15:
modified_func()
</snippet></ROW><ROW><id>1361336</id><snippet>class MyButton(wx.PyControl):

    def __init__(self, parent, id, bmp, text, **kwargs):
        wx.PyControl.__init__(self,parent, id, **kwargs)

        self.Bind(wx.EVT_LEFT_DOWN, self._onMouseDown)
        self.Bind(wx.EVT_LEFT_UP, self._onMouseUp)
        self.Bind(wx.EVT_LEAVE_WINDOW, self._onMouseLeave)
        self.Bind(wx.EVT_ENTER_WINDOW, self._onMouseEnter)
        self.Bind(wx.EVT_ERASE_BACKGROUND,self._onEraseBackground)
        self.Bind(wx.EVT_PAINT,self._onPaint)

        self._mouseIn = self._mouseDown = False

    def _onMouseEnter(self, event):
        self._mouseIn = True

    def _onMouseLeave(self, event):
        self._mouseIn = False

    def _onMouseDown(self, event):
        self._mouseDown = True

    def _onMouseUp(self, event):
        self._mouseDown = False
        self.sendButtonEvent()

    def sendButtonEvent(self):
        event = wx.CommandEvent(wx.wxEVT_COMMAND_BUTTON_CLICKED, self.GetId())
        event.SetInt(0)
        event.SetEventObject(self)
        self.GetEventHandler().ProcessEvent(event)

    def _onEraseBackground(self,event):
        # reduce flicker
        pass

    def _onPaint(self, event):
        dc = wx.BufferedPaintDC(self)
        dc.SetFont(self.GetFont())
        dc.SetBackground(wx.Brush(self.GetBackgroundColour()))
        dc.Clear()
        # draw whatever you want to draw
        # draw glossy bitmaps e.g. dc.DrawBitmap
        if self._mouseIn:
            pass# on mouserover may be draw different bitmap
        if self._mouseDown:
            pass # draw different image text
</snippet></ROW><ROW><id>1361418</id><snippet>&gt;&gt;&gt; a = 'abubakar,rooney,0178222123,student abubakar,rooneyzzz,0178222164'
&gt;&gt;&gt; b = a.split(',')
&gt;&gt;&gt; print b
['abubakar', 'rooney', '0178222123', 'student abubakar', 'rooneyzzz', '0178222164']
</snippet></ROW><ROW><id>1361422</id><snippet>import re
reg4 = re.compile(r'^(?:PMID- (?P&lt;pmid&gt;[0-9]+)|TI  - (?P&lt;title&gt;.*?)^PG|AB  - (?P&lt;abstract&gt;.*?)^AD)', re.MULTILINE | re.DOTALL)
for i in reg4.finditer(data):
    print i.groupdict()
</snippet></ROW><ROW><id>1361422</id><snippet>{'pmid': '19587274', 'abstract': None, 'title': None}
{'pmid': None, 'abstract': None, 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\n'}
{'pmid': None, 'abstract': 'To successfully interact with objects in the environment, sensory evidence must\n      be continuously acquired, interpreted, and used to guide appropriate motor\n      responses. For example, when driving, a red \n', 'title': None}
{'pmid': '19583148', 'abstract': None, 'title': None}
{'pmid': None, 'abstract': None, 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\n      amyloidosis.\n'}
{'pmid': None, 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\n', 'title': None}
</snippet></ROW><ROW><id>1361422</id><snippet>#!/usr/bin/python
import re
reg4 = re.compile(r'''
        ^                     # Start of a line (due to re.MULTILINE, this may match at the start of any line)
        (?:                   # Non capturing group with multiple options, first option:
            PMID-\s           # Literal "PMID-" followed by a space
            (?P&lt;pmid&gt;[0-9]+)  # Then a string of one or more digits, group as 'pmid'
        |                     # Next option:
            TI\s{2}-\s        # "TI", two spaces, a hyphen and a space
            (?P&lt;title&gt;.*?)    # The title, a non greedy match that will capture everything up to...
            ^PG               # The characters PG at the start of a line
        |                     # Next option
            AB\s{2}-\s        # "AB  - "
            (?P&lt;abstract&gt;.*?) # The abstract, a non greedy match that will capture everything up to...
            ^AD               # "AD" at the start of a line
        )
        ''', re.MULTILINE | re.DOTALL | re.VERBOSE)
for i in reg4.finditer(data):
    print i.groupdict()
</snippet></ROW><ROW><id>1361422</id><snippet>^PG</snippet></ROW><ROW><id>1361422</id><snippet>^AD</snippet></ROW><ROW><id>1361422</id><snippet>^\S</snippet></ROW><ROW><id>1361422</id><snippet>(?:</snippet></ROW><ROW><id>1361422</id><snippet>)</snippet></ROW><ROW><id>1361422</id><snippet>|</snippet></ROW><ROW><id>1361422</id><snippet>.*?</snippet></ROW><ROW><id>1361422</id><snippet>#!/usr/bin/python
import re
reg4 = re.compile(r'''
        ^                 # Start of a line (due to re.MULTILINE, this may match at the start of any line)
        PMID-\s           # Literal "PMID-" followed by a space
        (?P&lt;pmid&gt;[0-9]+)  # Then a string of one or more digits, group as 'pmid'
        .*?               # Next part:
        TI\s{2}-\s        # "TI", two spaces, a hyphen and a space
        (?P&lt;title&gt;.*?)    # The title, a non greedy match that will capture everything up to...
        ^PG               # The characters PG at the start of a line
        .*?               # Next option
        AB\s{2}-\s        # "AB  - "
        (?P&lt;abstract&gt;.*?) # The abstract, a non greedy match that will capture everything up to...
        ^AD               # "AD" at the start of a line
        ''', re.MULTILINE | re.DOTALL | re.VERBOSE)
for i in reg4.finditer(data):
    print i.groupdict()
</snippet></ROW><ROW><id>1361422</id><snippet>{'pmid': '19587274', 'abstract': 'To successfully interact with objects in the environment, sensory evidence must\n      be continuously acquired, interpreted, and used to guide appropriate motor\n      responses. For example, when driving, a red \n', 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\n'}
{'pmid': '19583148', 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\n', 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\n      amyloidosis.\n'}
</snippet></ROW><ROW><id>1361750</id><snippet>-math.pow(3, float(1)/3)
</snippet></ROW><ROW><id>1361750</id><snippet>if x &gt; 0:
    return math.pow(x, float(1)/3)
elif x &lt; 0:
    return -math.pow(abs(x), float(1)/3)
else:
    return 0
</snippet></ROW><ROW><id>1361808</id><snippet>CustomDocumentProperties</snippet></ROW><ROW><id>1361808</id><snippet>Saved</snippet></ROW><ROW><id>1361808</id><snippet>msoPropertyTypeBoolean = 0
msoPropertyTypeDate = 1
msoPropertyTypeFloat = 2
msoPropertyTypeNumber = 3
msoPropertyTypeString = 4

import win32com.client

MSWord = win32com.client.Dispatch("Word.Application")
MSWord.Visible = False

doc = MSWord.Documents.Open(file)
csp = doc.CustomDocumentProperties
csp.Add('Some Property', False, msoPropertyTypeString, 'Some New Value')
doc.Saved = False
doc.Save()
doc.Close()

MSWord.Quit()
</snippet></ROW><ROW><id>1363107</id><snippet>object_detail</snippet></ROW><ROW><id>1363107</id><snippet>object = MyModel.objects.get(slug=slug)
</snippet></ROW><ROW><id>1363344</id><snippet>cast</snippet></ROW><ROW><id>1363344</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; x = (ctypes.c_ulong*5)()
&gt;&gt;&gt; x
&lt;__main__.c_ulong_Array_5 object at 0x00C2DB20&gt;
&gt;&gt;&gt; ctypes.cast(x, ctypes.POINTER(ctypes.c_ulong))
&lt;__main__.LP_c_ulong object at 0x0119FD00&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1363463</id><snippet>orig = [start]
for x in diff:
    orig.append(orig[-1] + x)
</snippet></ROW><ROW><id>1363463</id><snippet>map</snippet></ROW><ROW><id>1363463</id><snippet>None</snippet></ROW><ROW><id>1363463</id><snippet>for</snippet></ROW><ROW><id>1363737</id><snippet>NeedIndexError</snippet></ROW><ROW><id>1363737</id><snippet>var1</snippet></ROW><ROW><id>1363857</id><snippet>self = whatever</snippet></ROW><ROW><id>1363857</id><snippet>__new__</snippet></ROW><ROW><id>1363857</id><snippet>class Singleton(object):

    __instance = None

    def __new__(cls):
        if cls.__instance == None:
            __instance = type.__new__(cls)
            __instance.name = "The one"
        return __instance
</snippet></ROW><ROW><id>1364159</id><snippet>PyObject* obj = ....
PyObject *ret = PyObject_CallMethod(obj, "foo", "(s)", "An arg");
if (!ret) {
   // check error...
}
</snippet></ROW><ROW><id>1364159</id><snippet>PyObject* PyObject_CallMethod(PyObject *o, char *method, char *format, ...)
</snippet></ROW><ROW><id>1364159</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>1364159</id><snippet>NULL</snippet></ROW><ROW><id>1364159</id><snippet>NULL</snippet></ROW><ROW><id>1364159</id><snippet>o.method(args)</snippet></ROW><ROW><id>1364159</id><snippet>PyObject * args</snippet></ROW><ROW><id>1364159</id><snippet>PyObject_CallMethodObjArgs()</snippet></ROW><ROW><id>1364159</id><snippet>PyObject* PyObject_CallMethodObjArgs(PyObject *o, PyObject *name, ..., NULL)
</snippet></ROW><ROW><id>1364159</id><snippet>o</snippet></ROW><ROW><id>1364159</id><snippet>PyObject*</snippet></ROW><ROW><id>1364159</id><snippet>NULL</snippet></ROW><ROW><id>1364159</id><snippet>NULL</snippet></ROW><ROW><id>1364606</id><snippet>__floordiv__</snippet></ROW><ROW><id>1364606</id><snippet>__truediv__</snippet></ROW><ROW><id>1364606</id><snippet>__idiv__</snippet></ROW><ROW><id>1364606</id><snippet>__truediv__</snippet></ROW><ROW><id>1364606</id><snippet>__floordiv__(self, y): self.__truediv__(y)</snippet></ROW><ROW><id>1364718</id><snippet>{{something}}</snippet></ROW><ROW><id>1364875</id><snippet>os.environ['HTTP_HOST'].endswith('.appspot.com')</snippet></ROW><ROW><id>1364875</id><snippet>something.appspot.com</snippet></ROW><ROW><id>1364875</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>1364875</id><snippet>os.environ</snippet></ROW><ROW><id>1364959</id><snippet>class ClipboardMonitor(object):
    [...]

    def __init__(self):
        self.clip = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)
        self.signal_id = self.clip.connect("owner-change", self._clipboard_changed)

    def close(self):
        self.clip.disconnect(self.signal_id)
</snippet></ROW><ROW><id>1364959</id><snippet>import weakref

class CallbackWrapper(object):
    def __init__(self, sender, callback):
        self.weak_obj = weakref.ref(callback.im_self)
        self.weak_fun = weakref.ref(callback.im_func)
        self.sender = sender
        self.handle = None

    def __call__(self, *things):
        obj = self.weak_obj()
        fun = self.weak_fun()
        if obj is not None and fun is not None:
            return fun(obj, *things)
        elif self.handle is not None:
            self.sender.disconnect(self.handle)
            self.handle = None
            self.sender = None

def weak_connect(sender, signal, callback):
    wrapper = CallbackWrapper(sender, callback)
    wrapper.handle = sender.connect(signal, wrapper)
    return wrapper
</snippet></ROW><ROW><id>1364959</id><snippet>weakref.ref(obj.method)</snippet></ROW><ROW><id>1365014</id><snippet>ulimit</snippet></ROW><ROW><id>1365014</id><snippet>$ ulimit -n 1200
$ python sockets
....
Creating socket 1197
Creating socket 1198
Traceback (most recent call last):
  File "sockets", line 7, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/socket.py", line 182, in __init__
socket.error: [Errno 24] Too many open files
</snippet></ROW><ROW><id>1365284</id><snippet>sock.bind(('', 0))</snippet></ROW><ROW><id>1365284</id><snippet>sock.getsockname()[1]</snippet></ROW><ROW><id>1365734</id><snippet>$.get("api/location/city", null, function(data, textStatus)
{        
    if (data != null)
    {
        if (data.Status == "OK")
        {
            var lat = parseFloat(data.Latitude);
            var lng = parseFloat(data.Longitude);

            $.setCenter(lat, lng, $.settings.defaultCityZoom);

            manager = new MarkerManager(map, {trackMarkers : true });

            var e = $.createUserMarker(map.getCenter());
            e.bindInfoWindowHtml($("#marker-content-event").html());

            var m = [];
            m.push(e);

            // map.addOverlay(e);
            manager.addMarkers(m, 10);
            manager.refresh();
        }
        else
        {
            $.setCenter($.settings.defaultLat, $.settings.defaultLng, $.settings.defaultZoom);
        }
    }
}, "json");
</snippet></ROW><ROW><id>1365734</id><snippet>$.setCenter(lat, lng, $.settings.defaultCityZoom);
</snippet></ROW><ROW><id>1365807</id><snippet>\\?\</snippet></ROW><ROW><id>1366234</id><snippet>import random
chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
def gen():
    return ''.join([random.choice(chars) for x in range(32)])

test = [gen() for i in range(100000)]
print len(test), len(set(test)) # 100000 100000
</snippet></ROW><ROW><id>1366234</id><snippet>import os, hashlib
def gen():
    return hashlib.sha1(os.urandom(512)).hexdigest()

test = [gen() for i in range(100000)]
print len(test), len(set(test))
</snippet></ROW><ROW><id>1367520</id><snippet>def pre_save(sender, **kwargs):
    pk = kwargs['instance'].pk
    instance = sender.objects.get(pk=pk)
    tracking[sender] = instance
</snippet></ROW><ROW><id>1367520</id><snippet>for field in sender._meta.local_many:
    values = field.value_from_object(instance).objects.all()
    # Now values is a list of related objects, which you can diff
</snippet></ROW><ROW><id>1367530</id><snippet>self</snippet></ROW><ROW><id>1367530</id><snippet>def formatHeader(fn):
    def wrapped(self=None):
        return '&lt;div class="page_header"&gt;'+fn(self)+'&lt;/div&gt;'
    return wrapped
</snippet></ROW><ROW><id>1367582</id><snippet>import itertools

num = [1, 2, 3, 4, 5]
combinations = []
for combination in itertools.combinations(num, 3):
    combinations.append(int("".join(str(i) for i in combination)))
# =&gt; [123, 124, 125, 134, 135, 145, 234, 235, 245, 345]
print len(combinations)
# =&gt; 10
</snippet></ROW><ROW><id>1367928</id><snippet>props</snippet></ROW><ROW><id>1367928</id><snippet>class a(object):
    def __init__(self, props=None):
        if props is None:
            props = {}
        self.props = props
</snippet></ROW><ROW><id>1368036</id><snippet>numpy</snippet></ROW><ROW><id>1368036</id><snippet>if analysis_type == 1 or analysis_type == 2 or analsis_type == 4:
</snippet></ROW><ROW><id>1368036</id><snippet>if analysis_type in (1, 2, 4):
</snippet></ROW><ROW><id>1368036</id><snippet>if x &lt; high_income and x &gt;= medium_income:
</snippet></ROW><ROW><id>1368036</id><snippet>if medium_income &lt;= x &lt; high_income:
</snippet></ROW><ROW><id>1368036</id><snippet>analysis_type</snippet></ROW><ROW><id>1368036</id><snippet>trip_rates</snippet></ROW><ROW><id>1368036</id><snippet>trip_rates</snippet></ROW><ROW><id>1368036</id><snippet>data_model = compute_table(low_income, ...)
return data_model[analysis_type][population_stratification]
</snippet></ROW><ROW><id>1368196</id><snippet>_make_object</snippet></ROW><ROW><id>1368196</id><snippet>class Composite(Parent):
    def __init__(self, x, list_of_classes, list_of_args):
        Parent.__init__(self, x)
        self._objs = [
            the_class(self.x, *the_args)
            for the_class, the_args
            in zip(list_of_classes, list_of_args)
            if isinstance(the_class, Parent.__class__)
        ]

    def do(self):
        for o in self._objs: o.do()
</snippet></ROW><ROW><id>1368214</id><snippet>String str = "i am a string";
System.out.println(new HashSet&lt;String&gt;(Arrays.asList(str.split(""))));
</snippet></ROW><ROW><id>1368214</id><snippet>String str = "i am a string";
Set&lt;String&gt; set = new HashSet&lt;String&gt;(Arrays.asList(str.split("")));
set.remove("");
System.out.println(set);
</snippet></ROW><ROW><id>1368272</id><snippet>StringIO</snippet></ROW><ROW><id>1368272</id><snippet>cStringIO</snippet></ROW><ROW><id>1368272</id><snippet>cStringIO</snippet></ROW><ROW><id>1368389</id><snippet>some_big_product/
|-- __init__.py
|-- settings.py
|-- urls.py
|-- logging.ini
|-- other_global_files.py
|-- an_app_1/
|   |-- __init__.py
|   |-- urls.py
|   |-- models.py
|   |-- views.py
|   |-- tests.py &lt;-- the generic Django testing 
|   |-- app_specific_module.py
|   |-- app_specific_package/
|   |   |-- __init__.py
|   |-- test_app_specific_module.py &lt;-- unittest 
|   |-- test_app_specific_package.py
|-- generic_module.py
|-- generic_package/
|   |-- __init__.py
|-- tests/
|   |-- test_this.py
|   |-- test_that.py
|   |-- test_all.py &lt;-- not always practical
|-- scripts/
    |-- run_tests.sh 
</snippet></ROW><ROW><id>1368786</id><snippet>from PIL import Image
trial_image = Image.open(file)
trial_image.verify()
</snippet></ROW><ROW><id>1369062</id><snippet>address</snippet></ROW><ROW><id>1369062</id><snippet>netstat -ant</snippet></ROW><ROW><id>1369062</id><snippet>netstat -anptcp</snippet></ROW><ROW><id>1369186</id><snippet>import setup.configs</snippet></ROW><ROW><id>1369186</id><snippet>import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), os.path.pardir))
</snippet></ROW><ROW><id>1369186</id><snippet>sys.path</snippet></ROW><ROW><id>1369186</id><snippet>/usr/local/lib/python2.X/site-packages/</snippet></ROW><ROW><id>1369335</id><snippet>Objects/floatobject.c</snippet></ROW><ROW><id>1369335</id><snippet>PyUnicode_EncodeDecimal()</snippet></ROW><ROW><id>1369335</id><snippet>if (PyUnicode_EncodeDecimal(PyUnicode_AS_UNICODE(v),
                            PyUnicode_GET_SIZE(v),
                            s_buffer,
                            NULL))
        return NULL;
</snippet></ROW><ROW><id>1369335</id><snippet>unicodeobject.c</snippet></ROW><ROW><id>1369335</id><snippet>PyOS_snprintf(buffer, sizeof(buffer),
              "invalid literal for float(): %.200s", s);
</snippet></ROW><ROW><id>1369335</id><snippet>s</snippet></ROW><ROW><id>1369335</id><snippet>PyOS_snprintf()</snippet></ROW><ROW><id>1369335</id><snippet>s</snippet></ROW><ROW><id>1369338</id><snippet>YYYY-MM-DD</snippet></ROW><ROW><id>1369338</id><snippet>$str = &lt;&lt;&lt;STR
date,test,time,avail
2009-09-01,JS,0.119,99.90
2009-09-02,JS,0.154,99.89
2009-09-03,SWF,0.177,99.90
2009-09-04,SWF,0.177,99.90
2009-09-05,SWF,0.177,99.90
2009-09-06,SWF,0.177,99.90
2009-09-07,SWF,0.177,99.90
2009-09-08,SWF,0.177,99.90
2009-09-09,SWF,0.177,99.90
2009-09-10,SWF,0.177,99.90
STR;
$lines = explode(PHP_EOL, $str);
unset($lines[0]); // first line is useless
</snippet></ROW><ROW><id>1369338</id><snippet>array_filter</snippet></ROW><ROW><id>1369338</id><snippet>$new_lines = array_filter($lines, 'my_filter');
var_dump($new_lines);
</snippet></ROW><ROW><id>1369338</id><snippet>function my_filter($line) {
    $min = '2009-09-04';
    $max = '2009-09-09';
    if ($line &gt;= $min &amp;&amp; $line &lt;= $max) {
        return true;
    } else {
        return false;
    }
}
</snippet></ROW><ROW><id>1369338</id><snippet>array
  4 =&gt; string '2009-09-04,SWF,0.177,99.90' (length=26)
  5 =&gt; string '2009-09-05,SWF,0.177,99.90' (length=26)
  6 =&gt; string '2009-09-06,SWF,0.177,99.90' (length=26)
  7 =&gt; string '2009-09-07,SWF,0.177,99.90' (length=26)
  8 =&gt; string '2009-09-08,SWF,0.177,99.90' (length=26)
</snippet></ROW><ROW><id>1369338</id><snippet>YYYY-MM-DD</snippet></ROW><ROW><id>1369338</id><snippet>explode</snippet></ROW><ROW><id>1369338</id><snippet>strtotime</snippet></ROW><ROW><id>1369553</id><snippet>with</snippet></ROW><ROW><id>1369553</id><snippet>using</snippet></ROW><ROW><id>1369553</id><snippet>try/finally</snippet></ROW><ROW><id>1369553</id><snippet>with</snippet></ROW><ROW><id>1369553</id><snippet>using</snippet></ROW><ROW><id>1369564</id><snippet>dispatch = {0: level0, 1: level1, 2:level2}
dispatch[offset].calc_algorithm
</snippet></ROW><ROW><id>1369564</id><snippet>offset</snippet></ROW><ROW><id>1369708</id><snippet>from django.contrib import admin
from models import *
from django import forms

class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
    def clean_points(self):
        points = self.cleaned_data['points']
        if points.isdigit() and points &lt; 1:
            raise forms.ValidationError("You have no points!")
        return points

class MyModelAdmin(admin.ModelAdmin):
    form = MyForm

admin.site.register(MyModel, MyModelAdmin)
</snippet></ROW><ROW><id>1370034</id><snippet>/usr/lib/python2.6/dist-packages</snippet></ROW><ROW><id>1370142</id><snippet>&gt;&gt;&gt; def a(lines):
    for line in lines:
    	numbers.append(eval(line.strip().split()[0]))

&gt;&gt;&gt; def b(lines):
    for line in lines:
    	a = line.strip()
    	b = a.split()
    	c = b[0]
    	d = eval(c)
    	numbers.append(d)
</snippet></ROW><ROW><id>1370142</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  2           0 SETUP_LOOP              49 (to 52)
              3 LOAD_FAST                0 (lines)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER                41 (to 51)
             10 STORE_FAST               1 (line)

  3          13 LOAD_GLOBAL              0 (numbers)
             16 LOAD_ATTR                1 (append)
             19 LOAD_GLOBAL              2 (eval)
             22 LOAD_FAST                1 (line)
             25 LOAD_ATTR                3 (strip)
             28 CALL_FUNCTION            0
             31 LOAD_ATTR                4 (split)
             34 CALL_FUNCTION            0
             37 LOAD_CONST               1 (0)
             40 BINARY_SUBSCR       
             41 CALL_FUNCTION            1
             44 CALL_FUNCTION            1
             47 POP_TOP             
             48 JUMP_ABSOLUTE            7
        &gt;&gt;   51 POP_BLOCK           
        &gt;&gt;   52 LOAD_CONST               0 (None)
             55 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(b)
  2           0 SETUP_LOOP              73 (to 76)
              3 LOAD_FAST                0 (lines)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER                65 (to 75)
             10 STORE_FAST               1 (line)

  3          13 LOAD_FAST                1 (line)
             16 LOAD_ATTR                0 (strip)
             19 CALL_FUNCTION            0
             22 STORE_FAST               2 (a)

  4          25 LOAD_FAST                2 (a)
             28 LOAD_ATTR                1 (split)
             31 CALL_FUNCTION            0
             34 STORE_FAST               3 (b)

  5          37 LOAD_FAST                3 (b)
             40 LOAD_CONST               1 (0)
             43 BINARY_SUBSCR       
             44 STORE_FAST               4 (c)

  6          47 LOAD_GLOBAL              2 (eval)
             50 LOAD_FAST                4 (c)
             53 CALL_FUNCTION            1
             56 STORE_FAST               5 (d)

  7          59 LOAD_GLOBAL              3 (numbers)
             62 LOAD_ATTR                4 (append)
             65 LOAD_FAST                5 (d)
             68 CALL_FUNCTION            1
             71 POP_TOP             
             72 JUMP_ABSOLUTE            7
        &gt;&gt;   75 POP_BLOCK           
        &gt;&gt;   76 LOAD_CONST               0 (None)
             79 RETURN_VALUE
</snippet></ROW><ROW><id>1370142</id><snippet>STORE_FAST</snippet></ROW><ROW><id>1370142</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>1370350</id><snippet>adr = " ".join(adr.tolower().split())
</snippet></ROW><ROW><id>1370350</id><snippet>adr = re.sub("1st(\b|$)", r'1', adr)
adr = re.sub("([2-9])\s?nd(\b|$)", r'\1', adr)
</snippet></ROW><ROW><id>1370350</id><snippet>adrlist = [word if word.isdigit() else soundex(word) for word in adr.split()]
</snippet></ROW><ROW><id>1370624</id><snippet>x, y = x + 3 * y, 4 * x + 1 * y
</snippet></ROW><ROW><id>1370624</id><snippet>x = x + 3 * y
y = 4 * x + 1 * y
</snippet></ROW><ROW><id>1370624</id><snippet>x,y = a,b
</snippet></ROW><ROW><id>1370624</id><snippet>x,y,z = a,b,c
</snippet></ROW><ROW><id>1370624</id><snippet>w,x,y,z = a,b,c
</snippet></ROW><ROW><id>1371029</id><snippet>MONTH()</snippet></ROW><ROW><id>1371029</id><snippet>import sqlalchemy as sa
DBSession.query(Article).group_by( sa.func.year(Article.created), sa.func.month(Article.created)).all()
</snippet></ROW><ROW><id>1371029</id><snippet>from itertools import groupby

def grouper( item ): 
    return item.created.year, item.created.month
for ( (year, month), items ) in groupby( query_result, grouper ):
    for item in items:
        # do stuff
</snippet></ROW><ROW><id>1371061</id><snippet>def index(request):
    def do_work():
        step_1()
        yield "step 1 complete"
        step_2()
        yield "step 2 complete"
        step_3()
        yield "step 3 complete"
    return HttpResponse(do_work())
</snippet></ROW><ROW><id>1371117</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>1371550</id><snippet>from datetime import date, timedelta
# http://www.ianlewis.org/en/python-date-range-iterator
def datetimeRange(from_date, to_date=None):
    while to_date is None or from_date &lt;= to_date:
        yield from_date
        from_date = from_date + timedelta(days = 1)

start = date(2009, 8, 20)
end = date(2009, 8, 23)
objects = Obj.objects.filter(date__gte=start)
objects = objects.filter(date__lte=end)

results = {}
for o in objects:
    results[o.date] = o.value

return [results.get(day, 0) for day in datetimeRange(start, end)]
</snippet></ROW><ROW><id>1371865</id><snippet>Gallery.objects.filter(photos__is_public=True).annotate(Count('photos'))
</snippet></ROW><ROW><id>1371865</id><snippet>Gallery.objects.filter(photos__is_public=True).extra(select={
  "photo_count": """
  SELECT COUNT(`gallery_photos.id`)
      FROM `gallery_photos`
  WHERE `gallery_photos.gallery_id` `gallery.id AND
        `gallery_photos.is_public = True
  """})
</snippet></ROW><ROW><id>1372445</id><snippet>@echo off
set PYLINTHOME=c:\tools
set PYLINTRC=c:\etc\pylint.conf
c:\Python26\python.exe c:\Python26\Lib\site-packages\pylint\lint.py %1 %2 %3 %4 %5 %6 %7 %8 %9
</snippet></ROW><ROW><id>1372516</id><snippet>import foo
foo.arbit = 'new value'
</snippet></ROW><ROW><id>1372721</id><snippet>set(s for s in sets if not any(other &lt; s for other in sets))
</snippet></ROW><ROW><id>1372721</id><snippet>from collections import defaultdict

def find_minimal_phrases(phrases):
    # Make the phrases hashable
    phrases = map(frozenset, phrases)

    # Create a map to find all phrases containing a word
    phrases_containing = defaultdict(set)
    for phrase in phrases:
        for word in phrase:
            phrases_containing[word].add(phrase)

    minimal_phrases = []
    found_superphrases = set()
    # in sorted by length order to find minimal sets first thanks to the
    # fact that a.superset(b) implies len(a) &gt; len(b)
    for phrase in sorted(phrases, key=len):
        if phrase not in found_superphrases:
            connected_phrases = [phrases_containing[word] for word in phrase]
            connected_phrases.sort(key=len)
            superphrases = reduce(set.intersection, connected_phrases)
            found_superphrases.update(superphrases)
            minimal_phrases.append(phrase)
    return minimal_phrases
</snippet></ROW><ROW><id>1372794</id><snippet>id = Column(Integer, default = sqlexpression)
</snippet></ROW><ROW><id>1372794</id><snippet>coalesce(select max(order.id) from order,0) + 1</snippet></ROW><ROW><id>1372794</id><snippet>id = Column(Integer, default = text("coalesce(select max(order.id) from order,0) + 1"))
</snippet></ROW><ROW><id>1372896</id><snippet>from models import MyModel
try:
    max_length = MyModel._meta.get_field('source_url').max_length
except:
    max_length = None
</snippet></ROW><ROW><id>1373063</id><snippet>PS C:\Users\jaraco\Desktop&gt; python
Python 3.1.1 (r311:74483, Aug 17 2009, 17:02:12) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from graphics import *
&gt;&gt;&gt; dir()
['BAD_OPTION', 'Circle', 'DEAD_THREAD', 'DEFAULT_CONFIG', 'Entry', 'GraphWin', 'GraphicsError', 'GraphicsObject', 'Image', 'Line', 'OBJ_ALREADY_DRAWN', 'Oval',
'Pixmap', 'Point', 'Polygon', 'Queue', 'Rectangle', 'Text', 'Transform', 'UNSUPPORTED_METHOD', '\_\_builtins\_\_', '\_\_doc\_\_', '\_\_name\_\_', '\_\_package\_\_', 'atexit', 'color_rgb', 'copy', 'os', 'sys', 'test', 'time', 'tk']
&gt;&gt;&gt; error in background error handler:
out of stack space (infinite loop?)
	while executing
"::tcl::Bgerror {out of stack space (infinite loop?)} {-code 1 -level 0 -errorcode NONE -errorinfo {out of stack space (infinite loop?)
	while execu..."
</snippet></ROW><ROW><id>1373063</id><snippet>&gt;&gt;&gt; import graphics
&gt;&gt;&gt; dir(graphics)
</snippet></ROW><ROW><id>1373063</id><snippet>import graphics

def main():
	print("This program plots the growth of a 10-year investment.")

	principal = eval(input("Enter the initial principal: "))
	apr = eval(input("Enter the annualized interest rate: "))

	win = graphics.GraphWin("Investment Grown Chart", 320, 420)
	win.setBackground("white")
	graphics.Text(graphics.Point(20, 230), ' 0.0K').draw(win)
	graphics.Text(graphics.Point(20, 180), ' 2.5K').draw(win)
	graphics.Text(graphics.Point(20, 130), ' 5.0K').draw(win)
	graphics.Text(graphics.Point(20, 80), ' 7.5K').draw(win)
	graphics.Text(graphics.Point(20, 30), '10.0K').draw(win)

	# Rest of code is here but I've commented it out to isolate the problem.

main()
</snippet></ROW><ROW><id>1373185</id><snippet>&gt;&gt;&gt; dict = { 
    'x': 1, 
    'y': 2, 
    'z': 3
}
&gt;&gt;&gt; dict
{'y': 2, 'x': 1, 'z': 3}
&gt;&gt;&gt; dict['y']
2
</snippet></ROW><ROW><id>1373185</id><snippet>&gt;&gt;&gt; x = 'spam'
&gt;&gt;&gt; z = { x: 'eggs' }
&gt;&gt;&gt; z['spam']
'eggs'
</snippet></ROW><ROW><id>1373261</id><snippet>try:
    pr.update()
except ConfigurationException, e:
    returnString=e.line+' '+e.errormsg
</snippet></ROW><ROW><id>1373713</id><snippet>from __future__ import with_statement

with open(filename, "r") as f:
    data = f.read()
</snippet></ROW><ROW><id>1373723</id><snippet>from xml.dom.minidom import parse
doc = parse("filename.xml")
</snippet></ROW><ROW><id>1374304</id><snippet>py26-psycopg2</snippet></ROW><ROW><id>1374304</id><snippet>$ sudo port install py26-psycopg2
</snippet></ROW><ROW><id>1374304</id><snippet>py-*</snippet></ROW><ROW><id>1374304</id><snippet>py25-*</snippet></ROW><ROW><id>1374304</id><snippet>py26-*</snippet></ROW><ROW><id>1374757</id><snippet>nsmap</snippet></ROW><ROW><id>1374757</id><snippet>Element</snippet></ROW><ROW><id>1374757</id><snippet>SubElement</snippet></ROW><ROW><id>1374757</id><snippet>register_namespace</snippet></ROW><ROW><id>1374893</id><snippet>findall</snippet></ROW><ROW><id>1374893</id><snippet>sum(1 for m in re.finditer(thepattern, thestring))</snippet></ROW><ROW><id>1374893</id><snippet>subn</snippet></ROW><ROW><id>1374893</id><snippet>def countnonoverlappingrematches(pattern, thestring):
  return re.subn(pattern, '', thestring)[1]
</snippet></ROW><ROW><id>1374893</id><snippet>re.subn(pattern, '', thestring, 100)[1]</snippet></ROW><ROW><id>1374893</id><snippet>'a+'</snippet></ROW><ROW><id>1374893</id><snippet>'aa'</snippet></ROW><ROW><id>1374893</id><snippet>a</snippet></ROW><ROW><id>1374893</id><snippet>def countoverlappingdistinct(pattern, thestring):
  total = 0
  start = 0
  there = re.compile(pattern)
  while True:
    mo = there.search(thestring, start)
    if mo is None: return total
    total += 1
    start = 1 + mo.start()
</snippet></ROW><ROW><id>1374893</id><snippet>re.search</snippet></ROW><ROW><id>1374893</id><snippet>start</snippet></ROW><ROW><id>1374893</id><snippet>search</snippet></ROW><ROW><id>1375295</id><snippet>'r'</snippet></ROW><ROW><id>1375295</id><snippet>f = os.popen (strpath, 'r')
for line in f:
    print line
f.close()
</snippet></ROW><ROW><id>1375295</id><snippet>os.popen()</snippet></ROW><ROW><id>1375295</id><snippet>subprocess</snippet></ROW><ROW><id>1375595</id><snippet>elementtree</snippet></ROW><ROW><id>1375595</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>1375595</id><snippet>python_ver</snippet></ROW><ROW><id>1375595</id><snippet>import sys
python_ver = sys.version
</snippet></ROW><ROW><id>1375595</id><snippet>settings.py</snippet></ROW><ROW><id>1375595</id><snippet>import sys
sys.path.append('path to where elementtree resides')
</snippet></ROW><ROW><id>1376090</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1376090</id><snippet>a</snippet></ROW><ROW><id>1376090</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>1376090</id><snippet>p.communicate(a)
</snippet></ROW><ROW><id>1376090</id><snippet>communicate()</snippet></ROW><ROW><id>1376307</id><snippet>.h</snippet></ROW><ROW><id>1376307</id><snippet>.c</snippet></ROW><ROW><id>1376307</id><snippet>cdef extern from "some.h":
  ctypedef struct b
  ctypedef struct a:
    b * b_pointer
  ctypedef struct b:
    a a_obj
</snippet></ROW><ROW><id>1376326</id><snippet>&gt;&gt;&gt; hash({})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: dict objects are unhashable
</snippet></ROW><ROW><id>1376326</id><snippet>hashabe: str (Immutable), buffer (Warning, immutable slice of (possibly) mutable object!)
unhashable: list, array.array
</snippet></ROW><ROW><id>1376531</id><snippet>__iter__()</snippet></ROW><ROW><id>1376531</id><snippet>def multigen(gen_func):
    class _multigen(object):
        def __init__(self, *args, **kwargs):
            self.__args = args
            self.__kwargs = kwargs
        def __iter__(self):
            return gen_func(*self.__args, **self.__kwargs)
    return _multigen

@multigen
def myxrange(n):
   i = 0
   while i &lt; n:
     yield i
     i += 1
m = myxrange(5)
print list(m)
print list(m)
</snippet></ROW><ROW><id>1376658</id><snippet>import re
r = re.compile('Master(.*?)thon')
m = r.search(str1)
if m:
    lyrics = m.group(1)
</snippet></ROW><ROW><id>1376851</id><snippet>myVal = Word(alphas+nums+'_')    

myExpr = Forward()
mySubExpr = (
    (Suppress('(') + Group(myExpr) + Suppress(')'))
    | myVal + Suppress('(') + Group(delimitedList(myExpr)) + Suppress(')')
    | myVal
    )
myExpr &lt;&lt; mySubExpr + ZeroOrMore( oneOf('+ - / * =') + mySubExpr ) 

print(myExpr.parseString('blah(foo+bar)'))
</snippet></ROW><ROW><id>1376851</id><snippet>['blah', ['foo', '+', 'bar']]</snippet></ROW><ROW><id>1376995</id><snippet>(?&lt;first&gt;group)(?'second'group)</snippet></ROW><ROW><id>1376995</id><snippet>var match = Regex.Match("subject", "regex");&lt;br /&gt;
var matchedText = match.Groups("first")</snippet></ROW><ROW><id>1376995</id><snippet>Record Record.Parse(namedValueCollection)</snippet></ROW><ROW><id>1377652</id><snippet>import cStringIO as StringIO
import ho.pisa as pisa
from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
from cgi import escape


def render_to_pdf(template_src, context_dict):
    template = get_template(template_src)
    context = Context(context_dict)
    html  = template.render(context)
    result = StringIO.StringIO()

    pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("ISO-8859-1")), result)
    if not pdf.err:
        return HttpResponse(result.getvalue(), mimetype='application/pdf')
    return HttpResponse('We had some errors&lt;pre&gt;%s&lt;/pre&gt;' % escape(html))
</snippet></ROW><ROW><id>1377652</id><snippet>def myview(request):
    #Retrieve data or whatever you need
    return render_to_pdf(
            'mytemplate.html',
            {
                'pagesize':'A4',
                'mylist': results,
            }
        )
</snippet></ROW><ROW><id>1377652</id><snippet>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My Title&lt;/title&gt;
        &lt;style type="text/css"&gt;
            @page {
                size: {{ pagesize }};
                margin: 1cm;
                @frame footer {
                    -pdf-frame-content: footerContent;
                    bottom: 0cm;
                    margin-left: 9cm;
                    margin-right: 9cm;
                    height: 1cm;
                }
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            {% for item in mylist %}
                RENDER MY CONTENT
            {% endfor %}
        &lt;/div&gt;
        &lt;div id="footerContent"&gt;
            {%block page_foot%}
                Page &lt;pdf:pagenumber&gt;
            {%endblock%}
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1378157</id><snippet>while</snippet></ROW><ROW><id>1378157</id><snippet>print " ".join(str(i) for i in xrange(10))
</snippet></ROW><ROW><id>1378157</id><snippet>$ python -mtimeit "i=0" "while i &lt; 1000: i+=1"
1000 loops, best of 3: 303 usec per loop
$ python -mtimeit "for i in xrange(1000): pass"
10000 loops, best of 3: 120 usec per loop
</snippet></ROW><ROW><id>1378366</id><snippet>dict</snippet></ROW><ROW><id>1378366</id><snippet>list</snippet></ROW><ROW><id>1378366</id><snippet>class MyObject(object):
    # fields (mapped automatically by sqlalchemy using mapper(...)
    MyFieldAsString = None

    def _get_MyFieldAsDict(self):
        if self.MyFieldAsString:
            return eval(self.MyFieldAsString)
        else:
            return {} # be careful with None and empty dict

    def _set_MyFieldAsDict(self, value):
        if value:
            self.MyFieldAsString = str(value)
        else:
            self.MyFieldAsString = None

    MyFieldAsDict = property(_get_MyFieldAsDict, _set_MyFieldAsDict)
</snippet></ROW><ROW><id>1378449</id><snippet>from pywinauto import application
app = application.Application()
app.Form1.CheckedListBox1.Select('item1')
app.Form1.CheckedListBox1.Select('item1')
</snippet></ROW><ROW><id>1378909</id><snippet>    etype, value, tb = sys.exc_info()
    return ''.join(format_exception(etype, value, tb, limit))
</snippet></ROW><ROW><id>1378909</id><snippet>format_exception</snippet></ROW><ROW><id>1378909</id><snippet>    list = ['Traceback (most recent call last):\n']
    list = list + format_tb(tb, limit)
</snippet></ROW><ROW><id>1378989</id><snippet>subprocess</snippet></ROW><ROW><id>1378989</id><snippet>fork()</snippet></ROW><ROW><id>1378989</id><snippet>os</snippet></ROW><ROW><id>1379700</id><snippet>&gt;&gt;&gt; class X(object):
...   @classmethod
...   def clame(cls): pass
...   @staticmethod
...   def stame(): pass
...   def meth(self): pass
...   def __init__(self):
...     self.lam = lambda: None
...     self.val = 23
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; dir(x)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__',
 '__getattribute__', '__hash__', '__init__', '__module__',
 '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',
 '__sizeof__', '__str__', '__subclasshook__', '__weakref__',
 'clame', 'lam', 'meth', 'stame', 'val']
</snippet></ROW><ROW><id>1379700</id><snippet>object</snippet></ROW><ROW><id>1379700</id><snippet>__class__</snippet></ROW><ROW><id>1379700</id><snippet>__dict__</snippet></ROW><ROW><id>1379700</id><snippet>__doc__</snippet></ROW><ROW><id>1379700</id><snippet>val</snippet></ROW><ROW><id>1379700</id><snippet>lam</snippet></ROW><ROW><id>1379700</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; [n for n, v in inspect.getmembers(x, inspect.ismethod)]
['__init__', 'clame', 'meth']
</snippet></ROW><ROW><id>1379700</id><snippet>inspect</snippet></ROW><ROW><id>1379700</id><snippet>dir</snippet></ROW><ROW><id>1379700</id><snippet>object</snippet></ROW><ROW><id>1379700</id><snippet>ismethod</snippet></ROW><ROW><id>1379700</id><snippet>getmembers</snippet></ROW><ROW><id>1379797</id><snippet>string dir = Path.GetDirectoryName(scriptPath);                       
ICollection&lt;string&gt; paths = engine.GetSearchPaths();

if (!String.IsNullOrWhitespace(dir))
{
    paths.Add(dir);
}
else
{
    paths.Add(Environment.CurrentDirectory);
}
engine.SetSearchPaths(paths);
</snippet></ROW><ROW><id>1379874</id><snippet>localize</snippet></ROW><ROW><id>1379874</id><snippet>replace</snippet></ROW><ROW><id>1379874</id><snippet>normalize</snippet></ROW><ROW><id>1380256</id><snippet>import itertools

def partlst(lst, n):
    """Partition @lst in @n balanced parts, in given order"""
    parts, rest = divmod(len(lst), n)
    lstiter = iter(lst)
    for j in xrange(n):
        plen = len(lst)/n + (1 if rest &gt; 0 else 0)
        rest -= 1
        yield list(itertools.islice(lstiter, plen))

parts =  list(partlst(range(1, 15), 5))
print len(parts)
print parts
</snippet></ROW><ROW><id>1380328</id><snippet>defaults write com.apple.versioner.python Version 2.5
</snippet></ROW><ROW><id>1380583</id><snippet>pyc</snippet></ROW><ROW><id>1380598</id><snippet>class JonProperty(object):
    def __init__(self, name):
        self.name = name

    def __get__(self, obj, objtype):
        return getattr(obj, self.name)

    def __set__(self, obj, val):
        setattr(obj, self.name, float(val))
</snippet></ROW><ROW><id>1380598</id><snippet>class Vector(object):
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z
    x = JonProperty('_x')
    y = JonProperty('_y')
    z = JonProperty('_z')
</snippet></ROW><ROW><id>1380703</id><snippet>def names_for(product_id):
    return [row.namestring for row in ProductName.objects.filter(product_id=product_id)]
</snippet></ROW><ROW><id>1380716</id><snippet>sprintf</snippet></ROW><ROW><id>1380875</id><snippet>a = (1, 2, 3)
b = a + (4, 5, 6)
c = b[1:]
</snippet></ROW><ROW><id>1380875</id><snippet>   name = "Joe"
   age = 40
   location = "New York"
   joe = (name, age, location)
</snippet></ROW><ROW><id>1381353</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>1381353</id><snippet>~/opt/qt/...</snippet></ROW><ROW><id>1381353</id><snippet>~/.profile</snippet></ROW><ROW><id>1381353</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>1381353</id><snippet>dyld</snippet></ROW><ROW><id>1381353</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>1381353</id><snippet>man dyld</snippet></ROW><ROW><id>1381380</id><snippet>mydict["bc"]</snippet></ROW><ROW><id>1381380</id><snippet>public class PythonDictionary {
    public string this[string index] {
        get { ... }
        set { ... }
    }
    public static implicit operator PythonDictionary(string value) {
        ...
    }
}

public void Example() {
    Dictionary&lt;string, PythonDictionary&gt; map = new Dictionary&lt;string, PythonDictionary&gt;();
    map["42"]["de"] = "foo";
    map["42"] = "bar";
}
</snippet></ROW><ROW><id>1381395</id><snippet>from django.core.management import setup_environ
from django.core.mail import EmailMultiAlternatives, send_mail
from django.contrib.auth.models import User

import settings
from my.app.models import *

setup_environ(settings)
</snippet></ROW><ROW><id>1381443</id><snippet>object</snippet></ROW><ROW><id>1381443</id><snippet>__mro__</snippet></ROW><ROW><id>1381443</id><snippet>&gt;&gt;&gt; class Root(object):
...   d = {'za': 23}
... 
&gt;&gt;&gt; class Trunk(Root):
...   d = {'ki': 45}
... 
&gt;&gt;&gt; class Branch(Root):
...   d = {'fu': 67}
... 
&gt;&gt;&gt; class Leaf(Trunk, Branch):
...   d = {'po': 89}
</snippet></ROW><ROW><id>1381443</id><snippet>&gt;&gt;&gt; def getem(x):
...   d = {}
...   for x in x.__class__.__mro__:
...     d.update(x.__dict__.get('d', ()))
...   return d
... 
&gt;&gt;&gt; x = Leaf()
&gt;&gt;&gt; getem(x)
{'za': 23, 'ki': 45, 'po': 89, 'fu': 67}
</snippet></ROW><ROW><id>1381494</id><snippet>n</snippet></ROW><ROW><id>1381494</id><snippet>arr7 = ctypes.c_double * `n` 
x = arr7()
</snippet></ROW><ROW><id>1381494</id><snippet>x</snippet></ROW><ROW><id>1381494</id><snippet>double*</snippet></ROW><ROW><id>1381494</id><snippet>x</snippet></ROW><ROW><id>1381494</id><snippet>x = arr7(i*0.1 for i in xrange(7))
</snippet></ROW><ROW><id>1381494</id><snippet>x</snippet></ROW><ROW><id>1381769</id><snippet>import datetime
now = datetime.datetime.now()
delay = float (raw_input ("enter delay (s): "))
dt = datetime.timedelta (seconds=delay)
then = now + dt
print now
print then
</snippet></ROW><ROW><id>1382194</id><snippet>job(...)</snippet></ROW><ROW><id>1382194</id><snippet>return</snippet></ROW><ROW><id>1382194</id><snippet>jreg</snippet></ROW><ROW><id>1382194</id><snippet>jreg</snippet></ROW><ROW><id>1382194</id><snippet>None</snippet></ROW><ROW><id>1382194</id><snippet>NULL</snippet></ROW><ROW><id>1382194</id><snippet>T</snippet></ROW><ROW><id>1382194</id><snippet>`mycursor.execute('INSERT INTO sometable VALUES(?, ?, ?, ?, ?, ?)', T)
</snippet></ROW><ROW><id>1382194</id><snippet>T</snippet></ROW><ROW><id>1382194</id><snippet>sometable</snippet></ROW><ROW><id>1382194</id><snippet>?</snippet></ROW><ROW><id>1382194</id><snippet>mycursor</snippet></ROW><ROW><id>1382194</id><snippet>myconnection.cursor</snippet></ROW><ROW><id>1382194</id><snippet>myconnection</snippet></ROW><ROW><id>1382194</id><snippet>connect</snippet></ROW><ROW><id>1382593</id><snippet> apt-cache rdepends python-support
</snippet></ROW><ROW><id>1382593</id><snippet>Architecture: all</snippet></ROW><ROW><id>1382593</id><snippet>apt-get source &lt;package&gt;
</snippet></ROW><ROW><id>1382593</id><snippet>cd &lt;packagesrc&gt;
dpkg-buildpackage -rfakeroot
</snippet></ROW><ROW><id>1382593</id><snippet>debian</snippet></ROW><ROW><id>1382748</id><snippet>filter = ['a', 'b', 'c']
" ".join(["item -%s" % val for val in filter])
</snippet></ROW><ROW><id>1382748</id><snippet>filter = ['a'*1000] * 1000</snippet></ROW><ROW><id>1383153</id><snippet>psycopg2</snippet></ROW><ROW><id>1383153</id><snippet>$ python
&gt;&gt;&gt; import psycopg2
</snippet></ROW><ROW><id>1383153</id><snippet>ImportError</snippet></ROW><ROW><id>1383153</id><snippet>sys.path</snippet></ROW><ROW><id>1383153</id><snippet>$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.path
</snippet></ROW><ROW><id>1383153</id><snippet>sys.path</snippet></ROW><ROW><id>1383153</id><snippet>import</snippet></ROW><ROW><id>1383153</id><snippet>import sys
sys.path.append("my-path")

# ...
import psycopg2
</snippet></ROW><ROW><id>1383181</id><snippet># define the range of x,y,z
x_range = numpy.linspace(x_min,x_max,x_num)
y_range = numpy.linspace(y_min,y_max,y_num)
z_range = numpy.linspace(z_min,z_max,z_num)

# create arrays x,y,z in the correct dimensions
# so that they create the grid
x,y,z = numpy.ix_(x_range,y_range,z_range)

# calculate the function of x, y and z
sinxyz = numpy.sin(x+y+z)
</snippet></ROW><ROW><id>1383248</id><snippet># mypackage/config.py
MY_CONST = 17

# mypackage/main.py
from mypackage.config import *
</snippet></ROW><ROW><id>1383365</id><snippet>log1.py</snippet></ROW><ROW><id>1383365</id><snippet>import logging, sys

class SingleLevelFilter(logging.Filter):
    def __init__(self, passlevel, reject):
        self.passlevel = passlevel
        self.reject = reject

    def filter(self, record):
        if self.reject:
            return (record.levelno != self.passlevel)
        else:
            return (record.levelno == self.passlevel)

h1 = logging.StreamHandler(sys.stdout)
f1 = SingleLevelFilter(logging.INFO, False)
h1.addFilter(f1)
rootLogger = logging.getLogger()
rootLogger.addHandler(h1)
h2 = logging.StreamHandler(sys.stderr)
f2 = SingleLevelFilter(logging.INFO, True)
h2.addFilter(f2)
rootLogger.addHandler(h2)
logger = logging.getLogger("my.logger")
logger.setLevel(logging.DEBUG)
logger.debug("A DEBUG message")
logger.info("An INFO message")
logger.warning("A WARNING message")
logger.error("An ERROR message")
logger.critical("A CRITICAL message")
</snippet></ROW><ROW><id>1383365</id><snippet>sys.stdout</snippet></ROW><ROW><id>1383365</id><snippet>sys.stderr</snippet></ROW><ROW><id>1383365</id><snippet>tmp</snippet></ROW><ROW><id>1383365</id><snippet>sys.stderr</snippet></ROW><ROW><id>1383365</id><snippet>tmp</snippet></ROW><ROW><id>1383637</id><snippet>index.py</snippet></ROW><ROW><id>1383637</id><snippet>ls -l index.py</snippet></ROW><ROW><id>1383646</id><snippet>class SuperDuperWrapper(object):
    def __init__(self, origobj):
        self.myobj = origobj
    def __str__(self):
        return "SUPER DUPER " + str(self.myobj)
    def __getattr__(self,attr):
        return getattr(self.myobj, attr)
</snippet></ROW><ROW><id>1383646</id><snippet>__getattr__</snippet></ROW><ROW><id>1383646</id><snippet>s = "hey ho!"
sds = SuperDuperWrapper(s)
print sds

i = 100
sdi = SuperDuperWrapper(i)
print sdi
</snippet></ROW><ROW><id>1383646</id><snippet>SUPER DUPER hey ho!
SUPER DUPER 100
</snippet></ROW><ROW><id>1383646</id><snippet>print sds.split()
['hey', 'ho!']
</snippet></ROW><ROW><id>1383721</id><snippet># -*- coding: utf-8 -*-
import codecs
import unicodedata

x = u"Wikipédia, le projet d’encyclopédie"

xtd = {ord(u'’'): u"'", ord(u'é'): u'e', }

def asciify(error):
    return xtd[ord(error.object[error.start])], error.end

codecs.register_error('asciify', asciify)

def ae():
  return x.encode('ascii', 'asciify')

def ud():
  return unicodedata.normalize('NFKD', x).encode('ASCII', 'ignore')

def tr():
  return x.translate(xtd)

if __name__ == '__main__':
  print 'or:', x
  print 'ae:', ae()
  print 'ud:', ud()
  print 'tr:', tr()
</snippet></ROW><ROW><id>1383721</id><snippet>or: Wikipédia, le projet d’encyclopédie
ae: Wikipedia, le projet d'encyclopedie
ud: Wikipedia, le projet dencyclopedie
tr: Wikipedia, le projet d'encyclopedie
</snippet></ROW><ROW><id>1383721</id><snippet>xtd</snippet></ROW><ROW><id>1383721</id><snippet>$ python -mtimeit -s'import a' 'a.ae()'
100000 loops, best of 3: 7.5 usec per loop
$ python -mtimeit -s'import a' 'a.ud()'
100000 loops, best of 3: 3.66 usec per loop
$ python -mtimeit -s'import a' 'a.tr()'
10000 loops, best of 3: 21.4 usec per loop
</snippet></ROW><ROW><id>1383721</id><snippet>translate</snippet></ROW><ROW><id>1383721</id><snippet>translate</snippet></ROW><ROW><id>1383721</id><snippet>asciify</snippet></ROW><ROW><id>1383721</id><snippet>specstd = {ord(u'’'): u"'", }
def specials(error):
  return specstd.get(ord(error.object[error.start]), u''), error.end
codecs.register_error('specials', specials)

def bu():
  return unicodedata.normalize('NFKD', x).encode('ASCII', 'specials')
</snippet></ROW><ROW><id>1383721</id><snippet>$ python -mtimeit -s'import a' 'a.bu()'
100000 loops, best of 3: 10.7 usec per loop
</snippet></ROW><ROW><id>1383721</id><snippet>xtd</snippet></ROW><ROW><id>1383721</id><snippet>asciify</snippet></ROW><ROW><id>1383721</id><snippet>bu</snippet></ROW><ROW><id>1383743</id><snippet>.key</snippet></ROW><ROW><id>1383743</id><snippet>.key</snippet></ROW><ROW><id>1383743</id><snippet>weakref.ref</snippet></ROW><ROW><id>1383743</id><snippet>dict</snippet></ROW><ROW><id>1383743</id><snippet>def enregister(d, obj):
  obj.ds.append(d)
  d[obj.key] = obj

class Item(object):
    def __init__(self, uniq_key, title=None):
        self._key = uniq_key
        self.title = title
        self.ds = []

    def adjust_key(self, newkey):
        newds = [d for d in self.ds if self._key in d]
        for d in newds:
          del d[self._key]
          d[newkey] = self
        self.ds = newds
        self._key = newkey

    def get_key(self):
        return self._key

    key = property(get_key, adjust_key)
</snippet></ROW><ROW><id>1383743</id><snippet>class Item(object):

    all = weakref.WeakValueDictionary()

    def __init__(self, uniq_key, title=None):
        self._key = uniq_key
        self.title = title
        # here, if needed, you could check that the key
        # is not ALREADY present in self.all
        self.all[self._key] = self

    def adjust_key(self, newkey):
        # "key non-uniqueness" could be checked here too
        del self.all[self._key]
        self.all[newkey] = self
        self._key = newkey

    def get_key(self):
        return self._key

    key = property(get_key, adjust_key)
</snippet></ROW><ROW><id>1383743</id><snippet>Item.all['akey']</snippet></ROW><ROW><id>1383743</id><snippet>Item.all.get('akey')</snippet></ROW><ROW><id>1383743</id><snippet>for akey in Item.all:</snippet></ROW><ROW><id>1384258</id><snippet>TYPE_DICT</snippet></ROW><ROW><id>1384258</id><snippet>TYPE_DICT_DICT = dict(TYPE_DICT)
</snippet></ROW><ROW><id>1384258</id><snippet>TYPE_DICT_DICT</snippet></ROW><ROW><id>1384304</id><snippet>elif ch=='2': self.adnewcar(reg)
</snippet></ROW><ROW><id>1384304</id><snippet>class serv_db:
        def __init__(self, db):
                self.db = db
                self.dbc = self.db.cursor()

        def menudisp (self):
                print"Welcome to Tata Motors"
                print"Please select one of the options to continue:"
                print"1. Insert Car Info"
                print"2. Display Car Info"
                print"3. Update Car Info"
                print"4. Exit"
                menu_choice = raw_input("Enter what you want to do: ")
                if menu_choice=='1': self.additem()
                elif menu_choice=='2': self.getitem()
                elif menu_choice=='3': self.edititem()
                elif menu_choice=='4': sys.exit()

        def additem (self):
                reg = raw_input("\n\nTo continue, please enter the Registration # of car: ")
                print"There are 3 books in our database:"
                print"1. Job Card"
                print"2. Car"
                print"3. Customer"
                ch = raw_input("\nEnter your choice: ")
                if ch=='1': self.adnewjob()
                elif ch=='2': self.adnewcar(reg)
                elif ch=='3': self.adnewcust()

        def adnewcar ( self, reg ):
            print "adding info to database: car"
            carreg = reg  #error here
            mftr = raw_input("Enter the Manufacturer of your car: ")
            model = raw_input("Enter the Model of your car: ")
            car_tb = (carreg,mftr,model)
            #writing to DB
            self.dbc.execute("insert into car(reg, mftr, model) values(%s,%s,%s)", car_tb)

def main():
        db = MySQLdb.connect(user="root", passwd="", db="tatamotors")
        service = serv_db(db)
        service.menudisp()

if __name__ == '__main__':
     main()
</snippet></ROW><ROW><id>1384328</id><snippet>sys.stdout.write(open(filepath,"rb").read())
sys.stdout.flush()
</snippet></ROW><ROW><id>1384328</id><snippet>chunk_size = 4096
handle = open(filepath, "rb")

while True:
    buffer = handle.read(chunk_size)
    if buffer:
        sys.stdout.write(buffer)
    else:
        break
</snippet></ROW><ROW><id>1384559</id><snippet>object.__str__()</snippet></ROW><ROW><id>1384559</id><snippet>class A:
   def __str__(self):
      return "Something useless"

class B(A):
   def __str__(self):
      return object.__str__(self)
</snippet></ROW><ROW><id>1384559</id><snippet>B</snippet></ROW><ROW><id>1384559</id><snippet>&gt;&gt;&gt; b = B()
&gt;&gt;&gt; str(b)
'&lt;__main__.B instance at 0x7fb34c4f09e0&gt;'
</snippet></ROW><ROW><id>1384565</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime('%H:%M:%S', time.gmtime(12345))
'03:25:45'
</snippet></ROW><ROW><id>1384565</id><snippet>time</snippet></ROW><ROW><id>1384565</id><snippet>&gt;&gt;&gt; from django import template as tt
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; tt.Template('{{ x|time:"H:i:s" }}').render(
...     tt.Context({'x': datetime.datetime.fromtimestamp(12345, pytz.utc)}))
u'03:25:45'
</snippet></ROW><ROW><id>1384673</id><snippet>from sphinx.ext import autodoc

class DocsonlyMethodDocumenter(autodoc.MethodDocumenter):
  def format_args(self):
    return None

autodoc.add_documenter(DocsonlyMethodDocumenter)
</snippet></ROW><ROW><id>1384673</id><snippet>add_documenter</snippet></ROW><ROW><id>1384673</id><snippet>format_args</snippet></ROW><ROW><id>1384673</id><snippet>autodoc</snippet></ROW><ROW><id>1384673</id><snippet>sphinx</snippet></ROW><ROW><id>1384673</id><snippet>autodoc.MethodDocumenter.format_args=lambda _:None</snippet></ROW><ROW><id>1384673</id><snippet>sphinx</snippet></ROW><ROW><id>1385100</id><snippet>from lib2to3.fixes.fix_imports import MAPPING
</snippet></ROW><ROW><id>1385100</id><snippet>REVERSE_MAPPING={}
for key,val in MAPPING.items():
    REVERSE_MAPPING[val]=key
</snippet></ROW><ROW><id>1385100</id><snippet>class Python_3_Unpickler(pickle.Unpickler):
    """Class for pickling objects from Python 3"""
    def find_class(self,module,name):
        if module in REVERSE_MAPPING:
            module=REVERSE_MAPPING[module]
        __import__(module)
        mod = sys.modules[module]
        klass = getattr(mod, name)
        return klass

def loads(str):
    file = pickle.StringIO(str)
    return Python_3_Unpickler(file).load()  
</snippet></ROW><ROW><id>1385778</id><snippet>__init__</snippet></ROW><ROW><id>1385778</id><snippet>super</snippet></ROW><ROW><id>1385778</id><snippet>object.__init__(self)
</snippet></ROW><ROW><id>1385778</id><snippet>__del__</snippet></ROW><ROW><id>1385778</id><snippet>__new__</snippet></ROW><ROW><id>1385933</id><snippet>&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt; root=Tk()
&gt;&gt;&gt; e1=Entry(root)
&gt;&gt;&gt; e1.pack()
&gt;&gt;&gt; e2=Entry(root)
&gt;&gt;&gt; e2.pack()
&gt;&gt;&gt; def handleReturn(event):
...     print "return: event.widget is",event.widget
...     print "focus is:", root.focus_get()
... 
&gt;&gt;&gt; e1.bind("&lt;Return&gt;", handleReturn)
</snippet></ROW><ROW><id>1385933</id><snippet>&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt; root=Tk()
&gt;&gt;&gt; e1=Entry(root)
&gt;&gt;&gt; e1.pack()
&gt;&gt;&gt; e2=Entry(root)
&gt;&gt;&gt; e2.pack()
&gt;&gt;&gt; def handleReturn(event):
...     print "return: event.widget is",event.widget
...     print "focus is:",root.focus_get()
... 
&gt;&gt;&gt; root.bind("&lt;Return&gt;",handleReturn)
</snippet></ROW><ROW><id>1385955</id><snippet>for cc in permgen(items[:i]+items[i+1:],n-1):
</snippet></ROW><ROW><id>1385955</id><snippet>for cc in permgen(items,n-1):
</snippet></ROW><ROW><id>1386226</id><snippet>#!/bin/sh
export PYTHONPATH=/your/local/python/path
/path/to/python /path/to/your/fastcgi/handler  # this line should be similar to what was supplied to mod_fastcgi originally
</snippet></ROW><ROW><id>1386269</id><snippet>    Note 3: Avoid using properties for computationally expensive
    operations; the attribute notation makes the caller believe
    that access is (relatively) cheap.
</snippet></ROW><ROW><id>1386382</id><snippet>from PIL import Image
size = (36, 36)
image = Image.open(data)
image.thumbnail(size, Image.ANTIALIAS)
background = Image.new('RGBA', size, (255, 255, 255, 0))
background.paste(
    image,
    ((size[0] - image.size[0]) / 2, (size[1] - image.size[1]) / 2))
</snippet></ROW><ROW><id>1386756</id><snippet>import Image
im=Image.open("beta-icon.gif")
im = im.convert("RGB")
im=im.resize((36,36), Image.ANTIALIAS)
im.save("q5.png")
</snippet></ROW><ROW><id>1386828</id><snippet>s = "110101001"
numbers = [int(s[i:i+3], 2) for i in range(0, len(s), 3)]
print numbers
</snippet></ROW><ROW><id>1386828</id><snippet>[6, 5, 1]
</snippet></ROW><ROW><id>1386828</id><snippet>&gt;&gt;&gt; range(0, len(s), 3)
[0, 3, 6]
</snippet></ROW><ROW><id>1386828</id><snippet>range()</snippet></ROW><ROW><id>1386828</id><snippet>len(s)</snippet></ROW><ROW><id>1386828</id><snippet>&gt;&gt;&gt; [s[i:i+3] for i in range(0, len(s), 3)]
["110", "101", "001"]
</snippet></ROW><ROW><id>1386828</id><snippet>s[i:i+3]</snippet></ROW><ROW><id>1386828</id><snippet>i</snippet></ROW><ROW><id>1386828</id><snippet>s[i:i+3]</snippet></ROW><ROW><id>1386828</id><snippet>&gt;&gt;&gt; [int(s[i:i+3], 2) for i in range(0, len(s), 3)]
[6, 5, 1]
</snippet></ROW><ROW><id>1386828</id><snippet>int(..., 2)</snippet></ROW><ROW><id>1386885</id><snippet>put</snippet></ROW><ROW><id>1387228</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Windows'
</snippet></ROW><ROW><id>1387326</id><snippet>for n in dir(self):
  if getattr(self, n) is None:
    setattr(self, n, '')
</snippet></ROW><ROW><id>1387326</id><snippet>is None</snippet></ROW><ROW><id>1387326</id><snippet>__unicode__</snippet></ROW><ROW><id>1387326</id><snippet>def b(atr): return atr or u''
</snippet></ROW><ROW><id>1387326</id><snippet>def __unicode__(self):
  if self.use_flourit == u'D':
    return '%s, %s %s (%s - %s)' % (
        b(self.surname), b(self.first_name), b(self.middle_names),
        b(self.birth_year), b(self.death_year)
    )
  else:
    return '%s, %s %s (fl. %s)' % (
        b(self.surname), b(self.first_name), b(self.middle_names),
        b(self.flourit_year)
    )
</snippet></ROW><ROW><id>1387326</id><snippet>self</snippet></ROW><ROW><id>1387326</id><snippet>__unicode__</snippet></ROW><ROW><id>1387326</id><snippet>__str__</snippet></ROW><ROW><id>1387326</id><snippet>__repr__</snippet></ROW><ROW><id>1387326</id><snippet>dir</snippet></ROW><ROW><id>1387326</id><snippet>setattr</snippet></ROW><ROW><id>1387326</id><snippet>getattr</snippet></ROW><ROW><id>1387579</id><snippet>conn = MySQLdb.connect (host = "localhost",
                        user = "testuser",
                        passwd = "testpass",
                        db = "test")
cursor = conn.cursor()

cursor.execute(...)
conn.commit()
</snippet></ROW><ROW><id>1387857</id><snippet>import os
resourcesdir = os.path.join(os.path.dirname(__file__), 'Resources')
</snippet></ROW><ROW><id>1387918</id><snippet>if !( extra_placeholders  is  None) :
</snippet></ROW><ROW><id>1387918</id><snippet> if extra_placeholders  is  not None :
</snippet></ROW><ROW><id>1388112</id><snippet>class Queries(models.Model):
    site = models.CharField(max_length=200, db_index=True)
    start_time = models.DateTimeField(null = True)
    finished = models.BooleanField(default=False)
</snippet></ROW><ROW><id>1388112</id><snippet>start_time</snippet></ROW><ROW><id>1388112</id><snippet>UPDATE site_queries
SET start_time = MAX(now(), COALESCE(now(), (
    SELECT MAX(start_time) + 1.0/3 FROM site_queries WHERE site = site_name
)))
WHERE id = object_id
</snippet></ROW><ROW><id>1388836</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = [9, 8, 7, 6, 5]
&gt;&gt;&gt; set(a) &amp; set(b)
{5}
</snippet></ROW><ROW><id>1388836</id><snippet>&gt;&gt;&gt; [i for i, j in zip(a, b) if i == j]
[5]
</snippet></ROW><ROW><id>1389048</id><snippet>__name__</snippet></ROW><ROW><id>1389048</id><snippet>"__main__"</snippet></ROW><ROW><id>1389048</id><snippet>if __name__ == '__main__':
    # Running as a script
</snippet></ROW><ROW><id>1389108</id><snippet>/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g
</snippet></ROW><ROW><id>1389108</id><snippet>$</snippet></ROW><ROW><id>1389108</id><snippet>\b</snippet></ROW><ROW><id>1389108</id><snippet>/([A-Z]+(?=\b|[A-Z][a-z])|[A-Z]?[a-z]+)/g
</snippet></ROW><ROW><id>1389216</id><snippet>from functools import wraps
import inspect

def initializer(fun):
   names, varargs, keywords, defaults = inspect.getargspec(fun)
   @wraps(fun)
   def wrapper(self, *args, **kargs):
       for name, arg in zip(names[1:], args) + kargs.items():
           setattr(self, name, arg)
       for i in range(len(defaults)):
           if not hasattr(self, names[-(i+1)]):
               setattr(self, names[-(i+1)], defaults[-(i + 1)])
       fun(self, *args, **kargs)
   return wrapper
</snippet></ROW><ROW><id>1389216</id><snippet>from functools import wraps
import inspect

def initializer(fun):
   names, varargs, keywords, defaults = inspect.getargspec(fun)
   @wraps(fun)
   def wrapper(self, *args, **kargs):
       for name, arg in zip(names[1:], args) + kargs.items():
           setattr(self, name, arg)
       fun(self, *args, **kargs)
   return wrapper
</snippet></ROW><ROW><id>1389216</id><snippet>from functools import wraps
import inspect

def initializer(fun):
    names, varargs, keywords, defaults = inspect.getargspec(fun)
    @wraps(fun)
    def wrapper(self, *args):
        for name, arg in zip(names[1:], args):
            setattr(self, name, arg)
        fun(self, *args)
    return wrapper

class process:
    @initializer
    def __init__(self, PID, PPID, cmd, FDs, reachable, user):
        pass
</snippet></ROW><ROW><id>1389216</id><snippet>&gt;&gt;&gt; c = process(1, 2, 3, 4, 5, 6)
&gt;&gt;&gt; c.PID
1
&gt;&gt;&gt; dir(c)
['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'
</snippet></ROW><ROW><id>1389493</id><snippet>socket</snippet></ROW><ROW><id>1389940</id><snippet>from pyparsing import *

integer = Regex(r"-?\d+").setName("integer")
integer.setParseAction(lambda tokens: int(tokens[0]))
floatnum = Regex(r"-?\d+\.\d*").setName("float")
floatnum.setParseAction(lambda tokens: float(tokens[0]))
dblQuotedString.setParseAction(removeQuotes)
COMMA = Suppress(',')
validLine = dblQuotedString + COMMA + dblQuotedString + COMMA + \
        integer + COMMA + floatnum + LineEnd()

tests = """\
"good data","good2",100,3.14
"good data" , "good2", 100, 3.14
bad, "good","good2",100,3.14
"bad","good2",100,3
"bad","good2",100.5,3
""".splitlines()

for t in tests:
    print t
    try:
        print validLine.parseString(t).asList()
    except ParseException, pe:
        print pe.markInputline('?')
        print pe.msg
    print
</snippet></ROW><ROW><id>1389940</id><snippet>"good data","good2",100,3.14
['good data', 'good2', 100, 3.1400000000000001]

"good data" , "good2", 100, 3.14
['good data', 'good2', 100, 3.1400000000000001]

bad, "good","good2",100,3.14
?bad, "good","good2",100,3.14
Expected string enclosed in double quotes

"bad","good2",100,3
"bad","good2",100,?3
Expected float

"bad","good2",100.5,3
"bad","good2",100?.5,3
Expected ","
</snippet></ROW><ROW><id>1389940</id><snippet>dblQuotedString.setParseAction(removeQuotes)
</snippet></ROW><ROW><id>1389940</id><snippet>comment = '#' + restOfline
validLine.ignore(comment)
</snippet></ROW><ROW><id>1389940</id><snippet>validLine = dblQuotedString("key") + COMMA + dblQuotedString("title") + COMMA + \
        integer("qty") + COMMA + floatnum("price") + LineEnd()
</snippet></ROW><ROW><id>1389940</id><snippet>data = validLine.parseString(t)
print "%(key)s: %(title)s, %(qty)d in stock at $%(price).2f" % data
print data.qty*data.price
</snippet></ROW><ROW><id>1390006</id><snippet>case</snippet></ROW><ROW><id>1390006</id><snippet>isinstance</snippet></ROW><ROW><id>1390016</id><snippet>inet_pton</snippet></ROW><ROW><id>1390016</id><snippet>inet_ntop</snippet></ROW><ROW><id>1390016</id><snippet>%eth0</snippet></ROW><ROW><id>1390016</id><snippet>getaddrinfo</snippet></ROW><ROW><id>1390016</id><snippet>inet_pton</snippet></ROW><ROW><id>1390016</id><snippet>getaddrinfo</snippet></ROW><ROW><id>1390016</id><snippet>inet_ntop</snippet></ROW><ROW><id>1390016</id><snippet>getaddrinfo</snippet></ROW><ROW><id>1390016</id><snippet>inet_pton</snippet></ROW><ROW><id>1390016</id><snippet>inet_ntop</snippet></ROW><ROW><id>1390016</id><snippet>::127.0.0.1</snippet></ROW><ROW><id>1390016</id><snippet>::IPv4</snippet></ROW><ROW><id>1390016</id><snippet>::ffff:IPv4</snippet></ROW><ROW><id>1390016</id><snippet>inet_pton</snippet></ROW><ROW><id>1390016</id><snippet>inet_ntop</snippet></ROW><ROW><id>1390016</id><snippet>inet_pton</snippet></ROW><ROW><id>1390016</id><snippet>inet_ntop</snippet></ROW><ROW><id>1390016</id><snippet>AI_NUMERICHOST</snippet></ROW><ROW><id>1390016</id><snippet>getaddrinfo</snippet></ROW><ROW><id>1390016</id><snippet>NI_NUMERCHOST</snippet></ROW><ROW><id>1390016</id><snippet>getnameinfo</snippet></ROW><ROW><id>1390428</id><snippet>from timeit import timeit

noc = 100
tocat = "a"
def f_call():
    pass

def loop_only():
    for i in range(noc):
        pass

def concat_method():
    s = ''
    for i in range(noc):
        s = s + tocat

def list_append():
    s=[]
    for i in range(noc):
        s.append(tocat)
    ''.join(s)

def list_append_opt():
    s = []
    zap = s.append
    for i in range(noc):
        zap(tocat)
    ''.join(s)

def list_comp():
    ''.join(tocat for i in range(noc))

def concat_method_buildup():
    s=''

def list_append_buildup():
    s=[]

def list_append_opt_buildup():
    s=[]
    zap = s.append

def function_time(f):
    return timeit(f,number=1000)*1000

f_callt = function_time(f_call)

def measure(ftuple,n,tc):
    global noc,tocat
    noc = n
    tocat = tc
    loopt = function_time(loop_only) - f_callt
    buildup_time = function_time(ftuple[1]) -f_callt if ftuple[1] else 0
    total_time = function_time(ftuple[0])
    return total_time, total_time - f_callt - buildup_time - loopt*ftuple[2]

functions ={'Concat Method\t\t':(concat_method,concat_method_buildup,True),
            'List append\t\t\t':(list_append,list_append_buildup,True),
            'Optimized list append':(list_append_opt,list_append_opt_buildup,True),
            'List comp\t\t\t':(list_comp,0,False)}

for i in range(5):
    print("\n\n%d concatenation\t\t\t\t10'a'\t\t\t\t 100'a'\t\t\t1000'a'"%10**i)
    print('-'*80)
    for (f,ft) in functions.items():
        print(f,"\t|",end="\t")
        for j in range(3):
            t = measure(ft,10**i,'a'*10**j)
            print("%.3f %.3f |" % t,end="\t")
        print()
</snippet></ROW><ROW><id>1390428</id><snippet>1 concatenation                 1'a'                  10'a'               100'a'
-------------------     ----------------------  -------------------  ----------------
List comp               |   2.310 2.168       |  2.298 2.156       |  2.304 2.162
Optimized list append   |   1.069 0.439       |  1.098 0.456       |  1.071 0.413
Concat Method           |   0.552 0.034       |  0.541 0.025       |  0.565 0.048
List append             |   1.099 0.557       |  1.099 0.552       |  1.094 0.552


10 concatenations                1'a'                  10'a'               100'a'
-------------------     ----------------------  -------------------  ----------------
List comp               |   3.366 3.224       |  3.473 3.331       |  4.058 3.916
Optimized list append   |   2.778 2.003       |  2.956 2.186       |  3.417 2.639
Concat Method           |   1.602 0.943       |  1.910 1.259       |  3.381 2.724
List append             |   3.290 2.612       |  3.378 2.699       |  3.959 3.282


100 concatenations               1'a'                  10'a'               100'a'
-------------------     ----------------------  -------------------  ----------------
List comp               |   15.900 15.758     |  17.086 16.944     |  20.260 20.118
Optimized list append   |   15.178 12.585     |  16.203 13.527     |  19.336 16.703
Concat Method           |   10.937 8.482      |  25.731 23.263     |  29.390 26.934
List append             |   20.515 18.031     |  21.599 19.115     |  24.487 22.003


1000 concatenations               1'a'                  10'a'               100'a'
-------------------     ----------------------  -------------------  ----------------
List comp               |   134.507 134.365   |  143.913 143.771   |  201.062 200.920
Optimized list append   |   112.018 77.525    |  121.487 87.419    |  151.063 117.059
Concat Method           |   214.329 180.093   |  290.380 256.515   |  324.572 290.720
List append             |   167.625 133.619   |  176.241 142.267   |  205.259 171.313


10000 concatenations              1'a'                  10'a'               100'a'
-------------------     ----------------------  -------------------  ----------------
List comp               |   1309.702 1309.560 |  1404.191 1404.049 |  2912.483 2912.341
Optimized list append   |   1042.271 668.696  |  1134.404 761.036  |  2628.882 2255.804
Concat Method           |   2310.204 1941.096 |  2923.805 2550.803 |  STUCK    STUCK
List append             |   1624.795 1251.589 |  1717.501 1345.137 |  3182.347 2809.233
</snippet></ROW><ROW><id>1390495</id><snippet>token.termText()</snippet></ROW><ROW><id>1390495</id><snippet>Analyzer</snippet></ROW><ROW><id>1390495</id><snippet>Term</snippet></ROW><ROW><id>1390666</id><snippet>s = "12,423,343.93"
f = float(s.replace(",", ""))
</snippet></ROW><ROW><id>1390988</id><snippet>class population(list):
    # custom methods here
</snippet></ROW><ROW><id>1390988</id><snippet>self.data</snippet></ROW><ROW><id>1390988</id><snippet>self</snippet></ROW><ROW><id>1391032</id><snippet>self.request.get('var_name')
</snippet></ROW><ROW><id>1391032</id><snippet>self.request.get_all()
</snippet></ROW><ROW><id>1391466</id><snippet>edits = [(search0, replace0), (search1, replace1), (search2, replace2)] # etc.
for search, replace in edits:
    s = s.replace(search, replace)
</snippet></ROW><ROW><id>1391466</id><snippet>str_replace</snippet></ROW><ROW><id>1391752</id><snippet>div</snippet></ROW><ROW><id>1391752</id><snippet>soup = BeautifulSoup(html)
thetd = soup.find('td', attrs={'class': 'author'})
print thetd.string
</snippet></ROW><ROW><id>1391752</id><snippet>####I want whatever is located here ###
</snippet></ROW><ROW><id>1391752</id><snippet>td</snippet></ROW><ROW><id>1391752</id><snippet>author</snippet></ROW><ROW><id>1391752</id><snippet>thetds = soup.findAll('td', attrs={'class': 'author'})
for thetd in thetds:
    print thetd.string
</snippet></ROW><ROW><id>1392549</id><snippet>import os
def get_size(start_path = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size

print get_size()
</snippet></ROW><ROW><id>1392549</id><snippet>sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))
</snippet></ROW><ROW><id>1392747</id><snippet>&lt;select name="movie"&gt;
    {% for movie in movies %}
        {% ifequal movie.id selected_movie.id %}
            &lt;option value="{{movie.key}}" selected="selected"&gt;Movie {{movie.id}}: {{movie.name}}&lt;/option&gt;
        {% else %}
            &lt;option value="{{movie.key}}"&gt;Movie {{movie.id}}: {{movie.name}}&lt;/option&gt;
        {% endifequal %}
    {% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>1393367</id><snippet>import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line
</snippet></ROW><ROW><id>1393367</id><snippet>import urllib2

for line in urllib2.urlopen(target_url):
    print line
</snippet></ROW><ROW><id>1393367</id><snippet>import urllib2

data = urllib2.urlopen("http://www.google.com").read(20000) # read only 20 000 chars
data = data.split("\n") # then split it into lines

for line in data:
    print line
</snippet></ROW><ROW><id>1393543</id><snippet>multiprocessing</snippet></ROW><ROW><id>1393543</id><snippet>from multiprocessing import Process, Pipe

def f(conn): #This code will be spawned as a new child process
    conn.send([42, None, 'hello']) #The child process sends a msg to the pipe
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,)) # prepare to spawn the child
    p.start() # spawn it
    print parent_conn.recv()   # prints "[42, None, 'hello']"
    p.join() #wait for child to exit
</snippet></ROW><ROW><id>1393590</id><snippet>#!/bin/bash

epylint "$1" 2&gt;/dev/null
pyflakes "$1"
pep8 --ignore=E221,E701,E202 --repeat "$1"
true
</snippet></ROW><ROW><id>1393590</id><snippet>(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-inplace))
       (local-file (file-relative-name
            temp-file
            (file-name-directory buffer-file-name))))
      (list "pycheckers"  (list local-file))))
   (add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" flymake-pyflakes-init)))
</snippet></ROW><ROW><id>1393959</id><snippet>def flatten(obj):
    if obj is None:
        return None
    elif hasattr(obj, '__dict__') and obj.__dict__:
        return dict([(k, flatten(v)) for (k, v) in obj.__dict__.items()])
    elif isinstance(obj, (dict,)):
        return dict([(k, flatten(v)) for (k, v) in obj.items()])
    elif isinstance(obj, (list,)):
        return [flatten(x) for x in obj]
    elif isinstance(obj, (tuple,)):
        return tuple([flatten(x) for x in obj])
    else:
        return obj
</snippet></ROW><ROW><id>1393959</id><snippet>class spam(object):
    eggs = []

x = spam()
x.eggs.add(...)
</snippet></ROW><ROW><id>1393959</id><snippet>class spam(object):
    eggs = None #// if you need this line at all though

x = spam()
x.eggs = []
x.eggs.add(...)
</snippet></ROW><ROW><id>1393959</id><snippet>spam</snippet></ROW><ROW><id>1393959</id><snippet>eggs</snippet></ROW><ROW><id>1394253</id><snippet>import subprocess
logfile = open("/dev/log", "w")
output, error = subprocess.Popen(
                    ["ls"], stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE).communicate()
logfile.write(output)
logfile.close()
</snippet></ROW><ROW><id>1394253</id><snippet>output, error = subprocess.Popen(
                    ["ls", "-l"], stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>1394253</id><snippet>command = "ls -la"
output, error = subprocess.Popen(
                    command.split(' '), stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>1394253</id><snippet>import subprocess
logfile = open("/dev/log", "w")
output, error = subprocess.Popen(
                    ["ls"], stdout=logfile,
                    stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>1394572</id><snippet>UserDict.UserDict</snippet></ROW><ROW><id>1394572</id><snippet>dict</snippet></ROW><ROW><id>1394572</id><snippet>collections</snippet></ROW><ROW><id>1394572</id><snippet>UserDict.DictMixin</snippet></ROW><ROW><id>1394572</id><snippet>__getitem__</snippet></ROW><ROW><id>1394572</id><snippet>keys</snippet></ROW><ROW><id>1394572</id><snippet>__setitem__</snippet></ROW><ROW><id>1394572</id><snippet>__delitem__</snippet></ROW><ROW><id>1394572</id><snippet>dict</snippet></ROW><ROW><id>1394572</id><snippet>update</snippet></ROW><ROW><id>1394572</id><snippet>get</snippet></ROW><ROW><id>1394572</id><snippet>DictMixin</snippet></ROW><ROW><id>1394572</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>1394572</id><snippet>collections.Mapping</snippet></ROW><ROW><id>1394609</id><snippet>lambda</snippet></ROW><ROW><id>1394609</id><snippet>def combiner(itemkey, methodname, *a, **k):
  def keyextractor(container):
    item = container[itemkey]
    method = getattr(item, methodname)
    return method(*a, **k)
  return keyextractor
</snippet></ROW><ROW><id>1394609</id><snippet>listofdicts.sort(key=combiner('name', 'lower'))</snippet></ROW><ROW><id>1394744</id><snippet>import urllib2
img = urllib2.urlopen("http://site.com/image.jpg").read()
</snippet></ROW><ROW><id>1394744</id><snippet>import StringIO
from PIL import Image
try:
    im = Image.open(StringIO.StringIO(img))
    im.verify()
except Exception, e:
    # The image is not valid
</snippet></ROW><ROW><id>1394744</id><snippet>import imghdr
imghdr.what('ignore', img)
</snippet></ROW><ROW><id>1394773</id><snippet>gtk.main</snippet></ROW><ROW><id>1394773</id><snippet>import pygtk
pygtk.require("2.0")
import gtk

class Display(object):

    def __init__(self):
        self.fail = "This will fail to display"
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.connect("destroy", lambda w: gtk.main_quit())
        window.show()            


class Test(object):

    def __init__(self, display):
        print display.fail

d = Display()
t = Test(d)

gtk.main()
</snippet></ROW><ROW><id>1394817</id><snippet>from math import sqrt

def IsPrime(n):
    if n==2: return True
    if n % 2 == 0: return False

    maxFactor = long(sqrt(n))
    i = 3
    while i &lt;= maxFactor:
        if n % i == 0: return False
        i += 2
    return True

n = 600851475143
factor = long(sqrt(n))
while factor &gt; 2:
    if n % factor == 0:
        if IsPrime(factor):
            print factor
            factor = 0
    factor -= 1
</snippet></ROW><ROW><id>1394994</id><snippet>try:
    # Win32
    from msvcrt import getch
except ImportError:
    # UNIX
    def getch():
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            return sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old)
</snippet></ROW><ROW><id>1395408</id><snippet>&gt;&gt;&gt; bin(30)[2:].zfill(8)
'00011110'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1395635</id><snippet>raw_input</snippet></ROW><ROW><id>1395635</id><snippet>a = input('Enter a number: ')
if a &gt; 0:
    print 'Positive'
elif a == 0:
    print 'Null'
elif a &lt; 0:
    print 'Negative'
</snippet></ROW><ROW><id>1395635</id><snippet>a = int( raw_input('Enter a number: '))
</snippet></ROW><ROW><id>1396199</id><snippet>python -i program.py
</snippet></ROW><ROW><id>1396271</id><snippet>FourGLints = GLint * 4
viewport = FourGLints(0, 1, 2, 3)
</snippet></ROW><ROW><id>1396657</id><snippet>pkg_resources</snippet></ROW><ROW><id>1396657</id><snippet>setuptools</snippet></ROW><ROW><id>1396657</id><snippet>"proj"</snippet></ROW><ROW><id>1396657</id><snippet>"code.py"</snippet></ROW><ROW><id>1396657</id><snippet>pkg_resources</snippet></ROW><ROW><id>1396657</id><snippet>from pkg_resources import resource_string, resource_listdir

# Itemize data files under proj/resources/images:
print resource_listdir('proj.resources.images', '')
# Get the data file bytes:
print resource_string('proj.resources.images', 'pic2.png').encode('base64')
</snippet></ROW><ROW><id>1396657</id><snippet>resource_stream()</snippet></ROW><ROW><id>1396657</id><snippet>proj.resources.images</snippet></ROW><ROW><id>1396657</id><snippet>"setup.py"</snippet></ROW><ROW><id>1396657</id><snippet>#!/usr/bin/env python

from setuptools import setup, find_packages

setup(name='proj',
      packages=find_packages(),
      package_data={'': ['*.png']})
</snippet></ROW><ROW><id>1396657</id><snippet>setup.py</snippet></ROW><ROW><id>1396657</id><snippet>code.py</snippet></ROW><ROW><id>1396657</id><snippet>proj</snippet></ROW><ROW><id>1396657</id><snippet>proj.resources</snippet></ROW><ROW><id>1396706</id><snippet>browser.set_debug_redirects(True)
browser.set_debug_responses(True)
browser.set_debug_http(True)
</snippet></ROW><ROW><id>1396706</id><snippet>def login(browser):
    browser.open(config.login_url)
    browser.select_form(nr=0)
    browser[config.username_field] = config.username
    browser[config.password_field] = config.password
    browser.submit()
    return browser
</snippet></ROW><ROW><id>1396730</id><snippet>c_s = c_char_p()
c_s = s
</snippet></ROW><ROW><id>1396730</id><snippet>ctypes</snippet></ROW><ROW><id>1396730</id><snippet>c_s</snippet></ROW><ROW><id>1396730</id><snippet>c_char_p</snippet></ROW><ROW><id>1396730</id><snippet>s</snippet></ROW><ROW><id>1396730</id><snippet>c_char_p</snippet></ROW><ROW><id>1396730</id><snippet>.value</snippet></ROW><ROW><id>1396730</id><snippet>c_s = c_char_p()
c_s.value = s
</snippet></ROW><ROW><id>1396735</id><snippet>csv.reader()</snippet></ROW><ROW><id>1396735</id><snippet>data = csv.reader(f)
</snippet></ROW><ROW><id>1396735</id><snippet>csv.reader()</snippet></ROW><ROW><id>1397323</id><snippet>profiles = [r.profile for r in thingie.relation_set.all()]
</snippet></ROW><ROW><id>1397323</id><snippet>relation_values = thingie.relation_set.all().values_list('pk', flat=True)
profiles = Profile.objects.filter(relation__in=relation_values)
</snippet></ROW><ROW><id>1397323</id><snippet>set(profiles)</snippet></ROW><ROW><id>1397323</id><snippet>distinct()</snippet></ROW><ROW><id>1397382</id><snippet>curses.wrapper(lambda _: curses.tigetnum('cols'))
</snippet></ROW><ROW><id>1397382</id><snippet>import sys

def colprint(totwidth, table):
  numcols = max(len(row) for row in table)
  # ensure all rows have &gt;= numcols columns, maybe empty
  padded = [row+numcols*('',) for row in table]
  # compute col widths, including separating space (except for last one)
  widths = [ 1 + max(len(x) for x in column) for column in zip(*padded)]
  widths[-1] -= 1
  # drop or truncate columns from the right in order to fit
  while sum(widths) &gt; totwidth:
    mustlose = sum(widths) - totwidth
    if widths[-1] &lt;= mustlose:
      del widths[-1]
    else:
      widths[-1] -= mustlose
      break
  # and finally, the output phase!
  for row in padded:
    for w, i in zip(widths, row):
      sys.stdout.write('%*s' % (-w, i[:w]))
    sys.stdout.write('\n')
</snippet></ROW><ROW><id>1397416</id><snippet>__copy__</snippet></ROW><ROW><id>1397416</id><snippet>copy.copy</snippet></ROW><ROW><id>1397416</id><snippet>__deepcopy__</snippet></ROW><ROW><id>1397416</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>1397416</id><snippet>__getstate__</snippet></ROW><ROW><id>1397416</id><snippet>__setstate__</snippet></ROW><ROW><id>1397841</id><snippet>raw_input()</snippet></ROW><ROW><id>1397841</id><snippet>input()</snippet></ROW><ROW><id>1397841</id><snippet># Python 2.5.4
&gt;&gt;&gt; a = raw_input()
3, 4, 5
&gt;&gt;&gt; a
'3, 4, 5'
&gt;&gt;&gt; b = a.split(', ')
&gt;&gt;&gt; b
['3', '4', '5']
&gt;&gt;&gt; [s.strip() for s in raw_input().split(",")] # one liner
3, 4, 5
['3', '4', '5']
</snippet></ROW><ROW><id>1397841</id><snippet>input</snippet></ROW><ROW><id>1397841</id><snippet>a</snippet></ROW><ROW><id>1397841</id><snippet>input</snippet></ROW><ROW><id>1397841</id><snippet>import string</snippet></ROW><ROW><id>1397841</id><snippet>&gt;&gt;&gt; l = (1,2,3,4,5)
&gt;&gt;&gt; a,b,c,d,e = l
&gt;&gt;&gt; e
5
</snippet></ROW><ROW><id>1398059</id><snippet>dir(obj)
</snippet></ROW><ROW><id>1398059</id><snippet>class Example(object):
    bool143 = True
    bool2 = True
    blah = False
    foo = True
    foobar2000 = False


members = [attr for attr in dir(Example()) if not callable(attr) and not attr.startswith("__")]
print members
</snippet></ROW><ROW><id>1398059</id><snippet>['blah', 'bool143', 'bool2', 'foo', 'foobar2000']
</snippet></ROW><ROW><id>1398178</id><snippet>&gt;&gt;&gt; x = None
&gt;&gt;&gt; print type(x)
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; x = "text"
&gt;&gt;&gt; print type(x)
&lt;type 'str'&gt;
&gt;&gt;&gt; x = 42
&gt;&gt;&gt; print type(x)
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>1398652</id><snippet>get_services</snippet></ROW><ROW><id>1398652</id><snippet>def get_services(self):
    return "\n".join([s.servicename for s in self.services.all()])
</snippet></ROW><ROW><id>1398652</id><snippet>\n</snippet></ROW><ROW><id>1398652</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>1398729</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; from pytz import timezone
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; utc = pytz.utc
&gt;&gt;&gt; utc.zone
'UTC'
&gt;&gt;&gt; eastern = timezone('US/Eastern')
&gt;&gt;&gt; eastern.zone
'US/Eastern'
&gt;&gt;&gt; amsterdam = timezone('Europe/Amsterdam')
&gt;&gt;&gt; fmt = '%Y-%m-%d %H:%M:%S %Z%z'

&gt;&gt;&gt; loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))
&gt;&gt;&gt; print loc_dt.strftime(fmt)
2002-10-27 06:00:00 EST-0500

&gt;&gt;&gt; ams_dt = loc_dt.astimezone(amsterdam)
&gt;&gt;&gt; ams_dt.strftime(fmt)
'2002-10-27 12:00:00 CET+0100'
</snippet></ROW><ROW><id>1398981</id><snippet>from google.appengine.ext import db
from google.appengine.ext import webapp
from google.appengine.ext.webapp import run_wsgi_app

class QueueItem(db.Model):
  created = db.DateTimeProperty(required=True, auto_now_add=True)
  data = db.BlobProperty(required=True)

  @staticmethod
  def push(data):
    """Add a new queue item."""
    return QueueItem(data=data).put()

  @staticmethod
  def pop():
    """Pop the oldest item off the queue."""
    def _tx_pop(candidate_key):
      # Try and grab the candidate key for ourselves. This will fail if
      # another task beat us to it.
      task = QueueItem.get(candidate_key)
      if task:
        task.delete()
      return task
    # Grab some tasks and try getting them until we find one that hasn't been
    # taken by someone else ahead of us
    while True:
      candidate_keys = QueueItem.all(keys_only=True).order('created').fetch(10)
      if not candidate_keys:
        # No tasks in queue
        return None
      for candidate_key in candidate_keys:
        task = db.run_in_transaction(_tx_pop, candidate_key)
        if task:
          return task

class QueueHandler(webapp.RequestHandler):
  def get(self):
    """Pop a request off the queue and return it."""
    self.response.headers['Content-Type'] = 'application/x-www-form-urlencoded'
    task = QueueItem.pop()
    if not task:
      self.error(404)
    else:
      self.response.out.write(task.data)

  def post(self):
    """Add a request to the queue."""
    QueueItem.push(self.request.body)
</snippet></ROW><ROW><id>1399537</id><snippet>CREATE TABLE Table1 (jd, isotime);

CREATE TRIGGER trigger_name_1 AFTER INSERT ON Table1
BEGIN
    UPDATE Table1 SET jd = julianday(isotime) WHERE rowid = last_insert_rowid();
END;

CREATE TRIGGER trigger_name_2 AFTER UPDATE OF isotime ON Table1
BEGIN
    UPDATE Table1 SET jd = julianday(isotime) WHERE rowid = old.rowid;
END;
</snippet></ROW><ROW><id>1399576</id><snippet>from some.other.pkg import twitter
</snippet></ROW><ROW><id>1399813</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>1399813</id><snippet>south</snippet></ROW><ROW><id>1400006</id><snippet>google</snippet></ROW><ROW><id>1400006</id><snippet>google.appengine</snippet></ROW><ROW><id>1400026</id><snippet>int</snippet></ROW><ROW><id>1400026</id><snippet>struct</snippet></ROW><ROW><id>1400026</id><snippet>@</snippet></ROW><ROW><id>1400026</id><snippet>fromstring</snippet></ROW><ROW><id>1400026</id><snippet>tostring</snippet></ROW><ROW><id>1400026</id><snippet>byteswap</snippet></ROW><ROW><id>1400622</id><snippet>del l[:]
</snippet></ROW><ROW><id>1400622</id><snippet>l1 = [1, 2, 3]
l2 = l1
del l1[:]
print(l2)
</snippet></ROW><ROW><id>1400622</id><snippet>l[:] = []
</snippet></ROW><ROW><id>1400622</id><snippet>l = []</snippet></ROW><ROW><id>1400622</id><snippet>l</snippet></ROW><ROW><id>1400881</id><snippet>from sqlalchemy import Column, Integer, String, Table, create_engine
from sqlalchemy import orm, MetaData, Column, ForeignKey
from sqlalchemy.orm import relation, mapper, sessionmaker
from sqlalchemy.orm.collections import column_mapped_collection
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite:///:memory:', echo=True)
Base = declarative_base(bind=engine)

class Note(Base):
    __tablename__ = 'notes'

    id_item = Column(Integer, ForeignKey('items.id'), primary_key=True)
    name = Column(String(20), primary_key=True)
    value = Column(String(100))

    def __init__(self, name, value):
        self.name = name
        self.value = value        

class Item(Base):
    __tablename__ = 'items'
    id = Column(Integer, primary_key=True)
    name = Column(String(20))
    description = Column(String(100))
    _notesdict = relation(Note, 
                          collection_class=column_mapped_collection(Note.name))
    notes = association_proxy('_notesdict', 'value', creator=Note)

    def __init__(self, name, description=''):
        self.name = name
        self.description = description

Base.metadata.create_all()
</snippet></ROW><ROW><id>1400881</id><snippet>Session = sessionmaker(bind=engine)
s = Session()

i = Item('ball', 'A round full ball')
i.notes['color'] = 'orange'
i.notes['size'] = 'big'
i.notes['data'] = 'none'

s.add(i)
s.commit()
print i.notes
</snippet></ROW><ROW><id>1400881</id><snippet>{u'color': u'orange', u'data': u'none', u'size': u'big'}
</snippet></ROW><ROW><id>1400881</id><snippet>for note in s.query(Note):
    print note.id_item, note.name, note.value
</snippet></ROW><ROW><id>1400881</id><snippet>1 color orange
1 data none
1 size big
</snippet></ROW><ROW><id>1400885</id><snippet>In [1]: from PyQt4 import QtCore
In [2]: s = QtCore.QString('foo')
In [3]: s
Out[3]: PyQt4.QtCore.QString(u'foo')
</snippet></ROW><ROW><id>1401171</id><snippet>default</snippet></ROW><ROW><id>1401171</id><snippet>item_unit_of_measure = models.ForeignKey(UnitOfMeasure, default=0)
</snippet></ROW><ROW><id>1401171</id><snippet>null=True, blank=True</snippet></ROW><ROW><id>1401191</id><snippet>from pylab import *

figure(0)
plot([1,2,3])

figure(1)
plot([10, 20, 30])

figure(0)
plot([4, 5, 6])

figure(1)
plot([40, 50, 60])

show()
</snippet></ROW><ROW><id>1401438</id><snippet>wxHtmlWindow::LoadPage()</snippet></ROW><ROW><id>1401438</id><snippet>// store[s the current] scroll position into history item:
int x, y;
GetViewStart(&amp;x, &amp;y);
(*m_History)[m_HistoryPos].SetPos(y);
</snippet></ROW><ROW><id>1401438</id><snippet>wxHtmlWindow::HistoryBack()</snippet></ROW><ROW><id>1401438</id><snippet>Scroll(0, (*m_History)[m_HistoryPos].GetPos());
Refresh();
</snippet></ROW><ROW><id>1401565</id><snippet>from PIL import Image

v_image = Image.open(file)
v_image.verify()
</snippet></ROW><ROW><id>1401828</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>1401828</id><snippet>dist = numpy.linalg.norm(a-b)
</snippet></ROW><ROW><id>1401900</id><snippet>inspect.getmro(cls)</snippet></ROW><ROW><id>1401900</id><snippet>NewClass.mro()</snippet></ROW><ROW><id>1401900</id><snippet>&gt;&gt;&gt; class A(object):
&gt;&gt;&gt;     pass
&gt;&gt;&gt;
&gt;&gt;&gt; class B(A):
&gt;&gt;&gt;     pass
&gt;&gt;&gt;
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmro(B)
(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>1402081</id><snippet>width = 10
str_number = str(ord('a'))
print 'a%s' % (str_number.rjust(width))
</snippet></ROW><ROW><id>1402256</id><snippet>.clear()</snippet></ROW><ROW><id>1402381</id><snippet>defaultdict</snippet></ROW><ROW><id>1402381</id><snippet>itertools.count().next</snippet></ROW><ROW><id>1402381</id><snippet>from itertools import count
from collections import defaultdict

def create_lookup_list(data, domains):
    domain_keys = defaultdict(lambda:defaultdict(count().next))
    out = []
    for row in data:
        out.append(tuple(domain_keys[dom][val] for val, dom in zip(row, domains)))
    lookup_table = dict((k, sorted(d, key=d.get)) for k, d in domain_keys.items())
    return out, lookup_table
</snippet></ROW><ROW><id>1402381</id><snippet>count().next</snippet></ROW><ROW><id>1402381</id><snippet>count().__next__</snippet></ROW><ROW><id>1402381</id><snippet>lambda: next(count())</snippet></ROW><ROW><id>1403485</id><snippet>try</snippet></ROW><ROW><id>1403485</id><snippet>except</snippet></ROW><ROW><id>1403485</id><snippet>with</snippet></ROW><ROW><id>1403485</id><snippet>__name__</snippet></ROW><ROW><id>1403485</id><snippet>__doc__</snippet></ROW><ROW><id>1403485</id><snippet>functools.wraps</snippet></ROW><ROW><id>1403485</id><snippet>wraps</snippet></ROW><ROW><id>1403485</id><snippet>set</snippet></ROW><ROW><id>1403485</id><snippet>collections.defaultdict(int)</snippet></ROW><ROW><id>1403485</id><snippet>threading.local</snippet></ROW><ROW><id>1403485</id><snippet>identifier</snippet></ROW><ROW><id>1403485</id><snippet>def</snippet></ROW><ROW><id>1403485</id><snippet>threadlocal_var</snippet></ROW><ROW><id>1403485</id><snippet>import collections
import functools
import threading

threadlocal = threading.local()

def threadlocal_var(varname, factory, *a, **k):
  v = getattr(threadlocal, varname, None)
  if v is None:
    v = factory(*a, **k)
    setattr(threadlocal, varname, v)
  return v

def monitoring(identifier=None, unique=True, use_function=False):
  def inner(f):
    assert (not use_function) or (identifier is None)
    if identifier is None:
      if use_function:
        identifier = f
      else:
        identifier = f.__name__
    if unique:
      monitored = threadlocal_var('uniques', set)
      if identifier in monitored:
        raise ValueError('Duplicate monitoring identifier %r' % identifier)
      monitored.add(identifier)
    counts = threadlocal_var('counts', collections.defaultdict, int)
    @functools.wraps(f)
    def wrapper(*a, **k):
      counts[identifier] += 1
      try:
        return f(*a, **k)
      finally:
        counts[identifier] -= 1
    return wrapper
  return inner
</snippet></ROW><ROW><id>1403514</id><snippet>doctest</snippet></ROW><ROW><id>1403514</id><snippet>import doctest</snippet></ROW><ROW><id>1403514</id><snippet>doctest.__file__</snippet></ROW><ROW><id>1403514</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>1403514</id><snippet>doctest</snippet></ROW><ROW><id>1403514</id><snippet>example.py</snippet></ROW><ROW><id>1403693</id><snippet>&gt;&gt;&gt; l = range(165)
&gt;&gt;&gt; l[0::10]
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]
</snippet></ROW><ROW><id>1403693</id><snippet>$ python -m timeit -s "l = range(1000)" "l1 = [x for x in l if x % 10 == 0]"
1000 loops, best of 3: 525 usec per loop
$ python -m timeit -s "l = range(1000)" "l1 = l[0::10]"
100000 loops, best of 3: 4.02 usec per loop
</snippet></ROW><ROW><id>1403694</id><snippet>def backup_to_csv(request):

    output = StringIO.StringIO() ## temp output file
    writer = csv.writer(output, dialect='excel')

    #code for writing csv file go here...

    response = HttpResponse(mimetype='application/zip')
    response['Content-Disposition'] = 'attachment; filename=backup.csv.zip'

    z = zipfile.ZipFile(response,'w')   ## write zip to response
    z.writestr("filename.csv", output.getvalue())  ## write csv file to zip

    return response
</snippet></ROW><ROW><id>1403724</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class FileBrowser(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)

        self.setGeometry(0, 0, 920, 780)
        self.initClasses()
        # changes
        layout = QVBoxLayout(self) # create layout out
        layout.addWidget(self.groupBox1) # add widget
        layout.addWidget(self.labelGroup1_ShotInfo) # add widget
        # set my layout to make sure contents are correctly rendered
        self.setLayout(layout) 

    def initClasses(self):
        # GroupBox
        self.groupBox1 = GroupBox(self, QRect(20, 10, 191, 131),  'Shot Info')

        # Label
        self.labelGroup1_ShotInfo = Label(self, QRect(10, 26, 52, 15),  'Film')
</snippet></ROW><ROW><id>1404379</id><snippet> result = conn.execute(RSSEntries.insert(), {'feed_id': id, 'short_url': tinyurl,
        'content': content, 'hashtags': hashtags, 'date': date})
 entry_id = result.last_insert_ids()[0]
</snippet></ROW><ROW><id>1404379</id><snippet>tags = tag_table
tag_id_query = select([tags.c.tagname, tags.c.id], tags.c.tagname.in_(hashtags))
tag_ids = dict(conn.execute(tag_id_query).fetchall())
for tag in hashtags:
    if tag not in tag_ids:
        result = conn.execute(tags.insert(), {'tagname': tag})
        tag_ids[tag] = result.last_inserted_ids()[0]
</snippet></ROW><ROW><id>1404379</id><snippet>feedtag_table</snippet></ROW><ROW><id>1404379</id><snippet>conn.execute(feedtag_table.insert(),
    [{'feedid': entry_id, 'tagid': tag_ids[tag]} for tag in hashtags])
</snippet></ROW><ROW><id>1404520</id><snippet>cgi.assign = ( ".py" =&gt; "/usr/bin/python" )
</snippet></ROW><ROW><id>1404527</id><snippet>autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab
</snippet></ROW><ROW><id>1404707</id><snippet>shell=True</snippet></ROW><ROW><id>1404707</id><snippet>subprocess</snippet></ROW><ROW><id>1404707</id><snippet>subprocess.Popen("wmctrl -lp | sed /gedit/ '{print $1}'", shell=True, ...
</snippet></ROW><ROW><id>1404767</id><snippet>os.sep</snippet></ROW><ROW><id>1405701</id><snippet>resize</snippet></ROW><ROW><id>1405701</id><snippet>image = image.resize((x, y), Image.ANTIALIAS)
</snippet></ROW><ROW><id>1405701</id><snippet>quality_val = 90
image.save(filename, 'JPEG', quality=quality_val)
</snippet></ROW><ROW><id>1405701</id><snippet>models.py</snippet></ROW><ROW><id>1405914</id><snippet># If secondList not initialized...
secondList = []
for x in firstList:
    firstFunc(x)
    secondFunc(x)
    process(x)
    if not x.discard:
        secondList.append(x)
</snippet></ROW><ROW><id>1405914</id><snippet>for x in firstList:
    firstFunc(x)
    secondFunc(x)
secondList = [ x for x in firstList if not process(x).discard ]
</snippet></ROW><ROW><id>1405914</id><snippet>interimList = [ process(x) for x in firstList ]
secondList = [ x for x in interimList if not x.discard ]
</snippet></ROW><ROW><id>1405962</id><snippet>from google.appengine.ext import db
from google.appengine.ext import webapp
from google.appengine.ext.webapp import run_wsgi_app

class ShortLink(db.Model):
  url = db.TextProperty(required=True)

class CreateLinkHandler(webapp.RequestHandler):
  def post(self):
    link = ShortLink(url=self.request.POST['url'])
    link.put()
    self.response.out.write("%s/%d" % (self.request.host_url, link.key().id())

  def get(self):
    self.response.out.write('&lt;form method="post" action="/create"&gt;&lt;input type="text" name="url"&gt;&lt;input type="submit"&gt;&lt;/form&gt;')

class VisitLinkHandler(webapp.RequestHandler):
  def get(self, id):
    link = ShortLink.get_by_id(int(id))
    if not link:
      self.error(404)
    else:
      self.redirect(link.url)

application = webapp.WSGIApplication([
    ('/create', CreateLinkHandler),
    ('/(\d+)', VisitLinkHandler),
])

def main():
  run_wsgi_app(application)

if __name__ == "__main__":
  main()
</snippet></ROW><ROW><id>1405971</id><snippet>sys.maxsize</snippet></ROW><ROW><id>1405971</id><snippet>$ python-32 -c 'import sys;print("%x" % sys.maxsize, sys.maxsize &gt; 2**32)'
('7fffffff', False)
$ python-64 -c 'import sys;print("%x" % sys.maxsize, sys.maxsize &gt; 2**32)'
('7fffffffffffffff', True)
</snippet></ROW><ROW><id>1405971</id><snippet>sys.maxsize</snippet></ROW><ROW><id>1405971</id><snippet>$ python-32 -c 'import struct;print( 8 * struct.calcsize("P"))'
32
$ python-64 -c 'import struct;print( 8 * struct.calcsize("P"))'
64
</snippet></ROW><ROW><id>1405971</id><snippet>platform.architecture()</snippet></ROW><ROW><id>1405971</id><snippet>$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit True
$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit False
</snippet></ROW><ROW><id>1406182</id><snippet>x</snippet></ROW><ROW><id>1406182</id><snippet>(x.month-1)//3</snippet></ROW><ROW><id>1406182</id><snippet>-1</snippet></ROW><ROW><id>1406182</id><snippet>.month</snippet></ROW><ROW><id>1406182</id><snippet>for m in range(1, 13):
  print m//4 + 1,
print
</snippet></ROW><ROW><id>1406182</id><snippet>1 1 1 2 2 2 2 3 3 3 3 4</snippet></ROW><ROW><id>1406182</id><snippet>for m in range(1, 13):
  print (m-1)//3 + 1,
print
</snippet></ROW><ROW><id>1406182</id><snippet>1 1 1 2 2 2 3 3 3 4 4 4</snippet></ROW><ROW><id>1406182</id><snippet>datetools</snippet></ROW><ROW><id>1406393</id><snippet>self.canvas.coords(name)
</snippet></ROW><ROW><id>1406393</id><snippet>map object</snippet></ROW><ROW><id>1406393</id><snippet>map</snippet></ROW><ROW><id>1406393</id><snippet>coords</snippet></ROW><ROW><id>1406393</id><snippet>temp_ids = self.canvas.find_overlapping(*tuple(self.canvas.coords(name)))
</snippet></ROW><ROW><id>1406526</id><snippet>from textwrap import wrap
'\n'.join(['\n'.join(wrap(block, width=50)) for block in text.splitlines()])

&gt;&gt;&gt; print '\n'.join(['\n'.join(wrap(block, width=50)) for block in text.splitlines()])

Within eight hours of Wilson's outburst, his
Democratic opponent, former-Marine Rob Miller, had
received nearly 3,000 individual contributions
raising approximately $100,000, the Democratic
Congressional Campaign Committee said.

Wilson, a conservative Republican who promotes a
strong national defense and reining in the size of
government, won a special election to the House in
2001, succeeding the late Rep. Floyd Spence,
R-S.C. Wilson had worked on Spence's staff on
Capitol Hill and also had served as an intern for
Sen. Strom Thurmond
</snippet></ROW><ROW><id>1407136</id><snippet>inspectdb</snippet></ROW><ROW><id>1407457</id><snippet>split()</snippet></ROW><ROW><id>1407457</id><snippet>s = "VALUE 100 234 568 9233 119"
a = s.split()
if a[0] == "VALUE":
    print [int(x) for x in a[1:]]
</snippet></ROW><ROW><id>1407457</id><snippet>"VALUE"</snippet></ROW><ROW><id>1407457</id><snippet>int(x)</snippet></ROW><ROW><id>1407572</id><snippet>def rule(x):
    return bin(x)[2:].zfill(8)
</snippet></ROW><ROW><id>1407572</id><snippet>None</snippet></ROW><ROW><id>1407572</id><snippet>return</snippet></ROW><ROW><id>1407700</id><snippet>withdraw</snippet></ROW><ROW><id>1407700</id><snippet>import Tkinter as tk
root = tk.Tk()
root.withdraw()
</snippet></ROW><ROW><id>1407700</id><snippet>root.deiconify()
</snippet></ROW><ROW><id>1407835</id><snippet>class GroupWriteRotatingFileHandler(handlers.RotatingFileHandler):

    def doRollover(self):
        """
        Override base class method to make the new log file group writable.
        """
        # Rotate the file first.
        handlers.RotatingFileHandler.doRollover(self)

        # Add group write to the current permissions.
        currMode = os.stat(self.baseFilename).st_mode
        os.chmod(self.baseFilename, currMode | stat.S_IWGRP)
</snippet></ROW><ROW><id>1407835</id><snippet>from mynamespace.logging import custom_handlers
logging.custom_handlers = custom_handlers
</snippet></ROW><ROW><id>1408008</id><snippet>Popen("/home/user/foo" + " arg")

&gt;&gt;&gt; Popen("foo arg", shell=False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/subprocess.py", line 595, in __init__
    errread, errwrite)
  File "/usr/lib/python2.6/subprocess.py", line 1092, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
</snippet></ROW><ROW><id>1408052</id><snippet>import urllib
from xml.dom import minidom

sock = urllib.urlopen('http://www.google.com/ig/api?weather=Munich,Germany&amp;hl=de')
s = sock.read()
encoding = sock.headers['Content-type'].split('charset=')[1] # iso-8859-1
doc = minidom.parseString(s.decode(encoding).encode('utf-8'))
</snippet></ROW><ROW><id>1408178</id><snippet>#Code originally posted by Alex Martelli
#Modified to use standard Python variable name conventions
import threading
threadlocal = threading.local()    

def threadlocal_var(varname, factory, *args, **kwargs):
  v = getattr(threadlocal, varname, None)
  if v is None:
    v = factory(*args, **kwargs)
    setattr(threadlocal, varname, v)
  return v
</snippet></ROW><ROW><id>1408304</id><snippet>NoneType</snippet></ROW><ROW><id>1408304</id><snippet>None</snippet></ROW><ROW><id>1408304</id><snippet>branch</snippet></ROW><ROW><id>1408304</id><snippet>None</snippet></ROW><ROW><id>1408304</id><snippet>t2</snippet></ROW><ROW><id>1408304</id><snippet>return</snippet></ROW><ROW><id>1408304</id><snippet>None</snippet></ROW><ROW><id>1408334</id><snippet>p = subprocess.Popen(args = "myprog.exe" + " " +
                     str(input1) + " " +
                     str(input2) + " " +
                     str(input3) + " " +
                     " ".join(strpoints), stdout = subprocess.PIPE)
</snippet></ROW><ROW><id>1408431</id><snippet>decorator</snippet></ROW><ROW><id>1408431</id><snippet>functools.wraps()</snippet></ROW><ROW><id>1408431</id><snippet>*args</snippet></ROW><ROW><id>1408431</id><snippet>**kw</snippet></ROW><ROW><id>1408431</id><snippet>def keep_none(func):
    def _exec(*args, **kw):
        return None if args[0] is None else func(*args, **kw)

    return _exec
</snippet></ROW><ROW><id>1408431</id><snippet>def keep_none(func):
    """Wraps a function which expects a value as the first argument, and
    ensures the function won't get called with *None*.  If it is, this 
    will return *None*.

    &gt;&gt;&gt; def f(x):
    ...     return x + 5
    &gt;&gt;&gt; f(1)
    6
    &gt;&gt;&gt; f(None) is None
    Traceback (most recent call last):
        ...
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
    &gt;&gt;&gt; f = keep_none(f)
    &gt;&gt;&gt; f(1)
    6
    &gt;&gt;&gt; f(None) is None
    True"""

    @wraps(func)
    def _exec(value, *args, **kw):
        return None if value is None else func(value, *args, **kw)

    return _exec
</snippet></ROW><ROW><id>1408435</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>1408435</id><snippet>newaxis</snippet></ROW><ROW><id>1408465</id><snippet>self.connect(self.horizontalHeader(), SIGNAL('sectionClicked(int)'), self.onClick)
</snippet></ROW><ROW><id>1408476</id><snippet>import threading
cond = threading.Condition(threading.Lock())
cond.acquire()
cond.wait(None)
print "done"
</snippet></ROW><ROW><id>1408476</id><snippet>    results = pool.map(slowly_square, range(40))
</snippet></ROW><ROW><id>1408476</id><snippet>    results = pool.map_async(slowly_square, range(40)).get(9999999)
</snippet></ROW><ROW><id>1408498</id><snippet>connectionMade</snippet></ROW><ROW><id>1408498</id><snippet>connectionLost</snippet></ROW><ROW><id>1408498</id><snippet>Deferred</snippet></ROW><ROW><id>1408498</id><snippet>adbapi</snippet></ROW><ROW><id>1408829</id><snippet>#include &lt;stdio.h&gt;
setvbuf(stdout, NULL, _IOLBF, 0);
</snippet></ROW><ROW><id>1408829</id><snippet>#include &lt;stdio.h&gt;
setlinebuf(stdout);
</snippet></ROW><ROW><id>1408829</id><snippet>setvbuf</snippet></ROW><ROW><id>1408829</id><snippet>fflush(stdout)</snippet></ROW><ROW><id>1409284</id><snippet>def actual_kwargs():
    """
    Decorator that provides the wrapped function with an attribute 'actual_kwargs'
    containing just those keyword arguments actually passed in to the function.
    """
    def decorator(function):
        def inner(*args, **kwargs):
            inner.actual_kwargs = kwargs
            return function(*args, **kwargs)
        return inner
    return decorator


if __name__ == "__main__":

    @actual_kwargs()
    def func(msg, a=None, b=False, c='', d=0):
        print msg
        for arg, val in sorted(func.actual_kwargs.iteritems()):
            print '  %s: %s' % (arg, val)

    func("I'm only passing a", a='a')
    func("Here's b and c", b=True, c='c')
    func("All defaults", a=None, b=False, c='', d=0)
    func("Nothin'")
    try:
        func("Invalid kwarg", e="bogon")
    except TypeError, err:
        print 'Invalid kwarg\n  %s' % err
</snippet></ROW><ROW><id>1409496</id><snippet>argstr = ", ".join(arglist)
fakefunc = "def func(%s):\n    return real_func(%s)\n" % (argstr, argstr)
fakefunc_code = compile(fakefunc, "fakesource", "exec")
fakeglobals = {}
eval(fakefunc_code, {"real_func": f}, fakeglobals)
f_with_good_sig = fakeglobals["func"]

help(f)               # f(*args, **kwargs)
help(f_with_good_sig) # func(foo, bar, baz)
</snippet></ROW><ROW><id>1409995</id><snippet>import borg
import borg2

if __name__ == "__main__":
    borg.fct_ab()
    borg2.fct_c()
</snippet></ROW><ROW><id>1409995</id><snippet>borg.Borg 10438672
borg.Borg 10438672
Bjorn
borg.Borg 10438672
Bjorn
</snippet></ROW><ROW><id>1410118</id><snippet>defaultdict</snippet></ROW><ROW><id>1410118</id><snippet>collections</snippet></ROW><ROW><id>1410118</id><snippet>defaultdict</snippet></ROW><ROW><id>1410118</id><snippet>dict2</snippet></ROW><ROW><id>1410118</id><snippet>from collections import defaultdict
dict1 = dict({'a':[1,2,3], 'b':[1,2,3,4], 'c':[1,2]})
dict2 = defaultdict(list)
for key, values in dict1.items():
    for value in values:
        # The list for dict2[value] is created automatically
        dict2[value].append(key)
</snippet></ROW><ROW><id>1410118</id><snippet>KeyError</snippet></ROW><ROW><id>1410118</id><snippet>dict2 = dict(dict2)</snippet></ROW><ROW><id>1410365</id><snippet>strip_accents</snippet></ROW><ROW><id>1410365</id><snippet>def strip_accents(s):
   return ''.join((c for c in unicodedata.normalize('NFD', unicode(s)) if unicodedata.category(c) != 'Mn'))

&gt;&gt;&gt; strip_accents(u'Östblocket')
'Ostblocket'
</snippet></ROW><ROW><id>1410439</id><snippet>for x in xrange(W):
	for y in xrange(H):
		p = img_src.getpixel(x, y)
		img_dest.setpixel(H-y-1, W-x-1)
</snippet></ROW><ROW><id>1410442</id><snippet>TO_HIDE_ATTRS = {'class': 'hidden'}
class GalleryAdminForm(forms.ModelForm):
    auto_id=False
    order = forms.CharField(widget=forms.TextInput(attrs=TO_HIDE_ATTRS))
</snippet></ROW><ROW><id>1410442</id><snippet>$(document).ready(function(){
    $('tr:has(.hidden)').hide();
});
</snippet></ROW><ROW><id>1410442</id><snippet>$(document).ready(function(){
    $('{{ form_field_container }}:has(.hidden)').hide();
});
</snippet></ROW><ROW><id>1410442</id><snippet>form_field_container</snippet></ROW><ROW><id>1410442</id><snippet>    &lt;form&gt;
        &lt;span&gt;{{ field.label_tag }} {{ field }}&lt;/span&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>1410442</id><snippet>'form_field_container': 'span'
</snippet></ROW><ROW><id>1410674</id><snippet>set iskeyword+=:</snippet></ROW><ROW><id>1410764</id><snippet>sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sck.connect((adr, prt)
for i in range(nb):
    sck.send('question %i'%i)
    answer=sck.recv(4096)
    print 'answer %i : %s' % (%i, answer)
sck.close()
</snippet></ROW><ROW><id>1410764</id><snippet>for i in range(nb):
    sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sck.connect((adr, prt)

    while sck.error() == NO_SOCKETS_AVAIL:
        sleep 250 milliseconds
        sck.connect((adr, prt)

    sck.send('question %i'%i)
    sck.shutdown(SHUT_WR)
    answer=sck.recv(4096)
    print 'answer %i : %s' % (%i, answer)
    sck.close()
</snippet></ROW><ROW><id>1411004</id><snippet>output = os.popen('cat /tmp/baz').read()
</snippet></ROW><ROW><id>1411112</id><snippet>-u</snippet></ROW><ROW><id>1411112</id><snippet>-u     : unbuffered binary stdout and stderr (also PYTHONUNBUFFERED=x)
         see man page for details on internal buffering relating to '-u'
</snippet></ROW><ROW><id>1411112</id><snippet>-u</snippet></ROW><ROW><id>1411112</id><snippet>pty</snippet></ROW><ROW><id>1411229</id><snippet>A</snippet></ROW><ROW><id>1411229</id><snippet>class A(object):
  class B(object): pass
  def __init__(self): self.b = self.B()
</snippet></ROW><ROW><id>1411229</id><snippet>copy1</snippet></ROW><ROW><id>1411229</id><snippet>copy2</snippet></ROW><ROW><id>1411229</id><snippet>copy3</snippet></ROW><ROW><id>1411229</id><snippet>  File "./c.py", line 20, in copy3
    return cPickle.loads(cPickle.dumps(d, -1))
PicklingError: Can't pickle &lt;class 'c.B'&gt;: attribute lookup c.B failed
</snippet></ROW><ROW><id>1411229</id><snippet>deepcopy</snippet></ROW><ROW><id>1411539</id><snippet>from filename import Test</snippet></ROW><ROW><id>1411539</id><snippet>Test</snippet></ROW><ROW><id>1411539</id><snippet>test.py</snippet></ROW><ROW><id>1411539</id><snippet>from test import Test
t = Test()
</snippet></ROW><ROW><id>1411569</id><snippet>pass</snippet></ROW><ROW><id>1411569</id><snippet>def connect():
   _host = "example.com"
   _user = "username"
   _pass = "password"
   _base = "database"
   return MySQLdb.connect(_host, _user, _pass, _base)
</snippet></ROW><ROW><id>1411678</id><snippet>ord("\x01")</snippet></ROW><ROW><id>1411969</id><snippet>print 'Status: 403 Forbidden'
print
</snippet></ROW><ROW><id>1411969</id><snippet>sys.stdout('Status: 403 Forbidden\r\n\r\n')
</snippet></ROW><ROW><id>1411982</id><snippet>key = random.choice([key for key, subtree in tree.thedict.items()
                         if subtree.parent and not subtree.isRoot])
</snippet></ROW><ROW><id>1412170</id><snippet>authortext</snippet></ROW><ROW><id>1412170</id><snippet>ELEMENT_NODE</snippet></ROW><ROW><id>1412170</id><snippet>TEXT_NODE</snippet></ROW><ROW><id>1412170</id><snippet>a.childNodes[0].nodeValue
</snippet></ROW><ROW><id>1412226</id><snippet>Twisted</snippet></ROW><ROW><id>1412226</id><snippet>asyncore</snippet></ROW><ROW><id>1412226</id><snippet>asynchat</snippet></ROW><ROW><id>1412615</id><snippet>#!/usr/bin/python

import warnings

warnings.filterwarnings('error','Test')
for i in range(2):
  try:
    warnings.warn('Test');
  except UserWarning, e:
    print "Error caught"
    warnings.filterwarnings('ignore','Test')
</snippet></ROW><ROW><id>1412881</id><snippet>track_converted = win32com.client.CastTo(tracks[1], "IITFileOrCDTrack")
</snippet></ROW><ROW><id>1413100</id><snippet>self.dbc.execute("select * from car where reg='%s'") %(reg)
</snippet></ROW><ROW><id>1413100</id><snippet>self.dbc.execute("select * from car where reg='%s'" % reg)
</snippet></ROW><ROW><id>1413100</id><snippet>self.dbc.execute("select * from car where reg='%s'", reg)
</snippet></ROW><ROW><id>1413365</id><snippet>import Image
gif= Image.open('path.gif')
try:
    gif.seek(1)
except EOFError:
    isanimated= False
else:
    isanimated= True
</snippet></ROW><ROW><id>1413567</id><snippet>&gt;&gt;&gt; from PIL import Image                                                                                
&gt;&gt;&gt; img = Image.open('test.png')
&gt;&gt;&gt; img.show()
</snippet></ROW><ROW><id>1413879</id><snippet>print</snippet></ROW><ROW><id>1413879</id><snippet>MIMEText" takes a string -- a plain string, NOT a Unicode object.  So, use </snippet></ROW><ROW><id>1413879</id><snippet> as the argument if what you start with is a Unicode object </snippet></ROW><ROW><id>1413894</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def myhist(ax, color):
    ax.hist(np.log(np.arange(1, 10, .1)), facecolor=color)

def say_something(ax, words):
    t = ax.text(.2, 20., words)
    make_a_dim_yellow_bbox(t)

def make_a_dim_yellow_bbox(txt):
    txt.set_bbox(dict(facecolor='yellow', alpha=.2))

fig = plt.figure()
ax0 = fig.add_subplot(1,2,1)
ax1 = fig.add_subplot(1,2,2)

myhist(ax0, 'blue')
myhist(ax1, 'green')

say_something(ax0, 'this is the blue plot')
say_something(ax1, 'this is the green plot')

plt.show()
</snippet></ROW><ROW><id>1413902</id><snippet>def makeSomeNicelyDecoratedSubclass(someclass):
  return type('MyNiceName', (someclass,), {'new_attribute':'something'})
</snippet></ROW><ROW><id>1413902</id><snippet>type</snippet></ROW><ROW><id>1413902</id><snippet>type</snippet></ROW><ROW><id>1413902</id><snippet>def makeSomeNicelyDecoratedSubclass(someclass):
  mcl = type(someclass)
  return mcl('MyNiceName', (someclass,), {'new_attribute':'something'})
</snippet></ROW><ROW><id>1413902</id><snippet>type(someclass) is type</snippet></ROW><ROW><id>1414167</id><snippet>pygame</snippet></ROW><ROW><id>1414167</id><snippet>from ... import *</snippet></ROW><ROW><id>1414167</id><snippet>*</snippet></ROW><ROW><id>1414167</id><snippet>import pygame.locals as pygl</snippet></ROW><ROW><id>1414167</id><snippet>QUIT</snippet></ROW><ROW><id>1414167</id><snippet>pygl.QUIT</snippet></ROW><ROW><id>1414167</id><snippet>pygl</snippet></ROW><ROW><id>1414167</id><snippet>time_passed</snippet></ROW><ROW><id>1414167</id><snippet>if</snippet></ROW><ROW><id>1414167</id><snippet>elif</snippet></ROW><ROW><id>1414167</id><snippet>dispatch = {pygl.QUIT: exit_game, # whatever else
           }
</snippet></ROW><ROW><id>1414167</id><snippet>if</snippet></ROW><ROW><id>1414167</id><snippet>elif</snippet></ROW><ROW><id>1414167</id><snippet>else</snippet></ROW><ROW><id>1414167</id><snippet>f = dispatch.get(event.type)
if f is None:  # the "else" case"
   ...
else: f()
</snippet></ROW><ROW><id>1414320</id><snippet>def outer():
    a = 0
    def inner():
        print a
    inner()
outer()
</snippet></ROW><ROW><id>1414600</id><snippet>def prime_factorize(x,li=None):
    if li is None: li = []
</snippet></ROW><ROW><id>1414600</id><snippet>&gt;&gt;&gt; prime_factorize(10)
[2, 5]
&gt;&gt;&gt; prime_factorize(4)
[2, 5, 2, 2]
&gt;&gt;&gt; prime_factorize(19)
[2, 5, 2, 2, 19]
</snippet></ROW><ROW><id>1414859</id><snippet>def square_wrapper(i):
    result = [None]
    cProfile.runctx("result[0] = square(i)", globals(), locals(), "file_%d" % i)
    return result[0]
</snippet></ROW><ROW><id>1414906</id><snippet>def closeEvent(self, event):

    quit_msg = "Are you sure you want to exit the program?"
    reply = QtGui.QMessageBox.question(self, 'Message', 
                     quit_msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)

    if reply == QtGui.QMessageBox.Yes:
        event.accept()
    else:
        event.ignore()
</snippet></ROW><ROW><id>1414954</id><snippet>Go &gt; Connect to Server...</snippet></ROW><ROW><id>1414954</id><snippet>Xcode</snippet></ROW><ROW><id>1414954</id><snippet>~Library/Application Support/Developer/Shared/Xcode/</snippet></ROW><ROW><id>1414954</id><snippet>File Templates</snippet></ROW><ROW><id>1414954</id><snippet>Project Templates</snippet></ROW><ROW><id>1414954</id><snippet>New Project...</snippet></ROW><ROW><id>1414954</id><snippet>New File...</snippet></ROW><ROW><id>1415451</id><snippet>import itertools

def readloop(DBFILE):
  txtdb=open(DBFILE, 'r')
  tag = "customernum:  "
  BIGBLOCK = 1024 * 1024
  # locate first occurrence of tag at line-start
  # (assumes the VERY FIRST line doesn't start that way,
  # else you need a special-case and slight refactoring)
  blob = ''
  while True:
    blob = blob + txtdb.read(BIGBLOCK)
    if not blob:
      # tag not present at all -- warn about that, then
      return
    where = blob.find('\n' + tag)
    if where != -1:  # found it!
      blob = blob[where+1:] + txtdb.readline()
      break
    blob = blob[-len(tag):]
  # now make a by-line iterator over the part of interest
  thelines = itertools.chain(blob.splitlines(1), txtdb)
  sline = next(thelines, '')
  while sline.startswith(tag):
    data = []
    data.append(sline)
    sline = next(thelines, '')
    while not sline.startswith(tag):
      data.append(sline)
      sline = next(thelines, '')
      if not sline:
        break
    customernum = getitem(data, "customernum:  ")
    street = getitem(data, "street:  ")
    country = getitem(data, "country:  ")
    zip = getitem(data, "zip:  ")
</snippet></ROW><ROW><id>1415479</id><snippet>itunes.__class__</snippet></ROW><ROW><id>1415479</id><snippet>itunes</snippet></ROW><ROW><id>1415479</id><snippet>lib.__class__</snippet></ROW><ROW><id>1415479</id><snippet>lib</snippet></ROW><ROW><id>1415479</id><snippet>__name__</snippet></ROW><ROW><id>1415479</id><snippet>type(...)</snippet></ROW><ROW><id>1415669</id><snippet>"SELECT * FROM"</snippet></ROW><ROW><id>1415669</id><snippet>"SELECT __key__ FROM"</snippet></ROW><ROW><id>1415669</id><snippet>"SELECT this, that FROM</snippet></ROW><ROW><id>1415669</id><snippet>.id()</snippet></ROW><ROW><id>1415669</id><snippet>None</snippet></ROW><ROW><id>1415669</id><snippet>.id_or_name()</snippet></ROW><ROW><id>1415669</id><snippet>None</snippet></ROW><ROW><id>1415669</id><snippet>thekeys = db.GqlQuery('SELECT __key__ FROM Whatever').fetch(1000)
theids = [k.id() for k in thekeys if k.id() is not None]
</snippet></ROW><ROW><id>1415815</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import wx
from wx.lib import buttons

def onWindow(event):
    print "window event:", event.m_x, event.m_y

def onMotion(event):
    print "motion event:", event.m_x, event.m_y

app = wx.App()

imageA = wx.Image("b.gif", wx.BITMAP_TYPE_ANY).ConvertToBitmap()
imageB = wx.Image("a.gif", wx.BITMAP_TYPE_ANY).ConvertToBitmap()

frame = wx.Frame(None, wx.ID_ANY, title="Hover effect", size=(100+imageA.GetWidth(), 100+imageA.GetHeight()))

w = wx.Window(frame)
#bmp = wx.StaticBitmap(w, -1, imageA, (50, 50), (imageA.GetWidth(), imageA.GetHeight()))
bmp = buttons.GenBitmapButton(w, -1, imageA, style=wx.BORDER_NONE)
#bmp.Bind(wx.EVT_MOTION, onMotion)
bmp.Bind(wx.EVT_ENTER_WINDOW, onWindow)
bmp.Bind(wx.EVT_LEAVE_WINDOW, onWindow)

frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>1415826</id><snippet>def decorator(old):
    def new(*args, **kwargs):
        # ...
        return old(*args, **kwargs)
    return new
</snippet></ROW><ROW><id>1415826</id><snippet>Model.objects.filter(foo__lt = 4, bar__iexact = 'bar')
</snippet></ROW><ROW><id>1415932</id><snippet>p.pattern
</snippet></ROW><ROW><id>1416015</id><snippet>&lt;pinax-directory&gt;</snippet></ROW><ROW><id>1416015</id><snippet>cd</snippet></ROW><ROW><id>1416015</id><snippet>&lt;pinax-directory&gt;\scripts</snippet></ROW><ROW><id>1416015</id><snippet>python pinax-boot.py &lt;pinax-env&gt;</snippet></ROW><ROW><id>1416015</id><snippet>&lt;pinax-env&gt;\scripts</snippet></ROW><ROW><id>1416015</id><snippet>activate.bat</snippet></ROW><ROW><id>1416015</id><snippet>python clone_project social &lt;pinax-env&gt;\social</snippet></ROW><ROW><id>1416015</id><snippet>&lt;pinax-env&gt;\social</snippet></ROW><ROW><id>1416015</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>1416015</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>1416684</id><snippet>hasattr(var,'__iter__')</snippet></ROW><ROW><id>1416684</id><snippet>&gt;&gt;&gt; hasattr("abc","__iter__")
False
&gt;&gt;&gt; hasattr((0,),"__iter__")
True
&gt;&gt;&gt; hasattr({},"__iter__")
True
&gt;&gt;&gt; hasattr(set(),"__iter__")
True
</snippet></ROW><ROW><id>1416953</id><snippet>{{ item.description|truncatewords:10 }}
</snippet></ROW><ROW><id>1416953</id><snippet>from google.appengine.ext.webapp.template import create_template_register

register = create_template_register()

@register.filter
def replace_underscores(strng):
    return strng.replace('_', ' ')
</snippet></ROW><ROW><id>1416953</id><snippet>{{ item.code|replace_underscores }}
</snippet></ROW><ROW><id>1417642</id><snippet>#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import sys, os, time, atexit
from signal import SIGTERM 

class Daemon:
    """
    A generic daemon class.

    Usage: subclass the Daemon class and override the run() method
    """
    def __init__(self, pidfile, stdin='/dev/null', 
        stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced 
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        try: 
            pid = os.fork() 
            if pid &gt; 0:
                # exit first parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write(
                "fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/") 
        os.setsid() 
        os.umask(0) 

        # do second fork
        try: 
            pid = os.fork() 
            if pid &gt; 0:
                # exit from second parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write(
                "fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1) 

        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile,'w+').write("%s\n" % pid)

    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process    
        try:
            while 1:
                os.kill(pid, SIGTERM)
                time.sleep(0.1)
        except OSError, err:
            err = str(err)
            if err.find("No such process") &gt; 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print str(err)
                sys.exit(1)

    def restart(self):
        """
        Restart the daemon
        """
        self.stop()
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon. 
        It will be called after the process has been
        daemonized by start() or restart().
        """
</snippet></ROW><ROW><id>1417722</id><snippet>import os

if os.environ['REQUEST_METHOD'] == 'GET':
    # blah
</snippet></ROW><ROW><id>1417759</id><snippet>logger</snippet></ROW><ROW><id>1417759</id><snippet>logger = logging.getLogger(...)</snippet></ROW><ROW><id>1417759</id><snippet>logging.Filter</snippet></ROW><ROW><id>1417759</id><snippet>logging</snippet></ROW><ROW><id>1417759</id><snippet>logging.Logger</snippet></ROW><ROW><id>1417759</id><snippet>logging.setLoggerClass()</snippet></ROW><ROW><id>1417967</id><snippet>parts = urlparse.urlparse("qqqq://base/id#hint")
fake_url = "http:" + parts[2]
parts2 = urlparse.urlparse(fake_url)
</snippet></ROW></DATA>