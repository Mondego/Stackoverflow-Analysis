<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>7141226</id><snippet>key</snippet></ROW><ROW><id>7141226</id><snippet>int</snippet></ROW><ROW><id>7141226</id><snippet>float</snippet></ROW><ROW><id>7141226</id><snippet>str</snippet></ROW><ROW><id>7141226</id><snippet>int</snippet></ROW><ROW><id>7141226</id><snippet>key = int(key)
</snippet></ROW><ROW><id>7141226</id><snippet>float</snippet></ROW><ROW><id>7141226</id><snippet>key = float(key)
</snippet></ROW><ROW><id>7141226</id><snippet>if (key &lt; 1) or (key &gt; 34):
</snippet></ROW><ROW><id>7141226</id><snippet>if not (1 &lt;= key &lt;= 34):
</snippet></ROW><ROW><id>7141375</id><snippet>stdin</snippet></ROW><ROW><id>7141375</id><snippet>sys.stdin = open('/dev/tty')
a = raw_input('Prompt: ')
</snippet></ROW><ROW><id>7141375</id><snippet>sys.stdin = os.fdopen(3)
a = raw_input('Prompt: ')
$ (echo -n test | ./x.py) 3&lt;&amp;0
</snippet></ROW><ROW><id>7141433</id><snippet>from File1 import socket</snippet></ROW><ROW><id>7141433</id><snippet>File1.socket</snippet></ROW><ROW><id>7141433</id><snippet>socket</snippet></ROW><ROW><id>7141433</id><snippet>socket</snippet></ROW><ROW><id>7141433</id><snippet>File1</snippet></ROW><ROW><id>7141453</id><snippet>In [92]: import BeautifulSoup
In [94]: soup=BeautifulSoup.BeautifulSoup('&lt;table class="myTable"&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;/table&gt;')

In [95]: soup.findAll(attrs={'class':'myTable'})
Out[95]: [&lt;table class="myTable"&gt;&lt;tr&gt;...&lt;/tr&gt;&lt;/table&gt;]
</snippet></ROW><ROW><id>7141465</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>7141465</id><snippet>tag.attrs</snippet></ROW><ROW><id>7141465</id><snippet>In [111]: soup = BeautifulSoup.BeautifulSoup('&lt;a href="xyz" title="xyz"&gt;xyz&lt;/a&gt;')

In [112]: [tag.attrs for tag in soup.findAll('a')]
Out[112]: [[(u'href', u'xyz'), (u'title', u'xyz')]]
</snippet></ROW><ROW><id>7141522</id><snippet>dict</snippet></ROW><ROW><id>7141522</id><snippet>for item in b:
    if item in A:
        print A[item]
</snippet></ROW><ROW><id>7141522</id><snippet>MultiDict</snippet></ROW><ROW><id>7141522</id><snippet>paste.util.multidict.Multidict</snippet></ROW><ROW><id>7141522</id><snippet>pip install paste</snippet></ROW><ROW><id>7141833</id><snippet>itertools</snippet></ROW><ROW><id>7141833</id><snippet>from itertools import chain, izip

def reorder(a):
    gen = chain.from_iterable(izip(a, reversed(a)))
    for _ in a:
        yield next(gen)

&gt;&gt;&gt; list(reorder(a))
&lt;&lt;&lt; [1, 7, 2, 6, 3, 5, 4]
</snippet></ROW><ROW><id>7141833</id><snippet>itertools</snippet></ROW><ROW><id>7141833</id><snippet>&gt;&gt;&gt; list(chain.from_iterable(izip(a, reversed(a))))[:len(a)]
&lt;&lt;&lt; [1, 7, 2, 6, 3, 5, 4]
</snippet></ROW><ROW><id>7141833</id><snippet>&gt;&gt;&gt; [x for t in zip(a, reversed(a)) for x in t][:len(a)]
&lt;&lt;&lt; [1, 7, 2, 6, 3, 5, 4]
</snippet></ROW><ROW><id>7141833</id><snippet>&gt;&gt;&gt; sum(zip(a, a[::-1]), ())[:len(a)]
&lt;&lt;&lt; (1, 7, 2, 6, 3, 5, 4)
</snippet></ROW><ROW><id>7141837</id><snippet>super(Snippet, self)</snippet></ROW><ROW><id>7141837</id><snippet>self.__class__.mro()</snippet></ROW><ROW><id>7141837</id><snippet>Snippet</snippet></ROW><ROW><id>7141837</id><snippet>super</snippet></ROW><ROW><id>7141837</id><snippet>super</snippet></ROW><ROW><id>7141837</id><snippet>super(Snippet, self).save(...)</snippet></ROW><ROW><id>7141837</id><snippet>save</snippet></ROW><ROW><id>7141837</id><snippet>self</snippet></ROW><ROW><id>7141837</id><snippet>super(Snippet, self).save(...)</snippet></ROW><ROW><id>7141837</id><snippet>Snippet</snippet></ROW><ROW><id>7141837</id><snippet>save</snippet></ROW><ROW><id>7141837</id><snippet>save</snippet></ROW><ROW><id>7141837</id><snippet>Snippet</snippet></ROW><ROW><id>7141837</id><snippet>models.Model</snippet></ROW><ROW><id>7141837</id><snippet>super</snippet></ROW><ROW><id>7141837</id><snippet>super(Snippet, self)</snippet></ROW><ROW><id>7141837</id><snippet>self</snippet></ROW><ROW><id>7141837</id><snippet>MRO</snippet></ROW><ROW><id>7141837</id><snippet>super</snippet></ROW><ROW><id>7142069</id><snippet>print func.__name__
</snippet></ROW><ROW><id>7142069</id><snippet>&gt;&gt;&gt; def func():
...     pass
... 
&gt;&gt;&gt; new_func = func
&gt;&gt;&gt; print func.__name__
func
&gt;&gt;&gt; print new_func.__name__
func
</snippet></ROW><ROW><id>7142240</id><snippet>zipped.sort(key = lambda t: t[1])
</snippet></ROW><ROW><id>7142311</id><snippet>d</snippet></ROW><ROW><id>7142311</id><snippet>%d</snippet></ROW><ROW><id>7142311</id><snippet>%d</snippet></ROW><ROW><id>7142311</id><snippet>%s</snippet></ROW><ROW><id>7142311</id><snippet>%</snippet></ROW><ROW><id>7142360</id><snippet>pywin32</snippet></ROW><ROW><id>7142360</id><snippet>win32gui</snippet></ROW><ROW><id>7142360</id><snippet>EnumWindows</snippet></ROW><ROW><id>7142360</id><snippet>GetWindowRect</snippet></ROW><ROW><id>7142360</id><snippet>appscript</snippet></ROW><ROW><id>7142360</id><snippet>import win32gui

def callback(hwnd, extra):
    rect = win32gui.GetWindowRect(hwnd)
    x = rect[0]
    y = rect[1]
    w = rect[2] - x
    h = rect[3] - y
    print "Window %s:" % win32gui.GetWindowText(hwnd)
    print "\tLocation: (%d, %d)" % (x, y)
    print "\t    Size: (%d, %d)" % (w, h)

def main():
    win32gui.EnumWindows(callback, None)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7142424</id><snippet>/usr/bin</snippet></ROW><ROW><id>7142424</id><snippet>fab</snippet></ROW><ROW><id>7142424</id><snippet>fab</snippet></ROW><ROW><id>7142731</id><snippet>&gt;&gt;&gt; time.strptime('2011-03-06T03:36:45+0000', '%Y-%m-%dT%H:%M:%S+0000')
time.struct_time(tm_year=2011, tm_mon=3, tm_mday=6, tm_hour=3, tm_min=36, tm_sec=45, tm_wday=6, tm_yday=65, tm_isdst=-1)
</snippet></ROW><ROW><id>7142731</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('2011-03-06T03:36:45+0000','%Y-%m-%dT%H:%M:%S+0000')
</snippet></ROW><ROW><id>7143078</id><snippet>[x._short_opts + x._long_opts for x in parser._get_all_options()]
</snippet></ROW><ROW><id>7143078</id><snippet>sum([x._short_opts + x._long_opts for x in parser._get_all_options()],[])
</snippet></ROW><ROW><id>7143355</id><snippet>
session.query(func.avg(Rating.field2).label('average')).filter(Rating.url==url_string.netloc)
</snippet></ROW><ROW><id>7143496</id><snippet>virtualenv</snippet></ROW><ROW><id>7143496</id><snippet>--user</snippet></ROW><ROW><id>7143496</id><snippet>setup.py</snippet></ROW><ROW><id>7143496</id><snippet>pip</snippet></ROW><ROW><id>7143496</id><snippet>pip install --user mercurial
</snippet></ROW><ROW><id>7143496</id><snippet>hg</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/.local/bin/hg</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/.local/lib/pythonx.y/site-packages/</snippet></ROW><ROW><id>7143496</id><snippet>user</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/.local</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/Library/Python</snippet></ROW><ROW><id>7143496</id><snippet>hg</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/Library/Python/x.y/bin/hg</snippet></ROW><ROW><id>7143496</id><snippet>$HOME/Library/Python/x.y/lib/python/site-packages</snippet></ROW><ROW><id>7143516</id><snippet>get_image_info</snippet></ROW><ROW><id>7143516</id><snippet>get_image</snippet></ROW><ROW><id>7143516</id><snippet>import ctypes

#a toy dll for verification 
lib = ctypes.cdll.LoadLibrary('./C/imgtest.dll')

class ImageInfo(ctypes.Structure):
    _fields_ = (
        ('width', ctypes.c_int),
        ('height', ctypes.c_int),
        ('depth', ctypes.c_int),
    )

pImageInfo = ctypes.POINTER(ImageInfo)
pImage = ctypes.POINTER(ctypes.c_ubyte)

lib.get_image_info.argtypes = [pImageInfo]
lib.get_image_info.restype = ctypes.c_int

lib.get_image.argtypes = [pImage]
lib.get_image.restype = ctypes.c_int

imgnfo = ImageInfo()
lib.get_image_info(imgnfo)
w, h, d = imgnfo.width, imgnfo.height, imgnfo.depth

imgdata = (w * h * d * ctypes.c_ubyte)()
lib.get_image(imgdata)

from PIL import Image
img = Image.frombuffer('RGBA', (w, h), imgdata, 'raw', 'RGBA', 0, 1)
</snippet></ROW><ROW><id>7143516</id><snippet>typedef struct _ImageInfo {
    int width;
    int height;
    int depth;
} ImageInfo, *pImageInfo;

typedef unsigned char * pImage;

int get_image_info(pImageInfo imgnfo);
int get_image(pImage img);
</snippet></ROW><ROW><id>7143845</id><snippet>ModelAdmin</snippet></ROW><ROW><id>7143845</id><snippet>from django.contrib import admin

class CommentAdmin(admin.ModelAdmin):
    # define which columns displayed in changelist
    list_display = ('text', 'name', 'date', 'article')
    # add filtering by date
    list_filter = ('date',)
    # add search field 
    search_fields = ['text', 'article']

admin.site.register(Comment, CommentAdmin)
</snippet></ROW><ROW><id>7143926</id><snippet>except:
   pass
</snippet></ROW><ROW><id>7144318</id><snippet>&lt;group colspan="2" col="2" groups="base.group_extended"&gt;
                            &lt;separator string="Weights" colspan="2"/&gt;
                            &lt;field digits="(14, 3)" name="volume" attrs="{'readonly':[('type','=','service')]}"/&gt;
                            &lt;field digits="(14, 3)" name="weight" attrs="{'readonly':[('type','=','service')]}"/&gt;
                            &lt;field digits="(14, 3)" name="weight_net" attrs="{'readonly':[('type','=','service')]}"/&gt;
                        &lt;/group&gt;
</snippet></ROW><ROW><id>7145453</id><snippet>QEvent</snippet></ROW><ROW><id>7145453</id><snippet>event()</snippet></ROW><ROW><id>7145453</id><snippet>QObject</snippet></ROW><ROW><id>7145453</id><snippet>mousePressEvent</snippet></ROW><ROW><id>7145453</id><snippet>mouseMoveEvent</snippet></ROW><ROW><id>7145453</id><snippet>super</snippet></ROW><ROW><id>7145453</id><snippet>def mousePressEvent(self, event):
    super(FenixGui, self).mousePressEvent(event)
    print "test 1"
    self.offset = event.pos()

def mouseMoveEvent(self, event):
    super(FenixGui, self).mouseMoveEvent(event)
    print "test 2"
    x=event.globalX()
    y=event.globalY()
    x_w = self.offset.x()
    y_w = self.offset.y()
    self.move(x-x_w, y-y_w)
</snippet></ROW><ROW><id>7145453</id><snippet>SIGNAL()</snippet></ROW><ROW><id>7145453</id><snippet>lineEdit = QtGui.QLineEdit()
lineEdit.valueChanged.connect(self.myHandlerMethod)
</snippet></ROW><ROW><id>7145992</id><snippet>unittest</snippet></ROW><ROW><id>7145992</id><snippet>-f</snippet></ROW><ROW><id>7145992</id><snippet>Options:
    -f, --failfast   Stop on first failure
</snippet></ROW><ROW><id>7145992</id><snippet>./auth_test.py -f</snippet></ROW><ROW><id>7145992</id><snippet>auth_test.py</snippet></ROW><ROW><id>7145992</id><snippet>if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>7145992</id><snippet>./auth_test.py MyTestClass # will run all tests in MyTestClass
./auth_test.py MyTestClass.test_my_work # will run only the test_my_work test
</snippet></ROW><ROW><id>7146199</id><snippet>&gt;&gt;&gt; json.loads('["\x96"]')
....
UnicodeDecodeError: 'utf8' codec can't decode byte 0x96 in position 0: invalid start byte

&gt;&gt;&gt; json.loads('["\x96"]', encoding="latin-1")
[u'\x96']
</snippet></ROW><ROW><id>7146199</id><snippet>s</snippet></ROW><ROW><id>7146199</id><snippet>str</snippet></ROW><ROW><id>7146199</id><snippet>encoding</snippet></ROW><ROW><id>7146199</id><snippet>unicode</snippet></ROW><ROW><id>7146199</id><snippet>&gt;&gt;&gt; json.loads('["\x96"]', encoding="cp1252")
[u'\u2013']
</snippet></ROW><ROW><id>7147274</id><snippet>time.sleep()</snippet></ROW><ROW><id>7147274</id><snippet>update()</snippet></ROW><ROW><id>7147274</id><snippet>draw()</snippet></ROW><ROW><id>7147274</id><snippet>draw()</snippet></ROW><ROW><id>7147274</id><snippet>time.sleep()</snippet></ROW><ROW><id>7147274</id><snippet>draw()</snippet></ROW><ROW><id>7147274</id><snippet>yield</snippet></ROW><ROW><id>7147274</id><snippet>draw()</snippet></ROW><ROW><id>7147274</id><snippet>draw_iterator = draw()
next_draw_time = 0  # Draw immediately
</snippet></ROW><ROW><id>7147274</id><snippet>current_time = time.time()
if current_time &gt;= next_draw_time:
</snippet></ROW><ROW><id>7147274</id><snippet>    try:
        timeout = next(draw_iterator)
    except StopIteration:
        # The drawing is finished, exit the main loop?
        break
    next_draw_time = current_time + timeout
</snippet></ROW><ROW><id>7147482</id><snippet>import sys
sys.path.append('/home/francis/docs/folder1/')
sys.path.append('/home/francis/docs/folder2/')
import Prog1
import Prog2
</snippet></ROW><ROW><id>7147979</id><snippet>((\w)\2{2,})</snippet></ROW><ROW><id>7147979</id><snippet>In [71]: import re
In [72]: s = r'http://www.google.com/search=ooo-jjjj'
In [73]: re.findall(r'((\w)\2{2,})', s)
Out[73]: [('www', 'w'), ('ooo', 'o'), ('jjjj', 'j')]

In [78]: [match[0] for match in re.findall(r'((\w)\2{2,})', s)]
Out[78]: ['www', 'ooo', 'jjjj']
</snippet></ROW><ROW><id>7148001</id><snippet>&gt;&gt;&gt; page = urllib2.urlopen( "http://securities.stanford.edu/1046/BWEN00_01" )
&gt;&gt;&gt; page.info().headers
['Date: Mon, 22 Aug 2011 13:13:56 GMT\r\n', 'Server: Apache/1.3.33 (Darwin) mod_jk/1.2.2 DAV/1.0.3\r\n', 'Cache-Control: max-age=60\r\n', 'Expires: Mon, 22 Aug 2011 13:14:56 GMT\r\n', 'Last-Modified: Thu, 21 Jul 2011 22:06:51 GMT\r\n', 'ETag: "18b9a6e-9af6-4e28a2fb"\r\n', 'Accept-Ranges: bytes\r\n', 'Content-Length: 39670\r\n', 'Connection: close\r\n', 'Content-Type: text/html\r\n']
</snippet></ROW><ROW><id>7148001</id><snippet>page.decode('utf-16')</snippet></ROW><ROW><id>7148097</id><snippet>loader = QUiLoader()
file = QFile(":/forms/myform.ui")
file.open(QFile.ReadOnly)
myWidget = loader.load(file, self)
file.close()
</snippet></ROW><ROW><id>7148107</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>7148602</id><snippet>__getitem__</snippet></ROW><ROW><id>7148602</id><snippet>__setitem__</snippet></ROW><ROW><id>7148602</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>7148602</id><snippet>__getitem__</snippet></ROW><ROW><id>7148602</id><snippet>__setitem__</snippet></ROW><ROW><id>7148602</id><snippet>dict</snippet></ROW><ROW><id>7148602</id><snippet>__len__</snippet></ROW><ROW><id>7148602</id><snippet>__iter__</snippet></ROW><ROW><id>7148602</id><snippet>__getitem__</snippet></ROW><ROW><id>7148602</id><snippet>__setitem__</snippet></ROW><ROW><id>7148602</id><snippet>__delitem__</snippet></ROW><ROW><id>7149579</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>7149579</id><snippet>_ctypes.StructType</snippet></ROW><ROW><id>7149579</id><snippet>_ctypes.StructType</snippet></ROW><ROW><id>7149579</id><snippet>type(ctypes.Structure)</snippet></ROW><ROW><id>7149579</id><snippet>import ctypes

class VariableMeta(type(ctypes.Structure)):
    pass
</snippet></ROW><ROW><id>7149579</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>7149579</id><snippet>class PointsMetaClass(type(ctypes.Structure), VariableMeta):
    pass

class Points(c.Structure, metaclass=PointsMetaClass):
    # ...
</snippet></ROW><ROW><id>7149579</id><snippet>super()</snippet></ROW><ROW><id>7149579</id><snippet>type</snippet></ROW><ROW><id>7149579</id><snippet>__new__</snippet></ROW><ROW><id>7149579</id><snippet>return super(VariableMeta, cls).__new__(cls, name, bases, dct)
</snippet></ROW><ROW><id>7149595</id><snippet>[\w\+%_&amp; ]+</snippet></ROW><ROW><id>7149595</id><snippet>(r'^(?P&lt;chararg&gt;\w+)/IT_NEEDS_TO_BE_HERE/(?P&lt;intarg&gt;\d+)', 'dest')</snippet></ROW><ROW><id>7149595</id><snippet>(r'^(?P&lt;chararg&gt;\w+)/(?P&lt;arg&gt;[\w\+%_&amp; ]+)/(?P&lt;intarg&gt;\d+)', 'dest')
</snippet></ROW><ROW><id>7149595</id><snippet>\w</snippet></ROW><ROW><id>7149595</id><snippet>\+</snippet></ROW><ROW><id>7149634</id><snippet>atexit</snippet></ROW><ROW><id>7149634</id><snippet>atexit</snippet></ROW><ROW><id>7149634</id><snippet>_success = False
def atsuccess(func, *args, **kwds):
    def wrapper():
        if _success:
            func(*args,**kwds)
    atexit(wrapper)

def set_success():
    global _success
    _success = True

# then call atsuccess() to attach your callbacks,
# and call set_success() before your script returns
</snippet></ROW><ROW><id>7149634</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>7149634</id><snippet>set_success</snippet></ROW><ROW><id>7149634</id><snippet>sys.exit</snippet></ROW><ROW><id>7149634</id><snippet>try:
    main()
except SystemExit, err:
    if err.code == 0:
        set_success()
    raise
</snippet></ROW><ROW><id>7149881</id><snippet>([A-Z][a-z](+\s[A-Z][a-z]+!?)?)</snippet></ROW><ROW><id>7149881</id><snippet>+</snippet></ROW><ROW><id>7149881</id><snippet>([A-Z][a-z]+(\s[A-Z][a-z]+!?)?)</snippet></ROW><ROW><id>7149881</id><snippet>&gt;&gt;&gt; re.match(r"([A-Z][a-z]+(\s[A-Z][a-z]+!?)?)", "White House").groups()
('White House', ' House')
</snippet></ROW><ROW><id>7149881</id><snippet>(?:...)</snippet></ROW><ROW><id>7149881</id><snippet>(...)</snippet></ROW><ROW><id>7149881</id><snippet>&gt;&gt;&gt; re.match(r"([A-Z][a-z]+(?:\s[A-Z][a-z]+!?)?)", "White House").groups()
('White House',)
</snippet></ROW><ROW><id>7149951</id><snippet>/proc/</snippet></ROW><ROW><id>7149951</id><snippet>$HOME/.mozilla</snippet></ROW><ROW><id>7150359</id><snippet>   import pexpect
   child = pexpect.spawn ('ftp ftp.openbsd.org')
   child.expect ('Name .*: ')
   child.sendline ('anonymous')
   child.expect ('Password:')
   child.sendline ('noah@example.com')
   child.expect ('ftp&gt; ')
   child.sendline ('ls /pub/OpenBSD/')
   child.expect ('ftp&gt; ')
   print child.before   # Print the result of the ls command.
   child.interact()     # Give control of the child to the user.
</snippet></ROW><ROW><id>7150479</id><snippet>{% if approved %}&lt;button disableRate&gt;{% else %}&lt;button approveRate&gt;{% endif %}
</snippet></ROW><ROW><id>7150701</id><snippet>def bar(fn):
    # ...

class foo(object):
    @staticmethod
    @bar
    def hello():
        # ...

# ...
</snippet></ROW><ROW><id>7150850</id><snippet>self.scrolledwindow.add_with_viewport</snippet></ROW><ROW><id>7150850</id><snippet>self.scrolledwindow.add</snippet></ROW><ROW><id>7150850</id><snippet>gtk.TreeView</snippet></ROW><ROW><id>7150850</id><snippet>gtk.Viewport</snippet></ROW><ROW><id>7150863</id><snippet>from datetime import timedelta, datetime
from time import sleep

endtime = datetime.utcnow() + timedelta(seconds = 2)

while True:
    sleep(1) # just an example
    if datetime.utcnow() &gt; endtime: # if more than two seconds has elapsed
        break
</snippet></ROW><ROW><id>7150863</id><snippet>SIGALARM</snippet></ROW><ROW><id>7151115</id><snippet>shp.TextFrame.Characters.Caption</snippet></ROW><ROW><id>7151115</id><snippet>Characters</snippet></ROW><ROW><id>7151115</id><snippet>Characters</snippet></ROW><ROW><id>7151149</id><snippet>class BaseClass(object):
    def a_method(self, item_id):
        response = lookup_response(item_id)
        return response

class CachingClass(BaseClass):
    def a_method(self, item_id):
        if item_id in cache:
            return item_from_cache
        return super(CachingClass, self).a_method(item_id)

    def uncached_method(self, item_id)
        return super(CachingClass, self).a_method(item_id)
</snippet></ROW><ROW><id>7151403</id><snippet>import inspect

print inspect.getframeinfo(inspect.getouterframes(inspect.currentframe())[1][0])[0]
</snippet></ROW><ROW><id>7151673</id><snippet>import re
# matches everything which is between &lt; and &gt; (excluding them)
ptrn = re.compile("&lt;([^&gt;]+)&gt;")
# findall returns ['email','email2']. Join concats them.
print '; '.join(ptrn.findall("fname lname &lt;email&gt;; fname2 lname2 &lt;email2&gt;;"))
# email; email2
</snippet></ROW><ROW><id>7151807</id><snippet>% 8</snippet></ROW><ROW><id>7151807</id><snippet>replicas</snippet></ROW><ROW><id>7151975</id><snippet>a = 0x026B3F3E
b = a/30000.0
degrees = b//60
minutes = b%60

print degrees, ' degrees and ', minutes, 'minutes'
&gt;&gt;&gt; 22.0  degrees and  32.7658 minutes
</snippet></ROW><ROW><id>7152065</id><snippet>class LazyWrapper(object):
    def __init__(self, func):
        self.func = func
        self.value = None
    def __call__(self):
        if self.value is None:
            self.value = self.func()
        return self.value

lazy_wrapper = LazyWrapper(lambda: function_that_generates_huge_array_slowly(0))
</snippet></ROW><ROW><id>7152065</id><snippet>lazy_wrapper()</snippet></ROW><ROW><id>7152065</id><snippet>lasy_wrapper</snippet></ROW><ROW><id>7152065</id><snippet>class LazyWrapper(object):
    def __init__(self, func):
        self.func = func
    def __call__(self):
        try:
            return self.value
        except AttributeError:
            self.value = self.func()
            return self.value
</snippet></ROW><ROW><id>7152065</id><snippet>class YourClass(object)
    def __init__(self, func):
        self.func = func
    @property
    def x(self):
        try:
            return self.value
        except AttributeError:
            self.value = self.func()
            return self.value
</snippet></ROW><ROW><id>7152065</id><snippet>x</snippet></ROW><ROW><id>7152065</id><snippet>func</snippet></ROW><ROW><id>7152067</id><snippet>-d</snippet></ROW><ROW><id>7152067</id><snippet>--data</snippet></ROW><ROW><id>7152067</id><snippet>username</snippet></ROW><ROW><id>7152067</id><snippet>api_key</snippet></ROW><ROW><id>7152067</id><snippet>    curl --dump-header - -H "Accept: application/json"\
    -H "Content-Type: application/json"  -X POST\
    --data "{\"name\":\"arrrg\"}"\
    "http://localhost:8000/api/mobile/thing/?username=vikingosegundo&amp;api_key=12345"
</snippet></ROW><ROW><id>7152355</id><snippet>from itertools import chain

class PrintableList(list): # for a list of dicts
    def __str__(self):
        return '. '.join(' '.join(str(x) for x in
            chain.from_iterable(zip((item[0], 'is', 'and'), item[1])))
                for item in (item.items()[0] for item in self)) + '.'

class PrintableDict(dict): # for a dict
    def __str__(self):
        return '. '.join(' '.join(str(x) for x in
            chain.from_iterable(zip((item[0], 'is', 'and'), item[1])))
                for item in self.iteritems()) + '.'

class Foo:
   def __init__(self):
      self.d = PrintableDict({"Susan": ("Boyle", 50, "alive"), 
                              "Albert": ("Speer", 106, "dead")})

class Bar:
   def __init__(self):
      self.l = PrintableList([{"Susan": ("Boyle", 50, "alive")}, 
                              {"Albert": ("Speer", 106, "dead")}])

foo = Foo()
print self.d
bar = Bar()
print self.l
</snippet></ROW><ROW><id>7152439</id><snippet>from ctypes import *#just for brevity in this example
input = (c_double*9)()
input[0] = .....
da = c_double()
db = c_double()
dy = c_double()
dll.DataSub(byref(input), byref(da), byref(db), byref(dy))
</snippet></ROW><ROW><id>7152455</id><snippet>HTMLParser</snippet></ROW><ROW><id>7152455</id><snippet>&gt;&gt;&gt; HTMLParser.HTMLParser().unescape('a &lt; é &amp;ndash; &amp;hellip;')
u'a &lt; é – …'
</snippet></ROW><ROW><id>7152455</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFKC', u'a &lt; – …')
u'a &lt; é – ...'
</snippet></ROW><ROW><id>7152455</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFKD', u'a &lt; – …').encode('us-ascii', 'ignore')
'a &lt; e  ...'
</snippet></ROW><ROW><id>7152788</id><snippet>def matches(s):
    return (len(s) == 10 and 
            set(s[::2]) == set('12345') and 
            set(s[1::2]) &lt;= set('abc'))

&gt;&gt;&gt; matches('1a2b4a3c5b')
True
&gt;&gt;&gt; matches('1a5c4b4a3b')
False
</snippet></ROW><ROW><id>7152796</id><snippet>__lt__</snippet></ROW><ROW><id>7152796</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>7152796</id><snippet>__hash__</snippet></ROW><ROW><id>7152796</id><snippet>__eq__</snippet></ROW><ROW><id>7152903</id><snippet>f = open('out.txt', 'w')
print &gt;&gt; f, 'Filename:', filename  # or f.write('...\n')
f.close()
</snippet></ROW><ROW><id>7152903</id><snippet>import sys

orig_stdout = sys.stdout
f = file('out.txt', 'w')
sys.stdout = f

for i in range(2):
    print 'i = ', i

sys.stdout = orig_stdout
f.close()
</snippet></ROW><ROW><id>7153123</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x,y = np.random.rand(2,10)
img = np.random.rand(10,10)

fig = plt.figure()
ax1 = fig.add_subplot(221)
im = ax1.imshow(img,extent=[0,1,0,1])

plt.colorbar(im)
ax2 = fig.add_subplot(222)
im = ax2.imshow(img,extent=[0,1,0,1])
plt.colorbar(im)

ax3 = fig.add_subplot(223)
ax3.plot(x,y)
ax3.axis([0,1,0,1])

ax4 = fig.add_subplot(224)
im = ax4.imshow(img,extent=[0,1,0,1])
plt.colorbar(im)

pos4 = ax4.get_position().bounds
pos1 = ax1.get_position().bounds
# set the x limits (left and right) to first axes limits
# set the y limits (bottom and top) to the last axes limits
newpos = [pos1[0],pos4[1],pos1[2],pos4[3]]

ax3.set_position(newpos)

plt.show()
</snippet></ROW><ROW><id>7153185</id><snippet># This is for Py2k.  For Py3k, use http.client and urllib.parse instead, and
# use // instead of / for the division
import httplib
import urlparse

def unshorten_url(url):
    parsed = urlparse.urlparse(url)
    h = httplib.HTTPConnection(parsed.netloc)
    resource = parsed.path
    if parsed.query != "":
        resource += "?" + parsed.query
    h.request('HEAD', resource )
    response = h.getresponse()
    if response.status/100 == 3 and response.getheader('Location'):
        return unshorten_url(response.getheader('Location')) # changed to process chains of short urls
    else:
        return url
</snippet></ROW><ROW><id>7153260</id><snippet>char to_hex(int x)
{
  return x &lt; 10 ? x + '0' : (x - 10) + 'A';
}

char bytes[16];
...
std::string uuid;
for (int i = 0; i &lt; 16; ++i)
{
  uuid += to_hex((bytes[i] &gt;&gt; 4) &amp; 0x0F);
  uuid += to_hex(bytes[i] &amp; 0x0F);
}
</snippet></ROW><ROW><id>7153263</id><snippet>--relocatable</snippet></ROW><ROW><id>7153263</id><snippet>--relocatable</snippet></ROW><ROW><id>7153263</id><snippet>-e</snippet></ROW><ROW><id>7153263</id><snippet>--relocatable</snippet></ROW><ROW><id>7153309</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; a is []
False
</snippet></ROW><ROW><id>7153309</id><snippet>&gt;&gt;&gt; 'a' is 'a'
True
</snippet></ROW><ROW><id>7153617</id><snippet>python-gst</snippet></ROW><ROW><id>7153735</id><snippet> def listFiles(cdir, fileslist=[]):
</snippet></ROW><ROW><id>7153735</id><snippet> def listFiles(cdir, fileslist=None):
     if fileslist is None:
         fileslist = []
</snippet></ROW><ROW><id>7153788</id><snippet>if ( ( x != y ) and ( x != z ) and ( y !=z ) )
</snippet></ROW><ROW><id>7153892</id><snippet>getAllHeaders()</snippet></ROW><ROW><id>7153892</id><snippet># Apache config for mod_rewrite
# from callum85 at notspam dot msn dot com 19-Apr-2007 06:07
RewriteEngine on
RewriteRule .* - [E=HTTP_X_FORWARDED_FOR:%{HTTP_X_FORWARDED_FOR}]
</snippet></ROW><ROW><id>7153919</id><snippet>item = my_dict.get('john', default_value.copy())
</snippet></ROW><ROW><id>7153919</id><snippet>str</snippet></ROW><ROW><id>7153919</id><snippet>int</snippet></ROW><ROW><id>7153919</id><snippet>tuple</snippet></ROW><ROW><id>7153919</id><snippet>list</snippet></ROW><ROW><id>7153919</id><snippet>set</snippet></ROW><ROW><id>7153919</id><snippet>dict</snippet></ROW><ROW><id>7153919</id><snippet>copy</snippet></ROW><ROW><id>7153919</id><snippet>defaultdict</snippet></ROW><ROW><id>7153919</id><snippet>def my_dict_get(key):
    try:
        item = my_dict[key]
    except KeyError:
        item = default_value.copy()
</snippet></ROW><ROW><id>7153919</id><snippet>if</snippet></ROW><ROW><id>7153919</id><snippet>my_dict</snippet></ROW><ROW><id>7153919</id><snippet>dict</snippet></ROW><ROW><id>7153919</id><snippet>my_dict</snippet></ROW><ROW><id>7153919</id><snippet>dict</snippet></ROW><ROW><id>7153919</id><snippet>get</snippet></ROW><ROW><id>7153919</id><snippet>try</snippet></ROW><ROW><id>7153936</id><snippet>User.objects.filter(billingday__day=1)
</snippet></ROW><ROW><id>7153936</id><snippet>BillingDay</snippet></ROW><ROW><id>7153936</id><snippet>BillingDay</snippet></ROW><ROW><id>7153936</id><snippet>User</snippet></ROW><ROW><id>7153936</id><snippet>User</snippet></ROW><ROW><id>7153936</id><snippet>BillingDay</snippet></ROW><ROW><id>7154284</id><snippet>def toggleConsole():
    toggleConsole.show = not getattr(toggleConsole, "show", True)
    console = win32console.GetConsoleWindow()
    win32gui.ShowWindow(console, int(toggleConsole.show))
</snippet></ROW><ROW><id>7154284</id><snippet>&gt;&gt;&gt; def test():
...     test.show = not getattr(test, "show", True)
...     print int(test.show)
... 
&gt;&gt;&gt; test()
0
&gt;&gt;&gt; test()
1
&gt;&gt;&gt; test()
0
</snippet></ROW><ROW><id>7154375</id><snippet>list</snippet></ROW><ROW><id>7154375</id><snippet>Counter</snippet></ROW><ROW><id>7154375</id><snippet>ignore = ['the','a','if','in','it','of','or']
ArtofWarCounter = Counter(ArtofWarLIST)
for word in list(ArtofWarCounter):
    if word in ignore:
        del ArtofWarCounter[word]
</snippet></ROW><ROW><id>7154375</id><snippet>ArtofWarCounter.keys()</snippet></ROW><ROW><id>7154375</id><snippet>list(ArtofWarCounter)</snippet></ROW><ROW><id>7154375</id><snippet>ignore = {'the','a','if','in','it','of','or'}
ArtofWarCounter = Counter(x for x in ArtofWarLIST if x not in ignore)
</snippet></ROW><ROW><id>7154375</id><snippet>ignore</snippet></ROW><ROW><id>7154375</id><snippet>set</snippet></ROW><ROW><id>7154375</id><snippet>x not in ignore</snippet></ROW><ROW><id>7154925</id><snippet>import numpy as np
a = np.empty((15,))
a[::2] = 1
a[1::2] = -1
</snippet></ROW><ROW><id>7154925</id><snippet>import numpy as np
from timeit import Timer

if __name__ == '__main__':

    setupstr="""
import numpy as np
N = 10000
"""

    method1="""
a = np.empty((N,),int)
a[::2] = 1
a[1::2] = -1
"""

    method2="""
a = np.tile([1,-1],N)
"""

    method3="""
a = np.array([1,-1]*N)   
"""

    method4="""
a = np.array(list(itertools.islice(itertools.cycle((1,-1)), N)))    
"""
    nl = 1000
    t1 = Timer(method1, setupstr).timeit(nl)
    t2 = Timer(method2, setupstr).timeit(nl)
    t3 = Timer(method3, setupstr).timeit(nl)
    t4 = Timer(method4, setupstr).timeit(nl)

    print 'method1', t1
    print 'method2', t2
    print 'method3', t3
    print 'method4', t4
</snippet></ROW><ROW><id>7154925</id><snippet>method1 0.0130500793457
method2 0.114426136017
method3 4.30518102646
method4 2.84446692467
</snippet></ROW><ROW><id>7154925</id><snippet>N = 100</snippet></ROW><ROW><id>7154925</id><snippet>nl</snippet></ROW><ROW><id>7154925</id><snippet>method1 0.05735206604
method2 0.323992013931
method3 0.556654930115
method4 0.46702003479
</snippet></ROW><ROW><id>7154977</id><snippet>def uuid1(node=None, clock_seq=None):
        """Generate a UUID from a host ID, sequence number, and the current time.
        If 'node' is not given, getnode() is used to obtain the hardware
        address.  If 'clock_seq' is given, it is used as the sequence number;
        otherwise a random 14-bit sequence number is chosen."""
    # When the system provides a version-1 UUID generator, use it (but don't
    # use UuidCreate here because its UUIDs don't conform to RFC 4122).
    if _uuid_generate_time and node is clock_seq is None:
        _buffer = ctypes.create_string_buffer(16)
        _uuid_generate_time(_buffer)
        return UUID(bytes=_buffer.raw)
    global _last_timestamp
    import time
    nanoseconds = int(time.time() * 1e9)
    # 0x01b21dd213814000 is the number of 100-ns intervals between the
    # UUID epoch 1582-10-15 00:00:00 and the Unix epoch 1970-01-01 00:00:00.
    timestamp = int(nanoseconds//100) + 0x01b21dd213814000L
    if _last_timestamp is not None and timestamp &lt;= _last_timestamp:
        timestamp = _last_timestamp + 1
    _last_timestamp = timestamp
    if clock_seq is None:
        import random
        clock_seq = random.randrange(1&lt;&lt;14L) # instead of stable storage
    time_low = timestamp &amp; 0xffffffffL
    time_mid = (timestamp &gt;&gt; 32L) &amp; 0xffffL
    time_hi_version = (timestamp &gt;&gt; 48L) &amp; 0x0fffL
    clock_seq_low = clock_seq &amp; 0xffL
    clock_seq_hi_variant = (clock_seq &gt;&gt; 8L) &amp; 0x3fL
    if node is None:
        node = getnode()
    return UUID(fields=(time_low, time_mid, time_hi_version,
                        clock_seq_hi_variant, clock_seq_low, node), version=1)
</snippet></ROW><ROW><id>7155111</id><snippet>p.figtext(0.5, 0.65,  str(slider1.val))</snippet></ROW><ROW><id>7155111</id><snippet>Text</snippet></ROW><ROW><id>7155111</id><snippet>Text</snippet></ROW><ROW><id>7155111</id><snippet>set_text()</snippet></ROW><ROW><id>7155111</id><snippet>import numpy as np
import pylab as p
from matplotlib.widgets import Slider

p.subplot(111) 
x = np.arange(0,500,1)
f = np.sin(x/100.0)
l11, = p.plot(f)

ax = p.axes([0.25, 0.05, 0.7, 0.03], axisbg='lightgoldenrodyellow')
slider1 = Slider(ax, 'amplitude', -1.0, 1.5, valinit=0)

# the text on the figure
fig_text = p.figtext(0.5, 0.65,  str(slider1.val))

def update(val):
    f = slider1.val*np.sin(x/100.0)
    l11.set_ydata(f)
    np.set_printoptions(precision=2)

    # update the value of the Text object
    fig_text.set_text(str(slider1.val))

    p.draw()

slider1.on_changed(update)
p.show()
</snippet></ROW><ROW><id>7155153</id><snippet>conn_string = "host='localhost' dbname='my_database' user='postgres' password='secret'"
conn = psycopg2.connect(conn_string)
</snippet></ROW><ROW><id>7155165</id><snippet>^\*([a-z]+)\s+([0-9]+)\*
</snippet></ROW><ROW><id>7155165</id><snippet>re</snippet></ROW><ROW><id>7155165</id><snippet>import re

my_string = """*select 65* description"""
match = re.match(r"^\*([a-z]+)\s+([0-9]+)\*", my_string)
specifier = match.group(1)
integer = int(match.group(2))
</snippet></ROW><ROW><id>7155169</id><snippet>print '\033[' + str(code) + 'm'
</snippet></ROW><ROW><id>7155169</id><snippet>print 'break'.join('\033[{0}mcolour\33[0m'.format(i) for i in range(30, 38))
</snippet></ROW><ROW><id>7155169</id><snippet>import re
colourFormat = '\033[{0}m'
colourStr = colourFormat.format(32)
resetStr = colourFormat.format(0)
s = "This is a sentence where I talk about interesting stuff like sencha tea."

lastMatch = 0
formattedText = ''
for match in re.finditer(r'sen\w+', s):
    start, end = match.span()
    formattedText += s[lastMatch: start]
    formattedText += colourStr
    formattedText += s[start: end]
    formattedText += resetStr
    lastMatch = end
formattedText += s[lastMatch:]

print formattedText
</snippet></ROW><ROW><id>7155309</id><snippet>nose</snippet></ROW><ROW><id>7155633</id><snippet>twistd web --wsgi</snippet></ROW><ROW><id>7155657</id><snippet>struct</snippet></ROW><ROW><id>7155657</id><snippet>namedtuple</snippet></ROW><ROW><id>7155657</id><snippet>namedtuple._asdict()</snippet></ROW><ROW><id>7155657</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; record = 'raymond   \x32\x12\x08\x01\x08'
&gt;&gt;&gt; Student = namedtuple('Student', 'name serialnum school gradelevel')
&gt;&gt;&gt; Student._asdict(Student._make(struct.unpack('&lt;10sHHb', record)))
{'school': 264, 'gradelevel': 8, 'name': 'raymond   ', 'serialnum': 4658}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7155657</id><snippet>_asdict()</snippet></ROW><ROW><id>7155657</id><snippet>OrderedDict</snippet></ROW><ROW><id>7155735</id><snippet>import numpy as np
np.random.seed(0)
# Make a random masked array
ar = np.ma.array(np.round(np.random.normal(50, 10, 20), 1),
                     mask=np.random.binomial(1, .2, 20)).reshape((4,5))
# Sort the array from lowest to highest, with a flattened index
sorted_ind = ar.argsort(axis=None)

tmp = ar.flatten()[sorted_ind]
print sorted_ind[np.ma.where(tmp&lt;=51.0)]
print sorted_ind[np.ma.where(tmp&gt;=51.0)]
</snippet></ROW><ROW><id>7155735</id><snippet>tmp = ar.flatten()[sorted_ind].compressed() # compressed() will delete all invalid data.
idx = np.searchsorted(tmp, 51.0)
print sorted_ind[:idx]
print sorted_ind[idx:len(tmp)]
</snippet></ROW><ROW><id>7155950</id><snippet>from lxml.html import fromstring

html = '''
&lt;font face="Garmond,Helvetica,Times" size="2" color="#330066"&gt;
&lt;b&gt;
 Summary:
&lt;/b&gt;
 According to the complaint filed January 04, 2011, over a six-week period in December 2007 and January 2008, six healthcare related hedge funds managed by Defendant FrontPoint Partners LLC ("FrontPoint") sold more than six million shares of Human Genome Sciences, Inc. ("HGSI") common stock while their portfolio manager possessed material negative non-public information concerning the HGSI's clinical trial for the drug Albumin Interferon Alfa 2-a.
&lt;br /&gt;
&lt;br /&gt;
On March 2, 2011, the plaintiffs filed a First Amended Class Action Complaint, amending the named defendants and securities violations.  On March 22, 2011, a motion for appointment as lead plaintiff and for approval of selection of lead counsel was filed.  The defendants responded to the First Amended Complaint by filing a motion to dismiss on March 28, 2011.
&lt;br /&gt;
&lt;hr width="50%" align="left" /&gt;
INDUSTRY CLASSIFICATION:
&lt;br /&gt;
&lt;b&gt;
 SIC Code:
&lt;/b&gt;
0000
&lt;br /&gt;
&lt;b&gt;
 Sector:
&lt;/b&gt;
N/A
&lt;br /&gt;
&lt;b&gt;
 Industry:
&lt;/b&gt;
N/A
&lt;br /&gt;
&lt;/font&gt;
'''

htmlElement = fromstring(html)
textContent = htmlElement.text_content()
result = textContent.split('\n\n Summary:\n\n')[1].split('\n\nINDUSTRY CLASSIFICATION:\n\n')[0]

print result
</snippet></ROW><ROW><id>7156106</id><snippet>mongo_keys = ["location.coords", "name"]
for k in mongo_keys:
    do_something(mongo_result[k])
</snippet></ROW><ROW><id>7156172</id><snippet>row['column']</snippet></ROW><ROW><id>7156172</id><snippet>row['class']</snippet></ROW><ROW><id>7156172</id><snippet>row.class</snippet></ROW><ROW><id>7156172</id><snippet>row.COUNT(*)</snippet></ROW><ROW><id>7156172</id><snippet>row['COUNT(*)']</snippet></ROW><ROW><id>7156172</id><snippet>AS</snippet></ROW><ROW><id>7156172</id><snippet>RowObj</snippet></ROW><ROW><id>7156172</id><snippet>class</snippet></ROW><ROW><id>7156172</id><snippet>row.widget, row.dingus, row['class']</snippet></ROW><ROW><id>7156600</id><snippet>from itertools import izip

file1 = open("test", "r")
file2 = open("test2", "r")

def lazy(file):
    for line in file:
        #do something with the line
        yield line

for lines in izip(lazy(file1), lazy(file2)):
    print lines
</snippet></ROW><ROW><id>7156869</id><snippet>client = smtplib.SMTP('127.0.0.1',&lt;yourportnumber for the receiving postfix instance&gt;)
client.sendmail(&lt;envelope from&gt;, &lt;envelope to&gt;, &lt;yourmessageobject&gt;.as_string())
</snippet></ROW><ROW><id>7157077</id><snippet>tokens = [
    ('text', 'This '),
    ('enter', 'code'),
        ('text', 'example'),
    ('exit', None),
    ('text', ' is '),
    ('enter', 'a'),
        ('text', 'neither'),
        ('attr', ('href', '/defn/neither')),
    ('exit', None),
    ('text', ' complete[1] '),
    ('enter', 'strong'),
        ('text', 'nor'),
    ('exit', None),
    ('text', ' trite, '),
    ('enter', 'strong'),
        ('text', 'though '),
        ('enter', 'em'),
            ('text', 'simple'),
        ('exit', None),
    ('exit', None),
    ('text', '.')
]
</snippet></ROW><ROW><id>7157392</id><snippet>folder = "C:\Documents and Settings\DuffA\Bureaublad\test"

import os # glob is unnecessary

for root, dirs, filenames in os.walk(folder):
    for filename in filenames:
        fullpath = os.path.join(root, filename)
        filename_split = os.path.splitext(fullpath) # filename and extensionname (extension in [1])
        filename_zero, fileext = filename_split
        os.rename(fullpath, filename_zero + "_manual" + fileext)
</snippet></ROW><ROW><id>7157392</id><snippet>folder = r"C:\Documents and Settings\DuffA\Bureaublad\test"
</snippet></ROW><ROW><id>7157392</id><snippet>\t</snippet></ROW><ROW><id>7157534</id><snippet>*</snippet></ROW><ROW><id>7157534</id><snippet>glob</snippet></ROW><ROW><id>7157534</id><snippet>shell=True</snippet></ROW><ROW><id>7157534</id><snippet>#!/usr/bin/python
import subprocess
import shlex
import glob

cmd = 'sudo rm -rf /work/TEST/*'
arg = shlex.split(cmd)
arg = arg[:-1] + glob.glob(arg[-1])

# This should work now
p = subprocess.Popen(arg)
</snippet></ROW><ROW><id>7157534</id><snippet>cmd = 'sudo rm -rf'
basearg = shlex.split(cmd)
arg = basearg + glob.glob(path+"/*")
</snippet></ROW><ROW><id>7157615</id><snippet>mod_wsgi</snippet></ROW><ROW><id>7157615</id><snippet>mod_wsgi</snippet></ROW><ROW><id>7157615</id><snippet>mod_wsgi</snippet></ROW><ROW><id>7158370</id><snippet>block_diag</snippet></ROW><ROW><id>7158370</id><snippet>v0.8.0</snippet></ROW><ROW><id>7158370</id><snippet>def block_diag(*arrs):
    """Create a block diagonal matrix from the provided arrays.

    Given the inputs `A`, `B` and `C`, the output will have these
    arrays arranged on the diagonal::

        [[A, 0, 0],
         [0, B, 0],
         [0, 0, C]]

    If all the input arrays are square, the output is known as a
    block diagonal matrix.

    Parameters
    ----------
    A, B, C, ... : array-like, up to 2D
        Input arrays.  A 1D array or array-like sequence with length n is
        treated as a 2D array with shape (1,n).

    Returns
    -------
    D : ndarray
        Array with `A`, `B`, `C`, ... on the diagonal.  `D` has the
        same dtype as `A`.

    References
    ----------
    .. [1] Wikipedia, "Block matrix",
           http://en.wikipedia.org/wiki/Block_diagonal_matrix

    Examples
    --------
    &gt;&gt;&gt; A = [[1, 0],
    ...      [0, 1]]
    &gt;&gt;&gt; B = [[3, 4, 5],
    ...      [6, 7, 8]]
    &gt;&gt;&gt; C = [[7]]
    &gt;&gt;&gt; print(block_diag(A, B, C))
    [[1 0 0 0 0 0]
     [0 1 0 0 0 0]
     [0 0 3 4 5 0]
     [0 0 6 7 8 0]
     [0 0 0 0 0 7]]
    &gt;&gt;&gt; block_diag(1.0, [2, 3], [[4, 5], [6, 7]])
    array([[ 1.,  0.,  0.,  0.,  0.],
           [ 0.,  2.,  3.,  0.,  0.],
           [ 0.,  0.,  0.,  4.,  5.],
           [ 0.,  0.,  0.,  6.,  7.]])

    """
    if arrs == ():
        arrs = ([],)
    arrs = [np.atleast_2d(a) for a in arrs]

    bad_args = [k for k in range(len(arrs)) if arrs[k].ndim &gt; 2]
    if bad_args:
        raise ValueError("arguments in the following positions have dimension "
                            "greater than 2: %s" % bad_args) 

    shapes = np.array([a.shape for a in arrs])
    out = np.zeros(np.sum(shapes, axis=0), dtype=arrs[0].dtype)

    r, c = 0, 0
    for i, (rr, cc) in enumerate(shapes):
        out[r:r + rr, c:c + cc] = arrs[i]
        r += rr
        c += cc
    return out
</snippet></ROW><ROW><id>7158401</id><snippet>def getlink(url):
    content = urllib.urlopen(url).readlines()  
    return content[425].split('"')[7]  
</snippet></ROW><ROW><id>7158401</id><snippet>x+=1 # increment x by 1</snippet></ROW><ROW><id>7158464</id><snippet># Python 2.7

import urllib

url = 'http://www.boursorama.com/includes/cours/last_transactions.phtml?symbole=1xEURUS'
sock = urllib.urlopen(url)
content = sock.read() 
sock.close()

print content
</snippet></ROW><ROW><id>7158464</id><snippet># Python 2.7

import httplib

conn = httplib.HTTPConnection(host='www.boursorama.com',timeout=30)

req = '/includes/cours/last_transactions.phtml?symbole=1xEURUS'

try:
    conn.request('GET',req)
except:
     print 'echec de connexion'

content = conn.getresponse().read()

print content
</snippet></ROW><ROW><id>7158464</id><snippet>httplib</snippet></ROW><ROW><id>7158464</id><snippet>http.client</snippet></ROW><ROW><id>7158464</id><snippet>        &lt;td class="L20" width="33%" align="center"&gt;11:57:44&lt;/td&gt;

        &lt;td class="L20" width="33%" align="center"&gt;1.4486&lt;/td&gt;

        &lt;td class="L20" width="33%" align="center"&gt;0&lt;/td&gt;

&lt;/tr&gt;

                                        &lt;tr&gt;

        &lt;td  width="33%" align="center"&gt;11:57:43&lt;/td&gt;

        &lt;td  width="33%" align="center"&gt;1.4486&lt;/td&gt;

        &lt;td  width="33%" align="center"&gt;0&lt;/td&gt;

&lt;/tr&gt;
</snippet></ROW><ROW><id>7158464</id><snippet>for i,line in enumerate(content.splitlines(True)):
    print str(i)+' '+repr(line)

print '\n\n'


import re

regx = re.compile('\t\t\t\t\t\t&lt;td class="(?:gras )?L20" width="33%" align="center"&gt;(\d\d:\d\d:\d\d)&lt;/td&gt;\r\n'
                  '\t\t\t\t\t\t&lt;td class="(?:gras )?L20" width="33%" align="center"&gt;([\d.]+)&lt;/td&gt;\r\n'
                  '\t\t\t\t\t\t&lt;td class="(?:gras )?L20" width="33%" align="center"&gt;(\d+)&lt;/td&gt;\r\n')

print regx.findall(content)
</snippet></ROW><ROW><id>7158464</id><snippet>.......................................
.......................................
.......................................
.......................................
98 'window.config.graphics = {};\n'
99 'window.config.accordions = {};\n'
100 '\n'
101 "window.addEvent('domready', function(){\n"
102 '});\n'
103 '&lt;/script&gt;\n'
104 '&lt;script type="text/javascript"&gt;\n'
105 '\t\t\t\tsas_tmstp = Math.round(Math.random()*10000000000);\n'
106 '\t\t\t\tsas_pageid = "177/(includes/cours/last_transactions)"; // Page : boursorama.com/smartad_test\n'
107 '\t\t\t\tvar sas_formatids = "8968";\n'
108 '\t\t\t\tsas_target = "symb=1xEURUS#"; // TargetingArray\n'
109 '\t\t\t\tdocument.write("&lt;scr"+"ipt src=\\"http://ads.boursorama.com/call2/pubjall/" + sas_pageid + "/" + sas_formatids + "/" + sas_tmstp + "/" + escape(sas_target) + "?\\"&gt;&lt;/scr"+"ipt&gt;");\t\t\t\t\n'
110 '\t\t\t&lt;/script&gt;&lt;div id="_smart1"&gt;&lt;script language="javascript"&gt;sas_script(1,8968);&lt;/script&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;\r\n'
111 "\twindow.addEvent('domready', function(){\r\n"
112 'sas_move(1,8968);\t});\r\n'
113 '&lt;/script&gt;\n'
114 '&lt;script type="text/javascript"&gt;\n'
115 'var _gaq = _gaq || [];\n'
116 "_gaq.push(['_setAccount', 'UA-1623710-1']);\n"
117 "_gaq.push(['_setDomainName', 'www.boursorama.com']);\n"
118 "_gaq.push(['_setCustomVar', 1, 'segment', 'WEB-VISITOR']);\n"
119 "_gaq.push(['_setCustomVar', 4, 'version', '18']);\n"
120 "_gaq.push(['_trackPageLoadTime']);\n"
121 "_gaq.push(['_trackPageview']);\n"
122 '(function() {\n'
123 "var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n"
124 "ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n"
125 "var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n"
126 '})();\n'
127 '&lt;/script&gt;\n'
128 '&lt;/body&gt;\n'
129 '&lt;/html&gt;'



[('12:25:36', '1.4478', '0'), ('12:25:33', '1.4478', '0'), ('12:25:31', '1.4478', '0'), ('12:25:30', '1.4478', '0'), ('12:25:30', '1.4478', '0'), ('12:25:29', '1.4478', '0')]
</snippet></ROW><ROW><id>7159260</id><snippet>QWidget</snippet></ROW><ROW><id>7159260</id><snippet>QMainWindow</snippet></ROW><ROW><id>7159260</id><snippet>class MyForm(QtGui.QMainWindow)
</snippet></ROW><ROW><id>7159260</id><snippet>class MyForm(QtGui.QWidget)
</snippet></ROW><ROW><id>7159479</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>7159479</id><snippet>&lt;form method="POST" action="/do_login"&gt;
</snippet></ROW><ROW><id>7159479</id><snippet>/do_login</snippet></ROW><ROW><id>7159482</id><snippet>is_alive</snippet></ROW><ROW><id>7159482</id><snippet>is_alive</snippet></ROW><ROW><id>7159482</id><snippet>t.is_alive()</snippet></ROW><ROW><id>7159482</id><snippet>t</snippet></ROW><ROW><id>7159482</id><snippet>class History(threading.Thread):
    def __init__(self,*args,**kwargs):
        threading.Thread.__init__(self,*args,**kwargs)

    def run(self):
        #do some stuff

threads=[History(name="name%s"%i) for i in range(10)]
for t in threads:
    t.start()

while threads[5].is_alive():
    ...
</snippet></ROW><ROW><id>7159508</id><snippet>(lines)+'.txt'</snippet></ROW><ROW><id>7159508</id><snippet>lines.strip() + '.txt'</snippet></ROW><ROW><id>7159682</id><snippet>import urllib2
url = 'http://phihag.de/2011/so/303/'
print(urllib2.urlopen(url).read())
</snippet></ROW><ROW><id>7159682</id><snippet>urllib2.build_opener</snippet></ROW><ROW><id>7159682</id><snippet>BaseHandler</snippet></ROW><ROW><id>7159682</id><snippet>HTTPRedirectHandler</snippet></ROW><ROW><id>7159709</id><snippet>from urllib2 import *

req = Request(url)

# Try to open the url
try: 
    reponse = urlopen(req)
except HTTPError, e:
    url = None
except URLError, e:
    url = None
</snippet></ROW><ROW><id>7159726</id><snippet>glob</snippet></ROW><ROW><id>7159726</id><snippet>import glob,os.path
filesDepth3 = glob.glob('*/*/*')
dirsDepth3 = filter(lambda f: os.path.isdir(f), filesDepth3)
</snippet></ROW><ROW><id>7159726</id><snippet>os.walk</snippet></ROW><ROW><id>7159726</id><snippet>import os,string
path = '.'
path = os.path.normpath(path)
res = []
for root,dirs,files in os.walk(path, topdown=True):
    depth = root[len(path) + len(os.path.sep):].count(os.path.sep)
    if depth == 2:
        # We're currently two directories in, so all subdirs have depth 3
        res += [os.path.join(root, d) for d in dirs]
        dirs[:] = [] # Don't recurse any deeper
print(res)
</snippet></ROW><ROW><id>7160356</id><snippet>In [15]: B = np.array([[2],[4]])

In [16]: b = np.array([[4],[4]])

In [18]: x,resid,rank,s = np.linalg.lstsq(B,b)

In [19]: x
Out[19]: array([[ 1.2]])
</snippet></ROW><ROW><id>7160626</id><snippet>http://www.boost.org/
</snippet></ROW><ROW><id>7160626</id><snippet>sudo apt-get install libboost-python1.42-dev
</snippet></ROW><ROW><id>7160626</id><snippet>sudo apt-get install boost-1-47-0 libboost-all-dev
</snippet></ROW><ROW><id>7160778</id><snippet>regex = re.compile(
        r'^(?:http|ftp)s?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
        r'localhost|' #localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
</snippet></ROW><ROW><id>7160903</id><snippet>arr</snippet></ROW><ROW><id>7160903</id><snippet>with open("data.dat","w") as f:
    f.write(' '.join(map(str,arr)))
</snippet></ROW><ROW><id>7160903</id><snippet>numpy</snippet></ROW><ROW><id>7160903</id><snippet>np.savetxt</snippet></ROW><ROW><id>7160903</id><snippet>np.savetxt('data.dat',(arr,),delimiter=' ',fmt='%g')
</snippet></ROW><ROW><id>7161030</id><snippet>try:
   #stuff
except:
   # do some stuff
</snippet></ROW><ROW><id>7161030</id><snippet>try:
   #stuff
except Exception:
   # do some stuff
</snippet></ROW><ROW><id>7161030</id><snippet>try:
   #stuff
except FirstExceptionBaseClassYouWantToCatch as exc:
   # do some stuff
except SecondExceptionBaseClassYouWantToCatch as exc:
   # do some other stuff based
except (ThirdExceptionBaseClassYouWantToCatch, FourthExceptionBaseClassYouWantToCatch) as exc:
   # do some other stuff based
</snippet></ROW><ROW><id>7161453</id><snippet>import os
pathiter = (os.path.join(root, filename)
    for root, _, filenames in os.walk(folder)
    for filename in filenames
)
for path in pathiter:
    newname =  path.replace('ES.txt', '_ES_manual.txt')
    if newname != path:
        os.rename(path,newname)
</snippet></ROW><ROW><id>7161746</id><snippet>subprocess</snippet></ROW><ROW><id>7161757</id><snippet>from django.views.decorators.cache import cache_page

@cache_page(60 * 15)
def my_view(request):
    ...
</snippet></ROW><ROW><id>7162308</id><snippet>def add(a, b): return a + b</snippet></ROW><ROW><id>7162308</id><snippet>a</snippet></ROW><ROW><id>7162308</id><snippet>b</snippet></ROW><ROW><id>7162308</id><snippet>+</snippet></ROW><ROW><id>7162308</id><snippet>add</snippet></ROW><ROW><id>7162308</id><snippet>rlib.parsing</snippet></ROW><ROW><id>7162308</id><snippet>"NOT_RPYTHON"</snippet></ROW><ROW><id>7162404</id><snippet># in /a/b/c/d/e/file.py
import os
os.path.dirname(os.path.abspath(__file__)) # /a/b/c/d/e
</snippet></ROW><ROW><id>7162844</id><snippet>import os
for direc in direc_list:        
    if direc.startswith(new_direc + os.sep):
        dir_list.remove(direc)
</snippet></ROW><ROW><id>7162848</id><snippet>file_contents = open(file).readlines()  #file as list
"""use zip to get the entire file as list of 5-line chunk tuples""" 
five_line_increments = zip(*[iter(file_contents)]*5) 
for chunk in five_line_increments:  #for each 5-line chunk...
    word_freq = {} #word frequencies for each chunk
    for sentence in chunk:          #...and for each sentence in that chunk
        words = "".join(sentence.split('\t')[3]).strip('\n').split(', ') #get the ITEMS column at index 3 and put them in list
        for word in words:
            if word not in word_freq:
                word_freq[word] = 1
            else:
                word_freq[word] += 1


    print word_freq
</snippet></ROW><ROW><id>7162848</id><snippet>{'word4': 1, 'word1': 4, 'word3': 2, 'word2': 4}
</snippet></ROW><ROW><id>7162857</id><snippet>time</snippet></ROW><ROW><id>7162998</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input = "foo%22somedata%2Bgoeshere%22testbarbaz"
&gt;&gt;&gt; re.findall('foo%22.*?(?=%22)', input)
['foo%22somedata%2Bgoeshere']
</snippet></ROW><ROW><id>7163087</id><snippet>requests</snippet></ROW><ROW><id>7163087</id><snippet>with requests.session() as s: 
    s.post(url, data=user_data)
    r = s.get(url_2)
</snippet></ROW><ROW><id>7163274</id><snippet>initdequeue</snippet></ROW><ROW><id>7163274</id><snippet>def initdeque(p):
  p.left = p.right = None
</snippet></ROW><ROW><id>7163274</id><snippet>class deque(Structure):
  _fields_ = [("left",POINTER(node)), ("right",POINTER(node))]

  def __init__(self):
    self.left = self.right = None
</snippet></ROW><ROW><id>7163274</id><snippet> p = dequeue()
</snippet></ROW><ROW><id>7163466</id><snippet>In [7]: old_map = [[-1, 2], [5, -3], [2, 3], [1, -1], [7, 1]]

In [8]: new_map=[[x,y] for x,y in a_map if not (x&lt;0 or y&lt;0)]

In [9]: new_map
Out[9]: [[2, 3], [7, 1]]
</snippet></ROW><ROW><id>7163466</id><snippet>old_map = new_map</snippet></ROW><ROW><id>7163466</id><snippet>the_map = [[-1, 2], [5, -3], [2, 3], [1, -1], [7, 1]]
for i in range(len(the_map)-1,-1,-1):
    pair=the_map[i]
    for coord in pair:
        if coord &lt; 0:
            del the_map[i]

print(the_map)
</snippet></ROW><ROW><id>7163466</id><snippet>[[2, 3], [7, 1]]
</snippet></ROW><ROW><id>7163466</id><snippet>map</snippet></ROW><ROW><id>7163545</id><snippet>print ('%3d'*len(nums)) % tuple(nums)
</snippet></ROW><ROW><id>7163965</id><snippet>communicate</snippet></ROW><ROW><id>7163965</id><snippet>terminate</snippet></ROW><ROW><id>7163965</id><snippet>[,'-w', '-']</snippet></ROW><ROW><id>7163965</id><snippet>[... , '-w -', ..]</snippet></ROW><ROW><id>7163965</id><snippet>pcap_process = subprocess.Popen(['tcpdump', '-s', '0', '-w', '-', 'tcp'],
                                  stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>7164126</id><snippet>select * from table limit 10
select * from table limit 10 offset 10
select * from table order by x limit 10
</snippet></ROW><ROW><id>7164126</id><snippet>class Table(models.Model):
    ...
    class Meta:
        ordering = ['name']
</snippet></ROW><ROW><id>7164180</id><snippet>itertools.product</snippet></ROW><ROW><id>7164180</id><snippet>import itertools
for a,b,c in itertools.product([0, 1], repeat=3):
  # do something
</snippet></ROW><ROW><id>7164202</id><snippet>def last_character(string):
    try:
       return string[-1]
    except IndexError:
       return ' '

while last_character(mystring) == '!'
    mystring = mystring[:-1]
return mystring
</snippet></ROW><ROW><id>7164236</id><snippet>from lxml.etree import fromstring, tostring
</snippet></ROW><ROW><id>7164274</id><snippet>from package import *</snippet></ROW><ROW><id>7164274</id><snippet>from package import X,Y,Z</snippet></ROW><ROW><id>7164274</id><snippet>import package</snippet></ROW><ROW><id>7164274</id><snippet>import package</snippet></ROW><ROW><id>7164274</id><snippet>package</snippet></ROW><ROW><id>7164274</id><snippet>something()</snippet></ROW><ROW><id>7164274</id><snippet>package.something()</snippet></ROW><ROW><id>7164274</id><snippet>package.blabla.woohoo.func()</snippet></ROW><ROW><id>7164274</id><snippet>import package.blabla.woohoo</snippet></ROW><ROW><id>7164274</id><snippet>package.blabla.woohoo.func()</snippet></ROW><ROW><id>7164274</id><snippet>from package.blabla import woohoo</snippet></ROW><ROW><id>7164274</id><snippet>woohoo.func()</snippet></ROW><ROW><id>7164274</id><snippet>from package.blabla.woohoo import func</snippet></ROW><ROW><id>7164274</id><snippet>func()</snippet></ROW><ROW><id>7164274</id><snippet>import package.blabla.woohoo
package.blabla.woohoo.func()

from package.blabla import woohoo
woohoo.func()

from package.blabla.woohoo import func
func()
</snippet></ROW><ROW><id>7164305</id><snippet>% cat -n /tmp/py
     1  #!/usr/bin/env python3.2
     2  # -*- coding: UTF-8 -*-
     3  
     4  from __future__ import unicode_literals
     5  from __future__ import print_function
     6  
     7  import sys
     8  import os
     9  import re
    10  
    11  if not (("PYTHONIOENCODING" in os.environ)
    12              and
    13          re.search("^utf-?8$", os.environ["PYTHONIOENCODING"], re.I)):
    14      sys.stderr.write(sys.argv[0] + ": Please set your PYTHONIOENCODING envariable to utf8\n")
    15      sys.exit(1)
    16  
    17  print('1a: el ni\xF1o')
    18  print('2a: el nin\u0303o')
    19  
    20  print('1a: el niño')
    21  print('2b: el niño')
    22  
    23  print('1c: el ni\N{LATIN SMALL LETTER N WITH TILDE}o')
    24  print('2c: el nin\N{COMBINING TILDE}o')
</snippet></ROW><ROW><id>7164305</id><snippet>\x{⋯}</snippet></ROW><ROW><id>7164305</id><snippet>% grep -n ^print /tmp/py | uniquote -x
17:print('1a: el ni\xF1o')
18:print('2a: el nin\u0303o')
20:print('1b: el ni\x{F1}o')
21:print('2b: el nin\x{303}o')
23:print('1c: el ni\N{LATIN SMALL LETTER N WITH TILDE}o')
24:print('2c: el nin\N{COMBINING TILDE}o')
</snippet></ROW><ROW><id>7164305</id><snippet>% python /tmp/py
1a: el niño
2a: el niño
1b: el niño
2b: el niño
1c: el niño
2c: el niño

% python /tmp/py | uniquote -x
1a: el ni\x{F1}o
2a: el nin\x{303}o
1b: el ni\x{F1}o
2b: el nin\x{303}o
1c: el ni\x{F1}o
2c: el nin\x{303}o

% python /tmp/py | uniquote -v
1a: el ni\N{LATIN SMALL LETTER N WITH TILDE}o
2a: el nin\N{COMBINING TILDE}o
1b: el ni\N{LATIN SMALL LETTER N WITH TILDE}o
2b: el nin\N{COMBINING TILDE}o
1c: el ni\N{LATIN SMALL LETTER N WITH TILDE}o
2c: el nin\N{COMBINING TILDE}o
</snippet></ROW><ROW><id>7164305</id><snippet>% python /tmp/py | uniquote -b
1a: el ni\xC3\xB1o
2a: el nin\xCC\x83o
1b: el ni\xC3\xB1o
2b: el nin\xCC\x83o
1c: el ni\xC3\xB1o
2c: el nin\xCC\x83o
</snippet></ROW><ROW><id>7164425</id><snippet>import numpy as np
minval = np.min(a[np.nonzero(a)])
maxval = np.max(a[np.nonzero(a)])
</snippet></ROW><ROW><id>7164425</id><snippet>a</snippet></ROW><ROW><id>7164676</id><snippet>def myview(request):
    # do stuff
    if 'myvariable.checkboxoption' in request.REQUEST:
        option_checked = True
    else:
        option_checked = False
    # do more stuff and return the response
</snippet></ROW><ROW><id>7164897</id><snippet>import requests

cookie = {'enwiki_session': '17ab96bd8ffbe8ca58a78657a918558'}

r = requests.post('http://wikipedia.org', cookies=cookie)
</snippet></ROW><ROW><id>7165010</id><snippet>from google.appengine.ext.appstats import recording
recording.recorder.record_custom_event('hello', 'data')
</snippet></ROW><ROW><id>7165510</id><snippet>import socket, select

sock_producer = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock_producer.bind(('localhost', 5000))
sock_producer.listen(5)
producers = []    

clients = []
sock_consumer_listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Note: different port to differentiate the clients who receive data from the one who sends messages
sock_consumer_listener.bind(('localhost', 5001))

rlist = [sock_producer, sock_listener]
wlist = []
errlist = []

out_buffer = []

while True:
    r, w, err = select.select(rlist, wlist, errlist)
    for sock in r:
        if sock == sock_producer:
            prod, addr = sock.accept()
            producers.append(prod)
            rlist.append(prod)
         elif sock == sock_consumer_listener:
            cons, addr = sock.accept()
            clients.append(cons)
            wlist.append(cons)
         else:
            out_buffer.append(sock.recv(1024))

     out_string = ''.join(out_buffer)
     out_buffer = []

     for sock in w:
         if sock in clients:
             sock.send(out_string)
</snippet></ROW><ROW><id>7165575</id><snippet>code.interact(local=locals())
</snippet></ROW><ROW><id>7165689</id><snippet>import re

s = '''Aug 23, 2011 10:31:35 AM This is the start of the text.
      This is more Text.
This is another line
This is another line
      This is more.
Aug 23, 2011 10:41:00 AM This is the next in the series.
This is another line
      This is more Text.
This is another line
      This is another line
      This is more.
Aug 24, 2011 10:41:00 AM This is the next in the series.
This is another line
      This is more Text.
This is another line
      This is another line
      This is more. '''


months = '(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'
ch = '%s \d\d?, \d{4} \d\d:\d\d:\d\d (?:AM|am|PM|pm)' % months


regx = re.compile('%s.*?(?=%s|\Z)' % (ch,ch), re.DOTALL)

for x in regx.findall(s):
    print repr(x)
    print
</snippet></ROW><ROW><id>7165689</id><snippet>'Aug 23, 2011 10:31:35 AM This is the start of the text.\n      This is more Text.\nThis is another line\nThis is another line\n      This is more.\n'

'Aug 23, 2011 10:41:00 AM This is the next in the series.\nThis is another line\n      This is more Text.\nThis is another line\n      This is another line\n      This is more.\n'

'Aug 24, 2011 10:41:00 AM This is the next in the series.\nThis is another line\n      This is more Text.\nThis is another line\n      This is another line\n      This is more. '
</snippet></ROW><ROW><id>7165689</id><snippet>re</snippet></ROW><ROW><id>7165689</id><snippet>(...)</snippet></ROW><ROW><id>7165689</id><snippet>?:</snippet></ROW><ROW><id>7165689</id><snippet>(?:......)</snippet></ROW><ROW><id>7165689</id><snippet>(?=....)</snippet></ROW><ROW><id>7165689</id><snippet>?=</snippet></ROW><ROW><id>7165689</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7165877</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>7165877</id><snippet>import numpy as np
import scipy.optimize as optimize
import matplotlib.pylab as plt

def func(kd,p0,l0):
    return 0.5*(-1-((p0+l0)/kd) + np.sqrt(4*(l0/kd)+(((l0-p0)/kd)-1)**2))
</snippet></ROW><ROW><id>7165877</id><snippet>residuals</snippet></ROW><ROW><id>7165877</id><snippet>kd</snippet></ROW><ROW><id>7165877</id><snippet>def residuals(kd,p0,l0,PLP):
    return PLP - func(kd,p0,l0)
</snippet></ROW><ROW><id>7165877</id><snippet>N=1000
kd_guess=3.5  # &lt;-- You have to supply a guess for kd
p0 = np.linspace(0,10,N)
l0 = np.linspace(0,10,N)
PLP = func(kd_guess,p0,l0)+(np.random.random(N)-0.5)*0.1

kd,cov,infodict,mesg,ier = optimize.leastsq(
    residuals,kd_guess,args=(p0,l0,PLP),full_output=True,warning=True)

print(kd)
</snippet></ROW><ROW><id>7165877</id><snippet>3.49914274899
</snippet></ROW><ROW><id>7165877</id><snippet>kd</snippet></ROW><ROW><id>7165877</id><snippet>optimize.leastsq</snippet></ROW><ROW><id>7165877</id><snippet>PLP</snippet></ROW><ROW><id>7165877</id><snippet>kd</snippet></ROW><ROW><id>7165877</id><snippet>PLP_fit=func(kd,p0,l0)
</snippet></ROW><ROW><id>7165877</id><snippet>PLP</snippet></ROW><ROW><id>7165877</id><snippet>p0</snippet></ROW><ROW><id>7165877</id><snippet>plt.plot(p0,PLP,'-b',p0,PLP_fit,'-r')
plt.show()
</snippet></ROW><ROW><id>7166057</id><snippet>import gtk

about = gtk.AboutDialog()
about.set_program_name("name")
about.set_version("0.0.1")
about.set_logo(gtk.gdk.pixbuf_new_from_file("file.png"))
about.show()

vbox = about.get_children()[0].get_children()[0]  # vbox containing everything but the buttons at the bottom
label = vbox.get_children()[1] # Label containing name and version
alignment = gtk.Alignment(xalign=0.5, yalign=0.5)
alignment.set_padding(100, 0, 0, 0)
alignment.show()

vbox.remove(label)
alignment.add(label)
vbox.add(alignment)
vbox.reorder_child(alignment, 1)  # Put it back in the correct order, rather than below the URL and stuff

gtk.main()
</snippet></ROW><ROW><id>7166368</id><snippet>cProfile</snippet></ROW><ROW><id>7166368</id><snippet>profile</snippet></ROW><ROW><id>7166368</id><snippet>PyCallGraph</snippet></ROW><ROW><id>7166368</id><snippet>import cProfile
cProfile.run('myFunction()', 'myFunction.profile')
</snippet></ROW><ROW><id>7166368</id><snippet>import pstats
stats = pstats.Stats('myFunction.profile')
stats.strip_dirs().sort_stats('time').print_stats()
</snippet></ROW><ROW><id>7166368</id><snippet>PyCallGraph</snippet></ROW><ROW><id>7166368</id><snippet>pycallgraph ./myprogram.py
</snippet></ROW><ROW><id>7166368</id><snippet>map</snippet></ROW><ROW><id>7166368</id><snippet>reduce</snippet></ROW><ROW><id>7166368</id><snippet>filter</snippet></ROW><ROW><id>7166368</id><snippet>for x in xrange(0, 100):
    doSomethingWithX(x)
</snippet></ROW><ROW><id>7166368</id><snippet>map(doSomethingWithX, xrange(0,100))
</snippet></ROW><ROW><id>7166368</id><snippet>doSomethingWithX</snippet></ROW><ROW><id>7166368</id><snippet>try:</snippet></ROW><ROW><id>7166368</id><snippet>if</snippet></ROW><ROW><id>7166368</id><snippet>if somethingcrazy_happened:
     uhOhBetterDoSomething()
else:
     doWhatWeNormallyDo()
</snippet></ROW><ROW><id>7166368</id><snippet>doWhatWeNormallyDo()</snippet></ROW><ROW><id>7166368</id><snippet>try:
    doWhatWeNormallyDo()
except SomethingCrazy:
    uhOhBetterDoSomething()
</snippet></ROW><ROW><id>7166368</id><snippet>somethingcrazy_happened</snippet></ROW><ROW><id>7166368</id><snippet>global</snippet></ROW><ROW><id>7166368</id><snippet>def foo():
    if condition_that_rarely_changes:
         doSomething()
    else:
         doSomethingElse()
</snippet></ROW><ROW><id>7166368</id><snippet>foo = doSomething # now foo() calls doSomething()
</snippet></ROW><ROW><id>7166368</id><snippet>foo = doSomethingElse # now foo() calls doSomethingElse()
</snippet></ROW><ROW><id>7166417</id><snippet>matplotlib</snippet></ROW><ROW><id>7166417</id><snippet>figure.add_subplot()</snippet></ROW><ROW><id>7166417</id><snippet>figure.add_subplot()</snippet></ROW><ROW><id>7166417</id><snippet>import matplotlib.pyplot as plt

#Create an 11x5 figure
fig = plt.figure(figsize=(11,5))

#Create subplots[0]
subplts = []
subplt = fig.add_subplot(121)
subplts.append(subplt)

#Create subplots[1:20]
for xind in range(4,8):
    for yind in range(0,5):
        subplt = fig.add_subplot(5,8,(yind*8+xind))
        subplts.append(subplt)

plt.show()
</snippet></ROW><ROW><id>7166417</id><snippet>add_subplot</snippet></ROW><ROW><id>7166417</id><snippet>subplots</snippet></ROW><ROW><id>7166844</id><snippet>&gt;&gt;&gt; x
array([[ 0.   ,  0.125,  0.25 ],
       [ 0.375,  0.5  ,  0.625],
       [ 0.75 ,  0.875,  1.   ]])
&gt;&gt;&gt; s = x.tostring()
&gt;&gt;&gt; numpy.fromstring(s)
array([ 0.   ,  0.125,  0.25 ,  0.375,  0.5  ,  0.625,  0.75 ,  0.875,  1.   ])
&gt;&gt;&gt; y = numpy.fromstring(s).reshape((3, 3))
&gt;&gt;&gt; y
array([[ 0.   ,  0.125,  0.25 ],
       [ 0.375,  0.5  ,  0.625],
       [ 0.75 ,  0.875,  1.   ]])
</snippet></ROW><ROW><id>7167270</id><snippet>class MyResource(Resource):
  # ...
  def render(self, request):
    session = request.getSession()
    if not hasattr(session, 'count'):
      session.count = itertools.count()
    request.write(u"Count is %s" % (session.count.next(),))
</snippet></ROW><ROW><id>7167436</id><snippet>import csv
writer = csv.writer(open("test_out.csv", 'wt'))
l1 = ['a', 'b', 'c']
l2 = [n for n in xrange(len(l1))]
for row in xrange(len(l1)):
    writer.writerow([l1[row], l2[row]])
</snippet></ROW><ROW><id>7167731</id><snippet>readlines()</snippet></ROW><ROW><id>7167731</id><snippet>with open('txt', 'r') as f:
    myList = [ line for line in f if blablablabla ]
</snippet></ROW><ROW><id>7167816</id><snippet>...
except urllib.error.URLError, e:
    print type(e.reason)
</snippet></ROW><ROW><id>7167816</id><snippet>&lt;class 'socket.timeout'&gt;</snippet></ROW><ROW><id>7167816</id><snippet>try:
  data = urllib2.urlopen("http://www.abcnonexistingurlxyz.com")
except Exception,e:
  print type(e.reason)
... 
&lt;class 'socket.timeout'&gt;
</snippet></ROW><ROW><id>7167848</id><snippet>version</snippet></ROW><ROW><id>7167848</id><snippet>updates1.version &gt; updates2.version</snippet></ROW><ROW><id>7167848</id><snippet>sqlite_create_function()</snippet></ROW><ROW><id>7167875</id><snippet>var js_list = {{django_list}}; 
</snippet></ROW><ROW><id>7167875</id><snippet>var js_list = "{{django_list}}";
</snippet></ROW><ROW><id>7167875</id><snippet> var myJSONList = (("{{json_list}}").replace(/&amp;(l|g|quo)t;/g, function(a,b){
                return {
                    l   : '&lt;',
                    g   : '&gt;',
                    quo : '"'
                }[b];
            }));

 myData = JSON.parse( myJSONList );
</snippet></ROW><ROW><id>7167875</id><snippet>var js_list = "{{json_list|safe}}"; 
</snippet></ROW><ROW><id>7167875</id><snippet>var myDjangoList = (("{{django_list |safe}}").replace(/&amp;(l|g|quo)t;/g, function(a,b){
            return {
                l   : '&lt;',
                g   : '&gt;',
                quo : '"'
            }[b];
        }));

myDjangoList = myDjangoList.replace(/u'/g, '\'')
myDjangoList = myDjangoList.replace(/'/g, '\"')

myData = JSON.parse( myDjangoList );
</snippet></ROW><ROW><id>7168028</id><snippet>def getchildren(node, ignore_nodes=[]):
    child_nodes = []
    for child in node.children():
        if child in ignore_nodes:
            continue
        child_nodes.append(child)
        ignore_nodes.append(child)
        nodes, ignore_nodes = getchildren(child, ignore_nodes)
        child_nodes.extend(nodes)
    return child_nodes, ignore_nodes
</snippet></ROW><ROW><id>7168429</id><snippet>myFunctionMap</snippet></ROW><ROW><id>7168429</id><snippet>2G_Functions</snippet></ROW><ROW><id>7168429</id><snippet>3G_Functions</snippet></ROW><ROW><id>7168429</id><snippet>myFunctionMap = {
  "2G_Functions" : { ... },
  "3G_Functions" : { ... },
}

for (name, functions) in myFunctionMap.iteritems():
  print name
  for func in functions.keys():
    print func
</snippet></ROW><ROW><id>7168490</id><snippet>tree.iter()</snippet></ROW><ROW><id>7168490</id><snippet>wsr</snippet></ROW><ROW><id>7168490</id><snippet>{http://earth.google.com/kml/2.0}wsr</snippet></ROW><ROW><id>7168490</id><snippet>list(tree.iter('{http://earth.google.com/kml/2.0}wsr'))
</snippet></ROW><ROW><id>7168647</id><snippet>def function_that_downloads(my_args):
    # do some long download here
</snippet></ROW><ROW><id>7168647</id><snippet>import threading
def my_inline_function(some_args):
    #do some stuff
    download_thread = threading.Thread(target=function_that_downloads, args=my_args)
    download_thread.start()
    #continue doing stuff
</snippet></ROW><ROW><id>7168647</id><snippet>download_thread.isAlive()</snippet></ROW><ROW><id>7168796</id><snippet>__main__</snippet></ROW><ROW><id>7168796</id><snippet>import unittest 
from mypackage.mytests import *
</snippet></ROW><ROW><id>7168796</id><snippet>import unittest
from mypackage.mytests import Test as Test1
from mypackage.mytests2 import Test as Test2
...
</snippet></ROW><ROW><id>7169033</id><snippet>1 2   times   5 6
3 4           7 8
</snippet></ROW><ROW><id>7169033</id><snippet>[1 2] x 5 
        7
</snippet></ROW><ROW><id>7169174</id><snippet>pymongo.Connection</snippet></ROW><ROW><id>7169174</id><snippet>Connection</snippet></ROW><ROW><id>7169174</id><snippet>Connection</snippet></ROW><ROW><id>7169174</id><snippet>end_request</snippet></ROW><ROW><id>7169412</id><snippet>if letter in find:
    a = find.index(str(letter))
    l[int(a)] = letter
</snippet></ROW><ROW><id>7169412</id><snippet>letter_in_word = False
for a,c in enumerate(find):
    if c == letter:
        l[a] = letter
        letter_in_word = True
if letter_in_word:
    ...
else:
    ...
</snippet></ROW><ROW><id>7169417</id><snippet>pip install pyramid_jinja2

config.include('pyramid_jinja2')
</snippet></ROW><ROW><id>7170008</id><snippet>open('//HOST/share/path/to/file')
</snippet></ROW><ROW><id>7170135</id><snippet>import numpy as NP
A = NP.random.randint(10, 100, 40).reshape(8, 5)
a = NP.random.randint(1, 3, 8).reshape(8, -1)    # add column of primary keys      
A = NP.column_stack((a, A))

B = NP.random.randint(0, 10, 4).reshape(2, 2)
b = NP.array([1, 2])
B = NP.column_stack((b, B))
</snippet></ROW><ROW><id>7170135</id><snippet># prepare the array that will hold the 'result set':
AB = NP.column_stack((A, NP.zeros((A.shape[0], B.shape[1]-1))))

def join(A, B) :
    '''
    returns None, side effect is population of 'results set' NumPy array, 'AB';
    pass in A, B, two NumPy 2D arrays, representing the two SQL Tables to join
    '''
    k, v = B[:,0], B[:,1:]
    dx = dict(zip(k, v))
    for i in range(A.shape[0]) :
        AB[i:,-2:] = dx[A[i,0]]
</snippet></ROW><ROW><id>7170135</id><snippet>def group_by(AB, col_id) :
    '''
    returns 2D NumPy array aggregated on the unique values in column specified by col_id;
    pass in a 2D NumPy array and the col_id (integer) which holds the unique values to group by
    '''
    uv = NP.unique(AB[:,col_id]) 
    temp = []
    for v in uv :
        ndx = AB[:,0] == v          
        temp.append(NP.sum(AB[:,1:][ndx,], axis=0))
    temp = NP. row_stack(temp)
    uv = uv.reshape(-1, 1)
    return NP.column_stack((uv, temp))
</snippet></ROW><ROW><id>7170135</id><snippet>&gt;&gt;&gt; A
  array([[ 1, 92, 50, 67, 51, 75],
         [ 2, 64, 35, 38, 69, 11],
         [ 1, 83, 62, 73, 24, 55],
         [ 2, 54, 71, 38, 15, 73],
         [ 2, 39, 28, 49, 47, 28],
         [ 1, 68, 52, 28, 46, 69],
         [ 2, 82, 98, 24, 97, 98],
         [ 1, 98, 37, 32, 53, 29]])

&gt;&gt;&gt; B
  array([[1, 5, 4],
         [2, 3, 7]])

&gt;&gt;&gt; join(A, B)
  array([[  1.,  92.,  50.,  67.,  51.,  75.,   5.,   4.],
         [  2.,  64.,  35.,  38.,  69.,  11.,   3.,   7.],
         [  1.,  83.,  62.,  73.,  24.,  55.,   5.,   4.],
         [  2.,  54.,  71.,  38.,  15.,  73.,   3.,   7.],
         [  2.,  39.,  28.,  49.,  47.,  28.,   3.,   7.],
         [  1.,  68.,  52.,  28.,  46.,  69.,   5.,   4.],
         [  2.,  82.,  98.,  24.,  97.,  98.,   3.,   7.],
         [  1.,  98.,  37.,  32.,  53.,  29.,   5.,   4.]])

&gt;&gt;&gt; group_by(AB, 0)
  array([[   1.,  341.,  201.,  200.,  174.,  228.,   20.,   16.],
         [   2.,  239.,  232.,  149.,  228.,  210.,   12.,   28.]])
</snippet></ROW><ROW><id>7170320</id><snippet>template = '&lt;input name="#key#" value="#value#"&gt;'
html = template
data = {key:value,key:value}
for key in data.keys():
    html = html.replace("#key#", key).replace("#value#", data[value]) + "\n"
    html = html + template
#there's an extra template line here that you'll have to get rid of.
html = "\n".join(html.split("\n")[0:-1])
</snippet></ROW><ROW><id>7170721</id><snippet>taskkill /F /FI  "IMAGENAME eq java*"</snippet></ROW><ROW><id>7170721</id><snippet>taskkill</snippet></ROW><ROW><id>7170721</id><snippet>import subprocess

def tskill(*args):
    si = subprocess.STARTUPINFO()
    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    command = ('tskill',) + args
    rc = subprocess.call(command, startupinfo=si)
    return rc == 0

if tskill('java') and tskill('javaw'):
    #success
</snippet></ROW><ROW><id>7170721</id><snippet>call</snippet></ROW><ROW><id>7170721</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>7170721</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7170721</id><snippet>command = ['path/to/executable', 'arg0', 'arg1', '...']
p = subprocess.Popen(command)
#do something

#kill if it's still alive
if p.poll() is None: 
    p.kill()
</snippet></ROW><ROW><id>7171315</id><snippet>import os
import sys
import platform

def machine():
    """Return type of machine."""
    if os.name == 'nt' and sys.version_info[:2] &lt; (2,7):
        return os.environ.get("PROCESSOR_ARCHITEW6432", 
               os.environ.get('PROCESSOR_ARCHITECTURE', ''))
    else:
        return platform.machine()

def os_bits(machine=machine()):
    """Return bitness of operating system, or None if unknown."""
    machine2bits = {'AMD64': 64, 'x86_64': 64, 'i386': 32, 'x86': 32}
    return machine2bits.get(machine, None)

print (os_bits())
</snippet></ROW><ROW><id>7171543</id><snippet>elem</snippet></ROW><ROW><id>7171543</id><snippet>elem.clear()</snippet></ROW><ROW><id>7171543</id><snippet>from lxml import etree

def fast_iter(context, func):
    # http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
    # Author: Liza Daly
    for event, elem in context:
        func(elem)
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]
    del context

def process_element(elem):
    print elem.xpath( 'description/text( )' )

context = etree.iterparse( MYFILE, tag='item' )
fast_iter(context,process_element)
</snippet></ROW><ROW><id>7171739</id><snippet>__unicode__</snippet></ROW><ROW><id>7171739</id><snippet>&lt;T&gt;</snippet></ROW><ROW><id>7171739</id><snippet>from django.db import models

import datetime

class Poll(models.Model):
    question = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def was_published_today(self):
    &lt;T&gt; return self.pub_date.date() ==datetime.date.today()
&lt;T&gt; def __unicode__(self):
&lt;T&gt; &lt;T&gt; return self.question

class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice = models.CharField(max_length=200)
    votes = models.IntegerField()
    def __unicode__(self):
&lt;T&gt; &lt;T&gt; return self.choice
</snippet></ROW><ROW><id>7171763</id><snippet>matplotlib.use(backend)</snippet></ROW><ROW><id>7171763</id><snippet>pyplot</snippet></ROW><ROW><id>7171763</id><snippet>import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>7171763</id><snippet>import matplotlib.pyplot as plt
plt.ion()
</snippet></ROW><ROW><id>7172072</id><snippet>.items</snippet></ROW><ROW><id>7172072</id><snippet>{% for menu_dict in menu_dict_list %}
        &lt;tr&gt;
                {% for key,value in menu_dict.items %}
                        &lt;td&gt;{{value}}&lt;/td&gt;
                {% endfor %}
        &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>7172562</id><snippet>logging.disable(logging.DEBUG)
</snippet></ROW><ROW><id>7172562</id><snippet>logging.disable(logging.NOTSET)
</snippet></ROW><ROW><id>7172562</id><snippet>logger.info</snippet></ROW><ROW><id>7172562</id><snippet>isEnabledFor</snippet></ROW><ROW><id>7172562</id><snippet>class MockLogger(object):
    def debug(msg, *args, **kwargs): pass
    def info(msg, *args, **kwargs): pass
    def warn(msg, *args, **kwargs): pass
    def error(msg, *args, **kwargs): pass
    def critical(msg, *args, **kwargs): pass

class Test(unittest.TestCase):
    def test_func(self):
        _logger1=testmodule.logger1
        _logger2=testmodule.logger2
        testmodule.logger1=MockLogger()
        testmodule.logger2=MockLogger()
        # perform test
        testmodule.logger1=_logger1
        testmodule.logger2=_logger2
</snippet></ROW><ROW><id>7173025</id><snippet>x = s[1] - s[0]
for i in range(2, len(s)):
    if s[i] - s[i-1] != x: break
else:
    #do some work here...
</snippet></ROW><ROW><id>7173207</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7173207</id><snippet>.</snippet></ROW><ROW><id>7173292</id><snippet>module</snippet></ROW><ROW><id>7173292</id><snippet>try:
    module = __import__("actions.%s" % a, globals(), locals(), fromlist=["*"])
    # What goes here?
    # let's try to grab and instanciate objects
    for item_name in dir(module):
        try:
           new_action = getattr(module, item_name)()
           # here we have a new_action that is the instanciated class, do what you want with ;)
        except:
           pass

except ImportError:
    pass
</snippet></ROW><ROW><id>7173574</id><snippet>B()</snippet></ROW><ROW><id>7173574</id><snippet>repr()</snippet></ROW><ROW><id>7173574</id><snippet>object.__repr__</snippet></ROW><ROW><id>7173574</id><snippet>str.__repr__</snippet></ROW><ROW><id>7173574</id><snippet>class A:
    def __init__(self, f):
        print(repr(self), "received", object.__repr__(f))
        self.f = f


class B:
    def __init__(self, f):
        print(repr(self), "received", object.__repr__(f))
        self.a = A(f)



with open(LARGE_FILE, 'rb') as f:
    text = f.read()

print("passing", object.__repr__(f), "into B()")
x = B(text)
</snippet></ROW><ROW><id>7173574</id><snippet>passing &lt;str object at 0x280f960&gt; into B()
&lt;__main__.B object at 0x290acd0&gt; received &lt;str object at 0x280f960&gt;
&lt;__main__.A object at 0x290add0&gt; received &lt;str object at 0x280f960&gt;
</snippet></ROW><ROW><id>7173574</id><snippet>A()</snippet></ROW><ROW><id>7173574</id><snippet>B()</snippet></ROW><ROW><id>7173811</id><snippet>@task
def mytask():
    keep_running = # Boolean, should the task keep running?
    if keep_running:
        run_again = # calculate when to run again
        mytask.apply_async(eta=run_again)
    # ... do the stuff you came here to do ...
</snippet></ROW><ROW><id>7174188</id><snippet>sudo chown -R daemon.daemon /opt/bitnami/.tmp
sudo chmod -R 700 /opt/bitnami/.tmp
</snippet></ROW><ROW><id>7174188</id><snippet>os.environ['PYTHON_EGG_CACHE'] = '/path/to/python_egg_cache'
</snippet></ROW><ROW><id>7174192</id><snippet>CFLAGS</snippet></ROW><ROW><id>7174192</id><snippet>-m32</snippet></ROW><ROW><id>7174192</id><snippet>LDFLAGS</snippet></ROW><ROW><id>7174192</id><snippet>CC</snippet></ROW><ROW><id>7174192</id><snippet>CFLAGS</snippet></ROW><ROW><id>7174192</id><snippet>LDFLAGS</snippet></ROW><ROW><id>7174401</id><snippet>raw_input()</snippet></ROW><ROW><id>7174401</id><snippet>curses</snippet></ROW><ROW><id>7174401</id><snippet>curses</snippet></ROW><ROW><id>7174589</id><snippet>zmq.PULL</snippet></ROW><ROW><id>7174589</id><snippet>zmq.PUSH</snippet></ROW><ROW><id>7174589</id><snippet>import zmq

def client(msg)
    context = zmq.Context()
    client = context.socket(zmq.PUSH)
    client.connect('tcp://127.0.0.1:9999')
    client.send(msg)

def server():
    context = zmq.Context()
    server = context.socket(zmq.PULL)
    server.bind('tcp://127.0.0.1:9999')

    while True:
        msg = server.recv()
        ..do something with each message

if __name__ == '__main__': server()
</snippet></ROW><ROW><id>7174803</id><snippet>test.test_trigger</snippet></ROW><ROW><id>7174803</id><snippet>ALTER TRIGGER 'test.test_trigger' DISABLE
</snippet></ROW><ROW><id>7175152</id><snippet>def custom500(error):
    return 'my custom message'

handler = {
    500: custom500,
}
</snippet></ROW><ROW><id>7175152</id><snippet>from bottle import *
import error

app = Bottle()
app.error_handler = error.handler

@app.route('/')
def divzero():
    return 1/0

run(app)
</snippet></ROW><ROW><id>7175288</id><snippet>import os
import time
import datetime
import logging
loggers = {}

def myLogger(name):
    global loggers

    if loggers.get(name):
        return loggers.get(name)

    else:
        logger=logging.getLogger(name)
        logger.setLevel(logging.DEBUG)
        now = datetime.datetime.now()
        handler=logging.FileHandler('/root/credentials/Logs/ProvisioningPython'+ now.strftime("%Y-%m-%d") +'.log')
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        loggers.update(dict(name=logger))

        return logger
</snippet></ROW><ROW><id>7175427</id><snippet>from numpy import linspace , arange , reshape ,zeros
from scipy.fftpack import fft2 , fftfreq
from cmath import pi

# create some arbitrary data
some_data = arange(0.0 , 16384.0 , dtype = complex)

# reshape it to be a 128x128 2d grid
some_data_grid = reshape(some_data , (128 , 128) )

# assign some real spatial co-ordinates to the grid points   
# first define the edge values
x_min = -250.0
x_max = 250.0
y_min = -250.0
y_max = 250

# then create some empty 2d arrays to hold the individual cell values
x_array = zeros( (128,128) , dtype = float )
y_array = zeros( (128,128) , dtype = float )

# now fill the arrays with the associated values
for row , y_value in enumerate(linspace (y_min , y_max , num = 128) ):

  for column , x_value in enumerate(linspace (x_min , x_max , num = 128) ):

    x_array[row][column] = x_value
    y_array[row][column] = y_value

# now for any row,column pair the x_array and y_array hold the spatial domain
# co-ordinates of the associated point in some_data_grid

# now use the fft to transform the data to the wavenumber domain
some_data_wavedomain = fft2(some_data_grid)

# now we can use fftfreq to give us a base for the wavenumber co-ords
# this returns [0.0 , 1.0 , 2.0 , ... , 62.0 , 63.0 , -64.0 , -63.0 , ... , -2.0 , -1.0 ]
n_value = fftfreq( 128 , (1.0 / 128.0 ) )

# now we can initialize some arrays to hold the wavenumber co-ordinates of each cell
kx_array = zeros( (128,128) , dtype = float )
ky_array = zeros( (128,128) , dtype = float )

# before we can calculate the wavenumbers we need to know the total length of the spatial
# domain data in x and y. This assumes that the spatial domain units are metres and
# will result in wavenumber domain units of radians / metre.
x_length = x_max - x_min
y_length = y_max - y_min

# now the loops to calculate the wavenumbers
for row in xrange(128):

  for column in xrange(128):

    kx_array[row][column] = ( 2.0 * pi * n_value[column] ) / x_length
    ky_array[row][column] = ( 2.0 * pi * n_value[row] ) / y_length

# now for any row,column pair kx_array , and ky_array will hold the wavedomain coordinates
# of the correspoing point in some_data_wavedomain
</snippet></ROW><ROW><id>7175557</id><snippet>twisted</snippet></ROW><ROW><id>7175557</id><snippet>twisted</snippet></ROW><ROW><id>7175557</id><snippet>asyncore</snippet></ROW><ROW><id>7175557</id><snippet>pycurl</snippet></ROW><ROW><id>7175557</id><snippet>tornado</snippet></ROW><ROW><id>7175557</id><snippet>tornado</snippet></ROW><ROW><id>7175557</id><snippet>gevent</snippet></ROW><ROW><id>7175709</id><snippet>{</snippet></ROW><ROW><id>7175709</id><snippet>{</snippet></ROW><ROW><id>7175709</id><snippet>}</snippet></ROW><ROW><id>7175709</id><snippet>}</snippet></ROW><ROW><id>7175709</id><snippet>{{ var_name }}</snippet></ROW><ROW><id>7175709</id><snippet>{{ var_name }}</snippet></ROW><ROW><id>7175816</id><snippet>def matcher(pattern):
    def f(repo):
        return all(p is None or r == p for r, p in zip(repo, pattern))
    return f

&gt;&gt;&gt; repo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2'))
&gt;&gt;&gt; pattern = (None, None, '1.3')
&gt;&gt;&gt; filter(matcher(pattern), repo)
(('framework', 'django', '1.3'), ('cms', 'fein', '1.3'))
</snippet></ROW><ROW><id>7175942</id><snippet>formatter = logging.Formatter('[num-%d] %%(levelname)s %%(message)s' % (num,))
</snippet></ROW><ROW><id>7175942</id><snippet>Formatter</snippet></ROW><ROW><id>7175942</id><snippet>%(...)s</snippet></ROW><ROW><id>7175942</id><snippet>%%</snippet></ROW><ROW><id>7175942</id><snippet>%</snippet></ROW><ROW><id>7176080</id><snippet>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__']
&gt;&gt;&gt; dir(__builtins__)
</snippet></ROW><ROW><id>7176705</id><snippet>super</snippet></ROW><ROW><id>7176705</id><snippet>__getitem__</snippet></ROW><ROW><id>7176705</id><snippet>class MultiStr(str):
    def __new__(cls, string, multiplier=1, **kwds):
        self = super().__new__(cls, string, **kwds)
        self.multiplier = multiplier
        return self

    def __getitem__(self, index):
        item = super().__getitem__(index)
        return item * self.multiplier

&gt;&gt;&gt; s = MultiStr(b'spam', multiplier=3, encoding='ascii')
&gt;&gt;&gt; s[0]
'sss'
&gt;&gt;&gt; s[:2]
'spspsp'
&gt;&gt;&gt; s[:]
'spamspamspam'
</snippet></ROW><ROW><id>7177553</id><snippet>lazy="dynamic"</snippet></ROW><ROW><id>7177553</id><snippet>relationship()</snippet></ROW><ROW><id>7177553</id><snippet> class Employee(Base):
     __table_name__ = "employees"
     ...

     projects = relationship(..., lazy="dynamic")
</snippet></ROW><ROW><id>7177553</id><snippet>Employee().project</snippet></ROW><ROW><id>7177553</id><snippet>sqlalchemy.orm.Query</snippet></ROW><ROW><id>7177553</id><snippet>relationship()</snippet></ROW><ROW><id>7177553</id><snippet> class Employee(Base):
     __table_name__ = "employees"
     ...

     projects_query = relationship(..., lazy="dynamic")
     projects = relationship(..., lazy="select")
</snippet></ROW><ROW><id>7177553</id><snippet>i</snippet></ROW><ROW><id>7177553</id><snippet>Foo</snippet></ROW><ROW><id>7177553</id><snippet>Bar</snippet></ROW><ROW><id>7177553</id><snippet>bars</snippet></ROW><ROW><id>7177553</id><snippet>from sqlalchemy.orm.attributes import manager_of_class
p = manager_of_class(Foo).mapper.get_property('bars')
</snippet></ROW><ROW><id>7177553</id><snippet>and_</snippet></ROW><ROW><id>7177553</id><snippet>i</snippet></ROW><ROW><id>7177553</id><snippet>bars</snippet></ROW><ROW><id>7177553</id><snippet>Foo</snippet></ROW><ROW><id>7177553</id><snippet>e = sqlalchemy.and_(*[getattr(Foo, c.key) == getattr(i, c.key)
                      for c in p.local_side])
</snippet></ROW><ROW><id>7177553</id><snippet>Foo</snippet></ROW><ROW><id>7177553</id><snippet>Bar</snippet></ROW><ROW><id>7177553</id><snippet>q = session.query(Foo) \
           .filter(e) \
           .join(Foo.bars) \
           .with_entities(Bar)
</snippet></ROW><ROW><id>7177752</id><snippet>string index out of range</snippet></ROW><ROW><id>7177848</id><snippet>if request.POST['getlogs'] == 'on':
</snippet></ROW><ROW><id>7178093</id><snippet>f=open('txt','r')
</snippet></ROW><ROW><id>7178093</id><snippet>f=open ('txt','r').readlines()
</snippet></ROW><ROW><id>7178093</id><snippet>samtoolsin = subprocess.Popen(..., stderr=subprocess.PIPE, ...)
f = samtoolsin.stdout
</snippet></ROW><ROW><id>7178093</id><snippet>None</snippet></ROW><ROW><id>7178093</id><snippet>f= commands.output('zcat '+ file)
</snippet></ROW><ROW><id>7178455</id><snippet>item.replace</snippet></ROW><ROW><id>7178455</id><snippet>os.path</snippet></ROW><ROW><id>7178455</id><snippet>os.path.splitext</snippet></ROW><ROW><id>7178455</id><snippet>/tmp/foo.rtf</snippet></ROW><ROW><id>7178455</id><snippet>/tmp/foo.txt</snippet></ROW><ROW><id>7178455</id><snippet>old_file = '/tmp/foo.rtf'
(file,ext) = os.path.splitext(old_file)
print 'File=%s Extension=%s' % (file,ext)
new_file = '%s%s' % (file,'.txt')
print 'New file = %s' % (new_file)
</snippet></ROW><ROW><id>7178455</id><snippet>old_file = '/tmp/foo.rtf'
new_file = '%s%s' % (os.path.splitext(old_file)[0],'.txt')
</snippet></ROW><ROW><id>7178702</id><snippet>for line in file</snippet></ROW><ROW><id>7178702</id><snippet>readlines()</snippet></ROW><ROW><id>7178702</id><snippet>itertools.izip</snippet></ROW><ROW><id>7178702</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>7178702</id><snippet>def four_at_a_time(iterable):
    """Returns an iterator that returns a 4-tuple of objects at a time from the
       given iterable"""
    args = [iter(iterable) * 4]
    return itertools.izip(*args)
...
l1 = four_at_a_time(gzip.open(fastqfile1, 'r'))
l2 = four_at_a_time(gzip.open(fastqfile2, 'r'))
for i, x in enumerate(itertools.izip(l1, l2))
    # x is now a 2-tuple of 4-tuples of lines (one 4-tuple of lines from the first file,
    # and one 4-tuple of lines from the second file).  Process accordingly.
</snippet></ROW><ROW><id>7178982</id><snippet>twisted.conch</snippet></ROW><ROW><id>7178982</id><snippet>namespace = {"your_application_object": some_object}

options = {
    # for some reason, these must
    # all exist, even if None
    'namespace'  : namespace,
    'passwd'     : 'users.txt',
    'sshPort'    : None,
    'telnetPort' : '4040',
}
</snippet></ROW><ROW><id>7179399</id><snippet>from django.conf.urls.defaults import *
import views

urlpatterns = patterns('',
    (r'^index/', views.index),
    (r'^dash/', views.dash),
)
</snippet></ROW><ROW><id>7179569</id><snippet>make man</snippet></ROW><ROW><id>7179569</id><snippet>conf.py</snippet></ROW><ROW><id>7179659</id><snippet>REQ</snippet></ROW><ROW><id>7179659</id><snippet>REP</snippet></ROW><ROW><id>7179659</id><snippet>REP</snippet></ROW><ROW><id>7179659</id><snippet>REQ</snippet></ROW><ROW><id>7179659</id><snippet>import zmq

def worker(addr):
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind(addr)
    while True:
        # get message from boss
        msg = socket.recv()
        # ...do smth
        # send back results
        socket.send(msg)

if __name__ == '__main__':
    # spawn 5 workers
    from multiprocessing import Process
    for i in range(5):
        Process(target=worker, args=('tcp://127.0.0.1:500%d' % i,)).start()
</snippet></ROW><ROW><id>7179659</id><snippet>context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect(worker_addr)
socket.send('message')
msg = socket.recv()
</snippet></ROW><ROW><id>7179659</id><snippet>PUB</snippet></ROW><ROW><id>7179659</id><snippet>SUB</snippet></ROW><ROW><id>7179659</id><snippet>PUSH</snippet></ROW><ROW><id>7179659</id><snippet>PULL</snippet></ROW><ROW><id>7179659</id><snippet>import zmq

def worker(worker_id, publisher_addr, results_addr):
    context = zmq.Context()
    sub = context.socket(zmq.SUB)
    sub.connect(publisher_addr)
    sub.setsockopt(zmq.SUBSCRIBE, worker_id)
    push = context.socket(zmq.PUSH)
    push.connect(results_addr)

    while True:
        msg = sub.recv_multipart()[1]
        # do smth, send off results
        push.send_multipart([worker_id, msg])

if __name__ == '__main__':
    publisher_addr = 'tcp://127.0.0.1:5000'
    results_addr = 'tcp://127.0.0.1:5001'

    # launch some workers into space
    from multiprocessing import Process
    for i in range(5):
        Process(target=worker, args=('worker-%d' % i, publisher_addr, results_addr,)).start()
</snippet></ROW><ROW><id>7179659</id><snippet>context = zmq.Context()
pub = context.socket(zmq.PUB)
pub.bind(publisher_addr)
# send message to worker-1
pub.send_multipart(['worker-1', 'hello'])
</snippet></ROW><ROW><id>7179659</id><snippet>context = zmq.Context()
pull = context.socket(zmq.PULL)
pull.bind(results_addr)

while True:
    worker_id, result = pull.recv_multipart()
    print worker_id, result
</snippet></ROW><ROW><id>7179700</id><snippet>grid[[a[second_mask] for a in np.where(mask)]] = 100
</snippet></ROW><ROW><id>7179700</id><snippet>np.where(mask)</snippet></ROW><ROW><id>7179700</id><snippet>mask</snippet></ROW><ROW><id>7179700</id><snippet>[a[second_mask] for a in ...]</snippet></ROW><ROW><id>7179700</id><snippet>second_mask</snippet></ROW><ROW><id>7179700</id><snippet>grid[mask]</snippet></ROW><ROW><id>7179700</id><snippet>...[second_mask] = 100</snippet></ROW><ROW><id>7180159</id><snippet>count = 0
for afile in filelist:
    (head, filename) = os.path.split(afile)
    if afile.endswith(".log") or afile.endswith(".txt"):
        f=ftp.open(afile, 'r')
        for i, line in enumerate(f.readlines()):
            result = regex.search(line)
            if result:
                count += 1
                ln = str(i)
                pathname = os.path.join(afile)
                template = "\nLine: {0}\nFile: {1}\nString Type: {2}\n\n"
                output = template.format(ln, pathname, result.group())
                hold = output
                print output
                ftp.get(afile, 'c:\\Extracted\\' + filename)
                temp.write(output)
                break
        else:
            print "String Not Found in: " + os.path.join(afile)
            temp.write("\nString Not Found: " + os.path.join(afile))

        f.close()
for fnum in filelist:
    print "\nFiles Searched: ", len(filelist)
    print "Files Matched: ", count
    num = len(filelist)

    temp.write("\n\nFiles Searched: " + '%s\n' % (num))
    temp.write("Files Matched: "+str(count)) # here is where I want to show the number of files matched
    break
</snippet></ROW><ROW><id>7180326</id><snippet>class cls(object):
    pass

a = "&lt;a&gt;"
b = "&lt;b&gt;"
c = ["", "", "&lt;c&gt;"]
d = cls()
d.s = "&lt;d.s&gt;"
e = cls()
e.s = "&lt;e.s&gt;"

var_list = "a b c[2:7] d.s e.s".split()

for var in var_list:
    exec "%s+='Mod'" % var             # Modify the variables

print a,b,c,d.s,e.s
# &gt;&gt;&gt; &lt;a&gt;Mod &lt;b&gt;Mod ['', '', '&lt;c&gt;', 'M', 'o', 'd'] &lt;d.s&gt;Mod &lt;e.s&gt;Mod
</snippet></ROW><ROW><id>7180326</id><snippet>import re

class cls(object):
    pass

def fn(var):      # function to apply to the strings
    return "[%s mod]" % var

a = "&lt;a&gt;"
b = "&lt;b&gt;"
c = "01234567890"
d = cls()
d.s = "&lt;d.s&gt;"
e = cls()
e.s = "&lt;e.s&gt;"

var_list = "a b c[2:7] d.s e.s".split()

for var in var_list:
    # Modify the variables
    try:
        # exec "%s='Hi there'" % var             # Modify the variables
        exec "%(var)s=fn(%(var)s)" % { "var": var }
    except TypeError:
        # Assume Slice...
        slice_ = re.findall("\[(\d+)\:(\d+)\]", var)[0]   # Get slice
        var_with_slice = var
        var = var.split("[")[0]                 # Remove slice
        # Look ma, I can code in Perl too! :)
        line = \
             "%(var)s=%(var)s[:%(slice1)s]+fn(%(var_with_slice)s)+%(var)s[%(slice2)s+1:]" % \
             { "var": var, "var_with_slice": var_with_slice, "slice1": slice_[0], "slice2": slice_[1] }
        # somewhat like c = c[:2] + fn(c[2:7]) + c[7+1:]
        exec line

print a,b,c,d.s,e.s
# &gt;&gt;&gt; [&lt;a&gt; mod] [&lt;b&gt; mod] 01[23456 mod]890 [&lt;d.s&gt; mod] [&lt;e.s&gt; mod]
</snippet></ROW><ROW><id>7180424</id><snippet>__getstate__</snippet></ROW><ROW><id>7180424</id><snippet>__setstate__</snippet></ROW><ROW><id>7180424</id><snippet>__next__</snippet></ROW><ROW><id>7180583</id><snippet>mylist = []

with open('test.csv') as f:
    keys = f.readline()
    keys = keys.split()

    for line in f:
        a = line.split()
        mylist.append(a[1:])

for idx1, item in enumerate(mylist):
    for idx2, number in enumerate(item):
        if float(number) &gt; 0.2:
            print "%7s, %7s  --&gt; %7s" %(keys[idx1], keys[idx2], number)
</snippet></ROW><ROW><id>7180583</id><snippet>  31348,   31348  --&gt;       1
  31348,  439352  --&gt;   0.304
 439352,   31348  --&gt;   0.304
 439352,  439352  --&gt;       1
 439352,   60825  --&gt;   0.316
   6077,    6077  --&gt;       1
   6077, 4619722  --&gt;   0.473
   6077,   60825  --&gt;   0.219
4619722,    6077  --&gt;   0.473
4619722, 4619722  --&gt;       1
4619722,   60825  --&gt;   0.256
  60825,  439352  --&gt;   0.316
  60825,    6077  --&gt;   0.219
  60825, 4619722  --&gt;   0.256
  60825,   60825  --&gt;       1
</snippet></ROW><ROW><id>7180733</id><snippet>--default_partition=</snippet></ROW><ROW><id>7180733</id><snippet>ParseArguments()</snippet></ROW><ROW><id>7180733</id><snippet>args, option_dict = ParseArguments(['', colCasaBasePath, "--default_partition="])
</snippet></ROW><ROW><id>7180733</id><snippet>=</snippet></ROW><ROW><id>7180733</id><snippet>"--default_partition=''"</snippet></ROW><ROW><id>7180771</id><snippet>archive_index</snippet></ROW><ROW><id>7180771</id><snippet>latest</snippet></ROW><ROW><id>7180771</id><snippet>object_list</snippet></ROW><ROW><id>7180929</id><snippet>os.system</snippet></ROW><ROW><id>7180929</id><snippet>os.system</snippet></ROW><ROW><id>7180990</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7181302</id><snippet>keys = ['C', 'E']
with open('out.txt', 'a') as out:
    with open('test.txt') as f:
        for line in f:
            for key in keys:
                if line.startswith(key):
                    out.write(line)
                    break
</snippet></ROW><ROW><id>7181302</id><snippet>test.txt</snippet></ROW><ROW><id>7181302</id><snippet>out.txt</snippet></ROW><ROW><id>7181351</id><snippet>./manage.py migrate
</snippet></ROW><ROW><id>7181471</id><snippet>from itertools import count

class MyClass(object):
    id_counter = count().next
    def __init__(self):
        self.id = self.id_counter()
</snippet></ROW><ROW><id>7181661</id><snippet>selection = view.get_selection()
model, iter = selection.get_selected()
if iter is None:
    print "Nothing selected"
else:
    if model.iter_next(iter) is not None:
        print "Selected item was not last"
    else:
        print "Selected item was last"
</snippet></ROW><ROW><id>7181930</id><snippet>int</snippet></ROW><ROW><id>7181930</id><snippet>int</snippet></ROW><ROW><id>7181930</id><snippet>long</snippet></ROW><ROW><id>7181930</id><snippet>Convert.ToInt32()</snippet></ROW><ROW><id>7182225</id><snippet>manage.py somecommand</snippet></ROW><ROW><id>7182225</id><snippet>./manage.py somecommand</snippet></ROW><ROW><id>7182225</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>7182225</id><snippet>chmod +x manage.py</snippet></ROW><ROW><id>7182536</id><snippet>re.sub</snippet></ROW><ROW><id>7182536</id><snippet>import re

text =  "blahblahblah $%word$% blablablabla $%car$%"
words = dict(word="wassup", car="toyota")

def replacement(match):
    try:
        return words[match.group(1)]  # Lookup replacement string
    except KeyError:
        return match.group(0)  # Return pattern unchanged

pattern = re.compile(r'\$%(\w+)\$%')
result = pattern.sub(replacement, text)
</snippet></ROW><ROW><id>7182536</id><snippet>re.sub</snippet></ROW><ROW><id>7182536</id><snippet>functools.partial</snippet></ROW><ROW><id>7182536</id><snippet>import functools

def replacement(table, match):
    try:
        return table[match.group(1)]
    except:
        return match.group(0)

table = dict(...)
result = pattern.sub(functools.partial(replacement, table), text)
</snippet></ROW><ROW><id>7182536</id><snippet>__call__</snippet></ROW><ROW><id>7182536</id><snippet>class Replacement(object):
    def __init__(self, table):
        self.table = table
    def __call__(self, match):
        try:
            return self.table[match.group(1)]
        except:
            return match.group(0)

 result = pattern.sub(Replacement(table), text)
</snippet></ROW><ROW><id>7182605</id><snippet>(?:foo|bar|baz)
</snippet></ROW><ROW><id>7182605</id><snippet>|</snippet></ROW><ROW><id>7182605</id><snippet>&gt;&gt;&gt; s="red\\/banana 36    monkey\\/apple 14   red\\/apple 23  red\\/horse 56  bull\\/red 67  monkey\\/red 45    bull\\/shark 89"
&gt;&gt;&gt; r = re.compile(r'(?:red\\/(?P&lt;begin&gt;\w+)|(?P&lt;end&gt;\w+)\\/red)\s+(?P&lt;number&gt;\d+)')
&gt;&gt;&gt; for m in r.finditer(s):
...     print(m.groups())

('banana', None, '36')
('apple', None, '23')
('horse', None, '56')
(None, 'bull', '67')
(None, 'monkey', '45')
</snippet></ROW><ROW><id>7182605</id><snippet>None</snippet></ROW><ROW><id>7182605</id><snippet>  &gt;&gt;&gt; for m in r.finditer(s):
  ...     print(','.join(g for g in m.groups() if g is not None))
</snippet></ROW><ROW><id>7182932</id><snippet>producer_q = Queue()
def _burst_thread():
   while True:
      available_tasks = [producer_q.get()]
      time.sleep(BURST_TIME_WINDOW)
      available_tasks.extend(producer_q.get() # I'm the single consumer, so will be at least qsize elements  
                             for i in range(producer_q.qsize()))
      consumer_q.push(available_tasks)
</snippet></ROW><ROW><id>7183068</id><snippet>&gt;&gt;&gt; def nth_matcher(n, replacement):
...     def alternate(n):
...         i=0
...         while True:
...             i += 1
...             yield i%n == 0
...     gen = alternate(n)
...     def match(m):
...         replace = gen.next()
...         if replace:
...             return replacement
...         else:
...             return m.group(0)
...     return match
...     
... 
&gt;&gt;&gt; re.sub("([0-9])", nth_matcher(3, "X"), "1234567890")
'12X45X78X0'
</snippet></ROW><ROW><id>7183068</id><snippet>alternate(n)</snippet></ROW><ROW><id>7183068</id><snippet>list(alternate(3)) == [False, False, True, False, False, True, False, ...]</snippet></ROW><ROW><id>7183068</id><snippet>match(m)</snippet></ROW><ROW><id>7183068</id><snippet>re.sub</snippet></ROW><ROW><id>7183068</id><snippet>alternate(n)</snippet></ROW><ROW><id>7183068</id><snippet>gen.next()</snippet></ROW><ROW><id>7183068</id><snippet>True</snippet></ROW><ROW><id>7183445</id><snippet>def replaceNthWith(n, replacement):
    c = [0]
    def replace(match):
        c[0] += 1
        return replacement if c[0] == n else match.group(0)
    return replace
</snippet></ROW><ROW><id>7183445</id><snippet> # reset state (in our case count, c=0) for each string manipulation
 re.sub(pattern, replaceNthWith(n, replacement), str1)
 re.sub(pattern, replaceNthWith(n, replacement), str2)
 #or persist state between calls
 replace = replaceNthWith(n, replacement)
 re.sub(pattern, replace, str1)
 re.sub(pattern, replace, str2)
</snippet></ROW><ROW><id>7183466</id><snippet>for i, elem in enumerate(foo):
    #i will equal the index
    #elem will be the element in foo at that index
    #etc...
</snippet></ROW><ROW><id>7183466</id><snippet>enumerate</snippet></ROW><ROW><id>7183466</id><snippet>enumerate</snippet></ROW><ROW><id>7183466</id><snippet>len</snippet></ROW><ROW><id>7183466</id><snippet>enumerate</snippet></ROW><ROW><id>7183466</id><snippet>import itertools
for i, elem in enumerate(itertools.cycle('abc')):
    #This will generate -
    # i = 0, elem = 'a'
    # i = 1, elem = 'b'
    # i = 2, elem = 'c'
    # i = 3, elem = 'a'
    # and so on, without causing any problems.
</snippet></ROW><ROW><id>7183466</id><snippet>for ... enumerate ...</snippet></ROW><ROW><id>7183466</id><snippet>for</snippet></ROW><ROW><id>7183466</id><snippet>enumerate</snippet></ROW><ROW><id>7183466</id><snippet>i=0; i += 1</snippet></ROW><ROW><id>7183466</id><snippet>reversed</snippet></ROW><ROW><id>7183576</id><snippet>sys.stdin</snippet></ROW><ROW><id>7183576</id><snippet>input()</snippet></ROW><ROW><id>7183576</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>7183576</id><snippet>readline()</snippet></ROW><ROW><id>7183576</id><snippet>yield</snippet></ROW><ROW><id>7183576</id><snippet>next()</snippet></ROW><ROW><id>7183576</id><snippet>StopIteration</snippet></ROW><ROW><id>7183576</id><snippet>next()</snippet></ROW><ROW><id>7183576</id><snippet>kill -stop</snippet></ROW><ROW><id>7183576</id><snippet>kill -cont</snippet></ROW><ROW><id>7183618</id><snippet>&gt; echo $LANG
en_US.UTF-8
&gt; python -c 'import sys; print sys.getdefaultencoding()'
ascii

&gt; python -c 'import sys; sys.stdout.write(u"\u03A3")'
Σ
&gt; python -c 'import sys; sys.stdout.write(u"\u03A3".encode("utf8"))'
Σ
</snippet></ROW><ROW><id>7183618</id><snippet>&gt; echo $LANG
en_US.UTF-8
&gt; python -c 'import sys; print sys.getdefaultencoding()'
ascii

&gt; python -c 'import sys;  sys.stdout.write(u"\u03A3")'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec cant encode character u'\u03a3' in position 0: ordinal not in range(128)
&gt; python -c 'import sys;  sys.stdout.write(u"\u03A3".encode("utf8"))'
Σ
</snippet></ROW><ROW><id>7183851</id><snippet>iterparse(self, source, events=("start", "end",), tag="item")
</snippet></ROW><ROW><id>7183905</id><snippet>&gt;&gt;&gt; dict((option, all_options[option]) for option in selected_options if option in all_options)
{'1': '/test/1', '3': '/test/3'}
</snippet></ROW><ROW><id>7183905</id><snippet>&gt;&gt;&gt; [all_options[option] for option in selected_options if option in all_options]
['/test/1', '/test/3']
</snippet></ROW><ROW><id>7183914</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>7184219</id><snippet>class MyTest(unittest.TestCase):
    def setUpClass(cls): ...
    setUpClass = classmethod(setUpClass)
</snippet></ROW><ROW><id>7184637</id><snippet>from random import randint

def roll_dice(count, sides=6):
    if count == 0: return (0, 0) # we need to guard against infinite recursion.
    initial = [randint(1, sides) for die in range(count)]
    initial_mins = initial.count(1)
    initial_maxes = initial.count(sides)
    # Add up all the dice that weren't maximum.
    subtotal = sum(result for result in initial if result != sides)
    # Recurse to re-roll the maxed-out dice.
    ignored, reroll = roll_dice(2 * initial_maxes, sides)
    return (initial_mins, subtotal + reroll)
</snippet></ROW><ROW><id>7184637</id><snippet>from random import randint

def roll_dice(count, sides=6):
    initial_mins = None
    result = 0
    while count:
        dice = [randint(1, sides) for die in range(count)]
        if initial_mins == None: initial_mins = dice.count(1)
        result += sum(result for result in dice if result != sides)
        count = 2 * dice.count(sides) # number to roll the next time through.
    return (initial_mins, result)
</snippet></ROW><ROW><id>7184637</id><snippet>None</snippet></ROW><ROW><id>7184637</id><snippet>initial_mins</snippet></ROW><ROW><id>7184671</id><snippet>twistd</snippet></ROW><ROW><id>7184671</id><snippet>--logfile</snippet></ROW><ROW><id>7184671</id><snippet>twisted.python.log.msg()</snippet></ROW><ROW><id>7184671</id><snippet>twistd</snippet></ROW><ROW><id>7185149</id><snippet>{{response.files.append(URL('static','css/base.css'))}}
</snippet></ROW><ROW><id>7185149</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>7185149</id><snippet>{{response.files.append(URL('static','css/base.css'))}}
{{include 'web2py_ajax.html'}}
</snippet></ROW><ROW><id>7185256</id><snippet>success</snippet></ROW><ROW><id>7185256</id><snippet>$.ajax({
  url: "/resultshandler",
  type: 'POST',
  data: data,
  success: function(data, status){
    //check status
    //do something with data
  }
});
</snippet></ROW><ROW><id>7185256</id><snippet>self.response.write.out(output)</snippet></ROW><ROW><id>7185256</id><snippet>class ResultsHandler(webapp.RequestHandler):
    def post(self):
        k = db.Key.from_path('Engineer', the_engineer_id) #will be an integer
        e = db.get(k)
        output = {'salary': e.salary}
        output = json.dumps(output) #json encoding
        self.response.write.out(output)
</snippet></ROW><ROW><id>7185256</id><snippet>('/resultshandler', ResultsHandler)</snippet></ROW><ROW><id>7185256</id><snippet>/put_in_datastore</snippet></ROW><ROW><id>7185256</id><snippet>def post</snippet></ROW><ROW><id>7185256</id><snippet>def get</snippet></ROW><ROW><id>7185256</id><snippet>POST</snippet></ROW><ROW><id>7185256</id><snippet>GET</snippet></ROW><ROW><id>7185256</id><snippet>def get</snippet></ROW><ROW><id>7185565</id><snippet>&gt;&gt;&gt; [i for i in range(5) for _ in range(3)]
[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
</snippet></ROW><ROW><id>7185565</id><snippet>range(3)</snippet></ROW><ROW><id>7185565</id><snippet>_</snippet></ROW><ROW><id>7185565</id><snippet>for</snippet></ROW><ROW><id>7185565</id><snippet>for i in range(5):
    for j in range(3):
        #your code here
</snippet></ROW><ROW><id>7185949</id><snippet>&gt;&gt;&gt; print u'Puerto Ban\xfas'
Puerto Banús
&gt;&gt;&gt; print 'Puerto Ban\xc3\xbas'
Puerto Banús
</snippet></ROW><ROW><id>7186110</id><snippet>&gt;&gt;&gt; res = unfold(acc, 1)
&gt;&gt;&gt; print res.next()
5.0
&gt;&gt;&gt; print res.next()
3.4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7186348</id><snippet>itertools.count</snippet></ROW><ROW><id>7186348</id><snippet>import itertools
squares = (x*x for x in itertools.count())
</snippet></ROW><ROW><id>7186582</id><snippet>import numpy
import scipy
from scipy import ndimage

im = scipy.misc.imread('bike.jpg')
im = im.astype('int32')
dx = ndimage.sobel(im, 0)  # horizontal derivative
dy = ndimage.sobel(im, 1)  # vertical derivative
mag = numpy.hypot(dx, dy)  # magnitude
mag *= 255.0 / numpy.max(mag)  # normalize (Q&amp;D)
scipy.misc.imsave('sobel.jpg', mag)
</snippet></ROW><ROW><id>7186604</id><snippet>def createUpdateDictionary(servicename, xmlfile):
   dictionary = {}
   if path.isfile == 'output.dict':
       dictionary.update (eval(open('output.dict'),'r'))
</snippet></ROW><ROW><id>7186604</id><snippet>'r'</snippet></ROW><ROW><id>7186604</id><snippet>open()</snippet></ROW><ROW><id>7186604</id><snippet>eval()</snippet></ROW><ROW><id>7186604</id><snippet>open()</snippet></ROW><ROW><id>7186604</id><snippet>read()</snippet></ROW><ROW><id>7186604</id><snippet>   f = open('output.dict', 'a')
   write_dict = str(dictionary2)
   f.write(write_dict)
   f.close()
</snippet></ROW><ROW><id>7186604</id><snippet>'a'</snippet></ROW><ROW><id>7186604</id><snippet>{}{"foo": []}{"foo": [], "bar":[]}
</snippet></ROW><ROW><id>7186604</id><snippet>eval()</snippet></ROW><ROW><id>7186604</id><snippet>eval()</snippet></ROW><ROW><id>7186604</id><snippet>pickle</snippet></ROW><ROW><id>7186604</id><snippet>json</snippet></ROW><ROW><id>7186604</id><snippet>import json

def createUpdateDictionary(servicename, xmlfile):
    with open('output.dict', 'r') as fp:
        dictionary = json.load(fp)

    # ... process XML, update dictionary ...

    with open('output.dict', 'w') as fp:
        json.dump(dictionary, fp)
</snippet></ROW><ROW><id>7186607</id><snippet>function Recurse (y, number) 
   if (number &gt; 1)
      Recurse ( y, number - 1 )
   else
      for x in range (y)
      whatever()
</snippet></ROW><ROW><id>7186739</id><snippet>import signal
proc.send_signal(signal.SIGBREAK)
</snippet></ROW><ROW><id>7186739</id><snippet>kill -2</snippet></ROW><ROW><id>7186739</id><snippet>import signal
proc.send_signal(signal.SIGINT)
</snippet></ROW><ROW><id>7186916</id><snippet>from django.core import serializers
from django.contrib.auth.models import User
from myapp.models import MyFirstModel
from myapp.models import MyNextModel

def write_data_to_file():
    XMLSerializer = serializers.get_serializer("json")
    xml_serializer = XMLSerializer()
    out = open(filename,"a")
</snippet></ROW><ROW><id>7187001</id><snippet>/myview/
</snippet></ROW><ROW><id>7187001</id><snippet>/myview2/?variable1=value
</snippet></ROW><ROW><id>7187001</id><snippet>/authentication/login/?next=/view/they/wanted/to/see
</snippet></ROW><ROW><id>7187338</id><snippet>from ctypes import *
retval = windll.user32.ShutdownBlockReasonCreate(
    handle,
    c_wchar_p("the reason")
)
if retval != 0:
    ... Error checking
</snippet></ROW><ROW><id>7187431</id><snippet>os.walk</snippet></ROW><ROW><id>7187431</id><snippet>for r,d,f in os.walk(path):
    os.chmod( r , 0777)
</snippet></ROW><ROW><id>7188214</id><snippet>os.path.join(os.getcwd(), remote_filename)
</snippet></ROW><ROW><id>7188427</id><snippet>import httplib2
from BeautifulSoup import BeautifulSoup, SoupStrainer

http = httplib2.Http()
status, response = http.request('http://www.nytimes.com')

for link in BeautifulSoup(response, parseOnlyThese=SoupStrainer('a')):
    if link.has_key('href'):
        print link['href']
</snippet></ROW><ROW><id>7188508</id><snippet>/profiles/edit/</snippet></ROW><ROW><id>7188508</id><snippet>/profiles/</snippet></ROW><ROW><id>7188508</id><snippet>TEMPLATE_DIR</snippet></ROW><ROW><id>7188508</id><snippet>edit_profile.html</snippet></ROW><ROW><id>7188508</id><snippet>/profiles/edit/</snippet></ROW><ROW><id>7188559</id><snippet>cursor.lastrowid</snippet></ROW><ROW><id>7188559</id><snippet>connection.insert_id()</snippet></ROW><ROW><id>7188649</id><snippet>import urllib.parse
import urllib.request
import time

username = 'name'
password = 'pass'

tm = 60

while True:
    url = "http://10.100.56.55:8090/httpclient.html"
    values = {'username': username, 'password': password, 'btnSubmit':'Login'}
    data = urllib.parse.urlencode(values)
    binary_data = data.encode('ascii')
    req = urllib.request.Request(url, binary_data)
    urllib.request.urlopen(req)
</snippet></ROW><ROW><id>7189154</id><snippet>l[1]</snippet></ROW><ROW><id>7189154</id><snippet>'overflow'</snippet></ROW><ROW><id>7189154</id><snippet>l[1] = 'overflow'</snippet></ROW><ROW><id>7189345</id><snippet>    //div[@id='someid']/h2[.='Specific text 1']
     /following-sibling::a[
      count( . | following-sibling::h2[1]/preceding-sibling::*)
      = count(following-sibling::h2[1]/preceding-sibling::*)
      and preceding-sibling::h2[1][.='Specific text 1']]
    |
    //div[@id='someid']/h2[.='Specific text 1' and not(following-sibling::h2[1])]
    /following-sibling::a"
</snippet></ROW><ROW><id>7189345</id><snippet>//h2</snippet></ROW><ROW><id>7189345</id><snippet>$ns1[count(.|$ns2)=count($ns2)]
</snippet></ROW><ROW><id>7189345</id><snippet>|</snippet></ROW><ROW><id>7189496</id><snippet>System.currentTimeMillis()</snippet></ROW><ROW><id>7189955</id><snippet>SELECT ... FROM t ORDER BY id DESC LIMIT 100;
</snippet></ROW><ROW><id>7190154</id><snippet>fr = Frame(boot).pack()
but=Button(boot, text=...
</snippet></ROW><ROW><id>7190154</id><snippet>fr = Frame(boot)
fr.pack()
but=Button(boot, text= ...)
</snippet></ROW><ROW><id>7190282</id><snippet>url(r'^page/(?P&lt;page&gt;\d+)$', 'index', name = 'index_path_page'),
url(r'^$', 'index', name = 'index_path'),
</snippet></ROW><ROW><id>7190282</id><snippet>reverse('index_path_page', args=[1])
# or
reverse('index', args=[1]) # pulls by the name of the view.
</snippet></ROW><ROW><id>7190456</id><snippet>safe</snippet></ROW><ROW><id>7190570</id><snippet>linkSpan = soup.find("span", { "class" : "hsmall" })
link = [tag.attrMap['href'] for tag in linkSpan.findAll('a', {'href': True})]
for lien in link:
  print "LINK = " + lien`
</snippet></ROW><ROW><id>7190901</id><snippet>for domain in ['.domain.com','a.domain.com','b.domain.com']:
        sel.create_cookie("%s=0"%problematic_cookie,"path=/, domain=%s"%domain)
sel.delete_cookie(problematic_cookie,"path=/, domain=.domain.com") # without recurse
sel.delete_all_visible_cookies()
</snippet></ROW><ROW><id>7191254</id><snippet>\1</snippet></ROW><ROW><id>7191254</id><snippet>$1</snippet></ROW><ROW><id>7191254</id><snippet>In [1]: import re

In [2]: method = 'images/:id/huge'

In [3]: re.sub(r'(:[a-z]+)', r'&lt;span&gt;\1&lt;/span&gt;', method)
Out[3]: 'images/&lt;span&gt;:id&lt;/span&gt;/huge'
</snippet></ROW><ROW><id>7191254</id><snippet>r'...'</snippet></ROW><ROW><id>7191569</id><snippet>        label = menuItem.get_children()[0]
        label.set_markup("&lt;b&gt;Hi Pete!&lt;/b&gt;")
</snippet></ROW><ROW><id>7191702</id><snippet>[program:web]
command=/path/to/where/node/executable/is/node web.js -c config.json
</snippet></ROW><ROW><id>7192161</id><snippet>reload()</snippet></ROW><ROW><id>7192161</id><snippet>sys.modules</snippet></ROW><ROW><id>7192161</id><snippet>useexisting=True</snippet></ROW><ROW><id>7192161</id><snippet>__table_args__</snippet></ROW><ROW><id>7192161</id><snippet>class Node(Base):
    __tablename__ = "nodes"
    __table_args__ = {"useexisting": True}
</snippet></ROW><ROW><id>7192300</id><snippet>subprocess.list2cmdline</snippet></ROW><ROW><id>7192300</id><snippet>In [26]: import subprocess
In [34]: args=["hello", "bobbity bob", "bye"]

In [36]: subprocess.list2cmdline(args)
Out[36]: 'hello "bobbity bob" bye'
</snippet></ROW><ROW><id>7192346</id><snippet>sys.path</snippet></ROW><ROW><id>7192346</id><snippet> import sys
 sys.path.append("/path/to/your/extra/packages")
 import matplotlib
</snippet></ROW><ROW><id>7192869</id><snippet>if set(list1) &lt;= set(list2):
    #...
</snippet></ROW><ROW><id>7192950</id><snippet>in</snippet></ROW><ROW><id>7192950</id><snippet>__contains__</snippet></ROW><ROW><id>7193790</id><snippet>url(r'^koszyk/$', 'app_name.views.koszyk', name="sklep_koszyk"),
url(r'^koszyk/dodaj/(\d+)/$', 'app_name.views.koszyk_dodaj', name="sklep_koszyk_dodaj"),
</snippet></ROW><ROW><id>7193792</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; text1 = '&lt;td&gt;&lt;font size="2" color="#00009c"&gt;&lt;b&gt;Consultant Registration Number  :&lt;/b&gt;&lt;/font&gt;  16043646&lt;/td&gt;'
&gt;&gt;&gt; text2 = '&lt;td&gt;&lt;font size="2" color="#00009c"&gt;&lt;b&gt;Consultant Registration Number  :&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;'
&gt;&gt;&gt; BeautifulSoup(text1).td.font.nextSibling
u'  16043646'
&gt;&gt;&gt; BeautifulSoup(text2).td.font.nextSibling
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7193981</id><snippet>print results
</snippet></ROW><ROW><id>7193981</id><snippet>["Sparcy", "Libs", "Darwin", "Aaple"]
</snippet></ROW><ROW><id>7193981</id><snippet>repr(elt)</snippet></ROW><ROW><id>7193981</id><snippet>type(elt).__repr__</snippet></ROW><ROW><id>7193981</id><snippet>__repr__</snippet></ROW><ROW><id>7193981</id><snippet>import re

inputlist = '''\
Project="Sparcy" Desc=""
Project="Libs" Desc=""
Project="Darwin" Desc=""
Project="Aaple" Desc="The big project"
Site="Phoenix" Protocol="Cheese"'''

regex = re.compile('([^ =]+) *= *("[^"]*"|[^ ]*)')

results = []
for project in inputlist.split("\n"):
    items = [ (k.strip(), v.strip()) for k, v in regex.findall(project)]
    if len(items) &lt; 2:
        print("Houston we have a problem - Only %s k/v pair found for %s" % (len(items), project))
        continue
    item_dict = dict(items[1:])
    item_dict['name'] = items[0][1]
    projectname=items[0][0]
    metametaklass=type('meta_'+projectname,(type,),{'__repr__':lambda cls: cls.__name__}) 
    metaklass=metametaklass(projectname,(type,),{'__repr__':lambda cls: cls.name})
    klass=metaklass(projectname+'_class', (object,), item_dict)
    results.append(klass)

print(results)
</snippet></ROW><ROW><id>7193981</id><snippet>["Sparcy", "Libs", "Darwin", "Aaple", "Phoenix"]
</snippet></ROW><ROW><id>7193981</id><snippet>for result in results:
    print(type(result))
    print(result)    
    print('-'*80)
</snippet></ROW><ROW><id>7193981</id><snippet>Project
"Sparcy"
--------------------------------------------------------------------------------
Project
"Libs"
--------------------------------------------------------------------------------
Project
"Darwin"
--------------------------------------------------------------------------------
Project
"Aaple"
--------------------------------------------------------------------------------
Site
"Phoenix"
--------------------------------------------------------------------------------
</snippet></ROW><ROW><id>7193981</id><snippet>__repr__</snippet></ROW><ROW><id>7193981</id><snippet>repr</snippet></ROW><ROW><id>7193981</id><snippet>print</snippet></ROW><ROW><id>7194066</id><snippet>__init__.py</snippet></ROW><ROW><id>7194066</id><snippet>__init__.py</snippet></ROW><ROW><id>7194066</id><snippet>import modA
import modB
import modC
</snippet></ROW><ROW><id>7194066</id><snippet>dir</snippet></ROW><ROW><id>7194066</id><snippet>dir</snippet></ROW><ROW><id>7194098</id><snippet>\n</snippet></ROW><ROW><id>7194098</id><snippet>sock.shutdown(socket.SHUT_WR)</snippet></ROW><ROW><id>7194170</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>7194493</id><snippet>get_query_set</snippet></ROW><ROW><id>7194493</id><snippet>most_recent()</snippet></ROW><ROW><id>7194687</id><snippet>plt.plot(ys, zs,'o', c=color[k], label=mylegend[k], markersize=10)
plt.legend(loc=2)
</snippet></ROW><ROW><id>7194687</id><snippet>plt.legend((mylegend[k],), loc=2)
</snippet></ROW><ROW><id>7194802</id><snippet>None</snippet></ROW><ROW><id>7194802</id><snippet>__get__</snippet></ROW><ROW><id>7194802</id><snippet>x</snippet></ROW><ROW><id>7194802</id><snippet>x = y</snippet></ROW><ROW><id>7194802</id><snippet>__set__</snippet></ROW><ROW><id>7194802</id><snippet>__set__</snippet></ROW><ROW><id>7194802</id><snippet>self.x = self.y</snippet></ROW><ROW><id>7194802</id><snippet>load</snippet></ROW><ROW><id>7194802</id><snippet>__get__</snippet></ROW><ROW><id>7194802</id><snippet>class ToLoad(object):
    def __init__(self, var, func):
        self.var  = var
        self.func = func

    # style note: try to avoid overshadowing built-ins (e.g. type)
    def __get__(self, obj, cls):
        try:
            return getattr(obj, self.var)
        except AttributeError:
            value = getattr(obj, self.func)()
            setattr(obj, self.var, value)
            return value

class Foo(object):
    x = ToLoad('x', '_load_x')

    def __init__(self, y):
        self.y = y

    def _load_x(self):
        print('Loading {0} into x'.format(self.y))
        return self.y

a = Foo(1)
b = Foo(2)
print(a.x)
print(b.x)
print(a.x)
</snippet></ROW><ROW><id>7194989</id><snippet>(define (rev n)
  (let loop ((n n) (r 0))
    (if (zero? n) r
      (loop (quotient n 10)
            (+ (* r 10) (modulo n 10))))))
</snippet></ROW><ROW><id>7194989</id><snippet>def rev(n):
    r = 0
    while n &gt; 0:
        r = r * 10 + n % 10
        n = n // 10
    return r
</snippet></ROW><ROW><id>7195120</id><snippet>with open(filename) as f:
    file_str = f.read()

# do stuff with file_str

with open(flename, "w") as f:
    f.write(file_str)
</snippet></ROW><ROW><id>7195241</id><snippet>tkFont</snippet></ROW><ROW><id>7195241</id><snippet>.delete()</snippet></ROW><ROW><id>7195360</id><snippet>..</snippet></ROW><ROW><id>7195360</id><snippet>from ..lib import customLib
</snippet></ROW><ROW><id>7196251</id><snippet>create table dbo.datetest (
    [date] date not null,
    [datetime] datetime not null,
    [datetime2] datetime2 not null
);

insert into
    dbo.datetest
values
    (CAST(current_timestamp as DATE),
     CAST(current_timestamp as datetime),
     CAST(current_timestamp as datetime2));
</snippet></ROW><ROW><id>7196251</id><snippet>import pyodbc
from pprint import pformat
db = pyodbc.connect(driver='{SQL Server Native Client 10.0}',
                    server='TESTSRVR', database='TESTDB',
                    trusted_connection='yes')
print pformat(db.cursor().execute("select * from dbo.datetest").description)
</snippet></ROW><ROW><id>7196251</id><snippet>(('date', &lt;type 'datetime.date'&gt;, None, 10, 10, 0, False),
 ('datetime', &lt;type 'datetime.datetime'&gt;, None, 23, 23, 3, False),
 ('datetime2', &lt;type 'unicode'&gt;, None, 27, 27, 0, False))
</snippet></ROW><ROW><id>7196334</id><snippet>np.kron</snippet></ROW><ROW><id>7196334</id><snippet>numpy/lib/shape_base.py</snippet></ROW><ROW><id>7196334</id><snippet>import numpy as np
nrows = 10
a = np.arange(100).reshape(10,10)
b = np.tile(a,nrows).reshape(nrows*a.shape[0],-1) # equiv to np.kron(a,np.ones((nrows,1)))
</snippet></ROW><ROW><id>7196334</id><snippet>b = np.repeat(a,nrows*np.ones(a.shape[0],np.int),axis=0)
</snippet></ROW><ROW><id>7196334</id><snippet>In [80]: %timeit np.tile(a,nrows).reshape(nrows*a.shape[0],-1)
10000 loops, best of 3: 25.5 us per loop

In [81]: %timeit np.kron(a,np.ones((nrows,1)))
10000 loops, best of 3: 117 us per loop

In [91]: %timeit np.repeat(a,nrows*np.ones(a.shape[0],np.int),0)
100000 loops, best of 3: 12.8 us per loop
</snippet></ROW><ROW><id>7196334</id><snippet>np.repeat</snippet></ROW><ROW><id>7196503</id><snippet>import abc

class AbstractClass(metaclass=abc.ABCMeta):

  @abc.abstractmethod
  def abstractMethod(self):
      return
</snippet></ROW><ROW><id>7196624</id><snippet>def self.do_something( self ):
    print 'I have done something'
</snippet></ROW><ROW><id>7196624</id><snippet>def do_something( self ):
    print 'I have done something'
</snippet></ROW><ROW><id>7196624</id><snippet>self</snippet></ROW><ROW><id>7196624</id><snippet>code.InteractiveInterpreter.runsource( parsed_line )
</snippet></ROW><ROW><id>7196624</id><snippet>interpreter = code.InteractiveInterpreter(locals())
interpreter.runsource( parsed_line )
</snippet></ROW><ROW><id>7196723</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(10)
np.random.seed(101)
y = np.random.rand(10)

small = [i for i in range(len(x)) if y[i] &lt; .5 ]
big = [i for i in range(len(x)) if y[i] &gt; .5 ]

fig = plt.figure()
ax = fig.add_subplot(111)

ax.scatter(x,y)
# user wants to plot lines connecting big values (&gt;.5)
ax.plot(x[big],y[big])

#plt.show()
# now user wants to delete the first (and only) line
del ax.lines[0]

# so that they can plot a line only showing small values
ax.plot(x[small],y[small])

plt.show()
</snippet></ROW><ROW><id>7197116</id><snippet>re.sub(pattern, repl, string[, count, flags])</snippet></ROW><ROW><id>7197116</id><snippet>r'\b-\b'</snippet></ROW><ROW><id>7197116</id><snippet>' '</snippet></ROW><ROW><id>7197116</id><snippet>r</snippet></ROW><ROW><id>7197116</id><snippet>\b</snippet></ROW><ROW><id>7197116</id><snippet>-</snippet></ROW><ROW><id>7197247</id><snippet>import base64

gpgFH = open(gpgFile, 'rb')
gpgStr = gpgFH.read()
gpgEncoded = base64.b64encode(gpgStr)
...
</snippet></ROW><ROW><id>7197283</id><snippet>(a, b) = (b, a + b)</snippet></ROW><ROW><id>7197283</id><snippet>a = 3</snippet></ROW><ROW><id>7197283</id><snippet>b = 6</snippet></ROW><ROW><id>7197283</id><snippet>(b, a + b)</snippet></ROW><ROW><id>7197283</id><snippet>(6, 9)</snippet></ROW><ROW><id>7197283</id><snippet>(a, b)</snippet></ROW><ROW><id>7197283</id><snippet>(a = 6, b = 9)</snippet></ROW><ROW><id>7197283</id><snippet>a = 6</snippet></ROW><ROW><id>7197283</id><snippet>b = 9</snippet></ROW><ROW><id>7197351</id><snippet>sorted</snippet></ROW><ROW><id>7197351</id><snippet>newA = dict(sorted(A.iteritems(), key=operator.itemgetter(1), reverse=True)[:5])
</snippet></ROW><ROW><id>7198013</id><snippet>Foo.objects.filter(**dict(bar))
</snippet></ROW><ROW><id>7198013</id><snippet>bar</snippet></ROW><ROW><id>7198013</id><snippet>dict(bar)</snippet></ROW><ROW><id>7198013</id><snippet>**</snippet></ROW><ROW><id>7198488</id><snippet>lines = "Foo\nBar\nBaz"

for line in lines.splitlines():
    print "%s Hello" % line
</snippet></ROW><ROW><id>7198571</id><snippet>-lC:/Python27/libs/libpython27.a
</snippet></ROW><ROW><id>7198571</id><snippet>-LC:/Python27/libs -lpython
</snippet></ROW><ROW><id>7198623</id><snippet>plt.draw()</snippet></ROW><ROW><id>7198623</id><snippet>set_data</snippet></ROW><ROW><id>7198623</id><snippet>axes.relim()
axes.autoscale_view(True,True,True)
</snippet></ROW><ROW><id>7198636</id><snippet>external</snippet></ROW><ROW><id>7198636</id><snippet>external</snippet></ROW><ROW><id>7198636</id><snippet>import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), 'external'))
import some_external_library
</snippet></ROW><ROW><id>7199274</id><snippet>text = unicodedata.normalize('NFD', text).encode('ascii','ignore')
</snippet></ROW><ROW><id>7199514</id><snippet>Class Cobra:
...
def check_prey(self, rat ):
    Some logic rat.foo()

import Rat


import Cobra
class Rat
...
def check_predator(self, snake ):
   some_logic ..
   snake.foo()
</snippet></ROW><ROW><id>7199514</id><snippet>Class Cobra:
...
def check_prey(self, rat ):
    import Rat
    Some logic rat.foo()

import Cobra
class Rat
...
def check_predator(self, snake ):
   some_logic ..
   snake.foo()
</snippet></ROW><ROW><id>7199581</id><snippet>galerts</snippet></ROW><ROW><id>7199581</id><snippet>mechanize</snippet></ROW><ROW><id>7199581</id><snippet>set_proxies</snippet></ROW><ROW><id>7199581</id><snippet>for f in self.forms(): print f</snippet></ROW><ROW><id>7199581</id><snippet>self.set_cookiejar(cookielib.CookieJar())</snippet></ROW><ROW><id>7199581</id><snippet>lxml</snippet></ROW><ROW><id>7199885</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>7199885</id><snippet>/usr/lib/python2.7/sitecustomize.py</snippet></ROW><ROW><id>7199885</id><snippet>ipy_user_conf.py</snippet></ROW><ROW><id>7199885</id><snippet>~/.ipython/</snippet></ROW><ROW><id>7199885</id><snippet>o.autoexec.append('alias c clear; clear; clear')</snippet></ROW><ROW><id>7199885</id><snippet>main()</snippet></ROW><ROW><id>7199885</id><snippet>ipy_user_conf.py</snippet></ROW><ROW><id>7200008</id><snippet>...
   if name.endswith(".JPG") and int( name.split("_")[-1].split(".")[0] ) &gt; 7853 :
...
</snippet></ROW><ROW><id>7200071</id><snippet>Foo.bar = staticmethod(backup)
</snippet></ROW><ROW><id>7200390</id><snippet>urllib</snippet></ROW><ROW><id>7200390</id><snippet>urllib.urlopen().readline()</snippet></ROW><ROW><id>7200390</id><snippet>file().readline()</snippet></ROW><ROW><id>7200390</id><snippet>urllib</snippet></ROW><ROW><id>7200390</id><snippet>urllib.urlopen()</snippet></ROW><ROW><id>7200565</id><snippet>import</snippet></ROW><ROW><id>7200565</id><snippet>sys.path</snippet></ROW><ROW><id>7200565</id><snippet>userprofile/__init__.py</snippet></ROW><ROW><id>7200565</id><snippet>sys.path</snippet></ROW><ROW><id>7200565</id><snippet>myproject</snippet></ROW><ROW><id>7200565</id><snippet>sys.path</snippet></ROW><ROW><id>7200698</id><snippet>%20</snippet></ROW><ROW><id>7200698</id><snippet>URL</snippet></ROW><ROW><id>7200698</id><snippet>title.title.replace(' ', '_')
</snippet></ROW><ROW><id>7200742</id><snippet>a=`expr 1 + 2`</snippet></ROW><ROW><id>7200900</id><snippet>np.vstack(dat_list)
</snippet></ROW><ROW><id>7201002</id><snippet>open('eggs.csv', 'w', newline='')</snippet></ROW><ROW><id>7201177</id><snippet>import numpy.ma as ma    

allplats=ma.masked_all((160,65),float)
for plate in plateslist:
    for x in range(len(plate.X)):
        allplates[(plate.Y[x],plate.X[x])]+=data.index(plate.measurementname[x])
allplates=allplates/len(plateslist)
image.pcolormesh(meanmatrix,min,max)
</snippet></ROW><ROW><id>7201326</id><snippet>import numpy as np
np.int32(1171855803) &lt;&lt; 7
</snippet></ROW><ROW><id>7201375</id><snippet>python whois</snippet></ROW><ROW><id>7201447</id><snippet>void setVariableValue(java.lang.String, java.lang.String);
</snippet></ROW><ROW><id>7202336</id><snippet>widget.set_name()</snippet></ROW><ROW><id>7202336</id><snippet>dict()</snippet></ROW><ROW><id>7202336</id><snippet>widgets = {}
for stype in server_type_dict:
    widgets[stype] = {}
    widgets[stype]['btn'] = gtk.ToggleButton()
    widgets[stype]['box'] = gtk.VBox(False, 0)
    widgets[stype]['img'] = gtk.Image()
    ...
    self.type_box.pack_start(widgets[stype]['btn'], True)
    self.load_type(server_type_dict, component_dict, stype)
</snippet></ROW><ROW><id>7202336</id><snippet>widgets['web']['btn']</snippet></ROW><ROW><id>7202451</id><snippet>import readline
readline.write_history_file("myhistory")
</snippet></ROW><ROW><id>7202451</id><snippet>inspect</snippet></ROW><ROW><id>7202451</id><snippet>inspect.getsourcelines</snippet></ROW><ROW><id>7202461</id><snippet>for a</snippet></ROW><ROW><id>7202461</id><snippet>try...finally</snippet></ROW><ROW><id>7202461</id><snippet>try:
    for a in range(ranges + 1):
        os.chdir(path + '\\' + str(workname))
        os.system('mkdir ' + str(range1 + a))
        os.chdir(path + '\\' + str(workname) + '\\' + str(range1 + a))

        for b in range(fams + 1):
            fa = str(fam1 + b)
            job = DownloadJob(fa)
            pool.put(job)
finally:
    pool.shutdown()
    pool.wait()
</snippet></ROW><ROW><id>7202461</id><snippet>pool</snippet></ROW><ROW><id>7202461</id><snippet>with pool:
    for a in range(ranges + 1):
        os.chdir(path + '\\' + str(workname))
        os.system('mkdir ' + str(range1 + a))
        os.chdir(path + '\\' + str(workname) + '\\' + str(range1 + a))

        for b in range(fams + 1):
            fa = str(fam1 + b)
            job = DownloadJob(fa)
            pool.put(job)
</snippet></ROW><ROW><id>7202461</id><snippet>from contextlib import contextmanager

@contextmanager
def shutdown_wait(pool):
    try:
        yield pool
    finally:
        pool.shutdown()
        pool.wait()

...
with shutdown_wait(pool):
    for a ... [as above]
</snippet></ROW><ROW><id>7202819</id><snippet>import xml.etree.ElementTree as etree
# or for a faster C implementation
# import xml.etree.cElementTree as etree

tree = etree.parse('input.xml')
elem = tree.find('//tag-Name') # finds the first occurrence of element tag-Name
elem.text = 'newName'
tree.write('output.xml')
</snippet></ROW><ROW><id>7202819</id><snippet>import xml.etree.cElementTree as etree

tree = etree.parse('input.xml')
for elem in tree.findall('//tag-Name'):
    if elem.text == 'oldName':
        elem.text = 'newName'
# some output options for example
tree.write('output.xml', encoding='utf-8', xml_declaration=True)
</snippet></ROW><ROW><id>7202966</id><snippet>from gi.repository import GConf</snippet></ROW><ROW><id>7202966</id><snippet>['ChangeSet',
 'ChangeSetForeachFunc',
 'Client',
 'ClientClass',
 'ClientErrorHandlerFunc',
 'ClientErrorHandlingMode',
 'ClientNotifyFunc',
 'ClientPreloadType',
 'Entry',
 'EnumStringPair',
 'Error',
 'ListenersForeach',
 'ListenersPredicate',
 'UnsetFlags',
 'Value',
 'ValueType',
 '__class__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__file__',
 '__format__',
 '__getattr__',
 '__getattribute__',
 '__hash__',
 '__init__',
 '__loader__',
 '__module__',
 '__name__',
 '__new__',
 '__path__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 '_introspection_module',
 '_load',
 '_namespace',
 '_overrides_module',
 '_version',
 'concat_dir_and_key',
 'debug_shutdown',
 'enum_to_string',
 'error_quark',
 'escape_key',
 'init',
 'is_initialized',
 'key_is_below',
 'postinit',
 'preinit',
 'string_to_enum',
 'unescape_key',
 'unique_key',
 'valid_key',
 'value_decode']
</snippet></ROW><ROW><id>7203098</id><snippet>&gt;&gt;&gt; myheader = "3, 2, 3, 14, 4"
&gt;&gt;&gt; a = bitstring.pack(myheader, 1, 0, 5, 1000, 2)
&gt;&gt;&gt; a.bin
'00100101000011111010000010'
&gt;&gt;&gt; a.tobytes()
'%\x0f\xa0\x80'
</snippet></ROW><ROW><id>7203098</id><snippet>&gt;&gt;&gt; a.readlist(myheader)
[1, 0, 5, 1000, 2]
</snippet></ROW><ROW><id>7203350</id><snippet>if signed=='||':
</snippet></ROW><ROW><id>7203350</id><snippet>'||'</snippet></ROW><ROW><id>7203350</id><snippet>if signed[-2:] == '||':
</snippet></ROW><ROW><id>7203350</id><snippet>def pairwiseScore(seqA, seqB): 
    signed = ''
    score = 0
    for i in range(len(seqA)):
      if seqA[i] == seqB[i]:
          signed += '|'
          if signed[-2:] == '||':
              score += 3
          else:
              score += 1
      else:
          signed += ' '
          score -= 1
    return '%s\n%s\n%s\nscore:%d' % (seqA, signed, seqB, score)
</snippet></ROW><ROW><id>7203433</id><snippet>=</snippet></ROW><ROW><id>7203433</id><snippet>x = 42
y = x
# now:
# 'is' is a identity operator — it checks whether two names point to the
# exact same object
print x is y # =&gt; True
print x, y   # 42 42
y = 69
# now y has been rebound, but that does not change the '42' object, nor rebinds x
print x is y # =&gt; False
print x, y   # 42 69
</snippet></ROW><ROW><id>7203433</id><snippet>p</snippet></ROW><ROW><id>7203433</id><snippet>points</snippet></ROW><ROW><id>7203433</id><snippet>p</snippet></ROW><ROW><id>7203433</id><snippet>reflect([points], 'X')

# inside reflect:
p[0] = ...
</snippet></ROW><ROW><id>7203433</id><snippet>points = reflect(points, 'X')

# inside reflect, instead of p = ...
return map(func, p)
</snippet></ROW><ROW><id>7203433</id><snippet>p[:] = map(func, p)
</snippet></ROW><ROW><id>7203681</id><snippet>str.find()</snippet></ROW><ROW><id>7203681</id><snippet>Log('Position HTTP'+pos)</snippet></ROW><ROW><id>7203681</id><snippet>TypeError</snippet></ROW><ROW><id>7203681</id><snippet>Log('Position HTTP %s' % pos)</snippet></ROW><ROW><id>7204072</id><snippet>Database</snippet></ROW><ROW><id>7204072</id><snippet>Collection</snippet></ROW><ROW><id>7204072</id><snippet>__getattr__</snippet></ROW><ROW><id>7204072</id><snippet>db.foo.bar.find(...)
</snippet></ROW><ROW><id>7204072</id><snippet>__getattr__</snippet></ROW><ROW><id>7204072</id><snippet>Collection</snippet></ROW><ROW><id>7204152</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        print "Encountered the beginning of a %s tag" % tag

    def handle_endtag(self, tag):
        print "Encountered the end of a %s tag" % tag

    def handle_data(self, data):
        print "Encountered data %s" % data

p = MyHTMLParser()
p.feed('&lt;p&gt;test&lt;/p&gt;')
</snippet></ROW><ROW><id>7204152</id><snippet>Encountered the beginning of a p tag
Encountered data test
Encountered the end of a p tag
</snippet></ROW><ROW><id>7205107</id><snippet>def merge(a, b, path=None):
    "merges b into a"
    if path is None: path = []
    for key in b:
        if key in a:
            if isinstance(a[key], dict) and isinstance(b[key], dict):
                merge(a[key], b[key], path + [str(key)])
            elif a[key] == b[key]:
                pass # same leaf value
            else:
                raise Exception('Conflict at %s' % '.'.join(path + [str(key)]))
        else:
            a[key] = b[key]
    return a

# works
print(merge({1:{"a":"A"},2:{"b":"B"}}, {2:{"c":"C"},3:{"d":"D"}}))
# has conflict
merge({1:{"a":"A"},2:{"b":"B"}}, {1:{"a":"A"},2:{"b":"C"}})
</snippet></ROW><ROW><id>7205107</id><snippet>a</snippet></ROW><ROW><id>7205107</id><snippet>b</snippet></ROW><ROW><id>7205107</id><snippet>a</snippet></ROW><ROW><id>7205107</id><snippet>a</snippet></ROW><ROW><id>7205107</id><snippet>merge(dict(a), b)</snippet></ROW><ROW><id>7205107</id><snippet>reduce(merge, [dict1, dict2, dict3...])
</snippet></ROW><ROW><id>7205107</id><snippet>from functools import reduce</snippet></ROW><ROW><id>7205193</id><snippet>    import thread, Queue, time, random, poster
    from Tkinter import *

    dataQueue = Queue.Queue()

    def status(t):
        try:
            data = dataQueue.get(block=False)
        except Queue.Empty:
            pass
        else:
            t.delete('0', END)
            t.insert('0', '%s\n' % str(data))
        t.after(250, lambda: status(t))

    def makethread():
        thread.start_new_thread(poster.poster, (1,dataQueue))    

    if __name__ == '__main__':
        root = Tk()
        root.geometry("240x45")
        t = Entry(root)
        t.pack(side=TOP, fill=X)
        Button(root, text='Start Epoch Display',
                command=makethread).pack(side=BOTTOM, fill=X)
        status(t)
        root.mainloop()
</snippet></ROW><ROW><id>7205193</id><snippet>    import random, time

    def poster(id,que):
        while True:
            delay=random.uniform(0.1, .11)
            time.sleep(delay)
            que.put(' epoch=%f, delay=%f' % (time.time(), delay))
</snippet></ROW><ROW><id>7205226</id><snippet>from scipy import *

a = ones((12,22))
a[5,10] = a[5,12] = 0

a_ = a[1:-1, 1:-1]
aE = a[1:-1, 0:-2]
aW = a[1:-1,   2:]
aN = a[0:-2, 1:-1]
aS = a[  2:, 1:-1]

a4 = dstack([aE,aW,aN,aS])
num_adjacent_zeros = sum(a4 == 0, axis=2)
print num_adjacent_zeros

ys,xs = where(num_adjacent_zeros == 1)
# account for offset of a_
xs += 1 
ys += 1

print '\n hits:'
for col,row in zip(xs,ys):
  print (col,row)
</snippet></ROW><ROW><id>7205226</id><snippet>a_</snippet></ROW><ROW><id>7205226</id><snippet>[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 1 0 2 0 1 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

 hits:
(10, 4)
(12, 4)
(9, 5)
(13, 5)
(10, 6)
(12, 6)
</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>B.foo</snippet></ROW><ROW><id>7205330</id><snippet>foo</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>B.foo(self)</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>A().foo()</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>klass</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>foo</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>foo</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo=orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>orig_foo</snippet></ROW><ROW><id>7205330</id><snippet>klass.foo</snippet></ROW><ROW><id>7205330</id><snippet>for klass in A, B:
    orig_foo = klass.foo
    def foo(self, orig_foo=orig_foo):
        return orig_foo(self) * 2
    klass.foo = foo
</snippet></ROW><ROW><id>7205458</id><snippet>3383</snippet></ROW><ROW><id>7205458</id><snippet>mike</snippet></ROW><ROW><id>7205458</id><snippet>mikes_farm_list = FarmOwner.Objects.filter(owner="Mike").values_list('farms',flat=True)
Charges.Objects.filter(chargeId=3383,farms__in=mikes_farm_list)</snippet></ROW><ROW><id>7205671</id><snippet>cla()</snippet></ROW><ROW><id>7205671</id><snippet>close()</snippet></ROW><ROW><id>7205671</id><snippet>figure(1)</snippet></ROW><ROW><id>7205671</id><snippet>figure(1)
figure(1).gca().cla()
</snippet></ROW><ROW><id>7205671</id><snippet>gca()</snippet></ROW><ROW><id>7205671</id><snippet>cla()</snippet></ROW><ROW><id>7205671</id><snippet>from pylab import *

#prepare values and labels
values = [34,17,29,6,14]
labels = ["john","jane","jim","jason","judy"]

# create figure
figure(1)
figure(1).gca().cla()

# set some parameters
params = { 'axes.labelsize': 6, 'text.fontsize': 6, 'font.size': 6, 
           'legend.fontsize': 6, 'xtick.labelsize': 6, 
           'ytick.labelsize': 6,}        
rcParams.update(params)

# draw, add legend and save
pie(values, labels=labels, shadow=False)
l = legend(loc='lower center', ncol= 5, bbox_to_anchor=(0.5, -0.25))
l.get_frame().set_alpha(0.0)
savefig('3.png', dpi=100, transparent=True)


#close(1)

values2 = [24,27,29,16,4]
labels2 = ["dave","donna","derrick","dotty","drew"]

figure(1)
figure(1).gca().cla()

# draw, add legend and save
pie(values2, labels=labels2, shadow=False)
l = legend(loc='lower center', ncol= 5, bbox_to_anchor=(0.5, -0.25))
l.get_frame().set_alpha(0.0)
savefig('4.png', dpi=100, transparent=True)

#show()
</snippet></ROW><ROW><id>7205671</id><snippet>figure(1).gca().cla()
</snippet></ROW><ROW><id>7206052</id><snippet>from matplotlib.pyplot import figure
fig = figure()
ax = fig.add_subplot(111)


def mk_labels(vals):
    labels = []
    for i in vals:
        if i % 60 == 0:
            labels.append("Some new special label")
        else:
            labels.append(i)


 ax.set_xticklabels(mk_labels(range(len(m))))
 ax.plot(range(len(m)), m)
</snippet></ROW><ROW><id>7206052</id><snippet> ax.set_xticklabels(["{0}h".format(i) if i % 60 == 0 else i for i in range(len(m))])
</snippet></ROW><ROW><id>7206342</id><snippet>null = True</snippet></ROW><ROW><id>7206342</id><snippet>required = False</snippet></ROW><ROW><id>7206606</id><snippet>Notification.update()</snippet></ROW><ROW><id>7206606</id><snippet>update()</snippet></ROW><ROW><id>7206606</id><snippet>#!/usr/bin/env python

import pynotify

pynotify.init("MyApplication")

a = pynotify.Notification("Test notification", "Lorem ipsum op")
a.show()
raw_input("Press return to update the notification")
a.update("Updated notification", "Ipsum lorem still op")
a.show()
</snippet></ROW><ROW><id>7206606</id><snippet>show()</snippet></ROW><ROW><id>7206686</id><snippet>for key, value in dict2.iteritems():
    dict1.setdefault(key, []).extend(value)
</snippet></ROW><ROW><id>7207076</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('file', nargs='?')
parser.add_argument('-f', dest='file_opt')
args = parser.parse_args()
if args.file_opt:
    args.file = args.file_opt
</snippet></ROW><ROW><id>7207336</id><snippet>threading</snippet></ROW><ROW><id>7207336</id><snippet>multiprocessing</snippet></ROW><ROW><id>7207336</id><snippet>threading</snippet></ROW><ROW><id>7207336</id><snippet>multiprocessing</snippet></ROW><ROW><id>7207336</id><snippet>from multiprocessing import Process

def func1():
  print 'func1: starting'
  for i in xrange(10000000): pass
  print 'func1: finishing'

def func2():
  print 'func2: starting'
  for i in xrange(10000000): pass
  print 'func2: finishing'

if __name__ == '__main__':
  p1 = Process(target=func1)
  p1.start()
  p2 = Process(target=func2)
  p2.start()
  p1.join()
  p2.join()
</snippet></ROW><ROW><id>7207336</id><snippet>runBothFunc</snippet></ROW><ROW><id>7207336</id><snippet>def runInParallel(*fns):
  proc = []
  for fn in fns:
    p = Process(target=fn)
    p.start()
    proc.append(p)
  for p in proc:
    p.join()

runInParallel(func1, func2)
</snippet></ROW><ROW><id>7207366</id><snippet>regex</snippet></ROW><ROW><id>7207366</id><snippet>re</snippet></ROW><ROW><id>7207366</id><snippet>.encode</snippet></ROW><ROW><id>7207366</id><snippet>\w</snippet></ROW><ROW><id>7207366</id><snippet>\p{script=Latin}</snippet></ROW><ROW><id>7207366</id><snippet>\p{alpha}</snippet></ROW><ROW><id>7207366</id><snippet>\p{lower}</snippet></ROW><ROW><id>7207366</id><snippet>regex</snippet></ROW><ROW><id>7207366</id><snippet>re</snippet></ROW><ROW><id>7207640</id><snippet>from ..lib import myLib</snippet></ROW><ROW><id>7207640</id><snippet>main</snippet></ROW><ROW><id>7207640</id><snippet>lib</snippet></ROW><ROW><id>7207640</id><snippet>other</snippet></ROW><ROW><id>7207640</id><snippet>__init__.py</snippet></ROW><ROW><id>7207640</id><snippet>main</snippet></ROW><ROW><id>7207640</id><snippet>run</snippet></ROW><ROW><id>7207640</id><snippet>main</snippet></ROW><ROW><id>7207640</id><snippet>sys.path</snippet></ROW><ROW><id>7207746</id><snippet>&lt;input type="text" value=";!--\"\'&lt;a41cgb04&gt;=&amp;{()}" name="url" maxlength="200" class="url" style="width:495px;"&gt;
</snippet></ROW><ROW><id>7207746</id><snippet>a = "abc ' def "

b = ' ABC " DEF'

print repr(a + b)
</snippet></ROW><ROW><id>7207746</id><snippet>'abc \' def  ABC " DEF'
</snippet></ROW><ROW><id>7207746</id><snippet>&lt;meta name="abstract" content="Heronswood Bergenia 'Lunar Glow' PP20247 in Bergenia" /&gt;
</snippet></ROW><ROW><id>7207746</id><snippet>from urllib import urlopen


url = 'http://www.heronswood.com/perennials_bergenia/bergenia-lunar-glow/'

sock = urlopen(url)
srce = sock.read()
sock.close()


li = srce.splitlines(True)

print 'Displayed normally:\n-------------------\n'
print '\n'.join(li[12:14])
print

print 'Displayed with the help of repr():\n----------------------\n'
print '\n'.join(map(repr,li[12:14]))
print

print 'Displayed in a list:\n--------------------\n'
print li[12:14]
</snippet></ROW><ROW><id>7207746</id><snippet>Displayed normally:
-------------------

&lt;meta name="abstract" content="Heronswood Bergenia 'Lunar Glow' PP20247 in  Bergenia" /&gt;

&lt;meta name="allow-search" content="YES" /&gt;


Displayed with repr():
----------------------

'&lt;meta name="abstract" content="Heronswood Bergenia \'Lunar Glow\' PP20247 in  Bergenia" /&gt;\n'
'&lt;meta name="allow-search" content="YES" /&gt;\n'

Displayed in a list:
--------------------

['&lt;meta name="abstract" content="Heronswood Bergenia \'Lunar Glow\' PP20247 in  Bergenia" /&gt;\n', '&lt;meta name="allow-search" content="YES" /&gt;\n']
</snippet></ROW><ROW><id>7207746</id><snippet>print li[12:14]</snippet></ROW><ROW><id>7207746</id><snippet>print '\n'.join(map(repr,li[12:14]))</snippet></ROW><ROW><id>7207746</id><snippet>"\\\\'"</snippet></ROW><ROW><id>7207746</id><snippet>r"\\'"</snippet></ROW><ROW><id>7207746</id><snippet> import re
from urllib import urlopen


url = 'http://www.heronswood.com/perennials_bergenia/bergenia-lunar-glow/'

sock = urlopen(url)
srce = sock.read()
sock.close()


pat = '&lt;meta name="abstract" content="(Heronswood Bergenia (\'Lunar Glow\')? [a-zA-Z]+\d+ .*?)" /&gt;'
regx = re.compile(pat)
print regx.search(srce).groups()

pat = "&lt;meta name=\"abstract\" content=\"(Heronswood Bergenia (\\\\'Lunar Glow\\\\')? [a-zA-Z]+\d+ .*?)\" /&gt;"
regx = re.compile(pat)
print regx.search(srce).groups()
</snippet></ROW><ROW><id>7207746</id><snippet>("Heronswood Bergenia 'Lunar Glow' PP20247 in  Bergenia", "'Lunar Glow'")

Traceback (most recent call last):
  File "I:\trez.py", line 18, in &lt;module&gt;
    print regx.search(srce).groups()
AttributeError: 'NoneType' object has no attribute 'groups'
</snippet></ROW><ROW><id>7207751</id><snippet>b[0] = 6</snippet></ROW><ROW><id>7207751</id><snippet>6</snippet></ROW><ROW><id>7207751</id><snippet>i</snippet></ROW><ROW><id>7207751</id><snippet>i</snippet></ROW><ROW><id>7207751</id><snippet>i</snippet></ROW><ROW><id>7207751</id><snippet>i</snippet></ROW><ROW><id>7207972</id><snippet>for</snippet></ROW><ROW><id>7207972</id><snippet>len(a)</snippet></ROW><ROW><id>7207972</id><snippet>range</snippet></ROW><ROW><id>7207972</id><snippet>xrange</snippet></ROW><ROW><id>7207972</id><snippet>for i in range(len(a)):
</snippet></ROW><ROW><id>7207972</id><snippet>enumerate</snippet></ROW><ROW><id>7207972</id><snippet>for i, v in enumerate(a):
    a[i]= v+1
</snippet></ROW><ROW><id>7207972</id><snippet>a= [6 for v in a]
</snippet></ROW><ROW><id>7208163</id><snippet>ugettext</snippet></ROW><ROW><id>7208448</id><snippet>$(function() {
    $('input[name="ram"]').change(function() {
        var id = $(this).val(); // currently selected value
        var price = $('input[name="ram"][value="'+id+'"]').attr('price');
    });
});
</snippet></ROW><ROW><id>7208839</id><snippet>import subprocess

spooky_path = 'ls'
cmd = [spooky_path, '-l']
process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
output = process.communicate()[0]
print "Output:", output
process.wait()
print('Done')
</snippet></ROW><ROW><id>7208839</id><snippet>process = subprocess.Popen(cmd)
</snippet></ROW><ROW><id>7208839</id><snippet>process = subprocess.call(cmd)
</snippet></ROW><ROW><id>7208922</id><snippet>link['href'] = link['href'].replace("..", "")
</snippet></ROW><ROW><id>7209017</id><snippet>class M(dict):

    def __getitem__(self, key):
        try:
            temp = int(key)
            return "I am a number"
        except ValueError:
            return self.get(key, None)

item = M({'one':'1', 'two':'2', '3':'three'})

print item['one']
print item[3]
print item[0]
</snippet></ROW><ROW><id>7209017</id><snippet>super</snippet></ROW><ROW><id>7209017</id><snippet>    except ValueError:
        return super(M, self).__getitem__(key)
</snippet></ROW><ROW><id>7209081</id><snippet>exec</snippet></ROW><ROW><id>7209081</id><snippet>local_var = 1
def method():
    print local_var
</snippet></ROW><ROW><id>7209081</id><snippet>from a import method
import inspect

code = inspect.getsource(method)
local_var = 2
method()
print code
exec code
method()
</snippet></ROW><ROW><id>7209081</id><snippet>python b.py</snippet></ROW><ROW><id>7209081</id><snippet>vic@ubuntu:~/Desktop$ python b.py
1
def method():
    print local_var

2
vic@ubuntu:~/Desktop$ 
</snippet></ROW><ROW><id>7209545</id><snippet>import collections
Action = collections.namedtuple('Action', 'name hostgroup actions operations')
</snippet></ROW><ROW><id>7209545</id><snippet>;</snippet></ROW><ROW><id>7209545</id><snippet>,</snippet></ROW><ROW><id>7209545</id><snippet>command= "TEST ACTION;client_service_platform;CONDITION_TYPE_TRIGGER_NAME CONDITION_OPERATOR_LIKE Weighted Successful,CONDITION_TYPE_HOST CONDITION_OPERATOR_EQUAL tt1scp1; OPERATION_TYPE_MESSAGE userid1,OPERATION_TYPE_EMAIL userid1,OPERATION_TYPE_EMAIL userid2"
</snippet></ROW><ROW><id>7209545</id><snippet>a = Action(*command.split(';'))
</snippet></ROW><ROW><id>7209545</id><snippet>a.name
a.hostgroup
a.actions.split(',')
a.operations.split(',')
</snippet></ROW><ROW><id>7209545</id><snippet>.split()</snippet></ROW><ROW><id>7210278</id><snippet>QWebSettings.globalSettings().setAttribute(QWebSettings.PluginsEnabled, True)
</snippet></ROW><ROW><id>7210377</id><snippet>multiprocessing</snippet></ROW><ROW><id>7210377</id><snippet>#!/user/bin/python.exe
import math
from multiprocessing import Pool

global primes
primes = set()

def log(result):
    global primes

    if result:
        # since the result is a batch of primes, we have to use 
        # update instead of add (or for a list, extend instead of append)
        primes.update(result)

def isPrime( n ):
    if n &lt; 2:
        return False
    if n == 2:
        return True, n

    max = int(math.ceil(math.sqrt(n)))
    i = 2
    while i &lt;= max:
        if n % i == 0:
            return False
        i += 1
    return True, n

def isPrimeWorker(start, stop):
    """
    find a batch of primes
    """
    primes = set()
    for i in xrange(start, stop):
        if isPrime(i):
            primes.add(i)

    return primes



def main():

    global primes

    pool = Pool()

    # pick an arbitrary chunk size, this will give us 100 different 
    # chunks, but another value might be optimal
    step = 10000

    # use xrange instead of range, we don't actually need a list, just
    # the values in that range.
    for i in xrange(1000000, 2000000, step):
        # call the *worker* function with start and stop values.
        pool.apply_async(isPrimeWorker,(i, i+step,), callback = log)

    pool.close()
    pool.join()

    print sum(primes)

    return

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>7210623</id><snippet>for site in sites[:]:
    sites.remove(site)
</snippet></ROW><ROW><id>7210709</id><snippet>print</snippet></ROW><ROW><id>7210709</id><snippet>sys.stdout</snippet></ROW><ROW><id>7210709</id><snippet>write()</snippet></ROW><ROW><id>7210709</id><snippet>class MyOutputStream(object):

    def write(self, data):
        pass   # Ignore output

import sys
sys.stdout = MyOutputStream()

print("Test")  # Output is ignored
</snippet></ROW><ROW><id>7210709</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>7210709</id><snippet>sys.stdout = sys.__stdout__  # Restore stdout
</snippet></ROW><ROW><id>7210798</id><snippet>sort</snippet></ROW><ROW><id>7210909</id><snippet>Crypto</snippet></ROW><ROW><id>7210909</id><snippet>import Crypto
print(Crypto.__file__)
# should print /usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
</snippet></ROW><ROW><id>7210909</id><snippet>sys.path</snippet></ROW><ROW><id>7210909</id><snippet>Crypto.__version__</snippet></ROW><ROW><id>7210909</id><snippet>Crypto.Random</snippet></ROW><ROW><id>7210934</id><snippet>UNIQUE_INSTANCE_ID = {} # at module level
logging.debug("Instance %s." % (str("%X" % id( UNIQUE_INSTANCE_ID )).zfill(16)))
</snippet></ROW><ROW><id>7210934</id><snippet>from uuid import uuid4
from google.appengine.ext import db
from google.appengine.api import memcache

cache = memcache.Client()

class InstanceStamp(db.Model):
    code = db.StringProperty()

    INSTANCE_STAMP_KEY = "instance_stamp"

    @classmethod
    def get_stamp(cls):
        cache_key = cls.INSTANCE_STAMP_KEY 
        stamp_code = cache.get(cache_key)
        if stamp_code is None:
            code = uuid4().hex
            stamp = cls.get_or_insert('instance_stamp', code=code)
            if stamp is not None:
                cache.set(cache_key, stamp.code, 300)
                stamp_code = stamp.code
        return stamp_code
</snippet></ROW><ROW><id>7211049</id><snippet>p1 = sp.Popen(["ssh", "user@some_host", "echo \"%s\" | mysql -u ..." % sql], stdout=sp.PIPE)
</snippet></ROW><ROW><id>7211085</id><snippet>hasattr(arg, '__iter__')</snippet></ROW><ROW><id>7211085</id><snippet>if isinstance(arg, basestring):
    arg= set([arg])
else:
    try:
        selection= set(arg)
    except TypeError:
        selection= set([arg])
</snippet></ROW><ROW><id>7211109</id><snippet>c_ulong</snippet></ROW><ROW><id>7211109</id><snippet>unsigned long</snippet></ROW><ROW><id>7211109</id><snippet>c_ulonglong</snippet></ROW><ROW><id>7212116</id><snippet>hashable</snippet></ROW><ROW><id>7212116</id><snippet>hash()</snippet></ROW><ROW><id>7212116</id><snippet>@hashable
def push(self, item):
    '''
    Push the value item onto the heap, maintaining the heap invariant.
    '''
    return heapq.heappush(self.heap, item)
</snippet></ROW><ROW><id>7212116</id><snippet>def push(self, item):
    '''
    Push the value item onto the heap, maintaining the heap invariant.
    '''
    hash(item)
    return heapq.heappush(self.heap, item)
</snippet></ROW><ROW><id>7212116</id><snippet>__setitem__</snippet></ROW><ROW><id>7212116</id><snippet>def __setitem__(self, i, y):
    hash(i), hash(y)
    self.heap[self.heap.index(i)] = y
    heapq.heapify(self.heap)
</snippet></ROW><ROW><id>7212116</id><snippet>*args</snippet></ROW><ROW><id>7212116</id><snippet>**kwargs</snippet></ROW><ROW><id>7212920</id><snippet>clear()</snippet></ROW><ROW><id>7212920</id><snippet>event.set()
event.clear()
</snippet></ROW><ROW><id>7212920</id><snippet>set()</snippet></ROW><ROW><id>7213099</id><snippet>f</snippet></ROW><ROW><id>7213099</id><snippet>threading</snippet></ROW><ROW><id>7213099</id><snippet>from multiprocessing import Process, Lock
...
    Process(target=f, args=(a,lock)).start()
</snippet></ROW><ROW><id>7213099</id><snippet>from threading import Thread, Lock
...
    Thread(target=f, args=(a,lock)).start()
</snippet></ROW><ROW><id>7213509</id><snippet>import logging

logger = logging.getLogger('foo')

def stream_reader(stream):
    while True:
        line = stream.readline()
        logger.debug('%s', line.strip())
</snippet></ROW><ROW><id>7213509</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>7213509</id><snippet>foo_proc = subprocess.Popen(['foo'], stderr=subprocess.PIPE)

thread = threading.Thread(target=stream_reader, args=(foo_proc.stderr,))
thread.setDaemon(True) # optional 
thread.start()

# do other stuff

thread.join() # await thread termination (optional for daemons)
</snippet></ROW><ROW><id>7213509</id><snippet>stream_reader(foo_proc.stderr)</snippet></ROW><ROW><id>7213509</id><snippet>import logging, logging.handlers

handler = logging.handlers.RotatingFileHandler('/tmp/foo.log', 'a', 100000, 10)
logging.getLogger().addHandler(handler)
logging.getLogger('foo').setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>7214014</id><snippet>int</snippet></ROW><ROW><id>7214014</id><snippet>base</snippet></ROW><ROW><id>7214014</id><snippet>2</snippet></ROW><ROW><id>7214014</id><snippet>n = int('01010101', 2)
</snippet></ROW><ROW><id>7214014</id><snippet>chr()</snippet></ROW><ROW><id>7214014</id><snippet>data = chr(n)
</snippet></ROW><ROW><id>7214014</id><snippet>bytes</snippet></ROW><ROW><id>7214014</id><snippet>chr()</snippet></ROW><ROW><id>7214014</id><snippet>bytes</snippet></ROW><ROW><id>7214014</id><snippet>n</snippet></ROW><ROW><id>7214014</id><snippet>bytes</snippet></ROW><ROW><id>7214014</id><snippet>data = bytes([n])
</snippet></ROW><ROW><id>7214014</id><snippet>open('out.bin', 'wb') as f:
    f.write(data)
</snippet></ROW><ROW><id>7214128</id><snippet>class ValidationForm(forms.Form):
    email = forms.EmailField(label = 'Email', error_messages = {'invalid': 'Your Email Confirmation Not Equal With Your Email'})
    email_confirmation = forms.EmailField(label = 'Email Confirmation')

    def clean_email(self):
       if email != email_confirmation:
          raise ValidationError(self.fields['email'].error_messages['invalid'])
       return email    
</snippet></ROW><ROW><id>7214469</id><snippet>import base64
encoded = base64.b64encode(byteString)
# Now insert "encoded" into the database
</snippet></ROW><ROW><id>7214469</id><snippet>import base64
# Retrieve encoded from the database...
byteString = base64.b64decode(encoded)
</snippet></ROW><ROW><id>7214666</id><snippet>./manage.py test captcha
</snippet></ROW><ROW><id>7214744</id><snippet>map</snippet></ROW><ROW><id>7214744</id><snippet>x,y = [float(x) for x in line.split()]
</snippet></ROW><ROW><id>7214744</id><snippet>x,y = (float(x) for x in line.split())
</snippet></ROW><ROW><id>7214744</id><snippet>map</snippet></ROW><ROW><id>7214744</id><snippet>x,y = map(float, line.split())
</snippet></ROW><ROW><id>7214801</id><snippet>Height      Weight      Age     90 min aerobics/wk?     completed 5 mile run?
 155         45          31           Yes                      True
 160         51          33           No                       False
 168         52          28           No                       False
 155         61          25           Yes                      True
 169         57          52           Yes                      True
 172         81          35           No                       False
 164         70          23           Yes                      False
</snippet></ROW><ROW><id>7214801</id><snippet>def entropy(arr1) :
    import numpy as NP
    ue = NP.unique(x)
    p, entropy = 0., 0.
    for itm in ue :
        ndx = arr1 == itm
        p += NP.size(x[ndx]) / float(x.size)
        entropy -= p * NP.log2(p)
    return entropy
</snippet></ROW><ROW><id>7214801</id><snippet>p(i) = frequency(outcome) = count(outcome) / count(total_rows)

entropy = sum of p(i) x log2(p(i))
</snippet></ROW><ROW><id>7214801</id><snippet># simulate a data set with three class labels (0 1, 2)
# for your problem, the class labels are the keywords, 
# so just map each unique keyword to an integer value (e.g., { 'keyword1' : 0, 'keyword2' : 1}
&gt;&gt;&gt; x = NP.random.randint(0, 3, 20)
&gt;&gt;&gt; x
   array([1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 0, 2, 0, 1, 1, 1, 1, 1])

&gt;&gt;&gt; print("{0:.3f}".format(entropy(x)))
   0.758
</snippet></ROW><ROW><id>7214894</id><snippet>size="18"</snippet></ROW><ROW><id>7214894</id><snippet>size="18000"</snippet></ROW><ROW><id>7214975</id><snippet>class A:
    lockForB = threading.RLock()

class B:
    def __init__(self): 
        with A.lockForB:
            # do init stuff

    def othermethod(self):
        with A.lockForB:
            # do other stuff
</snippet></ROW><ROW><id>7214975</id><snippet>class C:
    lock = threading.RLock()
    def __init__(self):
        with self.lock:
            # do stuff
    def othermethod(self):
        with self.lock:
            # do other stuff
</snippet></ROW><ROW><id>7215345</id><snippet>point</snippet></ROW><ROW><id>7215345</id><snippet>point/__init__.py</snippet></ROW><ROW><id>7215345</id><snippet>from point import Point
from pointlist import PointList
</snippet></ROW><ROW><id>7215345</id><snippet>script.py:</snippet></ROW><ROW><id>7215345</id><snippet>import sys, point
verbose = False
pointlist = point.PointList()
</snippet></ROW><ROW><id>7215345</id><snippet>PointList</snippet></ROW><ROW><id>7215345</id><snippet>point</snippet></ROW><ROW><id>7215345</id><snippet>__init__.py</snippet></ROW><ROW><id>7215345</id><snippet>PointList</snippet></ROW><ROW><id>7215345</id><snippet>Point</snippet></ROW><ROW><id>7215345</id><snippet>from point import Point, PointList</snippet></ROW><ROW><id>7215345</id><snippet>script.py</snippet></ROW><ROW><id>7215345</id><snippet>from point import *</snippet></ROW><ROW><id>7215671</id><snippet>BROKER_VHOST = "celery"</snippet></ROW><ROW><id>7216014</id><snippet>class MARGINS(ctypes.Structure):
  _fields_ = [("cxLeftWidth", c_int),
              ("cxRightWidth", c_int),
              ("cyTopHeight", c_int),
              ("cyBottomHeight", c_int)
             ]
margins = MARGINS(1, 2, 1, 1)

dwm.DwmExtendFrameIntoClientArea(handel, ctypes.byref(margins))
</snippet></ROW><ROW><id>7216022</id><snippet>{ "term1" : { "DF" : x, "some_doc_id" : tf , "some_other_doc_id" : tf, etc  } ,
  "term2" : ...
  etc..
}
</snippet></ROW><ROW><id>7216618</id><snippet>from multiprocessing import Process, Queue

def multiply(a,b,que): #add a argument to function for assigning a queue
    que.put(a*b) #we're putting return value into queue

if __name__ == '__main__':
    queue1 = Queue() #create a queue object
    p = Process(target= multiply, args= (5,4,queue1)) #we're setting 3rd argument to queue1
    p.start()
    print(queue1.get()) #and we're getting return value: 20
    p.join()
    print("ok.")
</snippet></ROW><ROW><id>7216631</id><snippet>multiprocessing</snippet></ROW><ROW><id>7216631</id><snippet>fork</snippet></ROW><ROW><id>7216631</id><snippet>Popen.wait()</snippet></ROW><ROW><id>7216631</id><snippet>os.wait()</snippet></ROW><ROW><id>7216631</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7216631</id><snippet>os.wait()</snippet></ROW><ROW><id>7216631</id><snippet>os.wait()</snippet></ROW><ROW><id>7216631</id><snippet>Popen</snippet></ROW><ROW><id>7216843</id><snippet>def time_seconds(self, obj):
    return obj.timefield.strftime("%d %b %Y %H:%M:%S")

time_seconds.short_description = 'Precise Time'    

list_display = ('id', 'time_seconds', )
</snippet></ROW><ROW><id>7216995</id><snippet>numbers</snippet></ROW><ROW><id>7216995</id><snippet>numbers</snippet></ROW><ROW><id>7216995</id><snippet>int(math.sqrt(a))</snippet></ROW><ROW><id>7216995</id><snippet>numbers</snippet></ROW><ROW><id>7216995</id><snippet>primes</snippet></ROW><ROW><id>7216995</id><snippet>xrange(3,sqrt(a)+2,2)</snippet></ROW><ROW><id>7216995</id><snippet>2**31L</snippet></ROW><ROW><id>7216995</id><snippet>2**62</snippet></ROW><ROW><id>7216995</id><snippet>generate_primes(a)</snippet></ROW><ROW><id>7216995</id><snippet>find_largest_prime_divisor(a)</snippet></ROW><ROW><id>7216995</id><snippet># Prime Factorization by trial division

from math import ceil,sqrt
from collections import deque

# Global list of primes (strictly we should use a class variable not a global)
#primes = deque()
primes = []

def is_prime(n):
    """Test whether n is divisible by any prime known so far"""
    global primes
    for p in primes:
         if n%p == 0:
             return False #  n was divisible by p
    return True # either n is prime, or divisible by some p larger than our list    
def generate_primes(a):
    """Generate sieved list of primes (up to sqrt(a)) as we go"""
    global primes
    primes_upper_limit = int(sqrt(a))
    # We get huge speedup by using xrange() instead of range(), so we have to seed the list with 2
    primes.append(2)
    print "Generating sieved list of primes up to", primes_upper_limit, "...",
    # Consider prime candidates 2,3,5,7... in increasing increments of 2
    #for number in [2] + range(3,primes_upper_limit+2,2):
    for number in xrange(3,primes_upper_limit+2,2):
        if is_prime(number): # use global 'primes'
            #print "Found new prime", number
            primes.append(number) # Found a new prime larger than our list
    print "done"    
def find_largest_prime_factor(x, debug=False):
    """Find all prime factors of x, and return the largest."""
    global primes
    # First we need the list of all primes &lt;= sqrt(x)    
    generate_primes(x)
    to_factor = x # running value of the remaining quantity we need to factor
    largest_prime_factor = None
    for p in primes:
        if debug: print "Testing divisibility by", p
        if to_factor%p != 0:
            continue
        if debug: print "...yes it is"
        largest_prime_factor = p
        # Divide out all factors of p in x (may have multiplicity)
        while to_factor%p == 0:
            to_factor /= p
        # Stop when all factors have been found
        if to_factor==1:
            break
    else:
        print "Tested all primes up to sqrt(a), remaining factor must be a single prime &gt; sqrt(a) :", to_factor
    print "\nLargest prime factor of x is", largest_prime_factor
    return largest_prime_factor
</snippet></ROW><ROW><id>7216997</id><snippet>with open('concat_file.txt', "a")
</snippet></ROW><ROW><id>7216997</id><snippet>with open('concat_file.txt', "w") as concat_file:
    for my_file in glob.iglob('/Users/me/Desktop/*.txt'):
        shutil.copyfileobj(open(my_file, "r"), concat_file)
</snippet></ROW><ROW><id>7217110</id><snippet>""" weather.py - conditions to check """

def check_all(*args, **kwargs):
    """ check all conditions """
    if check_temperature(kwargs['temperature']):
        ... your code ...

def check_temperature(temp):
    -- perhaps some code including temp or whatever ...
    return temp &gt; 40
</snippet></ROW><ROW><id>7217110</id><snippet>import time, weather, sport, horoscope
kwargs = {'temperature':30}
condition = 'weather'
while True:
    if condition == 'weather':
        weather.check_all(**kwargs)
    elif condition == 'sport':
        sport.check_all()
    elif condition == 'horoscope':
        horoscope.check_all()
    time.sleep(1)
</snippet></ROW><ROW><id>7217110</id><snippet>reload(weather)</snippet></ROW><ROW><id>7217441</id><snippet>file = '/directory/filename'
os.system('qsub %s' % file)
</snippet></ROW><ROW><id>7217772</id><snippet>/usr/lib/python2.6/dist-packages/numpy/ma/tests/test_mrecords.py</snippet></ROW><ROW><id>7217772</id><snippet>import numpy as np
import numpy.ma.mrecords as mrecords

data = np.ma.array(
    np.ma.zeros(30, dtype=[('date', '|O4'), ('price', '&lt;f8')]),
    mask=[i&lt;10 for i in range(30)])

r = data.view(mrecords.mrecarray)

print(r.date[0])
# --
</snippet></ROW><ROW><id>7217921</id><snippet>&gt;&gt;&gt; def random_function(*args):
...     n = sum(args)
...     bottom = 0
...     for m in args:
...             for _ in range(m):
...                     yield random.uniform(bottom, bottom + m/n)
...             bottom += m/n
...
&gt;&gt;&gt; list(random_function(6,3,1))
[0.1849778317803791, 0.2779140519434712, 0.08380168147928498, 0.5477412922676888
, 0.5158697440011519, 0.5535466918038039, 0.8046993690361345, 0.714614514522802,
 0.7102988180048052, 0.9608096335125095]
&gt;&gt;&gt; list(random_function(6,3,1))
[0.29313403848522546, 0.5543469551407342, 0.14208842652528347, 0.344464024804118
7, 0.3168266508239002, 0.5956620829410604, 0.673021479097414, 0.7141779120687652
, 0.7783099010964684, 0.9103924993423906]
</snippet></ROW><ROW><id>7217921</id><snippet>(6,3,1)</snippet></ROW><ROW><id>7217921</id><snippet>10</snippet></ROW><ROW><id>7217921</id><snippet>random.uniform(0, 6/10) six times,
random.uniform(6/10, 9/10) three times, and
random.uniform(9/10, 1) once.
</snippet></ROW><ROW><id>7217923</id><snippet>__date</snippet></ROW><ROW><id>7217923</id><snippet>today_min = datetime.datetime.combine(date.today(), datetime.time.min)
today_max = datetime.datetime.combine(date.today(), datetime.time.max)
Invoice.objects.get(user=user, date__range=(today_min, today_max))
</snippet></ROW><ROW><id>7218300</id><snippet>h2</snippet></ROW><ROW><id>7218300</id><snippet>p</snippet></ROW><ROW><id>7218300</id><snippet>span</snippet></ROW><ROW><id>7218300</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt;
&gt;&gt;&gt; html = '''
... &lt;h2 class="sectionTitle"&gt;BACKGROUND&lt;/h2&gt;
... &lt;p&gt;Mr. Lewis Carroll has bla bla&lt;/p&gt;
... &lt;div style="margin-top:8px;"&gt;
...     &lt;a href="javascript:void(0)" onclick="show_more(this);"&gt;Read Full Background&lt;/a&gt;
... &lt;/div&gt;
... &lt;h2 class="sectionTitle"&gt;BACKGROUND&lt;/h2&gt;
... Mr. Paul J. Fribourg has bla bla&lt;/span&gt;
... &lt;div style="margin-top:8px;"&gt;
...     &lt;a href="javascript:void(0)" onclick="show_more(this);"&gt;Read Full Background&lt;/a&gt;
... &lt;/div&gt;
... '''
&gt;&gt;&gt;
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; headings = soup.findAll('h2', text='BACKGROUND')
&gt;&gt;&gt; for section in headings:
...     p = section.findNext('p')
...     if p:
...         print '&gt; ',  p.string
...     else:
...         print '&gt; ', section.parent.next.next.strip()
...
&gt;  Mr. Lewis Carroll has bla bla
&gt;  Mr. Paul J. Fribourg has bla bla
</snippet></ROW><ROW><id>7218300</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; html = urlopen('http://investing.businessweek.com/research/stocks/private/person.asp?personId=668561&amp;privcapId=160900&amp;previousCapId=285930&amp;previousTitle=LOEWS%20CORP')
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; headings = soup.findAll('h2', text='BACKGROUND')
&gt;&gt;&gt; for section in headings:
...     paragraph = section.findNext('p')
...     if paragraph and paragraph.string:
...         print '&gt; ', paragraph.string
...     else:
...         print '&gt; ', section.parent.next.next.strip()
... 
&gt;  Mr. Paul J. Fribourg has been the President of Contigroup Companies Inc. (for [...]
</snippet></ROW><ROW><id>7218303</id><snippet>input = "&lt;html&gt;&lt;sometag attr1=dont_quote_me attr2='but this one is quoted'&gt;Text&lt;/sometag&gt;&lt;/html&gt;"

bs = BeautifulSoup(input)

bs2 = bs.find('sometag')
for a in bs2.attrs:
    (attr,aval) = a
    print "%s='%s'" % (attr,aval),
</snippet></ROW><ROW><id>7218303</id><snippet>attr1='dont_quote_me' attr2='but this one is quoted'</snippet></ROW><ROW><id>7218303</id><snippet>\w+</snippet></ROW><ROW><id>7218344</id><snippet>LoopingCall</snippet></ROW><ROW><id>7218344</id><snippet>d</snippet></ROW><ROW><id>7218344</id><snippet>loop</snippet></ROW><ROW><id>7218344</id><snippet>LoopingCall</snippet></ROW><ROW><id>7218720</id><snippet>file2</snippet></ROW><ROW><id>7218720</id><snippet>file2=set(open("file2").read().split())
for line in open("file1"):
    if line.split(":")[0].strip("'") in file2:
        print line
</snippet></ROW><ROW><id>7218855</id><snippet>from itertools import chain
list(chain.from_iterable(node.sons.values() for node in current_nodes))
</snippet></ROW><ROW><id>7218855</id><snippet>map</snippet></ROW><ROW><id>7218855</id><snippet>reduce</snippet></ROW><ROW><id>7218855</id><snippet>lambda</snippet></ROW><ROW><id>7218855</id><snippet>chain</snippet></ROW><ROW><id>7218855</id><snippet>sum((node.sons.values() for node in current_nodes), [])
</snippet></ROW><ROW><id>7218887</id><snippet>render_to_response</snippet></ROW><ROW><id>7218887</id><snippet>Template.render(Context)</snippet></ROW><ROW><id>7218887</id><snippet>Template.render</snippet></ROW><ROW><id>7218887</id><snippet>string.replace('\n', '\r\n')</snippet></ROW><ROW><id>7218893</id><snippet>__path__</snippet></ROW><ROW><id>7218893</id><snippet>#create the plugins module (pseudo-package)

import sys, os

sys.modules['plugins'] = plugins = type(sys)('plugins')

plugins.__path__ = []
for plugin_dir in ['plugins1', 'plugins2']:
    path = os.path.join(sys.path[0], 'addons', plugin_dir)
    plugins.__path__.append(path)
</snippet></ROW><ROW><id>7218893</id><snippet>import_module</snippet></ROW><ROW><id>7218893</id><snippet>__import__</snippet></ROW><ROW><id>7218893</id><snippet>from importlib import import_module

myplugins = []
for plugin in ['myplugin1', 'myplugin2']:
    myplugins.append(import_module('plugins.' + plugin))
    myplugins[-1].init()

##or using __import__:

myplugins = []
for plugin in ['myplugin1', 'myplugin2']:
    myplugins.append(getattr(__import__('plugins.' + plugin), plugin))
    myplugins[-1].init()
</snippet></ROW><ROW><id>7218893</id><snippet>def init():
    print('myplugin1')
</snippet></ROW><ROW><id>7218893</id><snippet>def init():
    print('myplugin2')
</snippet></ROW><ROW><id>7219119</id><snippet>from</snippet></ROW><ROW><id>7219119</id><snippet>import_from</snippet></ROW><ROW><id>7219119</id><snippet>raise_stmt: 'raise' [test ['from' test]]
</snippet></ROW><ROW><id>7219341</id><snippet>from importlib import import_module

name = 'xml.etree.ElementTree.ElementTree'
parts = name.rsplit('.', 1)
ElementTree = getattr(import_module(parts[0]), parts[1])
tree = ElementTree()
</snippet></ROW><ROW><id>7219341</id><snippet>__import__</snippet></ROW><ROW><id>7219341</id><snippet>import sys

name = 'xml.etree.ElementTree.ElementTree'
parts = name.rsplit('.', 1)
__import__(parts[0])
ElementTree = getattr(sys.modules[parts[0]], parts[1])
tree = ElementTree()
</snippet></ROW><ROW><id>7219535</id><snippet>io.open()</snippet></ROW><ROW><id>7219535</id><snippet>os.open()</snippet></ROW><ROW><id>7219535</id><snippet>read()</snippet></ROW><ROW><id>7219535</id><snippet>write()</snippet></ROW><ROW><id>7219535</id><snippet>os.open()</snippet></ROW><ROW><id>7219535</id><snippet>open()</snippet></ROW><ROW><id>7219535</id><snippet>read()</snippet></ROW><ROW><id>7219535</id><snippet>write()</snippet></ROW><ROW><id>7219549</id><snippet>function add(a, b) {
  return
    a + b
}
</snippet></ROW><ROW><id>7219549</id><snippet>a + b</snippet></ROW><ROW><id>7219549</id><snippet>function add() {
  return;
    a + b;
}
</snippet></ROW><ROW><id>7219549</id><snippet>undefined</snippet></ROW><ROW><id>7219619</id><snippet>import os

def file_size(files):

    if isinstance(files, str):
        files = [files] # enlist

    size = 0
    for f in files:
        size += os.path.getsize(f)

    return size


if __name__ == '__main__':
    print file_size(__file__)
    print file_size([__file__, __file__])
    print file_size([])
</snippet></ROW><ROW><id>7219675</id><snippet>re.match(pattern, string[, flags])</snippet></ROW><ROW><id>7219675</id><snippet>.search()</snippet></ROW><ROW><id>7220081</id><snippet>combobox = ttk.Combobox(parent)
combobox['values'] = five_last_dirs_tuple
combobox['state'] = 'normal'

# later... 

path = combobox.get()
</snippet></ROW><ROW><id>7220162</id><snippet>$ trace python NOFILE.py
execve("/usr/bin/python", ["python", "NOFILE.py"], [/* 63 vars */]) = 0
brk(0)                                  = 0x9bef000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78de000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=160388, ...}) = 0
mmap2(NULL, 160388, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb78b6000
close(3)                                = 0
  ...[snip]...
stat64("NOFILE.py", 0xbfbc53bc)         = -1 ENOENT (No such file or directory)
stat64("NOFILE.py", 0xbfbc53cc)         = -1 ENOENT (No such file or directory)
open("NOFILE.py", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
write(2, "/usr/bin/python2.6: can't open f"..., 85/usr/bin/python2.6: can't open file 'NOFILE.py': [Errno 2] No such file or directory) = 85
exit_group(2)                           = ?
</snippet></ROW><ROW><id>7220482</id><snippet>&gt;&gt;&gt; audio = mutagen.easyid3.EasyID3('./Björk/Albums/1990 - Gling-Gló [mp3-231]/01 - Gling-Gló.mp3')
&gt;&gt;&gt; audio['title']
[u'Gling-Gl\xf3']
</snippet></ROW><ROW><id>7220482</id><snippet>In [1]: s = u'./Björk/Albums/1990 - Gling-Gló [mp3-231]/01 - Gling-Gló.mp3'

In [2]: s
Out[2]: u'./Bj\xf6rk/Albums/1990 - Gling-Gl\xf3 [mp3-231]/01 - Gling-Gl\xf3.mp3'

In [3]: s.encode('UTF-8')
Out[3]: './Bj\xc3\xb6rk/Albums/1990 - Gling-Gl\xc3\xb3 [mp3-231]/01 - Gling-Gl\xc3\xb3.mp3'
</snippet></ROW><ROW><id>7220482</id><snippet>In [4]: print s.encode('UTF-8')
./Björk/Albums/1990 - Gling-Gló [mp3-231]/01 - Gling-Gló.mp3
</snippet></ROW><ROW><id>7220564</id><snippet>l = [{} for x in range(2)]</snippet></ROW><ROW><id>7220564</id><snippet>[{}]*2</snippet></ROW><ROW><id>7220658</id><snippet>YourModel.objects.extra(
    select={'total': 'a * b * c'},
    order_by=['total'],
)
</snippet></ROW><ROW><id>7220789</id><snippet>datetime.strptime(date_string, format)</snippet></ROW><ROW><id>7220789</id><snippet>date_string</snippet></ROW><ROW><id>7220789</id><snippet>format</snippet></ROW><ROW><id>7220789</id><snippet>datetime(*(time.strptime(date_string, format)[0:6]))</snippet></ROW><ROW><id>7220789</id><snippet>ValueError</snippet></ROW><ROW><id>7220789</id><snippet>date_string</snippet></ROW><ROW><id>7220789</id><snippet>format</snippet></ROW><ROW><id>7220789</id><snippet>time.strptime()</snippet></ROW><ROW><id>7220789</id><snippet>strftime()</snippet></ROW><ROW><id>7220789</id><snippet>strptime()</snippet></ROW><ROW><id>7220969</id><snippet>t+t</snippet></ROW><ROW><id>7220969</id><snippet>__coerce__</snippet></ROW><ROW><id>7220969</id><snippet>__add__</snippet></ROW><ROW><id>7220969</id><snippet>__coerce__</snippet></ROW><ROW><id>7220969</id><snippet>1.0 + 2</snippet></ROW><ROW><id>7220969</id><snippet>__coerce__</snippet></ROW><ROW><id>7221237</id><snippet>import weakref
class Node():
    parent = None
    child = None
    @property
    def parent(self):
        parent = self._parent()
        if parent is not None:
            return parent
        raise ValueError("parent has been deleted")
    @parent.setter     # python 2.6+
    def parent(self, parent):
        self._parent = weakref.ref(parent)
</snippet></ROW><ROW><id>7221398</id><snippet>'abc%rdef' % obj</snippet></ROW><ROW><id>7221398</id><snippet>'%r'</snippet></ROW><ROW><id>7221398</id><snippet>repr(obj)</snippet></ROW><ROW><id>7221398</id><snippet>'ABC%sDEF' % obj</snippet></ROW><ROW><id>7221398</id><snippet>'%s'</snippet></ROW><ROW><id>7221398</id><snippet>str(obj)</snippet></ROW><ROW><id>7221398</id><snippet>li = [12,45,'haze']</snippet></ROW><ROW><id>7221398</id><snippet>print li</snippet></ROW><ROW><id>7221398</id><snippet>print repr(li)</snippet></ROW><ROW><id>7221398</id><snippet>[12,45,'haze']</snippet></ROW><ROW><id>7221398</id><snippet>ss = 'oregon'</snippet></ROW><ROW><id>7221398</id><snippet>print ss</snippet></ROW><ROW><id>7221398</id><snippet>print repr(ss)</snippet></ROW><ROW><id>7221398</id><snippet>'oregon'</snippet></ROW><ROW><id>7221477</id><snippet>check_if_value_is_an_instance_of_some_i_dont_know_what_set_of_types</snippet></ROW><ROW><id>7221477</id><snippet>not isinstance( value, (frozenset, list, set, tuple,) )</snippet></ROW><ROW><id>7221690</id><snippet>DrawText()</snippet></ROW><ROW><id>7221690</id><snippet>TextOut()</snippet></ROW><ROW><id>7221690</id><snippet>PyCDC.DrawText()</snippet></ROW><ROW><id>7221690</id><snippet>DrawTextW()</snippet></ROW><ROW><id>7221690</id><snippet>TextOutW()</snippet></ROW><ROW><id>7221783</id><snippet>IN</snippet></ROW><ROW><id>7221783</id><snippet>25</snippet></ROW><ROW><id>7221783</id><snippet>s.setsockopt(socket.SOL_SOCKET, 25, "eth1"+'\0')
</snippet></ROW><ROW><id>7221940</id><snippet>codecs.open</snippet></ROW><ROW><id>7221940</id><snippet>.encode("utf-8")</snippet></ROW><ROW><id>7221940</id><snippet>.decode("utf-8")</snippet></ROW><ROW><id>7222092</id><snippet>import numpy

x = numpy.arange(1000000, dtype=numpy.int32).reshape((-1,2))
bad = numpy.arange(0, 1000000, 2000, dtype=numpy.int32)

print x.shape
print bad.shape

cleared = numpy.delete(x, numpy.where(numpy.in1d(x[:,0], bad)), 0)
print cleared.shape
</snippet></ROW><ROW><id>7222092</id><snippet>(500000, 2)
(500,)
(499500, 2)
</snippet></ROW><ROW><id>7222092</id><snippet>x</snippet></ROW><ROW><id>7222092</id><snippet>True</snippet></ROW><ROW><id>7222092</id><snippet>bad</snippet></ROW><ROW><id>7222092</id><snippet>False</snippet></ROW><ROW><id>7222092</id><snippet>True</snippet></ROW><ROW><id>7222092</id><snippet>False</snippet></ROW><ROW><id>7222092</id><snippet>True</snippet></ROW><ROW><id>7222199</id><snippet>clean_contact_person</snippet></ROW><ROW><id>7222199</id><snippet>class AppartmentSellForm(ModelForm):
    contact_person = forms.CharField(max_length=30)

    class Meta:
        model = Appartment

    def clean_contact_person(self):
        name = self.cleaned_data['contact_person']
        # check the name if you need to
        try:
            # maybe check if it already exists?
            person = models.ContactPerson.objects.get(name=name)
        except ContactPerson.DoesNotExist:
            person = models.ContactPerson(name=name)
            # you probably only want to save this when the form is saved (in the view)
        return person
</snippet></ROW><ROW><id>7222199</id><snippet>commit=False</snippet></ROW><ROW><id>7222199</id><snippet>save_m2m</snippet></ROW><ROW><id>7222199</id><snippet>save_m2m</snippet></ROW><ROW><id>7222457</id><snippet>Main code:
    else:
        t.delete(0, END)
        time.sleep(1)
        t.insert(0, '%s\n' % str(data))
    t.after(2, lambda: status(t))

Poster code:
def poster(id,que):
    while True:
        delay=random.uniform(5, 10)
        time.sleep(delay-0.5)
        que.put(' ')
        time.sleep(.5)
        que.put(' epoch=%f, delay=%f' % (time.time(), delay))
</snippet></ROW><ROW><id>7222641</id><snippet>f()</snippet></ROW><ROW><id>7222641</id><snippet>f()</snippet></ROW><ROW><id>7222641</id><snippet>f()</snippet></ROW><ROW><id>7222641</id><snippet>f()</snippet></ROW><ROW><id>7222641</id><snippet>from multiprocessing import Pool, Value, RawArray, RLock
from time import sleep

class Latch:

    '''A countdown latch that lets us wait for a job of "n" parts'''

    def __init__(self, n):
        self.__counter = Value('i', n)
        self.__lock = RLock()

    def decrement(self):
        with self.__lock:
            self.__counter.value -= 1
            print('dec', self.read())
        return self.read() == 0

    def read(self):
        with self.__lock:
            return self.__counter.value

    def join(self):
        while self.read():
            sleep(1)


def list_of_values(x):
    '''An expensive function'''
    print(x, ': thinking...')
    sleep(1)
    print(x, ': thought')
    return list(range(x))


pool = Pool()


def async_f(x, on_complete=None):
    '''Return the sum of the values in the expensive list'''
    if x == 0:
        on_complete(0) # no list, return 0
    else:
        n = x # need to know size of result beforehand
        latch = Latch(n) # wait for n entires to be calculated
        result = RawArray('i', n+1) # where we will assemble the map
        def delayed_map(values):
            '''This is the callback for the pool async process - it runs
               in a separate thread within this process once the
               expensive list has been calculated and orchestrates the
               mapping of f over the result.'''
            result[0] = x # first value in list is x
            for (v, i) in enumerate(values):
                def callback(fx, i=i):
                    '''This is the callback passed to f() and is called when 
                       the function completes.  If it is the last of all the
                       calls in the map then it calls on_complete() (ie another
                       instance of this function) for the calling f().'''
                    result[i+1] = fx
                    if latch.decrement(): # have completed list
                        # at this point result contains [x]+map(f, ...)
                        on_complete(sum(result)) # so return sum
                async_f(v, callback)
        # Ask worker to generate list then call delayed_map
        pool.apply_async(list_of_values, [x], callback=delayed_map)


def run():
    '''Tie into the same mechanism as above, for the final value.'''
    result = Value('i')
    latch = Latch(1)
    def final_callback(value):
        result.value = value
        latch.decrement()
    async_f(6, final_callback)
    latch.join() # wait for everything to complete
    return result.value


print(run())
</snippet></ROW><ROW><id>7222658</id><snippet>r = urllib.urlopen('http://www.elnorte.ec/')
x = BeautifulSoup.BeautifulSoup(r.read)
r.close()

print x.prettify('latin-1')
</snippet></ROW><ROW><id>7222658</id><snippet>x.__str__(encoding='latin1')</snippet></ROW><ROW><id>7222986</id><snippet>QGridLayout</snippet></ROW><ROW><id>7222986</id><snippet>MinimumExpanding</snippet></ROW><ROW><id>7222986</id><snippet>Expanding</snippet></ROW><ROW><id>7223218</id><snippet>iterator.next()</snippet></ROW><ROW><id>7223218</id><snippet>iterator.__next__()</snippet></ROW><ROW><id>7223237</id><snippet>x = []
x.insert(0, x)
# now the repr(x) is '[[...]]'.
</snippet></ROW><ROW><id>7223237</id><snippet>repr</snippet></ROW><ROW><id>7223237</id><snippet>...</snippet></ROW><ROW><id>7223237</id><snippet>y, z = [], []
x = [y, z]
y.insert(0, z)
z.insert(0, y)
# looks the same as it would if y contained y and z contained z.
</snippet></ROW><ROW><id>7223237</id><snippet>repr</snippet></ROW><ROW><id>7223584</id><snippet>y = str(geometry.GetY())
</snippet></ROW><ROW><id>7223584</id><snippet>file</snippet></ROW><ROW><id>7223584</id><snippet>help(file)</snippet></ROW><ROW><id>7223801</id><snippet>import SimpleXMLRPCServer

from google.appengine.ext import webapp
from google.appengine.ext import db

class WebService(webapp.RequestHandler):
    def login(self, username, password):

        calls = db.GqlQuery("SELECT * from User ORDER BY username DESC LIMIT 10")

        for call in calls:
            if calls.username == username and calls.password == password:
                return True
        return False

    def register(self, username, password):

        db.GqlQuery("INSERT into User (username, password) value(%s, %s)"%(username, password))
        return True

    server = SimpleXMLRPCServer.SimpleXMLRPCServer(('localhost',8080))
    server.register_function(login)
    server.register_function(register)
    server.serve_forever()
</snippet></ROW><ROW><id>7224200</id><snippet>dash</snippet></ROW><ROW><id>7224200</id><snippet>|</snippet></ROW><ROW><id>7224200</id><snippet>n</snippet></ROW><ROW><id>7224200</id><snippet>os.system()</snippet></ROW><ROW><id>7224200</id><snippet>subprocess</snippet></ROW><ROW><id>7225036</id><snippet># AFFECTS everything reachable from the directory named in "top",
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could affect all your disk files.

import os, arcpy, sys, datetime
top = os.getcwd()
RootOutput = top
FileTypes=['shp']
SearchStrings=['Temp_Pol', 'Spatial_Ex']

filecount=0
#successcount=0
#errorcount=0

print "Working in: "+os.getcwd()

list =[]
f = open(RootOutput+'\\Success_LOG.txt', 'a')
f.write("Log of files Succesfully processed. RESULT of process run @:"+str(datetime.datetime.now())+"\n")
f.close()

for root, dirs, files in os.walk(top, topdown=False):
    for fl in files:
      currentFile=os.path.join(root, fl)
      for FileType in FileTypes:
          status= str.endswith(currentFile,FileType)
          if str(status) == 'True':
              for SearchString in SearchStrings:
                  if str(SearchString in currentFile) == 'True':
                    #print str(currentFile)+str(status)       
                    filecount=filecount+1
                    list.append(currentFile)

print 'Merging: ' + str(list)
</snippet></ROW><ROW><id>7225036</id><snippet>print 'Created: '+RootOutput+"\\Full_Extent.shp"
f = open(RootOutput+'\\Success_LOG.txt', 'a')
f.write(str(list)+"\n\n Merged to: "+RootOutput+"\\Full_Extent.shp")
f.close()
</snippet></ROW><ROW><id>7225119</id><snippet>sorted_B = [list(value) for key, value in 
                groupby(sorted(B_dict.values()), key=itemgetter(2,3))]
</snippet></ROW><ROW><id>7225119</id><snippet>for k, v in A_dict.items():
    for i, value in B_dict.items():
        if k == value[0]:
            outfile.write('{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n'.format(
                i, k, v, value[1], value[2], value[3])
</snippet></ROW><ROW><id>7225119</id><snippet>for i, value in B_dict.items():
    k = value[0]
    if k in A_dict:
        outfile.write('{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n'.format(
            i, k, A_dict[k], value[1], value[2], value[3])
</snippet></ROW><ROW><id>7225123</id><snippet>points[0][0]['a'][:] = np.array([1, 1, 1])
</snippet></ROW><ROW><id>7225123</id><snippet>points[0,0]['a'][:] = np.array([1, 1, 1])
</snippet></ROW><ROW><id>7225175</id><snippet>if hasattr(f,'__iter__'):
    return sum(filter(fileSizes,f))
</snippet></ROW><ROW><id>7225175</id><snippet>f</snippet></ROW><ROW><id>7225175</id><snippet>__iter__</snippet></ROW><ROW><id>7225218</id><snippet>all()</snippet></ROW><ROW><id>7225218</id><snippet>if all(i % n == 0 for n in range(11, 101)):
    print(i)
</snippet></ROW><ROW><id>7225263</id><snippet>len(A.data)</snippet></ROW><ROW><id>7225375</id><snippet>'&lt;policy-file-request/&gt;\0'</snippet></ROW><ROW><id>7225375</id><snippet>readline()</snippet></ROW><ROW><id>7225375</id><snippet>expected = '&lt;policy-file-request&gt;'
s.read(len(expected))
</snippet></ROW><ROW><id>7225583</id><snippet>&gt;&gt;&gt; size = (4,4)
&gt;&gt;&gt; mat = {}
&gt;&gt;&gt; mat[0,1] = 3
&gt;&gt;&gt; mat[2,3] = 5
&gt;&gt;&gt; for i in range(size[0]):
        for j in range(size[1]):
            print mat.get((i,j), 0) ,
        print

0 3 0 0
0 0 0 0
0 0 0 5
0 0 0 0
</snippet></ROW><ROW><id>7225583</id><snippet>class Sparse(dict):
    pass
</snippet></ROW><ROW><id>7225583</id><snippet>scipy.sparse</snippet></ROW><ROW><id>7225934</id><snippet>for x from 0 to persons.size(), x += 2
    pair(persons.get(i), persons.get(i + 1));
</snippet></ROW><ROW><id>7226403</id><snippet>os.listdir</snippet></ROW><ROW><id>7226403</id><snippet>os.walk</snippet></ROW><ROW><id>7226403</id><snippet>glob.glob</snippet></ROW><ROW><id>7226403</id><snippet>import os
folders = [x for x in os.listdir(path) if x.startswith('B07')]
</snippet></ROW><ROW><id>7226952</id><snippet>&gt; r = random.Random()

&gt; r.seed('Hi')
&gt; r.random()
0.3787897089299177

&gt; r.seed('Hi')
&gt; r.random()
0.3787897089299177
</snippet></ROW><ROW><id>7226978</id><snippet>pattern = re.compile(u'&lt;\/?\w+\s*[^&gt;]*?\/?&gt;', re.DOTALL | re.MULTILINE | re.IGNORECASE | re.UNICODE)
text = pattern.sub(u" ", text)
</snippet></ROW><ROW><id>7227018</id><snippet>oldlist = ['a', 'b', 'spam', 'c']
newlist = filter(lambda x: x != 'spam', oldlist)
</snippet></ROW><ROW><id>7227018</id><snippet>newlist = [x for x in oldlist if x != 'spam']
</snippet></ROW><ROW><id>7227232</id><snippet>import urllib2

url = "http://translate.google.com/translate_tts?tl=en&amp;q=text"
request = urllib2.Request(url)
request.add_header('User-agent', 'Mozilla/5.0') 
opener = urllib2.build_opener()

f = open("data.mp3", "wb")
f.write(opener.open(request).read())
f.close()
</snippet></ROW><ROW><id>7227243</id><snippet>import scikits.timeseries as ts
import datetime

a = datetime.datetime(2011,8,1)
b = datetime.datetime(2011,8,29)

diff_business_days = ts.Date('B', b) - ts.Date('B', a)
# returns 20
</snippet></ROW><ROW><id>7227243</id><snippet>import datetime
from dateutil import rrule

a = datetime.datetime(2011,8,1)
b = datetime.datetime(2011,8,29)

diff_business_days = len(list(rrule.rrule(rrule.DAILY,
                                          dtstart=a,
                                          until=b - datetime.timedelta(days=1),
                                          byweekday=(rrule.MO, rrule.TU, rrule.WE, rrule.TH, rrule.FR))))
</snippet></ROW><ROW><id>7227326</id><snippet>import yaml

def constructor(loader, node) :
    fields = loader.construct_mapping(node)
    return Test(**fields)

yaml.add_constructor('!Test', constructor)

class Test(object) :
    def __init__(self, foo, bar=3) :
        self.foo = foo
        self.bar = bar
    def __repr__(self):
        return "%s(foo=%r, bar=%r)" % (self.__class__.__name__, self.foo, self.bar)

print yaml.load("""
- !Test { foo: 1 }
- !Test { foo: 10, bar: 20 }""")
</snippet></ROW><ROW><id>7227326</id><snippet>[Test(foo=1, bar=3), Test(foo=10, bar=20)]
</snippet></ROW><ROW><id>7227553</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>7227553</id><snippet>models.py</snippet></ROW><ROW><id>7227704</id><snippet>&gt;&gt;&gt; import cv2 as cv
&gt;&gt;&gt; cv.__version__
'$Rev: 4557 $'
</snippet></ROW><ROW><id>7227704</id><snippet>import cv2 as cv
import numpy as np
src = cv.imread('img.jpg')
kernel = np.ones((7,7), dtype=np.float)/49.0
dst = cv.filter2D(src, -1, kernel)
cv.imwrite("result.jpg", dst)
</snippet></ROW><ROW><id>7227739</id><snippet>str = str[3:]
</snippet></ROW><ROW><id>7227739</id><snippet>str = '/' + '/'.join( str.split('/')[2:] )
</snippet></ROW><ROW><id>7227739</id><snippet>import re
str = re.sub('^/[a-z]*', '', str)
</snippet></ROW><ROW><id>7227739</id><snippet>re.compile()</snippet></ROW><ROW><id>7227793</id><snippet>WAIT_ABANDONED</snippet></ROW><ROW><id>7227793</id><snippet>WAIT_ABANDONED</snippet></ROW><ROW><id>7227793</id><snippet>WaitFromSingleObject()</snippet></ROW><ROW><id>7227793</id><snippet>WAIT_OBJECT_0</snippet></ROW><ROW><id>7227793</id><snippet>WAIT_ABANDONED</snippet></ROW><ROW><id>7228048</id><snippet>Changelog :

* change MongokitMasterSlaveConnection to MasterSlaveConnection for consistency
* fix #57 -- support pymongo &gt; 1.9 in grid.py
* fix #45 -- remove automatique index creation
* fix #43 -- slicing a cursor should return a mongokit document, not dict
* Dont try to convert None struct to json (patch from @mLewisLogic thanks !)
* fix schemaless issue (thanks to Mihai Pocorschi for reporting it)
</snippet></ROW><ROW><id>7228233</id><snippet>import os.path

def getnewfilename(filename):
    testfile = filename
    i = 0
    while os.path.exists(testfile):
        i += 1
        testfile = "%s_%s" % (testfile, i) 

    return testfile
</snippet></ROW><ROW><id>7228233</id><snippet>filename
filename_1
filename_2
</snippet></ROW><ROW><id>7228233</id><snippet>filename
filename_001
filename_002
filename_003
</snippet></ROW><ROW><id>7228338</id><snippet>os.walk</snippet></ROW><ROW><id>7228338</id><snippet>for dirpath, dirnames, filenames in os.walk('.'):
    for filename in filenames:
        path = os.path.join(dirpath, filename)
        os.chmod(path, 0o777) # for example
</snippet></ROW><ROW><id>7228951</id><snippet>min</snippet></ROW><ROW><id>7228951</id><snippet>key</snippet></ROW><ROW><id>7228951</id><snippet>len</snippet></ROW><ROW><id>7228951</id><snippet>strings = ["some", "example", "words", "that", "i", "am", "fond", "of"]

print min(strings, key=len) # prints "i"
</snippet></ROW><ROW><id>7229271</id><snippet>regex</snippet></ROW><ROW><id>7229271</id><snippet>js_regex</snippet></ROW><ROW><id>7229271</id><snippet>regex</snippet></ROW><ROW><id>7229271</id><snippet>post_code = RegexField(
    regex='',
    required = True,
    widget=ValidationTextInput(
        attrs={
            'invalid': 'Post Code in incorrect format',
            'regExp': '[A-Z]{1,2}\d[A-Z\d]? \d[ABD-HJLNP-UW-Z]{2}'
        }
    )
)
</snippet></ROW><ROW><id>7229271</id><snippet>ValidationTextInput</snippet></ROW><ROW><id>7229470</id><snippet>XML_CATALOG_FILES</snippet></ROW><ROW><id>7229470</id><snippet>/etc/xml/catalog</snippet></ROW><ROW><id>7229470</id><snippet>&gt;&gt;&gt; import libxml2
&gt;&gt;&gt; libxml2.loadCatalog('catalog.xml')
&gt;&gt;&gt; print libxml2.catalogResolveURI('file:///common/logo.xml')
file:///home/kst/svn/TOOLS/Docbook/common/logo.xml
</snippet></ROW><ROW><id>7229532</id><snippet>pair = map(int, raw_input().split())
x, y = pair
</snippet></ROW><ROW><id>7229787</id><snippet>    ##  force the refresh of the screen
    while gtk.events_pending():
        gtk.main_iteration()
</snippet></ROW><ROW><id>7229826</id><snippet>&gt;&gt;&gt; data = """
============================
coaza077-cor-01&gt; show module

 Status and Counters - Module Information
  Chassis: 2900-24G J9049A         Serial Number:   SG748KI09F
  Slot  Module Description                       Serial Number
  ----- ---------------------------------------- --------------

coaza077-cor-01&gt; exit
Do you want to log out [y/n]? y
=============================
"""
&gt;&gt;&gt; chasis = data.split('Chassis:')[1].split('Serial')[0].strip()
&gt;&gt;&gt; serial = data.split('Serial Number:')[1].split()[0].strip()
&gt;&gt;&gt; 
&gt;&gt;&gt; print chasis
2900-24G J9049A
&gt;&gt;&gt; print serial
SG748KI09F
</snippet></ROW><ROW><id>7229826</id><snippet>&gt;&gt;&gt; x, y = chasis.split()
&gt;&gt;&gt; print x
2900-24G
&gt;&gt;&gt; print y
J9049A
</snippet></ROW><ROW><id>7230095</id><snippet>ss=['01010100','10010101010','010101110101010101'] #encoded message


from bitstring import BitArray,BitStream
print 'write it to file'
with open('binary.bin','wb') as f:
    s=''.join(ss);
    b=BitArray(bin=s)                 
    f.write(b.tobytes())# thanks to Scott, tobytes() method is very useful

print 'read it to file'
b=BitArray(filename='binary.bin')
print b.bin
</snippet></ROW><ROW><id>7230587</id><snippet>with open('iplist.txt') as fd:
    my_list = [line.strip().rstrip('.txt') for line in fd]

print ' '.join(my_list)
</snippet></ROW><ROW><id>7230587</id><snippet>1231231 231231 24141241 3123123 341241241 4123412
</snippet></ROW><ROW><id>7230587</id><snippet>$ cat iplist.txt 
1231231.txt
231231.txt
24141241.txt
3123123.txt
341241241.txt
4123412.txt
</snippet></ROW><ROW><id>7230587</id><snippet>with</snippet></ROW><ROW><id>7230800</id><snippet>class MyObj:
  def __call__():
    print 'Called!'

&gt;&gt;&gt; mo = MyObj()
&gt;&gt;&gt; mo()
Called!
</snippet></ROW><ROW><id>7230921</id><snippet>imshow</snippet></ROW><ROW><id>7230921</id><snippet>from matplotlib import mpl,pyplot
import numpy as np

# make values from -5 to 5, for this example
zvals = np.random.rand(100,100)*10-5

# make a color map of fixed colors
cmap = mpl.colors.ListedColormap(['blue','black','red'])
bounds=[-6,-2,2,6]
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

# tell imshow about color map so that only set colors are used
img = pyplot.imshow(zvals,interpolation='nearest',
                    cmap = cmap,norm=norm)

# make a color bar
pyplot.colorbar(img,cmap=cmap,
                norm=norm,boundaries=bounds,ticks=[-5,0,5])

pyplot.show()
</snippet></ROW><ROW><id>7230921</id><snippet>boundaries</snippet></ROW><ROW><id>7230921</id><snippet>imshow</snippet></ROW><ROW><id>7230921</id><snippet>origin</snippet></ROW><ROW><id>7230921</id><snippet>origin="lower"</snippet></ROW><ROW><id>7230921</id><snippet>fig = pyplot.figure(2)

cmap2 = mpl.colors.LinearSegmentedColormap.from_list('my_colormap',
                                           ['blue','black','red'],
                                           256)

img2 = pyplot.imshow(zvals,interpolation='nearest',
                    cmap = cmap2,
                    origin='lower')

pyplot.colorbar(img2,cmap=cmap2)

fig.savefig("image2.png")
</snippet></ROW><ROW><id>7230921</id><snippet>grid</snippet></ROW><ROW><id>7230921</id><snippet>pyplot.grid(True,color='white')
</snippet></ROW><ROW><id>7230921</id><snippet>savefig</snippet></ROW><ROW><id>7230921</id><snippet>grid</snippet></ROW><ROW><id>7230921</id><snippet>linewidth</snippet></ROW><ROW><id>7231332</id><snippet>HitCount.DoesNotExist</snippet></ROW><ROW><id>7231371</id><snippet>to_modify = [5,4,3,2,1,0]
indexes = [0,1,3,5]
replacements = [0,0,0,0]

for index in indexes:
    to_modify[indexes[index]] = replacements[index]
    # to_modify[indexes[index]]
    # indexes[index]
    # Yo dawg, I heard you liked indexes, so I put an index inside your indexes
    # so you can go out of bounds while you go out of bounds.
</snippet></ROW><ROW><id>7231371</id><snippet>zip</snippet></ROW><ROW><id>7231371</id><snippet>izip</snippet></ROW><ROW><id>7231371</id><snippet>for (index, replacement) in zip(indexes, replacements):
    to_modify[index] = replacement
</snippet></ROW><ROW><id>7231371</id><snippet>to_modify</snippet></ROW><ROW><id>7231439</id><snippet> p=re.compile('(?P&lt;show&gt;[\w\s.,_-]+?)\.[Ss]?(?P&lt;season&gt;[\d]{1,2})[XxEe]?(?P&lt;episode&gt;[\d]{2})')
 print p.findall("Game.of.Thrones.S01E05.720p.HDTV.x264-CTU.mkv")
 [('Game.of.Thrones', '01', '05')]
 print p.findall("Entourage.S08E02.HDTV.XviD-LOL.avi")
 [('Entourage', '08', '02')]
</snippet></ROW><ROW><id>7231439</id><snippet>?</snippet></ROW><ROW><id>7231439</id><snippet>+</snippet></ROW><ROW><id>7231469</id><snippet>Site</snippet></ROW><ROW><id>7231469</id><snippet>t.w.http.HTTPFactory</snippet></ROW><ROW><id>7231469</id><snippet>from twisted.web import http


class HTTPChannelWithExpectContinue(http.HTTPChannel):
    def headerReceived(self, line):
        """Just extract the header and handle Expect 100-continue:
        """
        header, data = line.split(':', 1)
        header = header.lower()
        data = data.strip()
        if (self._version=="HTTP/1.1" and
            header == 'expect' and data.lower() == '100-continue'):
            self.transport.write("HTTP/1.1 100 Continue\r\n\r\n")
        return http.HTTPChannel.headerReceived(self, line)


http.HTTPFactory.protocol = HTTPChannelWithExpectContinue
</snippet></ROW><ROW><id>7231698</id><snippet>search_input = forms.CharField(_(u'Search word'), required=False)
search_input.widget = forms.TextInput(attrs={'size': 10, 'title': 'Search',})
</snippet></ROW><ROW><id>7231860</id><snippet>s = BeautifulSoup(...)
s.find(text='Lets go somewhere')
</snippet></ROW><ROW><id>7232181</id><snippet>message = 'Subject: %s\n\n%s' % (SUBJECT, TEXT)
</snippet></ROW><ROW><id>7232181</id><snippet>server = smtplib.SMTP(SERVER)
server.sendmail(FROM, TO, message)
server.quit()
</snippet></ROW><ROW><id>7232181</id><snippet>email</snippet></ROW><ROW><id>7232306</id><snippet>eval(repr(self.val))
</snippet></ROW><ROW><id>7232306</id><snippet>self.val</snippet></ROW><ROW><id>7232306</id><snippet>repr</snippet></ROW><ROW><id>7232306</id><snippet>unicode</snippet></ROW><ROW><id>7232306</id><snippet>TypeError</snippet></ROW><ROW><id>7232377</id><snippet>urllib2</snippet></ROW><ROW><id>7232377</id><snippet>Accept-encoding: gzip</snippet></ROW><ROW><id>7232649</id><snippet>if __name__ == '__main__':
   select()
</snippet></ROW><ROW><id>7232649</id><snippet>python ConversionSelector.py</snippet></ROW><ROW><id>7232649</id><snippet>__main__</snippet></ROW><ROW><id>7232649</id><snippet>python</snippet></ROW><ROW><id>7232649</id><snippet>ConversionSelector.py</snippet></ROW><ROW><id>7232649</id><snippet>import ConversionSelector
ConversionSelector.select()
</snippet></ROW><ROW><id>7232649</id><snippet>-i</snippet></ROW><ROW><id>7232649</id><snippet>python -i ConversionSelector.py</snippet></ROW><ROW><id>7232649</id><snippet>select()</snippet></ROW><ROW><id>7233356</id><snippet>target.write("%s %s %s %s %s %s") % (line1, linebreak, line2, linebreak, line3, linebreak)
</snippet></ROW><ROW><id>7233356</id><snippet>target.write("%s %s %s %s %s %s" % (line1, linebreak, line2, linebreak, line3, linebreak))
</snippet></ROW><ROW><id>7233356</id><snippet>target.write(' '.join(line1, linebreak, line2, linebreak, line3, linebreak))
</snippet></ROW><ROW><id>7233597</id><snippet>for index, entry in enumerate(longList):
    if entry == 'foo':
        print index
</snippet></ROW><ROW><id>7233876</id><snippet>res = [z for z in ((x, y[i]) for i in I)]
</snippet></ROW><ROW><id>7234038</id><snippet>locale</snippet></ROW><ROW><id>7234038</id><snippet>time.strptime</snippet></ROW><ROW><id>7234038</id><snippet>locale</snippet></ROW><ROW><id>7234038</id><snippet>time.strptime</snippet></ROW><ROW><id>7234038</id><snippet>time.strftime</snippet></ROW><ROW><id>7234038</id><snippet>time.strptime</snippet></ROW><ROW><id>7234038</id><snippet>locale</snippet></ROW><ROW><id>7234038</id><snippet>time.strftime</snippet></ROW><ROW><id>7234038</id><snippet>time</snippet></ROW><ROW><id>7234038</id><snippet>locale</snippet></ROW><ROW><id>7234066</id><snippet>blubb@nemo:~$ from ui.MovieManager import MovieManager
from: can't read /var/mail/ui.MovieManager
</snippet></ROW><ROW><id>7234066</id><snippet>sh Launcher.py</snippet></ROW><ROW><id>7234066</id><snippet>./Launcher.py</snippet></ROW><ROW><id>7234341</id><snippet>maxAttempts</snippet></ROW><ROW><id>7234341</id><snippet>def test_something(self):
    maxAttempts = 3
    func = self.run_something

    attempt = 1
    while True:
        if attempt == maxAttempts:
            func() # &lt;&lt;&lt;--------
            break

        else:
            try:
                func() # &lt;&lt;&lt;--------
                break
            except:
                attempt += 1

def run_something(self):
    #Do stuff
</snippet></ROW><ROW><id>7234704</id><snippet>#!/bin/env csh
python test.py
</snippet></ROW><ROW><id>7234704</id><snippet>#!/bin/env python
import fileinput

if __name__ == '__main__':
    print "Hi. printing stdin"
    for line in fileinput.input():
        print line

    print "fin"
</snippet></ROW><ROW><id>7234704</id><snippet>test.csh</snippet></ROW><ROW><id>7234704</id><snippet>test.py</snippet></ROW><ROW><id>7234704</id><snippet>echo "this is stdin" | csh test.csh
</snippet></ROW><ROW><id>7234903</id><snippet>print len(re.findall(r'\bmaki sushi\b', sent)) 
</snippet></ROW><ROW><id>7234908</id><snippet>if</snippet></ROW><ROW><id>7234908</id><snippet>form</snippet></ROW><ROW><id>7234908</id><snippet>form</snippet></ROW><ROW><id>7234908</id><snippet>return</snippet></ROW><ROW><id>7234908</id><snippet>POST</snippet></ROW><ROW><id>7235254</id><snippet>\0</snippet></ROW><ROW><id>7235304</id><snippet>unicode</snippet></ROW><ROW><id>7235304</id><snippet>&gt;&gt;&gt; print u'\u05ea\u05d0\u05de\u05d9\u05df \u05dc\u05d9'
תאמין לי
</snippet></ROW><ROW><id>7235304</id><snippet>str</snippet></ROW><ROW><id>7235304</id><snippet>your_unicode_text.encode('utf-8')
</snippet></ROW><ROW><id>7235420</id><snippet>d.__contains__(key)</snippet></ROW><ROW><id>7235420</id><snippet>key in d</snippet></ROW><ROW><id>7235420</id><snippet>in</snippet></ROW><ROW><id>7235420</id><snippet>__contains__</snippet></ROW><ROW><id>7235420</id><snippet>has_key</snippet></ROW><ROW><id>7235420</id><snippet>__contains__</snippet></ROW><ROW><id>7235872</id><snippet>axis</snippet></ROW><ROW><id>7235872</id><snippet>np.take</snippet></ROW><ROW><id>7235872</id><snippet>&gt;&gt;&gt; np.take(a, idx, axis=1)
array([[2, 1, 3, 8],
       [0, 3, 2, 1]])
</snippet></ROW><ROW><id>7235872</id><snippet>&gt;&gt;&gt; a[:,idx]
array([[2, 1, 3, 8],
       [0, 3, 2, 1]])
</snippet></ROW><ROW><id>7235915</id><snippet>students = open('list-of-students.txt').readlines()
</snippet></ROW><ROW><id>7235915</id><snippet>students</snippet></ROW><ROW><id>7235915</id><snippet>list</snippet></ROW><ROW><id>7235921</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; html = '''
... &lt;h2 class="sectionTitle"&gt;
... CORPORATE HEADQUARTERS  &lt;/h2&gt;
... 277 Park Avenue&lt;br /&gt;
... New York, New York 10172
... &lt;br /&gt;&lt;br /&gt;United States&lt;br /&gt;&lt;br /&gt;
... 
... &lt;h2 class="sectionTitle"&gt;
... BACKGROUND&lt;/h2&gt;
... He graduated Blabala
... &lt;/span&gt;
... '''
&gt;&gt;&gt; re.search('(?s)&lt;h2 class="sectionTitle"&gt;\s*CORPORATE HEADQUARTERS\s*&lt;/h2&gt;.*?&lt;br /&gt;([^&lt;&gt;]+) \d+', html).group(1).strip()
'New York, New York'
&gt;&gt;&gt; re.search('(?s)&lt;h2 class="sectionTitle"&gt;\s*BACKGROUND\s*&lt;/h2&gt;([^&lt;&gt;]+)', html).group(1).strip()
'He graduated Blabala'
</snippet></ROW><ROW><id>7236212</id><snippet>defaultdict</snippet></ROW><ROW><id>7236212</id><snippet>if</snippet></ROW><ROW><id>7236212</id><snippet>has_key</snippet></ROW><ROW><id>7236212</id><snippet>new in dic</snippet></ROW><ROW><id>7236212</id><snippet>#trys to create dictionary from african country list
from collections import defaultdict

dic = defaultdict(list)   # automatically creates lists to append to in the dict

for line in sys.stdin:
    mylist = line.split('|')    # call it mylist instead of list
    links = mylist[4].split()
    new = links[0] + ' ' + links[-1]   # can just use -1 to reference last item
    dic[new].append(mylist[4])         # append the item to the list in the dict
                                # automatically creates an empty list if needed
</snippet></ROW><ROW><id>7236212</id><snippet>defaultdict</snippet></ROW><ROW><id>7236500</id><snippet>forloop.counter0</snippet></ROW><ROW><id>7236500</id><snippet>zip()</snippet></ROW><ROW><id>7236500</id><snippet>mydata = zip(rowname_list, coldata_list)
</snippet></ROW><ROW><id>7236500</id><snippet>{% for rowname,coldata in mydata %}
&lt;tr&gt;
    &lt;td width='11%' align='right'&gt;&lt;strong&gt;{{ rowname }}&lt;/strong&gt;&lt;/td&gt;   
    &lt;td width='89%' align='left'&gt;{{ coldata }}&lt;/td&gt;      
&lt;/tr&gt;  
{% endfor %}
</snippet></ROW><ROW><id>7236998</id><snippet>&gt;&gt;&gt; import lxml
&gt;&gt;&gt; some_data = "&lt;b&gt;hello BREAK world&lt;/b&gt;"
&gt;&gt;&gt; root = lxml.etree.fromstring(some_data)
&gt;&gt;&gt; root
&lt;Element b at 0x3f35a50&gt;
&gt;&gt;&gt; root.text
'hello BREAK world'
</snippet></ROW><ROW><id>7236998</id><snippet>&gt;&gt;&gt; childbr = lxml.etree.SubElement(root, "br")
&gt;&gt;&gt; childbr
&lt;Element br at 0x3f35b40&gt;
&gt;&gt;&gt; lxml.etree.tostring(root)
'&lt;b&gt;hello BREAK world&lt;br/&gt;&lt;/b&gt;'
</snippet></ROW><ROW><id>7236998</id><snippet>.text</snippet></ROW><ROW><id>7236998</id><snippet>&gt;&gt;&gt; root.text = "hello"
&gt;&gt;&gt; lxml.etree.tostring(root)
'&lt;b&gt;hello&lt;br/&gt;&lt;/b&gt;'
</snippet></ROW><ROW><id>7236998</id><snippet>.tail</snippet></ROW><ROW><id>7236998</id><snippet>&gt;&gt;&gt; childbr.tail = "world"
&gt;&gt;&gt; lxml.etree.tostring(root)
'&lt;b&gt;hello&lt;br/&gt;world&lt;/b&gt;'
</snippet></ROW><ROW><id>7237149</id><snippet>.py</snippet></ROW><ROW><id>7237149</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>7237149</id><snippet>.py</snippet></ROW><ROW><id>7237218</id><snippet>log</snippet></ROW><ROW><id>7237218</id><snippet>differentlogging</snippet></ROW><ROW><id>7237218</id><snippet>clusterlogging.differentlogging.log</snippet></ROW><ROW><id>7237218</id><snippet>from clusterlogging.differentlogging import log</snippet></ROW><ROW><id>7237218</id><snippet>log</snippet></ROW><ROW><id>7237218</id><snippet>log</snippet></ROW><ROW><id>7237218</id><snippet>consolelogging</snippet></ROW><ROW><id>7237218</id><snippet>global log</snippet></ROW><ROW><id>7237218</id><snippet>log</snippet></ROW><ROW><id>7237312</id><snippet>bytes</snippet></ROW><ROW><id>7237312</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.create_string_buffer(b'hello')
&lt;ctypes.c_char_Array_6 object at 0x25258c0&gt;
</snippet></ROW><ROW><id>7237312</id><snippet>create_string_buffer</snippet></ROW><ROW><id>7237312</id><snippet>def create_string_buffer(init, size=None):
    """create_string_buffer(aBytes) -&gt; character array
    create_string_buffer(anInteger) -&gt; character array
    create_string_buffer(aString, anInteger) -&gt; character array
    """
    if isinstance(init, (str, bytes)):
        if size is None:
            size = len(init)+1
        buftype = c_char * size
        buf = buftype()
        buf.value = init
        return buf
    elif isinstance(init, int):
        buftype = c_char * init
        buf = buftype()
        return buf
    raise TypeError(init)
</snippet></ROW><ROW><id>7237312</id><snippet>&gt;&gt;&gt; (ctypes.c_char * 10)().value = b'123456789'
</snippet></ROW><ROW><id>7237312</id><snippet>&gt;&gt;&gt; (ctypes.c_char * 10)().value = '123456789'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: str/bytes expected instead of str instance
</snippet></ROW><ROW><id>7237312</id><snippet>c_char</snippet></ROW><ROW><id>7237312</id><snippet>create_string_buffer</snippet></ROW><ROW><id>7237312</id><snippet>str</snippet></ROW><ROW><id>7237437</id><snippet>/usr/bin/env python2.7
</snippet></ROW><ROW><id>7237437</id><snippet>/usr/bin/env python3.2
</snippet></ROW><ROW><id>7237492</id><snippet>:lcd %:p:h | !python %</snippet></ROW><ROW><id>7237492</id><snippet>~/path/to/my/</snippet></ROW><ROW><id>7237492</id><snippet>:lcd</snippet></ROW><ROW><id>7237625</id><snippet>import os, tarfile

with tarfile.TarFile('myfile.tar', 'r', errorlevel=1) as tar:
    for file_ in tar:
        try:
            tar.extract(file_)
        except IOError as e:
            os.remove(file_.name)
            tar.extract(file_)
        finally:
            os.chmod(file_.name, file_.mode)
</snippet></ROW><ROW><id>7237625</id><snippet>tarfile.extractall</snippet></ROW><ROW><id>7237956</id><snippet>request.scheme</snippet></ROW><ROW><id>7238064</id><snippet>send()</snippet></ROW><ROW><id>7238064</id><snippet>transport.write()</snippet></ROW><ROW><id>7238064</id><snippet>send()</snippet></ROW><ROW><id>7238064</id><snippet>send()</snippet></ROW><ROW><id>7238071</id><snippet>(db.table.field1==x)&amp;(db.table.field2==y)
</snippet></ROW><ROW><id>7238251</id><snippet>firefox -profile &lt;path to profile directory&gt;
</snippet></ROW><ROW><id>7238334</id><snippet>time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0 
</snippet></ROW><ROW><id>7238334</id><snippet>strftime</snippet></ROW><ROW><id>7238334</id><snippet>float</snippet></ROW><ROW><id>7238334</id><snippet>time.time()</snippet></ROW><ROW><id>7238334</id><snippet>dt = datetime.datetime.now()</snippet></ROW><ROW><id>7238387</id><snippet>'\''</snippet></ROW><ROW><id>7238387</id><snippet>\'</snippet></ROW><ROW><id>7238387</id><snippet>r'\''</snippet></ROW><ROW><id>7238387</id><snippet>str</snippet></ROW><ROW><id>7238387</id><snippet>htmlSource</snippet></ROW><ROW><id>7238387</id><snippet>urllib</snippet></ROW><ROW><id>7238387</id><snippet>Help on function match in module re:

match(pattern, string, flags=0)
    Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found.
</snippet></ROW><ROW><id>7238387</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>7238387</id><snippet>m=re.search(r"&lt;a href.*?pdf[^&gt;]*?", htmlSource)</snippet></ROW><ROW><id>7238606</id><snippet>current = ['it1', 'test', 'blah', 10]
results = []
while current:
    remaining = []
    for item in current:
        (results if meets_conditional(item) else remaining).append(item)
    current = remaining
</snippet></ROW><ROW><id>7238949</id><snippet>from pylab import *
a = np.zeros((100,10)) # height=100, weight=10
subplot(211)
imshow(a)  # ratio = 10
subplot(212)
imshow(a, aspect=0.1) # ratio = 1
show()
</snippet></ROW><ROW><id>7238949</id><snippet>imshow(a)
xlim(-50,50)
</snippet></ROW><ROW><id>7238949</id><snippet>self.ui.mplWidget.canvas.ax.set_aspect("auto")
self.ui.mplWidget.canvas.ax.plot(self.xData,self.yData)
</snippet></ROW><ROW><id>7239149</id><snippet>class ModelHandler(webapp.RequestHandler):
  def get(self, kind, key):
    model = db.class_for_kind(kind)
    instance = model.get(key)
    # Do something with the instance - eg, print it out

  def post(self, kind, key):
    model = db.class_for_kind(kind)
    instance = model.create_from_request(self.request)

application = webapp.WSGIApplication([
    ('/foo/([^/]+)/([^/]+)', ModelHandler),
])

def main():
  run_wsgi_app(application)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>7239149</id><snippet>main()</snippet></ROW><ROW><id>7239389</id><snippet>y = mx + c</snippet></ROW><ROW><id>7239389</id><snippet>m</snippet></ROW><ROW><id>7239389</id><snippet>c</snippet></ROW><ROW><id>7239389</id><snippet>(x1, y1)</snippet></ROW><ROW><id>7239389</id><snippet>(x2, y2)</snippet></ROW><ROW><id>7239389</id><snippet>m</snippet></ROW><ROW><id>7239389</id><snippet>c</snippet></ROW><ROW><id>7239389</id><snippet>m = (y2-y1)/(x2-x1)
c = y2 - m * x2
</snippet></ROW><ROW><id>7239389</id><snippet>y</snippet></ROW><ROW><id>7239389</id><snippet>x = 0.95</snippet></ROW><ROW><id>7239389</id><snippet>y = m * 0.95 + c
</snippet></ROW><ROW><id>7239797</id><snippet>import theCPPlibrary
</snippet></ROW><ROW><id>7239797</id><snippet>print theCPPlibrary.CONST1
</snippet></ROW><ROW><id>7239797</id><snippet>print theCPPlibrary.cvar.CONST2
</snippet></ROW><ROW><id>7239900</id><snippet>map(tuple, map(lambda row:
    [float(row[0]), int(row[1]), parse(row[2])], res))
</snippet></ROW><ROW><id>7239900</id><snippet>map(lambda row: (float(row[0]), int(row[1]), parse(row[2])), res)
</snippet></ROW><ROW><id>7239900</id><snippet>[(float(row[0]), int(row[1]), parse(row[2])) for row in res]
</snippet></ROW><ROW><id>7239922</id><snippet>dict</snippet></ROW><ROW><id>7239922</id><snippet>dict()</snippet></ROW><ROW><id>7239922</id><snippet>hash()</snippet></ROW><ROW><id>7239922</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>7239922</id><snippet>import collections

channels = {
'24': {'type': 'plain', 'table_name': 'channel.items.AuctionChannel'}, 
'26': {'type': 'plain', 'table_name': 'channel.gm.DeleteAvatarChannel'}, 
'27': {'type': 'plain', 'table_name': 'channel.gm.AvatarMoneyChannel'}, 
'20': {'type': 'plain', 'table_name': 'channel.gm.AvatarMoneyAssertChannel'}, 
'21': {'type': 'plain', 'table_name': 'channel.gm.AvatarKillMobComplexChannel'}, 
'22': {'type': 'plain', 'table_name': 'channel.gm.DistributionMarkChannel'}, 
'23': {'type': 'plain', 'table_name': 'channel.gm.MailChannel'}
}

channels = collection.OrderedDict(sorted(channels.items(), key=lambda item: item[0]))
for key,value in channels.items():
    print(key, ':', value)
</snippet></ROW><ROW><id>7240076</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile('(#[\da-fA-F]{3})')
&gt;&gt;&gt; l = pattern.findall(output)
['#F00', '#0F0', '#00F']
&gt;&gt;&gt; dict(zip(('red', 'green', 'blue'), l))
{'blue': '#00F', 'green': '#0F0', 'red': '#F00'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7240327</id><snippet>pytz</snippet></ROW><ROW><id>7240327</id><snippet>.egg</snippet></ROW><ROW><id>7240327</id><snippet>.egg</snippet></ROW><ROW><id>7241131</id><snippet>__del__</snippet></ROW><ROW><id>7241131</id><snippet>dispose</snippet></ROW><ROW><id>7241131</id><snippet>__del__</snippet></ROW><ROW><id>7241230</id><snippet>threading.local()</snippet></ROW><ROW><id>7241238</id><snippet>import time

date_time = '29.08.2011 11:05:02'
pattern = '%d.%m.%Y %H:%M:%S'
epoch = int(time.mktime(time.strptime(date_time, pattern)))
print epoch
</snippet></ROW><ROW><id>7241741</id><snippet>__class__.__dict__.iteritems()</snippet></ROW><ROW><id>7242283</id><snippet>info = { "title" : "Developers", 
         "image" : "http://i4.ytimg.com/vi/KMU0tzLwhbE/default.jpg", 
         "length" : "3", "status" : "serving", "progress_speed" : "", 
         "progress" : "", "ads" : "", 
         "h" : "a0aa17294103c638fa7f5e0606f839d3" };
</snippet></ROW><ROW><id>7242283</id><snippet>from re import findall
from time import sleep
from urllib import urlopen, quote

yt_code = 'gijypDkEqUA'

yt_url = 'http://www.youtube.com/watch?v=%s' % yt_code
push_url_fmt = 'http://www.youtube-mp3.org/api/pushItem/?item=%s&amp;xy=trve'
info_url_fmt = 'http://www.youtube-mp3.org/api/itemInfo/?video_id=%s'
download_url_fmt = 'http://www.youtube-mp3.org/get?video_id=%s&amp;h=%s'
push_url = push_url_fmt % quote(yt_url)
data = urlopen(push_url).read()
sleep(10)
info_url = info_url_fmt % yt_code
data = urlopen(info_url).read()
res = findall('"h" : "([^"]*)"', data)
download_url = download_url_fmt % (yt_code, res[0])
print 'Download here:', download_url
</snippet></ROW><ROW><id>7242398</id><snippet>d = """Received: from localhost6.localdomain6 (unknown [59.92.85.188]) by smtp.webfaction.com (Postfix) with ESMTP id 05B332078BD1 for &lt;rshivaganesh@gmail.com&gt;; Fri, 26 Aug 2011 04:59:36 -0500 (CDT) Content-Type: text/html; charset="utf-8" MIME-Version: 1.0 Content-Transfer-Encoding: 7bit Subject: Test subject100 From: shivaganesh@gmail.com To: rshivaganesh@gmail.com Date: Fri, 26 Aug 2011 10:01:39 -0000 Message-ID: &lt;20110826100139.4763.43322@localhost6.localdomain6&gt; X-Mailer-status: false X-Mailer-recipient: rshivaganesh@gmail.com"""

if 'X-Mailer-recipient:' in d:
    d.split('X-Mailer-recipient:')[1].split()[0]
&gt;&gt;&gt; rshivaganesh@gmail.com
</snippet></ROW><ROW><id>7242566</id><snippet>parsed = datetime.datetime.strptime(date_string, DB_TIME_FORMAT)
</snippet></ROW><ROW><id>7242566</id><snippet>from datetime import datetime
try: parsed = datetime.strptime(date_string, DB_TIME_FORMAT)
except ValueError:
    parsed = datetime.strptime(date_string, DB_TIME_FORMAT_WITHOUT_MILLISECONDS)
</snippet></ROW><ROW><id>7242672</id><snippet>print ''.join(map(str, li.contents))
</snippet></ROW><ROW><id>7242838</id><snippet>key</snippet></ROW><ROW><id>7242838</id><snippet>sort</snippet></ROW><ROW><id>7242838</id><snippet>len</snippet></ROW><ROW><id>7242838</id><snippet>l=&lt;list_of_sets&gt;
l.sort(key=len)
</snippet></ROW><ROW><id>7242838</id><snippet>reverse</snippet></ROW><ROW><id>7242838</id><snippet>l.sort(key=len, reverse=True)
</snippet></ROW><ROW><id>7242838</id><snippet>&gt;&gt;&gt; l=[set((1,2,5,6,7)), set((1,2,3,4,5,6,7)), set((1,)), set((1,2,3))]
&gt;&gt;&gt; l
[set([1, 2, 5, 6, 7]), set([1, 2, 3, 4, 5, 6, 7]), set([1]), set([1, 2, 3])]
&gt;&gt;&gt; l.sort(key=len)
&gt;&gt;&gt; l
[set([1]), set([1, 2, 3]), set([1, 2, 5, 6, 7]), set([1, 2, 3, 4, 5, 6, 7])]
&gt;&gt;&gt; l.sort(key=len, reverse=True)
&gt;&gt;&gt; l
[set([1, 2, 3, 4, 5, 6, 7]), set([1, 2, 5, 6, 7]), set([1, 2, 3]), set([1])]
</snippet></ROW><ROW><id>7242838</id><snippet>len</snippet></ROW><ROW><id>7242838</id><snippet>l.sort(lambda x:len(x))</snippet></ROW><ROW><id>7242838</id><snippet>l.sort(key=len)</snippet></ROW><ROW><id>7242879</id><snippet>class MyClass(object):
    names_list = []
    _name = None

    def get_name(self):
        return self._name
    def set_name(self, name):
        assert self._name is None
        self._name = name
        self.names_list.append(name)
    name = property(get_name, set_name)

obj1 = MyClass()
obj1.name = 'name1'

obj2 = MyClass()
obj2.name = 'name2'

print obj1.names_list
print len(obj1.names_list)
</snippet></ROW><ROW><id>7242996</id><snippet>writer = csv.writer(open('friends.csv', 'ab'))  
.....      
def add_friend(name, address, ph_number, birthday):
    """write a row to the friends.csv file
    """
    writer.writerow([name, address, ph_number, birthday])
</snippet></ROW><ROW><id>7243047</id><snippet>consumer = oauth.Consumer('key', 'secret')
client = oauth.Client(consumer)

# Get access token
resp, content = client.request('https://www.instapaper.com/api/1/oauth/access_token', "POST", urllib.urlencode({
    'x_auth_mode': 'client_auth',
    'x_auth_username': 'uname',
    'x_auth_password': 'pass'
}))

token = dict(urlparse.parse_qsl(content))
token = oauth.Token(token['oauth_token'], token['oauth_token_secret'])
http = oauth.Client(consumer, token)

# Get starred items
response, data = http.request('https://www.instapaper.com/api/1/bookmarks/list', method='POST', body=urllib.urlencode({
    'folder_id': 'starred',
    'limit': '100'
})) 
res = simplejson.loads(data)
</snippet></ROW><ROW><id>7243438</id><snippet>__del__</snippet></ROW><ROW><id>7243438</id><snippet>del myObject</snippet></ROW><ROW><id>7243438</id><snippet>myObject = MyObjectClassWith__del__()
del myObject
</snippet></ROW><ROW><id>7243438</id><snippet>__del__</snippet></ROW><ROW><id>7243438</id><snippet>__init__</snippet></ROW><ROW><id>7243438</id><snippet>__new__</snippet></ROW><ROW><id>7243466</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; r = csv.reader([u"\xA0"])
&gt;&gt;&gt; r.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 0: ordinal not in range(128)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7243466</id><snippet>str.splitlines()</snippet></ROW><ROW><id>7243466</id><snippet>[c]ElementTree</snippet></ROW><ROW><id>7243466</id><snippet>lxml</snippet></ROW><ROW><id>7243466</id><snippet>cp1252</snippet></ROW><ROW><id>7243466</id><snippet>unicode</snippet></ROW><ROW><id>7243559</id><snippet>inner_function</snippet></ROW><ROW><id>7243559</id><snippet>inner_function</snippet></ROW><ROW><id>7243559</id><snippet>def func1():
    global inner_func
    inner_func = func2
    print 1

def func2():
    print 2

inner_func = func1

for i in range(5):
    inner_func()
</snippet></ROW><ROW><id>7243559</id><snippet>1
2
2
2
2
</snippet></ROW><ROW><id>7243741</id><snippet>db.Model</snippet></ROW><ROW><id>7243741</id><snippet>parent</snippet></ROW><ROW><id>7243741</id><snippet>db.Model</snippet></ROW><ROW><id>7243741</id><snippet>parent()</snippet></ROW><ROW><id>7243741</id><snippet>name</snippet></ROW><ROW><id>7243741</id><snippet>Employee</snippet></ROW><ROW><id>7243741</id><snippet>key_name</snippet></ROW><ROW><id>7244263</id><snippet>read</snippet></ROW><ROW><id>7244263</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
...
url = 'http://example.com/'
response = urllib.request.urlopen(url)
data = response.read()      # a `bytes` object
text = data.decode('utf-8') # a `str`; this step can't be used if data is binary
</snippet></ROW><ROW><id>7244263</id><snippet>urllib.request.urlretrieve</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
...
# Download the file from `url` and save it locally under `file_name`:
urllib.request.urlretrieve(url, file_name)
</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
...
# Download the file from `url`, save it in a temporary directory and get the
# path to it (e.g. '/tmp/tmpb48zma.txt') in the `file_name` variable:
file_name, headers = urllib.request.urlretrieve(url)
</snippet></ROW><ROW><id>7244263</id><snippet>urlretrieve</snippet></ROW><ROW><id>7244263</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>7244263</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
import shutil
...
# Download the file from `url` and save it locally under `file_name`:
with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:
    shutil.copyfileobj(response, out_file)
</snippet></ROW><ROW><id>7244263</id><snippet>bytes</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
...
# Download the file from `url` and save it locally under `file_name`:
with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:
    data = response.read() # a `bytes` object
    out_file.write(data)
</snippet></ROW><ROW><id>7244263</id><snippet>.gz</snippet></ROW><ROW><id>7244263</id><snippet>import urllib.request
import gzip
...
# Read the first 64 bytes of the file inside the .gz archive located at `url`
url = 'http://example.com/something.gz'
with urllib.request.urlopen(url) as response:
    with gzip.GzipFile(fileobj=response) as uncompressed:
        file_header = uncompressed.read(64) # a `bytes` object
        # Or do anything shown above using `uncompressed` instead of `response`.
</snippet></ROW><ROW><id>7244276</id><snippet>logs = 0
if request.POST.get and 'logs' in request.POST and request.POST['logs'] == "on":
    logs = 1
</snippet></ROW><ROW><id>7244473</id><snippet>from PyQt4 import QtGui

app = QtGui.QApplication([])

menu = QtGui.QMenu()

sub_menu = QtGui.QMenu("Sub Menu")

for i in ["a", "b", "c"]: #or your dict
    sub_menu.addAction(i) #it is just a regular QMenu

menu.addMenu(sub_menu)

menu.show()

app.exec_()
</snippet></ROW><ROW><id>7244481</id><snippet>Mock.call_args_list</snippet></ROW><ROW><id>7244481</id><snippet>Mock.call_count</snippet></ROW><ROW><id>7245222</id><snippet>hmac</snippet></ROW><ROW><id>7245222</id><snippet>Digest::HMAC</snippet></ROW><ROW><id>7245222</id><snippet>python -c 'import sha; import hmac; print hmac.new("string2", "string1", sha).hexdigest()'
25afd2da17e81972b535d15ebae464e291fb3635
</snippet></ROW><ROW><id>7245261</id><snippet>setup.py</snippet></ROW><ROW><id>7245697</id><snippet>filePath = QDir.home() + "/.application_name"
if not QDir.exists(filepath)
    QDir.mkdir(filepath)
</snippet></ROW><ROW><id>7245768</id><snippet>row[:-1]</snippet></ROW><ROW><id>7245768</id><snippet>import csv

with open(filename,"r") as fin:
    with open(outname,"w") as fout:
        writer=csv.writer(fout)
        for row in csv.reader(fin):
            writer.writerow(row[:-1])
</snippet></ROW><ROW><id>7245952</id><snippet>json</snippet></ROW><ROW><id>7245952</id><snippet>import json

l1 = ['aa','bb','cc']
s = json.dumps(l1)
l2 = json.loads(s)

print s
print l1 == l2
</snippet></ROW><ROW><id>7246075</id><snippet>import struct

val1 = 0x2
val2 = 0x0001020304050607
val3 = "blablabla"

data=struct.pack('&gt;BQ9s',val1,val2,val3)
print repr(data)
</snippet></ROW><ROW><id>7246075</id><snippet>'\x02\x00\x01\x02\x03\x04\x05\x06\x07blablabla'
</snippet></ROW><ROW><id>7246075</id><snippet>BQ9s</snippet></ROW><ROW><id>7246075</id><snippet>struct.pack</snippet></ROW><ROW><id>7246075</id><snippet>data</snippet></ROW><ROW><id>7246075</id><snippet>list(data)</snippet></ROW><ROW><id>7246423</id><snippet>ManyToManyModel.all().filter("model1 =", model1_key).filter("model2 =", model2_key).fetch()</snippet></ROW><ROW><id>7246423</id><snippet>model1</snippet></ROW><ROW><id>7246423</id><snippet>model2</snippet></ROW><ROW><id>7246423</id><snippet>model1_key</snippet></ROW><ROW><id>7246423</id><snippet>model2_key</snippet></ROW><ROW><id>7247107</id><snippet>for</snippet></ROW><ROW><id>7247107</id><snippet>ValuesFile</snippet></ROW><ROW><id>7247107</id><snippet>ValuesFile</snippet></ROW><ROW><id>7247107</id><snippet>for</snippet></ROW><ROW><id>7247107</id><snippet>ValuesFile</snippet></ROW><ROW><id>7247412</id><snippet>Traceback(most recent call last):</snippet></ROW><ROW><id>7247412</id><snippet>Traceback (most recent call last):</snippet></ROW><ROW><id>7247412</id><snippet>ELLIPSIS</snippet></ROW><ROW><id>7247412</id><snippet>IGNORE_EXCEPTION_DETAIL</snippet></ROW><ROW><id>7247412</id><snippet>&gt;&gt;&gt; def faulty(): # doctest: +IGNORE_EXCEPTION_DETAIL  
...     yield 5  
...     return 7  
Traceback (most recent call last):  
SyntaxError: 'return' with argument inside generator (...)
</snippet></ROW><ROW><id>7247412</id><snippet>ELLIPSIS</snippet></ROW><ROW><id>7247542</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof([])
36
&gt;&gt;&gt; sys.getsizeof([1])
40
&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst.append(1)
&gt;&gt;&gt; sys.getsizeof(lst)
52
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7247542</id><snippet>[1]</snippet></ROW><ROW><id>7247542</id><snippet>Objects/listobject.c</snippet></ROW><ROW><id>7247542</id><snippet>[]</snippet></ROW><ROW><id>7247542</id><snippet>PyList_New</snippet></ROW><ROW><id>7247542</id><snippet>[1]</snippet></ROW><ROW><id>7247542</id><snippet>PyList_New</snippet></ROW><ROW><id>7247542</id><snippet>size</snippet></ROW><ROW><id>7247542</id><snippet>nbytes = size * sizeof(PyObject *);
</snippet></ROW><ROW><id>7247542</id><snippet>if (size &lt;= 0)
    op-&gt;ob_item = NULL;
else {
    op-&gt;ob_item = (PyObject **) PyMem_MALLOC(nbytes);
    if (op-&gt;ob_item == NULL) {
        Py_DECREF(op);
        return PyErr_NoMemory();
    }
    memset(op-&gt;ob_item, 0, nbytes);
}
Py_SIZE(op) = size;
op-&gt;allocated = size;
</snippet></ROW><ROW><id>7247542</id><snippet>size = 1</snippet></ROW><ROW><id>7247542</id><snippet>append</snippet></ROW><ROW><id>7247542</id><snippet>PyList_Append</snippet></ROW><ROW><id>7247542</id><snippet>app1</snippet></ROW><ROW><id>7247542</id><snippet>app1</snippet></ROW><ROW><id>7247542</id><snippet>app1</snippet></ROW><ROW><id>7247542</id><snippet>list_resize</snippet></ROW><ROW><id>7247542</id><snippet>size+1</snippet></ROW><ROW><id>7247542</id><snippet>list_resize</snippet></ROW><ROW><id>7247542</id><snippet>/* This over-allocates proportional to the list size, making room
* for additional growth.  The over-allocation is mild, but is
* enough to give linear-time amortized behavior over a long
* sequence of appends() in the presence of a poorly-performing
* system realloc().
* The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...
*/
new_allocated = (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);

/* check for integer overflow */
if (new_allocated &gt; PY_SIZE_MAX - newsize) {
    PyErr_NoMemory();
    return -1;
} else {
    new_allocated += newsize;
}
</snippet></ROW><ROW><id>7247542</id><snippet>app1</snippet></ROW><ROW><id>7247542</id><snippet>list_resize</snippet></ROW><ROW><id>7247542</id><snippet>size=1</snippet></ROW><ROW><id>7247542</id><snippet>list_resize</snippet></ROW><ROW><id>7247770</id><snippet>safe_eval</snippet></ROW><ROW><id>7248358</id><snippet>{% compress %}...{% endcompress %}</snippet></ROW><ROW><id>7248358</id><snippet>{% compress %}...{% endcompress %}</snippet></ROW><ROW><id>7248358</id><snippet>{% compress %}...{% endcompress %}</snippet></ROW><ROW><id>7248745</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile('(?:red,(?P&lt;redfirst&gt;\w+)|(?P&lt;othercolorfirst&gt;\w+),red)')

&gt;&gt;&gt; string = "blue,red   red,yellow   blue,yellow   red,green   purple red, ..."

&gt;&gt;&gt; for matches in regex.finditer(string):
...     if matches.group('redfirst'):
...         print matches.group('redfirst')
...
yellow
green
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7249090</id><snippet>from PythonMagick import Image
Image('pinei_2002300_1525_modis_ch02.tif').write("foo.png")
</snippet></ROW><ROW><id>7249228</id><snippet>reverse_lazy</snippet></ROW><ROW><id>7249729</id><snippet>counter = cls(key_name=name)
</snippet></ROW><ROW><id>7249820</id><snippet>sudo</snippet></ROW><ROW><id>7249820</id><snippet>setup.py</snippet></ROW><ROW><id>7249820</id><snippet>% sudo python setup.py install
</snippet></ROW><ROW><id>7249921</id><snippet>from operator import itemgetter
mygetter = itemgetter(i1, i2, ..., iN)
for tup in lots_of_tuples:
    result = mygetter(tup)
</snippet></ROW><ROW><id>7249921</id><snippet>In [1]: import random

In [2]: from operator import itemgetter

In [3]: t=tuple(range(1000))

In [4]: idxs = tuple(random.randrange(1000) for i in range(20))

In [5]: timeit [t[i] for i in idxs]
100000 loops, best of 3: 2.09 us per loop

In [6]: mygetter = itemgetter(*idxs)

In [7]: timeit mygetter(t)
1000000 loops, best of 3: 596 ns per loop
</snippet></ROW><ROW><id>7250350</id><snippet>pid</snippet></ROW><ROW><id>7250350</id><snippet>sp = subprocess.Popen(['python', 'script.py'])
print('PID is ' + str(sp.pid))
</snippet></ROW><ROW><id>7250350</id><snippet>p = multiprocessing.Process()
p.start()
# Some time later ...
print('PID is ' + str(p.pid))
</snippet></ROW><ROW><id>7250613</id><snippet>.wait()</snippet></ROW><ROW><id>7250613</id><snippet>.get_result()</snippet></ROW><ROW><id>7250613</id><snippet>dev_appserver</snippet></ROW><ROW><id>7250668</id><snippet>x=["123","456.678","abc.def.ghi"]
[y.rsplit(".",1)[0] for y in x]
</snippet></ROW><ROW><id>7250907</id><snippet>tarfile.py</snippet></ROW><ROW><id>7251397</id><snippet>file $(python -c 'import sys;print(sys.executable)')  # see archs that Python was built with
python -c 'import sys;print(sys.maxsize &gt; 2**32)' ; # see if running as 64-bit (false if 32-bit)
cd /Library/Frameworks/EPD64.framework/Versions/7.0/lib/python2.7/site-packages/mymodule
file mymodule.so       # see what architectures the C extension module is built with
otool -L mymodule.so   # see what libraries are referenced by the C extension module
file /path/to/lib1     # see what archs the referenced lib module(s) are built with
</snippet></ROW><ROW><id>7251397</id><snippet>/usr/local/lib/libgcc_s.1.dylib</snippet></ROW><ROW><id>7251397</id><snippet>gcc</snippet></ROW><ROW><id>7251397</id><snippet>/usr/local</snippet></ROW><ROW><id>7251397</id><snippet>export CC=/usr/bin/gcc-4.0</snippet></ROW><ROW><id>7251397</id><snippet>/usr/local</snippet></ROW><ROW><id>7251543</id><snippet>next_refresh</snippet></ROW><ROW><id>7251543</id><snippet>DateTimeProperty</snippet></ROW><ROW><id>7251543</id><snippet>EventSchedule</snippet></ROW><ROW><id>7251543</id><snippet>refresh_date + refresh_interval</snippet></ROW><ROW><id>7251543</id><snippet>next_refresh &gt;= now</snippet></ROW><ROW><id>7251556</id><snippet>while</snippet></ROW><ROW><id>7251598</id><snippet>numpy.maximum.accumulate</snippet></ROW><ROW><id>7251598</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.maximum.accumulate(numpy.array([11,12,13,20,19,18,17,18,23,21]))
array([11, 12, 13, 20, 20, 20, 20, 20, 23, 23])
</snippet></ROW><ROW><id>7251704</id><snippet>ModelForm</snippet></ROW><ROW><id>7251704</id><snippet>form = MyForm(data=request.POST)
if form.is_valid():   # checks of the form and its fields validate
    form.save()
# else you can do something else, show the validation errors for example
</snippet></ROW><ROW><id>7251783</id><snippet>def strange(gen):
    for thing in gen:
        yield thing
</snippet></ROW><ROW><id>7251783</id><snippet>gen</snippet></ROW><ROW><id>7251783</id><snippet>StopIteration</snippet></ROW><ROW><id>7251783</id><snippet>strange</snippet></ROW><ROW><id>7251783</id><snippet>None</snippet></ROW><ROW><id>7251783</id><snippet>StopIteration</snippet></ROW><ROW><id>7251783</id><snippet>gen</snippet></ROW><ROW><id>7251783</id><snippet>strange(gen)</snippet></ROW><ROW><id>7251783</id><snippet>g = some_generator()
for x in strange(g):
    do_something()
</snippet></ROW><ROW><id>7251783</id><snippet>g</snippet></ROW><ROW><id>7251783</id><snippet>for x in strange(some_generator()):
    do_something()
</snippet></ROW><ROW><id>7251783</id><snippet>del</snippet></ROW><ROW><id>7251785</id><snippet>pip install pycrypto
</snippet></ROW><ROW><id>7252165</id><snippet>    def __init__(self):
        self.cmds = {'foo':self.foo, 'bar':self.bar}
</snippet></ROW><ROW><id>7252165</id><snippet>            if cmd in self.cmds:
                command = self.cmds[cmd]
                command()
            else:
                pass
</snippet></ROW><ROW><id>7252165</id><snippet>update</snippet></ROW><ROW><id>7252165</id><snippet>Stick.cmds.update({'junk':Stick.junk})
</snippet></ROW><ROW><id>7252464</id><snippet>static double doubleValue = 1314761451;  
PyObject *floatObj = NULL;  
PyObject *timeTuple = NULL;  
PyObject *dateTime = NULL;  
floatObj = PyFloat_FromDouble(doubleValue);  
timeTuple = Py_BuildValue("(O)", floatObj);  
dateTime = PyDateTime_FromTimestamp(timeTuple);
</snippet></ROW><ROW><id>7252659</id><snippet>from util import *
</snippet></ROW><ROW><id>7252659</id><snippet>add</snippet></ROW><ROW><id>7252721</id><snippet>turtle</snippet></ROW><ROW><id>7252721</id><snippet>import math

class UndrawnTurtle():
    def __init__(self):
        self.x, self.y, self.angle = 0.0, 0.0, 0.0
        self.pointsVisited = []
        self._visit()

    def position(self):
        return self.x, self.y

    def xcor(self):
        return self.x

    def ycor(self):
        return self.y

    def forward(self, distance):
        angle_radians = math.radians(self.angle)

        self.x += math.cos(angle_radians) * distance
        self.y += math.sin(angle_radians) * distance

        self._visit()

    def backward(self, distance):
        self.forward(-distance)

    def right(self, angle):
        self.angle -= angle

    def left(self, angle):
        self.angle += angle

    def setpos(self, x, y = None):
        """Can be passed either a tuple or two numbers."""
        if y == None:
            self.x = x[0]
            self.y = y[1]
        else:
            self.x = x
            self.y = y
        self._visit()

    def _visit(self):
        """Add point to the list of points gone to by the turtle."""
        self.pointsVisited.append(self.position())

    # Now for some aliases. Everything that's implemented in this class
    # should be aliased the same way as the actual api.
    fd = forward
    bk = backward
    back = backward
    rt = right
    lt = left
    setposition = setpos
    goto = setpos
    pos = position

ut = UndrawnTurtle()
</snippet></ROW><ROW><id>7253044</id><snippet>processData.__doc__</snippet></ROW><ROW><id>7253044</id><snippet>weather.__doc__</snippet></ROW><ROW><id>7253253</id><snippet>urls.py</snippet></ROW><ROW><id>7253253</id><snippet>views.py</snippet></ROW><ROW><id>7253253</id><snippet>register</snippet></ROW><ROW><id>7253253</id><snippet>views.py</snippet></ROW><ROW><id>7253253</id><snippet>urls.py</snippet></ROW><ROW><id>7253253</id><snippet>include</snippet></ROW><ROW><id>7253253</id><snippet>urls.py</snippet></ROW><ROW><id>7253253</id><snippet>urls.py</snippet></ROW><ROW><id>7253253</id><snippet>urlpatterns = patterns('', 
    ...
    url(r'^accounts/', include('custom_registration.urls')),
    url(r'^accounts/', include('registration.backends.default.urls')),
    ... 
)
</snippet></ROW><ROW><id>7253253</id><snippet>/accounts/register</snippet></ROW><ROW><id>7253271</id><snippet>for file in *; do
    if [ -f ${file} ]; then
        mv ${file} ${file}.xml
    fi
done
</snippet></ROW><ROW><id>7253271</id><snippet>find</snippet></ROW><ROW><id>7253271</id><snippet>for file in $(find -type f); do
    mv ${file} ${file}.xml
done
</snippet></ROW><ROW><id>7253271</id><snippet>shell</snippet></ROW><ROW><id>7253271</id><snippet>find . -type f -exec mv {} {}.xml ';'
</snippet></ROW><ROW><id>7253303</id><snippet>additional_fonts</snippet></ROW><ROW><id>7253303</id><snippet>default_style</snippet></ROW><ROW><id>7253303</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

from geraldo import Report, ReportBand, ObjectValue
from geraldo.generators import PDFGenerator

class UnicodeReport(Report):    
    title = 'Report'
    additional_fonts = {
        'wqy': '/usr/share/fonts/wqy-zenhei/wqy-zenhei.ttc'
    }
    default_style = {'fontName': 'wqy'}

    class band_detail(ReportBand):
        elements = [ObjectValue(attribute_name='name')]

if __name__ == '__main__':
    objects = [{'name': u'한국어/조선말'}, {'name': u'汉语/漢語'}, {'name': u'オナカップ'}]    
    rpt = UnicodeReport(queryset=objects)
    rpt.generate_by(PDFGenerator, filename='/tmp/report.pdf')
</snippet></ROW><ROW><id>7253303</id><snippet>ObjectValue()</snippet></ROW><ROW><id>7253303</id><snippet>style</snippet></ROW><ROW><id>7253303</id><snippet>elements = [ObjectValue(attribute_name='name', style={'fontName': 'wqy'})]
</snippet></ROW><ROW><id>7253436</id><snippet>In [79]: x=np.random.randint(0,3,size=100)

In [80]: y=np.random.randint(0,100,size=100)

In [81]: d=np.vstack([x,y]).T

In [88]: print d[:5,:]
[[ 0 43]
 [ 1 60]
 [ 2 60]
 [ 1  4]
 [ 0 30]]
</snippet></ROW><ROW><id>7253436</id><snippet>numpy.unique</snippet></ROW><ROW><id>7253436</id><snippet>In [82]: idx=np.unique(d[:,0])

In [83]: print idx
[0 1 2]
</snippet></ROW><ROW><id>7253436</id><snippet>[113]: g=(d[np.where(d[:,0]==val),1].std() for val in idx)
</snippet></ROW><ROW><id>7253436</id><snippet>g</snippet></ROW><ROW><id>7253436</id><snippet>d</snippet></ROW><ROW><id>7253436</id><snippet>numpy.fromiterator</snippet></ROW><ROW><id>7253436</id><snippet>In [114]: print np.vstack([idx,np.fromiter(g,dtype=np.float)]).T
[[  0.          26.87376385]
 [  1.          29.41046084]
 [  2.          24.2477246 ]]
</snippet></ROW><ROW><id>7253451</id><snippet>fetchall() = (fetchone(), fetchtwo(), ...)
</snippet></ROW><ROW><id>7253451</id><snippet>c.execute("""SELECT spam, eggs, sausage FROM breakfast WHERE price &lt; %s""", (5,))
</snippet></ROW><ROW><id>7253451</id><snippet>cursor.execute("INSERT INTO wordurl (word_id, url_id) VALUES (%s, %s)", (((233L,),), ((3L,),)))
</snippet></ROW><ROW><id>7253503</id><snippet>def prob7(mylist): # flatten a list
    tempList = []
    if mylist: # meaning if there are elements in the list and it is not empty
        for i in mylist:
            if not isinstance(i, list):
                print tempList, 'if', i, isinstance(i, list)
                tempList.append(i)
            else:
                print tempList, 'else', i
                tempList.extend(prob7(i))    
    return tempList
</snippet></ROW><ROW><id>7253503</id><snippet>lVals = [[1,2,3],4,5, [1,[4,7]]]

def make_flat(mylist): # flatten a list    
    while any(isinstance(x, list) for x in mylist):
        for i, val in enumerate(mylist):
            if isinstance(val, list):                
                mylist.extend(mylist.pop(i))        
                break
    return mylist

make_flat(lVals)
&gt;&gt;&gt; [4, 5, 1, 2, 3, 1, 4, 7]
</snippet></ROW><ROW><id>7253830</id><snippet>url.rsplit('/',1)
</snippet></ROW><ROW><id>7254078</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>7254337</id><snippet>from foo import *</snippet></ROW><ROW><id>7254337</id><snippet>import re
import foo as module # XXX use the correct module name here!

module_name = module.__name__
import_line = 'from %s import (%%s)' % module_name
length = len(import_line) - 3
print import_line % (',\n' + length * ' ').join([a for a in dir(module) 
                                                               if not re.match('__.*[^_]{2}', a)])
</snippet></ROW><ROW><id>7254337</id><snippet>from foo import *</snippet></ROW><ROW><id>7254337</id><snippet>from bar import *</snippet></ROW><ROW><id>7254626</id><snippet>socket</snippet></ROW><ROW><id>7254626</id><snippet>pywhois</snippet></ROW><ROW><id>7254626</id><snippet>import socket</snippet></ROW><ROW><id>7254915</id><snippet>import cherrypy
cherrypy.config.update({'server.socket_port': 8099})
cherrypy.engine.restart()
</snippet></ROW><ROW><id>7255072</id><snippet>b = a</snippet></ROW><ROW><id>7255072</id><snippet>b</snippet></ROW><ROW><id>7255072</id><snippet>a</snippet></ROW><ROW><id>7255072</id><snippet>a</snippet></ROW><ROW><id>7255072</id><snippet>b</snippet></ROW><ROW><id>7255072</id><snippet>b = copy.copy(a)</snippet></ROW><ROW><id>7255072</id><snippet>copy</snippet></ROW><ROW><id>7255137</id><snippet>EventRegistration.objects.filter(event__in=Event.objects.all())
</snippet></ROW><ROW><id>7255343</id><snippet>?</snippet></ROW><ROW><id>7255343</id><snippet>%s</snippet></ROW><ROW><id>7255343</id><snippet>&lt;pre&gt;    execute(self, query, args=None)&lt;/pre&gt;</snippet></ROW><ROW><id>7255393</id><snippet>[[]]*2</snippet></ROW><ROW><id>7255564</id><snippet> import gtk

 label = gtk.Label("Nice label")
 dialog = gtk.Dialog("My dialog",
                    None,
                    gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                    (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                     gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
 dialog.vbox.pack_start(label)
 label.show()
 checkbox = gtk.CheckButton("Useless checkbox")
 dialog.action_area.pack_end(checkbox)
 checkbox.show()
 response = dialog.run()
 dialog.destroy()
</snippet></ROW><ROW><id>7255597</id><snippet>widget.findChild(QWidget, "buffer_table")</snippet></ROW><ROW><id>7255631</id><snippet>-o</snippet></ROW><ROW><id>7255631</id><snippet>--output</snippet></ROW><ROW><id>7255640</id><snippet>else</snippet></ROW><ROW><id>7255640</id><snippet>% 2</snippet></ROW><ROW><id>7255640</id><snippet>&amp; 1</snippet></ROW><ROW><id>7255640</id><snippet>TypeError: Can't convert 'int' object to str implicitly</snippet></ROW><ROW><id>7255640</id><snippet>replace</snippet></ROW><ROW><id>7255640</id><snippet>int</snippet></ROW><ROW><id>7255640</id><snippet>str</snippet></ROW><ROW><id>7255640</id><snippet>def make_page_denotation(rename_directory, extension, rename_files):
    for filename in glob(rename_files):
        original = int(filename[-9:-4]) # a)
        new_value = (original + 1) / 2 # b)
        replacement = ('%05d' % new_value) + ('B' if original % 2 else 'A') # c)
        new_filename = filename[:-9] + replacement + filename[-4:] # d)
        os.rename(filename, replacement)
</snippet></ROW><ROW><id>7255927</id><snippet>s = ''.join(re_filter.findall(s))
</snippet></ROW><ROW><id>7255983</id><snippet>Scanner.scan_to_next_token</snippet></ROW><ROW><id>7255983</id><snippet>Dump</snippet></ROW><ROW><id>7257147</id><snippet>find</snippet></ROW><ROW><id>7257147</id><snippet>.exe</snippet></ROW><ROW><id>7257147</id><snippet>for root, dir, files in os.walk(path):
   for name in files:
      subprocess.call(["path_to_your_programm/myprogram.exe", os.path.join(root, name)]
</snippet></ROW><ROW><id>7257711</id><snippet>[1, 2]</snippet></ROW><ROW><id>7257711</id><snippet>object</snippet></ROW><ROW><id>7257711</id><snippet>sys</snippet></ROW><ROW><id>7257866</id><snippet>apachectl configtest</snippet></ROW><ROW><id>7257866</id><snippet>from subprocess import Popen, PIPE

args = ['/usr/bin/apachectl','configtest']

result = Popen(args,stdout=PIPE,stderr=PIPE).communicate()
# result[0] will be the standard output, result[1] will be the stderr output
</snippet></ROW><ROW><id>7258112</id><snippet>.encode('ascii')</snippet></ROW><ROW><id>7258112</id><snippet>DLL.prepare</snippet></ROW><ROW><id>7258112</id><snippet>#another way of saying table=str(aNumber).encode('ascii')
table = bytes(str(aNumber), 'ascii')
DLL.prepare(table)
</snippet></ROW><ROW><id>7258630</id><snippet>def cmpT(t1, t2): 
  return sorted(t1) == sorted(t2)
</snippet></ROW><ROW><id>7258803</id><snippet>elapsed</snippet></ROW><ROW><id>7258803</id><snippet>elapsed</snippet></ROW><ROW><id>7258803</id><snippet>elapsed = tuple([int(i) for i in elapsed])
</snippet></ROW><ROW><id>7258803</id><snippet>elapsed_list = array(elapsed_list, dtype=float)
</snippet></ROW><ROW><id>7258901</id><snippet>import re

matches = re.finditer('&lt;h[1-6]&gt;', your_text)
for match in matches:
    print match.start()
</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>C:\</snippet></ROW><ROW><id>7259040</id><snippet>C:/</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>C:\</snippet></ROW><ROW><id>7259040</id><snippet>C:/</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>D:</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>\Windows</snippet></ROW><ROW><id>7259040</id><snippet>C:\Windows</snippet></ROW><ROW><id>7259040</id><snippet>D:</snippet></ROW><ROW><id>7259040</id><snippet>\Data</snippet></ROW><ROW><id>7259040</id><snippet>D:\Data</snippet></ROW><ROW><id>7259040</id><snippet>.</snippet></ROW><ROW><id>7259040</id><snippet>D:\Data</snippet></ROW><ROW><id>7259040</id><snippet>\</snippet></ROW><ROW><id>7259040</id><snippet>D:\</snippet></ROW><ROW><id>7259040</id><snippet>C:</snippet></ROW><ROW><id>7259040</id><snippet>C:\Windows</snippet></ROW><ROW><id>7259040</id><snippet>C:\Foo</snippet></ROW><ROW><id>7259040</id><snippet>C:\Foo</snippet></ROW><ROW><id>7259040</id><snippet>C:\</snippet></ROW><ROW><id>7259117</id><snippet>sudo chown -R tyre77 /Users/tyre77/.python-eggs/</snippet></ROW><ROW><id>7259190</id><snippet>import urllib2
from ntlm import HTTPNtlmAuthHandler

user = 'DOMAIN\User'
password = "Password"
url = "http://ntlmprotectedserver/securedfile.html"

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, url, user, password)
# create the NTLM authentication handler
auth_NTLM = HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(passman)

# create and install the opener
opener = urllib2.build_opener(auth_NTLM)
urllib2.install_opener(opener)

# retrieve the result
response = urllib2.urlopen(url)
print(response.read())
</snippet></ROW><ROW><id>7259267</id><snippet>generate-includes.py</snippet></ROW><ROW><id>7259267</id><snippet>myrst.inc</snippet></ROW><ROW><id>7259267</id><snippet>include</snippet></ROW><ROW><id>7259267</id><snippet>.. include:: myrst.inc
</snippet></ROW><ROW><id>7259267</id><snippet>myrst.inc:
    ./generate-includes.py

html: myrst.inc
    ...(other stuff here)
</snippet></ROW><ROW><id>7259267</id><snippet>make html</snippet></ROW><ROW><id>7259354</id><snippet>all</snippet></ROW><ROW><id>7259354</id><snippet>Number</snippet></ROW><ROW><id>7259354</id><snippet>&gt;&gt;&gt; all(isinstance(x, Number) for x in mylist)
</snippet></ROW><ROW><id>7259848</id><snippet>instrAsm = []
for a in asm:
    instrAsm += exeEnv.instr(a)
for g in Glob('*.s'):
    instrAsm += exeEnv.instr(g)
</snippet></ROW><ROW><id>7259848</id><snippet>asm</snippet></ROW><ROW><id>7259947</id><snippet>setup.py</snippet></ROW><ROW><id>7259947</id><snippet>src</snippet></ROW><ROW><id>7259947</id><snippet>setup.py develop</snippet></ROW><ROW><id>7259947</id><snippet>.bashrc</snippet></ROW><ROW><id>7259947</id><snippet>pip install -e /path/to/src</snippet></ROW><ROW><id>7259947</id><snippet>after_install()</snippet></ROW><ROW><id>7259947</id><snippet>sitecustomize</snippet></ROW><ROW><id>7259947</id><snippet>pip install -e</snippet></ROW><ROW><id>7259947</id><snippet>.pth</snippet></ROW><ROW><id>7259947</id><snippet>__init__.py</snippet></ROW><ROW><id>7259947</id><snippet>project/
    src/
        some_module.py
    scripts/
        __init__.py # special "magic"
        some_script.py
</snippet></ROW><ROW><id>7259947</id><snippet># file: project/src/some_module.py
print("importing %r" % __name__)

def some_function():
    print("called some_function() inside %s" % __name__)
--------------------------------------------------------
# file: project/scripts/some_script.py
import some_module

if __name__ == '__main__':
    some_module.some_function()
--------------------------------------------------------
# file: project/scripts/__init__.py
import sys
from os.path import dirname, abspath, join

print("doing magic!")
sys.path.insert(0, join(dirname(dirname(abspath(__file__))), 'src'))
</snippet></ROW><ROW><id>7259947</id><snippet>[~/project] $ python -m scripts.some_script
doing magic!
importing 'some_module'
called some_function() inside some_module
</snippet></ROW><ROW><id>7259947</id><snippet>project/</snippet></ROW><ROW><id>7259947</id><snippet>[~/otherdir] $ python -m scripts.some_script
ImportError: no module named scripts
</snippet></ROW><ROW><id>7259947</id><snippet>.bashrc</snippet></ROW><ROW><id>7259985</id><snippet>setattr</snippet></ROW><ROW><id>7259985</id><snippet>class Foo(object):

    def __init__(self):
        self.values = {'a': 0, 'b': 0}

    def bar(self, cmd):
        if cmd == "do_this":
            index = 'a'
        elif cmd == "do_that":
            index = 'b'

        filename = "file-%d.txt" % index
        f = open("filename", "w")

        ...

        self.values[index] = something
</snippet></ROW><ROW><id>7260200</id><snippet>from __future__ import division
import multiprocessing as mp   

def read_occupation( matrix,i ):
    matrix[i]=[1,2,3]

def main():
    manager=mp.Manager()
    matrix=manager.list([ [0] ] * 4)

    for index in xrange(0,3,2):
        p1 = mp.Process( target=read_occupation, args=(matrix,index) )
        p2 = mp.Process( target=read_occupation, args=(matrix,index+1) )

        p1.start()
        p2.start()

        p1.join()
        p2.join()

    print matrix

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7260200</id><snippet>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>7260298</id><snippet>for line in avr:
    try:
        print (dict1[arg[0]], dict1[newTyp], dict1[dev], arg)
    except KeyError:
        import sys, pdb
        pdb.post_mortem(sys.exc_info()[2])
</snippet></ROW><ROW><id>7260314</id><snippet>HttpRequest</snippet></ROW><ROW><id>7260314</id><snippet>from django.contrib.auth.models import User
from django.http import HttpResponse

def view_inside_a_view(request):
    return HttpResponse('hello %s' % request.user)

def view(request):
    # change to dummy user, or whoever
    request.user = User.objects.get(id=1)
    response = view_inside_a_view(request)
    return HttpResponse('rendered view: %s' % response.content)
</snippet></ROW><ROW><id>7260314</id><snippet>django.contrib.auth.authenticate</snippet></ROW><ROW><id>7260314</id><snippet>django.contrib.auth.login</snippet></ROW><ROW><id>7260314</id><snippet>login</snippet></ROW><ROW><id>7260314</id><snippet>from django.contrib.auth.models import User
from django.contrib.auth import login, get_backends
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse

@login_required
def view_inside_a_view(request):
    return HttpResponse('hello %s' % request.user)

def view(request):
    # login dummy user
    user = User.objects.get(id=2)
    backend = get_backends()[0]
    user.backend = "%s.%s" % (backend.__module__, backend.__class__.__name__)
    login(request, user)
    # change request's user
    request.user = user
    # get response from view
    response = view_inside_a_view(request)
    return HttpResponse('rendered view: %s' % response.content)
</snippet></ROW><ROW><id>7260361</id><snippet>CategoryTypes.as_view()(self.request)</snippet></ROW><ROW><id>7260361</id><snippet>TemplateResponse</snippet></ROW><ROW><id>7260361</id><snippet>render</snippet></ROW><ROW><id>7260361</id><snippet>render()</snippet></ROW><ROW><id>7260425</id><snippet>import xlwt

file_type = 'application/ms-excel'
file_name = 'sample.xls'

wbk = xlwt.Workbook()
sheet = wbk.add_sheet('Hey, Dude')
sheet.write(0, 0, 'Part Number')

file = StringIO.StringIO()
wbk.save(file)
file.seek(0)    

with files.open(file_name, 'a') as f:
  f.write('%s' % file.getvalue())

files.finalize(file_name)

blob_key = files.blobstore.get_blob_key(file_name)
</snippet></ROW><ROW><id>7260472</id><snippet>slice</snippet></ROW><ROW><id>7260472</id><snippet>$length</snippet></ROW><ROW><id>7260502</id><snippet>class Meta(type):
    def __new__(mcs, name, bases, attr):
        prefix = attr.get("prefix")
        if prefix:
            attr[prefix+"_var1"] = "hello"
            attr[prefix+"_var2"] = "goodbye"

        return type.__new__(mcs, name, bases, attr)

class myclass(object):
    __metaclass__ = Meta
    prefix = "coffee"

    def mytest(self):
        print(self.coffee_var1)
        print(self.coffee_var2)
</snippet></ROW><ROW><id>7260502</id><snippet> def __init__(self):     
     setattr(self.__class__, self.prefix+"_var1", "hello")
     setattr(self.__class__, self.prefix+"_var2", "goodbye")

 def mytest(self):
     print(self.coffee_var1)
     print(self.coffee_var2)
</snippet></ROW><ROW><id>7260502</id><snippet>prefix</snippet></ROW><ROW><id>7260502</id><snippet>mytest</snippet></ROW><ROW><id>7260503</id><snippet>import numpy as N

br = ['14 0.000000 -- (long term 0.000000)\n']*50000
aa = N.zeros((len(br), 2))

for i,line in enumerate(br):
    al, strs = aa[i], line.split(None, 2)[:2]
    al[0], al[1] = float(strs[0]), float(strs[1])
</snippet></ROW><ROW><id>7260601</id><snippet>os.path.getsize</snippet></ROW><ROW><id>7260601</id><snippet>f.readline</snippet></ROW><ROW><id>7260601</id><snippet>seek</snippet></ROW><ROW><id>7260601</id><snippet>f.readline()[0:-1]</snippet></ROW><ROW><id>7260601</id><snippet>\n</snippet></ROW><ROW><id>7260601</id><snippet>rstrip</snippet></ROW><ROW><id>7260601</id><snippet>sleep</snippet></ROW><ROW><id>7260826</id><snippet>tar.gz</snippet></ROW><ROW><id>7260922</id><snippet>str()</snippet></ROW><ROW><id>7260922</id><snippet>__str__()</snippet></ROW><ROW><id>7261041</id><snippet>public class MyRemoteObject : MarshalByRefObject, module1.module2.module3.MyRemoteObject
{
    public override object InitializeLifetimeService()
    {
        return null;
    }

    public bool DoSomething(InterfaceRequest requestData)
    {
        return true;
    }    
}
</snippet></ROW><ROW><id>7261041</id><snippet>int port = 0;
IiopChannel chan = new IiopChannel(port);
ChannelServices.RegisterChannel(chan);
</snippet></ROW><ROW><id>7261113</id><snippet>backup='_bak'</snippet></ROW><ROW><id>7261113</id><snippet>import os
import sys
import re
import fileinput

def sub_callback(match):
    func,args=match.groups()
    fargs=','.join('f({a})'.format(a=a) for a in args.split(','))
    return ('''\
#if def LOL
    {func}_new({fa})        
#else
    {func}({a})
#endif
'''.format(func=func,a=args,fa=fargs))

for root, dirs, files in os.walk('.'):
    for line in fileinput.input(
        (os.path.join(root,name) for name in files),
        inplace=True,
        backup='_bak'
        ):
        line=re.sub(r'\b([A-C])\((.*?)\)',sub_callback,line)
        sys.stdout.write(line)
</snippet></ROW><ROW><id>7261393</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>7261394</id><snippet>int i = get_thread_id(0);
float my_sum = 0;

for (; i &lt; array_size; i += get_local_size(0)){
    float val = in_r[i] * mtx_r + in_g[i] * mtx_g + in_b[i] * mtx_b;
    my_sum += pow(fabs(expect_r[i] - val), 2);
}
</snippet></ROW><ROW><id>7261531</id><snippet>class PostIcon(models.Model):
    post = models.ForeignKey(Post)
    icon = models.ForeignKey(Icon)
</snippet></ROW><ROW><id>7261531</id><snippet>for icon in icons:
    PostIcon(post=post, icon=icon).save()
</snippet></ROW><ROW><id>7261531</id><snippet>through</snippet></ROW><ROW><id>7261531</id><snippet>ManyToManyField</snippet></ROW><ROW><id>7261531</id><snippet>class Post(models.Model):
    icons = models.ManyToManyField(Icon, through=PostIcon)
</snippet></ROW><ROW><id>7261531</id><snippet>PostIcon</snippet></ROW><ROW><id>7261531</id><snippet>class PostIcon(models.Model):
    post = models.ForeignKey(Post)
    icon = models.ForeignKey(Icon)
    count =  models.IntegerField()
</snippet></ROW><ROW><id>7261544</id><snippet>import itertools
[''.join(value) for key, value in itertools.groupby(my_str)]
</snippet></ROW><ROW><id>7261593</id><snippet>['%f, %s' % (x,y) for _,_,_,x,_,y in d.values()]
</snippet></ROW><ROW><id>7261609</id><snippet>chdir</snippet></ROW><ROW><id>7261609</id><snippet>f = csv.reader(open(os.path.join(root, 'out.csv'),'rb'))</snippet></ROW><ROW><id>7261812</id><snippet>left_table</snippet></ROW><ROW><id>7261812</id><snippet>association_table</snippet></ROW><ROW><id>7261812</id><snippet>right_table</snippet></ROW><ROW><id>7261812</id><snippet>secondary</snippet></ROW><ROW><id>7261812</id><snippet>secondaryjoin</snippet></ROW><ROW><id>7261812</id><snippet>class PageLink(Base):
    '''
    Association table.
    '''
    __tablename__ = 'page_links'

    id = Column(Integer,primary_key=True)
    page_from = Column(Integer,ForeignKey('page.id'),primary_key=True)
    page_to = Column(Integer,ForeignKey('page.id'),primary_key=True)
    extra_col1 = Column(String(256),nullable=False)

class Page(Base):
    '''
    main table
    '''

    __tablename__ = 'page'

    id = Column(Integer,primary_key=True)
    name = Column(String(56),nullable=False)

    linked_to = relationship('PageLinks',backref='parent_page',
                             primaryjoin=id==PageLink.page_from)
    linked_from = relationship('PageLinks',backref='child_page',
                               primaryjoin=id==PageLink.page_to)
</snippet></ROW><ROW><id>7261812</id><snippet>p</snippet></ROW><ROW><id>7261812</id><snippet>p.linked_to[0].extra_col1</snippet></ROW><ROW><id>7261812</id><snippet>p.linked_to[0].page_to</snippet></ROW><ROW><id>7262403</id><snippet>&gt;&gt;&gt; elem.tag
'line'
&gt;&gt;&gt; elem.get('number')
'2'
&gt;&gt;&gt; elem.text
'Line 3'`
</snippet></ROW><ROW><id>7262673</id><snippet># stuff.py

class StuffDoer:
    def __init__(self, val1, val2, ...):
        self.val1 = val1
        self.val2 = val2

    def calculate_sequence(self):
        # do some stuff
        return sequence

    def create_graph(self, target_folder):
        # generate the graph and save it
        return path_to_graph

if __name__ == '__main__':
    # the console interface
    val1 = raw_input('Enter value 1:')
    val2 = raw_input('Enter value 2:')

    s = StuffDoer(val1, val2)
    seq = s.calculate_sequence()
    print('Sequence: %s' % seq)
    path = s.create_graph('/temp')
    print('Wrote graph to %s' % path)
</snippet></ROW><ROW><id>7262673</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>7262673</id><snippet>import stuff</snippet></ROW><ROW><id>7262673</id><snippet>stuff.StuffDoer</snippet></ROW><ROW><id>7262673</id><snippet>StuffDoer</snippet></ROW><ROW><id>7262918</id><snippet>s = s.replace(r"\", r"\\")
</snippet></ROW><ROW><id>7262918</id><snippet>"\\"</snippet></ROW><ROW><id>7262918</id><snippet>"\\\\"</snippet></ROW><ROW><id>7262958</id><snippet>import txt2cfg
import ma2lxo
txt2cfg.main( inFile, outFile )
ma2lxo.main( inFile, outFile )
</snippet></ROW><ROW><id>7263026</id><snippet>  def largest_below_threshold(values, threshold):
  '''Find the largest value below a specified threshold. If no value is
  found, returns None.'''

    result = None

    #the second cycle
    for v in values:
      if v &lt; threshold:
        if result is None:
           result = v
        elif result &lt; v:
           result = v
    return result
</snippet></ROW><ROW><id>7263248</id><snippet>"$x$y"</snippet></ROW><ROW><id>7263248</id><snippet>"abc"</snippet></ROW><ROW><id>7263248</id><snippet>("ab", "c")</snippet></ROW><ROW><id>7263248</id><snippet>("abc", "")</snippet></ROW><ROW><id>7263248</id><snippet>class TemplateX(Template):
    def getvalues(self,Str):
        """ Reads a string matching the template to find the original values.

            &gt;&gt;&gt; temp = TemplateX("Blah: $xx;$y;")
            &gt;&gt;&gt; newsting = temp.substitute(xx="1",y="2")
            &gt;&gt;&gt; temp.getvalues(newstring)
            ('1', '2')

        """
        regex = re.sub(self.pattern, "(.*)", self.template)
        m = re.match(regex, Str)
        return m.groups()
</snippet></ROW><ROW><id>7263248</id><snippet>    def getvalues(self,Str):
        regex = re.sub(self.pattern, r"(?P&lt;\2&gt;.*)", self.template)
        m = re.match(regex, Str)
        return m.groupdict()
</snippet></ROW><ROW><id>7263248</id><snippet>temp = TemplateX("$a$a")
newstring = temp.substitute(a='a')
print temp.getvalues(newstring)
</snippet></ROW><ROW><id>7263285</id><snippet>RebootCommand</snippet></ROW><ROW><id>7263285</id><snippet>commands/reboot.py</snippet></ROW><ROW><id>7263285</id><snippet>command_cls</snippet></ROW><ROW><id>7263285</id><snippet>commands/reboot.py</snippet></ROW><ROW><id>7263285</id><snippet>class RebootCommand:
  def execute(self):
    # [...]

command_cls = RebootCommand
</snippet></ROW><ROW><id>7263285</id><snippet>__import__</snippet></ROW><ROW><id>7263285</id><snippet>CommandManager.py</snippet></ROW><ROW><id>7263285</id><snippet>commands</snippet></ROW><ROW><id>7263285</id><snippet>class CommandManager:
  @classmethod
  def execute(cls, command, *args, **kw):
    # import the command module
    commands_mod = __import__("commands", globals(), locals(), [command])
    mod = getattr(commands_mod, command)
    return mod.command_cls(*args, **kw).execute()
</snippet></ROW><ROW><id>7263285</id><snippet>imp</snippet></ROW><ROW><id>7263285</id><snippet>__import__</snippet></ROW><ROW><id>7263540</id><snippet>def build_insert(self, table_name, item):
    if len(item) == 0:
      log.msg('Build_insert failed.  Delivered item was empty.', level=log.ERROR)
      return ''

    keys = item.keys()
    values = [ item[k] for k in keys ]

    sqlCommand = 'INSERT INTO {table} ({keys}) VALUES ({placeholders});'.format(
      table = table_name,
      keys = ', '.join(keys),
      placeholders = ', '.join([ "'%s'" for v in values ])  # extra quotes may not be necessary
    )

    return (sqlCommand, values)
</snippet></ROW><ROW><id>7263540</id><snippet>( "INSERT INTO thetable (album, dj, datetime_scraped, artist,
    playdatetime, label, showblock, playid, songtitle, time, station,
    source_url, showgenre, showtitle, source_title) VALUES ('%s', '%s',
    '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s',
    '%s', '%s');",
    ['album_val', 'dj_val', 'datetime_scraped_val', 'artist_val',
    'playdatetime_val', 'label_val', 'showblock_val', 'playid_val',
    'songtitle_val', 'time_val', 'station_val', 'source_url_val',
    'showgenre_val', 'showtitle_val', 'source_title_val'] 
)
</snippet></ROW><ROW><id>7263540</id><snippet>instr, data = build_insert(self, 'thetable', item)
cur.execute(instr, data)
</snippet></ROW><ROW><id>7263737</id><snippet>&gt;&gt;&gt; try:
...     raise Exception, 'someError'
... except Exception as e:
...     if e.message == 'someError':
...             print 'first case'
...     else:
...             print 'second case'
... 
first case
</snippet></ROW><ROW><id>7264071</id><snippet>import Queue

log = Queue.Queue()
class Runner1(object):

    def run(self):
        log.put('First Warning')
        log.put('Second Warning')
        return 42

class Main1(object):

    def __init__(self):
        self._runner = Runner1()

    def log(self, message):
        print('Some object specific info: {0}'.format(message))

    def run(self):
        out=self._runner.run()
        while True:
            try:
                msg = log.get_nowait()
                self.log(msg)
            except Queue.Empty:
                break
        print(out)


e1 = Main1()
e1.run()
</snippet></ROW><ROW><id>7264071</id><snippet>Some object specific info: First Warning
Some object specific info: Second Warning
42
</snippet></ROW><ROW><id>7264090</id><snippet>for i in tup:
    print i
</snippet></ROW><ROW><id>7264090</id><snippet>tuple</snippet></ROW><ROW><id>7264475</id><snippet>require 'socket'
require 'openssl'

host = '127.0.0.1'
port = 8963
sert_key = '../keys/key.pem'

socket = TCPSocket.new(host, port) # not help also

ssl_context = OpenSSL::SSL::SSLContext.new(:TLSv1)
ssl_context.cert = OpenSSL::X509::Certificate.new(File.open(sert_key))
ssl_context.key = OpenSSL::PKey::RSA.new(File.open(sert_key))
ssl_context.verify_mode = OpenSSL::SSL::VERIFY_NONE
ssl_socket = OpenSSL::SSL::SSLSocket.new(socket, ssl_context)
ssl_socket.sync_close = true
ssl_socket.accept

sert = "hello"                                                                                                                                                                                            
sert = sert.force_encoding('UTF-8')                                                                                                                                                                        
req = sprintf("%08x", sert.length) + sert                                                                                                                                                                  
ssl_socket.write(req)
puts ssl_socket.sysread(4096)
</snippet></ROW><ROW><id>7264694</id><snippet>import traceback
try:
    foo
except:
    print(traceback.format_exc())
finally:
     cleanup
</snippet></ROW><ROW><id>7264766</id><snippet>@register.filter(name='chr')
def chr_(value):
    return chr(value + 65)
</snippet></ROW><ROW><id>7264766</id><snippet>{{ forloop.counter0|chr }}
</snippet></ROW><ROW><id>7264933</id><snippet>obj =
  method: -&gt; 'xxx'
method = obj['method']
method() # 'xxx'
</snippet></ROW><ROW><id>7264933</id><snippet>foo2</snippet></ROW><ROW><id>7264933</id><snippet>foo</snippet></ROW><ROW><id>7264933</id><snippet>class Test
   foo: -&gt; alert 'foo'
   foo2: -&gt; this['foo']() # or @['foo']()

x = new Test
x.foo2()
</snippet></ROW><ROW><id>7265260</id><snippet>from xml.etree  import ElementTree
from cStringIO  import StringIO


testf = StringIO('&lt;foo&gt;&amp;moo_1;&lt;/foo&gt;')

parser = ElementTree.XMLParser()
parser.parser.UseForeignDTD(True)
parser.entity['moo_1'] = 'MOOOOO'

etree = ElementTree.ElementTree()

tree = etree.parse(testf, parser=parser)

for node in tree.iter('foo'):
    print node.text
</snippet></ROW><ROW><id>7265260</id><snippet>from xml.etree  import ElementTree
from cStringIO  import StringIO

class AllEntities:
    def __getitem__(self, key):
        #key is your entity, you can do whatever you want with it here
        return key

testf = StringIO('&lt;foo&gt;&amp;moo_1;&lt;/foo&gt;')

parser = ElementTree.XMLParser()
parser.parser.UseForeignDTD(True)
parser.entity = AllEntities()

etree = ElementTree.ElementTree()

tree = etree.parse(testf, parser=parser)

for node in tree.iter('foo'):
    print node.text
</snippet></ROW><ROW><id>7265565</id><snippet>.. autofunction::</snippet></ROW><ROW><id>7265565</id><snippet>foo(x=0.97)</snippet></ROW><ROW><id>7265565</id><snippet>bar</snippet></ROW><ROW><id>7265565</id><snippet>.. automodule:: bar

   .. autofunction:: foo(x=0.97)
</snippet></ROW><ROW><id>7265565</id><snippet>.. autoclass::</snippet></ROW><ROW><id>7265565</id><snippet>.. automethod::</snippet></ROW><ROW><id>7265574</id><snippet>count_cusip = 0
count_name = 0
count_sender = 0 
cur_sender = ''
for line in lines:

    m = re.search('[0-9]{3}[a-zA-Z0-9]{6}', line)
    if m:
        count_cusip += 1
        ws.write(count_cusip,0,m.group(0))
        ws.write(count_cusip,2,cur_sender)

    n = re.search('[A-Z]{3,5}\s[0-9]{1,4}\D{1,3}\S{1,3}\s{1,2}\w+', line)
    if n:
        count_name += 1
        ws.write(count_name,1,n.group(0))
        ws.write(count_name,2,cur_sender)

    o = re.search(r"Original Sender:\s\b\w+\s\w+", line)
    if o:
        count_sender += 1
        cur_sender = o.group(0)
</snippet></ROW><ROW><id>7265875</id><snippet>"friends.csv"</snippet></ROW><ROW><id>7265875</id><snippet>import csv

def print_friends():
    reader = csv.reader(open("friends.csv", "rb"), delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    for row in reader:
        print row

def friend_exists(friend):
    reader = csv.reader(open("friends.csv", "rb"), delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    for row in reader:
        if (row == friend):
            return True
    return False

def add_friend(name, phone, address, birthday):
    friend = [name, phone, address, birthday]
    if friend_exists(friend):
        return False

    writer = csv.writer(open("friends.csv", "ab"), delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    writer.writerow(friend)
    return True

print "print_friends: "
print_friends()

print "get_friend: "
test_friend = ["barney", "4321 9876", "New York", "2000"]
print friend_exists(test_friend)

print "add_friend: "
print add_friend("barney", "4321 9876", "New York", "2000")
</snippet></ROW><ROW><id>7265898</id><snippet>latin1</snippet></ROW><ROW><id>7265898</id><snippet>UTF-16LE</snippet></ROW><ROW><id>7265898</id><snippet>unicode</snippet></ROW><ROW><id>7265898</id><snippet>str</snippet></ROW><ROW><id>7265898</id><snippet>ascii</snippet></ROW><ROW><id>7265898</id><snippet>import xlwt
wb = xlwt.Workbook(encoding="UTF-8")
uc = u"".join(unichr(0x0410 + i) for i in xrange(32)) # some Cyrillic characters
u8 = uc.encode("UTF-8")
ws = wb.add_sheet("demo")
ws.write(0, 0, uc)
ws.write(1, 0, u8)
ws.write(2, 0, xlwt.Formula("A1=A2"))
ws.write(3, 0, "ASCII is a subset of UTF-8")
wb.save("xlwt_write_utf8.xls")
</snippet></ROW><ROW><id>7265898</id><snippet>print repr(your_utf8_text)</snippet></ROW><ROW><id>7265898</id><snippet>print repr(contents)</snippet></ROW><ROW><id>7266701</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = [' 1.9580000000000002E-05\xef\xbb\xbf\r\n']
&gt;&gt;&gt; float(re.search(r'\d\.\d*E[+-]\d+',x[0]).group())
1.9580000000000002e-05
</snippet></ROW><ROW><id>7266791</id><snippet>{A:{12,54,...}, B:{34,....}</snippet></ROW><ROW><id>7266791</id><snippet>repo = {}
infile = open('test10.log','r')
lines = infile.readlines()[2:-1]
for i in lines:
    module, time = [a.strip() for a in i.split(',')]
    repo.setdefault(module, []).append(int(time))
</snippet></ROW><ROW><id>7266791</id><snippet>{'A': [12, 54], 'B': [34], 'F': [60]}
</snippet></ROW><ROW><id>7266967</id><snippet>&gt;&gt;&gt; from twisted.internet.defer import Deferred as D
&gt;&gt;&gt; def start_app(_):
...     #import os
...     return os.startfile('sasa')
... 
... def command_die(err):
...     err.printTraceback()
... 
...     
... d = D()
... d.addCallback(start_app)
... d.addErrback(command_die)
... d.callback(0)
Traceback (most recent call last):
  File "C:\Users\Pilyavskiy\AppData\Local\DreamPie\share\dreampie\subp-py2\dreampielib\subprocess\__init__.py", line 324, in execute
    exec codeob in self.locs
  File "&lt;pyshell#3&gt;", line 12, in &lt;module&gt;
    d.callback(0)
  File "C:\pill\Python27\lib\site-packages\twisted\internet\defer.py", line 361, in callback
    self._startRunCallbacks(result)
  File "C:\pill\Python27\lib\site-packages\twisted\internet\defer.py", line 455, in _startRunCallbacks
    self._runCallbacks()
--- &lt;exception caught here&gt; ---
  File "C:\pill\Python27\lib\site-packages\twisted\internet\defer.py", line 542, in _runCallbacks
    current.result = callback(current.result, *args, **kw)
  File "&lt;pyshell#3&gt;", line 3, in start_app
    return os.startfile('sasa')
exceptions.NameError: global name 'os' is not defined
</snippet></ROW><ROW><id>7267213</id><snippet>☎
</snippet></ROW><ROW><id>7267213</id><snippet>☎
</snippet></ROW><ROW><id>7267213</id><snippet>def to_character_entity_reference_string(s):
    return "".join(["&amp;#" + str(ord(c)) + ";" for c in s])

print(to_character_entity_reference_string(u'काठमाण्डु'))
</snippet></ROW><ROW><id>7267213</id><snippet>काठमाण्डु
</snippet></ROW><ROW><id>7267213</id><snippet>काठमाण्डु</snippet></ROW><ROW><id>7267213</id><snippet>encode</snippet></ROW><ROW><id>7267213</id><snippet>decode</snippet></ROW><ROW><id>7267280</id><snippet>def frange(x, y, jump):
  while x &lt; y:
    yield x
    x += jump
</snippet></ROW><ROW><id>7267749</id><snippet>__init__</snippet></ROW><ROW><id>7267749</id><snippet>myclass = MyClass(contents='the_contents')
</snippet></ROW><ROW><id>7267749</id><snippet>myclass = MyClass('the_contents')
</snippet></ROW><ROW><id>7267749</id><snippet>__init__</snippet></ROW><ROW><id>7267902</id><snippet>from multiprocessing import Process, Queue

def child(q, url):
    result = my_process(url)
    q.put(result)

if __name__ == '__main__':
    q = Queue()
    urls = [...]
    children = []
    for url in urls:
       p = Process(target=child, args=(q,url))
       p.start()
       children.append(p)
    for p in children:
       p.join()
       print q.get() #or write to file (might not be the answer from this child)
</snippet></ROW><ROW><id>7267902</id><snippet>while 0 != multiprocessing.active_children():
    print q.get()
</snippet></ROW><ROW><id>7268010</id><snippet>def detail(request, some_param):
  # [...]
</snippet></ROW><ROW><id>7268010</id><snippet>request</snippet></ROW><ROW><id>7268010</id><snippet>request.META['HTTP_X_FORWARDED_FOR']</snippet></ROW><ROW><id>7268010</id><snippet>request</snippet></ROW><ROW><id>7268010</id><snippet>HttpRequest</snippet></ROW><ROW><id>7268211</id><snippet>cursor = conn.cursor (MySQLdb.cursors.DictCursor)
</snippet></ROW><ROW><id>7268386</id><snippet>cd "My Documents\progging\python\Django-1.3"</snippet></ROW><ROW><id>7268386</id><snippet>python setup.py install</snippet></ROW><ROW><id>7268429</id><snippet>read</snippet></ROW><ROW><id>7268429</id><snippet>write</snippet></ROW><ROW><id>7268429</id><snippet>open</snippet></ROW><ROW><id>7268430</id><snippet>import os
import sys
def gtime(nam):
    return os.path.getmtime('./'+nam)
files = os.listdir('.')
files.remove(str(sys.argv[0])[2:])
files = sorted(files, key=gtime)
for fi, file in enumerate(files):
    os.rename(file, str(fi+1)+".tmp")
for fi in range(len(files)):
    os.rename(str(fi+1)+".tmp", str(fi+1))
</snippet></ROW><ROW><id>7268662</id><snippet>\</snippet></ROW><ROW><id>7268662</id><snippet>import os

def dirListing():
    dirList = os.listdir(r"C:\\Program Files\home\Server\Logs\fuchida@domain.com")
    for fname in dirList:
        print fname
    return

def main():
    dirListing()

if __name__ == '__main__':main()
</snippet></ROW><ROW><id>7268781</id><snippet>vector&lt;MyClass&gt;</snippet></ROW><ROW><id>7268781</id><snippet>vector</snippet></ROW><ROW><id>7268781</id><snippet>vector&lt;MyClass*&gt;</snippet></ROW><ROW><id>7268781</id><snippet>MyClass</snippet></ROW><ROW><id>7268781</id><snippet>vector&lt;shared_ptr&lt;MyClass&gt; &gt;</snippet></ROW><ROW><id>7268781</id><snippet>vector</snippet></ROW><ROW><id>7268781</id><snippet>list</snippet></ROW><ROW><id>7268903</id><snippet>sys.path_hooks</snippet></ROW><ROW><id>7268903</id><snippet>sys.meta_path</snippet></ROW><ROW><id>7268903</id><snippet>sys.path_hooks is a list of callables, which will be checked in
sequence to determine if they can handle a given path item.  The
callable is called with one argument, the path item.  The callable
must raise ImportError if it is unable to handle the path item, and
return an importer object if it can handle the path item.
</snippet></ROW><ROW><id>7269155</id><snippet>mime=True</snippet></ROW><ROW><id>7269155</id><snippet>mime_encoding=True</snippet></ROW><ROW><id>7269248</id><snippet>&gt;&gt;&gt; print [form for form in browser.forms()][0]
</snippet></ROW><ROW><id>7269351</id><snippet>self.thread</snippet></ROW><ROW><id>7269351</id><snippet>thread</snippet></ROW><ROW><id>7269666</id><snippet>def sleepjob(*a, **k):
    if a:
        return Worker.SLEEP, a[0]
    else:
        return Worker.SLEEP, timedelta(**k)
</snippet></ROW><ROW><id>7269666</id><snippet>yield self.sleepjob(timedelta(seconds=1))
yield self.sleepjob(seconds=1)
</snippet></ROW><ROW><id>7269703</id><snippet>settings</snippet></ROW><ROW><id>7269703</id><snippet>global_settings</snippet></ROW><ROW><id>7269798</id><snippet>self.theframe=self.tbox=self.entry=self.scrollbar=self.button=self.base=[0]*20
</snippet></ROW><ROW><id>7270275</id><snippet>blocktrans</snippet></ROW><ROW><id>7270275</id><snippet>{% blocktrans with foo=bar %}-- {{ foo }} --{% endblocktrans %}
</snippet></ROW><ROW><id>7270275</id><snippet>gettext('-- %(foo)s --') % {'foo': bar}
gettext('-- {foo} --').format(foo=bar)
</snippet></ROW><ROW><id>7270275</id><snippet>app.name</snippet></ROW><ROW><id>7270275</id><snippet>msgid</snippet></ROW><ROW><id>7270275</id><snippet>"-- %(foo)s --"</snippet></ROW><ROW><id>7270275</id><snippet>{% trans app.name %}</snippet></ROW><ROW><id>7270275</id><snippet>manage.py makemessages</snippet></ROW><ROW><id>7270275</id><snippet>gettext(app.name)</snippet></ROW><ROW><id>7270275</id><snippet>gettext_noop</snippet></ROW><ROW><id>7270275</id><snippet>makemessages</snippet></ROW><ROW><id>7270393</id><snippet>int()</snippet></ROW><ROW><id>7270393</id><snippet>float()</snippet></ROW><ROW><id>7270393</id><snippet>print(l)</snippet></ROW><ROW><id>7270393</id><snippet>__repr__</snippet></ROW><ROW><id>7270393</id><snippet>__repr__</snippet></ROW><ROW><id>7270393</id><snippet>print(l)</snippet></ROW><ROW><id>7270393</id><snippet>[0, '5.00000', 0.1]
</snippet></ROW><ROW><id>7270393</id><snippet>int</snippet></ROW><ROW><id>7270393</id><snippet>str</snippet></ROW><ROW><id>7270393</id><snippet>float</snippet></ROW><ROW><id>7270606</id><snippet>#...
class ScribPartAdmin(admin.ModelAdmin):
  class Media:
    css = {
      'all': ('css/mymarkup.css',)
    }
    js = ('javascript/mymarkup.js',)

admin.site.register(ScribPart, ScribPartAdmin)
#...
</snippet></ROW><ROW><id>7270606</id><snippet>change_list</snippet></ROW><ROW><id>7270606</id><snippet>change_form</snippet></ROW><ROW><id>7270693</id><snippet>$slice</snippet></ROW><ROW><id>7270693</id><snippet>&gt; db.User.findOne({}, {"logs":{$slice: -2}}) // last two
&gt; db.User.findOne({}, {"logs":{$slice: 2}}) // first two
</snippet></ROW><ROW><id>7271020</id><snippet>https://me.s3.amazonaws.com/</snippet></ROW><ROW><id>7271020</id><snippet>&lt;form action="http://mywebsite/upload" method="post" ...
</snippet></ROW><ROW><id>7271020</id><snippet>def upload(request):
    # Your treatment here.
    # Post the data to amazon S3.
    urllib2.urlopen("https://me.s3.amazonaws.com/", your_data)
    ...
</snippet></ROW><ROW><id>7271048</id><snippet>proc.stdout</snippet></ROW><ROW><id>7271048</id><snippet>import sys, os
import subprocess
import threading
import signal
import time

#Use ctrl-c and ctrl-break to terminate the script/ping

def sigbreak(signum, frame):
    import sys
    if proc.poll() is None:
        print('Killing ping...')
        proc.kill()
    sys.exit(0)

signal.signal(signal.SIGBREAK, sigbreak)
signal.signal(signal.SIGINT, sigbreak)

#executes in a separate thread
def run(pid):
    while True:
        time.sleep(2)
        try: 
            os.kill(pid, signal.CTRL_BREAK_EVENT)
        except WindowsError:
            #quit the thread if ping is dead 
            break

cmd = [r'c:\windows\system32\ping.exe', '127.0.0.1', '-l', '10000', '-t']
flags = subprocess.CREATE_NEW_PROCESS_GROUP
proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, creationflags=flags)
threading.Thread(target=run, args=(proc.pid,)).start()

while True:
    line = proc.stdout.readline()
    if b'statistics' in line:
        #I don't know what you're doing with the ping stats.
        #I'll just print them.
        for n in range(4):
            encoding = getattr(sys.stdout, 'encoding', 'ascii') 
            print(line.decode(encoding).rstrip())
            line = proc.stdout.readline()
        print()
</snippet></ROW><ROW><id>7271066</id><snippet>extrahead</snippet></ROW><ROW><id>7271291</id><snippet>syntaxcomplete#Complete</snippet></ROW><ROW><id>7271291</id><snippet>pythoncomplete#Complete</snippet></ROW><ROW><id>7271291</id><snippet># ~/.vim/ftplugin/python.vim
setlocal omnifunc=pythoncomplete#Complete

# Or by autocmd
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
</snippet></ROW><ROW><id>7271404</id><snippet>dict(zip([1,2,3,4], [a,b,c,d]))
</snippet></ROW><ROW><id>7271404</id><snippet>itertools.izip</snippet></ROW><ROW><id>7271404</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>7271404</id><snippet>a</snippet></ROW><ROW><id>7271404</id><snippet>b</snippet></ROW><ROW><id>7271404</id><snippet>c</snippet></ROW><ROW><id>7271404</id><snippet>d</snippet></ROW><ROW><id>7271404</id><snippet>['a','b','c','d']</snippet></ROW><ROW><id>7271404</id><snippet>zip</snippet></ROW><ROW><id>7271404</id><snippet>dict</snippet></ROW><ROW><id>7271515</id><snippet>def my_gen(data):
    for index in range(0, len(data)-1):
        value = data[index]
        value += 2 * value
        #etc
        yield value

my_list = [2, 8, 17, 5, 41, 77, 3, 11]
x = my_gen(my_list)
print x.next()
print x.next()
</snippet></ROW><ROW><id>7271523</id><snippet>value</snippet></ROW><ROW><id>7271523</id><snippet>l</snippet></ROW><ROW><id>7271523</id><snippet>[d['value'] for d in l]
</snippet></ROW><ROW><id>7271523</id><snippet>value</snippet></ROW><ROW><id>7271523</id><snippet>[d['value'] for d in l if 'value' in d]
</snippet></ROW><ROW><id>7271877</id><snippet>class Suppressor:
    def __init__(self, exception_type):
        self._exception_type = exception_type

    def __call__(self, expression):
        try:
            exec expression
        except self._exception_type as e:
            print 'Suppressor: suppressed exception %s with content \'%s\'' % (type(self._exception_type), e)
            # or log.msg('...')
</snippet></ROW><ROW><id>7271877</id><snippet>s = Suppressor(excel.WhateverError) # TODO: put your exception type here
s('excel.Selection.Borders(xlDiagonalDown).LineStyle = xlNone')
</snippet></ROW><ROW><id>7272266</id><snippet>del data
</snippet></ROW><ROW><id>7272266</id><snippet>jsonfile</snippet></ROW><ROW><id>7272266</id><snippet>data = json.load(open(input))
</snippet></ROW><ROW><id>7272266</id><snippet>data</snippet></ROW><ROW><id>7272266</id><snippet>for k,v in json.load(open(input))["specialKey"].iteritems():
</snippet></ROW><ROW><id>7272464</id><snippet>B.func</snippet></ROW><ROW><id>7272464</id><snippet>A</snippet></ROW><ROW><id>7272464</id><snippet>b.func()</snippet></ROW><ROW><id>7272464</id><snippet>A</snippet></ROW><ROW><id>7272464</id><snippet>B</snippet></ROW><ROW><id>7272464</id><snippet>B.func</snippet></ROW><ROW><id>7272464</id><snippet>B</snippet></ROW><ROW><id>7272464</id><snippet>B</snippet></ROW><ROW><id>7272464</id><snippet>self</snippet></ROW><ROW><id>7272464</id><snippet>b</snippet></ROW><ROW><id>7272464</id><snippet>b.func()</snippet></ROW><ROW><id>7272464</id><snippet>self</snippet></ROW><ROW><id>7272464</id><snippet>func</snippet></ROW><ROW><id>7272464</id><snippet>A</snippet></ROW><ROW><id>7272464</id><snippet>class A():
    def go(self):
        b=B()
        b.func()

class B():
    def func(self):
        import inspect
        print inspect.currentframe().f_back.f_locals['self']

if __name__ == '__main__':
  a = A()
  a.go()
</snippet></ROW><ROW><id>7272464</id><snippet>&lt;__main__.A instance at 0x15bd9e0&gt;
</snippet></ROW><ROW><id>7272464</id><snippet>B.func</snippet></ROW><ROW><id>7272464</id><snippet>A</snippet></ROW><ROW><id>7272572</id><snippet>'includes' : ['sqlalchemy.dialects.sqlite']
</snippet></ROW><ROW><id>7272874</id><snippet>True</snippet></ROW><ROW><id>7272874</id><snippet>False</snippet></ROW><ROW><id>7272874</id><snippet>1</snippet></ROW><ROW><id>7272874</id><snippet>0</snippet></ROW><ROW><id>7272874</id><snippet>def recurseadd(test):
    if test:
        return [test[False] + True] + recurseadd(test[True:])
    else:
        return test
</snippet></ROW><ROW><id>7272874</id><snippet>+</snippet></ROW><ROW><id>7272874</id><snippet>[test[0] + 1].extend(recurseadd(test[1:]))</snippet></ROW><ROW><id>7272874</id><snippet>operator.add</snippet></ROW><ROW><id>7272874</id><snippet>+</snippet></ROW><ROW><id>7272874</id><snippet>functools.partial</snippet></ROW><ROW><id>7272874</id><snippet>itertools.imap</snippet></ROW><ROW><id>7272874</id><snippet>from functools import partial
from operator import add
from itertools import imap

addone = partial(add, 1)

test = list(imap(addone, test))  # don't really use imap if you want a list
</snippet></ROW><ROW><id>7272874</id><snippet>itertools</snippet></ROW><ROW><id>7272874</id><snippet>izip</snippet></ROW><ROW><id>7272874</id><snippet>repeat</snippet></ROW><ROW><id>7272874</id><snippet>test = [sum(elem) for elem in izip(test, repeat(1))]
</snippet></ROW><ROW><id>7272874</id><snippet>sum</snippet></ROW><ROW><id>7272874</id><snippet>test = sum(([x+1] for x in test), [])
</snippet></ROW><ROW><id>7272874</id><snippet>xrange</snippet></ROW><ROW><id>7272874</id><snippet>range</snippet></ROW><ROW><id>7272874</id><snippet>itertools.count(1).next()</snippet></ROW><ROW><id>7272874</id><snippet>1</snippet></ROW><ROW><id>7272892</id><snippet>taboo = {" and ", " of ", " at ", " in ", ":", "-", ",", " the ", " "}
</snippet></ROW><ROW><id>7272926</id><snippet>fork()</snippet></ROW><ROW><id>7272926</id><snippet>fork()</snippet></ROW><ROW><id>7272926</id><snippet>fork()</snippet></ROW><ROW><id>7272926</id><snippet>subprocess</snippet></ROW><ROW><id>7272926</id><snippet>multiprocessing</snippet></ROW><ROW><id>7273261</id><snippet> dataset = [[[float(value) for value in measure] 
                           for measure in subject] 
                           for subject in dataset] 
</snippet></ROW><ROW><id>7273306</id><snippet>:1</snippet></ROW><ROW><id>7273306</id><snippet>:2</snippet></ROW><ROW><id>7273306</id><snippet>GqlQuery()</snippet></ROW><ROW><id>7273483</id><snippet>class MetaVector3(type):

    @property
    def zero(cls):
        return cls(0,0,0)

class Vector3(object):
    __metaclass__ = MetaVector3

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

&gt;&gt;&gt; v = Vector3.zero
&gt;&gt;&gt; v.x, v.y, v.z
(0, 0, 0)
</snippet></ROW><ROW><id>7273617</id><snippet>class Animal(object):

    @staticmethod
    def get_animal_which_makes_noise(self, noise):
        if noise == 'meow':
            return Cat()
        elif noise == 'woof':
            return Dog()

class Cat(Animal):
    ...

class Dog(Animal):
    ...
</snippet></ROW><ROW><id>7273727</id><snippet>import time

while True:
    print "loop"
    time.sleep(0.5)
</snippet></ROW><ROW><id>7273727</id><snippet>strace -o isacontextswitch.strace -s512 python test.py</snippet></ROW><ROW><id>7273727</id><snippet>write(1, "loop\n", 5)                   = 5
select(0, NULL, NULL, NULL, {0, 500000}) = 0 (Timeout)
write(1, "loop\n", 5)                   = 5
select(0, NULL, NULL, NULL, {0, 500000}) = 0 (Timeout)
write(1, "loop\n", 5)                   = 5
select(0, NULL, NULL, NULL, {0, 500000}) = 0 (Timeout)
write(1, "loop\n", 5)                   = 5
select(0, NULL, NULL, NULL, {0, 500000}) = 0 (Timeout)
write(1, "loop\n", 5)  
</snippet></ROW><ROW><id>7273727</id><snippet>select()</snippet></ROW><ROW><id>7273727</id><snippet>ctrl+c</snippet></ROW><ROW><id>7273727</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>7273727</id><snippet>{0,0}</snippet></ROW><ROW><id>7273727</id><snippet>multiprocessing</snippet></ROW><ROW><id>7273727</id><snippet>threads</snippet></ROW><ROW><id>7273727</id><snippet>do_select</snippet></ROW><ROW><id>7273727</id><snippet>fs\select.c</snippet></ROW><ROW><id>7273727</id><snippet>if (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) {
    wait = NULL;
timed_out = 1;
}

if (end_time &amp;&amp; !timed_out)
    slack = select_estimate_accuracy(end_time);
</snippet></ROW><ROW><id>7273727</id><snippet>cond_resched</snippet></ROW><ROW><id>7273749</id><snippet>sum</snippet></ROW><ROW><id>7273749</id><snippet>failTaskCnt = sum(1 for task in self._tasks if task.IsTaskFail())
</snippet></ROW><ROW><id>7273956</id><snippet>datetime.datetime</snippet></ROW><ROW><id>7273956</id><snippet>In [23]: import datetime
In [29]: datetime.datetime.strptime('9/1/2011','%m/%d/%Y')
Out[29]: datetime.datetime(2011, 9, 1, 0, 0)
</snippet></ROW><ROW><id>7273956</id><snippet>             o------------o
             |            |  dt.datetime.utcfromtimestamp (*)
             |            |&lt;-----------------------------------o 
             |            |                                    |
             |  datetime  |                                    |
             |            |  dt.datetime.fromtimestamp         |
             |            |&lt;----------------------------o      |
             |            |                             |      |
             o------------o                             |      |
                |   ^                                   |      |
     .timetuple |   |                                   |      |
                |   | dt.datetime(*tup[:6])             |      |
                v   |                                   |      |
             o------------o                          o------------o
             |            |-- calendar.timegm (*) --&gt;|            |
             |            |                          |            |
             |            |---------- time.mktime --&gt;|            |
             |  timetuple |                          |  timestamp |
             |            |&lt;-- time.localtime -------|            |
             |            |                          |            |
             |            |&lt;-- time.gmtime (*)-------|            |
             o------------o                          o------------o

(*) Interprets its input as being in UTC and returns output in UTC
</snippet></ROW><ROW><id>7273956</id><snippet>In [30]: import time

In [31]: time.mktime(datetime.datetime.strptime('9/1/2011','%m/%d/%Y').timetuple())
Out[31]: 1314849600.0
</snippet></ROW><ROW><id>7273956</id><snippet>In [32]: import calendar

In [33]: calendar.timegm(datetime.datetime.strptime('9/1/2011','%m/%d/%Y').timetuple())
Out[33]: 1314835200
</snippet></ROW><ROW><id>7273956</id><snippet>In [34]: timestamp=1314849600.0
In [35]: datetime.datetime.fromtimestamp(timestamp).strftime('%m/%d/%Y')
Out[35]: '09/01/2011'
</snippet></ROW><ROW><id>7273956</id><snippet>In [36]: datetime.datetime.utcfromtimestamp(timestamp).strftime('%m/%d/%Y')
Out[36]: '09/01/2011'
</snippet></ROW><ROW><id>7274042</id><snippet>os.walk</snippet></ROW><ROW><id>7274042</id><snippet>stat</snippet></ROW><ROW><id>7274042</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7274122</id><snippet>is</snippet></ROW><ROW><id>7274122</id><snippet>print f1 is f2
</snippet></ROW><ROW><id>7274169</id><snippet>d = {}
for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
    # I don't actually know how you're calculating values
    # and it kind of doesn't matter
    value = calculate(letter)
    if value in (inf, nan):
        continue
    d[letter] = value
</snippet></ROW><ROW><id>7274169</id><snippet>for e in L.keys():
    dR[e] = {}
    for i in L[e].keys():
        dR[e][i] = {}
        for l, ivalue in L[e][i].iteritems():
            for j in Q[e].keys():
                #dR[e][i][j] = {} # What's up with this?  If you don't want an empty dict,
                                 # just don't create one.
                for q, jvalue in Q[e][j].iteritems():
                    deltaR = DeltaR(ivalue, jvalue) #this is a function that I create previously
                    if (0 &lt; deltaR &lt; 100):
                        dR[e][i][j] = deltaR
                if dR[e][i][j] in (nan, inf):
                    del dR[e][i][j]
</snippet></ROW><ROW><id>7274227</id><snippet>&gt;&gt;&gt; from subprocess import Popen
&gt;&gt;&gt; def spawner(cmd_list):
...     while True:
...         print "Running proc..."
...         mon_proc = Popen(cmd_list)
...         print "Proc exit: %s" % mon_proc.wait()
... 
&gt;&gt;&gt; spawner(['/bin/sleep', '3'])
Running proc...
Proc exit: 0
Running proc...
Proc exit: 0
Running proc...
Proc exit: 0
Running proc...
</snippet></ROW><ROW><id>7274316</id><snippet>from datetime import date, timedelta as td

d1 = date(2008,8,15)
d2 = date(2008,9,15)

delta = d2 - d1

for i in range(delta.days + 1):
    print d1 + td(days=i)
</snippet></ROW><ROW><id>7274316</id><snippet>2008-08-15
2008-08-16
...
2008-09-13
2008-09-14
2008-09-15
</snippet></ROW><ROW><id>7274356</id><snippet>reload(foo)</snippet></ROW><ROW><id>7274356</id><snippet>reload(baz)</snippet></ROW><ROW><id>7274356</id><snippet>baz</snippet></ROW><ROW><id>7274356</id><snippet>from foo import bar</snippet></ROW><ROW><id>7274356</id><snippet>foo</snippet></ROW><ROW><id>7274356</id><snippet>foo</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>baz</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>reload(foo)</snippet></ROW><ROW><id>7274356</id><snippet>foo</snippet></ROW><ROW><id>7274356</id><snippet>foo</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>baz</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274356</id><snippet>import foo</snippet></ROW><ROW><id>7274356</id><snippet>foo.bar()</snippet></ROW><ROW><id>7274356</id><snippet>reload(foo)</snippet></ROW><ROW><id>7274356</id><snippet>bar</snippet></ROW><ROW><id>7274372</id><snippet>$ sudo apt-get install python2.6-dev</snippet></ROW><ROW><id>7274420</id><snippet>a = &lt;some dictionary&gt;
if key in a:
    print a[key]
</snippet></ROW><ROW><id>7274420</id><snippet>a = &lt;some dictionary&gt;
try:
    print a[key]
except KeyError:
    pass
</snippet></ROW><ROW><id>7274420</id><snippet>f = None
try:
    f = open(filename, 'r')
    ... do stuff to the file ...
except (IOError, OSError):
    # I can never remember which one of these Python throws...
    ... handle exception ...
finally:
    if f:
        f.close()
</snippet></ROW><ROW><id>7274420</id><snippet>do stuff to the file</snippet></ROW><ROW><id>7274420</id><snippet>else</snippet></ROW><ROW><id>7274420</id><snippet>f = None
try:
    f = open(filename, 'r')
except (IOError, OSError):
    pass
else:
    ... do stuff to the file ...
finally:
    if f:
        f.close()
</snippet></ROW><ROW><id>7274646</id><snippet>import package.modv2
import package.modv3
</snippet></ROW><ROW><id>7274646</id><snippet>from package.module import functionv2
from package.module import functionv3
</snippet></ROW><ROW><id>7274693</id><snippet>list_choices = {}
for i in obj:
    list_choices.setdefault(i.area.region.id, []).append([i.id, i.name])
</snippet></ROW><ROW><id>7274693</id><snippet>list_choices = collections.defaultdict(list)</snippet></ROW><ROW><id>7274693</id><snippet>list_choices[i.area.region.id].append([i.id, i.name])
</snippet></ROW><ROW><id>7274750</id><snippet> UnicodeEncodeError: 'charmap' codec can't encode character u'\ufeff' in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>7274750</id><snippet>"utf-8"</snippet></ROW><ROW><id>7274750</id><snippet>$ cat a b c &gt; abc 
</snippet></ROW><ROW><id>7274750</id><snippet>"utf-8-sig"</snippet></ROW><ROW><id>7274986</id><snippet>rgb_to_hsv=np.vectorize(colorsys.rgb_to_hsv)
hsv_to_rgb=np.vectorize(colorsys.hsv_to_rgb)
</snippet></ROW><ROW><id>7274986</id><snippet>np.vectorize</snippet></ROW><ROW><id>7274986</id><snippet>colorsys.rgb_to_hsv</snippet></ROW><ROW><id>7274986</id><snippet>colorsys.hsv_to_rgb</snippet></ROW><ROW><id>7274986</id><snippet>import Image
import numpy as np

def rgb_to_hsv(rgb):
    # Translated from source of colorsys.rgb_to_hsv
    hsv=np.empty_like(rgb)
    hsv[...,3:]=rgb[...,3:]
    r,g,b=rgb[...,0],rgb[...,1],rgb[...,2]
    maxc = np.max(rgb[...,:2],axis=-1)
    minc = np.min(rgb[...,:2],axis=-1)    
    hsv[...,2] = maxc   
    hsv[...,1] = (maxc-minc) / maxc
    rc = (maxc-r) / (maxc-minc)
    gc = (maxc-g) / (maxc-minc)
    bc = (maxc-b) / (maxc-minc)
    hsv[...,0] = np.select([r==maxc,g==maxc],[bc-gc,2.0+rc-bc],default=4.0+gc-rc)
    hsv[...,0] = (hsv[...,0]/6.0) % 1.0
    idx=(minc == maxc)
    hsv[...,0][idx]=0.0
    hsv[...,1][idx]=0.0
    return hsv

def hsv_to_rgb(hsv):
    # Translated from source of colorsys.hsv_to_rgb
    rgb=np.empty_like(hsv)
    rgb[...,3:]=hsv[...,3:]    
    h,s,v=hsv[...,0],hsv[...,1],hsv[...,2]   
    i = (h*6.0).astype('uint8')
    f = (h*6.0) - i
    p = v*(1.0 - s)
    q = v*(1.0 - s*f)
    t = v*(1.0 - s*(1.0-f))
    i = i%6
    conditions=[s==0.0,i==1,i==2,i==3,i==4,i==5]
    rgb[...,0]=np.select(conditions,[v,q,p,p,t,v],default=v)
    rgb[...,1]=np.select(conditions,[v,v,v,q,p,p],default=t)
    rgb[...,2]=np.select(conditions,[v,p,t,v,v,q],default=p) 
    return rgb

def shift_hue(arr,hout):
    hsv=rgb_to_hsv(arr)
    hsv[...,0]=hout
    rgb=hsv_to_rgb(hsv)
    return rgb

img = Image.open('tweeter.png').convert('RGBA')
arr=np.array(np.asarray(img).astype('float'))

if __name__=='__main__':
    green_hue=(180-78)/360.0
    red_hue=(180-180)/360.0

    new_img = Image.fromarray(shift_hue(arr,red_hue).astype('uint8'),'RGBA')
    new_img.save('tweeter_red.png')


    new_img = Image.fromarray(shift_hue(arr,green_hue).astype('uint8'),'RGBA')
    new_img.save('tweeter_green.png')
</snippet></ROW><ROW><id>7275185</id><snippet>((5, 1, 9, 23),)</snippet></ROW><ROW><id>7275185</id><snippet>(5, 1, 9, 23)</snippet></ROW><ROW><id>7275185</id><snippet>1</snippet></ROW><ROW><id>7275185</id><snippet>that_tuple[1]</snippet></ROW><ROW><id>7275185</id><snippet>IndexError</snippet></ROW><ROW><id>7275185</id><snippet>previous[1]</snippet></ROW><ROW><id>7275581</id><snippet>description</snippet></ROW><ROW><id>7275581</id><snippet>./manage</snippet></ROW><ROW><id>7276061</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>7276061</id><snippet>settings.py</snippet></ROW><ROW><id>7276061</id><snippet>contrib</snippet></ROW><ROW><id>7276179</id><snippet>@staticmethod</snippet></ROW><ROW><id>7276179</id><snippet>@classmethod</snippet></ROW><ROW><id>7276179</id><snippet>@classmethod</snippet></ROW><ROW><id>7276179</id><snippet>A.__init__</snippet></ROW><ROW><id>7276179</id><snippet>B</snippet></ROW><ROW><id>7276179</id><snippet>super()</snippet></ROW><ROW><id>7276179</id><snippet>class A:
    def __init__(self, data):
        self.values_to_counts = {}
        for val in data:
            if val in self.values_to_counts:
                self.values_to_counts[val] += 1
            else:
                self.values_to_counts[val] = 1
    @classmethod
    def from_values_to_counts(cls, values_to_counts):
        self = cls([])
        self.values_to_counts = values_to_counts
        return self

class B(A):
    def __init__(self, data, parameter):
        super(B, self).__init__(data)
        self.parameter = parameter
    def print_parameter(self):
        print self.parameter
</snippet></ROW><ROW><id>7276179</id><snippet>B.from_values_to_counts</snippet></ROW><ROW><id>7276179</id><snippet>A</snippet></ROW><ROW><id>7276179</id><snippet>B</snippet></ROW><ROW><id>7276179</id><snippet>B</snippet></ROW><ROW><id>7276179</id><snippet>super()</snippet></ROW><ROW><id>7276179</id><snippet>classmethod</snippet></ROW><ROW><id>7276179</id><snippet>instancemethod</snippet></ROW><ROW><id>7276179</id><snippet>im_self</snippet></ROW><ROW><id>7276179</id><snippet>class A:
    def __init__(self, data):
        self.values_to_counts = {}
        for val in data:
            if val in self.values_to_counts:
                self.values_to_counts[val] += 1
            else:
                self.values_to_counts[val] = 1
    @classmethod
    def from_values_to_counts(cls, values_to_counts):
        self = cls([])
        self.values_to_counts = values_to_counts
        return self

class B(A):
    def __init__(self, data, parameter):
        super(B, self).__init__(data)
        self.parameter = parameter
    def print_parameter(self):
        print self.parameter
    @classmethod
    def from_values_to_counts(cls, values_to_counts):
        self = super(B, cls).from_values_to_counts(values_to_counts)
        do_more_initialization(self)
        return self
</snippet></ROW><ROW><id>7276417</id><snippet>for x in trends_all[0]['trends']:
    ...
</snippet></ROW><ROW><id>7276417</id><snippet>if isinstance(trends_all, list):
    trends_all = trends_all[0]
for x in trends_all['trends']:
    ...
</snippet></ROW><ROW><id>7276474</id><snippet># Inherit object for new-style Python classes (recommended)
class GraphUtils(object):
    # Override the __init__() magic-method.
    def __init__(self):
        # Initialize the inherited object by executing its __init__() method.
        super(GraphUtils, self).__init__()

    def set_size(self, new_size):
        self.graph_size = new_size

# Inherit GraphUtils
class Graph(GraphUtils):
    def __init__(self):
        # Initialize the inherited GraphUtils object.
        super(Graph, self).__init__()
        # Declare the graph_size variable on creation of a new Graph object.
        self.graph_size = 10

    def print_size(self):
        print self.graph_size

if __name__ == "__main__":
    g = Graph()
    # It is recommended to use str.format() instead of string concatonation
    print "Graph default size: {}".format(g.graph_size) # will print "Graph default size: 10"
    g.set_size(20)
    g.print_size() # This will print 20
</snippet></ROW><ROW><id>7276556</id><snippet>def countChar(word):
    return dict((item, word.count(item)) for item in set(word))

&gt;&gt;&gt; countChar('google')
{'e': 1, 'g': 2, 'o': 2, 'l': 1}
&gt;&gt;&gt; countChar('apple')
{'a': 1, 'p': 2, 'e': 1, 'l': 1}
</snippet></ROW><ROW><id>7276556</id><snippet>word</snippet></ROW><ROW><id>7276556</id><snippet>&gt;&gt;&gt; set('google')
set(['e', 'o', 'g', 'l'])
</snippet></ROW><ROW><id>7276556</id><snippet>dict()</snippet></ROW><ROW><id>7277102</id><snippet>c = ', '.join('%s=%s' % t for t in zip(a, b))
</snippet></ROW><ROW><id>7277217</id><snippet>def createLists(num): 
    ls = range(1, num+1)
    return (ls, ls[::-1], [-n for n in ls][::-1], [-n for n in ls])

print createLists(5)
</snippet></ROW><ROW><id>7277222</id><snippet>[]</snippet></ROW><ROW><id>7277222</id><snippet>class Foo(object):
    a = {}
    b = 0
    c = []
</snippet></ROW><ROW><id>7277222</id><snippet>Foo.a</snippet></ROW><ROW><id>7277222</id><snippet>Foo().a</snippet></ROW><ROW><id>7277222</id><snippet>__dict__</snippet></ROW><ROW><id>7277222</id><snippet>Foo</snippet></ROW><ROW><id>7277222</id><snippet>__dict__</snippet></ROW><ROW><id>7277222</id><snippet>Foo().a</snippet></ROW><ROW><id>7277222</id><snippet>Foo.a</snippet></ROW><ROW><id>7277222</id><snippet>__init__</snippet></ROW><ROW><id>7277222</id><snippet>class Foo(object):
    # ...

    def __init__(self):
        self.x = {}
</snippet></ROW><ROW><id>7277222</id><snippet>__dict__</snippet></ROW><ROW><id>7277222</id><snippet>Foo.x</snippet></ROW><ROW><id>7277222</id><snippet>Foo().x</snippet></ROW><ROW><id>7277222</id><snippet>x</snippet></ROW><ROW><id>7277222</id><snippet>class Foo(object):
    # ...

    def mutate(self, key, value):
        self.x[key] = value
        self.a[key] = value
        self.b      = value
        self.c.append(value)
</snippet></ROW><ROW><id>7277222</id><snippet>self.x = {}</snippet></ROW><ROW><id>7277222</id><snippet>self.b = value</snippet></ROW><ROW><id>7277222</id><snippet>self.a</snippet></ROW><ROW><id>7277222</id><snippet>self.c</snippet></ROW><ROW><id>7277222</id><snippet>self.x</snippet></ROW><ROW><id>7277222</id><snippet>self.c</snippet></ROW><ROW><id>7277222</id><snippet>[10, 20]</snippet></ROW><ROW><id>7277306</id><snippet>&gt;&gt;&gt; a = r"\x50\x79\x74\x68\x6f\x6e"
&gt;&gt;&gt; print a
\x50\x79\x74\x68\x6f\x6e
&gt;&gt;&gt; a.decode('string_escape')
'Python'
</snippet></ROW><ROW><id>7277586</id><snippet>q = MyModel.all(keys_only=True)
for i in xrange(0, 1000, 200):
    db.delete(q.fetch(200))
</snippet></ROW><ROW><id>7277718</id><snippet># First open the file
# Then read the entire contents into memory
&gt;&gt;&gt; policy_document = open("/absolute/path/to/policy_document", "r").read()

# Then base64 encode the contents.
&gt;&gt;&gt; policy = base64.b64encode(policy_document)

# If you are using Python 2.7 you can use the with statement
# to ensure files are cleaned up
# (See @Niklas' comment)
&gt;&gt;&gt; with open("/absolute/path/to/policy_document", "r") as fp:
...     policy_document = fp.read()
...      policy = base64.b64encode(policy_document)
# fp will be properly closed
</snippet></ROW><ROW><id>7277718</id><snippet>os.path.expanduser("~/policy_document")</snippet></ROW><ROW><id>7278167</id><snippet>import itertools
x = 'abcd'
n = len(x)
for i in xrange(1,n):
  combinations = itertools.combinations(range(n), i)
  for c in combinations:
    print ''.join([k if m not in c else k.upper() for m,k in enumerate(x)]),
  print '    &gt;&gt; - {0} char(s) capitalized'.format(i)
</snippet></ROW><ROW><id>7278167</id><snippet>Abcd aBcd abCd abcD     &gt;&gt; - 1 char(s) capitalized
ABcd AbCd AbcD aBCd aBcD abCD     &gt;&gt; - 2 char(s) capitalized
ABCd ABcD AbCD aBCD     &gt;&gt; - 3 char(s) capitalized
</snippet></ROW><ROW><id>7278473</id><snippet>json.loads()</snippet></ROW><ROW><id>7278473</id><snippet>find()</snippet></ROW><ROW><id>7278473</id><snippet>find()</snippet></ROW><ROW><id>7278473</id><snippet>$where</snippet></ROW><ROW><id>7278473</id><snippet>{"$where": "function() { for (var i=0; i&lt;1000000; i++) {}; return true; }"}
</snippet></ROW><ROW><id>7278537</id><snippet>from itertools import groupby
def block_generator(filename):
    with open(filename) as lines:
        for pred,block in groupby(lines, "\t\n".__ne__):
            if pred:
                yield block
</snippet></ROW><ROW><id>7278791</id><snippet>0000 0000 0000 0001</snippet></ROW><ROW><id>7278791</id><snippet>1111 1111 1111 1110</snippet></ROW><ROW><id>7278791</id><snippet>0000 0000 0000 1111</snippet></ROW><ROW><id>7278791</id><snippet>1111 1111 1111 0000</snippet></ROW><ROW><id>7278791</id><snippet>~n = -n - 1</snippet></ROW><ROW><id>7278960</id><snippet>import httplib
httplib.HTTPConnection.debuglevel = 1
</snippet></ROW><ROW><id>7278965</id><snippet>a.get_profile()</snippet></ROW><ROW><id>7278965</id><snippet>a.get_profile().__dict__</snippet></ROW><ROW><id>7279228</id><snippet>Future</snippet></ROW><ROW><id>7279228</id><snippet>Executor</snippet></ROW><ROW><id>7279228</id><snippet>Future</snippet></ROW><ROW><id>7279490</id><snippet>test.txt</snippet></ROW><ROW><id>7280268</id><snippet>data[title] = [x in d and d[x][statid] or 0 for x in xs]
</snippet></ROW><ROW><id>7280268</id><snippet>data[title] = []
for x in xs:
    if x in d and d[x][statid]:
        data[title].append(d[x][statid])
    else:
        data[title].append(0)
</snippet></ROW><ROW><id>7280268</id><snippet>condition and value-if-condition-is-true or value-if-condition-is-false</snippet></ROW><ROW><id>7280268</id><snippet>condition ? value-if-condition-is-true : value-if-condition-is-false</snippet></ROW><ROW><id>7280268</id><snippet>value-if-condition-is-true</snippet></ROW><ROW><id>7280268</id><snippet>0, [], ()</snippet></ROW><ROW><id>7280268</id><snippet>value-if-condition-is-true</snippet></ROW><ROW><id>7280268</id><snippet>d[x][statid]</snippet></ROW><ROW><id>7280268</id><snippet>and d[x][statid]</snippet></ROW><ROW><id>7280268</id><snippet>data[title] = []
for x in xs:
    if x in d:
        data[title].append(d[x][statid])
    else:
        data[title].append(0)
</snippet></ROW><ROW><id>7280268</id><snippet>value-if-condition-is-true if condition else value-if-condition-is-false
</snippet></ROW><ROW><id>7280268</id><snippet>data[title] = []
for x in xs:
    data[title].append(d[x][statid] if x in d else 0)
</snippet></ROW><ROW><id>7280268</id><snippet>listvar = []
for some-iteration-condition:
    listvar.append(some-iteration-dependent-value)
</snippet></ROW><ROW><id>7280268</id><snippet>listvar = [some-iteration-dependent-value for some-iteration-condition]
</snippet></ROW><ROW><id>7280268</id><snippet>condition and true-value or false-value</snippet></ROW><ROW><id>7280268</id><snippet>data[title] = [d[x][statid] if x in d else 0 for x in xs]
</snippet></ROW><ROW><id>7280303</id><snippet>def stack_shift(res):
    # do something usefull
    return res
</snippet></ROW><ROW><id>7280303</id><snippet>def stack_shift(res):
    d = runQuery(query)
    d.addCallback(lambda ignored: res)
    return d
</snippet></ROW><ROW><id>7280661</id><snippet>defaultdict</snippet></ROW><ROW><id>7280661</id><snippet>from collections import defaultdict
hist = defaultdict(int)
for entry in data:
    hist[entry["location"]] += 1
</snippet></ROW><ROW><id>7280661</id><snippet>defaultdict</snippet></ROW><ROW><id>7280780</id><snippet>def x ():
    a_list =3
</snippet></ROW><ROW><id>7280780</id><snippet>M-: (string (char-syntax ?_))
</snippet></ROW><ROW><id>7281048</id><snippet>import itertools as it

L = ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc', '10', '%a', ' b']

sorter = lambda x: x[0].lower() if x and x[0].isalpha() else '}'
GL = [list(v) for k, v in it.groupby(sorted(L, key=sorter), key=sorter)]
</snippet></ROW><ROW><id>7281048</id><snippet>[['aa', 'ab', 'ac'],
 ['ba', 'bb', 'bc'],
 ['ca', 'cb', 'cc'],
 ['10', '%a', ' b']]
</snippet></ROW><ROW><id>7281048</id><snippet>'}'</snippet></ROW><ROW><id>7281210</id><snippet>__import__</snippet></ROW><ROW><id>7281210</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; name = 'foo.bar.baz'
&gt;&gt;&gt; __import__(name)
&lt;module 'foo' from ...&gt;
&gt;&gt;&gt; baz = sys.modules[name]
&gt;&gt;&gt; baz
&lt;module 'foo.bar.baz' from ...&gt;
</snippet></ROW><ROW><id>7281210</id><snippet>&gt;&gt;&gt; SomeClass = getattr(baz, 'SomeClass')
&gt;&gt;&gt; obj = SomeClass()
</snippet></ROW><ROW><id>7281328</id><snippet>s = raw_input() # input() in Python 3
try:
  numbers = map(int, s.split())
except ValueError:
  print('Invalid format')
</snippet></ROW><ROW><id>7281404</id><snippet>__slots__</snippet></ROW><ROW><id>7281404</id><snippet>__slots__ = ["one", "hundred"]
</snippet></ROW><ROW><id>7281404</id><snippet>class Test:</snippet></ROW><ROW><id>7281588</id><snippet>bin/instance run</snippet></ROW><ROW><id>7281589</id><snippet>compile</snippet></ROW><ROW><id>7281589</id><snippet>exec</snippet></ROW><ROW><id>7281589</id><snippet># log and compile the statement up front
try:
  logging.info('Compiling and evaluating:\n%s' % statement)
  compiled = compile(statement, '&lt;string&gt;', 'single')
except:
  self.response.out.write(traceback.format_exc())
  return
</snippet></ROW><ROW><id>7281589</id><snippet>  # run!
  old_globals = dict(statement_module.__dict__)
  try:
    old_stdout = sys.stdout
    old_stderr = sys.stderr
    try:
      sys.stdout = self.response.out
      sys.stderr = self.response.out
      exec compiled in statement_module.__dict__
    finally:
      sys.stdout = old_stdout
      sys.stderr = old_stderr
  except:
    self.response.out.write(traceback.format_exc())
    return
</snippet></ROW><ROW><id>7281797</id><snippet>import bisect

l = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

bisect.bisect(l, 55) # returns 7
</snippet></ROW><ROW><id>7281797</id><snippet>timeit bisect.bisect(l, 55)
# 375ns


timeit next((i for i,n in enumerate(l) if n &gt; 55), len(l))
# 2.24us


timeit next((l.index(n) for n in l if n &gt; 55), len(l))
# 1.93us
</snippet></ROW><ROW><id>7281925</id><snippet>assertEqual</snippet></ROW><ROW><id>7281925</id><snippet>assertIs</snippet></ROW><ROW><id>7281925</id><snippet>assertEqual</snippet></ROW><ROW><id>7281925</id><snippet>==</snippet></ROW><ROW><id>7281925</id><snippet>assertIs</snippet></ROW><ROW><id>7281925</id><snippet>is</snippet></ROW><ROW><id>7281925</id><snippet>is not</snippet></ROW><ROW><id>7282099</id><snippet>&gt;&gt;&gt; [int(char) for char in str(634)]
[6, 3, 4]
</snippet></ROW><ROW><id>7282099</id><snippet>&gt;&gt;&gt; map(int, str(634))        # Python 2
[6, 3, 4]

&gt;&gt;&gt; list(map(int, str(634)))  # Python 3
[6, 3, 4]
</snippet></ROW><ROW><id>7282142</id><snippet>getattr()</snippet></ROW><ROW><id>7282142</id><snippet>getattr()</snippet></ROW><ROW><id>7282142</id><snippet>getattr</snippet></ROW><ROW><id>7282142</id><snippet>getattr(x, "y")</snippet></ROW><ROW><id>7282142</id><snippet>x.y</snippet></ROW><ROW><id>7282142</id><snippet>getattr</snippet></ROW><ROW><id>7282142</id><snippet>getattr(x, "y", "No such member")</snippet></ROW><ROW><id>7282142</id><snippet>x</snippet></ROW><ROW><id>7282142</id><snippet>y</snippet></ROW><ROW><id>7282142</id><snippet>x.y</snippet></ROW><ROW><id>7282142</id><snippet>AttributeError</snippet></ROW><ROW><id>7282142</id><snippet>gettattr(x, "y", "No such member")</snippet></ROW><ROW><id>7282142</id><snippet>next</snippet></ROW><ROW><id>7282142</id><snippet>getattr()</snippet></ROW><ROW><id>7282142</id><snippet>room</snippet></ROW><ROW><id>7282142</id><snippet>room()</snippet></ROW><ROW><id>7282142</id><snippet>next</snippet></ROW><ROW><id>7282142</id><snippet>while</snippet></ROW><ROW><id>7282142</id><snippet>exit(0)</snippet></ROW><ROW><id>7282142</id><snippet>Game.death()</snippet></ROW><ROW><id>7282142</id><snippet>setattr()</snippet></ROW><ROW><id>7282142</id><snippet>hasattr()</snippet></ROW><ROW><id>7282556</id><snippet>Content-type</snippet></ROW><ROW><id>7282556</id><snippet>urlopen()</snippet></ROW><ROW><id>7282556</id><snippet>import urllib2
req = urllib2.Request('http://www.example.com/', data="abc", headers={'Content-type': 'text/plain'})
r = urllib2.urlopen(req)
</snippet></ROW><ROW><id>7282615</id><snippet>[u'....']</snippet></ROW><ROW><id>7282615</id><snippet>[u"...."]</snippet></ROW><ROW><id>7282615</id><snippet>[u'....']</snippet></ROW><ROW><id>7282615</id><snippet>[u'....']</snippet></ROW><ROW><id>7282615</id><snippet>u["..."]</snippet></ROW><ROW><id>7282615</id><snippet>"[u""...""]"</snippet></ROW><ROW><id>7282615</id><snippet>"Super, ""luxurious"" truck"</snippet></ROW><ROW><id>7282621</id><snippet>assert sum([int(i) for i in k.split()]) &lt;= 50</snippet></ROW><ROW><id>7282621</id><snippet>except 
AssertionError</snippet></ROW><ROW><id>7282621</id><snippet>k = input("input digits separated by spaces: ")
try:
    assert sum([int(i) for i in k.split()]) &lt;= 50
except ValueError:
    print "input only digits"
except AssertionError:
    print "Sum of digits is grater than 50"
</snippet></ROW><ROW><id>7282623</id><snippet>band0 = biglist[::nbands]
band1 = biglist[1::nbands]
....
</snippet></ROW><ROW><id>7282712</id><snippet>def add_flac_cover(filename, albumart):
    audio = File(filename)

    image = Picture()
    image.type = 3
    if albumart.endswith('png'):
        mime = 'image/png'
    else:
        mime = 'image/jpeg'
    image.desc = 'front cover'
    with open(albumart, 'rb') as f: # better than open(albumart, 'rb').read() ?
        image.data = f.read()

    audio.add_picture(image)
    audio.save()
</snippet></ROW><ROW><id>7282712</id><snippet>def pict_test(audio):
    try: 
        x = audio.pictures
        if x:
            return True
    except Exception:
        pass  
    if 'covr' in audio or 'APIC:' in audio:
        return True
    return False
</snippet></ROW><ROW><id>7282956</id><snippet>__new__</snippet></ROW><ROW><id>7282956</id><snippet>class ShortRib(object):
    def __init__(self, owner):
        self.owner = owner

class Cow(object):
    shortRib = None
    def __new__(cls, *args, **kwargs):
        if cls.shortRib == None:
            cls.shortRib = ShortRib(cls)
        return super(Cow, cls).__new__(cls, *args, **kwargs)

Cow()
Cow.shortRib.owner
</snippet></ROW><ROW><id>7282956</id><snippet>__init__</snippet></ROW><ROW><id>7282956</id><snippet>self.__class___</snippet></ROW><ROW><id>7282956</id><snippet>class ShortRib(object):
    def __init__(self, owner):
        self.owner = owner

class MetaCow(type):
    def __new__(cls, name, base, attrs):
        attrs['shortRib'] = ShortRib(cls)
        return super(MetaCow, cls).__new__(cls, name, base, attrs)

class Cow(object):
    __metaclass__ = MetaCow

Cow.shortRib.owner
</snippet></ROW><ROW><id>7282959</id><snippet>eval</snippet></ROW><ROW><id>7282959</id><snippet>true</snippet></ROW><ROW><id>7282959</id><snippet>false</snippet></ROW><ROW><id>7282959</id><snippet>null</snippet></ROW><ROW><id>7282959</id><snippet>eval</snippet></ROW><ROW><id>7282959</id><snippet>json</snippet></ROW><ROW><id>7282959</id><snippet>import json
data = json.loads("[1, 2, 3]")
</snippet></ROW><ROW><id>7282959</id><snippet>simplejson</snippet></ROW><ROW><id>7283140</id><snippet>for a,b in zip(list_of_a, list_of_b):
  # Do some thing
</snippet></ROW><ROW><id>7283140</id><snippet>itertools.izip</snippet></ROW><ROW><id>7283140</id><snippet>zip</snippet></ROW><ROW><id>7283140</id><snippet>zip</snippet></ROW><ROW><id>7283140</id><snippet>itertools.izip</snippet></ROW><ROW><id>7283140</id><snippet>list(zip(..))</snippet></ROW><ROW><id>7283140</id><snippet>zip</snippet></ROW><ROW><id>7283507</id><snippet>class MyClass:
   def __init__(self, create = True):
      if create:
         self.child = MyClass(False)

mc = MyClass()
</snippet></ROW><ROW><id>7283507</id><snippet>class MyClass:
    def set_child(self,child = None):
        # I prefer to make child optional for ease of use.
        child = MyClass() if child is None else child
        self.child=child

mc=MyClass()
mc.set_child()
</snippet></ROW><ROW><id>7283507</id><snippet>class MyClass:
    def __init__(self, create):
        if create:
            self.set_child(create=False)

    def set_child(self,child = None, create = True):
        child = MyClass(create) if child is None else child
        self.child=child

mc=MyClass()
</snippet></ROW><ROW><id>7283507</id><snippet>class MyClass:
    def __init__(self, count = 10):
        count -= 1
        if count:
           # the first child gets the value 9.
           # the second gets 8.
           # when the count gets to 0, stop!
           self.child = MyClass(count)
</snippet></ROW><ROW><id>7283507</id><snippet>obj.__class__</snippet></ROW><ROW><id>7283523</id><snippet>logger.info("%d records updated" % records_updated)</snippet></ROW><ROW><id>7283629</id><snippet>itertools.product</snippet></ROW><ROW><id>7283629</id><snippet>zip</snippet></ROW><ROW><id>7283629</id><snippet>[1,2,3]</snippet></ROW><ROW><id>7283629</id><snippet>[4,5]</snippet></ROW><ROW><id>7283629</id><snippet>(1,4)
(1,5)
(2,4)
(2,5)
(3,4)
(3,5)
</snippet></ROW><ROW><id>7283629</id><snippet>zip([1,2,3], [4,5])</snippet></ROW><ROW><id>7283629</id><snippet>(1,4)
(2,5)
</snippet></ROW><ROW><id>7283629</id><snippet>iterttools.izip_longest([1,2,3], [4,5], 99)</snippet></ROW><ROW><id>7283629</id><snippet>(1,4)
(2,5)
(3,99)
</snippet></ROW><ROW><id>7283720</id><snippet>sys.stdout.write('\r' + (' ' * len(old_string)))
sys.stdout.write('\rProcessing... ' + new_string)
</snippet></ROW><ROW><id>7284293</id><snippet>PyImport_ImportModule</snippet></ROW><ROW><id>7284293</id><snippet>NULL</snippet></ROW><ROW><id>7284293</id><snippet>PySys_SetPath("."); // before ..
mymod = PyImport_ImportModule("reverse");
</snippet></ROW><ROW><id>7284603</id><snippet>.*</snippet></ROW><ROW><id>7284603</id><snippet>[^"]*</snippet></ROW><ROW><id>7284603</id><snippet>[^"]</snippet></ROW><ROW><id>7284603</id><snippet>\\n</snippet></ROW><ROW><id>7284603</id><snippet>%n</snippet></ROW><ROW><id>7284603</id><snippet>re.sub(r'\[caption id="([^"]*)" align="([^"]*)" width="([^"]*)" caption="([^"]*)"\](.*)\[\/caption\]', "tokens: \\1 \\2 \\3 \\4 \\5", self.content, re.IGNORECASE)
</snippet></ROW><ROW><id>7284603</id><snippet>.*</snippet></ROW><ROW><id>7284603</id><snippet>[^\x00]*</snippet></ROW><ROW><id>7284603</id><snippet>[^\x00]</snippet></ROW><ROW><id>7284603</id><snippet>re.sub(r'\[caption id="([^"]*)" align="([^"]*)" width="([^"]*)" caption="([^"]*)"\]([^\x00]*)\[\/caption\]', "tokens: \\1 \\2 \\3 \\4 \\5", self.content, re.IGNORECASE)
</snippet></ROW><ROW><id>7284603</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7284690</id><snippet>http://wiki.wxpython.org/DragAndDrop
</snippet></ROW><ROW><id>7285562</id><snippet>Pict1 = Slide1.Shapes.AddPicture(FileName=pictName, LinkToFile=False, SaveWithDocument=True, Left=100, Top=100, Width=200, Height=200)
</snippet></ROW><ROW><id>7285661</id><snippet>numpy.result_type</snippet></ROW><ROW><id>7285661</id><snippet>x[0, 0, 0, 0, 0]</snippet></ROW><ROW><id>7285661</id><snippet>x.flat[0]</snippet></ROW><ROW><id>7285933</id><snippet>fork()</snippet></ROW><ROW><id>7285933</id><snippet>fork()</snippet></ROW><ROW><id>7285933</id><snippet>l.x</snippet></ROW><ROW><id>7285933</id><snippet>process_id = os.getpid()</snippet></ROW><ROW><id>7285933</id><snippet>if process_id != os.getpid(): 
   clear_local_data()
</snippet></ROW><ROW><id>7286016</id><snippet>auto_now=True</snippet></ROW><ROW><id>7286061</id><snippet>precompiled = []
for phrase in phrases:
    b1, b2 = str(phrase).strip().split(" ")
    precompiled.append(b1+"_"+b2, re.compile(r"%s\ *\t*\n*%s"%(b1,b2), re.IGNORECASE))

for (input, output) in ...:
    with open(output,"w") as o:
        with open(input) as i:
            data = i.read()
            for (pattern, regex) in precompiled:
                data = regex.sub(pattern, data)
            o.write(data)
</snippet></ROW><ROW><id>7286061</id><snippet>\s*</snippet></ROW><ROW><id>7286061</id><snippet>" \t "</snippet></ROW><ROW><id>7286144</id><snippet>.iteritems()</snippet></ROW><ROW><id>7286144</id><snippet>for key, value in item.iteritems():
    print key, value 
</snippet></ROW><ROW><id>7286144</id><snippet>.itervalues()</snippet></ROW><ROW><id>7286144</id><snippet>for value in item.itervalues():
    print value 
</snippet></ROW><ROW><id>7286144</id><snippet>.iteritems()</snippet></ROW><ROW><id>7286144</id><snippet>itervalues()</snippet></ROW><ROW><id>7286144</id><snippet>items()</snippet></ROW><ROW><id>7286144</id><snippet>values()</snippet></ROW><ROW><id>7286465</id><snippet>reversed()</snippet></ROW><ROW><id>7286465</id><snippet>reversed(range(10))
</snippet></ROW><ROW><id>7286969</id><snippet>&gt;&gt;&gt; words = [u'\u0440\u0430\u0437', u'\u0434\u0432\u0430', u'\u0442\u0440\u0438'] 
&gt;&gt;&gt; for w in words:
...     print w # This uses the terminal encoding -- _only_ utilize interactively
... 
раз
два
три
&gt;&gt;&gt; u'раз' == u'\u0440\u0430\u0437'
True
</snippet></ROW><ROW><id>7286969</id><snippet>print</snippet></ROW><ROW><id>7286969</id><snippet>unicode.split</snippet></ROW><ROW><id>7286969</id><snippet>&gt;&gt;&gt; u"раз два три".split()
[u'\u0440\u0430\u0437', u'\u0434\u0432\u0430', u'\u0442\u0440\u0438']
</snippet></ROW><ROW><id>7286969</id><snippet>re</snippet></ROW><ROW><id>7286969</id><snippet>unicode</snippet></ROW><ROW><id>7286969</id><snippet>str</snippet></ROW><ROW><id>7287037</id><snippet>$ python -c "import sys; print sys.stdout.encoding"
</snippet></ROW><ROW><id>7287037</id><snippet>s = u"\u5149\u66dc\u65e5\u3067\u30e9\u30c6 \u30d4\u30af\u30b7\u30fc\u4e71\u7372\u884c\u304d\u307e\u3059 \u5e0c\u671b\u8005\u52df\u96c6\u4e2d\u3067\u3059\uff3e\uff3e"
print s.encode('utf-8')
#Output: 光曜日でラテ ピクシー乱獲行きます 希望者募集中です＾＾
</snippet></ROW><ROW><id>7287046</id><snippet>random.random</snippet></ROW><ROW><id>7287046</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; help(random)
&gt;&gt;&gt; random.random()
0.8423026866867628
</snippet></ROW><ROW><id>7287046</id><snippet>drand48</snippet></ROW><ROW><id>7287046</id><snippet>drand48</snippet></ROW><ROW><id>7287046</id><snippet>drand48</snippet></ROW><ROW><id>7287046</id><snippet># Uncomment the next line if using Python 2.x...
# from __future__ import division
class Rand48(object):
    def __init__(self, seed):
        self.n = seed
    def seed(self, seed):
        self.n = seed
    def srand(self, seed):
        self.n = (seed &lt;&lt; 16) + 0x330e
    def next(self):
        self.n = (25214903917 * self.n + 11) &amp; (2**48 - 1)
        return self.n
    def drand(self):
        return self.next() / 2**48
    def lrand(self):
        return self.next() &gt;&gt; 17
    def mrand(self):
        n = self.next() &gt;&gt; 16
        if n &amp; (1 &lt;&lt; 31):
            n -= 1 &lt;&lt; 32
        return n   
</snippet></ROW><ROW><id>7287046</id><snippet>rand48</snippet></ROW><ROW><id>7287318</id><snippet>easy-install.pth</snippet></ROW><ROW><id>7287318</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>7287318</id><snippet>import suds</snippet></ROW><ROW><id>7287318</id><snippet>.pth</snippet></ROW><ROW><id>7287318</id><snippet>sys.path</snippet></ROW><ROW><id>7287318</id><snippet>suds</snippet></ROW><ROW><id>7287318</id><snippet>site-packages</snippet></ROW><ROW><id>7287318</id><snippet>sys.path</snippet></ROW><ROW><id>7287318</id><snippet>pkg_resources.require</snippet></ROW><ROW><id>7287553</id><snippet>a = "somedir.somefile"
b = "someclass"

module = __import__(a, globals(), locals(), [b], -1)
clazz = getattr(module, b)
</snippet></ROW><ROW><id>7287553</id><snippet>instance = clazz()
instance.method()
</snippet></ROW><ROW><id>7287635</id><snippet>if True:</snippet></ROW><ROW><id>7287635</id><snippet>while</snippet></ROW><ROW><id>7287635</id><snippet>if</snippet></ROW><ROW><id>7287917</id><snippet>import Tkinter
import threading
import matplotlib.backends.backend_tkagg

root = Tkinter.Tk()

class Plotter():
    def __init__(self,fig):
        t = threading.Thread(target=self.PlottingThread,args=(fig,))
        t.start()       

    def PlottingThread(self,fig):        
        canvas = matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(fig, master=root)
        canvas.show()
        canvas.get_tk_widget().pack(side=Tkinter.TOP, fill=Tkinter.BOTH, expand=1)

        toolbar = matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg(canvas, root)
        toolbar.update()
        canvas._tkcanvas.pack(side=Tkinter.TOP, fill=Tkinter.BOTH, expand=1)

        Tkinter.mainloop()

if __name__ == "__main__":
    import time

    fig1 = matplotlib.figure.Figure(figsize=(5,4), dpi=100)
    fig1.gca().plot([1,2,3])     
    fig2 = matplotlib.figure.Figure(figsize=(5,4), dpi=100)
    fig2.gca().plot([3,2,1])

    #Shows fig1 and not fig2, just like it's supposed to
    Plotter(fig1)

    time.sleep(1)

    #I can still plot to fig1 from my main thread
    fig1.gca().clear()
    fig1.gca().plot([5,2,7])
    fig1.canvas.draw()
</snippet></ROW><ROW><id>7287924</id><snippet>lxml.html</snippet></ROW><ROW><id>7287924</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7288019</id><snippet>&gt;&gt;&gt; print os.path.commonprefix(['/usr/var/log', '/usr/var/security'])
'/usr/var'
&gt;&gt;&gt; print os.path.commonprefix(['/tmp', '/usr/var'])  # No common prefix: the root is the common prefix
'/'
</snippet></ROW><ROW><id>7288019</id><snippet>paths = […, …, …]
common_prefix = os.path.commonprefix(list_of_paths)
if common_prefix in paths:
    …
</snippet></ROW><ROW><id>7288019</id><snippet>relative_paths = [os.path.relpath(path, common_prefix) for path in paths]
</snippet></ROW><ROW><id>7288019</id><snippet>&gt;&gt;&gt; os.path.commonprefix(['/usr/var', '/usr/var2/log'])
'/usr/var'
</snippet></ROW><ROW><id>7288019</id><snippet>/usr/var</snippet></ROW><ROW><id>7288019</id><snippet>commonprefix()</snippet></ROW><ROW><id>7288407</id><snippet>struct</snippet></ROW><ROW><id>7288407</id><snippet>import struct

def parse_records(self):
    """
    returns a tuple: (good, bad)
    good is a list of valid records (as tuples)
    bad is a list of tuples: (line_num, line, err)
    """

    cols = self.Columns()
    unpack_fmt = ""
    sign_checks = []
    start = 0
    for colx, info in enumerate(cols, 1):
        clen = info.columnLength
        if clen &lt; 1:
            raise ValueError("Column %d: Bad columnLength %r" % (colx, clen))
        if info.skipColumn:
            unpack_fmt += str(clen) + "x"
        else:
            unpack_fmt += str(clen) + "s"
            if info.hasSignage:
                sign_checks.append(start)
        start += clen
    expected_len = start
    unpack = struct.Struct(unpack_fmt).unpack

    good = []
    bad = []
    for line_num, line in enumerate(self.whatever_the_list_of_lines_is, 1):
        if len(line) != expected_len:
            bad.append((line_num, line, "bad length"))
            continue
        if not all(line[i] in '+-' for i in sign_checks):
            bad.append((line_num, line, "sign check failed"))
            continue
        good.append(unpack(line))

    return good, bad
</snippet></ROW><ROW><id>7288407</id><snippet>self.Columns()</snippet></ROW><ROW><id>7288407</id><snippet>self.Columns()</snippet></ROW><ROW><id>7288407</id><snippet>parsedList</snippet></ROW><ROW><id>7288407</id><snippet>def parse_records(self):
    cols = self.Columns()

    slices = []
    sign_checks = []
    start = 0
    for info in cols:
        if info.columnLength &lt; 1:
            raise ValueError, "bad columnLength"
        end = start + info.columnLength
        if not info.skipColumn:
            tup = (start, end)
            slices.append(tup)   
            if info.hasSignage:
                sign_checks.append(start)

    expected_len = end # or use (end - 1) to not count a newline

    try:
        for line in self.whatever_the_list_of_lines_is:
            if len(line) != expected_len:
                raise ValueError, "wrong length"
            if not all(line[i] in '+-' for i in sign_checks):
                raise ValueError, "wrong input"
            parsedLine = [line[s:e] for s, e in slices]

    except ValueError:
        parsedLine = False
</snippet></ROW><ROW><id>7288532</id><snippet>QStackedWidget</snippet></ROW><ROW><id>7288532</id><snippet>QSignalMapper</snippet></ROW><ROW><id>7288532</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *

app = QApplication(sys.argv)

# Create a stack with 2 webviews
stack = QStackedWidget()
mapper = QSignalMapper(stack)
mapper.mapped[int].connect(stack.setCurrentIndex)
for i in range(2):
    web = QWebView(stack)
    stack.addWidget(web)
    # When a webview finishes loading, switch to it
    web.loadFinished[bool].connect(mapper.map)
    mapper.setMapping(web, i)

# load the page in the non visible webview
stack.widget(1).load(QUrl("http://myapp.example.com"))
stack.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>7288741</id><snippet>super(ChildClass, self).method(args)</snippet></ROW><ROW><id>7288741</id><snippet>super</snippet></ROW><ROW><id>7288741</id><snippet>super</snippet></ROW><ROW><id>7288741</id><snippet>ParentClass.method(self, args)</snippet></ROW><ROW><id>7288776</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7288776</id><snippet>nodea.getParent() == nodeb.getParent()</snippet></ROW><ROW><id>7288776</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7288776</id><snippet>getContainingPara(nodea) == getContainingPara(nodeb)
</snippet></ROW><ROW><id>7288776</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7288776</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>7288776</id><snippet>pat1 = re.compile(regex1)
pat2 = re.compile(regex2)
for para in soup.findAll('p'):
    mat1 = pat1.search(para)
    mat2 = pat2.search(para)
    if not (mat1 or mat2): continue
    # found your match
</snippet></ROW><ROW><id>7289451</id><snippet>env.Command</snippet></ROW><ROW><id>7289451</id><snippet>if Value(params['json_key']) == "True":
    kw = {
        'target': 'out.txt',
        'source': 'in.txt',
        'action': 'function $SOURCE $TARGET',
    }
else:
    kw = {}
env.Command(**kw)
</snippet></ROW><ROW><id>7289533</id><snippet>&gt;&gt;&gt; urlparse.urlparse("http://www.example.com").geturl()
'http://www.example.com'
</snippet></ROW><ROW><id>7289533</id><snippet>&gt;&gt;&gt; urlparse.urlparse("www.example.com/go")
ParseResult(scheme='', netloc='', path='www.example.com/go', params='', \
    query='', fragment='')

&gt;&gt;&gt; urlparse.urlparse("http://www.example.com/go")
ParseResult(scheme='http', netloc='www.example.com', path='/go', params='', \
    query='', fragment='')
</snippet></ROW><ROW><id>7289915</id><snippet>import sqlite3

db = sqlite3.connect('sampledb')
c = db.cursor()

new_set = []

c.execute('select * from main')

temp_value = []
for row in c:
     for item in row:
          temp_value.append(item[1:-1])
     new_set.append(temp_value)
     temp_value = []

# place it back into the database
</snippet></ROW><ROW><id>7290195</id><snippet>Class1</snippet></ROW><ROW><id>7290195</id><snippet>__init__</snippet></ROW><ROW><id>7290195</id><snippet>Class1</snippet></ROW><ROW><id>7290195</id><snippet>Class1.stats</snippet></ROW><ROW><id>7290195</id><snippet>Class1</snippet></ROW><ROW><id>7290195</id><snippet>Class1</snippet></ROW><ROW><id>7290264</id><snippet>-S</snippet></ROW><ROW><id>7290264</id><snippet>site</snippet></ROW><ROW><id>7290264</id><snippet>signal</snippet></ROW><ROW><id>7290264</id><snippet>readline</snippet></ROW><ROW><id>7290264</id><snippet>-S</snippet></ROW><ROW><id>7290264</id><snippet>sys.setdefaultencoding("ascii")</snippet></ROW><ROW><id>7290323</id><snippet>pyramid.authentication.authenticated_userid()</snippet></ROW><ROW><id>7290323</id><snippet>None</snippet></ROW><ROW><id>7290530</id><snippet>NW</snippet></ROW><ROW><id>7290530</id><snippet>CENTER</snippet></ROW><ROW><id>7290530</id><snippet>self.canvas.create_image(0,0, image=image1, anchor=NW)
</snippet></ROW><ROW><id>7290530</id><snippet>self.idImage = self.canvas.create_image(0,0, image=image1)
...
self.canvas.itemconfig(self.idImage, anchor=NW)
</snippet></ROW><ROW><id>7290615</id><snippet>from collections import defaultdict

# T[x, i] is True if 'x' can be solved
# by a linear combination of data[:i+1]
T = defaultdict(bool)           # all values are False by default
T[0, 0] = True                # base case

for i, x in enumerate(data):    # i is index, x is data[i]
    for s in range(sum + 1):
        for c in range(s / x + 1):
            if T[s - c * x, i]:
                T[s, i + 1] = True
</snippet></ROW><ROW><id>7290968</id><snippet> WebElement element = driver.findElement(By.id("foo"));
 String contents = (String)((JavascriptExecutor)driver).executeScript("return arguments[0].innerHTML;", element); 
</snippet></ROW><ROW><id>7291170</id><snippet>&gt;&gt;&gt; ord(u"ć")
263
&gt;&gt;&gt; u"café"[2]
u'f'
&gt;&gt;&gt; u"café"[3]
u'\xe9'
&gt;&gt;&gt; for c in u"café":
...     print repr(c), ord(c)
... 
u'c' 99
u'a' 97
u'f' 102
u'\xe9' 233
</snippet></ROW><ROW><id>7291387</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7291486</id><snippet>Popen</snippet></ROW><ROW><id>7291486</id><snippet>check_call</snippet></ROW><ROW><id>7291486</id><snippet>stdout</snippet></ROW><ROW><id>7291486</id><snippet>stderr</snippet></ROW><ROW><id>7291486</id><snippet>logging.handlers.SysLogHandler</snippet></ROW><ROW><id>7291486</id><snippet>import logging

handler = logging.handlers.SysLogHandler()
logger = logging.getLogger('myApplication')
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
</snippet></ROW><ROW><id>7291486</id><snippet>check_call</snippet></ROW><ROW><id>7291486</id><snippet>Popen</snippet></ROW><ROW><id>7291486</id><snippet>process = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE)
# Popen.wait() waits for the command to complete and 
# returns the command's return code
if process.wait() != 0:
    print "AN ERROR OCCURED"
logger.error(process.stderr)
logger.info(process.stdout)
</snippet></ROW><ROW><id>7292081</id><snippet>from django.views.generic.list_detail import object_list

url('^URL_HERE/(?P&lt;object_id&gt;\d+)$', lambda request, *a, **k: object_detail(request, *a,
                       queryset=MyModel.objects.filter(user=request.user),
                       template="myapp/mytmplate.html", **k) )
</snippet></ROW><ROW><id>7293431</id><snippet>"expiration": "2020-12-01T12:00:00.000Z",
"conditions": [
    {"acl": "public-read" },
    {"bucket": "test-bucket" },
    ["eq", "$key", "filename"],
  ]
}
</snippet></ROW><ROW><id>7293431</id><snippet>policy_data = ... # stuff above
enc_policy = base64.b64_encode(policy_data.encode('utf8'))
signed = base64.b64_encode(hmac.new(AWS_SECRET, enc_policy, hashlib.sha1))
</snippet></ROW><ROW><id>7293431</id><snippet> &lt;form action="http://test-bucket.s3.amazonaws.com/" method="post" enctype="multipart/form-data"&gt;
    Key to upload: &lt;input type="input" name="key" value="filename" /&gt;&lt;br /&gt;
    &lt;input type="hidden" name="acl" value="public-read" /&gt;
    &lt;input type="hidden" name="success_action_redirect" value="http://test-bucket.s3.amazonaws.com/successful_upload.html" /&gt;
    Content-Type: &lt;input type="input" name="Content-Type" value="image/jpeg" /&gt;&lt;br /&gt;
    &lt;input type="hidden" name="AWSAccessKeyId" value="YOUR_ACCESS_KEY_ID" /&gt;
    &lt;input type="hidden" name="Policy" value="&lt;enc_policy from above&gt;" /&gt;
    &lt;input type="hidden" name="Signature" value="&lt;signed from above&gt;" /&gt;
    File: &lt;input type="file" name="file" /&gt; &lt;br /&gt;
    &lt;!-- The elements after this will be ignored --&gt;
    &lt;input type="submit" name="submit" value="Upload to Amazon S3" /&gt;
  &lt;/form&gt;
</snippet></ROW><ROW><id>7293530</id><snippet>int("".join(str(X) for X in x))
</snippet></ROW><ROW><id>7293530</id><snippet>x = [1, 23, 4]</snippet></ROW><ROW><id>7293794</id><snippet>re.sub</snippet></ROW><ROW><id>7293794</id><snippet>import re
def callback(match):
    return next(callback.v)
callback.v=iter(('1','2','3'))

s = "blah blah blah"
print(re.sub(r'blah',callback,s))
</snippet></ROW><ROW><id>7293794</id><snippet>1 2 3
</snippet></ROW><ROW><id>7293992</id><snippet>for eachId in listOfIds:
    successful = False
    while not successful:        
        response = makeRequest(eachId)
        if response == 'market is closed':
            time.sleep(24*60*60) #sleep for one day
        else:
            successful = True
</snippet></ROW><ROW><id>7293992</id><snippet>while</snippet></ROW><ROW><id>7294147</id><snippet>StreamHandler</snippet></ROW><ROW><id>7294148</id><snippet>class KeyboardEvent:
    pass

class MouseEvent:
    pass

class NotifyThisClass:
    def __init__(self, event_dispatcher):
        self.ed = event_dispatcher
        self.ed.add(KeyboardEvent, self.on_keyboard_event)
        self.ed.add(MouseEvent, self.on_mouse_event)

    def __del__(self):
        self.ed.remove(KeyboardEvent, self.on_keyboard_event)
        self.ed.remove(MouseEvent, self.on_mouse_event)

    def on_keyboard_event(self, event):
        pass

    def on_mouse_event(self, event):
        pass
</snippet></ROW><ROW><id>7294148</id><snippet>__init__</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher.add</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>class EventDispatcher:
    def __init__(self):
        # Dict that maps event types to lists of listeners
        self._listeners = dict()

    def add(self, eventcls, listener):
        self._listeners.setdefault(eventcls, list()).append(listener)

    def post(self, event):
        try:
            for listener in self._listeners[event.__class__]:
                listener(event)
        except KeyError:
            pass # No listener interested in this event
</snippet></ROW><ROW><id>7294148</id><snippet>NotifyThisClass</snippet></ROW><ROW><id>7294148</id><snippet>self.ed.add(KeyboardEvent, self.on_keyboard_event)
</snippet></ROW><ROW><id>7294148</id><snippet>self.on_keyboard_event</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>self</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>self</snippet></ROW><ROW><id>7294148</id><snippet>WeakBoundMethod</snippet></ROW><ROW><id>7294148</id><snippet>self</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>self</snippet></ROW><ROW><id>7294148</id><snippet>NotifyThisClass.remove_listeners</snippet></ROW><ROW><id>7294148</id><snippet>WeakBoundMethod</snippet></ROW><ROW><id>7294148</id><snippet>class WeakBoundMethod:
    def __init__(self, meth):
        self._self = weakref.ref(meth.__self__)
        self._func = meth.__func__

    def __call__(self, *args, **kwargs):
        self._func(self._self(), *args, **kwargs)
</snippet></ROW><ROW><id>7294148</id><snippet>from weak_bound_method import WeakBoundMethod as Wbm

class NotifyThisClass:
    def __init__(self, event_dispatcher):
        self.ed = event_dispatcher
        self.ed.add(KeyboardEvent, Wbm(self.on_keyboard_event))
        self.ed.add(MouseEvent, Wbm(self.on_mouse_event))
</snippet></ROW><ROW><id>7294148</id><snippet>Connection</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>class NotifyThisClass:
    def __init__(self, event_dispatcher):
        self.ed = event_dispatcher
        self._connections = [
            self.ed.add(KeyboardEvent, Wbm(self.on_keyboard_event)),
            self.ed.add(MouseEvent, Wbm(self.on_mouse_event))
        ]
</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher.add</snippet></ROW><ROW><id>7294148</id><snippet>Connection</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>NotifyThisClass</snippet></ROW><ROW><id>7294148</id><snippet>self._connections</snippet></ROW><ROW><id>7294148</id><snippet>Connection.__del__</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher</snippet></ROW><ROW><id>7294148</id><snippet>EventDispatcher.remove</snippet></ROW><ROW><id>7294499</id><snippet>class A:
    pass

A.mydict = {A: 3, B: 2}
</snippet></ROW><ROW><id>7295284</id><snippet>output = "\nPrint: Customer"
</snippet></ROW><ROW><id>7295761</id><snippet>CRD='{r:&lt;6}{a:&gt;9.3f}{b:&gt;9.3f}{c:&gt;9.3f}{alpha:7.2f}{beta:7.2f}{gamma:7.2f} {sp:&lt;11}{z:&gt;4}'

data=dict(r='CRYST1',a=117,b=15.0,c=39,alpha=90,beta=90,gamma=90,sp='P 21 21 21',z=8)
print(CRD.format(**data))

# CRYST1  117.000   15.000   39.000  90.00  90.00  90.00 P 21 21 21    8
</snippet></ROW><ROW><id>7295761</id><snippet>CRD</snippet></ROW><ROW><id>7295761</id><snippet>{r:&lt;6}</snippet></ROW><ROW><id>7295761</id><snippet>format</snippet></ROW><ROW><id>7295761</id><snippet>str(r)</snippet></ROW><ROW><id>7295761</id><snippet>{a:&gt;9.3f}</snippet></ROW><ROW><id>7295761</id><snippet>format</snippet></ROW><ROW><id>7295761</id><snippet>a</snippet></ROW><ROW><id>7295776</id><snippet>writewtsi.close()
</snippet></ROW><ROW><id>7295930</id><snippet>In [6]: class_method = A.calc
In [7]: class_method.__class__
Out[7]: &lt;type 'instancemethod'&gt;

In [8]: class_method.__func__
Out[8]: &lt;function calc at 0x101625938&gt;

In [9]: class_method.im_class
Out[9]: &lt;class __main__.A at 0x10161ea10&gt;

In [10]: class_method.im_class == A
Out[10]: True

In [11]: class_method.im_class.__module__
Out[11]: '__main__'
</snippet></ROW><ROW><id>7296073</id><snippet>Meta</snippet></ROW><ROW><id>7296507</id><snippet>relationship</snippet></ROW><ROW><id>7296507</id><snippet>Link</snippet></ROW><ROW><id>7296507</id><snippet>submission_link = session.query(Links) \
                         .filter(Links.link == u'http://facebook.com') \
                         .first()
if submission_link is None:
    submission_link = Links(link=u'http://facebook.com')
    session.add(submission_link)

submission = Submissions(title=u'Facebook Homepage', link=submission_link)
session.add(submission)
session.commit()
</snippet></ROW><ROW><id>7296507</id><snippet>relationship</snippet></ROW><ROW><id>7296507</id><snippet>relation</snippet></ROW><ROW><id>7296610</id><snippet>itertools.combination</snippet></ROW><ROW><id>7296610</id><snippet>itertools.combination</snippet></ROW><ROW><id>7296610</id><snippet>import itertools as it
def mycombinations(iterable, r, maxGapSize):
    maxGapSizePlusOne = maxGapSize+1    
    for indices in it.combinations(range(len(iterable)),r):
        previous = indices[0]
        for k in indices[1:]:
            if k-previous&gt;maxGapSizePlusOne:                    
                break
            previous = k
        else:
            yield indices   
            # print(indices)
</snippet></ROW><ROW><id>7296610</id><snippet>% python -mtimeit -s'import test' 'list(test.combinations(("Aa","Bbb","Ccccc","Dd","E","Ffff",),2,1))'
10000 loops, best of 3: 63.9 usec per loop
</snippet></ROW><ROW><id>7296610</id><snippet>itertools.combination:</snippet></ROW><ROW><id>7296610</id><snippet>% python -mtimeit -s'import test' 'list(test.mycombinations(("Aa","Bbb","Ccccc","Dd","E","Ffff",),2,1))'
100000 loops, best of 3: 17.2 usec per loop
</snippet></ROW><ROW><id>7296610</id><snippet>range(len(iterable))</snippet></ROW><ROW><id>7296610</id><snippet>def mycombinations(iterable, r, maxGapSize):
    ...
    comb=it.combinations(range(len(iterable)),r)
    next(comb)
    for indices in comb:
</snippet></ROW><ROW><id>7296610</id><snippet>combinations</snippet></ROW><ROW><id>7296610</id><snippet>iterable</snippet></ROW><ROW><id>7296610</id><snippet>iterable</snippet></ROW><ROW><id>7296610</id><snippet>def combinations(length, r, maxGapSize):
</snippet></ROW><ROW><id>7296889</id><snippet>import os, sys
path = input("input path: ")
dirs = os.listdir(path)
for i in range(0,len(dirs)):
   # capture the fully qualified path for the original file
   original_file = os.path.join(path, dirs[i])
   # Build the new file name as number . file extension
   # if there is no . in the file name, this code goes boom
   new_file = os.path.join(path, str(i) + '.' + original_file.split('.')[-1])

   print "Renaming {0} as {1}".format(original_file, new_file)
   os.rename(original_file, new_file)
</snippet></ROW><ROW><id>7296889</id><snippet>&gt;&gt;&gt; path = input("Input path")
Input path"/Users/bfellows2/so"
&gt;&gt;&gt; dirs = os.listdir(path)
&gt;&gt;&gt; dirs
['bar.txt', 'foo.txt']
&gt;&gt;&gt; for i in range(0,len(dirs)): 
...  os.rename(os.path.join(path, dirs[i]), str(i))
... 
&gt;&gt;&gt; 
[1]+  Stopped                 python
Helcaraxe:so bfellows2$ ls -al
total 0
drwxr-xr-x    4 bfellows2  bfellows2   136 Sep  3 20:30 .
drwxr-xr-x  100 bfellows2  bfellows2  3400 Sep  3 20:24 ..
-rw-r--r--    1 bfellows2  bfellows2     0 Sep  3 20:24 0
-rw-r--r--    1 bfellows2  bfellows2     0 Sep  3 20:24 1
Helcaraxe:so bfellows2$ python -V
Python 2.6.1
</snippet></ROW><ROW><id>7296897</id><snippet>from django.db import models                                                                                                                             
from django.contrib.auth.models import User

class Topic(models.Model):
    user = models.ForeignKey(User) 
</snippet></ROW><ROW><id>7296897</id><snippet>'auth.User'</snippet></ROW><ROW><id>7297075</id><snippet>center</snippet></ROW><ROW><id>7297075</id><snippet>center=None</snippet></ROW><ROW><id>7297075</id><snippet>__init__</snippet></ROW><ROW><id>7297095</id><snippet>keys</snippet></ROW><ROW><id>7297095</id><snippet>values</snippet></ROW><ROW><id>7297095</id><snippet>items</snippet></ROW><ROW><id>7297095</id><snippet>iterkeys</snippet></ROW><ROW><id>7297095</id><snippet>itervalues</snippet></ROW><ROW><id>7297095</id><snippet>iteritems</snippet></ROW><ROW><id>7297394</id><snippet># Tried both port 465 and 587 (can't test port 25 since it's blocked by my ISP)
</snippet></ROW><ROW><id>7297394</id><snippet>EHLO</snippet></ROW><ROW><id>7297729</id><snippet>relationship</snippet></ROW><ROW><id>7297729</id><snippet>res</snippet></ROW><ROW><id>7297729</id><snippet>from sqlalchemy.orm.attributes import manager_of_class
from sqlalchemy.orm.properties import ColumnProperty

def get_state_dict(instance):
    cls = type(instance)
    mgr = manager_of_class(cls)
    return dict((key, getattr(instance, key))
                for key, attr in mgr.iteritems()
                if isinstance(attr.property, ColumnProperty))
</snippet></ROW><ROW><id>7297729</id><snippet>def create_from_state_dict(cls, state_dict):
    mgr = manager_of_class(cls)
    instance = mgr.new_instance()
    for key, value in state_dict.iteritems():
        setattr(instance, key, value)
    return instance
</snippet></ROW><ROW><id>7297729</id><snippet>sqlalchemy.orm.properties.RelationshipProperty</snippet></ROW><ROW><id>7298139</id><snippet>question</snippet></ROW><ROW><id>7298139</id><snippet>answer</snippet></ROW><ROW><id>7298139</id><snippet># To fetch an empty answered question
qry = Calculation.All().filter('answer =', None)
ref = qry.get()

# The Json response
{ 'key': unicode(ref.key()),
  'question': ref.question}
</snippet></ROW><ROW><id>7298139</id><snippet># key and answer are variable from an http GET or POST request.
ref = db.get(key)
ref.answer = answer
ref.put()
</snippet></ROW><ROW><id>7298286</id><snippet>javascript files</snippet></ROW><ROW><id>7298286</id><snippet>params['CORE_SCRIPTS']</snippet></ROW><ROW><id>7298286</id><snippet>{% raw params['CORE_SCRIPTS'] %}
</snippet></ROW><ROW><id>7298386</id><snippet>class Car(models.Model):
    manufacturer = models.ForeignKey('Manufacturer')
    # ...

class Manufacturer(models.Model):
    # ...
</snippet></ROW><ROW><id>7298431</id><snippet>serialized_items = serializers.serialize("json", itemlist, fields=['.....', 'aux_info'])
</snippet></ROW><ROW><id>7298431</id><snippet>__init__</snippet></ROW><ROW><id>7298431</id><snippet>class MyModel(models.Model):
    title = Models.CharField()
    description = Models.TextField()

    def aux_info(self):
        return "I'm not in the database!"
</snippet></ROW><ROW><id>7298547</id><snippet>assert</snippet></ROW><ROW><id>7298547</id><snippet>assert</snippet></ROW><ROW><id>7298547</id><snippet>assert</snippet></ROW><ROW><id>7298547</id><snippet>assert</snippet></ROW><ROW><id>7298711</id><snippet>Documentation/filesystems/proc.txt</snippet></ROW><ROW><id>7298711</id><snippet>USER_HZ</snippet></ROW><ROW><id>7298711</id><snippet>btime</snippet></ROW><ROW><id>7298711</id><snippet>USER_HZ</snippet></ROW><ROW><id>7298939</id><snippet>or</snippet></ROW><ROW><id>7298939</id><snippet>and</snippet></ROW><ROW><id>7298939</id><snippet>"image"</snippet></ROW><ROW><id>7298939</id><snippet>if "image" != 'image' or "image" != 'link':
#if      False        or        True:
#if True:
</snippet></ROW><ROW><id>7298939</id><snippet>if key != 'image' and key != 'link':
</snippet></ROW><ROW><id>7298939</id><snippet>if key not in ('image', 'link'):
</snippet></ROW><ROW><id>7299082</id><snippet>__hash__</snippet></ROW><ROW><id>7299082</id><snippet>__eq__</snippet></ROW><ROW><id>7299082</id><snippet>__str__</snippet></ROW><ROW><id>7299082</id><snippet>str()</snippet></ROW><ROW><id>7299133</id><snippet>    xml_start = html_data.find('&lt;?xml')
    xml_end = html_data.rfind('&lt;/mytag&gt;')
    if xml_start !=0:
        log_user_action(req.get_host() ,'chunked data', html_data, {})
        html_data = html_data[xml_start:]
    if xml_end != len(html_data)-len('&lt;/mytag&gt;')-1:
        html_data = html_data[:xml_end+1]
</snippet></ROW><ROW><id>7299389</id><snippet>QTreeWidget</snippet></ROW><ROW><id>7299389</id><snippet>QAbstractItemView</snippet></ROW><ROW><id>7299389</id><snippet>model()</snippet></ROW><ROW><id>7299389</id><snippet>setModel()</snippet></ROW><ROW><id>7299389</id><snippet>selectionModel()</snippet></ROW><ROW><id>7299389</id><snippet>setSelectionModel()</snippet></ROW><ROW><id>7299419</id><snippet>def get_queryset(self):
    self.shop = Shop.objects.get(name=self.kwargs['shop_name'])
    Offer = self.shop.get_offers_model()
    return Offer.objects.all()
</snippet></ROW><ROW><id>7299419</id><snippet>def get_template_names(self):        
    return ["shop/%s/offer_list" % self.shop.get_type()]
</snippet></ROW><ROW><id>7299829</id><snippet>parse</snippet></ROW><ROW><id>7299829</id><snippet>parse(StringIO(XML))</snippet></ROW><ROW><id>7299861</id><snippet>[(key, value), (key, value), ...]</snippet></ROW><ROW><id>7299861</id><snippet>that_dict = dict(that_list)</snippet></ROW><ROW><id>7299861</id><snippet>set_defaults</snippet></ROW><ROW><id>7299861</id><snippet>parser.set_default(**that_dict)</snippet></ROW><ROW><id>7299972</id><snippet>def wrap(f):
    def enc(*args):
        for item in args:
            f(item)
    return enc
</snippet></ROW><ROW><id>7300115</id><snippet>&gt;&gt;&gt; s = '''
... {
...     orange: '2',
...     apple: '1',
...     lemon: '3'
... }'''
&gt;&gt;&gt; import yaml
&gt;&gt;&gt; yaml.load(s)
{'orange': '2', 'lemon': '3', 'apple': '1'}
</snippet></ROW><ROW><id>7300115</id><snippet>s=s.replace('\t','')
</snippet></ROW><ROW><id>7300222</id><snippet>cleaned_data</snippet></ROW><ROW><id>7300222</id><snippet>clean_quantity</snippet></ROW><ROW><id>7300222</id><snippet>quantity</snippet></ROW><ROW><id>7300224</id><snippet>class TabularSelectMultiple(SelectMultiple):
    def render(self, name, value, attrs=None, choices=()):
        if value is None: value = []
        has_id = attrs and 'id' in attrs
        final_attrs = self.build_attrs(attrs, name=name)
        output = [u'&lt;table&gt;','&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Label&lt;/th&gt;&lt;/tr&gt;']
        # Normalize to strings
        str_values = set([force_unicode(v) for v in value])
        for i, (option_value, option_label) in enumerate(chain(self.choices, choices)):
            if has_id:
                final_attrs = dict(final_attrs, id='%s_%s' % (attrs['id'], i))
                label_for = u' for="%s"' % final_attrs['id']
            else:
                label_for = u''              
            cb = CheckboxInput(final_attrs, check_test=lambda value: value in str_values).render(name, option_value)
            option_value = force_unicode(option_value)
            option_label = conditional_escape(force_unicode(option_label))
            output.append(u'&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;&lt;label%s&gt; %s&lt;/label&gt;&lt;/td&gt;&lt;/tr&gt;' % (cb, label_for, option_label))
        output.append(u'&lt;/table&gt;')
        return mark_safe(u'\n'.join(output))

class HouseForm(forms.ModelForm):
    amenities = ModelMultipleChoiceField(
        queryset=Amenity.objects.all(),
        widget=TabularSelectMultiple(),
        required=False
    )
</snippet></ROW><ROW><id>7300302</id><snippet>None</snippet></ROW><ROW><id>7300302</id><snippet>nodeValue</snippet></ROW><ROW><id>7300302</id><snippet>None</snippet></ROW><ROW><id>7300333</id><snippet>flush()</snippet></ROW><ROW><id>7300333</id><snippet>flush()</snippet></ROW><ROW><id>7300417</id><snippet>class RssFeed(Base):
    __tablename__ = 'rssfeeds'
    id = Column(Integer, primary_key=True)
    url = Column(String)
</snippet></ROW><ROW><id>7300417</id><snippet>feed = RssFeed(url='http://url/for/feed')
session.add(feed)
</snippet></ROW><ROW><id>7300417</id><snippet>session.query(RssFeed).all()
</snippet></ROW><ROW><id>7300417</id><snippet>session.query(RssFeed).get(1)
</snippet></ROW><ROW><id>7300491</id><snippet>rm mainapp/migrations/*</snippet></ROW><ROW><id>7300491</id><snippet>mv mainapp/models.py .; rm mainapp/*.pyc; touch mainapp/models.py</snippet></ROW><ROW><id>7300491</id><snippet>python ./manage.py schemamigration mainapp --initial</snippet></ROW><ROW><id>7300491</id><snippet>python ./manage.py migrate mainapp</snippet></ROW><ROW><id>7300491</id><snippet>rm mainapp/models.py; mv models.py mainapp/; python ./manage.py schemamigration mainapp --auto</snippet></ROW><ROW><id>7300491</id><snippet>python ./manage.py migrate mainapp</snippet></ROW><ROW><id>7300603</id><snippet>None</snippet></ROW><ROW><id>7300603</id><snippet>class Indicator:
    number_of_dots = 5

    class Dots:
        def __init__(self, number = None):
            if number is None:
                number = Indicator.number_of_dots

            self._current        = 0
            self._number_of_dots = number
</snippet></ROW><ROW><id>7300603</id><snippet>self._number_of_dots = number or Indicator.number_of_dots</snippet></ROW><ROW><id>7300603</id><snippet>0</snippet></ROW><ROW><id>7300603</id><snippet>def __init__(self, **kwargs)</snippet></ROW><ROW><id>7300603</id><snippet>kwargs.pop('number', Indicator.number_of_dots)</snippet></ROW><ROW><id>7300619</id><snippet>--download-cache</snippet></ROW><ROW><id>7300619</id><snippet>pip install --download-cache="/pth/to/downloaded/files" package
</snippet></ROW><ROW><id>7300619</id><snippet>tar.gz</snippet></ROW><ROW><id>7300619</id><snippet>--download</snippet></ROW><ROW><id>7300619</id><snippet>--download</snippet></ROW><ROW><id>7300619</id><snippet>pip install --download="/pth/to/downloaded/files" package
</snippet></ROW><ROW><id>7300619</id><snippet>pip</snippet></ROW><ROW><id>7300619</id><snippet>--download</snippet></ROW><ROW><id>7300798</id><snippet>twisted.internet.test.reactormixins.ReactorBuilder</snippet></ROW><ROW><id>7300798</id><snippet>test_tcp</snippet></ROW><ROW><id>7300966</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>7301126</id><snippet>list.sort</snippet></ROW><ROW><id>7301126</id><snippet>newList.sort()
return newList
</snippet></ROW><ROW><id>7301130</id><snippet>favourite = raw_input(' or '.join(animals))
</snippet></ROW><ROW><id>7301130</id><snippet>animals</snippet></ROW><ROW><id>7301130</id><snippet>or</snippet></ROW><ROW><id>7301130</id><snippet>favourite = raw_input(' or '.join(animals) + '? ')
</snippet></ROW><ROW><id>7301130</id><snippet>if favourite = "Lion':
</snippet></ROW><ROW><id>7301130</id><snippet>==</snippet></ROW><ROW><id>7301130</id><snippet>=</snippet></ROW><ROW><id>7301130</id><snippet>animal_string = ' or '.join(animals)
favourite = raw_input("Which of these animals is your favourite:\n{}? ".format(animal_string))
</snippet></ROW><ROW><id>7301130</id><snippet>\n</snippet></ROW><ROW><id>7301130</id><snippet>?</snippet></ROW><ROW><id>7301182</id><snippet>import random
def rand_sum(i, j):    
    sum_list = []
    for rand_num in range(i, j+1):
        sum_list.append(random.random()) # Check random docs for a function that returns
    return sum(sum_list)                 # a different set of randoms if this isn't 
                                         # appropriate
</snippet></ROW><ROW><id>7301218</id><snippet>rand_func</snippet></ROW><ROW><id>7301218</id><snippet>import tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.frame = tk.Frame(self)
        self.frame.pack()
        self.button = tk.Button(self.frame, text="click me",
                             command=lambda a=1, b=2, c=3: 
                                self.rand_func(a, b, c))
        self.button.pack()
        self.frame.bind("&lt;Return&gt;", 
                        lambda event, a=10, b=20, c=30: 
                            self.rand_func(a, b, c))
        # make sure the frame has focus so the binding will work
        self.frame.focus_set()

    def rand_func(self, a, b, c):
        print "self:", self, "a:", a, "b:", b, "c:", c
        print (a+b+c)

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>7301250</id><snippet>Frame</snippet></ROW><ROW><id>7301250</id><snippet>Button</snippet></ROW><ROW><id>7301250</id><snippet>Canvas</snippet></ROW><ROW><id>7301250</id><snippet>Label</snippet></ROW><ROW><id>7301250</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>7301250</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>7301250</id><snippet>tk</snippet></ROW><ROW><id>7301250</id><snippet>import Tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.label = tk.Label(text="Hello, world")
        self.label.pack(padx=10, pady=10)

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>7301250</id><snippet>Frame</snippet></ROW><ROW><id>7301250</id><snippet>Tk</snippet></ROW><ROW><id>7301250</id><snippet>Frame</snippet></ROW><ROW><id>7301250</id><snippet>Tk</snippet></ROW><ROW><id>7301250</id><snippet>Frame</snippet></ROW><ROW><id>7301250</id><snippet>Tk</snippet></ROW><ROW><id>7301250</id><snippet>Frame</snippet></ROW><ROW><id>7301250</id><snippet>Toplevel</snippet></ROW><ROW><id>7301342</id><snippet>def removeVowels(word):
    letters = []            # make an empty list to hold the non-vowels
    for char in word:       # for each character in the word
        if char.lower() not in 'aeiou':    # if the letter is not a vowel
            letters.append(char)           # add it to the list of non-vowels
    return ''.join(letters) # join the list of non-vowels together into a string
</snippet></ROW><ROW><id>7301342</id><snippet>''.join(char for char in word if char.lower() not in 'aeiou')
</snippet></ROW><ROW><id>7301342</id><snippet>join</snippet></ROW><ROW><id>7301342</id><snippet>set</snippet></ROW><ROW><id>7301342</id><snippet>''.join(char for char in word if char not in set('aeiouAEIOU'))
</snippet></ROW><ROW><id>7301384</id><snippet>comment</snippet></ROW><ROW><id>7301384</id><snippet>def comment(request):
    commentlist = []
    comment = ''
</snippet></ROW><ROW><id>7301384</id><snippet>get_comment()</snippet></ROW><ROW><id>7301384</id><snippet>commentlist</snippet></ROW><ROW><id>7301384</id><snippet>GET</snippet></ROW><ROW><id>7301384</id><snippet>    else: #form invalid
        commentlist = ['bad form']
else:
    form = CommentForm()
    commentlist = ['testing']
</snippet></ROW><ROW><id>7301384</id><snippet>comment</snippet></ROW><ROW><id>7301384</id><snippet>commentlist</snippet></ROW><ROW><id>7301384</id><snippet>initialData = ({'form': form, 'commentlist': commentlist}
</snippet></ROW><ROW><id>7301384</id><snippet>comment</snippet></ROW><ROW><id>7301384</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>7301384</id><snippet>commentlist</snippet></ROW><ROW><id>7301384</id><snippet>render_to_response</snippet></ROW><ROW><id>7301384</id><snippet>commentlist</snippet></ROW><ROW><id>7301384</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>7301384</id><snippet>render_to_response</snippet></ROW><ROW><id>7301747</id><snippet>import urllib2

request = urllib2.Request('http://maps.google.com/maps/feeds/maps/default/full')
request.add_header('Authorization', 'GoogleLogin auth=%s' % authorization_token)
urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>7301754</id><snippet>def commonElements(a1, a2):
    L = []
    for el in a1:
        if el in a2:
            L.append(el)
    return tuple(L)
</snippet></ROW><ROW><id>7301754</id><snippet>a1</snippet></ROW><ROW><id>7301754</id><snippet>O(n*m)</snippet></ROW><ROW><id>7301754</id><snippet>n</snippet></ROW><ROW><id>7301754</id><snippet>m</snippet></ROW><ROW><id>7301754</id><snippet>a1</snippet></ROW><ROW><id>7301754</id><snippet>a2</snippet></ROW><ROW><id>7301754</id><snippet>O(n*log(m))</snippet></ROW><ROW><id>7301754</id><snippet>bisect</snippet></ROW><ROW><id>7301754</id><snippet>a2</snippet></ROW><ROW><id>7301754</id><snippet>def commonElements(a1, a2):
    return tuple(sorted(set(a1).intersection(set(a2))))
</snippet></ROW><ROW><id>7301754</id><snippet>O(min(m+n)*log(min(n+m)))</snippet></ROW><ROW><id>7301754</id><snippet>O(n*m)</snippet></ROW><ROW><id>7301754</id><snippet>set</snippet></ROW><ROW><id>7301754</id><snippet>def commonElements(a1, a2):
    L = []
    for el in a1:
        if el in a2:
            L.append(el)
    L.sort()
    return tuple(L)
</snippet></ROW><ROW><id>7301754</id><snippet>O(n*m)</snippet></ROW><ROW><id>7301754</id><snippet>bisect</snippet></ROW><ROW><id>7301754</id><snippet>from bisect import bisect_left
def commonElements(a1, a2):
   L = []
   a2.sort() #sort a2 to be able to use binary search in the internal loop thus changing the complexity from O(n^2) to O(n*log(n)) (assuming n and m are rather equal).
   a2_len = len(a2)
   for el in a1:
       i = bisect_left(a2, el)
       if i != a2_len and a2[i] == el:
           L.append(x)
   # L.sort() #uncomment this line if the list in sorted order is needed (not just ordered as the first lits; it's possible to sort a1 in the very beginning of the function, but that would be slower on the average since L is smaller on the average than a1 or a2 (since L is their intersection).
   return tuple(L)
</snippet></ROW><ROW><id>7301754</id><snippet>O(n*log(m))</snippet></ROW><ROW><id>7301842</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>7301842</id><snippet>&lt;(?!br/&gt;)</snippet></ROW><ROW><id>7301842</id><snippet>&lt;</snippet></ROW><ROW><id>7301842</id><snippet>(?&lt;!&lt;br/)&gt;</snippet></ROW><ROW><id>7301842</id><snippet>&gt;</snippet></ROW><ROW><id>7301842</id><snippet>text = re.sub( '&lt;(?!br/&gt;)' , '&lt;' , text )
text = re.sub( '(?&lt;!&lt;br/)&gt;' , '&gt;' , text )
</snippet></ROW><ROW><id>7301842</id><snippet>(?!</snippet></ROW><ROW><id>7301842</id><snippet>)</snippet></ROW><ROW><id>7301842</id><snippet>(?&lt;!</snippet></ROW><ROW><id>7301842</id><snippet>)</snippet></ROW><ROW><id>7301842</id><snippet>(?&lt;!&lt;br\s*/?)&gt;</snippet></ROW><ROW><id>7302077</id><snippet>pickle</snippet></ROW><ROW><id>7302078</id><snippet>FakeFile.ALLOWED_MODES</snippet></ROW><ROW><id>7302078</id><snippet>from google.appengine.tools import dev_appserver
allowed_modes = dev_appserver.FakeFile.ALLOWED_MODES
dev_appserver.FakeFile.ALLOWED_MODES = frozenset(['w'])
f = open('test.txt', 'w')
f.write('this is a test')
f.close()
dev_appserver.FakeFile.ALLOWED_MODES = allowed_modes
</snippet></ROW><ROW><id>7302381</id><snippet>In [70]: import dateutil.parser as parser
In [71]: parser.parse('Sunday 31st of July 2005 ( 02:05:50 PM )',fuzzy=True)
Out[71]: datetime.datetime(2005, 7, 31, 14, 5, 50)
</snippet></ROW><ROW><id>7302381</id><snippet>re</snippet></ROW><ROW><id>7302381</id><snippet>strptime</snippet></ROW><ROW><id>7302381</id><snippet>In [89]: datetime.datetime.strptime(re.sub(r'\w+ (\d+)\w+ of(.+)\s+\( (.+) \)',r'\1 \2 \3','Sunday 31st of July 2005 ( 02:05:50 PM )'),'%d %B %Y %I:%M:%S %p')
Out[89]: datetime.datetime(2005, 7, 31, 14, 5, 50)
</snippet></ROW><ROW><id>7302429</id><snippet>def removeDups(duptest, iterable):
  res = []
  for e in iterable:
    if not any(duptest(e, r) for r in res):
       res.append(e)
  return res
</snippet></ROW><ROW><id>7302429</id><snippet>&gt;&gt;&gt; removeDups(lambda x,y: x+y == 10, [2,3,5,7,8])
[2, 3, 5]
&gt;&gt;&gt; removeDups(lambda x,y: x+y == 10, [2,3,6,7,8])
[2, 3, 6]
&gt;&gt;&gt; removeDups(lambda x, y: x+y == 12, [2, 3, 6, 9, 10])
[2, 3, 6]
</snippet></ROW><ROW><id>7302705</id><snippet># coding: utf-8

import urllib2, urllib, re, getpass

username = 'heltonbiker'
senha = getpass.getpass('Senha do usuário ' + username + ':')

dic = {
        'accountType':      'GOOGLE',
        'Email':            (username + '@gmail.com'),
        'Passwd':           senha,
        'service':          'local',
        'source':           'helton-mapper-1'
        }
url = 'https://www.google.com/accounts/ClientLogin?' + urllib.urlencode(dic)
output = urllib2.urlopen(url).read()
authid = output.strip().split('\n')[-1].split('=')[-1]

request = urllib2.Request('http://maps.google.com/maps/feeds/maps/default/full')
request.add_header('Authorization', 'GoogleLogin auth=%s' % authid)
source = urllib2.urlopen(request).read()

for link in re.findall('&lt;link rel=.alternate. type=.text/html. href=((.)[^\1]*?)&gt;', source):
    s = link[0]
    if 'msa=0' in s:
        print s
</snippet></ROW><ROW><id>7302806</id><snippet>&gt;&gt;&gt; l = [('a','b'),('c','d'),('e','f')]
&gt;&gt;&gt; l[0] = ('a','B')
&gt;&gt;&gt; print l
[('a', 'B'), ('c', 'd'), ('e', 'f')]
</snippet></ROW><ROW><id>7302806</id><snippet>[(key, new_value) if x[0] == key else x for x in l]
</snippet></ROW><ROW><id>7302857</id><snippet>set('czk').issubset(s)
</snippet></ROW><ROW><id>7302919</id><snippet>CharField</snippet></ROW><ROW><id>7302919</id><snippet>TextField</snippet></ROW><ROW><id>7302919</id><snippet>TextField</snippet></ROW><ROW><id>7302919</id><snippet>CharField</snippet></ROW><ROW><id>7302919</id><snippet>widget=forms.Textarea</snippet></ROW><ROW><id>7302919</id><snippet>Textarea</snippet></ROW><ROW><id>7302991</id><snippet>height</snippet></ROW><ROW><id>7302991</id><snippet>measure</snippet></ROW><ROW><id>7303214</id><snippet>'/site_media/myapp/'</snippet></ROW><ROW><id>7303214</id><snippet>'/home/me/dev/python/django/myproject/mysite/media/'</snippet></ROW><ROW><id>7303214</id><snippet>/site_media/myapp/css/mystyle.css</snippet></ROW><ROW><id>7303214</id><snippet>'/home/me/dev/python/django/myproject/mysite/media/css/mystyle.css'</snippet></ROW><ROW><id>7303214</id><snippet>/site_meda/</snippet></ROW><ROW><id>7303214</id><snippet>'/home/me/dev/python/django/myproject/mysite/media/myapp</snippet></ROW><ROW><id>7303424</id><snippet>data = [1,10,100]
itertools.chain(*((x,log10(x)) for x in data))
</snippet></ROW><ROW><id>7303471</id><snippet>__slots__</snippet></ROW><ROW><id>7303471</id><snippet>__dict__</snippet></ROW><ROW><id>7303471</id><snippet>__hash__()</snippet></ROW><ROW><id>7303471</id><snippet>class SomeBigClass():
    @staticmethod
    def swap_dict(instance_a, instance_b):
        instance_a.__dict__, instance_b.__dict__ = \
                instance_b.__dict__, instance_a.__dict__
    @classmethod
    def swap_slot(cls, instance_a, instance_b):
        values = []
        for attr in cls.__slots__:
            values.append(
                (attr,
                 getattr(instance_a, attr),
                 getattr(instance_b, attr),
                 ))
        for attr, val1, val2 in values:
            setattr(instance_a, attr, val2)
            setattr(instance_b, attr, val1)
</snippet></ROW><ROW><id>7303471</id><snippet>SomeBigClass.swap_dict(this_instance, other_instance)
</snippet></ROW><ROW><id>7303471</id><snippet>SomeBigClass.swap_slot(this_instance, other_instance)
</snippet></ROW><ROW><id>7303471</id><snippet>frubbah = SomeBigClass(attr="Hi, Mom!")
zikroid = SomeBigClass(attr='Hi, Dad!")
SomeBigClass.swap_dict(frubbah, zikroid)
</snippet></ROW><ROW><id>7303497</id><snippet>// You want to write
for (x &lt;- xs) { /* complex yield in here */ }
// Instead you write
xs.iterator.flatMap { /* Produce iterators in here */ }

// You want to write
yield(a)
yield(b)
// Instead you write
Iterator(a,b)

// You want to write
yield(a)
/* complex set of yields in here */
// Instead you write
Iterator(a) ++ /* produce complex iterator here */
</snippet></ROW><ROW><id>7303497</id><snippet>Source.fromFile(file).getLines().flatMap(x =&gt;
  Iterator("something") ++
  ":".r.split(x).iterator.flatMap(field =&gt;
    if (field contains "/") "/".r.split(field).iterator
    else {
      if (!field.startsWith("#")) {
        /* vals, whatever */
        if (some_calculation &amp;&amp; field.startsWith("r")) Iterator("r",field.slice(1))
        else Iterator(field)
      }
      else Iterator.empty
    }
  )
)
</snippet></ROW><ROW><id>7303497</id><snippet>import scala.util.control.Breaks._
for (blah) { breakable { ... break ... } }
</snippet></ROW><ROW><id>7303525</id><snippet>localhost-2:~ $ cat startup.py 
from __future__ import print_function
from __future__ import division
localhost-2:~ $ export PYTHONSTARTUP=""
localhost-2:~ $ python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1/2
0
&gt;&gt;&gt; print("fred",end=",")
  File "&lt;stdin&gt;", line 1
    print("fred",end=",")
                    ^
SyntaxError: invalid syntax
&gt;&gt;&gt; ^D
localhost-2:~ $ export PYTHONSTARTUP=startup.py
localhost-2:~ $ python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1/2
0.5
&gt;&gt;&gt; print("fred",end=",")
fred,&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7303587</id><snippet>smtplib</snippet></ROW><ROW><id>7303587</id><snippet>stderr</snippet></ROW><ROW><id>7303587</id><snippet>print&gt;&gt;stderr, 'connect fail:', host
</snippet></ROW><ROW><id>7303587</id><snippet>smtplib</snippet></ROW><ROW><id>7303587</id><snippet>smtplib.stderr</snippet></ROW><ROW><id>7303587</id><snippet>smtplib.stderr</snippet></ROW><ROW><id>7303587</id><snippet>write</snippet></ROW><ROW><id>7303587</id><snippet>import logging
import smtp

class StderrLogger(object):

    def __init__(self):
        self.logger = logging.getLogger('mail')

    def write(self, message):
        self.logger.debug(message)

org_stderr = smtp.stderr
smtp.stderr = StderrLogger()

# do your smtp stuff

smtp.stderr = org_stderr
</snippet></ROW><ROW><id>7304165</id><snippet>f=  'C:\\X\\Data\\foo.txt'
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename(f)
'foo.txt'
&gt;&gt;&gt; os.path.dirname(f)
'C:\\X\\Data'
&gt;&gt;&gt; os.path.splitext( f )
('C:\\X\\Data\\foo', '.txt')
&gt;&gt;&gt; os.path.splitext( os.path.basename(f))
('foo', '.txt')
</snippet></ROW><ROW><id>7304300</id><snippet>from sqlalchemy.orm.attributes import manager_of_class
dummy_table = manager_of_class(Dummy).mapper.mapped_table
</snippet></ROW><ROW><id>7304300</id><snippet>for col in dummy_table.columns:
    dummy = session.query(Dummy).filter(col == 0).first()
</snippet></ROW><ROW><id>7304300</id><snippet>getattr</snippet></ROW><ROW><id>7304300</id><snippet>for i in range(1, N):
    c_name = 'c%d' % i
    dummy = DBSession().query(Dummy).filter(getattr(Dummy, c_name) == 0).first()
</snippet></ROW><ROW><id>7305070</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; m = {'a': 2, 'b': 1, 'c': 2, 'd': 1}
&gt;&gt;&gt; dd = defaultdict(list)
&gt;&gt;&gt; for k, v in m.iteritems():
...     dd[v].append(k)
... 
&gt;&gt;&gt; dict(dd)
{1: ['b', 'd'], 2: ['a', 'c']}
</snippet></ROW><ROW><id>7305371</id><snippet>bottle.BaseResponse</snippet></ROW><ROW><id>7305371</id><snippet>BaseResponse</snippet></ROW><ROW><id>7306068</id><snippet>.stop()</snippet></ROW><ROW><id>7306068</id><snippet>self.urlopen.stop()
# points to the real `urlopen()` now
urllib2.urlopen()
# put the patch in place again
self.urlopen.start()
</snippet></ROW><ROW><id>7306123</id><snippet>sqlite:////Users/tyre77/OmniCloud/database.db</snippet></ROW><ROW><id>7306221</id><snippet>'mv' '*.pdf' 'test.pdf'
</snippet></ROW><ROW><id>7306221</id><snippet>'mv' *.pdf 'test.pdf'
</snippet></ROW><ROW><id>7306221</id><snippet>*</snippet></ROW><ROW><id>7306221</id><snippet>mv</snippet></ROW><ROW><id>7306221</id><snippet>glob</snippet></ROW><ROW><id>7306639</id><snippet>python "__threshold__"</snippet></ROW><ROW><id>7306639</id><snippet>__this_format__</snippet></ROW><ROW><id>7307218</id><snippet>#!/usr/bin/env python
# example filechooser.py

import pygtk
pygtk.require('2.0')

import gtk

dialog = gtk.FileChooserDialog("Open..", None,
                           gtk.FILE_CHOOSER_ACTION_OPEN,
                           (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                            gtk.STOCK_OPEN, gtk.RESPONSE_OK))
dialog.set_default_response(gtk.RESPONSE_OK)


##      here it is
##
for child in dialog.get_children():
    for enf in child.get_children():
    if isinstance(enf, gtk.HButtonBox):
        for butt in enf.get_children():
            style = butt.get_style().copy ()
            style.bg[gtk.STATE_NORMAL] = butt.get_colormap().alloc (0xffff, 0x0000, 0x0000)
            butt.set_style (style)
##

response = dialog.run()
if response == gtk.RESPONSE_OK:
    print dialog.get_filename(), 'selected'
elif response == gtk.RESPONSE_CANCEL:
    print 'Closed, no files selected'
dialog.destroy()
</snippet></ROW><ROW><id>7307325</id><snippet>multiprocessing.Pool.map*</snippet></ROW><ROW><id>7307325</id><snippet>grouper_nofill</snippet></ROW><ROW><id>7307325</id><snippet>def grouper_nofill(n, iterable):
    '''list(grouper_nofill(3, 'ABCDEFG')) --&gt; [['A', 'B', 'C'], ['D', 'E', 'F'], ['G']]
    '''
    it=iter(iterable)
    def take():
        while 1: yield list(itertools.islice(it,n))
    return iter(take().next,[])

chunksize=256
async_results=[]
for finput in grouper_nofill(chunksize,itertools.izip(matrices, inds)):
    async_results.extend(pool.map_async(myfunc, finput).get())
async_results=np.array(async_results)
</snippet></ROW><ROW><id>7307325</id><snippet>pool.map_async</snippet></ROW><ROW><id>7307325</id><snippet>chunksize</snippet></ROW><ROW><id>7307325</id><snippet>map(func,chunk)</snippet></ROW><ROW><id>7307325</id><snippet>func(item)</snippet></ROW><ROW><id>7307325</id><snippet>map_async</snippet></ROW><ROW><id>7307415</id><snippet>flickrapi</snippet></ROW><ROW><id>7307415</id><snippet> from xml.etree import ElementTree
</snippet></ROW><ROW><id>7307415</id><snippet>print ElementTree.tostring(favs)
</snippet></ROW><ROW><id>7307415</id><snippet>&lt;rsp stat="ok"&gt;
&lt;photosets page="1" pages="1" perpage="80" total="80"&gt;
    &lt;photoset .../&gt;
    &lt;photoset .../&gt;
    &lt;photoset .../&gt;
    &lt;photoset ...&gt;
&lt;/photosets&gt;
&lt;/rsp&gt;
</snippet></ROW><ROW><id>7307415</id><snippet>page</snippet></ROW><ROW><id>7307415</id><snippet>&lt;photoset&gt;</snippet></ROW><ROW><id>7307415</id><snippet>for elm in favs.getchildren()[0]:
    print ElementTree.tostring(elm)
</snippet></ROW><ROW><id>7307415</id><snippet>photoset</snippet></ROW><ROW><id>7307415</id><snippet>&lt;photoset can_comment="1"
          count_comments="0"
          count_views="34"
          date_create="1156703089"
          date_update="1297462539"
          farm="1"
          id="72157594253605858"
          needs_interstitial="0"
          photos="73" primary="226222345"
          secret="63fde66413"
          server="62"
          videos="0"
          visibility_can_see_set="1"&gt;
    &lt;title&gt;Birds&lt;/title&gt;
    &lt;description /&gt;
&lt;/photoset&gt;
</snippet></ROW><ROW><id>7307415</id><snippet>title</snippet></ROW><ROW><id>7307415</id><snippet>for elm in favs.getchildren()[0]:
    title = elm.getchildren()[0].text
    print ("id: %s secret: %s setname: %s") %(elm.get('id'), elm.get('secret'), title) 
</snippet></ROW><ROW><id>7307415</id><snippet>id: 72157600139832705 secret: 4e884f3523 setname: French Creek State Park
id: 72157600047937451 secret: d3c84ed8df setname: Las Vegas
id: 72157594253605858 secret: 63fde66413 setname: Birds
</snippet></ROW><ROW><id>7307940</id><snippet>handlers: 
- url: /dailybasic   
  script: dailybasic/dailybasic.py 
</snippet></ROW><ROW><id>7307940</id><snippet>/</snippet></ROW><ROW><id>7307940</id><snippet>- url: /
  static_files: index.html
  upload: index.html
</snippet></ROW><ROW><id>7308393</id><snippet> '%10s'    %'*'*x
</snippet></ROW><ROW><id>7308393</id><snippet>('%10s' % '*') * x
</snippet></ROW><ROW><id>7308393</id><snippet>%</snippet></ROW><ROW><id>7308393</id><snippet>*</snippet></ROW><ROW><id>7308393</id><snippet>x = 1
while x &lt; 10:
    print '%10s' % ('*' * x)
    x = x + 1
</snippet></ROW><ROW><id>7308393</id><snippet>for</snippet></ROW><ROW><id>7308393</id><snippet>for x in range(1, 10):
    print '%10s' % ('*' * x)
</snippet></ROW><ROW><id>7308393</id><snippet>for x in range(0, 10)</snippet></ROW><ROW><id>7308393</id><snippet>for(int x = 0; x &lt; 10; x++)</snippet></ROW><ROW><id>7308757</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7308757</id><snippet>sys.path</snippet></ROW><ROW><id>7308757</id><snippet>os.environ</snippet></ROW><ROW><id>7309471</id><snippet>#!/usr/bin/python

import gtk

class PyApp(gtk.Window):

    def __init__(self):
        super(PyApp, self).__init__()

        self.set_title("Simple menu")
        self.set_size_request(250, 200)
        self.modify_bg(gtk.STATE_NORMAL, gtk.gdk.Color(6400, 6400, 6440))
        self.set_position(gtk.WIN_POS_CENTER)

        mb = gtk.MenuBar()

        filemenu = gtk.Menu()
        filem = gtk.MenuItem("File")
        filem.set_submenu(filemenu)

        exit = gtk.MenuItem("Exit")
        style = exit.get_style().copy ()
        style.bg[gtk.STATE_NORMAL] = exit.get_colormap().alloc_color (0xffff, 0x0000, 0x0000)
        exit.set_style (style)

        exit.connect("activate", gtk.main_quit)
        filemenu.append(exit)

        mb.append(filem)

        vbox = gtk.VBox(False, 2)
        vbox.pack_start(mb, False, False, 0)

        self.add(vbox)

        self.connect("destroy", gtk.main_quit)
        self.show_all()

PyApp()
gtk.main()
</snippet></ROW><ROW><id>7309824</id><snippet>re.sub(r'(&lt;form.*?action=")([^"]+)', r'\1newlogin.php',  content)
</snippet></ROW><ROW><id>7310072</id><snippet>FILE *</snippet></ROW><ROW><id>7310072</id><snippet>FILE</snippet></ROW><ROW><id>7310072</id><snippet>flush()</snippet></ROW><ROW><id>7310072</id><snippet>FILE</snippet></ROW><ROW><id>7310500</id><snippet>chmod +x class-dump</snippet></ROW><ROW><id>7310500</id><snippet>print " ".join(command)
</snippet></ROW><ROW><id>7310538</id><snippet>encode</snippet></ROW><ROW><id>7310538</id><snippet>decode</snippet></ROW><ROW><id>7310538</id><snippet>chatter</snippet></ROW><ROW><id>7310538</id><snippet>msgtext</snippet></ROW><ROW><id>7310538</id><snippet>.encode</snippet></ROW><ROW><id>7310589</id><snippet>list_dates = [datetime.date(2012,1,3), datetime.date(2012,1,1), datetime.date(2012,1,5), datetime.date(2013,1,3), datetime.date(2013,1,1)]        

for item in list_dates:
            if item &lt; datetime.date(2012,1,1):
                new_list_dates.add(item); // move this item (which you want to keep) to a new list.

    print new_list_dates
</snippet></ROW><ROW><id>7310778</id><snippet>start</snippet></ROW><ROW><id>7310778</id><snippet>value</snippet></ROW><ROW><id>7310778</id><snippet>step</snippet></ROW><ROW><id>7310778</id><snippet>maxvalue</snippet></ROW><ROW><id>7310778</id><snippet>value</snippet></ROW><ROW><id>7310778</id><snippet>import Tkinter as tk
import ttk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.button = ttk.Button(text="start", command=self.start)
        self.button.pack()
        self.progress = ttk.Progressbar(self, orient="horizontal", 
                                        length=200, mode="determinate")
        self.progress.pack()

        self.bytes = 0
        self.maxbytes = 0

    def start(self):
        self.progress["value"] = 0
        self.maxbytes = 50000
        self.progress["maximum"] = 50000
        self.read_bytes()

    def read_bytes(self):
        '''simulate reading 500 bytes; update progress bar'''
        self.bytes += 500
        self.progress["value"] = self.bytes
        if self.bytes &lt; self.maxbytes:
            # read more bytes after 100 ms
            self.after(100, self.read_bytes)

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>7310982</id><snippet>ESC</snippet></ROW><ROW><id>7310982</id><snippet>q</snippet></ROW><ROW><id>7311240</id><snippet>{% for entry in entries_list %}
        &lt;i&gt;&lt;b&gt;Name:&lt;/i&gt;&lt;/b&gt; {{ entry.name }}&lt;br&gt;
        &lt;img src="/images{{ entry.picture }}" height="300" width="300"&gt;&lt;/img&gt;&lt;br&gt;
        &lt;i&gt;&lt;b&gt;Ingredients:&lt;/i&gt;&lt;/b&gt; {{ entry.ingredients }}&lt;br&gt;
        &lt;p&gt;&lt;i&gt;{{ entry.description }}&lt;/i&gt;&lt;/p&gt;
        &lt;i&gt;&lt;b&gt;Created by:&lt;/i&gt;&lt;/b&gt; {{ entry.user }}&lt;br&gt;&lt;br&gt;
{% endfor %}
</snippet></ROW><ROW><id>7311240</id><snippet>entries_list = Recipes.objects.order_by('-id')[0:10]
</snippet></ROW><ROW><id>7311467</id><snippet>&gt;&gt;&gt; byte_string = 'F\xe9vrier'
&gt;&gt;&gt; byte_string.decode('UTF-8')
u'Février'
</snippet></ROW><ROW><id>7311506</id><snippet>os.path</snippet></ROW><ROW><id>7311506</id><snippet>sys.path</snippet></ROW><ROW><id>7311626</id><snippet>import logging
import random

class Debug(object):
    @property
    def ThreadAwareLogger(self):
        loggers = [logging.getLogger('abc'),logging.getLogger('def')]
        return self.anotherDebugMethod(loggers)
    def anotherDebugMethod(self,loggers):
        return random.choice(loggers)
class SomeOtherClass(object):
    def __init__(self):
        self.debug=Debug()
    @property
    def logger(self):
        return self.debug.ThreadAwareLogger
    def otherMethod(self):
        self.logger.info('Message')

if __name__=='__main__':
    logging.basicConfig(level=logging.DEBUG)    
    x=SomeOtherClass()
    for i in range(5):
        x.otherMethod()
</snippet></ROW><ROW><id>7311626</id><snippet>INFO:def:Message
INFO:abc:Message
INFO:def:Message
INFO:def:Message
INFO:abc:Message
</snippet></ROW><ROW><id>7311626</id><snippet>abc</snippet></ROW><ROW><id>7311626</id><snippet>def</snippet></ROW><ROW><id>7311626</id><snippet>Debug.ThreadAwareLogger</snippet></ROW><ROW><id>7311817</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7311817</id><snippet>from threading import Thread
from Queue import Queue


def produce(queue, n_items):
    for d in range(n_items):
        queue.put(d)
        print "put {0} in queue".format(d)

def consume(queue, n_items):
    d = 0
    while d != n_items -1: # You need some sort of stop condition
        d = queue.get()
        print "got {0} from queue".format(d)

def start_producer_and_consumer(wait):
    q = Queue()
    consumer_thread = Thread(target = consume, args = (q, 10))
    producer_thread = Thread(target = produce, args = (q, 10))
    producer_thread.start()
    consumer_thread.start()
    if wait:
        producer_thread.join()
        consumer_thread.join()

if __name__ == '__main__':
    start_producer_and_consumer(True)
</snippet></ROW><ROW><id>7312355</id><snippet>@</snippet></ROW><ROW><id>7312355</id><snippet>class WindowImpl (QtGui.QMainWindow, Ui_TremorMain, Ui_Graphs):
  def __init__ (self, buffer, parent = None, configuration = None):
    # do some initialisation here (not GUI setup however)

  @QtCore.pyqtSlot(int, name="on_confSelectorCombo_currentIndexChanged")
  def confChanged (self, newConf):
    # do some stuff here to handle the event
</snippet></ROW><ROW><id>7312355</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>7312355</id><snippet>confSelectorCombo</snippet></ROW><ROW><id>7312355</id><snippet>confSelectorCombo</snippet></ROW><ROW><id>7312355</id><snippet>Qt Creator</snippet></ROW><ROW><id>7312355</id><snippet>If you have not set a font for your application then the default font on your
machine will be used, and the default font can be different on different
machines. On Windows the default Windows font is used, on X11 the one in qtrc
can be used. If a default font can’t be found, then a font specified by Qt
will be used.
</snippet></ROW><ROW><id>7312355</id><snippet>QStyleSheet</snippet></ROW><ROW><id>7312355</id><snippet>QStyle</snippet></ROW><ROW><id>7312355</id><snippet>QTime dieTime = QTime::currentTime().addSecs(2);
while( QTime::currentTime() &lt; dieTime ):
  QCoreApplication::processEvents(QEventLoop::AllEvents, 100);
</snippet></ROW><ROW><id>7312355</id><snippet>QThread.sleep()</snippet></ROW><ROW><id>7312355</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>7312355</id><snippet>QGraphicsView</snippet></ROW><ROW><id>7312355</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>7312355</id><snippet>QGraphicsView</snippet></ROW><ROW><id>7312355</id><snippet>QPainter</snippet></ROW><ROW><id>7312355</id><snippet>QGraphicsItem</snippet></ROW><ROW><id>7312355</id><snippet>includes defining the item's geometry, collision detection, its painting     
implementation and item interaction through its event handlers
</snippet></ROW><ROW><id>7312355</id><snippet>Context2D</snippet></ROW><ROW><id>7312355</id><snippet>Context2D</snippet></ROW><ROW><id>7312355</id><snippet>Context2DCanvas</snippet></ROW><ROW><id>7312389</id><snippet>scrapy crawl thespider 
</snippet></ROW><ROW><id>7312389</id><snippet>scrapy crawl thespider --set SCHEDULER_DIR=run1 
</snippet></ROW><ROW><id>7312389</id><snippet>scrapy crawl thespider --set SCHEDULER_DIR=run1 
</snippet></ROW><ROW><id>7312418</id><snippet>from django.tests import TestCase

class MyTests(TestCase):
    def test_forms(self):
        response = self.client.post("/my/form/", {'something':'something'})
        self.assertFormError(response, 'form', 'something', 'This field is required.')
</snippet></ROW><ROW><id>7312678</id><snippet>range(-3,4)
# [-3, -2, -1, 0, 1, 2, 3]
</snippet></ROW><ROW><id>7312886</id><snippet>PyRun_AnyFile*()</snippet></ROW><ROW><id>7313079</id><snippet>xml.etree</snippet></ROW><ROW><id>7313079</id><snippet>ET.register_namespace('rev': 'http://schemas.example.com/search/query/2010/5/revision')</snippet></ROW><ROW><id>7313079</id><snippet>rev:FeedEntity</snippet></ROW><ROW><id>7313171</id><snippet>zip()</snippet></ROW><ROW><id>7313171</id><snippet>z = zip(x,y)
</snippet></ROW><ROW><id>7313210</id><snippet>mylist = zip(*mylist)</snippet></ROW><ROW><id>7313210</id><snippet>&gt;&gt;&gt; original = [[1, 2, 3, 4], [1, 2, 3, 4], [2, 3, 4, 5]]
&gt;&gt;&gt; transposed = zip(*original)
&gt;&gt;&gt; transposed
    [(1, 1, 2), (2, 2, 3), (3, 3, 4), (4, 4, 5)]

&gt;&gt;&gt; original[2][3]
    5

&gt;&gt;&gt; transposed[3][2]
    5  
</snippet></ROW><ROW><id>7313210</id><snippet>zip(*original)</snippet></ROW><ROW><id>7313210</id><snippet>zip(original[0], original[1], original[2])</snippet></ROW><ROW><id>7313677</id><snippet>import urllib
from HTMLParser import HTMLParser

base_url = 'http://127.0.0.1/'

class ImgParser(HTMLParser):
    def __init__(self, *args, **kwargs):
        self.downloads = []
        HTMLParser.__init__(self, *args, **kwargs)

    def handle_starttag(self, tag, attrs):
        if tag == 'img':
            for attr in attrs:
                if attr[0] == 'src':
                    self.downloads.append( attr[1] )

imgp = ImgParser()
with open('test.html') as f:
    # instead you could feed it the original url obj directly
    imgp.feed(f.read())  

for path in imgp.downloads:
    url = base_url + path
    print url
    urllib.urlretrieve(url, path)
</snippet></ROW><ROW><id>7313847</id><snippet>array[array['phase']=='P']
</snippet></ROW><ROW><id>7313847</id><snippet>array['phase']=='P'</snippet></ROW><ROW><id>7313847</id><snippet>idx</snippet></ROW><ROW><id>7313847</id><snippet>array[idx]</snippet></ROW><ROW><id>7313847</id><snippet>idx</snippet></ROW><ROW><id>7313847</id><snippet>True</snippet></ROW><ROW><id>7314081</id><snippet>vote=Better&amp;vote=Faster&amp;vote=Stronger
</snippet></ROW><ROW><id>7314081</id><snippet>urllib.urlencode({
  'vote': ['Better', 'Faster', 'Stronger'],
}, True)
</snippet></ROW><ROW><id>7314081</id><snippet>True</snippet></ROW><ROW><id>7314081</id><snippet>urlencode</snippet></ROW><ROW><id>7314107</id><snippet>translate()</snippet></ROW><ROW><id>7314107</id><snippet>"translate(Node/Node[@name='1130482269']/Val[@name='account_number'],'- ','')"
</snippet></ROW><ROW><id>7314107</id><snippet>997139</snippet></ROW><ROW><id>7314107</id><snippet>"translate(
  /Node/Node[@name='" + 
  str(accountnumber) + 
  "']/Val[@name='account_number'],'- ','')"
</snippet></ROW><ROW><id>7314107</id><snippet>'- '</snippet></ROW><ROW><id>7314107</id><snippet>'- '</snippet></ROW><ROW><id>7314946</id><snippet>(&lt;u[^&gt;]*&gt;)(\-\s)(&lt;\/u&gt;)
</snippet></ROW><ROW><id>7314946</id><snippet>(&lt;u[^&gt;]*&gt;)(?:-|\s|(\d+))*(&lt;\/u&gt;)
</snippet></ROW><ROW><id>7314946</id><snippet>def repl(matchobj):
        if matchobj.group(1) is None:
            return ''
        else:
            return matchobj.group(1)

source = '&lt;u&gt;40 -04-11&lt;/u&gt;40 -04-11&lt;u&gt;40 -04-11&lt;/u&gt;40 -04-11'
print re.sub(r'(?:\-|\s|(\d+))(?=[^&gt;&lt;]*?&lt;\/u&gt;)', repl, source)
</snippet></ROW><ROW><id>7314946</id><snippet>&gt;&gt;&gt;'&lt;u&gt;400411&lt;/u&gt;40 -04-11&lt;u&gt;400411&lt;/u&gt;40 -04-11'
</snippet></ROW><ROW><id>7315737</id><snippet>from ftplib import FTP
ftpretr = FTP('get.ftp.com')   # connect to host, default port
ftpretr.login()               # user anonymous, passwd anonymous@
ftpretr.retrbinary('RETR README', open('README', 'wb').write)
ftpretr.quit()
ftpsend = FTP('send-to.ftp.com','login','password')
ftpsend.storbinary('STOR todo.txt', open('README','rb'))
ftpsend.quit()
</snippet></ROW><ROW><id>7316010</id><snippet>SIGQUIT</snippet></ROW><ROW><id>7316010</id><snippet>SIGINT</snippet></ROW><ROW><id>7316295</id><snippet>    c.select('INBOX', readonly=True)

    for i in range(1, 30):
        typ, msg_data = c.fetch(str(i), '(RFC822)')
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_string(response_part[1])
                for header in [ 'subject', 'to', 'from' ]:
                    print '%-8s: %s' % (header.upper(), msg[header])
</snippet></ROW><ROW><id>7316735</id><snippet>def f_a(s): pass
def f_b(s): pass

consumers = [f_a, f_b]

while True:
    chunk = process.stdout.read(100)
    if chunk == '': break # or something like that
    for c in consumers: c(chunk)
</snippet></ROW><ROW><id>7317005</id><snippet>urls.py</snippet></ROW><ROW><id>7317005</id><snippet>urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>7317005</id><snippet>collectstatic</snippet></ROW><ROW><id>7317005</id><snippet>settings.py</snippet></ROW><ROW><id>7317005</id><snippet>STATIC_ROOT = os.path.join(os.path.dirname(__file__), '../../static')
STATIC_URL = '/static/'
</snippet></ROW><ROW><id>7317491</id><snippet>&gt;&gt;&gt; import feedparser
&gt;&gt;&gt; d = feedparser.parse("http://feedparser.org/docs/examples/atom10.xml")
&gt;&gt;&gt; d['feed']['title']             # feed data is a dictionary
u'Sample Feed'
</snippet></ROW><ROW><id>7317653</id><snippet>import pyodbc
cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER=localhost;DATABASE=testdb;UID=me;PWD=pass')
cursor = cnxn.cursor()
cursor.execute("select user_id, user_name from users")
rows = cursor.fetchall()
for row in rows:
    print row.user_id, row.user_name
</snippet></ROW><ROW><id>7317653</id><snippet>from sqlalchemy import create_engine
engine = create_engine("mssql://me:pass@localhost/testdb")
for row in engine.execute("select user_id, user_name from users"):
    print row.user_id, row.user_name
</snippet></ROW><ROW><id>7318393</id><snippet>widgets</snippet></ROW><ROW><id>7318393</id><snippet>Time_frame_is_realistic = ModelChoiceField(queryset=models.RFXDigest.objects.all(),
                                           empty_label="(Nothing)",
                                           widget=rfx_widgets.jQueryRadioSelect())
</snippet></ROW><ROW><id>7318471</id><snippet>mfloat(0) == mfloat(1) == mfloat(2)</snippet></ROW><ROW><id>7318471</id><snippet>mfloat(0) != mfloat(2)</snippet></ROW><ROW><id>7318471</id><snippet>__hash__</snippet></ROW><ROW><id>7318471</id><snippet>a == b ⇒ hash(a) == hash(b)
</snippet></ROW><ROW><id>7318471</id><snippet>hash(mfloat(8)) != hash(mfloat(9))</snippet></ROW><ROW><id>7318471</id><snippet>mfloat(8) != mfloat(9)</snippet></ROW><ROW><id>7318471</id><snippet>__eq__</snippet></ROW><ROW><id>7318471</id><snippet>from math import floor
class ffloat(float):
    def __eq__(self,other):
        return floor(self) == floor(other):
    def __hash__(self):
        return floor(self)

a = map(ffloat,[4.3,8,8.9, 13])
print(set(a))
# output: {8.0, 4.3, 13.0}
</snippet></ROW><ROW><id>7318790</id><snippet>for el in os.listdir('C:\Users\MyUser'):
    try:
        (check if you can open, if so, you can show this folder)
    except WindowsError:
        pass  
</snippet></ROW><ROW><id>7319007</id><snippet>def my_view(request):
    #some setup code here

    def get_field_qs(field, **kwargs):
        if field.name == 'client':
            field.queryset = Client.objects.filter(user=request.user)
        return field

    AttendanceFormset = inlineformset_factory(
        ...
        formfield_callback=get_field_qs
        ...
    )

    formset = AttendanceFormset(request.POST, instance=session)
</snippet></ROW><ROW><id>7319154</id><snippet>contents = []

with open('file') as f:
     for line in f:
         if line.startswith('&lt;start&gt;'):
            pass
         contents.append(line)

contents = "".join(contents)
sections = contents.split("&lt;stop&gt;")
</snippet></ROW><ROW><id>7319161</id><snippet>StringVar</snippet></ROW><ROW><id>7319161</id><snippet>onvalue</snippet></ROW><ROW><id>7319161</id><snippet>offvalue</snippet></ROW><ROW><id>7319796</id><snippet>py25-gtk</snippet></ROW><ROW><id>7319796</id><snippet>py26-gtk</snippet></ROW><ROW><id>7319796</id><snippet>py27-gtk</snippet></ROW><ROW><id>7319796</id><snippet>py25-pygtk</snippet></ROW><ROW><id>7319796</id><snippet>py26-pygtk</snippet></ROW><ROW><id>7319796</id><snippet>py27-pygtk</snippet></ROW><ROW><id>7320026</id><snippet>raw_input</snippet></ROW><ROW><id>7320026</id><snippet>class CmdlineClient(asyncore.file_dispatcher):
    def __init__(self, sender, file):
        asyncore.file_dispatcher.__init__(self, file)
        self.sender = sender

    def handle_read(self):
        self.sender.buffer += self.recv(1024)

import sys
sender = Sender(50000)
cmdline = CmdlineClient(sender, sys.stdin)
</snippet></ROW><ROW><id>7320071</id><snippet>    numeric_const_pattern = r"""
    [-+]? # optional sign
    (?:
        (?: \d* \. \d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc
        |
        (?: \d+ \.? ) # 1. 12. 123. etc 1 12 123 etc
    )
    # followed by optional exponent part if desired
    (?: [Ee] [+-]? \d+ ) ?
    """
    self.rx = re.compile(numeric_const_pattern, re.VERBOSE)
</snippet></ROW><ROW><id>7320071</id><snippet>def validate_float(self, widget, entry):
    entry_text = entry.get_text()
    newtext = self.rx.findall(entry_text)
    if len(newtext) :
        entry.set_text(newtext[0])
    else:
        entry.set_text("")
</snippet></ROW><ROW><id>7320664</id><snippet>def xpath_get(mydict, path):
    elem = mydict
    try:
        for x in path.strip("/").split("/"):
            elem = elem.get(x)
    except:
        pass

    return elem
</snippet></ROW><ROW><id>7320664</id><snippet>/</snippet></ROW><ROW><id>7320926</id><snippet>type()</snippet></ROW><ROW><id>7320926</id><snippet>__name__</snippet></ROW><ROW><id>7320926</id><snippet>__module__</snippet></ROW><ROW><id>7320926</id><snippet>MyModel = type('MyModel', (models.Model,), {
    'field': models.BooleanField(),
    '__module__': __name__,
})
</snippet></ROW><ROW><id>7320926</id><snippet>__module__</snippet></ROW><ROW><id>7320926</id><snippet>my_app1/models.py</snippet></ROW><ROW><id>7320926</id><snippet>my_app1.models</snippet></ROW><ROW><id>7320926</id><snippet>my_app1</snippet></ROW><ROW><id>7320974</id><snippet>b'string'</snippet></ROW><ROW><id>7320974</id><snippet>bytes</snippet></ROW><ROW><id>7321490</id><snippet>Person.objects.create(name='Adam', person_type='Appellant') 
</snippet></ROW><ROW><id>7321490</id><snippet>pers_type = Person_Type.objects.get(pers_type='Appelant') # assuming pers_type is unique
Person.objects.create(name='Adam', pers_type=pers_type) 
</snippet></ROW><ROW><id>7321490</id><snippet>try:
    pers_type = Person_Type.objects.get(pers_type='Appelant')
except Person_Type.DoesNotExists:
    person_type = Person_Type.objects.create(pers_type='Appellant')
Person.objects.create(name='Adam', pers_type=pers_type)
</snippet></ROW><ROW><id>7321768</id><snippet>import os
import sys
import Tkinter as tkinter

import gobject
import gst

def on_sync_message(bus, message, window_id):
        if not message.structure is None:
            if message.structure.get_name() == 'prepare-xwindow-id':
                image_sink = message.src
                image_sink.set_property('force-aspect-ratio', True)
                image_sink.set_xwindow_id(window_id)

gobject.threads_init()

window = tkinter.Tk()
window.geometry('500x400')

video = tkinter.Frame(window, bg='#000000')
video.pack(side=tkinter.BOTTOM,anchor=tkinter.S,expand=tkinter.YES,fill=tkinter.BOTH)

window_id = video.winfo_id()

player = gst.element_factory_make('playbin2', 'player')
player.set_property('video-sink', None)
player.set_property('uri', 'file://%s' % (os.path.abspath(sys.argv[1])))
player.set_state(gst.STATE_PLAYING)

bus = player.get_bus()
bus.add_signal_watch()
bus.enable_sync_message_emission()
bus.connect('sync-message::element', on_sync_message, window_id)

window.mainloop()
</snippet></ROW><ROW><id>7322292</id><snippet>[/images]</snippet></ROW><ROW><id>7322292</id><snippet>[/css]</snippet></ROW><ROW><id>7322292</id><snippet>[/js]</snippet></ROW><ROW><id>7322292</id><snippet>[/robots.txt]</snippet></ROW><ROW><id>7322292</id><snippet>[/favicon.ico]</snippet></ROW><ROW><id>7322292</id><snippet>_cptree.py</snippet></ROW><ROW><id>7322292</id><snippet>[/]
tools.staticdir.on = True
tools.staticdir.root = "/projects/mysite/trunk/root"
tools.staticdir.dir = ""
tools.staticfile.root = "/projects/mysite/trunk/root"

[/favicon.ico]
tools.staticfile.on = True
tools.staticfile.filename = "images/favicon.ico"
</snippet></ROW><ROW><id>7322505</id><snippet>pip install https://github.com/facebook/python-sdk/zipball/master
</snippet></ROW><ROW><id>7322505</id><snippet>pip install https://github.com/facebook/python-sdk/tarball/master
</snippet></ROW><ROW><id>7322505</id><snippet>git-core</snippet></ROW><ROW><id>7322505</id><snippet>git://</snippet></ROW><ROW><id>7322505</id><snippet>sudo apt-get install git-core
</snippet></ROW><ROW><id>7322801</id><snippet>import BeautifulSoup
import re

content='''
&lt;ul class="bobby"&gt;
&lt;li&gt;&lt;strong&gt;Volume 14&lt;/strong&gt;&lt;/li&gt;
&lt;li class=""&gt;
&lt;a href="/content/ben/cchts/2011/00000014/00000001" title="Issue 1, September 2011"&gt;Issue 1, September 2011&lt;/a&gt;          
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Volume 13&lt;/strong&gt;&lt;/li&gt; 
&lt;li class=""&gt;
&lt;a href="/content/ben/cchts/2010/00000013/00000002" title="Issue 2, December 2010"&gt;Issue 2, December 2010&lt;/a&gt;
&lt;/li&gt;
&lt;li class=""&gt;
&lt;a href="/content/ben/cchts/2011/00000014/00000001" title="Issue 1, November 2011"&gt;Issue 1, November 2011&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
'''

last_volume=13
last_issue=1

soup=BeautifulSoup.BeautifulSoup(content)
results = soup.find('ul', attrs={'class' : 'bobby'})
for a_string in results.findAll('a', text=re.compile('Issue')):
    volume=a_string.findPrevious(text=re.compile('Volume'))
    volume=int(re.search(r'(\d+)',volume).group(1))
    issue=int(re.search(r'(\d+)',a_string).group(1))
    href=a_string.parent['href']
    if (volume&gt;last_volume) or (volume&gt;=last_volume and issue&gt;last_issue):    
        print(volume,issue,href)
</snippet></ROW><ROW><id>7322801</id><snippet>(14, 1, u'/content/ben/cchts/2011/00000014/00000001')
(13, 2, u'/content/ben/cchts/2010/00000013/00000002')
</snippet></ROW><ROW><id>7323278</id><snippet>stream.close</snippet></ROW><ROW><id>7323278</id><snippet>stream.write</snippet></ROW><ROW><id>7323278</id><snippet>log.debug()</snippet></ROW><ROW><id>7323278</id><snippet>IOError</snippet></ROW><ROW><id>7323815</id><snippet>', '.join(set_3)
</snippet></ROW><ROW><id>7323815</id><snippet>join</snippet></ROW><ROW><id>7323946</id><snippet>strings = "foo bar apple".split()
</snippet></ROW><ROW><id>7323955</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>7323955</id><snippet>shlex.split()</snippet></ROW><ROW><id>7323955</id><snippet>from subprocess import Popen, PIPE
from shlex import split
p1 = Popen(split("tar -c mydir"), stdout=PIPE)
p2 = Popen(split("md5sum"), stdin=p1.stdout)
</snippet></ROW><ROW><id>7323955</id><snippet>tarfile</snippet></ROW><ROW><id>7323955</id><snippet>hashlib</snippet></ROW><ROW><id>7324225</id><snippet>IMC.special = A.thingy()
IMC.important_global_constant = 0x0001
</snippet></ROW><ROW><id>7324225</id><snippet>import B
B.IMC = IMC
</snippet></ROW><ROW><id>7324244</id><snippet>add</snippet></ROW><ROW><id>7324244</id><snippet>delete</snippet></ROW><ROW><id>7324244</id><snippet>change</snippet></ROW><ROW><id>7324244</id><snippet>delete_***</snippet></ROW><ROW><id>7324380</id><snippet>#include &lt;math.h&gt;         // for pow()
#include &lt;stdlib.h&gt;       // for drand48()

long randomRange(int n)
{
    // our method needs start and size of the range rather 
    // than start and end.
    long range_start = pow(10,n-1);
    long range_size = pow(10,n)-range_start;
    // we expect the rand48 functions to offer more randomness
    // than the more-well-known rand() function. drand48()
    // gives you a double-precision float in 0.0-1.0, so we 
    // scale up by range_size and and to the start of the range.
    return range_start + long(drand48() * range_size);
};
</snippet></ROW><ROW><id>7324380</id><snippet>#include &lt;math.h&gt;         // for pow()
#include &lt;stdlib.h&gt;       // for atof()

// arbitrary limit
const int MAX_DIGITS = 24;

double randomRange(int n)
{
    char bigNumString[ MAX_DIGITS+1 ];
    if (n &gt; MAX_DIGITS)
    {
        return 0;
    }
    // first digit is 1-9
    bigNumString[0] = "123456789"[rand()%9];
    for (int i = 1; i &lt; n; i++)
    {
        // subsequent digits can be zero
        bigNumString[i] = "0123456789"[rand()%10];
    }
    // terminate the string
    bigNumString[i] = 0;
    // convert it to float
    return atof(bigNumString);
};
</snippet></ROW><ROW><id>7324601</id><snippet>TestCase</snippet></ROW><ROW><id>7324601</id><snippet>TestCase.assertEqual</snippet></ROW><ROW><id>7324601</id><snippet>Option</snippet></ROW><ROW><id>7324601</id><snippet>TestCase.assertEqual</snippet></ROW><ROW><id>7324601</id><snippet>originalAssertEqual = TestCase.assertEqual
def newAssertEqual(self, first, second):
    result = originalAssertEqual(first, second)
    if isinstance(first, Option) and isinstance(second, Option):
        # do your custom comparison
    return result
TestCase.assertEqual = newAssertEqual 
</snippet></ROW><ROW><id>7324601</id><snippet>self.assertEqual(firstOptions, secondOptions)</snippet></ROW><ROW><id>7324601</id><snippet>Option</snippet></ROW><ROW><id>7324601</id><snippet>assertOptionsEqual</snippet></ROW><ROW><id>7324601</id><snippet>Option</snippet></ROW><ROW><id>7324601</id><snippet>__eq__</snippet></ROW><ROW><id>7324601</id><snippet>class KnownGoodInputs(TestCase):
    def test_good_options(self):
        first, second = systemUnderTestGetOptions(...)
        self.assertOptionsEqual(first, second)
</snippet></ROW><ROW><id>7324601</id><snippet>first</snippet></ROW><ROW><id>7324601</id><snippet>second</snippet></ROW><ROW><id>7324601</id><snippet>assertEqual</snippet></ROW><ROW><id>7324601</id><snippet>Option</snippet></ROW><ROW><id>7324601</id><snippet>def __eq__(self, other):
    if (self.use_foo == other.use_foo and
        self.use_bar == other.use_bar):
        return True
    return False
</snippet></ROW><ROW><id>7324601</id><snippet>first</snippet></ROW><ROW><id>7324601</id><snippet>second</snippet></ROW><ROW><id>7324601</id><snippet>Option</snippet></ROW><ROW><id>7324601</id><snippet>class KnownGoodInputs(TestCase):
    def test_good_options(self):
        first, second = systemUnderTestGetOptions(...)
        self.assertEqual(first, second)
</snippet></ROW><ROW><id>7324603</id><snippet>class PrefetchedGenerator(object):
    def __init__(self, generator):
         self._data = generator.next()
         self._generator = generator
         self._ready = True

    def next(self):
        if not self._ready:
            self.prefetch()
        self._ready = False
        return self._data

    def prefetch(self):
        if not self._ready:
            self._data = self._generator.next()
            self._ready = True
</snippet></ROW><ROW><id>7324603</id><snippet>class BackgroundGenerator(threading.Thread):
    def __init__(self, generator):
        threading.Thread.__init__(self)
        self.queue = Queue.Queue(1)
        self.generator = generator
        self.daemon = True
        self.start()

    def run(self):
        for item in self.generator:
            self.queue.put(item)
        self.queue.put(None)

    def next(self):
            next_item = self.queue.get()
            if next_item is None:
                 raise StopIteration
            return next_item
</snippet></ROW><ROW><id>7324646</id><snippet>$ARGV[0]</snippet></ROW><ROW><id>7324646</id><snippet>$ARGV[1]</snippet></ROW><ROW><id>7324646</id><snippet>$0</snippet></ROW><ROW><id>7324646</id><snippet>a.py</snippet></ROW><ROW><id>7324646</id><snippet>$PATH</snippet></ROW><ROW><id>7324646</id><snippet>.</snippet></ROW><ROW><id>7324646</id><snippet>$PATH</snippet></ROW><ROW><id>7324646</id><snippet>cd</snippet></ROW><ROW><id>7324646</id><snippet>ls</snippet></ROW><ROW><id>7324646</id><snippet>.</snippet></ROW><ROW><id>7324646</id><snippet>$PATH</snippet></ROW><ROW><id>7324646</id><snippet>./command</snippet></ROW><ROW><id>7324646</id><snippet>./a.py</snippet></ROW><ROW><id>7324646</id><snippet>a.py</snippet></ROW><ROW><id>7324646</id><snippet>a.py</snippet></ROW><ROW><id>7324646</id><snippet>$PATH</snippet></ROW><ROW><id>7324646</id><snippet>*</snippet></ROW><ROW><id>7324646</id><snippet>some_command asd*123</snippet></ROW><ROW><id>7324646</id><snippet>"asd*123"</snippet></ROW><ROW><id>7324646</id><snippet>#!/usr/bin/env python

print "before import sys"

import sys

print "after import sys"

username = sys.argv[1]
password = sys.argv[2]
</snippet></ROW><ROW><id>7325042</id><snippet>take_snapshot</snippet></ROW><ROW><id>7325042</id><snippet>def take_snapshot(self,widget):
  filename = str(time.time()) + ".jpg"     
  pixbuf = gtk.gdk.Pixbuf.get_from_drawable(self.movie_window.window, self.movie_window.window.get_colormap(), 0, 0, 0,0 500, 400)
  pixbuf.save(filename, "jpeg", {"quality":"100"})
</snippet></ROW><ROW><id>7325141</id><snippet>asynchronous</snippet></ROW><ROW><id>7325141</id><snippet>deferToThread</snippet></ROW><ROW><id>7325141</id><snippet>concurrency</snippet></ROW><ROW><id>7325141</id><snippet>blocking</snippet></ROW><ROW><id>7325141</id><snippet>non-blocking</snippet></ROW><ROW><id>7325141</id><snippet>concurrency</snippet></ROW><ROW><id>7325141</id><snippet>synchronously</snippet></ROW><ROW><id>7325141</id><snippet>blocking</snippet></ROW><ROW><id>7325141</id><snippet>asynchronously</snippet></ROW><ROW><id>7325141</id><snippet>deferred</snippet></ROW><ROW><id>7325141</id><snippet>multiprocessing</snippet></ROW><ROW><id>7325141</id><snippet>N</snippet></ROW><ROW><id>7325320</id><snippet>os.walk</snippet></ROW><ROW><id>7325320</id><snippet>import os
import os.path
def get_dir_md5(dir_root):
    """Build a tar file of the directory and return its md5 sum"""

    hash = hashlib.md5()
    for dirpath, dirnames, filenames in os.walk(dir_root, topdown=True):

        dirnames.sort(key=os.path.normcase)
        filenames.sort(key=os.path.normcase)

        for filename in filenames:
            filepath = os.path.join(dirpath, filename)

            # If some metadata is required, add it to the checksum

            # 1) filename (good idea)
            # hash.update(os.path.normcase(os.path.relpath(filepath, dir_root))

            # 2) mtime (possibly a bad idea)
            # st = os.stat(filepath)
            # hash.update(struct.pack('d', st.st_mtime))

            # 3) size (good idea perhaps)
            # hash.update(bytes(st.st_size))

            f = open(filepath, 'rb')
            for chunk in iter(lambda: f.read(65536), b''):
                hash.update(chunk)

    return hash.hexdigest()
</snippet></ROW><ROW><id>7325733</id><snippet>QThread</snippet></ROW><ROW><id>7325733</id><snippet># this should be in the delegate module
while 1:
    c = _QUEUE.get(True) # no timeout
    c.callback() # or post event to main thread
</snippet></ROW><ROW><id>7326069</id><snippet>set</snippet></ROW><ROW><id>7326069</id><snippet>set</snippet></ROW><ROW><id>7326069</id><snippet>tuple('something'.split())</snippet></ROW><ROW><id>7326069</id><snippet>inp.readlines()</snippet></ROW><ROW><id>7326069</id><snippet>look_up = set(tuple(line.split()) for line in inp)
</snippet></ROW><ROW><id>7326069</id><snippet>tuple(line[:3])</snippet></ROW><ROW><id>7326069</id><snippet>[line[0], line[1], line[2]]</snippet></ROW><ROW><id>7326069</id><snippet>while read line
do
    grep "$line" "file2.txt"
done &lt; "file1.txt"
</snippet></ROW><ROW><id>7326069</id><snippet>file1.txt</snippet></ROW><ROW><id>7326069</id><snippet>file2.txt</snippet></ROW><ROW><id>7326069</id><snippet>with open('file1.txt', 'r') as keyfile:
    lookup = set(tuple(line.split()) for line in keyfile)

with open('file2.txt', 'r') as datafile:
    for line in datafile:
        if tuple(line.split()[:3]) in lookup:
            print line,
</snippet></ROW><ROW><id>7326069</id><snippet>jofer@cornbread:~/so&gt; time sh so_temp149.sh &gt; a

real    1m47.617s
user    0m51.199s
sys     0m54.391s
</snippet></ROW><ROW><id>7326069</id><snippet>jofer@cornbread:~/so&gt; time python so_temp149.py &gt; b

real    0m1.631s
user    0m1.558s
sys     0m0.071s
</snippet></ROW><ROW><id>7326069</id><snippet>file1</snippet></ROW><ROW><id>7326207</id><snippet>def points_between(p1, p2):
    xs = range(p1[0] + 1, p2[0]) or [p1[0]]
    ys = range(p1[1] + 1, p2[1]) or [p1[1]]
    return [(x,y) for x in xs for y in ys]

print points_between((1,1), (5,1))
# [(2, 1), (3, 1), (4, 1)]

print points_between((5,6), (5,12))
# [(5, 7), (5, 8), (5, 9), (5, 10), (5, 11)]
</snippet></ROW><ROW><id>7326292</id><snippet>&lt;div id="menu"&gt;
    &lt;a&gt;Teachers&lt;/a&gt;&lt;br /&gt;
    &lt;div style="display: none"&gt;
        &lt;a href=""&gt;Edit&lt;/a&gt;&lt;br /&gt;
        &lt;a href=""&gt;Delete&lt;/a&gt;&lt;br /&gt; 
    &lt;/div&gt;
    &lt;a&gt;Schools&lt;/a&gt;&lt;br /&gt;
    &lt;div style="display: none"&gt;
        &lt;a href=""&gt;Edit&lt;/a&gt;&lt;br /&gt;
        &lt;a href=""&gt;Delete&lt;/a&gt;&lt;br /&gt; 
    &lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$('#menu &gt; a').click(function(){
    $(this).next().next().slideToggle();
    return false;
});
&lt;/script&gt;
</snippet></ROW><ROW><id>7326490</id><snippet>C:\code\python27\bin\python.exe manage.py celeryd_multi start 3 --settings=settings -l info
</snippet></ROW><ROW><id>7326490</id><snippet>C:\code\python27\bin\python.exe  C:\path\to\your\project\manage.py celeryd_multi start 3 --settings=settings -l info
</snippet></ROW><ROW><id>7326743</id><snippet>graphicsView.setStyleSheet("border-width: 0px; border-style: solid")
</snippet></ROW><ROW><id>7326743</id><snippet>graphicsView.setStyleSheet("border: 0px")
</snippet></ROW><ROW><id>7326743</id><snippet>import sys
from PyQt4.QtGui import *

class Ui(QWidget):

    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        graphicsView = QGraphicsView()
        graphicsView.setStyleSheet("border: 0px")

        grid = QGridLayout()
        grid.addWidget(graphicsView)

        self.setLayout(grid)

app = QApplication(sys.argv)
ui = Ui()
ui.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>7326761</id><snippet>ftputil</snippet></ROW><ROW><id>7326761</id><snippet>os</snippet></ROW><ROW><id>7326761</id><snippet>os.path</snippet></ROW><ROW><id>7326761</id><snippet>import ftputil

host = ftputil.FTPHost(constants.FTP_HOST, constants.FTP_LOGIN, constants.FTP_PASS)
host.makedirs(path)
host.close()
</snippet></ROW><ROW><id>7326889</id><snippet>Counter</snippet></ROW><ROW><id>7326889</id><snippet>Counter</snippet></ROW><ROW><id>7326889</id><snippet>Counter</snippet></ROW><ROW><id>7326889</id><snippet>default_counter</snippet></ROW><ROW><id>7326889</id><snippet>Counter</snippet></ROW><ROW><id>7326889</id><snippet>counter = Counter(key_name='default_counter')
# or
counter = Counter(key=db.Key.from_path('Counter', 'default_counter'))
</snippet></ROW><ROW><id>7326971</id><snippet>import time
...
time.sleep(5)
</snippet></ROW><ROW><id>7327148</id><snippet>index = (numpy.s_[:],)+t 
x[index]
</snippet></ROW><ROW><id>7327450</id><snippet>main.py</snippet></ROW><ROW><id>7327493</id><snippet>acfgjp
</snippet></ROW><ROW><id>7327493</id><snippet>aaaabbbbcccddeeeefffggiikknnnnppppqqqrrr
</snippet></ROW><ROW><id>7327493</id><snippet>a</snippet></ROW><ROW><id>7327493</id><snippet>a</snippet></ROW><ROW><id>7327493</id><snippet>a</snippet></ROW><ROW><id>7327493</id><snippet>c</snippet></ROW><ROW><id>7327493</id><snippet>b</snippet></ROW><ROW><id>7327493</id><snippet>c</snippet></ROW><ROW><id>7327493</id><snippet>c</snippet></ROW><ROW><id>7327530</id><snippet>class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self, resource):
        resource = str(urllib.unquote(resource))
        blob_info = blobstore.BlobInfo.get(resource)
        self.send_blob(blob_info,save_as=True)
</snippet></ROW><ROW><id>7327530</id><snippet>self.send_blob(blob_info,save_as='my_file.txt')
</snippet></ROW><ROW><id>7327530</id><snippet>blob_info = blobstore.BlobInfo.get(resource)
type = blob_info.content_type
if type == 'application/pdf':       
    self.response.headers['Content-Type'] = type
    self.send_blob(blob_info,save_as=False)
else:
    self.send_blob(blob_info,save_as=True)
</snippet></ROW><ROW><id>7327869</id><snippet>import random
import os

if __name__=='__main__':

    books = ['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy',
             'Joshua', 'Judges', 'Ruth', 'I Samuel', 'II Samuel', 'I Kings',
             'II Kings', 'I Chronicles', 'II Chronicles', 'Ezra', 'Nehemiah',
             'Esther', 'Job', 'Psalms', 'Proverbs', 'Ecclesiastes',
             'Song of Solomon', 'Isaiah', 'Jeremiah', 'Lamentations',
             'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos', 'Obadiah', 'Jonah',
             'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah',
             'Malachi', 'Matthew', 'Mark', 'Luke', 'John', 'Acts', 'Romans',
             'I Corinthians', 'II Corinthians', 'Galatians', 'Ephesians',
             'Philippians', 'Colossians', 'I Thessalonians',
             'II Thessalonians', 'I Timothy', 'II Timothy', 'Titus',
             'Philemon', 'Hebrews', 'James', 'I Peter', 'II Peter', 'I John',
             'II John', 'III John', 'Jude', 'Revelation']

    mydict_book = dict((bname,i) for i,bname in enumerate(books,start=1))


while True:
    seleCtion = raw_input(" The Bible has a number of %s books.\n" % len(books) \
                          + "Select Next to see them below:\n" \
                          + "{0:^78}".format("[1]Print All books   [2]Start Quiz\n"))

    if seleCtion == '1':
        print '\n'.join('{0:3d}. {1}'.format(i, bname) for i,bname in mydict_book.iteritems())
        break

    elif seleCtion == '2':
        print "{0:^78}\nLet's start the quiz:\n\n".format("Welcome to the Bible book quiz!\n\n")
        break

    else:
        print 'You must select 1 or 2'


while 1:
    try:
        num_ques = int(raw_input('\nEnter the number of questions you wanna be asked: '))
        sampler  = random.sample(books, num_ques)
        if not sampler:  exit(0)

        num_sampler = map(lambda bname: mydict_book[bname] , sampler)
        print 'num_sampler==',num_sampler

        print ('\n\n\nHere are the first %s books in the quiz: \n%s'
               '\nMatch the correct numeric positions below :\n%s') \
               % (num_ques,  str(sampler)[1:-1],  str(random.sample(num_sampler,num_ques))[1:-1])

        samp = [ int(raw_input('\nWhich number is %s : ' % books[i-1])) for i in num_sampler ]

        your = zip(samp,sampler)
        your.sort()
        print '\nYour Answers yield:\n' + '\n'.join('%2s. %s' % (n,bk) for n,bk in your)

        correct = zip(num_sampler,sampler)
        correct.sort()
        print "\nThe Correct Answers are:\n" + '\n'.join('%2s - %s' % (n,bk) for n,bk in correct) 

        continue


    except ValueError:
        break
</snippet></ROW><ROW><id>7327923</id><snippet>print open(lPath).read(),  # notice the comma at the end.
</snippet></ROW><ROW><id>7327923</id><snippet>print</snippet></ROW><ROW><id>7327923</id><snippet>print</snippet></ROW><ROW><id>7327923</id><snippet>import sys
sys.stdout.write(open(lPath).read())
</snippet></ROW><ROW><id>7327923</id><snippet>print</snippet></ROW><ROW><id>7327923</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>7327923</id><snippet>end</snippet></ROW><ROW><id>7327923</id><snippet>print</snippet></ROW><ROW><id>7327923</id><snippet>print(open(lPath).read(), end='')
</snippet></ROW><ROW><id>7328151</id><snippet>def find_next(cur_dt):
    import datetime as dt
    t = [dt.time(5,30), dt.time(8,30), dt.time(13,0), dt.time(17,30)]

    cur_t = cur_dt.time()
    cur_d = cur_dt.date()

    for i in range(len(t)):
        if t[i] &gt; cur_t:
            rt = [t[(j+i)%len(t)] for j in range(len(t))]
            rd = [cur_d] * (len(t)-i) + [cur_d + dt.timedelta(days=1)]*i
            return [dt.datetime.combine(rd[j],rt[j]) for j in range(len(rt))]

    # everything happens tomorrow        
    return [dt.datetime.combine(cur_d + dt.timedelta(days=1), i) for i in t]
</snippet></ROW><ROW><id>7328285</id><snippet>numpy.lib.stride_tricks.as_strided</snippet></ROW><ROW><id>7328285</id><snippet>In [5]: a = numpy.arange(12).reshape(4,3)

In [6]: a
Out[6]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])

In [7]: a.strides
Out[7]: (24, 8)

In [8]: b = numpy.lib.stride_tricks.as_strided(a, shape=(4, 4), strides=(24, 8))

In [9]: b
Out[9]: 
array([[  0,   1,   2,   3],
       [  3,   4,   5,   6],
       [  6,   7,   8,   9],
       [  9,  10,  11, 112]])
</snippet></ROW><ROW><id>7328285</id><snippet>b</snippet></ROW><ROW><id>7328285</id><snippet>a</snippet></ROW><ROW><id>7328285</id><snippet>numpy.lib.recfunctions.append_fields</snippet></ROW><ROW><id>7328690</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; from dateutil.tz import tzoffset
&gt;&gt;&gt; dt = parse('2011-08-24 13:39:00 +0800')
datetime.datetime(2011, 8, 24, 13, 39, tzinfo=tzoffset(None, 28800))
&gt;&gt;&gt; dt.astimezone(tzoffset(None, 3600))
datetime.datetime(2011, 8, 24, 6, 39, tzinfo=tzoffset(None, 3600))
</snippet></ROW><ROW><id>7329362</id><snippet>&gt;&gt;&gt; print u'Hello, 你好, bye.'.encode('unicode-escape')
Hello, \u4f60\u597d, bye.
</snippet></ROW><ROW><id>7329362</id><snippet>json</snippet></ROW><ROW><id>7329368</id><snippet>def EndRedirect(self, dispatched_output, original_output):

"""Handle the end of upload complete notification. Makes sure the application upload handler returned an appropriate status code. """

    response = dev_appserver.RewriteResponse(dispatched_output)

    logging.info('Upload handler returned %d', response.status_code)
    outfile = cStringIO.StringIO()
    outfile.write('Status: %s\n' % response.status_code)

    if response.body and len(response.body.read()) &gt; 0:
      response.body.seek(0)
      outfile.write(response.body.read())
    else:
      outfile.write(''.join(response.headers.headers))

    outfile.seek(0)

dev_appserver.URLDispatcher.EndRedirect(self,outfile,original_output)
</snippet></ROW><ROW><id>7329694</id><snippet>def f(x,y,opt_a=None, opt_b=None):
    if opt_a is None: opt_a = rcParams['group1.opt_a']
</snippet></ROW><ROW><id>7330224</id><snippet>&gt;&gt;&gt; # import NumPy and the relevant scikits.learn module
&gt;&gt;&gt; import numpy as NP
&gt;&gt;&gt; from sklearn import neighbors as kNN

&gt;&gt;&gt; # load one of the sklearn-suppplied data sets
&gt;&gt;&gt; from sklearn import datasets
&gt;&gt;&gt; iris = datasets.load_iris()
&gt;&gt;&gt; # the call to load_iris() loaded both the data and the class labels, so
&gt;&gt;&gt; # bind each to its own variable
&gt;&gt;&gt; data = iris.data
&gt;&gt;&gt; class_labels = iris.target

&gt;&gt;&gt; # construct a classifier-builder by instantiating the kNN module's primary class
&gt;&gt;&gt; kNN1 = kNN.NeighborsClassifier()

&gt;&gt;&gt; # now construct ('train') the classifier by passing the data and class labels
&gt;&gt;&gt; # to the classifier-builder
&gt;&gt;&gt; kNN1.fit(data, class_labels)
      NeighborsClassifier(n_neighbors=5, leaf_size=20, algorithm='auto')
</snippet></ROW><ROW><id>7330346</id><snippet>for i in itertools.product(range(0,100), repeat=3):
    #do stuff with i
    list.append(run(i[0],i[1],i[2]))
</snippet></ROW><ROW><id>7330346</id><snippet>list.append(run(*i))
</snippet></ROW><ROW><id>7330346</id><snippet>product(range(0,2), repeat=3))</snippet></ROW><ROW><id>7330346</id><snippet>(0, 0, 0)
(0, 0, 1)
(0, 1, 0)
(0, 1, 1)
(1, 0, 0)
(1, 0, 1)
(1, 1, 0)
(1, 1, 1)
</snippet></ROW><ROW><id>7330513</id><snippet>from sympy import *

a,b,c,d,e = symbols("a,b,c,d,e")
x = a**2 + b/(c-min(d,e))
y = c+sqrt(x*e)

values = {a:73,b:13,c:100,d:20,e:18}

print x
print y

print x.subs(values)
print y.subs(values)

print N(x.subs(values))
print N(y.subs(values))
</snippet></ROW><ROW><id>7330513</id><snippet>a**2 + b/(c - d)
c + (e*(a**2 + b/(c - d)))**(1/2)
426333/80
100 + 3*4263330**(1/2)/20
5329.16250000000
409.717492240913
</snippet></ROW><ROW><id>7330549</id><snippet># for python &gt;=2.7
result = subprocess.check_output(["/path/to/process_to_lauch", "arg1"])

# for python &lt; 2.7
process = subprocess.Popen(["/path/to/process_to_lauch", "arg1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
str_out, str_errr = process.communicate()
# in str_out you will find the standard output of your process
# in str_err you will find the standard output of your process
</snippet></ROW><ROW><id>7330549</id><snippet>out_file = open(out_file_name, "w")
err_file = open(out_file_name, "w")
process = subprocess.Popen(["/path/to/process_to_lauch", "arg1"], stdout=out_file, stderr=err_file)
return_code = process.wait()
out_file.close()
err_file.close()
</snippet></ROW><ROW><id>7330909</id><snippet>LOAD DATA INFILE '/folder/input.dat' INTO TABLE destination_table
FIELDS TERMINATED BY ',' (id,field_1,field_2,field_3);
</snippet></ROW><ROW><id>7330909</id><snippet>This is my header of the article.;;And here is my article, it's a nice
story about programming.
My article goes on for many lines.
And many more.
&lt;==============================================================================&gt;
This is my second article header.;;And here is article 2. It is.
And is.
Etc.
&lt;==============================================================================&gt;
</snippet></ROW><ROW><id>7330909</id><snippet>LOAD DATA INFILE '/folder/filename.txt' INTO TABLE destination_table
LINES TERMINATED BY '&lt;==============================================================================&gt;'
FIELDS TERMINATED BY ';;' (header,article);
</snippet></ROW><ROW><id>7330924</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>7330924</id><snippet>htmlfile = open('database.html', 'w')
htmlfile.write('&lt;html&gt;...')
htmlfile.write('&lt;script&gt;var db = ' + json.encode(database) + ';&lt;/script&gt;');
</snippet></ROW><ROW><id>7331104</id><snippet>==</snippet></ROW><ROW><id>7331104</id><snippet>__eq__</snippet></ROW><ROW><id>7331104</id><snippet>__dict__</snippet></ROW><ROW><id>7331104</id><snippet>  def __eq__(self, other) : 
        return self.__dict__ == other.__dict__
</snippet></ROW><ROW><id>7331558</id><snippet>tests=(
    ('fck','fc kopenhavn',True),
    ('fco','fc kopenhavn',False),
    ('irl','in real life',True),
    ('irnl','in real life',False),    
    ('ifk','ifk gotebork',True),   
    ('ifko','ifk gotebork',False),    
    ('aik','allmanna idrottskluben',True),
    ('aid','allmanna idrottskluben',True),
    ('manu','manchester united',True), 
    ('fz','faz zoo',True), 
    ('fzz','faz zoo',True),
    ('fzzz','faz zoo',False),    
    )

def is_abbrev(abbrev, text):
    abbrev=abbrev.lower()
    text=text.lower()
    words=text.split()
    if not abbrev:
        return True
    if abbrev and not text:
        return False
    if abbrev[0]!=text[0]:
        return False
    else:
        return (is_abbrev(abbrev[1:],' '.join(words[1:])) or
                any(is_abbrev(abbrev[1:],text[i+1:])
                    for i in range(len(words[0]))))

for abbrev,text,answer in tests:
    result=is_abbrev(abbrev,text)
    print(abbrev,text,result,answer)
    assert result==answer
</snippet></ROW><ROW><id>7331836</id><snippet>from Tkinter import *
import os

root = Tk()
termf = Frame(root, height=400, width=500)

termf.pack(fill=BOTH, expand=YES)
wid = termf.winfo_id()
os.system('xterm -into %d -geometry 40x20 -sb &amp;' % wid)

root.mainloop()
</snippet></ROW><ROW><id>7332617</id><snippet>import os
os.system('sort -u -n s1.num &gt; s1.ns')
os.system('sort -u -n s2.num &gt; s2.ns')
i1 = open('s1.ns', 'r')
i2 = open('s2.ns', 'r')
try:
    d1 = i1.next()
    d2 = i2.next()
    while True:
        if (d1 &lt; d2):
            d1 = i1.next()
        elif (d2 &lt; d1):
            d2 = i2.next()
        else:
            print d1,
            d1 = i1.next()
            d2 = i2.next()
except StopIteration:
    pass
</snippet></ROW><ROW><id>7332782</id><snippet>SoftValueDictionary</snippet></ROW><ROW><id>7332792</id><snippet>public List&lt;Tree&lt;N extends Iterator, E super Interface1 &amp; Interface2&gt;&gt; 
  = new ArrayList&lt;Tree&lt;N extends Iterator, E super Interface1 &amp; Interface2&gt;&gt;();
</snippet></ROW><ROW><id>7332977</id><snippet>numpy.append(a, a[0])
</snippet></ROW><ROW><id>7333021</id><snippet>import os

var = os.popen('xsel').read()
print var
</snippet></ROW><ROW><id>7333235</id><snippet>C:\Users\...</snippet></ROW><ROW><id>7333235</id><snippet>Benutzer</snippet></ROW><ROW><id>7334681</id><snippet>-v</snippet></ROW><ROW><id>7334681</id><snippet>$ python -v -m /usr/lib/python2.6/timeit.py
# installing zipimport hook
import zipimport # builtin
# installed zipimport hook
# /usr/lib/python2.6/site.pyc matches /usr/lib/python2.6/site.py
import site # precompiled from /usr/lib/python2.6/site.pyc
# /usr/lib/python2.6/os.pyc matches /usr/lib/python2.6/os.py
import os # precompiled from /usr/lib/python2.6/os.pyc
import errno # builtin
import posix # builtin
# /usr/lib/python2.6/posixpath.pyc matches /usr/lib/python2.6/posixpath.py
import posixpath # precompiled from /usr/lib/python2.6/posixpath.pyc
# /usr/lib/python2.6/stat.pyc matches /usr/lib/python2.6/stat.py
import stat # precompiled from /usr/lib/python2.6/stat.pyc
# /usr/lib/python2.6/genericpath.pyc matches /usr/lib/python2.6/genericpath.py
import genericpath # precompiled from /usr/lib/python2.6/genericpath.pyc
# /usr/lib/python2.6/warnings.pyc matches /usr/lib/python2.6/warnings.py
import warnings # precompiled from /usr/lib/python2.6/warnings.pyc
# /usr/lib/python2.6/linecache.pyc matches /usr/lib/python2.6/linecache.py
import linecache # precompiled from /usr/lib/python2.6/linecache.pyc
# /usr/lib/python2.6/types.pyc matches /usr/lib/python2.6/types.py
import types # precompiled from /usr/lib/python2.6/types.pyc
# /usr/lib/python2.6/UserDict.pyc matches /usr/lib/python2.6/UserDict.py
...
</snippet></ROW><ROW><id>7334756</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; ["".join(item) for item in itertools.product("10", repeat=5)]
['11111', '11110', '11101', '11100', '11011', '11010', '11001', '11000', '10111', 
'10110', '10101', '10100', '10011', '10010', '10001', '10000', '01111', '01110', 
'01101', '01100', '01011', '01010', '01001', '01000', '00111', '00110', '00101', 
'00100', '00011', '00010', '00001', '00000']
</snippet></ROW><ROW><id>7335145</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

try:
    s.connect((host, 9))
    client = s.getsockname()[0]
except socket.error:
    client = "Unknown IP"
finally:
    del s
return client
</snippet></ROW><ROW><id>7335918</id><snippet>import json

def my_view(request):
    # ...
    json_d = dict(...)
    return json.dumps(json_d)
</snippet></ROW><ROW><id>7335918</id><snippet>def json_view(f):
    def wrapped_f(*args, **kwargs):
        return json.dumps(f(*args, **kwargs))

    wrapped_f.original = f # for unit testing
    return wrapped_f

@json_view
my_view(request):
    # ...
    return dict(...)
</snippet></ROW><ROW><id>7335972</id><snippet>run</snippet></ROW><ROW><id>7335972</id><snippet>import socket
socket.getaddrinfo('localhost', 8080)
</snippet></ROW><ROW><id>7336115</id><snippet>os.path.basename(path)</snippet></ROW><ROW><id>7336220</id><snippet>request.add_data(queryData)</snippet></ROW><ROW><id>7336220</id><snippet>OPENER.open(request).read()</snippet></ROW><ROW><id>7336220</id><snippet>request</snippet></ROW><ROW><id>7336220</id><snippet>OPENER</snippet></ROW><ROW><id>7336220</id><snippet>request</snippet></ROW><ROW><id>7336220</id><snippet>for c in comments:
    print "building query"
    dataDict = [ ('appid', appid), ('context', c)]
    queryData = urllib.urlencode(dataDict)
    request = urllib2.Request() # I don't know how to initialize this variable, do it yourself
    request.add_data(queryData)
    print "fetching result"
    result = OPENER.open(request).read()
    print result
    time.sleep(1)
</snippet></ROW><ROW><id>7336220</id><snippet>request</snippet></ROW><ROW><id>7336220</id><snippet>OPENER</snippet></ROW><ROW><id>7336555</id><snippet>li = [line[1:-1].split() for line in file]
</snippet></ROW><ROW><id>7336555</id><snippet>li = [line.strip()[1:-1].split() for line in file]
</snippet></ROW><ROW><id>7336718</id><snippet>lxml.etree</snippet></ROW><ROW><id>7336718</id><snippet>import urllib2, os, zipfile
from lxml import etree

def xmlSplitter(data,separator=lambda x: x.startswith('&lt;?xml')):
  buff = []
  for line in data:
    if separator(line):
      if buff:
        yield ''.join(buff)
        buff[:] = []
    buff.append(line)
  yield ''.join(buff)

def first(seq,default=None):
  """Return the first item from sequence, seq or the default(None) value"""
  for item in seq:
    return item
  return default

datasrc = "http://commondatastorage.googleapis.com/patents/grantbib/2011/ipgb20110104_wk01.zip"
filename = datasrc.split('/')[-1]

if not os.path.exists(filename):
  with open(filename,'wb') as file_write:
    r = urllib2.urlopen(datasrc)
    file_write.write(r.read())

zf = zipfile.ZipFile(filename)
xml_file = first([ x for x in zf.namelist() if x.endswith('.xml')])
assert xml_file is not None

count = 0
for item in xmlSplitter(zf.open(xml_file)):
  count += 1
  if count &gt; 10: break
  doc = etree.XML(item)
  docID = "-".join(doc.xpath('//publication-reference/document-id/*/text()'))
  title = first(doc.xpath('//invention-title/text()'))
  assignee = first(doc.xpath('//assignee/addressbook/orgname/text()'))
  print "DocID:    {0}\nTitle:    {1}\nAssignee: {2}\n".format(docID,title,assignee)
</snippet></ROW><ROW><id>7336880</id><snippet>a.py</snippet></ROW><ROW><id>7336880</id><snippet>import b

class A:
    def bar(self):
        return b.B()
</snippet></ROW><ROW><id>7336880</id><snippet>b.py</snippet></ROW><ROW><id>7336880</id><snippet>import a

class B:
    def bar(self):
        return a.A()
</snippet></ROW><ROW><id>7337024</id><snippet>django.contrib.sites</snippet></ROW><ROW><id>7337139</id><snippet>python -mfoo arg1 arg2
</snippet></ROW><ROW><id>7337192</id><snippet>python manage.py schemamigration posts --auto
</snippet></ROW><ROW><id>7337192</id><snippet>python manage.py migrate posts
</snippet></ROW><ROW><id>7337194</id><snippet>file /Users/aj/.python-eggs/MySQL_python-1.2.3-py2.7-macosx-10.6-ix86_64.egg-tmp/_mysql.so
</snippet></ROW><ROW><id>7337194</id><snippet>[...]: Mach-O bundle i386</snippet></ROW><ROW><id>7337194</id><snippet>file $(which python)</snippet></ROW><ROW><id>7337194</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python: Mach-O universal binary with 2 architectures
/Library/Frameworks/Python.framework/Versions/2.7/bin/python (for architecture i386):   Mach-O executable i386
/Library/Frameworks/Python.framework/Versions/2.7/bin/python (for architecture x86_64): Mach-O 64-bit executable x86_64
</snippet></ROW><ROW><id>7337194</id><snippet>file $(which mysql)</snippet></ROW><ROW><id>7337194</id><snippet>/usr/local/mysql/bin/mysql: Mach-O 64-bit executable x86_64
</snippet></ROW><ROW><id>7337194</id><snippet>sudo pip uninstall mysql-python</snippet></ROW><ROW><id>7337194</id><snippet>sudo ARCHFLAGS='-arch ix86_64' python setup.py build</snippet></ROW><ROW><id>7337194</id><snippet>sudo ARCHFLAGS='-arch x86_64' python setup.py build
sudo ARCHFLAGS='-arch x86_64' python setup.py install
</snippet></ROW><ROW><id>7337784</id><snippet>from xml.etree.cElementTree import iterparse

# get an iterable and turn it into an iterator
context = iter(iterparse("path/to/big.xml", events=("start", "end")))

# get the root element
event, root = next(context)
assert event == "start"

for event, elem in context:
    if event == "end" and elem.tag == "book":
       # ... process book elements ...
       root.clear()
</snippet></ROW><ROW><id>7337925</id><snippet># http://www.cs.utexas.edu/users/EWD/ewd07xx/EWD792.PDF

n = 15
bases = [2, 3, 5]

nums = [1] * n
candidates_indexes = [0 for _ in bases]
candidates = [base for base in bases]

for i in range(1, n):
    nextn = min(candidates)
    nums[i] = nextn

    for index, val in enumerate(candidates):
        if val == nextn:
            candidates_indexes[index] += 1
            candidates[index] = bases[index] * nums[candidates_indexes[index]]

print(nums)
</snippet></ROW><ROW><id>7337949</id><snippet>In [10]: set(tuple(sorted(elt)) for elt in example)
Out[10]: set([ ((0, 1), (2, 1)) ])
</snippet></ROW><ROW><id>7338125</id><snippet>import your_module
your_module.parameter1 = 23
your_module.parameter2 = 46
the_result = your_module.f_var_2
</snippet></ROW><ROW><id>7338125</id><snippet>import your_module
the_result = your_module.f_var_1(23, 46)
</snippet></ROW><ROW><id>7338304</id><snippet>mapper</snippet></ROW><ROW><id>7338304</id><snippet>sqlalchemy.sql.join</snippet></ROW><ROW><id>7338304</id><snippet>sqlalchemy.select</snippet></ROW><ROW><id>7338304</id><snippet>mapper</snippet></ROW><ROW><id>7338304</id><snippet>sqlalchemy.orm.column_property</snippet></ROW><ROW><id>7338353</id><snippet>sentence = 'I    live in  Virginia   and it is  raining     today'
' '.join([segment for segment in sentence.split()])
</snippet></ROW><ROW><id>7338687</id><snippet>bar = None
if foo():
    bar = "Baz"

if bar is None:
    bar = "Quux"
</snippet></ROW><ROW><id>7338687</id><snippet>if foo():
    bar = "Baz"
else:
    bar = "Quux"
</snippet></ROW><ROW><id>7338984</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>7338984</id><snippet>fieldnames</snippet></ROW><ROW><id>7338984</id><snippet>restval</snippet></ROW><ROW><id>7339258</id><snippet>cdef class pyScene:
    cdef Scene * m_scene
    cdef object drill_button_func

    def setDrillButtonCallback(self, func):
        self.m_scene.setDrillButtonCallback(pyHDButtonCallback, &lt;void*&gt;func)
        self.drill_button_func = func
</snippet></ROW><ROW><id>7339484</id><snippet>md5(salt + password)</snippet></ROW><ROW><id>7339484</id><snippet>crypt()</snippet></ROW><ROW><id>7339484</id><snippet>$1$</snippet></ROW><ROW><id>7339484</id><snippet>crypt()</snippet></ROW><ROW><id>7339484</id><snippet>$1$</snippet></ROW><ROW><id>7339484</id><snippet>crypt()</snippet></ROW><ROW><id>7339484</id><snippet>crypt()</snippet></ROW><ROW><id>7339484</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>7339484</id><snippet>User.set_password</snippet></ROW><ROW><id>7339484</id><snippet>User.check_password</snippet></ROW><ROW><id>7339484</id><snippet>passlib.ext.django</snippet></ROW><ROW><id>7339484</id><snippet>settings.py</snippet></ROW><ROW><id>7339484</id><snippet>PASSLIB_CONFIG = """
[passlib]
schemes =
    md5_crypt,
    django_salted_sha1, django_salted_md5,
    django_des_crypt, hex_md5,
    django_disabled

default = md5_crypt

deprecated = django_des_crypt, hex_md5
"""
</snippet></ROW><ROW><id>7339484</id><snippet>User.set_password</snippet></ROW><ROW><id>7339484</id><snippet>User.check_password</snippet></ROW><ROW><id>7339738</id><snippet>yield</snippet></ROW><ROW><id>7339738</id><snippet>yield</snippet></ROW><ROW><id>7339738</id><snippet>yield</snippet></ROW><ROW><id>7339738</id><snippet>if False: yield</snippet></ROW><ROW><id>7340031</id><snippet>sorted</snippet></ROW><ROW><id>7340031</id><snippet>get</snippet></ROW><ROW><id>7340031</id><snippet>sorted(A, key=A.get)
</snippet></ROW><ROW><id>7340294</id><snippet>c</snippet></ROW><ROW><id>7340294</id><snippet>run_sql_command</snippet></ROW><ROW><id>7340294</id><snippet>get_sql_object()</snippet></ROW><ROW><id>7340294</id><snippet>.c</snippet></ROW><ROW><id>7340564</id><snippet>In [34]: x = np.array([(1, 0), (0, 1)])
</snippet></ROW><ROW><id>7340564</id><snippet>view</snippet></ROW><ROW><id>7340564</id><snippet>In [35]: y = x.ravel().view(dtype=[('x', x.dtype), ('y', x.dtype)])
</snippet></ROW><ROW><id>7340564</id><snippet>np.argsort</snippet></ROW><ROW><id>7340564</id><snippet>y</snippet></ROW><ROW><id>7340564</id><snippet>order</snippet></ROW><ROW><id>7340564</id><snippet>In [36]: np.argsort(y, order=('x','y'))
</snippet></ROW><ROW><id>7340640</id><snippet>return</snippet></ROW><ROW><id>7340640</id><snippet>def optimize(current_price = 0.1, last_profit = 0.0):
    current_profit = profit(current_price)
    if (last_profit &gt; current_profit) and (current_profit &gt; 0.0):
        return {'best_price': current_price - 0.1, 'best_profit': last_profit}
    else: # Add return below here
        return optimize(current_price + 0.1, current_profit)
</snippet></ROW><ROW><id>7341192</id><snippet>#!/usr/bin/env python

from PyQt4 import QtGui, QtCore
import sys

class RotatedButton(QtGui.QPushButton):
    def __init__(self, text, parent, orientation = "west"):
        super(RotatedButton,self).__init__(text, parent)
        self.orientation = orientation

    def paintEvent(self, event):
        painter = QtGui.QStylePainter(self)
        painter.rotate(90)
        painter.translate(0, -1 * self.width());
        painter.drawControl(QtGui.QStyle.CE_PushButton, self.getSyleOptions())

    def minimumSizeHint(self):
        size = super(RotatedButton, self).minimumSizeHint()
        size.transpose()
        return size

    def sizeHint(self):
        size = super(RotatedButton, self).sizeHint()
        size.transpose()
        return size

    def getSyleOptions(self):
        options = QtGui.QStyleOptionButton()
        options.initFrom(self)
        size = options.rect.size()
        size.transpose()
        options.rect.setSize(size)
        options.features = QtGui.QStyleOptionButton.None
        if self.isFlat():
            options.features |= QtGui.QStyleOptionButton.Flat
        if self.menu():
            options.features |= QtGui.QStyleOptionButton.HasMenu
        if self.autoDefault() or self.isDefault():
            options.features |= QtGui.QStyleOptionButton.AutoDefaultButton
        if self.isDefault():
            options.features |= QtGui.QStyleOptionButton.DefaultButton
        if self.isDown() or (self.menu() and self.menu().isVisible()):
            options.state |= QtGui.QStyle.State_Sunken
        if self.isChecked():
            options.state |= QtGui.QStyle.State_On
        if not self.isFlat() and not self.isDown():
            options.state |= QtGui.QStyle.State_Raised

        options.text = self.text()
        options.icon = self.icon()
        options.iconSize = self.iconSize()
        return options


class Main(QtGui.QFrame):
    def __init__(self):
        QtGui.QFrame.__init__(self)

        self.application = QtCore.QCoreApplication.instance()
        self.layout = QtGui.QHBoxLayout()
        self.button = RotatedButton("Hello", self, orientation="west")
        self.layout.addWidget(self.button)
        self.setLayout(self.layout)

if __name__ == '__main__':

    application = QtGui.QApplication(sys.argv)
    application.main = Main()
    application.main.show()
    sys.exit(application.exec_())
</snippet></ROW><ROW><id>7341194</id><snippet>blank=True
</snippet></ROW><ROW><id>7341194</id><snippet>rushing_attempts = models.CharField(
        max_length = 100,
        verbose_name = "Rushing Attempts",
        blank=True
        )
</snippet></ROW><ROW><id>7341521</id><snippet>f = open("...")

d = {}

for line in f:
    x = line.split()
    if len(x) == 4: #skip empty lines
        k = x[1]
        v = float(x[3])
        if not k in d: d[k] = v
        elif v &gt; d[k]: d[k] = v #because we only need max of values

f.close()

sm = sum(d.values())

print d
print sm
print sm / len(d)

&gt;&gt;&gt; 
{'12': 89.0, '23': 45.0, '31': 45.0, '1': 66.0, '2': 78.0, '4': 45.0}
368.0
61.3333333333
</snippet></ROW><ROW><id>7341552</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>7341552</id><snippet> if __name__ == "__main__":
     logging.basicConfig(...)
     main()
     logging.shutdown()
</snippet></ROW><ROW><id>7341552</id><snippet>log = logging.getLogger(__name__)

func1_log = logging.getLogger( "{0}.{1}".format( __name__, "my_func1" )
</snippet></ROW><ROW><id>7341552</id><snippet>log.setLevel( logging.INFO )
func1_log.setLevel( logging.ERROR )
</snippet></ROW><ROW><id>7341564</id><snippet>logging</snippet></ROW><ROW><id>7341564</id><snippet>logger.getLogger(name)</snippet></ROW><ROW><id>7341564</id><snippet>get_log()</snippet></ROW><ROW><id>7341564</id><snippet>setup_log()</snippet></ROW><ROW><id>7341564</id><snippet>setup_log()</snippet></ROW><ROW><id>7341564</id><snippet>logging.getLogger()</snippet></ROW><ROW><id>7341671</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>7341864</id><snippet>import numpy as np
np.array([(s, list(row).index(your_element)) for s,row in enumerate(your_array)])
</snippet></ROW><ROW><id>7341864</id><snippet>ValueError</snippet></ROW><ROW><id>7341864</id><snippet>your_element</snippet></ROW><ROW><id>7341864</id><snippet>ValueError</snippet></ROW><ROW><id>7341864</id><snippet>your_element</snippet></ROW><ROW><id>7341864</id><snippet>np.array([(s, list(row).index(your_element)) for s,row in enumerate(your_array) if your_element in row])
</snippet></ROW><ROW><id>7342495</id><snippet>QGraphicsTextItem* textItem0 = new QGraphicsTextItem("Test Text Item", 0, scene);
int x = x - textItem0-&gt;boundingRect().width() / 2;
int y = y - textItem0-&gt;boundingRect().height() / 2;
textItem0-&gt;setPos(x, y);  
</snippet></ROW><ROW><id>7342548</id><snippet>/** Represents a record.
 */
class Record

/** Represents a respondent.
 */
class Respondent extends Record

/** Represents a pregnancy.
 */
class Pregnancy extends Record
</snippet></ROW><ROW><id>7342548</id><snippet>/** ... */</snippet></ROW><ROW><id>7342548</id><snippet>List[Int]</snippet></ROW><ROW><id>7342548</id><snippet>List[String]</snippet></ROW><ROW><id>7342646</id><snippet>.py</snippet></ROW><ROW><id>7342902</id><snippet>class B(A):
    def __new__(cls,data,name):
        obj = A.__new__(cls, data)
        obj.name = name
        return obj
</snippet></ROW><ROW><id>7342902</id><snippet>__new__</snippet></ROW><ROW><id>7342902</id><snippet>view</snippet></ROW><ROW><id>7342902</id><snippet>class B(A):
    def __new__(cls,data):
        obj = A(data)
        return obj.view(cls)
</snippet></ROW><ROW><id>7342902</id><snippet>__array_finalize__</snippet></ROW><ROW><id>7342902</id><snippet>A</snippet></ROW><ROW><id>7342902</id><snippet>B</snippet></ROW><ROW><id>7343205</id><snippet>%timeit</snippet></ROW><ROW><id>7343205</id><snippet>ipython</snippet></ROW><ROW><id>7343205</id><snippet>if a == b or str(a) == str(b):
    ... they are equal ...
</snippet></ROW><ROW><id>7343322</id><snippet>addressStart = r'!-- CLTAG xstreet0='
addressEnd = r'--&gt;'

prog = re.compile(addressStart + r'(.*?)' + addressEnd)
result = prog.match(string)
</snippet></ROW><ROW><id>7343760</id><snippet>os.filestart</snippet></ROW><ROW><id>7343760</id><snippet>os.startfile</snippet></ROW><ROW><id>7343760</id><snippet>system('open', filepath)</snippet></ROW><ROW><id>7343760</id><snippet>system('xdg-open', filepath)</snippet></ROW><ROW><id>7343815</id><snippet>y = interpolate(x_values, y_values, x)</snippet></ROW><ROW><id>7343815</id><snippet>y</snippet></ROW><ROW><id>7343815</id><snippet>x</snippet></ROW><ROW><id>7343815</id><snippet>x_values</snippet></ROW><ROW><id>7343815</id><snippet>x</snippet></ROW><ROW><id>7343815</id><snippet>x=3</snippet></ROW><ROW><id>7343815</id><snippet>[x1,x2]=[2.5,3.4]</snippet></ROW><ROW><id>7343815</id><snippet>i1=1</snippet></ROW><ROW><id>7343815</id><snippet>i2=2</snippet></ROW><ROW><id>7343815</id><snippet>(y_values[i2]-y_values[i2])/(x_values[i2]-x_values[i1])</snippet></ROW><ROW><id>7343815</id><snippet>dy/dx</snippet></ROW><ROW><id>7343815</id><snippet>x</snippet></ROW><ROW><id>7343815</id><snippet>x1</snippet></ROW><ROW><id>7343815</id><snippet>x1</snippet></ROW><ROW><id>7343815</id><snippet>x</snippet></ROW><ROW><id>7343815</id><snippet>x_values</snippet></ROW><ROW><id>7343871</id><snippet>"xxx@yyy.com@zzz.com".replace("@zzz.com", "")
</snippet></ROW><ROW><id>7343871</id><snippet>data = "xxx@yyy.com@zzz.com"
if data.count("@") == 2:
    data = data.rsplit('@', 1)[0]
</snippet></ROW><ROW><id>7343871</id><snippet>data = "xxx@yyy.com@zzz.com@___.com"
if data.count("@") &gt; 1:
    data = data.rsplit('@', data.count("@")-1)[0]
</snippet></ROW><ROW><id>7344759</id><snippet>import numpy as np
np.random.seed(0)
r = np.random.rand(10,2)-0.5
v = np.random.rand(10) + np.random.rand(10)*1j
</snippet></ROW><ROW><id>7344759</id><snippet>idx = r[:,0] &gt; 0 # idx is a bool array 
r1 = r[idx]
v1 = v[idx]

r2 = r[~idx] # ~idx compute bit-wise NOT, element-wise
v2 = v[~idx]
</snippet></ROW><ROW><id>7344767</id><snippet>import xml.etree.ElementTree as ET

def GetMapData( xmlfile ):
    result = ""
    try:
        tree = ET.parse( xmlfile )
    except IOError, e:
        print "Failure Parsing %s: %s" % (xmlfile, e)
    root = tree.getroot() # root node
    for child in root:
        if ( child.tag == 'LandmarkPointListXml' ):
            result += '|' + loopLandmark(child) + '|'
        elif child.text is not None:
            result += child.text + ','
    return result

def loopLandmark( landmarks ):
    result=""
    for landmark in landmarks:
        if ( landmark.tag == 'anyType' ): # check also xsi:type="LandmarkPointProperty"?
            for child in landmark:
                if ( child.text and child.tag in [ 'LandmarkPointX', 'LandmarkPointY' ] ):
                    result += child.text + ','
    return result

GetMapData( 'xml.in' )
</snippet></ROW><ROW><id>7345031</id><snippet>stanford</snippet></ROW><ROW><id>7345031</id><snippet>StanfordTagger</snippet></ROW><ROW><id>7345031</id><snippet>&gt;&gt;&gt; from nltk.tag.stanford import StanfordTagger
</snippet></ROW><ROW><id>7345031</id><snippet>&gt;&gt;&gt; st = stanford.StanfordTagger('bidirection-distsim-wsj-0-18.tagger')
</snippet></ROW><ROW><id>7345634</id><snippet>QHeaderView</snippet></ROW><ROW><id>7345634</id><snippet>QAbstractItemModel</snippet></ROW><ROW><id>7345634</id><snippet>headerData()</snippet></ROW><ROW><id>7345634</id><snippet>QVariant QAbstractItemModel::headerData ( int section, Qt::Orientation orientation, int role = Qt::DisplayRole ) const [virtual]
</snippet></ROW><ROW><id>7345634</id><snippet>Qt::BackgroundColorRole</snippet></ROW><ROW><id>7345634</id><snippet>QVariant VariableHeaderModel::headerData(int section Qt::Orientation orientation, int role)
{
  QVariant result;
  if (role == Qt::BackgroundColorRole)
  {
    result = &lt;QColor from custom processing&gt;
  }
  else
  {
    result = Superclass::headerData(section, orientation, role);
  }
  return result;
}
</snippet></ROW><ROW><id>7345634</id><snippet>QStandardItemModel</snippet></ROW><ROW><id>7345634</id><snippet>setHeaderData(section, orientation, &lt;aColor&gt;, Qt::BackgroundColorRole);
</snippet></ROW><ROW><id>7345737</id><snippet>findall</snippet></ROW><ROW><id>7345737</id><snippet>search</snippet></ROW><ROW><id>7345737</id><snippet>print exactMatch.findall("my blue cat")
print exactMatch.findall("my red car")
print exactMatch.findall("my red and blue monkey")
print exactMatch.findall("my yellow dog")
</snippet></ROW><ROW><id>7345737</id><snippet>len()</snippet></ROW><ROW><id>7345737</id><snippet>print len(exactMatch.findall("my blue cat"))
print len(exactMatch.findall("my red car"))
print len(exactMatch.findall("my red and blue monkey"))
print len(exactMatch.findall("my yellow dog"))
</snippet></ROW><ROW><id>7346236</id><snippet>re.compile( r"(P[\w]{2}P)" )
</snippet></ROW><ROW><id>7346236</id><snippet>re.compile( r"(P[A-Z]{2}P)" )
</snippet></ROW><ROW><id>7346504</id><snippet>#!/usr/bin/env python

import string

s=string.Template("""
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"

        "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
    &lt;title&gt;My page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;$text&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
""")

s.substitute(text='Hello World')
</snippet></ROW><ROW><id>7346606</id><snippet>md5.stdout.read()</snippet></ROW><ROW><id>7346606</id><snippet>md5.stdout</snippet></ROW><ROW><id>7346606</id><snippet>md5.stdout.readline()</snippet></ROW><ROW><id>7346606</id><snippet>''</snippet></ROW><ROW><id>7346606</id><snippet>for f in iter(md5.stdout.readline, ''):
    fc = f.rstrip("\n")
    sys.stdout.write("\rChecked " + fc)
    sys.stdout.flush()
</snippet></ROW><ROW><id>7346606</id><snippet>read()</snippet></ROW><ROW><id>7346717</id><snippet>vmstat | awk '(NR==2){for(i=1;i&lt;=NF;i++)if($i=="id"){getline; print $i}}'
</snippet></ROW><ROW><id>7346876</id><snippet>def calc(my_file, my_list)

    vd = dict( (v[1],v[0]) for v in my_list)

    my_file.seek(0,0)
    for line in my_file:
        f0, f1, f2, f3 = line[:-1].split('\t')
        v0 = vd.get(f2)
        if v0 is not None:
           yield (v0, f1, f3)
</snippet></ROW><ROW><id>7346876</id><snippet>my_list</snippet></ROW><ROW><id>7346876</id><snippet>get</snippet></ROW><ROW><id>7346876</id><snippet>i[2]</snippet></ROW><ROW><id>7346876</id><snippet>vd</snippet></ROW><ROW><id>7346876</id><snippet>vd[i[2]]</snippet></ROW><ROW><id>7347047</id><snippet>import sys
if sys.versioninfo[0] == 2:
    import startup2
else:
    import startup3
</snippet></ROW><ROW><id>7347144</id><snippet>from sqlalchemy import *
e = create_engine("postgresql://xxx:xxx@localhost:5432/db")
c = e.connect()
c.dialect.dbapi.extensions.register_adapter
c.dialect.dbapi.extensions.new_type
</snippet></ROW><ROW><id>7347169</id><snippet>Entry(...)</snippet></ROW><ROW><id>7347169</id><snippet>grid</snippet></ROW><ROW><id>7347169</id><snippet>pack</snippet></ROW><ROW><id>7347169</id><snippet>place</snippet></ROW><ROW><id>7347169</id><snippet>import Tkinter as tk
import tkFileDialog

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.button = tk.Button(text="Pick a file!", command=self.pick_file)
        self.button.pack()
        self.entry_frame = tk.Frame(self)
        self.entry_frame.pack(side="top", fill="both", expand=True)
        self.entry_frame.grid_columnconfigure(0, weight=1)

    def pick_file(self):
        file = tkFileDialog.askopenfile(title="pick a file!")
        if file is not None:
            entry = tk.Entry(self)
            entry.insert(0, file.name)
            entry.grid(in_=self.entry_frame, sticky="ew")
            self.button.configure(text="Pick another file!")

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>7347305</id><snippet>remove</snippet></ROW><ROW><id>7347305</id><snippet>None</snippet></ROW><ROW><id>7347305</id><snippet>print list1.remove('\n')</snippet></ROW><ROW><id>7347305</id><snippet>None</snippet></ROW><ROW><id>7347305</id><snippet>list1.remove('\n')
print list1
</snippet></ROW><ROW><id>7347305</id><snippet>list2 = [a for a in list1 if a != '\n']
</snippet></ROW><ROW><id>7347305</id><snippet>list1.remove</snippet></ROW><ROW><id>7347305</id><snippet>while True:
    try:
        list1.remove('\n')
    except ValueError:
        break
</snippet></ROW><ROW><id>7347511</id><snippet>sys.exit(something_else_than_zero)</snippet></ROW><ROW><id>7347867</id><snippet>--no-dependencies</snippet></ROW><ROW><id>7347867</id><snippet>--no-deps</snippet></ROW><ROW><id>7347867</id><snippet>pip install --no-dependencies -r requirements.txt
</snippet></ROW><ROW><id>7347961</id><snippet>from numpy import array, argwhere

A = array([[0  ,6  ,89 ,255,1  ,6  ,7  ],
           [0  ,255,89 ,255,1  ,1  ,7  ],
           [255,255,255,255,255,255,255],
           [1  ,2  ,3  ,4  ,5  ,6  ,7  ],
           [1  ,1  ,255,5  ,7  ,3  ,255]])

B = argwhere(A==255)
(ystart, xstart), (ystop, xstop) = B.min(0), B.max(0) 
</snippet></ROW><ROW><id>7347995</id><snippet>import urllib2
ret = urllib2.urlopen('http://hostname/directory/file.jpg')
if ret.code == 200:
    print "Exists!"
</snippet></ROW><ROW><id>7348462</id><snippet>TreeView</snippet></ROW><ROW><id>7348658</id><snippet>gamma</snippet></ROW><ROW><id>7348658</id><snippet>gamma(101)-fac(100)</snippet></ROW><ROW><id>7348658</id><snippet>fac(100)</snippet></ROW><ROW><id>7348658</id><snippet>&gt;&gt;&gt; gamma(101)
9.332621544394415e+157
&gt;&gt;&gt; float(fac(100))
9.332621544394415e+157
</snippet></ROW><ROW><id>7348658</id><snippet>fac(100)</snippet></ROW><ROW><id>7348658</id><snippet>gamma(101)</snippet></ROW><ROW><id>7348658</id><snippet>0.0</snippet></ROW><ROW><id>7348658</id><snippet>gamma(101)</snippet></ROW><ROW><id>7348658</id><snippet>math.floor</snippet></ROW><ROW><id>7348658</id><snippet>&gt;&gt;&gt; math.floor(gamma(101)) == gamma(101)
True
</snippet></ROW><ROW><id>7348658</id><snippet>gamma(101)</snippet></ROW><ROW><id>7348658</id><snippet>&gt;&gt;&gt; long(gamma(101))
933262154439441509656467047959538825784009703731840988
310128895405822272385704312950661130892883272778258496
64006524270554535976289719382852181865895959724032L
&gt;&gt;&gt; fac(100)
933262154439441526816992388562667004907159682643816214
685929638952175999932299156089414639761565182862536979
20827223758251185210916864000000000000000000000000L
</snippet></ROW><ROW><id>7348985</id><snippet>def</snippet></ROW><ROW><id>7348985</id><snippet>lambda</snippet></ROW><ROW><id>7348985</id><snippet>map</snippet></ROW><ROW><id>7348985</id><snippet>filter</snippet></ROW><ROW><id>7349134</id><snippet>import datetime

d = datetime.date(2011,9,8)
last_day = datetime.date(d.year, d.month+1, 1) - datetime.timedelta(1,0,0)
</snippet></ROW><ROW><id>7349244</id><snippet>death</snippet></ROW><ROW><id>7349244</id><snippet>room==death</snippet></ROW><ROW><id>7349244</id><snippet>print room.__doc__</snippet></ROW><ROW><id>7349244</id><snippet>None</snippet></ROW><ROW><id>7349244</id><snippet>runnner</snippet></ROW><ROW><id>7349244</id><snippet>return "death"</snippet></ROW><ROW><id>7349244</id><snippet>runner()</snippet></ROW><ROW><id>7349244</id><snippet>pass</snippet></ROW><ROW><id>7349244</id><snippet>elif</snippet></ROW><ROW><id>7349486</id><snippet>re.findall(r'"(?:\\.|[^"\\])*"', str)
</snippet></ROW><ROW><id>7349486</id><snippet>"        # Match a "
(?:      # Match either...
 \\.     # an escaped character (\\, \" etc.)
|        # or
 [^"\\]  # any character except " or \
)*       # any number of times
"        # Match a "
</snippet></ROW><ROW><id>7349486</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; test = r'"hello" "Hello\\" "I am an example" "the man said:\"hello!\\\""'
&gt;&gt;&gt; for match in re.findall(r'"(?:\\.|[^"\\])*"', test):
...     print(match)
...
"hello"
"Hello\\"
"I am an example"
"the man said:\"hello!\\\""
</snippet></ROW><ROW><id>7349719</id><snippet>&gt;&gt;&gt; a = {'a': (1, 2, 3), 'b': (3, 2, 1)}
&gt;&gt;&gt; b = a.items()
&gt;&gt;&gt; b
[('a', (1, 2, 3)), ('b', (3, 2, 1))]
&gt;&gt;&gt; b.sort(key=lambda x:x[1][2])  # sorting by the third item in the tuple
&gt;&gt;&gt; b
[('b', (3, 2, 1)), ('a', (1, 2, 3))]
</snippet></ROW><ROW><id>7349855</id><snippet>eval('map(lambda x, self=self: self.var*x, [1,2,3,4,5])')
</snippet></ROW><ROW><id>7349855</id><snippet>self=self</snippet></ROW><ROW><id>7349855</id><snippet>self</snippet></ROW><ROW><id>7350323</id><snippet>operator.itemgetter(*b)(a)
</snippet></ROW><ROW><id>7350617</id><snippet>    choice_editor = wx.grid.GridCellChoiceEditor(choices_list, True) 
    grid.SetCellEditor(row, col, choice_editor)
</snippet></ROW><ROW><id>7350788</id><snippet>third_period_slope = np.diff(y[::3]) / np.diff(x[::3])
fifth_period_slope = np.diff(y[::5]) / np.diff(x[::5])
</snippet></ROW><ROW><id>7350788</id><snippet>[-1, 0, 1]</snippet></ROW><ROW><id>7350788</id><snippet>[-1, 0, 0, 0, 1]</snippet></ROW><ROW><id>7350788</id><snippet>window = [-1, 0, 1]
slope = np.convolve(y, window, mode='same') / np.convolve(x, window, mode='same')
</snippet></ROW><ROW><id>7350792</id><snippet>tasklist /FI "IMAGENAME eq DymoPnpService.exe" /V</snippet></ROW><ROW><id>7350792</id><snippet>import psutil

def process():
    plist = psutil.get_process_list()
    plist = sorted(plist, key=lambda i: i.name)
    for i in plist:
        try:
            print i.name, i.get_cpu_percent()
        except AccessDenied:
            print "'%s' Process is not allowing us to view the CPU Usage!" % i.name

def main():
    process()

main()
</snippet></ROW><ROW><id>7350985</id><snippet>from django.contrib.auth.models import User

def compare(user1, user2):
    for field in user1._meta.fields: 
        val1 = getattr(user1, field.name)
        val2 = getattr(user2, field.name)
        if val1 != val2:
            print "%s differ '%s' != '%s'"%(field.name, val1, val2)
            break

compare(User(username="anurag"), User(username="uniyal"))
</snippet></ROW><ROW><id>7350985</id><snippet>username differ 'anurag' != 'uniyal'
</snippet></ROW><ROW><id>7350985</id><snippet>clone_me</snippet></ROW><ROW><id>7350985</id><snippet>me</snippet></ROW><ROW><id>7350985</id><snippet>me</snippet></ROW><ROW><id>7351129</id><snippet>(?:\s+(\w+)[^\n]*)+
                ^ ^
</snippet></ROW><ROW><id>7351129</id><snippet>&gt;&gt;&gt; print m.groups()
('data3', 'ESample')
</snippet></ROW><ROW><id>7351246</id><snippet>glob</snippet></ROW><ROW><id>7351246</id><snippet>import glob
for csvfilename in glob.glob(r"C:\mydirectory\*.csv"):
    #do_something
</snippet></ROW><ROW><id>7351246</id><snippet>csv</snippet></ROW><ROW><id>7351246</id><snippet>import csv
with open(csvfilename, "rb") as csvfile:
    reader = csv.reader(csvfile, delimiter=",")
    for row in reader:
        # row is a list of all the entries in the current row
</snippet></ROW><ROW><id>7351246</id><snippet>datetime</snippet></ROW><ROW><id>7351246</id><snippet>from datetime import datetime
startdate = datetime.strptime("1999-10-20", "%Y-%m-%d")
enddate = datetime.strptime("2003-02-28", "%Y-%m-%d")
delta = enddate - startdate # difference in days
</snippet></ROW><ROW><id>7351246</id><snippet>row[0:0] = [str(delta)]
</snippet></ROW><ROW><id>7351246</id><snippet>row.append(csvfilename)
</snippet></ROW><ROW><id>7351246</id><snippet>with open(csvfilename, "wb") as csvfile:
    writer = csv.writer(csvfile, delimiter=",")
    writer.writerow(row)
</snippet></ROW><ROW><id>7351246</id><snippet>import glob
import csv
from datetime import datetime

with open("combined_files_csv", "wb") as outfile:
    writer = csv.writer(outfile, delimiter=",")
    for csvfilename in glob.glob(r"C:\mydirectory\*.csv"):
        with open(csvfilename, "rb") as infile:
            reader = csv.reader(infile, delimiter=",")
            for row in reader:
                startdate = datetime.strptime(row[3], "%Y-%m-%d")
                enddate = datetime.strptime(row[2], "%Y-%m-%d")
                delta = enddate - startdate # difference in days
                row[0:0] = [str(delta)]
                row.append(csvfilename)
                writer.writerow(row)
</snippet></ROW><ROW><id>7351292</id><snippet>In [4]: print ['%5.3f' % val for val in l]
['8.364', '0.370', '0.093', '7.085', '0.469', '0.303', '9.470', '0.286', '0.229', '1.000', '9.414', '0.986', '0.534', '2.153']
</snippet></ROW><ROW><id>7351292</id><snippet>l</snippet></ROW><ROW><id>7351292</id><snippet>In [5]: print '[' + ', '.join('%5.3f' % v for v in l) + ']'
[8.364, 0.370, 0.093, 7.085, 0.469, 0.303, 9.470, 0.286, 0.229, 1.000, 9.414, 0.986, 0.534, 2.153]
</snippet></ROW><ROW><id>7351383</id><snippet>table.right-align-right-col td:last-child {
    text-align: right
}
</snippet></ROW><ROW><id>7351383</id><snippet>.. rst-class:: right-align-right-col
</snippet></ROW><ROW><id>7351547</id><snippet>setdefault</snippet></ROW><ROW><id>7351547</id><snippet>dataDict={}
for line in myFile:
        words = line.strip().split()
        userId = words[0]
        movieId = words[1]
        rating = words[2]
        innerDict = dataDict.setdefault(userId, {})
        innerDict[movieId] = rating
</snippet></ROW><ROW><id>7351789</id><snippet>rpartition(s)</snippet></ROW><ROW><id>7351789</id><snippet>rsplit(s, 1)</snippet></ROW><ROW><id>7351943</id><snippet>from PyQt4 import QtGui,QtCore

class CentralWidget(QtGui.QFrame):

    def __init__(self, *args):
        super(CentralWidget, self).__init__(*args)
        self.setStyleSheet("background-color: rgb(255,0,0); margin:5px; border:1px solid rgb(0, 255, 0); ")

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    mw = QtGui.QMainWindow()
    w = CentralWidget(mw)
    mw.setCentralWidget(w)
    mw.show()
    w.show()
    app.exec_()
</snippet></ROW><ROW><id>7352397</id><snippet>while i &lt; len(phipsi):
    if phipsi[i][0]&gt;a and phipsi[i][0]&lt;b:
        if phipsi[i][1]&gt;c and phipsi[i][1]&lt;d:
            print ('the couple [%+.2f, %+.2f] has his angles in helix' % (phipsi[i][0], phipsi[i][1]))
    else:
        print ('the couple [%+.2f, %+.2f] does not have his angles in helix' % (phipsi[i][0], phipsi[i][1]))
    i=i+1
</snippet></ROW><ROW><id>7352942</id><snippet>$ nosetest --with-coverage proj1
$ mv .coverage .coverage.1
$ nosetest --with-coverage proj2
$ mv .coverage .coverage.2
$ coverage combine
(combines .coverage.1 and .coverage.2 into a new .coverage)
$ coverage html --directory=happy-sauce
</snippet></ROW><ROW><id>7353070</id><snippet>def group_consecutives(vals, step=1):
    """Return list of consecutive lists of numbers from vals (number list)."""
    run = []
    result = [run]
    expect = None
    for v in vals:
        if (v == expect) or (expect is None):
            run.append(v)
        else:
            run = [v]
            result.append(run)
        expect = v + step
    return result

&gt;&gt;&gt; group_consecutives(a)
[[0], [47, 48, 49, 50], [97, 98, 99]]
&gt;&gt;&gt; group_consecutives(a, step=47)
[[0, 47], [48], [49], [50, 97], [98], [99]]
</snippet></ROW><ROW><id>7353105</id><snippet>random.choice()</snippet></ROW><ROW><id>7353105</id><snippet>import numpy as np
import random
from itertools import izip

data = np.random.normal(0, 1, (10, 100))
for row in data:
    good_ones = np.logical_and(row &gt;= -0.8, row &lt;= 0.8)
    good = row[good_ones]
    row_copy = np.array([x if f else random.choice(good) for f, x in izip(good_ones, row)])
</snippet></ROW><ROW><id>7353105</id><snippet>row_copy</snippet></ROW><ROW><id>7353105</id><snippet>np.array()</snippet></ROW><ROW><id>7353105</id><snippet>izip()</snippet></ROW><ROW><id>7353105</id><snippet>izip()</snippet></ROW><ROW><id>7353105</id><snippet>(f, x)</snippet></ROW><ROW><id>7353105</id><snippet>f</snippet></ROW><ROW><id>7353105</id><snippet>x</snippet></ROW><ROW><id>7353105</id><snippet>zip()</snippet></ROW><ROW><id>7353105</id><snippet>izip()</snippet></ROW><ROW><id>7353105</id><snippet>zip()</snippet></ROW><ROW><id>7353105</id><snippet>a, b = (2, 3)
</snippet></ROW><ROW><id>7353105</id><snippet>a</snippet></ROW><ROW><id>7353105</id><snippet>b</snippet></ROW><ROW><id>7353105</id><snippet>izip()</snippet></ROW><ROW><id>7353105</id><snippet>f</snippet></ROW><ROW><id>7353105</id><snippet>x</snippet></ROW><ROW><id>7353105</id><snippet>a if flag else b
</snippet></ROW><ROW><id>7353105</id><snippet>a</snippet></ROW><ROW><id>7353105</id><snippet>flag</snippet></ROW><ROW><id>7353105</id><snippet>b</snippet></ROW><ROW><id>7353105</id><snippet>x if f else random.choice(good)
</snippet></ROW><ROW><id>7353141</id><snippet>import subprocess
p1 = subprocess.Popen(["cat", "file.log"], stdout=subprocess.PIPE)
p2 = subprocess.Popen(["tail", "-1"], stdin=p1.stdout, stdout=subprocess.PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output,err = p2.communicate()
</snippet></ROW><ROW><id>7353483</id><snippet>def num_input(prompt, error):
    s = raw_input(prompt)
    for t in (int, float, complex):
        try: return t(s)
        except ValueError: pass
    print error
    return num_input(prompt, error) #better get it in the first 1k tries
</snippet></ROW><ROW><id>7353510</id><snippet>def str(obj):
    try:
        return obj.__str__()
    except ...:
        ...
</snippet></ROW><ROW><id>7353510</id><snippet>__str__</snippet></ROW><ROW><id>7353510</id><snippet>str</snippet></ROW><ROW><id>7353518</id><snippet>DISPLAY and SSH_ASKPASS</snippet></ROW><ROW><id>7353518</id><snippet>man ssh-add</snippet></ROW><ROW><id>7353521</id><snippet>the_new_list = [x.split(',') for x in text]
</snippet></ROW><ROW><id>7353521</id><snippet>&gt;&gt;&gt; text = [
... '3545869260,59.95,AUTH_CAPTURE,Jack,Franklin,810-555-2222,jack@francypants.com,01-Apr-2011 05:24:10 PM PDT\n',
... '354589999,0,VOID,Jacob,Rasnip,8224309464,goodness@finland.com,01-Apr-2011 05:24:10 PM PDT\n']
&gt;&gt;&gt; the_new_list = [x.split(',') for x in text]
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(the_new_list)
[['3545869260',
  '59.95',
  'AUTH_CAPTURE',
  'Jack',
  'Franklin',
  '810-555-2222',
  'jack@francypants.com',
  '01-Apr-2011 05:24:10 PM PDT\n'],
 ['354589999',
  '0',
  'VOID',
  'Jacob',
  'Rasnip',
  '8224309464',
  'goodness@finland.com',
  '01-Apr-2011 05:24:10 PM PDT\n']]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7353755</id><snippet>plot</snippet></ROW><ROW><id>7353755</id><snippet>import datetime
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Generate some random data
time = mdates.drange(datetime.datetime(2010, 1, 1), 
                     datetime.datetime(2011, 1, 1),
                     datetime.timedelta(days=5))
y1 = np.cumsum(np.random.random(time.size) - 0.5)
y2 = np.cumsum(np.random.random(time.size) - 0.5)
y2 = y2 * 20 + 10

# Plot things up...
fig = plt.figure()
host = fig.add_subplot(111)
par = host.twinx()

host.set_ylabel('One Thing')
par.set_ylabel('Another')

line1, = host.plot(time, y1)
line2, = par.plot(time, y2, 'go')
host.legend([line1, line2], ['Item 1', 'Item 2'])

host.xaxis_date()

plt.show()
</snippet></ROW><ROW><id>7353760</id><snippet>if __name__=="__main__":
    mydict = {}
    reader = csv.reader(open("file.csv", "rb"))
    for rows in reader:
        k = rows[0]
        v = rows[1]
        mydict[k] = v
    print mydict
</snippet></ROW><ROW><id>7353760</id><snippet>mydict = {k:v}
</snippet></ROW><ROW><id>7353760</id><snippet>mydict = {}
L = [(1, 2), (2, 4), (1, 3), (3, 2), (3, 4)]
for el in L:
    k, v = el
    if not k in mydict:
        mydict[k] = [v]
    else:
        mydict[k].append(v)

print mydict

&gt;&gt;&gt; 
{1: [2, 3], 2: [4], 3: [2, 4]}
</snippet></ROW><ROW><id>7353760</id><snippet>if __name__=="__main__":
    mydict = {}
    reader = csv.reader(open("file.csv", "rb"))
    for i, rows in enumerate(reader):
        if i == 0: continue
        k = rows[0]
        v = rows[1]
        if not k in mydict:
            mydict[k] = [v]
        else:
            mydict[k].append(v)

    print mydict
</snippet></ROW><ROW><id>7353760</id><snippet>for k, v in mydict.items():
    print "%s: %s" % (k, v)

&gt;&gt;&gt;
1: [2, 3]
2: [4]
3: [2, 4]
</snippet></ROW><ROW><id>7353760</id><snippet>if __name__=="__main__":
        mydict = {}
        reader = csv.reader(open("file.csv", "rb"))
        for i, rows in enumerate(reader):
            if i == 0: continue
            k = rows[0]
            v = rows[1]
            if not k in mydict:
                mydict[k] = [v]
            else:
                mydict[k].append(v)

        print mydict
</snippet></ROW><ROW><id>7353763</id><snippet>for i,(floatnumber_val, prod_id) in enumerate(prodName):
  prodName[i] = (floatnumber_val, prodDict.get(prod_id,prod_id))
</snippet></ROW><ROW><id>7354011</id><snippet>In [2]: word = 'asdf'   
In [3]: word[0].isupper()
Out[3]: False

In [4]: word = 'Asdf'   
In [5]: word[0].isupper()
Out[5]: True
</snippet></ROW><ROW><id>7354100</id><snippet>name = text
date = text
</snippet></ROW><ROW><id>7354100</id><snippet>name[index] = line[3:5]</snippet></ROW><ROW><id>7354100</id><snippet>text</snippet></ROW><ROW><id>7354100</id><snippet>text</snippet></ROW><ROW><id>7354100</id><snippet>name</snippet></ROW><ROW><id>7354100</id><snippet>name</snippet></ROW><ROW><id>7354100</id><snippet>date</snippet></ROW><ROW><id>7354100</id><snippet>text</snippet></ROW><ROW><id>7354100</id><snippet>name</snippet></ROW><ROW><id>7354100</id><snippet>date</snippet></ROW><ROW><id>7354100</id><snippet>text</snippet></ROW><ROW><id>7354188</id><snippet>mystring = mystring.replace(",", "")
</snippet></ROW><ROW><id>7354188</id><snippet>mystring = re.sub(",", "", mystring)
</snippet></ROW><ROW><id>7354531</id><snippet>import shlex

JAVA_COMMAND=r"javac -cp C:\\Users\\MyUsername\\Desktop\\htmlcleaner-2.2.jar Scrapping_lastfm.java"

cmdline = shlex.split(JAVA_COMMAND)

output_process = subprocess.Popen(cmdline,shell=True, stdout=subprocess.PIPE, env={'CLASSPATH':'/path/to/java/packages'})
</snippet></ROW><ROW><id>7354583</id><snippet>import socket
print socket.getdefaulttimeout()
socket.setdefaulttimeout(60)
</snippet></ROW><ROW><id>7354683</id><snippet>errno.EINTR</snippet></ROW><ROW><id>7354683</id><snippet>&gt;&gt;&gt; import errno
&gt;&gt;&gt; errno.EINTR
4
</snippet></ROW><ROW><id>7354728</id><snippet>newlist = []
for item in oldlist:
    rev = item[::-1]
    if (not (rev in oldlist)) or (item &gt; rev)
        newlist.append(item)
</snippet></ROW><ROW><id>7354763</id><snippet>currentMonth</snippet></ROW><ROW><id>7354763</id><snippet>r"(?P&lt;speaker&gt;[A-Za-z\s.]+): (?P&lt;month&gt;{m:d})".format(m=currentMonth)
</snippet></ROW><ROW><id>7354763</id><snippet>(?P&lt;month&gt;[1-12])</snippet></ROW><ROW><id>7354763</id><snippet>[1-12]</snippet></ROW><ROW><id>7354763</id><snippet>1</snippet></ROW><ROW><id>7354763</id><snippet>2</snippet></ROW><ROW><id>7354763</id><snippet>(?P&lt;month&gt;12|11|10|[1-9])</snippet></ROW><ROW><id>7354910</id><snippet>n.phone = "%c%c%c-%c%c%c-%c%c%c%c" % tuple(map(ord, n.phone))
</snippet></ROW><ROW><id>7354910</id><snippet>n.phone = "%s%s%s-%s%s%s-%s%s%s%s" % tuple(n.phone)
</snippet></ROW><ROW><id>7355417</id><snippet>&gt;&gt;&gt; chr(ord('c') &amp; ord('a'))
'a'
</snippet></ROW><ROW><id>7355532</id><snippet>evaluate</snippet></ROW><ROW><id>7355532</id><snippet>def evaluate(node):
    # evaluate parameters of the call
    params = []
    for child in node:
        params.append(evaluate(child))

    # now make the call to whatever function this node represents,
    # passing the parameters
    return node.function.call(*params)
</snippet></ROW><ROW><id>7355532</id><snippet>evaluate</snippet></ROW><ROW><id>7355532</id><snippet>def evaluate(node):
    # evaluate parameters of the call
    params = [ evaluate(child) for child in node ]

    # apply whatever function this node represents
    return node.function.call(*params)
</snippet></ROW><ROW><id>7355647</id><snippet>/home/me/</snippet></ROW><ROW><id>7355672</id><snippet>setreuid(2)</snippet></ROW><ROW><id>7355672</id><snippet>setregid(2)</snippet></ROW><ROW><id>7355672</id><snippet>exec(3)</snippet></ROW><ROW><id>7355672</id><snippet>sudo</snippet></ROW><ROW><id>7355672</id><snippet>chown root the-program; chmod +s the-program</snippet></ROW><ROW><id>7355672</id><snippet>CreateFile</snippet></ROW><ROW><id>7355672</id><snippet>SECURITY_ATTRIBUTES</snippet></ROW><ROW><id>7355672</id><snippet>bInheritHandle</snippet></ROW><ROW><id>7355672</id><snippet>TRUE</snippet></ROW><ROW><id>7355672</id><snippet>CreateProcess</snippet></ROW><ROW><id>7355672</id><snippet>requireAdministrator</snippet></ROW><ROW><id>7355672</id><snippet>true</snippet></ROW><ROW><id>7355672</id><snippet>read(2)</snippet></ROW><ROW><id>7355672</id><snippet>ReadFile</snippet></ROW><ROW><id>7355672</id><snippet>fread(3)</snippet></ROW><ROW><id>7355672</id><snippet>iostream</snippet></ROW><ROW><id>7355672</id><snippet>fdopen(3)</snippet></ROW><ROW><id>7355672</id><snippet>os</snippet></ROW><ROW><id>7355672</id><snippet>setreuid</snippet></ROW><ROW><id>7355672</id><snippet>exec*</snippet></ROW><ROW><id>7355672</id><snippet>fdopen</snippet></ROW><ROW><id>7355672</id><snippet>ctypes</snippet></ROW><ROW><id>7355975</id><snippet>def narcissist(func):
    def wrapper(self,*args,**kwargs):
        return func(*args,**kwargs)
    return wrapper

def identity(func):
    return func

if platform_1:
    modify_args=identity
else:
    modify_args=narcissist

@modify_args
def func(this,that):
    func_body
</snippet></ROW><ROW><id>7355979</id><snippet>urls = [re.findall(r'file : "(.*)"', line)[0].replace(',', '')
        for line in file if 'file :' in line]
</snippet></ROW><ROW><id>7355979</id><snippet>file = sys.stdin</snippet></ROW><ROW><id>7355979</id><snippet>file = ['file : "test, 123, 456, abcde"', 
        'other line', 
        'file : "zzzzzzzzz"]
</snippet></ROW><ROW><id>7355979</id><snippet>['test 123 456 abcde', 'zzzzzzzzz']
</snippet></ROW><ROW><id>7356065</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>7356065</id><snippet>X = numpy.loadtxt('somefile.csv', delimiter=',')
</snippet></ROW><ROW><id>7356065</id><snippet>X = [scipy.array(line.split(','), dtype='float') 
     for line in open('somefile.csv', 'r')]
</snippet></ROW><ROW><id>7356140</id><snippet>template.render</snippet></ROW><ROW><id>7356140</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>7356140</id><snippet>extends</snippet></ROW><ROW><id>7356140</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>7356140</id><snippet>template.render</snippet></ROW><ROW><id>7356140</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>7356207</id><snippet>count</snippet></ROW><ROW><id>7356207</id><snippet>fetch</snippet></ROW><ROW><id>7356307</id><snippet>def clean(self):
    start_date = cleaned_data.get("start_date")
    end_date = cleaned_data.get("end_date")
    if end_date &lt; start_date:
        msg = u"End date should be greater than start date."
        self._errors["end_date"] = self.error_class([msg])
</snippet></ROW><ROW><id>7356335</id><snippet>Django -&gt; Celery --&gt; Worker Process (always running)
           ^     |-&gt; Worker Process
           |     `-&gt; Worker Process -,
           \______ Job Complete _____/
</snippet></ROW><ROW><id>7356386</id><snippet># For BSD based platforms.
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
sock.bind(('', MCAST_PORT))
</snippet></ROW><ROW><id>7357142</id><snippet>logout</snippet></ROW><ROW><id>7357142</id><snippet>logout</snippet></ROW><ROW><id>7357224</id><snippet>t_TABLE</snippet></ROW><ROW><id>7357224</id><snippet>t_COLUMN</snippet></ROW><ROW><id>7357224</id><snippet>SELECT a FROM b;</snippet></ROW><ROW><id>7357224</id><snippet>COLUMN COLUMN COLUMN COLUMN END</snippet></ROW><ROW><id>7357224</id><snippet>t_TABLE = r'b'
t_COLUMN = r'a'
</snippet></ROW><ROW><id>7357224</id><snippet>SELECT a FROM b;</snippet></ROW><ROW><id>7357224</id><snippet>ID</snippet></ROW><ROW><id>7357245</id><snippet>foo.bar</snippet></ROW><ROW><id>7357245</id><snippet>import foo

def bar(baz):
    for qux in baz:
         for i in range(100000):
             foo.bar(qux, i)
</snippet></ROW><ROW><id>7357245</id><snippet>import foo

def bar:
    foo_bar = foo.bar
    for qux in baz:
        for i in range(100000):
            foo_bar(qux, i)
</snippet></ROW><ROW><id>7357673</id><snippet>ModelAdmin.get_object</snippet></ROW><ROW><id>7357673</id><snippet>def get_object(self, request, object_id):
    o = super(Order, self).get_object(request, object_id)
    if o:
        o._old_status = o.status
    return o
</snippet></ROW><ROW><id>7357673</id><snippet>if o.status != o._old_status</snippet></ROW><ROW><id>7357673</id><snippet>save_model</snippet></ROW><ROW><id>7358108</id><snippet>conn.commit()</snippet></ROW><ROW><id>7358205</id><snippet>epoll</snippet></ROW><ROW><id>7358205</id><snippet>epoll</snippet></ROW><ROW><id>7358205</id><snippet>epoll</snippet></ROW><ROW><id>7358205</id><snippet>epoll</snippet></ROW><ROW><id>7358205</id><snippet>nginx</snippet></ROW><ROW><id>7358205</id><snippet>tornado</snippet></ROW><ROW><id>7358205</id><snippet>epoll</snippet></ROW><ROW><id>7358342</id><snippet>eval()</snippet></ROW><ROW><id>7358342</id><snippet>exec</snippet></ROW><ROW><id>7358342</id><snippet>import optparse, sys

# Assume your CSV data is read into a list of dictionaries
sheet = [
    {'StudentId': 1, 'StudentFirstName': 'John', 'StudentLastName': 'Doe', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Bus'},
    {'StudentId': 2, 'StudentFirstName': 'Bob', 'StudentLastName': 'Chen', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Bus'},
    {'StudentId': 3, 'StudentFirstName': 'Jane', 'StudentLastName': 'Smith', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Train'},
    {'StudentId': 4, 'StudentFirstName': 'Dave', 'StudentLastName': 'Burns', 'StudentZipCode': '45467', 'StudentCommuteMethod': 'Bus'},
]

# Options parsing
parser = optparse.OptionParser()
parser.add_option('--filter', type='string', dest='filter')
options, args = parser.parse_args()

# Filter option is required
if options.filter is None:
    print &gt;&gt; sys.stderr, 'error: no filter expression given'
    sys.exit(1)

# Process rows and build result set
result = []
for row in sheet:
    # Bind each column to a local variable (StudentId, StudentFirstName, etc.);
    # this allows evaluating Python expressions on a row, for example:
    # 'StudentCommuteMethod = "Bus" and StudentZipCode = "12345"'
    for col, val in row.iteritems():
        exec '%s = %s' % (col, repr(val))

    # Apply filter to the row
    if eval(options.filter):
        result.append(row)

# Print out result set
for row in result:
    print row
</snippet></ROW><ROW><id>7358342</id><snippet>./MyPythonScript.py --filter 'StudentCommuteMethod == "Bus" and StudentZipCode == "12345"'
./MyPythonScript.py --filter 'StudentCommuteMethod == "Bus" or StudentZipCode == "12345"'
</snippet></ROW><ROW><id>7358372</id><snippet>urlfetch</snippet></ROW><ROW><id>7358372</id><snippet>%</snippet></ROW><ROW><id>7358372</id><snippet>urlfetch.fetch("https://www.goo..e/v1/runPagespeed?url=%s&amp;key=[my-key]" %
                                               "http://www.my-website.dk")
</snippet></ROW><ROW><id>7358372</id><snippet>import urllib
your_url = {'url': 'http://www.my-website.dk/&amp;key=[my-key]'}
urlfetch.fetch("https://www.g../v1/runPagespeed?%s" % urllib.urlencode(your_url))
</snippet></ROW><ROW><id>7358582</id><snippet>import re
mystring = re.sub(r"^\W+", "", mystring)
</snippet></ROW><ROW><id>7358582</id><snippet>^   # Start of string
\W+ # One or more non-alphanumeric characters
</snippet></ROW><ROW><id>7359483</id><snippet>Base</snippet></ROW><ROW><id>7359483</id><snippet>Example2</snippet></ROW><ROW><id>7359483</id><snippet>class Example2(Item):

    def __init__(self, base):
         self.base = base
         self.base.get_item(Example1()).do_something()

         # or if don't want to store base, and just call its method once:
         base.get_item(Example1()).do_something()

if __name__ == '__main__':

    base = Base()
    base.add_item(Example1())
    base.add_item(Example2(), base)
</snippet></ROW><ROW><id>7360671</id><snippet>for i, value in enumerate(values):
</snippet></ROW><ROW><id>7361274</id><snippet>in</snippet></ROW><ROW><id>7361274</id><snippet>substring in string</snippet></ROW><ROW><id>7361274</id><snippet>&gt;&gt;&gt; substring = "please help me out"
&gt;&gt;&gt; string = "please help me out so that I could solve this"
&gt;&gt;&gt; substring in string
True
</snippet></ROW><ROW><id>7361441</id><snippet>tags = self.request.get('tags').split(',')
img_ref.tags.extend(tags)
img_ref.put()
</snippet></ROW><ROW><id>7361456</id><snippet>gtk.main()</snippet></ROW><ROW><id>7361977</id><snippet>multiprocessing</snippet></ROW><ROW><id>7362256</id><snippet>(i,j)</snippet></ROW><ROW><id>7362256</id><snippet>a[i,j] != b[i,j]</snippet></ROW><ROW><id>7362274</id><snippet>\d+x\d+</snippet></ROW><ROW><id>7362274</id><snippet>$ ./ffmpeg -i test020.3gp 2&gt;&amp;1 | perl -lane 'print $1 if /(\d+x\d+)/'
176x120
</snippet></ROW><ROW><id>7362274</id><snippet>$ ./ffmpeg -i /nfshome/enilfre/pub/test020.3gp 2&gt;&amp;1 | python -c "import sys,re;[sys.stdout.write(str(re.findall(r'(\d+x\d+)', line))) for line in sys.stdin]"
</snippet></ROW><ROW><id>7362279</id><snippet>os.name</snippet></ROW><ROW><id>7362279</id><snippet>sys.platform</snippet></ROW><ROW><id>7362279</id><snippet>os.uname()</snippet></ROW><ROW><id>7362387</id><snippet>openssl</snippet></ROW><ROW><id>7362387</id><snippet>$ openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1095
</snippet></ROW><ROW><id>7362387</id><snippet>X509TestCase.test_mkcert()</snippet></ROW><ROW><id>7362737</id><snippet>words_par = 0
for words_par in lines:
    if words_par.startswith("P1" or "P2" or "P3") &amp; words_par.endswith("P1" or "P2" or "P3"):
        words_par = line.split()
    print len(words_par)
    print words_par.replace('P1', '') #doesn't display it but still counts
else:
    print 'No words'
</snippet></ROW><ROW><id>7362737</id><snippet>line.split()
</snippet></ROW><ROW><id>7362737</id><snippet>words_par.startswith("P1" or "P2" or "P3") &amp; words_par.endswith("P1" or "P2" or "P3")
</snippet></ROW><ROW><id>7362737</id><snippet>words_par.split()
</snippet></ROW><ROW><id>7362737</id><snippet>words_par.startswith("P1" or "P2" or "P3")
</snippet></ROW><ROW><id>7362737</id><snippet>words_par.startswith("P1")
</snippet></ROW><ROW><id>7362737</id><snippet>"P1" or "P2" or "P3"
</snippet></ROW><ROW><id>7362737</id><snippet>something &amp; something
</snippet></ROW><ROW><id>7362737</id><snippet>something and something
</snippet></ROW><ROW><id>7362737</id><snippet>print len(words_par)
</snippet></ROW><ROW><id>7362737</id><snippet>words = None
with open('data.txt') as f:
    words = f.read().split()
total_words = len(words)
print 'Total words:', total_words

in_para = False
para_count = 0
para_type = None
paragraph = list()
for word in words:
  if ('P1' in word or
      'P2' in word or
      'P3' in word ):
      if in_para == False:
         in_para = True
         para_type = word
      else:
         print 'Words in paragraph', para_type, ':', para_count
         print ' '.join(paragraph)
         para_count = 0
         del paragraph[:]
         para_type = word
  else:
    paragraph.append(word)
    para_count += 1
else:
  if in_para == True:
    print 'Words in last paragraph', para_type, ':', para_count
    print ' '.join(paragraph)
  else:
    print 'No words'
</snippet></ROW><ROW><id>7362737</id><snippet>print 'Words in paragraph', para_type, ':', para_count
</snippet></ROW><ROW><id>7362737</id><snippet>print 'Words in paragraph', para_type, ':', len(paragraph)
</snippet></ROW><ROW><id>7362737</id><snippet>in_para = False
para_type = None
paragraph = list()
for word in words:
  if ('P1' in word or
      'P2' in word or
      'P3' in word ):
      if in_para == False:
         in_para = True
         para_type = word
      else:
         print 'Words in paragraph', para_type, ':', len(paragraph)
         print ' '.join(paragraph)
         del paragraph[:]
         para_type = word
  else:
    paragraph.append(word)
else:
  if in_para == True:
    print 'Words in last paragraph', para_type, ':', len(paragraph)
    print ' '.join(paragraph)
  else:
    print 'No words'
</snippet></ROW><ROW><id>7362877</id><snippet>re.search</snippet></ROW><ROW><id>7362877</id><snippet>re.findall</snippet></ROW><ROW><id>7362877</id><snippet>/tmp/p</snippet></ROW><ROW><id>7362877</id><snippet>% cat /tmp/p 2&gt;&amp;1 | python -c "import re,sys; print re.search(r'(\d+x\d+)', sys.stdin.read()).group()"
176x120
</snippet></ROW><ROW><id>7362877</id><snippet>grep</snippet></ROW><ROW><id>7362877</id><snippet>egrep</snippet></ROW><ROW><id>7362877</id><snippet>% cat /tmp/p | egrep -o '[0-9]+x[0-9]+'
176x120
</snippet></ROW><ROW><id>7362955</id><snippet>IWebElement element = driver.FindElement(By.Id("something")); 
Actions action = new Actions(driver); 
actions.MoveToElement(element);
actions.Perform();

//get the DOM structure
</snippet></ROW><ROW><id>7362955</id><snippet>Perform()</snippet></ROW><ROW><id>7362955</id><snippet>MoveToElement</snippet></ROW><ROW><id>7362955</id><snippet>ClickAndHold</snippet></ROW><ROW><id>7363045</id><snippet>yield</snippet></ROW><ROW><id>7363045</id><snippet>yield</snippet></ROW><ROW><id>7363045</id><snippet>yield</snippet></ROW><ROW><id>7363085</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>7363085</id><snippet>print</snippet></ROW><ROW><id>7363085</id><snippet>utf-8</snippet></ROW><ROW><id>7363085</id><snippet>ENCODING = sys.stdout.encoding if sys.stdout.encoding else 'utf-8'
print unicode("&lt;div class='line'&gt;%s&lt;/div&gt;" % l, encoding).encode(ENCODING)
</snippet></ROW><ROW><id>7363200</id><snippet>    slice1[axis] = slice(1, -1)
    slice2[axis] = slice(2, None)
    slice3[axis] = slice(None, -2)
    # 1D equivalent -- out[1:-1] = (f[2:] - f[:-2])/2.0
</snippet></ROW><ROW><id>7363200</id><snippet>    slice1[axis] = slice(1, -1)
    slice2[axis] = slice(1, -1)
    slice3[axis] = slice(None, -2)
    # 1D equivalent -- out[1:-1] = (f[1:-1] - f[:-2])
</snippet></ROW><ROW><id>7363200</id><snippet>    slice1[axis] = slice(1, -1)
    slice2[axis] = slice(2, None)
    slice3[axis] = slice(1, -1)
    # 1D equivalent -- out[1:-1] = (f[2:] - f[1:-1])
</snippet></ROW><ROW><id>7363200</id><snippet>numpy.gradient()</snippet></ROW><ROW><id>7363200</id><snippet>/2.0</snippet></ROW><ROW><id>7363200</id><snippet>    out[slice1] = (f[slice2] - f[slice3])/2.0
</snippet></ROW><ROW><id>7364099</id><snippet>request.META.get('HTTP_REFERER')</snippet></ROW><ROW><id>7364099</id><snippet>Referer</snippet></ROW><ROW><id>7364099</id><snippet>get()</snippet></ROW><ROW><id>7364099</id><snippet>None</snippet></ROW><ROW><id>7364176</id><snippet>"L;16"</snippet></ROW><ROW><id>7364176</id><snippet>"L"</snippet></ROW><ROW><id>7364176</id><snippet>&gt;&gt;&gt; im = Image.fromstring('I;16', (16, 16), '\xCA\xFE' * 256, 'raw', 'I;16') 
&gt;&gt;&gt; im.getcolors()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/dist-packages/PIL/Image.py", line 866, in getcolors
    return self.im.getcolors(maxcolors)
ValueError: image has wrong mode
</snippet></ROW><ROW><id>7364176</id><snippet>&gt;&gt;&gt; im = Image.fromstring('L', (16, 16), '\xCA\xFE' * 256, 'raw', 'L;16') 
&gt;&gt;&gt; im
&lt;Image.Image image mode=L size=16x16 at 0x27B4440&gt;
&gt;&gt;&gt; im.getcolors()
[(256, 254)]
</snippet></ROW><ROW><id>7364176</id><snippet>0xCAFE</snippet></ROW><ROW><id>7364176</id><snippet>0xFE</snippet></ROW><ROW><id>7364291</id><snippet>source DIS.tcl</snippet></ROW><ROW><id>7364291</id><snippet>source{DIS.tcl}</snippet></ROW><ROW><id>7364317</id><snippet>void filter2D(const Mat&amp; src, Mat&amp; dst, int ddepth, const Mat&amp; kernel, Point anchor=Point(-1, -1), double delta=0, int borderType=BORDER_DEFAULT)
</snippet></ROW></DATA>