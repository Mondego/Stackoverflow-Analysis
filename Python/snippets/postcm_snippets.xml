<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>14475924</id><snippet>like = 'Hello, i found {} in your list'.format(', '.join(notFinishedModules))
</snippet></ROW><ROW><id>14475960</id><snippet>In [17]: numpy.int32(1) * 0.2 == 1 * 0.2
Out[17]: True

In [18]: type(numpy.int32(1) * 0.2)
Out[18]: numpy.float64

In [19]: type(1 * 0.2)
Out[19]: float
</snippet></ROW><ROW><id>14475960</id><snippet>numpy.float64</snippet></ROW><ROW><id>14475960</id><snippet>float</snippet></ROW><ROW><id>14475960</id><snippet>In [12]: float(numpy.int32(1) * 0.2)
Out[12]: 0.2

In [13]: numpy.float64(1 * 0.2)
Out[13]: 0.20000000000000001
</snippet></ROW><ROW><id>14476358</id><snippet>myAppObjDict</snippet></ROW><ROW><id>14476358</id><snippet>def myValue(self, whatever):
    pass
myAppObjDict['myValue'] = myValue

# Assume that myAppObjDict is already initialized.
myAppObj=type("myAppClass", (object,),myAppObjDict)
</snippet></ROW><ROW><id>14476358</id><snippet>class MyBase(object):
    def myValue(self): return 42

# Assume that myAppObjDict is already initialized.
myAppObj=type("myAppClass", (MyBase,),myAppObjDict)
</snippet></ROW><ROW><id>14476372</id><snippet>&gt;&gt;&gt; l = [i for i in range(1,101) if i % 2 == 0]
&gt;&gt;&gt; print l
[2, 4, 6, ..., 100]
</snippet></ROW><ROW><id>14476372</id><snippet>&gt;&gt;&gt; l2 = [i for i in range(2,200) if i % 2 != 0]
&gt;&gt;&gt; print l2
[3, 5, 7, ..., 199]
</snippet></ROW><ROW><id>14476372</id><snippet>&gt;&gt;&gt; total = sum(l) + sum(l2)
&gt;&gt;&gt; print total
12540
</snippet></ROW><ROW><id>14476457</id><snippet>a = np.arange(18).reshape(9,2)
b = a.reshape(3,3,2).swapaxes(0,2)

# a: 
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17]])


# b:
array([[[ 0,  6, 12],
        [ 2,  8, 14],
        [ 4, 10, 16]],

       [[ 1,  7, 13],
        [ 3,  9, 15],
        [ 5, 11, 17]]])
</snippet></ROW><ROW><id>14477041</id><snippet>alpha = atan2(A.y-B.y, A.x-B.x) - theta
C.x = B.x + BC * cos(alpha)
C.y = B.y + BC * sin(alpha)
</snippet></ROW><ROW><id>14477098</id><snippet>mylib.py</snippet></ROW><ROW><id>14477098</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>14477404</id><snippet>apt-get</snippet></ROW><ROW><id>14477404</id><snippet>apt-get</snippet></ROW><ROW><id>14477404</id><snippet>apt-get --assume-yes remove xxx
</snippet></ROW><ROW><id>14477404</id><snippet>pexpect</snippet></ROW><ROW><id>14477404</id><snippet>pexpect</snippet></ROW><ROW><id>14477404</id><snippet>import pexpect

ag = pexpect.spawn('apt-get remove xxx')
ag.expect('Do you want to continue')
ag.send('Y')
ag.wait()
ag.close()
</snippet></ROW><ROW><id>14477656</id><snippet>sorted(d.items(), key=lambda v: (v[1], len(v[0])), reverse=True)
</snippet></ROW><ROW><id>14477656</id><snippet>&gt;&gt;&gt; sorted(d.items(), key=lambda v: (v[1], len(v[0])), reverse=True)
[('B I C', (2, 6)), ('B I', (2, 6)), ('I C', (2, 4))]
</snippet></ROW><ROW><id>14477656</id><snippet>(value, len(key))</snippet></ROW><ROW><id>14478370</id><snippet>first = [{'a':'aaa','b':'ccc','c':'bbb','d':'ddd'},
         {'a':'bb','b':2,'c':1,'d':3},
         {'a':'cc','b':22,'c':11,'d':33}]

second = [{'a':'aaa','b':'bbb','c':'ccc','d':'ddd'},
          {'a':'bb','b':1,'c':2,'d':3},
          {'a':'cc','b':11,'c':22,'d':33}]


def compare(first,second):
    for a,b in zip(first, second):
        vals_a = list(a.values())
        vals_b = list(b.values())

        vals_a.sort()
        vals_b.sort()

        if vals_a != vals_b:
            return False

    return True

print compare(first,second)
</snippet></ROW><ROW><id>14478473</id><snippet>re.sub(r"(\d+)(st|nd|rd|th)\b", r"\1", str)
</snippet></ROW><ROW><id>14478473</id><snippet>re.sub(r"(?&lt;=\d)(st|nd|rd|th)\b", '', str)
</snippet></ROW><ROW><id>14478473</id><snippet>\b</snippet></ROW><ROW><id>14478473</id><snippet>21strange</snippet></ROW><ROW><id>14478473</id><snippet>re.sub(r"(?&lt;=1\d)th\b|(?&lt;=1)st\b|(?&lt;=2)nd\b|(?&lt;=3)rd\b|(?&lt;=[04-9])th\b", r'', str)
</snippet></ROW><ROW><id>14478473</id><snippet>23rd</snippet></ROW><ROW><id>14478473</id><snippet>44th</snippet></ROW><ROW><id>14478473</id><snippet>23st</snippet></ROW><ROW><id>14478698</id><snippet>__name__</snippet></ROW><ROW><id>14478698</id><snippet>__main__</snippet></ROW><ROW><id>14478698</id><snippet>None</snippet></ROW><ROW><id>14478698</id><snippet>def example(a, b, do_b=None):
    if do_b is None:
        return a
    else:
        return b
</snippet></ROW><ROW><id>14478698</id><snippet>make_wave_snapshot</snippet></ROW><ROW><id>14478698</id><snippet>make_wave_sequence</snippet></ROW><ROW><id>14478698</id><snippet>def make_wave_snapshot(size,wavelength,phase,display=True):
    #your code here
    #...
    if display:
        dp.display_2d_array(waves_array) #Shows visual representation
</snippet></ROW><ROW><id>14478698</id><snippet>False</snippet></ROW><ROW><id>14478698</id><snippet>waves_sequence[z] = make_wave_snapshot(size,wavelength,(2*math.pi*z/nsteps), False)
</snippet></ROW><ROW><id>14478698</id><snippet>else</snippet></ROW><ROW><id>14478703</id><snippet>{% block content %}{% endblock %}
{% block sidebar %}{% endblock %}
</snippet></ROW><ROW><id>14479124</id><snippet>star1 = next(x for x in starlist if x.id==starid1)
star2 = next(x for x in starlist if x.id==starid2)
</snippet></ROW><ROW><id>14479124</id><snippet>break</snippet></ROW><ROW><id>14479124</id><snippet>star1,star2=None,None

for x in starlist:
    if x.id == starid1:
       star1 = x
       break

for x in starlist:
    if x.id == starid2:
       star2 = x
       break
</snippet></ROW><ROW><id>14479124</id><snippet>next</snippet></ROW><ROW><id>14479124</id><snippet>star1 = next((x for x in starlist if x.id==starid1), None)
</snippet></ROW><ROW><id>14479903</id><snippet>list</snippet></ROW><ROW><id>14479903</id><snippet>In [3]: list(u'\\d+')
Out[3]: [u'\\', u'd', u'+']
</snippet></ROW><ROW><id>14479903</id><snippet>list</snippet></ROW><ROW><id>14479903</id><snippet>u'\\'</snippet></ROW><ROW><id>14479903</id><snippet>u'\\'</snippet></ROW><ROW><id>14479903</id><snippet>r'\d+'</snippet></ROW><ROW><id>14479903</id><snippet>In [4]: list(r'\d+')
Out[4]: ['\\', 'd', '+']
</snippet></ROW><ROW><id>14480339</id><snippet>%20s</snippet></ROW><ROW><id>14480339</id><snippet>%-20s</snippet></ROW><ROW><id>14480372</id><snippet>window.parent.location.reload();
window.close();
</snippet></ROW><ROW><id>14480402</id><snippet>:set ts=4 sw=4</snippet></ROW><ROW><id>14480402</id><snippet>noexpandtab</snippet></ROW><ROW><id>14480402</id><snippet>noet</snippet></ROW><ROW><id>14480402</id><snippet>:set noet | retab! | set ts=4 sw=4 et | retab
</snippet></ROW><ROW><id>14480402</id><snippet>retab</snippet></ROW><ROW><id>14480402</id><snippet>:%s/^\(\(\s\{2}\)\+\)/\1\1/g
</snippet></ROW><ROW><id>14481450</id><snippet>mechanize</snippet></ROW><ROW><id>14481450</id><snippet>except mechanize.ItemNotFoundError</snippet></ROW><ROW><id>14481450</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; print mechanize.ItemNotFoundError
&lt;class 'mechanize._form.ItemNotFoundError'&gt;
&gt;&gt;&gt; print mechanize.__version__
(0, 2, 5, None, None)
</snippet></ROW><ROW><id>14481599</id><snippet>&gt;&gt;&gt; locale = Locale('es')
&gt;&gt;&gt; month_names = locale.months['format']['wide'].items()
&gt;&gt;&gt; month_names.sort()
&gt;&gt;&gt; for idx, name in month_names:
...     print name
enero
febrero
marzo
abril
mayo
junio
julio
agosto
septiembre
octubre
noviembre
diciembre
&gt;&gt;&gt; format_decimal(1.2345, locale='en_US')
u'1.234'
&gt;&gt;&gt; format_decimal(1.2345, locale='sv_SE')
u'1,234'
&gt;&gt;&gt; format_decimal(12345, locale='de_DE')
u'12.345'
</snippet></ROW><ROW><id>14481599</id><snippet>gettext</snippet></ROW><ROW><id>14481769</id><snippet>not a_tuple</snippet></ROW><ROW><id>14481769</id><snippet>True</snippet></ROW><ROW><id>14481769</id><snippet>tuple</snippet></ROW><ROW><id>14481769</id><snippet>True</snippet></ROW><ROW><id>14481769</id><snippet>if a_tuple:
    pass
</snippet></ROW><ROW><id>14481769</id><snippet>&gt;&gt;&gt; if not ():
...     print('empty!')
...
empty!
&gt;&gt;&gt; if (1, 0):
...     print('not empty!')
...
not empty!
</snippet></ROW><ROW><id>14481769</id><snippet>timeit</snippet></ROW><ROW><id>14481769</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; a_tuple = (1,0)
&gt;&gt;&gt; def ft_bool():
...     if a_tuple:
...         pass
... 
&gt;&gt;&gt; def ft_len_gt():
...     if len(a_tuple) &gt; 0:
...         pass
... 
&gt;&gt;&gt; def ft_len_ne():
...     if len(a_tuple) != 0:
...         pass
... 
&gt;&gt;&gt; timeit.timeit('ft()', 'from __main__ import ft_bool as ft')
0.17232918739318848
&gt;&gt;&gt; timeit.timeit('ft()', 'from __main__ import ft_len_gt as ft')
0.2506139278411865
&gt;&gt;&gt; timeit.timeit('ft()', 'from __main__ import ft_len_ne as ft')
0.23904109001159668
</snippet></ROW><ROW><id>14481811</id><snippet>top</snippet></ROW><ROW><id>14481811</id><snippet>curses\ncurses</snippet></ROW><ROW><id>14481811</id><snippet>Model/View</snippet></ROW><ROW><id>14482120</id><snippet>zip</snippet></ROW><ROW><id>14482120</id><snippet>LOGINFORM = {'name': FORMNAME, 'input':
     [{nick: {'name': name, 'value': value, 'type': sort}}
       for nick, name, value, sort in zip(nicks, names, values, types)]}
</snippet></ROW><ROW><id>14482120</id><snippet>type</snippet></ROW><ROW><id>14482189</id><snippet>__repr__</snippet></ROW><ROW><id>14482189</id><snippet>&gt;&gt;&gt; class point(object):
...     def __init__(self, x, y):
...         self.x = x
...         self.y = y
...         
...     def __repr__(self):
...         return "point(%d, %d)" % (self.x, self.y)
&gt;&gt;&gt; x = point(3, 4)
&gt;&gt;&gt; x
point(3, 4)
</snippet></ROW><ROW><id>14482189</id><snippet>__repr__</snippet></ROW><ROW><id>14482189</id><snippet>&gt;&gt;&gt; class defaultPoint(object):
...     def __init__(self, x, y):
...         self.x = x
...         self.y = y  
... 
&gt;&gt;&gt; p = defaultPoint(0, 3)
&gt;&gt;&gt; p
&lt;__main__.defaultPoint object at 0x16767b0&gt;
</snippet></ROW><ROW><id>14482382</id><snippet>start</snippet></ROW><ROW><id>14482382</id><snippet>stop</snippet></ROW><ROW><id>14482382</id><snippet>join</snippet></ROW><ROW><id>14482578</id><snippet>manage.py shell</snippet></ROW><ROW><id>14482578</id><snippet>ExceptionLoggingMiddleware</snippet></ROW><ROW><id>14482578</id><snippet>my_app/__init__.py</snippet></ROW><ROW><id>14482578</id><snippet>'my_app.ExceptionLoggingMiddleware'</snippet></ROW><ROW><id>14482578</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>14482578</id><snippet>settings.py</snippet></ROW><ROW><id>14482692</id><snippet>SELECT bar."foo", a."baz" FROM bar, blah AS a
</snippet></ROW><ROW><id>14482766</id><snippet>mod = __import__('animal')
spot = mod.Dog(5)
</snippet></ROW><ROW><id>14482766</id><snippet>sys.modules</snippet></ROW><ROW><id>14482766</id><snippet>sys.modules</snippet></ROW><ROW><id>14482766</id><snippet>import sub_animal
getattr(sub_animal, 'Dog')
</snippet></ROW><ROW><id>14482766</id><snippet>decorator</snippet></ROW><ROW><id>14482766</id><snippet>metaclass</snippet></ROW><ROW><id>14482766</id><snippet>class AnimalFactory(type):

    animal_classes = {}

    def __new__(cls, name, bases, attrs):

        new_class = super(AnimalFactory, cls).__new__(cls, name, bases, attrs)
        AnimalFactory.animal_classes[name] = new_class
        return new_class

    @classmethod
    def build(cls, name, *args, **kwargs):

        try:
            klass = cls.animal_classes[name]
        except KeyError:
            raise ValueError('No known animal %s' % name)
        return klass(*args, **kwargs)

class Animal(object):

    __metaclass__ = AnimalFactory

    def __init__(self, age):

        self.age = age

    def speak(self):

        raise NotImplementedError()

# As long as the file it is implemented in is imported at some point,
# the following can be anywhere

class Dog(Animal):

    def speak(self):

        return 'woof'

# And then to use, again, anywhere

new_animal = AnimalFactory.build('Dog', 5)
</snippet></ROW><ROW><id>14482791</id><snippet>a</snippet></ROW><ROW><id>14482791</id><snippet>b</snippet></ROW><ROW><id>14482791</id><snippet>vstack</snippet></ROW><ROW><id>14482791</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1,2,3])
&gt;&gt;&gt; b = a.copy()
&gt;&gt;&gt; np.vstack([a,b])
array([[1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>14482791</id><snippet>a</snippet></ROW><ROW><id>14482791</id><snippet>b</snippet></ROW><ROW><id>14482791</id><snippet>&gt;&gt;&gt; np.concatenate([a[np.newaxis,:],b[np.newaxis,:]],axis = 0)
array([[1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>14482823</id><snippet>#query for order
order = Order.get(xxx)
ninety  = datetime.datetime.now() - timedelta(days=-90) 
if order.items_add_date &lt; ninety:
    #send email
</snippet></ROW><ROW><id>14482823</id><snippet>order = Order.filter(items_add_date__lt=ninety)
</snippet></ROW><ROW><id>14483065</id><snippet>glob</snippet></ROW><ROW><id>14483065</id><snippet>import subprocess    
from glob import glob
subprocess.call(["mock"] + glob("*.src.rpm"))
</snippet></ROW><ROW><id>14483317</id><snippet>import os
import sys
directory = os.path.dirname(os.path.abspath(__file__))
sys.stdout = open(os.path.join(directory, "demo-logfiles", "log_file_template.txt"), "a")
</snippet></ROW><ROW><id>14483317</id><snippet>logging</snippet></ROW><ROW><id>14483317</id><snippet>sys.stdout</snippet></ROW><ROW><id>14483330</id><snippet>choice_set</snippet></ROW><ROW><id>14483330</id><snippet>Choice</snippet></ROW><ROW><id>14483330</id><snippet>Poll</snippet></ROW><ROW><id>14483330</id><snippet>Choice</snippet></ROW><ROW><id>14483330</id><snippet>Poll</snippet></ROW><ROW><id>14483330</id><snippet>related_name</snippet></ROW><ROW><id>14483330</id><snippet>ForeignKey</snippet></ROW><ROW><id>14483717</id><snippet>d1 = {}
with open ("file1.txt") as f:
   for line in f:
       (key,val) = line[:-1].split(": ")
       d1[key] = val.split()

d2 = {}
with open("file2.txt") as f:
   for line in f:
      (key,val) = line[:-1].split(": ")
      d2[key] = val

for word, nums in d1.items():
    print word, "-&gt;",
    for num in nums:
        if d2.has_key(num):
            print d2[num],
    print
</snippet></ROW><ROW><id>14483717</id><snippet>drinken -&gt; discrep money
leven -&gt; Optim
aanbidden -&gt; affect posemo Posfeel metaph religious
</snippet></ROW><ROW><id>14483778</id><snippet>os.walk()</snippet></ROW><ROW><id>14483778</id><snippet>&gt;&gt;&gt; os.walk("foo").next()
('foo', ['tetex', 'latex'], ['mozilla', 'firefox'])
&gt;&gt;&gt; os.walk("foo", followlinks=False).next()
('foo', ['tetex', 'latex'], ['mozilla', 'firefox'])
</snippet></ROW><ROW><id>14483778</id><snippet>for root, dirs, files in os.walk(top):
    for file in files:
        f = open(file)
        for n, l in enumerate(f, 1):
            pass
        print(file, n)
</snippet></ROW><ROW><id>14483850</id><snippet>./a.out</snippet></ROW><ROW><id>14483850</id><snippet>exec()</snippet></ROW><ROW><id>14483850</id><snippet>os.WIFSIGNALED(v)</snippet></ROW><ROW><id>14483850</id><snippet>os.WTERMSIG(v)</snippet></ROW><ROW><id>14483850</id><snippet>os.WTERMSIG(v)</snippet></ROW><ROW><id>14483850</id><snippet>v</snippet></ROW><ROW><id>14483850</id><snippet>SIGSEGV</snippet></ROW><ROW><id>14483850</id><snippet>SIGFPE</snippet></ROW><ROW><id>14483850</id><snippet>import os
import subprocess
import signal
import sys 

def pref_fun():
    signal.signal(signal.SIGFPE,foo)

def foo(signal,frame):
    print "Caught signal!"
    sys.exit(0)

sub = subprocess.Popen(["./a.out"], preexec_fn=pref_fun)
sub.wait()
v = sub.returncode
print "value: ", v
print os.WIFSIGNALED(v)
print "signal:", os.WTERMSIG(v)
print "SIGFPE", signal.SIGFPE    
</snippet></ROW><ROW><id>14483850</id><snippet>Now dividing by zero
value:  -8
True
signal: 120
SIGFPE 8
</snippet></ROW><ROW><id>14483871</id><snippet>├ ...
├── pve
│   ├── blahblah
│   │   ├── TestDefinition.py
│   │   ├── TestDefinition.pyc
│   │   ├── __init__.py
│   │   └── __init__.pyc
│   └── pve.py
├── src
│   └── definitions
│       └── THISFILE.yml
└── settings.py



# settings.py

import os
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
DEFINITIONS_ROOT = os.path.join(PROJECT_ROOT, 'src', 'definitions')


from myproject import settings 
settings.DEFINITIONS_ROOT
</snippet></ROW><ROW><id>14484263</id><snippet>def power_times(k):
    """use as power_times(k)(x)(y) =&gt; k * y^x"""
    return lambda x: lambda y: k * y**x

print power_times(2)(3)(4)  # returns 2 * 4^3 = 128
</snippet></ROW><ROW><id>14484263</id><snippet>power_times(2)</snippet></ROW><ROW><id>14484263</id><snippet>lambda x: lambda y: 2 * y ** x</snippet></ROW><ROW><id>14484263</id><snippet>lambda</snippet></ROW><ROW><id>14484263</id><snippet>def many_lambdas(x):
    """many_lambdas(x)(y)(z)(q) =&gt; x + y * z^q"""
    return lambda y: lambda z: lambda q: x + y * z ** q

print many_lambdas(1)(2)(3)(4) # prints 163
</snippet></ROW><ROW><id>14484263</id><snippet>def</snippet></ROW><ROW><id>14484263</id><snippet>many_lambdas = lambda x: lambda y: lambda z: lambda q: x + y * z ** q
</snippet></ROW><ROW><id>14484263</id><snippet>lambda</snippet></ROW><ROW><id>14484263</id><snippet>def many_funcs(x):
    def many_funcs_y(y):
        def many_funcs_z(z):
            def many_funcs_q(q):
                return x + y * z ** q
            return many_funcs_q
        return many_funcs_z
    return many_funcs_y

print many_funcs(1)(2)(3)(4)  # prints 163
</snippet></ROW><ROW><id>14484285</id><snippet>enumerate()</snippet></ROW><ROW><id>14484285</id><snippet>for i, (entry, exit, met) in enumerate(t.stats):
    t.stats[i] = (entry, exit, 1)
</snippet></ROW><ROW><id>14484337</id><snippet>.. toctree::
   :maxdepth: 2

   code
   requirment
</snippet></ROW><ROW><id>14484393</id><snippet>open()</snippet></ROW><ROW><id>14484393</id><snippet>br.open('http://google.com')
</snippet></ROW><ROW><id>14484519</id><snippet>with open('templ.txt') as templ, open('in.txt') as f:
    items = [i.strip().split('=')[0] for i in templ if '=?' in i]
    d = dict(i.strip().split('=') for i in f)
    print [(i,d[i]) for i in items if i in d]
</snippet></ROW><ROW><id>14484519</id><snippet>[('a', '500'), ('d', '600')]  # With template A
[]                            # With template B
</snippet></ROW><ROW><id>14484519</id><snippet>from itertools import imap,compress
with open('templ.txt') as templ, open('in.txt') as f:
    print list(imap(str.strip,compress(f,imap(lambda x: '=?' in x,templ))))  
</snippet></ROW><ROW><id>14484519</id><snippet>['a=500', 'd=600']
</snippet></ROW><ROW><id>14484580</id><snippet>dict</snippet></ROW><ROW><id>14484580</id><snippet>dict.get()</snippet></ROW><ROW><id>14484580</id><snippet>dict</snippet></ROW><ROW><id>14484580</id><snippet>[m.get("gparents", {}).get("parent", {}).get("child") for m in M]
</snippet></ROW><ROW><id>14484580</id><snippet>.get()</snippet></ROW><ROW><id>14484580</id><snippet>None</snippet></ROW><ROW><id>14484580</id><snippet>.get('child')</snippet></ROW><ROW><id>14484580</id><snippet>None</snippet></ROW><ROW><id>14484767</id><snippet>@memoized</snippet></ROW><ROW><id>14484767</id><snippet>@memoized
def packing(bins, objects):
    """
    Return a packing of `objects` into `bins`, or None if impossible.
    Both arguments are tuples of numbers, and the packing is
    returned in the form of a list giving the bin number for
    each object.

    &gt;&gt;&gt; packing((4,5,6), (6,5,4))
    [2, 1, 0]
    &gt;&gt;&gt; packing((4,5,6), (1,1,2,4,5))
    [0, 0, 0, 1, 2]
    """
    if not objects:
        return []
    o = objects[0]
    rest = objects[1:]
    for i, b in enumerate(bins):
        if o &lt;= b:
            p = packing(bins[:i] + (b - o,) + bins[i+1:], rest)
            if p is not None:
                return [i] + p
    return None
</snippet></ROW><ROW><id>14484767</id><snippet>def can_afford(path, cards):
    """
    Return True if `path` can be followed using `cards`, False if not.
    `cards` might be updated, so pass a copy if you don't want that to
    happen.
    """
    grays = []
    for segment in path:
        c, w = segment.color, segment.weight
        if c == 'Gray':
            grays.append(w)
        elif cards.get(c, 0) &gt;= w:
            cards[c] -= w
        else:
            return False
    return packing(tuple(cards.values()), tuple(grays)) is not None
</snippet></ROW><ROW><id>14484767</id><snippet>cards</snippet></ROW><ROW><id>14484767</id><snippet>collection.Counter</snippet></ROW><ROW><id>14484767</id><snippet>cards[c]</snippet></ROW><ROW><id>14484767</id><snippet>cards.get(c, 0)</snippet></ROW><ROW><id>14484801</id><snippet>class MyList(list):
     def __init__(self, li):
         super(MyList, self).__init__(li)
</snippet></ROW><ROW><id>14484801</id><snippet>self</snippet></ROW><ROW><id>14484801</id><snippet>&gt;&gt;&gt; class MyList(list):
...      def __init__(self, li):
...          super(MyList, self).__init__(li)
... 
&gt;&gt;&gt; ml = MyList([1, 2, 3])
&gt;&gt;&gt; ml
[1, 2, 3]
&gt;&gt;&gt; len(ml)
3
&gt;&gt;&gt; type(ml)
&lt;class '__main__.MyList'&gt;
</snippet></ROW><ROW><id>14484967</id><snippet>python</snippet></ROW><ROW><id>14484967</id><snippet>$PATH</snippet></ROW><ROW><id>14484967</id><snippet>./python</snippet></ROW><ROW><id>14484967</id><snippet>python</snippet></ROW><ROW><id>14484967</id><snippet>PATH</snippet></ROW><ROW><id>14484967</id><snippet>.bashrc</snippet></ROW><ROW><id>14484967</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>14484967</id><snippet>python2.6</snippet></ROW><ROW><id>14485083</id><snippet>global_base_path = "/home/user"

...

class Path(Base):
    ...
    relative_path = Column(String(2048))
    ...
    @property
    def absolute_path(self):
        return os.path.join(global_base_path,self.relative_path)


q = session.query(Path)
c = q.first()
print c.absolute_path
</snippet></ROW><ROW><id>14485451</id><snippet>&gt;&gt;&gt; open('/Desktop/test.csv', 'r', encoding='UTF-16').read(7)
'Y!BL- B'
</snippet></ROW><ROW><id>14485451</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.open('/Desktop/test.csv', 'r', encoding='UTF-16').read(7)
u'Y!BL- B'
</snippet></ROW><ROW><id>14485451</id><snippet>&gt;&gt;&gt; 'abcdefghijklmnopqrstuvwxyz'[1:15]
'bcdefghijklmno' # Omits the 'a', which is at index 0
</snippet></ROW><ROW><id>14485596</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>14485596</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>14485596</id><snippet>"&lt;stdin&gt;"</snippet></ROW><ROW><id>14485596</id><snippet>chmod +x /path/to/script.py</snippet></ROW><ROW><id>14485601</id><snippet>cast</snippet></ROW><ROW><id>14485601</id><snippet>request.args()</snippet></ROW><ROW><id>14485753</id><snippet>timeout</snippet></ROW><ROW><id>14485753</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>14485753</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>14485753</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>14485753</id><snippet>import signal

class TimeoutError(Exception): pass

# define the timeout handler
def handler(signum, frame):
    raise TimeoutError()

# set the timeout handler and the signal duration
signal.signal(signal.SIGALRM, handler)
signal.alarm(1)
try:
    asyncore.loop()
except TimeoutError as exc:
    print "timeout"
finally:
    signal.alarm(0)
</snippet></ROW><ROW><id>14486192</id><snippet>setup</snippet></ROW><ROW><id>14486192</id><snippet>Thread</snippet></ROW><ROW><id>14486192</id><snippet>self.setup()</snippet></ROW><ROW><id>14486192</id><snippet>setup()</snippet></ROW><ROW><id>14486192</id><snippet>setup</snippet></ROW><ROW><id>14486192</id><snippet>setup()</snippet></ROW><ROW><id>14486192</id><snippet>self</snippet></ROW><ROW><id>14486277</id><snippet>try: 
    response = urllib2.urlopen(req) 
    response_url = response.geturl() 
    if response_url==url: 
        print 'SMS sent!' 
except urllib2.URLError, e: 
    print 'Send failed!' 
    print e.reason
</snippet></ROW><ROW><id>14486278</id><snippet>class Program(QtGui.QMainWindow, Interface.Ui_MainWindow):
    def __init__(self, parent=None):
        super(Program, self).__init__(parent)
        self.setupUi(self)

        self.runArea = RunArea(self)
        self.startButton.clicked.connect(self.runArea.start)
        self.clearButton.clicked.connect(self.runArea.clear)


class RunArea():
    def __init__(self, parent=None):
        self.parent = parent

    def start(self):
        self.parent.log.setPlainText("log entry")

    def clear(self):
        self.parent.runTree.clear()
</snippet></ROW><ROW><id>14487070</id><snippet>if form.validate_on_submit():
    campaign = Campaign()
    form.populate_obj(campaign)
</snippet></ROW><ROW><id>14487233</id><snippet>secondWindow = window2()
secondWindow.Show()
</snippet></ROW><ROW><id>14487262</id><snippet>import sys
import cv2
import numpy

img = cv2.imread(sys.argv[1])
template = cv2.imread(sys.argv[2])
th, tw = template.shape[:2]

result = cv2.matchTemplate(img, template, cv2.TM_CCORR_NORMED)
threshold = 0.99
loc = numpy.where(result &gt;= threshold)
for pt in zip(*loc[::-1]):
    cv2.rectangle(img, pt, (pt[0] + tw, pt[1] + th), 0, 2)

cv2.imwrite(sys.argv[3], img)
</snippet></ROW><ROW><id>14487394</id><snippet>dis.dis()</snippet></ROW><ROW><id>14487394</id><snippet>In [208]: def f1():pass

In [209]: def f2():pass

In [210]: import dis

In [212]: def func():

        a = (f1(), f2())
        b  = [f1(), f2()]
       .....:     

In [213]: dis.dis(func)
  2           0 LOAD_GLOBAL              0 (f1)
              3 CALL_FUNCTION            0
              6 LOAD_GLOBAL              1 (f2)
              9 CALL_FUNCTION            0
             12 BUILD_TUPLE              2
             15 STORE_FAST               0 (a)

  3          18 LOAD_GLOBAL              0 (f1)
             21 CALL_FUNCTION            0
             24 LOAD_GLOBAL              1 (f2)
             27 CALL_FUNCTION            0
             30 BUILD_LIST               2
             33 STORE_FAST               1 (b)
             36 LOAD_CONST               0 (None)
             39 RETURN_VALUE        
</snippet></ROW><ROW><id>14487553</id><snippet>"abcdefghijklmnop\r\n"</snippet></ROW><ROW><id>14487553</id><snippet>"abcdefghijklmnop\n"</snippet></ROW><ROW><id>14487553</id><snippet>f = open('logs/%s.txt' % file, 'rb')
</snippet></ROW><ROW><id>14487553</id><snippet>'\n'</snippet></ROW><ROW><id>14487598</id><snippet>reindex</snippet></ROW><ROW><id>14487598</id><snippet>index</snippet></ROW><ROW><id>14487598</id><snippet>sample_mean_series.index = range(len(sample_mean_series))</snippet></ROW><ROW><id>14487636</id><snippet>frame</snippet></ROW><ROW><id>14487636</id><snippet>PIL</snippet></ROW><ROW><id>14487636</id><snippet>Image.fromarray(frame)</snippet></ROW><ROW><id>14487686</id><snippet>__main__</snippet></ROW><ROW><id>14487686</id><snippet>p1 = call1()
p1 = call2()
p1 = call3()
</snippet></ROW><ROW><id>14487686</id><snippet>import matplotlib.pyplot as plt
import numpy as np

class myClass1(object):
    def __init__(self):
        self.x = np.random.random(100)
        self.y = np.random.random(100)

    def plotNReturn1(self, subplot):
        subplot.plot(self.x,self.y,'-*',label='randNxy')
        subplot.set_title('Plot No Return1')
        subplot.legend(numpoints = 1)
    def plotNReturn2(self, subplot):
        subplot.plot(self.y,self.x,'-x',label='randNzw')
        subplot.set_title('Plot No Return2')
        subplot.legend(numpoints = 2)


if __name__=='__main__':
    f = myClass1()
    p = plt.figure()

    p1 = p.add_subplot(122)
    f.plotNReturn2(p1)

    p2 = p.add_subplot(121)
    f.plotNReturn2(p2)

    plt.show()
</snippet></ROW><ROW><id>14487770</id><snippet>-tt</snippet></ROW><ROW><id>14487770</id><snippet>python -tt yourscript.py
</snippet></ROW><ROW><id>14487770</id><snippet>expand</snippet></ROW><ROW><id>14487770</id><snippet>expand -t 4 yourscript.y
</snippet></ROW><ROW><id>14487770</id><snippet>-t 4</snippet></ROW><ROW><id>14487770</id><snippet>expand</snippet></ROW><ROW><id>14487781</id><snippet>&gt;&gt;&gt; students = Students.objects.all()

# The queryset's model class:
&gt;&gt;&gt; students.model
project.app.models.Student

# Name of the model class:
&gt;&gt;&gt; students.model.__name__
'Student'

# Import path of the models module:
&gt;&gt;&gt; students.model.__module__
'project.app.models'

# Django app name:
&gt;&gt;&gt; students.model._meta.app_label
'app'
</snippet></ROW><ROW><id>14487976</id><snippet>easy_install</snippet></ROW><ROW><id>14487976</id><snippet>easy_install</snippet></ROW><ROW><id>14487976</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ python3.0 distribute_setup.py
</snippet></ROW><ROW><id>14487976</id><snippet>~/bin/easy_install</snippet></ROW><ROW><id>14487976</id><snippet>easy_install-3.0</snippet></ROW><ROW><id>14487976</id><snippet>urllib3</snippet></ROW><ROW><id>14487976</id><snippet>$ easy_install-3.0 urllib3
</snippet></ROW><ROW><id>14488076</id><snippet>try/finally</snippet></ROW><ROW><id>14488076</id><snippet>try:
    sem.acquire()
    eventlet.sleep(HIT_DELAY)
    lphtml = urllib2.urlopen(list_page_url).read()
finally:
    sem.release()
</snippet></ROW><ROW><id>14488262</id><snippet>clean_html</snippet></ROW><ROW><id>14488262</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14488262</id><snippet>findAll</snippet></ROW><ROW><id>14488262</id><snippet>clean_html</snippet></ROW><ROW><id>14488262</id><snippet>div</snippet></ROW><ROW><id>14488262</id><snippet>page = [nltk.clean_html(str(d)) for d in soup.findAll('div',id="bodyContent")]
</snippet></ROW><ROW><id>14488262</id><snippet>page = map(nltk.clean_html, soup.findAll('div',id="bodyContent"))
</snippet></ROW><ROW><id>14488317</id><snippet>try:
    if not all( (0 &lt;= int(i) &lt;= 10000) for i in mystring.split() ):
       raise ValueError("arg!")
except ValueError:
    print "Oops, didn't pass"
</snippet></ROW><ROW><id>14488317</id><snippet>int</snippet></ROW><ROW><id>14488317</id><snippet>def test_str(mystring):
    try:
        return all( (0 &lt;= int(i) &lt;= 10000) for i in mystring.split() )
    except ValueError:
        return False

print test_str("123 345 456 567 abc 789")
print test_str("123 345 456 567 -300 789")
print test_str("123 345 456 567 300 789")
</snippet></ROW><ROW><id>14488430</id><snippet>world = renderer('buildnew')
world()
</snippet></ROW><ROW><id>14488430</id><snippet>world()</snippet></ROW><ROW><id>14488430</id><snippet>world</snippet></ROW><ROW><id>14488430</id><snippet>__call__</snippet></ROW><ROW><id>14488592</id><snippet>import re

consequitivedots = re.compile(r'\.{3,}')
consequitivedots.sub('', inputstring)
</snippet></ROW><ROW><id>14488592</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; consequitivedots = re.compile(r'\.{3,}')
&gt;&gt;&gt; inputstring = '''\
... Friends and family......................................-1
... XBox 360 ................................................-2
... '''
&gt;&gt;&gt; consequitivedots.sub('', inputstring)
'Friends and family-1\nXBox 360 -2\n'
&gt;&gt;&gt; print consequitivedots.sub('', inputstring)
Friends and family-1
XBox 360 -2
</snippet></ROW><ROW><id>14488618</id><snippet>DataFrame</snippet></ROW><ROW><id>14488618</id><snippet>DataFrame is a 2-dimensional labeled data structure with columns of potentially
different types. You can think of it like a spreadsheet or SQL table, or a dict
of Series objects. It is generally the most commonly used pandas object. Like
Series, DataFrame accepts many different kinds of input.
</snippet></ROW><ROW><id>14488618</id><snippet>import pandas as pd

table  = soup.find('table', attrs={'class': 'sortable statsb'})
header = [th.text for th in table.find('thead').select('th')]
header[:2] = ['',' ']
body   = [[td.text for td in row.select('td')]
             for row in table.findAll('tr', attrs = {"onmouseover":"hl(this)"})]
cols   =  zip(*body)
tbl_d  = {name:col for name, col in zip(header,cols)}

print pd.DataFrame(tbl_d, columns = header)
</snippet></ROW><ROW><id>14488618</id><snippet>              1H  2H   T     FG   FG%     FT   FT%    3PT    3%  OR  DR REB  AS  ST  B  TO  PF
0   W     GSU  32  42  74  24-47  51.1  15-23  65.2  11-24  45.8   6  25  31  17   4  6  15  19
1   W      UK  33  42  75  26-57  45.6  15-22  68.2   8-18  44.4  11  20  31  16   6  6   8  17
2   W    FGCU  52  36  88  30-63  47.6  19-23  82.6   9-31  29.0  16  21  37  19   9  4  18  14
3   W   @MINN  40  49  89  30-55  54.5  21-26  80.8   8-10  80.0  10  22  32  12  12  4  15  21
4   W     VCU  29  38  67  20-48  41.7  24-27  88.9   3-15  20.0   4  30  34  14   4  8   8  18
5   W  Lville  36  40  76  24-55  43.6  23-27  85.2   5-20  25.0   8  25  33  13   8  6  14  20
6   W     OSU  23  50  73  24-51  47.1  20-27  74.1   5-12  41.7   8  29  37  11   3  5   8  19
7   W      UD  42  46  88  35-67  52.2  11-21  52.4   7-20  35.0  10  37  47  23   9  8  11  19
8   W  TEMPLE  46  44  90  28-59  47.5  22-29  75.9  12-20  60.0  11  27  38  19   6  2   6  15
9   W    CORN  41  47  88  34-60  56.7  13-17  76.5   7-21  33.3   4  26  30  23  11  7  10  11
10  W    ELON  35  41  76  29-67  43.3   7-16  43.8  11-19  57.9  15  28  43  16  10  2  12  13
11  W     SCU  38  52  90  31-63  49.2  21-33  63.6   7-14  50.0  14  26  40  15   6  2  11  17
12  W    @DAV  29  38  67  21-46  45.7  20-22  90.9   5-11  45.5   6  27  33   8   5  5  12  17
13  W     WFU  41  39  80  29-63  46.0  11-22  50.0  11-24  45.8  10  25  35  22   6  4   6  16
14  W    CLEM  25  43  68  27-56  48.2   6-14  42.9   8-15  53.3  13  29  42  13   8  1  13  12
15  L   @NCSU  39  37  76  30-67  44.8  10-12  83.3   6-20  30.0  13  22  35  10   6  4  12  20
16  W      GT  27  46  73  26-65  40.0  11-16  68.8  10-21  47.6  15  25  40  12  10  5  13  18
</snippet></ROW><ROW><id>14488705</id><snippet>part number</snippet></ROW><ROW><id>14488705</id><snippet>int</snippet></ROW><ROW><id>14488705</id><snippet>str</snippet></ROW><ROW><id>14488705</id><snippet>True</snippet></ROW><ROW><id>14488705</id><snippet>int</snippet></ROW><ROW><id>14488705</id><snippet>str</snippet></ROW><ROW><id>14488705</id><snippet>str</snippet></ROW><ROW><id>14488705</id><snippet>KeyError</snippet></ROW><ROW><id>14488705</id><snippet>Construct Number</snippet></ROW><ROW><id>14488705</id><snippet>construct</snippet></ROW><ROW><id>14488705</id><snippet>primers_names_list = [
{'part number': 1, 'notes': 'Fw Gibson primer on pEM113 to extract CmR resistance and pSC101 backbone and T7 promoter and term.', 'direction': 'fw primer', 'construct': '24', 'source': 'pEM113'},
{'part number': 1, 'notes': 'Re Gibson primer on pEM113 to extract CmR resistance and pSC101 backbone and T7 promoter and term.', 'direction': 're primer', 'construct': '24', 'source': 'pEM113'},
{'part number': 2, 'notes': 'Fw Gibson primer on BBa_K274100 to extract crtEBI operon', 'direction': 'fw primer', 'construct': '24', 'source': 'BBa_K274100'},
{'part number': 2, 'notes': 'Re Gibson primer on BBa_K274100 to extract crtEBI operon', 'direction': 're primer', 'construct': '24', 'source': 'BBa_K274100'},
{'part number': 1, 'notes': 'Fw Gibson primer on pEM114 to extract CmR resistance and pSC101 backbone and K1F promoter and term.', 'direction': 'fw primer', 'construct': '25', 'source': 'pEM114'},
{'part number': 1, 'notes': 'Re Gibson primer on pEM114 to extract CmR resistance and pSC101 backbone and K1F promoter and term.', 'direction': 're primer', 'construct': '25', 'source': 'pEM114'},
]

primers_without_names = [
{'Part Number': '1', 'Construct Number': '24', 'Direction': 're primer', 'Primer Sequence': 'agaccgtcatctagtacctcTCTCCCTATAGTGAGTCGTATTACTCTAGAAGCGGCCGCg'},
{'Part Number': '1', 'Construct Number': '24', 'Direction': 'fw primer', 'Primer Sequence': 'tggaggatctgatataataaTAGCATAACCCCTTGGGGCCTCTAAACGGGTCTTGAGGGG'},
{'Part Number': '2', 'Construct Number': '24', 'Direction': 'fw primer', 'Primer Sequence': 'TACGACTCACTATAGGGAGAgaggtactagatgacggtctgcgcaaaaaaacacgttcat'},
{'Part Number': '2', 'Construct Number': '24', 'Direction': 're primer', 'Primer Sequence': 'GGCCCCAAGGGGTTATGCTAttattatatcagatcctccagcatcaaacctgctgtcgct'},
{'Part Number': '1', 'Construct Number': '25', 'Direction': 're primer', 'Primer Sequence': 'agaccgtcatctagtacctcTCTCCCTATAGTGATAGTTATTACTCTAGAAGCGGCCGCg'},
{'Part Number': '1', 'Construct Number': '25', 'Direction': 'fw primer', 'Primer Sequence': 'tggaggatctgatataataaTAGCATAACCCCTTGGGGCCTCTAAACGGGTCTTGAGGGG'},
{'Part Number': '2', 'Construct Number': '25', 'Direction': 'fw primer', 'Primer Sequence': 'TAACTATCACTATAGGGAGAgaggtactagatgacggtctgcgcaaaaaaacacgttcat'},
{'Part Number': '2', 'Construct Number': '25', 'Direction': 're primer', 'Primer Sequence': 'GGCCCCAAGGGGTTATGCTAttattatatcagatcctccagcatcaaacctgctgtcgct'},
]


primers_with_names = []
for row in primers_names_list: #recall that primers_names_list is a list of dictionaries
    for x in primers_without_names:
        if (
            int(x['Part Number']) == row['part number'] and
            x['Construct Number'] == row['construct'] and
            x['Direction'] == row['direction']
        ):
            primers_with_names.append(
                {
                    'part number': row['part number'], 
                    'construct number': row['construct'], 
                    'notes': row['notes'], 
                    'primer sequence':x['Primer Sequence']
                }
            )
            # If you are only expecting one match from the primers_without_names
            # collection, or wish to enforce that, you can add a break statement after
            # the insertion here to break out of the inner comparison loop and move on
            # to the next row item


for p in primers_with_names:
    print p

print
print len(primers_with_names)
</snippet></ROW><ROW><id>14488705</id><snippet># convert both lists to dictionaries
primers_names_dict = { 
    (str(p['part number']), str(p['construct']), str(p['direction'])): p
    for p in primers_names_list 
}
primers_sequence_dict = {
    (str(p['Part Number']), str(p['Construct Number']), str(p['Direction'])): p
    for p in primers_without_names
}


# now that we have two dicts, we can do a key&lt;-&gt;key match between them, so each
# comparison op is just a dictionary key lookup, which is O(1) on average
matches = []
for key in primers_names_dict.keys():
    if key in primers_sequence_dict: # amortized O(1) lookup
        matches.append( {
            'part number': primers_names_dict[key]['part number'], 
            'construct number': primers_names_dict[key]['construct'], 
            'notes': primers_names_dict[key]['notes'], 
            'primer sequence': primers_sequence_dict[key]['Primer Sequence']
        } )

for m in matches:
    print m
print len(matches)
</snippet></ROW><ROW><id>14488761</id><snippet>pip install coverage</snippet></ROW><ROW><id>14489100</id><snippet>$uploaded_file = $_FILES['file']['tmp_name'];
</snippet></ROW><ROW><id>14489100</id><snippet>tmp_name</snippet></ROW><ROW><id>14489179</id><snippet>import boto.ec2
conn = boto.ec2.connect_to_region('us-east-1',
                                  aws_access_key_id='&lt;access_key&gt;',
                                  aws_secret_access_key='&lt;secret_key&gt;')

reservations = conn.get_all_instances()
instances = [i for r in reservations for i in r.instances]
for instance in instances:
    print instance.id, instance.state
</snippet></ROW><ROW><id>14489293</id><snippet>pd.read_csv</snippet></ROW><ROW><id>14489293</id><snippet>In [46]: import numpy as np
In [47]: arr = np.genfromtxt('test3.csv', delimiter = ',', 
                             dtype = None, names = True)

In [48]: df = pd.DataFrame(arr)

In [49]: df
Out[49]: 
   x    y
0     Reg
1     Reg
2  I  Swp
3  I  Swp
</snippet></ROW><ROW><id>14489293</id><snippet>names = True</snippet></ROW><ROW><id>14489293</id><snippet>In [22]: with open('/tmp/test.csv','r') as f:
   ....:     print(repr(f.read()))
   ....:     
'x,y,z\n \x00\x00\x00,Reg,1\n \x00\x00\x00,Reg,2\nI,Swp,3\nI,Swp,4\n'
</snippet></ROW><ROW><id>14489293</id><snippet>&lt;i4</snippet></ROW><ROW><id>14489293</id><snippet>In [19]: arr = np.genfromtxt('/tmp/test.csv', delimiter = ',', dtype = None, names = True)

In [20]: arr
Out[20]: 
array([('', 'Reg', 1), ('', 'Reg', 2), ('I', 'Swp', 3), ('I', 'Swp', 4)], 
      dtype=[('x', '|S3'), ('y', '|S3'), ('z', '&lt;i4')])
</snippet></ROW><ROW><id>14489293</id><snippet>'\x00'</snippet></ROW><ROW><id>14489293</id><snippet>dtype</snippet></ROW><ROW><id>14489293</id><snippet>In [11]: arr = np.genfromtxt('/tmp/test.csv', delimiter = ',', dtype = [('x', '|i4'), ('y', '|S3')], names = True)
</snippet></ROW><ROW><id>14489293</id><snippet>x</snippet></ROW><ROW><id>14489293</id><snippet>|i4</snippet></ROW><ROW><id>14489293</id><snippet>y</snippet></ROW><ROW><id>14489293</id><snippet>|S3</snippet></ROW><ROW><id>14489355</id><snippet>fileids=corpus.fileids ()
text=corpus.words(fileids)
</snippet></ROW><ROW><id>14489355</id><snippet>#get a list of the stopwords
stp = nltk.corpus.stopwords.words('english')

#from your text of words, keep only the ones NOT in stp
filtered_text = [w for w in text if not w in stp]
</snippet></ROW><ROW><id>14489355</id><snippet>wlist=[]
ftable=nltk.FreqDist (filtered_text)
wlist.append(ftable.keys () )
</snippet></ROW><ROW><id>14489370</id><snippet>int</snippet></ROW><ROW><id>14489370</id><snippet>defaultdict</snippet></ROW><ROW><id>14489370</id><snippet>0</snippet></ROW><ROW><id>14489370</id><snippet>from collections import defaultdict

a_list = [['apple', 50, 60, 7],
          ['orange', 70, 50, 8],
          ['apple', 50, 60, 12]]

d = defaultdict(int)
for sub_list in a_list:
    key = tuple(sub_list[:3])
    d[key] += sub_list[-1]

new_data = [list(k) + [v] for k, v in d.iteritems()]
</snippet></ROW><ROW><id>14489370</id><snippet>d = defaultdict(int)
for *key, v in a_list:
    d[tuple(key)] += v

new_data = [list(k) + [v] for k, v in d.items()]
</snippet></ROW><ROW><id>14489370</id><snippet>key</snippet></ROW><ROW><id>14489370</id><snippet>v</snippet></ROW><ROW><id>14489370</id><snippet>.iteritems()</snippet></ROW><ROW><id>14489370</id><snippet>.items()</snippet></ROW><ROW><id>14489370</id><snippet>defaultdict</snippet></ROW><ROW><id>14489370</id><snippet>0</snippet></ROW><ROW><id>14489370</id><snippet>['apple', 50, 60, 7]</snippet></ROW><ROW><id>14489370</id><snippet>('apple', 50, 60)</snippet></ROW><ROW><id>14489370</id><snippet>d</snippet></ROW><ROW><id>14489370</id><snippet>defaultdict</snippet></ROW><ROW><id>14489370</id><snippet>int()</snippet></ROW><ROW><id>14489370</id><snippet>0</snippet></ROW><ROW><id>14489370</id><snippet>7</snippet></ROW><ROW><id>14489370</id><snippet>('orange', 70, 50)</snippet></ROW><ROW><id>14489370</id><snippet>8</snippet></ROW><ROW><id>14489370</id><snippet>('apple', 50, 60)</snippet></ROW><ROW><id>14489370</id><snippet>12</snippet></ROW><ROW><id>14489370</id><snippet>7</snippet></ROW><ROW><id>14489370</id><snippet>d[('apple', 50, 60)]</snippet></ROW><ROW><id>14489370</id><snippet>&gt;&gt;&gt; new_data
[['apple', 50, 60, 19], ['orange', 70, 50, 8]]
</snippet></ROW><ROW><id>14489370</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14489370</id><snippet>from itertools import groupby
from operator import itemgetter

a_list = [['apple', 50, 60, 7],
          ['orange', 70, 50, 8],
          ['apple', 50, 60, 12]]

newlist = [list(key) + [sum(i[-1] for i in sublists)] 
    for key, sublists in groupby(sorted(a_list), key=itemgetter(0, 1, 2))]
</snippet></ROW><ROW><id>14489467</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax1 = fig.add_subplot(111)
fig2 = plt.figure()
ax2 = fig2.add_subplot(111, sharex=ax1)
</snippet></ROW><ROW><id>14489597</id><snippet>list.extend()</snippet></ROW><ROW><id>14489597</id><snippet>lst = ['a', 'b', 'c']
cplst = []
cplst.extend(lst)
cplst == lst
</snippet></ROW><ROW><id>14489597</id><snippet>join()</snippet></ROW><ROW><id>14489597</id><snippet>join</snippet></ROW><ROW><id>14489597</id><snippet>list</snippet></ROW><ROW><id>14489597</id><snippet>def JoiningList(list):

    def join(self, iterable):
        new_list = iterable[0]
        for item in iterable[1:]:
            new_list.extend(self)
            new_list.append(item)
        return new_list
</snippet></ROW><ROW><id>14489780</id><snippet>self.response.set_cookie('name', 'value', expires=expire_time, path='/', domain='example.com')
</snippet></ROW><ROW><id>14489780</id><snippet>value</snippet></ROW><ROW><id>14489780</id><snippet>expires</snippet></ROW><ROW><id>14489780</id><snippet>self.request.cookies.get('name','')
</snippet></ROW><ROW><id>14489921</id><snippet>#!/usr/bin/env python
import re

commands = "copy move".split()
input_string  = "something move 11 something move 12 something 13 copy 14 15"
tokens = iter(re.split("(%s)" % "|".join(map(re.escape, commands)), input_string))
result = []
for tok in tokens:
     if tok in commands:
        args = re.findall(r"\d+", next(tokens, ""))
        result.append((tok,) + tuple(args) + ("",)*(2 - len(args)))
print(result)
</snippet></ROW><ROW><id>14489921</id><snippet>[('move', '11', ''), ('move', '12', '13'), ('copy', '14', '15')]
</snippet></ROW><ROW><id>14489921</id><snippet>tuple(arg[:2])</snippet></ROW><ROW><id>14490018</id><snippet>from app import app
</snippet></ROW><ROW><id>14490018</id><snippet>__init__.py</snippet></ROW><ROW><id>14490018</id><snippet>__init__.py</snippet></ROW><ROW><id>14490018</id><snippet>app = Flask(__name__)
</snippet></ROW><ROW><id>14490018</id><snippet>from myproject import app
</snippet></ROW><ROW><id>14490018</id><snippet>from myproject import views
</snippet></ROW><ROW><id>14490276</id><snippet>a = list(set(a))
</snippet></ROW><ROW><id>14490869</id><snippet>//username:password@</snippet></ROW><ROW><id>14490869</id><snippet>Http.add_credentials(name, password[, domain=None])
</snippet></ROW><ROW><id>14490869</id><snippet>http = httplib2.Http()
http.add_credentials(name, password)
status, response = http.request('https://traveler.pha.phila.gov:8443/servlet/traveler')
</snippet></ROW><ROW><id>14490961</id><snippet>struct</snippet></ROW><ROW><id>14490961</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('&gt;f', '\x3f\x9a\xec\xb5')[0]
1.2103487253189087
</snippet></ROW><ROW><id>14490961</id><snippet>\x3f\x9a\xec\xb5</snippet></ROW><ROW><id>14490961</id><snippet>&gt;</snippet></ROW><ROW><id>14490961</id><snippet>struct</snippet></ROW><ROW><id>14490961</id><snippet>&gt;&gt;&gt; raw = struct.pack('&gt;HH', 16282, 1147)    # from two unsigned shorts
&gt;&gt;&gt; struct.unpack('&gt;f', raw)[0]              # to one float
1.2032617330551147
</snippet></ROW><ROW><id>14490997</id><snippet>QLCDNumber</snippet></ROW><ROW><id>14490997</id><snippet>setSegmentStyle</snippet></ROW><ROW><id>14490997</id><snippet>lcd.setSegmentStyle(QtGui.QLCDNumber.Flat)
</snippet></ROW><ROW><id>14490997</id><snippet>QPalette</snippet></ROW><ROW><id>14490997</id><snippet>QPalette.Light</snippet></ROW><ROW><id>14490997</id><snippet>QPalette.Dark</snippet></ROW><ROW><id>14490997</id><snippet># get the palette
palette = lcd.palette()

# foreground color
palette.setColor(palette.WindowText, QtGui.QColor(85, 85, 255))
# background color
palette.setColor(palette.Background, QtGui.QColor(0, 170, 255))
# "light" border
palette.setColor(palette.Light, QtGui.QColor(255, 0, 0))
# "dark" border
palette.setColor(palette.Dark, QtGui.QColor(0, 255, 0))

# set the palette
lcd.setPalette(palette)
</snippet></ROW><ROW><id>14491248</id><snippet>tkinter</snippet></ROW><ROW><id>14491248</id><snippet>place</snippet></ROW><ROW><id>14491248</id><snippet>frame</snippet></ROW><ROW><id>14491646</id><snippet>import random
import time

start = time.clock()
while time.clock() - start &lt; 3:
    random_number = random.randint(0,100)

print random_number
</snippet></ROW><ROW><id>14491770</id><snippet>(similar, inaugurals)</snippet></ROW><ROW><id>14491888</id><snippet>httplib.HttpConnection</snippet></ROW><ROW><id>14491888</id><snippet>host</snippet></ROW><ROW><id>14491888</id><snippet>port</snippet></ROW><ROW><id>14491888</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>14491888</id><snippet>import urllib2

with open('urls.txt') as urls:
    for url in urls:
        try:
            r = urllib2.urlopen(url)
        except urllib2.URLError as e:
            r = e
        if r.code in (200, 401):
            print '[{}]: '.format(url), "Up!"
        elif r.code == 404:
            print '[{}]: '.format(url), "Not Found!" 
</snippet></ROW><ROW><id>14491969</id><snippet>y = a * x + b</snippet></ROW><ROW><id>14491969</id><snippet>b</snippet></ROW><ROW><id>14491969</id><snippet>a</snippet></ROW><ROW><id>14491969</id><snippet>(0, b)</snippet></ROW><ROW><id>14491969</id><snippet>(x, y)</snippet></ROW><ROW><id>14491969</id><snippet>b</snippet></ROW><ROW><id>14491969</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>14491969</id><snippet>b</snippet></ROW><ROW><id>14491969</id><snippet>a</snippet></ROW><ROW><id>14491969</id><snippet>b</snippet></ROW><ROW><id>14491969</id><snippet>b</snippet></ROW><ROW><id>14491969</id><snippet>from __future__ import division
import numpy as np
import scipy.optimize
import matplotlib.pyplot as plt

def fit_below(x, y) :
    idx = np.argsort(x)
    x = x[idx]
    y = y[idx]
    x0, y0 = x[0] - 1, y[0]
    x -= x0
    y -= y0

    def error_function_2(b, x, y) :
        a = np.min((y - b) / x)
        return np.sum((y - a * x - b)**2)

    b = scipy.optimize.minimize(error_function_2, [0], args=(x, y)).x[0]

    a = np.min((y - b) / x)

    return a, b - a * x0 + y0

x = np.arange(10).astype(float)
y = x * 2 + 3 + 3 * np.random.rand(len(x))

a, b = fit_below(x, y)

plt.plot(x, y, 'o')
plt.plot(x, a*x + b, '-')
plt.show()
</snippet></ROW><ROW><id>14492151</id><snippet>&gt;&gt;&gt; a = scipy.sparse.rand(100,100,format='coo')
&gt;&gt;&gt; a[2:5, 6:8]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'coo_matrix' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>14492151</id><snippet>&gt;&gt;&gt; a = scipy.sparse.rand(100,100,format='csc')
&gt;&gt;&gt; a[2:5, 6:8]
&lt;3x2 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 0 stored elements in Compressed Sparse Column format&gt;
</snippet></ROW><ROW><id>14492151</id><snippet>&gt;&gt;&gt; a[2:5:2, 6:8:3]
Traceback (most recent call last):
...
ValueError: slicing with step != 1 not supported
</snippet></ROW><ROW><id>14492151</id><snippet>&gt;&gt;&gt; a = scipy.sparse.rand(100,100,format='dok')
&gt;&gt;&gt; a[2:5:2, 6:8:3]
Traceback (most recent call last):
...
NotImplementedError: fancy indexing supported over one axis only
&gt;&gt;&gt; a[2:5:2,1]
&lt;3x1 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 0 stored elements in Dictionary Of Keys format&gt;
</snippet></ROW><ROW><id>14492151</id><snippet>&gt;&gt;&gt; a = scipy.sparse.rand(100,100,format='lil')
&gt;&gt;&gt; a[2:5:2,1]
&lt;2x1 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
    with 0 stored elements in LInked List format&gt;
C:\Python27\lib\site-packages\scipy\sparse\lil.py:230: SparseEfficiencyWarning: Indexing into a lil_matrix with multiple indices is slow. Pre-converting to CSC or CSR beforehand is more efficient.
  SparseEfficiencyWarning)
&gt;&gt;&gt; a[2:5:2, 6:8:3]
&lt;2x1 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
    with 0 stored elements in LInked List format&gt;
</snippet></ROW><ROW><id>14492172</id><snippet>imp.reload()</snippet></ROW><ROW><id>14492172</id><snippet>In [1]: import imp

In [2]: print imp.reload.__doc__
reload(module) -&gt; module

Reload the module.  The module must have been successfully imported before.
</snippet></ROW><ROW><id>14492212</id><snippet>else</snippet></ROW><ROW><id>14492212</id><snippet>for</snippet></ROW><ROW><id>14492303</id><snippet>data = ((145541L, u'/.stats/'), (175706L, u'///'))
result = dict(data)
</snippet></ROW><ROW><id>14492303</id><snippet>data = "((145541L, u'/.stats/'), (175706L, u'///'))"
data = eval(data)
result = dict(data)
</snippet></ROW><ROW><id>14492303</id><snippet>eval</snippet></ROW><ROW><id>14492303</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14492303</id><snippet>from ast import literal_eval
data = "((145541L, u'/.stats/'), (175706L, u'///'))"
result = dict(literal_eval(data))
</snippet></ROW><ROW><id>14492325</id><snippet>os.rename()</snippet></ROW><ROW><id>14492325</id><snippet>import os
import urllib2

input_file = "urls.txt"
debug = True

good_urls = []
bad_urls = []

bad, good = range(2)

def track(url, good_flag, code):
    if good_flag == good:
        good_str = "good"
    elif good_flag == bad:
        good_str = "bad"
    else:
        good_str = "ERROR! (" + repr(good) + ")"
    if debug:
        print("DEBUG: %s: '%s' code %s" % (good_str, url, repr(code)))
    if good_flag == good:
        good_urls.append(url)
    else:
        bad_urls.append(url)

with open(input_file) as f:
    for line in f:
        url = line.strip()
        try:
            r = urllib2.urlopen(url)
            if r.code in (200, 401):
                print '[{0}]: '.format(url), "Up!"
            if r.code == 404:
                # URL is bad if it is missing (code 404)
                track(url, bad, r.code)
            else:
                # any code other than 404, assume URL is good
                track(url, good, r.code)
        except urllib2.URLError as e:
            track(url, bad, "exception!")

# if any URLs were bad, rewrite the input file to remove them.
if bad_urls:
    # simple way to get a filename for temp file: append ".tmp" to filename
    temp_file = input_file + ".tmp"
    with open(temp_file, "w") as f:
        for url in good_urls:
            f.write(url + '\n')
    # if we reach this point, temp file is good.  Remove old input file
    os.remove(input_file)  # only needed for Windows
    os.rename(temp_file, input_file)  # replace original input file with temp file
</snippet></ROW><ROW><id>14492325</id><snippet>os.rename()</snippet></ROW><ROW><id>14492325</id><snippet>os.rename()</snippet></ROW><ROW><id>14492325</id><snippet>shutil.move()</snippet></ROW><ROW><id>14492580</id><snippet>list</snippet></ROW><ROW><id>14492580</id><snippet>int</snippet></ROW><ROW><id>14492580</id><snippet>len</snippet></ROW><ROW><id>14492580</id><snippet>class</snippet></ROW><ROW><id>14492639</id><snippet>cron</snippet></ROW><ROW><id>14492639</id><snippet>subprocess</snippet></ROW><ROW><id>14492639</id><snippet># (in a terminal)
# This opens up your crontab file, which lists all your scheduled jobs
crontab -e
</snippet></ROW><ROW><id>14492639</id><snippet>0 0 * * *  python /path/to/your/script.py
0 12 * * * python /path/to/your/script.py
</snippet></ROW><ROW><id>14492660</id><snippet>socket</snippet></ROW><ROW><id>14492660</id><snippet>eventlet</snippet></ROW><ROW><id>14492660</id><snippet>gevent</snippet></ROW><ROW><id>14492660</id><snippet>aggressive=True</snippet></ROW><ROW><id>14492660</id><snippet>patch_all</snippet></ROW><ROW><id>14492660</id><snippet>patch_select</snippet></ROW><ROW><id>14492660</id><snippet>select</snippet></ROW><ROW><id>14492660</id><snippet>patch_thread</snippet></ROW><ROW><id>14492660</id><snippet>while True:
    print("running")
    gevent.sleep(0.1)
</snippet></ROW><ROW><id>14492660</id><snippet>gevent</snippet></ROW><ROW><id>14492660</id><snippet>threading.Thread</snippet></ROW><ROW><id>14492660</id><snippet>greenlets</snippet></ROW><ROW><id>14492660</id><snippet>patch_threads()</snippet></ROW><ROW><id>14492660</id><snippet>eventlet</snippet></ROW><ROW><id>14492660</id><snippet>tpool</snippet></ROW><ROW><id>14492660</id><snippet>gevent</snippet></ROW><ROW><id>14492660</id><snippet>eventlet</snippet></ROW><ROW><id>14492660</id><snippet>gevent</snippet></ROW><ROW><id>14492660</id><snippet>tpool</snippet></ROW><ROW><id>14492660</id><snippet>concurrent.futures</snippet></ROW><ROW><id>14492660</id><snippet>futures</snippet></ROW><ROW><id>14492660</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>14492660</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>14492660</id><snippet>threading</snippet></ROW><ROW><id>14492660</id><snippet>multiprocessing</snippet></ROW><ROW><id>14492660</id><snippet>futures</snippet></ROW><ROW><id>14492660</id><snippet>multiprocessing</snippet></ROW><ROW><id>14492660</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>14492660</id><snippet>tpool</snippet></ROW><ROW><id>14492660</id><snippet>ppool</snippet></ROW><ROW><id>14492857</id><snippet>self</snippet></ROW><ROW><id>14492857</id><snippet>self</snippet></ROW><ROW><id>14492857</id><snippet>self</snippet></ROW><ROW><id>14492857</id><snippet>self</snippet></ROW><ROW><id>14492857</id><snippet>class Outer(object):
    def __init__(self):
        self.foo = "foo"

    def do_stuff(self):
        outer_self = self # give an extra name to `self` that won't be shadowed

        class Inner(object):
            def __init__(self):
                 self.bar = "bar"

            def do_inner_stuff(self):
                print(outer_self.foo, self.bar) # access the outer class's data

        i = Inner()
        i.do_inner_stuff()
</snippet></ROW><ROW><id>14492857</id><snippet>class Outer(object):
    def __init__(self):
        self.foo = "foo"

    def do_stuff(self):
        i = Inner(self.foo) # pass relevant data to constructor
        i.do_inner_stuff()

class Inner(object):
    def __init__(self, foo):
        self.foo = foo # keep a reference to passed data
        self.bar = "bar"

    def do_inner_stuff(self):
        print(self.foo, self.bar)  # use the data
</snippet></ROW><ROW><id>14493005</id><snippet>assert_that(obj.exportToDict(), has_entries(
                                    { 'state': 2347,
                                      'neighbours': contains_inanyorder(1,2,3) }))
</snippet></ROW><ROW><id>14493005</id><snippet>equal_to</snippet></ROW><ROW><id>14493167</id><snippet>converters</snippet></ROW><ROW><id>14493167</id><snippet>dtype = None</snippet></ROW><ROW><id>14493167</id><snippet>genfromtxt</snippet></ROW><ROW><id>14493167</id><snippet>2011-06-19 17:29:00.000,72,44,56
</snippet></ROW><ROW><id>14493167</id><snippet>import numpy as np
import datetime as DT

def make_date(datestr):
    return DT.datetime.strptime(datestr, '%Y-%m-%d %H:%M:%S.%f')

arr = np.genfromtxt(filename, delimiter = ',',
                    converters = {'Date':make_date},
                    names =  ('Date', 'Stock', 'Action', 'Amount'),
                    dtype = None)
print(arr)
print(arr.dtype)
</snippet></ROW><ROW><id>14493167</id><snippet>(datetime.datetime(2011, 6, 19, 17, 29), 72, 44, 56)
[('Date', '|O4'), ('Stock', '&lt;i4'), ('Action', '&lt;i4'), ('Amount', '&lt;i4')]
</snippet></ROW><ROW><id>14493167</id><snippet>names</snippet></ROW><ROW><id>14493167</id><snippet>arr = np.genfromtxt(filename, delimiter=',',
                    converters={'Date': make_date},
                    names=('Date', 'Stock', 'Action', 'Amount') +
                    tuple('col{i}'.format(i=i) for i in range(22)),
                    dtype = None)
</snippet></ROW><ROW><id>14493167</id><snippet>(datetime.datetime(2011, 6, 19, 17, 29), 72, 44, 56, 0.4772, 0.3286, 0.8497, 31.3587, 0.3235, 0.9147, 28.5751, 0.3872, 0.2803, 0, 0.2601, 0.2073, 0.1172, 0, 0.0, 0, 5.8922, 1, 0, 0, 0, 1.2759)
</snippet></ROW><ROW><id>14493167</id><snippet>numpy</snippet></ROW><ROW><id>14493167</id><snippet>parse_dates = True</snippet></ROW><ROW><id>14493167</id><snippet>df = pd.read_csv(filename, parse_dates = [0,1], header = None,
                    names=('Date', 'Stock', 'Action', 'Amount') +
                    tuple('col{i}'.format(i=i) for i in range(22)))
</snippet></ROW><ROW><id>14493167</id><snippet>make_date</snippet></ROW><ROW><id>14493167</id><snippet>. Just to be clear --</snippet></ROW><ROW><id>14493167</id><snippet>returns a</snippet></ROW><ROW><id>14493167</id><snippet>DataFrame</snippet></ROW><ROW><id>14493207</id><snippet>problematic_field = models.ForeignKey(ActualTableModel, on_delete=models.PROTECT)
</snippet></ROW><ROW><id>14493308</id><snippet>for i in range(2**8):
    with open("test" + str(i) + ".bin", "wb") as f:
        f.write(chr(i))
</snippet></ROW><ROW><id>14493391</id><snippet>self.p = PatchCollection(self.patches, match_orginal=True) 
</snippet></ROW><ROW><id>14493391</id><snippet>collection</snippet></ROW><ROW><id>14493412</id><snippet>virtualenv==1.8.4</snippet></ROW><ROW><id>14493412</id><snippet>requirements.txt</snippet></ROW><ROW><id>14493412</id><snippet>git add .</snippet></ROW><ROW><id>14493412</id><snippet>git commit -m "removing virtualenv requirement</snippet></ROW><ROW><id>14493412</id><snippet>git push heroku master</snippet></ROW><ROW><id>14493412</id><snippet>git add .</snippet></ROW><ROW><id>14493412</id><snippet>git commit</snippet></ROW><ROW><id>14493412</id><snippet>git</snippet></ROW><ROW><id>14493412</id><snippet>github</snippet></ROW><ROW><id>14493412</id><snippet>heroku</snippet></ROW><ROW><id>14493444</id><snippet>def gen_probes(hashvalue, n):
    'Same sequence of probes used in the current dictionary design'
    mask = n - 1
    PERTURB_SHIFT = 5
    if hashvalue &lt; 0:
        hashvalue = -hashvalue
    i = hashvalue &amp; mask
    yield i
    perturb = hashvalue
    while True:
        i = (5 * i + perturb + 1) &amp; 0xFFFFFFFFFFFFFFFF
        yield i &amp; mask
        perturb &gt;&gt;= PERTURB_SHIFT
</snippet></ROW><ROW><id>14493444</id><snippet>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}
</snippet></ROW><ROW><id>14493444</id><snippet>(hash, key, value)</snippet></ROW><ROW><id>14493444</id><snippet>entries = [['--', '--', '--'],
           [-8522787127447073495, 'barry', 'green'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           [-9092791511155847987, 'timmy', 'red'],
           ['--', '--', '--'],
           [-6480567542315338377, 'guido', 'blue']]
</snippet></ROW><ROW><id>14493551</id><snippet>def initServer():
    global db
</snippet></ROW><ROW><id>14493551</id><snippet>db</snippet></ROW><ROW><id>14493551</id><snippet>db = None
def initServer():
    global db
</snippet></ROW><ROW><id>14493551</id><snippet>initServer()</snippet></ROW><ROW><id>14493551</id><snippet>c = db.cursor()
c.execute('SELECT count(*) FROM Users')
result = cursor.fetchall()
cursor.close()
</snippet></ROW><ROW><id>14493551</id><snippet>cursor</snippet></ROW><ROW><id>14493551</id><snippet>c</snippet></ROW><ROW><id>14493551</id><snippet>c = db.cursor()
c.execute('SELECT count(*) FROM Users')
result = c.fetchall()
c.close()
</snippet></ROW><ROW><id>14493556</id><snippet>a = 1.0/x
inf_ind = np.isinf(a)
a[inf_ind] = your_value
</snippet></ROW><ROW><id>14493556</id><snippet>a[inf_ind] = f(x[inf_ind])
</snippet></ROW><ROW><id>14493733</id><snippet>rename</snippet></ROW><ROW><id>14493733</id><snippet>import os
import sys
import tempfile
import urllib2

good_urls = set()

with open('urls.txt') as urls:
    for url in urls:
        try:
            r = urllib2.urlopen(url)
        except urllib2.URLError as e:
            r = e
        if r.code in (200, 401):
            sys.stdout.write('[{}]: Up!\n'.format(url))
            good_urls.add(url)
        elif r.code == 404:
            sys.stdout.write('[{}]: Not found!\n'.format(url))
        else:
            sys.stdout.write('[{}]: Unexpected response code {}\n'.format(url, r.code))

tmp = None
try:
    tmp = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', dir='.', delete=False)
    for url in sorted(good_urls):
        tmp.write(url + "\n")
    tmp.close()
    os.rename(tmp.name, 'urls.txt')
    tmp = None
finally:
    if tmp is not None:
        os.unlink(tmp.name)
</snippet></ROW><ROW><id>14493733</id><snippet>good_urls.add(url)</snippet></ROW><ROW><id>14493733</id><snippet>else</snippet></ROW><ROW><id>14493968</id><snippet>optparse</snippet></ROW><ROW><id>14493968</id><snippet>argparse</snippet></ROW><ROW><id>14493968</id><snippet>args = parser.parse_args()</snippet></ROW><ROW><id>14493968</id><snippet>if args.uniqueness:
  # potato
</snippet></ROW><ROW><id>14493981</id><snippet>from xml.dom.minidom import parseString

pretty_print = lambda data: '\n'.join([line for line in parseString(data).toprettyxml(indent=' '*2).split('\n') if line.strip()])
</snippet></ROW><ROW><id>14493981</id><snippet>&lt;?xml version="1.0" ?&gt;
&lt;testsuite errors="0" failures="3" name="TestSet_2013-01-23 14_28_00.510935" skip="0" tests="3" time="142.695" timestamp="2013-01-23 14:28:00.515460"&gt;
  &lt;testcase classname="TC test" name="t1" status="Failed" time="27.013"/&gt;
  &lt;testcase classname="TC test" name="t2" status="Failed" time="78.325"/&gt;
  &lt;testcase classname="TC test" name="t3" status="Failed" time="37.357"/&gt;
&lt;/testsuite&gt;
</snippet></ROW><ROW><id>14493981</id><snippet>def new_prettify():
    reparsed = parseString(CONTENT)
    print '\n'.join([line for line in reparsed.toprettyxml(indent=' '*2).split('\n') if line.strip()])
</snippet></ROW><ROW><id>14494131</id><snippet>ord()</snippet></ROW><ROW><id>14494131</id><snippet>if cv2.waitKey(33) == ord('a'):
   print "pressed a"
</snippet></ROW><ROW><id>14494131</id><snippet>import cv2
img = cv2.imread('sof.jpg') # load a dummy image
while(1):
    cv2.imshow('img',img)
    k = cv2.waitKey(33)
    if k==27:    # Esc key to stop
        break
    elif k==-1:  # normally -1 returned,so don't print it
        continue
    else:
        print k # else print its value
</snippet></ROW><ROW><id>14494131</id><snippet>Upkey : 2490368
DownKey : 2621440
LeftKey : 2424832
RightKey: 2555904
Space : 32
Delete : 3014656
...... # Continue yourself :)
</snippet></ROW><ROW><id>14494315</id><snippet>with open('words.txt', "r") as word_list:
    words = word_list.read().split(' ')
</snippet></ROW><ROW><id>14494812</id><snippet>S3</snippet></ROW><ROW><id>14494812</id><snippet>S3</snippet></ROW><ROW><id>14494860</id><snippet>0.750718518519</snippet></ROW><ROW><id>14494860</id><snippet># Get the filename from the user
filename = raw_input("Enter file name: ")

# An empty list to contain all our floats
spamflts = []

# Open the file to read ('r'), and loop through each line
for line in open(filename, 'r'):

    # If the line starts with the text we want (with all whitespace stripped)
    if line.strip().startswith('X-DSPAM-Confidence'):

        # Then extract the number from the second half of the line
        # "text:number".split(':') will give you ['text', 'number']
        # So you use [1] to get the second half
        # Then we use .strip() to remove whitespace, and convert to a float
        flt = float(line.split(':')[1].strip())

        print flt

        # We then add the number to our list
        spamflts.append(flt)

print spamflts
# At the end of the loop, we work out the average - the sum divided by the length
average = sum(spamflts)/len(spamflts)

print average
</snippet></ROW><ROW><id>14494860</id><snippet>&gt;&gt;&gt; lines = """X-DSPAM-Confidence: 1
X-DSPAM-Confidence: 5
Nothing on this line
X-DSPAM-Confidence: 4"""

&gt;&gt;&gt; for line in lines.splitlines():
    print line


X-DSPAM-Confidence: 1
X-DSPAM-Confidence: 5
Nothing on this line
X-DSPAM-Confidence: 4
</snippet></ROW><ROW><id>14494860</id><snippet>&gt;&gt;&gt; for line in lines.splitlines():
    pos = line.find('X-DSPAM-Confidence:')
    print pos

0
0
-1
0
</snippet></ROW><ROW><id>14494860</id><snippet>find()</snippet></ROW><ROW><id>14494860</id><snippet>'X-DSPAM-Confidence:'</snippet></ROW><ROW><id>14494860</id><snippet>'X-DSPAM-Confidence:'</snippet></ROW><ROW><id>14494860</id><snippet>&gt;&gt;&gt; for line in lines.splitlines():
    print line.startswith('X-DSPAM-Confidence')


True
True
False
True

&gt;&gt;&gt; for line in lines.splitlines():
    if line.startswith('X-DSPAM-Confidence'):
        print line.split(':')


['X-DSPAM-Confidence', ' 1']
['X-DSPAM-Confidence', ' 5']
['X-DSPAM-Confidence', ' 4']

&gt;&gt;&gt; for line in lines.splitlines():
    if line.startswith('X-DSPAM-Confidence'):
        print float(line.split(':')[1])


1.0
5.0
4.0
</snippet></ROW><ROW><id>14495370</id><snippet>    plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)
    plot([1,2,3], [1,4,9], 'rs',  label='line 2')
    axis([0, 4, 0, 10])
    legend()
</snippet></ROW><ROW><id>14495370</id><snippet>label</snippet></ROW><ROW><id>14495370</id><snippet>legend()</snippet></ROW><ROW><id>14495404</id><snippet>def foo():
  foo.bar = 4
</snippet></ROW><ROW><id>14495404</id><snippet>bar</snippet></ROW><ROW><id>14495404</id><snippet>__setitem__</snippet></ROW><ROW><id>14495404</id><snippet>def foo():
  foo.bar[dor] = 4
</snippet></ROW><ROW><id>14495404</id><snippet>foo.bar</snippet></ROW><ROW><id>14495404</id><snippet>foo.bar</snippet></ROW><ROW><id>14495404</id><snippet>def foo():
  foo.bar[dor] = 4

foo.bar = {}
foo()
</snippet></ROW><ROW><id>14495404</id><snippet>parse</snippet></ROW><ROW><id>14495802</id><snippet>dict.setdefault</snippet></ROW><ROW><id>14495802</id><snippet>i = { "a" : { "x": 1, "y": 2 },
      "b" : { "x": 3, "z": 4 } }

d = {}
for key, value in i.iteritems():    
    for ikey, ivalue in value.iteritems():
        d.setdefault(ikey,{})[key] = ivalue
print d
</snippet></ROW><ROW><id>14495802</id><snippet>{'x': {'a': 1, 'b': 3}, 'y': {'a': 2}, 'z': {'b': 4}}
</snippet></ROW><ROW><id>14496084</id><snippet>old_string = "this is going to have a full stop. some written sstuff!"
k = old_string.rfind(".")
new_string = old_string[:k] + ". - " + old_string[k+1:]
</snippet></ROW><ROW><id>14496481</id><snippet>mysql.commit()
</snippet></ROW><ROW><id>14496481</id><snippet>rollback</snippet></ROW><ROW><id>14496565</id><snippet>import uuid
def update_filename(instance, filename):
    """ Rename picture """

    extension = os.path.splitext(filename)[1]
    return 'img/%s%s' % (uuid.uuid4(), extension) 
</snippet></ROW><ROW><id>14496582</id><snippet>groupfinder</snippet></ROW><ROW><id>14496582</id><snippet>None</snippet></ROW><ROW><id>14496582</id><snippet>def groupfinder(userid, request):
    print '#'*80
    print userid
    role = DBSession.query(Role)....

    if role is not None:
        principals = []
        if role.name == "Admin":
            principals.append('g:admin')
        return principals
</snippet></ROW><ROW><id>14496582</id><snippet>role</snippet></ROW><ROW><id>14496582</id><snippet>None</snippet></ROW><ROW><id>14496582</id><snippet>request</snippet></ROW><ROW><id>14496582</id><snippet>role</snippet></ROW><ROW><id>14496582</id><snippet>user</snippet></ROW><ROW><id>14496582</id><snippet>groupfinder</snippet></ROW><ROW><id>14496582</id><snippet>role</snippet></ROW><ROW><id>14496582</id><snippet>pyramid.security.has_permission('admin', request.context, request)</snippet></ROW><ROW><id>14496582</id><snippet>request.context</snippet></ROW><ROW><id>14496582</id><snippet>__acl__</snippet></ROW><ROW><id>14496582</id><snippet>request.context</snippet></ROW><ROW><id>14496582</id><snippet>RootFactory</snippet></ROW><ROW><id>14496815</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>14496815</id><snippet>asyncore</snippet></ROW><ROW><id>14496815</id><snippet>smtpd.SMTPServer</snippet></ROW><ROW><id>14496815</id><snippet>asyncore.dispatcher</snippet></ROW><ROW><id>14496815</id><snippet>class CustomSMTPServer(smtpd.SMTPServer):
    # store the emails in any form inside the custom SMTP server
    emails = []
    # overwrite the method that is used to process the received 
    # emails, putting them into self.emails for example
    def process_message(self, peer, mailfrom, rcpttos, data):
        # email processing


class MyReceiver(object):
    def start(self):
        """Start the listening service"""
        # here I create an instance of the SMTP server, derived from  asyncore.dispatcher
        self.smtp = CustomSMTPServer(('0.0.0.0', 25), None)
        # and here I also start the asyncore loop, listening for SMTP connection, within a thread
        # timeout parameter is important, otherwise code will block 30 seconds after the smtp channel has been closed
        self.thread =  threading.Thread(target=asyncore.loop,kwargs = {'timeout':1} )
        self.thread.start()     

    def stop(self):
        """Stop listening now to port 25"""
        # close the SMTPserver to ensure no channels connect to asyncore
        self.smtp.close()
        # now it is save to wait for the thread to finish, i.e. for asyncore.loop() to exit
        self.thread.join()

    # now it finally it is possible to use an instance of this class to check for emails or whatever in a non-blocking way
    def count(self):
        """Return the number of emails received"""
        return len(self.smtp.emails)        
    def get(self):
        """Return all emails received so far"""
        return self.smtp.emails
    ....
</snippet></ROW><ROW><id>14496815</id><snippet>start</snippet></ROW><ROW><id>14496815</id><snippet>stop</snippet></ROW><ROW><id>14496861</id><snippet>countfuncs</snippet></ROW><ROW><id>14496861</id><snippet>trace</snippet></ROW><ROW><id>14496861</id><snippet>--listfuncs</snippet></ROW><ROW><id>14496861</id><snippet>trace</snippet></ROW><ROW><id>14496861</id><snippet>import trace
from recurse import recurse

tracer = trace.Trace(count=False, trace=True, countfuncs=True)
tracer.run('recurse(2)')
tracer.results().write_results()
</snippet></ROW><ROW><id>14496861</id><snippet>functions called:
filename: &lt;string&gt;, modulename: &lt;string&gt;, funcname: &lt;module&gt;
filename: C:\Python33\lib\encodings\cp850.py, modulename: cp850, funcname: IncrementalEncoder.encode
filename: C:\Python33\lib\trace.py, modulename: trace, funcname: _unsettrace
filename: C:\usr\sjl\dev\test\python\recurse.py, modulename: recurse, funcname: recurse
</snippet></ROW><ROW><id>14497514</id><snippet>{_id: ObjectId("50fe0f437f774e8013000001"), 
    prereq: ["English", "Literature", "Language"]},
{_id: ObjectId("50fe0f437f774e8013000002"), 
    prereq: ["Chemistry"]},
{_id: ObjectId("50fe0f437f774e8013000003"), 
    prereq: ["Methods","Specialist Maths"]},
...
</snippet></ROW><ROW><id>14497514</id><snippet>db.preReqCollection.find({prereq: {$in: inputSubjectList}) 
==&gt; matchingPreReqList (the List of ObjectIds from preReqCollection met by inputSubjectList)
</snippet></ROW><ROW><id>14497514</id><snippet>$where operator</snippet></ROW><ROW><id>14497514</id><snippet>matchingPreReqList</snippet></ROW><ROW><id>14497604</id><snippet>from django.contrib.auth.models import Permission

class PermissionAdmin(admin.ModelAdmin):
    model = Permission
    fields = ['name']

admin.site.register(Permission, PermissionAdmin)
</snippet></ROW><ROW><id>14497953</id><snippet>Fault</snippet></ROW><ROW><id>14497953</id><snippet>.faultString</snippet></ROW><ROW><id>14497953</id><snippet>print fault.faultString
</snippet></ROW><ROW><id>14497953</id><snippet>__repr__</snippet></ROW><ROW><id>14497953</id><snippet>repr()</snippet></ROW><ROW><id>14497953</id><snippet>xmlrpclib.Fault</snippet></ROW><ROW><id>14497953</id><snippet>__repr__</snippet></ROW><ROW><id>14497953</id><snippet>__str__</snippet></ROW><ROW><id>14497953</id><snippet>from xmlrpclib import Fault

def fault_repr(self):
    return "&lt;Fault %s: %s&gt;" % (self.faultCode, self.faultString)

Fault.__repr__ = fault_repr
</snippet></ROW><ROW><id>14498150</id><snippet># in __init__
self.entry = builder.get_object('serverIDtext')
</snippet></ROW><ROW><id>14498150</id><snippet>User data</snippet></ROW><ROW><id>14498150</id><snippet>parseButton</snippet></ROW><ROW><id>14498150</id><snippet>User data</snippet></ROW><ROW><id>14498150</id><snippet>widget</snippet></ROW><ROW><id>14498150</id><snippet>data</snippet></ROW><ROW><id>14498150</id><snippet>Swap</snippet></ROW><ROW><id>14498150</id><snippet>get_text()</snippet></ROW><ROW><id>14498308</id><snippet>class SessionManager(object):

    def __init__(self):
        self.session = None

    def get_session(self):
        # return existing session or make a new engine and scoped_session
</snippet></ROW><ROW><id>14498308</id><snippet>session_manager = SessionManager()
db_session = LocalProxy(session_manager.get_session)
</snippet></ROW><ROW><id>14498531</id><snippet>'u'</snippet></ROW><ROW><id>14498531</id><snippet>'\u2013'</snippet></ROW><ROW><id>14498531</id><snippet>metatry['content']</snippet></ROW><ROW><id>14498531</id><snippet>u"Samsung Galaxy Note II \u2013 Latest Smartphone in India ".split(u'\u2013')
</snippet></ROW><ROW><id>14498693</id><snippet>print "ScriptRes:OK:", list[0]['VersionString']</snippet></ROW><ROW><id>14499807</id><snippet>bottle.route</snippet></ROW><ROW><id>14499807</id><snippet>route.handle</snippet></ROW><ROW><id>14499807</id><snippet>from bottle import request

print request['bottle.route']
</snippet></ROW><ROW><id>14499807</id><snippet>bottle.py</snippet></ROW><ROW><id>14499807</id><snippet>Route</snippet></ROW><ROW><id>14499807</id><snippet>.name</snippet></ROW><ROW><id>14499807</id><snippet>.rule</snippet></ROW><ROW><id>14499807</id><snippet>if request['bottle.route'].rule == '/':
    # matched the `/` route.
</snippet></ROW><ROW><id>14499807</id><snippet>request.path</snippet></ROW><ROW><id>14499807</id><snippet>name</snippet></ROW><ROW><id>14499892</id><snippet>enumerate</snippet></ROW><ROW><id>14499892</id><snippet>enumerate(['one', 'two', 'three'])</snippet></ROW><ROW><id>14499892</id><snippet>[(0, 'one'), (1, 'two'), (2, 'three')]</snippet></ROW><ROW><id>14499892</id><snippet>for</snippet></ROW><ROW><id>14499892</id><snippet>i</snippet></ROW><ROW><id>14499892</id><snippet>element</snippet></ROW><ROW><id>14499892</id><snippet>i == 0</snippet></ROW><ROW><id>14499892</id><snippet>element == 'one'</snippet></ROW><ROW><id>14500175</id><snippet>from pandas import *

data = 'MTAQDD,MTAQDD,MTSQED,MTAQDD,MKAQHD'

df = DataFrame([list(row) for row in data.split(',')])

print DataFrame({str(col)+val:(df[col]==val).apply(int) 
        for col in df.columns for val in set(df[col])})
</snippet></ROW><ROW><id>14500175</id><snippet>  0M  1K  1T  2A  2S  3Q  4D  4E  4H  5D
0   1   0   1   1   0   1   1   0   0   1
1   1   0   1   1   0   1   1   0   0   1
2   1   0   1   0   1   1   0   1   0   1
3   1   0   1   1   0   1   1   0   0   1
4   1   1   0   1   0   1   0   0   1   1
</snippet></ROW><ROW><id>14500175</id><snippet>print df.select(lambda x: not df[x].all(), axis = 1)    

   1K  1T  2A  2S  4D  4E  4H
0   0   1   1   0   1   0   0
1   0   1   1   0   1   0   0
2   0   1   0   1   0   1   0
3   0   1   1   0   1   0   0
4   1   0   1   0   0   0   1
</snippet></ROW><ROW><id>14500228</id><snippet>import myModule

myModule.main()
</snippet></ROW><ROW><id>14500228</id><snippet>main()</snippet></ROW><ROW><id>14500228</id><snippet>sys.argv</snippet></ROW><ROW><id>14500228</id><snippet>myModule</snippet></ROW><ROW><id>14500228</id><snippet>def main(args):
    # parse arguments using optparse or argparse or what have you

if __name__ == '__main__':
    import sys
    main(sys.argv[1:])
</snippet></ROW><ROW><id>14500228</id><snippet>myModule.main(['arg1', 'arg2', 'arg3'])</snippet></ROW><ROW><id>14500228</id><snippet>main()</snippet></ROW><ROW><id>14500228</id><snippet>myModule</snippet></ROW><ROW><id>14500228</id><snippet>def main(foo, bar, baz='spam'):
    # run with already parsed arguments

if __name__ == '__main__':
    import sys
    # parse sys.argv[1:] using optparse or argparse or what have you
    main(foovalue, barvalue, **dictofoptions)
</snippet></ROW><ROW><id>14500228</id><snippet>myModule.main(foovalue, barvalue, baz='ham')</snippet></ROW><ROW><id>14500228</id><snippet>python filename.py</snippet></ROW><ROW><id>14500228</id><snippet>import</snippet></ROW><ROW><id>14500228</id><snippet>"__main__"</snippet></ROW><ROW><id>14500228</id><snippet>filename.py</snippet></ROW><ROW><id>14500228</id><snippet>import filename</snippet></ROW><ROW><id>14500228</id><snippet>__name__</snippet></ROW><ROW><id>14500513</id><snippet>head -n 1 $(which ipython)
</snippet></ROW><ROW><id>14500623</id><snippet>foo_val = int(data_arr[3]) if len(data_arr) &gt;= 4 else 0
</snippet></ROW><ROW><id>14500623</id><snippet>len</snippet></ROW><ROW><id>14500835</id><snippet>&gt;&gt;&gt; var = 1
&gt;&gt;&gt; var2 = 4
&gt;&gt;&gt; var + var2
5

&gt;&gt;&gt; stringvar = 'Hello '
&gt;&gt;&gt; stringvar2 = 'world.'
&gt;&gt;&gt; stringvar + stringvar2
'Hello world.'

&gt;&gt;&gt; boolean1 = True
&gt;&gt;&gt; boolean2 = False
&gt;&gt;&gt; boolean1 + boolean2
1
</snippet></ROW><ROW><id>14500835</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
</snippet></ROW><ROW><id>14500835</id><snippet>elif ValueError</snippet></ROW><ROW><id>14500835</id><snippet>in1 = input("number 1 please")

if in1 == 1:
    final += 1 # I've also changed this. final += 1 is the same as final = final + 1
elif in1 == 0:
    final += 0
elif in1 != 1 or in1 != 0:
    print("please enter a 1 or a 0")
</snippet></ROW><ROW><id>14501229</id><snippet>CA_CERTS = os.path.join(
    os.path.dirname(os.path.abspath(__file__ )), "cacerts.txt")
</snippet></ROW><ROW><id>14501229</id><snippet>CA_CERTS = os.path.join(os.path.dirname(sys.executable), "cacerts.txt")
</snippet></ROW><ROW><id>14501274</id><snippet>ajax_keys</snippet></ROW><ROW><id>14501274</id><snippet>import re

ajaxre = re.compile(r"^\s+ajax_keys = ([^;]+)", re.MULTILINE)
ajax_string = ajaxre.match(source).group(1)

# to get it as a python list
import json
ajax_keys = json.loads(ajax_string)
</snippet></ROW><ROW><id>14501570</id><snippet>most_common</snippet></ROW><ROW><id>14501570</id><snippet>import string
import collections


def topNwords(mywords, N = 10, stoplist = set(), filtered = set()):
    # mywords = mycorpus.words()
    nocapitals = [word.lower() for word in mywords]
    filtered = [word for word in nocapitals if word not in stoplist]
    nopunctuation = [s.translate(None, string.punctuation) for s in filtered]
    woordcounter = collections.Counter(nopunctuation)
    top_ten = [word for word, freq in woordcounter.most_common(N)]
    return top_ten


top_ten = topNwords('This is a test. It is only a test. In case of a real emergency'.split(), N = 10)
print("De 10 meest frequente woorden zijn: {w}".format(w = ', '.join(top_ten)))
</snippet></ROW><ROW><id>14501712</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14501712</id><snippet>import subprocess

app = subprocess.Popen(["/path/to/app", "-and", "args"], stdin=subprocess.PIPE)
app.stdin.write("python command\n")
</snippet></ROW><ROW><id>14502578</id><snippet>A*V = V*D</snippet></ROW><ROW><id>14502578</id><snippet>A = V*D*V^(-1)</snippet></ROW><ROW><id>14502578</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from scipy import linalg
&gt;&gt;&gt; A = np.matrix([[16,-9,0],[-9,20,-11],[0,-11,11]])
&gt;&gt;&gt; D, V = linalg.eig(A)
&gt;&gt;&gt; D = np.diagflat(D)
&gt;&gt;&gt; 
&gt;&gt;&gt; b = np.matrix(linalg.inv(V))*np.matrix(D)*np.matrix(V)
&gt;&gt;&gt; b
matrix([[ 15.52275377+0.j,   9.37603361+0.j,   0.79257097+0.j],
        [  9.37603361+0.j,  21.12538282+0.j, -10.23535271+0.j],
        [  0.79257097+0.j, -10.23535271+0.j,  10.35186341+0.j]])
&gt;&gt;&gt; np.allclose(A, b)
False
</snippet></ROW><ROW><id>14502578</id><snippet>&gt;&gt;&gt; f = np.matrix(V)*np.matrix(D)*np.matrix(linalg.inv(V))
&gt;&gt;&gt; f
matrix([[  1.60000000e+01+0.j,  -9.00000000e+00+0.j,  -9.54791801e-15+0.j],
        [ -9.00000000e+00+0.j,   2.00000000e+01+0.j,  -1.10000000e+01+0.j],
        [ -1.55431223e-15+0.j,  -1.10000000e+01+0.j,   1.10000000e+01+0.j]])
&gt;&gt;&gt; np.allclose(A, f)
True
</snippet></ROW><ROW><id>14502578</id><snippet>np.dot</snippet></ROW><ROW><id>14502578</id><snippet>&gt;&gt;&gt; dotm = lambda *args: reduce(np.dot, args)
&gt;&gt;&gt; dotm(V, D, inv(V))
array([[  1.60000000e+01+0.j,  -9.00000000e+00+0.j,  -9.54791801e-15+0.j],
       [ -9.00000000e+00+0.j,   2.00000000e+01+0.j,  -1.10000000e+01+0.j],
       [ -1.55431223e-15+0.j,  -1.10000000e+01+0.j,   1.10000000e+01+0.j]])
</snippet></ROW><ROW><id>14502607</id><snippet>[^(admin)]</snippet></ROW><ROW><id>14502607</id><snippet>[...]</snippet></ROW><ROW><id>14502607</id><snippet>^(?P&lt;restaurant_slug&gt;(?!\(admin\))[a-zA-B-_0-9]+)$
</snippet></ROW><ROW><id>14502607</id><snippet>^(?P&lt;restaurant_slug&gt;(?!admin)[a-zA-B-_0-9]+)$
</snippet></ROW><ROW><id>14503133</id><snippet>listSubChildren</snippet></ROW><ROW><id>14503133</id><snippet>getattr</snippet></ROW><ROW><id>14503133</id><snippet>&gt;&gt;&gt; class foo: pass
... 
&gt;&gt;&gt; a = foo()
&gt;&gt;&gt; a.bar = 1
&gt;&gt;&gt; getattr(a,'bar')
1
&gt;&gt;&gt; getattr(a,'baz',"Oops, foo doesn't have an attrbute baz")
"Oops, foo doesn't have an attrbute baz"
</snippet></ROW><ROW><id>14503133</id><snippet>for name in temp_list:
    blah = getattr(object1,name)
</snippet></ROW><ROW><id>14503133</id><snippet>blah</snippet></ROW><ROW><id>14503133</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>14503133</id><snippet>import timeit
import operator

class foo(object):
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

def abc(f):
    return [getattr(f,x) for x in ('a','b','c')]

abc2 = operator.attrgetter('a','b','c')

f = foo()
print abc(f)
print abc2(f)

print timeit.timeit('abc(f)','from __main__ import abc,f')
print timeit.timeit('abc2(f)','from __main__ import abc2,f')
</snippet></ROW><ROW><id>14503133</id><snippet>abc</snippet></ROW><ROW><id>14503133</id><snippet>abc2</snippet></ROW><ROW><id>14503133</id><snippet>abc</snippet></ROW><ROW><id>14503133</id><snippet>[f.a, f.b, f.c]</snippet></ROW><ROW><id>14503133</id><snippet>abc2</snippet></ROW><ROW><id>14503133</id><snippet>abc</snippet></ROW><ROW><id>14503133</id><snippet>abc2</snippet></ROW><ROW><id>14503133</id><snippet>[1, 2, 3]
(1, 2, 3)
0.781795024872
0.247200965881
</snippet></ROW><ROW><id>14503133</id><snippet>getter = operator.attrgetter(*temp_list)</snippet></ROW><ROW><id>14503479</id><snippet>comments</snippet></ROW><ROW><id>14503662</id><snippet>data = [[i, j] for i,j in list1]
</snippet></ROW><ROW><id>14503686</id><snippet>Queue</snippet></ROW><ROW><id>14503686</id><snippet>Queue</snippet></ROW><ROW><id>14503686</id><snippet>replace()</snippet></ROW><ROW><id>14503686</id><snippet>split()</snippet></ROW><ROW><id>14503686</id><snippet>while True:
    data += s.recv(4096)
    if '\n' in data:
        lines = data.split('\n')
        for line in lines[:-1]:
            if len(line) &gt; 0:
                q.put(line)
        data = lines[-1]
</snippet></ROW><ROW><id>14503734</id><snippet>draw()</snippet></ROW><ROW><id>14503734</id><snippet>maxlen</snippet></ROW><ROW><id>14503734</id><snippet>def draw(self):
    '''Draw lyrics on user's screen'''
    maxlen = len(str(len(self.content)))
    print("[[ %s ]]"%self.name)
    for i,line in enumerate(self.content):
        print("%i  %s"%(i+1, line), end="")
</snippet></ROW><ROW><id>14503734</id><snippet>self.content</snippet></ROW><ROW><id>14503734</id><snippet>%</snippet></ROW><ROW><id>14503734</id><snippet>'</snippet></ROW><ROW><id>14503734</id><snippet>"</snippet></ROW><ROW><id>14503734</id><snippet>´</snippet></ROW><ROW><id>14503734</id><snippet>|</snippet></ROW><ROW><id>14503734</id><snippet>#</snippet></ROW><ROW><id>14503874</id><snippet>def</snippet></ROW><ROW><id>14503874</id><snippet>weave.inline()</snippet></ROW><ROW><id>14503874</id><snippet>from scipy import weave

def cpp_call(np_points):
  assert(type(np_points) == type(1))  
  code = """
  double z[np_points+1][np_points+1];

  for (int x = 0; x &lt;= np_points; x++)
  {
    for (int y = 0; y &lt;= np_points; y++)
    {
        z[x][y] = x*y;
    }
  }
  """ 
  return weave.inline(code,['np_points']) #Note the very important change here
</snippet></ROW><ROW><id>14503900</id><snippet>buffer = win32gui.PyMakeBuffer(255)
length = win32gui.SendMessage(control, win32con.WM_GETTEXT, 255, buffer)
</snippet></ROW><ROW><id>14503933</id><snippet>try:
  eval('a python 3 expression') # something that only works in python3+
  python_version = 3
except:
  python_version = 2
</snippet></ROW><ROW><id>14503933</id><snippet>def what_to_run():
    if python_version = 3:
        return 'raise exc_info[0].with_traceback(exc_info[1], exc_info[2])'
    else:
        return 'raise exc_info[0], exc_info[1], exc_info[2]'
</snippet></ROW><ROW><id>14503933</id><snippet>def start_response(status, response_headers, exc_info = None):
    if exc_info:
        try:
            if headers_sent:
                # Re-raise original exception if headers sent.
                exec(what_to_run())
        finally:
            # Avoid dangling circular ref.
            exc_info = None
    elif headers_set:
        raise AssertionError("Headers already set!")

    headers_set[:] = [status, response_headers]
    return write
</snippet></ROW><ROW><id>14504112</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>14504452</id><snippet>'http://127.0.0.1:50080'
</snippet></ROW><ROW><id>14504533</id><snippet>except serial.SerialException:
   ...
</snippet></ROW><ROW><id>14504533</id><snippet>Exception</snippet></ROW><ROW><id>14504533</id><snippet>Exception</snippet></ROW><ROW><id>14504533</id><snippet>from serial import SerialException
</snippet></ROW><ROW><id>14504654</id><snippet>[
  {
    "model": "myapp.person",
    "pk": 1,
    "fields": {
      "first_name": "John",
      "last_name": "Lennon"
    }
  },
  {
    "model": "myapp.person",
    "pk": 2,
    "fields": {
      "first_name": "Paul",
      "last_name": "McCartney"
    }
  }
]
</snippet></ROW><ROW><id>14504654</id><snippet>beatles.json</snippet></ROW><ROW><id>14504654</id><snippet>python manage.py loaddata /path/to/beatles.json</snippet></ROW><ROW><id>14504695</id><snippet>return env['project_dir'] + os.path.sep + self._f_path
</snippet></ROW><ROW><id>14504695</id><snippet>self._f_path.__radd__(result_of_project_dir_plus_os_path_sep)</snippet></ROW><ROW><id>14504835</id><snippet>username</snippet></ROW><ROW><id>14504835</id><snippet>username</snippet></ROW><ROW><id>14504835</id><snippet>for i in range(10):
    i = User.objects.create(username = 'testX%s' % i, email='test@mail.com', password='pass1')
</snippet></ROW><ROW><id>14504932</id><snippet>class User(object):
    def __init__(self, arg1, arg2, **traits):
        self.arg1 = arg1
        self.arg2 = arg2
        self.traits = traits
</snippet></ROW><ROW><id>14504932</id><snippet>def __getattr__(self, name):
    return self.traits[name]
</snippet></ROW><ROW><id>14504932</id><snippet>&gt;&gt;&gt; u = User(1, 2, email='something')
&gt;&gt;&gt; y = User(1, 2, email='bob', telno='999')
&gt;&gt;&gt; u.arg1, u.arg2, u.email
(1, 2, 'something')
&gt;&gt;&gt; y.arg1, y.arg2, y.email, y.telno
(1, 2, 'bob', '999')
&gt;&gt;&gt; y.arg1, y.arg2, y.email, y.something
Traceback (most recent call last):
  File "&lt;pyshell#105&gt;", line 1, in &lt;module&gt;
    y.arg1, y.arg2, y.email, y.something
  File "/home/jon/adfafasdf.py", line 7, in __getattr__
    return self.traits[name]
KeyError: 'something'
</snippet></ROW><ROW><id>14504932</id><snippet>def __getattr__(self, name):
    try:
        return self.traits[name]
    except KeyError as e:
        raise AttributeError() # with suitably formatted string
</snippet></ROW><ROW><id>14505194</id><snippet>type()</snippet></ROW><ROW><id>14505194</id><snippet>&gt;&gt;&gt; Foo = type('Foo', (), {'a': 1})
&gt;&gt;&gt; Foo.a
1
</snippet></ROW><ROW><id>14505194</id><snippet>type()</snippet></ROW><ROW><id>14505194</id><snippet>__prepare__</snippet></ROW><ROW><id>14505194</id><snippet>__prepare__</snippet></ROW><ROW><id>14505194</id><snippet>class MyMeta(type):
   @classmethod
   def __prepare__(mcl, name, bases):
       return {'a': 1}
</snippet></ROW><ROW><id>14505417</id><snippet>WITH RECURSIVE</snippet></ROW><ROW><id>14505417</id><snippet>CREATE OR REPLACE FUNCTION name_path(node)
  RETURNS text AS
$BODY$

WITH RECURSIVE graph (id, root_id, id_path, name_path) AS (
    SELECT n.id, n.root_id, ARRAY[n.id], ARRAY[n.name]
    FROM node n
UNION
    SELECT n.id, n.root_id, id_path||ARRAY[n.id], name_path||ARRAY[n.name]
    FROM node n, graph g
    WHERE n.root_id = g.id)

SELECT array_to_string (g.name_path, '/','.*')
FROM graph g
WHERE (g.id_path[1] = $1.base_id OR g.root_id IS NULL)
AND (g.id = $1.id)

$BODY$
  LANGUAGE sql STABLE
  COST 100;
ALTER FUNCTION name_path(node)
  OWNER TO webed;
</snippet></ROW><ROW><id>14505417</id><snippet>class NamePathColumn (ColumnClause):
    pass

@compiles (NamePathColumn)
def compile_name_path_column (element, compiler, **kwargs):
    return 'node.name_path' ## something missing?
</snippet></ROW><ROW><id>14505417</id><snippet>class Node (db.Model):

    def get_path (self, field):

        @cache.version (key=[self.uuid, 'path', field])
        def cached_path (self, field):

            if self.root:
                return self.root.get_path (field) + [getattr (self, field)]
            else:
                return [getattr (self, field)]

        if field == 'uuid':
            return cached_path (self, field)
        else:
            return cached_path.uncached (self, field)

    @hybrid_property
    def name_path (self):
        return os.path.sep.join (self.get_path (field='name'))

    @name_path.expression
    def name_path (cls):
        return NamePathColumn (cls)
</snippet></ROW><ROW><id>14505417</id><snippet>Node.name_path</snippet></ROW><ROW><id>14505417</id><snippet>compile_name_path_column</snippet></ROW><ROW><id>14505417</id><snippet>element, compiler, **kwargs</snippet></ROW><ROW><id>14505529</id><snippet>global</snippet></ROW><ROW><id>14505581</id><snippet>matplotlib</snippet></ROW><ROW><id>14505581</id><snippet>axis</snippet></ROW><ROW><id>14505581</id><snippet>_shared_x_axes</snippet></ROW><ROW><id>14505581</id><snippet>_shared_y_axes</snippet></ROW><ROW><id>14505581</id><snippet>matplotlib.axes.Axes.cla()</snippet></ROW><ROW><id>14505919</id><snippet>with open('LIWC_words.txt', 'r') as document:
    answer = {}
    for line in document:
        line = line.split()
        if not line:  # empty line?
            continue
        answer[line[0]] = line[1:]
</snippet></ROW><ROW><id>14505919</id><snippet>.split()</snippet></ROW><ROW><id>14505919</id><snippet>.strip()</snippet></ROW><ROW><id>14505919</id><snippet>with open('LIWC_words.txt', 'r') as document:
    answer = {}
    for line in document:
        if line.strip():  # non-empty line?
            key, value = line.split(None, 1)  # None means 'all whitespace', the default
            answer[key] = value.split()
</snippet></ROW><ROW><id>14505919</id><snippet>.split()</snippet></ROW><ROW><id>14505919</id><snippet>key</snippet></ROW><ROW><id>14505919</id><snippet>value</snippet></ROW><ROW><id>14505919</id><snippet>{'aaien': ['12', '13', '39'],
 'aan': ['10'],
 'aanbad': ['12', '13', '14', '57', '58', '38'],
 'aanbaden': ['12', '13', '14', '57', '58', '38'],
 'aanbeden': ['12', '13', '14', '57', '58', '38'],
 'aanbid': ['12', '13', '14', '57', '58', '39'],
 'aanbidden': ['12', '13', '14', '57', '58', '39'],
 'aanbidt': ['12', '13', '14', '57', '58', '39'],
 'aanblik': ['27', '28'],
 'aanbreken': ['39']}
</snippet></ROW><ROW><id>14505919</id><snippet>U</snippet></ROW><ROW><id>14505919</id><snippet>with open('LIWC_words.txt', 'rU') as document:
</snippet></ROW><ROW><id>14506102</id><snippet>matplotlib.transforms.Transform</snippet></ROW><ROW><id>14506102</id><snippet>import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

class MyTransform(mpl.transforms.Transform):
  input_dims = 2
  output_dims = 2
  def __init__(self, base_point, base_transform, offset, *kargs, **kwargs):
    self.base_point = base_point
    self.base_transform = base_transform
    self.offset = offset
    super(mpl.transforms.Transform, self).__init__(*kargs, **kwargs)
  def transform_non_affine(self, values):
    new_base_point = self.base_transform.transform(self.base_point)
    t = mpl.transforms.Affine2D().translate(-new_base_point[0], -new_base_point[1])
    values = t.transform(values)
    x = values[:, 0:1]
    y = values[:, 1:2]
    r = np.sqrt(x**2+y**2)
    new_r = r-self.offset
    new_r[new_r&lt;0] = 0.0
    new_x = new_r/r*x
    new_y = new_r/r*y
    return t.inverted().transform(np.concatenate((new_x, new_y), axis=1))

def my_plot(X,Y):
  ax = plt.gca()
  line, = ax.plot(X, Y, marker='o', linestyle='')
  color = line.get_color()

  size = X.size
  for i in range(1,size):
    mid_x = (X[i]+X[i-1])/2
    mid_y = (Y[i]+Y[i-1])/2

    # this transform takes data coords and returns display coords
    t = ax.transData

    # this transform takes display coords and 
    # returns them shifted by `offset' towards `base_point'
    my_t = MyTransform(base_point=(mid_x, mid_y), base_transform=t, offset=10)

    # resulting combination of transforms
    t_end = t + my_t

    line, = ax.plot(
      [X[i-1], X[i]],
      [Y[i-1], Y[i]],
      linestyle='-', color=color)
    line.set_transform(t_end)

fig = plt.figure(figsize=(8,6))
axes = plt.subplot(111)

X = np.linspace(0,2*np.pi, 8)
Y = np.sin(X)
my_plot(X,Y)
plt.show()
</snippet></ROW><ROW><id>14506437</id><snippet>%s</snippet></ROW><ROW><id>14506437</id><snippet>str</snippet></ROW><ROW><id>14506437</id><snippet>__str__</snippet></ROW><ROW><id>14506437</id><snippet>format</snippet></ROW><ROW><id>14506437</id><snippet>'Integer: {}; Float: {}; String: {}'.format(a,b,c)
</snippet></ROW><ROW><id>14506595</id><snippet>d[(d[0::,0] &gt; 8000) &amp; (d[0::,0] &lt; 9057), 0::]
</snippet></ROW><ROW><id>14506595</id><snippet>0::</snippet></ROW><ROW><id>14506595</id><snippet>:</snippet></ROW><ROW><id>14506595</id><snippet>d[(d[:,0] &gt; 8000) &amp; (d[:,0] &lt; 9057)]
</snippet></ROW><ROW><id>14506611</id><snippet>        exceptions.TypeError: 'NorthAfricaItem' object does not support item assignment

2013-01-24 16:43:35+0000 [northafrica] INFO: Closing spider (finished)
</snippet></ROW><ROW><id>14506636</id><snippet>self.angle1 = angle1
</snippet></ROW><ROW><id>14506636</id><snippet>self</snippet></ROW><ROW><id>14506636</id><snippet>Triangle</snippet></ROW><ROW><id>14506636</id><snippet>T = Triangle()
T.method_call()  #basically the same as `Triangle.method_call(T)`
</snippet></ROW><ROW><id>14506636</id><snippet>method_call</snippet></ROW><ROW><id>14506636</id><snippet>self</snippet></ROW><ROW><id>14506636</id><snippet>T</snippet></ROW><ROW><id>14506636</id><snippet>__init__</snippet></ROW><ROW><id>14506636</id><snippet>self.whatever = whatever</snippet></ROW><ROW><id>14506636</id><snippet>T</snippet></ROW><ROW><id>14506636</id><snippet>check_angles</snippet></ROW><ROW><id>14506636</id><snippet>def check_angles(self):
    #remember, `self` is a reference to a triangle instance -- T in our hypothetical code
    #so we can use `self` to gain access to all the attributes we set in `__init__`.
    if self.angle1 + self.angle2 + self.angle3 == 180:
        return True
    else:
        return False
</snippet></ROW><ROW><id>14506636</id><snippet>class Triangle:
    number_of_sides = 3
</snippet></ROW><ROW><id>14506636</id><snippet>class Triangle:
    ...

Triangle.number_of_angles = Rhombus.number_of_angles - 1
</snippet></ROW><ROW><id>14506636</id><snippet>Triangle.some_attribute</snippet></ROW><ROW><id>14506636</id><snippet>Triangle.number_of_sides</snippet></ROW><ROW><id>14506636</id><snippet>T = Triangle()
T.number_of_sides
</snippet></ROW><ROW><id>14506636</id><snippet>number_of_sides</snippet></ROW><ROW><id>14506636</id><snippet>number_of_sides</snippet></ROW><ROW><id>14506662</id><snippet>unicode.translate</snippet></ROW><ROW><id>14506662</id><snippet>S.translate(table) -&gt; unicode

Return a copy of the string S, where all characters have been mapped
through the given translation table, which must be a mapping of
Unicode ordinals to Unicode ordinals, Unicode strings or None.
Unmapped characters are left untouched. Characters mapped to None
are deleted.
</snippet></ROW><ROW><id>14506662</id><snippet>table = {1776: 48,  # 0 
         1777: 49,  # 1
         1778: 50,  # 2
         1779: 51,  # 3
         1780: 52,  # 4
         1781: 53,  # 5
         1782: 54,  # 6
         1783: 55,  # 7
         1784: 56,  # 8
         1785: 57}  # 9


u'some ۰۱۲ of ۳۴۵ it ۶۷ is ۸۹ normal text'.translate(table)
</snippet></ROW><ROW><id>14506662</id><snippet>u'some 012 of 345 it 67 is 89 normal text'
</snippet></ROW><ROW><id>14506765</id><snippet>SET</snippet></ROW><ROW><id>14506765</id><snippet>IGNORE</snippet></ROW><ROW><id>14506765</id><snippet>statement = """LOAD DATA LOCAL INFILE 'path/file.csv'
INTO TABLE PLAYER
COLUMNS TERMINATED BY ','
IGNORE 1 LINES
SET BATTING_AVERAGE = IF(@BATTING_AVERAGE='',NULL,@BATTING_AVERAGE);"""
</snippet></ROW><ROW><id>14506773</id><snippet>create_image</snippet></ROW><ROW><id>14506773</id><snippet>import Image, ImageTk, Tkinter

im = ImageTk.PhotoImage(Image.open("&lt;path\\to\\image.jpg-ect&gt;").resize((800,600)))
canvas = Tkinter.Canvas(Parent, width=WIDTH, height=HEIGHT)
canvas.pack() #place(), etc.
Canvas_Image = canvas.create_image(0,0 image=im, anchor="nw")
</snippet></ROW><ROW><id>14506811</id><snippet>import x as y
</snippet></ROW><ROW><id>14506914</id><snippet>distutils</snippet></ROW><ROW><id>14506914</id><snippet>pip</snippet></ROW><ROW><id>14506914</id><snippet>easy_install</snippet></ROW><ROW><id>14506914</id><snippet>requests</snippet></ROW><ROW><id>14506914</id><snippet>from distutils.core import setup

setup(
    # various package metadata fields

    install_requires=[
        'requests',
    ],
)
</snippet></ROW><ROW><id>14506914</id><snippet>requests</snippet></ROW><ROW><id>14506914</id><snippet>sys.path</snippet></ROW><ROW><id>14506914</id><snippet>import sys
import os

parentdir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, parentdir)

# rest of your imports go here
import requests
</snippet></ROW><ROW><id>14506934</id><snippet>logging</snippet></ROW><ROW><id>14506980</id><snippet>sshFile="darkorange.stylesheet"
with open(sshFile,"r") as fh:
    self.setStyleSheet(fh.read())
</snippet></ROW><ROW><id>14507059</id><snippet>print (' '*(70-len(s))+s)
</snippet></ROW><ROW><id>14507122</id><snippet>\b[a-zA-Z]\w*\.
</snippet></ROW><ROW><id>14507122</id><snippet>\W</snippet></ROW><ROW><id>14507122</id><snippet>\w</snippet></ROW><ROW><id>14507122</id><snippet>\b</snippet></ROW><ROW><id>14507142</id><snippet>execStringList</snippet></ROW><ROW><id>14507142</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14507142</id><snippet>execString = "java -jar {} {} {} {} {} {}".format(os.path.join(config.java_root,
                                                               config.java_jar),
                                           self.canvasSize,
                                           self.flightId,
                                           self.domain,
                                           self.defPath,
                                           self.harPath)
execStringList = execString.split()
print execStringList
# Pass execStringList directly to Popen
subprocess.Popen(execStringList)
</snippet></ROW><ROW><id>14507163</id><snippet>class _MyClass():   
    def __init__(self, arg):
        self.arg = arg

def MyClass(arg, instances={}):
    if arg not in instances:
        instances[arg] = _MyClass(arg)
    return instances[arg]
</snippet></ROW><ROW><id>14507206</id><snippet>iteritems()</snippet></ROW><ROW><id>14507206</id><snippet>items()</snippet></ROW><ROW><id>14507206</id><snippet>&gt;&gt;&gt; from pprint import PrettyPrinter
&gt;&gt;&gt; pp = PrettyPrinter(indent = 4)
&gt;&gt;&gt; pp.pprint(map(dict, izip(*chain((product([k], v) for k, v in data.items())))))
[   {   'one': 'a', 'three': 't', 'two': 'q'},
    {   'one': 'b', 'three': 'u', 'two': 'w'},
    {   'one': 'c', 'three': 'y', 'two': 'e'}]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14507568</id><snippet>@</snippet></ROW><ROW><id>14507568</id><snippet>&amp;</snippet></ROW><ROW><id>14507568</id><snippet>def readll(infile):    
    with open(infile) as data:
        floatlist1, floatlist2 = [], []
        reading = False

        for line in data:
            if not reading:
                if '@' not in line:
                    reading = True
                else:
                    continue

            if '&amp;' in line:
                return floatlist1, floatlist2

            numbers = map(float, line.split())
            floatlist1.append(numbers[0])
            floatlist2.append(numbers[1])
</snippet></ROW><ROW><id>14507568</id><snippet>False</snippet></ROW><ROW><id>14507568</id><snippet>'@'</snippet></ROW><ROW><id>14507568</id><snippet>True</snippet></ROW><ROW><id>14507568</id><snippet>True</snippet></ROW><ROW><id>14507568</id><snippet>&amp;</snippet></ROW><ROW><id>14507623</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>14507623</id><snippet>&gt;&gt;&gt; dict.fromkeys(range(1,11),True)
{1: True, 2: True, 3: True, 4: True, 5: True, 6: True, 7: True, 8: True, 9: True, 10: True}
</snippet></ROW><ROW><id>14507623</id><snippet>d = dict.fromkeys(range(10),[])
d[1].append(2)
print d[2]  #???
</snippet></ROW><ROW><id>14507623</id><snippet>defaultdict</snippet></ROW><ROW><id>14507623</id><snippet>from collections import defaultdict
d = defaultdict(lambda : True)
</snippet></ROW><ROW><id>14507623</id><snippet>{k:k for k in range(10)}
</snippet></ROW><ROW><id>14507623</id><snippet>dict((k,k) for k in range(10))
</snippet></ROW><ROW><id>14507623</id><snippet>defaultdict</snippet></ROW><ROW><id>14507623</id><snippet>__missing__</snippet></ROW><ROW><id>14507623</id><snippet>&gt;&gt;&gt; class KeyDict(dict):
...    def __missing__(self,key):
...       #self[key] = key #Maybe add this also??? 
...       return key
... 
&gt;&gt;&gt; d = KeyDict()
&gt;&gt;&gt; d[1]
1
&gt;&gt;&gt; d[2]
2
&gt;&gt;&gt; d[3]
3
&gt;&gt;&gt; print d
{}
</snippet></ROW><ROW><id>14507913</id><snippet># settings.py

import os
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
DATABASE_URL = ''
DATABASE_USER = ''
DATABSE_PASSWORD = ''
</snippet></ROW><ROW><id>14507913</id><snippet>from myproject import settings 
settings.DATABASE_URL
</snippet></ROW><ROW><id>14507913</id><snippet>local_settings.py</snippet></ROW><ROW><id>14507913</id><snippet>try:
  from local_settings import *
except ImportError:
  pass
</snippet></ROW><ROW><id>14507997</id><snippet>EWOULDBLOCK</snippet></ROW><ROW><id>14508180</id><snippet>RandomForestRegressor</snippet></ROW><ROW><id>14508180</id><snippet>RandomForestRegressor</snippet></ROW><ROW><id>14508214</id><snippet>StreetList.append(address2.find('street').text if address2.find('street').text else 'None')
</snippet></ROW><ROW><id>14508214</id><snippet>def returnNoneIfEmpty(testText):
    if testText:
        return testText
    else:
        return 'None'
</snippet></ROW><ROW><id>14508214</id><snippet>StreetList.append(returnNoneIfEmpty(address2.find('street').text))
</snippet></ROW><ROW><id>14508220</id><snippet>for tr in soup.findAll('tr'):  # 1
    if not tr.find('td'): continue  # 2
    for td in tr.find('td').findAll('a'):  # 3
        print td.contents[0]
</snippet></ROW><ROW><id>14508220</id><snippet>findAll('tr')</snippet></ROW><ROW><id>14508220</id><snippet>findAll('tr')</snippet></ROW><ROW><id>14508220</id><snippet>[0]</snippet></ROW><ROW><id>14508220</id><snippet>for td in tr.find</snippet></ROW><ROW><id>14508220</id><snippet>for td in soup.find</snippet></ROW><ROW><id>14508220</id><snippet>tr</snippet></ROW><ROW><id>14508220</id><snippet>soup</snippet></ROW><ROW><id>14508311</id><snippet>xlrd.xldate.xldate_from_date_tuple</snippet></ROW><ROW><id>14508355</id><snippet>df.columns = df.columns.get_level_values(0)
</snippet></ROW><ROW><id>14508355</id><snippet>join</snippet></ROW><ROW><id>14508355</id><snippet>df.columns = [' '.join(col).strip() for col in df.columns.values]
</snippet></ROW><ROW><id>14508355</id><snippet>strip</snippet></ROW><ROW><id>14508355</id><snippet>In [11]: [' '.join(col).strip() for col in df.columns.values]
Out[11]: 
['USAF',
 'WBAN',
 'day',
 'month',
 's_CD sum',
 's_CL sum',
 's_CNT sum',
 's_PC sum',
 'tempf amax',
 'tempf amin',
 'year']
</snippet></ROW><ROW><id>14508546</id><snippet>while True:
    data = web_page.read(8192)
    if not data:
        print "done"
        break
    with open(file_name, "ab") as outputFile:
        outputFile.write(data)
</snippet></ROW><ROW><id>14508546</id><snippet>with open(file_name, "ab") as outputFile:
    while True:
        data = web_page.read(8192)
        if not data:
            print "done"
            break
        outputFile.write(data)
</snippet></ROW><ROW><id>14508649</id><snippet>np.average(a.reshape(48, -1), weights=b.ravel()), axis=1)
</snippet></ROW><ROW><id>14508649</id><snippet>a = np.random.rand(48, 90, 144)
b = np.random.rand(90,144)
np.testing.assert_almost_equal(np.average(a.reshape(48, -1),
                                          weights=b.ravel(), axis=1),
                               np.array([np.average(a[i],
                                                    weights=b) for i in range(48)]))
</snippet></ROW><ROW><id>14508746</id><snippet>5x5</snippet></ROW><ROW><id>14508746</id><snippet>join</snippet></ROW><ROW><id>14508746</id><snippet>'\n'.join([' '.join(board)]*5)
</snippet></ROW><ROW><id>14508746</id><snippet>&gt;&gt;&gt; board = ['0']*5
&gt;&gt;&gt; print '\n'.join([' '.join(board)]*5)
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
</snippet></ROW><ROW><id>14508746</id><snippet>&gt;&gt;&gt; board = [['0'] for _ in range(5)]
&gt;&gt;&gt; board
[['0'], ['0'], ['0'], ['0'], ['0']]
&gt;&gt;&gt; print '\n'.join(str(board) for _ in range(5))
[['0'], ['0'], ['0'], ['0'], ['0']]
[['0'], ['0'], ['0'], ['0'], ['0']]
[['0'], ['0'], ['0'], ['0'], ['0']]
[['0'], ['0'], ['0'], ['0'], ['0']]
[['0'], ['0'], ['0'], ['0'], ['0']]
</snippet></ROW><ROW><id>14508963</id><snippet>def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</snippet></ROW><ROW><id>14509046</id><snippet>posts = GqlQuery("SELECT * from BLOGPOSTS")
posts_and_comments = []
for post in posts:
    two_comments = GqlQuery("SELECT * from COMMENTS WHERE blogpost_id = :1 ORDER BY age LIMIT 2", post.blogpost_id)
    current_post = {post: two_comments}
    posts_and_comments.append(current_post)
</snippet></ROW><ROW><id>14509046</id><snippet>posts_and_comments</snippet></ROW><ROW><id>14509046</id><snippet>blogpost_id</snippet></ROW><ROW><id>14509151</id><snippet>import os
import wx
import numpy as np
import matplotlib
matplotlib.use('WXAgg')
import matplotlib.figure as figure
import matplotlib.backends.backend_wxagg as wxagg


class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, 'Title')
        self.create_menu()
        self.create_main_panel()
        self.draw_figure()

    def create_menu(self):
        self.menubar = wx.MenuBar()

        menu_file = wx.Menu()
        m_exit = menu_file.Append(-1, "&amp;Quit\tCtrl-Q", "Quit")
        self.Bind(wx.EVT_MENU, self.on_exit, m_exit)
        self.menubar.Append(menu_file, "&amp;File")
        self.SetMenuBar(self.menubar)

    def create_main_panel(self):
        """ Creates the main panel with all the controls on it:
             * mpl canvas
             * mpl navigation toolbar
             * Control panel for interaction
        """
        self.panel = wx.Panel(self)

        # Create the mpl Figure and FigCanvas objects.
        # 5x4 inches, 100 dots-per-inch
        #
        self.dpi = 100
        self.fig = figure.Figure((5.0, 4.0), dpi=self.dpi)
        self.canvas = wxagg.FigureCanvasWxAgg(self.panel, -1, self.fig)
        self.axes = self.fig.add_subplot(111)

        # Create the navigation toolbar, tied to the canvas
        #
        self.toolbar = wxagg.NavigationToolbar2WxAgg(self.canvas)

        #
        # Layout with box sizers
        #
        self.vbox = wx.BoxSizer(wx.VERTICAL)
        self.vbox.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        self.vbox.AddSpacer(25)
        self.vbox.Add(self.toolbar, 0, wx.EXPAND)

        self.panel.SetSizer(self.vbox)
        self.vbox.Fit(self)

    def draw_figure(self):
        """ Redraws the figure
        """
        # clear the axes and redraw the plot anew
        #
        self.axes.clear()
        x, y = np.random.random((10, 2)).T
        self.axes.scatter(x, y)

        self.canvas.draw()

    def on_exit(self, event):
        self.Destroy()


if __name__ == '__main__':
    app = wx.PySimpleApp()
    app.frame = MyFrame()
    app.frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>14509298</id><snippet>proc = subprocess.Popen(
    cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
stdout, _ = proc.communicate()
</snippet></ROW><ROW><id>14509298</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>14509298</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>14509298</id><snippet>stdin</snippet></ROW><ROW><id>14509298</id><snippet>stdout</snippet></ROW><ROW><id>14509298</id><snippet>proc = subprocess.Popen(cmd)
proc.wait()
</snippet></ROW><ROW><id>14509298</id><snippet>stdin</snippet></ROW><ROW><id>14509298</id><snippet>stdout</snippet></ROW><ROW><id>14509298</id><snippet>stderr</snippet></ROW><ROW><id>14509415</id><snippet>python setup.py install</snippet></ROW><ROW><id>14509415</id><snippet>execfile()</snippet></ROW><ROW><id>14509415</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14509415</id><snippet>Foo</snippet></ROW><ROW><id>14509415</id><snippet>import Project1.file1</snippet></ROW><ROW><id>14509415</id><snippet>from os import path
import sys
sys.path.append(path.abspath('../Foo'))

from Project1.file1 import something
</snippet></ROW><ROW><id>14509443</id><snippet>for</snippet></ROW><ROW><id>14509443</id><snippet>for</snippet></ROW><ROW><id>14509443</id><snippet>$ perl -nE'
    if( /^(\s*)for\b/ .. /^$ws\}/ ) {
      $ws = $1 // $ws;
      /^\s*System\.out\.println/ or print;
    } else { print }'
</snippet></ROW><ROW><id>14509443</id><snippet>COND1 .. COND2</snippet></ROW><ROW><id>14509443</id><snippet>$ perl -nE'...' &lt;source &gt;processed
</snippet></ROW><ROW><id>14509443</id><snippet>$ perl -i.bak -nE'...' source
</snippet></ROW><ROW><id>14509443</id><snippet>source.bak</snippet></ROW><ROW><id>14509443</id><snippet>$ perl -i.bak -nE'...' *.java
</snippet></ROW><ROW><id>14509443</id><snippet>"</snippet></ROW><ROW><id>14509443</id><snippet>&gt; perl -nE"if(/^(\s*)for\b/../^$ws\}/){$ws=$1//$ws;/^\s*System\.out\.println/ or print}else{print}BEGIN{@ARGV=$#ARGV?@ARGV:glob$ARGV[0]}" *.java
</snippet></ROW><ROW><id>14509443</id><snippet>#!/usr/bin/perl
use strict; use warnings;

clean($_) for map glob($_), @ARGV;

sub clean {
    local @ARGV = @_;
    local $^I = ".bak";
    my $depth = 0;
    while (&lt;&gt;) {
        $depth ||= /^\s*for\b/ ? "0 but true" : 0;
        my $delta = ( ()= /\{/g ) - ( ()= /\}/g );
        $depth += $delta if $depth &amp;&amp; $delta;
        $depth = 0 if $depth &lt; 0;
        print unless $depth &amp;&amp; /^\s*System\.out\.println/;
    }
    return !!1;
}
</snippet></ROW><ROW><id>14509443</id><snippet>System.out.println</snippet></ROW><ROW><id>14509443</id><snippet>&gt; perl thisScript.pl *.java</snippet></ROW><ROW><id>14509443</id><snippet>XXX</snippet></ROW><ROW><id>14509443</id><snippet>/** Java test suite **/

bare block {
    System.out.println(...); // 1 -- let stand
}

if (true) {
    for (foo in bar) {
        System.out.println; // 2 XXX
        if (x == y) {
            // plz kill this
            System.out.println // 3 XXX
        } // don't exit here
        System.out.println // 4 XXX
    }
}

for (...) {
    for {
        // will this be removed?
        System.out.println // 5 XXX
    }
}

/* pathological cases */

// intendation
for (...) { System.out.println()/* 6 */} 

// intendation 2
for (...)
{
    if (x)
    {
        System.out.println // 7 XXX
    }}

// inline weirdness
for (...) {
    // "confuse" script here
    foo = new baz() {void qux () {...}
    };
    System.out.println // 8 XXX
}
</snippet></ROW><ROW><id>14509488</id><snippet>timeit</snippet></ROW><ROW><id>14509488</id><snippet>import timeit

arg = 10

def foo(arg):
    return arg**arg

t=timeit.Timer("foo(arg)","from __main__ import foo, arg")
print t.timeit(5)
</snippet></ROW><ROW><id>14509488</id><snippet>%timeit foo(arg)</snippet></ROW><ROW><id>14509488</id><snippet>t=timeit.Timer("bin_search(newlist, newlist[0], newlist[-1], 17)",
                       "from __main__ import bin_search, newlist") 
</snippet></ROW><ROW><id>14509494</id><snippet>s = raw_input('Enter a word: ')
print isPalindrome(s)
</snippet></ROW><ROW><id>14509547</id><snippet>foo</snippet></ROW><ROW><id>14509547</id><snippet>import sys
sys.path = [dir for dir in sys.path if dir != '']
</snippet></ROW><ROW><id>14509547</id><snippet>lib</snippet></ROW><ROW><id>14509547</id><snippet>import sys
sys.path = ['../lib'] + sys.path
</snippet></ROW><ROW><id>14509780</id><snippet>np.floor(np.log10(np.abs(x)))</snippet></ROW><ROW><id>14509780</id><snippet>In [13]: x = np.array([0.00001, -0.001, 0.0000025, 0.09, -13.25, 9876.5])

In [14]: x
Out[14]: 
array([  1.00000000e-05,  -1.00000000e-03,   2.50000000e-06,
         9.00000000e-02,  -1.32500000e+01,   9.87650000e+03])

In [15]: np.floor(np.log10(np.abs(x))).astype(int)
Out[15]: array([-5, -3, -6, -2,  1,  3])
</snippet></ROW><ROW><id>14509841</id><snippet>json</snippet></ROW><ROW><id>14509841</id><snippet>&gt;&gt;&gt; my_data = [range(5) for i in range(5)]
&gt;&gt;&gt; my_data
[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(my_data)
'[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]'
</snippet></ROW><ROW><id>14509841</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; string_from_file
'[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]'
&gt;&gt;&gt; my_saved_data = json.loads(string_from_file)
&gt;&gt;&gt; my_saved_data
[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]
</snippet></ROW><ROW><id>14509841</id><snippet>pickle</snippet></ROW><ROW><id>14509921</id><snippet>if not inaccessible or not accessible:
    # malformed page
    continue
</snippet></ROW><ROW><id>14510033</id><snippet>key, value = line.split(':')</snippet></ROW><ROW><id>14510125</id><snippet>&gt;&gt;&gt; from nltk import pos_tag, word_tokenize
&gt;&gt;&gt; pos_tag(word_tokenize("John's big idea isn't all that bad.")) 
[('John', 'NNP'), ("'s", 'POS'), ('big', 'JJ'), ('idea', 'NN'), ('is',
'VBZ'), ("n't", 'RB'), ('all', 'DT'), ('that', 'DT'), ('bad', 'JJ'),
('.', '.')]
</snippet></ROW><ROW><id>14510161</id><snippet>from bs4 import BeautifulSoup
import urllib2

headers = { 'User-Agent' : 'Mozilla/5.0' }

webstring = "/DIRECTORY/"
url = "http://www.caao.org"+webstring

html = urllib2.urlopen(urllib2.Request(url, None, headers)).read()
soup = BeautifulSoup(html)

print soup
</snippet></ROW><ROW><id>14510210</id><snippet>python 3</snippet></ROW><ROW><id>14510210</id><snippet>python3</snippet></ROW><ROW><id>14510262</id><snippet>import threading
import time

class PeriodicThread(StoppableThread):
    '''Similar to a Timer(), but uses only one thread, stops cleanly and exits when the main thread exits'''

    def __init__ (self, period, callable, *args, **kwargs):
        super(PeriodicThread, self).__init__()
        self.period   = period
        self.args     = args
        self.callable = callable
        self.kwargs   = kwargs
        self.daemon   = True

    def run(self):
        while not self.stopped():
            self.callable(*self.args, **self.kwargs)
            time.sleep(self.period)
</snippet></ROW><ROW><id>14510263</id><snippet>intermediate_list</snippet></ROW><ROW><id>14510263</id><snippet>list</snippet></ROW><ROW><id>14510263</id><snippet>intermediate_list = (combinations(item,2) for item in windowed) # outer parentheses required
</snippet></ROW><ROW><id>14510263</id><snippet>pair_generator</snippet></ROW><ROW><id>14510263</id><snippet>gen_pairs</snippet></ROW><ROW><id>14510681</id><snippet>file</snippet></ROW><ROW><id>14510681</id><snippet>file</snippet></ROW><ROW><id>14510681</id><snippet>file.tell()</snippet></ROW><ROW><id>14510681</id><snippet>file.seek()</snippet></ROW><ROW><id>14510681</id><snippet>stdio</snippet></ROW><ROW><id>14510681</id><snippet>fileobject.c</snippet></ROW><ROW><id>14510892</id><snippet>ushort</snippet></ROW><ROW><id>14510892</id><snippet>numpy.uint8</snippet></ROW><ROW><id>14510928</id><snippet>for</snippet></ROW><ROW><id>14510928</id><snippet>category</snippet></ROW><ROW><id>14510962</id><snippet>result = "Your savings total is £", (a)
</snippet></ROW><ROW><id>14510962</id><snippet>result_txt.insert</snippet></ROW><ROW><id>14510962</id><snippet>result = ("Your savings total is £{} "
          "and the A shares are worth £{} "
          "Your total savings is £{}").format(a, b, a+b)
</snippet></ROW><ROW><id>14510962</id><snippet>format</snippet></ROW><ROW><id>14510986</id><snippet>import AddressBook
from AddressBook import *

ab = AddressBook.ABAddressBook.sharedAddressBook()
p = ABPerson.alloc().init()
p.setValue_forProperty_('JOE', kABFirstNameProperty)
p.setValue_forProperty_('TEST', kABLastNameProperty)

phoneNumberMultiValue = ABMultiValueCreateMutable()
ABMultiValueAdd(phoneNumberMultiValue, '555-555-1212', kABPhoneMobileLabel, None);
ABMultiValueAdd(phoneNumberMultiValue, '555-555-1213', kABPhoneWorkLabel, None);
p.setValue_forProperty_(phoneNumberMultiValue, kABPhoneProperty);

ab.addRecord_(p)
ret = ab.save()
</snippet></ROW><ROW><id>14511144</id><snippet>scipy.sparse.linalg.eigsh</snippet></ROW><ROW><id>14511144</id><snippet>h</snippet></ROW><ROW><id>14511144</id><snippet>scipy.sparse.linalg.eigs</snippet></ROW><ROW><id>14511144</id><snippet>a</snippet></ROW><ROW><id>14511144</id><snippet>evals, evecs = scipy.sparse.linalg.eigsh(a, k=1)
</snippet></ROW><ROW><id>14511144</id><snippet>evals</snippet></ROW><ROW><id>14511144</id><snippet>evecs</snippet></ROW><ROW><id>14511144</id><snippet>k</snippet></ROW><ROW><id>14511144</id><snippet>which</snippet></ROW><ROW><id>14511144</id><snippet>LM</snippet></ROW><ROW><id>14511175</id><snippet>for i, x in enumerate(a):
    for j in x:
        b[j].append(i)
</snippet></ROW><ROW><id>14511231</id><snippet>def __init__(self, label=None, validators=None, text='Save', **kwargs):
    super(InlineButton, self).__init__(label, validators, **kwargs)
    self.text = text
</snippet></ROW><ROW><id>14511248</id><snippet>dict.setdefault</snippet></ROW><ROW><id>14511248</id><snippet>d1 = {k:map(str.strip,v[0].split(',')) for k,v in d1.iteritems()}
d2 = {k.strip(':'):v for k,v in d2.iteritems()}

result = {}
for k,v in d1.iteritems():
    for i in v:
        if i in d2:
            result.setdefault(k,[]).extend(d2[i])
print result
</snippet></ROW><ROW><id>14511248</id><snippet>{'aaien': ['pronoun', 'I']}
</snippet></ROW><ROW><id>14511300</id><snippet>print lxml.html.tostring(e)
</snippet></ROW><ROW><id>14511314</id><snippet>1d</snippet></ROW><ROW><id>14511314</id><snippet>X</snippet></ROW><ROW><id>14511314</id><snippet>[0] is the feature vector of the first data example
[1] is the feature vector of the second data example
....
[[0],[1],[2],[3]] is a list of all data examples, 
  each example has only 1 feature.
</snippet></ROW><ROW><id>14511314</id><snippet>y</snippet></ROW><ROW><id>14511314</id><snippet>x=1.1</snippet></ROW><ROW><id>14511314</id><snippet>    print(neigh.predict_proba([[0.9]]))
</snippet></ROW><ROW><id>14511314</id><snippet>    [0] # green label
    [[ 0.66666667  0.33333333]]  # green label has greater probability
</snippet></ROW><ROW><id>14511314</id><snippet>scikit-learn</snippet></ROW><ROW><id>14511314</id><snippet>NearestNeighbors</snippet></ROW><ROW><id>14511314</id><snippet>KNeighborsClassifier</snippet></ROW><ROW><id>14511314</id><snippet>KNN</snippet></ROW><ROW><id>14511314</id><snippet>X</snippet></ROW><ROW><id>14511314</id><snippet>y</snippet></ROW><ROW><id>14511314</id><snippet>X = [ [h1, e1, s1], 
      [h2, e2, s2],
      ...
    ]
y = [label1, label2, ..., ]
</snippet></ROW><ROW><id>14511382</id><snippet>In [1033]: def firstNonRep(word):
   ......:     c = collections.Counter(word)
   ......:     for char in word:
   ......:         if c[char] == 1:
   ......:             return char
   ......:         

In [1034]: word="googlethis"

In [1035]: firstNonRep(word)
Out[1035]: 'l'
</snippet></ROW><ROW><id>14511382</id><snippet>Counter</snippet></ROW><ROW><id>14511382</id><snippet>def firstNonRep(word):
    count = {}
    for c in word:
        if c not in count:
            count[c] = 0
        count[c] += 1
    for c in word:
        if count[c] == 1:
            return c
</snippet></ROW><ROW><id>14511599</id><snippet>urllib.unquote()</snippet></ROW><ROW><id>14511599</id><snippet>os.path</snippet></ROW><ROW><id>14511599</id><snippet>import os
import urllib

path = urllib.unquote(path)
filename = os.path.splitext(os.path.basename(path))[0]
</snippet></ROW><ROW><id>14511599</id><snippet>os.path.basename()</snippet></ROW><ROW><id>14511599</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>14511599</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; path = 'D:%5CMedia%5CMusic%20Videos%5CAlexis%20Jordan%20-%20Good%20Girl%2Emkv'
&gt;&gt;&gt; path = urllib.unquote(path)
&gt;&gt;&gt; path
'D:\\Media\\Music Videos\\Alexis Jordan - Good Girl.mkv'
&gt;&gt;&gt; filename = os.path.splitext(os.path.basename(path))[0]
&gt;&gt;&gt; filename
'Alexis Jordan - Good Girl'
</snippet></ROW><ROW><id>14511602</id><snippet>cv2</snippet></ROW><ROW><id>14511602</id><snippet>cv</snippet></ROW><ROW><id>14511602</id><snippet>Mat</snippet></ROW><ROW><id>14511602</id><snippet>cv</snippet></ROW><ROW><id>14511602</id><snippet>CreateImage</snippet></ROW><ROW><id>14511602</id><snippet>cv2.imshow</snippet></ROW><ROW><id>14511602</id><snippet>cv2.imshow</snippet></ROW><ROW><id>14511602</id><snippet>CreateImage</snippet></ROW><ROW><id>14511602</id><snippet>img2 = np.zeros((320,240),np.float32)
</snippet></ROW><ROW><id>14511735</id><snippet>python-scribd</snippet></ROW><ROW><id>14511735</id><snippet>scribd</snippet></ROW><ROW><id>14511735</id><snippet>get</snippet></ROW><ROW><id>14511735</id><snippet>Document</snippet></ROW><ROW><id>14511735</id><snippet>get_download_url</snippet></ROW><ROW><id>14511735</id><snippet>get_scribd_url</snippet></ROW><ROW><id>14511735</id><snippet>get_download_url</snippet></ROW><ROW><id>14511735</id><snippet>urllib2</snippet></ROW><ROW><id>14511735</id><snippet>urllib.request</snippet></ROW><ROW><id>14511735</id><snippet>requests</snippet></ROW><ROW><id>14511735</id><snippet># do all the stuff to set up the api_key, get a `User` object, etc.

def is_document_i_want(document):
    return document.author == "Me"

urls = [document.get_download_url() for document in user.all()
        if is_document_i_want(document)]

for url in urls:
    path = urllib.parse.urlparse(url).path
    name = os.path.basename(path)
    u = urllib.request.urlopen(url)
    with open(name, 'w') as f:
        f.write(u.read())
    print('Wrote {} as {}'.format(url, name))
</snippet></ROW><ROW><id>14511735</id><snippet>user.find</snippet></ROW><ROW><id>14511735</id><snippet>user.all</snippet></ROW><ROW><id>14511735</id><snippet>user.get</snippet></ROW><ROW><id>14511735</id><snippet>load</snippet></ROW><ROW><id>14511735</id><snippet>document.load()</snippet></ROW><ROW><id>14511735</id><snippet>is_document_i_want</snippet></ROW><ROW><id>14512028</id><snippet>a = scipy.sparse.rand(10000, 10000, density=0.001, format='lil').astype('bool')
b = scipy.sparse.rand(10000, 10000, density=0.001, format='lil').astype('bool')

In [2]: %timeit a+b
10 loops, best of 3: 61.2 ms per loop

In [3]: %timeit (a+b).astype('bool')
10 loops, best of 3: 60.4 ms per loop
</snippet></ROW><ROW><id>14512028</id><snippet>In [14]: %timeit a+b
100 loops, best of 3: 2.28 ms per loop

In [15]: %timeit (a+b).astype(bool)
100 loops, best of 3: 2.96 ms per loop
</snippet></ROW><ROW><id>14512028</id><snippet>data</snippet></ROW><ROW><id>14512028</id><snippet>a = scipy.sparse.rand(10000, 10000, density=0.0005, format='csr').astype('int8')
b = scipy.sparse.rand(1000, 1000, density=0.5, format='csr').astype('int8')

In [4]: %timeit a.astype('bool') # a is 10,000x10,000 with 50,000 non-zero entries
10000 loops, best of 3: 93.3 us per loop

In [5]: %timeit b.astype('bool') # b is 1,000x1,000 with 500,000 non-zero entries
1000 loops, best of 3: 1.7 ms per loop
</snippet></ROW><ROW><id>14512124</id><snippet>os.path.sep</snippet></ROW><ROW><id>14512124</id><snippet>@</snippet></ROW><ROW><id>14512124</id><snippet>:</snippet></ROW><ROW><id>14512124</id><snippet>os.getcwd()</snippet></ROW><ROW><id>14512124</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>14512124</id><snippet>os.path.curdir</snippet></ROW><ROW><id>14512124</id><snippet>abspath()</snippet></ROW><ROW><id>14512124</id><snippet>def abspath(path):
    """Return an absolute path."""
    if not isabs(path):
        if isinstance(path, _unicode):
            cwd = os.getcwdu()
        else:
            cwd = os.getcwd()
        path = join(cwd, path)
    return normpath(path)
</snippet></ROW><ROW><id>14512137</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    bs = relationship("B")

class B(Base):
    __tablename__ = "b"

    id = Column(Integer, primary_key=True)

    a_id = Column(Integer, ForeignKey('a.id'))

e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)
s = Session(e)
s.add_all([A(bs=[B(), B()]), A(bs=[B()])])
s.commit()

# with_labels() here is to disambiguate A.id and B.id.
# without it, you'd see a warning
# "Column 'id' on table being replaced by another column with the same key."
subq = s.query(A, B).join(A.bs).with_labels().subquery()


# method 1 - select_from()
print s.query(A, B).select_from(subq).all()

# method 2 - alias them both.  "subq" renders
# once because FROM objects render based on object
# identity.
a_alias = aliased(A, subq)
b_alias = aliased(B, subq)
print s.query(a_alias, b_alias).all()
</snippet></ROW><ROW><id>14512175</id><snippet>&gt;&gt;&gt; # Parsing
&gt;&gt;&gt; res = sqlparse.parse('select * from "someschema"."mytable" where id = 1')
&gt;&gt;&gt; res
&lt;&lt;&lt; (&lt;Statement 'select...' at 0x9ad08ec&gt;,)
&gt;&gt;&gt; stmt = res[0]
&gt;&gt;&gt; stmt.to_unicode()  # converting it back to unicode
&lt;&lt;&lt; u'select * from "someschema"."mytable" where id = 1'
&gt;&gt;&gt; # This is how the internal representation looks like:
&gt;&gt;&gt; stmt.tokens
&lt;&lt;&lt;
(&lt;DML 'select' at 0x9b63c34&gt;,
 &lt;Whitespace ' ' at 0x9b63e8c&gt;,
 &lt;Operator '*' at 0x9b63e64&gt;,
 &lt;Whitespace ' ' at 0x9b63c5c&gt;,
 &lt;Keyword 'from' at 0x9b63c84&gt;,
 &lt;Whitespace ' ' at 0x9b63cd4&gt;,
 &lt;Identifier '"somes...' at 0x9b5c62c&gt;,
 &lt;Whitespace ' ' at 0x9b63f04&gt;,
 &lt;Where 'where ...' at 0x9b5caac&gt;)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14512461</id><snippet>class DataReader: #Your base for all readers
    @classmethod
    def read (_, file): pass #magic happens here

class DataReaders:
    def __init__ (self):
        self.__readers = # something like {FileType1: reader1, FileType2: reader1, FileType3: reader3}
    def __getitem__ (self, fileType): return self.__readers [fileType]


class DataSet:
    def __init__ (self, file, readers):
        self.__file = file
        self.readFileType ()
        self.data = readers [self.__fileType].read (file)

    def readFileType (self):
        self.__fileType = #parse the header of the file or whatever

readers = DataReaders ()
ds1 = DataSet (file1, readers)
ds2 = DataSet (file2, readers)
</snippet></ROW><ROW><id>14512507</id><snippet>urllib2</snippet></ROW><ROW><id>14512542</id><snippet>axes = pd.scatter_matrix(df, diagonal='kde')
ax = axes[2, 2] # your bottom-right subplot
ax.xaxis.set_visible(True)
draw()
</snippet></ROW><ROW><id>14512542</id><snippet>ax[0, 0].xaxis.set_visible(True)</snippet></ROW><ROW><id>14512542</id><snippet>if i == 0
if i == n-1
if j == 0
if j == n-1
</snippet></ROW><ROW><id>14512626</id><snippet>execute("select * from table where value in %s", (somelist, ))</snippet></ROW><ROW><id>14512626</id><snippet>select * from table where value in (1, 2, 3)</snippet></ROW><ROW><id>14512626</id><snippet>execute()</snippet></ROW><ROW><id>14512626</id><snippet>executemany()</snippet></ROW><ROW><id>14512626</id><snippet>from sqlalchemy import create_engine

engine = create_engine("postgresql://scott:tiger@localhost/test", echo=True)

with engine.connect() as conn:
    trans = conn.begin()


    conn.execute("create table test (data integer)")
    conn.execute(
            "insert into test (data) values (%s)",
            [(1, ), (2, ), (3, ), (4, ), (5, )]
        )

    result = conn.execute(
                "select * from test where data in %s",
                (
                    ((1, 2, 3),),
                )
            )

    print result.fetchall()
</snippet></ROW><ROW><id>14512856</id><snippet>__foo__</snippet></ROW><ROW><id>14512856</id><snippet>__getattribute__</snippet></ROW><ROW><id>14512856</id><snippet>class Wrapper(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    for dunder in ('__add__', '__sub__', '__len__', ...):
        locals()[dunder] = lambda self, __f=dunder, *args, **kwargs: getattr(self.wrapped, __f)(*args, **kwargs)

obj = [1,2,3]
w = Wrapper(obj)
print len(w)
</snippet></ROW><ROW><id>14512856</id><snippet>def</snippet></ROW><ROW><id>14512856</id><snippet>type()</snippet></ROW><ROW><id>14512856</id><snippet>locals()</snippet></ROW><ROW><id>14512930</id><snippet>import itertools

for start, stop in itertools.combinations(zipList, 2):
    print start, stop
    # now pass start, stop to your function
</snippet></ROW><ROW><id>14512942</id><snippet>BOTO_CONFIG</snippet></ROW><ROW><id>14513014</id><snippet>epsilon = 0.000001

if abs(ISS.xcor() - rocket.xcor()) &lt; epsilon and abs(ISS.ycor() - rocket.ycor()) &lt; epsilon:
    do stuff
</snippet></ROW><ROW><id>14513014</id><snippet>sqrt((ISS.xcor() - rocket.xcor())**2 + (ISS.ycor() - rocket.ycor())**2) &lt; (r1 + r2)
</snippet></ROW><ROW><id>14513016</id><snippet>FormView</snippet></ROW><ROW><id>14513189</id><snippet>def saveDirMeta(name, bases, dct):
    dct['saveDirectory'] = os.path.join(saveDir, name)
    return type(name, bases, dct)

class TestClass(object):
    __metaclass__ = saveDirMeta  # this adds the 'saveDirectory' attribute
    def __init__(self):
        pass # do something
</snippet></ROW><ROW><id>14513189</id><snippet>class TestClass(metaclass=saveDirMeta):
    def __init__(self):
        pass # do something
</snippet></ROW><ROW><id>14513189</id><snippet>class TestClass():
    saveDirectory = os.path.join(saveDir, 'TestClass')
    def __init__(self):
        pass # do something
</snippet></ROW><ROW><id>14513351</id><snippet>ax.lines[-1].set_linewidth(8)
plt.show()
</snippet></ROW><ROW><id>14513642</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>14513642</id><snippet>args</snippet></ROW><ROW><id>14513642</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>14513642</id><snippet>site_load_process = multiprocessing.Process(target=load_dat_site, 
                                            args=(d,)) # the comma is essential!
</snippet></ROW><ROW><id>14513642</id><snippet>&gt;&gt;&gt; not_a_tuple = (0)
&gt;&gt;&gt; type(not_a_tuple)
&lt;type 'int'&gt;

&gt;&gt;&gt; t = 0,
&gt;&gt;&gt; type(t)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>14513665</id><snippet>curry</snippet></ROW><ROW><id>14513665</id><snippet>j</snippet></ROW><ROW><id>14513689</id><snippet>bar</snippet></ROW><ROW><id>14513689</id><snippet>foo</snippet></ROW><ROW><id>14513689</id><snippet>bar=foo</snippet></ROW><ROW><id>14513689</id><snippet>In [62]: def foo():pass

In [63]: bar=foo

In [64]: spam=bar     #another reference to foo function object

In [65]: spam.__name__,bar.__name__
Out[65]: ('foo', 'foo')

In [66]: spam is foo,bar is foo
Out[66]: (True, True)

In [67]: import sys

In [68]: sys.getrefcount(foo)  # no of variable pointing to that object

Out[68]: 4           #3+1, 1 added by default by getrefcount()
</snippet></ROW><ROW><id>14513781</id><snippet>def f(n):
    if n == 1:
        return 1,0
    else:
        x, call_depth= f(n-1)
        return n * x, call_depth+1
</snippet></ROW><ROW><id>14513781</id><snippet>max(call_depth1, call_depth2)</snippet></ROW><ROW><id>14513867</id><snippet>results = Path.objects.all()
for s in search.split():
    results = results.filter(path__icontains = s)
</snippet></ROW><ROW><id>14513915</id><snippet>im_*</snippet></ROW><ROW><id>14514088</id><snippet>print(repr(price_remaining), repr(n_stock))
</snippet></ROW><ROW><id>14514088</id><snippet>while</snippet></ROW><ROW><id>14514088</id><snippet>254.99999999999997 25
229.99999999999997 25
204.99999999999997 25
179.99999999999997 25
154.99999999999997 25
129.99999999999997 25
104.99999999999997 25
79.99999999999997 25
54.99999999999997 25
29.99999999999997 25
4.999999999999972 25
4.999999999999972 25
4.999999999999972 25
[.. forever ..]
</snippet></ROW><ROW><id>14514088</id><snippet>price_remaining &lt; 5</snippet></ROW><ROW><id>14514088</id><snippet>if</snippet></ROW><ROW><id>14514280</id><snippet>twisted.mail.imap4.Command</snippet></ROW><ROW><id>14514280</id><snippet>finish</snippet></ROW><ROW><id>14514280</id><snippet>twisted.mail.imap4.IMAP4Client._extraInfo</snippet></ROW><ROW><id>14514280</id><snippet>unusedCallback</snippet></ROW><ROW><id>14514280</id><snippet>Command.finish</snippet></ROW><ROW><id>14514280</id><snippet>_extraInfo</snippet></ROW><ROW><id>14514280</id><snippet>Command</snippet></ROW><ROW><id>14514280</id><snippet>Deferred</snippet></ROW><ROW><id>14514280</id><snippet>Command.finish</snippet></ROW><ROW><id>14514280</id><snippet>Command.wantResponse</snippet></ROW><ROW><id>14514280</id><snippet>Command</snippet></ROW><ROW><id>14514465</id><snippet>cv2.blur</snippet></ROW><ROW><id>14514465</id><snippet>cv2.blur(src, ksize[, dst[, anchor[, borderType]]]) → dst
</snippet></ROW><ROW><id>14514465</id><snippet>current= cv2.blur(frame, (15,15))
</snippet></ROW><ROW><id>14514527</id><snippet>{{label = form.custom.label.field}}
</snippet></ROW><ROW><id>14514527</id><snippet>placeholder</snippet></ROW><ROW><id>14514527</id><snippet>{{form.element(_name='fieldname')['_placeholder'] = label}}
&lt;div&gt;{{=form.custom.widget.field}}&lt;/div&gt;
</snippet></ROW><ROW><id>14514527</id><snippet>{{form.custom.widget.field.element('option').append(label)}}
&lt;div&gt;{{=form.custom.widget.field}}&lt;/div&gt;
</snippet></ROW><ROW><id>14514752</id><snippet>intLat = struct.unpack('!f',latitude)[0]
intLong = struct.unpack('!f',longitude)[0]
</snippet></ROW><ROW><id>14514938</id><snippet>n</snippet></ROW><ROW><id>14514938</id><snippet>a, b, c = [lambda n=n: n*n for n in l]
</snippet></ROW><ROW><id>14514938</id><snippet>n</snippet></ROW><ROW><id>14514938</id><snippet>&gt;&gt;&gt; L=[1, 2, 3]
&gt;&gt;&gt; def fgen():
...     local_n = global_n
...     def f():
...         return local_n * local_n
...     return f
&gt;&gt;&gt; a, b, c = [fgen() for global_n in L]
&gt;&gt;&gt; a()
1
&gt;&gt;&gt; b()
4
&gt;&gt;&gt; c()
9
</snippet></ROW><ROW><id>14514938</id><snippet>&gt;&gt;&gt; L=[1, 2, 3]
&gt;&gt;&gt; def fgen(param_n):
...     local_n = param_n
...     def f():
...         return local_n * local_n
...     return f
... 
&gt;&gt;&gt; a, b, c = [fgen(n) for n in L]
&gt;&gt;&gt; a()
1
&gt;&gt;&gt; b()
4
&gt;&gt;&gt; c()
9
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14515094</id><snippet>lst = sorted(lst, key=lambda kk: kk.last_modified, reverse=True)
</snippet></ROW><ROW><id>14515186</id><snippet># Minute   Hour   Day of Month       Month          Day of Week        Command    
# (0-59)  (0-23)     (1-31)    (1-12 or Jan-Dec)  (0-6 or Sun-Sat)                
    0        1          *             *               *           /usr/bin/python manage.py loaddata fixturename.json
</snippet></ROW><ROW><id>14515186</id><snippet>@daily /usr/bin/python manage.py loaddata fixturename.json</snippet></ROW><ROW><id>14515301</id><snippet>ModelForm</snippet></ROW><ROW><id>14515301</id><snippet>class ProfileForm(forms.ModelForm):
    address   = forms.CharField(required=False, max_length=250, widget=forms.Textarea(attrs={'rows': 2}))

    class Meta:
        model = UserProfile
        exclude = ('user', )  # &lt;-- exclude user from your form
</snippet></ROW><ROW><id>14515507</id><snippet>email</snippet></ROW><ROW><id>14515507</id><snippet># -*- coding: utf-8 -*-
from email.header    import Header
from email.mime.text import MIMEText

msg = MIMEText('put message body here…', 'plain', 'utf-8')
msg['Subject'] = Header('here goes subject…', 'utf-8')
msg['From'] = 'from@gmail.com'
msg['To'] = 'to@example.com'
print(msg.as_string())
</snippet></ROW><ROW><id>14515507</id><snippet>from smtplib import SMTP_SSL

s = SMTP_SSL('smtp.gmail.com')
s.set_debuglevel(1)
try:
    s.login(login, password)
    s.sendmail(msg['From'], msg['To'], msg.as_string())
finally:
    s.quit()
</snippet></ROW><ROW><id>14516084</id><snippet>zorder</snippet></ROW><ROW><id>14516084</id><snippet>zorder</snippet></ROW><ROW><id>14516084</id><snippet>zorder</snippet></ROW><ROW><id>14516084</id><snippet>zorder</snippet></ROW><ROW><id>14516084</id><snippet>zorder</snippet></ROW><ROW><id>14516084</id><snippet>Artist</snippet></ROW><ROW><id>14516084</id><snippet>plt.figure()
ax = plt.gca()
ax.plot(range(5), zorder=2, lw=10)
ax.plot(range(5)[::-1], zorder=1, lw=10)
</snippet></ROW><ROW><id>14516084</id><snippet>plt.figure()
ax = plt.gca()
ax.plot(range(5), zorder=1, lw=10)
ax.plot(range(5)[::-1], zorder=2, lw=10)
</snippet></ROW><ROW><id>14516114</id><snippet>rwc=range(0,len(arr))</snippet></ROW><ROW><id>14516114</id><snippet>len(rwc)=len(arr)</snippet></ROW><ROW><id>14516114</id><snippet>rwc = rwc[:i-1]+rwc[i+1:]</snippet></ROW><ROW><id>14516114</id><snippet>i</snippet></ROW><ROW><id>14516114</id><snippet>rwc</snippet></ROW><ROW><id>14516114</id><snippet>arr</snippet></ROW><ROW><id>14516114</id><snippet>rwc = rwc[:i-1]+rwc[i+1:]</snippet></ROW><ROW><id>14516114</id><snippet>len(rwc) = len(arr) -2</snippet></ROW><ROW><id>14516114</id><snippet>rwc = rwc[:i]+rwc[i+1:]</snippet></ROW><ROW><id>14516114</id><snippet>X=arr[index[indexkey]]
Y=arr[index[secondIndexKey]]

temparr1 = []
temparr2 = []
for i in range(len(X)):  #I assume len(X)=len(Y)
    if not (isnan(X[i]) or isnan(Y[i])):
        temparr1.append(X[i])
        temparr2.append(Y[i])
</snippet></ROW><ROW><id>14516173</id><snippet>response.stream()</snippet></ROW><ROW><id>14516173</id><snippet>response.stream()</snippet></ROW><ROW><id>14516173</id><snippet>import os
import time
modified = os.stat(file)[stat.ST_MTIME]
mtime = time.strftime('%a, %d %b %Y %H:%M:%S GMT', time.gmtime(modified))
response.headers['Last-Modified'] = mtime
response.headers['Pragma'] = 'cache'
response.headers['Cache-Control'] = 'private'
</snippet></ROW><ROW><id>14516644</id><snippet>browser</snippet></ROW><ROW><id>14516644</id><snippet>browser</snippet></ROW><ROW><id>14516644</id><snippet>2</snippet></ROW><ROW><id>14516644</id><snippet>browser.implicitly_wait(10)
n = 2
link = browser.find_element_by_link_text(str(n))
link.click()
#web_page=browser.page_source
#print type(web_page)
</snippet></ROW><ROW><id>14516768</id><snippet>for item in soup.find_all('div',class_="ad_item"):
     if len(item["class"]) != 1:
         continue;
</snippet></ROW><ROW><id>14516917</id><snippet>try-except</snippet></ROW><ROW><id>14516917</id><snippet>def reporter(f,x): 
    try:
        if f(x):  
            # f(x) is not None and not throw any exception. Your last case
            return "Generic"
        # f(x) is `None`
        return "No Problem"
    except ValueError:
        return 'Value'
    except TypeError:
        return 'Type'
    except E2OddException:
        return 'E2Odd'
</snippet></ROW><ROW><id>14517029</id><snippet>request</snippet></ROW><ROW><id>14517029</id><snippet>process_request</snippet></ROW><ROW><id>14517029</id><snippet>request</snippet></ROW><ROW><id>14517029</id><snippet>MiddlewareNotUsed</snippet></ROW><ROW><id>14517029</id><snippet>__init__</snippet></ROW><ROW><id>14517029</id><snippet>request</snippet></ROW><ROW><id>14517029</id><snippet>request</snippet></ROW><ROW><id>14517156</id><snippet>dir\
  bob.py
  sub\
    __init__.py
    bib.py
    inner\
      __init__.py
      bub.py

import bob
import sub       (will import sub\__init__.py)
import sub.bib   (will import sub\__init__.py then bib.py)
import sub.inner (will import sub\__init__.py then sub\inner\__init__.py)
import sub.inner.bub (will import sub\__init__.py then sub\inner\__init__.py
                      and finally bub.py)
</snippet></ROW><ROW><id>14517300</id><snippet>len(string)-1</snippet></ROW><ROW><id>14517300</id><snippet>0</snippet></ROW><ROW><id>14517300</id><snippet>-1</snippet></ROW><ROW><id>14517300</id><snippet>le -1, le-1-1, le-1-1-1  .... 1    # le is len(string)
</snippet></ROW><ROW><id>14517300</id><snippet>In [24]: strs='foobar'

In [25]: le=len(strs)

In [26]: strs[-1:0:-1]      #the first -1 is equivalent to len(strs)-1

Out[26]: 'raboo'

In [27]: strs[le-1:0:-1]   
Out[27]: 'raboo'
</snippet></ROW><ROW><id>14517438</id><snippet># Use the with statement to open a file so it will later be closed automatically
with open("in.bin", "rb") as infile:  # rb = read binary
    infile.seek(0x3F000, 0)           # 0 = start of file, optional in this case
    data = infile.read(0x800)

with open("out.bin", "wb") as outfile:
    outfile.write(data)
</snippet></ROW><ROW><id>14517464</id><snippet>save as</snippet></ROW><ROW><id>14517464</id><snippet>from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

br = webdriver.Firefox()
br.get('http://www.google.com/')

save_me = ActionChains(br).key_down(Keys.CONTROL)\
         .key_down('s').key_up(Keys.CONTROL).key_up('s')
save_me.perform()
</snippet></ROW><ROW><id>14517464</id><snippet>br.page_souce</snippet></ROW><ROW><id>14517478</id><snippet>In [9]: x = np.array([0, 8, 10, 15, 50]).reshape((-1, 1))

In [10]: ncols = 5

In [11]: x + np.arange(ncols)
Out[11]: 
array([[ 0,  1,  2,  3,  4],
       [ 8,  9, 10, 11, 12],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [50, 51, 52, 53, 54]])
</snippet></ROW><ROW><id>14517478</id><snippet>In [17]: %timeit np.arange(1000).reshape((-1, 1)) + np.arange(1000)
1000 loops, best of 3: 1.61 ms per loop
</snippet></ROW><ROW><id>14518032</id><snippet>s = '123456789'
a = '{:08X}'.format(int(s))
print ':'.join(a[i:i+2] for i in xrange(0, len(a), 2))
</snippet></ROW><ROW><id>14518032</id><snippet>07:5B:CD:15
</snippet></ROW><ROW><id>14518097</id><snippet>datetime</snippet></ROW><ROW><id>14518097</id><snippet>from datetime import datetime
t = '08:00:00'
t = datetime.strptime(t, '%H:%M:%S')
print t, type(t)
&gt;&gt;&gt; 1900-01-01 08:00:00 &lt;type 'datetime.datetime'&gt;
</snippet></ROW><ROW><id>14518097</id><snippet>1900-01-01</snippet></ROW><ROW><id>14518135</id><snippet>plotData()</snippet></ROW><ROW><id>14518135</id><snippet>for i,dset in enumerate(data):
    x = np.array([point['x'] for point in dset])
    y = np.array([-point['y'] for point in dset])
</snippet></ROW><ROW><id>14518135</id><snippet>set_xlim</snippet></ROW><ROW><id>14518135</id><snippet>set_ylim</snippet></ROW><ROW><id>14518266</id><snippet>f = pyglet.image.load('sprite.png')
batch = CocosNode()
batch.position = 50, 100
add(batch)
for i in range(0, 200):
    test = Sprite(f)        
    test.position = i*10,i*10
    batch.add( test )
</snippet></ROW><ROW><id>14518535</id><snippet>out</snippet></ROW><ROW><id>14518535</id><snippet>void f(out int a, out int b) {
    a = 42;
    b = 9;
}

int a, b;
f(out a, out b);
</snippet></ROW><ROW><id>14518554</id><snippet>if len(string)&gt;=2 and string[0]==string[-1]:
</snippet></ROW><ROW><id>14518554</id><snippet>if string[0]==string[-1] and len(string)&gt;=2:
</snippet></ROW><ROW><id>14518554</id><snippet>match_ends(['', 'x', 'xy', 'xyx', 'xx'])
</snippet></ROW><ROW><id>14518554</id><snippet>&gt;&gt;&gt; len('')
0
&gt;&gt;&gt; ''[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: string index out of range
</snippet></ROW><ROW><id>14518554</id><snippet>if</snippet></ROW><ROW><id>14518554</id><snippet>string[0]==string[-1]</snippet></ROW><ROW><id>14518554</id><snippet>len(string)&gt;=2</snippet></ROW><ROW><id>14518554</id><snippet>len(string)&gt;=2</snippet></ROW><ROW><id>14518554</id><snippet>False</snippet></ROW><ROW><id>14518554</id><snippet>and</snippet></ROW><ROW><id>14518554</id><snippet>and</snippet></ROW><ROW><id>14518554</id><snippet>True</snippet></ROW><ROW><id>14518554</id><snippet>x and y</snippet></ROW><ROW><id>14518554</id><snippet>x</snippet></ROW><ROW><id>14518554</id><snippet>x</snippet></ROW><ROW><id>14518554</id><snippet>y</snippet></ROW><ROW><id>14518654</id><snippet>return result</snippet></ROW><ROW><id>14518654</id><snippet>self.result=result  #assign the result to a LookUp instance 
</snippet></ROW><ROW><id>14518654</id><snippet>In [1]: from pygeocoding import *

In [2]: r=LookUp(latlng="39.9518819802915,-75.1476150197085")

In [3]: r.result
Out[3]: 

{u'results': [{u'address_components': [{u'long_name': u'400',
     u'short_name': u'400',
     u'types': [u'street_number']},
    {u'long_name': u'Arch Street',
     u'short_name': u'Arch St',
     u'types': [u'route']},
    {u'long_name': u'Center City',
     u'short_name': u'Center City',
     u'types': [u'neighborhood', u'politi ....................}
</snippet></ROW><ROW><id>14519314</id><snippet>import re, ast
data = 'IN.Tags.Share.handleCount({"count":17737,"fCnt":"17K","fCntPlusOne":"17K","url":"www.test.com\/"});'
m = re.match('.*({.*})', data)
d = ast.literal_eval(m.group(1))
print d['count']
</snippet></ROW><ROW><id>14519521</id><snippet>range()</snippet></ROW><ROW><id>14519521</id><snippet>list(yourrange) + otherlist
</snippet></ROW><ROW><id>14519521</id><snippet>range</snippet></ROW><ROW><id>14519521</id><snippet>list</snippet></ROW><ROW><id>14519521</id><snippet>tuple</snippet></ROW><ROW><id>14519521</id><snippet>range</snippet></ROW><ROW><id>14519521</id><snippet>start</snippet></ROW><ROW><id>14519521</id><snippet>stop</snippet></ROW><ROW><id>14519521</id><snippet>step</snippet></ROW><ROW><id>14519672</id><snippet>sizer = wx.BoxSizer(wx.VERTICAL)
sizer.Add(self.notebook, 2, wx.EXPAND)
sizer.Add(self.bottomPanel, 0)
self.SetSizer(sizer)
</snippet></ROW><ROW><id>14519672</id><snippet>wx.NoteBook</snippet></ROW><ROW><id>14519672</id><snippet>self.SetSizer</snippet></ROW><ROW><id>14519672</id><snippet>self.bottomPanel = wx.Panel(mainPanel)
self.bottomGroup = BottomGroup(self.bottomPanel)
</snippet></ROW><ROW><id>14519672</id><snippet>self.bottomPanel</snippet></ROW><ROW><id>14519672</id><snippet>self.bottomGroup</snippet></ROW><ROW><id>14519672</id><snippet>parent</snippet></ROW><ROW><id>14519672</id><snippet>SSCCE</snippet></ROW><ROW><id>14519719</id><snippet>sum</snippet></ROW><ROW><id>14519719</id><snippet>print sum(a)
# 6
</snippet></ROW><ROW><id>14519719</id><snippet>a</snippet></ROW><ROW><id>14519719</id><snippet>a = sum(a)</snippet></ROW><ROW><id>14519813</id><snippet>QtCore.pyqtRemoveInputHook()
</snippet></ROW><ROW><id>14520032</id><snippet>0x</snippet></ROW><ROW><id>14520032</id><snippet>gpg --keyserver keys.gnupg.net --recv-keys 0xEA5BBD71 0x6A45C816 0xED9D77D5 0x7D9DC8D2 0xA4135B38 0x36580288
</snippet></ROW><ROW><id>14520032</id><snippet>wwwkeys.pgp.net</snippet></ROW><ROW><id>14520032</id><snippet>gpg --keyserver wwwkeys.pgp.net --recv-keys EA5BBD71 6A45C816 ED9D77D5 7D9DC8D2 A4135B38 36580288
</snippet></ROW><ROW><id>14520032</id><snippet>curl -o 7D9DC8D2.txt "http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x6AF053F07D9DC8D2"
gpg --import 7D9DC8D2.txt
</snippet></ROW><ROW><id>14520129</id><snippet>ArrayList&lt;String&gt; appList = new ArrayList&lt;String&gt;();
Writer out = new StringWriter();
interpreter.setOut(out);
interpreter.exec("print listApplications()");   

StringBuffer results = new StringBuffer();
results.append(out.toString());

Scanner scanner = new Scanner(results.toString());
while(scanner.hasNextLine()){
    String line = scanner.nextLine();
    line = line.trim();
    if(line.equals("None"))
        continue;
    appList.add(line);
}
</snippet></ROW><ROW><id>14520203</id><snippet>def fence(lst, numrails):
    fence = [[None] * len(lst) for n in range(numrails)]
    rails = range(numrails - 1) + range(numrails - 1, 0, -1)
    for n, x in enumerate(lst):
        fence[rails[n % len(rails)]][n] = x

    if 0: # debug
        for rail in fence:
            print ''.join('.' if c is None else str(c) for c in rail)

    return [c for rail in fence for c in rail if c is not None]

def encode(text, n):
    return ''.join(fence(text, n))

def decode(text, n):
    rng = range(len(text))
    pos = fence(rng, n)
    return ''.join(text[pos.index(n)] for n in rng)

z = encode('ATTACK.AT.DAWN', 3)    
print z # ACTWTAKA.ANT.D
y = decode(z, 3)
print y # ATTACK.AT.DAWN
</snippet></ROW><ROW><id>14520651</id><snippet>print "AAAA" + "BBBB"
</snippet></ROW><ROW><id>14520651</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>14520651</id><snippet>print</snippet></ROW><ROW><id>14520651</id><snippet>import sys

sys.stdout.write("AAAA")
sys.stdout.write("BBBB\n")
</snippet></ROW><ROW><id>14520651</id><snippet>print()</snippet></ROW><ROW><id>14520651</id><snippet>from __future__ import print_function

print("AAAA", end='')
print("BBBB")
</snippet></ROW><ROW><id>14520670</id><snippet>fcntl()</snippet></ROW><ROW><id>14520670</id><snippet>flock()</snippet></ROW><ROW><id>14520670</id><snippet>sqlite3</snippet></ROW><ROW><id>14520670</id><snippet>sqlite_version_info</snippet></ROW><ROW><id>14520670</id><snippet>RuntimeError</snippet></ROW><ROW><id>14520670</id><snippet>&gt;&gt;&gt; timeit.timeit("cur = conn.cursor(); cur.execute('UPDATE foo SET name=\"x\"
    WHERE id=3'); conn.commit()", setup="import sqlite3;
    conn = sqlite3.connect('./testdb')", number=100000)
5.733098030090332
&gt;&gt;&gt; timeit.timeit("conn = sqlite3.connect('./testdb'); cur = conn.cursor();
    cur.execute('UPDATE foo SET name=\"x\" WHERE id=3'); conn.commit()",
    setup="import sqlite3", number=100000)
16.518677949905396
</snippet></ROW><ROW><id>14520804</id><snippet>manage.py</snippet></ROW><ROW><id>14520804</id><snippet>django-admin.py</snippet></ROW><ROW><id>14520804</id><snippet>TypeError</snippet></ROW><ROW><id>14520804</id><snippet>CUMULUS = {
...
    'CUMULUS_API_KEY': 'myapikey',
    'CUMULUS_CONTAINER': 'mycontainer',
...
}
</snippet></ROW><ROW><id>14520804</id><snippet>CUMULUS_</snippet></ROW><ROW><id>14520804</id><snippet>CUMULUS = {
...
    'API_KEY': 'myapikey',
    'CONTAINER': 'mycontainer',
...
}
</snippet></ROW><ROW><id>14521214</id><snippet>__global__ void euclidean(float *x, float *y, float *solution) {
    int idx = threadIdx.x + blockDim.x * blockIdx.x;
    int idy = threadIdx.y + blockDim.y * blockIdx.y;

     if ( ( idx &lt; %(NCOLS)s ) &amp;&amp; ( idy &lt; %(NDIM)s ) ) {

        .....
     }
}
</snippet></ROW><ROW><id>14521214</id><snippet>bdim = (16, 16, 1)
dx, mx = divmod(cols, bdim[0])
dy, my = divmod(rows, bdim[1])

gdim = ( (dx + (mx&gt;0)) * bdim[0], (dy + (my&gt;0)) * bdim[1]) )
func(drv.In(X), drv.In(Y), drv.Out(solution), block=bdim, grid=gdim)
</snippet></ROW><ROW><id>14521331</id><snippet>mygrid = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0]]

def findEdges(grid)
    y_start = -1
    saved = []
    for lineno, row in enumerate(grid):
        # Case where we don't have a start point
        if y_start == -1 and 1 in row:
            y_start = lineno
        # Case where we have a start point and we just hit a zero row
        if y_start != -1 and 1 not in row:           
            saved.append((y_start, lineno-1))
            y_start = -1
        # Case where we have a start point and hit the end of the table
        if lineno == len(grid)-1 and y_start &gt; 0:
            saved.append((y_start, lineno))

    return saved

print(findEdges(mygrid))
</snippet></ROW><ROW><id>14521331</id><snippet>mike@example ~ $ python answer.py
[(1, 3), (6, 9)]
</snippet></ROW><ROW><id>14521508</id><snippet>dict['pronoun']</snippet></ROW><ROW><id>14521508</id><snippet>document</snippet></ROW><ROW><id>14521508</id><snippet>'01'</snippet></ROW><ROW><id>14521508</id><snippet>#for example from this format
dic = {'word1': [1,2,3], 'word2':[3,2]}
ref = {1: 'pronoun', 2: 'I' , 3: 'you'}

out = {}

for word in dic:
  for entry in dic[word]:
    if entry in out:
      out[entry].append(word)
    else:
      out[entry] = []
      out[entry].append(word)

print out
&gt;&gt;&gt;{1: ['word1'], 2: ['word1', 'word2'], 3: ['word1', 'word2']}
</snippet></ROW><ROW><id>14521508</id><snippet>document</snippet></ROW><ROW><id>14521508</id><snippet>document1</snippet></ROW><ROW><id>14521508</id><snippet>#for example from this format
dic = {'word1': [1,2,3], 'word2':[3,2]}
ref = {1: 'pronoun', 2: 'I' , 3: 'you'}

for word in dic:
  for indx in range(len(dic[word])): 
    dic[word][indx] = ref[dic[word][indx]]

print dic
&gt;&gt;&gt;{'word1': ['pronoun', 'I', 'you'], 'word2': ['you', 'I']}
</snippet></ROW><ROW><id>14522163</id><snippet>sudo python manage.py migrate core --fake
</snippet></ROW><ROW><id>14522559</id><snippet>children</snippet></ROW><ROW><id>14522559</id><snippet>def __init__(self, name, children=[]):
    self.name = name
    self.children = children
</snippet></ROW><ROW><id>14522559</id><snippet>def __init__(self, name, children=None):
    self.name = name
    if children is None:
        self.children = []
    else:
        self.children = children
</snippet></ROW><ROW><id>14522593</id><snippet>sorted()</snippet></ROW><ROW><id>14522811</id><snippet>exec</snippet></ROW><ROW><id>14522811</id><snippet>import argparse


def foo(path):
    print('Running foo(%r)' % (path, ))


def bar(path):
    print('Running bar(%r)' % (path, ))

dispatch = {
    'foo': foo,
    'bar': bar,
}

parser = argparse.ArgumentParser()
parser.add_argument('function')
parser.add_argument('arguments', nargs='*')
args = parser.parse_args()

dispatch[args.function](*args.arguments)
</snippet></ROW><ROW><id>14522811</id><snippet>% test.py foo 1
Running foo('1')
% test.py bar 2
Running bar('2')
% test.py baz 3
KeyError: 'baz'
</snippet></ROW><ROW><id>14522811</id><snippet>stdin</snippet></ROW><ROW><id>14522811</id><snippet>raw_input</snippet></ROW><ROW><id>14522811</id><snippet>stdin</snippet></ROW><ROW><id>14522811</id><snippet>import argparse


def foo(path):
    print('Running foo(%r)' % (path, ))


def bar(path):
    print('Running bar(%r)' % (path, ))

dispatch = {
    'foo': foo,
    'bar': bar,
}

def parse_args(cmd):
    parser = argparse.ArgumentParser()
    parser.add_argument('function')
    parser.add_argument('arguments', nargs='*')
    args = parser.parse_args(cmd.split())
    return args
</snippet></ROW><ROW><id>14522811</id><snippet>import shmod

while True:
    cmd = raw_input('&gt; ')
    args = shmod.parse_args(cmd)
    try:
        shmod.dispatch[args.function](*args.arguments)
    except KeyError:
        print('Invalid input: {!r}'.format(cmd))
</snippet></ROW><ROW><id>14522811</id><snippet>from cmd import Cmd


class MyInterpreter(Cmd):

    prompt = '&gt; '

    def do_prompt(self, line):
        "Change the interactive prompt"
        self.prompt = line + ': '

    def do_EOF(self, line):
        return True

    def do_foo(self, line):
        print('Running foo {l}'.format(l=line))

    def do_bar(self, line):
        print('Running bar {l}'.format(l=line))

if __name__ == '__main__':
    MyInterpreter().cmdloop()
</snippet></ROW><ROW><id>14522811</id><snippet>% test.py
&gt; foo 1
Running foo 1
&gt; foo 1 2 3
Running foo 1 2 3
&gt; bar 2
Running bar 2
&gt; baz 3
*** Unknown syntax: baz 3
</snippet></ROW><ROW><id>14522816</id><snippet>caller.return() # ???
</snippet></ROW><ROW><id>14522816</id><snippet>return False
</snippet></ROW><ROW><id>14522816</id><snippet>def caller(self):
        print 'in caller before calle'

        rc = self.callee()
        if not rc:
             return
        print 'in caller after callee'
</snippet></ROW><ROW><id>14522816</id><snippet>Explicit is better than implicit</snippet></ROW><ROW><id>14523129</id><snippet>def getInput():
    while True:
        yield raw_input("enter input: ")

for input in getInput():
    if input == 'exit': 
        break
    result = useInput(input)
</snippet></ROW><ROW><id>14523173</id><snippet>getattr</snippet></ROW><ROW><id>14523173</id><snippet>setattr</snippet></ROW><ROW><id>14523173</id><snippet>self</snippet></ROW><ROW><id>14523173</id><snippet>def __init__(self, colorList):
    for color in colorList:
        blobSpec       = getattr(blobLib, color)
        blob           = blobSpec()    # create an instance of the blob
        blob.Obj       = blob.returnObj(self.page) 
        setattr(self, color, blob)
</snippet></ROW><ROW><id>14523173</id><snippet>BlueBlob()</snippet></ROW><ROW><id>14523193</id><snippet>issubclass</snippet></ROW><ROW><id>14523837</id><snippet>retvel, t_minus_thresh = cv2.threshold(t_minus, 0, 255, cv2.THRESH_OTSU)
t_minus_dilate = cv2.dilate(t_minus_thresh, es)
</snippet></ROW><ROW><id>14523986</id><snippet>branches = [ref for ref in repo.refs.keys("refs/heads/") if
            any((True for commit in repo.get_walker(include=[repo.refs[ref]])
                 if commit.id == YOURSHA))]
</snippet></ROW><ROW><id>14523988</id><snippet>#SortActions.py

#gets the current item that was clicked in the window
def GetWindowIndex(self, event):
    w = event.widget
    self.curIndex = int(w.curselection()[0])

#moves the current item in the window when clicked/dragged
def MoveWindowItem(self, event):
    i = self.nearest(event.y) #here is where the error is occurring 
    print i
</snippet></ROW><ROW><id>14523988</id><snippet>   ...
   def BuildListbox(self):
        #self.listbox = Tkinter.Listbox()  #??? This has no master widget ...
        #Since this is already a listbox, there's no point in building another ...

        self.bind('&lt;&lt;ListboxSelect&gt;&gt;', lambda e:SortActions.GetWindowIndex(self,e))

        self.bind('&lt;B1-Motion&gt;', lambda e:SortActions.MoveWindowItem(self,e)
        for item in ("one", "two", "three", "four"):
            self.insert(END, item)    
        self.insert(END, "a list entry")
        self.pack()
</snippet></ROW><ROW><id>14524294</id><snippet>zip()</snippet></ROW><ROW><id>14524294</id><snippet>&gt;&gt;&gt; list(zip(*[[1, 2], [3, 4]]))
[(1, 3), (2, 4)]
</snippet></ROW><ROW><id>14524294</id><snippet>list()</snippet></ROW><ROW><id>14524294</id><snippet>zip()</snippet></ROW><ROW><id>14524294</id><snippet>&gt;&gt;&gt; zip(*(zip(*part) for part in [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]))
[((1, 3), (5, 7)), ((2, 4), (6, 8))]
</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1 = []
for VARIABLE2 in EXPRESSION1:
    if EXPRESSION2:
        VARIABLE1.append(EXPRESSION3)
</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1 = [EXPRESSION3 for VARIABLE2 in EXPRESSION1 if EXPRESSION3]
</snippet></ROW><ROW><id>14524353</id><snippet>bigNumbers = [myList[i] for i in xrange(0, len(myList)) if myList[i] &gt; 10]
</snippet></ROW><ROW><id>14524353</id><snippet>[VARIABLE1[VARIABLE2] for VARIABLE2 in xrange(len(VARIABLE1)) if EXPRESSION1]
</snippet></ROW><ROW><id>14524353</id><snippet>[VARIABLE3 for VARIABLE3 in VARIABLE1 if EXPRESSION1PRIME]
</snippet></ROW><ROW><id>14524353</id><snippet>EXPRESSION1PRIME</snippet></ROW><ROW><id>14524353</id><snippet>EXPRESSION1</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1[VARIABLE2]</snippet></ROW><ROW><id>14524353</id><snippet>EXPRESSION1PRIME</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1</snippet></ROW><ROW><id>14524353</id><snippet>x</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1</snippet></ROW><ROW><id>14524353</id><snippet>i</snippet></ROW><ROW><id>14524353</id><snippet>i</snippet></ROW><ROW><id>14524353</id><snippet>VARIABLE1_VARIABLE2</snippet></ROW><ROW><id>14524353</id><snippet>myList_i</snippet></ROW><ROW><id>14524353</id><snippet>iter(VARIABLE1)</snippet></ROW><ROW><id>14524356</id><snippet>datetime.datetime.strptime("2013-1-25", '%Y-%m-%d').strftime('%m/%d/%y')
</snippet></ROW><ROW><id>14524356</id><snippet>"01/25/13"</snippet></ROW><ROW><id>14524356</id><snippet>dt = datetime.datetime.strptime("2013-1-25", '%Y-%m-%d')
print '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)
</snippet></ROW><ROW><id>14524356</id><snippet>"1/25/13"</snippet></ROW><ROW><id>14524650</id><snippet>wx.FD_OVERWRITE_PROMPT</snippet></ROW><ROW><id>14524650</id><snippet>wx.FD_SAVE</snippet></ROW><ROW><id>14525040</id><snippet>for j in itertools.count(100) :
    try :
        a = np.empty((j * 10**6,), dtype='uint8`)
        print 'Allocated {0} MB of memory!'.format(j)
        del a
    except MemoryError:
        print 'Failed to allocate {0} MB of memory!'.format(j)
        break
</snippet></ROW><ROW><id>14525040</id><snippet>scipy.sparse</snippet></ROW><ROW><id>14525040</id><snippet>memmap</snippet></ROW><ROW><id>14525082</id><snippet>sorted(myDict.items(), key=lambda (k, v): (-v[1],v[0]))</snippet></ROW><ROW><id>14525082</id><snippet>rank</snippet></ROW><ROW><id>14525082</id><snippet>reverse=True</snippet></ROW><ROW><id>14525082</id><snippet>sorted</snippet></ROW><ROW><id>14525082</id><snippet>tuples</snippet></ROW><ROW><id>14525082</id><snippet>reverse=True</snippet></ROW><ROW><id>14525082</id><snippet>l1 = sorted(myDict.items(),key=lambda (k,v):v[0])
l1.sort(key=lambda (k,v):v[1],reverse=True)
</snippet></ROW><ROW><id>14525121</id><snippet>import re
import os
pattern = r'''\HF=(.*?)\RMSD='''
pat = re.compile(pattern, re.DOTALL)
for number in pat.finditer(open('file.txt').read()):
    print number.group(1).replace(os.linesep, '').replace(' ', '').strip(r'''\\''')
... 
-568 .8880019,-568.2343213, -568 .2343432, ... , -586.328492 1\
</snippet></ROW><ROW><id>14525320</id><snippet>content = urllib2.urlopen(
    "https://indivinet.ca/api/v1/login",
    "api_key=5f1d5cb35ca1953ecd8f63ac0ac44d3b&amp;location_id=location&amp;username=username&amp;password=password"
).read()
</snippet></ROW><ROW><id>14525816</id><snippet>hex(int(num))</snippet></ROW><ROW><id>14525816</id><snippet>&gt;&gt;&gt; hex(int(15579202759033880576))[2:]
'd834725e00000000L'   &lt;-- 17 with the L
</snippet></ROW><ROW><id>14525816</id><snippet>data = hex(data)[2:].split('L')[0]
</snippet></ROW><ROW><id>14525953</id><snippet>url(r'^(?P&lt;store_subdomain&gt;\w+)/$', homepage, name='home')</snippet></ROW><ROW><id>14525953</id><snippet>&lt;li&gt;&lt;a href="{% url home store_subdomain %}"&gt;Home&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>14526042</id><snippet>os.listdir()</snippet></ROW><ROW><id>14526042</id><snippet>os.path.join()</snippet></ROW><ROW><id>14526042</id><snippet>for file in os.listdir(DIR_NAME):
    if (file.endswith('.out')):
        open(os.path.join(DIR_NAME, file))
</snippet></ROW><ROW><id>14526242</id><snippet>def print_message(message):
    print "\n"
    print "-"*10
    print message
    print "-"*10
    print "\n"

print_message('This is a test of the %s system' % codes[0])
print_message('This is not a test of the %s system and all is good'% codes[1])
</snippet></ROW><ROW><id>14526446</id><snippet>models.py

from django.contrib.auth.models import User
from django.db import models

class AllocationPlan(models.Model):
    user = models.ForeignKey(User)
    name = models.CharField(max_length=50)
    data = models.CharField(max_length=4096)
    total = models.DecimalField(max_digits=10, decimal_places=2)

forms.py

from django import forms
from django.forms import ModelForm
from app_name.models import AllocationPlan   

class AllocationPlanForm(ModelForm):
    class Meta:
        model = AllocationPlan

views.py

from django.shortcuts import render
from app_name.forms import AllocationPlanForm

def add(request):
    if request.method == 'POST':
        form = AllocatinPlanForm(request.POST)
        if form.is_valid():
            form.save()
return render(request, 'page.html', {
    'form': AllocationPlanForm()
})

 page.html

 &lt;form method="post"&gt;{% csrf_token %}
     {% for field in form %}
     {{field}}
     &lt;input type="submit" value="Submit"/&gt;
     {% endfor %}
 &lt;/form&gt;
</snippet></ROW><ROW><id>14526493</id><snippet>.decode()</snippet></ROW><ROW><id>14526493</id><snippet>binary_a = a.decode("hex")
binary_b = b.decode("hex")
</snippet></ROW><ROW><id>14526493</id><snippet>zip()</snippet></ROW><ROW><id>14526493</id><snippet>ord()</snippet></ROW><ROW><id>14526493</id><snippet>^</snippet></ROW><ROW><id>14526493</id><snippet>chr</snippet></ROW><ROW><id>14526493</id><snippet>def xor_strings(xs, ys):
    return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))

xored = xor_strings(binary_a, binary_b).encode("hex")
</snippet></ROW><ROW><id>14526493</id><snippet>.encode()</snippet></ROW><ROW><id>14526520</id><snippet>*</snippet></ROW><ROW><id>14526520</id><snippet>*?</snippet></ROW><ROW><id>14526520</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14526520</id><snippet>.</snippet></ROW><ROW><id>14526520</id><snippet>.*[^\\]\n</snippet></ROW><ROW><id>14526520</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14526520</id><snippet>[^\\]</snippet></ROW><ROW><id>14526520</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "foo\n\nbar"
&gt;&gt;&gt; re.findall(r'.*?[^\\]\n', s)
['foo\n']
&gt;&gt;&gt; re.findall(r'.*[^\\]\n', s)
['foo\n\n']
</snippet></ROW><ROW><id>14526520</id><snippet>.*</snippet></ROW><ROW><id>14526520</id><snippet>.*?</snippet></ROW><ROW><id>14526520</id><snippet>\n</snippet></ROW><ROW><id>14526520</id><snippet>.*?</snippet></ROW><ROW><id>14526520</id><snippet>fo</snippet></ROW><ROW><id>14526520</id><snippet>[^\\]</snippet></ROW><ROW><id>14526520</id><snippet>o</snippet></ROW><ROW><id>14526520</id><snippet>\n</snippet></ROW><ROW><id>14526520</id><snippet>.*</snippet></ROW><ROW><id>14526520</id><snippet>foo</snippet></ROW><ROW><id>14526520</id><snippet>[^\\]</snippet></ROW><ROW><id>14526520</id><snippet>\n</snippet></ROW><ROW><id>14526520</id><snippet>\n</snippet></ROW><ROW><id>14526873</id><snippet>conf</snippet></ROW><ROW><id>14526873</id><snippet>for i in range(conf.nrows()):
   export_data['priorities'][conf[i, 2].value] = str(int(conf[i, 3].value))
</snippet></ROW><ROW><id>14526873</id><snippet>int(conf[i, 3].value)</snippet></ROW><ROW><id>14526873</id><snippet>try</snippet></ROW><ROW><id>14526873</id><snippet>except</snippet></ROW><ROW><id>14527055</id><snippet>,</snippet></ROW><ROW><id>14527055</id><snippet>for i in range(len(cities)):
    for j,k in zip(dates[i],prices[i]):
        print str(i) + " ; " +  j.text +" ; "+ k.text,
    print
</snippet></ROW><ROW><id>14527055</id><snippet>print</snippet></ROW><ROW><id>14527055</id><snippet>for</snippet></ROW><ROW><id>14527055</id><snippet>print</snippet></ROW><ROW><id>14527055</id><snippet>str.join()</snippet></ROW><ROW><id>14527055</id><snippet>for i in range(len(cities)):
    print ' '.join(str(i)+" ; "+j.text+" ; "+k.text for j, k in zip(dates[i], prices[i]))
</snippet></ROW><ROW><id>14527096</id><snippet>1 / pi</snippet></ROW><ROW><id>14527096</id><snippet>1 / 2 / pi</snippet></ROW><ROW><id>14527096</id><snippet>freqs = linspace(0.01, 3, 3000)
</snippet></ROW><ROW><id>14527096</id><snippet>1/pi = 0.318309886184
Frequency = 0.318311478264
</snippet></ROW><ROW><id>14527096</id><snippet>periodogram</snippet></ROW><ROW><id>14527096</id><snippet>freqs / 2 / np.pi</snippet></ROW><ROW><id>14527096</id><snippet>max</snippet></ROW><ROW><id>14527197</id><snippet>#!/usr/bin/env python

import sys, os, time

t = int(sys.argv[1])
print 'hello, I am', t
time.sleep(t)
if t &gt; 2:
    sys.exit()
os.execl(sys.argv[0], sys.argv[0], str(t+1))
</snippet></ROW><ROW><id>14527197</id><snippet>SIGHUP</snippet></ROW><ROW><id>14527197</id><snippet>import threading, signal, time

should_restart = False
cond = threading.Event()
exit = threading.Event()
threads = []

def start(num=3):
    for i in range(num):
        t = threading.Thread(target=foo, args=[cond])
        threads.append(t)
        t.daemon = True
        print 'hello, I am', t.name
        t.start()

def restart(signum, frame):
    global should_restart
    should_restart = False
    cond.set()
    for thread in threads:
        thread.join()
        print 'bye bye', thread.name
    cond.clear()
    start()

def foo(should_exit):
    while not should_exit.is_set():
        time.sleep(0.2)

signal.signal(signal.SIGHUP, restart)
signal.signal(signal.SIGINT, lambda n, f: exit.set())
start()

while not exit.is_set():
    time.sleep(0.2)
</snippet></ROW><ROW><id>14527271</id><snippet>ftplib</snippet></ROW><ROW><id>14527271</id><snippet>zipfile</snippet></ROW><ROW><id>14527271</id><snippet>io.BytesIO</snippet></ROW><ROW><id>14527271</id><snippet>StringIO</snippet></ROW><ROW><id>14527365</id><snippet>pip install Cython</snippet></ROW><ROW><id>14527365</id><snippet>brew install llvm</snippet></ROW><ROW><id>14527365</id><snippet>pip</snippet></ROW><ROW><id>14527365</id><snippet>llvmpy</snippet></ROW><ROW><id>14527365</id><snippet>numba</snippet></ROW><ROW><id>14527365</id><snippet>meta</snippet></ROW><ROW><id>14527365</id><snippet>ply</snippet></ROW><ROW><id>14527365</id><snippet>blosc</snippet></ROW><ROW><id>14527365</id><snippet>sphinx</snippet></ROW><ROW><id>14527365</id><snippet>aterm</snippet></ROW><ROW><id>14527365</id><snippet>cd /tmp</snippet></ROW><ROW><id>14527365</id><snippet>sudo git clone git@github.com:ContinuumIO/blaze-core.git</snippet></ROW><ROW><id>14527365</id><snippet>cd /tmp/blaze-core</snippet></ROW><ROW><id>14527365</id><snippet>sudo make build</snippet></ROW><ROW><id>14527365</id><snippet>sudo make docs</snippet></ROW><ROW><id>14527365</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>14527365</id><snippet>__init__.py</snippet></ROW><ROW><id>14527365</id><snippet>&gt;&gt;&gt; import blaze
&gt;&gt;&gt; from blaze import Array, dshape
&gt;&gt;&gt; ds=dshape('2,2,int')
&gt;&gt;&gt; a = Array([1,2,3,4],ds)
&gt;&gt;&gt; a
Array
  datashape := 2, 2, int 
  values    := [CArray(ptr=140454075688080)] 
  metadata  := [manifest, arraylike] 
  layout    := Chunked(dim=0) 
[1 2 3 4]
</snippet></ROW><ROW><id>14527419</id><snippet>__call__()</snippet></ROW><ROW><id>14527419</id><snippet>from types import MethodType

class Foo(object):
    def __init__(self, name, val):
        self.name = name
        self.val = val
        self.__name__ = name + '_foo'
        self.name = name
    def __call__(self, instance):
        return self.name + str(self.val + instance.val)

class Baz(object):
    def __init__(self, val):
        self.val = val

Baz.biff = MethodType(Foo("biff", 42), None, Baz)

b = Baz(13)
print b.biff()
&gt;&gt;&gt; biff55
</snippet></ROW><ROW><id>14527419</id><snippet>Foo</snippet></ROW><ROW><id>14527419</id><snippet>__get__()</snippet></ROW><ROW><id>14527419</id><snippet>from types import MethodType

class Foo(object):
    def __init__(self, name, val):
        self.name = name
        self.val = val
        self.__name__ = name + '_foo'
        self.name = name
    def __call__(self, instance):
        return self.name + str(self.val + instance.val)
    def __get__(self, instance, owner):
        return MethodType(self, instance) if instance else self
        # Python 2: MethodType(self, instance, owner)

class Baz(object):
    def __init__(self, val):
        self.val = val

Baz.biff = Foo("biff", 42)

b = Baz(13)
print b.biff()
&gt;&gt;&gt; biff55
</snippet></ROW><ROW><id>14527548</id><snippet>with open('../json/routes_test.json') as json_data:
    datas = json.load(json_data)
    area_keys = ['area1','area2','area3','area4','area5']
    type_keys = ['type1','type2','type3','type4']

    for data in datas:
        data['area'] = [data[k] for k in area_keys]
        data['type'] = [data[k] for k in type_keys]
        for k in area_keys + type_keys:
            del data[k]

out = json.dumps(datas, sort_keys=True, indent=4, separators=(',', ': '))
print out
with open('../json/toues_test_intoarrays.json', 'w') as f_out:
    f_out.write(out)
</snippet></ROW><ROW><id>14527548</id><snippet>area</snippet></ROW><ROW><id>14527548</id><snippet>type</snippet></ROW><ROW><id>14527548</id><snippet>    for data in datas:
        keys = sorted(data.keys())

        area_keys = [k for k in keys if k.startswith('area')]
        data['area'] = [data[k] for k in area_keys]

        type_keys = [k for k in keys if k.startswith('type')]
        data['type'] = [data[k] for k in type_keys]

        for k in area_keys + type_keys:
            del data[k]
</snippet></ROW><ROW><id>14527548</id><snippet>'area1', 'area2'</snippet></ROW><ROW><id>14527679</id><snippet>scipy.weave</snippet></ROW><ROW><id>14527679</id><snippet>import numpy as np
from scipy.weave import inline

a = np.random.rand(10000000)
b = np.random.rand(10000000)
c = np.empty((10000000,))

def c_sum(a, b, c) :
    length = a.shape[0]
    code = '''
           for(int j = 0; j &lt; length; j++)
           {
               c[j] = a[j] + b[j];
           }
           '''
    inline(code, ['a', 'b', 'c', 'length'])
</snippet></ROW><ROW><id>14527679</id><snippet>c_sum(a, b, c)</snippet></ROW><ROW><id>14527679</id><snippet>In [12]: %timeit c_sum(a, b, c)
10 loops, best of 3: 33.5 ms per loop

In [16]: %timeit np.add(a, b, out=c)
10 loops, best of 3: 33.6 ms per loop
</snippet></ROW><ROW><id>14527941</id><snippet>time.strptime('26/01/12 23:50:32.123', '%d/%m/%y %H:%M:%S.%f')
</snippet></ROW><ROW><id>14527941</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; a = datetime.strptime('26/01/12 23:50:32.123', '%d/%m/%y %H:%M:%S.%f')
&gt;&gt;&gt; a.microsecond
</snippet></ROW><ROW><id>14528039</id><snippet>[1, 2, 3, 4, 5]
#remove   ^
[1, 2, 3, 5]
</snippet></ROW><ROW><id>14528068</id><snippet>:!python %</snippet></ROW><ROW><id>14528068</id><snippet>nnoremap \ll :!python %&lt;cr&gt;</snippet></ROW><ROW><id>14528068</id><snippet>\ll</snippet></ROW><ROW><id>14528068</id><snippet>python.vim</snippet></ROW><ROW><id>14528068</id><snippet>.vim/ftplugin</snippet></ROW><ROW><id>14528068</id><snippet>autocmd FileType python nnoremap \ll :!python %&lt;cr&gt;
</snippet></ROW><ROW><id>14528068</id><snippet>\ll</snippet></ROW><ROW><id>14528068</id><snippet>:!python %</snippet></ROW><ROW><id>14528116</id><snippet>from main import application

class RouteMeta(type):
    def __new__(mcs, name, bases, dct):
        type_name = dct.get("TYPE_NAME")
        if type_name is not None:
            @application.route('/', type_name)
            def list(self):
                return self._list()
            dct["list"] = list
        return super(RouteMeta, mcs).__new__(mcs, name, bases, dct)

class ParentHandler(RequestHandler):
    __metaclass__ = RouteMeta

class ChildHandler(ParentHandler):
    TYPE_NAME = 'child'

    def _list(self):
         return []
</snippet></ROW><ROW><id>14528116</id><snippet>list()</snippet></ROW><ROW><id>14528116</id><snippet>ParentHandler</snippet></ROW><ROW><id>14528116</id><snippet>ParentHandler</snippet></ROW><ROW><id>14528116</id><snippet>TYPE_NAME</snippet></ROW><ROW><id>14528116</id><snippet>RequestHandler</snippet></ROW><ROW><id>14528116</id><snippet>RouteMeta</snippet></ROW><ROW><id>14528116</id><snippet>RequestHandler.__metaclass__</snippet></ROW><ROW><id>14528116</id><snippet>type</snippet></ROW><ROW><id>14528175</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>14528175</id><snippet>import sys
import traceback

def save_if_allowed(fn):
    def wrapped(*args, **kwargs):
        try:
            return fn(*args, **kwargs) if enabled else None
        except Exception:
            print "The exception:"
            print "".join(traceback.format_exception(*sys.exc_info()))
            return None
    return wrapped

@save_if_allowed
def stuff():
    raise Exception("stuff")


def foo():
    stuff()

foo()
</snippet></ROW><ROW><id>14528175</id><snippet>try/except</snippet></ROW><ROW><id>14528175</id><snippet>$ cat test.py
def inner():
    raise Exception("inner")

def outer():
    try:
        inner()
    except Exception:
        print "".join(traceback.format_exception(*sys.exc_info()))

def caller():
    outer()

caller()

$ python test.py
Traceback (most recent call last):
  File "x.py", line 42, in outer
    inner()
  File "x.py", line 38, in inner
    raise Exception("inner")
Exception: inner
</snippet></ROW><ROW><id>14528175</id><snippet>inner()</snippet></ROW><ROW><id>14528175</id><snippet>outer()</snippet></ROW><ROW><id>14528175</id><snippet>outer()</snippet></ROW><ROW><id>14528175</id><snippet>$ cat test.py
def inner():
    raise Exception("inner")

def outer():
    try:
        inner()
    except Exception:
        exc_info = sys.exc_info()
        stack = traceback.extract_stack()
        tb = traceback.extract_tb(exc_info[2])
        full_tb = stack[:-1] + tb
        exc_line = traceback.format_exception_only(*exc_info[:2])
        print "Traceback (most recent call last):"
        print "".join(traceback.format_list(full_tb)),
        print "".join(exc_line)

def caller():
    outer()

caller()

$ python test.py
Traceback (most recent call last):
  File "test.py", line 56, in &lt;module&gt;
    caller()
  File "test.py", line 54, in caller
    outer()
  File "test.py", line 42, in outer
    inner()
  File "test.py", line 38, in inner
    raise Exception("inner")
Exception: inner
</snippet></ROW><ROW><id>14528294</id><snippet>var tree = d3.layout.tree().size([h, w]);
</snippet></ROW><ROW><id>14528294</id><snippet>{"name": "a_root_node", "children": ["B", "C"]}
</snippet></ROW><ROW><id>14528294</id><snippet>&gt;&gt;&gt; d = {"name": 'A', "children": ['B', 'C']}
&gt;&gt;&gt; import json as JSON
&gt;&gt;&gt; dj = JSON.dumps(d)
&gt;&gt;&gt; dj
    '{"name": "A", "children": ["B", "C"]}'
</snippet></ROW><ROW><id>14528294</id><snippet>tree = {'name': 'root', 'children': [{'name': 'node 2', 'children': 
       [{'name': 'node 4', 'children': [{'name': 'node 10', 'size': 7500}, 
       {'name': 'node 11', 'size': 12000}]}, {'name': 'node 5', 'children': 
       [{'name': 'node 12', 'children': [{'name': 'node 16', 'size': 10000}, 
       {'name': 'node 17', 'size': 12000}]}, {'name': 'node 13', 'size': 5000}]}]}, 
       {'name': 'node 3', 'children': [{'name': 'node 6', 'children': 
       [{'name': 'node 14', 'size': 8000}, {'name': 'node 15', 'size': 9000}]}, 
       {'name': 'node 7', 'children': [{'name': 'node 8', 'size': 10000}, 
       {'name': 'node 9', 'size': 12000}]}]}]}
</snippet></ROW><ROW><id>14528498</id><snippet>myapp.herokuapp.com</snippet></ROW><ROW><id>14528568</id><snippet>        deep_reverse(i)
</snippet></ROW><ROW><id>14528568</id><snippet>        i = deep_reverse(i)
</snippet></ROW><ROW><id>14528568</id><snippet>def deep_reverse(lst):
    if not is_list(lst):
        return lst
    return map(deep_reverse, reversed(lst))
</snippet></ROW><ROW><id>14528613</id><snippet>#! /usr/bin/env python
import random
codes = ["A", "B", "C", "D", "E"]
random.shuffle(codes)

def print_sys_result(sys_code):
    results = {
        "A": "is really great",
        "B": "has improved greatly over the years",
        "C": "sucks",
        "D": "screwed us up really badly",
        "E": "stinks like monkey balls"
    }
    print "\n"
    print "-"*10
    print 'This is a test of the {0} system'.format(sys_code)
    if sys_code in results:
        print "The {0} system {1}.".format(sys_code, results[sys_code])
    else:
        print "No results available for system " + sys_code
    print "-"*10
    print "\n"

print_sys_result(codes[0])
</snippet></ROW><ROW><id>14529064</id><snippet>shell=True</snippet></ROW><ROW><id>14529064</id><snippet>call</snippet></ROW><ROW><id>14529064</id><snippet>shell=True</snippet></ROW><ROW><id>14529064</id><snippet>shell=True</snippet></ROW><ROW><id>14529091</id><snippet>used</snippet></ROW><ROW><id>14529091</id><snippet>chase()</snippet></ROW><ROW><id>14529091</id><snippet>used</snippet></ROW><ROW><id>14529091</id><snippet>append()</snippet></ROW><ROW><id>14529191</id><snippet>__getattribute__</snippet></ROW><ROW><id>14529191</id><snippet>__class__</snippet></ROW><ROW><id>14529191</id><snippet>__class__</snippet></ROW><ROW><id>14529191</id><snippet>&gt;&gt;&gt; class IsInstanceScrewer(object):
    def __init__(self, value):
        self.value = value

    def __getattribute__(self, name):
        print name
        if name in ('value',):
            return object.__getattribute__(self, name)
        value = object.__getattribute__(self, 'value')
        return object.__getattribute__(value, name)

&gt;&gt;&gt; isinstance(IsInstanceScrewer(False), bool)
__class__
True
&gt;&gt;&gt; isinstance(IsInstanceScrewer([1, 2, 3]), list)
__class__
True
</snippet></ROW><ROW><id>14529195</id><snippet>class Foo(Base):
    __tablename__="foo_tablename"
    bar = Column(String(80))

bar = 'stackoverflow'
session.query(Foo).filter(literal('stackoverflow').like(func.concat(Foo.bar, '%')))
</snippet></ROW><ROW><id>14529195</id><snippet>&gt;&gt;INFO sqlalchemy.engine.base.Engine SELECT bar FROM foo_tablename WHERE :param1 LIKE CONCAT(foo_tablename.bar_column,'%')
&gt;&gt;INFO sqlalchemy.engine.base.Engine {'param1': 'stack'}
</snippet></ROW><ROW><id>14529586</id><snippet>def clean_cut(st, end):
    st += ' ' #In case end &gt; len(st)
    return st[:st[:end + 1].rfind(' ')]
for i in ( 15, 16, 17,30,35):
    cutdown = clean_cut( sample , i )
    print "%s | %s" % ( i , cutdown )
</snippet></ROW><ROW><id>14529586</id><snippet>15 | This is a
16 | This is a sample
17 | This is a sample
30 | This is a sample string and I
35 | This is a sample string and I would
</snippet></ROW><ROW><id>14529586</id><snippet>&gt;&gt;&gt; stmt_ab = """
for i in ( 15, 16, 17,30,35):
    cutdown = sample[:sample[:i + 1].rfind(' ')]
"""
&gt;&gt;&gt; stmt_mg = """
for i in ( 15, 16, 17,30,35):
    cutdown =  textwrap.wrap(sample[:i+1],i)[0]
"""
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; t1_ab = timeit.Timer(stmt=stmt_ab, setup = "from __main__ import sample")
&gt;&gt;&gt; t1_mg = timeit.Timer(stmt=stmt_mg, setup = "from __main__ import sample, textwrap")
&gt;&gt;&gt; t1_ab.timeit(10000)
0.10367805429780219
&gt;&gt;&gt; t1_mg.timeit(10000)
5.597085870104877
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14529615</id><snippet>&gt;&gt;&gt; l = ["data","more data","","data 2","more data 2","danger","","date3","lll"]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; groupby(l, lambda x: x == "")
&lt;itertools.groupby object at 0x9ce06bc&gt;
&gt;&gt;&gt; [list(group) for k, group in groupby(l, lambda x: x == "") if not k]
[['data', 'more data'], ['data 2', 'more data 2', 'danger'], ['date3', 'lll']]
</snippet></ROW><ROW><id>14529615</id><snippet>&gt;&gt;&gt; [list(group) for k, group in groupby(l, bool) if k]
[['data', 'more data'], ['data 2', 'more data 2', 'danger'], ['date3', 'lll']]
</snippet></ROW><ROW><id>14529642</id><snippet>previous = cv2.blur(frame, (5,5))</snippet></ROW><ROW><id>14529642</id><snippet>cv2.THRESH_BINARY</snippet></ROW><ROW><id>14529735</id><snippet>test_lang()</snippet></ROW><ROW><id>14529735</id><snippet>str.join()</snippet></ROW><ROW><id>14529735</id><snippet>''.join()</snippet></ROW><ROW><id>14529735</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>14529735</id><snippet>from itertools import groupby
def keyfunc(letter):
    return (test_lang(letter), letter in punc)

cleaned = ' '.join(''.join(g) for k, g in groupby(letters, keyfunc))
</snippet></ROW><ROW><id>14529735</id><snippet>''.join(g)</snippet></ROW><ROW><id>14529735</id><snippet>' '.join()</snippet></ROW><ROW><id>14529735</id><snippet>punc</snippet></ROW><ROW><id>14529919</id><snippet>host = socket.gethostbyaddr(ip)
</snippet></ROW><ROW><id>14529919</id><snippet>host</snippet></ROW><ROW><id>14529919</id><snippet>type(host)</snippet></ROW><ROW><id>14529919</id><snippet>tuple</snippet></ROW><ROW><id>14529919</id><snippet>hostname = host[0]
</snippet></ROW><ROW><id>14529919</id><snippet>hostname, _, addrlist = host
</snippet></ROW><ROW><id>14529919</id><snippet>destfile.write('{} resolves to {}'.format(ip, hostname))
</snippet></ROW><ROW><id>14529919</id><snippet>&gt;&gt;&gt; help(socket.gethostbyaddr)
gethostbyaddr(host) -&gt; (name, aliaslist, addresslist)

Return the true host name, a list of aliases, and a list of IP addresses,
for a host.  The host argument is a string giving a host name or IP number.
</snippet></ROW><ROW><id>14530027</id><snippet>In [28]: df
Out[28]:
          A         B         C         D         E  GRP
0  0.395670  0.219560  0.600644  0.613445  0.242893    0
1  0.323911  0.464584  0.107215  0.204072  0.927325    0
2  0.321358  0.076037  0.166946  0.439661  0.914612    1
3  0.133466  0.447946  0.014815  0.130781  0.268290    1

In [26]: f = {'A':['sum','mean'], 'B':['prod']}

In [27]: df.groupby('GRP').agg(f)
Out[27]:
            A                   B
          sum      mean      prod
GRP
0    0.719580  0.359790  0.102004
1    0.454824  0.227412  0.034060
</snippet></ROW><ROW><id>14530027</id><snippet>In [67]: f = {'A':['sum','mean'], 'B':['prod'], 'D': lambda g: df.ix[g.index].E.sum()}

In [69]: df.groupby('GRP').agg(f)
Out[69]:
            A                   B         D
          sum      mean      prod  &lt;lambda&gt;
GRP
0    0.719580  0.359790  0.102004  1.170219
1    0.454824  0.227412  0.034060  1.182901
</snippet></ROW><ROW><id>14530027</id><snippet>g.index</snippet></ROW><ROW><id>14530027</id><snippet>df.ix[]</snippet></ROW><ROW><id>14530027</id><snippet>g[]</snippet></ROW><ROW><id>14530027</id><snippet>In [95]: cust = lambda g: g[df.ix[g.index]['C'] &lt; 0.5].sum()

In [96]: f = {'A':['sum','mean'], 'B':['prod'], 'D': {'my name': cust}}

In [97]: df.groupby('GRP').agg(f)
Out[97]:
            A                   B         D
          sum      mean      prod   my name
GRP
0    0.719580  0.359790  0.102004  0.204072
1    0.454824  0.227412  0.034060  0.570441
</snippet></ROW><ROW><id>14530063</id><snippet>repr</snippet></ROW><ROW><id>14530063</id><snippet>repr</snippet></ROW><ROW><id>14530063</id><snippet>dict</snippet></ROW><ROW><id>14530063</id><snippet>def __repr__(self):
    return repr(self.data)
</snippet></ROW><ROW><id>14530063</id><snippet>__str__</snippet></ROW><ROW><id>14530063</id><snippet>__repr__</snippet></ROW><ROW><id>14530063</id><snippet>__str__</snippet></ROW><ROW><id>14530063</id><snippet>__repr__</snippet></ROW><ROW><id>14530063</id><snippet>eval</snippet></ROW><ROW><id>14530187</id><snippet>class Users():
  __tablename__ = 'users'
  user_id = Column(String(36), primary_key=True, nullable=False)
  .......

class Permissions():
  __tablename__ = 'permissions'
  user_id = Column(String(36), ForeignKey('users.user_id'), primary_key=True,
                   nullable=False)
   ..........


@event.listens_for(Users, "after_insert)
def create_permissions(mapper, connection, user):
    user.session.add(Permissions(user_id=user.user_id))
</snippet></ROW><ROW><id>14530199</id><snippet>find_closest()</snippet></ROW><ROW><id>14530199</id><snippet>find_closest()</snippet></ROW><ROW><id>14530369</id><snippet>div</snippet></ROW><ROW><id>14530466</id><snippet>from selenium import webdriver

ff = webdriver.Firefox()
ff.implicitly_wait(10) # seconds
ff.get("http://somedomain/url_that_delays_loading")
myDynamicElement = ff.find_element_by_id("myDynamicElement")
</snippet></ROW><ROW><id>14530478</id><snippet>beds_in_room = yield map(getBeds,room.beds)
</snippet></ROW><ROW><id>14530478</id><snippet>rooms_in_build = yield map(getRoom,build.rooms)
</snippet></ROW><ROW><id>14530478</id><snippet>buildings_in_hotel = yield map(getBuilding,hotel_obj.buildings)
</snippet></ROW><ROW><id>14530561</id><snippet>classmethod</snippet></ROW><ROW><id>14530561</id><snippet>staticmethod</snippet></ROW><ROW><id>14530561</id><snippet>class</snippet></ROW><ROW><id>14530561</id><snippet>class MyClass(object):
     def __init__(self,arg):
         self.arg = arg

     @classmethod
     def from_sum(cls,*args):
         return cls(sum(args))

inst = MyClass.from_sum(1,2,3,4)
print inst.arg  #10
</snippet></ROW><ROW><id>14530966</id><snippet>graph.es["curved"] = False
</snippet></ROW><ROW><id>14530966</id><snippet>plot(graph, edge_curved=False)
</snippet></ROW><ROW><id>14530966</id><snippet>plot()</snippet></ROW><ROW><id>14530966</id><snippet>margin</snippet></ROW><ROW><id>14530966</id><snippet>plot</snippet></ROW><ROW><id>14530966</id><snippet>bbox = BoundingBox(600, 600)
figure = Plot(bbox=bbox)
bbox = bbox.contract(20)
figure.add(graph, bbox=bbox, layout=layout)
figure.show()
</snippet></ROW><ROW><id>14530966</id><snippet>plot</snippet></ROW><ROW><id>14530966</id><snippet>Plot</snippet></ROW><ROW><id>14530966</id><snippet>plot</snippet></ROW><ROW><id>14530966</id><snippet>Plot</snippet></ROW><ROW><id>14530966</id><snippet>background</snippet></ROW><ROW><id>14530966</id><snippet>Plot</snippet></ROW><ROW><id>14531015</id><snippet>import telnetlib

host    = "host.example.com"
port    = 223
timeout = 9999

try:
    session = telnetlib.Telnet(host, port, timeout)
except socket.timeout:
    print ("socket timeout")
else:
    session.write("command1\n")
    session.write("command2\n")
    output = session.read_all()
    # output now contains the text you want
    # so now you can do something with it:
    with open("test.xml", "w") as logfile:
        logfile.write(output)
</snippet></ROW><ROW><id>14531015</id><snippet>import time, telnetlib

host    = "host.example.com"
port    = 223
timeout = 9999

try:
    session = telnetlib.Telnet(host, port, timeout)
except socket.timeout:
    print ("socket timeout")
else:
    session.write("command1\n")
    session.write("command2\n")
    with open("test.xml", "w") as logfile:
        output = session.read_some()
        while output:
            logfile.write(output)
            time.sleep(0.1)  # let the buffer fill up a bit
            output = session.read_some()
</snippet></ROW><ROW><id>14531391</id><snippet>td.red {
    backgroundColor: red;
}
td.orange {
    backgroundColor: orange;
}
td.green {
    backgroundColor: green;
}
</snippet></ROW><ROW><id>14531391</id><snippet>elif</snippet></ROW><ROW><id>14531391</id><snippet>&lt;td class="
    {% if val &gt;= 10 %}red{% endif %}
    {% if val &gt;= 7 or val &lt;= 9 %}orange{% endif %}
    {% if val &lt; 7 %}green{% endif %}"&gt;
    {{ val }}
&lt;/td&gt;
</snippet></ROW><ROW><id>14531449</id><snippet>set_index</snippet></ROW><ROW><id>14531449</id><snippet>unstack</snippet></ROW><ROW><id>14531449</id><snippet>resample</snippet></ROW><ROW><id>14531449</id><snippet>In [11]: df1
Out[11]: 
  ticker_symbol  monthly_return                date
0          AAPL           0.112 1992-02-28 00:00:00
1            GS           0.130 1981-11-30 00:00:00
2            GS          -0.230 1981-12-22 00:00:00

df2 = df2.set_index(['date','ticker_symbol'])
df3 = df2.unstack(level=1)
df4 = df.resample('M')

In [14]: df2
Out[14]: 
                          monthly_return
date       ticker_symbol                
1992-02-28 AAPL                    0.112
1981-11-30 GS                      0.130
1981-12-22 GS                     -0.230

In [15]: df3
Out[15]: 
               monthly_return      
ticker_symbol            AAPL    GS
date                               
1981-11-30                NaN  0.13
1981-12-22                NaN -0.23
1992-02-28              0.112   NaN

In [16]: df4
Out[16]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 124 entries, 1981-11-30 00:00:00 to 1992-02-29 00:00:00
Freq: M
Data columns:
(monthly_return, AAPL)    1  non-null values
(monthly_return, GS)      2  non-null values
dtypes: float64(2)
</snippet></ROW><ROW><id>14531497</id><snippet>def sort(a, num):
  def key(x):
    return int(x[num])
  return sorted(a, reverse=True, key=key)
</snippet></ROW><ROW><id>14531497</id><snippet>from functools import partial

def key(num, x):
  return int(x[num])

def sort(a, num):
  return sorted(a, reverse=True, key=partial(key, num))
</snippet></ROW><ROW><id>14531820</id><snippet>keys=true</snippet></ROW><ROW><id>14531820</id><snippet>keys=stream</snippet></ROW><ROW><id>14531820</id><snippet>{...}{...}...{...}</snippet></ROW><ROW><id>14531820</id><snippet>#!/usr/bin/python
# script to delete all keys in a Riak bucket

import json
import re
import requests
import sys

def processChunk(chunk):
    global key_count
    obj = json.loads(chunk.group(2))
    if 'keys' in obj:
        for key in obj['keys']:
            r = requests.delete(sys.argv[1] + '/' + key)
            print 'delete key', key, 'response', r.status_code
            key_count += 1


if len(sys.argv) != 2:
    print 'Usage: {0} &lt;http://riak_host:8098/riak/bucket_name&gt;'.format(sys.argv[0])
    print 'Set riak_host and bucket_name appropriately for your Riak cluster.'
    exit(0)

r = requests.get(sys.argv[1] + '?keys=stream')
content = ''
key_count = 0

for chunk in r.iter_content():
    if chunk:
        content += chunk

re.sub(r'(?=(^|})({.*?})(?={|$))', processChunk, content)

print 'Deleted', key_count, 'keys'
</snippet></ROW><ROW><id>14531929</id><snippet>import csv
import itertools as IT

filenames = ['1.csv', '2.csv']
handles = [open(filename, 'rb') for filename in filenames]    
readers = [csv.reader(f, delimiter=',') for f in handles]

with  open('combined.csv', 'wb') as h:
    writer = csv.writer(h, delimiter=',', lineterminator='\n', )
    for rows in IT.izip_longest(*readers, fillvalue=['']*2):
        combined_row = []
        for row in rows:
            row = row[:2] # select the columns you want
            if len(row) == 2:
                combined_row.extend(row)
            else:
                combined.extend(['']*2)
        writer.writerow(combined_row)

for f in handles:
    f.close()
</snippet></ROW><ROW><id>14531929</id><snippet>for rows in IT.izip_longest(*readers, fillvalue=['']*2):</snippet></ROW><ROW><id>14531929</id><snippet>In [1]: import itertools as IT

In [2]: readers = [(1,2,3), ('a','b','c','d'), (10,20,30,40)]

In [3]: list(IT.izip_longest(readers[0], readers[1], readers[2]))
Out[3]: [(1, 'a', 10), (2, 'b', 20), (3, 'c', 30), (None, 'd', 40)]
</snippet></ROW><ROW><id>14531929</id><snippet>zip</snippet></ROW><ROW><id>14531929</id><snippet>None</snippet></ROW><ROW><id>14531929</id><snippet>readers</snippet></ROW><ROW><id>14531929</id><snippet>list(IT.izip_longest(readers[0], readers[1], readers[2], ...))
</snippet></ROW><ROW><id>14531929</id><snippet>len(readers)</snippet></ROW><ROW><id>14531929</id><snippet>...</snippet></ROW><ROW><id>14531929</id><snippet>In [4]: list(IT.izip_longest(*readers))
Out[4]: [(1, 'a', 10), (2, 'b', 20), (3, 'c', 30), (None, 'd', 40)]
</snippet></ROW><ROW><id>14531929</id><snippet>Out[4]</snippet></ROW><ROW><id>14531929</id><snippet>Out[3]</snippet></ROW><ROW><id>14531929</id><snippet>*readers</snippet></ROW><ROW><id>14531929</id><snippet>readers</snippet></ROW><ROW><id>14531929</id><snippet>IT.izip_longest</snippet></ROW><ROW><id>14532007</id><snippet>import requests

key = u'your_api_key'
url = u'https://www.googleapis.com/fusiontables/v1/tables/tableId/styles/styleId?key=%s' % key

body = dict()
body[u'markerOptions.iconName'] = u'geographic_features'
# put other settings here

r = request.put(url, data=body)
</snippet></ROW><ROW><id>14532080</id><snippet>b_class</snippet></ROW><ROW><id>14532080</id><snippet>some_method</snippet></ROW><ROW><id>14532080</id><snippet>a_class</snippet></ROW><ROW><id>14532080</id><snippet>a_class</snippet></ROW><ROW><id>14532080</id><snippet>class a_class:
  def __init__(self, parent):
    self.parent = parent

  def some_method(self):
    self.parent.var1

class b_class:
  def __init__(self):
      self.var1 = "init by the constructor or a method"
      self.a_inst = a_class(self)
</snippet></ROW><ROW><id>14532080</id><snippet>a_class</snippet></ROW><ROW><id>14532080</id><snippet>self.parent</snippet></ROW><ROW><id>14532226</id><snippet>utf-8-sig</snippet></ROW><ROW><id>14532226</id><snippet>&gt;&gt;&gt; '\xef\xbb\xbffoo'.decode('utf-8-sig')
u'foo'
</snippet></ROW><ROW><id>14532226</id><snippet>data = json.loads(response.decode('utf-8-sig'))
</snippet></ROW><ROW><id>14532711</id><snippet>obs2</snippet></ROW><ROW><id>14532711</id><snippet>obs1</snippet></ROW><ROW><id>14532711</id><snippet>obs2</snippet></ROW><ROW><id>14532711</id><snippet>obs1</snippet></ROW><ROW><id>14532711</id><snippet>if obs2 is not None</snippet></ROW><ROW><id>14532711</id><snippet>obs1 = obstacle()
obs2 = None

while q &lt; 0:
  q = screen.getch()
  if obs1.pos &lt; 0:
    obs1 = obstacle()
  if obs2 is not None and obs2.pos &lt; 0:
    obs2 = obstacle()
  # Here's where we create obs2 on the fly
  if obs2 is None and obs1.pos == dims[0]/2:
    obs2 = obstacle()
  screen.clear()
  screen.addstr(obs1.pos, 0, obs1.s, curses.color_pair(1))
  if obs2 is not None:
    screen.addstr(obs2.pos, 0, obs2.s, curses.color_pair(1))
  obs1.scroll()
  if obs2 is not None:
    obs2.scroll()
  screen.refresh()
  time.sleep(.04)
</snippet></ROW><ROW><id>14532711</id><snippet>obs2</snippet></ROW><ROW><id>14532711</id><snippet>obs1</snippet></ROW><ROW><id>14532711</id><snippet>pos</snippet></ROW><ROW><id>14532711</id><snippet>class obstacle:
  def __init__(self, offset=1.0):
    self.pos = int((dims[0]-1) * offset)
    self.s = ''
    for x in range(0,dims[1]-1):
      self.s += '='

  def scroll(self):
    self.pos -= 1

screen = curses.initscr()

curses.start_color()
curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
screen.nodelay(1)
dims = screen.getmaxyx()

q=-1
obs1 = obstacle()
obs2 = obstacle(.5)

while q &lt; 0:
  q = screen.getch()
  if obs1.pos &lt; 0:
    obs1 = obstacle()
  if obs2.pos &lt; 0:
    obs2 = obstacle()
  screen.clear()
  screen.addstr(obs1.pos, 0, obs1.s, curses.color_pair(1))
  screen.addstr(obs2.pos, 0, obs2.s, curses.color_pair(1))
  obs1.scroll()
  obs2.scroll()
  screen.refresh()
  time.sleep(.04)
screen.getch()
curses.endwin()
</snippet></ROW><ROW><id>14532877</id><snippet>(?:\\problem\{(.*?)\}\n)?\\subproblem\{(.*?)\}\n+(.*?)\n+(?=\\problem|\\subproblem|\\end)
</snippet></ROW><ROW><id>14532877</id><snippet>group 1: "number"
group 2: "number"
group 3: "/* strings that I want to get */"
</snippet></ROW><ROW><id>14532877</id><snippet>group 1: null
group 2: "number"
group 3: "/* strings that I want to get */"
</snippet></ROW><ROW><id>14532877</id><snippet>group 1: "number"
group 2: "number"
group 3: "       ...\n       ..."
</snippet></ROW><ROW><id>14532877</id><snippet>\\problem\{(.*?)\}\n(.+?)\\end
</snippet></ROW><ROW><id>14532877</id><snippet>\\subproblem\{(.*?)\}\n+(.*?)\n+(?=\\problem|\\subproblem|\\end)
</snippet></ROW><ROW><id>14532897</id><snippet>_build.py</snippet></ROW><ROW><id>14532897</id><snippet>addSources</snippet></ROW><ROW><id>14532897</id><snippet>Sources</snippet></ROW><ROW><id>14532897</id><snippet>global</snippet></ROW><ROW><id>14532897</id><snippet>addSources</snippet></ROW><ROW><id>14532900</id><snippet>list</snippet></ROW><ROW><id>14532900</id><snippet>for item in my_list:
   #do something with item
</snippet></ROW><ROW><id>14532900</id><snippet>xrange()</snippet></ROW><ROW><id>14532900</id><snippet>for i in xrange(1,len(my_list)):    #as indexes start at zero so you 
                                    #may have to use xrange(len(my_list))
    #do something here my_list[i]
</snippet></ROW><ROW><id>14532900</id><snippet>enumerate()</snippet></ROW><ROW><id>14532900</id><snippet>for index,item in enumerate(my_list):
    # do something here
</snippet></ROW><ROW><id>14532900</id><snippet>In [117]: my_lis=list('foobar')

In [118]: my_lis
Out[118]: ['f', 'o', 'o', 'b', 'a', 'r']

In [119]: for item in my_lis:
    print item
   .....:     
f
o
o
b
a
r

In [120]: for i in xrange(len(my_lis)):
    print my_lis[i]
   .....:     
f
o
o
b
a
r

In [122]: for index,item in enumerate(my_lis):
    print index,'--&gt;',item
   .....:     
0 --&gt; f
1 --&gt; o
2 --&gt; o
3 --&gt; b
4 --&gt; a
5 --&gt; r
</snippet></ROW><ROW><id>14533015</id><snippet>{
 "items": [
  {
   "id": {
    "kind": "youtube#video",
    "videoId": "9bZkp7q19f0"
   }
  },
  {
   "id": {
    "kind": "youtube#video",
    "videoId": "Ecw4O5KgvsU"
   }
  },
  {
   "id": {
    "kind": "youtube#video",
    "videoId": "o443b2rfFnY"
   }
  },
  {
   "id": {
    "kind": "youtube#video",
    "videoId": "WOyo7JD7hjo"
   }
  },
  {
   "id": {
    "kind": "youtube#video",
    "videoId": "QZmkU5Pg1sw"
   }
  }
 ]
}
</snippet></ROW><ROW><id>14533015</id><snippet>search_response = service.search().list(
  q="google",
  part="id",
  type="video",
  fields="items/id"
).execute()

videos = []

for search_result in search_response.get("items", []):
    videos.append("%s" % (search_result["id"]["videoId"]))

print "Videos:\n", "\n".join(videos), "\n"
</snippet></ROW><ROW><id>14533498</id><snippet>import nltk
pattern = [(r'(March)$','MAR')]
tagger = nltk.RegexpTagger(pattern)
print tagger.tag(nltk.word_tokenize('He was born in March 1991'))
</snippet></ROW><ROW><id>14533498</id><snippet>[('He', None), ('was', None), ('born', None), ('in', None), ('March', 'MAR'), ('1991', None)]
</snippet></ROW><ROW><id>14533503</id><snippet>unicode</snippet></ROW><ROW><id>14533503</id><snippet>unicode</snippet></ROW><ROW><id>14533503</id><snippet>u'\u897f\u754c'</snippet></ROW><ROW><id>14533503</id><snippet>str</snippet></ROW><ROW><id>14533503</id><snippet>bytes</snippet></ROW><ROW><id>14533503</id><snippet>u'\xa6\xe8\xac\xc9'.encode('iso-8859-1')
</snippet></ROW><ROW><id>14533574</id><snippet>offset</snippet></ROW><ROW><id>14533574</id><snippet>.fetch()</snippet></ROW><ROW><id>14533574</id><snippet>.fetch(10, offset=20)</snippet></ROW><ROW><id>14533574</id><snippet>.get(keys)</snippet></ROW><ROW><id>14533574</id><snippet>.get()</snippet></ROW><ROW><id>14533723</id><snippet>re.sub</snippet></ROW><ROW><id>14533723</id><snippet>import re
s = '111111111111234'
print re.sub('1+', '1', s)
# '1234'
</snippet></ROW><ROW><id>14533723</id><snippet>'1+'</snippet></ROW><ROW><id>14533723</id><snippet>+</snippet></ROW><ROW><id>14533723</id><snippet>1</snippet></ROW><ROW><id>14533723</id><snippet>'1'</snippet></ROW><ROW><id>14533723</id><snippet>re.sub</snippet></ROW><ROW><id>14533723</id><snippet>s</snippet></ROW><ROW><id>14533723</id><snippet>re.sub</snippet></ROW><ROW><id>14533823</id><snippet>import os
import functools

def low_priority(f):
    @functools.wraps(f)
    def reniced(*args, **kwargs):
        os.nice(5)
        try:
            f(*args,**kwargs)
        finally:
            os.nice(-5)
    return reniced
</snippet></ROW><ROW><id>14533823</id><snippet>@low_priority
def test():
    pass # Or whatever you want to do.
</snippet></ROW><ROW><id>14533929</id><snippet>object</snippet></ROW><ROW><id>14533929</id><snippet>super()</snippet></ROW><ROW><id>14533929</id><snippet>@property</snippet></ROW><ROW><id>14533929</id><snippet>Object</snippet></ROW><ROW><id>14534125</id><snippet>Array</snippet></ROW><ROW><id>14534125</id><snippet>def my_func(b):
    a = [0] * ((len(b)+3) &gt;&gt; 2)

    for i, val in enumerate(b):
        a[i&gt;&gt;2] |= ord(b[i]) &lt;&lt; (24-(i &amp; 3)*8)
    return a
</snippet></ROW><ROW><id>14534125</id><snippet>struct</snippet></ROW><ROW><id>14534125</id><snippet>import struct

def my_func2(data):
    lb = len(data)
    if lb % 4:
        data += b'\x00' * (4 - (lb % 4))
    a = [struct.unpack('&gt;i', data[i:i+4])[0] for i in range(0, lb, 4)]
    return a

print(my_func2(b'pass123'))
</snippet></ROW><ROW><id>14534286</id><snippet>None</snippet></ROW><ROW><id>14534286</id><snippet>weight = list(reversed(range(1,27)))
</snippet></ROW><ROW><id>14534286</id><snippet>reversed</snippet></ROW><ROW><id>14534286</id><snippet>sorted</snippet></ROW><ROW><id>14534300</id><snippet>app = "MediaInfo.exe"
app_path = os.path.join("C:\Program Files\MediaInfo\MediaInfo_CLI_0.7.61_Windows_x64", app)
movie_dir = "L:\Movies"
</snippet></ROW><ROW><id>14534300</id><snippet>app = r'MediaInfo.exe'
app_path = os.path.join(r'C:\Program Files\MediaInfo\MediaInfo_CLI_0.7.61_Windows_x64',  app)
movie_dir = r'L:\Movies'
</snippet></ROW><ROW><id>14534302</id><snippet>&gt;&gt;&gt; abc = 'ABCccCDde :)! f'
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(c for c in abc.upper() if c.isalpha())
Counter({'C': 4, 'D': 2, 'A': 1, 'B': 1, 'E': 1, 'F': 1})
</snippet></ROW><ROW><id>14534308</id><snippet>class SF( object ):
    def __init__( self, temp, args ):
            self.temp = temp
            self.args = args

    def __call__( self ):
            ret = self.temp
            for k, v in self.args.iteritems():
                    if hasattr( v, "__call__" ):
                            v = v()
                    ret = ret.replace( "{%s}" % k, str( v ) )
            return ret

s = SF( "This is a {test} with another {value}", 
        { "test": lambda: 100, "value": "Test" } )

print s()

This is a 100 with another Test
</snippet></ROW><ROW><id>14534308</id><snippet>{cookie}</snippet></ROW><ROW><id>14534308</id><snippet>SF</snippet></ROW><ROW><id>14534308</id><snippet>lxml</snippet></ROW><ROW><id>14534466</id><snippet>while True:
    guess = input("Guess number " + str(GuessAmount) + ": ")
    try:
        guess_int = int(guess)
        break
    except ValueError:
        print "please enter only integers"
</snippet></ROW><ROW><id>14534466</id><snippet>guess_int</snippet></ROW><ROW><id>14534547</id><snippet>render_to_response</snippet></ROW><ROW><id>14534547</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>14534547</id><snippet>if form.is_valid(): 
        # Process form as desired here
        # Simple example; use reverse() to avoid hard-coding URLs
        return HttpResponseRedirect('/success/')
</snippet></ROW><ROW><id>14534776</id><snippet>from arduino import Arduino
from flask import Flask

app = Flask('light_control')
board = Arduino('COM5', 9600)
pin = 13

@app.route('/on')
def light_on():
    board.output([pin])
    board.setHigh(pin)
    board.close()

    return 'Light is ON'

@app.route('/off')
def light_off():
    board.output([pin])
    board.setLow(pin)
    # board.close() ???

    return 'Light is OFF'

if __name__ == '__main__':
    app.debug = True
    app.run()
</snippet></ROW><ROW><id>14534781</id><snippet>class Debt(models.Model):
    user = models.ForeignKey(User)
    name = models.CharField(max_length=50,
        help_text="Name to identify your debt.")
    due_day = models.PositiveSmallIntegerField(
        help_text="Day of the month payment is due.")

    def __unicode__(self):
        return "{0}".format(self.user)
</snippet></ROW><ROW><id>14534781</id><snippet>def debt(request):

return render(request, 'debt.html', {
    'debts': Debt.objects.filter(),
}) 
</snippet></ROW><ROW><id>14534781</id><snippet> {% for debt in debts %}
     {{debt.user}} - {{debt.name}} &lt;br/&gt;
 {% endfor %}  
</snippet></ROW><ROW><id>14534830</id><snippet>fill_between()</snippet></ROW><ROW><id>14534830</id><snippet>legend()</snippet></ROW><ROW><id>14534830</id><snippet>legend()</snippet></ROW><ROW><id>14534830</id><snippet>p1 = Rectangle((0, 0), 1, 1, fc="green")
p2 = Rectangle((0, 0), 1, 1, fc="red")
legend([p1, p2], [a1_label, a2_label])
</snippet></ROW><ROW><id>14535086</id><snippet>def f(arg={}):
  print arg
  if 'count' in arg:
    arg['count'] += 1
  else:
    arg['count'] = 1

f()
f()
f()
</snippet></ROW><ROW><id>14535086</id><snippet>{}
{'count': 1}
{'count': 2}
</snippet></ROW><ROW><id>14535086</id><snippet>{}</snippet></ROW><ROW><id>14535086</id><snippet>f(arg={})</snippet></ROW><ROW><id>14535086</id><snippet>f()</snippet></ROW><ROW><id>14535086</id><snippet>args</snippet></ROW><ROW><id>14535086</id><snippet>def f(arg=None):
  if not arg:
    arg = {}
  print arg
  if 'count' in arg:
    arg['count'] += 1
  else:
    arg['count'] = 1
</snippet></ROW><ROW><id>14535086</id><snippet>def picasa_query_by_profile(subject, user_profile, args={}, replace=(), format='xml'):
def picasa_query(subject, access_token='', args={}, replace=()):
def picasa_query_params(subject, access_token='', args={}, replace=()):
</snippet></ROW><ROW><id>14535253</id><snippet>    return func(self, *args, **kwargs)
</snippet></ROW><ROW><id>14535253</id><snippet>    return func(self, username=username, user_logged_in=user_logged_in, *args, **kwargs)
</snippet></ROW><ROW><id>14535547</id><snippet>'\0'</snippet></ROW><ROW><id>14535547</id><snippet>b(?&lt;!b)</snippet></ROW><ROW><id>14535547</id><snippet>'x^'</snippet></ROW><ROW><id>14535547</id><snippet>b</snippet></ROW><ROW><id>14535547</id><snippet>\0(?&lt;!\0)</snippet></ROW><ROW><id>14535547</id><snippet>Pattern                        Time
\0(?&lt;!\0)                      0.098
\0                             0.099
x^                             0.099
b(?&lt;!b)                        0.099
^(?&lt;=x)                        1.416
$b                             1.446
$a                             1.447
\Za                            1.462
\Zb                            1.465
[^\s\S]                        2.280
a(?&lt;!a)                        2.843
</snippet></ROW><ROW><id>14535547</id><snippet>wget</snippet></ROW><ROW><id>14535547</id><snippet>Pattern                        Time
\0(?&lt;!\0)                      0.110
\0                             0.118
x^                             0.119
b(?&lt;!b)                        0.143
a(?&lt;!a)                        0.275
^(?&lt;=x)                        1.577
$b                             1.605
$a                             1.611
\Za                            1.634
\Zb                            1.634
[^\s\S]                        2.441
</snippet></ROW><ROW><id>14535547</id><snippet>#!/usr/bin/env python

import re
import time

tests = [
  r'x^',
  r'\0',
  r'[^\s\S]',
  r'^(?&lt;=x)',
  r'a(?&lt;!a)',
  r'b(?&lt;!b)',
  r'\0(?&lt;!\0)',
  r'\Za',
  r'\Zb',
  r'$a',
  r'$b'
]
timing = []
#text = 'a' * 50000000
text = open("/tmp/pg100.txt").read()
text = text * 10

for t in tests:
  pat = re.compile(t)
  start = time.time()
  pat.search(text)
  dur = time.time() - start
  timing.append((t, dur))

timing.sort(key=lambda x: x[1])
print('%-30s %s' % ('Pattern', 'Time'))
for t, dur in timing:
  print('%-30s %0.3f' % (t, dur))
</snippet></ROW><ROW><id>14535651</id><snippet>filelist = [line.rstrip('\n') for line in file]
</snippet></ROW><ROW><id>14535739</id><snippet>__hash__()</snippet></ROW><ROW><id>14535739</id><snippet>__eq__()</snippet></ROW><ROW><id>14535739</id><snippet>__cmp__()</snippet></ROW><ROW><id>14535739</id><snippet>id()</snippet></ROW><ROW><id>14535816</id><snippet>chat.chat_memb</snippet></ROW><ROW><id>14535816</id><snippet># Change backref from 'members' to 'chats', since the backref will be pointing
# to chat class.
chat_memb = db.relationship('user', secondary=chat_members,
                            backref=db.backref('chats', lazy='dynamic'))
</snippet></ROW><ROW><id>14535816</id><snippet>chat.query.join(user.chats).filter(user.id == 1).all()
</snippet></ROW><ROW><id>14535816</id><snippet>Chat</snippet></ROW><ROW><id>14535816</id><snippet>chat</snippet></ROW><ROW><id>14535904</id><snippet>NaN</snippet></ROW><ROW><id>14535904</id><snippet>In [19]: x = np.array([[0.0, 1.1, np.nan, 2.2, np.nan],[3.3,np.nan, 4.4, np.nan, 5.5]])

In [20]: m = ma.masked_array(x, np.isnan(x))

In [21]: print(m)
[[0.0 1.1 -- 2.2 --]
 [3.3 -- 4.4 -- 5.5]]
</snippet></ROW><ROW><id>14535904</id><snippet>''</snippet></ROW><ROW><id>14535904</id><snippet>np.nan</snippet></ROW><ROW><id>14535904</id><snippet>np.array</snippet></ROW><ROW><id>14535975</id><snippet>string</snippet></ROW><ROW><id>14535975</id><snippet>return apply_converter(converter, string)
</snippet></ROW><ROW><id>14536091</id><snippet>/etc/init/my_server.conf</snippet></ROW><ROW><id>14536091</id><snippet>description "My Server"
author "Dark Daiver dark@dd.com"

start on runlevel [2345]
stop on runlevel [!2345]

respawn

exec python /home/dd/my_server.py 
</snippet></ROW><ROW><id>14536091</id><snippet>my_server.py</snippet></ROW><ROW><id>14536091</id><snippet>import pynotify


if __name__ == "__main__":

   pynotify.init('icon-summary-body')
   n = pynotify.Notification('Test', 'text ')

   while True:
        n.show() # not OK
        time.sleep(1)
</snippet></ROW><ROW><id>14536256</id><snippet>def tsfunc(func):
    def wrappedFunc():
        print '[%s] %s() called' % (ctime(), func.__name__)
        return func()
    return wrappedFunc   # Do not call the function, return a reference instead
</snippet></ROW><ROW><id>14536256</id><snippet>@tsfunc
def foo():
    # ....
</snippet></ROW><ROW><id>14536256</id><snippet>def foo():
    # ....
foo = tsfunc(foo)
</snippet></ROW><ROW><id>14536256</id><snippet>foo = wrappedFunc()
</snippet></ROW><ROW><id>14536256</id><snippet>foo</snippet></ROW><ROW><id>14536256</id><snippet>wrappedFunc()</snippet></ROW><ROW><id>14536256</id><snippet>wrappedFunc</snippet></ROW><ROW><id>14536514</id><snippet>balance</snippet></ROW><ROW><id>14536514</id><snippet>addInterest</snippet></ROW><ROW><id>14536514</id><snippet>amount</snippet></ROW><ROW><id>14536514</id><snippet>&gt;&gt;&gt; def addInterest(balance, rate):
...     print (balance)
...     newBalance = balance * (1 + rate)
...     balance = newBalance
... 
&gt;&gt;&gt; amount = 1000
&gt;&gt;&gt; rate = 0.05
&gt;&gt;&gt; print id(amount)
26799216
&gt;&gt;&gt; addInterest(amount, rate)
1000
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14536514</id><snippet>id</snippet></ROW><ROW><id>14536555</id><snippet>table = soup.findAll("tr", {'class' : ['table-tempo-row', 'table-tempo-row-alt'] })
</snippet></ROW><ROW><id>14536555</id><snippet>tr</snippet></ROW><ROW><id>14536618</id><snippet>.readlines()</snippet></ROW><ROW><id>14536618</id><snippet>json</snippet></ROW><ROW><id>14536618</id><snippet>response = urllib2.urlopen(request)
json_object = json.load(response)
</snippet></ROW><ROW><id>14536618</id><snippet>.load()</snippet></ROW><ROW><id>14536618</id><snippet>s</snippet></ROW><ROW><id>14536618</id><snippet>tracklist</snippet></ROW><ROW><id>14536618</id><snippet>videos</snippet></ROW><ROW><id>14536618</id><snippet>tracklist</snippet></ROW><ROW><id>14536618</id><snippet>for track in json_object['tracklist']:
    print track['title']
</snippet></ROW><ROW><id>14536618</id><snippet>HIStory Begins
Billie Jean
The Way You Make Me Feel
Black Or White
Rock With You
She's Out Of My Life
Bad
I Just Can't Stop Loving You
Man In The Mirror
Thriller
Beat It
The Girl Is Mine
Remember The Time
Don't Stop 'Til You Get Enough
Wanna Be Startin' Somethin'
Heal The World
HIStory Continues
Scream
They Don't Care About Us
Stranger In Moscow
This Time Around
Earth Song
D.S.
Money
Come Together
You Are Not Alone
Childhood (Theme From "Free Willy 2")
Tabloid Junkie
2 Bad
History
Little Susie
Smile
</snippet></ROW><ROW><id>14536761</id><snippet>&gt;&gt;&gt; input = ['123', '456', '7 8']
&gt;&gt;&gt; sampleList = []
&gt;&gt;&gt; for digit_str in input:
...     for digit in digit_str:
...         sampleList.append(digit)
... 
&gt;&gt;&gt; sampleList
['1', '2', '3', '4', '5', '6', '7', ' ', '8']
</snippet></ROW><ROW><id>14536813</id><snippet>isoformat()</snippet></ROW><ROW><id>14536813</id><snippet>d.isoformat(' ')
</snippet></ROW><ROW><id>14536813</id><snippet>.strftime()</snippet></ROW><ROW><id>14536813</id><snippet>d.strftime('%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>14536813</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime.today()
&gt;&gt;&gt; d.isoformat(' ')
'2013-01-26 13:12:08.628580'
&gt;&gt;&gt; d.strftime('%Y-%m-%d %H:%M:%S')
'2013-01-26 13:12:08'
</snippet></ROW><ROW><id>14536870</id><snippet>board = [[(0,0)]*lines]*columns
</snippet></ROW><ROW><id>14536870</id><snippet>board = [[(0,0)]*lines for _ in range(columns)]
</snippet></ROW><ROW><id>14536870</id><snippet>In [7]: lines = 3

In [8]: columns = 4

In [9]: board = [[(0,0)]*lines]*columns

In [10]: map(id, board)
Out[10]: [18422120, 18422120, 18422120, 18422120]
</snippet></ROW><ROW><id>14537074</id><snippet>else</snippet></ROW><ROW><id>14537074</id><snippet>elif</snippet></ROW><ROW><id>14537074</id><snippet>for x in numbers:
  if x == 237:
    break
  elif x % 2 == 0:
    print x
</snippet></ROW><ROW><id>14537238</id><snippet>In [17]: cols_to_remove = [False, False, True, False, True, False]

In [18]: [d for (d, remove) in zip(datatypes, cols_to_remove) if not remove]
Out[18]: ['a', 'b', 'd', 'f']
</snippet></ROW><ROW><id>14537238</id><snippet>cols_to_remove</snippet></ROW><ROW><id>14537238</id><snippet>In [12]: datatypes = ['a', 'b', 'c', 'd', 'e', 'f']

In [13]: cols_to_remove = [2, 4]

In [14]: [d for (i, d) in enumerate(datatypes) if i not in cols_to_remove]
Out[14]: ['a', 'b', 'd', 'f']
</snippet></ROW><ROW><id>14537238</id><snippet>cols_to_remove</snippet></ROW><ROW><id>14537238</id><snippet>set</snippet></ROW><ROW><id>14537258</id><snippet>if x in set([1,2,3]):
</snippet></ROW><ROW><id>14537258</id><snippet>if x in [1,2,3]:
</snippet></ROW><ROW><id>14537258</id><snippet>O(n)</snippet></ROW><ROW><id>14537258</id><snippet>500</snippet></ROW><ROW><id>14537258</id><snippet>range(1000)</snippet></ROW><ROW><id>14537258</id><snippet>import timeit

def time_list(x, lst, num):
    for n in xrange(num):
        x in lst

def time_turn_set(x, lst, num):
    s = set(lst)
    for n in xrange(num):
        x in s

for num in range(1, 10):
    size = 1000
    setup_str = "lst = range(%d); from __main__ import %s"
    print num,
    print timeit.timeit("time_list(%d, lst, %d)" % (size / 2, num),
                        setup=setup_str % (size, "time_list"), number=10000),
    print timeit.timeit("time_turn_set(%d, lst, %d)" % (size / 2, num),
                        setup=setup_str % (size, "time_turn_set"), number=10000)
</snippet></ROW><ROW><id>14537258</id><snippet>1 0.124024152756 0.334127902985
2 0.250166893005 0.343378067017
3 0.359009981155 0.356444835663
4 0.464100837708 0.38081407547
5 0.600295066833 0.34722495079
6 0.692923069 0.358560085297
7 0.787877082825 0.338326931
8 0.877299070358 0.344762086868
9 1.00078821182 0.339591026306
</snippet></ROW><ROW><id>14537258</id><snippet>O(1)</snippet></ROW><ROW><id>14537258</id><snippet>O(n)</snippet></ROW><ROW><id>14537258</id><snippet>set([1,2,3])</snippet></ROW><ROW><id>14537258</id><snippet>O(n^2)</snippet></ROW><ROW><id>14537258</id><snippet>O(n)</snippet></ROW><ROW><id>14537258</id><snippet>O(1)</snippet></ROW><ROW><id>14537383</id><snippet>b = a + [4]
</snippet></ROW><ROW><id>14537383</id><snippet>a[:]</snippet></ROW><ROW><id>14537383</id><snippet>+</snippet></ROW><ROW><id>14537432</id><snippet>  def index(request):
        trabajos = Trabajo.objects.all()
        imagenes = Imagen.objects.all()
        return render_to_response('index.html', {'works': trabajos, 'images': imagenes})
</snippet></ROW><ROW><id>14537432</id><snippet> {% for item in works %}
         {{item.id}} 
         {% for obj in images %}
              {% ifequal item.id obj.titulo_proyecto_id %}
                   {{item.id}} &lt;img src="{{ MEDIA_URL }}{{obj.imagenes}}" /&gt;
              {% endifequal %}
         {% endfor %}

 {% endfor %}
</snippet></ROW><ROW><id>14537661</id><snippet>str.find()</snippet></ROW><ROW><id>14537661</id><snippet>if html_data.find(string):
</snippet></ROW><ROW><id>14537661</id><snippet>if html_data.find(string) != -1:
</snippet></ROW><ROW><id>14537661</id><snippet>if string in html_data:
</snippet></ROW><ROW><id>14537709</id><snippet>All Files</snippet></ROW><ROW><id>14537750</id><snippet>zipped = [(12, 1), (123, 4), (33, 4)]
&gt;&gt;&gt; b, c = zip(*zipped)
&gt;&gt;&gt; b 
(12, 123, 33)
&gt;&gt;&gt; c
(1, 4, 4)
</snippet></ROW><ROW><id>14537750</id><snippet>&gt;&gt;&gt; b, c = [e[0] for e in zipped], [e[1] for e in zipped]
&gt;&gt;&gt; b
[12, 123, 33]
&gt;&gt;&gt; c
[1, 4, 4]
</snippet></ROW><ROW><id>14537750</id><snippet>zip</snippet></ROW><ROW><id>14537750</id><snippet>zip</snippet></ROW><ROW><id>14537957</id><snippet>int</snippet></ROW><ROW><id>14537957</id><snippet>x.age = ...</snippet></ROW><ROW><id>14537957</id><snippet>set_age()</snippet></ROW><ROW><id>14537957</id><snippet>int</snippet></ROW><ROW><id>14537957</id><snippet>int()</snippet></ROW><ROW><id>14538033</id><snippet>(1+x)^alpha</snippet></ROW><ROW><id>14538033</id><snippet>x^alpha</snippet></ROW><ROW><id>14538033</id><snippet>i**k</snippet></ROW><ROW><id>14538033</id><snippet>(i-1)**k</snippet></ROW><ROW><id>14538033</id><snippet>1.41920471191 1.0
5.234375 1.41421356237
</snippet></ROW><ROW><id>14538033</id><snippet>sqrt(1)</snippet></ROW><ROW><id>14538033</id><snippet>sqrt(2)</snippet></ROW><ROW><id>14538033</id><snippet>1.0 1.0
1.41920471191 1.41421356237
</snippet></ROW><ROW><id>14538033</id><snippet>5.234375 1.73205080757
155.677841187 2.0
2205.0 2.2360679775
17202.2201691 2.44948974278
91687.28125 2.64575131106
376029.066696 2.82842712475
1273853.0 3.0
</snippet></ROW><ROW><id>14538033</id><snippet>1.0 1.0
1.4143562059 1.41421356237
1.2085299569e+26 1.73205080757
3.68973817323e+43 2.0
9.21065601505e+55 2.2360679775
3.76991761647e+65 2.44948974278
2.67712017747e+73 2.64575131106
1.16004174256e+80 2.82842712475
6.49543428975e+85 3.0
</snippet></ROW><ROW><id>14538033</id><snippet>&gt;&gt;&gt; i = 0.7
&gt;&gt;&gt; sum(binomical(0.5, k) * (i-1) ** k for k in range(10))
0.8366601005565644
&gt;&gt;&gt; i**0.5
0.8366600265340756
</snippet></ROW><ROW><id>14538033</id><snippet>&gt;&gt;&gt; i0 = 123.0
&gt;&gt;&gt; i = i0/(20**2)
&gt;&gt;&gt; sum(binomical(0.5, k) * (i-1) ** k for k in range(50))
0.5545268253462641
&gt;&gt;&gt; _*20
11.090536506925282
&gt;&gt;&gt; i0**0.5
11.090536506409418
</snippet></ROW><ROW><id>14538300</id><snippet>def submerge(d, e, f):
    for g in d[:-1]:
        yield g
    yield e
    yield f
    yield d[-1] # if you want to remove the last element just remove this line

def merge(a, b, c):
    for d, e, f in zip(a, b, c):
        yield tuple(submerge(d, e, f))

a = [(12,3,1),(12,3,5)]
b = [4,2]
c = ['A','B'] 

print list(merge(a, b, c))
</snippet></ROW><ROW><id>14538304</id><snippet>grid</snippet></ROW><ROW><id>14538304</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>14538483</id><snippet>r'optfile/ras1'</snippet></ROW><ROW><id>14538483</id><snippet>optfile</snippet></ROW><ROW><id>14538483</id><snippet>optfile</snippet></ROW><ROW><id>14538483</id><snippet>/ras1</snippet></ROW><ROW><id>14538483</id><snippet>    arcpy.Clip_management(
        r'D:/test',
        "%f %f %f %f" %(extent.XMin, extent.YMin, extent.XMax, extent.YMax),
        optfile + '/ras1', "#", "#", "NONE")
</snippet></ROW><ROW><id>14538483</id><snippet>os.path.join()</snippet></ROW><ROW><id>14538483</id><snippet>import os.path

# ...

    arcpy.Clip_management(
        r'D:/test',
        "%f %f %f %f" %(extent.XMin, extent.YMin, extent.XMax, extent.YMax),
        os.path.join(optfile, 'ras1'), "#", "#", "NONE")
</snippet></ROW><ROW><id>14538648</id><snippet>switch</snippet></ROW><ROW><id>14538648</id><snippet>self.switch(i)</snippet></ROW><ROW><id>14538648</id><snippet>switch(i)</snippet></ROW><ROW><id>14538648</id><snippet>def switch_every(self, n):
    for i in range(0,len(self.switches), n):
        self.switch(i)   # &lt;-- Change here
</snippet></ROW><ROW><id>14538648</id><snippet> print (my_switchboard)     
</snippet></ROW><ROW><id>14538648</id><snippet>LightSwitch.__str__</snippet></ROW><ROW><id>14538648</id><snippet>LightSwitch.__repr__</snippet></ROW><ROW><id>14538648</id><snippet> def __repr__(self):   # &lt;-- Change `__str__` to `__repr__`
     if self.switch == True:
         return "I am on"

     if self.switch == False:
         return "I am off"
</snippet></ROW><ROW><id>14538648</id><snippet>repr</snippet></ROW><ROW><id>14538648</id><snippet>LightSwitch.flip</snippet></ROW><ROW><id>14538648</id><snippet> def flip(self):
     self.switch = False if self.switch else True
</snippet></ROW><ROW><id>14538747</id><snippet>feedparser</snippet></ROW><ROW><id>14538747</id><snippet>{http://www.w3.org/2005/Atom}</snippet></ROW><ROW><id>14538747</id><snippet>entry</snippet></ROW><ROW><id>14538747</id><snippet>for elem in tree.iterfind('ns:entry', {'ns': 'http://www.w3.org/2005/Atom'}):
</snippet></ROW><ROW><id>14538747</id><snippet>ns:</snippet></ROW><ROW><id>14538747</id><snippet>for elem in tree.iterfind('{http://www.w3.org/2005/Atom}entry'):
</snippet></ROW><ROW><id>14538747</id><snippet>for elem in tree.iterfind('{http://www.w3.org/2005/Atom}entry'):
    for child in elem:
        print child
</snippet></ROW><ROW><id>14538898</id><snippet>import urllib2</snippet></ROW><ROW><id>14538898</id><snippet>urllib</snippet></ROW><ROW><id>14538898</id><snippet>urllib.request</snippet></ROW><ROW><id>14539017</id><snippet>&gt;&gt;&gt; x = OrderedDict((("a", "1"), ("c", '3'), ("b", "2")))
&gt;&gt;&gt; x["d"] = 4
&gt;&gt;&gt; x.keys().index("d")
3
&gt;&gt;&gt; x.keys().index("c")
1
</snippet></ROW><ROW><id>14539029</id><snippet>l = to_split.split("/", 2)
a, b, c = l + [None] * (3 - len(l))
</snippet></ROW><ROW><id>14539156</id><snippet>@property</snippet></ROW><ROW><id>14539156</id><snippet>def stock_items(self):
    return self.stockitem_set.all()
</snippet></ROW><ROW><id>14539180</id><snippet>import sys
import numpy
from PIL import Image

img = Image.open(sys.argv[1]).convert('L')

im = numpy.array(img) 
colors = set(numpy.unique(im))
colors.remove(255)

for color in colors:
    py, px = numpy.where(im == color)
    print(px.min(), py.min(), px.max(), py.max())
</snippet></ROW><ROW><id>14539180</id><snippet>convert('L')</snippet></ROW><ROW><id>14539180</id><snippet>...
im = numpy.array(img, dtype=int)

packed = im[:,:,0]&lt;&lt;16 | im[:,:,1]&lt;&lt;8 | im[:,:,2]
colors = set(numpy.unique(packed.ravel()))
colors.remove(255&lt;&lt;16 | 255&lt;&lt;8 | 255)

for color in colors:
    py, px = numpy.where(packed == color)
    print(px.min(), py.min(), px.max(), py.max())
</snippet></ROW><ROW><id>14539191</id><snippet>int</snippet></ROW><ROW><id>14539191</id><snippet>&gt;&gt;&gt; num = 3.444
&gt;&gt;&gt; int(num)
3
</snippet></ROW><ROW><id>14539402</id><snippet>UnencryptedCookieSessionFactory</snippet></ROW><ROW><id>14539402</id><snippet>response.set_cookie()</snippet></ROW><ROW><id>14539402</id><snippet>UnencryptedCookieSessionFactory</snippet></ROW><ROW><id>14539402</id><snippet>.set_cookie()</snippet></ROW><ROW><id>14539402</id><snippet>pickle</snippet></ROW><ROW><id>14539402</id><snippet>pickle</snippet></ROW><ROW><id>14539457</id><snippet>&gt;&gt;&gt; zip([1,3,6],[1,5,9],[1,2,4],['A','B','C'])
[(1, 1, 1, 'A'), (3, 5, 2, 'B'), (6, 9, 4, 'C')]
</snippet></ROW><ROW><id>14539479</id><snippet>def encode(s):
    last  = s[0]
    count = 0
    for c in s:
        if last != c:
            yield '%s%i' % (last, count)
            last = c
            count = 0
        count += 1
    yield '%s%i' % (last, count)
</snippet></ROW><ROW><id>14539479</id><snippet>import re

def decode(s):
    for c, n in re.findall(r'(\w)(\d+)', s):
        yield c * int(n)
</snippet></ROW><ROW><id>14539479</id><snippet>s = 'AAABBBBCDDDDDDDDDDEEDDDD'

encoded = ''.join(encode(s))
print encoded

decoded = ''.join(decode(encoded))
print decoded
</snippet></ROW><ROW><id>14539479</id><snippet>A3B4C1D10E2D4
AAABBBBCDDDDDDDDDDEEDDDD
</snippet></ROW><ROW><id>14539571</id><snippet>klass = A
args = (a, b, c)
obj = klass(*args)
</snippet></ROW><ROW><id>14539576</id><snippet>adjustSize</snippet></ROW><ROW><id>14539576</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
from PyQt4 import QtCore, QtGui

class MyWindow(QtGui.QWidget):
    _buttons = []

    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonRemove = QtGui.QPushButton(self)
        self.pushButtonRemove.setText("Remove A Button!")
        self.pushButtonRemove.clicked.connect(self.on_pushButtonRemove_clicked)

        self.widgetButtons = QtGui.QWidget(self)

        self.layoutButtons = QtGui.QHBoxLayout(self.widgetButtons)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addWidget(self.pushButtonRemove)
        self.layout.addWidget(self.widgetButtons)

        for buttonNumber in range(3):
            pushButton = QtGui.QPushButton()
            pushButton.setText("Button {0}".format(buttonNumber))

            self._buttons.append(pushButton)
            self.layoutButtons.addWidget(pushButton)

    @QtCore.pyqtSlot()
    def on_pushButtonRemove_clicked(self):
        if self._buttons:
            pushButton = self._buttons[-1]

            self._buttons.pop()
            self.layoutButtons.removeWidget(pushButton)

            pushButton.deleteLater()

            self.widgetButtons.adjustSize()
            self.adjustSize()

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14539865</id><snippet>text = "Text1 Text2 Text3 Text4 Text5\n\
Here comes more test text\n\
and even more1 more2 more3\n\
tex text textt te tex\n\
1 2 3 4 5"
filecsv = open('csvfile.csv', 'w+')
filecsv.write(text.replace(' ', ';'))
filecsv.close()
</snippet></ROW><ROW><id>14539963</id><snippet>jsonvalue = '"2013-01-24T16:50:42+00:00"'
</snippet></ROW><ROW><id>14539963</id><snippet>json.loads()</snippet></ROW><ROW><id>14539963</id><snippet>&gt;&gt;&gt; print json.loads(jsonvalue)
2013-01-24T16:50:42+00:00
</snippet></ROW><ROW><id>14539963</id><snippet>.strip('"')</snippet></ROW><ROW><id>14539963</id><snippet>&gt;&gt;&gt; print jsonvalue.strip('"')
2013-01-24T16:50:42+00:00
</snippet></ROW><ROW><id>14539963</id><snippet>json</snippet></ROW><ROW><id>14540022</id><snippet>unicode</snippet></ROW><ROW><id>14540022</id><snippet>content = content.encode('latin1')
</snippet></ROW><ROW><id>14540022</id><snippet>&gt;&gt;&gt; content = u'\xe5\xb1\x82\xe5\x8f\xa0\xe6\xa0\xb7\xe5\xbc\x8f\xe8\xa1\xa8'
&gt;&gt;&gt; content.encode('latin1')
'\xe5\xb1\x82\xe5\x8f\xa0\xe6\xa0\xb7\xe5\xbc\x8f\xe8\xa1\xa8'
&gt;&gt;&gt; content.encode('latin1').decode('utf8')
u'\u5c42\u53e0\u6837\u5f0f\u8868'
&gt;&gt;&gt; print content.encode('latin1').decode('utf8')
层叠样式表
</snippet></ROW><ROW><id>14540162</id><snippet>import os, sys

f = open(sys.argv[1], 'r')

T = int(f.readline())

def next(ary, start):
    j = start
    l = len(ary)
    ret = start - 1
    while j &lt; l and ary[j]:
        ret = j
        j += 1
    return ret

for t in range(T):
    n, k = map(int, f.readline().strip().split(' '))
    a, b, c, r = map(int, f.readline().strip().split(' '))

    m = [0] * (4 * k)
    s = [0] * (k+1)
    m[0] = a
    if m[0] &lt;= k:
        s[m[0]] = 1
    for i in xrange(1, k):
        m[i] = (b * m[i-1] + c) % r
        if m[i] &lt; k+1:
            s[m[i]] += 1

    p = next(s, 0)
    m[k] = p + 1
    p = next(s, p+2)

    for i in xrange(k+1, n):
        if m[i-k-1] &gt; p or s[m[i-k-1]] &gt; 1:
            m[i] = p + 1
            if m[i-k-1] &lt;= k:
                s[m[i-k-1]] -= 1
            s[m[i]] += 1
            p = next(s, p+2)
        else:
            m[i] = m[i-k-1]
        if p == k:
            break

    if p != k:
        print 'Case #%d: %d' % (t+1, m[n-1])
    else:
        print 'Case #%d: %d' % (t+1, m[i-k + (n-i+k+k) % (k+1)])
</snippet></ROW><ROW><id>14540172</id><snippet>3.65</snippet></ROW><ROW><id>14540172</id><snippet>float</snippet></ROW><ROW><id>14540172</id><snippet>3.65</snippet></ROW><ROW><id>14540172</id><snippet>float</snippet></ROW><ROW><id>14540172</id><snippet>In [1]: 3.65
Out[1]: 3.65

In [2]: '%.20f' % 3.65
Out[2]: '3.64999999999999991118'
</snippet></ROW><ROW><id>14540172</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>14540509</id><snippet>indexer_between_time</snippet></ROW><ROW><id>14540509</id><snippet>Index</snippet></ROW><ROW><id>14540509</id><snippet>ts.ix[ts.index.indexer_between_time(datetime.time(9), datetime.time(18))]
</snippet></ROW><ROW><id>14540509</id><snippet>ts.ix[ts.index.indexer_between_time(datetime.time(18), datetime.time(9),
                                    include_start=False, include_end=False)]
</snippet></ROW><ROW><id>14540509</id><snippet>indexer_between_time</snippet></ROW><ROW><id>14540509</id><snippet>include_start</snippet></ROW><ROW><id>14540509</id><snippet>include_end</snippet></ROW><ROW><id>14540509</id><snippet>True</snippet></ROW><ROW><id>14540509</id><snippet>include_start</snippet></ROW><ROW><id>14540509</id><snippet>False</snippet></ROW><ROW><id>14540509</id><snippet>start_time</snippet></ROW><ROW><id>14540509</id><snippet>In [1]: rng = pd.date_range('1/1/2000', periods=24, freq='H')

In [2]: ts = pd.Series(pd.np.random.randn(len(rng)), index=rng)

In [3]: ts.ix[ts.index.indexer_between_time(datetime.time(10), datetime.time(14))] 
Out[3]: 
2000-01-01 10:00:00    1.312561
2000-01-01 11:00:00   -1.308502
2000-01-01 12:00:00   -0.515339
2000-01-01 13:00:00    1.536540
2000-01-01 14:00:00    0.108617
</snippet></ROW><ROW><id>14540509</id><snippet>ix</snippet></ROW><ROW><id>14540509</id><snippet>In [4]: df = pd.DataFrame(ts)

In [5]: df.ix[df.index.indexer_between_time(datetime.time(10), datetime.time(14))]
Out[5]: 
                            0
2000-01-03 10:00:00  1.312561
2000-01-03 11:00:00 -1.308502
2000-01-03 12:00:00 -0.515339
2000-01-03 13:00:00  1.536540
2000-01-03 14:00:00  0.108617
</snippet></ROW><ROW><id>14540568</id><snippet>ulimit -f</snippet></ROW><ROW><id>14540568</id><snippet>unlimited</snippet></ROW><ROW><id>14540568</id><snippet>/etc/security/limits.conf</snippet></ROW><ROW><id>14540568</id><snippet>grep fsize /etc/security/limits.conf /etc/security/limits.d/ -r
</snippet></ROW><ROW><id>14540568</id><snippet>quota</snippet></ROW><ROW><id>14540568</id><snippet>mount</snippet></ROW><ROW><id>14540675</id><snippet>np.average</snippet></ROW><ROW><id>14540675</id><snippet>d</snippet></ROW><ROW><id>14540675</id><snippet>e</snippet></ROW><ROW><id>14540675</id><snippet>e</snippet></ROW><ROW><id>14540675</id><snippet>np.broadcast_arrays</snippet></ROW><ROW><id>14540675</id><snippet>d</snippet></ROW><ROW><id>14540675</id><snippet>In [121]: d = np.random.random((16,3,90,144))

In [122]: e = np.random.random((16,3))

In [123]: f = e[:,:,None,None]

In [124]: scl = f.sum(axis = 1)

In [125]: avg = np.multiply(d,f).sum(axis = 1)/scl
</snippet></ROW><ROW><id>14540675</id><snippet>In [126]: avg_lc = np.array([np.average(d[n], weights=e[n], axis=0) for n in range(d.shape[0])])

In [127]: np.allclose(avg, avg_lc)
Out[127]: True
</snippet></ROW><ROW><id>14540705</id><snippet>current_dir_path = os.getcwd()
open(os.path.join(curren_dir_path, file), 'r')
</snippet></ROW><ROW><id>14540833</id><snippet>csv.DictReader</snippet></ROW><ROW><id>14540833</id><snippet>primer_list</snippet></ROW><ROW><id>14540833</id><snippet>primers_list = list(csv.DictReader(primers))
</snippet></ROW><ROW><id>14540833</id><snippet>DictReader</snippet></ROW><ROW><id>14540833</id><snippet>with</snippet></ROW><ROW><id>14540833</id><snippet>primers.seek(0)</snippet></ROW><ROW><id>14540895</id><snippet>var</snippet></ROW><ROW><id>14540895</id><snippet>box</snippet></ROW><ROW><id>14540895</id><snippet>box</snippet></ROW><ROW><id>14540895</id><snippet>box = something</snippet></ROW><ROW><id>14541029</id><snippet>readlines([size]) -&gt; list of strings, each a line from the file.

Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
</snippet></ROW><ROW><id>14541029</id><snippet>In [1]: open('hello').readlines()
Out[1]: ['Hello\n', 'there\n', '!\n']

In [2]: open('hello').readlines(2)
Out[2]: ['Hello\n', 'there\n', '!\n']
</snippet></ROW><ROW><id>14541029</id><snippet>In [4]: open('hello', 'r', 0).readlines(2)
Out[4]: ['Hello\n', 'there\n', '!\n']
</snippet></ROW><ROW><id>14541029</id><snippet>In [1]: len(open('hello', 'r', 0).readlines(5))
Out[1]: 1756

In [2]: len(open('hello', 'r', 0).readlines())
Out[2]: 28080
</snippet></ROW><ROW><id>14541134</id><snippet>playermove=raw_input()
</snippet></ROW><ROW><id>14541153</id><snippet>import os
os.chdir('/path/to/dir')
</snippet></ROW><ROW><id>14541327</id><snippet>def rem(a):
    copy = a[:]
    for value in set(copy):
        copy.remove(value)
    return copy
</snippet></ROW><ROW><id>14541412</id><snippet>childJoins = parentTable
for child in childTables:
    childJoins = childJoins.join(child)

query = sa.select(['*'], from_obj=childJoins)
</snippet></ROW><ROW><id>14541419</id><snippet>defaultdict</snippet></ROW><ROW><id>14541419</id><snippet>pandas</snippet></ROW><ROW><id>14541419</id><snippet>df = pd.read_csv("cluster.csv")
counted = df.groupby(["Cluster_id", "User", "Quality"]).size()
df.to_csv("counted.csv")
</snippet></ROW><ROW><id>14541419</id><snippet>pandas</snippet></ROW><ROW><id>14541419</id><snippet>pandas</snippet></ROW><ROW><id>14541419</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.read_csv("cluster.csv")
&gt;&gt;&gt; df
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 500000 entries, 0 to 499999
Data columns:
Tag           500000  non-null values
User          500000  non-null values
Quality       500000  non-null values
Cluster_id    500000  non-null values
dtypes: int64(1), object(3)
</snippet></ROW><ROW><id>14541419</id><snippet>&gt;&gt;&gt; df[:5]
   Tag  User Quality  Cluster_id
0  bbb  u001     bad          39
1  bbb  u002     bad          36
2  bag  u003    good          11
3  bag  u004    good           9
4  bag  u005     bad          26
</snippet></ROW><ROW><id>14541419</id><snippet>&gt;&gt;&gt; for name, group in df.groupby(["Cluster_id", "User"]):
...     print 'group name:', name
...     print 'group rows:'
...     print group
...     print 'counts of Quality values:'
...     print group["Quality"].value_counts()
...     raw_input()
...     
group name: (1, 'u003')
group rows:
        Tag  User Quality  Cluster_id
372002  xxx  u003     bad           1
counts of Quality values:
bad    1

group name: (1, 'u004')
group rows:
           Tag  User Quality  Cluster_id
126003  ground  u004     bad           1
348003  ground  u004    good           1
counts of Quality values:
good    1
bad     1

group name: (1, 'u005')
group rows:
           Tag  User Quality  Cluster_id
42004   ground  u005     bad           1
258004  ground  u005     bad           1
390004  ground  u005     bad           1
counts of Quality values:
bad    3
[etc.]
</snippet></ROW><ROW><id>14541419</id><snippet>csv</snippet></ROW><ROW><id>14541423</id><snippet>1 pixel per frame</snippet></ROW><ROW><id>14541423</id><snippet>move 100 pixels per 1 second</snippet></ROW><ROW><id>14541788</id><snippet>a = "hello"
b = a[:2] + '_S1M0N_' + a[2:]
</snippet></ROW><ROW><id>14541802</id><snippet>list_1 = [[1, "BMW", "Boston", "01Jan2013"], [37, "Chevrolet", "Denver", "05Jan2013"],
[854, "BMW", "Boston", "01Jan2013"]]

list_2 = [[1, "Mercedes", "Boston", "01Jan2013"], [37, "Chevrolet", "Denver", "05Jan2013"],
[854, "Toyota", "Boston", "01Jan2013"]]


dict_2 = dict()

for elem in list_2:
    dict_2[elem[0]] = elem[1:]

for item in list_1:
    if dict_2[item[0]][1:] == item[2:]:    # Have to offset the index since dict list only has three elements
        print item


[1, 'BMW', 'Boston', '01Jan2013']
[37, 'Chevrolet', 'Denver', '05Jan2013']
[854, 'BMW', 'Boston', '01Jan2013']
</snippet></ROW><ROW><id>14541802</id><snippet>for item in list_1:
    if dict_2[item[0]][1:] == item[2:]:
        print item, [item[0]] + dict_2[item[0]]


[1, 'BMW', 'Boston', '01Jan2013'] [1, 'Mercedes', 'Boston', '01Jan2013']
[37, 'Chevrolet', 'Denver', '05Jan2013'] [37, 'Chevrolet', 'Denver', '05Jan2013']
[854, 'BMW', 'Boston', '01Jan2013'] [854, 'Toyota', 'Boston', '01Jan2013']
</snippet></ROW><ROW><id>14541927</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "watch-freeseries.mu=lklsflamflkasfmsaldfasmf14792088"
&gt;&gt;&gt; expr = re.compile("watch\-freeseries\.mu.*?(\d{8})")
&gt;&gt;&gt; expr.findall(text)
['14792088']
</snippet></ROW><ROW><id>14541927</id><snippet>watch\-freeseries\.mu</snippet></ROW><ROW><id>14541927</id><snippet>\</snippet></ROW><ROW><id>14541927</id><snippet>.*?</snippet></ROW><ROW><id>14541927</id><snippet>.</snippet></ROW><ROW><id>14541927</id><snippet>*</snippet></ROW><ROW><id>14541927</id><snippet>?</snippet></ROW><ROW><id>14541927</id><snippet>(\d{8})</snippet></ROW><ROW><id>14542123</id><snippet>def func(stdscr):
    if curses.can_change_color():
        # init_color(n, r, g, b)
        # n=0 is background
        curses.init_color(0, 0, 0, 0)
    c = stdscr.getkey()
</snippet></ROW><ROW><id>14542364</id><snippet>widgets = {'combo_first_item': my_comboBox,
           'combo_second_item': my_lineEdit,
           'combo_third_item': my_spinBox}
</snippet></ROW><ROW><id>14542364</id><snippet>def disableWidget(currentIndex):
     widget = widgets[currentIndex]
     widget.setEnabled(False)
     # or anything else you want to do on the widget
</snippet></ROW><ROW><id>14542364</id><snippet>currentIndexChanged[QString]</snippet></ROW><ROW><id>14542364</id><snippet>comboBox.currentIndexChanged['QString'].connect(disableWidget)
</snippet></ROW><ROW><id>14542364</id><snippet>currentIndexChanged[int]</snippet></ROW><ROW><id>14542364</id><snippet>self</snippet></ROW><ROW><id>14542372</id><snippet>.decode()</snippet></ROW><ROW><id>14542372</id><snippet>&gt;&gt;&gt; print lst[0].decode('utf8')
&lt;option value="284"&gt;     Historia &lt;/option&gt;
&gt;&gt;&gt; print lst[1].decode('utf8')
&lt;option value="393"&gt;     Hälsa &amp; skönhet &lt;/option&gt;
</snippet></ROW><ROW><id>14542372</id><snippet> </snippet></ROW><ROW><id>14542372</id><snippet>&gt;&gt;&gt; lst[0].decode('utf8')
u'&lt;option value="284"&gt;\xa0\xa0\xa0\xa0 Historia &lt;/option&gt;'
&gt;&gt;&gt; lst[1].decode('utf8')
u'&lt;option value="393"&gt;\xa0\xa0\xa0\xa0 H\xe4lsa &amp; sk\xf6nhet &lt;/option&gt;'
</snippet></ROW><ROW><id>14542426</id><snippet>"Made by StackOverflow"</snippet></ROW><ROW><id>14542772</id><snippet>def fib():
    a,b = 1,0
    while True:
        yield a
        b = a+b
        yield b
        a = a+b

fibs = fib()
fibo = [next(fibs) for i in xrange(100)]
</snippet></ROW><ROW><id>14542927</id><snippet>parallel.UnmetDependency</snippet></ROW><ROW><id>14542927</id><snippet>def minimum_mem(limit):
    import sys
    if sys.platform == 'darwin': # or BSD in general?
        from subprocess import check_output
        mem = int(check_output(['sysctl', '-n', 'hw.memsize']))
    else: # linux
        with open("/proc/meminfo") as f:
            for line in f:
                if line.startswith("MemTotal"):
                    mem = 1024 * int(line.split()[1])
                    break
    return mem &gt;= limit

kB = 1024.
MB = 1024 * kB
GB = 1024 * MB
</snippet></ROW><ROW><id>14542927</id><snippet>minimum_mem(4 * GB)</snippet></ROW><ROW><id>14542927</id><snippet>@parallel.depend</snippet></ROW><ROW><id>14542927</id><snippet>@parallel.depend(minimum_mem, 8 * GB)
def big_mem_task(n):
    import os, socket
    return "big", socket.gethostname(), os.getpid(), n

amr = view.map(big_mem_task, range(10))
</snippet></ROW><ROW><id>14542927</id><snippet>multiprocessing.cpu_count</snippet></ROW><ROW><id>14542953</id><snippet>from twisted.internet import error

...

def connectionLost(self, reason):
    if reason.check(error.ConnectionDone):
        # this is normal, ignore this
        pass
    else:
        # do whatever you have been doing for logging
</snippet></ROW><ROW><id>14542962</id><snippet>f = codecs.open('sample.html', 'w', encoding='utf-8')
</snippet></ROW><ROW><id>14542962</id><snippet>with</snippet></ROW><ROW><id>14542978</id><snippet>if 'b' in l1 and 'b' in l2: # Separated both statements to prevent ValueErrors
    if l1.index('b') == l2.index('b'): 
        print 'b is in both lists and same position!'
</snippet></ROW><ROW><id>14542978</id><snippet>&gt;&gt;&gt; mylist = ['hai', 'hello', 'hey']
&gt;&gt;&gt; print mylist.index('hello')
1
</snippet></ROW><ROW><id>14542982</id><snippet>('/')</snippet></ROW><ROW><id>14542982</id><snippet># decouple from parent environment
os.chdir("/")
</snippet></ROW><ROW><id>14542982</id><snippet>python /test.py</snippet></ROW><ROW><id>14542982</id><snippet>'your_current_directory/test.py'</snippet></ROW><ROW><id>14542982</id><snippet>os.chdir("/")</snippet></ROW><ROW><id>14542982</id><snippet>subprocess.call(['python','my_full_path_to_working_directory/test.py'])
</snippet></ROW><ROW><id>14543204</id><snippet>url(r'', 'main.views.getIndex'),
</snippet></ROW><ROW><id>14543204</id><snippet>getIndex</snippet></ROW><ROW><id>14543204</id><snippet>/</snippet></ROW><ROW><id>14543204</id><snippet>url(r'^$', 'main.views.getIndex'),
</snippet></ROW><ROW><id>14543204</id><snippet>^</snippet></ROW><ROW><id>14543204</id><snippet>$</snippet></ROW><ROW><id>14543204</id><snippet>^$</snippet></ROW><ROW><id>14543204</id><snippet>''</snippet></ROW><ROW><id>14543204</id><snippet>r''</snippet></ROW><ROW><id>14543277</id><snippet>tvecs_new</snippet></ROW><ROW><id>14543277</id><snippet>`-np.matrix(rotation_matrix).T * np.matrix(tvecs_new)`
</snippet></ROW><ROW><id>14543277</id><snippet>cv2.decomposeProjectionMatrix(P)[-1]</snippet></ROW><ROW><id>14543277</id><snippet>P</snippet></ROW><ROW><id>14543277</id><snippet>[r|t]</snippet></ROW><ROW><id>14543351</id><snippet>import csv
with open('name.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for row in reader:
        print row
</snippet></ROW><ROW><id>14543362</id><snippet>def retrieve(self, curs, condition=None):
    query_ = "SELECT * FROM rows"
    if condition is not None:
        query_ += " %s" %condition
    curs.execute(query_)

    for row in curs.fetchall(): # iterate over the retrieved results
        yield row               # and yield each row in turn
</snippet></ROW><ROW><id>14543432</id><snippet>class MyDateField(DateField):
    def __init__(self, label='', validators=None, transform_data=False, **kwargs):
        super(MyDateField, self).__init__(label, validators, **kwargs)
        self.transform_data = transform_data

    def process_formdata(self, valuelist):
      if self.transform_data:
        data = str(valuelist[0])
        # transform your data here. (for example: data = data.replace('-', '.'))

      super(MyDateField, self).process_formdata([data])

class F(Form):
    date_test = MyDateField('Test', validators=[Required()], format='%d/%m/%Y', transform_data=True])
</snippet></ROW><ROW><id>14543847</id><snippet>section</snippet></ROW><ROW><id>14543847</id><snippet>td</snippet></ROW><ROW><id>14543847</id><snippet>span</snippet></ROW><ROW><id>14543847</id><snippet>In [1]: from bs4 import BeautifulSoup

In [2]: html = # Your html here

In [3]: soup = BeautifulSoup(html)

In [4]: for td in soup.find_all('td', {'class': 'section'}):
   ...:     for span in td.find_all('span'):
   ...:         print span.attrs['class'], span.text
   ...:         
['username'] xxUsername
['comment'] 
A test comment
</snippet></ROW><ROW><id>14543847</id><snippet>In [5]: results = [span.text for td in soup.find_all('td', {'class': 'section'}) for span in td.find_all('span')]

In [6]: results
Out[6]: [u'xxUsername', u'\nA test comment\n']
</snippet></ROW><ROW><id>14543847</id><snippet>In [8]: results = dict((tuple(span.attrs['class']), span.text) for td in soup.find_all('td', {'class': 'section'}) for span in td.find_all('span'))

In [9]: results
Out[9]: {('comment',): u'\nA test comment\n', ('username',): u'xxUsername'}
</snippet></ROW><ROW><id>14543847</id><snippet>In [10]: results = {}

In [11]: for td in soup.find_all('td', {'class': 'section'}):
   ....:     for span in td.find_all('span'):
   ....:         results[tuple(span.attrs['class'])] = span.text
   ....:         

In [12]: results
Out[12]: {('comment',): u'\nA test comment\n', ('username',): u'xxUsername'}
</snippet></ROW><ROW><id>14543975</id><snippet>&gt;&gt;&gt; original = '\xAD\xDE\xDE\xC0'
&gt;&gt;&gt; ''.join([c for t in zip(original[1::2], original[::2]) for c in t])
'\xde\xad\xc0\xde'
</snippet></ROW><ROW><id>14543975</id><snippet>&gt;&gt;&gt; original = b'\xAD\xDE\xDE\xC0'
&gt;&gt;&gt; bytes([c for t in zip(original[1::2], original[::2]) for c in t])
b'\xde\xad\xc0\xde'
</snippet></ROW><ROW><id>14543975</id><snippet>&lt;</snippet></ROW><ROW><id>14543975</id><snippet>&gt;</snippet></ROW><ROW><id>14543975</id><snippet>&gt;&gt;&gt; struct.pack('&lt;2h', *struct.unpack('&gt;2h', original))
'\xde\xad\xc0\xde'
</snippet></ROW><ROW><id>14544088</id><snippet>tef_dict</snippet></ROW><ROW><id>14544088</id><snippet>set_t_e_f()</snippet></ROW><ROW><id>14544088</id><snippet>return tef_dict
</snippet></ROW><ROW><id>14544088</id><snippet>collections.Counter()</snippet></ROW><ROW><id>14544111</id><snippet>class Player:
    hand = []
    def take(self, card):
        self.hand.append(card)
</snippet></ROW><ROW><id>14544178</id><snippet>python setup.py install
</snippet></ROW><ROW><id>14544178</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>14544208</id><snippet>setattr</snippet></ROW><ROW><id>14544208</id><snippet>class mm(object):
    def __init__(self, **kwargs):
        for varname, value in kwargs.iteritems():
            setattr(self, varname, value)
</snippet></ROW><ROW><id>14544216</id><snippet>reduce</snippet></ROW><ROW><id>14544216</id><snippet>add</snippet></ROW><ROW><id>14544216</id><snippet>cumprod</snippet></ROW><ROW><id>14544216</id><snippet>In [2]: c.add(1).cumprod()
Out[2]: 
0    1.120000
1    0.974400
2    1.198512
3    1.402259
4    1.808914
5    1.609934
</snippet></ROW><ROW><id>14544216</id><snippet>init * c.add(1).cumprod()</snippet></ROW><ROW><id>14544252</id><snippet>PROJECT_ROOT = os.path.join(os.path.dirname(__file__), '..')
SITE_ROOT = PROJECT_ROOT
</snippet></ROW><ROW><id>14544252</id><snippet>MEDIA_ROOT = os.path.join(SITE_ROOT, 'media')
MEDIA_URL = '/media/'
</snippet></ROW><ROW><id>14544252</id><snippet>STATIC_ROOT = os.path.join(SITE_ROOT, 'static')
STATIC_URL = '/static/'
</snippet></ROW><ROW><id>14544252</id><snippet>STATICFILES_DIRS = (
    os.path.join(SITE_ROOT, 'staticfiles'),
)
</snippet></ROW><ROW><id>14544252</id><snippet>from django.conf.urls import patterns, include, url
from django.conf.urls.static import static
from django.contrib import admin
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from project_name import settings
admin.autodiscover()

urlpatterns = patterns('',
     .........
     .........
) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>14544301</id><snippet>save()</snippet></ROW><ROW><id>14544301</id><snippet>def create_profile(request):
    if request.method == "POST":
        form = PartialPersonForm(request.POST, request.FILES,)
        addressForm = PartialAddressForm(request.POST)
        form.save()
        addressForm.save()
</snippet></ROW><ROW><id>14544637</id><snippet>post_save</snippet></ROW><ROW><id>14544718</id><snippet>chmod 755 configure</snippet></ROW><ROW><id>14544949</id><snippet>print</snippet></ROW><ROW><id>14544949</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>14544949</id><snippet>from sys import stdout</snippet></ROW><ROW><id>14544949</id><snippet>stdout</snippet></ROW><ROW><id>14544949</id><snippet>print</snippet></ROW><ROW><id>14544949</id><snippet>import sys
print 'test'
</snippet></ROW><ROW><id>14544949</id><snippet>sys.stdout</snippet></ROW><ROW><id>14544949</id><snippet>file</snippet></ROW><ROW><id>14544949</id><snippet>from sys import stdout
stdout = open('file', 'w')
print 'test' # calls sys.stdout.write('test'), which print to the terminal
stdout.close()
</snippet></ROW><ROW><id>14544949</id><snippet>import sys
sys.stdout = open('file', 'w')
print 'test' # calls sys.stdout.write('test'), which print to the file
sys.stdout.close()
</snippet></ROW><ROW><id>14544949</id><snippet>from sys import stdout
stdout = open('file', 'w')
stdout.write('test')
stdout.close()
</snippet></ROW><ROW><id>14545056</id><snippet>$ grep "if __name__ == '__main__':" /usr/lib64/python2.7/* | wc -l
55
</snippet></ROW><ROW><id>14545324</id><snippet>&lt;h3 class="r"&gt;
  &lt;a href="/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDUQFjAA&amp;url=http%3A%2F%2Fwww.test.com%2F&amp;ei=bdMEUYXiBefS2AXL5oGoBQ&amp;usg=AFQjCNH21KLjC0CBkjon2DwD_CZ0HApLMw&amp;sig2=KeRdw0_WAGc2Zrz1jI49wQ&amp;bvm=bv.41524429,d.b2I" 
  class="l" 
  onmousedown="return rwt(this,'','','','1','AFQjCNH21KLjC0CBkjon2DwD_CZ0HApLMw','KeRdw0_WAGc2Zrz1jI49wQ','0CDUQFjAA','','',event)"&gt;
    &lt;em&gt;Test&lt;/em&gt;.com
  &lt;/a&gt;
&lt;/h3&gt;
</snippet></ROW><ROW><id>14545324</id><snippet>href</snippet></ROW><ROW><id>14545324</id><snippet>a</snippet></ROW><ROW><id>14545324</id><snippet>"/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDUQFjAA&amp;url=http%3A%2F%2Fwww.test.com%2F&amp;ei=bdMEUYXiBefS2AXL5oGoBQ&amp;usg=AFQjCNH21KLjC0CBkjon2DwD_CZ0HApLMw&amp;sig2=KeRdw0_WAGc2Zrz1jI49wQ&amp;bvm=bv.41524429,d.b2I"
</snippet></ROW><ROW><id>14545324</id><snippet>cite</snippet></ROW><ROW><id>14545324</id><snippet>a</snippet></ROW><ROW><id>14545368</id><snippet>print 1/2
# 0
print 5/2
# 2
</snippet></ROW><ROW><id>14545368</id><snippet>0.5</snippet></ROW><ROW><id>14545368</id><snippet>1</snippet></ROW><ROW><id>14545368</id><snippet>2</snippet></ROW><ROW><id>14545368</id><snippet>print 1.0/2
# 0.5
print 1/2.0
# 0.5
print 1.0/2.0
# 0.5
</snippet></ROW><ROW><id>14545368</id><snippet>(x1+x2)/2.0
</snippet></ROW><ROW><id>14545461</id><snippet>.*</snippet></ROW><ROW><id>14545461</id><snippet>&gt;&gt;&gt; pat = re.compile(r"#([^_]*)_?(.+)?")
&gt;&gt;&gt; pat.findall('#q1_f1')
[('q1', 'f1')]
</snippet></ROW><ROW><id>14545461</id><snippet>#([a-z][0-9])(?:_([a-z][0-9]))?
</snippet></ROW><ROW><id>14545467</id><snippet>copy</snippet></ROW><ROW><id>14545467</id><snippet>formula</snippet></ROW><ROW><id>14545467</id><snippet>xlrd</snippet></ROW><ROW><id>14545467</id><snippet>import copy</snippet></ROW><ROW><id>14545467</id><snippet>copy</snippet></ROW><ROW><id>14545768</id><snippet>gtk.ComboBox</snippet></ROW><ROW><id>14545867</id><snippet>inspect</snippet></ROW><ROW><id>14545981</id><snippet>alpha=0.0</snippet></ROW><ROW><id>14545981</id><snippet>def my_annotate(ax, s, xy_arr=[], *args, **kwargs):
  ans = []
  an = ax.annotate(s, xy_arr[0], *args, **kwargs)
  ans.append(an)
  d = {}
  try:
    d['xycoords'] = kwargs['xycoords']
  except KeyError:
    pass
  try:
    d['arrowprops'] = kwargs['arrowprops']
  except KeyError:
    pass
  for xy in xy_arr[1:]:
    an = ax.annotate(s, xy, alpha=0.0, xytext=(0,0), textcoords=an, **d)
    ans.append(an)
  return ans

ax = plt.gca()
ax.plot([1,2,3,4],[1,4,2,6])
my_annotate(ax,
            'Test',
            xy_arr=[(2,4), (3,2), (4,6)], xycoords='data',
            xytext=(30, -80), textcoords='offset points',
            bbox=dict(boxstyle='round,pad=0.2', fc='yellow', alpha=0.3),
            arrowprops=dict(arrowstyle="-|&gt;",
                            connectionstyle="arc3,rad=0.2",
                            fc="w"))
plt.show()
</snippet></ROW><ROW><id>14545996</id><snippet>   (sorted_list[pos - 1][0] &gt; sorted_list[pos][0] 
or (sorted_list[pos - 1][0] == sorted_list[pos][0] 
    and sorted_list[pos - 1][1] &gt; sorted_list[pos][1]))
</snippet></ROW><ROW><id>14545996</id><snippet>sorted_list[pos - 1][0] &gt; sorted_list[pos][0]
</snippet></ROW><ROW><id>14545996</id><snippet>sorted_list[pos - 1] &gt; sorted_list[pos]
</snippet></ROW><ROW><id>14545996</id><snippet>&gt;&gt;&gt; a=[1,2]
&gt;&gt;&gt; b=[1,1]
&gt;&gt;&gt; a&lt;b
False
&gt;&gt;&gt; a=[1,2]
&gt;&gt;&gt; b=[1,3]
&gt;&gt;&gt; a&lt;b
True
&gt;&gt;&gt; a=[1,2]
&gt;&gt;&gt; b=[2,1]
&gt;&gt;&gt; a&lt;b
True
</snippet></ROW><ROW><id>14546231</id><snippet>CPython</snippet></ROW><ROW><id>14546231</id><snippet>CPython</snippet></ROW><ROW><id>14546231</id><snippet>pypy</snippet></ROW><ROW><id>14546231</id><snippet>iron python</snippet></ROW><ROW><id>14546231</id><snippet>jython</snippet></ROW><ROW><id>14546701</id><snippet>finditer()</snippet></ROW><ROW><id>14546701</id><snippet>MatchObject</snippet></ROW><ROW><id>14546701</id><snippet>.start()</snippet></ROW><ROW><id>14546701</id><snippet>import re

p = re.compile("(?&lt;! .)([.] |! )")
t = u"Great buy w. all amenities! Use on all cars. come on in "

last = None
for m in p.finditer(t):
    last = m

if last is not None:
    print m.start()
</snippet></ROW><ROW><id>14546701</id><snippet>43</snippet></ROW><ROW><id>14546701</id><snippet>t</snippet></ROW><ROW><id>14546701</id><snippet>t = u"Great buy w. all amenities! Use on all cars. come on in!"
</snippet></ROW><ROW><id>14546701</id><snippet>43</snippet></ROW><ROW><id>14546701</id><snippet>55</snippet></ROW><ROW><id>14546701</id><snippet>p = re.compile("(?&lt;! .)([.!](?:\s|$))")
</snippet></ROW><ROW><id>14546701</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = u"Great buy w. all amenities! Use on all cars. come on in!"
&gt;&gt;&gt; p = re.compile("(?&lt;! .)([.!](?:\s|$))")
&gt;&gt;&gt; last = None
&gt;&gt;&gt; for m in p.finditer(t):
...     last = m
... 
&gt;&gt;&gt; if last is not None:
...     print m.start()
... 
55
</snippet></ROW><ROW><id>14546738</id><snippet>sqlite</snippet></ROW><ROW><id>14546738</id><snippet>id</snippet></ROW><ROW><id>14546738</id><snippet>with sqlite3.connect('example.db', detect_types=sqlite3.PARSE_DECLTYPES) as conn:
    cur = conn.cursor()
    cur.execute("INSERT INTO Surveys(Name, Desc, DictObject, Hash) VALUES (?, ?, ?, ?",
        ('somename', 'some description\nof sorts\n',
         "{'dump': 'of a dictionary'}", '0xhash'))
</snippet></ROW><ROW><id>14546738</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>14546738</id><snippet>id</snippet></ROW><ROW><id>14546738</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>14546738</id><snippet>sqlite3</snippet></ROW><ROW><id>14546738</id><snippet>with</snippet></ROW><ROW><id>14546738</id><snippet>commit()</snippet></ROW><ROW><id>14546738</id><snippet>conn.commit()</snippet></ROW><ROW><id>14546916</id><snippet>filter(lambda x: 'Around The World' in x, tracks)
</snippet></ROW><ROW><id>14546916</id><snippet>'Around The World'</snippet></ROW><ROW><id>14546916</id><snippet>list(filter(...))</snippet></ROW><ROW><id>14546916</id><snippet>filter</snippet></ROW><ROW><id>14547196</id><snippet>&lt;h1&gt;{{ section.title }}&lt;/h1&gt;
</snippet></ROW><ROW><id>14547256</id><snippet>data</snippet></ROW><ROW><id>14547256</id><snippet>QModelIndex</snippet></ROW><ROW><id>14547256</id><snippet>QVariant</snippet></ROW><ROW><id>14547256</id><snippet>QString</snippet></ROW><ROW><id>14547256</id><snippet>.toString</snippet></ROW><ROW><id>14547256</id><snippet>print 'selected item index found at %s with data: %s' % (it.row(), it.data().toString())
</snippet></ROW><ROW><id>14547256</id><snippet>QListView.clicked</snippet></ROW><ROW><id>14547256</id><snippet>selectedIndexes()</snippet></ROW><ROW><id>14547256</id><snippet>@QtCore.pyqtSlot(QtCore.QModelIndex)
def on_treeView_clicked(self, index):
    print 'selected item index found at %s with data: %s' % (index.row(), index.data().toString())
</snippet></ROW><ROW><id>14547273</id><snippet># First count all the messages.
# On a big set of data this may be very slow operation.
total_msgs = db.session.query(db.func.count(Message.id).label('cnt')).subquery()
# Then count messages read by the user.
read_msgs = db.session.query(db.func.count(Message.id).label('cnt')).\
    join(User.message_read_states).filter(User.id == 1).subquery()
# Subtract read messages count from total count.
unread_count = db.session.query(total_msgs.c.cnt - read_msgs.c.cnt).scalar()
</snippet></ROW><ROW><id>14547538</id><snippet>config.add_view(twitterfeed, route_name='hello')
</snippet></ROW><ROW><id>14547538</id><snippet>twitterfeed</snippet></ROW><ROW><id>14547538</id><snippet>request</snippet></ROW><ROW><id>14547538</id><snippet>from pyramid.response import Response

def twitterfeed(request):
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    api = tweepy.API(auth)
    statuses =  tweepy.Cursor(api.friends_timeline).items(20)

    return Response('\n'.join([s.text.encode('utf8') for s in statuses]))
</snippet></ROW><ROW><id>14547538</id><snippet>return list(str(status.text))</snippet></ROW><ROW><id>14547584</id><snippet>defaultdict</snippet></ROW><ROW><id>14547584</id><snippet>from collections import defaultdict
from pprint import pprint

from hachoir_metadata import metadata
from hachoir_core.cmd_line import unicodeFilename
from hachoir_parser import createParser

# using this example http://archive.org/details/WorkToFishtestwmv
filename = './test_wmv.wmv' 
filename, realname = unicodeFilename(filename), filename
parser = createParser(filename)

# See what keys you can extract
for k,v in metadata.extractMetadata(parser)._Metadata__data.iteritems():
    if v.values:
        print v.key, v.values[0].value

# Turn the tags into a defaultdict
metalist = metadata.extractMetadata(parser).exportPlaintext()
meta = defaultdict(defaultdict)
for item in metalist:
    if item.endswith(':'):
        k = item[:-1]
    else:
        tag, value = item.split(': ')
        tag = tag[2:]
        meta[k][tag] = value

print meta['Video stream #1']['Image width'] # 320 pixels
</snippet></ROW><ROW><id>14547686</id><snippet>getattr</snippet></ROW><ROW><id>14547686</id><snippet>gamename</snippet></ROW><ROW><id>14547686</id><snippet>getattr(getattr(Scripts, gamename), gamename)(version, size, download)
</snippet></ROW><ROW><id>14547894</id><snippet>white.png</snippet></ROW><ROW><id>14547894</id><snippet>0</snippet></ROW><ROW><id>14547894</id><snippet>grayscale</snippet></ROW><ROW><id>14547894</id><snippet>img2 = cv2.imread('black.png', 0)
cv2.circle(img2, (100,100),100,255,-1)
cv2.imwrite('circle.png', img2)
</snippet></ROW><ROW><id>14547894</id><snippet>img2 = cv2.imread('black.png')</snippet></ROW><ROW><id>14547998</id><snippet>#!/usr/bin/env python
import mechanize
import cookielib

br = mechanize.Browser()
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)
br.addheaders = [('User-agent', 'Mozilla/6.0 (X11; U; i686; en-US; rv:1.9.0.1) Gecko/2008071615 OS X 10.2 Firefox/3.0.1')]

fda_url2 = 'http://www.accessdata.fda.gov/scripts/cder/drugsatfda/index.cfm?fuseaction=Search.Addlsearch_drug_name'

print br.open(fda_url2).geturl()


for f in br.forms():
   print 'this is a form'
   print f

br.select_form('searchoptionB')
br.form['ApplNo'] = '018780'
html = br.submit()

print br.response().read()
</snippet></ROW><ROW><id>14547998</id><snippet>$ ./test.py  | grep HUM
            &lt;td valign="top" class="product_table" height="24"&gt;&lt;a href="index.cfm?fuseaction=Search.Overview&amp;DrugName=HUMULIN%20R"&gt;
 HUMULIN R
 INSULIN RECOMBINANT HUMAN
            &lt;td valign="top" class="product_table" height="24"&gt;&lt;a href="index.cfm?fuseaction=Search.Overview&amp;DrugName=HUMULIN%20R%20PEN"&gt;
 HUMULIN R PEN
 INSULIN RECOMBINANT HUMAN
</snippet></ROW><ROW><id>14547998</id><snippet>print br.response().read()
</snippet></ROW><ROW><id>14548063</id><snippet>.next_sibling</snippet></ROW><ROW><id>14548063</id><snippet>from bs4 import Comment

def allnext(comment):
    curr = comment
    while True:
        curr = curr.next_sibling
        if isinstance(curr, Comment):
            return
        yield curr
</snippet></ROW><ROW><id>14548063</id><snippet>for elem in allnext(comment):
    print elem
</snippet></ROW><ROW><id>14548063</id><snippet>elems = list(allnext(comment))
</snippet></ROW><ROW><id>14548063</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>14548063</id><snippet>www.gamespot.com</snippet></ROW><ROW><id>14548063</id><snippet>&lt;div class="ad_wrap ad_wrap_dart"&gt;&lt;div style="text-align:center;"&gt;&lt;img alt="Advertisement" src="http://ads.com.com/Ads/common/advertisement.gif" style="display:block;height:10px;width:120px;margin:0 auto;"/&gt;&lt;/div&gt;
&lt;!-- start of gamespot gpt ad tag --&gt;
&lt;div id="div-gpt-ad-1359295192-lb-top"&gt;
&lt;script type="text/javascript"&gt;
        googletag.display('div-gpt-ad-1359295192-lb-top');
    &lt;/script&gt;
&lt;noscript&gt;
&lt;a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6975/row/gamespot.com/home&amp;sz=728x90|970x66|970x150|970x250|960x150&amp;t=pos%3Dtop%26platform%3Ddesktop%26&amp;c=1359295192"&gt;
&lt;img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6975/row/gamespot.com/home&amp;sz=728x90|970x66|970x150|970x250|960x150&amp;t=pos%3Dtop%26platform%3Ddesktop%26&amp;c=1359295192"/&gt;
&lt;/a&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;!-- end of gamespot gpt tag --&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>14548063</id><snippet>comment</snippet></ROW><ROW><id>14548063</id><snippet>allnext()</snippet></ROW><ROW><id>14548063</id><snippet>&gt;&gt;&gt; list(allnext(comment))
[u'\n', &lt;div id="div-gpt-ad-1359295192-lb-top"&gt;
&lt;script type="text/javascript"&gt;
        googletag.display('div-gpt-ad-1359295192-lb-top');
    &lt;/script&gt;
&lt;noscript&gt;
&lt;a href="http://pubads.g.doubleclick.net/gampad/jump?iu=/6975/row/gamespot.com/home&amp;sz=728x90|970x66|970x150|970x250|960x150&amp;t=pos%3Dtop%26platform%3Ddesktop%26&amp;c=1359295192"&gt;
&lt;img src="http://pubads.g.doubleclick.net/gampad/ad?iu=/6975/row/gamespot.com/home&amp;sz=728x90|970x66|970x150|970x250|960x150&amp;t=pos%3Dtop%26platform%3Ddesktop%26&amp;c=1359295192"/&gt;
&lt;/a&gt;
&lt;/noscript&gt;
&lt;/div&gt;, u'\n']
</snippet></ROW><ROW><id>14548080</id><snippet>wanted = {u'CD',u'Album',u'Maxi-Single'}
[i for i in json_object[u'results'] if any(w in wanted for w in i[u'format'])]
</snippet></ROW><ROW><id>14548080</id><snippet>[i for i in json_object[u'results'] if any(w in i[u'format'] for w in wanted)]
</snippet></ROW><ROW><id>14548264</id><snippet>&gt;&gt;&gt; import sklearn.ensemble
&gt;&gt;&gt; rf = sklearn.ensemble.RandomForestRegressor()
&gt;&gt;&gt; rf.n_estimators
10
&gt;&gt;&gt; rf = sklearn.ensemble.RandomForestRegressor(n_estimators=500)
&gt;&gt;&gt; rf.n_estimators
500
</snippet></ROW><ROW><id>14548340</id><snippet>default</snippet></ROW><ROW><id>14548340</id><snippet>In [15]: from datetime import datetime

In [16]: from dateutil import parser

In [17]: DEFAULT_DATE = datetime(2013,1,1)

In [18]: dates=["Today is August 2012. Tomorrow isn't",
    ...:        "Another day 12 August, another time",
    ...:        "12/08 is another format",
    ...:        "have another ? 08/12/12 could be", 
    ...:        "finally august 12 would be"]


In [19]: for date in dates:
    ...:     print parser.parse(date,fuzzy=True, default=DEFAULT_DATE)
    ...:     
2012-08-01 00:00:00
2013-08-12 00:00:00
2013-12-08 00:00:00  # wrong
2012-08-12 00:00:00
2013-08-12 00:00:00
</snippet></ROW><ROW><id>14548405</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'a{asdfgh{asf}xvc}defg}des}'
&gt;&gt;&gt; p = re.compile('(\{[\w|\W]+?\}.+?\})')
&gt;&gt;&gt; print p.findall(s)
['{asdfgh{asf}xvc}']
</snippet></ROW><ROW><id>14548405</id><snippet>.+?\}</snippet></ROW><ROW><id>14548405</id><snippet>&gt;&gt;&gt; p = re.compile('(\{[\w|\W]+?\}.+?\}.+?\})')
&gt;&gt;&gt; print p.findall(s)
['{asdfgh{asf}xvc}defg}']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14548474</id><snippet>Queue</snippet></ROW><ROW><id>14548474</id><snippet>Queue</snippet></ROW><ROW><id>14548474</id><snippet>while</snippet></ROW><ROW><id>14548474</id><snippet>class MX_getAAAA_thread(threading.Thread):
    def __init__(self, id_domain, mx):
        threading.Thread.__init__(self)
        self.id_domain = id_domain
        self.mx = mx
</snippet></ROW><ROW><id>14548474</id><snippet>while</snippet></ROW><ROW><id>14548474</id><snippet>run</snippet></ROW><ROW><id>14548474</id><snippet>def run(self):
    res = dns.resolver.Resolver()
    res.lifetime = 1.5
    res.timeout = 0.5

    try:
        answers = res.query(self.mx,'AAAA')
        ip_mx = str(answers[0])
    except:
        ip_mx = "N/A"

    with lock:
        sql = "INSERT INTO mx (id_domain,mx,ip_mx) VALUES (" + str(id_domain) + ",'" + str(self.mx) + "','" + str(ip_mx) + "')"
        try:
            cursor.execute(sql)
            db.commit()
        except:
            db.rollback()

        print "MX" , '&gt;&gt;' , ip_mx, ' :: ', str(self.mx)
</snippet></ROW><ROW><id>14548474</id><snippet>for mx in answers:
    t = MX_getAAAA_thread(qMX, id_domain, mx)
    t.setDaemon(True)
    threads.append(t)
    t.start()
</snippet></ROW><ROW><id>14548474</id><snippet>for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>14548855</id><snippet>all()</snippet></ROW><ROW><id>14548855</id><snippet>django.db.connection.queries</snippet></ROW><ROW><id>14549179</id><snippet>op = (PyStringObject *)PyObject_MALLOC(sizeof(PyStringObject) + size);
</snippet></ROW><ROW><id>14549253</id><snippet>dot (.)</snippet></ROW><ROW><id>14549253</id><snippet>expression = re.compile(r'http:\/\/[^;]*')
</snippet></ROW><ROW><id>14549388</id><snippet>a = numpy.zeros((3,1))</snippet></ROW><ROW><id>14549388</id><snippet>    b = a[:-1,:]
</snippet></ROW><ROW><id>14549388</id><snippet>    array([[ 0.],
           [ 0.]])
</snippet></ROW><ROW><id>14549388</id><snippet>a[:,0]</snippet></ROW><ROW><id>14549388</id><snippet>a[:,0:1]</snippet></ROW><ROW><id>14549388</id><snippet>a[:,:]</snippet></ROW><ROW><id>14549454</id><snippet>django.views.generic.RedirectView</snippet></ROW><ROW><id>14549454</id><snippet>from django.views.generic import RedirectView

url(r'^accounts/signup/$',
    RedirectView.as_view(url='/', permanent=False),
    name='userena_signup'),
</snippet></ROW><ROW><id>14549493</id><snippet>get_or_insert()</snippet></ROW><ROW><id>14549493</id><snippet>@ndb.transactional
def my_get_or_insert(cls, id, **kwds):
  key = ndb.Key(cls, id)
  ent = key.get()
  if ent is not None:
    return (ent, False)  # False meaning "not created"
  ent = cls(**kwds)
  ent.key = key
  ent.put()
  return (ent, True)  # True meaning "created"
</snippet></ROW><ROW><id>14549937</id><snippet>print(splitsetnence)</snippet></ROW><ROW><id>14549937</id><snippet>print(item)</snippet></ROW><ROW><id>14549937</id><snippet>def main():
    sentence = input("write a few words and separate them with ,")
    splitsentence = wordlist(sentence)
    for item in splitsentence:
        print (item)
</snippet></ROW><ROW><id>14549999</id><snippet>del</snippet></ROW><ROW><id>14550111</id><snippet>append()</snippet></ROW><ROW><id>14550111</id><snippet>deque</snippet></ROW><ROW><id>14550111</id><snippet>maxlen</snippet></ROW><ROW><id>14550111</id><snippet>for a in range(num_thrs):
  perf_his += [collections.deque()]

for b in range(num_thrs):
  for c in range(0, 1):
    perf_his[b].append(0)
</snippet></ROW><ROW><id>14550119</id><snippet>print os.popen('free -m').read()
</snippet></ROW><ROW><id>14550136</id><snippet>sqlite3</snippet></ROW><ROW><id>14550136</id><snippet>pysqlite</snippet></ROW><ROW><id>14550136</id><snippet>wget http://pysqlite.googlecode.com/files/pysqlite-2.6.3.tar.gz</snippet></ROW><ROW><id>14550136</id><snippet>pysqlite</snippet></ROW><ROW><id>14550136</id><snippet>sqlite</snippet></ROW><ROW><id>14550136</id><snippet>python setup.py build_static</snippet></ROW><ROW><id>14550136</id><snippet>python setup.py install</snippet></ROW><ROW><id>14550136</id><snippet>pysqlite</snippet></ROW><ROW><id>14550136</id><snippet>path-to-virtualenv/lib/python2.7/site-packages</snippet></ROW><ROW><id>14550136</id><snippet>sqlite</snippet></ROW><ROW><id>14550136</id><snippet>pysqlite</snippet></ROW><ROW><id>14550136</id><snippet>from pysqlite2 import dbapi2 as sqlite</snippet></ROW><ROW><id>14550447</id><snippet>&gt;&gt;&gt; s = [10, 14, 18, 20, 25]
&gt;&gt;&gt; t = [55, 42, 18, 12, 4]
&gt;&gt;&gt; for x, y in zip(s, t):
        if x == y:
            print 'Equal element found:', x
            break


Equal element found: 18
</snippet></ROW><ROW><id>14550447</id><snippet>&gt;&gt;&gt; s = {18, 20, 25, 14, 10}
&gt;&gt;&gt; for x in t:
        if x in s:
            print 'Equal element found', x
            break


Equal element found 18
</snippet></ROW><ROW><id>14550447</id><snippet>&gt;&gt;&gt; s = [10, 14, 18, 20, 25]
&gt;&gt;&gt; t = [55, 42, 18, 12, 4]
&gt;&gt;&gt; [x==y for x, y in zip(s, t)]
[False, False, True, False, False]
</snippet></ROW><ROW><id>14550505</id><snippet>words = filter(None, member.filename.split('/'))
</snippet></ROW><ROW><id>14550505</id><snippet>words = filter(None, member.filename.split(os.sep))
</snippet></ROW><ROW><id>14550505</id><snippet>/</snippet></ROW><ROW><id>14550505</id><snippet>\</snippet></ROW><ROW><id>14550545</id><snippet>bs4</snippet></ROW><ROW><id>14550545</id><snippet>&gt;&gt;&gt; import bs4
&gt;&gt;&gt; my_string = "&lt;p&gt;this is some \n fun&lt;/p&gt;And this is \n some more fun!"
&gt;&gt;&gt; soup = bs4.BeautifulSoup(my_string)
&gt;&gt;&gt; p = soup.p.contents[0].replace('\n ','')
&gt;&gt;&gt; print p
</snippet></ROW><ROW><id>14550545</id><snippet>None</snippet></ROW><ROW><id>14550545</id><snippet>tag.child</snippet></ROW><ROW><id>14550545</id><snippet>&gt;&gt;&gt; tags = soup.find_all(None)
&gt;&gt;&gt; for tag in tags:
...    if tag.child is None:
...        tag.child.contents[0].replace('\n ', '')
...    else:
...        tag.contents[0].replace('\n ', '')
</snippet></ROW><ROW><id>14550657</id><snippet>import web

urls = ('/.*', 'hooks')

app = web.application(urls, globals())

class hooks:
    def POST(self):
        data = web.data()
        print
        print 'DATA RECEIVED:'
        print data
        print
        return 'OK'

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>14550657</id><snippet>$ python hooks.py 
http://0.0.0.0:8080/

DATA RECEIVED: 
test=thisisatest&amp;test2=25

50.19.170.198:33407 - - [27/Jan/2013 10:18:37] "HTTP/1.1 POST /hooks" - 200 OK
</snippet></ROW><ROW><id>14550657</id><snippet>$ python hooks.py 1234 
</snippet></ROW><ROW><id>14550714</id><snippet>foo.bar1</snippet></ROW><ROW><id>14550714</id><snippet>foo.bar2</snippet></ROW><ROW><id>14550714</id><snippet>foo.bar1</snippet></ROW><ROW><id>14550714</id><snippet>&lt;__main__.c_ubyte_Array_5 object at 0xf7551df4&gt;
</snippet></ROW><ROW><id>14550714</id><snippet>foo.bar2</snippet></ROW><ROW><id>14550714</id><snippet>"AAAAA"
</snippet></ROW><ROW><id>14550714</id><snippet>c_char</snippet></ROW><ROW><id>14550714</id><snippet>"AAAAA"</snippet></ROW><ROW><id>14550714</id><snippet>bar2</snippet></ROW><ROW><id>14550871</id><snippet>from subprocess import *
</snippet></ROW><ROW><id>14550871</id><snippet>subprocess.STARTUPINFO()
</snippet></ROW><ROW><id>14550871</id><snippet>STARTUPINFO()
</snippet></ROW><ROW><id>14550871</id><snippet>import subprocess
</snippet></ROW><ROW><id>14550871</id><snippet>subprocess</snippet></ROW><ROW><id>14550871</id><snippet>subprocess</snippet></ROW><ROW><id>14550871</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>14550871</id><snippet>subprocess.STARTUPINFO()</snippet></ROW><ROW><id>14550887</id><snippet>&gt;&gt;&gt; !cat unquoted.csv
1950's,xyz.nl/user_003,bad, 123
17th,red,flower,xyz.nl/user_001,good,203
"",xyz.nl/user_239,not very,345
&gt;&gt;&gt; pd.read_csv("unquoted.csv", header=None)
Traceback (most recent call last):
  File "&lt;ipython-input-40-7d9aadb2fad5&gt;", line 1, in &lt;module&gt;
    pd.read_csv("unquoted.csv", header=None)
[...]
  File "parser.pyx", line 1572, in pandas._parser.raise_parser_error (pandas/src/parser.c:17041)
CParserError: Error tokenizing data. C error: Expected 4 fields in line 2, saw 6
</snippet></ROW><ROW><id>14550887</id><snippet>import csv

with open("unquoted.csv", "rb") as infile, open("quoted.csv", "wb") as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    for line in reader:
        newline = [','.join(line[:-3])] + line[-3:]
        writer.writerow(newline)
</snippet></ROW><ROW><id>14550887</id><snippet>&gt;&gt;&gt; !cat quoted.csv
1950's,xyz.nl/user_003,bad, 123
"17th,red,flower",xyz.nl/user_001,good,203
,xyz.nl/user_239,not very,345
</snippet></ROW><ROW><id>14550887</id><snippet>&gt;&gt;&gt; pd.read_csv("quoted.csv", header=None)
                 0                1         2    3
0           1950's  xyz.nl/user_003       bad  123
1  17th,red,flower  xyz.nl/user_001      good  203
2              NaN  xyz.nl/user_239  not very  345
</snippet></ROW><ROW><id>14550934</id><snippet>def bestmatch(A, lists):
     a = set(A)
     return min(lists, key=lambda x:  len(set(x) &amp; a)
</snippet></ROW><ROW><id>14550934</id><snippet>set(A)</snippet></ROW><ROW><id>14550988</id><snippet>final_list = []
for destination in destinations:
    final_list += YourCDRModel.objects.filter(area__in=destination).values_list('number', flat=True).order_by('?')[0:3]
</snippet></ROW><ROW><id>14551040</id><snippet>def pFactors(n): 
        """Finds the prime factors of 'n'""" 
        from math import sqrt 
        pFact, limit, check, num = [], int(sqrt(n)) + 1, 2, n 
        if n == 1: return [1] 
        for check in range(2, limit): 
             while num % check == 0: 
                pFact.append(check) 
                num /= check 
        if num &gt; 1: 
          pFact.append(num) 
        return pFact 

for i in range(1,1000):
        print pFactors(i)
</snippet></ROW><ROW><id>14551040</id><snippet>check</snippet></ROW><ROW><id>14551040</id><snippet>[11, 89]
[2, 2, 5, 7, 7]
[3, 3, 109]
[2, 491]
[983]
[2, 2, 2, 3, 41]
[5, 197]
[2, 17, 29]
[3, 7, 47]
[2, 2, 13, 19]
[23, 43]
[2, 3, 3, 5, 11]
[991]
[2, 2, 2, 2, 2, 31]
[3, 331]
[2, 7, 71]
[5, 199]
[2, 2, 3, 83]
[997]
[2, 499]
[3, 3, 3, 37]
</snippet></ROW><ROW><id>14551167</id><snippet>name</snippet></ROW><ROW><id>14551167</id><snippet>select</snippet></ROW><ROW><id>14551167</id><snippet>option</snippet></ROW><ROW><id>14551167</id><snippet>&lt;select name="result"&gt;
    &lt;option value="onezero"&gt;1-01&lt;/option&gt;
    ...
&lt;/select&gt;
</snippet></ROW><ROW><id>14551300</id><snippet>import foo.bar</snippet></ROW><ROW><id>14551300</id><snippet>foo</snippet></ROW><ROW><id>14551300</id><snippet>bar</snippet></ROW><ROW><id>14551300</id><snippet>module</snippet></ROW><ROW><id>14551300</id><snippet>modules.module</snippet></ROW><ROW><id>14551300</id><snippet>import modules.module as module</snippet></ROW><ROW><id>14551300</id><snippet>from modules import module</snippet></ROW><ROW><id>14551433</id><snippet>class DeviceInline(admin.TabularInline):
    model = Device

class UserAdmin(admin.ModelAdmin):
    inlines = [
        DeviceInline
    ]
</snippet></ROW><ROW><id>14551501</id><snippet>from rpy import *
</snippet></ROW><ROW><id>14551501</id><snippet>r</snippet></ROW><ROW><id>14551501</id><snippet>&gt;&gt;&gt; from rpy import *
&gt;&gt;&gt;
&gt;&gt;&gt; degrees = 4
&gt;&gt;&gt; grid = r.seq(0, 10, length=100)
&gt;&gt;&gt; values = [r.dchisq(x, degrees) for x in grid]
&gt;&gt;&gt; r.par(ann=0)
&gt;&gt;&gt; r.plot(grid, values, type=’lines’)
</snippet></ROW><ROW><id>14551519</id><snippet>next()</snippet></ROW><ROW><id>14551519</id><snippet>next()</snippet></ROW><ROW><id>14551519</id><snippet>for</snippet></ROW><ROW><id>14551519</id><snippet>next()</snippet></ROW><ROW><id>14551519</id><snippet>csv.reader</snippet></ROW><ROW><id>14551519</id><snippet>open()</snippet></ROW><ROW><id>14551691</id><snippet>mod</snippet></ROW><ROW><id>14551691</id><snippet>var</snippet></ROW><ROW><id>14551691</id><snippet>getattr(mod, var)</snippet></ROW><ROW><id>14551692</id><snippet>np.size</snippet></ROW><ROW><id>14551692</id><snippet>np.size</snippet></ROW><ROW><id>14551692</id><snippet>fields = [('name1', str), ('name2', float), ...]
data = np.zeros((num_rows,), dtype=fields)

csv_file_object = csv.reader(open(r'some_path\Train.csv','rb'))
header = csv_file_object.next()
for i, row in enumerate(csv_file_object):
    data[i] = row
</snippet></ROW><ROW><id>14551692</id><snippet>fields</snippet></ROW><ROW><id>14551692</id><snippet>header</snippet></ROW><ROW><id>14551956</id><snippet>f = 0 - g(x,y)
</snippet></ROW><ROW><id>14551956</id><snippet>f</snippet></ROW><ROW><id>14552034</id><snippet>QPolygon</snippet></ROW><ROW><id>14552034</id><snippet>QVector</snippet></ROW><ROW><id>14552034</id><snippet>block.mapToScene( block.polygon()[i] )</snippet></ROW><ROW><id>14552042</id><snippet>has_key()</snippet></ROW><ROW><id>14552042</id><snippet>{% if group_inst.has_key %}
</snippet></ROW><ROW><id>14552047</id><snippet>autocommit</snippet></ROW><ROW><id>14552047</id><snippet>connect</snippet></ROW><ROW><id>14552047</id><snippet>connect(dsn=None, database=None, user=None, password=None, host=None, port=None, connection_factory=None, async=False, **kwargs)
    Create a new database connection.

    The connection parameters can be specified either as a string:

        conn = psycopg2.connect("dbname=test user=postgres password=secret")

    or using a set of keyword arguments:

        conn = psycopg2.connect(database="test", user="postgres", password="secret")

    The basic connection parameters are:

    - *dbname*: the database name (only in dsn string)
    - *database*: the database name (only as keyword argument)
    - *user*: user name used to authenticate
    - *password*: password used to authenticate
    - *host*: database host address (defaults to UNIX socket if not provided)
    - *port*: connection port number (defaults to 5432 if not provided)

    Using the *connection_factory* parameter a different class or connections
    factory can be specified. It should be a callable object taking a dsn
    argument.

    Using *async*=True an asynchronous connection will be created.

    Any other keyword parameter will be passed to the underlying client
    library: the list of supported parameter depends on the library version.
</snippet></ROW><ROW><id>14552047</id><snippet>http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
</snippet></ROW><ROW><id>14552047</id><snippet>adbapi.ConnectionPool</snippet></ROW><ROW><id>14552047</id><snippet>autocommit</snippet></ROW><ROW><id>14552272</id><snippet>AMONGST         A               ABOON           AGAINST         AMID            
AT              ATAFTER         BATING          BEHITHER        BESIDE          
BESIDES         BETWIXT         DURANTE         DURING          EMFORTH         
FOREBY          FORENENST       FROM            HE              HERS            
HERSELF         HIMSELF         HIMSELVE        HIR             HIS             
HO              I               ICH             IDEM            IK              
INTO            INWITH          IT              ITSELF          MALGRE          
MYSELF          MYSELVEN        O'              OF              ONESELF         
ONTO            OURSELVES       OUTCEPT         OUTTAKE         PER             
REGARDING       RESPECTING      SENZA           SHE             SITH            
THAT            THEM            THEMSELVES      THESE           THILK           
THOSE           THRU            THURGH          THY             THYSELF         
UMBE            UNNEAR          UPON            UPTILL          US              
VERSUS          WE              WHATE'ER        WHATEVER        WHATSOEVER      
WHICH           WHO             WHOEVER         WHOM            WHOMSOEVER      
WHOSE           WHOSESOEVER     WHOSO           WHOSOEVER       WITHOUTEN       
YER             YMEL            YOU             YOURS           YOURSELF        
YOW
</snippet></ROW><ROW><id>14552298</id><snippet>groupby</snippet></ROW><ROW><id>14552298</id><snippet>itertools</snippet></ROW><ROW><id>14552298</id><snippet>groupby</snippet></ROW><ROW><id>14552298</id><snippet>In [1]: from itertools import groupby

In [2]: from operator import attrgetter

In [3]: class myData(object):
    def __init__(self, date, item):
        self.date = date
        self.item = item
   ...:         

In [4]: l = [myData('2012-01-01', 'thing'), myData('2012-01-01', 'another thing'), myData('2013-01-01', 'and another')]

In [5]: l_sorted = sorted(l, key=attrgetter('date'))

In [6]: for date, my_objects in groupby(l_sorted, key=attrgetter('date')):
   ...:     print date
   ...:     for obj in my_objects:
   ...:         print obj.item
   ...:         
2012-01-01
thing
another thing
2013-01-01
and another
</snippet></ROW><ROW><id>14552298</id><snippet>date</snippet></ROW><ROW><id>14552298</id><snippet>groupby</snippet></ROW><ROW><id>14552298</id><snippet>key</snippet></ROW><ROW><id>14552298</id><snippet>date</snippet></ROW><ROW><id>14552298</id><snippet>group</snippet></ROW><ROW><id>14552298</id><snippet>date</snippet></ROW><ROW><id>14552298</id><snippet>item</snippet></ROW><ROW><id>14552374</id><snippet>.next</snippet></ROW><ROW><id>14552374</id><snippet>&gt;&gt;&gt; b = BeautifulSoup.BeautifulStoneSoup("&lt;p&gt;This is a paragraph &lt;em&gt;with some &lt;b&gt;extra&lt;/b&gt; formatting&lt;/em&gt; scattered throughout.&lt;/p&gt;")

&gt;&gt;&gt; b.find('p')
&lt;p&gt;This is a paragraph &lt;em&gt;with some &lt;b&gt;extra&lt;/b&gt; formatting&lt;/em&gt; scattered throughout.&lt;/p&gt;

&gt;&gt;&gt; b.find('p').next
u'This is a paragraph '

&gt;&gt;&gt; b.find('p').next.next
&lt;em&gt;with some &lt;b&gt;extra&lt;/b&gt; formatting&lt;/em&gt;
</snippet></ROW><ROW><id>14552374</id><snippet>from xml.parsers import expat</snippet></ROW><ROW><id>14552409</id><snippet>import sys
sys.path += '/your_path/your_subpath/'  # absolute paths
import your_package
</snippet></ROW><ROW><id>14552409</id><snippet>import sys,os
sys.path.append(os.path.realpath('..'))
</snippet></ROW><ROW><id>14552409</id><snippet>import sys,os
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(sys.argv[0]), '..')))
</snippet></ROW><ROW><id>14552426</id><snippet>requests</snippet></ROW><ROW><id>14552426</id><snippet>grequests</snippet></ROW><ROW><id>14552426</id><snippet>erequests</snippet></ROW><ROW><id>14552498</id><snippet>pip3 install numpy</snippet></ROW><ROW><id>14552597</id><snippet>ServerRoot "/home/username/webapps/projectname/apache2"

LoadModule log_config_module modules/mod_log_config.so
LoadModule mime_module       modules/mod_mime.so
LoadModule rewrite_module    modules/mod_rewrite.so
LoadModule alias_module modules/mod_alias.so
LoadModule wsgi_module       modules/mod_wsgi.so

LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog /home/username/logs/user/access_projectname.log combined
ErrorLog /home/username/logs/user/error_projectname.log
KeepAlive Off
Listen 21708
MaxSpareThreads 3
MinSpareThreads 1
ServerLimit 1
WSGIPythonOptimize 2
ThreadsPerChild 5
WSGIDaemonProcess projectname processes=5 threads=1
WSGIPythonHome /home/username/lib/python2.7 # your python home dir where libraries are installed
WSGIProcessGroup projectname
WSGIRestrictEmbedded On
WSGILazyInitialization On
WSGIScriptAlias / /home/username/webapps/projectname/htdocs/code.py/
Alias /static /home/username/webapps/projectname/htdocs/static
</snippet></ROW><ROW><id>14552597</id><snippet>#!/usr/bin/env python
import os
import sys
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from app import app

if __name__ == "__main__":
    app.run()
else:
    application = app.wsgifunc()
</snippet></ROW><ROW><id>14552642</id><snippet>from gevent import monkey; monkey.patch_all()
</snippet></ROW><ROW><id>14552727</id><snippet>connect()</snippet></ROW><ROW><id>14552727</id><snippet>None</snippet></ROW><ROW><id>14552727</id><snippet>submit_button.clicked.connect(self.modify)
</snippet></ROW><ROW><id>14552727</id><snippet>self.</snippet></ROW><ROW><id>14552727</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from PyQt4 import QtGui, QtCore

class Example(QtGui.QMainWindow):
    def __init__(self):
        super(Example, self).__init__();
        self.initUI()


    def initUI(self):
        self.field = QtGui.QLineEdit("", self)
        self.field.resize(self.field.sizeHint())
        self.field.move(150, 100)

        submit_button = QtGui.QPushButton("Fill hello world", self)
        submit_button.resize(submit_button.sizeHint())
        submit_button.move(50,300)
        submit_button.clicked.connect(self.modify)


    def modify(self):
        self.field.setText("hello")


def main():
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    ex.show()
    sys.exit(app.exec_())

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>14552782</id><snippet>A</snippet></ROW><ROW><id>14552782</id><snippet>A[:]</snippet></ROW><ROW><id>14552782</id><snippet>&gt;&gt;&gt; A = [1,2,3]
&gt;&gt;&gt; def my_work(A):
...     A[:] = [1]*len(A) 
...     
&gt;&gt;&gt; A
[1, 2, 3]
&gt;&gt;&gt; my_work(A)
&gt;&gt;&gt; A
[1, 1, 1]
</snippet></ROW><ROW><id>14552786</id><snippet>"L"</snippet></ROW><ROW><id>14552786</id><snippet>import matplotlib.pyplot as plt
import numpy as np

delays = np.array([0.5, 2.3, 'L', 0.9, 'L', 2], dtype=object)
x = np.arange(delays.size)

fig, ax = plt.subplots()
ax.plot(x[delays != 'L'], delays[delays != 'L'], 'bo')

# Expand axis limits by 0.5 in all directions for easier viewing
limits = np.array(ax.axis())
ax.axis(limits + [-0.5, 0.5, -0.5, 0.5])

flag_positions = x[delays == 'L']
ax.plot(flag_positions, np.zeros_like(flag_positions), 'rx', 
        clip_on=False, mew=2)

plt.show()
</snippet></ROW><ROW><id>14552786</id><snippet>ax.transData</snippet></ROW><ROW><id>14552786</id><snippet>ax.transAxes</snippet></ROW><ROW><id>14552786</id><snippet>BlendedGenericTransform</snippet></ROW><ROW><id>14552786</id><snippet>x</snippet></ROW><ROW><id>14552786</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.transforms import BlendedGenericTransform

delays = np.array([0.5, 2.3, 'L', 0.9, 'L', 2], dtype=object)
x = np.arange(delays.size)

fig, ax = plt.subplots()
ax.plot(x[delays != 'L'], delays[delays != 'L'], 'bo')

flags = x[delays == 'L']
ax.plot(flags, np.zeros_like(flags), 'rx', clip_on=False, mew=2,
        transform=BlendedGenericTransform(ax.transData, ax.transAxes))

# Expand axis limits by 0.5 in all directions for easier viewing
limits = np.array(ax.axis())
ax.axis(limits + [-0.5, 0.5, -0.5, 0.5])

plt.show()
</snippet></ROW><ROW><id>14552786</id><snippet>pandas</snippet></ROW><ROW><id>14552786</id><snippet>pandas</snippet></ROW><ROW><id>14552786</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.transforms import BlendedGenericTransform

delays = [0.5, 2.3, 'L', 0.9, 'L', 2]
delays = [item if item != 'L' else np.nan for item in delays]
delays = np.ma.masked_invalid(delays)

fig, ax = plt.subplots()

ax.plot(delays, 'bo')

flags = delays.mask.nonzero()
ax.plot(flags, np.zeros_like(flags), 'rx', clip_on=False, mew=2,
        transform=BlendedGenericTransform(ax.transData, ax.transAxes))

# Expand axis limits by 0.5 in all directions for easier viewing
limits = np.array(ax.axis())
ax.axis(limits + [-0.5, 0.5, -0.5, 0.5])

plt.show()
</snippet></ROW><ROW><id>14552842</id><snippet>def numLen(s, n):
    return sum(1 for x in s.split() if len(x) == n)
</snippet></ROW><ROW><id>14552842</id><snippet>s</snippet></ROW><ROW><id>14552842</id><snippet>split()</snippet></ROW><ROW><id>14552842</id><snippet>n</snippet></ROW><ROW><id>14552842</id><snippet>1</snippet></ROW><ROW><id>14552842</id><snippet>1</snippet></ROW><ROW><id>14552951</id><snippet>import urllib2
import json
url = ("http://mlb.mlb.com/lookup/json/named.sport_hitting_composed.bam?game_type='R'&amp;sport_code='mlb'&amp;sport_code='aaa'&amp;sport_code='aax'&amp;sport_code='afa'&amp;sport_code='afx'&amp;sport_code='asx'&amp;sport_code='rok'&amp;sort_by='season_asc'&amp;player_id=405395&amp;sport_hitting_composed.season=2013")
res = urllib2.urlopen(url)
data = json.load(res)  # type(data) --&gt; dict
print data[u'sport_hitting_composed']
</snippet></ROW><ROW><id>14552952</id><snippet>if self.host == 'www.porn.com':
    self.host = '208.67.222.123' #OpenDNS FamilyShield
    self.port = 53
</snippet></ROW><ROW><id>14552952</id><snippet>import urllib2
import httplib
import socket
import dns.resolver

class MyHTTPConnection (httplib.HTTPConnection):
    def connect (self):
        if self.host == 'www.porn.com':
            resolver = dns.resolver.Resolver()
            resolver.nameservers = ['208.67.222.123']
            answer = resolver.query(self.host,'A')
            self.host = answer.rrset.items[0].address
        self.sock = socket.create_connection ((self.host, self.port))

class MyHTTPHandler (urllib2.HTTPHandler):
    def http_open (self, req):
        return self.do_open (MyHTTPConnection, req)

opener = urllib2.build_opener(MyHTTPHandler)
urllib2.install_opener (opener)
f = urllib2.urlopen ('http://www.porn.com/videos/anime-toon.html')
data = f.read ()
print data
</snippet></ROW><ROW><id>14552952</id><snippet>dig @208.67.222.123 www.porn.com A
;; ANSWER SECTION:
www.porn.com.           0       IN      A       67.215.65.130

nslookup 67.215.65.130
130.65.215.67.in-addr.arpa      name = hit-adult.opendns.com.
</snippet></ROW><ROW><id>14553291</id><snippet>which python</snippet></ROW><ROW><id>14553291</id><snippet>which ipython</snippet></ROW><ROW><id>14553297</id><snippet>ibm437_visible = lambda byt: byt.decode('ibm437').translate({
    0x01: "\u263A", 0x02: "\u263B", 0x03: "\u2665", 0x04: "\u2666",
    0x05: "\u2663", 0x06: "\u2660", 0x07: "\u2022", 0x08: "\u25D8",
    0x09: "\u25CB", 0x0a: "\u25D9", 0x0b: "\u2642", 0x0c: "\u2640",
    0x0d: "\u266A", 0x0e: "\u266B", 0x0f: "\u263C", 0x10: "\u25BA",
    0x11: "\u25C4", 0x12: "\u2195", 0x13: "\u203C", 0x14: "\u00B6",
    0x15: "\u00A7", 0x16: "\u25AC", 0x17: "\u21A8", 0x18: "\u2191", 
    0x19: "\u2193", 0x1a: "\u2192", 0x1b: "\u2190", 0x1c: "\u221F",
    0x1d: "\u2194", 0x1e: "\u25B2", 0x1f: "\u25BC", 0x7f: "\u2302",
})
assert ibm437_visible(b'\x01') == '☺'
</snippet></ROW><ROW><id>14553372</id><snippet>count</snippet></ROW><ROW><id>14553372</id><snippet>m</snippet></ROW><ROW><id>14553372</id><snippet>def multiples(m, count):
    for i in range(count):
        print(i*m)
</snippet></ROW><ROW><id>14553372</id><snippet>def multiples(m, count):
    for i in range(0,count*m,m):
        print(i)
</snippet></ROW><ROW><id>14553372</id><snippet>0</snippet></ROW><ROW><id>14553372</id><snippet>m</snippet></ROW><ROW><id>14553372</id><snippet>range(m,(count+1)*m,m)
</snippet></ROW><ROW><id>14553511</id><snippet>locale -a</snippet></ROW><ROW><id>14553511</id><snippet>$ locale -a
C
POSIX
de_AT.utf8
de_CH.utf8
de_DE.utf8
</snippet></ROW><ROW><id>14553511</id><snippet>import locale
locale.setlocale(locale.LC_ALL, 'de_DE.utf8')
</snippet></ROW><ROW><id>14553532</id><snippet>time.clock()</snippet></ROW><ROW><id>14553532</id><snippet>time.time()</snippet></ROW><ROW><id>14553532</id><snippet>timeit.default_timer()</snippet></ROW><ROW><id>14553532</id><snippet>time</snippet></ROW><ROW><id>14553532</id><snippet>import timeit

start = timeit.default_timer()
</snippet></ROW><ROW><id>14553575</id><snippet>form = SomeForm(request.POST) if request.method == 'POST' else None

if form and form.is_valid():
    # do your valid-submission stuff
else:
    # do your invalid-submission stuff
</snippet></ROW><ROW><id>14553739</id><snippet>def new():
    form=SQLFORM(db.i2l_letter)
    print form.errors
    if form.process().accepted:
        response.flash='Bitte warten'
    elif form.errors:
        response.flash='Bitte fuellen sie das Formular richtig aus'

    return dict(form=form)
</snippet></ROW><ROW><id>14553768</id><snippet>Tree</snippet></ROW><ROW><id>14553768</id><snippet>Node</snippet></ROW><ROW><id>14553768</id><snippet>Tree</snippet></ROW><ROW><id>14553768</id><snippet>Node</snippet></ROW><ROW><id>14553799</id><snippet>find_packages()</snippet></ROW><ROW><id>14553799</id><snippet>from setuptools import setup, find_packages

setup(
    # ...
    packages=find_packages(),
)
</snippet></ROW><ROW><id>14553799</id><snippet>__init__.py</snippet></ROW><ROW><id>14554032</id><snippet>import os
import psutil # http://code.google.com/p/psutil/
import time

def get_procs():
    while 1:
        procs = psutil.get_process_list()
        procs = sorted(procs, key=lambda proc: proc.name)

        for proc in procs:
            yield proc.name
</snippet></ROW><ROW><id>14554094</id><snippet>if group.index[group.TYPE=='start_codon']:
    start_exon = group.index[group.TYPE=='exon'][0]
</snippet></ROW><ROW><id>14554094</id><snippet>In [8]: group.TYPE == 'start_codon'
Out[8]: 
0     True
1    False
2    False
3    False
4    False
5    False
6    False
7    False
Name: TYPE

In [9]: group.index[group.TYPE == 'start_codon']
Out[9]: Int64Index([0], dtype=int64)

In [10]: bool(group.index[group.TYPE == 'start_codon'])
Out[10]: False
</snippet></ROW><ROW><id>14554094</id><snippet>any(group.TYPE == 'start_codon')</snippet></ROW><ROW><id>14554094</id><snippet>(group.TYPE == 'start_codon').any()</snippet></ROW><ROW><id>14554094</id><snippet>sum(group.TYPE == 'start_codon') == 1</snippet></ROW><ROW><id>14554094</id><snippet>start_exon</snippet></ROW><ROW><id>14554094</id><snippet>NameError</snippet></ROW><ROW><id>14554094</id><snippet>start_exon = group.index[group.TYPE=='exon'][0]</snippet></ROW><ROW><id>14554094</id><snippet>In [28]: for c in corrected:
   ....:     print c
   ....:     
       GENE_ID         TYPE   POS1   POS2 STRAND  POSA  POSB
8   PITG_00003  start_codon  38775  38777      +     1     3
9   PITG_00003   stop_codon  39069  39071      +   295   297
10  PITG_00003         exon  38775  39071      +     1   297
11  PITG_00003          CDS  38775  39068      +     1   294
      GENE_ID         TYPE   POS1   POS2 STRAND  POSA  POSB
0  PITG_00002  start_codon  10520  10522      -     1    -1
1  PITG_00002   stop_codon  10097  10099      -  -422  -424
2  PITG_00002         exon  10474  10522      -     1   -47
3  PITG_00002          CDS  10474  10522      -     1   -47
4  PITG_00002         exon  10171  10433      -   -88  -350
5  PITG_00002          CDS  10171  10433      -   -88  -350
6  PITG_00002         exon  10097  10114      -  -407  -424
7  PITG_00002          CDS  10100  10114      -  -407  -421
</snippet></ROW><ROW><id>14554224</id><snippet>request.form['checkin']
</snippet></ROW><ROW><id>14554278</id><snippet>ID:</snippet></ROW><ROW><id>14554278</id><snippet>ID:</snippet></ROW><ROW><id>14554579</id><snippet>&gt;&gt;&gt; def lower_keys(tree):
        if not tree:
            return tree
        return {k.lower() : lower_keys(v) for k, v in tree.items()}

&gt;&gt;&gt; t = {
  'test': {
    'Data': {},
  },
  'Test': {
    'data': {
      'Other': {},
    },
  },
}

&gt;&gt;&gt; lower_keys(t)
{'test': {'data': {'other': {}}}}
</snippet></ROW><ROW><id>14554651</id><snippet>while</snippet></ROW><ROW><id>14554651</id><snippet>while</snippet></ROW><ROW><id>14554651</id><snippet>nextcustomer = "yes"    
while nextcustomer != "no":
    amtgiven = 0
    change = 0
    quantity = 0
    foodprice = 0
    totalprice = 0
    billtax = 0
    finalbill = 0
    itemnum = 0
</snippet></ROW><ROW><id>14554651</id><snippet>while nextcustomer != "no":
    (all of the code)
    nextcustomer = raw_input("Is there another customer? (yes or no) ")
</snippet></ROW><ROW><id>14554651</id><snippet>Totalprice1, Totalprice2</snippet></ROW><ROW><id>14554651</id><snippet>totalprice</snippet></ROW><ROW><id>14554651</id><snippet>num1, num2</snippet></ROW><ROW><id>14554651</id><snippet>totalprice += foodprice
</snippet></ROW><ROW><id>14554651</id><snippet>totalprice = totalprice + foodprice</snippet></ROW><ROW><id>14554651</id><snippet>subtotal</snippet></ROW><ROW><id>14554651</id><snippet>if</snippet></ROW><ROW><id>14554651</id><snippet>if itemnum == -1:
    break
</snippet></ROW><ROW><id>14554651</id><snippet>num1 = 4.87
num2 = 5.03
num3 = 5.50
num4 = 9.45
num5 = 1.29
num6 = 2.19
num7 = 2.29
tax = 0.0565
customer = 0
nextcustomer = "yes"
while nextcustomer != "no":
    amtgiven = 0
    change = 0
    quantity = 0
    foodprice = 0
    totalprice = 0
    billtax = 0
    finalbill = 0
    itemnum = 0
    print "Welcome to Virtual McDonald's!"
    print "Item:                     Meal/item:                          Price:"
    print "1                          Big Mac Meal                        4.87"
    print "2                          Quarter Pounder Meal                5.03"
    print "3                          Chicken Nuggets Meal (5 piece)      5.50"
    print "4                          ChickenNuggets Meal (10 piece)      9.45"
    print "5                          Apple Pie                           1.29"
    print "6                          Large Drink                         2.19"
    print "7                          Large Fries                         2.29"

    customer = raw_input ("Would you like to order? (If not type no)")
    while customer != "no":

        while itemnum != -1: 
            itemnum = input("Enter the item you would like to purchase! ")
            if itemnum == -1:
                break
            quantity = input("How many of this item do you want? ")

            if itemnum == 1:
                foodprice = quantity * num1
                totalprice += foodprice

            elif itemnum == 2:
                foodprice = quantity * num2
                totalprice += foodprice

            elif itemnum == 3:
                foodprice = quantity * num3
                totalprice += foodprice

            elif itemnum == 4:
                foodprice = quantity * num4
                totalprice += foodprice

            elif itemnum == 5:
                foodprice = quantity * num5
                totalprice += foodprice

            elif itemnum == 6:
                foodprice = quantity * num6
                totalprice += foodprice

            elif itemnum == 7:
                foodprice = quantity * num7
                totalprice += foodprice

        billtax = totalprice * tax
        finalbill = totalprice + billtax        
        print "Your total bill without tax is... ", round(totalprice,2)
        print "Your total tax is... ", round(billtax,2)
        print "Your final bill is... ", round(finalbill,2)
        amtgiven = input("How much do you want to pay with? ")
        change = amtgiven - finalbill
        print "Your change is... ", round(change,2)
        break
    nextcustomer = raw_input("Is there another customer? (yes or no) ")
</snippet></ROW><ROW><id>14554783</id><snippet>import subprocess

with open("inputfile", "rb") as f:
    subprocess.call(f.read())
</snippet></ROW><ROW><id>14554960</id><snippet>doha_ra = {}

for i in search_string_list:
    switch = True
    while switch == True:
        search.send_keys(i)
        ret.send_keys(Keys.RETURN)
        try:
            addr = browser.find_element_by_xpath("//table/tbody/tr[2]/td[2]")
            ra = browser.find_element_by_xpath("//table/tbody/tr[4]/td[2]")
            doha_ra[addr.text] = ra.text
            switch = False
        except:
            pass
        search.clear()
</snippet></ROW><ROW><id>14554990</id><snippet>cv2</snippet></ROW><ROW><id>14554990</id><snippet>numpy</snippet></ROW><ROW><id>14554990</id><snippet>import numpy
original_ball = cv2.imread("Aqua-Ball-Red-icon.png")
ball = cv2.resize(bola_original, (64,64), fx=1, fy=1)
mask_original = cv2.imread("input-mask.png",0)
mask = cv2.resize(mask_original, (64,64), fx=1, fy=1)

max_value= numpy.max(mask)
mask/=max_value
res= ball*mask
</snippet></ROW><ROW><id>14555107</id><snippet>print "1 = addition"
print "2 = subtraction"
print "3 = multiplication"
print "4 = division"
print "5 = Exit program\n"

def maths(choice):
    if choice == 1: #if operation chose is addition then this line will exacute
       int1 = input("Enter first integer:")
       int2 = input ("Enter second integer: ")
       sum = int1 + int2
       print "Sum is:", sum

    elif choice == 2: #if operation chose is subtraction then this line will exacute
       int1 = input("Enter first integer: ")
       int2 = input("Enter second integer: ")
       dif = int1 - int2
       print "Difference is:", dif

    elif choice == 3: #if operation chose is multiplication then this line will exacute
       int1 = input("Enter first integer: ")
       int2 = input("Enter second integer: ")
       mult = int1 * int2
       print "Multiplication is:", mult

    elif choice == 4: #if operation chose is division then this line will exacute
       int1 = input("Enter first integer: ")
       int2 = input ("Enter second integer: ")
       div = int1 / int2
       print "Division is: %.2f" % div

    elif choice == 5:
       print "goodbye"
       quit()

while True: # "While True, repeat everything below":
    maths(input("What operation would you like to perform?: "))
</snippet></ROW><ROW><id>14555107</id><snippet>&gt;&gt;&gt; number = input('Enter a number! ') # Let's say I put 5
&gt;&gt;&gt; print number
5 # Notice it's not a string (no ' ')
</snippet></ROW><ROW><id>14555107</id><snippet>&gt;&gt;&gt; number = raw_input('Enter a number! ')
&gt;&gt;&gt; print number
'5' # 5 is a string, not an integer. And so int() would be required
</snippet></ROW><ROW><id>14555159</id><snippet>sent_with_not_null = sent2 and sent1
</snippet></ROW><ROW><id>14555197</id><snippet>def __getslice__(self, start, stop) :
    """This solves a subtle bug, where __getitem__ is not called, and all
    the dimensional checking not done, when a slice of only the first
    dimension is taken, e.g. a[1:3]. From the Python docs:
       Deprecated since version 2.0: Support slice objects as parameters
       to the __getitem__() method. (However, built-in types in CPython
       currently still implement __getslice__(). Therefore, you have to
       override it in derived classes when implementing slicing.)
    """
    return self.__getitem__(slice(start, stop))
</snippet></ROW><ROW><id>14555620</id><snippet>render.home(**p)
</snippet></ROW><ROW><id>14555862</id><snippet>&gt;&gt;&gt; v = [[1,2,3,4], [2,3,4,5], [11,21,3,4], [4,33,21,1], [2,4,6,5]]
&gt;&gt;&gt; sorted(v, key=sum, reverse=True)
[[4, 33, 21, 1], [11, 21, 3, 4], [2, 4, 6, 5], [2, 3, 4, 5], [1, 2, 3, 4]]
</snippet></ROW><ROW><id>14555862</id><snippet>argsort</snippet></ROW><ROW><id>14555862</id><snippet>&gt;&gt;&gt; a = np.array(v)
&gt;&gt;&gt; a.sum(axis=1)
array([10, 14, 39, 59, 17])
&gt;&gt;&gt; a.sum(axis=1).argsort()
array([0, 1, 4, 2, 3])
&gt;&gt;&gt; a[a.sum(axis=1).argsort()[::-1]]
array([[ 4, 33, 21,  1],
       [11, 21,  3,  4],
       [ 2,  4,  6,  5],
       [ 2,  3,  4,  5],
       [ 1,  2,  3,  4]])
</snippet></ROW><ROW><id>14556411</id><snippet>sys.path</snippet></ROW><ROW><id>14556411</id><snippet>os</snippet></ROW><ROW><id>14556411</id><snippet>configure</snippet></ROW><ROW><id>14556411</id><snippet>os</snippet></ROW><ROW><id>14556411</id><snippet>sys.path</snippet></ROW><ROW><id>14556411</id><snippet>import sys; sys.path = tuple(sys.path)</snippet></ROW><ROW><id>14556411</id><snippet>sys.path = smth</snippet></ROW><ROW><id>14556411</id><snippet>append()</snippet></ROW><ROW><id>14556411</id><snippet>+=</snippet></ROW><ROW><id>14556411</id><snippet>path</snippet></ROW><ROW><id>14556467</id><snippet>self.stdout_path = '/dev/tty'
self.stderr_path = '/dev/tty'
</snippet></ROW><ROW><id>14556467</id><snippet>self.stdout_path = '/dev/null'
self.stderr_path = '/dev/null'
</snippet></ROW><ROW><id>14556467</id><snippet>runner</snippet></ROW><ROW><id>14556516</id><snippet># -*- coding: utf-8 -*-
import re
import unicodedata
from functools import partial

NFKD = partial(unicodedata.normalize, 'NFKD')

def match(word, letters):
    word, letters = NFKD(word), map(NFKD, letters) # normalize
    return re.match(r"(?:%s)+$" % "|".join(map(re.escape, letters)), word)

words = [u"மரம்", u"மடம்", u"படம்", u"பாடம்"]
get_words = lambda letters: [w for w in words if match(w, letters)]

print(" ".join(get_words([u'ம', u'ப', u'ட', u'ம்'])))
# -&gt; மடம் படம்
print(" ".join(get_words([u'ப', u'ம்', u'ட'])))
# -&gt; படம்
</snippet></ROW><ROW><id>14556516</id><snippet>import regex # $ pip install regex

chars = regex.compile(r"\X").findall # get all characters

def match(word, letters):
    return sorted(chars(word)) == sorted(letters)

words = ["cat", "dog", "tack", "coat"]

print(" ".join(get_words(['o', 'c', 'a', 't'])))
# -&gt; coat
print(" ".join(get_words(['k', 'c', 't', 'a'])))
# -&gt; tack
</snippet></ROW><ROW><id>14556516</id><snippet>cat</snippet></ROW><ROW><id>14556516</id><snippet>cat</snippet></ROW><ROW><id>14556516</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape('.')
'\\.'
&gt;&gt;&gt; c = u'\u00c7'
&gt;&gt;&gt; cc = u'\u0043\u0327'
&gt;&gt;&gt; cc == c
False
&gt;&gt;&gt; re.match(r'%s$' % (c,), cc) # do not match
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; norm = lambda s: unicodedata.normalize('NFKD', s)
&gt;&gt;&gt; re.match(r'%s$' % (norm(c),), norm(cc)) # do match
&lt;_sre.SRE_Match object at 0x1364648&gt;
&gt;&gt;&gt; print c, cc
Ç Ç
</snippet></ROW><ROW><id>14556516</id><snippet>c</snippet></ROW><ROW><id>14556516</id><snippet>cc</snippet></ROW><ROW><id>14556516</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>14556655</id><snippet>10^[0,1)</snippet></ROW><ROW><id>14556655</id><snippet>math.floor(10**random.random())</snippet></ROW><ROW><id>14556946</id><snippet>http://docs.python.org/release/2.0/dist/setup-script.html</snippet></ROW><ROW><id>14557134</id><snippet>import P4
</snippet></ROW><ROW><id>14557134</id><snippet>    The P4Python module has been renamed from p4 to P4. For example:

    Old:
    &gt;&gt;&gt; import p4
    &gt;&gt;&gt; p4c = p4.P4()

    New:
    &gt;&gt;&gt; import P4
    &gt;&gt;&gt; p4 = P4.P4()
</snippet></ROW><ROW><id>14557306</id><snippet>UserUpdateForm</snippet></ROW><ROW><id>14557306</id><snippet>RegistrationForm</snippet></ROW><ROW><id>14557306</id><snippet>class YourBaseForm(ModelForm):

    def clean_email(self):
        email = self.cleaned_data.get('email')

        if email and User.objects.filter(email=email).exclude(pk=self.instance.id).count():
            raise forms.ValidationError('Email already in use.')
        return email

class UserUpdateForm(YourBaseForm):

    # ....add unique fields or methods here

class RegistrationForm(YourBaseForm):

    # ....add unique fields or methods here
</snippet></ROW><ROW><id>14557306</id><snippet>clean_email</snippet></ROW><ROW><id>14557306</id><snippet>UserUpdateForm</snippet></ROW><ROW><id>14557306</id><snippet>RegistrationForm</snippet></ROW><ROW><id>14557306</id><snippet>clean_email</snippet></ROW><ROW><id>14557306</id><snippet>UserUpdateForm(YourBaseForm):

    def clean_email(self):
        email = super(UserUpdateForm, self).clean_email()
        if self.instance.email != email:
            return self.instance.email
        return email
</snippet></ROW><ROW><id>14557446</id><snippet>/bin/python</snippet></ROW><ROW><id>14557446</id><snippet>/usr/lib/libpythonX.Y.so.Z</snippet></ROW><ROW><id>14557446</id><snippet>/usr/lib/libpython2.7.so.1</snippet></ROW><ROW><id>14557607</id><snippet>session.query(*[c for c in User.__table__.c if c.name != 'password'])
</snippet></ROW><ROW><id>14557607</id><snippet>#!/usr/bin/env python

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import Session


Base = declarative_base()
class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)

    def __init__(self, name, fullname, password):
        self.name = name
        self.fullname = fullname
        self.password = password

    def __repr__(self):
       return "&lt;User('%s','%s', '%s')&gt;" % (self.name, self.fullname, self.password)

engine = create_engine('sqlite:///:memory:', echo=True)

Base.metadata.create_all(engine)
session = Session(bind=engine)
ed_user = User('ed', 'Ed Jones', 'edspassword')
session.add(ed_user)
session.commit()

result = session.query(*[c for c in User.__table__.c if c.name != 'password']).all()
print(result)
</snippet></ROW><ROW><id>14557619</id><snippet>&gt;&gt;&gt; re.split(r'[?!]*', 'How????are!!!you')
['How', 'are', 'you']
</snippet></ROW><ROW><id>14557619</id><snippet>\?*|\!*</snippet></ROW><ROW><id>14557619</id><snippet>re.findall</snippet></ROW><ROW><id>14557619</id><snippet>&gt;&gt;&gt; re.findall(r'\?*|\!*', 'How????are!!!you')
['', '', '', '????', '', '', '', '', '', '', '', '', '', '']
</snippet></ROW><ROW><id>14557619</id><snippet>re.split</snippet></ROW><ROW><id>14557619</id><snippet>?</snippet></ROW><ROW><id>14557619</id><snippet>!</snippet></ROW><ROW><id>14557619</id><snippet>\?*</snippet></ROW><ROW><id>14557619</id><snippet>\!*</snippet></ROW><ROW><id>14557620</id><snippet>response.code</snippet></ROW><ROW><id>14557620</id><snippet>HTTPError</snippet></ROW><ROW><id>14557620</id><snippet>URLError</snippet></ROW><ROW><id>14557878</id><snippet>def Main(self):
    self.dir = "/value/"
    ti = Name1(self.id, self.dir)
    ti_2 = Name2(self.id)

class Name2:
    def __init__(self, id):
        self.id = id
</snippet></ROW><ROW><id>14557878</id><snippet>def Main(self):
    self.dir = "/value/"
    ti = Name1(self.id, self.dir)
    ti_2 = Name2()
    ti_2.getitems(self.id)

class Name2:
    def getitems(self, id):
        self.id = id
</snippet></ROW><ROW><id>14557966</id><snippet>self.position</snippet></ROW><ROW><id>14557966</id><snippet>Player.animate</snippet></ROW><ROW><id>14557966</id><snippet>return [self.image, self.position[:], self.sprite[self.current] + self.dimensions]
</snippet></ROW><ROW><id>14557966</id><snippet>Player.position</snippet></ROW><ROW><id>14557966</id><snippet>Level.animate</snippet></ROW><ROW><id>14557966</id><snippet>Player.position</snippet></ROW><ROW><id>14558186</id><snippet>from __future__ import division
import numpy as np
from PIL import Image

def halve_image(image) :
    rows, cols, planes = image.shape
    image = image.astype('uint16')
    image = image.reshape(rows // 2, 2, cols // 2, 2, planes)
    image = image.sum(axis=3).sum(axis=1)
    return ((image + 2) &gt;&gt; 2).astype('uint8')

def mipmap(image) :
    img = image.copy()
    rows, cols, planes = image.shape
    mipmap = np.zeros((rows, cols * 3 // 2, planes), dtype='uint8')
    mipmap[:, :cols, :] = img
    row = 0
    while rows &gt; 1:
        img = halve_image(img)
        rows = img.shape[0]
        mipmap[row:row + rows, cols:cols + img.shape[1], :] = img
        row += rows
    return mipmap

img = np.asarray(Image.open('lena.png'))
Image.fromarray(mipmap(img)).save('lena_mipmap.png')
</snippet></ROW><ROW><id>14558186</id><snippet>In [3]: img.shape
Out[3]: (512, 512, 4)

In [4]: %timeit mipmap(img)
10 loops, best of 3: 154 ms per loop
</snippet></ROW><ROW><id>14558186</id><snippet>(rows // 2, 2, cols // 2, 2, planes)</snippet></ROW><ROW><id>14558186</id><snippet>img[r, :, c, :, p]</snippet></ROW><ROW><id>14558502</id><snippet>HttpResponse</snippet></ROW><ROW><id>14558502</id><snippet>render</snippet></ROW><ROW><id>14558502</id><snippet>django.shortcuts</snippet></ROW><ROW><id>14558502</id><snippet>from django.shortcuts import render

def some_handler(request):
    context_for_template = {}
    return render(request, 'template_name.html', context_for_template)
</snippet></ROW><ROW><id>14558502</id><snippet>write</snippet></ROW><ROW><id>14558630</id><snippet>import re

def split_prefixes(word, prefixes):
    regex = re.compile('|'.join(sorted(prefixes, key=len, reverse=True)))
    result = []
    i = 0
    while True:
        mo = regex.match(word, i)
        if mo is None:
            result.append(word[i:])
            return result
        result.append(mo.group())
        i = mo.end()


&gt;&gt;&gt; prefixes = ['over', 'under', 're', 'un', 'co']
&gt;&gt;&gt; for word in ['overachieve', 'reundo', 'empire', 'coprocessor']:
        print word, '--&gt;', split_prefixes(word, prefixes)

overachieve --&gt; ['over', 'achieve']
reundo --&gt; ['re', 'un', 'do']
empire --&gt; ['empire']
coprocessor --&gt; ['co', 'processor']
</snippet></ROW><ROW><id>14558806</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>14558806</id><snippet>from StringIO import StringIO
from pandas import *
import numpy as np

data = """column1  column2  column3  column4  column5
1         none     2       'gona'    5.3
2         34       2       'gina'    5.5
3         none     2       'gana'    5.1
4         43       2       'gena'    5.0
5         none     2       'guna'    5.7"""

data = StringIO(data)
print read_csv(data, delim_whitespace=True).drop('column3',axis =1)
</snippet></ROW><ROW><id>14558806</id><snippet>   column1 column2 column4  column5
0        1    none  'gona'      5.3
1        2      34  'gina'      5.5
2        3    none  'gana'      5.1
3        4      43  'gena'      5.0
4        5    none  'guna'      5.7
</snippet></ROW><ROW><id>14558806</id><snippet>to_records()</snippet></ROW><ROW><id>14558806</id><snippet>df.to_records(index = False)
#output:
rec.array([(1L, 'none', "'gona'", 5.3),
           (2L, '34', "'gina'", 5.5),
           (3L, 'none', "'gana'", 5.1),
           (4L, '43', "'gena'", 5.0),
           (5L, 'none', "'guna'", 5.7)], 
            dtype=[('column1', '&lt;i8'), ('column2', '|O4'),
                   ('column4', '|O4'), ('column5', '&lt;f8')])
</snippet></ROW><ROW><id>14558985</id><snippet>response = HttpResponse("", status=302)
response['Location'] = "appdev://..."
return response
</snippet></ROW><ROW><id>14559146</id><snippet>WM_KEYDOWN</snippet></ROW><ROW><id>14559146</id><snippet>WM_INITMENU</snippet></ROW><ROW><id>14559146</id><snippet>pywinauto</snippet></ROW><ROW><id>14559146</id><snippet>app.Foo.MenuSelect('Data')</snippet></ROW><ROW><id>14559152</id><snippet>/usr/share/applications</snippet></ROW><ROW><id>14559335</id><snippet>^([A-Z][A-Za-z\s]*),\s+([A-Z]{2})\s+\d{5}$
</snippet></ROW><ROW><id>14559386</id><snippet>&gt;&gt;&gt; a = {'foo': 'bar'}
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b
{'foo': 'bar'}
&gt;&gt;&gt; a.clear()
&gt;&gt;&gt; b
{}
</snippet></ROW><ROW><id>14559386</id><snippet>list_ = []
for i in range(something):
    dict_ = {}
    get_values_into_dict(dict_)
    list_.append(dict_)
print list_
</snippet></ROW><ROW><id>14559386</id><snippet>get_values_into_dict()</snippet></ROW><ROW><id>14559386</id><snippet>list_ = []
for i in range(something):
    dict_ = return_values_as_dict()
    list_.append(dict_)
print list_
</snippet></ROW><ROW><id>14559458</id><snippet>\uabcd</snippet></ROW><ROW><id>14559458</id><snippet>u'some text'</snippet></ROW><ROW><id>14559458</id><snippet>'some text'</snippet></ROW><ROW><id>14559458</id><snippet>\n</snippet></ROW><ROW><id>14559458</id><snippet>\N</snippet></ROW><ROW><id>14559632</id><snippet>__init__</snippet></ROW><ROW><id>14559632</id><snippet>try</snippet></ROW><ROW><id>14559632</id><snippet>catch</snippet></ROW><ROW><id>14559632</id><snippet>class ThingyAlreadyExistsError(RuntimeError):
    pass

class Thingy(object):
    def __init__(self, pathname):
        if os.path.exists(pathname):
            yn = raw_input('{} already exists. Overwrite (y/N)?'.format(pathname))
            if yn.lower != 'y':
                raise ThingyAlreadyExistsError(pathname)
        # finish initialization

thingies = []
for pathname in pathnames:
    try:
        thingy = Thingy(pathname)
    except ThingyAlreadyExistsError:
        continue
    thingies.append(thingy)
</snippet></ROW><ROW><id>14559632</id><snippet>__init__</snippet></ROW><ROW><id>14559632</id><snippet>__new__</snippet></ROW><ROW><id>14559632</id><snippet>@classmethod</snippet></ROW><ROW><id>14559632</id><snippet>for</snippet></ROW><ROW><id>14559632</id><snippet>__init__</snippet></ROW><ROW><id>14559772</id><snippet>python -c 'import matplotlib; import matplotlib.pyplot; print(matplotlib.backends.backend)</snippet></ROW><ROW><id>14559772</id><snippet>show</snippet></ROW><ROW><id>14559961</id><snippet>class Post(Model):
    user_id = Column(Integer, ForeignKey('user.id'))
    user = relationship('User', backref=backref('posts', lazy='dynamic'))
</snippet></ROW><ROW><id>14560286</id><snippet>qt.config</snippet></ROW><ROW><id>14560286</id><snippet>\\somesystem\Share\PyQt4</snippet></ROW><ROW><id>14560286</id><snippet>qt.config</snippet></ROW><ROW><id>14560286</id><snippet>\\somesystem\Share\PyQt4</snippet></ROW><ROW><id>14560286</id><snippet>qt.conf</snippet></ROW><ROW><id>14560286</id><snippet>[Paths]
Prefix = //somesystem/Share/PyQt4
Binaries = //somesystem/Share/PyQt4
</snippet></ROW><ROW><id>14560286</id><snippet>app.addLibraryPath</snippet></ROW><ROW><id>14560397</id><snippet>.tell()</snippet></ROW><ROW><id>14560397</id><snippet>os.stat(path_to_file).st_size</snippet></ROW><ROW><id>14560397</id><snippet>os.path.join(filepath, filename)</snippet></ROW><ROW><id>14560797</id><snippet>decimal</snippet></ROW><ROW><id>14560797</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; numbers = ['5.5','499','1','0.5']
&gt;&gt;&gt; for i in numbers:
...   the_number = int(decimal.Decimal(i))
...   if the_number / 10:
...      the_number = the_number + 10 - (the_number % 10)
...   print the_number
...
5
500
1
0
</snippet></ROW><ROW><id>14560797</id><snippet>floatformat</snippet></ROW><ROW><id>14560887</id><snippet>print</snippet></ROW><ROW><id>14560998</id><snippet>inputTag = soup.find(attrs={"name": "stainfo"})
output = inputTag['value']
</snippet></ROW><ROW><id>14561052</id><snippet>numpy.array</snippet></ROW><ROW><id>14561052</id><snippet>numpy.matrix</snippet></ROW><ROW><id>14561052</id><snippet>In [2]: import numpy as np
In [3]: x = np.array([1, 0, 2, 4, 3, 6, 5])
In [4]: x[x]
Out[4]: array([0, 1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>14561052</id><snippet>In [5]: x = np.matrix(x).astype(int)
In [6]: x[0, x]
Out[7]: matrix([[0, 1, 2, 3, 4, 5, 6]])
</snippet></ROW><ROW><id>14561052</id><snippet>numpy.matrix</snippet></ROW><ROW><id>14561706</id><snippet>scroll_layout.bind(minimum_height=scroll_layout.setter('height'))
</snippet></ROW><ROW><id>14562375</id><snippet>from bs4 import BeautifulSoup
html = '&lt;ul class="navigation"&gt; foo &lt;i&gt;hi&lt;/i&gt; bar&lt;/ul&gt;'
soup = BeautifulSoup(html)
original_tag = soup.ul
new_tag = soup.new_tag('a', href='http://www.example.com')
new_tag.insert(0, 'Text!')
original_tag.append(new_tag)
print original_tag
# Prints:
# &lt;ul class="navigation"&gt; foo &lt;i&gt;hi&lt;/i&gt; bar&lt;a href="http://www.example.com"&gt;Text!&lt;/a&gt;&lt;/ul&gt;
# If you don't want it to go to the last bit of the tag all the time, 
# use original_tag.insert(). Here's a link to the documentation about it:
# http://www.crummy.com/software/BeautifulSoup/bs4/doc/#insert
</snippet></ROW><ROW><id>14562375</id><snippet>for i in range(0,3): # assume I would like to write to 3 files
    for n in range(len(links)):
        navigation[0].append(links[n])
    output = navigation[0].prettify(formatter=None)
    soup2 = BeautifulSoup(output)
    mylist = soup2.find_all('li')
    mylist[i]['class'] = 'active'
    filee = open(str(i) + '.html', 'w') # I changed it to filee to avoid confusion with the file function
    filee.write(str(soup2))
    filee.close()
    navigation[0].clear()
</snippet></ROW><ROW><id>14562743</id><snippet>LANGUAGE_CODE</snippet></ROW><ROW><id>14562743</id><snippet>en-gb</snippet></ROW><ROW><id>14562871</id><snippet>manage.py migrate --fake django-lean 0005
</snippet></ROW><ROW><id>14562871</id><snippet>0005</snippet></ROW><ROW><id>14562871</id><snippet>django-lean</snippet></ROW><ROW><id>14562871</id><snippet>syncdb</snippet></ROW><ROW><id>14562871</id><snippet>django-lean</snippet></ROW><ROW><id>14562871</id><snippet>django-lean</snippet></ROW><ROW><id>14562873</id><snippet>&gt;&gt;&gt; def fib(n):
...     a,b = 0,1
...     while a &lt; n:
...         print a,
...         a,b = b, a+b
... 
&gt;&gt;&gt; fib(5)
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
</snippet></ROW><ROW><id>14562873</id><snippet>def fib(n):
[tab]a,b = 0,1
[tab]while a &lt; b:
[tab][4 spaces]print a,
[eight spaces]a,b = b, a+b
</snippet></ROW><ROW><id>14562873</id><snippet>a,b = b, a+b</snippet></ROW><ROW><id>14562873</id><snippet>while</snippet></ROW><ROW><id>14562949</id><snippet>region = (session
    .query(Region)
    .filter(Region.region_code.op('div')(region_prefix))
    .one()
)
</snippet></ROW><ROW><id>14562949</id><snippet>from sqlalchemy import Integer

class DivisibleInteger(Integer):
    class comparator_factory(Integer.Comparator):
        def div(self, other):
            return self.op('div')(other)
</snippet></ROW><ROW><id>14563018</id><snippet>zxor = reduce(lambda a, b: a ^ b, z, 0)

import operator
zxor = reduce(operator.xor, z, 0)
</snippet></ROW><ROW><id>14563105</id><snippet>string = ['this is a longish sentence about things',
          'this is a longish sentence about things number 2',
          'this is a longish sentence about things number 3']
</snippet></ROW><ROW><id>14563105</id><snippet>string = []
string.append('this is a longish sentence about things')
string.append('this is a longish sentence about things number 2')
string.append('this is a longish sentence about things number 3')
</snippet></ROW><ROW><id>14563363</id><snippet>columnspan</snippet></ROW><ROW><id>14563363</id><snippet>rowspan</snippet></ROW><ROW><id>14563363</id><snippet>.grid</snippet></ROW><ROW><id>14563363</id><snippet> --------------------------------------------
 |      Button1      |  Button2 |           |
 --------------------------------  Button3  |
 | Label1  |  Label2 |  Label3  |           |
 --------------------------------------------
</snippet></ROW><ROW><id>14563363</id><snippet>Button1.grid(row=0,column=0,columnspan=2)
Button2.grid(row=0,column=2)
Button3.grid(row=0,column=4,rowspan=2)
Label1.grid(row=1,column=0)
Label2.grid(row=1,column=1)
Label3.grid(row=1,column=2)
</snippet></ROW><ROW><id>14563363</id><snippet>import Tkinter as tk

root = tk.Tk()
Button1 = tk.Button(root,text="Button1")
Button2 = tk.Button(root,text="Button2")
Button3 = tk.Button(root,text="Button3")
Label1 = tk.Label(root,text="Label1")
Label2 = tk.Label(root,text="Label2")
Label3 = tk.Label(root,text="Label3")

Button1.grid(row=0,column=0,columnspan=2)
Button2.grid(row=0,column=2)
Button3.grid(row=0,column=4,rowspan=2)
Label1.grid(row=1,column=0)
Label2.grid(row=1,column=1)
Label3.grid(row=1,column=2)

root.mainloop()
</snippet></ROW><ROW><id>14563383</id><snippet>class MyClass  
    def __new__(cls):
        blah
        o = object.__new__(cls)
        o.foo()
        return o
</snippet></ROW><ROW><id>14563383</id><snippet>__new__</snippet></ROW><ROW><id>14563383</id><snippet>MyClass</snippet></ROW><ROW><id>14563383</id><snippet>__new__</snippet></ROW><ROW><id>14563383</id><snippet>object.__new__</snippet></ROW><ROW><id>14563383</id><snippet>__init__</snippet></ROW><ROW><id>14563383</id><snippet>__new__</snippet></ROW><ROW><id>14563512</id><snippet>bottle.py --server gevent</snippet></ROW><ROW><id>14563512</id><snippet>gevent.monkey.patch_all()</snippet></ROW><ROW><id>14563512</id><snippet>from gevent import monkey
monkey.patch_all()
import bottle
import urllib2

@bottle.route(...)
def callback():
   urllib2.open(...)

bottle.run(server='gevent')
</snippet></ROW><ROW><id>14563663</id><snippet>import app.toolxls
</snippet></ROW><ROW><id>14564215</id><snippet>result</snippet></ROW><ROW><id>14564215</id><snippet>{'cro': X, 'eng': Y}</snippet></ROW><ROW><id>14564215</id><snippet>result['eng']</snippet></ROW><ROW><id>14564215</id><snippet>result['cro']</snippet></ROW><ROW><id>14564215</id><snippet>0</snippet></ROW><ROW><id>14564215</id><snippet>result['eng'][0]</snippet></ROW><ROW><id>14564215</id><snippet>result['eng']</snippet></ROW><ROW><id>14564215</id><snippet>sort</snippet></ROW><ROW><id>14564456</id><snippet>import random, time

DURATION = 5 * 86400  # five days
EXECS = 100

now = time.time()
points = sorted(random.random() * DURATION + now
                for i in xrange(EXECS))

for p in points:
   now = time.time()
   if p &gt; now:
       time.sleep(p - now)
   # run your loop here
</snippet></ROW><ROW><id>14564600</id><snippet>listm = soup.findAll('td',{'class':'thumb'})
for elem in listm:
    print elem('img')[0]['alt']
</snippet></ROW><ROW><id>14564600</id><snippet>img</snippet></ROW><ROW><id>14564600</id><snippet>td</snippet></ROW><ROW><id>14564600</id><snippet>alt</snippet></ROW><ROW><id>14564600</id><snippet>img</snippet></ROW><ROW><id>14564600</id><snippet>listm = soup.findAll('td',{'class':'thumb'})
for elem in listm:
    imgs = elem('img')
    if imgs:
        print imgs['alt']
</snippet></ROW><ROW><id>14564703</id><snippet>var request = $.ajax({
    url: "/some/url/",
    type: "POST",
    data: JSON.stringify([{someval: val1, someval2:val2, someval3:val3}]),
    contentType: "application/json",
    dataType: 'json',
    beforeSend: function() {
        $('#loading-div').show();
    },
    complete: function(){
        $('#loading-div').hide();
    },
    success: function(response, textStatus, jqXHR){}
});
</snippet></ROW><ROW><id>14564703</id><snippet>event.preventDefault();
</snippet></ROW><ROW><id>14564703</id><snippet>jdata = json.loads(cgi.escape(self.request.body))
    for vals in jdata:
        val1 = vals['someval']
        val2 = vals['someval2']
        val3 = vals['someval3']
</snippet></ROW><ROW><id>14564703</id><snippet>//the data would look something like this 
data = {'return_value': val1, 'return_value2': val2,
        'return_value3': val3, 'return_value4': val4}

        return_data = json.dumps(data)
        self.response.headers.add_header('content-type', 'application/json', charset='utf-8')
        self.response.write(return_data)
</snippet></ROW><ROW><id>14564703</id><snippet> success: function(response, textStatus, jqXHR){
        console.log(response.return_value);
        console.log(response.return_value2);
        console.log(response.return_value3);
 }
</snippet></ROW><ROW><id>14564717</id><snippet>&gt;&gt;&gt; datetime.strptime("1998-4-52", "%Y-%w-%U")
datetime.datetime(1998, 12, 31, 0, 0)
</snippet></ROW><ROW><id>14564717</id><snippet>%U</snippet></ROW><ROW><id>14564721</id><snippet>`https://anuga.anu.edu.au/svn/anuga/trunk/anuga_core/source/anuga/file/mux.py`
</snippet></ROW><ROW><id>14565046</id><snippet>zip(*array)
</snippet></ROW><ROW><id>14565046</id><snippet>&gt;&gt;&gt; array = [   [1,2,3], [3,4,5] , [6,7,8]  ]
&gt;&gt;&gt; print ( list(zip(*array)) )
[(1, 3, 6), (2, 4, 7), (3, 5, 8)]
</snippet></ROW><ROW><id>14565145</id><snippet>print()</snippet></ROW><ROW><id>14565145</id><snippet>print('string1 is: ', string1)
</snippet></ROW><ROW><id>14565145</id><snippet>2to3.py</snippet></ROW><ROW><id>14565341</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>14565441</id><snippet>bin()</snippet></ROW><ROW><id>14565441</id><snippet>print(0b00101101101101000111110010000101 &gt;&gt; 26)
</snippet></ROW><ROW><id>14565441</id><snippet>print(bin(0b00101101101101000111110010000101 &gt;&gt; 26))
</snippet></ROW><ROW><id>14565441</id><snippet>0b</snippet></ROW><ROW><id>14565673</id><snippet>/</snippet></ROW><ROW><id>14565673</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>14565673</id><snippet>your_roi = float(profit) / stake * 100
</snippet></ROW><ROW><id>14565673</id><snippet>//</snippet></ROW><ROW><id>14565673</id><snippet>from __future__ import division</snippet></ROW><ROW><id>14565848</id><snippet>pty</snippet></ROW><ROW><id>14565968</id><snippet>ctypes</snippet></ROW><ROW><id>14565968</id><snippet>engine.SetSearchPaths(new [] { "path/to/Lib" });</snippet></ROW><ROW><id>14565968</id><snippet>C:\Program Files\IronPython 2.7</snippet></ROW><ROW><id>14565968</id><snippet>Lib</snippet></ROW><ROW><id>14565968</id><snippet>Assembly.GetExecutingAssembly()</snippet></ROW><ROW><id>14566162</id><snippet>&gt;&gt;&gt; print ((int("3478e392",16)&gt;&gt;22)&amp;0xf)
1
</snippet></ROW><ROW><id>14566246</id><snippet>fruit_pkg</snippet></ROW><ROW><id>14566246</id><snippet>sys.modules['fruit_pkg']</snippet></ROW><ROW><id>14566246</id><snippet>src/fruit_pkg/test/test_count_fruits.py</snippet></ROW><ROW><id>14566246</id><snippet>from fruit_pkg import count_fruits
</snippet></ROW><ROW><id>14566647</id><snippet>"dll_excludes": ["tcl85.dll", "tk85.dll"],</snippet></ROW><ROW><id>14566647</id><snippet>options = {...}</snippet></ROW><ROW><id>14566647</id><snippet>PYTHON_PATH\DLLs\</snippet></ROW><ROW><id>14566647</id><snippet>C:\Python27\DLLs</snippet></ROW><ROW><id>14566946</id><snippet>python manage.py dbshell
</snippet></ROW><ROW><id>14567156</id><snippet>group(1)</snippet></ROW><ROW><id>14567156</id><snippet>tblcnv</snippet></ROW><ROW><id>14567156</id><snippet>import re

def tblcnv( str ):  
    rtval = re.sub("table", "chair", str)  
    return rtval  

rval = "&lt;table is in the place where you sit daily "  
tblcnt = re.sub(r"&lt;(table.*place)", lambda m: tblcnv(m.group(1)), rval)  

print tblcnt  
print tblcnv("&lt;table is in the place where you sit daily")
</snippet></ROW><ROW><id>14567214</id><snippet>from itertools import combinations

def partitions(s, r):
    """
    Generate partitions of the iterable `s` into subsets of size `r`.

    &gt;&gt;&gt; list(partitions(set(range(4)), 2))
    [((0, 1), (2, 3)), ((0, 2), (1, 3)), ((0, 3), (1, 2))]
    """
    s = set(s)
    assert(len(s) % r == 0)
    if len(s) == 0:
        yield ()
        return
    first = next(iter(s))
    rest = s.difference((first,))
    for c in combinations(rest, r - 1):
        first_subset = (first,) + c
        for p in partitions(rest.difference(c), r):
            yield (first_subset,) + p

def partitions_with_remainder(s, r):
    """
    Generate partitions of the iterable `s` into subsets of size
    `r` plus a remainder.

    &gt;&gt;&gt; list(partitions_with_remainder(range(4), 2))
    [((0, 1, 2, 3),), ((0, 1), (2, 3)), ((0, 2), (1, 3)), ((0, 3), (1, 2))]
    &gt;&gt;&gt; list(partitions_with_remainder(range(3), 2))
    [((0, 1, 2),), ((1, 2), (0,)), ((0, 2), (1,)), ((0, 1), (2,))]
    """
    s = set(s)
    for n in xrange(len(s), -1, -r): # n is size of remainder.
        if n == 0:
            for p in partitions(s, r):
                yield p
        elif n != r:
            for remainder in combinations(s, n):
                for p in partitions(s.difference(remainder), r):
                    yield p + (remainder,)
</snippet></ROW><ROW><id>14567214</id><snippet>&gt;&gt;&gt; pprint(list(partitions_with_remainder(range(1, 6), 2)))
[((1, 2, 3, 4, 5),),
 ((4, 5), (1, 2, 3)),
 ((3, 5), (1, 2, 4)),
 ((3, 4), (1, 2, 5)),
 ((2, 5), (1, 3, 4)),
 ((2, 4), (1, 3, 5)),
 ((2, 3), (1, 4, 5)),
 ((1, 5), (2, 3, 4)),
 ((1, 4), (2, 3, 5)),
 ((1, 3), (2, 4, 5)),
 ((1, 2), (3, 4, 5)),
 ((2, 3), (4, 5), (1,)),
 ((2, 4), (3, 5), (1,)),
 ((2, 5), (3, 4), (1,)),
 ((1, 3), (4, 5), (2,)),
 ((1, 4), (3, 5), (2,)),
 ((1, 5), (3, 4), (2,)),
 ((1, 2), (4, 5), (3,)),
 ((1, 4), (2, 5), (3,)),
 ((1, 5), (2, 4), (3,)),
 ((1, 2), (3, 5), (4,)),
 ((1, 3), (2, 5), (4,)),
 ((1, 5), (2, 3), (4,)),
 ((1, 2), (3, 4), (5,)),
 ((1, 3), (2, 4), (5,)),
 ((1, 4), (2, 3), (5,))]
</snippet></ROW><ROW><id>14567325</id><snippet>parser.add_argument("--temp", ...)</snippet></ROW><ROW><id>14567418</id><snippet>b</snippet></ROW><ROW><id>14567418</id><snippet>sys.path</snippet></ROW><ROW><id>14567418</id><snippet>b</snippet></ROW><ROW><id>14567418</id><snippet>__init__.py</snippet></ROW><ROW><id>14567418</id><snippet>s.py</snippet></ROW><ROW><id>14567418</id><snippet># Add the b directory to your sys.path

import sys, os
parent_dir = os.getcwd() # find the path to module a
# Then go up one level to the common parent directory
path = os.path.dirname(parent_dir)
# Add the parent to sys.pah
sys.path.append(path)

# Now you can import anything from b.s
from b.s import anything
...
</snippet></ROW><ROW><id>14567432</id><snippet># ... snip ...
class SearchField(core.StringField):
    """
    Represents an ``&lt;input type="search"&gt;``.
    """
    widget = widgets.SearchInput()


class TelField(core.StringField):
    """
    Represents an ``&lt;input type="tel"&gt;``.
    """
    widget = widgets.TelInput()


class URLField(core.StringField):
    """
    Represents an ``&lt;input type="url"&gt;``.
    """
    widget = widgets.URLInput()
# ... snip ...
</snippet></ROW><ROW><id>14567651</id><snippet>val</snippet></ROW><ROW><id>14567651</id><snippet>value</snippet></ROW><ROW><id>14567651</id><snippet>   status = value[0]
   IEEEAddrRemoteDev = value[1:8]
   NWKAddrRemoteDev = value[9:2]
   NumOfAssociatedDevice = value[11:1]
   StartIndex = value[12:1]
   ListOfShortAddress = value[13:2*NumOfAssociatedDevice]
</snippet></ROW><ROW><id>14567651</id><snippet>struct.unpack()</snippet></ROW><ROW><id>14567693</id><snippet>.iterrows()</snippet></ROW><ROW><id>14567693</id><snippet>In [33]: for row_number, row in group.iterrows():
   ....:     print row_number
   ....:     print row
   ....:     
676
Tag                        black fabric
User          http://steve.nl/user_1002
Quality               usefulness-useful
Cluster_id                            1
Name: 676
708
Tag                          blond wood
User          http://steve.nl/user_1002
Quality               usefulness-useful
Cluster_id                            1
Name: 708
[etc]
</snippet></ROW><ROW><id>14567693</id><snippet>In [48]: row
Out[48]: 
Tag                       rocking chair
User          http://steve.nl/user_1002
Quality       problematic-misperception
Cluster_id                            1
Name: 3650

In [49]: row["User"]
Out[49]: 'http://steve.nl/user_1002'

In [50]: row["Tag"]
Out[50]: 'rocking chair'
</snippet></ROW><ROW><id>14567693</id><snippet>good = 0
bad = 0
for row_number, row in group.iterrows():
    if row['Quality'] == 'usefulness-useful':
        good += 1
    else:
        bad += 1
print 'good', good, 'bad', bad
</snippet></ROW><ROW><id>14567693</id><snippet>good 3 bad 4
</snippet></ROW><ROW><id>14567693</id><snippet>Quality</snippet></ROW><ROW><id>14567693</id><snippet>In [54]: counts = group["Quality"].value_counts()

In [55]: counts
Out[55]: 
usefulness-useful            3
problematic-misperception    2
usefulness-not_useful        1
problematic-misspelling      1

In [56]: counts['usefulness-useful']
Out[56]: 3
</snippet></ROW><ROW><id>14567693</id><snippet>In [57]: counts.sum() - counts['usefulness-useful']
Out[57]: 4
</snippet></ROW><ROW><id>14567790</id><snippet>from django.conf.urls.defaults import *</snippet></ROW><ROW><id>14567790</id><snippet>from django.conf.urls.defaults import include</snippet></ROW><ROW><id>14567870</id><snippet>RequestContext</snippet></ROW><ROW><id>14567870</id><snippet>render_to_response</snippet></ROW><ROW><id>14568018</id><snippet>In [1]: def group(l, size):
   ...:     return [tuple(l[i:i+size]) for i in range(0, len(l), size)]
   ...: 

In [2]: l = [1,2,3,4,5,6,7,8,9]

In [3]: group(l, 3)
Out[3]: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]

In [4]: group(l, 4)
Out[4]: [(1, 2, 3, 4), (5, 6, 7, 8), (9,)]
</snippet></ROW><ROW><id>14568018</id><snippet>[]</snippet></ROW><ROW><id>14568018</id><snippet>()</snippet></ROW><ROW><id>14568179</id><snippet>noise = ['go', 'check', 'walk']
commands = [word for word in move_input if word not in noise]
# process commands
</snippet></ROW><ROW><id>14568179</id><snippet>prefixes = {('map', 'inventory'): ('check',),
            ('north', 'south', 'east', 'west'): ('go', 'walk')}
commands = [word for word in move_input if word not in noise]
if len(commands) == 1:
   command = commands[0]
else:
    assert len(commands) == 2 # or decide what to do otherwise
    for com, pref in prefixes.items():
        if commands[0] in pref and commands[1] in com:
           command = commands[1]
           break
    else:
        print('Invalid command')
</snippet></ROW><ROW><id>14568257</id><snippet>if uriDict['name'] in expectedResultsSubDict and str(uriDict['value']) == str(expectedResultsSubDict[uriDict['name']]):
</snippet></ROW><ROW><id>14568392</id><snippet>ImportError: cannot import name hashtable</snippet></ROW><ROW><id>14568398</id><snippet>^\s{3}[^\s]</snippet></ROW><ROW><id>14568487</id><snippet>foo3() -&gt; @selector.tag('a') -&gt; foo3()
foo3() -&gt; @selector.tag('b') -&gt; do_nothing

foo3() -&gt; @selector.tag('b') -&gt; do_nothing
do_nothing -&gt; @selector.tag('a') -&gt; do_nothing
</snippet></ROW><ROW><id>14568487</id><snippet>class Selector(set):
    def tag(self, *tags):
        tags = set(tags)
        def decorator(func):
            if hasattr(func, "_tags"):
                func._tags.update(tags)
            else:
                func._tags = tags
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                return func(*args, **kwargs) if self &amp; func._tags else None
            wrapper._tags = func._tags
            return wrapper
        return decorator
</snippet></ROW><ROW><id>14568487</id><snippet>@selector.tag('a')
@selector.tag('b')
def foo():
    ...


#Or, equivalently:
@selector.tag('a', 'b')
def foo():
    ...
</snippet></ROW><ROW><id>14568487</id><snippet>functools.wraps()</snippet></ROW><ROW><id>14568487</id><snippet>    def decorator(func):
        if hasattr(func, "_tagged_function"):
            func = func._tagged_function
        if hasattr(func, "_tags"):
            func._tags.update(tags)
        else:
            func._tags = tags
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            return func(*args, **kwargs) if self &amp; func._tags else None
        wrapper._tagged_function = func
        wrapper._tags = func._tags
        return wrapper
</snippet></ROW><ROW><id>14568490</id><snippet>sys.exit</snippet></ROW><ROW><id>14568490</id><snippet>SystemExit</snippet></ROW><ROW><id>14568490</id><snippet>import sys
import traceback

try:
    sys.exit(1)
except:
    print "This threw the following exception:"
    traceback.print_exc()
# This threw the following exception:
# Traceback (most recent call last):
#   File "test.py", line 5, in &lt;module&gt;
#     sys.exit(1)
# SystemExit: 1
</snippet></ROW><ROW><id>14568575</id><snippet>from twisted.internet.endpoints import TCP4ClientEndpoint
d = TCP4ClientEndpoint(reactor, host, int(port)).connect(factory)
</snippet></ROW><ROW><id>14568575</id><snippet>d.addCallback(lambda r: factory.deferred)    
</snippet></ROW><ROW><id>14568575</id><snippet>d = factory.deferred
</snippet></ROW><ROW><id>14568575</id><snippet>connectToIMAPServer</snippet></ROW><ROW><id>14568575</id><snippet>factory.deferred</snippet></ROW><ROW><id>14568651</id><snippet>values</snippet></ROW><ROW><id>14568651</id><snippet>parcelID = values[0]
</snippet></ROW><ROW><id>14568651</id><snippet>parcelID = str(values)
</snippet></ROW><ROW><id>14568704</id><snippet>shell=True</snippet></ROW><ROW><id>14568704</id><snippet>Popen('command1 | command2 | command3',shell=True)
</snippet></ROW><ROW><id>14568704</id><snippet>Popen</snippet></ROW><ROW><id>14568767</id><snippet>optparse.OptionParser</snippet></ROW><ROW><id>14568767</id><snippet>parse_args</snippet></ROW><ROW><id>14568767</id><snippet>def parse_args(self, args=None, values=None):
    """
    parse_args(args : [string] = sys.argv[1:],
               values : Values = None)
    -&gt; (values : Values, args : [string])

    Parse the command-line options found in 'args' (default:
    sys.argv[1:]).  Any errors result in a call to 'error()', which
    by default prints the usage message to stderr and calls
    sys.exit() with an error message.  On success returns a pair
    (values, args) where 'values' is an Values instance (with all
    your option values) and 'args' is the list of arguments left
    over after parsing options.
    """
    rargs = self._get_args(args)
    if values is None:
        values = self.get_default_values()
</snippet></ROW><ROW><id>14568767</id><snippet>optparse</snippet></ROW><ROW><id>14568837</id><snippet>lxml.etree</snippet></ROW><ROW><id>14568837</id><snippet>lxml.html,</snippet></ROW><ROW><id>14568837</id><snippet>In [14]: import lxml.etree as et  # for broken xml add an import:
                                  # import lxml.html as lh

In [15]: doc = et.fromstring(xmlstr)  # for broken xml replace this line with:
                                      # doc = lh.fromstring(xmlstr)

                                      # if you read xml from a file:
                                      # doc = et.parse('file_path')

In [16]: for elem in doc.xpath('.//temp-config'):
    ...:     elem.text = 'Prod'
    ...:     

In [17]: print et.tostring(doc,pretty_print=True)
&lt;config&gt;
  &lt;logging/&gt;
  &lt;test-mode&gt;false&lt;/test-mode&gt;
  &lt;test name="test02"&gt;
    &lt;mail/&gt;
    &lt;test-system&gt;0&lt;/test-system&gt;
    &lt;system id="0" name="suite1" type="regression"&gt;
      &lt;temp-config&gt;Prod&lt;/temp-config&gt;
      &lt;rpm&gt;0.5&lt;/rpm&gt;
      &lt;cycles&gt;3&lt;/cycles&gt;
    &lt;/system&gt;
    &lt;system id="1" name="suite2" type="regression"&gt;
      &lt;temp-config&gt;Prod&lt;/temp-config&gt;
      &lt;rpm&gt;0.5&lt;/rpm&gt;
      &lt;cycles&gt;3&lt;/cycles&gt;
    &lt;/system&gt;
    &lt;system id="2" name="suite3" type="regression"&gt;
      &lt;temp-config&gt;Prod&lt;/temp-config&gt;
      &lt;rpm&gt;0.5&lt;/rpm&gt;
      &lt;cycles&gt;3&lt;/cycles&gt;
    &lt;/system&gt;
    &lt;system id="3" name="suite4" type="regression"&gt;
      &lt;temp-config&gt;Prod&lt;/temp-config&gt;
      &lt;rpm&gt;0.5&lt;/rpm&gt;
      &lt;cycles&gt;3&lt;/cycles&gt;
    &lt;/system&gt;
    &lt;system id="4" name="suite5" type="regression"&gt;
      &lt;temp-config&gt;Prod&lt;/temp-config&gt;
      &lt;rpm&gt;0.5&lt;/rpm&gt;
      &lt;cycles&gt;3&lt;/cycles&gt;
    &lt;/system&gt;
  &lt;/test&gt;
&lt;/config&gt;
</snippet></ROW><ROW><id>14568878</id><snippet>vtkXWriter</snippet></ROW><ROW><id>14568878</id><snippet>X</snippet></ROW><ROW><id>14568878</id><snippet>X</snippet></ROW><ROW><id>14568878</id><snippet>from vtk.util.numpy_support import vtk_to_numpy

...

vtk_rw = vtk.vtkRenderWindow()

...

vtk_win_im = vtk.vtkWindowToImageFilter()
vtk_win_im.SetInput(vtk_rw)
vtk_win_im.Update()

vtk_image = vtk_win_im.GetOutput()

height, width, _ = vtk_image.GetDimensions()
vtk_array = vtk_image.GetPointData().GetScalars()
components = vtk_array.GetNumberOfComponents()

arr = vtk_to_numpy(vtk_array).reshape(height, width, components)

...
</snippet></ROW><ROW><id>14568997</id><snippet>line.split</snippet></ROW><ROW><id>14568997</id><snippet>split</snippet></ROW><ROW><id>14568997</id><snippet>for line in filein:
    zzz = line.rstrip('\n')
    yyy = list(zzz)
    random.shuffle(yyy)
    zzzz = ''.join(yyy)
    fout.write(zzzz + '\n')
</snippet></ROW><ROW><id>14569017</id><snippet>zipfile.write()</snippet></ROW><ROW><id>14569017</id><snippet>arcname</snippet></ROW><ROW><id>14569017</id><snippet>src</snippet></ROW><ROW><id>14569017</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>14569017</id><snippet>src</snippet></ROW><ROW><id>14569017</id><snippet>os.walk()</snippet></ROW><ROW><id>14569017</id><snippet>#!/usr/bin/env python2.7

import os
import zipfile

def zip(src, dst):
    zf = zipfile.ZipFile("%s.zip" % (dst), "w")
    abs_src = os.path.abspath(src)
    for dirname, subdirs, files in os.walk(src):
        for filename in files:
            absname = os.path.abspath(os.path.join(dirname, filename))
            arcname = absname[len(abs_src) + 1:]
            print 'zipping %s as %s' % (os.path.join(dirname, filename),
                                        arcname)
            zf.write(absname, arcname)
    zf.close()

zip("src", "dst")
</snippet></ROW><ROW><id>14569017</id><snippet>src
└── a
    ├── b
    │   └── bar
    └── foo
</snippet></ROW><ROW><id>14569017</id><snippet>zipping src/a/foo as a/foo
zipping src/a/b/bar as a/b/bar
</snippet></ROW><ROW><id>14569017</id><snippet>Archive:  dst.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
        0  01-28-13 11:36   a/foo
        0  01-28-13 11:36   a/b/bar
 --------                   -------
        0                   2 files
</snippet></ROW><ROW><id>14569033</id><snippet>datetime</snippet></ROW><ROW><id>14569033</id><snippet>tzinfo</snippet></ROW><ROW><id>14569033</id><snippet>make_aware</snippet></ROW><ROW><id>14569443</id><snippet>C[:, :, 1:] - C[:, :, 0:C.shape[2]-1]
</snippet></ROW><ROW><id>14569443</id><snippet>np.diff(C, axis = -1)
</snippet></ROW><ROW><id>14569443</id><snippet>In [27]: C = np.random.rand(2,3,3)

In [28]: D = C[:, :, 1:] - C[:, :, 0:C.shape[2]-1]

In [29]: E = np.diff(C, axis = -1)

In [30]: np.allclose(D, E)
Out[30]: True
</snippet></ROW><ROW><id>14569443</id><snippet>C</snippet></ROW><ROW><id>14569443</id><snippet>E = np.diff(C, axis = -1)
</snippet></ROW><ROW><id>14569443</id><snippet>In [20]: C = np.random.rand(2,3,3)

In [21]: D = C.copy()

In [22]: C[:, :, 1:] = np.diff(C, axis = -1)

In [23]: C = np.cumsum(C, axis = -1)

In [24]: np.allclose(C,D)
Out[24]: True
</snippet></ROW><ROW><id>14569881</id><snippet>Command</snippet></ROW><ROW><id>14569881</id><snippet>from flask_script import Command, Option

class GunicornServer(Command):

    description = 'Run the app within Gunicorn'

    def __init__(self, host='127.0.0.1', port=8000, workers=4):
        self.port = port
        self.host = host
        self.workers = workers

    def get_options(self):
        return (
            Option('-H', '--host',
                   dest='host',
                   default=self.host),

            Option('-p', '--port',
                   dest='port',
                   type=int,
                   default=self.port),

            Option('-w', '--workers',
                   dest='workers',
                   type=int,
                   default=self.workers),
        )

    def handle(self, app, host, port, workers):

        from gunicorn import version_info

        if version_info &lt; (0, 9, 0):
            from gunicorn.arbiter import Arbiter
            from gunicorn.config import Config
            arbiter = Arbiter(Config({'bind': "%s:%d" % (host, int(port)),'workers': workers}), app)
            arbiter.run()
        else:
            from gunicorn.app.base import Application

            class FlaskApplication(Application):
                def init(self, parser, opts, args):
                    return {
                        'bind': '{0}:{1}'.format(host, port),
                        'workers': workers 
                    }

                def load(self):
                    return app

            FlaskApplication().run()
</snippet></ROW><ROW><id>14569881</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>14569881</id><snippet>manager.add_command("runserver", GunicornServer())
</snippet></ROW><ROW><id>14569881</id><snippet>python manage.py gunicorn</snippet></ROW><ROW><id>14569881</id><snippet>manager.add_command("gunicorn", GunicornServer())
</snippet></ROW><ROW><id>14570016</id><snippet>x = set(i for i in data)
</snippet></ROW><ROW><id>14570016</id><snippet>x = set((i for i in data))
</snippet></ROW><ROW><id>14570016</id><snippet>x = set([i for i in data])
</snippet></ROW><ROW><id>14570016</id><snippet>set</snippet></ROW><ROW><id>14570016</id><snippet>all</snippet></ROW><ROW><id>14570016</id><snippet>any</snippet></ROW><ROW><id>14570016</id><snippet>data</snippet></ROW><ROW><id>14570016</id><snippet>temp $ python -m timeit 'set(i for i in "xyzzfoobarbaz")'
100000 loops, best of 3: 3.55 usec per loop
temp $ python -m timeit 'set([i for i in "xyzzfoobarbaz"])'
100000 loops, best of 3: 3.42 usec per loop
</snippet></ROW><ROW><id>14570016</id><snippet>x = set(data)
</snippet></ROW><ROW><id>14570016</id><snippet>temp $ python -m timeit 'set("xyzzfoobarbaz")'
1000000 loops, best of 3: 1.83 usec per loop
</snippet></ROW><ROW><id>14570055</id><snippet>list</snippet></ROW><ROW><id>14570055</id><snippet>&gt;&gt;&gt; L = []
&gt;&gt;&gt; L[0] = 'a'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range
</snippet></ROW><ROW><id>14570055</id><snippet>[]</snippet></ROW><ROW><id>14570055</id><snippet>array.array</snippet></ROW><ROW><id>14570055</id><snippet>list</snippet></ROW><ROW><id>14570086</id><snippet>whitespace</snippet></ROW><ROW><id>14570086</id><snippet>opening bracket - [</snippet></ROW><ROW><id>14570086</id><snippet>-</snippet></ROW><ROW><id>14570086</id><snippet>0 to 9</snippet></ROW><ROW><id>14570086</id><snippet>pattern = '[- \\[\\]]'
</snippet></ROW><ROW><id>14570086</id><snippet>-</snippet></ROW><ROW><id>14570357</id><snippet>x1 = 2 * x_0 + 1
y1 = 2 * y_0 + 1
</snippet></ROW><ROW><id>14570357</id><snippet>new_dict = {(2 * x + 1, 2 * y + 1): v for (x, y), v in d.items()}
</snippet></ROW><ROW><id>14570357</id><snippet>d = {(1, 3): 12, (7, 1): 90, (3, 1): 8, (1, 5): 15, (5, 1): 40, (1, 1): 1}
new_dict = {(2 * x + 1, 2 * y + 1): v for (x, y), v in d.items()}
print new_dict
# {(1, 3): 12, (7, 1): 90, (3, 1): 8, (1, 5): 15, (5, 1): 40, (1, 1): 1}
</snippet></ROW><ROW><id>14570492</id><snippet>setattr</snippet></ROW><ROW><id>14570492</id><snippet>&gt;&gt;&gt; class SuperClass():
...     def print_hello(self):
...         print('Hello, world!')

&gt;&gt;&gt; class WrapperClass():
...     pass

&gt;&gt;&gt; wrapper = WrapperClass()
&gt;&gt;&gt; setattr(wrapper, 'clarence', SuperClass())

&gt;&gt;&gt; wrapper.clarence.print_hello()
Hello, world!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14570492</id><snippet>setattr(self, 'clarence', SuperClass())
</snippet></ROW><ROW><id>14570492</id><snippet>&gt;&gt;&gt; globals()['clarence'] = SuperClass()
&gt;&gt;&gt; clarence.print_hello()
Hello, world!
</snippet></ROW><ROW><id>14570588</id><snippet>@view_config(route_name='home_page', renderer='templates/edit.pt')
def home_page(request):
    if 'form.submitted' in request.params:
        name= request.params['name']
        body = request.params['body']
        page=Page(name,body)
        DBSession.add(page)
        return HTTPFound(Location=request.route_url('view_page',pagename=name))

    # form was not submitted here, need to return context
    # ValueError: renderer was passed non-dictionary as value &lt; beacuase you were
    # not returning context for this case before
    return {} # template contenxt here
</snippet></ROW><ROW><id>14570619</id><snippet>axes</snippet></ROW><ROW><id>14570619</id><snippet>0.5, 2.5, 1.0, 0.3</snippet></ROW><ROW><id>14570619</id><snippet>axes</snippet></ROW><ROW><id>14570619</id><snippet>bb_data = Bbox.from_bounds(0.5, 2.5, 1.0, 0.3)
disp_coords = ax.transData.transform(bb_data)
fig_coords = fig.transFigure.inverted().transform(disp_coords)
</snippet></ROW><ROW><id>14570619</id><snippet>ax</snippet></ROW><ROW><id>14570619</id><snippet>fig</snippet></ROW><ROW><id>14570619</id><snippet>inverted</snippet></ROW><ROW><id>14570619</id><snippet>import matplotlib.pyplot as plt
from matplotlib.transforms import Bbox

plt.plot([0,2], [2,4])
fig = plt.gcf()
ax = plt.gca()

bb_data = Bbox.from_bounds(0.5, 2.5, 1.0, 0.3)
disp_coords = ax.transData.transform(bb_data)
fig_coords = fig.transFigure.inverted().transform(disp_coords)

fig.add_axes(Bbox(fig_coords))

plt.show()
</snippet></ROW><ROW><id>14570657</id><snippet>from threading import Thread
import Queue
import os
import time
import sys

# declare some global items
# queue that an author thread can write line items to a csv
write_q = Queue.Queue()

# queue filled with files to parse 
read_q = Queue.Queue()

# queue filled with files that have size change during read. Can
# preload this queue to optimize however program should handle any
# file that changes during operation
moving_q = Queue.Queue()

# given csv labels
labels = ['date', 'message', 'action', 'details']

# global for writer thread so it knows when to close
files_to_parse = True

# parsing function for any number of threads
def file_parser():    
    # Each parser thread will run until the read_q is empty
    while True:
        moving = False
        # Test for a file from the read queue or moving queue 
        try:
            if not moving_q.empty():
                try:
                    f_path = moving_q.get(False)
                    moving = True
                # if the moving queue is empty after trying to read
                # might have been snatched by different thread. Ignore error
                except Queue.Empty:
                    pass
            else:
                # No items left in moving queue so grab non moving file
                f_path = read_q.get(False)
        # all files have been dealt with
        except Queue.Empty:
            print "Done Parsing"
            sys.exit()

        # Following will parse a file and test that the file is not being
        # modified during the read
        with open(f_path, 'r') as f:
            # csv reader setup
            reader = csv.DictReader(f, labels, delimiter=' ', restkey='rest')

            # initillized file size (when we started reading)
            pre = os.path.getsize(f_path)

            # store output items in a list so if file is updated during read
            # we can just ignore those items and read file later
            line_items = []

            # parse the file line by line
            for line in reader:
                # Check that file hasn't been updated
                post = os.path.getsize(f_path)
                if pre != post:
                    # if file has changed put the file back on the queue and clear the output lines
                    moving_q.put(f_path)
                    line_items = None
                    break
                # parse the line and add it to output list
                else:
                    if line.get('rest'):
                        line['details'] += ' %s' % (' '.join(line['rest']))
                        line_items.append(','.join([infile,line['date'], line['message'], line['action'], line['details']]) + '\n')

            # don't want to do reading and writing in same thread. Push
            # all line items onto the write thread for the author to deal with    
            if line_items and moving:
                write_q.put(line_items)
                moving_q.task_done()
            elif line_items and not moving:
                write_q.put(line_items)
                read_q.task_done()

# author thread that will write items to a file as other threads complete
# tasks. Should help speed up IO bound processing
def file_author(out_file):
    with open(out_file,'w') as f:
        # parse files until all the parser threads are running
        while files_to_parse or not read_q.empty():
            # only one writer thread so write as items are put into thread
            if not read_q.empty():
                line_items = write_q.get(False)
                for line_item in line_items:
                    f.write(line_item)
                write_q.task_done()
            # sleep in the downtime so we dont overload PC
            else:
                time.sleep(.1)
    print "Done writting"


if __name__ == "__main__":
    # list of file names as you had before
    listing = []
    outfile = "MyNewCSVfile.csv"

    # You can optimize parsing by adding known "moving files" directly
    # to the moving_queue, however program should handle either way
    for infile in listing:
        _path2 = _path + infile
        write_q.put(_path2)

    # make a writer thread
    t = Thread(target = file_author, args = (outfile,))
    t.daemon = True
    t.start()

    # make some parse threads
    for i in range(10):
        t = Thread(target = file_parser)
        t.daemon = True
        t.start()

    # wait for parser threads to finish work
    read_q.join()
    moving_q.join()

    # close author
    files_to_parse = False
    time.sleep(.1)
    print "Complete"
</snippet></ROW><ROW><id>14570732</id><snippet>kmeans2</snippet></ROW><ROW><id>14570732</id><snippet>scipy.cluster.vq</snippet></ROW><ROW><id>14570732</id><snippet>In [8]: X = scipy.randn(100, 2)

In [9]: centroids, labels = kmeans2(X, 3)

In [10]: labels
Out[10]: 
array([2, 1, 2, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0,
       1, 0, 2, 0, 1, 2, 0, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 0, 0,
       2, 2, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1,
       1, 0, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 2, 2, 0,
       1, 1, 0, 1, 0, 0, 0, 2])
</snippet></ROW><ROW><id>14570732</id><snippet>kmeans</snippet></ROW><ROW><id>14570732</id><snippet>vq</snippet></ROW><ROW><id>14570732</id><snippet>In [17]: from scipy.cluster.vq import kmeans, vq

In [18]: codebook, distortion = kmeans(X, 3)

In [21]: code, dist = vq(X, codebook)

In [22]: code
Out[22]: 
array([1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
       2, 2, 1, 2, 0, 1, 1, 0, 2, 2, 0, 1, 0, 1, 0, 2, 1, 2, 0, 2, 1, 1, 1,
       0, 1, 2, 0, 1, 2, 2, 1, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 2, 2, 2,
       0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 2, 0, 2, 0, 2, 2, 1, 1, 1, 1, 1,
       2, 0, 2, 0, 2, 1, 1, 1])
</snippet></ROW><ROW><id>14570823</id><snippet>TkInter</snippet></ROW><ROW><id>14570823</id><snippet>TkInter</snippet></ROW><ROW><id>14570823</id><snippet>Qt</snippet></ROW><ROW><id>14570823</id><snippet>wx</snippet></ROW><ROW><id>14570823</id><snippet>Grid</snippet></ROW><ROW><id>14570823</id><snippet>canvas</snippet></ROW><ROW><id>14570823</id><snippet>create_line</snippet></ROW><ROW><id>14570823</id><snippet>create_bitmap</snippet></ROW><ROW><id>14570845</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>14570845</id><snippet>inspect.getmembers(my_module,inspect.isclass)
</snippet></ROW><ROW><id>14570845</id><snippet>my_module_classes = tuple(x[1] for x in inspect.getmembers(my_module,inspect.isclass))
</snippet></ROW><ROW><id>14571031</id><snippet>pviews</snippet></ROW><ROW><id>14571031</id><snippet>from pyramid.scripts.pviews import PViewsCommand

pvcomm = PViewsCommand()

urlpath = request.environ['PATH_INFO']
parts = urlpath.split('/')
existing_views = {}

for i in range(1, len(parts)):
    path = '/'.join(parts[:i])
    view = pvcomm._find_view(path, request.registry)
    if view is not None:
        existing_views[path] = view
</snippet></ROW><ROW><id>14571031</id><snippet>existing_views</snippet></ROW><ROW><id>14571069</id><snippet>SESSION_COOKIE_DOMAIN</snippet></ROW><ROW><id>14571069</id><snippet>SERVER_NAME</snippet></ROW><ROW><id>14571124</id><snippet>all</snippet></ROW><ROW><id>14571124</id><snippet>&gt;&gt;&gt; x = [1, 2, 3, 4, 5]

&gt;&gt;&gt; all(item &gt;= 0 for item in x) or all(item &lt; 0 for item in x)
True
</snippet></ROW><ROW><id>14571263</id><snippet>one.similarity(other)</snippet></ROW><ROW><id>14571660</id><snippet>$ virtualenv --system-site-packages foo
$ source foo/bin/activate
$ pip install Django==1.4.3
</snippet></ROW><ROW><id>14571660</id><snippet>pip freeze</snippet></ROW><ROW><id>14571660</id><snippet>pip uninstall</snippet></ROW><ROW><id>14571660</id><snippet>$ virtualenv --no-site-packages foo
$ source foo/bin/activate
$ ln -s /usr/lib/python2.7/dist-packages/PIL* $VIRTUAL_ENV/lib/python*/site-packages
</snippet></ROW><ROW><id>14571660</id><snippet>module_name.__path__</snippet></ROW><ROW><id>14571660</id><snippet>Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import PIL
&gt;&gt;&gt; PIL.__path__
['/usr/lib/python2.7/dist-packages/PIL']
</snippet></ROW><ROW><id>14571957</id><snippet>csv</snippet></ROW><ROW><id>14571957</id><snippet>datain = (
    (1,'Root',1,16,-1),
    (2,'Articles',2,11,1),
    (5,'Fiction',3,8,2),
    (7,'Fantasy',4,5,5),
    (8,'Sci-fi',6,7,5),
    (6,'Reference',9,10,2),
    (3,'Portfolio',12,13,1),
    (4,'Contact',14,15,1),
    )

def convert_to_json(data):
    node_index = dict()
    parent_index = dict()
    for node in data:
        node_index[node[0]] = node
        parent_index.setdefault(node[4],[]).append(node)

    def process_node(index):
        result = { 'data' : node_index[index][1] }
        for node in parent_index.get(index,[]):
            result.setdefault('children',[]).append(process_node(node[0]))
        return result

    node = process_node(1)
    return [node]
</snippet></ROW><ROW><id>14571957</id><snippet>[
    {
        'data': 'Root',
        'children': [
            {
                'data': 'Articles',
                'children': [
                    {
                        'data': 'Fiction',
                        'children': [
                            { 'data': 'Fantasy' },
                            { 'data': 'Sci-fi' }
                            ]
                    },
                    { 'data': 'Reference' }
                ]
            }, 
            { 'data': 'Portfolio' },
            { 'data': 'Contact' }
        ]
    }
]
</snippet></ROW><ROW><id>14572162</id><snippet>0.1</snippet></ROW><ROW><id>14572162</id><snippet>0.3</snippet></ROW><ROW><id>14572162</id><snippet>float</snippet></ROW><ROW><id>14572162</id><snippet>In [3]: '%.20f' % 0.1
Out[3]: '0.10000000000000000555'

In [4]: '%.20f' % 0.3
Out[4]: '0.29999999999999998890'
</snippet></ROW><ROW><id>14572162</id><snippet>0.1</snippet></ROW><ROW><id>14572162</id><snippet>0.3</snippet></ROW><ROW><id>14572162</id><snippet>Decimal()</snippet></ROW><ROW><id>14572162</id><snippet>0.1</snippet></ROW><ROW><id>14572162</id><snippet>0.3</snippet></ROW><ROW><id>14572162</id><snippet>"0.1"</snippet></ROW><ROW><id>14572162</id><snippet>"0.3"</snippet></ROW><ROW><id>14572392</id><snippet>for matchingdiv in tree.xpath('div[contains(@class,"cont")]'):
    # skip those without a h3 &gt; a setup.
    link = matchingdiv.xpath('.//h3//a')
    if not link:
        continue

    # grab the `p` text and of course the link.
</snippet></ROW><ROW><id>14572392</id><snippet>h3</snippet></ROW><ROW><id>14572392</id><snippet>a</snippet></ROW><ROW><id>14572392</id><snippet>div.cont</snippet></ROW><ROW><id>14572392</id><snippet>for matchingdiv in tree.xpath('.//h3//a/ancestor::*[self::div[contains(@class,"cont")]]'):
    # no need to skip anymore, this is a div.cont with h3 and a contained
    link = matchingdiv.xpath('.//h3//a')

    # grab the `p` text and of course the link
</snippet></ROW><ROW><id>14572525</id><snippet>In [8]: [{'location':l, 'name':n, 'value':v} for (n, l, v) in all_values]
Out[8]: 
[{'location': 0, 'name': 'a', 'value': 0.1},
 {'location': 1, 'name': 'b', 'value': 0.5},
 {'location': 2, 'name': 'c', 'value': 1.0}]
</snippet></ROW><ROW><id>14572525</id><snippet>In [12]: keys = ('name', 'location', 'value')

In [13]: [dict(zip(keys, values)) for values in all_values]
Out[13]: 
[{'location': 0, 'name': 'a', 'value': 0.1},
 {'location': 1, 'name': 'b', 'value': 0.5},
 {'location': 2, 'name': 'c', 'value': 1.0}]
</snippet></ROW><ROW><id>14572549</id><snippet>group_gen.add_argument('--switch', nargs=1, metavar=('PARAM1'))
</snippet></ROW><ROW><id>14572646</id><snippet>from hashlib import md5

input_list = ['a','b','c','d','e']

hashed_list = [int(md5(x).hexdigest(), base=16) for x in input_list]

# Do whatever you wanted to do with the list of hashes....
</snippet></ROW><ROW><id>14572907</id><snippet>ni</snippet></ROW><ROW><id>14572907</id><snippet>ni</snippet></ROW><ROW><id>14572907</id><snippet>def sample_data(n_i, n_j, z_shape) :
    x = np.random.rand(n_i, n_j) * 1000
    x.sort()
    x[:,0] = 0
    x[:, -1] = 1000
    y = np.random.rand(n_i, n_j)
    z = np.random.rand(*z_shape) * 1000
    return x, y, z
</snippet></ROW><ROW><id>14572907</id><snippet>def interp_1(x, y, z) :
    rows, cols = x.shape
    out = np.empty((rows,) + z.shape, dtype=y.dtype)
    for j in xrange(rows) :
        out[j] =interp1d(x[j], y[j], kind='linear', copy=False)(z)
    return out

def interp_2(x, y, z) :
    rows, cols = x.shape
    row_idx = np.arange(rows).reshape((rows,) + (1,) * z.ndim)
    col_idx = np.argmax(x.reshape(x.shape + (1,) * z.ndim) &gt; z, axis=1) - 1
    ret = y[row_idx, col_idx + 1] - y[row_idx, col_idx]
    ret /= x[row_idx, col_idx + 1] - x[row_idx, col_idx]
    ret *= z - x[row_idx, col_idx]
    ret += y[row_idx, col_idx]
    return ret
</snippet></ROW><ROW><id>14572907</id><snippet>interp_1</snippet></ROW><ROW><id>14572907</id><snippet>interp_2</snippet></ROW><ROW><id>14572907</id><snippet>interp1d</snippet></ROW><ROW><id>14572907</id><snippet>interp1d</snippet></ROW><ROW><id>14572907</id><snippet>n_i</snippet></ROW><ROW><id>14572907</id><snippet>n_j</snippet></ROW><ROW><id>14572907</id><snippet>z</snippet></ROW><ROW><id>14572907</id><snippet>n_j</snippet></ROW><ROW><id>14572907</id><snippet>n_i</snippet></ROW><ROW><id>14572907</id><snippet>interp_2</snippet></ROW><ROW><id>14572907</id><snippet>interp_1</snippet></ROW><ROW><id>14572907</id><snippet>z</snippet></ROW><ROW><id>14572907</id><snippet>interp_2</snippet></ROW><ROW><id>14572907</id><snippet>interp_1</snippet></ROW><ROW><id>14572907</id><snippet>n_i</snippet></ROW><ROW><id>14572907</id><snippet>n_j</snippet></ROW><ROW><id>14572907</id><snippet>z</snippet></ROW><ROW><id>14572907</id><snippet>(5,)</snippet></ROW><ROW><id>14572907</id><snippet>(50,)</snippet></ROW><ROW><id>14572907</id><snippet>z</snippet></ROW><ROW><id>14572907</id><snippet>(5,)</snippet></ROW><ROW><id>14572907</id><snippet>interp_2</snippet></ROW><ROW><id>14572907</id><snippet>n_j &lt; 1000</snippet></ROW><ROW><id>14572907</id><snippet>interp_1</snippet></ROW><ROW><id>14572907</id><snippet>z</snippet></ROW><ROW><id>14572907</id><snippet>(50,)</snippet></ROW><ROW><id>14572907</id><snippet>n_j &lt; 100</snippet></ROW><ROW><id>14572907</id><snippet>n_j * len(z) &gt; 5000</snippet></ROW><ROW><id>14572907</id><snippet>interp_2</snippet></ROW><ROW><id>14572907</id><snippet>n_s = np.logspace(1, 3.3, 25)
int_1 = np.empty((len(n_s),) * 2)
int_2 = np.empty((len(n_s),) * 2)
z_shape = (5,)

for i, n_i in enumerate(n_s) :
    print int(n_i)
    for j, n_j in enumerate(n_s) :
        x, y, z = sample_data(int(n_i), int(n_j), z_shape)
        int_1[i, j] = min(timeit.repeat('interp_1(x, y, z)',
                                        'from __main__ import interp_1, x, y, z',
                                        repeat=10, number=1))
        int_2[i, j] = min(timeit.repeat('interp_2(x, y, z)',
                                        'from __main__ import interp_2, x, y, z',
                                        repeat=10, number=1))

cs = plt.contour(n_s, n_s, np.transpose(int_1-int_2))
plt.clabel(cs, inline=1, fontsize=10)
plt.xlabel('n_i')
plt.ylabel('n_j')
plt.title('timeit(interp_2) - timeit(interp_1), z.shape=' + str(z_shape))
plt.show()
</snippet></ROW><ROW><id>14572985</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>14572985</id><snippet>&gt;&gt;&gt; os.path.getmtime('/')
1359405072.0
</snippet></ROW><ROW><id>14572985</id><snippet>f</snippet></ROW><ROW><id>14572985</id><snippet>f.name</snippet></ROW><ROW><id>14573181</id><snippet>verb_list = [x, y, z]
other_list = [1, ,2, 3]
something_else = False
</snippet></ROW><ROW><id>14573181</id><snippet>from vardata import verb_list, other_list
import random

print random.choice(verb_list) 
</snippet></ROW><ROW><id>14573181</id><snippet>from vardata import *
</snippet></ROW><ROW><id>14573181</id><snippet>import vardata
print vardata.something_else
</snippet></ROW><ROW><id>14573204</id><snippet>def Stats(fn):
    class StatsObject(object):
        def __init__(self, fn):
            self.fn = fn
            self.stats = {}

        def __call__(self, obj, *args, **kwargs):
            self.stats['times_called'] = self.stats.get('times_called', 0) + 1
            return self.fn(obj, *args, **kwargs)

    function = StatsObject(fn)
    def wrapper(self, *args **kwargs):
        return function(self, *args, **kwargs)

    # KEY LINE BELOW: make the StatsObject available outside as "stats_fn"
    wrapper.stats_fn = function

    return wrapper

class MockClass(object):
    @Stats
    def mock_fn(self, *args, **kwargs):
        # do things
</snippet></ROW><ROW><id>14573204</id><snippet>StatsObject</snippet></ROW><ROW><id>14573204</id><snippet>function</snippet></ROW><ROW><id>14573204</id><snippet>self.mock_fn.stats_fn.stats</snippet></ROW><ROW><id>14573204</id><snippet>self.mock_fn()</snippet></ROW><ROW><id>14573204</id><snippet>MockClass</snippet></ROW><ROW><id>14573204</id><snippet>MockClass.mock_fn.stats_fn.stats</snippet></ROW><ROW><id>14573204</id><snippet>MockClass</snippet></ROW><ROW><id>14573249</id><snippet>from collections import defaultdict

id_value_dict = defaultdict()
for line in open(idfile.txt).readlines():
    id, value = line.strip().split()
    if id not in id_value_dict:
        id_value_dict[id] = int(value)
    else:
        if id_value_dict[id] &lt; int(value):
            id_value_dict[id] = int(value)
</snippet></ROW><ROW><id>14573249</id><snippet>out_ref = open(outputfile.txt,'w')
for key, value in id_value_dict:
    outref.write(key + '\t' + str(value)

outref.close()
</snippet></ROW><ROW><id>14573249</id><snippet> id_value_dict.keys().sort() 
</snippet></ROW><ROW><id>14573249</id><snippet> out_ref = open(outputfile.txt,'w')
 for key in id_value_dict.keys():
     outref.write(key + '\t' + str(id_value_dict[key])

 outref.close()
</snippet></ROW><ROW><id>14573249</id><snippet>  my_sorted_list = id_value_dict.keys().sort()
</snippet></ROW><ROW><id>14573308</id><snippet>text.txt</snippet></ROW><ROW><id>14573308</id><snippet>filed = open('/home/john/Desktop/test.txt','a')
</snippet></ROW><ROW><id>14573400</id><snippet>__getitem__</snippet></ROW><ROW><id>14573400</id><snippet>def __getitem__(self, item):
    out = np.ma.MaskedArray.__getitem__(self, item)
    out.info = self.info
    return out
</snippet></ROW><ROW><id>14573400</id><snippet>__setitem__</snippet></ROW><ROW><id>14573400</id><snippet>info</snippet></ROW><ROW><id>14573400</id><snippet>_optinfo</snippet></ROW><ROW><id>14573400</id><snippet>MaskedArray</snippet></ROW><ROW><id>14573400</id><snippet>class MyMaskedArray(np.ma.MaskedArray):

    def __new__(cls, input_array, info=None):
        obj = np.asarray(input_array).view(cls)
        obj._optinfo['info'] = info
        return obj

    @property
    def info(self):
        return self._optinfo.get('info', None)
</snippet></ROW><ROW><id>14573400</id><snippet>.info</snippet></ROW><ROW><id>14573400</id><snippet>__array_finalize__</snippet></ROW><ROW><id>14573400</id><snippet>ndarray</snippet></ROW><ROW><id>14573400</id><snippet>MaskedArray</snippet></ROW><ROW><id>14573400</id><snippet>ndarray</snippet></ROW><ROW><id>14573400</id><snippet>__array_finalize__</snippet></ROW><ROW><id>14573400</id><snippet>_mask</snippet></ROW><ROW><id>14573400</id><snippet>__array_finalize__</snippet></ROW><ROW><id>14573400</id><snippet>.info</snippet></ROW><ROW><id>14573400</id><snippet>MaskedArray.__array_finalize__</snippet></ROW><ROW><id>14573400</id><snippet>__array_finalize__</snippet></ROW><ROW><id>14573400</id><snippet>_optinfo</snippet></ROW><ROW><id>14573400</id><snippet>__array_prepare__</snippet></ROW><ROW><id>14573400</id><snippet>__array_wrap__</snippet></ROW><ROW><id>14573400</id><snippet>ndarray</snippet></ROW><ROW><id>14573415</id><snippet>.plot()</snippet></ROW><ROW><id>14573415</id><snippet>import matplotlib.pyplot as plt

fig = plt.Figure()
ax = fig.add_subplot(111)

colors = ('b','g','r','c','m','y','k','w',)
sessions = (sess1, sess2, sess3)
for sess, color in zip(sessions, colors):
    ax.plot(sess.x, sess.y, color=color)
</snippet></ROW><ROW><id>14573415</id><snippet>itertools.cycle</snippet></ROW><ROW><id>14573415</id><snippet>import itertools as it

colors = ('b','g','r',)
sessions = (sess1, sess2, sess3, sess4, sess5, sess6)
for sess, color in zip(sessions, it.cycle(colors)):
    ax.plot(sess.x, sess.y, color=color)
</snippet></ROW><ROW><id>14573454</id><snippet>Template</snippet></ROW><ROW><id>14573454</id><snippet>string.py:194</snippet></ROW><ROW><id>14573454</id><snippet>        if braced is not None:
            try:
                return '%s' % (mapping[braced],)
            except KeyError:
                return self.delimiter + '{' + braced + '}'
</snippet></ROW><ROW><id>14573454</id><snippet>{}</snippet></ROW><ROW><id>14573561</id><snippet>In [6]: df.pivot_table(values='rt', rows='mp', cols='me', aggfunc=sum)
Out[6]: 
me         1         2
mp                    
0   1.987366  1.955086
1   1.769593  1.729387
2   1.416274  1.490797
3   1.650428  1.546333
4   1.882780  1.933006
</snippet></ROW><ROW><id>14573575</id><snippet>DataApp</snippet></ROW><ROW><id>14573575</id><snippet>paste.fileapp</snippet></ROW><ROW><id>14573606</id><snippet>.readline()</snippet></ROW><ROW><id>14573606</id><snippet>resp = urllib.urlopen(url)
for i in range(10):
    line = resp.readline()
</snippet></ROW><ROW><id>14573687</id><snippet>oneChar = map(''.join, itertools.product(string.ascii_lowercase, repeat=1))
twoChar = map(''.join, itertools.product(string.ascii_lowercase, repeat=2))
threeChar = map(''.join, itertools.product(string.ascii_lowercase, repeat=3))
</snippet></ROW><ROW><id>14573778</id><snippet>less</snippet></ROW><ROW><id>14573778</id><snippet>less</snippet></ROW><ROW><id>14573778</id><snippet>-R</snippet></ROW><ROW><id>14573778</id><snippet>-R</snippet></ROW><ROW><id>14573778</id><snippet>--RAW-CONTROL-CHARS</snippet></ROW><ROW><id>14573778</id><snippet>-r</snippet></ROW><ROW><id>14573778</id><snippet>-r</snippet></ROW><ROW><id>14573778</id><snippet>ESC [ ... m
</snippet></ROW><ROW><id>14573996</id><snippet>nargs='+'</snippet></ROW><ROW><id>14573996</id><snippet>parser.add_argument("input", nargs='+')
parser.add_argument("output")

$ ./test.py input1 input2 input3 output
Namespace(input=['input1', 'input2', 'input3'], output='output')
</snippet></ROW><ROW><id>14574055</id><snippet>(?&lt;!e|g)\.
</snippet></ROW><ROW><id>14574055</id><snippet>(?&lt;!e)(?&lt;!g)\.
</snippet></ROW><ROW><id>14574168</id><snippet>parse_item</snippet></ROW><ROW><id>14574168</id><snippet>rules = (
    Rule(SgmlLinkExtractor(allow=(r'series-\d{1}-episode-\d{2}.',),
        ), 
        callback='parse_item'),
    )
</snippet></ROW><ROW><id>14574168</id><snippet>hxs.select</snippet></ROW><ROW><id>14574168</id><snippet>parse_item</snippet></ROW><ROW><id>14574168</id><snippet>item['title'] = hxs.select('//h2[@class="title"]/text()').extract() 
</snippet></ROW><ROW><id>14574330</id><snippet>setup.py</snippet></ROW><ROW><id>14574330</id><snippet>pynauty.certificate(somegraph)</snippet></ROW><ROW><id>14574330</id><snippet>pynauty</snippet></ROW><ROW><id>14574330</id><snippet>setup.py</snippet></ROW><ROW><id>14574330</id><snippet>diff -ur pynauty-0.5-orig/setup.py pynauty-0.5/setup.py
--- pynauty-0.5-orig/setup.py   2011-06-18 20:53:17.000000000 -0300
+++ pynauty-0.5/setup.py        2013-01-28 22:09:07.000000000 -0200
@@ -31,7 +31,9 @@

 ext_pynauty = Extension(
         name = MODULE + '._pynauty',
-        sources = [ pynauty_dir + '/' + 'pynauty.c', ],
+        sources = [ pynauty_dir + '/' + 'pynauty.c',
+            os.path.join(nauty_dir, 'schreier.c'),
+            os.path.join(nauty_dir, 'naurng.c')],
         depends = [ pynauty_dir + '/' + 'pynauty.h', ],
         extra_compile_args = [ '-O4' ],
         extra_objects = [ nauty_dir + '/' + 'nauty.o',
diff -ur pynauty-0.5-orig/src/pynauty.c pynauty-0.5/src/pynauty.c
--- pynauty-0.5-orig/src/pynauty.c      2011-03-03 23:34:15.000000000 -0300
+++ pynauty-0.5/src/pynauty.c   2013-01-29 00:38:36.000000000 -0200
@@ -320,7 +320,7 @@
     PyObject *adjlist;
     PyObject *p;

-    int i,j;
+    Py_ssize_t i, j;
     int adjlist_length;
     int x, y;
</snippet></ROW><ROW><id>14574528</id><snippet>split</snippet></ROW><ROW><id>14574528</id><snippet>join</snippet></ROW><ROW><id>14574528</id><snippet>locname = ' '.join([value for value in l if l not in locfilter])
</snippet></ROW><ROW><id>14574528</id><snippet>l</snippet></ROW><ROW><id>14574528</id><snippet>locfilter</snippet></ROW><ROW><id>14574528</id><snippet>locname = ' '.join([value for value in l if value not in locfilter])
</snippet></ROW><ROW><id>14574528</id><snippet>'Portland Oregon school'
</snippet></ROW><ROW><id>14574528</id><snippet>'school'</snippet></ROW><ROW><id>14574528</id><snippet>'school'</snippet></ROW><ROW><id>14574528</id><snippet>locfilter</snippet></ROW><ROW><id>14574528</id><snippet>'School'</snippet></ROW><ROW><id>14574528</id><snippet>lowerfilter = [value.lower() for value in locfilter]
locname = ' '.join([value for value in l if value.lower() not in lowerfilter])
</snippet></ROW><ROW><id>14574528</id><snippet>'Portland Oregon'
</snippet></ROW><ROW><id>14574581</id><snippet>&gt; /usr/bin/pip install django-tyrell
</snippet></ROW><ROW><id>14574581</id><snippet>pip</snippet></ROW><ROW><id>14574581</id><snippet>/usr/bin</snippet></ROW><ROW><id>14574581</id><snippet>pip</snippet></ROW><ROW><id>14574581</id><snippet>virtualenv</snippet></ROW><ROW><id>14574581</id><snippet>def create_environment(home_dir, site_packages=False, clear=False,
                       unzip_setuptools=False, use_distribute=False,
                       prompt=None, search_dirs=None, never_download=False):
    """
    Creates a new environment in ``home_dir``.

    If ``site_packages`` is true, then the global ``site-packages/``
    directory will be on the path.

    If ``clear`` is true (default False) then the environment will
    first be cleared.
    """
    home_dir, lib_dir, inc_dir, bin_dir = path_locations(home_dir)

    py_executable = os.path.abspath(install_python(
        home_dir, lib_dir, inc_dir, bin_dir,
        site_packages=site_packages, clear=clear))

    install_distutils(home_dir)

    if use_distribute:
        install_distribute(py_executable, unzip=unzip_setuptools,
                           search_dirs=search_dirs, never_download=never_download)
    else:
        install_setuptools(py_executable, unzip=unzip_setuptools,
                           search_dirs=search_dirs, never_download=never_download)

    install_pip(py_executable, search_dirs=search_dirs, never_download=never_download)

    install_activate(home_dir, bin_dir, prompt)
</snippet></ROW><ROW><id>14574581</id><snippet>install_pip()</snippet></ROW><ROW><id>14574713</id><snippet>classmethod</snippet></ROW><ROW><id>14574713</id><snippet>&gt;&gt;&gt; class Foo:
...     def baz(self): pass
&gt;&gt;&gt; Foo.baz
&lt;function __main__.baz&gt;
</snippet></ROW><ROW><id>14574713</id><snippet>&lt;unbound method Foo.baz&gt;</snippet></ROW><ROW><id>14574713</id><snippet>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.baz
&lt;bound method Foo.baz of &lt;__main__.Foo object at 0x104da6850&gt;&gt;
&gt;&gt;&gt; foo.baz.__func__
&lt;function __main__.baz&gt;
</snippet></ROW><ROW><id>14574713</id><snippet>&gt;&gt;&gt; class Foo:
...     @classmethod
...     def bar(cls): pass
&gt;&gt;&gt; Foo.bar
&lt;bound method type.bar of &lt;class '__main__.Foo'&gt;&gt;
&gt;&gt;&gt; Foo.bar.__func__
&lt;function __main__.bar&gt;
</snippet></ROW><ROW><id>14574713</id><snippet>classmethod</snippet></ROW><ROW><id>14574713</id><snippet>instancemethod</snippet></ROW><ROW><id>14574713</id><snippet>im_self</snippet></ROW><ROW><id>14574713</id><snippet>class Foo(object):
    def baz(self): pass

foo = Foo()
bound_baz = foo.baz
unbound_baz = new.instancemethod(bound_baz.im_func, None, bound_baz.im_class)
</snippet></ROW><ROW><id>14574713</id><snippet>bound_baz.im_func</snippet></ROW><ROW><id>14574713</id><snippet>bound_baz.__func__</snippet></ROW><ROW><id>14574713</id><snippet>new.instancemethod</snippet></ROW><ROW><id>14574713</id><snippet>new</snippet></ROW><ROW><id>14574713</id><snippet>types</snippet></ROW><ROW><id>14574713</id><snippet>unbound_baz = types.MethodType(bound_baz.im_func, None, bound_baz.im_class)
</snippet></ROW><ROW><id>14574713</id><snippet>MethodType</snippet></ROW><ROW><id>14574713</id><snippet>class</snippet></ROW><ROW><id>14574713</id><snippet>instance</snippet></ROW><ROW><id>14574713</id><snippet>None</snippet></ROW><ROW><id>14574713</id><snippet>new</snippet></ROW><ROW><id>14574713</id><snippet>class Foo(object):
    @classmethod
    def bar(cls): pass

bound_bar = Foo.bar
unbound_bar = new.instancemethod(bound_bar.im_func, None, bound_bar.im_class)
</snippet></ROW><ROW><id>14574713</id><snippet>&lt;unbound method type.bar&gt;
</snippet></ROW><ROW><id>14574713</id><snippet>class Foo:
    @classmethod
    def bar(cls): pass

&lt;unbound method classobj.bar&gt;
</snippet></ROW><ROW><id>14574713</id><snippet>im_class</snippet></ROW><ROW><id>14574713</id><snippet>classmethod</snippet></ROW><ROW><id>14574713</id><snippet>classobj</snippet></ROW><ROW><id>14574713</id><snippet>Foo.__class__</snippet></ROW><ROW><id>14574765</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.environ['PATH']
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</snippet></ROW><ROW><id>14574765</id><snippet>Python 2.7.2 (default, Oct 11 2012, 20:14:37) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.environ['PATH']
/Users/vlazarenko/bin:/Users/vlazarenko/SDK/QtSDK/Desktop/Qt/474/gcc/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
</snippet></ROW><ROW><id>14574765</id><snippet>Python 2.7.3 (default, Apr 10 2012, 23:24:47) [MSC v.1500 64 bit (AMD64)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.environ['PATH']
C:\Program Files (x86)\Parallels\Parallels Tools\Applications;C:\Windows\system3
2;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0
\;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\M
icrosoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DT
S\Binn\;C:\Program Files (x86)\Git\cmd;C:\Program Files (x86)\Microsoft SQL Serv
er\100\Tools\Binn\VSShell\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual S
tudio 9.0\Common7\IDE\PrivateAssemblies\;C:\Program Files (x86)\Microsoft SQL Se
rver\100\DTS\Binn\
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14574870</id><snippet>()</snippet></ROW><ROW><id>14574870</id><snippet>(1 . (2 . ()))</snippet></ROW><ROW><id>14574870</id><snippet>(1 2)</snippet></ROW><ROW><id>14574870</id><snippet>(1 . 2)</snippet></ROW><ROW><id>14574870</id><snippet>2</snippet></ROW><ROW><id>14574924</id><snippet>Lower = numpy.where(foos[Upper]&gt;(method[Upper]))
</snippet></ROW><ROW><id>14574924</id><snippet>method</snippet></ROW><ROW><id>14574924</id><snippet>set</snippet></ROW><ROW><id>14574924</id><snippet>method2</snippet></ROW><ROW><id>14574924</id><snippet>foos</snippet></ROW><ROW><id>14574924</id><snippet>set</snippet></ROW><ROW><id>14574924</id><snippet>the_set[index]</snippet></ROW><ROW><id>14574924</id><snippet>__getitem__</snippet></ROW><ROW><id>14574924</id><snippet># generate sample points
num_pts = 500
sample_xs = np.random.uniform(0, 200, size=num_pts)
sample_ys = np.random.uniform(0, 1, size=num_pts)

# define distribution
mean = 50
sigma = 10

# figure out "normalized" pdf vals at sample points
max_pdf = mlab.normpdf(mean, mean, sigma)
sample_pdf_vals = mlab.normpdf(sample_xs, mean, sigma) / max_pdf

# which ones are under the curve?
under_curve = sample_ys &lt; sample_pdf_vals

# get pdf vals to plot
x = np.linspace(0, 200, 1000)
pdf_vals = mlab.normpdf(x, mean, sigma) / max_pdf

# plot the samples and the curve
colors = np.array(['cyan' if b else 'red' for b in under_curve])
scatter(sample_xs, sample_ys, c=colors)
plot(x, pdf_vals)
</snippet></ROW><ROW><id>14574924</id><snippet>y</snippet></ROW><ROW><id>14574924</id><snippet>sample_xs = np.random.normal(mean, sigma, size=num_pts)
max_pdf = mlab.normpdf(mean, mean, sigma)
sample_pdf_vals = mlab.normpdf(sample_xs, mean, sigma) / max_pdf
sample_ys = np.array([np.random.uniform(0, pdf_val) for pdf_val in sample_pdf_vals])
</snippet></ROW><ROW><id>14574929</id><snippet>print</snippet></ROW><ROW><id>14574962</id><snippet>surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, w, h)
ctx = cairo.Context(surface)
page.render(ctx)
img = Gdk.pixbuf_get_from_surface(ctx.get_target(), 0, 0,
        ctx.get_target().get_width(),
        ctx.get_target().get_height())
</snippet></ROW><ROW><id>14575007</id><snippet>except:</snippet></ROW><ROW><id>14575007</id><snippet>.mwcrawler</snippet></ROW><ROW><id>14575007</id><snippet>'.'</snippet></ROW><ROW><id>14575007</id><snippet>tempfile.mkdtemp</snippet></ROW><ROW><id>14575007</id><snippet>os.path</snippet></ROW><ROW><id>14575007</id><snippet>try:
    d = tempfile.mkdtemp(prefix='.mwcrawler', dir=dumpdir)
except Exception as e:
    logging.error('Could not open %s for reading (%s), using default', dumpdir, e)
else:
    os.rmdir(d)
</snippet></ROW><ROW><id>14575047</id><snippet>xlrd</snippet></ROW><ROW><id>14575047</id><snippet>import see_below as sb
dict = sb.workbookToDict(your_file)
output = []
this_location = None
for row in dict[relevant_sheet_name]:
    output_row = row
    if row['Location'] is not None:
        this_location = row['Location']
    else:
        output_row['Location'] = this_location
</snippet></ROW><ROW><id>14575047</id><snippet>import xlrd


def _isEmpty(_):
        return ''


def _isString(element):
        return element.value.encode('ascii', 'ignore')


def _isFloat(element):
    return float(element.value)


def _isDate(element):
    import datetime
    rawDate = float(element.value)
    return (datetime.datetime(1899, 12, 30) +
            datetime.timedelta(days=rawDate))


def _isBool(element):
    return element.value == 1


def _isExcelGarbage(element):
    return int(element.value)


_options = {0: _isEmpty,
            1: _isString,
            2: _isFloat,
            3: _isDate,
            4: _isBool,
            5: _isExcelGarbage,
            6: _isEmpty}


def WorkbookToDict(filename):
    '''
        Reads .xlsx file into dictionary.

        The keys of the dictionary correspond to sheet names in the Excel workbook.
        The first row of the Excel workbook is taken to be column names, and each row
        of the worksheet is read into a separate dictionary, whose keys correspond to
        column names. The collection of dictionaries (as a list) forms the value in the
        dictionary. The output maps sheet names (keys) to a collection of dictionaries
        (value).
    '''
    book = xlrd.open_workbook(filename)
    allSheets = {}
    for s in book.sheets():
        thisSheet = []
        headings = [_options[x.ctype](x) for x in s.row(0)]

        for i in range(s.nrows):
            if i == 0:
                continue

            thisRow = s.row(i)
            if len(thisRow) != len(headings):
                raise Exception("Mismatch between headings and row length in ExcelReader")

            rowDict = {}
            for h, r in zip(headings, thisRow):
                rowDict[h] = _options[r.ctype](r)
            thisSheet.append(rowDict)
        allSheets[str(s.name)] = thisSheet
    return allSheets
</snippet></ROW><ROW><id>14575047</id><snippet>import xlwt

def write(workbookDict, colMap, filename):
    '''
       workbookDict should be a map of sheet names to a list of dictionaries.
       Each member of the list should be a mapping of column names to contents,
       missing keys are handled with the nullEntry field. colMap should be a
       dictionary whose keys are identical tto the sheet names in the workbookDict.
       Each value is a list of column names that are assumed to be in order.
       If a key exists in the workbookDict that does not exist in the colDict, the
       entry in workbookDict will not be written.
    '''

    workbook = xlwt.Workbook()

    for sheet in workbookDict.keys():
        worksheet = workbook.add_sheet(sheet)
        cols = colMap[sheet]
        i = 0
        writeCols = True
        while i &lt;= len(workbookDict[sheet]):
            if writeCols:
                for j in range(len(cols)):
                    if writeCols:  # write col headings
                        worksheet.write(i, j, cols[j])
                writeCols = False
            else:
                for j in range(len(cols)):
                    worksheet.write(i, j, workbookDict[sheet][(i-1)][cols[j]])
            i += 1

    workbook.save(filename)
</snippet></ROW><ROW><id>14575508</id><snippet>open()</snippet></ROW><ROW><id>14575508</id><snippet>exists()</snippet></ROW><ROW><id>14575508</id><snippet>exists()</snippet></ROW><ROW><id>14575508</id><snippet>exists()</snippet></ROW><ROW><id>14575508</id><snippet>True</snippet></ROW><ROW><id>14575508</id><snippet>open()</snippet></ROW><ROW><id>14575508</id><snippet>with</snippet></ROW><ROW><id>14575508</id><snippet>with</snippet></ROW><ROW><id>14575508</id><snippet>with</snippet></ROW><ROW><id>14575508</id><snippet>with</snippet></ROW><ROW><id>14575543</id><snippet>getattr</snippet></ROW><ROW><id>14575543</id><snippet>getattr(chords, choice)(scale)
</snippet></ROW><ROW><id>14575543</id><snippet>choice = 'ii7'</snippet></ROW><ROW><id>14575543</id><snippet>getattr</snippet></ROW><ROW><id>14575543</id><snippet>getattr(chords, choice)</snippet></ROW><ROW><id>14575543</id><snippet>chords.ii7</snippet></ROW><ROW><id>14575561</id><snippet>list</snippet></ROW><ROW><id>14575561</id><snippet>list</snippet></ROW><ROW><id>14575561</id><snippet>my_list = ['12', '14', '45', ''] 

for i in my_list:
    if not i:
        # i is empty string
    else:
        # ...
</snippet></ROW><ROW><id>14575561</id><snippet>int(i)</snippet></ROW><ROW><id>14575561</id><snippet>i</snippet></ROW><ROW><id>14575561</id><snippet>int</snippet></ROW><ROW><id>14575561</id><snippet>for i in my_list:
    if not i:
        i = 0
    else:
        i = int(i)
</snippet></ROW><ROW><id>14575561</id><snippet>for i in my_list:
    try:
        i = int(i)
    except ValueError:
        i = 0
</snippet></ROW><ROW><id>14575716</id><snippet>datetime</snippet></ROW><ROW><id>14575716</id><snippet>timedelta</snippet></ROW><ROW><id>14575716</id><snippet>strptime</snippet></ROW><ROW><id>14575716</id><snippet>currentTime = datetime.datetime.utcnow()
s = '2013-01-29 02:11:11.151996+00:00'
storedTime = datetime.datetime.strptime(s[:-6], "%Y-%m-%d %H:%M:%S.%f")
if storedTime + datetime.timedelta(minutes=60) &gt; currentTime:
    print "stuff..."
</snippet></ROW><ROW><id>14575840</id><snippet>booking_times</snippet></ROW><ROW><id>14575840</id><snippet>zip</snippet></ROW><ROW><id>14575840</id><snippet>booking_times = {
   'Today': ['9:00', '12:00', '14:00', '15:00', '19:00', '20:00'],
   'Tue': ['9:00', '12:00', '14:00', '15:00', '19:00', '20:00'],
   'Wed': ['9:00', '12:00', '14:00', '15:00', '19:00', '20:00']
 }

# Create a new booking_times variable that is a list-of-list,
# leading with the 'days' and followed by one list for each time
sorted_keys = ['Today', 'Tue', 'Wed']
booking_times = [sorted_keys] + zip(*(booking_times[s] for s in sorted_keys))
</snippet></ROW><ROW><id>14575840</id><snippet>booking_times</snippet></ROW><ROW><id>14575840</id><snippet>for row in booking_times: print row</snippet></ROW><ROW><id>14575840</id><snippet>['Today', 'Tue', 'Wed']
('9:00', '9:00', '9:00')
('12:00', '12:00', '12:00')
('14:00', '14:00', '14:00')
('15:00', '15:00', '15:00')
('19:00', '19:00', '19:00')
('20:00', '20:00', '20:00')
</snippet></ROW><ROW><id>14575840</id><snippet>{% for day in booking_times %}
   &lt;tr&gt;
   {% for item in day %}
       &lt;td&gt;{{ item }}&lt;/td&gt; 
   {% endfor %}
   &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>14575840</id><snippet>Today   Tue Wed
9:00    9:00    9:00
12:00   12:00   12:00
14:00   14:00   14:00
15:00   15:00   15:00
19:00   19:00   19:00
20:00   20:00   20:00
</snippet></ROW><ROW><id>14575871</id><snippet>numCustomers = 0</snippet></ROW><ROW><id>14575871</id><snippet>while nextcustomer != "no":
    amtgiven = 0
</snippet></ROW><ROW><id>14575871</id><snippet>while nextcustomer != "no":
    numCustomers += 1
    amtgiven = 0
</snippet></ROW><ROW><id>14575871</id><snippet>print 'total customers:', numCustomers
</snippet></ROW><ROW><id>14576013</id><snippet>self.label.show()</snippet></ROW><ROW><id>14576204</id><snippet>import numpy as np
import numexpr as ne

a = np.arange(10)
b = np.arange(10, 20)
c = np.arange(20, 30)
</snippet></ROW><ROW><id>14576204</id><snippet>dict</snippet></ROW><ROW><id>14576204</id><snippet>&gt;&gt;&gt; def f0(a, b) :
...     a, b = 2 * a, 3 * b
...     return ne.evaluate('2*a + 3*b + c')
...
&gt;&gt;&gt; f0(a, b)
array([110, 124, 138, 152, 166, 180, 194, 208, 222, 236])
&gt;&gt;&gt; 4 * a + 9 * b + c
array([110, 124, 138, 152, 166, 180, 194, 208, 222, 236])
</snippet></ROW><ROW><id>14576204</id><snippet>a</snippet></ROW><ROW><id>14576204</id><snippet>b</snippet></ROW><ROW><id>14576204</id><snippet>c</snippet></ROW><ROW><id>14576204</id><snippet>local_dict</snippet></ROW><ROW><id>14576204</id><snippet>&gt;&gt;&gt; def f1(a, b) :
...     a, b = 2 * a, 3 * b
...     return ne.evaluate('2*a + 3*b + c',
...                        local_dict={'c' : np.arange(30, 40)})
...
&gt;&gt;&gt; f1(a, b)
array([ 60,  66,  72,  78,  84,  90,  96, 102, 108, 114])
&gt;&gt;&gt; 2*a + 3 * b + np.arange(30, 40)
array([ 60,  66,  72,  78,  84,  90,  96, 102, 108, 114])
</snippet></ROW><ROW><id>14576204</id><snippet>local_dict</snippet></ROW><ROW><id>14576204</id><snippet>a</snippet></ROW><ROW><id>14576204</id><snippet>b</snippet></ROW><ROW><id>14576204</id><snippet>c</snippet></ROW><ROW><id>14576204</id><snippet>global_dict</snippet></ROW><ROW><id>14576204</id><snippet>&gt;&gt;&gt; def f2(a, b) :
...     a, b = 2 * a, 3 * b
...     return ne.evaluate('2*a + 3*b + c',
...                        global_dict= {'c' : np.arange(30, 40)})
...
&gt;&gt;&gt; f2(a, b)
array([120, 134, 148, 162, 176, 190, 204, 218, 232, 246])
&gt;&gt;&gt; 4 * a + 9 * b + np.arange(30, 40)
array([120, 134, 148, 162, 176, 190, 204, 218, 232, 246])
</snippet></ROW><ROW><id>14576204</id><snippet>a</snippet></ROW><ROW><id>14576204</id><snippet>b</snippet></ROW><ROW><id>14576204</id><snippet>c</snippet></ROW><ROW><id>14576319</id><snippet>In [1]: import networkx as nx

In [2]: G=nx.path_graph(3)

In [3]: pos=nx.spring_layout(G)

In [4]: nx.draw(G,pos)

In [5]: x,y=pos[1]

In [6]: import matplotlib.pyplot as plt

In [7]: plt.text(x,y+0.1,s='some text', bbox=dict(facecolor='red', alpha=0.5),horizontalalignment='center')
Out[7]: &lt;matplotlib.text.Text at 0x4f1e490&gt;
</snippet></ROW><ROW><id>14576334</id><snippet>AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>14576692</id><snippet>tree</snippet></ROW><ROW><id>14576728</id><snippet>login_required</snippet></ROW><ROW><id>14576728</id><snippet>next</snippet></ROW><ROW><id>14576728</id><snippet>get</snippet></ROW><ROW><id>14576728</id><snippet>next</snippet></ROW><ROW><id>14576728</id><snippet>redirect_url</snippet></ROW><ROW><id>14576728</id><snippet>`'?next=%s' % request.path</snippet></ROW><ROW><id>14577179</id><snippet>python</snippet></ROW><ROW><id>14577179</id><snippet>C</snippet></ROW><ROW><id>14577179</id><snippet>for i in range(10, -1, -1):
    print i
</snippet></ROW><ROW><id>14577413</id><snippet>math.log10</snippet></ROW><ROW><id>14577413</id><snippet>math.log(x, 10)</snippet></ROW><ROW><id>14577413</id><snippet>log10(x)</snippet></ROW><ROW><id>14577413</id><snippet>log(x, 10)</snippet></ROW><ROW><id>14577413</id><snippet>log(x) / log(10)</snippet></ROW><ROW><id>14577676</id><snippet>tree.findall('*')</snippet></ROW><ROW><id>14577676</id><snippet>motif</snippet></ROW><ROW><id>14577676</id><snippet>motifs</snippet></ROW><ROW><id>14577869</id><snippet>s = set(xrange(10000000))
</snippet></ROW><ROW><id>14577911</id><snippet>map</snippet></ROW><ROW><id>14577911</id><snippet>def split1(v,size,fill=0,direction='right'):
    result = list(izip_longest(*[iter(l)]*size, fillvalue=fill))
    if direction == 'left':
        result[-1] = result[-1][::-1]
    return result
</snippet></ROW><ROW><id>14577911</id><snippet>next</snippet></ROW><ROW><id>14577911</id><snippet>[iter(l)]*size</snippet></ROW><ROW><id>14577911</id><snippet>size</snippet></ROW><ROW><id>14577911</id><snippet>result[-1] = result[-1][::-1]</snippet></ROW><ROW><id>14577911</id><snippet>left</snippet></ROW><ROW><id>14577911</id><snippet>def split2(v,size,fill=0,direction='right'):
    result = [v[i:i+size] for i in range(0,len(v),size)]
    result[-1] = result[-1] + [fill] * (size - len(result[-1]))
    if direction == 'left':
        result[-1] = result[-1][::-1]
    return result
</snippet></ROW><ROW><id>14577911</id><snippet>[start: end: stride]</snippet></ROW><ROW><id>14577911</id><snippet>start</snippet></ROW><ROW><id>14577911</id><snippet>end</snippet></ROW><ROW><id>14577911</id><snippet>stride</snippet></ROW><ROW><id>14577911</id><snippet>(for int i = start; i &lt; stop; i+= stride)</snippet></ROW><ROW><id>14577911</id><snippet>[fill] * (size - len(result[-1]))</snippet></ROW><ROW><id>14577911</id><snippet>(size - len(result[-1]))</snippet></ROW><ROW><id>14577911</id><snippet>fill</snippet></ROW><ROW><id>14577911</id><snippet>(size - len(result[-1]))</snippet></ROW><ROW><id>14577911</id><snippet>result[-1] = result[-1] + [fill] * (size - len(result[-1]))</snippet></ROW><ROW><id>14577911</id><snippet>result[-1] = result[-1][::-1]</snippet></ROW><ROW><id>14577911</id><snippet>left</snippet></ROW><ROW><id>14578029</id><snippet>cxnn=pyodbc.connect('DSN=SERVER;UID=sa;PWD=password', autocommit=True)
</snippet></ROW><ROW><id>14578029</id><snippet>cxnn=pyodbc.connect('DSN=SERVER;UID=sa;PWD=password')
cxnn.autocommit = True
</snippet></ROW><ROW><id>14578029</id><snippet>cur=cxnn.cursor()
cur.execute("USE master;CREATE DATABASE Sales ON (NAME=Sales_dat, FILENAME='C:\\saledat.mdf', SIZE=10, MAXSIZE=50, FILEGROWTH=5) LOG ON (NAME=Sales_log, FILENAME='C:\\salelog.ldf', SIZE=5MB, MAXSIZE=25MB, FILEGROWTH=5MB );")
</snippet></ROW><ROW><id>14578101</id><snippet>restype</snippet></ROW><ROW><id>14578101</id><snippet>PY_connect.restype = ctypes.POINTER(CONTEXT)
</snippet></ROW><ROW><id>14578101</id><snippet>argtypes</snippet></ROW><ROW><id>14578101</id><snippet>argtype</snippet></ROW><ROW><id>14578741</id><snippet>json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]]</snippet></ROW><ROW><id>14578810</id><snippet>Python 2.x</snippet></ROW><ROW><id>14578810</id><snippet>x / y</snippet></ROW><ROW><id>14578810</id><snippet>integer division</snippet></ROW><ROW><id>14578810</id><snippet>( 20 + ( 0 / 19 ) ) ) / ( 1 / 19 )
</snippet></ROW><ROW><id>14578810</id><snippet>1 / 19</snippet></ROW><ROW><id>14578810</id><snippet>integer division</snippet></ROW><ROW><id>14578810</id><snippet>0</snippet></ROW><ROW><id>14578810</id><snippet>( 20 + ( 0 / 19 ) ) ) / 0
</snippet></ROW><ROW><id>14578810</id><snippet>python</snippet></ROW><ROW><id>14578810</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>14579131</id><snippet>setdefault</snippet></ROW><ROW><id>14579131</id><snippet>list1 = {'i': 1, 'k': 1, 'j': 1, 'o': 2, 'q': 1, 's': 1, 'x': 1, 'z': 1}
string1 = 'ikjoosgx'
for letter in string1:
    list1[letter] = list1.setdefault(letter, 0) - 1
</snippet></ROW><ROW><id>14579703</id><snippet>for item in value:
    item.col
</snippet></ROW><ROW><id>14580065</id><snippet>clock.set_fps_limit(number_of_frames_per_second)</snippet></ROW><ROW><id>14580275</id><snippet>===============
// åÎÇËí˘ê≥ÉåÉxÉã
   #define QR_LEVEL_L   0
   #define QR_LEVEL_M   1
   #define QR_LEVEL_Q   2
   #define QR_LEVEL_H   3

 // ÉfÅ[É^ÉÇÅ[Éh
    #define QR_MODE_NUMERAL  0
    #define QR_MODE_ALPHABET    1
    #define QR_MODE_8BIT     2
    #define QR_MODE_KANJI    3

// ÉoÅ[ÉWÉáÉì(å^î‘)ÉOÉãÅ[Év
  #define QR_VRESION_S  0 // 1 Å` 9
  #define QR_VRESION_M  1 // 10 Å` 26
  #define QR_VRESION_L  2 // 27 Å` 40

  #define MAX_ALLCODEWORD    3706 
      // ëçÉRÅ[ÉhÉèÅ[Éhêîç≈ëÂíl
  #define MAX_DATACODEWORD 2956 
     // ÉfÅ[É^ÉRÅ[ÉhÉèÅ[Éhç≈ëÂíl(ÉoÅ[ÉWÉáÉì40-L)
  #define MAX_CODEBLOCK   153 
     //  ÉuÉçÉbÉNÉfÅ[É^ÉRÅ[ÉhÉèÅ[Éhêîç≈ëÂíl(ÇqÇrÉRÅ[ÉhÉèÅ[ÉhÇä‹Çﬁ)
  #define MAX_MODULESIZE      177 
      // àÍï”ÉÇÉWÉÖÅ[Éãêîç≈ëÂíl

  #define QR_MARGIN 4
</snippet></ROW><ROW><id>14580275</id><snippet>CQR_Encode encoder;
encoder.EncodeData(1, 0, true, -1, str);
</snippet></ROW><ROW><id>14581031</id><snippet>if macroname_n == 15 or 20:
</snippet></ROW><ROW><id>14581031</id><snippet>if (macroname_n == 15) or (20):
</snippet></ROW><ROW><id>14581031</id><snippet>20</snippet></ROW><ROW><id>14581031</id><snippet>if macroname_n in (15, 20):
</snippet></ROW><ROW><id>14581413</id><snippet>mycal = icalendar.ics()
mycal.local_load("work.ics")
dates = mycal.get_event_instances(start,end)
#dates will contain the json with all explicit dates of the events spec'ed by the iCalendar file
</snippet></ROW><ROW><id>14581577</id><snippet>event_handle</snippet></ROW><ROW><id>14581577</id><snippet>def event_handle(turn):
    if turn == 1:
        c_s = p1
    elif turn == 2:
        c_s = p2
    else:
        return None
    key = pygame.key.get_pressed()
    # next_pos
    if key[pygame.K_q]:
        c_s.next_x -= 1
    if key[pygame.K_e]:
        c_s.next_x += 1
    # angle
    if key[pygame.K_w]:
        c_s.angle += radians(10)
    if key[pygame.K_s]:
        c_s.angle -= radians(10)
    # power (speed)
    if key[pygame.K_d]:
        c_s.speed += 0.1
    if key[pygame.K_a]:
        c_s.speed -= 0.1
</snippet></ROW><ROW><id>14581577</id><snippet>event</snippet></ROW><ROW><id>14581577</id><snippet>if event.type == pygame.KEYDOWN:</snippet></ROW><ROW><id>14581577</id><snippet>radians(1)</snippet></ROW><ROW><id>14581577</id><snippet>radians(10)</snippet></ROW><ROW><id>14581577</id><snippet>...
for event in pygame.event.get():
    if event.type == pygame.QUIT:
        running = False
        pygame.quit()
        break
if not running:
    break
event_handle(turn)
...
</snippet></ROW><ROW><id>14581577</id><snippet>event_handle</snippet></ROW><ROW><id>14581633</id><snippet>re.sub(r'@.*?(?=\s)', '', s)
</snippet></ROW><ROW><id>14581633</id><snippet>&gt;&gt;&gt; re.sub(r'@.*?(?=\s)', '', 'text before `at`@text-right-arter`at` text after first space')
'text before `at` text after first space'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14581701</id><snippet>word_count</snippet></ROW><ROW><id>14581701</id><snippet>dict_creator</snippet></ROW><ROW><id>14581701</id><snippet>word_count = {}
</snippet></ROW><ROW><id>14581701</id><snippet>word_count</snippet></ROW><ROW><id>14581701</id><snippet>dict_creator</snippet></ROW><ROW><id>14581701</id><snippet>word_count</snippet></ROW><ROW><id>14581701</id><snippet>word_count</snippet></ROW><ROW><id>14581701</id><snippet>   for word in sorted(word_count.iteritems(), key=operator.itemgetter(1), reverse=True):
            #create sorted list of tuples using operator module functions sorted in an inverse manner
            a = word
            b = word_count[word]
</snippet></ROW><ROW><id>14581701</id><snippet>iteritems()</snippet></ROW><ROW><id>14581701</id><snippet>word</snippet></ROW><ROW><id>14581701</id><snippet>('dict_creator', 1)</snippet></ROW><ROW><id>14581701</id><snippet>word_count[word]</snippet></ROW><ROW><id>14581701</id><snippet>(key, value)</snippet></ROW><ROW><id>14581701</id><snippet>word_and_count</snippet></ROW><ROW><id>14581701</id><snippet>word, count = word_and_count</snippet></ROW><ROW><id>14581701</id><snippet>        return word_count #return word_count dictionary
        word_count.close()
</snippet></ROW><ROW><id>14581701</id><snippet>input_file.close()</snippet></ROW><ROW><id>14581701</id><snippet>with</snippet></ROW><ROW><id>14581701</id><snippet>with open(filename) as input_file:
    code_goes_here = True
return word_count
</snippet></ROW><ROW><id>14582003</id><snippet>def geocode(address):
    return tuple([float(s) for s in list(urllib.urlopen('http://maps.google.com/maps/geo?' + urllib.urlencode({'output': 'csv','q': address})))[0].split(',')[2:]])
</snippet></ROW><ROW><id>14582003</id><snippet>import sys
import urllib

googleGeocodeUrl = 'http://maps.google.com/maps/geo?'

def geocode(address):
    parms = {
        'output': 'csv',
        'q': address}

    url = googleGeocodeUrl + urllib.urlencode(parms)
    resp = urllib.urlopen(url)
    resplist = list(resp)
    line = resplist[0]
    status, accuracy, latitude, longitude = line.split(',')
    return latitude, longitude

def main():
    if 1 &lt; len(sys.argv):
        address = sys.argv[1]
    else:
        address = '1600 Amphitheatre Parkway, Mountain View, CA 94043, USA'

    coordinates = geocode(address)
    print coordinates

if __name__ ==  '__main__':
    main()
</snippet></ROW><ROW><id>14582003</id><snippet>nltk</snippet></ROW><ROW><id>14582003</id><snippet>7.5   Named Entity Recognition</snippet></ROW><ROW><id>14582003</id><snippet>True</snippet></ROW><ROW><id>14582003</id><snippet>chunked_sentences = nltk.batch_ne_chunk(tagged_sentences)
</snippet></ROW><ROW><id>14582163</id><snippet>def vectorize_key(key,word_size=32):
    return (reduce(lambda p, (e,f) : p | (e &lt;&lt; f),((x[i],i*8) for i in range(word_size/8)),0) for x in split((ord(k) for k in key),word_size/8))
</snippet></ROW><ROW><id>14582165</id><snippet>next</snippet></ROW><ROW><id>14582165</id><snippet>enumerate</snippet></ROW><ROW><id>14582165</id><snippet>&gt;&gt;&gt; next(i for i,x in enumerate(a) if x &gt; 1.1)
1
&gt;&gt;&gt; next(i for i,x in enumerate(a) if x &gt; 1.3)
3
</snippet></ROW><ROW><id>14582165</id><snippet>&gt;&gt;&gt; next((i,x) for i,x in enumerate(a) if x &gt; 1.3)
(3, 1.4)
</snippet></ROW><ROW><id>14582288</id><snippet>UPDATE</snippet></ROW><ROW><id>14582288</id><snippet>autocommit=True</snippet></ROW><ROW><id>14582288</id><snippet>db = MySQLdb.connect(host='localhost', user='user', passwd='', db='mydatabase', autocommit=True)
</snippet></ROW><ROW><id>14582288</id><snippet>db.autocommit(True)
</snippet></ROW><ROW><id>14582522</id><snippet>account</snippet></ROW><ROW><id>14582580</id><snippet>text = """
&lt;root&gt;
    &lt;entry id="1"&gt;
        &lt;headword&gt;go&lt;/headword&gt;
        &lt;example&gt;I &lt;hw&gt;go&lt;/hw&gt; to school.&lt;/example&gt;
    &lt;/entry&gt;
&lt;/root&gt;
"""

import lxml.etree
import StringIO

data = lxml.etree.parse(StringIO.StringIO(text))
root = data.getroot()

for entry in root.xpath('//example/ancestor::entry[1]'):
    examplegrp = lxml.etree.SubElement(entry,"examplegrp")
    nodes = [node for node in entry.xpath('./example')]
    for node in nodes:
        entry.remove(node)
        examplegrp.append(node)

print lxml.etree.tostring(root,pretty_print=True)
</snippet></ROW><ROW><id>14582580</id><snippet>&lt;root&gt;
    &lt;entry id="1"&gt;
        &lt;headword&gt;go&lt;/headword&gt;
        &lt;examplegrp&gt;&lt;example&gt;I &lt;hw&gt;go&lt;/hw&gt; to school.&lt;/example&gt;
    &lt;/examplegrp&gt;&lt;/entry&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>14582831</id><snippet>mStrVar</snippet></ROW><ROW><id>14582831</id><snippet>retVal_mapping = [
   ('mString1', 1),
   ('mString2', 2),
   ('mString3', 2),
   ('mString4', 2),
   ('', 0) # default as "'' in anyString" is always true.
]

for s, retVal in retVal_mapping:
    if s in mStrVar:
        break

# retVal now contains the right value
</snippet></ROW><ROW><id>14582839</id><snippet>list_var</snippet></ROW><ROW><id>14582839</id><snippet>list_var = ['sales_qty' , 'returns_qty' , 'net_sales_qty' , 'sales_amt' , 'returns_amt' ,'product_discount_amt' , 'product_net_amt' ,'product_cost_amt' , 'gross_sales_amt' , 'supplier_disc_amt' , 'category_disc_amt' , 'topup_disc_amt' , 'value_at_cost']

list_dic = {k: [] for k in list_var}
</snippet></ROW><ROW><id>14582839</id><snippet>list_dic</snippet></ROW><ROW><id>14582839</id><snippet>list_dic['sales_qty'].append(123)
list_dic['category_disc_amt'].append('abc')
</snippet></ROW><ROW><id>14582839</id><snippet>list_dic = dict((k, []) for k in list_var)
</snippet></ROW><ROW><id>14583014</id><snippet>friends = []
for message in messages:
  dict = {"message" : message.message, "phone" : message.phone }
  friends.append(dict)
</snippet></ROW><ROW><id>14583014</id><snippet>for friend in friends:
  print "%s - %s" % (friend["message"], friend["phone"])
</snippet></ROW><ROW><id>14583054</id><snippet>SomeModelFactory._associated_class</snippet></ROW><ROW><id>14583370</id><snippet>np.fft.fftfreq</snippet></ROW><ROW><id>14583370</id><snippet>np.fft.fft</snippet></ROW><ROW><id>14583370</id><snippet>np.fft.fftfreq</snippet></ROW><ROW><id>14583370</id><snippet>FreqCompRows = np.fft.fftfreq(FFTData.shape[0],d=2)
FreqCompCols = np.fft.fftfreq(FFTData.shape[1],d=2)
</snippet></ROW><ROW><id>14583395</id><snippet>link.split()</snippet></ROW><ROW><id>14583395</id><snippet>dom.xpath('//a/@href')</snippet></ROW><ROW><id>14583395</id><snippet>links = list(dom.xpath('//a/@href'))
</snippet></ROW><ROW><id>14583395</id><snippet>len</snippet></ROW><ROW><id>14583395</id><snippet>print len(links)
</snippet></ROW><ROW><id>14583407</id><snippet>files=(file1 file2 file3 file4)
for i in `seq  4`
do
  j=$(($i-1))
  f[$j]=`cat ./temp/${files[$i]} | awk '{print $2}' `
done

for i in `seq 0 1799`
do
  sum=0
  rowValue=0
  for j in `seq 0 3`
  do
    fileContent=(${f[$j]})
    rowValue=`echo ${fileContent[$i]} `
    sum=$(($sum + $rowValue))    
  done
  echo "sum is" $i $sum
done
</snippet></ROW><ROW><id>14583418</id><snippet>import time</snippet></ROW><ROW><id>14583418</id><snippet>self.timer = None</snippet></ROW><ROW><id>14583418</id><snippet>event</snippet></ROW><ROW><id>14583418</id><snippet>self.timer = time.time()</snippet></ROW><ROW><id>14583418</id><snippet>event</snippet></ROW><ROW><id>14583418</id><snippet>TextBox</snippet></ROW><ROW><id>14583418</id><snippet>str((time.time()-self.timer))</snippet></ROW><ROW><id>14583466</id><snippet>/</snippet></ROW><ROW><id>14583466</id><snippet>/</snippet></ROW><ROW><id>14583466</id><snippet>$ awk -F/ '/\//{print NF,$0}' file | sort -nrk1 | cut -d' ' -f2-
./inc/calls/show/system
./inc/calls/show/stats
./inc/calls/show/network
./inc/calls/show/cli
./inc/calls/services/webgui
./inc/calls/services/tsa
./inc/calls/services/ntp
./inc/calls/services/engine
./inc/calls/disk/encr
./inc/calls/change/password
./inc/calls/change/network
./inc/calls/system
./inc/calls/show
./inc/calls/services
./inc/calls/disk
./inc/calls/change
./inc/etc
./inc/calls
./data/disks
./inc
./data
./bin
</snippet></ROW><ROW><id>14583746</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14583746</id><snippet>except KeyboardInterrupt</snippet></ROW><ROW><id>14583746</id><snippet>pool.map</snippet></ROW><ROW><id>14583746</id><snippet>run_nlin</snippet></ROW><ROW><id>14583746</id><snippet>Ctrl-C</snippet></ROW><ROW><id>14583746</id><snippet>multiprocessing.Event</snippet></ROW><ROW><id>14583746</id><snippet>import logging
import multiprocessing as mp
import time

logger = mp.log_to_stderr(logging.WARNING)

def worker(x):
    try:
        if not terminating.is_set():
            logger.warn("Running worker({x!r})".format(x = x))
            time.sleep(3)
        else:
            logger.warn("got the message... we're terminating!")
    except KeyboardInterrupt:
        logger.warn("terminating is set")        
        terminating.set()
    return x

def initializer(terminating_):
    # This places terminating in the global namespace of the worker subprocesses.
    # This allows the worker function to access `terminating` even though it is
    # not passed as an argument to the function.
    global terminating
    terminating = terminating_

def main():
    terminating = mp.Event()    
    result = []
    pool = mp.Pool(initializer=initializer, initargs=(terminating, ))
    params = range(12)
    try:
         logger.warn("starting pool runs")
         result = pool.map(worker, params)
         pool.close()
    except KeyboardInterrupt:
        logger.warn("^C pressed")
        pool.terminate()
    finally:
        pool.join()
        logger.warn('done: {r}'.format(r = result))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14583746</id><snippet>% test.py
[WARNING/MainProcess] starting pool runs
[WARNING/PoolWorker-1] Running worker(0)
[WARNING/PoolWorker-2] Running worker(1)
[WARNING/PoolWorker-3] Running worker(2)
[WARNING/PoolWorker-4] Running worker(3)
</snippet></ROW><ROW><id>14583746</id><snippet>terminating</snippet></ROW><ROW><id>14583746</id><snippet>  C-c C-c[WARNING/PoolWorker-4] terminating is set
[WARNING/PoolWorker-2] terminating is set
[WARNING/PoolWorker-3] terminating is set
[WARNING/PoolWorker-1] terminating is set
</snippet></ROW><ROW><id>14583746</id><snippet>pool.map</snippet></ROW><ROW><id>14583746</id><snippet>[WARNING/PoolWorker-4] got the message... we're terminating!
[WARNING/PoolWorker-2] got the message... we're terminating!
[WARNING/PoolWorker-1] got the message... we're terminating!
[WARNING/PoolWorker-2] got the message... we're terminating!
[WARNING/PoolWorker-4] got the message... we're terminating!
[WARNING/PoolWorker-2] got the message... we're terminating!
[WARNING/PoolWorker-1] got the message... we're terminating!
[WARNING/PoolWorker-3] got the message... we're terminating!
</snippet></ROW><ROW><id>14583746</id><snippet>except KeyboardInterrupt</snippet></ROW><ROW><id>14583746</id><snippet>[WARNING/MainProcess] ^C pressed
[WARNING/MainProcess] done: []
</snippet></ROW><ROW><id>14583818</id><snippet>IndexError</snippet></ROW><ROW><id>14583818</id><snippet>list</snippet></ROW><ROW><id>14583818</id><snippet>len</snippet></ROW><ROW><id>14583818</id><snippet>in</snippet></ROW><ROW><id>14583818</id><snippet>dict</snippet></ROW><ROW><id>14583818</id><snippet>KeyError</snippet></ROW><ROW><id>14583818</id><snippet>None</snippet></ROW><ROW><id>14583818</id><snippet>None</snippet></ROW><ROW><id>14583818</id><snippet>return</snippet></ROW><ROW><id>14583818</id><snippet>def food(what):
    if what == HAM:
        return "HAM!"
    if what == SPAM:
        return " ".join(["SPAM" for i in range(10)])
    # should raise an exception here

lunch = food(EGGS)    # now lunch is None, but what does that mean?
</snippet></ROW><ROW><id>14584287</id><snippet>CharField</snippet></ROW><ROW><id>14584287</id><snippet>customField = Field(source='get_absolute_url')
</snippet></ROW><ROW><id>14584359</id><snippet>'user_logo'</snippet></ROW><ROW><id>14584359</id><snippet>base16/hex</snippet></ROW><ROW><id>14584359</id><snippet>'&lt;'</snippet></ROW><ROW><id>14584359</id><snippet>&gt;&gt;&gt; 'ffd8ffe000104a4649460001010100'.decode('hex')
'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00'
</snippet></ROW><ROW><id>14584359</id><snippet>obj.image.save(filename, ContentFile(the_decoded_content))
</snippet></ROW><ROW><id>14584359</id><snippet>multipart/form-data</snippet></ROW><ROW><id>14584359</id><snippet>user_logo</snippet></ROW><ROW><id>14584359</id><snippet>request.FILES</snippet></ROW><ROW><id>14584394</id><snippet>import itertools
import collections

q1 = 'q1'
q2 = 'q2'
q3 = 'q3'

dic_list = {
     q1:[1,2,3,4,5],
     q2:[2,3,5],
     q3:[2,5]
     }

#sets are much more efficient for this sort of thing.  Create a dict
#of the same structure as the old one, only with `set` as values 
#instead of `list`
dic_set = {k:set(v) for k,v in dic_list.items()}

new_dic = collections.defaultdict(dict)
for k1,k2 in itertools.combinations(dic_set,2):
     #to get the count, we just need to know the size of the intersection
     #of the 2 sets.
     value = len(dic_set[k1] &amp; dic_set[k2]) 
     new_dic[k1][k2] = value
     new_dic[k2][k1] = value

print (new_dic)
</snippet></ROW><ROW><id>14584394</id><snippet>combinations</snippet></ROW><ROW><id>14584394</id><snippet>permutations</snippet></ROW><ROW><id>14584394</id><snippet>import itertools
import collections

q1 = 'q1'
q2 = 'q2'
q3 = 'q3'


dic_list = {
     q1:[1,2,3,4,5],
     q2:[2,3,5],
     q3:[2,5]
     }

dic_set = {k:set(v) for k,v in dic_list.items()}

def combo_solution():
     new_dic = collections.defaultdict(dict)
     for k1,k2 in itertools.combinations(dic_set,2):
          value = len(dic_set[k1] &amp; dic_set[k2])
          new_dic[k1][k2] = value
          new_dic[k1][k2] = value
     return new_dic

def perm_solution():
     new_dic = collections.defaultdict(dict)
     for k1, k2 in itertools.permutations(dic_set,2):
          new_dic[k1][k2] = len(dic_set[k1] &amp; dic_set[k2])
     return new_dic

import timeit
print timeit.timeit('combo_solution()','from __main__ import combo_solution',number=100000)
print timeit.timeit('perm_solution()','from __main__ import perm_solution',number=100000)
</snippet></ROW><ROW><id>14584394</id><snippet>0.58366894722    #combinations
0.832300901413   #permutations
</snippet></ROW><ROW><id>14584394</id><snippet>set.intersection</snippet></ROW><ROW><id>14584537</id><snippet>np.hstack((img1,img2))</snippet></ROW><ROW><id>14584537</id><snippet>import cv2
import numpy as np

# Load two images of same size
img1 = cv2.imread('img1.jpg')
img2 = cv2.imread('img2.jpg')

both = np.hstack((img1,img2))
</snippet></ROW><ROW><id>14584790</id><snippet>python example-extracttext.py docfile.docx textfile.txt | grep some-expression</snippet></ROW><ROW><id>14584979</id><snippet>from queue import *
</snippet></ROW><ROW><id>14584979</id><snippet>queue</snippet></ROW><ROW><id>14584979</id><snippet>q = Queue(maxsize=0)
</snippet></ROW><ROW><id>14585103</id><snippet>import re

counter = None

def datacnv( st ):
    global counter
    return "&lt;rvn=\""+ next(counter) +"\"&gt;" + st + "&lt;/rvn&gt;\n"

def rowcnv( st ):
    global counter

    counter = iter("".join([str(x) for x in range(1,10)]))

    st = re.sub("(?i)&lt;R&gt;(.*?)&lt;/R&gt;", lambda m: datacnv(m.group(1)), st)

    return "&lt;row&gt;\n" + st + "&lt;/row&gt;\n"

def tblcnv( st, val ):
    Tcolspec = ''
    Endval = int(val) + 1
    for i in range(1, Endval):
        l = str(i)
        Tcolspec += "&lt;colspec col='" + l + "' colwidth=''/&gt;\n"
    Theader = re.sub(r"(?i)&lt;table.*?&gt;","\n&lt;table ct='" + val +"'&gt;\n" + Tcolspec + "\n", st)

    Theader = re.sub("(?i)&lt;ROW&gt;(.*?)&lt;/ROW&gt;", lambda m: rowcnv(m.group(1)), Theader)

    return Theader

in_data = open("in.txt", "r")
out_data = open("out.txt", "w")
Rdata = in_data.read().lower()
in_data.close()
Rval = Rdata.replace("\n", " ")

Rval = re.sub("(?i)(&lt;TABLE.*?cols=\"(\d+).*?&lt;/TABLE&gt;)", lambda m: tblcnv(m.group(1), m.group(2)), Rval)
out_data.write(Rval)

out_data.close()
</snippet></ROW><ROW><id>14585103</id><snippet>&lt;table ct='3'&gt;
&lt;colspec col='1' colwidth=''/&gt;
&lt;colspec col='2' colwidth=''/&gt;
&lt;colspec col='3' colwidth=''/&gt;

              &lt;row&gt;
                 &lt;rvn="1"&gt;data&lt;/rvn&gt;
                 &lt;rvn="2"&gt;data&lt;/rvn&gt;
                  &lt;/row&gt;
               &lt;row&gt;
                 &lt;rvn="1"&gt;data&lt;/rvn&gt;
                 &lt;rvn="2"&gt;data&lt;/rvn&gt;
                 &lt;rvn="3"&gt;data&lt;/rvn&gt;
               &lt;/row&gt;
     &lt;/table&gt;     
&lt;table ct='4'&gt;
&lt;colspec col='1' colwidth=''/&gt;
&lt;colspec col='2' colwidth=''/&gt;
&lt;colspec col='3' colwidth=''/&gt;
&lt;colspec col='4' colwidth=''/&gt;

              &lt;row&gt;
                 &lt;rvn="1"&gt;data&lt;/rvn&gt;
                 &lt;rvn="2"&gt;data&lt;/rvn&gt;
                 &lt;rvn="3"&gt;data&lt;/rvn&gt;
                 &lt;rvn="4"&gt;data&lt;/rvn&gt;
                 &lt;rvn="5"&gt;data&lt;/rvn&gt;
                  &lt;/row&gt;
               &lt;row&gt;
                 &lt;rvn="1"&gt;data&lt;/rvn&gt;
                 &lt;rvn="2"&gt;data&lt;/rvn&gt;
               &lt;/row&gt;
     &lt;/table&gt;  
</snippet></ROW><ROW><id>14585210</id><snippet>for l, c in self.__toc:
</snippet></ROW><ROW><id>14585210</id><snippet>self.__toc = EpubToc(self)
</snippet></ROW><ROW><id>14585210</id><snippet>for c in self.__toc.get_chapter_titles():
</snippet></ROW><ROW><id>14585530</id><snippet>getIndexOfState(&amp;out, self.C, self.G, self.B, &amp;s[0])
</snippet></ROW><ROW><id>14586103</id><snippet>tick(self)</snippet></ROW><ROW><id>14586103</id><snippet>__call__(self)</snippet></ROW><ROW><id>14586103</id><snippet>__call__</snippet></ROW><ROW><id>14586103</id><snippet>foo</snippet></ROW><ROW><id>14586103</id><snippet>foo()</snippet></ROW><ROW><id>14586103</id><snippet>isinstance</snippet></ROW><ROW><id>14586103</id><snippet>issubclass</snippet></ROW><ROW><id>14586103</id><snippet>object</snippet></ROW><ROW><id>14586165</id><snippet>[1...2)</snippet></ROW><ROW><id>14586165</id><snippet>&gt;&gt;&gt; a = 1.0000000000000000001
&gt;&gt;&gt; a
1.0
&gt;&gt;&gt; a+a
1.0
&gt;&gt;&gt; a = 0.0000000000000000001
&gt;&gt;&gt; a
1e-19
</snippet></ROW><ROW><id>14586165</id><snippet>(n, f)</snippet></ROW><ROW><id>14586165</id><snippet>f</snippet></ROW><ROW><id>14586165</id><snippet>[0...1)</snippet></ROW><ROW><id>14586165</id><snippet>&gt;&gt;&gt; (1+1, a+a)
(2, 2e-19)
</snippet></ROW><ROW><id>14586165</id><snippet>Decimal</snippet></ROW><ROW><id>14586165</id><snippet>bigfloat</snippet></ROW><ROW><id>14586194</id><snippet>data['Cat1'][data['Counter'].rank(ascending=0) - 1]
</snippet></ROW><ROW><id>14586194</id><snippet>data['ranking'] = data.groupby('Cat1')['Counter'].rank(ascending=0)
</snippet></ROW><ROW><id>14586354</id><snippet>with open(tree, 'w') as file_handle:
</snippet></ROW><ROW><id>14586354</id><snippet>with open('tree', 'w') as file_handle:
</snippet></ROW><ROW><id>14586354</id><snippet>with open(tree, 'w') as file_handle:</snippet></ROW><ROW><id>14586354</id><snippet>open</snippet></ROW><ROW><id>14586354</id><snippet>TypeError: coercing to Unicode: need string or buffer, lxml.etree._ElementTree found</snippet></ROW><ROW><id>14586354</id><snippet>lxml.etree._ElementTree</snippet></ROW><ROW><id>14586354</id><snippet>open</snippet></ROW><ROW><id>14586354</id><snippet>tree</snippet></ROW><ROW><id>14586354</id><snippet>tree = etree.parse('testregression_config.xml')</snippet></ROW><ROW><id>14586520</id><snippet>submodule</snippet></ROW><ROW><id>14586520</id><snippet>bar</snippet></ROW><ROW><id>14586520</id><snippet>foo</snippet></ROW><ROW><id>14586520</id><snippet>foo</snippet></ROW><ROW><id>14586520</id><snippet>from foo import ...</snippet></ROW><ROW><id>14586520</id><snippet>import</snippet></ROW><ROW><id>14586520</id><snippet>foo</snippet></ROW><ROW><id>14586520</id><snippet>sys.modules</snippet></ROW><ROW><id>14586520</id><snippet>foo.py</snippet></ROW><ROW><id>14586520</id><snippet># x and y are values in the foo namespace, available as member attributes
# of the foo module object when foo is imported elsewhere
x = 'x'
y = 'y'
</snippet></ROW><ROW><id>14586520</id><snippet>bar.py</snippet></ROW><ROW><id>14586520</id><snippet># the foo module object is added as a member attribute of bar on import
# with the name foo in the bar namespace
import foo
# the same foo object is aliased within the bar namespace with the name
# fooy
import foo as fooy
# foo.x and foo.y are referenced from the bar namespace as x and y,
# available as member attributes of the bar module object
from foo import x, y
# z is a member attribute of the bar module object
z = 'z'
</snippet></ROW><ROW><id>14586520</id><snippet>baz.py</snippet></ROW><ROW><id>14586520</id><snippet># brings a reference to the x, y, and z attributes of bar (x and y
# come in turn from foo, though that's not relevant to the import;
# it just cares that bar has x, y, and z attributes), in to the
# namespace of baz
from bar import x, y, z
# won't work, because foo is a member of bar, not a submodule
import bar.foo
# will work, for the same reason that importing x, y, and z work
from bar import foo
</snippet></ROW><ROW><id>14586614</id><snippet>DEBUG = True</snippet></ROW><ROW><id>14586614</id><snippet>from django.conf import settings

class SeleniumLiveServerTestCase(LiveServerTestCase):

    def __init__(self, *args, **kwargs):
        super(SeleniumLiveServerTestCase, self).__init__(*args, **kwargs)
        if settings.DEBUG == False:
            settings.DEBUG = True
</snippet></ROW><ROW><id>14586659</id><snippet>import Queue
import threading

# input queue to be processed by many threads
q_in = Queue.Queue(maxsize=0)

# output queue to be processed by one thread
q_out = Queue.Queue(maxsize=0)

# number of worker threads to complete the processing
num_worker_threads = 10

# process that each worker thread will execute until the Queue is empty
def worker():
    while True:
        # get item from queue, do work on it, let queue know processing is done for one item
        item = q_in.get()
        q_out.put(do_work(item))
        q_in.task_done()

# squares a number and returns the number and its square
def do_work(item):
    return (item,item*item)

# another queued thread we will use to print output
def printer():
    while True:
        # get an item processed by worker threads and print the result. Let queue know item has been processed
        item = q_out.get()
        print "%d squared is : %d" % item
        q_out.task_done()

# launch all of our queued processes
def main():
    # Launches a number of worker threads to perform operations using the queue of inputs
    for i in range(num_worker_threads):
         t = threading.Thread(target=worker)
         t.daemon = True
         t.start()

    # launches a single "printer" thread to output the result (makes things neater)
    t = threading.Thread(target=printer)
    t.daemon = True
    t.start()

    # put items on the input queue (numbers to be squared)
    for item in range(10):
        q_in.put(item)

    # wait for two queues to be emptied (and workers to close)   
    q_in.join()       # block until all tasks are done
    q_out.join()

    print "Processing Complete"
</snippet></ROW><ROW><id>14586679</id><snippet>wd = webdriver.Firefox()
wd.implicitly_wait(3)

def get_items(items):
    print len(items)
    wd.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    # len(items) and len(wd.find_elements-by...()) both always seem to return the same number
    # if I were to start the loop with while True: it would work, but of course... never end

    sleep(5) #seconds
    while len(wd.find_elements_by_class_name('stream-item')) &gt; len(items):
        items = wd.find_elements_by_class_name('stream-item')
        print items
        wd.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    return items

def test():
    get_page('http://twitter.com/')
    get_items(wd.find_elements_by_class_name('stream-item'))
</snippet></ROW><ROW><id>14587054</id><snippet>types.MethodType</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>__call__()</snippet></ROW><ROW><id>14587054</id><snippet>x.__call__(arguments)</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>class Foo(object):
    def __init__(self):
        pass
    def f(self):
        print "f"
    def g(self):
        print "g"

    def __call__(self):
        return self.__call__()

f = Foo()
f.__call__ = f.f
f()

g = Foo()
g.__call__ = g.g
g()
</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>f()</snippet></ROW><ROW><id>14587054</id><snippet>f.__class__.__call__(f)</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>__call__</snippet></ROW><ROW><id>14587054</id><snippet>import types
class Foo(object):
    def __init__(self):
        pass
    def f(self):
        print "f"
    def g(self):
        print "g"

    def set_func(self,f):
        self.func = types.MethodType(f,self)

    def __call__(self,*args,**kwargs):
        self.func(*args,**kwargs)

f = Foo()
f.set_func(Foo.f)
f()

def another_func(self,*args):
    print args

f.set_func(another_func)
f(1,2,3,"bar")
</snippet></ROW><ROW><id>14587252</id><snippet>string_agg</snippet></ROW><ROW><id>14587252</id><snippet>from sqlalchemy.sql.expression import ColumnElement, _literal_as_column
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.compiler import compiles

class string_agg(ColumnElement):
    def __init__(self, expr, separator, order_by=None):
        self.type = Text()
        self.expr = _literal_as_column(expr)
        self.separator = literal(separator)
        self.order_by = _literal_as_column(order_by)

    @property
    def _from_objects(self):
        return self.expr._from_objects

@compiles(string_agg, 'postgresql')
def compile_string_agg(element, compiler, **kwargs):
    head = 'string_agg(%s, %s' % (
        compiler.process(element.expr),
        compiler.process(element.separator)
    )
    if element.order_by is not None:
        tail = ' ORDER BY %s)' % compiler.process(element.order_by)
    else:
        tail = ')'
    return head + tail

query = session.query(string_agg(Foo.bar, ', ', order_by=Foo.bar.desc()))
# Print compiled SQL query.
print query.statement.compile(dialect=postgresql.dialect())
# Run the query and print result.
print query.scalar()
</snippet></ROW><ROW><id>14587461</id><snippet>&gt;&gt;&gt; list_of_map = [{'CN': 'SC',
...   'LB': 'g1k',
...   'SM': 'HG1'},
...  {'CN': 'SC',
...   'LB': 'g2k',
...   'SM': 'HG2'},
...  {'CN': 'SC',
...   'LB': 'g3k',
...   'SM': 'HG3'}]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(set)
&gt;&gt;&gt; for map in list_of_map:
...     for k,v in map.items():
...         d[k].add(v)
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'set'&gt;, {'LB': set(['g3k', 'g1k', 'g2k']), 'CN': set(['SC']), 'SM': set(['HG2', 'HG3', 'HG1'])})
</snippet></ROW><ROW><id>14587461</id><snippet>set</snippet></ROW><ROW><id>14587461</id><snippet>list</snippet></ROW><ROW><id>14587461</id><snippet>&gt;&gt;&gt; back_to_lists = {k:list(v) for k,v in d.items()}
&gt;&gt;&gt; back_to_lists
{'LB': ['g3k', 'g1k', 'g2k'], 'CN': ['SC'], 'SM': ['HG2', 'HG3', 'HG1']}
</snippet></ROW><ROW><id>14587461</id><snippet>&gt;&gt;&gt; back_to_lists = {k:sorted(v) for k,v in d.items()}
&gt;&gt;&gt; back_to_lists
{'LB': ['g1k', 'g2k', 'g3k'], 'CN': ['SC'], 'SM': ['HG1', 'HG2', 'HG3']}
</snippet></ROW><ROW><id>14587791</id><snippet>image</snippet></ROW><ROW><id>14587791</id><snippet>"src"</snippet></ROW><ROW><id>14587791</id><snippet>file_name = image['src'].split('/')[-1]</snippet></ROW><ROW><id>14587791</id><snippet>'File name is wrong ',image['src']</snippet></ROW><ROW><id>14587791</id><snippet>soup.findAll('img')</snippet></ROW><ROW><id>14587791</id><snippet>soup.findAll('img',{"src":True})</snippet></ROW><ROW><id>14587791</id><snippet>src</snippet></ROW><ROW><id>14587791</id><snippet>for image in soup.findAll('img'):
    v = image.get('src', image.get('dfr-src'))  # get's "src", else "dfr_src"
                                                # if both are missing - None
    if v is None:
        continue  # continue loop with the next image
    # do your stuff
</snippet></ROW><ROW><id>14588056</id><snippet>&gt;&gt;&gt; from fabric.api import run, env, cd, settings, hide, show
&gt;&gt;&gt; env.host_string='xxx.xxx.com'
&gt;&gt;&gt; env.user='user'
&gt;&gt;&gt; env.password='password'
&gt;&gt;&gt; run('ls -lart')
</snippet></ROW><ROW><id>14588260</id><snippet>PatchCollection</snippet></ROW><ROW><id>14588260</id><snippet>match_original</snippet></ROW><ROW><id>14588260</id><snippet>visible</snippet></ROW><ROW><id>14588260</id><snippet>self.p3 = PatchCollection(self.selectionPatches, 
                          match_original=True, 
                          visible=False)
</snippet></ROW><ROW><id>14588260</id><snippet>__init__</snippet></ROW><ROW><id>14588260</id><snippet>PatchCollection</snippet></ROW><ROW><id>14588260</id><snippet>Collection</snippet></ROW><ROW><id>14588260</id><snippet>Artist</snippet></ROW><ROW><id>14588368</id><snippet>crontab -e</snippet></ROW><ROW><id>14588368</id><snippet>0 0,4,8,12,16,20 * * * python /absolute/path/to/my/file.py</snippet></ROW><ROW><id>14588524</id><snippet>while</snippet></ROW><ROW><id>14588524</id><snippet>line = lowerBound
while line &lt; lineNumber:
    ...
    if conditions:
        ...
        for lineIDX in range(line, line+6):
           ...
        line = line + 6
    else:
        line = line + 1
</snippet></ROW><ROW><id>14588681</id><snippet>@myapp.route('/foo')
def bar():
    # start tasks
    task_1 = a_long_process.delay(x, y)
    task_2 = another_long_process.delay(x, y)
    task_3 = yet_another_long_process.delay(x, y)
    # fetch results
    try:
        task_1_result = task_1.get(timeout=1)
        task_2_result = task_2.get(timeout=1)
        task_3_result = task_3.get(timeout=1)
    except TimeoutError:
        # Handle this or don't specify a timeout.
        raise
    # combine results
    return task_1 + task_2 + task_3
</snippet></ROW><ROW><id>14588889</id><snippet>#import tkinter
#Traceback (most recent call last):
#  File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;
#    import tkinter
#ImportError: No module named tkinter

import sys, Tkinter
sys.modules['tkinter'] = Tkinter # put the module where python looks first for modules
#import tkinter # now works!
</snippet></ROW><ROW><id>14588930</id><snippet>class SomeClass(object):
    def somemethod(self):
        return '''\
This text
does not need to be indented
at all.
In this text, newlines are preserved.
'''
        # but do continue the next line at the right indentation.
</snippet></ROW><ROW><id>14588930</id><snippet>foo = (
    "this text will be "
    "joined into one long string. "
    "Note that I don't need to concatenate these "
    "explictly. No newlines are included\n"
    "unless you insert them explicitly."
)
</snippet></ROW><ROW><id>14588930</id><snippet>+</snippet></ROW><ROW><id>14588930</id><snippet>foo = (
    "this text will be " +
    "joined into one long string. " + 
    "It is concatenated " +
    "explictly using the `+` operator."
)
</snippet></ROW><ROW><id>14588930</id><snippet>foo = "This is not " \
    "recommended"
</snippet></ROW><ROW><id>14588989</id><snippet>methodReference.im_self
</snippet></ROW><ROW><id>14588989</id><snippet>methodReference.im_class
</snippet></ROW><ROW><id>14588989</id><snippet>In [6]: methodReference. methodReference.im_class 
methodReference.im_func   methodReference.im_self
</snippet></ROW><ROW><id>14589213</id><snippet>QTableWidget</snippet></ROW><ROW><id>14589213</id><snippet>cellClicked</snippet></ROW><ROW><id>14589213</id><snippet>self.table.cellClicked.connect(self.cell_was_clicked)
</snippet></ROW><ROW><id>14589213</id><snippet>cell_was_clicked</snippet></ROW><ROW><id>14589213</id><snippet>def cell_was_clicked(self, row, column):
    print("Row %d and Column %d was clicked" % (row, column))
    item = self.table.itemAt(row, column)
    self.ID = item.text()
</snippet></ROW><ROW><id>14589213</id><snippet>currentRow</snippet></ROW><ROW><id>14589213</id><snippet>currentColumn</snippet></ROW><ROW><id>14589213</id><snippet>click</snippet></ROW><ROW><id>14589213</id><snippet>itemAt</snippet></ROW><ROW><id>14589213</id><snippet>item</snippet></ROW><ROW><id>14589213</id><snippet>.text()</snippet></ROW><ROW><id>14589213</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>14589263</id><snippet>changeIndex()</snippet></ROW><ROW><id>14589263</id><snippet>class MainWindow : public QMainWindow
{
    Q_OBJECT

    // ...

    private slots: 
        void changeIndex();

    private:
        Ui::MainWindow *ui;
}
</snippet></ROW><ROW><id>14589263</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>14589269</id><snippet># Echo server program
import socket

HOST = ''                 # Symbolic name meaning all available interfaces
PORT = 50007              # Arbitrary non-privileged port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()
print 'Connected by', addr
while 1:
    data = conn.recv(1024)
    if not data: break
    conn.sendall(data)
conn.close()

# Echo client program
import socket

HOST = 'daring.cwi.nl'    # The remote host
PORT = 50007              # The same port as used by the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
s.sendall('Hello, world')
data = s.recv(1024)
s.close()
print 'Received', repr(data)
</snippet></ROW><ROW><id>14589355</id><snippet>class A:
 def __init__(self):
   self.v = B()

class B:
 def __init__(self):
  self.list = [1,2,3]
 def function(self):
  self.list[2] = 1

x = A()
g = [x]
print g[0].v.function()
print g[0].v.list
</snippet></ROW><ROW><id>14589355</id><snippet>None
[1, 2, 1]
</snippet></ROW><ROW><id>14589392</id><snippet>a[::-1]
</snippet></ROW><ROW><id>14589392</id><snippet>[start:stop:step]</snippet></ROW><ROW><id>14589392</id><snippet>step</snippet></ROW><ROW><id>14589392</id><snippet>&gt;&gt;&gt; a = "hello"
&gt;&gt;&gt; a[::-1]
'olleh'
</snippet></ROW><ROW><id>14589445</id><snippet>@worker_ready.connect
    def at_start(sender, **k):
        with sender.app.connection() as conn:
             sender.app.send_task('app.modules.task', args,connection=conn, ...)
</snippet></ROW><ROW><id>14589954</id><snippet>setattr</snippet></ROW><ROW><id>14589954</id><snippet>&gt;&gt;&gt; class Foo(object):
...    def method(self): pass
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.method()
&gt;&gt;&gt; setattr(a,'method',1)
&gt;&gt;&gt; a.method()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
</snippet></ROW><ROW><id>14589954</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; setattr(a,'method',types.MethodType(lambda self: self.__class__.__name__,a))
&gt;&gt;&gt; a.method()
'Foo'
</snippet></ROW><ROW><id>14589954</id><snippet>def func(self):
    return self.__class__.__name__

setattr(a,'method',types.MethodType(func,a))
</snippet></ROW><ROW><id>14589984</id><snippet>PyObject *
PyCFunction_Call(PyObject *func, PyObject *arg, PyObject *kw)
{
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;

    switch (PyCFunction_GET_FLAGS(func) &amp; ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (kw == NULL || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
    case METH_OLDARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (kw == NULL || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f-&gt;m_ml-&gt;ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (kw == NULL || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f-&gt;m_ml-&gt;ml_name, size);
            return NULL;
        }
        break;
    case METH_OLDARGS:
        /* the really old style */
        if (kw == NULL || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                arg = PyTuple_GET_ITEM(arg, 0);
            else if (size == 0)
                arg = NULL;
            return (*meth)(self, arg);
        }
        break;
    default:
        PyErr_BadInternalCall();
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
             f-&gt;m_ml-&gt;ml_name);
    return NULL;
}
</snippet></ROW><ROW><id>14589984</id><snippet>static PyMethodDef methd = {"blah",ObjC_Class_msg_send,METH_VARARGS,"blech"};

static PyObject * ObjC_Class_getattro(ObjC_Class *self, PyObject *name)
{
    NSString *attrName = [NSString stringWithCString:PyString_AsString(name) encoding:NSUTF8StringEncoding];

    NSLog(@"Calling Object: %@", self-&gt;object);
    if([self-&gt;object respondsToSelector:NSSelectorFromString(attrName)])
    {
        methodName = attrName;
        PyObject* pyName = PyString_FromString(methd.ml_name);
        PyObject* pyfoo = PyCFunction_NewEx(&amp;methd,(PyObject*)self,pyName);
        Py_DECREF(name);

        return pyfoo;
    }
    else
    {
        return name;
    }
}
</snippet></ROW><ROW><id>14590025</id><snippet>    myFile = secure_filename(form.fileName.file.filename)
    form.fileName.file.save(PATH+myFile)
</snippet></ROW><ROW><id>14590035</id><snippet>tso1=tso.groupby(['Day','Year']).mean().unstack()
#################creat the datetime index#################################
date=[]
for i in range(len(tso1.index)-1):
    date.append(parser.parse(num2date(tso1.index[i]).replace(year=2000).isoformat(" ")))
date.append(parser.parse(num2date(tso1.index[len(tso1.index)-2]).replace(year=2000).isoformat(" ")))
######################################################################################################
ax = pandas.DataFrame(tso1.values,index=date).plot()
</snippet></ROW><ROW><id>14590128</id><snippet>&lt;h1&gt;this is foo page&lt;/h1&gt;
</snippet></ROW><ROW><id>14590128</id><snippet>&lt;h1&gt;this is foo page&lt;/h1&gt;
</snippet></ROW><ROW><id>14590128</id><snippet>  &lt;body&gt;
    {{ content | safe }}
  &lt;/body&gt;
</snippet></ROW><ROW><id>14590128</id><snippet>import flask

app = flask.Flask(__name__)

@app.route("/foo")
def foo():
    content = "&lt;h1&gt;this is foo content&lt;/h1&gt;"
    return flask.render_template("base.html", content=content)

@app.route("/bar")
def bar():
    content = "&lt;h1&gt;this is bar content&lt;/h1&gt;"
    return flask.render_template("child.html", content=content)

if __name__ == "__main__":
    app.run(debug=True)
</snippet></ROW><ROW><id>14590128</id><snippet>&lt;html&gt;
  &lt;head&gt;
    {% if title %}
    &lt;title&gt;{{title}}&lt;/title&gt;
    {% else %}
    &lt;title&gt;test&lt;/title&gt;
    {% endif %}
  &lt;/head&gt;
  &lt;body&gt;
    {% block content %}{{ content | safe }}{% endblock %}
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14590128</id><snippet>{% extends "base.html" %}
{% block content %}
  {{ super() }}
  &lt;h2&gt;And this bit comes from the child template&lt;/h2&gt;
{% endblock %}
</snippet></ROW><ROW><id>14590136</id><snippet>import sys
if '$visualstudio_py_debugger' in sys.modules:
    print("Running in Visual Studio")
else:
    print("Running outside Visual Studio")
</snippet></ROW><ROW><id>14590140</id><snippet>db.collection.find({}).sort("_id", -1).limit(N)
</snippet></ROW><ROW><id>14590140</id><snippet>_id</snippet></ROW><ROW><id>14590233</id><snippet>#!/usr/bin/env python
"""Command.

Usage:
  command start ID
  command finish ID FILE
  command (-h | --help)
  command (-v | --version)

Arguments:
  ID
  FILE     input file

Options:
  -h --help     Show this screen.
  -v --version  Show version.

"""
from docopt import docopt
from schema import Schema, Use, Or, SchemaError

if __name__ == '__main__':
    args = docopt(__doc__, version='command alpha')

    id_schema = Use(int, error='ID should be an int')
    file_schema = Or(None, Use(open, error='FILE should be readable'))
    try:
        args['ID'] = id_schema.validate(args['ID'])
        args['FILE'] = file_schema.validate(args['FILE'])
    except SchemaError as e:
        exit(e)

    print(args)
</snippet></ROW><ROW><id>14590233</id><snippet>schema = Schema({'ID': Use(int, error='ID should be an int'),
                 'FILE': Or(None, Use(open, error='FILE should be readable')),
                 object: object})
</snippet></ROW><ROW><id>14590233</id><snippet>object: object</snippet></ROW><ROW><id>14590233</id><snippet>'ID'</snippet></ROW><ROW><id>14590233</id><snippet>'FILE'</snippet></ROW><ROW><id>14590233</id><snippet>schema = Schema({'ID': Use(int, error='ID should be an int'),
                 'FILE': Or(None, Use(open, error='FILE should be readable')),
                 object: object})
</snippet></ROW><ROW><id>14590276</id><snippet>try:
    from EasyDialogs import AskPassword
    // 20 other lines
    getpass = AskPassword
except ImportError:
    getpass = default_getpass
</snippet></ROW><ROW><id>14590276</id><snippet>try:
    from EasyDialogs import AskPassword
except ImportError:
    getpass = default_getpass
else:
    // 20 other lines
    getpass = AskPassword
</snippet></ROW><ROW><id>14590276</id><snippet>except</snippet></ROW><ROW><id>14590276</id><snippet>try:
    from EasyDialogs import AskPassword
except ImportError:
    getpass = default_getpass
    return False // or throw Exception('something more descriptive')

// 20 other lines
getpass = AskPassword
</snippet></ROW><ROW><id>14590294</id><snippet>import subprocess</snippet></ROW><ROW><id>14590308</id><snippet>__call__</snippet></ROW><ROW><id>14590308</id><snippet>__call__</snippet></ROW><ROW><id>14590308</id><snippet>class Move(object):
    def __init__(self, Attr):
        if Attr:
            self.attr = Attr

        if hasattr(self, "attr"):
            self._func = self.hasTheAttr
        else:
            self._func = self.hasNoAttr

    def hasNoAttr(self):
        #no args!

    def hasTheAttr(func, arg1, arg2):
        #do things with the args

    def __call__(self,*args):
        return self._func(*args)
</snippet></ROW><ROW><id>14590351</id><snippet>origin=lower</snippet></ROW><ROW><id>14590351</id><snippet>imshow</snippet></ROW><ROW><id>14590351</id><snippet> import numpy as np
 im = plt.imshow(np.flipud(plt.imread('tas.png')), origin='lower')
 plt.show()
</snippet></ROW><ROW><id>14590391</id><snippet>&gt;&gt;&gt; __name__
'__main__'
&gt;&gt;&gt; def a():
...     print 'a'
... 
&gt;&gt;&gt; def b():
...     print 'b'
... 
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['__main__'].b = a
&gt;&gt;&gt; b()
a
</snippet></ROW><ROW><id>14590391</id><snippet>&gt;&gt;&gt; class A(object):
...     def a(self):
...             print 'a'
...     def b(self):
...             print 'b'
... 
&gt;&gt;&gt; A.b = A.a
&gt;&gt;&gt; x = A()
&gt;&gt;&gt; x.b()
a
</snippet></ROW><ROW><id>14590391</id><snippet>setattr</snippet></ROW><ROW><id>14590391</id><snippet>setattr(sys.modules['__main__'],'b',a)
setattr(A,'b',A.a)
</snippet></ROW><ROW><id>14590505</id><snippet>[-1]</snippet></ROW><ROW><id>14590505</id><snippet>lastRow = houseRows[-1]
</snippet></ROW><ROW><id>14590505</id><snippet>-2</snippet></ROW><ROW><id>14590585</id><snippet>environ['wsgi.input']</snippet></ROW><ROW><id>14590585</id><snippet>tempfile.TemporaryFile</snippet></ROW><ROW><id>14590585</id><snippet>StringIO</snippet></ROW><ROW><id>14590585</id><snippet>io.BytesIO</snippet></ROW><ROW><id>14590585</id><snippet>from tempfile import TemporaryFile
import os, cgi

def read(environ):
    length = int(environ.get('CONTENT_LENGTH', 0))
    stream = environ['wsgi.input']
    body = TemporaryFile(mode='w+b')
    while length &gt; 0:
        part = stream.read(min(length, 1024*200)) # 200KB buffer size
        if not part: break
        body.write(part)
        length -= len(part)
    body.seek(0)
    environ['wsgi.input'] = body
    return body

def Request(environ, start_response):
    # use cgi module to read data
    body = read(environ)
    form = cgi.FieldStorage(fp=body, environ=environ, keep_blank_values=True)
    # rest of your code
</snippet></ROW><ROW><id>14590585</id><snippet>environ</snippet></ROW><ROW><id>14590585</id><snippet>FieldStorage</snippet></ROW><ROW><id>14590619</id><snippet>from selenium import webdriver
browser = webdriver.Firefox()
browser.get("http://www.google.com")
for elem in browser.find_elements_by_xpath('.//span[@class = "gbts"]'):
    print elem.text
</snippet></ROW><ROW><id>14590619</id><snippet>text</snippet></ROW><ROW><id>14590619</id><snippet>WebElement</snippet></ROW><ROW><id>14590619</id><snippet>class WebElement(object):
    """Represents an HTML element.       
    ...
    ...

    @property
    def text(self):
        """Gets the text of the element."""
        return self._execute(Command.GET_ELEMENT_TEXT)['value']
</snippet></ROW><ROW><id>14590619</id><snippet>#  1. Modify your xpath expression
browser.find_elements_by_xpath('(.//span[@class = "gbts"])[3]')[0].text

#  2. Access it by list index
browser.find_elements_by_xpath('.//span[@class = "gbts"])')[2].text
</snippet></ROW><ROW><id>14590697</id><snippet>__all__</snippet></ROW><ROW><id>14590720</id><snippet>get_login_redirect_url</snippet></ROW><ROW><id>14590989</id><snippet>FULFILLMENT="/Users/david/Desktop/pds" # "/Volumes/FulfilmentArray/"
ARCH1="/Users/david/Desktop/etc" # "/Volumes/Arch_01/"

FILE="/tmp/files.txt"

# find all the paths and print them to a file
sudo find "$FULFILLMENT" "$ARCH1" -ls | python -c '
import sys
for line in sys.stdin:
    r = line.strip("\n").split(None, 10)
    fn = r.pop()
    print ",".join(r) + ",\"" + fn.replace("\"", "\"\"") + "\""
' &gt; $FILE 
</snippet></ROW><ROW><id>14591020</id><snippet>def twitterfeed(request):
   auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
   auth.set_access_token(access_key, access_secret)
   api = tweepy.API(auth)
   statuses =  tweepy.Cursor(api.friends_timeline).items(20)
   data = [s.text.encode('utf8') for s in statuses]
   return {"data": data}
#...
#...
#...
config = Configurator(settings=settings)
</snippet></ROW><ROW><id>14591088</id><snippet>log_[^_]*</snippet></ROW><ROW><id>14591123</id><snippet>Differ_init</snippet></ROW><ROW><id>14591123</id><snippet>-1</snippet></ROW><ROW><id>14591123</id><snippet>setup_differ</snippet></ROW><ROW><id>14591123</id><snippet>setup_differ</snippet></ROW><ROW><id>14591123</id><snippet>py_differ_set_eqTest</snippet></ROW><ROW><id>14591123</id><snippet>static int py_differ_set_eqTest(DIFFER* self, PyObject* value, void* closure)
{
    PyObject* tmp;

    TYPE_CHECK(PyFunction_Check, "eqTest must be a function");
    ASSIGN_MEMBER_NAME(self, value, eqTest);
    return 0;
}
</snippet></ROW><ROW><id>14591123</id><snippet>TYPE_CHECK</snippet></ROW><ROW><id>14591123</id><snippet>#define TYPE_CHECK(typeChecker, msg) if (value != Py_None &amp;&amp; !typeChecker(value)) \
    {PyErr_SetString(PyExc_TypeError, msg); return -1;}
</snippet></ROW><ROW><id>14591123</id><snippet>setup_differ</snippet></ROW><ROW><id>14591123</id><snippet>py_differ_set_eqTest</snippet></ROW><ROW><id>14591123</id><snippet>Differ_init</snippet></ROW><ROW><id>14591123</id><snippet>0</snippet></ROW><ROW><id>14591123</id><snippet>dir</snippet></ROW><ROW><id>14591123</id><snippet>TypeError</snippet></ROW><ROW><id>14591123</id><snippet>TYPE_CHECK</snippet></ROW><ROW><id>14591123</id><snippet>Differ_init</snippet></ROW><ROW><id>14591123</id><snippet>setup_differ</snippet></ROW><ROW><id>14591162</id><snippet>from collections import defaultdict
myHash = defaultdict(defaultdict) # dictionary
for row in read:
    myHash[row[0]][row[1]] = row[11]
</snippet></ROW><ROW><id>14591302</id><snippet>from argparse import ArgumentParser,SUPPRESS
p = ArgumentParser(description = 'foo',usage=SUPPRESS)
p.add_argument('-b', '--bar', help = 'a description')
p.parse_args()
</snippet></ROW><ROW><id>14591302</id><snippet>from argparse import ArgumentParser,SUPPRESS
import sys as _sys
from gettext import gettext as _

class MyParser(ArgumentParser):
    def error(self, message):    
        usage = self.usage
        self.usage = None
        self.print_usage(_sys.stderr)
        self.exit(2, _('%s: error: %s\n') % (self.prog, message))
        self.usage = usage


p = MyParser(description = 'foo',usage=SUPPRESS)
p.add_argument('-b', '--bar', help = 'a description')
p.parse_args()
</snippet></ROW><ROW><id>14591357</id><snippet>re.search(r"Name \([a-zA-Z0-9]+\)", line)
</snippet></ROW><ROW><id>14591357</id><snippet>+</snippet></ROW><ROW><id>14591357</id><snippet>+</snippet></ROW><ROW><id>14591357</id><snippet>?</snippet></ROW><ROW><id>14591357</id><snippet>*</snippet></ROW><ROW><id>14591357</id><snippet>{x,y}</snippet></ROW><ROW><id>14591357</id><snippet>x</snippet></ROW><ROW><id>14591357</id><snippet>y</snippet></ROW><ROW><id>14591357</id><snippet>[]</snippet></ROW><ROW><id>14591357</id><snippet>\w</snippet></ROW><ROW><id>14591427</id><snippet>args = [id, nya]
Check2('SoapMethodName', *args)
</snippet></ROW><ROW><id>14591494</id><snippet>sort</snippet></ROW><ROW><id>14591494</id><snippet>sorted</snippet></ROW><ROW><id>14591494</id><snippet>SortInputfile=open("InterpBerg1","r")
line=SortInputfile.readlines()
line.sort(key=lambda line: int(line.split()[0]))
map(SortOutputfile.write, line)
</snippet></ROW><ROW><id>14591494</id><snippet># read input file
with open(input_filename) as fh:
    lines = fh.readlines()

# sort lines
lines.sort(key=lambda line: int(line.split()[0]))

# write output file
with open(output_filename, 'w') as fh:
    fh.writelines(lines)
</snippet></ROW><ROW><id>14591548</id><snippet>args = self.queue.get()</snippet></ROW><ROW><id>14591548</id><snippet>import multiprocessing
import queue
import threading
import sys
import socket

MAX_THREAD_COUNT = multiprocessing.cpu_count()

def main(cur):
    cur.execute("""UPDATE ipv6
                      SET port_21 = 0,
                          port_80 = 0,
                          port_443 = 0
                    WHERE address = 'N/A'""")
    q = queue.Queue()
    for _ in range(MAX_THREAD_COUNT):
        CheckPort(q).start()
    cur.execute("""SELECT id_ipv6,
                          address
                     FROM ipv6
                    WHERE address != 'N/A'""")
    for row in cur.fetchall():
        q.put(row)
    q.join()
    for thread in threading.enumerate():
        if isinstance(thread, CheckPort):
            thread.stop()
            thread.join()

class CheckPort(threading.Thread):

    def __init__(self, q):
        super().__init__()
        self.__q = q
        self.__run = True

    def stop(self):
        self.__run = False

    def run(self):
        while self.__run:
            try:
                id, address = self.__q.get(True, 1)
            except queue.Empty:
                continue
            with lock:
                try:
                    cur.execute('''UPDATE ipv6
                                      SET port_21 = ?,
                                          port_80 = ?,
                                          port_443 = ?
                                    WHERE id_ipv6 = ?''',
                                self.check_port(address, 21),
                                self.check_port(address, 80),
                                self.check_port(address, 443),
                                id)
                    db.commit()
                except Exception as error:
                    print('Error:', error, file=sys.stdout)
                self.__q.task_done()

    @staticmethod
    def check_port(address, port):
        sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
        sock.settimeout(2)
        try:
            sock.connect((address, port))
        except socket.timeout:
            return 0
        else:
            sock.shutdown(socket.SHUT_RDWR)
            sock.close()
            return 1

if __name__ == '__main__':
    try:
        main(cur)
    except Exception as error:
        print('Error:', error, file=sys.stdout)
</snippet></ROW><ROW><id>14591625</id><snippet>size = len(data)</snippet></ROW><ROW><id>14591681</id><snippet>    RadioField('Label', choices=[('value','description'),('value_two','whatever')])
</snippet></ROW><ROW><id>14591698</id><snippet>ncols = 2
nrows = 2

inset_hfrac = .3
inset_vfrac = .3

inset_hfrac_offset = .6
inset_vfrac_offset = .6

top_pad = .1
bottom_pad = .1
left_pad = .1
right_pad = .1

hspace = .1
vspace = .1

ax_width = (1 - left_pad - right_pad - (ncols - 1) * hspace) / ncols
ax_height = (1 - top_pad - bottom_pad - (nrows - 1) * vspace) / nrows

fig = figure()

ax_lst = []
for j in range(ncols):
    for k in range(nrows):
        a_bottom = bottom_pad + k * ( ax_height + vspace)
        a_left = left_pad + j * (ax_width + hspace)

        inset_bottom = a_bottom + inset_vfrac_offset * ax_height
        inset_left = a_left + inset_hfrac_offset * ax_width

        ax = fig.add_axes([a_left, a_bottom, ax_width, ax_height])
        ax_in = fig.add_axes([inset_left, inset_bottom, ax_width * inset_hfrac, ax_height *  inset_vfrac])
        ax_lst.append((ax,ax_in))
</snippet></ROW><ROW><id>14591698</id><snippet>tight_layout</snippet></ROW><ROW><id>14591796</id><snippet>list</snippet></ROW><ROW><id>14591796</id><snippet>dict</snippet></ROW><ROW><id>14591796</id><snippet>str</snippet></ROW><ROW><id>14591796</id><snippet>tuple</snippet></ROW><ROW><id>14591796</id><snippet>list</snippet></ROW><ROW><id>14591796</id><snippet>dict</snippet></ROW><ROW><id>14591796</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a
[1, 2, 3, 4]
&gt;&gt;&gt; b
[1, 2, 3, 4]
&gt;&gt;&gt; a[2] = 'x'
&gt;&gt;&gt; a
[1, 2, 'x', 4]
&gt;&gt;&gt; b
[1, 2, 'x', 4]
</snippet></ROW><ROW><id>14591796</id><snippet>list</snippet></ROW><ROW><id>14591796</id><snippet>new_list = old_list[:]  # the slicing at the end just takes the whole list
</snippet></ROW><ROW><id>14591796</id><snippet>dict</snippet></ROW><ROW><id>14591796</id><snippet>new_dict = old_dict.copy()
</snippet></ROW><ROW><id>14591796</id><snippet>copy</snippet></ROW><ROW><id>14591796</id><snippet>deepcopy</snippet></ROW><ROW><id>14591796</id><snippet>copy</snippet></ROW><ROW><id>14591875</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14591875</id><snippet>unset PYTHONPATH
source /path/to/virtualenv/bin/activate
</snippet></ROW><ROW><id>14591875</id><snippet>virtualenv --no-site-packages ENV</snippet></ROW><ROW><id>14591875</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14591875</id><snippet>activate</snippet></ROW><ROW><id>14591875</id><snippet>unset PYTHONPATH</snippet></ROW><ROW><id>14591875</id><snippet>deactivate</snippet></ROW><ROW><id>14591882</id><snippet>regexp</snippet></ROW><ROW><id>14591882</id><snippet>re.M</snippet></ROW><ROW><id>14591882</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>14591941</id><snippet>(root)
 |- html
 |  |- .htaccess
 |  |- ...
 |- lib
    |- lib1
    |  |- script1.py
    |- lib2
       |- script2.py

import sys
for path in ("/lib/lib1", "/lib/lib2",...):
    if not path in sys.path:
        sys.path.append(path)

import script1        # should work with the right paths
</snippet></ROW><ROW><id>14592440</id><snippet>range</snippet></ROW><ROW><id>14592440</id><snippet>sum</snippet></ROW><ROW><id>14592440</id><snippet>&gt;&gt;&gt; x = input("Please input an integer: ")
Please input an integer: 5
&gt;&gt;&gt; x = int(x)
&gt;&gt;&gt;
&gt;&gt;&gt; for i in range(1, x+1):
...     nums = range(1, i+1)
...     print(' + '.join(map(str, nums)), '=', sum(nums))
...
1 = 1
1 + 2 = 3
1 + 2 + 3 = 6
1 + 2 + 3 + 4 = 10
1 + 2 + 3 + 4 + 5 = 15
</snippet></ROW><ROW><id>14592440</id><snippet>range(1, x+1)</snippet></ROW><ROW><id>14592440</id><snippet>[1, 2, 3, 4, 5]</snippet></ROW><ROW><id>14592440</id><snippet>nums = range(1, i+1)</snippet></ROW><ROW><id>14592440</id><snippet>i</snippet></ROW><ROW><id>14592440</id><snippet>range</snippet></ROW><ROW><id>14592440</id><snippet>' + '.join(map(str, nums))</snippet></ROW><ROW><id>14592440</id><snippet>map(str, nums)</snippet></ROW><ROW><id>14592440</id><snippet>nums</snippet></ROW><ROW><id>14592440</id><snippet>str</snippet></ROW><ROW><id>14592440</id><snippet>join</snippet></ROW><ROW><id>14592440</id><snippet>' + '.join</snippet></ROW><ROW><id>14592440</id><snippet>join</snippet></ROW><ROW><id>14592440</id><snippet>sum(nums)</snippet></ROW><ROW><id>14592440</id><snippet>range(1, i+1)</snippet></ROW><ROW><id>14592440</id><snippet>range(1, 2)</snippet></ROW><ROW><id>14592440</id><snippet>sum(nums)</snippet></ROW><ROW><id>14592440</id><snippet>range(1, 3)</snippet></ROW><ROW><id>14592440</id><snippet>sum(nums)</snippet></ROW><ROW><id>14592446</id><snippet>data = { "say_hello" : { "name": "World", "times": 4 } }
</snippet></ROW><ROW><id>14592446</id><snippet>url = "http://127.0.0.1:7789/"
</snippet></ROW><ROW><id>14592608</id><snippet>stdin</snippet></ROW><ROW><id>14592608</id><snippet>stdout</snippet></ROW><ROW><id>14592608</id><snippet>stdin</snippet></ROW><ROW><id>14592608</id><snippet>stdout</snippet></ROW><ROW><id>14592608</id><snippet>stdin</snippet></ROW><ROW><id>14592608</id><snippet>stdout</snippet></ROW><ROW><id>14592608</id><snippet>import os
import sys

if os.isatty(sys.stdout.fileno()):
    # print error message text
else:
    # display GUI message
</snippet></ROW><ROW><id>14592608</id><snippet>DISPLAY</snippet></ROW><ROW><id>14592608</id><snippet>stdin</snippet></ROW><ROW><id>14592608</id><snippet>stdout</snippet></ROW><ROW><id>14592608</id><snippet>/dev/null</snippet></ROW><ROW><id>14592663</id><snippet>rbf</snippet></ROW><ROW><id>14592663</id><snippet>linear</snippet></ROW><ROW><id>14592663</id><snippet>rbf</snippet></ROW><ROW><id>14592663</id><snippet>gamma</snippet></ROW><ROW><id>14592663</id><snippet>gamma</snippet></ROW><ROW><id>14592663</id><snippet>1/# features</snippet></ROW><ROW><id>14592663</id><snippet>SVR</snippet></ROW><ROW><id>14592663</id><snippet>svr = SVR(kernel='linear', C=1.0, epsilon=0.2)
</snippet></ROW><ROW><id>14592663</id><snippet>5 &lt; y &lt; 15</snippet></ROW><ROW><id>14592663</id><snippet>nTrain = np.floor(nCases *2.0 / 3.0)
import random
ids = range(nCases)
random.shuffle(ids)

trainX,trainY,testX,testY = [],[],[],[]
for i, idx in enumerate(ids):
    if i &lt; nTrain:
        trainX.append(X[idx])
        trainY.append(y[idx])
    else:
        testX.append(X[idx])
        testY.append(y[idx])
</snippet></ROW><ROW><id>14592663</id><snippet>rbf</snippet></ROW><ROW><id>14592663</id><snippet>SVR</snippet></ROW><ROW><id>14592663</id><snippet>svr = SVR(kernel='rbf',  C=1.0, epsilon=0.2, gamma=.0001)
</snippet></ROW><ROW><id>14592710</id><snippet>In [20]: import re

In [21]: s = '{[]}{([])}()'

In [22]: max(re.findall("[\(\[\{]+",s),key=len)
Out[22]: '{(['
</snippet></ROW><ROW><id>14592894</id><snippet>cgi.parse_header()</snippet></ROW><ROW><id>14592894</id><snippet>_, params = cgi.parse_header('text/html; charset=utf-8')
print params['charset'] # -&gt; utf-8
</snippet></ROW><ROW><id>14592894</id><snippet>&lt;meta&gt;</snippet></ROW><ROW><id>14592894</id><snippet>requests</snippet></ROW><ROW><id>14592894</id><snippet>import requests # pip install requests

r = requests.get(url)
unicode_str = r.text # may use `chardet` to auto-detect encoding
</snippet></ROW><ROW><id>14592894</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14592894</id><snippet>from bs4 import BeautifulSoup # pip install beautifulsoup4

soup = BeautifulSoup(urllib2.urlopen(url)) # may use `cchardet` for speed
# ...
</snippet></ROW><ROW><id>14592894</id><snippet>bs4.UnicodeDammit</snippet></ROW><ROW><id>14592894</id><snippet>from bs4 import UnicodeDammit

dammit = UnicodeDammit(b"Sacr\xc3\xa9 bleu!")
print(dammit.unicode_markup)
# -&gt; Sacré bleu!
print(dammit.original_encoding)
# -&gt; utf-8
</snippet></ROW><ROW><id>14592999</id><snippet>simplejson</snippet></ROW><ROW><id>14592999</id><snippet>json</snippet></ROW><ROW><id>14593110</id><snippet>wtforms.fields.SelectMultipleField</snippet></ROW><ROW><id>14593460</id><snippet>def chunkRecords(records):
    record = []
    for r in records:
        if r[-1] == ':':
            if record:
                yield record
            record = [r[:-1]]
        else:
            record.append(r)
    if record:
        yield record 
</snippet></ROW><ROW><id>14593460</id><snippet>for record in chunkRecords(records):
    # record is a list
</snippet></ROW><ROW><id>14593460</id><snippet>records = list(chunkRecords(records))
</snippet></ROW><ROW><id>14593460</id><snippet>&gt;&gt;&gt; records = ["record_a:", "a", "b", "record_b:", "1", "2", "3", "4"]
&gt;&gt;&gt; records = list(chunkRecords(records))
&gt;&gt;&gt; records
[['record_a', 'a', 'b'], ['record_b', '1', '2', '3', '4']]
</snippet></ROW><ROW><id>14593618</id><snippet>&gt;&gt;&gt; def remove_duplicate_blocks(template):
        regex = '\$\{([\w]+)\}'
        def alt_seen(matchobj):
            x = matchobj.group(1)
            if x not in seen and not seen_add(x): return '${%s}' % x
            else: return '(?P=%s)' % x
        seen = set()
        seen_add = seen.add
        return re.sub(regex, alt_seen, template)
</snippet></ROW><ROW><id>14593618</id><snippet>&gt;&gt;&gt; unique_blocks_template = remove_duplicate_blocks(template)
&gt;&gt;&gt; print unique_blocks_template
/data/${year}_${month}_${day}/(?P=year)(?P=month)(?P=day)_${type}_${id}.dat

&gt;&gt;&gt; string.Template(unique_blocks_template).safe_substitute(blocks)
'/data/(?P&lt;year&gt;\\d{4})_(?P&lt;month&gt;\\d{2})_(?P&lt;day&gt;\\d{2})/(?P=year)(?P=month)(?P=day)_(?P&lt;type&gt;[BDPCLNIYSQJ])_(?P&lt;id&gt;\\d{8}).dat'
</snippet></ROW><ROW><id>14594003</id><snippet>import sys
import random
from PIL import Image

BLOCKLEN = 64 # Adjust and be careful here.

img = Image.open(sys.argv[1])
width, height = img.size

xblock = width / BLOCKLEN
yblock = height / BLOCKLEN
blockmap = [(xb*BLOCKLEN, yb*BLOCKLEN, (xb+1)*BLOCKLEN, (yb+1)*BLOCKLEN)
        for xb in xrange(xblock) for yb in xrange(yblock)]

shuffle = list(blockmap)
random.shuffle(shuffle)

result = Image.new(img.mode, (width, height))
for box, sbox in zip(blockmap, shuffle):
    c = img.crop(sbox)
    result.paste(c, box)
result.save(sys.argv[2])
</snippet></ROW><ROW><id>14594003</id><snippet>BLOCKLEN = 1</snippet></ROW><ROW><id>14594003</id><snippet>BLOCKLEN = 64</snippet></ROW><ROW><id>14594003</id><snippet>BLOCKLEN = 128</snippet></ROW><ROW><id>14594066</id><snippet>flask.Markup</snippet></ROW><ROW><id>14594066</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>14594066</id><snippet>bar.html</snippet></ROW><ROW><id>14594066</id><snippet>footext</snippet></ROW><ROW><id>14594066</id><snippet>import flask

app = flask.Flask(__name__)

footext = """f
o
&lt;script&gt;alert('oops')&lt;/script&gt;
o"""


@app.route("/foo")
def foo():
    text = ""
    for line in footext.split('\n'):
        text += flask.Markup.escape(line) + flask.Markup('&lt;br /&gt;')
    return flask.render_template("bar.html", text=text)

if __name__ == "__main__":
    app.run(debug=True)
</snippet></ROW><ROW><id>14594066</id><snippet>footext</snippet></ROW><ROW><id>14594066</id><snippet>@app.route("/foo")
def foo():
    return flask.render_template("bar.html", text=footext.split('\n'))
</snippet></ROW><ROW><id>14594066</id><snippet>&lt;html&gt;
    {%- for line in text -%}
        {{ line }}
        {%- if not loop.last -%}
            &lt;br /&gt;
        {%- endif -%}
    {%- endfor -%}
&lt;/html&gt;
</snippet></ROW><ROW><id>14594066</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>14594204</id><snippet>def line(lines, query):
    line = lines.readline()
    iterator(line, lines, word, query)
</snippet></ROW><ROW><id>14594204</id><snippet>line = lines.readline()</snippet></ROW><ROW><id>14594204</id><snippet>for</snippet></ROW><ROW><id>14594204</id><snippet>this</snippet></ROW><ROW><id>14594204</id><snippet>line</snippet></ROW><ROW><id>14594205</id><snippet>import urllib2
from multiprocessing.dummy import Pool

def generate_urls(): # generate some dummy urls
    for i in range(100):
        yield 'http://example.com?param=%d' % i

def get_url(url):
    try: return url, urllib2.urlopen(url).read(), None
    except EnvironmentError as e:
         return url, None, e

pool = Pool(20) # limit number of concurrent connections
for url, result, error in pool.imap_unordered(get_url, generate_urls()):
    if error is None:
       print result,
</snippet></ROW><ROW><id>14594557</id><snippet>lista = [[1,'a'],[1,'b'],[1,'a'],[2,'s'],[2,'r'],[3,'e'],[3,'k'],[3,'t'],[3,'y']]

&gt;&gt;&gt; last_a = None
&gt;&gt;&gt; toggle = 'y'
&gt;&gt;&gt; for a, b in lista:
...     if last_a != a:
...         toggle = 'x' if toggle != 'x' else 'y'
...         last_a = a
...     print(a, b, toggle)
... 
(1, 'a', 'x')
(1, 'b', 'x')
(1, 'a', 'x')
(2, 's', 'y')
(2, 'r', 'y')
(3, 'e', 'x')
(3, 'k', 'x')
(3, 't', 'x')
(3, 'y', 'x')
</snippet></ROW><ROW><id>14594595</id><snippet>writelines</snippet></ROW><ROW><id>14594595</id><snippet>output_file.writelines(line+"\n" for line in combination_as_strings)
</snippet></ROW><ROW><id>14594631</id><snippet>.__file__</snippet></ROW><ROW><id>14594631</id><snippet>import os
path = os.path.dirname(my_module.__file__)
process_script = path+ 'process.py'
put(process_script)
</snippet></ROW><ROW><id>14594807</id><snippet>def catch_error(err_val):
    def wrapper(func):
        def caught(*args):
            try:
                return func(*args)
            except Exception as err:
                question = '\n{0} failed. Continue? (yes/no): '.format(func.func_name)
                answer = raw_input(question)
                if answer.lower() in ['yes','y']:
                    pass
                else:
                    print "   Aborting! Error that caused failure:\n"
                    raise err 
                return err_val
        return caught
    return wrapper
</snippet></ROW><ROW><id>14594807</id><snippet>@catch_error({})
def returns_a_dict(*args, **kwargs):
    return {'a': 'foo', 'b': 'bar'}
</snippet></ROW><ROW><id>14594807</id><snippet>*args</snippet></ROW><ROW><id>14594807</id><snippet>**kwargs</snippet></ROW><ROW><id>14594807</id><snippet>wrapped_function(something=value)</snippet></ROW><ROW><id>14594807</id><snippet>if a: pass</snippet></ROW><ROW><id>14594807</id><snippet>if !a</snippet></ROW><ROW><id>14594807</id><snippet>def catch_error(err_val):
    def wrapper(func):
        def caught(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as err:
                question = '\n{0} failed. Continue? (yes/no): '.format(func.func_name)
                answer = raw_input(question)
                if answer.lower() not in ['yes','y']:
                    print "   Aborting! Error that caused failure:\n"
                    raise err
                return err_val
        return caught
    return wrapper
</snippet></ROW><ROW><id>14594888</id><snippet>bytearray = (floatarray*255).astype('uint8')
</snippet></ROW><ROW><id>14594888</id><snippet>floatarray /= floatarray.max()</snippet></ROW><ROW><id>14595219</id><snippet>getCurrentPosition()</snippet></ROW><ROW><id>14595219</id><snippet>getCurrentPosition()</snippet></ROW><ROW><id>14595219</id><snippet>showPosition()</snippet></ROW><ROW><id>14595219</id><snippet>false</snippet></ROW><ROW><id>14595219</id><snippet>get_location()</snippet></ROW><ROW><id>14595219</id><snippet>showPosition()</snippet></ROW><ROW><id>14595219</id><snippet>getCurrentPosition()</snippet></ROW><ROW><id>14595231</id><snippet>mtk</snippet></ROW><ROW><id>14595231</id><snippet>mtk</snippet></ROW><ROW><id>14595231</id><snippet>tuple</snippet></ROW><ROW><id>14595231</id><snippet>def __key(self):
    mtk = tuple(self.mtk)
    return tuple([self.id, self.inchikey, self.mts, mtk, self.mtb, mtk])
</snippet></ROW><ROW><id>14595231</id><snippet>&gt;&gt;&gt; met = Metabolite('this_metabolite', '10002', 'AADBRHFDG')
&gt;&gt;&gt; hash(met)
7276685348836095537
</snippet></ROW><ROW><id>14595304</id><snippet>zipfile.py</snippet></ROW><ROW><id>14595307</id><snippet>right = False
def func():
    right = True
func()
print (right)  #right is still False in the outer scope.
</snippet></ROW><ROW><id>14595307</id><snippet>right = False
def func():
    global right
    right = True
func()
print (right)
</snippet></ROW><ROW><id>14595307</id><snippet>right</snippet></ROW><ROW><id>14595307</id><snippet>class Foo(object):
    def __init__(self):
        self.right = False
    def func(self):
        self.right = True

a = Foo() #calls __init__ implicitly
print(a.right)  #should be False -- We set this in __init__
a.func()  #change state of `a`
print(a.right)  #Now it's True!
</snippet></ROW><ROW><id>14595307</id><snippet>import Tkinter as tk

class App(object):
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False

    def keyPressed(self,event):
        print "HERE"
        if event.keysym == 'Escape':
            root.destroy()
        elif event.keysym == 'Right':
            self.right = True
        elif event.keysym == 'Left':
            self.left = True
        elif event.keysym == 'Up':
            self.up = True

    def keyReleased(self,event):
        if event.keysym == 'Right':
            self.right = False
        elif event.keysym == 'Left':
            self.left = False
        elif event.keysym == 'Up':
            self.up = False

    def task(self):
        if self.right:
            print 'Right'
        elif self.left:
            print 'Left'
        elif self.up:
            print 'Forward'
        root.after(20,self.task)

application = App()
root = tk.Tk()
print( "Press arrow key (Escape key to exit):" )

root.bind_all('&lt;Key&gt;', application.keyPressed)
root.bind_all('&lt;KeyRelease&gt;', application.keyReleased)
root.after(20,application.task)

root.mainloop()
</snippet></ROW><ROW><id>14595379</id><snippet>ext.db</snippet></ROW><ROW><id>14595379</id><snippet>ndb</snippet></ROW><ROW><id>14595379</id><snippet>MailMessageModel</snippet></ROW><ROW><id>14595379</id><snippet>class MailMessage(db.Model):
    m_text = db.TextProperty()
    m_from = db.ReferenceProperty(reference_class=UserModel)
    m_to = db.ReferenceProperty(reference_class=UserModel)
</snippet></ROW><ROW><id>14595379</id><snippet>class MailMessage(ndb.Model):
    m_text = ndb.TextProperty()
    m_from = ndb.KeyProperty(kind=UserModel)
    m_to = ndb.KeyProperty(kind=UserModel)
</snippet></ROW><ROW><id>14595380</id><snippet>column_property</snippet></ROW><ROW><id>14595380</id><snippet>hybrid_property</snippet></ROW><ROW><id>14595380</id><snippet>class UserList(Base):
    ...
    contactCount = column_property(
        select(
            [func.count()],
            contact_id == Contact.id,
        ).label('contactCount'),
        deferred=True,
    )
</snippet></ROW><ROW><id>14595403</id><snippet>extent</snippet></ROW><ROW><id>14595403</id><snippet>im = plt.imshow(np.flipud(plt.imread('tas.png')), 
                origin='lower', 
                extent=[35, 75, 0, 16])
</snippet></ROW><ROW><id>14595403</id><snippet>imshow</snippet></ROW><ROW><id>14595427</id><snippet>dtp.parse</snippet></ROW><ROW><id>14595427</id><snippet>dtp.parse('1994/01'+'/01')
</snippet></ROW><ROW><id>14595457</id><snippet>dict</snippet></ROW><ROW><id>14595457</id><snippet>import json
jstr = '''{
   "EZMessage":{
      "action":"account.cash",
      "data":{
         "authToken":"123456",
         "account":"#ACCOUNTID#",
         "portfolio":"true",
         "historical":"true"
      }
   }
}'''

j = json.loads(jstr)
j['EZMessage']['data']['authToken'] = 654321
jstr = json.dumps(j)
</snippet></ROW><ROW><id>14595585</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>14595585</id><snippet>.flat</snippet></ROW><ROW><id>14595585</id><snippet>set</snippet></ROW><ROW><id>14595585</id><snippet>set(array.flat)
</snippet></ROW><ROW><id>14595585</id><snippet>list(set(array.flat))
</snippet></ROW><ROW><id>14595585</id><snippet>&gt;&gt;&gt; array = np.zeros((10,12,42,53))
&gt;&gt;&gt; list(set(array.flat))
[0.0]
</snippet></ROW><ROW><id>14595585</id><snippet>np.unique</snippet></ROW><ROW><id>14595585</id><snippet>&gt;&gt;&gt; array = np.zeros((10,12),dtype=int)
&gt;&gt;&gt; print array
[[0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0]]
&gt;&gt;&gt; np.unique(array)
array([0])
&gt;&gt;&gt; array[0,5] = 1
&gt;&gt;&gt; array[4,10] = 42
&gt;&gt;&gt; np.unique(array)
array([ 0,  1, 42])
</snippet></ROW><ROW><id>14595585</id><snippet>from itertools import product

items = set(tuple(a[itr+(slice(None),)]) for itr in product(*[range(x) for x in a.shape[:-1]]))
print items
</snippet></ROW><ROW><id>14595585</id><snippet>array[X,Y,:]
</snippet></ROW><ROW><id>14595585</id><snippet>X</snippet></ROW><ROW><id>14595585</id><snippet>Y</snippet></ROW><ROW><id>14595585</id><snippet>itertools.product</snippet></ROW><ROW><id>14595585</id><snippet>X</snippet></ROW><ROW><id>14595585</id><snippet>Y</snippet></ROW><ROW><id>14595585</id><snippet>[range(x) for x in array.shape[:-1]]
</snippet></ROW><ROW><id>14595585</id><snippet>indices_generator = product(*[range(x) for x in array.shape[:-1]])
</snippet></ROW><ROW><id>14595585</id><snippet>__getitem__</snippet></ROW><ROW><id>14595585</id><snippet>(X,Y,:)</snippet></ROW><ROW><id>14595585</id><snippet>(X,Y)</snippet></ROW><ROW><id>14595585</id><snippet>all_items = ( array[idx+(slice(None),)] for idx in indices_generator )
</snippet></ROW><ROW><id>14595585</id><snippet>unique_items = set(tuple(item) for item in all_items)
</snippet></ROW><ROW><id>14595828</id><snippet>.grid</snippet></ROW><ROW><id>14595828</id><snippet>None</snippet></ROW><ROW><id>14595828</id><snippet>fr_header</snippet></ROW><ROW><id>14595828</id><snippet>None</snippet></ROW><ROW><id>14595828</id><snippet>Tkinter</snippet></ROW><ROW><id>14595828</id><snippet>None</snippet></ROW><ROW><id>14595828</id><snippet>Tk()</snippet></ROW><ROW><id>14595828</id><snippet>grid</snippet></ROW><ROW><id>14595828</id><snippet>fr_header=ttk.Frame(root,width=100,height=100,relief=GROOVE)
fr_header.grid(row=0,column=0)
</snippet></ROW><ROW><id>14595891</id><snippet>re.sub(r'(?&lt;!\s)(\{)',r' \1','{{{{{{')
</snippet></ROW><ROW><id>14595891</id><snippet>{</snippet></ROW><ROW><id>14595891</id><snippet>(?&lt;!\s)</snippet></ROW><ROW><id>14595891</id><snippet>{</snippet></ROW><ROW><id>14595949</id><snippet>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']
</snippet></ROW><ROW><id>14596136</id><snippet>import collections
def to_sequence(item):
    return item if isinstance(item,collections.Sequence) else [item]
</snippet></ROW><ROW><id>14596136</id><snippet>to_sequence('foo')</snippet></ROW><ROW><id>14596136</id><snippet>'foo'</snippet></ROW><ROW><id>14596136</id><snippet>['foo']</snippet></ROW><ROW><id>14596136</id><snippet>['f','o','o']</snippet></ROW><ROW><id>14596136</id><snippet>import collections
def to_sequence(item):
    return item if isinstance(item,collections.Sequence) and hasattr(item,'__iter__') else [item]
</snippet></ROW><ROW><id>14596264</id><snippet>global</snippet></ROW><ROW><id>14596264</id><snippet>def main():
    global REDIS_QUEUE
    REDIS_QUEUE = redis.StrictRedis(host=SERVER_IP, port=6379, db=0)
    # whatever else
</snippet></ROW><ROW><id>14596264</id><snippet>main</snippet></ROW><ROW><id>14596380</id><snippet>#!/usr/bin/python

import subprocess
import sys
import os
import signal

U_LOG_FILE_PATH = "u.log"
K_LOG_FILE_PATH = "k.log"
U_COMMAND = "adb logcat &gt; " + U_LOG_FILE_PATH
K_COMMAND = "adb shell cat /proc/kmsg &gt; " + K_LOG_FILE_PATH

LOG_PID_PATH="log-pid"

def start_log():
    if(os.path.isfile(LOG_PID_PATH) == True):
        print "log process already started, found file: ", LOG_PID_PATH
        return
    file = open(LOG_PID_PATH, "w")
    print "starting log process: ", U_COMMAND
    proc = subprocess.Popen(U_COMMAND,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        shell=True, preexec_fn=os.setsid)
    print "log process1 id = ", proc.pid
    file.write(str(proc.pid) + "\n")
    print "starting log process: ", K_COMMAND
    proc = subprocess.Popen(K_COMMAND,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        shell=True, preexec_fn=os.setsid)
    print "log process2 id = ", proc.pid
    file.write(str(proc.pid) + "\n")
    file.close()

def stop_log():
    if(os.path.isfile(LOG_PID_PATH) != True):
        print "log process not started, can not find file: ", LOG_PID_PATH
        return
    print "terminating log processes"
    file = open(LOG_PID_PATH, "r")
    log_pid1 = int(file.readline())
    log_pid2 = int(file.readline())
    file.close()
    print "log-pid1 = ", log_pid1
    print "log-pid2 = ", log_pid2
    os.killpg(log_pid1, signal.SIGTERM)
    print "logprocess1 killed"
    os.killpg(log_pid2, signal.SIGTERM)
    print "logprocess2 killed"
    subprocess.call("rm " + LOG_PID_PATH, shell=True)

def print_usage(str):
    print "usage: ", str, "[start|stop]"

# Main script
if(len(sys.argv) != 2):
    print_usage(sys.argv[0])
    sys.exit(1)

if(sys.argv[1] == "start"):
    start_log()
elif(sys.argv[1] == "stop"):
    stop_log()
else:
    print_usage(sys.argv[0])
    sys.exit(1)

sys.exit(0)
</snippet></ROW><ROW><id>14596653</id><snippet>post_dict</snippet></ROW><ROW><id>14596653</id><snippet>encoding</snippet></ROW><ROW><id>14596653</id><snippet>json.dumps()</snippet></ROW><ROW><id>14596721</id><snippet>tv_sec</snippet></ROW><ROW><id>14596721</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14596721</id><snippet>datetime</snippet></ROW><ROW><id>14596721</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14596813</id><snippet>return</snippet></ROW><ROW><id>14596813</id><snippet>return</snippet></ROW><ROW><id>14596813</id><snippet>@view_config(renderer='templates/edit.pt')</snippet></ROW><ROW><id>14596813</id><snippet>HTTPFound()</snippet></ROW><ROW><id>14596813</id><snippet>renderer</snippet></ROW><ROW><id>14596813</id><snippet>@view_config()</snippet></ROW><ROW><id>14596813</id><snippet>__init__.py</snippet></ROW><ROW><id>14596813</id><snippet>@view_config</snippet></ROW><ROW><id>14596813</id><snippet>return</snippet></ROW><ROW><id>14596813</id><snippet>return {}</snippet></ROW><ROW><id>14596825</id><snippet>tester = hand</snippet></ROW><ROW><id>14596825</id><snippet>hand</snippet></ROW><ROW><id>14596825</id><snippet>tester</snippet></ROW><ROW><id>14596825</id><snippet>hand</snippet></ROW><ROW><id>14596825</id><snippet>id</snippet></ROW><ROW><id>14596825</id><snippet>print id(tester)
print id(hand)  #should be the same as `id(tester)`
</snippet></ROW><ROW><id>14596825</id><snippet>is</snippet></ROW><ROW><id>14596825</id><snippet>print tester is hand  #should return `True`
</snippet></ROW><ROW><id>14596825</id><snippet>.copy</snippet></ROW><ROW><id>14596825</id><snippet>tester = hand.copy()
</snippet></ROW><ROW><id>14596906</id><snippet>.py</snippet></ROW><ROW><id>14596906</id><snippet>entry_points</snippet></ROW><ROW><id>14596906</id><snippet>pip.main()</snippet></ROW><ROW><id>14596906</id><snippet>pip</snippet></ROW><ROW><id>14596906</id><snippet>setup.py</snippet></ROW><ROW><id>14596906</id><snippet>  entry_points=dict(console_scripts=['pip=pip:main', 
          'pip-%s=pip:main' % sys.version[:3]]),
</snippet></ROW><ROW><id>14596906</id><snippet>entry_points</snippet></ROW><ROW><id>14596906</id><snippet>#! /usr/bin/env python</snippet></ROW><ROW><id>14597158</id><snippet>import re
regex = re.compile(".*?\((.*?)\)")
result = re.findall(regex, mystring)
</snippet></ROW><ROW><id>14597158</id><snippet>start = mystring.find( '(' )
end = mystring.find( ')' )
if start != -1 and end != -1:
  result = mystring[start+1:end]
</snippet></ROW><ROW><id>14597545</id><snippet>PackageSetup.py</snippet></ROW><ROW><id>14597545</id><snippet>python PackageSetup.py</snippet></ROW><ROW><id>14597545</id><snippet>PackageSetup.py</snippet></ROW><ROW><id>14597545</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>14597545</id><snippet>python</snippet></ROW><ROW><id>14597680</id><snippet>sys._getframe(1).f_globals.get('__name__', '__main__')
</snippet></ROW><ROW><id>14597872</id><snippet>return string[0:2] + string[0:2:-1]
</snippet></ROW><ROW><id>14597872</id><snippet>return string[0:2] + string[-2:]
</snippet></ROW><ROW><id>14597872</id><snippet>string[0:2:-1]</snippet></ROW><ROW><id>14598534</id><snippet>http://example.com/products/my_awesome_widget
</snippet></ROW><ROW><id>14598534</id><snippet>http://example.com/products/423
</snippet></ROW><ROW><id>14598534</id><snippet>http://example.com/products/my-awesome-widget/243
</snippet></ROW><ROW><id>14598813</id><snippet>import numpy
import pylab

arr = numpy.asarray

x = arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])   # put comma between numbers
y = arr([[ 0.        ],                   # make it vector
     [-0.02083473],
     [ 0.08819923],
     [ 0.9454764 ],
     [ 0.80604627],
     [ 0.82189822],
     [ 0.73613942],
     [ 0.64519742],
     [ 0.56973868],
     [ 0.612912  ]]).flatten()
c = arr([[ 0.        ,  0.        ],
     [-0.09127286,  0.04960341],
     [-0.00300709,  0.17940555],
     [ 0.82319693,  1.06775586],
     [ 0.74512774,  0.8669648 ],
     [ 0.75177669,  0.89201975],
     [ 0.63606087,  0.83621797],
     [ 0.57786173,  0.7125331 ],
     [ 0.46722312,  0.67225423],
     [ 0.54951714,  0.67630685]]).T      # transpose
pylab.errorbar(x, y, yerr=c)
pylab.show()
</snippet></ROW><ROW><id>14599094</id><snippet>QGraphicsItem</snippet></ROW><ROW><id>14599094</id><snippet>QObject</snippet></ROW><ROW><id>14599094</id><snippet>objectName</snippet></ROW><ROW><id>14599094</id><snippet>dict</snippet></ROW><ROW><id>14599390</id><snippet>itertools.compress</snippet></ROW><ROW><id>14599390</id><snippet>Docstring:
compress(data, selectors) --&gt; iterator over selected data

Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
</snippet></ROW><ROW><id>14599390</id><snippet>In [1]: from itertools import compress

In [2]: l1 = ['a','b','c','d']

In [3]: l2 = [True, False, True,False]

In [4]: for i in compress(l1,l2):
   ...:     print 'I have item: {0}'.format(i)
   ...:     
I have item: a
I have item: c
</snippet></ROW><ROW><id>14599598</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(open(...).read())
states = {}
for i, table in enumerate(soup("table")):
    for city in table("span"):
        states.setdefault(i, []).append(city.text.strip())
</snippet></ROW><ROW><id>14599598</id><snippet>states
{0: [u'Miami', u'Orlando'], 1: [u'Los Angeles', u'San Diego']}
</snippet></ROW><ROW><id>14600064</id><snippet>select(
    [
        bar.c.foo,
        func.count().over().label('full_count'),
    ],
    ...
)
</snippet></ROW><ROW><id>14600161</id><snippet>for obj in thissession.dirty:
</snippet></ROW><ROW><id>14600161</id><snippet>before_flush</snippet></ROW><ROW><id>14600161</id><snippet>thissession.deleted</snippet></ROW><ROW><id>14600244</id><snippet>eval</snippet></ROW><ROW><id>14600244</id><snippet>In [1]: condition1 = "((2=2) or (3=1)) and (1=1)"
   ...: condition2 = "((2=3) or (1=1)) and (4=5)"
   ...: 

In [2]: eval(condition1.replace('=','=='))
Out[2]: True

In [3]: eval(condition2.replace('=','=='))
Out[3]: False
</snippet></ROW><ROW><id>14600432</id><snippet>subprocess.call</snippet></ROW><ROW><id>14600432</id><snippet>subprocess.call(['mysqldump', '-u', 'myUsername'])
</snippet></ROW><ROW><id>14600432</id><snippet>stdout</snippet></ROW><ROW><id>14600432</id><snippet>with open('myDatabaseBackup.sql', 'w') as fout:
    subprocess.call(['mysqldump', '-u', 'myUsername'], stdout=fout)
</snippet></ROW><ROW><id>14600432</id><snippet>stdin</snippet></ROW><ROW><id>14600513</id><snippet>_source=whatever</snippet></ROW><ROW><id>14600513</id><snippet>_target=whatever</snippet></ROW><ROW><id>14600513</id><snippet>select</snippet></ROW><ROW><id>14600513</id><snippet>g.es.select(_source=root)
</snippet></ROW><ROW><id>14600513</id><snippet>incident</snippet></ROW><ROW><id>14600513</id><snippet>EdgeSeq</snippet></ROW><ROW><id>14600513</id><snippet>g.incident(root, mode="out")
</snippet></ROW><ROW><id>14600689</id><snippet>@classmethod</snippet></ROW><ROW><id>14600689</id><snippet>&gt;&gt;&gt; class A:
    def __init__(self,a):
        self.a = a
    @classmethod
    def _multiple(cls,*l):
        #Create multiple instances of object `A`
        return [A(i) for i in l]

&gt;&gt;&gt; l = [1,2]
&gt;&gt;&gt; A._multiple(*l)
[&lt;__main__.A instance at 0x066FBB20&gt;, &lt;__main__.A instance at 0x03D94580&gt;]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14601094</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14601205</id><snippet>request_method=DELETE</snippet></ROW><ROW><id>14601295</id><snippet>import scraperwiki
import lxml.html

    def scrapeCityList(pageUrl):
    html = scraperwiki.scrape(pageUrl)
    root = lxml.html.fromstring(html)
    links = root.cssselect('td.dt1 a')
    print len(links)
    batch = []
    for link in links[1:]: #skip the first link since it's only a link to tripadvisor and not a subpage
        record = {}
        url = 'http://www.tripadvisor.co.uk/' + link.attrib['href']
        record['url'] = url
        batch.append(record)
    scraperwiki.sqlite.save(["url"],data=batch)

scrapeCityList('http://www.tripadvisor.co.uk/pages/by_city.html') 
</snippet></ROW><ROW><id>14601295</id><snippet>links = root.cssselect('td.dt1')
</snippet></ROW><ROW><id>14601295</id><snippet>url = 'http://www.tripadvisor.co.uk/' + link[0].attrib['href']
</snippet></ROW><ROW><id>14601295</id><snippet>print element.attrib
</snippet></ROW><ROW><id>14601295</id><snippet>{'class': 'dt1'}
{'class': 'dt1'}
{'class': 'dt1'}
...
</snippet></ROW><ROW><id>14601295</id><snippet>{'href': 'by_city_001.html'}
{'href': 'by_city_244.html'}
{'href': 'by_city_002.html'}
...
</snippet></ROW><ROW><id>14601509</id><snippet>.profile</snippet></ROW><ROW><id>14601509</id><snippet>export TERM=xterm
</snippet></ROW><ROW><id>14601509</id><snippet>setnv TERM xterm
</snippet></ROW><ROW><id>14601615</id><snippet>cd</snippet></ROW><ROW><id>14601615</id><snippet>true</snippet></ROW><ROW><id>14601615</id><snippet>false</snippet></ROW><ROW><id>14601615</id><snippet>test</snippet></ROW><ROW><id>14601615</id><snippet>sleep</snippet></ROW><ROW><id>14601615</id><snippet>cd</snippet></ROW><ROW><id>14601615</id><snippet>umask</snippet></ROW><ROW><id>14601615</id><snippet>setenv</snippet></ROW><ROW><id>14601615</id><snippet>ulimit</snippet></ROW><ROW><id>14601615</id><snippet>man bash</snippet></ROW><ROW><id>14601615</id><snippet>$ type -a &lt;command&gt;
</snippet></ROW><ROW><id>14601615</id><snippet>which</snippet></ROW><ROW><id>14601615</id><snippet>$ which -a &lt;command&gt;
</snippet></ROW><ROW><id>14601615</id><snippet>setenv</snippet></ROW><ROW><id>14601615</id><snippet>getenv</snippet></ROW><ROW><id>14601615</id><snippet>os.environ</snippet></ROW><ROW><id>14601615</id><snippet>os.getenv</snippet></ROW><ROW><id>14601615</id><snippet>os.putenv</snippet></ROW><ROW><id>14601615</id><snippet>limit</snippet></ROW><ROW><id>14601618</id><snippet>rules = [Rule(SgmlLinkExtractor(allow = ('/\d+.htm')), follow=True, 
    callback='parse_item'),]
</snippet></ROW><ROW><id>14601905</id><snippet>&gt;&gt;&gt; for i in result:
...    print "{} {}".format(*i)
... 
Första rubriken Här är lite text på svenska
Andra rubriken Ytterligare lite text på ett annat språk
</snippet></ROW><ROW><id>14602133</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14602133</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14602133</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14602133</id><snippet>import random
import mptest as smt

l = []
for i in range(4):
    l.append(random.randint(1,8))
print "Random numbers generated"
if __name__ == '__main__':
    print smt.mp_factorizer(l, 4)
</snippet></ROW><ROW><id>14602133</id><snippet>import multiprocessing
import math

print "Reading mptest.py file"
def mp_factorizer(nums, nprocs):

    out_q = multiprocessing.Queue()
    chunksize = int(math.ceil(len(nums) / float(nprocs)))
    procs = []
    for i in range(nprocs):

        p = multiprocessing.Process(
                target=worker,            
                args=(nums[chunksize * i:chunksize * (i + 1)],
                      out_q))
        procs.append(p)
        p.start()

    # Collect all results into a single result dict. We know how many dicts
    # with results to expect.
    resultlist = []
    for i in range(nprocs):
        temp=out_q.get()
        index =0
        #print temp
        for i in temp:
            resultlist.append(temp[index][0][0:])
            index +=1

    # Wait for all worker processes to finish
    for p in procs:
        p.join()
        resultlist2 = [x for x in resultlist if x != []]
    return resultlist2

def worker(nums, out_q):
    """ The worker function, invoked in a process. 'nums' is a
        list of numbers to factor. The results are placed in
        a dictionary that's pushed to a queue.
    """
    outlist = []

    for n in nums:
        newnumber= n*2
        newnumberasstring = str(newnumber)
        if newnumber:
            outlist.append(newnumberasstring)
    out_q.put(outlist)
</snippet></ROW><ROW><id>14602133</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14602133</id><snippet>Reading mptest.py file
random numbers generated
Reading mptest.py file
random numbers generated
worker started
Reading mptest.py file
random numbers generated
worker started
Reading mptest.py file
random numbers generated
worker started
Reading mptest.py file
random numbers generated
worker started
['1', '1', '4', '1']
</snippet></ROW><ROW><id>14602133</id><snippet>import random
import mptest as smt

if __name__ == '__main__':  
    l = []
    for i in range(4):
        l.append(random.randint(1,8))
    print "random numbers generated"   
    print smt.mp_factorizer(l, 4)
</snippet></ROW><ROW><id>14602133</id><snippet>Reading mptest.py file
random numbers generated
Reading mptest.py file
worker started
Reading mptest.py file
worker started
Reading mptest.py file
worker started
Reading mptest.py file
worker started
['1', '6', '2', '1']
</snippet></ROW><ROW><id>14602133</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14602567</id><snippet>from itertools import izip_longest
ListA = [b or a for a, b in izip_longest(ListA,ListB)]
</snippet></ROW><ROW><id>14602766</id><snippet>Icon?</snippet></ROW><ROW><id>14602766</id><snippet>ls</snippet></ROW><ROW><id>14602766</id><snippet>app.yaml</snippet></ROW><ROW><id>14602766</id><snippet>skip_files:
- ^(.*/)?Icon\r
</snippet></ROW><ROW><id>14602766</id><snippet>appcfg.py rollback /path/to/project
</snippet></ROW><ROW><id>14602835</id><snippet>def get_path():
    path = global_settings.get_rdio_base_path()
    if path == "":
        raise PathRequiredError("Path is required...")

def some_keyword():
   path = get_path()
   ...
</snippet></ROW><ROW><id>14603203</id><snippet>pass</snippet></ROW><ROW><id>14603203</id><snippet>"password: "</snippet></ROW><ROW><id>14603203</id><snippet>passwd</snippet></ROW><ROW><id>14603203</id><snippet>"New Password: "</snippet></ROW><ROW><id>14603203</id><snippet>buffer (last 100 chars): New Password:
before (last 100 chars): New Password:
</snippet></ROW><ROW><id>14603203</id><snippet>passwd.expect("password: ")</snippet></ROW><ROW><id>14603203</id><snippet>passwd.expect("Password: ")</snippet></ROW><ROW><id>14603619</id><snippet>./manage.py</snippet></ROW><ROW><id>14603619</id><snippet>from django.core.management.base import BaseCommand
from my_app.models import MyModel

class Command(BaseCommand):
    help = 'runs your code in the django environment'

    def handle(self, *args, **options):
        all_entries = MyModel.objects.all()
        for entry in all_entries:
            self.stdout.write('entry "%s"' % entry)
</snippet></ROW><ROW><id>14603619</id><snippet>$ django-admin.py runserver --settings=settings.dev
</snippet></ROW><ROW><id>14603619</id><snippet>dev</snippet></ROW><ROW><id>14603619</id><snippet>manage.py</snippet></ROW><ROW><id>14603619</id><snippet>dev.py</snippet></ROW><ROW><id>14603619</id><snippet>|-settings
|    |- __init__.py
|    |- base.py
|    |- dev.py
|    |- prod.py
</snippet></ROW><ROW><id>14603619</id><snippet>base.py</snippet></ROW><ROW><id>14603619</id><snippet>dev.py</snippet></ROW><ROW><id>14603619</id><snippet># settings/dev.py
from .base import *

DEBUG = True
...
</snippet></ROW><ROW><id>14603619</id><snippet>$ ./manage.py shell
</snippet></ROW><ROW><id>14603619</id><snippet>$ django-admin.py shell --settings=settings.dev
</snippet></ROW><ROW><id>14603619</id><snippet>settings.py</snippet></ROW><ROW><id>14603619</id><snippet>&gt;&gt;&gt; from my_app.models import MyModel
&gt;&gt;&gt; all_entries = MyModel.objects.all()
&gt;&gt;&gt; for entry in all_entries:
...   print entry    
</snippet></ROW><ROW><id>14603646</id><snippet>pip install -U selenium
</snippet></ROW><ROW><id>14604466</id><snippet>@property</snippet></ROW><ROW><id>14604466</id><snippet>__setattr__</snippet></ROW><ROW><id>14604466</id><snippet> class MyClass(ParentClass):
     variable_one = PropertyClass(...)
     variable_one.display_name = "Variable One"

     variable_two = PropertyClass(...)
     variable_two.display_name = "Variable Two"
</snippet></ROW><ROW><id>14604466</id><snippet>def display_name(dispname):
    def decorate_with_display_name(prop):
        prop.display_name = dispname
        return prop
    return decorate_with_display_name
</snippet></ROW><ROW><id>14604466</id><snippet>print type(instance).variable_two.display_name</snippet></ROW><ROW><id>14604681</id><snippet>&gt;&gt;&gt; c = chr(129)
&gt;&gt;&gt; c + u'2'

Traceback (most recent call last):
  File "&lt;pyshell#21&gt;", line 1, in &lt;module&gt;
    c + u'2'
UnicodeDecodeError: 'ascii' codec can't decode byte 0x81 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>14604681</id><snippet>zip = zipfile.ZipFile(str(path1))
zip.extractall(str(path2))
</snippet></ROW><ROW><id>14604681</id><snippet>zip = zipfile.ZipFile(unicode(path1))
zip.extractall(unicode(path2))
</snippet></ROW><ROW><id>14604681</id><snippet>def join(a, *p): # 63
    for b in p: # 68
                path += "\\" + b  # 128
</snippet></ROW><ROW><id>14604681</id><snippet>from ntpath import *

def join(a, *p):
    """Join two or more pathname components, inserting "\\" as needed.
    If any component is an absolute path, all previous path components
    will be discarded."""
    path = a
    for b in p:
        b_wins = 0  # set to 1 iff b makes path irrelevant
        if path == "":
            b_wins = 1

        elif isabs(b):
            # This probably wipes out path so far.  However, it's more
            # complicated if path begins with a drive letter:
            #     1. join('c:', '/a') == 'c:/a'
            #     2. join('c:/', '/a') == 'c:/a'
            # But
            #     3. join('c:/a', '/b') == '/b'
            #     4. join('c:', 'd:/') = 'd:/'
            #     5. join('c:/', 'd:/') = 'd:/'
            if path[1:2] != ":" or b[1:2] == ":":
                # Path doesn't start with a drive letter, or cases 4 and 5.
                b_wins = 1

            # Else path has a drive letter, and b doesn't but is absolute.
            elif len(path) &gt; 3 or (len(path) == 3 and
                                   path[-1] not in "/\\"):
                # case 3
                b_wins = 1

        if b_wins:
            path = b
        else:
            # Join, and ensure there's a separator.
            assert len(path) &gt; 0
            if path[-1] in "/\\":
                if b and b[0] in "/\\":
                    path += b[1:]
                else:
                    path += b
            elif path[-1] == ":":
                path += b
            elif b:
                if b[0] in "/\\":
                    path += b
                else:
                    # !!! modify the next line so it works !!!
                    path += "\\" + b
            else:
                # path is not empty and does not end with a backslash,
                # but b is empty; since, e.g., split('a/') produces
                # ('a', ''), it's best if join() adds a backslash in
                # this case.
                path += '\\'

    return path

import ntpath
ntpath.join = join
</snippet></ROW><ROW><id>14604808</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>14604808</id><snippet>matplotlib</snippet></ROW><ROW><id>14604836</id><snippet>cat -A test.py
</snippet></ROW><ROW><id>14604836</id><snippet>//How it appears in my editor$
def SaveList(self, directory):$
    templist = []$
    templistbox2 = []$
    for n,i in enumerate(self.listbox2.get(0,END)): $
       templistbox2.insert(n, re.sub(r'^[0-9]*[.]',"",str(i)))$
    for filename in sorted(os.listdir(directory)):$
        self.templist.insert(i, filename)$
^I    print filename #whitespace error here$
</snippet></ROW><ROW><id>14604836</id><snippet>^I</snippet></ROW><ROW><id>14604836</id><snippet>cat -A</snippet></ROW><ROW><id>14604836</id><snippet>reindent.py test.py
</snippet></ROW><ROW><id>14605239</id><snippet>type</snippet></ROW><ROW><id>14605239</id><snippet>Component</snippet></ROW><ROW><id>14605239</id><snippet>_get_property</snippet></ROW><ROW><id>14605239</id><snippet>BaseClass._get_property</snippet></ROW><ROW><id>14605239</id><snippet>def _del_property(attr):
    """Abstract deller"""
    def del_attr(self):
        setattr(self, attr, None)
    return del_attr

def _set_property(attr):
    """Abstract setter."""
    def set_attr(self, x):
        setattr(self, attr, x)            
    return set_attr

def _get_property(attr):
    """Abstract getter"""
    def get_attr(self):
        getattr(self, attr)
    return get_attr


class BaseClass(object):

    _name = None
    name = property(fget=_get_property('_name'), fset=_set_property('_name'))


class Component(BaseClass):

    _material = None
    material = property(fget=_get_property('_material'), fset=_set_property('_material'), fdel=_del_property('_material'))
</snippet></ROW><ROW><id>14605239</id><snippet>class BaseClass(object):

    def _del_property(attr):
        """Abstract deller"""
        def del_attr(self):
            setattr(self, attr, None)
        return del_attr

    print type(_del_property)
print type(BaseClass._del_property)
</snippet></ROW><ROW><id>14605239</id><snippet>&lt;type 'function'&gt;
&lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>14605239</id><snippet>BaseClass</snippet></ROW><ROW><id>14605239</id><snippet>instancemethod</snippet></ROW><ROW><id>14605239</id><snippet>type</snippet></ROW><ROW><id>14605239</id><snippet>def property_api(name,fget=True,fset=True,fdel=True):
    return property(fget=_get_property(name) if fget else None,
                    fset=_set_property(name) if fset else None,
                    fdel=_del_property(name) if fdel else None)
</snippet></ROW><ROW><id>14605239</id><snippet>BaseClass</snippet></ROW><ROW><id>14605239</id><snippet>staticmethod</snippet></ROW><ROW><id>14605239</id><snippet> class BaseClass(object):
      property_api = staticmethod(property_api)
</snippet></ROW><ROW><id>14605239</id><snippet> class DerivedClass(BaseClass):
      _material = None
      material = BaseClass.property_api('_material')
</snippet></ROW><ROW><id>14605771</id><snippet>x and y</snippet></ROW><ROW><id>14605771</id><snippet>x</snippet></ROW><ROW><id>14605771</id><snippet>x</snippet></ROW><ROW><id>14605771</id><snippet>y</snippet></ROW><ROW><id>14605771</id><snippet>x or y</snippet></ROW><ROW><id>14605771</id><snippet>x</snippet></ROW><ROW><id>14605771</id><snippet>x</snippet></ROW><ROW><id>14605771</id><snippet>y</snippet></ROW><ROW><id>14605771</id><snippet>status != None and "off" or "on"
</snippet></ROW><ROW><id>14605771</id><snippet>(status != None and "off") or "on"
</snippet></ROW><ROW><id>14605771</id><snippet>status != None and "off"</snippet></ROW><ROW><id>14605771</id><snippet>False</snippet></ROW><ROW><id>14605771</id><snippet>status</snippet></ROW><ROW><id>14605771</id><snippet>None</snippet></ROW><ROW><id>14605771</id><snippet>"off"</snippet></ROW><ROW><id>14605771</id><snippet>(status != None and "off") or "on"</snippet></ROW><ROW><id>14605771</id><snippet>"on"</snippet></ROW><ROW><id>14605771</id><snippet>status</snippet></ROW><ROW><id>14605771</id><snippet>None</snippet></ROW><ROW><id>14605771</id><snippet>"off"</snippet></ROW><ROW><id>14605771</id><snippet>result = "on" if status is None else "off"
</snippet></ROW><ROW><id>14606073</id><snippet>$ echo سالەم ورتا ءۇي سوزمەن الما ۇل مەنىڭ اتىم شالقار | ./arabic-to-latin
</snippet></ROW><ROW><id>14606073</id><snippet>sәlêm orta üy sѳzmên alma ul mêning atim xalқar
</snippet></ROW><ROW><id>14606073</id><snippet>$ ./arabic-to-latin input_file_with_arabic_text_in_utf8 &gt;output_latin_in_utf8
</snippet></ROW><ROW><id>14606073</id><snippet>arabic-to-latin</snippet></ROW><ROW><id>14606073</id><snippet>#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use open qw(:std :utf8);
#XXX normalization

sub replace_word {
    my ($word) = @_;
    $_ = $word;
    if (/ء|ە|ك|گ/) { # g, k, e, or hamza in the word
        tr/اوىۇ/әѳiü/; # soft
    } else {
        tr/اوىۇ/aoiu/; # hard
    }
    tr/سلەمرتزنشق/slêmrtznxқ/;
    s/ءüي/üy/g;
    s/ڭ/ng/g;
    $_;
}

while (my $line = &lt;&gt;) {
    $line =~ s/(\w+)/replace_word($1)/ge;
    print $line;
}
</snippet></ROW><ROW><id>14606073</id><snippet>arabic-to-latin</snippet></ROW><ROW><id>14606073</id><snippet>$ chmod +x ./arabic-to-latin
</snippet></ROW><ROW><id>14606229</id><snippet>def wrapper(func, bool_arg):
    def inner(*args, **kwargs):
        kwargs['bool_arg']=bool_arg
        return func(*args, **kwargs)
    return inner
</snippet></ROW><ROW><id>14606229</id><snippet>class C():
    def fun(...):
        ...

c = C()
c.fun = wrapper(fun, False)
</snippet></ROW><ROW><id>14606229</id><snippet>fun</snippet></ROW><ROW><id>14606229</id><snippet>C</snippet></ROW><ROW><id>14606229</id><snippet>class D(C):
    def fun(self, *args, **kwargs):
        f = wrapper(C.f, False)
        return f(*args, **kwargs)
</snippet></ROW><ROW><id>14606229</id><snippet>def wrapper(func, **wrapkwargs)</snippet></ROW><ROW><id>14606229</id><snippet>kwargs['bool_arg']=bool_arg</snippet></ROW><ROW><id>14606229</id><snippet>for i in wrapkwargs.iteritems():  #wrapkwargs is a dictionary
    kwargs[i[0]] = i[1]
</snippet></ROW><ROW><id>14606271</id><snippet>import numpy as np
nan = np.nan

def using_clump(a):
    return [a[s] for s in np.ma.clump_unmasked(np.ma.masked_invalid(a))]

x = [nan,nan, 1 , 2 , 3 , nan, nan, 10, 11 , nan, nan, nan, 23, 1, nan, 7, 8]

In [56]: using_clump(x)
Out[56]: 
[array([ 1.,  2.,  3.]),
 array([ 10.,  11.]),
 array([ 23.,   1.]),
 array([ 7.,  8.])]
</snippet></ROW><ROW><id>14606271</id><snippet>import itertools as IT
groupby = IT.groupby
def using_groupby(a):
    return [list(v) for k,v in groupby(a,np.isfinite) if k]
</snippet></ROW><ROW><id>14606271</id><snippet>In [58]: %timeit using_clump(x)
10000 loops, best of 3: 37.3 us per loop

In [59]: %timeit using_groupby(x)
10000 loops, best of 3: 53.1 us per loop
</snippet></ROW><ROW><id>14606271</id><snippet>In [9]: x = x*1000
In [12]: %timeit using_clump(x)
100 loops, best of 3: 5.69 ms per loop

In [13]: %timeit using_groupby(x)
10 loops, best of 3: 60 ms per loop
</snippet></ROW><ROW><id>14606422</id><snippet>project/
    __init__.py
    lib/
        __init__.py
        module1.py
        module2.py
    bin/
        __init__.py
        binary1.py # contains: import module1
        binary2.py # contains: import module2
    doc/
    ...
</snippet></ROW><ROW><id>14606422</id><snippet>project</snippet></ROW><ROW><id>14606422</id><snippet>module1</snippet></ROW><ROW><id>14606422</id><snippet>binary1.py</snippet></ROW><ROW><id>14606422</id><snippet>from project.lib import module1
</snippet></ROW><ROW><id>14606422</id><snippet>__init__.py</snippet></ROW><ROW><id>14606422</id><snippet>from project.lib.module1 import Module1
</snippet></ROW><ROW><id>14606422</id><snippet>lib/__init__.py</snippet></ROW><ROW><id>14606422</id><snippet>from project.lib.module1 import Module1
</snippet></ROW><ROW><id>14606422</id><snippet>lib</snippet></ROW><ROW><id>14606422</id><snippet>Module1</snippet></ROW><ROW><id>14606422</id><snippet>lib</snippet></ROW><ROW><id>14606422</id><snippet>from project.lib import Module1
</snippet></ROW><ROW><id>14606446</id><snippet>fh = open(__UPLOADS__ + fname, 'w')
</snippet></ROW><ROW><id>14606446</id><snippet>0x0a</snippet></ROW><ROW><id>14606446</id><snippet>\n\r</snippet></ROW><ROW><id>14606446</id><snippet>fh = open(__UPLOADS__ + fname, 'wb')
</snippet></ROW><ROW><id>14606540</id><snippet>$ echo MPP6R-09RXG-2H{8,B}MT-{B,8}K{H,N}M9-V{6,G}C8R
MPP6R-09RXG-2H8MT-BKHM9-V6C8R
MPP6R-09RXG-2H8MT-BKHM9-VGC8R
MPP6R-09RXG-2H8MT-BKNM9-V6C8R
MPP6R-09RXG-2H8MT-BKNM9-VGC8R
MPP6R-09RXG-2H8MT-8KHM9-V6C8R
MPP6R-09RXG-2H8MT-8KHM9-VGC8R
MPP6R-09RXG-2H8MT-8KNM9-V6C8R
MPP6R-09RXG-2H8MT-8KNM9-VGC8R
MPP6R-09RXG-2HBMT-BKHM9-V6C8R
MPP6R-09RXG-2HBMT-BKHM9-VGC8R
MPP6R-09RXG-2HBMT-BKNM9-V6C8R
MPP6R-09RXG-2HBMT-BKNM9-VGC8R
MPP6R-09RXG-2HBMT-8KHM9-V6C8R
MPP6R-09RXG-2HBMT-8KHM9-VGC8R
MPP6R-09RXG-2HBMT-8KNM9-V6C8R
MPP6R-09RXG-2HBMT-8KNM9-VGC8R
</snippet></ROW><ROW><id>14606871</id><snippet>'\r'</snippet></ROW><ROW><id>14606871</id><snippet>'\r\n'</snippet></ROW><ROW><id>14606871</id><snippet>'\n\r'</snippet></ROW><ROW><id>14607121</id><snippet>#
# 1. CamelCasing for classes
#
class Account:
    def __init__(self):
        # 2. to refer to the inner class, you must use self.Bank
        # 3. no need to use an inner class here
        self.bank = self.Bank()

    class Bank:
        def __init__(self):
            self.balance = 100000

        # 4. in your original code, you had a method with the same name as 
        #    the attribute you set in the constructor. That meant that the 
        #    method was replaced with a value every time the constructor was 
        #    called. No need for a method to do a simple attribute lookup. This
        #    is Python, not Java.

        def withdraw(self, amount):
            self.balance -= amount

        def deposit(self, amount):
            self.balance += amount

a = Account()
print(a.bank.balance)
</snippet></ROW><ROW><id>14607155</id><snippet>a = ("hello")
</snippet></ROW><ROW><id>14607155</id><snippet>a</snippet></ROW><ROW><id>14607155</id><snippet>a = "Hello","goodbye"  #Look Ma!  No Parenthesis!
print (type(a)) #&lt;type 'tuple'&gt;
a = ("Hello")
print (type(a)) #&lt;type 'str'&gt;
a = ("Hello",)
print (type(a)) #&lt;type 'tuple'&gt;
a = "Hello",
print (type(a)) #&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>14607155</id><snippet>&gt;&gt;&gt; a = ['Hello']
&gt;&gt;&gt; b = tuple(a)
&gt;&gt;&gt; print (type(b))  #&lt;type 'tuple'&gt; -- It thinks it is a tuple
&gt;&gt;&gt; print (b[0])  #'Hello' -- It acts like a tuple too -- Must be :)
</snippet></ROW><ROW><id>14607172</id><snippet>from lxml import etree

xmlfile = etree.parse('xmlfile.xml')
identifier_nodes = xmlfile.xpath("//*[local-name() = 'identifier']")
</snippet></ROW><ROW><id>14607978</id><snippet>L</snippet></ROW><ROW><id>14607978</id><snippet>Cs</snippet></ROW><ROW><id>14607978</id><snippet>L</snippet></ROW><ROW><id>14607978</id><snippet>N</snippet></ROW><ROW><id>14607978</id><snippet>C</snippet></ROW><ROW><id>14607978</id><snippet>N</snippet></ROW><ROW><id>14607978</id><snippet>C</snippet></ROW><ROW><id>14607978</id><snippet>C</snippet></ROW><ROW><id>14607978</id><snippet>Cs</snippet></ROW><ROW><id>14607978</id><snippet>C</snippet></ROW><ROW><id>14607978</id><snippet>L</snippet></ROW><ROW><id>14607983</id><snippet>class myBool():
    def __init__(self, val):
        self.value = val

    def __repr__(self):
        return self.value

    def __invert__(self):
        if self.value == 'A':
            return 'B'
        else:
            return 'A'

def main():
    a = myBool('A')
    print(a)
    print(~a)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14608049</id><snippet>cProfile</snippet></ROW><ROW><id>14608049</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14608049</id><snippet>-m</snippet></ROW><ROW><id>14608049</id><snippet>-o</snippet></ROW><ROW><id>14608049</id><snippet>python -m cProfile -o profile.txt myscript.py
</snippet></ROW><ROW><id>14608049</id><snippet>import pstats
p = pstats.Stats('profile.txt')
p.strip_dirs().sort_stats("time").print_stats()
</snippet></ROW><ROW><id>14608049</id><snippet>myscript.py</snippet></ROW><ROW><id>14608049</id><snippet>def f():
    while True:
        g(100000)

def g(n):
    x = []
    for i in range(n):
        x.append(n)

f()
</snippet></ROW><ROW><id>14608049</id><snippet>Wed Jan 30 10:58:50 2013    profile.txt

         115414854 function calls in 37.705 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     1155   25.787    0.022   37.020    0.032 test3.py:5(g)
115412541   10.060    0.000   10.060    0.000 {method 'append' of 'list' objects}
     1155    1.173    0.001    1.173    0.001 {range}
        1    0.685    0.685   37.705   37.705 test3.py:1(f)
        1    0.000    0.000   37.705   37.705 test3.py:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>14608049</id><snippet>g</snippet></ROW><ROW><id>14608049</id><snippet>append</snippet></ROW><ROW><id>14608049</id><snippet>g</snippet></ROW><ROW><id>14608049</id><snippet>.sort_stats("cum")</snippet></ROW><ROW><id>14608067</id><snippet>in</snippet></ROW><ROW><id>14608067</id><snippet>if number_you_are_looking_for in list:
    # your code here
</snippet></ROW><ROW><id>14608067</id><snippet>myList = [1,2,3,4,5]

if 3 in myList:
    print("3 is present")
</snippet></ROW><ROW><id>14608145</id><snippet># Clarified from comments - the program is to act as a filter so that any lines
# which have a pattern 'ZINC' in the second file but do not belong in the first
# should stop the dump until the next matching zinc is found

fileZ = open ('file_with_zinc_only.txt', 'r').readlines()
fileX = open ('file_with_x_info.txt', 'r').readlines()
fileOutput = open ('file_for_output.txt', 'w')

thisLineHasZinc = False
zincMatching = False

for xline in fileX:
    #print "Dealing with", xline
    if len(xline.split('ZINC')) != 1:
        thisLineHasZinc = True
        zincMatching = False
        for zline in fileZ:
            #print "Trying to match",zline
            if zline == xline:
                #print "************MATCH***************"
                zincMatching = True
                fileOutput.write (zline)
                #print "**",xline
                break
    else:    
        thisLineHasZinc = False

    # If we are currently under a block where we've found a ZINC previously
    # but not yet reached another ZINC line, write to file
    #print 'thisLineHasZinc',thisLineHasZinc,'zincMatching',zincMatching
    if thisLineHasZinc == False and zincMatching == True:
        fileOutput.write (xline)
        #print "**** "+ xline

fileOutput.close()
</snippet></ROW><ROW><id>14608390</id><snippet>echo "\o test.out \\ select * from test;" | psql -wU user db_name
</snippet></ROW><ROW><id>14608419</id><snippet>L1 = [1,2,3,4,5,6,7,8,9]
L2 = ['a','b','c','d','e','f','g','h','i']
L3 = ['A','B','C','D','E','F','G','H','I']

from random import choice

for i in range(5):
    print list(map(choice, (L1, L2, L3)))

[4, 'h', 'A']
[7, 'b', 'G']
[3, 'c', 'C']
[6, 'f', 'H']
[5, 'b', 'A']
</snippet></ROW><ROW><id>14608841</id><snippet>a=2; b=3; c=5;

s=(2+3+5)/2.0
 = 5.00
</snippet></ROW><ROW><id>14608841</id><snippet>a=2; b=3; c=6;

s=(2+3+6)/2.0
 = 5.50
</snippet></ROW><ROW><id>14608927</id><snippet>if</snippet></ROW><ROW><id>14608927</id><snippet>&gt;&gt;&gt; first_list = [1,2,3,10]
&gt;&gt;&gt; second_list = [10,20,30,50]
&gt;&gt;&gt; special = {2, 3}
&gt;&gt;&gt; [first_list[i]+second_list[i] for i in range(len(first_list)) if first_list[i] not in special]
[11, 60]
</snippet></ROW><ROW><id>14608927</id><snippet>zip</snippet></ROW><ROW><id>14608927</id><snippet>&gt;&gt;&gt; [a+b for a,b in zip(first_list, second_list) if a not in special]
[11, 60]
</snippet></ROW><ROW><id>14608927</id><snippet>a</snippet></ROW><ROW><id>14608927</id><snippet>if</snippet></ROW><ROW><id>14608927</id><snippet>X if Y else Z</snippet></ROW><ROW><id>14608927</id><snippet>&gt;&gt;&gt; [a+b if a not in special else a for a,b in zip(first_list, second_list)]
[11, 2, 3, 60]
</snippet></ROW><ROW><id>14608958</id><snippet>print()</snippet></ROW><ROW><id>14608958</id><snippet>functools.partial()</snippet></ROW><ROW><id>14608958</id><snippet>from functools import partial

myprint = partial(print, end='-', sep='.')
</snippet></ROW><ROW><id>14608958</id><snippet>myprint()</snippet></ROW><ROW><id>14608958</id><snippet>myprint(a)
myprint(b)
myprint(c)
</snippet></ROW><ROW><id>14609002</id><snippet>data</snippet></ROW><ROW><id>14609112</id><snippet>&gt;&gt;&gt; from itertools import product, chain
&gt;&gt;&gt; #Assuming your original sentence is
&gt;&gt;&gt; origional = " the  quick ' brown 1 fox! jumps-over the 'lazy' doG? !  "
&gt;&gt;&gt; #Sentence terminators are
&gt;&gt;&gt; sent_term = "[?!.;]"
&gt;&gt;&gt; #I will use regex to split it into sentences
&gt;&gt;&gt; re.split(sent_term, origional.strip())
["the  quick ' brown 1 fox", " jumps-over the 'lazy' doG", ' ', '']
&gt;&gt;&gt; #And then split it as words
&gt;&gt;&gt; #I could have used str.split, but that would include punctuations
&gt;&gt;&gt; #Which you may not be interested
&gt;&gt;&gt; #For each of the words, I create a mapping with the sentence using product
&gt;&gt;&gt; word_map = ((product(re.split("\W",e),[e])) 
                 for e in re.split(sent_term, origional.strip()))
&gt;&gt;&gt; #Chain it as a single list
&gt;&gt;&gt; word_map = chain(*((product(re.split("\W",e),[e])) 
                        for e in re.split(sent_term, origional.strip())))
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; #Create a default dict
&gt;&gt;&gt; words = defaultdict(list)
&gt;&gt;&gt; #And populated all non trivial words
&gt;&gt;&gt; for k, v in word_map:
    if k.strip():
        words[k]+=[v]


&gt;&gt;&gt; words
defaultdict(&lt;type 'list'&gt;, {'brown': ["the  quick ' brown 1 fox"], 'lazy': [" jumps-over the 'lazy' doG"], 'jumps': [" jumps-over the 'lazy' doG"], 'fox': ["the  quick ' brown 1 fox"], 'doG': [" jumps-over the 'lazy' doG"], '1': ["the  quick ' brown 1 fox"], 'quick': ["the  quick ' brown 1 fox"], 'the': ["the  quick ' brown 1 fox", " jumps-over the 'lazy' doG"], 'over': [" jumps-over the 'lazy' doG"]})
&gt;&gt;&gt; #Now to get the first word
&gt;&gt;&gt; words['the'][0]
"the  quick ' brown 1 fox"
&gt;&gt;&gt; #Now to get the second sentence
&gt;&gt;&gt; words['the'][1]
" jumps-over the 'lazy' doG"
</snippet></ROW><ROW><id>14609273</id><snippet>sorted(data1+data2, key=lambda x:x['start'])
</snippet></ROW><ROW><id>14609552</id><snippet>f = open('/dev/ttyACM0')
print f.read(13)
</snippet></ROW><ROW><id>14609644</id><snippet>pylast</snippet></ROW><ROW><id>14609644</id><snippet>if country.name:
    print country
</snippet></ROW><ROW><id>14609801</id><snippet>In [10]: arr = numpy.array([1,23,4,6,7,8])

In [11]: [(arr[i], arr[-i-1]) for i in range(len(arr) // 2)]
Out[11]: [(1, 8), (23, 7), (4, 6)]
</snippet></ROW><ROW><id>14609801</id><snippet>arr</snippet></ROW><ROW><id>14609801</id><snippet>In [41]: arr = numpy.array([1,23,4,6,7,8]*100)

In [42]: %timeit [(arr[i], arr[-i-1]) for i in range(len(arr) // 2)]
10000 loops, best of 3: 167 us per loop

In [43]: %timeit numpy.vstack((arr, arr[::-1]))[:,:len(arr)//2]
100000 loops, best of 3: 16.4 us per loop
</snippet></ROW><ROW><id>14609808</id><snippet>dumpbin</snippet></ROW><ROW><id>14609808</id><snippet>idaapi</snippet></ROW><ROW><id>14609808</id><snippet>idaapi.get_import_module_qty</snippet></ROW><ROW><id>14609808</id><snippet>idaapi.enum_import_names</snippet></ROW><ROW><id>14610054</id><snippet>aProjectName</snippet></ROW><ROW><id>14610054</id><snippet>url(r'^chargeback/checkDuplicateProject/(?P&lt;aProjectName&gt;[\w+\s-]*)/$', 'chargeback.views.isProjectDuplicate'),
</snippet></ROW><ROW><id>14610465</id><snippet>lambda</snippet></ROW><ROW><id>14610465</id><snippet>&gt;&gt;&gt; def foo(x):
...     return x*100
... 
&gt;&gt;&gt; a = {'key1': 'value1', 'key2': 42, 'key3': lambda: foo(20)}
&gt;&gt;&gt; a
{'key3': &lt;function &lt;lambda&gt; at 0x96ae80c&gt;, 'key2': 42, 'key1': 'value1'}
&gt;&gt;&gt; {k: v() if callable(v) else v for k,v in a.iteritems()}
{'key3': 2000, 'key2': 42, 'key1': 'value1'}
</snippet></ROW><ROW><id>14610557</id><snippet>RANDOM Each time this parameter is referenced, a random integer between
       0 and 32767 is generated.  The sequence of random numbers may be
       initialized by assigning a value to RANDOM.  If RANDOM is unset,
       it loses its special properties,  even  if  it  is  subsequently
       reset.
</snippet></ROW><ROW><id>14610557</id><snippet>unset RANDOM
RANDOM=`..your script..`
</snippet></ROW><ROW><id>14610702</id><snippet>&gt;&gt;&gt; pairs = [(a, b) for a in main_streets for b in main_streets if a.nodes[-1] == b.nodes[0]]
</snippet></ROW><ROW><id>14610702</id><snippet>&gt;&gt;&gt; seconds = [pair[1] for pair in pairs]
&gt;&gt;&gt; ordered = [s for s in main_streets if s not in seconds]
&gt;&gt;&gt; if len(ordered) &gt; 1:
&gt;&gt;&gt;     raise Exception("Error: There is not one continuous chain.")
</snippet></ROW><ROW><id>14610702</id><snippet>&gt;&gt;&gt; unordered = [s for s in main_streets if s not in ordered]
&gt;&gt;&gt; for i in range(len(unordered)):
&gt;&gt;&gt;     for (j, s) in enumerate(unordered):
&gt;&gt;&gt;         if s.nodes[0] == ordered[-1].nodes[-1]:
&gt;&gt;&gt;             ordered.append(unordered.pop(j))
&gt;&gt;&gt;             break
</snippet></ROW><ROW><id>14610702</id><snippet>unordered</snippet></ROW><ROW><id>14610702</id><snippet>ordered</snippet></ROW><ROW><id>14611075</id><snippet>
pip install https://github.com/pypa/virtualenv/tarball/develop
</snippet></ROW><ROW><id>14611075</id><snippet>
easy_install https://github.com/pypa/virtualenv/tarball/develop
</snippet></ROW><ROW><id>14611124</id><snippet>is_permutation_of</snippet></ROW><ROW><id>14611124</id><snippet>def is_perm(a,b): return sorted(str(a)) == sorted(str(b))
</snippet></ROW><ROW><id>14611124</id><snippet>has_even_digit</snippet></ROW><ROW><id>14611124</id><snippet>def has_even_digit(n):
    evens=set(['0', '2', '4', '6', '8'])
    return any(c in evens for c in str(n))
</snippet></ROW><ROW><id>14611124</id><snippet>def has_even_digit(n):
    return any(c in ('0', '2', '4', '6', '8') for c in str(n))
</snippet></ROW><ROW><id>14611124</id><snippet># pseudo code -- don't use -- not syntactically correct
for d in 123456:      # integer
   # do something with each digit...
</snippet></ROW><ROW><id>14611124</id><snippet>for d in [int(c) for c in str(123456)]:
    # d is a left (most significant) to right integer digit - do what you want with it...
</snippet></ROW><ROW><id>14611124</id><snippet>for d in [int(c) for c in str(123456)[::-1]]:
    # Now right (least significant digit) to left (most significant digit)
</snippet></ROW><ROW><id>14611124</id><snippet>def int_iter(n,reverse=False):
    rtr=[]
    if not isinstance(n, (int,long)):
        raise ValueError('n must be int or long')

    while n:
        rtr.append(n%10)
        n/=10

    if reverse:
        return rtr[::-1]    
    else:
        return rtr  
</snippet></ROW><ROW><id>14611228</id><snippet>import xml.etree.ElementTree as ET
import sys
tree=ET.parse( 'test.xml' )
root=tree.getroot()
rs=root.getchildren()
keys = rs[0].attrib.keys()
for a in keys: sys.stdout.write(a); sys.stdout.write('\t')
sys.stdout.write('\n')
for r in rs:
    assert keys == r.attrib.keys()
    for k in keys: sys.stdout.write( r.attrib[k]); sys.stdout.write('\t')
    sys.stdout.write('\n')
</snippet></ROW><ROW><id>14611228</id><snippet>zip m_name  current city    cust_ID l_name  f_name  
00010   OfThe   1   Fairbanks   B123456@Y1996   Jungle  George  
03010   P   1   Yellow River    Q975697@Z2000   Freely  I   
07008       0   Fallen Arches   M7803@J2323 Jungle  Jim 
</snippet></ROW><ROW><id>14611260</id><snippet>.*?</snippet></ROW><ROW><id>14611260</id><snippet>.*</snippet></ROW><ROW><id>14611260</id><snippet>pat = re.compile('/states/.*?/([^"]+)')
</snippet></ROW><ROW><id>14611260</id><snippet>?</snippet></ROW><ROW><id>14611260</id><snippet>/</snippet></ROW><ROW><id>14611470</id><snippet>In [22]: A = np.random.rand(5, 10)

In [23]: idx = np.array([1, 3, 5])

In [24]: m = np.zeros_like(A)

In [25]: m[:,idx] = 1

In [26]: Am = np.ma.masked_array(A, m)

In [27]: Am
Out[27]: 
masked_array(data =
 [[0.680447483547 -- 0.290757600047 -- 0.0718559525615 -- 0.334352145502
  0.0861242618662 0.527068091963 0.136280743038]
 [0.729374999214 -- 0.76026650048 -- 0.656082247985 -- 0.492464543871
  0.903026937193 0.0792660503403 0.892132409419]
 [0.0845266821684 -- 0.838838594048 -- 0.396344231382 -- 0.703748703373
  0.380441396691 0.010521007806 0.344945867845]
 [0.7501401585 -- 0.0685427000113 -- 0.587100320511 -- 0.780160645327
  0.276328587928 0.0665949459004 0.604174142611]
 [0.599926798275 -- 0.686378805503 -- 0.776940069716 -- 0.0452833614622
  0.598622591094 0.942843765543 0.528082379918]],
             mask =
 [[False  True False  True False  True False False False False]
 [False  True False  True False  True False False False False]
 [False  True False  True False  True False False False False]
 [False  True False  True False  True False False False False]
 [False  True False  True False  True False False False False]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>14611718</id><snippet>C:\Users\&lt;UserName&gt;\AppData\Local\Google\Chrome\User Data\Default\databases
</snippet></ROW><ROW><id>14611718</id><snippet>import sqlite3

conn = sqlite3.connect(&lt;dbFile&gt;)
cursor = conn.cursor()


print "\nHere's a listing of all the records in the table:\n"
for row in cursor.execute("SELECT * FROM &lt;TableName&gt;"):
    print row
</snippet></ROW><ROW><id>14611750</id><snippet>In [38]: col.astype(np.float64).min()
Out[38]: 0.90000000000000002
</snippet></ROW><ROW><id>14611974</id><snippet>A.__b</snippet></ROW><ROW><id>14611974</id><snippet>_A__b</snippet></ROW><ROW><id>14611974</id><snippet>B</snippet></ROW><ROW><id>14612069</id><snippet>IMAGE_DIR = '/path/to/images'
SOUND_DIR = '/path/to/sounds'
</snippet></ROW><ROW><id>14612069</id><snippet>.jpg</snippet></ROW><ROW><id>14612069</id><snippet>foo.jpg</snippet></ROW><ROW><id>14612069</id><snippet>foo.wav</snippet></ROW><ROW><id>14612069</id><snippet>window2.__init__</snippet></ROW><ROW><id>14612069</id><snippet>self.images = IT.cycle([filename for filename in os.listdir(IMAGE_DIR) if filename.endswith('.jpg')])
self.image_file = None
</snippet></ROW><ROW><id>14612069</id><snippet>itertools</snippet></ROW><ROW><id>14612069</id><snippet>import itertools as IT
</snippet></ROW><ROW><id>14612069</id><snippet>os.listdir(IMAGE_DIR)</snippet></ROW><ROW><id>14612069</id><snippet>self.images</snippet></ROW><ROW><id>14612069</id><snippet>next</snippet></ROW><ROW><id>14612069</id><snippet>loadImage</snippet></ROW><ROW><id>14612069</id><snippet>def loadImage(self, event):
    self.image_file = next(self.images)
    image_file = os.path.join(IMAGE_DIR, self.image_file)
    bmp = wx.Image(image_file, wx.BITMAP_TYPE_ANY).ConvertToBitmap()
    wx.StaticBitmap(self.panel, -1, bmp, pos=(200, 50), size=(417, 133))
</snippet></ROW><ROW><id>14612069</id><snippet>   def onPlaySound(self, event):  
        sound_file, ext = os.path.splitext(self.image_file)
        sound_file = os.path.join(SOUND_DIR, sound_file + '.wav')
        sound = wx.Sound(sound_file)
        sound.Play(wx.SOUND_ASYNC)
</snippet></ROW><ROW><id>14612069</id><snippet>os</snippet></ROW><ROW><id>14612069</id><snippet>import wxversion
wxversion.select("2.8")
import wx
import wx.media

import itertools as IT
import os

IMAGE_DIR = os.path.expanduser('~/tmp/images')
SOUND_DIR = os.path.expanduser('~/tmp/sounds')


class MainWindow(wx.Frame):

    title = "Main Menu"

    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, 'Window', size=(1000, 700))
        panel = wx.Panel(self, -1)
        self.SetBackgroundColour(wx.Colour(100, 100, 100))
        self.Centre()
        self.Show()

        status = self.CreateStatusBar()

        menubar = wx.MenuBar()
        filemenu = wx.Menu()
        exitmenu = filemenu.Append(wx.NewId(), "Exit", "Exit Program")

        menubar.Append(filemenu, "File")
        self.Bind(wx.EVT_MENU, self.onExit, exitmenu)
        self.SetMenuBar(menubar)

        font1 = wx.Font(
            30, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')

        Text1 = wx.StaticText(panel, -1, "Rhythm Trainer", (10, 15))
        Text1.SetFont(font1)
        Text1.SetForegroundColour('white')

        btn1 = wx.Button(panel, label='Basic', pos=(100, 200), size=(150, 50))
        btn1.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

        self.Bind(wx.EVT_BUTTON, self.newwindow, btn1)

        btn2 = wx.Button(
            panel, label='Advanced', pos=(100, 270), size=(150, 50))
        btn2.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

        btn3 = wx.Button(
            panel, label='Notations', pos=(100, 340), size=(150, 50))
        btn3.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

        btn4 = wx.Button(
            panel, label='Settings', pos=(100, 410), size=(150, 50))
        btn4.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

        btn5 = wx.Button(panel, label="Quit", pos=(820, 550), size=(150, 50))
        btn5.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))
        self.Bind(wx.EVT_BUTTON, self.OnClick, btn5)

    def OnClick(self, event):
        self.Close()

    def OnQuitButton(self, event):
        wx.Sleep(1)
        self.Destroy()

    def onExit(self, event):
        self.Destroy()

    def newwindow(self, event):
        secondWindow = Window2(parent=None, id=-1)
        secondWindow.Show()
        self.Close()


class Window2(wx.Frame):

    title = "new Window"

    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, 'Window2', size=(1000, 700))
        panel = wx.Panel(self, -1)

        self.SetBackgroundColour(wx.Colour(100, 100, 100))
        self.Centre()
        self.Show()

        status = self.CreateStatusBar()

        menubar = wx.MenuBar()
        filemenu = wx.Menu()
        exitmenu = filemenu.Append(wx.NewId(), "Exit", "Exit Program")

        menubar.Append(filemenu, "File")
        self.Bind(wx.EVT_MENU, self.onExit, exitmenu)
        self.SetMenuBar(menubar)

        font2 = wx.Font(
            30, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')

        Text2 = wx.StaticText(panel, -1, "Rhythm Trainer", (10, 15))
        Text2.SetFont(font2)
        Text2.SetForegroundColour('white')
        self.Show(True)

        btn1 = wx.Button(panel, label="Back", pos=(820, 550), size=(150, 50))
        btn1.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))
        self.Bind(wx.EVT_BUTTON, self.OnClick, btn1)

        btn2 = wx.Button(panel, label="Play", pos=(820, 100), size=(150, 50))
        btn2.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))
        self.Bind(wx.EVT_BUTTON, self.onPlaySound, btn2)

        btn3 = wx.Button(panel, label="Stop", pos=(820, 150), size=(150, 50))
        btn3.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))
        self.Bind(wx.EVT_BUTTON, self.onStopSound, btn3)

        btn4 = wx.Button(panel, label="Next", pos=(820, 200), size=(150, 50))
        btn4.SetFont(
            wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))
        self.Bind(wx.EVT_BUTTON, self.loadImage, btn4)
        self.panel = wx.Panel(self, -1, pos=(50, 50), size=(800, 200))

        self.images = IT.cycle(
            [filename for filename in os.listdir(IMAGE_DIR)
             if any(filename.lower().endswith(ext) 
                    for ext in ('.png', '.jpg', '.jpeg'))])
        self.image_file = next(self.images)

        img = wx.EmptyImage(240,240)
        self.imageCtrl = wx.StaticBitmap(self.panel, wx.ID_ANY, 
                                         wx.BitmapFromImage(img), pos=(200, 50))

    def loadImage(self, event):
        self.image_file = next(self.images)
        print(self.image_file)
        image_file = os.path.join(IMAGE_DIR, self.image_file)
        img = wx.Image(image_file, wx.BITMAP_TYPE_ANY)
        img = img.Scale(240,240)
        # The idea of using imageCtrl.SetBitmap comes from
        # http://www.blog.pythonlibrary.org/2010/03/26/creating-a-simple-photo-viewer-with-wxpython/
        self.imageCtrl.SetBitmap(wx.BitmapFromImage(img))

    def onPlaySound(self, event):
        sound_file, ext = os.path.splitext(self.image_file)
        sound_file = os.path.join(SOUND_DIR, sound_file + '.wav')
        print(sound_file)
        sound = wx.Sound(sound_file)
        sound.Play(wx.SOUND_ASYNC)

    def onStopSound(self, event):
        wx.Sound.Stop()

    def onExit(self, event):
        self.Destroy()
        wx.Sound.Stop()

    def OnClick(self, event):
        wx.Sound.Stop()
        self.Close()

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = MainWindow(parent=None, id=-1)
    app.MainLoop()
</snippet></ROW><ROW><id>14612124</id><snippet>for player in players:
    if player['score'] &lt;= 30:
        ...
</snippet></ROW><ROW><id>14612471</id><snippet>.read()</snippet></ROW><ROW><id>14612471</id><snippet>quotes = re.findall(ur'[^\u201d]*[\u201d]', input.read())
</snippet></ROW><ROW><id>14612471</id><snippet>open()</snippet></ROW><ROW><id>14612471</id><snippet>f.read()</snippet></ROW><ROW><id>14612471</id><snippet>[\^u201d]</snippet></ROW><ROW><id>14612471</id><snippet>quotes = re.findall(ur'[\u201d][^\u201d]*[\u201d]', input.read(), re.U)
</snippet></ROW><ROW><id>14612471</id><snippet>re.U</snippet></ROW><ROW><id>14612471</id><snippet>quotes = re.findall(r'"[^"]*"', input.read(), re.U)
</snippet></ROW><ROW><id>14612471</id><snippet>input</snippet></ROW><ROW><id>14612471</id><snippet>input</snippet></ROW><ROW><id>14612471</id><snippet>&gt;&gt;&gt; input2 = """
cfrhubecf "ehukl wehunkl echnk
wehukb ewni; wejio;"
"werulih"
"""
&gt;&gt;&gt; quotes = re.findall(r'"[^"]*"', input2, re.U)
&gt;&gt;&gt; print quotes
['"ehukl wehunkl echnk\nwehukb ewni; wejio;"', '"werulih"']
</snippet></ROW><ROW><id>14612542</id><snippet>ctypes.c_int32</snippet></ROW><ROW><id>14612542</id><snippet>ctypes.c_int32(x).value
</snippet></ROW><ROW><id>14612542</id><snippet>x &amp; 0xffffffff
</snippet></ROW><ROW><id>14612594</id><snippet>ctypes</snippet></ROW><ROW><id>14612594</id><snippet>class Integerizer(object):
    def __init__(self, value):
        self.value = value
    def __int__(self):
        return self.value
    def __call__(self, *args, **kw):
        return self.value
</snippet></ROW><ROW><id>14612624</id><snippet>form_args = dict(
    status=dict(
        choices=[(0, 'Regular'), (1, 'Guest'), (2, 'Banned')],coerce=int
    ))
</snippet></ROW><ROW><id>14612628</id><snippet>&gt;&gt;&gt; len('' + 'a')
1
</snippet></ROW><ROW><id>14612628</id><snippet>step = set(a+b for a in step for b in S if len(a+b) == 6)
</snippet></ROW><ROW><id>14612699</id><snippet>def abcmaker(ind):
    def abc(state):
        self.feature_inputs[ind].setEnabled(state == Qt.Checked)
    return abc
active_checkbox.stateChanged.connect(abcmaker(i))
</snippet></ROW><ROW><id>14612714</id><snippet>form.accepts()</snippet></ROW><ROW><id>14612714</id><snippet>form.accepts()</snippet></ROW><ROW><id>14612714</id><snippet>request.post_vars</snippet></ROW><ROW><id>14612714</id><snippet>response.flash</snippet></ROW><ROW><id>14612906</id><snippet>tutorialInstance = tutorial.get()
tutorialInstance.chapters = chap
</snippet></ROW><ROW><id>14612906</id><snippet>tutorialInstance = ndb.Key('Tutorial', int(tutID)).get()
tutorialInstance.chapters.append(chap)
</snippet></ROW><ROW><id>14613090</id><snippet>import subprocess
ls = subprocess.Popen(['ls', '-alF'], stdout=subprocess.PIPE)
egrep = subprocess.Popen(['egrep', '\.gz$'], stdin=ls.stdout, stdout=subprocess.PIPE)
print egrep.communicate()[0]
</snippet></ROW><ROW><id>14613090</id><snippet>$ python pipe.py
</snippet></ROW><ROW><id>14613090</id><snippet>-rw-r--r-- 1 amaurea amaurea  146 Jan 30 20:54 test1.py.gz
-rw-r--r-- 1 amaurea amaurea  150 Jan 30 20:54 test2.py.gz
</snippet></ROW><ROW><id>14613236</id><snippet>class ListData:
        def __init__(self):
                 self.data = []

        def add(self, x):
                 self.data.append(x)

        def delete(self, x):
                 self.data.remove(x)

        def data(self):
            return self.data




a = ListData()
a.add(1)
a.add(2)
print a.data
</snippet></ROW><ROW><id>14613257</id><snippet>import matplotlib.pyplot as plt

plt.hlines(7, 0, 2, linestyles='dashed')
plt.hlines(11, 0, 2, linestyles='dashed')
plt.hlines(10, 0, 2, linestyles='dashed')
plt.hlines(8, 0, 2, linestyles='dashed')
plt.annotate(
    '', xy=(1, 10), xycoords = 'data',
    xytext = (1, 8), textcoords = 'data',
    arrowprops = {'arrowstyle':'&lt;-&gt;'})
plt.annotate(
    'D = 1', xy=(1, 9), xycoords = 'data',
    xytext = (5, 0), textcoords = 'offset points')

# alternatively,
# plt.text(1.01, 9, 'D = 1')

plt.show()
</snippet></ROW><ROW><id>14613257</id><snippet>plt.annotate</snippet></ROW><ROW><id>14613257</id><snippet>plt.annotate</snippet></ROW><ROW><id>14613257</id><snippet>plt.text</snippet></ROW><ROW><id>14613257</id><snippet>plt.annotate</snippet></ROW><ROW><id>14613257</id><snippet>(5, 0)</snippet></ROW><ROW><id>14613257</id><snippet>plt.text</snippet></ROW><ROW><id>14613257</id><snippet>(1.01, 9)</snippet></ROW><ROW><id>14613483</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14613483</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14613483</id><snippet>&gt;&gt;&gt; {1:2, 4:5, 2:3}
{1: 2, 2: 3, 4: 5}
</snippet></ROW><ROW><id>14613483</id><snippet>&gt;&gt;&gt; {-1:-1, -2:-2, 1:1}
{1: 1, -2: -2, -1: -1}
</snippet></ROW><ROW><id>14613483</id><snippet>OrderedDict</snippet></ROW><ROW><id>14613922</id><snippet>with open(trainFile) as f:
    next(f)  # discard the first line
    for line in f:
        # deal with the rest.
</snippet></ROW><ROW><id>14613922</id><snippet>#</snippet></ROW><ROW><id>14613922</id><snippet>with open(trainFile) as f:
    for line in f:
        if line.startswith('#'):
            continue
        # deal with the rest.
</snippet></ROW><ROW><id>14614015</id><snippet>class ItemAdd(webapp2.RequestHandler):

    def post(self):
       Item(value = self.request.POST('value')).put()
</snippet></ROW><ROW><id>14614015</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
</snippet></ROW><ROW><id>14614040</id><snippet>class IEnhancedDocumentViewerSchema(IGlobalDocumentViewerSettings):
    """ 
    Use all the fields from the default schema, and add various extra fields.
    """

    folder_location = schema.TextLine(
        title=u"Default folder location",
        description=u'This folder will be created in the Plone root folder. '
                    u'Plone client must have write access to directory.',
        default=u"files_folder")
</snippet></ROW><ROW><id>14614040</id><snippet>from collective.documentviewer.settings import Base
class CustomSettings(Base):
    implements(IEnhancedDocumentViewerSchema)
    use_interface = IEnhancedDocumentViewerSchema
</snippet></ROW><ROW><id>14614040</id><snippet>&lt;adapter 
    for="Products.CMFPlone.interfaces.IPloneSiteRoot"
    provides="my.product.interfaces.IEnhancedDocumentViewerSchema"
    factory=".somewhere.CustomSettings" /&gt;
</snippet></ROW><ROW><id>14614040</id><snippet>from z3c.form import field
from plone.app.z3cform.layout import wrap_form
from collective.documentviewer.views import GlobalSettingsForm
class CustomGlobalSettingsForm(GlobalSettingsForm):
    fields = field.Fields(IEnhancedDocumentViewerSchema)
CustomGlobalSettingsFormView = wrap_form(CustomGlobalSettingsForm)
</snippet></ROW><ROW><id>14614040</id><snippet>from collective.documentviewer.interfaces import ILayer as IDocumentViewerLayer
class ICustomLayer(IDocumentViewerLayer):
    """
    custom layer class
    """
</snippet></ROW><ROW><id>14614040</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;layers name="" meta_type="ComponentRegistry"&gt;
    &lt;layer name="my.product" 
           interface="my.product.interfaces.ICustomLayer" /&gt;
&lt;/layers&gt;
</snippet></ROW><ROW><id>14614040</id><snippet>&lt;browser:page
    name="global-documentviewer-settings"
    for="Products.CMFPlone.interfaces.IPloneSiteRoot"
    class=".somewhere.CustomGlobalSettingsFormView"
    layer=".interfaces.ICustomLayer"
    permission="cmf.ManagePortal" /&gt;
</snippet></ROW><ROW><id>14614267</id><snippet>crontab file</snippet></ROW><ROW><id>14614267</id><snippet>$ crontab -e
</snippet></ROW><ROW><id>14614267</id><snippet># m h  dom mon dow   command
 15  0   *   *   *    /bin/bash /home/yourself/bin/dump_my_tables.sh
</snippet></ROW><ROW><id>14614267</id><snippet>dump_my_tables.sh</snippet></ROW><ROW><id>14614267</id><snippet>0  */5  *  *  *   /usr/bin/python /home/yourself/bin/scrape_the_web.py
</snippet></ROW><ROW><id>14614267</id><snippet>cron</snippet></ROW><ROW><id>14614267</id><snippet>*/5</snippet></ROW><ROW><id>14614267</id><snippet>0,5,10,15,20</snippet></ROW><ROW><id>14614313</id><snippet>net_cidr</snippet></ROW><ROW><id>14614313</id><snippet>models.CharField</snippet></ROW><ROW><id>14614313</id><snippet>clean_net_cidr</snippet></ROW><ROW><id>14614313</id><snippet>class CIDRForm(ModelForm):
    def clean_net_cidr(self):
        # do your magic processing here

    class Meta:
        model = CIDR
</snippet></ROW><ROW><id>14614313</id><snippet>class CIDRAdmin(admin.ModelAdmin):
    form = CIDRForm
</snippet></ROW><ROW><id>14614313</id><snippet>CidrAddressField</snippet></ROW><ROW><id>14614483</id><snippet>result = [x+[y] for x in result for y in pool]
</snippet></ROW><ROW><id>14614483</id><snippet>new_result = []
for x in result:
    for y in pool:
        new_result.append(x+[y])
result = new_result
</snippet></ROW><ROW><id>14614483</id><snippet>result</snippet></ROW><ROW><id>14614483</id><snippet>def filtered_product(args, filter_fn):
    pools = map(tuple, args)
    result = [[]]
    for pool in pools:
        new_result = []
        for x in result:
            for y in pool:
                new_val = x+[y]
                if filter_fn(new_val):
                    new_result.append(x+[y])
        result = new_result
        print 'intermediate result:', result
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>14614483</id><snippet>In [25]: list(filtered_product([[1,2,3], [4,5,6], [7,8,9]], lambda x: sum(x) % 3 != 2))
intermediate result: [[1], [3]]
intermediate result: [[1, 5], [1, 6], [3, 4], [3, 6]]
intermediate result: [[1, 5, 7], [1, 5, 9], [1, 6, 8], [1, 6, 9], [3, 4, 8], [3, 4, 9], [3, 6, 7], [3, 6, 9]]
Out[25]: 
[(1, 5, 7),
 (1, 5, 9),
 (1, 6, 8),
 (1, 6, 9),
 (3, 4, 8),
 (3, 4, 9),
 (3, 6, 7),
 (3, 6, 9)]
</snippet></ROW><ROW><id>14614483</id><snippet>(p for p in itertools.product(whatever) if condition(p))</snippet></ROW><ROW><id>14614688</id><snippet>type</snippet></ROW><ROW><id>14614688</id><snippet>hash-type</snippet></ROW><ROW><id>14614688</id><snippet>s = RDF.HashStorage("abc", options="hash-type='memory'")
model = RDF.Model(s)
</snippet></ROW><ROW><id>14614829</id><snippet>import random 

counter = 0

while counter &lt; 6:
    oracle = random.randint(6,9)

    if oracle == 6:
       print "__ __~"
    elif oracle == 7:
       print "_____"
    elif oracle == 8:
       print "__ __"
    elif oracle == 9:
       print "_____~"

    counter += 1
</snippet></ROW><ROW><id>14615132</id><snippet>apt-get install postgresql
/etc/init.d/postgresql start
</snippet></ROW><ROW><id>14615146</id><snippet>import re

rgx = re.compile(r'Found ([0-9]+) solutions')

with open('myfile.txt') as f:
    result = [m.group(1) for m in (rgx.match(line) for line in f) if m]
</snippet></ROW><ROW><id>14615146</id><snippet>(rgx.match(line) for line in f)</snippet></ROW><ROW><id>14615146</id><snippet>apply()</snippet></ROW><ROW><id>14615146</id><snippet>rgx.match()</snippet></ROW><ROW><id>14615146</id><snippet>SRE_Match</snippet></ROW><ROW><id>14615146</id><snippet>if m</snippet></ROW><ROW><id>14615146</id><snippet>re.match()</snippet></ROW><ROW><id>14615146</id><snippet>None</snippet></ROW><ROW><id>14615146</id><snippet>m.group(1)</snippet></ROW><ROW><id>14615146</id><snippet>re</snippet></ROW><ROW><id>14615347</id><snippet>scipy</snippet></ROW><ROW><id>14615347</id><snippet>import sys
import cv2
import math
import numpy
from scipy.ndimage import label

pi_4 = 4*math.pi

def segment_on_dt(img):
    border = img - cv2.erode(img, None)

    dt = cv2.distanceTransform(255 - img, 2, 3)
    dt = ((dt - dt.min()) / (dt.max() - dt.min()) * 255).astype(numpy.uint8)
    _, dt = cv2.threshold(dt, 100, 255, cv2.THRESH_BINARY)

    lbl, ncc = label(dt)
    lbl[border == 255] = ncc + 1

    lbl = lbl.astype(numpy.int32)
    cv2.watershed(cv2.cvtColor(img, cv2.COLOR_GRAY2RGB), lbl)
    lbl[lbl &lt; 1] = 0
    lbl[lbl &gt; ncc] = 0

    lbl = lbl.astype(numpy.uint8)
    lbl = cv2.erode(lbl, None)
    lbl[lbl != 0] = 255
    return lbl


def find_circles(frame):
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)
    frame_gray = cv2.GaussianBlur(frame_gray, (5, 5), 2)

    edges = frame_gray - cv2.erode(frame_gray, None)
    _, bin_edge = cv2.threshold(edges, 0, 255, cv2.THRESH_OTSU)
    height, width = bin_edge.shape
    mask = numpy.zeros((height+2, width+2), dtype=numpy.uint8)
    cv2.floodFill(bin_edge, mask, (0, 0), 255)

    components = segment_on_dt(bin_edge)

    circles, obj_center = [], []
    contours, _ = cv2.findContours(components,
            cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

    for c in contours:
        c = c.astype(numpy.int64) # XXX OpenCV bug.
        area = cv2.contourArea(c)
        if 100 &lt; area &lt; 3000:
            arclen = cv2.arcLength(c, True)
            circularity = (pi_4 * area) / (arclen * arclen)
            if circularity &gt; 0.5: # XXX Yes, pretty low threshold.
                circles.append(c)
                box = cv2.boundingRect(c)
                obj_center.append((box[0] + (box[2] / 2), box[1] + (box[3] / 2)))

    return circles, obj_center

def track_center(objcenter, newdata):
    for i in xrange(len(objcenter)):
        ostr, oc = objcenter[i]
        best = min((abs(c[0]-oc[0])**2+abs(c[1]-oc[1])**2, j)
                for j, c in enumerate(newdata))
        j = best[1]
        if i == j:
            objcenter[i] = (ostr, new_center[j])
        else:
            print "Swapping %s &lt;-&gt; %s" % ((i, objcenter[i]), (j, objcenter[j]))
            objcenter[i], objcenter[j] = objcenter[j], objcenter[i]


video = cv2.VideoCapture(sys.argv[1])

obj_center = None
while True:
    ret, frame = video.read()
    if not ret:
        break

    circles, new_center = find_circles(frame)
    if obj_center is None:
        obj_center = [(str(i + 1), c) for i, c in enumerate(new_center)]
    else:
        track_center(obj_center, new_center)

    for i in xrange(len(circles)):
        cv2.drawContours(frame, circles, i, (0, 255, 0))
        cstr, ccenter = obj_center[i]
        cv2.putText(frame, cstr, ccenter, cv2.FONT_HERSHEY_COMPLEX, 0.5,
                (255, 255, 255), 1, cv2.CV_AA)

    cv2.imshow("result", frame)
    cv2.waitKey(10)
    if len(circles[0]) &lt; 5:
        print "lost something"
</snippet></ROW><ROW><id>14615426</id><snippet>selection_model = treeview.selectionModel()</snippet></ROW><ROW><id>14615426</id><snippet>selection_model.select(model_index,QItemSelectionModel.SelectCurrent)
</snippet></ROW><ROW><id>14615426</id><snippet>model_index</snippet></ROW><ROW><id>14615426</id><snippet>indexFromItem(item)</snippet></ROW><ROW><id>14615446</id><snippet>Library version = 0x10112
Opening port 0
FT_Open succeeded.  Handle is 0xf7d240
FT_GetDeviceInfo succeeded.  Device is type 4.
FT_EE_Read succeeded.
Signature1 = 0
Signature2 = -1
Version = 1
VendorId = 0x0407
ProductId = 0x6009
Manufacturer = MagicIncorporated
ManufacturerId = wo
Description = MyCompany Test Board
SerialNumber = testit_028
MaxPower = 44
PnP = 1
SelfPowered = 0
RemoteWakeup = 1
2232RC:
-------
    Rev5 = 0x1
    IsoInA = 0x0
    IsoInB = 0x0
    IsoOutA = 0x0
    IsoOutB = 0x0
    PullDownEnable5 = 0x0
    SerNumEnable5 = 0x0
    USBVersionEnable5 = 0x0
    USBVersion5 = 0x110
    AIsHighCurrent = 0x0
    BIsHighCurrent = 0x0
    IFAIsFifo = 0x0
    IFAIsFifoTar = 0x0
    IFAIsFastSer = 0x0
    AIsVCP = 0x0
    IFBIsFifo = 0x0
    IFBIsFifoTar = 0x0
    IFBIsFastSer = 0x0
    BIsVCP = 0x0
Returning 0
</snippet></ROW><ROW><id>14615451</id><snippet>globals()</snippet></ROW><ROW><id>14615451</id><snippet>for key, const in list_of_constellations.items():
    globals()[const[0]] = v  # set "And" to 0, etc.
</snippet></ROW><ROW><id>14615451</id><snippet>setattr()</snippet></ROW><ROW><id>14615451</id><snippet>import constellations

for key, const in constellations.list_of_constellations.items():
    setattr(constellations, constellation[0], v)  # set "And" to 0, etc.
</snippet></ROW><ROW><id>14615454</id><snippet>ForeignKey</snippet></ROW><ROW><id>14615454</id><snippet>BatStat</snippet></ROW><ROW><id>14615454</id><snippet>Player_Bios</snippet></ROW><ROW><id>14615454</id><snippet>batstat_set</snippet></ROW><ROW><id>14615454</id><snippet>BatStats</snippet></ROW><ROW><id>14615454</id><snippet>_set</snippet></ROW><ROW><id>14615454</id><snippet>views.py</snippet></ROW><ROW><id>14615454</id><snippet>def SpecificPLayer(request, playerslug):
    player = Player_Bios.objects.get(player_id=playerslug) #this is the name, last and it is working fine   
    batstats = player.batstat_set.all() 
    context = {'player' : player, 'today' : date.today(), 'batstats': batstats, }
    return render_to_response ('singleplayer.html', context,context_instance=RequestContext(request))
</snippet></ROW><ROW><id>14615454</id><snippet>{% for stat in batstats %}
    {{ stat.ab }}
{% endfor %}
</snippet></ROW><ROW><id>14615623</id><snippet>itertools.product()</snippet></ROW><ROW><id>14615623</id><snippet>product = itertools.product(L, repeat=n)
</snippet></ROW><ROW><id>14615623</id><snippet>product</snippet></ROW><ROW><id>14615623</id><snippet>list(product)</snippet></ROW><ROW><id>14615623</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(range(3), repeat=2))
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</snippet></ROW><ROW><id>14615664</id><snippet>import win32ui
import win32print
import win32con

INCH = 1440

hDC = win32ui.CreateDC ()
hDC.CreatePrinterDC (win32print.GetDefaultPrinter ())
hDC.StartDoc ("Test doc")
hDC.StartPage ()
hDC.SetMapMode (win32con.MM_TWIPS)
hDC.DrawText ("TEST", (0, INCH * -1, INCH * 8, INCH * -2), win32con.DT_CENTER)
hDC.EndPage ()
hDC.EndDoc ()
</snippet></ROW><ROW><id>14615664</id><snippet>win32ui</snippet></ROW><ROW><id>14615664</id><snippet>TextOut</snippet></ROW><ROW><id>14615664</id><snippet>import win32ui
# X from the left margin, Y from top margin
# both in pixels
X=50; Y=50
multi_line_string = input_string.split()
hDC = win32ui.CreateDC ()
hDC.CreatePrinterDC (your_printer_name)
hDC.StartDoc (the_name_will_appear_on_printer_spool)
hDC.StartPage ()
for line in multi_line_string:
     hDC.TextOut(X,Y,line)
     Y += 100
hDC.EndPage ()
hDC.EndDoc ()
</snippet></ROW><ROW><id>14615740</id><snippet>import math as M
frct = M.sqrt(2)

for i in range(7):
    frct = 1 / (frct - int(frct))
    print 'Attempt %d: %.20f' % (i, frct)
</snippet></ROW><ROW><id>14615740</id><snippet>Significant digits × base^exponent
</snippet></ROW><ROW><id>14615740</id><snippet>import decimal
context = decimal.Context(prec=100)
frct = context.sqrt(decimal.Decimal(2))

print 'Original square root:', frct

for i in range(7):
    frct = context.divide(1, frct - int(frct))
    print 'Attempt %d: %s' % (i, frct)
</snippet></ROW><ROW><id>14615740</id><snippet>Original square root: 1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573
Attempt 0: 2.414213562373095048801688724266222622763067167798368627068136427003657772608039155697953022512189319
Attempt 1: 2.414213562373095048801688723683379910288448158038030882339615025168647691299718507620657724911891709
Attempt 2: 2.414213562373095048801688727180436185136162216600057354932063779738350752352175486771948426117071942
Attempt 3: 2.414213562373095048801688706780941248524496874988236407630784335182989956231878308913506955872772859
Attempt 4: 2.414213562373095048801688825680854593346774866097140494471009059332623720827093783193465943198777227
Attempt 5: 2.414213562373095048801688132680869461024772261055702548455940065126184103929661474210576202848416747
Attempt 6: 2.414213562373095048801692171780866910134509900201052604731129303452089934643341550673727041448985316
</snippet></ROW><ROW><id>14615920</id><snippet>A = [['A',[1,2,3]],['D',[3,4]],['E',[6,7]]] 
B = [['A',[1,2,3]],['E',[6,7]],['F',[8,9]]]

A_set = set((a, tuple(b)) for a, b in A)
B_set = set((a, tuple(b)) for a, b in B)
print len(A_set &amp; B_set)
</snippet></ROW><ROW><id>14616121</id><snippet>def resample_up(t, x, r) :
    return x[np.argmax(r[:, None] &lt;= t, axis=1)]

def resample_down(t, x, r) :
    return x[::-1][np.argmax(r[:, None] &gt;= t[::-1], axis=1)]

&gt;&gt;&gt; resample_up(t, x, r)
array([10, 12, 13, 14])
&gt;&gt;&gt; resample_down(t, x, r)
array([10, 11, 12, 14])
</snippet></ROW><ROW><id>14616121</id><snippet>&gt;&gt;&gt; r[:, None] &lt;= t
array([[ True,  True,  True,  True,  True],
       [False, False,  True,  True,  True],
       [False, False, False,  True,  True],
       [False, False, False, False,  True]], dtype=bool)
&gt;&gt;&gt; r[:, None] &gt;= t[::-1]
array([[False, False, False, False,  True],
       [False, False, False,  True,  True],
       [False, False,  True,  True,  True],
       [ True,  True,  True,  True,  True]], dtype=bool)
</snippet></ROW><ROW><id>14616121</id><snippet>np.argmax</snippet></ROW><ROW><id>14616121</id><snippet>True</snippet></ROW><ROW><id>14616121</id><snippet>In [2]: %timeit resample_up(t, x, r)
100000 loops, best of 3: 7.32 us per loop

In [3]: %timeit resample_down(t, x, r)
100000 loops, best of 3: 8.44 us per loop

In [4]: %timeit resample(t, x, r) # modified version of the OP's taking also x
100000 loops, best of 3: 13.7 us per loop
</snippet></ROW><ROW><id>14616131</id><snippet>get_update_count</snippet></ROW><ROW><id>14616131</id><snippet>if seconds &gt; 300 or get_update_count(myClass) &lt; 2:
    #and update updatecount
    update(myClass)     
else:
    #reset update count
    retrieveFromCache(myClass)
</snippet></ROW><ROW><id>14616131</id><snippet>myClass.</snippet></ROW><ROW><id>14616131</id><snippet>update_map = {}

def update(instance):
     #do the update
     update_map[instance] = update_map.get(instance,0)+1

def get_update_count(instance):
     return update_map[instance] or 0
</snippet></ROW><ROW><id>14616299</id><snippet>class Article(Base):
    @hybrid_property
    def published(self):
        return self.is_published == True

    @hybrid_property
    def recent(self):
        # this relies on the date arithmetic of the target backend
        return datetime.now() - self.created_at &gt;= datetime.timedelta(days=7)


articles = query(Article).filter(Article.published, Article.recent).all()
</snippet></ROW><ROW><id>14616390</id><snippet>kw_id</snippet></ROW><ROW><id>14616390</id><snippet>any()</snippet></ROW><ROW><id>14616390</id><snippet>any()</snippet></ROW><ROW><id>14616390</id><snippet>from sqlalchemy import exists

session.query(KWViolations).filter(KWViolations.proj_id == project.id).\
    filter(
        ~exists().where(
                and_(
                    KWMethodMetrics.kw_id == KWViolations.kw_id,
                    KWMethodMetrics.checkpoint_id == checkpoint.id
                )
        )
    )
</snippet></ROW><ROW><id>14616471</id><snippet>exists([1]).where(...)
</snippet></ROW><ROW><id>14616471</id><snippet>s = select([1]).where(
         table1.c.col_a == table2.c.colb
       ).where(
         table1.c.colb == table2.c.colb
       ).limit(30)
s = exists(s)
</snippet></ROW><ROW><id>14616506</id><snippet>lookup_path = {'joe': 'C:\whatev', 'john':'C:\else'}
for z in usernames
    print lookup_path[z]
</snippet></ROW><ROW><id>14616558</id><snippet>A = [x for x in A if len(x[1]) == 2]
</snippet></ROW><ROW><id>14616558</id><snippet>A = [[a, b] for a, b in A if len(b) == 2]
</snippet></ROW><ROW><id>14616561</id><snippet>fields = ('blog_id',)
</snippet></ROW><ROW><id>14616602</id><snippet>q = query(User).filter(User.id = user_id).limit(whatever)
results = from_redis(q, Query.all)
</snippet></ROW><ROW><id>14616602</id><snippet>def from_redis(query, meth):
    for server in ['r1', 'r2']:
        try:
            return meth(q.options(FromCache(server)))
        except Exception, e:
            continue
    else:
        raise e
</snippet></ROW><ROW><id>14616602</id><snippet>Query</snippet></ROW><ROW><id>14616602</id><snippet>class RedisQuery(CachingQuery):
    redis_servers = False

    @_generative(self):
    def using_redis(self):
        self.redis_servers = True

    def __iter__(self):
        if self.redis_servers:
            for server in ['r1', 'r2']:
                try:
                    return super(RedisQuery, self).options(FromCache(server)).__iter__()
                except Exception, e:
                    continue
            else:
                raise e
        else:
            return super(RedisQuery, self).__iter__()
</snippet></ROW><ROW><id>14616602</id><snippet>q = query(User).filter(User.id = user_id).limit(whatever)
results = q.using_redis().all()
</snippet></ROW><ROW><id>14616621</id><snippet>sudo defaults write \
    /Library/Preferences/loginwindow \
    AutoLaunchedApplicationDictionary -array-add \
    '{ Path="/Applications/YourApp.app"; }'
</snippet></ROW><ROW><id>14616927</id><snippet>from django.utils import simplejson as json    

def index(request):
   fields    = MyModel._meta.fields
   data      = json.loads(serializers.serialize("json", MyModel.objects.all()))

   def parse_data(data):

        result = [] 

        # flatten the dictionary
        def flatten_dict(d):
            """ 
            Because the only nested dict here is the fields, let's just
            remove the 'fields' suffix so that the fields can be loaded in 
            template by name
            """
            def items():
                for key, value in d.items():
                    if isinstance(value, dict):
                        for subkey, subvalue in flatten_dict(value).items():
                            yield subkey, subvalue
                    else:
                        yield key, value

            return dict(items())

        for d in data:
            # change the 'pk' key name into its actual name in the database
            d[Employee._meta.pk.name] = d.pop('pk') 
            # append the flattend dict of each object's field-value to the result 
            result.append(flatten_dict(d))

        return result


   context_instance = RequestContext(request, {    
       'data'      : parse_data(data),
       'fields'    : fields,
   })
   return TemplateResponse(request, 'index.html', context_instance)
</snippet></ROW><ROW><id>14616927</id><snippet>&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            {% for field in cached_fields %}
                &lt;th&gt;{% get_verbose_name field %}&lt;/th&gt;
            {% endfor %}
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;            
            {% for d in data %}
                &lt;tr&gt;
                    {% for field in fields %}
                        &lt;td&gt;{% get_value_from_key d field %}&lt;/td&gt;
                    {% endfor %}
                &lt;/tr&gt;
            {% endfor %}            
    &lt;/tbody&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>14616936</id><snippet>s = 0
r = n - 1

# factor n - 1 as 2^(r)*s
while r % 2 == 0:
    s = s + 1
    r = r // 2  # floor
</snippet></ROW><ROW><id>14616936</id><snippet>r</snippet></ROW><ROW><id>14616936</id><snippet>s</snippet></ROW><ROW><id>14616936</id><snippet># factor n - 1 as 2^(r)*s, where s is odd.
r, s = 0, n - 1
while s % 2 == 0:
    r += 1
    s //= 2
</snippet></ROW><ROW><id>14616936</id><snippet>for i in range(k):
</snippet></ROW><ROW><id>14616936</id><snippet>i</snippet></ROW><ROW><id>14616936</id><snippet>_</snippet></ROW><ROW><id>14616936</id><snippet>a = random.randrange(1, n)
</snippet></ROW><ROW><id>14616936</id><snippet>a = random.randrange(2, n - 1)
</snippet></ROW><ROW><id>14616936</id><snippet>True</snippet></ROW><ROW><id>14616936</id><snippet># a^(s) = 1 (mod n)?
x = pow(a, s, n)
if x == 1:
    continue
</snippet></ROW><ROW><id>14616936</id><snippet># a^(s) = ±1 (mod n)?
x = pow(a, s, n)
if x == 1 or x == n - 1:
    continue
</snippet></ROW><ROW><id>14616936</id><snippet># a^(2^(j) * s) = -1 (mod n)?
for _ in range(r - 1):
    x = pow(x, 2, n)
    if x == n - 1:
        break
else:
    return False
</snippet></ROW><ROW><id>14616936</id><snippet>from random import randrange

small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31] # etc.

def probably_prime(n, k):
    """Return True if n passes k rounds of the Miller-Rabin primality
    test (and is probably prime). Return False if n is proved to be
    composite.

    """
    if n &lt; 2: return False
    for p in small_primes:
        if n &lt; p * p: return True
        if n % p == 0: return False
    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2
    for _ in range(k):
        a = randrange(2, n - 1)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True
</snippet></ROW><ROW><id>14617026</id><snippet>processes = [subprocess.Popen(cmd, stdin=subprocess.PIPE,
               stdout=subprocess.PIPE, stderr=subprocess.PIPE,close_fds=True)
                            for _ in range(2)]
</snippet></ROW><ROW><id>14617026</id><snippet>for p in processes:
    print p.communicate("hello world\ngoodbye world\n")
</snippet></ROW><ROW><id>14617026</id><snippet>while processes:
    print processes.pop().communicate("hello world\ngoodbye world\n")
</snippet></ROW><ROW><id>14617047</id><snippet>&gt;&gt;&gt; # Tally occurrences of words in a list
&gt;&gt;&gt; cnt = Counter()
&gt;&gt;&gt; for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
...     cnt[word] += 1
&gt;&gt;&gt; cnt
Counter({'blue': 3, 'red': 2, 'green': 1})

&gt;&gt;&gt; # Find the ten most common words in Hamlet
&gt;&gt;&gt; import re
&gt;&gt;&gt; words = re.findall('\w+', open('hamlet.txt').read().lower())
&gt;&gt;&gt; Counter(words).most_common(10)
[('the', 1143), ('and', 966), ('to', 762), ('of', 669), ('i', 631),
 ('you', 554),  ('a', 546), ('my', 514), ('hamlet', 471), ('in', 451)]
</snippet></ROW><ROW><id>14617790</id><snippet>def ngram(text,grams):  
    model=[]  
    count=0  
    for token in text[:len(x)-grams+1]:  
       model.append(text[count:count+grams])  
       count=count+1  
    return model
</snippet></ROW><ROW><id>14617798</id><snippet>db(db.auth_user.id == auth.user_id).update(score=float(balance) - float(cost))
</snippet></ROW><ROW><id>14617798</id><snippet>auth.user</snippet></ROW><ROW><id>14617925</id><snippet>A = HDFStore('A.h5')
B = HDFStore('B.h5')

nrows_a = A.get_storer('df').nrows
nrows_b = B.get_storer('df').nrows
a_chunk_size = 1000000
b_chunk_size = 1000000

def merge_a_b(a,b):
    # function that returns an operation on passed
    # frames a and b
    # could be a merge, join, concat, or other operation that 
    # results in a single frame


for a in xrange(int(nrows_a / a_chunk_size) + 1):

    a_start_i = a * a_chunk_size
    a_stop_i  = min((a + 1) * a_chunk_size, nrows_a)

    a = A.select('df', start = a_start_i, stop = a_stop_i)

    for b in xrange(int(nrows_b / b_chunk_size) + 1):

        b_start_i = b * b_chunk_size
        b_stop_i = min((b + 1) * b_chunk_size, nrows_b)

        b = B.select('df', start = b_start_i, stop = b_stop_i)

        # this is your result store
        m = merge_a_b(a, b)

        if len(m):
            store.append('df_result', m)
</snippet></ROW><ROW><id>14618085</id><snippet>sys.last_value</snippet></ROW><ROW><id>14618085</id><snippet>&gt;&gt;&gt; 1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt; sys.last_value
ZeroDivisionError('integer division or modulo by zero',)
&gt;&gt;&gt; type(sys.last_value)
&lt;type 'exceptions.ZeroDivisionError'&gt;
</snippet></ROW><ROW><id>14618201</id><snippet>d = dict()
d.update(re.findall(r'([a-zA-Z]+)(\d+)',"english100"))
</snippet></ROW><ROW><id>14618201</id><snippet>&gt;&gt;&gt; dict(x.groups() for x in re.finditer(r'([a-zA-Z]+)(\d+)',"english100spanish24"))
{'spanish': '24', 'english': '100'}
</snippet></ROW><ROW><id>14618208</id><snippet># ----- test classes -----    
class Event:
    def __init__(self):
        self.funcs = []

    def bind(self, func):
        self.funcs.append(func)

    def __call__(self, *args, **kwargs):
        message = type('EventMessage', (), kwargs)
        for func in self.funcs:
            func(message)

# ----- implementation -----

class BindFunction:
    def __init__(self, func):
        self.func = func
        self.event = Event()

    def __call__(self, *args, **kwargs):
        out = self.func(*args, **kwargs)
        self.event(source=None)
        return out

    def bind(self, func):
        self.event.bind(func)

class BindMethod(BindFunction):
    def __init__(self, instance, func):
        super().__init__(func)
        self.instance = instance

    def __call__(self, *args, **kwargs):
        out = self.func(self.instance, *args, **kwargs)
        self.event(source=self.instance)
        return out

class Descriptor(BindFunction):
    methods = {}

    def __get__(self, instance, owner):
        if not instance in Descriptor.methods:
            Descriptor.methods[instance] = BindMethod(instance, self.func)
        return Descriptor.methods[instance]

def bindable(func):
    return Descriptor(func)

# ----- usage -----
class list:
    def __init__(self, seq=()):
        self.__list = [el for el in seq]

    @bindable
    def append(self, p_object):
        self.__list.append(p_object)

    def __str__(self):
        return str(self.__list)

@bindable
def x():
    print('calling x')

# ----- tests -----

def f (event):
    print('calling f')
    print('source type: %s' % type(event.source))

def g (event):
    print('calling g')
    print('source type: %s' % type(event.source))

a = list()
b = list()

a.append.bind(f)
b.append.bind(g)

a.append(5)
print(a)

b.append(6)
print(b)

print('----')

x.bind(f)
x()
</snippet></ROW><ROW><id>14618208</id><snippet>calling f
source type: &lt;class '__main__.list'&gt;
[5]
calling g
source type: &lt;class '__main__.list'&gt;
[6]
----
calling x
calling f
source type: &lt;class 'NoneType'&gt;
</snippet></ROW><ROW><id>14618208</id><snippet>event.source</snippet></ROW><ROW><id>14618221</id><snippet>return</snippet></ROW><ROW><id>14618221</id><snippet>return</snippet></ROW><ROW><id>14618221</id><snippet>clean_title()</snippet></ROW><ROW><id>14618221</id><snippet>name</snippet></ROW><ROW><id>14618221</id><snippet>return</snippet></ROW><ROW><id>14618221</id><snippet>name = []</snippet></ROW><ROW><id>14618221</id><snippet>name.append(title_goes_here)</snippet></ROW><ROW><id>14618221</id><snippet>name = {}</snippet></ROW><ROW><id>14618221</id><snippet>name[index_goes_here] = title_goes_here</snippet></ROW><ROW><id>14618221</id><snippet>filename</snippet></ROW><ROW><id>14618221</id><snippet>title</snippet></ROW><ROW><id>14618221</id><snippet>clean_title</snippet></ROW><ROW><id>14618221</id><snippet>filenames</snippet></ROW><ROW><id>14618311</id><snippet>ext_dict = {}

# Create the dictionary
for ext in extList:
    ext_dict[ext] = {}
    ext_dict[ext]["Counter"] = 0
    ext_dict[ext]["FileList"] = []

#populate the dictionary
for fl in List:
    if ext_dict.has_key(f1[f1.rfind('.'):]):
        ext = f1[f1.rfind('.'):]
        ext_dict[ext]["Counter"] = ext_dict[ext]["Counter"] + 1
        ext_dict[ext]["FileList"].append(fl)

# iterate over dictionary keys
for elem in ext_dict.keys():
    print elem
    print ext_dict[elem]["counter"]
    print ext_dict[elem]["FileList"]
</snippet></ROW><ROW><id>14618337</id><snippet>[(sum(1 for _ in v), int(k)) for k,v in groupby(str(1223444556))]
</snippet></ROW><ROW><id>14618396</id><snippet>pexpect.py</snippet></ROW><ROW><id>14618625</id><snippet>class State(object):
    menu = "menu"
    play = "play"

class Game(??):

    def event_handler(self):
        for event in pygame.event.get():
            if event.type == KEYDOWN:
                if event.key == K_m:
                    self.state = State.menu
                    print "Key Pressed: m"
                elif event.key == K_p:
                    self.state = State.play
                    print "Key Pressed: p"

    def game_loop(self):
        self.state = State.menu

        while running:
            if self.state is State.menu:
                # Do menu things
            elif self.state is State.play:
                # Play game! 
</snippet></ROW><ROW><id>14618799</id><snippet>def generate_strings(value, bound, alpha):
    yield value
    while value != bound: # run until we have reached bound
        for i, c in enumerate(reversed(value)): # loop over the string in reverse
            if c != alpha[-1]: # can this character be incremented?
                # construct an incremented value
                value = value[:-1-i] + alpha[alpha.index(c)+1] + alpha[0]*i
                break # exit the for loop
        else: # run only if for loop ended without breaking
            value = alpha[0]*(len(value) + 1) # make a longer string
        yield value
</snippet></ROW><ROW><id>14618799</id><snippet>&gt;&gt;&gt; print(list(generate_strings("b", "cc", "abcd")))
['b', 'c', 'd', 'aa', 'ab', 'ac', 'ad', 'ba', 'bb', 'bc', 'bd', 'ca', 'cb', 'cc']
</snippet></ROW><ROW><id>14618799</id><snippet>bound</snippet></ROW><ROW><id>14618799</id><snippet>None</snippet></ROW><ROW><id>14618799</id><snippet>list()</snippet></ROW><ROW><id>14618799</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt;
&gt;&gt;&gt; print(list(islice(generate_strings("xyzzy", None, ascii_lowercase), 5)))
['xyzzy', 'xyzzz', 'xzaaa', 'xzaab', 'xzaac']
</snippet></ROW><ROW><id>14618799</id><snippet>-1</snippet></ROW><ROW><id>14618799</id><snippet>x[len(x)-1]</snippet></ROW><ROW><id>14618799</id><snippet>enumerate</snippet></ROW><ROW><id>14618799</id><snippet>reversed</snippet></ROW><ROW><id>14618799</id><snippet>i</snippet></ROW><ROW><id>14618799</id><snippet>new_dig</snippet></ROW><ROW><id>14618799</id><snippet>break</snippet></ROW><ROW><id>14618799</id><snippet>for</snippet></ROW><ROW><id>14618799</id><snippet>else</snippet></ROW><ROW><id>14618799</id><snippet>break</snippet></ROW><ROW><id>14618799</id><snippet>else</snippet></ROW><ROW><id>14618799</id><snippet>break</snippet></ROW><ROW><id>14618834</id><snippet>import math

amount = int(totalAmount)
assert amount &gt;= 0
shipping = { 
  'USA': [6, 8, 10],
  'Canada': [8, 10, 12]
}
try:
    surcharge = shipping[country][amount and (math.ceil(amount / 50.0) - 1)]
except IndexError:
    surcharge = 0
total = amount + surcharge
</snippet></ROW><ROW><id>14618834</id><snippet>[6, 8, 10]</snippet></ROW><ROW><id>14618834</id><snippet>[8, 10, 12]</snippet></ROW><ROW><id>14618834</id><snippet>1 / 50 == 0</snippet></ROW><ROW><id>14618834</id><snippet>1 / 50.0 == 0.02</snippet></ROW><ROW><id>14618834</id><snippet>math.ceil(.001) == 1.0</snippet></ROW><ROW><id>14618834</id><snippet>math.ceil(1.5) == 2.0</snippet></ROW><ROW><id>14618834</id><snippet>math.ceil(2) == 2.0</snippet></ROW><ROW><id>14618834</id><snippet>int(2.0) == 2</snippet></ROW><ROW><id>14618834</id><snippet>int(math.ceil(amount / 50.0) - 1)</snippet></ROW><ROW><id>14618834</id><snippet>math.ceil(0) == 0.0</snippet></ROW><ROW><id>14618834</id><snippet>0.0 - 1 == -1.0</snippet></ROW><ROW><id>14618834</id><snippet>and</snippet></ROW><ROW><id>14618834</id><snippet>amount and int(math.ceil(amount / 50.0) - 1)</snippet></ROW><ROW><id>14618834</id><snippet>try:
    surcharge = shipping[country][amount and int(math.ceil(amount / 50.0) - 1)]
except IndexError:
    surcharge = 0
</snippet></ROW><ROW><id>14619214</id><snippet>icrnl</snippet></ROW><ROW><id>14619214</id><snippet>stty -a</snippet></ROW><ROW><id>14619214</id><snippet>c_iflag</snippet></ROW><ROW><id>14619468</id><snippet>def mouseMotion(self, buttons, pos, rel):

    if self.pressing == True:
        diffx = self.start[0] - pos[0]
        diffy = self.start[1] - pos[1]            
        width = abs(self.start[0] - pos[0])
        height = abs(self.start[1] - pos[1])
        if diffx &gt; 0 and diffy &gt; 0:
            width = (width - (width * 2))
            height = (height - (height * 2))
        elif diffx &gt; 0 and diffy &lt;= 0:
            width = (width - (width * 2))
        elif diffx &lt;= 0 and diffy &gt; 0:
            height = (height - (height * 2))
        elif diffx &lt; 0 and diffy &lt; 0:
            pass

        dimensions = (width, height)
        self.box = pygame.Rect(self.start, dimensions)

        pygame.draw.rect(self.screen, (0,0,0), self.box, 1)
</snippet></ROW><ROW><id>14619537</id><snippet>path = '/home/my_username/projects'
if path not in sys.path:
    sys.path.append(path)
os.environ['DJANGO_SETTINGS_MODULE'] = 'my_project.settings'
from my_project.myapp.models import Kitchen, Sink
</snippet></ROW><ROW><id>14619537</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>14619814</id><snippet>def a(name):
    global_variables = globals()
    try:
        name_of_passed_in_variable = [x for x in global_variables if id(global_variables[x]) == id(name)][0]
    except Exception:
        name_of_passed_in_variable = "unknown"
    print name_of_passed_in_variable, name

my_name = "Tom"
a(my_name)

a("Mike")

second_name = my_name
a(second_name)
</snippet></ROW><ROW><id>14619814</id><snippet>my_name Tom
unknown Mike
my_name Tom
</snippet></ROW><ROW><id>14619881</id><snippet>threading</snippet></ROW><ROW><id>14619881</id><snippet>multiprocessing</snippet></ROW><ROW><id>14619881</id><snippet>import Queue
import threading

number_of_API_readers = 10

parameters_queue = Queue.Queue()
results_queue = Queue.Queue(100)

for par in list_of_parameters:
    parameters_queue.put(par)

def read_from_queue_and_write_to_db():
    while True:
        try:
            result = results_queue.get(timeout=30)
            #write result to DB
        except Queue.Full:
            break

def query_API_and_write_to_queue():
    while True:
        try:
            par = parameters_queue.get(timeout=5)
            result = SomeAPI.call(par)
            results_queue.put(result)
        except Queue.Empty:
            break

db_writer = threading.Thread(target=read_from_queue_and_write_to_db)
api_readers = [threading.Thread(target=query_API_and_write_to_queue) 
                for i in range(number_of_API_readers)]

db_writer.start()
for ar in api_readers:
    ar.start()
</snippet></ROW><ROW><id>14620795</id><snippet>struct</snippet></ROW><ROW><id>14620795</id><snippet>pickle</snippet></ROW><ROW><id>14620795</id><snippet>from collections import namedtuple
import pickle # or cPickle, it's faster
MyStruct = namedtuple("MyStruct", "sMark nPackLen nFlag nGisIp nPort sData sEnd")

tuple_to_send = MyStruct(sMark="abcdef", nPackLen=...)
string_to_send = pickle.dumps(tuple_to_send)
</snippet></ROW><ROW><id>14620795</id><snippet>pickle</snippet></ROW><ROW><id>14620795</id><snippet>cPickle</snippet></ROW><ROW><id>14620795</id><snippet>format_ = "6shhih50s2s"
</snippet></ROW><ROW><id>14620795</id><snippet>import struct
from collections import namedtuple

format_ = "6shhih50s2s"

MyStruct = namedtuple("MyStruct", "sMark nPackLen nFlag nGisIp nPort sData sEnd")
tuple_to_send = MyStruct(sMark="\r\n{}".format("*KW"), 
                     nPackLen=struct.calcsize(format_),
                     nFlag=0x0002,
                     nGisIp=0,
                     nPort=0,
                     sData= "*KW,NR09G05133,015,080756,#",
                     sEnd="\r\n")


string_to_send = struct.pack(format_, *tuple_to_send._asdict().values())
</snippet></ROW><ROW><id>14620795</id><snippet>tuple_to_send.sMark = "bcdefg"
</snippet></ROW><ROW><id>14620795</id><snippet>import struct
from collections import namedtuple

format_ = "6shhih50s2s"

MyStruct = namedtuple("MyStruct", "sMark nPackLen nFlag nGisIp nPort sData sEnd")
tuple_to_send = MyStruct(sMark="\r\n{}".format("*KW").encode("ascii"), 
                     nPackLen=struct.calcsize(format_),
                     nFlag=0x0002,
                     nGisIp=0,
                     nPort=0,
                     sData= "*KW,NR09G05133,015,080756,#".encode("ascii"),
                     sEnd=b"\r\n")


string_to_send = struct.pack(format_, *tuple_to_send._asdict().values())
</snippet></ROW><ROW><id>14620978</id><snippet>Rect</snippet></ROW><ROW><id>14620978</id><snippet>Entity</snippet></ROW><ROW><id>14620978</id><snippet>bottomright</snippet></ROW><ROW><id>14620978</id><snippet>Rect</snippet></ROW><ROW><id>14620978</id><snippet>Platform</snippet></ROW><ROW><id>14620978</id><snippet>bottomleft</snippet></ROW><ROW><id>14620978</id><snippet>Tuple</snippet></ROW><ROW><id>14620978</id><snippet>List</snippet></ROW><ROW><id>14620978</id><snippet>&gt;&gt;&gt; point = (8,10)
&gt;&gt;&gt; to_move = (1,1)
&gt;&gt;&gt; map(sum, zip(point, to_move))
[9, 11]
&gt;&gt;&gt; to_move = (-1,1)
&gt;&gt;&gt; map(sum, zip(point, to_move))
[7, 11]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14620978</id><snippet>class Enemy(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.yVel = 0
        self.xVel = 2 # start moving immediately
        self.image = Surface((32,32))
        self.image.fill(Color("#00FF00"))
        self.image.convert()
        self.rect = Rect(300, 1200, 32, 32)
        self.onGround = False

    def update(self, platforms):
        if not self.onGround:
            self.yVel += 0.3

        # no need for right_dis to be a member of the class,
        # since we know we are moving right if self.xVel &gt; 0
        right_dis = self.xVel &gt; 0

        # create a point at our left (or right) feet 
        # to check if we reached the end of the platform
        m = (1, 1) if right_dis else (-1, 1)
        p = self.rect.bottomright if right_dis else self.rect.bottomleft
        fp = map(sum, zip(m, p))

        # if there's no platform in front of us, change the direction
        collide = any(p for p in platforms if p.rect.collidepoint(fp))
        if not collide:
            self.xVel *= -1

        self.rect.left += self.xVel # increment in x direction
        self.collide(self.xVel, 0, platforms) # do x-axis collisions
        self.rect.top += self.yVel # increment in y direction
        self.onGround = False; # assuming we're in the air
        self.collide(0, self.yVel, platforms) # do y-axis collisions

    def collide(self, xVel, yVel, platforms):
        for p in platforms:
            if pygame.sprite.collide_rect(self, p):
                if xVel &gt; 0: 
                    self.rect.right = p.rect.left
                    self.xVel *= -1 # hit wall, so change direction
                if xVel &lt; 0: 
                    self.rect.left = p.rect.right
                    self.xVel *= -1 # hit wall, so change direction
                if yVel &gt; 0:
                    self.rect.bottom = p.rect.top
                    self.onGround = True
                if yVel &lt; 0:
                    self.rect.top = p.rect.bottom
</snippet></ROW><ROW><id>14621154</id><snippet>lambda</snippet></ROW><ROW><id>14621154</id><snippet>stdev</snippet></ROW><ROW><id>14621154</id><snippet>sqrt(lambda)</snippet></ROW><ROW><id>14621154</id><snippet>1/lambda</snippet></ROW><ROW><id>14621154</id><snippet>1/lambda^2</snippet></ROW><ROW><id>14621154</id><snippet>std = sqrt(1/(1/rate)^2) = sqrt(rate^2) = rate</snippet></ROW><ROW><id>14621453</id><snippet>setattr</snippet></ROW><ROW><id>14621453</id><snippet>reader = csv.reader(open(file_path, 'rb').read().splitlines(), delimiter=";")
p = Product()

for key, row in enumerate(reader):
    f = request.POST.get('select_%s' % key) // ex. productname
    // p.f should be "productname" from the variable
    setattr(p, f, row[key]) 
</snippet></ROW><ROW><id>14621761</id><snippet>rm -fr /usr/local/lib/python2.7/dist-packages/sqlalchemy</snippet></ROW><ROW><id>14621997</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>14621997</id><snippet>cleaned_data</snippet></ROW><ROW><id>14621997</id><snippet>if form.is_valid():
   if form.cleaned_data['time']==datetime.datetime.min:
   ....
</snippet></ROW><ROW><id>14622351</id><snippet>% name</snippet></ROW><ROW><id>14622351</id><snippet>f = open('%s.csv' % name, 'wb')
</snippet></ROW><ROW><id>14622351</id><snippet>%</snippet></ROW><ROW><id>14622761</id><snippet>errors</snippet></ROW><ROW><id>14622761</id><snippet>&gt;&gt;&gt; b'\x09'.decode('utf-8', errors='abc')
u'\t'
</snippet></ROW><ROW><id>14622761</id><snippet>&gt;&gt;&gt; b'\xff'.decode('utf-8', errors='abc')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "../lib/python2.7/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
LookupError: unknown error handler name 'abc'
</snippet></ROW><ROW><id>14622945</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = " T?e  qu!ck ' brown 1 fox! jumps-.ver. the 'lazy' doG?  !"
&gt;&gt;&gt; re.split('(?&lt;=[.!?]) +',text)
[" T?e  qu!ck ' brown 1 fox!", 'jumps-.ver.', "the 'lazy' doG?", '!']
</snippet></ROW><ROW><id>14622945</id><snippet>'(?&lt;=[.!?]) +'</snippet></ROW><ROW><id>14622945</id><snippet>' +'</snippet></ROW><ROW><id>14622945</id><snippet>'(?&lt;=[.!?])'</snippet></ROW><ROW><id>14623764</id><snippet>split</snippet></ROW><ROW><id>14623764</id><snippet>&gt;&gt;&gt; a = ['1 MB', '2 MB']
&gt;&gt;&gt; sum([int(s.split(' ')[0]) for s in a])
3
</snippet></ROW><ROW><id>14623764</id><snippet>s.split(' ')</snippet></ROW><ROW><id>14623764</id><snippet>['1', 'MB']</snippet></ROW><ROW><id>14623764</id><snippet>&gt;&gt;&gt; a = ['1 MB', '2 MB']
&gt;&gt;&gt; sum(int(s.split(' ')[0]) for s in a)
3
</snippet></ROW><ROW><id>14623777</id><snippet> ImagesUrl.objects(src=self.src).update_one(
                                  upsert=True, 
                                  inc__counter=1, 
                                  set__src=self.src)
</snippet></ROW><ROW><id>14624034</id><snippet>import inspect


def make_key_maker(func):
    args_spec = inspect.getargspec(func)

    def key_maker(*args, **kwargs):
        left_args = args_spec.args[len(args):]
        num_defaults = len(args_spec.defaults or ())
        defaults_names = args_spec.args[-num_defaults:]

        if not set(left_args).symmetric_difference(kwargs).issubset(defaults_names):
            # We got an error in the function call. Let's simply trigger it
            func(*args, **kwargs)

        start = 0
        key = []
        for arg, arg_name in zip(args, args_spec.args):
            key.append(arg)
            if arg_name in defaults_names:
                start += 1

        for left_arg in left_args:
            try:
                key.append(kwargs[left_arg])
            except KeyError:
                key.append(args_spec.defaults[start])

            # Increase index if we used a default, or if the argument was provided
            if left_arg in defaults_names:
                start += 1
        return tuple(key)

    return key_maker
</snippet></ROW><ROW><id>14624034</id><snippet>**kwargs</snippet></ROW><ROW><id>14624034</id><snippet>&gt;&gt;&gt; def my_function(a,b,c,d,e=True,f="something"): pass
... 
&gt;&gt;&gt; key_maker = make_key_maker(my_function)
&gt;&gt;&gt; 
&gt;&gt;&gt; key_maker(1,2,3,4)
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,4, e=True)               # same as before
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,4, True)                 # same as before
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,4, True, f="something")  # same as before
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,4, True, "something")    # same as before
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,d=4)                     # same as before
(1, 2, 3, 4, True, 'something')
&gt;&gt;&gt; key_maker(1,2,3,d=4, f="something")      # same as before
(1, 2, 3, 4, True, 'something')
</snippet></ROW><ROW><id>14624035</id><snippet>ip='180.211.134.66'
port='123'

print '({"http":"http://' + ip + ':' + port + '"})'
</snippet></ROW><ROW><id>14624035</id><snippet>print "({\"http\":\"http://" + ip + ":" + port + "\"})"
</snippet></ROW><ROW><id>14624035</id><snippet>({"http":"http://180.211.134.66:123"})
</snippet></ROW><ROW><id>14624348</id><snippet>sum</snippet></ROW><ROW><id>14624348</id><snippet>sizes = []
for i in a:
        dest = '/home/zurelsoft/my_files'
        fullname = os.path.join(dest, i) #Get the file_full_size to calculate size
        st = int(os.path.getsize(fullname))
        f_size = size(st)
        sizes.append(f_size)
print sum(sizes)
</snippet></ROW><ROW><id>14624348</id><snippet>sum_size = 0
for i in a:
        dest = '/home/zurelsoft/my_files'
        fullname = os.path.join(dest, i) #Get the file_full_size to calculate size
        st = int(os.path.getsize(fullname))
        sum_size += size(st)
print sum_size
</snippet></ROW><ROW><id>14624348</id><snippet>d = {}
for i in a:
        dest = '/home/zurelsoft/my_files'
        fullname = os.path.join(dest, i) #Get the file_full_size to calculate size
        st = int(os.path.getsize(fullname))
        d[i] = size(st)
</snippet></ROW><ROW><id>14624348</id><snippet>print '\n'.join(['%s: %d' % (k, v) for k, v in d.items()])
</snippet></ROW><ROW><id>14624348</id><snippet>print sum(d.values())
</snippet></ROW><ROW><id>14624348</id><snippet>def get_file_sizes(parent_dir, files):
    import os
    return sum([os.path.getsize(os.path.join(parent_dir, f)) for f in files])
</snippet></ROW><ROW><id>14624348</id><snippet>a = ['ok.py', 'hello.py']
all_sizes = get_file_sizes('/home/zurelsoft/my_files', a)
</snippet></ROW><ROW><id>14624513</id><snippet>/usr/bin/python3</snippet></ROW><ROW><id>14624513</id><snippet>/usr/lib/python3</snippet></ROW><ROW><id>14624612</id><snippet># -*- coding: utf-8 -*- 
print(repr(u"서울특별시"))
print(repr(u"서울특별시"[0]))
</snippet></ROW><ROW><id>14624612</id><snippet>u'\uc11c\uc6b8\ud2b9\ubcc4\uc2dc'
u'\uc11c'
</snippet></ROW><ROW><id>14624612</id><snippet>u</snippet></ROW><ROW><id>14624612</id><snippet>repr</snippet></ROW><ROW><id>14624612</id><snippet>repr</snippet></ROW><ROW><id>14624612</id><snippet>repr</snippet></ROW><ROW><id>14624612</id><snippet>repr</snippet></ROW><ROW><id>14624612</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>14624633</id><snippet>setup()</snippet></ROW><ROW><id>14624633</id><snippet>from distutils.core import setup

setup(
    name='somemodule',
    scripts=['mymodule']
)
</snippet></ROW><ROW><id>14624633</id><snippet>mymodule</snippet></ROW><ROW><id>14624717</id><snippet>/content/dam/vzw/lobs/consumer/shop/share-everything/data-sprite.png</snippet></ROW><ROW><id>14624717</id><snippet>.ptData{min-width:74px;background:transparent url(/content/dam/vzw/lobs/consumer/shop/share-everything/data-sprite.png) no-repeat;padding-top:52px;display:block;}
.data300mb .ptData{background-position:center top;}
.data1 .ptData{background-position:center -72px;}
.data2 .ptData{background-position:center -144px;}
.data4 .ptData{background-position:center -216px;}
.data6 .ptData{background-position:center -288px;}
.data8 .ptData{background-position:center -360px;}
.data10 .ptData{background-position:center -432px;}
.data12 .ptData{background-position:center -504px;}
.data14 .ptData{background-position:center -576px;}
.data16 .ptData{background-position:center -648px;}
.data18 .ptData{background-position:center -720px;}
.data20 .ptData{background-position:center -792px;}
.data30 .ptData{background-position:center -864px;}
.data40 .ptData{background-position:center -936px;}
.data50 .ptData{background-position:center -1008px;}
</snippet></ROW><ROW><id>14624717</id><snippet>&lt;td class="data2"&gt;
    &lt;p&gt;Unlimited Talk &amp; Text with&lt;/p&gt;
    &lt;p class="ptData"&gt;Shareable Data&lt;/p&gt;
&lt;/td&gt;
</snippet></ROW><ROW><id>14624717</id><snippet>class</snippet></ROW><ROW><id>14624717</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>14624717</id><snippet>class</snippet></ROW><ROW><id>14624717</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>14624717</id><snippet>class</snippet></ROW><ROW><id>14624717</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>14625089</id><snippet>\uabcd</snippet></ROW><ROW><id>14625089</id><snippet>\Uabcdabcd</snippet></ROW><ROW><id>14625089</id><snippet>&gt;&gt;&gt; '\U0001D15D'
''
&gt;&gt;&gt; '\U0001D15D'.encode('unicode_escape')
b'\\U0001d15d'
</snippet></ROW><ROW><id>14625089</id><snippet>\uabcd</snippet></ROW><ROW><id>14625089</id><snippet>a</snippet></ROW><ROW><id>14625089</id><snippet>abc</snippet></ROW><ROW><id>14625089</id><snippet>ᴕ</snippet></ROW><ROW><id>14625089</id><snippet>D</snippet></ROW><ROW><id>14625089</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; print(re.sub('a', '\U0001D15D', 'abc' ))
bc
&gt;&gt;&gt; print(re.sub('a', u'\U0001D15D', 'abc' ).encode('unicode_escape'))
b'\\U0001d15dbc'
</snippet></ROW><ROW><id>14625379</id><snippet>class SomeClass:
    def __init__(self,value):
        self.some_variable = value

    def setVariable(self,value):
        self.some_variable = value

    def getVariable(self):
        return self.some_variable
</snippet></ROW><ROW><id>14625379</id><snippet>instance</snippet></ROW><ROW><id>14625379</id><snippet>class</snippet></ROW><ROW><id>14625379</id><snippet>&gt;&gt;&gt; a = SomeClass(5)
&gt;&gt;&gt; a.some_variable # Just as expected
5
&gt;&gt;&gt; b = SomeClass(10)
&gt;&gt;&gt; b.some_variable # This is its own variable
10
&gt;&gt;&gt; b.some_variable = 20 # This won't change 'a'
&gt;&gt;&gt; a.some_variable # Hasn't changed
5
</snippet></ROW><ROW><id>14625379</id><snippet>getters</snippet></ROW><ROW><id>14625379</id><snippet>setters</snippet></ROW><ROW><id>14625379</id><snippet>instance.some_variable = 5</snippet></ROW><ROW><id>14625448</id><snippet>try</snippet></ROW><ROW><id>14625448</id><snippet>except</snippet></ROW><ROW><id>14625448</id><snippet>try:
    a=sri
    print a
except Exception:
    print 'you have not put quotes for string'
</snippet></ROW><ROW><id>14625448</id><snippet>try</snippet></ROW><ROW><id>14625628</id><snippet>&gt;&gt;&gt; re.sub('&lt;(.+)&gt;', '[\\1]', '&lt;age&gt;')
'[age]'
</snippet></ROW><ROW><id>14625628</id><snippet>\\</snippet></ROW><ROW><id>14625628</id><snippet>\</snippet></ROW><ROW><id>14625628</id><snippet>\1</snippet></ROW><ROW><id>14625628</id><snippet>\x01</snippet></ROW><ROW><id>14625628</id><snippet>()</snippet></ROW><ROW><id>14625628</id><snippet>&gt;&gt;&gt; re.sub('&lt;(.+)=+(.*)&gt;', '[\\1: \\2]', '&lt;age=5&gt;')
'[age: 5]'
</snippet></ROW><ROW><id>14625742</id><snippet>with open("file_path","r") as f:
    lines = f.read()
    lines = lines.replace("http://","")
    lines = lines.replace("www.", "") # May replace some false positives ('www.com')
    urls = [url.split('/')[0] for url in lines.split()]
    print '\n'.join(urls)
</snippet></ROW><ROW><id>14625742</id><snippet>http://foo.com/index.html
http://www.foobar.com
www.bar.com/?q=res
www.foobar.com
</snippet></ROW><ROW><id>14625742</id><snippet>foo.com
foobar.com
bar.com
foobar.com
</snippet></ROW><ROW><id>14625742</id><snippet>lines = lines.replace("www.", "")</snippet></ROW><ROW><id>14625742</id><snippet>lines = re.sub(r'(www.)(?!com)',r'',lines)</snippet></ROW><ROW><id>14625786</id><snippet>models.py</snippet></ROW><ROW><id>14625786</id><snippet>./manage.py shell
</snippet></ROW><ROW><id>14625786</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>14625786</id><snippet>import os

if 'DJANGO_SETTINGS_MODULE' not in os.environ:
    os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
</snippet></ROW><ROW><id>14625786</id><snippet>myproject</snippet></ROW><ROW><id>14626076</id><snippet>print('waiting Reply Bytes String from client..') //how to get the reply bytes  string from Client side?
bytes = socket.recvfrom(1024);
</snippet></ROW><ROW><id>14626153</id><snippet>import lxml.etree as ET

fin = '''\
&lt;root&gt;
  &lt;e&gt;
    &lt;head&gt;
       &lt;id&gt;3&lt;/id&gt;
       &lt;word&gt;abandon&lt;/word&gt;
    &lt;/head&gt;
    &lt;body&gt;
       &lt;head&gt;
          &lt;word&gt;accept&lt;/word&gt;
       &lt;/head&gt;
    &lt;/body&gt;
  &lt;/e&gt;
&lt;/root&gt;'''


root = ET.fromstring(fin)
word = root.xpath('.//word[not(ancestor::body)]')
print(ET.tostring(word[0]))
# &lt;word&gt;abandon&lt;/word&gt;
</snippet></ROW><ROW><id>14626170</id><snippet>import requests
r = requests.get('https://graph.facebook.com/oauth/access_token?grant_type=client_credentials&amp;client_id=123&amp;client_secret=XXX')
access_token = r.text.split('=')[1]
print access_token
</snippet></ROW><ROW><id>14626170</id><snippet>client_id</snippet></ROW><ROW><id>14626170</id><snippet>client_secret</snippet></ROW><ROW><id>14626175</id><snippet>eval</snippet></ROW><ROW><id>14626175</id><snippet>GrabVersion.py</snippet></ROW><ROW><id>14626175</id><snippet>__repr__</snippet></ROW><ROW><id>14626175</id><snippet>FixedFileInfo</snippet></ROW><ROW><id>14626175</id><snippet>cmd.exe</snippet></ROW><ROW><id>14626175</id><snippet>GrabVersion.py</snippet></ROW><ROW><id>14626175</id><snippet>VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(6, 1, 7601, 17514),
    prodvers=(6, 1, 7601, 17514),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
    ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'Microsoft Corporation'),
        StringStruct(u'FileDescription', u'Windows Command Processor'),
        StringStruct(u'FileVersion', u'6.1.7601.17514 (win7sp1_rtm.101119-1850)'),
        StringStruct(u'InternalName', u'cmd'),
        StringStruct(u'LegalCopyright', u'\xa9 Microsoft Corporation. All rights reserved.'),
        StringStruct(u'OriginalFilename', u'Cmd.Exe'),
        StringStruct(u'ProductName', u'Microsoft\xae Windows\xae Operating System'),
        StringStruct(u'ProductVersion', u'6.1.7601.17514')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
</snippet></ROW><ROW><id>14626223</id><snippet>django-admin.py startproject [projectname]</snippet></ROW><ROW><id>14626269</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14626269</id><snippet>collections.OrderedDict([('x', 9), ('y', 10), ('z', 20)])
Out[175]: OrderedDict([('x', 9), ('y', 10), ('z', 20)])

for key in Out[175]:
    print Out[175][key]
</snippet></ROW><ROW><id>14626474</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14626474</id><snippet>if __name__ == '__main__':
    print mp_factorizer(list, 2, someobject)
</snippet></ROW><ROW><id>14626474</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14626474</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14626474</id><snippet># Import stuff
if __name__ == '__main__':
    #execute whatever you want, it will only be executed 
    #as often as you intend it to
    #execute the function that starts multiprocessing, 
    #in this case mp_factorizer()
    #there is no worker function code here, it's in another file.
</snippet></ROW><ROW><id>14626474</id><snippet># Import stuff
#If the worker code is in the main thread, exclude it from the if statement:
def worker():
    #worker code
if __name__ == '__main__':
    #execute whatever you want, it will only be executed 
    #as often as you intend it to
    #execute the function that starts multiprocessing, 
    #in this case mp_factorizer()
#All code outside of the if statement will be executed multiple times
#depending on the # of assigned worker threads.
</snippet></ROW><ROW><id>14626716</id><snippet>import lxml.etree as ET

xml = '''\
&lt;root&gt;
    &lt;keyword_group&gt;
        &lt;headword&gt;sell/buy&lt;/headword&gt;
    &lt;/keyword_group&gt;
&lt;/root&gt;
'''

root = ET.fromstring(xml)
headword = root.find('.//headword')
if headword is not None:
    words = headword.text.split('/')
    parent = headword.getparent()
    parent.remove(headword)
    for word in words:
        ET.SubElement(parent, 'word').text = word

print(ET.tostring(root, encoding='unicode'))
</snippet></ROW><ROW><id>14626716</id><snippet>&lt;root&gt;
    &lt;keyword_group&gt;
        &lt;word&gt;sell&lt;/word&gt;&lt;word&gt;buy&lt;/word&gt;&lt;/keyword_group&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>14626751</id><snippet>from module import *</snippet></ROW><ROW><id>14626751</id><snippet>from foo import bar
from spam import *
</snippet></ROW><ROW><id>14626751</id><snippet>spam</snippet></ROW><ROW><id>14626751</id><snippet>spam.bar</snippet></ROW><ROW><id>14626751</id><snippet>foo.bar</snippet></ROW><ROW><id>14627050</id><snippet>--data</snippet></ROW><ROW><id>14627050</id><snippet>request.post(..., data=...)</snippet></ROW><ROW><id>14627060</id><snippet>&gt;&gt;&gt; data['query']['pages'].keys()
[u'68301']
</snippet></ROW><ROW><id>14627060</id><snippet>.keys()</snippet></ROW><ROW><id>14627060</id><snippet>dict</snippet></ROW><ROW><id>14627291</id><snippet>LoopingCall</snippet></ROW><ROW><id>14627291</id><snippet>clock</snippet></ROW><ROW><id>14627291</id><snippet>self.clock.advance(x)</snippet></ROW><ROW><id>14627291</id><snippet>x</snippet></ROW><ROW><id>14627291</id><snippet>(x-1, x-2, ..., now)</snippet></ROW><ROW><id>14627291</id><snippet>self.clock.advance(1)</snippet></ROW><ROW><id>14627291</id><snippet>seconds_elapsed</snippet></ROW><ROW><id>14627457</id><snippet>wtf</snippet></ROW><ROW><id>14627457</id><snippet>nowplaying</snippet></ROW><ROW><id>14627457</id><snippet>(SELECT * FROM member WHERE topic = 'wtf' ORDER BY count DESC LIMIT 3) UNION (SELECT * FROM member WHERE topic = 'nowplaying' ORDER BY count DESC LIMIT 3)
</snippet></ROW><ROW><id>14627776</id><snippet>OrderedDict</snippet></ROW><ROW><id>14627776</id><snippet>In [7]: from collections import OrderedDict as od

In [8]: a = ["dorian", "strawberry", "apple"]

In [9]: b = ["sweet", "delicious", "tasty"]

In [10]: dic=od(zip(a,b))

In [11]: dic
Out[11]: OrderedDict([('dorian', 'sweet'), ('strawberry', 'delicious'), ('apple', 'tasty')])
</snippet></ROW><ROW><id>14627931</id><snippet>In [74]: import re

In [75]: re.findall('\d+',"any string coming from db[090876]")
Out[75]: ['090876']
</snippet></ROW><ROW><id>14627931</id><snippet>db</snippet></ROW><ROW><id>14627931</id><snippet>In [76]: re.findall('db\[(\d+)\]',"any string coming from db[090876]")
Out[76]: ['090876']
</snippet></ROW><ROW><id>14627952</id><snippet>result = a if a &gt; b else b</snippet></ROW><ROW><id>14627952</id><snippet>a</snippet></ROW><ROW><id>14627952</id><snippet>b</snippet></ROW><ROW><id>14627952</id><snippet>result =  a &gt; b and a or b</snippet></ROW><ROW><id>14627952</id><snippet>b</snippet></ROW><ROW><id>14627952</id><snippet>a</snippet></ROW><ROW><id>14627952</id><snippet>0</snippet></ROW><ROW><id>14627952</id><snippet>None</snippet></ROW><ROW><id>14627952</id><snippet>a if x else b</snippet></ROW><ROW><id>14628212</id><snippet>class Foo(object):
    def __del__(self):
        print "Foo died"

class Bar(object):
    def __init__(self):
        self.foo = Foo()
        self.baz = Baz(self)

class Baz(object):
    def __init__(self, bar):
        self.bar = bar

b = Bar()

del b
</snippet></ROW><ROW><id>14628415</id><snippet>&gt;&gt;&gt; lst = ['url1', 'value1', 'url2', 'value2']
&gt;&gt;&gt; i = iter(lst)
&gt;&gt;&gt; zip(i,i)
[('url1', 'value1'), ('url2', 'value2')]
</snippet></ROW><ROW><id>14628415</id><snippet>&gt;&gt;&gt; i = iter(lst)
&gt;&gt;&gt; dict(zip(i,i))
{'url1': 'value1', 'url2': 'value2'}
</snippet></ROW><ROW><id>14628434</id><snippet>ioctl</snippet></ROW><ROW><id>14628434</id><snippet>op</snippet></ROW><ROW><id>14628434</id><snippet>ioctl</snippet></ROW><ROW><id>14628434</id><snippet>ioctl</snippet></ROW><ROW><id>14628434</id><snippet>op</snippet></ROW><ROW><id>14628600</id><snippet>class Phoenix(object):
    def __del__(self):
        print "Deleting an Oops"
        global a
        a = self

a = Phoenix()
</snippet></ROW><ROW><id>14628600</id><snippet>__del__</snippet></ROW><ROW><id>14628632</id><snippet>def clean_node(node):
    return {
        'Name': node['Name'],
        'Id': node['Id'],
        'Children': map(clean_node, node['Children']),
    }

&gt;&gt;&gt; print map(clean_node, data)
[{'Name': 'x', 'Children': [], 'Id': 'y'}, {'Name': 'xx', 'Children': [{'Name': 'xyx', 'Children': [], 'Id': 'yxy'}], 'Id': 'yy'}]
</snippet></ROW><ROW><id>14629011</id><snippet>a[:-1]</snippet></ROW><ROW><id>14629011</id><snippet>a</snippet></ROW><ROW><id>14629076</id><snippet>opt=(-c start.txt)
opt+=(--self 'name Na')

python test_args.py "${opt[@]}"
</snippet></ROW><ROW><id>14629078</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        # custom stuff here
        obj.save()
</snippet></ROW><ROW><id>14629432</id><snippet>os.listdir</snippet></ROW><ROW><id>14629432</id><snippet>import email

infolder = "C:\\emlfiles\\"
for infile in os.listdir(infolder):
    fp = open(os.path.join(infolder, infile))
    msg = email.message_from_file(fp)
    # etc
</snippet></ROW><ROW><id>14629432</id><snippet>def process_email(infile):
    fp = open(infile)
    msg = email.message_from_file(fp)
    subject = msg.get('subject')

infolder = "C:\\emlfiles\\"
for infile in os.listdir(infolder):
    process_email(os.path.join(infolder, infile))
</snippet></ROW><ROW><id>14629488</id><snippet>spawn</snippet></ROW><ROW><id>14629488</id><snippet>:close_others =&gt; false</snippet></ROW><ROW><id>14629488</id><snippet>require 'socket'

r_socket, p_socket = Socket.pair(:UNIX, :DGRAM, 0)

pid = Process.spawn('python', 'p.py', p_socket.fileno.to_s,
                    { :close_others =&gt; false })

# Close the python end (we're not using it on the Ruby side)
p_socket.close

# Wait for some data
puts r_socket.gets

# Wait for finish
Process.waitpid(pid)
</snippet></ROW><ROW><id>14629488</id><snippet>import sys
import socket

p_fd     = int(sys.argv[1])
p_socket = socket.fromfd(p_fd, socket.AF_UNIX, socket.SOCK_DGRAM)

p_socket.send("Hello world\n")
</snippet></ROW><ROW><id>14629488</id><snippet>&gt; ruby p.rb
Hello world
</snippet></ROW><ROW><id>14629503</id><snippet>/usr/bin/nm libtest.so.1.0
</snippet></ROW><ROW><id>14629503</id><snippet>work()</snippet></ROW><ROW><id>14629503</id><snippet>_Z4workv()</snippet></ROW><ROW><id>14629728</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>14629728</id><snippet>getter = itemgetter(1,3,4)
desired = getter(items)
</snippet></ROW><ROW><id>14629728</id><snippet>itemgetter</snippet></ROW><ROW><id>14629728</id><snippet>getter</snippet></ROW><ROW><id>14629728</id><snippet>&gt;&gt;&gt; items = ['aaa','sss','ddd','fff','gggg','hhhh']
&gt;&gt;&gt; indices = [1,3,4]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; getter = itemgetter(*indices)
&gt;&gt;&gt; def list_comp(items=items,indices=indices):
...     return [items[i] for i in indices]
... 
&gt;&gt;&gt; timeit.timeit('getter(items)','from __main__ import getter,items')
0.2926821708679199
&gt;&gt;&gt; timeit.timeit('list_comp()','from __main__ import list_comp')
0.7736802101135254
&gt;&gt;&gt; getter(items)
('sss', 'fff', 'gggg')
&gt;&gt;&gt; list_comp()
['sss', 'fff', 'gggg']
</snippet></ROW><ROW><id>14629813</id><snippet>TIOStreamTransport</snippet></ROW><ROW><id>14629813</id><snippet>InputStream</snippet></ROW><ROW><id>14629813</id><snippet>TMemoryInputTransport</snippet></ROW><ROW><id>14629813</id><snippet>TFileTransport</snippet></ROW><ROW><id>14629838</id><snippet>Player</snippet></ROW><ROW><id>14629838</id><snippet>enter</snippet></ROW><ROW><id>14629838</id><snippet>PlayerPool</snippet></ROW><ROW><id>14629838</id><snippet>#!/usr/bin/env python
#http://stackoverflow.com/questions/14629710/python-setting-attributes-from-module-to-module/14629838#14629838

class Player(object):
    def __init__(self):
        self.name = ' '
        self.hp = 0
        self.current_hp = 0
        self.strength = 0
        self.dexterity = 0
        self.constitution = 0

class PlayerPool(object):
    _players = dict()

    @classmethod
    def getPlayerByName(cls, name):
        if not name in cls._players:
            newPlayer = Player()
            newPlayer.name = name
            cls._players[newPlayer.name] = newPlayer
        return cls._players[name]


class Scene(object):
    pass

class CharacterCreation(Scene):
    def enter(self):
        character = PlayerPool.getPlayerByName("foobar-hero")
        character.hp = 10
        print "%s has %s points of hp" % (character.name, character.hp)
        return 'barracks'

class Barracks(Scene):
    def enter(self):
        character = PlayerPool.getPlayerByName("foobar-hero")
        print "%s has %s points of hp" % (character.name, character.hp)
        return 'shop'

if __name__ == "__main__":
    step1 = CharacterCreation()
    if step1.enter() == "barracks":
        step2 = Barracks()
        step2.enter()
</snippet></ROW><ROW><id>14629838</id><snippet>borrajax@borrajax-comp:~/Tests/Python/Stack Overflow$ python ./players.py 
foobar-hero has 10 points of hp
foobar-hero has 10 points of hp
</snippet></ROW><ROW><id>14630063</id><snippet>def get_timezones_with_gmt_diff(timezone_string_list = None):
    """
    Converts a datetime object into string.
    """
    if timezone_string_list:
        timezone_list = timezone_string_list
    else:
        timezone_list = pytz.common_timezones

    datetime1 = datetime.strptime("10-07-%s 00:00:00" % datetime.utcnow().year, "%d-%m-%Y %H:%M:%S")
    datetime2 = datetime.strptime("10-12-%s 00:00:00" % datetime.utcnow().year, "%d-%m-%Y %H:%M:%S")

    result_dict = {}
    for time_zone in timezone_list:
        result_dict[time_zone] = [Date.timedelta_in_seconds(pytz.timezone(time_zone).localize(datetime1).tzinfo._utcoffset)/3600,
                                  Date.timedelta_in_seconds(pytz.timezone(time_zone).localize(datetime2).tzinfo._utcoffset)/3600,
                                  time_zone.replace("/", " - ").replace("_", " "),
                                  Date.timedelta_in_seconds(pytz.timezone(time_zone).localize(datetime1).tzinfo._utcoffset)/3600 !=
                                  Date.timedelta_in_seconds(pytz.timezone(time_zone).localize(datetime2).tzinfo._utcoffset)/3600]

    sorted_result_dict = OrderedDict(sorted(result_dict.items(), key=lambda t: t[1][2]))
    return sorted_result_dict

def get_timezones_for_listbox(time_zones_dict):
    list = []
    for time_zone_tuple in time_zones_dict:
        # Has different DST/Summer times:
        if time_zones_dict[time_zone_tuple][3]:
            new_item = "%s      UCT %s/%s" % (str(time_zones_dict[time_zone_tuple][2]), str(time_zones_dict[time_zone_tuple][0]), str(time_zones_dict[time_zone_tuple][1]))
        # Does not change datetime:
        else:
            new_item = "%s      UCT %s" % (str(time_zones_dict[time_zone_tuple][2]), str(time_zones_dict[time_zone_tuple][0]))
        list.append(new_item)
    return list

def timedelta_in_seconds(duration):
    days, seconds = duration.days, duration.seconds
    return days * 24 * 60 * 60 + seconds
</snippet></ROW><ROW><id>14630181</id><snippet>for searchterm in searchterms:   
    counter = 0
    try:
        while counter &lt;10:

        #do some other stuff here with searchterm

        counter=counter+10

    except IOError:
        print "No result found!"+""
</snippet></ROW><ROW><id>14630250</id><snippet>to_html</snippet></ROW><ROW><id>14630250</id><snippet>formatters</snippet></ROW><ROW><id>14630250</id><snippet>&lt;span class="significant"&gt;</snippet></ROW><ROW><id>14630250</id><snippet>&lt;/span&gt;</snippet></ROW><ROW><id>14630250</id><snippet>*</snippet></ROW><ROW><id>14630250</id><snippet>&lt;</snippet></ROW><ROW><id>14630250</id><snippet>&lt;</snippet></ROW><ROW><id>14630250</id><snippet>escape=False</snippet></ROW><ROW><id>14630603</id><snippet>num = sum(2**i for i, bit in enumerate(my_str) if bit == '1')
</snippet></ROW><ROW><id>14630603</id><snippet>indexes = [i for i, bit in enumerate(my_str) if bit == '1']
num = sum(2**i for i in indexes)
</snippet></ROW><ROW><id>14630889</id><snippet>wsgi.py</snippet></ROW><ROW><id>14630975</id><snippet>s = s[s.find('&lt;')+1:-1]
</snippet></ROW><ROW><id>14630975</id><snippet>s = s.split('&lt;')[1][:-1]
</snippet></ROW><ROW><id>14631012</id><snippet>code = compile("def foo(n):return n+10", "&lt;string&gt;", "exec").co_consts[0]
func = Function(code, globals())
</snippet></ROW><ROW><id>14631012</id><snippet>code = types.CodeType(1, 0, 1, 2, 67, b'|\x00\x00d\x01\x00\x17S', (None, 10), 
                      (), ('x',), '&lt;string&gt;', 'f', 1, b'\x00\x01')
func = Function(code, globals())
print(func(10))
</snippet></ROW><ROW><id>14631141</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os.path
&gt;&gt;&gt; sys.path[0]
'C:\\Python25\\Lib\\idlelib'
&gt;&gt;&gt; os.path.relpath(sys.path[0], "path_to_libs") # if you have python 2.6
&gt;&gt;&gt; os.path.join(sys.path[0], "path_to_libs")
'C:\\Python25\\Lib\\idlelib\\path_to_libs'
</snippet></ROW><ROW><id>14631141</id><snippet>from posixpath import curdir, sep, pardir, join

def relpath(path, start=curdir):
    """Return a relative version of a path"""
    if not path:
        raise ValueError("no path specified")
    start_list = posixpath.abspath(start).split(sep)
    path_list = posixpath.abspath(path).split(sep)
    # Work out how much of the filepath is shared by start and path.
    i = len(posixpath.commonprefix([start_list, path_list]))
    rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
    if not rel_list:
        return curdir
    return join(*rel_list)
</snippet></ROW><ROW><id>14631159</id><snippet>wait_window</snippet></ROW><ROW><id>14631159</id><snippet>import Tkinter

def test(event=None):
    tl = Tkinter.Toplevel()
    tl.wait_window(tl)

root = Tkinter.Tk()
btn = Tkinter.Button(text=u'hi')
btn.bind('&lt;Button-1&gt;', test)
btn.pack(padx=10, pady=10)
root.mainloop()
</snippet></ROW><ROW><id>14631159</id><snippet>wait_window</snippet></ROW><ROW><id>14631159</id><snippet>update</snippet></ROW><ROW><id>14631159</id><snippet>update</snippet></ROW><ROW><id>14631159</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>14631159</id><snippet>wait_window</snippet></ROW><ROW><id>14631159</id><snippet>&lt;ButtonRelease-1&gt;</snippet></ROW><ROW><id>14631159</id><snippet>command</snippet></ROW><ROW><id>14631159</id><snippet>for i in range(X):
    btn = Tkinter.Button(text=u'%d' % i)
    btn['command'] = lambda button=btn: some_callback(button)
</snippet></ROW><ROW><id>14631164</id><snippet>form = NewOtrosForm(obj=product)
</snippet></ROW><ROW><id>14631164</id><snippet>form = NewOtrosForm(request.form, obj=product)
</snippet></ROW><ROW><id>14631276</id><snippet>In [10]: re.findall(r'\w+=".*?"', comp)
Out[10]: ['NAME="Foo"', 'NAME2="FOO BAR"', 'NAME3="BAR BAR"']
</snippet></ROW><ROW><id>14631276</id><snippet>re.split()</snippet></ROW><ROW><id>14631433</id><snippet>dir()</snippet></ROW><ROW><id>14631433</id><snippet>__dict__</snippet></ROW><ROW><id>14631433</id><snippet>__slots__</snippet></ROW><ROW><id>14631433</id><snippet>__dict__</snippet></ROW><ROW><id>14631433</id><snippet>dir()</snippet></ROW><ROW><id>14631433</id><snippet>inspect</snippet></ROW><ROW><id>14631433</id><snippet>dir()</snippet></ROW><ROW><id>14631433</id><snippet>inspect.ismethod()</snippet></ROW><ROW><id>14631484</id><snippet>StringIO</snippet></ROW><ROW><id>14631484</id><snippet>stdout</snippet></ROW><ROW><id>14631484</id><snippet>from StringIO import StringIO
import sys

stringio = StringIO()
previous_stdout = sys.stdout
sys.stdout = stringio

# do stuff

sys.stdout = previous_stdout

myString = stringio.getvalue()
</snippet></ROW><ROW><id>14631484</id><snippet>stdout</snippet></ROW><ROW><id>14631484</id><snippet>class TeeOut(object):
    def __init__(self, *writers):
        self.writers = writers

    def write(self, s):
        for writer in self.writers:
            writer.write(s)
</snippet></ROW><ROW><id>14631484</id><snippet>from StringIO import StringIO
import sys

stringio = StringIO()
previous_stdout = sys.stdout
sys.stdout = TeeOut(stringio, previous_stdout)

# do stuff

sys.stdout = previous_stdout

myString = stringio.getvalue()
</snippet></ROW><ROW><id>14631670</id><snippet>&lt;MY-REGULAREXPRESSION-HERE&gt;</snippet></ROW><ROW><id>14631670</id><snippet>/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/</snippet></ROW><ROW><id>14631741</id><snippet>//div[a[contains(., "Add to cart")]]/p//text()
</snippet></ROW><ROW><id>14631741</id><snippet>p</snippet></ROW><ROW><id>14631741</id><snippet>text()</snippet></ROW><ROW><id>14631741</id><snippet>lxml</snippet></ROW><ROW><id>14631741</id><snippet>&gt;&gt;&gt; import lxml.etree as ET
&gt;&gt;&gt; tree = ET.fromstring('''&lt;div&gt;
... &lt;div&gt;
...     &lt;p&gt;
...     &lt;span class="abc"&gt;Monitor&lt;/span&gt; &lt;b&gt;$300&lt;/b&gt;
...     &lt;/p&gt;
...     &lt;a href="/add"&gt;Add to cart&lt;/a&gt;
... &lt;/div&gt;
... &lt;div&gt;
...     &lt;p&gt;
...     &lt;span class="abc"&gt;Keyboard&lt;/span&gt; $20 
...     &lt;/p&gt;
...     &lt;a href="/add"&gt;Add to cart&lt;/a&gt;
... &lt;/div&gt;
... &lt;/div&gt;''')
&gt;&gt;&gt; tree.xpath('//div[a[contains(., "Add to cart")]]/p//text()')
['\n    ', 'Monitor', ' ', '$300', '\n    ', '\n    ', 'Keyboard', ' $20 \n    ']
&gt;&gt;&gt; res = _
&gt;&gt;&gt; [txt.strip() for txt in res if txt.strip()]
['Monitor', '$300', 'Keyboard', '$20']
</snippet></ROW><ROW><id>14631835</id><snippet>PyObject *main = PyImport_AddModule("__main__"); // borrowed
if (main == NULL)
    error();
PyObject *globals = PyModule_GetDict(main); // borrowed
PyObject *value = PyInt_FromLong(x);
if (value == NULL)
   error();
if (PyDict_SetItemString(globals, "n", value) &lt; 0)
   error();
Py_DECREF(value);
</snippet></ROW><ROW><id>14631895</id><snippet>def method_decorator(operation):
    """
    On this case operation = view_method
    """
    def wrapper(*args, **kwargs):
        """
        Receives all arguments the requested operation would receive
        """
            request = args[0]
            param = args[1]
            more_param = args[2]

            return operation(request, param, more_param)
    return wrapper

@method_decorator
def view_method(request, param, more_param):
    #something
</snippet></ROW><ROW><id>14631895</id><snippet>def wrapper(*args, **kwargs):
        ...
        if some_condition:
            request.new_content = new_content
        return operation(request, param, more_param)
return wrapper
</snippet></ROW><ROW><id>14631895</id><snippet>@method_decorator
def view_method(request, param, more_param):
    new_content = request.new_content
</snippet></ROW><ROW><id>14632077</id><snippet>Book</snippet></ROW><ROW><id>14632077</id><snippet>class Book(ndb.Model):
  content = ndb.StringProperty()
</snippet></ROW><ROW><id>14632077</id><snippet>greeting = Greeting(parent=ndb.Key(Book, guestbook_name or "*notitle*"),
                    content = self.request.get('content'))
</snippet></ROW><ROW><id>14632127</id><snippet>&gt;&gt;&gt; type(d['one'])
&lt;class 'CustomDict'&gt;


def __getitem__(self, key):                                                 
    self._dict[key] = self._store[key]                                      
    return self._store[key]
</snippet></ROW><ROW><id>14632127</id><snippet>def __getitem__(self, key):                                                 
    if isinstance(self._store[key], self.__class__):                                           
        self._dict[key] = self._store[key].dict
    else:
        self._dict[key] = self._store[key]
    return self._store[key] 
</snippet></ROW><ROW><id>14632212</id><snippet>apt</snippet></ROW><ROW><id>14632212</id><snippet>matplotlib</snippet></ROW><ROW><id>14632212</id><snippet>.deb</snippet></ROW><ROW><id>14632212</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14632212</id><snippet>setupy.py install --prefix=/path/to/where/ever</snippet></ROW><ROW><id>14632212</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14632212</id><snippet>PYTHONPATH=/your/path:$PYTHONPATH ipython
</snippet></ROW><ROW><id>14632212</id><snippet>PYTHONPATH=/your/path:$PYTHONPATH
export PYTHONPATH
</snippet></ROW><ROW><id>14632212</id><snippet>.bashrc</snippet></ROW><ROW><id>14632212</id><snippet>.bash_profile</snippet></ROW><ROW><id>14632212</id><snippet>matplotlib</snippet></ROW><ROW><id>14632212</id><snippet>matplotlib</snippet></ROW><ROW><id>14632378</id><snippet>subprocess.call</snippet></ROW><ROW><id>14632378</id><snippet>shell=True</snippet></ROW><ROW><id>14632378</id><snippet>subprocess.call(['gvim.exe', "+map &lt;F5&gt; :echo 'Hello!'&lt;cr&gt;"])</snippet></ROW><ROW><id>14632400</id><snippet>tasks.py</snippet></ROW><ROW><id>14632400</id><snippet>from django.core import management

@task()
def my_task():
    management.call_command('my_task')
</snippet></ROW><ROW><id>14632438</id><snippet>x = "&lt;a href='http://www.bbcnews.com'&gt;foo&lt;/a&gt;"
link_exp.findall(x)
# ["'http://www.bbcnews.com"]
</snippet></ROW><ROW><id>14632470</id><snippet>from crontab import CronTab
monday_morning = CronTab("0 8 * * 1")

def do_something():
    reactor.callLater(monday_morning.next(), do_something)
    # do whatever you want!

reactor.callLater(monday_morning.next(), do_something)
reactor.run()
</snippet></ROW><ROW><id>14632933</id><snippet>\b</snippet></ROW><ROW><id>14632933</id><snippet>\b</snippet></ROW><ROW><id>14632933</id><snippet>file = open("thePassword.txt", "w")
file.write("password \b\b\b\b\b " + "\b\b\b " + "\b\r ")
file.close()
</snippet></ROW><ROW><id>14632933</id><snippet>&lt;</snippet></ROW><ROW><id>14632933</id><snippet>C:\Users\AwesomeDude&gt;myFriendsScript.py &lt; thePassword.txt
Password: Correct
</snippet></ROW><ROW><id>14632945</id><snippet>fig = plt.figure(figsize=(20, 2))
ax = fig.add_subplot(111)
ax.plot(x, y)
</snippet></ROW><ROW><id>14632945</id><snippet>figsize</snippet></ROW><ROW><id>14633322</id><snippet>from google.appengine.ext import testbed
from google.appengine.api.blobstore import file_blob_storage

testbed.Testbed()
testbed._blob_storage = file_blob_storage.FileBlobStorage('/tmp/', 'testing')
testbed.init_blobstore_stub()
testbed.init_files_stub()
</snippet></ROW><ROW><id>14633576</id><snippet>self.polyf.setTransformOriginPoint(self.polyf.mapFromScene(QtCore.QPointF(midpointx , midpointy)))
</snippet></ROW><ROW><id>14633754</id><snippet>for i, x in enumerate(a):
    try:
        a[i] = float(x)
    except ValueError:
        pass
</snippet></ROW><ROW><id>14633754</id><snippet>a</snippet></ROW><ROW><id>14633754</id><snippet>new_a = []
for x in a:
    try:
        new_a.append(float(x))
    except ValueError:
        new_a.append(x)
</snippet></ROW><ROW><id>14633882</id><snippet>"</snippet></ROW><ROW><id>14634183</id><snippet>queryset=</snippet></ROW><ROW><id>14634183</id><snippet>ImageInfoFormset = modelformset_factory(ImageItem, fields=('title', 'caption'), extra=0)
formset = ImageInfoFormset(queryset=ImageItem.objects.filter(pk__in=image_pks))
</snippet></ROW><ROW><id>14634324</id><snippet>count[j].append(re.findall(regex[j], data))
</snippet></ROW><ROW><id>14634324</id><snippet>count[j]</snippet></ROW><ROW><id>14634324</id><snippet>count</snippet></ROW><ROW><id>14634324</id><snippet>sum(count[k])</snippet></ROW><ROW><id>14634324</id><snippet>count[k]</snippet></ROW><ROW><id>14634324</id><snippet>count[j].append(len(re.findall(regex[j], data)))
</snippet></ROW><ROW><id>14634697</id><snippet>"configuration": {
  "query": {
    "query": "select count(*) from foo.bar",
    "destinationTable": {
      "projectId": "my_project",
      "datasetId": "my_dataset",
      "tableId": "my_table"
    },
    "createDisposition": "CREATE_IF_NEEDED",
    "writeDisposition": "WRITE_APPEND",
  }
}
</snippet></ROW><ROW><id>14634766</id><snippet>ATOM
1
C1
POS
X
1
16.774
117.860
10.374
1.00
0.00
</snippet></ROW><ROW><id>14634766</id><snippet>ATOM
2
C2
POS
X
2
18.774
17.860
30.374
2.00
0.00
</snippet></ROW><ROW><id>14634766</id><snippet>import numpy

zeros = numpy.zeros(shape=(1,11)) #making 2D array with zeros

var = None

for i in range(1, 3):
    i1 = open("in" + str(i) + ".txt")

    a = numpy.loadtxt(i1, dtype='S')

    if var is None:
        var = numpy.vstack((a, zeros))
    else:
        var = numpy.vstack((var, a, zeros))

print var
</snippet></ROW><ROW><id>14634766</id><snippet>&gt;&gt;&gt; 
[['ATOM' '1' 'C1' 'POS' 'X' '1' '16.774' '117.860' '10.374' '1.00' '0.00']
 ['0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0']
 ['ATOM' '2' 'C2' 'POS' 'X' '2' '18.774' '17.860' '30.374' '2.00' '0.00']
 ['0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0' '0.0']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14635052</id><snippet>ast</snippet></ROW><ROW><id>14635052</id><snippet>compile</snippet></ROW><ROW><id>14635052</id><snippet>SyntaxError</snippet></ROW><ROW><id>14635052</id><snippet>compile</snippet></ROW><ROW><id>14635052</id><snippet>foo</snippet></ROW><ROW><id>14635052</id><snippet>compile</snippet></ROW><ROW><id>14635052</id><snippet>literal_eval</snippet></ROW><ROW><id>14635052</id><snippet>ValueError</snippet></ROW><ROW><id>14635052</id><snippet>SyntaxError</snippet></ROW><ROW><id>14635052</id><snippet>ValueError</snippet></ROW><ROW><id>14635052</id><snippet>literal_eval</snippet></ROW><ROW><id>14635118</id><snippet>import numpy as np
count_array = np.array([('foo',2),('bar',5),('baz',0)], dtype = np.object)
print(count_array)
# [[foo 2]
#  [bar 5]
#  [baz 0]]

idx = np.argsort(count_array[:, 1])
print(idx)
# [2 0 1]

print(count_array[idx])
# [[baz 0]
#  [foo 2]
#  [bar 5]]
</snippet></ROW><ROW><id>14635161</id><snippet>UPDATE Images SET timestamp = 2013-01-3121:59:00.427408 WHERE id = 1
</snippet></ROW><ROW><id>14635161</id><snippet>UPDATE Images SET timestamp = '2013-01-31 21:59:00.427408' WHERE id = 1
</snippet></ROW><ROW><id>14635161</id><snippet>sql = "UPDATE %s SET timestamp = ? WHERE id = ?" % (tableName)
cursor.execute(sql, (timestamp, primary))
</snippet></ROW><ROW><id>14635179</id><snippet>panels.1</snippet></ROW><ROW><id>14635179</id><snippet>{% with panel=panels.1 %}
   ...
{% endwith %}
</snippet></ROW><ROW><id>14635249</id><snippet>T[j]</snippet></ROW><ROW><id>14635249</id><snippet>fcluster</snippet></ROW><ROW><id>14635249</id><snippet>fcluster</snippet></ROW><ROW><id>14635249</id><snippet>fcluster</snippet></ROW><ROW><id>14635249</id><snippet>array([1, 1, 2, 2, 1])</snippet></ROW><ROW><id>14635249</id><snippet>fclusterdata</snippet></ROW><ROW><id>14635249</id><snippet>linkage</snippet></ROW><ROW><id>14635249</id><snippet>fcluster</snippet></ROW><ROW><id>14635249</id><snippet>fclusterdata</snippet></ROW><ROW><id>14635249</id><snippet>fcluster</snippet></ROW><ROW><id>14635249</id><snippet>import numpy as np

def cluster_indices(cluster_assignments):
    n = cluster_assignments.max()
    indices = []
    for cluster_number in range(1, n + 1):
        indices.append(np.where(cluster_assignments == cluster_number)[0])
    return indices

if __name__ == "__main__":
    from scipy.cluster.hierarchy import fclusterdata

    # Make some test data.
    data = np.random.rand(15,2)

    # Compute the clusters.
    cutoff = 1.0
    cluster_assignments = fclusterdata(data, cutoff)

    # Print the indices of the data points in each cluster.
    num_clusters = cluster_assignments.max()
    print "%d clusters" % num_clusters
    indices = cluster_indices(cluster_assignments)
    for k, ind in enumerate(indices):
        print "cluster", k + 1, "is", ind
</snippet></ROW><ROW><id>14635249</id><snippet>4 clusters
cluster 1 is [ 0  1  6  8 10 13 14]
cluster 2 is [ 3  4  5  7 11 12]
cluster 3 is [9]
cluster 4 is [2]
</snippet></ROW><ROW><id>14635300</id><snippet>foo.replace(r'/DIR/', '\\\\MYDIR\\data\\')
</snippet></ROW><ROW><id>14635397</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>14635451</id><snippet>a[1:]</snippet></ROW><ROW><id>14635451</id><snippet>reversed()</snippet></ROW><ROW><id>14635451</id><snippet>def rev(seq):
    return rev(seq[1:]) + [seq[0]] if seq else []
</snippet></ROW><ROW><id>14635451</id><snippet>if/else</snippet></ROW><ROW><id>14635451</id><snippet>a</snippet></ROW><ROW><id>14635451</id><snippet>seq</snippet></ROW><ROW><id>14635451</id><snippet>a == []</snippet></ROW><ROW><id>14635451</id><snippet>seq</snippet></ROW><ROW><id>14635451</id><snippet>False</snippet></ROW><ROW><id>14635468</id><snippet>np.savetxt</snippet></ROW><ROW><id>14635468</id><snippet>csv</snippet></ROW><ROW><id>14635468</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; g = StringIO.StringIO()
&gt;&gt;&gt; writer = csv.writer(g,delimiter=',')  #this is the part that is applicable
&gt;&gt;&gt; writer.writerows(lst)
&gt;&gt;&gt; g.seek(0)
&gt;&gt;&gt; print g.read()
foo,2
bar,4
</snippet></ROW><ROW><id>14635468</id><snippet>with open(output,'wb') as fout:
    writer = csv.writer(fout,delimiter=',') 
    writer.writerows(avg)
</snippet></ROW><ROW><id>14635468</id><snippet>np.savetxt(output,(avg), fmt = "%.1f", delimiter=", ")
</snippet></ROW><ROW><id>14635580</id><snippet>datetime.date()</snippet></ROW><ROW><id>14635580</id><snippet>datetime</snippet></ROW><ROW><id>14635580</id><snippet>...
# subtract the two datetimes (which gives me a timedelta)
dt = rightNow.date() - lastTweetAt.date()
...
</snippet></ROW><ROW><id>14635674</id><snippet>tree.com</snippet></ROW><ROW><id>14635674</id><snippet>cp437</snippet></ROW><ROW><id>14635674</id><snippet>cp500</snippet></ROW><ROW><id>14635674</id><snippet>open()</snippet></ROW><ROW><id>14635674</id><snippet>myfile = open('tree.txt', encoding='cp437')
</snippet></ROW><ROW><id>14635674</id><snippet>os.walk()</snippet></ROW><ROW><id>14635674</id><snippet>tree.com</snippet></ROW><ROW><id>14635675</id><snippet>numpy</snippet></ROW><ROW><id>14635766</id><snippet>class Builder</snippet></ROW><ROW><id>14635766</id><snippet>increment</snippet></ROW><ROW><id>14635766</id><snippet>class Builder:

   def __init__(self):
        self.increment = 0

   #other methods you need
</snippet></ROW><ROW><id>14635868</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import os
import rdp

def angle(dir):
    """
    Returns the angles between vectors.

    Parameters:
    dir is a 2D-array of shape (N,M) representing N vectors in M-dimensional space.

    The return value is a 1D-array of values of shape (N-1,), with each value
    between 0 and pi.

    0 implies the vectors point in the same direction
    pi/2 implies the vectors are orthogonal
    pi implies the vectors point in opposite directions
    """
    dir2 = dir[1:]
    dir1 = dir[:-1]
    return np.arccos((dir1*dir2).sum(axis=1)/(
        np.sqrt((dir1**2).sum(axis=1)*(dir2**2).sum(axis=1))))

tolerance = 70
min_angle = np.pi*0.22
filename = os.path.expanduser('~/tmp/bla.data')
points = np.genfromtxt(filename).T
print(len(points))
x, y = points.T

# Use the Ramer-Douglas-Peucker algorithm to simplify the path
# http://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm
# Python implementation: https://github.com/sebleier/RDP/
simplified = np.array(rdp.rdp(points.tolist(), tolerance))

print(len(simplified))
sx, sy = simplified.T

# compute the direction vectors on the simplified curve
directions = np.diff(simplified, axis=0)
theta = angle(directions)
# Select the index of the points with the greatest theta
# Large theta is associated with greatest change in direction.
idx = np.where(theta&gt;min_angle)[0]+1

fig = plt.figure()
ax =fig.add_subplot(111)

ax.plot(x, y, 'b-', label='original path')
ax.plot(sx, sy, 'g--', label='simplified path')
ax.plot(sx[idx], sy[idx], 'ro', markersize = 10, label='turning points')
ax.invert_yaxis()
plt.legend(loc='best')
plt.show()
</snippet></ROW><ROW><id>14635868</id><snippet>tolerance</snippet></ROW><ROW><id>14635868</id><snippet>tolerance</snippet></ROW><ROW><id>14635868</id><snippet>min_angle</snippet></ROW><ROW><id>14635868</id><snippet>min_angle</snippet></ROW><ROW><id>14635877</id><snippet>smtplib</snippet></ROW><ROW><id>14635877</id><snippet>smtplib</snippet></ROW><ROW><id>14635877</id><snippet>import smtplib
addr = 'crash-reports@example.com'
def send_crash_report(crash_report):
    msg = ('From: {}\r\nTo: {}\r\n\r\n{}'.format(
           addr, addr, crash_report)
    server = smtplib.SMTP('mail.example.com')
    server.sendmail(addr, [addr], msg)
    server.quit()
</snippet></ROW><ROW><id>14635877</id><snippet>crash-reports@example.com</snippet></ROW><ROW><id>14635987</id><snippet>reduce</snippet></ROW><ROW><id>14635987</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...        self.count = 0
...     def callme(self):
...        self.count += 1
...        return self
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; reduce(lambda x,y:x.callme(),range(7),a)
&lt;__main__.Foo object at 0xec390&gt;
&gt;&gt;&gt; a.count
7
</snippet></ROW><ROW><id>14636037</id><snippet>square</snippet></ROW><ROW><id>14636037</id><snippet>def square(num):
    for i in range(len(num)):
        square[i] = square[i] ** 2
</snippet></ROW><ROW><id>14636037</id><snippet>square</snippet></ROW><ROW><id>14636037</id><snippet>i</snippet></ROW><ROW><id>14636037</id><snippet>__getitem__</snippet></ROW><ROW><id>14636037</id><snippet>num</snippet></ROW><ROW><id>14636037</id><snippet>def square(num):
    for i in range(len(num)):
        num[i] = num[i] ** 2
</snippet></ROW><ROW><id>14636098</id><snippet>sage: [1..10]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sage: preparse('[1..10]')
'(ellipsis_range(Integer(1),Ellipsis,Integer(10)))'
</snippet></ROW><ROW><id>14636098</id><snippet>sage: 10
10
sage: preparse('10')
'Integer(10)'
</snippet></ROW><ROW><id>14636098</id><snippet>execfile</snippet></ROW><ROW><id>14636098</id><snippet>load</snippet></ROW><ROW><id>14636098</id><snippet>sage: !echo "print [1..10]" &gt;&gt; test.sage
sage: !cat test.sage
print [1..10]
sage: execfile("test.sage")
------------------------------------------------------------
   File "test.sage", line 1
     print [1..10]
                ^
SyntaxError: invalid syntax

sage: load("test.sage")
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</snippet></ROW><ROW><id>14636321</id><snippet>locale</snippet></ROW><ROW><id>14636321</id><snippet>import locale

# if you're on Windows in the US most likely 
# the following is returned: ('en_US', 'cp1252')
deflang, defencoding = locale.getdefaultlocale() 

# now that you have encoded your data (from Unicode) 
# you may commit it to the database 
write_this_to_db = u'Libert\u00e9'.encode(defencoding)
# -&gt; 'Libert\xe9'
</snippet></ROW><ROW><id>14636346</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14636346</id><snippet>d = {'FOO': "('BAR','BAA'),('CAR','CAA')", 'FOOO': "('BAAR','BAAA'),('CAAR','CAAA')"}
d2 = {k: zip(*ast.literal_eval(v))[0] for k,v in d.iteritems()}
# d2 is now {'FOO': ('BAR', 'CAR'), 'FOOO': ('BAAR', 'CAAR')}
</snippet></ROW><ROW><id>14636467</id><snippet>if passretry == 'yes' or 'Yes':
</snippet></ROW><ROW><id>14636467</id><snippet>if (passretry == 'yes') or 'Yes':
</snippet></ROW><ROW><id>14636467</id><snippet>'Yes'</snippet></ROW><ROW><id>14636467</id><snippet>True</snippet></ROW><ROW><id>14636467</id><snippet>if</snippet></ROW><ROW><id>14636467</id><snippet>True</snippet></ROW><ROW><id>14636467</id><snippet>if passretry in ('yes', 'Yes'):
</snippet></ROW><ROW><id>14636467</id><snippet>elif</snippet></ROW><ROW><id>14636467</id><snippet>elif passretry in ('no', 'No'):
</snippet></ROW><ROW><id>14636544</id><snippet>tRNS</snippet></ROW><ROW><id>14636544</id><snippet>'LA'</snippet></ROW><ROW><id>14636544</id><snippet>import sys
from PIL import Image

img = Image.open(sys.argv[1])
pal = img.getpalette()
width, height = img.size
actual_transp = img.info['actual_transparency'] # XXX This will fail.

result = Image.new('LA', img.size)

im = img.load()
res = result.load()
for x in range(width):
    for y in range(height):
        t = actual_transp[im[x, y]]
        color = pal[im[x, y]]
        res[x, y] = (color, t)

result.resize((64, 64), Image.ANTIALIAS).save(sys.argv[2])
</snippet></ROW><ROW><id>14636544</id><snippet>PIL/PngImagePlugin.py</snippet></ROW><ROW><id>14636544</id><snippet>chunk_tRNS</snippet></ROW><ROW><id>14636544</id><snippet>if</snippet></ROW><ROW><id>14636544</id><snippet>im_mode == "P"</snippet></ROW><ROW><id>14636544</id><snippet>i &gt;= 0</snippet></ROW><ROW><id>14636544</id><snippet>self.im_info["actual_transparency"] = map(ord, s)</snippet></ROW><ROW><id>14636547</id><snippet>import urllib
from BeautifulSoup import BeautifulSoup

url = 'http://shop.nordstrom.com/c/womens-skirts'
fp = urllib.urlopen(url)
soup = BeautifulSoup(fp)

print soup.find('div',{'class':'fashion-item'}).findAll('img') # also tried .find
</snippet></ROW><ROW><id>14636547</id><snippet>a0:</snippet></ROW><ROW><id>14636547</id><snippet>xmlns</snippet></ROW><ROW><id>14636547</id><snippet>a0:</snippet></ROW><ROW><id>14636547</id><snippet>source = browser.page_source.replace('a0:div','div')
soup = BeautifulSoup(source)

print soup.find('div',{'class':'fashion-item'}).find('img')
</snippet></ROW><ROW><id>14636609</id><snippet>sort()</snippet></ROW><ROW><id>14636609</id><snippet>key</snippet></ROW><ROW><id>14636609</id><snippet>queue.sort(queue, key = [your lambda function])</snippet></ROW><ROW><id>14636609</id><snippet>queue.sort(queue, key = lambda x: util.manhattanDistance(curr,x))</snippet></ROW><ROW><id>14637032</id><snippet>easy_install zope.interface
</snippet></ROW><ROW><id>14637032</id><snippet>easy_install "zope.interface==4.0.3"
</snippet></ROW><ROW><id>14637071</id><snippet>&gt;&gt;&gt; q = [1,2,3,4,5,6,5,4,3,2,1]
&gt;&gt;&gt; q.index(max(q))
5
</snippet></ROW><ROW><id>14637122</id><snippet>def send_mail(send_from,send_to, subject, text, files=[], server = "localhost"):
   msg = MIMEMultipart()
   msg['From'] = send_from
   msg['To'] = COMMASPACE.join(send_to)

   # ... 

   server = smtplib.SMTP(server)
   server.sendmail(send_from, send_to, msg.as_string())
   server.close()
</snippet></ROW><ROW><id>14637122</id><snippet>BCC</snippet></ROW><ROW><id>14637122</id><snippet>To</snippet></ROW><ROW><id>14637122</id><snippet>join</snippet></ROW><ROW><id>14637122</id><snippet>SMTP.sendmail</snippet></ROW><ROW><id>14637122</id><snippet>[s]</snippet></ROW><ROW><id>14637122</id><snippet>s</snippet></ROW><ROW><id>14637272</id><snippet>In [38]: import re

In [39]: g='10+10+20x'

In [40]: re.findall('(\d+|[a-zA-Z]+|\+)',g)
Out[40]: ['10', '+', '10', '+', '20', 'x']
</snippet></ROW><ROW><id>14637350</id><snippet>endtimezone</snippet></ROW><ROW><id>14637350</id><snippet>datetimeobject</snippet></ROW><ROW><id>14637434</id><snippet>easy_install</snippet></ROW><ROW><id>14637434</id><snippet> C:\Python27\Scripts
</snippet></ROW><ROW><id>14637536</id><snippet>csv</snippet></ROW><ROW><id>14637536</id><snippet>unicodecsv</snippet></ROW><ROW><id>14637692</id><snippet>import sys
from PIL import Image


def floodfill(img, seed, color):
    im = img.load()
    work = [seed]
    start_color = im[seed]
    while work:
        x, y = work.pop()
        im[x, y] = color
        for dx, dy in ((-1,0), (1,0), (0,-1), (0,1)):
            nx, ny = x + dx, y + dy
            if im[nx, ny] == start_color:
                work.append((nx, ny))


USA_MAP = Image.open(sys.argv[1]).convert('1')
POINT_STATE = {'AL': (420, 260), 'AZ': (110, 240), 'AR': (350, 250)}

painted_map = USA_MAP.convert('L')
data = {'AL': 10.5, 'AZ': 23.4, 'AR': 15.0}
# Normalize data based on the minimum weight being 0+eps and maximum 30.
for k, v in data.items():
    v = v/30.
    color = int(round(255 * v))
    floodfill(painted_map, POINT_STATE[k], 255 - color)

painted_map.save(sys.argv[2])
</snippet></ROW><ROW><id>14637775</id><snippet>%3F</snippet></ROW><ROW><id>14637775</id><snippet>https://google.com/accounts/o8/site-xrds?hd=example.com
</snippet></ROW><ROW><id>14637775</id><snippet>http://testsk2012.appspot.com/_ah/login_redir?claimid=https://www.google.com/accounts/o8/site-xrds%3Fhd=somesite.com&amp;continue=http://testsk2012.appspot.com/
</snippet></ROW><ROW><id>14637824</id><snippet>SELECT
    user_events.user_id,
    user_events.event_time,
    user_events.detect_time,
    user_events.new_state,
    max(user_events.event_time)
FROM
    user_events
GROUP BY
    user_events.user_id
</snippet></ROW><ROW><id>14637824</id><snippet>for user_id, current in session.query(
    UserEvent.user_id, func.max(UserEvent.event_time)).group_by(
        UserEvent.user_id):
</snippet></ROW><ROW><id>14637824</id><snippet>user_id</snippet></ROW><ROW><id>14637824</id><snippet>UserEvent</snippet></ROW><ROW><id>14637824</id><snippet>t = session.query(
    UserEvent.user_id,
    func.max(UserEvent.event_time).label('max_time'),
).group_by(
    UserEvent.user_id,
).subquery().alias('t')

query = session.query(
    UserEvent,
).filter(and_(
    UserEvent.user_id == t.c.user_id,
    UserEvent.event_time == t.c.max_time,
))
</snippet></ROW><ROW><id>14637848</id><snippet>max(len(w) for w in words)</snippet></ROW><ROW><id>14637848</id><snippet>len(max(words, key=len))</snippet></ROW><ROW><id>14638002</id><snippet>os.path</snippet></ROW><ROW><id>14638002</id><snippet>os.path</snippet></ROW><ROW><id>14638002</id><snippet>os.listdir</snippet></ROW><ROW><id>14638002</id><snippet>ZipFile</snippet></ROW><ROW><id>14638002</id><snippet>import tempfile

# Create a temporary directory into which we can extract zip contents.
tmpdir = tempfile.mkdtemp()
try:
    zipped = zipfile.ZipFile(request.FILES['content'])
    zipped.extractall(tmpdir)

    # Walk through the extracted directory structure doing what you
    # want with each file.
    for (dirpath, dirnames, filenames) in os.walk(tmpdir):
        # Look into subdirectories?
        for dirname in dirnames:
            full_dir_path = os.path.join(dirpath, dirname)
            # Do stuff in this directory
        for filename in filenames:
            full_file_path = os.path.join(dirpath, filename)
            # Do stuff with this file.
finally:
    # ... Clean up temporary diretory recursively here.
</snippet></ROW><ROW><id>14638062</id><snippet>i</snippet></ROW><ROW><id>14638062</id><snippet>check</snippet></ROW><ROW><id>14638062</id><snippet>getPrimeList()</snippet></ROW><ROW><id>14638062</id><snippet>check</snippet></ROW><ROW><id>14638062</id><snippet>i</snippet></ROW><ROW><id>14638062</id><snippet>def getPrimeList(check):
    storedprimes = []
    i = 2
    while i &lt;= check:
        if isPrime(i):  # *not* `check`! 
            storedprimes = storedprimes + [i]
        i = i + 1
    return storedprimes
</snippet></ROW><ROW><id>14638062</id><snippet>primelist</snippet></ROW><ROW><id>14638062</id><snippet>getPrimeList(check)</snippet></ROW><ROW><id>14638062</id><snippet>primelist[i]</snippet></ROW><ROW><id>14638062</id><snippet>i</snippet></ROW><ROW><id>14638062</id><snippet>primelist</snippet></ROW><ROW><id>14638062</id><snippet>isPrime()</snippet></ROW><ROW><id>14638062</id><snippet>getGCF()</snippet></ROW><ROW><id>14638062</id><snippet>listofprimefacts</snippet></ROW><ROW><id>14638062</id><snippet>primefactlist</snippet></ROW><ROW><id>14638062</id><snippet>NameError</snippet></ROW><ROW><id>14638062</id><snippet>primelist</snippet></ROW><ROW><id>14638062</id><snippet>for check in checks:</snippet></ROW><ROW><id>14638062</id><snippet>while</snippet></ROW><ROW><id>14638062</id><snippet>from math import sqrt

def prime_factors(num, start=2):
    """Return all prime factors (ordered) of num in a list"""
    candidates = xrange(start, int(sqrt(num)) + 1)
    factor = next((x for x in candidates if (num % x == 0)), None)
    return ([factor] + prime_factors(num / factor, factor) if factor else [num])
</snippet></ROW><ROW><id>14638062</id><snippet>isPrime()</snippet></ROW><ROW><id>14638071</id><snippet>from csv import DictWriter

players = [{'dailyWinners': 3, 'dailyFreePlayed': 2, 'user': 'Player1', 'bank': 0.06},
{'dailyWinners': 3, 'dailyFreePlayed': 2, 'user': 'Player2', 'bank': 4.0},
{'dailyWinners': 1, 'dailyFree': 2, 'user': 'Player3', 'bank': 3.1},            
{'dailyWinners': 3, 'dailyFree': 2, 'user': 'Player4', 'bank': 0.32}]

with open('spreadsheet.csv','w') as outfile:
    writer = DictWriter(outfile, ('dailyWinners','dailyFreePlayed','dailyFree','user','bank'))
    writer.writeheader()
    writer.writerows(players)
</snippet></ROW><ROW><id>14638071</id><snippet>python test.py</snippet></ROW><ROW><id>14638071</id><snippet>spreadsheet.csv</snippet></ROW><ROW><id>14638084</id><snippet>with open('somefile') as fin:
    rows = (line.split() for line in fin)
    take = (row for row in rows if int(row[1] == 2) and 4 &lt;= int(row[2]) &lt;= 15)
    # data = list(take)
    for row in take:
        pass # do something
</snippet></ROW><ROW><id>14638242</id><snippet>list.sort</snippet></ROW><ROW><id>14638242</id><snippet>s.sort([cmp[, key[, reverse]]]) sort the items of s in place    (7)(8)(9)(10)
</snippet></ROW><ROW><id>14638242</id><snippet>cmp</snippet></ROW><ROW><id>14638242</id><snippet>toVisit</snippet></ROW><ROW><id>14638242</id><snippet>toVisit</snippet></ROW><ROW><id>14638242</id><snippet>toVisit.sort(key = lambda x: util.manhattanDistance(curr,x))
</snippet></ROW><ROW><id>14638242</id><snippet>lambda</snippet></ROW><ROW><id>14638242</id><snippet>lambda</snippet></ROW><ROW><id>14638242</id><snippet>lambda</snippet></ROW><ROW><id>14638242</id><snippet>lambda ARGS: EXPR
</snippet></ROW><ROW><id>14638242</id><snippet>def good_name_for_what_expr_does(ARGS):
    return EXPR
</snippet></ROW><ROW><id>14638242</id><snippet>lambda ARGS: EXPR</snippet></ROW><ROW><id>14638242</id><snippet>good_name_for_what_expr_does</snippet></ROW><ROW><id>14638242</id><snippet>def manhattanDistanceFromCurr(x):
    return util.manhattanDistance(curr, x)
toVisit.sort(toVisit, key = manhattanDistanceFromCurr)
</snippet></ROW><ROW><id>14638242</id><snippet>lambda</snippet></ROW><ROW><id>14638325</id><snippet>DATABASE_ENGINE = 'django.db.backends.sqlite3'
DATABASE_NAME = 'bookmarksdb'
DATABASE_USER = ''
DATABASE_PASSWORD = ''
DATABASE_HOST = ''
DATABASE_PORT = ''
</snippet></ROW><ROW><id>14638479</id><snippet>out.close</snippet></ROW><ROW><id>14638479</id><snippet>out.close()</snippet></ROW><ROW><id>14638479</id><snippet>()</snippet></ROW><ROW><id>14638665</id><snippet>poll_id</snippet></ROW><ROW><id>14638665</id><snippet>def detail(request, poll_id):
    return HttpResponse("You're looking at poll %s." % poll_id)
</snippet></ROW><ROW><id>14638665</id><snippet>example.com/polls/34/</snippet></ROW><ROW><id>14638665</id><snippet>poll</snippet></ROW><ROW><id>14638665</id><snippet>34</snippet></ROW><ROW><id>14638665</id><snippet>poll_id</snippet></ROW><ROW><id>14638665</id><snippet>poll_id = 34</snippet></ROW><ROW><id>14638665</id><snippet>\d+</snippet></ROW><ROW><id>14638665</id><snippet>poll_id</snippet></ROW><ROW><id>14638665</id><snippet>poll_id</snippet></ROW><ROW><id>14638895</id><snippet>&gt;&gt;&gt; strList = ['Ulis', 'Tolus', 'Utah', 'Ralf', 'Chair']
&gt;&gt;&gt; sum(1 for el in strList if el.startswith('U'))
2
</snippet></ROW><ROW><id>14638895</id><snippet>&gt;&gt;&gt; list1 = [4, 6, 7, 3, 4, 5, 3, 4]
&gt;&gt;&gt; list1.count(4)
3
</snippet></ROW><ROW><id>14638895</id><snippet>strList</snippet></ROW><ROW><id>14639051</id><snippet>&lt;...&gt;</snippet></ROW><ROW><id>14639051</id><snippet>    # String form, but snip if too long in ? form (full in ??)
    if detail_level &gt;= self.str_detail_level:
        try:
            ostr = str(obj)
            str_head = 'string_form'
            if not detail_level and len(ostr)&gt;string_max:
                ostr = ostr[:shalf] + ' &lt;...&gt; ' + ostr[-shalf:]
                ostr = ("\n" + " " * len(str_head.expandtabs())).\
                        join(q.strip() for q in ostr.split("\n"))
            out[str_head] = ostr
        except:
            pass
</snippet></ROW><ROW><id>14639091</id><snippet>food</snippet></ROW><ROW><id>14639091</id><snippet>if</snippet></ROW><ROW><id>14639091</id><snippet>food</snippet></ROW><ROW><id>14639091</id><snippet>food</snippet></ROW><ROW><id>14639091</id><snippet>food = 0 # food stays at 0 for invalid choices
choice = input("Choice: ")
if choice == "1":
     food = 1
     bored = 2
if choice == "2":
     food = 4
     bored = 8
return food
</snippet></ROW><ROW><id>14639091</id><snippet> return (food, bored)
</snippet></ROW><ROW><id>14639091</id><snippet> (food, bored) = setfood()
</snippet></ROW><ROW><id>14639101</id><snippet>root</snippet></ROW><ROW><id>14639101</id><snippet>sentence</snippet></ROW><ROW><id>14639101</id><snippet>root</snippet></ROW><ROW><id>14639101</id><snippet>root</snippet></ROW><ROW><id>14639101</id><snippet>sentence</snippet></ROW><ROW><id>14639101</id><snippet>root</snippet></ROW><ROW><id>14639101</id><snippet>import lxml.etree as ET

content = '''\
&lt;root&gt;
   She
   &lt;opt&gt;went&lt;/opt&gt;
   &lt;opt&gt;didn't go&lt;/opt&gt;
   to school.
&lt;/root&gt;'''

root = ET.fromstring(content)
root.tag = 'sentence'
newroot = ET.Element('root')
newroot.insert(0,root)
print(ET.tostring(newroot))

# &lt;root&gt;&lt;sentence&gt;
#    She
#    &lt;opt&gt;went&lt;/opt&gt;
#    &lt;opt&gt;didn't go&lt;/opt&gt;
#    to school.
# &lt;/sentence&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>14639196</id><snippet>H/A[:,None]</snippet></ROW><ROW><id>14639196</id><snippet>In [71]: (H.swapaxes(0, 1) / A).swapaxes(0, 1)
Out[71]: 
array([[  8.91065496e-01,  -1.30548362e-01,   1.70357901e+00],
       [  5.06027691e-02,   3.59913305e-01,  -4.27484490e-03],
       [  4.72868136e-01,   2.04351398e+00,   2.67527572e+00],
       [  7.87239835e+00,  -2.13484271e+02,  -2.44764975e+02]])

In [72]: H/A[:,None]
Out[72]: 
array([[  8.91065496e-01,  -1.30548362e-01,   1.70357901e+00],
       [  5.06027691e-02,   3.59913305e-01,  -4.27484490e-03],
       [  4.72868136e-01,   2.04351398e+00,   2.67527572e+00],
       [  7.87239835e+00,  -2.13484271e+02,  -2.44764975e+02]])
</snippet></ROW><ROW><id>14639196</id><snippet>None</snippet></ROW><ROW><id>14639196</id><snippet>newaxis</snippet></ROW><ROW><id>14639196</id><snippet>A</snippet></ROW><ROW><id>14639196</id><snippet>In [73]: A
Out[73]: array([ 1.1845468 ,  1.30376536, -0.44912446,  0.04675434])

In [74]: A[:,None]
Out[74]: 
array([[ 1.1845468 ],
       [ 1.30376536],
       [-0.44912446],
       [ 0.04675434]])
</snippet></ROW><ROW><id>14639478</id><snippet>xcodebuild</snippet></ROW><ROW><id>14639478</id><snippet>Xcode</snippet></ROW><ROW><id>14639478</id><snippet>gcc</snippet></ROW><ROW><id>14639478</id><snippet>MySQL-python</snippet></ROW><ROW><id>14639478</id><snippet>gcc-4.2</snippet></ROW><ROW><id>14639478</id><snippet>Xcode 3.2.6</snippet></ROW><ROW><id>14639547</id><snippet>In [71]: A = [['A',[1,2,3]],['D',[3,4]],['E',[6,7]],['F',[1]],['G',[7,6,5,4]]]

In [72]: [[x[0],x[1][:2]] for x in A]
Out[72]: [['A', [1, 2]], ['D', [3, 4]], ['E', [6, 7]], ['F', [1]], ['G', [7, 6]]]
</snippet></ROW><ROW><id>14639568</id><snippet>dtype=object</snippet></ROW><ROW><id>14639568</id><snippet>&gt;&gt;&gt; a = numpy.array(['apples', 'foobar', 'cowboy'])
&gt;&gt;&gt; a[2] = 'bananas'
&gt;&gt;&gt; a
array(['apples', 'foobar', 'banana'], 
      dtype='|S6')
</snippet></ROW><ROW><id>14639568</id><snippet>dtype=object</snippet></ROW><ROW><id>14639568</id><snippet>&gt;&gt;&gt; a = numpy.array(['apples', 'foobar', 'cowboy'], dtype=object)
&gt;&gt;&gt; a
array([apples, foobar, cowboy], dtype=object)
&gt;&gt;&gt; a[2] = 'bananas'
&gt;&gt;&gt; a
array([apples, foobar, bananas], dtype=object)
</snippet></ROW><ROW><id>14639568</id><snippet>&gt;&gt;&gt; a[2] = {1:2, 3:4}
&gt;&gt;&gt; a
array([apples, foobar, {1: 2, 3: 4}], dtype=object)
</snippet></ROW><ROW><id>14639568</id><snippet>&gt;&gt;&gt; a = numpy.array(['abba' for _ in range(10000)])
&gt;&gt;&gt; b = numpy.array(['abba' for _ in range(10000)], dtype=object)
&gt;&gt;&gt; %timeit a.copy()
100000 loops, best of 3: 2.51 us per loop
&gt;&gt;&gt; %timeit b.copy()
10000 loops, best of 3: 48.4 us per loop
</snippet></ROW><ROW><id>14639627</id><snippet>.add</snippet></ROW><ROW><id>14639627</id><snippet>fill_value</snippet></ROW><ROW><id>14639627</id><snippet>&gt;&gt;&gt; s = pd.Series(index=[-9999, 240, 138.99], data=[26371, 1755, 2])
&gt;&gt;&gt; s2 = pd.Series(index=[-9999, 240, 113.03, 110], data=[26371, 1755, 6, 4])
&gt;&gt;&gt; s.add(s2, fill_value=0)
-9999.00    52742
 110.00         4
 113.03         6
 138.99         2
 240.00      3510
</snippet></ROW><ROW><id>14639627</id><snippet>+</snippet></ROW><ROW><id>14639627</id><snippet>&gt;&gt;&gt; s.align(s2, fill_value=0)
(-9999.00    26371
 110.00         0
 113.03         0
 138.99         2
 240.00      1755, -9999.00    26371
 110.00         4
 113.03         6
 138.99         0
 240.00      1755)
&gt;&gt;&gt; s, s2 = s.align(s2, fill_value=0)
&gt;&gt;&gt; s + s2
-9999.00    52742
 110.00         4
 113.03         6
 138.99         2
 240.00      3510
</snippet></ROW><ROW><id>14639772</id><snippet>patch1_text = patch1.read()
main.write(patch1_text)
</snippet></ROW><ROW><id>14639772</id><snippet>with open('patch1', 'r') as patch1:
    patch1_text = patch1.read()
    patch1.close()
</snippet></ROW><ROW><id>14639787</id><snippet>QLineEdit</snippet></ROW><ROW><id>14639787</id><snippet>returnPressed</snippet></ROW><ROW><id>14639787</id><snippet>QLineEdit</snippet></ROW><ROW><id>14639787</id><snippet>QTextEdit</snippet></ROW><ROW><id>14639787</id><snippet>import sys
from PySide import QtGui

class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.output = QtGui.QTextEdit()
        self.output.setReadOnly(True)

        self.input = QtGui.QLineEdit()
        self.input.returnPressed.connect(self.addInput)
        self.input.setPlaceholderText('input here')

        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.output)
        layout.addWidget(self.input)

    def addInput(self):
        # skip empty text
        if self.input.text():
            self.output.append(self.input.text())
        # clear the QLineEdit for new input
        self.input.clear()

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    w = Window()
    w.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14639957</id><snippet>f.seek()</snippet></ROW><ROW><id>14639957</id><snippet>f = open("myfile.txt","a+")
f.seek(0)
print f.read()
</snippet></ROW><ROW><id>14640160</id><snippet>pyuic4</snippet></ROW><ROW><id>14640160</id><snippet>-x</snippet></ROW><ROW><id>14640160</id><snippet>pyuic4</snippet></ROW><ROW><id>14640160</id><snippet>pyuic4 -x -o output.py input.ui
</snippet></ROW><ROW><id>14640394</id><snippet>from nltk.tokenize import word_tokenize
finder = BigramCollocationFinder.from_words(word_tokenize("This is a test sentence"))
print finder.nbest(bigram_measures.pmi, 10)
</snippet></ROW><ROW><id>14640394</id><snippet>[('This', 'is'), ('a', 'test'), ('is', 'a'), ('test', 'sentence')]</snippet></ROW><ROW><id>14640394</id><snippet>with open('all.txt', 'r') as data_file:
    finder = BigramCollocationFinder.from_words(word_tokenize(data_file.read())
</snippet></ROW><ROW><id>14640429</id><snippet>.items()</snippet></ROW><ROW><id>14640429</id><snippet>smaller_things = {}
for k, v in things.items():
    if v == 3:
        smaller_things[k] = v
</snippet></ROW><ROW><id>14640429</id><snippet>smaller_things = [k for k, v in things.items() if v == 3]

&gt;&gt;&gt; things = { 'a': 3, 'b': 2, 'c': 3 }
&gt;&gt;&gt; [k for k, v in things.items() if v == 3]
['a', 'c']
</snippet></ROW><ROW><id>14640647</id><snippet>x = int(input("What is the first number? "))
y = int(input("What is the second number? "))
answer = 0

while y != 0:
   if (y%2 != 0):
      answer=answer+x
      x=x*2
      y=y//2
   if (y%2 == 0):
      x=x*2
      y=y//2

print("the product is",(answer))
</snippet></ROW><ROW><id>14640669</id><snippet>myproject.sites</snippet></ROW><ROW><id>14640669</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14640669</id><snippet>django.contrib.sites</snippet></ROW><ROW><id>14640669</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14641092</id><snippet>complements</snippet></ROW><ROW><id>14641092</id><snippet>zip(residues,complements)</snippet></ROW><ROW><id>14641092</id><snippet>complements</snippet></ROW><ROW><id>14641092</id><snippet>zip(complements,moduli)</snippet></ROW><ROW><id>14641092</id><snippet>zip</snippet></ROW><ROW><id>14641092</id><snippet>sum()</snippet></ROW><ROW><id>14641092</id><snippet>complements</snippet></ROW><ROW><id>14641252</id><snippet>get_dummies</snippet></ROW><ROW><id>14641252</id><snippet>In [11]: s
Out[11]: 
0    T
1    T
2    T
3    T
4    K
Name: 1

In [12]: pd.get_dummies(s, prefix=s.name, prefix_sep='')
Out[12]: 
   1K  1T
0   0   1
1   0   1
2   0   1
3   0   1
4   1   0
</snippet></ROW><ROW><id>14641252</id><snippet>In [21]: (df.ix[0] != df).any()
Out[21]: 
0    False
1     True
2     True
3    False
4     True
5    False
</snippet></ROW><ROW><id>14641252</id><snippet>In [31]: I = df.columns[(df.ix[0] != df).any()]

In [32]: J = [pd.get_dummies(df[i], prefix=df[i].name, prefix_sep='') for i in I]

In [33]: df[[]].join(J)
Out[33]: 
   1K  1T  2A  2S  4D  4E  4H
0   0   1   1   0   1   0   0
1   0   1   1   0   1   0   0
2   0   1   0   1   0   1   0
3   0   1   1   0   1   0   0
4   1   0   1   0   0   0   1
</snippet></ROW><ROW><id>14641252</id><snippet>df = pd.DataFrame(map(list, 'MTAQDD,MTAQDD,MTSQED,MTAQDD,MKAQHD'.split(',')))
</snippet></ROW><ROW><id>14642360</id><snippet>readline</snippet></ROW><ROW><id>14642360</id><snippet>libedit</snippet></ROW><ROW><id>14642360</id><snippet>readline</snippet></ROW><ROW><id>14642360</id><snippet>sudo /path/to/easy_install readline
</snippet></ROW><ROW><id>14642360</id><snippet>readline</snippet></ROW><ROW><id>14642360</id><snippet>pip</snippet></ROW><ROW><id>14642360</id><snippet>easy_install</snippet></ROW><ROW><id>14642360</id><snippet>easy_install</snippet></ROW><ROW><id>14642360</id><snippet>setuptools</snippet></ROW><ROW><id>14642360</id><snippet>easy_install</snippet></ROW><ROW><id>14642360</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>14642360</id><snippet>/usr/bin</snippet></ROW><ROW><id>14642360</id><snippet>/usr/local/bin/easy_install</snippet></ROW><ROW><id>14642360</id><snippet>python.org</snippet></ROW><ROW><id>14642360</id><snippet>easy_install-X.Y</snippet></ROW><ROW><id>14642360</id><snippet>/usr/local/bin/easy_install-2.7</snippet></ROW><ROW><id>14642360</id><snippet>easy_install</snippet></ROW><ROW><id>14642360</id><snippet>PyObjC</snippet></ROW><ROW><id>14642696</id><snippet>manage.py runserver</snippet></ROW><ROW><id>14642742</id><snippet>__name__</snippet></ROW><ROW><id>14642742</id><snippet>__doc__</snippet></ROW><ROW><id>14642742</id><snippet>def predicateA(v):
    """
    some logic that eventually returns a True/False value
    """
    return True

print "Name:", predicateA.__name__
print "Doc:", predicateB.__doc__
</snippet></ROW><ROW><id>14642742</id><snippet>def predicateB(v):
    """
    some logic that eventually returns a True/False value
    """
    return False

predicateA.alwaysReturnsFalse = False
predicateB.alwaysReturnsFalse = True

for pred in [predicateA, predicateB]:
    print "Function:", pred.__name__
    print "Documentation:", pred.__doc__
    if pred.alwaysReturnsFalse:
        print "(This function always returns false)"
</snippet></ROW><ROW><id>14642817</id><snippet>[a-zA-Z0-9]*[a-zA-Z]+[a-zA-Z0-9]*
</snippet></ROW><ROW><id>14642817</id><snippet>abc</snippet></ROW><ROW><id>14642817</id><snippet>12abc</snippet></ROW><ROW><id>14642817</id><snippet>abc12</snippet></ROW><ROW><id>14642817</id><snippet>123</snippet></ROW><ROW><id>14642817</id><snippet>ab@/</snippet></ROW><ROW><id>14642817</id><snippet>[a-zA-Z]+
</snippet></ROW><ROW><id>14642855</id><snippet>reduce(operator.and_, seq)
</snippet></ROW><ROW><id>14642855</id><snippet>reduce(operator.or_, seq)
</snippet></ROW><ROW><id>14642881</id><snippet>    form = DatabaseForm()
    form.images.choices = [(str(x[0]), x) for x in listOfRows]
    if form.validate_on_submit():
</snippet></ROW><ROW><id>14642933</id><snippet>alarm_tag.toxml().split("\n")[0]
</snippet></ROW><ROW><id>14643000</id><snippet>@classmethod</snippet></ROW><ROW><id>14643000</id><snippet>Load</snippet></ROW><ROW><id>14643000</id><snippet>    @classmethod
    def Load(cls, Filename):
        # Do stuff
        return cls(ComplexA, ComplexB)
</snippet></ROW><ROW><id>14643000</id><snippet>class B(A):
    def __init__(self, complexA, complexB):
        # Whatever you want, including calling the parent constructor
</snippet></ROW><ROW><id>14643000</id><snippet>B.Load(some_file)</snippet></ROW><ROW><id>14643000</id><snippet>B.__init__</snippet></ROW><ROW><id>14643100</id><snippet>pe = pefile.PE(u"c:/temp/じゃｙそｎ.exe"))
</snippet></ROW><ROW><id>14643220</id><snippet>port</snippet></ROW><ROW><id>14643220</id><snippet>timeout</snippet></ROW><ROW><id>14643220</id><snippet> smtplib.SMTP(server, port=1234, local_hostname='your_local_host', timeout=10)
</snippet></ROW><ROW><id>14643685</id><snippet>seek</snippet></ROW><ROW><id>14643685</id><snippet>write</snippet></ROW><ROW><id>14643685</id><snippet>seek</snippet></ROW><ROW><id>14643685</id><snippet>write</snippet></ROW><ROW><id>14643685</id><snippet>with file('patch1.bin', 'rb') as fh:
    patch1 = fh.read()

with file('patch2.bin', 'rb') as fh:
    patch2 = fh.read()

with file('file.bin', 'r+b') as fh:
    # apply patch1
    fh.seek(0xc0010)
    fh.write(patch1)
    fh.seek(0x7c0010)
    fh.write(patch1)
    # apply patch2
    fh.seek(0x040000)
    fh.write(patch2)
</snippet></ROW><ROW><id>14643726</id><snippet>multiprocessing</snippet></ROW><ROW><id>14643726</id><snippet>logging</snippet></ROW><ROW><id>14644147</id><snippet>VERSION_NAME = u'{}.{}.{}'.format(*VERSION)
</snippet></ROW><ROW><id>14644147</id><snippet>VERSION_NAME</snippet></ROW><ROW><id>14644220</id><snippet>import cmd

class HelloWorld(cmd.Cmd):
    """Simple command processor example."""

    def do_greet(self, person):
        """greet [person]
        Greet the named person"""
        if person:
            print "hi,", person
        else:
            print 'hi'

    def do_EOF(self, line):
        return True

    def postloop(self):
        print

if __name__ == '__main__':
    HelloWorld().cmdloop()
</snippet></ROW><ROW><id>14644220</id><snippet>$ python cmd_arguments.py
(Cmd) help

Documented commands (type help ):
========================================
greet

Undocumented commands:
======================
EOF  help

(Cmd) help greet
greet [person]
        Greet the named person
</snippet></ROW><ROW><id>14644737</id><snippet>([^=]+)    # key
=          # equals is how we tokenise the original string
([^=]+)    # value
(?:,|$)    # value terminator, either comma or end of string
</snippet></ROW><ROW><id>14644737</id><snippet>.+</snippet></ROW><ROW><id>14644737</id><snippet>=</snippet></ROW><ROW><id>14644737</id><snippet>re.findall(r'([^=]+)=([^=]+)(?:,|$)', 'foo=bar,breakfast=spam,eggs,blt=bacon,lettuce,tomato,spam=spam')
</snippet></ROW><ROW><id>14644737</id><snippet>[('foo', 'bar'), ('breakfast', 'spam,eggs'), ('blt', 'bacon,lettuce,tomato'), ('spam', 'spam')]
</snippet></ROW><ROW><id>14644838</id><snippet>psql dbname -p 5433
</snippet></ROW><ROW><id>14644949</id><snippet>while True:
    try:
        line = (raw_input().strip())
    except EOFError:
        break
    if not line: break
</snippet></ROW><ROW><id>14644982</id><snippet>distutils</snippet></ROW><ROW><id>14644982</id><snippet>build</snippet></ROW><ROW><id>14644982</id><snippet>build_py</snippet></ROW><ROW><id>14644982</id><snippet>build_ext</snippet></ROW><ROW><id>14644982</id><snippet>distutils.command.build</snippet></ROW><ROW><id>14644982</id><snippet>build</snippet></ROW><ROW><id>14644982</id><snippet>Command</snippet></ROW><ROW><id>14644982</id><snippet>import distutils.command.build

class BuildCommandProxy(distutils.command.build.build):
    pass
</snippet></ROW><ROW><id>14645000</id><snippet>os.exec*()</snippet></ROW><ROW><id>14645000</id><snippet>rsync --progress</snippet></ROW><ROW><id>14645205</id><snippet>Blob</snippet></ROW><ROW><id>14645205</id><snippet>Blob</snippet></ROW><ROW><id>14645205</id><snippet>Blob</snippet></ROW><ROW><id>14645205</id><snippet>from ZODB.blob import Blob

uid = Blob(imagebinary.read())
</snippet></ROW><ROW><id>14645205</id><snippet>uid</snippet></ROW><ROW><id>14645205</id><snippet>from pyramid.response import Response

def serveimage(request):
    # retrieve uid from somewhere
    resp = Response(content_type='image/jpeg')
    resp.app_iter = uid.open('r')  # open for reading
    return resp
</snippet></ROW><ROW><id>14645237</id><snippet>ax.set_xticks(xvalues)
</snippet></ROW><ROW><id>14645435</id><snippet>a.out</snippet></ROW><ROW><id>14645435</id><snippet>mobcal.run</snippet></ROW><ROW><id>14645435</id><snippet>mobcal.run</snippet></ROW><ROW><id>14645435</id><snippet>import tempfile
import os

def run(mjf_file):
    dir = tempfile.mkdtemp(dir=".")
    os.chdir(dir)

    # rest of function here
    # create mobcal.run in current directory
    # while changing references to other files from "./" to "../"
</snippet></ROW><ROW><id>14645504</id><snippet>@abstractproperty</snippet></ROW><ROW><id>14645504</id><snippet>from abc import ABCMeta, abstractproperty, abstractmethod

class MyInterface(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def required_method(self):
        pass

    @abstractproperty
    def required_property(self):
        pass
</snippet></ROW><ROW><id>14645504</id><snippet>required_property</snippet></ROW><ROW><id>14645504</id><snippet>required_property</snippet></ROW><ROW><id>14645790</id><snippet>numpy</snippet></ROW><ROW><id>14645790</id><snippet>import numpy as np

a = [range(255) for _ in range(10)]
np_a = np.array(a)    
# set all values above 200 to 0
np_a[np_a &gt; 200] = 0
# np_a now contains the data with all values above 200 changed to 0

# if you needed to convert the numpy array back to a python list
a = np_a.tolist()
</snippet></ROW><ROW><id>14645790</id><snippet>In [209]: np_a
Out[209]:
array([[  0,   1,   2, ..., 252, 253, 254],
       [  0,   1,   2, ..., 252, 253, 254],
       [  0,   1,   2, ..., 252, 253, 254],
       ...,
       [  0,   1,   2, ..., 252, 253, 254],
       [  0,   1,   2, ..., 252, 253, 254],
       [  0,   1,   2, ..., 252, 253, 254]])

In [210]: np_a[np_a &gt; 252]  = 0

In [211]: np_a
Out[211]:
array([[  0,   1,   2, ..., 252,   0,   0],
       [  0,   1,   2, ..., 252,   0,   0],
       [  0,   1,   2, ..., 252,   0,   0],
       ...,
       [  0,   1,   2, ..., 252,   0,   0],
       [  0,   1,   2, ..., 252,   0,   0],
       [  0,   1,   2, ..., 252,   0,   0]])
</snippet></ROW><ROW><id>14645978</id><snippet>replace</snippet></ROW><ROW><id>14645978</id><snippet>lines =lines.replace("foo3\n","")
lines = lines.replace("foo5\n","")
</snippet></ROW><ROW><id>14646132</id><snippet>comp = [1, 2, 3] 
m = max(comp)

if comp[0] == m: 
    some action
if comp[1] == m: 
    some action
if comp[2] == m: 
    some action
</snippet></ROW><ROW><id>14646728</id><snippet>import re

a=["Britney spears", "red dog", "\xa2xe3"]

regex = re.compile('|'.join(re.escape(x) for x in a))

b=["cat","dog","red dog is stupid", "good stuff \xa2xe3", "awesome Britney spears"]

b = [regex.sub("",x) for x in b ]
print (b)  #['cat', 'dog', ' is stupid', 'good stuff ', 'awesome ']
</snippet></ROW><ROW><id>14646728</id><snippet>import re

a = ["Britney spears", "red dog", "\xa2xe3"]
b = ["cat","dog",
     "red dog is stupid", 
     "good stuff \xa2xe3", 
     "awesome Britney spears",
     "transferred dogcatcher"]

#This version leaves whitespace and will match between words.
regex = re.compile('|'.join(re.escape(x) for x in a))
c = [regex.sub("",x) for x in b ]
print (c) #['cat', 'dog', ' is stupid', 'good stuff ', 'awesome ', 'transfercatcher']

#This version strips whitespace from either end
# of the returned string
regex = re.compile('|'.join(r'\s*{}\s*'.format(re.escape(x)) for x in a))
c = [regex.sub("",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff', 'awesome', 'transfercatcher']

#This version will only match at word boundaries,
# but you lose the match with \xa2xe3 since it isn't a word
regex = re.compile('|'.join(r'\s*\b{}\b\s*'.format(re.escape(x)) for x in a))
c = [regex.sub("",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff \xa2xe3', 'awesome', 'transferred dogcatcher']


#This version finally seems to get it right.  It matches whitespace (or the start
# of the string) and then the "word" and then more whitespace (or the end of the 
# string).  It then replaces that match with nothing -- i.e. it removes the match 
# from the string.
regex = re.compile('|'.join(r'(?:\s+|^)'+re.escape(x)+r'(?:\s+|$)' for x in a))
c = [regex.sub("",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff', 'awesome', 'transferred dogcatcher']
</snippet></ROW><ROW><id>14646911</id><snippet>PdfPages</snippet></ROW><ROW><id>14646911</id><snippet>plt.clf()</snippet></ROW><ROW><id>14646911</id><snippet>fig.clf()</snippet></ROW><ROW><id>14646911</id><snippet>plt.figure(figsize=(6,2))
</snippet></ROW><ROW><id>14646911</id><snippet>plt.figure(0, figsize=(6,2))
</snippet></ROW><ROW><id>14646911</id><snippet>ax.axis('equal')</snippet></ROW><ROW><id>14646911</id><snippet>plt.axis('equal')</snippet></ROW><ROW><id>14646911</id><snippet>import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

pie_data = [[1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 0, 1, 2]]
pie_slice_labels = ['A', 'B', 'C', 'D']
pie_labels = ['1', '2', '3']

PDFfile = PdfPages('output.pdf')

for i in range(4):
    fig, axes = plt.subplots(ncols=len(pie_labels) + 1, figsize=(6,2))

    for ax, data, label in zip(axes, pie_data, pie_labels):
        wedges, labels = ax.pie(data)
        ax.set(title=label, aspect=1)

    # Instead of creating a dummy pie, just use the artists from the last one.
    axes[-1].legend(wedges, pie_slice_labels, loc='center', fontsize='small')
    axes[-1].axis('off')
    # Alternately, you could do something like this to place the legend. If you
    # use this, you should remove the +1 from ncols above. 
    # fig.legend(wedges, pie_slice_labels, loc='center right', fontsize='small')
    # fig.subplots_adjust(right=0.8) # Make room for the legend.

    PDFfile.savefig()

PDFfile.close()
</snippet></ROW><ROW><id>14646935</id><snippet>stdout</snippet></ROW><ROW><id>14646935</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>14646935</id><snippet>print('Enter the base path of the images: ', end='')
sys.stdout.flush()
</snippet></ROW><ROW><id>14646935</id><snippet>print()</snippet></ROW><ROW><id>14646935</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>14646935</id><snippet>stdout</snippet></ROW><ROW><id>14646935</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>14646935</id><snippet>stdout</snippet></ROW><ROW><id>14646935</id><snippet>input()</snippet></ROW><ROW><id>14646935</id><snippet>stdin</snippet></ROW><ROW><id>14646935</id><snippet>msg = 'Enter the base path of the images: '
try:
    # python 2
    path = raw_input(msg)
except NameError:
    # python 3
    path = input(msg)
</snippet></ROW><ROW><id>14646991</id><snippet>(?=...)</snippet></ROW><ROW><id>14646991</id><snippet>?=</snippet></ROW><ROW><id>14646991</id><snippet>a(?=b)</snippet></ROW><ROW><id>14646991</id><snippet>a</snippet></ROW><ROW><id>14646991</id><snippet>b</snippet></ROW><ROW><id>14646991</id><snippet>b</snippet></ROW><ROW><id>14646991</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>14646991</id><snippet>(?(id/name)yes-pattern|no-pattern)</snippet></ROW><ROW><id>14646991</id><snippet>id/name</snippet></ROW><ROW><id>14646991</id><snippet>yes-pattern</snippet></ROW><ROW><id>14646991</id><snippet>no-pattern</snippet></ROW><ROW><id>14647083</id><snippet>df.groupby([df.index.year, df.index.month, df.index.day]).transform(np.cumsum).resample('B', how='ohlc')
</snippet></ROW><ROW><id>14647083</id><snippet>df.groupby(pd.TimeGrouper('D')).transform(np.cumsum).resample('D', how='ohlc')
</snippet></ROW><ROW><id>14647416</id><snippet>ModelForm</snippet></ROW><ROW><id>14647416</id><snippet>type</snippet></ROW><ROW><id>14647416</id><snippet>ModelForm</snippet></ROW><ROW><id>14647416</id><snippet>    config_fields = ('book_type', 'is_featured', 'current_price__is_sale')
    # the below is an example, you need more work to construct the proper attrs
    attrs = dict((f, forms.SomeField) for f in config_fields)
    ConfigModelForm = type('DynamicModelForm', (forms.ModelForm,), attrs)

    class MyModelAdmin(admin.ModelAdmin):
        form = ConfigModelForm
</snippet></ROW><ROW><id>14647610</id><snippet>:botty!~botty@durrrrrrrrr JOIN :#channel
:retribution.sg.as.irchighway.net 353 botty = #channel :botty IlPalazzo-ojiisan @Nibelung 
:retribution.sg.as.irchighway.net 366 botty #channel :End of /NAMES list.
:retribution.sg.as.irchighway.net 353 botty = #channel :botty IlPalazzo-ojiisan @Nibelung 
:retribution.sg.as.irchighway.net 366 botty #channel :End of /NAMES list.
</snippet></ROW><ROW><id>14647647</id><snippet>squareform</snippet></ROW><ROW><id>14648142</id><snippet>class ScatterPlot:
    def __init__(self):
        #remove the following two lines
        self.canvas = FigureCanvas(self.figure)
        self.window.add(self.canvas)
</snippet></ROW><ROW><id>14648142</id><snippet>show()</snippet></ROW><ROW><id>14648142</id><snippet>def show(self):
    self.canvas = FigureCanvas(self.figure)
    self.window.add(self.canvas)
    self.window.show_all()
    self.is_hidden = False
</snippet></ROW><ROW><id>14648142</id><snippet>.destroy()</snippet></ROW><ROW><id>14648142</id><snippet>.show()</snippet></ROW><ROW><id>14648430</id><snippet>--ds=test_settings</snippet></ROW><ROW><id>14648430</id><snippet>--ds=...</snippet></ROW><ROW><id>14648430</id><snippet>[pytest]
DJANGO_SETTINGS_MODULE = test_settings
</snippet></ROW><ROW><id>14648430</id><snippet>--reuse-db</snippet></ROW><ROW><id>14648519</id><snippet>m2, m3, m5</snippet></ROW><ROW><id>14648519</id><snippet>hamming_numbers</snippet></ROW><ROW><id>14648519</id><snippet>integers</snippet></ROW><ROW><id>14648519</id><snippet>merge()</snippet></ROW><ROW><id>14648519</id><snippet>next()</snippet></ROW><ROW><id>14648519</id><snippet>2</snippet></ROW><ROW><id>14648519</id><snippet>m23</snippet></ROW><ROW><id>14648519</id><snippet>4(,6,8,...)</snippet></ROW><ROW><id>14648519</id><snippet>6(,9,12,...)</snippet></ROW><ROW><id>14648519</id><snippet>3</snippet></ROW><ROW><id>14648519</id><snippet>iter()</snippet></ROW><ROW><id>14648519</id><snippet>iter()</snippet></ROW><ROW><id>14648519</id><snippet>iter()</snippet></ROW><ROW><id>14648519</id><snippet>sieve()</snippet></ROW><ROW><id>14648519</id><snippet>sieve()</snippet></ROW><ROW><id>14648519</id><snippet>filter()</snippet></ROW><ROW><id>14648519</id><snippet>def merge(s1, s2):
  x1, x2 = next(s1), next(s2)
  while True:
    if x1 &lt; x2:
        yield x1
        x1 = next(s1)
    elif x1 &gt; x2:
        yield x2
        x2 = next(s2)
    else:
        yield x1
        x1, x2 = next(s1), next(s2)
</snippet></ROW><ROW><id>14648519</id><snippet>sieve()</snippet></ROW><ROW><id>14648519</id><snippet>def sieve(s):    # call as: sieve( integers_from(2))
    x = next(s)  
    yield x
    ps = sieve( integers_from(2))           # independent primes supply
    p = next(ps) 
    q = p*p       ; print((p,q))
    while True:
        x = next(s)
        while x&lt;q: 
            yield x
            x = next(s)
        # here x == q
        s = filter(lambda y,p=p: y % p, s)  # filter creation postponed 
        p = next(ps)                        #   until square of p seen in input
        q = p*p 
</snippet></ROW><ROW><id>14648519</id><snippet>filter()</snippet></ROW><ROW><id>14648595</id><snippet>timeit</snippet></ROW><ROW><id>14648595</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('a = 5')
0.03456282615661621
&gt;&gt;&gt; timeit.timeit('foo()', 'def foo(): a = 5')
0.14389896392822266
</snippet></ROW><ROW><id>14648595</id><snippet>foo</snippet></ROW><ROW><id>14648595</id><snippet>a = 5</snippet></ROW><ROW><id>14648595</id><snippet>foo</snippet></ROW><ROW><id>14648595</id><snippet>(arguments)</snippet></ROW><ROW><id>14648595</id><snippet>&gt;&gt;&gt; def foo():
...     pass
... 
&gt;&gt;&gt; def bar():
...     return foo()
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(bar)
  2           0 LOAD_GLOBAL              0 (foo)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE        
</snippet></ROW><ROW><id>14648595</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>14648595</id><snippet>foo</snippet></ROW><ROW><id>14648595</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>14648595</id><snippet>RETURN_VALUE</snippet></ROW><ROW><id>14648717</id><snippet>#Rajiv Ravishankar
#rravisha
#21-301 Assignment #1, Qns 4

from numpy import matrix
import itertools

def eligCheck(m):
    #We know certain properties of magic squares that can help identify if a 3x3 matrix is a magic square or not
    #These properties include the following checks listed below.
    #
    #
    #The main purpose of this function is to check is a 3x3 matrix is a magic square without having to add all the 
    #rows, columns and diagonals.
    flag=0
    #Check 1 if the matrix is indeed 4x4
    if (len(m)==4 and len(m[0])==4 and len(m[1])==4 and len(m[2])==4):
        flag=flag+1
    #Check 2 if the 2nd diagonal adds up
    if (m[0][3] + m[1][2] + m[2][1] + m[3][0] == 34):
        flag=flag+1
    #Checks 2 if the first diagonal adds up 
    if (m[0][0] + m[1][1] + m[2][2] + m[3][3] == 34):
        flag=flag+1
    #To save resources and increase efficency, only if all three checks return true will we add the rows and columns to check.      
    if (flag==3):
        return True
    else:
        return False

def elementAdder(m):
    #This function is to be called only AFTER eligCheck() returns TRUE for a given matrix.  Since a 4x4 matrix that satisfies the checks 
    #in eligCheck() does not mean that it is a magic square, we add each row, each column and both diagonals an see if the sum
    #is equal to 15.  Splitting into two function save processing power.
    #
    #
    #Checking if all rows add up to 15
    flag=0
    #Check 1 if row 1 adds up
    if (m[0][0]+m[0][1]+m[0][2]+m[0][3] == 34):
        flag=flag+1
    else:
        return False
    #Check 2 if row 2 adds up   
    if (m[1][0]+m[1][1]+m[1][2]+m[1][3] == 34):
        flag=flag+1
    else:
        return False    
    #Check 3 if row 3 adds up
    if (m[2][0]+m[2][1]+m[2][2]+m[2][3] == 34):
        flag=flag+1
    else:
        return False
    #Check if row 4 adds up
    if (m[3][0]+m[3][1]+m[3][2]+m[3][3] == 34):
        flag=flag+1
    else:
        return False    
    #Check 4 if column 1 adds up    
    if (m[0][0]+m[1][0]+m[2][0]+m[3][0] == 34):
        flag=flag+1
    else:
        return False
    #Check 5 if column 2 adds up    
    if (m[0][1]+m[1][1]+m[2][1]+m[3][1] == 34):
        flag=flag+1
    else:
        return False
    #Check 6 if column 3 adds up
    if (m[0][2]+m[1][2]+m[2][2]+m[3][2] == 34):
        flag=flag+1
    else:
        return False
    #Check 7 if column 4 adds up    
    if (m[0][3]+m[1][3]+m[2][3]+m[3][3] == 34):
        flag=flag+1
    else:
        return False
    #Note that diagonal checks have already been verified in eligCheck() represents the diagonal from left to right

    #The strategy here is to set flag as zero initially before the additiong checks and then run each check one after the other.  If a
    #check fails, the matrix is not a magic square.  For every check that passes, flag is incremented by 1.  Therefore, at the end of 
    #all the check, if flag == 8, it is added proof that the matrix is a magic square.  This step is redundant as the program has been 
    #written to stop checks as soon as a failed check is encountered as all checks need to be true for a magic square.
    if flag==8:
        print m
        return True
    else:
        print "**** FLAG ERROR: elementAdder(): Line 84 ***" 
        print m

def dimensionScaler(n, lst):
    #This function converts and returns a 1-D list to a 2-D list based on the order.  #Square matrixes only.
    #n is the order here and lst is a 1-D list.
    i=0
    j=0
    x=0
    #mat = [[]*n for x in xrange(n)]
    mat=[]
    for i in range (0,n):
        mat.append([])
        for j in range (0,n):
            if (j*n+i&lt;len(lst)):
                mat[i].append(lst[i*n+j])
    return mat

#mtrx=[]

def matrixGen():
#Brute forcing all possible 4x4 matrices according to the previous method will require 16!*32*16 bits or 1.07e6 GB of memory to be allocated in the RAM (impossible today)./, we 
#use an alternative methos to solve this problem.
#
#
#We know that for the sums of the diagonals will be 34 in magic squares of order 4, so we can make some assumtions of the corner element values 
#and also the middle 4 elements.  That is, the values of the diagonals.
#The strategy here is to assign one set of opposite corner elements as say 1 and 16 and the second as 13 and 4
#The remaining elements can be brute forced for combinations untill 5 magic squares are found.
    setPerms=itertools.permutations([2,3,5,6,7,8,9,10,11,12,14,15],12)
    final=[0]*16
    count=0
    #print final
    for i in setPerms:
        perm=list(i)
        setCorners=list(itertools.permutations([1,4,13,16],4))


        for j in range(0,len(setCorners)):
            final[0]=setCorners[j][0]
            final[1]=perm[0]
            final[2]=perm[1]
            final[3]=setCorners[j][1]
            final[4]=perm[2]
            final[5]=perm[3]
            final[6]=perm[4]
            final[7]=perm[5]
            final[8]=perm[6]
            final[9]=perm[7]
            final[10]=perm[8]
            final[11]=perm[9]
            final[12]=setCorners[j][2]
            final[13]=perm[10]
            final[14]=perm[11]
            final[15]=setCorners[j][3]
            if eligCheck(dimensionScaler(4,final))==True:
                elementAdder(dimensionScaler(4,final))

matrixGen()
</snippet></ROW><ROW><id>14648952</id><snippet>class UnionFind:
    """Union-find data structure. Items must be hashable."""

    def __init__(self):
        """Create a new empty union-find structure."""
        self.weights = {}
        self.parents = {}

    def __getitem__(self, obj):
        """X[item] will return the token object of the set which contains `item`"""

        # check for previously unknown object
        if obj not in self.parents:
            self.parents[obj] = obj 
            self.weights[obj] = 1
            return obj 

        # find path of objects leading to the root
        path = [obj]
        root = self.parents[obj]
        while root != path[-1]:
            path.append(root)
            root = self.parents[root]

        # compress the path and return
        for ancestor in path:
            self.parents[ancestor] = root
        return root

    def union(self, obj1, obj2):
        """Merges sets containing obj1 and obj2."""
        roots = [self[obj1], self[obj2]]
        heavier = max([(self.weights[r],r) for r in roots])[1]
        for r in roots:
            if r != heavier:
                self.weights[heavier] += self.weights[r]
                self.parents[r] = heavier
</snippet></ROW><ROW><id>14648952</id><snippet>groupTPL</snippet></ROW><ROW><id>14648952</id><snippet>def groupTPL(TPL, distance=1):
    U = UnionFind()

    for (i, x) in enumerate(TPL):
        for j in range(i + 1, len(TPL)):
            y = TPL[j]
            if max(abs(x[0] - y[0]), abs(x[1] - y[1])) &lt;= distance:
                U.union(x, y)

    disjSets = {}
    for x in TPL:
        s = disjSets.get(U[x], set())
        s.add(x)
        disjSets[U[x]] = s

    return [list(x) for x in disjSets.values()]
</snippet></ROW><ROW><id>14648952</id><snippet>&gt;&gt;&gt; groupTPL([(1, 1), (2, 1), (3, 2), (7, 5), (2, 7), (6, 4), (2, 3), (2, 6), (3, 1)])
[
 [(2, 7), (2, 6)], 
 [(6, 4), (7, 5)], 
 [(3, 2), (3, 1), (2, 3), (1, 1), (2, 1)]
]
</snippet></ROW><ROW><id>14648952</id><snippet>O(n^2)</snippet></ROW><ROW><id>14648970</id><snippet>&gt;&gt;&gt; txt = "mydrive/projects/test/version01"
&gt;&gt;&gt; txt.rfind('/')
21
</snippet></ROW><ROW><id>14648970</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; len(os.path.dirname(txt))
21
</snippet></ROW><ROW><id>14649188</id><snippet>product</snippet></ROW><ROW><id>14649188</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>14649188</id><snippet>from itertools import product
t_e_f = dict.fromkeys(product(tokens_e_set,tokens_f_set),1.0/len(tokens_e_set))
</snippet></ROW><ROW><id>14649853</id><snippet>results = myurl+str(mystring)</snippet></ROW><ROW><id>14649853</id><snippet>str()</snippet></ROW><ROW><id>14649853</id><snippet>print str(foo)</snippet></ROW><ROW><id>14649853</id><snippet>foo's</snippet></ROW><ROW><id>14649853</id><snippet>results = 'http://www.myurl.com/'+str(mystring)</snippet></ROW><ROW><id>14649853</id><snippet>mystring</snippet></ROW><ROW><id>14649853</id><snippet>'http://www.myurl.com/' + mystring</snippet></ROW><ROW><id>14649853</id><snippet>print "Pausing script for " + str(i) + " Seconds"</snippet></ROW><ROW><id>14649853</id><snippet>str()</snippet></ROW><ROW><id>14649853</id><snippet>print "foo", 1, "bar" does work. As do</snippet></ROW><ROW><id>14649853</id><snippet>and</snippet></ROW><ROW><id>14649946</id><snippet>C</snippet></ROW><ROW><id>14649946</id><snippet>__get__</snippet></ROW><ROW><id>14649946</id><snippet>X().f()</snippet></ROW><ROW><id>14649946</id><snippet>__get__</snippet></ROW><ROW><id>14649946</id><snippet>__get__</snippet></ROW><ROW><id>14649946</id><snippet>__call__</snippet></ROW><ROW><id>14649951</id><snippet>callable</snippet></ROW><ROW><id>14649951</id><snippet>callabe(object)</snippet></ROW><ROW><id>14649951</id><snippet>True</snippet></ROW><ROW><id>14649981</id><snippet>base.animal</snippet></ROW><ROW><id>14649981</id><snippet>_inherits</snippet></ROW><ROW><id>14649981</id><snippet>type</snippet></ROW><ROW><id>14649981</id><snippet>animal.base</snippet></ROW><ROW><id>14649981</id><snippet># This static list could also be replaced by a function
ANIMALS = [
    ('lion', 'Lion'),
    ('elephant', 'Elephant'),
]
class animal_base(osv.osv):
    _name = 'animal.base'
    _columns = {
         ...
         'type': fields.selection(ANIMALS, 'Type'), 
    }
</snippet></ROW><ROW><id>14649981</id><snippet>base.animals</snippet></ROW><ROW><id>14649981</id><snippet>base.lion</snippet></ROW><ROW><id>14649981</id><snippet>base.elephant</snippet></ROW><ROW><id>14649981</id><snippet>base.animal</snippet></ROW><ROW><id>14649981</id><snippet>_inherit</snippet></ROW><ROW><id>14649981</id><snippet>_inherits</snippet></ROW><ROW><id>14649981</id><snippet>animal.base</snippet></ROW><ROW><id>14649981</id><snippet>perform</snippet></ROW><ROW><id>14649981</id><snippet>def emit_sound(self, cr, uid, ids, context=None):
    for this in self.browse(cr, uid, ids, context):
       animal_registry = self.pool['animal.%s' % this.type]
       animal_ids = animal_registry.search(cr, uid, 
           [('base_id','=',this.id)], context)
       assert len(animal_ids) == 1, 'Chimera alert! ;-)'
       animal_registry.emit_sound(cr, uid, animal_ids, context)
</snippet></ROW><ROW><id>14649981</id><snippet>base.animal</snippet></ROW><ROW><id>14649981</id><snippet>base.animal</snippet></ROW><ROW><id>14649981</id><snippet>_inherit</snippet></ROW><ROW><id>14649981</id><snippet>_name</snippet></ROW><ROW><id>14649981</id><snippet>base.animal</snippet></ROW><ROW><id>14649981</id><snippet>fields.reference</snippet></ROW><ROW><id>14649981</id><snippet>subscription</snippet></ROW><ROW><id>14649981</id><snippet>doc_source</snippet></ROW><ROW><id>14649981</id><snippet>fields.reference</snippet></ROW><ROW><id>14649981</id><snippet>browse</snippet></ROW><ROW><id>14649981</id><snippet>read</snippet></ROW><ROW><id>14649981</id><snippet>search</snippet></ROW><ROW><id>14649981</id><snippet>'model,id'</snippet></ROW><ROW><id>14649981</id><snippet>many2one</snippet></ROW><ROW><id>14650022</id><snippet>http://example.com/cgi-bin/myapp.py</snippet></ROW><ROW><id>14650022</id><snippet>.htaccess</snippet></ROW><ROW><id>14650022</id><snippet>http://example.com/</snippet></ROW><ROW><id>14650022</id><snippet>RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f # Don't interfere with static files
RewriteRule ^(.*)$ /cgi-bin/myapp.py/$1 [L]
</snippet></ROW><ROW><id>14650068</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14650068</id><snippet>&gt;&gt;&gt; import  ast
&gt;&gt;&gt; ast.literal_eval("1")
1
&gt;&gt;&gt; ast.literal_eval("0")
0
&gt;&gt;&gt; ast.literal_eval("True")
True
&gt;&gt;&gt; ast.literal_eval("False")
False
&gt;&gt;&gt; ast.literal_eval("'foobar'")
'foobar'
&gt;&gt;&gt; ast.literal_eval("1.2")
1.2
&gt;&gt;&gt; ast.literal_eval("1.2e3")
1200.0
&gt;&gt;&gt; ast.literal_eval("1,2")
(1, 2)
&gt;&gt;&gt; ast.literal_eval("[1,2]")
[1, 2]
&gt;&gt;&gt; ast.literal_eval("[1,2,(1,2)]")
[1, 2, (1, 2)]
&gt;&gt;&gt; ast.literal_eval("1f")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/ast.py", line 49, in literal_eval
    node_or_string = parse(node_or_string, mode='eval')
  File "/usr/local/lib/python2.7/ast.py", line 37, in parse
    return compile(source, filename, mode, PyCF_ONLY_AST)
  File "&lt;unknown&gt;", line 1
    1f
     ^
SyntaxError: unexpected EOF while parsing
</snippet></ROW><ROW><id>14650076</id><snippet>mimetype = 'text/csv; charset=x-EBCDIC-KoreanAndKoreanExtended'
</snippet></ROW><ROW><id>14650414</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>14650414</id><snippet>if __name__ == '__main__':
    import sys

    main(sys.argv)
</snippet></ROW><ROW><id>14650439</id><snippet>import numpy as np

class VolumeViewer(object):
    def __init__(self, raw_dicom_stack, nframes, ds):

        self.raw_dicom_stack = raw_dicom_stack
        self.nframes = nframes
        self.summed_image = np.zeros((self.raw_dicom_stack[0].shape[0],self.raw_dicom_stack[0].shape[1]))
        self.frame = 0
        self.frames_delete = 0
        self.ds = ds
        self.reset_stack = raw_dicom_stack


        # Plot the first slice of the image
        self.fig, self.ax = plt.subplots()
        self.im = self.ax.imshow(np.array(raw_dicom_stack[0]), cmap = cm.gray)


    def update(self, value):
        self.frame = int(self.nframes * value)
        # Update the image data
        dat = np.array(self.raw_dicom_stack[self.frame])
        self.im.set_data(dat)
        self.im.set_clim([dat.min(), dat.max()])
        # Redraw the plot
        self.fig.canvas.draw()      

    def add(self,event):
        if self.query_add == True:
            print "Image series has already summed"
        else:
            for x in range(self.nframes):
                self.summed_image += self.raw_dicom_stack[x]
            del self.raw_dicom_stack[:]
            self.raw_dicom_stack.append(self.summed_image[:,:])
            self.nframes = len(self.raw_dicom_stack)

            # Update the image data
            dat = np.array(self.raw_dicom_stack[0])
            self.im.set_data(dat)
            self.slider.reset()
            self.im.set_clim([dat.min(), dat.max()])
            # Redraw the plot
            self.fig.canvas.draw()

            self.query_add = True
            #rezero summed_image
            #summed_image = np.zeros((self.summed_image.shape[0],self.summed_image.shape[1]))


    def show(self):
        plt.show()

    def reset(self, event):

        #self.summed_image = np.zeros((self.raw_dicom_stack[0].shape[0],self.raw_dicom_stack[0].shape[1]))
        #self.query_register = False
        #self.query_add = False
        self.__init__(self.reset_stack, self.nframes, self.ds)

    def quit(self,event):
        quit()

if __name__ == '__main__':
    viewer = VolumeViewer(np.zeros((2,10,10)), 4, None)
    viewer.reset()
</snippet></ROW><ROW><id>14650555</id><snippet>timeit</snippet></ROW><ROW><id>14650555</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>14650555</id><snippet>timeit</snippet></ROW><ROW><id>14650555</id><snippet>timeit</snippet></ROW><ROW><id>14650555</id><snippet>print timeit("pE1test2()","from __main__ import PE1test2",number=1)
</snippet></ROW><ROW><id>14650555</id><snippet>timeit</snippet></ROW><ROW><id>14650701</id><snippet>&gt;&gt;&gt; a
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])
&gt;&gt;&gt; a[:,1]
array([ 2,  5,  8, 11])
</snippet></ROW><ROW><id>14650701</id><snippet>a[:]</snippet></ROW><ROW><id>14650701</id><snippet>a[:][1]</snippet></ROW><ROW><id>14650701</id><snippet>a</snippet></ROW><ROW><id>14650938</id><snippet>finalJson = []
</snippet></ROW><ROW><id>14650938</id><snippet>finalJson = {}
</snippet></ROW><ROW><id>14650945</id><snippet>import Tkinter

def save_data(form):
    for widget in form:
        print widget.get()

def load_data(id_value, form):
    for i, widget in enumerate(form):
        widget.delete(0, 'end')
        widget.insert(0, id_value * (i + 2))

root = Tkinter.Tk()

lbl_id = Tkinter.Label(text=u'ID')
entry_id = Tkinter.Entry()
entry_load = Tkinter.Button(text=u'Load')
lbl_field1 = Tkinter.Label(text=u'Field 1')
entry_field1 = Tkinter.Entry()
entry_save = Tkinter.Button(text=u'Save')

lbl_id.grid(row=0, column=0)
entry_id.grid(row=0, column=1)
entry_load.grid(row=0, column=2)
lbl_field1.grid(row=1, column=0)
entry_field1.grid(row=1, column=1)
entry_save.grid(row=2, column=2)

form = [entry_field1]
entry_load['command'] = lambda: load_data(entry_id.get(), form)
entry_save['command'] = lambda: save_data(form)

root.mainloop()
</snippet></ROW><ROW><id>14651467</id><snippet>i</snippet></ROW><ROW><id>14651467</id><snippet>for shot in reversed(ShotArray):
    shot.x += 10
    windowSurface.blit(ShotImage, shot)
    if shot.x &gt; WINDOWWIDTH:
        ShotArray.remove(shot)
</snippet></ROW><ROW><id>14651774</id><snippet>move()</snippet></ROW><ROW><id>14651774</id><snippet>spare()</snippet></ROW><ROW><id>14651774</id><snippet>hanoi()</snippet></ROW><ROW><id>14651774</id><snippet>class Hanoi(object):

    # snip

    def move(self, src, dst):

        # your logic goes here
        # example of a recursive call
        self.move(foo, bar)
</snippet></ROW><ROW><id>14652116</id><snippet># USAGE: 'python setup.py py2exe'
from distutils.core import setup
import py2exe, sys

sys.argv.append('py2exe')

setup(
    data_files=[
                ('.','viewer.ico']),
                ('insert qt path here', ['a.dll','b.dll', 'c.dll'])
               ],

    options={'py2exe':{
                       'bundle_files':   1, # 3 - Don't pack, 2 - Pack all but interpreter, 1 - pack all.
                       'unbuffered':     True,
                       'optimize':       2,
                       'compressed':     1
                      },
            }, 

    windows=[
             {
              'script':'viewer.py',
             },
            ],

    zipfile = None# None = All in EXE does not work with tcl/ttk gui's, Else 'shared.lib' make a lib file with name specified.
)
</snippet></ROW><ROW><id>14652274</id><snippet>article.title</snippet></ROW><ROW><id>14652274</id><snippet>article.content</snippet></ROW><ROW><id>14652274</id><snippet>related_name</snippet></ROW><ROW><id>14652274</id><snippet>class Tag(models.Model):
    article = models.ForeignKey(Article, related_name='tags')
</snippet></ROW><ROW><id>14652274</id><snippet>from django.db.models import Q

# supposed input
phrase = 'my search string'
tags = ['tag1', 'tag2']

articles = Article.objects.filter(
   Q(title__icontains=phrase) |
   Q(content__icontains=phrase)) \
   .filter(tags__content__in=tags) \
   .annotate(num_tags=Count('tags')) \
   .filter(num_tags=len(tags))
</snippet></ROW><ROW><id>14652535</id><snippet>import re

smiley_pattern = '^(:\(|:\))+$' # matches only the smileys ":)" and ":("

def test_match(s):
    print 'Value: %s; Result: %s' % (
        s,
        'Matches!' if re.match(smiley_pattern, s) else 'Doesn\'t match.'
    )

should_match = [
    ':)',   # Single smile
    ':(',   # Single frown
    ':):)', # Two smiles
    ':(:(', # Two frowns
    ':):(', # Mix of a smile and a frown
]
should_not_match = [
    '',         # Empty string
    ':(foo',    # Extraneous characters appended
    'foo:(',    # Extraneous characters prepended
    ':( :(',    # Space between frowns
    ':( (',     # Extraneous characters and space appended
    ':(('       # Extraneous duplicate of final character appended
]

print('The following should all match:')
for x in should_match: test_match(x);

print('')   # Newline for output clarity

print('The following should all not match:')
for x in should_not_match: test_match(x);
</snippet></ROW><ROW><id>14652535</id><snippet>(:\()</snippet></ROW><ROW><id>14652535</id><snippet>(</snippet></ROW><ROW><id>14652535</id><snippet>:\(</snippet></ROW><ROW><id>14652535</id><snippet>:</snippet></ROW><ROW><id>14652535</id><snippet>\</snippet></ROW><ROW><id>14652535</id><snippet>(</snippet></ROW><ROW><id>14652535</id><snippet>:</snippet></ROW><ROW><id>14652535</id><snippet>\(</snippet></ROW><ROW><id>14652535</id><snippet>)</snippet></ROW><ROW><id>14652535</id><snippet>^(:\(|:\))+$</snippet></ROW><ROW><id>14652535</id><snippet>^</snippet></ROW><ROW><id>14652535</id><snippet>$</snippet></ROW><ROW><id>14652535</id><snippet>^</snippet></ROW><ROW><id>14652535</id><snippet>(:\(|:\))+</snippet></ROW><ROW><id>14652535</id><snippet>$</snippet></ROW><ROW><id>14652535</id><snippet>(</snippet></ROW><ROW><id>14652535</id><snippet>)</snippet></ROW><ROW><id>14652535</id><snippet>+</snippet></ROW><ROW><id>14652535</id><snippet>^</snippet></ROW><ROW><id>14652535</id><snippet>(</snippet></ROW><ROW><id>14652535</id><snippet>:\(|:\)</snippet></ROW><ROW><id>14652535</id><snippet>)</snippet></ROW><ROW><id>14652535</id><snippet>+</snippet></ROW><ROW><id>14652535</id><snippet>$</snippet></ROW><ROW><id>14652535</id><snippet>|</snippet></ROW><ROW><id>14652535</id><snippet>^</snippet></ROW><ROW><id>14652535</id><snippet>(</snippet></ROW><ROW><id>14652535</id><snippet>:</snippet></ROW><ROW><id>14652535</id><snippet>\(</snippet></ROW><ROW><id>14652535</id><snippet>|</snippet></ROW><ROW><id>14652535</id><snippet>:</snippet></ROW><ROW><id>14652535</id><snippet>\)</snippet></ROW><ROW><id>14652535</id><snippet>)</snippet></ROW><ROW><id>14652535</id><snippet>+</snippet></ROW><ROW><id>14652535</id><snippet>$</snippet></ROW><ROW><id>14652663</id><snippet>event_id</snippet></ROW><ROW><id>14652663</id><snippet>e.event_pid.event_id</snippet></ROW><ROW><id>14652880</id><snippet>__init__()</snippet></ROW><ROW><id>14652880</id><snippet>__len__()</snippet></ROW><ROW><id>14652880</id><snippet>__getitem__()</snippet></ROW><ROW><id>14652880</id><snippet>__iter__()</snippet></ROW><ROW><id>14652901</id><snippet>numpy</snippet></ROW><ROW><id>14652901</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x, y = np.loadtxt('data.txt', unpack=True)
&gt;&gt;&gt; bins = np.arange(10+1)
&gt;&gt;&gt; totals, edges = np.histogram(x, weights=y, bins=bins)
&gt;&gt;&gt; totals
array([  324.,  1578.,   227.,     0.,     0.,     0.,     0.,     0.,
           0.,     0.])
</snippet></ROW><ROW><id>14652901</id><snippet>&gt;&gt;&gt; totals/np.diff(bins)
array([  324.,  1578.,   227.,     0.,     0.,     0.,     0.,     0.,
           0.,     0.])
</snippet></ROW><ROW><id>14652901</id><snippet>&gt;&gt;&gt; counts, edges = np.histogram(x, bins=bins)
&gt;&gt;&gt; counts
array([4, 6, 3, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>14652939</id><snippet>MyIterator.parse</snippet></ROW><ROW><id>14652939</id><snippet>class MyIterator:
    cur_word = ''
    def parse(self):
        data = [('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)]
        for index in range(1,3):
            (word, num) = data[index]
            self.cur_word = word
            yield self.unique_str(num)

    def unique_str(self, num):
        data = ['a', 'b']
        for d in data:
            yield "%s-%d-%s" % (self.cur_word, num, d)


miter = MyIterator()
parse = miter.parse()
for ustrs in parse:
    for ustr in ustrs:
        print ustr
</snippet></ROW><ROW><id>14652939</id><snippet>cur_word = word</snippet></ROW><ROW><id>14652939</id><snippet>self.cur_word = word</snippet></ROW><ROW><id>14652939</id><snippet>parse</snippet></ROW><ROW><id>14652967</id><snippet>ndb.Model._kind_map</snippet></ROW><ROW><id>14652967</id><snippet>def query_to_model(query):
  return ndb.Model._kind_map[query.name]
</snippet></ROW><ROW><id>14652968</id><snippet>setup_test_environment</snippet></ROW><ROW><id>14652968</id><snippet>pip</snippet></ROW><ROW><id>14652968</id><snippet>keep_database.py</snippet></ROW><ROW><id>14652968</id><snippet>setup_test_environment</snippet></ROW><ROW><id>14652968</id><snippet>from django.test.utils import setup_test_environment</snippet></ROW><ROW><id>14652968</id><snippet>pip</snippet></ROW><ROW><id>14652968</id><snippet>setup.py</snippet></ROW><ROW><id>14653208</id><snippet>soup = BeautifulSoup(webpage,"html.parser")
</snippet></ROW><ROW><id>14653248</id><snippet>cd</snippet></ROW><ROW><id>14653248</id><snippet>(cd /Users/username/Documents/workspace/programfolder/src/ &amp;&amp; python ProgramToRun.py)
</snippet></ROW><ROW><id>14653248</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>14653248</id><snippet>;</snippet></ROW><ROW><id>14653248</id><snippet>Documents/workspace/programfolder/src/</snippet></ROW><ROW><id>14653248</id><snippet>ProgramToRun.py</snippet></ROW><ROW><id>14653248</id><snippet>import sys
sys.path.append("/Users/username/Documents/workspace/programfolder/src/")
</snippet></ROW><ROW><id>14653401</id><snippet>import urllib2
from bs4 import BeautifulSoup

wfo = list()

def main():
    wfo = [i.strip() for i in open('C:\Python27\wfo.txt') if i[:-1]]
    soup = BeautifulSoup(urllib2.urlopen('http://mesonet.agron.iastate.edu/cow/?syear=2009&amp;smonth=9&amp;sday=12&amp;shour=12&amp;eyear=2012&amp;emonth=9&amp;eday=12&amp;ehour=12&amp;wfo=ABQ&amp;wtype%5B%5D=TO&amp;hail=1.00&amp;lsrbuffer=15&amp;ltype%5B%5D=T&amp;wind=58').read())
    elements = soup.find_all("span")
    find_verify = soup.find_all('th')

    far= float(elements[1].text)
    pod= float(elements[2].text)
    verified = (find_verify[13].text[:-1])
</snippet></ROW><ROW><id>14653419</id><snippet>env.reject_unknown_hosts</snippet></ROW><ROW><id>14653419</id><snippet>False</snippet></ROW><ROW><id>14653419</id><snippet>env.disable_known_hosts = True</snippet></ROW><ROW><id>14653503</id><snippet>my_file.log</snippet></ROW><ROW><id>14653503</id><snippet>heroku logs</snippet></ROW><ROW><id>14653503</id><snippet>s3</snippet></ROW><ROW><id>14653755</id><snippet>ZipFile.extract()</snippet></ROW><ROW><id>14653755</id><snippet>ZipFile.open()</snippet></ROW><ROW><id>14653755</id><snippet>open()</snippet></ROW><ROW><id>14653755</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>14653755</id><snippet>ZipFile</snippet></ROW><ROW><id>14653755</id><snippet>if PythonVersion &lt; 2.6: # obviously not how it's done
  def myextract(self, member, path=None, pwd=None):
     ...
  zipfile.ZipFile.extract = myextract
</snippet></ROW><ROW><id>14653897</id><snippet>itertools</snippet></ROW><ROW><id>14653897</id><snippet>from itertools import takewhile
l = takewhile(lambda x: x &lt; 10000, generate())
</snippet></ROW><ROW><id>14653897</id><snippet>list()</snippet></ROW><ROW><id>14653897</id><snippet>l = list(takewhile(lambda x: x &lt; 10000, generate()))
</snippet></ROW><ROW><id>14653897</id><snippet>l = []
for x in generate():
    if x &lt; 10000:
        l.append(x)
    else:
        break
</snippet></ROW><ROW><id>14654076</id><snippet>mypackage.myothermodule</snippet></ROW><ROW><id>14654076</id><snippet>some_function</snippet></ROW><ROW><id>14654076</id><snippet>@patch('mypackage.myothermodule.some_function')
</snippet></ROW><ROW><id>14654076</id><snippet>mypackage.myothermodule</snippet></ROW><ROW><id>14654076</id><snippet>import mypackage.myothermodule
reload(mypackage.myothermodule)
</snippet></ROW><ROW><id>14654287</id><snippet>ctypes</snippet></ROW><ROW><id>14654287</id><snippet>win32gui</snippet></ROW><ROW><id>14654287</id><snippet>hwnd</snippet></ROW><ROW><id>14654287</id><snippet>ctypes</snippet></ROW><ROW><id>14654287</id><snippet>LP_c_long</snippet></ROW><ROW><id>14654287</id><snippet>win32gui.MoveWindow</snippet></ROW><ROW><id>14654287</id><snippet>ctypes.windll.user32.MoveWindow(titles[5][0], 0, 0, 760, 500, True)
</snippet></ROW><ROW><id>14654287</id><snippet>win32gui.MoveWindow</snippet></ROW><ROW><id>14654287</id><snippet>import win32gui

def enumHandler(hwnd, lParam):
    if win32gui.IsWindowVisible(hwnd):
        if 'Stack Overflow' in win32gui.GetWindowText(hwnd):
            win32gui.MoveWindow(hwnd, 0, 0, 760, 500, True)

win32gui.EnumWindows(enumHandler, None)
</snippet></ROW><ROW><id>14654489</id><snippet>for elem in tree.xpath("//div[@id='slider1']"):
</snippet></ROW><ROW><id>14654489</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; url = 'http://www.tv3.ie/3player'
&gt;&gt;&gt; data = urllib2.urlopen(url)
&gt;&gt;&gt; parser = lxml.etree.HTMLParser()
&gt;&gt;&gt; tree = lxml.etree.parse(data,parser)
&gt;&gt;&gt; elem = tree.xpath("//div[@id='slider1']")
&gt;&gt;&gt; elem[0].attrib
{'style': 'position: relative;', 'id': 'slider1'}
</snippet></ROW><ROW><id>14654489</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>14654489</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>14654489</id><snippet>&gt;&gt;&gt; for elem in tree.xpath("//div[@id='slider1']//div[@id='gridshow']"):
...    for elem_a in elem.xpath("./a"):
...       for elem_img in elem_a.xpath("./img"):
...          print '&lt;A&gt; HREF=%s'%(elem_a.attrib['href'])
...          print '&lt;IMG&gt; ALT="%s"'%(elem_img.attrib['alt'])
&lt;A&gt; HREF=/3player/show/392/58784/1/Tallafornia
&lt;IMG&gt; ALT="3player | Tallafornia, 01/02/2013. A fresh romance blossoms in the Tallafornia house. Marc challenges Cormac to a 'bench off' in the gym"
&lt;A&gt; HREF=/3player/show/46/58765/1/Coronation-Street
&lt;IMG&gt; ALT="3player | Coronation Street, 01/02/2013. Tyrone bumps into Kirsty in the street and tries to take Ruby from her pram"
../..
</snippet></ROW><ROW><id>14654622</id><snippet>x.__class__</snippet></ROW><ROW><id>14654622</id><snippet>'__dict__' in dir(x)</snippet></ROW><ROW><id>14654622</id><snippet>hasattr(x, '__slots__')</snippet></ROW><ROW><id>14654622</id><snippet>def is_instance_userdefined_and_newclass(inst):
    cls = inst.__class__
    if hasattr(cls, '__class__'):
        return ('__dict__' in dir(cls) or hasattr(cls, '__slots__'))
    return False
</snippet></ROW><ROW><id>14654622</id><snippet>&gt;&gt;&gt; class A: pass
... 
&gt;&gt;&gt; class B(object): pass
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; is_instance_userdefined_and_newclass(1)
False
&gt;&gt;&gt; is_instance_userdefined_and_newclass(a)
False
&gt;&gt;&gt; is_instance_userdefined_and_newclass(b)
True
</snippet></ROW><ROW><id>14655200</id><snippet>k</snippet></ROW><ROW><id>14655200</id><snippet>v</snippet></ROW><ROW><id>14655200</id><snippet>a = {k: v for k, v in sample.iteritems() if v}
</snippet></ROW><ROW><id>14655200</id><snippet>None</snippet></ROW><ROW><id>14655200</id><snippet>a = {k: v for k, v in sample.iteritems() if v is not None}
</snippet></ROW><ROW><id>14655200</id><snippet>items()</snippet></ROW><ROW><id>14655200</id><snippet>a = {k: v for k, v in sample.items() if v}
</snippet></ROW><ROW><id>14655200</id><snippet>&gt;&gt;&gt; sample = { 'a':1 , 'b':2 , 'c':3 , 'd':None , 'e':None }
&gt;&gt;&gt; {k: v for k, v in sample.iteritems() if v}
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>14655324</id><snippet>.timetuple()</snippet></ROW><ROW><id>14655324</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14655324</id><snippet>time.mktime()</snippet></ROW><ROW><id>14655324</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dt = datetime.datetime(2008, 7, 31, 21, 42, 52)
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.mktime(dt.timetuple())
1217533372.0
</snippet></ROW><ROW><id>14655402</id><snippet>&gt;&gt;&gt; a = ('helloWorld', 20)
&gt;&gt;&gt; a[1]
20
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14655403</id><snippet>site: www.example.com
&lt;p&gt; lorem ipsum &lt;/p&gt;
</snippet></ROW><ROW><id>14655403</id><snippet>p</snippet></ROW><ROW><id>14655403</id><snippet>id</snippet></ROW><ROW><id>14655403</id><snippet>id="scrollhere"</snippet></ROW><ROW><id>14655403</id><snippet>site: www.example.com
&lt;p id="scrollhere" &gt; lorem ipsum &lt;/p&gt;
</snippet></ROW><ROW><id>14655403</id><snippet>www.example.com/#scrollhere</snippet></ROW><ROW><id>14655444</id><snippet>for i in [0,1,4]:
    print i
</snippet></ROW><ROW><id>14655444</id><snippet>i = 0
while i &lt; 5:
    if i==2:
        i=i+2
    print i
    i = i + 1
</snippet></ROW><ROW><id>14655504</id><snippet>import time
lastsave = 0
def SaveEvent(data):
    # do what you need to save it
    ...


# I'm assuming there's some sort of event loop that 
# detects new events and directs them to some HandleEvent function

def HandleEvent(data):
    global lastsave
    if time.time() - lastsave &gt; 300: 
    # this is in seconds, so 5 minutes = 300 seconds
        lastsave = time.time()
        SaveEvent(data)
</snippet></ROW><ROW><id>14655504</id><snippet>SaveEvent</snippet></ROW><ROW><id>14655517</id><snippet>WorkingDir</snippet></ROW><ROW><id>14655517</id><snippet>WorkingDir</snippet></ROW><ROW><id>14655517</id><snippet>Filename</snippet></ROW><ROW><id>14655517</id><snippet>[Icons]
Name: "{group}\My Program"; Filename: "{app}\MYPROG.EXE"; WorkingDir: "{app}"
</snippet></ROW><ROW><id>14655645</id><snippet>def normalized(v):
    return v/np.sqrt( np.dot(v,v))
def ortho_proj_vec(v, uhat ):
    '''Returns the projection of the vector v  on the subspace
    orthogonal to uhat (which must be a unit vector) by subtracting off
    the appropriate multiple of uhat.
    i.e. dot( retval, uhat )==0
    '''
    return v-np.dot(v,uhat)*uhat

def ortho_proj_array( Varray, uhat ):
     ''' Compute the orhogonal projection for an entire array of vectors.
     @arg Varray:  is an array of vectors, each row is one vector
          (i.e. Varray.shape[1]==len(uhat)).
     @arg uhat: a unit vector
     @retval : an array (same shape as Varray), where each vector
               has had the component parallel to uhat removed.
               postcondition: np.dot( retval[i,:], uhat) ==0.0
               for all i. 
    ''' 
    return Varray-np.outer( np.dot( Varray, uhat), uhat )




# We need to ensure that the vectors defining the subspace are unit norm
v1hat=normalized( v1 )

# now to deal with v2, we need to project it into the subspace
# orhogonal to v1, and normalize it
v2hat=normalized( ortho_proj(v2, v1hat ) )
# TODO: if np.dot( normalized(v2), v1hat) ) is close to 1.0, we probably
# have an ill-conditioned system (the vectors are close to parallel)



# Act on each of your data vectors with the projection matrix,
# take the norm of the resulting vector.
result=np.zeros( M.shape[0], dtype=M.dtype )
for idx in xrange( M.shape[0] ):
    tmp=ortho_proj_vec( ortho_proj_vec(M[idx,:], v1hat), v2hat )             
    result[idx]=np.sqrt(np.dot(tmp,tmp))

 # The preceeding loop could be avoided via
 #tmp=orhto_proj_array( ortho_proj_array( M, v1hat), v2hat )
 #result=np.sum( tmp**2, axis=-1 )
 # but this results in many copies of matrices that are the same 
 # size as M, so, initially, I prefer the loop approach just on
 # a memory usage basis.
</snippet></ROW><ROW><id>14655645</id><snippet>np.dot(v1hat, v1hat.T)==1</snippet></ROW><ROW><id>14655645</id><snippet>np.dot(v2hat,v2hat.T)==1</snippet></ROW><ROW><id>14655645</id><snippet>np.dot(v1hat, v2hat)==0</snippet></ROW><ROW><id>14655778</id><snippet>join</snippet></ROW><ROW><id>14655778</id><snippet>df1.join([df2, df3, ..., df7000], how='outer')
</snippet></ROW><ROW><id>14655778</id><snippet>df1 = pd.DataFrame([[1, 2]], columns=['a', 'b'])
df2 = pd.DataFrame([[3, 4]], index=[1], columns=['c', 'd'])
df3 = pd.DataFrame([[5, 6], [7, 8]], columns=['e', 'f'])

In [4]: df1.join([df2, df3], how='outer')
Out[4]: 
    a   b   c   d  e  f
0   1   2 NaN NaN  5  6
1 NaN NaN   3   4  7  8
</snippet></ROW><ROW><id>14655778</id><snippet>'Date'</snippet></ROW><ROW><id>14655778</id><snippet>set_index</snippet></ROW><ROW><id>14655778</id><snippet>df1.set_index('Date', inplace=True)
</snippet></ROW><ROW><id>14655910</id><snippet>call(["net", "use", ":q", '"http://na.com/DMP/DMP/programming/"'])
</snippet></ROW><ROW><id>14655910</id><snippet>":q"</snippet></ROW><ROW><id>14655910</id><snippet>"q:"</snippet></ROW><ROW><id>14655910</id><snippet>net</snippet></ROW><ROW><id>14655910</id><snippet>:q</snippet></ROW><ROW><id>14655910</id><snippet>'"http://na.com/DMP/DMP/programming/"'</snippet></ROW><ROW><id>14655910</id><snippet>'http://na.com/DMP/DMP/programming/'</snippet></ROW><ROW><id>14655910</id><snippet>subprocess</snippet></ROW><ROW><id>14655910</id><snippet>CreateProcess</snippet></ROW><ROW><id>14655910</id><snippet>net</snippet></ROW><ROW><id>14655910</id><snippet>"http:</snippet></ROW><ROW><id>14655910</id><snippet>"http</snippet></ROW><ROW><id>14655910</id><snippet>system</snippet></ROW><ROW><id>14655910</id><snippet>subprocess</snippet></ROW><ROW><id>14655910</id><snippet>CreateProcess</snippet></ROW><ROW><id>14655910</id><snippet>subprocess</snippet></ROW><ROW><id>14655910</id><snippet>exec</snippet></ROW><ROW><id>14655910</id><snippet>call("net use g: http://na.com/DMP/DMP/programming/")
</snippet></ROW><ROW><id>14656093</id><snippet>gzip.open()</snippet></ROW><ROW><id>14656093</id><snippet>readlines()</snippet></ROW><ROW><id>14656093</id><snippet>malloc</snippet></ROW><ROW><id>14656093</id><snippet>readlines</snippet></ROW><ROW><id>14656093</id><snippet>for line in f:
</snippet></ROW><ROW><id>14656093</id><snippet>file</snippet></ROW><ROW><id>14656093</id><snippet>list</snippet></ROW><ROW><id>14656093</id><snippet>readlines</snippet></ROW><ROW><id>14656093</id><snippet>list</snippet></ROW><ROW><id>14656093</id><snippet>list</snippet></ROW><ROW><id>14656093</id><snippet>gzip.open()</snippet></ROW><ROW><id>14656093</id><snippet>for line in f: pass</snippet></ROW><ROW><id>14656093</id><snippet>gzip.close()</snippet></ROW><ROW><id>14656093</id><snippet>for line in f.readlines(): pass</snippet></ROW><ROW><id>14656146</id><snippet>globals</snippet></ROW><ROW><id>14656146</id><snippet>locals</snippet></ROW><ROW><id>14656146</id><snippet>exec</snippet></ROW><ROW><id>14656146</id><snippet>exec</snippet></ROW><ROW><id>14656146</id><snippet>rptParam</snippet></ROW><ROW><id>14656146</id><snippet>v</snippet></ROW><ROW><id>14656146</id><snippet>def rptParam(v, ...):
    ...

...

            print 'tstIterExec: perturb', param, seedTup
            rptParam(**currContext)
</snippet></ROW><ROW><id>14656421</id><snippet>get_access_plist()</snippet></ROW><ROW><id>14656421</id><snippet>propfaid = h5py.h5p.create(h5py.h5p.FILE_ACCESS)
settings = list(propfaid.get_cache())
print(settings)
# [0, 521, 1048576, 0.75]

settings[2] *= 5
propfaid.set_cache(*settings)
settings = propfaid.get_cache()
print(settings)
# (0, 521, 5242880, 0.75)
</snippet></ROW><ROW><id>14656421</id><snippet>import contextlib
with contextlib.closing(h5py.h5f.open(
                        filename, flags=h5py.h5f.ACC_RDWR, fapl=propfaid)) as fid:
    # &lt;h5py.h5f.FileID object at 0x9abc694&gt;
    settings = list(fid.get_access_plist().get_cache())
    print(settings)
    # [0, 521, 5242880, 0.75]
</snippet></ROW><ROW><id>14656421</id><snippet>fid</snippet></ROW><ROW><id>14656421</id><snippet>fid</snippet></ROW><ROW><id>14656421</id><snippet>h5py.File</snippet></ROW><ROW><id>14656421</id><snippet>    f = h5py.File(fid)
    print(f.id.get_access_plist().get_cache())
    # (0, 521, 5242880, 0.75)
</snippet></ROW><ROW><id>14656421</id><snippet>import h5py
import contextlib

filename = '/tmp/foo.hdf5'
propfaid = h5py.h5p.create(h5py.h5p.FILE_ACCESS)
settings = list(propfaid.get_cache())
settings[2] *= 5
propfaid.set_cache(*settings)
with contextlib.closing(h5py.h5f.open(filename, fapl=propfaid)) as fid:
    f = h5py.File(fid)
</snippet></ROW><ROW><id>14656489</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; a = json.loads('["foo", {"bar": ["baz", null, 1.0, 2]}]')
&gt;&gt;&gt; a
[u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
&gt;&gt;&gt; a[0]
u'foo'
&gt;&gt;&gt; a[1]
{u'bar': [u'baz', None, 1.0, 2]}
&gt;&gt;&gt; a[1]['bar']
[u'baz', None, 1.0, 2]
&gt;&gt;&gt;&gt;&gt;&gt; a[1]['bar'][0]
u'baz'
</snippet></ROW><ROW><id>14656489</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s1 = "foo()"
&gt;&gt;&gt; s2 = "{'k1':v1,'k2':v2}"
&gt;&gt;&gt; s3 = "[v1,v2,v3]"
&gt;&gt;&gt; re.match('(.*?)\(\)',s1).group(1)
'foo'
&gt;&gt;&gt; re.findall('\{*(.*?):(.*?)[,\}$]+',s2)
[("'k1'", 'v1'), ("'k2'", 'v2')]
&gt;&gt;&gt; re.findall('\[*(.*?)[,\]$]+',s3)
['v1', 'v2', 'v3']
</snippet></ROW><ROW><id>14656489</id><snippet>def parse_string_to_command(s):
    if re.match('(.*?\(\))',s):
        print "This is a function"
    elif re.match('^\{.*\}$',s):
        print "This is kind of like variables 1"
    elif re.match('^\[.*\]$',s):
        print "This is kind of like variables 2"
</snippet></ROW><ROW><id>14656610</id><snippet>sudo apt-get install libqt4-dev
cmake -D WITH_QT=ON ..
make
sudo make install
</snippet></ROW><ROW><id>14656610</id><snippet>sudo apt-get install libopencv-*
</snippet></ROW><ROW><id>14656610</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>14656610</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>14656610</id><snippet>ldconfig</snippet></ROW><ROW><id>14656667</id><snippet>$ time python -c exit
real    0m0.019s
user    0m0.004s
sys 0m0.012s
</snippet></ROW><ROW><id>14656671</id><snippet>__repr__()</snippet></ROW><ROW><id>14656671</id><snippet>class MyClass(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __repr__(self):
        return "%s(%r, %r)" % (type(self).__name__, self.a, self.b)
</snippet></ROW><ROW><id>14656671</id><snippet>repr()</snippet></ROW><ROW><id>14656671</id><snippet>eval()</snippet></ROW><ROW><id>14656671</id><snippet>repr()</snippet></ROW><ROW><id>14656759</id><snippet>for p in range(2, n+1):
    for i in range(2, p):
        if p % i == 0:
            break
    else:
        print p,
print 'Done'
</snippet></ROW><ROW><id>14656759</id><snippet>for</snippet></ROW><ROW><id>14656759</id><snippet>while</snippet></ROW><ROW><id>14656759</id><snippet>for</snippet></ROW><ROW><id>14656759</id><snippet>n</snippet></ROW><ROW><id>14656759</id><snippet>p</snippet></ROW><ROW><id>14656759</id><snippet>p</snippet></ROW><ROW><id>14656759</id><snippet>else</snippet></ROW><ROW><id>14656759</id><snippet>'Done'</snippet></ROW><ROW><id>14656759</id><snippet>p</snippet></ROW><ROW><id>14656763</id><snippet>&gt;</snippet></ROW><ROW><id>14656763</id><snippet>CDATA</snippet></ROW><ROW><id>14656763</id><snippet>"&lt;Description&gt;&lt;![CDATA["+page+"]]&gt;&lt;/Description&gt;"+\
</snippet></ROW><ROW><id>14656851</id><snippet>form.cleaned_data['category']</snippet></ROW><ROW><id>14656851</id><snippet>category = form.cleaned_data['category']</snippet></ROW><ROW><id>14656855</id><snippet>class Edge:
    def x
    def y
    def direction
    def weight
</snippet></ROW><ROW><id>14656855</id><snippet>h</snippet></ROW><ROW><id>14656855</id><snippet>v</snippet></ROW><ROW><id>14656855</id><snippet>edges</snippet></ROW><ROW><id>14656855</id><snippet>2 * N * M</snippet></ROW><ROW><id>14656855</id><snippet>'h'</snippet></ROW><ROW><id>14656855</id><snippet>'v'</snippet></ROW><ROW><id>14656855</id><snippet>h</snippet></ROW><ROW><id>14656855</id><snippet>v</snippet></ROW><ROW><id>14656855</id><snippet>i</snippet></ROW><ROW><id>14656855</id><snippet>edges.sort(key=weight)
</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>y.append(x[:])
</snippet></ROW><ROW><id>14656873</id><snippet>y.append(x)</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>y</snippet></ROW><ROW><id>14656873</id><snippet>[x]</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>y</snippet></ROW><ROW><id>14656873</id><snippet>y</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656873</id><snippet>import copy
y.append(copy.deepcopy(x))
</snippet></ROW><ROW><id>14656873</id><snippet>x</snippet></ROW><ROW><id>14656929</id><snippet>var firster = true;
//capture form submit
$('form.nice').submit(function(e){
    if(firster){
         // if its the first submit prevent default
         e.preventDefault();
         // update input value to have no commas
         var val = $('input').val();
         val = val.replace(/,/g, ' ');
         $('input').val(val);
         // let submit go through and submit
         firster = false;
         $(this).submit();
    }
});
</snippet></ROW><ROW><id>14656967</id><snippet>(a, b)</snippet></ROW><ROW><id>14656967</id><snippet>lambda</snippet></ROW><ROW><id>14656967</id><snippet>mux41</snippet></ROW><ROW><id>14656967</id><snippet>mux41</snippet></ROW><ROW><id>14656967</id><snippet>lambda</snippet></ROW><ROW><id>14656967</id><snippet>mux41</snippet></ROW><ROW><id>14656967</id><snippet>def xor2(a,b):
    f = mux41(0,1,1,0)
    return f(a,b)
</snippet></ROW><ROW><id>14656977</id><snippet>import re
from bs4 import BeautifulSoup as Soup

html = '''
&lt;html&gt;&lt;body&gt;&lt;p&gt;This is a paragraph&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
'''
</snippet></ROW><ROW><id>14656977</id><snippet>soup = Soup(html)
text = soup.p.string
soup.p.clear()
print soup
</snippet></ROW><ROW><id>14656977</id><snippet>match = re.search(r'\ba\b', text)
start, end = match.start(), match.end()
</snippet></ROW><ROW><id>14656977</id><snippet>soup.p.append(text[:start])
print soup
</snippet></ROW><ROW><id>14656977</id><snippet>b = soup.new_tag('b')
b.append(text[start:end])
soup.p.append(b)
print soup
</snippet></ROW><ROW><id>14656977</id><snippet>soup.p.append(text[end:])
print soup
</snippet></ROW><ROW><id>14656977</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;This is &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;This is &lt;b&gt;a&lt;/b&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;This is &lt;b&gt;a&lt;/b&gt; paragraph&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>14657063</id><snippet>[0]</snippet></ROW><ROW><id>14657063</id><snippet>[5]</snippet></ROW><ROW><id>14657063</id><snippet>[1]</snippet></ROW><ROW><id>14657063</id><snippet>[6]</snippet></ROW><ROW><id>14657063</id><snippet>uinumber[6]</snippet></ROW><ROW><id>14657063</id><snippet>uinumber_string[6]</snippet></ROW><ROW><id>14657063</id><snippet>uinumber_string = str(uinumber)
if uinumber_string[0] == "5" and uinumber_string[5] == "0":
    # Do something
</snippet></ROW><ROW><id>14657220</id><snippet>...
plt.legend(loc='best')
plt.show()
</snippet></ROW><ROW><id>14657306</id><snippet>*args</snippet></ROW><ROW><id>14657306</id><snippet>hexify_string</snippet></ROW><ROW><id>14657306</id><snippet>def hexify(*args);
    return sum(map(hexify_string, args)
</snippet></ROW><ROW><id>14657306</id><snippet>hexify_string</snippet></ROW><ROW><id>14657354</id><snippet>ModelForm</snippet></ROW><ROW><id>14657354</id><snippet>if request.method == "POST"</snippet></ROW><ROW><id>14657354</id><snippet>if form.is_valid()</snippet></ROW><ROW><id>14657354</id><snippet>from django.forms import ModelForm

class EventForm(ModelForm):

    def __init__(self, user, **kwargs):
        self.user = user
        super(EventForm, self).__init__(**kwargs)

    class Meta:
        model = Event

    def save(self, commit=True):
        event = super(EventForm, self).save(commit=False)
        event.user = self.user
        if commit:
            event.save()
</snippet></ROW><ROW><id>14657354</id><snippet>from django.views.generic.edit import CreateView

class EventCreate(CreateView):
    model = Event
    form_class = EventForm
    template = "events/event_edit.html"
    success_url = "/events/invite/" # XXX use reverse()

    def get_form(form_class):
        return form_class(self.request.user, **self.get_form_kwargs())

    def form_valid(form):
        form.user = self.request.user

        messages.success(request, 'Event has been created.')
        super(EventCreate, self).form_valid(form)

    def form_invalid(form):
        messages.error(request, 'Error')
        super(EventCreate, self).form_invalid(form)
</snippet></ROW><ROW><id>14657354</id><snippet>url(r'event/add/$', EventCreate.as_view(), name='event_create'),
</snippet></ROW><ROW><id>14657394</id><snippet>prettify</snippet></ROW><ROW><id>14657394</id><snippet>soup</snippet></ROW><ROW><id>14657394</id><snippet>soup.prettify()</snippet></ROW><ROW><id>14657394</id><snippet>prettify</snippet></ROW><ROW><id>14657394</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>14657394</id><snippet>prettify</snippet></ROW><ROW><id>14657394</id><snippet>pre</snippet></ROW><ROW><id>14657394</id><snippet>pre</snippet></ROW><ROW><id>14657394</id><snippet>for tag in find_all('pre'):
    replace tag contents with str(len(stash))
    stash.append(str(tag contents))
pretty = soup.prettify()
for i, tag in stash:
    pretty.replace('&lt;pre&gt;{}&lt;/pre&gt;'.format(i), tag)
</snippet></ROW><ROW><id>14657394</id><snippet>prettify</snippet></ROW><ROW><id>14657394</id><snippet>pre</snippet></ROW><ROW><id>14657394</id><snippet>CData</snippet></ROW><ROW><id>14657486</id><snippet>__dict__</snippet></ROW><ROW><id>14657486</id><snippet>__getattr__</snippet></ROW><ROW><id>14657486</id><snippet>__setattr__</snippet></ROW><ROW><id>14657486</id><snippet>__delattr__</snippet></ROW><ROW><id>14657486</id><snippet>__getattribute__</snippet></ROW><ROW><id>14657486</id><snippet>class C(object):
    def __getattr__(self, name):
        return name
c = C()
print(c.a)
</snippet></ROW><ROW><id>14657486</id><snippet>a</snippet></ROW><ROW><id>14657486</id><snippet>dir</snippet></ROW><ROW><id>14657486</id><snippet>c.a</snippet></ROW><ROW><id>14657486</id><snippet>__dir__</snippet></ROW><ROW><id>14657486</id><snippet>dir(x) + dir(type(x))</snippet></ROW><ROW><id>14657486</id><snippet>dir(x) + [a for a in dir(type(x)) if a not in dir(x)]</snippet></ROW><ROW><id>14657511</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.read_csv("dup.csv")
&gt;&gt;&gt; ids = df["ID"]
&gt;&gt;&gt; df[ids.isin(ids[ids.duplicated()])].sort("ID")
       ID ENROLLMENT_DATE        TRAINER_MANAGING        TRAINER_OPERATOR FIRST_VISIT_DATE
24  11795       27-Feb-12      0643D38-Hanover NH      0643D38-Hanover NH        19-Jun-12
6   11795        3-Jul-12  0649597-White River VT  0649597-White River VT        30-Mar-12
18   8096       19-Dec-11  0649597-White River VT  0649597-White River VT         9-Apr-12
2    8096        8-Aug-12      0643D38-Hanover NH      0643D38-Hanover NH        25-Jun-12
12   A036       30-Nov-11     063B208-Randolph VT     063B208-Randolph VT              NaN
3    A036        1-Apr-12      06CB8CF-Hanover NH      06CB8CF-Hanover NH         9-Aug-12
26   A036       11-Aug-12      06D3206-Hanover NH                     NaN        19-Jun-12
</snippet></ROW><ROW><id>14657511</id><snippet>ids</snippet></ROW><ROW><id>14657511</id><snippet>groupby</snippet></ROW><ROW><id>14657511</id><snippet>&gt;&gt;&gt; pd.concat(g for _, g in df.groupby("ID") if len(g) &gt; 1)
       ID ENROLLMENT_DATE        TRAINER_MANAGING        TRAINER_OPERATOR FIRST_VISIT_DATE
6   11795        3-Jul-12  0649597-White River VT  0649597-White River VT        30-Mar-12
24  11795       27-Feb-12      0643D38-Hanover NH      0643D38-Hanover NH        19-Jun-12
2    8096        8-Aug-12      0643D38-Hanover NH      0643D38-Hanover NH        25-Jun-12
18   8096       19-Dec-11  0649597-White River VT  0649597-White River VT         9-Apr-12
3    A036        1-Apr-12      06CB8CF-Hanover NH      06CB8CF-Hanover NH         9-Aug-12
12   A036       30-Nov-11     063B208-Randolph VT     063B208-Randolph VT              NaN
26   A036       11-Aug-12      06D3206-Hanover NH                     NaN        19-Jun-12
</snippet></ROW><ROW><id>14657864</id><snippet>get</snippet></ROW><ROW><id>14657864</id><snippet>filter</snippet></ROW><ROW><id>14657864</id><snippet>.get(…)</snippet></ROW><ROW><id>14657864</id><snippet>.filter(…)</snippet></ROW><ROW><id>14657864</id><snippet>SomeModel.objects.filter(pk=1)[0:1].values_list('title', flat=True)
</snippet></ROW><ROW><id>14657864</id><snippet>.get(…)</snippet></ROW><ROW><id>14657864</id><snippet>.get(…)</snippet></ROW><ROW><id>14658245</id><snippet>from itertools import chain
from operator import attrgetter

images = ImageItem.objects.filter(user=user)
video = VideoItem.objects.filter(user=user)
audio = AudioItem.objects.filter(user=user)
result_list = sorted(chain(images, video, audio),
                     key=attrgetter('upload_date'),
                     reverse=True)
</snippet></ROW><ROW><id>14658265</id><snippet>FlashWindowEx</snippet></ROW><ROW><id>14658265</id><snippet>SetWindowsHookEx</snippet></ROW><ROW><id>14658265</id><snippet>RegisterShellHookWindow</snippet></ROW><ROW><id>14658265</id><snippet>WM_SHELLHOOKMESSAGE</snippet></ROW><ROW><id>14658265</id><snippet>win32gui</snippet></ROW><ROW><id>14658265</id><snippet>ctypes</snippet></ROW><ROW><id>14658265</id><snippet>ctypes</snippet></ROW><ROW><id>14658265</id><snippet>ctypes</snippet></ROW><ROW><id>14658265</id><snippet>ShellProc</snippet></ROW><ROW><id>14658265</id><snippet>HSHELL_REDRAW=6
WM_SHELL=10

def my_callback(nCode, wParam, lParam):
    if nCode == HSHELL_REDRAW and lParam:
        got_flashing_window_with_hwnd(wParam)

hook = user32.SetWindowsHookEx(WM_SHELL, my_callback, None, 0)
</snippet></ROW><ROW><id>14658265</id><snippet>ctypes</snippet></ROW><ROW><id>14658265</id><snippet>user32.RegisterShellHookWindow(my_hwnd)
</snippet></ROW><ROW><id>14658265</id><snippet>WM_SHELLHOOKMESSAGE = None
def wndproc(hWnd, uMsg, lParam, wParam):
    if WM_SHELLHOOKMESSAGE is None:
        WM_SHELLHOOKMESSAGE = user32.RegisterWindowMessage('SHELLHOOK')
    if uMsg == WM_SHELLHOOKMESSAGE and wParam == HSHELL_FLASH:
        got_flashing_window_with_hwnd(lParam)
</snippet></ROW><ROW><id>14658413</id><snippet># construct the mask in 2-d (a frame)
In [36]: mask = (pn['close']&gt;0) &amp; (pn['rate']&gt;0)

In [37]: mask
Out[37]: 
ticker                AAPL   GOOG     GS
2009-03-01 06:29:59  False  False  False
2009-03-02 06:29:59  False  False   True
....

# here's the key, this broadcasts, setting the values which 
# don't meet the condition to nan
In [38]: masked_values = np.where(mask,pn.values,np.nan)

# reconstruct the panel (the _construct_axes_dict is an internal function that returns
# dict of the axes, e.g. items -&gt; the items, major_axis -&gt; .....
In [42]: x = pd.Panel(masked_values,**pn._construct_axes_dict())
Out[42]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 12 (major_axis) x 3 (minor_axis)
Items axis: close to rate
Major_axis axis: 2009-03-01 06:29:59 to 2009-03-12 06:29:59
Minor_axis axis: AAPL to GS

# the values
In [43]: x
Out[43]: 
array([[[        nan,         nan,         nan],
    [        nan,         nan,  0.09575723],
    [        nan,         nan,         nan],
    [        nan,         nan,         nan],
    [        nan,  2.07229823,  0.04347515],
    [        nan,         nan,         nan],
    [        nan,         nan,  2.18342239],
    [        nan,         nan,  1.73674381],
    [        nan,  2.01173087,         nan],
    [ 0.24109645,  0.94583072,         nan],
    [ 0.36953467,         nan,  0.18044432],
    [ 1.74164222,  1.02314752,  1.73736033]],

   [[        nan,         nan,         nan],
    [        nan,         nan,  0.06960387],
    [        nan,         nan,         nan],
    [        nan,         nan,         nan],
    [        nan,  0.63202199,  0.56724391],
    [        nan,         nan,         nan],
    [        nan,         nan,  0.71964824],
    [        nan,         nan,  1.03482927],
    [        nan,  0.18256148,         nan],
    [ 1.29451667,  0.49804327,         nan],
    [ 2.04726538,         nan,  0.12883128],
    [ 0.70647885,  0.7277734 ,  0.77844475]]])
</snippet></ROW><ROW><id>14658480</id><snippet>sys</snippet></ROW><ROW><id>14658480</id><snippet>sys.stdout = redirect
sys.stderr = redirect
</snippet></ROW><ROW><id>14658554</id><snippet>'&lt;/%s Name="%s" Password="%s" /&gt;' % (method, username, password)
</snippet></ROW><ROW><id>14658640</id><snippet>phoneCipher = {'id' : 'A', 'val': 2},{'id' : 'B', 'val': 22},{'id' : 'C', 'val': 222},...
</snippet></ROW><ROW><id>14658640</id><snippet>'L'</snippet></ROW><ROW><id>14658640</id><snippet>L</snippet></ROW><ROW><id>14658640</id><snippet>L</snippet></ROW><ROW><id>14658640</id><snippet>sampleList = list(originalMessage)
</snippet></ROW><ROW><id>14659031</id><snippet>a[:]</snippet></ROW><ROW><id>14659031</id><snippet>:</snippet></ROW><ROW><id>14659031</id><snippet>x[ind1,...,ind2,:]</snippet></ROW><ROW><id>14659031</id><snippet>x[ind1][...,ind2,:]</snippet></ROW><ROW><id>14659031</id><snippet>:</snippet></ROW><ROW><id>14659192</id><snippet>settings.py</snippet></ROW><ROW><id>14659192</id><snippet>blog</snippet></ROW><ROW><id>14659192</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14659192</id><snippet>ImportError</snippet></ROW><ROW><id>14659192</id><snippet>ImportError</snippet></ROW><ROW><id>14659192</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog', # &lt;------ your app here.
     ...
 }
</snippet></ROW><ROW><id>14659282</id><snippet>html</snippet></ROW><ROW><id>14659282</id><snippet>iframe</snippet></ROW><ROW><id>14659282</id><snippet>div</snippet></ROW><ROW><id>14659541</id><snippet>body = ET.fromstring(xml) 
</snippet></ROW><ROW><id>14659541</id><snippet>meaning</snippet></ROW><ROW><id>14659541</id><snippet>_Element.find</snippet></ROW><ROW><id>14659541</id><snippet>1</snippet></ROW><ROW><id>14659541</id><snippet>2</snippet></ROW><ROW><id>14659541</id><snippet>find</snippet></ROW><ROW><id>14659541</id><snippet>meaning = find('meaning')
</snippet></ROW><ROW><id>14659541</id><snippet>&lt;text&gt;</snippet></ROW><ROW><id>14659541</id><snippet>&lt;meaning&gt;</snippet></ROW><ROW><id>14659541</id><snippet>text = body.makeelement('text')
meaning.addprevious(text)
</snippet></ROW><ROW><id>14659541</id><snippet>&lt;meaning&gt;</snippet></ROW><ROW><id>14659541</id><snippet>&lt;text&gt;</snippet></ROW><ROW><id>14659541</id><snippet>text.append(meaning)
</snippet></ROW><ROW><id>14659541</id><snippet>append</snippet></ROW><ROW><id>14659690</id><snippet>unescape</snippet></ROW><ROW><id>14659690</id><snippet>from xml.sax.saxutils import unescape

entry=body[0]
</snippet></ROW><ROW><id>14659690</id><snippet>body.replace(entry, e.fromstring(unescape(e.tounicode(entry))))
</snippet></ROW><ROW><id>14659695</id><snippet>randrange</snippet></ROW><ROW><id>14659695</id><snippet>randrange(1, 1)</snippet></ROW><ROW><id>14659695</id><snippet>random.choice</snippet></ROW><ROW><id>14659695</id><snippet>k &lt;= len(A1)</snippet></ROW><ROW><id>14659695</id><snippet>k &lt; len(A1)</snippet></ROW><ROW><id>14659695</id><snippet>def quick_select(A, k):
    pivot = random.choice(A)

    A1 = []
    A2 = []

    for i in A:
        if i &lt; pivot:
            A1.append(i)
        else:
            A2.append(i)

    if k &lt; len(A1):
        return Quickselect(A1, k)
    elif k &gt; len(A) - len(A2):
        return Quickselect(A2, k - (len(A) - len(A2)))
    else:
        return pivot
</snippet></ROW><ROW><id>14659885</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>14659885</id><snippet>chmod +x test.2.py</snippet></ROW><ROW><id>14659885</id><snippet>test.2.py</snippet></ROW><ROW><id>14659957</id><snippet>Stack</snippet></ROW><ROW><id>14659957</id><snippet>stack = Stack()
</snippet></ROW><ROW><id>14660076</id><snippet>&gt;&gt;&gt; d ={}
&gt;&gt;&gt; for i in tup : d[li.index(i[0])] = i
&gt;&gt;&gt; list(d.values())
[('fca', '210Y'), ('fc_add', '999 Des ST.'), ('Red_Exis', 107), ('G_Exis', 'abc')]
</snippet></ROW><ROW><id>14660164</id><snippet>import subprocess

def runProcess(exe):
    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while(True):
      retcode = p.poll() #returns None while subprocess is running
      line = p.stdout.readline()
      yield line
      if(retcode is not None):
        break

for line in runProcess(['./test.sh']):
  if line.startswith('GARYFIXLER:'):
      print line,
</snippet></ROW><ROW><id>14660164</id><snippet>#!/bin/bash

/usr/autodesk/maya/bin/mayapy -c "
cmds.file('filepath', open=True);
print 'GARYFIXLER:hello'
"
</snippet></ROW><ROW><id>14660194</id><snippet>query_node=iq_node.getQueryChildren()
for node in query_node:
    print node.getAttr("name")
</snippet></ROW><ROW><id>14660194</id><snippet>iq_node</snippet></ROW><ROW><id>14660194</id><snippet>xmpp.protocol.Iq</snippet></ROW><ROW><id>14660194</id><snippet>node</snippet></ROW><ROW><id>14660194</id><snippet>xmpp.simplexml.Node</snippet></ROW><ROW><id>14660368</id><snippet>str</snippet></ROW><ROW><id>14660368</id><snippet>self += struct.pack("=B", ubyte)
</snippet></ROW><ROW><id>14660368</id><snippet>self = self + struct.pack("=B", ubyte)
</snippet></ROW><ROW><id>14660368</id><snippet>bytearray</snippet></ROW><ROW><id>14660368</id><snippet>&gt;&gt;&gt; bb = bytearray()
&gt;&gt;&gt; bb.append(200)
&gt;&gt;&gt; bb
bytearray(b'\xc8')
</snippet></ROW><ROW><id>14660369</id><snippet>from itertools import combinations

words = ['DUMMY', 'EARTH']
letters = ['A', 'D', 'E', 'H', 'M', 'M', 'R', 'T', 'U', 'Y']

[w for w in (''.join(c) for c in combinations(words,2)) 
                               if sorted(w) == letters]
# ['DUMMYEARTH']
</snippet></ROW><ROW><id>14660369</id><snippet>[w for w in (''.join(c) for i in xrange(len(words)+1) 
                      for c in combinations(words,i)) 
                              if sorted(w) == letters]
# ['DUMMYEARTH']
</snippet></ROW><ROW><id>14660385</id><snippet>"C:/Scripts/template",   # &lt;--- HERE
"C:/Scripts/mysite/template"
</snippet></ROW><ROW><id>14660385</id><snippet>"C:/Scripts/templateC:/Scripts/mysite/template"</snippet></ROW><ROW><id>14660486</id><snippet>PyGetSetDef</snippet></ROW><ROW><id>14660486</id><snippet>static PyGetSetDef my_props[] = { /*... */ }
</snippet></ROW><ROW><id>14660486</id><snippet>MyType.my_property</snippet></ROW><ROW><id>14660486</id><snippet>types.GetSetDescriptorType</snippet></ROW><ROW><id>14660486</id><snippet>my_obj.my_property</snippet></ROW><ROW><id>14660679</id><snippet>QPushButton</snippet></ROW><ROW><id>14660679</id><snippet>clicked</snippet></ROW><ROW><id>14660679</id><snippet>QAbstractButton</snippet></ROW><ROW><id>14660679</id><snippet>QPushButton</snippet></ROW><ROW><id>14660679</id><snippet>False</snippet></ROW><ROW><id>14660679</id><snippet>checkable</snippet></ROW><ROW><id>14660679</id><snippet>QCheckBox</snippet></ROW><ROW><id>14660679</id><snippet>initUI</snippet></ROW><ROW><id>14660679</id><snippet>def initUI(self):
    self.button = QtGui.QCheckBox("print clicked",self)
    self.button.setCheckable(True)
    self.clicked='not_clicked'
    self.button.clicked.connect(lambda opt='clicked': self.option(opt)) 
</snippet></ROW><ROW><id>14660679</id><snippet>def initUI(self):
    #self.button = QtGui.QPushButton("print clicked",self)
    self.button = QtGui.QCheckBox("print clicked",self)
    self.clicked='not_clicked'
    self.button.clicked.connect(lambda opt='clicked': self.option(opt)) 
</snippet></ROW><ROW><id>14660779</id><snippet>&gt;&gt;&gt; def some_function(argument="Default"):
...     # argument can be set either using positional parameters or keywords
...     print argument
... 
&gt;&gt;&gt; some_function()    # argument not provided -&gt; uses default value
Default
&gt;&gt;&gt; some_function(5)    # argument provided, uses it
5
&gt;&gt;&gt; some_function(argument=5)    # equivalent to the above one
5
&gt;&gt;&gt; def some_function(argument="Default", *args):
...     print (argument, args)
... 
&gt;&gt;&gt; some_function()   #argument not provided, so uses the default and *args is empty
('Default', ())
&gt;&gt;&gt; some_function(5)   # argument provided, and thus uses it. *args are empty
(5, ())
&gt;&gt;&gt; some_function(5, 1, 2, 3)   # argument provided, and thus uses it. *args not empty
(5, (1, 2, 3))
&gt;&gt;&gt; some_function(1, 2, 3, argument=5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: some_function() got multiple values for keyword argument 'argument'
</snippet></ROW><ROW><id>14660779</id><snippet>1</snippet></ROW><ROW><id>14660779</id><snippet>argument</snippet></ROW><ROW><id>14660779</id><snippet>keyword</snippet></ROW><ROW><id>14660779</id><snippet>argument</snippet></ROW><ROW><id>14660779</id><snippet>*args</snippet></ROW><ROW><id>14660779</id><snippet>**kwargs</snippet></ROW><ROW><id>14660779</id><snippet>def my_function(a,b,c,d,*args, **kwargs):
    default_dict = {
        'my_keyword1': TheDefaultValue,
        'my_keyword2': TheDefaultValue2,
    }
    default_dict.update(kwargs)    #overwrite defaults if user provided them
    if not (set(default_dict) &lt;= set('all', 'the', 'possible', 'keywords')):
        # if you want to do error checking on kwargs, even though at that
        # point why use kwargs at all?
        raise TypeError('Invalid keywords')
    keyword1 = default_dict['keyword1']
    # etc.
</snippet></ROW><ROW><id>14660779</id><snippet>def my_function(a,b,c,*args, keyword, only=True): pass
    # ... 
</snippet></ROW><ROW><id>14660825</id><snippet>cost_database</snippet></ROW><ROW><id>14660825</id><snippet>for</snippet></ROW><ROW><id>14660825</id><snippet>&gt;&gt;&gt; a = xrange(4)
&gt;&gt;&gt; for i in a:
...    print(i)
0
1
2
3
4
&gt;&gt;&gt; for i in a:
...    print(i)
&gt;&gt;&gt; # Nothing since 'a' is already exhausted.
</snippet></ROW><ROW><id>14660871</id><snippet>re.sub</snippet></ROW><ROW><id>14660871</id><snippet>import re
.....
line = re.sub(r'(?&lt;=VERSION_REV )\d+', x, line)
</snippet></ROW><ROW><id>14660880</id><snippet>/bin/sh -c "adduser" --home=/var/www/myusername/ --gecos GECOS --disabled-login myusername
</snippet></ROW><ROW><id>14660880</id><snippet>adduser</snippet></ROW><ROW><id>14660880</id><snippet>sh</snippet></ROW><ROW><id>14660880</id><snippet>call('adduser --home=/var/www/myusername/ --gecos GECOS --disabled-login myusername', shell=True)
</snippet></ROW><ROW><id>14660880</id><snippet>call(['adduser --home=/var/www/myusername/ --gecos GECOS --disabled-login myusername'], shell=True)
</snippet></ROW><ROW><id>14660880</id><snippet>call</snippet></ROW><ROW><id>14660880</id><snippet>shell=True</snippet></ROW><ROW><id>14661031</id><snippet>import argparse
parser = argparse.ArgumentParser(
        description='this is the description',
        epilog="This is the epilog",
        argument_default=argparse.SUPPRESS  
        )

parser.add_argument('-v', '--verbose', help='verbose', action='store_true', default=False)

root_group = parser.add_mutually_exclusive_group()

group_list = root_group.add_mutually_exclusive_group()
group_list.add_argument('-m', help='list only modules', action='store_const', dest='list', const='modules', default='all')
group_list.add_argument('-p', help='list only ports', action='store_const', dest='list', const='ports', default='all')
group_list.add_argument('--list', help='list only module or ports', choices=['modules','ports'], metavar='&lt;modules/ports&gt;', default='all')

group_simulate = root_group.add_mutually_exclusive_group()
group_simulate.add_argument('-M', help='simulate module down', nargs=1, metavar='module_name', dest='simulate')
group_simulate.add_argument('-P', help='simulate FC port down', nargs=1, metavar='fc_port_name', dest='simulate')
group_simulate.add_argument('-I', help='simulate iSCSI port down', nargs=1, metavar='iSCSI_port_name', dest='simulate')
group_simulate.add_argument('--simulate', help='simulate module or port down', nargs=1, dest='simulate')

args = parser.parse_args()

print args
</snippet></ROW><ROW><id>14661031</id><snippet>$ python test.py -m -P asfafs
usage: test.py [-h] [-v] [[-m | -p | --list &lt;modules/ports&gt;]
                [-M module_name | -P fc_port_name | -I iSCSI_port_name | --simulate SIMULATE]
test.py: error: argument -P: not allowed with argument -m 
$ python test.py -m -p
usage: test.py [-h] [-v] [[-m | -p | --list &lt;modules/ports&gt;]
                [-M module_name | -P fc_port_name | -I iSCSI_port_name | --simulate SIMULATE]
test.py: error: argument -p: not allowed with argument -m
</snippet></ROW><ROW><id>14661067</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.compile('^[abilrstu]+$')
&gt;&gt;&gt; m.match('australia') is not None
True
&gt;&gt;&gt; m.match('dummy') is not None
False
&gt;&gt;&gt; m.match('australian') is not None
False
</snippet></ROW><ROW><id>14661102</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>14661102</id><snippet>dumps</snippet></ROW><ROW><id>14661102</id><snippet>&gt;&gt;&gt; json.dumps(your_data, ensure_ascii=False)
</snippet></ROW><ROW><id>14661102</id><snippet>ensure_ascii</snippet></ROW><ROW><id>14661102</id><snippet>unicode</snippet></ROW><ROW><id>14661102</id><snippet>str</snippet></ROW><ROW><id>14661102</id><snippet>unicode</snippet></ROW><ROW><id>14661102</id><snippet>str</snippet></ROW><ROW><id>14661271</id><snippet>from itertools import combinations

result = []
count = 0
for w in (''.join(c) for c in combinations(words, 2)):
    if sorted(w) == letters:
        result.append(w)
        count += 1
        if count % 2000 == 0:
            print 'Progress: {0} matching combinations found'.format(count)

print result
</snippet></ROW><ROW><id>14661271</id><snippet>if</snippet></ROW><ROW><id>14661271</id><snippet>from itertools import combinations

result = []
count = 0
for w in (''.join(c) for c in combinations(words, 2)):
    count += 1
    if count % 2000 == 0:
        print 'Progress: {0} combinations scanned'.format(count)

    if sorted(w) == letters:
        result.append(w)

print result
</snippet></ROW><ROW><id>14661290</id><snippet>stepperb_value</snippet></ROW><ROW><id>14661312</id><snippet>root = HelloWorld()
root.onepage = OnePage()
root.otherpage = OtherPage()
</snippet></ROW><ROW><id>14661312</id><snippet>http://localhost/onepage</snippet></ROW><ROW><id>14661312</id><snippet>http://localhost/otherpage</snippet></ROW><ROW><id>14661312</id><snippet>import cherrypy

class Root:
    def index(self):
        return "Hello, world!"
    index.exposed = True

class Admin:
    def user(self, name=""):
        return "You asked for user '%s'" % name
    user.exposed = True

class Search:
    def index(self):
        return search_page()
    index.exposed = True

cherrypy.root = Root()
cherrypy.root.admin = Admin()
cherrypy.root.admin.search = Search()
</snippet></ROW><ROW><id>14661355</id><snippet>datetime</snippet></ROW><ROW><id>14661355</id><snippet>DateTime</snippet></ROW><ROW><id>14661355</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14661355</id><snippet>from django.utils.timezone import activate
activate(settings.TIMEZONE)
</snippet></ROW><ROW><id>14661355</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14661355</id><snippet>pytz</snippet></ROW><ROW><id>14661355</id><snippet>from pytz import timezone

settingstime_zone = timezone(settings.TIME_ZONE)
last_updated = last_updated.astimezone(settings_time_zone)
</snippet></ROW><ROW><id>14661405</id><snippet>for i in list:
    if i &gt;= n: continue
</snippet></ROW><ROW><id>14661405</id><snippet>for i in (k for k in list if k &lt; n):
    ...
</snippet></ROW><ROW><id>14661589</id><snippet>import web

urls = (
    "/product/(.*)", "Product"
)


class Product:
    def GET(self, product_id):
        return product_id


app = web.application(urls, globals())


if __name__ == "__main__":
    #app.run()
    assert web.__version__ == "0.37"
    b = app.browser()
    b.open('/product/xy&amp;z')
    assert b.status == 200
    assert "xy&amp;z" in b.data
    assert "xy&amp;z" not in b.data
    b.open('/product/xy&amp;z')
    assert "xy&amp;z" in b.data
</snippet></ROW><ROW><id>14661621</id><snippet>RoundFloat</snippet></ROW><ROW><id>14661621</id><snippet>__main__</snippet></ROW><ROW><id>14661621</id><snippet>'__main__.RoundFloat'</snippet></ROW><ROW><id>14661621</id><snippet>__main__</snippet></ROW><ROW><id>14661621</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14661621</id><snippet>__name__</snippet></ROW><ROW><id>14661768</id><snippet>In [65]: df
Out[65]: 
       one  two
one      1    4
two      2    3
three    3    2
four     4    1


In [66]: df.drop(df.index[[1,3]])
Out[66]: 
       one  two
one      1    4
three    3    2
</snippet></ROW><ROW><id>14661944</id><snippet>self.counter += 1</snippet></ROW><ROW><id>14661944</id><snippet>self.counter = self.counter + 1</snippet></ROW><ROW><id>14661944</id><snippet>bambi1.counter</snippet></ROW><ROW><id>14661944</id><snippet>bambi1.counter</snippet></ROW><ROW><id>14661944</id><snippet>bambi1</snippet></ROW><ROW><id>14661944</id><snippet>counter</snippet></ROW><ROW><id>14662355</id><snippet>setup.py</snippet></ROW><ROW><id>14662355</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14662355</id><snippet>setup.py</snippet></ROW><ROW><id>14662355</id><snippet>collections</snippet></ROW><ROW><id>14662355</id><snippet>from setuptools import setup

install_requires = []

try:
    from collections import OrderedDict
except ImportError:
    install_requires.append('ordereddict')

setup(
    # ...
    install_requires=install_requires
)
</snippet></ROW><ROW><id>14662355</id><snippet>OrderedDict</snippet></ROW><ROW><id>14662355</id><snippet>try:
    from collections import OrderedDict
except ImportError:
    # use backported version
    from ordereddict import OrderedDict
</snippet></ROW><ROW><id>14662355</id><snippet>pip</snippet></ROW><ROW><id>14662355</id><snippet>easy_install</snippet></ROW><ROW><id>14662355</id><snippet>zc.buildout</snippet></ROW><ROW><id>14662355</id><snippet>json</snippet></ROW><ROW><id>14662355</id><snippet>simplejson</snippet></ROW><ROW><id>14662355</id><snippet>argparse</snippet></ROW><ROW><id>14662355</id><snippet>sqlite3</snippet></ROW><ROW><id>14662355</id><snippet>pysqlite</snippet></ROW><ROW><id>14662355</id><snippet>from pysqlite2 import dbapi as sqlite3</snippet></ROW><ROW><id>14662421</id><snippet>def main(NU):
    return 

def somefunc():
    return

if __name__ == '__main__':
    from sys import argv

    # parsing the input
    script, NU = argv
    main(NU)
</snippet></ROW><ROW><id>14662666</id><snippet>convertEntities=bs.BeautifulSoup.HTML_ENTITIES</snippet></ROW><ROW><id>14662666</id><snippet>soup = bs.BeautifulSoup(html, convertEntities=bs.BeautifulSoup.HTML_ENTITIES)
</snippet></ROW><ROW><id>14662666</id><snippet>£</snippet></ROW><ROW><id>14662666</id><snippet>£</snippet></ROW><ROW><id>14662666</id><snippet>part</snippet></ROW><ROW><id>14662666</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>14662666</id><snippet>contents</snippet></ROW><ROW><id>14662666</id><snippet>In [37]: part.find(attrs={"class": re.compile('abc')}).contents
Out[37]: [&lt;strike&gt;£3.99&lt;/strike&gt;, &lt;br /&gt;, u'\xa33.59']
</snippet></ROW><ROW><id>14662666</id><snippet>def parse_price(text):
    try:
        return float(re.search(r'\d*\.\d+', text).group())
    except (TypeError, ValueError, AttributeError):
        return None

price = []
for item in part.find(attrs={"class": re.compile('abc')}).contents:
    item = parse_price(item.string)
    if item:
        price.append(item)
</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>mypart['rrp'], mypart['price'] = price
</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>[]</snippet></ROW><ROW><id>14662666</id><snippet>if..else</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>[]</snippet></ROW><ROW><id>14662666</id><snippet>itertools.cycle([None])</snippet></ROW><ROW><id>14662666</id><snippet>itertools.cycle(price)</snippet></ROW><ROW><id>14662666</id><snippet>price = itertools.cycle(price or [None])
mypart['rrp'], mypart['price'] = next(price), next(price)
</snippet></ROW><ROW><id>14662666</id><snippet>next</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>price</snippet></ROW><ROW><id>14662666</id><snippet>A, List, Of, Terms, To, Extract - 1 Feb 2013</snippet></ROW><ROW><id>14662666</id><snippet>contents</snippet></ROW><ROW><id>14662666</id><snippet># jkl
mypart['other'] = [item for item in part.find('p').contents
                   if not isinstance(item, bs.Tag) and item.string.strip()]
</snippet></ROW><ROW><id>14662666</id><snippet>import BeautifulSoup as bs
import os
import re
import itertools as IT

def parse_price(text):
    try:
        return float(re.search(r'\d*\.\d+', text).group())
    except (TypeError, ValueError, AttributeError):
        return None

filename = os.path.expanduser("~/tmp/file.html")
with open(filename) as fp:
    html = fp.read()

soup = bs.BeautifulSoup(html, convertEntities=bs.BeautifulSoup.HTML_ENTITIES)

for part in soup.findAll('div', attrs={"class": re.compile('(?i)part')}):
    mypart = {}
    # abc
    price = []
    for item in part.find(attrs={"class": re.compile('abc')}).contents:
        item = parse_price(item.string)
        if item:
            price.append(item)

    price = IT.cycle(price or [None])
    mypart['rrp'], mypart['price'] = next(price), next(price)

    # jkl
    mypart['other'] = [item for item in part.find('p').contents
                       if not isinstance(item, bs.Tag) and item.string.strip()]

    print(mypart)
</snippet></ROW><ROW><id>14662666</id><snippet>{'price': 3.59, 'other': [u'A, List, Of, Terms, To, Extract - 1 Feb 2013'], 'rrp': 3.99}
</snippet></ROW><ROW><id>14663198</id><snippet>In [33]: import numpy as np

In [34]: np.r_[1, 2*np.ones(3), 1]
Out[34]: array([ 1.,  2.,  2.,  2.,  1.])
</snippet></ROW><ROW><id>14663198</id><snippet>hstack</snippet></ROW><ROW><id>14663198</id><snippet>In [42]: np.hstack(([1], 2*np.ones(3), [1]))
Out[42]: array([ 1.,  2.,  2.,  2.,  1.])
</snippet></ROW><ROW><id>14663198</id><snippet>In [45]: %timeit np.r_[1, 2*np.ones(300), 1]
10000 loops, best of 3: 27.5 us per loop

In [46]: %timeit np.hstack(([1], 2*np.ones(300), [1]))
10000 loops, best of 3: 26.4 us per loop

In [48]: %timeit np.append([1],np.append(2*np.ones(300)[:],[1]))
10000 loops, best of 3: 28.2 us per loop
</snippet></ROW><ROW><id>14663198</id><snippet>r_</snippet></ROW><ROW><id>14663198</id><snippet>hstack</snippet></ROW><ROW><id>14663198</id><snippet>In [49]: %timeit a = 2*np.ones(300+2); a[0] = 1; a[-1] = 1
100000 loops, best of 3: 6.79 us per loop

In [50]: %timeit a = np.empty(300+2); a.fill(2); a[0] = 1; a[-1] = 1
1000000 loops, best of 3: 1.73 us per loop
</snippet></ROW><ROW><id>14663209</id><snippet>.get()</snippet></ROW><ROW><id>14663209</id><snippet>try</snippet></ROW><ROW><id>14663456</id><snippet>def clean_sentence(s):
    lst = [word for word in s.split()]

    lst_cleaned = []
    for items in lst:
        lst_cleaned.append(remove_unw2anted(items))
    return ' '.join(lst_cleaned)
</snippet></ROW><ROW><id>14663456</id><snippet>def is_ok(c):
    return c.isalnum() or c in " '"

def clean_sentence(s):
    return filter(is_ok, s)

s = "Blake D'souza is an !d!0t"
print clean_sentence(s)
</snippet></ROW><ROW><id>14663580</id><snippet>Person</snippet></ROW><ROW><id>14663580</id><snippet>class Person(models.Model):
    name = models.CharField(max_length=50)
    birthday = models.DateField()
    anniversary = models.ForeignKey(Anniversary)
    address = models.ForeignKey(Address)

class Address(models.Model):
    line1 = models.CharField(max_length=150)
    line2 = models.CharField(max_length=150)
    postalcode = models.CharField(max_length=10)
    city = models.CharField(max_length=150)
    country = models.CharField(max_length=150)

class Anniversary(models.Model):
    date = models.DateField()
</snippet></ROW><ROW><id>14663580</id><snippet>Person</snippet></ROW><ROW><id>14663580</id><snippet>Anniversary</snippet></ROW><ROW><id>14663580</id><snippet>Address</snippet></ROW><ROW><id>14663580</id><snippet>person_set</snippet></ROW><ROW><id>14663669</id><snippet>(int $status, Astro::Nova::RstTime $rst) =
  get_object_rst(double JD, Astro::Nova::LnLatPosn observer, Astro::Nova::EquPosn object)
(int $status, Astro::Nova::RstTime $rst) =
  get_object_rst_horizon(double JD, Astro::Nova::LnLatPosn observer,
                         Astro::Nova::EquPosn object, double horizon)
(int $status, Astro::Nova::RstTime $rst) =
  get_object_next_rst(double JD, Astro::Nova::LnLatPosn observer, Astro::Nova::EquPosn object)
(int $status, Astro::Nova::RstTime $rst) =
  get_object_next_rst_horizon(double JD, Astro::Nova::LnLatPosn observer,
                              Astro::Nova::EquPosn object, double horizon)
</snippet></ROW><ROW><id>14663673</id><snippet>a</snippet></ROW><ROW><id>14663673</id><snippet>data = """blahblahblah 
&lt;a  href="THIS IS WHAT I WANT" title="NOT THIS"&gt;I DONT CARE ABOUT THIS EITHER&lt;/a&gt;
blahblahblah"""

import lxml.html
tree = lxml.html.fromstring(data)
print tree.xpath('//a/@href')

# ['THIS IS WHAT I WANT']
</snippet></ROW><ROW><id>14663877</id><snippet>{
  title: 'Skill A',
  url: 'http://skilla.com',
  children: [
    {
      title: 'Skill B',
      url: 'http://skillb.com',
      rating: 3,
      children: [
        {
          title: 'Skill D',
          url: 'http://skilld.com',
          rating: 5
        }, 
        {
          title: 'Skill E',
          url: 'http://skilld.com',
          rating: 10
        }
      ]
    },
    {
      title: 'Skill C',
      url: 'http://skillc.com',
      rating: 1
    }
  ]
}
</snippet></ROW><ROW><id>14664057</id><snippet>text = 'This is a dummy dummy text'

def callback(m):
    string = m.group()
    subst = string.upper()
    start = m.start()
    question = 'subst {:s} at pos {:d}:'.format(string, start)
    ans = raw_input(question)
    if ans[0] in 'Yy':
        return subst
    else:
        return string

print re.sub(r'\bdummy\b', callback, text)
</snippet></ROW><ROW><id>14664057</id><snippet>subst dummy at pos 10:n
subst dummy at pos 16:y
This is a dummy DUMMY text
</snippet></ROW><ROW><id>14664354</id><snippet>extended.py</snippet></ROW><ROW><id>14664354</id><snippet>__init__.py</snippet></ROW><ROW><id>14664354</id><snippet>exended.py</snippet></ROW><ROW><id>14664354</id><snippet>main.py

packagename\
    __init__.py
    basic.py
    extended.py
</snippet></ROW><ROW><id>14664354</id><snippet>main.py</snippet></ROW><ROW><id>14664354</id><snippet>import packagename.extended
</snippet></ROW><ROW><id>14664354</id><snippet>extended</snippet></ROW><ROW><id>14664354</id><snippet>packagename</snippet></ROW><ROW><id>14664499</id><snippet>collections.Counter()</snippet></ROW><ROW><id>14664499</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>14664499</id><snippet>import collections

dct = collections.defaultdict(int)

for c in string:
     dict[c] += 1
</snippet></ROW><ROW><id>14664499</id><snippet>dct = collections.Counter(string)
</snippet></ROW><ROW><id>14664499</id><snippet>dict</snippet></ROW><ROW><id>14664499</id><snippet>Counter</snippet></ROW><ROW><id>14664499</id><snippet>defaultdict</snippet></ROW><ROW><id>14664499</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>14664499</id><snippet>timeit</snippet></ROW><ROW><id>14664499</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def intest(dct, values):
...     for c in values:
...         if c in dct:
...             dct[c]+=1
...         else:
...             dct[c]=1
... 
&gt;&gt;&gt; def get(dct, values):
...     for c in values:
...         dct[c] = dct.get(c, 0) + 1
... 
&gt;&gt;&gt; values = range(10) * 10
&gt;&gt;&gt; timeit.timeit('test(dct, values)', 'from __main__ import values, intest as test; dct={}')
22.210275888442993
&gt;&gt;&gt; timeit.timeit('test(dct, values)', 'from __main__ import values, get as test; dct={}')
27.442166090011597
</snippet></ROW><ROW><id>14664499</id><snippet>in</snippet></ROW><ROW><id>14664499</id><snippet>KeyError</snippet></ROW><ROW><id>14664499</id><snippet>&gt;&gt;&gt; def tryexcept(dct, values):
...     for c in values:
...         try:
...             dct[c] += 1
...         except KeyError:
...             dct[c] = 1
... 
&gt;&gt;&gt; timeit.timeit('test(dct, values)', 'from __main__ import values, tryexcept as test; dct={}')
18.023509979248047
</snippet></ROW><ROW><id>14664499</id><snippet>&gt;&gt;&gt; def default(dct, values):
...     for c in values:
...         dct[c] += 1
... 
&gt;&gt;&gt; timeit.timeit('test(dct, values)', 'from __main__ import values, default as test; from collections import defaultdict; dct=defaultdict(int)')
15.277361154556274
&gt;&gt;&gt; timeit.timeit('Counter(values)', 'from __main__ import values; from collections import Counter')
38.657804012298584
</snippet></ROW><ROW><id>14664499</id><snippet>Counter()</snippet></ROW><ROW><id>14664499</id><snippet>defaultdict</snippet></ROW><ROW><id>14664499</id><snippet>Counter()</snippet></ROW><ROW><id>14664504</id><snippet>class SelectDateWidget(object):
  FORMAT_CHOICES = {
    '%d': [(x, str(x)) for x in range(1, 32)],
    '%m': [(x, str(x)) for x in range(1, 13)]
  }

  FORMAT_CLASSES = {
    '%d': 'select_date_day',
    '%m': 'select_date_month',
    '%Y': 'select_date_year'
  }

  def __init__(self, years=range(1930, 2014)):
    super(SelectDateWidget, self).__init__()
    self.FORMAT_CHOICES['%Y'] = [(x, str(x)) for x in years]

  def __call__(self, field, **kwargs):
    field_id        = kwargs.pop('id', field.id)
    html            = []
    allowed_format  = ['%d', '%m', '%Y']

    for format in field.format.split():
      if (format in allowed_format):
        choices     = self.FORMAT_CHOICES[format]
        id_suffix   = format.replace('%', '-')
        id_current  = field_id + id_suffix

        kwargs['class'] = self.FORMAT_CLASSES[format]
        try: del kwargs['placeholder']
        except: pass

        html.append('&lt;select %s&gt;' % html_params(name=field.name, id=id_current, **kwargs))

        if field.data:
            current_value = int(field.data.strftime(format))
        else:
            current_value = None

        for value, label in choices:
          selected = (value == current_value)
          html.append(Select.render_option(value, label, selected))
        html.append('&lt;/select&gt;')
      else:
        html.append(format)
        html.append('&lt;input type="hidden" value="'+format+'" %s&gt;&lt;/input&gt;' % html_params(name=field.name, id=id_current, **kwargs))

      html.append(' ')

    return HTMLString(''.join(html))
</snippet></ROW><ROW><id>14664592</id><snippet>wget "http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg"
sh setuptools-0.6c11-py2.7.egg --prefix=~/.local
</snippet></ROW><ROW><id>14664592</id><snippet>--prefix=</snippet></ROW><ROW><id>14664592</id><snippet>python2.7</snippet></ROW><ROW><id>14664592</id><snippet>2.7</snippet></ROW><ROW><id>14664637</id><snippet>Objects/dictobject.c</snippet></ROW><ROW><id>14664637</id><snippet>dictnotes.txt</snippet></ROW><ROW><id>14664804</id><snippet>webpage = urrlib.urlopen("http://urlofinterest")
</snippet></ROW><ROW><id>14664804</id><snippet>webpage = urrlib.urlopen("http://urlofinterest").read()
</snippet></ROW><ROW><id>14664804</id><snippet>&gt;&gt;&gt; blah = '&lt;a href="link" target="_blank" onclick="blah blah blah"&gt;TITLE&lt;/a&gt;'
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(blah) # change to webpage later
&gt;&gt;&gt; for tag in soup('a', href=True):
    print tag['href'], tag.string

link TITLE
</snippet></ROW><ROW><id>14665074</id><snippet>crypPass</snippet></ROW><ROW><id>14665074</id><snippet>user, cryptPass = line.split(':')
cryptPass = cryptPass.strip()
</snippet></ROW><ROW><id>14665576</id><snippet>--version=version-name</snippet></ROW><ROW><id>14665623</id><snippet>    self = ""
</snippet></ROW><ROW><id>14665623</id><snippet>    self[:] = ""
</snippet></ROW><ROW><id>14665623</id><snippet>self</snippet></ROW><ROW><id>14665623</id><snippet>    self = message
</snippet></ROW><ROW><id>14665735</id><snippet>choice = raw_input("*&gt;&gt;*")
choice = int(choice)
# . . .
if choice == 1:
# . . .
elif choice == 2:
</snippet></ROW><ROW><id>14665735</id><snippet>choice = raw_input("*&gt;&gt;*")
# . . .
if choice == '1':
# . . .
elif choice == '2':
</snippet></ROW><ROW><id>14665735</id><snippet>raw_input</snippet></ROW><ROW><id>14665735</id><snippet>'1'</snippet></ROW><ROW><id>14665735</id><snippet>'2'</snippet></ROW><ROW><id>14665735</id><snippet>'q'</snippet></ROW><ROW><id>14665741</id><snippet>.gitignore</snippet></ROW><ROW><id>14665846</id><snippet>if request.method=='POST':
    #bind form with form inputs and image
    thegigform=GigForm(request.POST,request.FILES)
    if thegigform.is_valid():
        thegigform.title=gigform.cleaned_data['title']
        thegigform.description=gigform.cleaned_data['description']
        thegigform.more_info=gigform.cleaned_data['more_info']
        thegigform.time_for_completion=gigform.cleaned_data['time_for_completion']
        thegigform.gig_image=gigform.cleaned_data['gig_image']
        finalgigform=gigform.save(commit=False)
        finalgigform.from_user=theuser
        finalgigform.save()
        return HttpResponseRedirect('done')
else:
    thegigform=GigForm()
context=RequestContext(request)
return render_to_response('sell.html',{'theuser':theuser,'thegigform':thegigform},context_instance=context)
</snippet></ROW><ROW><id>14665875</id><snippet>columns = ['DealID', 'PropId', 'LoanId', 'ServicerId', 'ServicerPropId']

d = [('A', [ 'BAC98765', '15', '000015', '30220144', '010-002-001']),
     ('B', [ 'BAC98765', '16', '000016', '30220092', '010-003-001']),
     ('C', [ 'BAC98765', '45', '000045', '30220155', '010-045-001']),
     ('D', [ 'BAC98765', '48', '000048', '30220157', '010-048-001']),]

D =  pandas.DataFrame.from_items(d, orient='index', columns=columns)

criterion1 = D['DealID'].map(lambda x: x == 'BAC98765' )
criterion2 = D['ServicerId'].map(lambda x: x == '30220144')

res = D[criterion1 &amp; criterion2]['ServicerPropId']
</snippet></ROW><ROW><id>14665875</id><snippet>map</snippet></ROW><ROW><id>14665875</id><snippet>res = D[(D['DealID'] == "BAC98765") &amp; (D["ServicerId"] == "30220144")]['ServicerPropId']
</snippet></ROW><ROW><id>14665875</id><snippet>In [35]: print res
A    010-002-001
Name: ServicerPropId

In [36]: type(res)
Out[36]: pandas.core.series.Series
</snippet></ROW><ROW><id>14666120</id><snippet>from sys import exit


more='y'
name = raw_input("What is your first name? ")
lastName = raw_input("What is your last name? ")
fullName = '%s %s' % (name, lastName)
nameList = list(fullName)

print 'Your full name is %s. Would you like to edit your name? If yes, type "y" and if no type "n".\n' % fullName
ans = raw_input()
if ans == 'n':
    print('Have a nice day.')
    exit(0)

while more != 'n':

    ans=raw_input('Would you like to A) change a letter B) remove a \
letter or C) add a letter?\
\n\n(Note: For all changes write the position of the letter to be affected \
starting at 1 and going from left to right.)\n')       
    if ans in ('A','a'):
        change=input('Which letter would you like to change? ')
        change -= 1
        ans=raw_input('What would you like to change it to? ')
        nameList[change]=ans
        fullName = ''.join(nameList)
    elif ans in ('B','b'):
        remove=input('Which letter would you like to remove? ')
        remove -= 1
        del nameList[remove]
        fullName = ''.join(nameList)
    elif ans in ('C','c'):
        add=input('After which letter would you like to add one? ')
        ans=raw_input('What letter would you like to add? ')
        nameList.insert(add,ans)
        fullName = ''.join(nameList)

    more=raw_input("Your name is now " + fullName + ".\n" + "Would you \
like to do anything else? Type 'y' if yes or 'n' if no. ")           
</snippet></ROW><ROW><id>14666236</id><snippet>urlconf</snippet></ROW><ROW><id>14666236</id><snippet>urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^grappelli/', include('grappelli.urls')),
</snippet></ROW><ROW><id>14666266</id><snippet>list</snippet></ROW><ROW><id>14666266</id><snippet>for</snippet></ROW><ROW><id>14666266</id><snippet>list-comprehension</snippet></ROW><ROW><id>14666266</id><snippet>list</snippet></ROW><ROW><id>14666266</id><snippet>tuples</snippet></ROW><ROW><id>14666266</id><snippet>def my_zip_sort(W, L):
    srt = argsort(W)
    return [(L[i], W[i]) for i in srt]
</snippet></ROW><ROW><id>14666266</id><snippet>n = 5
W = np.random.randint(10,size=5)
L = [chr(ord('A') + i) for i in W]

L # =&gt; ['A', 'C', 'H', 'G', 'C']

srt = np.argsort(W)
result = [(L[i], W[i]) for i in srt]


print result
[('A', 0), ('C', 2), ('C', 2), ('G', 6), ('H', 7)]
</snippet></ROW><ROW><id>14666360</id><snippet>class Empty:
    __slots__ =()

def mkEmpty():
    return Empty()

class NonEmpty():
    __slots__ = ('one', 'two')

    def __init__(self, one, two):
        self.one = one
        self.two = two

def mkNonEmpty(one, two):
    return NonEmpty(one, two)
</snippet></ROW><ROW><id>14666360</id><snippet>ne = NonEmpty(1, 2)
</snippet></ROW><ROW><id>14666360</id><snippet>class NonEmpty():
    __slots__ = ('one', 'two')

n = NonEmpty()
n.one = 12
n.two = 15
</snippet></ROW><ROW><id>14666397</id><snippet>ax.fmt_xdata</snippet></ROW><ROW><id>14666397</id><snippet>ax.fmt_xdata = lambda x: "{0:f}".format(x)
ax.fmt_ydata = lambda x: "{0:f}".format(x)
</snippet></ROW><ROW><id>14666407</id><snippet>&gt;&gt;&gt; import scipy.special
&gt;&gt;&gt; print scipy.special.k0.__doc__
k0(x[, out])

y=k0(x) returns the modified Bessel function of the second kind (sometimes called the third kind) of
order 0 at x.
&gt;&gt;&gt; scipy.special.k0(1)
0.42102443824070823
</snippet></ROW><ROW><id>14666407</id><snippet>&gt;&gt;&gt; print scipy.special.kn.__doc__
kn(x1, x2[, out])

y=kn(n,x) returns the modified Bessel function of the second kind (sometimes called the third kind) for
integer order n at x.
&gt;&gt;&gt; scipy.special.kn(0, 1)
0.42102443824070834
</snippet></ROW><ROW><id>14666437</id><snippet> fig.set_size_inches(w, h * num_rows, forward=True)
</snippet></ROW><ROW><id>14666811</id><snippet>QThread</snippet></ROW><ROW><id>14666811</id><snippet>Worker</snippet></ROW><ROW><id>14666811</id><snippet>QObject</snippet></ROW><ROW><id>14666811</id><snippet>sleep</snippet></ROW><ROW><id>14666811</id><snippet>import time, random, sys
#from PySide.QtCore import *
#from PySide.QtGui import *

from PyQt4 import QtCore
from PyQt4 import QtGui

from matplotlib.figure import Figure
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas

class ApplicationWindow(QtGui.QMainWindow):
    get_data = QtCore.pyqtSignal()

    def __init__(self, parent = None):

        QtGui.QMainWindow.__init__(self, parent)


        self.thread = QtCore.QThread(parent=self)
        self.worker = Worker(parent=None)
        self.worker.moveToThread(self.thread)

        self.create_main_frame()
        self.create_status_bar()

        self.startButton.clicked.connect(self.start_acquisition) 
        self.stopButton.clicked.connect(self.stop_acquisition)
        self.worker.pixel_list.connect(self.update_figure)
        self.worker.done.connect(self.update_UI)

        self.get_data.connect(self.worker.get_data)


        self.thread.start()


    def create_main_frame(self):
        self.main_frame = QtGui.QWidget()

        self.dpi = 100
        self.width = 10
        self.height = 8
        self.fig = Figure(figsize=(self.width, self.height), dpi=self.dpi)
        self.axes = self.fig.add_subplot(111)               
        self.axes.axis((0,512,0,120))

        self.canvas = FigureCanvas(self.fig)
        self.canvas.setParent(self.main_frame)
        self.canvas.updateGeometry()    
        self.canvas.draw()
        self.background = None

        self.lE_line, = self.axes.plot(range(512), [0 for i in xrange(512)], animated=True)
        self.hE_line, = self.axes.plot(range(512), [0 for i in xrange(512)], animated=True)          

        self.mpl_toolbar = NavigationToolbar(self.canvas, self.main_frame)

        self.startButton = QtGui.QPushButton(self.tr("&amp;Start"))
        self.stopButton = QtGui.QPushButton(self.tr("&amp;Stop"))

        layout = QtGui.QGridLayout()
        layout.addWidget(self.canvas, 0, 0)
        layout.addWidget(self.mpl_toolbar, 1, 0)
        layout.addWidget(self.startButton, 2, 0)       
        layout.addWidget(self.stopButton, 2, 1)

        self.main_frame.setLayout(layout)
        self.setCentralWidget(self.main_frame)

        self.setWindowTitle(self.tr("XRTdev Interface"))

    def create_status_bar(self):
        self.status_text = QtGui.QLabel("I am a status bar.  I need a status to show!")
        self.statusBar().addWidget(self.status_text, 1)

    def start_acquisition(self):
        self.worker.exiting = False
        self.startButton.setEnabled(False)
        self.stopButton.setEnabled(True)
        self.get_data.emit()

    def stop_acquisition(self):
        self.worker.exiting = True
        self.startButton.setEnabled(True)
        self.stopButton.setEnabled(False)
        self.cleanup_UI()

    def update_figure(self, lE, hE):
        if self.background == None:
            self.background = self.canvas.copy_from_bbox(self.axes.bbox)
        self.canvas.restore_region(self.background)
        self.lE_line.set_ydata(lE)
        self.hE_line.set_ydata(hE)
        self.axes.draw_artist(self.lE_line)
        self.axes.draw_artist(self.hE_line)
        self.canvas.blit(self.axes.bbox)

    def update_UI(self):
        self.startButton.setEnabled(True)
        self.stopButton.setEnabled(False)
        self.cleanup_UI()        

    def cleanup_UI(self):
        self.background = None
        self.axes.clear()        
        self.canvas.draw()

class Worker(QtCore.QObject):

    pixel_list = QtCore.pyqtSignal(list, list)
    done = QtCore.pyqtSignal()

    def __init__(self, parent = None):
        QtCore.QObject.__init__(self, parent)
        self.exiting = True

    @QtCore.pyqtSlot()
    def get_data(self):
        # simulate I/O
        print 'data_start'
        n = random.randrange(100,200)
        while not self.exiting and n &gt; 0:
            lE = [random.randrange(5,16) for i in xrange(512)]
            hE = [random.randrange(80,121) for i in xrange(512)]
            self.pixel_list.emit(lE, hE)
            time.sleep(0.05)
            n -= 1
        print 'n: ', n
        self.done.emit()
</snippet></ROW><ROW><id>14666825</id><snippet>IsThisOk</snippet></ROW><ROW><id>14666825</id><snippet>OptionA</snippet></ROW><ROW><id>14666825</id><snippet>self.k = kwargs[k]</snippet></ROW><ROW><id>14666825</id><snippet>setattr(self, "k", kwargs[k])</snippet></ROW><ROW><id>14666825</id><snippet>OptionB</snippet></ROW><ROW><id>14666825</id><snippet>namedtuple</snippet></ROW><ROW><id>14666825</id><snippet>collections</snippet></ROW><ROW><id>14666825</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; OptionC = namedtuple("OptionC", ["apples", "oranges"])
&gt;&gt;&gt; c = OptionC(2, 2) # you can also use keyword arguments, if you wish
&gt;&gt;&gt; print(c)
OptionC(apples=2, oranges=2)
</snippet></ROW><ROW><id>14666825</id><snippet>tuple</snippet></ROW><ROW><id>14666825</id><snippet>c.apples = 5</snippet></ROW><ROW><id>14666825</id><snippet>__init__</snippet></ROW><ROW><id>14666825</id><snippet>class OptionD:
    def __init__(apples=None, oranges=None):
        self.apples = apples
        self.oranges = oranges
</snippet></ROW><ROW><id>14667036</id><snippet>class Post(MPTTModel):
    poster = models.ForeignKey(User)
    content = models.TextField(verbose_name='Text', max_length=1000)
    parent = models.TreeForeignKey('self', null=True, blank=True, related_name='children')
    class MPTTMeta:
        order_insertion_by = ['poster']
</snippet></ROW><ROW><id>14667036</id><snippet> ....
 r = FirstPost.get_children()
</snippet></ROW><ROW><id>14667074</id><snippet>$ wget http://127.0.0.1:8000  
</snippet></ROW><ROW><id>14667086</id><snippet>maxlength</snippet></ROW><ROW><id>14667086</id><snippet>max_length</snippet></ROW><ROW><id>14667125</id><snippet>pip install virtualenv
</snippet></ROW><ROW><id>14667125</id><snippet>virtualenv [your project folder name]
</snippet></ROW><ROW><id>14667125</id><snippet>source bin/activate
</snippet></ROW><ROW><id>14667125</id><snippet>pip install flask
</snippet></ROW><ROW><id>14667125</id><snippet>echo $PATH &amp;&amp; echo $PYTHONPATH
</snippet></ROW><ROW><id>14667125</id><snippet>deactivate
</snippet></ROW><ROW><id>14667250</id><snippet>import pandas
pandas.read_fwf('f.out', 
   colspecs=[x[:2] for x in keys.values()],
   dtype=[x[2] for x in keys.values()]
   )
</snippet></ROW></DATA>