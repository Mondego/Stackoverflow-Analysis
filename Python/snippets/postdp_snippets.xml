<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19948876</id><snippet>s</snippet></ROW><ROW><id>19948876</id><snippet>scatter(x, y, s=500, color='green', marker='h')
#             ^^^^^
</snippet></ROW><ROW><id>19948876</id><snippet>scatter(x, y, s=[5, 50, 500, 1000, 1500, 2000], color='green', marker='h')
</snippet></ROW><ROW><id>19948876</id><snippet>matplotlib.pyplot.scatter</snippet></ROW><ROW><id>19949631</id><snippet>app.debug = True
app.run()
</snippet></ROW><ROW><id>19949631</id><snippet>app.run(debug=True)
</snippet></ROW><ROW><id>19950124</id><snippet>var</snippet></ROW><ROW><id>19950124</id><snippet>+</snippet></ROW><ROW><id>19950124</id><snippet>&gt;&gt;&gt; var = [['apple', 'banana'], ['red', 'yellow']]
&gt;&gt;&gt; mylist =  [['item1'], ['item2']] + var
&gt;&gt;&gt; mylist
[['item1'], ['item2'], ['apple', 'banana'], ['red', 'yellow']]
</snippet></ROW><ROW><id>19950124</id><snippet>[item, anotherList]</snippet></ROW><ROW><id>19950124</id><snippet>anotherList</snippet></ROW><ROW><id>19950353</id><snippet>self.str[:0]</snippet></ROW><ROW><id>19950353</id><snippet>self.str[:1]</snippet></ROW><ROW><id>19950353</id><snippet>self.str.startswith('{')
</snippet></ROW><ROW><id>19950428</id><snippet>p1</snippet></ROW><ROW><id>19950428</id><snippet>p2</snippet></ROW><ROW><id>19950428</id><snippet>p1.stdin</snippet></ROW><ROW><id>19950428</id><snippet>p1</snippet></ROW><ROW><id>19950428</id><snippet>stdin</snippet></ROW><ROW><id>19950428</id><snippet>p1.stdin.fileno()</snippet></ROW><ROW><id>19950428</id><snippet>p2</snippet></ROW><ROW><id>19950428</id><snippet>p1.stdin</snippet></ROW><ROW><id>19950428</id><snippet>p1.stdin</snippet></ROW><ROW><id>19950428</id><snippet>close_fds</snippet></ROW><ROW><id>19950428</id><snippet>p2</snippet></ROW><ROW><id>19950428</id><snippet>fork()</snippet></ROW><ROW><id>19950444</id><snippet>  Installed /Library/Python/2.7/site-packages/virtualenv-1.10.1-py2.7.egg    
  Processing dependencies for virtualenv
  Finished processing dependencies for virtualenv
</snippet></ROW><ROW><id>19950585</id><snippet>[^ s|x|y|z|ch|sh|a|e|i|o|u]
</snippet></ROW><ROW><id>19950585</id><snippet>acehiosuxyz |</snippet></ROW><ROW><id>19950585</id><snippet>ch</snippet></ROW><ROW><id>19950585</id><snippet>sh</snippet></ROW><ROW><id>19950585</id><snippet>|</snippet></ROW><ROW><id>19950585</id><snippet>[^acehiosuxyz |]
</snippet></ROW><ROW><id>19950585</id><snippet>s</snippet></ROW><ROW><id>19950585</id><snippet>.*(?&lt;!.[ sxyzaeiou]|ch|sh)s
</snippet></ROW><ROW><id>19950585</id><snippet>.*(?&lt;![ sxyzaeiou])(?&lt;!ch|sh)s
</snippet></ROW><ROW><id>19950585</id><snippet>$</snippet></ROW><ROW><id>19950585</id><snippet>\b</snippet></ROW><ROW><id>19951088</id><snippet>type 'javax.management.openmbean.CompositeDataSupport'
</snippet></ROW><ROW><id>19951088</id><snippet>result</snippet></ROW><ROW><id>19951088</id><snippet>str</snippet></ROW><ROW><id>19951088</id><snippet>CompositeDataSupport</snippet></ROW><ROW><id>19951088</id><snippet>result.toString()</snippet></ROW><ROW><id>19951088</id><snippet>CompositeDataSupport</snippet></ROW><ROW><id>19951088</id><snippet>toString</snippet></ROW><ROW><id>19951164</id><snippet>cmd = ["mplayer", musicdb[56]]
print repr(cmd)
subprocess.Popen(cmd, ...)
</snippet></ROW><ROW><id>19951164</id><snippet>repr</snippet></ROW><ROW><id>19951276</id><snippet>with open('input1', 'rb') as indexfile:
    lemma = {x.strip() for x in indexfile}

with open('input2', 'rb') as sensefile, open('output', 'wb') as outfile:
    for line in sensefile:
        nouns_interest = concept, slot, filler, freq = line.split()
        if concept not in lemma:
            outfile.write('\t'.join(nouns_interest) + '\n')
</snippet></ROW><ROW><id>19951276</id><snippet>slot</snippet></ROW><ROW><id>19951276</id><snippet>filler</snippet></ROW><ROW><id>19951276</id><snippet>            outfile.write('{}\t{}-{}\t{}\n'.format(*nouns_interest))
</snippet></ROW><ROW><id>19951405</id><snippet>for %f in (*.stl) do python file.py %f
</snippet></ROW><ROW><id>19951739</id><snippet>def search_file(filename, target, start_at = 0):
    with open(filename) as infile:
        for line_no, line in enumerate(infile):
            if line_no &lt; start_at:
                continue
            if line.find(target) &gt;= 0:
                return line_no
    return None
</snippet></ROW><ROW><id>19951895</id><snippet>copy_list = org_list[:] 
</snippet></ROW><ROW><id>19951968</id><snippet>time</snippet></ROW><ROW><id>19951968</id><snippet>sys.version</snippet></ROW><ROW><id>19951968</id><snippet>os</snippet></ROW><ROW><id>19951968</id><snippet>sys</snippet></ROW><ROW><id>19952162</id><snippet>def write_data(self, my_dict=None):
    my_dict = my_dict or self.bookmark_data['roots']
    for key, value in my_dict.items():
        if type(my_dict[key]) is dict:
            print my_dict[key]['name']
            for subkey, subvalue in my_dict[key].items():
                if subkey == "children" and len(my_dict[key][subkey]) &lt;&gt; 0:
                    for child in my_dict[key][subkey]:
                        self.write_data(child)           
                else:
                    print subkey, ": ",  my_dict[key][subkey]
</snippet></ROW><ROW><id>19952162</id><snippet>def write_data(self, my_dict=None):
    my_dict = my_dict or self.bookmark_data['roots']
    if 'name' in my_dict:
        print my_dict['name']

    for key, value in my_dict.items():
        if type(my_dict[key]) is dict:
            self.write_data(my_dict[key])
        elif type(my_dict[key]) is list:
            for item in my_dict[key]:
                self.write_data(item)
        else:
            print key, ": ",  my_dict[key]
</snippet></ROW><ROW><id>19952441</id><snippet>x</snippet></ROW><ROW><id>19952815</id><snippet>data = [['Day','Date','Week'], ['Day','Date','Week'], ['Day','Date','Week']]
print data[0]
</snippet></ROW><ROW><id>19952815</id><snippet>['Day','Date','Week']
</snippet></ROW><ROW><id>19952815</id><snippet>for x in range(10):
    print data[0]
</snippet></ROW><ROW><id>19952815</id><snippet>['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
['Day', 'Date', 'Week']
</snippet></ROW><ROW><id>19952815</id><snippet>data = [['Day','Date','Week'], ['Day','Date','Week'], ['Day','Date','Week']]
print [item[0] for item in data]
</snippet></ROW><ROW><id>19952815</id><snippet>['Day', 'Day', 'Day']
</snippet></ROW><ROW><id>19953073</id><snippet>In [1]: def assert_unicode(s):
            return s if isinstance(s, unicode) else unicode(s, 'unicode_escape')    

In [2]: assert_unicode(u'שלום')
Out[2]: u'\u05e9\u05dc\u05d5\u05dd'

In [3]: assert_unicode('שלום')
Out[3]: u'\xd7\xa9\xd7\x9c\xd7\x95\xd7\x9d'
</snippet></ROW><ROW><id>19953073</id><snippet>In [4]: def assert_unicode(s):
            return s if isinstance(s, unicode) else unicode(s, 'utf-8')    

In [5]: assert_unicode(u'שלום')
Out[5]: u'\u05e9\u05dc\u05d5\u05dd'

In [6]: assert_unicode('שלום')
Out[6]: u'\u05e9\u05dc\u05d5\u05dd'
</snippet></ROW><ROW><id>19953208</id><snippet>&gt;&gt;&gt; for state in ('Michigan', 'Florida'):
...    print '%s has: %s' % (state, cities[states[state]])
... 
</snippet></ROW><ROW><id>19953261</id><snippet>file.read</snippet></ROW><ROW><id>19953261</id><snippet>os.read</snippet></ROW><ROW><id>19953261</id><snippet>bytearray</snippet></ROW><ROW><id>19953261</id><snippet>io</snippet></ROW><ROW><id>19953261</id><snippet>readinto</snippet></ROW><ROW><id>19953261</id><snippet>mmap</snippet></ROW><ROW><id>19953261</id><snippet>buffer(mm, offset, size)</snippet></ROW><ROW><id>19953311</id><snippet>Regex re = new Regex(@"&lt;a href=""(.*?)""&gt;.+name=""(.*?)""");

MatchCollection matches = re.Matches(input);

foreach (Match match in matches)
{
    Console.WriteLine("URL={0}, Name={1}", match.Groups[1].Value, match.Groups[2].Value);
}
</snippet></ROW><ROW><id>19953338</id><snippet>db.collection.update(
    { 
        &lt;your query &gt;
    },
    { $setOnInsert: {
             &lt;your new document&gt;
        }
    },
    true //upsert
)
</snippet></ROW><ROW><id>19953451</id><snippet>str</snippet></ROW><ROW><id>19953451</id><snippet>int</snippet></ROW><ROW><id>19953451</id><snippet>if str(strengthone) &gt; int(10):
</snippet></ROW><ROW><id>19953451</id><snippet>if int(strengthone) &gt; int(10):
</snippet></ROW><ROW><id>19953451</id><snippet>int</snippet></ROW><ROW><id>19953451</id><snippet>print (type(10)) # &lt;type 'int'&gt;
</snippet></ROW><ROW><id>19953451</id><snippet>if int(strengthone) &gt; 10:
</snippet></ROW><ROW><id>19953451</id><snippet>input</snippet></ROW><ROW><id>19953451</id><snippet>strengthone = int(input ("Player 1,..."))
skilltwo = int(input ("Player 2,..."))
</snippet></ROW><ROW><id>19953451</id><snippet>if strengthone &gt; 10:
</snippet></ROW><ROW><id>19953521</id><snippet>class A:
    def __init__(self, h):
        self.h = h

    def __hash__(self):
        return self.h

x = A(1)
y = A(2)

a = {x, y}

print x in a, y in a
print a

print "----"

x.h = 2

print x in a, y in a
print a
</snippet></ROW><ROW><id>19953521</id><snippet>True True
set([&lt;__main__.A instance at 0x10d94fd40&gt;, &lt;__main__.A instance at 0x10d94fd88&gt;])
----
False True
set([&lt;__main__.A instance at 0x10d94fd40&gt;, &lt;__main__.A instance at 0x10d94fd88&gt;])
</snippet></ROW><ROW><id>19953521</id><snippet>x</snippet></ROW><ROW><id>19953521</id><snippet>in</snippet></ROW><ROW><id>19953521</id><snippet> hash_value =&gt; list of objects with this hash value
 another_hash_value =&gt; list of objects with this hash value
</snippet></ROW><ROW><id>19953521</id><snippet>in</snippet></ROW><ROW><id>19953521</id><snippet>a</snippet></ROW><ROW><id>19953521</id><snippet>  1 =&gt; [x]
  2 =&gt; [y]
</snippet></ROW><ROW><id>19953521</id><snippet>x</snippet></ROW><ROW><id>19953521</id><snippet>2</snippet></ROW><ROW><id>19953521</id><snippet>x</snippet></ROW><ROW><id>19953521</id><snippet>False</snippet></ROW><ROW><id>19953521</id><snippet>a.add(x)
print x in a, y in a
print a
</snippet></ROW><ROW><id>19953521</id><snippet>True True
set([&lt;__main__.A instance at 0x107cbfd40&gt;, 
     &lt;__main__.A instance at 0x107cbfd88&gt;, 
     &lt;__main__.A instance at 0x107cbfd40&gt;])
</snippet></ROW><ROW><id>19953764</id><snippet>plt.subplots()</snippet></ROW><ROW><id>19953764</id><snippet>ax[plot]</snippet></ROW><ROW><id>19953764</id><snippet>len(channels)</snippet></ROW><ROW><id>19953764</id><snippet>squeeze=False</snippet></ROW><ROW><id>19953764</id><snippet>.subplots()</snippet></ROW><ROW><id>19953764</id><snippet> def plot(df):
    channels=[]
    for i in df:
        channels.append(i)

    fig, ax = plt.subplots(len(channels),1, sharex=True, figsize=(50,100), squeeze=False)

    plot=0    
    for j in df: 

        ax[plot,0].plot(df["%s" % j])
        ax[plot,0].set_xlabel('%s' % j)
        plot=plot+1

    plt.tight_layout()
    plt.show() 
</snippet></ROW><ROW><id>19953764</id><snippet>squeeze</snippet></ROW><ROW><id>19953764</id><snippet>ax[plot,0]</snippet></ROW><ROW><id>19953860</id><snippet>NameError</snippet></ROW><ROW><id>19953860</id><snippet>r = requests.get("http://api.wunderground.com/api/0def10027afaebb7/forecast/q/" + countrychoice + "/" + citychoice + ".json")
</snippet></ROW><ROW><id>19953860</id><snippet>countrychoice</snippet></ROW><ROW><id>19953860</id><snippet>citychoice</snippet></ROW><ROW><id>19953860</id><snippet>rc.countrychoice</snippet></ROW><ROW><id>19953860</id><snippet>rc.citychoice</snippet></ROW><ROW><id>19953909</id><snippet>onlyletters</snippet></ROW><ROW><id>19953909</id><snippet>onlyLetters</snippet></ROW><ROW><id>19953909</id><snippet>ignorecase</snippet></ROW><ROW><id>19953909</id><snippet>if ignorecase:
    return onlyLetters.lower() == onlyletters.lower()
else:
    return onlyLetters == onlyletters
</snippet></ROW><ROW><id>19954201</id><snippet>soup</snippet></ROW><ROW><id>19954201</id><snippet>from bs4 import BeautifulSoup

page = BeautifulSoup(the_page)
table = page.find('table', {'id': 'ctl00_Main_lvMyAccount_Table1'})
links = table.findAll('a')

# Print href
for link in links:
   link['href']
</snippet></ROW><ROW><id>19954201</id><snippet>In [8]: table = page.find('table', {'id' : 'ctl00_Main_lvMyAccount_Table1'})

In [9]: links = table.findAll('a')

In [10]: for link in links:
   ....:     print link['href']
   ....:     
javascript:__doPostBack('ctl00$Main$lvMyAccount$SortByAcctNum','')
javascript:__doPostBack('ctl00$Main$lvMyAccount$SortByServAdd','')
javascript:__doPostBack('ctl00$Main$lvMyAccount$SortByAcctName','')
javascript:__doPostBack('ctl00$Main$lvMyAccount$SortByStatus','')
</snippet></ROW><ROW><id>19954323</id><snippet>json</snippet></ROW><ROW><id>19954323</id><snippet>'test'</snippet></ROW><ROW><id>19954323</id><snippet>import json

with open(inputjsonfile, 'r') as ifh:
    data = json.load(ifh)

    for i, entry in enumerate(data['test']):
        with open('outputfile-test-{}.json'.format(i), 'w') as ofh:
            json.dump(entry, ofh)
</snippet></ROW><ROW><id>19954323</id><snippet>entry['name']</snippet></ROW><ROW><id>19954471</id><snippet>map</snippet></ROW><ROW><id>19954471</id><snippet>dict</snippet></ROW><ROW><id>19954471</id><snippet>None</snippet></ROW><ROW><id>19954471</id><snippet>map(None, iterable1, iterable2)</snippet></ROW><ROW><id>19954471</id><snippet>zip(iterable1, iterable2)</snippet></ROW><ROW><id>19954471</id><snippet>map()</snippet></ROW><ROW><id>19954471</id><snippet>None</snippet></ROW><ROW><id>19954471</id><snippet>&gt;&gt;&gt; list(map(None, [1], [2]))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not callable
</snippet></ROW><ROW><id>19954471</id><snippet>zip()</snippet></ROW><ROW><id>19954471</id><snippet>defsTwo = dict(zip(letters, defsOne))
</snippet></ROW><ROW><id>19954583</id><snippet>pygame.display.Info</snippet></ROW><ROW><id>19954583</id><snippet>display.set_mode</snippet></ROW><ROW><id>19954583</id><snippet>display.set_mode</snippet></ROW><ROW><id>19954583</id><snippet>current_h</snippet></ROW><ROW><id>19954583</id><snippet>current_w</snippet></ROW><ROW><id>19954583</id><snippet>pygame.display.Info()</snippet></ROW><ROW><id>19954583</id><snippet>current_h</snippet></ROW><ROW><id>19954583</id><snippet>current_w</snippet></ROW><ROW><id>19954583</id><snippet>infoObject = pygame.display.Info()
pygame.display.set_mode((infoObject.current_w, infoObject.current_h))
</snippet></ROW><ROW><id>19954619</id><snippet>[:-1]</snippet></ROW><ROW><id>19954619</id><snippet>startswith</snippet></ROW><ROW><id>19954619</id><snippet>endswith</snippet></ROW><ROW><id>19954619</id><snippet>if str1.startswith('"') and str1.endswith('"'):
</snippet></ROW><ROW><id>19954619</id><snippet>list2=['"xxx"','"Name"']
str1=list2[0]
if str1.startswith('"') and str1.endswith('"'):
    print "hi"
else:
    print "condition fails"
</snippet></ROW><ROW><id>19954619</id><snippet>hi
</snippet></ROW><ROW><id>19955335</id><snippet>struct</snippet></ROW><ROW><id>19955335</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack( "&lt;H", 29 )
'\x1d\x00'
</snippet></ROW><ROW><id>19955335</id><snippet>'H'</snippet></ROW><ROW><id>19955335</id><snippet>'&lt;'</snippet></ROW><ROW><id>19955335</id><snippet>'&lt;'</snippet></ROW><ROW><id>19955335</id><snippet>'='</snippet></ROW><ROW><id>19955335</id><snippet>'!'</snippet></ROW><ROW><id>19955335</id><snippet>'&gt;'</snippet></ROW><ROW><id>19955335</id><snippet>'&gt;'</snippet></ROW><ROW><id>19955335</id><snippet>struct.pack( "&gt;H", 29)</snippet></ROW><ROW><id>19955335</id><snippet>'\x00\x1d'</snippet></ROW><ROW><id>19955335</id><snippet>29</snippet></ROW><ROW><id>19955335</id><snippet>'\x1d\x00'</snippet></ROW><ROW><id>19955355</id><snippet>print()</snippet></ROW><ROW><id>19955355</id><snippet>Numberfile.write(str(s) + '\n')
</snippet></ROW><ROW><id>19955355</id><snippet>print()</snippet></ROW><ROW><id>19955355</id><snippet>print(s, file=Numberfile)
</snippet></ROW><ROW><id>19955355</id><snippet>print</snippet></ROW><ROW><id>19955355</id><snippet>print()</snippet></ROW><ROW><id>19955355</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>19955371</id><snippet>def f1():
    def f2():
        print g[0]
        g[0] = 1
        print g[0]
    g =[0]
    print g[0]
    f2()
    print g[0]

    f1()
</snippet></ROW><ROW><id>19955436</id><snippet>#******************************************#
# Tweet-a-Pot by Gregg Horton 2011 #
# Please email changes or #
# updates to greggawatt@instructables.com #
# *****************************************#

##Import Libraries

import twitter
import serial
import time

##authenticate yourself with twitter
api = twitter.Api(consumer_key='consumerkeyhere', consumer_secret='consumersecrethere', access_token_key='accesskey', access_token_secret='accesssecret')

##set to your serial port
ser = serial.Serial('/dev/ttyUSB0', 19200)

## check serial port
def checkokay():
    ser.flushInput()
    time.sleep(3)
    line=ser.readline()
    time.sleep(3)

    if line == ' ':
        line=ser.readline()
        print 'here'
        ## Welcome message
        print 'Welcome To Drip Twit!'
        print 'Making Coffee..'
def driptwit():
    status = [ ]
    x = 0

    status = api.GetUserTimeline('X') ##grab latest statuses

    checkIt = [s.text for s in status] ##put status in an array

    drip = checkIt[0].split() ##split first tweet into words

    ## check for match and write to serial if match
    if drip[0] == '#driptwit':
        print 'Tweet Recieved, Making Coffee'
        ser.write('1')
        elif drip[0] == '#driptwitstop': ##break if done
        ser.write('0')
        print 'stopped, awaiting instructions.'
        else:
        ser.write('0')
        print 'Awaiting Tweet'


while 1:
    driptwit() ## call driptwit function
    time.sleep(15) ## sleep for 15 seconds to avoid rate limiting
</snippet></ROW><ROW><id>19955577</id><snippet>pandas</snippet></ROW><ROW><id>19955577</id><snippet>def structured_shape(x):
    if len(x.dtype) &gt; 0
        return list(x.shape) + [len(x.dtype)]
    else:
        return x.shape
</snippet></ROW><ROW><id>19955857</id><snippet>sudo yum install gcc
</snippet></ROW><ROW><id>19956022</id><snippet>pack()</snippet></ROW><ROW><id>19956022</id><snippet>grid()</snippet></ROW><ROW><id>19956022</id><snippet>from Tkinter import *
import tkFont

class Application:
    def __init__(self, top):
        self.top=top
        # initializer for gui
        self.gui()

    def gui(self):
        var="Application"
        helv16=tkFont.Font(self.top,family="Helvetica",size=16,slant="italic")
        self.label1=Label(self.top,text=var,font=helv16,bd=5,fg='#2ddef9',bg='#aaecaa',relief=RIDGE,padx=17,pady=4,justify="center")
        self.label1.pack(side=TOP)

        label2=Label(self.top,text='Proxy City', bd=3,fg='red',bg='#FFFFFF',relief=GROOVE,padx=18,pady=4,justify="center").pack()
        # setting default proxy city to Bangalore
        self.v=IntVar()
        # initiallize to Bangalore
        self.v.set(1)


        list_city=[("Bangalore", 1), ("Chennai", 2), ("USA", 3), ("Chaina", 4)]
        for city, num in list_city:
            #print city, num
            Radiobutton(self.top, text=city, padx=10,pady=5, variable=self.v, value=num,command=self.sel, bd=3,fg='red',bg='#FFFFFF',relief=GROOVE).pack(anchor='w')

        label3=Label(self.top,text='Add URL', bd=3,fg='red',bg='#FFFFFF',relief=GROOVE,padx=17,pady=4,justify="center").pack()
        entry3=Entry(self.top,relief=SUNKEN,justify=CENTER,bd=3,fg='#0000FF',font='arial').pack()

    def sel(self):
        selection = "You selected the option " + str(self.v.get())
        self.label1.config(text = selection)


def main():
    top=Tk()
    top.geometry("680x600+400+240")
    top.title("Application")
    Application(top)
    top.mainloop()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>19956022</id><snippet>label3=Label(self.top,text='Add URL', bd=3,fg='red',bg='#FFFFFF',relief=GROOVE,padx=17,pady=4,justify="center")
entry3=Entry(self.top,relief=SUNKEN,justify=CENTER,bd=3,fg='#0000FF',font='arial')

label3.grid(row=3, column=0)
entry3.grid(row=3, column=1)

label3=Label(self.top,text='Add URL', bd=3,fg='red',bg='#FFFFFF',relief=GROOVE,padx=17,pady=4,justify="center")
entry3=Entry(self.top,relief=SUNKEN,justify=CENTER,bd=3,fg='#0000FF',font='arial')
label3.grid(row=4, column=0)
entry3.grid(row=4, column=1)
</snippet></ROW><ROW><id>19956059</id><snippet>import importlib

def importExtension(extension):
     try:
        importlib.import_module(name)
    except:
        Do stuff
importExtension("blah")
</snippet></ROW><ROW><id>19956059</id><snippet>__import__(..)</snippet></ROW><ROW><id>19956281</id><snippet>#!/bin/sh
</snippet></ROW><ROW><id>19956281</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>19956310</id><snippet>ssh</snippet></ROW><ROW><id>19956310</id><snippet>nohup nice -n 5 python3 blah.py &gt; log.txt &amp;
</snippet></ROW><ROW><id>19956310</id><snippet>stderr</snippet></ROW><ROW><id>19956310</id><snippet>stdout</snippet></ROW><ROW><id>19956310</id><snippet>log.txt</snippet></ROW><ROW><id>19956324</id><snippet>nl</snippet></ROW><ROW><id>19956324</id><snippet>npred</snippet></ROW><ROW><id>19956324</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19956324</id><snippet>numpy.dtype</snippet></ROW><ROW><id>19956324</id><snippet>n1</snippet></ROW><ROW><id>19956324</id><snippet>npred</snippet></ROW><ROW><id>19956324</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array(['a', 'b', 'c'])
&gt;&gt;&gt; b = np.array([1, 2, 3])
&gt;&gt;&gt; type(a), type(b)
 (numpy.ndarray, numpy.ndarray)
&gt;&gt;&gt; a + b
 unsupported operand type(s) for +: 'numpy.ndarray' and 'numpy.ndarray
</snippet></ROW><ROW><id>19956324</id><snippet>&gt;&gt;&gt; a.dtype, b.dtype
 (dtype('S1'), dtype('int64'))
</snippet></ROW><ROW><id>19956571</id><snippet>sites</snippet></ROW><ROW><id>19956571</id><snippet>sites</snippet></ROW><ROW><id>19956571</id><snippet>Site</snippet></ROW><ROW><id>19956571</id><snippet>www.example.com</snippet></ROW><ROW><id>19956571</id><snippet>SITE_ID</snippet></ROW><ROW><id>19956790</id><snippet>udskrift.write((" %.5E , %.5E\n" % (entry[2], entry[3])).replace('E+', 'E'))
</snippet></ROW><ROW><id>19956807</id><snippet>os.getpid()</snippet></ROW><ROW><id>19956889</id><snippet>numpy.float64</snippet></ROW><ROW><id>19956889</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>19956889</id><snippet>g_=array([g])</snippet></ROW><ROW><id>19956889</id><snippet>import numpy as np

g = list()
k = range(8,15)
for i in k:
    q = range(i)
    g.append(np.mean(q))

np.savetxt('myfile.txt', np.array(g), fmt='%.2f')
</snippet></ROW><ROW><id>19956889</id><snippet>myfile.txt</snippet></ROW><ROW><id>19956889</id><snippet>3.50
4.00
4.50
5.00
5.50
6.00
6.50
</snippet></ROW><ROW><id>19956928</id><snippet>set.discard()</snippet></ROW><ROW><id>19956928</id><snippet>self.new_animals.discard(animal)
</snippet></ROW><ROW><id>19956928</id><snippet>&gt;&gt;&gt; someset = {1, 2, 3}
&gt;&gt;&gt; someset.discard({1})
&gt;&gt;&gt; someset.discard(2)
&gt;&gt;&gt; someset
set([1, 3])
</snippet></ROW><ROW><id>19956928</id><snippet>2</snippet></ROW><ROW><id>19956928</id><snippet>1</snippet></ROW><ROW><id>19956928</id><snippet>for animal in self.animals:    
    for other_animal in set(self.animals).difference([animal]):
        if animal.pos == other_animal.pos:
            self.animals_to_die.add(animal)
            print other_animal
            print animal
            self.animals_to_die.add(other_animal)
</snippet></ROW><ROW><id>19956928</id><snippet>.pos</snippet></ROW><ROW><id>19956928</id><snippet>new_animals</snippet></ROW><ROW><id>19956928</id><snippet>self</snippet></ROW><ROW><id>19957214</id><snippet>pip</snippet></ROW><ROW><id>19957214</id><snippet>pip install beautifulsoup4
</snippet></ROW><ROW><id>19957214</id><snippet>C:\Python27\Scripts\pip install beautifulsoup4
</snippet></ROW><ROW><id>19957214</id><snippet>C:\Python27\Scripts\pip.exe install beautifulsoup4
</snippet></ROW><ROW><id>19957214</id><snippet>pip</snippet></ROW><ROW><id>19957413</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.ma.array([1, 2, 3, -1, 5], mask=[0, 0, 0, 1, 0])
&gt;&gt;&gt; a.data[a &lt; 2] = 999
&gt;&gt;&gt; a
 masked_array(data = [999 2 3 -- 5],
         mask = [False False False  True False],
   fill_value = 999999)
</snippet></ROW><ROW><id>19957596</id><snippet>&lt;div id="locationInfo" /&gt;
</snippet></ROW><ROW><id>19957596</id><snippet>{ date_updated: "13-11-2013 15:45:98",
  x_position: 105,
  y_position: 120,
  alpha: 123 }
</snippet></ROW><ROW><id>19957596</id><snippet>$.get( "getLocationInfo.php", function( data ) {
  var html = 'Location: ' + data.x_position + ', ' + data.y_position + ' @' + data.alpha
  $( "#locationInfo" ).html( html );
});
</snippet></ROW><ROW><id>19957610</id><snippet>y = y.A.squeeze()
</snippet></ROW><ROW><id>19957610</id><snippet>In [217]: y = np.matrix([1,2,3]).T

In [218]: y
Out[218]: 
matrix([[1],
        [2],
        [3]])

In [219]: y.shape
Out[219]: (3, 1)

In [220]: y = y.A

In [221]: y
Out[221]: 
array([[1],
       [2],
       [3]])

In [222]: y.shape
Out[222]: (3, 1)

In [223]: y.squeeze()
Out[223]: array([1, 2, 3])

In [224]: y = y.squeeze()

In [225]: y.shape
Out[225]: (3,)
</snippet></ROW><ROW><id>19957669</id><snippet>kind: MyEntity
properties:
- name: X
- name: X

kind: MyEntity
properties:
- name: X
- direction: desc
  name: X
</snippet></ROW><ROW><id>19957669</id><snippet>index.yaml</snippet></ROW><ROW><id>19957669</id><snippet>appcfg.py vacuum_indexes</snippet></ROW><ROW><id>19957891</id><snippet>passwords = {'foo':'vlTTdhML', 'bar':'xneoYb2c', 'baz':'wnkyVsBI'}
username, password = queue, passwords[queue]
</snippet></ROW><ROW><id>19957891</id><snippet>username, password = queue, passwords.get(queue, None)
</snippet></ROW><ROW><id>19957891</id><snippet>dosomething(queue)</snippet></ROW><ROW><id>19957891</id><snippet>dosomething</snippet></ROW><ROW><id>19957974</id><snippet>to_exclude = ['foo']

from somemodule import *

for name in to_exclude:
    del globals()[name]
</snippet></ROW><ROW><id>19958067</id><snippet>find</snippet></ROW><ROW><id>19958067</id><snippet>find_all</snippet></ROW><ROW><id>19958067</id><snippet>raisonsociale = soup.find_all('td', {'class' : 'verif_col1'})
</snippet></ROW><ROW><id>19958067</id><snippet>text</snippet></ROW><ROW><id>19958067</id><snippet>for noms in raisonsociale:
    print noms.text
</snippet></ROW><ROW><id>19958232</id><snippet>&gt;&gt;&gt; df1 = pd.pivot_table(df, rows=['A','B'], cols='C', aggfunc=np.sum)
&gt;&gt;&gt; df1
              D                   
C             a        y         z
A   B                             
bar x  0.161702      NaN       NaN
foo w  0.749007  0.85552       NaN
    x       NaN      NaN  0.458701

&gt;&gt;&gt; index = list(iter.product(df['A'].unique(), df['B'].unique()))
&gt;&gt;&gt; df1.reindex(index)
              D                   
C             a        y         z
foo w  0.749007  0.85552       NaN
    x       NaN      NaN  0.458701
bar w       NaN      NaN       NaN
    x  0.161702      NaN       NaN
</snippet></ROW><ROW><id>19958306</id><snippet>print(re.sub('&lt;[^&gt;]*&gt;', '', str(content_tag)))
</snippet></ROW><ROW><id>19958372</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def two_lines(x, a, b, c, d):
    one = a*x + b
    two = c*x + d
    return np.maximum(one, two)
</snippet></ROW><ROW><id>19958372</id><snippet>x, y = np.genfromtxt('tmp.txt', unpack=True, delimiter=',')

pw0 = (.02, 30, .2, -2000) # a guess for slope, intercept, slope, intercept
pw, cov = curve_fit(two_lines, x, y, pw0)
crossover = (pw[3] - pw[1]) / (pw[0] - pw[2])

plt.plot(x, y, 'o', x, two_lines(x, *pw), '-')
</snippet></ROW><ROW><id>19958372</id><snippet>def hyperbola(x, a, b, c, d, e):
    """ hyperbola(x) with parameters
        a/b = asymptotic slope
         c  = curvature at vertex
         d  = offset to vertex
         e  = vertical offset
    """
    return a*np.sqrt((b*c)**2 + (x-d)**2)/b + e

def rot_hyperbola(x, a, b, c, d, e, th):
    pars = a, b, c, 0, 0 # do the shifting after rotation
    xd = x - d
    hsin = hyperbola(xd, *pars)*np.sin(th)
    xcos = xd*np.cos(th)
    return e + hyperbola(xcos - hsin, *pars)*np.cos(th) + xcos - hsin
</snippet></ROW><ROW><id>19958372</id><snippet>h0 = 1.1, 1, 0, 5000, 100, .5
h, hcov = curve_fit(rot_hyperbola, x, y, h0)
plt.plot(x, y, 'o', x, two_lines(x, *pw), '-', x, rot_hyperbola(x, *h), '-')
plt.legend(['data', 'piecewise linear', 'rotated hyperbola'], loc='upper left')
plt.show()
</snippet></ROW><ROW><id>19958372</id><snippet>def line_exp(x, a, b, c, d, e):
    return a*x + b + c*np.exp((x-d)/e)

e0 = .1, 20., .01, 1000., 2000.
e, ecov = curve_fit(line_exp, x, y, e0)
</snippet></ROW><ROW><id>19958372</id><snippet>from scipy.interpolate import UnivariateSpline
s = UnivariateSpline(x, y, s=x.size)  #larger s-value has fewer "knots"
plt.plot(x, s(x))
</snippet></ROW><ROW><id>19958819</id><snippet>functools.partial</snippet></ROW><ROW><id>19958819</id><snippet>&gt;&gt;&gt; from functools import partial
def func(a, b, c):
...     print a, b, c
...     
&gt;&gt;&gt; funcs = [partial(func, c=i) for i in xrange(5)]
&gt;&gt;&gt; funcs[0](1, 2)
1 2 0
&gt;&gt;&gt; funcs[1](1, 2)
1 2 1
&gt;&gt;&gt; funcs[2](1, 2)
1 2 2
</snippet></ROW><ROW><id>19958819</id><snippet>lambda</snippet></ROW><ROW><id>19958819</id><snippet>&gt;&gt;&gt; funcs = [lambda a, b, i=i:func(a, b, c=i) for i in xrange(5)]
&gt;&gt;&gt; funcs[0](1, 2)
1 2 0
&gt;&gt;&gt; funcs[1](1, 2)
1 2 1
</snippet></ROW><ROW><id>19958883</id><snippet>averageAge = (float(ages)) / (float(howManyNames))
</snippet></ROW><ROW><id>19958883</id><snippet>averageAge = sum(ages) / float(howManyNames)
</snippet></ROW><ROW><id>19958883</id><snippet>In [2]: help(float)
</snippet></ROW><ROW><id>19958883</id><snippet>float</snippet></ROW><ROW><id>19958883</id><snippet>Help on class float in module __builtin__:

class float(object)
 |  float(x) -&gt; floating point number
 |  
 |  Convert a string or number to a floating point number, if possible.
 |  
 |  Methods defined here:
...
</snippet></ROW><ROW><id>19958883</id><snippet>In [3]: float(3)
Out[3]: 3.0

In [4]: float("3")
Out[4]: 3.0
</snippet></ROW><ROW><id>19958883</id><snippet>In [5]: float([])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-5-79b9f7854b4b&gt; in &lt;module&gt;()
----&gt; 1 float([])

TypeError: float() argument must be a string or a number
</snippet></ROW><ROW><id>19958883</id><snippet>[]</snippet></ROW><ROW><id>19958883</id><snippet>list</snippet></ROW><ROW><id>19958883</id><snippet>float</snippet></ROW><ROW><id>19958883</id><snippet>float</snippet></ROW><ROW><id>19958883</id><snippet>ages = []
</snippet></ROW><ROW><id>19958883</id><snippet>ages</snippet></ROW><ROW><id>19958883</id><snippet>[]</snippet></ROW><ROW><id>19958883</id><snippet>list</snippet></ROW><ROW><id>19958883</id><snippet>python</snippet></ROW><ROW><id>19958883</id><snippet>sum</snippet></ROW><ROW><id>19958883</id><snippet>In [6]: sum([])
Out[6]: 0

In [7]: sum([1,2,3]) # 1 + 2 + 3
Out[7]: 6
</snippet></ROW><ROW><id>19958923</id><snippet>r'...'</snippet></ROW><ROW><id>19958923</id><snippet>zipfile.ZipFile(r"\\Crprvau01n1\Cdv_prd$\DataDrop\Quartz\IMM\DevRuns\Zinc.zip", 'r')
</snippet></ROW><ROW><id>19959160</id><snippet>logging</snippet></ROW><ROW><id>19959160</id><snippet>atexit</snippet></ROW><ROW><id>19959160</id><snippet>'w'</snippet></ROW><ROW><id>19959160</id><snippet>oracle.Connector()</snippet></ROW><ROW><id>19959160</id><snippet>__del__</snippet></ROW><ROW><id>19959160</id><snippet>atexit</snippet></ROW><ROW><id>19959160</id><snippet>logging</snippet></ROW><ROW><id>19959160</id><snippet>atexit</snippet></ROW><ROW><id>19959160</id><snippet>oracle.Connector().__del__()</snippet></ROW><ROW><id>19959160</id><snippet>self.__logger__.info()</snippet></ROW><ROW><id>19959160</id><snippet>DATABASE.close_connection()
</snippet></ROW><ROW><id>19959262</id><snippet>zip(a,b)</snippet></ROW><ROW><id>19959262</id><snippet>&gt;&gt;&gt; a=array([[1,1,1],[2,2,2],[3,3,3]]);b=array([[10,10,10],[20,20,20],[30,30,30]
&gt;&gt;&gt; zip(a,b)
[(array([1, 1, 1]), array([10, 10, 10])), (array([2, 2, 2]), array([20, 20, 20])), (array([3, 3, 3]), array([30, 30, 30]))]
</snippet></ROW><ROW><id>19959394</id><snippet>__dict__</snippet></ROW><ROW><id>19959394</id><snippet>__eq__</snippet></ROW><ROW><id>19959411</id><snippet>eval()</snippet></ROW><ROW><id>19959411</id><snippet>eval(equation, {'__builtins__': None})
</snippet></ROW><ROW><id>19959411</id><snippet>eval()</snippet></ROW><ROW><id>19959905</id><snippet>regex</snippet></ROW><ROW><id>19959905</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = 'NL20INGB0001234567'
&gt;&gt;&gt; re.sub(r'(\d+)(?=\d{4}$)', lambda m:'*'*len(m.group(1)), strs)
'NL20INGB******4567'
</snippet></ROW><ROW><id>19959914</id><snippet>&gt;&gt;&gt; a[a != 999] = (a[a != 999] &gt; 5)
&gt;&gt;&gt; a
array([[[  0,   0, 999],
        [  0,   1,   0]],

       [[999,   1,   1],
        [  1,   1,   1]]])
</snippet></ROW><ROW><id>19960116</id><snippet>something.isin(somewhere)</snippet></ROW><ROW><id>19960116</id><snippet>~something.isin(somewhere)</snippet></ROW><ROW><id>19960116</id><snippet>&gt;&gt;&gt; df
  countries
0        US
1        UK
2   Germany
3     China
&gt;&gt;&gt; countries
['UK', 'China']
&gt;&gt;&gt; df.countries.isin(countries)
0    False
1     True
2    False
3     True
Name: countries, dtype: bool
&gt;&gt;&gt; df[df.countries.isin(countries)]
  countries
1        UK
3     China
&gt;&gt;&gt; df[~df.countries.isin(countries)]
  countries
0        US
2   Germany
</snippet></ROW><ROW><id>19960391</id><snippet>#!/usr/bin/env python3
from subprocess import TimeoutExpired, check_output as qx
from timeit import default_timer as timer

start = timer()
try:
    qx("echo 'Process started'; sleep 2; echo 'Process finished'",
       shell=True, universal_newlines=True, timeout=1)
except TimeoutExpired as e:
    print("Got %r in %.2f seconds" % (e.output, timer() - start))
else:
    assert 0 # should not get here
</snippet></ROW><ROW><id>19960391</id><snippet>#!/usr/bin/env python
import signal
from subprocess import Popen, PIPE
from timeit import default_timer as timer

class Alarm(Exception):
    pass

def alarm_handler(signum, frame):
    raise Alarm

start = timer()
# start process
process = Popen("echo 'Process started'; sleep 2; echo 'Process finished'",
                shell=True, stdout=PIPE, bufsize=1, universal_newlines=True)

# set signal handler
signal.signal(signal.SIGALRM, alarm_handler)
signal.alarm(1) # produce SIGALRM in a second
buf = []
try:
    for line in iter(process.stdout.readline, ""):
        buf.append(line) # assume it is atomic
except Alarm:
    process.kill()
else:
    signal.alarm(0) # reset alarm
finally:
    output = ''.join(buf)
print("Got %r in %.2f seconds" % (output, timer() - start))
process.stdout.close()
process.wait()
</snippet></ROW><ROW><id>19960422</id><snippet>self.radio2 = wx.RadioButton(self, label="2 sec",pos=(35,55))
self.Bind(wx.EVT_RADIOBUTTON, self.SetLab2, id=self.radio2.GetId())

self.radio3 = wx.RadioButton(self, label="4 sec",pos=(35,75))
self.Bind(wx.EVT_RADIOBUTTON, self.SetLab3, id=self.radio3.GetId())
global Delay
if Delay is not None:
     getattr(self,"radio"+str(int(Delay[1])-1)).SetValue(True) 
</snippet></ROW><ROW><id>19960422</id><snippet>#instead of my_frame.Close() (or my_frame.Destroy())
my_frame.Hide()
</snippet></ROW><ROW><id>19960451</id><snippet>zFile.close()</snippet></ROW><ROW><id>19960700</id><snippet>tc</snippet></ROW><ROW><id>19960700</id><snippet>{% for book in books %}
  {% if book in tc_books %}
    already in this Topiccenter
  {% else %}
      add to this topiccenter
  {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>19960700</id><snippet>tc_books = Books.objects.filter(b_entries__topiccenter = tc)
</snippet></ROW><ROW><id>19960709</id><snippet>try:
    countries = paginator.page(selected_page)
except InvalidPage:
    countries = paginator.page(1)
</snippet></ROW><ROW><id>19960709</id><snippet>InvalidPage</snippet></ROW><ROW><id>19960709</id><snippet>from django.core.paginator import Paginator, InvalidPage

class MyPaginator(Paginator):
    def validate_number(self, number):
        try:
            number = super(MyPaginator, self).validate_number(number)
        except InvalidPage:
            number = 1

        return number


class GeonamesCountryViewSet(viewsets.ReadOnlyModelViewSet):
    paginator_class = MyPaginator
    ...
</snippet></ROW><ROW><id>19960742</id><snippet>with open(sys.argv[1], 'r') as f:
  for _ in xrange(0, 7, 1):
    print f.next().rstrip()
</snippet></ROW><ROW><id>19960751</id><snippet>from random import randint, choice
Animals_to_choose = [Passaro, Sapo, Rato, Coelho, Cobra, Tartaruga, Lobo] 
someset = set()
n_animals_to_create = 10

for number in range(n_animals_to_create):
    newanimal = choice(Animals_to_choose)()
    newanimal.number = number
    someset.add(newanimal)
</snippet></ROW><ROW><id>19960889</id><snippet>app = QApplication(sys.argv)
dialog = LoginWindow()
if dialog.exec_() == QDialog.Accepted:
    window = ChatWindow()
    window.show()
    app.exec_()
else:
    print('Login cancelled')
</snippet></ROW><ROW><id>19960933</id><snippet>def split_list(a_list, number_of_splits):
    step = len(a_list) / number_of_splits + (1 if len(a_list) % number_of_splits else 0)
    return [a_list[i*step:(i+1)*step] for i in range(number_of_splits)]

l = [1, 8, 2, 3, 4, 5, 6, 7, 1, 5, 3, 1, 2, 5]
print l
print split_list(l, 3)
print split_list(l, 2)
</snippet></ROW><ROW><id>19960933</id><snippet>[1, 8, 2, 3, 4, 5, 6, 7, 1, 5, 3, 1, 2, 5]
[[1, 8, 2, 3, 4], [5, 6, 7, 1, 5], [3, 1, 2, 5]]
[[1, 8, 2, 3, 4, 5, 6], [7, 1, 5, 3, 1, 2, 5]]
</snippet></ROW><ROW><id>19961040</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>19961189</id><snippet>#Connect to remote server
client_socket.connect((remote_ip, port))

print 'Socket Connected to ' + host + ' on ip ' + remote_ip

#Send some data to remote server
while True:
    print 'Enter a command: list or get &lt;filename&gt;'
    command = raw_input()
    if command.strip() == 'quit':
        break
    client_socket.send(command)

    data = client_socket.recv(socksize)
    print data

# Close the socket
client_socket.close()
</snippet></ROW><ROW><id>19961189</id><snippet>#wait to accept a connection - blocking call
client, addr = server_socket.accept()

#display client information
print 'Connected with ' + addr[0] + ':' + str(addr[1])
</snippet></ROW><ROW><id>19961189</id><snippet>if (data == 'list' or 'get'):
</snippet></ROW><ROW><id>19961189</id><snippet>if (data == 'list' or data == 'get'):
</snippet></ROW><ROW><id>19961189</id><snippet>data == 'list'</snippet></ROW><ROW><id>19961189</id><snippet>True</snippet></ROW><ROW><id>19961189</id><snippet>a or b</snippet></ROW><ROW><id>19961189</id><snippet>or</snippet></ROW><ROW><id>19961189</id><snippet>'get'</snippet></ROW><ROW><id>19961189</id><snippet>or</snippet></ROW><ROW><id>19961189</id><snippet>if</snippet></ROW><ROW><id>19961189</id><snippet>True</snippet></ROW><ROW><id>19961189</id><snippet>True</snippet></ROW><ROW><id>19961189</id><snippet>True</snippet></ROW><ROW><id>19961189</id><snippet>if</snippet></ROW><ROW><id>19961189</id><snippet>True</snippet></ROW><ROW><id>19961189</id><snippet>if (data == 'list' or data == 'get'):
</snippet></ROW><ROW><id>19961189</id><snippet>if (data.strip() in ('list'  'get')):
</snippet></ROW><ROW><id>19961189</id><snippet>try..finally</snippet></ROW><ROW><id>19961189</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>19961189</id><snippet>try:
    #keep talking with the client
    while 1:
        #Receiving from client
        data = client.recv(1024)

        if (data.strip() in ('list'  'get')):
            reply = 'receive: ' + data
            client.send(reply)
        else:
            reply = 'wrong command'
            client.send(reply)
except KeyboardInterrupt:
    print "Exiting gracefully."
finally:
    server_socket.close()
</snippet></ROW><ROW><id>19961189</id><snippet>finally</snippet></ROW><ROW><id>19961248</id><snippet>"\n"</snippet></ROW><ROW><id>19961248</id><snippet>&gt;&gt;&gt; words = "\n".join(["one", "two", "three"])
</snippet></ROW><ROW><id>19961248</id><snippet>'' 'one\n\two\nthree' ''</snippet></ROW><ROW><id>19961248</id><snippet>''</snippet></ROW><ROW><id>19961248</id><snippet>'one\n\two\nthree'</snippet></ROW><ROW><id>19961248</id><snippet>''</snippet></ROW><ROW><id>19961248</id><snippet>%cpaste</snippet></ROW><ROW><id>19961248</id><snippet>--</snippet></ROW><ROW><id>19961403</id><snippet>export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
</snippet></ROW><ROW><id>19961529</id><snippet>pygame.display.set_mode()</snippet></ROW><ROW><id>19961529</id><snippet>pygame.display.set_mode()</snippet></ROW><ROW><id>19961529</id><snippet>screen</snippet></ROW><ROW><id>19961529</id><snippet>screen</snippet></ROW><ROW><id>19961529</id><snippet>screen</snippet></ROW><ROW><id>19961529</id><snippet>def addPane(self, textToDisplay):
    myPane = Pane(self.screen) # send screen to Pane
    myPane.drawPane(textToDisplay)

# ...

class Pane():

    def __init__(self, screen):
        self.Screen = screen # get screen 
</snippet></ROW><ROW><id>19961529</id><snippet>pygame.display.set_mode()</snippet></ROW><ROW><id>19961529</id><snippet>clear()</snippet></ROW><ROW><id>19961550</id><snippet>brew doctor</snippet></ROW><ROW><id>19961550</id><snippet>Warning: /usr/local/share/python is not needed in PATH.
Formerly homebrew put Python scripts you installed via `pip` or `pip3`
(or `easy_install`) into that directory above but now it can be removed
from your PATH variable.
Python scripts will now install into /usr/local/bin.
You can delete anything, except 'Extras', from the /usr/local/share/python
(and /usr/local/share/python3) dir and install affected Python packages
anew with `pip install --upgrade`.

Warning: /usr/bin occurs before /usr/local/bin
This means that system-provided programs will be used instead of those
provided by Homebrew. The following tools exist at both paths:
</snippet></ROW><ROW><id>19961550</id><snippet>mkvirtualenv py3000 -p python3</snippet></ROW><ROW><id>19961557</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(data)
&gt;&gt;&gt; df.pivot(index=0, columns=1, values=2)
# avg DataFrame
1      c1     c2
0               
r1  avg11  avg12
r2  avg21  avg22
&gt;&gt;&gt; df.pivot(index=0, columns=1, values=3)
# stdev DataFrame
1        c1       c2
0                   
r1  stdev11  stdev12
r2  stdev21  stdev22
</snippet></ROW><ROW><id>19961585</id><snippet>a -= b</snippet></ROW><ROW><id>19961585</id><snippet>a = a - b</snippet></ROW><ROW><id>19961585</id><snippet>a - b</snippet></ROW><ROW><id>19961585</id><snippet>a</snippet></ROW><ROW><id>19961585</id><snippet>a -= b</snippet></ROW><ROW><id>19961585</id><snippet>a</snippet></ROW><ROW><id>19961585</id><snippet>a</snippet></ROW><ROW><id>19961585</id><snippet>&gt;&gt;&gt; s1 = set(range(3))
&gt;&gt;&gt; s2 = s1
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0, 1, 2}, 4303749432, {0, 1, 2}, 4303749432)
&gt;&gt;&gt; s1 -= {1}
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0, 2}, 4303749432, {0, 2}, 4303749432)
&gt;&gt;&gt; s1 = s1 - {2}
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0}, 4303749664, {0, 2}, 4303749432)
</snippet></ROW><ROW><id>19961585</id><snippet>-=</snippet></ROW><ROW><id>19961585</id><snippet>s1</snippet></ROW><ROW><id>19961585</id><snippet>s2</snippet></ROW><ROW><id>19961585</id><snippet>-</snippet></ROW><ROW><id>19961585</id><snippet>s1</snippet></ROW><ROW><id>19961585</id><snippet>id</snippet></ROW><ROW><id>19961585</id><snippet>s2</snippet></ROW><ROW><id>19961585</id><snippet>a = a - b</snippet></ROW><ROW><id>19961585</id><snippet>a = a.__sub__(b)</snippet></ROW><ROW><id>19961585</id><snippet>a -= b</snippet></ROW><ROW><id>19961585</id><snippet>a = a.__isub__(b)</snippet></ROW><ROW><id>19961585</id><snippet>__isub__</snippet></ROW><ROW><id>19961585</id><snippet>a -= b</snippet></ROW><ROW><id>19961585</id><snippet>__sub__</snippet></ROW><ROW><id>19961585</id><snippet>__isub__</snippet></ROW><ROW><id>19961585</id><snippet>__sub__</snippet></ROW><ROW><id>19961585</id><snippet>__ifoo__</snippet></ROW><ROW><id>19961585</id><snippet>x += y</snippet></ROW><ROW><id>19961585</id><snippet>__iadd__()</snippet></ROW><ROW><id>19961585</id><snippet>x.__iadd__(y)</snippet></ROW><ROW><id>19961585</id><snippet>__iadd__()</snippet></ROW><ROW><id>19961585</id><snippet>x.__add__(y)</snippet></ROW><ROW><id>19961585</id><snippet>y.__radd__(x)</snippet></ROW><ROW><id>19961585</id><snippet>x + y</snippet></ROW><ROW><id>19961585</id><snippet>__rsub__</snippet></ROW><ROW><id>19961585</id><snippet>set</snippet></ROW><ROW><id>19961689</id><snippet>datetime</snippet></ROW><ROW><id>19961689</id><snippet>{"contents": "%s" % (datetime.date.today() + datetime.timedelta(days=1))}
</snippet></ROW><ROW><id>19961689</id><snippet>+</snippet></ROW><ROW><id>19961689</id><snippet>%</snippet></ROW><ROW><id>19961689</id><snippet>&gt;&gt;&gt; "%s" % datetime.date.today() + datetime.timedelta(days=1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'datetime.timedelta' objects
&gt;&gt;&gt; "%s" % (datetime.date.today() + datetime.timedelta(days=1))
'2013-11-14'
</snippet></ROW><ROW><id>19961689</id><snippet>"%s" % datetime.date.today()</snippet></ROW><ROW><id>19961689</id><snippet>timedelta()</snippet></ROW><ROW><id>19961689</id><snippet>str()</snippet></ROW><ROW><id>19961689</id><snippet>{"contents": str(datetime.date.today() + datetime.timedelta(days=1))}
</snippet></ROW><ROW><id>19961810</id><snippet>axis</snippet></ROW><ROW><id>19961810</id><snippet>argmin</snippet></ROW><ROW><id>19961810</id><snippet>axis=0</snippet></ROW><ROW><id>19961810</id><snippet>dist.argmin(0)

dist = array([[[  6.00e-15,   7.00e-15,   5.00e-01],
               [  1.50e+00,   5.00e-15,   5.00e-01],
               [  7.50e-01,   9.80e-01,   7.80e-01]],

              [[  1.50e+00,   7.50e-01,   5.00e-01],
               [  8.00e-15,   5.00e-15,   8.00e-01],
               [  7.50e-01,   9.80e-01,   7.80e-01]],

              [[  1.25e+00,   5.00e-01,   5.00e-15],
               [  5.00e-01,   6.40e-01,   4.00e-15],
               [  5.00e-15,   4.00e-15,   7.00e-15]]])

dist.argmin(0)
#array([[0, 0, 2],
#       [1, 0, 2],
#       [2, 2, 2]])
</snippet></ROW><ROW><id>19961810</id><snippet>0, 1, 2</snippet></ROW><ROW><id>19961810</id><snippet>1, 2, 3</snippet></ROW><ROW><id>19961810</id><snippet>dist.argmin(0) + 1
#array([[1, 1, 3],
#       [2, 1, 3],
#       [3, 3, 3]])
</snippet></ROW><ROW><id>19961810</id><snippet>dist.min(0)</snippet></ROW><ROW><id>19961810</id><snippet>dist.min(0)
#array([[  6.00e-15,   7.00e-15,   5.00e-15],
#       [  8.00e-15,   5.00e-15,   4.00e-15],
#       [  5.00e-15,   4.00e-15,   7.00e-15]])
</snippet></ROW><ROW><id>19961810</id><snippet>dist</snippet></ROW><ROW><id>19961810</id><snippet>minloc = dist.argmin(0)
other[dist.argmin(0), np.arange(dist.shape[1])[:, None], np.arange(dist.shape[2])]
</snippet></ROW><ROW><id>19961810</id><snippet>other=dist</snippet></ROW><ROW><id>19961810</id><snippet>dist.min(0)</snippet></ROW><ROW><id>19961810</id><snippet>dist[dist.argmin(0), np.arange(dist.shape[1])[:, None], np.arange(dist.shape[2])]
#array([[  6.00e-15,   7.00e-15,   5.00e-15],
#       [  8.00e-15,   5.00e-15,   4.00e-15],
#       [  5.00e-15,   4.00e-15,   7.00e-15]])
</snippet></ROW><ROW><id>19961810</id><snippet>other</snippet></ROW><ROW><id>19961810</id><snippet>other = np.ones((3,3,3))*np.arange(1,4).reshape(3,1,1)

other
#array([[[ 1.,  1.,  1.],
#        [ 1.,  1.,  1.],
#        [ 1.,  1.,  1.]],

#       [[ 2.,  2.,  2.],
#        [ 2.,  2.,  2.],
#        [ 2.,  2.,  2.]],

#       [[ 3.,  3.,  3.],
#        [ 3.,  3.,  3.],
#        [ 3.,  3.,  3.]]])

other[dist.argmin(0), np.arange(dist.shape[1])[:, None], np.arange(dist.shape[2])]
#array([[ 1.,  1.,  3.],
#       [ 2.,  1.,  3.],
#       [ 3.,  3.,  3.]])
</snippet></ROW><ROW><id>19961810</id><snippet>colorvec</snippet></ROW><ROW><id>19961810</id><snippet>rootsmatrix.shape</snippet></ROW><ROW><id>19961810</id><snippet>(nx, ny)</snippet></ROW><ROW><id>19961810</id><snippet>known_roots.shape</snippet></ROW><ROW><id>19961810</id><snippet>(dim,)</snippet></ROW><ROW><id>19961810</id><snippet>def colorvec(rootsmatrix, known_roots):
    dist = abs(rootsmatrix - known_roots[:, None, None])
</snippet></ROW><ROW><id>19961810</id><snippet>known_roots[:, None, None]</snippet></ROW><ROW><id>19961810</id><snippet>known_roots.reshape(len(known_roots), 1, 1)</snippet></ROW><ROW><id>19961810</id><snippet>rootsmatrix</snippet></ROW><ROW><id>19961867</id><snippet>mainloop()</snippet></ROW><ROW><id>19961867</id><snippet>def myGameLoop():
    gameRunning = True
    while gameRunning:
        # code that displays your rooms, gets user input,
        #and checks to make sure that gameRunning is not False.
        #for an example, something like:
        if somethingAwfulHappened
            gameRunning = False
</snippet></ROW><ROW><id>19961867</id><snippet>mainloop</snippet></ROW><ROW><id>19961867</id><snippet>kitchen = {
    "name":"Kitchen",
    "description": "This is the kitchen! It's nice and clean.",
    "exits": "S", "E"
}

bathroom = {
    "name":"Bathroom",
    "description":"This is the bathroom. Someone left a towel on the floor.",
    "exits":"W", "S"
}
#and so on, creating rooms
</snippet></ROW><ROW><id>19961867</id><snippet>mapOfHouse = {
    "kitchen": kitchen,
    "leadsTo": {
        "S": bathroom,
        "E": someOtherRoom ##some other place you've defined
    },
    "bathroom": bathroom,
    "leadsTo": {
        "S": otherAwesomePlaces,
        "E": kitchen
    },

    #and so on for other rooms in the house/on the map/etc
 }
</snippet></ROW><ROW><id>19961867</id><snippet>True</snippet></ROW><ROW><id>19961867</id><snippet>True</snippet></ROW><ROW><id>19961987</id><snippet>sqlite3</snippet></ROW><ROW><id>19961987</id><snippet>pysqlite</snippet></ROW><ROW><id>19962167</id><snippet>glob</snippet></ROW><ROW><id>19962167</id><snippet>import glob, os
files = [f for f in glob.glob('*.TXT') if os.path.isfile(f)]
</snippet></ROW><ROW><id>19962167</id><snippet>.txt</snippet></ROW><ROW><id>19962167</id><snippet>.TXT</snippet></ROW><ROW><id>19962167</id><snippet>for f in files[:]:
   ...
</snippet></ROW><ROW><id>19962210</id><snippet>https://...</snippet></ROW><ROW><id>19962210</id><snippet>http://...</snippet></ROW><ROW><id>19962346</id><snippet>&gt;&gt;&gt; candidate=5
&gt;&gt;&gt; candidate/2
2
&gt;&gt;&gt; range(2, 2)
[]
&gt;&gt;&gt; for i in []: print(i)
&gt;&gt;&gt; i
NameError: name 'i' is not defined
</snippet></ROW><ROW><id>19962346</id><snippet>i</snippet></ROW><ROW><id>19962346</id><snippet>int(sqrt(candidate))</snippet></ROW><ROW><id>19962346</id><snippet>candidate/2</snippet></ROW><ROW><id>19962346</id><snippet>int(sqrt(5))</snippet></ROW><ROW><id>19962346</id><snippet>2</snippet></ROW><ROW><id>19962346</id><snippet>if i==(candidate/2)-1:
</snippet></ROW><ROW><id>19962346</id><snippet>if I finished the loop without break:
</snippet></ROW><ROW><id>19962346</id><snippet>else</snippet></ROW><ROW><id>19962346</id><snippet>break</snippet></ROW><ROW><id>19962346</id><snippet>continue</snippet></ROW><ROW><id>19962346</id><snippet>else</snippet></ROW><ROW><id>19962346</id><snippet>&gt;&gt;&gt; for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print n, 'equals', x, '*', n/x
...             break
...     else:
...         # loop fell through without finding a factor
...         print n, 'is a prime number'
</snippet></ROW><ROW><id>19962346</id><snippet>else</snippet></ROW><ROW><id>19962346</id><snippet>break</snippet></ROW><ROW><id>19962346</id><snippet>while(True):
    #print 'Checking =',candidate
    for i in range(2,candidate/2): #if any number from 2 to candidate/2 can divide candidate with remainder = 0 then candidate is not a prime no.
        if(candidate%i==0):
            break
    else: # If none divide it perfectly, i will reach candidate/2-1 eventually. So, this is a prime number.
        count+=1
        print 'No. of prime no.s found excluding 2 and 3 =',count, '---&gt;',candidate
</snippet></ROW><ROW><id>19962346</id><snippet>else</snippet></ROW><ROW><id>19962346</id><snippet>while</snippet></ROW><ROW><id>19962346</id><snippet>for</snippet></ROW><ROW><id>19962453</id><snippet>time.localtime</snippet></ROW><ROW><id>19962453</id><snippet>gmtime()</snippet></ROW><ROW><id>19962453</id><snippet>&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(int("1340578800000") / 1000))
'2012-06-24 18:00:00'
&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(int("1340578800000") / 1000.))
'2012-06-24 18:00:00'
</snippet></ROW><ROW><id>19962499</id><snippet>if __name__ == "__main__":
    cache_denom_set1 = {}
    cache_denom_set2 = {}
    print "minimum change for 69 with denomiations [25,10,5,1] by recursive : ",get_min_coin_configuration(69,[25,10,5,1],cache_denom_set1)
    print "*"*45
    print "minimum change for 7 with denomiations [4,3,1] by recursive : ",get_min_coin_configuration(7,[4,3,1],cache_denom_set2)
</snippet></ROW><ROW><id>19962499</id><snippet>def dict_fn(cache={}):
    cache[len(cache.keys())] = 1
    print cache

dict_fn()
dict_fn()
</snippet></ROW><ROW><id>19962516</id><snippet>#!/bin/sh
# From http://www.scalaclass.com/node/10 - CLASSPATH
L=`dirname $0`/../lib
cp=`echo $L/*.jar|sed 's/ /:/g'`
exec scala -classpath $cp $0 $@
!#
import com.my.Goodness
val goodness = new Goodness
world.hello
</snippet></ROW><ROW><id>19962667</id><snippet>d</snippet></ROW><ROW><id>19962667</id><snippet>searchValue</snippet></ROW><ROW><id>19962667</id><snippet>for k, v in d.items():
    if v == searchValue:
        print(k)
</snippet></ROW><ROW><id>19962667</id><snippet>book_index</snippet></ROW><ROW><id>19962667</id><snippet>Counter</snippet></ROW><ROW><id>19962667</id><snippet>from collections import Counter
def book_index(alice):
    worddict = Counter()
    for ln in alice:
        worddict.update(ln.split())
    return worddict
</snippet></ROW><ROW><id>19962667</id><snippet>worddict = Counter(word for line in alice for word in line.split())</snippet></ROW><ROW><id>19962701</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>19962701</id><snippet>list</snippet></ROW><ROW><id>19962701</id><snippet>list</snippet></ROW><ROW><id>19962701</id><snippet>pop()</snippet></ROW><ROW><id>19962701</id><snippet>append()</snippet></ROW><ROW><id>19962730</id><snippet>return value2</snippet></ROW><ROW><id>19962730</id><snippet>tuple</snippet></ROW><ROW><id>19962730</id><snippet>return value1, value2     #returns a tuple
</snippet></ROW><ROW><id>19962730</id><snippet>uInput()</snippet></ROW><ROW><id>19962730</id><snippet>main</snippet></ROW><ROW><id>19962730</id><snippet>val1, val2 = uInput()  #Assign using sequence unpacking 
</snippet></ROW><ROW><id>19962730</id><snippet>calc</snippet></ROW><ROW><id>19962730</id><snippet>calc(val1, val2)       
</snippet></ROW><ROW><id>19962730</id><snippet>def main():
    val1, val2 = uInput()
    calc(val1, val2)

def uInput():
    value1 = int(input('Please put in the first number'))
    value2 = int(input('Please put in your second number'))
    return value1, value2

def calc(value1,value2):    
    finalNumber = value1 + value2
    print (finalNumber)
main()
</snippet></ROW><ROW><id>19962822</id><snippet>django.conf.urls.defaults</snippet></ROW><ROW><id>19962822</id><snippet>from django.conf.urls import patterns, url, include
</snippet></ROW><ROW><id>19962843</id><snippet>is_pressed()</snippet></ROW><ROW><id>19962843</id><snippet>manual()</snippet></ROW><ROW><id>19962843</id><snippet>mainloop()</snippet></ROW><ROW><id>19962843</id><snippet>menu()</snippet></ROW><ROW><id>19962843</id><snippet>manual()</snippet></ROW><ROW><id>19962843</id><snippet>menu()</snippet></ROW><ROW><id>19962843</id><snippet>manual()</snippet></ROW><ROW><id>19962843</id><snippet>return</snippet></ROW><ROW><id>19962843</id><snippet>menu()</snippet></ROW><ROW><id>19962843</id><snippet>menu()</snippet></ROW><ROW><id>19962843</id><snippet>pygame.init()</snippet></ROW><ROW><id>19962843</id><snippet>pygame.display.set_mode()</snippet></ROW><ROW><id>19962843</id><snippet>games.keyboard.is_pressed()</snippet></ROW><ROW><id>19962843</id><snippet>manual()</snippet></ROW><ROW><id>19962843</id><snippet>def manual():

    image = games.load_image("options.jpg")
    games.screen.background = image

    while not games.keyboard.is_pressed(games.K_b):
        pass # do nothing

    # if `B` was pressed so now function will return to menu()
</snippet></ROW><ROW><id>19962843</id><snippet>running = True

while running:
    choose = dm.dumbmenu(screen, [
                        'Start Game',
                        'Manual',
                        'Show Highscore',
                        'Quit Game'], 220,150,None,32,1.4,green,red)
    if choose == 0:
        main()
    elif choose == 1:
        manual()
        # if 'B' was press manual() will return to this place
    elif choose == 2:
        print("yay")
    elif choose == 3:
        running = False
        print ("You choose Quit Game.")
</snippet></ROW><ROW><id>19962912</id><snippet>import pyaudio
import wave

wavefile_name = 'wavefile.wav'
wf = wave.open(wavefile_name, 'rb')

p = pyaudio.PyAudio()
stream = p.open(format =
                p.get_format_from_width(wf.getsampwidth()),
                channels = wf.getnchannels(),
                rate = wf.getframerate(),
                output = True)

full_data = []
data = wf.readframes(1024)

while data:    
    full_data.append(data)
    data = wf.readframes(1024)

data = ''.join(full_data)[::-1]

for i in range(0, len(data), 1024):
    stream.write(data[i:i+1024])
</snippet></ROW><ROW><id>19962912</id><snippet>wf = wave.open(sys.argv[1], 'rb')
index = wf.getnframes() - 1024
wf.setpos(index)
</snippet></ROW><ROW><id>19962912</id><snippet>def callback(in_data, frame_count, time_info, status):
    global index
    data = wf.readframes(frame_count)
    data = data[::-1]
    index-=1024
    if index &lt; 0:
        return (data, pyaudio.paAbort)
    else:
        wf.setpos(max(index,0))
        return (data, pyaudio.paContinue)
</snippet></ROW><ROW><id>19963073</id><snippet>HEAD</snippet></ROW><ROW><id>19963073</id><snippet>twisted.web</snippet></ROW><ROW><id>19963073</id><snippet>loseConnection()</snippet></ROW><ROW><id>19963073</id><snippet>loseConnection()</snippet></ROW><ROW><id>19963073</id><snippet>twisted.web</snippet></ROW><ROW><id>19963073</id><snippet>loseConnection()</snippet></ROW><ROW><id>19963073</id><snippet>twisted.web</snippet></ROW><ROW><id>19963265</id><snippet>set</snippet></ROW><ROW><id>19963265</id><snippet>dict</snippet></ROW><ROW><id>19963265</id><snippet>setmap</snippet></ROW><ROW><id>19963265</id><snippet>dict.keys()</snippet></ROW><ROW><id>19963265</id><snippet>class setmap(set):
    def __init__(self, val_dict):
        super(self.__class__, self).__init__(val_dict.keys())
        self.val_dict = val_dict

    def __getitem__(self, itm):
        return self.val_dict.get(itm)

    def add(self, key, val):
        super(self.__class__, self).add(key)
        self.val_dict[key] = val 
</snippet></ROW><ROW><id>19963265</id><snippet>In [131]: t = setmap({'a':1, 'b':2, 'c':3})

In [132]: t1 = setmap({'a':3, 'd':8})

In [133]: t.intersection(t1)
Out[133]: set(['a'])

In [134]: {x:(t[x] + t1[x]) for x  in t.intersection(t1)}
Out[134]: {'a': 4}
</snippet></ROW><ROW><id>19963265</id><snippet>setmap</snippet></ROW><ROW><id>19963265</id><snippet>abc</snippet></ROW><ROW><id>19963265</id><snippet>deg</snippet></ROW><ROW><id>19963265</id><snippet>dict</snippet></ROW><ROW><id>19963265</id><snippet>set.difference</snippet></ROW><ROW><id>19963265</id><snippet>t.difference(t1)</snippet></ROW><ROW><id>19963265</id><snippet>t1.difference(t)</snippet></ROW><ROW><id>19963265</id><snippet>intersection</snippet></ROW><ROW><id>19963266</id><snippet>pressed = pygame.get_keypressed()

if all( (pressed[x] for x in (K_h, K_e, K_l, K_o)) ):
    print "all keys are pressed: h, e, l, o"

if any( (pressed[x] for x in (K_h, K_e, K_l, K_o)) ):
    print "at least one key is pressed: h, e, l, o"
</snippet></ROW><ROW><id>19963266</id><snippet>def test_all_keys( list_of_keys, pressed ):
    return all( (pressed[x] for x in list_of_keys) )

if test_all_keys((K_h, K_e, K_l, K_o), pressed):
    print "all keys are pressed: h, e, l, o"
</snippet></ROW><ROW><id>19963266</id><snippet>list_of_pressed = [ i for i in range(len(pressed)) if pressed[i] ]

if K_a in list_of_pressed:
    print "key 'a' was pressed"
</snippet></ROW><ROW><id>19963299</id><snippet>exp</snippet></ROW><ROW><id>19963299</id><snippet>math</snippet></ROW><ROW><id>19963299</id><snippet>&gt;&gt;&gt; from numpy import arange, exp
&gt;&gt;&gt; x = arange(7.0,39.0,0.0001)
&gt;&gt;&gt; fx = exp(-2.0 / (-14.4 + 19.33 * x - 0.057 * pow(x,2)))
&gt;&gt;&gt; fx
array([ 0.98321018,  0.98321044,  0.98321071, ...,  0.99694082,
        0.99694082,  0.99694083])
</snippet></ROW><ROW><id>19963299</id><snippet>x</snippet></ROW><ROW><id>19963299</id><snippet>vectorize</snippet></ROW><ROW><id>19963299</id><snippet>math.exp</snippet></ROW><ROW><id>19963299</id><snippet># built-in Numpy function
In [5]: timeit exp(-2.0 / (-14.4 + 19.33 * x - 0.057 * pow(x,2)))
100 loops, best of 3: 10.1 ms per loop
# vectorized math.exp function
In [6]: fx = np.vectorize(lambda y: math.exp(-2.0 / (-14.4 + 19.33 *  - 0.057 * pow(y,2))))
In [7]: timeit fx(x)
1 loops, best of 3: 221 ms per loop
</snippet></ROW><ROW><id>19963350</id><snippet>healthy</snippet></ROW><ROW><id>19963350</id><snippet>insane</snippet></ROW><ROW><id>19963350</id><snippet>d1 = {'status': ['online', 'Away', 'Offline'] ,'absent':['yes', 'no', 'half day']}
d2 = {'healthy': ['yes', 'no'], 'insane': ['yes', 'no']}
d1_columns = zip(*d1.values())
d2_columns = zip(*d2.values())
col_groups = [c1+c2 for c1, c2 in itertools.product(d1_columns, d2_columns)]
rows = zip(*col_groups)
combined_keys = list(d1) + list(d2)
d_combined = dict(zip(combined_keys, rows))
</snippet></ROW><ROW><id>19963350</id><snippet>&gt;&gt;&gt; pprint.pprint(d_combined)
{'absent': ('yes', 'yes', 'no', 'no', 'half day', 'half day'),
 'healthy': ('yes', 'no', 'yes', 'no', 'yes', 'no'),
 'insane': ('yes', 'no', 'yes', 'no', 'yes', 'no'),
 'status': ('online', 'online', 'Away', 'Away', 'Offline', 'Offline')}
</snippet></ROW><ROW><id>19963350</id><snippet>&gt;&gt;&gt; order = ["status", "absent", "healthy", "insane"]
&gt;&gt;&gt; for k in order:
    print k, d_combined[k]
...     
status ('online', 'online', 'Away', 'Away', 'Offline', 'Offline')
absent ('yes', 'yes', 'no', 'no', 'half day', 'half day')
healthy ('yes', 'no', 'yes', 'no', 'yes', 'no')
insane ('yes', 'no', 'yes', 'no', 'yes', 'no')
</snippet></ROW><ROW><id>19963463</id><snippet>help()</snippet></ROW><ROW><id>19963463</id><snippet>inspect</snippet></ROW><ROW><id>19963463</id><snippet>inspect</snippet></ROW><ROW><id>19963463</id><snippet>getfullargspec</snippet></ROW><ROW><id>19963463</id><snippet>pydoc</snippet></ROW><ROW><id>19963463</id><snippet>help</snippet></ROW><ROW><id>19963463</id><snippet>import pydoc
def wrappedHelpText (wrappedFunc):
    def decorator (f):
         f.__doc__ = 'This method wraps the following method:\n\n' + pydoc.text.document(wrappedFunc)
         return f
    return decorator

@wrappedHelpText(worker_function)
def wrapper_function(**args):
    worker_function(**args)
</snippet></ROW><ROW><id>19963463</id><snippet>help</snippet></ROW><ROW><id>19963463</id><snippet>&gt;&gt;&gt; help(wrapper_function)
Help on function wrapper_function in module __main__:

wrapper_function(**args)
    This method wraps the following method:

    worker_function(arg1, arg2, arg3)
        desired help message:
        arg1 - blah
        arg2 - foo
        arg3 - bar
</snippet></ROW><ROW><id>19963464</id><snippet>t_years = 0</snippet></ROW><ROW><id>19963464</id><snippet>else</snippet></ROW><ROW><id>19963464</id><snippet>.01</snippet></ROW><ROW><id>19963464</id><snippet>0.01</snippet></ROW><ROW><id>19963464</id><snippet>0</snippet></ROW><ROW><id>19963464</id><snippet>.01</snippet></ROW><ROW><id>19963464</id><snippet>0.01</snippet></ROW><ROW><id>19963464</id><snippet>0</snippet></ROW><ROW><id>19963464</id><snippet>0.01</snippet></ROW><ROW><id>19963464</id><snippet>0</snippet></ROW><ROW><id>19963464</id><snippet>t_years = 0

while True:
    time.sleep(.01)
    a = time.time()
    age = int (a*1000) - int(t0*1000) #millis

    while (int (age) &lt; int (random.normalvariate (average_life_span, 1))):
        pass
    else:
        t_years = t_years + .01

    print age, t_years
</snippet></ROW><ROW><id>19963593</id><snippet>        if i in secretWord == False:
</snippet></ROW><ROW><id>19963593</id><snippet>i</snippet></ROW><ROW><id>19963593</id><snippet>secretWord</snippet></ROW><ROW><id>19963593</id><snippet>        if i not in secretWord:
</snippet></ROW><ROW><id>19963593</id><snippet>i in secretWord
</snippet></ROW><ROW><id>19963593</id><snippet>secretWord == False
</snippet></ROW><ROW><id>19963593</id><snippet>if</snippet></ROW><ROW><id>19963776</id><snippet>raw_input</snippet></ROW><ROW><id>19963776</id><snippet>donation &lt; 50</snippet></ROW><ROW><id>19963776</id><snippet>int</snippet></ROW><ROW><id>19963776</id><snippet>float</snippet></ROW><ROW><id>19963776</id><snippet>Decimal</snippet></ROW><ROW><id>19963776</id><snippet>donation = int(raw_input("enter your donation: "))

while donation &lt; 50:
    donation = int(raw_input("We are sorry that's not enough, enter again: "))
    if donation &gt;= 50: print "thank you for the donation"
</snippet></ROW><ROW><id>19963818</id><snippet>import random

multi_players = []
multi_players_pos = []

player = pygame.image.load("player_two.png").convert()
player.set_colorkey(white)

#create 10 players 0...9
for i in range(10):
    multi_players.append(player)
    pos = [random.randint(60,220+1), random.randint( 0, 475+1)]
    multi_players_pos.append(pos)
</snippet></ROW><ROW><id>19963818</id><snippet>player_0.png</snippet></ROW><ROW><id>19963818</id><snippet>player_9.png</snippet></ROW><ROW><id>19963818</id><snippet>multi_players = []
multi_players_pos = []

for i in range(10):
    temp = pygame.image.load("player_"+str(i)+".png").convert()
    temp.set_colorkey(white)
    multi_players.append(temp)
    pos = [random.randint(60,220+1), random.randint( 0, 475+1)]
    multi_players_pos.append(pos)
</snippet></ROW><ROW><id>19963818</id><snippet>while done == False:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

        for i in range(len(multi_players)):
            screen.blit(multi_players[i], multi_players_pos)

        pygame.display.flip()

    clock.tick(20)

pygame.quit()
</snippet></ROW><ROW><id>19963818</id><snippet>Player</snippet></ROW><ROW><id>19963818</id><snippet>import random

class Player():

    def __init__(self, image, x, y):
        self.image = pygame.image.load(image).convert()
        self.image.set_colorkey(white)
        image_rect = image.get_rect()

        self.rect = Rect(x, y, image_rect.width, image_rect.height)

    def draw(self, screen):
        screen.blit(self.image, self.rect.topleft)

    def update(self):
        # here change randomly positon

#--------------------------------------------

multi_players = []

#create 10 players 0...9
for i in range(10):
    x, y = random.randint(60,220+1), random.randint( 0, 475+1)
    multi_players.append(Player("player_"+str(i)+".png", x, y))

while done == False:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

    # changes position

    for player in multi_players:
        player.update()

    # draws

    for player in multi_players:
        player.draw(screen)

    pygame.display.flip()

    clock.tick(20)

pygame.quit()
</snippet></ROW><ROW><id>19963818</id><snippet>ball1.png</snippet></ROW><ROW><id>19963818</id><snippet>ball2.png</snippet></ROW><ROW><id>19963818</id><snippet>ball3.png</snippet></ROW><ROW><id>19963818</id><snippet>.convert()</snippet></ROW><ROW><id>19963818</id><snippet>.set_colorkey()</snippet></ROW><ROW><id>19963818</id><snippet>import random
import pygame

WHITE = (255,255,255)
BLACK = (0  ,0  ,0  )

#----------------------------------------------------------------------

class Player():

    def __init__(self, image, x=0, y=0):

        self.image = pygame.image.load(image)#.convert()
        #self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()

        self.rect.centerx = x
        self.rect.centery = y

    #------------

    def draw(self, screen):
        screen.blit(self.image, self.rect)

    #------------

    def update(self):
        # here change randomly positon
        self.rect.topleft = random.randint(60,220+1), random.randint( 0, 475+1)

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        pygame.init()

        self.screen = pygame.display.set_mode((800,600))

        self.background = pygame.image.load("background.jpg").convert()
        self.multi_players = []

        # create 3 balls 1...3

        for i in range(1,4):
            player = Player("ball"+str(i)+".png")
            player.update() # set random position on start
            self.multi_players.append(player)

    #------------

    def run(self):

        clock = pygame.time.Clock()
        RUNNING = True

        while RUNNING:

            # --- events ---

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        RUNNING = False

                    # changes position when key is pressed

                    for player in self.multi_players:
                        player.update()

            # --- updates ---- 

            # place for updates

            # --- draws ---

            self.screen.fill(BLACK)

            self.screen.blit(self.background, self.background.get_rect())

            for player in self.multi_players:
                player.draw(self.screen)

            pygame.display.flip()

            # --- FPS ---

            clock.tick(20)

        # --- quit ---

        pygame.quit()

#----------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>19963861</id><snippet>replace</snippet></ROW><ROW><id>19963861</id><snippet>soFar = soFar[:index] + newChar + soFar[index+1:]
</snippet></ROW><ROW><id>19963861</id><snippet>soFar = soFar[:index*2] + newChar + soFar[index*2+1:]
</snippet></ROW><ROW><id>19963861</id><snippet>index</snippet></ROW><ROW><id>19963861</id><snippet>enumerate</snippet></ROW><ROW><id>19963861</id><snippet>for index, char in enumerate(secretWord):
</snippet></ROW><ROW><id>19963861</id><snippet>soFar = []
for char in secretWord:
    soFar.append('_')
</snippet></ROW><ROW><id>19963861</id><snippet>soFar[index] = char
</snippet></ROW><ROW><id>19963861</id><snippet>['_', '_']</snippet></ROW><ROW><id>19963861</id><snippet>_ _</snippet></ROW><ROW><id>19963861</id><snippet>join</snippet></ROW><ROW><id>19963861</id><snippet>print ' '.join(soFar)
</snippet></ROW><ROW><id>19963896</id><snippet>emp_names = []
num_to_enter = 10
while num_to_enter &gt; 0:
    emp_names.append(raw_input("enter name"))
    num_to_enter -= 1

print emp_names[0]

#do what you need to do
</snippet></ROW><ROW><id>19963952</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Test CORS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

    Token&lt;br&gt;&lt;input id="token" type="text" size="64"&gt;&lt;br&gt;&lt;br&gt;

    Method&lt;br&gt;
    &lt;select id="method"&gt;
        &lt;option value="GET"&gt;GET&lt;/option&gt;
        &lt;option value="HEAD"&gt;HEAD&lt;/option&gt;
        &lt;option value="POST"&gt;POST&lt;/option&gt;
        &lt;option value="PUT"&gt;PUT&lt;/option&gt;
    &lt;/select&gt;&lt;br&gt;&lt;br&gt;

    URL (Container or Object)&lt;br&gt;&lt;input id="url" size="64" type="text"&gt;&lt;br&gt;&lt;br&gt;

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;"&gt;

    &lt;pre id="response_headers"&gt;&lt;/pre&gt;
    &lt;p&gt;
    &lt;hr&gt;
    &lt;pre id="response_body"&gt;&lt;/pre&gt;

    &lt;script type="text/javascript"&gt;
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          request.setRequestHeader('X-Auth-Token', token);
          request.send(null);
      }
    &lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19963964</id><snippet>dict</snippet></ROW><ROW><id>19963964</id><snippet>dict.get</snippet></ROW><ROW><id>19963964</id><snippet>li = [('a','c','b'),('b','b','c'),('c','d'),'5',4]

d = {('b','b','c'):('b','b','b'),('c','d'):('c','c')}

[d.get(x,x) for x in li]
Out[33]: [('a', 'c', 'b'), ('b', 'b', 'b'), ('c', 'c'), '5', 4]
</snippet></ROW><ROW><id>19963964</id><snippet>list</snippet></ROW><ROW><id>19963964</id><snippet>[tuple(d.get(x,x) for x in li[0])]
</snippet></ROW><ROW><id>19963964</id><snippet>[tuple(d.get(x,x) for x in outer_tup) for outer_tup in li]
</snippet></ROW><ROW><id>19964474</id><snippet>from pyscreenshot import grab

im = grab(bbox=(100, 200, 300, 400))
im.show()
</snippet></ROW><ROW><id>19964474</id><snippet>bbox</snippet></ROW><ROW><id>19964474</id><snippet>from PIL import Image
from pyscreenshot import grab

img = grab(bbox=(100, 200, 300, 400))

# to keep the aspect ratio
w = 300
h = 400
maxheight = 600
maxwidth = 800
ratio = min(maxwidth/width, maxheight/height)
# correct image size is not #oldsize * ratio#

# img.resize(...) returns a resized image and does not effect img unless
# you assign the return value
img = img.resize((h * ratio, width * ratio), Image.ANTIALIAS)
</snippet></ROW><ROW><id>19964475</id><snippet>if</snippet></ROW><ROW><id>19964475</id><snippet>else</snippet></ROW><ROW><id>19964475</id><snippet>try</snippet></ROW><ROW><id>19964475</id><snippet>except</snippet></ROW><ROW><id>19964475</id><snippet>try:
    pika.BlockingConnection(parameters)
    log_error("RabbitMQ Accepts non-SSL Connections")
except: # if the anything goes wrong, go here
    log_info("RabbitMQ Not accepting non-SSL connections")
</snippet></ROW><ROW><id>19964906</id><snippet>io.open()</snippet></ROW><ROW><id>19964906</id><snippet>import io
import re

regex_oti = re.compile(ur'^.*\b(ότι|ό,τι)\b.*$')
regex_tis = re.compile(ur'^.*\b(της|τις)\b.*$')
regex_ton = re.compile(ur'^.*\b(τον|των)\b.*$')

with io.open('source.txt', 'r', encoding='utf8') as source, \
     io.open('results_oti.txt', 'w', encoding='utf8') as oti, \
     io.open('results_tis.txt', 'w', encoding='utf8') as tis, \
     io.open('results_ton.txt', 'w', encoding='utf8') as ton:

    for line in source:
        if regex_oti.match(line):
            oti.write(line)
        if regex_tis.match(line):
            tis.write(line)
        if regex_ton.match(line):
            ton.write(line)
</snippet></ROW><ROW><id>19964906</id><snippet>ur'...'</snippet></ROW><ROW><id>19964906</id><snippet>io.open()</snippet></ROW><ROW><id>19964906</id><snippet>unicode</snippet></ROW><ROW><id>19964906</id><snippet>unicode</snippet></ROW><ROW><id>19964906</id><snippet>with</snippet></ROW><ROW><id>19964906</id><snippet>source</snippet></ROW><ROW><id>19965006</id><snippet>from matplotlib import pyplot as plt
import numpy as np

names = ['foo', 'bar', 'baz']
x  = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
colors = ['crimson', 'burlywood', 'chartreuse']

y = zip(*x)
groups = len(x)
members = len(y)
pos = np.arange(groups)
width = 1. / (1 + members)

fig, ax = plt.subplots()    
for idx, (serie, color) in enumerate(zip(y, colors)):
    ax.bar(pos + idx * width, serie, width, color=color)

ax.set_xticks(pos + width)
ax.set_xticklabels(names)

plt.show()
</snippet></ROW><ROW><id>19965050</id><snippet>class Base1DHeatEquation(object):
    def __init__(self, alpha, final_time, time_discrete):
       self.alpha = alpha
       self.final_time = final_time
       self.time_discrete = time_discrete

class IntialValueTest1DHE(Base1DHeatEquation):
    def __init__(self, alpha, final_time, time_discrete,intialValues,
           x_discrete ,noise):
        super(IntialValueTest1DHE,self).__init__(alpha, final_time, time_discrete)
        self.intialValues = intialValues
</snippet></ROW><ROW><id>19965163</id><snippet>count = 1
for i range(len(my_list)):
    if my_list[i] = -1:
        continue
    else:
        my_list[i] = count
        count++
</snippet></ROW><ROW><id>19965163</id><snippet>my_list</snippet></ROW><ROW><id>19965170</id><snippet>rate_limit()</snippet></ROW><ROW><id>19965170</id><snippet>@rate_limit
def myview(request, somearg, *args, **kwargs):
</snippet></ROW><ROW><id>19965170</id><snippet>@rate_limit(seconds=10)
def myview(request, somearg, *args, **kwargs):
</snippet></ROW><ROW><id>19965170</id><snippet>functools.wraps()</snippet></ROW><ROW><id>19965170</id><snippet>csrf_exempt</snippet></ROW><ROW><id>19965170</id><snippet>from functools import wraps

def rate_limit(seconds=10):
    def decorator(view):
        @wraps(view)
        def wrapper(request, *args, **kwargs):
            # Do some stuff
            return view(request, *args, **kwargs)
        return wrapper
    return decorator
</snippet></ROW><ROW><id>19965251</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19965251</id><snippet>key = datetime.date()</snippet></ROW><ROW><id>19965251</id><snippet>.date()</snippet></ROW><ROW><id>19965251</id><snippet>datetime</snippet></ROW><ROW><id>19965251</id><snippet>date</snippet></ROW><ROW><id>19965251</id><snippet>&gt;&gt;&gt; my[0].date()
datetime.date(2013, 11, 12)
</snippet></ROW><ROW><id>19965251</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; pprint([list(g) for k, g in groupby(my, key=lambda x:x.date())])
[[datetime.datetime(2013, 11, 12, 20, 22, 5),
  datetime.datetime(2013, 11, 12, 20, 21, 27),
  datetime.datetime(2013, 11, 12, 20, 20, 28)],
 [datetime.datetime(2013, 11, 11, 18, 21, 27),
  datetime.datetime(2013, 11, 11, 15, 21, 27),
  datetime.datetime(2013, 11, 11, 11, 21, 27)],
 [datetime.datetime(2013, 11, 10, 9, 21, 27),
  datetime.datetime(2013, 11, 10, 19, 21, 27),
  datetime.datetime(2013, 11, 10, 22, 21, 27),
  datetime.datetime(2013, 11, 10, 20, 21, 27)]]
</snippet></ROW><ROW><id>19965251</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>19965251</id><snippet>datetime.date()</snippet></ROW><ROW><id>19965299</id><snippet>1.9999999999999999</snippet></ROW><ROW><id>19965299</id><snippet>2.0</snippet></ROW><ROW><id>19965299</id><snippet>1.9999999999999999</snippet></ROW><ROW><id>19965299</id><snippet>2.0</snippet></ROW><ROW><id>19965299</id><snippet>1.999999999999999</snippet></ROW><ROW><id>19965299</id><snippet>2.0</snippet></ROW><ROW><id>19965299</id><snippet>1.9999999999999988897769753748434595763683319091796875</snippet></ROW><ROW><id>19965299</id><snippet>1.9999999999999999 == 2</snippet></ROW><ROW><id>19965299</id><snippet>2.0 == 2</snippet></ROW><ROW><id>19965299</id><snippet>2</snippet></ROW><ROW><id>19965299</id><snippet>2.0</snippet></ROW><ROW><id>19965299</id><snippet>1.999999999999999 != 2</snippet></ROW><ROW><id>19965377</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19965377</id><snippet>from subprocess import check_output
l = check_output("ping -c 1 sitename | awk -F = 'FNR==2 {print substr($4,1,length($4)-3)}'", shell=True) 
print l
</snippet></ROW><ROW><id>19965447</id><snippet>1.</snippet></ROW><ROW><id>19965447</id><snippet>lst.count</snippet></ROW><ROW><id>19965447</id><snippet>lst.remove</snippet></ROW><ROW><id>19965447</id><snippet>[item for item in lst if item != itemToExclude]
</snippet></ROW><ROW><id>19965447</id><snippet>for i in range(lst.count(itemToExclude)): lst.remove(itemToExclude)
</snippet></ROW><ROW><id>19965724</id><snippet>for var1 in sorted(symTbl):
    print(var1 + " =&gt; " + str(symTbl[var1]))
</snippet></ROW><ROW><id>19965900</id><snippet>set.union</snippet></ROW><ROW><id>19965900</id><snippet>&gt;&gt;&gt; lis = [{1, 2, 3, 4}, {3, 4, 5}, {7, 3, 6}]
&gt;&gt;&gt; set().union(*lis)
set([1, 2, 3, 4, 5, 6, 7])
</snippet></ROW><ROW><id>19965900</id><snippet>reduce</snippet></ROW><ROW><id>19965900</id><snippet>&gt;&gt;&gt; reduce(set.union, lis)
set([1, 2, 3, 4, 5, 6, 7])
</snippet></ROW><ROW><id>19965900</id><snippet>set().union(*(x.nodes() for x in periodic_gs.values()))
reduce(set.union, (x.nodes() for x in periodic_gs.values()))
</snippet></ROW><ROW><id>19966087</id><snippet>test_client</snippet></ROW><ROW><id>19966230</id><snippet>SpriteOrange</snippet></ROW><ROW><id>19966230</id><snippet>draw(screen)</snippet></ROW><ROW><id>19966230</id><snippet>update()</snippet></ROW><ROW><id>19966230</id><snippet>class SpriteOrange():

    def __init__(self, image):
        self.image = pygame.image.load(image)
        self.x = 0
        self.y = 0

    def draw(self, screen):
        screen.blit(self.image, self.x, self.y)

    def update(self):
        self.x = random.randrange(0,400)
        self.y = random.randrange(0,400)
</snippet></ROW><ROW><id>19966230</id><snippet>self.oranges = []

for x in range(10):
    self.oranges.append(SpriteOrange('orange.png'))
</snippet></ROW><ROW><id>19966230</id><snippet>for o in self.oranges:
    o.update()
</snippet></ROW><ROW><id>19966230</id><snippet>for o in self.oranges:
    o.draw(self.screen)
</snippet></ROW><ROW><id>19966464</id><snippet>device.get_ips()</snippet></ROW><ROW><id>19966464</id><snippet>QuerySet</snippet></ROW><ROW><id>19966464</id><snippet>[ip1, ip2, ip3]</snippet></ROW><ROW><id>19966464</id><snippet>.filter()</snippet></ROW><ROW><id>19966464</id><snippet>results = device.get_ips()
result_ips = [ip.ip for ip in results]
self.assertEqual(len(results), 3)
self.assertTrue(ip1.ip in result_ips)
self.assertTrue(ip2.ip in result_ips)
self.assertTrue(ip3.ip in result_ips)
</snippet></ROW><ROW><id>19966465</id><snippet>\Uxxxxxxxx</snippet></ROW><ROW><id>19966465</id><snippet>U</snippet></ROW><ROW><id>19966465</id><snippet>\uxxxx</snippet></ROW><ROW><id>19966465</id><snippet>00</snippet></ROW><ROW><id>19966465</id><snippet>&gt;&gt;&gt; len(u'\u01f600')
3
&gt;&gt;&gt; len(u'\U0001f600')
1
&gt;&gt;&gt; u'\u01f600'[0]
'\u01f6'
&gt;&gt;&gt; u'\u01f600'[1:]
'00'
</snippet></ROW><ROW><id>19966465</id><snippet>unicode</snippet></ROW><ROW><id>19966465</id><snippet>u'[\U0001F600-\U0001F64F]'
</snippet></ROW><ROW><id>19966465</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(u'[\U0001F600-\U0001F64F]', u'\U0001F600')
&lt;_sre.SRE_Match object at 0xb73ead08&gt;
</snippet></ROW><ROW><id>19966465</id><snippet>len(u'\U0001f600')</snippet></ROW><ROW><id>19966465</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>19966465</id><snippet>ur'\ud83d[\ude00-\ude4f]'
</snippet></ROW><ROW><id>19966465</id><snippet>[\U0001F600-\U0001F64F]</snippet></ROW><ROW><id>19966465</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxunicode
65535
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(u'\ud83d[\ude00-\ude4f]', u'\U0001F600')
&lt;_sre.SRE_Match object at 0x105e9f5e0&gt;
</snippet></ROW><ROW><id>19966539</id><snippet>for event in pygame.event.get():
    if event.type == QUIT:
        ...
    if event.type == KEYDOWN:
        ...
    if event.type == KEYUP:
        ...
    if direction == 'down':
         enemyy += 7
</snippet></ROW><ROW><id>19966608</id><snippet>#-----!!!!SPACE INVADERS!!!!-----

import pygame
from pygame.locals import *

#----------------------------------------------------------------------

class Ship():

    def __init__(self, screen_rect):

        #self.image = pygame.image.load("spaceship.png")
        self.image = pygame.image.load("ball1.png")
        self.image = pygame.transform.scale(self.image, (100,50))

        self.rect = self.image.get_rect()

        # put ship bottom, center x 
        self.rect.bottom = screen_rect.bottom 
        self.rect.centerx = screen_rect.centerx

        self.move_x = 0

        self.shots = []
        self.shots_count = 0

        self.max_shots = 2

    #--------------------

    def event_handler(self, event):

        #print "debug: Ship.event_handler"

        if event.type == KEYDOWN:
            if event.key == K_LEFT:
                self.move_x = -5
            elif event.key == K_RIGHT:
                self.move_x = 5
            elif event.key == K_SPACE:
                if len(self.shots) &lt; self.max_shots:
                    self.shots.append(Bullet(self.rect.centerx, self.rect.top))

        if event.type == KEYUP:
            if event.key in (K_LEFT, K_RIGHT):
                self.move_x = 0

    def update(self):

        #print "debug: Ship.update: move_x", self.move_x
        self.rect.x += self.move_x

        for s in self.shots:
            s.update()

        for i in range(len(self.shots)-1, -1, -1):
            print "debug: Ship.update: testing bullet ", i
            if not self.shots[i].is_alive:
                print "debug: Ship.update: removing bullet ", i
                del self.shots[i]

    #--------------------

    def draw(self, screen):

        #print "debug: Ship.draw"

        screen.blit(self.image, self.rect.topleft)

        for s in self.shots:
            s.draw(screen)

    def bullet_detect_collison(self, enemy_list):

        for s in self.shots:
            for e in enemy_list:
                if pygame.sprite.collide_circle(s, e):
                    s.is_alive = False
                    e.is_alive = False

#----------------------------------------------------------------------

class Bullet():

    def __init__(self, x, y):

        #self.image = pygame.image.load("SingleBullet.png")
        self.image = pygame.image.load("ball2.png")
        self.image = pygame.transform.scale(self.image, (25,25))

        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.centery = y

        self.is_alive = True

    #--------------------

    def update(self):

        self.rect.y -= 15

        if self.rect.y &lt; 0:
            self.is_alive = False

    #--------------------

    def draw(self, screen):

        screen.blit(self.image, self.rect.topleft)

#----------------------------------------------------------------------

class Enemy():

    def __init__(self, x, y):

        self.image = pygame.image.load("ball3.png")

        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.centery = y

        self.is_alive = True

    #--------------------

    def update(self):

        self.rect.y += 1

        #~ if self.rect.y &lt; 0:
            #~ self.is_alive = False

    #--------------------

    def draw(self, screen):

        screen.blit(self.image, self.rect.topleft)

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        pygame.init()

        w, h = 800, 800
        self.screen = pygame.display.set_mode((w,h))

        pygame.mouse.set_visible(False)

        self.ship = Ship(self.screen.get_rect())

        self.enemies = []

        for i in range(100, 800, 100):
            self.enemies.append(Enemy(i, 100))

        font = pygame.font.SysFont("", 72)
        self.text_paused = font.render("PAUSED", True, (255, 0, 0))
        self.text_paused_rect = self.text_paused.get_rect(center=self.screen.get_rect().center)

    #-----MAIN GAME LOOP-----

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        PAUSED = False

        while RUNNING:

            clock.tick(30)

            #--- events ---

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        RUNNING = False

                    if event.key == K_p:
                        PAUSED = not PAUSED

                if not PAUSED:
                    self.ship.event_handler(event)

            #--- changes ---
            if not PAUSED:

                self.ship.update()

                for e in self.enemies:
                    e.update()

                self.ship.bullet_detect_collison(self.enemies)

                for i in range(len(self.enemies)-1, -1, -1):
                    print "debug: Ship.update: testing bullet ", i
                    if not self.enemies[i].is_alive:
                        print "debug: Ship.update: removing bullet ", i
                        del self.enemies[i]

            #--- draws ---

            self.screen.fill((0,0,0))

            self.ship.draw(self.screen)

            for e in self.enemies:
                e.draw(self.screen)

            if PAUSED:
                self.screen.blit(self.text_paused, self.text_paused_rect)

            pygame.display.update()

        #--- quit ---

        pygame.quit()

#---------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>19966772</id><snippet>Access-Control-Allow-Origin: *
</snippet></ROW><ROW><id>19966863</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19966892</id><snippet>Request</snippet></ROW><ROW><id>19966892</id><snippet>Request(url, data=None, headers={}, …)</snippet></ROW><ROW><id>19966892</id><snippet>headers</snippet></ROW><ROW><id>19966892</id><snippet>None</snippet></ROW><ROW><id>19966892</id><snippet>Request(url, None, hdr)
</snippet></ROW><ROW><id>19966892</id><snippet>data</snippet></ROW><ROW><id>19966892</id><snippet>header</snippet></ROW><ROW><id>19966892</id><snippet>data</snippet></ROW><ROW><id>19966892</id><snippet>Request(url, headers=hdr)
</snippet></ROW><ROW><id>19967041</id><snippet>O(1)</snippet></ROW><ROW><id>19967041</id><snippet>in</snippet></ROW><ROW><id>19967041</id><snippet>not</snippet></ROW><ROW><id>19967041</id><snippet>in</snippet></ROW><ROW><id>19967110</id><snippet># from PyQt5.QtWidgets import (
from PyQt4.QtGui import (
    QApplication, QWidget, QVBoxLayout, QPushButton, QLabel,
    )

class Window(QWidget):
    def __init__(self):
        super(Window, self).__init__()
        self.button = QPushButton('Test', self)
        self.label = QLabel(self)
        self.button.clicked.connect(self.handleButton)
        layout = QVBoxLayout(self)
        layout.addWidget(self.label)
        layout.addWidget(self.button)

    def handleButton(self):
        self.label.setText('Button Clicked!')

if __name__ == '__main__':

    import sys
    app = QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19967110</id><snippet>connectSlotsByName</snippet></ROW><ROW><id>19967110</id><snippet>pyqtSlot</snippet></ROW><ROW><id>19967110</id><snippet>    self.testButton.clicked.connect(self.change_text)
    ...

def change_text(self):
    self.ui.testLabel.setText("Button Clicked!")
</snippet></ROW><ROW><id>19967470</id><snippet>Warning (from warnings module):
  File "__main__", line 1
UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
</snippet></ROW><ROW><id>19967470</id><snippet>&gt;&gt;&gt; u'ç' in a
True
</snippet></ROW><ROW><id>19967470</id><snippet>&gt;&gt;&gt; c = u"ç"
&gt;&gt;&gt; u'ç'.encode('utf-8') == c.encode('utf-8')
True
</snippet></ROW><ROW><id>19967470</id><snippet># -*- coding: utf-8 -*-

#the whole program
</snippet></ROW><ROW><id>19967655</id><snippet>commit</snippet></ROW><ROW><id>19967700</id><snippet>=</snippet></ROW><ROW><id>19967700</id><snippet>value_blacklist</snippet></ROW><ROW><id>19967700</id><snippet>value_blacklist = blacklist_gen(length)
...
value_blacklist = full_blacklist(test_list[index], value_blacklist)
</snippet></ROW><ROW><id>19967700</id><snippet>value_blacklist</snippet></ROW><ROW><id>19967700</id><snippet>value_blacklist</snippet></ROW><ROW><id>19967700</id><snippet>id</snippet></ROW><ROW><id>19967700</id><snippet>value_blacklist</snippet></ROW><ROW><id>19967708</id><snippet>?</snippet></ROW><ROW><id>19967708</id><snippet>.*</snippet></ROW><ROW><id>19967708</id><snippet>(?:&lt;!--\s*)?\[section](?:\s*--&gt;)?(.*?)(?:&lt;!--\s*)?\[/section](?:\s*--&gt;)?
</snippet></ROW><ROW><id>19967836</id><snippet>P2</snippet></ROW><ROW><id>19967836</id><snippet>fib</snippet></ROW><ROW><id>19967836</id><snippet>#Problem 2
P2 = 0
fib= 0
f1 = 1
f2 = 0
debugP2 = []
while fib &lt; 4000000:
    fib = f1 + f2
    f2 = f1
    f1 = fib
    if fib % 2 == 0:
        P2 += fib
        debugP2.append(fib)
print(P2) # Its not fib
</snippet></ROW><ROW><id>19967836</id><snippet>4613732
</snippet></ROW><ROW><id>19967836</id><snippet>P2, fib, f1, f2 = 0, 0, 1, 0
while fib &lt; 4000000:
    fib, f2 = f1 + f2, f1
    f1 = fib
    if fib % 2 == 0:
        P2 += fib
print(P2) # Its not fib
</snippet></ROW><ROW><id>19967836</id><snippet>4613732
</snippet></ROW><ROW><id>19967947</id><snippet>DisplayPost</snippet></ROW><ROW><id>19967947</id><snippet>"Blogger"</snippet></ROW><ROW><id>19967947</id><snippet>int(post_id)</snippet></ROW><ROW><id>19967947</id><snippet>a = Blogger(parent = post_key(), name = name, content = content)
</snippet></ROW><ROW><id>19967947</id><snippet>get_by_id()</snippet></ROW><ROW><id>19967947</id><snippet>po = Blogger.get_by_id(int(post_id))
</snippet></ROW><ROW><id>19967947</id><snippet>po = Blogger.get_by_id(int(post_id), parent=post_key())
</snippet></ROW><ROW><id>19967947</id><snippet>WSGIApplication</snippet></ROW><ROW><id>19967947</id><snippet>('/blog/([0-9]+)', DisplayPost)], debug=True)</snippet></ROW><ROW><id>19967947</id><snippet>r</snippet></ROW><ROW><id>19967947</id><snippet>(r'/blog/([0-9]+), ....</snippet></ROW><ROW><id>19967947</id><snippet>(r'/blog/&lt;post_id:([0-9]+)&gt;, ....</snippet></ROW><ROW><id>19967989</id><snippet>df.index</snippet></ROW><ROW><id>19967989</id><snippet>df.start_sec[i] = df.start_sec[i] * scale
df.end_sec[i] = df.end_sec[i] * scale
</snippet></ROW><ROW><id>19967989</id><snippet>df.start_sec[i] *= scale
df.end_sec[i] *= scale
</snippet></ROW><ROW><id>19967989</id><snippet>df[(df.index==i)].start_sec = 25
</snippet></ROW><ROW><id>19967989</id><snippet>&gt;&gt;&gt; type(df.A[i])
&lt;type 'numpy.int64'&gt;
&gt;&gt;&gt; type(df[(df.index==i)].A)
&lt;class 'pandas.core.series.Series'&gt;
</snippet></ROW><ROW><id>19968002</id><snippet>PATH</snippet></ROW><ROW><id>19968002</id><snippet>/home/mgx/python27/bin</snippet></ROW><ROW><id>19968002</id><snippet>.bashrc</snippet></ROW><ROW><id>19968002</id><snippet>PATH=/home/mgx/python27/bin:$PATH
</snippet></ROW><ROW><id>19968002</id><snippet>source .bashrc
</snippet></ROW><ROW><id>19968002</id><snippet>.bashrc</snippet></ROW><ROW><id>19968002</id><snippet>alias pip='/home/mgx/python27/bin/pip'
</snippet></ROW><ROW><id>19968031</id><snippet>filename</snippet></ROW><ROW><id>19968031</id><snippet>a.filename
</snippet></ROW><ROW><id>19968047</id><snippet>{</snippet></ROW><ROW><id>19968047</id><snippet>[</snippet></ROW><ROW><id>19968047</id><snippet>'child': {
    {'kid1':'one'},
    {'kid2':'two'},
    {'kid3':'three'},
},
</snippet></ROW><ROW><id>19968047</id><snippet>'child': [
    {'kid1':'one'},
    {'kid2':'two'},
    {'kid3':'three'},
],
</snippet></ROW><ROW><id>19968097</id><snippet>&gt;&gt;&gt; lst  = [[01,"ny",100], [02,"jr",200], [03, "la", 300,"ny"]]
&gt;&gt;&gt; [sublst for sublst in lst if sublst[1] == "ny"]
[[1, 'ny', 100]]
</snippet></ROW><ROW><id>19968097</id><snippet>ny</snippet></ROW><ROW><id>19968097</id><snippet>any</snippet></ROW><ROW><id>19968097</id><snippet>&gt;&gt;&gt; any(sublist[1] == "ny" for sublist in lst)
True
&gt;&gt;&gt; any(sublist[1] == "xy" for sublist in lst)
False
</snippet></ROW><ROW><id>19968097</id><snippet>list</snippet></ROW><ROW><id>19968097</id><snippet>list</snippet></ROW><ROW><id>19968097</id><snippet>&gt;&gt;&gt; "ny" in (sublist[1] for sublist in lst)
True
</snippet></ROW><ROW><id>19968149</id><snippet>raw_input("")</snippet></ROW><ROW><id>19968149</id><snippet>int()</snippet></ROW><ROW><id>19968149</id><snippet>raw_input("")</snippet></ROW><ROW><id>19968149</id><snippet>raw_input</snippet></ROW><ROW><id>19968149</id><snippet>Correct = int(raw_input(""))
</snippet></ROW><ROW><id>19968149</id><snippet>NumberTimes</snippet></ROW><ROW><id>19968152</id><snippet>itertools</snippet></ROW><ROW><id>19968152</id><snippet>from itertools import permutations

[''.join(perm) for perm in permutations(li)]
</snippet></ROW><ROW><id>19968152</id><snippet>itertools.permutations</snippet></ROW><ROW><id>19968178</id><snippet>initial_input = [("This doesn't matter", 0),("Gimme 4", 0),("Maybe 8", 0),("Ignore me", 1)]

def how_many(mystring):
    return int(mystring[-1])

def display(yourlist):
    for element in yourlist:
        print element

list_of_lists = [[] for i in range(len(initial_input)-1)]
list_of_lists[0] = [list(initial_input)]

for i in range(1, len(initial_input)):
    for currlist in list_of_lists[i-1]:
        element = currlist[i]
        if element[1] == 0:
            recursions = how_many(element[0])
            additems = [currlist[:i] + [(element[0], tick)] + currlist[i+1:] for tick in range(1, recursions)]
            list_of_lists[i].extend(additems)

for i in range(len(initial_input)-1):
    print "\n"
    display(list_of_lists[i])
</snippet></ROW><ROW><id>19968247</id><snippet>interval</snippet></ROW><ROW><id>19968247</id><snippet>i1</snippet></ROW><ROW><id>19968247</id><snippet>dates</snippet></ROW><ROW><id>19968247</id><snippet>O(log n)</snippet></ROW><ROW><id>19968247</id><snippet>import bisect

i = bisect.bisect_left(dates, dates[i1]-timedelta(days=interval))
</snippet></ROW><ROW><id>19968247</id><snippet>bisect</snippet></ROW><ROW><id>19968247</id><snippet>i</snippet></ROW><ROW><id>19968247</id><snippet>dates[:i]</snippet></ROW><ROW><id>19968247</id><snippet>&gt;</snippet></ROW><ROW><id>19968247</id><snippet>interval</snippet></ROW><ROW><id>19968247</id><snippet>date[i1]</snippet></ROW><ROW><id>19968247</id><snippet>dates[i:]</snippet></ROW><ROW><id>19968247</id><snippet>&lt;=</snippet></ROW><ROW><id>19968247</id><snippet>interval</snippet></ROW><ROW><id>19968247</id><snippet>dates[i1]</snippet></ROW><ROW><id>19968328</id><snippet>Draw</snippet></ROW><ROW><id>19968328</id><snippet>alpha</snippet></ROW><ROW><id>19968328</id><snippet>Surface()</snippet></ROW><ROW><id>19968328</id><snippet>alpha</snippet></ROW><ROW><id>19968328</id><snippet>colorkey</snippet></ROW><ROW><id>19968328</id><snippet>Surface()</snippet></ROW><ROW><id>19968328</id><snippet>import pygame

pygame.init()

screen = pygame.display.set_mode((800, 600), 0, 32)

surface1 = pygame.Surface((100,100))
surface1.set_colorkey((0,0,0))
surface1.set_alpha(128)
pygame.draw.circle(surface1, (0,255,0), (50,50), 50)

surface2 = pygame.Surface((100,100))
surface2.set_colorkey((0,0,0))
surface2.set_alpha(128)
pygame.draw.circle(surface2, (255,0,0), (50,50), 50)

screen.blit(surface1, (100,100))
screen.blit(surface2, (120,120))

pygame.display.update()

RUNNING = True

while RUNNING:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            RUNNING = False

pygame.quit()
</snippet></ROW><ROW><id>19968590</id><snippet>@app.route('/poll', methods = ['GET', 'POST'])
def poll():
    form = PollForm()
    if form.validate_on_submit():
        # use request.form to update your database
        return redirect('/details')
    return render_template('poll.html', form=form)

@app.route('/details')
def details():
    # query the database to show the updated poll
    return render_template('details.html')
</snippet></ROW><ROW><id>19968820</id><snippet>Image</snippet></ROW><ROW><id>19968820</id><snippet>from PIL import Image

png_image = Image.open('input.png')
saved_mode = png_image.mode
saved_size = png_image.size

# write string containing pixel data to file
with open('output.data', 'wb') as outf:
    outf.write(png_image.tostring())

# read that pixel data string back in from the file
with open('output.data', 'rb') as inf:
    data = inf.read()

# convert string back into Image and display it
im = Image.fromstring(saved_mode, saved_size, data)
im.show()
</snippet></ROW><ROW><id>19968939</id><snippet>def rootAlphaBeta(self, board, rules, ply, player):
    """ Makes a call to the alphaBeta function. Returns the optimal move for a player at given ply. """
    best_move = None
    max_eval = float('-infinity')

    move_list = board.generateMoves(rules, player)
    alpha = float('infinity')
    for move in move_list:
        board.makeMove(move, player)
        alpha = -self.alphaBeta(board, rules, float('-infinity'), alpha, ply - 1, board.getOtherPlayer(player))
        board.unmakeMove(move, player)

        if alpha &gt; max_eval:
            max_eval = alpha
            best_move = move

    return best_move
</snippet></ROW><ROW><id>19968982</id><snippet>def sendnext(packets):
    for i in range(len(packets)):
        if not packets[i][2]:
            sendsegment(packets[i][0], packets[i][1])
            packets[i] = (packets[i][0], packets[i][1], True)
            break
</snippet></ROW><ROW><id>19968982</id><snippet>def sendnext(packets):
    for i, (number, data, sent) in enumerate(packets):
        if not sent:
            sendsegment(number, data)
            packets[i] = (number, data, True)
            break
</snippet></ROW><ROW><id>19969144</id><snippet>performIt</snippet></ROW><ROW><id>19969221</id><snippet>idxmax()</snippet></ROW><ROW><id>19969221</id><snippet>DataFrame</snippet></ROW><ROW><id>19969221</id><snippet>import numpy as np
import pandas as pd
from ggplot import meat
</snippet></ROW><ROW><id>19969221</id><snippet>In [18]: meat
Out[18]:
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 827 entries, 0 to 826
Data columns (total 8 columns):
date               827  non-null values
beef               827  non-null values
veal               827  non-null values
pork               827  non-null values
lamb_and_mutton    827  non-null values
broilers           635  non-null values
other_chicken      143  non-null values
turkey             635  non-null values
dtypes: datetime64[ns](1), float64(7)
</snippet></ROW><ROW><id>19969221</id><snippet>beef</snippet></ROW><ROW><id>19969221</id><snippet>In [36]: meat.beef.max()
Out[36]: 2512.0
</snippet></ROW><ROW><id>19969221</id><snippet>SELECT 
    * 
FROM 
    meat 
WHERE
    beef = (SELECT max(beef) FROM meat) ;
</snippet></ROW><ROW><id>19969221</id><snippet>In [35]: meat.ix[meat.beef.idxmax()]
Out[35]:
date               2002-10-01 00:00:00
beef                              2512
veal                              18.7
pork                              1831
lamb_and_mutton                   19.7
broilers                        2953.3
other_chicken                     50.7
turkey                           525.9
Name: 705, dtype: object
</snippet></ROW><ROW><id>19969221</id><snippet>idxmax</snippet></ROW><ROW><id>19969221</id><snippet>In [42]: ts = meat.set_index(['date'])

In [43]: ts.beef.max()
Out[43]: 2512.0

In [44]: ts.beef.idxmax()
Out[44]: Timestamp('2002-10-01 00:00:00', tz=None)

In [45]: ts.ix[ts.beef.idxmax()]
Out[45]:
beef               2512.0
veal                 18.7
pork               1831.0
lamb_and_mutton      19.7
broilers           2953.3
other_chicken        50.7
turkey              525.9
Name: 2002-10-01 00:00:00, dtype: float64
</snippet></ROW><ROW><id>19969224</id><snippet>ax2.plot(ax.get_xticks(),df[['sales_gr','net_pft_gr']].values, linestyle='-', marker='o', linewidth=2.0)
</snippet></ROW><ROW><id>19969224</id><snippet>ax.set_ylim((-10, 80.))
</snippet></ROW><ROW><id>19969280</id><snippet>pspell</snippet></ROW><ROW><id>19969280</id><snippet>&lt;?php

class SpellChecker
{
    public function __construct($lang)
    {
        $this-&gt;pspell = pspell_new($lang);
    }

    public function check($word)
    {
        return pspell_check($this-&gt;pspell, $word);
    }

    public function closest_suggestion($word)
    {
        $suggestions = pspell_suggest($this-&gt;pspell, $word);
        $similar_sounding_words = array_filter($suggestions,
            function ($current_word) use ($word) {
                return (metaphone($current_word) == metaphone($word));
            });

        // No similar sounding words, just return the first suggestion...
        if (count($similar_sounding_words) == 0) {
            return $suggestions[0];
        }

        // Return the closest match against similar sounding words...
        return array_reduce($similar_sounding_words,
            function ($prev, $next) use ($word) {
                return (is_array($prev))
                    ? $next
                    : ((levenshtein($prev, $word) &lt; levenshtein($next, $word))
                          ? $prev
                          : $next);
            });
    }
}

$spellchecker = new SpellChecker('en');

foreach (array('spelligncheck', 'app le') as $word) {
    if (!$spellchecker-&gt;check($word)) {
        print "Closest match for \"$word\": {$spellchecker-&gt;closest_suggestion($word)}\n";
    }
}
</snippet></ROW><ROW><id>19969280</id><snippet>Closest match for "spelligncheck": spellchecker
Closest match for "app le": apple
</snippet></ROW><ROW><id>19969446</id><snippet>parse_expr</snippet></ROW><ROW><id>19969446</id><snippet>{}</snippet></ROW><ROW><id>19969446</id><snippet>&gt;&gt;&gt; from sympy.parsing.sympy_parser import parse_expr
&gt;&gt;&gt; parse_expr('(D1&amp;S&amp;~SE)|(~S&amp;~SE&amp;D0)|(SE&amp;SI)', global_dict={'Symbol':Symbol})
(SE ∧ SI) ∨ (D₀ ∧ ¬S ∧ ¬SE) ∨ (D₁ ∧ S ∧ ¬SE)
</snippet></ROW><ROW><id>19969446</id><snippet>Symbol</snippet></ROW><ROW><id>19969446</id><snippet>sympify</snippet></ROW><ROW><id>19969446</id><snippet>&gt;&gt;&gt; sympify('(D1&amp;S&amp;~SE)|(~S&amp;~SE&amp;D0)|(SE&amp;SI)', {'S': Symbol('S')})
(SE ∧ SI) ∨ (D₀ ∧ ¬S ∧ ¬SE) ∨ (D₁ ∧ S ∧ ¬SE)
</snippet></ROW><ROW><id>19969487</id><snippet>setPopupMode(2)</snippet></ROW><ROW><id>19969524</id><snippet>parseLst = parse(tokens, i)</snippet></ROW><ROW><id>19969524</id><snippet>i</snippet></ROW><ROW><id>19969524</id><snippet>i=0</snippet></ROW><ROW><id>19969524</id><snippet>parseLst = parse(tokens)</snippet></ROW><ROW><id>19969524</id><snippet>i</snippet></ROW><ROW><id>19969631</id><snippet>raw_input()</snippet></ROW><ROW><id>19969631</id><snippet>import sys

if not sys.stdin.isatty():
    stdin = sys.stdin.readlines()
    print stdin
    sys.stdin = open('/dev/tty')
else:
    print "No stdin"

test_raw = raw_input()
print test_raw
</snippet></ROW><ROW><id>19969631</id><snippet>rypeck$ echo "stdin input" | python test_argparse.py -a test 
['stdin input\n']
raw_input working!
raw_input working!
rypeck$ python test_argparse.py -a test
No stdin
raw_input working!
raw_input working!
</snippet></ROW><ROW><id>19970093</id><snippet>curl -XPUT -HContent-type:text/plain --data "stuff:morestuff"  &lt;URL&gt;?attr1=testvalue\&amp;attr2=133
</snippet></ROW><ROW><id>19970181</id><snippet>readwav</snippet></ROW><ROW><id>19970186</id><snippet>a_str = 'CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA'
b = 5      #length of substring
c = 50     #length of window
repeat = 4 #minimum number of repetitions

substrings = list({
    a_str[i:i+b]
    for i in range(len(a_str) - b)
    if a_str.count(a_str[i:i+b], i+b, i+c) &gt;= repeat - 1
})
print(substrings)
</snippet></ROW><ROW><id>19970186</id><snippet>['CGACA', 'GAAGA']
</snippet></ROW><ROW><id>19970543</id><snippet>l = map(str,range(0,10))
for i in range(10):
    print ' '.join(l[:len(l)-i]).rjust(20)  
</snippet></ROW><ROW><id>19970543</id><snippet> 0 1 2 3 4 5 6 7 8 9
   0 1 2 3 4 5 6 7 8
     0 1 2 3 4 5 6 7
       0 1 2 3 4 5 6
         0 1 2 3 4 5
           0 1 2 3 4
             0 1 2 3
               0 1 2
                 0 1
                   0  
</snippet></ROW><ROW><id>19970575</id><snippet>string.punctuation</snippet></ROW><ROW><id>19970575</id><snippet>any</snippet></ROW><ROW><id>19970575</id><snippet>import string
invalidChars = set(string.punctuation.replace("_", ""))
if any(char in invalidChars for char in word):
    print "Invalid"
else:
    print "Valid"
</snippet></ROW><ROW><id>19970575</id><snippet>invalidChars = set(string.punctuation.replace("_", ""))
</snippet></ROW><ROW><id>19970575</id><snippet>_</snippet></ROW><ROW><id>19970575</id><snippet>_</snippet></ROW><ROW><id>19970575</id><snippet>invalidChars</snippet></ROW><ROW><id>19970575</id><snippet>any</snippet></ROW><ROW><id>19970575</id><snippet>True</snippet></ROW><ROW><id>19970575</id><snippet>invalidChars</snippet></ROW><ROW><id>19970575</id><snippet>word = "Welcome"
import re
print "Valid" if re.match("^[a-zA-Z0-9_]*$", word) else "Invalid"
</snippet></ROW><ROW><id>19970749</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>19970749</id><snippet>'string'</snippet></ROW><ROW><id>19970749</id><snippet>remove</snippet></ROW><ROW><id>19970749</id><snippet>import re
from collections import Counter

bad_words = ['and']

def create_keywords():
    essay_text = 'This, this, this and that.'
    # This regular expression finds consecutive strings of lowercase letters.
    # Counter counts each unique string and collects them in a dictionary.
    result = Counter(re.findall(r'[a-z]+',essay_text.lower()))
    for w in bad_words:
        result.pop(w)
    return dict(result) # return a plain dict instead of a Counter object.
</snippet></ROW><ROW><id>19970749</id><snippet>&gt;&gt;&gt; create_keywords()
{'this': 3, 'that': 1}
</snippet></ROW><ROW><id>19970763</id><snippet>start = 10
width = 9
for i in range(1, width+1):
    for _ in range(i):
        print (start, end=" ")
        start += 1
    print('\n')
</snippet></ROW><ROW><id>19970763</id><snippet>10 

11 12 

13 14 15 

16 17 18 19 

20 21 22 23 24 

25 26 27 28 29 30 

31 32 33 34 35 36 37 

38 39 40 41 42 43 44 45 

46 47 48 49 50 51 52 53 54 
</snippet></ROW><ROW><id>19970863</id><snippet>for</snippet></ROW><ROW><id>19970863</id><snippet>print [(k, len(v)) for k, v in count.items()]
</snippet></ROW><ROW><id>19970863</id><snippet>[('digits', 10), ('letters', 3)]
</snippet></ROW><ROW><id>19971060</id><snippet>io.open</snippet></ROW><ROW><id>19971060</id><snippet>str</snippet></ROW><ROW><id>19971060</id><snippet>open</snippet></ROW><ROW><id>19971060</id><snippet>io.open</snippet></ROW><ROW><id>19971060</id><snippet>file.write(('%s\n' % (cData)).decode())
</snippet></ROW><ROW><id>19971060</id><snippet>file.write(u'%s\n' % (cData))
</snippet></ROW><ROW><id>19971060</id><snippet>cData</snippet></ROW><ROW><id>19971644</id><snippet>callback</snippet></ROW><ROW><id>19971644</id><snippet># Setthe callback name to "n"
convert_url = "http://quotes.money.163.com/stocksearch/json.do?type=&amp;count=10&amp;word=000001&amp;callback=n"
</snippet></ROW><ROW><id>19971644</id><snippet>import json

def loads_jsonp(jsonp, callback_name):
    jsonp = jsonp.strip()
    if jsonp.startswith(callback_name + '(') and jsonp.endswith(')'):
        # remove the leading "callback(" and trailing ")", then parse the json
        return json.loads(jsonp[len(callback_name) + 1:-1])
    raise ValueError.new("Callback names do not match, or invalid JSONP format")
</snippet></ROW><ROW><id>19971644</id><snippet># `jsonp_data` variable contains the body of the response
my_data = loads_jsonp(jsonp_data, "n")
</snippet></ROW><ROW><id>19971644</id><snippet>json.loads</snippet></ROW><ROW><id>19971743</id><snippet>x</snippet></ROW><ROW><id>19971743</id><snippet>set_x</snippet></ROW><ROW><id>19971743</id><snippet>class vec(object): # &lt;-----
   def __init__(self,v=(0,0,0,0)):
       self.v = list(v)

   @property
   def x(self):
       return self.v[0]

   @x.setter
   def x(self, val): # &lt;--------
       self.v[0] = val
</snippet></ROW><ROW><id>19971743</id><snippet>property</snippet></ROW><ROW><id>19971743</id><snippet>a.x = ...</snippet></ROW><ROW><id>19971743</id><snippet>x</snippet></ROW><ROW><id>19971789</id><snippet>
sql = "select * from PERSON where (F_Name = '%s' or L_Name = '%s' or Age = '%s') and Gender = '%s';" 
self.cursor.execute(sql % (self.fname, self.lname, self.age, self.gender))
</snippet></ROW><ROW><id>19972099</id><snippet>action</snippet></ROW><ROW><id>19972099</id><snippet>search</snippet></ROW><ROW><id>19972099</id><snippet>search</snippet></ROW><ROW><id>19972099</id><snippet>searchresult.html</snippet></ROW><ROW><id>19972099</id><snippet>return render(request, 'searchresult.html', {'var1': var1 })</snippet></ROW><ROW><id>19972099</id><snippet>searchresult.html</snippet></ROW><ROW><id>19972099</id><snippet>{% for i in var1 %}
    {{i.name}}&lt;br&gt;
{% endfor %}
</snippet></ROW><ROW><id>19972203</id><snippet>waypoint[0]</snippet></ROW><ROW><id>19972203</id><snippet>waypoint[0]</snippet></ROW><ROW><id>19972203</id><snippet>waypoint[1]</snippet></ROW><ROW><id>19972203</id><snippet>waypoint[2]</snippet></ROW><ROW><id>19972203</id><snippet>import lib601.sm as sm

class FollowFigure(sm.SM):
    def __init__(self, waypointsList):
        self.waypoints = waypointsList
        self.next_to_visit = 0  # The next waypoint to be visited

    def getNextValues(self, state, inp):
        sensors = inp
        current_point = sensors.odometry.point()
        if self.waypoints[self.next_to_visit].isNear(current_point, 0.01):
            # We reached the next waypoint, go for next waypoint
            self.next_to_visit += 1
        # Return the next waypoint to be visited
        return (state, self.waypoints[self.next_to_visit])
</snippet></ROW><ROW><id>19972203</id><snippet>while</snippet></ROW><ROW><id>19972203</id><snippet>return</snippet></ROW><ROW><id>19972203</id><snippet>waypoints[0]</snippet></ROW><ROW><id>19972203</id><snippet>waypoints[0]</snippet></ROW><ROW><id>19972203</id><snippet>self.next_to_visit</snippet></ROW><ROW><id>19972203</id><snippet>waypoints[0]</snippet></ROW><ROW><id>19972203</id><snippet>waypoints[self.next_to_visit]</snippet></ROW><ROW><id>19972203</id><snippet>self.next_to_visit</snippet></ROW><ROW><id>19972203</id><snippet>waypoints</snippet></ROW><ROW><id>19972203</id><snippet>self.next_to_visit</snippet></ROW><ROW><id>19972244</id><snippet>ch.setLevel(logging.INFO)
</snippet></ROW><ROW><id>19972244</id><snippet>root.setLevel(logging.INFO)
</snippet></ROW><ROW><id>19972353</id><snippet>allow_no_value</snippet></ROW><ROW><id>19972353</id><snippet>import ConfigParser
c = ConfigParser.ConfigParser(allow_no_value=True)
c.read("test.ini")
</snippet></ROW><ROW><id>19972353</id><snippet>ConfigParser.RawConfigParser</snippet></ROW><ROW><id>19972353</id><snippet>allow_no_value</snippet></ROW><ROW><id>19972414</id><snippet>from django.shortcuts import get_object_or_404, render

def user_page(request, username):
    u = get_object_or_404(User, username=username)
    feeds = u.userfeed_set.all()
    variables = {
        'username' : username,
        'feeds' : feeds
    }
    return render(request, 'user_page.html', variables)
</snippet></ROW><ROW><id>19972414</id><snippet>self.link.url</snippet></ROW><ROW><id>19972414</id><snippet>from django.contrib.auth.models import User

class AllFeeds(models.Model):
    url = models.URLField(unique=True, max_length=40)

    def __unicode__(self):
        return unicode(self.url)

class UserFeed(models.Model):
    user = models.ForeignKey(User)
    myfeeds = models.ForeignKey(AllFeeds)

    def __unicode__(self):
        return unicode('{0} {1}'.format(self.user.username, self.myfeeds.url))
</snippet></ROW><ROW><id>19972693</id><snippet>import re

def with_re_search():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        if re.search(r"\s", e):
            a[i] = e.replace(' ','')

def with_in():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        if ' ' in e:
            a[i] = e.replace(' ','')

def without_search():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        a[i] = e.replace(' ','')

def with_translate():
    a = ['452 04','45204','455 04','88804']
    for i, e in enumerate(a):
        a[i] = e.translate(None,'')

from timeit import timeit as t
n = 1000000
t('f()', setup='from __main__ import with_re_search as f', number=n) # 5.37417006493
t('f()', setup='from __main__ import with_in as f',        number=n) # 1.04646992683
t('f()', setup='from __main__ import without_search as f', number=n) # 1.2475438118
t('f()', setup='from __main__ import with_translate as f', number=n) # 1.56214690208
</snippet></ROW><ROW><id>19972693</id><snippet>re.search</snippet></ROW><ROW><id>19972693</id><snippet>t('f()', setup='from __main__ import with_re_search as f', number=n) # 24.345079875027295
t('f()', setup='from __main__ import with_in as f',        number=n) # 1.1399168980424292
t('f()', setup='from __main__ import without_search as f', number=n) # 1.3967725560069084   
</snippet></ROW><ROW><id>19972693</id><snippet>str.translate</snippet></ROW><ROW><id>19972693</id><snippet>str.translate</snippet></ROW><ROW><id>19972693</id><snippet>deletechars</snippet></ROW><ROW><id>19972799</id><snippet>fn = 'msg.txt'</snippet></ROW><ROW><id>19972799</id><snippet>fn = '/home/msh/sandbox/python/cron/msg.txt'</snippet></ROW><ROW><id>19972799</id><snippet>python2.7</snippet></ROW><ROW><id>19972799</id><snippet>python</snippet></ROW><ROW><id>19972799</id><snippet>/home/msh/sandbox/python/cron/print.py</snippet></ROW><ROW><id>19973024</id><snippet>export PATH=/path/to/python3
source /usr/local/bin/virtualenvwrapper.sh
mkvirtualenv test --no-site-packages
</snippet></ROW><ROW><id>19973024</id><snippet>Qt</snippet></ROW><ROW><id>19973223</id><snippet>__new__</snippet></ROW><ROW><id>19973223</id><snippet>__new__</snippet></ROW><ROW><id>19973223</id><snippet>__new__()</snippet></ROW><ROW><id>19973223</id><snippet>super()</snippet></ROW><ROW><id>19973223</id><snippet>__new__</snippet></ROW><ROW><id>19973223</id><snippet>cls</snippet></ROW><ROW><id>19973223</id><snippet>type()</snippet></ROW><ROW><id>19973223</id><snippet>__new__</snippet></ROW><ROW><id>19973223</id><snippet>__new__</snippet></ROW><ROW><id>19973280</id><snippet>#!/usr/bin/python
import csv

with open('text_file.txt') as input_file:
    csv_data = []

    for row in csv.reader(input_file, delimiter=','):
        csv_data += [[row[0], int(row[1].strip()) + 10]]

    convert_to_csv = True

    if convert_to_csv:
        with open('input.csv', 'w') as output_file:
            csv_file = csv.writer(output_file, delimiter=',')
            csv_file.writerow(['Text', 'Count'])

            for row in csv_data:
                csv_file.writerow(row)
</snippet></ROW><ROW><id>19973597</id><snippet>open()</snippet></ROW><ROW><id>19973597</id><snippet>for line in input_file:</snippet></ROW><ROW><id>19973597</id><snippet>for part in line.split('\t'):</snippet></ROW><ROW><id>19973597</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19973597</id><snippet>if part.startswith('&lt;') and line.endswith('&gt;'):</snippet></ROW><ROW><id>19973597</id><snippet>filtered_part = re.sub(r'[^a-zA-Z0-9/:._]', '', part)</snippet></ROW><ROW><id>19973597</id><snippet>filtered_line = '\t'.join(filtered_parts)</snippet></ROW><ROW><id>19973597</id><snippet>output_file.write(filtered_line + '\n')</snippet></ROW><ROW><id>19973662</id><snippet>L = [['Text', 'Count']]
for line in inputFile:
    L.append([var, var5])
</snippet></ROW><ROW><id>19973671</id><snippet>Question</snippet></ROW><ROW><id>19973671</id><snippet>Question</snippet></ROW><ROW><id>19973671</id><snippet>question.id</snippet></ROW><ROW><id>19973671</id><snippet>poll.id</snippet></ROW><ROW><id>19973671</id><snippet>&lt;form action="{% url 'polls:vote' question.id %}" method="post"&gt;
</snippet></ROW><ROW><id>19973867</id><snippet>def scores_to_dict(scores):
    d = {}
    team_1 = ('team_1', scores[:len(scores)/2])
    team_2 = ('team_2', scores[len(scores)/2:])
    teams = [team_1, team_2]
    for team, scores in teams:
        for idx, score in enumerate(reversed(scores)):
            if idx == 0:
                d['%s_total' % team] = score
            elif idx == 1:
                d['%s_overtime' % team] = score
            else:
                d['%s_round_%s' % (team, len(scores)-idx)] = score
    return d
</snippet></ROW><ROW><id>19973867</id><snippet>scores = [[1, 5, 3, 1, 9, 10, 1, 20],
          [1,5],
          [1, 2, 3, 1, 7, 10, 1, 2, 8, 21],
          [1, 5, 6, 4, 0, 16, 1, 5, 6, 4, 0, 16]]

from pprint import pprint
for score in scores:
    print score
    pprint(scores_to_dict(score))
    print '--'
</snippet></ROW><ROW><id>19973867</id><snippet>&gt;&gt;&gt; 
[1, 5, 3, 1, 9, 10, 1, 20]
{'team_1_overtime': 3,
 'team_1_round_1': 1,
 'team_1_round_2': 5,
 'team_1_total': 1,
 'team_2_overtime': 1,
 'team_2_round_1': 9,
 'team_2_round_2': 10,
 'team_2_total': 20}
--
[1, 5]
{'team_1_total': 1, 'team_2_total': 5}
--
[1, 2, 3, 1, 7, 10, 1, 2, 8, 21]
{'team_1_overtime': 1,
 'team_1_round_1': 1,
 'team_1_round_2': 2,
 'team_1_round_3': 3,
 'team_1_total': 7,
 'team_2_overtime': 8,
 'team_2_round_1': 10,
 'team_2_round_2': 1,
 'team_2_round_3': 2,
 'team_2_total': 21}
--
[1, 5, 6, 4, 0, 16, 1, 5, 6, 4, 0, 16]
{'team_1_overtime': 0,
 'team_1_round_1': 1,
 'team_1_round_2': 5,
 'team_1_round_3': 6,
 'team_1_round_4': 4,
 'team_1_total': 16,
 'team_2_overtime': 0,
 'team_2_round_1': 1,
 'team_2_round_2': 5,
 'team_2_round_3': 6,
 'team_2_round_4': 4,
 'team_2_total': 16}
--
</snippet></ROW><ROW><id>19973887</id><snippet>import re

def extract_next_state(s):
    p = re.compile('(next_state=)|(\()|(\))')
    depth = 0
    startindex = None
    for m in p.finditer(s):
        if m.group(1):            # next_state=
            startindex = m.end()
        elif startindex is None:  # haven't found 'next_state=' yet
            continue
        elif m.group(2):          # (
            depth += 1
        elif m.group(3):          # )
            depth -= 1
            if depth == 0:
                return s[startindex:m.end()]
            elif depth &lt; 0:
                return s[startindex:m.start()]
    if startindex is None: return None
    return s[startindex:] + ')' * depth

a = '[(next_state=(!SE&amp;((!B2&amp;D)|(B2&amp;lq))|(SE&amp;SI'
print(extract_next_state(a))
b = '[(next_state=(!SE&amp;((!B2&amp;D)|(B2&amp;lq))|(SE&amp;SI)),clear=B2&amp;lqn,preset=B2&amp;lq)))]'
print(extract_next_state(b))
</snippet></ROW><ROW><id>19973887</id><snippet>(!SE&amp;((!B2&amp;D)|(B2&amp;lq))|(SE&amp;SI))
(!SE&amp;((!B2&amp;D)|(B2&amp;lq))|(SE&amp;SI))
</snippet></ROW><ROW><id>19973961</id><snippet>sortMissingLast="true"</snippet></ROW><ROW><id>19973961</id><snippet>&lt;field name="sort_date" type="date" indexed="true" stored="true"
 multiValued="false" sortMissingLast="true" /&gt;

&lt;field name="sort_date_exact" type="date" indexed="true" stored="true"
 multiValued="false" sortMissingLast="true" /&gt;
</snippet></ROW><ROW><id>19974231</id><snippet>class Quadrant(object):
    def __init__(self):
        self.klingonCount = 0
        self.baseHere = 0
        self.starCount = 0
</snippet></ROW><ROW><id>19974231</id><snippet>quadrants = [[Quadrant() for i in range(8)] for j in range(8)]
</snippet></ROW><ROW><id>19974231</id><snippet>for x in range(9):
    for y in range(9):
        #...
</snippet></ROW><ROW><id>19974300</id><snippet>data</snippet></ROW><ROW><id>19974300</id><snippet>out_file = open(to_file, 'w')
while fact &lt; 5:
    response = urlopen(url)
    data = response.read()
    fact += 1
    number += 1
    print
    print "%s). %s " % (str(number), data)
    out_file.write(data)
    out_file.write('\n') #one fact per line

out_file.close()
</snippet></ROW><ROW><id>19974417</id><snippet>plivo.py</snippet></ROW><ROW><id>19974417</id><snippet>plivo.pyc</snippet></ROW><ROW><id>19974417</id><snippet>__file__</snippet></ROW><ROW><id>19974417</id><snippet>print plivo.__file__
</snippet></ROW><ROW><id>19974452</id><snippet>files</snippet></ROW><ROW><id>19974452</id><snippet>files = {'name': (&lt;filename&gt;, &lt;file object&gt;, &lt;content type&gt;, &lt;per-part headers&gt;)}
</snippet></ROW><ROW><id>19974452</id><snippet>files = {'file': ('filename.xls', open('filename.xls'), 'application/vnd.ms-excel', {})}
</snippet></ROW><ROW><id>19974695</id><snippet>_urljoin(url, response)</snippet></ROW><ROW><id>19974695</id><snippet>Item Loaders</snippet></ROW><ROW><id>19974695</id><snippet>_urljoin(url, response)</snippet></ROW><ROW><id>19974695</id><snippet>def urljoin_w_context(url, loader_context):
    response = loader_context.get('response')
    return _urljoin(url, response)
</snippet></ROW><ROW><id>19974695</id><snippet>ItemLoader</snippet></ROW><ROW><id>19974695</id><snippet>    ...
    link_in = MapCompose(urljoin_w_context)
    ...
</snippet></ROW><ROW><id>19974695</id><snippet>ItemLoader</snippet></ROW><ROW><id>19974695</id><snippet>def parse_something(self, response):
    ...
    loader = ItemLoader(item, response=response)
    ...
</snippet></ROW><ROW><id>19975349</id><snippet>r1 = r"""(?xi)
    ^
    (
        [a-z]+          
        |               
        \x20(?!\x20)    
        |               
        -(?!-)          
    )
    +
    $
"""
</snippet></ROW><ROW><id>19975349</id><snippet>\x20(?!\x20)</snippet></ROW><ROW><id>19975349</id><snippet>[a-z0-9&amp;+ etc]</snippet></ROW><ROW><id>19975620</id><snippet>if 'cat' is in i:</snippet></ROW><ROW><id>19975620</id><snippet>cat</snippet></ROW><ROW><id>19975620</id><snippet>r = re.compile(r'(The[^|]*?cat[^|]*?ful)|(The[^|]*?ful)')
text = 'The dog is  black and beautiful | The dog and the cat is black and beautiful'
for i in r.finditer(text):
  print i.groups()
</snippet></ROW><ROW><id>19975620</id><snippet>(None, 'The dog is  black and beautiful')
('The dog and the cat is black and beautiful', None)
</snippet></ROW><ROW><id>19975763</id><snippet>{% static "img/icons/vendor/yahoo_weather/{{variable_int}}.gif" %} 
</snippet></ROW><ROW><id>19975763</id><snippet>"/static/img/icons/vendor/yahoo_weather/%7B%7Bvariable_int%7D%7D.gif"
</snippet></ROW><ROW><id>19975763</id><snippet>&lt;img src="{{ STATIC_URL}}img/icons/vendor/yahoo_weather/{{variable_int}}.gif" %}" /&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>19975890</id><snippet>nite2.initialize()</snippet></ROW><ROW><id>19975890</id><snippet>niteDumpUserTrackerCalibrationDataToFile</snippet></ROW><ROW><id>19976109</id><snippet>firstChild</snippet></ROW><ROW><id>19976109</id><snippet>minidom.py</snippet></ROW><ROW><id>19976162</id><snippet>numpy.fft.fft</snippet></ROW><ROW><id>19976162</id><snippet>1/N</snippet></ROW><ROW><id>19976162</id><snippet>dt</snippet></ROW><ROW><id>19976162</id><snippet>x[n] - x[n-1]</snippet></ROW><ROW><id>19976162</id><snippet>1/N</snippet></ROW><ROW><id>19976162</id><snippet>from numpy import *</snippet></ROW><ROW><id>19976162</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# create data
N = 4097
T = 100.0
t = np.linspace(-T/2,T/2,N)
f = np.exp(-np.pi*t**2)

# perform FT and multiply by dt
dt = t[1]-t[0]
ft = np.fft.fft(f) * dt      
freq = np.fft.fftfreq(N, dt)
freq = freq[:N/2+1]

# plot results
plt.plot(freq, np.abs(ft[:N/2+1]),'o')
plt.plot(freq, np.exp(-np.pi * freq**2),'r')
plt.legend(('numpy fft * dt', 'exact solution'), loc='upper right')
plt.xlabel('f')
plt.ylabel('amplitude')
plt.xlim([0, 1.4])
plt.show()
</snippet></ROW><ROW><id>19976381</id><snippet>urls.py</snippet></ROW><ROW><id>19976381</id><snippet>accounts/login</snippet></ROW><ROW><id>19976418</id><snippet>auto_now</snippet></ROW><ROW><id>19976418</id><snippet>auto_now_add</snippet></ROW><ROW><id>19976418</id><snippet>put()</snippet></ROW><ROW><id>19976441</id><snippet>winsound</snippet></ROW><ROW><id>19976441</id><snippet>import threading
import winsound

t = threading.Thread(target=winsound.PlaySound, args=[sound, flags])
while True:
    do_some_stuff()
    t.join(0)
    if not t.is_alive():
        # the sound has stopped, do something
</snippet></ROW><ROW><id>19976441</id><snippet>import queue
import threading
import winsound

def player(q):
    while True:
        sound, flags = q.get()
        winsound.PlaySound(sound, flags)

q = queue.Queue()
t = threading.Thread(target=player, args=[q])
t.daemon = True
q.push(a_sound, some_flags)
q.push(another_sound, some_flags)
do_stuff_for_a_long_time()
</snippet></ROW><ROW><id>19976749</id><snippet>import settings</snippet></ROW><ROW><id>19976749</id><snippet>settings.py</snippet></ROW><ROW><id>19976749</id><snippet>sys.path</snippet></ROW><ROW><id>19976749</id><snippet>django.conf.global_settings</snippet></ROW><ROW><id>19976749</id><snippet>django.conf.settings</snippet></ROW><ROW><id>19976749</id><snippet>from django.conf import settings</snippet></ROW><ROW><id>19976801</id><snippet>copy</snippet></ROW><ROW><id>19976801</id><snippet>Definition: series.copy(self, order='C')
Source:
    def copy(self, order='C'):
        """
        Return new Series with copy of underlying values

        Returns
        -------
        cp : Series
        """
        return Series(self.values.copy(order), index=self.index,
                      name=self.name)
</snippet></ROW><ROW><id>19976801</id><snippet>index</snippet></ROW><ROW><id>19976801</id><snippet>Series</snippet></ROW><ROW><id>19976801</id><snippet>series = pd.Series(range(3))
    ...: series_copy = pd.Series(series.values.copy(), index=series.index.copy(),
    ...:                           name=series.name)
    ...: series_copy.index += 1

series
Out[72]: 
0    0
1    1
2    2
dtype: int64

series_copy
Out[73]: 
1    0
2    1
3    2
dtype: int64
</snippet></ROW><ROW><id>19976801</id><snippet>copy(deep=True)</snippet></ROW><ROW><id>19976891</id><snippet>exec</snippet></ROW><ROW><id>19976891</id><snippet>PyTokenizer_FromFile</snippet></ROW><ROW><id>19976891</id><snippet>PyTokenizer_FromString</snippet></ROW><ROW><id>19976891</id><snippet>compile()</snippet></ROW><ROW><id>19976891</id><snippet>PyTokenizer_FromFile</snippet></ROW><ROW><id>19976891</id><snippet>fp_readl</snippet></ROW><ROW><id>19976891</id><snippet>PyTokenizer_FromString</snippet></ROW><ROW><id>19976891</id><snippet>encoding</snippet></ROW><ROW><id>19976891</id><snippet>fp_readl</snippet></ROW><ROW><id>19976891</id><snippet>compile()</snippet></ROW><ROW><id>19976891</id><snippet>exec</snippet></ROW><ROW><id>19976891</id><snippet>codecs.BOM_*</snippet></ROW><ROW><id>19976891</id><snippet>coding</snippet></ROW><ROW><id>19976891</id><snippet>SyntaxError</snippet></ROW><ROW><id>19976891</id><snippet>import codecs
import re
_boms = (codecs.BOM_UTF8,) + tuple(v for k, v in vars(codecs).iteritems() if k.startswith('BOM_') and k[-3:] in ('_LE', '_BE'))
_coding_line = re.compile('\s*#\s*coding[:=]\s*[-\w.]+').match

def compile_precheck(string):
    if string.startswith(_boms):
        return
    for line in string.splitlines()[:2]:
        if _coding_line(line)
            return
    try:
        string.decode('ascii')
    except UnicodeDecodeError:
        raise SyntaxError(
            "Non-ASCII character in source string but no encoding declared")

source = open("tx.py").read()
compile_precheck(source)
tx = compile(source, "tx.py", "exec")
</snippet></ROW><ROW><id>19977033</id><snippet>request.matchdict</snippet></ROW><ROW><id>19977033</id><snippet>range()</snippet></ROW><ROW><id>19977033</id><snippet>range</snippet></ROW><ROW><id>19977033</id><snippet>request.matchdict['page_number']</snippet></ROW><ROW><id>19977033</id><snippet>&lt;a tal:condition="request.matchdict['page_number'] == str(page_number)"
</snippet></ROW><ROW><id>19977192</id><snippet>wait</snippet></ROW><ROW><id>19977192</id><snippet>Popen</snippet></ROW><ROW><id>19977192</id><snippet>call</snippet></ROW><ROW><id>19977192</id><snippet>check_call</snippet></ROW><ROW><id>19977192</id><snippet>export</snippet></ROW><ROW><id>19977192</id><snippet>stdout</snippet></ROW><ROW><id>19977192</id><snippet>check_output</snippet></ROW><ROW><id>19977192</id><snippet>check_call</snippet></ROW><ROW><id>19977192</id><snippet>openssl</snippet></ROW><ROW><id>19977192</id><snippet>output</snippet></ROW><ROW><id>19977192</id><snippet>openssl x509 -in $userpem -noout -text</snippet></ROW><ROW><id>19977192</id><snippet>$userpem</snippet></ROW><ROW><id>19977192</id><snippet>$()</snippet></ROW><ROW><id>19977192</id><snippet>#!/bin/bash
userpem=$(egrep "CN=$1/" index.txt|awk '{print $3}').pem
output=$(openssl x509 -in $userpem -noout -text)
echo $output
</snippet></ROW><ROW><id>19977192</id><snippet>def info(request, benutzername):
    os.chdir("/var/www/openvpn/examples/easy-rsa/2.0/keys")
    output = subprocess.check_output(["/var/www/openvpn/examples/easy-rsa/2.0/keys/getinfo.sh",benutzername])
    return HttpResponse(output)
</snippet></ROW><ROW><id>19977192</id><snippet>os.chdir</snippet></ROW><ROW><id>19977192</id><snippet>gevent</snippet></ROW><ROW><id>19977192</id><snippet>chdir</snippet></ROW><ROW><id>19977192</id><snippet>chdir</snippet></ROW><ROW><id>19977192</id><snippet>subprocess</snippet></ROW><ROW><id>19977519</id><snippet>_repr_latex_</snippet></ROW><ROW><id>19977519</id><snippet>YourType</snippet></ROW><ROW><id>19977703</id><snippet>str</snippet></ROW><ROW><id>19977703</id><snippet>bytearray</snippet></ROW><ROW><id>19977703</id><snippet>&gt;&gt;&gt; data = 'hello'
&gt;&gt;&gt; array = bytearray(data)
&gt;&gt;&gt; array[0]
104
&gt;&gt;&gt; hex(array[0])
0x68
&gt;&gt;&gt; array[0] == 0x68
True
</snippet></ROW><ROW><id>19977703</id><snippet>ord</snippet></ROW><ROW><id>19977703</id><snippet>&gt;&gt;&gt; ord(data[0])
104
</snippet></ROW><ROW><id>19977703</id><snippet>&gt;&gt;&gt; list(bytearray(data)) == [ord(c) for c in data]
True
</snippet></ROW><ROW><id>19977703</id><snippet>str</snippet></ROW><ROW><id>19977729</id><snippet>except</snippet></ROW><ROW><id>19977729</id><snippet>RetrieveWebData()</snippet></ROW><ROW><id>19977729</id><snippet>    if e.code == 503:
        return RetrieveWebData(MyUrl)
</snippet></ROW><ROW><id>19977729</id><snippet>FilterWebData()</snippet></ROW><ROW><id>19977729</id><snippet>        RecentTors = link.get('href')
</snippet></ROW><ROW><id>19977729</id><snippet>RecentTors</snippet></ROW><ROW><id>19977729</id><snippet>    RecentTors = []
    for link in soup.find_all('a'):
        RecentTors += [link.get('href')]
    return RecentTors
</snippet></ROW><ROW><id>19977729</id><snippet>lxml</snippet></ROW><ROW><id>19977729</id><snippet>def FilterWebData(RawData):
    try:
        TorData = []

        for RecentTor in etree.HTML(RawData).xpath("//a[contains(@class, 'torType')]"):
            TorData += [RecentTor.attrib['href']]

        return TorData
    except OSError as e:
        print("An error occurred during filtering",e)
</snippet></ROW><ROW><id>19977757</id><snippet>cget</snippet></ROW><ROW><id>19977757</id><snippet>print("the foreground of bluebutton is", bluebutton.cget("fg"))
</snippet></ROW><ROW><id>19977981</id><snippet>regex</snippet></ROW><ROW><id>19977981</id><snippet>members_box1</snippet></ROW><ROW><id>19977981</id><snippet>members_box2</snippet></ROW><ROW><id>19977981</id><snippet>import re
eachbox = soup.findAll('div', {'class':re.compile(r'members_box[12]')})
for eachuniversity in eachbox:
</snippet></ROW><ROW><id>19977981</id><snippet>import bs4 as bs
import urllib2
import re
import csv

page = urllib2.urlopen("http://www.codissia.com/member/members-directory/?mode=paging&amp;Keyword=&amp;Type=&amp;pg=1")
content = page.read()
soup = bs.BeautifulSoup(content)

with open('/tmp/ccc.csv', 'wb') as f:
    writer = csv.writer(f, delimiter=',', lineterminator='\n', )
    eachbox = soup.find_all('div', {'class':re.compile(r'members_box[12]')})
    for pair in zip(*[iter(eachbox)]*2):
        writer.writerow([text.strip() for item in pair for text in item.stripped_strings])
</snippet></ROW><ROW><id>19977981</id><snippet>div</snippet></ROW><ROW><id>19977981</id><snippet>soup.findAll('div ')
</snippet></ROW><ROW><id>19977981</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>19977981</id><snippet>zip(*[iter(iterable)]*n)
</snippet></ROW><ROW><id>19977981</id><snippet>n</snippet></ROW><ROW><id>19977981</id><snippet>iterable</snippet></ROW><ROW><id>19977981</id><snippet>n</snippet></ROW><ROW><id>19978021</id><snippet>input = PdfFileReader(file(filepath, "rb"))
</snippet></ROW><ROW><id>19978021</id><snippet>inputStream = file(filepath, "rb")
input = PdfFileReader(inputStream)
(... when done with this file...)
inputStream.close()
</snippet></ROW><ROW><id>19978106</id><snippet>parent</snippet></ROW><ROW><id>19978106</id><snippet>import parent

class child(parent.parent):
    def __init__(self):
        print "initialised child"
</snippet></ROW><ROW><id>19978106</id><snippet>from parent import parent

class child(parent):
    def __init__(self):
        print "initialised child"
</snippet></ROW><ROW><id>19978127</id><snippet>striptags</snippet></ROW><ROW><id>19978127</id><snippet>django-tinymce</snippet></ROW><ROW><id>19978156</id><snippet>c = VideoCapture(fn)
</snippet></ROW><ROW><id>19978209</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>19978209</id><snippet>driver.switch_to_frame('id3')
driver.find_element_by_link_text('TEXT').click()
</snippet></ROW><ROW><id>19978209</id><snippet>&lt;frameset&gt;</snippet></ROW><ROW><id>19978209</id><snippet>&lt;frameset&gt;</snippet></ROW><ROW><id>19978209</id><snippet>switch_to_frame</snippet></ROW><ROW><id>19978771</id><snippet>seq=None</snippet></ROW><ROW><id>19978771</id><snippet>def collatz(n, seq=None):
    seq = [] if seq is None else seq
    seq.append(n)
    if n == 1:
        return seq
    if n%2 == 0:
        return collatz(n/2, seq)
    else:
        return collatz((3*n)+1, seq)
</snippet></ROW><ROW><id>19978792</id><snippet>if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-k", dest = "foo",  action='store_true')
    args = parser.parse_args()
    # do things...
</snippet></ROW><ROW><id>19979056</id><snippet>try:
  binary = struct.pack('&gt;f', value)
except OverflowError:
  binary = struct.pack('&gt;d', value)
</snippet></ROW><ROW><id>19979056</id><snippet>3.3</snippet></ROW><ROW><id>19979056</id><snippet>3.299999952316284</snippet></ROW><ROW><id>19979056</id><snippet>struct.unpack('&gt;f', struct.pack('&gt;f', 3.3))
(3.299999952316284,)
</snippet></ROW><ROW><id>19979056</id><snippet>try:
  binary = struct.pack('&gt;f', value)
  if struct.unpack('&gt;f', binary)[0] != value:
    binary = struct.pack('&gt;d', value)
except OverflowError:
  binary = struct.pack('&gt;d', value)
</snippet></ROW><ROW><id>19979356</id><snippet>.execute()</snippet></ROW><ROW><id>19979356</id><snippet>.stream()</snippet></ROW><ROW><id>19979356</id><snippet>table_query = neo4j.CypherQuery(db, "merge (x: Table{name: 'table_param'}) return x")
results = table_query.execute()

for r in results:
    # get the node you return in your query
    my_node = r[0]
    # get the properties of your node
    props = my_node.get_properties()
</snippet></ROW><ROW><id>19979498</id><snippet>git push</snippet></ROW><ROW><id>19979498</id><snippet>git pull
bin/buildout
</snippet></ROW><ROW><id>19979498</id><snippet>PIP_DOWNLOAD_CACHE</snippet></ROW><ROW><id>19979498</id><snippet>settings.py</snippet></ROW><ROW><id>19979498</id><snippet>packages</snippet></ROW><ROW><id>19979498</id><snippet>import os.path

PROJECT_ROOT = os.path.normpath(os.path.dirname(__file__))
PIP_DOWNLOAD_CACHE = os.path.abspath(PROJECT_ROOT+'/packages/'),
</snippet></ROW><ROW><id>19979723</id><snippet>heapq</snippet></ROW><ROW><id>19979723</id><snippet>heapq</snippet></ROW><ROW><id>19979723</id><snippet>heap[k] &lt;= heap[2*k+1]</snippet></ROW><ROW><id>19979723</id><snippet>heap[k] &lt;= heap[2*k+2]</snippet></ROW><ROW><id>19979723</id><snippet>k</snippet></ROW><ROW><id>19979723</id><snippet>heap[0]</snippet></ROW><ROW><id>19979723</id><snippet>heap[0]</snippet></ROW><ROW><id>19979723</id><snippet>def heapsort(heap):
    return [heapq.heappop(heap) for _ in range(len(heap))]
</snippet></ROW><ROW><id>19979723</id><snippet>sorted(heap)</snippet></ROW><ROW><id>19979723</id><snippet>n</snippet></ROW><ROW><id>19979802</id><snippet>groupby</snippet></ROW><ROW><id>19979802</id><snippet>transform</snippet></ROW><ROW><id>19979802</id><snippet>max - min</snippet></ROW><ROW><id>19979802</id><snippet>peak-to-peak</snippet></ROW><ROW><id>19979802</id><snippet>ptp</snippet></ROW><ROW><id>19979802</id><snippet>ptp</snippet></ROW><ROW><id>19979802</id><snippet>lambda x: x.max() - x.min()</snippet></ROW><ROW><id>19979802</id><snippet>&gt;&gt;&gt; df = pd.read_csv("eye.csv",sep="\s+")
&gt;&gt;&gt; df["duration"] = df.dropna().groupby("event")["time"].transform("ptp")
&gt;&gt;&gt; df
     time  event  duration
49  44295    NaN       NaN
50  44311    NaN       NaN
51  44328    NaN       NaN
52  44345      2        66
53  44361      2        66
54  44378      2        66
55  44395      2        66
56  44411      2        66
57  44428      3        50
58  44445      3        50
59  44461      3        50
60  44478      3        50
61  44495    NaN       NaN
62  44511    NaN       NaN
63  44528    NaN       NaN
64  44544    NaN       NaN
65  44561    NaN       NaN
66  44578    NaN       NaN
67  44594    NaN       NaN
68  44611      4        33
69  44628      4        33
70  44644      4        33
71  44661    NaN       NaN
72  44678    NaN       NaN
</snippet></ROW><ROW><id>19979802</id><snippet>dropna</snippet></ROW><ROW><id>19979802</id><snippet>NaN</snippet></ROW><ROW><id>19979802</id><snippet>event</snippet></ROW><ROW><id>19979802</id><snippet>ptp</snippet></ROW><ROW><id>19979802</id><snippet>NaN</snippet></ROW><ROW><id>19980626</id><snippet>KMeans</snippet></ROW><ROW><id>19980813</id><snippet>.keys()</snippet></ROW><ROW><id>19980813</id><snippet>fdist1 = FreqDist(text1)
vocabulary1 = fdist1.keys()
x = list(vocabulary1)[:50]
# or...
vocabulary1 = list(fdist1.keys())
x = vocabulary1[:50]
</snippet></ROW><ROW><id>19980851</id><snippet>(test)alko@work:~$ cd /tmp
(test)alko@work:/tmp$ cat test.txt
&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; deque().__init__ # doctest: +ELLIPSIS
&lt;method-wrapper '__init__' of collections.deque object at 0x...&gt;
(test)alko@work:/tmp$ python -m doctest test.txt
(test)alko@work:/tmp$
</snippet></ROW><ROW><id>19980851</id><snippet>0xa37adec&gt;\r\n</snippet></ROW><ROW><id>19980851</id><snippet>0x...&gt;\n</snippet></ROW><ROW><id>19980851</id><snippet>...</snippet></ROW><ROW><id>19980851</id><snippet>a37adec</snippet></ROW><ROW><id>19980851</id><snippet>&gt;</snippet></ROW><ROW><id>19980851</id><snippet>fromdos</snippet></ROW><ROW><id>19980851</id><snippet>git</snippet></ROW><ROW><id>19980871</id><snippet>-1</snippet></ROW><ROW><id>19980871</id><snippet>countryList[-1]</snippet></ROW><ROW><id>19981083</id><snippet>global</snippet></ROW><ROW><id>19981083</id><snippet>from tkinter import Tk, Label, Entry, Button, StringVar, IntVar

window = Tk()

name_array = [('a1','a2','a3'), ('b1','b2','b3'), ('c1','c2','c3'),('d1','d2','d3')]
position_track = IntVar()

first_name = StringVar()
last_name = StringVar()
email = StringVar()

def return_value(pos):
    first_name.set(name_array[pos][0])
    last_name.set(name_array[pos][1])
    email.set(name_array[pos][2])

def update_value(pos):
    name_array[pos] = (first_name.get(), last_name.get(), email.get())

def first_value():
    global position_track
    return_value(0)
    position_track.set(0)

def last_value():
    global position_track
    return_value(-1)
    position_track.set(-1)

def next_value():
    global position_track
    if position_track.get() == len(name_array):
        position_track.set(1)
    temp = position_track.get()
    return_value(temp + 1)
    position_track.set(temp + 1)

def prev_value():
    global position_track
    if position_track.get() == -1:
        position_track.set(len(name_array) - 1)
    temp = position_track.get()
    return_value(temp - 1)
    position_track.set(temp - 1)

label_first_name = Label(window, text = 'First Name:', justify = 'right', padx = 5)
entry_first_name = Entry(window, textvariable = first_name)
label_last_name = Label(window, text = 'Last Name:', justify = 'right', padx = 5)
entry_last_name = Entry(window, textvariable = last_name)
label_email = Label(window, text = 'Email Address:', justify = 'right', padx = 5)
entry_email = Entry(window, textvariable = email)


button_first = Button(window, text = 'First', command = first_value)
button_last = Button(window, text = 'Last', command = last_value)
button_prev = Button(window, text = 'Prev', command = prev_value)
button_next = Button(window, text = 'Next', command = next_value)
button_quit = Button(window, text = 'Quit')
button_quit.configure(command=window.destroy)

labels = [label_first_name, label_last_name, label_email]
entries = [entry_first_name, entry_last_name, entry_email]
buttons = [button_first, button_last, button_prev, button_next, button_last, button_quit]


for i in range(3):
    labels[i].grid(row = i, column = 0, sticky = 'W')
    entries[i].grid(row = i, column = 1, columnspan = 6)

for j in range(6):
    buttons[j].grid(row = 3, column = j, sticky = 'E')

window.mainloop()
</snippet></ROW><ROW><id>19981507</id><snippet>def file_gen(f_name):
    f = open(f_name)
    line = f.readline()
    yield line
</snippet></ROW><ROW><id>19981507</id><snippet>line = f.readline()</snippet></ROW><ROW><id>19981507</id><snippet>def g(x):
    li=range(x)
    yield li.pop()

print list(g(10))
# [9]
</snippet></ROW><ROW><id>19981507</id><snippet>def g(x):
    li=range(x)
    while li:
       yield li.pop()

print list(g(10))
# [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</snippet></ROW><ROW><id>19981507</id><snippet>yield</snippet></ROW><ROW><id>19981507</id><snippet>def file_gen(f_name):
    f = open(f_name)
    while True:
        line = f.readline()
        if not line:
            break
        yield line
</snippet></ROW><ROW><id>19981507</id><snippet>for line in f: yield line</snippet></ROW><ROW><id>19981507</id><snippet>def file_gen(f_name):
    with open(f_name) as f:
        for line in f:
            yield line
</snippet></ROW><ROW><id>19981514</id><snippet>def search(request):

    from sets import Set

    var=""

    # create set object
    set = Set()

    if request.method=='POST':

        s1=request.POST.get("input1")
        s1=s1.split(",")

        for i in s1:

            if i :
                # |= is the set union operator                       
                set |= Set(form2.objects.filter(keyskills=i))

        # convert set back to list
        var=list(set)

    return render(request,"searchresult.html",{'var1':var})
</snippet></ROW><ROW><id>19981540</id><snippet>&lt;script src=""{{ url_for('static', filename='js/chartkick.js') }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19981540</id><snippet>&lt;script src="{{ url_for('static', filename='chartkick.js') }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19981560</id><snippet>return restful.request.form, 201, {'Access-Control-Allow-Origin': '*'} 
</snippet></ROW><ROW><id>19981560</id><snippet>def options (self):
    return {'Allow' : 'PUT' }, 200, \
    { 'Access-Control-Allow-Origin': '*', \
      'Access-Control-Allow-Methods' : 'PUT,GET' }
</snippet></ROW><ROW><id>19981720</id><snippet>/</snippet></ROW><ROW><id>19981720</id><snippet>//</snippet></ROW><ROW><id>19981720</id><snippet>color = int(complexity * 255 / iterationCap) # gives an integer number from 0 to 255
r = color &gt;&gt; 16
g = color &gt;&gt; 8
b = color
</snippet></ROW><ROW><id>19981865</id><snippet>inspect</snippet></ROW><ROW><id>19981865</id><snippet>__init__</snippet></ROW><ROW><id>19981865</id><snippet>self.__class__</snippet></ROW><ROW><id>19981940</id><snippet> writersCanShare
</snippet></ROW><ROW><id>19981984</id><snippet>readLine()</snippet></ROW><ROW><id>19981984</id><snippet>Reader</snippet></ROW><ROW><id>19981984</id><snippet>BufferedInputStream</snippet></ROW><ROW><id>19981984</id><snippet>sys.stdout.write(data)
sys.stdout.flush()
</snippet></ROW><ROW><id>19981990</id><snippet>args = ['blah']
</snippet></ROW><ROW><id>19981990</id><snippet>foo = 'bar'
def func():
    print foo    #This is not going to print 'bar'
    foo = 'spam'  #Assignment here, so the previous line is going to raise an error.
    print foo
func()    
</snippet></ROW><ROW><id>19981990</id><snippet>  File "/home/monty/py/so.py", line 6, in &lt;module&gt;
    func()
  File "/home/monty/py/so.py", line 3, in func
    print foo
UnboundLocalError: local variable 'foo' referenced before assignment
</snippet></ROW><ROW><id>19981990</id><snippet>foo</snippet></ROW><ROW><id>19981990</id><snippet>foo = []
def func():
    print foo
    foo.append(1)
    print foo
func()  
</snippet></ROW><ROW><id>19981990</id><snippet>[]
[1]
</snippet></ROW><ROW><id>19982105</id><snippet>io.BytesIO</snippet></ROW><ROW><id>19982155</id><snippet>\r</snippet></ROW><ROW><id>19982155</id><snippet>n</snippet></ROW><ROW><id>19982155</id><snippet>import re
regx = re.compile('(?!\Z)'
                  '[. \n\r]*'
                  '('
                    '(?:[^."]*"[^"]*")+'
                    '[^."]*'
                    '(?:\.|\Z)'
                  ')')

s = ('''\nThe "some.rutu"  and "oula oulah, poto."  are '''
     '''all good. A "bi'didi."  is not.  I '''
     """don't know why... 5 "million" people """
     """died . \nAnd here's a sentence without """
     """a quote. "Halt!" he shouted. 'Sunny """
     """days and "nights"'  is a strange phrase""")
print s
print
for el in regx.findall(s):
    print '- %s' % el
</snippet></ROW><ROW><id>19982155</id><snippet>The "some.rutu"  and "oula oulah, poto."  are all good. A "bi'didi."  is not.  I don't know why... 5 "million" people died . 
And here's a sentence without a quote. "Halt!" he shouted. 'Sunny days and "nights"'  is a strange phrase

- The "some.rutu"  and "oula oulah, poto."  are all good.
- A "bi'didi."  is not.
- 5 "million" people died .
- "Halt!" he shouted.
- 'Sunny days and "nights"'  is a strange phrase
</snippet></ROW><ROW><id>19982203</id><snippet>Content-Disposition</snippet></ROW><ROW><id>19982203</id><snippet>attachment; filename=...</snippet></ROW><ROW><id>19982203</id><snippet>str</snippet></ROW><ROW><id>19982203</id><snippet>Content-Disposition</snippet></ROW><ROW><id>19982203</id><snippet>filename</snippet></ROW><ROW><id>19982203</id><snippet>download='...'</snippet></ROW><ROW><id>19982203</id><snippet>download</snippet></ROW><ROW><id>19982203</id><snippet>Content-Disposition</snippet></ROW><ROW><id>19982203</id><snippet>Content-Disposition: attachment</snippet></ROW><ROW><id>19982203</id><snippet>Content-Type</snippet></ROW><ROW><id>19982428</id><snippet>range(a, b)</snippet></ROW><ROW><id>19982428</id><snippet>a</snippet></ROW><ROW><id>19982428</id><snippet>b-1</snippet></ROW><ROW><id>19982428</id><snippet>n=5;count=2;i=3;j=2;
while (count &lt;= n):
    for j in range (2,i):
        if(i%j == 0):           
            break
    if(j==i-1):
        print i
        count = count +1
    i = i+1
</snippet></ROW><ROW><id>19982428</id><snippet> int j;
 for(j = 2; j &lt; i; j++) {
 }
</snippet></ROW><ROW><id>19982428</id><snippet>j</snippet></ROW><ROW><id>19982428</id><snippet>i</snippet></ROW><ROW><id>19982428</id><snippet>range</snippet></ROW><ROW><id>19982522</id><snippet>for previous, current in zip(mylist[:-1], mylist[1:]):
    if current[1] == 3:
        print previous[2] - current[2]
        print previous[3] - current[3]
</snippet></ROW><ROW><id>19982522</id><snippet>&gt;&gt;&gt; z = [10, 20, 30, 40, 50]
&gt;&gt;&gt; z[:-1]
[10, 20, 30, 40]
&gt;&gt;&gt; z[1:]
[20, 30, 40, 50]
&gt;&gt;&gt; zip(z[:-1], z[1:])
[(10, 20), (20, 30), (30, 40), (40, 50)]
</snippet></ROW><ROW><id>19982590</id><snippet>subprocess.call(['sed', '-e', 's/\"absolute\/path\/to\/your\/lib\/\"\/var\/www\/twiki\/lib\/', '\/var\/www\/twiki\/lib\/LocalLib.cfg'])
</snippet></ROW><ROW><id>19982590</id><snippet>/</snippet></ROW><ROW><id>19982590</id><snippet>s</snippet></ROW><ROW><id>19982590</id><snippet>/</snippet></ROW><ROW><id>19982590</id><snippet>#</snippet></ROW><ROW><id>19982590</id><snippet>subprocess.call(['sed', '-e', 's#"absolute/path/to/your/lib/"/var/www/twiki/lib/', '/var/www/twiki/lib/LocalLib.cfg'])
</snippet></ROW><ROW><id>19982590</id><snippet>#</snippet></ROW><ROW><id>19982590</id><snippet>/</snippet></ROW><ROW><id>19982590</id><snippet>'s#"absolute/path/to/your/lib/"#/var/www/twiki/lib/#'
</snippet></ROW><ROW><id>19982590</id><snippet>/</snippet></ROW><ROW><id>19982590</id><snippet>'s/"absolute\/path\/to\/your\/lib\/"/\/var\/www\/twiki\/lib\//'
                                  ^                          ^
</snippet></ROW><ROW><id>19982590</id><snippet>/</snippet></ROW><ROW><id>19982590</id><snippet>^</snippet></ROW><ROW><id>19982590</id><snippet>"</snippet></ROW><ROW><id>19982756</id><snippet>df.set_index(['fileName','phrase'],inplace=True)
df.sortlevel(inplace=True)
</snippet></ROW><ROW><id>19982756</id><snippet>df.ix[('somePath','somePhrase')]
</snippet></ROW><ROW><id>19982756</id><snippet>In [1]: arrays = [np.array(['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'])
   ...:    .....: ,
   ...:    .....:           np.array(['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two'])
   ...:    .....:           ]

In [2]: df = DataFrame(randn(8, 4), index=arrays)

In [3]: df
Out[3]: 
                0         1         2         3
bar one  1.654436  0.184326 -2.337694  0.625120
    two  0.308995  1.219156 -0.906315  1.555925
baz one -0.180826 -1.951569  1.617950 -1.401658
    two  0.399151 -1.305852  1.530370 -0.132802
foo one  1.097562  0.097126  0.387418  0.106769
    two  0.465681  0.270120 -0.387639 -0.142705
qux one -0.656487 -0.154881  0.495044 -1.380583
    two  0.274045 -0.070566  1.274355  1.172247

In [4]: df.index.lexsort_depth
Out[4]: 2

In [5]: df.ix[('foo','one')]
Out[5]: 
0    1.097562
1    0.097126
2    0.387418
3    0.106769
Name: (foo, one), dtype: float64

In [6]: df.ix['foo']
Out[6]: 
            0         1         2         3
one  1.097562  0.097126  0.387418  0.106769
two  0.465681  0.270120 -0.387639 -0.142705

In [7]: df.ix[['foo']]
Out[7]: 
                0         1         2         3
foo one  1.097562  0.097126  0.387418  0.106769
    two  0.465681  0.270120 -0.387639 -0.142705

In [8]: df.sortlevel(level=1)
Out[8]: 
                0         1         2         3
bar one  1.654436  0.184326 -2.337694  0.625120
baz one -0.180826 -1.951569  1.617950 -1.401658
foo one  1.097562  0.097126  0.387418  0.106769
qux one -0.656487 -0.154881  0.495044 -1.380583
bar two  0.308995  1.219156 -0.906315  1.555925
baz two  0.399151 -1.305852  1.530370 -0.132802
foo two  0.465681  0.270120 -0.387639 -0.142705
qux two  0.274045 -0.070566  1.274355  1.172247

In [10]: df.sortlevel(level=1).index.lexsort_depth
Out[10]: 0
</snippet></ROW><ROW><id>19982820</id><snippet>from pandas import merge, DataFrame
df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3,5], 'C': range(4)})
filter_list = [(6,2),(3,3)]
filter_df = DataFrame(filter_list, columns=['A','B'])
filtr = merge(df, filter_df, on=["A","B"], how="inner")
</snippet></ROW><ROW><id>19982925</id><snippet>def scrape(url, foo):
    import importlib
    modulename = importlib.import_module(url["modulename"])
    modulename.modulename(url, foo)
</snippet></ROW><ROW><id>19983121</id><snippet>virtualenv</snippet></ROW><ROW><id>19983325</id><snippet>code = root.xpath('//gmd_identifier/gmd_RS_Identifier/gmd_code/gco_CharacterString')
</snippet></ROW><ROW><id>19983325</id><snippet>if code:
    # Replaces &lt;gco_CharacterString&gt; text
    code[0].text = '{0328cb65-b564-495a-b17e-e49e04864ab7}'
    # Save back to the XML file
    etree.ElementTree(root).write('D:\test.xml', pretty_print=True)
</snippet></ROW><ROW><id>19983355</id><snippet>path</snippet></ROW><ROW><id>19983355</id><snippet>import os
from itertools import combinations

path = r'path/to/dir'
entries = os.listdir(path)
filenames = [os.path.join(path, entry) for entry in entries if os.path.isfile(os.path.join(path, entry))]

for (file1, file2) in combinations(filenames, 2):
    with open(file1) as f1, open(file2) as f2:
        # Compare the files
</snippet></ROW><ROW><id>19983355</id><snippet>import os
from itertools import combinations

path = r'path/to/dir'
root, _, rel_filenames = next(os.walk(path))
full_filenames = [os.path.join(root, f) for f in rel_filenames]

for (file1, file2) in combinations(full_filenames, 2):
    with open(file1) as f1, open(file2) as f2:
        # Compare the files
</snippet></ROW><ROW><id>19983366</id><snippet>from bs4 import BeautifulSoup

html = """
&lt;div class="rc" data-hveid="53"&gt;
&lt;h3 class="r"&gt;
&lt;a href="https://billing.anapp.com/" onmousedown="return rwt(this,'','','','2','AFQjCNGqpb38ftdxRdYvKwOsUv5EOJAlpQ','m3fly0i1VLOK9NJkV55hAQ','0CDYQFjAB','','',event)"&gt;Billing: Portal Home&lt;/a&gt;
&lt;/h3&gt;
"""

bs = BeautifulSoup(html)
elms = bs.select("h3.r a")
for i in elms:
    print(i.attrs["href"])
</snippet></ROW><ROW><id>19983366</id><snippet>https://billing.anapp.com/
</snippet></ROW><ROW><id>19983366</id><snippet>h3.r a</snippet></ROW><ROW><id>19983366</id><snippet>h3.r a</snippet></ROW><ROW><id>19983366</id><snippet>h3</snippet></ROW><ROW><id>19983366</id><snippet>r</snippet></ROW><ROW><id>19983366</id><snippet>a</snippet></ROW><ROW><id>19983366</id><snippet>#an_id table tr.the_tr_class td.the_td_class</snippet></ROW><ROW><id>19983366</id><snippet>find_all</snippet></ROW><ROW><id>19983366</id><snippet>bs4.element.Tag</snippet></ROW><ROW><id>19983366</id><snippet>find_all</snippet></ROW><ROW><id>19983366</id><snippet>for elm in  bs.find_all('h3',attrs={'class': 'r'}):
    for a_elm in elm.find_all("a"):
        print(a_elm.attrs["href"])
</snippet></ROW><ROW><id>19983376</id><snippet>setattr(self, key, lambda x:val(x,self.p))
</snippet></ROW><ROW><id>19983376</id><snippet>val</snippet></ROW><ROW><id>19983376</id><snippet>lambda</snippet></ROW><ROW><id>19983376</id><snippet>lambda</snippet></ROW><ROW><id>19983376</id><snippet>for key,val in functions[dist_type].items():
    if key == 'parameters':
        pass
    else:
        setattr(self, key, lambda x,val=val: val(x,self.p))
</snippet></ROW><ROW><id>19983376</id><snippet>exp_dist = make_distribution('exp')
d = exp_dist(l=3.5)
d.pdf(4.0)
</snippet></ROW><ROW><id>19983376</id><snippet>functions</snippet></ROW><ROW><id>19983376</id><snippet>pdf</snippet></ROW><ROW><id>19983376</id><snippet>cdf</snippet></ROW><ROW><id>19983376</id><snippet>pdf</snippet></ROW><ROW><id>19983376</id><snippet>cdf</snippet></ROW><ROW><id>19983491</id><snippet>import csv
w = csv.writer(open("some_file.txt","w"))
w.writerows(zip(*list_of_cols))
</snippet></ROW><ROW><id>19983491</id><snippet> a = [[1,2,3],[4,5,6],[7,8,9]]
 #transpose a with zip
 print zip(*a)  #prints [(1,4,7),(2,5,8),(3,6,9)]
</snippet></ROW><ROW><id>19983555</id><snippet>import multiprocessing
import threading
import time

def good_worker():   
    print "[GoodWorker] Starting"
    time.sleep(4)
    print "[GoodWorker] all good"

def bad_worker():
    print "[BadWorker] Starting"
    time.sleep(2)
    raise Exception("ups!")

class MyProcManager(object):
    def __init__(self):
        self.procs = []
        self.errors_flag = False
        self._threads = []
        self._lock = threading.Lock()

    def terminate_all(self):
        with self._lock:
            for p in self.procs:
                if p.is_alive():
                    print "Terminating %s" % p
                    p.terminate()

    def launch_proc(self, func, args=(), kwargs= {}):
        t = threading.Thread(target=self._proc_thread_runner,
                             args=(func, args, kwargs))
        self._threads.append(t)
        t.start()

    def _proc_thread_runner(self, func, args, kwargs):
        p = multiprocessing.Process(target=func, args=args, kwargs=kwargs)
        self.procs.append(p)
        p.start()
        while p.exitcode is None:
            p.join()
        if p.exitcode &gt; 0:
            self.errors_flag = True
            self.terminate_all()

    def wait(self):
        for t in self._threads:
            t.join()

if __name__ == '__main__':
    proc_manager = MyProcManager()
    proc_manager.launch_proc(good_worker) 
    proc_manager.launch_proc(good_worker) 
    proc_manager.launch_proc(bad_worker) 
    proc_manager.wait()
    if proc_manager.errors_flag:
        print "Errors flag is set: some process crashed"
    else:
        print "Everything closed cleanly"
</snippet></ROW><ROW><id>19984047</id><snippet>Flask-wtf</snippet></ROW><ROW><id>19984047</id><snippet>peewee</snippet></ROW><ROW><id>19984047</id><snippet>wftpeewee</snippet></ROW><ROW><id>19984047</id><snippet>gettext</snippet></ROW><ROW><id>19984047</id><snippet>wtforms</snippet></ROW><ROW><id>19984047</id><snippet>flask-peewee</snippet></ROW><ROW><id>19984073</id><snippet>get_image</snippet></ROW><ROW><id>19984073</id><snippet>Surface</snippet></ROW><ROW><id>19984073</id><snippet>pygame.surfarray.array2d</snippet></ROW><ROW><id>19984073</id><snippet>surfarray</snippet></ROW><ROW><id>19984073</id><snippet>    img = webcam.get_image()
    data = pygame.surfarray.array2d(img)
</snippet></ROW><ROW><id>19984346</id><snippet>context = decimal.Context(prec=1000)
decimal.setcontext(context)
</snippet></ROW><ROW><id>19984346</id><snippet>&gt;&gt;&gt; decimal.setcontext(decimal.Context(prec=1000))
&gt;&gt;&gt; pi = decimal.Decimal('3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113')
&gt;&gt;&gt; pi
Decimal('3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113')
&gt;&gt;&gt; pi + 2
Decimal('5.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113')
</snippet></ROW><ROW><id>19984346</id><snippet>Decimal</snippet></ROW><ROW><id>19984346</id><snippet>float</snippet></ROW><ROW><id>19984346</id><snippet>decimal</snippet></ROW><ROW><id>19984346</id><snippet>float</snippet></ROW><ROW><id>19984346</id><snippet>Decimal.from_float</snippet></ROW><ROW><id>19984346</id><snippet>localcontext</snippet></ROW><ROW><id>19984346</id><snippet>context = decimal.Context(prec=1000)

with decimal.localcontext(context):
    # here decimal uses 1000 digits for computations
    pass

# here the default context is restored.
</snippet></ROW><ROW><id>19984496</id><snippet>age = [3,14,55]  
sum_age = 0
count = 1
count2 = 0
g = 0  

while g &lt; len(age):
    sum_age += age[g]
    g += 1 
average = sum_age / len(age) #the average calc. 
print "The average is:", average  

g = 0
while g &lt; len(age):
    if age[g] &gt; average:
        count = count + 1  
    g += 1 
print "The number above the average is:", count
</snippet></ROW><ROW><id>19984538</id><snippet>eachbox</snippet></ROW><ROW><id>19984538</id><snippet>members_box1</snippet></ROW><ROW><id>19984538</id><snippet>members_box2</snippet></ROW><ROW><id>19984538</id><snippet>eachbox</snippet></ROW><ROW><id>19984538</id><snippet>box1s = soup.find_all('div', class_='members_box1')
box2s = soup.find_all('div', class_='members_box2')
for box1, box2 in zip(box1s, box2s):
    data =  [re.sub('\s+', '', text).strip().encode('utf8') for text in box1.find_all(text=True) + box2.find_all(text=True) if text.strip()]
    print(','.join(data))
</snippet></ROW><ROW><id>19984587</id><snippet>collections.Counter</snippet></ROW><ROW><id>19984587</id><snippet>d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22}
import collections
print collections.Counter(d.values()).most_common()[-1][0]
22
</snippet></ROW><ROW><id>19984704</id><snippet>np.random.randint</snippet></ROW><ROW><id>19984704</id><snippet>np.random.uniform</snippet></ROW><ROW><id>19984704</id><snippet>np.random</snippet></ROW><ROW><id>19984704</id><snippet>size</snippet></ROW><ROW><id>19984704</id><snippet>numpy</snippet></ROW><ROW><id>19984704</id><snippet>&gt;&gt;&gt; SPN = np.random.randint(0, 100, (3, 6, 5))
&gt;&gt;&gt; SPN
array([[[45, 95, 56, 78, 90],
        [87, 68, 24, 62, 12],
        [11, 26, 75, 57, 12],
        [95, 87, 47, 69, 90],
        [58, 24, 49, 62, 85],
        [38,  5, 57, 63, 16]],

       [[61, 67, 73, 23, 34],
        [41,  3, 69, 79, 48],
        [22, 40, 22, 18, 41],
        [86, 23, 58, 38, 69],
        [98, 60, 70, 71,  3],
        [44,  8, 33, 86, 66]],

       [[62, 45, 56, 80, 22],
        [27, 95, 55, 87, 22],
        [42, 17, 48, 96, 65],
        [36, 64,  1, 85, 31],
        [10, 13, 15,  7, 92],
        [27, 74, 31, 91, 60]]])
&gt;&gt;&gt; SPN.shape
(3, 6, 5)
&gt;&gt;&gt; SPN[0].shape
(6, 5)
</snippet></ROW><ROW><id>19984704</id><snippet>np.random.uniform(0, 100, (samples, 6, 5))</snippet></ROW><ROW><id>19984704</id><snippet>np.random.uniform</snippet></ROW><ROW><id>19984910</id><snippet>import pygame
from pygame import *

import sys
import math
import random
import cmath

#----------------------------------------------------------------------

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED   = (255, 0, 0)
BLUE  = (0, 0, 255)

#imagers
IMAGE_GRASS       = "grass_shit.png" #grass image
IMAGE_PLAYER      = "shithead.png"   #player name
IMAGE_ALI         = "shit_head2.png" #alien image
IMAGE_DEAD_SCREEN = "dead_shit.png"
IMAGE_CROSSHAIR   = "crosshair.png"
IMAGE_PLAYBUTTON  = "playbutton.png"
#~ IMAGE_GRASS       = "ball3.png" #grass image
#~ IMAGE_PLAYER      = "ball2.png" #player name
#~ IMAGE_ALI         = "ball3.png" #alien image
#~ IMAGE_DEAD_SCREEN = "ball3.png"
#~ IMAGE_CROSSHAIR   = "ball1.png"
#~ IMAGE_PLAYBUTTON  = "ball3.png"

#----------------------------------------------------------------------

class Block(pygame.sprite.Sprite):

    def __init__(self, color, x, y, player = None):

        pygame.sprite.Sprite.__init__(self)

        self.player = player

        self.image = pygame.Surface([20, 15])
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        self.move_x = self.move_y = 0

    def update(self):

        if self.player:
            player_x, player_y = self.player.rect.center

            if self.rect.x &lt; player_x:
                self.rect.x += 1
            elif self.rect.x &gt; player_x:
                self.rect.x -= 1

            if self.rect.y &lt; player_y:
                self.rect.y += 1
            elif self.rect.y &gt; player_y:
                self.rect.y -= 1

#----------------------------------------------------------------------

class Player(pygame.sprite.Sprite):

    def __init__(self, screen_rect, x=0, y=0):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([20,20])
        self.image.fill(RED)

        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        self.min_x = screen_rect.left
        self.min_y = screen_rect.top
        self.max_x = screen_rect.right
        self.max_y = screen_rect.bottom

        self.move_x = self.move_y = 0

        self.health = 100

    def update(self):

        pos = pygame.mouse.get_pos()

        self.rect.x += self.move_x
        self.rect.y += self.move_y

        if self.rect.top &lt; self.min_x:
            self.rect.top = self.min_x
        elif self.rect.bottom &gt; self.max_y:
            self.rect.bottom = self.max_y

        if self.rect.left &lt; self.min_x:
            self.rect.left = self.min_x
        elif self.rect.right &gt; self.max_x:
            self.rect.right = self.max_x

    def event_handler(self, event):

        if event.type == pygame.KEYDOWN:    
            if event.key == pygame.K_a:
                self.move_x = -4
            elif event.key == pygame.K_d:
                self.move_x = +4
            elif event.key == pygame.K_w:
                self.move_y = -4
            elif event.key == pygame.K_s:
                self.move_y = +4

        if event.type == pygame.KEYUP:
            if event.key in (pygame.K_a, pygame.K_d):
                self.move_x = 0
            elif event.key in (pygame.K_w, pygame.K_s):
                self.move_y = 0

#----------------------------------------------------------------------

class Bullet(pygame.sprite.Sprite):

    def __init__(self, start_pos, mouse_pos):

        pygame.sprite.Sprite.__init__(self)

        self.start_rect = start_pos.rect.copy()
        self.mouse_x, self.mouse_y = mouse_pos # mouse[0], mouse[1]

        self.image = pygame.Surface([5, 5])
        self.image.fill(BLACK)      
        self.rect = self.image.get_rect()
        self.rect.centerx = self.start_rect.centerx
        self.rect.centery = self.start_rect.centery

        self.speed = 10
        self.max_range = 50
        self.current_range = 0

        distance_x = self.mouse_x - self.start_rect.centerx
        distance_y = self.mouse_y - self.start_rect.centery

        norm = math.sqrt(distance_x ** 2 + distance_y ** 2)
        direction_x = distance_x / norm
        direction_y = distance_y / norm

        self.bullet_vector_x = direction_x * self.speed
        self.bullet_vector_y = direction_y * self.speed

    def update(self):

        self.current_range += 1

        if self.current_range &lt; self.max_range:
            print self.start_rect.centerx + (self.bullet_vector_x*self.current_range), 
            print self.rect.centerx + self.bullet_vector_x, 

            #self.rect.centerx += self.bullet_vector_x
            self.rect.centerx = self.start_rect.centerx + (self.bullet_vector_x*self.current_range) 

            print self.rect.centerx

            #self.rect.centery += self.bullet_vector_y
            self.rect.centery = self.start_rect.centery + (self.bullet_vector_y*self.current_range)

        else:
            self.kill()

#----------------------------------------------------------------------

class Crosshair(pygame.sprite.Sprite):

    def __init__(self):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load(IMAGE_CROSSHAIR).convert_alpha()
        self.rect = self.image.get_rect()

    def update(self):

        mouse_x, mouse_y = pygame.mouse.get_pos()

        self.rect.centerx = mouse_x
        self.rect.centery = mouse_y

    def draw(self, screen):
        screen.blit(self.image,self.rect.topleft)

#----------------------------------------------------------------------

class Background(pygame.sprite.Sprite):

    def __init__(self):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.image.load(IMAGE_GRASS).convert_alpha()
        self.rect = self.image.get_rect()

    def draw(self, screen):
        screen.fill((128,128,128))
        screen.blit(self.image,(0,0))

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        pygame.init()

        screen_width = 850
        screen_height = 640

        self.screen = pygame.display.set_mode( (screen_width,screen_height) )

        pygame.mouse.set_visible(False)

        #-----

        self.all_sprites_list = pygame.sprite.Group()
        self.block_list = pygame.sprite.Group()
        self.bullet_list = pygame.sprite.Group()

        # --- create sprites ---

        self.background = Background()

        self.player = Player(self.screen.get_rect(), 0, 370)
        self.all_sprites_list.add(self.player)

        for i in range(5):

            block = Block(BLUE, random.randrange(100, screen_width), random.randrange(10, screen_height-10), self.player)

            self.block_list.add(block)
            self.all_sprites_list.add(block)


        self.crosshair = Crosshair()

        #-----

        font = pygame.font.SysFont("", 72)
        self.text_pause = font.render("PAUSE", -1, RED)
        self.text_pause_rect = self.text_pause.get_rect(center=self.screen.get_rect().center) # center text

        #-----

        self.score = 0


    def bullet_create(self, start_pos, mouse_pos):
        bullet = Bullet(start_pos, mouse_pos)

        self.all_sprites_list.add(bullet)
        self.bullet_list.add(bullet)

    def bullets_update(self):

        for bullet in self.bullet_list:

            block_hit_list = pygame.sprite.spritecollide(bullet, self.block_list, True)

            for block in block_hit_list:
                self.bullet_list.remove(bullet)
                self.all_sprites_list.remove(bullet)
                self.score += 1
                print self.score

                if bullet.rect.y &lt; -10:
                    self.bullet_list.remove(bullet)
                    self.all_sprites_list.remove(bullet)

                if pygame.sprite.collide_rect(self.player, block):
                    self.player.health =- 35

    # -------- Main Program Loop -----------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        PAUSED  = False

        while RUNNING:

            # --- events ---

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        RUNNING = false
                    elif event.key == pygame.K_SPACE:
                        PAUSED = not PAUSED

                elif event.type == pygame.MOUSEBUTTONDOWN:
                    self.bullet_create(self.player, event.pos)

                # send event to player
                self.player.event_handler(event)

                # send event to crosshair for mousebuttondown
                #if not PAUSED:
                #   self.crosshair.event_handler(event)

            # --- updates ---

            if not PAUSED:
                self.all_sprites_list.update()
                self.bullets_update()

            self.crosshair.update()

            # --- draws ---

            self.background.draw(self.screen)

            self.all_sprites_list.draw(self.screen)

            self.crosshair.draw(self.screen)

            if PAUSED:
                self.screen.blit(self.text_pause, self.text_pause_rect.topleft)

            pygame.display.update() # use flip() OR update()

            # --- FPS ---

            clock.tick(20)

        # --- quit ---

        pygame.quit()

#----------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>19984910</id><snippet>space</snippet></ROW><ROW><id>19985051</id><snippet>append</snippet></ROW><ROW><id>19985051</id><snippet>all_changes.append([last_used_coin])   
# Add a list of one element to the `all_changes` list
</snippet></ROW><ROW><id>19985051</id><snippet>for</snippet></ROW><ROW><id>19985051</id><snippet>n - last_used_coin</snippet></ROW><ROW><id>19985051</id><snippet>find_changes(n - last_used_coin, coins)</snippet></ROW><ROW><id>19985051</id><snippet>find_changes</snippet></ROW><ROW><id>19985051</id><snippet>last_used_coin</snippet></ROW><ROW><id>19985051</id><snippet>all_changes</snippet></ROW><ROW><id>19985051</id><snippet>def find_changes(n, coins):
    if n &lt; 0:
        return []
    if n == 0:
         return [[]]
    all_changes = []

    for last_used_coin in coins:
        combos = find_changes(n - last_used_coin, coins)
        for combo in combos:
            combo.append(last_used_coin)
            all_changes.append(combo)

    return all_changes

print find_changes(4, [1,2,3])
</snippet></ROW><ROW><id>19985224</id><snippet>accounts = "('Hyvaco','TLC')"

sql ='SELECT * FROM archive.incoming WHERE LastCapacity=%s AND Account IN '+ accounts
</snippet></ROW><ROW><id>19985291</id><snippet>mySet = { 'abc', }
</snippet></ROW><ROW><id>19985324</id><snippet>ord()</snippet></ROW><ROW><id>19985324</id><snippet>chr()</snippet></ROW><ROW><id>19985324</id><snippet>If (OriginalChar + Key &gt; 126) then
    EncryptedChar = ((OriginalChar + Key) - 127) + 32
Else 
    EncryptedChar = (OriginalChar + Key)
</snippet></ROW><ROW><id>19985324</id><snippet>def encrypt(message, key):
    result = ""
    for char in message:
        if (ord(char) + key &gt; 126):
            result += chr(ord(char) + key - 127 + 32)
        else:
            result += chr(ord(char) + key)
    return result
</snippet></ROW><ROW><id>19985324</id><snippet>encrypt</snippet></ROW><ROW><id>19985324</id><snippet>def decrypt(message):
    for key in range(1, 101):
        result = ""
        for char in message:
            if (ord(char) - key &lt; 32):
                result += chr(ord(char) - key + 127 - 32)
            else:
                result += chr(ord(char) - key)
        print('key: {} -'.format(key), result)

if __name__ == '__main__':
    print('1 - Encrypt')
    print('2 - Decrypt')
    inp = input('select 1 or 2: ')
    if inp == '1':
        msg = input('Enter message: ')
        key = int(input('Enter key (1-100): '))
        print('Encrypted message:')
        print(encrypt(msg, key))
    else:
        msg = input('Enter message: ')
        decrypt(msg)
</snippet></ROW><ROW><id>19985550</id><snippet>class MapToolEmitPoint(QgsMapToolEmitPoint):
    canvasDoubleClicked = QtCore.pyqtSignal(object, object)

    def canvasDoubleClickEvent(self, event):
        point = self.toMapCoordinates(event.pos())            
        self.canvasDoubleClicked.emit(point, event.button())
        super(MapToolEmitPoint, self).canvasDoubleClickEvent(event)
</snippet></ROW><ROW><id>19985550</id><snippet>canvasDoubleClicked</snippet></ROW><ROW><id>19985550</id><snippet>canvasClicked</snippet></ROW><ROW><id>19985550</id><snippet>        maptool = MapToolEmitPoint(self.canvas)
        self.canvas.setMapTool(maptool)
        maptool.canvasDoubleClicked.connect(self.handleDoubleClick)
        ....

    def handleDoubleClick(self, point, buttons):
        # do stuff with point and buttons
        ...
</snippet></ROW><ROW><id>19985580</id><snippet>multiprocessing</snippet></ROW><ROW><id>19985580</id><snippet>dill</snippet></ROW><ROW><id>19985580</id><snippet>multiprocessing</snippet></ROW><ROW><id>19985580</id><snippet>pickle</snippet></ROW><ROW><id>19985580</id><snippet>cPickle</snippet></ROW><ROW><id>19985580</id><snippet>dill</snippet></ROW><ROW><id>19985580</id><snippet>multiprocessing</snippet></ROW><ROW><id>19985580</id><snippet>multiprocessing</snippet></ROW><ROW><id>19985580</id><snippet>  Python 2.7.5 (default, Sep 30 2013, 20:15:49) 
  [GCC 4.2.1 (Apple Inc. build 5566)] on darwin
  Type "help", "copyright", "credits" or "license" for more information.
  &gt;&gt;&gt; import dill
  &gt;&gt;&gt; from pathos.multiprocessing import ProcessingPool    
  &gt;&gt;&gt; pool = ProcessingPool(nodes=4)
  &gt;&gt;&gt; result = pool.map(lambda x: x**2, range(10))
  &gt;&gt;&gt; result
  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>19985580</id><snippet>pathos.multiprocessing</snippet></ROW><ROW><id>19985580</id><snippet>&gt;&gt;&gt; def busy_add(x,y, delay=0.01):
...     for n in range(x):
...        x += n
...     for n in range(y):
...        y -= n
...     import time
...     time.sleep(delay)
...     return x + y
... 
&gt;&gt;&gt; def busy_squared(x):
...     import time, random
...     time.sleep(2*random.random())
...     return x*x
... 
&gt;&gt;&gt; def squared(x):
...     return x*x
... 
&gt;&gt;&gt; def quad_factory(a=1, b=1, c=0):
...     def quad(x):
...         return a*x**2 + b*x + c
...     return quad
... 
&gt;&gt;&gt; square_plus_one = quad_factory(2,0,1)
&gt;&gt;&gt; 
&gt;&gt;&gt; def test1(pool):
...     print pool
...     print "x: %s\n" % str(x)
...     print pool.map.__name__
...     start = time.time()
...     res = pool.map(squared, x)
...     print "time to results:", time.time() - start
...     print "y: %s\n" % str(res)
...     print pool.imap.__name__
...     start = time.time()
...     res = pool.imap(squared, x)
...     print "time to queue:", time.time() - start
...     start = time.time()
...     res = list(res)
...     print "time to results:", time.time() - start
...     print "y: %s\n" % str(res)
...     print pool.amap.__name__
...     start = time.time()
...     res = pool.amap(squared, x)
...     print "time to queue:", time.time() - start
...     start = time.time()
...     res = res.get()
...     print "time to results:", time.time() - start
...     print "y: %s\n" % str(res)
... 
&gt;&gt;&gt; def test2(pool, items=4, delay=0):
...     _x = range(-items/2,items/2,2)
...     _y = range(len(_x))
...     _d = [delay]*len(_x)
...     print map
...     res1 = map(busy_squared, _x)
...     res2 = map(busy_add, _x, _y, _d)
...     print pool.map
...     _res1 = pool.map(busy_squared, _x)
...     _res2 = pool.map(busy_add, _x, _y, _d)
...     assert _res1 == res1
...     assert _res2 == res2
...     print pool.imap
...     _res1 = pool.imap(busy_squared, _x)
...     _res2 = pool.imap(busy_add, _x, _y, _d)
...     assert list(_res1) == res1
...     assert list(_res2) == res2
...     print pool.amap
...     _res1 = pool.amap(busy_squared, _x)
...     _res2 = pool.amap(busy_add, _x, _y, _d)
...     assert _res1.get() == res1
...     assert _res2.get() == res2
...     print ""
... 
&gt;&gt;&gt; def test3(pool): # test against a function that should fail in pickle
...     print pool
...     print "x: %s\n" % str(x)
...     print pool.map.__name__
...     start = time.time()
...     res = pool.map(square_plus_one, x)
...     print "time to results:", time.time() - start
...     print "y: %s\n" % str(res)
... 
&gt;&gt;&gt; def test4(pool, maxtries, delay):
...     print pool
...     m = pool.amap(busy_add, x, x)
...     tries = 0
...     while not m.ready():
...         time.sleep(delay)
...         tries += 1
...         print "TRY: %s" % tries
...         if tries &gt;= maxtries:
...             print "TIMEOUT"
...             break
...     print m.get()
... 
&gt;&gt;&gt; import time
&gt;&gt;&gt; x = range(18)
&gt;&gt;&gt; delay = 0.01
&gt;&gt;&gt; items = 20
&gt;&gt;&gt; maxtries = 20
&gt;&gt;&gt; from pathos.multiprocessing import ProcessingPool as Pool
&gt;&gt;&gt; pool = Pool(nodes=4)
&gt;&gt;&gt; test1(pool)
&lt;pool ProcessingPool(ncpus=4)&gt;
x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]

map
time to results: 0.0553691387177
y: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]

imap
time to queue: 7.91549682617e-05
time to results: 0.102381229401
y: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]

amap
time to queue: 7.08103179932e-05
time to results: 0.0489699840546
y: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]

&gt;&gt;&gt; test2(pool, items, delay)
&lt;built-in function map&gt;
&lt;bound method ProcessingPool.map of &lt;pool ProcessingPool(ncpus=4)&gt;&gt;
&lt;bound method ProcessingPool.imap of &lt;pool ProcessingPool(ncpus=4)&gt;&gt;
&lt;bound method ProcessingPool.amap of &lt;pool ProcessingPool(ncpus=4)&gt;&gt;

&gt;&gt;&gt; test3(pool)
&lt;pool ProcessingPool(ncpus=4)&gt;
x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]

map
time to results: 0.0523059368134
y: [1, 3, 9, 19, 33, 51, 73, 99, 129, 163, 201, 243, 289, 339, 393, 451, 513, 579]

&gt;&gt;&gt; test4(pool, maxtries, delay)
&lt;pool ProcessingPool(ncpus=4)&gt;
TRY: 1
TRY: 2
TRY: 3
TRY: 4
TRY: 5
TRY: 6
TRY: 7
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]
</snippet></ROW><ROW><id>19985775</id><snippet>/static/</snippet></ROW><ROW><id>19985775</id><snippet>Alias /static</snippet></ROW><ROW><id>19985775</id><snippet>WSGIScriptAlias /</snippet></ROW><ROW><id>19985775</id><snippet>from django.conf import settings
from django.conf.urls.static import static

urlpatterns = patterns(…)

if settings.DEBUG:
    urlpatterns = static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) + urlpatterns
</snippet></ROW><ROW><id>19985778</id><snippet>self.popSize</snippet></ROW><ROW><id>19985778</id><snippet>SimpleString.popSize</snippet></ROW><ROW><id>19985778</id><snippet>self</snippet></ROW><ROW><id>19985778</id><snippet>SimpleString</snippet></ROW><ROW><id>19985778</id><snippet>self</snippet></ROW><ROW><id>19985778</id><snippet>SimpleString</snippet></ROW><ROW><id>19985778</id><snippet>popSize</snippet></ROW><ROW><id>19985778</id><snippet>SimpleString</snippet></ROW><ROW><id>19985778</id><snippet>popSize</snippet></ROW><ROW><id>19985778</id><snippet>1000</snippet></ROW><ROW><id>19985778</id><snippet>SimpleString.popSize</snippet></ROW><ROW><id>19985778</id><snippet>import numpy

class SimpleString():    
    popSize = 1000 
    displaySize = 5
    alphatbet = "abcdefghijklmnopqrstuvwxyz "

    def __init__(self):
        pop = numpy.empty(self.popSize, object)
        target = getTarget()
        targetSize = len(target)
</snippet></ROW><ROW><id>19985779</id><snippet>class xyz(object):
    def __init__(self, a, b, c, d, e):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e

&gt;&gt;&gt; my_var = xyz(0x64, 0x32, 0x16, True, 'a')
&gt;&gt;&gt; print my_var.a
100
</snippet></ROW><ROW><id>19985779</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; xyz = namedtuple('xyz', ['a', 'b', 'c', 'd', 'e'])  # Creates an 'xyz' class
&gt;&gt;&gt; my_var = xyz(0x64, 0x32, 0x16, True, 'a')  # Creates an instance of that class
&gt;&gt;&gt; print my_var.a
100
</snippet></ROW><ROW><id>19985779</id><snippet>&gt;&gt;&gt; vars = [0x64, 0x32, 0x16, True, 'a']
&gt;&gt;&gt; my_var = xyz(*vars)
&gt;&gt;&gt; print my_var.a
100
</snippet></ROW><ROW><id>19985940</id><snippet>.readlines()</snippet></ROW><ROW><id>19985940</id><snippet>print("File contains: "+str(file.readlines()))
</snippet></ROW><ROW><id>19985940</id><snippet>CheckForPlayers=file.read()
</snippet></ROW><ROW><id>19985940</id><snippet>file.seek(0)  # rewind to start
</snippet></ROW><ROW><id>19985940</id><snippet>pickle</snippet></ROW><ROW><id>19985940</id><snippet>for line in file:
    ToAppend=pickle.load(file)
</snippet></ROW><ROW><id>19985940</id><snippet>pickle</snippet></ROW><ROW><id>19985940</id><snippet>with open("BuskingList.txt", "rb") as infile:
    ToAppend=pickle.load(file)
</snippet></ROW><ROW><id>19985940</id><snippet>## For some reason, pickle doesn't like me trying to dump a list with more than
## 5 values in it, any reason for that?
</snippet></ROW><ROW><id>19985940</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; with open('/tmp/test.pickle', 'wb') as testfile:
...     pickle.dump(range(1000), testfile)
... 
&gt;&gt;&gt; with open('/tmp/test.pickle', 'rb') as testfile:
...     print len(pickle.load(testfile))
... 
1000
</snippet></ROW><ROW><id>19985983</id><snippet>&gt;&gt;&gt; runFind(L)
[(4, 0), (2, 3), (2, 4)]
&gt;&gt;&gt; def runFind(L):
...   i = 1
...   start = 0
...   answer = []
...   while i &lt; len(L):
...     if L[i] != L[i-1]+1:
...       answer.append((i-start, start))
...       start = i
...     i += 1
...   answer.append((i-start, start))
...   
...   return answer
... 
&gt;&gt;&gt; L = [1,2,3,6,4]
&gt;&gt;&gt; runFind(L)
[(3, 0), (1, 3), (1, 4)]
&gt;&gt;&gt; L = [0, 0, 0, 4, 5, 6]
&gt;&gt;&gt; runFind(L)
[(1, 0), (1, 1), (1, 2), (3, 3)]
&gt;&gt;&gt; L = [4, 5, 5, 1, 8, 3, 1, 6, 2, 7]
&gt;&gt;&gt; runFind(L)
[(2, 0), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]
&gt;&gt;&gt; L = [1, 1, 1, 2, 3, 5, 1, 1]
&gt;&gt;&gt; runFind(L)
[(1, 0), (1, 1), (3, 2), (1, 5), (1, 6), (1, 7)]
&gt;&gt;&gt; L = [1, 1, 1, 1]
&gt;&gt;&gt; runFind(L)
[(1, 0), (1, 1), (1, 2), (1, 3)]
&gt;&gt;&gt; L = [1, 2, 5, 6, 7]
&gt;&gt;&gt; runFind(L)
[(2, 0), (3, 2)]
&gt;&gt;&gt; L = [1, 0, -1, -2, -1, 0, 0]
&gt;&gt;&gt; runFind(L)
[(1, 0), (1, 1), (1, 2), (3, 3), (1, 6)]
</snippet></ROW><ROW><id>19986102</id><snippet>ipython</snippet></ROW><ROW><id>19986102</id><snippet>type</snippet></ROW><ROW><id>19986102</id><snippet>$PATH</snippet></ROW><ROW><id>19986102</id><snippet>which</snippet></ROW><ROW><id>19986102</id><snippet>bash</snippet></ROW><ROW><id>19986102</id><snippet>hash</snippet></ROW><ROW><id>19986102</id><snippet>BASH_CMDS</snippet></ROW><ROW><id>19986102</id><snippet>ipython</snippet></ROW><ROW><id>19986102</id><snippet>type</snippet></ROW><ROW><id>19986102</id><snippet>hash -r</snippet></ROW><ROW><id>19986102</id><snippet>hash -d ipython</snippet></ROW><ROW><id>19986102</id><snippet>ipython</snippet></ROW><ROW><id>19986102</id><snippet>python</snippet></ROW><ROW><id>19986102</id><snippet>rehash</snippet></ROW><ROW><id>19986102</id><snippet>rehash ipython</snippet></ROW><ROW><id>19986102</id><snippet>bash(1)</snippet></ROW><ROW><id>19986102</id><snippet>ipython</snippet></ROW><ROW><id>19986102</id><snippet>ipython</snippet></ROW><ROW><id>19986102</id><snippet>$PATH</snippet></ROW><ROW><id>19986102</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19986102</id><snippet>sys.path</snippet></ROW><ROW><id>19986102</id><snippet>/Users/sam/.virtualenvs/myvirtualenv/lib/python2.7/site-packages/</snippet></ROW><ROW><id>19986102</id><snippet>sys.path</snippet></ROW><ROW><id>19986102</id><snippet>.</snippet></ROW><ROW><id>19986102</id><snippet>sys.path</snippet></ROW><ROW><id>19986188</id><snippet>LivingRoom.objects.create(user=instance)
</snippet></ROW><ROW><id>19986188</id><snippet>user</snippet></ROW><ROW><id>19986188</id><snippet>#signal function: if a user is created, add control livingroom to the user    
def create_control_livingroom(sender, instance, created, **kwargs):
    if created:
        my_room = LivingRoom()
        my_room.user = instance
</snippet></ROW><ROW><id>19986316</id><snippet>&lt;a href="/job/{{j.key.id()}}/edit}"&gt;
</snippet></ROW><ROW><id>19986316</id><snippet>job_to_edit = Job.get_by_id(job_id)  # or ndb.Key(Job, job_id).get()
job_to_edit.description = new_description
job_to_edit.put()
# Tada!
</snippet></ROW><ROW><id>19986337</id><snippet>$</snippet></ROW><ROW><id>19986412</id><snippet>    cmd = "SELECT COUNT(1) FROM roster WHERE player_fkid=" + str(fixed['player_fkid']) + " AND team_fkid=" + str(fixed['team_fkid']) + " AND season_fkid=" + str(fixed['season_fkid'])
    cursor.execute(cmd)
    if cursor.fetchone()[0]:
        udpate_sub_cmd = "UPDATE roster"
        date_start_sub_cmd = "SET date_start= IF(date_start &gt; '" + str(update['date_start']) + "', '" + str(update['date_start']) + "', values(date_start)),"
        date_end_sub_cmd = "date_end= IF(date_end &gt; '" + str(update['date_end']) + "', '" + str(update['date_end']) + "', values(date_end));"
        where_sub_cmd = "WHERE player_fkid=" + str(fixed['player_fkid']) + " AND team_fkid=" + str(fixed['team_fkid']) + " AND season_fkid=" + str(fixed['season_fkid'])
        cmd = udpate_sub_cmd + " " + date_start_sub_cmd + " " + date_end_sub_cmd + " " + where_sub_cmd
        cursor.execute(cmd, multi=True)
    else:
        insert_sub_cmd = "INSERT INTO roster (player_fkid, team_fkid, season_fkid, date_start, date_end)" 
        values_sub_cmd = "VALUES (" + str(fixed['player_fkid']) + ", " + str(fixed['team_fkid']) + ", " + str(fixed['season_fkid']) + ", '" + str(update['date_start']) + "', '" + str(update['date_end']) + "')"
        cmd = insert_sub_cmd + " " + values_sub_cmd
        cursor.execute(cmd)
</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; "%.2f" % round(2606.89579999999, 2)
'2606.90'
</snippet></ROW><ROW><id>19986686</id><snippet>format</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; '{:.2f}'.format(round(2606.89579999999, 2))
'2606.90'
</snippet></ROW><ROW><id>19986686</id><snippet>replace</snippet></ROW><ROW><id>19986686</id><snippet>translate</snippet></ROW><ROW><id>19986686</id><snippet>_</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; _.translate(None, '.')
'260690'
</snippet></ROW><ROW><id>19986686</id><snippet>.2f</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; "%.2f" % 2606.89579999999
'2606.90'
</snippet></ROW><ROW><id>19986686</id><snippet>float.round</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; round(2.675, 2)
2.67
&gt;&gt;&gt; round(2606.89579999999, 2)
2606.89
</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; x = Decimal('2606.8950000000001')
# Decimal('2606.8950000000001')
&gt;&gt;&gt; '{}'.format(x.quantize(Decimal('.01'), rounding=ROUND_HALF_EVEN))
'2606.90'
</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; x = Decimal('2606.8950000000001')
&gt;&gt;&gt; int((x*100).quantize(1, rounding=ROUND_HALF_EVEN))
260690
</snippet></ROW><ROW><id>19986686</id><snippet>Decimal</snippet></ROW><ROW><id>19986686</id><snippet>&gt;&gt;&gt; x = Decimal(2606.8950000000001)
# Decimal('2606.89499999999998181010596454143524169921875') # internal float repr
</snippet></ROW><ROW><id>19986779</id><snippet>functools.partial</snippet></ROW><ROW><id>19986779</id><snippet>#UNTESTED
class Engine(object):
    def __init__(self, variable):
        self.variable = variable

class Event(object):
    def __init__(self, engine):
        super().__init__()
        self.engine = engine
    def process(self):
        print self.engine.variable


engine = Engine('123')
Event = functools.partial(Event, engine)

ThirdPartyApiThatNeedsAnEventClass(Event)
</snippet></ROW><ROW><id>19986779</id><snippet>engine</snippet></ROW><ROW><id>19987273</id><snippet>def printLocation(self):
    """"""
    print self.Button1.GetScreenPosition()
</snippet></ROW><ROW><id>19987273</id><snippet>wx.CallAfter(self.printLocation)
</snippet></ROW><ROW><id>19987398</id><snippet>try</snippet></ROW><ROW><id>19987398</id><snippet>&gt;&gt;&gt; if True:
...     if True:   # indentation with 4 spaces. Any number will do
...     a = 1      # indentation with a tab. Equals two indents with spaces
...     else:      # indentation with 4 spaces
...     a = 2
... 
&gt;&gt;&gt; a   # as if the "a = 1" was inside the second if
1
</snippet></ROW><ROW><id>19987398</id><snippet>python -tt</snippet></ROW><ROW><id>19987398</id><snippet>-tt</snippet></ROW><ROW><id>19987519</id><snippet>from itertools import groupby
from operator import itemgetter

nodes = [['1','1','1','2'],['2','1','1','3'],['3','0','0','5'],['4','0','0','4']]    
result = [max(g, key=itemgetter(3))[1:] for k, g in groupby(nodes, itemgetter(1, 2))]
# [['1', '1', '3'], ['0', '0', '5']]
</snippet></ROW><ROW><id>19987519</id><snippet>sorted(nodes, key=itemgetter(1, 2))</snippet></ROW><ROW><id>19987519</id><snippet>nodes</snippet></ROW><ROW><id>19987519</id><snippet>groupby</snippet></ROW><ROW><id>19987731</id><snippet>import requests

s = requests.Session()
s.get('http://www.sicom.gov.co/precios/controller?accion=Home&amp;option=SEARCH_PRECE')
response = s.get('http://www.sicom.gov.co/precios/controller?accion=ExportToExcel')

with file('out.xls','wb') as f:
    f.write(response.content)
</snippet></ROW><ROW><id>19987769</id><snippet>setupUi</snippet></ROW><ROW><id>19987769</id><snippet>label_nombre</snippet></ROW><ROW><id>19987769</id><snippet>setupUi</snippet></ROW><ROW><id>19987769</id><snippet>self</snippet></ROW><ROW><id>19987769</id><snippet>dialog_ui.py</snippet></ROW><ROW><id>19987769</id><snippet>dashboard_ui.py</snippet></ROW><ROW><id>19987769</id><snippet>from PyQt4 import QtCore, QtGui
from dashboard_ui import Ui_dashboard
from dialog_ui import Ui_Dialog

class logica_login(QtGui.QDialog, Ui_Dialog):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        self.bloguin_aceptar.clicked.connect(self.validacion)
        self.blogin_cancelar.clicked.connect(self.reject)

    def validacion(self):
        ...

class logica_tablero(QtGui.QMainWindow, Ui_dashboard):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.setupUi(self)
        self.label_nombre.setText("hola")
        ...

if __name__ == "__main__":

    app = QtGui.QApplication(sys.argv)
    login = logica_login()
    if login.exec_() == QtGui.QDialog.Accepted:
        dashboard = logica_tablero()
        dashboard.showMaximized()
        sys.exit(app.exec_())
</snippet></ROW><ROW><id>19987854</id><snippet>Player</snippet></ROW><ROW><id>19987854</id><snippet>Game</snippet></ROW><ROW><id>19987854</id><snippet>Game</snippet></ROW><ROW><id>19987854</id><snippet>Player</snippet></ROW><ROW><id>19987854</id><snippet>Player</snippet></ROW><ROW><id>19987854</id><snippet>dict</snippet></ROW><ROW><id>19987854</id><snippet>Lobby</snippet></ROW><ROW><id>19988112</id><snippet>cv1</snippet></ROW><ROW><id>19988112</id><snippet>wait</snippet></ROW><ROW><id>19988112</id><snippet>lock1</snippet></ROW><ROW><id>19988112</id><snippet>print</snippet></ROW><ROW><id>19988112</id><snippet>i</snippet></ROW><ROW><id>19988112</id><snippet>Client</snippet></ROW><ROW><id>19988112</id><snippet>class Client:
    def __init__(self):
        self.clientSocket = socket(AF_INET, SOCK_DGRAM)
        self.serverIP = '127.0.0.1'
        self.serverPort = 11111
        self.buf = 4
        self.waitack = False

    def readFile(self):
        self.data = ', '.join(map(str, range(100000)))
        self.size = len(self.data)

    #member variables
    def sendFile(self,cv1,lock1):
        i = 0
        sent=0
        while (i&lt;self.size):
            message = self.data[i:1024+i]
            print "s cv1 acquire"
            with cv1:
                print "s sendto"
                self.clientSocket.sendto(message, (self.serverIP, self.serverPort))
                self.waitack = True
                print "s cv1 notify"
                cv1.notify() 

            i = i+1024
            sent+=1

            print "s cv2 acquire"
            with cv2:
                print "s cv2 wait"
                while self.waitack:
                    cv2.wait()

        print "File sent successfully !"   
        self.clientSocket.close()

    def receiveAck(self,cv1,lock2):
        i=0
        while (1):
            print "r cv1 acquire"
            with cv1:
                while not self.waitack:
                    print "r cv1 wait"
                    cv1.wait()
            print "r recvfrom"
            self.ack, serverAddress = self.clientSocket.recvfrom(self.buf)
            i += 1
            print self.ack, i            

            print "r cv2 acquire"
            with cv2:
                self.waitack = False
                print "r cv2 notify"
                cv2.notify()
</snippet></ROW><ROW><id>19988112</id><snippet>from itertools import *
from socket import *

s = socket(AF_INET, SOCK_DGRAM)
s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
s.bind(('127.0.0.1', 11111))

for i in count():
    data, addr = s.recvfrom(1024)
    print(i)
    s.sendto('ack\n', addr)
</snippet></ROW><ROW><id>19988112</id><snippet>receiveAck</snippet></ROW><ROW><id>19988386</id><snippet>_fields_</snippet></ROW><ROW><id>19988386</id><snippet>getattr</snippet></ROW><ROW><id>19988386</id><snippet>&gt;&gt;&gt; for name, dtype in d._fields_:
...     print name, getattr(d, name)
... 
a 1.0
b 2.0
c 3.0
</snippet></ROW><ROW><id>19988430</id><snippet>if</snippet></ROW><ROW><id>19988430</id><snippet>if answer == "Yes" or "YES" or "yes":
</snippet></ROW><ROW><id>19988430</id><snippet>if answer in {"Yes", "YES", "yes"}:
</snippet></ROW><ROW><id>19988430</id><snippet>if answer.lower() == "yes":
</snippet></ROW><ROW><id>19988492</id><snippet>read_numbers()</snippet></ROW><ROW><id>19988492</id><snippet>return</snippet></ROW><ROW><id>19988492</id><snippet>None</snippet></ROW><ROW><id>19988492</id><snippet>ValueError</snippet></ROW><ROW><id>19988492</id><snippet>TypeError</snippet></ROW><ROW><id>19988492</id><snippet>def read_numbers():
    try:
        number1 = float(input("Give first number: "))
        number2 = float(input("Give the second number: "))
        return [number1,number2]
    except (ValueError, TypeError):
        return read_numbers()
</snippet></ROW><ROW><id>19988492</id><snippet>return</snippet></ROW><ROW><id>19988492</id><snippet>read_numbers()</snippet></ROW><ROW><id>19988492</id><snippet>def read_numbers():
    while True:
        try:
            number1 = float(input("Give first number: "))
            number2 = float(input("Give the second number: "))
            return [number1,number2]
        except ValueError:
            pass  # continue the loop
</snippet></ROW><ROW><id>19988492</id><snippet>return</snippet></ROW><ROW><id>19988492</id><snippet>TypeError</snippet></ROW><ROW><id>19988492</id><snippet>input()</snippet></ROW><ROW><id>19988492</id><snippet>float()</snippet></ROW><ROW><id>19988492</id><snippet>ValueError</snippet></ROW><ROW><id>19988492</id><snippet>TypeError</snippet></ROW><ROW><id>19988492</id><snippet>float</snippet></ROW><ROW><id>19988648</id><snippet>&gt;&gt;&gt; def get_donors(row):
...     d = donors.apply(lambda x: fuzz.ratio(x['name'], row['name']) * 2 if row['Email'] == x['Email'] else 1, axis=1)
...     d = d[d &gt;= 75]
...     if len(d) == 0:
...         v = ['']*3
...     else:
...         v = donors.ix[d.idxmax(), ['name','Email','Date']].values
...     return pd.Series(v, index=['donor name', 'donor email', 'donor date'])
... 
&gt;&gt;&gt; pd.concat((fundraisers, fundraisers.apply(get_donors, axis=1)), axis=1)
                 Date           Email        name donor name     donor email           donor date
0 2013-03-27 10:00:00          a@a.ca    John Doe   John Doe          a@a.ca  2013-03-01 10:39:00
1 2013-03-01 10:39:00          a@a.ca    John Doe   John Doe          a@a.ca  2013-03-01 10:39:00
2 2013-03-02 10:39:00          d@d.ca  Kathy test   Kat test          d@d.ca  2013-03-27 10:39:00
3 2013-03-03 10:39:00    asdf@asdf.ca   Tes Ester                                                
4 2013-03-04 10:39:00  something@a.ca    Jane Doe   Jane Doe  something@a.ca  2013-03-04 10:39:00
</snippet></ROW><ROW><id>19988758</id><snippet>if __name__ == '__main__':
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>19988758</id><snippet>main_loop</snippet></ROW><ROW><id>19988758</id><snippet>def sighandler(signum, frame):
    print 'signal handler called with signal: %s ' % signum
    global shutdown_flag
    shutdown_flag = True
    sys.exit() # make sure you add this so the main thread exits as well.

if __name__ == '__main__':
    main(sys.argv)
    while 1:  # this will force your main thread to live until you terminate it.
       time.sleep(1) 
</snippet></ROW><ROW><id>19988758</id><snippet>def main_loop():
    while not shutdown_flag:
        collect_data() # contains some print "data" statements
        time.sleep(5)
        import threading
        print threading.enumerate()
    print "done (killed)"
</snippet></ROW><ROW><id>19988954</id><snippet>[symlinks]
recipe = cns.recipe.symlink
symlink =
    targetname1 = linkname1
    targetname2 = linkname2
</snippet></ROW><ROW><id>19989204</id><snippet>class Class1Test(TestCase):

    @mock.patch('mymodule.external_function')
    def test_method1(self, mock_external_function):
        pass
</snippet></ROW><ROW><id>19989204</id><snippet>mymodule</snippet></ROW><ROW><id>19989204</id><snippet>external_function</snippet></ROW><ROW><id>19989204</id><snippet>mymodule.external_function</snippet></ROW><ROW><id>19989204</id><snippet>method1</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>__all__ = ['function1', 'ClassName2']
</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>from test import *</snippet></ROW><ROW><id>19989259</id><snippet>import</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>'_'</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>__init__</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>del sys
</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>_sys</snippet></ROW><ROW><id>19989259</id><snippet>numpy.__init__</snippet></ROW><ROW><id>19989259</id><snippet>if __NUMPY_SETUP__:
    import sys as _sys
    _sys.stderr.write('Running from numpy source directory.\n')
    del _sys
</snippet></ROW><ROW><id>19989259</id><snippet>sys</snippet></ROW><ROW><id>19989259</id><snippet>_sys</snippet></ROW><ROW><id>19989259</id><snippet>numpy</snippet></ROW><ROW><id>19989259</id><snippet>__all__</snippet></ROW><ROW><id>19989259</id><snippet>numpy</snippet></ROW><ROW><id>19989259</id><snippet>import sys</snippet></ROW><ROW><id>19989268</id><snippet>else</snippet></ROW><ROW><id>19989268</id><snippet>elif</snippet></ROW><ROW><id>19989268</id><snippet>elif l[mid] &lt; targetValue:
</snippet></ROW><ROW><id>19989268</id><snippet>l[mid] == targetValue</snippet></ROW><ROW><id>19989268</id><snippet>l[mid] &gt; targetValue</snippet></ROW><ROW><id>19989268</id><snippet>else:
</snippet></ROW><ROW><id>19989268</id><snippet>else</snippet></ROW><ROW><id>19989321</id><snippet>in</snippet></ROW><ROW><id>19989321</id><snippet>prefetch_related</snippet></ROW><ROW><id>19989322</id><snippet>def sum_even_odd(lst):
    if not lst:                      # empty list, we're done
        return (0, 0)                # counters are zero for empty list
    elif lst[0] % 2 == 0:            # current value is even
        x, y = sum_even_odd(lst[1:]) # recursive call
        return (lst[0] + x, y)       # increment even counter
    else:                            # current value is odd
        x, y = sum_even_odd(lst[1:]) # recursive call
        return (x, lst[0] + y)       # increment odd counter
</snippet></ROW><ROW><id>19989322</id><snippet>(0, 0)</snippet></ROW><ROW><id>19989322</id><snippet>sum_even_odd([1, 2, 3, 4, 5])
=&gt; (6, 9)
</snippet></ROW><ROW><id>19989331</id><snippet>&gt;&gt;&gt; s  = pd.Series(pd.date_range('2013-11-11', periods=3, freq='D'))
&gt;&gt;&gt; td = np.timedelta64(1,'ns')
&gt;&gt;&gt; s
0   2013-11-11 00:00:00
1   2013-11-12 00:00:00
2   2013-11-13 00:00:00
dtype: datetime64[ns]
&gt;&gt;&gt; s + td
0   2013-11-11 00:00:00.000000001
1   2013-11-12 00:00:00.000000001
2   2013-11-13 00:00:00.000000001
dtype: datetime64[ns]
</snippet></ROW><ROW><id>19989729</id><snippet>#include &lt;iostream&gt;
#include &lt;vector&gt;

#include &lt;opencv2/highgui.hpp&gt;
#include &lt;opencv2/imgproc.hpp&gt;


int main(int argc, char* argv[])
{
    // Load input image (3-channel)
    cv::Mat input = cv::imread(argv[1]);
    if (input.empty())
    {
        std::cout &lt;&lt; "!!! failed imread()" &lt;&lt; std::endl;
        return -1;
    }   

    // Convert the input to grayscale (1-channel)
    cv::Mat grayscale = input.clone();
    cv::cvtColor(input, grayscale, cv::COLOR_BGR2GRAY);
</snippet></ROW><ROW><id>19989729</id><snippet>    // Locate the black circular shape in the grayscale image
    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;
    cv::findContours(grayscale, contours, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);

    // Fill the interior of the largest circular shape found with BLUE
    cv::Mat circular_shape = input.clone();
    for (size_t i = 0; i &lt; contours.size(); i++)
    {
        std::vector&lt;cv::Point&gt; cnt = contours[i];
        double area = cv::contourArea(cv::Mat(cnt));        

        if (area &gt; 500000 &amp;&amp; area &lt; 1000000) // magic numbers to detect the right circular shape
        {
            std::cout &lt;&lt; "* Area: " &lt;&lt; area &lt;&lt; std::endl;
            cv::drawContours(circular_shape, contours, i, cv::Scalar(255, 0, 0), 
                             cv::FILLED, 8, std::vector&lt;cv::Vec4i&gt;(), 0, cv::Point() );
        }           
    }   
</snippet></ROW><ROW><id>19989729</id><snippet>    // Create the output image with the same attributes of the original, i.e. dimensions &amp; 3-channel, so we have a colored result at the end
    cv::Mat output = cv::Mat::zeros(input.size(), input.type());

    // copyTo() uses circular_shape as a mask and copies that exact portion of the input to the output
    input.copyTo(output, circular_shape);

    cv::namedWindow("Eggs", cv::WINDOW_NORMAL | cv::WINDOW_KEEPRATIO);  
    cv::imshow("Eggs", output);
    cv::resizeWindow("Eggs", 800, 600);
    cv::waitKey(0);

    return 0;
}
</snippet></ROW><ROW><id>19989729</id><snippet>cv::inRange()</snippet></ROW><ROW><id>19989729</id><snippet>// Isolate blue pixels on the output image
cv::Mat blue_pixels_only;
cv::inRange(output, cv::Scalar(255, 0, 0), cv::Scalar(255, 0, 0), blue_pixels_only);
</snippet></ROW><ROW><id>19989729</id><snippet>// Get rid of pixels on the edges of the shape 
int erosion_type = cv::MORPH_RECT; // MORPH_RECT, MORPH_CROSS, MORPH_ELLIPSE
int erosion_size = 3;
cv::Mat element = cv::getStructuringElement(erosion_type, 
                                            cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1), 
                                            cv::Point(erosion_size, erosion_size));
cv::erode(blue_pixels_only, blue_pixels_only, element);
cv::dilate(blue_pixels_only, blue_pixels_only, element);

cv::imshow("Eggs", blue_pixels_only);
cv::imwrite("blue_pixels_only.png", blue_pixels_only);
</snippet></ROW><ROW><id>19989749</id><snippet>namespace</snippet></ROW><ROW><id>19989749</id><snippet>parameters</snippet></ROW><ROW><id>19989807</id><snippet>self</snippet></ROW><ROW><id>19989807</id><snippet>self.countrychoice[-1] + "/" + self.citychoice[-1]
</snippet></ROW><ROW><id>19989807</id><snippet>rq</snippet></ROW><ROW><id>19989807</id><snippet>rq.countrychoice[-1] + "/" + rq.citychoice[-1]
</snippet></ROW><ROW><id>19989807</id><snippet>rq.forecastRequest()</snippet></ROW><ROW><id>19989807</id><snippet>rq.data</snippet></ROW><ROW><id>19989807</id><snippet>while True:
    print("\nWhen you have typed in country and city, press 3 in the menu to see the weather forecast for your choice.\n")
    menu = input("\nPress 1 for country\nPress 2 for city\nPress 3 to see forecast\nPress 4 to exit\n")
    if menu == "1":
        rq.countryChoice()
    elif menu == "2":
        rq.cityChoice()
    elif menu == "3":
        rq.forecastChoice()
        for line in rq.data.splitlines():
            print(line)
</snippet></ROW><ROW><id>19989877</id><snippet>pickle</snippet></ROW><ROW><id>19989880</id><snippet>import datetime
print datetime.timedelta(minutes=594.15)
</snippet></ROW><ROW><id>19990141</id><snippet>def remove_zeros(*all_quizzes):
    result = []
    for each_quiz in all_quizzes:
        updated_quiz_list = []
        for number in each_quiz:
            if number != 0:
                updated_quiz_list.append(number)
        result.append(updated_quiz_list)
    return result
</snippet></ROW><ROW><id>19990364</id><snippet>auto main_module    =py::import("__main__");
auto main_namespace =main_module.attr("__dict__");
inittest();
auto result=py::exec_file("t.py", main_namespace);


from test import f
f()
</snippet></ROW><ROW><id>19990419</id><snippet>findall</snippet></ROW><ROW><id>19990419</id><snippet>pattern</snippet></ROW><ROW><id>19990419</id><snippet>string</snippet></ROW><ROW><id>19990419</id><snippet>string</snippet></ROW><ROW><id>19990419</id><snippet>(ATG((\w\w\w)*)(?!TAA))</snippet></ROW><ROW><id>19990419</id><snippet>((\w\w\w)*)</snippet></ROW><ROW><id>19990419</id><snippet>(\w\w\w)</snippet></ROW><ROW><id>19990419</id><snippet>(?!TAA)</snippet></ROW><ROW><id>19990419</id><snippet>ATG</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>*</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>ATG</snippet></ROW><ROW><id>19990419</id><snippet>(?:...)</snippet></ROW><ROW><id>19990419</id><snippet>In [5]: pat = re.compile("(?:ATG(?:(?:\w\w\w)*)(?!TAA))")
</snippet></ROW><ROW><id>19990419</id><snippet>findall</snippet></ROW><ROW><id>19990419</id><snippet>In [6]: pat.findall(s)
Out[6]: ['ATGCCTAAG']
</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>pat = re.compile("ATG(?:(?!TAA)\w\w\w)*")
</snippet></ROW><ROW><id>19990419</id><snippet>ATG</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>TAA</snippet></ROW><ROW><id>19990419</id><snippet>ATG</snippet></ROW><ROW><id>19990419</id><snippet>In [7]: pat = re.compile("ATG(?:(?!.{0,2}TAA)\w\w\w)*")

In [8]: pat.findall(s)
Out[8]: ['ATG']

In [10]: pat.findall('ATGCCTGAATATAAG')
Out[10]: ['ATGCCTGAA']
</snippet></ROW><ROW><id>19990443</id><snippet>$_SESSION</snippet></ROW><ROW><id>19990443</id><snippet>from flask import session

color = 'blue'
session['usr_fav_color'] = color
</snippet></ROW><ROW><id>19990480</id><snippet>class Node:
    """docstring for Node"""
    def __init__(self, data):
        self.data = data
        self.left=None
        self.right=None

    def union(self, u1, u2):
        res = u1[0] or u2[0], u1[1] or u2[1], u1[2] or u2[2]
        if res[0] and res[1] and not res[2]:
            return res[0], res[1], self
        return res

    def doCommon(self, p, q):
        # recursion base case
        l = (False, False, None)
        r = (False, False, None)
        if self.left:
            l = self.left.doCommon(p, q)
        if self.right:
            r = self.right.doCommon(p, q)

        res = self.union(l, r)
        if res[0] and res[1]:
            return res

        if self.data == p:
            return self.union((True, False, None), res)
        if self.data == q:
            return self.union((False, True, None), res)
        return res

    def common(self, p, q):
        return self.doCommon(p, q)[2]



if __name__ == '__main__':
    root=Node(2)
    root.left=Node(5)
    root.right=Node(4)
    root.left.left=Node(9)
    root.left.right=Node(7)
    res = root.common(9,7)
    if res != None:
        print res.data
    else:
        print "Not found"
</snippet></ROW><ROW><id>19990573</id><snippet>set()</snippet></ROW><ROW><id>19990573</id><snippet>count()</snippet></ROW><ROW><id>19990573</id><snippet>numbers = input("Enter numbers seperated by spaces:-") # i.e. '1 2 3 3 2 2 2 1 3 4 5 3'
my_list = list(map(int, numbers.strip().split(' ')))
count = {}
for x in set(my_list):
    count[x] = my_list.count(x)

for key, value in count.items():
    if value == 1:
        print('{} occurs one time'.format(key))
    else:
        print('{} occurs {} times'.format(key, value))
</snippet></ROW><ROW><id>19990579</id><snippet>scores</snippet></ROW><ROW><id>19990579</id><snippet>def scor_func(score):
    name = input("Please enter your name: ")
    entry = (name, score)

    scorefile = "Triviascores.bat"
    if os.path.exists(scorefile):
        with open(scorefile, 'rb') as sf:
            scores = pickle.load(sf)
    else:
        scores = []

    scores.append(entry)

    with open(scoresfile, "wb") as sf:
        pickle.dump(scores, sf)

    return scores
</snippet></ROW><ROW><id>19990740</id><snippet># binary search for list with desending values
def binary_search(li, targetValue):
    low, high = 0, len(li) - 1  # min &amp; max index
    while low &lt;= high:          # loop til high &amp; low switch
        mid = (high + low) / 2  # midpoint (rounds down)
        if li[mid] &gt; targetValue: low = mid + 1     # confine to upper half
        elif li[mid] &lt; targetValue: high = mid - 1  # confine to lower half
        elif li[mid] == targetValue: return mid     # found it!
    return None  # nothing to return (low/high switched, so it wasn't found)
</snippet></ROW><ROW><id>19990740</id><snippet>targetValue</snippet></ROW><ROW><id>19990740</id><snippet>li</snippet></ROW><ROW><id>19990740</id><snippet>None</snippet></ROW><ROW><id>19990740</id><snippet>li = [10000, 1000, 100, 10, 1]

if binary_search(li, 500) is None: print '500 not found!'
else: print '500 found!'

i = binary_search(li, 10)
if i is None: print '10 not found!'
else: print 'Found 10 at index ' + str(i) + '!'
</snippet></ROW><ROW><id>19990740</id><snippet>500 not found!
Found 10 at index 3!
</snippet></ROW><ROW><id>19990740</id><snippet>li</snippet></ROW><ROW><id>19990740</id><snippet>&lt;</snippet></ROW><ROW><id>19990740</id><snippet>&gt;</snippet></ROW><ROW><id>19990740</id><snippet>def binary_search(li, targetValue):
    low, high = 0, len(li) - 1
    while low &lt;= high:
        mid = (high + low) / 2
        if li[mid] &lt; targetValue: low = mid + 1
        elif li[mid] &gt; targetValue: high = mid - 1
        elif li[mid] == targetValue: return mid
    return None
</snippet></ROW><ROW><id>19990874</id><snippet>p1, = plt.plot(rv,'k-.',label='pdf')
plt.hist(series1,125,color='k',normed=1,histtype='step',label='hist 1',linestyle='dashed')
plt.hist(series2,125,color='k',normed=1,histtype='step',label='hist 2')

# plot lines that have the same formating as the histograms
p2, = plt.plot([0,0], label='hist 1',linestyle='dashed')
p3, = plt.plot([0,0],label='hist 2')

# create the legend
plt.legend([p1, p2, p3], ['pdf', 'hist 1', 'hist2'], loc='best')

# make the lines used in the legend invisible. 
p2.set_visible(False)
p3.set_visible(False)
</snippet></ROW><ROW><id>19990950</id><snippet>from data_file import numbers

print numbers
</snippet></ROW><ROW><id>19990950</id><snippet>import sys
sys.path.append( "path to include directory")
from data_file import numbers

print numbers
</snippet></ROW><ROW><id>19990950</id><snippet>__init__.py</snippet></ROW><ROW><id>19990950</id><snippet>__init__.py</snippet></ROW><ROW><id>19990950</id><snippet>eval()</snippet></ROW><ROW><id>19990983</id><snippet>setPostion</snippet></ROW><ROW><id>19990983</id><snippet>setAnchor</snippet></ROW><ROW><id>19990983</id><snippet>setPostion</snippet></ROW><ROW><id>19990983</id><snippet>    cursor = self.edit.textCursor()
    cursor.setPosition(start)
    cursor.setPosition(end, QtGui.QTextCursor.KeepAnchor)
    self.TextEdit.setTextCursor(cursor)
</snippet></ROW><ROW><id>19991039</id><snippet>\n</snippet></ROW><ROW><id>19991297</id><snippet>tool</snippet></ROW><ROW><id>19991297</id><snippet>base</snippet></ROW><ROW><id>19991297</id><snippet>import numpy as np

height, width = 500, 500
toolh, toolw = 6, 6

base = np.random.rand(height, width)
tool = np.random.rand(toolh, toolw)

m, n = height-toolh+1, width-toolw+1

def height_diff_old(base, tool):
    zdiff = np.empty((m, n))
    for i in range(m):
        for j in range(n):
            zdiff[i, j] = (tool - base[i:i+toolh, j:j+toolw]).min()
    return zdiff

def height_diff_new(base, tool):
    zdiff = np.empty((m, n))
    zdiff.fill(np.inf)
    for i in range(toolh):
        for j in range(toolw):
            diff_ij = tool[i, j] - base[i:i+m, j:j+n]
            np.minimum(zdiff, diff_ij, out=zdiff)
    return zdiff
</snippet></ROW><ROW><id>19991297</id><snippet>:)</snippet></ROW><ROW><id>19991394</id><snippet>L = [1, 2, 3]
a, b, c = L
</snippet></ROW><ROW><id>19991394</id><snippet>L = [1, 2, 3]
(a, b, c) = L
</snippet></ROW><ROW><id>19991394</id><snippet>if (TimeStamp, MAC, RSSI) not in lastPull:
  # do stuff
</snippet></ROW><ROW><id>19991447</id><snippet>planets = {
  'Mercury': {
    'radius': 2439.7,
    'distance': 58000000
    'moons': []
    # etc...
  },
  'Venus': {
    'radius': 6051.8,
    'distance': 108000000,
    'moons': []
    # etc...
  },
  'Earth': {
    'radius': 6371.0,
    'distance': 150000000,
    'moons': ['Luna']
     # etc...
  }
  # etc...
}
</snippet></ROW><ROW><id>19991505</id><snippet>dict(zip(keys, s1))</snippet></ROW><ROW><id>19991505</id><snippet>enumerate</snippet></ROW><ROW><id>19991505</id><snippet>sum</snippet></ROW><ROW><id>19991505</id><snippet>ndarray</snippet></ROW><ROW><id>19991505</id><snippet>&gt;&gt;&gt; arr = np.arange(9).reshape(3,3)
&gt;&gt;&gt; arr
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; arr.sum(axis=1)
array([ 3, 12, 21])
&gt;&gt;&gt; dict(enumerate(arr.sum(axis=1)))
{0: 3, 1: 12, 2: 21}
</snippet></ROW><ROW><id>19991605</id><snippet>win32api</snippet></ROW><ROW><id>19991605</id><snippet>ctypes</snippet></ROW><ROW><id>19991605</id><snippet>FindWindow</snippet></ROW><ROW><id>19991605</id><snippet>FindWindowEx</snippet></ROW><ROW><id>19991605</id><snippet>EnumWindow</snippet></ROW><ROW><id>19991605</id><snippet>EnumChildWindows</snippet></ROW><ROW><id>19991605</id><snippet>wx.Windows.AssociateHandle</snippet></ROW><ROW><id>19991605</id><snippet>wx.Window</snippet></ROW><ROW><id>19991605</id><snippet>GetDC</snippet></ROW><ROW><id>19991605</id><snippet>BitBlt</snippet></ROW><ROW><id>19991655</id><snippet>PriceList[0]</snippet></ROW><ROW><id>19991655</id><snippet>PriceList[0][1]</snippet></ROW><ROW><id>19991655</id><snippet>PriceList[0] = PriceList[1] = ...code omitted... = PriceList[6] = PizzaChange
</snippet></ROW><ROW><id>19991655</id><snippet>PriceList[0:7] = [PizzaChange]*7
</snippet></ROW><ROW><id>19991796</id><snippet>dataBitMap.CreateCompatibleBitmap(compatibleDeviceContext, width, height)
</snippet></ROW><ROW><id>19991796</id><snippet>CreateCompatibleDC</snippet></ROW><ROW><id>19991869</id><snippet>__getstate__</snippet></ROW><ROW><id>19991869</id><snippet>__setstate__</snippet></ROW><ROW><id>19991869</id><snippet>__getnewargs__</snippet></ROW><ROW><id>19991869</id><snippet>__reduce__</snippet></ROW><ROW><id>19991869</id><snippet>__reduce__</snippet></ROW><ROW><id>19991869</id><snippet>class Something(object):

    def __init__(self):
        self._thing_id
        self._cached_thing

    def __getstate__(self):
        return self._thing_id
    def __setstate__(self, thing_id):
        self._thing_id = thing_id

    # etc.
</snippet></ROW><ROW><id>19991869</id><snippet>__dict__</snippet></ROW><ROW><id>19991869</id><snippet>_blacklist = ['_cached_thing']
def __getstate__(self):
    return {k: v for k, v in self.__dict__.iteritems() if k not in self._blacklist}
def __setstate__(self, state):
    self.__dict__.update(state)
</snippet></ROW><ROW><id>19991962</id><snippet>def subfunc(L,sublist):
    sublen = len(sublist)
    for i in xrange(len(L)-sublen+1):
        if L[i:i+sublen] == sublist:
            return True
    return False

L = [0,1,2,3,4,5]
print subfunc(L, [0,1])  # --&gt; True
print subfunc(L, [5,1])  # --&gt; False
print subfunc(L, [4,5])  # --&gt; True
</snippet></ROW><ROW><id>19992035</id><snippet>start</snippet></ROW><ROW><id>19992035</id><snippet>start_new_thread</snippet></ROW><ROW><id>19992035</id><snippet>start</snippet></ROW><ROW><id>19992065</id><snippet>seen = set()
def dupCatch():
    data = sqlPull()
    new_data = []
    for (TimeStamp, MAC, RSSI) in data:
        if (TimeStamp, MAC, RSSI) not in seen:
            seen.add((TimeStamp, MAC, RSSI))
            new_data.append((TimeStamp, MAC, RSSI))
    print new_data
</snippet></ROW><ROW><id>19992065</id><snippet>seen = set()
def dupCatch():
    data = sqlPull()
    newData = [row for row in data if row not in seen]
    seen.update(newData)
    print new_data
</snippet></ROW><ROW><id>19992065</id><snippet>update</snippet></ROW><ROW><id>19992065</id><snippet>seen</snippet></ROW><ROW><id>19992065</id><snippet>seen</snippet></ROW><ROW><id>19992065</id><snippet>dupCatch</snippet></ROW><ROW><id>19992065</id><snippet>seen</snippet></ROW><ROW><id>19992065</id><snippet>def pull():
    while True:
        for row in sqlPull():
            yield row
for row in unique_everseen(pull()):
    print row
</snippet></ROW><ROW><id>19992065</id><snippet>for row in unique_everseen(chain.from_iterable(iter(sqlPull, None))):
    print row
</snippet></ROW><ROW><id>19992065</id><snippet>itertools</snippet></ROW><ROW><id>19992167</id><snippet>bundle.obj.results</snippet></ROW><ROW><id>19992167</id><snippet>dehydrate_results</snippet></ROW><ROW><id>19992167</id><snippet>results</snippet></ROW><ROW><id>19992167</id><snippet>tastypie.fields.DictField</snippet></ROW><ROW><id>19992167</id><snippet>tastypie.fields.ListField</snippet></ROW><ROW><id>19992167</id><snippet>from tastypie.fields import ListField

class MyResource(ModelResource):
    results = ListField(attribute='results')
</snippet></ROW><ROW><id>19992191</id><snippet>if random.random() &lt;= .95:
</snippet></ROW><ROW><id>19992191</id><snippet>attempt_make_ten_pots</snippet></ROW><ROW><id>19992191</id><snippet>make_coffee</snippet></ROW><ROW><id>19992191</id><snippet>import random

# First, a custom exception
class NoCoffee(Exception):
    def __init__(self):
    super(NoCoffee, self).__init__()
    self.msg = "There is no coffee!"

def make_coffee():
    if random.random() &lt;= .95:
        print "A pot of coffee has been made"
    else:
        raise NoCoffee

def attempt_make_ten_pots():
    cupsMade = 0
    try:
        for x in range(10):
            make_coffee()
            cupsMade += 1
    except NoCoffee as e:
        print e.msg
    return cupsMade

print attempt_make_ten_pots()
</snippet></ROW><ROW><id>19992423</id><snippet>def nary_tree(root, value):
    """return True if there is a node with value exists in root"""
    if not root: #empty tree
        return False
    if root.data == value:
        return True 
    if nary_tree(root.left, value):
        return True
    if nary_tree(root.right, value):
        return True
    return False #how was this being executed in above example then?
</snippet></ROW><ROW><id>19992631</id><snippet>"module"</snippet></ROW><ROW><id>19992631</id><snippet>module</snippet></ROW><ROW><id>19992631</id><snippet>exec</snippet></ROW><ROW><id>19992631</id><snippet>def get_doc(module):
    exec "import {}".format(module)
    exec "print {}.__doc__".format(module)"
</snippet></ROW><ROW><id>19992631</id><snippet>exec</snippet></ROW><ROW><id>19992631</id><snippet>__import__</snippet></ROW><ROW><id>19992631</id><snippet>def get_doc(module):
    module = __import__(module)
    print module.__doc__
</snippet></ROW><ROW><id>19992764</id><snippet>.set_index("index")</snippet></ROW><ROW><id>19992764</id><snippet>DataFrame</snippet></ROW><ROW><id>19992764</id><snippet>import pandas as pd
df = pd.DataFrame({"index": ["a", "a", "a", "b", "b", "b"], "id": [1,2,3,4,5,6], "name": ["jim", "jim", "jim", "bob", "bob", "bob"], "date":['12/5/1999','12/6/1999','18/4/2000','12/4/2006','14/9/2007','16/4/2008']})
df["date_order"] = df.groupby(df["index"]).date.transform(pd.Series.rank, ascending=False)
</snippet></ROW><ROW><id>19992766</id><snippet>position</snippet></ROW><ROW><id>19992766</id><snippet>None</snippet></ROW><ROW><id>19992766</id><snippet>position</snippet></ROW><ROW><id>19992766</id><snippet>None</snippet></ROW><ROW><id>19992766</id><snippet>class Vm(models.Model):
    position = models.OneToOneField('Position', null=True, blank=True, default = None)
    def __init__(self, *args, **kwargs):
        super(Vm, self).__init__( *args, **kwargs)
        if self.position:
            self.port = 5000+10*(self.position.position-1) 
        else:
            self.port = 5000 #Or whatever the default you want to set.
</snippet></ROW><ROW><id>19992766</id><snippet>class Vm(models.Model):
    position = models.OneToOneField('Position', null=True, blank=True, default = None)
    def __init__(*args, **kwargs):
        super(Vm, self).__init__(self, *args, **kwargs)

    def port(self):
        if self.position:
            return 5000+10*(self.position.position-1)
        else:
            return 5000 #or any default value you wish to specify.
</snippet></ROW><ROW><id>19992766</id><snippet>port</snippet></ROW><ROW><id>19992766</id><snippet>vm = Vm.objects.get(pk=1)
port = vm.port()
</snippet></ROW><ROW><id>19992789</id><snippet>[[ MULTIPOLYGON - 346 elements, 36054 pts ]]
</snippet></ROW><ROW><id>19992860</id><snippet>df["idx1_mod"] = df.index.get_level_values(0).values + 100
</snippet></ROW><ROW><id>19992985</id><snippet>userData = 10
emptyList = [0] * userData
print emptyList
</snippet></ROW><ROW><id>19992985</id><snippet>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>19992985</id><snippet>for i in emptyList:
    print i,
</snippet></ROW><ROW><id>19992985</id><snippet>0 0 0 0 0 0 0 0 0 0
</snippet></ROW><ROW><id>19992985</id><snippet>userData = 10
emptyList = [0] * userData

for i in range(len(emptyList)):
    emptyList[i] = userData
    userData -= 1
print emptyList
</snippet></ROW><ROW><id>19992985</id><snippet>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>19992985</id><snippet>range</snippet></ROW><ROW><id>19992985</id><snippet>print range(10, 0, -1)  #Python 2
print list(range(10, 0, -1))  #Python 3
</snippet></ROW><ROW><id>19993040</id><snippet>merge</snippet></ROW><ROW><id>19993040</id><snippet>print(merge())
</snippet></ROW><ROW><id>19993040</id><snippet>def mergesort(ent):
    if len(ent)&gt;1:
        m=math.floor(len(ent)/2)
        L1 = ent[:m]
        L2 = ent[m+1:len(ent)]
        L=merge(mergesort(L1),mergesort(L2))
return L
</snippet></ROW><ROW><id>19993040</id><snippet>print(mergesort(ent))
</snippet></ROW><ROW><id>19993079</id><snippet>
import OpenGL
from OpenGL.GL import *
from OpenGL.GLUT import *

import numpy, math, sys, os
import glutils

import cyglfw3 as glfw

strVS = """
#version 330 core

layout(location = 0) in vec3 aVert;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform vec4 uColor;
uniform float uTheta;

out vec4 vCol;
out vec2 vTexCoord;

void main() {
  // rotational transform
  mat4 rot =  mat4(
        vec4( cos(uTheta),  sin(uTheta), 0.0, 0.0),
        vec4(-sin(uTheta),  cos(uTheta), 0.0, 0.0),
        vec4(0.0,         0.0,         1.0, 0.0),
        vec4(0.0,         0.0,         0.0, 1.0)
        );
  // transform vertex
  gl_Position = uPMatrix * uMVMatrix * rot * vec4(aVert, 1.0); 
  // set color
  vCol = vec4(uColor.rgb, 1.0);
  // set texture coord
  vTexCoord = aVert.xy + vec2(0.5, 0.5);
}
"""
strFS = """
#version 330 core

in vec4 vCol;
in vec2 vTexCoord;

uniform sampler2D tex2D;
uniform bool showCircle;

out vec4 fragColor;

void main() {
  if (showCircle) {
    // discard fragment outside circle
    if (distance(vTexCoord, vec2(0.5, 0.5)) &gt; 0.5) {
      discard;
    }
    else {
      fragColor = texture(tex2D, vTexCoord);
    }
  }
  else {
     fragColor = texture(tex2D, vTexCoord);
  }
}
"""

class Scene:    
    """ OpenGL 3D scene class"""
    # initialization
    def __init__(self):
        # create shader
        self.program = glutils.loadShaders(strVS, strFS)

        glUseProgram(self.program)

        self.pMatrixUniform = glGetUniformLocation(self.program, 
                                                   'uPMatrix')
        self.mvMatrixUniform = glGetUniformLocation(self.program, 
                                                  "uMVMatrix")
        self.colorU = glGetUniformLocation(self.program, "uColor")

        # color
        self.col0 = [1.0, 0.0, 0.0, 1.0]

        # texture 
        self.tex2D = glGetUniformLocation(self.program, "tex2D")

        # define quad vertices 
        quadV = [
            -0.5, -0.5, 0.0, 
            0.5, -0.5, 0.0, 
            -0.5, 0.5, 0.0,
             0.5, 0.5, 0.0
            ]

        # set up vertex array object (VAO)
        self.vao = glGenVertexArrays(1)
        glBindVertexArray(self.vao)
        # vertices
        self.vertexBuffer = glGenBuffers(1)
        glBindBuffer(GL_ARRAY_BUFFER, self.vertexBuffer)
        vertexData = numpy.array(quadV, numpy.float32)
        glBufferData(GL_ARRAY_BUFFER, 4*len(vertexData), vertexData, 
                     GL_STATIC_DRAW)
        # enable vertex array
        glEnableVertexAttribArray(0)
        # set buffer data
        glBindBuffer(GL_ARRAY_BUFFER, self.vertexBuffer)
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
        # unbind VAO
        glBindVertexArray(0)

        # time
        self.t = 0 

        # texture
        self.texId = glutils.loadTexture('test.png')

        # show circle?
        self.showCircle = False

    # step
    def step(self):
        # increment angle
        self.t = (self.t + 1) % 360
        # set shader angle in radians
        glUniform1f(glGetUniformLocation(self.program, 'uTheta'), 
                    math.radians(self.t))

    # render 
    def render(self, pMatrix, mvMatrix):        
        # use shader
        glUseProgram(self.program)

        # set proj matrix
        glUniformMatrix4fv(self.pMatrixUniform, 1, GL_FALSE, pMatrix)

        # set modelview matrix
        glUniformMatrix4fv(self.mvMatrixUniform, 1, GL_FALSE, mvMatrix)

        # show circle?
        glUniform1i(glGetUniformLocation(self.program, 'showCircle'), 
                    self.showCircle)

        # enable texture 
        glActiveTexture(GL_TEXTURE0)
        glBindTexture(GL_TEXTURE_2D, self.texId)

        glUniform1i(self.tex2D, 0)

        # bind VAO
        glBindVertexArray(self.vao)
        # draw
        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4)
        # unbind VAO
        glBindVertexArray(0)


class RenderWindow:
    """GLFW Rendering window class"""
    def __init__(self):

        # save current working directory
        cwd = os.getcwd()

        # initialize glfw - this changes cwd
        glfw.Init()

        # restore cwd
        os.chdir(cwd)

        # version hints
        glfw.WindowHint(glfw.CONTEXT_VERSION_MAJOR, 3)
        glfw.WindowHint(glfw.CONTEXT_VERSION_MINOR, 3)
        glfw.WindowHint(glfw.OPENGL_FORWARD_COMPAT, GL_TRUE)
        glfw.WindowHint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)

        # make a window
        self.width, self.height = 640, 480
        self.aspect = self.width/float(self.height)
        self.win = glfw.CreateWindow(self.width, self.height, "test")
        # make context current
        glfw.MakeContextCurrent(self.win)

        # initialize GL
        glViewport(0, 0, self.width, self.height)
        glEnable(GL_DEPTH_TEST)
        glClearColor(0.5, 0.5, 0.5,1.0)

        # set window callbacks
        glfw.SetMouseButtonCallback(self.win, self.onMouseButton)
        glfw.SetKeyCallback(self.win, self.onKeyboard)
        glfw.SetWindowSizeCallback(self.win, self.onSize)        

        # create 3D
        self.scene = Scene()

        # exit flag
        self.exitNow = False


    def onMouseButton(self, win, button, action, mods):
        #print 'mouse button: ', win, button, action, mods
        pass

    def onKeyboard(self, win, key, scancode, action, mods):
        #print 'keyboard: ', win, key, scancode, action, mods
        if action == glfw.PRESS:
            # ESC to quit
            if key == glfw.KEY_ESCAPE: 
                self.exitNow = True
            else:
                # toggle cut
                self.scene.showCircle = not self.scene.showCircle 

    def onSize(self, win, width, height):
        #print 'onsize: ', win, width, height
        self.width = width
        self.height = height
        self.aspect = width/float(height)
        glViewport(0, 0, self.width, self.height)

    def run(self):
        # initializer timer
        glfw.SetTime(0.0)
        t = 0.0
        while not glfw.WindowShouldClose(self.win) and not self.exitNow:
            # update every x seconds
            currT = glfw.GetTime()
            if currT - t &gt; 0.1:
                # update time
                t = currT
                # clear
                glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

                # build projection matrix
                pMatrix = glutils.perspective(45.0, self.aspect, 0.1, 100.0)

                mvMatrix = glutils.lookAt([0.0, 0.0, -2.0], [0.0, 0.0, 0.0],
                                          [0.0, 1.0, 0.0])
                # render
                self.scene.render(pMatrix, mvMatrix)
                # step 
                self.scene.step()

                glfw.SwapBuffers(self.win)
                # Poll for and process events
                glfw.PollEvents()
        # end
        glfw.Terminate()

# main() function
def main():
    print 'starting simpleglfw...'    
    rw = RenderWindow()
    rw.run()

# call main
if __name__ == '__main__':
    main()

</snippet></ROW><ROW><id>19993138</id><snippet>map()</snippet></ROW><ROW><id>19993138</id><snippet>_async</snippet></ROW><ROW><id>19993578</id><snippet>fabfile.py</snippet></ROW><ROW><id>19993578</id><snippet>from fabric.api import run
from fabric.api import sudo
from fabric.api import env

env.user = 'root'
env.password = ''
env.host = ='192.168.1.15'

def vm_up():
  sudo("kvm -m 1024 -drive file=/var/lib/libvirt/images/oa4-vm$...")
  run("hostname --short")
</snippet></ROW><ROW><id>19993578</id><snippet>$ fab vm_up
</snippet></ROW><ROW><id>19993578</id><snippet>$ fab -H 192.168.1.15 -p PASSWORD vm_up
</snippet></ROW><ROW><id>19993578</id><snippet>kvm</snippet></ROW><ROW><id>19993578</id><snippet>pexpect</snippet></ROW><ROW><id>19993578</id><snippet>fab</snippet></ROW><ROW><id>19993578</id><snippet>child = pexpect.spawn('fab vm_up')
child.expect('username:') # Put this in the format you're expecting
child.send('root')
</snippet></ROW><ROW><id>19993798</id><snippet>mtcars.groupby(["cyl"])['carb'].apply(lambda x: sum((x == 4).astype(float)) / sum(x.isin((4, 1))))
</snippet></ROW><ROW><id>19993798</id><snippet>&gt;&gt;&gt; mtcars = pd.DataFrame({'cyl':[8,8,6,6,6,4], 'carb':[4,3,1,5,4,1]})
&gt;&gt;&gt; mtcars
   carb  cyl
0     4    8
1     3    8
2     1    6
3     5    6
4     4    6
5     1    4
&gt;&gt;&gt; mtcars.groupby(["cyl"])['carb'].apply(lambda x: sum((x == 4).astype(float)) / sum(x.isin((4, 1))))
cyl
4      0.0
6      0.5
8      1.0
dtype: float64
</snippet></ROW><ROW><id>19993798</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; mtcars.groupby(["cyl"])['carb'].apply(lambda x: sum(np.where(x == 4,6,3).astype(float)) / sum(np.where(x.isin((4,1)),8,4)))
cyl
4      0.375
6      0.600
8      0.750
dtype: float64
</snippet></ROW><ROW><id>19993844</id><snippet>var1</snippet></ROW><ROW><id>19993844</id><snippet>var2</snippet></ROW><ROW><id>19993844</id><snippet>ClassA</snippet></ROW><ROW><id>19993844</id><snippet>ClassB</snippet></ROW><ROW><id>19993844</id><snippet>class ClassA(object):
    def __init__(self):
        self.var1 = 1
        self.var2 = 2

    def methodA(self):
        self.var1 = self.var1 + self.var2
        return self.var1



class ClassB(ClassA):
    def __init__(self, class_a):
        self.var1 = class_a.var1
        self.var2 = class_a.var2

object1 = ClassA()
sum = object1.methodA()
object2 = ClassB(object1)
print sum
</snippet></ROW><ROW><id>19993844</id><snippet>class ClassA(object):
    var1 = 0
    var2 = 0
    def __init__(self):
        ClassA.var1 = 1
        ClassA.var2 = 2

    def methodA(self):
        ClassA.var1 = ClassA.var1 + ClassA.var2
        return ClassA.var1



class ClassB(ClassA):
    def __init__(self):
        print ClassA.var1
        print ClassA.var2

object1 = ClassA()
sum = object1.methodA()
object2 = ClassB()
print sum
</snippet></ROW><ROW><id>19993934</id><snippet>stateDict</snippet></ROW><ROW><id>19993934</id><snippet>def pivot_nested_dict(nested_dict):
    stateDict = {}
    for i in nested_dict:
        dict2 = nested_dict[i]
        for j in dict2:
            if j not in stateDict:
                stateDict[j] = {i: dict2[j]}
            else:
                stateDict[j][i] = dict2[j]
    return stateDict

print pivot_nested_dict(inp)
</snippet></ROW><ROW><id>19994045</id><snippet>import re
pat = re.compile("ATG(?:(?!TAA|TGA|TAG)\w\w\w)*")
s = 'GATGDTATGDTAAAA'
i = 0
while True:
    m = pat.search(s, i)
    if m:
        start, end = m.span()
        print "match at {}:{} {!r}".format(start, end, m.group())
        i = start + 1
    else:
        break
</snippet></ROW><ROW><id>19994045</id><snippet>match at 1:10 'ATGDTATGD'
match at 6:15 'ATGDTAAAA'
</snippet></ROW><ROW><id>19994045</id><snippet>finditer</snippet></ROW><ROW><id>19994045</id><snippet>print it.start(1)
print it.end(1)
</snippet></ROW><ROW><id>19994045</id><snippet>1</snippet></ROW><ROW><id>19994045</id><snippet>pat = re.compile("(?=(" + R + "))")
</snippet></ROW><ROW><id>19994045</id><snippet>for m in pat.finditer(some_string):
    m.group(1)  # the matched substring
    m.span(1)   # the slice indices of the match substring
    # etc
</snippet></ROW><ROW><id>19994045</id><snippet>(?=(R))</snippet></ROW><ROW><id>19994045</id><snippet>R</snippet></ROW><ROW><id>19994045</id><snippet>R</snippet></ROW><ROW><id>19994045</id><snippet>finditer()</snippet></ROW><ROW><id>19994045</id><snippet>findall()</snippet></ROW><ROW><id>19994045</id><snippet>R</snippet></ROW><ROW><id>19994045</id><snippet>finditer()</snippet></ROW><ROW><id>19994412</id><snippet>def process_view(self, request, view_func, view_args, view_kwargs):
    request.extra_attrs = {}
    request.extra_attrs['posts_getter'] = PostsGetter()
    request.extra_attrs['user_info'] = UserInfo(request)
    request.extra_attrs['basic_info'] = BasicInfo(request)
    request.extra_attrs['header_menu'] = HeaderMenu()
    request.extra_attrs['comments_getter'] = CommentsGetter()
    request.extra_attrs['tags_getter'] = TagsGetter()
    request.extra_attrs['ttype_getter'] = TTypeGetter()
    request.extra_attrs['link_getter'] = LinkGetter()
</snippet></ROW><ROW><id>19994549</id><snippet>cx_Oracle</snippet></ROW><ROW><id>19994819</id><snippet>import os,re,shutil
f=[]
file='Bright_Combo.txt'
for root,dirs,files in os.walk('/home/ghantasa/test'):
    if file in files:
        f.append(os.path.join(root,file))

for fil in f:
    with open(fil,'r') as readfile:
        data = readfile.readlines()
    with open(os.path.join('/'.join(fil.split('/')[:-2]),'Bright_Sum.txt'),'a') as      writefile:
    writefile.write(''.join(data))  
</snippet></ROW><ROW><id>19995084</id><snippet>word not in alist</snippet></ROW><ROW><id>19995084</id><snippet>alist</snippet></ROW><ROW><id>19995084</id><snippet>if word not in alist:
</snippet></ROW><ROW><id>19995084</id><snippet>if word not in count:
</snippet></ROW><ROW><id>19995084</id><snippet>count[word]</snippet></ROW><ROW><id>19995203</id><snippet>sorted(d, key=lambda x: (x[1], x[0]) if len(x) == 2 else (x[0], ','))
</snippet></ROW><ROW><id>19995203</id><snippet>,</snippet></ROW><ROW><id>19995203</id><snippet>+</snippet></ROW><ROW><id>19995203</id><snippet>-</snippet></ROW><ROW><id>19995203</id><snippet>,</snippet></ROW><ROW><id>19995203</id><snippet>&gt;&gt;&gt; d = {'+A':234, '-B':212, 'A':454, '-C':991, '-A':124, '+B':1, 'B':98, '+C':232, 'C':23}
&gt;&gt;&gt; sorted(d, key=lambda x: (x[1], x[0]) if len(x) == 2 else (x[0], ','))
['+A', 'A', '-A', '+B', 'B', '-B', '+C', 'C', '-C']
</snippet></ROW><ROW><id>19995203</id><snippet>,</snippet></ROW><ROW><id>19995203</id><snippet>sorted(d, key=lambda x: x[::-1] + ',')
</snippet></ROW><ROW><id>19995203</id><snippet>A+,</snippet></ROW><ROW><id>19995203</id><snippet>A</snippet></ROW><ROW><id>19995203</id><snippet>A-,</snippet></ROW><ROW><id>19995458</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>19995458</id><snippet>&lt;script&gt;
  var value = {{ value|escapejs }};
&lt;/script&gt;
</snippet></ROW><ROW><id>19995502</id><snippet>derivative</snippet></ROW><ROW><id>19995502</id><snippet>ndarray</snippet></ROW><ROW><id>19995502</id><snippet>ndarray</snippet></ROW><ROW><id>19995502</id><snippet>Ip</snippet></ROW><ROW><id>19995502</id><snippet>Ip</snippet></ROW><ROW><id>19995502</id><snippet>Python3</snippet></ROW><ROW><id>19995502</id><snippet>import numpy as np
from scipy.misc import derivative
from scipy.integrate import odeint

def Ip(t):
    return np.sqrt(2)*Imag*(np.sin(w*t+phi-theta)-np.exp(-t/tau)*np.sin(phi-theta))

Imag = 16000.
w = 2*np.pi*60
tau = .05
theta = 1.52
phi = theta - np.radians(90)
t = np.linspace(0,.1,10000)

def dI(t):
    return derivative(Ip,t)

def f(y,t):
    Rb = 8.
    N = 240.
    Is = y[0]
    f0 = (dI(t)/N)-Rb*y[0]
    return [f0]

yinit = [0]
sol = odeint(f,yinit,t)
print(sol[:,0])
</snippet></ROW><ROW><id>19995533</id><snippet>ElementTree</snippet></ROW><ROW><id>19995533</id><snippet>lxml</snippet></ROW><ROW><id>19995533</id><snippet>findall</snippet></ROW><ROW><id>19995533</id><snippet>ElementTree</snippet></ROW><ROW><id>19995533</id><snippet>[@attrib="value"]</snippet></ROW><ROW><id>19995533</id><snippet>import xml.etree.ElementTree as ET
</snippet></ROW><ROW><id>19995533</id><snippet>import lxml.etree as ET
</snippet></ROW><ROW><id>19995533</id><snippet>lxml</snippet></ROW><ROW><id>19995849</id><snippet>s = Sound() 
s.read('mymusic.mp3') 
s.play()
</snippet></ROW><ROW><id>19995930</id><snippet>cols_string = '('
for x, i in enumerate(cols):
    if x != len(cols) - 1:
        cols_string += i + ','
    if x == len(cols) - 1:
        cols_string += i + ')'
</snippet></ROW><ROW><id>19995930</id><snippet>cols_string = '(' + ','.join(cols) + ')'
</snippet></ROW><ROW><id>19996238</id><snippet>xg=True</snippet></ROW><ROW><id>19996701</id><snippet>ijson</snippet></ROW><ROW><id>19996701</id><snippet>items</snippet></ROW><ROW><id>19996701</id><snippet>"item"</snippet></ROW><ROW><id>19996701</id><snippet>for item in ijson.items(f, "item"):
    # do stuff with the item dict
</snippet></ROW><ROW><id>19997004</id><snippet>@Xml.*\}\)</snippet></ROW><ROW><id>19997150</id><snippet>(1..&lt;4000).each { i -&gt;
    println "iteration : $i"

    def command = """myExecutable
                 a=$argA
                 b=$outDir"""

    def proc = command.execute()
    // Consume the outputs from the process and pipe them to our output streams
    proc.consumeProcessOutput( System.out, System.err )

    // Wait for the command to finish
    proc.waitFor()

    // Obtain status
    println "return code: ${proc.exitValue()}"
}
</snippet></ROW><ROW><id>19997234</id><snippet>yield</snippet></ROW><ROW><id>19997234</id><snippet>yield</snippet></ROW><ROW><id>19997355</id><snippet>query_string = "START beginning=node(4), end=node(452) 
                MATCH p = shortestPath(beginning-[*..500]-end) 
                RETURN p"

result = neo4j.CypherQuery(graph_db, query_string).execute()

for r in result:
    print type(r) # r is a py2neo.util.Record object
    print type(r.p) # p is a py2neo.neo4j.Path object
</snippet></ROW><ROW><id>19997567</id><snippet>classifier.predict()</snippet></ROW><ROW><id>19997567</id><snippet>class_weight</snippet></ROW><ROW><id>19997567</id><snippet>class_prior</snippet></ROW><ROW><id>19997567</id><snippet># minimal dataset
&gt;&gt;&gt; X = [[1, 0], [1, 0], [0, 1]]
&gt;&gt;&gt; y = [0, 0, 1]
# use empirical prior, learned from y
&gt;&gt;&gt; MultinomialNB().fit(X,y).predict([1,1])
array([0])
# use custom prior to make 1 more likely
&gt;&gt;&gt; MultinomialNB(class_prior=[.1, .9]).fit(X,y).predict([1,1])
array([1])
</snippet></ROW><ROW><id>19997687</id><snippet>import os
files = os.listdir("your/path/")
</snippet></ROW><ROW><id>19997687</id><snippet>listdir</snippet></ROW><ROW><id>19997687</id><snippet>os.path.isfile</snippet></ROW><ROW><id>19997687</id><snippet>path</snippet></ROW><ROW><id>19997860</id><snippet>unicode_object.encode('idna')</snippet></ROW><ROW><id>19997860</id><snippet>&gt;&gt;&gt; import encodings
&gt;&gt;&gt; encodings.idna
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'idna'
&gt;&gt;&gt; u'müller.de'.encode('idna')
'xn--mller-kva.de'
&gt;&gt;&gt; encodings.idna
&lt;module 'encodings.idna' from '/usr/lib/python2.7/encodings/idna.pyc'&gt;
</snippet></ROW><ROW><id>19997860</id><snippet>&gt;&gt;&gt; import encodings
&gt;&gt;&gt; encodings.idna
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'idna'
&gt;&gt;&gt; import encodings.idna
&gt;&gt;&gt; encodings.idna
&lt;module 'encodings.idna' from '/usr/lib/python2.7/encodings/idna.pyc'&gt;
</snippet></ROW><ROW><id>19998047</id><snippet>key = myobj.put()

# if you are using ndb you can get the key with
myobj.key

# if db use 
myobj.key()
</snippet></ROW><ROW><id>19998345</id><snippet>network.weights[index] += delta</snippet></ROW><ROW><id>19998345</id><snippet>network.bias[index] += delta</snippet></ROW><ROW><id>19998345</id><snippet>def backpropagate(network, tests, stepSize = 0.01, iterations=50):

    #...

    network.weights[index] += stepSize * delta

    #...

    network.bias[index] += stepSize * delta
</snippet></ROW><ROW><id>19998375</id><snippet>from myimport import myClass #import the class you needed

def main():
    myClassInstance = myClass(10) #Create an instance of that class
    myClassInstance.myExample() 

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19998375</id><snippet>myimport.py</snippet></ROW><ROW><id>19998375</id><snippet>class myClass:
    def __init__(self, number):
        self.number = number
    def myExample(self):
        result = self.myExample2(self.number) - self.number
        print(result)
    def myExample2(self, num): #the instance object is always needed 
        #as the first argument in a class method
        return num*num
</snippet></ROW><ROW><id>19998469</id><snippet>proxy = json.loads(proxy.rstrip())
</snippet></ROW><ROW><id>19998469</id><snippet>http://www.google.com</snippet></ROW><ROW><id>19998469</id><snippet>{"http" : "http://ip:port"}</snippet></ROW><ROW><id>19998469</id><snippet>response=urllib2.urlopen(urls[0])
</snippet></ROW><ROW><id>19998481</id><snippet>if not check(tick):
</snippet></ROW><ROW><id>19998481</id><snippet>if check(tick) == False:
</snippet></ROW><ROW><id>19998481</id><snippet>writeTicker = open('Tickers.txt', 'a')
</snippet></ROW><ROW><id>19998481</id><snippet>from __future__ import print_function

import re
import sys


def tickerWrite(tick):
    if not check(tick):
        with open('Tickers.txt', 'a') as writeTicker:
            print(tick.upper(), file=writeTicker)

def check(ticker):
    with open('Tickers.txt') as tList:
        for line in tList:
            return bool(re.search(ticker, line))

if __name__ == '__main__':
    tickerWrite(sys.argv[1])
</snippet></ROW><ROW><id>20000141</id><snippet>get_ticks</snippet></ROW><ROW><id>20000357</id><snippet>myVariable</snippet></ROW><ROW><id>20000357</id><snippet>print id(myVariable)
</snippet></ROW><ROW><id>20000357</id><snippet>myVariable = myClass
</snippet></ROW><ROW><id>20000357</id><snippet>myObject1 = myClass()
myObject2 = myVariable()
</snippet></ROW><ROW><id>20000369</id><snippet>import numpy as np

A = np.array([ 1, 2, 3, 4, 4,
      2, 3, 4, 5, 3,
      4, 5, 6, 7, 2,
      5, 6, 7, 8, 9,
      6, 7, 8, 9, 0 ]).reshape(5, 5)

B = np.array([60, 70, 80, 90]).reshape(2, 2)

A[2:6:2, 2:6:2] = B # or
A[np.ix_([2, 4], [2, 4])] = B  

print A
</snippet></ROW><ROW><id>20000369</id><snippet>[[ 1  2  3  4  4]
 [ 2  3  4  5  3]
 [ 4  5 60  7 70]
 [ 5  6  7  8  9]
 [ 6  7 80  9 90]]
</snippet></ROW><ROW><id>20000475</id><snippet>z = zipfile.ZipFile(file_name)
z.extractall()
</snippet></ROW><ROW><id>20000535</id><snippet>action_needed</snippet></ROW><ROW><id>20000535</id><snippet>if</snippet></ROW><ROW><id>20000535</id><snippet>{% if action_needed %}</snippet></ROW><ROW><id>20000535</id><snippet>action_needed</snippet></ROW><ROW><id>20000535</id><snippet>@register.filter
def action_needed(obj):
    return some_test_on(obj)

{% if obj|action_needed %}
   whatever
{% endif %}
</snippet></ROW><ROW><id>20000535</id><snippet>exp = Account.objects.filter(expiration_date__lte = timezone.now())
if len(exp) == 0:
    return False
else:
    return True
</snippet></ROW><ROW><id>20000535</id><snippet>return len(Account.objects.filter(expiration_date__lte=timezone.now())) &gt; 0
</snippet></ROW><ROW><id>20000535</id><snippet>return Account.objects.filter(expiration_date__lte=timezone.now()).exists()
</snippet></ROW><ROW><id>20000759</id><snippet>depth == 0</snippet></ROW><ROW><id>20000759</id><snippet>extract_next_state()</snippet></ROW><ROW><id>20000759</id><snippet>extract_next_state()</snippet></ROW><ROW><id>20000759</id><snippet>extract_next_state</snippet></ROW><ROW><id>20000759</id><snippet>def extract_next_state(s):
    p = re.compile('(\()|(\))')
    depth = 0
    startindex = None
    endindex = None
    for m in p.finditer(s):
        if m.group(1):          # (
            depth += 1
            print "depth (", depth
            if not startindex:
                startindex = m.start()
        elif m.group(2):          # )
            depth -= 1
            print "depth )", depth
            if depth == 0:
                endindex = m.end()
    return s[startindex:(endindex if depth == 0 else None)] + ')' * depth
</snippet></ROW><ROW><id>20000762</id><snippet>"".join</snippet></ROW><ROW><id>20000762</id><snippet>df.apply("".join, axis=1)
</snippet></ROW><ROW><id>20000762</id><snippet>import pandas as pd

df = pd.DataFrame(
    [['','','A','',''],
    ['','C','','',''],
    ['','A','','',''],
    ['','','','T','']]
)

s = df.stack()
print s[s!=""]
</snippet></ROW><ROW><id>20000762</id><snippet>0  2    A
1  1    C
2  1    A
3  3    T
dtype: object
</snippet></ROW><ROW><id>20000762</id><snippet>r = s[s!=""]
r.groupby(level=0).apply(pd.DataFrame.reset_index, drop=True).unstack()
</snippet></ROW><ROW><id>20000984</id><snippet>prices[:-1].values / prices[1:] - 1
</snippet></ROW><ROW><id>20000984</id><snippet>prices[:-1] / prices[1:].values - 1
</snippet></ROW><ROW><id>20000984</id><snippet>shift()</snippet></ROW><ROW><id>20000984</id><snippet>prices.shift(1) / prices - 1
</snippet></ROW><ROW><id>20001085</id><snippet>combinations_with_replacement</snippet></ROW><ROW><id>20001085</id><snippet>from itertools import combinations_with_replacement
mydict = {"".join(key):0 for key in combinations_with_replacement('ACTG', 8)}
</snippet></ROW><ROW><id>20001283</id><snippet>application/json</snippet></ROW><ROW><id>20001283</id><snippet>.json</snippet></ROW><ROW><id>20001283</id><snippet>None</snippet></ROW><ROW><id>20001283</id><snippet>Request</snippet></ROW><ROW><id>20001283</id><snippet>application/json</snippet></ROW><ROW><id>20001283</id><snippet>None</snippet></ROW><ROW><id>20001597</id><snippet>animals.remove("penguin")
</snippet></ROW><ROW><id>20002580</id><snippet>bad</snippet></ROW><ROW><id>20002580</id><snippet>for bad in baddie[:]:    #Here is where my attempt of testing was.
            if bad &lt; 40:
                spawn = True
            if bad &gt;= 40:
                spawn = False
            if spawn == True:
                baddie.append(pygame.Rect(random.randint(0, WindowWidth - 40), random.randint(0,0), 40, 40))
</snippet></ROW><ROW><id>20002580</id><snippet>if len(baddie)&lt;40:
    baddie.append(pygame.Rect(random.randint(0, WindowWidth - 40), 
</snippet></ROW><ROW><id>20002580</id><snippet>[]</snippet></ROW><ROW><id>20002580</id><snippet>len(baddie)</snippet></ROW><ROW><id>20002667</id><snippet>encoded = unicodevalue.encode('utf8')
sliced = encoded[:1000]
</snippet></ROW><ROW><id>20002667</id><snippet>encoded = unicodevalue.encode('utf8')
sliced = encoded[:1000]

while True:
    try:
        sliced.decode('utf8')
    except UnicodeDecodeError:
        sliced = sliced[:-1]  # remove one invalid byte
    else:
        break
</snippet></ROW><ROW><id>20002706</id><snippet>"Content-Length"</snippet></ROW><ROW><id>20002749</id><snippet>AdminSite</snippet></ROW><ROW><id>20002749</id><snippet>AdminSite</snippet></ROW><ROW><id>20002749</id><snippet>AdminSite</snippet></ROW><ROW><id>20002749</id><snippet>autodiscover</snippet></ROW><ROW><id>20002780</id><snippet>update</snippet></ROW><ROW><id>20002780</id><snippet>_userstats.update(
    {"nick" : nick},
    {"$set" : {"online" : True}, "$inc" : {"joined" : 1}})
</snippet></ROW><ROW><id>20003097</id><snippet>re.search()</snippet></ROW><ROW><id>20003097</id><snippet>found = re.search(pattern, filenames[0])
</snippet></ROW><ROW><id>20003097</id><snippet>A-z</snippet></ROW><ROW><id>20003097</id><snippet>Z</snippet></ROW><ROW><id>20003097</id><snippet>a</snippet></ROW><ROW><id>20003097</id><snippet>pattern = "^[a-zA-Z]\d{2}$"
</snippet></ROW><ROW><id>20003097</id><snippet>{1}</snippet></ROW><ROW><id>20003097</id><snippet>&gt;&gt;&gt; re.search("^[a-zA-Z]\d{2}$", "S07").string
'S20'
&gt;&gt;&gt; re.search("^[a-zA-Z]\d{2}$", "S07E01 - Meet the New Boss.avi") is None
True
&gt;&gt;&gt; re.search("^[a-zA-Z]\d{2}$", "S07E01 - Meet the New Boss.avi") is None
True
&gt;&gt;&gt; re.search("[a-zA-Z]\d{2}", "S07E01 - Meet the New Boss.avi").string
'S07E01 - Meet the New Boss.avi'
</snippet></ROW><ROW><id>20003097</id><snippet>.group()</snippet></ROW><ROW><id>20003097</id><snippet>string</snippet></ROW><ROW><id>20003097</id><snippet>&gt;&gt;&gt; re.search("[a-zA-Z]\d{2}", "S07E01 - Meet the New Boss.avi").group()
'S07'
</snippet></ROW><ROW><id>20003097</id><snippet>&gt;&gt;&gt; re.search("[a-zA-Z](\d{2})", "S07E01 - Meet the New Boss.avi").group(1)
'07'
</snippet></ROW><ROW><id>20003097</id><snippet>.group(1)</snippet></ROW><ROW><id>20003170</id><snippet>http://.../?q=1%2B6
</snippet></ROW><ROW><id>20003170</id><snippet>ast.literal_eval(..)</snippet></ROW><ROW><id>20003368</id><snippet>int()</snippet></ROW><ROW><id>20003368</id><snippet>def isNum(data):
    try:
        int(data)
        return True
    except ValueError:
        return False
</snippet></ROW><ROW><id>20003368</id><snippet>True</snippet></ROW><ROW><id>20003572</id><snippet>neighbours</snippet></ROW><ROW><id>20003572</id><snippet>for i in range(1, ran_x-1):
    for j in range(1, ran_y-1):
        neighbours[i-1,j-1,:] = [matrix[i-1,j-1],matrix[i-1,j],matrix[i-1,j+1],matrix[i,j-1],matrix[i,j+1],matrix[i+1,j-1],matrix[i+1,j],matrix[i+1,j+1]]
</snippet></ROW><ROW><id>20003572</id><snippet>if</snippet></ROW><ROW><id>20003572</id><snippet>neighbours = np.empty((ran_x-2, ran_y-2, 8), int)

# bool array to extract outer ring from a 3x3 array:
b = np.array([[1,1,1],[1,0,1],[1,1,1]], bool)

for i in range(ran_x-2):
    for j in range(ran_y-2):
        neighbours[i,j,:] = matrix[i:i+3, j:j+3][b]
</snippet></ROW><ROW><id>20003617</id><snippet>choices</snippet></ROW><ROW><id>20003617</id><snippet>import Tkinter as tk

def select():
    title=var.get()
    print "selected string :"+title
    print "corresponing integer value :"+str(choices[Dic[title]])


choices = [1,2,3]
Dic={'title 1':0,'title 2':1,'title 3':2}
GUI = tk.Tk()
var = tk.StringVar(GUI)
var.set('title 1')
op=tk.OptionMenu(GUI, var, *Dic.keys())
op.pack(side='left',padx=20,pady=10)
bt=tk.Button(GUI,text='check value',command=select)
bt.pack(side='left',padx=20,pady=10)
GUI.mainloop()
</snippet></ROW><ROW><id>20003617</id><snippet>choices</snippet></ROW><ROW><id>20003822</id><snippet>super(Fraction, cls).__new__</snippet></ROW><ROW><id>20003822</id><snippet>.__new__</snippet></ROW><ROW><id>20003822</id><snippet>Fraction</snippet></ROW><ROW><id>20003822</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction.mro()
[&lt;class 'fractions.Fraction'&gt;, &lt;class 'numbers.Rational'&gt;, &lt;class 'numbers.Real'&gt;, &lt;class 'numbers.Complex'&gt;, &lt;class 'numbers.Number'&gt;, &lt;class 'object'&gt;]
</snippet></ROW><ROW><id>20003822</id><snippet>__new__</snippet></ROW><ROW><id>20003822</id><snippet>object.__new__</snippet></ROW><ROW><id>20003822</id><snippet>&gt;&gt;&gt; for cls in Fraction.mro()[1:]:
...     if '__new__' in cls.__dict__:
...         print(cls)
... 
&lt;class 'object'&gt;
</snippet></ROW><ROW><id>20003822</id><snippet>__new__</snippet></ROW><ROW><id>20003822</id><snippet>self</snippet></ROW><ROW><id>20003822</id><snippet>__new__</snippet></ROW><ROW><id>20003822</id><snippet>instance</snippet></ROW><ROW><id>20003822</id><snippet>this_new_object_we_just_created</snippet></ROW><ROW><id>20003822</id><snippet>self</snippet></ROW><ROW><id>20003822</id><snippet>Fraction</snippet></ROW><ROW><id>20003822</id><snippet>_numerator</snippet></ROW><ROW><id>20003822</id><snippet>_denominator</snippet></ROW><ROW><id>20003822</id><snippet>Fraction.__new__()</snippet></ROW><ROW><id>20003822</id><snippet>self</snippet></ROW><ROW><id>20003822</id><snippet>__new__</snippet></ROW><ROW><id>20003822</id><snippet>_numerator</snippet></ROW><ROW><id>20003822</id><snippet>_denominator</snippet></ROW><ROW><id>20003822</id><snippet>__init__</snippet></ROW><ROW><id>20003822</id><snippet>&gt;&gt;&gt; fraction = Fraction(3, 4)
&gt;&gt;&gt; fraction.numerator
3
&gt;&gt;&gt; fraction.numerator = 4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
&gt;&gt;&gt; fraction._numerator = 4
&gt;&gt;&gt; fraction.numerator
4
</snippet></ROW><ROW><id>20004076</id><snippet>if_form_cancel</snippet></ROW><ROW><id>20004076</id><snippet>edit</snippet></ROW><ROW><id>20004076</id><snippet>from werkzeug.routing import RequestRedirect

def if_form_cancel(destination='/'):
    try:
        if request.form['cancel']:
            flash(u'Operation canceled at user request')
            raise RequestRedirect(destination)
    except KeyError:
        pass
</snippet></ROW><ROW><id>20004076</id><snippet>form_cancel</snippet></ROW><ROW><id>20004076</id><snippet>def edit():
    ...
    form = EditForm(obj=user, csrf_enabled=False)
    if request.method == 'POST': 
        if form_cancel():
            return redirect(url_for('.index'))
        if form.validate():
            ...
            return redirect(url_for('.index'))
        return render_template('edit.html')
</snippet></ROW><ROW><id>20004076</id><snippet>validate_on_submit</snippet></ROW><ROW><id>20004264</id><snippet>term</snippet></ROW><ROW><id>20004264</id><snippet>Column</snippet></ROW><ROW><id>20004264</id><snippet>relationship</snippet></ROW><ROW><id>20004264</id><snippet>from sqlalchemy.orm import relationship

class Term(Base):
  __tablename__ = 'term'
  id = Column(Integer, primary_key=True)

class Node(Base):
  __tablename__ = 'node'
  id = Column(Integer, primary_key=True)
  term = Column(Integer, ForeignKey('term.id'))
  related_term = relationship(Term, backref="nodes")
</snippet></ROW><ROW><id>20004264</id><snippet>my_node.related_term</snippet></ROW><ROW><id>20004264</id><snippet>table_column</snippet></ROW><ROW><id>20004264</id><snippet>table</snippet></ROW><ROW><id>20004264</id><snippet>relationship</snippet></ROW><ROW><id>20004576</id><snippet>from dateutil.relativedelta import relativedelta

datetime.date.today() - relativedelta(years=24)
datetime.date(1989, 11, 15)
</snippet></ROW><ROW><id>20004576</id><snippet>date_of_birth</snippet></ROW><ROW><id>20004576</id><snippet>dateutil</snippet></ROW><ROW><id>20004576</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>20004576</id><snippet>qs = Account.objects.all()

qs = [account for account in qs if account.age() &gt; 24]
</snippet></ROW><ROW><id>20004896</id><snippet>&gt;&gt;&gt;import subprocess
&gt;&gt;&gt;cmd = ["""/bin/grep 'Rec' /var/log/sy.log | /bin/grep e612r2246s768 | /bin/grep 2013-07 | /bin/grep -oh "'.*'" | /usr/bin/wc -c"""]
&gt;&gt;&gt;print subprocess.check_output(cmd,shell=True)
&gt;&gt;&gt;365829
</snippet></ROW><ROW><id>20004973</id><snippet>if</snippet></ROW><ROW><id>20004973</id><snippet>if__name__</snippet></ROW><ROW><id>20004973</id><snippet>IndentationError</snippet></ROW><ROW><id>20004973</id><snippet>maxArray</snippet></ROW><ROW><id>20004973</id><snippet>NameError</snippet></ROW><ROW><id>20004973</id><snippet>max</snippet></ROW><ROW><id>20004973</id><snippet>max</snippet></ROW><ROW><id>20004973</id><snippet>#!/usr/bin/python
# My Name hw 11

def maxArray(a):
    max_ = a[0]
    for element in a:
        if element &gt; max_:
            max_ = element
    return max_
if __name__=="__main__":

    array = [3,1,6,2,4,9,0] 
    max_ = maxArray(array)
    print max_
</snippet></ROW><ROW><id>20004995</id><snippet>smallerRec</snippet></ROW><ROW><id>20004995</id><snippet>smallerRec</snippet></ROW><ROW><id>20004995</id><snippet>draw_rectangle()</snippet></ROW><ROW><id>20004995</id><snippet>rectangle_art</snippet></ROW><ROW><id>20004995</id><snippet>(center_x, center_y, width, height, level, myTurtle)</snippet></ROW><ROW><id>20004995</id><snippet>x,y</snippet></ROW><ROW><id>20004995</id><snippet>width,height</snippet></ROW><ROW><id>20004995</id><snippet>level</snippet></ROW><ROW><id>20004995</id><snippet>rectangle_art</snippet></ROW><ROW><id>20004995</id><snippet>level=2</snippet></ROW><ROW><id>20004995</id><snippet>Draw rectangle, level &gt; 0? yes its 2, draw rectangle at each of my corners
  At each level 2 corner:
  Draw rectangle, level &gt; 0? yes its 1, draw rectangle at each of my corners
    At each level 1 corner:
    Draw rectangle, level &gt; 0? no its 0, youre done.
</snippet></ROW><ROW><id>20004995</id><snippet>x,y</snippet></ROW><ROW><id>20004995</id><snippet>drawRectangle(x+width-(newWidth/2), y+height-(newHeight/2), newWidth, newHeight)
</snippet></ROW><ROW><id>20004995</id><snippet>x,y</snippet></ROW><ROW><id>20004995</id><snippet>drawRectangle(x+width, y+height, newWidth, newHeight)
</snippet></ROW><ROW><id>20005251</id><snippet>textResult</snippet></ROW><ROW><id>20005251</id><snippet>a</snippet></ROW><ROW><id>20005251</id><snippet>a.read()</snippet></ROW><ROW><id>20005251</id><snippet>with open(r'C:\Hubble\Cimage_Project\Index40Count.txt', 'r+') as a:
    contents = a.read() # read the entire file
    if contents != textResult:
        a.seek( 0 ) # seek back to the beginning of the file
        a.truncate() # truncate in case the old value was longer than the new value
        a.write(textResult)
        #then do a bunch more code
        print "not passing"
</snippet></ROW><ROW><id>20005318</id><snippet>num</snippet></ROW><ROW><id>20005318</id><snippet>while</snippet></ROW><ROW><id>20005318</id><snippet>if</snippet></ROW><ROW><id>20005318</id><snippet>if</snippet></ROW><ROW><id>20005318</id><snippet>def maxmin():
    minimum = None
    maximum = None
    num = None

    while True:
        num = input('Please enter a number, or -10 to stop: ')
        if num == -10:
            break

        if (minimum) is None or (num &lt; minimum):
            minimum = num
        if (maximum) is None or (num &gt; maximum):
            maximum = num
    print ("Maximum: ", maximum)
    print ("Minimum: ", minimum)

maxmin()
</snippet></ROW><ROW><id>20005422</id><snippet>for</snippet></ROW><ROW><id>20005422</id><snippet>g = 0 # index for age
n = 0 # index for name
st_names = [0] * 3
st_age = [0] * 3

for n in range(0, 3): # loop used in our book for loading arrays
    st_names[n] = raw_input("Enter Student name")

    st_age[n] = int(raw_input("Enter student age ")) # Change g to n, because that's the variable increment in the loop

print st_names
print st_age
</snippet></ROW><ROW><id>20005773</id><snippet>&gt;&gt;&gt; a = np.random.normal(0, 1, size=(5, 5, 5, 3))
&gt;&gt;&gt; s = a.sum(axis=(0, 1, 2))
</snippet></ROW><ROW><id>20005773</id><snippet>s</snippet></ROW><ROW><id>20005773</id><snippet>s</snippet></ROW><ROW><id>20005773</id><snippet>&gt;&gt;&gt; mean_norm_sq = 0
&gt;&gt;&gt; for n in xrange(1000):
...     a = np.random.normal(0, 1, size=(5, 5, 5, 3))
...     s = a.sum(axis=(0, 1, 2))
...     mean_norm_sq += np.sum(s**2)
... 
&gt;&gt;&gt; mean_norm_sq / 1000
374.47629802482447
</snippet></ROW><ROW><id>20005853</id><snippet>Blog</snippet></ROW><ROW><id>20005853</id><snippet>author = ndb.KeyProperty(required = True)
</snippet></ROW><ROW><id>20005853</id><snippet>blog = Blog(title="title", body="body", author=user.key)
</snippet></ROW><ROW><id>20005853</id><snippet>assert isinstance(user_key, ndb.Key)
blog = Blog(title="title", body="body", author=user_key)
</snippet></ROW><ROW><id>20005853</id><snippet>class User(ndb.Model):
    username = ndb.StringProperty(required = True)
    password = ndb.StringProperty(required = True)
    email = ndb.StringProperty()
    created = ndb.DateTimeProperty(auto_now_add = True)

class Blog(ndb.Model):
    title = ndb.StringProperty(required = True)
    body = ndb.TextProperty(required = True)
    created = ndb.DateTimeProperty(auto_now_add = True)
    author = ndb.KeyProperty(required = True)

def new_blog(author):
    """Creates a new blog post for the given author, which may be a ndb.Key or User instance"""
    if isinstance(author, User):
        author_key = author.key
    elif isinstance(author, ndb.Key):
        assert author.kind() == User._get_kind()  # verifies the provided ndb.Key is the correct kind.
        author_key = author

    blog = Blog(title="title", body="body", author=author_key)
    return blog
</snippet></ROW><ROW><id>20005888</id><snippet>def __init__(self, parent):
    """docstring for __"""
    wx.Panel.__init__(self, parent)
    self.frame = parent

    self.main_sizer = wx.BoxSizer(wx.VERTICAL)
    self.widget_sizer = wx.BoxSizer(wx.VERTICAL)

    self.text_object = wx.StaticText(self, -1, 'Example')
    self.button_object = wx.Button(self, -1, 'QUIT')
    self.button_object.Bind(wx.EVT_BUTTON, self.on_quit)

    self.widget_sizer.Add(self.text_object, 0)
    self.widget_sizer.Add(self.button_object, 0)

    self.main_sizer.Add(self.widget_sizer, 0)


    def on_quit(self, event):
        """docstring for on"""
        self.Close()
</snippet></ROW><ROW><id>20005888</id><snippet>def __init__(self, parent):
    """docstring for __"""
    wx.Panel.__init__(self, parent)
    self.frame = parent

    self.main_sizer = wx.BoxSizer(wx.VERTICAL)
    self.widget_sizer = wx.BoxSizer(wx.VERTICAL)

    self.text_object = wx.StaticText(self, -1, 'Example')
    self.button_object = wx.Button(self, -1, 'QUIT')
    self.button_object.Bind(wx.EVT_BUTTON, self.on_quit)

    self.widget_sizer.Add(self.text_object, 0)
    self.widget_sizer.Add(self.button_object, 0)

    self.main_sizer.Add(self.widget_sizer, 0)


def on_quit(self, event):
    """docstring for on"""
    self.Close()
</snippet></ROW><ROW><id>20006133</id><snippet>rpy2</snippet></ROW><ROW><id>20006133</id><snippet>Anaconda</snippet></ROW><ROW><id>20006133</id><snippet>Python</snippet></ROW><ROW><id>20006133</id><snippet>rpy2</snippet></ROW><ROW><id>20006133</id><snippet>Anaconda</snippet></ROW><ROW><id>20006133</id><snippet>rpy2</snippet></ROW><ROW><id>20006133</id><snippet>Anaconda</snippet></ROW><ROW><id>20006133</id><snippet>bin</snippet></ROW><ROW><id>20006133</id><snippet>rpy2</snippet></ROW><ROW><id>20006133</id><snippet>Anaconda python</snippet></ROW><ROW><id>20006133</id><snippet>python</snippet></ROW><ROW><id>20006133</id><snippet>rpy2</snippet></ROW><ROW><id>20006133</id><snippet>bash</snippet></ROW><ROW><id>20006133</id><snippet>/Users/YOUR_USER_NAME/anaconda/bin/</snippet></ROW><ROW><id>20006133</id><snippet>user-Mac-Pro:bin user$ conda install rpy2
</snippet></ROW><ROW><id>20006133</id><snippet>Conda package not available for rpy2, attempting to install via pip
Downloading/unpacking rpy2
 Downloading rpy2-2.3.8.tar.gz (185kB): 185kB downloaded
 Running setup.py egg_info for package rpy2
</snippet></ROW><ROW><id>20006133</id><snippet>R</snippet></ROW><ROW><id>20006133</id><snippet>R</snippet></ROW><ROW><id>20006289</id><snippet>from collections import Counter
with open('full_megalog.txt') as f:
    data = [d.split() for d in f]

sum1, sum2 = Counter(), Counter()

for d in data:
    sum1[d[0]] += int(d[1])
    sum2[d[0]] += int(d[2])

for date_ip in sum1.keys():
    print date_ip, sum1[date_ip], sum2[date_ip]
</snippet></ROW><ROW><id>20006629</id><snippet>$ egrep hostmac filename.txt | sort -u | wc -l
</snippet></ROW><ROW><id>20006682</id><snippet>titles_c</snippet></ROW><ROW><id>20006682</id><snippet>&gt;&gt;&gt; from nameparser import HumanName
&gt;&gt;&gt; from nameparser.constants import TITLES
&gt;&gt;&gt; titles_c = TITLES | set("assistant professor".split())
&gt;&gt;&gt; hn = HumanName(titles_c=titles_c)
&gt;&gt;&gt; hn.full_name = "Assistant Professor Darwin Mittenchops"
&gt;&gt;&gt; hn
&lt;HumanName : [
    Title: 'Assistant Professor' 
    First: 'Darwin' 
    Middle: '' 
    Last: 'Mittenchops' 
    Suffix: ''
]&gt;
</snippet></ROW><ROW><id>20006902</id><snippet>plt.bar(np.arange(10),np.random.randint(0,1000,10)) 
plt.ylim([0, 1000])
</snippet></ROW><ROW><id>20006954</id><snippet>df_data['vals'] = df_data['vals'].map(lambda x: '%2.1f' % x)

df_data.to_csv(outfile, index=False, header=False, float_format='%11.6f')
</snippet></ROW><ROW><id>20006962</id><snippet>self.button</snippet></ROW><ROW><id>20006962</id><snippet>self.button2</snippet></ROW><ROW><id>20007073</id><snippet>lessThan()</snippet></ROW><ROW><id>20007073</id><snippet>class MySortFilter(QSortFilterProxyModel):
   def lessThan(self,left,right):   
       leftData = self.sourceModel().data(left)
       rightData = self.sourceModel().data(right)
       leftPath = os.path.abspath(str(leftData.toUrl().toLocalFile() ))
       rightPath = os.path.abspath(str(rightData.toUrl().toLocalFile() ))
       return (not os.path.isdir(leftPath),leftPath)&lt; (not os.path.isdir(rightPath),rightPath )

#now use this class instead of QSortFilterProxyModel
</snippet></ROW><ROW><id>20007239</id><snippet>Action</snippet></ROW><ROW><id>20007239</id><snippet>Event</snippet></ROW><ROW><id>20007239</id><snippet>Action</snippet></ROW><ROW><id>20007239</id><snippet>Item.actions -&gt; Action</snippet></ROW><ROW><id>20007239</id><snippet>days_ago</snippet></ROW><ROW><id>20007239</id><snippet>Action</snippet></ROW><ROW><id>20007239</id><snippet>Item.actions</snippet></ROW><ROW><id>20007239</id><snippet>Action</snippet></ROW><ROW><id>20007239</id><snippet>self</snippet></ROW><ROW><id>20007239</id><snippet>object_session(self).query(func.datediff(...)).select_from(Action).with_parent(self).scalar()</snippet></ROW><ROW><id>20007239</id><snippet>session.query(Item).join(Item.actions).filter(Item.days_ago == xyz)</snippet></ROW><ROW><id>20007320</id><snippet>self.request.close()</snippet></ROW><ROW><id>20007320</id><snippet>while True:</snippet></ROW><ROW><id>20007457</id><snippet>a=3
</snippet></ROW><ROW><id>20007457</id><snippet>var_name = ["a","b","c"]
var_value = [3,4,5]
for name,value in zip(var_name,var_value):
   exec("%s=%d" % (name,value))
print a,b,c
</snippet></ROW><ROW><id>20007457</id><snippet>3,4,5</snippet></ROW><ROW><id>20007570</id><snippet>if os.path.exists(filename):
    length = os.path.getsize(filename)
    client.send(convert_to_bytes(length)) # has to be 4 bytes
    with open(filename, 'r') as infile:
        d = infile.read(1024)
        while d:
            client.send(d)
            d = infile.read(1024)
</snippet></ROW><ROW><id>20007570</id><snippet>client_socket.send(command)

if command.strip().startswith("get"):
    size = client_socket.recv(4) # assuming that the size won't be bigger then 1GB
    size = bytes_to_number(size)
    current_size = 0
    buffer = b""
    while current_size &lt; size:
        data = client_socket.recv(socksize)
        if not data:
            break
        if len(data) + current_size &gt; size:
            data = data[:size-current_size] # trim additional data
        buffer += data
        # you can stream here to disk
        current_size += len(data)
    # you have entire file in memory
</snippet></ROW><ROW><id>20007570</id><snippet>convert_to_bytes</snippet></ROW><ROW><id>20007570</id><snippet>bytes_to_number</snippet></ROW><ROW><id>20007570</id><snippet>def convert_to_bytes(no):
    result = bytearray()
    result.append(no &amp; 255)
    for i in range(3):
        no = no &gt;&gt; 8
        result.append(no &amp; 255)
    return result

def bytes_to_number(b):
    # if Python2.x
    # b = map(ord, b)
    res = 0
    for i in range(4):
        res += b[i] &lt;&lt; (i*8)
    return res
</snippet></ROW><ROW><id>20007611</id><snippet>urlopen()</snippet></ROW><ROW><id>20007611</id><snippet>Traceback (most recent call last):
  File "company_data_v3.py", line 23, in &lt;module&gt;
    page = urllib2.urlopen("http://finance.yahoo.com/q/ks?s="+newsymbolslist[i] +"%20Key%20Statistics").read()
</snippet></ROW><ROW><id>20007611</id><snippet>while i&lt;len(newsymbolslist):
    try:
        page = urllib2.urlopen("http://finance.yahoo.com/q/ks?s="+newsymbolslist[i] +"%20Key%20Statistics").read()
    except urllib2.HTTPError:
        continue
</snippet></ROW><ROW><id>20007629</id><snippet>&gt;&gt;&gt; np.sum(a,axis=1)
array([12, 15, 18],
      [39, 42, 45],
      [66, 69, 72]])
</snippet></ROW><ROW><id>20007629</id><snippet>&gt;&gt;&gt; print np.sum(np.sum(a, axis=0), axis=1)
[99, 126, 153]
</snippet></ROW><ROW><id>20007822</id><snippet>import re
from collections import Counter

#get the length of the guess - an int number  between 4(included) to 6(included)
secretL = input()
#get the base of the guess - an int number  between 6(included) to 10(included)
secretB = input()
#get the guess
secret = raw_input()

# Check if the secret input uses a digit greater than the base value
# You can use the check on the next line as well. It can be made faster
# too by using search in place of findall.
# if len(re.findall(r"[^0-" + str(secretB) + r" ]+", secret)):
if sum((i!=" " and int(i) &gt; secretB) for i in secret) &gt; 0:
  print("Error")
  quit()

secretNumbers = map(int, secret.split())
guess = raw_input()
guessNumbers = map(int, guess.split())

# Count the bulls by iterating over the two lists simultaneously
bulls = sum(i==j for i, j in zip(secretNumbers, guessNumbers))

# Remove the bulls before counting the cows
secretNumbers, guessNumbers = zip(*((x,y) for x,y in zip(secretNumbers, guessNumbers) if x!=y))

# Cows are defined as the elements present in both the guess and the secret
# but not in the right position.
# If we ignore duplicates, this is the way to go about it.
cows = len(set(secretNumbers) &amp; set(guessNumbers))

## If we count [1,1,2,4] and [5,3,1,1] to have 2 cows, this is how it should be:
#counter = Counter(secretNumbers) &amp; Counter(guessNumbers)
#cows = sum(counter.itervalues())

print(str(bulls) + " BULLS " + str(cows) + " COWS")
</snippet></ROW><ROW><id>20007822</id><snippet>if sum(i &gt; secretB for i in secretNumbers) &gt; 0:</snippet></ROW><ROW><id>20007822</id><snippet>[ i &gt; secretB for i in secretNumbers]</snippet></ROW><ROW><id>20007822</id><snippet>[1,2,7,2,5]</snippet></ROW><ROW><id>20007822</id><snippet>[False, False, True, False, False]</snippet></ROW><ROW><id>20007822</id><snippet>sum([1,2,3,4])</snippet></ROW><ROW><id>20007822</id><snippet>True</snippet></ROW><ROW><id>20007822</id><snippet>True</snippet></ROW><ROW><id>20007822</id><snippet>bool</snippet></ROW><ROW><id>20007822</id><snippet>int</snippet></ROW><ROW><id>20007822</id><snippet>&gt;&gt;&gt;issubclass(bool, int)
True
</snippet></ROW><ROW><id>20007822</id><snippet>sum(i &gt; secretB for i in secretNumbers)</snippet></ROW><ROW><id>20007836</id><snippet>for line in self.twistedTcpClient.readLines():
    process_line(line) ...
</snippet></ROW><ROW><id>20007836</id><snippet>twisted.protocols.basic.LineReceiver</snippet></ROW><ROW><id>20007836</id><snippet>class MyProtocol(LineReceiver):
    ...
    def lineReceived(self, line):
        process_line(line) ...
</snippet></ROW><ROW><id>20007836</id><snippet>lineReceived</snippet></ROW><ROW><id>20007836</id><snippet>for line in self.twistedTcpClient.readLines():
    process_line(line) ...
</snippet></ROW><ROW><id>20007836</id><snippet>twistedTcpClient.readLines()</snippet></ROW><ROW><id>20007836</id><snippet>@inlineCallbacks
def my_func():
    while True:
        try:
            line = yield self.twistedTcpClient.getNextLine()
        except StopIteration:
            break

        process_line(line) ...
</snippet></ROW><ROW><id>20007836</id><snippet>twistedTcpClient</snippet></ROW><ROW><id>20007836</id><snippet>Deferreds</snippet></ROW><ROW><id>20007836</id><snippet>class MyProtocol(LineReceiver):
    ...
    def getNextLine(self):
        self.defer_given_out = Deferred()

    def lineReceived(self, line):
        self.defer_given_out.callback(line)

    def connectionLost(self):
        self.defer_given_out.errback(StopIteration())
</snippet></ROW><ROW><id>20008003</id><snippet>with open( file.txt, 'r') as f:
     for i, line in enumerate(f.readlines(), 0):
          if i &gt;= 6:
              print line
</snippet></ROW><ROW><id>20008003</id><snippet>with open( file.txt, 'r') as f:
     for line in f.readlines()[6:]:
          print line
</snippet></ROW><ROW><id>20008039</id><snippet>mylist = [3,5,7,8,4,6,3,8,7]
for index in range(len(mylist)):
    print 'number '+str(mylist[index])+' has index '+str(index)
</snippet></ROW><ROW><id>20008458</id><snippet>root.add_idle</snippet></ROW><ROW><id>20008458</id><snippet>    self.avhplot.hexbin(heights, ages, cmap = matplotlib.cm.jet,
                                        mincnt = 1, bins = "log", extent = self.avhExtent)
    self.avhplot.hexbin(heights, weights, cmap = matplotlib.cm.jet,
                                        mincnt = 1, bins = "log", extent = self.wvhExtent)
</snippet></ROW><ROW><id>20008665</id><snippet>class Company(models.Model):
    ...
    def save(self, *args, **kw):
       if self.employees is None:
            self.employees = self.DEFAULT_EMPLOYEES
       super(Company, self).save(*args, **kw)
</snippet></ROW><ROW><id>20008665</id><snippet>DEFAULT_EMPLOYEES</snippet></ROW><ROW><id>20008673</id><snippet>Unable to execute command or shell on remote system: Failed to Execute process</snippet></ROW><ROW><id>20008673</id><snippet>dir</snippet></ROW><ROW><id>20008673</id><snippet>dir.exe</snippet></ROW><ROW><id>20008673</id><snippet>PATH</snippet></ROW><ROW><id>20008673</id><snippet>dir</snippet></ROW><ROW><id>20008673</id><snippet>cmd.exe</snippet></ROW><ROW><id>20008673</id><snippet>dir</snippet></ROW><ROW><id>20008673</id><snippet>cmd /c dir
</snippet></ROW><ROW><id>20008673</id><snippet>cmd /c dir</snippet></ROW><ROW><id>20008673</id><snippet>dir</snippet></ROW><ROW><id>20008673</id><snippet>dir</snippet></ROW><ROW><id>20008765</id><snippet>new_list = [new_list.append(stemmer.stem(word)) for word in data]</snippet></ROW><ROW><id>20008765</id><snippet>new_list = [stemmer.stem(word) for word in data]
# or 
# new_data = map(stemmer.stem, data) # returns a map object
</snippet></ROW><ROW><id>20008765</id><snippet>new_list</snippet></ROW><ROW><id>20008765</id><snippet>new_list.append</snippet></ROW><ROW><id>20008873</id><snippet>t</snippet></ROW><ROW><id>20008873</id><snippet>&gt;&gt;&gt; a=np.array([1,2])
&gt;&gt;&gt; b=np.array([3,4])
&gt;&gt;&gt; t=np.linspace(0,1,4)
&gt;&gt;&gt; t[..., None] * a  + (1 - t[..., None]) * b
array([[ 3.        ,  4.        ],
       [ 2.33333333,  3.33333333],
       [ 1.66666667,  2.66666667],
       [ 1.        ,  2.        ]])
</snippet></ROW><ROW><id>20008977</id><snippet>&gt;&gt;&gt; page_txt = urllib2.urlopen("http://b-line.binghamton.edu/events/9305").read(
&gt;&gt;&gt; soup = bs4.BeautifulSoup(pg.split("&lt;h1&gt;",1)[-1])
&gt;&gt;&gt; print soup.find_all("p")[:3]
</snippet></ROW><ROW><id>20009129</id><snippet>new_orange=Orange(...input parameters...)
new_witch=Witch(...input parameters...)
new_witch.position=new_orange.position-new_witch.position
</snippet></ROW><ROW><id>20009129</id><snippet>new_witch.position=tuple(map(lambda x,y:x-y,new_orange.position,new_witch.position))
</snippet></ROW><ROW><id>20009303</id><snippet>print</snippet></ROW><ROW><id>20009303</id><snippet>print(c.name)
</snippet></ROW><ROW><id>20009303</id><snippet>class Character:</snippet></ROW><ROW><id>20009303</id><snippet>class Character:
    def __init__(self, name, hp):
        self.name = name
        self.hp = hp

c = Character("Test", 5)
print(c.name)
print(c.hp)
</snippet></ROW><ROW><id>20009381</id><snippet>DatagramProtocol</snippet></ROW><ROW><id>20009381</id><snippet>Protocol</snippet></ROW><ROW><id>20009381</id><snippet>DatagramProtocol</snippet></ROW><ROW><id>20009381</id><snippet>Protocol</snippet></ROW><ROW><id>20009381</id><snippet>from twisted.internet.protocol import Protocol, Factory, DatagramProtocol
from twisted.internet import reactor

class TCPServer(Protocol):
    def connectionMade(self):
        self.port = reactor.listenUDP(8000, UDPServer(self))

    def connectionLost(self, reason):
        self.port.stopListening()


class UDPServer(DatagramProtocol):
    def __init__(self, stream):
        self.stream = stream

    def datagramReceived(self, datagram, address):
        self.stream.transport.write(datagram)


def main():
    f = Factory()
    f.protocol = TCPServer
    reactor.listenTCP(8000, f)
    reactor.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20009381</id><snippet>UDPServer</snippet></ROW><ROW><id>20009381</id><snippet>TCPServer</snippet></ROW><ROW><id>20009381</id><snippet>TCPServer</snippet></ROW><ROW><id>20009381</id><snippet>UDPServer</snippet></ROW><ROW><id>20009381</id><snippet>UDPServer</snippet></ROW><ROW><id>20009381</id><snippet>UDPServer</snippet></ROW><ROW><id>20009409</id><snippet>def print_quiz_averages(student_quiz_scores,the_averages):                                                  
  for i, average in enumerate(the_averages):                                                              
    print "The average for quiz",i+1,"is:",i
    for student, student_data in student_quiz_scores.iteritems():                                       
      if student_data[i]&gt;average:
          print("{:s} did {:.2f}% higher than average\n".format( student, student_data[i]-average))
      else:
          print("{:s} did {:.2f}% lower than average\n".format( student, -student_data[i]+average))
</snippet></ROW><ROW><id>20009461</id><snippet>Thread</snippet></ROW><ROW><id>20009461</id><snippet>QThread</snippet></ROW><ROW><id>20009461</id><snippet>threading.Thread</snippet></ROW><ROW><id>20009461</id><snippet>QThread</snippet></ROW><ROW><id>20009461</id><snippet>run</snippet></ROW><ROW><id>20009461</id><snippet>self</snippet></ROW><ROW><id>20009461</id><snippet>self</snippet></ROW><ROW><id>20009506</id><snippet>&gt;&gt;&gt; df.apply(lambda x: combine(x['MEETING DATE'], x['MEETING TIME']), axis=1)
0   2013-12-16 14:00:00
1   2013-12-12 13:00:00
</snippet></ROW><ROW><id>20009527</id><snippet>TorrentList</snippet></ROW><ROW><id>20009527</id><snippet>None</snippet></ROW><ROW><id>20009527</id><snippet>matchobj = fnmatch.filter(TorrentList,item)
</snippet></ROW><ROW><id>20009527</id><snippet>if TorrentList is not None:
    matchobj = fnmatch.filter(TorrentList,item)
else:
    # Throw whatever error/exception you need
</snippet></ROW><ROW><id>20009564</id><snippet>array1[array2 == 1] = 0
</snippet></ROW><ROW><id>20009587</id><snippet>.app</snippet></ROW><ROW><id>20009587</id><snippet>IDLE.app</snippet></ROW><ROW><id>20009587</id><snippet>sys.path</snippet></ROW><ROW><id>20009587</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20009587</id><snippet>/usr/local/bin/idle2.7</snippet></ROW><ROW><id>20009663</id><snippet>import random
with open('/etc/passwd') as f:
    print (random.choice(list(f)))
</snippet></ROW><ROW><id>20009663</id><snippet>with open('/etc/passwd') as f:
    print (list(f)[i])
</snippet></ROW><ROW><id>20009663</id><snippet>import itertools
with open('/etc/passwd') as f:
    print (next(itertools.islice(f, i, i+1)))
</snippet></ROW><ROW><id>20009663</id><snippet>linecache.getline('/etc/password', i)</snippet></ROW><ROW><id>20009664</id><snippet>for x in y or z:
</snippet></ROW><ROW><id>20009664</id><snippet>for x in (y or z):
</snippet></ROW><ROW><id>20009664</id><snippet>y</snippet></ROW><ROW><id>20009664</id><snippet>True</snippet></ROW><ROW><id>20009664</id><snippet>z</snippet></ROW><ROW><id>20009664</id><snippet>&gt;&gt;&gt; y = [1, 2, 3]
&gt;&gt;&gt; z = [4, 5, 6]
&gt;&gt;&gt; for x in y or z:
...     print x
...
1
2
3
&gt;&gt;&gt; y = [] # Empty lists evaluate to False in Python
&gt;&gt;&gt; for x in y or z:
...     print x
...
4
5
6
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20009756</id><snippet>import requests

response = requests.get('http://my-ulr.com')
print response.status_code
</snippet></ROW><ROW><id>20009799</id><snippet>[x for x in list1 if x not in list2] #O(n*m)
</snippet></ROW><ROW><id>20009799</id><snippet>[x for x in list1 if x not in set(list2)] #O(n*m) with extra overhead
</snippet></ROW><ROW><id>20009799</id><snippet>s = set(list2) #O(m)
[x for x in list1 if x not in s] #O(n)
</snippet></ROW><ROW><id>20009799</id><snippet>x in list2</snippet></ROW><ROW><id>20009799</id><snippet>set(list2)</snippet></ROW><ROW><id>20009799</id><snippet>in</snippet></ROW><ROW><id>20009799</id><snippet>set</snippet></ROW><ROW><id>20009881</id><snippet>is</snippet></ROW><ROW><id>20009881</id><snippet>==</snippet></ROW><ROW><id>20009881</id><snippet>if args.server:
    print "server given"
    print args.server
    if args.server == "serverA":
            print "server is " + args.server
    elif args.server == "serverB":
            print "server is " + args.server
    else:
            sys.stderr.write("error, invalid server given\n")
            sys.exit()
</snippet></ROW><ROW><id>20009891</id><snippet>f1=open('first.txt','r')
f2=open('second.txt', 'r')
new_file=open("new_text.txt", 'w')
for line in f1:
    new_line=line +"...." + f2.readline()
    new_file.write(new_line,"\n")
</snippet></ROW><ROW><id>20009978</id><snippet>def list(self, *args, **kwargs):
    prefix = kwargs.get('prefix', args[0] if args else '')
</snippet></ROW><ROW><id>20010131</id><snippet>libraries = ['json-c', 'mongoc'],` 
</snippet></ROW><ROW><id>20010131</id><snippet>libraries = ['json', 'mongoc'],
</snippet></ROW><ROW><id>20010131</id><snippet>-lmongoc -ljson</snippet></ROW><ROW><id>20010131</id><snippet>-lmongoc -ljson-c</snippet></ROW><ROW><id>20010131</id><snippet>-</snippet></ROW><ROW><id>20010131</id><snippet>json</snippet></ROW><ROW><id>20010131</id><snippet>json-c</snippet></ROW><ROW><id>20010131</id><snippet>ldd &lt;library_name&gt;.so
</snippet></ROW><ROW><id>20010373</id><snippet>label1=Label(about, text="Creator name is Emek :)")
</snippet></ROW><ROW><id>20010511</id><snippet>with open(inpath) as infile, open(outpath, 'w') as outfile:
    for line in infile:
        a, b = map(float, line.split())
        total = a + b
        outfile.write('{} {} {}\n'.format(a, b, total))
</snippet></ROW><ROW><id>20010511</id><snippet>import csv
with open(inpath) as infile, open(outpath, 'w') as out file:
    incsv = csv.reader(infile, delimiter=' ')
    outcsv = csv.writer(outfile, delimiter=' ')
    for row in incsv:
        a, b = map(float, row)
        total = a + b
        outfile.writerow((a, b, total))
</snippet></ROW><ROW><id>20010726</id><snippet>global</snippet></ROW><ROW><id>20010726</id><snippet>a = 1
</snippet></ROW><ROW><id>20010726</id><snippet>a</snippet></ROW><ROW><id>20010726</id><snippet>def f():
    global a
    a = 1
f()
</snippet></ROW><ROW><id>20010810</id><snippet>writer</snippet></ROW><ROW><id>20010810</id><snippet>writerow</snippet></ROW><ROW><id>20010810</id><snippet>import csv
with open("out.dat", "wb") as myfile:
    writer = csv.writer(myfile, delimiter=" ", quoting=csv.QUOTE_NONE)
    var1, var2, var3 = 3.14, 2.1728, "Fred"
    writer.writerow([var1, var2, var3])
</snippet></ROW><ROW><id>20010810</id><snippet>~/coding$ cat out.dat
3.14 2.1728 Fred
</snippet></ROW><ROW><id>20010912</id><snippet>imshow</snippet></ROW><ROW><id>20010912</id><snippet>im = plt.imshow(..., interpolation='none')
</snippet></ROW><ROW><id>20010912</id><snippet>'nearest'</snippet></ROW><ROW><id>20011077</id><snippet>line.replace</snippet></ROW><ROW><id>20011077</id><snippet>line</snippet></ROW><ROW><id>20011077</id><snippet>converted</snippet></ROW><ROW><id>20011077</id><snippet>for line in file:
    if '0' in line:
        converted.write(line.replace('0', 'ZERO'))
    elif '1' in line:
        converted.write(line.replace('1', 'ZERO'))
    else:
        return
</snippet></ROW><ROW><id>20011077</id><snippet>return</snippet></ROW><ROW><id>20011077</id><snippet>0</snippet></ROW><ROW><id>20011077</id><snippet>1</snippet></ROW><ROW><id>20011077</id><snippet>0</snippet></ROW><ROW><id>20011077</id><snippet>1</snippet></ROW><ROW><id>20011077</id><snippet>0</snippet></ROW><ROW><id>20011077</id><snippet>close</snippet></ROW><ROW><id>20011077</id><snippet>with open(fileName, "r") as file, open('converted.txt', 'w') as converted:
    for line in file:
        line = line.replace("0", "ZERO")
        line = line.replace("1", "ONE")
        converted.write(line)
</snippet></ROW><ROW><id>20011077</id><snippet>replace</snippet></ROW><ROW><id>20011077</id><snippet>"0" in line</snippet></ROW><ROW><id>20011077</id><snippet>replace</snippet></ROW><ROW><id>20011077</id><snippet>if</snippet></ROW><ROW><id>20011077</id><snippet>return</snippet></ROW><ROW><id>20011077</id><snippet>else</snippet></ROW><ROW><id>20011077</id><snippet>with</snippet></ROW><ROW><id>20011077</id><snippet>close</snippet></ROW><ROW><id>20011077</id><snippet>file</snippet></ROW><ROW><id>20011077</id><snippet>converted</snippet></ROW><ROW><id>20011221</id><snippet>for page in data["query"]["pages"].values():
    title = page["title"]
    langlinks = page["langlinks"]
    # do something with langlinks...
</snippet></ROW><ROW><id>20011310</id><snippet>for n in numbers:</snippet></ROW><ROW><id>20011310</id><snippet>LIKE</snippet></ROW><ROW><id>20011310</id><snippet>%s</snippet></ROW><ROW><id>20011310</id><snippet>%</snippet></ROW><ROW><id>20011310</id><snippet>sql = "UPDATE analysen SET Nummer = %s WHERE Link like %s"
for n in numbers:
    cursor.execute(sql, [n, '%{}%'.format(n)])
</snippet></ROW><ROW><id>20011310</id><snippet>sql = "UPDATE analysen SET Nummer = %s WHERE Link like %s"
cursor.executemany(sql, ([n, '%{}%'.format(n)] for n in numbers)
</snippet></ROW><ROW><id>20011465</id><snippet>ogive</snippet></ROW><ROW><id>20011465</id><snippet>cumulative=True</snippet></ROW><ROW><id>20011465</id><snippet>plt.hist</snippet></ROW><ROW><id>20011465</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.normal(0, 1, 1000)

fig, (ax1, ax2) = plt.subplots(nrows=2)
ax1.hist(data)
ax2.hist(data, cumulative=True)
plt.show()
</snippet></ROW><ROW><id>20011465</id><snippet>numpy.histogram</snippet></ROW><ROW><id>20011465</id><snippet>plt.hist</snippet></ROW><ROW><id>20011465</id><snippet>plt.hist</snippet></ROW><ROW><id>20011465</id><snippet>counts</snippet></ROW><ROW><id>20011465</id><snippet>bins</snippet></ROW><ROW><id>20011465</id><snippet>np.histogram</snippet></ROW><ROW><id>20011465</id><snippet>plt.hist</snippet></ROW><ROW><id>20011465</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.normal(0, 1, 1000)

fig, ax = plt.subplots()
counts, bins, patches = plt.hist(data)

bin_centers = np.mean(zip(bins[:-1], bins[1:]), axis=1)
ax.plot(bin_centers, counts.cumsum(), 'ro-')

plt.show()
</snippet></ROW><ROW><id>20011586</id><snippet>\n</snippet></ROW><ROW><id>20011586</id><snippet>outputstring = '\n'.join([line for line in inputstring.splitlines() if line.strip()])
</snippet></ROW><ROW><id>20011586</id><snippet>newItem = newItem.replace(.., ..)
if newItem.strip():
    print newItem
    f.write('{}\n'.format(newItem))
</snippet></ROW><ROW><id>20011586</id><snippet>if</snippet></ROW><ROW><id>20011733</id><snippet>numpy.__init__</snippet></ROW><ROW><id>20011733</id><snippet>import</snippet></ROW><ROW><id>20011733</id><snippet>if __NUMPY_SETUP__</snippet></ROW><ROW><id>20011733</id><snippet>flask.ext</snippet></ROW><ROW><id>20011793</id><snippet># Try "gsub_ligature" as type.
font.addLookup("gsub", "gsub_ligature", (), (("dlig",(("latn",("dflt")),)),))
</snippet></ROW><ROW><id>20011793</id><snippet>font.generateFeatureFile("features.fea")
</snippet></ROW><ROW><id>20012061</id><snippet>unicode</snippet></ROW><ROW><id>20012061</id><snippet>readline</snippet></ROW><ROW><id>20012061</id><snippet>u"Name"</snippet></ROW><ROW><id>20012061</id><snippet>u"Näme"</snippet></ROW><ROW><id>20012061</id><snippet>completer = MyCompleter([item.encode('utf-8') for item in listOfItems])
</snippet></ROW><ROW><id>20012236</id><snippet>value_counts()</snippet></ROW><ROW><id>20012236</id><snippet>pd.value_counts(df.country)
</snippet></ROW><ROW><id>20012329</id><snippet>photoCollect()</snippet></ROW><ROW><id>20012329</id><snippet>print photoList
</snippet></ROW><ROW><id>20012329</id><snippet>sys.stdout</snippet></ROW><ROW><id>20012329</id><snippet>photoList</snippet></ROW><ROW><id>20012329</id><snippet>return photoList
</snippet></ROW><ROW><id>20012329</id><snippet>return</snippet></ROW><ROW><id>20012329</id><snippet>None</snippet></ROW><ROW><id>20012329</id><snippet>Response(None)</snippet></ROW><ROW><id>20012329</id><snippet>return</snippet></ROW><ROW><id>20012329</id><snippet>photoCollect()</snippet></ROW><ROW><id>20012387</id><snippet>pygame.time.get_ticks()</snippet></ROW><ROW><id>20012387</id><snippet>ticks = pygame.time.get_ticks()
if ticks - last_coin_ticks &gt; 1000: # new coin once per second
    last_coin_ticks = ticks
    # add a new coin
</snippet></ROW><ROW><id>20012436</id><snippet>top, left, bottom, right
topleft, bottomleft, topright, bottomright
midtop, midleft, midbottom, midright
center, centerx, centery
size, width, height
w, h
</snippet></ROW><ROW><id>20012436</id><snippet>rect.left</snippet></ROW><ROW><id>20012436</id><snippet>rect.top</snippet></ROW><ROW><id>20012444</id><snippet>pip</snippet></ROW><ROW><id>20012444</id><snippet>which pip-2.7</snippet></ROW><ROW><id>20012445</id><snippet>def getSubdigits(n, a, b):
    n %= 10 ** a
    n //= 10 ** b
    return n
</snippet></ROW><ROW><id>20012445</id><snippet>def getSubdigits2(n, a, b):
    l = int(math.ceil(math.log10(n)))
    n %= 10 ** (l - a)
    n //= 10 ** (l - b)
    return n
</snippet></ROW><ROW><id>20012445</id><snippet>def subDigits3(n, a, b):
    return int(str(n)[a:n])
</snippet></ROW><ROW><id>20012445</id><snippet>subDigits</snippet></ROW><ROW><id>20012445</id><snippet>subDigits2</snippet></ROW><ROW><id>20012445</id><snippet>subDigits3</snippet></ROW><ROW><id>20012623</id><snippet>key = 'Orange'</snippet></ROW><ROW><id>20012623</id><snippet>value = 'Orange fruit'</snippet></ROW><ROW><id>20012623</id><snippet>keywords = {'carrot': 'Green Vegetable.',
            'apple': 'Red or Green fruit.',
            'Orange': 'Orange fruit.'}

print ("Here is your Keyword")
import random
with open('keywords.txt') as f:
     a = random.choice(list(f))
     print("a =", keywords[a])
</snippet></ROW><ROW><id>20012654</id><snippet>connected_component_subgraphs</snippet></ROW><ROW><id>20012654</id><snippet>cur_graph = # whatever graph you're working with

if not nx.is_connected(cur_graph):
    # get a list of unconnected networks
    sub_graphs = nx.connected_component_subgraphs(cur_graph)

    main_graph = sub_graphs[0]

    # find the largest network in that list
    for sg in sub_graphs:
        if len(sg.nodes()) &gt; len(main_graph.nodes()):
            main_graph = sg

    cur_graph = main_graph
</snippet></ROW><ROW><id>20012746</id><snippet>def __unicode__(self):
    return u'{0}'.format(self.lname)
</snippet></ROW><ROW><id>20012845</id><snippet>def sumup(n):
    # this one is your emergency break. you return 1 if n gets below
    # a certain threshold, otherwise you'll end up with an infinite
    # loop
    if n &lt;= 1:
        return n
    # here is the recursion step, we return (n + "the sum to n+1")
    else:
        return n + sumup(n-1)

print(sumup(50))
</snippet></ROW><ROW><id>20012948</id><snippet>import first
print first.second.some_var
</snippet></ROW><ROW><id>20012948</id><snippet>second</snippet></ROW><ROW><id>20012948</id><snippet>first</snippet></ROW><ROW><id>20012948</id><snippet>from first import second
print second.some_var
</snippet></ROW><ROW><id>20012948</id><snippet>from first import *
</snippet></ROW><ROW><id>20012948</id><snippet>first</snippet></ROW><ROW><id>20013117</id><snippet>cgitb</snippet></ROW><ROW><id>20013277</id><snippet>import pandas as pd
import io
import numpy as np

data = r"""date,value
2009-12-02 20:00:00,0.6
2009-12-02 20:30:00,0.7
2009-12-03 01:00:00,0.7
2009-12-03 02:30:00,0.7
2009-12-03 11:30:00,0.7
2009-12-03 12:00:00,1.4
2009-12-03 12:30:00,1.3"""

df = pd.read_csv(io.StringIO(data), parse_dates=[0])
diff = df.date - df.date.shift(1)

sections = (diff &gt; np.timedelta64(2, "h")).astype(int).cumsum()

def f(s):
    return s.iloc[[0, -1]].reset_index(drop=True)

print df.date.groupby(sections).apply(f).unstack()
</snippet></ROW><ROW><id>20013277</id><snippet>                   0                   1
0 2009-12-02 20:00:00 2009-12-02 20:30:00
1 2009-12-03 01:00:00 2009-12-03 02:30:00
2 2009-12-03 11:30:00 2009-12-03 12:30:00
</snippet></ROW><ROW><id>20013356</id><snippet>contntDel</snippet></ROW><ROW><id>20013356</id><snippet>self.contentDelete</snippet></ROW><ROW><id>20013356</id><snippet>contentTabVBox</snippet></ROW><ROW><id>20013356</id><snippet>class MyRow(object):
    def __init__(self,contentTabVBox, rows):
        self.contentTabVBox = contentTabVBox
        self.my_list_of_rows = rows
        self.addContent()

    def addContent(self):
        # The code for your existing addContent method here

    def contntDel(self):
        # code from your existing contntDel function here
        # also add (if Ok button clicked):
            self.my_list_of_rows.remove(self)

class MyExistingClass(??whatever you have here normally??):
    def __init__(....):
        self.addContentButton = QtGui.QPushButton('Add')
        self.addContentButton.clicked.connect(self.addContent)
        self.my_list_of_rows = []

    def addContent(self):
        my_new_row = MyRow(self.contentTabVBox,self.my_list_of_rows)
        # You mustsave a reference to my_new_row in a list or else it will get garbage collected.
        self.my_list_of_rows.append(my_new_row)
</snippet></ROW><ROW><id>20013369</id><snippet>stop</snippet></ROW><ROW><id>20013369</id><snippet>stop</snippet></ROW><ROW><id>20013369</id><snippet>if not grades or grades.lower() == 'stop':
</snippet></ROW><ROW><id>20013369</id><snippet>zip</snippet></ROW><ROW><id>20013369</id><snippet>sorted</snippet></ROW><ROW><id>20013369</id><snippet>for grade, name in sorted(zip(grades, names)):
    print grade, name
</snippet></ROW><ROW><id>20013369</id><snippet>grades = [2, 3, 1]
names  = ["b", "c", "a"]
for grade, name in sorted(zip(grades, names)):
    print (grade, name)
</snippet></ROW><ROW><id>20013369</id><snippet>1 a
2 b
3 c
</snippet></ROW><ROW><id>20013510</id><snippet>ClassA</snippet></ROW><ROW><id>20013510</id><snippet>create_object</snippet></ROW><ROW><id>20013510</id><snippet>create_object()</snippet></ROW><ROW><id>20013510</id><snippet>class ClassA</snippet></ROW><ROW><id>20013510</id><snippet>ClassA</snippet></ROW><ROW><id>20013510</id><snippet>ClassA</snippet></ROW><ROW><id>20013510</id><snippet>ClassA</snippet></ROW><ROW><id>20013532</id><snippet>list1</snippet></ROW><ROW><id>20013532</id><snippet>main()</snippet></ROW><ROW><id>20013532</id><snippet>list1</snippet></ROW><ROW><id>20013532</id><snippet>list1</snippet></ROW><ROW><id>20013638</id><snippet>.config</snippet></ROW><ROW><id>20013638</id><snippet>from Tkinter import Tk, Button, Label

root = Tk()

label = Label(text="This is some text")
label.grid()

def click():
    label.config(text="This is different text")

Button(text="Change text", command=click).grid()

root.mainloop()
</snippet></ROW><ROW><id>20013638</id><snippet>label["text"] = "This is different text"
</snippet></ROW><ROW><id>20013638</id><snippet>label.configure(text="This is different text")
</snippet></ROW><ROW><id>20013739</id><snippet>pymongo.collection.find_and_modify</snippet></ROW><ROW><id>20013739</id><snippet>info = col.find_and_modify({'status':'new'}, {'$set':{'status':'in_progress'}})
if info:
    print info.get('_id')
</snippet></ROW><ROW><id>20013918</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20013918</id><snippet>sys.path</snippet></ROW><ROW><id>20013918</id><snippet>sys.path.append</snippet></ROW><ROW><id>20013918</id><snippet>import sys
sys.path.append('/some/very/useful/path')
</snippet></ROW><ROW><id>20013918</id><snippet>os.path.abspath</snippet></ROW><ROW><id>20013918</id><snippet> import os
 sys.path.append(os.path.join(
         os.path.abspath(os.path.dirname(__file__)), 'another/useful/directory'
 ))
</snippet></ROW><ROW><id>20014037</id><snippet>site</snippet></ROW><ROW><id>20014037</id><snippet>-S</snippet></ROW><ROW><id>20014037</id><snippet>site</snippet></ROW><ROW><id>20014037</id><snippet>~/.local</snippet></ROW><ROW><id>20014037</id><snippet>sysconfig</snippet></ROW><ROW><id>20014037</id><snippet>userbase</snippet></ROW><ROW><id>20014037</id><snippet>site</snippet></ROW><ROW><id>20014037</id><snippet>sysconfig</snippet></ROW><ROW><id>20014037</id><snippet>site</snippet></ROW><ROW><id>20014037</id><snippet>.pystartup</snippet></ROW><ROW><id>20014095</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [6,7,8,9,10]
&gt;&gt;&gt; c = b + a
&gt;&gt;&gt; c
[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]
&gt;&gt;&gt; b = set(b)
&gt;&gt;&gt; c = [x for x in c if x not in b]
&gt;&gt;&gt; c
[1, 2, 3, 4, 5]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20014095</id><snippet>set</snippet></ROW><ROW><id>20014140</id><snippet>poop.do_stuff()</snippet></ROW><ROW><id>20014140</id><snippet>try/except</snippet></ROW><ROW><id>20014140</id><snippet>try:
    poop.do_stuff()
except:
    poop.__del__()
finally:
    poop.__del__()
</snippet></ROW><ROW><id>20014140</id><snippet>class Thingamadoodle:
    def __init__(self, ...):
        ...

    #Methods and stuff
    def __enter__(self):
        self.conn = sqlite3.connect(...)
        return self
    def __exit__(self, errorType, errorValue, errorTrace):
        self.conn.close()
</snippet></ROW><ROW><id>20014140</id><snippet>with Thingmadoodle(args) as poop:
    #do things
</snippet></ROW><ROW><id>20014140</id><snippet>__exit__</snippet></ROW><ROW><id>20014342</id><snippet>'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': "/home/silight/Desktop/Python/django/first/db.sqlite3",
    }
}
</snippet></ROW><ROW><id>20014375</id><snippet>while((curLine = next(iroFile)):
</snippet></ROW><ROW><id>20014375</id><snippet>print "".join([x for x in open("x.txt") if '\\' in x])
</snippet></ROW><ROW><id>20014375</id><snippet>import sys
[sys.stdout.write(x) for x in open("x.txt") if '\\' in x]
</snippet></ROW><ROW><id>20014375</id><snippet>import sys
if sys.version_info.major &lt; 3:
    from __future__ import print_function
[print(x) for x in open("x.txt") if '\\' in x]
</snippet></ROW><ROW><id>20014509</id><snippet>socket.setdefaulttimeout(60)</snippet></ROW><ROW><id>20014509</id><snippet>socket.setdefaulttimeout</snippet></ROW><ROW><id>20014790</id><snippet>def part(xs):  # generate all partitions of xs
    xs = tuple(xs)
    n = len(xs)
    def extend(i):
        if i == n:
            yield ()
            return
        this = xs[i]
        for o in extend(i+1):
            yield ((this,),) + o
            for j, p in enumerate(o):
                yield o[:j] + ((this,) + p,) + o[j+1:]
    for o in extend(0):
        yield o

def upart(xs):  # weed out dups, and partitions with a piece bigger than 2
    from collections import Counter
    seen = []
    for p in part(xs):
        if all(len(chunk) &lt;= 2 for chunk in p):
            c = Counter(p)
            if c not in seen:
                seen.append(c)
                yield p

xs = [1,1,1,1,2,2]
for o in upart(xs):
    print o
</snippet></ROW><ROW><id>20014790</id><snippet>xs = [1,1,1,1,1,1]</snippet></ROW><ROW><id>20014790</id><snippet>((1,), (1,), (1,), (1,), (1,), (1,))
((1, 1), (1,), (1,), (1,), (1,))
((1, 1), (1, 1), (1,), (1,))
((1, 1), (1, 1), (1, 1))
</snippet></ROW><ROW><id>20014790</id><snippet>def custom_gen(xs):
    from collections import Counter
    assert all(1 &lt;= i &lt;= 2 for i in xs)
    # There are only 5 unique pieces that can be used:
    pieces = [(1,), (2,), (1, 1), (2, 2), (1, 2)]
    countpieces = {piece: Counter(piece) for piece in pieces}

    def extend(i, n1, n2, result):
        # try all ways of extending with pieces[i];
        # there are n1 1's and n2 2's remaining to be used
        assert n1 &gt;= 0 and n2 &gt;= 0
        if n1 == n2 == 0:
            yield result
            return
        if i == len(pieces):  # dead end
            return
        piece = pieces[i]
        c = countpieces[piece]
        p1 = c[1]
        p2 = c[2]
        # What's the most number of this piece we could
        # possibly take?
        assert p1 or p2
        if p1:
            if p2:
                most = min(n1 // p1, n2 // p2)
            else:
                most = n1 // p1
        else:
            most = n2 // p2
        for count in range(most + 1):
            for t in extend(i+1,
                            n1 - count * p1,
                            n2 - count * p2,
                            result + [piece] * count):
                yield t

    c = Counter(xs)
    for t in extend(0, c[1], c[2], []):
        yield t
</snippet></ROW><ROW><id>20014792</id><snippet>numpy</snippet></ROW><ROW><id>20014792</id><snippet>data_new</snippet></ROW><ROW><id>20014792</id><snippet>dtype</snippet></ROW><ROW><id>20014792</id><snippet>object</snippet></ROW><ROW><id>20014792</id><snippet>&gt;&gt;&gt; data
array([[  2.01202031e+13,   2.01202041e+13],
       [  5.20000000e+01,   5.30000000e+01],
       [ -2.20000000e+01,  -2.30000000e+01]])
&gt;&gt;&gt; data.dtype
dtype('float64')
&gt;&gt;&gt; data_new
array([[datetime.datetime(2012, 2, 3, 12, 30, 54),
        datetime.datetime(2012, 2, 4, 12, 30, 54)],
       [52.0, 53.0],
       [-22.0, -23.0]], dtype=object)
&gt;&gt;&gt; data_new.dtype
dtype('O')
</snippet></ROW><ROW><id>20014792</id><snippet>&gt;&gt;&gt; np.cos(data[1])
array([-0.16299078, -0.91828279])
&gt;&gt;&gt; np.cos(data_new[1])
Traceback (most recent call last):
  File "&lt;ipython-input-87-00101e4be00a&gt;", line 1, in &lt;module&gt;
    np.cos(data_new[1])
AttributeError: cos
</snippet></ROW><ROW><id>20014792</id><snippet>float</snippet></ROW><ROW><id>20014792</id><snippet>view</snippet></ROW><ROW><id>20014792</id><snippet>&gt;&gt;&gt; np.cos(data_new[1].astype(float))
array([-0.16299078, -0.91828279])
</snippet></ROW><ROW><id>20014792</id><snippet>pandas</snippet></ROW><ROW><id>20014894</id><snippet>encrypted.append((stringlist[i] + keylist[i]) % 29)
</snippet></ROW><ROW><id>20014894</id><snippet>i</snippet></ROW><ROW><id>20014894</id><snippet>for i in string:
</snippet></ROW><ROW><id>20014894</id><snippet>i</snippet></ROW><ROW><id>20015028</id><snippet>a = [2, 4, 6, 8, 10, 12]
b = [2, 4, 6, 8, 10]
print a[::2][::-1]
print b[::2][::-1]
</snippet></ROW><ROW><id>20015028</id><snippet>reversed</snippet></ROW><ROW><id>20015028</id><snippet>list</snippet></ROW><ROW><id>20015028</id><snippet>print list(reversed(a[::2]))
print list(reversed(b[::2]))
</snippet></ROW><ROW><id>20015028</id><snippet>[10, 6, 2]
[10, 6, 2]
</snippet></ROW><ROW><id>20015207</id><snippet>def mPos_h(cord):
    win32api.SetCursorPos((h_x + cord[0], h_y + cord[1])
</snippet></ROW><ROW><id>20015207</id><snippet>def mPos_h(cord):
    win32api.SetCursorPos((h_x + cord[0], h_y + cord[1]))
</snippet></ROW><ROW><id>20015243</id><snippet>some = 100

def callback1(res1):
    param2 = res1 + some
    func2(param2, callback2)
def callback2(res2):
    ...

param1 = 1
func1(param1, callback1)
</snippet></ROW><ROW><id>20015355</id><snippet>def main():
    def f():
        nonlocal x
        x = input()
        return x
    x = ''
    print("Sin(" + f() + ")")
</snippet></ROW><ROW><id>20015355</id><snippet>nonlocal</snippet></ROW><ROW><id>20015355</id><snippet>def main():
    def f(x):
        x[0] = input()
        return x[0]

    x = ['']
    print("Sin(" + f(x) + ")")
</snippet></ROW><ROW><id>20015386</id><snippet>re.match</snippet></ROW><ROW><id>20015386</id><snippet>dict.get</snippet></ROW><ROW><id>20015386</id><snippet>None</snippet></ROW><ROW><id>20015386</id><snippet>d.get('word')</snippet></ROW><ROW><id>20015386</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match('foo', None)
Traceback (most recent call last):
  File "&lt;ipython-input-43-c75223170494&gt;", line 1, in &lt;module&gt;
    re.match('foo', None)
  File "/usr/lib/python3.3/re.py", line 156, in match
    return _compile(pattern, flags).match(string)
TypeError: expected string or buffer
</snippet></ROW><ROW><id>20015386</id><snippet>==</snippet></ROW><ROW><id>20015386</id><snippet>if d.get('word') == 'positive':
   #do something
elif d.get('word') == 'negative'
   #do something else
</snippet></ROW><ROW><id>20015386</id><snippet>import sys, ast
for line in sys.stdin:
    d = ast.literal_eval(line)
    key = list(d)[0]            #dictionary with just one key.
    if d[key]['word'] == 'positive':
        print {'+1': d[key]}
    elif d[key]['word'] == 'negative':
        print {'-1': d[key]}
    elif d[key]['word'] == 'neutral':
        print {'0': d[key]}
</snippet></ROW><ROW><id>20015386</id><snippet>{'+1': {'char': False, 'score': -8.639, 'word': 'positive'}}
{'0': {'char': False, 'score': -5.6, 'word': 'neutral'}}
{'+1': {'char': False, 'score': -8.9, 'word': 'positive'}}
{'-1': {'char': True, 'score': -2.3, 'word': 'negative'}}
</snippet></ROW><ROW><id>20015421</id><snippet>for</snippet></ROW><ROW><id>20015421</id><snippet>for i in range(len(self.witches)):
    self.witches[i].draw(self.screen)
    if int(self.witches[i].position[1]) in range(250,350):
        for o in self.oranges:
            self.oranges.remove(o)

    if self.pos[0] in range (int(self.witches[i].position[0]-30), (int(self.witches[i].position[0])+30) \
        or self.pos[1] in range ((int(self.witches[i].position[1])-30), (int(self.witches[i].position[1])+30))):
        for w in self.witches:
            print "witches out"
            self.witches.remove(w)
</snippet></ROW><ROW><id>20015421</id><snippet>for i in range(len(self.witches)):
    self.witches[i].draw(self.screen)

    # Do stuff with oranges

    if some_conditions_are_true:
        for w in self.witches:
            print "witches out"
            self.witches.remove(w)
</snippet></ROW><ROW><id>20015421</id><snippet>self.witches</snippet></ROW><ROW><id>20015421</id><snippet>for</snippet></ROW><ROW><id>20015421</id><snippet>range(len(self.witches))</snippet></ROW><ROW><id>20015421</id><snippet>for</snippet></ROW><ROW><id>20015421</id><snippet>alive_witches = []

# This kind of for-loop lets you grab each element from a list. 
# It's identical to how you were grabbing each witch before, but is cleaner to read
for witch in self.witches:   
    witch.draw(self.screen)

    # Do stuff with oranges

    witch_x = witch.position[0]
    witch_y = witch.position[1]
    close_to_player_x = witch_x - 30 &lt;= self.pos[0] &lt;= witch_x + 30
    close_to_player_y = witch_y - 30 &lt;= self.pos[1] &lt;= witch_y + 30

    if not (close_to_player_x or close_to_player_y):
        # Save the witches that are not dead
        alive_witches.append(witch)

# Save the witches that are still alive
self.witches = alive_witches
</snippet></ROW><ROW><id>20015538</id><snippet>def increase(increment, *nums):
    return [num + increment for num in nums]
</snippet></ROW><ROW><id>20015538</id><snippet>def increase(*args):
    return [num + args[0] for num in args[1:]]
</snippet></ROW><ROW><id>20015538</id><snippet>def log(message, func, *args):
    print message
    func(*args)
</snippet></ROW><ROW><id>20015538</id><snippet>*args</snippet></ROW><ROW><id>20015538</id><snippet>def log(*args):
    print args[0]
    args[1](args[2:])
</snippet></ROW><ROW><id>20015612</id><snippet>username</snippet></ROW><ROW><id>20015612</id><snippet>password</snippet></ROW><ROW><id>20015612</id><snippet>username</snippet></ROW><ROW><id>20015615</id><snippet>map</snippet></ROW><ROW><id>20015615</id><snippet>&gt;&gt;&gt; columns = map(int, '12345')
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
&gt;&gt;&gt; list(zip(columns, range(5)))
[]
</snippet></ROW><ROW><id>20015615</id><snippet>list</snippet></ROW><ROW><id>20015615</id><snippet>&gt;&gt;&gt; columns = list(map(int, '12345'))
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
</snippet></ROW><ROW><id>20015615</id><snippet>list comprehension</snippet></ROW><ROW><id>20015615</id><snippet>columns = [x[0] for x in  description]
</snippet></ROW><ROW><id>20015672</id><snippet>A = [0.54,13,18,0,1,1,1,1,0,0,0,1,0]
ranges = [(1, 3), (5, 8), (11, 14)]
print ([item for start, end in ranges for item in A[start:end]])
</snippet></ROW><ROW><id>20015672</id><snippet>[13, 18, 1, 1, 1, 1, 0]
</snippet></ROW><ROW><id>20015757</id><snippet>for student, student_data in student_quiz_scores.iteritems():
    for i, average in enumerate(the_averages):
        print "\nThe average for quiz",i+1,"is:",average
        if student_data[i]&gt;average:
            print student, "got a",student_data[i],"which is",(str(student_data[i]-average))+"%", "higher than the average. :)"
        else:
            print student, "got a", student_data[i], "which is", (str(-student_data[i]+average))+"%", "lower than the average. :("
</snippet></ROW><ROW><id>20016054</id><snippet>In [11]: df.merge(mdf, on='id', how='left')
Out[11]: 
   index_x  id  index_y
0        1   3        3
1        2   4      NaN
2        3   1        1
</snippet></ROW><ROW><id>20016054</id><snippet>In [12]: df.merge(mdf, on='id', how='left').index_y
Out[12]: 
0     3
1   NaN
2     1
Name: index_y, dtype: float64
</snippet></ROW><ROW><id>20016054</id><snippet>False == 0</snippet></ROW><ROW><id>20016054</id><snippet>.fillna(0)</snippet></ROW><ROW><id>20016054</id><snippet>df[['id']].merge(mdf[['id', 'index']], on='id', how='left')
</snippet></ROW><ROW><id>20016265</id><snippet>import time

import win32api

def mPos(x, y):
    win32api.SetCursorPos((x, y))

# OR
#
#def mPos(coord):
#    win32api.SetCursorPos(coord)

def start():
    h_x, h_y = win32api.GetCursorPos() #This works fine.
    print "Mouse was at " + str(h_x) + ", " + str(h_y) #This also displays normally.
    return h_x, h_y

h_x, h_y = start()
for i in range(5):
    mPos(h_x + i * 10, h_y + i * 10)
    time.sleep(1)
</snippet></ROW><ROW><id>20016340</id><snippet># move all the squirrels
for sObj in squirrelObjs:
    # move the squirrel, and adjust for their bounce
    sObj['x'] += sObj['movex']
    sObj['y'] += sObj['movey']
</snippet></ROW><ROW><id>20016340</id><snippet>sObj</snippet></ROW><ROW><id>20016340</id><snippet>for</snippet></ROW><ROW><id>20016340</id><snippet>sObj</snippet></ROW><ROW><id>20016340</id><snippet>for</snippet></ROW><ROW><id>20016340</id><snippet>sObj</snippet></ROW><ROW><id>20016340</id><snippet>squirrels</snippet></ROW><ROW><id>20016340</id><snippet>sObj</snippet></ROW><ROW><id>20016340</id><snippet>squirrels</snippet></ROW><ROW><id>20016701</id><snippet>a = [x * 2 for x in a]</snippet></ROW><ROW><id>20016701</id><snippet>a = [ [1,2,3], [4,5,6] ]
a = [ [x * 2 for x in x] for x in a]
</snippet></ROW><ROW><id>20016823</id><snippet>a_list = a_list.append(r)</snippet></ROW><ROW><id>20016823</id><snippet>a_list.append(r)</snippet></ROW><ROW><id>20016823</id><snippet>None</snippet></ROW><ROW><id>20016823</id><snippet>list.sort</snippet></ROW><ROW><id>20016823</id><snippet>list.append</snippet></ROW><ROW><id>20016823</id><snippet>dict.clear</snippet></ROW><ROW><id>20017120</id><snippet>if</snippet></ROW><ROW><id>20017120</id><snippet>if</snippet></ROW><ROW><id>20017120</id><snippet>"if" expression ":" suite
</snippet></ROW><ROW><id>20017120</id><snippet>suite</snippet></ROW><ROW><id>20017120</id><snippet>suite         ::=  stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
</snippet></ROW><ROW><id>20017120</id><snippet>stmt_list</snippet></ROW><ROW><id>20017120</id><snippet>stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
</snippet></ROW><ROW><id>20017120</id><snippet>statement</snippet></ROW><ROW><id>20017120</id><snippet>stmt_list NEWLINE | compound_stmt
</snippet></ROW><ROW><id>20017120</id><snippet>compound_stmt</snippet></ROW><ROW><id>20017120</id><snippet>compound_stmt ::=  if_stmt
               | while_stmt
               | for_stmt
               | try_stmt
               | with_stmt
               | funcdef
               | classdef
               | decorated
</snippet></ROW><ROW><id>20017120</id><snippet>funcdef</snippet></ROW><ROW><id>20017120</id><snippet>compound_stmt</snippet></ROW><ROW><id>20017120</id><snippet>if</snippet></ROW><ROW><id>20017120</id><snippet>def</snippet></ROW><ROW><id>20017120</id><snippet>NEWLINE</snippet></ROW><ROW><id>20017120</id><snippet>INDENT</snippet></ROW><ROW><id>20017120</id><snippet>def a():
    return "a" if True else "b"
</snippet></ROW><ROW><id>20017262</id><snippet>dict</snippet></ROW><ROW><id>20017262</id><snippet>int</snippet></ROW><ROW><id>20017262</id><snippet>sum(len(your_dict))</snippet></ROW><ROW><id>20017262</id><snippet>sum</snippet></ROW><ROW><id>20017262</id><snippet>dict.value</snippet></ROW><ROW><id>20017262</id><snippet>dict.values()</snippet></ROW><ROW><id>20017262</id><snippet>dict.keys()</snippet></ROW><ROW><id>20017303</id><snippet>editing-started</snippet></ROW><ROW><id>20017303</id><snippet>visibility</snippet></ROW><ROW><id>20017303</id><snippet>False</snippet></ROW><ROW><id>20017303</id><snippet>text</snippet></ROW><ROW><id>20017303</id><snippet>editing-started</snippet></ROW><ROW><id>20017303</id><snippet>def on_cell_edited_started(self, cell, editable, path):
    editable.delete_text(0, -1)
    editable.set_visibility(False)
</snippet></ROW><ROW><id>20017303</id><snippet>__init__</snippet></ROW><ROW><id>20017303</id><snippet>self.renderer.set_property("text", "*****")
self.renderer.connect("editing-started", self.on_cell_editing_started)
</snippet></ROW><ROW><id>20017303</id><snippet>***</snippet></ROW><ROW><id>20017303</id><snippet>***</snippet></ROW><ROW><id>20017303</id><snippet>def on_cell_editing_started(self,cell, editable, path):
    editable.delete_text(0,-1)
    editable.set_visibility(False)
def on_cell_edited(self, renderer, path, new_text, model):
    iter = model.get_iter(path)
    model.set_value(iter, COLUMN_PSW, new_text)
</snippet></ROW><ROW><id>20017303</id><snippet>    # psw column
    self.renderer = gtk.CellRendererText()
    self.renderer.connect("editing-started", self.on_cell_editing_started)
    self.renderer.connect("edited", self.on_cell_edited, model)
    self.renderer.set_property("text", "***")
    column = gtk.TreeViewColumn("Password", self.renderer ,editable=COLUMN_EDITABLE)
    treeview.append_column(column)  
    sw.add(treeview)
    self.show_all()
</snippet></ROW><ROW><id>20017303</id><snippet>text</snippet></ROW><ROW><id>20017303</id><snippet>set_property</snippet></ROW><ROW><id>20017336</id><snippet>/opt/pillow</snippet></ROW><ROW><id>20017336</id><snippet>python setup.py install --prefix /opt/pillow
</snippet></ROW><ROW><id>20017336</id><snippet>import sys
sys.path.insert(0, "/opt/pillow")
</snippet></ROW><ROW><id>20017336</id><snippet>from PIL import Image
</snippet></ROW><ROW><id>20017336</id><snippet>/opt/pillow</snippet></ROW><ROW><id>20017493</id><snippet>pandas1.join(pandas2, lsuffix ="2").join(pandas3, lsuffix="3")
</snippet></ROW><ROW><id>20017493</id><snippet>lsuffix</snippet></ROW><ROW><id>20017493</id><snippet>0</snippet></ROW><ROW><id>20017493</id><snippet>pandas.concat([pandas1, pandas2, pandas3], axis=1) 
</snippet></ROW><ROW><id>20017830</id><snippet>FileStorage</snippet></ROW><ROW><id>20017830</id><snippet>stream</snippet></ROW><ROW><id>20017830</id><snippet>read</snippet></ROW><ROW><id>20017830</id><snippet>FileStorage</snippet></ROW><ROW><id>20017830</id><snippet>stream</snippet></ROW><ROW><id>20017830</id><snippet>file.read()</snippet></ROW><ROW><id>20017830</id><snippet>file.stream.read()</snippet></ROW><ROW><id>20017830</id><snippet>save</snippet></ROW><ROW><id>20017830</id><snippet>dst</snippet></ROW><ROW><id>20017830</id><snippet>StringIO</snippet></ROW><ROW><id>20017830</id><snippet>FileStorage.stream</snippet></ROW><ROW><id>20018115</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt;
&gt;&gt;&gt; groupMatrix = np.array([
...     [1, 1, 0, 0],
...     [1, 0, 0, 0],
...     [0, 0, 0, 2],
...     [3, 3, 0, 2]
... ])
&gt;&gt;&gt; np.nonzero(groupMatrix)
(array([0, 0, 1, 2, 3, 3, 3], dtype=int64), array([0, 1, 0, 3, 0, 1, 3], dtype=int64))
&gt;&gt;&gt; zip(np.nonzero(groupMatrix))
[(array([0, 0, 1, 2, 3, 3, 3], dtype=int64),), (array([0, 1, 0, 3, 0, 1, 3], dtype=int64),)]
</snippet></ROW><ROW><id>20018115</id><snippet>zip(*...)</snippet></ROW><ROW><id>20018115</id><snippet>&gt;&gt;&gt; zip(*np.nonzero(groupMatrix))
[(0, 0), (0, 1), (1, 0), (2, 3), (3, 0), (3, 1), (3, 3)]
</snippet></ROW><ROW><id>20018115</id><snippet>zip(*a)</snippet></ROW><ROW><id>20018115</id><snippet>zip(a[0], a[1], ...)</snippet></ROW><ROW><id>20018115</id><snippet>&gt;&gt;&gt; a = [(0, 1, 2), (3, 4, 5)]
&gt;&gt;&gt; zip(a)
[((0, 1, 2),), ((3, 4, 5),)]
&gt;&gt;&gt; zip(a[0], a[1])
[(0, 3), (1, 4), (2, 5)]
&gt;&gt;&gt; zip(*a)
[(0, 3), (1, 4), (2, 5)]
</snippet></ROW><ROW><id>20018115</id><snippet>Unpacking Argument Lists</snippet></ROW><ROW><id>20018153</id><snippet>class MyHandler(webapp2.RequestHandler):
    def post(self):
        name = self.request.get('name')
</snippet></ROW><ROW><id>20018153</id><snippet>name</snippet></ROW><ROW><id>20018153</id><snippet># &lt;input name="name" type="text" /&gt;
name = self.request.get("name")

# &lt;input name="subscribe" type="checkbox" value="yes" /&gt;
subscribe_to_newsletter = self.request.get("subscribe", default_value="no")

# &lt;select name="favorite_foods" multiple="true"&gt;...&lt;/select&gt;
favorite_foods = self.request.get("favorite_foods", allow_multiple=True)
</snippet></ROW><ROW><id>20018180</id><snippet>print("Cache - Clear")
</snippet></ROW><ROW><id>20018180</id><snippet>print</snippet></ROW><ROW><id>20018180</id><snippet>&gt;&gt;&gt; print "Cache - Clear"
  File "&lt;stdin&gt;", line 1
    print "Cache - Clear"
                        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; print("Cache - Clear")
Cache - Clear
&gt;&gt;&gt; print
&lt;built-in function print&gt;
</snippet></ROW><ROW><id>20018202</id><snippet>main()</snippet></ROW><ROW><id>20018202</id><snippet>main()</snippet></ROW><ROW><id>20018202</id><snippet>def main():
    score = 0
    while True:
        # ask the questions and stuff
        if correct:
            score += 1
        # do other stuff
        if stop_condition:
            break
    print(name, ', you got a score of -', score)
</snippet></ROW><ROW><id>20018248</id><snippet>my_lists = []
for i in range(1,6):
    new_list = []
    for j in range(10):
        new_list.append(j)
    my_lists.append(new_list)
</snippet></ROW><ROW><id>20018248</id><snippet>my_list_3</snippet></ROW><ROW><id>20018248</id><snippet>for i in range(1,6):
    globals()["my_list_"+str(i)] = []
    for j in range(10):
        globals()["my_list_"+str(i)].append(j)

print my_list_3
</snippet></ROW><ROW><id>20018248</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20018276</id><snippet>\n</snippet></ROW><ROW><id>20018276</id><snippet>random.choice(list(f)).strip()</snippet></ROW><ROW><id>20018754</id><snippet>ssc1.   append(int(match.group(1)))
ssc2.   append(int(match.group(1)))
ssc3.   append(int(match.group(1)))
s1.     append(float(match.group(1)))
t.      append(float(match.group(1)))
</snippet></ROW><ROW><id>20018754</id><snippet>ssc1.   append(int(match.group(1)))
ssc2.   append(int(match.group(2)))
ssc3.   append(int(match.group(3)))
s1.     append(float(match.group(4)))
t.      append(float(match.group(5)))
</snippet></ROW><ROW><id>20018754</id><snippet>torque=(.*)\s{1}(.*)
</snippet></ROW><ROW><id>20018754</id><snippet>torque=(.{12})(.{12})
</snippet></ROW><ROW><id>20018904</id><snippet>@app.route('/')
def home():
    return 'home'
</snippet></ROW><ROW><id>20018904</id><snippet>def home():
    return 'home'

home = app.route('/')(home)
</snippet></ROW><ROW><id>20018904</id><snippet>Flask</snippet></ROW><ROW><id>20018904</id><snippet>add_url_rule</snippet></ROW><ROW><id>20018904</id><snippet>route</snippet></ROW><ROW><id>20018904</id><snippet>def home():
    return 'home'

app.add_url_rule('/', None, home, {})
</snippet></ROW><ROW><id>20018904</id><snippet>add_url_rule</snippet></ROW><ROW><id>20018904</id><snippet>add_url_rule</snippet></ROW><ROW><id>20018904</id><snippet>Rule</snippet></ROW><ROW><id>20018904</id><snippet>Flask.url_map</snippet></ROW><ROW><id>20018904</id><snippet>Rule</snippet></ROW><ROW><id>20018904</id><snippet>url_map</snippet></ROW><ROW><id>20018904</id><snippet>Flask</snippet></ROW><ROW><id>20018904</id><snippet>Lazily Loading Views</snippet></ROW><ROW><id>20019124</id><snippet>vocabulary[feature]</snippet></ROW><ROW><id>20019124</id><snippet>vocabulary</snippet></ROW><ROW><id>20019124</id><snippet>defaultdict</snippet></ROW><ROW><id>20019124</id><snippet>&gt;&gt;&gt; vocabulary = defaultdict(None)
&gt;&gt;&gt; vocabulary.default_factory = vocabulary.__len__
&gt;&gt;&gt; j_indices = []
&gt;&gt;&gt; analyzed = ["foo", "bar", "baz", "foo", "quux"]
&gt;&gt;&gt; for feature in analyzed:
...     j = vocabulary[feature]
...     print("%s %d" % (feature, j))
...     j_indices.append(j)
...     
foo 0
bar 1
baz 2
foo 0
quux 3
</snippet></ROW><ROW><id>20019124</id><snippet>&gt;&gt;&gt; dict(vocabulary)
{'bar': 1, 'foo': 0, 'baz': 2, 'quux': 3}
&gt;&gt;&gt; j_indices
[0, 1, 2, 0, 3]
</snippet></ROW><ROW><id>20019124</id><snippet>KeyError</snippet></ROW><ROW><id>20019124</id><snippet>fixed_vocab=True</snippet></ROW><ROW><id>20019205</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20019205</id><snippet>import datetime

def yourFunction(...):
    expireTime = datetime.datetime.now()  #Check the docs, about adding 29 days, etc.
    self.response.set_cookie('name', 'value', expires=expireTime, path='/', domain='example.com')
</snippet></ROW><ROW><id>20019382</id><snippet>setattr</snippet></ROW><ROW><id>20019382</id><snippet>&gt;&gt;&gt; setattr(qwer, 'test', decor(qwer.__dict__['test']))
&gt;&gt;&gt; qwer.test
&lt;function decor.&lt;locals&gt;.w at 0xb5f10e3c&gt;
</snippet></ROW><ROW><id>20019382</id><snippet>&gt;&gt;&gt; class A:                 
    pass
... 
&gt;&gt;&gt; A.__dict__['foo'] = 'bar'
Traceback (most recent call last):
  File "&lt;ipython-input-117-92c06357349d&gt;", line 1, in &lt;module&gt;
    A.__dict__['foo'] = 'bar'
TypeError: 'mappingproxy' object does not support item assignment

&gt;&gt;&gt; setattr(A, 'foo', 'bar')
&gt;&gt;&gt; A.foo
'bar'
</snippet></ROW><ROW><id>20019439</id><snippet>article = Article.objects.get(pk=request.POST["title"])
</snippet></ROW><ROW><id>20019439</id><snippet>primary_key=True</snippet></ROW><ROW><id>20019439</id><snippet>title</snippet></ROW><ROW><id>20019439</id><snippet>unique=True</snippet></ROW><ROW><id>20019439</id><snippet>title</snippet></ROW><ROW><id>20019439</id><snippet>get(title=request.POST["title"])</snippet></ROW><ROW><id>20019481</id><snippet>or</snippet></ROW><ROW><id>20019481</id><snippet>and</snippet></ROW><ROW><id>20019481</id><snippet>not Current_State==True</snippet></ROW><ROW><id>20019481</id><snippet>Current_State is not True</snippet></ROW><ROW><id>20019481</id><snippet>not Current_State</snippet></ROW><ROW><id>20019481</id><snippet>Current_State</snippet></ROW><ROW><id>20019481</id><snippet>while time.time() &lt; start + secs and Current_State is not True:
    Current_State = GPIO.input(GPIO_PIR)
    if Current_State==1:
        takePics(3)
</snippet></ROW><ROW><id>20019481</id><snippet>secs</snippet></ROW><ROW><id>20019481</id><snippet>or</snippet></ROW><ROW><id>20019481</id><snippet>and</snippet></ROW><ROW><id>20019569</id><snippet>maxPart = tempPartition
</snippet></ROW><ROW><id>20019569</id><snippet>tempPartition</snippet></ROW><ROW><id>20019569</id><snippet>maxPart</snippet></ROW><ROW><id>20019569</id><snippet>tempPartition</snippet></ROW><ROW><id>20019569</id><snippet>maxPart[:] = tempPartition
</snippet></ROW><ROW><id>20019569</id><snippet>maxPart = tempPartition[:]
</snippet></ROW><ROW><id>20019569</id><snippet>maxPart[:] = tempPartition</snippet></ROW><ROW><id>20019569</id><snippet>maxPart = tempPartition[:]</snippet></ROW><ROW><id>20019569</id><snippet>maxPart</snippet></ROW><ROW><id>20019569</id><snippet>tempPartition</snippet></ROW><ROW><id>20019569</id><snippet>maxPart</snippet></ROW><ROW><id>20019569</id><snippet>tempPartition</snippet></ROW><ROW><id>20019569</id><snippet>maxPart</snippet></ROW><ROW><id>20019735</id><snippet>files</snippet></ROW><ROW><id>20019735</id><snippet>data</snippet></ROW><ROW><id>20019735</id><snippet>res = s.post(
    url='https://example.com/upload.php',
    data={'upload_type': 'standard', 'upload_to': '0'},
    files=file)
</snippet></ROW><ROW><id>20019735</id><snippet>data</snippet></ROW><ROW><id>20019735</id><snippet>('userfile[]', fileobject)</snippet></ROW><ROW><id>20019735</id><snippet>files = (
    ('userfile[]': open('tmp/cover/cover1.jpg', 'rb')),
    ('userfile[]': open('tmp/cover/cover2.jpg', 'rb')),
)

res = s.post(
    url='https://example.com/upload.php',
    data={'upload_type': 'standard', 'upload_to': '0'},
    files=files)
</snippet></ROW><ROW><id>20019761</id><snippet>d1</snippet></ROW><ROW><id>20019761</id><snippet>list</snippet></ROW><ROW><id>20019761</id><snippet>d1</snippet></ROW><ROW><id>20019761</id><snippet>dict</snippet></ROW><ROW><id>20019761</id><snippet>dict</snippet></ROW><ROW><id>20019761</id><snippet>dict</snippet></ROW><ROW><id>20019761</id><snippet>d1</snippet></ROW><ROW><id>20019761</id><snippet>evicted</snippet></ROW><ROW><id>20019761</id><snippet>saw</snippet></ROW><ROW><id>20019761</id><snippet>for dicts in d1:
   for key, value in dicts.items():
      new_dict.setdefault(key,[]).extend(value)
</snippet></ROW><ROW><id>20019899</id><snippet>ts.plot()</snippet></ROW><ROW><id>20019899</id><snippet>xticks</snippet></ROW><ROW><id>20019899</id><snippet>max_sec = 90000

ts.plot(x_compat=True, figsize=(20,10), xticks=arange(0, max_sec, 3600))

ts.plot(x_compat=True, figsize=(20,10), xticks=arange(0, max_sec, 7200))
</snippet></ROW><ROW><id>20019899</id><snippet>max_sec</snippet></ROW><ROW><id>20019899</id><snippet>xaxis</snippet></ROW><ROW><id>20019928</id><snippet>data = "Chateau d'Arsac, Bordeaux blanc, Cuvee Celine, 2012"
import re
print re.match(".*?,.*?,\s*(.*?),.*", data).group(1)
</snippet></ROW><ROW><id>20019928</id><snippet>Cuvee Celine
</snippet></ROW><ROW><id>20019928</id><snippet>,</snippet></ROW><ROW><id>20019928</id><snippet>data.split(",")[2].strip()
</snippet></ROW><ROW><id>20020033</id><snippet>(9, 1, 2)</snippet></ROW><ROW><id>20020033</id><snippet>array</snippet></ROW><ROW><id>20020033</id><snippet>(3,3,2)</snippet></ROW><ROW><id>20020033</id><snippet>A</snippet></ROW><ROW><id>20020033</id><snippet>&gt;&gt;&gt; A = np.arange(1,10).reshape(3,3)
&gt;&gt;&gt; B = np.ones((3,3,2))
&gt;&gt;&gt; C = A[..., None] * B
&gt;&gt;&gt; C
array([[[ 1.,  1.],
        [ 2.,  2.],
        [ 3.,  3.]],

       [[ 4.,  4.],
        [ 5.,  5.],
        [ 6.,  6.]],

       [[ 7.,  7.],
        [ 8.,  8.],
        [ 9.,  9.]]])
&gt;&gt;&gt; C.shape
(3, 3, 2)
</snippet></ROW><ROW><id>20020092</id><snippet>range(0, 100, 2)
</snippet></ROW><ROW><id>20020278</id><snippet>&gt;</snippet></ROW><ROW><id>20020278</id><snippet>name=</snippet></ROW><ROW><id>20020278</id><snippet>name="([^"]*)"
</snippet></ROW><ROW><id>20020278</id><snippet>name="</snippet></ROW><ROW><id>20020278</id><snippet>([^"]*)</snippet></ROW><ROW><id>20020278</id><snippet>"</snippet></ROW><ROW><id>20020278</id><snippet>r</snippet></ROW><ROW><id>20020278</id><snippet>namesGroup = re.findall(r'name="([^"]*)"', sourceCode, re.IGNORECASE)
</snippet></ROW><ROW><id>20020414</id><snippet>&lt;= 50</snippet></ROW><ROW><id>20020414</id><snippet>if X &gt;= 10 and X &lt;= 50:
</snippet></ROW><ROW><id>20020414</id><snippet>if 10 &lt;= X &lt;= 50:
</snippet></ROW><ROW><id>20020451</id><snippet>text/html</snippet></ROW><ROW><id>20020451</id><snippet>svg</snippet></ROW><ROW><id>20020451</id><snippet>svg_string = svg_string.replace(u'svg:', u'').replace(u'xmlns:svg', u'xmlns')
</snippet></ROW><ROW><id>20020515</id><snippet>parent = session.query(Parent).filter(Parent.id=1).first()
child = Child(parent=parent, name='child3')
session.add(child)
</snippet></ROW><ROW><id>20020681</id><snippet>GLOBAL_MYCLASS_LIST = []

class MyClass(object):

    def __init__(self, x, y):
        GLOBAL_MYCLASS_LIST.append(self)
        self.x = x
        self.y = y

    def power(self):
        print(self.x**self.y)

    def divide(self):
        print(self.x/self.y)

a = MyClass(2, 3)
b = MyClass(4, 7)
all_powers = [i.power() for i in GLOBAL_MYCLASS_LIST]
</snippet></ROW><ROW><id>20020681</id><snippet>MyClass</snippet></ROW><ROW><id>20020681</id><snippet>myclass_list = []

class MyClass(object):

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def power(self):
        print(self.x**self.y)

    def divide(self):
        print(self.x/self.y)

myclass_list.append(MyClass(2, 3))
myclass_list.append(MyClass(4, 7))
all_powers = [i.power() for i in myclass_list]
</snippet></ROW><ROW><id>20020713</id><snippet>Num &amp;= 2**120-1
</snippet></ROW><ROW><id>20020713</id><snippet>Num %= 2**120 # or 16**30
</snippet></ROW><ROW><id>20020713</id><snippet>&gt;&gt;&gt; s=0x010f73696e742d3265745f69676f725f32
&gt;&gt;&gt; hex(s % (256**((s.bit_length()+7) // 8 - 2)))
'0x73696e742d3265745f69676f725f32'
&gt;&gt;&gt; s=0x12345678
&gt;&gt;&gt; hex(s % (256**((s.bit_length()+7) // 8 - 2)))
'0x5678'
</snippet></ROW><ROW><id>20020883</id><snippet>crud.create()</snippet></ROW><ROW><id>20020883</id><snippet>_formname</snippet></ROW><ROW><id>20020883</id><snippet>_formkey</snippet></ROW><ROW><id>20020883</id><snippet>_formkey</snippet></ROW><ROW><id>20020883</id><snippet>_formkey</snippet></ROW><ROW><id>20020883</id><snippet>{{=crud.create(db.presentations_presenters,
               formname='presenters/%s' % presentation.id)}}
</snippet></ROW><ROW><id>20020883</id><snippet>SQLFORM</snippet></ROW><ROW><id>20020883</id><snippet>.process()</snippet></ROW><ROW><id>20020883</id><snippet>{{=SQLFORM(db.presentations_presenters).process(
       formname='presenters/%s' % presentation.id)}}
</snippet></ROW><ROW><id>20020962</id><snippet>/media</snippet></ROW><ROW><id>20020962</id><snippet>localhost:8000/&lt;path&gt;</snippet></ROW><ROW><id>20020962</id><snippet>&lt;path&gt;</snippet></ROW><ROW><id>20020962</id><snippet>django.core.context_processors.media</snippet></ROW><ROW><id>20020962</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>20020962</id><snippet>MEDIAL_URL</snippet></ROW><ROW><id>20020962</id><snippet>MEDIA_ROOT = '/path/to/django/media/'
MEDIA_URL = '/media/'
</snippet></ROW><ROW><id>20020962</id><snippet>/path/to/django/media/product/product4959e24a4edf4f8d8afa8c529f3afaff/codes/image_dr_130.png</snippet></ROW><ROW><id>20021151</id><snippet>l1 = [ i + 1 for i in range(randint(...)  ]
</snippet></ROW><ROW><id>20021201</id><snippet>apt-get install -f
dpkg-reconfigure -a
</snippet></ROW><ROW><id>20021387</id><snippet>USER_AGENT = r"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36"
</snippet></ROW><ROW><id>20021491</id><snippet>class Game(models.Model):
    name = models.CharField()
    debut = models.DateField()
    max_players = models.IntegerField()

    @classmethod
    def create_from_j(cls, game): # assumed that game is dict already
        j2m = {'title': 'name', 'release': 'debut', 'players': 'max_players'}
        return cls(**{j2m[k]:v for k,v in game.items()})
</snippet></ROW><ROW><id>20021491</id><snippet>game = Game.create_from_j(json.loads(json_game))
</snippet></ROW><ROW><id>20021531</id><snippet>__unicode__</snippet></ROW><ROW><id>20021531</id><snippet>class Post(models.Model):
    title = models.CharField(max_length=255)
    datetime = models.DateTimeField(u'Date of publishing')
    content = models.TextField(max_length=10000)

    def __unicode__(self):
        return self.title
</snippet></ROW><ROW><id>20021531</id><snippet>__str__</snippet></ROW><ROW><id>20021547</id><snippet>from pygame import mixer # Load the required library

mixer.init()
mixer.music.load('e:/LOCAL/Betrayer/Metalik Klinik1-Anak Sekolah.mp3')
mixer.music.play()
</snippet></ROW><ROW><id>20021547</id><snippet>MP3</snippet></ROW><ROW><id>20021559</id><snippet>style</snippet></ROW><ROW><id>20021559</id><snippet>{
    "format": "{levelname} - {asctime} - {module} - {message}",
    "style": "{",
}
</snippet></ROW><ROW><id>20021559</id><snippet>{
    '()': logging.Formatter,
    'format': '{levelname} - {asctime} - {module} - {message}',
    'style': '{',
},
</snippet></ROW><ROW><id>20021559</id><snippet>'()': logging.Formatter</snippet></ROW><ROW><id>20021582</id><snippet>from itertools import chain, repeat    
data = range(0,12)
labels = [ 'A', 'B', 'B', 'C', 'A', 'B', 'C', 'A', 'C', 'A', 'C' ]
setPossibleLabels = [ 'A', 'AB', 'ABC' ]
chunk_size = 3
chunks_data = []
chunks_labels = []

for label in chain(setPossibleLabels, repeat(setPossibleLabels[-1])):
    chunks_data.append([])
    chunks_labels.append([])
    for index in range(chunk_size):
        i = 0
        try:
            while labels[i] not in label:
                i += 1
        except IndexError:
            break
        chunks_data[-1].append(data.pop(i))
        chunks_labels[-1].append(labels.pop(i))
    if len(data) == 0:
        break

print chunks_data
print chunks_labels
</snippet></ROW><ROW><id>20021582</id><snippet>[[1, 5, 8], [2, 3, 6], [4, 7, 9], [10, 11]]
[['A', 'A', 'A'], ['B', 'B', 'B'], ['C', 'C', 'C'], ['A', 'C']]
</snippet></ROW><ROW><id>20021582</id><snippet>len(data) == 11</snippet></ROW><ROW><id>20021646</id><snippet>checkable</snippet></ROW><ROW><id>20021646</id><snippet>isChecked</snippet></ROW><ROW><id>20021646</id><snippet>from PySide.QtGui import *

def main():
    app = QApplication([])

    window = QMainWindow()
    bar = QMenuBar(window)
    window.setMenuBar(bar)
    m = QMenu('menu', bar)
    bar.addMenu(m)
    action = QAction('action', m, checkable=True)
    m.addAction(action)

    window.show()
    app.exec_()
    print(action.isChecked())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20021708</id><snippet>InheritanceManager</snippet></ROW><ROW><id>20021708</id><snippet>django-model-utils</snippet></ROW><ROW><id>20021708</id><snippet>Common</snippet></ROW><ROW><id>20021708</id><snippet>Employee</snippet></ROW><ROW><id>20021708</id><snippet>Client</snippet></ROW><ROW><id>20021708</id><snippet>Common.objects.all().select_subclasses()
</snippet></ROW><ROW><id>20021708</id><snippet>User</snippet></ROW><ROW><id>20021788</id><snippet>WHERE</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE</snippet></ROW><ROW><id>20021788</id><snippet>@db_session
def some_function()
   obj = MyObject[123]
   print obj.x
   obj.x = 100
</snippet></ROW><ROW><id>20021788</id><snippet>some_function</snippet></ROW><ROW><id>20021788</id><snippet>@db_session</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE MyTable
SET x = &lt;new_value&gt;
WHERE id = 123 and x = &lt;old_value&gt;
</snippet></ROW><ROW><id>20021788</id><snippet>and x = &lt;old_value&gt;</snippet></ROW><ROW><id>20021788</id><snippet>x</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE</snippet></ROW><ROW><id>20021788</id><snippet>SERIALIZABLE</snippet></ROW><ROW><id>20021788</id><snippet>x</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE</snippet></ROW><ROW><id>20021788</id><snippet>UPDATE</snippet></ROW><ROW><id>20021788</id><snippet>WHERE</snippet></ROW><ROW><id>20021788</id><snippet>WHERE</snippet></ROW><ROW><id>20021788</id><snippet>MySQLdb</snippet></ROW><ROW><id>20021788</id><snippet>MySQLdb</snippet></ROW><ROW><id>20021788</id><snippet>MySQLdb</snippet></ROW><ROW><id>20021829</id><snippet>card_deck</snippet></ROW><ROW><id>20021829</id><snippet>card_deck</snippet></ROW><ROW><id>20021829</id><snippet>import random

class Card(object):
    '''Remember, a 'card' is completely different from a deck. You can have a 
    card that is not contained in a deck, and a deck is simply another object
    that contains one or more cards, with a few convenience methods attached.'''

    def __init__(self, rank, suite):
        self.rank = rank
        self.suite = suite

    def __repr__(self):
        '''The different between '__repr__' and '__str__' is not particularly
        important right now. You can google the difference yourself.'''
        return "Card({0}, {1})".format(self.rank, self.suite)

    def __str__(self):
        return "{0} of {1}".format(self.rank, self.suite)

    def value(self):
        ranks = ["Ace", "2", "3", "4", "5", "6", "7", 
            "8", "9", "10", "Jack", "Queen", "King"]

        # This is something called a 'dictionary comprehension'. It lets you
        # map the rank of the card to its corresponding value. 
        #
        # 'enumerate' is a built-in. Try doing `enumerate(["a", "b", "c", "d"])`
        # in the shell, and see what happens.
        values = {rank: i + 1 for (i, rank) in enumerate(ranks)}

        return values[self.rank]

class Deck(object):
    '''Now, we have the deck.'''

    def __init__(self):
        self.suites = ["Clubs", "Diamonds", "Hearts", "Spades"]
        self.ranks = ["Ace", "2", "3", "4", "5", "6", "7", 
             "8", "9", "10", "Jack", "Queen", "King"]

        # Here, I've chosen to create a full deck when instantiating the object.
        # You may chose to modify your code to pass in the cards you want instead.
        #
        # Notice how we're keeping track of all of our cards inside of a list.
        # This way, we're free to write whatever methods we want, while still 
        # internally representing our deck of cards in the cleanest manner possible.

        self.cards = []
        for suite in self.suites:
            for rank in self.ranks:
                self.cards.append(Card(suite, rank))

    def shuffle(self):
        random.shuffle(self.cards)

    def remove(self, card):
        # idk if this will actually work -- you should test it.
        self.cards.remove(card)

    def append(self, card):
        '''In this method, we're taking a card, and adding it to our deck.
        We've written the entire thing ourselves -- no need to call to super
        (which doesn't work, in any case)'''
        self.cards.append(card)

    def get_top_card(self):
        '''This is a common operation when dealing with decks -- why not add it?'''
        return self.cards.pop()

    def __repr__(self):
        return "[" + ", ".join(repr(card) for card in self.cards) + "]"

    def __str__(self):
        return '\n'.join(str(card) for card in self.cards)


def main():
    deck = Deck()
    deck.shuffle()

    hand = []


    while True:
        user = int(input('Enter a number of cards: 1-7 '))
        print()
        if not 1 &lt;= user &lt;= 7:
            print ("Only a number between 1-7:")
        else:
            break

    for i in range(user):
        hand.append(deck.get_top_card())
    print(hand)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20021829</id><snippet>super(card_deck,self).append(value)</snippet></ROW><ROW><id>20021829</id><snippet>super(card_deck, self)</snippet></ROW><ROW><id>20021829</id><snippet>card_deck</snippet></ROW><ROW><id>20021829</id><snippet>card_deck</snippet></ROW><ROW><id>20021829</id><snippet>object</snippet></ROW><ROW><id>20021829</id><snippet>append</snippet></ROW><ROW><id>20021829</id><snippet>append</snippet></ROW><ROW><id>20021829</id><snippet>card_deck</snippet></ROW><ROW><id>20021962</id><snippet>cd ~/.virtualenvs
mkvirtualenv myenv -p /path/to/python2.7.6
</snippet></ROW><ROW><id>20021962</id><snippet>myenv</snippet></ROW><ROW><id>20021962</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>20021962</id><snippet>easy_install</snippet></ROW><ROW><id>20021962</id><snippet>pip</snippet></ROW><ROW><id>20021962</id><snippet>myenv</snippet></ROW><ROW><id>20021962</id><snippet>workon myenv
</snippet></ROW><ROW><id>20021962</id><snippet>easy_install</snippet></ROW><ROW><id>20021962</id><snippet>pip</snippet></ROW><ROW><id>20021962</id><snippet>~/.virtualenvs/myenv/lib/python2.7/site-packages</snippet></ROW><ROW><id>20022028</id><snippet>sqlStatement = "INSERT INTO feeds.translated_pp(`customer`, `text`, `location`, `channel`)  VALUES (%s, %s, %s, %s)"

cnxn.execute(sqlStatement, (field.customer, ts_text, field.location, field.channel))
</snippet></ROW><ROW><id>20022172</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>20022172</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'UTF-8'
</snippet></ROW><ROW><id>20022259</id><snippet>first.saying</snippet></ROW><ROW><id>20022259</id><snippet>first.saying()</snippet></ROW><ROW><id>20022259</id><snippet>second.saying()</snippet></ROW><ROW><id>20022259</id><snippet>self.displayTemp()</snippet></ROW><ROW><id>20022259</id><snippet>int(temperature)</snippet></ROW><ROW><id>20022259</id><snippet>temperature</snippet></ROW><ROW><id>20022259</id><snippet>temperature = int(temperature)</snippet></ROW><ROW><id>20022259</id><snippet>temperature==4,5,6</snippet></ROW><ROW><id>20022259</id><snippet>4 &lt;= temperature &lt;= 6</snippet></ROW><ROW><id>20022348</id><snippet>txui</snippet></ROW><ROW><id>20022348</id><snippet>txui = os.path.abspath(r'.\UI\txled_gui.ui')
</snippet></ROW><ROW><id>20022348</id><snippet>txui = os.path.abspath('.\\UI\\txled_gui.ui')
</snippet></ROW><ROW><id>20022708</id><snippet>chmod</snippet></ROW><ROW><id>20022708</id><snippet>chmod</snippet></ROW><ROW><id>20022708</id><snippet>del os.chmod</snippet></ROW><ROW><id>20022708</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print hasattr(os, 'chmod')
True
&gt;&gt;&gt; foo = os.chmod
&gt;&gt;&gt; del os.chmod
&gt;&gt;&gt; print hasattr(os, 'chmod')
False
</snippet></ROW><ROW><id>20022708</id><snippet>&gt;&gt;&gt; setattr(os, 'chmod', foo)
&gt;&gt;&gt; print hasattr(os, 'chmod')
True
</snippet></ROW><ROW><id>20022737</id><snippet># Extract keys from dictionary into list and sort them
keys = list(alphabet).sort()

# Now insert them into the new ordered dictionary.
d = OrderedDict() 
for k in keys:
    d[k] = alphabet[k]
</snippet></ROW><ROW><id>20022737</id><snippet>d = {k: alphabet[k] for k in list(alphabet).sort()}
</snippet></ROW><ROW><id>20022883</id><snippet>pip uninstall pyfluidsynth
pip install -Iv https://pypi.python.org/packages/source/p/pyFluidSynth/pyFluidSynth-1.2.4.tar.gz#md5=60079310701d0b9298b65a8b6728ffcc
</snippet></ROW><ROW><id>20023098</id><snippet>&gt;&gt;&gt; 'ć' == u'ć'
False
&gt;&gt;&gt; 'ć' == u'ć'.encode('utf-8')
True
&gt;&gt;&gt; 'ć'.decode('utf-8') == u'ć'
True
</snippet></ROW><ROW><id>20023098</id><snippet>&gt;&gt;&gt; class foo:
    def __str__(self):
        return 'foo'
...     
&gt;&gt;&gt; class bar:
    def __str__(self):
        return 'foo'
...     
&gt;&gt;&gt; print (foo())
foo
&gt;&gt;&gt; print (bar())
foo
&gt;&gt;&gt; foo == bar
False
</snippet></ROW><ROW><id>20023122</id><snippet>&gt;&gt;&gt; pe = soup.find('td',{'data-snapfield':'pe_ratio'})
&gt;&gt;&gt; pe
&lt;td class="key" data-snapfield="pe_ratio"&gt;P/E
&lt;/td&gt;
&gt;&gt;&gt; print(pe.td.next_sibling.get_text())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'next_sibling'
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; pe
&lt;td class="key" data-snapfield="pe_ratio"&gt;P/E
&lt;/td&gt;
&gt;&gt;&gt; pe.td
&gt;&gt;&gt; pe.next_sibling
u'\n'
&gt;&gt;&gt; pe.next_sibling.next_sibling
&lt;td class="val"&gt;29.69
&lt;/td&gt;
&gt;&gt;&gt; pe.next_sibling.next_sibling.get_text()
u'29.69\n'
</snippet></ROW><ROW><id>20023246</id><snippet>cimport numpy
import numpy
</snippet></ROW><ROW><id>20023246</id><snippet>-I.../Python27/Lib/site-packages/numpy/core/include</snippet></ROW><ROW><id>20023248</id><snippet>dbdict = dict(zip(row.keys(), row))
</snippet></ROW><ROW><id>20023248</id><snippet>row.keys()</snippet></ROW><ROW><id>20023248</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>20023276</id><snippet>source ./script.sh
echo "VARIABLE=${VARIABLE}."
</snippet></ROW><ROW><id>20023276</id><snippet>. ./script.sh
echo "VARIABLE=${VARIABLE}."
</snippet></ROW><ROW><id>20023299</id><snippet>def is_solvable(index, board, visited=None):
    if visited is None:
        visited = []

    if index == len(board) - 1:
        return True
    elif index in visited:
        return False
    elif index &lt; 0 or index &gt;= len(board):
        # out of bounds
        return False
    else:
        visited.append(index)
        value = board[index]
        left = is_solvable(index - value, board, visited)
        right = is_solvable(index + value, board, visited)
        return left or right
</snippet></ROW><ROW><id>20023299</id><snippet>def is_solvable(index, board):
    if index == len(board) - 1:
        return True
    elif board[index] is None:
        return False
    elif index &lt; 0 or index &gt;= len(board):
        # out of bounds
        return False
    else:
        value = board[index]
        board[index] = None

        left = is_solvable(index - value, board, visited)
        right = is_solvable(index + value, board, visited)
        return left or right
</snippet></ROW><ROW><id>20023302</id><snippet>&gt;&gt;&gt; myList = ["Bob1", "Bob2", "Bob3", "Bob4"]
&gt;&gt;&gt; range(1, len(myList) + 1)
[1, 2, 3, 4]
</snippet></ROW><ROW><id>20023469</id><snippet>wx.CallAfter(button.Disable)</snippet></ROW><ROW><id>20023469</id><snippet>button.Disable()</snippet></ROW><ROW><id>20023469</id><snippet>button.Refresh()</snippet></ROW><ROW><id>20023533</id><snippet>--nocapture</snippet></ROW><ROW><id>20023533</id><snippet>--nologcapture</snippet></ROW><ROW><id>20023911</id><snippet>list</snippet></ROW><ROW><id>20023911</id><snippet>x = ['apples', 'oranges', 'bananas']
for i, item in enumerate(x): 
    item=item.replace('app', 'spam') 
    x[i] = item
    #Or just 
    #x[i] = item.replace('app', 'spam') 
</snippet></ROW><ROW><id>20023911</id><snippet>&gt;&gt;&gt; x = ['apples', 'oranges', 'bananas']
&gt;&gt;&gt; for i, item in enumerate(x): 
...     item=item.replace('app', 'spam') 
...     x[i] = item
... 
&gt;&gt;&gt; x
['spamles', 'oranges', 'bananas']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20023911</id><snippet>&gt;&gt;&gt; x =  ['apples', 'oranges', 'bananas']
&gt;&gt;&gt; x = [a.replace("app", "spam") for a in x ]
&gt;&gt;&gt; x
['spamles', 'oranges', 'bananas']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20023984</id><snippet>on_selection change</snippet></ROW><ROW><id>20023984</id><snippet>on_selected_item</snippet></ROW><ROW><id>20023984</id><snippet>self.apps_list.adapter.bind(on_selected_item=self.callback)
</snippet></ROW><ROW><id>20023984</id><snippet>ListAdapter</snippet></ROW><ROW><id>20023984</id><snippet>def on_enter(self):
    ...
    self.apps_list.adapter = list_adapter
    self.apps_list.adapter.bind(on_selection_change=self.callback)
</snippet></ROW><ROW><id>20023984</id><snippet>MainLayout</snippet></ROW><ROW><id>20023984</id><snippet>on_enter</snippet></ROW><ROW><id>20023984</id><snippet>self.adapter</snippet></ROW><ROW><id>20023984</id><snippet>adapter</snippet></ROW><ROW><id>20023984</id><snippet>self.apps_list.adapter</snippet></ROW><ROW><id>20023984</id><snippet>domain</snippet></ROW><ROW><id>20023984</id><snippet>apps_list</snippet></ROW><ROW><id>20023984</id><snippet>logo100</snippet></ROW><ROW><id>20023984</id><snippet>ids</snippet></ROW><ROW><id>20023984</id><snippet>Widget</snippet></ROW><ROW><id>20023984</id><snippet>self.apps_list.adapter = list_adapter
</snippet></ROW><ROW><id>20023984</id><snippet>self.ids.apps_list.adapter = list_adapter
</snippet></ROW><ROW><id>20023984</id><snippet>apps_lists</snippet></ROW><ROW><id>20023984</id><snippet>ids</snippet></ROW><ROW><id>20023984</id><snippet>&lt;MainLayout&gt;:
    text_input: text_input
    apps_list: apps_list
    logo100: logo100

    rows: 2
</snippet></ROW><ROW><id>20023984</id><snippet># ... your imports
class MainLayout(GridLayout):

    def on_enter(self):
        apps = {'a', 'b', 'c', 'd', 'e' ,'f', 'g'}
        if apps != None :
            list_adapter = ListAdapter(data = apps, selection_mode = 'single',
            allow_empty_selection = True, cls = ListItemButton, sorted_keys=[])
        self.apps_list.adapter = list_adapter
        self.apps_list.adapter.bind(on_selection_change=self.callback)

    def callback(self, adapter):
        if len(adapter.selection) == 0:
            print "No selected item"
        else:
            print adapter.selection[0].text

class WabApp(App):
    def build(self):
        return MainLayout()

if __name__ == '__main__':
    WabApp().run()
</snippet></ROW><ROW><id>20023996</id><snippet>bytearray</snippet></ROW><ROW><id>20023996</id><snippet>decode('cp037')</snippet></ROW><ROW><id>20023996</id><snippet>bytearray</snippet></ROW><ROW><id>20023996</id><snippet>bytearray</snippet></ROW><ROW><id>20023998</id><snippet>call_uselessmethod</snippet></ROW><ROW><id>20023998</id><snippet>Class2</snippet></ROW><ROW><id>20023998</id><snippet>k = Class2
</snippet></ROW><ROW><id>20023998</id><snippet>k</snippet></ROW><ROW><id>20023998</id><snippet>Class2</snippet></ROW><ROW><id>20023998</id><snippet>Class2</snippet></ROW><ROW><id>20023998</id><snippet>Class2</snippet></ROW><ROW><id>20023998</id><snippet>()</snippet></ROW><ROW><id>20023998</id><snippet>k = Class2()
k.call_uselessmethod()
</snippet></ROW><ROW><id>20023998</id><snippet>k</snippet></ROW><ROW><id>20023998</id><snippet>Class2</snippet></ROW><ROW><id>20024177</id><snippet>raw_input()</snippet></ROW><ROW><id>20024177</id><snippet>'+g+'
</snippet></ROW><ROW><id>20024177</id><snippet>+g+
</snippet></ROW><ROW><id>20024177</id><snippet>raw_input()</snippet></ROW><ROW><id>20024177</id><snippet>s/raw_input\(\)/whatever I typed into the form field/</snippet></ROW><ROW><id>20024194</id><snippet>fruit = ['apples', 'bananas', 'pears']
inputs = []

index = 0
while index &lt; len(fruit):
    answer = raw_input('Do you like %s? ' % fruit[index])
    if index &gt; 0 and answer == 'back':
        inputs.pop()
        index -= 1
    else:
        inputs.append(answer)
        index += 1

print inputs
</snippet></ROW><ROW><id>20024372</id><snippet>job_count_array</snippet></ROW><ROW><id>20024372</id><snippet>for job in job_count_array:
    if job == "X":
        # etc.
</snippet></ROW><ROW><id>20024372</id><snippet>exec</snippet></ROW><ROW><id>20024438</id><snippet>h2</snippet></ROW><ROW><id>20024438</id><snippet>&gt;&gt;&gt; type(h2)
&lt;class 'str'&gt;
&gt;&gt;&gt; type(next(a))  # first key in a
&lt;class 'int'&gt;
&gt;&gt;&gt; int(h2) in a
True
&gt;&gt;&gt; a[int(h2)]
'... '
</snippet></ROW><ROW><id>20024438</id><snippet>repr()</snippet></ROW><ROW><id>20024438</id><snippet>&gt;&gt;&gt; print(repr(h2))
'0'
&gt;&gt;&gt; print(repr(0))
0
</snippet></ROW><ROW><id>20024438</id><snippet>repr()</snippet></ROW><ROW><id>20024438</id><snippet>None</snippet></ROW><ROW><id>20024438</id><snippet>&gt;&gt;&gt; 'a string value'
'a string value'
&gt;&gt;&gt; 42
42
</snippet></ROW><ROW><id>20024456</id><snippet>import numpy as np

mat = np.arange(12).reshape(2,6)

result = np.c_[(np.array(list(np.ndindex(mat.shape))), mat.ravel())]
print(result)
</snippet></ROW><ROW><id>20024456</id><snippet>[[ 0  0  0]
 [ 0  1  1]
 [ 0  2  2]
 [ 0  3  3]
 [ 0  4  4]
 [ 0  5  5]
 [ 1  0  6]
 [ 1  1  7]
 [ 1  2  8]
 [ 1  3  9]
 [ 1  4 10]
 [ 1  5 11]]
</snippet></ROW><ROW><id>20024456</id><snippet>list</snippet></ROW><ROW><id>20024456</id><snippet>np.array(list(np.ndindex(mat.shape)))</snippet></ROW><ROW><id>20024456</id><snippet>np.fromiter</snippet></ROW><ROW><id>20024456</id><snippet>import numpy as np
arr = np.arange(12).reshape(2,6)

def ndindex_values(arr):
    for idx, value in np.ndenumerate(arr):
        for coord in idx:
            yield coord
        yield value

result = np.fromiter(
    ndindex_values(arr),
    count=arr.size*(len(arr.shape)+1),
    dtype=arr.dtype).reshape(arr.size, -1)
</snippet></ROW><ROW><id>20024513</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(open('myNotes.xml','r'))
print(soup.prettify())
</snippet></ROW><ROW><id>20024513</id><snippet>with open("file.txt", "w") as f:
    f.write(soup.prettify())
</snippet></ROW><ROW><id>20024513</id><snippet># Extract all of the &lt;a&gt; tags:    
tags = soup.find_all('a')
</snippet></ROW><ROW><id>20024532</id><snippet>byte</snippet></ROW><ROW><id>20024532</id><snippet>&gt;&gt;&gt; value = b'\x00\x01\x00\x02\x00\x03'
&gt;&gt;&gt; value[:2]
b'\x00\x01'
&gt;&gt;&gt; value[2:4]
b'\x00\x02'
&gt;&gt;&gt; value[-2:]
b'\x00\x03'
</snippet></ROW><ROW><id>20024532</id><snippet>memoryview()</snippet></ROW><ROW><id>20024532</id><snippet>&gt;&gt;&gt; mv = memoryview(bytes).cast('H')
&gt;&gt;&gt; mv[0], mv[1], mv[2]
256, 512, 768
</snippet></ROW><ROW><id>20024532</id><snippet>mv</snippet></ROW><ROW><id>20024609</id><snippet>time.time()</snippet></ROW><ROW><id>20024609</id><snippet>pygame.time.get_ticks()</snippet></ROW><ROW><id>20024609</id><snippet>t0</snippet></ROW><ROW><id>20024609</id><snippet># import the builtin time module, this is always available
import time

# initialize the t0 variable, "starting the stopwatch"
t0 = time.time()

while True:
  # calculate the time since some reference point (here the Unix Epoch)
  t1 = time.time()

  # calculate the difference, i.e. the time elapsed
  dt = t1 - t0

  if dt &gt;= 3:
    print "Three seconds reached, resetting timer"
    t0 = t1
  else:
    print "Time elapsed is", dt, "seconds"
</snippet></ROW><ROW><id>20024609</id><snippet>Stopwatch</snippet></ROW><ROW><id>20024609</id><snippet>get_seconds()</snippet></ROW><ROW><id>20024609</id><snippet>reset()</snippet></ROW><ROW><id>20024609</id><snippet>my_timer = Stopwatch()
print my_timer.get_seconds(), "seconds have elapsed since start/reset"
my_timer.reset()
</snippet></ROW><ROW><id>20024609</id><snippet>Stopwatch</snippet></ROW><ROW><id>20024735</id><snippet>re</snippet></ROW><ROW><id>20024735</id><snippet>#!/usr/bin/env python3
import re
import sys
from mmap import ACCESS_READ, mmap    

def generate_tokens(filename, pattern):
    with open(filename) as f, mmap(f.fileno(), 0, access=ACCESS_READ) as mm:
         yield from re.finditer(pattern, mm)

# sum all integers in a file specified at the command-line
print(sum(int(m.group()) for m in generate_tokens(sys.argv[1], br'\d+')))
</snippet></ROW><ROW><id>20024872</id><snippet>In [29]: df = df.set_index('density')

In [31]: df = df.reindex(df.index + pd.Index([35]))

In [32]: df
Out[32]: 
     A2     B2
20    1  0.525
30    1  0.577
35  NaN    NaN
40    1  0.789
50    1  1.000
75    1  1.000
100   1  1.000

In [33]: df.interpolate(method='values')
Out[33]: 
     A2     B2
20    1  0.525
30    1  0.577
35    1  0.683
40    1  0.789
50    1  1.000
75    1  1.000
100   1  1.000
</snippet></ROW><ROW><id>20024923</id><snippet>input</snippet></ROW><ROW><id>20024923</id><snippet>"file"</snippet></ROW><ROW><id>20024923</id><snippet>request.POST[ field_name ].file</snippet></ROW><ROW><id>20024951</id><snippet>&lt;form&gt;
    &lt;input type="submit" value = "Ready!" id="readyBut"&gt;
    &lt;input type="hidden" name="op" value="save"&gt;&lt;/input&gt;
&lt;/form&gt;

&lt;script&gt;
    $("readyButton").click(function(){
      $.get("../cgi-bin/game.py",function(data,status){ // use whatever url is relevant
        console.log(data); // data is whatever your python script returns.
      });
    });
&lt;/script&gt;
</snippet></ROW><ROW><id>20024970</id><snippet>apply_async()</snippet></ROW><ROW><id>20024970</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>20024970</id><snippet>Pool</snippet></ROW><ROW><id>20024970</id><snippet>Pool</snippet></ROW><ROW><id>20024970</id><snippet>apply_async</snippet></ROW><ROW><id>20024970</id><snippet>Pool()</snippet></ROW><ROW><id>20024970</id><snippet>Pool</snippet></ROW><ROW><id>20024970</id><snippet>apply_async()</snippet></ROW><ROW><id>20024970</id><snippet>MAX = 100000

from time import sleep
def f(i):
    sleep(0.01)
    return i

def summer(summand):
    global SUM, FINISHED
    SUM += summand
    FINISHED += 1

if __name__ == "__main__":
    import multiprocessing as mp
    SUM = 0
    FINISHED = 0
    pool = mp.Pool(4)

    print "queuing", MAX, "work descriptions"
    for i in xrange(MAX):
        pool.apply_async(f, args=(i,), callback=summer)
        if i % 1000 == 0:
            print "{}/{}".format(FINISHED, i),
    print

    print "closing pool"
    pool.close()

    print "waiting for processes to end"
    pool.join()

    print "verifying result"
    print "got", SUM, "expected", sum(xrange(MAX))
</snippet></ROW><ROW><id>20024970</id><snippet>queuing 100000 work descriptions
0/0 12/1000 21/2000 33/3000 42/4000
... stuff chopped for brevity ...
1433/95000 1445/96000 1456/97000 1466/98000 1478/99000
closing pool
waiting for processes to end
... and it waits here "for a long time" ...
verifying result
got 4999950000 expected 4999950000
</snippet></ROW><ROW><id>20024970</id><snippet>sleep(0.01)</snippet></ROW><ROW><id>20024970</id><snippet>f()</snippet></ROW><ROW><id>20024970</id><snippet>"f"</snippet></ROW><ROW><id>20025083</id><snippet>canvas</snippet></ROW><ROW><id>20025236</id><snippet>import pretty_csv
pretty_csv.pretty_file("test.csv", header=False, border=False, delimiter="|")
</snippet></ROW><ROW><id>20025236</id><snippet>open(filename, "rb") as input:</snippet></ROW><ROW><id>20025236</id><snippet>open(filename, "r", newline="") as input:</snippet></ROW><ROW><id>20025236</id><snippet>csv.reader</snippet></ROW><ROW><id>20025236</id><snippet>import csv

def pretty_file(filename, **options):
    """
    Pretty print a CSV file
    """

    #function specific options
    new_delimiter           = options.pop("new_delimiter", " | ")
    border                  = options.pop("border", True)
    border_vertical_left    = options.pop("border_vertical_left", "| ")
    border_vertical_right   = options.pop("border_vertical_right", " |")
    border_horizontal       = options.pop("border_horizontal", "-")
    border_corner_tl        = options.pop("border_corner_tl", "+ ")
    border_corner_tr        = options.pop("border_corner_tr", " +")
    border_corner_bl        = options.pop("border_corner_bl", border_corner_tl)
    border_corner_br        = options.pop("border_corner_br", border_corner_tr)
    header                  = options.pop("header", True)
    border_header_separator = options.pop("border_header_separator", border_horizontal)
    border_header_left      = options.pop("border_header_left", border_corner_tl)
    border_header_right     = options.pop("border_header_right", border_corner_tr)
    new_filename            = options.pop("new_filename", "new_" + filename)
    newline                 = options.pop("newline", "\n")

    column_max_width = {} #key:column number, the max width of each column
    num_rows = 0 #the number of rows

    with open(filename, "rb") as input: #parse the file and determine the width of each column
        reader=csv.reader(input, **options)
        for row in reader:
            num_rows += 1
            for col_number, column in enumerate(row):
                width = len(column)
                try:
                    if width &gt; column_max_width[col_number]:
                        column_max_width[col_number] = width
                except KeyError:
                    column_max_width[col_number] = width

    max_columns = max(column_max_width.keys()) + 1 #the max number of columns (having rows with different number of columns is no problem)

    if max_columns &gt; 1:
        total_length = sum(column_max_width.values()) + len(new_delimiter) * (max_columns - 1)
        left = border_vertical_left if border is True else ""
        right = border_vertical_right if border is True else ""
        left_header = border_header_left if border is True else ""
        right_header = border_header_right if border is True else ""

        with open(filename, "rb") as input:
            reader=csv.reader(input, **options)
            with open(new_filename, "w") as output:
                for row_number, row in enumerate(reader):
                    max_index = len(row) - 1
                    for index in range(max_columns):
                        if index &gt; max_index:
                            row.append(' ' * column_max_width[index]) #append empty columns
                        else:
                            diff = column_max_width[index] - len(row[index])
                            row[index] = row[index] + ' ' * diff #append spaces to fit the max width

                    if row_number==0 and border is True: #draw top border
                        output.write(border_corner_tl + border_horizontal * total_length + border_corner_tr + newline)
                    output.write(left + new_delimiter.join(row) + right + newline) #print the new row
                    if row_number==0 and header is True: #draw header's separator
                        output.write(left_header + border_header_separator * total_length + right_header + newline)
                    if row_number==num_rows-1 and border is True: #draw bottom border
                        output.write(border_corner_bl + border_horizontal * total_length + border_corner_br)
</snippet></ROW><ROW><id>20025279</id><snippet>ModelForm</snippet></ROW><ROW><id>20025279</id><snippet>modelformset_factory</snippet></ROW><ROW><id>20025279</id><snippet>ModelForm</snippet></ROW><ROW><id>20025279</id><snippet>class RegularAvailDateForm(ModelForm):
    class Meta:
        model = AvailabilitySchedule
        fields = ('active','dow', 'hour_start', 'hour_end')
        widgets = {
            'active' :  CheckboxInput(),
            'dow': HiddenInput(),
            'hour_start': NumberInput(attrs={'min': '0', 'max': '23', 'step': '1'}),
            'hour_end': NumberInput(attrs={'min': '1', 'max': '24', 'step': '1'}),
        }

FormSet = modelformset_factory(AvailabilitySchedule, RegularAvailDateForm)
</snippet></ROW><ROW><id>20025279</id><snippet>modelformset_factory</snippet></ROW><ROW><id>20025279</id><snippet>__init__</snippet></ROW><ROW><id>20025305</id><snippet>if</snippet></ROW><ROW><id>20025305</id><snippet>else</snippet></ROW><ROW><id>20025470</id><snippet>xdirection = 1
ydirection = 1
</snippet></ROW><ROW><id>20025501</id><snippet>&gt;&gt;&gt; ins = users.insert().values(name='jack', fullname='Jack Jones')
&gt;&gt;&gt; ins.compile().params
{'fullname': 'Jack Jones', 'name': 'jack'}

&gt;&gt;&gt; ins = users.insert()
&gt;&gt;&gt; ins.values(name='jack', fullname='Jack Jones')
&gt;&gt;&gt; ins.compile().params
{'fullname': None, 'password': None, 'id': None, 'name': None}
</snippet></ROW><ROW><id>20025501</id><snippet>ins</snippet></ROW><ROW><id>20025501</id><snippet>&gt;&gt;&gt; ins = users.insert()
&gt;&gt;&gt; ins = ins.values(name='jack', fullname='Jack Jones')
</snippet></ROW><ROW><id>20025501</id><snippet>ins.values</snippet></ROW><ROW><id>20025538</id><snippet>render_to_response</snippet></ROW><ROW><id>20025538</id><snippet>django.template.RequestContext</snippet></ROW><ROW><id>20025538</id><snippet>uploader/main/views.py</snippet></ROW><ROW><id>20025538</id><snippet>from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
rom django.template import RequestContext

@login_required
def main_main_page(request):
    return render_to_response('main/index.html', context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20025721</id><snippet>'</snippet></ROW><ROW><id>20025721</id><snippet>'</snippet></ROW><ROW><id>20025721</id><snippet>\'</snippet></ROW><ROW><id>20025721</id><snippet>for i in range(2, job_count+1):
    job_count_array["//form[@id='SubAvailSelectForm']/font/table[2]/tbody/tr[%d]/td[1]/small" % i] = sel.get_text("//form[@id='SubAvailSelectForm']/font/table[2]/tbody/tr[%d]/td[1]/small" % i)
</snippet></ROW><ROW><id>20026082</id><snippet>wave</snippet></ROW><ROW><id>20026172</id><snippet>def getlines(somefile):
    f = open(somefile).readlines()
    lines = [line for line in f if not line.startswith("#") and not line.strip() == ""]
    return lines

entries = getlines(input("Name of input file: "))
animal_visits = {}
month_visits = [0] * 13

for entry in entries:
    # count visits for each animal
    animal = entry[:3]
    animal_visits[animal] = animal_visits.get(animal, 0) + 1

    # count visits for each month
    month = int(entry[4:6])
    month_visits[month] += 1

print("Total Number of visits for each animal")
for x in sorted(animal_visits):
    print(x, "\t", animal_visits[x])

print("====================================================")
print("Month with highest number of visits to the stations")
print(month_visits.index(max(month_visits)))
</snippet></ROW><ROW><id>20026172</id><snippet>Name of input file: log
Total Number of visits for each animal
a01      3
a02      3
a03      8
====================================================
Month with highest number of visits to the stations
1
</snippet></ROW><ROW><id>20026201</id><snippet>results</snippet></ROW><ROW><id>20026201</id><snippet>'d'</snippet></ROW><ROW><id>20026201</id><snippet>'results'</snippet></ROW><ROW><id>20026201</id><snippet>'Web'</snippet></ROW><ROW><id>20026201</id><snippet>for result in results['d']['results']:
    for item in result.get('Web', []):
        print item.get(u'DisplayUrl')
</snippet></ROW><ROW><id>20026201</id><snippet>&gt;&gt;&gt; for result in results['d']['results']:
...     for item in result.get('Web', []):
...         print item.get(u'DisplayUrl')
... 
www.test.com
www.speakeasy.net/speedtest
</snippet></ROW><ROW><id>20026435</id><snippet>User of...</snippet></ROW><ROW><id>20026435</id><snippet>#string = the example you gave
import re
sections = [x.strip() for x in re.split(r'Users of.*',string) if x != '']
</snippet></ROW><ROW><id>20026435</id><snippet>for section in sections</snippet></ROW><ROW><id>20026435</id><snippet>title = section.split('\n')[0].split('"')[1]
#get first line, get everything between first quotation marks
</snippet></ROW><ROW><id>20026435</id><snippet>for line in section.split('/n'):
    t = re.match(r'(.*?)\s.*?\(flex1.com/\d+? (\d+)?\)',line)
</snippet></ROW><ROW><id>20026435</id><snippet>the_name = "jfall"
if t != None:
    final = [x[0] + " " + title + " " + x[1] for x in t.groups() if x[0] == the_name]
</snippet></ROW><ROW><id>20026435</id><snippet>result</snippet></ROW><ROW><id>20026435</id><snippet>result += final
</snippet></ROW><ROW><id>20026435</id><snippet>import re
sections = [x.strip() for x in re.split(r'Users of.*',string) if x != '']
result = []
the_name = "jfall"
for section in sections:
    lines = section.split('\n') 
    title = lines[0].split('"')[1]
    for line in lines[1:]:
        t = re.match(r'(.*?)\s.*?\(flex1.com/\d+? (\d+)?\)',line)
        if t != None:
            final = [x[0] + " " + title + " " + x[1] for x in t.groups() if x[0] == the_name]
            result += final
</snippet></ROW><ROW><id>20026435</id><snippet>&gt;&gt;&gt; for i in result:
...     print i
... 
jfall feature1 17731
jfall feature1 29438
jfall feature1 12791
jfall feature2 127
</snippet></ROW><ROW><id>20026469</id><snippet>GET</snippet></ROW><ROW><id>20026469</id><snippet>response = requests.get(
    'https://api.github.com/repos/' + username + '/' + repo + '/milestones',
    params={'state': state},
    auth=(username, password))
</snippet></ROW><ROW><id>20026469</id><snippet>data</snippet></ROW><ROW><id>20026469</id><snippet>GET</snippet></ROW><ROW><id>20026469</id><snippet>'state': 'open'</snippet></ROW><ROW><id>20026676</id><snippet>labelpad</snippet></ROW><ROW><id>20026676</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection='polar')

N = 8
theta = np.arange(0.0, 2*np.pi, 2*np.pi/N)
radii = np.ones(N)
width = 2 * np.pi / N
bars = ax.bar(theta, radii, width=width, bottom=0.6)

colors = plt.cm.Spectral(np.linspace(0, 1, N))

for color, bar in zip(colors, bars):
    bar.set_facecolor(color)

xlabels = np.array([0,21,18,15,12,9,6,3])
ax.set_xticks(theta)
ax.set_xticklabels(xlabels, rotation=270, fontsize=60)

ax.set_yticklabels([])
ax.grid(False)

plt.show()
</snippet></ROW><ROW><id>20026676</id><snippet>frac</snippet></ROW><ROW><id>20026676</id><snippet>ax.set_thetagrids</snippet></ROW><ROW><id>20026676</id><snippet>fig.tight_layout</snippet></ROW><ROW><id>20026676</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection='polar')

N = 8
theta = np.arange(0.0, 2*np.pi, 2*np.pi/N)
radii = np.ones(N)
width = 2 * np.pi / N
bars = ax.bar(theta, radii, width=width, bottom=0.6)

colors = plt.cm.Spectral(np.linspace(0, 1, N))

for color, bar in zip(colors, bars):
    bar.set_facecolor(color)

xlabels = np.array([0,21,18,15,12,9,6,3])
ax.set_thetagrids(np.degrees(theta), xlabels, frac=1.2, 
                  rotation=270, fontsize=60)

ax.set_yticklabels([])
ax.grid(False)

fig.tight_layout()

plt.show()
</snippet></ROW><ROW><id>20026682</id><snippet>config.py</snippet></ROW><ROW><id>20026682</id><snippet>config.py</snippet></ROW><ROW><id>20026687</id><snippet>from operator import *

str_ops = {'&lt;':lt,'&gt;':gt,'==':eq} # etc
op = str_ops.get(my_operator) #where my_operator was previously your 'operator'
assert op is not None #or raise your own exception
if op(a,b):
    c+=5
</snippet></ROW><ROW><id>20026687</id><snippet>my_operator</snippet></ROW><ROW><id>20026687</id><snippet>op = str_ops.get(my_operator, lambda x,y: None) #fallback: do-nothing operator
</snippet></ROW><ROW><id>20026687</id><snippet>if</snippet></ROW><ROW><id>20026687</id><snippet>dict</snippet></ROW><ROW><id>20026692</id><snippet>lambda</snippet></ROW><ROW><id>20026692</id><snippet>fs.readFile("filename", function(err, content) {
    if (err) {
       console.error(err);
    } else {
       console.log(content.toString());
    }
});
</snippet></ROW><ROW><id>20026692</id><snippet>readFile</snippet></ROW><ROW><id>20026692</id><snippet>readFile</snippet></ROW><ROW><id>20026692</id><snippet>readFile</snippet></ROW><ROW><id>20026692</id><snippet>lambda</snippet></ROW><ROW><id>20026692</id><snippet>from timeit import timeit
print timeit('sorted(["abcd", "abc", "ab", "a"], key=lambda x:len(x))')
print timeit('sorted(["abcd", "abc", "ab", "a"], key=len)')
</snippet></ROW><ROW><id>20026692</id><snippet>len</snippet></ROW><ROW><id>20026692</id><snippet>1.33205795288
0.976922988892
</snippet></ROW><ROW><id>20026732</id><snippet>tuple(os.path.join(self._path,each)
    for each in os.listdir(self._path) 
    if os.path.isfile(os.path.join(self._path,each))
    and each.endswith('png') or each.endswith('jpg')
)
</snippet></ROW><ROW><id>20026776</id><snippet>sites</snippet></ROW><ROW><id>20026776</id><snippet>django-cms</snippet></ROW><ROW><id>20026776</id><snippet>settings.py</snippet></ROW><ROW><id>20026776</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20026776</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',    # &lt;----- here!
    ...
</snippet></ROW><ROW><id>20026811</id><snippet>print nr
</snippet></ROW><ROW><id>20026811</id><snippet>print line
</snippet></ROW><ROW><id>20026882</id><snippet>values()</snippet></ROW><ROW><id>20026882</id><snippet>data = [{u'num': u'081143282', u'location': u'My Town'},
        {u'num': u'081143282', u'location': u'My Town'}]
print [(int(currentDict["num"]), currentDict["location"]) for currentDict in data]
</snippet></ROW><ROW><id>20026882</id><snippet>[(81143282, u'My Town'), (81143282, u'My Town')]
</snippet></ROW><ROW><id>20026941</id><snippet>input</snippet></ROW><ROW><id>20026941</id><snippet>raw_input</snippet></ROW><ROW><id>20026941</id><snippet>j</snippet></ROW><ROW><id>20026941</id><snippet>input</snippet></ROW><ROW><id>20026941</id><snippet>raw_input</snippet></ROW><ROW><id>20026941</id><snippet>raw_input</snippet></ROW><ROW><id>20026941</id><snippet>raw_input</snippet></ROW><ROW><id>20026941</id><snippet>input</snippet></ROW><ROW><id>20026941</id><snippet>golfFile = open("golf.dat","a")
another = "Y"
while another=="Y":
    Name = raw_input("What is the player's name?: ")
    Score = raw_input("What is the player's score?: ")
    golfFile.write(Name+"\n")
    golfFile.write(Score+"\n")
    another = raw_input("Do you wish to enter another player? (Y for yes): ")
    print()
golfFile.close()
print("Data saved to golf.dat")
</snippet></ROW><ROW><id>20026941</id><snippet>&gt;&gt;&gt; Name = input("What is the player's name?: ")
What is the player's name?: j
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'j' is not defined
&gt;&gt;&gt; Name = raw_input("What is the player's name?: ")
What is the player's name?: j
&gt;&gt;&gt; Name
'j'
</snippet></ROW><ROW><id>20026953</id><snippet>"a"</snippet></ROW><ROW><id>20026953</id><snippet>def get_key_str(low="a", high="z"):
    if low == "":
        low = "a"
    assert(low &lt; high)
    for i, (a, b) in enumerate(zip(low, high)):
        if a &lt; b:
            mid = chr((ord(a) + ord(b))//2) # get the character half-way between a and b
            if mid != a:
                return low[:i] + mid
            else:
                return low[:i+1] + get_key_str(low[i+1:], "z")
    return low + get_key_str("a", high[len(low):])
</snippet></ROW><ROW><id>20026953</id><snippet>s</snippet></ROW><ROW><id>20026953</id><snippet>"a" &lt;= low &lt; s &lt; high &lt;= "z"</snippet></ROW><ROW><id>20026953</id><snippet>"a"</snippet></ROW><ROW><id>20026953</id><snippet>"z"</snippet></ROW><ROW><id>20026953</id><snippet>get_key_str([lst[i-1], lst[i])</snippet></ROW><ROW><id>20026953</id><snippet>i</snippet></ROW><ROW><id>20026953</id><snippet>lst.insert(i, get_key_str(lst[i-1], lst[i]))</snippet></ROW><ROW><id>20026953</id><snippet>get_key_str(high=lst[0])</snippet></ROW><ROW><id>20026953</id><snippet>get_key_str(lst[-1])</snippet></ROW><ROW><id>20026953</id><snippet>"a"</snippet></ROW><ROW><id>20026953</id><snippet>low</snippet></ROW><ROW><id>20026953</id><snippet>"z"</snippet></ROW><ROW><id>20026953</id><snippet>high</snippet></ROW><ROW><id>20026953</id><snippet>"m"</snippet></ROW><ROW><id>20026953</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; lst = []
&gt;&gt;&gt; for _ in range(10):
    index = random.randint(0, len(lst))
    print("inserting at", index)
    if index == 0:
        low = "a"
    else:
        low = lst[index-1]
    if index == len(lst):
        high = "z"
    else:
        high = lst[index]
    lst.insert(index, get_key_str(low, high))
    print(lst)


inserting at 0
['m']
inserting at 1
['m', 's']
inserting at 2
['m', 's', 'v']
inserting at 2
['m', 's', 't', 'v']
inserting at 2
['m', 's', 'sm', 't', 'v']
inserting at 0
['g', 'm', 's', 'sm', 't', 'v']
inserting at 3
['g', 'm', 's', 'sg', 'sm', 't', 'v']
inserting at 2
['g', 'm', 'p', 's', 'sg', 'sm', 't', 'v']
inserting at 2
['g', 'm', 'n', 'p', 's', 'sg', 'sm', 't', 'v']
inserting at 3
['g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v']
</snippet></ROW><ROW><id>20026953</id><snippet>&gt;&gt;&gt; for _ in range(10):
    lst.insert(0, get_key_str(high=lst[0]))  # start
    lst.insert(len(lst), get_key_str(low=lst[-1])) # end
    print(lst)


['d', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x']
['b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y']
['am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym']
['ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys']
['ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv']
['ab', 'ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv', 'yx']
['aam', 'ab', 'ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv', 'yx', 'yy']
['aag', 'aam', 'ab', 'ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv', 'yx', 'yy', 'yym']
['aad', 'aag', 'aam', 'ab', 'ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv', 'yx', 'yy', 'yym', 'yys']
['aab', 'aad', 'aag', 'aam', 'ab', 'ad', 'ag', 'am', 'b', 'd', 'g', 'm', 'n', 'o', 'p', 's', 'sg', 'sm', 't', 'v', 'x', 'y', 'ym', 'ys', 'yv', 'yx', 'yy', 'yym', 'yys', 'yyv']
</snippet></ROW><ROW><id>20026953</id><snippet>a</snippet></ROW><ROW><id>20026953</id><snippet>y</snippet></ROW><ROW><id>20027028</id><snippet>In [11]: df1.ix[[1, 3]]
Out[11]: 
            D         E         F
a y  1.544577  1.594976 -0.084866
b y -0.468074  0.673112 -0.900547
</snippet></ROW><ROW><id>20027028</id><snippet>In [12]: df1.iloc[[1, 3]]
Out[12]: 
            D         E         F
a y  1.544577  1.594976 -0.084866
b y -0.468074  0.673112 -0.900547
</snippet></ROW><ROW><id>20027067</id><snippet>'f'</snippet></ROW><ROW><id>20027067</id><snippet>'F'</snippet></ROW><ROW><id>20027067</id><snippet>'g'</snippet></ROW><ROW><id>20027067</id><snippet>'G'</snippet></ROW><ROW><id>20027068</id><snippet>with</snippet></ROW><ROW><id>20027068</id><snippet>import os
import socket

def testing():
    os.mkdir("zzzdirectory")
    os.chdir("zzzdirectory")
    s=socket.gethostname()
    with open("testfolder.txt", "wb") as fo:
        fo.write("this is the first line of the file\n")
        fo.write(s)

testing()
</snippet></ROW><ROW><id>20027080</id><snippet>GdkPixbuf.Pixbuf.new_subpixbuf()</snippet></ROW><ROW><id>20027169</id><snippet>global_list</snippet></ROW><ROW><id>20027169</id><snippet>non_pure_add1_func(..)</snippet></ROW><ROW><id>20027169</id><snippet>global_list = []

def non_pure_add1_func(x):
    global_list.append(x)
    return x+1
</snippet></ROW><ROW><id>20027184</id><snippet>print [ticket for ticket in tickets if ticket['summary'] == issue['title']]
</snippet></ROW><ROW><id>20027184</id><snippet>filter</snippet></ROW><ROW><id>20027184</id><snippet>print filter(lambda ticket: ticket["summary"] == issue["title"], tickets)
</snippet></ROW><ROW><id>20027184</id><snippet>tickets = [{"summary" : "a"}, {"summary" : "a"}, {"summary" : "b"}]
issue = {"title" : "a"}
from timeit import timeit
print timeit("[ticket for ticket in tickets if ticket['summary'] == issue['title']]", setup="from __main__ import tickets, issue")
print timeit('filter(lambda ticket: ticket["summary"] == issue["title"], tickets)', setup="from __main__ import tickets, issue")
print timeit("list(ticket for ticket in tickets if ticket['summary'] == issue['title'])", setup="from __main__ import tickets, issue")
</snippet></ROW><ROW><id>20027184</id><snippet>0.347553014755
0.691710948944
1.10066413879
</snippet></ROW><ROW><id>20027184</id><snippet>tickets = [{"summary" : "a"}, {"summary" : "a"}, {"summary" : "b"}]
issue = {"title" : "a"}
setupString = "from __main__ import tickets, issue"
from timeit import timeit
print timeit("[ticket for ticket in tickets if ticket['summary'] == issue['title']][0]", setup=setupString)
print timeit('filter(lambda ticket: ticket["summary"] == issue["title"], tickets)[0]', setup=setupString)
print timeit("next(ticket for ticket in tickets if ticket['summary'] == issue['title'])", setup=setupString)
</snippet></ROW><ROW><id>20027184</id><snippet>0.369271993637
0.717815876007
0.557427883148
</snippet></ROW><ROW><id>20027186</id><snippet>or</snippet></ROW><ROW><id>20027186</id><snippet>a</snippet></ROW><ROW><id>20027186</id><snippet>or</snippet></ROW><ROW><id>20027186</id><snippet>b</snippet></ROW><ROW><id>20027186</id><snippet>c</snippet></ROW><ROW><id>20027186</id><snippet>zip()</snippet></ROW><ROW><id>20027186</id><snippet>any()</snippet></ROW><ROW><id>20027186</id><snippet>mask = [any(tup) for tup in zip(a, b, c)]
</snippet></ROW><ROW><id>20027351</id><snippet>dict.copy</snippet></ROW><ROW><id>20027351</id><snippet>def updateHand(dct, s)
    dct = dct.copy() # &lt;----
    for char in s :
        dct[char] = dct.get(char,0) - 1
    return dct
</snippet></ROW><ROW><id>20027386</id><snippet>df['col'] = 'str' + df['col'].astype(str)
</snippet></ROW><ROW><id>20027386</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'col':['a',0]})
&gt;&gt;&gt; df
  col
0   a
1   0
&gt;&gt;&gt; df['col'] = 'str' + df['col'].astype(str)
&gt;&gt;&gt; df
    col
0  stra
1  str0
</snippet></ROW><ROW><id>20027424</id><snippet>collections.Counter.most_common</snippet></ROW><ROW><id>20027424</id><snippet>&gt;&gt;&gt; counter.most_common()
[('b', 3), ('a', 2), ('c', 1)]

&gt;&gt;&gt; [key for key, _ in counter.most_common()]
['b', 'a', 'c']
</snippet></ROW><ROW><id>20027946</id><snippet>[{'f_name': 'Bruce Gradkowski', 'team': 'PIT', 'number': 5, 'position': 'QB', 'y': 99.79, 'x': 185.42}, {'f_name': 'Matthew Stafford', 'team': 'DET', 'number': 9, 'position': 'QB', 'y': 105.23, 'x': 190.5}]
</snippet></ROW><ROW><id>20027946</id><snippet>safe</snippet></ROW><ROW><id>20027946</id><snippet>{{ var_name|safe }}
</snippet></ROW><ROW><id>20027956</id><snippet>(dist/speed)/3600
</snippet></ROW><ROW><id>20027956</id><snippet>(dist/speed)</snippet></ROW><ROW><id>20027956</id><snippet>print 3599/3600
</snippet></ROW><ROW><id>20027956</id><snippet>0
</snippet></ROW><ROW><id>20027956</id><snippet>def Convert (factor):
    speed = light*factor
    return (float(dist)/float(speed))/3600.0
</snippet></ROW><ROW><id>20027999</id><snippet>global</snippet></ROW><ROW><id>20027999</id><snippet>count</snippet></ROW><ROW><id>20027999</id><snippet>def PrintCount():
    global count # &lt;----
    count += 1
    print count
</snippet></ROW><ROW><id>20028164</id><snippet>gluUnproject()</snippet></ROW><ROW><id>20028583</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; data = """2013 11 15  0000   56611      0   1.36e+01  3.52e-01  7.89e-02  4.33e-02  3.42e-02  1.76e-02  2.89e+04  5.72e+02 -1.00e+05
... 2013 11 15  0005   56611    300   1.08e+01  5.50e-01  2.35e-01  4.27e-02  3.35e-02  1.70e-02  3.00e+04  5.50e+02 -1.00e+05"""
</snippet></ROW><ROW><id>20028583</id><snippet>&gt;&gt;&gt; df = pd.read_csv(StringIO(data), sep=r'\s+', header=None)
</snippet></ROW><ROW><id>20028583</id><snippet>&gt;&gt;&gt; df[0] = df.iloc[:,:3].apply(lambda x:'{}.{}.{}'.format(*x), axis=1).apply(pd.to_datetime)
&gt;&gt;&gt; del df[1]
&gt;&gt;&gt; del df[2]
&gt;&gt;&gt; df
                   0   3      4    5     6      7       8       9       10  \
0 2013-11-15 00:00:00   0  56611    0  13.6  0.352  0.0789  0.0433  0.0342
1 2013-11-15 00:00:00   5  56611  300  10.8  0.550  0.2350  0.0427  0.0335

       11     12   13      14
0  0.0176  28900  572 -100000
1  0.0170  30000  550 -100000
</snippet></ROW><ROW><id>20028732</id><snippet>reverse()</snippet></ROW><ROW><id>20028732</id><snippet>if form.is_valid():
    newUser = form.save()
    url = reverse('your_app:successReg') # Replace your_app with the name of your app
    return HttpResponseRedirect(url)
</snippet></ROW><ROW><id>20028732</id><snippet>reverse()</snippet></ROW><ROW><id>20028732</id><snippet>reverse(viewname)</snippet></ROW><ROW><id>20028732</id><snippet>views.py</snippet></ROW><ROW><id>20028732</id><snippet>urls.py</snippet></ROW><ROW><id>20028732</id><snippet>reverse('app_name : name_defined_in_urls')</snippet></ROW><ROW><id>20028732</id><snippet>args and kwargs</snippet></ROW><ROW><id>20028765</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>20028765</id><snippet>c -= 8</snippet></ROW><ROW><id>20028765</id><snippet>(a &gt;&gt; (c - 8)) % 256
a = (a &lt;&lt; 6) + f
</snippet></ROW><ROW><id>20028814</id><snippet>crontab -e</snippet></ROW><ROW><id>20028814</id><snippet>*/10 * * * * do_it.py
</snippet></ROW><ROW><id>20028814</id><snippet>man 5 crontab</snippet></ROW><ROW><id>20028814</id><snippet>sudo</snippet></ROW><ROW><id>20028963</id><snippet>comment</snippet></ROW><ROW><id>20028963</id><snippet>None</snippet></ROW><ROW><id>20028963</id><snippet>Post.objects.filter(comment=None)
</snippet></ROW><ROW><id>20028963</id><snippet>filter</snippet></ROW><ROW><id>20028963</id><snippet>exclude</snippet></ROW><ROW><id>20029036</id><snippet>import numpy
import re
import matplotlib.pyplot as plt

f = open('sample_data.txt')
f.next()

pair = re.compile(r'# (.*?)[ \t]*:[ \t]*([0-9e\.-]+).*')

blocks = []
block = {}
blocks.append(block)

for line in f:
    if line[0] &lt;&gt; '#': 
        blocks.append(block)
        break
    line = line.strip()
    m = pair.match(line)
    if m:
        print line
        key, valstr = m.groups()
        print key, valstr
        try:
            value = float(valstr)
        except:
            value = valstr
        block[key] = value

    if (line == "#") and len(block) &gt; 0:
        blocks.append(block)
        block = {}

peaks = sorted([block for block in blocks if 'PEAK' in block], 
               key=lambda b: b['PEAK'])
print peaks

colnames = ['HJD', 'Tamuz-corrected magnitude', 'Magnitude error']
data = numpy.loadtxt(f, [(colname, 'float64') for colname in colnames])

Nbins = 50
for peak in peaks:
    plt.figure()
    phase, _ = numpy.modf((data['HJD'] + 10*peak['Period (days)'] - peak['Epoch'])/peak['Period (days)'])
    mag = data['Tamuz-corrected magnitude']

    # use numpy.histogram to calculate the sum and the number of points in the bins
    sums, _ = numpy.histogram(phase, bins=Nbins, weights=mag)
    N, bin_edges = numpy.histogram(phase, bins=Nbins)

    # We'll plot the value at the center of each bin
    centers = (bin_edges[:-1] + bin_edges[1:])/2

    plt.scatter(phase, mag, alpha=0.2)
    plt.plot(centers, sums/N, color='red', linewidth=2)
plt.show()
</snippet></ROW><ROW><id>20029088</id><snippet>sections</snippet></ROW><ROW><id>20029088</id><snippet>&gt;&gt;&gt; import pefile
&gt;&gt;&gt; pe = pefile.PE('./psfile.exe')

&gt;&gt;&gt; for section in pe.sections:
...   print (section.Name, hex(section.VirtualAddress),
...     hex(section.Misc_VirtualSize), section.SizeOfRawData )
... 
('.text\x00\x00\x00', '0x1000', '0xd3e4', 57344)
('.rdata\x00\x00', '0xf000', '0x5504', 24576)
('.data\x00\x00\x00', '0x15000', '0x3684', 8192)
('.rsrc\x00\x00\x00', '0x19000', '0x444', 4096)
</snippet></ROW><ROW><id>20029088</id><snippet>&gt;&gt;&gt; pe.sections[0].get_data()[:10]
'\x81\xec\x90\x00\x00\x00j&gt;\x8dD'
</snippet></ROW><ROW><id>20029102</id><snippet>Python 2.7.5+ (default, Sep 19 2013, 13:48:49) 
[GCC 4.8.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.NUM_CPUS # this works fine
4
&gt;&gt;&gt; psutil.virtual_memory() # this fails
vmem(total=4042084352L, available=1697619968L, percent=58.0, used=3149373440L, free=892710912L, active=2016649216, inactive=835248128, buffers=55672832L, cached=749236224)
&gt;&gt;&gt; quit()
~$ cat /proc/meminfo | grep MemFree
MemFree:          876836 kB
~$ python -c "print 892710912/1024"
871788
~$ python -c "import psutil;print psutil.__version__"
1.1.3
</snippet></ROW><ROW><id>20029102</id><snippet>sudo pip install psutil --upgrade
</snippet></ROW><ROW><id>20029159</id><snippet>os.system('sudo "apt-get install snort-mysql"')
</snippet></ROW><ROW><id>20029159</id><snippet>os.system("sudo \"apt-get install snort-mysql\"")
</snippet></ROW><ROW><id>20029320</id><snippet>import re
with open("input") as f:
    for line in f:
        line = line.strip()
        # chop a line into expressions of the form: str [OP NUMBER]
        exprs = re.split(r'(\w+\s*(?:[!&lt;&gt;=]=?\s*[\d.]*)?\s*,?\s*)', line)
        for expr in exprs:
            # chop each expression into tokens and get the str part
            tokens = re.findall(r'(\w+)\s*(?:[!&lt;&gt;=]=?\s*[\d.]*)?,?', expr)
            if tokens: print tokens
</snippet></ROW><ROW><id>20029333</id><snippet>def get_user_avatar(strategy, details, response, uid, user, *args, **kwargs):
    social = kwargs.get('social') or strategy.storage.user.get_social_auth(
        strategy.backend.name,
        uid
    )
    url = None
    if strategy.backend.name == 'facebook':
        url = "http://graph.facebook.com/%s/picture?type=large" % response['id']

    if url:
        social.set_extra_data({'photo': url})
</snippet></ROW><ROW><id>20029340</id><snippet>a = gates[:]
b = a[:]
</snippet></ROW><ROW><id>20029340</id><snippet>gates</snippet></ROW><ROW><id>20029340</id><snippet>a</snippet></ROW><ROW><id>20029398</id><snippet>forms.py</snippet></ROW><ROW><id>20029398</id><snippet>contacts</snippet></ROW><ROW><id>20029398</id><snippet>from contacts import forms
</snippet></ROW><ROW><id>20029398</id><snippet>import .forms
</snippet></ROW><ROW><id>20029422</id><snippet>config</snippet></ROW><ROW><id>20029533</id><snippet>select</snippet></ROW><ROW><id>20029533</id><snippet>@register.filter
def split_to_4_columns(queryset):
    values = list(queryset.all())
    split = int(ceil(len(values)/4.))
    columns = [values[i*split:(i+1)*split] for i in range(4)]
    return columns
</snippet></ROW><ROW><id>20029562</id><snippet>each</snippet></ROW><ROW><id>20029562</id><snippet>name</snippet></ROW><ROW><id>20029562</id><snippet>    print ("{0} ".format(players[each]))
</snippet></ROW><ROW><id>20029562</id><snippet>range</snippet></ROW><ROW><id>20029562</id><snippet>players</snippet></ROW><ROW><id>20029562</id><snippet>players</snippet></ROW><ROW><id>20029562</id><snippet>for player in players:
    print ("{0} ".format(player))
</snippet></ROW><ROW><id>20029613</id><snippet>JSONResponse</snippet></ROW><ROW><id>20029613</id><snippet>repr</snippet></ROW><ROW><id>20029613</id><snippet>&lt;Category: The New Category&gt;</snippet></ROW><ROW><id>20029613</id><snippet>'category':r.category
</snippet></ROW><ROW><id>20029613</id><snippet>'category': {'name': r.category.name}
</snippet></ROW><ROW><id>20029613</id><snippet>exec</snippet></ROW><ROW><id>20029625</id><snippet>{{ record.id }}</snippet></ROW><ROW><id>20029625</id><snippet>action="{{ request.path }}edit/"</snippet></ROW><ROW><id>20029625</id><snippet>{{ request.path }}</snippet></ROW><ROW><id>20029625</id><snippet>return render_to_response("azuriranje/stavka.html", {'form': form,}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20029625</id><snippet>'django.core.context_processors.request'</snippet></ROW><ROW><id>20029625</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>20029625</id><snippet>request.path</snippet></ROW><ROW><id>20029876</id><snippet>n</snippet></ROW><ROW><id>20029876</id><snippet>int</snippet></ROW><ROW><id>20029876</id><snippet>string</snippet></ROW><ROW><id>20029876</id><snippet>%</snippet></ROW><ROW><id>20029876</id><snippet>import math

def is_palindrome(s):
    return s == s[::-1]

def is_prime_dual_palindromic(n):
    return all(n % i for i in range(2, int(math.sqrt(n)) + 1)) \
        and is_palindrome(str(n))                              \
        and is_palindrome(bin(n)[2:])

a = is_prime_dual_palindromic(10)
</snippet></ROW><ROW><id>20030083</id><snippet>/proc/$$/maps</snippet></ROW><ROW><id>20030083</id><snippet>mmap.ALLOCATIONGRANULARITY</snippet></ROW><ROW><id>20030102</id><snippet>import re
with open("input") as f:
    for line in f:
        line = line.strip()
        # chop a line into expressions of the form: str [OP str]
        exprs = re.split(r'([\w\d]+\s*(?:[!&lt;&gt;=]=?\s*[\w\d.]*)?\s*,?\s*)', line)
        for expr in exprs:
            # chop each expression into tokens and get the str part
            tokens = re.findall(r'([\w\d]+)\s*(?:[!&lt;&gt;=]=?\s*[\w\d.]*)?,?', expr)
            if tokens: print tokens
</snippet></ROW><ROW><id>20030191</id><snippet>context = {'latest_poll_list' : latest_blog_list}
</snippet></ROW><ROW><id>20030191</id><snippet>context = {'latest_blog_list' : latest_blog_list}
</snippet></ROW><ROW><id>20030209</id><snippet>&gt;&gt;&gt; class C:
...    def __init__(self):
...        self.a = 1
...        self.b = 2
... 
&gt;&gt;&gt; c=C
&gt;&gt;&gt; def f(o):
...    o.a = 23
... 
&gt;&gt;&gt; f(c)
&gt;&gt;&gt; c
&lt;class __main__.C at 0x7f6952c013f8&gt;
&gt;&gt;&gt; c.a
23
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20030211</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'(\d+\.\d+)')
&gt;&gt;&gt; r.match('50.2000\xc2\xb0 E').group(1)
'50.2000'
</snippet></ROW><ROW><id>20030280</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>20030280</id><snippet>genfromtext</snippet></ROW><ROW><id>20030280</id><snippet>ifilter</snippet></ROW><ROW><id>20030280</id><snippet>from itertools import ifilter
with open(fname, 'rb') as inp:
     filtered_inp = ifilter(lambda x: x.startswith('A'), inp)
     a = np.genfromtxt(filtered_inp)
</snippet></ROW><ROW><id>20030528</id><snippet>entry = Entry(self, justify = 'center').grid(row = 2,column = 0,columnspan = 2 ,sticky = E+ W)
entry1 = Entry(self, justify = 'center').grid(row = 2,column = 4,columnspan = 2, sticky = E)
</snippet></ROW><ROW><id>20030528</id><snippet>self.entry = Entry(self, justify = 'center')
self.entry.grid(row = 2,column = 0,columnspan = 2 ,sticky = E+ W)
self.entry1 = Entry(self, justify = 'center')
self.entry1.grid(row = 2,column = 4,columnspan = 2, sticky = E)
</snippet></ROW><ROW><id>20030528</id><snippet>z = int(self.entry.get())</snippet></ROW><ROW><id>20030528</id><snippet>self.entry</snippet></ROW><ROW><id>20030528</id><snippet>grid</snippet></ROW><ROW><id>20030528</id><snippet>Entry</snippet></ROW><ROW><id>20030528</id><snippet>None</snippet></ROW><ROW><id>20030528</id><snippet>entry</snippet></ROW><ROW><id>20030588</id><snippet>def takeAGuess(inputGuess):
    wordList = list(inputGuess.upper())

    invalidLetters = False
    for letter in wordList:
        if letter not in coloursUsed:
            invalidLetters = True

    if invalidLetters == True:
        print "Possible colours are", coloursUsed
        return None
    else:
        return wordList

def validateInput():
    inputGuess = raw_input("Please enter your guess as letters: ")

    if inputGuess == "save":
        save()
        return None
    elif len(inputGuess) != npegs:
        inputGuess = raw_input("Please enter the same number of letters as pegs you chose to play with: ")
        return takeAGuess(inputGuess)
    else:
        return takeAGuess(inputGuess)

while True:
    result = validateInput()
    # result is either None to continue playing, or a wordList
    # not sure what do you want to do with it
</snippet></ROW><ROW><id>20030966</id><snippet>import csv
from datetime import datetime
date_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')

rows = ['foo', 'bar', date_object]

with open('export.csv', 'wb') as csv_file:
    writer = csv.writer(csv_file, delimiter=',', quoting=csv.QUOTE_MINIMAL)
    writer.writerow(rows)
</snippet></ROW><ROW><id>20030966</id><snippet>#!/usr/bin/env python
# -*- coding: windows-1251 -*-
# Copyright (C) 2005 Kiseliov Roman

from xlwt import *
from datetime import datetime

w = Workbook()
ws = w.add_sheet('Hey, Dude')

fmts = [
    'M/D/YY',
    'D-MMM-YY',
    'D-MMM',
    'MMM-YY',
    'h:mm AM/PM',
    'h:mm:ss AM/PM',
    'h:mm',
    'h:mm:ss',
    'M/D/YY h:mm',
    'mm:ss',
    '[h]:mm:ss',
    'mm:ss.0',
]

i = 0
for fmt in fmts:
    ws.write(i, 0, fmt)

    style = XFStyle()
    style.num_format_str = fmt

    ws.write(i, 4, datetime.now(), style)

    i += 1

w.save('dates.xls')
</snippet></ROW><ROW><id>20031172</id><snippet>enumerate</snippet></ROW><ROW><id>20031172</id><snippet>&gt;&gt;&gt; {k:v for v, k in enumerate(object_list, 1)}
{'goya': 5, 'noya': 4, 'thre': 2, 'tree': 3, 'trip': 1, 'voya': 6}
</snippet></ROW><ROW><id>20031173</id><snippet>all(x==lst[0] for x in lst)</snippet></ROW><ROW><id>20031173</id><snippet>(x==lst[0] for x in lst)</snippet></ROW><ROW><id>20031173</id><snippet>all()</snippet></ROW><ROW><id>20031173</id><snippet>True</snippet></ROW><ROW><id>20031173</id><snippet>True</snippet></ROW><ROW><id>20031173</id><snippet>bool()</snippet></ROW><ROW><id>20031173</id><snippet>True</snippet></ROW><ROW><id>20031173</id><snippet>False</snippet></ROW><ROW><id>20031173</id><snippet>False</snippet></ROW><ROW><id>20031216</id><snippet>&gt;&gt;&gt; arr = np.arange(108).reshape(9, 12)
&gt;&gt;&gt; rows, cols = arr.shape
&gt;&gt;&gt; arr.reshape(rows//3, 3, cols//3, 3).sum(axis=(1, 3))
array([[117, 144, 171, 198],
       [441, 468, 495, 522],
       [765, 792, 819, 846]])
</snippet></ROW><ROW><id>20031216</id><snippet>&gt;&gt;&gt; arr.reshape(rows//3, 3, cols//3, 3).sum(axis=(1, 3)) / 9
array([[ 13.,  16.,  19.,  22.],
       [ 49.,  52.,  55.,  58.],
       [ 85.,  88.,  91.,  94.]])
</snippet></ROW><ROW><id>20031265</id><snippet>FigureCanvasTkAgg</snippet></ROW><ROW><id>20031265</id><snippet>from Tkinter import Tk, W, E
from ttk import Label, Button, Frame, Entry, Style
import sys
import matplotlib.figure as mplfig
import matplotlib.backends.backend_tkagg as tkagg
import numpy as np


class program(Frame):

    def __init__(self, main):

        Frame.__init__(self, main)
        self.main = main
        self.initUI()

    def initUI(self):

        self.main.title('COSINUSEK')
        Style().configure('TFrame', background='black')
        Style().configure('TLabel', background='black', foreground='blue')
        Style().configure("TButton", background='red', foreground='blue')

        self.rowconfigure(0, pad=3)
        self.rowconfigure(1, pad=3)
        self.rowconfigure(2, pad=3)
        self.rowconfigure(3, pad=3)
        self.rowconfigure(4, pad=3)

        self.columnconfigure(0, pad=3)
        self.columnconfigure(1, pad=3)
        self.columnconfigure(2, pad=3)
        self.columnconfigure(3, pad=3)
        self.columnconfigure(4, pad=3)

        label = Label(self, text='Give me range in degrees ').grid(
            row=0, column=3)
        od = Label(self, text='             From').grid(row=1, column=0)
        do = Label(self, text='             To').grid(row=1, column=4)
        self.entry = Entry(self, justify='center')
        self.entry.grid(row=2, column=0, columnspan=2, sticky=E + W)
        self.entry1 = Entry(self, justify='center')
        self.entry1.grid(row=2, column=4, columnspan=2, sticky=E)
        button = Button(
            self, text='Ok', command=self.ok).grid(row=3, column=3)
        button1 = Button(
            self, text='Draw', command=self.dra).grid(row=4, column=3)

        self.fig = mplfig.Figure(figsize=(5, 4), dpi = 100)
        self.ax = self.fig.add_subplot(111)
        self.canvas = tkagg.FigureCanvasTkAgg(self.fig, self.main)
        self.canvas.get_tk_widget().pack(side='top', fill='both', expand=1)
        self.line = None
        self.pack()

    def run(self):
        self.main.mainloop()

    def ok(self):
        z = int(self.entry.get())
        w = int(self.entry1.get())
        self.x = np.arange(z, w, 0.01)
        self.y = np.cos((self.x * np.pi) / 180)

    def dra(self):
        self.ok()
        if self.line is not None:
            self.line.set_xdata(self.x)
            self.line.set_ydata(self.y) 
        else:
            self.line = self.ax.plot(self.x, self.y)[0]
        self.ax.set_xlim(self.x.min(), self.x.max())
        self.ax.relim()
        self.ax.autoscale_view(True, True, True)

        self.fig.canvas.draw()


program(Tk()).run()
</snippet></ROW><ROW><id>20031644</id><snippet>*</snippet></ROW><ROW><id>20031644</id><snippet>function2( *(function1(a,aa,b,bb) + (c, cc)) ) # would work

function2(*function1(a,aa,b,bb),c,cc)          # won't work
</snippet></ROW><ROW><id>20031644</id><snippet>return</snippet></ROW><ROW><id>20031644</id><snippet>def function1(a,aa,b,bb):
    get result z from a and b
    get error in result, zz, from raw errors, aa and bb
    print (z,zz)
    return z, zz

def function2(z,zz,c,cc):
    get result x from z and c
    get error in result, xx, from zz and cc
    print (x,xx)
    return x, xx
</snippet></ROW><ROW><id>20031744</id><snippet>end</snippet></ROW><ROW><id>20031744</id><snippet>print</snippet></ROW><ROW><id>20031744</id><snippet>print(new_item, end=" ")
</snippet></ROW><ROW><id>20031744</id><snippet>join</snippet></ROW><ROW><id>20031744</id><snippet>print (" ".join([function(word) for word in split]))
</snippet></ROW><ROW><id>20031768</id><snippet>sum</snippet></ROW><ROW><id>20031768</id><snippet>my_dict['total'] = sum(value for value in my_dict.values())
</snippet></ROW><ROW><id>20031768</id><snippet>dict</snippet></ROW><ROW><id>20031768</id><snippet>&gt;&gt;&gt; my_dict = {'a':1, 'b':2, 'c': 3, 'd':4}
&gt;&gt;&gt; my_dict['total'] = sum([value for value in my_dict.values()])
&gt;&gt;&gt; my_dict
{'a': 1, 'c': 3, 'b': 2, 'd': 4, 'total': 10}
</snippet></ROW><ROW><id>20031768</id><snippet>&gt;&gt;&gt; def multiply(d):
    values = d.values()
    result = 1
    for v in d.values():
        result *= v
    return result

&gt;&gt;&gt; multiply(my_dict)
240 
#shorter version, as @hcwhsa suggested:
&gt;&gt;&gt; import operator
&gt;&gt;&gt; reduce(operator.mul, my_dict.values())
240
</snippet></ROW><ROW><id>20031793</id><snippet>float()</snippet></ROW><ROW><id>20031918</id><snippet>export var="value"
</snippet></ROW><ROW><id>20031918</id><snippet>os.environ</snippet></ROW><ROW><id>20032314</id><snippet>persons = []
...
for line in new_contents:
    words = line.split()
    persons.append(Person(...))
</snippet></ROW><ROW><id>20032352</id><snippet>def slotify(L):
    level = []
    counter = 1
    while counter*2 &lt;= len(L):
        level.append(L[counter-1:counter*2-1])
        counter = counter * 2
    level.append(L[counter-1:])
    return level
</snippet></ROW><ROW><id>20032352</id><snippet>def slotify(L):
    level = []
    counter = 1
    counter_n2 = 2
    while counter_n2 &lt;= len(L):
        level.append(L[counter-1:counter_n2-1])
        counter = counter_n2
        counter_n2 = counter_n2 * 2
    level.append(L[counter-1:])
    return level
</snippet></ROW><ROW><id>20032352</id><snippet>counter_n2 = counter_n2 * 2
</snippet></ROW><ROW><id>20032352</id><snippet>counter_n2 += counter_n2
</snippet></ROW><ROW><id>20032352</id><snippet>def slotify(L):
  level=[]
  counter=1
  counter2=2
  val=len(L)
  while counter2&lt;=val:
    level+=[L[counter-1:counter2-1]]
    counter=counter2
    counter2+=counter2
level+=[L[counter-1:]]
return level
</snippet></ROW><ROW><id>20032640</id><snippet>n/0</snippet></ROW><ROW><id>20032640</id><snippet>0**0</snippet></ROW><ROW><id>20032640</id><snippet>1</snippet></ROW><ROW><id>20032640</id><snippet>0</snippet></ROW><ROW><id>20032640</id><snippet>1</snippet></ROW><ROW><id>20032771</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>20032771</id><snippet>find</snippet></ROW><ROW><id>20032771</id><snippet>block1 = soup.find('td', attrs={'align' : 'center', 'class' : 'listas'})
</snippet></ROW><ROW><id>20032771</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>20032771</id><snippet>block2 = block1.find_parent('tr').find_next_sibling('tr')
</snippet></ROW><ROW><id>20032771</id><snippet>entries = result_table.find_all('td', attrs={'align' : 'center', 'class' : 'listas'})
for result in entries:
    block2 = result.find_parent('tr').find_next_sibling('tr')
</snippet></ROW><ROW><id>20032845</id><snippet>'django.core.context_processors.static'</snippet></ROW><ROW><id>20032845</id><snippet>TEMPLATE_CONTEXT_PROCESSOR</snippet></ROW><ROW><id>20032938</id><snippet>s = """
Andorra la Vella|ad|Andorra la Vella|20430|42.51|1.51|
Canillo|ad|Canillo|3292|42.57|1.6|
Encamp|ad|Encamp|11224|42.54|1.57|
La Massana|ad|La Massana|7211|42.55|1.51|
"""

for line in s.splitlines():  # pretend we are reading from a file
    if not line:
        continue # skip empty lines

    groups = line.split('|')  # splits each line into its segments
    if int(groups[3]) &gt; 10000:  # checks if the 4th value is above 10000
        print groups[:4]  # prints the first 4 values
    else:
        print groups[3]  # prints the 4th value

&gt;&gt;&gt; 
['Andorra la Vella', 'ad', 'Andorra la Vella', '20430']
3292
['Encamp', 'ad', 'Encamp', '11224']
7211
</snippet></ROW><ROW><id>20033232</id><snippet>&gt;&gt;&gt; frame['HighScore'] = frame[['test1','test2','test3']].max(axis=1)
&gt;&gt;&gt; frame
    name  test1  test2  test3  HighScore
0   bill     85     35     51         85
1    joe     75     45     61         75
2  steve     85     83     45         85
</snippet></ROW><ROW><id>20033254</id><snippet>From: =?utf-8?q?Adrian_P=C5=82onka?= &lt;pokemon@myservice.com&gt;
</snippet></ROW><ROW><id>20033438</id><snippet>def multirange(counts):
    counts = np.asarray(counts)
    # Remove the following line if counts is always strictly positive.
    counts = counts[counts != 0]

    counts1 = counts[:-1]
    reset_index = np.cumsum(counts1)

    incr = np.ones(counts.sum(), dtype=int)
    incr[0] = 0
    incr[reset_index] = 1 - counts1

    # Reuse the incr array for the final result.
    incr.cumsum(out=incr)
    return incr
</snippet></ROW><ROW><id>20033438</id><snippet>arange</snippet></ROW><ROW><id>20033438</id><snippet>def multirange_loop(counts):
    counts = np.asarray(counts)
    ranges = np.empty(counts.sum(), dtype=int)
    seq = np.arange(counts.max())
    starts = np.zeros(len(counts), dtype=int)
    starts[1:] = np.cumsum(counts[:-1])
    for start, count in zip(starts, counts):
        ranges[start:start + count] = seq[:count]
    return ranges
</snippet></ROW><ROW><id>20033438</id><snippet>def multirange_original(counts):
    ranges = np.concatenate([np.arange(count) for count in counts])
    return ranges
</snippet></ROW><ROW><id>20033438</id><snippet>In [296]: multirange_original([1,2,3])
Out[296]: array([0, 0, 1, 0, 1, 2])

In [297]: multirange_loop([1,2,3])
Out[297]: array([0, 0, 1, 0, 1, 2])

In [298]: multirange([1,2,3])
Out[298]: array([0, 0, 1, 0, 1, 2])
</snippet></ROW><ROW><id>20033438</id><snippet>In [299]: counts = np.random.randint(1, 50, size=50)

In [300]: %timeit multirange_original(counts)
10000 loops, best of 3: 114 µs per loop

In [301]: %timeit multirange_loop(counts)
10000 loops, best of 3: 76.2 µs per loop

In [302]: %timeit multirange(counts)
10000 loops, best of 3: 26.4 µs per loop
</snippet></ROW><ROW><id>20033500</id><snippet>obj[row][col]</snippet></ROW><ROW><id>20033500</id><snippet>obj[row, col]</snippet></ROW><ROW><id>20033500</id><snippet>numpy</snippet></ROW><ROW><id>20033500</id><snippet>ndarray</snippet></ROW><ROW><id>20033500</id><snippet>__getitem__</snippet></ROW><ROW><id>20033500</id><snippet>def __getitem__(self, index):
   row, col = index
   if isinstance(row, int) and isinstance(col, (int, slice)):
      return self._Cells[row][col]
   elif isinstance(row, slice) and isinstance(col, (int, slice)):
      return [r[col] for r in self._Cells[row]]
   else:
      raise TypeError, "Invalid argument type"
</snippet></ROW><ROW><id>20033748</id><snippet>import os, unicodecsv as csv
# open and store the csv file
IDs = {}
with open('documentos_corpus_ladino.csv','rb') as csvfile:
    timeReader = csv.reader(csvfile, delimiter = ',')
    # build dictionary with associated IDs
    for row in timeReader:
        IDs[row[0]] = row[1]
# move files
path = 'txt_orig/'
tmpPath = 'txt_tmp/'
for oldname in os.listdir(path):
    # ignore files in path which aren't in the csv file
    if oldname in IDs:
        try:
            os.rename(os.path.join(path, oldname), os.path.join(tmpPath, IDs[oldname]))
        except:
            print 'File ' + oldname + ' could not be renamed to ' + IDs[oldname] + '!'
</snippet></ROW><ROW><id>20033756</id><snippet>GET graph.facebook.com
    /{node-id}?
        fields={first-level}
</snippet></ROW><ROW><id>20033756</id><snippet>/me?fields=friends,books</snippet></ROW><ROW><id>20033756</id><snippet>g.get_object</snippet></ROW><ROW><id>20033756</id><snippet>g.get_object('/me', fields='friends,books')
</snippet></ROW><ROW><id>20033827</id><snippet>exclude</snippet></ROW><ROW><id>20033827</id><snippet>tables.Table</snippet></ROW><ROW><id>20033827</id><snippet>visible=False</snippet></ROW><ROW><id>20033827</id><snippet>class EntitetTable(tables.Table):
    edit = tables.TemplateColumn(template_name='azuriranje/izmena.html',
                                 orderable=False)
    delete = tables.TemplateColumn(template_name='azuriranje/brisanje.html',
                                 orderable=False)
</snippet></ROW><ROW><id>20033827</id><snippet>table = TipPredmetaTable(queryset)
if not korisnik.is_kustos:
    table.exclude = ('edit', 'delete',) 
</snippet></ROW><ROW><id>20034086</id><snippet>def fact(n):
    return 1 if(n == 1) else n * fact(n - 1)
</snippet></ROW><ROW><id>20034086</id><snippet>def fact(n):
    return 1 if(n &lt;= 1) else n * fact(n - 1)
</snippet></ROW><ROW><id>20034086</id><snippet>fact(0)</snippet></ROW><ROW><id>20034086</id><snippet>fact(-1)</snippet></ROW><ROW><id>20034086</id><snippet>fact(-2)</snippet></ROW><ROW><id>20034160</id><snippet>django.contrib.gis.geoip</snippet></ROW><ROW><id>20034160</id><snippet>brew install geoip</snippet></ROW><ROW><id>20034160</id><snippet>libGeoIP.dylib</snippet></ROW><ROW><id>20034208</id><snippet>myWxImage = wx.ImageFromBuffer( imgobj.size[0], imgobj.size[1], imgobj.tostring() )</snippet></ROW><ROW><id>20034219</id><snippet> for xyz in xyz:
            item = xyz123Item()
            item ["title"] = xyz.select('a/text()').extract()[0]
            item ["link"] = xyz.select('a/@href').extract()[0]
            items.append(item)
            return items
</snippet></ROW><ROW><id>20034325</id><snippet>import random
import string

def random_strings(n):
    strings = set()
    while len(strings) &lt; n:
        strings.add(''.join(random.choice(string.ascii_uppercase) for _ in xrange(2)))
    return list(strings)

print random_strings(4)
</snippet></ROW><ROW><id>20034355</id><snippet>object</snippet></ROW><ROW><id>20034355</id><snippet>super</snippet></ROW><ROW><id>20034355</id><snippet>Quad</snippet></ROW><ROW><id>20034355</id><snippet>class Quad:
    def __init__(self, x):
       pass
</snippet></ROW><ROW><id>20034355</id><snippet>Square</snippet></ROW><ROW><id>20034355</id><snippet>&gt;&gt;&gt; Square(12)
    ...
    super(Square, self).__init__(linesValue)
TypeError: must be type, not classobj
</snippet></ROW><ROW><id>20034355</id><snippet>Quad</snippet></ROW><ROW><id>20034355</id><snippet>object</snippet></ROW><ROW><id>20034355</id><snippet>class Quad(object):
    def __init__(self, x):
       print x
</snippet></ROW><ROW><id>20034355</id><snippet>&gt;&gt;&gt; Square(12)
12
&lt;__main__.Square object at 0x93e286c&gt;
</snippet></ROW><ROW><id>20034413</id><snippet>\S</snippet></ROW><ROW><id>20034413</id><snippet>\b</snippet></ROW><ROW><id>20034413</id><snippet>(?&lt;!\S)(?=\S*\d)(?=\S*[a-zA-Z])(?=\S*-)\S{4,40}(?!\S)
</snippet></ROW><ROW><id>20034417</id><snippet>&gt;&gt;&gt; {k: {8: v[8]} for k, v in data_dict.items() if 8 in v}
{'three': {8: 'h'}}
</snippet></ROW><ROW><id>20034472</id><snippet>git diff --stat</snippet></ROW><ROW><id>20034472</id><snippet>git-loc</snippet></ROW><ROW><id>20034472</id><snippet>2010-05-13 14:38:21       42   +44    -2     initial
2010-05-13 14:40:14       44    +3    -1     hashbang added
2010-05-13 14:40:14       49    +8    -3     show last commit too
</snippet></ROW><ROW><id>20034472</id><snippet>git rev-parse</snippet></ROW><ROW><id>20034472</id><snippet>&lt;refname&gt;@{&lt;date&gt;}</snippet></ROW><ROW><id>20034472</id><snippet>master@{yesterday}</snippet></ROW><ROW><id>20034472</id><snippet>HEAD@{5 minutes ago}</snippet></ROW><ROW><id>20034472</id><snippet>@</snippet></ROW><ROW><id>20034472</id><snippet>{yesterday}</snippet></ROW><ROW><id>20034472</id><snippet>{1 month 2 weeks 3 days 1 hour 1 second ago}</snippet></ROW><ROW><id>20034472</id><snippet>{1979-02-26 18:30:00}</snippet></ROW><ROW><id>20034472</id><snippet>git diff</snippet></ROW><ROW><id>20034472</id><snippet>git log</snippet></ROW><ROW><id>20034472</id><snippet>git log --pretty=format: --name-only | sort | uniq -c | sort -rg | head -10
</snippet></ROW><ROW><id>20034498</id><snippet>class TshirtForm(forms.ModelForm):
    class Meta:
        model = Tshirt
        fields = ('name', 'color')
</snippet></ROW><ROW><id>20034498</id><snippet>class TshirtForm(forms.ModelForm):
    color_code = forms.CharInput()

    class Meta:
        model = Tshirt
        fields = ('name', 'color')
        widget = {'color': forms.HiddenInput(required=False)}

    def clean(self, *args, **kwargs):
        # If users are typing the code, better do some validation
        try:
            color = Color.objects.get(
                code=self.cleaned_data.get('color_code')
            )
        except (ObjectDoesNotExist, MultipleObjectsReturned):
            raise forms.ValidationError('Something went wrong with your code!')
        else:
            # Update the actual field
            self.cleaned_data['color'] = color.id
</snippet></ROW><ROW><id>20034547</id><snippet>python ex15_sample.txt 
</snippet></ROW><ROW><id>20034547</id><snippet>python ex15_sample.py ex15_sample.txt
</snippet></ROW><ROW><id>20034723</id><snippet>for</snippet></ROW><ROW><id>20034723</id><snippet>&gt;&gt;&gt; for i in range(len(a)):
</snippet></ROW><ROW><id>20034723</id><snippet>len(a)</snippet></ROW><ROW><id>20034723</id><snippet>int</snippet></ROW><ROW><id>20034723</id><snippet>a</snippet></ROW><ROW><id>20034723</id><snippet>b</snippet></ROW><ROW><id>20034723</id><snippet>b = len(a)</snippet></ROW><ROW><id>20034723</id><snippet>range(b)</snippet></ROW><ROW><id>20034723</id><snippet>ints</snippet></ROW><ROW><id>20034723</id><snippet>0</snippet></ROW><ROW><id>20034723</id><snippet>b - 1</snippet></ROW><ROW><id>20034723</id><snippet>[0, 1, 2, 3, 4]</snippet></ROW><ROW><id>20034723</id><snippet>for</snippet></ROW><ROW><id>20034723</id><snippet>range()</snippet></ROW><ROW><id>20034723</id><snippet>i</snippet></ROW><ROW><id>20034723</id><snippet>whatever</snippet></ROW><ROW><id>20034723</id><snippet>&gt;&gt;&gt; for whatever in range(len(a)):
...    print whatever, a[whatever]
</snippet></ROW><ROW><id>20034723</id><snippet>print</snippet></ROW><ROW><id>20034723</id><snippet>...    print i, a[i]
</snippet></ROW><ROW><id>20034723</id><snippet>i</snippet></ROW><ROW><id>20034723</id><snippet>a</snippet></ROW><ROW><id>20034723</id><snippet>i</snippet></ROW><ROW><id>20034723</id><snippet>enumerate</snippet></ROW><ROW><id>20034723</id><snippet>for key, value in enumerate(a)
    print key, value
</snippet></ROW><ROW><id>20035068</id><snippet>import os
import sys

args = sys.argv
path = "\\".join(args[1].split('\\')[:-1])
file_name = args[1].split("\\")[-1]

file_name = file_name.lower()
file_name = file_name.replace(' ','_')

file_name = path+'\\'+file_name
os.rename(args[1],file_name)
</snippet></ROW><ROW><id>20035084</id><snippet>db = SQLAlchemy(app)
</snippet></ROW><ROW><id>20035084</id><snippet>db.create_all()
</snippet></ROW><ROW><id>20035144</id><snippet>page</snippet></ROW><ROW><id>20035144</id><snippet>page = ""
# ...
else:
    page += template("./views/header.tpl", page = page, admin = admin)
</snippet></ROW><ROW><id>20035144</id><snippet>page</snippet></ROW><ROW><id>20035144</id><snippet>""</snippet></ROW><ROW><id>20035144</id><snippet>page_data</snippet></ROW><ROW><id>20035144</id><snippet>page_data = {"name": "welcome", "title": "Welcome", "icon": "/images/welcome-icon.png"}
# ...
page = ""
# ...
else:
    page += template("./views/header.tpl", page=page_data, admin=admin)
</snippet></ROW><ROW><id>20035173</id><snippet>class A():
    def f(self):
        return 2

    def w(self, f):
        return fr + 5 

A.f = dec(A.w)(A.f.__func__)
</snippet></ROW><ROW><id>20035173</id><snippet>w</snippet></ROW><ROW><id>20035173</id><snippet>class A():
    def w(self, f):
        return fr + 5 

    @dec(w)
    def f(self):
        return 2
</snippet></ROW><ROW><id>20035173</id><snippet>A.w</snippet></ROW><ROW><id>20035173</id><snippet>self</snippet></ROW><ROW><id>20035173</id><snippet>def decorate(w):
    def _wrap(f):
        def _call(self, *args, **kwargs):
            return w(self, f(*args, **kwargs))
        def _call
    return _wrap
</snippet></ROW><ROW><id>20035173</id><snippet>w</snippet></ROW><ROW><id>20035173</id><snippet>w</snippet></ROW><ROW><id>20035173</id><snippet>f</snippet></ROW><ROW><id>20035173</id><snippet>class A():
    def f(self):
        return self.w(2)

    def w(self, f):
        return fr + 5 
</snippet></ROW><ROW><id>20035635</id><snippet>def add_vectors(v1, v2):
    angle_1, l_1 = v1
    angle_2, l_2 = v2
    x=math.sin(angle1)*l_1+math.sin(angle2)*l_2
    y=math.cos(angle1)*l_1+math.cos(angle2)*l_2

    angle=0.5*math.pi-math.atan2(y, x)
    length=math.hypot(x, y)
    return (angle, length)
</snippet></ROW><ROW><id>20035692</id><snippet>if</snippet></ROW><ROW><id>20035692</id><snippet>if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
</snippet></ROW><ROW><id>20035692</id><snippet>test</snippet></ROW><ROW><id>20035692</id><snippet>lst = my_list()
if lst:
     print(lst[2] * lst[0] / lst[1])
</snippet></ROW><ROW><id>20035891</id><snippet>python my_script.py</snippet></ROW><ROW><id>20035891</id><snippet>my_script.pyc</snippet></ROW><ROW><id>20036160</id><snippet>gc</snippet></ROW><ROW><id>20036160</id><snippet>MyClass()</snippet></ROW><ROW><id>20036297</id><snippet>usage: capture.py url &gt; webpage.png
</snippet></ROW><ROW><id>20036297</id><snippet>from PyQt4 import QtCore, QtGui, QtWebKit

class WebPage(QtWebKit.QWebPage):
    def __init__(self):
        QtWebKit.QWebPage.__init__(self)
        self.mainFrame().setScrollBarPolicy(
            QtCore.Qt.Horizontal, QtCore.Qt.ScrollBarAlwaysOff)
        self.mainFrame().setScrollBarPolicy(
            QtCore.Qt.Vertical, QtCore.Qt.ScrollBarAlwaysOff)
        self.mainFrame().loadFinished.connect(self.handleLoadFinished)
        printer = QtGui.QPrinter()
        printer.setPaperSize(QtGui.QPrinter.A4)
        self.setViewportSize(printer.paperSize(
            QtGui.QPrinter.DevicePixel).toSize())

    def capture(self, url):
        self._url = QtCore.QUrl(url)
        QtCore.QTimer.singleShot(0, self.handleLoad)

    def handleLoad(self):
        self.mainFrame().load(self._url)

    def handleLoadFinished(self):
        image = QtGui.QImage(self.viewportSize(),
                             QtGui.QImage.Format_ARGB32)
        painter = QtGui.QPainter(image)
        self.mainFrame().render(painter)
        painter.end()
        output = QtCore.QFile()
        output.open(1, QtCore.QIODevice.WriteOnly)
        image.save(output, 'PNG')
        sys.exit(0)

if __name__ == '__main__':

    import sys, signal
    app = QtGui.QApplication(sys.argv)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    page = WebPage()
    page.capture(sys.argv[1])
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20036362</id><snippet>------</snippet></ROW><ROW><id>20036362</id><snippet>import csv
with open('File1', 'r', newline='') as f:
    # If you don't pass field names
    # they are taken from the first row.
    reader = csv.DictReader(f)
    for line in reader:
        # `line` is a dict {'UID': val, 'A': val, ... }
        print line
</snippet></ROW><ROW><id>20036362</id><snippet>import csv
import re

r = re.compile(r'[ ]+')


def trim_whitespaces(f):
    for line in f:
        yield r.sub(',', line)

with open('test.txt', 'r', newline='') as f:
    reader = csv.DictReader(trim_whitespaces(f))
    for line in reader:
        print line
</snippet></ROW><ROW><id>20036402</id><snippet>filler, sword, shield, amulet = 'f', 's', 'h', 'a'
plain_mobs, store = 'pm', 'st'

sword   = ["Sword "  ,0  ,0  ,0  ,5  ,0 ,20     ,"Sword"]
trader_outpost  = [filler,sword,shield,amulet]
ec = (5,3,  "Trader Outpost"        ,plain_mobs      ,store         ,trader_outpost)
location = ec

print(location[5][1][0])
=&gt; Sword
</snippet></ROW><ROW><id>20036467</id><snippet>readlines()</snippet></ROW><ROW><id>20036467</id><snippet>lines[j][i]</snippet></ROW><ROW><id>20036467</id><snippet>f = open('sample.txt', 'r')
lines = f.readlines()
print lines[10][4]  # Prints 4th character of the 10th line
</snippet></ROW><ROW><id>20036626</id><snippet>input()</snippet></ROW><ROW><id>20036626</id><snippet>questions()</snippet></ROW><ROW><id>20036626</id><snippet>time.time()</snippet></ROW><ROW><id>20036626</id><snippet>start_time = time.time()                 # "now" at the start
while time.time() &lt; start_time + 60:     # "not 60 seconds later"
    questions()
</snippet></ROW><ROW><id>20036626</id><snippet>time.sleep()</snippet></ROW><ROW><id>20036626</id><snippet>input()</snippet></ROW><ROW><id>20036626</id><snippet>questions()</snippet></ROW><ROW><id>20036626</id><snippet>score += 1</snippet></ROW><ROW><id>20036626</id><snippet>signal.alarm(60)</snippet></ROW><ROW><id>20036626</id><snippet>signal.signal(signal.SIGALRM, signal.default_int_handler)</snippet></ROW><ROW><id>20036626</id><snippet>try:
    while True:   # infinite loop, until interrupted
        questions()
except KeyboardInterrupt:
    pass          # interrupted, now we're out of the loop
</snippet></ROW><ROW><id>20036626</id><snippet>time.time()</snippet></ROW><ROW><id>20036669</id><snippet>code</snippet></ROW><ROW><id>20036669</id><snippet>['Y', 'G', 'R']</snippet></ROW><ROW><id>20036669</id><snippet>join</snippet></ROW><ROW><id>20036669</id><snippet>code</snippet></ROW><ROW><id>20036669</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20036669</id><snippet>eval</snippet></ROW><ROW><id>20036677</id><snippet>In [14]: %paste
def isPresent(L, val):
  if val in L:
    return True
  else:
    return any(isPresent(i,val) for i in L if isinstance(i, list))

## -- End pasted text --

In [15]: L = [[5], [[1], [[2, 3], [4]]]]

In [16]: isPresent(L, 1
   ....: )
Out[16]: True

In [17]: isPresent(L, 2)
Out[17]: True

In [18]: isPresent(L, 3)
Out[18]: True

In [19]: isPresent(L, 4)
Out[19]: True

In [20]: isPresent(L, 5)
Out[20]: True

In [21]: isPresent(L, 6)
Out[21]: False
</snippet></ROW><ROW><id>20036977</id><snippet>a</snippet></ROW><ROW><id>20036977</id><snippet>class ASearcher:
    def __init__(self, a):
        self.a = a
    def isin(self, b):
        a = self.a
        a0 = a[0]
        lena = len(a)
        i = 0
        try:
            while 1:
                j = b.index(a0, i) # raises ValueError if not found
                if a == b[j: j+lena]:
                    return True
                i = j+1  # start search over 1 position later
        except ValueError:
            return False
</snippet></ROW><ROW><id>20036977</id><snippet>asearch = ASearcher([6,7,8,9,10])
print asearch.isin([1,3,4,6,7,8,9,10])
</snippet></ROW><ROW><id>20036977</id><snippet>True</snippet></ROW><ROW><id>20037001</id><snippet>between_time</snippet></ROW><ROW><id>20037030</id><snippet>apples = [red, green]
for type in apples:
    for item in type:
        print item
</snippet></ROW><ROW><id>20037121</id><snippet>&gt;&gt;&gt; values = [('Year', 'make', 'model')]
&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for lst in values:
...     leaf = result
...     for path in lst[:-2]:
...        leaf = leaf.setdefault(path, {})
...     leaf.setdefault(lst[-2], list()).append(lst[-1])
...
&gt;&gt;&gt; result
{'Year': {'make': ['model']}}
</snippet></ROW><ROW><id>20037286</id><snippet>MacOSX</snippet></ROW><ROW><id>20037286</id><snippet>fig.canvas.manager.window</snippet></ROW><ROW><id>20037286</id><snippet>AttributeError: 'FigureManagerMac' object has no attribute 'window'</snippet></ROW><ROW><id>20037286</id><snippet>TkAgg</snippet></ROW><ROW><id>20037286</id><snippet>fig.canvas.manager</snippet></ROW><ROW><id>20037286</id><snippet>window</snippet></ROW><ROW><id>20037286</id><snippet>import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
fig = plt.figure()
plt.plot([0,1],[0,1])
#Put figure window on top of all other windows
fig.canvas.manager.window.attributes('-topmost', 1)
#After placing figure window on top, allow other windows to be on top of it later
fig.canvas.manager.window.attributes('-topmost', 0)
</snippet></ROW><ROW><id>20037286</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>20037286</id><snippet>matplotlib.rcParams['backend'] = 'TkAgg'</snippet></ROW><ROW><id>20037286</id><snippet>MacOSX</snippet></ROW><ROW><id>20037286</id><snippet>TkAgg</snippet></ROW><ROW><id>20037286</id><snippet>matplotlib.get_backend</snippet></ROW><ROW><id>20037286</id><snippet>TkAgg</snippet></ROW><ROW><id>20037362</id><snippet>lst1 = [[k] + v for k, v in dct1.iteritems()]
</snippet></ROW><ROW><id>20037362</id><snippet>dct1 = {v[0]: v[1:] for v in lst1}
</snippet></ROW><ROW><id>20037362</id><snippet>def convertDL(val):
    if isinstance(val, dict):
        return [[k] + v for k, v in val.iteritems()]
    return {v[0]: v[1:] for v in val}
</snippet></ROW><ROW><id>20037362</id><snippet>.items()</snippet></ROW><ROW><id>20037362</id><snippet>.iteritems()</snippet></ROW><ROW><id>20037362</id><snippet>&gt;&gt;&gt; def convertDL(val):
...     if isinstance(val, dict):
...         return [[k] + v for k, v in val.iteritems()]
...     return {v[0]: v[1:] for v in val}
... 
&gt;&gt;&gt; convertDL({'a':[1,2], 'b':[3], 'c':[4,5]})
[['a', 1, 2], ['c', 4, 5], ['b', 3]]
&gt;&gt;&gt; convertDL([['a', 1, 2], ['c', 4, 5], ['b', 3]])
{'a': [1, 2], 'c': [4, 5], 'b': [3]}
</snippet></ROW><ROW><id>20037395</id><snippet>if myboolean : ...
</snippet></ROW><ROW><id>20037395</id><snippet>if myboolean==true : ...
</snippet></ROW><ROW><id>20037405</id><snippet>t.mainloop()</snippet></ROW><ROW><id>20037405</id><snippet>t.mainloop()</snippet></ROW><ROW><id>20037405</id><snippet>from Tkinter import *
import ImageTk
import time

def scrollToTop():
    print "I'm in scrollToTop()"
    canvas.move(image, 0, -1)
    t.after(1000, scrollToTop)

t = Tk()
canvas = Canvas(t,height=256,width=256)
canvas.pack()

arrows = [1]
arrows[0] = ImageTk.PhotoImage(file="arrow.bmp")
image = canvas.create_image(20,100,image=arrows[0],tags="token")
scrollToTop()

t.mainloop();
</snippet></ROW><ROW><id>20037405</id><snippet>t.after()</snippet></ROW><ROW><id>20037405</id><snippet>()</snippet></ROW><ROW><id>20037405</id><snippet>lambda</snippet></ROW><ROW><id>20037405</id><snippet>from Tkinter import *
import ImageTk
import time

def scrollToTop(imaget):
    print "I'm in scrollToTop()"
    canvas.move(imaget, 0, -1)
    t.after(1000, lambda:scrollToTop(imaget))

t = Tk()
canvas = Canvas(t,height=256,width=256)
canvas.pack()

arrows = [1]
arrows[0] = ImageTk.PhotoImage(file="arrow.bmp")
image = canvas.create_image(20,100,image=arrows[0],tags="token")
scrollToTop(image)

t.mainloop();
</snippet></ROW><ROW><id>20037521</id><snippet>step</snippet></ROW><ROW><id>20037521</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def my_lines(ax, pos, *args, **kwargs):
    if ax == 'x':
        for p in pos:
            plt.axvline(p, *args, **kwargs)
    else:
        for p in pos:
            plt.axhline(p, *args, **kwargs)

bits = [0,1,0,1,0,0,1,1,1,0,0,1,0]
data = np.repeat(bits, 2)
clock = 1 - np.arange(len(data)) % 2
manchester = 1 - np.logical_xor(clock, data)
t = 0.5 * np.arange(len(data))

plt.hold(True)
my_lines('x', range(13), color='.5', linewidth=2)
my_lines('y', [0.5, 2, 4], color='.5', linewidth=2)
plt.step(t, clock + 4, 'r', linewidth = 2, where='post')
plt.step(t, data + 2, 'r', linewidth = 2, where='post')
plt.step(t, manchester, 'r', linewidth = 2, where='post')
plt.ylim([-1,6])

for tbit, bit in enumerate(bits):
    plt.text(tbit + 0.5, 1.5, str(bit))

plt.gca().axis('off')
plt.show()
</snippet></ROW><ROW><id>20037641</id><snippet>url(r'^date-add/(?P&lt;entity_id&gt;\d+)/(?P&lt;date&gt;\d{4}-\d{2}-\d{2})/$', views.date_add, name='date_add'),
</snippet></ROW><ROW><id>20037641</id><snippet>def date_add(request, entity_id, date):
    #convert to datetime object from string here. 
</snippet></ROW><ROW><id>20037658</id><snippet>s.send(str(limit) + '\n')
</snippet></ROW><ROW><id>20037794</id><snippet>try...finally</snippet></ROW><ROW><id>20037794</id><snippet>def myfunc():
    try:
        results = []
        for i in range(1000):
            # do something
            results.append(something)
    finally:
        return(results)
</snippet></ROW><ROW><id>20037879</id><snippet>from setuptools import setup
setup(
    ...
    packages=["myapp"],
    packages_data={
        "myapp": "relative/path/to/resources/*",
    },
    ...
)
</snippet></ROW><ROW><id>20037879</id><snippet>import pkg_resources
data_stream = pkg_resources.resource_stream('myapp', 'relative/path/filename')
data = data_stream.read()
</snippet></ROW><ROW><id>20037879</id><snippet>resource_string</snippet></ROW><ROW><id>20037879</id><snippet>resource_filename</snippet></ROW><ROW><id>20038283</id><snippet>Connection: Keep-alive</snippet></ROW><ROW><id>20038291</id><snippet>TREND_REGEX = re.compile('(^.*?)(?:\((?:([^-)])-([^)])|(\d+)-(\d+);(\d+)|([^)|]+(?:\|[^)|]+)*))\)(.*))?$')

def expand(trend):
    m = TREND_REGEX.match(trend)
    if m.group(8):
        suffixes = expand(m.group(8))
    else:
        suffixes = ['']
    if m.group(2):
        for z in suffixes:
            for i in range(ord(m.group(2)), ord(m.group(3))+1):
                yield m.group(1) + chr(i) + z
    elif m.group(4):
        for z in suffixes:
            for i in range(int(m.group(4)), int(m.group(5))+1, int(m.group(6))):
                yield m.group(1) + str(i) + z
    elif m.group(7):
        for z in suffixes:
            for s in m.group(7).split('|'):
                yield m.group(1) + s + z
    else:
        yield trend
</snippet></ROW><ROW><id>20038302</id><snippet>with open(infilename) as infile:
    nucStart=69
    nucStop=497
    nucleotides=[]
    for line in infile:
        if line.startswith("&gt;"): 
            # process the previous list if populated
            if len(nucleotides) &gt; 0:
                nucleotides = ''.join(nucleotides)  # make a single string
                # write out the accession information and the nucleotides we want
                outfile.write("%s %s" % (accession_line,
                                         nucleotides[nucStart-start-1:nucStop-start]))
                nucleotides=[]   # clear it for the next run
            # this is the start of the next sequence
            accession_line = line
            start = int(line.split('.')[1])
        else:
            # this is a line containing a partial nucleotide sequence, so add it
            nucleotides.append(line)
</snippet></ROW><ROW><id>20038352</id><snippet>df.index.names = [None]
</snippet></ROW><ROW><id>20038352</id><snippet>In [11]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 'B']).set_index('A')

In [12]: df
Out[12]: 
   B
A   
1  2
3  4

In [13]: df.index.names = [None]

In [14]: df
Out[14]: 
   B
1  2
3  4
</snippet></ROW><ROW><id>20038352</id><snippet>In [15]: df.reset_index() # col_fill=['A', 'B'])
Out[15]: 
   index  B
0      1  2
1      3  4
</snippet></ROW><ROW><id>20038352</id><snippet>In [16]: df.reset_index(col_fill=['A'])
Out[16]: 
   A  B
0  1  2
1  3  4
</snippet></ROW><ROW><id>20038395</id><snippet>k</snippet></ROW><ROW><id>20038395</id><snippet>k</snippet></ROW><ROW><id>20038395</id><snippet>map_of</snippet></ROW><ROW><id>20038395</id><snippet>def find_majority(k):
    myMap = {}
    maximum = ( '', 0 ) # (occurring element, occurrences)
    for n in k:
        if n in myMap: myMap[n] += 1
        else: myMap[n] = 1

        # Keep track of maximum on the go
        if myMap[n] &gt; maximum[1]: maximum = (n,myMap[n])

    return maximum
</snippet></ROW><ROW><id>20038395</id><snippet>&gt;&gt;&gt; find_majority([1,2,3,4,3,3,2,4,5,6,1,2,3,4,5,1,2,3,4,6,5])
(3, 5)
</snippet></ROW><ROW><id>20038592</id><snippet>slope = (y2-y1)/(x2-x1)
</snippet></ROW><ROW><id>20038592</id><snippet>x1 == x2</snippet></ROW><ROW><id>20038592</id><snippet>if x1 == x2:
    slope = float("inf")
else:
    slope = (y2-y1)/(x2-x1)
print(slope)
</snippet></ROW><ROW><id>20038592</id><snippet>slope = float("inf") if x1 == x2 else (y2-y1)/(x2-x1)
</snippet></ROW><ROW><id>20038620</id><snippet>urlencode()</snippet></ROW><ROW><id>20038620</id><snippet>urllib</snippet></ROW><ROW><id>20038620</id><snippet>content_toSend = urllib.urlencode({
    'guestbook_name' : guestbook_name,
    'content' : greeting.content
    })
</snippet></ROW><ROW><id>20038663</id><snippet>&gt;&gt;&gt; p1 = np.array([1,2,3])
&gt;&gt;&gt; p2 = np.array([10, -3, 4])
&gt;&gt;&gt; np.linalg.norm(p1-p2)
10.344080432788601
</snippet></ROW><ROW><id>20038663</id><snippet>&gt;&gt;&gt; sum((i-j)**2 for i,j in zip(p1, p2))**0.5
10.344080432788601
</snippet></ROW><ROW><id>20038663</id><snippet>abs( np.linalg.norm(p1) - np.linalg.norm(p2) )</snippet></ROW><ROW><id>20038663</id><snippet>(0,0,0)</snippet></ROW><ROW><id>20038663</id><snippet>p1</snippet></ROW><ROW><id>20038663</id><snippet>(0,0,0)</snippet></ROW><ROW><id>20038663</id><snippet>p2</snippet></ROW><ROW><id>20038777</id><snippet>In [11]: df['Population'].str.replace(',', '').astype(int)  # or float
Out[11]: 
0      36136
1    5399200
2        800
3    1234571
4     416055
Name: Population, dtype: int64

In [12]: df['Population'] = df['Population'].str.replace(',', '').astype(int)
</snippet></ROW><ROW><id>20038884</id><snippet>pip install sqlalchemy-migrate==0.7.2
</snippet></ROW><ROW><id>20038973</id><snippet>In [11]: '[%s]' % ','.join(test.splitlines())
Out[11]: '[{"a":1,"b":2},{"a":3,"b":4}]'
</snippet></ROW><ROW><id>20038973</id><snippet>In [21]: %timeit pd.read_json('[%s]' % ','.join(test.splitlines()))
1000 loops, best of 3: 977 µs per loop

In [22]: %timeit l=[ json.loads(l) for l in test.splitlines()]; df = pd.DataFrame(l)
1000 loops, best of 3: 282 µs per loop

In [23]: test_100 = '\n'.join([test] * 100)

In [24]: %timeit pd.read_json('[%s]' % ','.join(test_100.splitlines()))
1000 loops, best of 3: 1.25 ms per loop

In [25]: %timeit l = [json.loads(l) for l in test_100.splitlines()]; df = pd.DataFrame(l)
1000 loops, best of 3: 1.25 ms per loop

In [26]: test_1000 = '\n'.join([test] * 1000)

In [27]: %timeit l = [json.loads(l) for l in test_1000.splitlines()]; df = pd.DataFrame(l)
100 loops, best of 3: 9.78 ms per loop

In [28]: %timeit pd.read_json('[%s]' % ','.join(test_1000.splitlines()))
100 loops, best of 3: 3.36 ms per loop
</snippet></ROW><ROW><id>20039109</id><snippet>.index()</snippet></ROW><ROW><id>20039109</id><snippet>enumerate()</snippet></ROW><ROW><id>20039109</id><snippet>for i, x in enumerate(listword):
    # i is the index, x is the character
    if x == current:
        blanks[i] = listword[i] + " "
</snippet></ROW><ROW><id>20039123</id><snippet>common, uncommon = lists[0], lists[0]
for clist in lists:
    common = [item for item in common if item in clist]
uncommon = [[item for item in clist if item not in common] for clist in lists ]
print common, uncommon
</snippet></ROW><ROW><id>20039123</id><snippet>['a', 'b', 'c'] [['d'], ['d', 'e'], ['x'], ['d', 'e', 'f']]
</snippet></ROW><ROW><id>20039123</id><snippet>common = lists[0]
from itertools import takewhile
for l1, l2 in zip(lists, lists[1:]):
    common = [i[0] for i in takewhile(lambda i: i[0] == i[1] == i[2], zip(l1, l2, common))]
uncommon = [clist[len(common):] for clist in lists]
print common, uncommon
</snippet></ROW><ROW><id>20039166</id><snippet>&gt;&gt;&gt; import json  
&gt;&gt;&gt;
&gt;&gt;&gt; dict_str = """{"a":[1,2,3], "b":[4,5]}
&gt;&gt;&gt;               {"z":[-1,-2], "x":-3}"""
&gt;&gt;&gt;
&gt;&gt;&gt; #strip the whitespace away while making list from the lines in dict_str 
&gt;&gt;&gt; dict_list = [d.strip() for d in dict_str.splitlines()]
&gt;&gt;&gt;                                                        
&gt;&gt;&gt; dict_list
&gt;&gt;&gt; ['{"a":[1,2,3], "b":[4,5]}', '{"z":[-1,-2], "x":-3}']
&gt;&gt;&gt;
&gt;&gt;&gt; j = [json.loads(i) for i in dict_list]
&gt;&gt;&gt; j
&gt;&gt;&gt; [{u'a': [1, 2, 3], u'b': [4, 5]}, {u'x': -3, u'z': [-1, -2]}]
</snippet></ROW><ROW><id>20039166</id><snippet>&gt;&gt;&gt; d = {('Dict'+str(i+1)):v for i in range(len(j)) for v in j}
&gt;&gt;&gt; d
&gt;&gt;&gt; {'Dict1': {u'x': -3, u'z': [-1, -2]}, 'Dict2': {u'x': -3, u'z': [-1, -2]}}
</snippet></ROW><ROW><id>20039366</id><snippet>newnumber</snippet></ROW><ROW><id>20039366</id><snippet>results = [x for x in results if x%newnumber!=0]
results.append(newnumber)
</snippet></ROW><ROW><id>20039366</id><snippet>newnumber</snippet></ROW><ROW><id>20039366</id><snippet>results.append(newnumber)
results = [results[i] for i in range(0,len(results)-1) if results[i]%newnumber!=0]
</snippet></ROW><ROW><id>20039389</id><snippet>Raw</snippet></ROW><ROW><id>20039389</id><snippet>netpacket = Raw('\xDE\xB0...')
</snippet></ROW><ROW><id>20039389</id><snippet>sendp</snippet></ROW><ROW><id>20039389</id><snippet>sendp(netpacket, iface="eth1")
</snippet></ROW><ROW><id>20039403</id><snippet>import Image

from os import listdir
from os.path import isfile, join
files = [ f for f in listdir("/mnt/hgfs/Documents/Notebooks/test1/") if isfile(join("/mnt/hgfs/Documents/Notebooks/test1/", f)) ]

new_im = Image.new('RGB', (3000,3000))

index = 0
for i in xrange(0,3000,300):
    for j in xrange(0,3000,300):
        im = Image.open(files[index])
        im.thumbnail((300,300))
        new_im.paste(im, (i,j))
        index += 1

new_im.save("hola.png")
</snippet></ROW><ROW><id>20039415</id><snippet>_area</snippet></ROW><ROW><id>20039415</id><snippet>main</snippet></ROW><ROW><id>20039415</id><snippet>__init__</snippet></ROW><ROW><id>20039415</id><snippet>main</snippet></ROW><ROW><id>20039415</id><snippet>from Tkinter import *
import math

class CircleArea(Frame):

    def __init__(self):
        """Sets up a window and widgets."""
        Frame.__init__(self)
        self.master.title("Circle Area")
        self.grid()

        #Label and field for radius
        self._radiusLabel = Label(self, text = "Radius")
        self._radiusLabel.grid(row = 0, column = 0)
        self._radiusVar = DoubleVar()
        self._radiusEntry = Entry(self, textvariable = self._radiusVar)
        self._radiusEntry.grid(row = 0, column = 1)

        #Label and field for the area
        self._areaLabel = Label(self, text = "Area")
        self._areaLabel.grid(row = 1, column = 0)
        self._areaVar = DoubleVar()
        self._areaEntry = Entry(self, textvariable = self._areaVar)
        self._areaEntry.grid(row = 1, column = 1)

        # The command button
        self._button = Button(self, text = "Compute", command = self._area)
        self._button.grid(row = 2, column = 0, columnspan = 2)

    def _area(self):
        """Event handler for button."""
        radius = self._radiusVar.get()
        area = radius ** 2 * math.pi
        self._areaVar.set(area)

run = CircleArea()
run.mainloop()
</snippet></ROW><ROW><id>20039455</id><snippet># renamed
# x -&gt; im (the input image numpy array)
# y -&gt; kernel (the emboss kernel)
# i -&gt; y (the y coordinate)
# j -&gt; x (the x coordinate)
# d -&gt; output (the output numpy array)
# k -&gt; color (the number of the color channel 0-2)
# sum -&gt; sum_ (sum is a built-in, so we shouldn't use that name)
def emboss(im,kernel):
    output=numpy.empty((h,w*3),numpy.uint8)
    print "len im[0]=",len(im[0])
    print "len kernel=", len(kernel)
    print "len kernel[0]=", len(kernel[0])
    for y in xrange(len(im)):
        for x in xrange(0,len(im[0]),3):
            for color in xrange(3): #r,g,b loop
                #if the next line is used a correct (but not embosed) image results
                #output[y][x+color] = im[y][x+color]
                sum_ = 0
                for l in xrange(0,3,1):
                    for m in xrange(0,3,1):
                        #the next line embosses but causes a triple image in the process
                        sum_ += (im[(y+(l-1))%h][((x+color)+((m-1)*3))%w]) * kernel[l][m]

                #the line below adjusts an embossed images brightness
                #if not embossing comment out this line
                output[y][x+color]=clamp(sum_+127)
    return output
</snippet></ROW><ROW><id>20039455</id><snippet>sum_ += (im[(y+(l-1))%h][((x+color)+((m-1)*3))%w]) * kernel[l][m]
</snippet></ROW><ROW><id>20039455</id><snippet>mod</snippet></ROW><ROW><id>20039455</id><snippet>w</snippet></ROW><ROW><id>20039455</id><snippet>x-coord</snippet></ROW><ROW><id>20039455</id><snippet>mod</snippet></ROW><ROW><id>20039455</id><snippet>sum = sum + ((x[(i+(l-1))%h][((j+k)+((m-1)*3))%(w*3)]) * y[l][m])
</snippet></ROW><ROW><id>20039731</id><snippet>ctab.groupby(level=0, group_keys=False).apply(pd.Series.sort_index, ascending=False)
</snippet></ROW><ROW><id>20039731</id><snippet>ctab.sort_index(ascending=[True, False])
</snippet></ROW><ROW><id>20039870</id><snippet>##################################### Method 1
import mechanize
import cookielib
from BeautifulSoup import BeautifulSoup
import html2text

# Browser
br = mechanize.Browser()

# Cookie Jar
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)

# Browser options
br.set_handle_equiv(True)
br.set_handle_gzip(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)

# Follows refresh 0 but not hangs on refresh &gt; 0
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

# User-Agent (this is cheating, ok?)
br.addheaders = [('User-agent', 'Chrome')]

# The site we will navigate into, handling it's session
br.open('https://github.com/login')

# Inspect name of the form
for f in br.forms():
    print f

# Select the second (index one) form - the first form is a search query box
br.select_form(nr=1)

# User credentials
br.form['login'] = 'mylogin'
br.form['password'] = 'mypass'

# Login
br.submit()

print(br.open('https://github.com/settings/emails').read())
</snippet></ROW><ROW><id>20040062</id><snippet>import csv

with open('input_file.txt') as f:
   reader = csv.reader(f)
   names = [line[0] for line in reader]

with open('new_file.txt','w') as f:
   for name in names:
      f.write('{0}\n'.format(name))
</snippet></ROW><ROW><id>20040493</id><snippet>?</snippet></ROW><ROW><id>20040493</id><snippet>.+</snippet></ROW><ROW><id>20040493</id><snippet>&gt;&gt;&gt; s = 'Alice in the Wonderland [1865] [Charles Lutwidge Dodgson] Rating 4.5/5'
&gt;&gt;&gt; re.sub(r'\[.+?\]\s*', '', s)
'Alice in the Wonderland Rating 4.5/5'
</snippet></ROW><ROW><id>20040493</id><snippet>.</snippet></ROW><ROW><id>20040493</id><snippet>+</snippet></ROW><ROW><id>20040493</id><snippet>?</snippet></ROW><ROW><id>20040493</id><snippet>x?</snippet></ROW><ROW><id>20040493</id><snippet>.*</snippet></ROW><ROW><id>20040493</id><snippet>*</snippet></ROW><ROW><id>20040493</id><snippet>\s</snippet></ROW><ROW><id>20040493</id><snippet>.+?</snippet></ROW><ROW><id>20040493</id><snippet>[^x]</snippet></ROW><ROW><id>20040493</id><snippet>not "x"</snippet></ROW><ROW><id>20040493</id><snippet>\[[^\]]+\]</snippet></ROW><ROW><id>20040774</id><snippet>threadLimiter = threading.BoundedSemaphore(maximumNumberOfThreads)

class YourThread(threading.Thread):

    def run(self):
        threadLimiter.acquire()
        try:
            &lt;your code here&gt;
        finally:
            threadLimiter.release()
</snippet></ROW><ROW><id>20040774</id><snippet>threadLimiter.acquire()</snippet></ROW><ROW><id>20041082</id><snippet>None</snippet></ROW><ROW><id>20041082</id><snippet>NoneType</snippet></ROW><ROW><id>20041082</id><snippet>None</snippet></ROW><ROW><id>20041082</id><snippet>game1</snippet></ROW><ROW><id>20041082</id><snippet>board1</snippet></ROW><ROW><id>20041436</id><snippet>a = ['a', 'b', 'a', 'c', 'b']
b = [0, 1, 2, 3, 4]
from collections import defaultdict
result = defaultdict(list)
for idx, item in zip(b, a):
    result[item].append(idx)
print result
</snippet></ROW><ROW><id>20041436</id><snippet>defaultdict(&lt;type 'list'&gt;, {'a': [0, 2], 'c': [3], 'b': [1, 4]})
</snippet></ROW><ROW><id>20041436</id><snippet>b</snippet></ROW><ROW><id>20041436</id><snippet>enumerate</snippet></ROW><ROW><id>20041436</id><snippet>a = ['a', 'b', 'a', 'c', 'b']
from collections import defaultdict
result = defaultdict(list)
for idx, item in enumerate(a):
    result[item].append(idx)
print result
</snippet></ROW><ROW><id>20041502</id><snippet>class Node:
    # with data members .data, .left, and .right
    def __init__(self, data):
        self.data = data
        self.left = self.right = None

def deleteTree(node):
    if node is not None:
        deleteTree(node.left)
        deleteTree(node.right)
        node.left = node.right = None
</snippet></ROW><ROW><id>20041502</id><snippet>NULL</snippet></ROW><ROW><id>20041558</id><snippet>&lt;script type="text/javascript"&gt;

function initTree(showline)
        {    
           {% for section, secval in the_section_setting.iteritems %}
           alert("{{secval.included}}")
           {% endfor %}
        }   
&lt;/script&gt;
</snippet></ROW><ROW><id>20041558</id><snippet>&lt;script type="text/javascript"&gt;

function initTree(showline)
        {    
           {% for section, secval in the_section_setting.iteritems %}
               {% if secval.include %}
                   alert("The {{ section }} is included.")
               {% else %}
                   alert(""The {{ section }} is not included.")
               {% endif %}
           {% endfor %}
        }   
&lt;/script&gt;
</snippet></ROW><ROW><id>20041671</id><snippet>out</snippet></ROW><ROW><id>20041671</id><snippet>dtype</snippet></ROW><ROW><id>20041671</id><snippet>dtype</snippet></ROW><ROW><id>20041671</id><snippet>&gt;&gt;&gt; arr = np.array([5.5, -7.2])
&gt;&gt;&gt; out = np.empty_like(arr, dtype=np.int64)
&gt;&gt;&gt; np.ceil(arr, out)
array([ 6, -7], dtype=int64)
&gt;&gt;&gt; out
array([ 6, -7], dtype=int64)
</snippet></ROW><ROW><id>20041712</id><snippet>type</snippet></ROW><ROW><id>20041712</id><snippet>set</snippet></ROW><ROW><id>20041712</id><snippet>&gt;&gt;&gt; my_list = [12,8,0,4,7,21,27,"O",29,3,"X","O","X","X"]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'int'&gt;, &lt;class 'str'&gt;}
&gt;&gt;&gt; set(map(type, my_list)) == {int, str}
True
&gt;&gt;&gt; set(map(type, my_list)) == {int}
False
&gt;&gt;&gt; set(map(type, my_list)) == {str}
False

&gt;&gt;&gt; my_list = [12,8,0,4,7,21,27]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'int'&gt;}

&gt;&gt;&gt; my_list = ["X", "O", "X", "X"]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'str'&gt;}
&gt;&gt;&gt; set(map(type, my_list)) == {str}
True
</snippet></ROW><ROW><id>20041712</id><snippet>type</snippet></ROW><ROW><id>20041712</id><snippet>&gt;&gt;&gt; type(1)
&lt;class 'int'&gt;
&gt;&gt;&gt; type('X')
&lt;class 'str'&gt;
</snippet></ROW><ROW><id>20041712</id><snippet>map(type, seq)</snippet></ROW><ROW><id>20041712</id><snippet>type</snippet></ROW><ROW><id>20041712</id><snippet>seq</snippet></ROW><ROW><id>20041712</id><snippet>&gt;&gt;&gt; map(type, [1, 2, 3, 'X'])
&lt;map object at 0x7fc763de6e90&gt;
&gt;&gt;&gt; list(map(type, [1, 2, 3, 'X']))
[&lt;class 'int'&gt;, &lt;class 'int'&gt;, &lt;class 'int'&gt;, &lt;class 'str'&gt;]
&gt;&gt;&gt; # Using `set`, you can get unique types.
&gt;&gt;&gt; set(map(type, [1, 2, 3, 'X']))
{&lt;class 'int'&gt;, &lt;class 'str'&gt;}
</snippet></ROW><ROW><id>20041712</id><snippet>int</snippet></ROW><ROW><id>20041712</id><snippet>str</snippet></ROW><ROW><id>20042044</id><snippet>class Message(models.Model):
    # some code...

    @property
    def sender_name(self):
        return self.sender.name # username or whatever
</snippet></ROW><ROW><id>20042044</id><snippet>class ChatsSerializer(serializers.ModelSerializer):
    # some code...

    sender_name = serializers.Field(source = 'sender_name') # source = 'name of property or method' you dont have to pass it in this example becouse model property has the same name as this serializer attribute

    class Meta:
         fields = ('sender_name', 'id', 'sender', 'recipient','thread','subject','moderation_reason','body')
</snippet></ROW><ROW><id>20042044</id><snippet>class UserModelSerializer(serializers.ModelSerializer):

    class Meta:
         model = get_user_model()

class ChatsSerializer(serializers.ModelSerializer):
    # some code...

    sender = UserModelSerializer()
    recipient = UserModelSerializer()

    class Meta:
         fields = ('sender_name', 'id', 'sender', 'recipient','thread','subject','moderation_reason','body')
</snippet></ROW><ROW><id>20042275</id><snippet>mainstr = '"Name:xxx","age":"{This":"has to","be":"replaced"}","dept":"cse"'
substr = '{This":"has to","be":"replaced"}'
print "Output = ", mainstr.replace(substr, 'checked')
#                ^ The comma here is important.
</snippet></ROW><ROW><id>20042275</id><snippet>substr = '"{This</snippet></ROW><ROW><id>20042275</id><snippet>substr = '{This"</snippet></ROW><ROW><id>20042473</id><snippet>$ scrapy shell 'http://www.euroleague.net/main' 
2013-11-18 16:39:26+0900 [scrapy] INFO: Scrapy 0.21.0 started (bot: scrapybot)
...

AttributeError: 'Response' object has no attribute 'body_as_unicode'
</snippet></ROW><ROW><id>20042473</id><snippet>parse</snippet></ROW><ROW><id>20042473</id><snippet>HtmlResponse</snippet></ROW><ROW><id>20042473</id><snippet>parse</snippet></ROW><ROW><id>20042559</id><snippet>run</snippet></ROW><ROW><id>20042559</id><snippet>for i in generator():
</snippet></ROW><ROW><id>20042559</id><snippet>generator</snippet></ROW><ROW><id>20042559</id><snippet>&gt;&gt;&gt; data = [i for i in xrange(10)]
&gt;&gt;&gt; a, b = generator(), generator()
&gt;&gt;&gt; id(a), id(b)
(37528032, 37527952)
</snippet></ROW><ROW><id>20042559</id><snippet>a</snippet></ROW><ROW><id>20042559</id><snippet>b</snippet></ROW><ROW><id>20042559</id><snippet>&gt;&gt;&gt; list(a), list(b)
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>20042559</id><snippet>ValueError: generator already executing</snippet></ROW><ROW><id>20042609</id><snippet>update_colors()</snippet></ROW><ROW><id>20042609</id><snippet>import pylab as pl
import numpy as np
cm = pl.get_cmap('OrRd')

x = np.linspace(0, 1, 100)

def update_colors(ax):
    lines = ax.lines
    colors = cm(np.linspace(0, 1, len(lines)))
    for line, c in zip(lines, colors):
        line.set_color(c)

fig, ax = pl.subplots()
for i in range(10):
    ax.plot(x, x**(1+i*0.1))
    update_colors(ax)
</snippet></ROW><ROW><id>20042711</id><snippet>PyTuple_New</snippet></ROW><ROW><id>20042711</id><snippet>PyTuple_SetItem</snippet></ROW><ROW><id>20042747</id><snippet>p = subprocess.Popen([
    "C:/Flow Check/Run Quick/Applications/Manipula.exe",
    "C:/Flow Check/Data Processing/BLAISE TO BLAISE.msu"],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>20042747</id><snippet>&gt;&gt;&gt; "abc" "xyz"
'abcxyz'
</snippet></ROW><ROW><id>20042828</id><snippet>bufferobject.c</snippet></ROW><ROW><id>20042828</id><snippet>PyTypeObject PyBuffer_Type = {
    ...
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GETCHARBUFFER | Py_TPFLAGS_HAVE_NEWBUFFER, /* tp_flags */
    ...
};
</snippet></ROW><ROW><id>20042828</id><snippet>tp_flags</snippet></ROW><ROW><id>20042828</id><snippet>Py_TPFLAGS_BASETYPE</snippet></ROW><ROW><id>20042828</id><snippet>listobject.c</snippet></ROW><ROW><id>20042828</id><snippet>buffer</snippet></ROW><ROW><id>20043642</id><snippet>import threading

class CountThread(threading.Thread):
  def __init__(self, gen):
      threading.Thread.__init__(self)
      self.gen = gen
      self.numbers_seen = 0

  def run(self):
      for i in self.gen:
          self.numbers_seen += 1


def generator(data):
    for _ in data:
        yield data

gen = generator(xrange(10000))

a = CountThread(gen)
b = CountThread(gen)

a.start()
b.start()

a.join()
b.join()

print "Numbers seen in a", a.numbers_seen
print "Numbers seen in b", b.numbers_seen
</snippet></ROW><ROW><id>20043642</id><snippet>Exception in thread Thread-2:
Traceback (most recent call last):
  File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py", line 808, in __bootstrap_inner
    self.run()
  File "test.py", line 10, in run
    for i in self.gen:
ValueError: generator already executing
</snippet></ROW><ROW><id>20043785</id><snippet>In [1]: from IPython.display import HTML

In [2]: df = pd.DataFrame(range(5), columns=['a'])

In [3]: df['a'] = df['a'].apply(lambda x: '&lt;a href="http://example.com/{0}"&gt;link&lt;/a&gt;'.format(x))

In [4]: HTML(df.to_html(escape=False))
</snippet></ROW><ROW><id>20043909</id><snippet>from datetime import datetime
from pytz import timezone
#set user timezone (GMT +10)
user_timezone = timezone('Etc/GMT+10')
#convert local time to user time
user_timezone_time = user_timezone.localize(datetime.now())
#format in 12hr time (%I for 12 hour time and %p for AM PM clarification)
formatted_user_timezone = user_timezone_time.strftime('%Y-%m-%d %I:%M:%S %p %Z%z')
print formatted_user_timezone
</snippet></ROW><ROW><id>20043909</id><snippet>timezone</snippet></ROW><ROW><id>20044389</id><snippet>conn.execute</snippet></ROW><ROW><id>20044389</id><snippet>import sqlite3
conn = sqlite3.connect(':memory:')
conn.execute('CREATE TABLE t (a integer, b integer, c integer)')
col_names = ['a', 'b', 'c']
values = [0, 1, 2]
conn.execute('INSERT INTO t (%s, %s, %s) values(?,?,?)'%tuple(col_names), values)
</snippet></ROW><ROW><id>20044389</id><snippet>exec_text = 'INSERT INTO t (' + ','.join(col_names) +') values(' + ','.join(['?'] * len(values)) + ')'
conn.exec(exec_text, values)
# as long as len(col_names) == len(values)
</snippet></ROW><ROW><id>20044605</id><snippet>def print_content():
     print web.page().mainFrame().toHtml() # or toPlainText()
     # or
     # print web.page().currentFrame().toHtml() # or toPlainText()
</snippet></ROW><ROW><id>20044605</id><snippet>web.page().mainFrame().loadFinished.connect(print_content)
# or web.loadFinished.connect(print_content)
web.load(QUrl("http://www.dukascopy.com/swiss/english/marketwatch/calendars/eccalendar/"))
web.show()
</snippet></ROW><ROW><id>20044605</id><snippet>print_content</snippet></ROW><ROW><id>20044661</id><snippet>C:\python32</snippet></ROW><ROW><id>20044661</id><snippet>% C:\python32\python
</snippet></ROW><ROW><id>20044661</id><snippet>&gt;&gt;&gt; import tkinter
&gt;&gt;&gt; tkinter._test()
</snippet></ROW><ROW><id>20044774</id><snippet>payload = {'word': 'yellow'}
r = requests.get("http://server.eu/word.py", params=payload)
</snippet></ROW><ROW><id>20044797</id><snippet>\xa0</snippet></ROW><ROW><id>20044797</id><snippet>[0 if not v.strip() else int(v.strip().split()[-1]) for v in inputlist]
</snippet></ROW><ROW><id>20044797</id><snippet>&gt;&gt;&gt; inputlist = ['\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', u'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRs\xa021790    \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', u'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRs\xa023851\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', u'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRs\xa023905\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', '\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t', u'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRs\xa026570\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t']
&gt;&gt;&gt; [0 if not v.strip() else int(v.strip().split()[-1]) for v in inputlist]
[0, 21790, 0, 23851, 0, 23905, 0, 26570]
</snippet></ROW><ROW><id>20044797</id><snippet>str.strip()</snippet></ROW><ROW><id>20044797</id><snippet>str.split()</snippet></ROW><ROW><id>20044797</id><snippet>\xa0</snippet></ROW><ROW><id>20044898</id><snippet>l = Label(root, textvariable = var)
</snippet></ROW><ROW><id>20045243</id><snippet>for i in all_neighbors(graph, node):
    print i
</snippet></ROW><ROW><id>20045243</id><snippet>list(all_neighbors(graph, node))</snippet></ROW><ROW><id>20045245</id><snippet>render()</snippet></ROW><ROW><id>20045245</id><snippet>request</snippet></ROW><ROW><id>20045245</id><snippet>return render(request, 'login.html', c)
</snippet></ROW><ROW><id>20045245</id><snippet>request.META</snippet></ROW><ROW><id>20045245</id><snippet>'login.html'</snippet></ROW><ROW><id>20045593</id><snippet>QApplication.processEvents()
</snippet></ROW><ROW><id>20045593</id><snippet>while state:
    time.sleep(.1)
    if i % 10 == 1:
        self.browser.append(str(i))
        QApplication.processEvents()
    i += 1
else:
    self.browser.append('Stop loop')
    QApplication.processEvents()
    time.sleep(3)
    sys.exit()
</snippet></ROW><ROW><id>20045616</id><snippet>def filter_factory(lookup_type):
    class ProductFilter(django_filters.FilterSet):
         price = django_filters.NumberFilter(lookup_type=lookup_type)

    return ProductFilter
</snippet></ROW><ROW><id>20045616</id><snippet>filter_factory</snippet></ROW><ROW><id>20045616</id><snippet>from .filters import filter_factory

def product_list(request):
    lookup_type_user = request.GET.get('lookup_type', 'exact')
    ProductFilter = filter_factory(lookup_type_user)
    filtered_data = ProductFilter(request.GET, queryset=Product.objects.all())
    return render(request, 'template.html', {'f': filtered_data})
</snippet></ROW><ROW><id>20045636</id><snippet>Enemy</snippet></ROW><ROW><id>20045636</id><snippet>import math

class Enemy(object):
    ...
    def move_towards_player(self, player):
        # find normalized direction vector (dx, dy) between enemy and player
        dx, dy = self.rect.x - player.rect.x, self.rect.y - player.rect.y
        dist = math.hypot(dx, dy)
        dx, dy = dx / dist, dy / dist
        # move along this normalized vector towards the player at current speed
        self.rect.x += dx * self.speed
        self.rect.y += dy * self.speed
</snippet></ROW><ROW><id>20045636</id><snippet>(dx*self.speed, dy*self.speed)</snippet></ROW><ROW><id>20045787</id><snippet>&gt;&gt;&gt; r"\'"
"\\'"
</snippet></ROW><ROW><id>20045787</id><snippet>'r'</snippet></ROW><ROW><id>20045787</id><snippet>'R'</snippet></ROW><ROW><id>20045787</id><snippet>r"\n"</snippet></ROW><ROW><id>20045787</id><snippet>'n'</snippet></ROW><ROW><id>20045787</id><snippet>r"\""</snippet></ROW><ROW><id>20045787</id><snippet>r"\"</snippet></ROW><ROW><id>20045787</id><snippet>\digit</snippet></ROW><ROW><id>20045787</id><snippet>&gt;&gt;&gt; '\0'
'\x00'
</snippet></ROW><ROW><id>20045787</id><snippet>&gt;&gt;&gt; '\\1\'\'\\2'
"\\1''\\2"
</snippet></ROW><ROW><id>20046030</id><snippet>from bs4 import BeautifulSoup

response = urllib2.urlopen(url)
soup = BeautifulSoup(response.read(), from_encoding=response.info().getparam('charset'))
title = soup.find('title').text
</snippet></ROW><ROW><id>20046030</id><snippet>title</snippet></ROW><ROW><id>20046030</id><snippet>title</snippet></ROW><ROW><id>20046030</id><snippet>r'&lt;title[^&gt;]*&gt;([^&lt;]+)&lt;/title&gt;'
</snippet></ROW><ROW><id>20046030</id><snippet>&gt;</snippet></ROW><ROW><id>20046030</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>20046068</id><snippet>__abstract__</snippet></ROW><ROW><id>20046068</id><snippet>True</snippet></ROW><ROW><id>20046068</id><snippet>class BaseModel(db.Model):
    __abstract__ = True
</snippet></ROW><ROW><id>20046239</id><snippet>sys.argv</snippet></ROW><ROW><id>20046239</id><snippet>install</snippet></ROW><ROW><id>20046239</id><snippet>setup.py</snippet></ROW><ROW><id>20046239</id><snippet>setup()</snippet></ROW><ROW><id>20046284</id><snippet>time.sleep()</snippet></ROW><ROW><id>20046418</id><snippet>getattr()</snippet></ROW><ROW><id>20046418</id><snippet>ws.write(j, k, getattr(query_value, fieldname[1]))
</snippet></ROW><ROW><id>20046418</id><snippet>getattr()</snippet></ROW><ROW><id>20046418</id><snippet>fieldname[1]</snippet></ROW><ROW><id>20046418</id><snippet>query_value</snippet></ROW><ROW><id>20046631</id><snippet>xnew = np.exp(np.arange(log(x[0]), log(x[-1]), log(x[-1]/x[0])/x.size))
</snippet></ROW><ROW><id>20046631</id><snippet>f = pow(x[-1]/x[0], 1.0/(x.size-1) )
xnew[0] = x[0]
for i in range(1,x.size):
    xnew[i] = xnew[i-1] * f
</snippet></ROW><ROW><id>20046631</id><snippet>dx=(x[-1]-x[0]) / (x.size-1)
</snippet></ROW><ROW><id>20046668</id><snippet>not</snippet></ROW><ROW><id>20046668</id><snippet>&amp;</snippet></ROW><ROW><id>20046668</id><snippet>not</snippet></ROW><ROW><id>20046668</id><snippet>if not(boolean) &amp; (fogXLeft &lt; float(cols[xCol])) &lt; fogXRight) &amp; (fogYBot &lt; float(cols[yCol]) &lt; fogYTop):
</snippet></ROW><ROW><id>20046668</id><snippet>if not ((boolean) &amp; (fogXLeft &lt; float(cols[xCol])) &lt; fogXRight) &amp; (fogYBot &lt; float(cols[yCol]) &lt; fogYTop)):
</snippet></ROW><ROW><id>20046668</id><snippet>boolean</snippet></ROW><ROW><id>20046668</id><snippet>True</snippet></ROW><ROW><id>20046668</id><snippet>if not (1 &amp; (fogXLeft &lt; float(cols[xCol])) &lt; fogXRight) &amp; (fogYBot &lt; float(cols[yCol])  &lt; fogYTop)):
</snippet></ROW><ROW><id>20046763</id><snippet>g.config.autoindex</snippet></ROW><ROW><id>20046763</id><snippet>False</snippet></ROW><ROW><id>20046763</id><snippet>&gt;&gt;&gt; from bulbs.neo4jserver import Graph
&gt;&gt;&gt; g = Graph()
&gt;&gt;&gt; g.config.autoindex = False
&gt;&gt;&gt; g.vertices.create(name="James")
</snippet></ROW><ROW><id>20046763</id><snippet>name</snippet></ROW><ROW><id>20046763</id><snippet>autoindex</snippet></ROW><ROW><id>20046763</id><snippet>False</snippet></ROW><ROW><id>20046763</id><snippet>create_vertex()</snippet></ROW><ROW><id>20046763</id><snippet>create_indexed_vertex()</snippet></ROW><ROW><id>20046763</id><snippet>create_indexed_vertex()</snippet></ROW><ROW><id>20046763</id><snippet>keys</snippet></ROW><ROW><id>20046763</id><snippet>client</snippet></ROW><ROW><id>20046763</id><snippet>get_index_keys()</snippet></ROW><ROW><id>20046763</id><snippet>_create()</snippet></ROW><ROW><id>20046763</id><snippet>get_bundle()</snippet></ROW><ROW><id>20046763</id><snippet>get_index_keys()</snippet></ROW><ROW><id>20046763</id><snippet>_keys</snippet></ROW><ROW><id>20046763</id><snippet>&gt;&gt;&gt; from bulbs.neo4jserver import Graph
&gt;&gt;&gt; g = Graph()
&gt;&gt;&gt; g.config.autoindex = False
&gt;&gt;&gt; james = g.vertices.create(name="James", city="Dallas", _keys=["name"])
&gt;&gt;&gt; julie = g.vertices.create(name="Julie", city="Dallas", _keys=["name"])
&gt;&gt;&gt; g.edges.create(james, "knows", julie, timestamp=12345, someprop="somevalue", _keys=["someprop"])
</snippet></ROW><ROW><id>20046763</id><snippet>name</snippet></ROW><ROW><id>20046763</id><snippet>someprop</snippet></ROW><ROW><id>20046763</id><snippet>city</snippet></ROW><ROW><id>20046763</id><snippet>timestamp</snippet></ROW><ROW><id>20046763</id><snippet>g.config.autoindex</snippet></ROW><ROW><id>20046763</id><snippet>True</snippet></ROW><ROW><id>20046763</id><snippet>_keys</snippet></ROW><ROW><id>20046763</id><snippet>None</snippet></ROW><ROW><id>20046763</id><snippet>g.config.autoindex</snippet></ROW><ROW><id>20046763</id><snippet>False</snippet></ROW><ROW><id>20046763</id><snippet>_keys</snippet></ROW><ROW><id>20046763</id><snippet>None</snippet></ROW><ROW><id>20046763</id><snippet>_keys</snippet></ROW><ROW><id>20046763</id><snippet>g.config.autoindex</snippet></ROW><ROW><id>20046763</id><snippet>True</snippet></ROW><ROW><id>20046763</id><snippet>False</snippet></ROW><ROW><id>20046763</id><snippet>create table</snippet></ROW><ROW><id>20046790</id><snippet>upload_to</snippet></ROW><ROW><id>20046790</id><snippet>import os
extract_url = 'http://example.com/image-name.jpg'
image_name = extract_url.split('/')[-1]
slug = os.path.splitext(image_name)[0]
my_temp = Mymodel(slug=slug)

# etc
</snippet></ROW><ROW><id>20047224</id><snippet>if row[41] == '':         # exclude jobs that were cancelled.
</snippet></ROW><ROW><id>20047288</id><snippet>if</snippet></ROW><ROW><id>20047288</id><snippet>elif</snippet></ROW><ROW><id>20047288</id><snippet>print</snippet></ROW><ROW><id>20047288</id><snippet>elif choice == "1":
    print("Here is your Keyword")
    import random
    with open('keywords_1.txt') as f:
        a = random.choice(list(f)).strip()
        print ("    ")
        print ("------", a)
</snippet></ROW><ROW><id>20047288</id><snippet>while True:</snippet></ROW><ROW><id>20047288</id><snippet>elif choice == "2":
    break
else:
    print('Incorrect option')
</snippet></ROW><ROW><id>20047425</id><snippet>LISP</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>Common LISP</snippet></ROW><ROW><id>20047425</id><snippet>Common LISP</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>Java</snippet></ROW><ROW><id>20047425</id><snippet>Python</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>elisp</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>Common LISP</snippet></ROW><ROW><id>20047425</id><snippet>#!</snippet></ROW><ROW><id>20047425</id><snippet>CLISP</snippet></ROW><ROW><id>20047425</id><snippet>#!/usr/bin/clisp -C</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>#!/usr/bin/ikarus --r6rs-script</snippet></ROW><ROW><id>20047425</id><snippet>Clojure</snippet></ROW><ROW><id>20047425</id><snippet>#!/usr/bin/env java -cp /path/to/clojure-1.2.0.jar clojure.main</snippet></ROW><ROW><id>20047425</id><snippet>Common LISP</snippet></ROW><ROW><id>20047425</id><snippet>Clojure</snippet></ROW><ROW><id>20047425</id><snippet>DrRacket</snippet></ROW><ROW><id>20047425</id><snippet>ikarus</snippet></ROW><ROW><id>20047425</id><snippet>Common LISP</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>Racket</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047425</id><snippet>Scheme</snippet></ROW><ROW><id>20047538</id><snippet>None</snippet></ROW><ROW><id>20047538</id><snippet>is None</snippet></ROW><ROW><id>20047538</id><snippet>&gt;&gt;&gt; six_or_none(4) is None
True
</snippet></ROW><ROW><id>20047738</id><snippet>newuser</snippet></ROW><ROW><id>20047738</id><snippet>test()</snippet></ROW><ROW><id>20047805</id><snippet>QWebFrame.evaluateJavaScript</snippet></ROW><ROW><id>20047805</id><snippet>None</snippet></ROW><ROW><id>20047805</id><snippet>null</snippet></ROW><ROW><id>20047805</id><snippet>undefined</snippet></ROW><ROW><id>20047805</id><snippet>None</snippet></ROW><ROW><id>20047900</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>20047900</id><snippet>dict.viewvalues()</snippet></ROW><ROW><id>20047900</id><snippet>dict.viewitems()</snippet></ROW><ROW><id>20047900</id><snippet>list()</snippet></ROW><ROW><id>20047900</id><snippet>&gt;&gt;&gt; d={'A': [1,2,3], 'B': "Hello", 'C': ["this is good"]}
&gt;&gt;&gt; d.keys()
dict_keys(['C', 'B', 'A'])
&gt;&gt;&gt; list(d.keys())
['C', 'B', 'A']
&gt;&gt;&gt; list(d.values())
[['this is good'], 'Hello', [1, 2, 3]]
&gt;&gt;&gt; list(d.items())
[('C', ['this is good']), ('B', 'Hello'), ('A', [1, 2, 3])]
</snippet></ROW><ROW><id>20047900</id><snippet>list()</snippet></ROW><ROW><id>20047900</id><snippet>&gt;&gt;&gt; list(d)
['C', 'B', 'A']
</snippet></ROW><ROW><id>20048088</id><snippet>onclick</snippet></ROW><ROW><id>20048088</id><snippet>a</snippet></ROW><ROW><id>20048088</id><snippet>/notes/64967405021/2nsoCKZ8N?from_c=1382486492</snippet></ROW><ROW><id>20048088</id><snippet>/notes/</snippet></ROW><ROW><id>20048088</id><snippet>'</snippet></ROW><ROW><id>20048088</id><snippet>/notes/</snippet></ROW><ROW><id>20048088</id><snippet>http://uri-hyukkie.tumblr.com</snippet></ROW><ROW><id>20048186</id><snippet>def take(self, amount):
    ret = []
    while True:
        item = self.random()
        if item in ret:
            continue
        ret.append(item)
        if len(ret) == amount:
            return ret
</snippet></ROW><ROW><id>20048186</id><snippet>x = [wr.take(setSize) for j in range(numSets)]
</snippet></ROW><ROW><id>20048186</id><snippet>import random


class WeightedRandomizer:

    def __init__(self, weights):
        self.__max = .0
        self.__weights = []
        for value, weight in weights.items():
            self.__max += weight
            self.__weights.append((self.__max, value))

    def take(self, amount):
        ret = []
        while True:
            item = self.random()
            if item in ret:
                continue
            ret.append(item)
            if len(ret) == amount:
                return ret

    def random(self):
        r = random.random() * self.__max
        for ceil, value in self.__weights:
            if ceil &gt; r:
                return value


range_size = 0
if range_size == 0:
    try:
        rSize = int(input('Size of your Range?: '))
        setSize = int(input('Size of your Sets?: '))
        numSets = int(input('How many sets?: '))
    except ValueError:
        print('That was not an integer!')
        range_size = 0


base_value = 100 / rSize
num_weighted = [base_value] * rSize
num_weighted[0] = round(base_value * 2.2, 1)
num_weighted[1] = round(base_value * 1.8, 1)
num_weighted[2] = round(base_value * 1.8, 1)
num_weighted[3] = round(base_value * 1.5, 1)
num_weighted[4] = round(base_value * 1.4, 1)
num_weighted[5] = round(base_value * 1.3, 1)


# redistribute the difference of top 6 and rest of range
top6 = (sum(num_weighted[0:6]))
not_top6 = rSize - 6
pts_alloc = round((100 - top6) / not_top6, 1)

num_weighted[6:] = [pts_alloc for i in range(len(num_weighted) - 6)]

keys = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',
        'Nine', 'Ten', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen']

dictionary = dict(zip(keys, num_weighted))

wr = WeightedRandomizer(dictionary)

x = [wr.take(setSize) for j in range(numSets)]

print(x)
</snippet></ROW><ROW><id>20048195</id><snippet>Base.__init__</snippet></ROW><ROW><id>20048195</id><snippet>BaseWArgs.__init__</snippet></ROW><ROW><id>20048195</id><snippet>super().__init__</snippet></ROW><ROW><id>20048195</id><snippet>Base</snippet></ROW><ROW><id>20048195</id><snippet>class Base(object):
    def __init__(self):
        print "Base::Base():"
        super(Base, self).__init__()

class BaseWArgs(object):
    def __init__(self, arg):
        print "BaseWArgs::BaseWArgs(%s):" % arg
        super(BaseWArgs, self).__init__()


class Composite(BaseWArgs, Base):
    def __init__(self):
        super(Composite,self).__init__("foo")

c = Composite()
</snippet></ROW><ROW><id>20048195</id><snippet>defaultdict</snippet></ROW><ROW><id>20048195</id><snippet>super</snippet></ROW><ROW><id>20048195</id><snippet>Base</snippet></ROW><ROW><id>20048195</id><snippet>defaultdict</snippet></ROW><ROW><id>20048195</id><snippet>defaultdict</snippet></ROW><ROW><id>20048195</id><snippet>defaultdict</snippet></ROW><ROW><id>20048195</id><snippet>Base</snippet></ROW><ROW><id>20048195</id><snippet>class Base(object):
    def __init__(self):
        print "Base__init__():"
        super(Base, self).__init__()

class Sub(Base):
    def __init__(self):
        print "Sub.__init__():"
        super(Sub, self).__init__()
        self.foo = "bar"


class MyClass(defaultdict, Sub):
    def __init__(self):
        defaultdict.__init__(self, int)
        Sub.__init__(self)
</snippet></ROW><ROW><id>20048292</id><snippet>name = u'kas\u0131m'
</snippet></ROW><ROW><id>20048292</id><snippet>strftime</snippet></ROW><ROW><id>20048292</id><snippet>ignore, encoding = locale.getlocale()
name = unicode(s, encoding)
</snippet></ROW><ROW><id>20048394</id><snippet>df['Data'].resample('5Min', how='mean')
</snippet></ROW><ROW><id>20048394</id><snippet>how = 'mean'</snippet></ROW><ROW><id>20048394</id><snippet>df['Data'].resample('5Min')
</snippet></ROW><ROW><id>20048394</id><snippet>&gt;&gt;&gt; rng = pd.date_range('1/1/2012', periods=10, freq='Min')
&gt;&gt;&gt; df = pd.DataFrame({'Data':np.random.randint(0, 500, len(rng))}, index=rng)
&gt;&gt;&gt; df
                     Data
2012-01-01 00:00:00   488
2012-01-01 00:01:00   172
2012-01-01 00:02:00   276
2012-01-01 00:03:00     5
2012-01-01 00:04:00   233
2012-01-01 00:05:00   266
2012-01-01 00:06:00   103
2012-01-01 00:07:00    40
2012-01-01 00:08:00   274
2012-01-01 00:09:00   494
&gt;&gt;&gt;
&gt;&gt;&gt; df['Data'].resample('5Min')
2012-01-01 00:00:00    234.8
2012-01-01 00:05:00    235.4
</snippet></ROW><ROW><id>20048400</id><snippet>num</snippet></ROW><ROW><id>20048400</id><snippet>test</snippet></ROW><ROW><id>20048400</id><snippet>num</snippet></ROW><ROW><id>20048400</id><snippet>num</snippet></ROW><ROW><id>20048400</id><snippet>print</snippet></ROW><ROW><id>20048400</id><snippet>num</snippet></ROW><ROW><id>20048400</id><snippet>num</snippet></ROW><ROW><id>20048400</id><snippet>num1</snippet></ROW><ROW><id>20048400</id><snippet>def test():
    global num
    print num1
    print num
    num += 10
</snippet></ROW><ROW><id>20048503</id><snippet>markersize</snippet></ROW><ROW><id>20048503</id><snippet>plt.errorbar(x, y, yerr=err, fmt='-o',  markersize=2, color='k', label = 'size 2')
</snippet></ROW><ROW><id>20048861</id><snippet>new_image = [([0.0] * width)] * height
</snippet></ROW><ROW><id>20048861</id><snippet>new_image = [[0.0] * width for _ in range(height)]
</snippet></ROW><ROW><id>20048861</id><snippet>a = [[0] * 3] * 2
a[0][0] = 1
print a

a = [[0] * 3 for _ in range(2)]
a[0][0] = 1
print a
</snippet></ROW><ROW><id>20048861</id><snippet>[[1, 0, 0], [1, 0, 0]]
[[1, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>20048861</id><snippet>a[0]</snippet></ROW><ROW><id>20048861</id><snippet>a[1]</snippet></ROW><ROW><id>20049202</id><snippet>borderpad</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left')
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>borderpad=2</snippet></ROW><ROW><id>20049202</id><snippet>em</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', borderpad=2)
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>labelspacing</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', labelspacing=2)
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>labelspacing</snippet></ROW><ROW><id>20049202</id><snippet>borderpad</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', borderpad=1.5, labelspacing=1.5)
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 5)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, marker='o', markersize=20,
            label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left')
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>handlelength</snippet></ROW><ROW><id>20049202</id><snippet>borderpad</snippet></ROW><ROW><id>20049202</id><snippet>labelspacing</snippet></ROW><ROW><id>20049202</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 5)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, marker='o', markersize=20,
            label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', handlelength=5, borderpad=1.2, labelspacing=1.2)
plt.show()
</snippet></ROW><ROW><id>20049202</id><snippet>Padding and spacing between various elements use following
keywords parameters. These values are measure in font-size
units. E.g., a fontsize of 10 points and a handlelength=5
implies a handlelength of 50 points.  Values from rcParams
will be used if None.

=====================================================================
Keyword       |    Description
=====================================================================
borderpad          the fractional whitespace inside the legend border
labelspacing       the vertical space between the legend entries
handlelength       the length of the legend handles
handletextpad      the pad between the legend handle and text
borderaxespad      the pad between the axes and legend border
columnspacing      the spacing between columns
</snippet></ROW><ROW><id>20049287</id><snippet>ndigits = 0 =&gt; pow(10, -ndigits) = 10^(-ndigits) = 1
ndigits = 1 =&gt; pow(10, -ndigits) = 10^(-ndigits) = 0.1
etc.

&gt;&gt;&gt; for ndigits in range(6):
...     print round(123.456789, ndigits) / pow(10, -ndigits)
123.0
1235.0
12346.0
123457.0
1234568.0
12345679.0
</snippet></ROW><ROW><id>20049675</id><snippet>list1 = [1, 2, 3, 4, 5]
list2 = [[1, 2, 3], [5], [1, 6], [1, 0, 9, 10], [1, 5, 2]]
print [(item1, s) for item1, item2 in zip(list1, list2) for s in item2]
</snippet></ROW><ROW><id>20049675</id><snippet>[(1, 1), (1, 2), (1, 3), (2, 5), (3, 1), (3, 6), (4, 1), (4, 0), (4, 9), (4, 10), (5, 1), (5, 5), (5, 2)]
</snippet></ROW><ROW><id>20049675</id><snippet>result = []
for item1, item2 in zip(list1, list2):
    for s in item2:
        result.append((item1, s))
</snippet></ROW><ROW><id>20049792</id><snippet>g</snippet></ROW><ROW><id>20049792</id><snippet>Survey</snippet></ROW><ROW><id>20049792</id><snippet>decorator</snippet></ROW><ROW><id>20049792</id><snippet>Survey</snippet></ROW><ROW><id>20049792</id><snippet>kwargs</snippet></ROW><ROW><id>20049792</id><snippet>g</snippet></ROW><ROW><id>20049792</id><snippet>@app.route(...)
@load_survey
def do_something(....):
  ...
</snippet></ROW><ROW><id>20049869</id><snippet>deque</snippet></ROW><ROW><id>20049960</id><snippet>allow_redirects</snippet></ROW><ROW><id>20049960</id><snippet>False</snippet></ROW><ROW><id>20049960</id><snippet>.get()</snippet></ROW><ROW><id>20049960</id><snippet>i = s.head(file_url)
urlpath = i.url
</snippet></ROW><ROW><id>20049960</id><snippet>i = s.get(file_url, allow_redirects=False)
urlpath = i.headers['location']
</snippet></ROW><ROW><id>20050186</id><snippet>scipy.sparse</snippet></ROW><ROW><id>20050186</id><snippet>def sparse_vec(df):
    return (df['Col3'].values[None,:],)

# Obviously these would be chunk-specific, and you'd need to do
# another pass to get the global sum of unique ids from Col1 and the
# global max of the number of unique rows-per-id.
n_cols = len(df.Col2.unique())
n_rows = len(df.Col1.unique())


vecs = df.groupby("Col1").apply(sparse_vec)
print vecs
</snippet></ROW><ROW><id>20050186</id><snippet>In [17]: data = """
   ....: abandonment-n   about+n-the+v-know-v    1
   ....: abandonment-n   above+ns-j+vn-pass-continue-v   1
   ....: abandonment-n   after+n-the+n-a-j-stop-n    1
   ....: abandonment-n   as+n-the+ns-j-aid-n 1
   ....: cake-n  against+n-the+vg-restv  1
ake-   ....: cake-n  as+n-a+vd-require-v 1
   ....: cake-n  as+n-a-j+vg-up-use-v    1
   ....: cake-n  as+n-the+ns-j-aid-n 2
   ....: dog-n   as+n-a-j+vg-up-use-v    7
dog-   ....: dog-n   as+n-the+ns-j-aid-n 5"""

In [18]: data
Out[18]: '\nabandonment-n   about+n-the+v-know-v    1\nabandonment-n   above+ns-j+vn-pass-continue-v   1\nabandonment-n   after+n-the+n-a-j-stop-n    1\nabandonment-n   as+n-the+ns-j-aid-n 1\ncake-n  against+n-the+vg-restv  1\ncake-n  as+n-a+vd-require-v 1\ncake-n  as+n-a-j+vg-up-use-v    1\ncake-n  as+n-the+ns-j-aid-n 2\ndog-n   as+n-a-j+vg-up-use-v    7\ndog-n   as+n-the+ns-j-aid-n 5'

In [19]: data.split("\n")
Out[19]:
['',
 'abandonment-n   about+n-the+v-know-v    1',
 'abandonment-n   above+ns-j+vn-pass-continue-v   1',
 'abandonment-n   after+n-the+n-a-j-stop-n    1',
 'abandonment-n   as+n-the+ns-j-aid-n 1',
 'cake-n  against+n-the+vg-restv  1',
 'cake-n  as+n-a+vd-require-v 1',
 'cake-n  as+n-a-j+vg-up-use-v    1',
 'cake-n  as+n-the+ns-j-aid-n 2',
 'dog-n   as+n-a-j+vg-up-use-v    7',
 'dog-n   as+n-the+ns-j-aid-n 5']

In [20]: data_lines = [x for x in data.split("\n") if x]

In [21]: data_lines
Out[21]:
['abandonment-n   about+n-the+v-know-v    1',
 'abandonment-n   above+ns-j+vn-pass-continue-v   1',
 'abandonment-n   after+n-the+n-a-j-stop-n    1',
 'abandonment-n   as+n-the+ns-j-aid-n 1',
 'cake-n  against+n-the+vg-restv  1',
 'cake-n  as+n-a+vd-require-v 1',
 'cake-n  as+n-a-j+vg-up-use-v    1',
 'cake-n  as+n-the+ns-j-aid-n 2',
 'dog-n   as+n-a-j+vg-up-use-v    7',
 'dog-n   as+n-the+ns-j-aid-n 5']

In [22]: split_lines = [x.split() for x in data_lines]

In [23]: split_lines
Out[23]:
[['abandonment-n', 'about+n-the+v-know-v', '1'],
 ['abandonment-n', 'above+ns-j+vn-pass-continue-v', '1'],
 ['abandonment-n', 'after+n-the+n-a-j-stop-n', '1'],
 ['abandonment-n', 'as+n-the+ns-j-aid-n', '1'],
 ['cake-n', 'against+n-the+vg-restv', '1'],
 ['cake-n', 'as+n-a+vd-require-v', '1'],
 ['cake-n', 'as+n-a-j+vg-up-use-v', '1'],
 ['cake-n', 'as+n-the+ns-j-aid-n', '2'],
 ['dog-n', 'as+n-a-j+vg-up-use-v', '7'],
 ['dog-n', 'as+n-the+ns-j-aid-n', '5']]

In [24]: df = pandas.DataFrame(split_lines, columns=["Col1", "Col2", "Col3"])

In [25]: df
Out[25]:
            Col1                           Col2 Col3
0  abandonment-n           about+n-the+v-know-v    1
1  abandonment-n  above+ns-j+vn-pass-continue-v    1
2  abandonment-n       after+n-the+n-a-j-stop-n    1
3  abandonment-n            as+n-the+ns-j-aid-n    1
4         cake-n         against+n-the+vg-restv    1
5         cake-n            as+n-a+vd-require-v    1
6         cake-n           as+n-a-j+vg-up-use-v    1
7         cake-n            as+n-the+ns-j-aid-n    2
8          dog-n           as+n-a-j+vg-up-use-v    7
9          dog-n            as+n-the+ns-j-aid-n    5

In [26]: df.groupby("Col1").apply(lambda x: (x.Col3.values[None,:],))
Out[26]:
Col1
abandonment-n    (array([[1, 1, 1, 1]], dtype=object),)
cake-n           (array([[1, 1, 1, 2]], dtype=object),)
dog-n                  (array([[7, 5]], dtype=object),)

In [27]: n_rows = len(df.Col1.unique())

In [28]: n_cols = len(df.Col2.unique())

In [29]: n_rows, n_cols
Out[29]: (3, 7)
</snippet></ROW><ROW><id>20050899</id><snippet>python bootstrap.py -v 1.7.1
</snippet></ROW><ROW><id>20050899</id><snippet>buildout.cfg</snippet></ROW><ROW><id>20050899</id><snippet>buildout.cfg</snippet></ROW><ROW><id>20050944</id><snippet>for child in soup.findAll(attrs={'class': "f14 blue001"}):
    print child.getText()
</snippet></ROW><ROW><id>20050944</id><snippet>·嘉峪关社管中心学习十八届三中全会公报  2013-11-18
·
·嘉峪关落实城乡一体化各项民生保障政策  2013-11-13
·
·甘肃省工商局发布“双11”消费警示  2013-11-11
·
·玉门工商强化执法原则增强柔性执法理念  2013-11-11
·
·嘉峪关城乡一体化服务中心多举措树形象  2013-11-11
·
·酒泉市瓜州县工商局开展道德讲堂活动  2013-11-07
·
·张掖山丹工商推行“三位一体”维权平台  2013-11-06
·
·酒泉市肃州区统计局三结合深化廉政教育  2013-11-05
·
·兰州工商系统全面开展“冬防”整治活动  2013-11-05
·
·玉门市玉门镇工商分局确保秋季市场稳定  2013-11-04
·
·敦煌市各乡镇“法律赶集”开展普法宣传  2013-11-04
·
·玉门工商清理整顿一批无照经营户  2013-11-01
·
·临夏州举办涉法涉诉信访工作改革培训班  2013-11-01
·
·酒泉市肃州区马营河水闸道路工程顺利通车  2013-11-01
·
·酒泉狠抓四环节推进涉法涉诉信访工作改革  2013-11-01
·
·酒泉瓜州工商局开展群众路线教育实践活动  2013-10-30
·
·酒泉市瓜州县工商局开展酒类市场集中整治  2013-10-29
·
·酒泉市信访局开设“道德讲堂”  2013-10-21
·
·打造制度建设新亮点 推动酒泉经济发展  2013-10-21
·
·酒泉加强行政程序建设提高依法行政水平  2013-10-18
·
·酒泉肃州西峰乡进一步落实矛盾排查制度  2013-10-16
·
·甘肃省农产品质量安全检测技能竞赛举行  2013-10-14
·
·甘肃省财政厅封存所有公务车辆 杜绝浪费  2013-10-09
·
·酒泉肃州总工会做好国庆期间综治维稳工作  2013-10-09
·
·酒泉市瓜州县工商局四举措加强队伍建设  2013-10-08
·
·甘肃严查教育乱收费：公示之外收费可拒缴  2013-10-08
·
·酒泉市瓜州县工商局开展棉花市场联合大检查  2013-09-30
·
·酒泉瓜州工商局“绿色通道”助力大学生创业  2013-09-29
·
·瓜州非工委召开“非公党建组建周”部署会  2013-09-27
·
·酒泉瓜州工商局四措施加强高危行业监管  2013-09-26
·
·甘肃省市旅游局联合开展市场大检查  2013-09-25
·
·肃州三墩镇组织领导干部参加六五普法考试  2013-09-25
·
·酒泉市肃州区总工会着力构建和谐劳动关系  2013-09-22
·
·酒泉瓜州非工委“三建”破解非公团建难题  2013-09-17
·
·省教育厅重申严禁利用休息日给学生补课  2013-09-16
·
·甘肃旅游局发通知 确保《旅游法》实施  2013-09-16
·
·瓜州工商局“四措施”加强高危行业监管  2013-09-16
·
·酒泉肃州建立工会系统劳动关系预警机制  2013-09-12
·
·甘肃省旅游局将开展旅游市场大检查  2013-09-11
·
·甘肃省教育厅将对民办学校进行大检查  2013-09-11
·
·酒泉市惠民政策添新项为新增高龄老人发放补助  2013-09-24
·
·酒泉肃州农牧局召开政风行风评议质询会议  2013-09-06
·
·天水麦积区工商局专项整治农村市场秩序  2013-09-05
·
·酒泉肃州西文化街社区“四抓四促”保稳定  2013-09-05
·
·酒泉瓜州新区工商所调处一起汽车消费纠纷  2013-09-04
·
·访酒泉市瓜州县工商局局长殷正国  2013-09-03
·
·省教育厅：禁止教师借教师节向学生收取礼物  2013-09-03
·
·酒泉肃州总寨镇打响矛盾纠纷专项调处攻坚战  2013-09-03
·
·肃州环保局中央农村环境整治项目通过检查  2013-08-30
</snippet></ROW><ROW><id>20050957</id><snippet>import numpy as np
import matplotlib.pyplot as plt    
from itertools import compress


data = np.genfromtxt('beta_tracking.csv', delimiter=' ')

f=data[:,0]
x=data[:,1]
y=data[:,2]
z=data[:,3]

k=range(1,11)
for j in k:
    g=list(compress(x, (abs(i)==j for i in f)))
    h=list(compress(y, (abs(i)==j for i in f)))
    FigList = [ ] 
    FigList.append(plt.figure())
    ax = FigList[-1].add_subplot(1,1,1)
    ax.plot(g,h,',')
    for i in plt.get_fignums():
          plt.figure(i)
          plt.savefig('plots/figure%d.png' % i)
</snippet></ROW><ROW><id>20051162</id><snippet>r'^[a-zA-Z0-9: ]+$'
</snippet></ROW><ROW><id>20051162</id><snippet>r'[^a-zA-Z0-9: ]+'
</snippet></ROW><ROW><id>20051455</id><snippet>&lt;xsl:template match="foo"&gt;
  &lt;xsl:value-of select="my:func(.)" /&gt;
&lt;/xsl:template&gt;
</snippet></ROW><ROW><id>20051455</id><snippet>foo</snippet></ROW><ROW><id>20051455</id><snippet>foo</snippet></ROW><ROW><id>20051455</id><snippet>&lt;xsl:template match="foo[./*]"&gt;
  &lt;xsl:value-of select="my:func(.)" /&gt;
&lt;/xsl:template&gt;
</snippet></ROW><ROW><id>20051620</id><snippet>i</snippet></ROW><ROW><id>20051620</id><snippet>parse</snippet></ROW><ROW><id>20051620</id><snippet>def parse(tokens, i=0):
    """parse: tuple(String) * int -&gt; (Node, int)
    From an infix stream of tokens, and the current index into the
    token stream, construct and return the tree, as a collection of Nodes, 
    that represent the expression.

    NOTE:  YOU ARE NOT ALLOWED TO MUTATE 'tokens' (e.g. pop())!!!  YOU
        MUST USE 'i' TO GET THE CURRENT TOKEN OUT OF 'tokens'
    """
    if tokens[i] == '+':
        return mkAddNode(parse(tokens, i+1), parse(tokens, i+1))
    elif tokens[i] == '-':
        return mkSubtractNode(parse(tokens, i+1), parse(tokens, i+1))
</snippet></ROW><ROW><id>20051786</id><snippet>def add_property(mock_object, property_name, property_value) :                  
    prop = mock.PropertyMock(return_value=property_value)                       
    setattr(type(mock_object), property_name, prop)                             

    # this catches sdk changes if spec_set is used with the MagicMock as        
    # it will fail if you assign the property to an non-existant attribute                                                           
    mock_object.attach_mock(prop, property_name)

mock_item = mock.MagicMock(spec_set=sdk.MyItemClass)
add_property(mock_item, 'name', "Item title")
</snippet></ROW><ROW><id>20051786</id><snippet>add_property</snippet></ROW><ROW><id>20051786</id><snippet>name</snippet></ROW><ROW><id>20051800</id><snippet>counter</snippet></ROW><ROW><id>20051800</id><snippet>counter</snippet></ROW><ROW><id>20051800</id><snippet>counter</snippet></ROW><ROW><id>20051800</id><snippet>counter</snippet></ROW><ROW><id>20051800</id><snippet>nonlocal</snippet></ROW><ROW><id>20051800</id><snippet>counter</snippet></ROW><ROW><id>20051800</id><snippet>def first_example ():
    counter = 0
    def inc_counter ():
        nonlocal counter
        counter += 1
    for i in range (10):
        inc_counter()
</snippet></ROW><ROW><id>20051802</id><snippet>add</snippet></ROW><ROW><id>20051802</id><snippet>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; add
&lt;built-in function add&gt;
&gt;&gt;&gt; def my_add(res, x):
...     return res + x
... 
&gt;&gt;&gt; my_add
&lt;function my_add at 0x18358c0&gt;
</snippet></ROW><ROW><id>20051802</id><snippet>+</snippet></ROW><ROW><id>20051802</id><snippet>add</snippet></ROW><ROW><id>20051802</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>20051802</id><snippet>+</snippet></ROW><ROW><id>20051802</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>20052102</id><snippet>devices|map(attribute=0)
</snippet></ROW><ROW><id>20052102</id><snippet>devices = [('device1', 'string'), ('device2', 'string')]</snippet></ROW><ROW><id>20052124</id><snippet>regex='&lt;title&gt;(.+?)&lt;\title&gt;'
</snippet></ROW><ROW><id>20052124</id><snippet>regex='&lt;title&gt;(.+?)&lt;/title&gt;'
</snippet></ROW><ROW><id>20052347</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>20052347</id><snippet>from collections import defaultdict

result = defaultdict(list)

for key, *values in data:
    result[key].extend(values)
</snippet></ROW><ROW><id>20052347</id><snippet>data</snippet></ROW><ROW><id>20052347</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; data = (['aaron distilled ', 'alcohol', '5'], 
... ['aaron distilled ', 'gin', '2'], 
... ['aaron distilled ', 'beer', '6'], 
... ['aaron distilled ', 'vodka', '9'], 
... ['aaron evicted ', 'owner', '1'], 
... ['aaron evicted ', 'bum', '1'], 
... ['aaron evicted ', 'deadbeat', '1'])
&gt;&gt;&gt; result = defaultdict(list)
&gt;&gt;&gt; for key, *values in data:
...    result[key].extend(values)
... 
&gt;&gt;&gt; result
defaultdict(&lt;class 'list'&gt;, {'aaron distilled ': ['alcohol', '5', 'gin', '2', 'beer', '6', 'vodka', '9'], 'aaron evicted ': ['owner', '1', 'bum', '1', 'deadbeat', '1']})
</snippet></ROW><ROW><id>20052352</id><snippet>def get_first_num(text):
    words = text.split()

    for word in words:
        if word.isdigit():
            return word


print get_first_num('This string contains numbers 456 but also 5 and 34')
</snippet></ROW><ROW><id>20052396</id><snippet>for case,vals in vals_dict.iteritems():
    the_fig = figure(1, figsize=(8,8))
</snippet></ROW><ROW><id>20052396</id><snippet>figure(figsize=(8,8))</snippet></ROW><ROW><id>20052396</id><snippet>figure(1, figsize=(8,8))</snippet></ROW><ROW><id>20052396</id><snippet>the_fig.clf()</snippet></ROW><ROW><id>20052396</id><snippet>for case,vals in vals_dict.iteritems():
    the_fig = figure(figsize=(8,8))
    axes([0.1, 0.1, 0.8, 0.8])
    fig = os.path.join(_dir, '{0}.png'.format(case.replace(' ','_')))
    label = [v[0] for v in vals]
    fracs = [v[1] for v in vals]
    print '%s %s %s' %(case,label,fracs)
    if len(label) == len(fracs):  # to make sure same number of labels as slices
        cmap = plt.cm.prism
        color = cmap(np.linspace(0., 1., len(fracs)))
        pie_wedges = pie(fracs,colors=color,pctdistance=0.5, labeldistance=1.1)
        for wedge in pie_wedges[0]:
            wedge.set_edgecolor('white')
        legend(map(lambda x, f: '%s (%0.0f%%)' % (x, f), label, fracs), loc=4)
        title(case)
        savefig(fig)
        print 'Created: %s' %fig
</snippet></ROW><ROW><id>20052497</id><snippet>updateChatBox</snippet></ROW><ROW><id>20052497</id><snippet>"1"</snippet></ROW><ROW><id>20052497</id><snippet>1</snippet></ROW><ROW><id>20052497</id><snippet>content-type:text/html</snippet></ROW><ROW><id>20052497</id><snippet>json</snippet></ROW><ROW><id>20052497</id><snippet>content-type:application/json</snippet></ROW><ROW><id>20052845</id><snippet>requests</snippet></ROW><ROW><id>20052845</id><snippet>buglist.cgi</snippet></ROW><ROW><id>20052845</id><snippet>show_bug.cgi</snippet></ROW><ROW><id>20052845</id><snippet>import requests
values = {}
values['ctype'] = 'xml'
# Multiple values for the same name are handled via array
values['id'] = [35, 36, 37, 38, 39, 41, 42, 43, 51, 61]
values['excludefield'] = 'attachmentdata'
req = requests.post('https://bugzilla.mozilla.org/show_bug.cgi', data=values)
print req.text
</snippet></ROW><ROW><id>20052905</id><snippet>localhost:9200/index/type (query)</snippet></ROW><ROW><id>20052905</id><snippet>`localhost:9200/`
</snippet></ROW><ROW><id>20052905</id><snippet>`localhost:9200/yourindex/`
</snippet></ROW><ROW><id>20052905</id><snippet>`localhost:9200/yourindex/yourtype/`
</snippet></ROW><ROW><id>20052905</id><snippet>`localhost:9200/yourindex/yourtype,yourothertype/`
</snippet></ROW><ROW><id>20052905</id><snippet>facet_raw</snippet></ROW><ROW><id>20052978</id><snippet>call()</snippet></ROW><ROW><id>20052978</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>20052978</id><snippet>from subprocess import Popen

Popen(['google-chrome'])
</snippet></ROW><ROW><id>20052978</id><snippet>from subprocess import Popen, STDOUT
import os

Popen(['google-chrome'], stdout=os.open(os.devnull, os.O_RDWR), stderr=STDOUT)
</snippet></ROW><ROW><id>20052978</id><snippet>webbrowser</snippet></ROW><ROW><id>20052978</id><snippet>/dev/null</snippet></ROW><ROW><id>20052978</id><snippet>google-chrome</snippet></ROW><ROW><id>20052978</id><snippet>chrome</snippet></ROW><ROW><id>20053021</id><snippet>gen.coroutine</snippet></ROW><ROW><id>20053021</id><snippet>from tornado import gen, web, httpclient

class StreamingHandler(web.RequestHandler):
    @web.asynchronous
    @gen.coroutine
    def get(self):
        client = httpclient.AsyncHTTPClient()

        self.write('some opening')
        self.flush()

        requests = [
            httpclient.HTTPRequest(
                url='http://httpbin.org/delay/' + str(delay),
                streaming_callback=self.on_chunk
            ) for delay in [5, 4, 3, 2, 1]
        ]

        # `map()` doesn't return a list in Python 3
        yield list(map(client.fetch, requests))

        self.write('some closing')
        self.finish()

    def on_chunk(self, chunk):
        self.write('some chunk')
        self.flush()
</snippet></ROW><ROW><id>20053136</id><snippet>dice</snippet></ROW><ROW><id>20053136</id><snippet>dice</snippet></ROW><ROW><id>20053136</id><snippet>rollDice</snippet></ROW><ROW><id>20053136</id><snippet>dice = rollDice()
print(countVals(dice))
</snippet></ROW><ROW><id>20053136</id><snippet>countVals</snippet></ROW><ROW><id>20053136</id><snippet>print(countVals(rollDice()))
</snippet></ROW><ROW><id>20053149</id><snippet>TEMPLATE = """
&lt;input id="count" maxlength="100" name="count" type="text"/&gt;
"""
class AnimalTable(tables.Table):
    count = tables.TemplateColumn(TEMPLATE)
    class Meta:
        model = Animal
</snippet></ROW><ROW><id>20053409</id><snippet>cv2.inRange</snippet></ROW><ROW><id>20053409</id><snippet>gray = cv2.imread(filename, cv2.CV_LOAD_IMAGE_GRAYSCALE)
gray_filtered = cv2.inRange(gray, 190, 255)
</snippet></ROW><ROW><id>20053409</id><snippet>rgb = cv2.imread(filename, cv2.CV_LOAD_IMAGE_COLOR)
rgb_filtered = cv2.inRange(gray, (190, 190, 190), (255, 255, 255))
</snippet></ROW><ROW><id>20054001</id><snippet>Panes = []
</snippet></ROW><ROW><id>20054001</id><snippet>myScreen</snippet></ROW><ROW><id>20054001</id><snippet>myScreen = Screen(...)</snippet></ROW><ROW><id>20054001</id><snippet>Screen = pygame.display.set_mode((1366,768), 0, 32); self.screen = Screen</snippet></ROW><ROW><id>20054001</id><snippet>self.screen.fill((white))</snippet></ROW><ROW><id>20054001</id><snippet>Screen</snippet></ROW><ROW><id>20054001</id><snippet>self.screen</snippet></ROW><ROW><id>20054001</id><snippet>import pygame
import sys

#----------------------------------------------------------------------

WHITE = (255,255,255)
BLACK = (0  ,0  ,0  )

#---------------------------

MAIN_BUTTON = 2

KEYBOARD = True
WORDS = False

#----------------------------------------------------------------------

class Pane():

    def __init__(self, textToDisplay, coordinates, screen):

        self.textToDisplay = textToDisplay
        self.coordinates = coordinates
        self.screen = screen
        self.font = pygame.font.SysFont('Palace Script MT', 25)

    #---------------------------

    def coordinates(self):
        return self.coordinates

    #---------------------------

    def text(self):
        return self.textToDisplay

    #---------------------------

    def drawPane(self):
        textCoords = self.coordinates        
        self.screen.blit(self.font.render(self.textToDisplay, True, BLACK), textCoords)
        pygame.draw.rect(self.screen, BLACK, self.coordinates, 2)

#----------------------------------------------------------------------

class Application():

    NoOfPanes = 0
    NoOfKeys = 0
    Panes = []
    Keys = []

    paneLocs = [(583, 334, 300, 150), 
                (633, 150, 200, 125), 
                (633, 600, 200, 125), 
                (350, 360, 200, 100), 
                (925, 360, 200, 100), 
                (1000, 150, 150, 100), 
                (275, 150, 150, 100), 
                (275, 600, 150, 100), 
                (1000, 600, 150, 100), 
                (75, 350, 200, 100),
                (0, 668, 200, 100)
                ]    

    keyboardPaneLocs = [(0, 100, 100, 100),
                        (0, 200, 100, 100),
                        (0, 300, 100, 100),
                        (0, 400, 100, 100)
                        ]

    #---------------------------

    def __init__(self):

        pygame.init()
        pygame.display.set_caption('Box Test')

        self.font = pygame.font.SysFont('Arial', 25)
        self.screen = pygame.display.set_mode((1366,768), 0, 32)

        self.show_panes = True
        self.show_keyboard = False

        self.createPanes()
        self.createKeyboard()

    #---------------------------

    def close(self):
        print "pygame quit"
        pygame.quit()
        sys.exit()

    #---------------------------

    def createPanes(self):
        self.addPane("1", WORDS)
        self.addPane("2", WORDS)
        self.addPane("3", WORDS)
        self.addPane("4", WORDS)
        self.addPane("5", WORDS)
        self.addPane("6", WORDS)
        self.addPane("7", WORDS)
        self.addPane("8", WORDS)
        self.addPane("9", WORDS)
        self.addPane("10", WORDS)
        self.addPane("Keyboard", WORDS)

    #---------------------------

    def createKeyboard(self):
        self.addPane("A", KEYBOARD)
        self.addPane("B", KEYBOARD)
        self.addPane("C", KEYBOARD)

    #---------------------------

    def addPane(self, textToDisplay, keyboardFlag):      
        if (not keyboardFlag) and (self.NoOfPanes &gt; 11):
            print("Limit Reached")            
        else:
            print(int(self.NoOfPanes))

            if keyboardFlag:
                self.Keys.append(Pane(textToDisplay, self.keyboardPaneLocs[self.NoOfKeys], self.screen))
                self.NoOfKeys += 1
            else:
                self.Panes.append(Pane(textToDisplay, self.paneLocs[self.NoOfPanes], self.screen))
                self.NoOfPanes += 1

    #---------------------------

    def drawPanes(self):
        for Pane in self.Panes:
            Pane.drawPane()

    #---------------------------

    def drawKeyboard(self):
        for Key in self.Keys:
            Key.drawPane()

    #---------------------------

    def mousePosition(self, event):
            if event.type == MAIN_BUTTON:
                self.Pos = pygame.mouse.get_pos()
                return MAIN_BUTTON
            else:
                return False

    #---------------------------

    def mouseDown(self):
        posx,posy = pygame.mouse.get_pos()      
        textToReturn = "Nothing selected"
        if self.show_panes:
            for Pane in self.Panes:
                paneCoords = Pane.coordinates
                print(str(paneCoords[0]) + ":" + str(paneCoords[1]) + ":" + str(paneCoords[2]) + ":" + str(paneCoords[3]))
                if (paneCoords[0] &lt;= posx &lt;= paneCoords[0]+paneCoords[2]) and (paneCoords[1] &lt;= posy &lt;= paneCoords[1]+paneCoords[3]):            
                    textToReturn = Pane.text()
        elif self.show_keyboard:
            for Pane in self.Keys:
                paneCoords = Pane.coordinates
                print(str(paneCoords[0]) + ":" + str(paneCoords[1]) + ":" + str(paneCoords[2]) + ":" + str(paneCoords[3]))
                if (paneCoords[0] &lt;= posx &lt;= paneCoords[0]+paneCoords[2]) and (paneCoords[1] &lt;= posy &lt;= paneCoords[1]+paneCoords[3]):            
                    textToReturn = Pane.text()

        return textToReturn

    #---------------------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        while RUNNING:

            # --- events ---

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    RUNNING = False
                    break

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.show_keyboard = not self.show_keyboard
                        self.show_panes = not self.show_panes

                if event.type == pygame.MOUSEBUTTONUP:
                    textSelected = self.mouseDown()
                    print(textSelected)
                    if textSelected == "Keyboard":
                        self.show_keyboard = True
                        self.show_panes = False

            # --- draws ---

            self.screen.fill(WHITE)

            if self.show_panes:
                self.drawPanes()

            if self.show_keyboard:
                self.drawKeyboard()

            pygame.display.update()

            # --- FPS ---

            clock.tick(25)

        self.close()    
#----------------------------------------------------------------------

Application().run()
</snippet></ROW><ROW><id>20054001</id><snippet>import pygame
import sys

#----------------------------------------------------------------------

WHITE = (255,255,255)
BLACK = (0  ,0  ,0  )

#---------------------------

MAIN_BUTTON = 2

KEYBOARD = True
WORDS = False

#----------------------------------------------------------------------

class Pane():

    def __init__(self, textToDisplay, rect, screen, fgColor=(0,0,0), bgColor=(255,255,255), mouseoverBgColor=(255,255,0) ):

        self.textToDisplay = textToDisplay
        self.rect = pygame.Rect(*rect)
        self.screen = screen

        # colors

        self.fgColor = fgColor
        self.bgColor = bgColor

        self.mouseoverBgColor = mouseoverBgColor

        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        self.font = pygame.font.SysFont('Palace Script MT', 25)

    #---------------------------

    def coordinates(self):
        return self.rect

    #---------------------------

    def text(self):
        return self.textToDisplay

    #---------------------------

    def draw(self):
        # background
        self.screen.fill(self.currentBgColor, self.rect)

        # border
        pygame.draw.rect(self.screen, self.currentFgColor, self.rect, 2)

        # text
        self.screen.blit(self.font.render(self.textToDisplay, True, self.currentFgColor), self.rect)

    #---------------------------

    def test_coordinates(self, posx, posy):
        return self.rect.collidepoint(posx, posy)

    #---------------------------

    def event_handler(self, event):

        # standard pane color
        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        # if mouse over pane change color

        if event.type == pygame.MOUSEMOTION:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = (255,0,0)

        elif event.type == pygame.MOUSEBUTTONUP:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor

#----------------------------------------------------------------------

class Keyboard():

    Keys = []
    paneLocs = []
    visible = False
    #---------------------------

    def __init__(self, screen):

        self.screen = screen
        self.font = pygame.font.SysFont('Arial', 25)

        self.create()

    #---------------------------

    def create(self):

        letter_code = ord("A")

        for y in range(2):
            for x in range(13):
                lock = (100*x, 100*y, 100, 100)
                self.paneLocs.append(lock)
                self.Keys.append(Pane(chr(letter_code), lock, self.screen, (0,0,0), (0,255,0)))
                letter_code += 1

    #---------------------------

    def draw(self):
        for key in self.Keys:
            key.draw()

    #---------------------------

    def event_handler(self, event):

        textToReturn = None

        # let panes handle event
        for key in self.Keys:
            key.event_handler(event)

        if event.type == pygame.MOUSEBUTTONUP:
            posx, posy = event.pos
            for key in self.Keys:
                #print "debug: keyboard.event_handler", posx, posy
                if key.test_coordinates(posx, posy):
                    textToReturn = key.text()       

                    print textToReturn

            # if Q was 
            if textToReturn == 'Q':
                self.onKeyQ(textToReturn)

        return textToReturn

    #---------------------------

    def onKeyQ(self, text):

        # hide keyboard
        self.visible = False

        # send event to inform main loop that keyboard was closed
        pygame.event.post(pygame.event.Event(pygame.USEREVENT, {'code': 666, 'key':text}))

#----------------------------------------------------------------------

class Application():

    NoOfPanes = 0
    Panes = []

    paneLocs = [(583, 334, 300, 150), 
                (633, 150, 200, 125), 
                (633, 600, 200, 125), 
                (350, 360, 200, 100), 
                (925, 360, 200, 100), 
                (1000, 150, 150, 100), 
                (275, 150, 150, 100), 
                (275, 600, 150, 100), 
                (1000, 600, 150, 100), 
                (75, 350, 200, 100),
                (0, 668, 200, 100)
                ]    

    #---------------------------

    def __init__(self):

        pygame.init()
        pygame.display.set_caption('Box Test')

        self.font = pygame.font.SysFont('Arial', 25)
        self.screen = pygame.display.set_mode((1366,768), 0, 32)

        self.show_panes = True

        self.createPanes()

        self.keyboard = Keyboard(self.screen)

    #---------------------------

    def close(self):
        print "pygame quit"
        pygame.quit()
        sys.exit()

    #---------------------------

    def createPanes(self):
        self.addPane("1", WORDS)
        self.addPane("2", WORDS)
        self.addPane("3", WORDS)
        self.addPane("4", WORDS)
        self.addPane("5", WORDS)
        self.addPane("6", WORDS)
        self.addPane("7", WORDS)
        self.addPane("8", WORDS)
        self.addPane("9", WORDS)
        self.addPane("10", WORDS)
        self.addPane("Keyboard", WORDS)

    #---------------------------

    def addPane(self, textToDisplay, keyboardFlag):      
        if (not keyboardFlag) and (self.NoOfPanes &gt; 11):
            print("Limit Reached")            
        else:
            print(int(self.NoOfPanes))

            if not keyboardFlag:
                self.Panes.append(Pane(textToDisplay, self.paneLocs[self.NoOfPanes], self.screen))
                self.NoOfPanes += 1

    #---------------------------

    def drawPanes(self):
        for Pane in self.Panes:
            Pane.draw()

    #---------------------------

    def mousePosition(self, event):
            if event.type == MAIN_BUTTON:
                self.Pos = event.pos
                return MAIN_BUTTON
            else:
                return False

    #---------------------------

    def event_handler(self, event):

        textToReturn = None

        # let panes handle events
        for pane in self.Panes:
            pane.event_handler(event)

        if event.type == pygame.MOUSEBUTTONUP:
            posx, posy = event.pos
            for pane in self.Panes:
                #print "debug: app.event_handler", posx, posy
                if pane.test_coordinates(posx, posy):
                    textToReturn = pane.text()

                    if textToReturn == "Keyboard":
                        self.keyboard.visible = True
                        self.show_panes = False

                    print textToReturn
        return textToReturn

    #---------------------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        while RUNNING:

            # --- events ---

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    RUNNING = False
                    break

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.keyboard.visible = not self.keyboard.visible
                        self.show_panes = not self.show_panes


                if event.type == pygame.USEREVENT:
                    print "USEREVENT:", event.code
                    # event from keyboard
                    if event.code == 666:
                        # keyboar was closed so I have to show panes
                        self.show_panes = True

                if self.show_panes:
                    self.event_handler(event)

                if self.keyboard.visible:
                    self.keyboard.event_handler(event)

            # --- draws ---

            self.screen.fill(WHITE)

            if self.show_panes:
                self.drawPanes()

            if self.keyboard.visible:
                self.keyboard.draw()

            pygame.display.update()

            # --- FPS ---

            clock.tick(25)

        self.close()    

#----------------------------------------------------------------------

Application().run()
</snippet></ROW><ROW><id>20054001</id><snippet>is_movable</snippet></ROW><ROW><id>20054001</id><snippet>is_moving</snippet></ROW><ROW><id>20054001</id><snippet>class Pane():

    def __init__(self, textToDisplay, rect, screen, fgColor=(0,0,0), bgColor=(255,255,255), mouseoverBgColor=(255,255,0) ):

        self.textToDisplay = textToDisplay
        self.rect = pygame.Rect(*rect)
        self.screen = screen

        # colors

        self.fgColor = fgColor
        self.bgColor = bgColor

        self.mouseoverBgColor = mouseoverBgColor

        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        self.font = pygame.font.SysFont('Palace Script MT', 25)

        self.is_movable = True
        self.is_moving = False
    #---------------------------

    def coordinates(self):
        return self.rect

    #---------------------------

    def text(self):
        return self.textToDisplay

    #---------------------------

    def draw(self):
        # background
        self.screen.fill(self.currentBgColor, self.rect)

        # border
        pygame.draw.rect(self.screen, self.currentFgColor, self.rect, 2)

        # text
        self.screen.blit(self.font.render(self.textToDisplay, True, self.currentFgColor), self.rect)

    #---------------------------

    def test_coordinates(self, posx, posy):
        return self.rect.collidepoint(posx, posy)

    #---------------------------

    def event_handler(self, event):

        # standard pane color
        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        # if mouse over pane change color

        if event.type == pygame.MOUSEMOTION:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor

                if self.is_movable and self.is_moving:
                    self.rect.move_ip(event.rel)
                    self.currentBgColor = (0,0,255)

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = (255,0,0)
                self.is_moving = True

        elif event.type == pygame.MOUSEBUTTONUP:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor
                self.is_moving = False
</snippet></ROW><ROW><id>20054001</id><snippet>import pygame
import sys

#----------------------------------------------------------------------

WHITE = (255,255,255)
BLACK = (0  ,0  ,0  )

#---------------------------

MAIN_BUTTON = 2

KEYBOARD = True
WORDS = False

#----------------------------------------------------------------------

class evt_type(): # UserEvent - types

    PANE     = pygame.USEREVENT + 1
    KEYBOARD = pygame.USEREVENT + 2

class evt_code(): # UserEvent - codes

   KEYBOARD_CLOSED = 100
   PANE_CLICKED = 200

#----------------------------------------------------------------------

class Pane():

    def __init__(self, textToDisplay, rect, screen, fgColor=(0,0,0), bgColor=(255,255,255), mouseoverBgColor=(255,255,0) ):

        self.textToDisplay = textToDisplay
        self.rect = pygame.Rect(*rect)
        self.screen = screen

        # colors

        self.fgColor = fgColor
        self.bgColor = bgColor

        self.mouseoverBgColor = mouseoverBgColor

        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        self.font = pygame.font.SysFont('Palace Script MT', 25)

        self.is_movable = True
        self.is_moving = False
    #---------------------------

    def coordinates(self):
        return self.rect

    #---------------------------

    def text(self):
        return self.textToDisplay

    #---------------------------

    def draw(self):
        # background
        self.screen.fill(self.currentBgColor, self.rect)

        # border
        pygame.draw.rect(self.screen, self.currentFgColor, self.rect, 2)

        # text
        self.screen.blit(self.font.render(self.textToDisplay, True, self.currentFgColor), self.rect)

    #---------------------------

    def test_coordinates(self, posx, posy):
        return self.rect.collidepoint(posx, posy)

    #---------------------------

    def event_handler(self, event):

        # standard pane color
        self.currentFgColor = self.fgColor
        self.currentBgColor = self.bgColor

        # if mouse over pane change color

        if event.type == pygame.MOUSEMOTION:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor

                if self.is_movable and self.is_moving:
                    self.rect.move_ip(event.rel)
                    self.currentBgColor = (0,0,255)

        elif event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                if self.is_movable:
                    pygame.event.post(pygame.event.Event(evt_type.PANE, {'code': evt_code.PANE_CLICKED, 'widget': self}))
                self.currentBgColor = (255,0,0)
                self.is_moving = True

        elif event.type == pygame.MOUSEBUTTONUP:
            if self.rect.collidepoint(event.pos):
                self.currentBgColor = self.mouseoverBgColor
            self.is_moving = False


#----------------------------------------------------------------------

class Keyboard():

    Keys = []
    paneLocs = []
    visible = False
    #---------------------------

    def __init__(self, screen):

        self.screen = screen
        self.font = pygame.font.SysFont('Arial', 25)

        self.create()

    #---------------------------

    def create(self):

        letter_code = ord("A")

        for y in range(2):
            for x in range(13):
                lock = (100*x, 100*y, 100, 100)
                self.paneLocs.append(lock)
                self.Keys.append(Pane(chr(letter_code), lock, self.screen, (0,0,0), (0,255,0)))
                self.Keys[-1].is_movable = False
                letter_code += 1

    #---------------------------

    def draw(self):
        for key in self.Keys:
            key.draw()

    #---------------------------

    def event_handler(self, event):

        textToReturn = None

        # let panes handle event
        for key in self.Keys:
            key.event_handler(event)

        if event.type == pygame.MOUSEBUTTONUP:
            posx, posy = event.pos
            for key in self.Keys:
                #print "debug: keyboard.event_handler", posx, posy
                if key.test_coordinates(posx, posy):
                    textToReturn = key.text()       

                    print textToReturn

            # if Q was 
            if textToReturn == 'Q':
                self.onKeyQ(textToReturn)

        return textToReturn

    #---------------------------

    def onKeyQ(self, text):

        # hide keyboard
        self.visible = False

        # send event to inform main loop that keyboard was closed
        pygame.event.post(pygame.event.Event(evt_type.KEYBOARD, {'code': evt_code.KEYBOARD_CLOSED, 'key':text}))

#----------------------------------------------------------------------

class Application():

    NoOfPanes = 0
    Panes = []

    paneLocs = [(583, 334, 300, 150), 
                (633, 150, 200, 125), 
                (633, 600, 200, 125), 
                (350, 360, 200, 100), 
                (925, 360, 200, 100), 
                (1000, 150, 150, 100), 
                (275, 150, 150, 100), 
                (275, 600, 150, 100), 
                (1000, 600, 150, 100), 
                (75, 350, 200, 100),
                (0, 668, 200, 100)
                ]    

    #---------------------------

    def __init__(self):

        pygame.init()
        pygame.display.set_caption('Box Test')

        self.font = pygame.font.SysFont('Arial', 25)
        self.screen = pygame.display.set_mode((1366,768), 0, 32)

        self.show_panes = True

        self.createPanes()

        self.keyboard = Keyboard(self.screen)

    #---------------------------

    def close(self):
        print "pygame quit"
        pygame.quit()
        sys.exit()

    #---------------------------

    def createPanes(self):
        self.addPane("1", WORDS)
        self.addPane("2", WORDS)
        self.addPane("3", WORDS)
        self.addPane("4", WORDS)
        self.addPane("5", WORDS)
        self.addPane("6", WORDS)
        self.addPane("7", WORDS)
        self.addPane("8", WORDS)
        self.addPane("9", WORDS)
        self.addPane("10", WORDS)
        self.addPane("Keyboard", WORDS)

    #---------------------------

    def addPane(self, textToDisplay, keyboardFlag):      
        if (not keyboardFlag) and (self.NoOfPanes &gt; 11):
            print("Limit Reached")            
        else:
            print(int(self.NoOfPanes))

            if not keyboardFlag:
                self.Panes.append(Pane(textToDisplay, self.paneLocs[self.NoOfPanes], self.screen))
                self.NoOfPanes += 1

    #---------------------------

    def drawPanes(self):
        for Pane in self.Panes:
            Pane.draw()

    #---------------------------

    def mousePosition(self, event):
            if event.type == MAIN_BUTTON:
                self.Pos = event.pos
                return MAIN_BUTTON
            else:
                return False

    #---------------------------

    def event_handler(self, event):

        textToReturn = None

        # let panes handle events
        for pane in self.Panes:
            pane.event_handler(event)

        if event.type == pygame.MOUSEBUTTONUP:
            posx, posy = event.pos
            for pane in self.Panes:
                #print "debug: app.event_handler", posx, posy
                if pane.test_coordinates(posx, posy):
                    textToReturn = pane.text()

                    if textToReturn == "Keyboard":
                        self.keyboard.visible = True
                        self.show_panes = False

                    print textToReturn
        return textToReturn

    #---------------------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        while RUNNING:

            # --- events ---

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    RUNNING = False
                    break

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        self.keyboard.visible = not self.keyboard.visible
                        self.show_panes = not self.show_panes


                if event.type == evt_type.KEYBOARD:
                    print "USEREVENT:: TYPE:", event.type, "CODE:", event.code
                    # event from keyboard
                    if event.code == evt_code.KEYBOARD_CLOSED:
                        # keyboar was closed so I have to show panes
                        self.show_panes = True

                if event.type == evt_type.PANE:
                    print "USEREVENT:: TYPE:", event.type, "CODE:", event.code
                    if event.code == evt_code.PANE_CLICKED:
                        # move to the end - move to top of screen
                        index = self.Panes.index(event.widget)
                        self.Panes.append(self.Panes.pop(index))

                if self.show_panes:
                    self.event_handler(event)

                if self.keyboard.visible:
                    self.keyboard.event_handler(event)

            # --- draws ---

            self.screen.fill(WHITE)

            if self.show_panes:
                self.drawPanes()

            if self.keyboard.visible:
                self.keyboard.draw()

            pygame.display.update()

            # --- FPS ---

            clock.tick(25)

        self.close()    

#----------------------------------------------------------------------

Application().run()
</snippet></ROW><ROW><id>20054159</id><snippet>import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.transforms as transforms

# set up fig and axis
fig = plt.figure()
currentAxis = plt.gca()

# set translation 
dx, dy = 5/72., -5/72.
offset = transforms.ScaledTranslation(dx, dy, fig.dpi_scale_trans)
shadow_transform = currentAxis.transData + offset

# plot patch shadow
rect = patches.Rectangle((0.2, 0.420), 0.65, 0.730, transform=shadow_transform, 
                         edgecolor = None, facecolor = "black", zorder = 3)
currentAxis.add_patch(rect)

# plot patch
rect = patches.Rectangle((0.2, 0.420), 0.65, 0.730, edgecolor = None, 
                         facecolor = "white", zorder = 3)
currentAxis.add_patch(rect)
</snippet></ROW><ROW><id>20054159</id><snippet>transform</snippet></ROW><ROW><id>20054159</id><snippet>Rectangle</snippet></ROW><ROW><id>20054174</id><snippet>from selenium.webdriver.chrome.options import Options

chrome_options = Options()
chrome_options.add_argument("--disable-extensions")

driver = webdriver.Chrome(chrome_options=chrome_options)
</snippet></ROW><ROW><id>20054244</id><snippet>na_values</snippet></ROW><ROW><id>20054244</id><snippet>read_csv</snippet></ROW><ROW><id>20054244</id><snippet>df = pd.read_csv("income.csv",header=None,na_values=" NaN")
</snippet></ROW><ROW><id>20054396</id><snippet>try:
    mean = a.mean
except AttributeError:
    return _wrapit(a, 'mean', axis, dtype, out)
return mean(axis, dtype, out)
</snippet></ROW><ROW><id>20054396</id><snippet>...
if weights is None :
    avg = a.mean(axis)
    scl = avg.dtype.type(a.size/avg.size)
else:
    #code that does weighted mean here

if returned: #returned is another optional argument
    scl = np.multiply(avg, 0) + scl
    return avg, scl
else:
    return avg
...
</snippet></ROW><ROW><id>20054397</id><snippet>display: inline</snippet></ROW><ROW><id>20054397</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>20054397</id><snippet>overflow: visible</snippet></ROW><ROW><id>20054551</id><snippet>-pylab</snippet></ROW><ROW><id>20054551</id><snippet>numpy.log</snippet></ROW><ROW><id>20054551</id><snippet>numpy.log</snippet></ROW><ROW><id>20054551</id><snippet>math.log</snippet></ROW><ROW><id>20054623</id><snippet>combinations()</snippet></ROW><ROW><id>20054623</id><snippet>[list(combo) for combo in combinations(range(x + 1), y) if 1 in combo]
</snippet></ROW><ROW><id>20054623</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; x, y = 4, 3
&gt;&gt;&gt; [list(combo) for combo in combinations(range(x + 1), y) if 1 in combo]
[[0, 1, 2], [0, 1, 3], [0, 1, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4]]
</snippet></ROW><ROW><id>20054623</id><snippet>y - 1</snippet></ROW><ROW><id>20054623</id><snippet>range(x + 1)</snippet></ROW><ROW><id>20054623</id><snippet>1</snippet></ROW><ROW><id>20054623</id><snippet>1</snippet></ROW><ROW><id>20054623</id><snippet>bisect.insort()</snippet></ROW><ROW><id>20054623</id><snippet>import bisect

def combinations_with_guaranteed(x, y, *guaranteed):
    values = set(range(x + 1))
    values.difference_update(guaranteed)
    for combo in combinations(sorted(values), y - len(guaranteed)):
        combo = list(combo)
        for value in guaranteed:
            bisect.insort(combo, value)
        yield combo
</snippet></ROW><ROW><id>20054623</id><snippet>&gt;&gt;&gt; list(combinations_with_guaranteed(4, 3, 1))
[[0, 1, 2], [0, 1, 3], [0, 1, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4]]
&gt;&gt;&gt; list(combinations_with_guaranteed(4, 3, 1, 2))
[[0, 1, 2], [1, 2, 3], [1, 2, 4]]
</snippet></ROW><ROW><id>20054623</id><snippet>y</snippet></ROW><ROW><id>20054623</id><snippet>yield sorted(combo + values)</snippet></ROW><ROW><id>20054623</id><snippet>bisect.insort()</snippet></ROW><ROW><id>20054917</id><snippet>def combinations(my_string, n):
    result = []
    for i in range(0,len(my_string)-n+1):
        result.append(my_string[i:i+n])
    result.append(my_string[-1]+my_string[0:n-1])
    return result
</snippet></ROW><ROW><id>20054917</id><snippet>def combination(string, n):
    result = []

    for i in range(0,len(string)-n+1):
        result.append(string[i:i+n])

    for i in range(len(string)-n+1,len(string)):
        result.append( string[i:i+n] + string[0:n-len(string)+i] )

    return result
</snippet></ROW><ROW><id>20054954</id><snippet>sys.path</snippet></ROW><ROW><id>20054954</id><snippet>PATH</snippet></ROW><ROW><id>20054954</id><snippet>user_modules</snippet></ROW><ROW><id>20054954</id><snippet>site_modules</snippet></ROW><ROW><id>20054954</id><snippet>PATH</snippet></ROW><ROW><id>20054954</id><snippet>/usr/local</snippet></ROW><ROW><id>20054954</id><snippet>/usr</snippet></ROW><ROW><id>20054979</id><snippet>next</snippet></ROW><ROW><id>20054979</id><snippet>next = step - 1
</snippet></ROW><ROW><id>20054979</id><snippet>N=2</snippet></ROW><ROW><id>20054979</id><snippet>'Craig'</snippet></ROW><ROW><id>20054979</id><snippet>next</snippet></ROW><ROW><id>20054979</id><snippet>names</snippet></ROW><ROW><id>20054979</id><snippet>next = (next + step - 1) % len(names)
</snippet></ROW><ROW><id>20054979</id><snippet>def survivor(names, step):
    next = step-1

    while len(names) &gt; 1:
        print "-", names.pop(next), "walked"
    next = (next + step - 1) % len(names)

    return names[0]

print survivor(["Andrew", "Brenda", "Craig", "Deidre", "Edward", "Felicity", "Greg", "Harriet"], 2), "survived!"
</snippet></ROW><ROW><id>20054979</id><snippet>- Brenda walked
- Deidre walked
- Felicity walked
- Harriet walked
- Craig walked
- Greg walked
- Edward walked
Andrew survived!
</snippet></ROW><ROW><id>20054979</id><snippet>next</snippet></ROW><ROW><id>20055064</id><snippet>python -W ignore Convert_Blast_XML_to_Tabular.py
</snippet></ROW><ROW><id>20055064</id><snippet>import warnings

with warnings.catch_warnings():
    warnings.simplefilter('ignore')
    from Bio import SearchIO
</snippet></ROW><ROW><id>20055091</id><snippet>while i&lt;len(newsymbolslist):
    try:
        page = urllib2.urlopen("http://finance.yahoo.com/q/ks?s="+newsymbolslist[i] +"%20Key%20Statistics").read()
    except urllib2.HTTPError:
        continue
    soup = BeautifulSoup(page)
    name_company = soup.findAll("div", {"class" : "title"}) 
    for name in name_company: #add multiple iterations?        
        all_data = soup.findAll('td', "yfnc_tabledata1")
        stock_name = name.find('h2').string #find company's name in name_company with h2 tag
        try:    
            f.writerow([stock_name, all_data[2].getText(),all_data[17].getText(),all_data[13].getText(), all_data[29].getText(),all_data[26].getText()]) #write down PE data
        except (IndexError, HTTPError) as e:
            pass
    i+=1    
</snippet></ROW><ROW><id>20055115</id><snippet>fileinput</snippet></ROW><ROW><id>20055115</id><snippet>import sys, fileinput

for count, line in enumerate(fileinput.input(filename, inplace=True)):
    if count == 69:  # Python counts from 0
        line = newvalue
    sys.stdout.write(line)
</snippet></ROW><ROW><id>20055115</id><snippet>sys.stdout</snippet></ROW><ROW><id>20055115</id><snippet>print</snippet></ROW><ROW><id>20055115</id><snippet>line</snippet></ROW><ROW><id>20055466</id><snippet>str.splitlines</snippet></ROW><ROW><id>20055466</id><snippet>s = """Let's say this is first line and let's check line 4
In this second line there are number 10 and 8
Third line doesn't have any numbers
This is fourth line and we'll go on in line 12
This is fifth line and we go on in line 8
In sixth line there is number 6
This seventh line contains number 5, which means 5th line
This is eighth and the last line, it ends here.
These three lines are boring.
They really are
In eleventh line we can see that line 12 is really interesting
This is twelfth line but we go back to line 7."""

lines = s.splitlines()
</snippet></ROW><ROW><id>20055466</id><snippet>current_line = lines[0]
number = find_number(current_line)
</snippet></ROW><ROW><id>20055466</id><snippet>current_line</snippet></ROW><ROW><id>20055466</id><snippet>if number is None:     # No numbers were found
    end_line = current_line
else:
    current_line = lines[first_number]
    number = find_number(current_line)
</snippet></ROW><ROW><id>20055466</id><snippet>while</snippet></ROW><ROW><id>20055466</id><snippet>def get_line(line):
    number = find_number(line)
    if number is None:     # No numbers were found
        return line
    else:
        return get_line(find_number(lines[number]))
</snippet></ROW><ROW><id>20055491</id><snippet>def doSomething(myListOfLists, otherInputs):
    s = set(otherInputs)           #create set from otherInputs
    for item in myListOfLists: 
        #remove the common items between `s` and current sublist from `s`.
        s -= s.intersection(item) 
        #if `s` is empty, means all items found. Return True
        if not s:                  
            return True
    return not bool(s)
... 
&gt;&gt;&gt; doSomething([[1, 2, 7],[6, 5, 4], [10, 9, 10]], [7, 6, 8])
False
&gt;&gt;&gt; doSomething([[1, 2, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
</snippet></ROW><ROW><id>20055491</id><snippet>otherInputs</snippet></ROW><ROW><id>20055491</id><snippet>def doSomething(myListOfLists, otherInputs):
    s = set(otherInputs)
    return any(set(item) == s for item in myListOfLists)
... 
&gt;&gt;&gt; doSomething([[6, 8, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
&gt;&gt;&gt; doSomething([[1, 2, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
False
</snippet></ROW><ROW><id>20055491</id><snippet>otherInputs</snippet></ROW><ROW><id>20055491</id><snippet>def doSomething(myListOfLists, otherInputs):
    s = set(otherInputs)
    return any(s.issubset(item) for item in myListOfLists)
... 
&gt;&gt;&gt; doSomething([[6, 8, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
&gt;&gt;&gt; doSomething([[6, 8, 7, 10],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
&gt;&gt;&gt; doSomething([[1, 2, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
False
</snippet></ROW><ROW><id>20055495</id><snippet>gevent</snippet></ROW><ROW><id>20055495</id><snippet>grequests</snippet></ROW><ROW><id>20055495</id><snippet>gevent</snippet></ROW><ROW><id>20055495</id><snippet>requests</snippet></ROW><ROW><id>20055495</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20055495</id><snippet>urllib</snippet></ROW><ROW><id>20055495</id><snippet>requests</snippet></ROW><ROW><id>20055495</id><snippet>load_url</snippet></ROW><ROW><id>20055495</id><snippet>def load_url(token):
    deviceToken=token[0].replace("/","")
    # … your original code here …
    r = requests.post(URL, data=json.dumps(payload), headers=headers)
    return r.content
</snippet></ROW><ROW><id>20055495</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20055495</id><snippet>futures</snippet></ROW><ROW><id>20055495</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>20055495</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>20055495</id><snippet>multiprocessing</snippet></ROW><ROW><id>20055495</id><snippet>multiprocessing.dummy</snippet></ROW><ROW><id>20055610</id><snippet>if ['box'] in type:</snippet></ROW><ROW><id>20055610</id><snippet>'box'</snippet></ROW><ROW><id>20055610</id><snippet>['box']</snippet></ROW><ROW><id>20055610</id><snippet>'box'</snippet></ROW><ROW><id>20055610</id><snippet>if 'box' in type:</snippet></ROW><ROW><id>20055610</id><snippet>type()</snippet></ROW><ROW><id>20055612</id><snippet>hdul = pyfits.open(filename, mode='update')
</snippet></ROW><ROW><id>20055612</id><snippet>with pyfits.open(filename, mode='update') as hdul:
    # Make changes to the file...
    # The changes will be saved and the underlying file object closed when exiting
    # the 'with' block
</snippet></ROW><ROW><id>20055748</id><snippet>&gt;&gt;&gt; tri = np.zeros((67, 67))
&gt;&gt;&gt; tri[np.triu_indices(67, 1)] = dm
</snippet></ROW><ROW><id>20055748</id><snippet>triu_indices</snippet></ROW><ROW><id>20055748</id><snippet>np.tril_indices</snippet></ROW><ROW><id>20055748</id><snippet>-1</snippet></ROW><ROW><id>20055748</id><snippet>1</snippet></ROW><ROW><id>20055772</id><snippet>QScrollArea</snippet></ROW><ROW><id>20055772</id><snippet>from PyQt4 import QtGui

class Window(QtGui.QWidget):
    def __init__(self, val):
        QtGui.QWidget.__init__(self)
        mygroupbox = QtGui.QGroupBox('this is my groupbox')
        myform = QtGui.QFormLayout()
        labellist = []
        combolist = []
        for i in range(val):
            labellist.append(QtGui.QLabel('mylabel'))
            combolist.append(QtGui.QComboBox())
            myform.addRow(labellist[i],combolist[i])
        mygroupbox.setLayout(myform)
        scroll = QtGui.QScrollArea()
        scroll.setWidget(mygroupbox)
        scroll.setWidgetResizable(True)
        scroll.setFixedHeight(400)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(scroll)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(25)
    window.setGeometry(500, 300, 300, 400)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20055778</id><snippet>csv</snippet></ROW><ROW><id>20055778</id><snippet>newline=''</snippet></ROW><ROW><id>20055778</id><snippet>\r\n</snippet></ROW><ROW><id>20055778</id><snippet>\r</snippet></ROW><ROW><id>20055778</id><snippet>newline=''</snippet></ROW><ROW><id>20055778</id><snippet>\r\n</snippet></ROW><ROW><id>20055778</id><snippet>newline=''</snippet></ROW><ROW><id>20055778</id><snippet>open</snippet></ROW><ROW><id>20055806</id><snippet>Counter</snippet></ROW><ROW><id>20055806</id><snippet>from collections import Counter

freq = Counter()
for x in data:
    freq[(x - 1) // 10] += 1
</snippet></ROW><ROW><id>20055806</id><snippet>-1</snippet></ROW><ROW><id>20056056</id><snippet>["data", "test", "row", "blah", "boo"]
</snippet></ROW><ROW><id>20056056</id><snippet>{1: "data", 2: "test", 3: "row", 4: "blah", 5: "boo"}
</snippet></ROW><ROW><id>20056056</id><snippet>'{"1": "data", "2": "test", "3": "row", "4": "blah", "5": "boo"}'
</snippet></ROW><ROW><id>20056056</id><snippet>enumerate</snippet></ROW><ROW><id>20056056</id><snippet>(index, value)</snippet></ROW><ROW><id>20056056</id><snippet>dict</snippet></ROW><ROW><id>20056056</id><snippet>(key, value)</snippet></ROW><ROW><id>20056056</id><snippet>jsonlist = ["data", "test", "row", "blah", "boo"]
jsondict = dict(enumerate(jsonlist, 1))
with open('test.txt', "wb") as jsfile:
    jsfile.write(json.dumps(jsondict))
</snippet></ROW><ROW><id>20056056</id><snippet>enumerate</snippet></ROW><ROW><id>20056056</id><snippet>enumerate</snippet></ROW><ROW><id>20056056</id><snippet>list</snippet></ROW><ROW><id>20056056</id><snippet>jsonlist = ["data", "test", "row", "blah", "boo"]
jsonpairs = list(enumerate(jsonlist, 1))
with open('test.txt', "wb") as jsfile:
    jsfile.write(json.dumps(jsonpairs))
</snippet></ROW><ROW><id>20056056</id><snippet>start</snippet></ROW><ROW><id>20056056</id><snippet>enumerate</snippet></ROW><ROW><id>20056409</id><snippet>boost::python::pure_virtual</snippet></ROW><ROW><id>20056409</id><snippet>struct BaseWrap : Base, boost::python::wrapper&lt;Base&gt;
{
  int foo()
  {
    return this-&gt;get_override("foo")();
  }
};

...

boost::python::class_&lt;BaseWrap&gt;("Base", ...)
  .def("foo", boost::python::pure_virtual(&amp;Base::foo))
  ;
</snippet></ROW><ROW><id>20056409</id><snippet>boost::python::class_</snippet></ROW><ROW><id>20056409</id><snippet>HeldType</snippet></ROW><ROW><id>20056409</id><snippet>HeldType</snippet></ROW><ROW><id>20056409</id><snippet>class_</snippet></ROW><ROW><id>20056409</id><snippet>T</snippet></ROW><ROW><id>20056409</id><snippet>HeldType</snippet></ROW><ROW><id>20056409</id><snippet>T</snippet></ROW><ROW><id>20056409</id><snippet>T</snippet></ROW><ROW><id>20056409</id><snippet>boost::python::class_&lt;Base&gt;</snippet></ROW><ROW><id>20056409</id><snippet>T = Base</snippet></ROW><ROW><id>20056409</id><snippet>HeldType = Base</snippet></ROW><ROW><id>20056409</id><snippet>HeldType</snippet></ROW><ROW><id>20056409</id><snippet>Base</snippet></ROW><ROW><id>20056409</id><snippet>Base</snippet></ROW><ROW><id>20056409</id><snippet>BaseWrap</snippet></ROW><ROW><id>20056409</id><snippet>#include &lt;boost/python.hpp&gt;

struct Base
{
  virtual int foo() = 0;
  virtual ~Base() {}
};

struct Derived : public Base
{
  virtual int foo()
  {
    return 42;
  }
};

Base* get_base()
{
  return new Derived;
}

namespace python = boost::python;

/// @brief Wrapper that will provide a non-abstract type for Base.
struct BaseWrap : Base, python::wrapper&lt;Base&gt;
{
  BaseWrap() {}

  BaseWrap(const Base&amp; rhs)
    : Base(rhs)
  {}

  int foo()
  {
    return this-&gt;get_override("foo")();
  }
};

BOOST_PYTHON_MODULE(example)
{
  python::class_&lt;BaseWrap&gt;("Base")
    .def("foo", python::pure_virtual(&amp;Base::foo));
    ;

  python::def("get_base", &amp;get_base,
              python::return_value_policy&lt;python::manage_new_object&gt;());
}
</snippet></ROW><ROW><id>20056409</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; class Spam(example.Base):
...     pass
... 
&gt;&gt;&gt; Spam().foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: Pure virtual function called
&gt;&gt;&gt; class Egg(example.Base):
...     def foo(self):
...         return 100
... 
&gt;&gt;&gt; e = Egg()
&gt;&gt;&gt; e.foo()
100
&gt;&gt;&gt; d = example.get_base()
&gt;&gt;&gt; d.foo()
42
</snippet></ROW><ROW><id>20056409</id><snippet>boost::python::no_init</snippet></ROW><ROW><id>20056409</id><snippet>boost::noncopyable</snippet></ROW><ROW><id>20056409</id><snippet>Base::foo()</snippet></ROW><ROW><id>20056409</id><snippet>Derived</snippet></ROW><ROW><id>20056409</id><snippet>foo()</snippet></ROW><ROW><id>20056409</id><snippet>def()</snippet></ROW><ROW><id>20056409</id><snippet>#include &lt;boost/python.hpp&gt;

struct Base
{
  virtual int foo() = 0;
  virtual ~Base() {}
};

struct Derived
  : public Base
{
  virtual int foo()
  {
    return 42;
  }
};

struct OtherDerived
  : public Base
{
  virtual int foo()
  {
    return 24;
  }
};

Base* get_base()
{
  return new Derived;
}

Base* get_other_base()
{
  return new OtherDerived;
}

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::class_&lt;Base, boost::noncopyable&gt;("Base", python::no_init)
    ;

  python::class_&lt;Derived, python::bases&lt;Base&gt; &gt;("Derived", python::no_init)
    .def("foo", &amp;Base::foo)
    ;

  python::class_&lt;OtherDerived, python::bases&lt;Base&gt; &gt;(
      "OtherDerived", python::no_init)
    ;

  python::def("get_base", &amp;get_base,
              python::return_value_policy&lt;python::manage_new_object&gt;());

  python::def("get_other_base", &amp;get_other_base,
              python::return_value_policy&lt;python::manage_new_object&gt;());
}
</snippet></ROW><ROW><id>20056409</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; b = example.get_base()
&gt;&gt;&gt; b.foo()
42
&gt;&gt;&gt; b = example.get_other_base()
&gt;&gt;&gt; b.foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'OtherDerived' object has no attribute 'foo'
</snippet></ROW><ROW><id>20056493</id><snippet>triang = tri.Triangulation(x, y, [[3,2,1],[1,2,0]])

# alternatively:
triang = tri.Triangulation(x, y, [[3,2,0],[1,3,0]])
</snippet></ROW><ROW><id>20056493</id><snippet>import numpy
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
import matplotlib.tri as tri


def plot_refined_tri(x, y, z, ax, subdiv=4, **kwargs):
    triang = tri.Triangulation(x, y)
    refiner = tri.UniformTriRefiner(triang)
    interpolator = tri.LinearTriInterpolator(triang, z)
    new, new_z = refiner.refine_field(z, interpolator, subdiv=subdiv)
    ax.plot_trisurf(new.x, new.y, new_z, triangles=new.triangles, **kwargs)


x=numpy.array([0.00498316, 0.00498316, 0.00996632, 0.00996632])
y=numpy.array([-0.00037677, -0.00027191, -0.00078681, -0.00088475])
z=numpy.array([0., -0.0049926, 0., -0.00744763])

fig = plt.figure()
ax = Axes3D(fig)
# note: I normalized on z-values to "fix" the colormap
norm = plt.Normalize(vmax=z.max(), vmin=z.min())
kwargs = kwargs = dict(linewidth=0.2, cmap=cm.jet, norm=norm)

idx = [3,2,1]
plot_refined_tri(x[idx], y[idx], z[idx], ax, **kwargs)

idx = [1,2,0]
plot_refined_tri(x[idx], y[idx], z[idx], ax, **kwargs)

plt.show()
</snippet></ROW><ROW><id>20056551</id><snippet>set(list_2)</snippet></ROW><ROW><id>20056551</id><snippet>list_2</snippet></ROW><ROW><id>20056615</id><snippet>print '"%s"'%word
</snippet></ROW><ROW><id>20056615</id><snippet>print '"{}"'.format(word)
</snippet></ROW><ROW><id>20056615</id><snippet>print "\"%s\""%word
</snippet></ROW><ROW><id>20056615</id><snippet>from pprint import pprint
pprint(word)
</snippet></ROW><ROW><id>20056615</id><snippet>word = '"Some word"'
print word
</snippet></ROW><ROW><id>20056615</id><snippet>def double_quote(word):
    double_q = '"' # double quote
    return double_q + word + double_q
print double_quote(word), double_quote(word2)
</snippet></ROW><ROW><id>20056696</id><snippet>'scene:light_manager'</snippet></ROW><ROW><id>20056696</id><snippet>Property</snippet></ROW><ROW><id>20056696</id><snippet>class Application(HasTraits):
  scene=Instance(MlabSceneModel,())

  ...

  @on_trait_change('scene:scene_editor:light_manager')
  def muck_with_the_lights(self):
    print self.scene.light_manager
</snippet></ROW><ROW><id>20056803</id><snippet>10</snippet></ROW><ROW><id>20056803</id><snippet>10000</snippet></ROW><ROW><id>20056803</id><snippet>import random

def make_number():
  val = random.random()
  if val &lt; 0.1: #10%
    return 10000
  elif val &lt; 0.3: # 20%
    return 1000
  elif val &lt; 0.6: # 30%
    return 100
  else: # 40%
    return 10

values = [make_number() for i in range(10)]
print (values)
</snippet></ROW><ROW><id>20056821</id><snippet>((public|private|protected)[^;{]*?{)
</snippet></ROW><ROW><id>20056821</id><snippet>;</snippet></ROW><ROW><id>20056821</id><snippet>{</snippet></ROW><ROW><id>20056899</id><snippet>my_user.information_set.all()
</snippet></ROW><ROW><id>20056899</id><snippet>Class Information(models.Model):
     ...
     user=models.ForeignKey(related_name='history')
</snippet></ROW><ROW><id>20056899</id><snippet>my_user.history.all()
</snippet></ROW><ROW><id>20057027</id><snippet>class_</snippet></ROW><ROW><id>20057027</id><snippet>#include &lt;boost/python.hpp&gt;

struct Human
{
  struct emotion
  {
    char joy;
    // ...
  };
};

BOOST_PYTHON_MODULE(example)                     // set scope to example
{
  namespace python = boost::python;
  {
    python::scope in_human =                     // define example.Human and set
      python::class_&lt;Human&gt;("Human");            // scope to example.Human

    python::class_&lt;Human::emotion&gt;("Emotion")    // define example.Human.Emotion
      .add_property("joy", &amp;Human::emotion::joy) 
      ;
  }                                              // revert scope, scope is now
}                                                // example
</snippet></ROW><ROW><id>20057027</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; e = example.Human.Emotion
&gt;&gt;&gt; e
&lt;class 'example.Emotion'&gt;
&gt;&gt;&gt; hasattr(e, 'joy')
True
</snippet></ROW><ROW><id>20057443</id><snippet>and</snippet></ROW><ROW><id>20057443</id><snippet>or</snippet></ROW><ROW><id>20057443</id><snippet>while colour not in colours and colour!="exit":
</snippet></ROW><ROW><id>20057443</id><snippet>colour</snippet></ROW><ROW><id>20057443</id><snippet>colours</snippet></ROW><ROW><id>20057443</id><snippet>"exit"</snippet></ROW><ROW><id>20057731</id><snippet>except (ValueError,IOError) as err:
</snippet></ROW><ROW><id>20057731</id><snippet>try</snippet></ROW><ROW><id>20057731</id><snippet>except</snippet></ROW><ROW><id>20057731</id><snippet>def average():
    try:
        TOTAL_VALUE = 0
        FILE = open("Numbers.txt", 'r')

        for line in FILE:
            AMOUNT = float(line)
            TOTAL_VALUE += AMOUNT
            NUMBERS_AVERAGE = TOTAL_VALUE / AMOUNT
        print("the average of the numbers in 'Numbers.txt' is :",
            format(NUMBERS_AVERAGE, '.2f')) 

        FILE.close()

    except (ValueError,IOError) as err:
        print(err)
</snippet></ROW><ROW><id>20057731</id><snippet>except</snippet></ROW><ROW><id>20057731</id><snippet>try</snippet></ROW><ROW><id>20057749</id><snippet>'''</snippet></ROW><ROW><id>20057749</id><snippet>'''</snippet></ROW><ROW><id>20057873</id><snippet>board_is_full</snippet></ROW><ROW><id>20057873</id><snippet>None not in board</snippet></ROW><ROW><id>20057873</id><snippet>board</snippet></ROW><ROW><id>20057873</id><snippet>None</snippet></ROW><ROW><id>20057873</id><snippet>if None not in row</snippet></ROW><ROW><id>20057873</id><snippet>False</snippet></ROW><ROW><id>20057873</id><snippet>True</snippet></ROW><ROW><id>20057873</id><snippet>player_turn</snippet></ROW><ROW><id>20057873</id><snippet>return input('row, col: ')</snippet></ROW><ROW><id>20057873</id><snippet>player_turn</snippet></ROW><ROW><id>20057873</id><snippet>board</snippet></ROW><ROW><id>20057873</id><snippet>row, col = player_turn(board, PLAYERS[current_player])
board[row][col] = PLAYERS[current_player]
</snippet></ROW><ROW><id>20057873</id><snippet>while</snippet></ROW><ROW><id>20057873</id><snippet>player_turn</snippet></ROW><ROW><id>20058078</id><snippet>#add ABP
print "before:",ABP   #test line for flipBit
ABP = flipBit(ABP)
abp = str(ABP)
print "after:",ABP    #test line for flipBit
</snippet></ROW><ROW><id>20058078</id><snippet>% python ftpc.py 164.107.112.70 4000 8000 manygettysburgs.txt
before: 1
after: 0
Timeout, resending packet...
before: 0
after: 1
Timeout, resending packet...
before: 1
after: 0
</snippet></ROW><ROW><id>20058078</id><snippet>return Header
</snippet></ROW><ROW><id>20058078</id><snippet>return Header, ABP
</snippet></ROW><ROW><id>20058078</id><snippet>filesizestr = buildPacketHeader(IP,PORT,1,bit)
</snippet></ROW><ROW><id>20058078</id><snippet>filesizestr, bit = buildPacketHeader(IP,PORT,1,bit)
</snippet></ROW><ROW><id>20058267</id><snippet>num</snippet></ROW><ROW><id>20058267</id><snippet>digital_helper()</snippet></ROW><ROW><id>20058267</id><snippet>digital_sum()</snippet></ROW><ROW><id>20058267</id><snippet>return digital_sum(digital_helper(...))
</snippet></ROW><ROW><id>20058267</id><snippet>digital_sum()</snippet></ROW><ROW><id>20058267</id><snippet>num</snippet></ROW><ROW><id>20058267</id><snippet>num</snippet></ROW><ROW><id>20058267</id><snippet>digital_helper()</snippet></ROW><ROW><id>20058267</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>20058267</id><snippet>'['</snippet></ROW><ROW><id>20058322</id><snippet>~/.virtualenvs</snippet></ROW><ROW><id>20058495</id><snippet>img = Image.open("test.gif").convert('RGB')
</snippet></ROW><ROW><id>20058526</id><snippet>self.cards = []
for i in range(0, len(SUITS)):
    for j in range(0, len(RANKS)):
        self.cards.append(Card(SUITS[i], RANKS[j]))
</snippet></ROW><ROW><id>20058526</id><snippet>SUITS</snippet></ROW><ROW><id>20058526</id><snippet>RANKS</snippet></ROW><ROW><id>20058526</id><snippet>self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS]
</snippet></ROW><ROW><id>20058526</id><snippet>itertools.product()</snippet></ROW><ROW><id>20058526</id><snippet>from itertools import product

self.cards = [Card(suit, rank) for suit, rank in product(SUITS, RANKS)]
</snippet></ROW><ROW><id>20058672</id><snippet>mod_fastcgi</snippet></ROW><ROW><id>20058672</id><snippet>apc</snippet></ROW><ROW><id>20058672</id><snippet>/var/www/fastcgi</snippet></ROW><ROW><id>20058719</id><snippet>replace()</snippet></ROW><ROW><id>20058719</id><snippet>import re
mystring = re.sub(r'\s+', ' ', mystring)
</snippet></ROW><ROW><id>20058719</id><snippet>r</snippet></ROW><ROW><id>20058719</id><snippet>'\b'</snippet></ROW><ROW><id>20058719</id><snippet>r'\b'</snippet></ROW><ROW><id>20058752</id><snippet>listLen</snippet></ROW><ROW><id>20058752</id><snippet>int</snippet></ROW><ROW><id>20058752</id><snippet>listLen = 10 # generate lists of length 10
low = 0 # the lower bound of the numbers you want to walk
high = random.randint(0,100) # the upper bound of the numbers you want to walk
for L in itertools.product(range(low, high+1), repeat=listLen):
  print(L)
</snippet></ROW><ROW><id>20058752</id><snippet>listLen = 10
low = 0
for L in itertools.product(*[range(low,random.randint(0,100)) for _ in range(listLen)]):
  print(L)
</snippet></ROW><ROW><id>20059249</id><snippet>&gt;&gt;&gt; publicKey.decrypt(enc2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/RSA.py", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File "/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/pubkey.py", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File "/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/RSA.py", line 239, in _decrypt
    mp = self.key._decrypt(cp)
  File "/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/_slowmath.py", line 52, in _decrypt
    raise TypeError("No private key")
TypeError: No private key
</snippet></ROW><ROW><id>20059283</id><snippet>dis.dis</snippet></ROW><ROW><id>20059283</id><snippet>dis</snippet></ROW><ROW><id>20059283</id><snippet>inspect.getsource</snippet></ROW><ROW><id>20059283</id><snippet>&gt;&gt;&gt; f1 = lambda x: x
&gt;&gt;&gt; f2 = lambda y: y
&gt;&gt;&gt; def f3(z):
...     return z
&gt;&gt;&gt; dis.dis(f1)
  1           0 LOAD_FAST                0 (x)
              3 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f2)
  1           0 LOAD_FAST                0 (y)
              3 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f3)
  1           0 LOAD_FAST                0 (z)
              3 RETURN_VALUE
&gt;&gt;&gt; inspect.getsource(f1)
'f1 = lambda x: x\n'
&gt;&gt;&gt; inspect.getsource(f2)
'f2 = lambda y: y\n'
&gt;&gt;&gt; inspect.getsource(f3)
'def f3(z):\n    return z\n'
</snippet></ROW><ROW><id>20059283</id><snippet>dis</snippet></ROW><ROW><id>20059283</id><snippet>(x)</snippet></ROW><ROW><id>20059283</id><snippet>inspect</snippet></ROW><ROW><id>20059283</id><snippet>dis</snippet></ROW><ROW><id>20059283</id><snippet>def</snippet></ROW><ROW><id>20059283</id><snippet>lambda</snippet></ROW><ROW><id>20059343</id><snippet>from matplotlib import pyplot as plt
import numpy as np
a=np.asarray([[[0,0],[1,1]],[[1,2],[2,3]],[[5,2],[2,6]],[[7,3],[5,9]]])
X=a[:,:,0].T
Y=a[:,:,1].T
plt.plot(X,Y)
plt.show()
</snippet></ROW><ROW><id>20059347</id><snippet>gc.get_objects()</snippet></ROW><ROW><id>20059347</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; 
&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; [o for o in gc.get_objects() if isinstance(o, Foo)]
[&lt;__main__.Foo instance at 0x2d2288&gt;]
&gt;&gt;&gt; 
&gt;&gt;&gt; f2 = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; [o for o in gc.get_objects() if isinstance(o, Foo)]
[&lt;__main__.Foo instance at 0x2d2288&gt;, &lt;__main__.Foo instance at 0x2d22b0&gt;]
</snippet></ROW><ROW><id>20059453</id><snippet>getPluginManualAsPDF</snippet></ROW><ROW><id>20059453</id><snippet>getPluginManualNrOfBytes</snippet></ROW><ROW><id>20059453</id><snippet>/* FIXME: the type of `mPlugin` isn't clear, is it void * ? */

unsigned char * getPluginManualAsPDF(void *mPlugin) {
  static unsigned char manual[] = {1, 2, 3};
  return manual;
}

long getPluginManualNrOfBytes(void *mPlugin) {
  return 12345;
}
</snippet></ROW><ROW><id>20059453</id><snippet>from ctypes import *

rrpLib = cdll.rrpLib # or windll if it use STDCALL

getPluginManualAsPDF = rrpLib.getPluginManualAsPDF
getPluginManualAsPDF.restype = POINTER(c_ubyte)
getPluginManualAsPDF.argtypes = [c_void_p]

getPluginManualNrOfBytes = rrpLib.getPluginManualNrOfBytes
getPluginManualNrOfBytes.restype = c_long
getPluginManualNrOfBytes.argtypes = [c_void_p]
</snippet></ROW><ROW><id>20059453</id><snippet># gcc -Wall rrpLib.c -shared -o rrpLib.dll
# python
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; rrpLib = cdll.rrpLib # or windll if it uses STDCALL
&gt;&gt;&gt;
&gt;&gt;&gt; getPluginManualAsPDF = rrpLib.getPluginManualAsPDF
&gt;&gt;&gt; getPluginManualAsPDF.restype = POINTER(c_ubyte)
&gt;&gt;&gt; getPluginManualAsPDF.argtypes = [c_void_p]
&gt;&gt;&gt;
&gt;&gt;&gt; getPluginManualNrOfBytes = rrpLib.getPluginManualNrOfBytes
&gt;&gt;&gt; getPluginManualNrOfBytes.restype = c_long
&gt;&gt;&gt; getPluginManualNrOfBytes.argtypes = [c_void_p]
&gt;&gt;&gt;
&gt;&gt;&gt; getPluginManualAsPDF(None)[0]
1
&gt;&gt;&gt; getPluginManualAsPDF(None)[1]
2
&gt;&gt;&gt; getPluginManualAsPDF(None)[2]
3
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; ptr = getPluginManualAsPDF(None)
&gt;&gt;&gt; manual = cast(ptr, POINTER(c_ubyte * 3))[0]
&gt;&gt;&gt; manual
&lt;__main__.c_ubyte_Array_3 object at 0x017801C0&gt;
&gt;&gt;&gt; open('out.txt', 'wb').write(bytearray(manual))
&gt;&gt;&gt; open('out.txt').read()
'\x01\x02\x03'
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; getPluginManualNrOfBytes(None)
12345
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20059502</id><snippet>def Network(object):
    def __init__(self, dimensions):
        self.dimensions = dimensions
</snippet></ROW><ROW><id>20059502</id><snippet>class Network(object):
    def __init__(self, dimensions):
        self.dimensions = dimensions
</snippet></ROW><ROW><id>20059502</id><snippet>self.nodes = {'all'}
for i in range(dimensions):
    self.nodes['dimension '+str(i)] = []
</snippet></ROW><ROW><id>20059502</id><snippet>self.nodes</snippet></ROW><ROW><id>20059502</id><snippet>self.nodes = {'all': []}
</snippet></ROW><ROW><id>20059585</id><snippet>tuple_list</snippet></ROW><ROW><id>20059585</id><snippet>list_dict = { t[0] : t for t in tuple_list }
</snippet></ROW><ROW><id>20059585</id><snippet>ordering_list</snippet></ROW><ROW><id>20059585</id><snippet>zip(*[iter(_list)] * 4)</snippet></ROW><ROW><id>20059585</id><snippet>_list</snippet></ROW><ROW><id>20059585</id><snippet>def fixed_size_groups(n, iterable):
    return zip(*[iter(iterable)] * n)
</snippet></ROW><ROW><id>20059585</id><snippet>ordered = list(list_dict[val] for val in ordering_list)
</snippet></ROW><ROW><id>20059585</id><snippet>ordering_list.index</snippet></ROW><ROW><id>20059585</id><snippet>ordering_list</snippet></ROW><ROW><id>20059585</id><snippet>t[0]</snippet></ROW><ROW><id>20059585</id><snippet>t</snippet></ROW><ROW><id>20059585</id><snippet>(number_of ** 2) / 2</snippet></ROW><ROW><id>20059911</id><snippet>AbstractBaseUser</snippet></ROW><ROW><id>20060037</id><snippet>__init__</snippet></ROW><ROW><id>20060037</id><snippet>try/except</snippet></ROW><ROW><id>20060037</id><snippet>__del__</snippet></ROW><ROW><id>20060037</id><snippet>class Demo(object):
    def __init__(self, value):
        self.value=value
        if value==2:
            raise ValueError
    def __del__(self):
        print '__del__', self.value


d=Demo(1)     # successfully create an object here
d=22          # new int object labeled 'd'; old 'd' goes out of scope
              # '__del__ 1' is printed once a new name is put on old 'd'
              # since the object is deleted with no references 
</snippet></ROW><ROW><id>20060037</id><snippet>2</snippet></ROW><ROW><id>20060037</id><snippet>Demo(2)
Traceback (most recent call last):
  File "Untitled 3.py", line 11, in &lt;module&gt;
    Demo(2)           
  File "Untitled 3.py", line 5, in __init__
    raise ValueError
  ValueError
 __del__ 2 # But note that `__del__` is still run.
</snippet></ROW><ROW><id>20060037</id><snippet>2</snippet></ROW><ROW><id>20060037</id><snippet>ValueError</snippet></ROW><ROW><id>20060037</id><snippet>__del__</snippet></ROW><ROW><id>20060037</id><snippet>__init__</snippet></ROW><ROW><id>20060037</id><snippet>__del__</snippet></ROW><ROW><id>20060037</id><snippet>__new__</snippet></ROW><ROW><id>20060037</id><snippet>x</snippet></ROW><ROW><id>20060037</id><snippet>&gt;&gt;&gt; x=1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt; x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
</snippet></ROW><ROW><id>20060037</id><snippet>&gt;&gt;&gt; x='Old X'
&gt;&gt;&gt; x=1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: division by zero
&gt;&gt;&gt; x
'Old X'
</snippet></ROW><ROW><id>20060037</id><snippet>__init__</snippet></ROW><ROW><id>20060037</id><snippet>try:
    o=Demo(2)
except ValueError:
    print o          # name error -- 'o' never gets bound to the object...
                     # Worst still -- 'o' is its OLD value!
</snippet></ROW><ROW><id>20060037</id><snippet>o</snippet></ROW><ROW><id>20060037</id><snippet>except</snippet></ROW><ROW><id>20060037</id><snippet>o</snippet></ROW><ROW><id>20060037</id><snippet>NameError</snippet></ROW><ROW><id>20060037</id><snippet>class ForbiddenTwoException(Exception): 
    pass

class Demo(object):
    def __init__(self, value):
        self.value=value
        print 'trying to create with val:', value
        if value==2:
            raise ForbiddenTwoException
    def __del__(self):
        print '__del__', self.value

try:
    o=Demo(2)
except ForbiddenTwoException:
    print 'Doh! Cant create Demo with a "2"! Forbidden!!!'
    # with your example - react to being unusable to create a directory... 
</snippet></ROW><ROW><id>20060037</id><snippet>trying to create with val: 2
Doh! Cant create Demo with a "2"! Forbidden!!!
__del__ 2
</snippet></ROW><ROW><id>20060183</id><snippet>tuple</snippet></ROW><ROW><id>20060183</id><snippet>&gt;&gt;&gt; tuple('SUP E P I C'.replace(" ",""))
('S', 'U', 'P', 'E', 'P', 'I', 'C')
</snippet></ROW><ROW><id>20060183</id><snippet>&gt;&gt;&gt; tuple(x for x in 'SUP E P I C' if not x.isspace())
('S', 'U', 'P', 'E', 'P', 'I', 'C')
</snippet></ROW><ROW><id>20060186</id><snippet>c.color</snippet></ROW><ROW><id>20060186</id><snippet>c.engine</snippet></ROW><ROW><id>20060186</id><snippet>if car_n.color == c.color:
</snippet></ROW><ROW><id>20060186</id><snippet>if car_n.engine == c.engine:
</snippet></ROW><ROW><id>20060186</id><snippet>getattr</snippet></ROW><ROW><id>20060186</id><snippet>def rm_car_attribute(c, attrib):
    comparison_attrib = getattr(c, attrib)
    for car_n in cars[:]:
    # Blender mentioned a good practice: not to modify the list you are iterating
    # cars[:] creates a temporary copy of cars to iterate over
        try: 
            if getattr(car_n, attrib) == comparison_attrib:
                cars.remove(car_n)
        except Exception, err:
            pass
</snippet></ROW><ROW><id>20060186</id><snippet>rm_car_attribute(c, 'engine') # same as rm_car_engine(c) from above
</snippet></ROW><ROW><id>20060186</id><snippet>car_instance.engine = 'V8'</snippet></ROW><ROW><id>20060186</id><snippet>engine</snippet></ROW><ROW><id>20060186</id><snippet>try</snippet></ROW><ROW><id>20060186</id><snippet>except</snippet></ROW><ROW><id>20060186</id><snippet>def rm_car_attribute(c, attrib):
        comparison_attrib = getattr(c, attrib)
        for car_n in cars[:]:
            try: 
                if getattr(car_n, attrib) == comparison_attrib:
                    cars.remove(car_n)
            except AttributeError:
                pass
</snippet></ROW><ROW><id>20060267</id><snippet>df1[df1.ID.isin(df2.ID) == False]
</snippet></ROW><ROW><id>20060533</id><snippet>GL_QUAD</snippet></ROW><ROW><id>20060533</id><snippet>Quad_1.x start = 0
Quad_1.x end = X%
Quad_2.x start = X%
Quad_2.x end = 1
</snippet></ROW><ROW><id>20060533</id><snippet>Quad_1</snippet></ROW><ROW><id>20060533</id><snippet>Quad_2</snippet></ROW><ROW><id>20060533</id><snippet>GL_QUADS</snippet></ROW><ROW><id>20060533</id><snippet>GL_TRIANGLES</snippet></ROW><ROW><id>20060533</id><snippet>GL_TRIANGLE_STRIP</snippet></ROW><ROW><id>20060540</id><snippet>self.canvas.create_*()</snippet></ROW><ROW><id>20060540</id><snippet>.pack()</snippet></ROW><ROW><id>20060540</id><snippet>.place()</snippet></ROW><ROW><id>20060540</id><snippet>.grid()</snippet></ROW><ROW><id>20060540</id><snippet>.pack()</snippet></ROW><ROW><id>20060540</id><snippet>.place()</snippet></ROW><ROW><id>20060540</id><snippet>.grid()</snippet></ROW><ROW><id>20060540</id><snippet>.place()</snippet></ROW><ROW><id>20060540</id><snippet>.place_forget()</snippet></ROW><ROW><id>20060540</id><snippet>from Tkinter import *

class PokerGame(object):
    def __init__(self):
        self.run()

    def run(self):
        self.root = Tk()
        self.root.title("PyPoker")
        self.root.geometry("1280x720")
        #self.width = 1280
        #self.height = 720
        #self.canvas = Canvas(self.root, width = self.width, height = self.height)
        #self.canvas.pack()

        self.drawStartScreen()
        self.root.mainloop()

    def drawStartScreen(self): 
        self.bgImage = PhotoImage(file = 'startbg.gif')

        self.bgLabel = Label(self.root, image = self.bgImage)
        self.bgLabel.place(x = 0, y = 0, relwidth = 1, relheight = 1)

        self.btnPlay = Button(self.root, text = "Play", command = self.playGame)
        self.btnPlay.place(relheight = 0.1, relwidth = 0.1, relx = 0.5, rely = 0.4, anchor = CENTER)

        self.btnInstructions = Button(self.root, text = "How To Play", command = self.showInstructions)
        self.btnInstructions.place(relheight = 0.1, relwidth = 0.1, relx = 0.5, rely = 0.5, anchor = CENTER)

    def playGame(self):
        self.redrawAll()

    def showInstructions(self):
        self.redrawAll()

    def redrawAll(self):
        print "trying to delete all"
        self.btnPlay.place_forget()
        self.btnInstructions.place_forget()
        self.bgLabel.place_forget()

PokerGame()
</snippet></ROW><ROW><id>20060585</id><snippet>for i in xrange(10):
    pass
</snippet></ROW><ROW><id>20060585</id><snippet>for i in xrange(0, 10, 1):
    pass
</snippet></ROW><ROW><id>20060585</id><snippet>range</snippet></ROW><ROW><id>20060585</id><snippet>xrange</snippet></ROW><ROW><id>20060585</id><snippet>for</snippet></ROW><ROW><id>20060585</id><snippet>while</snippet></ROW><ROW><id>20060585</id><snippet>while</snippet></ROW><ROW><id>20060683</id><snippet>__init.py__</snippet></ROW><ROW><id>20060683</id><snippet>SPIDER_MIDDLEWARES = {
    'yourprojectname.middlewares.deltafetch.DeltaFetch': 100,
}

DELTAFETCH_ENABLED = True
</snippet></ROW><ROW><id>20060683</id><snippet>DeltaFetch</snippet></ROW><ROW><id>20061227</id><snippet>import time

filename = 'my_file.txt'
while True:
    try:
        with open(filename, 'rb') as _:
            break
    except IOError:
        time.sleep(3)
</snippet></ROW><ROW><id>20061227</id><snippet>import time

filename = 'my_file.txt'
max_i = 10

for i in xrange(max_i):
    try:
        with open(filename, 'rb') as _:
            break
    except IOError:
        time.sleep(3)
else:
    raise IOError('Could not access {} after {} attempts'.format(filename, str(max_i)))
</snippet></ROW><ROW><id>20061261</id><snippet>UPDATE scores 
  set score = 0
FROM
scores s
   INNER JOIN users u
      on s.savefileid = u.savefileid -- primary key foreign key relationship here
      AND s.timestamp = (SELECT max(timestamp) FROM Scores ss where ss.savefileid = s.savefileid )
WHERE user=x 
  AND title=y 
</snippet></ROW><ROW><id>20061261</id><snippet>Select * 
FROM
scores s
   INNER JOIN users u
      on s.savefileid = u.savefileid -- primary key foreign key relationship here
      AND s.timestamp = (SELECT max(timestamp) FROM Scores ss where ss.savefileid = s.savefileid          )
WHERE user=x 
  AND title=y 
</snippet></ROW><ROW><id>20061322</id><snippet>import pylab as pl
import io
import pandas as pd

txt = """congruent contrast  cresp1    cresp2
False     1.0       0.423077  0.442308
          2.0       0.537037  0.481481
          2.5       0.576923  0.634615
          3.0       0.568182  0.500000
          3.5       0.675000  0.750000
          4.0       0.687500  0.604167
          5.0       0.687500  0.875000
          10.0      0.869565  0.913043
True      1.0       0.568182  0.386364
          2.0       0.547619  0.500000
          2.5       0.522727  0.477273
          3.0       0.557692  0.634615
          3.5       0.571429  0.928571
          4.0       0.770833  0.937500
          5.0       0.791667  0.937500
          10.0      0.820000  0.920000"""

df = pd.read_csv(io.BytesIO(txt), delim_whitespace=True).ffill()
df = df.set_index(["congruent","contrast"])
levels = df.index.levels[0]
fig, axes = pl.subplots(len(levels))

for level, ax in zip(levels, axes):
    df.loc[level].plot(ax=ax, title=str(level))
</snippet></ROW><ROW><id>20061325</id><snippet>combinations(s, 2)</snippet></ROW><ROW><id>20061325</id><snippet>from random import randrange
from itertools import combinations
long_list = [randrange(0,10000) for r in xrange(10000)]

def powerset(it):
    return [(i[0], i[1], 29994 - sum(i)) for i in combinations(it, 2) if 29994 - sum(i) in it]

def main():
    print powerset(set(long_list))

import cProfile
cProfile.run("main()")
</snippet></ROW><ROW><id>20061411</id><snippet>std::cin.clear();
</snippet></ROW><ROW><id>20061508</id><snippet>def test_zmq_inverted_pub_sub():
    import zmq
    import time
    ctx = zmq.Context()
    sub = ctx.socket(zmq.SUB)
    pub = ctx.socket(zmq.PUB)
    sub.bind('tcp://127.0.0.1:5555')
    sub.setsockopt(zmq.SUBSCRIBE, b'')
    pub.connect('tcp://127.0.0.1:5555')
    # the first sub.poll is a workaround to force subscription propagation
    for i in range(2):
        pub.send(b'hi')
        evt = sub.poll(1)
        if evt:
            break
    assert evt
</snippet></ROW><ROW><id>20061650</id><snippet>"-Xmx1536M -Xms1536M"</snippet></ROW><ROW><id>20061650</id><snippet>java -Xmx1536M -Xms1536M -jar /home/bekk/MServer/ForgeBukkit/MCPC.jar
</snippet></ROW><ROW><id>20061650</id><snippet>java '-Xmx1536M -Xms1536M' -jar /home/bekk/MServer/ForgeBukkit/MCPC.jar
</snippet></ROW><ROW><id>20061650</id><snippet>'-Xmx1536M -Xms1536M'</snippet></ROW><ROW><id>20061650</id><snippet>argv[1]</snippet></ROW><ROW><id>20061650</id><snippet>argv[1]</snippet></ROW><ROW><id>20061650</id><snippet>argv[2]</snippet></ROW><ROW><id>20061650</id><snippet>mx</snippet></ROW><ROW><id>20061650</id><snippet>'1536M -Xms1536M'</snippet></ROW><ROW><id>20061650</id><snippet>["java", "-Xmx1536M", "-Xms1536M", "-jar", "/home/bekk/MServer/ForgeBukkit/MCPC.jar"]
</snippet></ROW><ROW><id>20061814</id><snippet>elif(y+1 &lt;= rows):
    autoFill(x, y+1, rows, columns, matrix)
</snippet></ROW><ROW><id>20061814</id><snippet>rows</snippet></ROW><ROW><id>20061814</id><snippet>rows</snippet></ROW><ROW><id>20061814</id><snippet>y+1 == rows</snippet></ROW><ROW><id>20061814</id><snippet>y=1</snippet></ROW><ROW><id>20061814</id><snippet>&lt;=</snippet></ROW><ROW><id>20061814</id><snippet>&lt;</snippet></ROW><ROW><id>20061814</id><snippet>rows == columns == 0</snippet></ROW><ROW><id>20061814</id><snippet>if &lt;some condition in which you don't need to go any further&gt;:
    return
# now do the rest of your code
</snippet></ROW><ROW><id>20061899</id><snippet>import os
os.path.abspath(file_csv.name)
</snippet></ROW><ROW><id>20061952</id><snippet>vec2</snippet></ROW><ROW><id>20061952</id><snippet>vec3</snippet></ROW><ROW><id>20061952</id><snippet>pos1 = # start location
pos2 = # location to look at
up = # specified up vector

vec3 = (pos2 - pos1).GetNormalized()  # "lookat" vector
vec2 = vec3.Cross(up).GetNormalized()  # "right" vector
vec1 = vec2.Cross(vec3).GetNormalized()  # different from above
new_mx = Matrix(pos1,vec1,vec2,vec3)
</snippet></ROW><ROW><id>20061952</id><snippet>vec1</snippet></ROW><ROW><id>20061995</id><snippet># Assuming I is your image. Convert to 8 bit unsigned integers.
I_uint8 = I.astype('uint8')
</snippet></ROW><ROW><id>20061999</id><snippet>def expander(s):
    import re
    from itertools import product
    pat = r"\(([^)]*)\)"
    pieces = re.split(pat, s)
    pieces = [piece.split("|") for piece in pieces]
    for p in product(*pieces):
        yield "".join(p)
</snippet></ROW><ROW><id>20061999</id><snippet>for s in ('(A|B|C)_STRING',
          '(|A_)STRING',
          'STRING_(A|B)_STRING_(C|D)'):
    print s, "-&gt;"
    for t in expander(s):
        print "   ", t
</snippet></ROW><ROW><id>20061999</id><snippet>(A|B|C)_STRING -&gt;
    A_STRING
    B_STRING
    C_STRING
(|A_)STRING -&gt;
    STRING
    A_STRING
STRING_(A|B)_STRING_(C|D) -&gt;
    STRING_A_STRING_C
    STRING_A_STRING_D
    STRING_B_STRING_C
    STRING_B_STRING_D
</snippet></ROW><ROW><id>20062009</id><snippet>list</snippet></ROW><ROW><id>20062009</id><snippet>my_list = [[x for x in v if x != -1] for v in my_list]
</snippet></ROW><ROW><id>20062027</id><snippet>context = {'books': Books.objets.all()}
</snippet></ROW><ROW><id>20062073</id><snippet>In [152]: a = np.arange(5)

In [153]: b = np.arange(8)[::-1]

In [154]: a
Out[154]: array([0, 1, 2, 3, 4])

In [155]: b
Out[155]: array([7, 6, 5, 4, 3, 2, 1, 0])

In [156]: a[:, None] - b
Out[156]: 
array([[-7, -6, -5, -4, -3, -2, -1,  0],
       [-6, -5, -4, -3, -2, -1,  0,  1],
       [-5, -4, -3, -2, -1,  0,  1,  2],
       [-4, -3, -2, -1,  0,  1,  2,  3],
       [-3, -2, -1,  0,  1,  2,  3,  4]])
</snippet></ROW><ROW><id>20062073</id><snippet>a[:, None]</snippet></ROW><ROW><id>20062073</id><snippet>a</snippet></ROW><ROW><id>20062073</id><snippet>a.reshape(-1, 1)</snippet></ROW><ROW><id>20062073</id><snippet>b</snippet></ROW><ROW><id>20062073</id><snippet>In [157]: a[:, None]
Out[157]: 
array([[0],
       [1],
       [2],
       [3],
       [4]])
</snippet></ROW><ROW><id>20062073</id><snippet>&gt; a = 0:4
&gt; b = 7:0
&gt; outer(a, b, FUN="-")
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]   -7   -6   -5   -4   -3   -2   -1    0
[2,]   -6   -5   -4   -3   -2   -1    0    1
[3,]   -5   -4   -3   -2   -1    0    1    2
[4,]   -4   -3   -2   -1    0    1    2    3
[5,]   -3   -2   -1    0    1    2    3    4
</snippet></ROW><ROW><id>20062092</id><snippet>password = hash.split(':')[1]
</snippet></ROW><ROW><id>20062157</id><snippet>mat-vec.A # taking advantage of broadcasting
mat-vec.A[:,[0]*3] # explicit broadcasting
mat-vec[:,[0,0,0]] # that also works with csr matrix
</snippet></ROW><ROW><id>20062157</id><snippet>as_strided</snippet></ROW><ROW><id>20062157</id><snippet>mat.indptr</snippet></ROW><ROW><id>20062157</id><snippet>x.rows</snippet></ROW><ROW><id>20062157</id><snippet>x.cols</snippet></ROW><ROW><id>20062157</id><snippet>lil_matrix</snippet></ROW><ROW><id>20062157</id><snippet>getrow</snippet></ROW><ROW><id>20062157</id><snippet>def sum(X,v):
    rows, cols = X.shape
    row_start_stop = as_strided(X.indptr, shape=(rows, 2),
                            strides=2*X.indptr.strides)
    for row, (start, stop) in enumerate(row_start_stop):
        data = X.data[start:stop]
        data -= v[row]

sum(mat, vec.A)
print mat.A
</snippet></ROW><ROW><id>20062157</id><snippet>vec.A</snippet></ROW><ROW><id>20062157</id><snippet>vec</snippet></ROW><ROW><id>20062157</id><snippet>row</snippet></ROW><ROW><id>20062157</id><snippet>mat</snippet></ROW><ROW><id>20062157</id><snippet>0's</snippet></ROW><ROW><id>20062157</id><snippet>vec</snippet></ROW><ROW><id>20062157</id><snippet>mat</snippet></ROW><ROW><id>20062157</id><snippet>vec</snippet></ROW><ROW><id>20062157</id><snippet>vec</snippet></ROW><ROW><id>20062157</id><snippet>mat-vec.A</snippet></ROW><ROW><id>20062361</id><snippet>set</snippet></ROW><ROW><id>20062361</id><snippet>list</snippet></ROW><ROW><id>20062361</id><snippet>tuple</snippet></ROW><ROW><id>20062361</id><snippet>data = [['2', '3', '1451', '40591', '258983', '11409589', '8337580729', '1932261797039146667'],
        ['2897', '514081', '585530047', '108785617538783538760452408483163'],
        ['2', '3', '5', '19', '28087', '4947999059', '2182718359336613102811898933144207'],
        ['3', '5', '53', '293', '31159', '201911', '7511070764480753', '22798192180727861167'],
        ['2', '164493637239099960712719840940483950285726027116731']]

seen = set() # set of seen values, which starts out empty

for lst in data:
    deduped = [x for x in lst if x not in seen] # filter out previously seen values
    seen.update(deduped)                        # add the new values to the set

    print(deduped)                              # do whatever with deduped list
</snippet></ROW><ROW><id>20062361</id><snippet>['2', '3', '1451', '40591', '258983', '11409589', '8337580729', '1932261797039146667']
['2897', '514081', '585530047', '108785617538783538760452408483163']
['5', '19', '28087', '4947999059', '2182718359336613102811898933144207']
['53', '293', '31159', '201911', '7511070764480753', '22798192180727861167']
['164493637239099960712719840940483950285726027116731']
</snippet></ROW><ROW><id>20062361</id><snippet>seen</snippet></ROW><ROW><id>20062361</id><snippet>add</snippet></ROW><ROW><id>20062361</id><snippet>seen = set()
for lst in data:
    lst_as_set = set(lst)               # this step eliminates internal duplicates
    deduped_set = lst_as_set - seen     # set subtraction!
    seen.update(deduped_set)

    # now do stuff with deduped_set, which is iterable, but in an arbitrary order
</snippet></ROW><ROW><id>20062361</id><snippet>unique_everseen</snippet></ROW><ROW><id>20062361</id><snippet>itertools</snippet></ROW><ROW><id>20062361</id><snippet>def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</snippet></ROW><ROW><id>20062576</id><snippet>for i in range(200):
    board.append(liner)
</snippet></ROW><ROW><id>20062576</id><snippet>board</snippet></ROW><ROW><id>20062576</id><snippet>linear</snippet></ROW><ROW><id>20062576</id><snippet>for i in range(200):
    board.append(liner[:])
</snippet></ROW><ROW><id>20062576</id><snippet>board = [["0"] * 200 for _ in range(200)]
</snippet></ROW><ROW><id>20062585</id><snippet>&lt;script type="text/javascript"&gt;
        var app = {};
        app.isOption = false;
        app.urls = {
            'spec':'/productguide/ProductSpec.shtml?details=&amp;specId=6747556',
            'data':'/productguide/ProductSpec.shtml?data=&amp;specId=6747556',
            'confirm':'/reports/dealreports/getSampleConfirm.do?hubId=4080&amp;productId=3418',
            'reports':'/productguide/ProductSpec.shtml?reports=&amp;specId=6747556',
            'expiry':'/productguide/ProductSpec.shtml?expiryDates=&amp;specId=6747556'
        };
        app.Router = Backbone.Router.extend({
            routes:{
                "spec":"spec",
                "data":"data",
                "confirm":"confirm",
                "reports":"reports",
                "expiry":"expiry"
            },
            initialize: function(){
                _.bindAll(this, "spec");
            },
            spec:function () {
                this.navigate("");
                this._loadPage('spec');
            },
            data:function () {
                this._loadPage('data');
            },
            confirm:function () {
                this._loadPage('confirm');
            },
            reports:function () {
                this._loadPage('reports');
            },
            expiry:function () {
                this._loadPage('expiry');
            },
            _loadPage:function (cssClass, cb) {
                $('#right').html('Loading..').load(this._makeUrlUnique(app.urls[cssClass]), cb);
                this._updateNav(cssClass);
            },
            _updateNav:function (cssClass) {
                // the left bar gets hidden on margin rates because the tables get smashed up too much
                // so ensure they're showing for the other links
                $('#left').show();
                $('#right').removeClass('wide');
                // update the subnav css so the arrow points to the right location
                $('#subnav ul li a.' + cssClass).siblings().removeClass('on').end().addClass('on');
            },
            _makeUrlUnique:function (urlString) {
                return urlString + '&amp;_=' + new Date().getTime();
            }
        });

        // init and start the app
        $(function () {
            window.router = new app.Router();
            Backbone.history.start();
        });
    &lt;/script&gt;
</snippet></ROW><ROW><id>20062596</id><snippet>re.search('Test(.*)print', testStr, re.DOTALL)
</snippet></ROW><ROW><id>20062596</id><snippet>re.search('Test((?:.|\n)*)print', testStr)
# (?:…) is a non-matching group to apply *
</snippet></ROW><ROW><id>20062596</id><snippet>&gt;&gt;&gt; testStr = "    Test to see\n\nThis one print\n "
&gt;&gt;&gt; m = re.search('Test(.*)print', testStr, re.DOTALL)
&gt;&gt;&gt; print m
&lt;_sre.SRE_Match object at 0x1706300&gt;
&gt;&gt;&gt; m.group(1)
' to see\n\nThis one '
</snippet></ROW><ROW><id>20062745</id><snippet>$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg
$ python run-app.py
 * Running on http://127.0.0.1:5000/
 * Restarting with reloader...
</snippet></ROW><ROW><id>20062750</id><snippet>error_bad_lines=False</snippet></ROW><ROW><id>20062750</id><snippet>warn_bad_lines = False</snippet></ROW><ROW><id>20062750</id><snippet>&gt;&gt;&gt; !cat unclean.csv
A,B,C,D,E,F,G,H
A,B,C,D,E,F,G,H
A,B,C,D,E,F,Foo,Bar,G,H
A,B,C,D,E,F,G,H
A,B,C,D,E,F,Foo,Bar,G,H
A,B,C,D,E,F,G,H
A,B,C,D,E,F,G,H
&gt;&gt;&gt; df = pd.read_csv("unclean.csv", error_bad_lines=False, header=None)
Skipping line 3: expected 8 fields, saw 10
Skipping line 5: expected 8 fields, saw 10

&gt;&gt;&gt; df
   0  1  2  3  4  5  6  7
0  A  B  C  D  E  F  G  H
1  A  B  C  D  E  F  G  H
2  A  B  C  D  E  F  G  H
3  A  B  C  D  E  F  G  H
4  A  B  C  D  E  F  G  H
</snippet></ROW><ROW><id>20062829</id><snippet>O(n log n)</snippet></ROW><ROW><id>20062829</id><snippet># In all of the following, the list of intervals must be sorted and 
# non-overlapping. We also assume that the intervals are half-open, so
# that x is in tp(start, end) iff start &lt;= x and x &lt; end.

def flatten(list_of_tps):
  """Convert a list of intervals to a list of endpoints"""
  return reduce(lambda ls, ival: ls + [ival.start, ival.end],
                list_of_tps,
                [])

def unflatten(list_of_endpoints):
  """Convert a list of endpoints, with an optional terminating sentinel,
     into a list of intervals"""
  return [tp(list_of_endpoints[i], list_of_endpoints[i + 1])
          for i in range(0, len(list_of_endpoints) - 1, 2)]

def merge(a_tps, b_tps, op):
  """Merge two lists of intervals according to the boolean function op"""
  a_endpoints = flatten(a_tps)
  b_endpoints = flatten(b_tps)

  sentinel = max(a_endpoints[-1], b_endpoints[-1]) + 1
  a_endpoints += [sentinel]
  b_endpoints += [sentinel]

  a_index = 0
  b_index = 0

  res = []

  scan = min(a_endpoints[0], b_endpoints[0])
  while scan &lt; sentinel:
    in_a = not ((scan &lt; a_endpoints[a_index]) ^ (a_index % 2))
    in_b = not ((scan &lt; b_endpoints[b_index]) ^ (b_index % 2))
    in_res = op(in_a, in_b)

    if in_res ^ (len(res) % 2): res += [scan]
    if scan == a_endpoints[a_index]: a_index += 1
    if scan == b_endpoints[b_index]: b_index += 1
    scan = min(a_endpoints[a_index], b_endpoints[b_index])

  return unflatten(res)

def interval_diff(a, b):
  return merge(a, b, lambda in_a, in_b: in_a and not in_b)

def interval_union(a, b):
  return merge(a, b, lambda in_a, in_b: in_a or in_b)

def interval_intersect(a, b):
  return merge(a, b, lambda in_a, in_b: in_a and in_b)
</snippet></ROW><ROW><id>20062936</id><snippet>crosstab</snippet></ROW><ROW><id>20062936</id><snippet>import numpy as np
import pandas as pd
df = pd.DataFrame(np.random.randint(0, 10, size=(100, 2)), columns=["type", "subtype"])
counts = pd.crosstab(df.type, df.subtype)

print counts.loc[0, [2, 3, 5, 6]].sum() + counts.loc[5, [3, 4, 7, 8]].sum()
</snippet></ROW><ROW><id>20062936</id><snippet>a = (((df.type == 0) &amp; ((df.subtype == 2) | (df.subtype == 3) | 
         (df.subtype == 5) | (df.subtype == 6))) | 
         ((df.type == 5) &amp; ((df.subtype == 3) | (df.subtype == 4) | (df.subtype == 7) | 
         (df.subtype ==  8))))
a.sum()
</snippet></ROW><ROW><id>20062972</id><snippet>def read_csv(file, columns, type_name="Row"):
  try:
    row_type = namedtuple(type_name, columns)
  except ValueError:
    row_type = tuple
  rows = iter(csv.reader(file))
  header = rows.next()
  mapping = [header.index(x) for x in columns]
  for row in rows:
    row = row_type(*[row[i] for i in mapping])
    yield row
</snippet></ROW><ROW><id>20062972</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; def read_csv(file, columns, type_name="Row"):
...   try:
...     row_type = namedtuple(type_name, columns)
...   except ValueError:
...     row_type = tuple
...   rows = iter(csv.reader(file))
...   header = rows.next()
...   mapping = [header.index(x) for x in columns]
...   for row in rows:
...     row = row_type(*[row[i] for i in mapping])
...     yield row
... 
&gt;&gt;&gt; testdata = """\
... AAA,bbb,ccc,DDD,eee,FFF,GGG,hhh
... 1,2,3,4,50,3,20,4
... 2,1,3,5,24,2,23,5
... 4,1,3,6,34,1,22,5
... 2,1,3,5,24,2,23,5
... 2,1,3,5,24,2,23,5
... """
&gt;&gt;&gt; testfile = StringIO(testdata)
&gt;&gt;&gt; for row in read_csv(testfile, "AAA GGG DDD".split()):
...   print row
... 
Row(AAA='1', GGG='20', DDD='4')
Row(AAA='2', GGG='23', DDD='5')
Row(AAA='4', GGG='22', DDD='6')
Row(AAA='2', GGG='23', DDD='5')
Row(AAA='2', GGG='23', DDD='5')
</snippet></ROW><ROW><id>20063264</id><snippet>try:
    cArray = numpy.array(c_img)
    mArray = numpy.array(m_img)
    yArray = numpy.array(y_img)
    kArray = numpy.array(k_img)
except Exception, e:
    print "ERROR: Converting to numpy array..."
    print str(e)
    exit(1)

try:
    toSub = 255
    cInvArray = toSub - cArray
    mInvArray = toSub - mArray
    yInvArray = toSub - yArray
    kInvArray = toSub - kArray

except Exception, e:
    print "ERROR: inverting !"
    print str(e)

try:
    cPlate = Image.fromarray(cInvArray)
    mPlate = Image.fromarray(mInvArray)
    yPlate = Image.fromarray(yInvArray)
    kPlate = Image.fromarray(kInvArray)

except Exception, e:
    print "ERROR: Creating image from numpy arrays"
    print str(e)
    exit(1)

try:
    mergedRaster = Image.merge('CMYK', (cPlate, mPlate, yPlate, kPlate))
</snippet></ROW><ROW><id>20063410</id><snippet> -&gt; list:
</snippet></ROW><ROW><id>20063410</id><snippet>my_meth</snippet></ROW><ROW><id>20063410</id><snippet>list</snippet></ROW><ROW><id>20063410</id><snippet>x: my_var
</snippet></ROW><ROW><id>20063410</id><snippet>:</snippet></ROW><ROW><id>20063410</id><snippet>x: An integer value
</snippet></ROW><ROW><id>20063599</id><snippet>str.__mod__()</snippet></ROW><ROW><id>20063599</id><snippet>print "proc %s matches." % (i,)
</snippet></ROW><ROW><id>20063749</id><snippet>cursor.execute('SELECT * FROM songs WHERE filename LIKE ?', ('{}%'.format(key_string),))
</snippet></ROW><ROW><id>20063815</id><snippet>def findit(word, lst):
    return [el[0] for el in lst if el[1] == word][0]
</snippet></ROW><ROW><id>20063816</id><snippet>from itertools import product
def randString(istr):
    l = [(c, c.upper()) if not c.isdigit() else (c,) for c in istr.lower()]
    return ["".join(item) for item in product(*l)]

print randString("aBC1")
print randString("A1b2c3")
</snippet></ROW><ROW><id>20063816</id><snippet>['abc1', 'abC1', 'aBc1', 'aBC1', 'Abc1', 'AbC1', 'ABc1', 'ABC1']
['a1b2c3', 'a1b2C3', 'a1B2c3', 'a1B2C3', 'A1b2c3', 'A1b2C3', 'A1B2c3', 'A1B2C3']
</snippet></ROW><ROW><id>20064095</id><snippet>-11</snippet></ROW><ROW><id>20064095</id><snippet>SIGSERV</snippet></ROW><ROW><id>20064095</id><snippet>#!/usr/bin/env python
from multiprocessing.dummy import Pool # uses threads
from subprocess import Popen, PIPE

def get_url(url):
    p = Popen(["executable", url], stdout=PIPE, stderr=PIPE, close_fds=True)
    output, error = p.communicate()
    return url, output, error, p.returncode

pool = Pool(20) # limit number of concurrent subprocesses
for url, output, error, returncode in pool.imap_unordered(get_url, urls):
    print("%s %r %r %d" % (url, output, error, returncode))
</snippet></ROW><ROW><id>20064095</id><snippet>$ executable url1 &amp; executable url2
</snippet></ROW><ROW><id>20064095</id><snippet>/* try to fail with SIGSERV sometimes */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int main(void) {
  char *null_pointer = NULL;

  srand((unsigned)time(NULL));

  if (rand() &lt; RAND_MAX/2) /* simulate some concurrent condition 
                              e.g., memory pressure */
    fprintf(stderr, "%c\n", *null_pointer); /* dereference null pointer */

  return 0;
}
</snippet></ROW><ROW><id>20064095</id><snippet>-11</snippet></ROW><ROW><id>20064095</id><snippet>gdb</snippet></ROW><ROW><id>20064111</id><snippet>urllib2</snippet></ROW><ROW><id>20064149</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'age':[99,99,99],'id':[1,2,3],'val':[0.3,0.5,0.1]})
&gt;&gt;&gt; df
   age  id  val
0   99   1  0.3
1   99   2  0.5
2   99   3  0.1
&gt;&gt;&gt; df2 = pd.DataFrame({'age':[99,99,99],'new_age':[25,50,75]})
&gt;&gt;&gt; df2 = pd.merge(df, df2, on='age')
&gt;&gt;&gt; del df2['age']
&gt;&gt;&gt; df2 = df2.rename(columns={'new_age':'age'})
&gt;&gt;&gt; df2
   id  val      age
0   1  0.3       25
1   1  0.3       50
2   1  0.3       75
3   2  0.5       25
4   2  0.5       50
5   2  0.5       75
6   3  0.1       25
7   3  0.1       50
8   3  0.1       75
</snippet></ROW><ROW><id>20064224</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.read_csv(r'C:\Users\user\Documents\file.csv')
</snippet></ROW><ROW><id>20064224</id><snippet>&gt;&gt;&gt; df['new_val'] = df.apply(lambda row: sum(row[lf[i]]*co[i] for i in range(len(lf)))+5, axis=1)
&gt;&gt;&gt; df
    x   y  new_val
0   2   4    46.36
1   3   5    57.74
2  61  17   289.98
3  12  56   550.76
4   9  23   237.62
</snippet></ROW><ROW><id>20064234</id><snippet>def my_ajax_view(request):
    if request.is_ajax():
        if request.method == 'POST':
            //do you logic here
            response_data = {'success': 'weee'}
            return HttpResponse(json.dumps(response_data), content_type="application/json")
        else:
            return HttpResponseForbidden()
    return HttpResponseForbidden() 
</snippet></ROW><ROW><id>20064234</id><snippet>mc, mmo, ans, ci</snippet></ROW><ROW><id>20064234</id><snippet>func</snippet></ROW><ROW><id>20064234</id><snippet>getlist()</snippet></ROW><ROW><id>20064234</id><snippet>POST</snippet></ROW><ROW><id>20064234</id><snippet>mbleno</snippet></ROW><ROW><id>20064234</id><snippet>mno=request.POST.getlist('mbleno')
</snippet></ROW><ROW><id>20064234</id><snippet>mno=request.POST.get('mbleno')
</snippet></ROW><ROW><id>20064343</id><snippet>#! usr/bin/python
# -*- coding: utf-8 -*-
import csv, sys, os
from lxml import etree

def main():
    csvFile = 'test.csv'
    xmlFile = open('myData.xml', 'w')
    csvData = csv.reader(open(csvFile), delimiter='\t')

    header = csvData.next()
    counter = 0
    root = etree.Element('root')

    for row in csvData:
        prod = etree.SubElement(root,'prod')
        for index in range(0, len(header)):
            child = etree.SubElement(prod, header[index])
            child.text = row[index].decode('utf-8')
            prod.append(child

    result = etree.tostring(root, pretty_print=True)
    xmlFile.write(result)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20064624</id><snippet>import urllib2

completed_courses_url = 'http://ranger.uta.edu/~kamangar/CSE-1310-FA13/LinkedDocuments/sample_completed_courses.txt'
required_courses_url = 'http://ranger.uta.edu/~kamangar/CSE-1310-FA13/LinkedDocuments/required_courses.csv'

completed_courses_set = set([x.strip() for x in urllib2.urlopen(completed_courses_url)])
for required_course in urllib2.urlopen(required_courses_url):
    if required_course[0] != '#':
        (course,category,prerequisites,notes) = required_course.split(',')
        if set(prerequisites.split('|')).intersection(completed_courses_set):
             print required_course
</snippet></ROW><ROW><id>20064704</id><snippet>x[:]</snippet></ROW><ROW><id>20064704</id><snippet>x[:][0]</snippet></ROW><ROW><id>20064704</id><snippet>x[0]</snippet></ROW><ROW><id>20064736</id><snippet>win32api.GetFileVersionInfo</snippet></ROW><ROW><id>20064736</id><snippet>&gt;&gt;&gt; import win32api
&gt;&gt;&gt; path = r'c:\python27\lib\site-packages\win32\win32api.pyd'
&gt;&gt;&gt; info = win32api.GetFileVersionInfo(path, '\\')
&gt;&gt;&gt; '{}.{}.{}.{}'.format(
...     win32api.HIWORD(info['FileVersionMS']),
...     win32api.LOWORD(info['FileVersionMS']),
...     win32api.HIWORD(info['FileVersionLS']),
...     win32api.LOWORD(info['FileVersionLS']))
'2.7.218.0'
</snippet></ROW><ROW><id>20065083</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; import json
&gt;&gt;&gt; url = "http://hypem.com/playlist/tags/dance/json/1/data.js"
&gt;&gt;&gt; output = json.load(urllib.urlopen(url))
&gt;&gt;&gt; for x in output.values():
...     print(type(x))
... 
&lt;type 'dict'&gt;
&lt;type 'dict'&gt;
&lt;type 'dict'&gt;
&lt;type 'dict'&gt;
&lt;type 'dict'&gt;
&lt;type 'unicode'&gt;
&lt;type 'dict'&gt;
....

&gt;&gt;&gt; u'1.1'['loved_count']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: string indices must be integers
</snippet></ROW><ROW><id>20065083</id><snippet>&gt;&gt;&gt; items = [x for x in output.values() if isinstance(x, dict)]
&gt;&gt;&gt; items.sort(key=itemgetter('loved_count'))
# No error.
</snippet></ROW><ROW><id>20065083</id><snippet>sort</snippet></ROW><ROW><id>20065083</id><snippet>sort</snippet></ROW><ROW><id>20065083</id><snippet>None</snippet></ROW><ROW><id>20065083</id><snippet>sort</snippet></ROW><ROW><id>20066230</id><snippet>struct</snippet></ROW><ROW><id>20066230</id><snippet>struct foo {
    int  bar;
    char t;
    char x;
}
</snippet></ROW><ROW><id>20066230</id><snippet>struct.pack('IBB', bar, t, x)
</snippet></ROW><ROW><id>20066280</id><snippet>get</snippet></ROW><ROW><id>20066280</id><snippet>&lt;form method="get"&gt;</snippet></ROW><ROW><id>20066280</id><snippet>class HelloTemplate(TemplateView):
    template_name = "index.html"

    def get_context_data(self, **kwargs):
        context = super(HelloTemplate, self).get_context_data(**kwargs)
        return context

    def get(self, request, *args, **kwargs):
        q = request.GET.get('q')
        error = ''
        if not q:
            error = "error message"
        return render(request, self.template_name, {'error': error})
</snippet></ROW><ROW><id>20066387</id><snippet>class Planet(object):
    def __init__(self, *args, **kwargs):
        self.name = args[0]
        self.distance = args[1]
        # ... etc ...
</snippet></ROW><ROW><id>20066387</id><snippet>class Planet(object):
    def __init__(self, name, distance, ...):
        self.name = name
        self.distance = distance
        # ... etc ...
</snippet></ROW><ROW><id>20066387</id><snippet>p = Planet(*['Planet Name', 16, 19, 27, 11])
</snippet></ROW><ROW><id>20066387</id><snippet>l = [['Planet Name', 16, 19, 27, 11], ['Planet Name 2', 12, 22, 11, 42], ....]
planets = [Planet(*data) for data in l]
</snippet></ROW><ROW><id>20066395</id><snippet>ter</snippet></ROW><ROW><id>20066395</id><snippet>ter.func1()</snippet></ROW><ROW><id>20066395</id><snippet>@staticmethod</snippet></ROW><ROW><id>20066395</id><snippet>@classmethod</snippet></ROW><ROW><id>20066395</id><snippet>ter</snippet></ROW><ROW><id>20066395</id><snippet>class Person:
    def __init__(self, name):    # Constructor
        self.name = name

    def sayHello(self):          # Class method (requires `self` parameter)
        print 'Hello, {0}'.format(self.name)

def main():
    p = Person('Joe')            # Instantiate `Person` class (calls constructor)
    p.sayHello()                 # Call an "instance method" on Person object
</snippet></ROW><ROW><id>20066395</id><snippet>class Person:
    def __init__(self, name):    # Constructor
        self.name = name

    def sayHello(self):          # Class method (requires `self` parameter)
        print 'Hello, {0}'.format(self.name)

    @staticmethod
    def makePerson(name):        # Static Method (note, no `self` parameter)
        p = Person(name)
        return p

    @classmethod
    def makePerson2(cls, name):  # Class method. First parameter is class
        p = cls(name)            #    Call constructor for that class
        return p

def main():
    p2 = Person.makePerson('Joe')  # Call static "factory" method
    p2.sayHello()     
</snippet></ROW><ROW><id>20066395</id><snippet>pass</snippet></ROW><ROW><id>20066395</id><snippet>def foo():
    pass        # This function does nothing
</snippet></ROW><ROW><id>20066444</id><snippet>def authenticate(**credentials):
"""
If the given credentials are valid, return a User object.
"""
for backend in get_backends():
    try:
        user = backend.authenticate(**credentials)
    except TypeError:
        # This backend doesn't accept these credentials as arguments. Try the next one.
        continue
    if user is None:
        continue
    # Annotate the user object with the path of the backend.
    user.backend = "%s.%s" % (backend.__module__, backend.__class__.__name__)
    return user
</snippet></ROW><ROW><id>20066603</id><snippet>\</snippet></ROW><ROW><id>20066603</id><snippet>self.class_logg(('http://example.com/api/?'
                 'option=ajax&amp;nologin=1&amp;a=vmware_migrate_2&amp;'
                 'original_server_ip=%s&amp;target_server_ip=%s&amp;'
                 'vmware_name=%s' % (self.ip, dest_node.ip, machine.name)))
</snippet></ROW><ROW><id>20066603</id><snippet>fields = {'option': 'ajax',
          'nologin': '1',
          'a': 'vmware_migrate_2',
          'original_server_ip': self.ip,
          'target_server_ip': dest_node.ip,
          'vmware_name': machine.name}

params = '&amp;'.join(['{}={}'.format(k, v) for k, v in fields.items()])
self.class_logg('http://example.com/api/?{}'.format(params))
</snippet></ROW><ROW><id>20066746</id><snippet>u</snippet></ROW><ROW><id>20066746</id><snippet>&gt;&gt;&gt; chars = u"¿?!"
&gt;&gt;&gt; print chars[0]
¿
</snippet></ROW><ROW><id>20066791</id><snippet>sudo</snippet></ROW><ROW><id>20066791</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>20066791</id><snippet>%groupName ALL= NOPASSWD: /sbin/shutdown
</snippet></ROW><ROW><id>20066884</id><snippet>&gt;&gt;&gt; [(char, [i for i,c in enumerate(a) if c==char]) for char in b]
[('a', [0, 2, 5]), ('b', [1, 4]), ('c', [3]), ('d', [6])]
</snippet></ROW><ROW><id>20066884</id><snippet>&gt;&gt;&gt; dict((char, [i for i,c in enumerate(a) if c==char]) for char in b)
{'a': [0, 2, 5], 'c': [3], 'b': [1, 4], 'd': [6]}
</snippet></ROW><ROW><id>20066911</id><snippet>&lt;table&gt;</snippet></ROW><ROW><id>20066911</id><snippet>class</snippet></ROW><ROW><id>20066911</id><snippet>tableborder</snippet></ROW><ROW><id>20066911</id><snippet>css</snippet></ROW><ROW><id>20066911</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>20066911</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>20066911</id><snippet>python3</snippet></ROW><ROW><id>20066911</id><snippet>from bs4 import BeautifulSoup
import urllib.request as urllib2

wiki = "http://www.maditssia.com/members/list.php?p=1&amp;id=Engineering%20Industries"
header = {'User-Agent': 'Mozilla/5.0'}
req = urllib2.Request(wiki,headers=header)
page = urllib2.urlopen(req)
soup = BeautifulSoup(page)

for table in soup.find_all('table', attrs={'class': 'tableborder'}):
    data = []
    data.append(table.select('tr:nth-of-type(1) &gt; td:nth-of-type(2)')[0].string or '') 
    data.append(table.select('tr:nth-of-type(1) &gt; td:nth-of-type(4)')[0].string or '') 
    data.append(table.select('tr:nth-of-type(2) &gt; td:nth-of-type(2)')[0].string or '') 
    data.append(table.select('tr:nth-of-type(2) &gt; td:nth-of-type(6)')[0].string or '') 
    data.append(table.select('tr:nth-of-type(3) &gt; td:nth-of-type(6)')[0].string or '') 
    data.append(table.select('tr:nth-of-type(4) &gt; td:nth-of-type(2)')[0].string or '') 
    print(' | '.join(data))
</snippet></ROW><ROW><id>20066911</id><snippet>python3 script.py
</snippet></ROW><ROW><id>20066911</id><snippet>Aali Industries | A.Yobu | 1, Ayyanar Koil 4th Street Sellur Madurai - 625 002 | 2530132,9345204255,9345204256 | aaliyobu@yahoo.com | 
Accurate Engineers, | S.BALASUNDAR | Kadir Complex,4/153-1,Thilagar St. Melamadai Main Road, Thasildhar Nagar | 2520049,RE:2534603,98652-40049 | accurate_engineers@yahoo.co.in | 
Akber Ali Industries | S. Abuthalif | 73/15/1, East Anna Thoppu Street Madurai - 625 001  | 2343526,2341100 |  | 
Alagu Wire Products | Rm.Meiyappan | 193/4-A, Trichy Road Pudukottai - 2  | 236624,98424-44624,98428-44624 |  | 
Allwin Fasetners | S.Joseph Vasudevan | XXXXX6,Parasakthi Nagar XXXXXXXXAvaniapuram XXXXXXXMadurai - 625 012. | 2670577 |  | 
Allwinraj Metals Centre, | P.SELVARAJ NADAR | 180 and 181 East Veli Street, Madurai - 625 001.  | 2622181, RES:2626914 |  | 
Amirtham Engineering Works | G.Amirtharaj | 7A,Govindan Chetty Street, Simmakkal, Madurai - 625 001. | 2622417 |  | 
Amudha Wire Products, | A.M.P. Shanmugavel | Swahath Residency C-1, 3rd Floor, 708-A, 17th East Street, Anna Nagar | 6534939,99449-55199 |  | 
Ananthasiva Engg.Works, | P.KALUVAN | 19-B New Ramnad Road, Madurai - 625 009.  | 2337434,RES:2532598,2311910 | 98421-22200 | 
Angalamman Industries, | Palanivel | 40/C, Chinnandan Koil Road, Near Angalamman Koil, Karur - 639 001. | NIL |  |
</snippet></ROW><ROW><id>20067216</id><snippet>if self.ammo and player_rect.colliderect(self.ammo.rect):
        self.ammo_amount += 50
        self.all_sprites_list.remove(self.ammo)
        self.ammo = None
</snippet></ROW><ROW><id>20067391</id><snippet>askinteger</snippet></ROW><ROW><id>20067391</id><snippet>a</snippet></ROW><ROW><id>20067391</id><snippet>create_grid</snippet></ROW><ROW><id>20067391</id><snippet>def press_newgame(self):
    a = tkinter.simpledialog.askinteger('Inputz', 'Enter the gameboard size')
    self.create_grid(a)
</snippet></ROW><ROW><id>20067665</id><snippet>&gt;&gt;&gt; df.groupby('id').first()
     value
id        
1    first
2    first
3    first
4   second
5    first
6    first
7   fourth
</snippet></ROW><ROW><id>20067665</id><snippet>id</snippet></ROW><ROW><id>20067665</id><snippet>&gt;&gt;&gt; df.groupby('id').first().reset_index()
   id   value
0   1   first
1   2   first
2   3   first
3   4  second
4   5   first
5   6   first
6   7  fourth
</snippet></ROW><ROW><id>20067665</id><snippet>&gt;&gt;&gt; df.groupby('id').head(2).reset_index(drop=True)
    id   value
0    1   first
1    1  second
2    2   first
3    2  second
4    3   first
5    3   third
6    4  second
7    4   fifth
8    5   first
9    6   first
10   6  second
11   7  fourth
12   7   fifth
</snippet></ROW><ROW><id>20067797</id><snippet>dict1= {0:'One', 1:'Two', 2:'Three'}
print {value:{} for key,value in dict1.items()}
</snippet></ROW><ROW><id>20067797</id><snippet>{'Three': {}, 'Two': {}, 'One': {}}
</snippet></ROW><ROW><id>20067797</id><snippet>One</snippet></ROW><ROW><id>20067797</id><snippet>Two</snippet></ROW><ROW><id>20067797</id><snippet>Three</snippet></ROW><ROW><id>20067797</id><snippet>d = {value:{} for key,value in dict1.items()}
d['Three']['a'] = 1
</snippet></ROW><ROW><id>20067833</id><snippet>all</snippet></ROW><ROW><id>20067833</id><snippet>if all(func(arg, my_dict[k]) for k in my_dict):
  ...
</snippet></ROW><ROW><id>20067833</id><snippet>dict</snippet></ROW><ROW><id>20068176</id><snippet>L = [{'x':11}, {'y':2}, {'z':3}]

def addItem(L, key, value):
    for index, element in enumerate(L):
        if key in element:
            L.remove(element)
            L.insert(index, {key, element[key] + value})        
    return L

L[:] = addItem(L, 'x', 4)
print(L)
</snippet></ROW><ROW><id>20068327</id><snippet>any</snippet></ROW><ROW><id>20068327</id><snippet>query = session.query(Post).filter(~Post.tags.any(Tag.name.in_(['dont', 'want', 'these'])))
</snippet></ROW><ROW><id>20068336</id><snippet>def adder(n):
    def add_func(x):
        return x + n
    return add_func

add3 = adder(3)
print map(add3, [1,2,3])  # [4, 5, 6]
</snippet></ROW><ROW><id>20068336</id><snippet>adder</snippet></ROW><ROW><id>20068336</id><snippet>def adder(n):
    return lambda x: x + n
</snippet></ROW><ROW><id>20068336</id><snippet>wrapped = ["&lt;p&gt;{}&lt;/p&gt;".format(name) for name in names]
</snippet></ROW><ROW><id>20068563</id><snippet>K-Means</snippet></ROW><ROW><id>20068563</id><snippet>scikit-learn</snippet></ROW><ROW><id>20068563</id><snippet>from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=2) # numbers will be clustered into 2 clusters based on euclidean distance
numbers = [123,234,345,456,124,568,10000,15000,564]
X = [[x] for x in numbers]
kmeans.fit(X)
zip(numbers, kmeans.predict(X))
</snippet></ROW><ROW><id>20068563</id><snippet>[(123, 1),
 (234, 1),
 (345, 1),
 (456, 1),
 (124, 1),
 (568, 1),
 (10000, 0),
 (15000, 0),
 (564, 1)]
</snippet></ROW><ROW><id>20068563</id><snippet>[(10000, 0),
 (12345, 0),
 (11000, 0),
 (10, 1),
 (5000, 1),
 (10500, 0),
 (13000, 0)]
</snippet></ROW><ROW><id>20068579</id><snippet>data = {'NOMSEXITInterview__INTTYPE_2': u'2',
 'NOMSEXITInterview__INTDUR_2': u'3',
 'NOMSEXITInterview__GENDER_2': u'3', 
 'NOMSEXITInterview__EMPLOY_2': u'6',
 'Referral__referral_type': u'food', 
 'Referral__ok_to_mail': u'False', 
 'Referral__okay_to_call': u'False',
 'Referral__okay_to_leave_message': u'True',
 'data_model_name': ['NOMSEXITInterview', 'Referral']}

result = {}
for k, v in data.items():
    parts = k.split("__")
    if len(parts) == 2:
        result.setdefault(parts[0], {})[parts[1]] = v
    else:
        result[k] = v
print result
</snippet></ROW><ROW><id>20068579</id><snippet>{'Referral': {'referral_type': u'food', 'ok_to_mail': u'False', 'okay_to_call': u'False', 'okay_to_leave_message': u'True'},
 'data_model_name': ['NOMSEXITInterview', 'Referral'],
 'NOMSEXITInterview': {'INTTYPE_2': u'2', 'INTDUR_2': u'3', 'GENDER_2': u'3', 'EMPLOY_2': u'6'}}
</snippet></ROW><ROW><id>20068814</id><snippet>+</snippet></ROW><ROW><id>20069379</id><snippet>df.groupby('id').head(2)</snippet></ROW><ROW><id>20069379</id><snippet>&gt;&gt;&gt; df.groupby('id').head(2)
       id  value
id             
1  0   1      1
   1   1      2 
2  3   2      1
   4   2      2
3  7   3      1
4  8   4      1
</snippet></ROW><ROW><id>20069379</id><snippet>df.groupby('id').head(2).reset_index(drop=True)</snippet></ROW><ROW><id>20069379</id><snippet>&gt;&gt;&gt; df.groupby('id').head(2).reset_index(drop=True)
    id  value
0   1      1
1   1      2
2   2      1
3   2      2
4   3      1
5   4      1
</snippet></ROW><ROW><id>20069576</id><snippet>from smslogger import YourModel

class newChartView(TemplateView):
    template_name = "new_report_view.html"

    def get_context_data(self, **kwargs):
        context = super(newChartView, self).get_context_data(**kwargs)
        context['count'] = YourModel.objects.all()
        return context
</snippet></ROW><ROW><id>20069821</id><snippet>@app.route('/admin')
@admin_permission.require(http_exception=403)
def admin(request):
    # ...
</snippet></ROW><ROW><id>20069821</id><snippet>flask.abort()</snippet></ROW><ROW><id>20069821</id><snippet>PermissionDenied</snippet></ROW><ROW><id>20069821</id><snippet>@app.errorhandler(403)
def page_not_found(e):
    session['redirected_from'] = request.url
    return redirect(url_for('users.login'))
</snippet></ROW><ROW><id>20069821</id><snippet>url_for('users.login')</snippet></ROW><ROW><id>20069954</id><snippet>x[:, 3, 1, :].shape =&gt; (4, 256)
</snippet></ROW><ROW><id>20069954</id><snippet>numpy</snippet></ROW><ROW><id>20069954</id><snippet>x[:][3][1][:]</snippet></ROW><ROW><id>20069954</id><snippet>x1 = x[:]  # get the whole array
x2 = x1[3] # get the fourth element along the first dimension
x2.shape =&gt; (128, 256, 256)
x3 = x2[1] # get the second element along the first dimension of `x2`
x3.shape =&gt; (256, 256)
x3[:]   # get all `x3`
</snippet></ROW><ROW><id>20069954</id><snippet>x[:][4][1][1]
</snippet></ROW><ROW><id>20069954</id><snippet>index out of bounds</snippet></ROW><ROW><id>20069954</id><snippet>x[:]</snippet></ROW><ROW><id>20069954</id><snippet>x[:][4]</snippet></ROW><ROW><id>20070161</id><snippet>source /opt/python/run/venv/bin/activate</snippet></ROW><ROW><id>20070161</id><snippet>source /opt/python/current/env</snippet></ROW><ROW><id>20070161</id><snippet>manage.py &lt;commands&gt;</snippet></ROW><ROW><id>20070428</id><snippet>d['A'] = {}
d['A']['X'] = 'V1'
</snippet></ROW><ROW><id>20070428</id><snippet>d[('A', 'X')] = 'V1'
</snippet></ROW><ROW><id>20070428</id><snippet>versions_for_model = d['A'].keys()
</snippet></ROW><ROW><id>20070428</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>20070428</id><snippet>d = defaultdict(dict)
d['A']['X'] = 'V1'
</snippet></ROW><ROW><id>20070428</id><snippet>d['A']</snippet></ROW><ROW><id>20070541</id><snippet>for summed in sumNest(a, b):
    print summed
</snippet></ROW><ROW><id>20070541</id><snippet>next()</snippet></ROW><ROW><id>20070541</id><snippet>yield</snippet></ROW><ROW><id>20070541</id><snippet>yield item</snippet></ROW><ROW><id>20070541</id><snippet>&gt;&gt;&gt; a = ([1, 2], [2, 3])
&gt;&gt;&gt; b = ([3, 4], [5, 6])
&gt;&gt;&gt; def summedProduct(iter1, iter2):
...     for i in iter(iter1):
...         for j in iter(iter2):
...             yield i + j
... 
&gt;&gt;&gt; for summed in summedProduct(a, b):
...     print summed
... 
[1, 2, 3, 4]
[1, 2, 5, 6]
[2, 3, 3, 4]
[2, 3, 5, 6]
</snippet></ROW><ROW><id>20070541</id><snippet>zip()</snippet></ROW><ROW><id>20070541</id><snippet>def summedNested(nested1, nested2):
    flattened1 = (v for nested in nested1 for v in nested)
    flattened2 = (v for nested in nested2 for v in nested)
    for i, j in zip(flattened1, flattened2):
        yield i + j
</snippet></ROW><ROW><id>20070541</id><snippet>&gt;&gt;&gt; def summedNested(nested1, nested2):
...     flattened1 = (v for nested in nested1 for v in nested)
...     flattened2 = (v for nested in nested2 for v in nested)
...     for i, j in zip(flattened1, flattened2):
...         yield i + j
... 
&gt;&gt;&gt; for summed in summedNested(a, b):
...     print summed
... 
4
6
7
9
</snippet></ROW><ROW><id>20070583</id><snippet># my dummy channels:
r = np.ones((100,100),np.uint8)  * 100
g = np.ones((100,100),np.uint8)  * 70
b = np.ones((100,100),np.uint8)  * 10

#now, just merge them:
rgb = cv2.merge((r,g,b))
</snippet></ROW><ROW><id>20070940</id><snippet>smtp</snippet></ROW><ROW><id>20070940</id><snippet>smtp</snippet></ROW><ROW><id>20070940</id><snippet>11k * 50ms = 550s</snippet></ROW><ROW><id>20070940</id><snippet>csv</snippet></ROW><ROW><id>20070940</id><snippet>csv</snippet></ROW><ROW><id>20071143</id><snippet>file.write()</snippet></ROW><ROW><id>20071143</id><snippet>print()</snippet></ROW><ROW><id>20071143</id><snippet>target.write()</snippet></ROW><ROW><id>20071143</id><snippet>target.write("%s\n%s\n%s\n" % (line1, line2, line3))
</snippet></ROW><ROW><id>20071143</id><snippet>print()</snippet></ROW><ROW><id>20071143</id><snippet>print(line1, line2, line3, sep='\n', file=target)
</snippet></ROW><ROW><id>20071143</id><snippet>print()</snippet></ROW><ROW><id>20071143</id><snippet>print</snippet></ROW><ROW><id>20071143</id><snippet>print()</snippet></ROW><ROW><id>20071143</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>20071712</id><snippet>qs_new = Model_Name.objects.all().values(*col_name)
</snippet></ROW><ROW><id>20071712</id><snippet>values('a', 'b', 'c')</snippet></ROW><ROW><id>20071712</id><snippet>values(('a', 'b', 'c'))</snippet></ROW><ROW><id>20071712</id><snippet>split()</snippet></ROW><ROW><id>20071880</id><snippet>data: [
{% for item in count %}
    { y: '{{ item.date|date:"Y" }}', a: '{{ item.count }}' }{% if not forloop.last %},{% endif %}
{% endfor %}
  ],
</snippet></ROW><ROW><id>20071880</id><snippet>y</snippet></ROW><ROW><id>20071880</id><snippet>a</snippet></ROW><ROW><id>20071962</id><snippet>range(2)</snippet></ROW><ROW><id>20071962</id><snippet>[0, 1]</snippet></ROW><ROW><id>20071962</id><snippet>&gt;&gt;&gt; range(2)
[0, 1]
</snippet></ROW><ROW><id>20071962</id><snippet>supblot(1,2,i)</snippet></ROW><ROW><id>20071962</id><snippet>i</snippet></ROW><ROW><id>20071962</id><snippet>1</snippet></ROW><ROW><id>20071962</id><snippet>2</snippet></ROW><ROW><id>20071962</id><snippet>subplot(1,2,i+1)</snippet></ROW><ROW><id>20072009</id><snippet>import itertools as it

SEQUENCES = ['AGG', 'AGT', 'CCG', 'CGT', 'GAG', 'GGA', 'GGT', 'GTA', 'GTG', 'TAG', 'TGG']
LONGEST_SUPERSTRING = ''.join(SEQUENCES)

def find_shortest_superstring():
    current_shortest = LONGEST_SUPERSTRING
    trim = len(current_shortest)-1
    seen_prefixes = set()
    for perm in it.permutations(SEQUENCES):
        candidate_string = ''.join(perm)[:trim]
        if candidate_string in seen_prefixes:
            continue
        seen_prefixes.add(candidate_string)
        while is_superstring(candidate_string):
            current_shortest = candidate_string
            candidate_string = candidate_string[:-1]
            trim = len(current_shortest)-1
    return current_shortest

def is_superstring(s):
    return all(seq in s for seq in SEQUENCES)

def main():
    print 'Searching for shortest superstring containing all strings.'
    ss = find_shortest_superstring()
    print 'Found shortest superstring containing all strings:\n{}'.format(ss)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20072009</id><snippet>Searching for shortest superstring containing all strings.
Found shortest superstring containing all strings:
CCGTAGGTGGAGT
</snippet></ROW><ROW><id>20072045</id><snippet>xp = '//*[contains(@id, "_p_ctl17_ctl04_ctl01_ctl00_dlProps")]/tr[1]/td[1]/text()'
item["Details_H1"] = hxs.select(xp).extract()
</snippet></ROW><ROW><id>20072045</id><snippet>//table</snippet></ROW><ROW><id>20072045</id><snippet>//tbody</snippet></ROW><ROW><id>20072086</id><snippet>and</snippet></ROW><ROW><id>20072086</id><snippet>&amp;</snippet></ROW><ROW><id>20072086</id><snippet> print A[(B &gt; 5) &amp; (B &lt; 13)] 
</snippet></ROW><ROW><id>20072104</id><snippet>data = { 
"Technology": {"20809": 98},
"Movie":{"1193435": 1},
"Entertainment":{"13398": 76},
"Computer": {"28765": 54},
"Food": {"708": 4},
"Gasoline": {"358": 18},
"Material": {"98": 6},
"Water": {"3": 6}
}

def searchAtHashTable(input):
    return {input : data.get(input, {})}

print searchAtHashTable("Entertainment")
</snippet></ROW><ROW><id>20072104</id><snippet>{'Entertainment': {'13398': 76}}
</snippet></ROW><ROW><id>20072440</id><snippet>f.write(chunk)</snippet></ROW><ROW><id>20072440</id><snippet>def image_download(self, links):
    for each in links:
        url = each
        name = each.split('/')[-1]
        r = requests.get(url, stream=True)
        with open(name, 'wb') as f:
            for chunk in r.iter_content(1024):
                if not chunk:
                    break

                f.write(chunk) #This has been indented to be in the for loop.
</snippet></ROW><ROW><id>20072529</id><snippet>for i in x:
    f[i] = x[i] + 1
</snippet></ROW><ROW><id>20072529</id><snippet>i</snippet></ROW><ROW><id>20072529</id><snippet>x[i]</snippet></ROW><ROW><id>20072529</id><snippet>i</snippet></ROW><ROW><id>20072529</id><snippet>x</snippet></ROW><ROW><id>20072529</id><snippet>IndexError</snippet></ROW><ROW><id>20072529</id><snippet>for i in range(len(x)):
    f[i] = x[i] + 1
</snippet></ROW><ROW><id>20072529</id><snippet>for i, v in enumerate(x):
    f[i] = v + 1
</snippet></ROW><ROW><id>20072578</id><snippet>list comprehension</snippet></ROW><ROW><id>20072578</id><snippet>&gt;&gt;&gt; lis1 = [{"name":"jon", "age":10}, {"name":"mary", "age":12}]
&gt;&gt;&gt; lis2 = [{"city":"nyc"}, {"city":"la"}]
&gt;&gt;&gt; [dict(x, **y) for x, y in zip(lis1, lis2)]
[{'city': 'nyc', 'age': 10, 'name': 'jon'}, {'city': 'la', 'age': 12, 'name': 'mary'}]
</snippet></ROW><ROW><id>20072578</id><snippet>dict(x, **y)</snippet></ROW><ROW><id>20072578</id><snippet>&gt;&gt;&gt; [dict(x.items() + y.items()) for x, y in zip(lis1, lis2)]
[{'city': 'nyc', 'age': 10, 'name': 'jon'}, {'city': 'la', 'age': 12, 'name': 'mary'}]
</snippet></ROW><ROW><id>20072603</id><snippet>np.argwhere</snippet></ROW><ROW><id>20072603</id><snippet>v = np.array([[ 0.     ,     5.37060126,  2.68530063 , 4.65107712 , 2.5 ],
              [ 5.37060126 ,  4.65107712 , 2.68530063 ,.11190697,1 ]])


np.argwhere((v &gt; 2.3) &amp; (v &lt; 2.7))

array([[0, 2],
        [0, 4],
         [1, 2]])
</snippet></ROW><ROW><id>20072667</id><snippet>&amp;</snippet></ROW><ROW><id>20072667</id><snippet>/bin/sleep</snippet></ROW><ROW><id>20072667</id><snippet>os.system</snippet></ROW><ROW><id>20072667</id><snippet>os.system('sleep 1 &amp;&amp; echo foo &amp;&amp; sleep 5 &amp;&amp; echo bar')</snippet></ROW><ROW><id>20072667</id><snippet>&amp;</snippet></ROW><ROW><id>20072667</id><snippet>os.system('sleep 1 &amp;&amp; echo foo &amp;&amp; sleep 5 &amp;&amp; echo bar &amp;')</snippet></ROW><ROW><id>20072713</id><snippet>self.load_spites(0,200,random.randint(rand1,rand2))
</snippet></ROW><ROW><id>20072713</id><snippet>image = pygame.image.load(image)
</snippet></ROW><ROW><id>20072713</id><snippet>self.load_spites("sprite.png",200,random.randint(rand1,rand2))

def load_sprites(self, image_file, x,y):
   image = pygame.image.load(image_file)
</snippet></ROW><ROW><id>20072867</id><snippet>filter()</snippet></ROW><ROW><id>20072867</id><snippet>WHERE</snippet></ROW><ROW><id>20072867</id><snippet>qs_new = model_obj.objects.filter(...)
</snippet></ROW><ROW><id>20072919</id><snippet>l = [('apple', ['gala','fuji', 'macintosh']),
('pear', ['seckel','anjou','bosc'])]

l2 = [(k, sorted(v)) for k, v in l]
# [('apple', ['fuji', 'gala', 'macintosh']), ('pear', ['anjou', 'bosc', 'seckel'])]
</snippet></ROW><ROW><id>20072987</id><snippet>dic1 = {'A': 25, 'B': 41, 'C': 32}
dic2 = {'A': 21, 'B': 12, 'C': 62}
result = {}
for key in (dic1.viewkeys() | dic2.keys()):
    if key in dic1: result.setdefault(key, []).append(dic1[key])
    if key in dic2: result.setdefault(key, []).append(dic2[key])

print result
</snippet></ROW><ROW><id>20072987</id><snippet>{'A': [25, 21], 'C': [32, 62], 'B': [41, 12]}
</snippet></ROW><ROW><id>20072987</id><snippet>for key in (dic1.keys() | dic2.keys()):
</snippet></ROW><ROW><id>20073062</id><snippet>&gt;&gt;&gt; L = range(55)
&gt;&gt;&gt; for i in range(6):
...     print (L[10*i:10*(i+1)] + [0]*10)[:10]
...
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
[30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
[50, 51, 52, 53, 54, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>20073190</id><snippet>for i in range(0, img_layers):
  img.seek(i)
  a = numpy.array(img.getdata(), dtype=dtype)
  a.resize(sx, sy, channels)
  z = i % sz
  frame = i // sz
  dset[..., z, frame] = a # Majority of time in this call
</snippet></ROW><ROW><id>20073190</id><snippet>for i in range(0, img_layers):
  img.seek(i)
  a = numpy.array(img.getdata(), dtype=dtype) # Majority of time in this call
  a.resize(sx, sy, channels)
  z = i % sz
  frame = i // sz
  dset[frame, z, ...] = a
</snippet></ROW><ROW><id>20073220</id><snippet>ftp.retrbinary("RETR {0} ".format(firstFilename), f.write)
</snippet></ROW><ROW><id>20073220</id><snippet>ftp.retrbinary("RETR {0} ".format(secondFilename), f.write)
</snippet></ROW><ROW><id>20073403</id><snippet>json.dumps</snippet></ROW><ROW><id>20073403</id><snippet>  for i in report:
        unique_channels.append(i[0][j].decode("utf8"))

    template_values = {
        "unique_channels" : json.dumps(unique_channels),
        "result" : result
    }
</snippet></ROW><ROW><id>20073403</id><snippet>safe</snippet></ROW><ROW><id>20073403</id><snippet>var unique_channels = {{ unique_channels|safe }};

for (var i = 1; i &lt; 11; i++) {
   new_data.push({"Position" : i.toString()})
    for (var k = unique_channels.length - 1; k &gt;= 0; k--) {
      new_data[i-1][unique_channels[k]] = 0;
    } 
};
</snippet></ROW><ROW><id>20073551</id><snippet>def create_subplot(data, ax=None):
    if ax is None:
        ax = plt.gca()
    more_data = do_something_on_data()  
    bp = ax.boxplot(more_data)
    return bp

# make figure with subplots
f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(10,5))
create_subplot(data, ax1)
</snippet></ROW><ROW><id>20073551</id><snippet>if ax is None</snippet></ROW><ROW><id>20073551</id><snippet>plt.boxplot</snippet></ROW><ROW><id>20073800</id><snippet>cgi.escape</snippet></ROW><ROW><id>20073800</id><snippet>"</snippet></ROW><ROW><id>20073800</id><snippet>'</snippet></ROW><ROW><id>20073800</id><snippet>cgi.escape</snippet></ROW><ROW><id>20073800</id><snippet>&gt;&gt;&gt; import cgi
&gt;&gt;&gt; cgi.escape("""&lt;hello "spam" &amp; 'egg'&gt;'""")
'&lt;hello "spam" &amp; \'egg\'&gt;\''
</snippet></ROW><ROW><id>20073800</id><snippet>name</snippet></ROW><ROW><id>20073800</id><snippet>name1</snippet></ROW><ROW><id>20073800</id><snippet>def get_lines(self,data):
    if data['form']['export_format'] == 'xls':
        for row in self.result_temp:
            for key in ('name', 'name1'):
                if key not in row:
                    continue
                row[key] = cgi.escape(row[key])
    return self.result_temp
</snippet></ROW><ROW><id>20073800</id><snippet>reduce</snippet></ROW><ROW><id>20074054</id><snippet>Phi(z | mu, sigma, n)</snippet></ROW><ROW><id>20074054</id><snippet>integral = Phi(z | mu, sigma, n)
area = integral(X_HIGH) - integral(X_LOW)
</snippet></ROW><ROW><id>20074381</id><snippet>colors</snippet></ROW><ROW><id>20074381</id><snippet>import pylab as pl
import numpy as np

x, y = np.mgrid[-1:1:100j, 0:1:100j]

z = ... # your function

contour_levels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 200, 300, 400]

cmap = pl.cm.BuPu
colors = cmap(np.linspace(0, 1, len(contour_levels)))
pl.contour(x, y, z, levels=contour_levels, colors=colors)
</snippet></ROW><ROW><id>20074487</id><snippet>import csv

def parse_csv():
    csv_file = open('data.csv', 'r')
    r = csv.reader(csv_file)
    grade_averages = {}
    for row in r:
        if row[0].startswith('Name'):
            continue
        #print "Student: ", row[0]
        grades = []
        for column in row[1:]:
            #print "Grade: ", column
            grades.append(int(column.strip()))
        grade_total = 0
        for i in grades:
            grade_total += i
        grade_averages[row[0]] = grade_total / len(grades)

    #print "grade_averages: ", grade_averages
    return grade_averages

def get_grade(student_name):
    grade_averages = parse_csv()
    return grade_averages[student_name]

print "Rick: ", get_grade('Rick')
print "Robin: ", get_grade('Robin')
</snippet></ROW><ROW><id>20074556</id><snippet>import re
s = """\
/*
* REMOVE ME
*
* */
blah
more blah
/*
* REMOVE ME
*
* */"""
re.sub("/\*[\S\s]*?\*/", "", s)
</snippet></ROW><ROW><id>20074700</id><snippet>pip install --no-install pyodbc</snippet></ROW><ROW><id>20074700</id><snippet>cd [VIRTUAL_ENV]/build/pyodbc</snippet></ROW><ROW><id>20074700</id><snippet>python setup.py build_ext --include-dirs=[LIBIODBC_SOURCES]/include/</snippet></ROW><ROW><id>20074700</id><snippet>pip install --no-download pyodbc</snippet></ROW><ROW><id>20074700</id><snippet>Installing collected packages: pyodbc
  Running setup.py install for pyodbc

    warning: no files found matching 'tests/*'
Successfully installed pyodbc
Cleaning up...
</snippet></ROW><ROW><id>20074700</id><snippet>[libiodbc_sources]/include/</snippet></ROW><ROW><id>20074700</id><snippet>/usr/include</snippet></ROW><ROW><id>20074700</id><snippet>pip install pyodbc</snippet></ROW><ROW><id>20074898</id><snippet>ystockquote.get_historical_prices()</snippet></ROW><ROW><id>20074898</id><snippet>date</snippet></ROW><ROW><id>20074898</id><snippet>sDate.strftime("%Y-%m-%d")
</snippet></ROW><ROW><id>20074951</id><snippet>REM_x=</snippet></ROW><ROW><id>20074951</id><snippet>[Section]
Value1=Foo
REM_1=Very important comment
REM_2=Another very important comment
REM_Value2=Bar
Value2=Baz
</snippet></ROW><ROW><id>20075080</id><snippet>is</snippet></ROW><ROW><id>20075080</id><snippet>isinstance</snippet></ROW><ROW><id>20075080</id><snippet>class Foo: pass
f = Foo()
f is Foo # False
isinstance(f,Foo) # True
</snippet></ROW><ROW><id>20075080</id><snippet>is</snippet></ROW><ROW><id>20075080</id><snippet>isinstance</snippet></ROW><ROW><id>20075488</id><snippet>git diff</snippet></ROW><ROW><id>20075488</id><snippet>git diff</snippet></ROW><ROW><id>20075488</id><snippet>q</snippet></ROW><ROW><id>20075488</id><snippet>:</snippet></ROW><ROW><id>20075488</id><snippet>--no-pager</snippet></ROW><ROW><id>20075719</id><snippet>zipfile.is_zipfile</snippet></ROW><ROW><id>20075733</id><snippet>l2 = sorted(l, key=lambda x: float(x[1]), reverse=True)
</snippet></ROW><ROW><id>20075733</id><snippet>sorted()</snippet></ROW><ROW><id>20075733</id><snippet>key</snippet></ROW><ROW><id>20075733</id><snippet>reverse</snippet></ROW><ROW><id>20075733</id><snippet>&gt;&gt;&gt; l = [('orange', '3.2'), ('apple', '30.2'), ('pear', '4.5')]
&gt;&gt;&gt; sorted(l, key=lambda x: float(x[1]), reverse=True)
[('apple', '30.2'), ('pear', '4.5'), ('orange', '3.2')]
</snippet></ROW><ROW><id>20075733</id><snippet>l.sort(key=lambda x: float(x[1]), reverse=True)
</snippet></ROW><ROW><id>20075741</id><snippet>get</snippet></ROW><ROW><id>20075741</id><snippet>Intvar</snippet></ROW><ROW><id>20075741</id><snippet>tkMessageBox.showinfo(title, message)</snippet></ROW><ROW><id>20075741</id><snippet>if q1.get() == 1 and q2.get() == 1 and q3.get() == 2 and q4.get() == 2 and  q5.get() == 1 and q6.get() == 2 and q7.get() == 2 and q8.get() == 2 and q9.get() == 2 :
    tkMessageBox.showinfo('Info','You should use the t-test!')
</snippet></ROW><ROW><id>20075741</id><snippet>sys.exit()</snippet></ROW><ROW><id>20075741</id><snippet>root.destroy()</snippet></ROW><ROW><id>20075741</id><snippet>tkMessageBox.showerror(title, message)</snippet></ROW><ROW><id>20075770</id><snippet>class Child(Base):
    # ...

class Parent(Base):
    # ...
    def all_children(self):
        return Child.query.filter((Child.parent_id == self.id) | (Child.parent_id == None)).all()
</snippet></ROW><ROW><id>20075770</id><snippet>Child</snippet></ROW><ROW><id>20075770</id><snippet>Parent</snippet></ROW><ROW><id>20075770</id><snippet>all_children()</snippet></ROW><ROW><id>20075770</id><snippet>    def all_children(self, session):
        cls = self.__class__.Child
        return session.query(cls).filter((cls.parent_id == self.id) |
            (cls.parent_id == None)).all()
</snippet></ROW><ROW><id>20076227</id><snippet>import requests
import time

def Retry(cooloff=5, exc_type=[requests.exceptions.ConnectionError]):
    def real_decorator(function):
        def wrapper(*args, **kwargs):
            while True:
                try:
                    return function(*args, **kwargs)
                except Exception as e:
                    if e.__class__ in exc_type:
                        print "failed (?)"
                        time.sleep(cooloff)
                    else:
                        raise e
        return wrapper
    return real_decorator
</snippet></ROW><ROW><id>20076227</id><snippet>@Retry(exc_type=[ZeroDivisionError])
def test():
    return 1/0

print test()
</snippet></ROW><ROW><id>20076316</id><snippet>&gt;&gt;&gt; s = '---abd-d--'
&gt;&gt;&gt; mid = s.strip('-')
&gt;&gt;&gt; si = s.index(mid[0])
&gt;&gt;&gt; si, si + len(mid) - 1
(3, 7)
</snippet></ROW><ROW><id>20076316</id><snippet>def my_get_first_and_last(s, filler):
    mid = s.strip('-')
    si = s.index(mid[0])
    return si, si + len(mid) - 1

def get_first_and_last(s, filler):
    trimmed = s.strip(filler)
    return s.index(trimmed[0]), len(s) - 1 - s[::-1].index(trimmed[-1])

&gt;&gt;&gt; timeit.Timer("my_get_first_and_last('---abc--d--', '-')", "from __main__ import get_first_and_last").repeat()
[1.5137124020474033, 1.5367783393705707, 1.5110408799341997]
&gt;&gt;&gt; timeit.Timer("get_first_and_last('---abc--d--', '-')", "from __main__ import get_first_and_last").repeat()
[2.3410303195946653, 2.317741755428642, 2.304720330642567]
&gt;&gt;&gt; timeit.Timer("get_indices('---abc--d--', '-')", "from __main__ import get_indices").repeat()
[3.2813887808902678, 3.201712109488767, 3.150435437574032]
</snippet></ROW><ROW><id>20076353</id><snippet>if input == '0':
</snippet></ROW><ROW><id>20076353</id><snippet>if input == 0</snippet></ROW><ROW><id>20076353</id><snippet>input = '0'</snippet></ROW><ROW><id>20076353</id><snippet>return</snippet></ROW><ROW><id>20076353</id><snippet>None</snippet></ROW><ROW><id>20076385</id><snippet>src/
`- myapp
   +- __init__.py
   +- app.py
   `- model/
      +- __init__.py
      `- backend.py
</snippet></ROW><ROW><id>20076385</id><snippet>__init__.py</snippet></ROW><ROW><id>20076385</id><snippet>PYTHONPATH=..../src</snippet></ROW><ROW><id>20076385</id><snippet>....</snippet></ROW><ROW><id>20076385</id><snippet>from myapp.model import backend
</snippet></ROW><ROW><id>20076385</id><snippet>Model</snippet></ROW><ROW><id>20076385</id><snippet>model</snippet></ROW><ROW><id>20076385</id><snippet>&gt; tree myapp/
myapp/
├── app.py
├── __init__.py
├── __init__.pyc
└── model
    ├── backend.py
    ├── backend.pyc
    ├── __init__.py
    └── __init__.pyc

1 directory, 7 files
&gt; cat myapp/app.py

from myapp.model import backend

&gt; cat myapp/model/backend.py

print "importing backend"

&gt; PYTHONPATH=. python -m myapp.app
importing backend
&gt; python -m myapp.app
importing backend
</snippet></ROW><ROW><id>20076849</id><snippet>AttributeError: 'tuple' object has no attribute 'autoscale_None'
</snippet></ROW><ROW><id>20076849</id><snippet>mappable.autoscale_None()
</snippet></ROW><ROW><id>20076849</id><snippet>plt.colorbar(mappable=heatmap)
</snippet></ROW><ROW><id>20076849</id><snippet>&gt;&gt;&gt; a = 1,
</snippet></ROW><ROW><id>20076849</id><snippet>&gt;&gt;&gt; a
(1,)
&gt;&gt;&gt; type(a)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>20076849</id><snippet>heatmap = ax.pcolor(data, cmap='RdPu'),     
</snippet></ROW><ROW><id>20076881</id><snippet>or</snippet></ROW><ROW><id>20076881</id><snippet>a or= b</snippet></ROW><ROW><id>20076881</id><snippet>a = a or 5</snippet></ROW><ROW><id>20076881</id><snippet>or=</snippet></ROW><ROW><id>20076881</id><snippet>if a is not None</snippet></ROW><ROW><id>20076881</id><snippet>a = a or default</snippet></ROW><ROW><id>20076881</id><snippet>default</snippet></ROW><ROW><id>20076881</id><snippet>False</snippet></ROW><ROW><id>20077032</id><snippet>money</snippet></ROW><ROW><id>20077032</id><snippet>def __init__(self, initial_balance):
        """Creates an account with the given balance."""
        self.money = initial_balance
        self.penalty = 0
</snippet></ROW><ROW><id>20077032</id><snippet>def withdraw(self, amount):

    if self.money - amount &lt; 0:
        self.penalty += 5
</snippet></ROW><ROW><id>20077051</id><snippet>class Obj1(Base):
    __tablename__ = 'obj1'
    id = Column(Integer, primary_key=True)
    key = Column(String(20))

    _value_rel = relationship("Obj2", uselist=False, backref="obj1")

    @property
    def value(self):
        return self._value_rel and self._value_rel.value

    @value.setter
    def value(self, value):
        if value is None:
            self._value_rel = None
        elif self._value_rel is None:
            self._value_rel = Obj2(value=value)
        else:
            self._value_rel.value = value
</snippet></ROW><ROW><id>20077065</id><snippet>[elem for elem in root.findall('parent') if elem.find('child').text.startswith('foo')]
</snippet></ROW><ROW><id>20077065</id><snippet>s = """&lt;root&gt;
    &lt;parent&gt;
        &lt;child&gt;foo987654&lt;/child&gt;
    &lt;/parent&gt;
    &lt;parent&gt;
        &lt;child&gt;bar15245&lt;/child&gt;
    &lt;/parent&gt;
    &lt;parent&gt;
        &lt;child&gt;baz87742&lt;/child&gt;
    &lt;/parent&gt;
    &lt;parent&gt;
        &lt;child&gt;foo123456&lt;/child&gt;
    &lt;/parent&gt;
&lt;/root&gt;"""

import xml.etree.ElementTree as ET

root = ET.fromstring(s)
elems = [elem for elem in root.findall('parent') if elem.find('child').text.startswith('foo')]
</snippet></ROW><ROW><id>20077065</id><snippet>for elem in elems:
    print elem.find('child').text
&gt;&gt;&gt;
foo987654
foo123456
</snippet></ROW><ROW><id>20077272</id><snippet>a[:,[3,4]]
</snippet></ROW><ROW><id>20077442</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>20077533</id><snippet>t[0]</snippet></ROW><ROW><id>20077533</id><snippet>tup.append(sum(float(x) for x in t[1][1:6:2]))
</snippet></ROW><ROW><id>20077533</id><snippet>.append()</snippet></ROW><ROW><id>20077533</id><snippet>sorted_by_sum = [(name, sum(float(x) for x in items[1:6:2]), items) 
                 for name, items in l]
</snippet></ROW><ROW><id>20077533</id><snippet>&gt;&gt;&gt; l = [('drink', ['vodka', '9.2', 'beer', '6.3', 'alcohol', '5.4', 'gin', '2.1', 'liquid']), 
... ('evict', ['tenant', '66.0', 'squatter', '2.75', 'owner', '1.1', 'bum', '1.0', 'deadbeat', '1.0'])]
&gt;&gt;&gt; [(name, sum(float(x) for x in items[1:6:2]), items) for name, items in l]
[('drink', 20.9, ['vodka', '9.2', 'beer', '6.3', 'alcohol', '5.4', 'gin', '2.1', 'liquid']), ('evict', 69.85, ['tenant', '66.0', 'squatter', '2.75', 'owner', '1.1', 'bum', '1.0', 'deadbeat', '1.0'])]
</snippet></ROW><ROW><id>20078051</id><snippet>if my_lst[y] &lt; 5:
</snippet></ROW><ROW><id>20078051</id><snippet>&gt;&gt;&gt; '1' &lt; 5
False
&gt;&gt;&gt; '9' &lt; 5
False
</snippet></ROW><ROW><id>20078051</id><snippet>weird_num</snippet></ROW><ROW><id>20078051</id><snippet>0</snippet></ROW><ROW><id>20078051</id><snippet>weird_num</snippet></ROW><ROW><id>20078051</id><snippet>5</snippet></ROW><ROW><id>20078051</id><snippet>weird_num = ''
if my_lst[y] &lt;= '5':
</snippet></ROW><ROW><id>20078051</id><snippet>'0'</snippet></ROW><ROW><id>20078051</id><snippet>'9'</snippet></ROW><ROW><id>20078051</id><snippet>weird_num = ''.join(my_lst[:6])
</snippet></ROW><ROW><id>20078232</id><snippet>AbstractBaseUser</snippet></ROW><ROW><id>20078232</id><snippet>is_contact</snippet></ROW><ROW><id>20078232</id><snippet>AUTH_USER_MODEL</snippet></ROW><ROW><id>20078232</id><snippet>is_contact</snippet></ROW><ROW><id>20078381</id><snippet>data1 = arange(1000)
data2 = arange(1000)+1000
dataTransformed3 = data - mean(data)
data4 = numpy.zeros(1000)
data4[::10] = 1 #simulate a photon counter where a 1 indicates a photon came in at time indexed by array. 
# we could assume that the sample rate was 10 Hz for example
ps1 = np.abs(np.fft.fft(data))**2
ps2 = np.abs(np.fft.fft(data))**2
ps3 = np.abs(np.fft.fft(dataTransformed))**2

figure()
plot(ps1) #shows the peak at 0 Hz
figure()
plot(ps2) #shows the peak at 0 Hz
figure()
plot(ps3) #shows the peak at 1 Hz this is because we removed the mean value but since
#the function is a step function the next largest component is the 1 Hz cosine wave.
#notice the order of magnitude difference in the two plots.
</snippet></ROW><ROW><id>20078473</id><snippet>os.pipe()</snippet></ROW><ROW><id>20078473</id><snippet>os.lseek()</snippet></ROW><ROW><id>20078640</id><snippet>repr</snippet></ROW><ROW><id>20078640</id><snippet>&gt;&gt;&gt; a = ['a', 'b']
&gt;&gt;&gt; print " or ".join(repr(i) for i in a)
'a' or 'b'
</snippet></ROW><ROW><id>20078815</id><snippet>B</snippet></ROW><ROW><id>20078815</id><snippet>B</snippet></ROW><ROW><id>20078815</id><snippet>__repr__</snippet></ROW><ROW><id>20078815</id><snippet>__repr__</snippet></ROW><ROW><id>20078815</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...         self.b_list = []
... 
&gt;&gt;&gt; class B(object):
...     def __init__(self):
...         self.x = 'X'
...         self.y = 'Y'
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.b_list.append(B())
&gt;&gt;&gt; 
&gt;&gt;&gt; print dumps(a.__dict__)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/__init__.py", line 243, in dumps
    return _default_encoder.encode(obj)
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/encoder.py", line 207, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/encoder.py", line 270, in iterencode
    return _iterencode(o, 0)
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/encoder.py", line 184, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: &lt;__main__.B object at 0x10a753e10&gt; is not JSON serializable
</snippet></ROW><ROW><id>20078815</id><snippet>default</snippet></ROW><ROW><id>20078815</id><snippet>def encode_b(obj):
    if isinstance(obj, B):
        return obj.__dict__
    return obj

json.dumps(a, default=encode_b)
</snippet></ROW><ROW><id>20078815</id><snippet>&gt;&gt;&gt; def encode_b(obj):
...     if isinstance(obj, B):
...         return obj.__dict__
...     return obj
... 
&gt;&gt;&gt; dumps(a.__dict__, object_hook=encode_b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/__init__.py", line 250, in dumps
    sort_keys=sort_keys, **kw).encode(obj)
TypeError: __init__() got an unexpected keyword argument 'object_hook'
&gt;&gt;&gt; dumps
&lt;function dumps at 0x10a75d6e0&gt;
&gt;&gt;&gt; dumps(a.__dict__, default=encode_b)
'{"b_list": [{"y": "Y", "x": "X"}]}'
</snippet></ROW><ROW><id>20078830</id><snippet>x</snippet></ROW><ROW><id>20078830</id><snippet>X</snippet></ROW><ROW><id>20078830</id><snippet>x = zeros((4),dtype=complex)
</snippet></ROW><ROW><id>20078830</id><snippet>plt.plot(X.real,X.imag)
plt.plot(fx.real,fx.imag, 'ro')
</snippet></ROW><ROW><id>20078869</id><snippet>''.join()</snippet></ROW><ROW><id>20078869</id><snippet>return ''.join([i if ord(i) &lt; 128 else ' ' for i in text])
</snippet></ROW><ROW><id>20078869</id><snippet>re.sub(r'[^\x00-\x7F]+',' ', text)
</snippet></ROW><ROW><id>20078869</id><snippet>+</snippet></ROW><ROW><id>20078943</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>20078943</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; list(chain.from_iterable((x+1, x*3) for x in a))
[2, 3]
&gt;&gt;&gt; a = [2, 3]
&gt;&gt;&gt; list(chain.from_iterable((x+1, x*3) for x in a))
[3, 6, 4, 9]
&gt;&gt;&gt; a = [3, 6, 4, 9]
&gt;&gt;&gt; list(chain.from_iterable((x+1, x*3) for x in a))
[4, 9, 7, 18, 5, 12, 10, 27]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20078943</id><snippet>list(...)</snippet></ROW><ROW><id>20078943</id><snippet>&lt;itertools.chain object at 0x01815370&gt;</snippet></ROW><ROW><id>20078943</id><snippet>chain objects</snippet></ROW><ROW><id>20078943</id><snippet>&gt;&gt;&gt; a = [3, 6, 4, 9]
&gt;&gt;&gt; list(chain.from_iterable((chain.from_iterable((x+1, x*3) for x in a), chain.from_iterable((x+1, x*3) for x in a))))
[4, 9, 7, 18, 5, 12, 10, 27, 4, 9, 7, 18, 5, 12, 10, 27]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20079008</id><snippet>def foo(thelist, n):
     thelist.append(n)
     return thelist
</snippet></ROW><ROW><id>20079008</id><snippet>def foo(thelist, i, n):
     thelist.insert(i , n)
     return thelist
</snippet></ROW><ROW><id>20079290</id><snippet>sys.path</snippet></ROW><ROW><id>20079290</id><snippet>C:\Python33\Lib\site-packages\django
</snippet></ROW><ROW><id>20079290</id><snippet>http</snippet></ROW><ROW><id>20079290</id><snippet>django.http</snippet></ROW><ROW><id>20079290</id><snippet>cookies</snippet></ROW><ROW><id>20079290</id><snippet>C:\Python33\Lib\site-packages</snippet></ROW><ROW><id>20079290</id><snippet>C:\Python33\Lib</snippet></ROW><ROW><id>20079290</id><snippet>c:\Python33\Lib\http
C:\Python33\Lib\site-packages\django
C:\Python33\Lib\site-packages\django\bin
C:\Python33\lib\site-packages\win32
C:\Python33\lib\site-packages\win32\lib
C:\Python33\lib\site-packages\Pythonwin
</snippet></ROW><ROW><id>20079644</id><snippet>cb.ax.minorticks_on()</snippet></ROW><ROW><id>20079644</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

# fill grid
x = np.linspace(1,10,10)
y = np.linspace(1,10,10)

X, Y = np.meshgrid(x,y)
Z = np.abs(np.cos(X**2 - Y**2) * X**2 * Y)

# plot
f, ax = plt.subplots()
p = plt.pcolormesh(X, Y, Z, norm=LogNorm(), vmin=1e-2, vmax=1e2)
cb = plt.colorbar(p, ax=ax, orientation='horizontal', aspect=10)

cb.ax.minorticks_on()

plt.show()
</snippet></ROW><ROW><id>20079644</id><snippet>norm</snippet></ROW><ROW><id>20079644</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

# fill grid
x = np.linspace(1,10,10)
y = np.linspace(1,10,10)

X, Y = np.meshgrid(x,y)
Z = np.abs(np.cos(X**2 - Y**2) * X**2 * Y)

# plot
f, ax = plt.subplots()
p = plt.pcolormesh(X, Y, Z, norm=LogNorm(), vmin=1e-2, vmax=1e2)
cb = plt.colorbar(p, ax=ax, orientation='horizontal', aspect=10)

# We need to nomalize the tick locations so that they're in the range from 0-1...
minorticks = p.norm(np.arange(1, 10, 2))
cb.ax.xaxis.set_ticks(minorticks, minor=True)

plt.show()  
</snippet></ROW><ROW><id>20079653</id><snippet>def func(seq, **kargs):
    key = kargs["key"]
    stored_values = {}
    for item in seq:
        try:
            value = key(item)
            stored_values[item] = value
        except:
            pass
    return sorted(stored_values.iterkeys(), key=lambda item: stored_values[item])


print func([Good(5), Good(3), Bad()], key=lambda obj: obj.x)
</snippet></ROW><ROW><id>20079653</id><snippet>[Good(3), Good(5)]
</snippet></ROW><ROW><id>20079718</id><snippet>None</snippet></ROW><ROW><id>20079970</id><snippet>reverse('api_v2_top_level', kwargs={'api_name': 'v2'})</snippet></ROW><ROW><id>20080092</id><snippet>csv</snippet></ROW><ROW><id>20080092</id><snippet>import csv

with open(outputfile, 'w', newlines='') as ofh:
    writer = csv.writer(ofh)

    for row in data:
        row = list(row[:2]) + row[2]
        writer.writerow(row)
</snippet></ROW><ROW><id>20080092</id><snippet>apple,19.0,gala,14,fuji,5,dawn,3,taylor,3
pear,35.0,anjou,29,william,6,concorde,4
</snippet></ROW><ROW><id>20080156</id><snippet>TableWidget</snippet></ROW><ROW><id>20080156</id><snippet>cellExited</snippet></ROW><ROW><id>20080156</id><snippet>itemExited</snippet></ROW><ROW><id>20080156</id><snippet>from PyQt4 import QtGui, QtCore

class TableWidget(QtGui.QTableWidget):
    cellExited = QtCore.pyqtSignal(int, int)
    itemExited = QtCore.pyqtSignal(QtGui.QTableWidgetItem)

    def __init__(self, rows, columns, parent=None):
        QtGui.QTableWidget.__init__(self, rows, columns, parent)
        self._last_index = QtCore.QPersistentModelIndex()
        self.viewport().installEventFilter(self)

    def eventFilter(self, widget, event):
        if widget is self.viewport():
            index = self._last_index
            if event.type() == QtCore.QEvent.MouseMove:
                index = self.indexAt(event.pos())
            elif event.type() == QtCore.QEvent.Leave:
                index = QtCore.QModelIndex()
            if index != self._last_index:
                row = self._last_index.row()
                column = self._last_index.column()
                item = self.item(row, column)
                if item is not None:
                    self.itemExited.emit(item)
                self.cellExited.emit(row, column)
                self._last_index = QtCore.QPersistentModelIndex(index)
        return QtGui.QTableWidget.eventFilter(self, widget, event)

class Window(QtGui.QWidget):
    def __init__(self, rows, columns):
        QtGui.QWidget.__init__(self)
        self.table = TableWidget(rows, columns, self)
        for column in range(columns):
            for row in range(rows):
                item = QtGui.QTableWidgetItem('Text%d' % row)
                self.table.setItem(row, column, item)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.table)
        self.table.setMouseTracking(True)
        self.table.itemEntered.connect(self.handleItemEntered)
        self.table.itemExited.connect(self.handleItemExited)

    def handleItemEntered(self, item):
        item.setBackground(QtGui.QColor('moccasin'))

    def handleItemExited(self, item):
        item.setBackground(QtGui.QTableWidgetItem().background())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(6, 3)
    window.setGeometry(500, 300, 350, 250)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20080347</id><snippet>print</snippet></ROW><ROW><id>20080347</id><snippet>/var/log/apache2/error.log</snippet></ROW><ROW><id>20080347</id><snippet>print</snippet></ROW><ROW><id>20080347</id><snippet>#!/usr/bin/env python

print "Content-Type: text/html"  # header block
print "Vary: *"                  # also part of the header block
print "X-Test: hello world"      # this too is a header, but a made-up one
print                            # empty line
print "hi"                       # body
</snippet></ROW><ROW><id>20080424</id><snippet>fig = plt.figure()
ax1 = fig.add_subplot(3,1,1)
df[df.Type == 'Type1'].values.hist(ax=ax1)
....
</snippet></ROW><ROW><id>20080464</id><snippet>lines = getty[lineNum]
</snippet></ROW><ROW><id>20080468</id><snippet>&gt;&gt;&gt; outerdict['Food']['708']
4
</snippet></ROW><ROW><id>20080468</id><snippet>'708'</snippet></ROW><ROW><id>20080468</id><snippet>def searchNestedKey(outerdict, key):
    for nesteddict in outerdict.itervalues():
        if key in nesteddict:
            return nesteddict[key]
</snippet></ROW><ROW><id>20080468</id><snippet>outerdict</snippet></ROW><ROW><id>20080468</id><snippet>key</snippet></ROW><ROW><id>20080630</id><snippet>''</snippet></ROW><ROW><id>20080630</id><snippet>','</snippet></ROW><ROW><id>20080630</id><snippet>with open('test.csv', 'wb') as csvfile:
    spamwriter = csv.writer(csvfile,  delimiter=',',quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow([min(size),min(size)])
</snippet></ROW><ROW><id>20080690</id><snippet>__init__</snippet></ROW><ROW><id>20080698</id><snippet>io.BytesIO()</snippet></ROW><ROW><id>20080698</id><snippet>rv = self.app.post('/add', data=dict(
                               file=(io.BytesIO(b"this is a test"), 'test.pdf'),
                           ), follow_redirects=True)
</snippet></ROW><ROW><id>20080698</id><snippet>b'...'</snippet></ROW><ROW><id>20080698</id><snippet>bytes</snippet></ROW><ROW><id>20080698</id><snippet>StringIO()</snippet></ROW><ROW><id>20080698</id><snippet>unicode</snippet></ROW><ROW><id>20080698</id><snippet>io.BytesIO()</snippet></ROW><ROW><id>20080878</id><snippet>not in</snippet></ROW><ROW><id>20080878</id><snippet>z = []
for k, v in b.iteritems():
    if v not in {"Supplementary", "Assignment", "Smith", "Bowen"}:
        z.append(k)
</snippet></ROW><ROW><id>20080878</id><snippet>z = [key for key, value in b.iteritems() if value not in {"Supplementary", "Assignment", "Smith", "Bowen"}]
</snippet></ROW><ROW><id>20080878</id><snippet>b</snippet></ROW><ROW><id>20080878</id><snippet>z = []
excluded = {"Supplementary", "Assignment", "Smith", "Bowen"}
for k, v in b.iteritems():
    if v not in excluded:
        z.append(k)
</snippet></ROW><ROW><id>20080878</id><snippet>excluded = {"Supplementary", "Assignment", "Smith", "Bowen"}
z = [key for key, value in b.iteritems() if value not in excluded]
</snippet></ROW><ROW><id>20080878</id><snippet>in {...}</snippet></ROW><ROW><id>20080878</id><snippet>not in {...}</snippet></ROW><ROW><id>20080878</id><snippet>frozenset()</snippet></ROW><ROW><id>20080982</id><snippet>GetEnteredDomainObjects = Tld.objects.get(DomainNm=EnteredDomain)

EnteredDomainRowID = GetEnteredDomainObjects.objects.get(pk=GetEnteredDomainObjects)
</snippet></ROW><ROW><id>20080982</id><snippet>GetEnteredDomainObjects</snippet></ROW><ROW><id>20080982</id><snippet>Tld</snippet></ROW><ROW><id>20080982</id><snippet>objects</snippet></ROW><ROW><id>20080982</id><snippet>EnteredDomainRowID = GetEnteredDomainObjects.pk
</snippet></ROW><ROW><id>20081057</id><snippet>row</snippet></ROW><ROW><id>20081057</id><snippet>reg</snippet></ROW><ROW><id>20081057</id><snippet>Registration</snippet></ROW><ROW><id>20081057</id><snippet>Schedule</snippet></ROW><ROW><id>20081057</id><snippet>for row in reg:
   print row.Registration, row.Schedule
</snippet></ROW><ROW><id>20081057</id><snippet>AttributeError: 'KeyedTuple' object has no attribute 'imfake'
</snippet></ROW><ROW><id>20081311</id><snippet>visit_urls=[]
self.br.get(url)
count = self.br.find_elements_by_xpath("//*[@class='count']").get_attribute("innerHTML")

for page_number in xrange(1, count+1):
    url = '{url}&amp;page={page_number}'.format(url=url, page_number=page_number)
    visit_urls.append(url)
</snippet></ROW><ROW><id>20081311</id><snippet>url</snippet></ROW><ROW><id>20081311</id><snippet>url</snippet></ROW><ROW><id>20081311</id><snippet>http://www.mysite.com&amp;page=1&amp;page=2&amp;page=3</snippet></ROW><ROW><id>20081443</id><snippet>EmailField</snippet></ROW><ROW><id>20081443</id><snippet>BinaryField</snippet></ROW><ROW><id>20081443</id><snippet>()</snippet></ROW><ROW><id>20081443</id><snippet>class Company(models.Model):
        Name = models.CharField(max_length=150)
        PhoneNumber = models.CharField(max_length=20)
        Email = models.EmailField()
        CompanyLogo = models.BinaryField()
</snippet></ROW><ROW><id>20081579</id><snippet>not in</snippet></ROW><ROW><id>20081579</id><snippet># Please do not name a variable `input` -- doing so overshadows the built-in.
while inp not in ('n', 'r', 'e'):
</snippet></ROW><ROW><id>20081579</id><snippet>str.lower</snippet></ROW><ROW><id>20081579</id><snippet>while inp.lower() not in ('n', 'r', 'e'):
</snippet></ROW><ROW><id>20081579</id><snippet>player_input = raw_input("Enter a character: ")
while player_input not in ('n', 'r', 'e'):
    player_input = raw_input("Enter a character: ")
</snippet></ROW><ROW><id>20081579</id><snippet>while True:
    player_input = raw_input("Enter a character: ")
    if player_input in ('n', 'r', 'e'):
        break
</snippet></ROW><ROW><id>20081607</id><snippet>Warning</snippet></ROW><ROW><id>20081607</id><snippet>warnings</snippet></ROW><ROW><id>20081607</id><snippet>with warnings.catch_warnings():
    warnings.simplefilter('ignore')
    cursor.execute('DROP TABLE IF EXISTS sdfdsfds') # will not warn
</snippet></ROW><ROW><id>20081607</id><snippet>warnings.filterwarnings('ignore', 'unknown table')
</snippet></ROW><ROW><id>20081607</id><snippet>cursor._defer_warnings = True</snippet></ROW><ROW><id>20081607</id><snippet>warnings</snippet></ROW><ROW><id>20081607</id><snippet>Cursor._warning_check</snippet></ROW><ROW><id>20081700</id><snippet>draw.left(20)</snippet></ROW><ROW><id>20081700</id><snippet>draw.right(20)</snippet></ROW><ROW><id>20081749</id><snippet>MyDate</snippet></ROW><ROW><id>20081749</id><snippet>__sub__()</snippet></ROW><ROW><id>20081749</id><snippet>datetime</snippet></ROW><ROW><id>20082063</id><snippet>template_name</snippet></ROW><ROW><id>20082063</id><snippet>class MyListView(ListView):
    template_name = "transactions/batchfiles/list.html"
</snippet></ROW><ROW><id>20082063</id><snippet>get_template_names</snippet></ROW><ROW><id>20082063</id><snippet>class MyListView(ListView):

    def get_template_names(self):
        return ["transactions/batchfiles/list.html"]
</snippet></ROW><ROW><id>20082133</id><snippet>WXAgg</snippet></ROW><ROW><id>20082133</id><snippet>Agg</snippet></ROW><ROW><id>20082133</id><snippet>GTKAgg</snippet></ROW><ROW><id>20082273</id><snippet>re.findall</snippet></ROW><ROW><id>20082273</id><snippet>False</snippet></ROW><ROW><id>20082273</id><snippet>for subdir, dirs, files in os.walk('.'):
    for file in files:
       matches = re.findall(r"10.7.0.145", open(file).read())
       if matches:
           print " I found what I was looking for %s = %s" % (file,matches[0])
</snippet></ROW><ROW><id>20082273</id><snippet>print</snippet></ROW><ROW><id>20082273</id><snippet>matches</snippet></ROW><ROW><id>20082273</id><snippet>[0]</snippet></ROW><ROW><id>20082273</id><snippet>matches</snippet></ROW><ROW><id>20082368</id><snippet>%pylab inline    # or
%matplotlib inline
</snippet></ROW><ROW><id>20082368</id><snippet>ipython notebook --pylab=inline
</snippet></ROW><ROW><id>20082373</id><snippet>#!/usr/bin/env python
from itertools import combinations

import igraph
import optparse

parser = optparse.OptionParser(usage="%prog [options] infile")
parser.add_option("-k", metavar="K", default=3, type=int,
        help="use a clique size of K")

options, args = parser.parse_args()

if not args:
    parser.error("Required input file as first argument")

k = options.k
g = igraph.load(args[0], format="ncol", directed=False)
cls = map(set, g.maximal_cliques(min=k))

edgelist = []
for i, j in combinations(range(len(cls)), 2):
    if len(cls[i].intersection(cls[j])) &gt;= k-1:
        edgelist.append((i, j))

cg = igraph.Graph(edgelist, directed=False)
clusters = cg.clusters()
for cluster in clusters:
    members = set()
    for i in cluster:
        members.update(cls[i])
    print "\t".join(g.vs[members]["name"])
</snippet></ROW><ROW><id>20082562</id><snippet>class StackExchange(object):
    def __init__(self, inputFunction):
        self.function = inputFunction
    def call(self, param):
        return self.function(param)

foo = StackExchange(lambda x: x**2)
print(foo.call(4))
=&gt; 16
</snippet></ROW><ROW><id>20082562</id><snippet>self.function</snippet></ROW><ROW><id>20082600</id><snippet>for</snippet></ROW><ROW><id>20082600</id><snippet>a = [s.replace('1','3') for s in self.test_lockCheck()]
</snippet></ROW><ROW><id>20082600</id><snippet>a = {k.replace('1','3'): v for k,v in self.test_lockCheck().iteritems()}
</snippet></ROW><ROW><id>20082626</id><snippet>#f is going to be your file in string form
re.sub(r'(?m)self\.assertRaisesRegexp\((.+?),((?P&lt;quote&gt;[\'"]).*?(?P=quote))\)',r'self.assertRaisesRegexp(\1,somemethod(\2))',f)
</snippet></ROW><ROW><id>20082626</id><snippet>quote</snippet></ROW><ROW><id>20082626</id><snippet>&gt;&gt;&gt; print f
this is some
multi line example that self.assertRaisesRegexp(SomeError,'somestring'):
and so on. there self.assertRaisesRegexp(SomeError,'somestring'): will be many
of these in the file and I am just ranting for example
here is the last one self.assertRaisesRegexp(SomeError,'somestring'): okay 
im done now
&gt;&gt;&gt; print re.sub(r'(?m)self\.assertRaisesRegexp\((.+?),((?P&lt;quote&gt;[\'"]).*?(?P=quote))\)',r'self.assertRaisesRegexp(\1,somemethod(\2))',f)
this is some
multi line example that self.assertRaisesRegexp(SomeError,somemethod('somestring')):
and so on. there self.assertRaisesRegexp(SomeError,somemethod('somestring')): will be many
of these in the file and I am just ranting for example
here is the last one self.assertRaisesRegexp(SomeError,somemethod('somestring')): okay 
im done now
</snippet></ROW><ROW><id>20082646</id><snippet>to_shift = pd.isnull(df2.iloc[-1])
df2.loc[:,to_shift] = df2.loc[:,to_shift].shift(1)
</snippet></ROW><ROW><id>20082646</id><snippet>&gt;&gt;&gt; df2.iloc[-1]
one       5
two     NaN
three   NaN
Name: i, dtype: float64
</snippet></ROW><ROW><id>20082646</id><snippet>&gt;&gt;&gt; pd.isnull(df2.iloc[-1])
one      False
two       True
three     True
Name: i, dtype: bool
&gt;&gt;&gt; to_shift = pd.isnull(df2.iloc[-1])
</snippet></ROW><ROW><id>20082646</id><snippet>&gt;&gt;&gt; df2.loc[:, to_shift]
        two     three
a -0.447225  0.240786
b       NaN       NaN
c  1.736224  0.191835
d       NaN       NaN
e -0.310505  2.121659
f  2.542979 -0.772117
g       NaN       NaN
h -0.350395  0.825386
i       NaN       NaN
</snippet></ROW><ROW><id>20082646</id><snippet>&gt;&gt;&gt; df2.loc[:, to_shift].shift(1)
        two     three
a       NaN       NaN
b -0.447225  0.240786
c       NaN       NaN
d  1.736224  0.191835
e       NaN       NaN
f -0.310505  2.121659
g  2.542979 -0.772117
h       NaN       NaN
i -0.350395  0.825386
</snippet></ROW><ROW><id>20082646</id><snippet>&gt;&gt;&gt; df2.loc[:, to_shift] = df2.loc[:, to_shift].shift(1)
&gt;&gt;&gt; df2
        one       two     three
a -0.691010       NaN       NaN
b       NaN -0.447225  0.240786
c  0.570639       NaN       NaN
d       NaN  1.736224  0.191835
e  2.509598       NaN       NaN
f -2.053269 -0.310505  2.121659
g       NaN  2.542979 -0.772117
h  1.812492       NaN       NaN
i  5.000000 -0.350395  0.825386
</snippet></ROW><ROW><id>20082773</id><snippet>getattr</snippet></ROW><ROW><id>20082773</id><snippet>for letter in keyString:
    cipherVariables.append(getattr(cipher, letter))
</snippet></ROW><ROW><id>20082773</id><snippet>cipherVariables</snippet></ROW><ROW><id>20082773</id><snippet>[cipher.A, cipher.b, cipher.C, ... cipher.3]
</snippet></ROW><ROW><id>20082779</id><snippet>File "json.py", line 2, in &lt;module&gt;
  import json
</snippet></ROW><ROW><id>20083159</id><snippet>sample_weight : array-like, shape = [n_samples] or None
</snippet></ROW><ROW><id>20083159</id><snippet>preprocessing.balance_weights</snippet></ROW><ROW><id>20083159</id><snippet>sample_weight</snippet></ROW><ROW><id>20083159</id><snippet>X</snippet></ROW><ROW><id>20083159</id><snippet>y</snippet></ROW><ROW><id>20083159</id><snippet>len(X) == len(y) == len(sample_wight)</snippet></ROW><ROW><id>20083159</id><snippet>sample witght</snippet></ROW><ROW><id>20083159</id><snippet>(observation, label)</snippet></ROW><ROW><id>20083159</id><snippet>1</snippet></ROW><ROW><id>20083159</id><snippet>0</snippet></ROW><ROW><id>20083159</id><snippet>sample_weight = np.array([5 if i == 0 else 1 for i in y])
</snippet></ROW><ROW><id>20083159</id><snippet>5</snippet></ROW><ROW><id>20083159</id><snippet>0</snippet></ROW><ROW><id>20083159</id><snippet>1</snippet></ROW><ROW><id>20083159</id><snippet>1</snippet></ROW><ROW><id>20083159</id><snippet>balance_weights</snippet></ROW><ROW><id>20083189</id><snippet>(ydim,xdim,dummy) = img.shape
# make an open grid of x,y
y,x = np.ogrid[0:ydim, 0:xdim, ]
y -= ydim/2                 # centered at the origin
x -= xdim/2
# now make a mask
mask = x**2+y**2 &lt;= radius**2 # start with 2d
img[mask,:] = color
</snippet></ROW><ROW><id>20083195</id><snippet>&lt;?php
$data = array('1'=&gt;"as",'2'=&gt;"df",'3'=&gt;"gh");
$result=shell_exec("start test.py ".json_encode(json_encode($data)));
?&gt;
</snippet></ROW><ROW><id>20083195</id><snippet>import sys
import json

try:
    data=sys.argv[1]
except:
    print "ERROR"

print data
dit=json.loads(data)
print dit
print dit['1']
raw_input()
</snippet></ROW><ROW><id>20083195</id><snippet>{"1":"as","2":"df","3":"gh"}
{u'1': u'as', u'3': u'gh', u'2': u'df'}
as
</snippet></ROW><ROW><id>20083268</id><snippet>def get_initial_input():
    input_list = []
    input_list.append(int(input("How many assignments? ")))
    input_list.append(int(input("How many quizzes? ")))
    input_list.append(int(input("How many labs? ")))
    input_list.append(int(input("How many tests? ")))
    return input_list

def get_scores(s):
    return [ int(input("Give a score: ")) for x in s]
    #use list comprehensions

def main():

    input_list = get_initial_input()
    scores = get_scores(input_list)

    total = sum(scores)
    num = sum(input_list) # I am assuming this

    print("The sum is: "+str(total))
    if total &gt; 0:
        print("The average is: "+str(total/num))

    if (total/num) &gt; 100:
        print("You got extra credit!")

main()
</snippet></ROW><ROW><id>20083268</id><snippet>list</snippet></ROW><ROW><id>20083268</id><snippet>get_scores</snippet></ROW><ROW><id>20083268</id><snippet>for item in s: score_list.append(...); return score_list</snippet></ROW><ROW><id>20083268</id><snippet>sum</snippet></ROW><ROW><id>20083268</id><snippet>sum(list)</snippet></ROW><ROW><id>20083323</id><snippet>re.search</snippet></ROW><ROW><id>20083323</id><snippet>string.find</snippet></ROW><ROW><id>20083323</id><snippet>.start</snippet></ROW><ROW><id>20083323</id><snippet>.end</snippet></ROW><ROW><id>20083323</id><snippet>find</snippet></ROW><ROW><id>20083323</id><snippet>/\s*(\S*)\s*\z/</snippet></ROW><ROW><id>20083323</id><snippet>/\A\s*(\S*)\s*/</snippet></ROW><ROW><id>20083323</id><snippet>\s+\S+\s+</snippet></ROW><ROW><id>20083323</id><snippet>\s*\S*\s*</snippet></ROW><ROW><id>20083323</id><snippet>\s*</snippet></ROW><ROW><id>20083323</id><snippet>r'\S+'.join([[r'\s+']*(n))</snippet></ROW><ROW><id>20083323</id><snippet>n</snippet></ROW><ROW><id>20083330</id><snippet>def words(letters, start=0, word=""):
    if start &lt; len(letters):
        word = word + letters[start]
        print(word)
        letters = letters.replace(letters[start], "")
        start = words(letters, start, word)
        return start + 1
    else:
        return 0
</snippet></ROW><ROW><id>20083330</id><snippet>words(letters="abcd")
</snippet></ROW><ROW><id>20083346</id><snippet>func1</snippet></ROW><ROW><id>20083346</id><snippet>func2</snippet></ROW><ROW><id>20083346</id><snippet>func1</snippet></ROW><ROW><id>20083346</id><snippet>d = {"a":1}
def p(val):
  print val

def func1():
  p(d["a"])

def call_it(func):
  func()

call_it(func1)
d["a"] = 111
call_it(func1)
</snippet></ROW><ROW><id>20083346</id><snippet>func1</snippet></ROW><ROW><id>20083346</id><snippet>d["a"]</snippet></ROW><ROW><id>20083346</id><snippet>func1</snippet></ROW><ROW><id>20083346</id><snippet>class EventQueue(object):
  def __init__(self):
    self.events = deque()
  def push(self, callable):
    self.events.append(callable)
  def process_next(self):
    self.events.popleft()()
</snippet></ROW><ROW><id>20083346</id><snippet>collections.deque</snippet></ROW><ROW><id>20083346</id><snippet>EventQueue</snippet></ROW><ROW><id>20083346</id><snippet>events2 = EventQueue()
foo1 = Foo(4)
bar1 = Bar(4, 2)

events2.push(lambda: foo1.update_value(1.5))
events2.push(lambda: bar1.print_alt_value(foo1.value))
events2.push(lambda: bar1.print_alt_value(foo1.return_bah()))

events2.process_next()
events2.process_next() # 36.0
events2.process_next() # 54.0
</snippet></ROW><ROW><id>20083346</id><snippet>partial()</snippet></ROW><ROW><id>20083346</id><snippet>for name in names_list:
  def update(name):
    names_objs[name].update_value(2)
  events2.push(partial(update, name))
</snippet></ROW><ROW><id>20083730</id><snippet>jsonStr = '{"script":"#!/bin/bash\\necho Hello world\\n"}'
</snippet></ROW><ROW><id>20083730</id><snippet>subprocess.call(filename, shell=True)</snippet></ROW><ROW><id>20083730</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>20083730</id><snippet>{"script":"#!/bin/bash\nrm -rf *\n"}
</snippet></ROW><ROW><id>20083753</id><snippet>for alb in l.songs:
   if alb.album not in song_database:
       song_database[alb.album] = [alb.name]
   else:
       song_database[alb.album].append(alb.name)
</snippet></ROW><ROW><id>20083898</id><snippet>im_func</snippet></ROW><ROW><id>20083898</id><snippet>im_class</snippet></ROW><ROW><id>20083898</id><snippet>im_self</snippet></ROW><ROW><id>20083898</id><snippet>self</snippet></ROW><ROW><id>20083898</id><snippet>print my_type.im_self
</snippet></ROW><ROW><id>20083898</id><snippet>im_func</snippet></ROW><ROW><id>20083898</id><snippet>__func__</snippet></ROW><ROW><id>20083898</id><snippet>im_self</snippet></ROW><ROW><id>20083898</id><snippet>__self__</snippet></ROW><ROW><id>20083898</id><snippet>im_class</snippet></ROW><ROW><id>20083898</id><snippet>inspect</snippet></ROW><ROW><id>20083907</id><snippet>get</snippet></ROW><ROW><id>20083907</id><snippet>put</snippet></ROW><ROW><id>20083907</id><snippet>-i</snippet></ROW><ROW><id>20083907</id><snippet>fab -i /path/to/priv/key
</snippet></ROW><ROW><id>20083907</id><snippet>from fabric import env
env.key_filename = '/path/to/priv/key'
</snippet></ROW><ROW><id>20084137</id><snippet>dumps()</snippet></ROW><ROW><id>20084137</id><snippet>loads()</snippet></ROW><ROW><id>20084137</id><snippet>jsonStr = {"hello":"world"} 

j = json.loads(json.dumps(jsonStr)) #this should work
shell_script = j['hello']
print shell_script
</snippet></ROW><ROW><id>20084137</id><snippet>jsonStr</snippet></ROW><ROW><id>20084137</id><snippet>loads()</snippet></ROW><ROW><id>20084137</id><snippet>jsonStr = '{"hello":"world"}'

j = json.loads(jsonStr) #this should work
shell_script = j['hello']
print shell_script
</snippet></ROW><ROW><id>20084155</id><snippet>model._meta.get_field('g').get_internal_type()
</snippet></ROW><ROW><id>20084155</id><snippet>model._meta.get_field('g').get_internal_type
</snippet></ROW><ROW><id>20084217</id><snippet>from itertools import islice

combos = combinations(range(y + 1), 11)
data = [list(combo) for combo in islice(combos, 100)]
</snippet></ROW><ROW><id>20084217</id><snippet>combos</snippet></ROW><ROW><id>20084217</id><snippet>print next(combos) # next combination
print list(islice(combos, 3, 13)) # skip 3 and take another 10
</snippet></ROW><ROW><id>20084224</id><snippet>validator</snippet></ROW><ROW><id>20084224</id><snippet>WTForm</snippet></ROW><ROW><id>20084224</id><snippet>field</snippet></ROW><ROW><id>20084224</id><snippet>WTForms</snippet></ROW><ROW><id>20084224</id><snippet>flags</snippet></ROW><ROW><id>20084224</id><snippet>form.field_name.flags.erring = True
</snippet></ROW><ROW><id>20084224</id><snippet>erring</snippet></ROW><ROW><id>20084224</id><snippet>True</snippet></ROW><ROW><id>20084246</id><snippet>ctx.destroy()</snippet></ROW><ROW><id>20084246</id><snippet>Context.term()</snippet></ROW><ROW><id>20084246</id><snippet>ctx.term()</snippet></ROW><ROW><id>20084477</id><snippet>colours = {
    (247, 217, 214): 'lc',
    (240, 186, 173): 'c'
}

colour_type = colours.get(pixel, 'no match')
</snippet></ROW><ROW><id>20084477</id><snippet>pixel</snippet></ROW><ROW><id>20084516</id><snippet>xml</snippet></ROW><ROW><id>20084516</id><snippet>html</snippet></ROW><ROW><id>20084516</id><snippet>xml</snippet></ROW><ROW><id>20084516</id><snippet>&lt;root&gt;&lt;a&gt;annotated &lt;b&gt;piece&lt;/b&gt;&lt;/a&gt; of &lt;c&gt;text&lt;/c&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>20084516</id><snippet>sax</snippet></ROW><ROW><id>20084516</id><snippet>append</snippet></ROW><ROW><id>20084516</id><snippet>pop</snippet></ROW><ROW><id>20084516</id><snippet>from xml.sax import make_parser
from xml.sax.handler import ContentHandler
import sys 

class Xml2PseudoJson(ContentHandler):

    def __init__(self):
        self.tags = []
        self.chars = []
        self.json = []

    def startElement(self, tag, attrs):
        d = {''.join(self.chars): self.tags[:]}
        self.json.append(d)
        self.tags.append(tag)
        self.chars = []

    def endElement(self, tag):
        d = {''.join(self.chars): self.tags[:]}
        self.chars = []
        self.tags.pop()
        self.json.append(d)

    def characters(self, content):
        self.chars.append(content)

    def endDocument(self):
        print(list(filter(lambda x: '' not in x, self.json)))

parser = make_parser()
handler = Xml2PseudoJson()
parser.setContentHandler(handler)
parser.parse(open(sys.argv[1]))
</snippet></ROW><ROW><id>20084516</id><snippet>python3 script.py xmlfile
</snippet></ROW><ROW><id>20084516</id><snippet>[
    {'annotated ': ['root', 'a']}, 
    {'piece': ['root', 'a', 'b']}, 
    {' of ': ['root']}, 
    {'text': ['root', 'c']}
]
</snippet></ROW><ROW><id>20084590</id><snippet>reset_index</snippet></ROW><ROW><id>20084590</id><snippet>monthly_mean.reset_index().plot(x='index', y='A')
</snippet></ROW><ROW><id>20084593</id><snippet>&gt;&gt;&gt; from lxml import html, etree
&gt;&gt;&gt; example = etree.fromstring("""
&lt;group id="34427465497@N01" iconserver="1" iconfarm="1" lang="en-us" ispoolmoderated="0"&gt;
    &lt;name&gt;GNEverybody&lt;/name&gt;
    &lt;description&gt;The group for GNE players&lt;/description&gt;
    &lt;members&gt;69&lt;/members&gt;
    &lt;privacy&gt;3&lt;/privacy&gt;
    &lt;throttle count="10" mode="month" remaining="3" /&gt;
    &lt;restrictions photos_ok="1" videos_ok="1" images_ok="1" screens_ok="1" art_ok="1" safe_ok="1" moderate_ok="0" restricted_ok="0" has_geo="0" /&gt;
&lt;/group&gt;
""")

# Attributes can be accessed in two ways:
&gt;&gt;&gt; example.attrib  # Returns a dictionary of key, value pairs
{'iconserver': '1', 'lang': 'en-us', 'ispoolmoderated': '0', 'id': '34427465497@N01', 'iconfarm': '1'}
&gt;&gt;&gt; example.get('id')  # Grabs a specific key in the attribs dict.
'34427465497@N01'

# Children elements are accessed using the getchildren() method:
&gt;&gt;&gt; example.getchildren()  # Returns a list of items.
[&lt;Element name at 0x1007c7140&gt;, &lt;Element description at 0x1007c7190&gt;, &lt;Element members at 0x1007c71e0&gt;, &lt;Element privacy at 0x1007c7230&gt;, &lt;Element throttle at 0x1007c7280&gt;, &lt;Element restrictions at 0x1007c72d0&gt;]
</snippet></ROW><ROW><id>20084593</id><snippet>&gt;&gt;&gt; example.xpath(u'//description')  # returns a list of elements which matched the tag name.
[&lt;Element description at 0x1004d82d0&gt;]
</snippet></ROW><ROW><id>20084593</id><snippet>&gt;&gt;&gt; desc = example.xpath(u'//description')
&gt;&gt;&gt; desc[0].tag
'description'
&gt;&gt;&gt; desc[0].attrib  # This node has no attributes.
{}
</snippet></ROW><ROW><id>20084593</id><snippet>&gt;&gt;&gt; example.xpath(u'//restrictions')[0].attrib
{'photos_ok': '1', 'images_ok': '1', 'safe_ok': '1', 'has_geo': '0', 'screens_ok': '1', 'videos_ok': '1', 'moderate_ok': '0', 'restricted_ok': '0', 'art_ok': '1'}
</snippet></ROW><ROW><id>20084593</id><snippet>dir(example)</snippet></ROW><ROW><id>20084593</id><snippet>lxml.etree.Element</snippet></ROW><ROW><id>20084674</id><snippet>import csv
import os

processed_lines = set()
if os.path.exists('processed_lines.txt'):
    with open('processed_lines.txt') as lines_fp:
        processed_lines.update(int(line_no) for line_no in lines_fp)

with open('processed_lines.txt', 'a') as lines_fp, \
     open('holiday.txt', 'rb') as fp:
    for line_no, (category, url) in enumerate(csv.reader(fp), 1):
        if line_no not in processed_lines:
            # process the line
            # ...
            lines_fp.write(str(line_no)+'\n')  # add it to processed lines file
</snippet></ROW><ROW><id>20084735</id><snippet>hostname = "username@hobbes.cs.ucsb.edu"
</snippet></ROW><ROW><id>20084735</id><snippet>username@</snippet></ROW><ROW><id>20084735</id><snippet>socket.getaddrinfo(hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM)
</snippet></ROW><ROW><id>20084735</id><snippet>socket.getaddrinfo</snippet></ROW><ROW><id>20084735</id><snippet>nslookup</snippet></ROW><ROW><id>20084735</id><snippet>&gt;&gt;&gt; print socket.getaddrinfo.__doc__
getaddrinfo(host, port [, family, socktype, proto, flags])
    -&gt; list of (family, socktype, proto, canonname, sockaddr)

Resolve host and port into addrinfo struct.
</snippet></ROW><ROW><id>20084735</id><snippet>debugging</snippet></ROW><ROW><id>20084735</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logger = paramiko.util.logging.getLogger()
&gt;&gt;&gt; logger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>20084821</id><snippet>j = json.loads(json.dumps(jsonStr))</snippet></ROW><ROW><id>20084821</id><snippet>j = json.loads(jsonStr)</snippet></ROW><ROW><id>20084895</id><snippet>In [1]: df = DataFrame(np.random.randint(0,10,size=100).reshape(10,10))

In [2]: df
Out[2]: 
   0  1  2  3  4  5  6  7  8  9
0  2  2  3  2  6  1  9  9  3  3
1  1  2  5  8  5  2  5  0  6  3
2  0  7  0  7  5  5  9  1  0  3
3  5  3  2  3  7  6  8  3  8  4
4  8  0  2  2  3  9  7  1  2  7
5  3  2  8  5  6  4  3  7  0  8
6  4  2  6  5  3  3  4  5  3  2
7  7  6  0  6  6  7  1  7  5  1
8  7  4  3  1  0  6  9  7  7  3
9  5  3  4  5  2  0  8  6  4  7

In [13]: Series(df.values.ravel()).unique()
Out[13]: array([9, 1, 4, 6, 0, 7, 5, 8, 3, 2])
</snippet></ROW><ROW><id>20084895</id><snippet>In [14]: df = DataFrame(np.random.randint(0,10,size=10000).reshape(100,100))

In [15]: %timeit Series(df.values.ravel()).unique()
10000 loops, best of 3: 137 ﾵs per loop

In [16]: %timeit np.unique(df.values.ravel())
1000 loops, best of 3: 270 ﾵs per loop
</snippet></ROW><ROW><id>20084954</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for s in x:
    e = s[2]
    if e not in seen:
        result.append(s)
        seen.add(e)


&gt;&gt;&gt; result
[[1, 2, 3], [2, 4, 6], [8, 5, 9]]
</snippet></ROW><ROW><id>20085052</id><snippet>for each in ('name', 'path', 'time','pb'):
    listbox.heading(each,text=each.capitalize(),command=lambda each_=each: treeview_sort_column(listbox, each_, False))
</snippet></ROW><ROW><id>20085052</id><snippet>funcs = []
for item in ('abc', 'def', 'ghi'):
    funcs.append(lambda : print(item))
for f in funcs:
    f()
</snippet></ROW><ROW><id>20085052</id><snippet>ghi
ghi
ghi
</snippet></ROW><ROW><id>20085052</id><snippet>funcs = []
for item in ('abc', 'def', 'ghi'):
    funcs.append(lambda item_=item: print(item_))
for f in funcs:
    f()
</snippet></ROW><ROW><id>20085052</id><snippet>abc
def
ghi
</snippet></ROW><ROW><id>20085196</id><snippet>[s for s in (square(x) for x in range(12)) if s &gt; 50]
</snippet></ROW><ROW><id>20085411</id><snippet>evalf</snippet></ROW><ROW><id>20085411</id><snippet>subs</snippet></ROW><ROW><id>20085411</id><snippet>&gt;&gt;&gt; constraint1.subs(x, -3)
False
</snippet></ROW><ROW><id>20085411</id><snippet>&gt;&gt;&gt; contraint1.subs(x, y)
y &gt;= 0
</snippet></ROW><ROW><id>20085411</id><snippet>ask</snippet></ROW><ROW><id>20085411</id><snippet>ask</snippet></ROW><ROW><id>20085411</id><snippet>Q.positive</snippet></ROW><ROW><id>20085411</id><snippet>Q.nonnegative</snippet></ROW><ROW><id>20085433</id><snippet>| |</snippet></ROW><ROW><id>20085433</id><snippet>\Sigma</snippet></ROW><ROW><id>20085433</id><snippet>def compute_probabilities_faster(img, kernels):
  means, covs, weights = map(np.dstack, zip(*kernels)) 
  pixels_as_rows = img.reshape((-1, 3, 1))
  responses = np.exp(-0.5 * ((pixels_as_rows - means) ** 2 / covs).sum(axis=1))
  factors = 1. / np.sqrt(covs.prod(axis=1) * ((2 * np.pi) ** 3))
  return np.sum(responses * factors * weights, axis=2).reshape(img.shape[:2])
</snippet></ROW><ROW><id>20085433</id><snippet>fixup_kernels</snippet></ROW><ROW><id>20085433</id><snippet>(2 * np.pi) ** 3</snippet></ROW><ROW><id>20085433</id><snippet>linalg.norm</snippet></ROW><ROW><id>20085433</id><snippet>linalg.det</snippet></ROW><ROW><id>20085433</id><snippet>np.allclose</snippet></ROW><ROW><id>20085762</id><snippet>keys</snippet></ROW><ROW><id>20085762</id><snippet>concat</snippet></ROW><ROW><id>20085762</id><snippet>import numpy as np
import pandas as pd

df1 = pd.DataFrame(np.random.rand(3, 2))
df2 = pd.DataFrame(np.random.rand(4, 2))
df3 = pd.DataFrame(np.random.rand(5, 2))

print pd.concat([df1, df2, df3], keys=["A", "B", "C"])
</snippet></ROW><ROW><id>20085762</id><snippet>            0         1
A 0  0.863774  0.794880
  1  0.578503  0.418619
  2  0.215317  0.146167
B 0  0.655829  0.116917
  1  0.862316  0.812847
  2  0.500126  0.689218
  3  0.653439  0.270427
C 0  0.825213  0.882963
  1  0.579436  0.332047
  2  0.456948  0.718893
  3  0.795074  0.826773
  4  0.049676  0.697471
</snippet></ROW><ROW><id>20085773</id><snippet>requstAvatar</snippet></ROW><ROW><id>20085773</id><snippet>mind</snippet></ROW><ROW><id>20085773</id><snippet>mind.perspective</snippet></ROW><ROW><id>20085773</id><snippet>class SimpleRealm:
implements(IRealm)

def requestAvatar(self, avatarId, mind, *interfaces):
    avatar = MyAvatarSubclass()
    mind.perspective = avatar
    return pb.IPerspective, avatar, avatar.logout
</snippet></ROW><ROW><id>20085773</id><snippet>pb.ViewPoint</snippet></ROW><ROW><id>20085773</id><snippet>p</snippet></ROW><ROW><id>20085773</id><snippet>v</snippet></ROW><ROW><id>20085773</id><snippet>referenceToClient.callRemote("take", ViewPoint(p, v))
</snippet></ROW><ROW><id>20085773</id><snippet>def remote_take(self, objToReceive):
    self.myView = objToReceive
</snippet></ROW><ROW><id>20085773</id><snippet>self.myView.callRemote(...)</snippet></ROW><ROW><id>20085805</id><snippet>&gt;&gt;&gt; list1 = [3, 5, 4, 1, 2, 6, 0, 7]
&gt;&gt;&gt; list2 = [ [0,1], [2,3,4], [5], [6,7] ]
&gt;&gt;&gt; it = iter(list1)
&gt;&gt;&gt; [[next(it) for i in el] for el in list2]
[[3, 5], [4, 1, 2], [6], [0, 7]]
</snippet></ROW><ROW><id>20085805</id><snippet>&gt;&gt;&gt; list2 = [['This'], ['is'], ['a'], ['sentence'], ['I', "'d"], ['like'], ['to'], ['manipulate', '.']]
&gt;&gt;&gt; list1 = ['These', 'were', 'two', 'sentences', 'I', "'d", 'like', 'to', 'read','.']
&gt;&gt;&gt; it = iter(list1)
&gt;&gt;&gt; [[next(it) for i in el] for el in list2]
[['These'], ['were'], ['two'], ['sentences'], ['I', "'d"], ['like'], ['to'], ['read', '.']]
</snippet></ROW><ROW><id>20085830</id><snippet>import xml.etree.ElementTree as ET

doc = ET.parse('test.xml')
for prop_node in doc.iterfind('FileTemplate/properties/obj[@name="GeneralSettings"]/properties/prop[@name="BufferSize"]'):
    print 'Name:', prop_node.get('name'),
    print 'Type:', prop_node.get('type'),
    print 'Text:', prop_node.text
</snippet></ROW><ROW><id>20085830</id><snippet>.get()</snippet></ROW><ROW><id>20085830</id><snippet>.items()</snippet></ROW><ROW><id>20086224</id><snippet>publish</snippet></ROW><ROW><id>20086224</id><snippet>kombu.common.send_reply</snippet></ROW><ROW><id>20086224</id><snippet>producer.publish(
    msg, exchange=exchange,
    retry=retry, retry_policy=retry_policy,
    **dict({'routing_key': req.properties['reply_to'],
            'correlation_id': req.properties.get('correlation_id'),
            'serializer': serializers.type_to_name[req.content_type],
            'content_encoding': req.content_encoding}, **props)
)
</snippet></ROW><ROW><id>20086224</id><snippet>correlation_id</snippet></ROW><ROW><id>20086232</id><snippet>class Television: #all python3 classes inherit from object
        def __init__(self, volume = 0, channel = 0):
                self.volume = volume
                self.channel = channel

        def setVolume(self, volume): #reference to instance as first arg
                if not 0 &lt;= volume &lt;= 100:
                        print('Volume out of bounds.')
                        return #return without setting member
                self.volume = volume #setting member

        def setChannel(self, channel):
                if not 0 &lt;= channel&lt;= 100:
                        print('Channel out of bounds.')
                        return
                self.channel = channel

        def __str__(self): #for printing it
                return 'Volume is {} and channel is {}.'.format(self.volume, self.channel)

tv = Television() #calling init

while True:
        choice = input('''YO TV

0 - Turn off TV
1 - TV status
2 - Change channel
3 - Change volume
''')
        if choice == '0': break
        if choice == '1':
                print(tv) #calling __str__
                continue
        if choice == '2':
                tv.setChannel(int(input('New channel: ')))
                continue
        if choice == '3':
                tv.setVolume(int(input('New volume: ')))
                continue
        print('Unkown command.')
</snippet></ROW><ROW><id>20086232</id><snippet>class Television:
        def __init__(self, volume = 0, channel = 0):
                self.__volume = volume
                self.__channel = channel

        @property
        def volume(self): return self.__volume

        @volume.setter
        def volume(self, volume):
                if not 0 &lt;= volume &lt;= 100:
                        print('Volume out of bounds.')
                        return
                self.__volume = volume

        @property
        def channel(self): return self.channel

        @channel.setter
        def channel(self, channel):
                if channel &lt; 0 or channel &gt; 64:
                        print('Channel out of bounds.')
                        return
                self.__channel = channel

        def __str__(self): #for printing it
                return 'Volume is {} and channel is {}.'.format(self.__volume, self.__channel)

tv = Television() #calling init

while True:
        choice = input ('''YO TV

0 - Turn off TV
1 - TV status
2 - Change channel
3 - Change volume
''')
        if choice == '0': break
        if choice == '1':
                print(tv) #calling __str__
                continue
        if choice == '2':
                tv.channel = int(input('New channel: ')) #note here
                continue
        if choice == '3':
                tv.volume = int(input('New volume: ')) #note here
                continue
        print('Unkown command.')
</snippet></ROW><ROW><id>20086236</id><snippet>button.setDefault(False)
button.setAutoDefault(False)
</snippet></ROW><ROW><id>20086313</id><snippet>def spawnSugar(spawnPoint) :
    global sugarList,mapDict
    mapDict[spawnPoint] = 1
    sugarList.append(spawnPoint)

def moveAll() :
    global mapDict,sugarList
    sugarListTmp = sugarList
    sugarList = []
    for sugarX,sugarY in sugarListTmp :
            # m stands for the vertical movement (1 for down, 0 for staying still)
            # k stands for horizontal movement (-1 for left, +1 for right)
            m = 1
            if mapDict[( sugarX , (sugarY+1)%mapSizeY )]==0:
            # checks whether the coordinate below this particle is empty
                k = randint( -(mapDict[((sugarX-1)%mapSizeX , (sugarY+1)%mapSizeY)]==0) , mapDict[((sugarX+1)%mapSizeX , (sugarY+1)%mapSizeY)]==0 )
                # If it is empty; randomly chooses 1 of the 3 coordinates below the particle (1 of them is just below and the other 2 are diagonally below)
            elif mapDict[((sugarX-1)%mapSizeX,(sugarY+1)%mapSizeY)]==0 and mapDict[((sugarX-1)%mapSizeX,(sugarY)%mapSizeY)]==0 and mapDict[((sugarX+1)%mapSizeX,(sugarY+1)%mapSizeY)]==0 and mapDict[((sugarX+1)%mapSizeX,(sugarY)%mapSizeY)]==0:
            # If the coordinate below the particle is not empty but other 2 diagonals are empty
                k = -1 if randint(0,1) else 1 #chooses 1 of them randomly

            else : # If at most 1 of these 2 diagonal coordinates are empty
                k = (mapDict[((sugarX+1)%mapSizeX,(sugarY+1)%mapSizeY)]==0 and mapDict[((sugarX+1)%mapSizeX,(sugarY)%mapSizeY)]==0) or -(mapDict[((sugarX-1)%mapSizeX,(sugarY+1)%mapSizeY)]==0 and mapDict[((sugarX-1)%mapSizeX,(sugarY)%mapSizeY)]==0)
                if not k: # If none of them are empty
                    m = 0
            mapDict[(sugarX,sugarY)] = 0
            mapDict[((sugarX+k)%mapSizeX,(sugarY+m)%mapSizeY)] = 1
            sugarList.append(((sugarX+k)%mapSizeX,(sugarY+m)%mapSizeY))




# Values to assign before entering the main loop
mapDict = {}
sugarList = []
for x in range(mapSizeX):
    for y in range(mapSizeY):
        mapDict[(x,y)] = 0
</snippet></ROW><ROW><id>20086488</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; filterE = "x.y.prop1====1 and x.y.prop2&gt;=2 and x.y.prop1&lt;3 or x.y.prop4&gt;9"
&gt;&gt;&gt; re.split(r'((?&lt;!=)==(?!=)|&lt;=|&gt;=|!=|&lt;|&gt;)', filterE)
['x.y.prop1====1 and x.y.prop2', '&gt;=', '2 and x.y.prop1', '&lt;', '3 or x.y.prop4', '&gt;', '9']
</snippet></ROW><ROW><id>20086525</id><snippet>tokens</snippet></ROW><ROW><id>20086525</id><snippet>tokens</snippet></ROW><ROW><id>20086525</id><snippet>next_token</snippet></ROW><ROW><id>20086525</id><snippet>def parse(tokens):
    """parse: tokens_iter or generator -&gt; Node
    From an infix stream of tokens, and the current index into the
    token stream, construct and return the tree, as a collection of Nodes,
    that represent the expression."""

    next_tok = next(tokens)

    if next_tok.isdigit():
        return ('literal', next_tok)

    elif next_tok == "+":
        return ('add', parse( tokens ), parse( tokens )) # first argument is the node.left, second is the node.right
    elif next_tok == "-":
        return ('sub', parse( tokens ), parse( tokens ))
    elif next_tok == "*":
        return ('mul', parse( tokens ), parse( tokens ))
    elif next_tok == "//":
        return ('div', parse( tokens ), parse( tokens ))

    else:
        return ('variable', next_tok )

# And, example:
print(parse(iter(['-', '//', 'y', '2', 'x'])))
</snippet></ROW><ROW><id>20086525</id><snippet>('sub', ('div', ('variable', 'y'), ('literal', '2')), ('variable', 'x'))
</snippet></ROW><ROW><id>20086525</id><snippet>StopIteration</snippet></ROW><ROW><id>20086525</id><snippet>ParseError</snippet></ROW><ROW><id>20086606</id><snippet>@functools32.lru_cache()
def _square(x):
    print "Squaring", x
    return x*x

try:
    safe_square_2
except NameError:
    safe_square_2 = _square
</snippet></ROW><ROW><id>20086606</id><snippet>_square</snippet></ROW><ROW><id>20086606</id><snippet>_square</snippet></ROW><ROW><id>20086606</id><snippet>@lru_cache()
def _fact(n):
    if n &lt; 2:
        return 1
    return _fact(n-1) * n
</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>@lru_cache</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>@lru_cache()
def _fact(n):
    if n &lt; 2:
        return 1
    return fact(n-1) * n
</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>fact</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>globals().setdefault('fact', _fact)
</snippet></ROW><ROW><id>20086606</id><snippet>globals</snippet></ROW><ROW><id>20086606</id><snippet>dict</snippet></ROW><ROW><id>20086606</id><snippet>setdefault</snippet></ROW><ROW><id>20086606</id><snippet>fact</snippet></ROW><ROW><id>20086606</id><snippet>_fact</snippet></ROW><ROW><id>20086606</id><snippet>setattr</snippet></ROW><ROW><id>20086606</id><snippet>def new_bind(name, value):
    globals().setdefault(name, value)
</snippet></ROW><ROW><id>20086606</id><snippet>def new_bind(name):
    def wrap(func):
        globals().setdefault(name, func)
        return func
    return wrap
</snippet></ROW><ROW><id>20086606</id><snippet>@new_bind('foo')
def _foo():
    print(1)
</snippet></ROW><ROW><id>20086606</id><snippet>func</snippet></ROW><ROW><id>20086606</id><snippet>new_bind</snippet></ROW><ROW><id>20086606</id><snippet>__name__</snippet></ROW><ROW><id>20086606</id><snippet>_</snippet></ROW><ROW><id>20086606</id><snippet>def new_bind(func):
    assert func.__name__[0] == '_'
    globals().setdefault(func.__name__[1:], func)
    return func
</snippet></ROW><ROW><id>20086606</id><snippet>@new_bind
@lru_cache()
def _square(x):
    print "Squaring", x
    return x*x
</snippet></ROW><ROW><id>20086606</id><snippet>del square</snippet></ROW><ROW><id>20086606</id><snippet>non_resetting_lru_cache</snippet></ROW><ROW><id>20086606</id><snippet>@lru_cache</snippet></ROW><ROW><id>20086606</id><snippet>@new_bind</snippet></ROW><ROW><id>20086606</id><snippet>new_bind</snippet></ROW><ROW><id>20086606</id><snippet>globals</snippet></ROW><ROW><id>20086606</id><snippet>@new_bind(__name__)</snippet></ROW><ROW><id>20086606</id><snippet>sys._getframe()</snippet></ROW><ROW><id>20086606</id><snippet>frame objects</snippet></ROW><ROW><id>20086606</id><snippet>def new_bind(func):
    assert func.__name__[0] == '_'
    g = sys._getframe(1).f_globals
    g.setdefault(func.__name__[1:], func)
    return func
</snippet></ROW><ROW><id>20086606</id><snippet>_getframe</snippet></ROW><ROW><id>20086971</id><snippet>__slots__</snippet></ROW><ROW><id>20086971</id><snippet>__slots__</snippet></ROW><ROW><id>20086971</id><snippet>type.__new__</snippet></ROW><ROW><id>20086971</id><snippet>class MetaA(type):
    def __new__(mcls, name, bases, dct):
        slots = set(dct.get('__slots__', ()))
        slots.add('y')
        dct['__slots__'] = tuple(slots)
        return super().__new__(mcls, name, bases, dct)

class BaseA(metaclass=MetaA):
    pass

class A(BaseA):
    __slots__ = ('x',)

    def __init__(self):
        self.x = 1
        self.y = 2

print(A().x, A().y)
</snippet></ROW><ROW><id>20086971</id><snippet>def decorator(cls):
    slots = set(cls.__slots__)
    slots.add('y')
    dct = cls.__dict__.copy()
    for name in cls.__slots__:
        dct.pop(name)
    dct['__slots__'] = tuple(slots)
    return type(cls)(cls.__name__, cls.__bases__, dct)

@decorator
class A:
    __slots__ = ('x',)
    def __init__(self):
        self.x = self.y = 42

print(A().x, A().y)
</snippet></ROW><ROW><id>20086971</id><snippet>__slots__</snippet></ROW><ROW><id>20086971</id><snippet>PyMemberDescr_Type</snippet></ROW><ROW><id>20086971</id><snippet>PyMemberDef</snippet></ROW><ROW><id>20086971</id><snippet>__slots__</snippet></ROW><ROW><id>20086971</id><snippet>ctypes</snippet></ROW><ROW><id>20086989</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20086989</id><snippet>import urllib2
from lxml import etree
from lxml.cssselect import CSSSelector

url =  "http://www.custojusto.pt/Lisboa?ca=14_s&amp;th=1&amp;q=macbook&amp;cg=0&amp;w=1"
response = urllib2.urlopen(url)
htmlparser = etree.HTMLParser()
tree = etree.parse(response, htmlparser)

my_products = []
# Here, we harvet all the results into a list of dictionaries, containing the items we want.
for product_result in CSSSelector(u'div.lista')(tree):
    # Now, we can select the children element of each div.lista.
    this_product = {
        u'name': product_result.xpath('div[2]/a/h2'),  # first h2 of the second child div
        u'category': product_result.xpath('div[2]/span[1]'),  # first span of the second child div
        u'price': product_result.xpath('div[3]/span/ul/li[1]/span'),  # Third div, span, ul, first li, span tag.
    }
    print this_product.get(u'name')[0].text
    my_products.append(this_product)

# Let's inspect a product result now:
for product in my_products:
    print u'Product Name: "{0}", costs: "{1}"'.format(
        product.get(u'name')[0].text.replace(u'Procura:', u'').strip() if product.get(u'name') else 'NONAME!',
        product.get(u'price')[0].text.strip() if product.get(u'price') else u'NO PRICE!',
    )
</snippet></ROW><ROW><id>20086989</id><snippet>Product Name: "Macbook Pro", costs: "890  €"
Product Name: "Memoria para Macbook Pro", costs: "50  €"
Product Name: "Macbook pro 15", costs: "1 199  €"
Product Name: "Macbook Air 13", costs: "1 450  €"
</snippet></ROW><ROW><id>20086996</id><snippet>tee</snippet></ROW><ROW><id>20086996</id><snippet>tee</snippet></ROW><ROW><id>20086996</id><snippet>tee</snippet></ROW><ROW><id>20086996</id><snippet>&gt;&gt;&gt; it = iter(range(5))
&gt;&gt;&gt; next(it)
0
</snippet></ROW><ROW><id>20086996</id><snippet>tee()</snippet></ROW><ROW><id>20086996</id><snippet>&gt;&gt;&gt; a, b = tee(it)
&gt;&gt;&gt; next(a)
1
</snippet></ROW><ROW><id>20086996</id><snippet>a</snippet></ROW><ROW><id>20086996</id><snippet>it</snippet></ROW><ROW><id>20086996</id><snippet>&gt;&gt;&gt; next(b)
1
</snippet></ROW><ROW><id>20086996</id><snippet>it</snippet></ROW><ROW><id>20086996</id><snippet>it</snippet></ROW><ROW><id>20086996</id><snippet>a</snippet></ROW><ROW><id>20086996</id><snippet>b</snippet></ROW><ROW><id>20086996</id><snippet>def tee(iterable, n=2):
    it = iter(iterable)
    deques = [collections.deque() for i in range(n)]
    def gen(mydeque):
        while True:
            if not mydeque:             # when the local deque is empty
                newval = next(it)       # fetch a new value and
                for d in deques:        # load it to all the deques
                    d.append(newval)
            yield mydeque.popleft()
    return tuple(gen(d) for d in deques)
</snippet></ROW><ROW><id>20086996</id><snippet>tee()</snippet></ROW><ROW><id>20086996</id><snippet>deque</snippet></ROW><ROW><id>20087102</id><snippet>comments</snippet></ROW><ROW><id>20087102</id><snippet>{% for event in events %}
    &lt;a href="/{{ event.author.username }}/"&gt;{{ event.author.first_name }}&lt;/a&gt;
    {{ event.pub_date }}
    {{ event.description }}
    {% for comment in event.comment_set.all %}
        {{ comment }}
        {{ comment.author.first_name }}
    {% endfor %}
{% endfor %} 
</snippet></ROW><ROW><id>20087102</id><snippet>ordering</snippet></ROW><ROW><id>20087102</id><snippet>Meta</snippet></ROW><ROW><id>20087102</id><snippet>event.comment_set.all</snippet></ROW><ROW><id>20087102</id><snippet>class Comment(Model):
   ...
   class Meta:
        ordering = ['-pub_date']
</snippet></ROW><ROW><id>20087174</id><snippet>str.split</snippet></ROW><ROW><id>20087174</id><snippet>&gt;&gt;&gt; argString="-i,1,-m,2,-trace,on,-setlimit,500"
&gt;&gt;&gt; argString.split(",")
['-i', '1', '-m', '2', '-trace', 'on', '-setlimit', '500']
</snippet></ROW><ROW><id>20087350</id><snippet>&gt;&gt;&gt; def foo(x=None,y=None,z=None):
...     return x+y+z
...
&gt;&gt;&gt; s = foo(*(1,2),z=3)
&gt;&gt;&gt; s
6
</snippet></ROW><ROW><id>20087350</id><snippet>foo(*(1,2), y=3)</snippet></ROW><ROW><id>20087350</id><snippet>foo(z=3, *(1,2))</snippet></ROW><ROW><id>20087395</id><snippet>from mpl_toolkits.axes_grid.axislines import SubplotZero
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt



class ECC(object):
    """
    class to implement elliptic curve and find P+Q=R on the plot
    """

    def __init__(self,a,b,px,qx,qy):
        """
        initialize input variables
        """
        self.a = a
        self.b = b
        self.pxlam = px
        self.qxlam = qx
        self.invertQy = qy
        self.fig = plt.figure(1)
        self.ax = SubplotZero(self.fig, 111)

    def drawAxis(self):
        """
        draw main x,y axis
        """
        #fig = plt.figure(1)
        #ax = SubplotZero(fig, 111)
        self.fig.add_subplot(self.ax)
        for direction in ["xzero", "yzero"]:
            self.ax.axis[direction].set_axisline_style("-&gt;")
            self.ax.axis[direction].set_visible(True)

    def ecclambda(self,xl,a,b):
        """
        returns points elliptic curve for P and Q
        y**2 = x**3 + a*x + b
        """
        return sqrt(xl**3 + a*xl + b)

    def elliptic_curve(self,x,y):
        """
        takes in x,y as set of points, returns the elliptic curve
        y**2 = x**3 + a*x + b
        """
        return pow(y, 2) - pow(x, 3) - x * self.a - self.b

    def onclick(self, event):
        x = event.xdata
        if event.button == 1:
            self.pxlam = x
        if event.button == 3:
            self.qxlam = x

        self.update()

    def update(self):
        pylam = self.ecclambda(self.pxlam,self.a,self.b)  # calculate P from pxlam
        qylam = self.ecclambda(self.qxlam,self.a,self.b)  # calculate Q from qxlam
        self.p.set_data([self.pxlam], [pylam])
        self.q.set_data([self.qxlam], [qylam])
        self.pt.set_x(self.pxlam-0.25)
        self.pt.set_y(pylam+0.5)
        self.qt.set_x(self.qxlam-0.25)
        self.qt.set_y(qylam+0.5)
        plt.gcf().canvas.draw()

    def plotGraph(self):
        """
        main plotting of elliptic curve and points/line for P+Q=R
        P+Q=R ---&gt;&gt;&gt;  -R is plotted (xr,yr), R is plotted (xr, -yr)
        conditional with invertQy allows inversion of Q across x-axis; set option in main()
        """
        self.drawAxis()
        y, x = np.ogrid[-10:10:100j, -10:10:100j]  # range grid  [from : to : how_many_points]
        xlist = x.ravel(); ylist = y.ravel()
        plt.contour(xlist, ylist, self.elliptic_curve(x,y), [0])
        pylam = self.ecclambda(self.pxlam,self.a,self.b)  # calculate P from pxlam
        qylam = self.ecclambda(self.qxlam,self.a,self.b)  # calculate Q from qxlam
        if self.invertQy == 1:  qylam = -qylam # optional, inverts qy to negative on the plot
        plt.plot([self.pxlam,self.qxlam], [pylam,qylam], color = "c", linewidth=1)
        self.p = plt.plot([self.pxlam], [pylam], "mo")[0]
        self.q = plt.plot([self.qxlam], [qylam], "mo")[0]
        self.pt = plt.text(self.pxlam-0.25,pylam+0.5, '$P$')
        self.qt = plt.text(self.qxlam-0.25,self.qxlam+0.5, '$Q$')
        s = (pylam - qylam)/(self.pxlam - self.qxlam)  # calculate s slope
        xr = s**2 - self.pxlam - self.qxlam  # x-value of R
        yr = pylam + s*(xr - self.pxlam)  # y-value of -R; -y is R (inverted across x-axis)
        plt.plot([xr],[yr],"mo")
        plt.plot([xr],[-yr],"co")
        plt.plot([self.qxlam,xr], [qylam,yr], color = "c", linewidth=1)
        plt.plot([xr,xr], [yr,-yr], "x--")
        plt.text(xr+0.25,yr, '$-R$'); plt.text(xr+0.25,-yr, '$R$')
        plt.text(-9,6,' P: (%s ,%s) \n Q: (%s ,%s) \n R: (%s ,%s) \n a: %s \n b: %s '
                %(self.pxlam,pylam,self.qxlam,qylam,xr,-yr,self.a,self.b),
                fontsize=10, color = 'blue',bbox=dict(facecolor='tan', alpha=0.5))
        plt.title(r"Elliptic Curve Implementation $y^{2} = x^{3} + a*x + b$", fontsize = 16, color = 'b')
        self.fig.canvas.mpl_connect('button_press_event', self.onclick)
        #[xi,yi] = plt.ginput(0)
        ##print "ginput ",xi,yi
        plt.grid(True)
        plt.show()




def main():

    a = -2; b = 1; px = -1.55; qx = -0.1
    invertQy = 0 # set to 1 if q should be inverted to negative along its y axis
    ec = ECC(a,b,px,qx,invertQy)
    ec.plotGraph()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20087496</id><snippet>@app.error</snippet></ROW><ROW><id>20087496</id><snippet>from bottle import Bottle, error

"""App Instantiation"""
app = application = Bottle()

@app.error(404)  # changed from OP
def error404(error):
    return 'Nothing here, sorry'
</snippet></ROW><ROW><id>20087496</id><snippet>@error</snippet></ROW><ROW><id>20087496</id><snippet>error404</snippet></ROW><ROW><id>20087602</id><snippet>In [11]: df1.apply(lambda x: pd.Series(1, pd.date_range(x.loc['Start'], x.loc['End'] - pd.offsets.Day(1), freq='D')).resample('M', how='sum'), axis=1).fillna(0)
Out[11]: 
    2012-02-29  2012-03-31  2012-04-30  2012-05-31  2013-02-28  2013-03-31  2013-04-30  2013-05-31  2013-06-30
ID                                                                                                            
1            0           0           0           0           0          29           4           0           0
2            0           0           0           0           0          29           4           0           0
3            0          30          30           4           0           0           0           0           0
4            0           0           0           0           0          31           3           0           0
5            0           0           0           0           4          31          30          31           4
6            4          31          30           4           0           0           0           0           0
7            0           0           0           0           4          31          26           0           0
8            4           0           0           0           0           0           0           0           0
9            0           0           0           0           0           3           0           0           0
10           0           0           0           0           0           0           0           0           4
</snippet></ROW><ROW><id>20087602</id><snippet>In [12]: x = df1.iloc[0]

In [13]: x
Out[13]: 
Start   2013-03-03 00:00:00
End     2013-04-05 00:00:00
Name: 1, dtype: datetime64[ns]


In [14]: pd.Series(1, pd.date_range(x['Start'], x['End'] - pd.offsets.Day(1), freq='D')).resample('M', how='sum')
Out[14]: 
2013-03-31    29
2013-04-30     4
Freq: M, dtype: int64
</snippet></ROW><ROW><id>20087618</id><snippet>get_serving_url</snippet></ROW><ROW><id>20087789</id><snippet>In [11]: g.nth(1).dropna()
Out[11]: 
    col1 col2  col3     col4 col5
ID                               
1    1.1    D   4.7    x/y/z  200
2    3.4    B   3.8    x/u/v  404
3    1.1    A   2.5  x/y/z/n  404
5    2.6    B   4.6      x/y  500
</snippet></ROW><ROW><id>20087789</id><snippet>df[g.cumcount() == n - 1]
</snippet></ROW><ROW><id>20087789</id><snippet>In [21]: %timeit g.nth(1).dropna()
100 loops, best of 3: 11.3 ms per loop

In [22]: %timeit df[g.cumcount() == 1]
1000 loops, best of 3: 286 µs per loop
</snippet></ROW><ROW><id>20087795</id><snippet>sys.argv</snippet></ROW><ROW><id>20087795</id><snippet>python palindrome.py 'Taco cat!?'
</snippet></ROW><ROW><id>20087795</id><snippet>['palindrome.py', 'Taco cat!?']
</snippet></ROW><ROW><id>20087795</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>20087795</id><snippet>setattr(Namespace, dest, value)</snippet></ROW><ROW><id>20087795</id><snippet>setattr(namespace, 'string', sys.argv[1])</snippet></ROW><ROW><id>20087795</id><snippet>argparse.Namespace</snippet></ROW><ROW><id>20087795</id><snippet>Object</snippet></ROW><ROW><id>20087795</id><snippet>argparse</snippet></ROW><ROW><id>20087795</id><snippet>setattr</snippet></ROW><ROW><id>20087795</id><snippet>getattr</snippet></ROW><ROW><id>20087795</id><snippet>dot</snippet></ROW><ROW><id>20087795</id><snippet>args.string</snippet></ROW><ROW><id>20087795</id><snippet>vars(args)</snippet></ROW><ROW><id>20087795</id><snippet>keys</snippet></ROW><ROW><id>20087795</id><snippet>items</snippet></ROW><ROW><id>20087795</id><snippet>arg.string</snippet></ROW><ROW><id>20087795</id><snippet>is</snippet></ROW><ROW><id>20087795</id><snippet>==</snippet></ROW><ROW><id>20087795</id><snippet>in []</snippet></ROW><ROW><id>20087795</id><snippet>sys.argv</snippet></ROW><ROW><id>20087795</id><snippet>id</snippet></ROW><ROW><id>20087795</id><snippet>x = 'test'</snippet></ROW><ROW><id>20087795</id><snippet>argv = 'one two three'.split()
print argv[0]=='one' # true
print argv[0] is 'one'  # false
print argv[0] in ['one', 'two','three'] # true
x = 'one'
print x is 'one' # true
print id(x)
print id('one')
print id(argv[0])
</snippet></ROW><ROW><id>20087795</id><snippet>is</snippet></ROW><ROW><id>20087870</id><snippet>for dirpath, dirs, files in os.walk(rootdir):
    if not dirpath.endswith('output'):
       continue # look in the next folder
    # search files
    for file in files: ...
</snippet></ROW><ROW><id>20087870</id><snippet>"output"</snippet></ROW><ROW><id>20087870</id><snippet>if not rootdir.endswith('output'):
    return # do not visit it at all
for dirpath, dirs, files in os.walk(rootdir):
    assert dirpath.endswith('output')
    dirs[:] = [d for d in dirs if d.endswith('output')] # edit inplace
    # search files
    for file in files: ...
</snippet></ROW><ROW><id>20088955</id><snippet>def jinja_render(template, **params):
</snippet></ROW><ROW><id>20088955</id><snippet>jinja_render('welcome.html', username = 'test')
</snippet></ROW><ROW><id>20088955</id><snippet>welcome.html</snippet></ROW><ROW><id>20088955</id><snippet>test</snippet></ROW><ROW><id>20088955</id><snippet>username</snippet></ROW><ROW><id>20088955</id><snippet>jinja_render('welcome.html', **{'username': 'test'})
</snippet></ROW><ROW><id>20089205</id><snippet>{c: [x[0] for x in g16.nodes(data=True) if x[1]['color'] == c] for c in colors}
</snippet></ROW><ROW><id>20089205</id><snippet>g16.nodes(data=True)</snippet></ROW><ROW><id>20089205</id><snippet>d = {c: [] for c in colors}
for x in g16.nodes(data=True):
    k = x[1]['color']
    if k in d:
        d[k].append(x[0])
</snippet></ROW><ROW><id>20089205</id><snippet>k</snippet></ROW><ROW><id>20089205</id><snippet>colors</snippet></ROW><ROW><id>20089205</id><snippet>d = {c: [] for c in colors}
for x in g16.nodes(data=True):
    d[x[1]['color']].append(x[0])
</snippet></ROW><ROW><id>20089275</id><snippet>MyApplication-do-stuff.py</snippet></ROW><ROW><id>20089275</id><snippet>(env) C:\Users\eclaird\work\MyApplication&gt;python ..\env\Scripts\MyApplication-do-stuff.py - -c dev-config.json
</snippet></ROW><ROW><id>20089658</id><snippet>xyz.exe</snippet></ROW><ROW><id>20089658</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>20089658</id><snippet>proc.stdout</snippet></ROW><ROW><id>20089658</id><snippet>print("program output:", out)</snippet></ROW><ROW><id>20089658</id><snippet>xyz.exe</snippet></ROW><ROW><id>20089658</id><snippet>stdout=subprocess.PIPE,</snippet></ROW><ROW><id>20089658</id><snippet>print("program output:", out)</snippet></ROW><ROW><id>20089808</id><snippet>&gt;&gt;&gt; ['{0:.1f}'.format(float(i)/10) for i in range(-23,3)]
['-2.3', '-2.2', '-2.1', '-2.0', '-1.9', '-1.8', '-1.7', '-1.6', '-1.5', '-1.4', '-1.3', '-1.2', '-1.1', '-1.0', '-0.9', '-0.8', '-0.7', '-0.6', '-0.5', '-0.4', '-0.3', '-0.2', '-0.1', '0.0', '0.1', '0.2']
</snippet></ROW><ROW><id>20089808</id><snippet>decimal</snippet></ROW><ROW><id>20089904</id><snippet>import os
import os.path

new_list = []

for each in texture_filename_list:
    file_name = os.path.basename(each)
    new_list.append(file_name)
</snippet></ROW><ROW><id>20089904</id><snippet>['safaa_amir_clean_body_dif.jpg', 'safaa_amir_body_nrlMap.tif']
</snippet></ROW><ROW><id>20089904</id><snippet>import os
import os.path

new_list = []

for each in texture_filename_list:
    file_name = os.path.basename(each)
    stripped_file_name = os.path.splitext(file_name)[0]
    new_list.append(stripped_file_name)
</snippet></ROW><ROW><id>20090049</id><snippet>&gt;&gt;&gt; s = '"It "does "not "make "sense", Well, "Does "it"'
&gt;&gt;&gt; re.sub(r'\b\s*"(?!,|$)', '" "', s)
'"It" "does" "not" "make" "sense", Well, "Does" "it"'
</snippet></ROW><ROW><id>20090049</id><snippet>\b      # Start the match at the end of a "word"
\s*     # Match optional whitespace
"       # Match a quote
(?!,|$) # unless it's followed by a comma or end of string
</snippet></ROW><ROW><id>20090680</id><snippet>&gt;&gt;&gt; with open('FILEPATH') as f:
...     lst = [[int(n)] for n in f.read().split()]
... 
&gt;&gt;&gt; lst
[[299], [314], [427]]
</snippet></ROW><ROW><id>20090680</id><snippet>str.split</snippet></ROW><ROW><id>20090680</id><snippet>&gt;&gt;&gt; 'a\t\tb\nc  d'.split()
['a', 'b', 'c', 'd']
&gt;&gt;&gt; 'a\t\tb\nc  d'.split(' ')
['a\t\tb\nc', '', 'd']
</snippet></ROW><ROW><id>20090680</id><snippet>list</snippet></ROW><ROW><id>20090680</id><snippet>list</snippet></ROW><ROW><id>20090683</id><snippet>sys.path</snippet></ROW><ROW><id>20090683</id><snippet>constants</snippet></ROW><ROW><id>20090836</id><snippet>from boto.dynamodb2.table import Table
photos = Table('photos') # photos is a table
def get_image_urls():
    # photo_id is rangekey and type is hashkey
    allphotos = photos.query(type__eq = 'Homedesign', photo_id__gte = 1)

    print allphotos

    for eachphoto in allphotos:
        print eachphoto['photo']
</snippet></ROW><ROW><id>20091524</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>20091524</id><snippet>and</snippet></ROW><ROW><id>20091661</id><snippet>add_array</snippet></ROW><ROW><id>20091661</id><snippet>from tvtk.api import tvtk, write_data
import numpy as np

data = np.random.random((3,3,3))
data2 = np.random.random((3,3,3))

i = tvtk.ImageData(spacing=(1, 1, 1), origin=(0, 0, 0))
i.point_data.scalars = data.ravel()
i.point_data.scalars.name = 'scalars'
i.dimensions = data.shape
# add second point data field
i.point_data.add_array(data2.ravel())
i.point_data.get_array(1).name = 'field2'
i.point_data.update()

write_data(i, 'vtktest.vtk')
</snippet></ROW><ROW><id>20091711</id><snippet>sys.path</snippet></ROW><ROW><id>20091711</id><snippet>sys.path</snippet></ROW><ROW><id>20091711</id><snippet>pyzmq</snippet></ROW><ROW><id>20091711</id><snippet>sys.path</snippet></ROW><ROW><id>20091711</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20091711</id><snippet>sys.path</snippet></ROW><ROW><id>20091820</id><snippet>iptables</snippet></ROW><ROW><id>20091820</id><snippet>sudo iptables -F</snippet></ROW><ROW><id>20091907</id><snippet>counter</snippet></ROW><ROW><id>20091907</id><snippet>Counter</snippet></ROW><ROW><id>20091907</id><snippet>dict</snippet></ROW><ROW><id>20091907</id><snippet>json.loads</snippet></ROW><ROW><id>20091907</id><snippet>Counter</snippet></ROW><ROW><id>20091907</id><snippet>Counter</snippet></ROW><ROW><id>20091907</id><snippet>Counter</snippet></ROW><ROW><id>20091907</id><snippet>counter = Counter(json.loads(counterJson))
counter.update(Counter(["a", "e"]))
print counter
</snippet></ROW><ROW><id>20091907</id><snippet>Counter({u'a': 4, u'b': 1, 'e': 1})
</snippet></ROW><ROW><id>20092050</id><snippet>TypeError: unorderable types: tuple() &gt; list()</snippet></ROW><ROW><id>20092680</id><snippet>groupby</snippet></ROW><ROW><id>20092680</id><snippet>from itertools import groupby
with open('Input.txt') as fin:
    lines = sorted([line.rstrip() for line in fin])
for item, grp in groupby(lines, key = lambda x:x.split(".")[0]):
    print item, list(grp)
</snippet></ROW><ROW><id>20092680</id><snippet>AFJ ['AFJ.SPZ.IR.3    46.812  38.433', 'AFJ.SPZ.IR.8    46.84   38.463', 'AFJ.SPZ.IR.8    46.84   38.463']
AKL ['AKL.SPZ.IR.11   46.691  38.399', 'AKL.SPZ.IR.11   46.691  38.399', 'AKL.SPZ.IR.12   46.722  38.407', 'AKL.SPZ.IR.12   46.722  38.407', 'AKL.SPZ.IR.13   46.654  38.404', 'AKL.SPZ.IR.25   46.699  38.442', 'AKL.SPZ.IR.3    46.812  38.433', 'AKL.SPZ.IR.8    46.84   38.463']
ALA ['ALA.SPZ.IR.3    46.812  38.433']
ANAR ['ANAR.BHZ.IR.8   46.84   38.463']
ANJ ['ANJ.SPZ.IR.13   46.654  38.404', 'ANJ.SPZ.IR.18   46.662  38.399', 'ANJ.SPZ.IR.3    46.812  38.433']
BST ['BST.SPZ.IR.1    46.732  38.457', 'BST.SPZ.IR.10   46.707  38.448', 'BST.SPZ.IR.11   46.691  38.399', 'BST.SPZ.IR.12   46.722  38.407']
</snippet></ROW><ROW><id>20092807</id><snippet>Message.select().where(Message.somecolumn &gt;&gt; None)
</snippet></ROW><ROW><id>20092865</id><snippet>dict.get()</snippet></ROW><ROW><id>20092865</id><snippet>if dict.get('mykey'):
</snippet></ROW><ROW><id>20092865</id><snippet>None</snippet></ROW><ROW><id>20092865</id><snippet>False</snippet></ROW><ROW><id>20092865</id><snippet>if dict.get('mykey', False):
</snippet></ROW><ROW><id>20092870</id><snippet>OpenGLWidget</snippet></ROW><ROW><id>20092870</id><snippet>class OpenGLWidget(QtOpenGL.QGLWidget):
    def __init__(self, parent=None):
        self.parent = parent
        self.camera = camera_view.View()
</snippet></ROW><ROW><id>20092870</id><snippet>OpenGL</snippet></ROW><ROW><id>20092870</id><snippet>GL_MODELVIEW_MATRIX</snippet></ROW><ROW><id>20092870</id><snippet>self.camera = camera_view.View()</snippet></ROW><ROW><id>20092870</id><snippet>OpenGL</snippet></ROW><ROW><id>20092870</id><snippet>def initializeGL(self):
    #    background color
    glClearColor(0,0.0,0,1)

    glEnable(GL_DEPTH_TEST)
    glShadeModel(GL_SMOOTH) 
    glEnable(GL_NORMALIZE)
    glEnable(GL_CULL_FACE)

    #    lights settings
    glEnable( GL_LIGHTING )
    glLightModeli( GL_LIGHT_MODEL_TWO_SIDE, 0 )
    glEnable( GL_LIGHT0 )
    light_pos_0 = np.array([0.0, 10.0, 10.0])
    glLightfv( GL_LIGHT0, GL_POSITION, light_pos_0 )
    glLightfv( GL_LIGHT0, GL_AMBIENT, [0.8, 0.8, 0.8, 1] )
    glLightfv( GL_LIGHT0, GL_DIFFUSE, [1, 1, 1, 0] )
    glLightfv( GL_LIGHT0, GL_SPECULAR, [1, 1, 1, 0] )

    #    camera
    self.camera = camera_view.View()
    #    viewing
    self.geometry()
</snippet></ROW><ROW><id>20093222</id><snippet>sys.version</snippet></ROW><ROW><id>20093222</id><snippet>platform.python_compiler()</snippet></ROW><ROW><id>20093222</id><snippet>Python 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import platform
&gt;&gt;&gt; sys.version
'3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit (AMD64)]'
&gt;&gt;&gt; platform.python_compiler()
'MSC v.1600 64 bit (AMD64)'
&gt;&gt;&gt; ^Z
</snippet></ROW><ROW><id>20093222</id><snippet>C:\&gt;cl
Microsoft (R) C/C++ Optimizing Compiler Version 16.00.40219.01 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

usage: cl [ option... ] filename... [ /link linkoption... ]
</snippet></ROW><ROW><id>20093222</id><snippet>C:\&gt;dumpbin /imports c:\windows\system32\python33.dll | findstr /i dll
Dump of file c:\windows\system32\python33.dll
File Type: DLL
    KERNEL32.dll
    USER32.dll
    ADVAPI32.dll
    SHELL32.dll
    MSVCR100.dll
</snippet></ROW><ROW><id>20093385</id><snippet>@celery.task(rate_limit='5/m')
def the_task(login, password):
    opener = create_opener(login, password)
    …
</snippet></ROW><ROW><id>20093385</id><snippet>credentials = [
    ('login1', 'password1'),
    ('login2', 'password2'),
    ('login3', 'password3'),
]

for login, password in credentials:
    the_task.delay(login, password)
</snippet></ROW><ROW><id>20093488</id><snippet>call('skype')</snippet></ROW><ROW><id>20093488</id><snippet>Popen()</snippet></ROW><ROW><id>20093488</id><snippet>call()</snippet></ROW><ROW><id>20093488</id><snippet>Popen()</snippet></ROW><ROW><id>20093488</id><snippet>call()</snippet></ROW><ROW><id>20093488</id><snippet>call('skype')</snippet></ROW><ROW><id>20093488</id><snippet>Popen('skype')</snippet></ROW><ROW><id>20093580</id><snippet>query = 'select blah from table where blah = blahblah and ({})'.format(
    ' or '.join(['text like %s'] * len(text_list)))
</snippet></ROW><ROW><id>20093580</id><snippet>text_list</snippet></ROW><ROW><id>20093580</id><snippet>.execute()</snippet></ROW><ROW><id>20093580</id><snippet>cur.execute(query, text_list)
</snippet></ROW><ROW><id>20093580</id><snippet>&gt;&gt;&gt; text_list = ['help', 'me', 'solve', 'this', 'problem']
&gt;&gt;&gt; 'select blah from table where blah = blahblah and ({})'.format(
...     ' or '.join(['text like %s'] * len(text_list)))
'select blah from table where blah = blahblah and (text like %s or text like %s or text like %s or text like %s or text like %s)'
</snippet></ROW><ROW><id>20093620</id><snippet>git cherry-pick</snippet></ROW><ROW><id>20093888</id><snippet>data['A'] = data['A'].astype(str) 
</snippet></ROW><ROW><id>20093888</id><snippet>data['A'].replace(str(1),'s')
</snippet></ROW><ROW><id>20094262</id><snippet>class decorator(object):
    def __init__(self, functor):
        self.functor = functor

        #  lets copy some key attributes from the original function
        self.__name__ = functor.__name__
        self.__doc__ = functor.__doc__

    def __call__(self, *args, **kwargs):
        return self.functor(*args, **kwargs)

    def __repr__(self):
        return '&lt;function %s created by ...&gt;' % self.functor.__name__


@decorator
def f():
    return 'spam'


print f()  # spam
print repr(f)  # &lt;function hehe created by ...&gt;
</snippet></ROW><ROW><id>20094560</id><snippet>extend</snippet></ROW><ROW><id>20094560</id><snippet>&gt;&gt;&gt; [a + b[0:i] for i in range(len(b)+1)]
[[1, 2], [1, 2, 3], [1, 2, 3, 4]]
</snippet></ROW><ROW><id>20094628</id><snippet>object_hook</snippet></ROW><ROW><id>20094628</id><snippet>import json

class JSONObject:
  def __init__( self, dict ):
      vars(self).update( dict )

#this is valid json string
data='{"channel":{"lastBuild":"2013-11-12", "component":["test1", "test2"]}}'

jsonobject = json.loads( data, object_hook= JSONObject)

print( jsonobject.channel.component[0]  )
print( jsonobject.channel.lastBuild  )
</snippet></ROW><ROW><id>20094628</id><snippet>__init__</snippet></ROW><ROW><id>20094666</id><snippet>&gt;&gt;&gt; demo = {i: [] for i in range(3)}
&gt;&gt;&gt; demo[0] is demo[1]
False
</snippet></ROW><ROW><id>20094666</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>20094666</id><snippet>&gt;&gt;&gt; demo = dict.fromkeys(range(3), [])
&gt;&gt;&gt; demo[0] is demo[1]
True
</snippet></ROW><ROW><id>20094666</id><snippet>attrs</snippet></ROW><ROW><id>20094666</id><snippet>Select2Widget()</snippet></ROW><ROW><id>20095047</id><snippet>from subprocess import check_output

build = check_output(['\\build.rb', '-p', 'test'])
with open('out1.txt', 'w') as out1:
    out1.write(build)

release = check_output(['\\newRelease.rb', '-l', 'bat'])
with open('out2.txt', 'w') as out2:
    out2.write(release)
</snippet></ROW><ROW><id>20095270</id><snippet>int()</snippet></ROW><ROW><id>20095270</id><snippet>decimal</snippet></ROW><ROW><id>20095270</id><snippet>.isdigit()</snippet></ROW><ROW><id>20095270</id><snippet>decimal = input()
if decimal.isdigit():
    decimal = int(decimal)
</snippet></ROW><ROW><id>20095270</id><snippet>ValueError</snippet></ROW><ROW><id>20095270</id><snippet>while True:
    print("Type a decimal number you wish to convert:")
    try:
        decimal = int(input())
    except ValueError:
        print("Please enter a number.")
        continue

    binary = bin(decimal)[2:]
</snippet></ROW><ROW><id>20095270</id><snippet>bin()</snippet></ROW><ROW><id>20095270</id><snippet>0b</snippet></ROW><ROW><id>20095270</id><snippet>format()</snippet></ROW><ROW><id>20095270</id><snippet>'b'</snippet></ROW><ROW><id>20095270</id><snippet>&gt;&gt;&gt; format(10, 'b')
'1010'
</snippet></ROW><ROW><id>20095270</id><snippet>format()</snippet></ROW><ROW><id>20095270</id><snippet>&gt;&gt;&gt; format(10, '08b')
'00001010'
</snippet></ROW><ROW><id>20095884</id><snippet>utf8_url = 'Escola Superior de Ci\xc3\xaancias Empresariais (Set\xc3\xbabal)'
percent_url = urllib2.quote(utf8_url)
</snippet></ROW><ROW><id>20095892</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>20095892</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.unhexlify("257612236efae809c23330ab67cf61f73aec938503f3ce126c34c6a32059f5f0")
b'%v\x12#n\xfa\xe8\t\xc230\xabg\xcfa\xf7:\xec\x93\x85\x03\xf3\xce\x12l4\xc6\xa3 Y\xf5\xf0'
</snippet></ROW><ROW><id>20096044</id><snippet>import argparse

# create the top-level parser
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', action='store_true', help='foo help')
subparsers = parser.add_subparsers(help='sub-command help')

# create the parser for the "a" command
parser_a = subparsers.add_parser('a', help='a help')
parser_a.add_argument('bar', type=int, help='bar help')

# create the parser for the "b" command
parser_b = subparsers.add_parser('b', help='b help')
parser_b.add_argument('--baz', choices='XYZ', help='baz help')
# print main help
print(parser.format_help())

# retrieve subparsers from parser
subparsers_actions = [
    action for action in parser._actions 
    if isinstance(action, argparse._SubParsersAction)]
# there will probably only be one subparser_action,
# but better save than sorry
for subparsers_action in subparsers_actions:
    # get all subparsers and print help
    for choice, subparser in subparsers_action.choices.items():
        print("Subparser '{}'".format(choice))
        print(subparser.format_help())
</snippet></ROW><ROW><id>20096044</id><snippet>-h/--help</snippet></ROW><ROW><id>20096057</id><snippet>boundbox = list(poly.exterior.coords)
</snippet></ROW><ROW><id>20096135</id><snippet>with open("/home/xmp/distribution/sites.conf", "rt") as txtfile:
    for line in txtfile:
        fields = line.split(':')
        print fields[0]
</snippet></ROW><ROW><id>20096342</id><snippet>time_start</snippet></ROW><ROW><id>20096342</id><snippet>kombu.five.monotonic</snippet></ROW><ROW><id>20096342</id><snippet>time_start</snippet></ROW><ROW><id>20096342</id><snippet>&gt;&gt; from datetime import datetime
&gt;&gt; from time import time
&gt;&gt; import kombu.five
&gt;&gt; datetime.fromtimestamp(time() - (kombu.five.monotonic() - 9636801.218162088))
datetime.datetime(2013, 11, 20, 9, 55, 56, 193768)
</snippet></ROW><ROW><id>20096494</id><snippet>parse_dates : boolean, list of ints or names, list of lists, or dict
keep_date_col : boolean, default False
date_parser : function
</snippet></ROW><ROW><id>20096494</id><snippet>true_values : list    Values to consider as True
false_values : list Values to consider as False
</snippet></ROW><ROW><id>20096501</id><snippet>request.FILES</snippet></ROW><ROW><id>20096501</id><snippet>UploadedFile</snippet></ROW><ROW><id>20096501</id><snippet>File</snippet></ROW><ROW><id>20096543</id><snippet>importlib.import_module</snippet></ROW><ROW><id>20096543</id><snippet>import importlib

module = importlib.import_module(var1)
</snippet></ROW><ROW><id>20096543</id><snippet>__import__()</snippet></ROW><ROW><id>20096543</id><snippet>&gt;&gt;&gt; sys = __import__("sys")
&gt;&gt;&gt; sys
&lt;module 'sys' (built-in)&gt;
</snippet></ROW><ROW><id>20096543</id><snippet>__import__()</snippet></ROW><ROW><id>20096826</id><snippet>def functionname():</snippet></ROW><ROW><id>20096826</id><snippet>functionname = functionobject(function code)</snippet></ROW><ROW><id>20096826</id><snippet>functionname</snippet></ROW><ROW><id>20096826</id><snippet>functionname</snippet></ROW><ROW><id>20096826</id><snippet>def spam():
    baz()

def foo():
    def bar():
        print "Hello world!"
    return bar

baz = foo()
spam()
</snippet></ROW><ROW><id>20096826</id><snippet>spam()</snippet></ROW><ROW><id>20096826</id><snippet>baz</snippet></ROW><ROW><id>20096826</id><snippet>baz</snippet></ROW><ROW><id>20096826</id><snippet>foo()</snippet></ROW><ROW><id>20096826</id><snippet>spam()</snippet></ROW><ROW><id>20096826</id><snippet>spam()</snippet></ROW><ROW><id>20096826</id><snippet>foo</snippet></ROW><ROW><id>20096826</id><snippet>bar()</snippet></ROW><ROW><id>20096826</id><snippet>bar</snippet></ROW><ROW><id>20096826</id><snippet>foo</snippet></ROW><ROW><id>20096827</id><snippet>In [44]: df.gdp = df.gdp.shift(-1)

In [45]: df
Out[45]: 
   y  gdp  cap
0  1    3    5
1  2    7    9
2  8    4    2
3  3    7    7
4  6  NaN    7

In [46]: df[:-1]                                                                                                                                                                                                                                                                                                               
Out[46]: 
   y  gdp  cap
0  1    3    5
1  2    7    9
2  8    4    2
3  3    7    7
</snippet></ROW><ROW><id>20096972</id><snippet>namedtuple()</snippet></ROW><ROW><id>20096972</id><snippet>SomeRowResult = namedtuple('SomeRowResult', 'var1 var2 var3')
</snippet></ROW><ROW><id>20096972</id><snippet>SomeRowResult</snippet></ROW><ROW><id>20096972</id><snippet>tuple</snippet></ROW><ROW><id>20096972</id><snippet>for result in results:
    result = SomeRowResult(table1.col1, table2.col1, table3.col1)
</snippet></ROW><ROW><id>20096972</id><snippet>all_results = []
for result in results:
    result = SomeRowResult(table1.col1, table2.col1, table3.col1)
    all_results.append(result)
</snippet></ROW><ROW><id>20097189</id><snippet>for table in my_list:
    if string in table.Name:
        #do stuff
</snippet></ROW><ROW><id>20097189</id><snippet>if string in [table.Name for table in my_list]:
    #do interesting stuff
</snippet></ROW><ROW><id>20097189</id><snippet>if string in (table.Name for table in my_list):
</snippet></ROW><ROW><id>20097189</id><snippet>names = map(lambda table: table.Name, my_list)
if string in names:
    #do amazing stuff!
</snippet></ROW><ROW><id>20097189</id><snippet>&gt;&gt;&gt; class test():
    def __init__(self, name):
        self.Name = name


&gt;&gt;&gt; my_list = [test(n) for n in name]
&gt;&gt;&gt; l = list(map(lambda table: table.Name, my_list)) #converted to list, it's printable.
&gt;&gt;&gt; l
['a', 'b', 'c']
</snippet></ROW><ROW><id>20097189</id><snippet>str</snippet></ROW><ROW><id>20097189</id><snippet>list</snippet></ROW><ROW><id>20097397</id><snippet>import urllib2
from bs4 import BeautifulSoup

def filter_function(tag):
    return ((tag.name=='h3' and tag.parent.name=='td' and '2' in
             [tag.parent[attrib] for attrib in tag.parent.attrs.keys()]) or
            (tag.name == 'p' and tag.parent.name=='td' and '2' in
             [tag.parent[attrib] for attrib in tag.parent.attrs.keys()]))

our_url = 'http://www.teauction.com/industry/buyer/coimbuyera-z.asp'

our_page = urllib2.urlopen(our_url).read()

our_soup = BeautifulSoup(our_page)

nodes_we_want = our_soup.find_all(filter_function)

text_we_want = [node.text for node in nodes_we_want]
</snippet></ROW><ROW><id>20097397</id><snippet>our_soup.find_all</snippet></ROW><ROW><id>20097397</id><snippet>td</snippet></ROW><ROW><id>20097397</id><snippet>colspan</snippet></ROW><ROW><id>20097397</id><snippet>2</snippet></ROW><ROW><id>20097397</id><snippet>text_we_want</snippet></ROW><ROW><id>20097397</id><snippet>text_we_want = [(nodes_we_want[h].text.strip('\r\n'),
                 nodes_we_want[h+1].text.replace('\r\n              ',''))
                 for h in range(0,len(nodes_we_want)-1,2)]
</snippet></ROW><ROW><id>20097397</id><snippet>text_we_want</snippet></ROW><ROW><id>20097397</id><snippet>text_we_want = ['\t'.join((nodes_we_want[h].text.strip('\r\n'),
                 nodes_we_want[h+1].text.replace('\r\n              ','')))
                 for h in range(0,len(nodes_we_want)-1,2)]
</snippet></ROW><ROW><id>20097415</id><snippet>from collections import defaultdict 

tmp = defaultdict(lambda: {'value': 0})
for d in data:
    tmp[d["nid"], d["cid"]]['count'] = d["count"]
    tmp[d["nid"], d["cid"]]['value'] += d["value"]

new_data = [{'nid': nid, 'cid': cid, 'count': v['count'], 'value': v['value']} 
            for (nid, cid), v in tmp.iteritems()]
</snippet></ROW><ROW><id>20097415</id><snippet>data</snippet></ROW><ROW><id>20097415</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>20097426</id><snippet>self.A.append(Pos(x,y))
</snippet></ROW><ROW><id>20097426</id><snippet>self.A1.append(Pos(x,y))
</snippet></ROW><ROW><id>20097426</id><snippet>d = "A1 contains: " + str(self.A)
</snippet></ROW><ROW><id>20097426</id><snippet>str(self)</snippet></ROW><ROW><id>20097426</id><snippet>repr(self)</snippet></ROW><ROW><id>20097426</id><snippet>Pos</snippet></ROW><ROW><id>20097479</id><snippet>.plot()</snippet></ROW><ROW><id>20097479</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans   = (20, 35, 30, 35, 27)
womenMeans = (25, 32, 34, 20, 25)
menStd     = (2, 3, 4, 1, 2)
womenStd   = (3, 5, 2, 3, 3)
ind = np.arange(N)    # the x locations for the groups
width = 0.35       # the width of the bars: can also be len(x) sequence

fig, ax = plt.subplots()

ax.bar(ind, menMeans,   width, color='r', yerr=womenStd, 
             align='center', label='Woman')

ax.bar(ind, womenMeans, width, color='y', yerr=menStd,
             bottom=menMeans, align='center', label='Men')

ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind)
ax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))
ax.set_yticks(np.arange(0,81,10))

ax.plot(np.random.randint(20,50,5), 'o-', lw=2, color='k', label='Line')

ax.legend()
</snippet></ROW><ROW><id>20097491</id><snippet>__main__</snippet></ROW><ROW><id>20097491</id><snippet>python -c 'from package.__main__ import all; all()'
</snippet></ROW><ROW><id>20097491</id><snippet>$ mkdir testpackage
$ touch testpackage/__init__.py
$ cat &lt;&lt; EOF &gt; testpackage/__main__.py
&gt; def all():
&gt;     print "Hello world!"
&gt; if __name__ == '__main__':
&gt;     all()
&gt; EOF
$ python testpackage
Hello world!
$ python -c 'from testpackage.__main__ import all; all()'
Hello world!
</snippet></ROW><ROW><id>20097650</id><snippet>pip uninstall celery 
pip install celery==3.1.1
</snippet></ROW><ROW><id>20097820</id><snippet>print</snippet></ROW><ROW><id>20097820</id><snippet>&gt;&gt;&gt; print "Hello, World! My rank is: " + str(1)
  File "&lt;stdin&gt;", line 1
    print "Hello, World! My rank is: " + str(1)
                                     ^
SyntaxError: invalid syntax
&gt;&gt;&gt; print("Hello, World! My rank is: " + str(1))
Hello, World! My rank is: 1
</snippet></ROW><ROW><id>20097885</id><snippet>class IgnoredWord(models.Model):
    word = models.CharField(max_length=200)
</snippet></ROW><ROW><id>20097885</id><snippet>if not IgnoredWord.objects.filter(word=current_word).exists():
</snippet></ROW><ROW><id>20097899</id><snippet>findPoint</snippet></ROW><ROW><id>20097899</id><snippet>None</snippet></ROW><ROW><id>20097899</id><snippet>getPoint</snippet></ROW><ROW><id>20097978</id><snippet>scheme, netloc, path = parsed_url[:3]
</snippet></ROW><ROW><id>20097978</id><snippet>_</snippet></ROW><ROW><id>20097978</id><snippet>scheme, netloc, path, _, _, _ = parsed_url
</snippet></ROW><ROW><id>20098065</id><snippet>fig.add_subplot</snippet></ROW><ROW><id>20098065</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure(figsize=(6, 8))

# Axes that share the x-axis
ax = fig.add_subplot(4, 1, 1)
axes = [ax] + [fig.add_subplot(4, 1, i, sharex=ax) for i in range(2, 4)]

# The bottom independent axes
axes.append(fig.add_subplot(4, 1, 4))

# Let's hide the tick labels for all but the last shared-x axes
for ax in axes[:2]:
    plt.setp(ax.get_xticklabels(), visible=False)

# And plot on  the first subplot just to demonstrate that the axes are shared
axes[0].plot(range(21), color='lightblue', lw=3)

plt.show()
</snippet></ROW><ROW><id>20098521</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        self.text = wx.TextCtrl(self)
        self.text.Bind(wx.EVT_TEXT, self.onText)

    #----------------------------------------------------------------------
    def onText(self, event):
        """
        """
        print self.text.GetValue()


########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Events!")
        panel = MyPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>20098523</id><snippet>for line in input_f:

    # find the positions of As in the line
    positions = [n for n, letter in enumerate(line, 1) if letter == 'a']

    # Create list of strings of the form "x:y"
    pairs = [("%d:%d" % (i, n)) for i, n in enumerate(positions, 1)]

    # Join all those strings into a single space-separated string
    all_pairs = ' '.join(pairs)

    # Write the string to the file, with a + sign at the beginning
    # and a newline at the end
    output_f.write("+ %s\n" % all_pairs)
</snippet></ROW><ROW><id>20098714</id><snippet>for key in sorted(finaldict.keys()):
    writer.writerow([key] + finaldict[key])
</snippet></ROW><ROW><id>20098967</id><snippet>class Random:
    def __init__(self):
        self.num = 20
        self.j = 1
    def randomBits(self):
        self.j = self.num * self.j
        self.j = float("0.%s" % int(self.j))
        return self.j
    def randrange(self,x, y):
         self.randomBits()
         return int(self.j * (y - x) + x)
</snippet></ROW><ROW><id>20098967</id><snippet>&gt;&gt;&gt; random = Random()
&gt;&gt;&gt; random.randrange(1,10**50)
20000000000000001525953968218377400658992994189312
</snippet></ROW><ROW><id>20098986</id><snippet>get_or_create</snippet></ROW><ROW><id>20098986</id><snippet>def save(self, **kwargs):
    settings, created = UserSettings.objects.get_or_create(
        user_id=self.pk
    )
    super(UserProfile, self).save(**kwargs)
</snippet></ROW><ROW><id>20099000</id><snippet>for i in self.letterWord[i:i+1]:
    if i == letter:
        self.binaryWord[i]=1
</snippet></ROW><ROW><id>20099000</id><snippet>i</snippet></ROW><ROW><id>20099000</id><snippet>self.letterWord[i:i+1]</snippet></ROW><ROW><id>20099000</id><snippet>i</snippet></ROW><ROW><id>20099000</id><snippet>for i, ltr in enumerate(self.letterWord):
    if ltr == letter:
        self.binaryWord[i] = 1
</snippet></ROW><ROW><id>20099000</id><snippet>self.binaryWord</snippet></ROW><ROW><id>20099000</id><snippet>self.binaryWord = [ 1 if ltr == letter else 0 for ltr in self.letterWord ]
</snippet></ROW><ROW><id>20099055</id><snippet>DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>20099055</id><snippet>self.field_name</snippet></ROW><ROW><id>20099055</id><snippet>self.users</snippet></ROW><ROW><id>20099055</id><snippet>self.fields</snippet></ROW><ROW><id>20099055</id><snippet>super</snippet></ROW><ROW><id>20099055</id><snippet>__init__</snippet></ROW><ROW><id>20099055</id><snippet>self.base_fields</snippet></ROW><ROW><id>20099089</id><snippet>from sqlalchemy.orm.attributes import QueryableAttribute
def getattr_does_emit_sql(model, attr_name):
    return (attr_name not in model.__dict__ 
        and hasattr(type(model), attr_name
        and isinstance(getattr(type(model), attr_name), QueryableAttribute)
    )
</snippet></ROW><ROW><id>20099203</id><snippet>&lt;</snippet></ROW><ROW><id>20099203</id><snippet>&amp;</snippet></ROW><ROW><id>20099203</id><snippet>if how_many &lt; 1:
</snippet></ROW><ROW><id>20099203</id><snippet>&lt;</snippet></ROW><ROW><id>20099203</id><snippet>&lt;</snippet></ROW><ROW><id>20099203</id><snippet>&amp;</snippet></ROW><ROW><id>20099203</id><snippet>&amp;</snippet></ROW><ROW><id>20099390</id><snippet>fig</snippet></ROW><ROW><id>20099390</id><snippet>subplot</snippet></ROW><ROW><id>20099390</id><snippet>ax</snippet></ROW><ROW><id>20099390</id><snippet>subplots</snippet></ROW><ROW><id>20099390</id><snippet>np.ndarray</snippet></ROW><ROW><id>20099390</id><snippet>ax[foo]</snippet></ROW><ROW><id>20099390</id><snippet>diff  = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
comp = ["foo", "bar", "baz"]
fig, ax = plt.subplots(3, 1)
for foo in range(0, len(diff)):
        x = [diff[foo]]
        name = comp
        color = ['0.1', '0.2', '0.3']
        label = ['1000000', '1200000', '1400000']
        y = zip(*x)
        pos = np.arange(len(x))
        width = 1. / (1 + len(x))
        for idx, (serie, color,label) in enumerate(zip(y, color,label)):
                ax[foo].bar(pos + idx * width, serie, width, color=color,label=label)
        fig.set_size_inches(28.5, 10.5)
        ax[foo].set_xticks(pos + 1.5*width)
        plt.ylabel(name[foo])
        ax[foo].set_xticklabels(comp)
        ax[foo].legend()
        plt.gray()
fig.savefig("file" + '.jpg', bbox_inches='tight', pad_inches=0.5, dpi=100)
plt.clf()
</snippet></ROW><ROW><id>20099748</id><snippet>BeautifulSoap</snippet></ROW><ROW><id>20099748</id><snippet>urllib</snippet></ROW><ROW><id>20099748</id><snippet>import urllib
from BeautifulSoup import *

url = "http://www.domain.com/page/path?page="
count_of_pages = 10

for page in xrange(1, count_of_pages):
    response = urllib.urlopen("%s%d" % (url, page))
    webPage = BeautifulSoup(webFile.read())

    # Parse page with great module BeaurifulSoap
</snippet></ROW><ROW><id>20099748</id><snippet>http://www.fenex.nl/CMS/asynchronousrendering/CrmSearchResultFenexMemberCompanies/CrmSearchResultFenexMemberCompaniesByMemberCriteriaRenderControl.aspx?_=1384960662265&amp;cid=9&amp;pageNr=1&amp;fenexSearchId=-214748364</snippet></ROW><ROW><id>20099748</id><snippet>Ctrl + Shift + J</snippet></ROW><ROW><id>20099748</id><snippet>Network</snippet></ROW><ROW><id>20100098</id><snippet>scikit-learn</snippet></ROW><ROW><id>20100098</id><snippet>int</snippet></ROW><ROW><id>20100098</id><snippet>int</snippet></ROW><ROW><id>20100098</id><snippet>LabelEncoder</snippet></ROW><ROW><id>20100098</id><snippet>import numpy as np
from sklearn.preprocessing import LabelEncoder  
from sklearn.ensemble import RandomForestRegressor

X = np.asarray([('a',1,2),('b',2,3),('a',3,2),('c',1,3)]) 
y = np.asarray([1,2.5,3,4])

# transform 1st column to numbers
X[:, 0] = LabelEncoder().fit_transform(X[:,0]) 

regressor = RandomForestRegressor(n_estimators=150, min_samples_split=1)
regressor.fit(X, y)
print X
print regressor.predict(X)
</snippet></ROW><ROW><id>20100098</id><snippet>[[ 0.  1.  2.]
 [ 1.  2.  3.]
 [ 0.  3.  2.]
 [ 2.  1.  3.]]
[ 1.61333333  2.13666667  2.53333333  2.95333333]
</snippet></ROW><ROW><id>20100098</id><snippet>X</snippet></ROW><ROW><id>20100098</id><snippet>X = X.astype(float)</snippet></ROW><ROW><id>20100127</id><snippet>agg_df = Data.groupby(['id','company']).size()
</snippet></ROW><ROW><id>20100127</id><snippet>unique_zeroth_level = dict(agg_df.index.values).keys()
group_first_vals = [
    agg_df.select(lambda x: x[0]==idx_val, axis=0).head(1).values[0] 
    for idx_val in unique_zeroth_level]
</snippet></ROW><ROW><id>20100127</id><snippet>unstack</snippet></ROW><ROW><id>20100127</id><snippet>agg_df.unstack(level=0).columns.values
</snippet></ROW><ROW><id>20100127</id><snippet>dict</snippet></ROW><ROW><id>20100127</id><snippet>dict(agg_df.index.values).keys()
</snippet></ROW><ROW><id>20100127</id><snippet>(1, 'a')</snippet></ROW><ROW><id>20100127</id><snippet>(2, 'd')</snippet></ROW><ROW><id>20100127</id><snippet>agg_df.ix[[(1, 'a'), (2, 'd')]]
</snippet></ROW><ROW><id>20100175</id><snippet>N</snippet></ROW><ROW><id>20100175</id><snippet>list[0] == 0</snippet></ROW><ROW><id>20100175</id><snippet>list[N-1] == N-1</snippet></ROW><ROW><id>20100175</id><snippet>list[i] == i</snippet></ROW><ROW><id>20100175</id><snippet>O(1)</snippet></ROW><ROW><id>20100175</id><snippet>list[i] &lt; i</snippet></ROW><ROW><id>20100175</id><snippet>list[i] == i</snippet></ROW><ROW><id>20100175</id><snippet>list[i] &gt; i]</snippet></ROW><ROW><id>20100175</id><snippet>O(n)</snippet></ROW><ROW><id>20100175</id><snippet>list[i] == i</snippet></ROW><ROW><id>20100175</id><snippet>O(log n)</snippet></ROW><ROW><id>20100175</id><snippet>O(n)</snippet></ROW><ROW><id>20100202</id><snippet>def intersect(a, b):
    if len(a) &gt; len(b):
        a, b = b, a

    c = set()
    for x in a:
        if x in b:
            c.add(x)
    return c
</snippet></ROW><ROW><id>20100202</id><snippet>return set(x for x in a if x in b)</snippet></ROW><ROW><id>20100251</id><snippet>__init__.py</snippet></ROW><ROW><id>20100251</id><snippet>myfile.py</snippet></ROW><ROW><id>20100251</id><snippet>sys.path</snippet></ROW><ROW><id>20100251</id><snippet>import sys
print(sys.path)
</snippet></ROW><ROW><id>20100251</id><snippet>sys.path</snippet></ROW><ROW><id>20100251</id><snippet>$ python3
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('/all/path/to/Desktop/Python')
&gt;&gt;&gt; import myfile
</snippet></ROW><ROW><id>20100251</id><snippet>$ cd ~/Desktop/Python
$ python3
&gt;&gt;&gt; import myfile
</snippet></ROW><ROW><id>20100293</id><snippet>**kwargs</snippet></ROW><ROW><id>20100293</id><snippet>dest</snippet></ROW><ROW><id>20100400</id><snippet>password = ...</snippet></ROW><ROW><id>20100400</id><snippet>program = ("live")
password = ("Python")
while program ==("live"):
    question=input("What is the password? ")
    if question == password:
        print ("well done")
    if question == ("admin"):
        n_password = input("What is the new password? ")
        password=n_password
        question=input("What is the password? ")
    else:
        question=input("What is the password? ")
</snippet></ROW><ROW><id>20100400</id><snippet>Python</snippet></ROW><ROW><id>20100400</id><snippet>password</snippet></ROW><ROW><id>20100400</id><snippet>input()</snippet></ROW><ROW><id>20100400</id><snippet>program = ("live")
password = ("Python")
while program ==("live"):
    question=input("What is the password? ")
    if question == password:
        print ("well done")
    if question == ("admin"):
        n_password = input("What is the new password? ")
        password=n_password
</snippet></ROW><ROW><id>20100620</id><snippet>&gt;&gt;&gt; tuple(t[0] for t in toy)
('mol1', 'mol2')
</snippet></ROW><ROW><id>20100620</id><snippet>&gt;&gt;&gt; from numpy import vstack
&gt;&gt;&gt; vstack([t[1][:, 0] for t in toy])
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 1]])
</snippet></ROW><ROW><id>20100700</id><snippet>from shapely.geometry import MultiPoint
print MultiPoint(points).bounds
</snippet></ROW><ROW><id>20100715</id><snippet>movieTit = []
movieLink = []

for title in soup.findAll("div", {"class" : "title"}):
    movieTit.append(title.getText())
for a in soup.findAll('a'):
    if 'ploaded' in a.getText():
        movieLink.append(a['href'])

for i in range(0,len(movieTit)/2,2):
    print movieTit[i]
    print movieTit[i+1]
    print movieLink[i]
    print movieLink[i+1]
</snippet></ROW><ROW><id>20100868</id><snippet>N</snippet></ROW><ROW><id>20100868</id><snippet>mean</snippet></ROW><ROW><id>20100868</id><snippet>np.mean(a[:4])</snippet></ROW><ROW><id>20100868</id><snippet>import numpy as np
x = np.arange(10)
print x
print 'Mean of first 4 items in x', x[:4].mean()
</snippet></ROW><ROW><id>20100868</id><snippet>y = x[:4]</snippet></ROW><ROW><id>20100868</id><snippet>x</snippet></ROW><ROW><id>20100909</id><snippet>rates.sub(treas.iloc[:,0],axis=0).dropna()
</snippet></ROW><ROW><id>20100909</id><snippet>rates.sub(treas.squeeze(),axis=0).dropna()
</snippet></ROW><ROW><id>20100918</id><snippet>            zfiledata = zfile.open(name)
            print("start for file ", name)
            with gzip.open(zfiledata,'r') as gzfile:
                print("done opening")
                filecontent = gzfile.read()
                print("done reading")
                print(filecontent)  
</snippet></ROW><ROW><id>20100918</id><snippet>            print("start for file ", name)
            with gzip.open(name,'rb') as gzfile:
                print("done opening")
                filecontent = gzfile.read()
                print("done reading")
                print(filecontent)  
</snippet></ROW><ROW><id>20100918</id><snippet>done reading</snippet></ROW><ROW><id>20100918</id><snippet>filecontent</snippet></ROW><ROW><id>20100918</id><snippet>print len(filecontent)</snippet></ROW><ROW><id>20100918</id><snippet>def parseSTS(afile):
    import zipfile
    import zlib
    import gzip
    import io
    with zipfile.ZipFile(afile, 'r') as archive:
        for name in archive.namelist():
            if name.endswith('.gz'):
                    bfn = archive.read(name)
                    bfi = io.BytesIO(bfn)
                    g = gzip.GzipFile(fileobj=bfi,mode='rb')
                    qqq = g.read()
                    print qqq

parseSTS('t.zip')
</snippet></ROW><ROW><id>20101112</id><snippet>tablevalues</snippet></ROW><ROW><id>20101112</id><snippet>from matplotlib import colors

cmap1 = colors.ListedColormap(['b', 'g', 'r', 'c','m','y','w', 'b','g'])
bounds=[0,11,18,26,31,61,91,501,701,901]
norm = colors.BoundaryNorm(bounds, cmap1.N)
plt.table(cellText=np.int16(table_vals),
                  rowLabels=rows,
                  cellLoc='center',
                  cellColours= cmap1(norm(table_vals)),
                  loc='bottom')
</snippet></ROW><ROW><id>20101112</id><snippet>tablevalues</snippet></ROW><ROW><id>20101112</id><snippet>range(0,11)</snippet></ROW><ROW><id>20101112</id><snippet>blue</snippet></ROW><ROW><id>20101112</id><snippet>range(11,18)</snippet></ROW><ROW><id>20101112</id><snippet>green</snippet></ROW><ROW><id>20101224</id><snippet>import pygame
</snippet></ROW><ROW><id>20101270</id><snippet>*args</snippet></ROW><ROW><id>20101270</id><snippet>data = ((1,'Tim'),(4,'Struppi'),(5,'Nami'),(6,'Luffy'))
object_list = [ CharInStageList(*x) for x in data ]
</snippet></ROW><ROW><id>20101270</id><snippet>object_dict = dict( (y, CharInStageList(x,y)) for x,y in data )
</snippet></ROW><ROW><id>20101270</id><snippet>CharInStageList</snippet></ROW><ROW><id>20101270</id><snippet>CharInStateList</snippet></ROW><ROW><id>20101270</id><snippet># Your former CharInStageList
class Character(object):
    def __init__(self, charid, charname) :
        self.charid = charid
        self.charname = char name

class OnStageCharacters(object):
    def __init__(self):
        self.characters = dict()

    # Index on-stage characters using their charid
    def add(self, character):
        self.characters[character.charid] = character

on_stage = OnStageCharacters()
for id, name in data:
    on_stage.add( Character(id, name) )
</snippet></ROW><ROW><id>20101387</id><snippet>{% include 'autocomplete_light/static.html' %}</snippet></ROW><ROW><id>20101424</id><snippet>dict.get()</snippet></ROW><ROW><id>20101424</id><snippet>item.append(d[k].get('v1', ''))
</snippet></ROW><ROW><id>20101424</id><snippet>d[k].get('v1', '')</snippet></ROW><ROW><id>20101424</id><snippet>'v1'</snippet></ROW><ROW><id>20101424</id><snippet>''</snippet></ROW><ROW><id>20101424</id><snippet>list.extend()</snippet></ROW><ROW><id>20101424</id><snippet>item.extend(d[k].get(key, '') for key in ('v1', 'v2', 'e', 'x'))
</snippet></ROW><ROW><id>20101780</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.Graph()

In [3]: G.add_edge(1,2,weight=1)

In [4]: G.add_edge(2,3,weight=0.25)

In [5]: H = nx.Graph([(u,v,d) for (u,v,d) in  G.edges(data=True) if d['weight']&gt;0.5])

In [6]: H.edges()
Out[6]: [(1, 2)]

In [7]: G.remove_edges_from([(u,v,d) for (u,v,d) in  G.edges(data=True) if d['weight']&lt;0.5])

In [8]: G.edges()
Out[8]: [(1, 2)]
</snippet></ROW><ROW><id>20101924</id><snippet>EnteredDomainRowID</snippet></ROW><ROW><id>20101940</id><snippet>git+</snippet></ROW><ROW><id>20101940</id><snippet>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6
</snippet></ROW><ROW><id>20101940</id><snippet>/</snippet></ROW><ROW><id>20102065</id><snippet>stable</snippet></ROW><ROW><id>20102065</id><snippet>--prefix</snippet></ROW><ROW><id>20102112</id><snippet>mylist = [('a', 'b'), 
          ('c', 'd'),
           ... 
         ]
</snippet></ROW><ROW><id>20102112</id><snippet>'\n'.join( ','.join(row) for row in mylist )
</snippet></ROW><ROW><id>20102112</id><snippet>''.join( ','.join(row) + '\n' for row in mylist)
</snippet></ROW><ROW><id>20102151</id><snippet>set</snippet></ROW><ROW><id>20102151</id><snippet>def random_unique_floats(n):
    used = bytearray(0 for i in xrange(2**32 // 8))
    count = 0
    while count &lt; n:
        bits = random.getrandbits(32)
        value = struct.unpack('f', struct.pack('I', bits))[0]
        if not math.isinf(value) and not math.isnan(value):
            index = bits // 8
            mask = 0x01 &lt;&lt; (bits &amp; 0x07)
            if used[index] &amp; mask == 0:
                yield value
                used[index] |= mask
                count += 1

for num in random_unique_floats(size):
    file.write(struct.pack('f', num))
</snippet></ROW><ROW><id>20102154</id><snippet>multiprocessing</snippet></ROW><ROW><id>20102231</id><snippet>is</snippet></ROW><ROW><id>20102231</id><snippet>if type(x) is not list:
</snippet></ROW><ROW><id>20102231</id><snippet>if not isinstance(x, list)</snippet></ROW><ROW><id>20102238</id><snippet>In [7]: Test = array([[1,2,3,4,5],
              [2,3,4,5,6],
              [3,4,5,6,7],
              [4,5,6,7,8],
              [5,6,7,8,9]])

In [8]: d = np.argwhere(np.diag(Test) &lt; 6).squeeze()

In [9]: Test[d][:,d]
Out[9]: 
array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5]])
</snippet></ROW><ROW><id>20102238</id><snippet>In [10]: d = np.argwhere(np.diag(Test) &lt; 6)

In [11]: Test[d, d.flat]
Out[11]: 
array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5]])
</snippet></ROW><ROW><id>20102238</id><snippet>Test[d, d]</snippet></ROW><ROW><id>20102238</id><snippet>In [75]: Test[d, d]
Out[75]: 
array([[1],
       [3],
       [5]])
</snippet></ROW><ROW><id>20102238</id><snippet>d</snippet></ROW><ROW><id>20102238</id><snippet>d</snippet></ROW><ROW><id>20102238</id><snippet>d</snippet></ROW><ROW><id>20102238</id><snippet>d.flat</snippet></ROW><ROW><id>20102238</id><snippet>d.flatten()</snippet></ROW><ROW><id>20102238</id><snippet>d.ravel()</snippet></ROW><ROW><id>20102238</id><snippet>flat</snippet></ROW><ROW><id>20102238</id><snippet>In [76]: d
Out[76]: 
array([[0],
       [1],
       [2]])

In [77]: d.flatten()
Out[77]: array([0, 1, 2])

In [79]: print d.shape, d.flatten().shape
(3, 1) (3,)
</snippet></ROW><ROW><id>20102238</id><snippet>Test[d, d.flat]</snippet></ROW><ROW><id>20102238</id><snippet>d</snippet></ROW><ROW><id>20102238</id><snippet>d.flat</snippet></ROW><ROW><id>20102238</id><snippet>d.flat</snippet></ROW><ROW><id>20102238</id><snippet>d</snippet></ROW><ROW><id>20102238</id><snippet>i</snippet></ROW><ROW><id>20102238</id><snippet>j</snippet></ROW><ROW><id>20102238</id><snippet>In [80]: dd = d.flatten()

In [81]: i = np.hstack((d, d, d)

In [82]: j = np.vstack((dd, dd, dd))

In [83]: print i
[[0 0 0]
 [1 1 1]
 [2 2 2]]

In [84]: print j
[[0 1 2]
 [0 1 2]
 [0 1 2]]
</snippet></ROW><ROW><id>20102238</id><snippet>In [85]: Test[i, j]
Out[85]: 
array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5]])
</snippet></ROW><ROW><id>20102306</id><snippet>next_page_uri</snippet></ROW><ROW><id>20102436</id><snippet>http://127.0.0.1:8000/</snippet></ROW><ROW><id>20102436</id><snippet>http://127.0.0.1:8000/admin/</snippet></ROW><ROW><id>20102436</id><snippet>http://127.0.0.1:8000/foodPosts/</snippet></ROW><ROW><id>20102436</id><snippet>homefood.views.home</snippet></ROW><ROW><id>20102436</id><snippet>url(r'^$', 'homefood.views.home', name='home'),
</snippet></ROW><ROW><id>20102474</id><snippet>db.auth_permission</snippet></ROW><ROW><id>20102474</id><snippet>table</snippet></ROW><ROW><id>20102474</id><snippet>name</snippet></ROW><ROW><id>20102474</id><snippet>table</snippet></ROW><ROW><id>20102474</id><snippet>name</snippet></ROW><ROW><id>20102474</id><snippet>table</snippet></ROW><ROW><id>20102474</id><snippet>auth.add_permission(1, 'search')</snippet></ROW><ROW><id>20102474</id><snippet>table</snippet></ROW><ROW><id>20102474</id><snippet>@auth.requires_permission('search')</snippet></ROW><ROW><id>20102474</id><snippet>@auth.requires_permission('search', '')</snippet></ROW><ROW><id>20102474</id><snippet>db.auth_permission.insert(group_id=1, name='search')</snippet></ROW><ROW><id>20102474</id><snippet>table</snippet></ROW><ROW><id>20102474</id><snippet>None</snippet></ROW><ROW><id>20102659</id><snippet>java</snippet></ROW><ROW><id>20102659</id><snippet>java</snippet></ROW><ROW><id>20102703</id><snippet>arr</snippet></ROW><ROW><id>20102703</id><snippet>arr[0::,5]
arr[0:,5]
</snippet></ROW><ROW><id>20102703</id><snippet>arr[:, 5]
</snippet></ROW><ROW><id>20102703</id><snippet>:</snippet></ROW><ROW><id>20102703</id><snippet>arr[start:end:step]
</snippet></ROW><ROW><id>20102703</id><snippet>arr[0:len(arr):1]
</snippet></ROW><ROW><id>20102703</id><snippet>arr[::]
</snippet></ROW><ROW><id>20102703</id><snippet>arr[0::]
arr[:len(arr):]
arr[::1]
</snippet></ROW><ROW><id>20102703</id><snippet>step</snippet></ROW><ROW><id>20102703</id><snippet>arr[::1]
</snippet></ROW><ROW><id>20102703</id><snippet>end</snippet></ROW><ROW><id>20102703</id><snippet>arr[:end]
</snippet></ROW><ROW><id>20102703</id><snippet>arr[0]  # only the first item!
arr[0:] # all items
</snippet></ROW><ROW><id>20102719</id><snippet>show_colums()</snippet></ROW><ROW><id>20102719</id><snippet>self.columns</snippet></ROW><ROW><id>20102719</id><snippet>self.place()</snippet></ROW><ROW><id>20102719</id><snippet>class NQ:

    def __init__(self,n, callback): # added callback
        self.size = n
        self.columns = []
        self.places = 0
        self.backtracks = 0
        self.callback = callback # added callback

    def place(self, startRow=0): 

        self.callback(self.columns) # added callback

        if len(self.columns) == self.size:

            return self.columns

        else:
            for row in range(startRow, self.size): 
                if self.isSafe(len(self.columns), row) is True: 
                    self.columns.append(row)
                    self.places += 1 
                    return self.place()

            else: 
                lastRow = self.columns.pop()
                self.backtracks += 1 
                return self.place(startRow=lastRow + 1)

    def isSafe(self, col, row): 
        for threatRow in self.columns: 
            threatCol = self.columns.index(threatRow) 
            if row == threatRow or col == self.columns.index(threatRow):
                return False 
            elif threatRow + threatCol == row + col or threatRow - threatCol == row - col:
                return False 
        return True
</snippet></ROW><ROW><id>20102719</id><snippet>from nq inport NQ

def show_columns(x):
    print "columns:", x

def process(n):
    nqueens = NQ(n, show_columns)
    nqueens.place(0)        
    return nqueens.columns

process(8)
</snippet></ROW><ROW><id>20102719</id><snippet>columns: []
columns: [0]
columns: [0, 2]
columns: [0, 2, 4]
columns: [0, 2, 4, 1]
columns: [0, 2, 4, 1, 3]
columns: [0, 2, 4, 1]
columns: [0, 2, 4, 1, 7]
columns: [0, 2, 4, 1]
</snippet></ROW><ROW><id>20102785</id><snippet>combinatorics</snippet></ROW><ROW><id>20102785</id><snippet>def guess(smudged_numbers):
    from itertools import product
    num_smudges = len(smudged_numbers)
    for raw in product(smudged_numbers, repeat=4):
        if len(set(raw)) == num_smudges:
            yield raw

count = 0
for nums in guess([1, 8]):
    print nums
    count += 1
print "total", count
</snippet></ROW><ROW><id>20102785</id><snippet>(1, 1, 1, 8)
(1, 1, 8, 1)
(1, 1, 8, 8)
(1, 8, 1, 1)
(1, 8, 1, 8)
(1, 8, 8, 1)
(1, 8, 8, 8)
(8, 1, 1, 1)
(8, 1, 1, 8)
(8, 1, 8, 1)
(8, 1, 8, 8)
(8, 8, 1, 1)
(8, 8, 1, 8)
(8, 8, 8, 1)
total 14
</snippet></ROW><ROW><id>20102785</id><snippet>len(num_smudges)**4</snippet></ROW><ROW><id>20102785</id><snippet>product</snippet></ROW><ROW><id>20102785</id><snippet>repeat=4</snippet></ROW><ROW><id>20102785</id><snippet>[1, 8]</snippet></ROW><ROW><id>20102785</id><snippet>len(smudged_numbers)**4</snippet></ROW><ROW><id>20102785</id><snippet>set</snippet></ROW><ROW><id>20102785</id><snippet>len</snippet></ROW><ROW><id>20102785</id><snippet>[1, 8]</snippet></ROW><ROW><id>20102785</id><snippet>(1, 1, 1, 1)</snippet></ROW><ROW><id>20102785</id><snippet>(8, 8, 8, 8)</snippet></ROW><ROW><id>20102969</id><snippet>a = [[[0,1,2,3], [0,4,5,6]], [[1,1,2,7], [1,4,5,8]], [[2,1,2,9], [2,4,5,10]]]
arr = np.asarray(a)

b =  arr[:, :, 1:].mean(0)
</snippet></ROW><ROW><id>20102969</id><snippet>1</snippet></ROW><ROW><id>20102969</id><snippet>2</snippet></ROW><ROW><id>20102969</id><snippet>&gt;&gt;&gt; b
array([[ 1.        ,  2.        ,  6.33333333],
       [ 4.        ,  5.        ,  8.        ]])
</snippet></ROW><ROW><id>20103047</id><snippet>links = self.br.find_elements_by_xpath("//*[@class='image']/a")
if not links:
    links = self.br.find_elements_by_xpath("//*[@class='newPrice']/a")
for products in links:
    self.urls.append(products.get_attribute("href"))
</snippet></ROW><ROW><id>20103203</id><snippet>from bs4 import BeautifulSoup    

soup = BeautifulSoup(markup, "lxml")
</snippet></ROW><ROW><id>20103204</id><snippet>f = open("test.txt", 'r')
lines = f.readlines()
f.close()

identifiers = set([' '.join(line.split()[0:2]) for line in lines])
output = []

for identifier in identifiers:
    output.append((' '.join(line.split()[:-1], max([float(line.split()[-1]) for line in lines if ' '.join(line.split()[0:2]) == identifier])))

f = open("newFile.txt", 'w')
for item in output:
    f.write("{} {}\n".format(item[0],item[1]))
f.close()
</snippet></ROW><ROW><id>20103347</id><snippet>coerce</snippet></ROW><ROW><id>20103347</id><snippet>TypedChoiceField</snippet></ROW><ROW><id>20103347</id><snippet>ONE_OR_MULTIPLE_CHOICES = (
    (0, 'One'),
    (1, 'Multiple')
)

multiple = forms.TypedChoiceField(choices=ONE_OR_MULTIPLE_CHOICES,
                                  widget=forms.RadioSelect,
                                  coerce=int)
</snippet></ROW><ROW><id>20103347</id><snippet>False</snippet></ROW><ROW><id>20103347</id><snippet>True</snippet></ROW><ROW><id>20103347</id><snippet>0</snippet></ROW><ROW><id>20103347</id><snippet>1</snippet></ROW><ROW><id>20103347</id><snippet>coerce=bool</snippet></ROW><ROW><id>20103347</id><snippet>'False'</snippet></ROW><ROW><id>20103347</id><snippet>True</snippet></ROW><ROW><id>20103347</id><snippet>coerce = lambda x: x == 'True'
</snippet></ROW><ROW><id>20103400</id><snippet>sum()</snippet></ROW><ROW><id>20103400</id><snippet>[sum(1 for t in tups if t[1] == '') for tups in obj]
</snippet></ROW><ROW><id>20103400</id><snippet>&gt;&gt;&gt; obj = [[("AA", "AA"), ("QQ", "")], [("CC", ""), ("QQ", "")]]
&gt;&gt;&gt; [sum(1 for t in tups if t[1] == '') for tups in obj]
[1, 2]
</snippet></ROW><ROW><id>20103900</id><snippet>Grade1+Grade2+Grade3+Grade4/4
</snippet></ROW><ROW><id>20103900</id><snippet>(Grade1+Grade2+Grade3+Grade4)/4
</snippet></ROW><ROW><id>20103900</id><snippet>&gt;&gt;&gt; 1 + 2 +3 +4/4
7
&gt;&gt;&gt; (1+2+3+4)/4
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20103900</id><snippet>Grade1+Grade2+Grade3+(Grade4/4)
</snippet></ROW><ROW><id>20103900</id><snippet>(Grade1+Grade2+Grade3+Grade4)/4
</snippet></ROW><ROW><id>20103900</id><snippet>#FinalGrade
Student = str(input("Student Name: "))
Grade1 = int(input("Enter Student's First Grade: "))
Grade2 = int(input("Enter Student's Second Grade: "))
Grade3 = int(input("Enter Student's Third Grade: "))
Grade4 = int(input("Enter Student's Fourth Grade: "))

average =  (Grade1+Grade2+Grade3+Grade4 )/4
print ("Total Grade Average: %G" % (average))

print ("%s has:" % (Student))

if average &lt; 40:
    print ("Failed!")
if average &gt; 40:
    print ("Passed!")

#what if average == 40 ?
</snippet></ROW><ROW><id>20103900</id><snippet>passed_or_failed = "Passed"
if average &lt; 40:
    passed_or_failed = 'Failed'

print ("%s has: %s" % (Student, passed_or_failed))
</snippet></ROW><ROW><id>20104031</id><snippet>{key: [color, sum(t[2] for t in value if t[0] == color)] for key, value in Dict.iteritems()}
</snippet></ROW><ROW><id>20104031</id><snippet>color</snippet></ROW><ROW><id>20104031</id><snippet>&gt;&gt;&gt; Dict = {
...     'key1': [('Red','Large',30),('Red','Medium',40),('Blue','Small',45)],
...     'key2': [('Red','Large',35)],
...     'key3': [('Yellow','Large',30),('Red','Medium',30)], 
... }
&gt;&gt;&gt; color = 'Red'
&gt;&gt;&gt; {key: [color, sum(t[2] for t in value if t[0] == color)] for key, value in Dict.iteritems()}
{'key3': ['Red', 30], 'key2': ['Red', 35], 'key1': ['Red', 70]}
</snippet></ROW><ROW><id>20104031</id><snippet>Counter()</snippet></ROW><ROW><id>20104031</id><snippet>from collections import defaultdict, Counter

new_dict = {}
for key, values in Dict.iteritems():
    counts = Counter()
    for color, _, count in values:
        counts[color] += count
    new_dict[key] = counts.items()
</snippet></ROW><ROW><id>20104031</id><snippet>&gt;&gt;&gt; new_dict = {}
&gt;&gt;&gt; for key, values in Dict.iteritems():
...     counts = Counter()
...     for color, _, count in values:
...         counts[color] += count
...     new_dict[key] = counts.items()
... 
&gt;&gt;&gt; new_dict
{'key3': [('Red', 30), ('Yellow', 30)], 'key2': [('Red', 35)], 'key1': [('Blue', 45), ('Red', 70)]}
</snippet></ROW><ROW><id>20104099</id><snippet>sys._getframe(1)</snippet></ROW><ROW><id>20104099</id><snippet>roles</snippet></ROW><ROW><id>20104128</id><snippet>def add_next(seq, m):
    s = sum(seq)
    count = 1 if s == m else 0
    if s &lt; m:
        for i in [f for f in [3,5,7,9] if s + f &lt;= m]:
            count += add_next(seq + [i], m)
    return count

print(add_next([], 15))
</snippet></ROW><ROW><id>20104128</id><snippet>for i in [f for f in [3,5,7,9] if s + f &lt;= m]:
</snippet></ROW><ROW><id>20104162</id><snippet>inds</snippet></ROW><ROW><id>20104162</id><snippet>array([[0, 0],
       [1, 1],
       [2, 2]])
</snippet></ROW><ROW><id>20104162</id><snippet>np.arange(3)[:,None]</snippet></ROW><ROW><id>20104162</id><snippet>arange</snippet></ROW><ROW><id>20104162</id><snippet>None</snippet></ROW><ROW><id>20104162</id><snippet>&gt;&gt;&gt; np.arange(3)[:, None]
array([[0],
       [1],
       [2]])
</snippet></ROW><ROW><id>20104162</id><snippet>&gt;&gt;&gt; a[np.arange(3)[:,None], inds]
array([[0, 3],   # a[0,[0,1]]
       [6, 0],   # a[1,[1,2]] 
       [0, 9]])  # a[2,[0,2]]
</snippet></ROW><ROW><id>20104273</id><snippet>order</snippet></ROW><ROW><id>20104273</id><snippet>previous</snippet></ROW><ROW><id>20104273</id><snippet>next</snippet></ROW><ROW><id>20104363</id><snippet>def dot(np.ndarray a, np.ndarray b):
    cdef np.ndarray d = np.dot(a, b)
    return d
</snippet></ROW><ROW><id>20104452</id><snippet>x</snippet></ROW><ROW><id>20104452</id><snippet>x</snippet></ROW><ROW><id>20104452</id><snippet>for x in list(xrange(instance.nbw)):
     sddpbw.append(choice(sddpfw))
</snippet></ROW><ROW><id>20104452</id><snippet>&gt;&gt;&gt; c = [1,2,3]
&gt;&gt;&gt; c
[1, 2, 3]
&gt;&gt;&gt; for c in xrange(1, 3):
...     print(c)
... 
1
2
&gt;&gt;&gt; c
2
</snippet></ROW><ROW><id>20104452</id><snippet>x</snippet></ROW><ROW><id>20104452</id><snippet>for _ in list(xrange(instance.nbw)):
   sddpbw.append(choice(sddpfw))
</snippet></ROW><ROW><id>20104639</id><snippet>next()</snippet></ROW><ROW><id>20104639</id><snippet>first = last = next(iterable, defaultvalue)
for last in iterable:
    pass
</snippet></ROW><ROW><id>20104639</id><snippet>first</snippet></ROW><ROW><id>20104639</id><snippet>last</snippet></ROW><ROW><id>20104639</id><snippet>defaultvalue</snippet></ROW><ROW><id>20104639</id><snippet>first</snippet></ROW><ROW><id>20104639</id><snippet>last</snippet></ROW><ROW><id>20104639</id><snippet>first</snippet></ROW><ROW><id>20104639</id><snippet>last</snippet></ROW><ROW><id>20104678</id><snippet>cursor.execute</snippet></ROW><ROW><id>20104678</id><snippet>sql = 'INSERT INTO test (a,b,c) VALUES (%s, %s, %s)'
for values in [("test","test",1), ("2nd test","2nd test",6)]
    cursor.execute(sql, values)
</snippet></ROW><ROW><id>20104678</id><snippet>sql = 'INSERT INTO test (a,b,c) VALUES ("test","test",1),("2nd test","2nd test",6)'
cursor.execute(sql)
</snippet></ROW><ROW><id>20104708</id><snippet>$$</snippet></ROW><ROW><id>20104708</id><snippet>$</snippet></ROW><ROW><id>20104708</id><snippet>$</snippet></ROW><ROW><id>20104708</id><snippet>&gt;&gt;&gt; obj = Template("$$$$Tag$$$$")
&gt;&gt;&gt; obj.safe_substitute({})
'$$Tag$$'
&gt;&gt;&gt; obj.safe_substitute({'Tag':1})
'$$Tag$$'
&gt;&gt;&gt; obj = Template("$$$Tag$$$") #First $ escapes the second $
&gt;&gt;&gt; obj.safe_substitute({'Tag':1})
'$1$$'
</snippet></ROW><ROW><id>20104814</id><snippet>$ python -m trace --trace test.py 
 --- modulename: threading, funcname: settrace
threading.py(90):     _trace_hook = func
 --- modulename: t, funcname: &lt;module&gt;
t.py(1): def d(n):
t.py(6): print d(3)
 --- modulename: t, funcname: d
t.py(2):     if n==0:
t.py(5):         return d(n-1)
 --- modulename: t, funcname: d
t.py(2):     if n==0:
t.py(5):         return d(n-1)
 --- modulename: t, funcname: d
t.py(2):     if n==0:
t.py(5):         return d(n-1)
 --- modulename: t, funcname: d
t.py(2):     if n==0:
t.py(3):         return 0
0
</snippet></ROW><ROW><id>20105011</id><snippet>class work(models.Model):
.....
subject = models.ForeignKey(Class,null=True)
</snippet></ROW><ROW><id>20105011</id><snippet>&gt;&gt;&gt; homework = work.objects.get(pk=1)
&gt;&gt;&gt; math = Class.objects.get(pk=1)
&gt;&gt;&gt; homework.subject = math
&gt;&gt;&gt; homework.save()
&gt;&gt;&gt; quizzes = work.objects.get(pk=2)
&gt;&gt;&gt; math = Class.objects.get(pk=1)
&gt;&gt;&gt; quizzes.subject = math
&gt;&gt;&gt; quizzes.save()
</snippet></ROW><ROW><id>20105011</id><snippet>math = Class.objects.get(pk=1)
math.work_set.all()
</snippet></ROW><ROW><id>20105184</id><snippet>for every in read_completed_ones:
    the_big=every
    if courses_remaining==the_big: 
        print courses_remaining
</snippet></ROW><ROW><id>20105184</id><snippet>for every in read_completed_ones:
    the_big=every
if courses_remaining==the_big: 
    print courses_remaining
</snippet></ROW><ROW><id>20105184</id><snippet>the_big</snippet></ROW><ROW><id>20105184</id><snippet>python -tt</snippet></ROW><ROW><id>20105297</id><snippet> import xlrd
 import csv

 def csv_from_excel():

    wb = xlrd.open_workbook('your_workbook.xls')
    sh = wb.sheet_by_name('Sheet1')
    your_csv_file = open('your_csv_file.csv', 'wb')
    wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)

    for rownum in xrange(sh.nrows):
        wr.writerow(sh.row_values(rownum))

    your_csv_file.close()
</snippet></ROW><ROW><id>20105372</id><snippet>&gt;&gt;&gt; d = {'a01': 2, 'a02': 0, 'a03': 4}
&gt;&gt;&gt; len(str(d['a01']))
1
</snippet></ROW><ROW><id>20105372</id><snippet>{0: 'a02', 2: 'a01', 4: 'a03'}
&gt;&gt;&gt; len(d[2])
3
</snippet></ROW><ROW><id>20105774</id><snippet>zip()</snippet></ROW><ROW><id>20105774</id><snippet>&gt;&gt;&gt; zip([1,2,3], [4,5,6])
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20105774</id><snippet>&gt;&gt;&gt; lsts = ([1,2,3], [4,5,6])
&gt;&gt;&gt; zip(*lsts)
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20105774</id><snippet>map(list, zip([1,2,3], [4,5,6]))  # Python 2
[list(t) for t in zip([1,2,3], [4,5,6])]  # Python 2 and 3
</snippet></ROW><ROW><id>20105774</id><snippet>def rearrange_list(*my_lists):
    return [list(t) for t in zip(*my_lists)]
</snippet></ROW><ROW><id>20105976</id><snippet>def parse_documentation(filename):
    filename=open(filename, "r") # open file
    lines = filename.read(); # read all the lines in the file to a list named as "lines"
    invalidsymbols=["`","~","!", "@","#","$"]
    for line in lines: # for each line in lines
        for x in invalidsymbols: # loop through the list of invalid symbols
            if x in line: # if the invalid symbols is in the line
                print(line) # print out the line
                print(x) # and also print out the invalid symbol you encountered in that line
                print(line.replace(x, "")) # print out a line with invalid symbol removed
</snippet></ROW><ROW><id>20106603</id><snippet>(x for x in ...)</snippet></ROW><ROW><id>20106603</id><snippet>[x for x in ...]</snippet></ROW><ROW><id>20106603</id><snippet>''</snippet></ROW><ROW><id>20106603</id><snippet>tup[1]</snippet></ROW><ROW><id>20106603</id><snippet>&gt;&gt;&gt; [[tup for tup in sub_list if tup[1] != ""] for sub_list in lst]
[[('AA', 'AA')], []]
</snippet></ROW><ROW><id>20107017</id><snippet>import evernote.edam.type.ttypes as Types
import evernote.edam.notestore.ttypes as NoteStore

from evernote.api.client import EvernoteClient

auth_token = "your developer token"

client = EvernoteClient(token=auth_token, sandbox=True)
note_store = client.get_note_store()

note_filter = NoteStore.NoteFilter()
note_filter.words = 'intitle:"test"'
notes_metadata_result_spec = NoteStore.NotesMetadataResultSpec()

notes_metadata_list = note_store.findNotesMetadata(note_filter, 0, 1, notes_metadata_result_spec)
note_guid = notes_metadata_list.notes[0].guid
note = note_store.getNote(note_guid, True, False, False, False)
</snippet></ROW><ROW><id>20107060</id><snippet>while(i != 230400)
{
    stream.Read(buffer, 0, 64);
    buffer.CopyTo(ba, i);
    i += 64;
}
</snippet></ROW><ROW><id>20107060</id><snippet>Read</snippet></ROW><ROW><id>20107060</id><snippet>Read</snippet></ROW><ROW><id>20107060</id><snippet>Socket.Receive</snippet></ROW><ROW><id>20107060</id><snippet>ba</snippet></ROW><ROW><id>20107060</id><snippet>int count = 230400, offset = 0, read;
byte[] ba = new byte[count];
while(count &gt; 0 &amp;&amp; (read=stream.Read(ba, offset, count)) &gt; 0)
{
    offset += read;
    count -= read;
}
if(read!=0) throw new EndOfStreamException();
</snippet></ROW><ROW><id>20107084</id><snippet>len(cards)</snippet></ROW><ROW><id>20107084</id><snippet>len(cards)</snippet></ROW><ROW><id>20107084</id><snippet>len(cards) + 1</snippet></ROW><ROW><id>20107084</id><snippet>cards</snippet></ROW><ROW><id>20107084</id><snippet>IndexError</snippet></ROW><ROW><id>20107206</id><snippet>&gt;&gt;&gt; foo = [4, 7, 2, 9]
&gt;&gt;&gt; tup = foo[foo.index(min(foo))], foo[0]
&gt;&gt;&gt; print tup
(2, 4)
&gt;&gt;&gt; foo[0] = tup[0]
&gt;&gt;&gt; print foo
[2, 7, 2, 9]
&gt;&gt;&gt; dx = foo.index(min(foo))
&gt;&gt;&gt; print dx
0
&gt;&gt;&gt; foo[dx] = tup[1] # foo[dx] equivalent to foo[foo.index(min(foo))]
&gt;&gt;&gt; print foo
[4, 7, 2, 9]
</snippet></ROW><ROW><id>20107206</id><snippet>2</snippet></ROW><ROW><id>20107206</id><snippet>foo[0]</snippet></ROW><ROW><id>20107206</id><snippet>4</snippet></ROW><ROW><id>20107206</id><snippet>foo</snippet></ROW><ROW><id>20107206</id><snippet>foo[0]</snippet></ROW><ROW><id>20107206</id><snippet>foo[0], foo[foo.index(min(foo))] = foo[foo.index(min(foo))], foo[0]
                                                 1_______
                                       2__________________
                                   3_______________________  4_____
                                   5_______________________________
6_____
                      7_______
            8__________________
        9_______________________
1 find min
2 find index
3 get item by index
4 get item by index
5 make tuple
6 assign to foo at index 0 from left hand side of tuple from step 5)
7 find min
8 find index
9 assign to foo at index from step 8 from right hand side of tuple from step 5
</snippet></ROW><ROW><id>20107304</id><snippet>Emovie.objects.filter(id=emovie_id.email)</snippet></ROW><ROW><id>20107304</id><snippet>emovie_id</snippet></ROW><ROW><id>20107304</id><snippet>.email</snippet></ROW><ROW><id>20107304</id><snippet>id=</snippet></ROW><ROW><id>20107304</id><snippet>Emovie.objects.get(id=int(emovie_id))</snippet></ROW><ROW><id>20107390</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20107390</id><snippet>threading</snippet></ROW><ROW><id>20107390</id><snippet>multiprocessing</snippet></ROW><ROW><id>20107390</id><snippet>Executor</snippet></ROW><ROW><id>20107390</id><snippet>import concurrent.futures
import urllib.request

URLS = #[some list of urls]

# Retrieve a single page and report the url and contents
def load_url(url, timeout):
    conn = urllib.request.urlopen(url, timeout=timeout)
    return conn.readall()

# We can use a with statement to ensure threads are cleaned up promptly
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    # Start the load operations and mark each future with its URL
    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}
    for future in concurrent.futures.as_completed(future_to_url):
        url = future_to_url[future]
        try:
            data = future.result() 
            # do json processing here
        except Exception as exc:
            print('%r generated an exception: %s' % (url, exc))
        else:
            print('%r page is %d bytes' % (url, len(data)))
</snippet></ROW><ROW><id>20107390</id><snippet>urllib.request</snippet></ROW><ROW><id>20107390</id><snippet>requests</snippet></ROW><ROW><id>20107390</id><snippet>requests</snippet></ROW><ROW><id>20107390</id><snippet>Future</snippet></ROW><ROW><id>20107390</id><snippet>concurrent.futures.as_completed</snippet></ROW><ROW><id>20107390</id><snippet>Future</snippet></ROW><ROW><id>20107390</id><snippet>max_workers</snippet></ROW><ROW><id>20107557</id><snippet>.pack</snippet></ROW><ROW><id>20107557</id><snippet>None</snippet></ROW><ROW><id>20107557</id><snippet>.pack</snippet></ROW><ROW><id>20107557</id><snippet>chatlog=Text(root, height=10, state=DISABLED)
chatlog.pack(side=TOP, fill=X)
entry=Entry(root, textvariable=msg)
entry.pack(side=BOTTOM, fill=X)
button=Button(root, command=postaction, text="Button")
button.pack()
</snippet></ROW><ROW><id>20107592</id><snippet>hist2d</snippet></ROW><ROW><id>20107592</id><snippet>hexbin</snippet></ROW><ROW><id>20107592</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

# Generate fake data
x = np.random.normal(size=1000)
y = x * 3 + np.random.normal(size=1000)

# Calculate the point density
xy = np.vstack([x,y])
z = gaussian_kde(xy)(xy)

fig, ax = plt.subplots()
ax.scatter(x, y, c=z, s=100, edgecolor='')
plt.show()
</snippet></ROW><ROW><id>20107592</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

# Generate fake data
x = np.random.normal(size=1000)
y = x * 3 + np.random.normal(size=1000)

# Calculate the point density
xy = np.vstack([x,y])
z = gaussian_kde(xy)(xy)

# Sort the points by density, so that the densest points are plotted last
idx = z.argsort()
x, y, z = x[idx], y[idx], z[idx]

fig, ax = plt.subplots()
ax.scatter(x, y, c=z, s=50, edgecolor='')
plt.show()
</snippet></ROW><ROW><id>20107647</id><snippet>getattr()</snippet></ROW><ROW><id>20107647</id><snippet>   def call(self, func_name, args):
        getattr(self, func_name)(*args)
</snippet></ROW><ROW><id>20107647</id><snippet>__dict__</snippet></ROW><ROW><id>20107647</id><snippet>getattr()</snippet></ROW><ROW><id>20107647</id><snippet>inspect</snippet></ROW><ROW><id>20107647</id><snippet>def __init__(self, ...):
    self.functions = dict(inspect.getmembers(self, inspect.ismethod))
</snippet></ROW><ROW><id>20107825</id><snippet>df.reset_index()</snippet></ROW><ROW><id>20107887</id><snippet>    Set0 =  set([('a', 'd', 6, 7, 9), ('y', 'a', 1, 4, 0), ('a', 'b', 4, 3, 6), ('b', 'a', 2, 5, 3)])
    Set1 =  set([(2, 'a', 5, 4), (1, 'a', 4, 1), (4, 'b', 3, 7), (6, 'd', 7, 10)])
    Set2 =  set([(7, 'o', '0', 0, 11), (3, 'b', 'a', 6, 8), (5, 'd', 'a', 4, 5), (4, 'b', 'b', 2, 2)])


    def make_s0(s):
        # add an element to the tuple to 'tag' the set
        return [('s0', a, b, c, d, e) for (a, b, c, d, e) in s]

    def make_s1(s):
        return [('s1', a, b, None, d, e) for (a, b, d, e) in s]

    def make_s2(s):
        return [('s2', a, b, c, d, e) for (a, b, c, d, e) in s]

    def cmp_elem(l, r):
        # you need to complete the implementation here
        # based on the first element of the tag to carry out comparsion
        if l[0] == 's0' and r[0] == 's0':
            (_, t, tdash, cdash, cdashdash, i) = l
            (_, u, udash, ddash, ddash, j) = r
            return cmp((t, cdash), (u, ddash))
        elif (l[0] == 's1' and r[0] == 's2') or (l[0] == 's2' and r[0] == 's1'):
            (_, c, _, _, _, _) = l
            (_, d, _, _, _, _) = r
            return cmp(c, d)
        return 0

    if __name__ == "__main__":
        l = make_s0(Set0) + make_s1(Set1) + make_s2(Set2)
        print sorted(l, cmp=cmp_elem)
</snippet></ROW><ROW><id>20107933</id><snippet>import os
import py7zlib

class SevenZFileError(py7zlib.ArchiveError):
    pass

class SevenZFile(object):
    @classmethod
    def is_7zfile(cls, filepath):
        """ Determine if filepath points to a valid 7z archive. """
        is7z = False
        fp = None
        try:
            fp = open(filepath, 'rb')
            archive = py7zlib.Archive7z(fp)
            n = len(archive.getnames())
            is7z = True
        finally:
            if fp: fp.close()
        return is7z

    def __init__(self, filepath):
        fp = open(filepath, 'rb')
        self.filepath = filepath
        self.archive = py7zlib.Archive7z(fp)

    def __contains__(self, name):
        return name in self.archive.getnames()

    def bytestream(self, name):
        """ Iterate stream of bytes from an archive member. """
        if name not in self:
            raise SevenZFileError('member %s not found in %s' %
                                  (name, self.filepath))
        else:
            member = self.archive.getmember(name)
            for byte in member.read():
                if not byte: break
                yield byte

    def readlines(self, name):
        """ Iterate lines from an archive member. """
        linesep = os.linesep[-1]
        line = ''
        for ch in self.bytestream(name):
            line += ch
            if ch == linesep:
                yield line
                line = ''
        if line: yield line
</snippet></ROW><ROW><id>20107933</id><snippet>import csv

if SevenZFile.is_7zfile('testing.csv.7z'):
    sevenZfile = SevenZFile('testing.csv.7z')

    if 'testing.csv' not in sevenZfile:
        print 'testing.csv is not a member of testing.csv.7z'
    else:
        reader = csv.reader(sevenZfile.readlines('testing.csv'))
        for row in reader:
            print ', '.join(row)
</snippet></ROW><ROW><id>20107956</id><snippet>__init__</snippet></ROW><ROW><id>20107956</id><snippet>object</snippet></ROW><ROW><id>20107956</id><snippet>list</snippet></ROW><ROW><id>20107956</id><snippet>Exception</snippet></ROW><ROW><id>20107956</id><snippet>object</snippet></ROW><ROW><id>20107956</id><snippet>__init__</snippet></ROW><ROW><id>20107956</id><snippet>object</snippet></ROW><ROW><id>20107956</id><snippet>__init__</snippet></ROW><ROW><id>20107956</id><snippet>list</snippet></ROW><ROW><id>20107956</id><snippet>Exception</snippet></ROW><ROW><id>20107962</id><snippet>'workflow' in children
</snippet></ROW><ROW><id>20107962</id><snippet>True/False</snippet></ROW><ROW><id>20107962</id><snippet>if 'workflow' in children: print 'workflow'
</snippet></ROW><ROW><id>20107981</id><snippet>/images/&lt;cropzonekey&gt;</snippet></ROW><ROW><id>20107981</id><snippet>savefig()</snippet></ROW><ROW><id>20107981</id><snippet>@app.route('/images/&lt;cropzonekey&gt;')
def images(cropzonekey):
    return render_template("images.html", title=cropzonekey)

@app.route('/fig/&lt;cropzonekey&gt;')
def fig(cropzonekey):
    fig = draw_polygons(cropzonekey)
    img = StringIO()
    fig.savefig(img)
    img.seek(0)
    return send_file(img, mimetype='image/png')
</snippet></ROW><ROW><id>20107981</id><snippet>images.html</snippet></ROW><ROW><id>20107981</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{{ title }} - image&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;img src="{{ url_for('fig', cropzonekey = title) }}" alt="Image Placeholder" height="100"&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>20108146</id><snippet>book.genre = self.request.get("genre").split(",")</snippet></ROW><ROW><id>20108146</id><snippet>self.request.get_all()</snippet></ROW><ROW><id>20108146</id><snippet>book.genre = self.request.get_all("genre")</snippet></ROW><ROW><id>20108146</id><snippet>import json
form_data = json.loads(form_data)
book.genre = form_data['genre']
</snippet></ROW><ROW><id>20108357</id><snippet>Q1-2005</snippet></ROW><ROW><id>20108357</id><snippet>datetime.date</snippet></ROW><ROW><id>20108357</id><snippet>from datetime import date

# date() takes in year, month, day args
date_lst = [(date(int(q[3:]), 3 * int(q[1]) - 2, 1), v)
            for q, v in lst]
</snippet></ROW><ROW><id>20108357</id><snippet>[(datetime.date(2005, 10, 1), 327.93),
 (datetime.date(2005, 1, 1), 133.05),
 (datetime.date(2005, 7, 1), 500.95),
 (datetime.date(2005, 4, 1), 254.22)]
</snippet></ROW><ROW><id>20108357</id><snippet>sorted(date_lst)</snippet></ROW><ROW><id>20108366</id><snippet>groupby</snippet></ROW><ROW><id>20108366</id><snippet>max</snippet></ROW><ROW><id>20108366</id><snippet>&gt;&gt;&gt; df
   candidate_id    enddate  TitleLevel
0             1   2013.5.1           2
1             1   2013.5.1           4
2             1   2010.1.1           3
3             2  2012.12.1           2
&gt;&gt;&gt; df.groupby(['candidate_id','enddate']).max().reset_index()
   candidate_id    enddate  TitleLevel
0             1   2010.1.1           3
1             1   2013.5.1           4
2             2  2012.12.1           2
</snippet></ROW><ROW><id>20108366</id><snippet>candidate_id</snippet></ROW><ROW><id>20108366</id><snippet>enddate</snippet></ROW><ROW><id>20108366</id><snippet>max()</snippet></ROW><ROW><id>20108366</id><snippet>TitleLevel</snippet></ROW><ROW><id>20108366</id><snippet>&gt;&gt;&gt; df
   candidate_id    enddate  TitleLevel other_column
0             1   2013.5.1           2          foo
1             1   2013.5.1           4          bar
2             1   2010.1.1           3       foobar
3             2  2012.12.1           2       barfoo
</snippet></ROW><ROW><id>20108366</id><snippet>&gt;&gt;&gt; idx = df.groupby(['candidate_id','enddate'], sort=False)['TitleLevel'].agg(lambda x: x.idxmax())
</snippet></ROW><ROW><id>20108366</id><snippet>ix</snippet></ROW><ROW><id>20108366</id><snippet>&gt;&gt;&gt; df.ix[idx]
   candidate_id    enddate  TitleLevel other_column
1             1   2013.5.1           4          bar
2             1   2010.1.1           3       foobar
3             2  2012.12.1           2       barfoo
</snippet></ROW><ROW><id>20108459</id><snippet>str.split</snippet></ROW><ROW><id>20108459</id><snippet>str.split</snippet></ROW><ROW><id>20108459</id><snippet>maxsplit</snippet></ROW><ROW><id>20108459</id><snippet>str.split</snippet></ROW><ROW><id>20108459</id><snippet>&gt;&gt;&gt; 'AA/BB/CC'.split('/')
['AA', 'BB', 'CC']
&gt;&gt;&gt; 'AA/BB/CC'.split('/', 1)
['AA', 'BB/CC']
&gt;&gt;&gt; 'AA/BB/CC'.split('/', 1)[0]
'AA'
</snippet></ROW><ROW><id>20108459</id><snippet>&gt;&gt;&gt; lst = [[("AA", "AA/BB/AA"), ("QQ", "AB/AA")], [("CC", "CC/SS/AA"), ("QQ", "CC/CC")]]
&gt;&gt;&gt; [[(a, b.split('/', 1)[0]) for a, b in x] for x in lst]
[[('AA', 'AA'), ('QQ', 'AB')], [('CC', 'CC'), ('QQ', 'CC')]]
</snippet></ROW><ROW><id>20108459</id><snippet>[t(x) for x in sequence]
</snippet></ROW><ROW><id>20108459</id><snippet>x</snippet></ROW><ROW><id>20108459</id><snippet>sequence</snippet></ROW><ROW><id>20108459</id><snippet>t</snippet></ROW><ROW><id>20108459</id><snippet>x</snippet></ROW><ROW><id>20108459</id><snippet>[x for x in lst]</snippet></ROW><ROW><id>20108459</id><snippet>t</snippet></ROW><ROW><id>20108459</id><snippet>x</snippet></ROW><ROW><id>20108459</id><snippet>[t(a, b) for a, b in lst]</snippet></ROW><ROW><id>20108459</id><snippet>[(a, t(b)) for a, b in x]</snippet></ROW><ROW><id>20108459</id><snippet>t</snippet></ROW><ROW><id>20108459</id><snippet>[[y for y in x] for x in lst]</snippet></ROW><ROW><id>20108518</id><snippet>repr</snippet></ROW><ROW><id>20108518</id><snippet>.partition('=&gt;')[-1]</snippet></ROW><ROW><id>20108518</id><snippet>json.loads</snippet></ROW><ROW><id>20108518</id><snippet>['content']</snippet></ROW><ROW><id>20108518</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20108518</id><snippet>&gt;&gt;&gt; thingy = r''' ok: [162.243.95.241] =&gt; {"cache_control": "private", "changed": false, "content": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;ApiResponse Status=\"OK\" xmlns=\"http://api.namecheap.com/xml.response\"&gt;\r\n  &lt;Errors /&gt;\r\n  &lt;Warnings /&gt;\r\n  &lt;RequestedCommand&gt;namecheap.domains.create&lt;/RequestedCommand&gt;\r\n  &lt;CommandResponse Type=\"namecheap.domains.create\"&gt;\r\n    &lt;DomainCreateResult Domain=\"123er321test.com\" Registered=\"true\" ChargedAmount=\"8.1800\" DomainID=\"33404\" OrderID=\"414562\" TransactionID=\"679462\" WhoisguardEnable=\"false\" FreePositiveSSL=\"false\" NonRealTimeDomain=\"false\" /&gt;\r\n  &lt;/CommandResponse&gt;\r\n  &lt;Server&gt;WEB1-SANDBOX1&lt;/Server&gt;\r\n  &lt;GMTTimeDifference&gt;--5:00&lt;/GMTTimeDifference&gt;\r\n  &lt;ExecutionTime&gt;9.008&lt;/ExecutionTime&gt;\r\n&lt;/ApiResponse&gt;", "content_length": "647", "content_location": "https://api.sandbox.namecheap.com/xml.response", "content_type": "text/xml; charset=utf-8", "date": "Thu, 21 Nov 2013 03:23:51 GMT", "item": "", "redirected": false, "server": "Microsoft-IIS/7.0", "status": 200, "x_aspnet_version": "4.0.30319", "x_powered_by": "ASP.NET"}'''
&gt;&gt;&gt; j = thingy.partition('=&gt;')[-1]
&gt;&gt;&gt; obj = json.loads(j)
&gt;&gt;&gt; xml = obj['content']
&gt;&gt;&gt; soup = BeautifulSoup(xml)
&gt;&gt;&gt; soup
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;apiresponse status="OK" xmlns="http://api.namecheap.com/xml.response"&gt;
&lt;errors&gt;&lt;/errors&gt;
&lt;warnings&gt;&lt;/warnings&gt;
&lt;requestedcommand&gt;namecheap.domains.create&lt;/requestedcommand&gt;
&lt;commandresponse type="namecheap.domains.create"&gt;
&lt;domaincreateresult chargedamount="8.1800" domain="123er321test.com" domainid="33404" freepositivessl="false" nonrealtimedomain="false" orderid="414562" registered="true" transactionid="679462" whoisguardenable="false"&gt;&lt;/domaincreateresult&gt;
&lt;/commandresponse&gt;
&lt;server&gt;WEB1-SANDBOX1&lt;/server&gt;
&lt;gmttimedifference&gt;--5:00&lt;/gmttimedifference&gt;
&lt;executiontime&gt;9.008&lt;/executiontime&gt;
&lt;/apiresponse&gt;
&gt;&gt;&gt; soup.find('apiresponse')['status']
'OK'
</snippet></ROW><ROW><id>20108636</id><snippet>_, contours, hierarchy = cv2.findContours(opening.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
for c in contours:
  #will give an error if there are less than 5 points
  if len(c) &gt; 4:
    elip = cv2.fitEllipse(c)
    if check_ellipse(elip):                                                    
      cv2.ellipse(img, elip, (255, 0, 0))
</snippet></ROW><ROW><id>20108636</id><snippet>def check_ellipse(ellipse):
  h = ellipse[1][0]
  w = ellipse[1][1]
  #make sure it's not too large, or too circular
  if abs(h-w) &lt; 2 or h &gt; 30 or w &gt; 30:
    return False                                                                              
  return True
</snippet></ROW><ROW><id>20108666</id><snippet>elements = elements.split
</snippet></ROW><ROW><id>20108666</id><snippet>elements = elements.split() # you forgot the parentheses!
</snippet></ROW><ROW><id>20108666</id><snippet>list = list.sort # you forgot the parentheses, and the function call is wrong
</snippet></ROW><ROW><id>20108666</id><snippet>list = sorted(list)
</snippet></ROW><ROW><id>20108666</id><snippet>list.sort() # no assignment here, it's an in-place sort
</snippet></ROW><ROW><id>20108666</id><snippet>list</snippet></ROW><ROW><id>20108666</id><snippet>import itertools as it
list(it.permutations([1, 2, 3])) # see? told you `list` was a function!
[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
</snippet></ROW><ROW><id>20108712</id><snippet>self.PageThree = pageThree(self) #now self.statusBar does not exists ...
self.statusBar = self.CreateStatusBar()  
</snippet></ROW><ROW><id>20108712</id><snippet>self.statusBar = self.CreateStatusBar()  
self.PageThree = pageThree(self) #now self.statusBar exists ...
</snippet></ROW><ROW><id>20108774</id><snippet>import re
re.split(r'\n{2,}', string)
</snippet></ROW><ROW><id>20108774</id><snippet>*</snippet></ROW><ROW><id>20108774</id><snippet>+</snippet></ROW><ROW><id>20108774</id><snippet>{m,n}</snippet></ROW><ROW><id>20108774</id><snippet>m</snippet></ROW><ROW><id>20108774</id><snippet>n</snippet></ROW><ROW><id>20108774</id><snippet>m</snippet></ROW><ROW><id>20108774</id><snippet>n</snippet></ROW><ROW><id>20108774</id><snippet>\n</snippet></ROW><ROW><id>20108774</id><snippet>\n{2,}</snippet></ROW><ROW><id>20108791</id><snippet>some_list.sort(key=lambda x: float(x[0]) )
</snippet></ROW><ROW><id>20108993</id><snippet>clientImage = np.asarray(bitmapBits, dtype=np.uint8).reshape(height, width, 4)
</snippet></ROW><ROW><id>20108993</id><snippet>array</snippet></ROW><ROW><id>20108993</id><snippet>__array__</snippet></ROW><ROW><id>20108993</id><snippet>asarray</snippet></ROW><ROW><id>20109096</id><snippet>for row in rows:
     # Write rows to text file
     user = row[0]
     tag = row[1]
     writer.write(user + ' ' + tag + '\n')
</snippet></ROW><ROW><id>20109100</id><snippet>def build():    
command = "cobuild archive" 
pipe = Popen(command,shell=True,stdout=PIPE,stderr=PIPE)    

while True:         
    line = pipe.stdout.readline()
    if line:            
        print line
    if not line:
        break
</snippet></ROW><ROW><id>20109442</id><snippet>In [11]: df1
Out[11]: 
   A   B
0  1  99
1  3  99
2  5   6

In [12]: df2
Out[12]: 
   A  B
0  a  2
1  b  4
2  c  6

In [13]: df1.update(df2[['B']])  # subset of cols = ['B']

In [14]: df1
Out[14]: 
   A  B
0  1  2
1  3  4
2  5  6
</snippet></ROW><ROW><id>20109540</id><snippet>spritesheet</snippet></ROW><ROW><id>20109540</id><snippet>import spritesheet
...
ss = spritesheet.spritesheet('somespritesheet.png')
# Sprite is 16x16 pixels at location 0,0 in the file...
image = ss.image_at((0, 0, 16, 16))
images = []
# Load two images into an array, their transparent bit is (255, 255, 255)
images = ss.images_at((0, 0, 16, 16),(17, 0, 16,16), colorkey=(255, 255, 255))
…
</snippet></ROW><ROW><id>20109540</id><snippet>spritesheet</snippet></ROW><ROW><id>20109581</id><snippet>print("{.17f}".format(my_float_value))
</snippet></ROW><ROW><id>20109581</id><snippet>decimals</snippet></ROW><ROW><id>20109581</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; my_float = decimal.Decimal("0.2342134235")
&gt;&gt;&gt; my_float
Decimal('0.2342134235')
</snippet></ROW><ROW><id>20109624</id><snippet>for i in range(0x2660, 0x2668):
    print(chr(i))
</snippet></ROW><ROW><id>20109749</id><snippet>list.append</snippet></ROW><ROW><id>20109749</id><snippet>sum</snippet></ROW><ROW><id>20109749</id><snippet>import random  

def main():  

    array = []
    for counter in range (1, 501):
       num = random.randint(1, 100)
       array.append(num)
    print sum(array)

main()
</snippet></ROW><ROW><id>20109749</id><snippet>total = 0
for counter in range (1, 501):
           total += random.randint(1, 100)
</snippet></ROW><ROW><id>20109772</id><snippet>import httplib2
from oauth2client.file import Storage
from oauth2client.client import flow_from_clientsecrets
from oauth2client.tools import run
from apiclient.discovery import build

storage = Storage("saved_user_creds.dat")
credentials = storage.get()
if credentials is None or credentials.invalid:
  credentials = run(flow_from_clientsecrets("client_secrets2.json", scope=["https://www.googleapis.com/auth/drive"]), storage)
http = credentials.authorize(httplib2.Http())
service = build("drive", "v2", http)
print service.files().list().execute()
</snippet></ROW><ROW><id>20109783</id><snippet>def perm(n, i):
    if i == len(n) - 1:
        print(n)
    else:
        for j in range(i, len(n)):
            n[i], n[j] = n[j], n[i]
            perm(n, i + 1)
            n[i], n[j] = n[j], n[i]
</snippet></ROW><ROW><id>20109783</id><snippet>return</snippet></ROW><ROW><id>20109783</id><snippet>def perm(n, i):
    if i == len(n) - 1:
        return [n]
    else:
        results = []
        for j in range(i, len(n)):
            n[i], n[j] = n[j], n[i]
            results.extend(perm(n, i + 1))
            n[i], n[j] = n[j], n[i]
        return results
</snippet></ROW><ROW><id>20109783</id><snippet>def perm(n, i):
    if i == len(n) - 1:
        return [n[:]]
    else:
        results = []
        for j in range(i, len(n)):
            n[i], n[j] = n[j], n[i]
            results.extend(perm(n, i + 1))
            n[i], n[j] = n[j], n[i]
        return results
</snippet></ROW><ROW><id>20109895</id><snippet>while True:
</snippet></ROW><ROW><id>20109895</id><snippet>break</snippet></ROW><ROW><id>20109895</id><snippet>for x in range(10): #Loops through the following code 10 times
</snippet></ROW><ROW><id>20109895</id><snippet>x = [1,2,3,4]
for items in x: #the variable items is assigned to 
                #each variable as it iterates through
</snippet></ROW><ROW><id>20110080</id><snippet>KeyError</snippet></ROW><ROW><id>20110080</id><snippet>"ATC\r\n"</snippet></ROW><ROW><id>20110080</id><snippet>"ATC"</snippet></ROW><ROW><id>20110080</id><snippet>new_codon</snippet></ROW><ROW><id>20110080</id><snippet>x</snippet></ROW><ROW><id>20110080</id><snippet>codon_lookup = {'GCT': 'A', 'GCC': 'A',...}

for x in new_codon:
   #This statement(`codon_lookup[x]`) was pointless
   x = x[:3] # Removes the part after the third character
   if codon_lookup[x] == ref_aa[x]: # Here I'm comparing it to another list I have from another file to see if they match or don't match 
           print "1"
   else: 
           print "0" 
</snippet></ROW><ROW><id>20110080</id><snippet>ref_aa</snippet></ROW><ROW><id>20110080</id><snippet>TypeError</snippet></ROW><ROW><id>20110080</id><snippet>x</snippet></ROW><ROW><id>20110080</id><snippet>ref_aa</snippet></ROW><ROW><id>20110080</id><snippet>ref_aa[x]</snippet></ROW><ROW><id>20110080</id><snippet>enumerate</snippet></ROW><ROW><id>20110080</id><snippet>codon_lookup = {'GCT': 'A', 'GCC': 'A',...}

for i,x in enumerate(new_codon):
   x = x[:3] # Removes the part after the third character
   if codon_lookup[x] == ref_aa[i]: # Changed the 'x' with 'i' for list 
           print "1"
   else: 
           print "0" 
</snippet></ROW><ROW><id>20110173</id><snippet>r=Rectange(Point(r.getP1()+1),(Point(r.getP2()+1)))
</snippet></ROW><ROW><id>20110173</id><snippet>def main():
     load()
     while(playing):
         input()
         update()
         draw()
     unload()
</snippet></ROW><ROW><id>20110364</id><snippet>ndimage.label</snippet></ROW><ROW><id>20110364</id><snippet>numpy.bincount</snippet></ROW><ROW><id>20110364</id><snippet>import numpy as np
from scipy import ndimage

array = np.random.randint(0, 3, size=(200, 200))

label, num_label = ndimage.label(array == 0)
size = np.bincount(label.ravel())
biggest_label = size[1:].argmax() + 1
clump_mask = label == biggest_label
</snippet></ROW><ROW><id>20110364</id><snippet>clump_mask</snippet></ROW><ROW><id>20110421</id><snippet>from MODULE import NAME</snippet></ROW><ROW><id>20110421</id><snippet>import syslog
# …
syslog.openlog(logoption=syslog.LOG_PID)
</snippet></ROW><ROW><id>20110421</id><snippet>from</snippet></ROW><ROW><id>20110421</id><snippet>from foo import foo</snippet></ROW><ROW><id>20110421</id><snippet>from foo import bar</snippet></ROW><ROW><id>20110421</id><snippet>openlog</snippet></ROW><ROW><id>20110421</id><snippet>LOG_PID</snippet></ROW><ROW><id>20110421</id><snippet>$ python2.6
Python 2.6.7 (r267:88850, Oct 11 2012, 20:15:00)
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from syslog import openlog, LOG_PID
&gt;&gt;&gt; openlog('syslog', LOG_PID)
</snippet></ROW><ROW><id>20110421</id><snippet>&lt;syslog.h&gt;</snippet></ROW><ROW><id>20110421</id><snippet>LOG_PID</snippet></ROW><ROW><id>20110421</id><snippet>syslog.LOG_PID</snippet></ROW><ROW><id>20110421</id><snippet>openlog</snippet></ROW><ROW><id>20110421</id><snippet>ImportError</snippet></ROW><ROW><id>20110421</id><snippet>(major, minor, dummy1, dummy2, dummy3) = version_info
if major == 2 and minor == 7:
</snippet></ROW><ROW><id>20110421</id><snippet>version_info</snippet></ROW><ROW><id>20110421</id><snippet>if version_info &gt;= (2, 7):
</snippet></ROW><ROW><id>20110421</id><snippet>try</snippet></ROW><ROW><id>20110421</id><snippet>ImportError</snippet></ROW><ROW><id>20110421</id><snippet>NameError</snippet></ROW><ROW><id>20110421</id><snippet>except</snippet></ROW><ROW><id>20110421</id><snippet>try:
    from syslog import syslog, openlog, LOG_PID
    openlog('syslog', LOG_PID)
except ImportError:
    from syslog import syslog
</snippet></ROW><ROW><id>20110421</id><snippet>syslog</snippet></ROW><ROW><id>20110421</id><snippet>syslog</snippet></ROW><ROW><id>20110421</id><snippet>syslog</snippet></ROW><ROW><id>20110421</id><snippet>LOG_PID</snippet></ROW><ROW><id>20110421</id><snippet>syslog</snippet></ROW><ROW><id>20110421</id><snippet>logging</snippet></ROW><ROW><id>20110421</id><snippet>SysLogHandler</snippet></ROW><ROW><id>20110421</id><snippet>syslog</snippet></ROW><ROW><id>20110452</id><snippet>SELECT SUM(geo_count==0) - SUM(geo_count&lt;&gt;0) FROM TwTbl
</snippet></ROW><ROW><id>20110672</id><snippet>OrderedDict</snippet></ROW><ROW><id>20110672</id><snippet>collections</snippet></ROW><ROW><id>20110672</id><snippet>import collections

key_value_pairs = [('Civic86', 12.5),
                   ('Camry98', 13.2),
                   ('Sentra98', 13.8)]
smallestCars = collections.OrderedDict(key_value_pairs)

for car in smallestCars:
    print(car)
</snippet></ROW><ROW><id>20110672</id><snippet>Civic96
Camry98
Sentra98
</snippet></ROW><ROW><id>20110676</id><snippet>[]</snippet></ROW><ROW><id>20110676</id><snippet>regexp = re.compile('[-~`!@#$%^&amp;*()_=+\[\]{}\\|;:\'\",.&lt;&gt;/?]+')
</snippet></ROW><ROW><id>20110676</id><snippet>)-_</snippet></ROW><ROW><id>20110676</id><snippet>[]</snippet></ROW><ROW><id>20110676</id><snippet>)</snippet></ROW><ROW><id>20110676</id><snippet>_</snippet></ROW><ROW><id>20110676</id><snippet>[</snippet></ROW><ROW><id>20110676</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; print re.search('[)-_]', 'abcd')
None
&gt;&gt;&gt; print re.search('[)-_]', 'a1b')
&lt;_sre.SRE_Match object at 0x7f71082247e8&gt;
&gt;&gt;&gt; print re.search('[)-_]', 'a1b').group(0)
1
</snippet></ROW><ROW><id>20110676</id><snippet>&gt;&gt;&gt; print re.search('[-)_]', 'a1b')
None
</snippet></ROW><ROW><id>20110676</id><snippet>+</snippet></ROW><ROW><id>20110808</id><snippet>M</snippet></ROW><ROW><id>20110808</id><snippet>n</snippet></ROW><ROW><id>20110808</id><snippet>V</snippet></ROW><ROW><id>20110808</id><snippet>n = 10
p = 20000
V = np.random.rand(n, p)
F = np.random.rand(n, n)

def op_code(V, F):
    n, p = V.shape
    A = np.zeros(p)
    for i in xrange(n):
        for j in xrange(i+1):
            A += F[i,j] * V[i,:] * V[j,:]
    return A

def isaac_code(V, F):
    n, p = V.shape
    F = F.copy()
    F[np.triu_indices(n, 1)] = 0
    M = (V.reshape(n, 1, p) * V.reshape(1, n, p)) * F.reshape(n, n, 1)
    return M.sum((0, 1))
</snippet></ROW><ROW><id>20110808</id><snippet>In [20]: np.allclose(isaac_code(V, F), op_code(V, F))
Out[20]: True

In [21]: %timeit op_code(V, F)
100 loops, best of 3: 3.18 ms per loop

In [22]: %timeit isaac_code(V, F)
10 loops, best of 3: 24.3 ms per loop
</snippet></ROW><ROW><id>20110808</id><snippet>np.einsum</snippet></ROW><ROW><id>20110808</id><snippet>def einsum_code(V, F):
    n, p = V.shape
    F = F.copy()
    F[np.triu_indices(n, 1)] = 0
    return np.einsum('ij,ik,jk-&gt;k', F, V, V)
</snippet></ROW><ROW><id>20110808</id><snippet>In [23]: np.allclose(einsum_code(V, F), op_code(V, F))
Out[23]: True

In [24]: %timeit einsum_code(V, F)
100 loops, best of 3: 2.53 ms per loop
</snippet></ROW><ROW><id>20111214</id><snippet>from graphics import *

def main():
    win = GraphWin("Polygon", 500, 500)
    r = Rectangle(Point(10,500), Point(150,450))
    r.draw(win)
    while r.getP1().getY() &gt; 150: 
        r = rectMaker(win, r)
        time.sleep(1)

def rectMaker(win, r):
    r.undraw() # win
    r = Rectangle( Point(r.getP1().getX(), r.getP1().getY()-10), Point(r.getP2().getX(),r.getP2().getY()-10) )
    r.draw(win)
    return r

main()
</snippet></ROW><ROW><id>20111214</id><snippet>win</snippet></ROW><ROW><id>20111214</id><snippet>undraw()</snippet></ROW><ROW><id>20111214</id><snippet>getP1</snippet></ROW><ROW><id>20111214</id><snippet>getY</snippet></ROW><ROW><id>20111214</id><snippet>getP1()</snippet></ROW><ROW><id>20111214</id><snippet>getY()</snippet></ROW><ROW><id>20111214</id><snippet>Point</snippet></ROW><ROW><id>20111214</id><snippet>Rectangle</snippet></ROW><ROW><id>20111214</id><snippet>Point(Y,X)</snippet></ROW><ROW><id>20111214</id><snippet>Point(X,Y)</snippet></ROW><ROW><id>20111214</id><snippet>rectMarker</snippet></ROW><ROW><id>20111214</id><snippet>r</snippet></ROW><ROW><id>20111214</id><snippet>main</snippet></ROW><ROW><id>20111214</id><snippet>rectMaker()</snippet></ROW><ROW><id>20111214</id><snippet>r</snippet></ROW><ROW><id>20111214</id><snippet>r = rectMaker(win, r)</snippet></ROW><ROW><id>20111214</id><snippet>from graphics import *

def main():
    win = GraphWin("Polygon", 500, 500)
    r = Rectangle(Point(10,500),Point(150,450))
    r.setFill('red')
    r.setOutline('blue')
    r.setWidth(4)

    while r.getP1().getY() &gt; 150:
        r.draw(win)
        time.sleep(0.1)
        r.undraw()
        r.move(0,-10)

    win.getMouse()

main()
</snippet></ROW><ROW><id>20111434</id><snippet>Book.objects.filter(processed=True, volume__is_file_processed=True).exclude(volume__is_file_processed=False).update(status="PU")
# Or    
Book.objects.exclude(volume__is_file_processed=False).filter(processed=True, volume__is_file_processed=True).update(status="PU")
</snippet></ROW><ROW><id>20111651</id><snippet>self</snippet></ROW><ROW><id>20111651</id><snippet>self._optionsPanelLabel = Label(self, text = "New Pot Starting Value").pack()
</snippet></ROW><ROW><id>20111651</id><snippet>self._optionsPanelLabel = Label(self._optionsPanel, text = "New Pot Starting Value").pack()
</snippet></ROW><ROW><id>20111723</id><snippet>update</snippet></ROW><ROW><id>20111723</id><snippet>state_abbrev = {state[:4]: state for state in states}
state_abbrev.update({state[:5]: state for state in states})
state_abbrev.update({'.'.join(filter(str.isupper, state))+'.': state 
                     for state in states})
</snippet></ROW><ROW><id>20111723</id><snippet>&gt;&gt;&gt; state = 'New York'
&gt;&gt;&gt; caps = filter(str.isupper, state)
&gt;&gt;&gt; caps
['N', 'Y']
&gt;&gt;&gt; '.'.join(caps)
'N.Y'
&gt;&gt;&gt; '.'.join(caps) + '.'
'N.Y.'
</snippet></ROW><ROW><id>20111723</id><snippet>Miss</snippet></ROW><ROW><id>20111723</id><snippet>M.</snippet></ROW><ROW><id>20111752</id><snippet>x[x.argmin():]</snippet></ROW><ROW><id>20111752</id><snippet>In [1]: import numpy as np

In [2]: x = np.array([5, -1, 3, -11, -9, 2, -10])

In [3]: x[x.argmin():]
Out[3]: array([-11,  -9,   2, -10])
</snippet></ROW><ROW><id>20111752</id><snippet>x[x.index(min(x)):]</snippet></ROW><ROW><id>20111752</id><snippet>argmin</snippet></ROW><ROW><id>20111753</id><snippet>o = Message.objects.filter(in_reply_to_id__gt=0)
</snippet></ROW><ROW><id>20111767</id><snippet>acc = Account.create(request, user=user, create_email=create_email)
</snippet></ROW><ROW><id>20112527</id><snippet>else</snippet></ROW><ROW><id>20112527</id><snippet>elif</snippet></ROW><ROW><id>20112527</id><snippet>else</snippet></ROW><ROW><id>20112527</id><snippet>False</snippet></ROW><ROW><id>20112527</id><snippet>elif</snippet></ROW><ROW><id>20112527</id><snippet>elif (diameter&gt;=11):
     w = .15
     return w
</snippet></ROW><ROW><id>20112527</id><snippet>else: #d is not &lt; 11, so it must be &gt;= 11
     w = .15
     return w
</snippet></ROW><ROW><id>20112600</id><snippet>def getElements(data, n):
    for i in xrange(0, len(data), n):
        yield data[i:i+n]
</snippet></ROW><ROW><id>20112600</id><snippet>data = range(100)
for i in getElements(data, 20):
    print i

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
[80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</snippet></ROW><ROW><id>20112764</id><snippet># turn strings into datetimes
date_format = "%Y-%m-%d %H:%M:%S"
for row in data:
    row[1] = datetime.datetime.strptime(row[1], date_format)

split_dt = datetime.timedelta(minutes=5)
dts = (d1[1]-d0[1] for d0, d1 in zip(data, data[1:]))
split_at = [i for i, dt in enumerate(dts, 1) if dt &gt;= split_dt]
groups = [data[i:j] for i, j in zip([0]+split_at, split_at+[None])]
</snippet></ROW><ROW><id>20112840</id><snippet>enum</snippet></ROW><ROW><id>20112840</id><snippet>%module x

// Declare "mail* status" as an output parameter.
// It will be returned along with the return value of a function
// as a tuple if necessary, and will not be required as a function
// parameter.
%include &lt;typemaps.i&gt;
%apply int *OUTPUT {mail* status};

%inline %{

typedef enum mail_ {
    Out  = 0,
    Int  = 1,
    Spam = 2
} mail;

int fill_mail_data(int i, mail* status)
{
    *status = Spam;
    return i+1;
}

%}
</snippet></ROW><ROW><id>20112840</id><snippet>&gt;&gt;&gt; import x
&gt;&gt;&gt; dir(x)    # Note no "mail" object, just Int, Out, Spam which are ints.
['Int', 'Out', 'Spam', '__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', '_newclass', '_object', '_swig_getattr', '_swig_property', '_swig_repr', '_swig_setattr', '_swig_setattr_nondynamic', '_x', 'fill_mail_data']
&gt;&gt;&gt; x.fill_mail_data(5)
[6, 2]
&gt;&gt;&gt; ret,mail = x.fill_mail_data(5)
&gt;&gt;&gt; mail == x.Spam
True
</snippet></ROW><ROW><id>20112846</id><snippet>groupby</snippet></ROW><ROW><id>20112846</id><snippet>&gt;&gt;&gt; df
  Address  ID
0    12 A  Aa
1    66 C  Bb
2    10 B  Cc
3    10 B  Dd
4    12 A  Ee
5    12 A  Ff
&gt;&gt;&gt; {k: list(v) for k,v in df.groupby("Address")["ID"]}
{'66 C': ['Bb'], '12 A': ['Aa', 'Ee', 'Ff'], '10 B': ['Cc', 'Dd']}
</snippet></ROW><ROW><id>20112847</id><snippet>list1 = [101, 110, 136, 380]
list2 = [101.04, 110.009, 264.5, 379.9, 466.4, 629.6, 724.4, 799.8, 914.3]
#guarantee that lists are sorted
list1.sort()
list2.sort()
#Set margin differently as needed
margin = 100
idx = 0;
for i in list1:
    while i &gt; list2[idx] and not abs(i - list2[idx]) &lt;= margin:
        idx+=1
    tempIdx = idx
    #Print out all the elements in list2 that are within the margin for list1
    while abs(i - list2[tempIdx]) &lt;= margin:
        print list2[tempIdx]
        tempIdx+=1
</snippet></ROW><ROW><id>20112900</id><snippet>Hobby Dev</snippet></ROW><ROW><id>20112900</id><snippet>Ignite Plan</snippet></ROW><ROW><id>20112900</id><snippet>MongoHQ Sandbox plan</snippet></ROW><ROW><id>20112961</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)
    subjects = hxs.select("//div[@class='BlogList']")
    for subject in subjects:
        item = BlogItem()
        url =  "http://"+subject.select('a/@href').extract()+".hypestat.com"
        request =  Request(url,  callback = self.parse_statdetail)
        request.meta['item'] = item
        yield request

def parse_statdetail(self, response):
    hxs = HtmlXPathSelector(response)
    item = response.meta['item']
    item ["origin"] = response.url
    item ["stat"] = hxs.select("//div[@class='website_report_text']/b/text()").extract()[2])
    yield item
</snippet></ROW><ROW><id>20113434</id><snippet>import time
import threading
def test():
   for n in range (0, 10):
       print "hello"
       time.sleep(1)
 t = threading.Thread(target = test)
 t.start()
</snippet></ROW><ROW><id>20113434</id><snippet>import maya.utils import maya.cmds
def doSphere( radius ):
    maya.cmds.sphere( radius=radius )
maya.utils.executeInMainThreadWithResult( doSphere, 5.0 )
</snippet></ROW><ROW><id>20113563</id><snippet>v</snippet></ROW><ROW><id>20113563</id><snippet>M.dot(M.T)</snippet></ROW><ROW><id>20113563</id><snippet>v</snippet></ROW><ROW><id>20113563</id><snippet>v</snippet></ROW><ROW><id>20113563</id><snippet>v</snippet></ROW><ROW><id>20113563</id><snippet>a</snippet></ROW><ROW><id>20113563</id><snippet>&gt;&gt;&gt; u, d, v = np.linalg.svd(a)
&gt;&gt;&gt; D = np.zeros_like(a)
&gt;&gt;&gt; idx = np.arange(a.shape[1])
&gt;&gt;&gt; D[idx, idx] = d
&gt;&gt;&gt; np.allclose(a, u.dot(D).dot(v))
True
&gt;&gt;&gt; v[2] *= -1
&gt;&gt;&gt; np.allclose(a, u.dot(D).dot(v))
True
</snippet></ROW><ROW><id>20113563</id><snippet>v</snippet></ROW><ROW><id>20113563</id><snippet>&gt;&gt;&gt; vv = v.astype(np.complex)
&gt;&gt;&gt; vv[0] *= (1+1.j)/np.sqrt(2)
&gt;&gt;&gt; np.allclose(a, u.dot(D).dot(v))
True
</snippet></ROW><ROW><id>20114122</id><snippet>    for i in range(0,10):
        for ch in spl:
            if ch.isdigit() and int(ch) == i:
                alist[i] += 1
</snippet></ROW><ROW><id>20114236</id><snippet>i</snippet></ROW><ROW><id>20114236</id><snippet>&gt;&gt;&gt; i
[8, -10, -14, 3, 5, 1, -7, -8, 11, 12, -6, -1, 15, -4, 6, 14, 10, 13, -2, -12, -5, -9, 4, -15, -11, -13, 9, 7, 0, 2, -3]
</snippet></ROW><ROW><id>20114236</id><snippet>&gt;&gt;&gt; i2 = sorted(i)
&gt;&gt;&gt; i2
[-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</snippet></ROW><ROW><id>20114236</id><snippet>&gt;&gt;&gt; qn1 = filter(lambda x: x &gt;= 0 &lt; 15, i2)[::-1]
&gt;&gt;&gt; qn1
[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; qn2 = i2[:i2.index(0)+1][::-1]
&gt;&gt;&gt; qn2
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]
&gt;&gt;&gt; qn3 = i2[:i2.index(0)+1]
&gt;&gt;&gt; qn3
[-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]
&gt;&gt;&gt; qn4 = filter(lambda x: x&gt;= 0 &lt; 15, i2)
&gt;&gt;&gt; qn4
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</snippet></ROW><ROW><id>20114377</id><snippet>django-registration</snippet></ROW><ROW><id>20114517</id><snippet>for i in range(nrows):
    for j in range(ncols):
        if (i % 2 != 0):
            grid[i][j] += 20*(j+1)
        else:
            grid[i][j] += 10*(j+1)
</snippet></ROW><ROW><id>20114517</id><snippet>[10, 20, 30, 40]
[20, 40, 60, 80]
[10, 20, 30, 40]
[20, 40, 60, 80]
</snippet></ROW><ROW><id>20114807</id><snippet>make_process.poll()
</snippet></ROW><ROW><id>20114807</id><snippet>make_process = subprocess.Popen("make clean all", stderr=subprocess.STDOUT)
if make_process.wait() != 0:
     something_went_wrong();
</snippet></ROW><ROW><id>20114891</id><snippet>u'[abc]'</snippet></ROW><ROW><id>20114891</id><snippet>u'(?:a|b|c)'</snippet></ROW><ROW><id>20114891</id><snippet>old_string</snippet></ROW><ROW><id>20114891</id><snippet># -*- coding: utf-8 -*-
import re
from functools import partial

old_string = u"""
  ò:ha becomes ò:a
  ä:hà becomes ä:à
  aha becomes aa
  üha becomes üa
  ëhë becomes ëë"""

# (?&lt;=a|b|c)(:?)h(?=a|b|c)
chars = u"a e i o u ä ë ö ü á é í ó ú à è ì ò".split()
pattern = u"(?&lt;=%(vowels)s)(:?)h(?=%(vowels)s)" % dict(vowels=u"|".join(chars))
remove_h = partial(re.compile(pattern).sub, ur'\1')
# remove 'h' followed and preceded by vowels
print(remove_h(old_string))
</snippet></ROW><ROW><id>20114891</id><snippet>  ò:a becomes ò:a
  ä:à becomes ä:à
  aa becomes aa
  üa becomes üa
  ëë becomes ëë
</snippet></ROW><ROW><id>20114891</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>20115027</id><snippet>def qdsub(s):
    return float(re.sub('\,', '.', str(s)[2:-1]))
</snippet></ROW><ROW><id>20115152</id><snippet>Combinations</snippet></ROW><ROW><id>20115152</id><snippet>__repr__</snippet></ROW><ROW><id>20115152</id><snippet>__str__</snippet></ROW><ROW><id>20115152</id><snippet>def __repr__ (self):
    return self.x+self.y
</snippet></ROW><ROW><id>20115152</id><snippet>List contains: [A1, A2, A3, B1, B2, B3, C1, C2, C3]
</snippet></ROW><ROW><id>20115190</id><snippet>d = {'hi':[1,2,3,4], 'bye':[5,6,7,8]}
t = 2
print {k:[j for i in zip(*[v for _ in range(t)]) for j in i] for k, v in d.items()}
print {k:v*t for k, v in d.items()}
</snippet></ROW><ROW><id>20115190</id><snippet>{'hi': [1, 1, 2, 2, 3, 3, 4, 4], 'bye': [5, 5, 6, 6, 7, 7, 8, 8]}
{'hi': [1, 2, 3, 4, 1, 2, 3, 4], 'bye': [5, 6, 7, 8, 5, 6, 7, 8]}
</snippet></ROW><ROW><id>20115276</id><snippet>django.utils.log.RequireDebugFalse</snippet></ROW><ROW><id>20115522</id><snippet>int i;
do
{
  i = 5 * (rand5() - 1) + rand5();  // i is now uniformly random between 1 and 25
} while(i &gt; 21);
// i is now uniformly random between 1 and 21
return i % 7 + 1;  // result is now uniformly random between 1 and 7
</snippet></ROW><ROW><id>20115522</id><snippet>def rand7():
i = 0;

while True:
    i = 5 * (rand5() -1) + rand5()
    if i &gt; 21:
        break
return i % 7 + 1
</snippet></ROW><ROW><id>20115580</id><snippet>import numpy as np
import string

y = np.array([[0.2,0.8,0],[0,1,0],[0,0.3,0.7]])

def transform(y,labels):
  f = np.vectorize(lambda i : string.letters[i])
  y = f(y.argmax(axis=1)) 
  return y

y = transform(y,'abc') 
</snippet></ROW><ROW><id>20115859</id><snippet>print "Mean Squared Error: ", np.mean((y-func(x, *popt))**2)

ss_res = np.dot((yn - func(x, *popt)),(yn - func(x, *popt)))
ymean = np.mean(yn)
ss_tot = np.dot((yn-ymean),(yn-ymean))
print "Mean R :",  1-ss_res/ss_tot
</snippet></ROW><ROW><id>20115987</id><snippet>Lastname, Address</snippet></ROW><ROW><id>20115987</id><snippet>def helper(k, g):
    r = len(g)
    address, lastname = k
    if r &gt; 2:
        lastname = 'The {} Family'.format(lastname)
    elif r &gt; 1:
        lastname = ' and '.join(g['Name']) + ', ' + lastname
    else:
        lastname = g['Name'].squeeze() + ' ' + lastname
    return (address, lastname)

grouped = df.groupby(['Address', 'Lastname'])
</snippet></ROW><ROW><id>20115987</id><snippet>vals = (helper(k, g) for k, g in grouped)
</snippet></ROW><ROW><id>20115987</id><snippet>pd.DataFrame(vals, columns=['Address','Name'])

     Address                Name
0   200 G Ct    E and A, Johnson
1   200 G Ct             J Smith
2  60 N Blvd            L Diablo
3    63 F Wy  The Simpson Family
</snippet></ROW><ROW><id>20115987</id><snippet>Lastname, Address</snippet></ROW><ROW><id>20115987</id><snippet>grouped = df.groupby(['Address', 'Lastname'])
res = grouped.apply(lambda x: pd.Series({'Len': len(x), 'Names': ' and '.join(x['Name'][:2])})).reset_index()

     Address Lastname  Len    Names
0   200 G Ct  Johnson    2  E and A
1   200 G Ct    Smith    1        J
2  60 N Blvd   Diablo    1        L
3    63 F Wy  Simpson    3  M and H
</snippet></ROW><ROW><id>20115987</id><snippet>res.ix[res['Len'] &gt; 2, 'Lastname'] = 'The ' + res['Lastname'] + ' Family'
res.ix[res['Len'] == 2, 'Lastname'] = res['Names'] + ', ' + res['Lastname']
res.ix[res['Len'] &lt; 2, 'Lastname'] = res['Names'] + ' ' + res['Lastname']
del res['Len']
del res['Names']

     Address            Lastname
0   200 G Ct    E and A, Johnson
1   200 G Ct             J Smith
2  60 N Blvd            L Diablo
3    63 F Wy  The Simpson Family
</snippet></ROW><ROW><id>20115996</id><snippet>liblas</snippet></ROW><ROW><id>20115996</id><snippet>liblas</snippet></ROW><ROW><id>20115996</id><snippet>liblas</snippet></ROW><ROW><id>20115996</id><snippet>h = f.get_header()
print(h.get_xml())
</snippet></ROW><ROW><id>20115996</id><snippet>p.data[18:19]</snippet></ROW><ROW><id>20115996</id><snippet>p.get_data()[18:19]</snippet></ROW><ROW><id>20115996</id><snippet>p.point_source_id</snippet></ROW><ROW><id>20115996</id><snippet>p.get_point_source_id()</snippet></ROW><ROW><id>20115996</id><snippet>data</snippet></ROW><ROW><id>20115996</id><snippet>p.point_source_id</snippet></ROW><ROW><id>20115996</id><snippet>for</snippet></ROW><ROW><id>20115996</id><snippet>for p in f:
    line_num = p.get_point_source_id()
    if line_num not in line_list:
        line_list.append(line_num)
    counter += 1
</snippet></ROW><ROW><id>20115996</id><snippet>counter == h.get_count()
</snippet></ROW><ROW><id>20115996</id><snippet>line_set = set(p.get_point_source_id() for p in f)
</snippet></ROW><ROW><id>20115996</id><snippet>p.get_point_source_id()</snippet></ROW><ROW><id>20116317</id><snippet>wild import</snippet></ROW><ROW><id>20116317</id><snippet>import *</snippet></ROW><ROW><id>20116317</id><snippet>pygame.locals</snippet></ROW><ROW><id>20116317</id><snippet>import pygame, sys</snippet></ROW><ROW><id>20116369</id><snippet>Father</snippet></ROW><ROW><id>20116369</id><snippet>d = datetime.date.today()
father_list = Father.objects.filter(
    child__birth_day__lte=datetime.date(d.year-15, d.month, d.day))
</snippet></ROW><ROW><id>20116369</id><snippet>from django.db.models import Max
father_list = Father.objects.annotate(max_birthday=Max('child__birth_day')
    ).filter(max_birthday__lte=datetime.date(d.year-15, d.month, d.day))
</snippet></ROW><ROW><id>20116409</id><snippet>&gt;&gt;&gt; dom.findall('participant')
[&lt;Element 'participant' at 0x10dd74090&gt;, &lt;Element 'participant' at 0x10dd74250&gt;]
&gt;&gt;&gt; len(dom.findall('participant'))
2
</snippet></ROW><ROW><id>20116421</id><snippet>[-1]</snippet></ROW><ROW><id>20116421</id><snippet>&gt;&gt;&gt; lst = range(10)
&gt;&gt;&gt; lst
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; lst[-1]
9
</snippet></ROW><ROW><id>20116421</id><snippet>pop</snippet></ROW><ROW><id>20116421</id><snippet>pos = Position()
print pos
last_item = pos.choose_last()
print last_item 
</snippet></ROW><ROW><id>20116421</id><snippet>P1 = Position()
print P1
P2 = Position.choose_last()
print P2
</snippet></ROW><ROW><id>20116682</id><snippet>bandwidth</snippet></ROW><ROW><id>20116682</id><snippet>MeanShift</snippet></ROW><ROW><id>20116741</id><snippet>#!/usr/bin/python

from skimage import morphology
import cv2
import math
import numpy as np

im = cv2.imread("objects.png")
dst = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

dst = 1 - dst / 255
dst = morphology.skeletonize(dst).astype(np.uint8)

objs = 255 * dst

#cv2.HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]])
rho = 1
theta = math.pi / 180
threshold = 1
minLineLength = 3
maxLineGap = 5

lines = np.ndarray([1, 1, 4, 4])
lines = cv2.HoughLinesP(dst, rho, theta, threshold, lines, minLineLength, maxLineGap)

lineColor = (0, 255, 0)  # red

for line in lines[0]:
        #print line
        cv2.line(im, (line[0], line[1]), (line[2], line[3]), lineColor, 1, 8)

#
#   Now you need to go through lines and find those that intersect
#   You will notice that some lines have small gaps where they should
#   join to a perpendicular line. Before find intersections you would 
#   need to make each line longer (just by adjusting the numbers in lines)
#   to get around this problem.
#

cv2.imshow('Objects', objs)
cv2.imshow('Lines', im)
cv2.imwrite('lines.png', im)

cv2.waitKey() 
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>20116812</id><snippet>loader = QtUiTools.QUiLoader()
ui = loader.load('filename.ui', parent)
my_widget = ui.my_widget_name
</snippet></ROW><ROW><id>20116812</id><snippet>my_widget</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20116881</id><snippet>for</snippet></ROW><ROW><id>20116881</id><snippet>range</snippet></ROW><ROW><id>20116881</id><snippet>for</snippet></ROW><ROW><id>20116881</id><snippet>Python 2.7.5
&gt;&gt;&gt; import dis
&gt;&gt;&gt; def x():
...   for i in range(1,11):
...     pass
...
&gt;&gt;&gt; dis.dis(x)
  2           0 SETUP_LOOP              23 (to 26)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (1)
              9 LOAD_CONST               2 (11)
             12 CALL_FUNCTION            2
             15 GET_ITER
        &gt;&gt;   16 FOR_ITER                 6 (to 25)
             19 STORE_FAST               0 (i)

  3          22 JUMP_ABSOLUTE           16
        &gt;&gt;   25 POP_BLOCK
        &gt;&gt;   26 LOAD_CONST               0 (None)
             29 RETURN_VALUE
</snippet></ROW><ROW><id>20116881</id><snippet>&gt;&gt;&gt; def g(x):
...   while x &lt; 11:
...     yield x
...     x = x + 1
...
&gt;&gt;&gt; def y():
...   for i in g(1):
...     pass
...
&gt;&gt;&gt; dis.dis(y)
  2           0 SETUP_LOOP              20 (to 23)
              3 LOAD_GLOBAL              0 (g)
              6 LOAD_CONST               1 (1)
              9 CALL_FUNCTION            1
             12 GET_ITER
        &gt;&gt;   13 FOR_ITER                 6 (to 22)
             16 STORE_FAST               0 (i)

  3          19 JUMP_ABSOLUTE           13
        &gt;&gt;   22 POP_BLOCK
        &gt;&gt;   23 LOAD_CONST               0 (None)
             26 RETURN_VALUE
&gt;&gt;&gt; dis.dis(g)
  2           0 SETUP_LOOP              31 (to 34)
        &gt;&gt;    3 LOAD_FAST                0 (x)
              6 LOAD_CONST               1 (11)
              9 COMPARE_OP               0 (&lt;)
             12 POP_JUMP_IF_FALSE       33

  3          15 LOAD_FAST                0 (x)
             18 YIELD_VALUE
             19 POP_TOP

  4          20 LOAD_FAST                0 (x)
             23 LOAD_CONST               2 (1)
             26 BINARY_ADD
             27 STORE_FAST               0 (x)
             30 JUMP_ABSOLUTE            3
        &gt;&gt;   33 POP_BLOCK
        &gt;&gt;   34 LOAD_CONST               0 (None)
             37 RETURN_VALUE
</snippet></ROW><ROW><id>20116881</id><snippet>y</snippet></ROW><ROW><id>20116881</id><snippet>x</snippet></ROW><ROW><id>20116881</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>20116881</id><snippet>x</snippet></ROW><ROW><id>20116881</id><snippet>&gt;&gt;&gt; def q():
...   x = 1
...   while x &lt; 11:
...     x = x + 1
...
&gt;&gt;&gt; dis.dis(q)
  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (x)

  3           6 SETUP_LOOP              26 (to 35)
        &gt;&gt;    9 LOAD_FAST                0 (x)
             12 LOAD_CONST               2 (11)
             15 COMPARE_OP               0 (&lt;)
             18 POP_JUMP_IF_FALSE       34

  4          21 LOAD_FAST                0 (x)
             24 LOAD_CONST               1 (1)
             27 BINARY_ADD
             28 STORE_FAST               0 (x)
             31 JUMP_ABSOLUTE            9
        &gt;&gt;   34 POP_BLOCK
        &gt;&gt;   35 LOAD_CONST               0 (None)
             38 RETURN_VALUE
</snippet></ROW><ROW><id>20116881</id><snippet>range</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20116881</id><snippet>&gt;&gt;&gt; class G(object):
...   def __init__(self, x):
...     self.x = x
...   def __iter__(self):
...     return self
...   def next(self):
...     x = self.x
...     if x &gt;= 11:
...       raise StopIteration
...     x = x + 1
...     return x - 1
...
&gt;&gt;&gt; dis.dis(G.next)
  7           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (x)
              6 STORE_FAST               1 (x)

  8           9 LOAD_FAST                1 (x)
             12 LOAD_CONST               1 (11)
             15 COMPARE_OP               5 (&gt;=)
             18 POP_JUMP_IF_FALSE       30

  9          21 LOAD_GLOBAL              1 (StopIteration)
             24 RAISE_VARARGS            1
             27 JUMP_FORWARD             0 (to 30)

 10     &gt;&gt;   30 LOAD_FAST                1 (x)
             33 LOAD_CONST               2 (1)
             36 BINARY_ADD
             37 STORE_FAST               1 (x)

 11          40 LOAD_FAST                1 (x)
             43 LOAD_CONST               2 (1)
             46 BINARY_SUBTRACT
             47 RETURN_VALUE
</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20116881</id><snippet>y</snippet></ROW><ROW><id>20116881</id><snippet>&gt;&gt;&gt; def z():
...   for i in G(1):
...     pass
...
&gt;&gt;&gt; dis.dis(z)
  2           0 SETUP_LOOP              20 (to 23)
              3 LOAD_GLOBAL              0 (G)
              6 LOAD_CONST               1 (1)
              9 CALL_FUNCTION            1
             12 GET_ITER
        &gt;&gt;   13 FOR_ITER                 6 (to 22)
             16 STORE_FAST               0 (i)

  3          19 JUMP_ABSOLUTE           13
        &gt;&gt;   22 POP_BLOCK
        &gt;&gt;   23 LOAD_CONST               0 (None)
             26 RETURN_VALUE
</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20116881</id><snippet>StopIteration</snippet></ROW><ROW><id>20117033</id><snippet>datetime</snippet></ROW><ROW><id>20117033</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>20117033</id><snippet>myDate.strftime("%Y-%m-%d")
</snippet></ROW><ROW><id>20117034</id><snippet> $ virtualenv --help
Usage: virtualenv [OPTIONS] DEST_DIR

Options:
  ...
  -p PYTHON_EXE, --python=PYTHON_EXE
                        The Python interpreter to use, e.g.,
                        --python=python2.5 will use the python2.5 interpreter
                        to create the new environment.  The default is the
                        interpreter that virtualenv was installed with
                        (/usr/bin/python)
</snippet></ROW><ROW><id>20117137</id><snippet>pessimistic</snippet></ROW><ROW><id>20117137</id><snippet>optimistic</snippet></ROW><ROW><id>20117137</id><snippet>def get_next_task():
    session = ...
    task = None
    while not(task):
        try:
            query = session.query(models.Task).order_by(models.Task.ordr).limit(1)
                for row in query:
                    task = row
                    session.delete(row)
            session.commit()
            if not(task):
                return # no more tasks found
        except TODO_FIND_PROPER_EXCEPTION_TO_HANDLE as _exc:
            pass # or log the statement

    # maybe need to make_transient
    return task
</snippet></ROW><ROW><id>20117168</id><snippet>if __name__ == '__main__':
    p = Process(target=login, args=(name,pwd))
    p.start()
    p.join()
</snippet></ROW><ROW><id>20117168</id><snippet>if __name__ == '__main__':
    p = Thread(target=login, args=(name,pwd))
    p.start()
    p.join()
</snippet></ROW><ROW><id>20117168</id><snippet>if __name__ == '__main__':
    login(name, pwd)
</snippet></ROW><ROW><id>20117211</id><snippet>process.communicate()</snippet></ROW><ROW><id>20117211</id><snippet>ccextractorwin.exe</snippet></ROW><ROW><id>20117211</id><snippet>-stdout</snippet></ROW><ROW><id>20117211</id><snippet>import subprocess
process = subprocess.Popen(
    ['ccextractorwin.exe', '-stdout', '-quiet', 'myvideo.mpg'],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT
)
all_output = []
while True:
    out_line = process.stdout.readline()
    all_output.append(out_line)  # Add this line to the list of lines to keep
    if out_line == u'\n':  # We've hit an empty line, or whatever else you deem like a good stopping point
        break  # the while loop

# Now, kill the process dead in its tracks.
# This probably isn't great for open file handles, but whatever
process.kill()
</snippet></ROW><ROW><id>20117211</id><snippet>SIGKILL</snippet></ROW><ROW><id>20117481</id><snippet>from xlutils.copy import copy
from xlrd import open_workbook
import xlwt
import os
import shutil
import glob

def openexcel_main():
    book = open_workbook('input.xls',formatting_info=True)
    sheet = book.sheet_by_index(0)
    wb = copy(book)
    w_sheet = wb.get_sheet(0)
    folder_name=['do_not_delete','internal_builds']
    for j in range (0,2):
        folder=folder_name.pop()
        for i in range (1,(sheet.nrows)):
            cell_test_group = sheet.cell(i,0)
            data=str(cell_test_group.value)
            print '#####################################'
            print data
    list=[]
    source_path='/mnt/'+folder+'/pybuild/'+data+'/MAIN/'
    if os.path.exists(source_path):
        try:
            os.chdir(source_path)
            all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]
            for dirs in all_subdirs:
                dir = os.path.join('/mnt/'+folder+'/pybuild/'+data+'/MAIN/', dirs)
            os.chdir(dir)
            current = os.getcwd()
            new = str(current).split("/")[6]
            list.append(new)
            list.sort()
            val=list
            for i in range (1,4):
                if val==[]:
                    break
                else:
                    print i
                current_build_number=val.pop()
                print 'Current_Build:'+current_build_number
                source_path_copy = r""+ source_path+"/"+current_build_number+"/"
                print 'Copying From:'+ source_path_copy
                dest_path = r"/home/builds_repo/"+folder+"/pybuild/"+data+"/MAIN/"+current_build_number+"/"
                os.chdir(source_path_copy)
                file_name=(glob.glob('*[_bin].*')).pop()
                print 'File_Copied:'+ file_name
                if not os.path.exists(dest_path):
                    os.makedirs(dest_path)

                shutil.copyfile(source_path_copy + file_name, dest_path + file_name)
         except Exception ,e: #Use Exception if not sure which exception will raise
            print'File Not Found ..',e
            #raise
def main():
    openexcel_main()


if __name__ == '__main__': #Use main
    main()
</snippet></ROW><ROW><id>20117660</id><snippet>INNER JOIN</snippet></ROW><ROW><id>20117660</id><snippet>WHERE</snippet></ROW><ROW><id>20117660</id><snippet>SQL</snippet></ROW><ROW><id>20117660</id><snippet>print '\nInner Join2'
for d, e in session.query(Department, Emp).join(Emp):
    print d.name, e.name

print '\nOuter Join' # from Dep -&gt; Emp
for d, e in session.query(Department, Emp).outerjoin(Emp):
    print d.name, e and e.name # NOTE: e Might be None because of the OUTER JOIN

print '\nOuter Join2' # from Emp -&gt; Dep
for e, d in session.query(Emp, Department).outerjoin(Department):
    print e.name, d and d.name # NOTE: d Might be None because of the OUTER JOIN
</snippet></ROW><ROW><id>20117660</id><snippet>class Department(Base):
    ...
    employees = relationship("Emp", backref="department")
    ...

class Emp(Base):
    ...
    manager = relationship("Emp", backref="team", remote_side=[id])
    ...
</snippet></ROW><ROW><id>20117660</id><snippet>the_boss = session.query(Emp).get(1)
print the_boss.name
print the_boss.team
assert the_boss.team[0].manager == the_boss
print the_boss.department
</snippet></ROW><ROW><id>20117693</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20117693</id><snippet>datetime.date</snippet></ROW><ROW><id>20117921</id><snippet>{{ field }}</snippet></ROW><ROW><id>20118188</id><snippet>def UpdateQuery(data,where):
    if isinstance(data, dict) and where:
        vals = ','.join(["%s=?" %(k) for k,v in data.iteritems()])
        query = "update myTable set %s where id=?" % (vals)
        res = cr.execute(query,where)
</snippet></ROW><ROW><id>20118311</id><snippet>f = open("a.txt", "r")
sf = f.read()
f.close()

sf += "some more text"
f = open("a.txt", "w")
f.write(sf)
f.close()
</snippet></ROW><ROW><id>20118437</id><snippet>import os
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
</snippet></ROW><ROW><id>20118437</id><snippet>from myapp.settings import PROJECT_ROOT
</snippet></ROW><ROW><id>20118448</id><snippet>plt.plot(x, yint(x), color=(0.5, 0.5, 0.5))</snippet></ROW><ROW><id>20118448</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

for t in np.arange(0.,2., 0.4):
    x = np.linspace(0.,4, 100)
    y = np.sin(x-2*t) + 0.01 * np.random.normal(size=x.shape)
    yint = interp1d(x, y)
    print t
    col = (t/2.0, t/2.0, t/2.0)
    plt.plot(x, yint(x), color=col)

plt.show()
</snippet></ROW><ROW><id>20118484</id><snippet>re.sub(r'\b(\s*)"(?!,|[ \t]*$)', r'\1""', s)
</snippet></ROW><ROW><id>20118823</id><snippet>str.rsplit()</snippet></ROW><ROW><id>20118823</id><snippet>None</snippet></ROW><ROW><id>20118823</id><snippet>&gt;&gt;&gt; 'Willem Jan van Steen         9859  77\n'.rsplit(None, 2)
['Willem Jan van Steen', '9859', '77']
</snippet></ROW><ROW><id>20118823</id><snippet>with open(inputfilename) as inputfh:
    for line in inputfh:
        columns = line.rsplit(None, 2)
        if len(columns) &lt; 3:
            continue  # not a line with name and numbers
        percentage = int(columns[2])
        if 70 &lt;= percentage &lt;= 80:
            # we have a line that falls within your criteria
</snippet></ROW><ROW><id>20118939</id><snippet>def find_locks(item, ids):
    if item.video_id:
        yield (item.video_id, ids)
    for i in CatalogItem.objects.filter(parent=item):
        nxt = ids + [i.id] if i.is_lock else ids
        for x in find_locks(i, nxt):
            yield x
</snippet></ROW><ROW><id>20118939</id><snippet>yield from</snippet></ROW><ROW><id>20119136</id><snippet>elapsed_time = end - start

if elapsed_time &gt; 20:
    # code
else:
    # other code
</snippet></ROW><ROW><id>20119350</id><snippet>action</snippet></ROW><ROW><id>20119350</id><snippet>&lt;form method="post" action="https://www.ibvpn.com/billing/dologin.php" name="frmlogin"&gt;
</snippet></ROW><ROW><id>20119350</id><snippet>https://www.ibvpn.com/billing/dologin.php
</snippet></ROW><ROW><id>20119350</id><snippet>soup.form['action']</snippet></ROW><ROW><id>20119350</id><snippet>r = s.post(soup.form['action'], data=body)
</snippet></ROW><ROW><id>20119350</id><snippet>s.cookies</snippet></ROW><ROW><id>20119350</id><snippet>User-Agent</snippet></ROW><ROW><id>20119350</id><snippet>Accept-*</snippet></ROW><ROW><id>20119350</id><snippet>Referrer</snippet></ROW><ROW><id>20119406</id><snippet>itertools.combinations</snippet></ROW><ROW><id>20119406</id><snippet>set</snippet></ROW><ROW><id>20119406</id><snippet>&gt;&gt;&gt; dic = {'01':[1,2], '02':[1], '03':[2,3]}
&gt;&gt;&gt; import itertools as IT
&gt;&gt;&gt; {a+b: list(set(dic[a]+dic[b])) for a,b in IT.combinations(dic, 2)}
{'0203': [1, 2, 3], '0301': [1, 2, 3], '0201': [1, 2]}
</snippet></ROW><ROW><id>20119406</id><snippet>join</snippet></ROW><ROW><id>20119406</id><snippet>sorted</snippet></ROW><ROW><id>20119406</id><snippet>&gt;&gt;&gt; {''.join(sorted([a,b])): list(set(dic[a]+dic[b])) for a,b in IT.combinations(dic, 2)}
{'0203': [1, 2, 3], '0103': [1, 2, 3], '0102': [1, 2]}
</snippet></ROW><ROW><id>20119463</id><snippet>from dateutil.parser import parse

s1 = "2013-11-21T07:45:51ZUTC+0000" # Europe
s2 = "2013-11-21T13:15:28ZUTC+0530" # India

def new_parse(string):
    return parse(string.replace('ZUTC', ''))

dt1 = new_parse(s1)
dt2 = new_parse(s2)
print (dt1-dt2).total_seconds()
</snippet></ROW><ROW><id>20119475</id><snippet>import subprocess as sp
PATH="ABCXYZ"
username = "admin"
password = "pass"
query = "select * from user;"
command = "/usr/local/%s/dbscript -u %s -p %s -q %s" % (PATH, username, password, query)
#Next line print '/usr/local/ABCXYZ/dbscript -u admin -p pass -q select * from user;' for me.
print command # 
sp.Popen(command.split(), shell=True)
</snippet></ROW><ROW><id>20119475</id><snippet>shell</snippet></ROW><ROW><id>20119561</id><snippet>excluded_ids = [user.id for user in MarkedUserIds.objects.filter(marked_user_id = {specific_one_user_id})]
</snippet></ROW><ROW><id>20119561</id><snippet>WaitingUser.objects.exclude(user_id__in = excluded_ids)
</snippet></ROW><ROW><id>20119561</id><snippet>WaitingUser.objects.exclude(id__in = MarkedUserIds.objects.filter(marked_user_id = {specific_one_user_id}).values_list('id', flat=True))
</snippet></ROW><ROW><id>20119876</id><snippet>&gt;&gt;&gt; config.get('section1', 'key1')
'value1, value2, value3'
</snippet></ROW><ROW><id>20119876</id><snippet>split</snippet></ROW><ROW><id>20119876</id><snippet>&gt;&gt;&gt; key1 = config.get('section1', 'key1').split(', ')
&gt;&gt;&gt; key1
['value1', 'value2', 'value3']

&gt;&gt;&gt; for v in key1:
...  print v
... 
value1
value2
value3
</snippet></ROW><ROW><id>20120069</id><snippet>time.sleep()</snippet></ROW><ROW><id>20120069</id><snippet>after</snippet></ROW><ROW><id>20120069</id><snippet>...
b = tk.Button(..., command=self.pause)
def pause(self):
    if self.is_sleeping:
        self.pause()
...
self.is_sleeping = True
self.after(sleep_period, lambda: self.is_sleeping = False)
self.start_animation()
</snippet></ROW><ROW><id>20120225</id><snippet>&gt;&gt;&gt; df1 = pd.pivot_table(df, values=['D'], rows=['B'], aggfunc=np.sum)
&gt;&gt;&gt; df2 = pd.pivot_table(df, values=['E'], rows=['B'], aggfunc=np.mean)
&gt;&gt;&gt; pd.concat((df1, df2), axis=1)
          D         E
B                    
A  1.810847 -0.524178
B  2.762190 -0.443031
C  0.867519  0.078460
</snippet></ROW><ROW><id>20120225</id><snippet>aggfunc</snippet></ROW><ROW><id>20120225</id><snippet>&gt;&gt;&gt; df3 = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc=[np.sum, np.mean])
&gt;&gt;&gt; df3
        sum                mean          
          D         E         D         E
B                                        
A  1.810847 -4.193425  0.226356 -0.524178
B  2.762190 -3.544245  0.345274 -0.443031
C  0.867519  0.627677  0.108440  0.078460
&gt;&gt;&gt; df3 = df3.ix[:, [('sum', 'D'), ('mean','E')]]
&gt;&gt;&gt; df3.columns = ['D', 'E']
&gt;&gt;&gt; df3
          D         E
B                    
A  1.810847 -0.524178
B  2.762190 -0.443031
C  0.867519  0.078460
</snippet></ROW><ROW><id>20120225</id><snippet>aggfunc</snippet></ROW><ROW><id>20120225</id><snippet>aggfunc</snippet></ROW><ROW><id>20120225</id><snippet>{'D':np.mean, 'E':np.sum}</snippet></ROW><ROW><id>20120225</id><snippet>&gt;&gt;&gt; df.groupby('B').aggregate({'D':np.sum, 'E':np.mean})
          E         D
B                    
A -0.524178  1.810847
B -0.443031  2.762190
C  0.078460  0.867519
</snippet></ROW><ROW><id>20120474</id><snippet>Segment</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>class Point:
    def __init__(self, xcoord = 0, ycoord = 0):
        self.x = xcoord
        self.y = ycoord
</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>length()</snippet></ROW><ROW><id>20120474</id><snippet>length</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>distance_to(other_point)</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>segment_length(point1, point2)</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>def segment_length(p1, p2):
   return math.sqrt((p2.x-p1.x)**2 + (p2.y-p1.y)**2)
</snippet></ROW><ROW><id>20120474</id><snippet>Point</snippet></ROW><ROW><id>20120474</id><snippet>self</snippet></ROW><ROW><id>20120481</id><snippet>import Tkinter, time, tkMessageBox

top = Tkinter.Tk()
top.withdraw() #to make the main window invisible

def notify(title='Default title', notification='Default notification'):
   tkMessageBox.showinfo(title, notification)

notify()
notify('Yo','Did you know this is a notification!')
</snippet></ROW><ROW><id>20121035</id><snippet>__getattr__</snippet></ROW><ROW><id>20121035</id><snippet>__call__</snippet></ROW><ROW><id>20121035</id><snippet>class CallableValue(object):
    def __init__(self, name):
        self.name = name
    def __call__(self, *args, **kwargs):
        print "Lo, {} was called!".format(self.name)

class Bar(object):
    def __getattr__(self, name):
        return CallableValue(name)
</snippet></ROW><ROW><id>20121035</id><snippet>&gt;&gt;&gt; class CallableValue(object):
...     def __init__(self, name):
...         self.name = name
...     def __call__(self, *args, **kwargs):
...         print "Lo, {} was called!".format(self.name)
... 
&gt;&gt;&gt; class Bar(object):
...     def __getattr__(self, name):
...         return CallableValue(name)
... 
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; something = b.test_method
&gt;&gt;&gt; something
&lt;__main__.CallableValue object at 0x10ac3c290&gt;
&gt;&gt;&gt; something()
Lo, test_method was called!
</snippet></ROW><ROW><id>20121063</id><snippet>&gt;&gt;&gt; np.outer(a, b)
array([[ 10,  20,  30,  40,  50,  60,  70,  80],
       [ 20,  40,  60,  80, 100, 120, 140, 160],
       [ 30,  60,  90, 120, 150, 180, 210, 240]])
</snippet></ROW><ROW><id>20121093</id><snippet>bar</snippet></ROW><ROW><id>20121093</id><snippet>bar</snippet></ROW><ROW><id>20121093</id><snippet>fill</snippet></ROW><ROW><id>20121093</id><snippet>fill_between</snippet></ROW><ROW><id>20121093</id><snippet>import matplotlib.pyplot as plt
import numpy as np

range_list = [(10000, 177368, 0.150849441498420722141),
              (227417, 267627, 0.148806758534977628949),
              (267628, 267633, 1),
              (267642, 267660, 1),
              (267661, 267670, 1),
              (317719, 471319, 0.125380779728419072816),
              (521368, 2634121, 0.292530330836878571521),
              (2634131, 2634171, 1),
              (2684220, 3845219, 0.332501576911355845034),
              (3995268, 13052949, 0.8),
              (13102998, 13219863, 0.304339098079899339488),
              (13319912, 13557063, 0.19949610114016369522),
              (13557092, 13557095, 1),
              (13607162, 17125609, 0.300713750216281716643),
              (17175658, 29878033, 0.306781992901534461549),
              (30028082, 103863857, 0.415235012665315250668),
              (203863857, 233863857, 0.415235012665315250668)]

fig, ax = plt.subplots()
left, right, top = np.array(range_list).T

ax.bar(left, top, right - left, edgecolor='', facecolor='green')

plt.show()
</snippet></ROW><ROW><id>20121093</id><snippet>edgecolor='darkgreen'</snippet></ROW><ROW><id>20121457</id><snippet>def foo_wrapper(wrapped_func):
    wrapped_func = wrapped_func.__func__
    def _w(*args, **kwargs):
        print '&lt;foo_wrap&gt;'
        wrapped_func(*args, **kwargs)
        print '&lt;/foo_wrap&gt;'
    return classmethod(_w)
</snippet></ROW><ROW><id>20121457</id><snippet>&gt;&gt;&gt; class A:
...     @classmethod
...     def foo(kls, param):
...         print 'A.foo called, param is ' + param
... 
&gt;&gt;&gt; def foo_wrapper(wrapped_func):
...     wrapped_func = wrapped_func.__func__
...     def _w(*args, **kwargs):
...         print '&lt;foo_wrap&gt;'
...         wrapped_func(*args, **kwargs)
...         print '&lt;/foo_wrap&gt;'
...     return classmethod(_w)
... 
&gt;&gt;&gt; A.foo = foo_wrapper(A.foo)
&gt;&gt;&gt; A.foo('bar')
&lt;foo_wrap&gt;
A.foo called, param is bar
&lt;/foo_wrap&gt;
</snippet></ROW><ROW><id>20121694</id><snippet>jinja2.Environment</snippet></ROW><ROW><id>20121694</id><snippet>undefined</snippet></ROW><ROW><id>20121694</id><snippet>jinja2.Undefined</snippet></ROW><ROW><id>20121694</id><snippet>jinja2.DebugUndefined</snippet></ROW><ROW><id>20121694</id><snippet>env = jinja2.Environment(undefined=jinja2.DebugUndefined)
t = env.from_string("{{foo}}{{bar}}")
t.render(foo=123)  # will print u'123{{ bar }}'
</snippet></ROW><ROW><id>20121946</id><snippet>.str</snippet></ROW><ROW><id>20121946</id><snippet>&gt;&gt;&gt; d = pd.Series(["aaa","bbb","ccc","ddd"])
&gt;&gt;&gt; d
0    aaa
1    bbb
2    ccc
3    ddd
dtype: object
&gt;&gt;&gt; d.str.title()
0    Aaa
1    Bbb
2    Ccc
3    Ddd
dtype: object
&gt;&gt;&gt; d.str.title().str.replace("Cc","RRR")
0     Aaa
1     Bbb
2    RRRc
3     Ddd
dtype: object
</snippet></ROW><ROW><id>20121946</id><snippet>d.str.title()</snippet></ROW><ROW><id>20121946</id><snippet>Series</snippet></ROW><ROW><id>20121946</id><snippet>StringMethods</snippet></ROW><ROW><id>20121946</id><snippet>.str</snippet></ROW><ROW><id>20121946</id><snippet>&gt;&gt;&gt; d.str
&lt;pandas.core.strings.StringMethods object at 0x93918ec&gt;
</snippet></ROW><ROW><id>20122002</id><snippet>itertools.permutations</snippet></ROW><ROW><id>20122002</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = ['a', 'b', 'c']
&gt;&gt;&gt; list(itertools.permutations(a))
[('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]
</snippet></ROW><ROW><id>20122401</id><snippet>txtdata = np.loadtxt(
    'Mytxtfile.txt', delimiter=chr(164), comments="#", skiprows=1,
    dtype=[('a', '|S6'), ('b', '&lt;i4'), ('c', '&lt;i4'), ('d', '&lt;i4')])
</snippet></ROW><ROW><id>20122401</id><snippet>dtype</snippet></ROW><ROW><id>20122401</id><snippet>dtype=[('a', '|S6'), ('b', '&lt;i4'), ('c', '&lt;i4'), ('d', '&lt;i4')]
</snippet></ROW><ROW><id>20122401</id><snippet>'str'</snippet></ROW><ROW><id>20122401</id><snippet>'|S6'</snippet></ROW><ROW><id>20122401</id><snippet>txtdata = np.genfromtxt('Mytxtfile.txt', delimiter=chr(164), comments="#",
                        names=True, dtype=None)
</snippet></ROW><ROW><id>20122401</id><snippet>dtype=None</snippet></ROW><ROW><id>20122401</id><snippet>genfromtxt</snippet></ROW><ROW><id>20122764</id><snippet>CheckBox</snippet></ROW><ROW><id>20122764</id><snippet>TextCtrl</snippet></ROW><ROW><id>20122764</id><snippet>CheckBox</snippet></ROW><ROW><id>20122764</id><snippet>#!python
# -*- coding: utf-8 -*-

import wx

class MyFrame(wx.Frame):
  def __init__(self, title):
    super(MyFrame, self).__init__(None, title=title)

    panel = wx.Panel(self)
    self.check = wx.CheckBox(panel, label='confiurm?', pos =(10,70), size=(90,-1))
    self.text  = wx.TextCtrl(panel, pos=(100,70), size=(180,-1))
    # disable the button until the user enters something
    self.check.Disable()

    self.Bind(wx.EVT_CHECKBOX, self.OnCheck, self.check)
    self.Bind(wx.EVT_TEXT, self.OnTypeText, self.text)

    self.Centre()

  def OnTypeText(self, event):
    '''
    OnTypeText is called when the user types some string and
    activate the check box if there is a string.
    '''
    if( len(self.text.GetValue()) &gt; 0 ):
      self.check.Enable()
    else:
      self.check.Disable()

  def OnCheck(self, event):
    '''
    Print the user input if he clicks the checkbox.
    '''
    if( self.check.IsChecked() ):
      print(self.text.GetValue())

class MyApp(wx.App):
  def OnInit(self):
    self.frame = MyFrame('Example')
    self.frame.Show()
    return True

MyApp(False).MainLoop()
</snippet></ROW><ROW><id>20122792</id><snippet>import xlwt as xl

doc = xl.Workbook() #Create document
#Add a worksheet
sheet = doc.add_sheet("Some Sheet")
for i in range(100):
    #Write 2 columns
    sheet.write(i, 0, i+1) 
    sheet.write(i, 1, i*2)
    #Write result (SUM for example)
    sheet.write(i, 2, xl.Formula("SUM(A%d:B%d)" % (i+1, i+1)))
doc.save("my_table.xls")
</snippet></ROW><ROW><id>20122917</id><snippet>reset_index()</snippet></ROW><ROW><id>20123012</id><snippet>*gemv</snippet></ROW><ROW><id>20123073</id><snippet>girl_names</snippet></ROW><ROW><id>20123073</id><snippet>boy_names</snippet></ROW><ROW><id>20123073</id><snippet>girl_names</snippet></ROW><ROW><id>20123073</id><snippet>boy_names</snippet></ROW><ROW><id>20123073</id><snippet>user_name</snippet></ROW><ROW><id>20123073</id><snippet>def name_gender(user_name, boy_names=None, girl_names=None):
    uname = user_name.lower()
    girliness = 0
    for girl_name in girl_names:
        if girl_name in uname:
            girliness += 1
    boyishness = 0
    for boy_name in boy_names:
        if boy_name in uname:
            boyishness += 1
    if boyishness &gt; girlishness: return 'Male'
    if girlishness &gt; boyishness: return 'Female'
    return 'Androgynous'
</snippet></ROW><ROW><id>20123208</id><snippet>break</snippet></ROW><ROW><id>20123208</id><snippet># -*- coding: UTF-8 -*-

import re
import itertools

targ = ['\t- Task 09', '\tThis is a comment', '\t\t- Subtask 9.02', '\t\t\t- Subsubtask 9.03', '\t\t\t\t- Subsubsubtask 9.01 @done', '\t\t\t\t- Subsubsubtask 9.02', '\t\t\t\t\t- Subsubsubsubtask 9.01 @done', '\t\t\t\t- Subsubsubtask 9.03 @done', '\t\t\t- Subsubtask 9.04', '\t\t\t\t- Subsubsubtask 9.19 @done']


def DoneChild2Parent(l):
    tasks = [(k,v) for k,v in enumerate(l) if re.search('\t+-\s.*',v)]
    for x,y in tasks:       
        if re.search('(?!.*@done)\t*-\s.*', y):
            next_task = tasks[tasks.index((x,y))+1]
            if next_task[1].count('\t') &gt; y.count('\t'):
                subtasks = list(itertools.takewhile(lambda t: t.count('\t') &gt; y.count('\t'), [z for w,z in tasks[tasks.index(next_task):]]))
                if all('@done' in subtask for subtask in subtasks):
                    l[x]+=' @done'
                    DoneChild2Parent(l)
                    break
    return l

print DoneChild2Parent(targ)
</snippet></ROW><ROW><id>20123277</id><snippet>@ensure_csrf_cookie
def sandbox(request):
...
</snippet></ROW><ROW><id>20123534</id><snippet>In [5]: parms = DataFrame({ 'A' : [1,1,2,2,3] })

In [6]: parms
Out[6]: 
   A
0  1
1  1
2  2
3  2
4  3

In [7]: parms.to_hdf('parms.hdf','df',mode='w',format='table',data_columns=['A'])

In [8]: selection = pd.read_hdf('parms.hdf','df',where='A=[2,3]')

In [9]: selection
Out[9]: 
   A
2  2
3  2
4  3

In [10]: hist = DataFrame(np.random.randn(25,1),columns=['data'],
   ....: index=MultiIndex.from_tuples([ (i,j) for i in range(5) for j in range(5) ],
   ....: names=['l1','l2']))

In [11]: hist
Out[11]: 
           data
l1 l2          
0  0   1.232358
   1  -2.677047
   2  -0.168854
   3   0.538848
   4  -0.678224
1  0   0.092575
   1   1.297578
   2  -1.489906
   3  -1.380054
   4   0.701762
2  0   1.397368
   1   0.198522
   2   1.034036
   3   0.650406
   4   1.823683
3  0   0.045635
   1  -0.213975
   2  -1.221950
   3  -0.145615
   4  -1.187883
4  0  -0.782221
   1  -0.626280
   2  -0.331885
   3  -0.975978
   4   2.006322
</snippet></ROW><ROW><id>20123534</id><snippet>In [15]: pd.read_hdf('hist.hdf','df',where=pd.Term('l1','=',selection.index.tolist()))
Out[15]: 
           data
l1 l2          
2  0   1.397368
   1   0.198522
   2   1.034036
   3   0.650406
   4   1.823683
3  0   0.045635
   1  -0.213975
   2  -1.221950
   3  -0.145615
   4  -1.187883
4  0  -0.782221
   1  -0.626280
   2  -0.331885
   3  -0.975978
   4   2.006322
</snippet></ROW><ROW><id>20123534</id><snippet>In [16]: pd.read_hdf('hist.hdf','df',where='l1=selection.index')
Out[16]: 
           data
l1 l2          
2  0   1.397368
   1   0.198522
   2   1.034036
   3   0.650406
   4   1.823683
3  0   0.045635
   1  -0.213975
   2  -1.221950
   3  -0.145615
   4  -1.187883
4  0  -0.782221
   1  -0.626280
   2  -0.331885
   3  -0.975978
   4   2.006322
</snippet></ROW><ROW><id>20123774</id><snippet>decoded_clean_pk = clean_pk.decode('base64', 'strict')
</snippet></ROW><ROW><id>20123774</id><snippet>strict</snippet></ROW><ROW><id>20123774</id><snippet>string</snippet></ROW><ROW><id>20123774</id><snippet>strict</snippet></ROW><ROW><id>20123774</id><snippet>strict</snippet></ROW><ROW><id>20123774</id><snippet>ignore</snippet></ROW><ROW><id>20123774</id><snippet>replace</snippet></ROW><ROW><id>20123774</id><snippet>&gt;&gt;&gt;b=base64.b64encode('hello world')
&gt;&gt;&gt;b.decode('base64')
'hello world'

&gt;&gt;&gt;base64.b64decode(b)
'hello world'
</snippet></ROW><ROW><id>20123774</id><snippet>decode</snippet></ROW><ROW><id>20123774</id><snippet>b64decode</snippet></ROW><ROW><id>20123774</id><snippet>.decode</snippet></ROW><ROW><id>20123774</id><snippet>base64</snippet></ROW><ROW><id>20123774</id><snippet>str.decode</snippet></ROW><ROW><id>20123774</id><snippet>encoding</snippet></ROW><ROW><id>20123774</id><snippet>bas64</snippet></ROW><ROW><id>20123774</id><snippet>b64decode/encode</snippet></ROW><ROW><id>20123774</id><snippet>str.decode</snippet></ROW><ROW><id>20123774</id><snippet>decode</snippet></ROW><ROW><id>20123774</id><snippet>b64decode</snippet></ROW><ROW><id>20123774</id><snippet>encodings/base64_codec.py</snippet></ROW><ROW><id>20123774</id><snippet>decode()</snippet></ROW><ROW><id>20123774</id><snippet>def base64_decode(input,errors='strict'):

    """ Decodes the object input and returns a tuple (output
        object, length consumed).

        input must be an object which provides the bf_getreadbuf
        buffer slot. Python strings, buffer objects and memory
        mapped files are examples of objects providing this slot.

        errors defines the error handling to apply. It defaults to
        'strict' handling which is the only currently supported
        error handling for this codec.

    """
    assert errors == 'strict'
    output = base64.decodestring(input)
    return (output, len(input))
</snippet></ROW><ROW><id>20123774</id><snippet>base64</snippet></ROW><ROW><id>20123995</id><snippet>0</snippet></ROW><ROW><id>20123995</id><snippet>mb.append(0 for x in range(38))</snippet></ROW><ROW><id>20123995</id><snippet>mb.append([0 for x in range(38)]) 
# note the [] surrounding the original generator expression!  This turns it
# into a list comprehension.
</snippet></ROW><ROW><id>20123995</id><snippet>mb.append([0] * 38)
</snippet></ROW><ROW><id>20124007</id><snippet>class Match(models.Model):
    tournament = models.ForeignKey(Tournament)
    players = models.ManyToManyField(Player, through='Participate')
    score = models.CharField(max_length=16)

class Participate(models.Model):
    player = models.ForeignKey(Player)
    match = models.ForeignKey(Match)
    visitor = models.BooleanField()
</snippet></ROW><ROW><id>20124076</id><snippet>stdout</snippet></ROW><ROW><id>20124076</id><snippet>print('Type &gt; ', end='')
sys.stdout.flush()
</snippet></ROW><ROW><id>20124076</id><snippet>print</snippet></ROW><ROW><id>20124076</id><snippet>print('Type &gt; ', end='', flush=True)
</snippet></ROW><ROW><id>20124529</id><snippet>fractions</snippet></ROW><ROW><id>20124529</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(3.2)
Fraction(3602879701896397, 1125899906842624)
&gt;&gt;&gt; Fraction(3.2).limit_denominator()
Fraction(16, 5)
</snippet></ROW><ROW><id>20124529</id><snippet>Fraction.limit_denominator()</snippet></ROW><ROW><id>20124529</id><snippet>Fraction</snippet></ROW><ROW><id>20124529</id><snippet>self</snippet></ROW><ROW><id>20124529</id><snippet>&gt;&gt;&gt; format(3.2, '.50f')
'3.20000000000000017763568394002504646778106689453125'
</snippet></ROW><ROW><id>20124675</id><snippet>GetThis</snippet></ROW><ROW><id>20124675</id><snippet>getattr</snippet></ROW><ROW><id>20124675</id><snippet>gName   = getattr(root, "name", "No Name")
err_tst = getattr(root, "not-there", "Error OK")
</snippet></ROW><ROW><id>20124675</id><snippet>AttributeError</snippet></ROW><ROW><id>20124675</id><snippet>gName   = root.name if hasattr(root, "name") else "No Name"
err_tst = root.not-there if hasattr(root, "not-there") else "Error OK"
</snippet></ROW><ROW><id>20125244</id><snippet>Edit &gt; Preference &gt; Editor &gt; Key Bindings &gt; 
    change the command "Editor : Trigger preceding AutoComplete list or CallTipe" key sequence to be "Ctrl + Space" 
    the Ctrl+Space is normally assigned to the "Code : Complete Word" command
</snippet></ROW><ROW><id>20125513</id><snippet>range()</snippet></ROW><ROW><id>20125513</id><snippet>i</snippet></ROW><ROW><id>20125729</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20125729</id><snippet>list1 = [{'position':'child','title':'dave','obj':'obj','created':'2013-11-20'},
         {'position':'child','title':'james','obj':'obj','created':'2013-11-19'},
         {'position':'child','title':'james','obj':'obj','created':'2013-11-18'},
         {'position':'child','title':'ian','obj':'obj','created':'2013-11-17'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-16'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-15'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-14'}]

import itertools
import operator

list1 = [
    x
    for key, grp in itertools.groupby(list1, key=operator.itemgetter('title'))
    for x in [{'position': 'parent', 'title': key + ' root'}]+ list(grp)
]
for x in list1:
    print(x)
</snippet></ROW><ROW><id>20125729</id><snippet>{'position': 'parent', 'title': 'dave root'}
{'position': 'child', 'created': '2013-11-20', 'obj': 'obj', 'title': 'dave'}
{'position': 'parent', 'title': 'james root'}
{'position': 'child', 'created': '2013-11-19', 'obj': 'obj', 'title': 'james'}
{'position': 'child', 'created': '2013-11-18', 'obj': 'obj', 'title': 'james'}
{'position': 'parent', 'title': 'ian root'}
{'position': 'child', 'created': '2013-11-17', 'obj': 'obj', 'title': 'ian'}
{'position': 'parent', 'title': 'dave root'}
{'position': 'child', 'created': '2013-11-16', 'obj': 'obj', 'title': 'dave'}
{'position': 'child', 'created': '2013-11-15', 'obj': 'obj', 'title': 'dave'}
{'position': 'child', 'created': '2013-11-14', 'obj': 'obj', 'title': 'dave'}
</snippet></ROW><ROW><id>20125739</id><snippet>data</snippet></ROW><ROW><id>20125739</id><snippet>yadda</snippet></ROW><ROW><id>20125739</id><snippet>data</snippet></ROW><ROW><id>20125739</id><snippet>NameError</snippet></ROW><ROW><id>20125739</id><snippet>data</snippet></ROW><ROW><id>20125739</id><snippet>foo</snippet></ROW><ROW><id>20125739</id><snippet>foo</snippet></ROW><ROW><id>20125875</id><snippet>try:
   self.spawn(pp_args)
except DistutilsExecError as msg:
    print "DistutilsExecError : " + str(DistutilsExecError(msg))
    print
    print "The above exception was the direct cause of the following exception:"
    raise CompileError
</snippet></ROW><ROW><id>20125923</id><snippet>function doLogin() {  
                FB.login(function(response) {} , {perms:''});
}
</snippet></ROW><ROW><id>20125923</id><snippet>function doLogin() {  
                FB.login(function(response) {} , {perms:'user_about_me,friends_about_me,user_likes,friends_likes,user_relationship_details,friends    _relationship_details,user_relationships,friends_relationships, user_education_history, friends_education_history'});
}
</snippet></ROW><ROW><id>20126024</id><snippet>Entry.insert</snippet></ROW><ROW><id>20126024</id><snippet>from Tkinter import *

root = Tk()
e = Entry(root)
e.insert(END, 'default text')
e.pack()
root.mainloop()
</snippet></ROW><ROW><id>20126024</id><snippet>textvariable</snippet></ROW><ROW><id>20126024</id><snippet>from Tkinter import *

root = Tk()
v = StringVar(root, value='default text')
e = Entry(root, textvariable=v)
e.pack()
root.mainloop()
</snippet></ROW><ROW><id>20126093</id><snippet>name</snippet></ROW><ROW><id>20126093</id><snippet>_class</snippet></ROW><ROW><id>20126093</id><snippet>class</snippet></ROW><ROW><id>20126093</id><snippet>PolyModel</snippet></ROW><ROW><id>20126139</id><snippet>import subprocess
import sys

cmd = ['/media/sf_git/test-automation/src/SalesVision/mswm/shell_test.sh', '4', '2']
print('running command: "{0}"'.format(cmd))  # output the command.
# Here, we join the STDERR of the application with the STDOUT of the application.
process = subprocess.Popen(cmd, bufsize=1, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in iter(process.stdout.readline, ''):
    line = line.replace('\n', '')
    print(line)
    sys.stdout.flush()
process.wait()                   #  Wait for the underlying process to complete.
errcode = process.returncode      #  Harvest its returncode, if needed.
print( 'Script ended with return code of: ' + str(errcode) )
</snippet></ROW><ROW><id>20126254</id><snippet>ConfigParser</snippet></ROW><ROW><id>20126254</id><snippet>parser</snippet></ROW><ROW><id>20126254</id><snippet>ConfigParser</snippet></ROW><ROW><id>20126254</id><snippet>def repair(file,fsplit):
    parser = configparser.ConfigParser()
    parser.optionxform = str
    with open(file) as f:
        parser.read_file(f)
    ...
</snippet></ROW><ROW><id>20126358</id><snippet>random = random.choice(accuracy)
</snippet></ROW><ROW><id>20126358</id><snippet>random</snippet></ROW><ROW><id>20126358</id><snippet>random</snippet></ROW><ROW><id>20126358</id><snippet>random</snippet></ROW><ROW><id>20126358</id><snippet>random</snippet></ROW><ROW><id>20126776</id><snippet>&gt;&gt;&gt; A = np.asarray([[1,2],[3,4],[5,6],[7,8]])
&gt;&gt;&gt; rows = len(A)
&gt;&gt;&gt; cols = rows + 1
&gt;&gt;&gt; data = A.flatten() # we want a copy
&gt;&gt;&gt; indptr = np.arange(0, len(data)+1, 2) # 2 non-zero entries per row
&gt;&gt;&gt; indices = np.repeat(np.arange(cols), [1] + [2] * (cols-2) + [1])
&gt;&gt;&gt; import scipy.sparse as sps
&gt;&gt;&gt; a_sps = sps.csr_matrix((data, indices, indptr), shape=(rows, cols))
&gt;&gt;&gt; a_sps.A
array([[1, 2, 0, 0, 0],
       [0, 3, 4, 0, 0],
       [0, 0, 5, 6, 0],
       [0, 0, 0, 7, 8]])
</snippet></ROW><ROW><id>20126802</id><snippet>./configure --prefix=/home/dejan/workspace/python --without-pymalloc --with-pydebug --with-valgrind
</snippet></ROW><ROW><id>20126809</id><snippet>set</snippet></ROW><ROW><id>20126809</id><snippet>with open(inputfile) as fin:
    emails = set(line.strip() for line in fin)
</snippet></ROW><ROW><id>20126809</id><snippet>emails</snippet></ROW><ROW><id>20126809</id><snippet># ...
for row in reader:
    if row[1] in emails:
        writer.writerow(row)
</snippet></ROW><ROW><id>20126809</id><snippet>writer.writerows(row for row in reader if row[1] in emails)
</snippet></ROW><ROW><id>20126809</id><snippet>reader</snippet></ROW><ROW><id>20126809</id><snippet>fd</snippet></ROW><ROW><id>20126809</id><snippet>names</snippet></ROW><ROW><id>20126809</id><snippet>line</snippet></ROW><ROW><id>20126809</id><snippet>row</snippet></ROW><ROW><id>20126913</id><snippet>msvcrt.kbhit</snippet></ROW><ROW><id>20126913</id><snippet>import sys, msvcrt
import time

print("Please press a key to see its value")
while 1:
    print("the key is")
    if msvcrt.kbhit(): # &lt;--------
        key = msvcrt.getch()
        print(key)
        if ord(key) == 27:
            sys.exit()
    time.sleep(0.1)
</snippet></ROW><ROW><id>20127087</id><snippet>RegexObject.findall</snippet></ROW><ROW><id>20127087</id><snippet>&gt;&gt;&gt; pattern = re.compile(r'\s*(.*?)\s*(?:AE|BE)')
&gt;&gt;&gt;
&gt;&gt;&gt; pattern.findall('')
[]
&gt;&gt;&gt; pattern.findall('bar BE')
['bar']
&gt;&gt;&gt; pattern.findall('foo AE')
['foo']
&gt;&gt;&gt; pattern.findall('foo AE bar BE')
['foo', 'bar']
</snippet></ROW><ROW><id>20127157</id><snippet>rows=[0]*(len(B)+1)
table=[rows for l in range(len(A)+1)]
</snippet></ROW><ROW><id>20127157</id><snippet>rows</snippet></ROW><ROW><id>20127157</id><snippet>rows</snippet></ROW><ROW><id>20127157</id><snippet>&gt;&gt;&gt; rows = [0]*5
&gt;&gt;&gt; table = [rows for l in range(5)]
&gt;&gt;&gt; table
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
&gt;&gt;&gt; table[0][2] = 4
&gt;&gt;&gt; table
[[0, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 0, 4, 0, 0]]
</snippet></ROW><ROW><id>20127157</id><snippet>table = [None]*(len(A)+1)
for i in range(len(table)):
    table[i] = [0]*(len(B)+1)
</snippet></ROW><ROW><id>20127211</id><snippet>LineCollection</snippet></ROW><ROW><id>20127211</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib.collections import LineCollection
import matplotlib.animation as animation

lines=[]
for i in range(10):
    for j in range(10):
        lines.append([(0, i), (1, j)])

fig, ax = plt.subplots()
colors = np.random.random(len(lines))
col = LineCollection(lines, array=colors, cmap=plt.cm.gray)
ax.add_collection(col)
ax.autoscale()

def update(i):
    colors = np.random.random(len(lines))
    col.set_array(colors)
    return col,

# Setting this to a very short update interval to show rapid drawing.
# 25ms would be more reasonable than 1ms.
ani = animation.FuncAnimation(fig, update, interval=1, blit=True, 
                              init_func=lambda: [col])
# Some matplotlib versions explictly need an `init_func` to display properly...
# Ideally we'd fully initialize the plot inside it. For simplicitly, we'll just
# return the artist so that `FuncAnimation` knows what to draw.
plt.show()
</snippet></ROW><ROW><id>20127342</id><snippet># Clean up the new partition (we created at most one empty partition)
newPartition.remove([])
</snippet></ROW><ROW><id>20127342</id><snippet>newPartition</snippet></ROW><ROW><id>20127342</id><snippet>if [] in newPartition: newPartition.remove([])
</snippet></ROW><ROW><id>20127365</id><snippet>startapp</snippet></ROW><ROW><id>20127365</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20127365</id><snippet>APPS = [
    'django.contrib.auth',
    # ...
]

MY_APPS = [
    'myapp1',
    # ...
]

INSTALLED_APPS = APPS + MY_APPS
</snippet></ROW><ROW><id>20127365</id><snippet>settings.MY_APPS</snippet></ROW><ROW><id>20127387</id><snippet>x = [5,7,11,15,16,17,18]
y = [8, 5, 8, 9, 17, 18, 25]
cov = np.cov(x, y)
lambda_, v = np.linalg.eig(cov)
lambda_ = np.sqrt(lambda_)
from matplotlib.patches import Ellipse
import matplotlib.pyplot as plt
ax = plt.subplot(111, aspect='equal')
for j in xrange(1, 4):
    ell = Ellipse(xy=(np.mean(x), np.mean(y)),
                  width=lambda_[0]*j*2, height=lambda_[1]*j*2,
                  angle=np.rad2deg(np.arccos(v[0, 0])))
    ell.set_facecolor('none')
    ax.add_artist(ell)
plt.scatter(x, y)
plt.show()
</snippet></ROW><ROW><id>20127519</id><snippet>projection = glGetFloatv(GL_PROJECTION_MATRIX)
# and so on ...
</snippet></ROW><ROW><id>20127519</id><snippet>projection</snippet></ROW><ROW><id>20127774</id><snippet>def max_subarray(A):
    max_ending_here = max_so_far = 0
    for x in A:
        max_ending_here = max(0, max_ending_here + x)
        max_so_far = max(max_so_far, max_ending_here)
    return max_so_far
</snippet></ROW><ROW><id>20127818</id><snippet>nrows = 5
ncols = 5
mark = "X"
space = "_"
the_matrix = [] 
</snippet></ROW><ROW><id>20127818</id><snippet>for i in range(nrows//2): #loop through the first half of rows
    the_matrix.append([space]*ncols) # the default row
    idx1,idx2 = i , ncols - 1 - i  #left and right indexes
    the_matrix[-1][idx1] = the_matrix[-1][idx2] = mark #set our indices
</snippet></ROW><ROW><id>20128024</id><snippet>qsub</snippet></ROW><ROW><id>20128024</id><snippet>-d .</snippet></ROW><ROW><id>20128024</id><snippet>#!/usr/bin/python
from sys import argv
script, param = argv
print param
</snippet></ROW><ROW><id>20128024</id><snippet>qsub test.py 2
</snippet></ROW><ROW><id>20128024</id><snippet>2</snippet></ROW><ROW><id>20128024</id><snippet>chmod +x test.py</snippet></ROW><ROW><id>20128024</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>20128598</id><snippet>ESC [ ? 1 h ESC =
</snippet></ROW><ROW><id>20128598</id><snippet>ESC [ ? 1 l ESC &gt;
</snippet></ROW><ROW><id>20128598</id><snippet>git log</snippet></ROW><ROW><id>20128598</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>20128598</id><snippet>sh</snippet></ROW><ROW><id>20128598</id><snippet>sh</snippet></ROW><ROW><id>20128598</id><snippet>sh</snippet></ROW><ROW><id>20128598</id><snippet>git --no-pager log ...</snippet></ROW><ROW><id>20128598</id><snippet>sh</snippet></ROW><ROW><id>20128598</id><snippet>_tty_out=False</snippet></ROW><ROW><id>20128598</id><snippet>sh</snippet></ROW><ROW><id>20128769</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "first token, &lt;second token part 1, second token part 2&gt;, third token"
&gt;&gt;&gt; regex = re.compile(",(?![^&lt;&gt;]*&gt;)")
&gt;&gt;&gt; regex.split(s)
['first token', ' &lt;second token part 1, second token part 2&gt;', ' third token']
&gt;&gt;&gt; [item.strip(" &lt;&gt;") for item in _]
['first token', 'second token part 1, second token part 2', 'third token']
</snippet></ROW><ROW><id>20128769</id><snippet>,(?![^&lt;&gt;]*&gt;)</snippet></ROW><ROW><id>20128942</id><snippet>def calc_add():</snippet></ROW><ROW><id>20128942</id><snippet>add_result = (user_input_1 + user_input_2)
</snippet></ROW><ROW><id>20128942</id><snippet>user_input_1</snippet></ROW><ROW><id>20128942</id><snippet>user_input_2</snippet></ROW><ROW><id>20128942</id><snippet>add_result</snippet></ROW><ROW><id>20128942</id><snippet>user_input_1</snippet></ROW><ROW><id>20128942</id><snippet>def calc_add():
    add_result = (user_input_1 + user_input_2)
    print(add_result)
</snippet></ROW><ROW><id>20128942</id><snippet>def calc_add():
</snippet></ROW><ROW><id>20128942</id><snippet>user_input_1</snippet></ROW><ROW><id>20128942</id><snippet>def load_screen():
    user_1 = int(input("Please enter your first number.\n"))
    user_2 = int(input("Now please enter your second number.\n"))
    command_home( user_1, user_2) # Okay command_home I took 2 inputs! 
                                  # Here they are work your magic!



def command_home(in1, in2): # Hey I need 2 varaibles to work, Ill call them in1 and in2.
                            # so based on the way command_home( user_1, user_2) is called
                            # in1 = user_1, in2 = user_2 
    command = input("Now what would you like to do with these two numbers?\n").lower()
    if command == "add":
        calc_add(in1, in2) #Okay, now i need to add my two inputs,
                           # but calc_add is another function it wont be able to see MY
                           # in1, in2 ...  i better pass them over as parameters.
    elif command == "subtract":
        calc_subtract()
    elif command == "multiply":
        calc_multiply()
    elif command == "divide":
        calc_divide()



def calc_add(user_input_1,user_input_2 ): # Okay now i know where to look for user_input_1 
                                          # and user_input_2, they will be passed to me
                                          # when someone calls me! Now i can find my varables
                                          # and i wont throw an error!
    add_result = (user_input_1 + user_input_2)
    print(add_result)
</snippet></ROW><ROW><id>20128947</id><snippet>from myir import models
</snippet></ROW><ROW><id>20128947</id><snippet>from myir.models import DependentPatientID
</snippet></ROW><ROW><id>20128947</id><snippet>from django.db import models</snippet></ROW><ROW><id>20128947</id><snippet>class DependentPatientIDManager( models.Manager ):
    def get_patient_ids(self, dependent ):
        dpid = self.model.objects.get( dependent = dependent.id )
        return dpid 
</snippet></ROW><ROW><id>20128947</id><snippet>DependentPatientID.objects.get_patient_ids(d)[0]</snippet></ROW><ROW><id>20128947</id><snippet>if connectedOnly:
    from myir.models import DependentPatientID
    patient_id_integer = 0
    dep_patient_id = DependentPatientID.objects.get_patient_ids(d) 
    if dep_patient_id:
        patient_id_integer = dep_patient_id.patient_id_integer
        results = [d for d in results if patient_id_integer == 0]

        #Or just

        if not patient_id_integer:
            results = []
</snippet></ROW><ROW><id>20129031</id><snippet>from multiprocessing import Process, Event
</snippet></ROW><ROW><id>20129031</id><snippet>detected = Event()
leave = Event()
exit = Event()

Process(target=server_control, args=(detected, leave, exit))
</snippet></ROW><ROW><id>20129045</id><snippet>base64.b64decode</snippet></ROW><ROW><id>20129045</id><snippet>base64</snippet></ROW><ROW><id>20129045</id><snippet>&gt;&gt;&gt; s = "RGVsaXZlcmVkLVRvOiByb2JiaW5zYWxpc0BnbWFpbC5jb20KUmVjZWl2"
&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64decode(s)
'Delivered-To: &lt;some email address&gt;\nReceiv'
</snippet></ROW><ROW><id>20129086</id><snippet>from armoryd import armory_2BEfTgvpofds_.watchonly.wallet
</snippet></ROW><ROW><id>20129086</id><snippet>from MODULE import SOMETHING1, SOMETHING2...etc</snippet></ROW><ROW><id>20129156</id><snippet>#!/usr/bin/python

import readline
import logging
import signal
import os

LOG_FILENAME = '/tmp/completer.log'
HISTORY_FILENAME = '/tmp/completer.hist'

logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG,)

class YouAreTooSlow(Exception): pass


def get_history_items():
    return [ readline.get_history_item(i)
             for i in xrange(1, readline.get_current_history_length() + 1)
             ]

class HistoryCompleter(object):

    def __init__(self):
        self.matches = []
        return

    def complete(self, text, state):
        response = None
        if state == 0:
            history_values = get_history_items()
            logging.debug('history: %s', history_values)
            if text:
                self.matches = sorted(h 
                                      for h in history_values 
                                      if h and h.startswith(text))
            else:
                self.matches = []
            logging.debug('matches: %s', self.matches)
        try:
            response = self.matches[state]
        except IndexError:
            response = None
        logging.debug('complete(%s, %s) =&gt; %s', 
                      repr(text), state, repr(response))
        return response

def input_loop():
    if os.path.exists(HISTORY_FILENAME):
        readline.read_history_file(HISTORY_FILENAME)
    print 'Max history file length:', readline.get_history_length()
    print 'Startup history:', get_history_items()
    try:
        while True:
            line = raw_input('Prompt ("stop" to quit): ')
            if line == 'stop':
                break
            if line:
                print 'Adding "%s" to the history' % line
    finally:
        print 'Final history:', get_history_items()
        readline.write_history_file(HISTORY_FILENAME)

# Register our completer function

def slow_handler(signum, frame):
    print 'Signal handler called with signal', signum
    raise YouAreTooSlow()

def pre_input_hook():
    signal.signal(signal.SIGALRM, slow_handler)
    signal.alarm(10)

readline.set_pre_input_hook(pre_input_hook)
readline.set_completer(HistoryCompleter().complete)

# Use the tab key for completion
readline.parse_and_bind('tab: complete')

# Prompt the user for text
input_loop()
</snippet></ROW><ROW><id>20129315</id><snippet>if num1==X and num1==Y:
</snippet></ROW><ROW><id>20129315</id><snippet>num1</snippet></ROW><ROW><id>20129315</id><snippet>X</snippet></ROW><ROW><id>20129315</id><snippet>Y</snippet></ROW><ROW><id>20129315</id><snippet>num1</snippet></ROW><ROW><id>20129412</id><snippet>class_dictA = {}</snippet></ROW><ROW><id>20129412</id><snippet>def program(classA_infile): ### I included this line -- which required the rest of the script to be controlled for indentation.
    class_dictA = {}

    with open(classA_infile, "rb") as opened_infile_A:
        for line in opened_infile_A:
            items = line.split()
            print items

 for opt, value in opts:
            if opt in ("-h", "--help"):
                help_msg()
                usage()
                sys.exit()
            elif opt in ("-a", "--classA"):
                classA_infile = value
            else:
                assert False, "unhandled option"

        if len(opts) &lt; 3:
            assert False, "an option is missing"

        program(classA_infile) ## here is where the `arg def` is called.


    if __name__ == '__main__':
        main(sys.argv)
</snippet></ROW><ROW><id>20129557</id><snippet>print '{0} and {1}'.format(arr[0],arr[1])
</snippet></ROW><ROW><id>20129557</id><snippet>print "insert into users values({0}, {1}, {2}, ...);".format(arr[0],arr[1],arr[2]...)
</snippet></ROW><ROW><id>20129557</id><snippet>print "insert into users values({0}, {1}, {2}, ...);".format(*arr)
</snippet></ROW><ROW><id>20129597</id><snippet>width</snippet></ROW><ROW><id>20129597</id><snippet>.winfo_width</snippet></ROW><ROW><id>20129597</id><snippet>Tkinter.Text</snippet></ROW><ROW><id>20129597</id><snippet>width</snippet></ROW><ROW><id>20129597</id><snippet>Tkinter.Entry</snippet></ROW><ROW><id>20129597</id><snippet>width</snippet></ROW><ROW><id>20129672</id><snippet>operator_stack</snippet></ROW><ROW><id>20129672</id><snippet>IndexError</snippet></ROW><ROW><id>20129672</id><snippet>None</snippet></ROW><ROW><id>20129672</id><snippet>peek = operator_stack[-1] if operator_stack else None</snippet></ROW><ROW><id>20129672</id><snippet>peek = operator_stack[len(operator_stack)-1]</snippet></ROW><ROW><id>20129672</id><snippet>while not operator_stack and prec[peek] &gt;= prec[element]:</snippet></ROW><ROW><id>20129672</id><snippet>while not operator_stack:</snippet></ROW><ROW><id>20129672</id><snippet>while operator_stack and prec[peek] &gt;= prec[element]:</snippet></ROW><ROW><id>20129672</id><snippet>while operator_stack:</snippet></ROW><ROW><id>20129672</id><snippet>peek</snippet></ROW><ROW><id>20129672</id><snippet>None</snippet></ROW><ROW><id>20129672</id><snippet>#line 18
peek = operator_stack[-1] if operator_stack else None
#line 49
if peek is not None:
    while operator_stack and prec[peek] &gt;= prec[element]:

            #Append the pop'd element of the operator stack to the
            #output_queue list.
            output_queue.append(operator_stack.pop())

    #Append whatever is left (+,-,*,/) to the operator stack
    operator_stack.append(element)

    #line 59
    while operator_stack:
            #Append the last element in the stack until the stack is empty.
            output_queue.append(operator_stack.pop())
</snippet></ROW><ROW><id>20129672</id><snippet>while operator_stack:</snippet></ROW><ROW><id>20129672</id><snippet>&gt;&gt;&gt; a = [2,5,6]
&gt;&gt;&gt; while a: # a is not empty right?
...     print 2 # so print 2
...     break # and break
2
</snippet></ROW><ROW><id>20129733</id><snippet>self.max</snippet></ROW><ROW><id>20129733</id><snippet>def updateMax(self,value):
    self.max.config(from_=int(value)+1)
    self.max.config(to=int(value)+11)
</snippet></ROW><ROW><id>20129733</id><snippet>self.min</snippet></ROW><ROW><id>20129733</id><snippet>def updateMax(self,value):
    self.min.config(from_=int(value)+1)
    self.min.config(to=int(value)+11)
</snippet></ROW><ROW><id>20129733</id><snippet>self.max</snippet></ROW><ROW><id>20129817</id><snippet>replace</snippet></ROW><ROW><id>20129817</id><snippet>new_list = []
for x in list:
    new_list.append(x.replace("[","").replace("]","").replace('"','').replace(" ","").replace(",","").replace("[",""))
</snippet></ROW><ROW><id>20129817</id><snippet>translate</snippet></ROW><ROW><id>20129817</id><snippet>filter</snippet></ROW><ROW><id>20129817</id><snippet>[</snippet></ROW><ROW><id>20129817</id><snippet>]</snippet></ROW><ROW><id>20129817</id><snippet>"</snippet></ROW><ROW><id>20129817</id><snippet>repr</snippet></ROW><ROW><id>20129817</id><snippet>join</snippet></ROW><ROW><id>20129817</id><snippet>''.join(list)
</snippet></ROW><ROW><id>20129817</id><snippet>' and '.join(list)
</snippet></ROW><ROW><id>20129817</id><snippet>repr</snippet></ROW><ROW><id>20129817</id><snippet>'[' + ', '.join(map(repr, list)) + ']'
</snippet></ROW><ROW><id>20129826</id><snippet>import htql; 
address = '88-21 64th st , Rego Park , New York 11374'
states=['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 
    'Delaware', 'District Of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 
    'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 
    'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 
    'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 
    'Oregon', 'PALAU', 'Pennsylvania', 'PUERTO RICO', 'Rhode Island', 'South Carolina', 'South Dakota', 
    'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 
    'Wyoming']; 

a=htql.RegEx(); 
a.setNameSet('states', states);

state_zip1=a.reSearchStr(address, "&amp;[s:states][,\s]+\d{5}", case=False)[0]; 
# state_zip1 = 'New York 11374'

state_zip2=a.reSearchList(address.split(), r"&amp;[ws:states]&lt;,&gt;?&lt;\d{5}&gt;", case=False)[0]; 
# state_zip2 = ['New', 'York', '11374']
</snippet></ROW><ROW><id>20130067</id><snippet>Element</snippet></ROW><ROW><id>20130067</id><snippet>False</snippet></ROW><ROW><id>20130067</id><snippet>def __nonzero__(self):
    warnings.warn(
        "The behavior of this method will change in future versions.  "
        "Use specific 'len(elem)' or 'elem is not None' test instead.",
        FutureWarning, stacklevel=2
        )
    return len(self._children) != 0 # emulate old behaviour, for now
</snippet></ROW><ROW><id>20130247</id><snippet>Python 2.7.2 (default, Jul 20 2011, 02:32:18)
[GCC 4.2.1 (LLVM, Emscripten 1.5, Empythoned)] on linux2

insert into `mytable`(`value1`,`value2`,`value3`) values ("AAA","BBB","CCC");
</snippet></ROW><ROW><id>20130247</id><snippet>line = 'insert into `mytable`(`value1`,`value2`,`value3`) values ("' + variable1 + '","' + variable2 + '","' + variable3 + '");\n'
</snippet></ROW><ROW><id>20130247</id><snippet>line = 'insert into `mytable`(`value1`,`value2`,`value3`) values ("{}","{}","{}");\n'.format(variable1, variable2, variable3)
</snippet></ROW><ROW><id>20130308</id><snippet>x,y</snippet></ROW><ROW><id>20130308</id><snippet>xr_arr = xr * ones(len(x))
yr_arr = yr * ones(len(y))    
angle_arr = angle * ones(len(x))
x_new = xr_arr + (x - xr_arr)*cos(angle_arr) - (y - yr_arr)*sin(angle_arr)
</snippet></ROW><ROW><id>20130308</id><snippet>from numpy import *</snippet></ROW><ROW><id>20130308</id><snippet>x,y</snippet></ROW><ROW><id>20130386</id><snippet>old = open('temp', 'a') 
old.write(delta)
</snippet></ROW><ROW><id>20130418</id><snippet>Requests will automatically perform location redirection for all verbs except HEAD.

&gt;&gt;&gt; r = requests.get('http://github.com')
&gt;&gt;&gt; r.url
'https://github.com/'
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.history
[&lt;Response [301]&gt;]
</snippet></ROW><ROW><id>20130430</id><snippet>parser.add_option("-p",dest="rcon",default="",help="Specifies the rcon password")
parser.add_option("-a",dest="addr",default="",help="Specifies the address of the server to connect to")
</snippet></ROW><ROW><id>20130430</id><snippet>parser.add_option("-x",dest="port",default="",help="Specifies the port of the server to connect to")
</snippet></ROW><ROW><id>20130430</id><snippet>addr</snippet></ROW><ROW><id>20130430</id><snippet>print("Connecting to %s with rcon password of %s" % (options.addr,options.rcon))
s = SRCDS(options.addr,rconpass=options.rcon)
</snippet></ROW><ROW><id>20130430</id><snippet>SRCDS</snippet></ROW><ROW><id>20130430</id><snippet>Initialization: OBJ = SRCDS(host, [port=27015], [rconpass=''], [timeout=2.0])
</snippet></ROW><ROW><id>20130430</id><snippet>int</snippet></ROW><ROW><id>20130430</id><snippet>if options.port:
    s = SRCDS(options.addr, port=int(options.port), rconpass=options.rcon)
else:
    s = SRCDS(options.addr, rconpass=options.rcon)
</snippet></ROW><ROW><id>20130537</id><snippet>s = """2, 200, 487
1, 199, 486"""
print [line.split() for line in s.splitlines()]
</snippet></ROW><ROW><id>20130713</id><snippet>ax.axvspan(X1,X1+wi,ymax=Y2, facecolor='none',edgecolor='black', linewidth=2)
</snippet></ROW><ROW><id>20130713</id><snippet>X1 = X1 = bar_handles[startBlock].get_x()
wi = bar_handles[startBlock].get_width()
Y2 = ax.transLimits.transform((0,bar_handles[startBlock].get_height()))[1]
</snippet></ROW><ROW><id>20130988</id><snippet>kivy.bat</snippet></ROW><ROW><id>20130988</id><snippet>pyinstaller.py</snippet></ROW><ROW><id>20131017</id><snippet># input data
lst = [{'A':'BBB', 'C':'DDD', 'D':'EEE'},
       {'A':'BBB', 'C':'DDD', 'D':'ESS'},
       {'A':'BBB', 'C':'ASD', 'D':'EEE'},
       {'C':'ASD', 'D':'EEE'}]

# list of filters
flt = [('A', 'BBB'), ('D', 'EEE')]

# a list comprehension + all() will do the trick
[x for x in lst if all(x.get(k, None) == v for k, v in flt)]
=&gt; [{'A': 'BBB', 'C': 'DDD', 'D': 'EEE'}, {'A': 'BBB', 'C': 'ASD', 'D': 'EEE'}]
</snippet></ROW><ROW><id>20131066</id><snippet>set_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>"change"</snippet></ROW><ROW><id>20131066</id><snippet>_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>input_line.edit_text</snippet></ROW><ROW><id>20131066</id><snippet>set_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>Edit</snippet></ROW><ROW><id>20131066</id><snippet>set_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>"change"</snippet></ROW><ROW><id>20131066</id><snippet>def set_edit_text(self, text):
    if text.endswith('\n'):
        super().set_edit_text('')
    else:
        super().set_edit_text(text)
</snippet></ROW><ROW><id>20131066</id><snippet>fooWillChange:</snippet></ROW><ROW><id>20131066</id><snippet>fooDidChange:</snippet></ROW><ROW><id>20131066</id><snippet>change</snippet></ROW><ROW><id>20131066</id><snippet>set_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>set_edit_text</snippet></ROW><ROW><id>20131066</id><snippet>Edit</snippet></ROW><ROW><id>20131383</id><snippet>In [1]: import matplotlib.pyplot as plt

In [2]: plt.plot([1,2,3],[4,5,6])
Out[2]: [&lt;matplotlib.lines.Line2D at 0x30b2b10&gt;]

In [3]: ax = plt.gca() # get axis handle

In [4]: line = ax.lines[0] # get the first line, there might be more

In [5]: line.get_xdata()
Out[5]: array([1, 2, 3])

In [6]: line.get_ydata()
Out[6]: array([4, 5, 6])

In [7]: line.get_xydata()
Out[7]: 
array([[ 1.,  4.],
       [ 2.,  5.],
       [ 3.,  6.]])
</snippet></ROW><ROW><id>20131383</id><snippet>In [1]: import matplotlib.pyplot as plt

In [2]: lines = plt.plot([1,2,3],[4,5,6],[7,8],[9,10])

In [3]: lines[0].get_data()
Out[3]: (array([1, 2, 3]), array([4, 5, 6]))

In [4]: lines[1].get_data()
Out[4]: (array([7, 8]), array([ 9, 10]))
</snippet></ROW><ROW><id>20131669</id><snippet>x.argmax(0)</snippet></ROW><ROW><id>20131669</id><snippet>np.indices</snippet></ROW><ROW><id>20131669</id><snippet>x = np.array([[[1,2],[0,1]],[[3,4],[6,7]]])
x.argmax(0)
    array([[1, 1],
           [1, 1]])
a1, a2 = np.indices((2,2))
(x.argmax(0),a1,a2)
    (array([[1, 1],
            [1, 1]]),
     array([[0, 0],
            [1, 1]]),
     array([[0, 1],
            [0, 1]]))


x[x.argmax(0),a1,a2]
    array([[3, 4],
           [6, 7]])

x[a1,x.argmax(1),a2] 
    array([[1, 2],
           [6, 7]])

x[a1,a2,x.argmax(2)] 
    array([[2, 1],
           [4, 7]])
</snippet></ROW><ROW><id>20131669</id><snippet>x</snippet></ROW><ROW><id>20131669</id><snippet>a1</snippet></ROW><ROW><id>20131669</id><snippet>a2</snippet></ROW><ROW><id>20131669</id><snippet>argmax</snippet></ROW><ROW><id>20131734</id><snippet>export PATH</snippet></ROW><ROW><id>20131734</id><snippet>export WORKON_HOME="$HOME/.virtualenvs"
source /usr/local/share/python/virtualenvwrapper.sh
# Setting PATH for EPD_free-7.3-2
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}"
PATH="/Applications/Postgres93.app/Contents/MacOS/bin:$PATH"
export PATH
</snippet></ROW><ROW><id>20131734</id><snippet>PATH=..</snippet></ROW><ROW><id>20131734</id><snippet>:$PATH</snippet></ROW><ROW><id>20131734</id><snippet>:${PATH}</snippet></ROW><ROW><id>20131896</id><snippet>mydict = {}
with open('ref') as f1:
    for line in f1:
        key, value = line.split()
        mydict[key] = value

with open('file.txt') as f2, open('out.txt', 'w') as f3:
    for l in f2:
        line = l.split()
        newline = ''
        for item in line:
            newline += mydict[item] + " "
        f3.write(newline + "\n")
</snippet></ROW><ROW><id>20132059</id><snippet>user.user_info.save()</snippet></ROW><ROW><id>20132059</id><snippet>from django.db import IntegrityError, transaction

@receiver(post_save, sender=User) 
def saveUserAndInfo(sender, instance, **kwargs):
    user = instance
    try:
        with transaction.atomic():
            user.user_info.save()
    except IntegrityError:
        info = UserInfo()
        info.user = user
        info.save()
</snippet></ROW><ROW><id>20132095</id><snippet>fill_between</snippet></ROW><ROW><id>20132095</id><snippet>import numpy as np
np.random.seed(1977)
import matplotlib.pyplot as plt

# Generate data...
x_obs = np.linspace(-2, 2, 20)
true_model = [0.2, -0.1, 4, 2, 1, 0]

noise = np.random.normal(0, 5, x_obs.shape)
y_obs = np.polyval(true_model, x_obs) + noise

# Fit to a 5-th order polynomial
fit_model = np.polyfit(x_obs, y_obs, 5)

x = np.linspace(-3, 3, 100)
y_true = np.polyval(true_model, x)
y_pred = np.polyval(fit_model, x)

# Made up confidence intervals (I'm too lazy to do the math...)
high_bound = y_pred + 3 * (0.5 * x**4 + 3)
low_bound = y_pred - 3 * (0.5 * x**4 + 3)

# Plot the results...
fig, ax = plt.subplots()
ax.fill_between(x, high_bound, low_bound, color='gray', alpha=0.5)
ax.plot(x_obs, y_obs, 'ko', label='Observed Values')
ax.plot(x, y_pred, 'k--', label='Predicted Model')
ax.plot(x, y_true, 'r-', label='True Model')
ax.legend(loc='upper left')
plt.show()
</snippet></ROW><ROW><id>20132182</id><snippet>super(SomeQuerySet, self).__init__(self, *args, **kwargs)</snippet></ROW><ROW><id>20132182</id><snippet>__init__</snippet></ROW><ROW><id>20132182</id><snippet>def __init__(self, something, *args, **kwargs)</snippet></ROW><ROW><id>20132182</id><snippet>QuerySet</snippet></ROW><ROW><id>20132182</id><snippet>__init__</snippet></ROW><ROW><id>20132200</id><snippet>plt.scatter(dates,values)
plt.plot(dates, values)
plt.show()
</snippet></ROW><ROW><id>20132200</id><snippet>plt.plot(dates, values, '-o')
plt.show()
</snippet></ROW><ROW><id>20132244</id><snippet>sorted()</snippet></ROW><ROW><id>20132244</id><snippet>&gt;&gt;&gt; sortedList = sorted([u'test3',u'test2',u'test5'])
&gt;&gt;&gt; print sortedList
[u'test2', u'test3', u'test5']
</snippet></ROW><ROW><id>20132259</id><snippet>t = s.encode('utf_16_be')
</snippet></ROW><ROW><id>20132379</id><snippet>data</snippet></ROW><ROW><id>20132379</id><snippet>total = 0
for line in f:
    data = length(line)
    total += data
print(total)
</snippet></ROW><ROW><id>20132415</id><snippet>aggregate_functions</snippet></ROW><ROW><id>20132415</id><snippet>agg_condition = lambda x: Series([1]).isin(x['subtype]').any()
agg_functions = {'value1': np.mean, 'value2': np.max, 'value3': np.std}

df1 = df.groupby('type').filter(agg_condition).groupby('type').agg(**agg_functions)
df2 = df.groupby('type').filter(~agg_condition)

result = pd.concat([df1, df2])
</snippet></ROW><ROW><id>20132415</id><snippet>agg_condition</snippet></ROW><ROW><id>20132415</id><snippet>in</snippet></ROW><ROW><id>20132415</id><snippet>any()</snippet></ROW><ROW><id>20132530</id><snippet>vocabulary</snippet></ROW><ROW><id>20132530</id><snippet>TfidfVectorizer</snippet></ROW><ROW><id>20132530</id><snippet>vocabulary = "a list of words I want to look for in the documents".split()
vect = TfidfVectorizer(sublinear_tf=True, max_df=0.5, analyzer='word', 
           stop_words='english', vocabulary=vocabulary)
</snippet></ROW><ROW><id>20132530</id><snippet>corpus</snippet></ROW><ROW><id>20132530</id><snippet>fit</snippet></ROW><ROW><id>20132530</id><snippet>vect.fit(corpus)
</snippet></ROW><ROW><id>20132530</id><snippet>fit_transform</snippet></ROW><ROW><id>20132530</id><snippet>vect.fit(corpus)
corpus_tf_idf = vect.transform(corpus) 
</snippet></ROW><ROW><id>20132530</id><snippet>transform</snippet></ROW><ROW><id>20132530</id><snippet>doc_tfidf = vect.transform([doc])
</snippet></ROW><ROW><id>20132718</id><snippet>for element in soup_original_2.body:
    soup_original_1.body.append(element)
</snippet></ROW><ROW><id>20132718</id><snippet>b = soup.new_tag('b')
b.append('SEPARATOR')
soup.original_1.body.append(b)
for element in soup_original_2.body:
    soup_original_1.body.append(element)
</snippet></ROW></DATA>