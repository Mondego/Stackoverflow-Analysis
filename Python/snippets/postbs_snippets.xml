<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>10387270</id><snippet>&gt;&gt;&gt; o = object()
&gt;&gt;&gt; dir(o)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</snippet></ROW><ROW><id>10387270</id><snippet>__dict__</snippet></ROW><ROW><id>10387270</id><snippet>&gt;&gt;&gt; class A(object):
....    pass
....
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; dir(a)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>10387636</id><snippet>type(json.dumps(something))==str</snippet></ROW><ROW><id>10387636</id><snippet>len</snippet></ROW><ROW><id>10387636</id><snippet>obj = {'content' : 'something goes here'}
json_obj = json.dumps(obj)
json_size = len(json_obj)

serialized_size = len(serialized_object)

if json_size &lt; serialized_size:
  print "I'd use the JSON with this..."
</snippet></ROW><ROW><id>10388078</id><snippet>&gt;&gt;&gt; d1={'ch:23': 100, 'ch:24': 95}
&gt;&gt;&gt; d2={'ch:23': 98 ,'ch:25': 100}
</snippet></ROW><ROW><id>10388078</id><snippet>&gt;&gt;&gt; d3=collections.defaultdict(list)
&gt;&gt;&gt; for k,e in d1.items()+d2.items():
    d3[k].append(e)
</snippet></ROW><ROW><id>10388078</id><snippet>&gt;&gt;&gt; d1
OrderedDict([('ch:23', 100), ('ch:24', 95)])
&gt;&gt;&gt; d2
OrderedDict([('ch:23', 98), ('ch:25', 100)])
&gt;&gt;&gt; d3=collections.OrderedDict()
&gt;&gt;&gt; for k,e in d1.items()+d2.items():
    d3.setdefault(k,[]).append(e)   
&gt;&gt;&gt; d3
OrderedDict([('ch:23', [100, 98]), ('ch:24', [95]), ('ch:25', [100])])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10388100</id><snippet>class Cheat(Base):

  __tablename__ = 'cheats'

  id = Column(Integer, primary_key = True, autoincrement = True)
  cheat = deferred(Column(Text))
  name = Column(String(255), index = True)
  _html = Column('html', Text)
  _slug = deferred(Column('slug', String(255)))
</snippet></ROW><ROW><id>10388110</id><snippet>render</snippet></ROW><ROW><id>10388110</id><snippet>RequestContext</snippet></ROW><ROW><id>10388110</id><snippet>from django.http import HttpResponse
from django.shortcuts import get_object_or_404, render
from steps_count.models import Top_List
from steps_count.forms import Top_List_Form


def index(request):

    if request.method == 'POST':
        #form = Top_List_Form(request.POST)
        return HttpResponse("Do something") # methods must return HttpResponse
    else:
        top_list = Top_List.objects.all().order_by('total_steps').reverse()
        #output = ''.join([(t.name+'\t'+str(t.total_steps)+'\n') for t in top_list])
        return render(request,'steps_count/index.html',{'top_list': top_list})
</snippet></ROW><ROW><id>10388292</id><snippet>createProp = property
</snippet></ROW><ROW><id>10388292</id><snippet>property</snippet></ROW><ROW><id>10388292</id><snippet>return prop.get</snippet></ROW><ROW><id>10388292</id><snippet>property</snippet></ROW><ROW><id>10388292</id><snippet>fget</snippet></ROW><ROW><id>10388292</id><snippet>fset</snippet></ROW><ROW><id>10388353</id><snippet>x</snippet></ROW><ROW><id>10388353</id><snippet>for</snippet></ROW><ROW><id>10388353</id><snippet>for</snippet></ROW><ROW><id>10388353</id><snippet>geometry.GetPointCount()</snippet></ROW><ROW><id>10388353</id><snippet>0</snippet></ROW><ROW><id>10388353</id><snippet>print geometry.GetPointCount()</snippet></ROW><ROW><id>10388353</id><snippet>if</snippet></ROW><ROW><id>10388530</id><snippet>from contextlib import contextmanager

class X:
    def disable_me():
        print("do stuff")

def run_me(x):
    print("run_me")
    x.disable_me()

@contextmanager
def disable_function(obj, name):
    temp = getattr(obj, name)
    setattr(obj, name, lambda: None)
    yield
    setattr(obj, name, temp)

x = X()
with disable_function(x, "disable_me"):
    run_me(x)
</snippet></ROW><ROW><id>10388921</id><snippet>scores = [ (a &lt; b, a &gt; b) for (a, b) in zip(J48, useAllAttributes7nn) ]
x = (sum( a for (a, _) in scores ), sum( b for (_, b) in scores ))

// Or, as per @agf's suggestion (though I prefer comprehensions to map)...
x = [ sum(s) for s in zip(*scores) ]
</snippet></ROW><ROW><id>10388921</id><snippet>zipped = zip(J48, useAllAttributes7nn)
x = (sum( a &lt; b for (a, b) in zipped ), sum( a &gt; b for (a, b) in zipped ))
</snippet></ROW><ROW><id>10389181</id><snippet>a*A + b*B + c*C + d*D = x</snippet></ROW><ROW><id>10389181</id><snippet>x</snippet></ROW><ROW><id>10389181</id><snippet>a, b, c, d</snippet></ROW><ROW><id>10389181</id><snippet>-1, 0, 1</snippet></ROW><ROW><id>10389181</id><snippet>A + B + C + D = 40</snippet></ROW><ROW><id>10389181</id><snippet>x = 39</snippet></ROW><ROW><id>10389181</id><snippet>A + B + C = 39</snippet></ROW><ROW><id>10389181</id><snippet>D = 1</snippet></ROW><ROW><id>10389181</id><snippet>A + B + C - D = 38</snippet></ROW><ROW><id>10389181</id><snippet>A + B + D = 37</snippet></ROW><ROW><id>10389181</id><snippet>C = 3</snippet></ROW><ROW><id>10389181</id><snippet>A + B = 36</snippet></ROW><ROW><id>10389181</id><snippet>A + B - D = 35</snippet></ROW><ROW><id>10389181</id><snippet>A + B - C + D = 34</snippet></ROW><ROW><id>10389181</id><snippet>A + B - C = 33</snippet></ROW><ROW><id>10389181</id><snippet>A + B - C - D = 32</snippet></ROW><ROW><id>10389181</id><snippet>A + C + D = 31</snippet></ROW><ROW><id>10389181</id><snippet>A = 9</snippet></ROW><ROW><id>10389181</id><snippet>B = 27</snippet></ROW><ROW><id>10389181</id><snippet>1, 3, 9, 27</snippet></ROW><ROW><id>10389181</id><snippet>def find_weights(W):
    weights = []
    i = 0
    while sum(weights) &lt; W:
        weights.append(3 ** i)
        i += 1
    weights.pop()
    weights.append(W - sum(weights))
    return weights

print find_weights(40)
#output:
[1, 3, 9, 27]
</snippet></ROW><ROW><id>10389181</id><snippet>[0, 40]</snippet></ROW><ROW><id>10389181</id><snippet>(A, B, C, D)</snippet></ROW><ROW><id>10389181</id><snippet>    ABCD:   Ternary:
40: ++++     0000
39: +++0     0001
38: +++-     0002
37: ++0+     0010
36: ++00     0011
35: ++0-     0012
34: ++-+     0020
33: ++-0     0021
32: ++--     0022
31: +0++     0100
etc.
</snippet></ROW><ROW><id>10389181</id><snippet>3**0 + 3**1 +3**2 +...+ 3**N &gt;= Weight
</snippet></ROW><ROW><id>10389181</id><snippet>#what if the dropped weight was a million Kg:
print find_weights(1000000)
#output:
[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 202839]
</snippet></ROW><ROW><id>10389658</id><snippet>ingredient = self.cleaned_data.get('ingredient')
unit = self.cleaned_data.get('unit')
</snippet></ROW><ROW><id>10389658</id><snippet>KeyError</snippet></ROW><ROW><id>10389658</id><snippet>def clean(self):
    ingredient = self.cleaned_data.get('ingredient')
    unit = self.cleaned_data.get('unit') 
    if ingredient is not None and ingredient.ing_type in (ingredient.TYPE_WET, ingredient.TYPE_DRY) and not unit:
        raise forms.ValidationError('unit missing for %s.' % ingredient.name)
    return self.cleaned_data
</snippet></ROW><ROW><id>10389699</id><snippet>cssutils.getUrls</snippet></ROW><ROW><id>10389745</id><snippet>&gt;&gt;&gt; newstring=s.split('.',1)[0]
</snippet></ROW><ROW><id>10389745</id><snippet>&gt;&gt;&gt; tt=time.strptime(newstring,"%M:%S")
</snippet></ROW><ROW><id>10389745</id><snippet>&gt;&gt;&gt; tt.tm_min * 60 + tt.tm_sec
</snippet></ROW><ROW><id>10390396</id><snippet>from django.db import models

class Director(models.Model):
    name = models.CharField(max_length=128)
    # maybe some other fields...

class Film(models.Model):
    title = models.CharField(max_length=128)
    director = models.ForeignKey(Director)
    created_at = models.DateField()
</snippet></ROW><ROW><id>10390396</id><snippet>import datetime
from django.shortcuts import render_to_response
from myapp.models import Film

def search(request):
    # Suppose we support these params -&gt; ('director', 'fromdate', 'todate')
    request_params = request.GET.copy()
    fromdate = datetime.datetime.strptime(request_params['fromdate'], 'some-string-format')
    todate = datetime.datetime.strptime(request_params['todate'], 'some-string-format')
    # Our query is ready to take off.
    film_results = Film.objects.filter(
        director__name=request_params['director'],
        created_at__range=(fromdate, todate)
    )
    return render_to_response('search_results.html', {'results':film_results})
</snippet></ROW><ROW><id>10390396</id><snippet>{% extends some_base.html %}
{% if results }
  {% for film in results %}
    &lt;h3&gt;{{ film.title }}&lt;/h3&gt;
    &lt;p&gt;Director: {{ film.director.name }}&lt;/p&gt;
    &lt;p&gt;When: {{ film.created_at }}&lt;/p&gt;
  {% endfor %}
{% else %}
  &lt;p&gt;Sorry no results for your query&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>10390396</id><snippet>url(r'^search/$', 'myapp.views.search'),
</snippet></ROW><ROW><id>10390396</id><snippet>&lt;form method='GET', action='/search/'&gt;
... your fields
&lt;/form&gt;
</snippet></ROW><ROW><id>10390587</id><snippet>update()</snippet></ROW><ROW><id>10390587</id><snippet>self.update()</snippet></ROW><ROW><id>10390587</id><snippet>    class Monitor(object):
        def update(self, event):
            print "Called"

        def __init__(self):
            self.mon = Tk()
            self.mainFrame = Frame(self.mon)
            self.mainFrame.grid(row=1, column=1)

            self.optionFrame = Frame(self.mainFrame)
            self.optionFrame.grid(row=1, column=1)

            self.refreshB = ttk.Button(self.optionFrame, text='Refresh', command=self.update)
            self.refreshB.grid(row=1, column=1)

        def run(self):
            self.mon.mainloop()

    monitor = Monitor()
    monitor.run()
</snippet></ROW><ROW><id>10390587</id><snippet>update()</snippet></ROW><ROW><id>10390587</id><snippet>Monitor</snippet></ROW><ROW><id>10390587</id><snippet>Monitor</snippet></ROW><ROW><id>10390587</id><snippet>monitor()</snippet></ROW><ROW><id>10390587</id><snippet>monitor</snippet></ROW><ROW><id>10390795</id><snippet>Permutation.next()</snippet></ROW><ROW><id>10390795</id><snippet>_data</snippet></ROW><ROW><id>10390795</id><snippet>_sofar</snippet></ROW><ROW><id>10390795</id><snippet>_sofar</snippet></ROW><ROW><id>10390795</id><snippet>_sofar</snippet></ROW><ROW><id>10390795</id><snippet>next</snippet></ROW><ROW><id>10390795</id><snippet>def next(self):
    if len(self._sofar) == len(self._data):
        yield self._sofar[:]
    else:
        for elem in self._data:
            if elem not in self._sofar:
                self._sofar.append(elem)
                for v in self.next():
                    yield v
                self._sofar.pop()
</snippet></ROW><ROW><id>10390807</id><snippet>import lettuce</snippet></ROW><ROW><id>10390807</id><snippet>terrain</snippet></ROW><ROW><id>10390807</id><snippet>logging.Handler</snippet></ROW><ROW><id>10390807</id><snippet>world</snippet></ROW><ROW><id>10390807</id><snippet>import lettuce</snippet></ROW><ROW><id>10390807</id><snippet>world</snippet></ROW><ROW><id>10390807</id><snippet>@beforeeach</snippet></ROW><ROW><id>10390954</id><snippet>dict(iterableOfKeyValuePairs, **dictOfKeyValuePairs)
</snippet></ROW><ROW><id>10390954</id><snippet>&gt;&gt;&gt; dict(((h,h*2) for h in range(5)), foo='foo', **{'bar':'bar'})
{0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 'foo': 'foo', 'bar': 'bar'}
</snippet></ROW><ROW><id>10390966</id><snippet>list</snippet></ROW><ROW><id>10390966</id><snippet>shadows</snippet></ROW><ROW><id>10390966</id><snippet>list</snippet></ROW><ROW><id>10390966</id><snippet>&gt;&gt;&gt; lst = [[],['a','b'],[],['c'],['d']]
&gt;&gt;&gt; for idx, inner in enumerate(lst):
      for char in inner:
        print idx, char


1 a
1 b
3 c
4 d
</snippet></ROW><ROW><id>10390966</id><snippet>enumerate()</snippet></ROW><ROW><id>10390966</id><snippet>&gt;&gt;&gt; for idx, inner in enumerate(lst, 1):
    for char in inner:
        print idx, char


2 a
2 b
4 c
5 d
</snippet></ROW><ROW><id>10390969</id><snippet>import json
# Your code
  retdict = json.loads(content)
</snippet></ROW><ROW><id>10390969</id><snippet>accesstoken = retdict['access_token']
</snippet></ROW><ROW><id>10391047</id><snippet>import web
from web.wsgiserver import CherryPyWSGIServer
from web.wsgiserver.ssl_builtin import BuiltinSSLAdapter

ssl_cert = "path/to/ssl_certificate"
ssl_key = "path/to/ssl_private_key"

CherryPyWSGIServer.ssl_adapter = BuiltinSSLAdapter(ssl_cert, ssl_key, None)
</snippet></ROW><ROW><id>10391295</id><snippet>display.update()</snippet></ROW><ROW><id>10391295</id><snippet>for i in range(enemies)</snippet></ROW><ROW><id>10391295</id><snippet>blit</snippet></ROW><ROW><id>10391295</id><snippet>display.flip()</snippet></ROW><ROW><id>10391475</id><snippet>def set_hosts():
    env.hosts = open('hosts_file', 'r').readlines()
</snippet></ROW><ROW><id>10391643</id><snippet>for client in filter(shouldrecieve, all_clients):
    client.send(data)
</snippet></ROW><ROW><id>10391643</id><snippet>for client in (client for client in all_clients if client.attrspam == barfoo):
    client.send(data)
</snippet></ROW><ROW><id>10391690</id><snippet>^(?!.*\bo?clock\b).*\btimes\b
</snippet></ROW><ROW><id>10391690</id><snippet>^                 # starting at the beginning of the string
(?!               # fail if
   .*\bo?clock\b    # we can match 'clock' or 'oclock' anywhere in the string
)                 # end if
.*\btimes\b       # match 'times' anywhere in the string
</snippet></ROW><ROW><id>10391690</id><snippet>\b</snippet></ROW><ROW><id>10391690</id><snippet>'clocked times'</snippet></ROW><ROW><id>10391690</id><snippet>'timeshare'</snippet></ROW><ROW><id>10391690</id><snippet>\b</snippet></ROW><ROW><id>10391690</id><snippet>&gt;&gt;&gt; re.match(r'^(?!.*\bo?clock\b).*\btimes\b', a)
&gt;&gt;&gt; re.match(r'^(?!.*\bo?clock\b).*\btimes\b', b)
&lt;_sre.SRE_Match object at 0x7fc1f96cc718&gt;
</snippet></ROW><ROW><id>10391843</id><snippet># to get __hash__ and __eq__ return id(self)
class Reference:
  def __init__(self, item):
    self.item = item

class RemovalAPI:
  def add_removal_info(self, item, removal_info):
    try:
      references = item.__reference
    except AttributeError:
      references = item.__reference = {}
    references[Reference(self)] = removal_info

  def get_removal_info(self, item):
    try:
      references = item.__reference
      self_reference = Reference(self)
      return references[self_reference]



class Container(list, RemovalAPI):
  def __iter__(self):
    for i in range(len(self)):
      item = self[i]
      self.add_removal_info(item, i)
      yield item

  def remove(self, item):
    removal_info = self.get_removal_info(item)
    del self[removal_info]

  def insert(self, item):
    self.add_removal_info(item, len(self))
    self.append(item)
    # do whatever post-processing I need
    # ...
</snippet></ROW><ROW><id>10391843</id><snippet>list</snippet></ROW><ROW><id>10391843</id><snippet>class Container(orderedset, RemovalAPI):
  # inheriting __iter__, remove from parent
  def insert(self, item):
    self.add(item)
    # do whatever post-processing I need
    # ...
</snippet></ROW><ROW><id>10391843</id><snippet>class Container(linkedlist, RemovalAPI):
  def __iter__(self):
    it = super().__iter__()
    last_item = None
    for item in it:
      self.add_removal_info(item, last_item)
      yield item

  def remove(self, item):
    removal_info = self.get_removal_info(item)
    if removal_info is None:
      self.remove_first()
    else:
      self.remove_after(removal_info)

  def insert(self, item):
    self.add_removal_info(item, None)
    self.add_to_front(item)
    # do whatever post-processing I need
    # ...
</snippet></ROW><ROW><id>10391886</id><snippet>child = pexpect.spawn('scp foo myname@host.example.com:.')
child.expect ('Password:')
child.sendline (mypassword)
</snippet></ROW><ROW><id>10391990</id><snippet>packages.txt</snippet></ROW><ROW><id>10391990</id><snippet>packages.txt</snippet></ROW><ROW><id>10392073</id><snippet>open()</snippet></ROW><ROW><id>10392073</id><snippet>ask</snippet></ROW><ROW><id>10392073</id><snippet>".csv"</snippet></ROW><ROW><id>10392073</id><snippet>+</snippet></ROW><ROW><id>10392073</id><snippet>ask+".csv"</snippet></ROW><ROW><id>10392073</id><snippet>csv</snippet></ROW><ROW><id>10392073</id><snippet>ask</snippet></ROW><ROW><id>10392073</id><snippet>with open(ask+".csv", "w") as file:
    file.write(output)
</snippet></ROW><ROW><id>10392073</id><snippet>ask = ask if ask.endswith(".csv") else ask+".csv"
with open(ask, "w") as file:
        file.write(output)
</snippet></ROW><ROW><id>10392073</id><snippet>with</snippet></ROW><ROW><id>10392073</id><snippet>".csv"</snippet></ROW><ROW><id>10392075</id><snippet>start</snippet></ROW><ROW><id>10392075</id><snippet>-1</snippet></ROW><ROW><id>10392439</id><snippet>date</snippet></ROW><ROW><id>10392439</id><snippet>datetime</snippet></ROW><ROW><id>10392439</id><snippet>strptime</snippet></ROW><ROW><id>10392439</id><snippet>strftime</snippet></ROW><ROW><id>10392439</id><snippet>strptime</snippet></ROW><ROW><id>10392439</id><snippet>d = {"Date": "01-Jan-2000", "Time": "01:02:03.456"}
dt = datetime.datetime.strptime(d["Date"]+"-"+d["Time"], "%d-%b-%Y-%H:%M:%S.%f")
print dt.strftime("%Y-%m-%d-%H-%M-%S")
</snippet></ROW><ROW><id>10392644</id><snippet>def rand_array(n):
''' returns sorted array of integers of size n'''
    R=[randint(1, 1000*n) for i in xrange(n)]
    return R
</snippet></ROW><ROW><id>10392644</id><snippet>def rand_array(n):
''' returns sorted array of integers of size n'''
    return sorted([randint(1, 1000) for i in xrange(n)])
</snippet></ROW><ROW><id>10392644</id><snippet>def sorted_array(n):
    ''' returns a sorted array of n integers'''
    return [i for i in xrange(1,n+1)]
</snippet></ROW><ROW><id>10392644</id><snippet>def sorted_array(n):
    ''' returns a sorted array of n integers'''
    return range(1, n + 1)
</snippet></ROW><ROW><id>10392644</id><snippet>def rev_array(n):
    '''returns an array of n integers in reverse order'''
    R= [i for i in reversed(xrange(1,n+1))]
    return R
</snippet></ROW><ROW><id>10392644</id><snippet>def rev_array(n):
    '''returns an array of n integers in reverse order'''
    return reversed(sorted_array(n))
</snippet></ROW><ROW><id>10392644</id><snippet>            i=0
            output="algorith: quick sort \n input data: %s" %s
            print output
            while i&lt;y:
                i=i+1
                ff=0.0
                array=x[increment-1:n:increment]
                for my in array:
                    ff+=sort_timehelp(x,quick_sort)
                    output="%d\t %f" %(my, ff)
                    print output
</snippet></ROW><ROW><id>10392644</id><snippet>i</snippet></ROW><ROW><id>10392644</id><snippet>for</snippet></ROW><ROW><id>10392644</id><snippet>            print "algorith: quick sort \n input data: %s" %s
            for i in range(y):
                ff = 0.0
                array = x[increment-1:n:increment]
                for my in array:
                    ff += sort_timehelp(x, quick_sort)
                    output = "%d\t %f" %(my, ff)
                    print output
</snippet></ROW><ROW><id>10392644</id><snippet>          saving=input("You want to save data ? type 0 to continue or 1 to save " )

          if saving == 0:
              continue
          if saving == 1:
              ask=raw_input("Type the name file: ")
              fileout=open(ask+".csv","w")
              fileout.write(output)
              fileout.close()
</snippet></ROW><ROW><id>10392644</id><snippet>if saving==0</snippet></ROW><ROW><id>10392644</id><snippet>saving</snippet></ROW><ROW><id>10392644</id><snippet>1</snippet></ROW><ROW><id>10392644</id><snippet>"a"</snippet></ROW><ROW><id>10392644</id><snippet>"w"</snippet></ROW><ROW><id>10392644</id><snippet>open</snippet></ROW><ROW><id>10392644</id><snippet>open</snippet></ROW><ROW><id>10392644</id><snippet>close</snippet></ROW><ROW><id>10392644</id><snippet>csv</snippet></ROW><ROW><id>10392978</id><snippet>def index(request):
    auth_situation = check(request)

    if auth_situation is None:               
       # some other tasks here, render a template,
       # redirect, do something, man!
    else:
       return auth_situation
</snippet></ROW><ROW><id>10393034</id><snippet>reduce.py</snippet></ROW><ROW><id>10393034</id><snippet>classifier.py</snippet></ROW><ROW><id>10393034</id><snippet>classifier</snippet></ROW><ROW><id>10393034</id><snippet>import sys
import os.path

# add the directory where reducer.py is to the python path
sys.path.append(os.path.dirname(__file__))
# __file__ is the location of reduce.py, along with "reduce.py"
# dirname strips the file name and only gives the directory
# sys.path is the python path where it looks for modules

from classifier import text_from_html, train_classifiers
</snippet></ROW><ROW><id>10393109</id><snippet>pip</snippet></ROW><ROW><id>10393128</id><snippet>lmb = lambda d: datetime.datetime.strptime(d["Date[G]"]+"-"+d["Time[G]"], "%d-%b-%Y-`%H:%M:%S.%f").strftime("%d-%b-%Y-%H")
</snippet></ROW><ROW><id>10393166</id><snippet>import re
re.split(r'[,;]+', 'This,is;a,;string')
&gt; ['This', 'is', 'a', 'string']
</snippet></ROW><ROW><id>10393403</id><snippet>anArray</snippet></ROW><ROW><id>10393403</id><snippet>MyClass.anArray</snippet></ROW><ROW><id>10393403</id><snippet>anArray</snippet></ROW><ROW><id>10393403</id><snippet>MyClass().anArray</snippet></ROW><ROW><id>10393403</id><snippet>MyClass</snippet></ROW><ROW><id>10393403</id><snippet>mc = MyClass(); mc.anArray['a'] = 5</snippet></ROW><ROW><id>10393468</id><snippet>-1</snippet></ROW><ROW><id>10393468</id><snippet>2</snippet></ROW><ROW><id>10393468</id><snippet>&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; a[::2]
[0, 2, 4, 6, 8]
&gt;&gt;&gt; a[::-2]
[9, 7, 5, 3, 1]
</snippet></ROW><ROW><id>10393474</id><snippet>import glob
import os

for file_path in glob.glob('*9999.dbf'):
    os.unlink(file_path)
</snippet></ROW><ROW><id>10393475</id><snippet>lambda</snippet></ROW><ROW><id>10393475</id><snippet>method = property(lambda self=self, type=type: self[self['type'] == type])
</snippet></ROW><ROW><id>10393547</id><snippet>xmlns:tal="http://xml.zope.org/namespaces/tal"</snippet></ROW><ROW><id>10393929</id><snippet>time.sleep(...)</snippet></ROW><ROW><id>10393929</id><snippet>from time import time, sleep
from Tkinter import *

def empty_textbox():
    textbox.delete("1.0", END)

root = Tk()

frame = Frame(root, width=300, height=100)
textbox = Text(frame)

frame.pack_propagate(0)
frame.pack()
textbox.pack()

textbox.insert(END, 'This is a test')
textbox.after(5000, empty_textbox)

root.mainloop()
</snippet></ROW><ROW><id>10394328</id><snippet>~/.inputrc</snippet></ROW><ROW><id>10394328</id><snippet>set editing-mode vi
set keymap vi
set convert-meta on
</snippet></ROW><ROW><id>10394357</id><snippet>a/text()</snippet></ROW><ROW><id>10394357</id><snippet>a/@href</snippet></ROW><ROW><id>10394357</id><snippet>href</snippet></ROW><ROW><id>10394357</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; etree.fromstring('&lt;html&gt;&lt;td&gt;abc&lt;/td&gt;&lt;a&gt;www.abc.com&lt;/a&gt;&lt;/html&gt;').xpath("//td/following-sibling::a/text()")
['www.abc.com']
</snippet></ROW><ROW><id>10394402</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; l1 = ['a','b','c','d']
&gt;&gt;&gt; l2 = ['new']
&gt;&gt;&gt; list(product(l1,l2))
[('a', 'new'), ('b', 'new'), ('c', 'new'), ('d', 'new')]
</snippet></ROW><ROW><id>10394782</id><snippet>city[0].key()
</snippet></ROW><ROW><id>10394782</id><snippet>city</snippet></ROW><ROW><id>10394863</id><snippet>cssselect</snippet></ROW><ROW><id>10394863</id><snippet>2.1</snippet></ROW><ROW><id>10394863</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; url = "http://www.bnm.gov.my/index.php?ch=109&amp;pg=294&amp;mth=3&amp;yr=2012&amp;eId=box1"
&gt;&gt;&gt; ufile = urllib2.urlopen(url)
&gt;&gt;&gt; root = etree.parse(ufile, etree.HTMLParser())
&gt;&gt;&gt; for e in root.getiterator('tr'):
...     fc = e[0]       # first child
...     if fc.tag == 'td' and fc.text == '2.1':
...         link = fc.getnext().getnext()[0]  # first child of 2nd sibling
...         print link.attrib["href"]
...
files/publication/msb/2012/3/xls/2.1.xls
</snippet></ROW><ROW><id>10394911</id><snippet>user.has_perm(u'%s.%s' % (contenttype.app_label, permission.codename))
</snippet></ROW><ROW><id>10394911</id><snippet>contenttype = ContentType.objects.get_for_model(Permission)
</snippet></ROW><ROW><id>10394914</id><snippet>cdef long n = self.n
</snippet></ROW><ROW><id>10394927</id><snippet>s.split()</snippet></ROW><ROW><id>10394927</id><snippet>&gt;&gt;&gt; s = 'here are 4 values'
&gt;&gt;&gt; '%s %s %s %s' % tuple(s.split())
'here are 4 values'
</snippet></ROW><ROW><id>10394927</id><snippet>.format()</snippet></ROW><ROW><id>10394927</id><snippet>'{0} {1} {2} {3}'.format(*s.split())
</snippet></ROW><ROW><id>10395254</id><snippet>state</snippet></ROW><ROW><id>10395254</id><snippet>InProgress</snippet></ROW><ROW><id>10395254</id><snippet>"InProgress"</snippet></ROW><ROW><id>10395254</id><snippet>state</snippet></ROW><ROW><id>10395254</id><snippet>State</snippet></ROW><ROW><id>10395254</id><snippet>state</snippet></ROW><ROW><id>10395254</id><snippet>State</snippet></ROW><ROW><id>10395254</id><snippet>__unicode__</snippet></ROW><ROW><id>10395254</id><snippet>ifequal foo.bar.0.state.as_string "InProgress"</snippet></ROW><ROW><id>10395254</id><snippet>as_string()</snippet></ROW><ROW><id>10395286</id><snippet>querysert.order_by('-modified', '-placed').reverse()
</snippet></ROW><ROW><id>10395286</id><snippet>querysert.order_by('modified', 'placed')
</snippet></ROW><ROW><id>10395286</id><snippet>list(reversed(values_list))
</snippet></ROW><ROW><id>10395286</id><snippet>reverse</snippet></ROW><ROW><id>10395491</id><snippet>import json

jsstring = """
    foo "bar"
"""

print 'function dosomething () { return %s.toLowerCase(); }' % json.dumps(jsstring)
</snippet></ROW><ROW><id>10395491</id><snippet>repr</snippet></ROW><ROW><id>10395491</id><snippet>jsstring = u"\u1234"
print 'function dosomething () { return %s.toLowerCase(); }' % repr(jsstring) 
</snippet></ROW><ROW><id>10395491</id><snippet>function dosomething () { return u'\u1234'.toLowerCase(); }
</snippet></ROW><ROW><id>10395730</id><snippet>numpy.py</snippet></ROW><ROW><id>10395730</id><snippet>numpy</snippet></ROW><ROW><id>10395983</id><snippet>TMPDIR</snippet></ROW><ROW><id>10395983</id><snippet>static const char *unixTempFileDir(void){
  static const char *azDirs[] = {
     0,
     0,
     "/var/tmp",
     "/usr/tmp",
     "/tmp",
     0        /* List terminator */
  };
  unsigned int i;
  struct stat buf;
  const char *zDir = 0;

  azDirs[0] = sqlite3_temp_directory;
  if( !azDirs[1] ) azDirs[1] = getenv("TMPDIR");
  for(i=0; i&lt;sizeof(azDirs)/sizeof(azDirs[0]); zDir=azDirs[i++]){
    if( zDir==0 ) continue;
    if( osStat(zDir, &amp;buf) ) continue;
    if( !S_ISDIR(buf.st_mode) ) continue;
    if( osAccess(zDir, 07) ) continue;
    break;
  }
  return zDir;
}
</snippet></ROW><ROW><id>10396136</id><snippet>class HttpTestCase(unittest.TestCase):   

  def _build_response(self):           
      # build and returns some text fixtures
      pass

  def test_http_get(self): 
      response = self._build_response()
</snippet></ROW><ROW><id>10396136</id><snippet>_build_response</snippet></ROW><ROW><id>10396136</id><snippet>HttpTestCase</snippet></ROW><ROW><id>10396360</id><snippet>NoSuchTableError</snippet></ROW><ROW><id>10396360</id><snippet>try:
    table = Table(table_name, MetaData(engine)) 
except NoSuchTableError:
    pass
</snippet></ROW><ROW><id>10396360</id><snippet>if engine.dialect.has_table(connection, table_name):
    #do your crazy query
</snippet></ROW><ROW><id>10396360</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.engine import reflection
#whatever code you already have
engine = create_engine('...')
insp = reflection.Inspector.from_engine(engine)
table_name = 'foo'
table_names = insp.get_table_names()
if table_name in table_names:
    x = session.query(ABC.name.label('sig_name'),func.count('*').label('count_')).join(DEF).join(MNO).filter(MNO.relevance &gt;= relevance_threshold).group_by(DEF.signature).order_by(desc('count_')).all()[:val]
</snippet></ROW><ROW><id>10396381</id><snippet>python -m CGIHTTPServer 8000</snippet></ROW><ROW><id>10396381</id><snippet>cgi-bin</snippet></ROW><ROW><id>10396381</id><snippet>htbin</snippet></ROW><ROW><id>10396391</id><snippet># It is a good idea to store the filename into a variable.
# The variable can later become a function argument when the
# code is converted to a function body.
filename = 'data.txt'

# Using the newer with construct to close the file automatically.
with open(filename) as f:
    data = f.readlines()

# Or using the older approach and closing the filea explicitly.
# Here the data is re-read again, do not use both ;)
f = open(filename)
data = f.readlines()
f.close()


# The data is of the list type.  The Python list type is actually
# a dynamic array. The lines contain also the \n; hence the .rstrip()
for n, line in enumerate(data, 1):
    print '{:2}.'.format(n), line.rstrip()

print '-----------------'

# You can later iterate through the list for other purpose, for
# example to read them via the csv.reader.
import csv

reader = csv.reader(data)
for row in reader:
    print row
</snippet></ROW><ROW><id>10396391</id><snippet> 1. 12,12,12
 2. 12,31,12
 3. 1,5,3
-----------------
['12', '12', '12']
['12', '31', '12']
['1', '5', '3']
</snippet></ROW><ROW><id>10396454</id><snippet>python ip2loc.py all</snippet></ROW><ROW><id>10396619</id><snippet>runserver(request, project_slug)</snippet></ROW><ROW><id>10396619</id><snippet>socket</snippet></ROW><ROW><id>10396650</id><snippet>0 1 0 1
1 1 1 0
1 0 0 0 
</snippet></ROW><ROW><id>10396650</id><snippet>set([(1,0), (3,0), (0,1), (1,1), (2, 1), (0,2)])
</snippet></ROW><ROW><id>10396650</id><snippet>{(1,0), (3,0), (0,1), (1,1), (2, 1), (0,2)}
</snippet></ROW><ROW><id>10396715</id><snippet>&gt;&gt;&gt; nums = [(), (), ('24', '25', '26', '27'), (), (), (), ()]
&gt;&gt;&gt; min(int(j) for i in nums for j in i)
24
</snippet></ROW><ROW><id>10397122</id><snippet>wget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.7.1.2.tar.gz
tar -xzf virtualenv-1.7.1.2.tar.gz
/home/amit/tools/localpython/bin/python2.7 virtualenv-1.7.1.2/virtualenv.py env

env/bin/pip install HTSeq
env/bin/pip install numpy
</snippet></ROW><ROW><id>10397122</id><snippet>env/bin/python myscript.py
</snippet></ROW><ROW><id>10397208</id><snippet>+=</snippet></ROW><ROW><id>10397208</id><snippet>+=</snippet></ROW><ROW><id>10397208</id><snippet>t[0].extend(['world']);
t[0] = t[0];
</snippet></ROW><ROW><id>10397243</id><snippet>__init__</snippet></ROW><ROW><id>10397367</id><snippet>output = subprocess.check_output("java MyJavaClass", cwd="../../bin/")
</snippet></ROW><ROW><id>10397368</id><snippet>RichTextCtrl</snippet></ROW><ROW><id>10397368</id><snippet>Connect()</snippet></ROW><ROW><id>10397368</id><snippet>import wx
import wx.richtext
import threading
import time


EVT_ID_VALUE = wx.NewId()

class DataEvent(wx.PyEvent):
  def __init__(self, data):
    wx.PyEvent.__init__(self)
    self.SetEventType(EVT_ID_VALUE)
    self.data=data


class Frame3(wx.Frame):
  def __init__(self, parent, title):
    self.counter = 0
    self.worker = None

    wx.Frame.__init__(
      self, name='', 
      parent=parent,
      pos=wx.Point(579, 234), 
      size=wx.Size(414, 492),
      style=wx.DEFAULT_FRAME_STYLE, title='Frame3'
    )
    self.panel1 = wx.Panel(
      name='panel1', 
      parent=self,
      pos=wx.Point(0, 0), 
      size=wx.Size(406, 458),
      style=wx.TAB_TRAVERSAL
    )
    self.richTextCtrl1 = wx.richtext.RichTextCtrl(
      parent=self.panel1, 
      pos=wx.Point(96, 96), 
      size=wx.Size(200, 100),
      style=wx.richtext.RE_MULTILINE, 
      value=u''
    )
    self.richTextCtrl1.SetLabel(u'richText')
    self.richTextCtrl1.SetScrollbars(20,20,50,50)
    self.button2 = wx.Button(
      label=u'STOP',
      name='button2', 
      parent=self.panel1, 
      pos=wx.Point(256, 280),
      size=wx.Size(75, 23), 
      style=0
    )
    self.button2.Bind(
      wx.EVT_BUTTON, 
      self.OnStop
    )
    self.button1 = wx.Button(
      label=u'START',
      name='button1', 
      parent=self.panel1, 
      pos=wx.Point(88, 280),
      size=wx.Size(75, 23), 
      style=0
    )
    self.button1.Bind(
      wx.EVT_BUTTON, 
      self.OnStart
    )
    self.Connect(-1, -1, EVT_ID_VALUE, self.OnValue )

  def OnValue(self, event):
    self.richTextCtrl1.AppendText("%d\n"%event.data)


  def OnStart(self, event):  #START BUTTON
    self.richTextCtrl1.AppendText("START\n")
    if not self.worker:
      self.worker = WorkerThread(self)
      self.worker.start() 

  def OnStop(self, event):  #STOP BUTTON
    self.richTextCtrl1.AppendText("STOP\n")
    if self.worker:
      self.worker.stop() 


class WorkerThread(threading.Thread):
  def __init__(self, notify_window):
    threading.Thread.__init__(self)
    self.counter = 0
    self._notify_window = notify_window
    self.abort = False 

  def run(self):
    while not self.abort:
      self.counter += 1
      wx.PostEvent(self._notify_window, DataEvent(self.counter))
      time.sleep(1)

  def stop(self):
      self.abort = True



if __name__ == '__main__':
    app = wx.App()
    frame = Frame3(None, "My Hello App")
    frame.Show(True)
    app.MainLoop()
</snippet></ROW><ROW><id>10397529</id><snippet>SQL Injection</snippet></ROW><ROW><id>10397679</id><snippet>if __name__ == '__main__':
    from mpl import main
    raise SystemExit(main())

from matplotlib import use
use('GTK')
from matplotlib import pyplot

from matplotlib.backends import backend_gtk

from twisted.internet import gtk2reactor
gtk2reactor.install()

from twisted.internet import reactor, task

class TwistedGtkShow(backend_gtk.Show):
    running = False
    def mainloop(self):
        if not self.running:
            self.running = True
            reactor.run()

def main():
    pyplot.plot([1,2,3,4])
    pyplot.ylabel('some numbers')

    def proof():
        print 'Twisted!'
    task.LoopingCall(proof).start(3)

    TwistedGtkShow()()
</snippet></ROW><ROW><id>10397679</id><snippet>mpl.py</snippet></ROW><ROW><id>10397679</id><snippet>mpl</snippet></ROW><ROW><id>10397679</id><snippet>use('GTK')</snippet></ROW><ROW><id>10397679</id><snippet>pyplot</snippet></ROW><ROW><id>10397679</id><snippet>gtk2reactor.install()</snippet></ROW><ROW><id>10397679</id><snippet>reactor</snippet></ROW><ROW><id>10397679</id><snippet>pyplot.show()</snippet></ROW><ROW><id>10397679</id><snippet>Show</snippet></ROW><ROW><id>10397679</id><snippet>mainloop</snippet></ROW><ROW><id>10397679</id><snippet>reactor.run()</snippet></ROW><ROW><id>10397865</id><snippet>def get(self)</snippet></ROW><ROW><id>10397865</id><snippet>def post(self)</snippet></ROW><ROW><id>10397865</id><snippet>class SendFeedback(webapp2.RequestHandler):
    def post(self):
        ...
</snippet></ROW><ROW><id>10397865</id><snippet>data    = self.request.POST
comment = data.get('comment')
</snippet></ROW><ROW><id>10397865</id><snippet>form = """
&lt;div class="modal fade" id="feedback"&gt;
    &lt;form action="/feedback" method="POST"&gt;
        &lt;div class="modal-header"&gt;&lt;h3&gt;Aiutaci a migliorare&lt;/h3&gt;&lt;/div&gt;
        &lt;div class="modal-body"&gt;
            &lt;p&gt;un piacere sapere cosa cambiereste di Metrico&lt;/p&gt;
                &lt;textarea class="input-xxlarge" name="comment" rows="3"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;&lt;input class="btn btn-inverse" type="submit"/&gt;&lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
"""

class FormTest(webapp2.RequestHandler):

    def get(self):
        self.response.out.write(form)

    def post(self):
        data = self.request.POST
        comment = data.get('comment')
        body = """
Feedback:
%s
""" % comment
        self.response.out.write(body)
</snippet></ROW><ROW><id>10397947</id><snippet>"&gt;"</snippet></ROW><ROW><id>10397947</id><snippet>&gt;</snippet></ROW><ROW><id>10397947</id><snippet>shell=True</snippet></ROW><ROW><id>10397947</id><snippet>shell=False</snippet></ROW><ROW><id>10397947</id><snippet>shell=True</snippet></ROW><ROW><id>10397947</id><snippet>args = shlex.split('/opt/lampp/bin/mysqldump -uroot -ppassword --add-drop-database --database mydatabase')
output = open("mydatabase.sql", "w")
subprocess.Popen(args, stdout=output)
</snippet></ROW><ROW><id>10398170</id><snippet>.save</snippet></ROW><ROW><id>10398170</id><snippet>update</snippet></ROW><ROW><id>10398170</id><snippet>unique</snippet></ROW><ROW><id>10398170</id><snippet>Modelname.objects.filter(name="ramesh").update(**mydict)
</snippet></ROW><ROW><id>10398170</id><snippet>.save</snippet></ROW><ROW><id>10398170</id><snippet>.save</snippet></ROW><ROW><id>10398535</id><snippet>Rain  0 0 0 0 1 0 1 0 0 1
Hail  0 1 0 0 0 0 0 1 0 0
Sunny 1 1 1 0 1 0 1 0 1 1
</snippet></ROW><ROW><id>10398535</id><snippet>from numpy import loadtxt
import pylab as plt

labels = loadtxt("data.txt", usecols=[0,],dtype=str)
A      = loadtxt("data.txt", usecols=range(1,10))

plt.imshow(A, interpolation='nearest', cmap=plt.cm.Reds)
plt.yticks(range(A.shape[0]), labels)

plt.show()
import pylab as plt
</snippet></ROW><ROW><id>10398548</id><snippet>python -m timeit -s "keys = list(zip(range(10000), range(10, 10000)))" -s "values = range(10000)" -s "a=dict(zip(keys, values))" "for i in keys:" "  _ = a[i]"
1000 loops, best of 3: 855 usec per loop

python -m timeit -s "keys = [frozenset(i) for i in zip(range(10000), range(10, 10000))]" -s "values = range(10000)" -s "a=dict(zip(keys, values))" "for i in keys:" "  _ = a[i]"
1000 loops, best of 3: 848 usec per loop
</snippet></ROW><ROW><id>10398709</id><snippet>import re

my_string = "Wow! Is this true? Really!?!? This is crazy!"

words = re.findall(r'\w+', my_string) #This finds words in the document
</snippet></ROW><ROW><id>10398709</id><snippet>&gt;&gt;&gt; words
['Wow', 'Is', 'this', 'true', 'Really', 'This', 'is', 'crazy']
</snippet></ROW><ROW><id>10398709</id><snippet>from collections import Counter

cap_words = [word.upper() for word in words] #capitalizes all the words

word_counts = Counter(cap_words) #counts the number each time a word appears
</snippet></ROW><ROW><id>10398709</id><snippet>&gt;&gt;&gt; word_counts
Counter({'THIS': 2, 'IS': 2, 'CRAZY': 1, 'WOW': 1, 'TRUE': 1, 'REALLY': 1})
</snippet></ROW><ROW><id>10398709</id><snippet>import re
from collections import Counter

with open('your_file.txt') as f:
    passage = f.read()

words = re.findall(r'\w+', passage)

cap_words = [word.upper() for word in words]

word_counts = Counter(cap_words)
</snippet></ROW><ROW><id>10398766</id><snippet>\b</snippet></ROW><ROW><id>10398766</id><snippet>import re

for s in list1:
    m = re.search(r'\b\d{4}\b', s)
    if m:
        print m.group(0)
</snippet></ROW><ROW><id>10398766</id><snippet>1111</snippet></ROW><ROW><id>10398766</id><snippet>\b</snippet></ROW><ROW><id>10398766</id><snippet>\b</snippet></ROW><ROW><id>10399323</id><snippet>positionx</snippet></ROW><ROW><id>10399323</id><snippet>levels(score)</snippet></ROW><ROW><id>10399323</id><snippet>enemies</snippet></ROW><ROW><id>10399323</id><snippet>positionx</snippet></ROW><ROW><id>10399323</id><snippet>levels()</snippet></ROW><ROW><id>10399323</id><snippet>positionx</snippet></ROW><ROW><id>10399323</id><snippet>positiony</snippet></ROW><ROW><id>10399323</id><snippet>range(enemies)</snippet></ROW><ROW><id>10399323</id><snippet>for enemy in enemies:
    enemy.update(globalGameState)
</snippet></ROW><ROW><id>10399323</id><snippet>globalGameState</snippet></ROW><ROW><id>10399362</id><snippet>app.yaml</snippet></ROW><ROW><id>10399362</id><snippet>cron.yaml</snippet></ROW><ROW><id>10399362</id><snippet>app.yaml</snippet></ROW><ROW><id>10399362</id><snippet>handlers:
- url: /path/to/cron
  script: parsexml.py
</snippet></ROW><ROW><id>10399362</id><snippet>handlers:
- url: /.*
  script: parsexml.py
</snippet></ROW><ROW><id>10399362</id><snippet>cron.yaml</snippet></ROW><ROW><id>10399362</id><snippet>cron:
- description: scrape xml
  url: /path/to/cron
  schedule: every 10 minutes
</snippet></ROW><ROW><id>10399362</id><snippet>parsexml.py</snippet></ROW><ROW><id>10399362</id><snippet>/path/to/cron</snippet></ROW><ROW><id>10399362</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class ParseXMLHandler(webapp.RequestHandler):
    def get(self):
        # do something

application = webapp.WSGIApplication([('/path/to/cron', ParseXMLHandler)],
                                     debug=True)
if __name__ == '__main__':
    run_wsgi_app(application)
</snippet></ROW><ROW><id>10399362</id><snippet>script: parsexml.application</snippet></ROW><ROW><id>10399362</id><snippet>application</snippet></ROW><ROW><id>10399436</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>10399436</id><snippet>me@here:~/test$ chmod u+x argparsetest.py 
</snippet></ROW><ROW><id>10399436</id><snippet>me@here:~/test$ ./argparsetest.py&lt;TAB&gt;
argparsetest.py  result.png       u1.py  

me@here:~/test$ ./argparsetest.py -i&lt;TAB&gt;
argparsetest.py  result.png       u1.py  
</snippet></ROW><ROW><id>10399436</id><snippet>complete -r
</snippet></ROW><ROW><id>10399436</id><snippet>if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
</snippet></ROW><ROW><id>10399638</id><snippet>   n = max(len(self.digits),len(other.digits))
</snippet></ROW><ROW><id>10399872</id><snippet>args = [1, 2, 3]
fun(*args)
</snippet></ROW><ROW><id>10399872</id><snippet>fun(1, 2, 3)
</snippet></ROW><ROW><id>10399872</id><snippet>fun</snippet></ROW><ROW><id>10399872</id><snippet>def fun(a, b, *args):
    print('a =', a)
    print('b =', b)
    print('args =', args)

fun(1, 2, 3, 4) # a = 1, b = 2, args = [3, 4]
</snippet></ROW><ROW><id>10399903</id><snippet>x in &lt;string&gt;</snippet></ROW><ROW><id>10399903</id><snippet>x</snippet></ROW><ROW><id>10399903</id><snippet>x, x[1:], x[2:], x[3:],</snippet></ROW><ROW><id>10399903</id><snippet>n</snippet></ROW><ROW><id>10399903</id><snippet>n</snippet></ROW><ROW><id>10399903</id><snippet>x</snippet></ROW><ROW><id>10399903</id><snippet>x, x[1:], x[2:]</snippet></ROW><ROW><id>10399997</id><snippet>In [19]: Data = np.zeros(100,dtype=[('time', np.float), ('y',np.float)])

In [20]: Data['y'] = np.random.uniform(size=100)

In [21]: Data['time'] = np.random.uniform(size=100)

In [22]: print Data[ (Data['time'] &gt; 0.6) &amp; (Data['time'] &lt; 0.7) ]
[(0.6309334093696576, 0.5898588768194092)
 (0.6026040512366535, 0.4260650141076221)
 (0.6587399844526572, 0.033397798015253444)
 (0.6863639946779522, 0.67002523603246)
 (0.6522035987367735, 0.948019085443445)
 (0.6809894254849801, 0.5131390279565994)
 (0.6311277013562147, 0.5746610745753917)
 (0.6324174554481182, 0.8587836614681397)
 (0.6542221804687635, 0.9706926940115863)
 (0.671321726341415, 0.7446681474117195)]
</snippet></ROW><ROW><id>10400175</id><snippet>input()</snippet></ROW><ROW><id>10400175</id><snippet>raw_input()</snippet></ROW><ROW><id>10400175</id><snippet>input()</snippet></ROW><ROW><id>10400175</id><snippet>raw_input()</snippet></ROW><ROW><id>10400175</id><snippet># Word Problems
# Demonstrates numbers and math

print("If a 2000 pound pregnant hippo gives birth to a 100 pound calf,")
print("but then eats 50 pounds of food, how much does she weigh?")
raw_input("Press the enter key to find out.")
print("2000 - 100 + 50 =", 2000 - 100 + 50)

raw_input("\n\nPress the enter key to exit")
</snippet></ROW><ROW><id>10400175</id><snippet>input()</snippet></ROW><ROW><id>10400188</id><snippet>self.kwargs['post_id']</snippet></ROW><ROW><id>10400188</id><snippet>self.args[0]</snippet></ROW><ROW><id>10400368</id><snippet>&gt;&gt;&gt; timeit.timeit('for i in repeat(None, 1000): pass', setup='from itertools import repeat', number=100000)
1.94118924332561
&gt;&gt;&gt; timeit.timeit('for i in xrange(1000): pass', number=100000)
2.5231991775491025
&gt;&gt;&gt; timeit.timeit('for i in range(1000): pass', number=100000)
3.9302601308266816
&gt;&gt;&gt; timeit.timeit('for i in r: pass', setup='r = [None] * 1000', number=100000)
2.0900103923822684
&gt;&gt;&gt; timeit.timeit('for i in r: pass', setup='r = range(1000)', number=100000)
2.2248894063351656
&gt;&gt;&gt; timeit.timeit('for i in r: pass', setup='r = xrange(1000)', number=100000)
2.9105822108675823
</snippet></ROW><ROW><id>10400368</id><snippet>itertools.repeat</snippet></ROW><ROW><id>10400368</id><snippet>1</snippet></ROW><ROW><id>10400368</id><snippet>None</snippet></ROW><ROW><id>10400502</id><snippet>sum(num for num in range(numbers) if num%3 == 0 or num%5 == 0)
</snippet></ROW><ROW><id>10400502</id><snippet>numbers</snippet></ROW><ROW><id>10400502</id><snippet>highest</snippet></ROW><ROW><id>10400502</id><snippet>if 0 in {num%3, num%5}</snippet></ROW><ROW><id>10400604</id><snippet>featWord</snippet></ROW><ROW><id>10400604</id><snippet>list</snippet></ROW><ROW><id>10400604</id><snippet>self</snippet></ROW><ROW><id>10400604</id><snippet>__init__</snippet></ROW><ROW><id>10400604</id><snippet>__init__</snippet></ROW><ROW><id>10400604</id><snippet>featWord</snippet></ROW><ROW><id>10400604</id><snippet>__repr__</snippet></ROW><ROW><id>10400604</id><snippet>list</snippet></ROW><ROW><id>10400604</id><snippet>__repr__</snippet></ROW><ROW><id>10400604</id><snippet>__repr__</snippet></ROW><ROW><id>10400604</id><snippet>list</snippet></ROW><ROW><id>10400604</id><snippet>self</snippet></ROW><ROW><id>10400946</id><snippet>boost::any</snippet></ROW><ROW><id>10401145</id><snippet>X</snippet></ROW><ROW><id>10401145</id><snippet>import X.Car</snippet></ROW><ROW><id>10401145</id><snippet>X.Car.Car</snippet></ROW><ROW><id>10401156</id><snippet>subprocess</snippet></ROW><ROW><id>10401156</id><snippet>cls</snippet></ROW><ROW><id>10401156</id><snippet>os.system()</snippet></ROW><ROW><id>10401156</id><snippet>import subprocess
subprocess.call("cls", shell=True)
</snippet></ROW><ROW><id>10401209</id><snippet>fromkeys()</snippet></ROW><ROW><id>10401209</id><snippet>In [2]: l = [[]] * 3

In [3]: l
Out[3]: [[], [], []]

In [4]: l[0].append('one')

In [5]: l
Out[5]: [['one'], ['one'], ['one']]
</snippet></ROW><ROW><id>10401209</id><snippet>In [6]: map(id, l)
Out[6]: [18459824, 18459824, 18459824]
</snippet></ROW><ROW><id>10401338</id><snippet> ctypes.CDLL('librt.so', mode=ctypes.RTLD_GLOBAL)
</snippet></ROW><ROW><id>10401534</id><snippet>from myapp import *
....
import myapp
reload(myapp)
from myapp import *
</snippet></ROW><ROW><id>10401550</id><snippet>U+00A9</snippet></ROW><ROW><id>10401550</id><snippet>U+2122</snippet></ROW><ROW><id>10401550</id><snippet>&gt;&gt;&gt; example = u"Xerox ™ printer"
&gt;&gt;&gt; example
u'Xerox \u2122 printer'
&gt;&gt;&gt; example.encode('ascii')
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 6: ordinal 
not in range(128)
&gt;&gt;&gt; example.encode('ascii', errors='ignore')
'Xerox  printer'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10401550</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>10401550</id><snippet>errors='ignore'</snippet></ROW><ROW><id>10401553</id><snippet>objectid</snippet></ROW><ROW><id>10401553</id><snippet>bson</snippet></ROW><ROW><id>10401553</id><snippet>pymongo</snippet></ROW><ROW><id>10401698</id><snippet>-</snippet></ROW><ROW><id>10401698</id><snippet>stdin</snippet></ROW><ROW><id>10401698</id><snippet>stdout</snippet></ROW><ROW><id>10401698</id><snippet>Popen</snippet></ROW><ROW><id>10401698</id><snippet>from subprocess import Popen, PIPE

with open("test.avi", "rb") as infile:
    p=Popen(["ffmpeg", "-i", "-", "-f", "matroska", "-vcodec", "mpeg4",
        "-acodec", "aac", "-strict", "experimental", "-"],
           stdin=infile, stdout=PIPE)
    while True:
        data = p.stdout.read(1024)
        if len(data) == 0:
            break
        # do something with data...
        print(data)
    print p.wait() # should have finisted anyway
</snippet></ROW><ROW><id>10401698</id><snippet>stdin</snippet></ROW><ROW><id>10401698</id><snippet>PIPE</snippet></ROW><ROW><id>10401698</id><snippet>p.stdin</snippet></ROW><ROW><id>10401956</id><snippet>N = 4

def supers(number):
    zeros = sum(1 for bit in xrange(N) if (number &gt;&gt; bit) &amp; 1 == 0)
    return 2**zeros


def solve(a,b,c):
    total = supers(a) + supers(b) + supers(c)
    total -= supers(a | b) # counted twice, remove one
    total -= supers(b | c) # counted twice, remove one
    total -= supers(a | c) # counted twice, remove one
    total += supers(a | b | c) # counted three times, removed three times, add one

    return total


print solve(0b1001,0b0011,0b0110)
</snippet></ROW><ROW><id>10401956</id><snippet>S(n)</snippet></ROW><ROW><id>10401956</id><snippet>n</snippet></ROW><ROW><id>10401956</id><snippet>supers(n)</snippet></ROW><ROW><id>10401956</id><snippet>|S(n)|</snippet></ROW><ROW><id>10401956</id><snippet>supers</snippet></ROW><ROW><id>10401956</id><snippet>S(a) ^ S(b) = S(a | b)</snippet></ROW><ROW><id>10402176</id><snippet>q</snippet></ROW><ROW><id>10402176</id><snippet>http://127.0.0.1:8000/search/?q=*&amp;page=2</snippet></ROW><ROW><id>10402176</id><snippet>ListView</snippet></ROW><ROW><id>10402201</id><snippet>cursor.execute( &lt;select statement string&gt;, &lt;tuple&gt;)</snippet></ROW><ROW><id>10402201</id><snippet>cursor.execute("""SELECT
            * FROM hashes
            WHERE hash=%s""",
            (data, ))
</snippet></ROW><ROW><id>10402445</id><snippet>def f():
    import B
    import inspect

    functions=inspect.getmembers(B,inspect.isfunction)
</snippet></ROW><ROW><id>10402445</id><snippet>def f(mod):
    import inspect
    functions=inspect.getmembers(mod,inspect.isfunction)
    return functions
</snippet></ROW><ROW><id>10402445</id><snippet>import sys
import A
myfuncs=A.f(sys.modules[__name__])
</snippet></ROW><ROW><id>10402510</id><snippet>z = x.decode('hex') 
z = '\0' * (4 - len(z)) + z
</snippet></ROW><ROW><id>10402510</id><snippet>str.decode</snippet></ROW><ROW><id>10402510</id><snippet>&gt;&gt;&gt; z = '615885'.decode("hex")
&gt;&gt;&gt; z = '\0' * (4 - len(z)) + z
&gt;&gt;&gt; struct.unpack('!f', z)
(8.939797951825212e-39,)
</snippet></ROW><ROW><id>10402510</id><snippet>4</snippet></ROW><ROW><id>10402510</id><snippet>8</snippet></ROW><ROW><id>10402667</id><snippet>href</snippet></ROW><ROW><id>10402667</id><snippet>href_parse</snippet></ROW><ROW><id>10402667</id><snippet>from urlparse import urlparse
from urlparse import parse_qs

def href_parse(value):
    if (value.startswith('javascript: OpenWindow('') and 
        value.endswith('')'):
        begin_length = len('javascript: OpenWindow('')
        end_length = len('')')
        file_location = value[begin_length:-end_length]

        query_string = urlparse(file_location).query
        query_dict = parse_qs(query_string)
        return query_dict.get('fileId', None)


href_data = [[href_parse(td.find('a', attrs={'class': 'blue'})['href']) 
              for td in tr.findAll("td")] 
              for tr in rows]
print href_data
</snippet></ROW><ROW><id>10403058</id><snippet>application: testwebapp2
version: 1
runtime: python
api_version: 1

handlers:
- url: .*
  script: main.py
</snippet></ROW><ROW><id>10403058</id><snippet>import webapp2
class HelloWebapp2(webapp2.RequestHandler):
    def get(self):
        self.response.write('Hello, webapp2!')

app = webapp2.WSGIApplication([
    ('/', HelloWebapp2),
], debug=True)

def main():
    app.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10403062</id><snippet>sys.stdout</snippet></ROW><ROW><id>10403062</id><snippet>open(filename,'w')</snippet></ROW><ROW><id>10403062</id><snippet>open(filename,'a')</snippet></ROW><ROW><id>10403123</id><snippet>&gt;&gt;&gt; import mimetypes
&gt;&gt;&gt; mimetypes.init()
&gt;&gt;&gt; mimetypes.knownfiles
['/etc/mime.types', '/etc/httpd/mime.types', '/etc/httpd/conf/mime.types', '/etc/apache/mime.types', '/etc/apache2/mime.types', '/usr/local/etc/httpd/conf/mime.types', '/usr/local/lib/netscape/mime.types', '/usr/local/etc/httpd/conf/mime.types', '/usr/local/etc/mime.types']
</snippet></ROW><ROW><id>10403319</id><snippet>&gt;&gt;&gt; [s for s in l.splitlines() if re.search(r'^(.)(?!\1).(?!\1).\1$', s)]
['abca', 'bcab', 'cbac']
</snippet></ROW><ROW><id>10403319</id><snippet>(?!\1)</snippet></ROW><ROW><id>10403454</id><snippet>decimal</snippet></ROW><ROW><id>10403492</id><snippet>from BeautifulSoup import BeautifulSoup
import xlwt

text = '''&lt;table&gt;&lt;tr&gt;&lt;td class="normaltext" valign="TOP"&gt;Tesco - United Kingdom  &lt;/td&gt;
&lt;td class="normaltext"  valign="TOP"&gt;CO&lt;/td&gt;
&lt;td class="normaltext"  valign="TOP"&gt;Unknown  &lt;/td&gt;
&lt;td class="normaltext"  align="center" valign="top"&gt;BULATS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="5"&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="normaltext" valign="TOP"&gt;Tesco - United Kingdom  &lt;/td&gt;
&lt;td class="normaltext"  valign="TOP"&gt;CO&lt;/td&gt;
&lt;td class="normaltext"  valign="TOP"&gt;Unknown  &lt;/td&gt;
&lt;td class="normaltext"  align="center" valign="top"&gt;BULATS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="5"&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;table&gt;'''

wb = xlwt.Workbook()
ws = wb.add_sheet('a test sheet')

soup = BeautifulSoup(text)
table = soup.find('table')
rows = table.findAll('tr')
x = 0
for tr in rows:
    cols = tr.findAll('td', attrs={'class' : 'normaltext'})
    if not cols: 
        # when we hit an empty row, we should not print anything to the workbook
        continue
    y = 0
    for td in cols:
        texte_bu = td.text
        texte_bu = texte_bu.encode('utf-8')
        texte_bu = texte_bu.strip()
        ws.write(x, y, td.text)
        print(x, y, td.text)
        y = y + 1
    # update the row pointer AFTER a row has been printed
    # this avoids the blank row at the top of your table
    x = x + 1

wb.save('example.xls')
</snippet></ROW><ROW><id>10403496</id><snippet>collections.Counter</snippet></ROW><ROW><id>10403496</id><snippet>Counter(item[:2] for item in list1)
</snippet></ROW><ROW><id>10403958</id><snippet>import wx 
class SettingsPanel(wx.MiniFrame):

    def __init__(self, parent, id=wx.ID_ANY, title="Settings Panel", pos=wx.DefaultPosition,
             size=wx.DefaultSize,
             style=wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_NO_TASKBAR
             | wx.FRAME_FLOAT_ON_PARENT | wx.CLIP_CHILDREN):

        wx.MiniFrame.__init__(self, parent, id, title, pos, size, style)

        #self.targetTitleBar = parent.titleBar
        self.parent = parent
        self.panel = wx.Panel(self, -1)

app = wx.PySimpleApp() 
frame = SettingsPanel(None)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>10403958</id><snippet>titleBar</snippet></ROW><ROW><id>10403958</id><snippet>titleBar</snippet></ROW><ROW><id>10403958</id><snippet>titleBar</snippet></ROW><ROW><id>10403958</id><snippet>Refresh</snippet></ROW><ROW><id>10403958</id><snippet>parent=None</snippet></ROW><ROW><id>10403958</id><snippet>import wx 

class SettingsPanel(wx.MiniFrame):

    def __init__(self, parent, id=wx.ID_ANY, title="Settings Panel", pos=wx.DefaultPosition,
             size=wx.DefaultSize,
             style=wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_NO_TASKBAR
             | wx.FRAME_FLOAT_ON_PARENT | wx.CLIP_CHILDREN):

        wx.MiniFrame.__init__(self, parent, id, title, pos, size, style)

        self.targetTitleBar = parent.titleBar
        self.parent = parent
        self.panel = wx.Panel(self, -1)

        self.targetTitleBar.Refresh() # an example of calling the mock object

class MockTitleBar(object):
    def __init__(self):
        pass
    def Refresh(self):
        print "refresh"

app = wx.PySimpleApp()
title_bar = MockTitleBar()
top_frame = wx.Frame(None)
top_frame.titleBar = title_bar
frame = SettingsPanel(top_frame)
top_frame.Show()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>10404354</id><snippet>from struct import *
mode = pack("h", 42) # 'h' == short
</snippet></ROW><ROW><id>10404354</id><snippet>pack("I", 42)</snippet></ROW><ROW><id>10404634</id><snippet>len(os.path.listdir(dirname))
</snippet></ROW><ROW><id>10404634</id><snippet> sum([os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f)]).
</snippet></ROW><ROW><id>10404839</id><snippet>roledefs</snippet></ROW><ROW><id>10404839</id><snippet>env.roledefs = {
    'first_half': ['host1', 'host2'],
    'second_half': ['host3', 'host4'],
}

def deploy_server():
    ...
    # deploy one host from current role here

def deploy():
    # first role:
    env.roles = ['first_half']
    execute('deploy_server')
    test()  # here test deployed servers
    # second role:
    env.roles = ['second_half']
    execute('deploy_server')
</snippet></ROW><ROW><id>10404839</id><snippet>env.roledefs</snippet></ROW><ROW><id>10404839</id><snippet>env.roles</snippet></ROW><ROW><id>10404839</id><snippet>execute()</snippet></ROW><ROW><id>10404895</id><snippet>pylab.ylabel('Example', fontsize=40)</snippet></ROW><ROW><id>10404895</id><snippet>pyplot</snippet></ROW><ROW><id>10404895</id><snippet>ax.set_ylabel('Example', fontsize=40)</snippet></ROW><ROW><id>10404895</id><snippet>ax.yaxis.label.set_size(40)</snippet></ROW><ROW><id>10404983</id><snippet>namespace bp = boost::python
void FillBuffer(Foo&amp; this, bp::list buff)
{
    unsigned char* addr = reinterpret_cast&lt; unsigned char* &gt;( this.GetAddress() );
    for(int i = 0; i &lt; bp::len(buff); i++)
        addr[i] = bp::extract&lt; unsigned char &gt;( buff[i] );
}

Foo_exposer.def("FillBuffer", &amp;FillBuffer);
</snippet></ROW><ROW><id>10405012</id><snippet>data = data.fetchall()</snippet></ROW><ROW><id>10405012</id><snippet>.fetchall()</snippet></ROW><ROW><id>10405141</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>10405273</id><snippet>def distance(p1, p2):
    total = 0
    for i, (a, b) in enumerate(zip(p1, p2)):
        delta = abs(b - a)
        if delta &gt; dimension[i] - delta:
            delta = dimension[i] - delta
        total += delta ** 2
    return total ** 0.5
</snippet></ROW><ROW><id>10405562</id><snippet>shell=True</snippet></ROW><ROW><id>10405562</id><snippet>import subprocess
subprocess.check_output('ps -eo pcpu,pid,user,args | sort -k 1 -r | head -3',
                        shell=True)
</snippet></ROW><ROW><id>10405562</id><snippet>raw = subprocess.check_output('ps -eo pcpu,pid,user,args --sort -pcpu')
first_three_lines = list(raw.split('\n'))[:3]
</snippet></ROW><ROW><id>10405911</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>10405911</id><snippet>select *</snippet></ROW><ROW><id>10405911</id><snippet>select *</snippet></ROW><ROW><id>10405911</id><snippet>None</snippet></ROW><ROW><id>10405911</id><snippet>select *</snippet></ROW><ROW><id>10405911</id><snippet>require 'net/http'
require 'json'

query = "select *"
url = "http://new.openbms.org/backend/api/query"
uri = URI(url)
response = Net::HTTP.post_form(uri, { query =&gt; nil })
puts JSON.parse(response.body)
</snippet></ROW><ROW><id>10405968</id><snippet>i=i+increment</snippet></ROW><ROW><id>10405968</id><snippet>for i in range(increment,n+increment,increment)</snippet></ROW><ROW><id>10405968</id><snippet>increment</snippet></ROW><ROW><id>10406143</id><snippet>&gt;&gt;&gt; 3 not in [2, 3, 4]
False
&gt;&gt;&gt; 3 not in [4, 5, 6]
True
</snippet></ROW><ROW><id>10406143</id><snippet>&gt;&gt;&gt; (2, 3) not in [(2, 3), (5, 6), (9, 1)]
False
&gt;&gt;&gt; (2, 3) not in [(2, 7), (7, 3), "hi"]
True
</snippet></ROW><ROW><id>10406161</id><snippet>.encode</snippet></ROW><ROW><id>10406161</id><snippet>.decode</snippet></ROW><ROW><id>10406161</id><snippet>.decode()</snippet></ROW><ROW><id>10406236</id><snippet>getDisplayName()</snippet></ROW><ROW><id>10406236</id><snippet>&gt;&gt;&gt; import icu
&gt;&gt;&gt; locale = icu.Locale("pt_BR")
&gt;&gt;&gt; print icu.getDisplayName()
u'portuguese (Brazil)'
&gt;&gt;&gt; print icu.getDisplayName(locale)
u'portugu\xeas (Brasil)'
</snippet></ROW><ROW><id>10406271</id><snippet>Button(root,text="blah").pack()
</snippet></ROW><ROW><id>10406271</id><snippet>b1=Button(root,text="blah")
b2=Button(root,text="blah")
b1.grid(row=0,column=0)
b2.grid(row=1,column=0)
</snippet></ROW><ROW><id>10406360</id><snippet>OrderedDict</snippet></ROW><ROW><id>10406360</id><snippet>dict</snippet></ROW><ROW><id>10406374</id><snippet>__init__</snippet></ROW><ROW><id>10406374</id><snippet>import inspect, subprocess, sys

def __init__(self, config='via_git'):
    if config == 'via_git':
        gitsays = subprocess.check_output(['git', 'symbolic-ref', 'HEAD'])
        cbranch = gitsays.rstrip('\n').replace('refs/heads/', '', 1)
        # now you know which branch you're on...
        tbranch = cbranch.title() # foo -&gt; Foo, for class name conventions
        classes = dict(inspect.getmembers(sys.modules[__name__], inspect.isclass)
        if tbranch in classes:
            print 'automatically using', tbranch
            self.conf = classes[tbranch]
        else:
            print 'on branch', cbranch, 'so falling back to Production'
            self.conf = Production
    elif config == 'production':
        self.conf = Production
    else:
        self.conf = Development
</snippet></ROW><ROW><id>10406374</id><snippet>check_output</snippet></ROW><ROW><id>10406374</id><snippet>subprocess</snippet></ROW><ROW><id>10406374</id><snippet>cwd</snippet></ROW><ROW><id>10406542</id><snippet>from threading import Thread
from time import sleep

def t_func():
    print "Sleeping"
    sleep(5)
    print "Done Sleeping"

def test():
    t = Thread(target=t_func)
    t.start()

&gt;&gt;&gt; test()
Sleeping
Done Sleeping
</snippet></ROW><ROW><id>10406542</id><snippet>t</snippet></ROW><ROW><id>10406623</id><snippet>proc = subprocess.Popen("third_party.exe", stdout=subprocess.PIPE, bufsize=1)
print proc.communicate()
</snippet></ROW><ROW><id>10406623</id><snippet>proc = subprocess.Popen("third_party.exe", 
                        stdout=subprocess.PIPE, 
                        stderr=subprocess.STDOUT, bufsize=1)
</snippet></ROW><ROW><id>10406623</id><snippet>communicate()</snippet></ROW><ROW><id>10406623</id><snippet>import tempfile
import subprocess

w = tempfile.NamedTemporaryFile()
p = subprocess.Popen('third_party.exe', shell=True, stdout=w, 
                        stderr=subprocess.STDOUT, bufsize=0)

with open(w.name, 'r') as r:
    for line in r:
        print line
w.close()
</snippet></ROW><ROW><id>10406978</id><snippet>with open('u.txt') as uf, open('v.txt') as vf:
    for u,v in zip(uf,vf):
        print uv2sd(float(u),float(v))
</snippet></ROW><ROW><id>10406980</id><snippet>for a, next_a in zip(frag, frag[1:]):
</snippet></ROW><ROW><id>10406980</id><snippet>[1:]</snippet></ROW><ROW><id>10407127</id><snippet>out1 = raw_input("Where would you like to save this? ")
</snippet></ROW><ROW><id>10407200</id><snippet>&gt;&gt;&gt; myDeque = collections.deque([0,1,2,3,4,5])
&gt;&gt;&gt; list(itertools.islice(myDeque, 3, sys.maxint))
[3, 4, 5]
</snippet></ROW><ROW><id>10407541</id><snippet>import sys
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QApplication, QDialog, QListWidgetItem, QListWidget, QIcon

def main():

    app = QtGui.QApplication(sys.argv)
    window = QDialog()

    list = QListWidget( window )

    itm = QListWidgetItem( "Tick" );
    itm.setIcon(QIcon(r"tick.png"));
    list.addItem(itm);

    window.show( )
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10407541</id><snippet>import sys
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QApplication, QDialog, QListWidgetItem, QListWidget, QIcon, QTextEdit, QTextDocumentFragment

def main():

    app = QtGui.QApplication(sys.argv)
    window = QDialog()

    list = QListWidget( window )

    textEditor = QTextEdit( window );
    textEditor.setReadOnly( True )
    tick_icon = QTextDocumentFragment.fromHtml(r"&lt;img src='tick.png'&gt;");

    textEditor.insertPlainText ( " ValiumKnight writes: " )
    textEditor.textCursor().insertFragment(tick_icon);
    textEditor.insertPlainText ( " Hello World " )
    textEditor.textCursor().insertFragment(tick_icon);
    textEditor.textCursor().insertFragment(tick_icon);
    textEditor.textCursor().insertFragment(tick_icon);

    window.show( )
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10407688</id><snippet>filenamecondmap = {
  u'Contains': operator.contains,
  u'Does not end with': lambda x, y: not x.endswith(y),
   ...
}

 ...

condmap = {
  u'Filename': filenamecondmap,
  u'Modified': modifiedcondmap,
   ...
}
</snippet></ROW><ROW><id>10407688</id><snippet>condmap[u'Filename'][u'Contains'](thefile['Filename'], 'my')
</snippet></ROW><ROW><id>10407737</id><snippet>&gt;&gt;&gt; re.sub("\D.*", "", "98374D90")
'98374'
</snippet></ROW><ROW><id>10407840</id><snippet>post_save.connect(create_user_profile, sender=User, 
                    dispatch_uid="user_create_profile")
</snippet></ROW><ROW><id>10407856</id><snippet>reduce</snippet></ROW><ROW><id>10407856</id><snippet>def sum_iterable(a):
    return reduce(lambda x,y: x+y, a, 0)
</snippet></ROW><ROW><id>10407924</id><snippet>html.decode('utf-8')</snippet></ROW><ROW><id>10407924</id><snippet>str</snippet></ROW><ROW><id>10407924</id><snippet>.find()</snippet></ROW><ROW><id>10407924</id><snippet>.decode()</snippet></ROW><ROW><id>10408215</id><snippet>Unresolved import</snippet></ROW><ROW><id>10408235</id><snippet>for value in (mydict[key] for key in mydict):
</snippet></ROW><ROW><id>10408235</id><snippet>def dict_values(d):
   return (mydict[key] for key in mydict)

def dict_items(d):
   return ((key, mydict[key]) for key in mydict)

for value in dict_values(mydict):
    ...

for value in dict_items(mydict):
    ...
</snippet></ROW><ROW><id>10408235</id><snippet>d.items()</snippet></ROW><ROW><id>10408235</id><snippet>d.iteritems()</snippet></ROW><ROW><id>10408845</id><snippet>&gt;&gt;&gt; "/get/category".strip("/")
'get/category'
</snippet></ROW><ROW><id>10408845</id><snippet>strip()</snippet></ROW><ROW><id>10409174</id><snippet>&lt;form action="{{ url_for('delete_movie') }}" method=post class=delete-movie&gt;
&lt;input type=hidden value="{{ movie.name }}"name=movie_to_delete"&gt;&lt;/input&gt;
&lt;input type=submit&gt;&lt;/input&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10409210</id><snippet>strptime</snippet></ROW><ROW><id>10409210</id><snippet>#!/usr/bin/env python

import time
import datetime
import locale

print locale.getlocale()
import pynotify
print locale.getlocale()
c='5/1/12 1:15 PM'
print c
dt = time.strptime(c, "%d/%m/%y %H:%M %p")
</snippet></ROW><ROW><id>10409210</id><snippet>(None, None)
('en_US', 'UTF8')
5/1/12 1:15 PM
</snippet></ROW><ROW><id>10410211</id><snippet>new = [s2 or s1 for s1, s2 in zip (stringList, stringList[1:])] # + last element
</snippet></ROW><ROW><id>10410510</id><snippet>defaultdict</snippet></ROW><ROW><id>10410510</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr1 = np.array([1.4, 3.0, 4.0, 4.0, 7.0, 9.0, 9.0, 9.0])
&gt;&gt;&gt; arr2 = np.array([2.3, 5.0, 2.3, 2.3, 4.0, 6.0, 5.0, 6.0])
&gt;&gt;&gt; data = np.array([5.4, 7.1, 9.5, 1.9, 8.7, 1.8, 6.1, 7.4])
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dd = defaultdict(list)
&gt;&gt;&gt; for x1, x2, d in zip(arr1, arr2, data):
...   dd[x1, x2].append(d)
... 
&gt;&gt;&gt; arr1unique = np.array([x[0] for x in dd.iterkeys()])
&gt;&gt;&gt; arr2unique = np.array([x[1] for x in dd.iterkeys()])
&gt;&gt;&gt; dataunique = np.array([np.mean(x) for x in dd.itervalues()])
&gt;&gt;&gt; print arr1unique
[ 1.4  7.   4.   9.   9.   3. ]
&gt;&gt;&gt; print arr2unique
[ 2.3  4.   2.3  5.   6.   5. ]
&gt;&gt;&gt; print dataunique
[ 5.4  8.7  5.7  6.1  4.6  7.1]
</snippet></ROW><ROW><id>10410510</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>10410573</id><snippet>rez = 1</snippet></ROW><ROW><id>10410573</id><snippet>rez</snippet></ROW><ROW><id>10410573</id><snippet>rez</snippet></ROW><ROW><id>10410573</id><snippet>rez</snippet></ROW><ROW><id>10410573</id><snippet>import Image

def find_centroid_faster(im, rez):
    width, height = im.size
    XX, YY, count = 0, 0, 0
    for x in xrange(0, width, rez):
        for y in xrange(0, height, rez):
            if im.getpixel((x, y)) == 255:
                XX += x
                YY += y
                count += 1
    return XX/count, YY/count
</snippet></ROW><ROW><id>10410573</id><snippet>im = Image.open('blob.png')
print find_centroid(im, 1)
print find_centroid(im, 20)
#output:
(432, 191)
(430, 190)
</snippet></ROW><ROW><id>10410573</id><snippet>timeit</snippet></ROW><ROW><id>10410573</id><snippet>O(n)</snippet></ROW><ROW><id>10410573</id><snippet>1.7s</snippet></ROW><ROW><id>10410573</id><snippet>0.005s</snippet></ROW><ROW><id>10410573</id><snippet>O(n)</snippet></ROW><ROW><id>10410573</id><snippet>O(n/(rez ** 2))</snippet></ROW><ROW><id>10410573</id><snippet>± rez / 2</snippet></ROW><ROW><id>10410573</id><snippet>sega_sai</snippet></ROW><ROW><id>10410573</id><snippet>numpy</snippet></ROW><ROW><id>10410573</id><snippet>def find_centroid_faster_numpy(im,rez):
        h, w = im.size
        arr = np.array(im)
        arr_rez = arr[::rez,::rez]
        ygrid, xgrid  = np.mgrid[0:w:rez, 0:h:rez]
        xcen, ycen = xgrid[arr_rez == 255].mean(), ygrid[arr_rez == 255].mean()
        return xcen, ycen
</snippet></ROW><ROW><id>10410573</id><snippet>timeit</snippet></ROW><ROW><id>10410573</id><snippet>rez</snippet></ROW><ROW><id>10411108</id><snippet>&gt;&gt;&gt; '{0:08b}'.format(6)
00000110
</snippet></ROW><ROW><id>10411108</id><snippet>{}</snippet></ROW><ROW><id>10411108</id><snippet>0</snippet></ROW><ROW><id>10411108</id><snippet>:</snippet></ROW><ROW><id>10411108</id><snippet>6</snippet></ROW><ROW><id>10411108</id><snippet>08</snippet></ROW><ROW><id>10411108</id><snippet>b</snippet></ROW><ROW><id>10411424</id><snippet>gridspec</snippet></ROW><ROW><id>10411424</id><snippet>figure</snippet></ROW><ROW><id>10411424</id><snippet>import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec

# generate some data
x = np.arange(0, 10, 0.2)
y = np.sin(x)

# plot it
fig = plt.figure(figsize=(8, 6)) 
gs = gridspec.GridSpec(1, 2, width_ratios=[3, 1]) 
ax0 = plt.subplot(gs[0])
ax0.plot(x, y)
ax1 = plt.subplot(gs[1])
ax1.plot(y, x)

plt.tight_layout()
plt.savefig('grid_figure.pdf')
</snippet></ROW><ROW><id>10411558</id><snippet>os.system</snippet></ROW><ROW><id>10412067</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>10412067</id><snippet>dict</snippet></ROW><ROW><id>10412067</id><snippet>is_ordered</snippet></ROW><ROW><id>10412419</id><snippet>read()</snippet></ROW><ROW><id>10412956</id><snippet>/MT</snippet></ROW><ROW><id>10413029</id><snippet>from gravatar.templatetags.gravatar import _get_gravatar_id, gravatar_for_email
</snippet></ROW><ROW><id>10413769</id><snippet>classinstancemethod</snippet></ROW><ROW><id>10413769</id><snippet>class classinstancemethod(object):
    """
    Acts like a class method when called from a class, like an
    instance method when called by an instance.  The method should
    take two arguments, 'self' and 'cls'; one of these will be None
    depending on how the method was called.
    """

    def __init__(self, func):
        self.func = func

    def __get__(self, obj, type=None):
        return _methodwrapper(self.func, obj=obj, type=type)


class _methodwrapper(object):

    def __init__(self, func, obj, type):
        self.func = func
        self.obj = obj
        self.type = type

    def __call__(self, *args, **kw):
        assert 'self' not in kw and 'cls' not in kw, (
            "You cannot use 'self' or 'cls' arguments to a "
            "classinstancemethod")
        return self.func(*((self.obj, self.type) + args), **kw)

    def __repr__(self):
        if self.obj is None:
            return ('&lt;bound class method %s.%s&gt;'
                    % (self.type.__name__, self.func.func_name))
        else:
            return ('&lt;bound method %s.%s of %r&gt;'
                    % (self.type.__name__, self.func.func_name, self.obj))
</snippet></ROW><ROW><id>10413821</id><snippet>sys.exit(app.exec_())
</snippet></ROW><ROW><id>10413821</id><snippet>subprocess</snippet></ROW><ROW><id>10413821</id><snippet># Some code here - including import subprocess
import os
def LaunchNotepad(self):
    self.DoSomething() #Or whatever you want to do before your program launches
    returncode = subprocess.call(['pythonw', 'notepad.py'],
                                 stdout=open(os.devnull, 'w'),
                                 stderr=open(os.devnull, 'w'))
    self.ShowMe() #Won't run until notepad finishes
    if not returncode:
        self.ShowError("Notepad exited abnormally!")
</snippet></ROW><ROW><id>10414049</id><snippet>&gt;&gt;&gt; x = [['a','a','a'],['b','b','b'],['c','c','c'],['d','d','d']]
&gt;&gt;&gt; map('_'.join, zip(*x))
['a_b_c_d', 'a_b_c_d', 'a_b_c_d']
</snippet></ROW><ROW><id>10414054</id><snippet>data = np.loadtxt('file.txt', [('x',float), ('y',float), ('value',float)])
</snippet></ROW><ROW><id>10414054</id><snippet>[(x0,y0,v00), (x0,y1,v01), .... , (x1,y0,v10),(x1,y1,v11), ... ,(xN,yM,vNM)]
</snippet></ROW><ROW><id>10414054</id><snippet>x = np.unique(data['x'])
y = np.unique(data['y'])
r = data['value'].reshape((x.size,y.size))
</snippet></ROW><ROW><id>10414054</id><snippet># indexing: list of x and y coordinates, and functions that map them to index
x  = np.unique(data['x']).tolist()
y  = np.unique(data['y']).tolist()
ix = np.vectorize(lambda i: x.index(i), otypes='i')
iy = np.vectorize(lambda j: y.index(j), otypes='i')

# create output array
r  = np.zeros((x.size,y.size), float)   # default value is 0
r[ix(data['x']), iy(data['y'])] = data['value']
</snippet></ROW><ROW><id>10414054</id><snippet>coordinate = min_coordinate + i*step
</snippet></ROW><ROW><id>10414054</id><snippet>x  = np.unique(data['x'])
y  = np.unique(data['y'])
ix = (data['x']-x.min())/(x[1]-x[0])
iy = (data['y']-y.min())/(y[1]-y[0])

# create output array
r  = np.ones((x.size,y.size), float)*np.nan   # default value is NaN
r[ix.astype(int), iy.astype(int)] = data['value']
</snippet></ROW><ROW><id>10414364</id><snippet>next</snippet></ROW><ROW><id>10414364</id><snippet>__next__</snippet></ROW><ROW><id>10414364</id><snippet>next</snippet></ROW><ROW><id>10414364</id><snippet>__next__</snippet></ROW><ROW><id>10414364</id><snippet>next</snippet></ROW><ROW><id>10414364</id><snippet>next</snippet></ROW><ROW><id>10414364</id><snippet>next</snippet></ROW><ROW><id>10414562</id><snippet>request.POST</snippet></ROW><ROW><id>10414562</id><snippet>request.POST</snippet></ROW><ROW><id>10414779</id><snippet>club</snippet></ROW><ROW><id>10414779</id><snippet>Club</snippet></ROW><ROW><id>10414779</id><snippet>Available.objects.filter(club__establishment="AV Club")
</snippet></ROW><ROW><id>10414966</id><snippet>import numpy as np
import math

a = np.array([2, 4, 6])
s = math.sqrt(a)
</snippet></ROW><ROW><id>10414966</id><snippet>TypeError: only length-1 arrays can be converted to Python scalars
</snippet></ROW><ROW><id>10414966</id><snippet>math.sqrt</snippet></ROW><ROW><id>10414966</id><snippet>for i in a:
    s = math.sqrt(i)
    print s
</snippet></ROW><ROW><id>10414966</id><snippet>1.41421356237
2.0
2.44948974278
</snippet></ROW><ROW><id>10414966</id><snippet>uv2sd</snippet></ROW><ROW><id>10414966</id><snippet>def uv2sd(u,v):
    s = []
    d = []
    for i in range(len(u)):
        angulo = math.atan2(u[i],v[i])
        if angulo &lt; 0:
            angulo = 360 + angulo
        d.append(angulo)
        s.append(math.sqrt((u[i]*u[i])+(v[i]*v[i])))     
    return s, d
</snippet></ROW><ROW><id>10415035</id><snippet>x</snippet></ROW><ROW><id>10415035</id><snippet>300000000</snippet></ROW><ROW><id>10415035</id><snippet>x</snippet></ROW><ROW><id>10415035</id><snippet>300000000.0</snippet></ROW><ROW><id>10415035</id><snippet>float</snippet></ROW><ROW><id>10415035</id><snippet>1.8e308</snippet></ROW><ROW><id>10415035</id><snippet>x</snippet></ROW><ROW><id>10415215</id><snippet>def worker(procnum, return_dict):
    '''worker function'''
    print str(procnum) + ' represent!'
    return_dict[procnum] = procnum


if __name__ == '__main__':
    manager = Manager()
    return_dict = manager.dict()
    jobs = []
    for i in range(5):
        p = multiprocessing.Process(target=worker, args=(i,return_dict))
        jobs.append(p)
        p.start()

    for proc in jobs:
        proc.join()
    print return_dict.values()
</snippet></ROW><ROW><id>10415805</id><snippet>shelve</snippet></ROW><ROW><id>10415805</id><snippet>&gt;&gt;&gt; import cPickle as pickle
&gt;&gt;&gt; pickle.dumps(19999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, pickle.HIGHEST_PROTOCOL)
'\x80\x02\x8a(\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7fT\x97\x05p\x0b\x18J#\x9aA\xa5.{8=O,f\xfa\x81|\xa1\xef\xaa\xfd\xa2e\x02.'
&gt;&gt;&gt; pickle.loads('\x80\x02\x8a(\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7fT\x97\x05p\x0b\x18J#\x9aA\xa5.{8=O,f\xfa\x81|\xa1\xef\xaa\xfd\xa2e\x02.')
19999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999L
</snippet></ROW><ROW><id>10416062</id><snippet>novaapiclient.NovaAPIClient</snippet></ROW><ROW><id>10416062</id><snippet>novaapiclient.NovaAPIClient</snippet></ROW><ROW><id>10416064</id><snippet>lst = "aaabaabacabaacaca"

def go(it):
    for x in it:
        if x == 'b':
            yield [x] + list(go(it))
        else:
            yield x
            if x == 'c':
                break 


print list(go(iter(lst)))
</snippet></ROW><ROW><id>10416380</id><snippet>self.Bind(wx.EVT_MENU, self.OnMenu, self.PopMenu)
</snippet></ROW><ROW><id>10416428</id><snippet>cvSmooth()</snippet></ROW><ROW><id>10416428</id><snippet>cvCanny()</snippet></ROW><ROW><id>10416428</id><snippet>cvHoughCircles()</snippet></ROW><ROW><id>10416428</id><snippet>IplImage* img = NULL;
if ((img = cvLoadImage(argv[1]))== 0)
{
    printf("cvLoadImage failed\n");
}

IplImage* gray = cvCreateImage(cvGetSize(img), IPL_DEPTH_8U, 1);
CvMemStorage* storage = cvCreateMemStorage(0);

cvCvtColor(img, gray, CV_BGR2GRAY);

// This is done so as to prevent a lot of false circles from being detected
cvSmooth(gray, gray, CV_GAUSSIAN, 7, 9);

IplImage* canny = cvCreateImage(cvGetSize(img),IPL_DEPTH_8U,1);
IplImage* rgbcanny = cvCreateImage(cvGetSize(img),IPL_DEPTH_8U,3);
cvCanny(gray, canny, 40, 240, 3);

CvSeq* circles = cvHoughCircles(gray, storage, CV_HOUGH_GRADIENT, 2, gray-&gt;height/8, 120, 10, 2, 25);
cvCvtColor(canny, rgbcanny, CV_GRAY2BGR);

for (size_t i = 0; i &lt; circles-&gt;total; i++)
{
     // round the floats to an int
     float* p = (float*)cvGetSeqElem(circles, i);
     cv::Point center(cvRound(p[0]), cvRound(p[1]));
     int radius = cvRound(p[2]);

     // draw the circle center
     cvCircle(rgbcanny, center, 3, CV_RGB(0,255,0), -1, 8, 0 );

     // draw the circle outline
     cvCircle(rgbcanny, center, radius+1, CV_RGB(0,0,255), 2, 8, 0 );

     printf("x: %d y: %d r: %d\n",center.x,center.y, radius);
}

cvNamedWindow("circles", 1);
cvShowImage("circles", rgbcanny);

cvSaveImage("out.png", rgbcanny);
cvWaitKey(0);
</snippet></ROW><ROW><id>10417468</id><snippet>&lt;s:Envelope&gt;</snippet></ROW><ROW><id>10417468</id><snippet>s:Envelope</snippet></ROW><ROW><id>10417468</id><snippet>a</snippet></ROW><ROW><id>10417468</id><snippet>{a}Envelope</snippet></ROW><ROW><id>10417468</id><snippet>a:</snippet></ROW><ROW><id>10417468</id><snippet>a:Element</snippet></ROW><ROW><id>10417468</id><snippet>{http://www.w3.org/2005/08/addressing}Element</snippet></ROW><ROW><id>10417468</id><snippet>s:Element</snippet></ROW><ROW><id>10417468</id><snippet>{a}Element</snippet></ROW><ROW><id>10417468</id><snippet>Envelope</snippet></ROW><ROW><id>10417468</id><snippet>import lxml.etree as etree
doc = etree.parse('mydocument.xml')
envelope = doc.xpath('//s:Envelope',
  namespaces={'s': 'a'})
</snippet></ROW><ROW><id>10417468</id><snippet>envelope = doc.xpath('//x:Envelope',
  namespaces={'x': 'a'})
</snippet></ROW><ROW><id>10417513</id><snippet>dbloader</snippet></ROW><ROW><id>10417513</id><snippet>Loader</snippet></ROW><ROW><id>10417513</id><snippet>loader</snippet></ROW><ROW><id>10417513</id><snippet>from dbloader import loader
l = loader.Loader()
</snippet></ROW><ROW><id>10417513</id><snippet>from dbloader.loader import Loader
l = Loader()
</snippet></ROW><ROW><id>10417513</id><snippet>Loader</snippet></ROW><ROW><id>10417513</id><snippet>dbloader.loader</snippet></ROW><ROW><id>10418091</id><snippet>OrderedDict(line.strip().split('\t') for line in open('Ethanol_rivacombined.txt'))
</snippet></ROW><ROW><id>10418091</id><snippet>from collections import OrderedDict

Et_OD = OrderedDict(line.strip().split('\t') for line in open('Ethanol_rivacombined.txt'))

with open("compare.txt","w+") as output_doc:
    for line in open('Sucrose_rivacombined.txt'):
        key,val = line.strip().split('\t')
        line_out = '\t'.join((key,val,Et_OD.pop(key,'ND')))
        output_doc.write(line_out+'\n')

    for key,val in Et_OD.items():
        line_out = '\t'.join((key,'ND',val))
        output_doc.write(line_out+'\n')
</snippet></ROW><ROW><id>10418379</id><snippet>(data == x).all(axis=-1)</snippet></ROW><ROW><id>10418510</id><snippet>timeit</snippet></ROW><ROW><id>10418510</id><snippet>python -m timeit "100*'string'"
1000000 loops, best of 3: 0.222 usec per loop

python -m timeit "''.join(['string' for _ in range(100)])"
100000 loops, best of 3: 6.9 usec per loop

python -m timeit "result = ''" "for i in range(100):" "  result = result + 'string'"
100000 loops, best of 3: 13.1 usec per loop
</snippet></ROW><ROW><id>10418510</id><snippet>str.join()</snippet></ROW><ROW><id>10418613</id><snippet>itertools.product()</snippet></ROW><ROW><id>10418613</id><snippet>for a, b in itertools.product(list1, list2):
  foo(a, b)
</snippet></ROW><ROW><id>10418613</id><snippet>for</snippet></ROW><ROW><id>10419285</id><snippet>color_list = [                                        
['black', 'maroon', 'maroon', 'maroon', 'maroon']  ,   
['purple', 'black', 'maroon', 'maroon', 'maroon']  ,   
['maroon', 'purple', 'maroon', 'teal', 'teal']     ,   
['maroon', 'maroon', 'purple', 'maroon', 'maroon'] ,   
['teal', 'olive', 'teal', 'maroon', 'maroon']         
]                                                     

from collections import Counter

cnt = [Counter(x) for x in color_list]

for x, y in [('black', 'maroon'), ('teal', 'olive')]:
    print x, y, sum(min(c[x], c[y]) for c in cnt)
</snippet></ROW><ROW><id>10419677</id><snippet>&gt;&gt;&gt; a = 6.48084E+11
&gt;&gt;&gt; a
648084000000.0
&gt;&gt;&gt; s = '{0:.0f}'.format(a)
&gt;&gt;&gt; s
'648084000000'
&gt;&gt;&gt; print s
648084000000
</snippet></ROW><ROW><id>10419678</id><snippet>tx_rx = {TX1: RX1, TX2: RX2}
for tx in tx_rx:
    if tx in a:
        send.ser(tx_rx[tx])
        read_buf()
</snippet></ROW><ROW><id>10419951</id><snippet>&gt;&gt;&gt; 1 == True
True
</snippet></ROW><ROW><id>10419951</id><snippet>1</snippet></ROW><ROW><id>10419951</id><snippet>True</snippet></ROW><ROW><id>10419951</id><snippet>&gt;&gt;&gt; st
{'a', True, 'Vanilla'}
&gt;&gt;&gt; 1 in st
True
</snippet></ROW><ROW><id>10419951</id><snippet>True</snippet></ROW><ROW><id>10419951</id><snippet>1</snippet></ROW><ROW><id>10419951</id><snippet>&gt;&gt;&gt; 5 + True
6
&gt;&gt;&gt; True * 2
2
&gt;&gt;&gt; 3. / (True + True)
1.5
</snippet></ROW><ROW><id>10419951</id><snippet>&gt;&gt;&gt; type(True)
&lt;class 'bool'&gt;
&gt;&gt;&gt; type(1)
&lt;class 'int'&gt;
</snippet></ROW><ROW><id>10419951</id><snippet>1 in st</snippet></ROW><ROW><id>10420169</id><snippet>import Tkinter as tk
root = tk.Tk()
count = 0
def add_line():
    global count
    count += 1
    tk.Label(text='Label %d' % count).pack()
tk.Button(root, text="Hello World", command=add_line).pack()
root.mainloop()
</snippet></ROW><ROW><id>10420333</id><snippet>from django.core import urlresolvers
from django.contrib.contenttypes.models import ContentType
from django.db import models

class MyModel(models.Model):

    def get_admin_url(self):
        content_type = ContentType.objects.get_for_model(self.__class__)
        return urlresolvers.reverse("admin:%s_%s_change" % (content_type.app_label, content_type.model), args=(self.id,))
</snippet></ROW><ROW><id>10420333</id><snippet>self</snippet></ROW><ROW><id>10420333</id><snippet>self.id</snippet></ROW><ROW><id>10420333</id><snippet>id</snippet></ROW><ROW><id>10420333</id><snippet>property</snippet></ROW><ROW><id>10420333</id><snippet>@property</snippet></ROW><ROW><id>10420363</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>10420363</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.check_call('python', 'my_script.py', 'arg1', 'foo=bar')
['myscript.py', 'arg1', 'foo=bar']
0
</snippet></ROW><ROW><id>10420363</id><snippet>subprocess.check_call(['my_script.bat', '"foo=bar"'])
</snippet></ROW><ROW><id>10420670</id><snippet>from itertools import groupby, count

numberlist = [1,2,3,4,5,8,9,10,11,200,201,202]

def as_range(g):
    l = list(g)
    return l[0], l[-1]

print [as_range(g) for _, g in groupby(numberlist, key=lambda n, c=count(): n-next(c))]
</snippet></ROW><ROW><id>10421013</id><snippet>ndim = [max(n,p) for n,p in [np.shape(X)] if min(n,p) == 1]
</snippet></ROW><ROW><id>10421013</id><snippet>1</snippet></ROW><ROW><id>10421013</id><snippet>min(*np.shape(x)) == 1
</snippet></ROW><ROW><id>10421254</id><snippet>with open("test.txt", "w") as f_out:
    f_out.write(your_string)
</snippet></ROW><ROW><id>10421254</id><snippet>with open</snippet></ROW><ROW><id>10421254</id><snippet>f_out.close()</snippet></ROW><ROW><id>10421342</id><snippet>print(tmp1)</snippet></ROW><ROW><id>10421342</id><snippet>print [44, 43, 42]...</snippet></ROW><ROW><id>10421342</id><snippet>[5, 4, 3]</snippet></ROW><ROW><id>10421342</id><snippet>tmp1 = arrays[:]</snippet></ROW><ROW><id>10421342</id><snippet>tmp1</snippet></ROW><ROW><id>10421342</id><snippet>tmp1</snippet></ROW><ROW><id>10421342</id><snippet>tmp1</snippet></ROW><ROW><id>10421342</id><snippet>getCardRank</snippet></ROW><ROW><id>10421342</id><snippet>self</snippet></ROW><ROW><id>10421342</id><snippet>self.foo = [array for array in arrays]</snippet></ROW><ROW><id>10421444</id><snippet>class DoIt(object):

    def __get__(self, instance, owner):
        def done():
            print "%s did it" % instance.name
        return done

class Doer(object):

    def __init__(self, name):
        self.name = name

    doSomething = DoIt()


doer = Doer("Bob")
doer.doSomething()
</snippet></ROW><ROW><id>10421444</id><snippet>__get__</snippet></ROW><ROW><id>10421444</id><snippet>__get__</snippet></ROW><ROW><id>10421444</id><snippet>__get__</snippet></ROW><ROW><id>10421474</id><snippet>such and such as of 29-5-11</snippet></ROW><ROW><id>10421474</id><snippet>(?&lt;!as of )</snippet></ROW><ROW><id>10421474</id><snippet>\d{1,2}</snippet></ROW><ROW><id>10421474</id><snippet>such and such as of !29-5-11</snippet></ROW><ROW><id>10421474</id><snippet>!</snippet></ROW><ROW><id>10421474</id><snippet>(?&lt;!as of )</snippet></ROW><ROW><id>10421474</id><snippet>such and such as of 2!9-5-11</snippet></ROW><ROW><id>10421474</id><snippet>(?&lt;!as of )</snippet></ROW><ROW><id>10421474</id><snippet>\d{1,2}</snippet></ROW><ROW><id>10421474</id><snippet>(?&lt;!as of)(?:^|\s+)(\d{1,2}-\d{1,2}-\d{2})
</snippet></ROW><ROW><id>10421474</id><snippet>such and such as of ! 29-5-11</snippet></ROW><ROW><id>10421474</id><snippet>+</snippet></ROW><ROW><id>10421474</id><snippet>*</snippet></ROW><ROW><id>10421474</id><snippet>(?:^|\s+)</snippet></ROW><ROW><id>10421474</id><snippet>(?:^|\s+)</snippet></ROW><ROW><id>10421474</id><snippet>as of</snippet></ROW><ROW><id>10421474</id><snippet>re.search(r'(?&lt;!as of)(?&lt;!\s)(?:^|\s+)(\d{1,2}-\d{1,2}-\d{2})','such and such as of  29-5-11').group(1)
</snippet></ROW><ROW><id>10421562</id><snippet>from collections import Counter

dict1 = {1:[ "red","blue","green"], 2: ["blue","blue","red"]}

weight = {1: 2, 2: 20}

score = 0

for k,v in dict1.iteritems():
    score += weight[k] * Counter(v)["red"] * Counter(v)["blue"]
</snippet></ROW><ROW><id>10421562</id><snippet>&gt;&gt;&gt; score
42
</snippet></ROW><ROW><id>10421562</id><snippet>score = sum(weight[k] * Counter(v)["red"] * Counter(v)["blue"] for k,v in dict1.iteritems())
</snippet></ROW><ROW><id>10421779</id><snippet>(r'^$', 'interviews.views.interviews')
</snippet></ROW><ROW><id>10421779</id><snippet>(r'^nomundo/', include('interviews.urls')),
</snippet></ROW><ROW><id>10422114</id><snippet># -*- coding: utf-8 -*-

from BeautifulSoup import BeautifulSoup


html = '''&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;Weibo Landscape: Historical Archive of 800 Verified Accounts&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
&lt;div&gt;&lt;br&gt;
related 1-th-weibo:&lt;br&gt;
mid:3365546399651413&lt;br&gt;
score:-5.76427445942 &lt;br&gt;
uid:1893278624 &lt;br&gt;
link:&lt;a href="http://weibo.com/1893278624/xrv9ZEuLX"  target="_blank"&gt;source&lt;/a&gt; &lt;br&gt;
time:Thu Oct 06 17:10:59 +0800 2011 &lt;br&gt;
content: Zuccotti Park。 &lt;br&gt;
&lt;br&gt;&lt;/div&gt;
&lt;div&gt;&lt;br&gt;
related 2-th-weibo:&lt;br&gt;
mid:3366839418074456&lt;br&gt;
score:-5.80535767804 &lt;br&gt;
uid:1813080181 &lt;br&gt;
link:&lt;a href="http://weibo.com/1813080181/xs2NvxSxa"  target="_blank"&gt;source&lt;/a&gt; &lt;br&gt;
time:Mon Oct 10 06:48:53 +0800 2011 &lt;br&gt;
content:rt the tweet &lt;br&gt;
rtMid:3366833975690765 &lt;br&gt;
rtUid:1893801487 &lt;br&gt;
rtContent:#ows#here is the content and the link http://t.cn/aFLBgr &lt;br&gt;
&lt;br&gt;&lt;/div&gt;

    &lt;/body&gt;
    &lt;/html&gt;'''

data = []
soup = BeautifulSoup(html)
divs = soup.findAll('div')
for div in divs:
    div_string = str(div)
    div_string = div_string.replace('&lt;br /&gt;', '')
    div_list = div_string.split('\n')
    div_list = div_list[1:-1]
    record = []
    for item in div_list:
        record.append( tuple(item.split(':', 1)) )
    data.append(record)

for record in data:
    for field in record:
        print field
    print '--------------'
</snippet></ROW><ROW><id>10422114</id><snippet>('related 1-th-weibo', '')
('mid', '3365546399651413')
('score', '-5.76427445942 ')
('uid', '1893278624 ')
('link', '&lt;a href="http://weibo.com/1893278624/xrv9ZEuLX" target="_blank"&gt;source&lt;/a&gt; ')
('time', 'Thu Oct 06 17:10:59 +0800 2011 ')
('content', ' Zuccotti Park\xe3\x80\x82 ')
--------------
('related 2-th-weibo', '')
('mid', '3366839418074456')
('score', '-5.80535767804 ')
('uid', '1813080181 ')
('link', '&lt;a href="http://weibo.com/1813080181/xs2NvxSxa" target="_blank"&gt;source&lt;/a&gt; ')
('time', 'Mon Oct 10 06:48:53 +0800 2011 ')
('content', 'rt the tweet ')
('rtMid', '3366833975690765 ')
('rtUid', '1893801487 ')
('rtContent', '#ows#here is the content and the link http://t.cn/aFLBgr ')
</snippet></ROW><ROW><id>10422128</id><snippet>/path/to/build.py -i</snippet></ROW><ROW><id>10422128</id><snippet>$WORKSPACE/build.py</snippet></ROW><ROW><id>10422297</id><snippet>&gt;&gt;&gt; mygen = slow_generator_of_giant_list()
&gt;&gt;&gt; try:
...     while True: stats = update(stats, mygen.next())
... except StopIteration:
...     print stats
...
</snippet></ROW><ROW><id>10422353</id><snippet>self.logilfe = file</snippet></ROW><ROW><id>10422353</id><snippet>self.logfile = file</snippet></ROW><ROW><id>10422353</id><snippet>None</snippet></ROW><ROW><id>10422387</id><snippet>table</snippet></ROW><ROW><id>10422387</id><snippet>td</snippet></ROW><ROW><id>10422387</id><snippet>//table[@class="123"]/descendant::td[@class="val"]
</snippet></ROW><ROW><id>10422387</id><snippet>tbody</snippet></ROW><ROW><id>10422444</id><snippet>import sqlite3
import os

dir_path = os.path.dirname(os.path.abspath(__file__))

db = sqlite3.connect(os.path.join(dir_path, 'my_db.db'))
cur = db.cursor()
...
</snippet></ROW><ROW><id>10422547</id><snippet>&gt;&gt;&gt; tuple([1])
(1,)
</snippet></ROW><ROW><id>10422547</id><snippet>plot</snippet></ROW><ROW><id>10422547</id><snippet>line</snippet></ROW><ROW><id>10422547</id><snippet>&gt;&gt;&gt; x, y = [1, 2]
&gt;&gt;&gt; x
1
&gt;&gt;&gt; y
2
&gt;&gt;&gt; z, = [3]
&gt;&gt;&gt; z
3
</snippet></ROW><ROW><id>10422547</id><snippet>&gt;&gt;&gt; [z] = [4]
&gt;&gt;&gt; z
4
</snippet></ROW><ROW><id>10422547</id><snippet>z, =</snippet></ROW><ROW><id>10422585</id><snippet>root.createcommand('::tk::mac::ShowPreferences', config_dialog)
</snippet></ROW><ROW><id>10422585</id><snippet>createcommand</snippet></ROW><ROW><id>10422745</id><snippet>self.data_file[0:78]</snippet></ROW><ROW><id>10422745</id><snippet>0x3C</snippet></ROW><ROW><id>10422745</id><snippet>self.header[60:60+8]</snippet></ROW><ROW><id>10422866</id><snippet>include</snippet></ROW><ROW><id>10422866</id><snippet>apples = [ 'Granny Smith', 'Russet' ]
red_apple = apples[1]    # &lt;-- Subscripting a list
</snippet></ROW><ROW><id>10422866</id><snippet>()</snippet></ROW><ROW><id>10422866</id><snippet>(r'^', include('FirstBlog.apps.homepage.urls'))
#             ^                              ^
</snippet></ROW><ROW><id>10422888</id><snippet>with open(filename) as f:
    for line in f:
        for c in line:
            pass
</snippet></ROW><ROW><id>10422888</id><snippet>with open(filename) as f:
    for c in f.read():
        pass
</snippet></ROW><ROW><id>10423001</id><snippet>def on_key_down(self, e):
    if e.GetKeyCode() == wx.WXK_TAB:
        tab = ' ' * 4
        self.editor.WriteText(tab)
    else:
        e.Skip()
</snippet></ROW><ROW><id>10423195</id><snippet>insert</snippet></ROW><ROW><id>10423195</id><snippet>B</snippet></ROW><ROW><id>10423195</id><snippet>import itertools

def make_sequences(num_a, num_b):
    b_locations = range(num_a+1)
    for b_comb in itertools.combinations_with_replacement(b_locations, num_b):
        result = []
        result_a = 0
        for b_position in b_comb:
            while b_position &gt; result_a:
                result.append('A')
                result_a += 1
            result.append('B')
        while result_a &lt; num_a:
            result.append('A')
            result_a += 1
        yield ''.join(result)
</snippet></ROW><ROW><id>10423195</id><snippet>make_sequences2</snippet></ROW><ROW><id>10423195</id><snippet>In : %timeit list(make_sequences(4,4))
10000 loops, best of 3: 145 us per loop

In : %timeit make_sequences2(4,4)
100 loops, best of 3: 6.08 ms per loop
</snippet></ROW><ROW><id>10423195</id><snippet>import itertools

def insert_letters(sequence, rest):
    if not rest:
        yield sequence
    else:
        letter, number = rest[0]
        rest = rest[1:]
        possible_locations = range(len(sequence)+1)
        for locations in itertools.combinations_with_replacement(possible_locations, number):
            result = []
            count = 0
            temp_sequence = sequence
            for location in locations:
                while location &gt; count:
                    result.append(temp_sequence[0])
                    temp_sequence = temp_sequence[1:]
                    count += 1
                result.append(letter)
            if temp_sequence:
                result.append(temp_sequence)
            for item in insert_letters(''.join(result), rest):
                yield item

def generate_sequences(*args):
    '''
    arguments : squence of (letter, number) tuples
    '''
    (letter, number), rest = args[0], args[1:]
    for sequence in insert_letters(letter*number, rest):
        yield sequence
</snippet></ROW><ROW><id>10423195</id><snippet>for seq in generate_sequences(('A', 2), ('B', 1), ('C', 1)):
    print seq

# Outputs
# 
# CBAA
# BCAA
# BACA
# BAAC
# CABA
# ACBA
# ABCA
# ABAC
# CAAB
# ACAB
# AACB
# AABC
</snippet></ROW><ROW><id>10423362</id><snippet>for x in f.readline():</snippet></ROW><ROW><id>10423362</id><snippet>string</snippet></ROW><ROW><id>10423362</id><snippet>a = f.readline()</snippet></ROW><ROW><id>10423362</id><snippet>file</snippet></ROW><ROW><id>10423362</id><snippet>f</snippet></ROW><ROW><id>10423362</id><snippet>for line in f:
    value = line.rstrip('\n')
    url = "http://www.link.com/whatever/%s" % value
    print url
    urllib.urlretrieve(url, value)  # Not sure why you want to send value (your a) here
</snippet></ROW><ROW><id>10423402</id><snippet>.group</snippet></ROW><ROW><id>10423402</id><snippet>r = re.compile("[A-Z]{3}([a-z])[A-Z]{3}")
print r.match(gibberish).group(1)
</snippet></ROW><ROW><id>10423402</id><snippet>r = re.compile(r'([A-Z])\1{2}(?P&lt;middle&gt;[a-z])\1{3}')
m = r.match(gibberish)
if m is not None:
    print m.group('middle')
</snippet></ROW><ROW><id>10423402</id><snippet>middle</snippet></ROW><ROW><id>10423402</id><snippet>middle</snippet></ROW><ROW><id>10423664</id><snippet>get_application_id</snippet></ROW><ROW><id>10423664</id><snippet>oldappid.appspot.com</snippet></ROW><ROW><id>10423793</id><snippet>from Tkinter import *
root = Tk()
label = Label(root)
label.pack()
img = PhotoImage(width=300,height=300)
data = ("{red red red red blue blue blue blue}")
img.put(data, to=(20,20,280,280))
label.config(image=img)
root.mainloop()
</snippet></ROW><ROW><id>10423918</id><snippet>value.rstrip('\r\n')</snippet></ROW><ROW><id>10423918</id><snippet>\r</snippet></ROW><ROW><id>10423918</id><snippet>\n</snippet></ROW><ROW><id>10423918</id><snippet>value</snippet></ROW><ROW><id>10424033</id><snippet>def blog_filter(blogs, file_name_filter, category_filter):
    if file_name_filter:
        blogs = (d for d in blogs if d['filename'] == file_name_filter)
    if category_filter:
        blogs = (d for d in blogs if d['category'] == category_filter)
    return blogs
</snippet></ROW><ROW><id>10424033</id><snippet>myconfig = {}
myconfig['webapp2_extras.jinja2'] =  {'template_path': ['templates','blog_posts'],
                                      'filters': {'blog_filter': blog_filter}}

app = webapp2.WSGIApplication(_routes,
    debug=True,
    config = myconfig)
</snippet></ROW><ROW><id>10424033</id><snippet>{% for blog_dict in blogs|blog_filter(file_name_filter,category_filter)|sort(reverse=True,attribute='date') %}
</snippet></ROW><ROW><id>10424033</id><snippet>{% for month, blog_dicts in blogs|blog_filter(False, category_filter)|groupby('date.month')|sort(reverse=True,attribute='grouper') %}
</snippet></ROW><ROW><id>10424033</id><snippet>class BaseHandler(webapp2.RequestHandler):
    @webapp2.cached_property
    def jinja2(self):
        return jinja2.get_jinja2(app=self.app)

    def render_template(self, filename, **kwargs):
        #call self.response.write(self.jinja2.render_template(..)
</snippet></ROW><ROW><id>10424116</id><snippet>list</snippet></ROW><ROW><id>10424116</id><snippet>tuple</snippet></ROW><ROW><id>10424116</id><snippet>&gt;&gt;&gt; class A(tuple):
...     def speak(self):
...         print "Bark!"
... 
&gt;&gt;&gt; a = A((1,2,3)) # extra parens needed to distinguish single tuple arg from 3 scalar args
&gt;&gt;&gt; a * 3
(1, 2, 3, 1, 2, 3, 1, 2, 3)
&gt;&gt;&gt; a.speak()
Bark!
</snippet></ROW><ROW><id>10424116</id><snippet>import math

class Vector(tuple):
    def magnitude(self):
        return math.sqrt( self[0]*self[0]+self[1]*self[1]+self[2]*self[2] )
</snippet></ROW><ROW><id>10424151</id><snippet>col = pymongo.Connection().db.collection
cur = col.find({})

obj = next(cur, None)
if obj:
    age = obj['age']
    gender = obj['gender']
</snippet></ROW><ROW><id>10424228</id><snippet>kana = a + k + g + s + z + t + d + n + h + b + p + m + y + n
</snippet></ROW><ROW><id>10424255</id><snippet>while</snippet></ROW><ROW><id>10424255</id><snippet> while(query.next()){
     // do whatever you need with query.value()
 }
</snippet></ROW><ROW><id>10424255</id><snippet>first()</snippet></ROW><ROW><id>10424255</id><snippet>while</snippet></ROW><ROW><id>10424255</id><snippet> while(query.first()){
     // do whatever you need with query.value()
 }
</snippet></ROW><ROW><id>10424255</id><snippet> "from measurements"
</snippet></ROW><ROW><id>10424255</id><snippet> " from measurements "
 #^ Here   and here ^^
</snippet></ROW><ROW><id>10424255</id><snippet>  "...d = 3, 1, 0))) AS `Average SA`from measurementsWHERE image_id = ..."
</snippet></ROW><ROW><id>10424371</id><snippet>small_list_set = set(small_list)
for line in big_list:
    for item in line:
        if item in small_list_set:
            bucket.append(line)
</snippet></ROW><ROW><id>10424749</id><snippet>&gt;&gt;&gt; 'words!?.,;:'.rstrip('?:!.,;')
'words'
</snippet></ROW><ROW><id>10424922</id><snippet>setattr()</snippet></ROW><ROW><id>10424922</id><snippet>vars()</snippet></ROW><ROW><id>10424922</id><snippet>myObjs = ['myObject1','myObject2','myObject3']

for obj in myObjs:
    setattr(className, obj, mayaClass.create(vars()[objs]))
    func1()
    func2()
</snippet></ROW><ROW><id>10424922</id><snippet>exec</snippet></ROW><ROW><id>10424990</id><snippet>import cProfile

def print_multiples0(n, high):         #This is the e-book version
    for i in range(1, high+1):
        print(n * i, end='   ')
    print()

def print_mult_table0(high):
    for i in range(1, high+1):
        print_multiples0(i, i+1)       #They changed high+1 to i+1 to halve output

def print_multiples1(n):        #n is the number of columns that will be made
    '''Prints a line of multiples of factor 'n'.'''
    for x in range(1, n+1):     #prints n  2n  3n ... until x = n+1
        print(n * x, end='\t')  #(since x starts counting at 0,
    print()                     #n*n will be the final entry)

def print_mult_table1(n):            #n is the final factor
    '''Makes a table from a factor 'n' via print_multiples().
    '''
    for i in range(1, n+1):          #call function to print rows with i
        print_multiples1(i)          #as the multiplier.

def test( ) :
     print_mult_table0( 10)
     print_mult_table1( 10)

cProfile.run( 'test()')
</snippet></ROW><ROW><id>10425003</id><snippet>==</snippet></ROW><ROW><id>10425003</id><snippet>__eq__()</snippet></ROW><ROW><id>10425003</id><snippet>!=</snippet></ROW><ROW><id>10425003</id><snippet>__ne__()</snippet></ROW><ROW><id>10425003</id><snippet>not ==</snippet></ROW><ROW><id>10425054</id><snippet>def test_always_bigger(self):
    for cycle in xrange(1000):
        curr = next(self.gen)
        try:
            self.assertGreater(curr, self.prev)
        except AssertionError: # raised by TestCase.fail, called by all asserts
            log.debug('...')
            raise
        self.prev = curr
</snippet></ROW><ROW><id>10425054</id><snippet>def test_always_bigger(self):
    ex = None
    for cycle in xrange(1000):
        curr = next(self.gen)
        try:
            self.assertGreater(curr, self.prev)
        except AssertionError, ae:
            ex = ae # just remember it
            log.debug('...')
        self.prev = curr
    if ex:
        raise ex
</snippet></ROW><ROW><id>10425054</id><snippet>AssertionError</snippet></ROW><ROW><id>10425054</id><snippet>unittest</snippet></ROW><ROW><id>10425054</id><snippet>def test_always_bigger(self):
    exes = []
    for cycle in xrange(1000):
        curr = next(self.gen)
        try:
            self.assertGreater(curr, self.prev)
        except AssertionError, ae:
            exes.append(ae)
            log.debug('...')
        self.prev = curr
    if exes:
        self.fail(exes)
        # if that doesn't work, try: raise AssertionError(exes)
</snippet></ROW><ROW><id>10425094</id><snippet>headers</snippet></ROW><ROW><id>10425094</id><snippet>Object</snippet></ROW><ROW><id>10425094</id><snippet>obj.headers['Access-Control-Allow-Origin'] = '*'                                               
obj.sync_metadata()                  
</snippet></ROW><ROW><id>10425458</id><snippet>iter</snippet></ROW><ROW><id>10425458</id><snippet>PyObject* iter = PyObject_GetIter(r);

item = PyIter_Next(iter);
int i = 0;
PyObject* iter2 = PyObject_GetIter(item);
PyObject* item2;
while (item2 = PyIter_Next(iter2))
{
    s[i] = PyFloat_AsDouble(item2);
    Py_XDECREF(item2);
    i++;
}
Py_XDECREF(item);

// ! Here you probably intended another call to PyObject_GetIter
item = PyIter_Next(iter);
i = 0;
iter2 = PyObject_GetIter(item);
while (item2 = PyIter_Next(iter2))
{
    b[i] = PyFloat_AsDouble(item2);
    Py_XDECREF(item2);
    i++;
}
Py_XDECREF(item);
</snippet></ROW><ROW><id>10425464</id><snippet>import os, os.path

dupnames={}
for root, dirs, files in os.walk('myfolder'):
    for file in files:
        fulpath=os.path.join(root,file)
        if file in dupnames:
            dupnames[file].append(fulpath)
        else:
            dupnames[file]=[fulpath]

for name in sorted(dupnames):
    print name, len(dupnames[name])
</snippet></ROW><ROW><id>10425464</id><snippet>base name: [path to file]</snippet></ROW><ROW><id>10425464</id><snippet>os.walk</snippet></ROW><ROW><id>10425464</id><snippet>{0023.txt: ['d:\myfolder\abc', 'd:\myfolder\kjes'], 0025.txt: ['d:\myfolder\abc']}
</snippet></ROW><ROW><id>10425464</id><snippet>0023</snippet></ROW><ROW><id>10425464</id><snippet>0023.txt</snippet></ROW><ROW><id>10425464</id><snippet>0023.txt</snippet></ROW><ROW><id>10425464</id><snippet>0023.py</snippet></ROW><ROW><id>10425504</id><snippet>cv</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>cv</snippet></ROW><ROW><id>10425504</id><snippet>cvMat</snippet></ROW><ROW><id>10425504</id><snippet>cvSet2D</snippet></ROW><ROW><id>10425504</id><snippet>cvGet2D</snippet></ROW><ROW><id>10425504</id><snippet>cvSetImageROI</snippet></ROW><ROW><id>10425504</id><snippet>cvSeq</snippet></ROW><ROW><id>10425504</id><snippet>cv</snippet></ROW><ROW><id>10425504</id><snippet>cv</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>cv</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>import cv2.cv as cv</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>NumPy</snippet></ROW><ROW><id>10425504</id><snippet>ndarray</snippet></ROW><ROW><id>10425504</id><snippet>native Python</snippet></ROW><ROW><id>10425504</id><snippet>lists</snippet></ROW><ROW><id>10425504</id><snippet>tuples</snippet></ROW><ROW><id>10425504</id><snippet>dictionary</snippet></ROW><ROW><id>10425504</id><snippet>NumPy</snippet></ROW><ROW><id>10425504</id><snippet>ndarray</snippet></ROW><ROW><id>10425504</id><snippet>array[i,j]</snippet></ROW><ROW><id>10425504</id><snippet>ROI=array[c1:c2,r1:r2]</snippet></ROW><ROW><id>10425504</id><snippet>res = img1+img2</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425504</id><snippet>cv2</snippet></ROW><ROW><id>10425954</id><snippet>re.split()</snippet></ROW><ROW><id>10425954</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; mystring = "Field 1: Data 1 Field 2: Data 2 Field 3: Data 3"
&gt;&gt;&gt; a = re.split(r"(Field 1:|Field 2:|Field 3:)",mystring)
['', 'Field 1:', ' Data 1 ', 'Field 2:', ' Data 2 ', 'Field 3:', ' Data 3']
</snippet></ROW><ROW><id>10425954</id><snippet>csv</snippet></ROW><ROW><id>10425954</id><snippet>&gt;&gt;&gt; a_non_empty = [s for s in a if s]
&gt;&gt;&gt; a_non_empty
['Field 1:', ' Data 1 ', 'Field 2:', ' Data 2 ', 'Field 3:', ' Data 3']
</snippet></ROW><ROW><id>10426412</id><snippet>import</snippet></ROW><ROW><id>10426412</id><snippet>print</snippet></ROW><ROW><id>10426412</id><snippet>lumos</snippet></ROW><ROW><id>10426412</id><snippet>wingardium leviosa</snippet></ROW><ROW><id>10426478</id><snippet>L</snippet></ROW><ROW><id>10426478</id><snippet>long</snippet></ROW><ROW><id>10426478</id><snippet>long</snippet></ROW><ROW><id>10426478</id><snippet>DWORD</snippet></ROW><ROW><id>10426478</id><snippet>int</snippet></ROW><ROW><id>10426478</id><snippet>_winreg.SetValueEx(aKey,"dword_test_2",0, _winreg.REG_DWORD, 0xFFFFFFFF )
</snippet></ROW><ROW><id>10426478</id><snippet>_winreg.SetValueEx(aKey,"dword_test_2",0, _winreg.REG_DWORD, -1 )
</snippet></ROW><ROW><id>10426549</id><snippet>list</snippet></ROW><ROW><id>10426549</id><snippet>collections.deque</snippet></ROW><ROW><id>10426921</id><snippet>import datetime
def pprint(val):
   if val == 1:
      return '1 minute'
   x = str(datetime.timedelta(minutes=val))[:-3].split(':')
   r = ''
   if int(x[0]):
       r += x[0]+' hours' if int(x[0]) &gt; 1 else x[0]+' hour'
   if int(x[1]):
       r += ' %s minutes' % int(x[1]) if int(x[1]) &gt; 1 else ' %s minute' % int(x[0])
   return r.strip()
</snippet></ROW><ROW><id>10426921</id><snippet>&gt;&gt;&gt; pprint(65)
'1 hour 5 minutes'
&gt;&gt;&gt; pprint(1)
'1 minute'
&gt;&gt;&gt; pprint(60)
'1 hour'
&gt;&gt;&gt; pprint(61)
'1 hour 1 minute'
</snippet></ROW><ROW><id>10426921</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>10426989</id><snippet>In [7]: s = 'a_1_2+c_2_4 + 5'

In [8]: re.sub(r'(\w+_\d+_\d+)', r'p.get("\1", 0)', s)
Out[8]: 'p.get("a_1_2", 0)+p.get("c_2_4", 0) + 5'
</snippet></ROW><ROW><id>10426989</id><snippet>p.get()</snippet></ROW><ROW><id>10427081</id><snippet>a[s1,s2, ... , sn]</snippet></ROW><ROW><id>10427081</id><snippet>si</snippet></ROW><ROW><id>10427081</id><snippet>a[5,2:3,1::2]</snippet></ROW><ROW><id>10427081</id><snippet>...</snippet></ROW><ROW><id>10427081</id><snippet>a[...,3]</snippet></ROW><ROW><id>10427081</id><snippet>a[:,:,3]</snippet></ROW><ROW><id>10427081</id><snippet>a</snippet></ROW><ROW><id>10427468</id><snippet>measurements</snippet></ROW><ROW><id>10427468</id><snippet>len(measurements)</snippet></ROW><ROW><id>10427468</id><snippet>1</snippet></ROW><ROW><id>10427468</id><snippet>print &gt;&gt;fmeasur, measurements[i]</snippet></ROW><ROW><id>10427468</id><snippet>fmeasur.write(...)</snippet></ROW><ROW><id>10427792</id><snippet>from pylab import *

L1 = ['London', 'Paris', 'Tokio', 'Berlin', 'Barcelona', 'Reykjavik']
pos = arange(len(L1))
yticks(pos, L1)

I1 = [['London',0],['Paris',10],['Barcelona',23]]
I2 = [['Paris',10],['Tokio',19],['Berlin',21],['Reykjavik',23]]

I1_y = [L1.index(el[0]) for el in I1]
I1_x = [el[1] for el in I1]

I2_y = [L1.index(el[0]) for el in I2]
I2_x = [el[1] for el in I2]

plot(I1_x, I1_y, 'o-')
plot(I2_x, I2_y, 'x-')
grid(True)
savefig('countries.png')
show()
</snippet></ROW><ROW><id>10427988</id><snippet>class Category(models.Model):
    ...

    @property
    def image(self):
        return self.photo or u'DEFAULT_PIC'

# usage
category.image
</snippet></ROW><ROW><id>10428151</id><snippet>print(" ".join("%0.2X" % s for s in x[:10]))
</snippet></ROW><ROW><id>10428151</id><snippet>print(" ".join("%0.2X" % s for s in x))
</snippet></ROW><ROW><id>10428151</id><snippet>from itertools import zip_longest

def grouper(n, iterable):
    args = [iter(iterable)] * n
    return zip_longest(fillvalue=None, *args)

width=10
x = range(1,99)
for group in grouper(width, x):
    print((" ".join("%0.2X" % s for s in group if s)))
</snippet></ROW><ROW><id>10428151</id><snippet>01 02 03 04 05 06 07 08 09 0A
0B 0C 0D 0E 0F 10 11 12 13 14
15 16 17 18 19 1A 1B 1C 1D 1E
1F 20 21 22 23 24 25 26 27 28
29 2A 2B 2C 2D 2E 2F 30 31 32
33 34 35 36 37 38 39 3A 3B 3C
3D 3E 3F 40 41 42 43 44 45 46
47 48 49 4A 4B 4C 4D 4E 4F 50
51 52 53 54 55 56 57 58 59 5A
5B 5C 5D 5E 5F 60 61 62
</snippet></ROW><ROW><id>10428151</id><snippet>def bytes_from_file(name):
    with open(name, 'rb') as fp:
        def read1(): return fp.read(1)
        for bytes in iter(read1, b""):
            for byte in bytes:
                yield byte

x = bytes_from_file('out.fmt') #replaces x = range(1,99)
</snippet></ROW><ROW><id>10428179</id><snippet>aDict</snippet></ROW><ROW><id>10428179</id><snippet>"fun"</snippet></ROW><ROW><id>10428179</id><snippet>aDict.pop("fun")(**aDict)</snippet></ROW><ROW><id>10428199</id><snippet>#!/usr/bin/python
import re

def replacement(match):
    return "*" * len(match.group(0))

def censored_string(dirty):
    clean = str(dirty)
    wordList = ["fuck", "shit", "damn"]

    for swear_word in wordList:
        target_word = swear_word.strip()
        result = re.sub("(?i)\\b(("+target_word+"){1,})(s{0,1})\\b",replacement, clean)
        clean = result
    return clean

print censored_string("god damn i love bananas and fucking fuckfuck shits")
# god **** i love bananas and fucking ******** *****
</snippet></ROW><ROW><id>10428485</id><snippet>dirs</snippet></ROW><ROW><id>10428485</id><snippet>files</snippet></ROW><ROW><id>10428485</id><snippet>for root, dirs, files in os.walk(args):
    with file('{}/test.file'.format(root)) as f:
        f.write('test')

    files.append('test')
</snippet></ROW><ROW><id>10428556</id><snippet>chk_used</snippet></ROW><ROW><id>10428556</id><snippet>used_kana = used_kana.append(kana)
</snippet></ROW><ROW><id>10428556</id><snippet>list.append()</snippet></ROW><ROW><id>10428556</id><snippet>kana</snippet></ROW><ROW><id>10428556</id><snippet>used_kana</snippet></ROW><ROW><id>10428556</id><snippet>used_kana</snippet></ROW><ROW><id>10428556</id><snippet>used_kana.append(kana)
</snippet></ROW><ROW><id>10428556</id><snippet>used_kana</snippet></ROW><ROW><id>10428556</id><snippet>def main():
    used_kana = []
</snippet></ROW><ROW><id>10428556</id><snippet>def chk_used():
    global used_kana
</snippet></ROW><ROW><id>10428556</id><snippet>chk_used()</snippet></ROW><ROW><id>10428556</id><snippet>def chk_used(usedCharacters):
    ...

def main():
    used_kana = []
        ...
        print "    " + chk_used(used_kana)
</snippet></ROW><ROW><id>10428556</id><snippet>    if kana not in used_kana:
        used_kana.append(kana)
        return kana
        break #there's no reason for this break. the return on the line before exits the function, your code will never ever execute this line.
</snippet></ROW><ROW><id>10428564</id><snippet>text=open(original_file).read()
text=re.sub('FY91/92','',text) 
f = open(original_file, 'w')
f.write(text)
f.close()
</snippet></ROW><ROW><id>10429109</id><snippet>chr()</snippet></ROW><ROW><id>10429109</id><snippet>reduce()</snippet></ROW><ROW><id>10429109</id><snippet>return "" + chr(list[0]) + chr(list[1]) + ... + chr(list[list.length - 1])
</snippet></ROW><ROW><id>10429109</id><snippet>""</snippet></ROW><ROW><id>10429109</id><snippet>reduce()</snippet></ROW><ROW><id>10429109</id><snippet>return reduce(lambda string, item: string + chr(item), list, "")
</snippet></ROW><ROW><id>10429109</id><snippet>chr(item)</snippet></ROW><ROW><id>10429109</id><snippet>reduce()</snippet></ROW><ROW><id>10429427</id><snippet>ztaskd</snippet></ROW><ROW><id>10429427</id><snippet>ztaskd</snippet></ROW><ROW><id>10429427</id><snippet>python manage.py ztaskd --settings=clients.site_settings &amp;
</snippet></ROW><ROW><id>10429427</id><snippet>ZTASKD_URL</snippet></ROW><ROW><id>10429427</id><snippet>ztaskd</snippet></ROW><ROW><id>10429427</id><snippet>ZTASKD_URL = 'ipc:///tmp/%s_ztask.sock' % SITE_NAME
</snippet></ROW><ROW><id>10429484</id><snippet>class Parser(object):
    def set_document(self, doc):
        doc.set_parser(self)
        # whatever
</snippet></ROW><ROW><id>10429634</id><snippet>import existingmodule

existingmodule.foo = lambda *args, **kwargs: "You fail it"
</snippet></ROW><ROW><id>10429674</id><snippet>store.keys()
</snippet></ROW><ROW><id>10430260</id><snippet>from collections import defaultdict
res = defaultdict(dict)
for (a,b),c in D.items():
    res[a][b] = c
</snippet></ROW><ROW><id>10430277</id><snippet>from project_name.app_name.models import MyModel</snippet></ROW><ROW><id>10430277</id><snippet>views.py</snippet></ROW><ROW><id>10430686</id><snippet>easy_install</snippet></ROW><ROW><id>10430686</id><snippet>setuptools</snippet></ROW><ROW><id>10430686</id><snippet>setuptools-0.6c11.win32-py2.7.exe</snippet></ROW><ROW><id>10430686</id><snippet>setuptools</snippet></ROW><ROW><id>10430686</id><snippet>easy_install.exe</snippet></ROW><ROW><id>10430686</id><snippet>C:\Python27\Scripts</snippet></ROW><ROW><id>10430686</id><snippet>C:\Python27\Scripts\easy_install pip</snippet></ROW><ROW><id>10431216</id><snippet>animation.FuncAnimation</snippet></ROW><ROW><id>10431216</id><snippet>import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.animation as animation

def generate_data():
    a = np.arange(25).reshape(5, 5)
    b = 10 * np.random.rand(5, 5)
    return a - b 

def update(data):
    mat.set_data(data)
    return mat 

def data_gen():
    while True:
        yield generate_data()

fig, ax = plt.subplots()
mat = ax.matshow(generate_data())
plt.colorbar(mat)
ani = animation.FuncAnimation(fig, update, data_gen, interval=500,
                              save_count=50)
plt.show()
</snippet></ROW><ROW><id>10431216</id><snippet>ani.save('animation.mp4')
</snippet></ROW><ROW><id>10431216</id><snippet>ani.save('animation.mp4', clear_temp=False)
</snippet></ROW><ROW><id>10431216</id><snippet>convert *.png animation.gif
</snippet></ROW><ROW><id>10431269</id><snippet>from numpy import genfromtxt
from StringIO import StringIO

def read_by_block(filename):
    blocks = []
    data = open(filename).read()
    for blk in data.split('\n\n'): # we assume that blocks are separated by two newlines
        blocks.append(genfromtxt(StringIO(blk), delimiter=';', names=True))
    return blocks

data = read_by_block('data.txt')

print data[0].dtype.names # print fields for first block
print data[0]['StdPhi'] # print column 'Std(Phi)' in 1st block
</snippet></ROW><ROW><id>10431853</id><snippet>QCalendarWidget</snippet></ROW><ROW><id>10431853</id><snippet>QCalendarWidget</snippet></ROW><ROW><id>10431853</id><snippet>paintCell()</snippet></ROW><ROW><id>10432112</id><snippet>from collections import deque

def item_with_context(predicate, seq, before=0, after=0):
    q = deque(maxlen=before)
    it = iter(seq)

    for s in it:
        if predicate(s):
            return list(q) + [s] + [x for _,x in zip(range(after), it)]
        q.append(s)
</snippet></ROW><ROW><id>10432420</id><snippet>Assembly.LoadFrom(fileName)</snippet></ROW><ROW><id>10432420</id><snippet>Activator.CreateInstance()</snippet></ROW><ROW><id>10432609</id><snippet>from collections import namedtuple, Counter
# You can probably think of a better name than this
datum = namedtuple('datum', 'Posit R B G')
Counter(tuple(datum(**d) for d in a) for a in data).most_common()
# You might actually want to make the conversion permanent;
# the data is possibly easier to work with that way given the
# fixed key structure, and it should save memory too
</snippet></ROW><ROW><id>10432828</id><snippet>__hash__</snippet></ROW><ROW><id>10432828</id><snippet>__hash__</snippet></ROW><ROW><id>10432869</id><snippet>get_value_as_int()</snippet></ROW><ROW><id>10432869</id><snippet>get_value_as_int()</snippet></ROW><ROW><id>10432869</id><snippet>gtk.Builder</snippet></ROW><ROW><id>10432869</id><snippet>Handler</snippet></ROW><ROW><id>10432869</id><snippet>    handler = Handler()
    builder = Gtk.Builder()
    ...
    # Store references to widgets in `handler`
    for widget_name in ('sbtn_days', 'sbtn_hours', 'sbtn_minutes'):
        setattr(handler, widget_name, builder.get_object(widget_name))
    # The above is equivalent to the following:
    handler.sbtn_days = builder.get_object('sbtn_days')
    ...

    # In signal handling code:
    days = self.sbtn_days.get_value_as_int()
</snippet></ROW><ROW><id>10432869</id><snippet>builder</snippet></ROW><ROW><id>10432869</id><snippet>Handler</snippet></ROW><ROW><id>10432869</id><snippet>    builder = Gtk.Builder()
    handler = Handler()
    handler.builder = builder
    ...

    # In signal handler code:
    sbtn_days = self.builder.get_object('sbtn_days')
    days = sbtn_days.get_value_as_int()
</snippet></ROW><ROW><id>10432869</id><snippet>sbtn_days</snippet></ROW><ROW><id>10432869</id><snippet>sbtn_days</snippet></ROW><ROW><id>10433088</id><snippet>  File "mod.py", line 8
    with self.db as handler:
         ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>10433088</id><snippet>with</snippet></ROW><ROW><id>10433088</id><snippet>__future__</snippet></ROW><ROW><id>10433088</id><snippet>mod.py</snippet></ROW><ROW><id>10433088</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>10433256</id><snippet>print '*' * n
</snippet></ROW><ROW><id>10433256</id><snippet>n</snippet></ROW><ROW><id>10433256</id><snippet>lens = [3, 5, 10, 1]
for i, l in enumerate(lens):
  print '%02d:%s' % (i + 1, '*' * l)
</snippet></ROW><ROW><id>10433256</id><snippet>01:***
02:*****
03:**********
04:*
</snippet></ROW><ROW><id>10433374</id><snippet>def mymethod():
    '''
    &gt;&gt;&gt; request.vars.update(param1=9, param2='a', param3=3.7)
    &gt;&gt;&gt; mymethod()
    [expected output of mymethod goes here]
    '''
</snippet></ROW><ROW><id>10433374</id><snippet>python web2py.py -S myapp/mycontroller -M -N
</snippet></ROW><ROW><id>10433376</id><snippet>time.sleep(5)</snippet></ROW><ROW><id>10433376</id><snippet>time.sleep(300)</snippet></ROW><ROW><id>10433393</id><snippet>class gevent.queue.Queue(maxsize=None)
    [...]
    qsize()

        Return the size of the queue.

[...]
class gevent.queue.JoinableQueue(maxsize=None)
    A subclass of Queue
</snippet></ROW><ROW><id>10433393</id><snippet>your_queue.qsize()</snippet></ROW><ROW><id>10433425</id><snippet>tx.execute(\
            "insert into scrapytest (title, link, desc) "
            "values (%s, %s, %s)",
            (item['title'][0],
             item['link'][0],
             item['desc'][0])
        )
</snippet></ROW><ROW><id>10434370</id><snippet>alias python=python3
</snippet></ROW><ROW><id>10434370</id><snippet>~/.profile</snippet></ROW><ROW><id>10434370</id><snippet>~/.bashrc</snippet></ROW><ROW><id>10434427</id><snippet>In [1]: globals()['x'] = 42

In [2]: x
Out[2]: 42
</snippet></ROW><ROW><id>10434547</id><snippet>import pexpect
proc = pexpect.spawn('./myclient &lt;arg1&gt; &lt;arg2&gt; &lt;arg3&gt;')
proc.logfile = the_logfile_you_want_to_use
proc.expect(['the string that tells you that myclient is waiting for input'])
proc.sendline('line you want to send to myclient')
proc.expect(['another line you want to wait for'])
proc.sendline('quit') # for myclient to quit
proc.expect([pexpect.EOF])
</snippet></ROW><ROW><id>10434709</id><snippet>from flask import request
request.data
</snippet></ROW><ROW><id>10434747</id><snippet>csv</snippet></ROW><ROW><id>10434747</id><snippet>with codecs.open('Geotweets.csv',mode='w', encoding='utf-8',errors='replace') as cache:
    writer = csv.writer(cache)
    for tweet in datares['results']:
        writer.writerow([tweet['text'], tweet['area'], tweet['date'], tweet['id']])
</snippet></ROW><ROW><id>10434747</id><snippet>with codecs.open('Geotweets.csv',mode='w', encoding='utf-8',errors='replace') as cache:
    writer = csv.DictWriter(cache, ["text", "area", "date", "id"])
    for tweet in datares['results']:
        writer.writerow(tweet)
</snippet></ROW><ROW><id>10434747</id><snippet>writerows()</snippet></ROW><ROW><id>10434747</id><snippet>with codecs.open('Geotweets.csv',mode='w', encoding='utf-8',errors='replace') as cache:
    writer = csv.DictWriter(cache, ["text", "area", "date", "id"])
    writer.writerows(datares['results'])
</snippet></ROW><ROW><id>10434912</id><snippet>japerk</snippet></ROW><ROW><id>10434912</id><snippet>nltk-trainer</snippet></ROW><ROW><id>10435062</id><snippet>in_file2</snippet></ROW><ROW><id>10435062</id><snippet>for i in in_file2:
</snippet></ROW><ROW><id>10435062</id><snippet>in_file2</snippet></ROW><ROW><id>10435062</id><snippet>ccs_file</snippet></ROW><ROW><id>10435293</id><snippet>class PurchaseOrder(models.Model):
    number = models.CharField(max_length=30, unique=True)

    def get_modules(self):
        return ', '.join([module.FIELD for service.modules.all() in self.service_set.filter(purchaseorder=self.pk) for module in service.modules.all()])
</snippet></ROW><ROW><id>10435293</id><snippet>class PurchaseAdmin(admin.ModelAdmin):
    list_display = ('number', 'get_modules')

admin.site.register(Service, ServiceAdmin)
</snippet></ROW><ROW><id>10435507</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; print urllib.splithost.__doc__
splithost('//host[:port]/path') --&gt; 'host[:port]', '/path'.
</snippet></ROW><ROW><id>10435507</id><snippet>for tag in soupan.findAll('a', attrs={'href': re.compile("^http://")}):

            href = tag['href']
            protocol, url = urllib.splittype(href) # 'http://www.xxx.de/3/4/5' =&gt; ('http', '//www.xxx.de/3/4/5')
            host, path =  urllib.splithost(url)    # '//www.xxx.de/3/4/5' =&gt; ('www.xxx.de', '/3/4/5')
            if host.lower() != theHostToCrawl and host != '':
                continue

            webpage = urllib2.urlopen(href).read()

            print 'Deep crawl ----&gt; ' +str(tag['href'])
            try:
                code-to-look-for-some-data...

            except:
                import traceback
                traceback.print_exc()
</snippet></ROW><ROW><id>10435507</id><snippet>'href': re.compile("^http://")
</snippet></ROW><ROW><id>10435507</id><snippet>&lt;a href="/folder/file.htm"&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>10435619</id><snippet>dairystore</snippet></ROW><ROW><id>10435619</id><snippet>CREATE TABLE dairystore (
  invoice INTEGER  PRIMARY KEY,
  vendor INTEGER REFERENCES program(vendorid), 
  date VARCHAR
)
</snippet></ROW><ROW><id>10435619</id><snippet>dairystore.invoice</snippet></ROW><ROW><id>10435619</id><snippet>invoices</snippet></ROW><ROW><id>10435619</id><snippet>dairystore.invoice</snippet></ROW><ROW><id>10435619</id><snippet>dairystore.invoice</snippet></ROW><ROW><id>10435619</id><snippet>program.vendorid</snippet></ROW><ROW><id>10435619</id><snippet>program</snippet></ROW><ROW><id>10435781</id><snippet>--distribute          Ignored.  Distribute is used by default. See
                      --setuptools to use Setuptools instead of Distribute.
</snippet></ROW><ROW><id>10435797</id><snippet>/System/Library/Frameworks/Python.framework/Versions/X.X/bin/python
</snippet></ROW><ROW><id>10435797</id><snippet>X.X</snippet></ROW><ROW><id>10435797</id><snippet>/Library/Frameworks/Python.framework/Versions/X.X/bin/python
</snippet></ROW><ROW><id>10435797</id><snippet>Current</snippet></ROW><ROW><id>10435797</id><snippet> sudo ln -s /System/Library/Frameworks/Python.framework/Versions/X.X /System/Library/Frameworks/Python.framework/Versions/Current
</snippet></ROW><ROW><id>10435797</id><snippet>sudo ln -s /Library/Frameworks/Python.framework/Versions/X.X /Library/Frameworks/Python.framework/Versions/Current
</snippet></ROW><ROW><id>10435807</id><snippet>'/usr/bin/env/python'
</snippet></ROW><ROW><id>10435807</id><snippet>'/usr/bin/env python'
</snippet></ROW><ROW><id>10435807</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.executable # contains the executable running this python process
'C:\\Python27\\pythonw.exe'
</snippet></ROW><ROW><id>10435807</id><snippet>p = subprocess.Popen([sys.executable,'options.py',ticker])
</snippet></ROW><ROW><id>10435928</id><snippet>__in</snippet></ROW><ROW><id>10435928</id><snippet>__exact</snippet></ROW><ROW><id>10435928</id><snippet>results = Transactions.objects.filter(payment_method__in=p)
</snippet></ROW><ROW><id>10436052</id><snippet>ForeignKey</snippet></ROW><ROW><id>10436052</id><snippet>ManyToManyField</snippet></ROW><ROW><id>10436052</id><snippet>limit_choices_to</snippet></ROW><ROW><id>10436575</id><snippet>In [11]: y[2:4,[1,3,4,5,6]]
Out[11]: 
array([[15, 17, 18, 19, 20],
       [22, 24, 25, 26, 27]])

In [12]: 
</snippet></ROW><ROW><id>10436575</id><snippet>y[1:3, [0, 2:-1]]</snippet></ROW><ROW><id>10436575</id><snippet>[0] +</snippet></ROW><ROW><id>10436575</id><snippet>In [33]: y[1:3, [0] + list(xrange(2,y.shape[1]))]
Out[33]: 
array([[ 7,  9, 10, 11, 12, 13],
       [14, 16, 17, 18, 19, 20]])
</snippet></ROW><ROW><id>10436832</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; t = string.Template("Hello my name is $name")
&gt;&gt;&gt; print t.substitute(name='Guido')
Hello my name is Guido

&gt;&gt;&gt; t = "Hello my name is %(name)s"
&gt;&gt;&gt; print t % dict(name='Tim')
Hello my name is Tim

&gt;&gt;&gt; t = "Hello my name is {name}"
&gt;&gt;&gt; print t.format(name='Barry')
Hello my name is Barry
</snippet></ROW><ROW><id>10436832</id><snippet>%(name)s</snippet></ROW><ROW><id>10436851</id><snippet>from concurrent.futures import Future, Executor
from threading import Lock


class DummyExecutor(Executor):

    def __init__(self):
        self._shutdown = False
        self._shutdownLock = Lock()

    def submit(self, fn, *args, **kwargs):
        with self._shutdownLock:
            if self._shutdown:
                raise RuntimeError('cannot schedule new futures after shutdown')

            f = Future()
            try:
                result = fn(*args, **kwargs)
            except BaseException as e:
                f.set_exception(e)
            else:
                f.set_result(result)

            return f

    def shutdown(self, wait=True):
        with self._shutdownLock:
            self._shutdown = True


if __name__ == '__main__':

    def fnc(err):
        if err:
            raise Exception("test")
        else:
            return "ok"

    ex = DummyExecutor()
    print(ex.submit(fnc, True))
    print(ex.submit(fnc, False))
    ex.shutdown()
    ex.submit(fnc, True) # raises exception
</snippet></ROW><ROW><id>10436992</id><snippet>None</snippet></ROW><ROW><id>10436992</id><snippet>"["+", ".join(mylist)+",]"
</snippet></ROW><ROW><id>10436992</id><snippet>&gt;&gt;&gt; ['2009', '2008', '2007',] == ['2009', '2008', '2007']
True
</snippet></ROW><ROW><id>10436992</id><snippet>import dis

def test1():
    ['2009', '2008', '2007',]

def test2():
    ['2009', '2008', '2007']

dis.dis(test1)
dis.dis(test2)
</snippet></ROW><ROW><id>10436992</id><snippet>  4           0 LOAD_CONST               1 ('2009') 
              3 LOAD_CONST               2 ('2008') 
              6 LOAD_CONST               3 ('2007') 
              9 BUILD_LIST               3 
             12 POP_TOP              
             13 LOAD_CONST               0 (None) 
             16 RETURN_VALUE         
  7           0 LOAD_CONST               1 ('2009') 
              3 LOAD_CONST               2 ('2008') 
              6 LOAD_CONST               3 ('2007') 
              9 BUILD_LIST               3 
             12 POP_TOP              
             13 LOAD_CONST               0 (None) 
             16 RETURN_VALUE    
</snippet></ROW><ROW><id>10436992</id><snippet>&lt;form name="test"&gt;
&lt;input type="checkbox" name="vehicle" value="Bike" /&gt; I have a bike&lt;br /&gt;
&lt;input type="checkbox" name="vehicle" value="Car" /&gt; I have a car
&lt;/form&gt; 
</snippet></ROW><ROW><id>10436992</id><snippet>&gt;&gt;&gt; br.open("file:///path/to/test.html")
&lt;response_seek_wrapper at 0x1d74cf8 whose wrapped object = &lt;closeable_response at 0x1f9be60 whose fp = &lt;open file '/path/to/test.html', mode 'rb' at 0x221b9c0&gt;&gt;&gt;
&gt;&gt;&gt; br.select_form(name="test")
&gt;&gt;&gt; br["vehicle"] = ["Bike", "Car",]
&gt;&gt;&gt; br["vehicle"] = ["Bike", "Car"]
</snippet></ROW><ROW><id>10437059</id><snippet>- url: /devcon/.*
  script: $PYTHON_LIB/google/appengine/ext/admin
  login: admin
</snippet></ROW><ROW><id>10437059</id><snippet>- url: /devcon/.*
  script: google.appengine.ext.admin.application
  login: admin
</snippet></ROW><ROW><id>10437187</id><snippet>;; not very idiomatic
(defn example
  [m]
  (if (contains? m :name)
    (:name m)
    (throw (IllegalArgumentException. (format "key %s is missing" :name)))))

;; idiomatic
(defn example
  [m]
  (if-let [v (:name m)]
    v
    (throw (IllegalArgumentException. (format "key %s is missing" :name)))))
</snippet></ROW><ROW><id>10437202</id><snippet>Image.state</snippet></ROW><ROW><id>10437202</id><snippet>"pending"</snippet></ROW><ROW><id>10437202</id><snippet>"available"</snippet></ROW><ROW><id>10437404</id><snippet>update_capacity</snippet></ROW><ROW><id>10437404</id><snippet>False</snippet></ROW><ROW><id>10437404</id><snippet>check_capacity</snippet></ROW><ROW><id>10437404</id><snippet>update_capacity</snippet></ROW><ROW><id>10437404</id><snippet>update_capacity</snippet></ROW><ROW><id>10437404</id><snippet>def update_capacity(self, at_index):
    if &lt;condition from check_capacity&gt;:
        &lt;body of update_capacity&gt;
    else:
        return False
</snippet></ROW><ROW><id>10437404</id><snippet>None</snippet></ROW><ROW><id>10437404</id><snippet>True</snippet></ROW><ROW><id>10437490</id><snippet>quote</snippet></ROW><ROW><id>10437490</id><snippet>_.-</snippet></ROW><ROW><id>10437490</id><snippet>/</snippet></ROW><ROW><id>10437490</id><snippet>unquote</snippet></ROW><ROW><id>10437490</id><snippet>&gt;&gt;&gt; urllib.unquote('/%24/')
'/$/'
</snippet></ROW><ROW><id>10437621</id><snippet>2010-11-07</snippet></ROW><ROW><id>10437687</id><snippet>&gt;&gt;&gt; Object.x
0
</snippet></ROW><ROW><id>10437687</id><snippet>&gt;&gt;&gt; a.y = []
&gt;&gt;&gt; b.y = []
&gt;&gt;&gt; a.y.append(1)
&gt;&gt;&gt; b.y.append(2)
&gt;&gt;&gt; print a.y, b.y
[1] [2]
</snippet></ROW><ROW><id>10437687</id><snippet>class Object(object):
    def __init__(self):
        self.y = []
        self.x = 0
</snippet></ROW><ROW><id>10437730</id><snippet>myplotlib</snippet></ROW><ROW><id>10437730</id><snippet>import myplt
myplt.setmydefaults()
</snippet></ROW><ROW><id>10437796</id><snippet>&gt;&gt;&gt; from os.path import *
&gt;&gt;&gt; file = '/Users/myMac/Desktop/MemoryAccess/BasicTest.asm/someStuff'
&gt;&gt;&gt; splitext(basename(dirname(file)))[0]
'BasicTest'
</snippet></ROW><ROW><id>10437928</id><snippet>import scraperwiki
import simplejson
import urllib2

QUERY = 'meetup'
RESULTS_PER_PAGE = '100'
NUM_PAGES = 10

for page in range(1, NUM_PAGES+1):
    base_url = 'http://search.twitter.com/search.json?q=%s&amp;rpp=%s&amp;page=%s' \
         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)
    try:
        results_json = simplejson.loads(scraperwiki.scrape(base_url))
        for result in results_json['results']:
            #print result
            data = {}
            data['id'] = result['id']
            data['text'] = result['text']
            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])
            data['from_user'] = result['from_user']
            data['created_at'] = result['created_at']
            if data['location']:
                print data['location'], data['from_user']
                scraperwiki.sqlite.save(["id"], data)
    except:
        print 'Oh dear, failed to scrape %s' % base_url
        break
</snippet></ROW><ROW><id>10437928</id><snippet>P93JX VSDC
FV36RL Bootstrappers
Ci76fP Eli_Regalado
UN56fn JasonPalmer1971
iQ3H6zR GNOTP
Qr04eB fcnewtech
sE79dW melindaveee
ud08GT MariaPanlilio
c9B8EE akibantech
ay26th Thepinkleash
</snippet></ROW><ROW><id>10437928</id><snippet>import scraperwiki
import simplejson
import urllib2
import re

QUERY = 'sw4'
RESULTS_PER_PAGE = '100'
NUM_PAGES = 10

postcode_match = re.compile('(?&lt;![0-9A-Z])([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {0,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)(?![0-9A-Z])', re.I)

for page in range(1, NUM_PAGES+1):
    base_url = 'http://search.twitter.com/search.json?q=%s&amp;rpp=%s&amp;page=%s' \
         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)
    try:
        results_json = simplejson.loads(scraperwiki.scrape(base_url))
        for result in results_json['results']:
            #print result
            data = {}
            data['id'] = result['id']
            data['text'] = result['text']
            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])
            data['from_user'] = result['from_user']
            data['created_at'] = result['created_at']
            if data['location'] and postcode_match.search(data['text']):
                print data['location'], data['text']
                scraperwiki.sqlite.save(["id"], data)
    except:
        print 'Oh dear, failed to scrape %s' % base_url
        break
</snippet></ROW><ROW><id>10437956</id><snippet>import sys
import os
try:
    import test_data
except ImportError:
    sys.path.append(os.path.dirname(__file__))
    try:
        import test_data
    finally:
        sys.path.remove(os.path.dirname(__file__))
</snippet></ROW><ROW><id>10438107</id><snippet>def f(x):
    return x+2

def test_equal():       # py.test looks for functions that start with test_
    assert f(3) == 5
</snippet></ROW><ROW><id>10438107</id><snippet>w:\tmp&gt;py.test tt.py
============================= test session starts =============================
platform win32 -- Python 2.6.6 -- pytest-2.2.3
collected 1 items

tt.py .

========================== 1 passed in 0.01 seconds ===========================
</snippet></ROW><ROW><id>10438107</id><snippet>w:\tmp&gt;py.test tt.py
============================= test session starts =============================
platform win32 -- Python 2.6.6 -- pytest-2.2.3
collected 1 items

tt.py F

================================== FAILURES ===================================
_________________________________ test_equal __________________________________

    def test_equal():       # py.test looks for functions that start with test_
&gt;       assert f(3) == 6
E       assert 5 == 6
E        +  where 5 = f(3)

tt.py:5: AssertionError
========================== 1 failed in 0.01 seconds ===========================
</snippet></ROW><ROW><id>10438125</id><snippet>inner join</snippet></ROW><ROW><id>10438125</id><snippet>SELECT permissions.permissionid AS permissions_permissionid,
     permissions.name AS permissions_name
FROM permissions
INNER JOIN users_permissions 
    ON permissions.permissionid = users_permissions.permissionid
WHERE ? = users_permissions.userid
ORDER BY permissions.name
</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkManager</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkAccessManager::createRequest</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkReply::error</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkReply::finished</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkReply::error</snippet></ROW><ROW><id>10438264</id><snippet>QNetworkAccessManager</snippet></ROW><ROW><id>10438264</id><snippet>QWebPage::setNetworkAccessManager</snippet></ROW><ROW><id>10438264</id><snippet>QWebPage</snippet></ROW><ROW><id>10438264</id><snippet>QWebPage::javaScriptConsoleMessage</snippet></ROW><ROW><id>10438264</id><snippet>console.log</snippet></ROW><ROW><id>10438341</id><snippet>MySQL-python</snippet></ROW><ROW><id>10438341</id><snippet>pip install MySQL-python
</snippet></ROW><ROW><id>10438363</id><snippet>name_title = (("John D",("CEO","COO","CTO")),
              ("Mary J",("COO","MD")),
              ("Tim C",("Dev Ops","Director")))
title_cat = {"CEO": set(["Executive"]),
             "COO": set(["Executive"]),
             "CTO": set(["Executive"]),
             "MD": set(["Executive"]),
             "Dev Ops": set(["IT"]),
             "Director": set(["Other"])}

name_cat = [(name, reduce(lambda x,y:x|y, [title_cat[title]for title in titles])) for name,titles in name_title]
</snippet></ROW><ROW><id>10438363</id><snippet>union</snippet></ROW><ROW><id>10438363</id><snippet>sum</snippet></ROW><ROW><id>10438790</id><snippet>\S+</snippet></ROW><ROW><id>10438790</id><snippet>.+?</snippet></ROW><ROW><id>10438790</id><snippet>url(r'no_inventariado/nuevo/(?P&lt;nombre&gt;.+?)/(?P&lt;serie&gt;[a-zA-Z0-9_]*)/(?P&lt;extension&gt;\d{4})&gt;     'inventario.views.nuevo_resguardo', name='nuevo_resguardo'),$
</snippet></ROW><ROW><id>10438790</id><snippet>+?</snippet></ROW><ROW><id>10438790</id><snippet>.+?</snippet></ROW><ROW><id>10438858</id><snippet>for idx, item in enumerate(color):
    print 'I am %s' % item
    rest = color[:idx] + color[idx+1:]
    print 'Rest is %s' % ','.join(rest)
</snippet></ROW><ROW><id>10438936</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2

base_url = 'http://www.ksl.com'
url = base_url + '/index.php?nid=443'
model = "Honda" # this is the name of the model to look for

# Load the page and process with BeautifulSoup
handle = urllib2.urlopen(url)
html = handle.read()
soup = BeautifulSoup(html)

# Collect all the ad detail boxes from the page
divs = soup.findAll(attrs={"class" : "detailBox"})

# For each ad, get the title
# if it contains the word "Honda", get the link
for div in divs:
    title = div.find(attrs={"class" : "adTitle"}).text
    if model in title:
        link = div.find(attrs={"class" : "listlink"})["href"]
        link = base_url + link
        # Now you have a link that you can download and scrape
        print title, link
    else:
        print "No match: ", title
</snippet></ROW><ROW><id>10438936</id><snippet>1995-  Honda Prelude http://www.ksl.com/index.php?sid=0&amp;nid=443&amp;tab=list/view&amp;ad=8817797
No match:  1994-  Ford Escort
No match:  2006-  Land Rover Range Rover Sport
No match:  2006-  Nissan Maxima
No match:  1957-  Volvo 544
No match:  1996-  Subaru Legacy
No match:  2005-  Mazda Mazda6
No match:  1995-  Chevrolet Monte Carlo
2002-  Honda Accord http://www.ksl.com/index.php?sid=0&amp;nid=443&amp;tab=list/view&amp;ad=8817784
No match:  2004-  Chevrolet Suburban (Chevrolet)
1998-  Honda Civic http://www.ksl.com/index.php?sid=0&amp;nid=443&amp;tab=list/view&amp;ad=8817779
No match:  2004-  Nissan Titan
2001-  Honda Accord http://www.ksl.com/index.php?sid=0&amp;nid=443&amp;tab=list/view&amp;ad=8817770
No match:  1999-  GMC Yukon
No match:  2007-  Toyota Tacoma
</snippet></ROW><ROW><id>10439002</id><snippet>&gt;&gt;&gt; class ModModule(object):
    def __init__(self, globals):
        self.__dict__ = globals
        import sys
        sys.modules[self.__name__] = self
    def __getitem__(self, name):
        return self.__dict__[name]


&gt;&gt;&gt; m = ModModule({'__name__':'Mod', 'a':3})
&gt;&gt;&gt; import Mod
&gt;&gt;&gt; Mod['a']
3

# subclassing the actual type won't work
&gt;&gt;&gt; class ModModule(types.ModuleType):
    def __init__(self, globals):
        self.__dict__ = globals
        import sys
        sys.modules[self.__name__] = self
    def __getitem__(self, name):
        return self.__dict__[name]


&gt;&gt;&gt; m = ModModule({'__name__':'Mod', 'a':3})

Traceback (most recent call last):
  File "&lt;pyshell#114&gt;", line 1, in &lt;module&gt;
    m = ModModule({'__name__':'Mod', 'a':3})
  File "&lt;pyshell#113&gt;", line 3, in __init__
    self.__dict__ = globals
TypeError: readonly attribute
</snippet></ROW><ROW><id>10439117</id><snippet>object.__getattribute__
</snippet></ROW><ROW><id>10439117</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def g():
    a.b.c = 4


&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_CONST               1 (4)
              3 LOAD_GLOBAL              0 (a)
              6 LOAD_ATTR                1 (b)
              9 STORE_ATTR               2 (c)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>10439207</id><snippet>def reLayout(self):
    QWidget().setLayout(self.layout())
    layout = QGridLayout(self)
    ...
</snippet></ROW><ROW><id>10439207</id><snippet>QStackedWidget</snippet></ROW><ROW><id>10439207</id><snippet>QStackedLayout</snippet></ROW><ROW><id>10439207</id><snippet>QObject</snippet></ROW><ROW><id>10439207</id><snippet>QObjectCleanupHandler</snippet></ROW><ROW><id>10439207</id><snippet>QObjectCleanupHandler().add(self.layout())
</snippet></ROW><ROW><id>10439403</id><snippet>lines = file.readlines()

line = lines[line_number]
</snippet></ROW><ROW><id>10439403</id><snippet>from itertools import dropwhile

line = next(dropwhile(lambda x: x[0]==line_number, enumerate(file)))[1]
</snippet></ROW><ROW><id>10439403</id><snippet>itertools.dropwhile()</snippet></ROW><ROW><id>10439432</id><snippet>selectionChanged(items)</snippet></ROW><ROW><id>10439432</id><snippet>selectionChanged(items)</snippet></ROW><ROW><id>10439432</id><snippet>myMatPlotView.selectionchanged.connect(myTableView.matplotSelected)
</snippet></ROW><ROW><id>10439432</id><snippet>matPlotSelected()</snippet></ROW><ROW><id>10439432</id><snippet>def matPlotSelected(self, qStandardItems):

    selModel = self.selectionModel()
    model = self.model()

    for item in qStandardItems:
        idx = model.indexFromItem(item)
        selModel.select(idx, selModel.Select)
</snippet></ROW><ROW><id>10439432</id><snippet>def __init__(self):
    super(myDialog, self).__init__()
    self.t = QtGui.QTreeView()
    self.m = QtGui.QStandardItemModel()
    self.t.setModel(self.m)
    layout = QtGui.QVBoxLayout()
    layout.addWidget(self.t)
    self.setLayout(layout)
    self.l = [
        ['one', False], ['two', True], 
        ['three', False], ['four', True], 
        ['five', False]]
    self.populate()

def populate(self):
    self.m.clear()
    root = self.m.invisibleRootItem()
    for item in self.l:
        e = QtGui.QStandardItem()
        e.setText(item[0])
        root.appendRow(e)
</snippet></ROW><ROW><id>10439432</id><snippet>def populate(self):
    self.m.clear()
    root = self.m.invisibleRootItem()
    selModel = self.t.selectionModel()
    for item in self.l:
        e = QtGui.QStandardItem()
        e.setText(item[0])
        root.appendRow(e)

        if item[1]:
            idx = self.m.indexFromItem(e)
            selModel.select(idx, selModel.Select)
</snippet></ROW><ROW><id>10439496</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>10439496</id><snippet>import ast

data="""\
{
    "translate_tabs_to_spaces": True,
    "word_wrap": "true",
    "font_face": "Monaco",
    "font_size": 14.0,
    "highlight_line": True,
    "ignored_packages":
    [
        ""
    ],
    "what": '''
            This is python file, not json
            '''
}\
"""

print(ast.literal_eval(data))
</snippet></ROW><ROW><id>10439496</id><snippet>{'what': '\n            This is python file, not json\n            ', 'font_size': 14.0, 'translate_tabs_to_spaces': True, 'font_face': 'Monaco', 'word_wrap': 'true', 'highlight_line': True, 'ignored_packages': ['']}
</snippet></ROW><ROW><id>10439496</id><snippet>...</snippet></ROW><ROW><id>10439496</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>10439541</id><snippet>&gt; somefile.txt</snippet></ROW><ROW><id>10439541</id><snippet>2&gt;&amp;1 &gt; somefile.txt</snippet></ROW><ROW><id>10439602</id><snippet>db=[]
file=open(filePath,'r')
for line in file:
    skill = []
    for word in line.split(','):
        skill.append(itDictionary[word.strip()])
    db.append(skill)
print db
</snippet></ROW><ROW><id>10439608</id><snippet>for next_one in hexdata:
    decimal = int(next_one, 16)
    print "Converting: ", next_one, "Converted:", decimal
    dec_data.append(decimal)
</snippet></ROW><ROW><id>10439758</id><snippet>env.password = userpassword</snippet></ROW><ROW><id>10439920</id><snippet>matshow</snippet></ROW><ROW><id>10439920</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib import patches

class MatrixBrowser(object):

    def __init__(self, matrix, matrix_ax, connections):
        self.matrix = matrix
        self.matrix_ax = matrix_ax
        self.con = connections
        self.index = (0, 0)
        self.rect = patches.Rectangle((0, 0), 1.1, 1.1,
                    linewidth=3, fill=False, visible=False)
        self.con_rects = self.add_connection_rects()

    def add_connection_rects(self):
        max_cons = max([len(_) for _ in self.con.values()])
        rects = []
        for con in range(max_cons):
            con_rect = patches.Rectangle((0, 0), 1.1, 1.1, linewidth=5,
                        fill=False, visible=False, edgecolor='red')
            rects.append(con_rect)
            self.matrix_ax.add_patch(con_rect)
        return rects

    def update_connections(self, event):
        current_ax = event.inaxes
        cx = event.xdata
        cy = event.ydata
        # only if the cursor is on the matrix ax
        if current_ax == self.matrix_ax:
            rx = round(abs(cx))
            ry = round(abs(cy))
            if not self.index == (rx, ry):
                # make every previous rect invisible
                for rect in self.con_rects:
                    rect.set_visible(False)
                cons = self.con.get((rx, ry), [])
                for rect, con in zip(self.con_rects, cons):
                    rect.set_xy((con[0] - 0.55, con[1] - 0.55))
                    rect.set_visible(True)
                self.index = (rx, ry)
            self.rect.set_visible(True)
            self.rect.set_xy((rx - 0.55, ry - 0.55))
        else:
            self.rect.set_visible(False)
        plt.draw()

def main(matrix, connections):
    fig, ax = plt.subplots()
    im = ax.matshow(matrix, aspect='auto', cmap=plt.cm.winter)
    plt.colorbar(im, use_gridspec=True)
    browser = MatrixBrowser(matrix, ax, connections)
    ax.add_patch(browser.rect)
    fig.canvas.mpl_connect('motion_notify_event', browser.update_connections)
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    matrix = np.random.rand(15, 15) * 10
    connections = {(0, 0): [(1, 1), (2, 2), (10, 2), (8, 5)],
                   (3, 2): [(3, 3)],
                   (14, 14): [(0, 0), (0, 14), (14, 0)]}
    main(matrix, connections)
</snippet></ROW><ROW><id>10439920</id><snippet>(0, 0)</snippet></ROW><ROW><id>10439920</id><snippet>(0, 0): [(1, 1), (2, 2), (10, 2), (8, 5)]</snippet></ROW><ROW><id>10440232</id><snippet>any((c in badChars) for c in yourString)
</snippet></ROW><ROW><id>10440232</id><snippet>any((c in yourString) for c in badChars)  # extensionally equivalent, slower
</snippet></ROW><ROW><id>10440232</id><snippet>set(yourString) &amp; set(badChars)  # extensionally equivalent, slower
</snippet></ROW><ROW><id>10440232</id><snippet>re</snippet></ROW><ROW><id>10440232</id><snippet>[...]</snippet></ROW><ROW><id>10440232</id><snippet>.finditer</snippet></ROW><ROW><id>10440232</id><snippet>\</snippet></ROW><ROW><id>10440232</id><snippet>w</snippet></ROW><ROW><id>10440232</id><snippet>]</snippet></ROW><ROW><id>10440232</id><snippet>[</snippet></ROW><ROW><id>10440232</id><snippet>-</snippet></ROW><ROW><id>10440232</id><snippet>\w</snippet></ROW><ROW><id>10440232</id><snippet>str.__contains__</snippet></ROW><ROW><id>10440232</id><snippet>in</snippet></ROW><ROW><id>10440232</id><snippet>badCharSet = set(badChars)
any((c in badChars) for c in yourString)
</snippet></ROW><ROW><id>10440232</id><snippet>any((c in set(yourString)) for c in badChars)</snippet></ROW><ROW><id>10440512</id><snippet>and</snippet></ROW><ROW><id>10440512</id><snippet>if keyname: 
    keyparts.append(keyname)
</snippet></ROW><ROW><id>10440825</id><snippet>if</snippet></ROW><ROW><id>10440825</id><snippet>bool()</snippet></ROW><ROW><id>10440825</id><snippet>if</snippet></ROW><ROW><id>10440825</id><snippet>&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([]) == False
True
</snippet></ROW><ROW><id>10440825</id><snippet>False</snippet></ROW><ROW><id>10440825</id><snippet>x == True</snippet></ROW><ROW><id>10440825</id><snippet>x == False</snippet></ROW><ROW><id>10440825</id><snippet>==</snippet></ROW><ROW><id>10440825</id><snippet>a == b</snippet></ROW><ROW><id>10440825</id><snippet>b == c</snippet></ROW><ROW><id>10440825</id><snippet>a == c</snippet></ROW><ROW><id>10440825</id><snippet>[] == False</snippet></ROW><ROW><id>10440825</id><snippet>'' == False</snippet></ROW><ROW><id>10440825</id><snippet>[] == ''</snippet></ROW><ROW><id>10440856</id><snippet>plt.xlabel('position %d' % entries, fontproperties=font_manager.FontProperties(size=10))
</snippet></ROW><ROW><id>10441084</id><snippet>proxySettings = {'https':'http://{0}:{1}'.format(PROXY_NAME, PROXY_PORT)}</snippet></ROW><ROW><id>10441084</id><snippet>client.set_options(proxy = proxySettings)</snippet></ROW><ROW><id>10441322</id><snippet>C:\Python32\Lib\site-packages</snippet></ROW><ROW><id>10441322</id><snippet>SendInput</snippet></ROW><ROW><id>10441322</id><snippet>keybd_event</snippet></ROW><ROW><id>10441322</id><snippet>SendMessage</snippet></ROW><ROW><id>10441322</id><snippet>&gt;&gt;&gt; import win32api
&gt;&gt;&gt; VK_MEDIA_PLAY_PAUSE = 0xB3
&gt;&gt;&gt; hwcode = win32api.MapVirtualKey(VK_MEDIA_PLAY_PAUSE, 0)
&gt;&gt;&gt; hwcode
34
&gt;&gt;&gt; win32api.keybd_event(VK_MEDIA_PLAY_PAUSE, hwcode)
</snippet></ROW><ROW><id>10441322</id><snippet>MapVirtualKey</snippet></ROW><ROW><id>10441322</id><snippet>keybd_event</snippet></ROW><ROW><id>10441322</id><snippet>SendMessage</snippet></ROW><ROW><id>10441397</id><snippet>lib</snippet></ROW><ROW><id>10441397</id><snippet>markdown</snippet></ROW><ROW><id>10441397</id><snippet>sys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))
</snippet></ROW><ROW><id>10441842</id><snippet>c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));</snippet></ROW><ROW><id>10441910</id><snippet>--view
  |_ __init__.py
  |_ main.py # previewsly view.py
  |_ admin.py # previewsly view_admin.py
</snippet></ROW><ROW><id>10441910</id><snippet>main</snippet></ROW><ROW><id>10441910</id><snippet>admin</snippet></ROW><ROW><id>10441910</id><snippet>--view
  |_ __init__.py
  |_ main.py 
  |_ admin.py 
  |_ base.py
</snippet></ROW><ROW><id>10441910</id><snippet>base</snippet></ROW><ROW><id>10441910</id><snippet>__init__</snippet></ROW><ROW><id>10441910</id><snippet>__init__</snippet></ROW><ROW><id>10442067</id><snippet>hello_emb</snippet></ROW><ROW><id>10442067</id><snippet>PyImport_Import()</snippet></ROW><ROW><id>10442067</id><snippet>PyImport_Import()</snippet></ROW><ROW><id>10442067</id><snippet>NULL</snippet></ROW><ROW><id>10442067</id><snippet>PyErr_Print()</snippet></ROW><ROW><id>10442067</id><snippet>pName = PyUnicode_FromString("hello_emb.py");
pModule = PyImport_Import(pName);
if (pModule == NULL)
    PyErr_Print();
</snippet></ROW><ROW><id>10442067</id><snippet>fopen</snippet></ROW><ROW><id>10442067</id><snippet>PyInit_stdcallbk</snippet></ROW><ROW><id>10442067</id><snippet>sys.stdout</snippet></ROW><ROW><id>10442067</id><snippet>sys.stderr</snippet></ROW><ROW><id>10442067</id><snippet>Py_DECREF</snippet></ROW><ROW><id>10442067</id><snippet>stdout</snippet></ROW><ROW><id>10442067</id><snippet>stderr</snippet></ROW><ROW><id>10442080</id><snippet>p.wait()</snippet></ROW><ROW><id>10442080</id><snippet>(stdout, stderr) = p.communicate()</snippet></ROW><ROW><id>10442169</id><snippet>ChatConnection</snippet></ROW><ROW><id>10442169</id><snippet>Session</snippet></ROW><ROW><id>10442169</id><snippet>ChatRouter</snippet></ROW><ROW><id>10442169</id><snippet>SockJSRouter</snippet></ROW><ROW><id>10442169</id><snippet>connection</snippet></ROW><ROW><id>10442169</id><snippet>__new__</snippet></ROW><ROW><id>10442169</id><snippet>SockJSRouter</snippet></ROW><ROW><id>10442169</id><snippet>connection</snippet></ROW><ROW><id>10442169</id><snippet>ChatRouter</snippet></ROW><ROW><id>10442169</id><snippet>connection</snippet></ROW><ROW><id>10442169</id><snippet>connection</snippet></ROW><ROW><id>10442169</id><snippet>connection</snippet></ROW><ROW><id>10442169</id><snippet>ChatConnection</snippet></ROW><ROW><id>10442325</id><snippet>if appid == td.split('|')[0].strip():
    print td
</snippet></ROW><ROW><id>10442325</id><snippet>td</snippet></ROW><ROW><id>10442325</id><snippet>appid</snippet></ROW><ROW><id>10442642</id><snippet>init***</snippet></ROW><ROW><id>10442642</id><snippet>PyInit_***</snippet></ROW><ROW><id>10442642</id><snippet>BOOST_PYTHON_MODULE</snippet></ROW><ROW><id>10442642</id><snippet>PyBackend</snippet></ROW><ROW><id>10442642</id><snippet>PyInit_PyBackend</snippet></ROW><ROW><id>10442642</id><snippet>_sre</snippet></ROW><ROW><id>10442642</id><snippet>init_sre</snippet></ROW><ROW><id>10442642</id><snippet>PyInit__sre</snippet></ROW><ROW><id>10442644</id><snippet>extends</snippet></ROW><ROW><id>10442644</id><snippet>id</snippet></ROW><ROW><id>10442644</id><snippet>class</snippet></ROW><ROW><id>10442644</id><snippet>extends</snippet></ROW><ROW><id>10442644</id><snippet>include</snippet></ROW><ROW><id>10442644</id><snippet>templates/base.html</snippet></ROW><ROW><id>10442644</id><snippet>{% extends base_template %}
</snippet></ROW><ROW><id>10442644</id><snippet>base_template</snippet></ROW><ROW><id>10442644</id><snippet>session.base_template</snippet></ROW><ROW><id>10442790</id><snippet>$(document).ready(function(){
    $.get('/test/api?request=getallwords', function(json) {
        $('body').append(json);
        var j = JSON.stringify(json)
        $.each(json.details,function(i){
            $('#list').append($('&lt;li&gt;' + this.word + '&lt;/li&gt;'));
        });
        alert(j);
    }); // error, you close the $('document').ready() here
    },'json');
</snippet></ROW><ROW><id>10442790</id><snippet>$(document).ready(function(){
    $.get('/test/api?request=getallwords', function(json) {
        $('body').append(json);
        var j = JSON.stringify(json)
        $.each(json.details,function(i){
            $('#list').append($('&lt;li&gt;' + this.word + '&lt;/li&gt;'));
        });
        alert(j);
    },'json');
 });
</snippet></ROW><ROW><id>10442941</id><snippet>/**begin repeat
 *
 * #name = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 * LONG, ULONG, LONGLONG, ULONGLONG,
 * FLOAT, DOUBLE, LONGDOUBLE,
 * DATETIME, TIMEDELTA#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 * npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 * npy_float, npy_double, npy_longdouble,
 * npy_datetime, npy_timedelta#
 * #out = npy_long, npy_ulong, npy_long, npy_ulong, npy_long, npy_ulong,
 * npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 * npy_float, npy_double, npy_longdouble,
 * npy_datetime, npy_timedelta#
 */
static void
@name@_dot(char *ip1, npy_intp is1, char *ip2, npy_intp is2, char *op, npy_intp n,
           void *NPY_UNUSED(ignore))
{
    @out@ tmp = (@out@)0;
    npy_intp i;

    for (i = 0; i &lt; n; i++, ip1 += is1, ip2 += is2) {
        tmp += (@out@)(*((@type@ *)ip1)) *
               (@out@)(*((@type@ *)ip2));
    }
    *((@type@ *)op) = (@type@) tmp;
}
/**end repeat**/
</snippet></ROW><ROW><id>10442941</id><snippet>FLOAT_dot</snippet></ROW><ROW><id>10442941</id><snippet>a[i * n + k]</snippet></ROW><ROW><id>10442941</id><snippet>for (i = mp1; i &lt;= *n; i += 5) {
stemp = stemp + SX(i) * SY(i) + SX(i + 1) * SY(i + 1) + SX(i + 2) * 
    SY(i + 2) + SX(i + 3) * SY(i + 3) + SX(i + 4) * SY(i + 4);
}
</snippet></ROW><ROW><id>10443270</id><snippet>multiprocessing.Manager().dict()</snippet></ROW><ROW><id>10443270</id><snippet>dict()</snippet></ROW><ROW><id>10443407</id><snippet>dls</snippet></ROW><ROW><id>10443407</id><snippet>render_to_response</snippet></ROW><ROW><id>10443548</id><snippet>s = '   abdcde   '
s.strip()
'abcde'
</snippet></ROW><ROW><id>10443752</id><snippet>__init__</snippet></ROW><ROW><id>10443752</id><snippet>  def __init__(self, data, *args, **kwargs):
     super(categoryForm, self).__init__(data, **kwargs)
      if self.data['photo']!='':
         self.fields['photo'].initial=self.data['photo']
</snippet></ROW><ROW><id>10443884</id><snippet>entities</snippet></ROW><ROW><id>10443884</id><snippet>Transits</snippet></ROW><ROW><id>10443884</id><snippet>start</snippet></ROW><ROW><id>10443884</id><snippet>end</snippet></ROW><ROW><id>10443884</id><snippet>class Zone(Entity):
    __mapper_args__ = {'polymorphic_identity': 'zones'}
    __tablename__ = "zones"
    id          = Column(Integer, ForeignKey('entities.id'), primary_key=True)
    @property
    def transits(self):
        return self.transits_from_here + self.transits_to_here

class Transit(Base):
    __tablename__ = "transits"
    id          = Column(Integer, primary_key=True)
    start = Column(Integer, ForeignKey('zones.id'))
    end = Column(Integer, ForeignKey('zones.id'))

    s_zone = relationship(Zone, primaryjoin=(start==Zone.id), backref="transits_from_here")
    e_zone = relationship(Zone, primaryjoin=(end==Zone.id), backref="transits_to_here")
</snippet></ROW><ROW><id>10444364</id><snippet>def SendSSLPacket(self, hsMsg, seq, renegotiate):
        rec = hsMsg
        recLen = len(rec)
        rec_len_packed = pack('&gt;H', recLen)

        self.seqNum = pack('&gt;Q', seq)

        #
        # The following initIV is just for testing
        # Will be replaced by random number later
        #
        initIV = "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02"


        m = hmac.new(self.sslStruct['wMacPtr'], 
            digestmod=sha1)
        m.update(self.seqNum)
        m.update("\x16")
        m.update("\x03")
        m.update("\x02")
        m.update(rec_len_packed)
        m.update(rec)
        m = m.digest()


        self.HexStrDisplay("Final MAC", Str2HexStr(m))

        currentLength = len(rec + m) + 1
        blockLength = 16
        pad_len = blockLength - \
            (currentLength % blockLength)

        if pad_len == blockLength:
            pad_len = 0

        self.log("Padding Length: %s" % (str(pad_len)))

        padding = ''
        for iter in range(0, pad_len + 1):
            padding = padding + \
            struct.pack('B', pad_len)

        self.HexStrDisplay("Padding", Str2HexStr(padding))

        self.sslStruct['recordPlusMAC'] = \
            initIV + rec + m + padding
        self.HexStrDisplay("Final Packet", Str2HexStr(
            self.sslStruct['recordPlusMAC']))

        if renegotiate == 1:
            enc_hs_with_reneg = AES.new( self.sslStruct['wKeyPtr'], AES.MODE_CBC, self.sslStruct['wIVPtr'])
            encryptedData = enc_hs_with_reneg.encrypt(self.sslStruct['recordPlusMAC'])

        if renegotiate == 0:
            enc_hs_wo_reneg = AES.new( self.sslStruct['wKeyPtr'], AES.MODE_CBC, self.sslStruct['wIVPtr'] )
            encryptedData = enc_hs_wo_reneg.encrypt(self.sslStruct['recordPlusMAC'])


        packLen = len(encryptedData)

        self.sslStruct['encryptedRecordPlusMAC'] = \
            tls11RecHeaderDefault + \
            Pack2Bytes(packLen) + encryptedData
        self.HexStrDisplay("Encrypted Packet",
            Str2HexStr(self.sslStruct['encryptedRecordPlusMAC']))

        self.socket.send(
            self.sslStruct['encryptedRecordPlusMAC'])
</snippet></ROW><ROW><id>10444446</id><snippet>os = getattr(__builtins__, "".join(chr(ord(x) - 1) for x in  "``jnqpsu``"))("os")
</snippet></ROW><ROW><id>10444616</id><snippet>pattern = re.compile('(?&lt;=&lt;meta-data\sandroid:value=\")[^"]+')
for each_config_line in manifest_original_xml_fh:
    each_config_line = re.sub(pattern, channel_name, each_config_line)
</snippet></ROW><ROW><id>10444616</id><snippet>(?&lt;=&lt;meta-data\sandroid:value=\")</snippet></ROW><ROW><id>10444616</id><snippet>[^"]+</snippet></ROW><ROW><id>10444616</id><snippet>"</snippet></ROW><ROW><id>10444718</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; charset=UTF-8""&gt;
&lt;meta name=ProgId content=Word.Document&gt;
&lt;meta name=Generator content=""Microsoft Word 9""&gt;
&lt;meta name=Originator content=""Microsoft Word 9""&gt;
&lt;style&gt;
@page Section1 {size:595.45pt 841.7pt; margin:1.0in 1.25in 1.0in 1.25in;mso-header-margin:.5in;mso-footer-margin:.5in;mso-paper-source:0;}
div.Section1 {page:Section1;}
@page Section2 {size:841.7pt 595.45pt;mso-page-orientation:landscape;margin:1.25in 1.0in 1.25in 1.0in;mso-header-margin:.5in;mso-footer-margin:.5in;mso-paper-source:0;}
div.Section2 {page:Section2;}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=Section2&gt;
'Section1: Portrait, Section2: Landscape

[your text here]

&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>10444718</id><snippet>application/msword</snippet></ROW><ROW><id>10444718</id><snippet>UTF-8</snippet></ROW><ROW><id>10444888</id><snippet>from .entity import Entity
</snippet></ROW><ROW><id>10445763</id><snippet>print_function</snippet></ROW><ROW><id>10445763</id><snippet>print()</snippet></ROW><ROW><id>10445763</id><snippet>from __future__ import print_function
with open('filename', 'w') as f:
    print('some text', file=f)
</snippet></ROW><ROW><id>10445763</id><snippet>end=''</snippet></ROW><ROW><id>10445763</id><snippet>print()</snippet></ROW><ROW><id>10445763</id><snippet>f.write('some text')</snippet></ROW><ROW><id>10445763</id><snippet>__future__</snippet></ROW><ROW><id>10445842</id><snippet>&gt;&gt;&gt; def double_middle_items(l):
        if len(l) &lt; 2:
            raise ValueError("there must be at least two items in l")

        result = [l[0]]
        for item in l[1:-1]:
            result.append(item)
            result.append(item)
        result.append(l[-1])
        return result

&gt;&gt;&gt; double_middle_items([1,2,3,4,5])
[1, 2, 2, 3, 3, 4, 4, 5]
</snippet></ROW><ROW><id>10445842</id><snippet>&gt;&gt;&gt; [double_middle_items(l) for l in list_of_lists]
</snippet></ROW><ROW><id>10446010</id><snippet>a in Foo</snippet></ROW><ROW><id>10446010</id><snippet>__contains__</snippet></ROW><ROW><id>10446010</id><snippet>Foo</snippet></ROW><ROW><id>10446010</id><snippet>__contains__</snippet></ROW><ROW><id>10446010</id><snippet>Foo</snippet></ROW><ROW><id>10446010</id><snippet>Foo</snippet></ROW><ROW><id>10446010</id><snippet>type</snippet></ROW><ROW><id>10446010</id><snippet>__contains__</snippet></ROW><ROW><id>10446010</id><snippet>&gt;&gt;&gt; class Empty: pass
... 
&gt;&gt;&gt; x = Empty()
&gt;&gt;&gt; x.__contains__ = lambda: True
&gt;&gt;&gt; 1 in x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: argument of type 'Empty' is not iterable
</snippet></ROW><ROW><id>10446010</id><snippet>Foo</snippet></ROW><ROW><id>10446010</id><snippet>__contains__</snippet></ROW><ROW><id>10446010</id><snippet>class MetaEnum(type):
    def __contains__(cls, x):
            return x in range(cls.k)
</snippet></ROW><ROW><id>10446010</id><snippet>class BaseEnum(metaclass=MetaEnum):
    pass

class MyEnum(BaseEnum):
    k = 3

print(1 in MyEnum) # True
</snippet></ROW><ROW><id>10446202</id><snippet>__dict__</snippet></ROW><ROW><id>10446202</id><snippet>__class__</snippet></ROW><ROW><id>10446202</id><snippet>object.__dict__</snippet></ROW><ROW><id>10446202</id><snippet>object</snippet></ROW><ROW><id>10446531</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; [x + y for x, y in grouper(2,q)]
[3, 7]
</snippet></ROW><ROW><id>10446531</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>10446554</id><snippet>#!/bin/sh</snippet></ROW><ROW><id>10446999</id><snippet>[,]</snippet></ROW><ROW><id>10446999</id><snippet>[,\n]</snippet></ROW><ROW><id>10447012</id><snippet>ChoiceField()</snippet></ROW><ROW><id>10447012</id><snippet>topic</snippet></ROW><ROW><id>10447012</id><snippet>self.fields['topic'].queryset = Topic.objects.\
                filter(setting=event.setting)
</snippet></ROW><ROW><id>10447012</id><snippet>subtopic</snippet></ROW><ROW><id>10447012</id><snippet>self.fields['subtopic'].choices</snippet></ROW><ROW><id>10447040</id><snippet>&gt;&gt;&gt; b=[['1','2','3','4','5'],['11','12','13','14','15'],['6','7','8','9','10']]
&gt;&gt;&gt; sorted(int(j) for i in b for j in i)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</snippet></ROW><ROW><id>10447081</id><snippet>    from gevent import monkey as curious_george
    # Monkey-patch.
    curious_george.patch_all(thread=False, select=False)
</snippet></ROW><ROW><id>10447081</id><snippet>def patch_time():
    """Replace :func:`time.sleep` with :func:`gevent.sleep`."""
    from gevent.hub import sleep
    import time
    patch_item(time, 'sleep', sleep)
</snippet></ROW><ROW><id>10447816</id><snippet>else: continue</snippet></ROW><ROW><id>10447816</id><snippet>i</snippet></ROW><ROW><id>10447816</id><snippet>else:break</snippet></ROW><ROW><id>10447816</id><snippet>else</snippet></ROW><ROW><id>10447816</id><snippet>i</snippet></ROW><ROW><id>10447860</id><snippet>perl -pale '$F[3]=~s/[.,]/$F[2]/g;$_=join" ",@F' file
</snippet></ROW><ROW><id>10447948</id><snippet>del d[key]</snippet></ROW><ROW><id>10447948</id><snippet>d[key]</snippet></ROW><ROW><id>10447948</id><snippet>d.clear()</snippet></ROW><ROW><id>10447958</id><snippet>if need_more_workers():
    newcomm = get_new_comm(comm)
    # ...
</snippet></ROW><ROW><id>10447958</id><snippet>def filter_comm(comm, nworkitems, callback):
    if foo:
        callback(get_new_comm())

# ...

some_local_var = 5
def do_work_with_newcomm(newcomm):
    # we can access the local scope here

filter_comm(comm, nworkitems, do_work_with_newcomm)
</snippet></ROW><ROW><id>10448190</id><snippet>&gt;&gt;&gt; nums = [1,4,6,10]
&gt;&gt;&gt; [x-y for x,y in zip(nums[1:],nums)]
[3, 2, 4]
&gt;&gt;&gt; delta=[x-y for x,y in zip(nums[1:],nums)]
&gt;&gt;&gt; float(sum(delta))/len(delta)
3.0
</snippet></ROW><ROW><id>10448190</id><snippet>&gt;&gt;&gt; from itertools import starmap
&gt;&gt;&gt; from operator import sub
&gt;&gt;&gt; sum(starmap(sub,zip(nums[1:],nums)))/float(len(nums)-1)
3.0
</snippet></ROW><ROW><id>10448661</id><snippet>from bs4 import BeautifulSoup
import re
import urllib2,sys

url = "http://www.charityvillage.ca/cv/nonpr/nonpr1.html"
html = urllib2.urlopen(url).read()
soup = BeautifulSoup(html)

for item in soup.find_all(text=re.compile('\(.+: Ottawa', re.IGNORECASE)):
    link = item.find_previous_sibling(lambda tag: tag.has_key('href'))
    if link is None:
        continue
    print(u'{} [{}]: {}'.format(link.text,
                               item.strip(),
                               link['href']).encode('utf8'))
</snippet></ROW><ROW><id>10448796</id><snippet>utils.py</snippet></ROW><ROW><id>10448796</id><snippet>common</snippet></ROW><ROW><id>10449393</id><snippet>subprocess</snippet></ROW><ROW><id>10449393</id><snippet># lol.py
import subprocess
p = subprocess.Popen(['cat'])
p.wait()

$ python lol.py
hello
hello
catting
catting
</snippet></ROW><ROW><id>10449393</id><snippet>stdout</snippet></ROW><ROW><id>10449393</id><snippet># lol.py
import subprocess

p = subprocess.Popen(['cat'], stdout=subprocess.PIPE)
p.wait()

print "\n\nOutput was:"
print p.stdout.read()

$ python lol.py
hello
catting

^D

Output was:
hello
catting
</snippet></ROW><ROW><id>10449574</id><snippet>struct</snippet></ROW><ROW><id>10450031</id><snippet>ImportError: ... No module named exceptions
</snippet></ROW><ROW><id>10450031</id><snippet>exceptions</snippet></ROW><ROW><id>10450031</id><snippet>from scrapy.core.exceptions import DropItem
</snippet></ROW><ROW><id>10450031</id><snippet>from scrapy.exceptions import DropItem
</snippet></ROW><ROW><id>10450031</id><snippet>scrapy.core.exceptions</snippet></ROW><ROW><id>10450110</id><snippet>twisted.web.resource.NoResource</snippet></ROW><ROW><id>10450110</id><snippet>twisted.web.resource.Forbidden</snippet></ROW><ROW><id>10450110</id><snippet>NotFound</snippet></ROW><ROW><id>10450475</id><snippet>mysqldb.connect</snippet></ROW><ROW><id>10450475</id><snippet>try:
    conn1 = mysqldb.connect(...)
    conn2 = mysqldb.connect(...)
    ...
except:  # add specific exception here
    ...  # support failure when connecting
</snippet></ROW><ROW><id>10450523</id><snippet>zipfile</snippet></ROW><ROW><id>10450523</id><snippet>ZipFile.writestr()</snippet></ROW><ROW><id>10450523</id><snippet>zlib</snippet></ROW><ROW><id>10450525</id><snippet>urllib.quote("'N@sty!!`` string,!!))'",safe=" ,.").replace('%','=')
'=27N=40sty=21=21=60=60 string,=21=21=29=29=27'
</snippet></ROW><ROW><id>10451017</id><snippet>Scripts/activate</snippet></ROW><ROW><id>10451017</id><snippet>. Scripts/activate</snippet></ROW><ROW><id>10451017</id><snippet>source Scripts/activate</snippet></ROW><ROW><id>10451017</id><snippet>Scripts/activate.bat</snippet></ROW><ROW><id>10451017</id><snippet>cmd.exe</snippet></ROW><ROW><id>10451047</id><snippet>import urllib2
proxy = urllib2.ProxyHandler({'http': 'yourproxy.com'})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)
urllib2.urlopen('http://www.google.com')
</snippet></ROW><ROW><id>10451148</id><snippet>&lt;scipy.integrate_odepack.odeint&gt;</snippet></ROW><ROW><id>10451148</id><snippet>dx_dv</snippet></ROW><ROW><id>10451148</id><snippet>dx_du</snippet></ROW><ROW><id>10451148</id><snippet>calling overhead * number of calls</snippet></ROW><ROW><id>10451551</id><snippet>opts</snippet></ROW><ROW><id>10451551</id><snippet>opts.dpath</snippet></ROW><ROW><id>10451551</id><snippet>myfunc(opts.dpath)</snippet></ROW><ROW><id>10451551</id><snippet>for ids in os.listdir(opts.dpath)</snippet></ROW><ROW><id>10451839</id><snippet>raw_input()</snippet></ROW><ROW><id>10451839</id><snippet>print name + "'s phone number is: " + friends[name]['phone']
</snippet></ROW><ROW><id>10451839</id><snippet>print "%s's phone number is: %s" % (name, friends[name]['phone'])
</snippet></ROW><ROW><id>10451839</id><snippet>if</snippet></ROW><ROW><id>10451839</id><snippet>if name in friends: 
    print "%s's phone number is: %s" % (name, friends[name]['phone'])
else: 
    print 'no data'
</snippet></ROW><ROW><id>10451947</id><snippet>gs</snippet></ROW><ROW><id>10451947</id><snippet>2&gt;&amp;1</snippet></ROW><ROW><id>10451947</id><snippet>gs -q -dBATCH -dNOPAUSE -sDEVICE=bbox input.pdf '2&gt;&amp;1' 
</snippet></ROW><ROW><id>10451947</id><snippet>subprocess.call("gs -q -dBATCH -dNOPAUSE -sDEVICE=bbox input.pdf 2&gt;&amp;1",shell=True)
</snippet></ROW><ROW><id>10451947</id><snippet>import sys
subprocess.call(["gs", "-q", "-dBATCH", "-dNOPAUSE", "-sDEVICE=bbox", "input.pdf"],stderr=sys.stdout)
</snippet></ROW><ROW><id>10451947</id><snippet>shell=True</snippet></ROW><ROW><id>10451982</id><snippet>Context</snippet></ROW><ROW><id>10451982</id><snippet>view</snippet></ROW><ROW><id>10451982</id><snippet>settings.py</snippet></ROW><ROW><id>10451982</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10451982</id><snippet>{%expr%}</snippet></ROW><ROW><id>10451982</id><snippet>{{foo.something}}</snippet></ROW><ROW><id>10452333</id><snippet>import matplotlib.pyplot as plt, numpy as np, numpy.random, scipy

#histogram definition
xyrange = [[-5,5],[-5,5]] # data range
bins = [100,100] # number of bins
thresh = 3  #density threshold

#data definition
N = 1e5;
xdat, ydat = np.random.normal(size=N), np.random.normal(1, 0.6, size=N)

# histogram the data
hh, locx, locy = scipy.histogram2d(xdat, ydat, range=xyrange, bins=bins)
posx = np.digitize(xdat, locx)
posy = np.digitize(ydat, locy)

#select points within the histogram
ind = (posx &gt; 0) &amp; (posx &lt;= bins[0]) &amp; (posy &gt; 0) &amp; (posy &lt;= bins[1])
hhsub = hh[posx[ind] - 1, posy[ind] - 1] # values of the histogram where the points are
xdat1 = xdat[ind][hhsub &lt; thresh] # low density points
ydat1 = ydat[ind][hhsub &lt; thresh]
hh[hh &lt; thresh] = np.nan # fill the areas with low density by NaNs

plt.imshow(np.flipud(hh.T),cmap='jet',extent=np.array(xyrange).flatten(), interpolation='none')
plt.colorbar()   
plt.plot(xdat1, ydat1, '.')
plt.show()
</snippet></ROW><ROW><id>10452415</id><snippet>tok = name.split()</snippet></ROW><ROW><id>10452415</id><snippet>name</snippet></ROW><ROW><id>10452415</id><snippet>'John address'</snippet></ROW><ROW><id>10452415</id><snippet>['John', 'address']</snippet></ROW><ROW><id>10452415</id><snippet>tok[0]</snippet></ROW><ROW><id>10452415</id><snippet>tok[1]</snippet></ROW><ROW><id>10452415</id><snippet>friends</snippet></ROW><ROW><id>10452415</id><snippet>while</snippet></ROW><ROW><id>10452819</id><snippet>x.append(lambda : pv(v))</snippet></ROW><ROW><id>10452819</id><snippet>x.append(lambda v=v: pv(v))</snippet></ROW><ROW><id>10452819</id><snippet>x = "before foo defined"
def foo():
    print x
x = "after foo was defined"
foo()
</snippet></ROW><ROW><id>10452819</id><snippet>after foo was defined
</snippet></ROW><ROW><id>10453002</id><snippet>from itertools import izip_longest 
# http://docs.python.org/library/itertools.html#itertools.izip_longest

# get a list of open readers using a list comprehension
readers = [csv.reader(open(fname, "r")) for fname in list_of_filenames]

# open writer
output_csv = csv.writer(...)

for bunch_of_lines in izip_longest(*readers, fillvalue=['', '', '', '']):
  # Here bunch_of_lines is a tuple of lines read from each reader,
  # e.g. all first lines, all second lines, etc
  # When one file is past EOF but others aren't, you get fillvalue for its line.
  merged_row = []
  for line in bunch_of_lines:
      # if it's a real line, you have 4 items of data.
      # if the file is past EOF, the line is fillvalue from above
      #   which again is guaranteed to have 4 items of data, all empty strings.
      merged_row.extend([line[1], line[3]]) # put columns 1 and 3
  output_csv.writerow(merged_row)
</snippet></ROW><ROW><id>10453002</id><snippet>range()</snippet></ROW><ROW><id>10453002</id><snippet>for</snippet></ROW><ROW><id>10453002</id><snippet>for</snippet></ROW><ROW><id>10453002</id><snippet>foreach</snippet></ROW><ROW><id>10453347</id><snippet>class mydeque(object):

  def __init__(self):
    self.left = []
    self.right = []

  def pushleft(self, v):
    self.left.append(v)

  def pushright(self, v):
    self.right.append(v)

  def popleft(self):
    if not self.left:
      self.__fill_left()
    return self.left.pop()

  def popright(self):
    if not self.right:
      self.__fill_right()
    return self.right.pop()

  def __len__(self):
    return len(self.left) + len(self.right)

  def __getitem__(self, i):
    if i &gt;= len(self.left):
      return self.right[i-len(self.left)]
    else:
      return self.left[-(i+1)]

  def __fill_right(self):
    x = len(self.left)//2
    self.right.extend(self.left[0:x])
    self.right.reverse()
    del self.left[0:x]

  def __fill_left(self):
    x = len(self.right)//2
    self.left.extend(self.right[0:x])
    self.left.reverse()
    del self.right[0:x]
</snippet></ROW><ROW><id>10453348</id><snippet>__cmp__</snippet></ROW><ROW><id>10453348</id><snippet>__eq__</snippet></ROW><ROW><id>10453348</id><snippet>object</snippet></ROW><ROW><id>10453348</id><snippet>a &gt; b</snippet></ROW><ROW><id>10453348</id><snippet>id(a) &gt; id(b)</snippet></ROW><ROW><id>10453348</id><snippet>is</snippet></ROW><ROW><id>10453348</id><snippet>==</snippet></ROW><ROW><id>10453348</id><snippet>__cmp__</snippet></ROW><ROW><id>10453348</id><snippet>__eq__</snippet></ROW><ROW><id>10453348</id><snippet>__hash__</snippet></ROW><ROW><id>10453348</id><snippet>__hash__</snippet></ROW><ROW><id>10453348</id><snippet>object</snippet></ROW><ROW><id>10453348</id><snippet>copy</snippet></ROW><ROW><id>10453348</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>10453348</id><snippet>__copy__</snippet></ROW><ROW><id>10453348</id><snippet>__deepcopy__</snippet></ROW><ROW><id>10453348</id><snippet>copy</snippet></ROW><ROW><id>10453348</id><snippet>deepcopy</snippet></ROW><ROW><id>10453348</id><snippet>deepcopy</snippet></ROW><ROW><id>10453615</id><snippet>def remove_keys_with_none_values(item):
    if not hasattr(item, 'items'):
        return item
    else:
        return {key: remove_nones(value) for key, value in item.items() if value is not None}
</snippet></ROW><ROW><id>10453615</id><snippet>dict</snippet></ROW><ROW><id>10453615</id><snippet>iteritems()</snippet></ROW><ROW><id>10453615</id><snippet>items()</snippet></ROW><ROW><id>10453861</id><snippet>ax.grid(True, which='both')</snippet></ROW><ROW><id>10453861</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot([1,2,3,14],'ro-')

# set your ticks manually
ax.xaxis.set_ticks([1.,2.,3.,10.])
ax.grid(True)

plt.show()
</snippet></ROW><ROW><id>10454046</id><snippet>startService</snippet></ROW><ROW><id>10454046</id><snippet>stopService</snippet></ROW><ROW><id>10454093</id><snippet>server</snippet></ROW><ROW><id>10454093</id><snippet>configurebot()</snippet></ROW><ROW><id>10454093</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-


with open('bot.conf', 'r') as bot_conf:
    config_bot = bot_conf.readlines()
bot_conf.close()

with open('tweets.conf', 'r') as tweets_conf:
    config_tweets = tweets_conf.readlines()
tweets_conf.close()

def configurebot():
    for line in config_bot:
        line = line.rstrip().split(':')
    if (line[0]=="HOST"):
        print "Working If Condition"
        print line
        return line[1]


print configurebot()
</snippet></ROW><ROW><id>10454093</id><snippet>server = None
configurebot()
print server
</snippet></ROW><ROW><id>10454406</id><snippet>functools.partial</snippet></ROW><ROW><id>10454406</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def foo(x, y):
...     print x+y
... 
&gt;&gt;&gt; partial(foo, y=3)
&lt;functools.partial object at 0xb7209f54&gt;
&gt;&gt;&gt; f = partial(foo, y=3)
&gt;&gt;&gt; f(2)
5
</snippet></ROW><ROW><id>10454406</id><snippet>def function(x, y):
     pass # ...
r.sub(functools.partial(function, y=arg),string)
</snippet></ROW><ROW><id>10454406</id><snippet>&gt;&gt;&gt; s = "the quick brown fox jumps over the lazy dog"
&gt;&gt;&gt; def capitalize_long(match, length):
...     word = match.group(0)
...     return word.capitalize() if len(word) &gt; length else word
... 
&gt;&gt;&gt; r = re.compile('\w+')
&gt;&gt;&gt; r.sub(partial(capitalize_long, length=3), s)
'the Quick Brown fox Jumps Over the Lazy dog'
</snippet></ROW><ROW><id>10454677</id><snippet>result = commands.getoutput('diff a.txt b.txt')
if len(result) == 0:
   print 'Success'
</snippet></ROW><ROW><id>10454887</id><snippet>def removeNumerics(s):
  return ' '.join([term for term in s.split() if not term[0].isdigit()])
</snippet></ROW><ROW><id>10454887</id><snippet>&gt;&gt;&gt; removeNumerics('21st amendment')
'amendment'
&gt;&gt;&gt; removeNumerics('durham 28x23')
'durham'
</snippet></ROW><ROW><id>10455063</id><snippet>bar.py</snippet></ROW><ROW><id>10455063</id><snippet>Popen</snippet></ROW><ROW><id>10455063</id><snippet>exec &lt;pipe1 &gt;pipe2</snippet></ROW><ROW><id>10455063</id><snippet>tee</snippet></ROW><ROW><id>10455063</id><snippet>bar.py</snippet></ROW><ROW><id>10455063</id><snippet>foo.py</snippet></ROW><ROW><id>10455063</id><snippet>screen</snippet></ROW><ROW><id>10455063</id><snippet>tmux</snippet></ROW><ROW><id>10455063</id><snippet>python bar.py</snippet></ROW><ROW><id>10455169</id><snippet>for tag in soupan.findAll('a')[:10]:
</snippet></ROW><ROW><id>10455260</id><snippet>br.open(URL)
res = mechanize._form.ParseString(FORM_HTML, BASE_URL)
br.form = res[1]
#continue as if the form was on the page and selected with .select_form()
br['username'] = 'foo'
br['password'] = 'bar'
br.submit()
</snippet></ROW><ROW><id>10455260</id><snippet>URL</snippet></ROW><ROW><id>10455260</id><snippet>BASE_URL</snippet></ROW><ROW><id>10455260</id><snippet>FORM_HTML</snippet></ROW><ROW><id>10455260</id><snippet>form</snippet></ROW><ROW><id>10455260</id><snippet>&lt;form method='post' action='/login.aspx'&gt;
    &lt;input type='text' name='username'&gt;
    &lt;input type='text' name='password'&gt;
    &lt;input type='hidden' name='important_js_thing' value='processed_with_python TM'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10455260</id><snippet>mechanize._form.ParseString</snippet></ROW><ROW><id>10455260</id><snippet>GET</snippet></ROW><ROW><id>10455260</id><snippet>FORM_HTML</snippet></ROW><ROW><id>10455320</id><snippet>browser.execute_script("return globalVar;")
</snippet></ROW><ROW><id>10455412</id><snippet>"""</snippet></ROW><ROW><id>10455412</id><snippet>#set style data boxes"""
</snippet></ROW><ROW><id>10455412</id><snippet>set</snippet></ROW><ROW><id>10455412</id><snippet>set</snippet></ROW><ROW><id>10455412</id><snippet>plot.script</snippet></ROW><ROW><id>10455412</id><snippet>#!/usr/bin/gnuplot
reset
set terminal postscript 
#cd publienhanced color
set output "roamingresult.ps"
set xlabel "time (seconds)"
set xrange [0:900]
set xtics (0, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900)
set ylabel "AP1         AP2         AP3       AP4"
set yrange [0:5]
set nokey
set grid
set noclip one
set ytics 1
#set style data boxes
set style line 1 lt 1 lc 1 lw 3
set style line 2 lt 1 lc 2 lw 3
set style line 3 lt 1 lc 3 lw 3
set style line 4 lt 1 lc 4 lw 3
</snippet></ROW><ROW><id>10455412</id><snippet>plot_script = open("plot.script", "r").read()
</snippet></ROW><ROW><id>10455412</id><snippet>plot_script</snippet></ROW><ROW><id>10455523</id><snippet>&gt;&gt;&gt; print '%.4f' % (2.2352341234)
2.2352
</snippet></ROW><ROW><id>10455523</id><snippet>%.4f</snippet></ROW><ROW><id>10455636</id><snippet>date</snippet></ROW><ROW><id>10455751</id><snippet>import shutil

def recwrite(filelist):
    if len(filelist) &gt; 0:
        shutil.copyfile(filelist[0], "input.txt")
        recwrite(filelist[1:])
</snippet></ROW><ROW><id>10455751</id><snippet>import shutil

filelist = ["input1.txt","input2.txt","input3.txt"]
for filename in filelist:
    shutil.copyfile(filename,"input.txt")
</snippet></ROW><ROW><id>10455964</id><snippet>import re
line = "hello [delete this] there!"
line = re.sub(
              r"""(?x)  # Verbose regex:
              \[        # Match a [
              [^][]*    # Match zero or more (*) characters except (^) ] or [
              \]        # Match a ]""", 
              "", line)
</snippet></ROW><ROW><id>10455964</id><snippet>line == 'hello  there!'
</snippet></ROW><ROW><id>10455992</id><snippet>data = [0x1, 0x4, 0x5, 0xFF, 0x12]

new_data = ['%02X' %i for i in data]
print ''.join(new_data)
</snippet></ROW><ROW><id>10455992</id><snippet>010405FF12
</snippet></ROW><ROW><id>10455992</id><snippet>new_data = ('%02X' %i for i in data)
print ''.join(new_data)
</snippet></ROW><ROW><id>10456001</id><snippet>    for col in columns:
        # Create a new dictionary with field names as the key, 
        # row data as the value.
        #
        # Then add this dictionary to the new_list
        row_dict[col] = row[columns.index(col)]
</snippet></ROW><ROW><id>10456001</id><snippet>index</snippet></ROW><ROW><id>10456001</id><snippet>enumerate</snippet></ROW><ROW><id>10456001</id><snippet>    for i, col in enumerate(columns):
        # Create a new dictionary with field names as the key, 
        # row data as the value.
        #
        # Then add this dictionary to the new_list
        row_dict[col] = row[i]
</snippet></ROW><ROW><id>10456001</id><snippet>def rows_to_dict_list(cursor):
    columns = [i[0] for i in cursor.description]
    return [dict(zip(columns, row)) for row in cursor]
</snippet></ROW><ROW><id>10456138</id><snippet>json_file['document']['0']['itemDetails']</snippet></ROW><ROW><id>10456138</id><snippet>json_file['document']['1']['itemDetails']</snippet></ROW><ROW><id>10456138</id><snippet>item_details = {}
for key, value in json_file['document']:
    item_details[key] = value['itemDetails']
</snippet></ROW><ROW><id>10456138</id><snippet>item_details = {k: v['itemDetails'] for k, v in json_file['document']}</snippet></ROW><ROW><id>10456138</id><snippet>item_details['0']</snippet></ROW><ROW><id>10456138</id><snippet>item_details['1']</snippet></ROW><ROW><id>10456138</id><snippet>int(key)</snippet></ROW><ROW><id>10456138</id><snippet>int(k)</snippet></ROW><ROW><id>10456138</id><snippet>if 'itemDetails' in json_file['document']:
    item_details = {'0': json_file['document']['itemDetails']}
else:
    item_details = {k: v['itemDetails'] for k, v in json_file['document'] if k != 'other'}
</snippet></ROW><ROW><id>10456138</id><snippet>item_details</snippet></ROW><ROW><id>10456181</id><snippet>Intersection</snippet></ROW><ROW><id>10456181</id><snippet>Intersection</snippet></ROW><ROW><id>10456217</id><snippet>DELIMITER</snippet></ROW><ROW><id>10456217</id><snippet>&gt;&gt;&gt; from sqlalchemy import *
&gt;&gt;&gt; 
&gt;&gt;&gt; trigger_text = """
... CREATE TRIGGER set_rank BEFORE INSERT ON authors
... FOR EACH ROW BEGIN
...     IF NEW.rank = 0 THEN
...         SET NEW.rank = (SELECT IFNULL(MAX(a.rank),0) + 1
...                         FROM authors AS a
...                         WHERE a.id = NEW.pub_id);
...     END IF;
... END
... """
&gt;&gt;&gt; 
&gt;&gt;&gt; metadata = MetaData()
&gt;&gt;&gt; authors = Table("authors", metadata,
...     Column("id", Integer, primary_key=True),
...     Column("rank", Integer),
...     Column("pub_id", Integer))
&gt;&gt;&gt; 
&gt;&gt;&gt; engine = create_engine("mysql://root@127.0.0.1/test", echo=True)
&gt;&gt;&gt; authors.create(engine)
2012-05-04 17:11:41,093 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE authors (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    rank INTEGER, 
    pub_id INTEGER, 
    PRIMARY KEY (id)
)


2012-05-04 17:11:41,093 INFO sqlalchemy.engine.base.Engine ()
2012-05-04 17:10:51,376 INFO sqlalchemy.engine.base.Engine COMMIT
&gt;&gt;&gt; engine.execute(trigger_text)
2012-05-04 17:11:41,159 INFO sqlalchemy.engine.base.Engine 
CREATE TRIGGER set_rank BEFORE INSERT ON authors
FOR EACH ROW BEGIN
    IF NEW.rank = 0 THEN
        SET NEW.rank = (SELECT IFNULL(MAX(a.rank),0) + 1
                        FROM authors AS a
                        WHERE a.id = NEW.pub_id);
    END IF;
END

2012-05-04 17:11:41,159 INFO sqlalchemy.engine.base.Engine ()
2012-05-04 17:11:41,312 INFO sqlalchemy.engine.base.Engine COMMIT
&lt;sqlalchemy.engine.base.ResultProxy object at 0x2be1ed0&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10456341</id><snippet>,</snippet></ROW><ROW><id>10456341</id><snippet>\n</snippet></ROW><ROW><id>10456341</id><snippet>rstrip()</snippet></ROW><ROW><id>10456372</id><snippet>scatter</snippet></ROW><ROW><id>10456372</id><snippet>plot</snippet></ROW><ROW><id>10456372</id><snippet>scatter(x, y, c='r')</snippet></ROW><ROW><id>10456372</id><snippet>scatter</snippet></ROW><ROW><id>10456372</id><snippet>from matplotlib import pyplot as plt

x = [1,2,3,4,5,6]
y = [2,4,6,3,1,5]

plt.scatter(x, y, c='r')
plt.show()
</snippet></ROW><ROW><id>10456435</id><snippet>ax.bar()</snippet></ROW><ROW><id>10456435</id><snippet>import matplotlib.pyplot as plt
from random import randint 
from time import time 

DATA = [
    (i, randint(5,30), randint(5,30), randint(30,35), randint(1,5)) \
    for i in xrange(1, 401)
]

def mapValues(group):
    ind, open_, close, high, low = group
    if open_ &gt; close: # if open is higher then close
        height = open_ - close # heigth is drawn at bottom+height
        bottom = close
        yerr = (open_ - low, high - open_)
        color = 'r' # plot as a white barr
    else:
        height = close - open_ # heigth is drawn at bottom+height
        bottom = open_
        yerr = (close - low, high - close)
        color = 'g' # plot as a black bar

    return (ind, height, bottom, yerr, color)

#
# Test 1
#
def test1():
    fig = plt.figure()
    ax = fig.add_subplot(111)

    data = map(mapValues, DATA)

    start = time()

    for group in data: 

        ind, height, bottom, yerr, color = group

        ax.bar(left=ind, height=height, bottom=bottom, yerr=zip(yerr), 
                color=color, ecolor='k', zorder=10,
                error_kw={'barsabove': False, 'zorder': 0, 'capsize': 0}, 
                alpha=1)

    return time()-start

#
# Test 2
#
def test2():
    fig = plt.figure()
    ax = fig.add_subplot(111)

    # plotData can be serialized
    plotData = zip(*map(mapValues, DATA))

    ind, height, bottom, yerr, color = plotData

    start = time()

    ax.bar(left=ind, height=height, bottom=bottom, yerr=zip(*yerr), 
            color=color, ecolor='k', zorder=10,
            error_kw={'barsabove': False, 'zorder': 0, 'capsize': 0}, 
            alpha=1)

    return time()-start


def doTest(fn):
    end = fn()
    print "%s - Sec: %0.3f, ms: %0d" % (fn.__name__, end, end*1000)



if __name__ == "__main__":
    doTest(test1)
    doTest(test2)

    # plt.show()
</snippet></ROW><ROW><id>10456435</id><snippet>python plot.py 
test1 - Sec: 1.592, ms: 1592
test2 - Sec: 0.358, ms: 357
</snippet></ROW><ROW><id>10456448</id><snippet>Dispatcher</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Handler</snippet></ROW><ROW><id>10456448</id><snippet>Dispatcher</snippet></ROW><ROW><id>10456448</id><snippet>threading.Thread</snippet></ROW><ROW><id>10456448</id><snippet>abstractmethod</snippet></ROW><ROW><id>10456632</id><snippet>class DBConnection(object):
    def __init__(self, db_host=DB_HOST, db_port=DB_PORT, db_user=DB_USER, db_password=DB_PASSWORD, db_name=DB_NAME):
        self.host = db_host    # lower case!
        self.port = db_port
        self.name = db_name
        self.user = db_user
        self.password = db_password
</snippet></ROW><ROW><id>10456632</id><snippet>class WebDriver(object):
    def __init__(self, download_folder=DOWNLOAD_FOLDER, **kwargs):
        self.driver = False
        self.download_folder = download_folder
        self.last_payment = None
        self.DBConnection = DBConnection(**kwargs)
        self.DBConnection.get_conn()
        self.DBConnection.get_cursor()
</snippet></ROW><ROW><id>10456700</id><snippet>from ctypes import CDLL, c_char_p, c_int, c_long, c_ushort, c_byte, c_char, Structure, POINTER, byref, cast, sizeof, get_errno
from ctypes.util import find_library

class c_dir(Structure):
    """Opaque type for directory entries, corresponds to struct DIR"""
    pass

class c_dirent(Structure):
    """Directory entry"""
    # FIXME not sure these are the exactly correct types!
    _fields_ = (
        ('d_ino', c_long), # inode number
        ('d_off', c_long), # offset to the next dirent
        ('d_reclen', c_ushort), # length of this record
        ('d_type', c_byte), # type of file; not supported by all file system types
        ('d_name', c_char * 4096) # filename
        )
c_dirent_p = POINTER(c_dirent)
c_dirent_pp = POINTER(c_dirent_p)
c_dir_p = POINTER(c_dir)

c_lib = CDLL(find_library("c"))
opendir = c_lib.opendir
opendir.argtypes = [c_char_p]
opendir.restype = c_dir_p

readdir_r = c_lib.readdir_r
readdir_r.argtypes = [c_dir_p, c_dirent_p, c_dirent_pp]
readdir_r.restype = c_int

closedir = c_lib.closedir
closedir.argtypes = [c_dir_p]
closedir.restype = c_int

import errno

def listdirx(path):
    """
    A generator to return the names of files in the directory passed in
    """
    dir_p = opendir(path)

    if not dir_p:
        raise IOError()

    entry_p = cast(c_lib.malloc(sizeof(c_dirent)), c_dirent_p)

    try:
        while True:
            res = readdir_r(dir_p, entry_p, byref(entry_p))
            if res:
                raise IOError()
            if not entry_p:
                break
            name = entry_p.contents.d_name
            if name not in (".", ".."):
                yield name
    finally:
        if dir_p:
            closedir(dir_p)
        if entry_p:
            c_lib.free(entry_p)

if __name__ == '__main__':
    import sys
    path = sys.argv[1]
    max_per_dir = int(sys.argv[2])
    for idx, entry in enumerate(listdirx(path)):
        if idx &gt;= max_per_dir:
            break
        print entry
</snippet></ROW><ROW><id>10456793</id><snippet>x.foo = 42</snippet></ROW><ROW><id>10456793</id><snippet>setattr(x, 'foo', 42)</snippet></ROW><ROW><id>10456980</id><snippet>  pylint main.py 

  ...

  Report
  ======
  145 statements analysed.
</snippet></ROW><ROW><id>10457050</id><snippet>deployment -&gt; flush casche -&gt; flush database</snippet></ROW><ROW><id>10457614</id><snippet>python ./serve.py 127.0.0.1 
</snippet></ROW><ROW><id>10457614</id><snippet>c:\work\web.py\test1&gt;python code.py 127.0.0.1
http://127.0.0.1:8080/
</snippet></ROW><ROW><id>10458034</id><snippet>modules</snippet></ROW><ROW><id>10458034</id><snippet>dates=['January 26, 1991', 'February 29, 2012', 'December 10, 2094']
def converter(x):
   x=x.split()
   dic={'January':'01','February':'02','March':'03','April':'04','May':'05','June':'06',
         'July':'07','August':'08','September':'09','October':'10','November':'11','December':'12'
        }
   month,day,year=dic[x[0]],x[1][:-1],x[2]
   if len(day)==1:
     day='0'+day

   return month+day+year

new_lis=[]

for x in dates:
   new_lis.append(converter(x))

print(new_lis)

['01261991', '02292012', '12102094']
</snippet></ROW><ROW><id>10458035</id><snippet>changespec = P4.fetch_change()
changespec[ "Description" ] = "placeholder"
P4.save_change( changespec )
</snippet></ROW><ROW><id>10458071</id><snippet>#!/usr/bin/python
friends = {'John' : {'phone' : '0401',
        'birthday' : '31 July',
        'address' : 'UK',
        'interests' : ['a', 'b', 'c']},
    'Harry' : {'phone' : '0402',
        'birthday' : '2 August',
        'address' : 'Hungary',
        'interests' : ['d', 'e', 'f']}}

response = ['']
error_message = "Sorry, I don't know about that. Please try again, or type 'exit' to leave the program: "

while response[0] != 'exit':
    response = raw_input("Please enter search criteria, or type 'exit' to exit the program: ").split()
    try:
        print "%s's %s is %s" % (response[0], response[1], friends[response[0]][response[1]])
    except KeyError:
        print error_message
    except IndexError:
        print error_message

print ('Thank you, good bye!')
</snippet></ROW><ROW><id>10458106</id><snippet>&gt;&gt;&gt; isinstance(u'hello', (basestring, str, unicode))
True
</snippet></ROW><ROW><id>10458106</id><snippet>&gt;&gt;&gt; help(isinstance)
Help on built-in function isinstance in module __builtin__:

isinstance(...)
    isinstance(object, class-or-type-or-tuple) -&gt; bool

    Return whether an object is an instance of a class or of a subclass thereof.
    With a type as second argument, return whether that is the object's type.
    The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
    isinstance(x, A) or isinstance(x, B) or ... (etc.).
</snippet></ROW><ROW><id>10458251</id><snippet>str</snippet></ROW><ROW><id>10458251</id><snippet>bytes</snippet></ROW><ROW><id>10458251</id><snippet>unicode</snippet></ROW><ROW><id>10458251</id><snippet>str</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetLength</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromString</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromStringAndSize</snippet></ROW><ROW><id>10458251</id><snippet>FromString</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromUnicode</snippet></ROW><ROW><id>10458251</id><snippet>unicode</snippet></ROW><ROW><id>10458251</id><snippet>str</snippet></ROW><ROW><id>10458251</id><snippet>bytes</snippet></ROW><ROW><id>10458251</id><snippet>PyString</snippet></ROW><ROW><id>10458251</id><snippet>PyBytes</snippet></ROW><ROW><id>10458251</id><snippet>GetCStringPtr</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetMaximumSizeForEncoding</snippet></ROW><ROW><id>10458251</id><snippet>strlen</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromStringAndSize</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetLength</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetCharactersPtr</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetCharacters</snippet></ROW><ROW><id>10458251</id><snippet>GetCharactersPtr</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromUnicode</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetBytes</snippet></ROW><ROW><id>10458251</id><snippet>PyUnicode_FromStringAndSize</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetBytes</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetCharacters{Ptr,}</snippet></ROW><ROW><id>10458251</id><snippet>CFStringGetBytes</snippet></ROW><ROW><id>10458364</id><snippet>import merge_in_memory as mim_module

str1 = """line 1
line 2"""
str2 = """line 1
line 2 changed"""

merger = mim_module.Merger()
print merger.diff_make(str1, str2)
</snippet></ROW><ROW><id>10458364</id><snippet>--- 
+++ 
@@ -1,2 +1,2 @@
 line 1
-line 2
+line 2 changed
</snippet></ROW><ROW><id>10458364</id><snippet>diff_apply_bulk()</snippet></ROW><ROW><id>10458364</id><snippet>reverse</snippet></ROW><ROW><id>10458364</id><snippet>diff_bulk()</snippet></ROW><ROW><id>10458364</id><snippet>diff_apply_bulk</snippet></ROW><ROW><id>10458364</id><snippet>merge = self.inline_merge.diff_apply_bulk(text3, [diff1, diff2], reverse=True)
</snippet></ROW><ROW><id>10458386</id><snippet>set_index</snippet></ROW><ROW><id>10458386</id><snippet>In : col = ['a','b','c']

In : data = DataFrame([[1,2,3],[10,11,12],[20,21,22]],columns=col)

In : data
Out:
    a   b   c
0   1   2   3
1  10  11  12
2  20  21  22

In : data2 = data.set_index('a')

In : data2
Out:
     b   c
a
1    2   3
10  11  12
20  21  22
</snippet></ROW><ROW><id>10458567</id><snippet>items()</snippet></ROW><ROW><id>10458567</id><snippet>iteritems()</snippet></ROW><ROW><id>10458567</id><snippet>items()</snippet></ROW><ROW><id>10458567</id><snippet>iteritems()</snippet></ROW><ROW><id>10458567</id><snippet>items()</snippet></ROW><ROW><id>10458567</id><snippet>iteritems()</snippet></ROW><ROW><id>10458588</id><snippet>with open("input.txt") as inf:
    try:
        while True:
            latin = inf.next().strip()
            gloss = inf.next().strip()
            trans = inf.next().strip()
            process(latin, gloss, trans)
            inf.next()    # skip blank line
    except StopIteration:
        # reached end of file
        pass
</snippet></ROW><ROW><id>10458588</id><snippet>process</snippet></ROW><ROW><id>10458588</id><snippet>latin</snippet></ROW><ROW><id>10458588</id><snippet>gloss</snippet></ROW><ROW><id>10458588</id><snippet>from itertools import chain

def chunk(s):
    """Split a string on whitespace or hyphens"""
    return chain(*(c.split("-") for c in s.split()))

def process(latin, gloss, trans):
    chunks = zip(chunk(latin), chunk(gloss))
</snippet></ROW><ROW><id>10458588</id><snippet>process(
    "Itali-am fat-o profug-us Lavini-a-que ven-it",
    "Italy-Fem:Sg:Acc fate-Neut:Sg:Abl fleeing-Masc:Sg:Nom Lavinian-Neut:Pl:Acc come:Perf-3-Sg:Indic:Act",
    "in flight [driven] by fate came to Italy and the Lavinian [shores]")
</snippet></ROW><ROW><id>10458588</id><snippet>chunks</snippet></ROW><ROW><id>10458588</id><snippet>[('Itali', 'Italy'),
 ('am', 'Fem:Sg:Acc'),
 ('fat', 'fate'),
 ('o', 'Neut:Sg:Abl'),
 ('profug', 'fleeing'),
 ('us', 'Masc:Sg:Nom'),
 ('Lavini', 'Lavinian'),
 ('a', 'Neut:Pl:Acc'),
 ('que', 'come:Perf'),
 ('ven', '3'),
 ('it', 'Sg:Indic:Act')]
</snippet></ROW><ROW><id>10458620</id><snippet>scripts</snippet></ROW><ROW><id>10458620</id><snippet>setup(...
    scripts=glob("bin/*"),
    data_files=[(os.path.join(sys.prefix, 'libexec', 'mypackage'), glob("libexec/*"))],
    ...
)
</snippet></ROW><ROW><id>10458620</id><snippet>--prefix</snippet></ROW><ROW><id>10458892</id><snippet>while i &lt; k:
  count.append(value[:])
  i=i+1
</snippet></ROW><ROW><id>10459308</id><snippet>def create_customer(cID, fname, sname, dob):
    db_curs.execute("CREATE TABLE `" + cID + "` ( id INTEGER PRIMARY KEY, first_name VARCHAR(20),last_name VARCHAR(30), date_of_birth DATE)")
    db_curs.execute("INSERT INTO `" + cID + "` (first_name, last_name, date_of_birth) VALUES (fname, sname, dob)")
    db_connection.commit()
    db_curs.execute("SELECT * FROM `" + cID  + "`")

# In SQL terms, the following blows up
# create table 2 (id int(10) PRIMARY KEY); Due to the 2 being an integer
# create table `2` (id int(10) PRIMARY KEY); Works, due to the 2 being properly identified with backticks :)

# Here's some code as requested in the comment, everything below this point is a self contained example, please do not copy the function above
def initiate_customer_table(table_name):
    db_curs.execute("CREATE TABLE IF NOT EXISTS `" + table_name + "` ( id INTEGER PRIMARY KEY, first_name VARCHAR(20),last_name VARCHAR(30), date_of_birth DATE)")
    db_connection.commit()       

def create_customer(table_name, fname, sname, dob):
    db_curs.execute("INSERT INTO `" + table_name + "` (first_name, last_name, date_of_birth) VALUES (%s, %s, %s)", [fname, sname, dob])
    db_connection.commit()

    # Fetches the user just created
    db_curs.execute("SELECT * FROM `" + table_name  + "` WHERE id = %s", [db_curs.insert_id()])

    # Returns the user
    return db_curs.fetchone()


desired_table_name = 'customers'

initiate_customer_table(desired_table_name)

customer_1 = create_customer(desired_table_name, "Bryan", "Moyles", "1800-01-01")
customer_2 = create_customer(desired_table_name, "Awesome", "Guy", "1800-01-01")
</snippet></ROW><ROW><id>10459348</id><snippet>tuple(a)
</snippet></ROW><ROW><id>10459348</id><snippet>tuple(list(a)+b)
</snippet></ROW><ROW><id>10459404</id><snippet>$PYTHON_ROOT/bin/twistd apnsd -c $APNSD_CONFIG
</snippet></ROW><ROW><id>10459404</id><snippet>$PYTHON_ROOT/bin/twistd -n apnsd -c $APNSD_CONFIG
</snippet></ROW><ROW><id>10459561</id><snippet>&gt;&gt;&gt; [(i, i+len(b)) for i in range(len(a)) if a[i:i+len(b)] == b]
[(3, 6)]
</snippet></ROW><ROW><id>10459561</id><snippet>&gt;&gt;&gt; indexes = []
&gt;&gt;&gt; for i in range(len(a)):
...    if a[i:i+len(b)] == b:
...        indexes.append((i, i+len(b)))
... 
&gt;&gt;&gt; indexes
[(3, 6)]
</snippet></ROW><ROW><id>10459566</id><snippet>import re

search_for = "This is an example string"
search_for_re = r"\b" + r"\s+".join(search_for.split()) + r"\b"
pattern = re.compile(search_for_re)
match = lambda s: pattern.match(s) is not None

s = "This is an example string"
print match(s), ":", repr(s)

s = "This is an \n example string"
print match(s), ":", repr(s)

s = "This is \n an unmatching string"
print match(s), ":", repr(s)
</snippet></ROW><ROW><id>10459566</id><snippet>True : 'This is an example string'
True : 'This is an \n example string'
False : 'This is \n an unmatching string'
</snippet></ROW><ROW><id>10459690</id><snippet>return lst.append([1,1])
</snippet></ROW><ROW><id>10459690</id><snippet>list.append()</snippet></ROW><ROW><id>10459690</id><snippet>None</snippet></ROW><ROW><id>10459690</id><snippet>lst.append([1,1])</snippet></ROW><ROW><id>10459690</id><snippet>[1,1]</snippet></ROW><ROW><id>10459690</id><snippet>lst</snippet></ROW><ROW><id>10459690</id><snippet>None</snippet></ROW><ROW><id>10460071</id><snippet>foo = bar,
</snippet></ROW><ROW><id>10460071</id><snippet>foo = (bar,)
</snippet></ROW><ROW><id>10460156</id><snippet>file1 = {}
for line in open('file1', 'r'):
    k, v = line.strip().split(':')
    file1[k] = v
</snippet></ROW><ROW><id>10460156</id><snippet>file1 = dict(l.strip().split(':') for l in open('file1', 'r'))
</snippet></ROW><ROW><id>10460156</id><snippet>result = {}
for key, value in file1.iteritems():
    if value in file2:
        result[key] = file2[value]
</snippet></ROW><ROW><id>10460156</id><snippet>foo:bar</snippet></ROW><ROW><id>10460156</id><snippet>{bar: foo}</snippet></ROW><ROW><id>10460156</id><snippet>for key in set(file1) &amp; set(file2):
    result[file1[key]] = file2[key]
</snippet></ROW><ROW><id>10460156</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>10460157</id><snippet>#!usr/bin/python</snippet></ROW><ROW><id>10460157</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>10460314</id><snippet>&gt;&gt;&gt; data = ['192', '168', '0', '1', '80', '192', '168', '0', '2', '8080']
&gt;&gt;&gt; ['{}.{}.{}.{}:{}'.format(*x) for x in zip(*[iter(data)]*5)]
['192.168.0.1:80', '192.168.0.2:8080']
</snippet></ROW><ROW><id>10460314</id><snippet>starmap</snippet></ROW><ROW><id>10460314</id><snippet>&gt;&gt;&gt; from itertools import starmap
&gt;&gt;&gt; list(starmap('{}.{}.{}.{}:{}'.format,zip(*[iter(data)]*5)))
['192.168.0.1:80', '192.168.0.2:8080']
</snippet></ROW><ROW><id>10460741</id><snippet>from module import Class
</snippet></ROW><ROW><id>10460741</id><snippet>import module

...

some_important_thing = module.some_important_thing

#Bottleneck loop
for item in items:
   #module.some_important_thing()
   some_important_thing()
</snippet></ROW><ROW><id>10460818</id><snippet>day</snippet></ROW><ROW><id>10460818</id><snippet>day.find('Sat')
</snippet></ROW><ROW><id>10460818</id><snippet>day</snippet></ROW><ROW><id>10460818</id><snippet>False</snippet></ROW><ROW><id>10460818</id><snippet>if day.find('Sat') &gt; -1:
    print('Sat')
</snippet></ROW><ROW><id>10460818</id><snippet>if day == 'Sat':
    print('Sat')
</snippet></ROW><ROW><id>10460901</id><snippet>bike</snippet></ROW><ROW><id>10460901</id><snippet>data = open("OWS.txt", 'r')
output = open("result.txt", 'w')

chunk = []
for line in data:
    chunk.append(line)
    if line[0] == 'W':
        if 'bike' in str(chunk):
            for line in chunk:
                output.write(line)
        chunk = []
</snippet></ROW><ROW><id>10460930</id><snippet>&gt;&gt;&gt; "malayalam"[::-1]
'malayalam'
&gt;&gt;&gt; "hello"[::-1]
'olleh'
</snippet></ROW><ROW><id>10460995</id><snippet>if (number is "1") or "0" or "2":
</snippet></ROW><ROW><id>10460995</id><snippet>True</snippet></ROW><ROW><id>10460995</id><snippet>True</snippet></ROW><ROW><id>10460995</id><snippet>if number in {"1", "0", "2"}:
</snippet></ROW><ROW><id>10460995</id><snippet>if number == "1" or number == "0" or number == "2":
</snippet></ROW><ROW><id>10460995</id><snippet>==</snippet></ROW><ROW><id>10460995</id><snippet>is</snippet></ROW><ROW><id>10460995</id><snippet>is</snippet></ROW><ROW><id>10460995</id><snippet>is</snippet></ROW><ROW><id>10460995</id><snippet>is True</snippet></ROW><ROW><id>10460995</id><snippet>is None</snippet></ROW><ROW><id>10460995</id><snippet>try:
   value = int(number)
except ValueError:
   value = None
if value is not None and 0 &lt;= value &lt;= 2:
    ...
</snippet></ROW><ROW><id>10460995</id><snippet>0 &lt;= value &lt;= 2</snippet></ROW><ROW><id>10460995</id><snippet>0 &lt;= value and value &lt;= 2</snippet></ROW><ROW><id>10461185</id><snippet>python3</snippet></ROW><ROW><id>10461185</id><snippet>$PATH</snippet></ROW><ROW><id>10461185</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10461185</id><snippet>script.py</snippet></ROW><ROW><id>10461185</id><snippet>#!/usr/bin/env python3
</snippet></ROW><ROW><id>10461185</id><snippet>#!/usr/bin/env python3.2
</snippet></ROW><ROW><id>10461185</id><snippet>#!/usr/bin/env python2
</snippet></ROW><ROW><id>10461185</id><snippet>#!/usr/bin/env python2.7
</snippet></ROW><ROW><id>10461856</id><snippet>background</snippet></ROW><ROW><id>10461856</id><snippet>screen</snippet></ROW><ROW><id>10461856</id><snippet>draw</snippet></ROW><ROW><id>10461856</id><snippet>Sprite</snippet></ROW><ROW><id>10461856</id><snippet>#Create a new `pygame.Surface`, and draw a circle on it, then set transparency:
circle = pygame.Surface((30,30))
circle = circle.convert()
pygame.draw.circle(circle, (171, 130, 255), (int(15),int(15)), 15, 0)
circle.set_colorkey(circle.get_at((0, 0)), pygame.RLEACCEL)
</snippet></ROW><ROW><id>10461856</id><snippet>asteroid</snippet></ROW><ROW><id>10461856</id><snippet>__init__</snippet></ROW><ROW><id>10461856</id><snippet>#Sets the asteroid image, and then the asteroids co-ords (these are in `rect`)
        self.image = circle
        self.rect = self.image.get_rect()
</snippet></ROW><ROW><id>10461856</id><snippet>def move(self):</snippet></ROW><ROW><id>10461856</id><snippet>        self.rect[0] = self.x
        self.rect[1] = self.y
</snippet></ROW><ROW><id>10461856</id><snippet>my_particles = []
</snippet></ROW><ROW><id>10461856</id><snippet>#This is a special pygame container class, it has a draw() method that tracks changed areas of the screen.
my_particles = pygame.sprite.RenderUpdates()
</snippet></ROW><ROW><id>10461856</id><snippet>my_particles.append(target)
</snippet></ROW><ROW><id>10461856</id><snippet>my_particles.add(target)
</snippet></ROW><ROW><id>10461856</id><snippet>while True:
    pygame.display.update()
    screen.blit(background, (0,0))
    MouseP = pygame.mouse.get_pos()
    frames = Clock.get_fps
    pygame.mouse.set_visible
    score = (pygame.time.get_ticks()/1000)
    print (score)
    print (MouseP)
    for target in my_particles:
        target.move()
        target.boundaries()
        target.display()
        pygame.display.update()
</snippet></ROW><ROW><id>10461856</id><snippet>#initial screen draw:
screen.blit(background, (0,0))
pygame.display.update()
while True:
    #remove previous drawn sprites and replaces with background:
    my_particles.clear(screen, background)
    MouseP = pygame.mouse.get_pos()
    frames = Clock.get_fps
    pygame.mouse.set_visible
    score = (pygame.time.get_ticks()/1000)
    print (score)
    print (MouseP)
    for target in my_particles:
        target.move()
        target.boundaries()
    #draws changed sprites to the screen:
    pygame.display.update(my_particles.draw(screen))
</snippet></ROW><ROW><id>10461856</id><snippet>display</snippet></ROW><ROW><id>10461916</id><snippet>x = {'both1':1, 'both2':2, 'only_x': 100 }
y = {'both1':10, 'both2': 20, 'only_y':200 }

print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) }
print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) &amp; set(y) }
print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) | set(y) }
</snippet></ROW><ROW><id>10461916</id><snippet>{'both2': 22, 'only_x': 100, 'both1': 11}
{'both2': 22, 'both1': 11}
{'only_y': 200, 'both2': 22, 'both1': 11, 'only_x': 100}
</snippet></ROW><ROW><id>10462066</id><snippet>from BeautifulSoup import BeautifulSoup
s = """
&lt;html&gt;
&lt;script&gt;
var pstr = "&lt;li&gt;&lt;font color='blue'&gt;1&lt;/font&gt;&lt;/li&gt;";
for(var lc=0;lc&lt;o.length;lc++){}
&lt;/script&gt;
&lt;/html&gt;
"""
p = BeautifulSoup(s)

print p.find('script').text
</snippet></ROW><ROW><id>10462066</id><snippet>var pstr = "&lt;li&gt;&lt;font color='blue'&gt;1&lt;/font&gt;&lt;/li&gt;";
for(var lc=0;lc&lt;o.length&gt;
</snippet></ROW><ROW><id>10462084</id><snippet>project/
  |__/source/
  |     |__/lib/
  |     |__/app/
  |__/deployment/  # code for your production deployment maybe
  |
  |__/docs/   
  |__/tests/
  |__README
  |__requirements.txt
</snippet></ROW><ROW><id>10462084</id><snippet>from source.lib.blah import foo
from source.app.baz import bar
</snippet></ROW><ROW><id>10462115</id><snippet>.png</snippet></ROW><ROW><id>10462145</id><snippet>while j!='stop'</snippet></ROW><ROW><id>10462145</id><snippet>    # don't initialize j here
    while i &lt;= N: #Stops, when we get N prime numbers - doesn't work!
        n = max(primes) + 1
        j = 1  #initialize it here
        while j != 'stop':
            if isPrimeNumber(n, out='short') == True:
                primes.append(n)
                i = i + 1
                j = 'stop' #Stops nested cycle, when reached 
                           #the first prime number
            else:
                n = n + 1
</snippet></ROW><ROW><id>10462426</id><snippet>export PYTHONPATH=&lt;bogus path here&gt;
</snippet></ROW><ROW><id>10462487</id><snippet>reindex</snippet></ROW><ROW><id>10462487</id><snippet>In [38]: df
Out[38]: 
            A         B         C
0 0 -1.725337  0.111493  0.178294
  1 -1.809003 -0.614219 -0.931909
  2  0.621427 -0.186233  0.254727
1 0 -1.322863  1.242415  1.375579
  1  0.249738 -1.280204  0.356491
  2 -0.743671  0.325841 -0.167772
2 0 -0.070937  0.401172 -1.790801
  1  1.433794  2.257198  1.848435
  2 -1.021557 -1.054363 -1.485536

In [39]: neworder = [1, 0, 2]

In [41]: newindex = sorted(df.index, key=lambda x: neworder.index(x[0]))

In [42]: newindex
Out[42]: 
[(1L, 0L),
 (1L, 1L),
 (1L, 2L),
 (0L, 0L),
 (0L, 1L),
 (0L, 2L),
 (2L, 0L),
 (2L, 1L),
 (2L, 2L)]

In [43]: df.reindex(newindex)
Out[43]: 
            A         B         C
1 0 -1.322863  1.242415  1.375579
  1  0.249738 -1.280204  0.356491
  2 -0.743671  0.325841 -0.167772
0 0 -1.725337  0.111493  0.178294
  1 -1.809003 -0.614219 -0.931909
  2  0.621427 -0.186233  0.254727
2 0 -0.070937  0.401172 -1.790801
  1  1.433794  2.257198  1.848435
  2 -1.021557 -1.054363 -1.485536
</snippet></ROW><ROW><id>10462734</id><snippet>{%   %}</snippet></ROW><ROW><id>10462734</id><snippet>{{   }}</snippet></ROW><ROW><id>10462734</id><snippet>from tornado import template

t = template.Template('''\
{% for user in users %} 
    {{ user['userName'] }} 
    {{ user['welcomeMessage'] }} 
{% end %}
''')

# create first user and append to a user list
users = []
user = { "userName" : "Alwin Doss",
        "welcomeMessage" : "Good evening are you enjoying kids dance"}
users.append(user)

# create and append second user
user = { "userName" : "John Smith",
        "welcomeMessage" : "Good evening, JS"}
users.append(user)

# render the template and output to console
print t.generate(users = users)
</snippet></ROW><ROW><id>10462734</id><snippet>Alwin Doss 
Good evening are you enjoying kids dance 

John Smith 
Good evening, JS 
</snippet></ROW><ROW><id>10462890</id><snippet>customers</snippet></ROW><ROW><id>10462890</id><snippet>fetchall()</snippet></ROW><ROW><id>10462890</id><snippet>import sqlite3
conn = sqlite3.connect('program.db')
curs = conn.cursor()
ro = curs.execute('select * from customers')
customers = ro.fetchall()
</snippet></ROW><ROW><id>10462890</id><snippet>WHERE</snippet></ROW><ROW><id>10462890</id><snippet>curs.rowcount</snippet></ROW><ROW><id>10462921</id><snippet>$ cd c:
$ cd mycode/python/
</snippet></ROW><ROW><id>10462921</id><snippet>$ chmod +x /cygdrive/c/mycode/python/foo.py
</snippet></ROW><ROW><id>10462921</id><snippet>#!/bin/python
</snippet></ROW><ROW><id>10462921</id><snippet>$ /cygdrive/c/mycode/python/foo.py
</snippet></ROW><ROW><id>10462921</id><snippet>./foo.py
</snippet></ROW><ROW><id>10462921</id><snippet>python /cygdrive/c/mycode/python/foo.py
</snippet></ROW><ROW><id>10462977</id><snippet>db_curs.execute("UPDATE database SET spend =`" + spend + "` WHERE cID="+ cID)
</snippet></ROW><ROW><id>10462995</id><snippet>nnod</snippet></ROW><ROW><id>10462995</id><snippet>coords = [ n['coordinates'] for n in meshnodearray ]
NODEcoo = np.array(coords)
</snippet></ROW><ROW><id>10462995</id><snippet>numpy.fromiter()</snippet></ROW><ROW><id>10463137</id><snippet>twisted</snippet></ROW><ROW><id>10463137</id><snippet>multiprocessing</snippet></ROW><ROW><id>10463137</id><snippet>threading</snippet></ROW><ROW><id>10463207</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>10463638</id><snippet>u = UserProfile.objects.get(user__username=username)
</snippet></ROW><ROW><id>10463638</id><snippet>.get()</snippet></ROW><ROW><id>10463638</id><snippet>DoesNotExist</snippet></ROW><ROW><id>10463638</id><snippet>def Userprofile(request, username):
    rc = context_instance=RequestContext(request)
    try:
      u = UserProfile.objects.get(user__username=username)
    except UserProfile.DoesNotExist:
      # maybe render an error page?? or an error message at least to the user
      # that the account doesn't exist for that username?
    return render_to_response("users/UserProfile.html",{'user':u},rc)
</snippet></ROW><ROW><id>10463661</id><snippet>ffmpeg -sameq -i normal.avi p_norma.avi</snippet></ROW><ROW><id>10463661</id><snippet>p_norma.avi</snippet></ROW><ROW><id>10463661</id><snippet>normal.avi</snippet></ROW><ROW><id>10463661</id><snippet>Selected video codec: [rawbgr8flip] vfm: raw (RAW BGR8)
</snippet></ROW><ROW><id>10463661</id><snippet>p_norma.avi</snippet></ROW><ROW><id>10463661</id><snippet>Selected video codec: [ffodivx] vfm: ffmpeg (FFmpeg MPEG-4)
</snippet></ROW><ROW><id>10463706</id><snippet>&gt;&gt;&gt; stats = {'a':   {'email1':4, 'email2':3}, 
...          'the': {'email1':2, 'email3':4},
...          'or':  {'email1':2, 'email3':1}}
&gt;&gt;&gt; chi = {'a': 7, 'the':6, 'or':3}
&gt;&gt;&gt; sorted(stats, key=chi.get)
['or', 'the', 'a']
</snippet></ROW><ROW><id>10463706</id><snippet>numpy</snippet></ROW><ROW><id>10463706</id><snippet>scipy</snippet></ROW><ROW><id>10463706</id><snippet>key</snippet></ROW><ROW><id>10463706</id><snippet>get</snippet></ROW><ROW><id>10463706</id><snippet>Counter</snippet></ROW><ROW><id>10463706</id><snippet>&gt;&gt;&gt; stats = {'a':   {'email1':4, 'email2':3}, 
...          'the': {'email1':2, 'email3':4},
...          'or':  {'email1':2, 'email3':1}}
&gt;&gt;&gt; wordlists = ([k] * sum(d.itervalues()) for k, d in stats.iteritems())
&gt;&gt;&gt; chi = collections.Counter(word for seq in wordlists for word in seq)
&gt;&gt;&gt; sorted(stats, key=chi.get)
['or', 'the', 'a']
&gt;&gt;&gt; sorted(stats, key=lambda x: chi[x] + 3)
['or', 'the', 'a']
&gt;&gt;&gt; sorted(stats, key=chi.get, reverse=True)
['a', 'the', 'or']
</snippet></ROW><ROW><id>10463706</id><snippet>&gt;&gt;&gt; sorted(stats.iteritems(), key=lambda x: chi[x[0]])
[('or', {'email3': 1, 'email1': 2}), 
 ('the', {'email3': 4, 'email1': 2}), 
 ('a', {'email2': 3, 'email1': 4})]
</snippet></ROW><ROW><id>10463706</id><snippet>&gt;&gt;&gt;&gt; sorted_keys = sorted(stats, key=chi.get)
&gt;&gt;&gt;&gt; [(k, stats[k]) for k in sorted_keys]
[('or', {'email3': 1, 'email1': 2}), ('the', {'email3': 4, 'email1': 2}), ('a', {'email2': 3, 'email1': 4})]
</snippet></ROW><ROW><id>10463706</id><snippet>chi</snippet></ROW><ROW><id>10463706</id><snippet>OrderedDict</snippet></ROW><ROW><id>10463706</id><snippet>&gt;&gt;&gt;&gt; collections.OrderedDict((k, stats[k]) for k in sorted_keys)
OrderedDict([('or', {'email3': 1, 'email1': 2}), ('the', {'email3': 4, 'email1': 2}), ('a', {'email2': 3, 'email1': 4})])
</snippet></ROW><ROW><id>10463754</id><snippet>n</snippet></ROW><ROW><id>10463831</id><snippet>postgresql</snippet></ROW><ROW><id>10463831</id><snippet>CREATE TABLE feature ( -- 300k
    feature_id INTEGER PRIMARY KEY,
    mzMin DOUBLE,
    mzMax DOUBLE,
    rtMin DOUBLE,
    rtMax DOUBLE,
    lnk_feature INT);
CREATE TABLE spectrum ( -- 20k
    spectrum_id INTEGER PRIMARY KEY,
    mz DOUBLE,
    rt DOUBLE,
    lnk_spectrum INT);
</snippet></ROW><ROW><id>10463831</id><snippet>feature</snippet></ROW><ROW><id>10463831</id><snippet>spectrum</snippet></ROW><ROW><id>10463831</id><snippet>INTEGER PRIMARY KEY</snippet></ROW><ROW><id>10463831</id><snippet>lnk_feature</snippet></ROW><ROW><id>10463831</id><snippet>sqlite&gt; EXPLAIN QUERY PLAN SELECT feature_id, spectrum_id FROM spectrum, feature
   ...&gt; WHERE lnk_feature = lnk_spectrum
   ...&gt;     AND rt &gt;= rtMin AND rt &lt;= rtMax
   ...&gt;     AND mz &gt;= mzMin AND mz &lt;= mzMax;
0|0|0|SCAN TABLE spectrum (~20000 rows)
0|1|1|SEARCH TABLE feature USING AUTOMATIC COVERING INDEX (lnk_feature=?) (~7 rows)
</snippet></ROW><ROW><id>10463831</id><snippet>.fetchall()</snippet></ROW><ROW><id>10463831</id><snippet>postgresql</snippet></ROW><ROW><id>10463831</id><snippet>apsw</snippet></ROW><ROW><id>10463831</id><snippet>#!/usr/bin/python
import apsw, random as rand, time

def populate(cu):
    cu.execute("""
CREATE TABLE feature ( -- 300k
    feature_id INTEGER PRIMARY KEY,
    mzMin DOUBLE, mzMax DOUBLE,
    rtMin DOUBLE, rtMax DOUBLE,
    lnk_feature INT);
CREATE TABLE spectrum ( -- 20k
    spectrum_id INTEGER PRIMARY KEY,
    mz DOUBLE, rt DOUBLE,
    lnk_spectrum INT);""")
    cu.execute("BEGIN")
    for i in range(300000):
        ((mzMin, mzMax), (rtMin, rtMax)) = (get_min_max(), get_min_max())
        cu.execute("INSERT INTO feature VALUES (NULL,%s,%s,%s,%s,%s)" 
                    % (mzMin, mzMax, rtMin, rtMax, get_lnk()))
    for i in range(20000):
        cu.execute("INSERT INTO spectrum VALUES (NULL,%s,%s,%s)"
                    % (get_in_between(), get_in_between(), get_lnk()))
    cu.execute("COMMIT")
    cu.execute("ANALYZE")

def get_lnk():
    return rand.randint(1, 2)

def get_min_max():
    return sorted((rand.normalvariate(0.5, 0.004), 
                   rand.normalvariate(0.5, 0.004)))

def get_in_between():
    return rand.normalvariate(0.5, 0.49)

def select(cu):
    sql = """
    SELECT feature_id, spectrum_id FROM spectrum, feature
    WHERE lnk_feature = lnk_spectrum
        AND rt &gt;= rtMin AND rt &lt;= rtMax
        AND mz &gt;= mzMin AND mz &lt;= mzMax"""
    start = time.time()
    cu.execute(sql)
    print ("%s rows; %.2f seconds" % (len(cu.fetchall()), time.time() - start))

cu = apsw.Connection('foo.db').cursor()
populate(cu)
select(cu)
</snippet></ROW><ROW><id>10463831</id><snippet>54626 rows; 1210.96 seconds
</snippet></ROW><ROW><id>10464029</id><snippet>SID</snippet></ROW><ROW><id>10464029</id><snippet>Authorization</snippet></ROW><ROW><id>10464029</id><snippet>CookieJar</snippet></ROW><ROW><id>10464029</id><snippet>HttpCookieProcessor</snippet></ROW><ROW><id>10464124</id><snippet>try:
    do_something()
except RuntimeError:
    pass # does nothing
else:
    print("Message: ", line) 
</snippet></ROW><ROW><id>10464244</id><snippet>grid_propagate(False)</snippet></ROW><ROW><id>10464263</id><snippet>pip</snippet></ROW><ROW><id>10464263</id><snippet>easy_install</snippet></ROW><ROW><id>10464587</id><snippet>REQUEST_URI</snippet></ROW><ROW><id>10464587</id><snippet>?</snippet></ROW><ROW><id>10464587</id><snippet>if('?' === substr($_SERVER['REQUEST_URI'], -1)){
    // Empty query string with '?'
}else if(false === strpos($_SERVER['REQUEST_URI'], '?')){
    // No ? at all
}else{
    // Some query string exists (check $_GET)
}
</snippet></ROW><ROW><id>10464944</id><snippet>&gt;&gt;&gt; a = np.array([1,2,4,5,1,4,2,1])
&gt;&gt;&gt; b = np.array([1,2]) # Your test array
&gt;&gt;&gt; np.in1d(a,b)
array([ True,  True, False, False,  True, False,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>10464982</id><snippet>mv.y</snippet></ROW><ROW><id>10464982</id><snippet>__main__</snippet></ROW><ROW><id>10464982</id><snippet>execute("y=5")</snippet></ROW><ROW><id>10465049</id><snippet>a &amp; b == {}</snippet></ROW><ROW><id>10465049</id><snippet>{}</snippet></ROW><ROW><id>10465162</id><snippet>DataFrame.apply</snippet></ROW><ROW><id>10465162</id><snippet>Series.interpolate</snippet></ROW><ROW><id>10465162</id><snippet>In : df = pandas.DataFrame(numpy.random.randn(5,3), index=['a','c','d','e','g'])

In : df
Out:
          0         1         2
a -1.987879 -2.028572  0.024493
c  2.092605 -1.429537  0.204811
d  0.767215  1.077814  0.565666
e -1.027733  1.330702 -0.490780
g -1.632493  0.938456  0.492695

In : df2 = df.reindex(['a','b','c','d','e','f','g'])

In : df2
Out:
          0         1         2
a -1.987879 -2.028572  0.024493
b       NaN       NaN       NaN
c  2.092605 -1.429537  0.204811
d  0.767215  1.077814  0.565666
e -1.027733  1.330702 -0.490780
f       NaN       NaN       NaN
g -1.632493  0.938456  0.492695

In : df2.apply(pandas.Series.interpolate)
Out:
          0         1         2
a -1.987879 -2.028572  0.024493
b  0.052363 -1.729055  0.114652
c  2.092605 -1.429537  0.204811
d  0.767215  1.077814  0.565666
e -1.027733  1.330702 -0.490780
f -1.330113  1.134579  0.000958
g -1.632493  0.938456  0.492695
</snippet></ROW><ROW><id>10465162</id><snippet>Series</snippet></ROW><ROW><id>10465162</id><snippet>NaN</snippet></ROW><ROW><id>10465162</id><snippet>Series</snippet></ROW><ROW><id>10465176</id><snippet>root = Tk()
root.columnconfigure(0, weight=1)
app = Application(root)
</snippet></ROW><ROW><id>10465186</id><snippet>games_set = set('soccer', 'hockey', 'baseball', 'cricket', 'basketball')
db.define_table('Sportsmen',
            Field('gamer', db.auth_user),
            Field('games', length=20, 
                requires=IS_IN_SET(games_set))),
            Field('experience', 'integer', default=0))
</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>x</snippet></ROW><ROW><id>10465246</id><snippet>def subsets(original_x):
    if not original_x:
        return [[]]
    else:
        return [x + y for x in [[], [original_x[0]]]
                      for y in subsets(original_x[1:])]
</snippet></ROW><ROW><id>10465403</id><snippet>data.pop()
data.add(new_value)
</snippet></ROW><ROW><id>10465403</id><snippet>data.remove(value) #data.discard(value) if you don't care if the item exists.
data.add(new_value)
</snippet></ROW><ROW><id>10465403</id><snippet>data[index] = new_value
</snippet></ROW><ROW><id>10465403</id><snippet>&gt;&gt;&gt; list(set(["dog", "cat", "elephant"]))
['elephant', 'dog', 'cat']
&gt;&gt;&gt; list(set([1, 2, 3]))
[1, 2, 3]
</snippet></ROW><ROW><id>10465403</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>10465403</id><snippet>new_list</snippet></ROW><ROW><id>10465588</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>10465588</id><snippet>def random_powerset(iterable):
     s = list(iterable)
     lengths = list(range(len(s)+1))
     shuffle(lengths)
     return chain.from_iterable(combinations(s, r) for r in lengths if not shuffle(s))
</snippet></ROW><ROW><id>10465588</id><snippet>shuffle(s)</snippet></ROW><ROW><id>10465588</id><snippet>False</snippet></ROW><ROW><id>10465588</id><snippet>combinations()</snippet></ROW><ROW><id>10465588</id><snippet>&gt;&gt;&gt; list(random_powerset(range(3)))
[(), (2,), (0,), (1,), (2, 1), (2, 0), (1, 0), (1, 2, 0)]
&gt;&gt;&gt; list(random_powerset(range(3)))
[(), (0, 1), (0, 2), (1, 2), (0, 1, 2), (2,), (0,), (1,)]
&gt;&gt;&gt; list(random_powerset(range(3)))
[(0, 1, 2), (2,), (1,), (0,), (0, 2), (0, 1), (2, 1), ()]
&gt;&gt;&gt; list(random_powerset(range(3)))
[(1, 2, 0), (0,), (2,), (1,), (), (0, 1), (0, 2), (1, 2)]
&gt;&gt;&gt; list(random_powerset(range(3)))
[(), (2, 1), (2, 0), (1, 0), (0,), (2,), (1,), (2, 1, 0)]
&gt;&gt;&gt; list(random_powerset(range(3)))
[(1, 0), (1, 2), (0, 2), (0, 2, 1), (), (1,), (0,), (2,)]
</snippet></ROW><ROW><id>10465649</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources
some_engine = create_engine('postgresql://scott:tiger@localhost/')

# create a configured "Session" class
Session = sessionmaker(bind=some_engine)

# create a Session
session = Session()

# work with sess
myobject = MyObject('foo', 'bar')
session.add(myobject)
session.commit()
</snippet></ROW><ROW><id>10465723</id><snippet>enumerate()</snippet></ROW><ROW><id>10465723</id><snippet>for i, word in enumerate(separate_word, 1):
    print i, ' '.join(word)

&gt; 1 the heart was
&gt; 2 made to be
&gt; 3 broken
</snippet></ROW><ROW><id>10465819</id><snippet>[re.search(r'/([.]+)(.pdf)', url) for url in urls]
</snippet></ROW><ROW><id>10465819</id><snippet>[match.groups() for match in (re.search(r'/([.]+)(.pdf)', url) for url in urls) if match]
</snippet></ROW><ROW><id>10465819</id><snippet>&gt;&gt;&gt; urls = ["http://wwww.example.com/test.html", "http://www.example.com/test.pdf"]
&gt;&gt;&gt; [match.groups() for match in (re.search(r'/([^/]+)(.pdf)', url) for url in urls) if match]
[('test', '.pdf')]
</snippet></ROW><ROW><id>10465819</id><snippet>match.groups()</snippet></ROW><ROW><id>10465936</id><snippet>split</snippet></ROW><ROW><id>10465936</id><snippet>findall</snippet></ROW><ROW><id>10465936</id><snippet>line_split = re.findall(r'[^ \t\n\r., ]+',line)
</snippet></ROW><ROW><id>10466112</id><snippet>\b</snippet></ROW><ROW><id>10466112</id><snippet>re.findall(r'\b\d{4}\b', ....)
</snippet></ROW><ROW><id>10466250</id><snippet>Wait.timeout = 20
</snippet></ROW><ROW><id>10466250</id><snippet>&gt;&gt;&gt; class Wait:
...     timeout = 9
...     def __init__(self, timeout=None):
...         if timeout is not None:
...             self.timeout = timeout
... 
&gt;&gt;&gt; a = Wait()
&gt;&gt;&gt; b = Wait(9)
&gt;&gt;&gt; a.timeout
9
&gt;&gt;&gt; b.timeout
9
&gt;&gt;&gt; Wait.timeout = 20
&gt;&gt;&gt; a.timeout
20
&gt;&gt;&gt; b.timeout
9
</snippet></ROW><ROW><id>10466394</id><snippet>for i, word in enumerate(separate_word):
    if i == 0:
        print count, ' '.join(word)
    else:
        print " ", ' '.join(word)
</snippet></ROW><ROW><id>10466394</id><snippet>with</snippet></ROW><ROW><id>10466394</id><snippet>enumerate()</snippet></ROW><ROW><id>10466394</id><snippet>data</snippet></ROW><ROW><id>10466394</id><snippet>count</snippet></ROW><ROW><id>10466394</id><snippet>chunks()</snippet></ROW><ROW><id>10466394</id><snippet>import re

def chunks(line_split, n):
    for i in xrange(0, len(line_split), n):
        yield line_split[i:i+n]

print "---------------------------------------------------"

with open("test.txt", "r") as file:
    for count, line in enumerate(file, 1):
        line_split = re.findall(r'[^ \t\n\r, ]+',line)
        separate_word = chunks(line_split, 8)
        for i, word in enumerate(separate_word):
            if i == 0:
                print count, ' '.join(word)
            else:
                print " ", ' '.join(word)

        print "---------------------------------------------------"
</snippet></ROW><ROW><id>10466394</id><snippet>word</snippet></ROW><ROW><id>10466505</id><snippet>project/src</snippet></ROW><ROW><id>10466505</id><snippet>test_models</snippet></ROW><ROW><id>10466505</id><snippet>project_name.test.some_app.test_models</snippet></ROW><ROW><id>10466505</id><snippet>project_name.test</snippet></ROW><ROW><id>10466505</id><snippet>sys.path</snippet></ROW><ROW><id>10466505</id><snippet>project_name.test</snippet></ROW><ROW><id>10466505</id><snippet>project_name.test</snippet></ROW><ROW><id>10466505</id><snippet>TestRunner</snippet></ROW><ROW><id>10466505</id><snippet>BASE_TEST_MODULE</snippet></ROW><ROW><id>10466747</id><snippet>related_name</snippet></ROW><ROW><id>10466747</id><snippet>model_set</snippet></ROW><ROW><id>10466747</id><snippet>object.campaign_charity.all()
</snippet></ROW><ROW><id>10466747</id><snippet>dir(object)</snippet></ROW><ROW><id>10466763</id><snippet>pandas.TimeSeries</snippet></ROW><ROW><id>10466763</id><snippet>datetime.date.isocalendar()</snippet></ROW><ROW><id>10466763</id><snippet>In [95]: daily = ts.groupby(lambda x: x.isocalendar()[1:]).agg(lambda s: s[-1])

In [96]: daily
Out[96]: 
key_0
(1, 1)     63
(1, 2)     91
(1, 3)     73
...
(20, 5)    82
(20, 6)    53
(20, 7)    63
Length: 140
</snippet></ROW><ROW><id>10466763</id><snippet>In [97]: daily.index = pandas.MultiIndex.from_tuples(daily.index, names=['W', 'D'])

In [98]: daily
Out[98]: 
W   D
1   1    63
    2    91
    3    73
    4    88
    5    84
    6    95
    7    72
...
20  1    81
    2    53
    3    78
    4    64
    5    82
    6    53
    7    63
Length: 140
</snippet></ROW><ROW><id>10466763</id><snippet>In [102]: dofw = "Mon Tue Wed Thu Fri Sat Sun".split()

In [103]: grid = daily.unstack('D').rename(columns=lambda x: dofw[x-1])

In [104]: grid
Out[104]: 
    Mon  Tue  Wed  Thu  Fri  Sat  Sun
W                                    
1    63   91   73   88   84   95   72
2    66   77   96   72   56   80   66
...
19   56   69   89   69   96   73   80
20   81   53   78   64   82   53   63
</snippet></ROW><ROW><id>10466763</id><snippet>plot</snippet></ROW><ROW><id>10466763</id><snippet>grid.T.plot()
</snippet></ROW><ROW><id>10466840</id><snippet>pygame.display.iconify()</snippet></ROW><ROW><id>10466969</id><snippet>\SplDoublyLinkedList</snippet></ROW><ROW><id>10466969</id><snippet>\SplMaxHeap</snippet></ROW><ROW><id>10466982</id><snippet> Unit[Number.index(value)]
</snippet></ROW><ROW><id>10466982</id><snippet>index()</snippet></ROW><ROW><id>10466982</id><snippet>Unit</snippet></ROW><ROW><id>10467054</id><snippet>f=open('my-file.txt','rU')
raw=f.read()
tokens = nltk.word_tokenize(raw)
text = nltk.Text(tokens)
</snippet></ROW><ROW><id>10467148</id><snippet>@app.before_request</snippet></ROW><ROW><id>10467392</id><snippet>class User(object):

    @classmethod
    def get_by_username(cls, dbsession, username):
        return dbsession.query(cls).filter(cls.username==username).scalar()

mapper(User, tables.auth_user,
    properties={
        ...
        }
    )
</snippet></ROW><ROW><id>10467392</id><snippet>user = User.get_by_username(session, "me")
</snippet></ROW><ROW><id>10467525</id><snippet>    # This class extends a generic view, but this can be any view.
class RelationCreateView(CreateView):

    def get_form(self, form_class):
        # Find all entities a user can promote within, and limit to those.
        form.fields['entity'].queryset = &lt;SOME QUERYSET&gt;
        return form
</snippet></ROW><ROW><id>10467525</id><snippet>def view_method():
    ...
    form.fields['field_name'].queryset = &lt;SOME QUERYSET&gt;
</snippet></ROW><ROW><id>10467541</id><snippet>def lookup(index,keyword):
    return [x for entry in index if entry[0]==keyword for x in entry[1]]
</snippet></ROW><ROW><id>10467541</id><snippet>for entry in index:
  if entry[0]==keyword:
    for x in entry[1]:
      yield x
</snippet></ROW><ROW><id>10467546</id><snippet>import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt

N = 10

np.random.seed(10)    
a=np.random.randint(-1, N, size=(5, 5))
print a

fig, ax = plt.subplots()

colors = [(0.0,0.0,0.0),(1.0,1.0,1.0)]
colors.extend(mpl.cm.jet(np.linspace(0, 1, N-1)))
cmap = mpl.colors.ListedColormap(colors)
mat=ax.matshow(a, cmap=cmap, vmin=-1, vmax=N-1)
cax = plt.colorbar(mat, ticks=np.linspace(-0.5, N-1-0.5, N+1))
cax.set_ticklabels(range(-1, N))
plt.show()
</snippet></ROW><ROW><id>10467762</id><snippet>request.FILES</snippet></ROW><ROW><id>10467762</id><snippet>StringIO</snippet></ROW><ROW><id>10467762</id><snippet>django.core.files.File</snippet></ROW><ROW><id>10467762</id><snippet>save()</snippet></ROW><ROW><id>10467816</id><snippet>brownGrowth = growPOP(brownPOP, totalPOP, rt(ca, cb, month), carryK) 
while month &lt;= 2: 
    print "Month ", month 
    print "Grown brown fish: ", brownGrowth
    brownPOP = endbrownPOP  
    goldPOP = endgoldPOP  
    totalPOP = endtotalPOP  
    carryK = newcarryK  
    month = month + 1  
</snippet></ROW><ROW><id>10467816</id><snippet>brownGrowth = formula</snippet></ROW><ROW><id>10467816</id><snippet>while month &lt;= 2: 
    brownGrowth = growPOP(brownPOP, totalPOP, rt(ca, cb, month), carryK) 
    print "Month ", month 
    print "Grown brown fish: ", brownGrowth
    brownPOP = endbrownPOP 
    goldPOP = endgoldPOP 
    totalPOP = endtotalPOP 
    carryK = newcarryK 
    month = month + 1 
</snippet></ROW><ROW><id>10467906</id><snippet>moo = raw_input ('moo ')
print ' '.join(moo.split())
</snippet></ROW><ROW><id>10467906</id><snippet>moo</snippet></ROW><ROW><id>10467906</id><snippet>sys.argv</snippet></ROW><ROW><id>10467906</id><snippet>moo = raw_input('moo ')
temp_list = moo.split()
print ' '.join(temp_list)
</snippet></ROW><ROW><id>10467906</id><snippet>print temp_list
</snippet></ROW><ROW><id>10467906</id><snippet>import sys

if len(sys.argv) &gt; 1:
    for arg in sys.argv[1:]:
        print arg,
</snippet></ROW><ROW><id>10467906</id><snippet>print(arg, end=" ")
</snippet></ROW><ROW><id>10467906</id><snippet>import sys

if len(sys.argv) &gt; 1:
    print ' '.join(sys.argv[1:])
</snippet></ROW><ROW><id>10468103</id><snippet>if (usr != "None") or (usr != None):
        print usr
        print "Username already taken!"
        pause()
</snippet></ROW><ROW><id>10468103</id><snippet>if (usr != "None") and (usr != None):
</snippet></ROW><ROW><id>10468248</id><snippet>from collections import defaultdict
D = defaultdict(list)

for line in open('filename', 'r'):
    k = line.split()[-1]
    D[k].append(line)

print 'VALUE    NO TIMES REPEATED'
print '-----    -----------------'
for value, lines in D.items():
    print '%-6s           %d'  % (value, len(lines))
</snippet></ROW><ROW><id>10468248</id><snippet>from collections import Counter
D = Counter()

for line in open('filename', 'r'):
    k = line.split()[-1]
    D[k] += 1

print 'VALUE    NO TIMES REPEATED'
print '-----    -----------------'
for value, count in D.items():
    print '%-6s           %d'  % (value, count)
</snippet></ROW><ROW><id>10468378</id><snippet>print (line)</snippet></ROW><ROW><id>10468378</id><snippet>which = input('Which package would you like?: ')

with open('packages.txt') as f:
    i = 1
    for line in f:
        if i == (int(which)):
            break
        i += 1
print (line)
</snippet></ROW><ROW><id>10468483</id><snippet>list</snippet></ROW><ROW><id>10468483</id><snippet>dict</snippet></ROW><ROW><id>10468483</id><snippet>set</snippet></ROW><ROW><id>10468483</id><snippet>list.__contains__()</snippet></ROW><ROW><id>10468483</id><snippet>in</snippet></ROW><ROW><id>10468483</id><snippet>   393 static int
   394 list_contains(PyListObject *a, PyObject *el)
   395 {
   396     Py_ssize_t i;
   397     int cmp;
   398 
   399     for (i = 0, cmp = 0 ; cmp == 0 &amp;&amp; i &lt; Py_SIZE(a); ++i)
   400         cmp = PyObject_RichCompareBool(el, PyList_GET_ITEM(a, i),
   401                                            Py_EQ);
   402     return cmp;
   403 }
</snippet></ROW><ROW><id>10468483</id><snippet>list</snippet></ROW><ROW><id>10468483</id><snippet>set</snippet></ROW><ROW><id>10468483</id><snippet>if letter in ['a','e','i','o','u']:    # list version
if letter in {'a','e','i','o','u'}:    # set version
</snippet></ROW><ROW><id>10468493</id><snippet>L</snippet></ROW><ROW><id>10468493</id><snippet>D = dict((b,a) for a,b in enumerate(L))
chi_sort = D.get
</snippet></ROW><ROW><id>10468493</id><snippet>L</snippet></ROW><ROW><id>10468493</id><snippet>reversed=True</snippet></ROW><ROW><id>10468493</id><snippet>sorted</snippet></ROW><ROW><id>10468574</id><snippet>application = webapp.WSGIApplication([('/json', JsonPage)], debug=True)
</snippet></ROW><ROW><id>10468651</id><snippet>&gt;&gt;&gt; string = '[[A], [[B]], [C], [[D]]]'
&gt;&gt;&gt; sameBrackets = lambda s: len(re.findall('\[',s)) == len(re.findall('\]',s))
&gt;&gt;&gt; filter(sameBrackets, string.split(", "))
['[[B]]', '[C]']
</snippet></ROW><ROW><id>10468800</id><snippet>In [1]: s = 'lala\n'

In [2]: s.strip()
Out[2]: 'lala'

In [3]: s
Out[3]: 'lala\n'

In [4]: s = s.strip()

In [5]: s
Out[5]: 'lala'
</snippet></ROW><ROW><id>10468800</id><snippet>new_string = text[end_index+1:].strip()
</snippet></ROW><ROW><id>10468800</id><snippet>In [6]: with open('download.py') as fobj:
   ...:     for line in fobj:
   ...:         print line
</snippet></ROW><ROW><id>10468800</id><snippet>with</snippet></ROW><ROW><id>10468800</id><snippet>close()</snippet></ROW><ROW><id>10468989</id><snippet>count</snippet></ROW><ROW><id>10468989</id><snippet>Counter</snippet></ROW><ROW><id>10468989</id><snippet>from collections import Counter

tokens = ["today", "good", "computer", "people", "good"]
single_tokens = [k for k, v in Counter(tokens).iteritems() if v == 1 ]
# single_tokens == ['today', 'computer', 'people']
</snippet></ROW><ROW><id>10469148</id><snippet>import re

def trim_string(string):
  return re.sub(r'^([^0-9]+)(.*?)([^0-9]+)$', r'\2', string)
</snippet></ROW><ROW><id>10469148</id><snippet>r'^([^0-9]+)(.*?)([^0-9]+)$'</snippet></ROW><ROW><id>10469148</id><snippet>^</snippet></ROW><ROW><id>10469148</id><snippet>([^0-9]+)</snippet></ROW><ROW><id>10469148</id><snippet>(.*?)</snippet></ROW><ROW><id>10469148</id><snippet>([^0-9]+)</snippet></ROW><ROW><id>10469148</id><snippet>$</snippet></ROW><ROW><id>10469148</id><snippet>r'\2'</snippet></ROW><ROW><id>10469148</id><snippet>return foo</snippet></ROW><ROW><id>10469148</id><snippet>foo</snippet></ROW><ROW><id>10469148</id><snippet>return</snippet></ROW><ROW><id>10469148</id><snippet>None</snippet></ROW><ROW><id>10469148</id><snippet>return</snippet></ROW><ROW><id>10469148</id><snippet>def String_Trim(Raw_String):
    if Raw_String[0].isdigit() == False:
        New_String = Raw_String[1:]
        return String_Trim(New_String)
    elif Raw_String[-1].isdigit() == False:
        New_String = Raw_String[:-1]
        return String_Trim(New_String)
    else:
        print Raw_String
        return Raw_String
</snippet></ROW><ROW><id>10469210</id><snippet>import requests
import lxml.html

# here's some ugly code I've glued together from my IPython %history:
#
# I know it's crap, It's about ~10mins from start to finish, one
# alternative would be to simply generate &lt;img src=""&gt; links for each of
# the images and then rely on Firefox/Chrome to save the whole page...
# this would make prettier file names, and I get the impression this 
# is a one-off script...
# --Stuart




def find_images(url):

    root=lxml.html.parse(url).getroot()
    root.make_links_absolute()
    imgs = []
    for i in root.xpath('//div[contains(@id, "post_message")]//img'):
        src = i.attrib.get('src','')
        if 'project1999' not in src:
            imgs.append(i.attrib.get('src',''))
    return imgs



def main():
    nums=[x+1 for x in range(52)]
    urls=['http://www.project1999.org/forums/showthread.php?s=6be291d52837a8ab512858dde188569c&amp;t=37779&amp;page=%d' %num for num in nums]

    todownload = []
    for url in urls:
        for img in find_images(url):
            todownload.append(img)


    todownload = list(set(todownload)) #remove duplicates

    print "downloading %d images" % len(todownload)

    # save all the images without extensions.. (lazy)
    for count, i in enumerate(todownload):
        try:
            print "%d downloading %s" % (count, i)
            open('imgs/%d' % count, 'w').write(requests.get(i).content)
        except:
            print "couldn't download %s" %i



if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10469210</id><snippet>...
92 downloading http://i117.photobucket.com/albums/o60/mven42/f1b88059.jpg
93 downloading https://lh4.googleusercontent.com/-cXKgVQVodRI/TmvYln0uj6I/AAAAAAAAO1k/H4sx5srDX6Q/Cat-Gifs-Shared-by-Gplus-Jay-Puri_62.gif
94 downloading http://26.media.tumblr.com/tumblr_ls8pbds3sL1qfjjglo1_400.gif
95 downloading http://i43.tinypic.com/169goet.gif
96 downloading http://i.imgur.com/5qbXk.gif
97 downloading http://img818.imageshack.us/img818/547/hahajkg.jpg
98 downloading http://img815.imageshack.us/img815/6856/catmb.jpg
99 downloading http://i.imgur.com/PDiEa.gif
100 downloading http://29.media.tumblr.com/tumblr_lnybntpx2o1qlue6co1_100.gif
101 downloading http://1.bp.blogspot.com/-G6LADm3UlmE/TfeDHI9iQNI/AAAAAAAAAsw/sZ0R6wcdZgc/s640/cat+vs+dog+002.jpg
102 downloading http://i1179.photobucket.com/albums/x393/Drogula/gifs/1312351009032.gif
103 downloading http://26.media.tumblr.com/tumblr_lltfczZDdA1qkbyimo1_500.gif
104 downloading http://desmond.yfrog.com/Himg860/scaled.php?tn=0&amp;server=860&amp;filename=snajs.jpg&amp;xsize=640&amp;ysize=640
105 downloading http://i357.photobucket.com/albums/oo12/azen32/2011-11-0919-25-15998.jpg
106 downloading http://img641.imageshack.us/img641/2678/caturday35.png
107 downloading http://icanhascheezburger.files.wordpress.com/2007/12/funny-pictures-cat-gravity-wins.jpg
108 downloading http://s3-ak.buzzfed.com/static/enhanced/web05/2011/12/7/17/anigif_enhanced-buzz-2926-1323297290-29.gif
109 downloading http://a5.sphotos.ak.fbcdn.net/hphotos-ak-snc7/s720x720/315738_2385906201789_1074780041_32733561_1154490844_n.jpg
</snippet></ROW><ROW><id>10469306</id><snippet>new_string = ''

for every letter in your string:
  new_string = new_string + bar[index of the "letter" in foo]
</snippet></ROW><ROW><id>10469516</id><snippet>_</snippet></ROW><ROW><id>10469516</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1336296696.824
&gt;&gt;&gt; _
1336296696.824
</snippet></ROW><ROW><id>10469746</id><snippet>In [1]: word=['a', 'sdfs', 'sdfsdfsfs']

In [2]: join_word = ' '.join(word)

In [3]: len_join_word = len(join_word)

In [4]: print(len_join_word)
16
</snippet></ROW><ROW><id>10469746</id><snippet>print(len_join_word)</snippet></ROW><ROW><id>10469779</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; cu = conn.cursor()
&gt;&gt;&gt; cu.execute('create table foo (uID, username, password, creator_exp, location)')
&lt;sqlite3.Cursor object at 0x7fccc2c115e0&gt;
&gt;&gt;&gt; user_ID='a'
&gt;&gt;&gt; username='b'
&gt;&gt;&gt; password='c'
&gt;&gt;&gt; creator_exp='d'
&gt;&gt;&gt; table_name='foo'
&gt;&gt;&gt; cu.execute("INSERT INTO `"+table_name+"` (uID, username, password, creator_exp, location) VALUES ('"+user_ID+"', '"+username+"', '"+password+"', '"+creator_exp+"', '0-0')")
&lt;sqlite3.Cursor object at 0x7fccc2c115e0&gt;
</snippet></ROW><ROW><id>10469779</id><snippet>syntax error</snippet></ROW><ROW><id>10469779</id><snippet>&gt;&gt;&gt; username="'barf"
&gt;&gt;&gt; cu.execute("INSERT INTO `"+table_name+"` (uID, username, password, creator_exp, location) VALUES ('"+user_ID+"', '"+username+"', '"+password+"', '"+creator_exp+"', '0-0')")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.OperationalError: near "barf": syntax error
</snippet></ROW><ROW><id>10469779</id><snippet>&gt;&gt;&gt; cu.execute("INSERT INTO `"+table_name+"` (uID, username, password, creator_exp, location) VALUES (?, ?, ?, ?, '0-0')", 
(user_ID, username, password, creator_exp))
&lt;sqlite3.Cursor object at 0x7fccc2c115e0
</snippet></ROW><ROW><id>10469945</id><snippet>cv2.bitwise_and</snippet></ROW><ROW><id>10469945</id><snippet>img = cv2.imread('lena.jpg')
mask = cv2.imread('mask.png',0)
res = cv2.bitwise_and(img,img,mask = mask)
</snippet></ROW><ROW><id>10470392</id><snippet>coords[x-minX][y-minY]</snippet></ROW><ROW><id>10470392</id><snippet>0-1</snippet></ROW><ROW><id>10470392</id><snippet>s = '0-1'
[int(x) for x in s.split('-')]
</snippet></ROW><ROW><id>10470578</id><snippet>xml</snippet></ROW><ROW><id>10470578</id><snippet>&gt;</snippet></ROW><ROW><id>10470619</id><snippet>dic=dict()</snippet></ROW><ROW><id>10470619</id><snippet>Counter</snippet></ROW><ROW><id>10470619</id><snippet>dic</snippet></ROW><ROW><id>10470619</id><snippet>dic</snippet></ROW><ROW><id>10470619</id><snippet>dic</snippet></ROW><ROW><id>10470619</id><snippet>dic=dict( (n, dic.get(n, 0)+C.get(n, 0)) for n in set(dic)|set(C) )</snippet></ROW><ROW><id>10470619</id><snippet>C</snippet></ROW><ROW><id>10470619</id><snippet>Counter</snippet></ROW><ROW><id>10470619</id><snippet>dic</snippet></ROW><ROW><id>10470619</id><snippet>import glob
from collections import Counter
dic=dict()
g_iter = glob.iglob(r'c:\\python32\fol\*')
for x in g_iter:

    lis=[]
    with open(x) as f:
        inp = f.readlines()
    for line in inp:
        num=line.split()[-1]
        lis.append(num)
    C=Counter(lis)
    dic=dict( (n, dic.get(n, 0)+C.get(n, 0)) for n in set(dic)|set(C) )
for x in dic:
    print(x,'\t',dic[x])
</snippet></ROW><ROW><id>10470781</id><snippet>import wx
from wx.lib.mixins.inspection import InspectionMixin

class MyApp(wx.App, InspectionMixin):
    def OnInit(self):
        self.Init()  # initialize the inspection tool
        frame = wx.Frame(None)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        frame.SetSizer(sizer)

        self.__squarePanel = wx.Panel(frame)
        sizer.Add(self.__squarePanel, 0, wx.ALL | wx.EXPAND, 5)

        frame.Bind(wx.EVT_SIZE, self.OnSize)

        frame.Show()
        self.SetTopWindow(frame)
        return True  

    def OnSize(self, evt):
        frame = evt.GetEventObject()
        frameW, frameH = frame.GetSize()
        targetSide = min(frameW, frameH)
        self.__squarePanel.SetSize((targetSide, targetSide))


app = MyApp()
app.MainLoop()
</snippet></ROW><ROW><id>10471573</id><snippet>event.Skip()</snippet></ROW><ROW><id>10471573</id><snippet>OnResize</snippet></ROW><ROW><id>10471573</id><snippet>self.Layout()</snippet></ROW><ROW><id>10471585</id><snippet>coding</snippet></ROW><ROW><id>10471585</id><snippet>&gt;&gt;&gt; from unicode_hack import regex
&gt;&gt;&gt; result = regex(ur'^\p{Ll}\p{L}*').match(u'áÇñ123')
&gt;&gt;&gt; print result.group(0) == u'áÇñ'
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10471585</id><snippet>u'\xe1\xc7\xf1'</snippet></ROW><ROW><id>10471585</id><snippet>&gt;&gt;&gt; from unicode_hack import regex
&gt;&gt;&gt; result = regex(ur'^\p{Ll}\p{L}*').match(u'\xe1\xc7\xf1123')
&gt;&gt;&gt; print result.group(0) == u'\xe1\xc7\xf1'
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10471585</id><snippet>codecs.open</snippet></ROW><ROW><id>10471585</id><snippet>codecs</snippet></ROW><ROW><id>10471585</id><snippet>&gt;&gt;&gt; u'áÇñ'
u'\xe1\xc7\xf1'
&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.open('unicode_hack.py','r','utf8').read()[19171:19174]
u'\xe1\xc7\xf1'
</snippet></ROW><ROW><id>10471585</id><snippet>&gt;&gt;&gt;&gt; u'áÇñ'
u'\xa0\u20ac\xa4'
&gt;&gt;&gt;&gt; import codecs
&gt;&gt;&gt;&gt; codecs.open('unicode_hack.py','r','utf8').read()[19171:19174]
u'\xe1\xc7\xf1'
</snippet></ROW><ROW><id>10471610</id><snippet>Create charts from your Django models effortlessly
</snippet></ROW><ROW><id>10471776</id><snippet>S</snippet></ROW><ROW><id>10471776</id><snippet>.</snippet></ROW><ROW><id>10471861</id><snippet>coordslst = sample.split('-')
</snippet></ROW><ROW><id>10471861</id><snippet>2--1</snippet></ROW><ROW><id>10471861</id><snippet>-2--1</snippet></ROW><ROW><id>10471861</id><snippet>sample = '-2--1'
pos = sample.index('-', 1)  # find first '-' after first character
x = sample[:pos]            # up to the dash
y = sample[pos+1:]          # skip the dash
</snippet></ROW><ROW><id>10471995</id><snippet>print</snippet></ROW><ROW><id>10471995</id><snippet>t.repeat</snippet></ROW><ROW><id>10472429</id><snippet>r=re.compile(r'^(diff.*?)(?=^diff|\Z)', re.M | re.S)
for m in re.findall(r, s):
    print '===='
    print m
</snippet></ROW><ROW><id>10472650</id><snippet>c.execute("INSERT INTO Sentence_Qaem (Sentence) VALUES (%s)", row)
</snippet></ROW><ROW><id>10472650</id><snippet>INSERT</snippet></ROW><ROW><id>10472650</id><snippet>'</snippet></ROW><ROW><id>10472778</id><snippet>paintEvent</snippet></ROW><ROW><id>10472778</id><snippet>QImage</snippet></ROW><ROW><id>10472778</id><snippet>QPixmap</snippet></ROW><ROW><id>10472778</id><snippet>QPicture</snippet></ROW><ROW><id>10473054</id><snippet>''.join('{}{}'.format(key, val) for key, val in adict.items())
</snippet></ROW><ROW><id>10473054</id><snippet>''.join('{}{}'.format(key, val) for key, val in sorted(adict.items()))
</snippet></ROW><ROW><id>10473272</id><snippet>struct.pack</snippet></ROW><ROW><id>10473272</id><snippet>import struct
for song in songs:
    slash = song.rindex('\\')
    songbyte = slash + 2
    f.write(struct.pack('!B', songbyte))
</snippet></ROW><ROW><id>10473272</id><snippet>"{0:x}"</snippet></ROW><ROW><id>10473272</id><snippet>"{0:02x}"</snippet></ROW><ROW><id>10473272</id><snippet>&gt;&gt;&gt; "{0:x}".format(12)
'c'
&gt;&gt;&gt; "{0:02x}".format(12)
'0c'
</snippet></ROW><ROW><id>10473482</id><snippet>u'\x92'</snippet></ROW><ROW><id>10473482</id><snippet>print h.unescape("&#146;").encode('utf-8')</snippet></ROW><ROW><id>10473502</id><snippet>article = Article(...)
revision = Revision(article, ...)
article.current_revision = revision
session.add(article)
session.commit()
</snippet></ROW><ROW><id>10473555</id><snippet>from boto.ec2.connection import EC2Connection
from boto.ec2.blockdevicemapping import BlockDeviceType, BlockDeviceMapping
conn = EC2Connection(mykey, mysecretkey)
xvdb = BlockDeviceType()
xvdb.ephemeral_name='ephemeral0'
bdm = BlockDeviceMapping()
bdm['/dev/xvdb'] = xvdb
conn.run_instances(myami, key_name=mykeyname,security_groups=[mysecgroup],block_device_map=bdm)
</snippet></ROW><ROW><id>10474097</id><snippet>str</snippet></ROW><ROW><id>10474097</id><snippet>dis</snippet></ROW><ROW><id>10474097</id><snippet>i in (2,3)</snippet></ROW><ROW><id>10474097</id><snippet>str</snippet></ROW><ROW><id>10474097</id><snippet>bytes</snippet></ROW><ROW><id>10474097</id><snippet>dis</snippet></ROW><ROW><id>10474097</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis("i in (2,3)")  
  1           0 LOAD_NAME                0 (i)
              3 LOAD_CONST               2 ((2, 3))
              6 COMPARE_OP               6 (in)
              9 RETURN_VALUE
&gt;&gt;&gt; dis.dis("i in [2,3]")
  1           0 LOAD_NAME                0 (i)
              3 LOAD_CONST               2 ((2, 3))
              6 COMPARE_OP               6 (in)
              9 RETURN_VALUE
</snippet></ROW><ROW><id>10474097</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis("i in (2,3)")
          0 BUILD_MAP       26912
          3 JUMP_FORWARD    10272 (to 10278)
          6 DELETE_SLICE+0
          7 &lt;44&gt;
          8 DELETE_SLICE+1
          9 STORE_SLICE+1
&gt;&gt;&gt; dis.dis("i in [2,3]")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\dis.py", line 45, in dis
    disassemble_string(x)
  File "C:\Python27\lib\dis.py", line 112, in disassemble_string
    labels = findlabels(code)
  File "C:\Python27\lib\dis.py", line 166, in findlabels
    oparg = ord(code[i]) + ord(code[i+1])*256
IndexError: string index out of range
</snippet></ROW><ROW><id>10474097</id><snippet>i</snippet></ROW><ROW><id>10474097</id><snippet>(2,3)</snippet></ROW><ROW><id>10474097</id><snippet>dis</snippet></ROW><ROW><id>10474097</id><snippet>dis.dis</snippet></ROW><ROW><id>10474097</id><snippet>elif isinstance(x, str):
    disassemble_string(x)
</snippet></ROW><ROW><id>10474097</id><snippet>   elif isinstance(x, (bytes, bytearray)): # Raw bytecode
       _disassemble_bytes(x)
   elif isinstance(x, str):    # Source code
       _disassemble_str(x)
</snippet></ROW><ROW><id>10474097</id><snippet>dis</snippet></ROW><ROW><id>10474097</id><snippet>&gt;&gt;&gt; dis.dis("i in (2,3)".encode())
          0 BUILD_MAP       26912
          3 JUMP_FORWARD    10272 (to 10278)
          6 &lt;50&gt;
          7 &lt;44&gt;
          8 &lt;51&gt;
          9 &lt;41&gt;
</snippet></ROW><ROW><id>10474294</id><snippet>using System;
using ICSharpCode.SharpZipLib.BZip2;
using System.IO;

namespace Test
{
    class MainClass
    {
        public static void Main(string[] args)
        {
            var fStream = new FileStream("/home/konrad/output.bin", FileMode.Create);
            using(var writer = new StreamWriter(new BZip2OutputStream(fStream)))
            {
                for(var i = 0; i &lt; 10; i++)
                {
                    writer.WriteLine("Line no {0}.", i);
                }
            }
        }
    }

}
</snippet></ROW><ROW><id>10474294</id><snippet>from bz2 import BZ2File
import sys

f = BZ2File("/home/konrad/output.bin")
for line in f.readlines():
    sys.stdout.write(line)
</snippet></ROW><ROW><id>10474294</id><snippet>$ python ctest.py
Line no 0.
Line no 1.
Line no 2.
Line no 3.
Line no 4.
Line no 5.
Line no 6.
Line no 7.
Line no 8.
Line no 9.
</snippet></ROW><ROW><id>10474359</id><snippet>import watcher
w = watcher.Watcher(dir, callback)
w.flags = watcher.FILE_NOTIFY_CHANGE_FILE_NAME
w.start()
</snippet></ROW><ROW><id>10474359</id><snippet>watcher.FILE_NOTIFY_CHANGE_FILE_NAME</snippet></ROW><ROW><id>10474364</id><snippet>wx.ToolBar</snippet></ROW><ROW><id>10474364</id><snippet>AddLabelTool</snippet></ROW><ROW><id>10474554</id><snippet>from mako.runtime import Context
class CursorContext(Context):
    __slots__=set(('lines', 'position'))

    def __init__(self, *args, **kwargs):
        super(CursorContext, self.__class__).__init__(self, self, *args, **kwargs)
        self.lines=['']
        self.position=None

    def write(self, v):
        ls=s(v).split('\n')
        self.lines[-1]+=ls.pop(0)
        self.lines+=ls

    def _record_position(self):
        if self.position is not None:
            raise ValueError('Position already defined')
        self.position=(len(self.lines), len(self.lines[-1]) if self.lines else 0)

    def _get_position(self):
        if self.position is None:
            self._record_position()
        return self.position

&lt;...&gt;

context=CursorContext(**env) # env is a dictionary with template environment variables
template.render_context(context) # template is mako.template.Template object
# Now template is in context.lines and 
# cursor position can be obtained by context._get_position()
</snippet></ROW><ROW><id>10474896</id><snippet>and</snippet></ROW><ROW><id>10474896</id><snippet>or</snippet></ROW><ROW><id>10474896</id><snippet>False and 2 or 3
</snippet></ROW><ROW><id>10474896</id><snippet>((False and 2) or 3)
</snippet></ROW><ROW><id>10474896</id><snippet>(False and 2)</snippet></ROW><ROW><id>10474896</id><snippet>False</snippet></ROW><ROW><id>10474896</id><snippet>True</snippet></ROW><ROW><id>10474896</id><snippet>3</snippet></ROW><ROW><id>10474896</id><snippet>True</snippet></ROW><ROW><id>10474896</id><snippet>1 or False and 2 or 2 and 0 or 0</snippet></ROW><ROW><id>10474896</id><snippet>(1 or ((False and 2) or ((2 and 0) or 0)))
</snippet></ROW><ROW><id>10474896</id><snippet>1</snippet></ROW><ROW><id>10474896</id><snippet>True</snippet></ROW><ROW><id>10474896</id><snippet>True</snippet></ROW><ROW><id>10474896</id><snippet>and</snippet></ROW><ROW><id>10474896</id><snippet>False</snippet></ROW><ROW><id>10474896</id><snippet>or</snippet></ROW><ROW><id>10474896</id><snippet>True</snippet></ROW><ROW><id>10474906</id><snippet>#tastypie</snippet></ROW><ROW><id>10474906</id><snippet>Rating</snippet></ROW><ROW><id>10474906</id><snippet>PATCH</snippet></ROW><ROW><id>10474906</id><snippet>replace_existing_rating=True</snippet></ROW><ROW><id>10474906</id><snippet>POST</snippet></ROW><ROW><id>10474906</id><snippet>class CommentResource(ModelResource):
    def obj_create(self, bundle, request=None, **kwargs):
        if bundle.data.get("replace_existing_rating", False):
            try:
                bundle.obj = self._meta.object_class._default_manager.get(**conditions)
            except self._meta.object_class.DoesNotExist:
                bundle.obj = self._meta.object_class()
</snippet></ROW><ROW><id>10475145</id><snippet>fp</snippet></ROW><ROW><id>10475145</id><snippet>Asks</snippet></ROW><ROW><id>10475145</id><snippet>plan = Ask.objects.filter(user=request.user)
paginator=Paginator(plan, 5)
###...get you page number
try:
    asks = paginator.page(page)
except (EmptyPage, InvalidPage):
    asks = paginator.page(paginator.num_pages)
extra_data_context.update({'Asks': asks})
</snippet></ROW><ROW><id>10475272</id><snippet>re.findall(r'https?://[^\s&lt;&gt;"]+|www\.[^\s&lt;&gt;"]+', str(STRING))
</snippet></ROW><ROW><id>10475272</id><snippet>[^\s&lt;&gt;"]+</snippet></ROW><ROW><id>10475272</id><snippet>&lt;a href="http://www.example.com/stuff"&gt;
http://www.example.com/stuff&lt;/br&gt;
</snippet></ROW><ROW><id>10475322</id><snippet>if</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>if</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>block
 |
 -&gt; move
     |
     -&gt; row | col
         |
         -&gt; ...keep on calling new functions...          
</snippet></ROW><ROW><id>10475322</id><snippet>def get_val():
    x = None
    while x is None:
        x = raw_input('Give me a value: ')
        try:
            x = int(x)
        except ValueError:
            print('Value must be an integer')
            x = None
    return x

def transform_val(x):
    return x * 2

def main():
    val = get_val()
    val = transform_val(val)
    print(val)
</snippet></ROW><ROW><id>10475322</id><snippet>main
 |
 -&gt; get_val
  &lt;- |
 |
 -&gt; transform_val
  &lt;- |
 |
</snippet></ROW><ROW><id>10475322</id><snippet>main</snippet></ROW><ROW><id>10475322</id><snippet>table</snippet></ROW><ROW><id>10475322</id><snippet>return</snippet></ROW><ROW><id>10475322</id><snippet>main</snippet></ROW><ROW><id>10475322</id><snippet>def main():
    # define some variables here
    block(table)
    while no_winner(table):
        move(table)
</snippet></ROW><ROW><id>10475322</id><snippet>no_winner</snippet></ROW><ROW><id>10475322</id><snippet>return</snippet></ROW><ROW><id>10475322</id><snippet>move</snippet></ROW><ROW><id>10475322</id><snippet>main</snippet></ROW><ROW><id>10475322</id><snippet>__name__</snippet></ROW><ROW><id>10475322</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10475372</id><snippet>testcheck</snippet></ROW><ROW><id>10475372</id><snippet>initial.py</snippet></ROW><ROW><id>10475372</id><snippet># module globals
_TEST_VALUES = {}
valueChanged = False

...

def getTestValue(name):
    return _TEST_VALUES.get('name', None)

def assignValue():
    # do stuff
    result = 'foo'
    _TEST_VALUES['valueOne'] = result
    return result

def assignValueTwo():
    # do stuff
    result = 'bar'
    _TEST_VALUES['valueOne'] = result
    return result

...
</snippet></ROW><ROW><id>10475372</id><snippet>testcheck.assignValue()     
testcheck.assignValueTwo()    
testcheck.checkValues()                          

while testcheck.valueChange:
    testcheck.assignValueTwo()
    testcheck.checkValues()
</snippet></ROW><ROW><id>10475372</id><snippet>import testcheck

...

if testcheck.valueChange:
    try:
        del initial.values['valueTwo']
    except KeyError:
        pass

...
</snippet></ROW><ROW><id>10475372</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>10475452</id><snippet>threading</snippet></ROW><ROW><id>10475452</id><snippet>import threading

import Foo
import Bar

results = {}

def get_a():
    results['a'] = Foo.get_something()
a_thread = threading.Thread(target=get_a)
a_thread.start()

def get_b():
    results['b'] = Bar.get_something_else()
b_thread = threading.Thread(target=get_b)
b_thread.start()
</snippet></ROW><ROW><id>10475452</id><snippet>.join()</snippet></ROW><ROW><id>10475452</id><snippet>a_thread.join()
b_thread.join()
</snippet></ROW><ROW><id>10475452</id><snippet>results['a']</snippet></ROW><ROW><id>10475452</id><snippet>results['b']</snippet></ROW><ROW><id>10475452</id><snippet>output = [results['a'], results['b']]
</snippet></ROW><ROW><id>10475452</id><snippet>multiprocessing</snippet></ROW><ROW><id>10475452</id><snippet>multiprocessing</snippet></ROW><ROW><id>10475452</id><snippet>threading</snippet></ROW><ROW><id>10475835</id><snippet>root = tk.Tk()
...
root.mainloop()
</snippet></ROW><ROW><id>10475835</id><snippet>bind_all</snippet></ROW><ROW><id>10475835</id><snippet>root</snippet></ROW><ROW><id>10475835</id><snippet>bind_all</snippet></ROW><ROW><id>10475835</id><snippet>view.root</snippet></ROW><ROW><id>10475835</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>10475835</id><snippet>main</snippet></ROW><ROW><id>10475835</id><snippet>main</snippet></ROW><ROW><id>10476284</id><snippet>smtp.connect()</snippet></ROW><ROW><id>10476284</id><snippet>smtplib.SMTP(...)</snippet></ROW><ROW><id>10476284</id><snippet>.connect</snippet></ROW><ROW><id>10476284</id><snippet>.connect</snippet></ROW><ROW><id>10476284</id><snippet>localhost</snippet></ROW><ROW><id>10476284</id><snippet># send the message
smtp = smtplib.SMTP("smtp.gmail.com",  587)
smtp.helo()
smtp.starttls()                 # Encrypted connection
smtp.ehlo()
smtp.login(username, password)  # Give your credentials
smtp.sendmail(sender, recipients, themsg)
smtp.quit()
</snippet></ROW><ROW><id>10476328</id><snippet>from datetime import date, timedelta
from models import Item

groups = []
for i in range(0, 10):
    items = Item.objects.filter(date_created=date.today() - timedelta(i))
    groups.append(items.order_by('-points'))
</snippet></ROW><ROW><id>10476508</id><snippet>import pbs
print pbs.nfc_mfclassic("r", "a", "dumptest.mfd")
</snippet></ROW><ROW><id>10476508</id><snippet># This connects to the openbsd ftp site and
# downloads the recursive directory listing.
import pexpect
child = pexpect.spawn ('ftp ftp.openbsd.org')
child.expect ('Name .*: ')
child.sendline ('anonymous')
child.expect ('Password:')
child.sendline ('noah@example.com')
child.expect ('ftp&gt; ')
child.sendline ('cd pub')
child.expect('ftp&gt; ')
child.sendline ('get ls-lR.gz')
child.expect('ftp&gt; ')
child.sendline ('bye')
</snippet></ROW><ROW><id>10476811</id><snippet>chkr.getText()</snippet></ROW><ROW><id>10477018</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; xs, ys = np.loadtxt('/tmp/example.txt', delimiter=',').T
&gt;&gt;&gt; print xs
[ 111.  122.  155.  192.   11.  122.  120.]
&gt;&gt;&gt; print ys
[  3.   4.   3.   5.   9.  10.  23.]
&gt;&gt;&gt; plt.bar(xs, ys)
&lt;Container object of 7 artists&gt;
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>10477105</id><snippet># Please note, the exception class truly is lower cased as indicated
mutagen.id3.error
mutagen.flac.error
mutagen.apev2.error

# mutagen.easyid3 errors extend the mutagen.id3.error class
</snippet></ROW><ROW><id>10477232</id><snippet># yourapp/views/filters.py

import random
from string import ascii_letters, digits

from flask import request, session, redirect
from yourapp import app


def generate_form_token():
    """Sets a token to prevent double posts."""
    if '_form_token' not in session:
        form_token = \
            ''.join([random.choice(ascii_letters+digits) for i in range(32)])
        session['_form_token'] = form_token
    return session['_form_token']


@app.before_request
def check_form_token():
    """Checks for a valid form token in POST requests."""
    if request.method == 'POST':
        token = session.pop('_form_token', None)
        if not token or token != request.form.get('_form_token'):
            redirect(request.url)


app.jinja_env.globals['form_token'] = generate_form_token
</snippet></ROW><ROW><id>10477232</id><snippet>&lt;!-- Again, I've never used WTForms so I'm not sure if this would change when using that app. --&gt;
&lt;input type='hidden' name='_form_token' value='{{ form_token() }}' /&gt;
</snippet></ROW><ROW><id>10477490</id><snippet>import re
pattern = re.compile("&lt;(\d{4,5})&gt;")

for i, line in enumerate(open('test.txt')):
    for match in re.finditer(pattern, line):
        print 'Found on line %s: %s' % (i+1, match.groups())
</snippet></ROW><ROW><id>10477490</id><snippet>?</snippet></ROW><ROW><id>10477490</id><snippet>(...)</snippet></ROW><ROW><id>10477679</id><snippet>with open('/file.txt', 'r') as fp:
    line = fp.readline().rstrip('\n')
    print line

if line == 'Head':
    print "test successed"
elif line == 'Small':
    print line
elif line == 'Big':
    print line
else:
    print line
</snippet></ROW><ROW><id>10477679</id><snippet>readline()</snippet></ROW><ROW><id>10477679</id><snippet>'Head' != 'Head\n'</snippet></ROW><ROW><id>10477698</id><snippet>elif</snippet></ROW><ROW><id>10477698</id><snippet>if foo == bar:
  # do "if"
elif foo == bar:
  # do "elif"
</snippet></ROW><ROW><id>10477698</id><snippet>except</snippet></ROW><ROW><id>10477698</id><snippet> 13           0 SETUP_EXCEPT            10 (to 13)

 14           3 LOAD_GLOBAL              0 (NameError)
              6 RAISE_VARARGS            1
              9 POP_BLOCK           
             10 JUMP_FORWARD            44 (to 57)

 15     &gt;&gt;   13 DUP_TOP             
             14 LOAD_GLOBAL              0 (NameError)
             17 COMPARE_OP              10 (exception match)
             20 POP_JUMP_IF_FALSE       35
             23 POP_TOP             
             24 POP_TOP             
             25 POP_TOP             

 16          26 LOAD_GLOBAL              0 (NameError)
             29 RAISE_VARARGS            1
             32 JUMP_FORWARD            22 (to 57)

 17     &gt;&gt;   35 DUP_TOP             
             36 LOAD_GLOBAL              0 (NameError)
             39 COMPARE_OP              10 (exception match)
             42 POP_JUMP_IF_FALSE       56
             45 POP_TOP             
             46 POP_TOP             
             47 POP_TOP             

 18          48 LOAD_CONST               1 (1)
             51 PRINT_ITEM          
             52 PRINT_NEWLINE       
             53 JUMP_FORWARD             1 (to 57)
        &gt;&gt;   56 END_FINALLY         
        &gt;&gt;   57 LOAD_CONST               0 (None)
             60 RETURN_VALUE        
</snippet></ROW><ROW><id>10477698</id><snippet>COMPARE_OP</snippet></ROW><ROW><id>10477698</id><snippet>NameError</snippet></ROW><ROW><id>10477817</id><snippet>key = row[0] [2:]
</snippet></ROW><ROW><id>10477829</id><snippet>https://dev.twitter.com/docs/rate-limiting</snippet></ROW><ROW><id>10477829</id><snippet>https://dev.twitter.com/docs/streaming-api/methods</snippet></ROW><ROW><id>10477893</id><snippet>def readslice(inputfilename,nx,ny,timeslice):
   f = open(inputfilename,'rb')
   f.seek(8*timeslice*nx*ny)
   field = np.fromfile(f,dtype='float64',count=nx*ny)
   field = np.reshape(field,(nx,ny))
   f.close()
   return field
</snippet></ROW><ROW><id>10477893</id><snippet>np.fromfile</snippet></ROW><ROW><id>10477893</id><snippet>f</snippet></ROW><ROW><id>10477893</id><snippet>np.fromfile</snippet></ROW><ROW><id>10477893</id><snippet>f.seek</snippet></ROW><ROW><id>10477893</id><snippet>readslice</snippet></ROW><ROW><id>10477910</id><snippet>$ python -m timeit 'l = list(range(10000))' 'while l: l = l[1:]'
10 loops, best of 3: 365 msec per loop
$ python -m timeit 'l = list(range(10000))' 'while l: l.pop()'
1000 loops, best of 3: 1.82 msec per loop
$ python -m timeit 'import collections' \
         'l = collections.deque(list(range(10000)))' 'while l: l.pop()'
1000 loops, best of 3: 1.67 msec per loop
</snippet></ROW><ROW><id>10478011</id><snippet>import os.path

def add_text_to_file(self, filename, row_title, input_text):
    # filename should have the .txt extension in it
    filepath = os.path.join("check_files", filename)
    with open(filepath, "r") as f:
        content = f.readlines()

    for j in len(content):
        if row_title in content[j]:
            content[j] = content[j].strip() + input_text + "\n"
            break

    with open(filepath, "w") as f:
        f.writelines(content)
</snippet></ROW><ROW><id>10478119</id><snippet>echo=True</snippet></ROW><ROW><id>10478119</id><snippet>SELECT ... FROM ... WHERE ....id = ? LIMIT ? OFFSET ?</snippet></ROW><ROW><id>10478119</id><snippet>Accounts.key</snippet></ROW><ROW><id>10478119</id><snippet>Query.get</snippet></ROW><ROW><id>10478119</id><snippet>SELECT ... FROM ... WHERE ....id = ?</snippet></ROW><ROW><id>10478270</id><snippet>import tempfile
temp = tempfile.NamedTemporaryFile()

with open("~/somefile.txt") as inf:
    for line in inf:
        if line==line.lstrip():
            temp.write(line)

temp.seek(0) # &lt;=============== ADDED

line = str(temp.readline()).strip()
print line
</snippet></ROW><ROW><id>10478270</id><snippet>temp.readline()</snippet></ROW><ROW><id>10478623</id><snippet>PyList</snippet></ROW><ROW><id>10478623</id><snippet>java.util.List&lt;Object&gt;</snippet></ROW><ROW><id>10478623</id><snippet>PyString</snippet></ROW><ROW><id>10478623</id><snippet>PyUnicode</snippet></ROW><ROW><id>10478623</id><snippet>List pywords = pythonFactoryCreatedObject.pythonMethodReturningPyList();
for (Object o : pyList){
  String string = ((PyString) o).getString();
  //whatever you want to do with it 
}
</snippet></ROW><ROW><id>10478623</id><snippet>List pywords = pythonFactoryCreatedObject.pythonMethodReturningPyList()
for (Object o : pyList){
  String string = ((PyObject) o).__toJava__(String.class);
  //whatever you want to do with it 
}
</snippet></ROW><ROW><id>10479073</id><snippet>open('/dev/sdX', 'r')</snippet></ROW><ROW><id>10479073</id><snippet>dd</snippet></ROW><ROW><id>10479343</id><snippet>&gt;&gt;&gt; rr,tt = zip(*[(i*10, i*12) for i in xrange(4)])
&gt;&gt;&gt; rr
(0, 10, 20, 30)
&gt;&gt;&gt; tt
(0, 12, 24, 36)
</snippet></ROW><ROW><id>10479460</id><snippet>%module test
%include "stdint.i"

uint32_t my_function();
</snippet></ROW><ROW><id>10479460</id><snippet>typedef</snippet></ROW><ROW><id>10479723</id><snippet>pywin32</snippet></ROW><ROW><id>10479792</id><snippet>plot</snippet></ROW><ROW><id>10479792</id><snippet>bool</snippet></ROW><ROW><id>10479792</id><snippet>True</snippet></ROW><ROW><id>10479792</id><snippet>False</snippet></ROW><ROW><id>10479792</id><snippet>bool</snippet></ROW><ROW><id>10479792</id><snippet>plot</snippet></ROW><ROW><id>10479792</id><snippet>if</snippet></ROW><ROW><id>10479792</id><snippet>from whatever import *</snippet></ROW><ROW><id>10479792</id><snippet>plot</snippet></ROW><ROW><id>10479792</id><snippet>pylab</snippet></ROW><ROW><id>10479792</id><snippet>from whatever import plot</snippet></ROW><ROW><id>10479792</id><snippet>plot</snippet></ROW><ROW><id>10479845</id><snippet>list</snippet></ROW><ROW><id>10479845</id><snippet>list</snippet></ROW><ROW><id>10479845</id><snippet>def stripped(strings):
    return [s.strip() for s in strings]
</snippet></ROW><ROW><id>10480441</id><snippet>import zipfile
import os
import sys

def zipfolder(foldername, target_dir):            
    zipobj = zipfile.ZipFile(foldername + '.zip', 'w', zipfile.ZIP_DEFLATED)
    rootlen = len(target_dir) + 1
    for base, dirs, files in os.walk(target_dir):
        for file in files:
            fn = os.path.join(base, file)
            zipobj.write(fn, fn[rootlen:])

zipfolder('thenameofthezipfile', 'thedirectorytobezipped') #insert your variables here
sys.exit()
</snippet></ROW><ROW><id>10480459</id><snippet>profiles</snippet></ROW><ROW><id>10480459</id><snippet>utype = UserType.objects.get(...)
utype.profiles.all()
</snippet></ROW><ROW><id>10480459</id><snippet>userprofiles_from_user_type</snippet></ROW><ROW><id>10480459</id><snippet>class Person:
    def PersonWalk(self):
        ...
</snippet></ROW><ROW><id>10480459</id><snippet>class Person:
    def walk(self):
        ...
</snippet></ROW><ROW><id>10480459</id><snippet>class Service(Model):
    name = models.CharField(max_length=32)

class Person(Model):
    services = models.ManyToManyField('self', through='PersonServiceRel', null=True, related_name='friends', symmetrical=False)

class PersonServiceRel(Model):
    provider = models.ForeignKey(Person, related_name='provided_services')
    consumer = models.ForeignKey(Person, related_name='consumed_services')
    service = models.ForeignKey(Service)
</snippet></ROW><ROW><id>10480459</id><snippet>rantaplan = Person.objects.get(name='rantanplan')
tracking = Service.objects.get(name='tracking')
PersonServiceRel.objects.filter(provider=rantaplan, service=tracking)
# or
rantaplan.provided_services.filter(service=tracking)
</snippet></ROW><ROW><id>10480904</id><snippet>def equal_dicts(d1, d2, ignore_keys):
    d1_filtered = dict((k, v) for k,v in d1.iteritems() if k not in ignore_keys)
    d2_filtered = dict((k, v) for k,v in d2.iteritems() if k not in ignore_keys)
    return d1_filtered == d2_filtered
</snippet></ROW><ROW><id>10480904</id><snippet>def equal_dicts(d1, d2, ignore_keys):
    ignored = set(ignore_keys)
    for k1, v1 in d1.iteritems():
        if k1 not in ignored and (k1 not in d2 or d2[k1] != v1):
            return False
    for k2, v2 in d2.iteritems():
        if k2 not in ignored and k2 not in d1:
            return False
    return True
</snippet></ROW><ROW><id>10480937</id><snippet>o</snippet></ROW><ROW><id>10480937</id><snippet>n = ['A','B','C','D','E']
o = ['A','B','C','D','E','AS','sd','Z','R']
a = sorted(set(o) - set(n))

# a == ['AS', 'R', 'Z', 'sd']
</snippet></ROW><ROW><id>10480937</id><snippet>n = ['A','B','C','D','E']
o = ['A','B','C','D','E','AS','sd','Z','R', 'AS']
s = set(n)
a = sorted(elem for elem in o if elem not in s)

# a == ['AS', 'AS', 'R', 'Z', 'sd']
</snippet></ROW><ROW><id>10480949</id><snippet>autoincrement=True</snippet></ROW><ROW><id>10480949</id><snippet>ForeignKey(...)</snippet></ROW><ROW><id>10480949</id><snippet>join</snippet></ROW><ROW><id>10480949</id><snippet>ForeignKey</snippet></ROW><ROW><id>10480949</id><snippet>join</snippet></ROW><ROW><id>10480949</id><snippet>join(...)</snippet></ROW><ROW><id>10480949</id><snippet>obj = Page
query = DBSession().query(Group.name, Resource.action)\
    .join(Mapper)\
    .join(Resource)\
    .join(obj, Resource.tablename == obj.__tablename__)\
    .filter(obj.id == obj_id)\
    .all()
</snippet></ROW><ROW><id>10480964</id><snippet>\</snippet></ROW><ROW><id>10480964</id><snippet>\</snippet></ROW><ROW><id>10480964</id><snippet>r'\'</snippet></ROW><ROW><id>10480964</id><snippet>'\\'</snippet></ROW><ROW><id>10480964</id><snippet>repr()</snippet></ROW><ROW><id>10480964</id><snippet>path = "D:\Library\Daniel's_Books"
</snippet></ROW><ROW><id>10480964</id><snippet>\D</snippet></ROW><ROW><id>10480964</id><snippet>\L</snippet></ROW><ROW><id>10480964</id><snippet>path = r"D:\Library\Daniel's_Books"
</snippet></ROW><ROW><id>10480964</id><snippet>path = "D:\\Library\\Daniel's_Books"
</snippet></ROW><ROW><id>10480964</id><snippet>\</snippet></ROW><ROW><id>10480964</id><snippet>walk()</snippet></ROW><ROW><id>10480964</id><snippet>join(path,file)</snippet></ROW><ROW><id>10480964</id><snippet>path</snippet></ROW><ROW><id>10480964</id><snippet>root</snippet></ROW><ROW><id>10480964</id><snippet>fsize()</snippet></ROW><ROW><id>10480964</id><snippet>.
+- A
|  +- a
|  +- b
+- B
|  +- a
|  +- b
+- a
+- b
</snippet></ROW><ROW><id>10480964</id><snippet>os.walk()</snippet></ROW><ROW><id>10480964</id><snippet>root, dirs, files</snippet></ROW><ROW><id>10480964</id><snippet>'.', ['A', 'B'], ['a', 'b']
'.\\A', [], ['a', 'b']
'.\\B', [], ['a', 'b']
</snippet></ROW><ROW><id>10480964</id><snippet>root</snippet></ROW><ROW><id>10480964</id><snippet>files</snippet></ROW><ROW><id>10480964</id><snippet>cover.jpg</snippet></ROW><ROW><id>10480964</id><snippet>Daniel's_Books</snippet></ROW><ROW><id>10481306</id><snippet>repr()</snippet></ROW><ROW><id>10481306</id><snippet>a</snippet></ROW><ROW><id>10481306</id><snippet>0.1</snippet></ROW><ROW><id>10481306</id><snippet>&gt;&gt;&gt; a
0.1
&gt;&gt;&gt; print "%.50f" % a
0.10000000000000000555111512312578270211815834045410
</snippet></ROW><ROW><id>10481745</id><snippet>connectSlotsByName</snippet></ROW><ROW><id>10481745</id><snippet>Slot</snippet></ROW><ROW><id>10481745</id><snippet>__name__</snippet></ROW><ROW><id>10481745</id><snippet>on_myButton_clicked</snippet></ROW><ROW><id>10481745</id><snippet>'on_myButton_clicked'</snippet></ROW><ROW><id>10481745</id><snippet>'wrapper'</snippet></ROW><ROW><id>10481745</id><snippet>Slot</snippet></ROW><ROW><id>10481745</id><snippet>'on_myButton_clicked'</snippet></ROW><ROW><id>10481745</id><snippet>functools.wraps</snippet></ROW><ROW><id>10481745</id><snippet>def my_decorator(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        f(*args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>10481745</id><snippet>__name__</snippet></ROW><ROW><id>10481745</id><snippet>functools.wraps</snippet></ROW><ROW><id>10482083</id><snippet>ff = open('a.csv', 'w')
ff.write(codecs.BOM_UTF8)
</snippet></ROW><ROW><id>10482168</id><snippet>multiprocessing</snippet></ROW><ROW><id>10482168</id><snippet>def upload_one(filename):
    """ This function uploads one file.  
        Perhaps is a a wrapper to your Popen call? """
</snippet></ROW><ROW><id>10482168</id><snippet>mylistoffiles=[ ] #Somehow generate your list of files to be uploaded.
import multiprocessing
Pool=multiprocessing.Pool(processes=X)   #X is the number of processes you want to use
Pool.map(upload_one,mylistoffiles)
</snippet></ROW><ROW><id>10482168</id><snippet>p.map(self.upload_files(f), self.files_to_upload)</snippet></ROW><ROW><id>10482168</id><snippet>FTP</snippet></ROW><ROW><id>10482168</id><snippet>p.map</snippet></ROW><ROW><id>10482168</id><snippet>p.map(self.upload_files,self.files_to_upload)
</snippet></ROW><ROW><id>10482168</id><snippet>map</snippet></ROW><ROW><id>10482168</id><snippet>map(function,iterable)
</snippet></ROW><ROW><id>10482168</id><snippet>[function(i) for i in iterable]
</snippet></ROW><ROW><id>10482168</id><snippet>map</snippet></ROW><ROW><id>10482168</id><snippet>map</snippet></ROW><ROW><id>10482168</id><snippet>multiprocessing</snippet></ROW><ROW><id>10482168</id><snippet>import os, sys, subprocess, shutil, re, string, glob, tvdb_api, itertools, multiprocessing, ftplib

#No longer an instance method -- just a regular function.
#accepts an iterable and then splits it as [host,filename]
def upload_files(inpt):
    host=inpt[0]
    f=inpt[1]
    #host,f=inpt  #This might be a little cleaner, depending on your programming style.
    host.storbinary(('STOR /'+f.split('/')[-1]), open(f, 'rb'))

files = [os.path.join(r, f) for r, d, fs in os.walk(os.getcwd()) for f in fs if not f[0]=='.']
class FTP_Upload:
    def __init__(self, p=os.getcwd()):
        self.files_to_upload = sorted([f for f in files if os.path.split(f)[0] == p])
        self.target = raw_input("Enter the host you want to upload to: ")
        self.host = FTP('ftp.host1.com', 'user_name1', 'super_secret_password1') if self.target == 'host' else FTP('ftp.host2.com', 'user_name2', 'secret_password2') if self.target == 'host2' else None
    def multiupload(self):
        p = multiprocessing.Pool(processes=5)
        upload_this=[(self.host,f) for f in self.files_to_upload]
        p.map(upload_files,upload_this)
FTP_Upload().multiupload()
</snippet></ROW><ROW><id>10482628</id><snippet>&gt;&gt;&gt; from itertools import chain 
&gt;&gt;&gt; l = [{'x': 42}, {'x': 23, 'y': 5}]
&gt;&gt;&gt; all_keys = set(chain.from_iterable(l))   
&gt;&gt;&gt; for d in l:
        d.update((k,None) for k in all_keys-d.viewkeys())


&gt;&gt;&gt; l
[{'y': None, 'x': 42}, {'y': 5, 'x': 23}]
</snippet></ROW><ROW><id>10482688</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('P','x y')
&gt;&gt;&gt; pp = Point(1,2)
&gt;&gt;&gt; type(pp)
&lt;class '__main__.P'&gt;
</snippet></ROW><ROW><id>10482688</id><snippet>&gt;&gt;&gt; isinstance(pp,Point)
True
&gt;&gt;&gt; isinstance(pp,P)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'P' is not defined
</snippet></ROW><ROW><id>10482688</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; ppp = pickle.dumps(pp)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python26\lib\pickle.py", line 1366, in dumps
    Pickler(file, protocol).dump(obj)
  File "c:\python26\lib\pickle.py", line 224, in dump
    self.save(obj)
  File "c:\python26\lib\pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "c:\python26\lib\pickle.py", line 401, in save_reduce
    save(args)
  File "c:\python26\lib\pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "c:\python26\lib\pickle.py", line 562, in save_tuple
    save(element)
  File "c:\python26\lib\pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "c:\python26\lib\pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle &lt;class '__main__.P'&gt;: it's not found as __main__.P
</snippet></ROW><ROW><id>10482688</id><snippet>&gt;&gt;&gt; Point = namedtuple('Point','x y')
&gt;&gt;&gt; pp = Point(1,2)
&gt;&gt;&gt; ppp = pickle.dumps(pp)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10482790</id><snippet>foo[len(foo)%2::2] + foo[::-2]

In [1]: foo = range(7)
In [2]: foo[len(foo)%2::2] + foo[::-2]
Out[2]: [1, 3, 5, 6, 4, 2, 0]
In [3]: foo = range(8)
In [4]: foo[len(foo)%2::2] + foo[::-2]
Out[4]: [0, 2, 4, 6, 7, 5, 3, 1]
</snippet></ROW><ROW><id>10483014</id><snippet>import sys
sys.path.append("/home/user/path")
import keyword_sync
import target_milestone_sync
</snippet></ROW><ROW><id>10483014</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>10483014</id><snippet>sys.path</snippet></ROW><ROW><id>10483014</id><snippet>/home/user/path</snippet></ROW><ROW><id>10483014</id><snippet>python uber_sync.py</snippet></ROW><ROW><id>10483014</id><snippet>some/other/dir</snippet></ROW><ROW><id>10483014</id><snippet>python /home/user/path/uber_sync.py</snippet></ROW><ROW><id>10483014</id><snippet>some/other/dir</snippet></ROW><ROW><id>10483096</id><snippet>pip install fexpect</snippet></ROW><ROW><id>10483096</id><snippet>from ilogue.fexpect import expect, expecting, run 

prompts = []
prompts += expect('What is your name?','John')
prompts += expect('Are you at stackoverflow?','Yes')

with expecting(prompts):
    run('my_command')
</snippet></ROW><ROW><id>10483149</id><snippet>__init__.py</snippet></ROW><ROW><id>10483204</id><snippet>super()</snippet></ROW><ROW><id>10483204</id><snippet>super() -&gt; same as super(__class__, &lt;first argument&gt;)
</snippet></ROW><ROW><id>10483204</id><snippet> class Classname(OldStyleParent):
    def __init__(self, *args, **kwargs):
        OldStyleParent.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>10483330</id><snippet>from HTMLParser import HTMLParser

inTD = False

# create a subclass and override the handler methods
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        global inTD
        if tag.upper() == "TD":
            inTD = True
    def handle_endtag(self, tag):
        global inTD
        if tag.upper() == "TD":
            inTD = False
    def handle_data(self, data):
        global inTD
        if inTD:
            print data
</snippet></ROW><ROW><id>10483393</id><snippet>&lt;stdin&gt;</snippet></ROW><ROW><id>10483604</id><snippet>random.py</snippet></ROW><ROW><id>10483604</id><snippet>   315             selected = set()
   316             selected_add = selected.add
   317             for i in range(k):
   318                 j = randbelow(n)
   319                 while j in selected:
   320                     j = randbelow(n)
   321                 selected_add(j)
   322                 result[i] = population[j]
</snippet></ROW><ROW><id>10483604</id><snippet>population</snippet></ROW><ROW><id>10483604</id><snippet>selected</snippet></ROW><ROW><id>10483604</id><snippet>k</snippet></ROW><ROW><id>10483604</id><snippet>k</snippet></ROW><ROW><id>10483604</id><snippet>O(n)</snippet></ROW><ROW><id>10483604</id><snippet>k</snippet></ROW><ROW><id>10483604</id><snippet>n</snippet></ROW><ROW><id>10483604</id><snippet>   303         result = [None] * k
   304         setsize = 21        # size of a small set minus size of an empty list
   305         if k &gt; 5:
   306             setsize += 4 ** _ceil(_log(k * 3, 4)) # table size for big sets
   307         if n &lt;= setsize:
   308             # An n-length list is smaller than a k-length set
   309             pool = list(population)
   310             for i in range(k):         # invariant:  non-selected at [0,n-i)
   311                 j = randbelow(n-i)
   312                 result[i] = pool[j]
   313                 pool[j] = pool[n-i-1]   # move non-selected item into vacancy
   314         else:
   315             selected = set()
   316             selected_add = selected.add
   317             for i in range(k):
   318                 j = randbelow(n)
   319                 while j in selected:
   320                     j = randbelow(n)
   321                 selected_add(j)
   322                 result[i] = population[j]
   323         return result
</snippet></ROW><ROW><id>10483647</id><snippet>session.console.powerDown()</snippet></ROW><ROW><id>10484234</id><snippet>bash</snippet></ROW><ROW><id>10484234</id><snippet>PS1</snippet></ROW><ROW><id>10484234</id><snippet>bash PS1</snippet></ROW><ROW><id>10484234</id><snippet>bash prompt customisation</snippet></ROW><ROW><id>10484234</id><snippet>git bash</snippet></ROW><ROW><id>10484234</id><snippet>bash</snippet></ROW><ROW><id>10484262</id><snippet>"a"</snippet></ROW><ROW><id>10484262</id><snippet>a</snippet></ROW><ROW><id>10484262</id><snippet>inst.write("CONF:VOLT:AC %s" % sys.argv[2])
</snippet></ROW><ROW><id>10484262</id><snippet>int</snippet></ROW><ROW><id>10484262</id><snippet>volt = int(sys.argv[2])
# check if volt is in a suitable range...
inst.write("CONF:VOLT:AC %d" % volt)
</snippet></ROW><ROW><id>10484313</id><snippet>[value for key, value in programs.items() if 'new york' in key.lower()]
</snippet></ROW><ROW><id>10484328</id><snippet>cache_key</snippet></ROW><ROW><id>10484328</id><snippet>from django.conf import settings
from django.core.cache import cache
from django.db.models.signals import post_save
from django.http import HttpRequest
from django.utils.cache import _generate_cache_header_key

from someapp.models import BaseModelofThisClass

class SomeModel(BaseModelofThisClass):
    ...
    @property
    def cache_key(self):
        # Create a fake request object
        request = HttpRequest()
        # Set the request method
        request.method = "GET"
        # Set the request path to be this object's permalink.
        request.path = self.get_absolute_url()
        # Grab the key prefix (if it exists) from settings
        key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX
        # Generate this object's cache key using django's key generator
        key = _generate_cache_header_key(key_prefix, request)
        # This is a bit hacky but necessary as I don't know how to do it
        # properly otherwise. While generating a cache header key, django
        # uses the language of the HttpRequest() object as part of the
        # string. The fake request object, by default, uses
        # settings.LANGUAGE_CODE as it's language (in my case, 'en-us')
        # while the true request objects that are used in building views
        # use settings.LANGUAGES ('en'). Instead of replacing the segment
        # of the string after the fact it would be far better create a more
        # closely mirrored HttpRequest() object prior to passing it to
        # _generate_cache_header_key().
        key = key.replace(settings.LANGUAGE_CODE, settings.LANGUAGES[settings.DEFAULT_LANGUAGE][0])

        return key

    @receiver(post_save)
    def clear_cache_for_this_item(sender, instance, **kwargs):
        # If this is a sub-class of another model
        if sender not in BaseModelofThisClass.__subclasses__():
            return
        else:
            cache.delete(instance.cache_key)
</snippet></ROW><ROW><id>10484334</id><snippet>__getitem__()</snippet></ROW><ROW><id>10484334</id><snippet>&gt;&gt;&gt; class Example (object):
...     pass
... 
&gt;&gt;&gt; example = Example()
&gt;&gt;&gt; setattr(Example, '__getitem__', lambda x, y: 1)
&gt;&gt;&gt; example['something']
1
</snippet></ROW><ROW><id>10484334</id><snippet>&gt;&gt;&gt; class Example(object):
...     def __getitem__(self, item):
...         return self._getitem(item)
... 
&gt;&gt;&gt; example = Example()
&gt;&gt;&gt; setattr(example, '_getitem', lambda x: 1)
&gt;&gt;&gt; example['something']
1
&gt;&gt;&gt; example2 = Example()
&gt;&gt;&gt; setattr(example2, '_getitem', lambda x: 2)
&gt;&gt;&gt; example['something']
1
&gt;&gt;&gt; example2['something']
2
</snippet></ROW><ROW><id>10484363</id><snippet>INSERT INTO OilProvedReservesHistory (US) VALUES (36.533)
</snippet></ROW><ROW><id>10484363</id><snippet>sql = "INSERT INTO " + table + " ("+ fieldname + ") VALUES (%s)"
</snippet></ROW><ROW><id>10484476</id><snippet>reg = "(((0?[1-9])|(1[0-2]))/((1[0-9])|(2[0-9])|(3[0-1])|(0?[0-9])))"</snippet></ROW><ROW><id>10484476</id><snippet>findall</snippet></ROW><ROW><id>10484476</id><snippet>[('4/13', '4', '4', '', '13', '13', '', '', '')]</snippet></ROW><ROW><id>10484476</id><snippet>'4/13'</snippet></ROW><ROW><id>10484802</id><snippet>[test]
recipe = zc.recipe.testrunner
eggs =
    ${buildout:test-packages}
</snippet></ROW><ROW><id>10484802</id><snippet>bin/test -s PACKAGE</snippet></ROW><ROW><id>10484843</id><snippet>(?:...)</snippet></ROW><ROW><id>10484843</id><snippet>reg = "((?:(?:1[0-2])|(?:0?[1-9]))/(?:(?:1[0-9])|(?:2[0-9])|(?:3[0-1])|(?:0?[0-9])))"
</snippet></ROW><ROW><id>10484843</id><snippet>re</snippet></ROW><ROW><id>10484843</id><snippet>&gt;&gt;&gt; text='4/13'
&gt;&gt;&gt; reg = "((?:(?:1[0-2])|(?:0?[1-9]))/(?:(?:1[0-9])|(?:2[0-9])|(?:3[0-1])|(?:0?[0-9])))"
&gt;&gt;&gt; re.findall(reg, text, re.IGNORECASE)
['4/13']
</snippet></ROW><ROW><id>10485600</id><snippet>print '20{0:02d}{1:02d}01'.format(y, m)
</snippet></ROW><ROW><id>10485719</id><snippet>import string
</snippet></ROW><ROW><id>10485719</id><snippet>str.ljust
str.rjust
str.center
</snippet></ROW><ROW><id>10485719</id><snippet>string</snippet></ROW><ROW><id>10485719</id><snippet>setJustification</snippet></ROW><ROW><id>10485748</id><snippet>.name</snippet></ROW><ROW><id>10485748</id><snippet>os.path.abspath</snippet></ROW><ROW><id>10485748</id><snippet>args = parser.parse_args()
path = os.path.abspath(args.file.name)
</snippet></ROW><ROW><id>10485940</id><snippet>In [1]: import numpy

In [2]: complex = {'field' : 'attribute'}

In [3]: class ReallyComplex(dict):
   ...:     pass
   ...: 

In [4]: a = numpy.array([complex,ReallyComplex(),0,'this is a string'])

In [5]: a
Out[5]: array([{'field': 'attribute'}, {}, 0, this is a string], dtype=object)
In [6]: subsection = a[2:]

In [7]: subsection
Out[7]: array([0, this is a string], dtype=object)
</snippet></ROW><ROW><id>10485940</id><snippet>dtype</snippet></ROW><ROW><id>10485940</id><snippet>object</snippet></ROW><ROW><id>10485940</id><snippet> std_list = ['this is a string', 0, {'field' : 'attribute'}]
 std_list[2:]
</snippet></ROW><ROW><id>10485998</id><snippet>Series.interpolate</snippet></ROW><ROW><id>10485998</id><snippet>len(serie)</snippet></ROW><ROW><id>10485998</id><snippet>Series.interpolate</snippet></ROW><ROW><id>10485998</id><snippet>interpolate</snippet></ROW><ROW><id>10485998</id><snippet>import numpy as np
from pandas import *

def interpolate(serie):
    try:
        inds = np.array([float(d) for d in serie.index])
    except ValueError:
        inds = np.arange(len(serie))

    values = serie.values

    invalid = isnull(values)
    valid = -invalid

    firstIndex = valid.argmax()
    valid = valid[firstIndex:]
    invalid = invalid[firstIndex:]
    inds = inds[firstIndex:]

    result = values.copy()
    result[firstIndex:][invalid] = np.interp(inds[invalid], inds[valid],
                                             values[firstIndex:][valid])

    return Series(result, index=serie.index, name=serie.name)
</snippet></ROW><ROW><id>10486078</id><snippet>import arcpy
from arcpy import env
env.workspace = ('C:\\StudyAreas\\Aggregates.gdb')
InFolder = ('C:\\dre\\python\\tables')
OutputFile = open(InFolder + '\\' + 'RasterProps.txt', 'a')
rlist = arcpy.ListRasters('*','*')
for grid in rlist:
    if grid[-8:] == "Clip_30m":
        resultX = arcpy.GetRasterProperties_management(grid,'CELLSIZEX')
        CellSizeX = resultX.getOutput(0)
        resultY = arcpy.GetRasterProperties_management(grid,'CELLSIZEY')
        CellSizeY = resultY.getOutput(0)
OutputFile.write(grid + ',' + str(CellSizeX) + ',' + str(CellSizeY) + '\n')
OutputFile.close()
</snippet></ROW><ROW><id>10486278</id><snippet>def remove_html_tags(data):
    p = re.compile(r'&lt;.*?&gt;')
    return p.sub('', data)
</snippet></ROW><ROW><id>10486278</id><snippet>&lt;img .... /&gt;</snippet></ROW><ROW><id>10486278</id><snippet>def remove_img_tags(data):
    p = re.compile(r'&lt;img.*?/&gt;')
    return p.sub('', data)
</snippet></ROW><ROW><id>10486286</id><snippet>UPDATE %s
   SET US=%s
   WHERE ID=%s
</snippet></ROW><ROW><id>10486341</id><snippet>minOccurs</snippet></ROW><ROW><id>10486684</id><snippet>.pyc</snippet></ROW><ROW><id>10486684</id><snippet>-O</snippet></ROW><ROW><id>10486684</id><snippet>-OO</snippet></ROW><ROW><id>10486684</id><snippet>pyo</snippet></ROW><ROW><id>10486684</id><snippet>-O</snippet></ROW><ROW><id>10486684</id><snippet>-OO</snippet></ROW><ROW><id>10486684</id><snippet>__doc__</snippet></ROW><ROW><id>10486684</id><snippet>-OO</snippet></ROW><ROW><id>10486684</id><snippet>.pyc</snippet></ROW><ROW><id>10487617</id><snippet>errors=</snippet></ROW><ROW><id>10487617</id><snippet>errors=ignore</snippet></ROW><ROW><id>10487617</id><snippet>errors=replace</snippet></ROW><ROW><id>10487617</id><snippet>io.TextIOWrapper</snippet></ROW><ROW><id>10487617</id><snippet>charmap</snippet></ROW><ROW><id>10487617</id><snippet>utf-8</snippet></ROW><ROW><id>10487617</id><snippet>f = open('misc-notes.txt', encoding='utf-8', errors='ignore')
</snippet></ROW><ROW><id>10487617</id><snippet>read()</snippet></ROW><ROW><id>10487617</id><snippet>your_string.decode('utf-8', 'replace')
</snippet></ROW><ROW><id>10487617</id><snippet>your_string.decode('utf-8', 'ignore')
</snippet></ROW><ROW><id>10487617</id><snippet>utf-8</snippet></ROW><ROW><id>10487668</id><snippet>pythoncomplete</snippet></ROW><ROW><id>10487668</id><snippet>pythoncomplete</snippet></ROW><ROW><id>10487668</id><snippet>import</snippet></ROW><ROW><id>10487862</id><snippet>fopen("~foo")</snippet></ROW><ROW><id>10487862</id><snippet>"~foo"</snippet></ROW><ROW><id>10487862</id><snippet>fopen("~administrator")</snippet></ROW><ROW><id>10487910</id><snippet>'^recipes/search/(?P&lt;term&gt;\d+)/$'</snippet></ROW><ROW><id>10487910</id><snippet>/recipes/search/123456/</snippet></ROW><ROW><id>10487910</id><snippet>'^recipes/search/(?P&lt;term&gt;[-\w]+)/$'</snippet></ROW><ROW><id>10488446</id><snippet>l = list()
l.add(tuple(username, socket))

print l[0][0], l[0][1] # will print username and soket of first item
</snippet></ROW><ROW><id>10488446</id><snippet>class UserSock:
    def __init__(self, username, socket):
        self.username = username
        self.socket = socket

l = list()
l.add(UserSock(username, socket))

print l[0].username l[0].socket # will print username and soket of first item
</snippet></ROW><ROW><id>10488534</id><snippet>savefig()</snippet></ROW><ROW><id>10488534</id><snippet>plt.savefig('fig1.png', transparent=1)</snippet></ROW><ROW><id>10488534</id><snippet>ax2.patch.set_facecolor('None')</snippet></ROW><ROW><id>10488607</id><snippet>April \d\d?\b</snippet></ROW><ROW><id>10488651</id><snippet>main()</snippet></ROW><ROW><id>10488651</id><snippet>test()</snippet></ROW><ROW><id>10488651</id><snippet>print</snippet></ROW><ROW><id>10488651</id><snippet>print</snippet></ROW><ROW><id>10488651</id><snippet>def main():
    print(raw_input("Will print something "))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10488739</id><snippet>a</snippet></ROW><ROW><id>10488739</id><snippet>b</snippet></ROW><ROW><id>10488739</id><snippet>a_sep = [x.split('/')[1] for x in a]
idxs = [i for i, x in enumerate(a_sep) if x in b]
</snippet></ROW><ROW><id>10488739</id><snippet>b</snippet></ROW><ROW><id>10488739</id><snippet>&gt;&gt;&gt; a = ['####/boo', '####/baa', '####/bee', '####/bii', '####/buu']
&gt;&gt;&gt; b = ['boo', 'aaa', 'bii']
&gt;&gt;&gt; a_sep = [x.split('/')[1] for x in a]
&gt;&gt;&gt; idxs = [i for i, x in enumerate(a_sep) if x in b]
&gt;&gt;&gt; idxs
[0, 3]
&gt;&gt;&gt; [a[i] for i in idxs]
['####/boo', '####/bii']
</snippet></ROW><ROW><id>10488739</id><snippet>&gt;&gt;&gt; a = ['####/boo', '####/baa', '####/bee', '####/bii', '####/buu']
&gt;&gt;&gt; b = ['boo', 'aaa', 'bii']
&gt;&gt;&gt; [x for x in a if x.split('/')[1] in b]
['####/boo', '####/bii']
</snippet></ROW><ROW><id>10488818</id><snippet>s = "x greater than 10" if x &gt; 10 else "x less or equals 10"
</snippet></ROW><ROW><id>10489256</id><snippet>width</snippet></ROW><ROW><id>10489256</id><snippet>int</snippet></ROW><ROW><id>10489256</id><snippet>width = ins.width
</snippet></ROW><ROW><id>10489900</id><snippet>&gt;&gt;&gt; x = re.search("sub(\d+)\.domain\.com\/(\d+)","sub123.domain.com/546").groups()
('123', '546')
&gt;&gt;&gt; url = "%s blah blah %s" % x
</snippet></ROW><ROW><id>10490091</id><snippet>EchoHandler</snippet></ROW><ROW><id>10490091</id><snippet>class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            raise asyncore.ExitNow('Server is quitting!')
</snippet></ROW><ROW><id>10490091</id><snippet>ExitNow</snippet></ROW><ROW><id>10490091</id><snippet>def run(config):
    instance = LockServer(config)
    try:
        asyncore.loop()
    except asyncore.ExitNow, e:
        print e
</snippet></ROW><ROW><id>10490298</id><snippet>__init__.py</snippet></ROW><ROW><id>10490589</id><snippet>m/(.*\\)(.*\\)(.*)/</snippet></ROW><ROW><id>10490589</id><snippet>$mydir</snippet></ROW><ROW><id>10490589</id><snippet>$mydir</snippet></ROW><ROW><id>10490589</id><snippet>Asdf\fdsa\jkl</snippet></ROW><ROW><id>10490589</id><snippet>$junk1 = Asdf\</snippet></ROW><ROW><id>10490589</id><snippet>$filename = fdsa\</snippet></ROW><ROW><id>10490589</id><snippet>$junk2 = jkl</snippet></ROW><ROW><id>10490589</id><snippet>$filename =~ s/\\//;
</snippet></ROW><ROW><id>10490589</id><snippet>$filename</snippet></ROW><ROW><id>10490589</id><snippet>fdsa\</snippet></ROW><ROW><id>10490589</id><snippet>s/stuff_to_match/stuff_to_substitute_with/</snippet></ROW><ROW><id>10490589</id><snippet>re</snippet></ROW><ROW><id>10490652</id><snippet>__radd__</snippet></ROW><ROW><id>10490652</id><snippet>__le__()</snippet></ROW><ROW><id>10490652</id><snippet>__ge__()</snippet></ROW><ROW><id>10490652</id><snippet>__lt__</snippet></ROW><ROW><id>10490652</id><snippet>a &gt; b</snippet></ROW><ROW><id>10490652</id><snippet>__lt__</snippet></ROW><ROW><id>10490652</id><snippet>b</snippet></ROW><ROW><id>10490652</id><snippet>&gt;&gt;&gt; class My_Num(object):
...     def __init__(self, val):
...         self.val = val
...     def __radd__(self, other_num):
...         if isinstance(other_num, My_Num):
...             return self.val + other_num.val
...         else:
...             return self.val + other_num
... 
&gt;&gt;&gt; n1 = My_Num(1)
&gt;&gt;&gt; n2 = 3
&gt;&gt;&gt; 
&gt;&gt;&gt; print n2 + n1
4
&gt;&gt;&gt; print n1 + n2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'My_Num' and 'int'
</snippet></ROW><ROW><id>10490652</id><snippet>&gt;&gt;&gt; class My_Num(object):
...     def __init__(self, val):
...         self.val = val
...     def __add__(self, other_num):
...         if isinstance(other_num, My_Num):
...             return self.val + other_num.val
...         else:
...             return self.val + other_num
...     __radd__ = __add__
</snippet></ROW><ROW><id>10490836</id><snippet>bonedict = {'boneList_head': ['def_neck', 'def_armbase']}
itemType='head'

def selectBones(itemType):
    bones = bonedict['boneList_' + itemType]
    for bone in bones:
        cmds.select(bone, tgl=True)
</snippet></ROW><ROW><id>10490836</id><snippet>sys.modules</snippet></ROW><ROW><id>10490836</id><snippet>eval</snippet></ROW><ROW><id>10490836</id><snippet>eval</snippet></ROW><ROW><id>10490836</id><snippet>eval</snippet></ROW><ROW><id>10490836</id><snippet>goto</snippet></ROW><ROW><id>10490836</id><snippet>goto</snippet></ROW><ROW><id>10490836</id><snippet>goto</snippet></ROW><ROW><id>10490836</id><snippet>eval</snippet></ROW><ROW><id>10491145</id><snippet>&gt;&gt;&gt;&gt; u"ひらがな".encode("utf-8") == "ひらがな"
True
</snippet></ROW><ROW><id>10491145</id><snippet>write</snippet></ROW><ROW><id>10491145</id><snippet>u</snippet></ROW><ROW><id>10491145</id><snippet>str</snippet></ROW><ROW><id>10491145</id><snippet>tempfile</snippet></ROW><ROW><id>10491145</id><snippet>str</snippet></ROW><ROW><id>10491152</id><snippet>import numpy as np
import matplotlib.pyplot as plt
x, y = np.meshgrid(np.arange(10),np.arange(10))
z = np.sqrt(x**2 + y**2)
cs = plt.contourf(x,y,z,levels=[2,3,4,6])

proxy = [plt.Rectangle((0,0),1,1,fc = pc.get_facecolor()[0]) 
    for pc in cs.collections]

plt.legend(proxy, ["range(2-3)", "range(3-4)", "range(4-6)"])
plt.show()
</snippet></ROW><ROW><id>10491191</id><snippet>with open('/tmp/example.txt') as f:
  lines_in = f.readlines()

inside_block = False
lines_out = []

for line in lines_in:
  if line.startswith('&amp;bull; '):
    if not inside_block:
      lines_out.append('&lt;ul&gt;\n')
      inside_block = True
    lines_out.append('&lt;li&gt;{}&lt;/li&gt;\n'.format(line.strip().replace('&amp;bull; ','')))
  else:
    if inside_block:
      lines_out.append('&lt;/ul&gt;\n')
      inside_block = False
    lines_out.append(line)

print ''.join(lines_in)
print '-'*78
print ''.join(lines_out)
</snippet></ROW><ROW><id>10491191</id><snippet>[~/Desktop]
|7&gt;run /tmp/spam.py
spam
&amp;bull; item 1
&amp;bull; item 2
&amp;bull; item 3
and eggs

------------------------------------------------------------------------------
spam
&lt;ul&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;li&gt;item 3&lt;/li&gt;
&lt;/ul&gt;
and eggs
</snippet></ROW><ROW><id>10491332</id><snippet>sword</snippet></ROW><ROW><id>10491332</id><snippet>None</snippet></ROW><ROW><id>10491332</id><snippet>None</snippet></ROW><ROW><id>10491332</id><snippet> sword = None

 # do lots of stuff here

 if sword is None:
    print 'Hey, no sword!'
 else:
    print 'Chop, chop, chop!'
</snippet></ROW><ROW><id>10491332</id><snippet> if sword:
    print 'Chop, chop, chop.'
</snippet></ROW><ROW><id>10491332</id><snippet> try:
    if sword == 10:
        print 'Choppity chop chop chop.'
 except NameError:
    pass
</snippet></ROW><ROW><id>10491560</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; foo = "jessica\n\n\nhello\n\n\n\nhow are you doing?"
&gt;&gt;&gt; re.sub('(\n{1,2})\n*', '\g&lt;1&gt;', foo)
'jessica\n\nhello\n\nhow are you doing?'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10491627</id><snippet>with open('/tmp/file1') as f:
  lines1 = f.readlines()

with open('/tmp/file2') as f:
  for line in f:
    if any(line.startswith(x.strip()) for x in lines1):
      print line,
</snippet></ROW><ROW><id>10492009</id><snippet>/                      # Match an opening slash
(                      # Followed by one or more...
  \\.                  #    Backslash followed by any character
  |                    #   or...
  [^[/\\\n]            #    Something that's not a [, /, \, or newline
  |                    #   or...
  \[                   #    A literal [, followed by any number of...
    (
      \\.              #     backslashes followed by any character
      |                #     or...
      [^\]\\\n]        #     something that's not a ], \, or newline
    )*
  ]                    #    and ending with a ]
)+
/                      # And a closing slash
(
  [gim]+\b             # Followed by one or more of g, i, m
  |
  \B                   # or something that isn't a word boundary
)
</snippet></ROW><ROW><id>10492324</id><snippet>Istack1 = np.array(Istack1, np.float)
Istack2 = np.array(Istack2, np.float)
</snippet></ROW><ROW><id>10492355</id><snippet>d.dish.dishType.name</snippet></ROW><ROW><id>10492355</id><snippet>'dishTypeName'</snippet></ROW><ROW><id>10492355</id><snippet>        menuDic[str(menu.id)]['menuDishes'][str(d.dish.dishType.name)]\
               ['dishTypeName'] = d.dish.dishType.name
</snippet></ROW><ROW><id>10492355</id><snippet>d.dish.dishType.name[str(d.dish.id)] = {}</snippet></ROW><ROW><id>10492355</id><snippet>        menuDic[str(menu.id)]['menuDishes'][str(d.dish.dishType.name)]\
               ['dishTypeName'][str(d.dish.id)] = {}
</snippet></ROW><ROW><id>10492355</id><snippet>d.dish.dishType.name</snippet></ROW><ROW><id>10492722</id><snippet>F = A &gt;&gt; B &gt;&gt; C &gt;&gt; D &gt;&gt; E
</snippet></ROW><ROW><id>10492722</id><snippet>F = Deferred(A,B) &gt;&gt; C &gt;&gt; D &gt;&gt; E
F = Deferred(A,B,C) &gt;&gt; D &gt;&gt; E
F = Deferred(A,B,C,D) &gt;&gt; E
F = Deferred(A,B,C,D,E)
</snippet></ROW><ROW><id>10492722</id><snippet>class Var(object):
    def __init__(self):
        pass

    @property
    def name(self):
        return self._name( )

    @property
    def length(self):
        return len(self.name)


class Actual(Var):
    def __init__(self, name):
        Var.__init__(self)
        self._text = name

    def _name(self):
        return self._text

    def __rshift__(self, other):
        if isinstance(other, Actual):
            return Deferred(self, other)

        return len(self.name)

    @staticmethod
    def NewFromShiftComputation(sequence):
        x = ' &gt;&gt; '.join(reversed(map(lambda actual: actual.name, sequence)))
        return Actual(x)



class Deferred(Var):
    def __init__(self, *args):
        Var.__init__(self)

        self._items  = [ ]
        self._actual = None  #-- cached "actual"

        for item in args:
            self._items.append(item)

    def _name(self):
        self._assure_actual( )
        return self._actual.name

    def __rshift__(self, other):
        self._actual = None  #-- Invalidate the cached "actual"
        self._items.append(other)
        return self

    def _assure_actual(self):
        if self._actual is None:
            self._actual = Actual.NewFromShiftComputation(self._items)



A = Actual('A')
B = Actual('B')
C = Actual('C')
D = Actual('D')
E = Actual('E')

F = A &gt;&gt; B &gt;&gt; C &gt;&gt; D &gt;&gt; E

print F.name
print F.length
</snippet></ROW><ROW><id>10492825</id><snippet>print(mymodel_list.filter(a=i).filter(arrl=j).all(),end='')
</snippet></ROW><ROW><id>10493018</id><snippet>get_days(month)</snippet></ROW><ROW><id>10493018</id><snippet>def get_year():
    year = raw_input("Please enter the year: ")
    return int(year) #otherwise it is a string!

def get_month():
    month = raw_input("Please enter the month: ")
    return month

def leap_year(year):
    if year % 4 == 0:
        return True
    else:
        return False

def get_days(month,leap_year): #leap_year must be passes to this function
    #This checks for "january" and "february" with leap years
    #and falls back to last option on EVERYTHING ELSE like a feb without a leap year or even a "march"
    if month == "january":
        print "31 days"
    elif month == "february" and leap_year == True:
        print "29 days"
    else:
        print "28 days"

    #this is a separate block that runs AFTER the previous block
    if month == "march":
        print "31 days"
    elif month == "april":
        print "30 days"
    elif month == "may":
        print "31 days"
    elif month == "june":
        print "30 days"
    elif month == "july":
        print "31 days"
    elif month == "august":
        print "31 days"
    elif month == "september":
        print "30 days"
    elif month == "october":
        print "31 days"
    elif month == "november":
        print "30 days"
    elif month == "december":
        print "31 days"
    else:
        print "invalid input" #so that it doesnt fail silently when I enter 2

def main():
    user_year = get_year()
    user_month = get_month()
    leap_status = leap_year(user_year) #store the leap_year status to a variable
    get_days(user_month, leap_status)  #and then pass it to a function

main()
</snippet></ROW><ROW><id>10493071</id><snippet>def _assign_custom_str(x):
        def _show_ticker(self):                
            return self.ticker
        x.__class__.__str__ = _show_ticker
        x.__class__.__repr__ = _show_ticker
        return x
</snippet></ROW><ROW><id>10493071</id><snippet>Dummy</snippet></ROW><ROW><id>10493113</id><snippet>onclick</snippet></ROW><ROW><id>10493113</id><snippet>import re
result = re.sub("\D", "", html_string)[1:]
</snippet></ROW><ROW><id>10493113</id><snippet>\D</snippet></ROW><ROW><id>10493113</id><snippet>javascript:void(0)</snippet></ROW><ROW><id>10493113</id><snippet>&lt;a href="javascript:void(0);" onclick="viewsite(</snippet></ROW><ROW><id>10493113</id><snippet>a</snippet></ROW><ROW><id>10493113</id><snippet>a</snippet></ROW><ROW><id>10493113</id><snippet>import re
result = re.sub("\D", "", a['onclick'])
</snippet></ROW><ROW><id>10493302</id><snippet>import random

class person():
    def __init__(self):
        self.height = 3.0
        self.weight = 240.0
        self.temp = 99.23

        self.attrlist = ['height', 'weight', 'temp']

    def grow(self):
        rand_attr = random.choice(self.attrlist)
        attr_value = getattr(self, rand_attr)
        setattr(self, rand_attr, attr_value + 26.0)
</snippet></ROW><ROW><id>10493319</id><snippet>button -label "TransX" -w 100 -c "python(\"print hello\");";
</snippet></ROW><ROW><id>10493319</id><snippet>python("print hello");
</snippet></ROW><ROW><id>10493709</id><snippet>try:
    shutil.copytree(srcdir, dstdir)
except shutil.Error, exc:
    errors = exc.args[0]
    for error in errors:
        src, dst, msg = error
        # Get the path to the file in Gold dir here from src
        shutil.copy2(goldsrc, dst)
</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>type</snippet></ROW><ROW><id>10493850</id><snippet>type(object) == type      # True
</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>object.__bases__ == ()    # True
</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>__metaclass__</snippet></ROW><ROW><id>10493850</id><snippet>type</snippet></ROW><ROW><id>10493850</id><snippet>type</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>type</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>type</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493850</id><snippet>object</snippet></ROW><ROW><id>10493936</id><snippet>cache</snippet></ROW><ROW><id>10493936</id><snippet>cache</snippet></ROW><ROW><id>10493936</id><snippet>f</snippet></ROW><ROW><id>10493936</id><snippet>id()</snippet></ROW><ROW><id>10493962</id><snippet>MATRIX</snippet></ROW><ROW><id>10493962</id><snippet>class test:
    MATRIX = []

    @classmethod     # Note classmethod, not staticmethod   
    def fun1(cls):   # cls will be test here
        test.fun2(cls.MATRIX)

    @staticmethod
    def fun2(MATRIX):
        MATRIX.append(2)

test.fun1()    
print test.MATRIX
</snippet></ROW><ROW><id>10494427</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>10494427</id><snippet>dateutil</snippet></ROW><ROW><id>10494427</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse("Tue May 08 15:14:45 +0800 2012")
datetime.datetime(2012, 5, 8, 15, 14, 45, tzinfo=tzoffset(None, 28800))
</snippet></ROW><ROW><id>10494517</id><snippet>xmlns="http://www.w3.org/2000/svg"</snippet></ROW><ROW><id>10494517</id><snippet>SVG_NS = "http://www.w3.org/2000/svg"

def parse_xml():
    tree = ElementTree()
    tree.parse("torso-human.svg")                        
    for node in tree.findall('.//{%s}rect' % SVG_NS):
        print 'n=', node
</snippet></ROW><ROW><id>10494987</id><snippet>get_all</snippet></ROW><ROW><id>10495011</id><snippet>from distutils.core import setup, Extension

module1 = Extension('demo',
                    define_macros = [('MAJOR_VERSION', '1'),
                                     ('MINOR_VERSION', '0')],
                    include_dirs = ['/usr/local/include'],
                    libraries = ['tcl83'],
                    library_dirs = ['/usr/local/lib'],
                    sources = ['demo.c'])

setup (name = 'PackageName',
       version = '1.0',
       description = 'This is a demo package',
       author = 'Martin v. Loewis',
       author_email = 'martin@v.loewis.de',
       url = 'http://docs.python.org/extending/building',
       long_description = '''
This is really just a demo package.
''',
       ext_modules = [module1])
</snippet></ROW><ROW><id>10495011</id><snippet>demo.c</snippet></ROW><ROW><id>10495011</id><snippet>import demo</snippet></ROW><ROW><id>10495193</id><snippet>ast</snippet></ROW><ROW><id>10495193</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; raw = r"r'\nasdf'"
&gt;&gt;&gt; ast.literal_eval(raw)
'\\nasdf'
&gt;&gt;&gt; raw = r"'\nasdf'"
&gt;&gt;&gt; ast.literal_eval(raw)
'\nasdf'
</snippet></ROW><ROW><id>10495193</id><snippet>eval()</snippet></ROW><ROW><id>10495534</id><snippet>sys.argv[7]</snippet></ROW><ROW><id>10495534</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>10495538</id><snippet>RequestContext</snippet></ROW><ROW><id>10495555</id><snippet>&amp;#10</snippet></ROW><ROW><id>10495555</id><snippet>def parse_dialog(self, elem):
    self.out('')
    self.out("item_dialog(id='{0}', text='{1}', type='{2}')".format(
       escape_string(elem.attrib['id']),
       escape_string(elem.attrib['text']),
       escape_string( elem.attrib['type']) ))

def escape_string(s):
  ... 
</snippet></ROW><ROW><id>10495629</id><snippet>print reportlab.Version
</snippet></ROW><ROW><id>10495755</id><snippet>%module packet
%include "stdint.i"

%{
    #include "packet.h"
%}

%include "carrays.i"
%array_class(uint8_t, buffer);

%include "packet.h"
</snippet></ROW><ROW><id>10495755</id><snippet>a = packet.buffer(10000000) 
p = packet.CPacketBuffer(a.cast(), 10000000)
</snippet></ROW><ROW><id>10495755</id><snippet>uint8_t*</snippet></ROW><ROW><id>10495755</id><snippet>frompointer</snippet></ROW><ROW><id>10495755</id><snippet>%array_class</snippet></ROW><ROW><id>10495755</id><snippet>r = packet.GetBuffer()
buf = packet.buffer_frompointer(r)
</snippet></ROW><ROW><id>10495755</id><snippet>std::vector</snippet></ROW><ROW><id>10496529</id><snippet>sys.path.insert(0, '/srv/www')

os.environ['DJANGO_SETTINGS_MODULE'] = 'alex.settings'
</snippet></ROW><ROW><id>10496529</id><snippet>settings.py</snippet></ROW><ROW><id>10496529</id><snippet>/srv/www/alex/</snippet></ROW><ROW><id>10496529</id><snippet>settings.py</snippet></ROW><ROW><id>10496529</id><snippet>/srv/www/alex/alex/</snippet></ROW><ROW><id>10496529</id><snippet>/srv/www/alex/</snippet></ROW><ROW><id>10496529</id><snippet>alex.settings</snippet></ROW><ROW><id>10496798</id><snippet>from django.db import models

class SuperModel(models.Model):
    class Meta:
        app_label = 'APP_ROOT'
</snippet></ROW><ROW><id>10496798</id><snippet>app_label</snippet></ROW><ROW><id>10496798</id><snippet>Meta</snippet></ROW><ROW><id>10496798</id><snippet>Meta</snippet></ROW><ROW><id>10496798</id><snippet>models.py</snippet></ROW><ROW><id>10497105</id><snippet>No module named numpy</snippet></ROW><ROW><id>10497105</id><snippet>sys.path</snippet></ROW><ROW><id>10497105</id><snippet>sys.path</snippet></ROW><ROW><id>10497105</id><snippet>writelines()</snippet></ROW><ROW><id>10497105</id><snippet>f_out.write( f_in.read() )
</snippet></ROW><ROW><id>10497105</id><snippet>while True:
    data = f_in.read( 10240 )
    if not data: break
    f_out.write( data )
</snippet></ROW><ROW><id>10497719</id><snippet>catalog = self.context.portal_catalog
my_keys = catalog.uniqueValuesFor('Subject')
</snippet></ROW><ROW><id>10498016</id><snippet>n</snippet></ROW><ROW><id>10498016</id><snippet>n</snippet></ROW><ROW><id>10498016</id><snippet>mystr = "StackOverflow"    
from collections import deque    
window = deque(maxlen=5)
for char in mystr:
    window.append(char)
    print (''.join([c for c in window]) )
</snippet></ROW><ROW><id>10498016</id><snippet>S
St
Sta
Stac
Stack
tackO
ackOv
ckOve
kOver
Overf
verfl
erflo
rflow
</snippet></ROW><ROW><id>10498080</id><snippet>return</snippet></ROW><ROW><id>10498080</id><snippet>for</snippet></ROW><ROW><id>10498080</id><snippet>for status in statuses:

    print "%s\t%s\t%s\t%s" % (status.text,
                              status.author.screen_name,
                              status.created_at,
                              status.source,)

    cur.execute("INSERT INTO tweets VALUES (%s, %s, %s, %s)", (status.text,
                                                               status.author.screen_name,
                                                               status.created_at,
                                                               status.source))

return render_to_response('dashboard.html',{'statuses': statuses},context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10498166</id><snippet>&gt;&gt;&gt; d = {"foo": 12, "bar": 2, "jim": 4, "bob": 17}
&gt;&gt;&gt; [k for k, v in d.items() if v &gt; 6] # Use d.iteritems() on python 2.x
['bob', 'foo']
</snippet></ROW><ROW><id>10498280</id><snippet>import json

json_data = open('/static/prices.json')   
data1 = json.load(json_data) // deserialises it
data2 = json.dumps(json_data) // json formatted string

json_data.close()
</snippet></ROW><ROW><id>10498485</id><snippet>for item, qty in cart.items():
    print "{0:{1}} - {2}".format(item, column_width, qty)
</snippet></ROW><ROW><id>10498499</id><snippet>inst.write("apply:SIN %s %s" % (sys.argv[2], sys.argv[3]))
</snippet></ROW><ROW><id>10498499</id><snippet>inst.write("apply:SIN %s, %s" % (sys.argv[2], sys.argv[3]))
</snippet></ROW><ROW><id>10498890</id><snippet>brew install boost-build</snippet></ROW><ROW><id>10498890</id><snippet>bjam</snippet></ROW><ROW><id>10499432</id><snippet>def post(self):
  """
  username: Get the username from POST dict
  password: Get the password from POST dict
  """
  username = self.request.POST.get('username')
  password = self.request.POST.get('password')
  # Try to login user with password
  # Raises InvalidAuthIdError if user is not found
  # Raises InvalidPasswordError if provided password doesn't match with specified user
  try:
    self.auth.get_user_by_password(username, password)
    self.redirect('/secure')
  except (InvalidAuthIdError, InvalidPasswordError), e:
    # Returns error message to self.response.write in the BaseHandler.dispatcher
    # Currently no message is attached to the exceptions
    return e
</snippet></ROW><ROW><id>10499539</id><snippet>default</snippet></ROW><ROW><id>10499539</id><snippet>mysql</snippet></ROW><ROW><id>10499539</id><snippet>ALTER TABLE ...</snippet></ROW><ROW><id>10499539</id><snippet>models.IntegerField</snippet></ROW><ROW><id>10499539</id><snippet>db_type</snippet></ROW><ROW><id>10499723</id><snippet>// return string must be in UTC time yyyy/MM/dd H:mm:ss format in Json result
$.get("timerequestmethod", function (data) {
                var dateArray = data.split(' ');
                var seconds = getSeconds(dateArray);

                // create countdown until 'seconds' declare in above statement
            });

getSeconds = (function (dateArray) {
        var dt = dateArray[0].split('/');
        var tm = dateArray[1].split(':');
        var times = new Date();
        times.setUTCFullYear(dt[0], (dt[1] &gt; 0 ? dt[1] - 1 : dt[1]), dt[2]);
        times.setUTCHours(tm[0]);
        times.setUTCMinutes(tm[1]);
        times.setUTCSeconds(tm[2]);
        return (times - new Date()) / 1000;
    });
</snippet></ROW><ROW><id>10500177</id><snippet>DDLEvents</snippet></ROW><ROW><id>10500177</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>10500177</id><snippet>from sqlalchemy import event
from sqlalchemy import DDL
event.listen(
    Article.__table__,
    "after_create",
    DDL("ALTER TABLE %(table)s AUTO_INCREMENT = 1001;")
)
</snippet></ROW><ROW><id>10500375</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
data = (0, 2, 3, 5, 5, 5, 9, 7, 8, 6, 6)
ax.plot(data, 'r-', linewidth=4)

plt.axvline(x=5, ymin=0, ymax=4.0 / max(data), linewidth=4)
plt.text(5, 4, 'your text here')
plt.show()
</snippet></ROW><ROW><id>10500375</id><snippet>ymin</snippet></ROW><ROW><id>10500375</id><snippet>ymax</snippet></ROW><ROW><id>10500375</id><snippet>0 to 1</snippet></ROW><ROW><id>10500375</id><snippet>fig = plt.figure()
data = (0, 2, 3, 5, 5, 5, 9, 7, 8, 6, 6)

ax = fig.add_subplot(1, 1, 1)
ax.plot(data, 'r-', linewidth=4)
ax.axvline(x=5, ymin=0, ymax=4.0 / max(data), linewidth=4)
ax.text(5, 4, 'your text here')
fig.show()
</snippet></ROW><ROW><id>10500573</id><snippet>#'django.middleware.csrf.CsrfViewMiddleware',
</snippet></ROW><ROW><id>10500919</id><snippet>capitalize()</snippet></ROW><ROW><id>10500919</id><snippet>lower()</snippet></ROW><ROW><id>10500919</id><snippet>while response[0] != 'quit': 
    response = raw_input("Please enter who you're looking for, or type 'exit' to quit the program: ").split() 
    try:
        print "%s's %s is %s" % (response[0].capitalize(), response[1].lower(), people[response[0].capitalize()][response[1].lower()])  
    except KeyError: 
        print wrong,
</snippet></ROW><ROW><id>10500919</id><snippet>'bob'</snippet></ROW><ROW><id>10500919</id><snippet>'Bob'</snippet></ROW><ROW><id>10500919</id><snippet>while response[0] != 'quit': 
    response = raw_input("Please enter who you're looking for, or type 'exit' to quit the program: ").split() 
    try:
        fn, thing = response[0].capitalize(), response[1].lower()
        print "%s's %s is %s" % (fn, thing, people[fn][thing])  
    except KeyError: 
        print wrong,
</snippet></ROW><ROW><id>10501262</id><snippet>In [4]: import tempfile
</snippet></ROW><ROW><id>10501262</id><snippet>tempfile.NamedTemporaryFile()</snippet></ROW><ROW><id>10501262</id><snippet>.name</snippet></ROW><ROW><id>10501262</id><snippet>In [5]: tf = tempfile.NamedTemporaryFile()
In [6]: tf.name
Out[6]: 'c:\\blabla\\locals~1\\temp\\tmptecp3i'

In [7]: tf = tempfile.NamedTemporaryFile()
In [8]: tf.name
Out[8]: 'c:\\blabla\\locals~1\\temp\\tmpr8vvme'
</snippet></ROW><ROW><id>10501262</id><snippet>delete</snippet></ROW><ROW><id>10501262</id><snippet>tempfile.NamedTemporaryFile([mode='w+b'[, bufsize=-1[, suffix=''[, prefix='tmp'[, dir=None[, delete=True]]]]]])
</snippet></ROW><ROW><id>10501262</id><snippet>In [9]: tf = tempfile.NamedTemporaryFile(prefix="zz")
In [10]: tf.name
Out[10]: 'c:\\blabla\\locals~1\\temp\\zzrc3pzk'
</snippet></ROW><ROW><id>10501509</id><snippet>import xml.dom.minidom

def getParentObjectNode(node):
    while node.parentNode:
        node = node.parentNode
        if node.nodeName == "Object":
            return node

xml = xml.dom.minidom.parse("C:\\myxml.xml")
for shirtNode in xml.getElementsByTagName("Object"):
    if shirtNode.getAttribute("label") == "shirt":
        break

shirtParentObject = getParentObjectNode(shirtNode)
print(shirtParentObject.getAttribute("label"))
shirtParentParentObject = getParentObjectNode(shirtParentObject)
print(shirtParentParentObject.getAttribute("label"))
</snippet></ROW><ROW><id>10501768</id><snippet>reload()</snippet></ROW><ROW><id>10501768</id><snippet>sys.modules</snippet></ROW><ROW><id>10501768</id><snippet>from foo import *</snippet></ROW><ROW><id>10501768</id><snippet>a</snippet></ROW><ROW><id>10501768</id><snippet>a</snippet></ROW><ROW><id>10501768</id><snippet>foo.a</snippet></ROW><ROW><id>10501768</id><snippet>import foo</snippet></ROW><ROW><id>10501768</id><snippet>foo.a</snippet></ROW><ROW><id>10501768</id><snippet>foo.whatever</snippet></ROW><ROW><id>10501768</id><snippet>a</snippet></ROW><ROW><id>10501768</id><snippet>foo.a</snippet></ROW><ROW><id>10501768</id><snippet>a = 5</snippet></ROW><ROW><id>10501768</id><snippet>a</snippet></ROW><ROW><id>10501768</id><snippet>5</snippet></ROW><ROW><id>10501768</id><snippet>b</snippet></ROW><ROW><id>10501768</id><snippet>foo.b</snippet></ROW><ROW><id>10501768</id><snippet>b</snippet></ROW><ROW><id>10501768</id><snippet>b</snippet></ROW><ROW><id>10501768</id><snippet>foo.b</snippet></ROW><ROW><id>10501768</id><snippet>import</snippet></ROW><ROW><id>10501768</id><snippet>import foo</snippet></ROW><ROW><id>10501768</id><snippet>foo.whatever</snippet></ROW><ROW><id>10501768</id><snippet>from foo import bar</snippet></ROW><ROW><id>10501768</id><snippet>foo</snippet></ROW><ROW><id>10501768</id><snippet>foo</snippet></ROW><ROW><id>10501768</id><snippet>bar</snippet></ROW><ROW><id>10501768</id><snippet>from foo import *</snippet></ROW><ROW><id>10501768</id><snippet>__all__</snippet></ROW><ROW><id>10501768</id><snippet>import</snippet></ROW><ROW><id>10501768</id><snippet>yield</snippet></ROW><ROW><id>10501768</id><snippet>for</snippet></ROW><ROW><id>10501768</id><snippet>try</snippet></ROW><ROW><id>10501768</id><snippet>with</snippet></ROW><ROW><id>10502085</id><snippet>somemodule.somefunction()</snippet></ROW><ROW><id>10502085</id><snippet>somemodule.somefunction()</snippet></ROW><ROW><id>10502085</id><snippet>def somefunction(filename):
    log.info('Doing something to %s' % filename)
</snippet></ROW><ROW><id>10502085</id><snippet>log</snippet></ROW><ROW><id>10502085</id><snippet>Worker.logger</snippet></ROW><ROW><id>10502229</id><snippet>pack</snippet></ROW><ROW><id>10502229</id><snippet>Array[Byte]</snippet></ROW><ROW><id>10502229</id><snippet>val out = new java.io.ByteArrayOutputStream()
val writer = new java.io.DataOutputStream(out)
writer.writeInt(someString.length)
writer.close()
val data = out.toByteArray
</snippet></ROW><ROW><id>10502229</id><snippet>DataOutputStream</snippet></ROW><ROW><id>10502229</id><snippet>!</snippet></ROW><ROW><id>10502229</id><snippet>pack</snippet></ROW><ROW><id>10502229</id><snippet>writeInt</snippet></ROW><ROW><id>10502229</id><snippet>DataOutputStream</snippet></ROW><ROW><id>10502229</id><snippet>writeLong</snippet></ROW><ROW><id>10502229</id><snippet>long long</snippet></ROW><ROW><id>10502229</id><snippet>q</snippet></ROW><ROW><id>10502229</id><snippet>Q</snippet></ROW><ROW><id>10502229</id><snippet>pack</snippet></ROW><ROW><id>10502373</id><snippet>&gt;&gt;&gt; def Paranoid():
...     _secret_dict = {'_secret': 0}
...     class ParanoidClass(object):
...             def set(self, val):
...                     _secret_dict['_secret'] = val * 10
...             def get(self):
...                     return _secret_dict['_secret'] / 10
...     return ParanoidClass()
... 
&gt;&gt;&gt; p = Paranoid()
&gt;&gt;&gt; p.set(123)
&gt;&gt;&gt; p.get()
123
</snippet></ROW><ROW><id>10502403</id><snippet>import urllib2 as urllib

page = urllib.urlopen('http://www.someurl.com/blah.xml')
with open('output.xml', 'w') as f:
  f.write(page.read())
</snippet></ROW><ROW><id>10502403</id><snippet>crontab -e</snippet></ROW><ROW><id>10502403</id><snippet>*/5 * * * * python path/to/script.py
</snippet></ROW><ROW><id>10502433</id><snippet>INSERT INTO jos_content 
(`title`, `alias`, `title_alias`, `intro_text`) VALUES
('Title', 'title', 'Title', 'Hello!' );
</snippet></ROW><ROW><id>10502565</id><snippet>easy_install</snippet></ROW><ROW><id>10502565</id><snippet>/usr/bin</snippet></ROW><ROW><id>10502565</id><snippet>sudo /usr/bin/easy_install scrapy
</snippet></ROW><ROW><id>10502565</id><snippet>scrapy</snippet></ROW><ROW><id>10502565</id><snippet>/usr/local/bin/scrapy</snippet></ROW><ROW><id>10502565</id><snippet>echo $PATH
</snippet></ROW><ROW><id>10502565</id><snippet>export PATH=/usr/local/bin:$PATH</snippet></ROW><ROW><id>10502565</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>10502565</id><snippet>scrapy</snippet></ROW><ROW><id>10502565</id><snippet>scrapy</snippet></ROW><ROW><id>10502565</id><snippet>/usr/local/share/python/scrapy</snippet></ROW><ROW><id>10502921</id><snippet>[</snippet></ROW><ROW><id>10502921</id><snippet>[</snippet></ROW><ROW><id>10502921</id><snippet>/(\\.|[^[/\\\n]|\[(\\.|[^\]\\\n])*])+/([gim]+\b|\B)
</snippet></ROW><ROW><id>10502921</id><snippet>/(\\.|[^\[/\\\n]|\[(\\.|[^\]\\\n])*\])+/([gim]+\b|\B)
</snippet></ROW><ROW><id>10502999</id><snippet>struct</snippet></ROW><ROW><id>10502999</id><snippet>from struct import unpack

unpack('cd',socket_read_buffer)

--&gt; ('c', 3.1415)
</snippet></ROW><ROW><id>10503096</id><snippet>import turtle
import numpy as np

tlist = list()
colorlist = ["red", "green", "black", "blue", "brown"]
for i in xrange(5):
    tlist.append(turtle.Turtle(shape="turtle"))
    tlist[i].color(colorlist[i])
    tlist[i].speed(1)
screen = turtle.getscreen()
for i in xrange(100):
    screen.tracer(1000)
    for t in tlist:
        t.right((np.random.rand(1) - .5) * 180)
        t.forward(int((np.random.rand(1) - .5) * 100))
    screen.update()
</snippet></ROW><ROW><id>10503096</id><snippet>import turtle
#import numpy as np
from time import sleep

tlist = list()
colorlist = ["red", "green", "black", "blue", "brown"]
for i in xrange(5):
    tlist.append(turtle.Turtle(shape="turtle"))
    tlist[i].color(colorlist[i])
    tlist[i].speed(1)
screen = turtle.getscreen()
for i in xrange(100):
    screen.tracer(1000)
    for i, t in enumerate(tlist):
        #t.right((np.random.rand(1) - .5) * 180))
        t.right(33 * i)
        #t.forward(int((np.random.rand(1) - .5) * 100))
        t.forward(50 * i)
    sleep(1)
    screen.update()
</snippet></ROW><ROW><id>10503142</id><snippet>application/utils/__init__.py</snippet></ROW><ROW><id>10503142</id><snippet>from application.utils.settings import Settings
from application.utils.debug import Debug
</snippet></ROW><ROW><id>10503142</id><snippet>Settings</snippet></ROW><ROW><id>10503142</id><snippet>Debug</snippet></ROW><ROW><id>10503142</id><snippet>from application.utils import Settings
from application.utils import Debug
</snippet></ROW><ROW><id>10503273</id><snippet>A = 1, 3
B = 2, 4
C = 
min(min(A), min(B)) = 1

A = 3
B = 2, 4
C = 1
min(min(A), min(B)) = 2

A = 3
B = 4
C = 1, 2
min(min(A), min(B)) = 3

A = 
B = 4
C = 1, 2, 3
</snippet></ROW><ROW><id>10503273</id><snippet>C = 1, 2, 3, 4
</snippet></ROW><ROW><id>10503273</id><snippet>merge</snippet></ROW><ROW><id>10503273</id><snippet>merge_sort</snippet></ROW><ROW><id>10503398</id><snippet>def m(name, bases, dct):
    for k, v in dct.items():
        if type(v) is type(m):
            dct[k] = classmethod(v)
    return type(name, bases, dct)

class A:
    __metaclass__ = m

    def foo(self):
        print self


A.foo() # &lt;class '__main__.A'&gt;
</snippet></ROW><ROW><id>10503702</id><snippet>itertools</snippet></ROW><ROW><id>10503702</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; preresult = collections.OrderedDict(zip(range(200), range(200)))
&gt;&gt;&gt; list(islice(preresult, 100))[-10:]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</snippet></ROW><ROW><id>10503702</id><snippet>iteritems</snippet></ROW><ROW><id>10503702</id><snippet>items</snippet></ROW><ROW><id>10503702</id><snippet>&gt;&gt;&gt; list(islice(preresult.iteritems(), 100))[-10:]
[(90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)]
</snippet></ROW><ROW><id>10503940</id><snippet>import numpy as np, copy
import matplotlib.pyplot as plt, matplotlib.lines as ml

fig=plt.figure(1)
data=np.arange(0,10,0.01)
ax1=fig.add_subplot(2,2,1)
ax2=fig.add_subplot(2,2,2)
ax3=fig.add_subplot(2,2,3)
ax4=fig.add_subplot(2,2,4)

#create the lines
line1=ml.Line2D(data,data)
line2=ml.Line2D(data,data**2/10,ls='--',color='green')
line3=ml.Line2D(data,np.sin(data),color='red')
#add the copies of the lines to the first 3 panels
ax1.add_line(copy.copy(line1))
ax2.add_line(copy.copy(line2))
ax3.add_line(copy.copy(line3))

[ax4.add_line(_l) for _l in [line1,line2,line3]] # add 3 lines to the 4th panel

[_a.autoscale() for _a in [ax1,ax2,ax3,ax4]] # autoscale if needed
plt.draw()
</snippet></ROW><ROW><id>10504022</id><snippet>defined()</snippet></ROW><ROW><id>10504022</id><snippet>{% if variable is defined %}
    value of variable: {{ variable }}
{% else %}
    variable is not defined
{% endif %}
</snippet></ROW><ROW><id>10504022</id><snippet>{% if texts is defined %}
    {% for text in texts %} 
        &lt;div&gt;{{ error }}&lt;/div&gt;
        &lt;div class="post"&gt;
            &lt;div class="post-title"&gt;{{ text.subject }}&lt;/div&gt;
            &lt;pre class="post-content"&gt;{{ text.content }}&lt;/pre&gt;
        &lt;/div&gt;
    {% endfor %}
{% else %}
    Error!
{% endif %}
</snippet></ROW><ROW><id>10504249</id><snippet>import threading, Queue

Stop = object()

def consumer(real_dict, queue):
    while True:
        try:
            item = queue.get(timeout=100)
            if item == Stop:
                break
            user, submission = item
            real_dict[user] = submission
        except Queue.Empty:
            continue

q = Queue.Queue()
thedict={}

t = threading.Thread(target=consumer, args=(thedict,q,))
t.start()
</snippet></ROW><ROW><id>10504249</id><snippet>&gt;&gt;&gt; thedict
{}
&gt;&gt;&gt; q.put(('foo', 'bar'))
&gt;&gt;&gt; thedict
{'foo': 'bar'}
&gt;&gt;&gt; q.put(Stop)
&gt;&gt;&gt; q.put(('baz', 'bar'))
&gt;&gt;&gt; thedict
{'foo': 'bar'}
</snippet></ROW><ROW><id>10504578</id><snippet>User</snippet></ROW><ROW><id>10504578</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>10504578</id><snippet>UserProxy</snippet></ROW><ROW><id>10504578</id><snippet>MyUser</snippet></ROW><ROW><id>10504642</id><snippet>posfile = 'C:/Users/name/Desktop/textfile.txt'
csv_data=csv.reader(open(posfile, 'rb'))
count_test = 0
for row in csv_data:
    count_test = count_test + 1
    print count_test, row
</snippet></ROW><ROW><id>10504642</id><snippet>file(posfile) 
</snippet></ROW><ROW><id>10504701</id><snippet>transpose</snippet></ROW><ROW><id>10504816</id><snippet>...
    def __lt__(self, other):
        return (self.c, self.a, self.b) &lt; (other.c, other.a, other.b)

...
list.sort()
</snippet></ROW><ROW><id>10504816</id><snippet>list.sort(key = lambda self: (self.c, self.a, self.b))
</snippet></ROW><ROW><id>10504816</id><snippet>list.sort(cmp = lambda self, other: \
                (self.c, self.a, self.b) &lt; (other.c, other.a, other.b))
</snippet></ROW><ROW><id>10504816</id><snippet>class Foo(object):
    @staticmethod
    def cmp_absoluteOrder(self, other):
        return (self.c, self.a, self.b) &lt; (other.c, other.a, other.b)

    @staticmethod
    def cmp_otherOrder(self, other):
        return ...

    @staticmethod
    def cmp_combinedSort(cmpA, cmpB, cmpC):
        return lambda self, other: (0, 0, 0) &lt; (cmpA(self.c, other.c), cmpA(self.a, other.a), cmpA(self.b, other.b), )

    def __hash__(self):
        return hash(self.c) ^ hashA(self.a) ^ hash(self.b)

...
list.sort(cmp = Foo.cmp_absoluteSorting)
list.sort(cmp = Foo.cmp_combinedSort(cmp, (lambda a1, a2: ...), cmp))

hashA = hash # or replace it if important # but the same a will retunrn the same hash
</snippet></ROW><ROW><id>10504884</id><snippet>localize</snippet></ROW><ROW><id>10504884</id><snippet>astimezone</snippet></ROW><ROW><id>10504884</id><snippet>replace</snippet></ROW><ROW><id>10505080</id><snippet>[::-1]</snippet></ROW><ROW><id>10505080</id><snippet>&gt;&gt;&gt; s1 = "This is a string."
&gt;&gt;&gt; s2 = "racecar"
&gt;&gt;&gt; s1 == s1[::-1]
False
&gt;&gt;&gt; s2 == s2[::-1]
True
</snippet></ROW><ROW><id>10505080</id><snippet>print</snippet></ROW><ROW><id>10505080</id><snippet>if</snippet></ROW><ROW><id>10505080</id><snippet>if</snippet></ROW><ROW><id>10505080</id><snippet>if String1 == String1[::-1]:
  print("Yes")
else:
  print("No")
</snippet></ROW><ROW><id>10505133</id><snippet>Gedit.Document.get_uri()</snippet></ROW><ROW><id>10505133</id><snippet>Gedit.Document.get_location()</snippet></ROW><ROW><id>10505133</id><snippet>Gedit.Document.get_uri_for_display()</snippet></ROW><ROW><id>10505277</id><snippet>from subprocess import check_output
output = check_output(["ls", "-l"])
</snippet></ROW><ROW><id>10505277</id><snippet>output = check_output("ls -l", shell=True)
</snippet></ROW><ROW><id>10505331</id><snippet>attrs</snippet></ROW><ROW><id>10505331</id><snippet>name</snippet></ROW><ROW><id>10505331</id><snippet>soup.find('', 'x-btn x-component x-btn-text-icon')</snippet></ROW><ROW><id>10505331</id><snippet>id</snippet></ROW><ROW><id>10505331</id><snippet>soup.find('', 'x-btn x-component x-btn-text-icon')['id']
</snippet></ROW><ROW><id>10505410</id><snippet>except:</snippet></ROW><ROW><id>10505410</id><snippet>handle_exception</snippet></ROW><ROW><id>10505622</id><snippet>__init__.py</snippet></ROW><ROW><id>10505622</id><snippet>|-- __init__.py
|-- manage.py
|-- models.py
|-- views.py
|-- constants.py
</snippet></ROW><ROW><id>10505622</id><snippet>from test_app import constants
</snippet></ROW><ROW><id>10505622</id><snippet>alpha = "123"
beta = "546"
</snippet></ROW><ROW><id>10505622</id><snippet>print(constants.alpha)
print(constants.beta)
</snippet></ROW><ROW><id>10505651</id><snippet>import numpy as np
from scipy.optimize import fsolve

tmpFunc = lambda xIn: np.array( [(xIn[0]-4)**2 + xIn[1], (xIn[1]-5)**2 - xIn[2]) \
, (xIn[2]-7)**3 + xIn[0] ] )

x0 = [3,4,5]
xFinal = fsolve(tmpFunc, x0 )

print xFinal
</snippet></ROW><ROW><id>10505705</id><snippet>round</snippet></ROW><ROW><id>10505705</id><snippet>&gt;&gt;&gt; round(65.53, 4)
'65.53'
&gt;&gt;&gt; round(40.355435, 4)
'40.3554'
&gt;&gt;&gt; round(0, 4)
'0.0'
</snippet></ROW><ROW><id>10505722</id><snippet>int</snippet></ROW><ROW><id>10505722</id><snippet>str</snippet></ROW><ROW><id>10505722</id><snippet>f1</snippet></ROW><ROW><id>10505722</id><snippet>def func(): pass
f1_ret = f1(arg)
f2_ret = f2(func)
func = f1_ret(f2_ret)
</snippet></ROW><ROW><id>10505821</id><snippet>import Queue, thread

# create a Queue.Queue here
queue = Queue.Queue()

print ("downloading and parsing Bibles...")
root = html.parse(open('links.html'))
for link in root.findall('//a'):
  url = link.get('href')
  queue.put(url) # produce




def thrad():
  url = queue.get() # consume
  name = urlparse.urlparse(url).path.split('/')[-1]
  dirname = urlparse.urlparse(url).path.split('.')[-1]
  f = urllib2.urlopen(url)
  s = f.read()
  if (os.path.isdir(dirname) == 0): 
    os.mkdir(dirname)
  soup = BeautifulSoup(s)
  articleTag = soup.html.body.article
  converted = str(articleTag)
  full_path = os.path.join(dirname, name)
  open(full_path, 'wb').write(converted)
  print(name)

thread.start_new(thrad, ()) # start 1 threads
</snippet></ROW><ROW><id>10505866</id><snippet>[0.83205029, 0.5547002]</snippet></ROW><ROW><id>10505866</id><snippet>[0.6, 0.4]</snippet></ROW><ROW><id>10505866</id><snippet>[0.6, 0.4]</snippet></ROW><ROW><id>10505866</id><snippet>&gt;&gt;&gt; v = scipy.linalg.eig(A,left=True,right=False)[1][:,0]
&gt;&gt;&gt; v
array([ 0.83205029,  0.5547002 ])
&gt;&gt;&gt; v / sum(v)
array([ 0.6,  0.4])
</snippet></ROW><ROW><id>10505895</id><snippet>import gevent.queue
queue = gevent.queue.Queue()
</snippet></ROW><ROW><id>10505895</id><snippet>from gevent.queue import Queue
queue = Queue()
</snippet></ROW><ROW><id>10505915</id><snippet>str.split()</snippet></ROW><ROW><id>10505915</id><snippet>for word in text.split(" "):
    PorterStemmer().stem_word(word)
</snippet></ROW><ROW><id>10505915</id><snippet>str.join()</snippet></ROW><ROW><id>10505915</id><snippet>" ".join(PorterStemmer().stem_word(word) for word in text.split(" "))
</snippet></ROW><ROW><id>10505915</id><snippet>with open("/path/to/file.txt") as f:
    words = set(f)
</snippet></ROW><ROW><id>10505915</id><snippet>with</snippet></ROW><ROW><id>10505915</id><snippet>str.split()</snippet></ROW><ROW><id>10505915</id><snippet>stems = (PorterStemmer().stem_word(word) for word in text.split(" "))
" ".join(stem for stem in stems if stem not in words)
</snippet></ROW><ROW><id>10505915</id><snippet>" ".join(PorterStemmer().stem_word(word) for word in text.split(" ") if word not in words)
</snippet></ROW><ROW><id>10505915</id><snippet>filtered_words = [word for word in unfiltered_words if not in set_of_words_to_filter]
</snippet></ROW><ROW><id>10506082</id><snippet>'%.2f' % your_number
</snippet></ROW><ROW><id>10506281</id><snippet>/usr/local</snippet></ROW><ROW><id>10506281</id><snippet>/usr/local</snippet></ROW><ROW><id>10506281</id><snippet>/usr/local</snippet></ROW><ROW><id>10506281</id><snippet>brew</snippet></ROW><ROW><id>10506281</id><snippet>sudo</snippet></ROW><ROW><id>10506281</id><snippet>easy_install</snippet></ROW><ROW><id>10506281</id><snippet>pip</snippet></ROW><ROW><id>10506281</id><snippet>sudo</snippet></ROW><ROW><id>10506281</id><snippet>$ cd /tmp
$ virtualenv foo         
New python executable in foo/bin/python
Installing setuptools............done.
Installing pip...............done.
$ cd foo
$ bin/pip install sqlalchemy
Downloading/unpacking sqlalchemy
  Downloading SQLAlchemy-0.7.7.tar.gz (2.6Mb): 2.6Mb downloaded
  Running setup.py egg_info for package sqlalchemy
[...]    
Successfully installed sqlalchemy
Cleaning up...

[work, work, work]
[decide this was a bad idea]
$ cd /tmp; rm -rf foo
</snippet></ROW><ROW><id>10506281</id><snippet>easy_install</snippet></ROW><ROW><id>10506344</id><snippet>new CiscoIPPhoneMenu()
    .withTitle("Title text goes here")
    .withPrompt("Prompt text goes here")
    ...
</snippet></ROW><ROW><id>10506344</id><snippet>SerializationFormat</snippet></ROW><ROW><id>10506884</id><snippet>attach = sqlite:////usr/local/share/cjklib/cjklib.db
</snippet></ROW><ROW><id>10506884</id><snippet>&gt;&gt;&gt; from cjklib.dictionary import CEDICT
&gt;&gt;&gt; from cjklib.dbconnector import getDBConnector
&gt;&gt;&gt; db = getDBConnector({'sqlalchemy.url': 'sqlite://', 'attach': ['cjklib']})
&gt;&gt;&gt; d=CEDICT(dbConnectInst=db)
&gt;&gt;&gt; it=d.getFor(u'朋友')
</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears = ('f',[])
</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears = ltvYears + [ltv_loop]
</snippet></ROW><ROW><id>10506971</id><snippet>list</snippet></ROW><ROW><id>10506971</id><snippet>.append</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears = ('f',[])</snippet></ROW><ROW><id>10506971</id><snippet>'f'</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears = []
</snippet></ROW><ROW><id>10506971</id><snippet>ltvYears.append(ltv_loop)
</snippet></ROW><ROW><id>10507199</id><snippet>1   2   3   4   5
6   7   8   9   10
11  12  13  14  15
</snippet></ROW><ROW><id>10507199</id><snippet>with open('in.txt') as f:
  lis=[x.split() for x in f]

for x in zip(*lis):
  for y in x:
    print(y+'\t',end='')
  print('\n')
</snippet></ROW><ROW><id>10507199</id><snippet>1   6   11  

2   7   12  

3   8   13  

4   9   14  

5   10  15
</snippet></ROW><ROW><id>10507291</id><snippet>f = open("path_to_file", "r")
contents = f.readlines()
f.close()

contents.insert(index, value)

f = open("path_to_file", "w")
contents = "".join(contents)
f.write(contents)
f.close()
</snippet></ROW><ROW><id>10507464</id><snippet>os.path.splitdrive</snippet></ROW><ROW><id>10507464</id><snippet>with open('C:/Users/visc/scratch/scratch_child/test.txt') as f:
    for line in f:
        drive, path = os.path.splitdrive(line)
        path, filename = os.path.split(path)
        print('Drive is %s Path is %s and file is %s' % (drive, path, filename))
</snippet></ROW><ROW><id>10507464</id><snippet>with</snippet></ROW><ROW><id>10507464</id><snippet>with</snippet></ROW><ROW><id>10507464</id><snippet>file</snippet></ROW><ROW><id>10507593</id><snippet>"{0}\"".format(str(round(x, 1) if x % 1 else int(x)), 1)
</snippet></ROW><ROW><id>10507593</id><snippet>x</snippet></ROW><ROW><id>10507622</id><snippet>SELECT SUM(price * exchange_rate) AS total
FROM sales
LEFT JOIN
(
    SELECT 'USD' AS currency, 1.00000 AS exchange_rate
    UNION ALL
    SELECT 'EUR', 1.32875
    UNION ALL
    SELECT 'GBP', 1.56718
    -- ...
) AS exchange
ON exchange.currency = sales.currency
</snippet></ROW><ROW><id>10507711</id><snippet>n = 10
i = 2

mylist = ["0"] * n
mylist[i-1] = "1"
print " ".join(mylist)
</snippet></ROW><ROW><id>10507840</id><snippet>dinner_entries = LotteryEntry.objects.filter(user=request.user).values_list('dinner__id', flat=True)
</snippet></ROW><ROW><id>10507840</id><snippet>{% if d.id in dinner_entries %}
</snippet></ROW><ROW><id>10508130</id><snippet>urllib</snippet></ROW><ROW><id>10508130</id><snippet>httplib</snippet></ROW><ROW><id>10508130</id><snippet>ssl.wrap_socket</snippet></ROW><ROW><id>10508130</id><snippet>cerfile</snippet></ROW><ROW><id>10508130</id><snippet>keyfile</snippet></ROW><ROW><id>10508130</id><snippet>setopt(pycurl.SSLCERT, "/path/to/cert.pem")</snippet></ROW><ROW><id>10508130</id><snippet>setopt(pycurl.SSLKEY, "/path/to/key.pem")</snippet></ROW><ROW><id>10508130</id><snippet>.p12</snippet></ROW><ROW><id>10508130</id><snippet># Extract the certificate:
openssl pkcs12 -in filename.p12 -nokeys -out certificate.pem

# Extract the private key:
openssl pkcs12 -in filename.p12 -nocerts -out privkey.pem
</snippet></ROW><ROW><id>10508355</id><snippet>class empDB:
    def __init__(self, lst= []):  #creates empty list
        self.lst = lst
    def appendEmp(self, emp=None):
        if emp is None:
            empt = Employee()
        self.lst=self.lst+[emp]
</snippet></ROW><ROW><id>10508355</id><snippet>None</snippet></ROW><ROW><id>10508355</id><snippet>appendEmp()</snippet></ROW><ROW><id>10508355</id><snippet>__init__()</snippet></ROW><ROW><id>10508581</id><snippet>&gt;&gt;&gt; import ipaddr
&gt;&gt;&gt; mask = ipaddr.IPv4Network('192.192.45.1/25')
&gt;&gt;&gt; mask.netmask
IPv4Address('255.255.255.128')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10508581</id><snippet>&gt;&gt;&gt; ## Subnet number?
&gt;&gt;&gt; mask.network
IPv4Address('192.192.45.0')
&gt;&gt;&gt;
&gt;&gt;&gt; ## RFC 1918 space?
&gt;&gt;&gt; mask.is_private
False
&gt;&gt;&gt;
&gt;&gt;  ## The subnet broadcast address
&gt;&gt;&gt; mask.broadcast
IPv4Address('192.192.45.127')
&gt;&gt;&gt; mask.iterhosts()
&lt;generator object iterhosts at 0xb72b3f2c&gt;
</snippet></ROW><ROW><id>10508584</id><snippet>n = gdb.nodes.create(**nodeDict)
</snippet></ROW><ROW><id>10508687</id><snippet>import BeautifulSoup
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(totstring)

body = soup.find("body")

bodytext = body.text
</snippet></ROW><ROW><id>10508698</id><snippet>if photo1 == 1:
    user.image = pygame.image.load("1.png").convert()
    user.rect = user.image.get_rect()
    screen.blit(user.image, user.rect)

if photo1 == 2:
    user.image = pygame.image.load("2.png").convert()
    user.rect = user.image.get_rect()
    screen.blit(user.image, user.rect)

if photo1 == 3:
    user.image = pygame.image.load("3.png").convert()
    user.rect = user.image.get_rect()
    screen.blit(user.image, user.rect)
</snippet></ROW><ROW><id>10508698</id><snippet>if down and user.rect.bottom &lt; height:
    user.rect.top += speed
if up and user.rect.top &gt; 0:
    user.rect.top -= speed
if left and user.rect.left &gt; 0:
    user.rect.left -= speed
if right and user.rect.right &lt; width:
    user.rect.right += speed
</snippet></ROW><ROW><id>10509217</id><snippet>case 'cosine'
    Xnorm = sqrt(sum(X.^2, 2));
    if any(min(Xnorm) &lt;= eps * max(Xnorm))
        error(['Some points have small relative magnitudes, making them ', ...
               'effectively zero.\nEither remove those points, or choose a ', ...
               'distance other than ''cosine''.'], []);
    end
</snippet></ROW><ROW><id>10509217</id><snippet>max(Xnorm)</snippet></ROW><ROW><id>10509384</id><snippet>self</snippet></ROW><ROW><id>10509384</id><snippet>__mro__</snippet></ROW><ROW><id>10509384</id><snippet>super(self, Dog).__init__(self, name, "Dog")
</snippet></ROW><ROW><id>10509384</id><snippet>super().__init__(self, name, "Dog")
</snippet></ROW><ROW><id>10509384</id><snippet>name</snippet></ROW><ROW><id>10509384</id><snippet>Dog</snippet></ROW><ROW><id>10509384</id><snippet>class Dog(Pet):

   def __init__(self, chases_cats, *args, **kwargs):
      Pet.__init__(self, *args, species="Dog", **kwargs)
      self.chases_cats = chases_cats

class Pet(object):

    def __init__(self, name, species, *args, **kwargs):
       self.name = name
       self.species = species
</snippet></ROW><ROW><id>10509429</id><snippet>PROMPT_COLOR1='0;36m'
PROMPT_COLOR2='1;34m'
PS1='\n\[\033[$PROMPT_COLOR1\](\t)\[\033[$PROMPT_COLOR2\] \u @ \w \n\[\033[$PROMPT_COLOR1\]$ \[\033[0;39m\]'
</snippet></ROW><ROW><id>10509429</id><snippet>&lt; old_line &gt;

(19:11:05) kevin @ ~/research 
$ 
</snippet></ROW><ROW><id>10509429</id><snippet>&lt; old_line &gt;
(&lt; name_of_env &gt;)
(19:11:05) kevin @ ~/research 
$ 
</snippet></ROW><ROW><id>10509429</id><snippet>&lt; old_line &gt;

(&lt; name_of_env &gt;) (19:11:05) kevin @ ~/research 
$ 
</snippet></ROW><ROW><id>10509429</id><snippet># color virtualenv name properly and put it after the \n if there is one at the start of the prompt
if [ ${_OLD_VIRTUAL_PS1:0:2} == '\n' ]; then
    PS1="\n\[\033[$PROMPT_COLOR1\](`basename \"$VIRTUAL_ENV\"`) ${_OLD_VIRTUAL_PS1:2:${#_OLD_VIRTUAL_PS1}}"
else
    PS1="\[\033[$PROMPT_COLOR1\](`basename \"$VIRTUAL_ENV\"`) $_OLD_VIRTUAL_PS1 "
fi
</snippet></ROW><ROW><id>10509810</id><snippet>import codecs, csv
f = codecs.open("file.csv", "r", "utf-8")
g = csv.reader(f)
for e in g:
    print(e)
</snippet></ROW><ROW><id>10509810</id><snippet>import codecs, csv, bz2
f = bz2.BZ2File("./file.csv.bz2", mode="r")
c = codecs.iterdecode(f, "utf-8")
g = csv.reader(c)
for e in g:
    print(e)
</snippet></ROW><ROW><id>10509829</id><snippet>answer = True
myvar = "the answer is " + str(answer)
</snippet></ROW><ROW><id>10509829</id><snippet>myvar = "the answer is %s" % answer
</snippet></ROW><ROW><id>10509829</id><snippet>True</snippet></ROW><ROW><id>10509967</id><snippet>def f(x):
   return x + 1
</snippet></ROW><ROW><id>10509967</id><snippet>&gt;&gt;&gt; class A(int):
        def __add__(self, other):
            global s
            s += 1
            return int.__add__(self, other)

&gt;&gt;&gt; def f(x):
        return x + 1

&gt;&gt;&gt; s = 0
&gt;&gt;&gt; f(A(1))
2
&gt;&gt;&gt; s
1
</snippet></ROW><ROW><id>10510024</id><snippet>ts = np.array([[1,2,3,4,5],[2,3,4,5,6],[9,8,7,4,1]])
expectation_maximization(ts, 2)
</snippet></ROW><ROW><id>10510190</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; stats = [100, 98, 102, 100, 108, 23, 120]
&gt;&gt;&gt; mean = np.mean(stats)
&gt;&gt;&gt; std = np.std(stats)
&gt;&gt;&gt; stats_z = [(s - mean)/std for s in stats]
&gt;&gt;&gt; np.abs(stats_z) &gt; 2
array([False, False, False, False, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>10510293</id><snippet>STATIC_URL= '/static/'</snippet></ROW><ROW><id>10510531</id><snippet>src</snippet></ROW><ROW><id>10510531</id><snippet>re.compile('\.+')
</snippet></ROW><ROW><id>10511280</id><snippet>month_list = []
year_list = []
lists = [month_list, year_list]
dict = {0 : year_list, 1:month_list}

for i, values in enumerate(data[:2]):
    dict[i].append(&lt;data&gt;)

print 'month_list - ', month_list[0]
print 'year_list - ', year_list[0]

&gt;&gt;&gt; month_list -  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
&gt;&gt;&gt; year_list -  ['2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003']
</snippet></ROW><ROW><id>10512178</id><snippet>QTextEdit</snippet></ROW><ROW><id>10512178</id><snippet>class MyTextEdit(QTextEdit):

    def keyPressEvent(self, event):
        event.ignore()
</snippet></ROW><ROW><id>10512669</id><snippet>MySQLdb</snippet></ROW><ROW><id>10512669</id><snippet>threadsafety</snippet></ROW><ROW><id>10512760</id><snippet>from matplotlib.pyplot import *
x = [111,122,155,192,11,123,120,]
y = [3,4,3,5,9,10,23]
bar(x,y)
show()
</snippet></ROW><ROW><id>10512760</id><snippet>hist()</snippet></ROW><ROW><id>10512760</id><snippet>data = [111, 111, 111, 122, 122, 122, 122, 155, ...]
</snippet></ROW><ROW><id>10512963</id><snippet>SyntaxError</snippet></ROW><ROW><id>10512963</id><snippet>[]</snippet></ROW><ROW><id>10512963</id><snippet>whatever = []
for i in range(100):
    whatever.append(randrange(10**10))
</snippet></ROW><ROW><id>10512963</id><snippet>()</snippet></ROW><ROW><id>10512963</id><snippet>[]</snippet></ROW><ROW><id>10513036</id><snippet>ctypes_array = (ctypes.c_char * MEM_SIZE).from_address(ptr)
with open('test.raw', 'wb') as f:
    f.write(ctypes_array)

numpy_array = numpy.frombuffer(ctypes_array, dtype=numpy.byte)
numpy_array.tofile('test.raw')
</snippet></ROW><ROW><id>10513536</id><snippet>def bubble_sort(l):
    ok = False

    while not ok:
        ok = True
        for i in range(len(l) - 1):
            if l[i] &gt; l[i+1]:
                l[i], l[i+1] = l[i+1], l[i]
                ok = False
</snippet></ROW><ROW><id>10513771</id><snippet>Settings.instance().evaluationDate</snippet></ROW><ROW><id>10513783</id><snippet>awk</snippet></ROW><ROW><id>10513783</id><snippet>infile</snippet></ROW><ROW><id>10513783</id><snippet>  ...
  def notyet():
      wait for it

  def ok_start(x):
      stuff
      stuff
      def dontgettrickednow():
         keep going
  #stuff
      more stuff

  def ok_stop_now():
</snippet></ROW><ROW><id>10513783</id><snippet>script.awk</snippet></ROW><ROW><id>10513783</id><snippet>BEGIN {
        ## 'f' variable is the function to search, set a regexp with it.
        f_regex = "^" f "[^a-zA-Z0-9]"

        ## When set, print line. Otherwise omit line.
        ## It is set when found the function searched.
        ## It is unset when found any character different from '#' with less
        ## spaces before it.
        in_func = 0
}

## Found function.
$1 == "def" &amp;&amp; $2 ~ f_regex {

        ## Get position of first 'd' in the line.
        i = index( $0, "d" )

        ## Sanity check. Never should success because the condition was
        ## checked before.
        if ( i == 0 ) {
                next
        }

        ## Get characters until matched index before, check that all of
        ## them are spaces, and get its length.
        indent = substr( $0, 0, i - 1 )
        if ( indent ~ /^[[:space:]]*$/ ) {
                num_spaces = length( indent )
        }

        ## Set variable, print line and read next one.
        in_func = 1
        print
        next
}

## When we are inside the function, line doesn't begin with '#' and
## it's not a blank line (only spaces).
in_func == 1 &amp;&amp; $1 ~ /^[^#]/ &amp;&amp; $0 ~ /[^[:space:]]/ {

        ## Get how many characters there are until first non-space. The result
        ## is the position of first non-blank, so substract one to get the number
        ## of spaces.
        spaces = match( $0, /[^[:space:]]/ )
        spaces -= 1

        ## If current indent is less or equal that the indent of function definition, then
        ## end of function found, so end processing.
        if ( spaces &lt;= num_spaces ) {
                in_func = 0
        }
}

## Self-explanatory.
in_func == 1 { 
        print
}
</snippet></ROW><ROW><id>10513783</id><snippet>awk -f script.awk -v f="ok_start" infile
</snippet></ROW><ROW><id>10513783</id><snippet>  def ok_start(x):
      stuff
      stuff
      def dontgettrickednow():
         keep going
  #stuff
      more stuff
</snippet></ROW><ROW><id>10514307</id><snippet>{key: function() for key, function in mydictionary.items()}
</snippet></ROW><ROW><id>10514307</id><snippet>callable()</snippet></ROW><ROW><id>10514307</id><snippet>{key: (function() if callable(function) else function) for key, function in mydictionary.items()}
</snippet></ROW><ROW><id>10514307</id><snippet>def call_all_callables_in_dict(mapping):
    if hasattr(mapping, "items"):
        return {key: call_all_callables_in_dict(value) for key, value in mapping.items()}
    elif callable(mapping):
        return mapping()
    else:
        return mapping
</snippet></ROW><ROW><id>10514307</id><snippet>items</snippet></ROW><ROW><id>10514307</id><snippet>dict</snippet></ROW><ROW><id>10514307</id><snippet>isinstance(dict)</snippet></ROW><ROW><id>10514307</id><snippet>rand_int</snippet></ROW><ROW><id>10514307</id><snippet>'yes'</snippet></ROW><ROW><id>10514307</id><snippet>'no'</snippet></ROW><ROW><id>10514307</id><snippet>True</snippet></ROW><ROW><id>10514307</id><snippet>False</snippet></ROW><ROW><id>10514307</id><snippet>dict()</snippet></ROW><ROW><id>10514307</id><snippet>{x: y for x, y in something.items()}
</snippet></ROW><ROW><id>10514307</id><snippet>dict((x, y) for x, y in something.items())
</snippet></ROW><ROW><id>10514307</id><snippet>from random import choice

def rand_int():
        return choice(['yes', 'no'])

spec = {
    'answer': rand_int,
    'next': {'answer': rand_int},
    'the_answer': 42
}

def call_all_callables_in_dict(mapping):
    if hasattr(mapping, "items"):
        return {key: call_all_callables_in_dict(value) for key, value in mapping.items()}
    elif callable(mapping):
        return mapping()
    else:
        return mapping

print(call_all_callables_in_dict(spec))
</snippet></ROW><ROW><id>10514307</id><snippet>{'answer': 'no', 'the_answer': 42, 'next': {'answer': 'yes'}}
</snippet></ROW><ROW><id>10515102</id><snippet>ipaddr_test.py</snippet></ROW><ROW><id>10515102</id><snippet>[...]
# Compatibility function to cast str to bytes objects
if issubclass(ipaddr.Bytes, str):
    _cb = ipaddr.Bytes
else:
    _cb = lambda bytestr: bytes(bytestr, 'charmap')
[...]
</snippet></ROW><ROW><id>10515102</id><snippet>_cb('\x20\x01\x06\x58\x02\x2a\xca\xfe'
    '\x02\x00\x00\x00\x00\x00\x00\x01')
</snippet></ROW><ROW><id>10515102</id><snippet>Bytes</snippet></ROW><ROW><id>10515102</id><snippet>_cb</snippet></ROW><ROW><id>10515102</id><snippet>Bytes</snippet></ROW><ROW><id>10515102</id><snippet>import ipaddr
b = ipaddr.Bytes('\x20\x01\x06\x58\x02\x2a\xca\xfe' '\x02\x00\x00\x00\x00\x00\x00\x01')
print ipaddr.IPAddress(b)
</snippet></ROW><ROW><id>10515102</id><snippet>2001:658:22a:cafe:200::1
</snippet></ROW><ROW><id>10515276</id><snippet>s = '{123} and [456]'

s = re.sub(r'\{(.+?)\}', r'foo_\1', s)
s = re.sub(r'\[(.+?)\]', r'bar_\1', s)

print s
</snippet></ROW><ROW><id>10515380</id><snippet>import new
from types import MethodType

class Proxy(object):

    def __init__(self, target):
        self._target = target

    def __getattr__(self, aname):
        target = self._target
        ### Beginning of special logic ###
        if aname[:4]!='set_' and aname[:4]!='get_':
        ### End of special logic ###
            # Rebind the method to the target.
            return new.instancemethod(f.im_func, self, target.__class__)
        else:
            return f
</snippet></ROW><ROW><id>10515572</id><snippet>Content-Type</snippet></ROW><ROW><id>10515572</id><snippet>'utf-8'</snippet></ROW><ROW><id>10515572</id><snippet>€</snippet></ROW><ROW><id>10515572</id><snippet>u'Nellâ€™ambito'.encode('cp1252').decode('utf-8')
</snippet></ROW><ROW><id>10515572</id><snippet>UnicodeError</snippet></ROW><ROW><id>10515626</id><snippet>multi_array = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10]
]

&gt;&gt;&gt; multi_array[0][0]
&gt;&gt;&gt; multi_array[1][4]
</snippet></ROW><ROW><id>10515626</id><snippet>multi_array</snippet></ROW><ROW><id>10515626</id><snippet>ndarray</snippet></ROW><ROW><id>10515626</id><snippet>import numpy as np
np.ndarray((2, 5), buffer=np.array(multi_array), dtype=int)
</snippet></ROW><ROW><id>10515626</id><snippet>shape</snippet></ROW><ROW><id>10515835</id><snippet>.</snippet></ROW><ROW><id>10515835</id><snippet>,</snippet></ROW><ROW><id>10515835</id><snippet>LOSS_RATE=0.3</snippet></ROW><ROW><id>10515835</id><snippet>&gt; NUMBER=600
&gt; LOSS_RATE=0.3
&gt; python -c "from math import ceil; print ceil($NUMBER * $LOSS_RATE)"
180.0
</snippet></ROW><ROW><id>10515835</id><snippet>echo</snippet></ROW><ROW><id>10515835</id><snippet>python -c</snippet></ROW><ROW><id>10515835</id><snippet>&gt; echo "from math import ceil; print ceil($NUMBER * $LOSS_RATE)"
from math import ceil; print ceil(600 * )
</snippet></ROW><ROW><id>10515835</id><snippet>LOSS_RATE</snippet></ROW><ROW><id>10515835</id><snippet>LOSS_RATE</snippet></ROW><ROW><id>10515958</id><snippet>def something():
    foo = 'bar'
    return foo
</snippet></ROW><ROW><id>10515958</id><snippet>import A

var = A.something()
</snippet></ROW><ROW><id>10515958</id><snippet>def something():
    foo = 'bar'
</snippet></ROW><ROW><id>10515958</id><snippet>import A

var = A.something().foo
</snippet></ROW><ROW><id>10515967</id><snippet>classification</snippet></ROW><ROW><id>10515967</id><snippet>category</snippet></ROW><ROW><id>10515967</id><snippet>category</snippet></ROW><ROW><id>10516005</id><snippet>import sys
def excepthook(type, value, traceback):
    sys.exit(X) # X is your exit code
sys.excepthook = excepthook
</snippet></ROW><ROW><id>10516005</id><snippet>1</snippet></ROW><ROW><id>10516005</id><snippet>0</snippet></ROW><ROW><id>10516532</id><snippet>matplotlib</snippet></ROW><ROW><id>10516532</id><snippet>x</snippet></ROW><ROW><id>10516532</id><snippet>y</snippet></ROW><ROW><id>10516532</id><snippet>tuples</snippet></ROW><ROW><id>10516532</id><snippet>lists</snippet></ROW><ROW><id>10516532</id><snippet>y = [0,1,2,3,4,5,6]
x = [a,b,c,d,e,f,g]
</snippet></ROW><ROW><id>10516650</id><snippet>rectangles = [ [ canvas.create_rectangle (CELL_SIZE*x, CELL_SIZE*y,
                    CELL_SIZE*x+CELL_SIZE, CELL_SIZE*y+CELL_SIZE,
                    fill="#000000",outline="#000000", width=1) 
                 for x in range(nCols)] for y in range(nRows)]
</snippet></ROW><ROW><id>10516650</id><snippet>canvas.itemconfig(rectangles[y][x], fill=color)
</snippet></ROW><ROW><id>10517002</id><snippet>collective.portlet.explore</snippet></ROW><ROW><id>10517361</id><snippet>multiprocessing.freeze_support()</snippet></ROW><ROW><id>10517361</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>10517393</id><snippet>&gt;&gt;&gt; import cssutils
&gt;&gt;&gt; css = 'width:150px;height:50px;float:right;'
&gt;&gt;&gt; s = cssutils.parseStyle(css)
&gt;&gt;&gt; s.width
u'150px'
&gt;&gt;&gt; s.height
u'50px'
&gt;&gt;&gt; s.keys()
[u'width', u'height', u'float']
&gt;&gt;&gt; s.cssText
u'width: 150px;\nheight: 50px;\nfloat: right'
&gt;&gt;&gt; del s['width']
&gt;&gt;&gt; s.cssText
u'height: 50px;\nfloat: right'
</snippet></ROW><ROW><id>10517393</id><snippet>cssText</snippet></ROW><ROW><id>10517481</id><snippet>new_tick_locations</snippet></ROW><ROW><id>10517481</id><snippet>tick_function</snippet></ROW><ROW><id>10517481</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()

X = np.linspace(0,1,1000)
Y = np.cos(X*20)

ax1.plot(X,Y)
ax1.set_xlabel(r"Original x-axis: $X$")

new_tick_locations = np.array([.2, .5, .9])

def tick_function(X):
    V = 1/(1+X)
    return ["%.3f" % z for z in V]

ax2.set_xticks(new_tick_locations)
ax2.set_xticklabels(tick_function(new_tick_locations))
ax2.set_xlabel(r"Modified x-axis: $1/(1+X)$")
plt.show()
</snippet></ROW><ROW><id>10517538</id><snippet>registration_allowed</snippet></ROW><ROW><id>10517538</id><snippet>get_form_class()</snippet></ROW><ROW><id>10517538</id><snippet>registration.backends.default.DefaultBackend</snippet></ROW><ROW><id>10517538</id><snippet>get_form_class</snippet></ROW><ROW><id>10517538</id><snippet>customRegistrationForm</snippet></ROW><ROW><id>10518040</id><snippet>DEBUG</snippet></ROW><ROW><id>10518040</id><snippet>True</snippet></ROW><ROW><id>10518040</id><snippet>INTERNAL_IPS</snippet></ROW><ROW><id>10518040</id><snippet>def show_toolbar(request):
    return True
SHOW_TOOLBAR_CALLBACK = show_toolbar
</snippet></ROW><ROW><id>10518266</id><snippet>__range</snippet></ROW><ROW><id>10518325</id><snippet>@transaction
def insertData(self):
    # code
</snippet></ROW><ROW><id>10518325</id><snippet>def transaction(f):
    def pre():
        print "pre transaction"
    def post():
        print "post transaction"

    def wrapped(*args):
        pre()
        f(*args)
        post()

    return wrapped


class Foo(object):
    def __init__(self):
        print "instantiating"

    def doFoo(self):
        print "doing foo"

    @transaction
    def doBar(self, value):
        print "doing bar "+str(value)

@transaction
def foofunc():
    print "hello"

foofunc()

f=Foo()
f.doFoo()
f.doBar(5)
</snippet></ROW><ROW><id>10518325</id><snippet>stefanos-imac:python borini$ python decorator.py 
pre transaction
hello
post transaction
instantiating
doing foo
pre transaction
doing bar 5
post transaction
</snippet></ROW><ROW><id>10518325</id><snippet>import types


class DecoratedMetaClass(type):
    def __new__(meta, classname, bases, classDict):
        def pre():
            print "pre transaction"
        def post():
            print "post transaction"
        newClassDict={}
        for attributeName, attribute in classDict.items():
            if type(attribute) == types.FunctionType:
                def wrapFunc(f):
                    def wrapper(*args):
                        pre()
                        f(*args)
                        post()
                    return wrapper
                newAttribute = wrapFunc(attribute)
            else:
                newAttribute = attribute
            newClassDict[attributeName] = newAttribute
        return type.__new__(meta, classname, bases, newClassDict)



class MyClass(object):

    __metaclass__ = DecoratedMetaClass

    def __init__(self):
        print "init"
    def doBar(self, value):
        print "doing bar "+str(value)
    def doFoo(self):
        print "doing foo"



c = MyClass()
c.doFoo()
c.doBar(4)
</snippet></ROW><ROW><id>10518325</id><snippet>stefanos-imac:python borini$ python metaclass.py
pre transaction
init
post transaction
pre transaction
doing foo
post transaction
pre transaction
doing bar 4
post transaction
</snippet></ROW><ROW><id>10518325</id><snippet>__init__</snippet></ROW><ROW><id>10518325</id><snippet>        for attributeName, attribute in classDict.items():
            if type(attribute) == types.FunctionType:
</snippet></ROW><ROW><id>10518325</id><snippet>        for attributeName, attribute in classDict.items():
            if type(attribute) == types.FunctionType and "trans_" in attributeName[0:6]:
</snippet></ROW><ROW><id>10518754</id><snippet>i</snippet></ROW><ROW><id>10519014</id><snippet>Base.is_true</snippet></ROW><ROW><id>10519014</id><snippet>is_true</snippet></ROW><ROW><id>10519014</id><snippet>Base</snippet></ROW><ROW><id>10519014</id><snippet>d = {'test1': Base.is_true}
f = d['test1']
f(base)
</snippet></ROW><ROW><id>10519014</id><snippet>base</snippet></ROW><ROW><id>10519014</id><snippet>self</snippet></ROW><ROW><id>10519171</id><snippet>reader = CategorizedPlaintextCorpusReader('~/MainFolder/', r'.*\.txt', cat_pattern=r'(\w+)/*')
</snippet></ROW><ROW><id>10519171</id><snippet>reader = CategorizedPlaintextCorpusReader('~/MainFolder/', r'.*\.txt', cat_pattern=r'[0-100]_(\w+)\.txt')
</snippet></ROW><ROW><id>10519480</id><snippet>version</snippet></ROW><ROW><id>10519480</id><snippet>version: 1
</snippet></ROW><ROW><id>10519480</id><snippet>with open('logging.conf') as f:
    D = yaml.load(f)
D.setdefault('version', 1)
logging.config.dictConfig(D)
</snippet></ROW><ROW><id>10519554</id><snippet>from bs4 import BeautifulSoup
html_doc= """
&lt;article&gt;
&lt;topic&gt;oil, gas&lt;/topic&gt;
&lt;body&gt;body text&lt;/body&gt;
&lt;/article&gt;

&lt;article&gt;
&lt;topic&gt;food&lt;/topic&gt;
&lt;body&gt;body text&lt;/body&gt;
&lt;/article&gt;

&lt;article&gt;
&lt;topic&gt;cars&lt;/topic&gt;
&lt;body&gt;body text&lt;/body&gt;
&lt;/article&gt;
"""
soup = BeautifulSoup(html_doc)

bodies = [a.get_text() for a in soup.find_all('body')]
topics = [a.get_text() for a in soup.find_all('topic')]
</snippet></ROW><ROW><id>10519607</id><snippet>numpy.seterr</snippet></ROW><ROW><id>10519664</id><snippet>globals()['yourvariables'] = variable
</snippet></ROW><ROW><id>10520044</id><snippet>print("{0!r}".format("\b\f".replace("\b", "\\b").replace("\f", "\\f")))
</snippet></ROW><ROW><id>10520044</id><snippet>def escape_bs_and_ff(s):
    return s.replace("\b", "\\b").replace("\f", "\\f")

print("{0!r}".format(escape_bs_and_ff("\b\f"))
</snippet></ROW><ROW><id>10520224</id><snippet>row_pos</snippet></ROW><ROW><id>10520224</id><snippet>[0]</snippet></ROW><ROW><id>10520224</id><snippet># row_pos is an array representing one row of the 2d array csv_data_pos
# as returned by the csv.reader() call
for row_pos in csv_data_pos:
    count_pos = count_pos + 1
    pos_file_update = "UPDATE Sentence SET POS_score = %s WHERE Id = %s"
    # If there is a specific value from the row_pos array, use its array index
    c.execute(pos_file_update, (row_pos[0], count_pos))
</snippet></ROW><ROW><id>10520364</id><snippet>executescript()</snippet></ROW><ROW><id>10520364</id><snippet>with open(scriptPath, 'r') as inp:
    for line in inp:
        if line == 'GO\n':
            c.execute(sqlQuery)
            sqlQuery = ''
        elif 'PRINT' in line:
            disp = line.split("'")[1]
            print(disp, '\r')
        else:
            sqlQuery = sqlQuery + line
inp.close()
</snippet></ROW><ROW><id>10520765</id><snippet>&lt;pre class="brush: python"&gt;
   # python code here
&lt;/pre&gt;
</snippet></ROW><ROW><id>10520765</id><snippet>&lt;pre&gt;&lt;code&gt;</snippet></ROW><ROW><id>10520962</id><snippet>host.set_xlim(rel_time[0],rel_time[-1])
newax.set_xlim(abs_time[0],abs_time[-1])
</snippet></ROW><ROW><id>10520962</id><snippet>newax.plot()</snippet></ROW><ROW><id>10521004</id><snippet>O(n)</snippet></ROW><ROW><id>10521004</id><snippet>O(n)</snippet></ROW><ROW><id>10521004</id><snippet>O(1)</snippet></ROW><ROW><id>10521004</id><snippet>O(n^2)</snippet></ROW><ROW><id>10521054</id><snippet>&gt;&gt;&gt; def read_blocks(input_file, i, j):
    empty_lines = 0
    blocks = []
    for line in open(input_file):
        # Check for empty/commented lines
        if not line or line.startswith('#'):
            # If 1st one: new block
            if empty_lines == 0:
                blocks.append([])
            empty_lines += 1
        # Non empty line: add line in current(last) block
        else:
            empty_lines = 0
            blocks[-1].append(line)
    return blocks[i:j + 1]

&gt;&gt;&gt; for block in read_blocks(s, 1, 2):
    print '-&gt; block'
    for line in block:
        print line


-&gt; block
 0.5056E+03  0.8687E-03 -0.1202E-02  0.4652E-02
 0.3776E+03  0.8687E-03  0.1975E-04  0.9741E-03
 0.2496E+03  0.8687E-03  0.7894E-04  0.8334E-03
 0.1216E+03  0.8687E-03  0.1439E-03  0.6816E-03
-&gt; block
 0.5057E+03  0.7392E-03 -0.6891E-03  0.4700E-02
 0.3777E+03  0.9129E-03  0.2653E-04  0.9641E-03
 0.2497E+03  0.9131E-03  0.7970E-04  0.8173E-03
 0.1217E+03  0.9131E-03  0.1378E-03  0.6586E-03
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10521479</id><snippet>json</snippet></ROW><ROW><id>10521479</id><snippet>xml</snippet></ROW><ROW><id>10521479</id><snippet>JSON</snippet></ROW><ROW><id>10521479</id><snippet>import json
data_encoded = json.dumps(data)
req = urllib2.Request(url, data_encoded, {'Content-Type': 'application/json'})
response = urllib2.urlopen(req)
print response.read()
# ...
</snippet></ROW><ROW><id>10521520</id><snippet>b</snippet></ROW><ROW><id>10521520</id><snippet>id</snippet></ROW><ROW><id>10521520</id><snippet>a</snippet></ROW><ROW><id>10521520</id><snippet>In [1]: a = [{'id':1}, {'id':2}, {'id':3}]

In [2]: b = [2,1,3]

In [3]: a.sort(key=lambda v : b.index(v['id']))

In [4]: a
Out[4]: [{'id': 2}, {'id': 1}, {'id': 3}]
</snippet></ROW><ROW><id>10521520</id><snippet>lambda</snippet></ROW><ROW><id>10521540</id><snippet># Using numpy</snippet></ROW><ROW><id>10521540</id><snippet>if all(i in bits for i in input):
    print 'Valid input'
</snippet></ROW><ROW><id>10521540</id><snippet>list</snippet></ROW><ROW><id>10521540</id><snippet>set</snippet></ROW><ROW><id>10521540</id><snippet>False</snippet></ROW><ROW><id>10521540</id><snippet>input</snippet></ROW><ROW><id>10521540</id><snippet>bits</snippet></ROW><ROW><id>10521892</id><snippet>cnt = db.func.count(db.distinct(Content.id))
</snippet></ROW><ROW><id>10521986</id><snippet>is</snippet></ROW><ROW><id>10521986</id><snippet>==</snippet></ROW><ROW><id>10521986</id><snippet>a</snippet></ROW><ROW><id>10521986</id><snippet>b</snippet></ROW><ROW><id>10521986</id><snippet>a == b</snippet></ROW><ROW><id>10521986</id><snippet>*a == *b</snippet></ROW><ROW><id>10521986</id><snippet>==</snippet></ROW><ROW><id>10522104</id><snippet>{ _type: "video",
  data: {
    length: 120,
    director: "Smith",
    actors = ["Jones", "Lee"]
  }
}
</snippet></ROW><ROW><id>10522143</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[[0.1, 0.2, 0.3], [0.2, 0.3, 0.4]],
...               [[0.4, 0.4, 0.4], [0.7, 0.6, 0.8]]], np.float32)
&gt;&gt;&gt; b = np.average(a, axis=2)
&gt;&gt;&gt; b
array([[ 0.2       ,  0.29999998],
       [ 0.40000001,  0.69999999]], dtype=float32)
&gt;&gt;&gt; c = np.dstack((b, b, b))
&gt;&gt;&gt; c
array([[[ 0.2       ,  0.2       ,  0.2       ],
        [ 0.29999998,  0.29999998,  0.29999998]],

       [[ 0.40000001,  0.40000001,  0.40000001],
        [ 0.69999999,  0.69999999,  0.69999999]]], dtype=float32)
</snippet></ROW><ROW><id>10522326</id><snippet>time.strptime</snippet></ROW><ROW><id>10522326</id><snippet>'0'</snippet></ROW><ROW><id>10522863</id><snippet>str(row)</snippet></ROW><ROW><id>10522863</id><snippet>csv</snippet></ROW><ROW><id>10522863</id><snippet>with open('output.csv', 'wb') as f:
    writer = csv.writer(f)
    writer.writerow(['Column 1', 'Column 2', ...])
    writer.writerows(data)
</snippet></ROW><ROW><id>10522893</id><snippet>f = open("/home/usr/stuff", "r")
f.tell()
# shows you're at the start of the file
l = f.readlines()
f.tell()
# now shows your file position is at the end of the file
</snippet></ROW><ROW><id>10522895</id><snippet>class proto(parentProtocol):
    def stringReceived(self, data):
        self.handle_server_response(data)
        next_command = self.command_queue.pop()
        # do stuff
</snippet></ROW><ROW><id>10522895</id><snippet>class proto(parentProtocol):
    def stringReceived(self, data):
        if data == "this":
            self.sendString("that")
        elif data == "foo":
            self.sendString("bar")
        # and so on
</snippet></ROW><ROW><id>10522895</id><snippet>class proto(parentProtocol):
    def callback(self):
        next_command = self.command_queue.pop()
        # do stuff
    def connectionMade(self):
        from twisted.internet import task
        self.task_id = task.LoopingCall(self.callback)
        self.task_id.start(1.0)
</snippet></ROW><ROW><id>10522895</id><snippet>proto.sendString</snippet></ROW><ROW><id>10522934</id><snippet>x and y or z</snippet></ROW><ROW><id>10522934</id><snippet>y</snippet></ROW><ROW><id>10522934</id><snippet>def fibonacci(n):
    return n &gt;= 2 and fibonacci(n-1) + fibonacci(n-2) or n
</snippet></ROW><ROW><id>10522934</id><snippet>and/or</snippet></ROW><ROW><id>10522934</id><snippet>def fibonacci(n):
    return n if n &lt; 2 else fibonacci(n-1) + fibonacci(n-2)
</snippet></ROW><ROW><id>10522934</id><snippet>O(n)</snippet></ROW><ROW><id>10522934</id><snippet>def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a
</snippet></ROW><ROW><id>10523805</id><snippet>table.find()</snippet></ROW><ROW><id>10523805</id><snippet>table.string</snippet></ROW><ROW><id>10524276</id><snippet>from collections import defaultdict
a = defaultdict((lambda : 'DNE'))
</snippet></ROW><ROW><id>10524276</id><snippet>&gt;&gt;&gt; class mydict(dict):
...     def __missing__(self,key):
...         return key
... 
&gt;&gt;&gt; a = mydict()
&gt;&gt;&gt; a['asd']
'asd'
</snippet></ROW><ROW><id>10524344</id><snippet>for row in input</snippet></ROW><ROW><id>10524344</id><snippet>for row in readinput</snippet></ROW><ROW><id>10524407</id><snippet>$txtSearch</snippet></ROW><ROW><id>10524407</id><snippet>$holidayDoc = simplexml_load_file($url);    
$qry = "//channel/item[description[contains(text(),\"$txtSearch\")]]";
$holidayDoc-&gt;xpath($qry);
</snippet></ROW><ROW><id>10524481</id><snippet>str.rstrip([chars])</snippet></ROW><ROW><id>10524481</id><snippet>s2 = s2.rstrip(";")
</snippet></ROW><ROW><id>10524948</id><snippet>sandbox.call(eval, CODE)</snippet></ROW><ROW><id>10524948</id><snippet>from sandbox.proxy import proxy
from sandbox.sandbox_class import _call_exec

def proxyNamespace(d):
    return dict((str(k), proxy(v)) for k, v in d.iteritems())

def wrapeval(codestr, globs, locs):
    subglobs = proxyNamespace(globs)
    sublocs = proxyNamespace(locs)
    return eval(codestr, subglobs, sublocs)

def eval_in_sandbox(sandbox, codestr, globs=None, locs=None):
    if globs is None:
        globs = {}
    if locs is None:
        locs = globs
    return sandbox._call(wrapeval, (codestr, locs, globs), {})

def exec_in_sandbox_with_mutable_namespace(sandbox, codestr, globs=None, locs=None):
    if globs is None:
        globs = {}
    if locs is None:
        locs = globs
    subglobs = proxyNamespace(globs)
    sublocs = proxyNamespace(locs)
    sandbox._call(_call_exec, (codestr, subglobs, sublocs), {})
    globs.update(subglobs)
    locs.update(sublocs)
</snippet></ROW><ROW><id>10525041</id><snippet>True</snippet></ROW><ROW><id>10525041</id><snippet>False</snippet></ROW><ROW><id>10525041</id><snippet>skipIf()</snippet></ROW><ROW><id>10525041</id><snippet>lambda: Settings.flag==True</snippet></ROW><ROW><id>10525041</id><snippet>Settings.flag</snippet></ROW><ROW><id>10525041</id><snippet>Settings.flag==True</snippet></ROW><ROW><id>10525046</id><snippet>stringReceived</snippet></ROW><ROW><id>10525046</id><snippet>if</snippet></ROW><ROW><id>10525046</id><snippet>def stringReceived(self, data):
    getattr(self, "stringReceived_{}".format(self.state))(data)

def stringReceived_authenticate(self, data):
    if self.auth_ok(data):
       self.state = 'normal'
    else:
       self.transport.loseConnection()

def stringReceived_normal(self, data):
    self.do_stuff(data)
</snippet></ROW><ROW><id>10525233</id><snippet>&gt;&gt;&gt; import pytz, datetime
&gt;&gt;&gt; UTC_TZ = pytz.utc
&gt;&gt;&gt; EASTERN_TZ = pytz.timezone('America/New_York')
&gt;&gt;&gt; d1 = datetime.datetime(2012, 1, 1, 10, 0, tzinfo=UTC_TZ)
&gt;&gt;&gt; d2 = datetime.datetime(2012, 1, 1, 10, 0, tzinfo=EASTERN_TZ)
&gt;&gt;&gt; d1 &lt; d2
True
</snippet></ROW><ROW><id>10525417</id><snippet>apt-get upgrade gcc</snippet></ROW><ROW><id>10525417</id><snippet>numpy</snippet></ROW><ROW><id>10525433</id><snippet>import threading
import time
import inspect

class Thread(threading.Thread):
    def __init__(self, t, *args):
        threading.Thread.__init__(self, target=t, args=args)
        self.start()

count = 0
lock = threading.Lock()

def incre():
    global count
    caller = inspect.getouterframes(inspect.currentframe())[1][3]
    print "Inside %s()" % caller
    print "Acquiring lock"
    with lock:
        print "Lock Acquired"
        count += 1  
        time.sleep(2)  

def bye():
    while count &lt; 5:
        incre()

def hello_there():
    while count &lt; 5:
        incre()

def main():    
    hello = Thread(hello_there)
    goodbye = Thread(bye)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10525433</id><snippet>...
Inside hello_there()
Acquiring lock
Lock Acquired
Inside bye()
Acquiring lock
Lock Acquired
...
</snippet></ROW><ROW><id>10525553</id><snippet> clock.schedule_interval(self.update,1.0/75.0)   
 clock.set_fps_limit(75)
</snippet></ROW><ROW><id>10525947</id><snippet>latin1</snippet></ROW><ROW><id>10525947</id><snippet>?</snippet></ROW><ROW><id>10525947</id><snippet>utf8</snippet></ROW><ROW><id>10525947</id><snippet>\u</snippet></ROW><ROW><id>10525947</id><snippet>\x</snippet></ROW><ROW><id>10525947</id><snippet>latin1</snippet></ROW><ROW><id>10525947</id><snippet>0xd1</snippet></ROW><ROW><id>10525947</id><snippet>utf8</snippet></ROW><ROW><id>10525947</id><snippet>0xc391</snippet></ROW><ROW><id>10525947</id><snippet>\xc3</snippet></ROW><ROW><id>10525947</id><snippet>0x91</snippet></ROW><ROW><id>10525947</id><snippet>\u0192\xc2\u2018</snippet></ROW><ROW><id>10525947</id><snippet>SELECT HEX(my_column) FROM my_table WHERE ...
</snippet></ROW><ROW><id>10525947</id><snippet>utf8</snippet></ROW><ROW><id>10525947</id><snippet>utf8</snippet></ROW><ROW><id>10525947</id><snippet>latin1</snippet></ROW><ROW><id>10525947</id><snippet>utf8</snippet></ROW><ROW><id>10525947</id><snippet>latin1</snippet></ROW><ROW><id>10525954</id><snippet>   &gt;&gt;&gt; import os
   &gt;&gt;&gt; help(os.path.split)
    Help on function split in odule ntpath:

    split(p)
        Split a pathname.
        Return tuple (head, tail) where tail is everything after the final slash.
        Either part may be empty.
</snippet></ROW><ROW><id>10525956</id><snippet>doctest</snippet></ROW><ROW><id>10525956</id><snippet> ...

  def __str__(self):
    '''Returns the attributes of the employee for printing

    &gt;&gt;&gt; import datetime
    &gt;&gt;&gt; e = Employee(10, 'Bob', 'Quux', '123', startDate=datetime.datetime(2009, 1, 1))
    &gt;&gt;&gt; print str(e)
    10, Bob Quux, 123, 0001-01-01 00:00:00, 2009-01-01 00:00:00
    '''
    return str(self.salary) + ', ' + self.firstName + ' ' + self.lastName + ', ' + self.ssID + ', ' + str(self.DOB) + ', ' + str(self.startDate)

if __name__ == '__main__':
  import doctest
  doctest.testmod()
</snippet></ROW><ROW><id>10526418</id><snippet>a</snippet></ROW><ROW><id>10526418</id><snippet>tk.Frame</snippet></ROW><ROW><id>10526418</id><snippet>tk.Frame</snippet></ROW><ROW><id>10526418</id><snippet>a = None</snippet></ROW><ROW><id>10526418</id><snippet>del a</snippet></ROW><ROW><id>10526664</id><snippet>vector_C</snippet></ROW><ROW><id>10526664</id><snippet>dtype=bool</snippet></ROW><ROW><id>10526664</id><snippet>In [1]: vector_A = scipy.randn(4)

In [2]: vector_B = scipy.zeros(4)

In [3]: vector_A
Out[3]: array([ 0.12515902, -0.53244222, -0.67717936, -0.74164708])

In [4]: vector_B
Out[4]: array([ 0.,  0.,  0.,  0.])

In [5]: vector_C = vector_A &gt; vector_B

In [6]: vector_C
Out[6]: array([ True, False, False, False], dtype=bool)

In [7]: vector_C.sum()
Out[7]: 1

In [8]: vector_C.mean()
Out[8]: 0.25

In [9]: 3 - vector_C
Out[9]: array([2, 3, 3, 3])
</snippet></ROW><ROW><id>10526664</id><snippet>astype</snippet></ROW><ROW><id>10526664</id><snippet>In [10]: vector_C.astype(int)
Out[10]: array([1, 0, 0, 0])

In [11]: vector_C.astype(float)
Out[11]: array([ 1.,  0.,  0.,  0.])
</snippet></ROW><ROW><id>10526804</id><snippet>s += s2</snippet></ROW><ROW><id>10526804</id><snippet>U+FB</snippet></ROW><ROW><id>10526804</id><snippet>LATIN SMALL LETTER U WITH CIRCUMFLEX</snippet></ROW><ROW><id>10526804</id><snippet>s2 = u"\u00fb"
</snippet></ROW><ROW><id>10526804</id><snippet>repr</snippet></ROW><ROW><id>10526804</id><snippet>s</snippet></ROW><ROW><id>10526804</id><snippet>s = s.encode('utf-8')
s += s2

print repr(s)
</snippet></ROW><ROW><id>10526804</id><snippet>repr</snippet></ROW><ROW><id>10526804</id><snippet>import re
controlchars_re = re.compile(r'[\x00-\x31\x7f-\xff]')

def _show_control_chars(match):
    txt = repr(match.group(0))
    return txt[1:-1]

def escape_special_characters(s):
    return controlchars_re.sub(_show_control_chars, s.replace('\\', '\\\\'))
</snippet></ROW><ROW><id>10526804</id><snippet>controlchars_re</snippet></ROW><ROW><id>10526825</id><snippet>a_dict = {"A":[0], "B":[0]}

def GetElementRef(index):
    return a_dict[index]

would_like_to_modify = GetElementRef("A")
print would_like_to_modify
&gt; [0]

would_like_to_modify[0] = 2
print would_like_to_modify
&gt; [2]
</snippet></ROW><ROW><id>10527361</id><snippet>class Blog(Module):
    def _get_posts(self):
        return Post.objects.filter(module=self)
    posts = property(_get_posts)
</snippet></ROW><ROW><id>10527478</id><snippet>pkgutil.walk_packages</snippet></ROW><ROW><id>10527478</id><snippet>def load(root_import_path, is_valid=lambda entity: True):
    """Returns modules in ``root_import_path`` that satisfy the ``is_valid`` test

    :param root_import_path: An string name for importing (i.e. "myapp").
    :param is_valid: A callable that takes a variable and returns ``True``
                     if it is of interest to us."""

    prefix = root_import_path + u"."
    modules = []

    for _, name, is_pkg in walk_packages(root_import_path, prefix=prefix):
        if is_pkg: 
            continue
        module_code = __import__(name)
        contents = dir(module_code)
        for thing in contents:
            if is_valid(thing):
                modules.append(thing)

    return modules
</snippet></ROW><ROW><id>10527478</id><snippet>straight.plugin</snippet></ROW><ROW><id>10527478</id><snippet>load</snippet></ROW><ROW><id>10527611</id><snippet>int</snippet></ROW><ROW><id>10527611</id><snippet>int</snippet></ROW><ROW><id>10527611</id><snippet>System.out.println(Integer.MAX_VALUE + 1);
// Integer.MAX_VALUE = 0x7fffffff
</snippet></ROW><ROW><id>10527611</id><snippet>-2147483648
// 0x7fffffff + 1 = 0x800000000
</snippet></ROW><ROW><id>10527611</id><snippet>int a = 0x12345678;
int b = 0x12345678;
System.out.println("a*b as int multiplication (overflown) [DECIMAL]: " + (a*b));
System.out.println("a*b as int multiplication (overflown) [HEX]: 0x" + Integer.toHexString(a*b));
System.out.println("a*b as long multiplication (overflown) [DECIMAL]: " + ((long)a*b));
System.out.println("a*b as long multiplication (overflown) [HEX]: 0x" + Long.toHexString((long)a*b));
</snippet></ROW><ROW><id>10527611</id><snippet>a*b as int multiplication (overflown) [DECIMAL]: 502585408
a*b as int multiplication (overflown) [HEX]: 0x1df4d840
a*b as long multiplication (overflown) [DECIMAL]: 93281312872650816
a*b as long multiplication (overflown) [HEX]: 0x14b66dc1df4d840
</snippet></ROW><ROW><id>10527690</id><snippet>def get_total(self, cr, uid, ids, fields, arg, context):

    x={}

    for record in self.browse(cr, uid, ids):

        x[record.id]= record.field1 + record.field2 + record.field3

    return x
</snippet></ROW><ROW><id>10527723</id><snippet>counters.form = collections.defaultdict(collections.Counter)
</snippet></ROW><ROW><id>10527723</id><snippet>counters.form</snippet></ROW><ROW><id>10527723</id><snippet>form</snippet></ROW><ROW><id>10527723</id><snippet>#-- Build the example data into the proposed structure...
counters.form['a'].update({'email1':4, 'email2':3})
counters.form['the'].update({'email1':2, 'email3':4})
counters.form['or'].update({'email1':2, 'email3':1}})
</snippet></ROW><ROW><id>10527723</id><snippet>print counters.form['a']['email2']
</snippet></ROW><ROW><id>10527723</id><snippet>3</snippet></ROW><ROW><id>10527723</id><snippet>print counters.form['noword']['some-email']
</snippet></ROW><ROW><id>10527723</id><snippet>collections.defaultdict(dict)</snippet></ROW><ROW><id>10527723</id><snippet>counters.form</snippet></ROW><ROW><id>10527723</id><snippet>counters.form['noword']</snippet></ROW><ROW><id>10527723</id><snippet>KeyError</snippet></ROW><ROW><id>10527723</id><snippet>collections.defaultdict(collections.Counter)</snippet></ROW><ROW><id>10527723</id><snippet>counters.form</snippet></ROW><ROW><id>10527723</id><snippet>collections.Counter</snippet></ROW><ROW><id>10527723</id><snippet>#-- Show distinct emails which contain 'someword'
emails = list(counters.form['someword'])

#-- Show tally of all observations of 'someword'
tally = sum(counters.form['someword'].values( ))
</snippet></ROW><ROW><id>10527953</id><snippet>import numpy as np
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.multiclass import OneVsRestClassifier

X_train = np.array(["new york is a hell of a town",
                    "new york was originally dutch",
                    "the big apple is great",
                    "new york is also called the big apple",
                    "nyc is nice",
                    "people abbreviate new york city as nyc",
                    "the capital of great britain is london",
                    "london is in the uk",
                    "london is in england",
                    "london is in great britain",
                    "it rains a lot in london",
                    "london hosts the british museum",
                    "new york is great and so is london",
                    "i like london better than new york"])
y_train = [[0],[0],[0],[0],[0],[0],[1],[1],[1],[1],[1],[1],[0,1],[0,1]]
X_test = np.array(['nice day in nyc',
                   'welcome to london',
                   'hello welcome to new york. enjoy it here and london too'])   
target_names = ['New York', 'London']

classifier = Pipeline([
    ('vectorizer', CountVectorizer(min_n=1,max_n=2)),
    ('tfidf', TfidfTransformer()),
    ('clf', OneVsRestClassifier(LinearSVC()))])
classifier.fit(X_train, y_train)
predicted = classifier.predict(X_test)
for item, labels in zip(X_test, predicted):
    print '%s =&gt; %s' % (item, ', '.join(target_names[x] for x in labels))
</snippet></ROW><ROW><id>10527953</id><snippet>nice day in nyc =&gt; New York
welcome to london =&gt; London
hello welcome to new york. enjoy it here and london too =&gt; New York, London
</snippet></ROW><ROW><id>10528045</id><snippet>import sys
import time
from subprocess import PIPE, Popen
from threading  import Thread

try:
    from Queue import Queue, Empty
except ImportError:
    from queue import Queue, Empty  # python 3.x

ON_POSIX = 'posix' in sys.builtin_module_names

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        timestamp = time.time( )
        queue.put((timestamp, line))
    out.close()

#-- This is how long you're willing to wait before you 
#-- consider your Spynner process to be brain-dead.
MAX_WAIT_TIME = 300.0  #-- we'll wait 5 minutes (300 seconds)

#-- Construct a shared queue that will be used to send messages from 
#-- the subprocess I/O polling thread to the watchdog (main) thread.
q = Queue()

#-- Spawn your subprocess...
p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)

#-- Create a new thread that runs in the same process as the watchdog.
#-- This thread will poll the output of the subprocess and populate the 
#-- shared queue.
t = Thread(target=enqueue_output, args=(p.stdout, q))
t.daemon = True # thread dies with the program
t.start()

#-- Now, we'll try to read from the shared queue.
try:
    #-- Queries the shared queue for the next item in the queue,
    #-- waiting for up to MAX_WAIT_TIME before failing with an Empty exception.
    timestamp, line = q.get(True, MAX_WAIT_TIME)
except Empty:
    #-- Ok...the queue is empty and it's been MAX_WAIT_TIME since
    #-- We've pulled anything from the queue.
    p.terminate( )  #-- "terminate with extreme prejudice"
else: # got line
    #-- Got a (timestamp, line_of_text) pair, where the timestamp is the
    #-- system time when the I/O polling thread grabbed the line from
    #-- the subprocess pipe.  This timestamp isn't strictly necessary,
    #-- but might come in handy in debugging the brain-dead Spynner process.
    #-- So now...do something with that line of text!
    doSomething(line)
</snippet></ROW><ROW><id>10528052</id><snippet>from gi.repository import Gtk, GtkSource, GObject
from os.path import abspath, dirname, join

WHERE_AM_I = abspath(dirname(__file__))

class MyApp(object):

    def __init__(self):
        self.builder = Gtk.Builder()
        self.glade_file = join(WHERE_AM_I, 'test.glade')
        GObject.type_register(GtkSource.View)
        self.builder.add_from_file(self.glade_file)

if __name__ == '__main__':
    try:
        gui = MyApp()
        Gtk.main()
    except KeyboardInterrupt:
        pass
</snippet></ROW><ROW><id>10528071</id><snippet>if a == 'y' or 1 &lt;= int(a) &lt;= 10:
</snippet></ROW><ROW><id>10528071</id><snippet>def checkingInput():
    while True:
        try:
            a = input('enter')
            if a == 'y' or 1 &lt;= int(a) &lt;= 10:
                return a
            else:
                print('Invalid input!')
        except ValueError:
            print('Value error! Please try again!')
</snippet></ROW><ROW><id>10528089</id><snippet>tree = {
       'top': {
              'a': {
                   'path': a_pathvar,
                   'a1':
                   'a2':
               }
               'b': {
                    'path':  b_pathvar,
                }
         }
       }
</snippet></ROW><ROW><id>10528089</id><snippet>a1</snippet></ROW><ROW><id>10528089</id><snippet>tree['top']['a']['a1']['path']</snippet></ROW><ROW><id>10528089</id><snippet>def tree(): return defaultdict(tree)
</snippet></ROW><ROW><id>10528089</id><snippet>tree['top']['a']['long']['tree']['path'] = path_var
</snippet></ROW><ROW><id>10528186</id><snippet>self</snippet></ROW><ROW><id>10528186</id><snippet>staticmethod</snippet></ROW><ROW><id>10528186</id><snippet>def is_valid(x, y):
</snippet></ROW><ROW><id>10528186</id><snippet>x</snippet></ROW><ROW><id>10528186</id><snippet>y</snippet></ROW><ROW><id>10528186</id><snippet>def is_valid(self, x, y)
</snippet></ROW><ROW><id>10528186</id><snippet>staticmethod</snippet></ROW><ROW><id>10528186</id><snippet>@staticmethod
def is_valid(x, y):
</snippet></ROW><ROW><id>10528370</id><snippet>global</snippet></ROW><ROW><id>10528370</id><snippet>class inp(threading.Thread):
    def run(self):
        global count
        while count &lt; 11:
            time.sleep(0.5)
            print("Thread 1!")
            count += 1
</snippet></ROW><ROW><id>10528370</id><snippet>count</snippet></ROW><ROW><id>10528370</id><snippet>count</snippet></ROW><ROW><id>10528386</id><snippet>&gt;&gt;&gt; d={'s1':{'a':[1,2,3],'b':[4,5,6]},'s2':{'d':[77,88,99],'e':[666,333,444]}}
&gt;&gt;&gt; for k in sorted(d.keys()):
...   v = d[k]
...   for i in xrange(len(v.values()[0])):
...     print k
...     for k2 in sorted(v.keys()):
...       v2 = v[k2]
...       print "%s,%d" % (k2, v2[i])
...     print "%s\n" % k
... 
</snippet></ROW><ROW><id>10528386</id><snippet>s1
a,1
b,4
s1

s1
a,2
b,5
s1

s1
a,3
b,6
s1

s2
d,77
e,666
s2

s2
d,88
e,333
s2

s2
d,99
e,444
s2
</snippet></ROW><ROW><id>10528855</id><snippet>  canvas = Canvas(self)
  canvas.pack()
</snippet></ROW><ROW><id>10529123</id><snippet>save()</snippet></ROW><ROW><id>10529123</id><snippet>pre_save</snippet></ROW><ROW><id>10529123</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>10529502</id><snippet>-k/--insecure</snippet></ROW><ROW><id>10529502</id><snippet>verify=False</snippet></ROW><ROW><id>10529547</id><snippet>callable(var)</snippet></ROW><ROW><id>10529547</id><snippet>class Dummy(object):
    pass
foo = Dummy()
if False:
    foo()
foo.__call__ = lambda self: 'meow'
foo.x = 'y'
foo()
</snippet></ROW><ROW><id>10529547</id><snippet>foo</snippet></ROW><ROW><id>10529547</id><snippet>__call__</snippet></ROW><ROW><id>10529568</id><snippet>crossDomain : true</snippet></ROW><ROW><id>10529568</id><snippet>$.ajax()</snippet></ROW><ROW><id>10529595</id><snippet>main(lesson1())
</snippet></ROW><ROW><id>10529595</id><snippet>def lesson1(): 
    #create a dictionary 
    mydict = {
        "q1":"a1", 
        "q2":"a2"
    }
    return mydict
</snippet></ROW><ROW><id>10529658</id><snippet>score = dict(high=0, medium=1, low=2)
mylist.sort(key=lambda x: score[x.priority])
</snippet></ROW><ROW><id>10529712</id><snippet>signal.signal</snippet></ROW><ROW><id>10529712</id><snippet>import signal
import sys
signal.signal(signal.SIGTERM, lambda signum, stack_frame: sys.exit(1))
</snippet></ROW><ROW><id>10530006</id><snippet>set</snippet></ROW><ROW><id>10530006</id><snippet>if element in my_set</snippet></ROW><ROW><id>10530006</id><snippet>O(1)</snippet></ROW><ROW><id>10530006</id><snippet>O(n)</snippet></ROW><ROW><id>10530006</id><snippet>dict</snippet></ROW><ROW><id>10530006</id><snippet>set</snippet></ROW><ROW><id>10530006</id><snippet>O(1)</snippet></ROW><ROW><id>10530006</id><snippet>set</snippet></ROW><ROW><id>10530006</id><snippet>dict</snippet></ROW><ROW><id>10530006</id><snippet>set</snippet></ROW><ROW><id>10530006</id><snippet>itertools.chain()</snippet></ROW><ROW><id>10530006</id><snippet>import itertools
seen = set()
for author in itertools.chain(*authors):
    seen.add(author)
</snippet></ROW><ROW><id>10530006</id><snippet>import itertools
seen = set( itertools.chain(*authors) )
</snippet></ROW><ROW><id>10530006</id><snippet>import itertools
seen = set( itertools.chain.from_iterable(authors) )
</snippet></ROW><ROW><id>10530006</id><snippet>&gt;&gt;&gt; a = [[1,2],[1,2],[1,2],[3,4]]
&gt;&gt;&gt; set ( itertools.chain(*a) )
set([1, 2, 3, 4])
</snippet></ROW><ROW><id>10530006</id><snippet>collections.Counter</snippet></ROW><ROW><id>10530006</id><snippet>&gt;&gt;&gt; a = "DEADBEEF CAFEBABE"
&gt;&gt;&gt; import collections
&gt;&gt;&gt; collections.Counter(a)
Counter({'E': 5, 'A': 3, 'B': 3, 'D': 2, 'F': 2, ' ': 1, 'C': 1})
</snippet></ROW><ROW><id>10530069</id><snippet>sorted(reader, key=lambda row: int(row[0]))
</snippet></ROW><ROW><id>10530415</id><snippet>'%s' % 100000</snippet></ROW><ROW><id>10530415</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda: str(100000))
  8           0 LOAD_GLOBAL              0 (str)
              3 LOAD_CONST               1 (100000)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lambda: '%s' % 100000)
  9           0 LOAD_CONST               3 ('100000')
              3 RETURN_VALUE        
</snippet></ROW><ROW><id>10530415</id><snippet>%</snippet></ROW><ROW><id>10530415</id><snippet>str</snippet></ROW><ROW><id>10530415</id><snippet>&gt;&gt;&gt; Timer('str(x)', 'x=100').timeit()
0.25641703605651855
&gt;&gt;&gt; Timer('"%s" % x', 'x=100').timeit()
0.2169809341430664
</snippet></ROW><ROW><id>10530415</id><snippet>str</snippet></ROW><ROW><id>10530415</id><snippet>str</snippet></ROW><ROW><id>10530415</id><snippet>%</snippet></ROW><ROW><id>10530415</id><snippet>&gt;&gt;&gt; dis.dis(lambda x: str(x))
  9           0 LOAD_GLOBAL              0 (str)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lambda x: '%s' % x)
 10           0 LOAD_CONST               1 ('%s')
              3 LOAD_FAST                0 (x)
              6 BINARY_MODULO       
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>10531360</id><snippet>if col.lower() == "apple"
</snippet></ROW><ROW><id>10531360</id><snippet>if col.lower() == "apple":
</snippet></ROW><ROW><id>10531424</id><snippet>   ~/.pythonrc.py
          User-specific initialization file loaded by the user module; not used by default or by most applications.

ENVIRONMENT VARIABLES

   PYTHONPATH
          Augments the default search path for module files.  The format is the same as the shell's $PATH: one or more directory  pathnames
          separated by colons.  Non-existent directories are silently ignored.  The default search path is installation dependent, but gen-
          erally begins with ${prefix}/lib/python&lt;version&gt; (see PYTHONHOME above).  The default search path is always appended to  $PYTHON-
          PATH.   If  a script argument is given, the directory containing the script is inserted in the path in front of $PYTHONPATH.  The
          search path can be manipulated from within a Python program as the variable sys.path .
</snippet></ROW><ROW><id>10531619</id><snippet>x_list = [x] * 10
y_list = [y] * 10
big_list = x_list + y_list
</snippet></ROW><ROW><id>10531619</id><snippet>x_list = [x for i in xrange(10)]
</snippet></ROW><ROW><id>10531619</id><snippet>for</snippet></ROW><ROW><id>10531619</id><snippet>for i in xrange(10):
    x_list.append(x)
</snippet></ROW><ROW><id>10531740</id><snippet>colormap</snippet></ROW><ROW><id>10531740</id><snippet>masked array</snippet></ROW><ROW><id>10531740</id><snippet>import matplotlib
from pylab import *

data = np.arange(-50, 50).reshape(10, 10)
data = np.abs(data)
pcolor(data, cmap=cm.YlOrRd)
show()
</snippet></ROW><ROW><id>10531740</id><snippet>colors</snippet></ROW><ROW><id>10531740</id><snippet>cm.YlOrRd</snippet></ROW><ROW><id>10531740</id><snippet>0</snippet></ROW><ROW><id>10531740</id><snippet>0,0,0</snippet></ROW><ROW><id>10531740</id><snippet>LinearSegmentedColormap.from_list</snippet></ROW><ROW><id>10531740</id><snippet>import matplotlib
from pylab import *

data = np.arange(-50, 50).reshape(10, 10)
data = np.abs(data)
colors = [(0,0,0)] + [(cm.YlOrRd(i)) for i in xrange(1,256)]
new_map = matplotlib.colors.LinearSegmentedColormap.from_list('new_map', colors, N=256)
pcolor(data, cmap=new_map)
savefig('map.png')
show()
</snippet></ROW><ROW><id>10531740</id><snippet>from pylab import *
import numpy.ma as ma

data=np.arange(-50,50).reshape(10,10)
data=np.abs(data)
#create a mask where only values=0 are true:
mask = data == 0
#create a masked array by combining our mask and data:
mx = ma.masked_array(data, mask)
#set masked values in cm.YlOrRd to 'black'
cm.YlOrRd.set_bad(color='black', alpha=None)
# pcolor(data,cmap=cm.YlOrRd)
#we must use pcolormesh instead of pcolor, as pcolor does not draw masked values at all
pcolormesh(mx,cmap=cm.YlOrRd)
show()
</snippet></ROW><ROW><id>10531740</id><snippet>cm.YlOrRd</snippet></ROW><ROW><id>10531769</id><snippet>In [1]: nums = [1, 2, 3, 4]

In [2]: [(x, tuple(y for y in nums if y != x)) for x in nums]
Out[2]: [(1, (2, 3, 4)), (2, (1, 3, 4)), (3, (1, 2, 4)), (4, (1, 2, 3))]
</snippet></ROW><ROW><id>10531769</id><snippet>In [3]: [(x, tuple(y for j, y in enumerate(nums) if j != i)) for i, x in enumerate(nums)]
Out[3]: [(1, (2, 3, 4)), (2, (1, 3, 4)), (3, (1, 2, 4)), (4, (1, 2, 3))]
</snippet></ROW><ROW><id>10531840</id><snippet>"%02X" % ord(b'\xff')
</snippet></ROW><ROW><id>10531840</id><snippet>'FF'</snippet></ROW><ROW><id>10532099</id><snippet>pip tick</snippet></ROW><ROW><id>10532099</id><snippet>tick.py</snippet></ROW><ROW><id>10532253</id><snippet>subplots_adjust()</snippet></ROW><ROW><id>10532253</id><snippet>import matplotlib.pyplot as plt
fig=plt.figure()
ax=fig.add_subplot(111)
ax.plot([1,2,3],[5,6,7],'gs-')
plt.subplots_adjust(top=0.99, right=0.99)
plt.show()
</snippet></ROW><ROW><id>10532390</id><snippet>&gt;&gt;&gt; class Wrapper(object):
...     def __init__(self, data):
...         self.data = data
...     def __getattr__(self, attr):
...         return [d[attr] for d in self.data]
... 
&gt;&gt;&gt; Wrapper([{'x': 23}, {'x': 42}, {'x': 5}]).x
[23, 42, 5]
</snippet></ROW><ROW><id>10532390</id><snippet>__getattr__()</snippet></ROW><ROW><id>10532390</id><snippet>__setattr__()</snippet></ROW><ROW><id>10532492</id><snippet>&gt;&gt;&gt; head, *tail = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
&gt;&gt;&gt; head
1
&gt;&gt;&gt; tail
[1, 2, 3, 5, 8, 13, 21, 34, 55]
</snippet></ROW><ROW><id>10532492</id><snippet>*</snippet></ROW><ROW><id>10532492</id><snippet>it = iter(iterable)
head = it.next()
tail = list(it)
</snippet></ROW><ROW><id>10532492</id><snippet>head, tail = seq[0], seq[1:]
</snippet></ROW><ROW><id>10532649</id><snippet>^</snippet></ROW><ROW><id>10532649</id><snippet>$</snippet></ROW><ROW><id>10532649</id><snippet>rule = "^http://www\.abc\.com/$"
test = "http://www.abc.com/test"
print(str(re.compile(rule).match(test)))
</snippet></ROW><ROW><id>10532649</id><snippet>.</snippet></ROW><ROW><id>10532649</id><snippet>.</snippet></ROW><ROW><id>10532649</id><snippet>\</snippet></ROW><ROW><id>10532710</id><snippet>    position = e.pos()

    print position

    row = self.rowAt(position.y())

    column = self.columnAt(position.x())

    self.setCellWidget(row,column,self.butObject)

    e.setDropAction(QtCore.Qt.MoveAction)
    e.accept()
</snippet></ROW><ROW><id>10532848</id><snippet>import subprocess
import sys
import os
args = [sys.executable] + sys.argv
new_environ = os.environ.copy()

if hasattr(subprocess, 'CREATE_NEW_CONSOLE'):
    popen = subprocess.Popen(args, env=new_environ, creationflags=subprocess.CREATE_NEW_CONSOLE)
    exit_code = popen.wait()
else:
    #On Linux, CREATE_NEW_CONSOLE is not available, thus, we use xterm itself.
    args = ['xterm', '-e'] + args
    popen = subprocess.Popen(args, env=new_environ)
    popen.wait() #This exit code will always be 0 when xterm is executed.
</snippet></ROW><ROW><id>10533232</id><snippet>text = \
"""a b c d e
f g h i j
k l m n o
p q r s t"""

# Translate file to matrix (list of lists)
matrix = map(lambda x: x.split(" "), text.split("\n"))

# Determine height and height of matrix
height = len(matrix)
width = len(matrix[0])

# Choose two (unique) numbers for transposing the first two columns
transpose_list = sample(xrange(0, height), 2)

# Now build a new matrix, transposing only the first two
# columns.
new_matrix = []
for y in range(0, height):
    row = []
    for x in range(0, 2):
        transpose = (y + transpose_list[x]) % height
        row.append(matrix[transpose][x])

    for x in range(2, width):
        row.append(matrix[y][x])

    new_matrix.append(row)

# And create a list again
new_text = "\n".join(map(lambda x: " ".join(x), new_matrix))
print new_text
</snippet></ROW><ROW><id>10533232</id><snippet>a l c d e
f q h i j
k b m n o
p g r s t
</snippet></ROW><ROW><id>10533354</id><snippet>reverse</snippet></ROW><ROW><id>10533354</id><snippet>reverse('app1.view.view1')
</snippet></ROW><ROW><id>10533354</id><snippet>redirect</snippet></ROW><ROW><id>10533354</id><snippet>redirect('app1.view.view1')
</snippet></ROW><ROW><id>10533384</id><snippet>pytidylib</snippet></ROW><ROW><id>10533384</id><snippet>import urllib2
from StringIO import StringIO

from BeautifulSoup import BeautifulSoup
from tidylib import tidy_document

html = urllib2.urlopen("http://www.hitmeister.de").read()
tidy, errors = tidy_document(html)
soup = BeautifulSoup(tidy)
print type(soup)
</snippet></ROW><ROW><id>10533384</id><snippet>(py26_default)[mpenning@Bucksnort ~]$ python foo.py
&lt;class 'BeautifulSoup.BeautifulSoup'&gt;
(py26_default)[mpenning@Bucksnort ~]$
</snippet></ROW><ROW><id>10533384</id><snippet>errors</snippet></ROW><ROW><id>10533384</id><snippet>pytidylib</snippet></ROW><ROW><id>10533384</id><snippet>line 53 column 1493 - Warning: '&lt;' + '/' + letter not allowed here
line 53 column 1518 - Warning: '&lt;' + '/' + letter not allowed here
line 53 column 1541 - Warning: '&lt;' + '/' + letter not allowed here
line 53 column 1547 - Warning: '&lt;' + '/' + letter not allowed here
line 132 column 239 - Warning: '&lt;' + '/' + letter not allowed here
line 135 column 231 - Warning: '&lt;' + '/' + letter not allowed here
line 434 column 98 - Warning: replacing invalid character code 156
line 453 column 96 - Warning: replacing invalid character code 156
line 780 column 108 - Warning: replacing invalid character code 159
line 991 column 27 - Warning: replacing invalid character code 156
line 1018 column 43 - Warning: '&lt;' + '/' + letter not allowed here
line 1029 column 40 - Warning: '&lt;' + '/' + letter not allowed here
line 1037 column 126 - Warning: '&lt;' + '/' + letter not allowed here
line 1039 column 96 - Warning: '&lt;' + '/' + letter not allowed here
line 1040 column 71 - Warning: '&lt;' + '/' + letter not allowed here
line 1041 column 58 - Warning: '&lt;' + '/' + letter not allowed here
line 1047 column 126 - Warning: '&lt;' + '/' + letter not allowed here
line 1049 column 96 - Warning: '&lt;' + '/' + letter not allowed here
line 1050 column 72 - Warning: '&lt;' + '/' + letter not allowed here
line 1051 column 58 - Warning: '&lt;' + '/' + letter not allowed here
line 1063 column 108 - Warning: '&lt;' + '/' + letter not allowed here
line 1066 column 58 - Warning: '&lt;' + '/' + letter not allowed here
line 1076 column 17 - Warning: &lt;input&gt; element not empty or not closed
line 1121 column 140 - Warning: '&lt;' + '/' + letter not allowed here
line 1202 column 33 - Error: &lt;g:plusone&gt; is not recognized!
line 1202 column 33 - Warning: discarding unexpected &lt;g:plusone&gt;
line 1202 column 88 - Warning: discarding unexpected &lt;/g:plusone&gt;
line 1245 column 86 - Warning: replacing invalid character code 130
line 1265 column 33 - Warning: entity "&amp;gt" doesn't end in ';'
line 1345 column 354 - Warning: '&lt;' + '/' + letter not allowed here
line 1361 column 255 - Warning: unescaped &amp; or unknown entity "&amp;_s_icmp"
line 1361 column 562 - Warning: unescaped &amp; or unknown entity "&amp;_s_icmp"
line 1361 column 856 - Warning: unescaped &amp; or unknown entity "&amp;_s_icmp"
line 1397 column 115 - Warning: replacing invalid character code 130
line 1425 column 116 - Warning: replacing invalid character code 130
line 1453 column 115 - Warning: replacing invalid character code 130
line 1481 column 116 - Warning: replacing invalid character code 130
line 1509 column 116 - Warning: replacing invalid character code 130
line 1523 column 251 - Warning: replacing invalid character code 159
line 1524 column 259 - Warning: replacing invalid character code 159
line 1524 column 395 - Warning: replacing invalid character code 159
line 1533 column 151 - Warning: replacing invalid character code 159
line 1537 column 115 - Warning: replacing invalid character code 130
line 1565 column 116 - Warning: replacing invalid character code 130
line 1593 column 116 - Warning: replacing invalid character code 130
line 1621 column 115 - Warning: replacing invalid character code 130
line 1649 column 115 - Warning: replacing invalid character code 130
line 1677 column 115 - Warning: replacing invalid character code 130
line 1705 column 115 - Warning: replacing invalid character code 130
line 1750 column 150 - Warning: replacing invalid character code 130
line 1774 column 150 - Warning: replacing invalid character code 130
line 1798 column 150 - Warning: replacing invalid character code 130
line 1822 column 150 - Warning: replacing invalid character code 130
line 1826 column 78 - Warning: replacing invalid character code 130
line 1854 column 150 - Warning: replacing invalid character code 130
line 1878 column 150 - Warning: replacing invalid character code 130
line 1902 column 150 - Warning: replacing invalid character code 130
line 1926 column 150 - Warning: replacing invalid character code 130
line 1954 column 186 - Warning: unescaped &amp; or unknown entity "&amp;charge"
line 2004 column 100 - Warning: replacing invalid character code 156
line 2033 column 162 - Warning: replacing invalid character code 159
line 21 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 22 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 23 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 29 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 30 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 31 column 1 - Warning: &lt;meta&gt; proprietary attribute "property"
line 412 column 9 - Warning: &lt;body&gt; proprietary attribute "itemscope"
line 412 column 9 - Warning: &lt;body&gt; proprietary attribute "itemtype"
line 1143 column 1 - Warning: &lt;script&gt; inserting "type" attribute
line 1225 column 44 - Warning: &lt;table&gt; lacks "summary" attribute
line 1934 column 9 - Warning: &lt;div&gt; proprietary attribute "name"
line 436 column 41 - Warning: trimming empty &lt;li&gt;
line 446 column 89 - Warning: trimming empty &lt;li&gt;
line 1239 column 33 - Warning: trimming empty &lt;span&gt;
line 1747 column 37 - Warning: trimming empty &lt;span&gt;
line 1771 column 37 - Warning: trimming empty &lt;span&gt;
line 1795 column 37 - Warning: trimming empty &lt;span&gt;
line 1819 column 37 - Warning: trimming empty &lt;span&gt;
line 1851 column 37 - Warning: trimming empty &lt;span&gt;
line 1875 column 37 - Warning: trimming empty &lt;span&gt;
line 1899 column 37 - Warning: trimming empty &lt;span&gt;
line 1923 column 37 - Warning: trimming empty &lt;span&gt;
line 2018 column 49 - Warning: trimming empty &lt;span&gt;
line 2026 column 49 - Warning: trimming empty &lt;span&gt;
</snippet></ROW><ROW><id>10533704</id><snippet>sys.path.append('./dir2/dir3')
import packages
</snippet></ROW><ROW><id>10533704</id><snippet>sys.path.append(os.path.join(os.path.dirname(__file__), 'dir2/dir3'))
import packages
</snippet></ROW><ROW><id>10533704</id><snippet>import imp    
packages = imp.load_source('packages', '/path/to/packages.py')
</snippet></ROW><ROW><id>10533776</id><snippet>import pandas as pd

def stretch(start_date, end_date, value, freq):
    freq_dict = {'d': pd.datetools.day,
                 'h': pd.datetools.Hour(1)}
    dr = pd.DateRange(start_date, end_date, offset=freq_dict[freq])
    return pd.TimeSeries(value / dr.size, index=dr)


print stretch('2011-01-01 00:00', '2011-01-20 00:00', 200, 'd')
</snippet></ROW><ROW><id>10533776</id><snippet>2011-01-01    10
2011-01-02    10
2011-01-03    10
2011-01-04    10
2011-01-05    10
2011-01-06    10
2011-01-07    10
2011-01-08    10
2011-01-09    10
2011-01-10    10
2011-01-11    10
2011-01-12    10
2011-01-13    10
2011-01-14    10
2011-01-15    10
2011-01-16    10
2011-01-17    10
2011-01-18    10
2011-01-19    10
2011-01-20    10
</snippet></ROW><ROW><id>10533877</id><snippet>signal.alarm</snippet></ROW><ROW><id>10533911</id><snippet>which python
/usr/bin/python
which python2
/usr/bin/python2
</snippet></ROW><ROW><id>10533911</id><snippet>#!/usr/bin/env python2
</snippet></ROW><ROW><id>10533911</id><snippet>./some_script.py</snippet></ROW><ROW><id>10533911</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>10533911</id><snippet>#!/usr/bin/env python2</snippet></ROW><ROW><id>10533911</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>10533911</id><snippet>python</snippet></ROW><ROW><id>10533911</id><snippet>python some_script ...</snippet></ROW><ROW><id>10533911</id><snippet>eclipse</snippet></ROW><ROW><id>10533911</id><snippet>/usr/bin/eclipse</snippet></ROW><ROW><id>10533911</id><snippet>#!/bin/bash
export ECLIPSE_HOME=/usr/share/eclipse
export GDK_NATIVE_WINDOWS=true
${ECLIPSE_HOME}/eclipse "$@"
</snippet></ROW><ROW><id>10533911</id><snippet>/usr/bin/scrapy</snippet></ROW><ROW><id>10533911</id><snippet>#!/bin/bash
python2 scrapy "$@"
</snippet></ROW><ROW><id>10534063</id><snippet>tokens.args[0].asList</snippet></ROW><ROW><id>10534063</id><snippet>tokens.args[0].asList()</snippet></ROW><ROW><id>10534063</id><snippet>self</snippet></ROW><ROW><id>10534454</id><snippet>import urllib
import settings
import oauth2 as oauth

try:
    twitter_user = user.social_auth.get(provider='twitter')
except:
    return
if not twitter_user.tokens:
    return
access_token = twitter_user.tokens['oauth_token']
access_token_secret = twitter_user.tokens['oauth_token_secret']

token = oauth.Token(access_token,access_token_secret)
consumer_key = settings.TWITTER_CONSUMER_KEY
consumer_secret = settings.TWITTER_CONSUMER_SECRET
consumer = oauth.Consumer(consumer_key,consumer_secret)
client = oauth.Client(consumer,token)

data = {'status':'Your tweet goes here'}
request_uri = 'https://api.twitter.com/1/statuses/update.json'
resp, content = client.request(request_uri, 'POST', urllib.urlencode(data))
</snippet></ROW><ROW><id>10534562</id><snippet>L = [1, 5, 10, 20, 30, 50, 70, 100, 150, 200, 500, 1000, 2000, 5000, 10000]

def roundit(x,n):
    if len(x) == 1:
        return x[0]
    elif x[len(x)/2] &gt; n:
        return roundit(x[0:len(x)/2],n)
    else:
        return roundit(x[len(x)/2 :],n)
</snippet></ROW><ROW><id>10534562</id><snippet>&gt;&gt;&gt; roundit(L,36)
30
&gt;&gt;&gt; roundit(L,77)
70
&gt;&gt;&gt; roundit(L,150)
150
</snippet></ROW><ROW><id>10534702</id><snippet>import matplotlib.colorbar as cbar
import pylab as pl
import numpy as np

N = 50
xs = np.random.randint(0, 100, N)
ys = np.random.randint(0, 100, N)
ws = np.random.randint(10, 20, N)
hs = np.random.randint(10, 20, N)
vs = np.random.randn(N)

normal = pl.normalize(vs.min(), vs.max())
colors = pl.cm.jet(normal(vs))

ax = pl.subplot(111)
for x,y,w,h,c in zip(xs,ys,ws,hs,colors):
    rect = pl.Rectangle((x,y),w,h,color=c)
    ax.add_patch(rect)

cax, _ = cbar.make_axes(ax) 
cb2 = cbar.ColorbarBase(cax, cmap=pl.cm.jet,norm=normal) 

ax.set_xlim(0,120)
ax.set_ylim(0,120)
pl.show()
</snippet></ROW><ROW><id>10535030</id><snippet>from Crypto.Cipher import AES
import base64

AES.key_size=128
iv="your iv"
key="your key"
crypt_object=AES.new(key=key,mode=AES.MODE_CBC,IV=iv)

decoded=base64.b64decode(plain) # your ecrypted and encoded text goes here
decrypted=crypt_object.decrypt(decoded)
</snippet></ROW><ROW><id>10535276</id><snippet>__lt__()</snippet></ROW><ROW><id>10535276</id><snippet>__gt__()</snippet></ROW><ROW><id>10535706</id><snippet>import os
os.path.relpath('C:\Folder\OtherFolder\AnotherFolder\file.txt', 'C:\Folder\OtherFolder')
</snippet></ROW><ROW><id>10535706</id><snippet>os.path.sep</snippet></ROW><ROW><id>10535706</id><snippet>\</snippet></ROW><ROW><id>10535706</id><snippet>rel_path.split(os.path.sep)
</snippet></ROW><ROW><id>10535706</id><snippet>os.path.relpath('/Folder/OtherFolder/AnotherFolder/file.txt', '/Folder/OtherFolder')
# returns 'AnotherFolder/file.txt'

rel_path.split(os.path.sep)
# returns ['AnotherFolder', 'file.txt']
</snippet></ROW><ROW><id>10535772</id><snippet>set</snippet></ROW><ROW><id>10535772</id><snippet>set</snippet></ROW><ROW><id>10535772</id><snippet>__hash__</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>__hash__</snippet></ROW><ROW><id>10535772</id><snippet>freeze</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>Foo</snippet></ROW><ROW><id>10535772</id><snippet>dict</snippet></ROW><ROW><id>10535772</id><snippet>list</snippet></ROW><ROW><id>10535772</id><snippet>freeze</snippet></ROW><ROW><id>10535772</id><snippet>tuple</snippet></ROW><ROW><id>10535772</id><snippet>tuple</snippet></ROW><ROW><id>10535772</id><snippet>tuple</snippet></ROW><ROW><id>10535772</id><snippet>dict</snippet></ROW><ROW><id>10535772</id><snippet>tuple</snippet></ROW><ROW><id>10535772</id><snippet>list</snippet></ROW><ROW><id>10535772</id><snippet>freeze</snippet></ROW><ROW><id>10535772</id><snippet>freeze(a) == freeze(b)
</snippet></ROW><ROW><id>10535772</id><snippet>a == b
</snippet></ROW><ROW><id>10535772</id><snippet>dupe_free = dict((freeze(x), x) for x in dupe_list).values()
</snippet></ROW><ROW><id>10535772</id><snippet>(x.freeze(), x)</snippet></ROW><ROW><id>10535772</id><snippet>__dict__</snippet></ROW><ROW><id>10535772</id><snippet>__eq__</snippet></ROW><ROW><id>10535772</id><snippet>__dict__</snippet></ROW><ROW><id>10535772</id><snippet>namedtuple</snippet></ROW><ROW><id>10535772</id><snippet>&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(11, y=22)     # instantiate with positional or keyword arguments
&gt;&gt;&gt; p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
&gt;&gt;&gt; x, y = p                # unpack like a regular tuple
&gt;&gt;&gt; x, y
(11, 22)
&gt;&gt;&gt; p.x + p.y               # fields also accessible by name
33
&gt;&gt;&gt; p                       # readable __repr__ with a name=value style
Point(x=11, y=22)
</snippet></ROW><ROW><id>10535939</id><snippet>int first_array[] = { 3,4,5};
if ( (first_array != null) &amp;&amp; (first_array[0] == 3 )) 
{
    printf("5");
}
</snippet></ROW><ROW><id>10535957</id><snippet>AWS_ACCESS_KEY_ID = "xxxxxx"
AWS_SECRET_ACCESS_KEY = "xxxxxx"
IMAGES_STORE = "s3://bucketname/base-key-dir-if-any/"
</snippet></ROW><ROW><id>10535957</id><snippet>s3://bucketname/base-key-dir-if-any/full/3afec3b4765f8f0a07b78f98c07b83f013567a0a.jpg
</snippet></ROW><ROW><id>10536046</id><snippet>array.astype('int16').tofile(filename)
</snippet></ROW><ROW><id>10536156</id><snippet>django.contrib.contenttype.models.ContentType</snippet></ROW><ROW><id>10536156</id><snippet>django.contrib.site.models.Site</snippet></ROW><ROW><id>10536156</id><snippet>contenttype</snippet></ROW><ROW><id>10536156</id><snippet>ContentType</snippet></ROW><ROW><id>10536156</id><snippet>db_for_read</snippet></ROW><ROW><id>10536367</id><snippet>print playerIndex["player_id"]["Homer"].next(), "\n", playerNode
</snippet></ROW><ROW><id>10536885</id><snippet>impala</snippet></ROW><ROW><id>10536885</id><snippet>impala</snippet></ROW><ROW><id>10536885</id><snippet>CapWords</snippet></ROW><ROW><id>10536885</id><snippet>lowercase_with_underscores</snippet></ROW><ROW><id>10536885</id><snippet>&gt;&gt;&gt; class Area(object):
...     def __init__(self, name, items):
...         self.name = name
...         self.items = items
... 
&gt;&gt;&gt; class Impala(Area):
...     def __init__(self):
...         self.name = "Impala"
...         self.items = ["shotgun", "salt"]
... 
&gt;&gt;&gt; impala = Impala()
&gt;&gt;&gt; impala.items
['shotgun', 'salt']
</snippet></ROW><ROW><id>10537092</id><snippet>self</snippet></ROW><ROW><id>10537092</id><snippet>__init__</snippet></ROW><ROW><id>10537460</id><snippet>PyObject.__call__(Object... args)</snippet></ROW><ROW><id>10537460</id><snippet>__tojava__(Interface.class)</snippet></ROW><ROW><id>10537460</id><snippet>def tmp():
    return "some text"
</snippet></ROW><ROW><id>10537460</id><snippet>public interface I{
    public String tmp();
}

public static void main(String[] args) {
    PythonInterpreter interpreter = new PythonInterpreter();
    interpreter.exec("from test import tmp");
    PyObject tmpFunction = interpreter.get("tmp");
    System.err.println(tmpFunction.getClass());
    I i = (I) x.__tojava__(I.class);
    System.err.println(i.tmp());

}
</snippet></ROW><ROW><id>10537460</id><snippet>class org.python.core.PyFunction
some text
</snippet></ROW><ROW><id>10538021</id><snippet>def is_base_pair(x, y):
    return (x=='a' and y=='u' or
            x=='u' and y=='a' or
            x=='c' and y=='g' or
            x=='g' and y=='c' or
            x=='g' and y=='u' or
            x=='u' and y=='g' )

# start and end are the inclusive range of places in which to look for pairs
def opt(rna, start, end):
    # if the range is too small, give up
    if start + 4 &gt; end:
        return

    # the next left side to try to match
    nextLeft = start

    while nextLeft + 4 &lt;= end:
        # find the right nucleobase to match the one at nextLeft
        #   start looking at the minimal distance and incrementally get bigger
        potentialRight = nextLeft + 4
        while not is_base_pair (rna[nextLeft], rna[potentialRight]) and potentialRight &lt;= end:
            potentialRight += 1

        if is_base_pair (rna[nextLeft], rna[potentialRight]):
            print nextLeft, potentialRight
            # recursively search for pairs between the elements of this pair
            opt(rna, nextLeft + 1, potentialRight - 1)
            nextLeft = potentialRight + 1
        else:
            nextLeft += 1
</snippet></ROW><ROW><id>10538164</id><snippet>os.listdir</snippet></ROW><ROW><id>10538164</id><snippet>import os
import tables

direc = '/Users/cg/' # the working directory (where your files are stored)
dirs = os.listdir(direc)

for idir in dirs: # this will iterate over the files in your working directory

    if idir.endswith('.he5'): # only for HDF5 files...
        hdf5 = tables.openFile(os.path.join(direc,idir))

        #### DO WHAT YOU WANT WITH EACH FILE!

        hdf5.close()
</snippet></ROW><ROW><id>10538164</id><snippet>walkNodes</snippet></ROW><ROW><id>10538377</id><snippet>result</snippet></ROW><ROW><id>10538377</id><snippet>return</snippet></ROW><ROW><id>10538377</id><snippet>break</snippet></ROW><ROW><id>10538377</id><snippet>while True:</snippet></ROW><ROW><id>10538377</id><snippet>itertools.count()</snippet></ROW><ROW><id>10538377</id><snippet>import itertools

...

for index in itertools.count(1):
    ...
</snippet></ROW><ROW><id>10538390</id><snippet>myTuples = tuple(map(tuple, myList))

cursor.execute("update tablename set flag = 'yes' \
where (id, officeid) in " + str(myTuples))
</snippet></ROW><ROW><id>10538515</id><snippet>(?)</snippet></ROW><ROW><id>10538515</id><snippet>'(?i)INSERT\s+INTO'</snippet></ROW><ROW><id>10538634</id><snippet>#!/usr/bin/env python

from osgeo import gdal, gdalconst

# Source
src_filename = 'MENHMAgome01_8301/mllw.gtx'
src = gdal.Open(src_filename, gdalconst.GA_ReadOnly)
src_proj = src.GetProjection()
src_geotrans = src.GetGeoTransform()

# We want a section of source that matches this:
match_filename = 'F00574_MB_2m_MLLW_2of3.bag'
match_ds = gdal.Open(match_filename, gdalconst.GA_ReadOnly)
match_proj = match_ds.GetProjection()
match_geotrans = match_ds.GetGeoTransform()
wide = match_ds.RasterXSize
high = match_ds.RasterYSize

# Output / destination
dst_filename = 'F00574_MB_2m_MLLW_2of3_mllw_offset.tif'
dst = gdal.GetDriverByName('GTiff').Create(dst_filename, wide, high, 1, gdalconst.GDT_Float32)
dst.SetGeoTransform( match_geotrans )
dst.SetProjection( match_proj)

# Do the work
gdal.ReprojectImage(src, dst, src_proj, match_proj, gdalconst.GRA_Bilinear)

del dst # Flush
</snippet></ROW><ROW><id>10538662</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>10538662</id><snippet>/admin/</snippet></ROW><ROW><id>10538662</id><snippet>python setup.py install</snippet></ROW><ROW><id>10538662</id><snippet>django-admin.py</snippet></ROW><ROW><id>10538662</id><snippet>django-admin</snippet></ROW><ROW><id>10538662</id><snippet>.py</snippet></ROW><ROW><id>10538662</id><snippet>$ django-admin.py startproject myproject
</snippet></ROW><ROW><id>10538662</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>10538662</id><snippet>$ ln -s /path/to/python/site-packages/django/django/bin/django-admin.py /usr/local/bin/django-admin.py
</snippet></ROW><ROW><id>10538726</id><snippet>import cv2
cv2.VideoWriter('movie',cv2.cv.CV_FOURCC('M', 'J', 'P', 'G'),fps,(width,height))
</snippet></ROW><ROW><id>10539020</id><snippet>g2</snippet></ROW><ROW><id>10539020</id><snippet>g1 = mygen()
for i in g1:
    g2 = mygen()
    for j in g2:
        print i, j
</snippet></ROW><ROW><id>10539135</id><snippet>**obj</snippet></ROW><ROW><id>10539135</id><snippet>__getitem__()</snippet></ROW><ROW><id>10539135</id><snippet>keys()</snippet></ROW><ROW><id>10539135</id><snippet>def __getitem__(self, item):
    return self.__dict__[item] # you maybe should return a copy
def keys(self):
    return self.__dict__.keys() # you could filter those
</snippet></ROW><ROW><id>10539298</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>10539298</id><snippet>add2virtualenv</snippet></ROW><ROW><id>10539298</id><snippet>virtualenv</snippet></ROW><ROW><id>10539298</id><snippet>ENV1</snippet></ROW><ROW><id>10539298</id><snippet>ENV2</snippet></ROW><ROW><id>10539298</id><snippet>ENV2</snippet></ROW><ROW><id>10539298</id><snippet>ENV1</snippet></ROW><ROW><id>10539298</id><snippet>ENV2</snippet></ROW><ROW><id>10539298</id><snippet>workon ENV2</snippet></ROW><ROW><id>10539298</id><snippet>ENV1</snippet></ROW><ROW><id>10539298</id><snippet>add2virtualenv</snippet></ROW><ROW><id>10539298</id><snippet>add2virtualenv $WORKON_HOME/ENV1/lib/python2.6/site-packages</snippet></ROW><ROW><id>10539298</id><snippet>$WORKON_HOME</snippet></ROW><ROW><id>10539298</id><snippet>bin</snippet></ROW><ROW><id>10539522</id><snippet>l = range(20)
for i in l:
    ...
</snippet></ROW><ROW><id>10539522</id><snippet>l = range(20)
new_l = [i for i in l if not i == something]
</snippet></ROW><ROW><id>10539522</id><snippet>filter()</snippet></ROW><ROW><id>10539522</id><snippet>lambda</snippet></ROW><ROW><id>10539522</id><snippet>range()</snippet></ROW><ROW><id>10539522</id><snippet>i</snippet></ROW><ROW><id>10539522</id><snippet>l</snippet></ROW><ROW><id>10539522</id><snippet>l[:] = new_l</snippet></ROW><ROW><id>10539522</id><snippet>enumerate()</snippet></ROW><ROW><id>10539592</id><snippet>client = client.DropboxClient(sess)
</snippet></ROW><ROW><id>10539592</id><snippet>sess = session.DropboxSession(APP_KEY, APP_SECRET, ACCESS_TYPE)
</snippet></ROW><ROW><id>10539640</id><snippet>re.escape(text)</snippet></ROW><ROW><id>10539640</id><snippet>text</snippet></ROW><ROW><id>10539697</id><snippet>python.h</snippet></ROW><ROW><id>10539878</id><snippet>os.makedirs(os.path.join(destination, pathname), 0755 )
</snippet></ROW><ROW><id>10539878</id><snippet>pathname</snippet></ROW><ROW><id>10539878</id><snippet>destination</snippet></ROW><ROW><id>10539878</id><snippet>os.makedirs()</snippet></ROW><ROW><id>10539878</id><snippet>destination</snippet></ROW><ROW><id>10539878</id><snippet>destination</snippet></ROW><ROW><id>10539878</id><snippet>None</snippet></ROW><ROW><id>10539878</id><snippet>os.makedirs()</snippet></ROW><ROW><id>10540051</id><snippet>screen_flags</snippet></ROW><ROW><id>10540051</id><snippet>__init__</snippet></ROW><ROW><id>10540051</id><snippet>class Cancel(Button):
      def __init__(self,*args,**kwargs):
          self.screen_flags=kwargs.pop('screen_flags')
          Button.__init__(self,*args,**kwargs)  #Some might advise you to use super here...

      def do_action(self):
          self.screen_flags['config'] = 0

#now use the cancel class
cancel=Cancel(c_button, (385, 301),screen_flags=screen_flags)
</snippet></ROW><ROW><id>10540051</id><snippet>class GlobalData(object):
   stuff=None

class FooButton(Button,GlobalData):
   def do_action(self):
       print self.stuff
       #If you do something in here, don't do:  self.stuff = blah
       #instead, you *should* do: GlobalData.stuff = blah
       #However, it is fine to change mutable objects in place.
       #         e.g. self.stuff["dict_key"]=blah

#Now we can assign to GlobalData and instances of 
#FooButton will see the differences immediately.
cancel=FooButton(c_button, (385, 301))
cancel.do_action()
GlobalData.stuff="Cows say Moo"
cancel.do_action()
</snippet></ROW><ROW><id>10540051</id><snippet>do_action</snippet></ROW><ROW><id>10540322</id><snippet>repr</snippet></ROW><ROW><id>10540461</id><snippet>awk -v text='.nmv-fas' '
    /&lt;title&gt;/ {title=$0; gsub(/&lt;\/?title&gt;/, "", title); replace=1}
    replace {gsub(text, title)}
    {print}
' file &gt; file.tmp &amp;&amp; mv file.tmp file
</snippet></ROW><ROW><id>10540461</id><snippet>-i</snippet></ROW><ROW><id>10540461</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>10540463</id><snippet>utf-8</snippet></ROW><ROW><id>10540463</id><snippet>decode</snippet></ROW><ROW><id>10540463</id><snippet>import re
import pickle

inputfile = open("input.txt").read()
inputfile = inputfile.decode('utf-8')

pat = re.compile(r"(@.*\*)")

mylist = pat.findall(inputfile)

outputfile = open("output.txt", "w")

pickle.dump(mylist, outputfile)

outputfile.close()
</snippet></ROW><ROW><id>10540463</id><snippet>codecs</snippet></ROW><ROW><id>10540463</id><snippet>import re
import codecs

with codecs.open("input.txt", "r", "utf-8") as infile:
    inp = infile.read()

pat = re.compile(r"(@.*\*)")
mylist = pat.findall(inp)

with codecs.open("output.txt", "w", "utf-8") as outfile:
     outfile.write("\n".join(mylist))
</snippet></ROW><ROW><id>10540512</id><snippet>SummaryHistory</snippet></ROW><ROW><id>10540512</id><snippet>class SummaryHistory(models.Model):
    version = models.IntegerField(editable=False)
    book = models.ForeignKey('Book')
    text = models.TextField()

    class Meta:
        unique_together = ('version', 'book',)

    def save(self, *args, **kwargs):
        # start with version 1 and increment it for each book
        current_version = SummaryHistory.objects.filter(book=self.book).order_by('-version')[:1]
        self.version = current_version[0].version + 1 if current_version else 1
        super(SummaryHistory, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>10540512</id><snippet>class Book(models.Model):
    title = models.CharField(max_length=100)
    summary = models.TextField()

    def summary_history(self):
        return SummaryHistory.objects.filter(book=self).order_by('-version')

    def save(self, *args, **kwargs):
        super(Book, self).save(*args, **kwargs)
        # save summary history
        summary_history = self.summary_history()
        if not summary_history or self.summary != summary_history[0].text:
            newSummary = SummaryHistory(book=self, text=self.summary)
            newSummary.save()
</snippet></ROW><ROW><id>10540735</id><snippet>python -V</snippet></ROW><ROW><id>10540735</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10540866</id><snippet>$</snippet></ROW><ROW><id>10540866</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>10540866</id><snippet>$ import sys 
</snippet></ROW><ROW><id>10540866</id><snippet>&gt;&gt; import sys 
</snippet></ROW><ROW><id>10540866</id><snippet>.. code-block:: bash

   $ pwd
   /home
   $ echo TEST
   TEST

.. code-block:: python

   &gt;&gt;&gt; import sys
   &gt;&gt;&gt; print "X"
   X
</snippet></ROW><ROW><id>10540866</id><snippet>.. highlight:: bash

::

   $ pwd
   /home
   $ echo TEST
   TEST

.. highlight:: python

::

   &gt;&gt;&gt; import sys
   &gt;&gt;&gt; print "X"
   X
</snippet></ROW><ROW><id>10540866</id><snippet>.. highlight::</snippet></ROW><ROW><id>10540866</id><snippet>python</snippet></ROW><ROW><id>10540866</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>10540866</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print "X"
X
</snippet></ROW><ROW><id>10540866</id><snippet>.. code-block:: python

   import sys
   print "X"
</snippet></ROW><ROW><id>10540873</id><snippet>def format_main_response(json_string):
    print "json:       " + json_string
    content = json.loads(str(json_string))
    for key, value in content.iteritems():
        print key
        if type(value) == type(['']):
            for sub_value in value:
                strg = str(json.dumps(sub_value))
                format_main_response(strg)
        else:
            print value
</snippet></ROW><ROW><id>10540873</id><snippet>~$ python test_pdb.py 
json:       {"servers": [{"id": "a059eccb-d929-43b2-8db3-b32b6201d60f", "links": [{"href": "http://192.168.100.142:8774/v2/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "self"}, {"href": "http://192.168.100.142:8774/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "bookmark"}], "name": "birk"}]}
servers
json:       {"id": "a059eccb-d929-43b2-8db3-b32b6201d60f", "links": [{"href": "http://192.168.100.142:8774/v2/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "self"}, {"href": "http://192.168.100.142:8774/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "bookmark"}], "name": "birk"}
id
a059eccb-d929-43b2-8db3-b32b6201d60f
links
json:       {"href": "http://192.168.100.142:8774/v2/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "self"}
href
http://192.168.100.142:8774/v2/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f
rel
self
json:       {"href": "http://192.168.100.142:8774/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f", "rel": "bookmark"}
href
http://192.168.100.142:8774/2ad1fc162c254e59bea043560b7f73cb/servers/a059eccb-d929-43b2-8db3-b32b6201d60f
rel
bookmark
name
birk
</snippet></ROW><ROW><id>10540988</id><snippet>wx.TE_RIGHT</snippet></ROW><ROW><id>10540988</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>10540988</id><snippet>hbox14</snippet></ROW><ROW><id>10540988</id><snippet>Layout</snippet></ROW><ROW><id>10540988</id><snippet>hbox14</snippet></ROW><ROW><id>10540988</id><snippet>self.gui.panel</snippet></ROW><ROW><id>10540988</id><snippet>self.gui</snippet></ROW><ROW><id>10540988</id><snippet>gui</snippet></ROW><ROW><id>10540988</id><snippet>self.gui.labelSecTic.SetLabel(str(self.diff))
self.gui.Layout()
</snippet></ROW><ROW><id>10540988</id><snippet>self.gui.labelSecTic.SetLabel(str(self.diff))
self.gui.panel.Layout()
</snippet></ROW><ROW><id>10541294</id><snippet>$ python -c 'from __future__ import print_function; help(print)'
</snippet></ROW><ROW><id>10541485</id><snippet>EnumChildWindow</snippet></ROW><ROW><id>10541485</id><snippet>FindWindowEx</snippet></ROW><ROW><id>10541716</id><snippet>In [1]: import datetime

In [2]: datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')
Out[2]: '2012-05-10'
</snippet></ROW><ROW><id>10541716</id><snippet>{{ mydate|date:"Y-m-d" }}
</snippet></ROW><ROW><id>10541759</id><snippet>from django.conf.urls import patterns, url, include

extra_patterns = patterns('',
    url(r'^reports/(?P&lt;id&gt;\d+)/$', 'credit.views.report', name='credit-reports'),
    url(r'^charge/$', 'credit.views.charge', name='credit-charge'),
)

urlpatterns = patterns('',
    url(r'^$', 'apps.main.views.homepage', name='site-homepage'),
    (r'^help/', include('apps.help.urls')),
    (r'^credit/', include(extra_patterns)),
)
</snippet></ROW><ROW><id>10541759</id><snippet>extra_patterns = patterns('',
    url(r'blog/(?P&lt;blog_id&gt;[0-9]+)/view/(?P&lt;content_id&gt;[0-9]+)/$', 'blog.views.view'),
    url(r'blog/(?P&lt;blog_id&gt;[0-9]+)/$', 'blog.views.main'),
    url(r'blog/(?P&lt;blog_id&gt;[0-9]+)/(?P&lt;page&gt;[0-9]+)/$', 'blog.views.main'),                      #pagination for main

    # Categories
    url(r'category/(?P&lt;category_id&gt;[0-9]+)/$', 'category.views.category'),
    url(r'category/(?P&lt;blog_id&gt;[0-9]+)/category/(?P&lt;category_id&gt;[0-9]+)/(?P&lt;page&gt;[0-9]+)/$', 'category.views.category'),   #pagination for main

    # Content
    url(r'^content/(?P&lt;blog_id&gt;[0-9]+)/edit/$', 'content.views.edit'),
    url(r'^content/(?P&lt;blog_id&gt;[0-9]+)/edit/(?P&lt;content_id&gt;[0-9]+)/$', 'content.views.edit'), 
)


urlpatterns = patterns('',
    # Basic product functions
    url(r'^create/$', 'product.views.create'),                       
    url(r'^save/$', 'product.views.save'),
    url(r'^save/(?P&lt;product&gt;[a-z0-9\-]+)/$', 'product.views.save'),
    url(r'^edit/(?P&lt;product&gt;[a-z0-9\-]+)/$', 'product.views.edit'),
    url(r'^publish/(?P&lt;product&gt;[a-z0-9\-]+)/$', 'product.views.publish'),
    url(r'^upload_image/(?P&lt;product&gt;[a-z0-9\-]+)/$', 'product.views.upload_image'),

    # Blog
    url(r'^(?P&lt;product&gt;[a-z0-9\-]+)/', include(extra_patterns)),
)
</snippet></ROW><ROW><id>10541762</id><snippet>pymysql</snippet></ROW><ROW><id>10541762</id><snippet>pymysql.install_as_MySQLdb()</snippet></ROW><ROW><id>10541762</id><snippet>MySql-Connector</snippet></ROW><ROW><id>10541799</id><snippet>timeout</snippet></ROW><ROW><id>10541799</id><snippet>urlopen</snippet></ROW><ROW><id>10541799</id><snippet>request timeout</snippet></ROW><ROW><id>10541799</id><snippet>408</snippet></ROW><ROW><id>10541799</id><snippet>try:
    response = urlopen(req, 3) # 3 seconds
except URLError, e:
    elif hasattr(e, 'code'):
        if e.code==408:
            print 'Timeout ', e.code
        if e.code==404:
            print 'File Not Found ', e.code
        # etc etc
</snippet></ROW><ROW><id>10541972</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>10541972</id><snippet>0600</snippet></ROW><ROW><id>10541972</id><snippet>tempfile.py</snippet></ROW><ROW><id>10541972</id><snippet>chmod</snippet></ROW><ROW><id>10542064</id><snippet>&gt;&gt;&gt; def foo(A):
...     print A[0]
...     A[0] = 2
...     print A[0]
...
&gt;&gt;&gt; a = [0, 1, 2]
&gt;&gt;&gt; foo(a)
0
2
&gt;&gt;&gt; a
[2, 1, 2]
&gt;&gt;&gt; def bar(A):
...     print A[0]
...     A = [0, 1, 2]
...     A[0] = 2
...     print A[0]
...
&gt;&gt;&gt; a = [0, 1, 2]
&gt;&gt;&gt; bar(a)
0
2
&gt;&gt;&gt; a
[0, 1, 2]
</snippet></ROW><ROW><id>10542112</id><snippet>sha.digest()</snippet></ROW><ROW><id>10542112</id><snippet>hexdigest()</snippet></ROW><ROW><id>10542112</id><snippet>digest()</snippet></ROW><ROW><id>10542112</id><snippet>hexdigest()</snippet></ROW><ROW><id>10542220</id><snippet>from xlwt import Workbook
import xlwt
book = Workbook()
sheet1 = book.add_sheet('Sheet 1')
book.add_sheet('Sheet 2')
st = xlwt.easyxf('pattern: pattern solid;')
for i in range(0, 100):
    st = xlwt.easyxf('pattern: pattern solid;')
    st.pattern.pattern_fore_colour = i
    sheet1.write(i % 24, i / 24, 'Test text',st)
book.save('simple.xls')
</snippet></ROW><ROW><id>10542347</id><snippet>a = numpy.array([1,2,3,4,5])
(a &gt; 1).all() and (a &lt; 5).all()
</snippet></ROW><ROW><id>10542347</id><snippet>(a &gt; 1) &amp; (a &lt; 5)
</snippet></ROW><ROW><id>10542514</id><snippet>In [1]: import psycopg2

In [2]: import numpy as np

In [3]: a = np.eye(3)

In [4]: a
Out[4]:
array([[ 1.,  0.,  0.],
      [ 0.,  1.,  0.],
      [ 0.,  0.,  1.]])

In [5]: cnn = psycopg2.connect('')


# The adapter: converts from python to postgres
# note: this only works on numpy version whose arrays 
# support the buffer protocol,
# e.g. it works on 1.5.1 but not on 1.0.4 on my tests.

In [12]: def adapt_array(a):
  ....:     return psycopg2.Binary(a)
  ....:

In [13]: psycopg2.extensions.register_adapter(np.ndarray, adapt_array)


# The typecaster: from postgres to python

In [21]: def typecast_array(data, cur):
  ....:     if data is None: return None
  ....:     buf = psycopg2.BINARY(data, cur)
  ....:     return np.frombuffer(buf)
  ....:

In [24]: ARRAY = psycopg2.extensions.new_type(psycopg2.BINARY.values,
'ARRAY', typecast_array)

In [25]: psycopg2.extensions.register_type(ARRAY)


# Now it works "as expected"

In [26]: cur = cnn.cursor()

In [27]: cur.execute("select %s", (a,))

In [28]: cur.fetchone()[0]
Out[28]: array([ 1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.])
</snippet></ROW><ROW><id>10542562</id><snippet>[codeintel]
recipe = corneti.recipes.codeintel
eggs = ${buildout:eggs}
extra-paths =
    ${omelette:location}
</snippet></ROW><ROW><id>10542757</id><snippet>autocmd bufnewfile *.py 0r /path/to/python_default.py
</snippet></ROW><ROW><id>10542843</id><snippet>split()</snippet></ROW><ROW><id>10542843</id><snippet>\n</snippet></ROW><ROW><id>10542843</id><snippet>split(':')</snippet></ROW><ROW><id>10542843</id><snippet>dictionary = OrderedDict()
with open(filename) as f:
    for line in f:
        key, value = line.split(':')
        dictionary[key.strip()] = value.strip()
</snippet></ROW><ROW><id>10542843</id><snippet>with open(filename) as f:
    mylist = [line.strip().split(':') for line in f]
    dictionary = OrderedDict(mylist)
</snippet></ROW><ROW><id>10542949</id><snippet>filename = urlparse.urlparse(url).path.split('/')[-1]  # get file name
name = filename.rsplit('.', 1)[0] + '.html'  # change the extension
</snippet></ROW><ROW><id>10543050</id><snippet>&gt;&gt;&gt; import mpmath
&gt;&gt;&gt; mpmath.gammainc(-1,1)
mpf('0.14849550677592205')
&gt;&gt;&gt; 1-mpmath.gammainc(-1,1)
mpf('0.85150449322407795')
&gt;&gt;&gt; mpmath.mp.dps = 50 # arbitrary precision!
&gt;&gt;&gt; 1-mpmath.gammainc(-1,1)
mpf('0.85150449322407795208164000529866078158523616237514084')
</snippet></ROW><ROW><id>10543063</id><snippet>skip</snippet></ROW><ROW><id>10543063</id><snippet>import math
import itertools

for ob in engine.All:
    if isinstance(ob, Flatlander):
        ob.energy -= decay

for pair in itertools.combinations(engine.All, 2):
    fooditems = [x for x in pair if isinstance(x, Food) and not x.skip]
    animals = [x for x in pair if isinstance(x, Flatlander) and not x.skip]
    if not (fooditems and animals):
        continue
    animal = animals[0]
    food = fooditems[0]
    if collides(animal.pos, animal.r, food.pos, food.r):
        # This seems an odd calculation to me but I think it follows your code.
        if animal.energy + food.r &lt; animal.r ** 2 * math.pi:
            # eating is feasible; the animal always eats the food if it can
            food.skip = True
            animal.energy += food.r # Not the area?

for ob in engine.All:
    if isinstance(ob, Flatlander) and ob.energy &lt; 0:
        ob.skip = True # dead

# Remove dead things
engine.All = [ob for ob in engine.All if not ob.skip]

# Draw everything (no dead things remain)
for ob in engine.All:
    if ob.drawable:
      ob.draw()
</snippet></ROW><ROW><id>10543171</id><snippet>import fnmatch
import os
import shutil
import datetime
import time

ROOT_PATH = r'D:/Dropbox'
DEST_DIR = r'D:/Conflicted'

def cerr(message, log):
    date = str(datetime.datetime.now())
    msg = "%s : %s\n" % (date[0:19], message)
    log.write(msg)

def removeConflicted(log):
    for root, dirnames, filenames in os.walk(ROOT_PATH):
        for filename in fnmatch.filter(filenames, '*conflicted*.*'):
            # 1: comment out this line and check for leak
            cerr(os.path.join(root, filename), log)
            # 2: then comment out this line instead and check
            shutil.move(
                os.path.join(root, filename), 
                os.path.join(DEST_DIR, filename))


def main():
    with open('./LOG.txt', 'a') as log:
        while True:
            print "loop"
            removeConflicted(log)
            time.sleep(10)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10543171</id><snippet>re.purge()</snippet></ROW><ROW><id>10543171</id><snippet>gc</snippet></ROW><ROW><id>10543298</id><snippet>import re
s = 'abc-abc- abc -abc - abc'
r = re.compile('\s*-\s*')
r.split(s)
</snippet></ROW><ROW><id>10543298</id><snippet>['abc', 'abc', 'abc', 'abc', 'abc']
</snippet></ROW><ROW><id>10543316</id><snippet>&gt;&gt;&gt; j = [4, 5, 6, 7, 1, 3, 7, 5]
&gt;&gt;&gt; sum(i &gt; 5 for i in j)
3
</snippet></ROW><ROW><id>10543316</id><snippet>True</snippet></ROW><ROW><id>10543316</id><snippet>True</snippet></ROW><ROW><id>10543316</id><snippet>bool</snippet></ROW><ROW><id>10543316</id><snippet>int</snippet></ROW><ROW><id>10543316</id><snippet>&gt;&gt;&gt; issubclass(bool, int)
True
</snippet></ROW><ROW><id>10543408</id><snippet>loads</snippet></ROW><ROW><id>10543408</id><snippet>&gt;&gt;&gt; json.loads('{"bool":true}')
{u'bool': True}
</snippet></ROW><ROW><id>10543449</id><snippet>import m as m_

def f(m=None):
    if m is None:
        k = m_.M()
</snippet></ROW><ROW><id>10543783</id><snippet>scipy.signal.find_peaks_cwt</snippet></ROW><ROW><id>10544299</id><snippet>page=urllib2.urlopen('http://www.nasa.gov/').read().replace("&lt;!DOCTYPE \"xmlns:xsl='http://www.w3.org/1999/XSL/Transform'\"&gt;", "&lt;!DOCTYPE html&gt;")

soup=BeautifulSoup(page)
</snippet></ROW><ROW><id>10544585</id><snippet>def is_pal(str):    
    if len(str) &lt;= 1: 
        return True

    if first(str) == last(str): 
        return is_pal(middle(str))
    else:
        return False
</snippet></ROW><ROW><id>10544585</id><snippet>False</snippet></ROW><ROW><id>10544763</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10544852</id><snippet>int</snippet></ROW><ROW><id>10544852</id><snippet>lib.myHapCoord.restype = ctypes.c_double
</snippet></ROW><ROW><id>10544925</id><snippet>&gt;&gt;&gt; cell = 'text\n'
&gt;&gt;&gt; cell.strip()
'text'
&gt;&gt;&gt; rowdata = '|' + cell
&gt;&gt;&gt; print rowdata
|text

&gt;&gt;&gt; rowdata = '|' + cell.strip()
&gt;&gt;&gt; print rowdata
|text
</snippet></ROW><ROW><id>10544925</id><snippet>rowdata = rowdata + '|' + cell.strip()</snippet></ROW><ROW><id>10544987</id><snippet>__repr__</snippet></ROW><ROW><id>10544987</id><snippet>from mock import Mock
class Mock2(Mock):
    def __repr__(self):
        return "Hello World!"

m = Mock2()

&gt;&gt; m
Hello World!
</snippet></ROW><ROW><id>10544987</id><snippet>__repr__</snippet></ROW><ROW><id>10544987</id><snippet>from mock import Mock
m = Mock()

def new_repr(self):
    return "Hello dynamic Python!"
m.__repr__ = new_repr

&gt;&gt; m
Hello dynamic Python!
</snippet></ROW><ROW><id>10545141</id><snippet>os.path.join(fileName, child)</snippet></ROW><ROW><id>10545247</id><snippet>file.write</snippet></ROW><ROW><id>10545247</id><snippet>file.write</snippet></ROW><ROW><id>10545247</id><snippet>file.flush</snippet></ROW><ROW><id>10545247</id><snippet>file.close</snippet></ROW><ROW><id>10545247</id><snippet>file</snippet></ROW><ROW><id>10545247</id><snippet>file</snippet></ROW><ROW><id>10545247</id><snippet>with</snippet></ROW><ROW><id>10545247</id><snippet>file.flush</snippet></ROW><ROW><id>10545247</id><snippet>StringIO.flush</snippet></ROW><ROW><id>10545288</id><snippet>li = [item for item in li if item != 66]
</snippet></ROW><ROW><id>10545288</id><snippet>remove</snippet></ROW><ROW><id>10545288</id><snippet>remove</snippet></ROW><ROW><id>10545343</id><snippet>C:\\wamp\\....</snippet></ROW><ROW><id>10545343</id><snippet>system</snippet></ROW><ROW><id>10545343</id><snippet>$pyscript = 'C:\\wamp\\www\\testing\\scripts\\imageHandle.py';
$python = 'C:\\Python27\\python.exe';
$filePath = 'C:\\wamp\\www\\testing\\uploads\\thumbs\\10-05-2012-523.jpeg'

$cmd = "$python $pyscript $filePath";
echo $cmd;
`$cmd`


$pyscript = 'C:\wamp\www\testing\scripts\imageHandle.py';
$python = 'C:\Python27\python.exe';
$filePath = 'C:\wamp\www\testing\uploads\thumbs\10-05-2012-523.jpeg'

$cmd = "$python $pyscript $filePath";
echo $cmd;
`$cmd` 
</snippet></ROW><ROW><id>10545399</id><snippet>bool</snippet></ROW><ROW><id>10545399</id><snippet>'0'</snippet></ROW><ROW><id>10545399</id><snippet>True</snippet></ROW><ROW><id>10545399</id><snippet>None</snippet></ROW><ROW><id>10545399</id><snippet>False</snippet></ROW><ROW><id>10545399</id><snippet>[]</snippet></ROW><ROW><id>10545399</id><snippet>0</snippet></ROW><ROW><id>10545399</id><snippet>0.0</snippet></ROW><ROW><id>10545399</id><snippet>""</snippet></ROW><ROW><id>10545399</id><snippet>False</snippet></ROW><ROW><id>10545399</id><snippet>bool</snippet></ROW><ROW><id>10545399</id><snippet>if</snippet></ROW><ROW><id>10545399</id><snippet>while</snippet></ROW><ROW><id>10545399</id><snippet>def empty(value):
    try:
        value = float(value)
    except ValueError:
        pass
    return bool(value)
</snippet></ROW><ROW><id>10545539</id><snippet>UploadedFile</snippet></ROW><ROW><id>10545539</id><snippet>{'name': temporary_uploaded_file}</snippet></ROW><ROW><id>10545539</id><snippet>files</snippet></ROW><ROW><id>10545799</id><snippet>longest</snippet></ROW><ROW><id>10545799</id><snippet>fn</snippet></ROW><ROW><id>10545799</id><snippet>fn</snippet></ROW><ROW><id>10545799</id><snippet>outside</snippet></ROW><ROW><id>10545799</id><snippet>path</snippet></ROW><ROW><id>10545799</id><snippet>countL</snippet></ROW><ROW><id>10545799</id><snippet>def walkPath(fn):
    def wrapper(outside, *args, **kwargs):
        for dirname, dirnames, filenames in os.walk(args[0]):
            for filename in filenames:
                outside = fn(outside, filename, dirname, *args, **kwargs)
        return outside
    return wrapper

@walkPath
def countL(outside, filename, dirname, extension = '.wrd'):
    if (filename[-4:]  == extension):
        with open(os.path.join(dirname, filename), 'r') as input:
            data = input.readlines()
        for i in range(len(data)):
            temp = data[i].split()
            if (int(temp[1]) - int(temp[0]) &gt; outside):                
                outside = int(temp[1]) - int(temp[0])
    return outside
</snippet></ROW><ROW><id>10545799</id><snippet>countL(0)</snippet></ROW><ROW><id>10545858</id><snippet>&lt;?php
    $vowels ='/[\x{064B}-\x{0652}]/u'; 
    $newstr = preg_replace($vowels,"",$str);
</snippet></ROW><ROW><id>10546218</id><snippet>recursive_sum_helper</snippet></ROW><ROW><id>10546218</id><snippet>class recursive_summer:
    def __init__(self, lst=[]):
        self.lst = lst
    def recursive_sum(self):
        return self.recursive_sum_helper(self.lst)
    def recursive_sum_helper(self, a_lst):
        if len(a_lst) == 1:
            return a_lst[0]
        else:
            first_element = a_lst[0]
            list_without_first_element = a_lst[1:]
            return first_element + self.recursive_sum_helper( list_without_first_element )

r = recursive_summer([1,2,3,4])
r.recursive_sum()
</snippet></ROW><ROW><id>10546220</id><snippet>aspect</snippet></ROW><ROW><id>10546220</id><snippet>imshow</snippet></ROW><ROW><id>10546220</id><snippet>image.aspect</snippet></ROW><ROW><id>10546220</id><snippet>matplotlibrc</snippet></ROW><ROW><id>10546220</id><snippet>matplotlibrc</snippet></ROW><ROW><id>10546220</id><snippet>equal</snippet></ROW><ROW><id>10546220</id><snippet>imshow</snippet></ROW><ROW><id>10546220</id><snippet>aspect</snippet></ROW><ROW><id>10546220</id><snippet>auto</snippet></ROW><ROW><id>10546220</id><snippet>imshow(random.rand(8, 90), interpolation='nearest', aspect='auto')
</snippet></ROW><ROW><id>10546220</id><snippet>figsize</snippet></ROW><ROW><id>10546220</id><snippet>fig, ax = subplots(figsize=(18, 2))
ax.imshow(random.rand(8, 90), interpolation='nearest')
tight_layout()
</snippet></ROW><ROW><id>10546248</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>10546248</id><snippet>onSOMETHING</snippet></ROW><ROW><id>10546539</id><snippet>admin.site.unregister(Tag)
admin.site.register(Tag, YourTagClass)
</snippet></ROW><ROW><id>10546691</id><snippet>re.compile(ur'&lt;unicode string&gt;')</snippet></ROW><ROW><id>10546691</id><snippet>\d+</snippet></ROW><ROW><id>10546691</id><snippet>\d+\.?\d+</snippet></ROW><ROW><id>10546691</id><snippet>#coding: utf-8

text = u"PROCESS：类型：关爱积分[NOTIFY]   交易号：2012022900000109   订单号：W12022910079166    交易金额：0.01元    交易状态：true 2012-2-29 10:13:08"
import re
pattern = re.compile(ur'交易金额：(\d+\.?\d+)元', re.UNICODE)

print pattern.search(text).group(1)
</snippet></ROW><ROW><id>10546800</id><snippet>[ x[2] for x in score.keys() if x[0:2] == (0,1)]
</snippet></ROW><ROW><id>10546869</id><snippet>re.findall()</snippet></ROW><ROW><id>10546869</id><snippet>import csv
import re

fnamein = 'data.csv'
fnameout = 'output.csv'
rex = re.compile(r"'(\d*\.?\d*)%")  # an int/float element with percent sign

with open(fnamein, 'r') as fin, open(fnameout, 'w', newline='') as fout:
    writer = csv.writer(fout)
    for line in fin:
        row = rex.findall(line)         # all elements with percent sign
        row2 = [float(e) for e in row]  # converted explicitly if needed
        writer.writerow(row2)           # write to the output CSV
</snippet></ROW><ROW><id>10546869</id><snippet>data.csv</snippet></ROW><ROW><id>10546869</id><snippet>output.csv</snippet></ROW><ROW><id>10546869</id><snippet>0.98,1.0,97.92
12.0,3.0,97.9
0.0,0.0,9.92
</snippet></ROW><ROW><id>10546869</id><snippet>open(fnameout, 'wb')</snippet></ROW><ROW><id>10546869</id><snippet>newline</snippet></ROW><ROW><id>10546869</id><snippet>rex</snippet></ROW><ROW><id>10546869</id><snippet>(\d*\.?\d)*</snippet></ROW><ROW><id>10546869</id><snippet>rex.findall()</snippet></ROW><ROW><id>10546869</id><snippet>row</snippet></ROW><ROW><id>10546869</id><snippet>row2 = [float(e) for e in row]</snippet></ROW><ROW><id>10546869</id><snippet>row</snippet></ROW><ROW><id>10546869</id><snippet>e</snippet></ROW><ROW><id>10546869</id><snippet>writer</snippet></ROW><ROW><id>10546914</id><snippet>animation.subpixbuf[i]=self.squares[63-i]</snippet></ROW><ROW><id>10546914</id><snippet>subpixbuf[i]</snippet></ROW><ROW><id>10546914</id><snippet>subpixbuf[i]</snippet></ROW><ROW><id>10546914</id><snippet>copy_area</snippet></ROW><ROW><id>10546993</id><snippet>class test:
    def get(self, name):
        if name == "valA":
            return {"1":"valA1", "2":"valA2", "3":"valA3"}
        elif name ==  "valB":
            return {"1":"valB1", "2":"valB2", "3":"valB3"}
    def apply(self, function, **kwargs):
        arg_dict = {fun_arg: self.get(sim_args) for fun_arg, sim_args in kwargs.items()}
        result = {}
        for SID in arg_dict[kwargs.keys()[0]]:
            fun_kwargs = {fun_arg: sim_dict[SID] for fun_arg, sim_dict in arg_dict.items()} 
            result[SID] = function(**fun_kwargs)
        return result

def joinstrings(string_a, string_b):
    return string_a+string_b

my_test = test()
result = my_test.apply(joinstrings, string_a="valA", string_b="valB")
print result
</snippet></ROW><ROW><id>10546993</id><snippet>{'1': 'valA1valB1', '3': 'valA3valB3', '2': 'valA2valB2'}
</snippet></ROW><ROW><id>10547584</id><snippet>__hash__(...)</snippet></ROW><ROW><id>10547584</id><snippet>__eq__(...)</snippet></ROW><ROW><id>10547584</id><snippet>&gt;&gt;&gt; class Person(object):
...   def __init__(self, name, age):
...     self.name = name
...     self.age = age
...   def __eq__(self, other):
...     return self.age == other.age
...   def __hash__(self):
...     return hash(self.age)
...   def get_detail(self):
...     print "I am %s, my age is %d" % (self.name, self.age)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; tom = Person('tom', 18)
&gt;&gt;&gt; jack = Person('jack', 20)
&gt;&gt;&gt; mary = Person('mary', 22)
&gt;&gt;&gt; mary2 = Person('mary2', 22)
&gt;&gt;&gt; mary3 = Person('mary3', 22)
&gt;&gt;&gt; 
&gt;&gt;&gt; person_set = set()
&gt;&gt;&gt; person_set.add(tom)
&gt;&gt;&gt; person_set.add(jack)
&gt;&gt;&gt; person_set.add(mary)
&gt;&gt;&gt; person_set.add(mary2)
&gt;&gt;&gt; person_set.add(mary3)
&gt;&gt;&gt;
&gt;&gt;&gt; len(person_set)
3
&gt;&gt;&gt;
&gt;&gt;&gt; for p in person_set:
...   p.get_detail()
... 
I am tom, my age is 18
I am jack, my age is 20
I am mary, my age is 22
</snippet></ROW><ROW><id>10547584</id><snippet>__hash__</snippet></ROW><ROW><id>10547584</id><snippet>__eq__</snippet></ROW><ROW><id>10547584</id><snippet>__hash__</snippet></ROW><ROW><id>10547584</id><snippet>__eq__</snippet></ROW><ROW><id>10547705</id><snippet>functools.partial()</snippet></ROW><ROW><id>10547705</id><snippet>from functools import partial
TRANSFORM_PIPELINE = [
    partial(do_xslt, 'pass1.xsl'),
    partial(do_xslt, 'pass2.xsl'),
    partial(do_xslt, 'pass3.xsl')
]
</snippet></ROW><ROW><id>10547705</id><snippet>partial()</snippet></ROW><ROW><id>10547705</id><snippet>do_xslt('pass1.xsl', *args, **kwargs)</snippet></ROW><ROW><id>10547705</id><snippet>*args</snippet></ROW><ROW><id>10547705</id><snippet>**kwargs</snippet></ROW><ROW><id>10547705</id><snippet>&gt;&gt;&gt; def do_xslt(xsl, xml):
...     print 'do_xslt(%r, %r)' % (xsl, xml)
...     return xml + '*' + xsl
...
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; TRANSFORM_PIPELINE = [
...     partial(do_xslt, 'pass1.xsl'),
...     partial(do_xslt, 'pass2.xsl'),
...     partial(do_xslt, 'pass3.xsl')
... ]
&gt;&gt;&gt; x = 'xml is lame'
&gt;&gt;&gt; for transform in TRANSFORM_PIPELINE:
...     x = transform(x)
...     print x
...
do_xslt('pass1.xsl', 'xml is lame')
xml is lame*pass1.xsl
do_xslt('pass2.xsl', 'xml is lame*pass1.xsl')
xml is lame*pass1.xsl*pass2.xsl
do_xslt('pass3.xsl', 'xml is lame*pass1.xsl*pass2.xsl')
xml is lame*pass1.xsl*pass2.xsl*pass3.xsl
</snippet></ROW><ROW><id>10547734</id><snippet>time</snippet></ROW><ROW><id>10547734</id><snippet>time:temperature</snippet></ROW><ROW><id>10547734</id><snippet>redis 127.0.0.1:6379&gt; zadd temperature 1000 1000:123
(integer) 1
redis 127.0.0.1:6379&gt; zadd temperature 1050 1050:122
(integer) 1
redis 127.0.0.1:6379&gt; zadd temperature 1100 1100:125
(integer) 1
redis 127.0.0.1:6379&gt; zrangebyscore temperature 1000 1100
1) "1000:123"
2) "1050:122"
3) "1100:125"
redis 127.0.0.1:6379&gt; 
</snippet></ROW><ROW><id>10547734</id><snippet># Result from Redis
result = ['1000:123', '1050:122', '1100:125']
# Weed out the temperatures
temperatures = [int(x.split(':')[1]) for x in result]
# Get max and min temperatures
max_temp, min_temp = max(temperatures), min(temperatures)
</snippet></ROW><ROW><id>10547734</id><snippet>sort()</snippet></ROW><ROW><id>10547734</id><snippet>max</snippet></ROW><ROW><id>10547734</id><snippet>min</snippet></ROW><ROW><id>10547814</id><snippet>public myWethodToLogSomething(string something)
{
  //connect to db
  //save, do something
  //close connection
}
</snippet></ROW><ROW><id>10547814</id><snippet>public myWethodToLogSomething(string something)
{
  //move all the code out of the web service itself
  LogClass.Log(string)
}
</snippet></ROW><ROW><id>10547888</id><snippet>f.name</snippet></ROW><ROW><id>10547888</id><snippet>delete=False</snippet></ROW><ROW><id>10547888</id><snippet>import shutil
shutil.copy(f.name, 'new-name')
</snippet></ROW><ROW><id>10548473</id><snippet>from datetime import datetime
from dateutil import rrule
import itertools as it
from collections import Counter

rule = rrule.rrule(rrule.DAILY,
                   dtstart=datetime(2004, 01, 01),
                   until=datetime(2005, 10, 01))

dict(Counter(d.strftime('%A') for d in rule))
# {'Friday': 92,
#  'Monday': 91,
#  'Saturday': 92,
#  'Sunday': 91,
#  'Thursday': 92,
#  'Tuesday': 91,
#  'Wednesday': 91}

dict(Counter(k for k,v in it.groupby(d.strftime('%B') for d in rule)))
# or
dict(Counter(k for k,v in it.groupby(rule, key=lambda x: x.strftime('%B'))))

# {'April': 2,
#  'August': 2,
#  'December': 1,
#  'February': 2,
#  'January': 2,
#  'July': 2,
#  'June': 2,
#  'March': 2,
#  'May': 2,
#  'November': 1,
#  'October': 2,
#  'September': 2}
</snippet></ROW><ROW><id>10548473</id><snippet>dateutil</snippet></ROW><ROW><id>10548473</id><snippet>dtstart = datetime(2004, 01, 01)
until = datetime(2005, 10, 01)
rule = [dtstart + timedelta(i) for i in xrange((until - dtstart).days + 1)]
</snippet></ROW><ROW><id>10549067</id><snippet>management.call_command()</snippet></ROW><ROW><id>10549067</id><snippet>manage.py</snippet></ROW><ROW><id>10549067</id><snippet>from django.core import management
management.call_command('runserver')
</snippet></ROW><ROW><id>10549408</id><snippet>b</snippet></ROW><ROW><id>10549408</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 3, 5, 9, 6, 2, 8, 5, 2, 3, 5, 7, 3, 5, 8]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; [b.append(item) for item in a if item not in b]
[None, None, None, None, None, None, None, None]
&gt;&gt;&gt; b
[1, 2, 3, 5, 9, 6, 8, 7]
</snippet></ROW><ROW><id>10549626</id><snippet>def chain(start, countries):
    remaining = list(countries)
    del remaining[remaining.index(start)]
    possibles = [x for x in remaining if x[:1] == start[-1:]]
    maxchain = []
    for c in possibles:
        l = chain(c, remaining)
        if len(l) &gt; len(maxchain):
            maxchain = l
    return [start] + maxchain
</snippet></ROW><ROW><id>10549626</id><snippet>&gt;&gt;&gt; chain('spain', nations)
['spain', 'netherlands', 'serbia', 'albania', 'andorra', 'austria']
</snippet></ROW><ROW><id>10550002</id><snippet> $.fn.jPicker.defaults = /* jPicker defaults - you can change anything in this section (such as the clientPath to your images) without fear of breaking the program */
 {
   images:
   {
      clientPath: '/jPicker/images/', /* Path to image files */
   }
 }
</snippet></ROW><ROW><id>10550002</id><snippet>images.clientPath = '/files/css/images/'</snippet></ROW><ROW><id>10550002</id><snippet>&lt;script type="text/javascript"&gt;        
  $(document).ready(
    function()
    {
      $('#your-element').jPicker({images:{clientPath: '/files/css/images/'}});
    });
&lt;/script&gt;
</snippet></ROW><ROW><id>10550004</id><snippet>var crypto = require('crypto');

var password = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';
var input = 'hello world';

var encrypt = function (input, password, callback) {
    var m = crypto.createHash('md5');
    m.update(password)
    var key = m.digest('hex');

    m = crypto.createHash('md5');
    m.update(password + key)
    var iv = m.digest('hex');

    var data = new Buffer(input, 'utf8').toString('binary');

    var cipher = crypto.createCipheriv('aes-256-cbc', key, iv.slice(0,16));
    var encrypted = cipher.update(data, 'binary') + cipher.final('binary');
    var encoded = new Buffer(encrypted, 'binary').toString('base64');

    callback(encoded);
};

var decrypt = function (input, password, callback) {
    // Convert urlsafe base64 to normal base64
    var input = input.replace(/\-/g, '+').replace(/_/g, '/');
    // Convert from base64 to binary string
    var edata = new Buffer(input, 'base64').toString('binary')

    // Create key from password
    var m = crypto.createHash('md5');
    m.update(password)
    var key = m.digest('hex');

    // Create iv from password and key
    m = crypto.createHash('md5');
    m.update(password + key)
    var iv = m.digest('hex');

    // Decipher encrypted data
    var decipher = crypto.createDecipheriv('aes-256-cbc', key, iv.slice(0,16));
    var decrypted = decipher.update(edata, 'binary') + decipher.final('binary');
    var plaintext = new Buffer(decrypted, 'binary').toString('utf8');

    callback(plaintext);
};

encrypt(input, password, function (encoded) {
    console.log(encoded);
    decrypt(encoded, password, function (output) {
        console.log(output);
    });
});
</snippet></ROW><ROW><id>10550004</id><snippet>from Crypto.Cipher import AES
from hashlib import md5
import base64


password = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
input = 'hello world'

BLOCK_SIZE = 16

def pad (data):
    pad = BLOCK_SIZE - len(data) % BLOCK_SIZE
    return data + pad * chr(pad)

def unpad (padded):
    pad = ord(padded[-1])
    return padded[:-pad]

def _encrypt(data, nonce, password):
    m = md5()
    m.update(password)
    key = m.hexdigest()

    m = md5()
    m.update(password + key)
    iv = m.hexdigest()

    data = pad(data)

    aes = AES.new(key, AES.MODE_CBC, iv[:16])

    encrypted = aes.encrypt(data)
    return base64.urlsafe_b64encode(encrypted)

def _decrypt(edata, nonce, password):
    edata = base64.urlsafe_b64decode(edata)

    m = md5()
    m.update(password)
    key = m.hexdigest()

    m = md5()
    m.update(password + key)
    iv = m.hexdigest()

    aes = AES.new(key, AES.MODE_CBC, iv[:16])
    return unpad(aes.decrypt(edata))

output = _encrypt(input, "", password) 
print(output)
plaintext = _decrypt(output, "", password)
print("'" + plaintext + "'")
</snippet></ROW><ROW><id>10550351</id><snippet>&gt;&gt;&gt; var = 2
&gt;&gt;&gt; def func():
...     global var
...     var = var+1
...     return var
... 
&gt;&gt;&gt; func()
3
</snippet></ROW><ROW><id>10550351</id><snippet>&gt;&gt;&gt; def func(var):
...     var = var+1
...     return var
... 
&gt;&gt;&gt; var = 2
&gt;&gt;&gt; func(var)
3
</snippet></ROW><ROW><id>10550839</id><snippet>ForeignKey</snippet></ROW><ROW><id>10550839</id><snippet>relationship</snippet></ROW><ROW><id>10550839</id><snippet>workflows = Table('workflows', Base.metadata,
                  Column('id', Integer, primary_key=True),
                 )

actions = Table('actions', Base.metadata,
                Column('workflow_id', Integer, ForeignKey(workflows.c.id), primary_key=True),
                Column('name', String, primary_key=True),
               )

action_dependencies = Table('action_dependencies', Base.metadata,
                            Column('workflow_id', Integer, ForeignKey(workflows.c.id), primary_key=True),
                            Column('parent_action', String, ForeignKey(actions.c.name), primary_key=True),
                            Column('child_action', String, ForeignKey(actions.c.name), primary_key=True),
                            ForeignKeyConstraint(['workflow_id', 'parent_action'], ['actions.workflow_id', 'actions.name']),
                            ForeignKeyConstraint(['workflow_id', 'child_action'], ['actions.workflow_id', 'actions.name']),
                           )
class Workflow(Base):
    __table__ = workflows
    actions = relationship("Action", order_by="Action.name", backref="workflow")

class Action(Base):
    __table__ = actions
    children = relationship("Action",
                            secondary=action_dependencies,
                            primaryjoin=and_(actions.c.name == action_dependencies.c.parent_action,
                                actions.c.workflow_id == action_dependencies.c.workflow_id),
                            secondaryjoin=and_(actions.c.name == action_dependencies.c.child_action,
                                actions.c.workflow_id == action_dependencies.c.workflow_id),
                            backref="parents"
                           )

# create db schema
Base.metadata.create_all(engine)

# create entities
w_1 = Workflow()
w_2 = Workflow()
a_11 = Action(name="ac-11", workflow=w_1)
a_12 = Action(name="ac-12", workflow=w_1)
a_21 = Action(name="ac-21", workflow=w_2)
a_22 = Action(name="ac-22", workflow=w_2)
session.add(w_1)
session.add(w_2)
a_22.parents.append(a_21)
session.commit()
session.expunge_all()
print '-'*80

# helper functions
def get_workflow(id):
    return session.query(Workflow).get(id)
def get_action(name):
    return session.query(Action).filter_by(name=name).one()

# test another OK
a_11 = get_action("ac-11")
a_12 = get_action("ac-12")
a_11.children.append(a_12)
session.commit()
session.expunge_all()
print '-'*80

# test KO (THIS SHOULD FAIL VIOLATING FK-constraint)
a_11 = get_action("ac-11")
a_22 = get_action("ac-22")
a_11.children.append(a_22)
session.commit()
session.expunge_all()
print '-'*80
</snippet></ROW><ROW><id>10551190</id><snippet>import argparse
import os

class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = envvar
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required, 
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)
</snippet></ROW><ROW><id>10551190</id><snippet>import argparse
from envdefault import EnvDefault

parser=argparse.ArgumentParser()
parser.add_argument(
    "-u", "--url", action=EnvDefault, envvar='URL', 
    help="Specify the URL to process (can also be specified using URL environment variable)")
args=parser.parse_args()
</snippet></ROW><ROW><id>10551332</id><snippet>exec</snippet></ROW><ROW><id>10551332</id><snippet>exec</snippet></ROW><ROW><id>10551332</id><snippet>prog = """
x[0] = y[1]
z[0] = x[0]
out = z[0]
"""

def runExec(stringCode):
    x = [1,2,3,4]
    y = [5,6,7,8]
    z = [6,7,8,9]
    exec(stringCode, globals(), locals())
    return out

print runExec(prog)
</snippet></ROW><ROW><id>10551348</id><snippet>bn</snippet></ROW><ROW><id>10551348</id><snippet>an</snippet></ROW><ROW><id>10551348</id><snippet>Ciphertext too big</snippet></ROW><ROW><id>10551348</id><snippet>generation</snippet></ROW><ROW><id>10551348</id><snippet>an</snippet></ROW><ROW><id>10551348</id><snippet>an</snippet></ROW><ROW><id>10551348</id><snippet>bn</snippet></ROW><ROW><id>10551348</id><snippet>Bad signature</snippet></ROW><ROW><id>10551348</id><snippet>AES key must be either 16, 24, or 32 bytes long</snippet></ROW><ROW><id>10551348</id><snippet>0x00</snippet></ROW><ROW><id>10551348</id><snippet>bn&gt;an</snippet></ROW><ROW><id>10551413</id><snippet>import matplotlib
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
rect1 = matplotlib.patches.Rectangle((-200,-100), 400, 200, color='yellow')
rect2 = matplotlib.patches.Rectangle((0,150), 300, 20, color='red')
rect3 = matplotlib.patches.Rectangle((-300,-50), 40, 200, color='#0099FF')
circle1 = matplotlib.patches.Circle((-200,-250), radius=90, color='#EB70AA')
ax.add_patch(rect1)
ax.add_patch(rect2)
ax.add_patch(rect3)
ax.add_patch(circle1)
plt.xlim([-400, 400])
plt.ylim([-400, 400])
plt.show()
</snippet></ROW><ROW><id>10552272</id><snippet>&gt;&gt;&gt; len(IP(dst="www.google.com"))
20
</snippet></ROW><ROW><id>10552272</id><snippet>&gt;&gt;&gt; len(IP(dst="www.google.com")/TCP(dport=80))
40
</snippet></ROW><ROW><id>10552272</id><snippet>len</snippet></ROW><ROW><id>10552494</id><snippet>str()</snippet></ROW><ROW><id>10552494</id><snippet>print "try this test " + str(Test1)
</snippet></ROW><ROW><id>10552494</id><snippet>.format()</snippet></ROW><ROW><id>10552494</id><snippet>print "try this test {0}".format(Test1)
</snippet></ROW><ROW><id>10552693</id><snippet>sys.stdout</snippet></ROW><ROW><id>10552693</id><snippet>print</snippet></ROW><ROW><id>10552693</id><snippet>flush</snippet></ROW><ROW><id>10552693</id><snippet>def carriage_return():
    sys.stdout.write('\r')
    sys.stdout.flush()
</snippet></ROW><ROW><id>10552693</id><snippet>time.sleep</snippet></ROW><ROW><id>10552693</id><snippet>import sys, time

def carriage_return():
    sys.stdout.write('\r')
    sys.stdout.flush()

for i in range(100):
    if i % 10 == 0:
        print i,
        carriage_return()
        time.sleep(1)
</snippet></ROW><ROW><id>10552693</id><snippet>def carriage_return():
    if sys.platform.lower().startswith('win'):
        print '\r'
    else:
        print chr(27) + '[A'
</snippet></ROW><ROW><id>10552742</id><snippet>matplotlib</snippet></ROW><ROW><id>10552742</id><snippet>PIL</snippet></ROW><ROW><id>10552742</id><snippet>f = "test.png"
METADATA = {"version":"1.0", "OP":"ihuston"}

# Create a sample image
import pylab as plt
import numpy as np
X = np.random.random((50,50))
plt.imshow(X)
plt.savefig(f)

# Use PIL to save some image metadata
from PIL import Image
from PIL import PngImagePlugin

im = Image.open(f)
meta = PngImagePlugin.PngInfo()

for x in METADATA:
    meta.add_text(x, METADATA[x])
im.save(f, "png", pnginfo=meta)

im2 = Image.open(f)
print im2.info
</snippet></ROW><ROW><id>10552742</id><snippet>{'version': '1.0', 'OP': 'ihuston'}
</snippet></ROW><ROW><id>10552934</id><snippet>'include_html': 'True',</snippet></ROW><ROW><id>10552934</id><snippet>'class': 'django.utils.log.AdminEmailHandler',</snippet></ROW><ROW><id>10552934</id><snippet>LOGGING</snippet></ROW><ROW><id>10552934</id><snippet>settings.py</snippet></ROW><ROW><id>10552934</id><snippet>locals()</snippet></ROW><ROW><id>10552935</id><snippet>cities</snippet></ROW><ROW><id>10552935</id><snippet>find_city</snippet></ROW><ROW><id>10552935</id><snippet>themap</snippet></ROW><ROW><id>10552935</id><snippet>state</snippet></ROW><ROW><id>10552935</id><snippet>cities</snippet></ROW><ROW><id>10552935</id><snippet>city_found = cities['_find'](cities, state)</snippet></ROW><ROW><id>10552935</id><snippet>cities</snippet></ROW><ROW><id>10552935</id><snippet>find_city</snippet></ROW><ROW><id>10552935</id><snippet>method = cities['_find']
city_found = method(cities, state)
</snippet></ROW><ROW><id>10552991</id><snippet>re.findall(r'([~+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?|(?:(?:\b))[FBO]\b)', str)
</snippet></ROW><ROW><id>10552991</id><snippet>['2012', '05', '06', '04', '20', '00.0500', '4.7E+10', '-55', '33.0', '555', '~2767', 'B', '12']
</snippet></ROW><ROW><id>10552991</id><snippet>str</snippet></ROW><ROW><id>10553019</id><snippet>?</snippet></ROW><ROW><id>10553019</id><snippet>re.findall(r'href="\?i(\S+)"', a)
</snippet></ROW><ROW><id>10553019</id><snippet>?</snippet></ROW><ROW><id>10553019</id><snippet>"</snippet></ROW><ROW><id>10553127</id><snippet>SIGTERM</snippet></ROW><ROW><id>10553127</id><snippet>SIGKILL</snippet></ROW><ROW><id>10553127</id><snippet>SIGTERM</snippet></ROW><ROW><id>10553127</id><snippet>SIGKILL</snippet></ROW><ROW><id>10553127</id><snippet>atexit</snippet></ROW><ROW><id>10553127</id><snippet>#!/usr/bin/env python

from signal import signal, SIGTERM
from sys import exit
import atexit

def cleanup():
    print "Cleanup"

if __name__ == "__main__":
    from time import sleep
    atexit.register(cleanup)

    # Normal exit when killed
    signal(SIGTERM, lambda signum, stack_frame: exit(1))

    sleep(10)
</snippet></ROW><ROW><id>10553563</id><snippet>email.header.Header</snippet></ROW><ROW><id>10553563</id><snippet>from email.MIMEMultipart import MIMEMultipart
from email.header import Header
from email.utils import formataddr

author = formataddr((str(Header(u'Alał', 'utf-8')), "somemail@somedomain.com"))
msg = MIMEMultipart('alternative')
msg['From'] = author
print msg
</snippet></ROW><ROW><id>10553688</id><snippet>from myapp.models import MyModel # &lt;- This is bad in datamigration
MyModel.objects.filter(...)
</snippet></ROW><ROW><id>10553688</id><snippet>orm.MyModel.objects.filter(...) &lt;- This is good.
</snippet></ROW><ROW><id>10553869</id><snippet>#!/usr/bin/env python
import argparse, daemon, os
from flup.server.fcgi import WSGIServer
from fwd_msg import app

SOCKET_LOCATION = '/tmp/fingerprinter-fcgi.sock'

def main():
    app = flask.Flask(__name__)
    @app.route('/', methods=['GET'])
    def index():
        pass # your actions here

if __name__ == '__main__':
    # arg parse (and daemonize)
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('--daemon', action='store_true', default=False, help='Run as daemon')
    arg_parser.add_argument('--cwd', action='store', default='/', 
                            help='Full path of the working directory to which the process should change on daemon start.')
    arg_parser.add_argument('--uid', action='store', type=int, default=os.getuid(),
        help='The user ID ("UID") value and group ID ("GID") value to switch the process to on daemon start.')
    args = vars(arg_parser.parse_args())

    if args['daemon']:
        context = daemon.DaemonContext(working_directory=args['cwd'], uid=args['uid'])
        with context:
            main()
    else:
        main()
</snippet></ROW><ROW><id>10554215</id><snippet>return render_to_response('dashy.html',{'treats': list(treats)}</snippet></ROW><ROW><id>10554215</id><snippet>treats</snippet></ROW><ROW><id>10554215</id><snippet>.next()</snippet></ROW><ROW><id>10554215</id><snippet>.prev()</snippet></ROW><ROW><id>10554215</id><snippet>.current_page()</snippet></ROW><ROW><id>10554215</id><snippet>.count()</snippet></ROW><ROW><id>10554215</id><snippet>.page_iterator()</snippet></ROW><ROW><id>10554215</id><snippet>.page_index()</snippet></ROW><ROW><id>10554215</id><snippet>ItemIterator</snippet></ROW><ROW><id>10554265</id><snippet>ElementTree</snippet></ROW><ROW><id>10554265</id><snippet>if not xml.getroot().getchildren(): 
    # skip
</snippet></ROW><ROW><id>10554551</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>10554551</id><snippet>expat.py</snippet></ROW><ROW><id>10554620</id><snippet>for i in my_things:
    i.size = "big"
</snippet></ROW><ROW><id>10554620</id><snippet>map</snippet></ROW><ROW><id>10555025</id><snippet>def addone(number):
    return number + 1
</snippet></ROW><ROW><id>10555063</id><snippet>su -c</snippet></ROW><ROW><id>10555063</id><snippet>PTY</snippet></ROW><ROW><id>10555063</id><snippet>PTY</snippet></ROW><ROW><id>10555089</id><snippet>for key in ['data-book-api', 'data-book-human', ...]:
    del thearticle[key]
</snippet></ROW><ROW><id>10555089</id><snippet>del</snippet></ROW><ROW><id>10555119</id><snippet>meth(self, arg)</snippet></ROW><ROW><id>10555119</id><snippet>meth</snippet></ROW><ROW><id>10555119</id><snippet>(*meth)</snippet></ROW><ROW><id>10555119</id><snippet>self</snippet></ROW><ROW><id>10555119</id><snippet>arg</snippet></ROW><ROW><id>10555119</id><snippet>meth(self, arg)</snippet></ROW><ROW><id>10555119</id><snippet>return</snippet></ROW><ROW><id>10555119</id><snippet>meth(self, arg)</snippet></ROW><ROW><id>10555119</id><snippet>the_function_pointed_to_by_meth(self, arg)</snippet></ROW><ROW><id>10555159</id><snippet>sub</snippet></ROW><ROW><id>10555159</id><snippet>import re
re.sub('[aeiou]', '$', aString)
</snippet></ROW><ROW><id>10555282</id><snippet> from mechanize import Browser, _http
 br = Browser()
 br.set_handle_robots(False)
 br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]

 br.open('http://iedb.ebi.ac.uk/tools/ElliPro/iedb_input')
 br.select_form(name='predictionForm')
 br.form['protein_type'] = ['structure',]
 br.form['pdbId'] = '5LYM'
 submit_response = br.submit(name='Submit', label='Submit')
 print submit_response.read()
</snippet></ROW><ROW><id>10555399</id><snippet>import pexpect

child = pexpect.spawn('ssh myname@host.example.com')
child.expect('Password:')
child.sendline(mypassword)
child.interact()
</snippet></ROW><ROW><id>10555455</id><snippet>SendInput()</snippet></ROW><ROW><id>10555455</id><snippet>INPUT ctrlV [4];
ZeroMemory(ctrlv, sizeof ctrlV);

ctrlV [0].type = INPUT_KEYBOARD;
ctrlV [0].ki.wVk = VK_LCONTROL;

ctrlV [1].type = INPUT_KEYBOARD;
ctrlV [1].ki.wVk = 'V'; //assuming ASCII

ctrlV [2].type = INPUT_KEYBOARD;
ctrlV [2].ki.wVk = 'V'; //assuming ASCII
ctrlV [2].ki.dwFlags = KEYEVENTF_KEYUP;

ctrlV [3].type = INPUT_KEYBOARD;
ctrlV [3].ki.wVk = VK_LCONTROL;
ctrlV [3].ki.dwFlags = KEYEVENTF_KEYUP;

SendInput (4, ctrlV, sizeof (INPUT));
</snippet></ROW><ROW><id>10555755</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import numpy.ma as ma
&gt;&gt;&gt; a = np.arange(24).reshape((6,4))
&gt;&gt;&gt; mask=~(np.abs(a - a.mean(axis=1)[:,np.newaxis]) &lt; a.std(axis=1)[:,np.newaxis])
&gt;&gt;&gt; mask
array([[ True, False, False,  True],
       [ True, False, False,  True],
       [ True, False, False,  True],
       [ True, False, False,  True],
       [ True, False, False,  True],
       [ True, False, False,  True]], dtype=bool)
&gt;&gt;&gt; ma.array(a,mask=mask).mean(axis=1).data
array([  1.5,   5.5,   9.5,  13.5,  17.5,  21.5])
</snippet></ROW><ROW><id>10555838</id><snippet>try:
    do_stuff()
except ErrorToCatch, e:
    raise ExceptionToThrow(e)
</snippet></ROW><ROW><id>10555838</id><snippet>raise ExceptionToThrow(str(e))</snippet></ROW><ROW><id>10555838</id><snippet>try:
    raise TypeError('foo')
except TypeError, t:
    raise ValueError(t)
</snippet></ROW><ROW><id>10555838</id><snippet>ValueError('foo')</snippet></ROW><ROW><id>10555881</id><snippet>import re
matches = ['a', 'bb', 'ccc', 'and']

#add this line into your for loop:
    num_letter_dict = dict([(match, len([seq.start() for seq in 
            re.finditer(match, gutenberg.raw(fileid))])) for match in matches])
</snippet></ROW><ROW><id>10555881</id><snippet>austen-emma.txt</snippet></ROW><ROW><id>10555881</id><snippet>num_letter_dict</snippet></ROW><ROW><id>10555881</id><snippet>{'a': 53669, 'and': 5257, 'ccc': 0, 'bb': 52}
</snippet></ROW><ROW><id>10555881</id><snippet>num_words</snippet></ROW><ROW><id>10555881</id><snippet>num_sents</snippet></ROW><ROW><id>10555881</id><snippet>num_letter_in_words = dict([(match, len([word for word in gutenberg.words(fileid)
                                      if match in word])) for match in matches])
#from the same text gives:
{'a': 50043, 'and': 5257, 'ccc': 0, 'bb': 52}
</snippet></ROW><ROW><id>10555881</id><snippet>text = 'apples pairs bannanas'
matches = ['a', 'n', 'p']
#gives:
{'a': 3, 'p': 2, 'n': 1}
</snippet></ROW><ROW><id>10555930</id><snippet>python type(name, bases, dict) function examples</snippet></ROW><ROW><id>10555930</id><snippet>def __init__(self, x):
    self.x = x

def printX(self):
    print self.x

Test = type('Test', (object,), {'__init__': __init__, 'printX': printX})
</snippet></ROW><ROW><id>10555930</id><snippet>class Test(object):
    def __init__(self, x):
        self.x = x

    def printX(self):
        print self.x
</snippet></ROW><ROW><id>10555930</id><snippet>def makeMethod(idlCode):
    syntax = MyIDL.parse(idlCode)

    def newMethod(*args, **kw):
        if syntax.statementType == MyIDL.IF_STATEMENT:
            if secureLookup(mySyntaxTree.IF):
               return secureLookup(args[0]) 
            else:
               return secureLookup(args[1])
        ...

    return (syntax.methodName, newMethod)
</snippet></ROW><ROW><id>10555930</id><snippet>class DynamicIdlClass(object):
    ...

for idlObject in idlCode:
    methods = dict(makeMethod(clause) for clause in idlObject.clauses})
    methods['__init__'] = makeInitMethod(idlObject.initClause)
    idlObject = type('Test', (DynamicIdlClass,), methods)

    yield idlObject  # or idlObjectsList.push(idlObject), etc.
</snippet></ROW><ROW><id>10555965</id><snippet>__new__</snippet></ROW><ROW><id>10555965</id><snippet>A</snippet></ROW><ROW><id>10555965</id><snippet>B</snippet></ROW><ROW><id>10555965</id><snippet>P.__new__</snippet></ROW><ROW><id>10555965</id><snippet>P</snippet></ROW><ROW><id>10555965</id><snippet>super().__new__(cls,a)</snippet></ROW><ROW><id>10555965</id><snippet>str.__new__(cls, a)</snippet></ROW><ROW><id>10555965</id><snippet>object.__new__</snippet></ROW><ROW><id>10555965</id><snippet>str</snippet></ROW><ROW><id>10555965</id><snippet>super()</snippet></ROW><ROW><id>10555965</id><snippet>A</snippet></ROW><ROW><id>10555965</id><snippet>B</snippet></ROW><ROW><id>10555965</id><snippet>__new__</snippet></ROW><ROW><id>10555965</id><snippet>__init__</snippet></ROW><ROW><id>10555965</id><snippet>class A(str):
    def __init__(self, s):
        super().__init__(s)
        self.a = s

    def __new__(cls, s):
        return super().__new__(cls, s)

class B(str):
    def __init__(self, s):
        super().__init__(s)
        self.b = s

    def __new__(cls, s):
        return super().__new__(cls, s)
</snippet></ROW><ROW><id>10555965</id><snippet>__new__</snippet></ROW><ROW><id>10556020</id><snippet>  for row in readie:
     outwriter.writerow(row)
     outwriter.writerow([])
</snippet></ROW><ROW><id>10556133</id><snippet>html</snippet></ROW><ROW><id>10556133</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>10556133</id><snippet>lxml</snippet></ROW><ROW><id>10556133</id><snippet>from lxml import etree
import urllib

web = urllib.urlopen("http://www.ffiec.gov/census/report.aspx?year=2011&amp;state=01&amp;report=demographic&amp;msa=11500")
s = web.read()

html = etree.HTML(s)

## Get all 'tr'
tr_nodes = html.xpath('//table[@id="Report1_dgReportDemographic"]/tr')

## 'th' is inside first 'tr'
header = [i[0].text for i in tr_nodes[0].xpath("th")]

## Get text from rest all 'tr'
td_content = [[td.text for td in tr.xpath('td')] for tr in tr_nodes[1:]]
</snippet></ROW><ROW><id>10556311</id><snippet>re.finditer</snippet></ROW><ROW><id>10556460</id><snippet>f = lambda x: x.val if isinstance(x.val, int) else (int(x.val) if isinstance(x.val, basestring) and x.isdigit() else None)
</snippet></ROW><ROW><id>10556460</id><snippet>123L</snippet></ROW><ROW><id>10556585</id><snippet>from BeautifulSoup import BeautifulSoup

html = '''
&lt;div&gt;
&lt;p&gt;dvgbkfbnfd&lt;/p&gt;
&lt;div&gt;
&lt;span&gt;dsvdfvd&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;fvjdfnvjundf&lt;/p&gt;
&lt;/div&gt;
'''

soup = BeautifulSoup(html)
for match in soup.findAll('div'):
    match.replaceWithChildren()

print soup
</snippet></ROW><ROW><id>10556585</id><snippet>&lt;p&gt;dvgbkfbnfd&lt;/p&gt;

&lt;span&gt;dsvdfvd&lt;/span&gt;

&lt;p&gt;fvjdfnvjundf&lt;/p&gt;
</snippet></ROW><ROW><id>10556853</id><snippet>from gi.repository import Gtk, Gdk, GdkX11, Wnck
from subprocess import PIPE, Popen


class WindowError(Exception):
    pass


def getScreen():
    Gtk.main_iteration()

    screen = Wnck.Screen.get_default()
    screen.force_update()

    return screen

def getGDKWindow(aWindow):
    gdkdisplay = GdkX11.X11Display.get_default()
    gdkwindow  = GdkX11.X11Window.foreign_new_for_display(gdkdisplay, aWindow.get_xid())

    return gdkwindow

def getWindow(aTitle):
    screen = getScreen()
    active = screen.get_active_window()

    if active.get_name() == aTitle:
        return active

    for window in screen.get_windows():
        if window.get_name() == aTitle:
            return window

    return None

def adjust(aWindow):
    gdkwindow = getGDKWindow(aWindow)

    gdkwindow.set_decorations(Gdk.WMDecoration.BORDER)
    gdkwindow.move(0,0)

    aWindow.set_skip_pager(True)
    aWindow.set_skip_tasklist(True)

    aWindow.maximize_horizontally()

    aWindow.stick()
    aWindow.make_above()


def onWindowOpen(aScreen, aWindow, aData):
    if aWindow.get_name() == aData:
        adjust(aWindow)

        Gtk.main_quit()


def main():
    timestamp = Gtk.get_current_event_time()
    window      = getWindow('Dropdown Terminal')

    if window:
        if window.is_minimized():
            window.activate(timestamp)
            window.unminimize(timestamp)
        else:
            window.minimize()
    else:
        Popen(['roxterm', '--separate', '--profile=Dropdown', '--directory=.'])

        getScreen().connect('window-opened', onWindowOpen, 'Dropdown Terminal')

        Gtk.main()


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10557106</id><snippet>file_two.read()</snippet></ROW><ROW><id>10557106</id><snippet>with open("test.txt") as f:
    print f.readline() # =&gt; prints the first line, sets file pointer to second line
    print f.read() # =&gt; prints everything from the second line on
</snippet></ROW><ROW><id>10557106</id><snippet>with open("test.txt") as f:
    print f.read() # =&gt; prints entire file, sets file pointer to end of file
    f.seek(0) # =&gt; reset file pointer to beginning of file
    print f.read() # =&gt; prints entire file
</snippet></ROW><ROW><id>10557106</id><snippet>open("test.txt", "a+")</snippet></ROW><ROW><id>10557106</id><snippet>file_two.seek(0)</snippet></ROW><ROW><id>10557106</id><snippet>file_two.write()</snippet></ROW><ROW><id>10557106</id><snippet>file_two</snippet></ROW><ROW><id>10557204</id><snippet>writerow</snippet></ROW><ROW><id>10557204</id><snippet>tweet['text'].encode('ascii', 'ignore')</snippet></ROW><ROW><id>10557419</id><snippet>{'success': true}</snippet></ROW><ROW><id>10557419</id><snippet>Resource</snippet></ROW><ROW><id>10557419</id><snippet>def dehydrate(self, bundle):
    bundle.data['success'] = True
    return bundle
</snippet></ROW><ROW><id>10557471</id><snippet>&gt;&gt;&gt; lsts = [[22,23,24,25,23,23,22],[22,30,31,32,30,30],[31]]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(x for lst in lsts for x in set(lst))
&gt;&gt;&gt; [x for x,y in c.items() if y &gt; 1]
[22, 31]
</snippet></ROW><ROW><id>10557522</id><snippet>    import requests

    payload= {'user' : 'username',
              'pass' : 'PaSSwoRd'}

    r = requests.get(r'http://www.URL.com/home',data=payload)

    print r.text
</snippet></ROW><ROW><id>10557644</id><snippet>.</snippet></ROW><ROW><id>10557644</id><snippet>\D</snippet></ROW><ROW><id>10557644</id><snippet>\b</snippet></ROW><ROW><id>10557644</id><snippet>(?!\d)</snippet></ROW><ROW><id>10557644</id><snippet>re.findall</snippet></ROW><ROW><id>10557644</id><snippet>re.search</snippet></ROW><ROW><id>10557644</id><snippet>pattern = r'\D(\d{1,2}(?:\.\d+)?)(?!\d)'
</snippet></ROW><ROW><id>10557741</id><snippet>figlegend((k),('Limit',),loc='lower center')
</snippet></ROW><ROW><id>10557741</id><snippet>from pylab import *
k = plot((0, 1),(1, 1))
figlegend((k),('Limit',),loc='lower center')
savefig('test.pdf')
</snippet></ROW><ROW><id>10558016</id><snippet>import Tkinter as tk
...
image_link = tk.Label(text_widget, image=my_image, cursor="left_ptr")
image_link.bind("&lt;1&gt;", do_something)
text_widget.window_create("insert", window=image_link)
</snippet></ROW><ROW><id>10558066</id><snippet>cleaned_data</snippet></ROW><ROW><id>10558235</id><snippet>tweet.get('location', '&lt;unknown location&gt;').encode('ascii', 'ignore')
</snippet></ROW><ROW><id>10558440</id><snippet>total</snippet></ROW><ROW><id>10558440</id><snippet>sum</snippet></ROW><ROW><id>10558440</id><snippet>sum</snippet></ROW><ROW><id>10558440</id><snippet>range</snippet></ROW><ROW><id>10558440</id><snippet>&gt;&gt;&gt; sum(1.0/k for k in range(1, 100, 2)) - sum(1.0/k for k in range(2, 100, 2)) - (1.0/100**2)
0.6980721793101952
</snippet></ROW><ROW><id>10558459</id><snippet>'None'</snippet></ROW><ROW><id>10558459</id><snippet>data = {'name': None}
result = str(data['name']) if ((data) and ('name' in data)) else ''
</snippet></ROW><ROW><id>10558459</id><snippet>(data) and ('name' in data)</snippet></ROW><ROW><id>10558459</id><snippet>data</snippet></ROW><ROW><id>10558459</id><snippet>'name'</snippet></ROW><ROW><id>10558459</id><snippet>None</snippet></ROW><ROW><id>10558459</id><snippet>return str(data['name']) if ((data) and ('name' in data)) else ''
</snippet></ROW><ROW><id>10558459</id><snippet>return str(data.get('name') or '') if data else ''
</snippet></ROW><ROW><id>10558527</id><snippet>GameStateProvider</snippet></ROW><ROW><id>10558527</id><snippet>Entity</snippet></ROW><ROW><id>10558527</id><snippet>Entity</snippet></ROW><ROW><id>10558527</id><snippet>current_time</snippet></ROW><ROW><id>10558527</id><snippet>position</snippet></ROW><ROW><id>10558527</id><snippet>class Entity(object):

   def __init__(self, game_state_provider):
      self.provider = game_state_provider

   @property
   def position(self):
      # lazily evaluate position as a function of the current time
      if self._last_valid_time == self.provider.current_time:
         return self._position
      self._last_valid_time = self.provider.current_time
      self._position = // insert physics here
      return self._position
</snippet></ROW><ROW><id>10558660</id><snippet>&gt;&gt;&gt; "" in "lol"
True
</snippet></ROW><ROW><id>10558660</id><snippet>letter</snippet></ROW><ROW><id>10558660</id><snippet>&lt;not chosen yet&gt;</snippet></ROW><ROW><id>10558748</id><snippet>d = {1: {2: 3}, 4: 5, 6: {7: 8}}
generator = (x.items() for x in d.itervalues() if type(x) == dict)
s = dict(sum( generator, list() )) 
# s = {2: 3, 7: 8}
</snippet></ROW><ROW><id>10558748</id><snippet>sum()</snippet></ROW><ROW><id>10558748</id><snippet>items()</snippet></ROW><ROW><id>10558748</id><snippet>iteritems()</snippet></ROW><ROW><id>10558748</id><snippet># chain "concatenates" iterables
from itertools import chain
d = {1: {2: 3}, 4: 5, 6: {7: 8}}
s = dict(chain( *(x.iteritems() for x in d.itervalues() if type(x) == dict) ))
# s = {2: 3, 7: 8}
</snippet></ROW><ROW><id>10558748</id><snippet>dict</snippet></ROW><ROW><id>10558748</id><snippet>d.values()</snippet></ROW><ROW><id>10558748</id><snippet>isinstance</snippet></ROW><ROW><id>10558748</id><snippet>type</snippet></ROW><ROW><id>10558803</id><snippet>para</snippet></ROW><ROW><id>10558803</id><snippet>section</snippet></ROW><ROW><id>10558803</id><snippet>&lt;section&gt;
  &lt;para style="terp_default_2"&gt;[[ repeatIn([line for line in picking.move_lines if ((line.state == 'confirmed' or line.state=='done' or line.state=='assigned') and not line.scrapped)],'move_lines') ]]&lt;/para&gt;
  &lt;para style="terp_default_2"&gt;[[ (picking.move_lines!=[] and removeParentNode('para')) or removeParentNode('section')]]&lt;/para&gt;
  &lt;blockTable colWidths="256.0,74.0,58.0,60.0,73.0" style="Move_Line_Contect_Assign_State"&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;para style="terp_default_9"&gt;&lt;font face="Helvetica" size="9.0"&gt;[ [[ (move_lines.product_id.default_code) or removeParentNode('font') ]] ]&lt;/font&gt; [[ move_lines.product_id.name ]] [[ move_lines.product_id.variants or '']] &lt;/para&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;para style="terp_default_Centre_9"&gt;[[ (move_lines.prodlot_id and move_lines.prodlot_id.name) or '' ]]&lt;/para&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;para style="terp_default_9"&gt;[[ move_lines.state ]]&lt;/para&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;para style="terp_default_Right_9"&gt;[[ (move_lines.location_id and move_lines.location_id.name) or '' ]] &lt;/para&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;para style="terp_default_Right_9"&gt;[[ formatLang(move_lines.product_qty) ]] [[ move_lines.product_uom.name ]]&lt;/para&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/blockTable&gt;
&lt;/section&gt;
</snippet></ROW><ROW><id>10559009</id><snippet> with open(somefile, 'r') as f:
     line_numbers = [n for n, line in enumerate(f) if re.search(someRegexp, line)]
</snippet></ROW><ROW><id>10559025</id><snippet>Replace: print "(.*?)"
With: scribble( "\1" )
</snippet></ROW><ROW><id>10559025</id><snippet>import re

f = open( "code.py", "r" )
newsrc = re.sub( "print \"(.*?)\"", "scribble( \"\\1\" )", f.read() )
f.close()

f = open( "newcode.py", "w" )
f.write( newsrc )
f.close()
</snippet></ROW><ROW><id>10559066</id><snippet>class SaveQueryPage(webapp2.RequestHandler):
  def post(self):
    user = users.get_current_user()
    user_nickname = user.nickname()
    user_email = user.email()

    query_name = self.request.get('queryName')
    query_description = self.request.get('queryDescription')

    query_collab = self.request.get('queryCollab')
    logging.info('Data read for query_collab is %s', query_collab)

    query_collab_re = re.split(r'\s*[,;]\s*', query_collab.strip())
    logging.info('Data read for query_collab_re is %s', query_collab_re)

    query_collab_decode = []
    for item in query_collab_re:
      item = str(item)
      query_collab_decode.append(item)
    logging.info('Data read for query_collab_decode is %s', query_collab_decode)

    query_collab_decode.append(user_nickname)
    logging.info('Data read for query_collab_append is %s', query_collab_decode)

    query_collab_filter = filter(None, query_collab_decode)
    logging.info('Data read for query_collab_filter is %s', query_collab_filter)

    query_value = self.request.get('queryValue') # query_value
    date_created = datetime.today()
    date_lastupdated = datetime.today()
    active_flag = "true"
    random_id = random.randint(1000000000000, 9999999999999)
    unique_query_id = user_nickname + "_" + str(random_id)

    conn = rdbms.connect(instance=_INSTANCE_NAME, database='userPrefs')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO queries (userNickname, queryName, queryDescription, queryValue, dateCreated, dateLastUpdated, activeFlag, uniqueId) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)', (user_nickname, query_name, query_description, query_value, date_created, date_lastupdated, active_flag, unique_query_id))
    conn.commit()

    try:
      for item in query_collab_filter:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO collaborators (uniqueId, userNickname) VALUES (%s, %s)', (unique_query_id, item))
        conn.commit()
    except:
      logging.error('There was an error inserting the values into the collaborators table. query_collaborators =' + str(query_collaborators))

    conn.close()
</snippet></ROW><ROW><id>10559174</id><snippet>https://www.googleapis.com/auth/calendar
</snippet></ROW><ROW><id>10559174</id><snippet>https://www.googleapis.com/auth/plus.me
</snippet></ROW><ROW><id>10559423</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(test1)
  2           0 SETUP_LOOP              30 (to 33)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_GLOBAL              1 (AMOUNT)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                16 (to 32)
             16 STORE_FAST               0 (i)

  3          19 LOAD_FAST                0 (i)
             22 LOAD_CONST               1 (65536)
             25 BINARY_MODULO       
             26 STORE_FAST               1 (value)
             29 JUMP_ABSOLUTE           13
        &gt;&gt;   32 POP_BLOCK           

  4     &gt;&gt;   33 LOAD_CONST               0 (None)
             36 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(test5)
  2           0 SETUP_LOOP              30 (to 33)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_GLOBAL              1 (AMOUNT)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                16 (to 32)
             16 STORE_FAST               0 (i)

  3          19 LOAD_FAST                0 (i)
             22 LOAD_CONST               3 (65536)
             25 BINARY_MODULO       
             26 STORE_FAST               1 (value)
             29 JUMP_ABSOLUTE           13
        &gt;&gt;   32 POP_BLOCK           

  4     &gt;&gt;   33 LOAD_CONST               0 (None)
             36 RETURN_VALUE        
</snippet></ROW><ROW><id>10559423</id><snippet>timeit</snippet></ROW><ROW><id>10559423</id><snippet>import timeit

setup = "i = 1337"

best1 = best2 = float("inf")
for _ in range(5000):
  best1 = min(best1, timeit.timeit("i % 65536", setup=setup, number=10000))
for _ in range(5000):
  best2 = min(best2, timeit.timeit("i % (2**16)", setup=setup, number=10000))
print best1
print best2
</snippet></ROW><ROW><id>10559425</id><snippet>uudecode</snippet></ROW><ROW><id>10559425</id><snippet>unzip</snippet></ROW><ROW><id>10559425</id><snippet>uuencode file.zip file.zip &gt;uu.txt</snippet></ROW><ROW><id>10559425</id><snippet>uuencode</snippet></ROW><ROW><id>10559425</id><snippet>uudecode</snippet></ROW><ROW><id>10559425</id><snippet>#!/bin/sh
# Install script for foo

# Check for special programs that are used in this script.
PROGS="uudecode unzip python"
for P in $PROGS; do
    which $P &gt;/dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
        echo "$(basename $0): The program \"$P\" cannot be found."
        exit 1
    fi
done

uudecode &lt;&lt;"EOF"
begin 644 test.zip
M4$L#!`H``````(&lt;!K$`````````````````$`!P`9F]O+U54"0`#OHZM3ZB.
MK4]U&gt;`L``03I`P``!.D#``!02P,$"@``````A`&amp;L0$EXM&gt;H``@````(```&lt;`
M'`!F;V\O8F%R550)``.XCJU/N(ZM3W5X"P`!!.D#```$Z0,``)DCNBVSM81_
MA%IQ!+LKC\;\19[/E]F!`J2J*2:9B_8#MC^KM*]]9P1]?1Y1@1+/H%Q"'2J'
M,;$7:C9E+WC]%M(BAUFN]4D\$%F63!^CA8O&gt;'0C(-!YD?$\GQ[;M:?@&gt;=A/[
M61XK&lt;A/]\.?!0$QX&lt;5]T\9&lt;ZP$;_?PRMV-3O(NK)/&lt;MTI,!RYA&amp;OWRK6&lt;8%4
M_1!T/+-'7H^V#C[AK)+U?T&gt;UCU."G]D(+JU[8Z#1EI89@'^10B:8.2$$9Q*@
MY:L4MK'^TVF)A5)9\%"/FF+1T@;]8\,I)$CCHHF#E&amp;,D.GVM1=2N];4J?6WR
M0+YH]DXZ"UQ$GVA^F(`5L![=/&lt;ROX]9RQCRWJ=?+G4Y&gt;56[H=8:!:GTA_V;V
M2V$%U5([0D;T19H]P7+^448+^&amp;M3;[/VJDEJ-SU=Q8U=3,IV^&lt;)A&gt;C)]?@XG
M?-9$B@YZGML`!&amp;`\-CP["]B'FC&amp;K7Z)T6K_&amp;W1K5?M&amp;K8D&amp;^'C^J;H[Q4/ST
M(&gt;QL].68#X)_0@`?9&lt;R3#:4Y#A'X-&lt;NT9C\OM3:4[&lt;)`)LEO@E=*/=0U@]VY
M_R!__:Q'_FP3((*8^6JQ"$_H&amp;BIWDD.6&lt;"3D,'&lt;1^=^.9F^2Z7.:OE"1,SV[
M)M(9!&amp;V(4):?M7^JFR^P"!H4U+(*A;U@Z0QA+]5ZIS]B1;K)&amp;@LJ-Y,L9SQ.
M^Q-"&amp;^@#KQG94$L#!`H``````(8!K$#%*"OR``(````"```'`!P`9F]O+V)A
M&gt;E54"0`#O(ZM3[R.K4]U&gt;`L``03I`P``!.D#``!NFMNGLA(C_K!_F=T%?;P3
M#TUC7%4F+!Y#A8&lt;SFK[;E3M.%J`YT&gt;1AVMNJPFOE58Q["7&lt;#AWQFZ!SG_-RW
M*4`@@P.7\&gt;+LGTBNTLH-7)CB(LJDMD)COV5'H]O8G_4I&amp;C:PFTVC%4P=+X*B
M%A^I^$&gt;BO+&lt;!D\&amp;8&amp;GS:&amp;VLQHJJ[!NFW0H5FD6+:'OUT2--U1HXQ2R?JF2,9
M(/@&gt;A(/SU#.78MTFADG`ZZTK!6:Z6\;I`2?D6I;FE=_0V?4&gt;_0MC;$0$P?H%
MDHQ]MCK4;,5W=&lt;IZV&lt;)&lt;`7A_B7&lt;_=U,:X[8/$_&amp;/518\NNBDYS,\&lt;',K2C]9
M4M.5UL/R&lt;\'0E&gt;G#$&gt;`I&gt;/[UX$QM.+T\LF4;D^WF6FX3.(L?2V&lt;5B%5)$!5[
ME47K#7\&amp;D*3Y&gt;I)8#45-HL(!F7+$)%7C9,$_YYL]EG='3BN9W[&amp;9!$.&lt;.U?E
M#0L?=6@%J/32)NAMI48M",_)0#JRR!*Y2P:ZE@JWD)5/#UK!!3]*2M47V1GE
M'X0(FN%_*3BX_X'(6X!ONLKN!U/&amp;_ML-L:^FD/24Q)S*-D8)Z&gt;F4Y^+$]\_'
MB\$$;#D__S_RT(Y]MMK?B#%F1&amp;C`&gt;,)'7:12DX=F)T,/!*^(M*[,^N;6E4";
M31K\AG0@[@4L9MB.`1Z!`%@K5G)P&lt;]0!?P\$RFUC/S:Y_Y\0*:\+$U+JEM%"
M9E!+`0(&gt;`PH``````(&lt;!K$`````````````````$`!@`````````$`#M00``
M``!F;V\O550%``.^CJU/=7@+``$$Z0,```3I`P``4$L!`AX#"@``````A`&amp;L
M0$EXM&gt;H``@````(```&lt;`&amp;````````````*2!/@```&amp;9O;R]B87)55`4``[B.
MK4]U&gt;`L``03I`P``!.D#``!02P$"'@,*``````"&amp;`:Q`Q2@K\@`"`````@``
M!P`8````````````I(%_`@``9F]O+V)A&gt;E54!0`#O(ZM3W5X"P`!!.D#```$
:Z0,``%!+!08``````P`#`.0```#`!```````
`
end
EOF

# Unpack your zipfile
unzip test.zip
# Go into the created subdirectory and install
cd foo
python setup.py install
# whatever post-install stuff you want goes here...
cd ..
rm -rf foo test.zip
</snippet></ROW><ROW><id>10559505</id><snippet>filter</snippet></ROW><ROW><id>10559505</id><snippet>&gt;&gt;&gt; words = ['there', 'was', 'a', 'ffff', 'time', 'ssss']
&gt;&gt;&gt; curses = set(['ffff', 'ssss'])
&gt;&gt;&gt; filter(lambda x: x not in curses, words)
['there', 'was', 'a', 'time']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10559505</id><snippet>&gt;&gt;&gt; [x for x in words if x not in curses]
</snippet></ROW><ROW><id>10559537</id><snippet>from socket import inet_pton, AF_INET6
from struct import unpack

def ip6_to_integer(ip6):
    ip6 = inet_pton(AF_INET6, ip6)
    a, b = unpack("&gt;QQ", ip6)
    return (a &lt;&lt; 64) | b
</snippet></ROW><ROW><id>10559537</id><snippet>&gt;&gt;&gt; ip6_to_integer("2001:23::207:142")
42540490934961530759802172199372521794L
</snippet></ROW><ROW><id>10559537</id><snippet>&gt;&gt;&gt; str(ip6_to_integer("2001:23::207:142"))
'42540490934961530759802172199372521794'
</snippet></ROW><ROW><id>10559541</id><snippet>figure.suptitle</snippet></ROW><ROW><id>10559541</id><snippet>matplotlib.text.Text</snippet></ROW><ROW><id>10559541</id><snippet>txt = fig.suptitle('A test title')
txt.set_text('A better title')
plt.draw() 
</snippet></ROW><ROW><id>10559601</id><snippet>scipy.io</snippet></ROW><ROW><id>10559601</id><snippet>wavfile.write('music.wav',fs,music.astype(np.dtype('i2')))
</snippet></ROW><ROW><id>10559621</id><snippet>strs="""
As soon as it had finished, all her blood rushed to her heart, for she was so angry to hear that Snow-White was yet living. "But now," thought she to herself, "will I make something which shall destroy her completely." Thus saying, she made a poisoned comb by arts which she understood, and then, disguising herself, she took the form of an old widow. She went over the seven hills to the house of the seven Dwarfs, and[15] knocking at the door, called out, "Good wares to sell to-day!"
"""
spl=strs.split()

def ans(word):
    for ind,x in enumerate(spl):
       if x.strip(",'.!")==word or x.strip(',".!')==word:
           break    
    print(" ".join(spl[ind-10:ind]+spl[ind:ind+11]))

ans('Snow-White')

her heart, for she was so angry to hear that Snow-White was yet living. "But now," thought she to herself, "will
</snippet></ROW><ROW><id>10559848</id><snippet>find</snippet></ROW><ROW><id>10559848</id><snippet>In [12]: sentence = 'hello world cat dog'

In [13]: words = ['cat', 'bear', 'dog']

In [15]: [w*(sentence.find(w)&gt;=0) for w in words]
Out[15]: ['cat', '', 'dog']
</snippet></ROW><ROW><id>10559961</id><snippet>"libpath" : [".", "../xlib", "../tools", "../info"],
</snippet></ROW><ROW><id>10559961</id><snippet>"libpath" : [r".", r"..\xlib", r"..\tools", r"..\info"],
</snippet></ROW><ROW><id>10559969</id><snippet>import grequests

urls = [
    'http://www.heroku.com',
    'http://tablib.org',
    'http://httpbin.org',
    'http://python-requests.org',
    'http://kennethreitz.com'
]

rs = (grequests.get(u) for u in urls)
grequests.map(rs)
</snippet></ROW><ROW><id>10560042</id><snippet>A.extend(B)
</snippet></ROW><ROW><id>10560042</id><snippet>A += B
</snippet></ROW><ROW><id>10560185</id><snippet>masked_id = entity.id ^ 0xABCDEFAB</snippet></ROW><ROW><id>10560185</id><snippet>unmasked_id = masked_id ^ 0xABCDEFAB</snippet></ROW><ROW><id>10560185</id><snippet>Customer</snippet></ROW><ROW><id>10560185</id><snippet>pk</snippet></ROW><ROW><id>10560185</id><snippet>zlib.crc32</snippet></ROW><ROW><id>10560185</id><snippet>Customer.id</snippet></ROW><ROW><id>10560284</id><snippet>pl.figure(0, figsize=(16,6))
gs = gridspec.GridSpec(1,1)
gs.update(left=0.05, right=0.45, bottom=0.15, top=0.95)
ax = pl.subplot(gs[0,0])  # save the axes to ax
pl.imshow(scores, interpolation='nearest', cmap=pl.cm.spectral)
pl.xlabel('gamma')
pl.ylabel('C')
pl.xticks(np.arange(len(gamma_range)), gamma_range, rotation=45)
pl.yticks(np.arange(len(C_range)), C_range)
gs = gridspec.GridSpec(3,3)
gs.update(left=0.5, right=0.95, bottom=0.05, top=0.95)
pl.subplot(gs[0,0])  # here's where the shift happens

pl.colorbar(ax=ax) # create colorbar for ax
pl.show()
</snippet></ROW><ROW><id>10560298</id><snippet>def get_files(target):
    # Get file size and modified time for all files from the target directory and down.
    # Initialize files list
    filelist = []
    dirdict = {}
    # Walk the directory structure
    for root, dirs, files in os.walk(target):
        # Do not walk into directories that are mount points
        dirs[:] = filter(lambda dir: not os.path.ismount(os.path.join(root, dir)), dirs)
        for name in files:
            # Construct absolute path for files
            filename = os.path.join(root, name)
            # Test the path to account for broken symlinks
            if os.path.exists(filename):
                # File size information in bytes
                size = float(os.path.getsize(filename))
                # Get the modified time of the file
                mtime = os.path.getmtime(filename)
                # Create a tuple of filename, size, and modified time
                construct = filename, size, str(datetime.datetime.fromtimestamp(mtime))
                # Add the tuple to the master filelist
                filelist.append(construct)
                if root in dirdict.keys():
                    dirdict[root] += size
                else:
                    dirdict[root] = size
    return(filelist, dirdict)
</snippet></ROW><ROW><id>10560298</id><snippet>dirdict.items()
</snippet></ROW><ROW><id>10560335</id><snippet>unichr(40960) 
</snippet></ROW><ROW><id>10560448</id><snippet>Flip</snippet></ROW><ROW><id>10560448</id><snippet>frame = rotateImage(frame, 180)
</snippet></ROW><ROW><id>10560448</id><snippet>cv.Flip(frame, flipMode=-1)
</snippet></ROW><ROW><id>10560448</id><snippet>rotateImage</snippet></ROW><ROW><id>10560448</id><snippet>import cv
orig = cv.LoadImage("rot.png")
cv.Flip(orig, flipMode=-1)
cv.ShowImage('180_rotation', orig)
cv.WaitKey(0)
</snippet></ROW><ROW><id>10560602</id><snippet>csv</snippet></ROW><ROW><id>10560602</id><snippet>import csv

if __name__ == '__main__':
    file_path = r"/your/file/path/here.csv"
    file_handle = open(file_path, "r")
    csv_handle = csv.reader(file_handle)
    # Now you can work with the *values* in the csv file.
</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>dicts</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>sorted()</snippet></ROW><ROW><id>10560678</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>10560678</id><snippet>import operator
sorted_dicts = sorted(dicts, key=operator.itemgetter("diff"))
</snippet></ROW><ROW><id>10560678</id><snippet>sorted()</snippet></ROW><ROW><id>10560678</id><snippet>key</snippet></ROW><ROW><id>10560678</id><snippet>itemgetter()</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>sorted(users.values(), key=operator.itemgetter("diff"))
</snippet></ROW><ROW><id>10560678</id><snippet>dict.values()</snippet></ROW><ROW><id>10560678</id><snippet>viewitems()</snippet></ROW><ROW><id>10560678</id><snippet>iteritems()</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>sorted(dict)</snippet></ROW><ROW><id>10560678</id><snippet>users = {
    '&lt;User: user10&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user11&gt;': {'alike': 3, 'diff': 37},
    '&lt;User: user12&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user13&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user14&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user15&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user16&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user17&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user18&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user19&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user20&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user2&gt;': {'alike': 1, 'diff': 48},
    '&lt;User: user3&gt;': {'alike': 2, 'diff': 42},
    '&lt;User: user4&gt;': {'alike': 1, 'diff': 45},
    '&lt;User: user5&gt;': {'alike': 2, 'diff': 43},
    '&lt;User: user6&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user7&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user8&gt;': {'alike': 1, 'diff': 49},
    '&lt;User: user9&gt;': {'alike': 0, 'diff': 50}
}

print(sorted(users))
</snippet></ROW><ROW><id>10560678</id><snippet>['&lt;User: user10&gt;', '&lt;User: user11&gt;', '&lt;User: user12&gt;', '&lt;User: user13&gt;', '&lt;User: user14&gt;', '&lt;User: user15&gt;', '&lt;User: user16&gt;', '&lt;User: user17&gt;', '&lt;User: user18&gt;', '&lt;User: user19&gt;', '&lt;User: user20&gt;', '&lt;User: user2&gt;', '&lt;User: user3&gt;', '&lt;User: user4&gt;', '&lt;User: user5&gt;', '&lt;User: user6&gt;', '&lt;User: user7&gt;', '&lt;User: user8&gt;', '&lt;User: user9&gt;']
</snippet></ROW><ROW><id>10560678</id><snippet>dict</snippet></ROW><ROW><id>10560678</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>10560678</id><snippet>import collections

users = {
    '&lt;User: user10&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user11&gt;': {'alike': 3, 'diff': 37},
    '&lt;User: user12&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user13&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user14&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user15&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user16&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user17&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user18&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user19&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user20&gt;': {'alike': 0, 'diff': 50},
    '&lt;User: user2&gt;': {'alike': 1, 'diff': 48},
    '&lt;User: user3&gt;': {'alike': 2, 'diff': 42},
    '&lt;User: user4&gt;': {'alike': 1, 'diff': 45},
    '&lt;User: user5&gt;': {'alike': 2, 'diff': 43},
    '&lt;User: user6&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user7&gt;': {'alike': 1, 'diff': 46},
    '&lt;User: user8&gt;': {'alike': 1, 'diff': 49},
    '&lt;User: user9&gt;': {'alike': 0, 'diff': 50}
}

print(collections.OrderedDict(sorted(users.items(), key=lambda x: x[1]["diff"])))
</snippet></ROW><ROW><id>10560678</id><snippet>OrderedDict([('&lt;User: user11&gt;', {'diff': 37, 'alike': 3}), ('&lt;User: user3&gt;', {'diff': 42, 'alike': 2}), ('&lt;User: user5&gt;', {'diff': 43, 'alike': 2}), ('&lt;User: user4&gt;', {'diff': 45, 'alike': 1}), ('&lt;User: user10&gt;', {'diff': 46, 'alike': 1}), ('&lt;User: user7&gt;', {'diff': 46, 'alike': 1}), ('&lt;User: user6&gt;', {'diff': 46, 'alike': 1}), ('&lt;User: user2&gt;', {'diff': 48, 'alike': 1}), ('&lt;User: user8&gt;', {'diff': 49, 'alike': 1}), ('&lt;User: user20&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user9&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user13&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user19&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user12&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user18&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user15&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user14&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user17&gt;', {'diff': 50, 'alike': 0}), ('&lt;User: user16&gt;', {'diff': 50, 'alike': 0})])
</snippet></ROW><ROW><id>10560678</id><snippet>lambda</snippet></ROW><ROW><id>10560678</id><snippet>itemgetter()</snippet></ROW><ROW><id>10560690</id><snippet>def find_K_highest(lst, k):
    # escape index error
    if k&gt;len(lst):
        k=len(lst)
    # the output array
    idxs = [None]*k
    to_watch = range(len(lst))
    # do it k times
    for i in range(k):
        # guess that max value is at least at idx '0' of to_watch
        to_del=0
        idx = to_watch[to_del]
        max_val = lst[idx]
        # search through the list for bigger value and its index
        for jj in range(len(to_watch)):
            j=to_watch[jj]
            val = lst[j]
            # check that its bigger that previously finded max
            if val &gt; max_val:
                idx = j
                max_val = val
                to_del=jj
            # append it
        idxs[i] = idx
        del to_watch[to_del]
        # return answer
    return idxs
</snippet></ROW><ROW><id>10560718</id><snippet>class PQueue:
    """
    Implements a priority queue with append, take, promote, and demote
    operations.
    """
    def __init__(self):
        """
        Initialize empty priority queue.
        self.toll is max(priority) and max(rowid) in the queue
        self.heap is the heap maintained for take command
        self.rows is a mapping from rowid to items
        self.pris is a mapping from priority to items
        """
        self.toll = 0
        self.heap = list()
        self.rows = dict()
        self.pris = dict()

    def append(self, value):
        """
        Append value to our priority queue.
        The new value is added with lowest priority as an item. Items are
        threeple lists consisting of [priority, rowid, value]. The rowid
        is used by the promote/demote commands.
        Returns the new rowid corresponding to the new item.
        """
        self.toll += 1
        item = [self.toll, self.toll, value]
        self.heap.append(item)
        self.rows[self.toll] = item
        self.pris[self.toll] = item
        return self.toll

    def take(self):
        """
        Take the highest priority item out of the queue.
        Returns the value of the item.
        """
        item = heapq.heappop(self.heap)
        del self.pris[item[0]]
        del self.rows[item[1]]
        return item[2]

    def promote(self, rowid):
        """
        Promote an item in the queue.
        The promoted item swaps position with the next highest item.
        Returns the number of affected rows.
        """
        if rowid not in self.rows: return 0
        item = self.rows[rowid]
        item_pri, item_row, item_val = item
        next = item_pri - 1
        if next in self.pris:
            iota = self.pris[next]
            iota_pri, iota_row, iota_val = iota
            iota[1], iota[2] = item_row, item_val
            item[1], item[2] = iota_row, iota_val
            self.rows[item_row] = iota
            self.rows[iota_row] = item
            return 2
        return 0
</snippet></ROW><ROW><id>10560718</id><snippet>pqueue = PQueue()

def pqueue_server(sock, addr):
    text = sock.recv(1024)
    cmds = text.split(' ')
    if cmds[0] == 'append':
        result = pqueue.append(cmds[1])
    elif cmds[0] == 'take':
        result = pqueue.take()
    elif cmds[0] == 'promote':
        result = pqueue.promote(int(cmds[1]))
    elif cmds[0] == 'demote':
        result = pqueue.demote(int(cmds[1]))
    else:
        result = ''
    sock.sendall(str(result))
    print 'Request:', text, '; Response:', str(result)

if args.listen:
    server = StreamServer(('127.0.0.1', 4040), pqueue_server)
    print 'Starting pqueue server on port 4040...'
    server.serve_forever()
</snippet></ROW><ROW><id>10560718</id><snippet>if args.client:
    while True:
        msg = raw_input('&gt; ')
        sock = gsocket.socket(gsocket.AF_INET, gsocket.SOCK_STREAM)
        sock.connect(('127.0.0.1', 4040))
        sock.sendall(msg)
        text = sock.recv(1024)
        sock.close()
        print text
</snippet></ROW><ROW><id>10560718</id><snippet>&gt; append one
1
&gt; append two
2
&gt; append three
3
&gt; promote 2
2
&gt; promote 2
0
&gt; take
two
</snippet></ROW><ROW><id>10560718</id><snippet>def test():
    import time
    import urllib2
    import subprocess

    import random
    random = random.Random(0)

    from progressbar import ProgressBar, Percentage, Bar, ETA
    widgets = [Percentage(), Bar(), ETA()]

    def make_name():
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        return ''.join(random.choice(alphabet)
                       for rpt in xrange(random.randrange(3, 20)))

    def make_request(cmds):
        sock = gsocket.socket(gsocket.AF_INET, gsocket.SOCK_STREAM)
        sock.connect(('127.0.0.1', 4040))
        sock.sendall(cmds)
        text = sock.recv(1024)
        sock.close()

    print 'Starting server and waiting 3 seconds.'
    subprocess.call('start cmd.exe /c python.exe queue_thing_gevent.py -l',
                    shell=True)
    time.sleep(3)

    tests = []
    def wrap_test(name, limit=10000):
        def wrap(func):
            def wrapped():
                progress = ProgressBar(widgets=widgets)
                for rpt in progress(xrange(limit)):
                    func()
                secs = progress.seconds_elapsed
                print '{0} {1} records in {2:.3f} s at {3:.3f} r/s'.format(
                    name, limit, secs, limit / secs)
            tests.append(wrapped)
            return wrapped
        return wrap

    def direct_append():
        name = make_name()
        pqueue.append(name)

    count = 1000000
    @wrap_test('Loaded', count)
    def direct_append_test(): direct_append()

    def append():
        name = make_name()
        make_request('append ' + name)

    @wrap_test('Appended')
    def append_test(): append()

    ...

    print 'Running speed tests.'
    for tst in tests: tst()
</snippet></ROW><ROW><id>10560718</id><snippet>Starting server and waiting 3 seconds.
Running speed tests.
100%|############################################################|Time: 0:00:21
Loaded 1000000 records in 21.770 s at 45934.773 r/s
100%|############################################################|Time: 0:00:06
Appended 10000 records in 6.825 s at 1465.201 r/s
100%|############################################################|Time: 0:00:06
Promoted 10000 records in 6.270 s at 1594.896 r/s
100%|############################################################|Time: 0:00:05
Demoted 10000 records in 5.686 s at 1758.706 r/s
100%|############################################################|Time: 0:00:05
Took 10000 records in 5.950 s at 1680.672 r/s
100%|############################################################|Time: 0:00:07
Mixed load processed 10000 records in 7.410 s at 1349.528 r/s
</snippet></ROW><ROW><id>10560718</id><snippet>def save_heap(heap, toll):
    name = 'heap-{0}.txt'.format(toll)
    with open(name, 'w') as temp:
        for val in heap:
            temp.write(str(val))
            gevent.sleep(0)
</snippet></ROW><ROW><id>10560718</id><snippet>def save(self):
    heap_copy = tuple(self.heap)
    toll = self.toll
    gevent.spawn(save_heap, heap_copy, toll)
</snippet></ROW><ROW><id>10560853</id><snippet>&gt;&gt;&gt; num = 1.00
&gt;&gt;&gt; num
1.0
&gt;&gt;&gt; num -= 0.95
&gt;&gt;&gt; num
0.050000000000000044
&gt;&gt;&gt; nickel = .05
&gt;&gt;&gt; nickel
0.05
</snippet></ROW><ROW><id>10560984</id><snippet>filename</snippet></ROW><ROW><id>10561119</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys
# If this script lives in a child directory of the main project directory
# uncomment the following 2 lines:
#dir_parent = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
#sys.path.insert(0, dir_parent)

from django.core.management import setup_environ
import settings
setup_environ(settings)

from django.db import transaction

# import whatever you like from app.models or whatever
# do random stuff.

# If you are *changing* database records,
# wrap your database code either in:
@transaction.commit_manually
def foo():
   ... stuff
   transaction.commit()

# OR end you script with:
transaction.commit_unless_managed()
</snippet></ROW><ROW><id>10561119</id><snippet>file</snippet></ROW><ROW><id>10561119</id><snippet>__file__</snippet></ROW><ROW><id>10561119</id><snippet>file</snippet></ROW><ROW><id>10561119</id><snippet>sys.path</snippet></ROW><ROW><id>10561204</id><snippet>exec</snippet></ROW><ROW><id>10561204</id><snippet>getattr</snippet></ROW><ROW><id>10561204</id><snippet>setattr</snippet></ROW><ROW><id>10561204</id><snippet>from datetime import datetime
class Article:
    published = datetime.now()

    def __init__(self):
        for propname in "year month day hour minute second".split():
            setattr(self, propname, getattr(self.published, propname))
</snippet></ROW><ROW><id>10561204</id><snippet>__init__</snippet></ROW><ROW><id>10561320</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; h.unescape('wer&amp;wer')
u'wer&amp;wer'
</snippet></ROW><ROW><id>10561408</id><snippet>handlers:
- url: /images
  static_dir: images

- url: /.*
  script: myscript.py
</snippet></ROW><ROW><id>10561476</id><snippet>&lt;form method="post" action="/foo/url/"&gt;
    &lt;input type="file" name="foofile"&gt;
    &lt;input type="submit" value="Upload"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10561476</id><snippet>/foo/url/</snippet></ROW><ROW><id>10561476</id><snippet>POST</snippet></ROW><ROW><id>10561476</id><snippet>/foo/url/</snippet></ROW><ROW><id>10561476</id><snippet>storeAndProcessFile</snippet></ROW><ROW><id>10561476</id><snippet>request</snippet></ROW><ROW><id>10561476</id><snippet>request.FILES['foofile']</snippet></ROW><ROW><id>10561476</id><snippet>def storeAndProcessFile(request):
    # make sure the the request method is POST
    if request.method != 'POST':
        return HttpResponseBadRequest('Only POST requests are allowed')
    # now get the uploaded file
    file = request.FILES['foofile']
    # the file is going to be an instance of UploadedFile
    with open('/destination/path/%s' % file.name, 'wb+') as dest:
        for chunk in file.chunks():
            dest.write(chunk)
    # return success message
    return HttpResponse('File uploaded')
</snippet></ROW><ROW><id>10561476</id><snippet>csrf_exempt</snippet></ROW><ROW><id>10561476</id><snippet>from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def storeAndProcessFile(request):
    ...
</snippet></ROW><ROW><id>10561479</id><snippet>mylen=len(length)</snippet></ROW><ROW><id>10561479</id><snippet>recv</snippet></ROW><ROW><id>10561479</id><snippet>String xyz = in.readLine();</snippet></ROW><ROW><id>10561479</id><snippet>'\n'</snippet></ROW><ROW><id>10561479</id><snippet>data.decode("hex")</snippet></ROW><ROW><id>10561479</id><snippet>data.encode("hex")</snippet></ROW><ROW><id>10561479</id><snippet>result</snippet></ROW><ROW><id>10561479</id><snippet>array.array</snippet></ROW><ROW><id>10561479</id><snippet>file1.write</snippet></ROW><ROW><id>10561479</id><snippet>result</snippet></ROW><ROW><id>10561569</id><snippet>grouper</snippet></ROW><ROW><id>10561569</id><snippet>&gt;&gt;&gt; [' '.join(x) for x in grouper(4, truth.split())]
</snippet></ROW><ROW><id>10561569</id><snippet>grouper</snippet></ROW><ROW><id>10561569</id><snippet>from itertools import izip_longest

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>10562233</id><snippet>(let ((piece-array (make-array '(2 7 64) :initial-element 0)))
  (dolist (color `(,white ,black))
    (dolist (piece `(,pawn ,knight ,bishop ,rook ,queen ,king))
      (loop for cord below 64
            do (setf (aref piece-array color piece cord)
                     (random maxint))))))
</snippet></ROW><ROW><id>10562308</id><snippet>class UserAdmin(admin.ModelAdmin):
    # do stuff

admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>10562309</id><snippet>if settings.DEBUG:
  urlpatterns += patterns('',
                          url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {
                            'document_root': settings.MEDIA_ROOT,
                          }),
                         )
</snippet></ROW><ROW><id>10562309</id><snippet>if settings.DEBUG:
  urlpatterns += patterns(
    '',
    url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {
      'document_root': settings.MEDIA_ROOT,
    }),               
  )
</snippet></ROW><ROW><id>10562469</id><snippet>from mod import func</snippet></ROW><ROW><id>10562469</id><snippet>mod2</snippet></ROW><ROW><id>10562469</id><snippet>func</snippet></ROW><ROW><id>10562469</id><snippet>mod2</snippet></ROW><ROW><id>10562469</id><snippet>mod.func</snippet></ROW><ROW><id>10562469</id><snippet>mod.func</snippet></ROW><ROW><id>10562469</id><snippet>mod</snippet></ROW><ROW><id>10562469</id><snippet>mod.func</snippet></ROW><ROW><id>10562469</id><snippet>mod2.func</snippet></ROW><ROW><id>10562469</id><snippet># monkeypatch.py
import other_module
from other_module import func as orig_func
def replacement():
    do_stuff()
    orig_func()
    do_stuff()
other_module.func = replacement
</snippet></ROW><ROW><id>10562557</id><snippet>active = deque()
seen = set()

active.append(first document)

while active is not empty:
    document = active.popleft()
    if document in seen:
        continue

    # do stuff with the document -- e.g. index keywords

    seen.add(document)
    for each link in the document:
         active.append(link)
</snippet></ROW><ROW><id>10562666</id><snippet>if sys.argv[1].lower().startswith('c')
</snippet></ROW><ROW><id>10562666</id><snippet>if sys.argv[1].lower().startswith('d')
</snippet></ROW><ROW><id>10562673</id><snippet>urllib</snippet></ROW><ROW><id>10562673</id><snippet>yschttl</snippet></ROW><ROW><id>10562673</id><snippet>link-1</snippet></ROW><ROW><id>10562673</id><snippet>link-2</snippet></ROW><ROW><id>10562673</id><snippet>import requests
from bs4 import BeautifulSoup
url = "http://search.yahoo.com/search?p=%s"
query = "python"
r = requests.get(url % query) 
soup.find_all(attrs={"class": "yschttl"})

for link in soup.find_all(attrs={"class": "yschttl"}):
    print "%s (%s)" %(link.text, link.get('href'))
</snippet></ROW><ROW><id>10562673</id><snippet>Python Programming Language – Official Website (http://www.python.org/)
Python - Image Results (http://images.search.yahoo.com/search/images?_adv_prop=image&amp;va=python)
Python (programming language) - Wikipedia, the free encyclopedia (http://en.wikipedia.org/wiki/Python_(programming_language))
</snippet></ROW><ROW><id>10562971</id><snippet>QPixmap::fromImage</snippet></ROW><ROW><id>10562971</id><snippet>QPixmap</snippet></ROW><ROW><id>10562971</id><snippet> self.pixmap = QtGui.QPixmap.fromImage(self.image)
</snippet></ROW><ROW><id>10562971</id><snippet>self.pixmap.fromImage</snippet></ROW><ROW><id>10562971</id><snippet>self.pixmap</snippet></ROW><ROW><id>10563044</id><snippet>(x1, y1)</snippet></ROW><ROW><id>10563044</id><snippet>p</snippet></ROW><ROW><id>10563044</id><snippet>In [6]: [math.sqrt((x1-x2)**2+(y1-y2)**2) for x2,y2 in p]
Out[6]: [0.0, 1.0, 1.0, 1.4142135623730951, 1.0, 1.4142135623730951]
</snippet></ROW><ROW><id>10563044</id><snippet>(x1, y1)</snippet></ROW><ROW><id>10563044</id><snippet>In [8]: [(x2,y2) for x2,y2 in p if math.sqrt((x1-x2)**2+(y1-y2)**2) &lt;= 1.0]
Out[8]: [(0, 0), (1, 0), (0, 1), (0, -1)]
</snippet></ROW><ROW><id>10563044</id><snippet>1.0</snippet></ROW><ROW><id>10563044</id><snippet>import math

def filter_points(points, origin, radius=1.0):
  x1, y1 = origin
  return [(x2,y2) for x2,y2 in points if math.sqrt((x1-x2)**2+(y1-y2)**2) &lt;= radius]

p = [(0, 0), (1, 0), (0, 1), (1, 1), (0, -1), (-1, 1)]
print(filter_points(p, (0, 0), 1.0))
</snippet></ROW><ROW><id>10563053</id><snippet>False</snippet></ROW><ROW><id>10563053</id><snippet>'', "", 0, [], {}, (), False, None 
</snippet></ROW><ROW><id>10563053</id><snippet>user_date_table.june_11_steps</snippet></ROW><ROW><id>10563053</id><snippet>{% if not user_date_table.june_11_steps %}</snippet></ROW><ROW><id>10563053</id><snippet>True</snippet></ROW><ROW><id>10563053</id><snippet>user_date_table</snippet></ROW><ROW><id>10563053</id><snippet>{% if not user_date_table%}
</snippet></ROW><ROW><id>10563053</id><snippet>display_result</snippet></ROW><ROW><id>10563053</id><snippet>if request.POST: #saving the post data
    display_result = True
</snippet></ROW><ROW><id>10563053</id><snippet>{% if not display_result %}
    &lt;form action="/steps_count/inde...
</snippet></ROW><ROW><id>10563151</id><snippet>class TagWidget(Widget):
    def __init__(self, initial_tags, *args, **kwargs)
        self.initial_tags = initial_tags
        super(TagWidget, self).__init__(*args, **kwargs)

# ...

widgets = {
    'tags': TagWidget(initial_tags=('one', 'two', 'three'))
}
</snippet></ROW><ROW><id>10563151</id><snippet>self.initial_tags</snippet></ROW><ROW><id>10563157</id><snippet>$ echo $LANG
en_GB.UTF-8
$ python
Python 2.7.3 (default, Apr 20 2012, 22:39:59) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; s = '(\xef\xbd\xa1\xef\xbd\xa5\xcf\x89\xef\xbd\xa5\xef\xbd\xa1)\xef\xbe\x89'
&gt;&gt;&gt; s1 = s.decode('utf-8')
&gt;&gt;&gt; print s1
(｡･ω･｡)ﾉ
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10563157</id><snippet>LANG</snippet></ROW><ROW><id>10563157</id><snippet>$ unset LANG
$ python
Python 2.7.3 (default, Apr 20 2012, 22:39:59) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; s = '(\xef\xbd\xa1\xef\xbd\xa5\xcf\x89\xef\xbd\xa5\xef\xbd\xa1)\xef\xbe\x89'
&gt;&gt;&gt; s1 = s.decode('utf-8')
&gt;&gt;&gt; print s1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode characters in position 1-5: ordinal not in range(128)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10563292</id><snippet>name = 'filename'
f = file(self.TEST_ROOT + name)
file_data = {'file':SimpleUploadedFile(f.name,f.read())}
data = {}
form = self.TestForm(data,file_data)
self.assertTrue(form.is_valid())
</snippet></ROW><ROW><id>10563292</id><snippet>file(settings.MEDIA_ROOT + request.POST['book_pics'])
</snippet></ROW><ROW><id>10563301</id><snippet>&gt;&gt;&gt; main_array = ['bacon', 'cheese', 'milk', 'cake', 'tomato']
&gt;&gt;&gt; second_array = ['cheese', 'tomato']
&gt;&gt;&gt; set(main_array) &amp; set(second_array)
set(['tomato', 'cheese'])
</snippet></ROW><ROW><id>10563301</id><snippet>&amp;</snippet></ROW><ROW><id>10563301</id><snippet>-</snippet></ROW><ROW><id>10563301</id><snippet>&gt;&gt;&gt; set(main_array) - set(second_array)
set(['cake', 'bacon', 'milk'])
</snippet></ROW><ROW><id>10563374</id><snippet>'(OR (TO "tech163@fusionswift.com") (FROM "tech163@fusionswift.com"))'
</snippet></ROW><ROW><id>10563430</id><snippet>grid</snippet></ROW><ROW><id>10563430</id><snippet>pack</snippet></ROW><ROW><id>10563430</id><snippet>pack</snippet></ROW><ROW><id>10563430</id><snippet>grid</snippet></ROW><ROW><id>10563524</id><snippet>mainframe.pack()
</snippet></ROW><ROW><id>10563524</id><snippet>side=TOP, fill=NONE</snippet></ROW><ROW><id>10563524</id><snippet>mainframe.pack(fill="both", expand=True)
-or-
mainframe.pack(side="left", fill="y")
</snippet></ROW><ROW><id>10563724</id><snippet>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]

&gt; The target list is not deleted when the loop is finished 
</snippet></ROW><ROW><id>10563724</id><snippet>for</snippet></ROW><ROW><id>10563724</id><snippet>for some_list[blah] in...
for some_object.foo in...
for a[:n] in ...:
</snippet></ROW><ROW><id>10564007</id><snippet>i = 0

def code_to_repeat():
    # whatever is your code
    print "I was repeated : " + str(i) +" times"

while(True):
    print "Do you want to run the code (Y/N) : "
    stri = raw_input()
    print "\n"
    if stri=="Y":
        i += 1
        code_to_repeat()
    elif stri=="N"
        print "exiting\n"
        break;
    else:
        print "Please Answer Y/N only.\n"
</snippet></ROW><ROW><id>10564009</id><snippet>theproc = subprocess.Popen(['C:\\CalledScript.py', str(thePid)])
</snippet></ROW><ROW><id>10564009</id><snippet>shell=True</snippet></ROW><ROW><id>10564037</id><snippet>count_vect.fit_transform(t[0] for t in res)
</snippet></ROW><ROW><id>10564359</id><snippet>Ext.Ajax.request</snippet></ROW><ROW><id>10564359</id><snippet>{ success: false, msg: 'Failed to save record' }
</snippet></ROW><ROW><id>10564359</id><snippet>success</snippet></ROW><ROW><id>10564394</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>10564394</id><snippet>export LANG=es_ES.UTF-8
export LC_ALL=es_ES.UTF-8

python manage.py syncdb
</snippet></ROW><ROW><id>10564394</id><snippet>sudo dpkg-reconfigure locales
</snippet></ROW><ROW><id>10564394</id><snippet>(pythonanywhere2)bash-3.2$</snippet></ROW><ROW><id>10564406</id><snippet>import spynner
from PyQt4.QtCore import QUrl
from PyQt4.QtNetwork import QNetworkRequest, QNetworkAccessManager

url = "http://localhost:8080/niklas/test.php"
data = "foo=bar"
headers = { "Content-Type": "application/x-www-form-urlencoded" }

req = QNetworkRequest(QUrl(url))
for k, v in headers.items():
    req.setRawHeader(k, v)

browser = spynner.Browser()
browser.webframe.load(req, QNetworkAccessManager.PostOperation, data)
browser._wait_load()

print browser.html
</snippet></ROW><ROW><id>10564645</id><snippet>request.FILES</snippet></ROW><ROW><id>10564654</id><snippet>after</snippet></ROW><ROW><id>10564654</id><snippet>test_function</snippet></ROW><ROW><id>10564654</id><snippet>def test_function(gui_self):
    print "Debug message"
    gui_self.main_.insert(END, "Test")
    gui_self.after(5000,test_function,gui_self)
    #the line below also should work.  As long as the item is a Tkinter widget
    #gui_self.main_.after(5000,test_function,gui_self) 
</snippet></ROW><ROW><id>10564654</id><snippet>main_</snippet></ROW><ROW><id>10564654</id><snippet>GUI</snippet></ROW><ROW><id>10564654</id><snippet>main</snippet></ROW><ROW><id>10564654</id><snippet>main</snippet></ROW><ROW><id>10564819</id><snippet>&gt;&gt;&gt; tup1 = 1, 2
&gt;&gt;&gt; tup2 = 2, 3
&gt;&gt;&gt; def f(a, b, c, d):
        print(a, b, c, d)

&gt;&gt;&gt; f(*tup1+tup2)
1 2 2 3
</snippet></ROW><ROW><id>10565153</id><snippet>QThread</snippet></ROW><ROW><id>10565524</id><snippet>import os

for root, dirs, files in os.walk('/path/to/dir', topdown=False):
    for name in files:
        f = os.path.join(root, name)
        if os.path.getsize(f) == filesize:
            os.remove(f)
</snippet></ROW><ROW><id>10565592</id><snippet>def partition(lst, item):
    if item in lst:
        n = lst.index(item)
        return lst[:n], [item], lst[n+1:]
    else:
        return lst, [], []

print partition(range(10), 7)
</snippet></ROW><ROW><id>10565592</id><snippet>def partition(it, item):
    a = [[]]
    for x in it:
        if x == item and len(a) == 1:
            a.append([item])
            a.append([])
        else:
            a[-1].append(x)
    return a

print partition((x for x in range(10)), 7)
</snippet></ROW><ROW><id>10565592</id><snippet>def partition(it, item):
    a = []
    for x in it:
        if x == item:
            return a, [item], list(it)
        a.append(x)
    return a, [], []

print partition((x for x in range(10)), 7)
print partition((x for x in range(10)), 17)
</snippet></ROW><ROW><id>10565640</id><snippet>&gt;&gt;&gt; a = np.array([123, 412, 444])
&gt;&gt;&gt; b = np.array([123, 321])
&gt;&gt;&gt; diff = np.setdiff1d(b, a);print diff
array([312])
&gt;&gt;&gt; if diff:
&gt;&gt;&gt;    print "Not passed"
</snippet></ROW><ROW><id>10565640</id><snippet>312</snippet></ROW><ROW><id>10565640</id><snippet>a</snippet></ROW><ROW><id>10565640</id><snippet>b</snippet></ROW><ROW><id>10565640</id><snippet>b</snippet></ROW><ROW><id>10565640</id><snippet>a</snippet></ROW><ROW><id>10565719</id><snippet>email.message_from_string(raw_email)</snippet></ROW><ROW><id>10565719</id><snippet>Message</snippet></ROW><ROW><id>10565719</id><snippet>Message</snippet></ROW><ROW><id>10565742</id><snippet>In [32]: from datetime import datetime as dt

In [33]: dr = p.DateRange(dt(2009,1,1),dt(2010,12,31), offset=p.datetools.Hour())

In [34]: hr = dr.map(lambda x: x.hour)

In [35]: dt = p.DataFrame(rand(len(dr),2), dr)

In [36]: dt 

Out[36]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DateRange: 17497 entries, 2009-01-01 00:00:00 to 2010-12-31 00:00:00
offset: &lt;1 Hour&gt;
Data columns:
0    17497  non-null values
1    17497  non-null values
dtypes: float64(2)

In [37]: dt[(hr &gt;= 10) &amp; (hr &lt;=16)]

Out[37]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 5103 entries, 2009-01-01 10:00:00 to 2010-12-30 16:00:00
Data columns:
0    5103  non-null values
1    5103  non-null values
dtypes: float64(2)
</snippet></ROW><ROW><id>10565778</id><snippet>self.whatever</snippet></ROW><ROW><id>10565778</id><snippet>__iter__</snippet></ROW><ROW><id>10565778</id><snippet>setup = """
def create_generator(num):
    mylist = range(num)
    for i in mylist:
        yield i

class Generator(object):

    def __init__(self, num):
        self.start = 0
        self.end = num

    def __iter__(self):
        return self

    def next(self):
        if self.start == self.end:
            raise StopIteration
        else:
            self.start = self.start + 1
            return self.start

class Generator2(object):

    def __init__(self, num):
        self.mylist = range(num)

    def __iter__(self):
        for i in self.mylist:
            yield i
"""

import timeit

print timeit.timeit('for p in create_generator(1000):p', setup, number=1000)
print timeit.timeit('for p in Generator(1000):p', setup, number=1000)
print timeit.timeit('for p in Generator2(1000):p', setup, number=1000)
</snippet></ROW><ROW><id>10565778</id><snippet>0.158941984177
0.696810007095
0.160784959793
</snippet></ROW><ROW><id>10565778</id><snippet>Generator</snippet></ROW><ROW><id>10565778</id><snippet>Generator2</snippet></ROW><ROW><id>10565933</id><snippet>Encoding.Unicode</snippet></ROW><ROW><id>10565933</id><snippet>print aes.decrypt(text).decode('utf-16')
</snippet></ROW><ROW><id>10566075</id><snippet>group()</snippet></ROW><ROW><id>10566357</id><snippet>re.findall('[(][^)]*[)]|\S+', key)</snippet></ROW><ROW><id>10566403</id><snippet>class Intro(object):

    def __init__(self):
         # Setting up some variables here

    def description(self):
        print "Here is the description of the room you are in"

    def north(self):
        return Dungeon()

    def west(self):
        return Outside()

    #etc
</snippet></ROW><ROW><id>10566403</id><snippet>room.west()</snippet></ROW><ROW><id>10566403</id><snippet>Intro</snippet></ROW><ROW><id>10566403</id><snippet>Outside</snippet></ROW><ROW><id>10566458</id><snippet>def RealAppending(the_str):
    lock.acquire()
    try:
        the_file = open("test.txt", "a")
        try:
            the_file.write(the_str) # write
        finally:
            the_file.close()
    finally: # if an error occurs
        lock.release()
</snippet></ROW><ROW><id>10566458</id><snippet>def RealAppending(the_str):
    with lock:
        with open("test.txt", "a") as the_file:
            the_file.write(the_str) # write
</snippet></ROW><ROW><id>10566458</id><snippet># write.py
__all__ = ['AppendStr'] # put all functions in except the ones others shall not see
# so id you do from write import * nothing else will be imported but what is __all__
</snippet></ROW><ROW><id>10566474</id><snippet>import MySQLdb
import os
import datetime

con = MySQLdb.connect(host='localhost', user='root', passwd='password', db='test')
cur = con.cursor()

cur.execute("SHOW TABLES")
data = ""
tables = []
for table in cur.fetchall():
    tables.append(table[0])

for table in tables:
    data += "DROP TABLE IF EXISTS `" + str(table) + "`;"

    cur.execute("SHOW CREATE TABLE `" + str(table) + "`;")
    data += "\n" + str(cur.fetchone()[1]) + ";\n\n"

    cur.execute("SELECT * FROM `" + str(table) + "`;")
    for row in cur.fetchall():
        data += "INSERT INTO `" + str(table) + "` VALUES("
        first = True
        for field in row:
            if not first:
                data += ', '
            data += '"' + str(field) + '"'
            first = False


        data += ");\n"
    data += "\n\n"

now = datetime.datetime.now()
filename = str(os.getenv("HOME")) + "/backup_" + now.strftime("%Y-%m-%d_%H:%M") + ".sql"

FILE = open(filename,"w")
FILE.writelines(data)
FILE.close()
</snippet></ROW><ROW><id>10566577</id><snippet>open</snippet></ROW><ROW><id>10566614</id><snippet>do_something</snippet></ROW><ROW><id>10566625</id><snippet>from selenium import webdriver
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

binary = FirefoxBinary('path/to/binary')
profile = webdriver.FirefoxProfile()
profile.add_extension('path/to/xpi') #XPI needs to be on disk and not downloaded from AMO
profile.set_preference('general.useragent.local','&lt;enter your value')

driver = webdriver.Firefox(firefox_binary=binary, firefox_profile=profile)
# Carry on with what you want
</snippet></ROW><ROW><id>10566709</id><snippet>def set_way():
    my_set = set()
    my_set_add = my_set.add   # remember the method
    for ele in x:
        if ele not in my_set:
            my_set_add(ele)   # call the method directly
</snippet></ROW><ROW><id>10566709</id><snippet>dict time : 1.896939858077399
set time : 1.8587076107880456
</snippet></ROW><ROW><id>10566728</id><snippet>if event.type == K_RIGHT:
</snippet></ROW><ROW><id>10566728</id><snippet>if event.key == K_RIGHT:
</snippet></ROW><ROW><id>10566728</id><snippet>key_pressed = []
</snippet></ROW><ROW><id>10566728</id><snippet>key_pressed.append(event.key)
</snippet></ROW><ROW><id>10566728</id><snippet>key_pressed = [k for k in key_pressed if k != event.key]
</snippet></ROW><ROW><id>10566728</id><snippet>change=True</snippet></ROW><ROW><id>10566728</id><snippet>change=False</snippet></ROW><ROW><id>10566728</id><snippet>if len(key_pressed) &gt; 0:
    change = True
else:
    change = False
</snippet></ROW><ROW><id>10566758</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10566758</id><snippet>groups = itertools.groupby(input, key=operator.itemgetter(0))
</snippet></ROW><ROW><id>10566758</id><snippet>(key, group)</snippet></ROW><ROW><id>10566758</id><snippet>key</snippet></ROW><ROW><id>10566758</id><snippet>group</snippet></ROW><ROW><id>10566758</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>10566758</id><snippet>[]</snippet></ROW><ROW><id>10566758</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>10566758</id><snippet>def itemgetter_0(seq_or_mapping):
    return seq_or_mapping[0]
</snippet></ROW><ROW><id>10566758</id><snippet>output = [[key] + map(operator.itemgetter(1), group) for key, group in groups]
</snippet></ROW><ROW><id>10566758</id><snippet>key</snippet></ROW><ROW><id>10566758</id><snippet>[['1', 'a', 'b', 'c'], ['2', 'd', 'e'], ['3', 'a', 'd', 'e', 'f']]
</snippet></ROW><ROW><id>10566778</id><snippet>a</snippet></ROW><ROW><id>10566778</id><snippet>&gt;&gt;&gt; class Foo(object):
...    a = 1
...
&gt;&gt;&gt; Foo.a
1
</snippet></ROW><ROW><id>10566778</id><snippet>__init__</snippet></ROW><ROW><id>10566948</id><snippet>re.findall(r'^Chr([\d]+)_', 'Chr6_clust92082')[0]
</snippet></ROW><ROW><id>10566992</id><snippet>tee</snippet></ROW><ROW><id>10566992</id><snippet>import itertools

lst = range(10)
it = iter(lst)

while True:
    print it.next(), '&gt;&gt;',
    it, saved = itertools.tee(it)
    for subitem in it:
        print subitem,
    it = saved
    print
</snippet></ROW><ROW><id>10566992</id><snippet>import itertools

class fancy_it(object):
    stack = []

    def __init__(self, iterable=None):
        if not iterable:
            prev = fancy_it.stack[-1]
            prev.it, iterable = itertools.tee(prev.it)
        self.it = iter(iterable)

    def __iter__(self):
        fancy_it.stack.append(self)
        try:
            while True:
                yield self.it.next()
        except StopIteration:
            fancy_it.stack.pop()
            raise StopIteration


for x in fancy_it(range(10)):
    print x
    for y in fancy_it():
        print '**', y
        for z in fancy_it():
            print '****', z
</snippet></ROW><ROW><id>10567518</id><snippet>User</snippet></ROW><ROW><id>10567518</id><snippet>Group</snippet></ROW><ROW><id>10567518</id><snippet>if user.groups.filter(name='studio').exists():
</snippet></ROW><ROW><id>10567524</id><snippet>app</snippet></ROW><ROW><id>10567628</id><snippet>with open('file') as f:
    lines = f.readlines()
    lines = lines[-1:] + lines[2:-1]
    for line in lines:
        print line[0:11] + line[35:-1]
</snippet></ROW><ROW><id>10567628</id><snippet>lines[-1:] + lines[2:-1]</snippet></ROW><ROW><id>10567628</id><snippet>line[0:11] + line[35:-1]</snippet></ROW><ROW><id>10567628</id><snippet>with open('infile') as in:
    with open('outfile', 'w') as out:
        lines = in.readlines()
        ...
            print(line[0:6] + line[28:-1], file=out)
</snippet></ROW><ROW><id>10567628</id><snippet>with open('infile') as in:
    lines = in.readlines()
with open('outfile', 'w') as out:
    for line in lines:
        ....
        print(line[0:6] + line[28:-1], file=out)
</snippet></ROW><ROW><id>10567628</id><snippet>with</snippet></ROW><ROW><id>10567668</id><snippet>if b:</snippet></ROW><ROW><id>10567668</id><snippet>None</snippet></ROW><ROW><id>10567741</id><snippet>echo $data | gunzip</snippet></ROW><ROW><id>10567741</id><snippet>$data</snippet></ROW><ROW><id>10567741</id><snippet>data</snippet></ROW><ROW><id>10567741</id><snippet>$data</snippet></ROW><ROW><id>10567741</id><snippet>#!/bin/bash
gunzip | map_to_old_format.py
</snippet></ROW><ROW><id>10567741</id><snippet>cat data.gz | gunzip_and_map_to_old.sh
</snippet></ROW><ROW><id>10567786</id><snippet>query_string</snippet></ROW><ROW><id>10567786</id><snippet>request.query.bid</snippet></ROW><ROW><id>10567786</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>10567952</id><snippet>#!/usr/bin/env python

with open('f1') as  fd:
    f1 = [map(int,i.strip().split()) for i in fd]
with open('f2') as  fd:
    f2 = [map(float,i.strip().split()) for i in fd]

for n, f in enumerate(f2):
    if f1[n][0] == 1 and f1[n][1] == -2:
        print f[0], f[1], 8
    else:
        print f
</snippet></ROW><ROW><id>10568085</id><snippet>&lt;table&gt;
    {% for field in fields %}
        &lt;tr&gt;
            &lt;td&gt;{{ field.name }}&lt;/td&gt;
            &lt;td&gt;{{ field.value }}&lt;/td&gt;
        &lt;/tr&gt;
        {% if forloop.last %}
            The value of the last field is: {{ field.value }}
        {% endif %}
    {% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>10568089</id><snippet>phrase</snippet></ROW><ROW><id>10568089</id><snippet>def phrase(fruit):
    return "I like eating " + fruit + "s."

def say_fruit(fruit):
    print phrase(fruit)
</snippet></ROW><ROW><id>10568115</id><snippet>type</snippet></ROW><ROW><id>10568115</id><snippet>SyntaxError</snippet></ROW><ROW><id>10568141</id><snippet>class ManyToManyTagField(ManyToManyField):

    def formfield(self, **kwargs):
        defaults = {
            'form_class': TagField,
        }
        return super(ManyToManyTagField, self).formfield(**defaults)

    def save_form_data(self, instance, data):
        tags = []
        for tag_id in data:
            autocompletedTag = tag_id.find('___')
            if autocompletedTag &gt; 0:
                parts = tag_id.split('___')
                tags.append(parts[0])
            else:
                newTag = Tag(name=tag_id, category=TagCategory.objects.get(name='New'))
                newTag.save()
                tags.append(newTag.id)

        return super(ManyToManyTagField, self).save_form_data(instance, tags)
</snippet></ROW><ROW><id>10568141</id><snippet>save_form_data</snippet></ROW><ROW><id>10568141</id><snippet>class TagWidget(SelectMultiple):
    """
    Widget for Tag input fields.
    """
    queryset = []

    def render(self, name, value, attrs=None):
        final_attrs = self.build_attrs(attrs, name=name)
        final_attrs['class'] = 'tag-input'

        selectedTags = []
        if value:
            for tag_id in value:
                if isinstance(tag_id, (int, long)) or tag_id.isdigit():
                    tag_name = Tag.objects.get(pk=tag_id).name
                    selectedTags.append({ 'value': str(tag_id) + '___' + tag_name, 'label': tag_name })
                else:
                    autocompletedTag = tag_id.find('___')
                    if autocompletedTag &gt; 0:
                        parts = tag_id.split('___')
                        selectedTags.append({ 'value': parts[0] + '___' + parts[1], 'label': parts[1] })
                    else:
                        selectedTags.append({ 'value': tag_id, 'label': tag_id })

        allTags = []
        for tag in self.queryset:
            allTags.append({ 'value': str(tag.id) + '___' + str(tag.name), 'label': str(tag.name) });

        allTagsJson = simplejson.dumps(allTags)

        return render_to_string('form/tagwidget.html',
                                {'attrs': flatatt(final_attrs), 'selectedTags': selectedTags, 'allTags': allTagsJson})
</snippet></ROW><ROW><id>10568141</id><snippet>class TagField(ModelMultipleChoiceField):
    widget = TagWidget

    def __init__(self, queryset, *args, **kwargs):
        self.widget.queryset = queryset
        super(TagField, self).__init__(queryset, *args, **kwargs)

    def clean(self, value):
        if self.required and not value:
            raise ValidationError(self.error_messages['required'])
        elif not self.required and not value:
            return []
        if not isinstance(value, (list, tuple)):
            raise ValidationError(self.error_messages['list'])
        # Since this overrides the inherited ModelChoiceField.clean
        # we run custom validators here
        self.run_validators(value)
        return value
</snippet></ROW><ROW><id>10568141</id><snippet>{% autoescape off %}
&lt;ul{{ attrs }}&gt;
{% for tag in selectedTags %}
    &lt;li tagValue="{{ tag.value }}"&gt;{{ tag.label }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;
var autocompletionData = {{ allTags }};
&lt;/script&gt;
{% endautoescape %}
</snippet></ROW><ROW><id>10568175</id><snippet>Base</snippet></ROW><ROW><id>10568175</id><snippet>Derived</snippet></ROW><ROW><id>10568175</id><snippet>Derived</snippet></ROW><ROW><id>10568175</id><snippet>Base</snippet></ROW><ROW><id>10568175</id><snippet>shared_ptr</snippet></ROW><ROW><id>10568175</id><snippet>Base</snippet></ROW><ROW><id>10568175</id><snippet>register_ptr_to_python&lt; boost::shared_ptr&lt;Base&gt; &gt;()</snippet></ROW><ROW><id>10568175</id><snippet>Derived</snippet></ROW><ROW><id>10568175</id><snippet>shared_ptr</snippet></ROW><ROW><id>10568175</id><snippet>shared_ptr</snippet></ROW><ROW><id>10568198</id><snippet>sector</snippet></ROW><ROW><id>10568198</id><snippet>sector</snippet></ROW><ROW><id>10568198</id><snippet>sector</snippet></ROW><ROW><id>10568198</id><snippet>loop</snippet></ROW><ROW><id>10568198</id><snippet>for</snippet></ROW><ROW><id>10568198</id><snippet>root.xpath()</snippet></ROW><ROW><id>10568298</id><snippet>itertools</snippet></ROW><ROW><id>10568298</id><snippet>from itertools import permutations

def group(iterable, n=2):
    return zip(*([iter(iterable)] * n))

for each in permutations([1, 2, 3, 4, 5, 6]):
    print map(list, group(each))
</snippet></ROW><ROW><id>10568298</id><snippet>[[1, 2], [3, 4], [5, 6]]
[[1, 2], [3, 4], [6, 5]]
[[1, 2], [3, 5], [4, 6]]
[[1, 2], [3, 5], [6, 4]]
[[1, 2], [3, 6], [4, 5]]
[[1, 2], [3, 6], [5, 4]]
[[1, 2], [4, 3], [5, 6]]
[[1, 2], [4, 3], [6, 5]]
[[1, 2], [4, 5], [3, 6]]
...
</snippet></ROW><ROW><id>10568298</id><snippet>from itertools import combinations

def setpartition(iterable, n=2):
    iterable = list(iterable)
    partitions = combinations(combinations(iterable, r=n), r=len(iterable) / n)
    for partition in partitions:
        seen = set()
        for group in partition:
            if seen.intersection(group):
                break
            seen.update(group)
        else:
            yield partition

for each in setpartition([1, 2, 3, 4]):
    print each
print
for each in setpartition([1, 2, 3, 4, 5, 6]):
    print each
</snippet></ROW><ROW><id>10568298</id><snippet>((1, 2), (3, 4))
((1, 3), (2, 4))
((1, 4), (2, 3))

((1, 2), (3, 4), (5, 6))
((1, 2), (3, 5), (4, 6))
((1, 2), (3, 6), (4, 5))
((1, 3), (2, 4), (5, 6))
((1, 3), (2, 5), (4, 6))
((1, 3), (2, 6), (4, 5))
((1, 4), (2, 3), (5, 6))
((1, 4), (2, 5), (3, 6))
((1, 4), (2, 6), (3, 5))
((1, 5), (2, 3), (4, 6))
((1, 5), (2, 4), (3, 6))
((1, 5), (2, 6), (3, 4))
((1, 6), (2, 3), (4, 5))
((1, 6), (2, 4), (3, 5))
((1, 6), (2, 5), (3, 4))
</snippet></ROW><ROW><id>10568375</id><snippet>rec_history[0:3]</snippet></ROW><ROW><id>10568375</id><snippet>rec_history[0][:3]
</snippet></ROW><ROW><id>10568375</id><snippet>rec_history.append(list(visrec[0,:]))
</snippet></ROW><ROW><id>10568375</id><snippet>visrec</snippet></ROW><ROW><id>10568375</id><snippet>rec_history</snippet></ROW><ROW><id>10568627</id><snippet>coo_matrix</snippet></ROW><ROW><id>10568627</id><snippet>size = number_of_elements * number_of_basis_functions**2
</snippet></ROW><ROW><id>10568688</id><snippet>&gt;&gt;&gt; import zipfile as z
&gt;&gt;&gt; z1 = z.ZipFile('z1.zip', 'a')
&gt;&gt;&gt; z2 = z.ZipFile('z2.zip', 'r')
&gt;&gt;&gt; z1.namelist()
['a.xml', 'b.xml']
&gt;&gt;&gt; z2.namelist()
['c.xml', 'd.xml']
&gt;&gt;&gt; [z1.writestr(t[0], t[1].read()) for t in ((n, z2.open(n)) for n in z2.namelist())]
[None, None]
&gt;&gt;&gt; z1.namelist()
['a.xml', 'b.xml', 'c.xml', 'd.xml']
&gt;&gt;&gt; z1.close()
</snippet></ROW><ROW><id>10568688</id><snippet>for</snippet></ROW><ROW><id>10568722</id><snippet>from __future__ import print_function

try:
    raise Exception()
except Exception:
    import sys
    print(sys.exc_info()) # =&gt; (&lt;type 'exceptions.Exception'&gt;, Exception(), &lt;traceback object at 0x101c39830&gt;) 
    exc = sys.exc_info()[1]
    print(type(exc)) # =&gt; &lt;type 'exceptions.Exception'&gt;
    print([a for a in dir(exc) if not a.startswith('__')]) # =&gt; ['args', 'message']
</snippet></ROW><ROW><id>10568742</id><snippet>Getting wordlist set...</snippet></ROW><ROW><id>10568742</id><snippet>Trying to get wordlist...</snippet></ROW><ROW><id>10568742</id><snippet>database_get(num)
</snippet></ROW><ROW><id>10568742</id><snippet>database_get</snippet></ROW><ROW><id>10568857</id><snippet>@colander.deferred
def deferred_now(node, kw):
    now = kw['now']
    return now

@colander.deferred
def deferred_now_delta(node, kw):
    return kw['now'] - kw['delta']

class MySchema(MappingSchema):
     to = SchemaNode(Date(), missing=deferred_now)
     frm = SchemaNode(Date(), missing=deferred_now_delta)

def aview(request):
    schema = MySchema().bind(now=now(), delta=somedelta)
</snippet></ROW><ROW><id>10568880</id><snippet>def digits(n):
    if n &lt; 10:
        return [n]
    return digits(n/10) + [n%10]

digits(123)
&gt; [1, 2, 3]
</snippet></ROW><ROW><id>10568880</id><snippet>n</snippet></ROW><ROW><id>10568880</id><snippet>digits</snippet></ROW><ROW><id>10568880</id><snippet>digits(123)</snippet></ROW><ROW><id>10568880</id><snippet>digits(123) = digits(123/10) + [3]
digits(12)  = digits(12/10)  + [2]
digits(1)   = [1]
</snippet></ROW><ROW><id>10568880</id><snippet>[1]
[1] + [2]
[1, 2] + [3]
[1, 2, 3]
</snippet></ROW><ROW><id>10568880</id><snippet>def digits(n):
    def loop(i, acc):
        if i &lt; 10:
            return [i] + acc
        return loop(i/10, [i%10] + acc)
    return loop(n, [])
</snippet></ROW><ROW><id>10568905</id><snippet>import wx

ID_SUBMIT = wx.NewId()

...

    sizer = wx.BoxSizer(wx.VERTICAL)
    centeredLabel = wx.StaticText(self, -1, 'Centered Label')
    sizer.Add(centeredLabel, flag=wx.ALIGN_CENTER_HORIZONTAL)

    mlTextCtrl = wx.TextCtrl(self, style = wx.TE_MULTILINE)
    sizer.Add(mlTextCtrl, flag=wx.EXPAND)

    submitButton = wx.Button(self, ID_SUBMIT,'Submit')
    sizer.Add(submitButton, flag=wx.ALIGN_RIGHT)

...
</snippet></ROW><ROW><id>10568955</id><snippet>django.core.management</snippet></ROW><ROW><id>10568955</id><snippet>args</snippet></ROW><ROW><id>10568955</id><snippet>help</snippet></ROW><ROW><id>10568955</id><snippet>firstname.lastname</snippet></ROW><ROW><id>10568955</id><snippet>firstname</snippet></ROW><ROW><id>10568955</id><snippet>def handle(self, *args, **options):
    for arg in args:
        try:
            first_name, last_name = arg.split('.')
        except ValueError:
            first_name, last_name = arg, None

        info = DEF(first_name, last_name)
</snippet></ROW><ROW><id>10568955</id><snippet>$ python manage.py yourcommand -v=3 john.doe bill patrick.bateman
</snippet></ROW><ROW><id>10569236</id><snippet>import os

from fsevents import Observer, Stream


def callback(file_event):
    print file_event.name # the path of the modified file


def main():
    observer = Observer()
    observe_path = os.getcwd() # just for this example
    stream = Stream(callback, observe_path, file_events=True)
    observer.start()
    observer.schedule(stream)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10569236</id><snippet>callback</snippet></ROW><ROW><id>10569236</id><snippet>file_event.mask</snippet></ROW><ROW><id>10569236</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>10569397</id><snippet>list('cat')</snippet></ROW><ROW><id>10569555</id><snippet>table = truth(variables = 3, expression = lambda x: (x[0] and x[1]))
</snippet></ROW><ROW><id>10569555</id><snippet>def expression(x):
    return x[0] and x[1]
table = truth(variables = 3, expression = expression)
</snippet></ROW><ROW><id>10569687</id><snippet>key, value</snippet></ROW><ROW><id>10569687</id><snippet>def extract(dict_in, dict_out):
    for key, value in dict_in.iteritems():
        if isinstance(value, dict): # If value itself is dictionary
            extract(value, dict_out)
        elif isinstance(value, unicode):
            # Write to dict_out
            dict_out[key] = value
    return dict_out
</snippet></ROW><ROW><id>10569688</id><snippet>factories = [ ]
for i in range(0, NUM_TABLES):
    factory = Factory()
    factory.protocol = Socket()
    factory.clicents = []
    factories.append(factory)
    reactor.listenTCP(1025 + i, factory)
    reactor.run()
</snippet></ROW><ROW><id>10569688</id><snippet>Table</snippet></ROW><ROW><id>10569688</id><snippet>Table</snippet></ROW><ROW><id>10570159</id><snippet>split()</snippet></ROW><ROW><id>10570159</id><snippet>replace("\n","")</snippet></ROW><ROW><id>10570433</id><snippet>import unittest

class TestNightlife(unittest.TestCase):
    _my_param = 0

    def test_a(self):
        print 'object id: %d' % id(self)
        print 'test A = %d' % self._my_param
        self._my_param = 1

    def test_b(self):
        print 'object id: %d' % id(self)
        print 'test B = %d' % self._my_param
        self._my_param = 2

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>10570433</id><snippet>object id: 10969360
test A = 0
.object id: 10969424
test B = 0
.
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>10570571</id><snippet>    sorted(list_for_sorting, key=dictionary_you_wrote.__getitem__)
</snippet></ROW><ROW><id>10570571</id><snippet>    sorted_list = sorted(unsorted_list, key = lambda k: your_dictionary[k])
</snippet></ROW><ROW><id>10570571</id><snippet>    sorted(unsorted_list, key = lambda k: your_dictionary[k] if k in your_dictionary.keys() else k)
</snippet></ROW><ROW><id>10570576</id><snippet>import csv
with open ("lol.txt",'rb') as f:
    csv_r = csv.reader (f)
    entries = [ (name, float(p1), float(p2)) for name, p1, p2 in csv_r]

for index, entry in enumerate(entries):
    print ("%2i. %-10s %5.2f %5.2f" % (index, entry[0], entry[1], entry[2]))

choice = int(raw_input("Choose a number: "))

print (entries[choice])
</snippet></ROW><ROW><id>10570576</id><snippet> 0. herp       123.00 456.00
 1. derp       321.00 654.00
 2. hurr       213.00 546.00
Choose a number: 0
('herp', 123.0, 456.0)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10570810</id><snippet>GalleryAdmin</snippet></ROW><ROW><id>10570810</id><snippet>save()</snippet></ROW><ROW><id>10570810</id><snippet>Gallery</snippet></ROW><ROW><id>10570810</id><snippet>id</snippet></ROW><ROW><id>10570810</id><snippet>def save_model(self, request, Gallery, form, change):
    Gallery.save()
    if not change:
        Gallery.title = str(Gallery.id)
</snippet></ROW><ROW><id>10570868</id><snippet>__future__ import absolute_import</snippet></ROW><ROW><id>10570910</id><snippet>1.0/N</snippet></ROW><ROW><id>10570910</id><snippet>N</snippet></ROW><ROW><id>10570910</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.pow(27, 1/3)
1.0
&gt;&gt;&gt; math.pow(27, 1.0/3)
3.0
&gt;&gt;&gt; math.pow(27, 1/3.0)
3.0
</snippet></ROW><ROW><id>10570910</id><snippet>from __future__ import division</snippet></ROW><ROW><id>10570910</id><snippet>/</snippet></ROW><ROW><id>10570910</id><snippet>//</snippet></ROW><ROW><id>10570910</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.pow(27, 1/3)
3.0
</snippet></ROW><ROW><id>10570910</id><snippet>math.pow(x, y)</snippet></ROW><ROW><id>10570910</id><snippet>x ** y</snippet></ROW><ROW><id>10570910</id><snippet>&gt;&gt;&gt; 27**(1.0/3)
3.0
</snippet></ROW><ROW><id>10570951</id><snippet>&gt;&gt;&gt; re.sub('(?i);','.',x)
'aaaaaaaa.aa.aaa.aaa.aaaaaaaaaa.'
</snippet></ROW><ROW><id>10570951</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>10570951</id><snippet>&gt;&gt;&gt; re.sub(';','.',x, flags=re.IGNORECASE)
'aaaaaaaa.aa.aaa.aaa.aaaaaaaaaa.'

&gt;&gt;&gt; re.IGNORECASE
2
</snippet></ROW><ROW><id>10571067</id><snippet>import urllib2
req = urllib2.urlopen("http://en.wikipedia.org/w/api.php?action=parse&amp;page=China&amp;format=json&amp;prop=text")
content = req.read()
# content in json - use json or simplejson to get relevant sections.
</snippet></ROW><ROW><id>10571403</id><snippet>with open('aaa.txt') as infp:
    data = infp.read()

print data # display data read 
</snippet></ROW><ROW><id>10571403</id><snippet>with</snippet></ROW><ROW><id>10571464</id><snippet>&gt;&gt;&gt; M = NP.empty((5, 5), dtype=NP.object)     # a 2D NumPy array
&gt;&gt;&gt; M
  array([[None, None, None, None, None],
         [None, None, None, None, None],
         [None, None, None, None, None],
         [None, None, None, None, None],
         [None, None, None, None, None]], dtype=object)
</snippet></ROW><ROW><id>10571464</id><snippet>&gt;&gt;&gt; M[2,2] = NP.array([4, 3, 5])
&gt;&gt;&gt; M
  array([[None, None, None, None, None],
         [None, None, None, None, None],
         [None, None, [4 3 5], None, None],
         [None, None, None, None, None],
         [None, None, None, None, None]], dtype=object)

&gt;&gt;&gt; M[2,2]
   array([4, 3, 5])
</snippet></ROW><ROW><id>10571547</id><snippet>x = 10000
y = 10
print([(item, item+(x//y-1)) for item in range(1, x, x//y)])
</snippet></ROW><ROW><id>10571547</id><snippet>[(1, 1000), (1001, 2000), (2001, 3000), (3001, 4000), (4001, 5000), (5001, 6000), (6001, 7000), (7001, 8000), (8001, 9000), (9001, 10000)]
</snippet></ROW><ROW><id>10571547</id><snippet>range()</snippet></ROW><ROW><id>10571547</id><snippet>range()</snippet></ROW><ROW><id>10571547</id><snippet>1</snippet></ROW><ROW><id>10571547</id><snippet>x</snippet></ROW><ROW><id>10571547</id><snippet>x</snippet></ROW><ROW><id>10571547</id><snippet>y</snippet></ROW><ROW><id>10571547</id><snippet>1, 1001, 2001, ..., 9001</snippet></ROW><ROW><id>10571547</id><snippet>(x//y-1)</snippet></ROW><ROW><id>10571547</id><snippet>999</snippet></ROW><ROW><id>10571547</id><snippet>&gt;&gt;&gt; for number, (start, end) in enumerate((item, item+(x//y-1)) for item in range(1, x, x//y)): 
...     print(number, "starts at", start, "and ends at", end)
... 
0 starts at 1 and ends at 1000
1 starts at 1001 and ends at 2000
2 starts at 2001 and ends at 3000
3 starts at 3001 and ends at 4000
4 starts at 4001 and ends at 5000
5 starts at 5001 and ends at 6000
6 starts at 6001 and ends at 7000
7 starts at 7001 and ends at 8000
8 starts at 8001 and ends at 9000
9 starts at 9001 and ends at 10000
</snippet></ROW><ROW><id>10571827</id><snippet>zope.formlib</snippet></ROW><ROW><id>10571827</id><snippet>save</snippet></ROW><ROW><id>10571827</id><snippet>form.action.save</snippet></ROW><ROW><id>10571827</id><snippet>.action.</snippet></ROW><ROW><id>10571839</id><snippet>manage.py</snippet></ROW><ROW><id>10571839</id><snippet>manage.py</snippet></ROW><ROW><id>10571839</id><snippet>python manage.py scrapy crawl domain.com -o scraped_data.json -t json
</snippet></ROW><ROW><id>10571839</id><snippet>python manage.py scrapy crawl domain.com - o scraped_data.json - t json
</snippet></ROW><ROW><id>10571839</id><snippet>def handle(self, *args, **options):
    arguments = self._argv[1:]
    for arg in arguments:
        if arg in ('-', '--'):
            i = arguments.index(arg)
            new_arg = ''.join((arguments[i], arguments[i+1]))
            del arguments[i:i+2]
            arguments.insert(i, new_arg)

    from scrapy.cmdline import execute
    execute(arguments)
</snippet></ROW><ROW><id>10571839</id><snippet># -*- coding: utf-8 -*- 
# myapp/management/commands/scrapy.py 

from __future__ import absolute_import
from django.core.management.base import BaseCommand

class Command(BaseCommand):

    def run_from_argv(self, argv):
        self._argv = argv
        self.execute()

    def handle(self, *args, **options):
        from scrapy.cmdline import execute
        execute(self._argv[1:])
</snippet></ROW><ROW><id>10572085</id><snippet>def write(self, text):
    if text!="\n":
       self.stdout.write('###' + text)
</snippet></ROW><ROW><id>10572543</id><snippet>class SettingsForm(forms.ModelForm):
    class Meta:
        model = Settings

    def __init__(self, *args, **kwargs):
        super(SettingsForm, self).__init__(*args, **kwargs)

    def clean(self):
        cleaned_data = super(SettingsForm, self).clean()
        field_1 = cleaned_data.get('field_1','')
        if not field_1:   # field_2 is disabled 
            cleaned_data['field_2'] = self.instance.field_2 # so get from db
        self.cleaned_data = cleaned_data
        return self.cleaned_data
</snippet></ROW><ROW><id>10572628</id><snippet>from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import orm
import sqlalchemy as db
Base = declarative_base()

favorite_series = db.Table('favorite_series', Base.metadata,
    db.Column('user_id', db.Integer, db.ForeignKey('User.id')),
    db.Column('series_id', db.Integer, db.ForeignKey('Series.id'))
)
class Episode(Base):
    __tablename__ = 'Episode'
    id = db.Column(db.Integer, primary_key=True)
    season = db.Column(db.Integer)
    episode_num = db.Column(db.Integer)
    series_id = db.Column(db.Integer, db.ForeignKey('Series.id'))

    def __init__(self, season, episode_num, series_id):
        self.season = season
        self.episode_num = episode_num
        self.series_id = series_id

    def __repr__(self):
        return self.series.title + \
               ' S' + str(self.season) + \
               'E' + str(self.episode_num)

class Series(Base):
    __tablename__ = 'Series'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String)
    episodes = orm.relationship('Episode', backref='series')

    def __init__(self, title):
        self.title = title

    def __repr__(self):
        return self.title

class User(Base):
    __tablename__ = 'User'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String)
    favorite_series = orm.relationship('Series', 
        secondary=favorite_series, backref='users')

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return self.name
</snippet></ROW><ROW><id>10572628</id><snippet>engine = db.create_engine('sqlite:///:memory:')
session = orm.sessionmaker(bind=engine)()
Base.metadata.create_all(engine)

lt = User('Ludovic Tiako')
the_wire = Series('The Wire')
friends = Series('Friends')
session.add_all([lt, the_wire, friends])
session.commit() # need to commit here to generate the id fields

tw_s01e01 = Episode(1,1,the_wire.id)
tw_s01e02 = Episode(1,2,the_wire.id)
f_s01e01 = Episode(1,1,friends.id)
f_s01e02 = Episode(1,2,friends.id)
f_s01e03 = Episode(1,3,friends.id)

session.add_all([tw_s01e01, tw_s01e02, 
                f_s01e01, f_s01e02, f_s01e03])
session.commit()


the_wire.episodes # &gt; [The Wire S1E1, The Wire S1E2]
friends.episodes # &gt; [Friends S1E1, Friends S1E2, Friends S1E3]
</snippet></ROW><ROW><id>10572628</id><snippet>lt.favorite_series.append(the_wire)
session.commit()
lt.favorite_series # &gt; [The Wire]
[s.episodes for s in lt.favorite_series] # &gt;&gt; [[The Wire S1E1, The Wire S1E2]]
</snippet></ROW><ROW><id>10572657</id><snippet>pounds = 180
kilos = pounds * 0.45359237
print "%r pounds equals %r kilos." % (pounds, kilos)
</snippet></ROW><ROW><id>10572749</id><snippet>Map</snippet></ROW><ROW><id>10572749</id><snippet>class Map:
    def __init__(self):
        self.robots = []

    def add_robot(self, robot):
        self.robots.add(robot)

    def is_occupied(self, x, y):
        for r in self.robots:
            if r.xpos == x and r.ypos == y:
                return True
        return False
</snippet></ROW><ROW><id>10572749</id><snippet>add_robot</snippet></ROW><ROW><id>10572749</id><snippet>move</snippet></ROW><ROW><id>10572833</id><snippet>extras_require</snippet></ROW><ROW><id>10572833</id><snippet>setup(
    name="django-cherrypy",
    ...
    extras_require = {
        'mysterious_feature_x':  ["newrelic"]
    }
)
</snippet></ROW><ROW><id>10573237</id><snippet>import matplotlib.pyplot
from mpl_toolkits.mplot3d import Axes3D

dates       = [20020514, 20020515, 20020516, 20020517, 20020520]
highs       = [1135, 1158, 1152, 1158, 1163]
lows        = [1257, 1253, 1259, 1264, 1252]
upperLimits = [1125.0, 1125.0, 1093.75, 1125.0, 1125.0]
lowerLimits = [1250.0, 1250.0, 1156.25, 1250.0, 1250.0]

zaxisvalues0= [0, 0, 0, 0, 0]
zaxisvalues1= [1, 1, 1, 1, 1]
zaxisvalues2= [2, 2, 2, 2, 2]

fig = matplotlib.pyplot.figure()
ax  = fig.add_subplot(111, projection = '3d')

ax.plot(dates, zaxisvalues1, lowerLimits, color = 'b')
ax.plot(dates, zaxisvalues2, upperLimits, color = 'r')

for i,j,k,h in zip(dates,zaxisvalues0,lows,highs):
    ax.plot([i,i],[j,j],[k,h],color = 'g')

ax.scatter(dates, zaxisvalues0, highs, color = 'g', marker = "o")
ax.scatter(dates, zaxisvalues0, lows, color = 'y', marker = "^")

matplotlib.pyplot.show()
</snippet></ROW><ROW><id>10573333</id><snippet>main</snippet></ROW><ROW><id>10573333</id><snippet>main(int argc, char *argv[])
</snippet></ROW><ROW><id>10573333</id><snippet>argc</snippet></ROW><ROW><id>10573333</id><snippet>argv</snippet></ROW><ROW><id>10573333</id><snippet>main(int argc, char *argv[])
{
 cout&lt;&lt;argv[1];
 return 0;
}
</snippet></ROW><ROW><id>10573494</id><snippet>Robot</snippet></ROW><ROW><id>10573494</id><snippet>Map</snippet></ROW><ROW><id>10573494</id><snippet>class Animal:

    def eat(self, food):
        print "mmm"


class Human(Animal):

    def speak(self, words):
        print words
</snippet></ROW><ROW><id>10573494</id><snippet>Robot</snippet></ROW><ROW><id>10573494</id><snippet>self.robot</snippet></ROW><ROW><id>10573494</id><snippet>self.robots</snippet></ROW><ROW><id>10573521</id><snippet>forecast = parsed_json['hourly_forecast'][-1]['temp']['english'] 
</snippet></ROW><ROW><id>10573523</id><snippet>slice()</snippet></ROW><ROW><id>10573523</id><snippet>a = range(10)
s = slice(2,4)
print a[s]
</snippet></ROW><ROW><id>10573523</id><snippet>a[2:4]</snippet></ROW><ROW><id>10573732</id><snippet> def walk(self,_root='/'):
     result=[]
     for child in self.children:
         path="%s%s/"%(_root,child.name) if child.children else "%s%s"%(_root,child.name)
         result.append((path,child))
         result.extend(child.walk(_root=path))

     return result  #result if _root != '/' else zip(*result)
</snippet></ROW><ROW><id>10573740</id><snippet>self.foo</snippet></ROW><ROW><id>10573740</id><snippet>global</snippet></ROW><ROW><id>10573740</id><snippet>from nose.tools import *

foo = None

def setup():
    global foo  # Ugly.
    foo = 10

def teardown():
    global foo  # Ugly.
    foo = None

@with_setup(setup, teardown)
def test_foo_value():
    assert_equal(foo, 10)
</snippet></ROW><ROW><id>10573740</id><snippet>from nose.tools import *

_globals = {'foo': None}

def setup():
    _globals['foo'] = 10

def teardown():
    _globals['foo'] = None

@with_setup(setup, teardown)
def test_foo_value():
    foo = _globals['foo']
    assert_equal(foo, 10)
</snippet></ROW><ROW><id>10573769</id><snippet>query.filter('username =', username_).get()</snippet></ROW><ROW><id>10573769</id><snippet>query.filter('username =', username_).fetch()</snippet></ROW><ROW><id>10573827</id><snippet>admin.py</snippet></ROW><ROW><id>10573827</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>10573827</id><snippet>'djcelery'</snippet></ROW><ROW><id>10573827</id><snippet>from djcelery.models import (TaskState, WorkerState,
                 PeriodicTask, IntervalSchedule, CrontabSchedule)

admin.site.unregister(TaskState)
admin.site.unregister(WorkerState)
admin.site.unregister(IntervalSchedule)
admin.site.unregister(CrontabSchedule)
admin.site.unregister(PeriodicTask)
</snippet></ROW><ROW><id>10574029</id><snippet>[Gmail]/All Mail</snippet></ROW><ROW><id>10574029</id><snippet>[Google Mail]/All Mail</snippet></ROW><ROW><id>10574198</id><snippet>import csv

lol = [[1,2,3],[4,5,6],[7,8,9]]
item_length = len(lol[0])

with open('test.csv', 'wb') as test_file:
  file_writer = csv.writer(test_file)
  for i in range(item_length):
    file_writer.writerow([x[i] for x in lol])
</snippet></ROW><ROW><id>10574198</id><snippet>1,4,7
2,5,8
3,6,9
</snippet></ROW><ROW><id>10574292</id><snippet>def wrap(f):
    def wrapped(*args, **kwargs):
        print "f was called"
        return f(*args, **kwargs)

    return wrapped

@wrap
def foo(x):
    return foo(x - 1) if x &gt; 0 else 1
</snippet></ROW><ROW><id>10574292</id><snippet>wrap</snippet></ROW><ROW><id>10574292</id><snippet>foo</snippet></ROW><ROW><id>10574461</id><snippet>a,x,items,-date</snippet></ROW><ROW><id>10574461</id><snippet>a,y,items,-date</snippet></ROW><ROW><id>10574461</id><snippet>a,z,items,-date</snippet></ROW><ROW><id>10574461</id><snippet>items</snippet></ROW><ROW><id>10574517</id><snippet>class TreeNode:
    def __init__(self,parent,children,overview_text,direction_text):
        #... set the variables ...
        # question_text is a string

    def print_question(self):

        print overview_text
        for child in children:
            print direction_text

    # add some accessor methods
    def add_child(self,child): 
        ...
</snippet></ROW><ROW><id>10574517</id><snippet>class NPC:
     def __init__(self,dialogue):
         #... set the variables ...
         self.current_question = None

     def converse(self):
         #.... do some stuff....
         self.current_question = users_choice;
</snippet></ROW><ROW><id>10574723</id><snippet>SubjectPublicKeyInfo</snippet></ROW><ROW><id>10574723</id><snippet>RSAPublicKey</snippet></ROW><ROW><id>10574723</id><snippet>from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

key64 = 'MIGJAoGBAJNrHWRFgWLqgzSmLBq2G89exgi/Jk1NWhbFB9gHc9MLORmP3BOCJS9k\
onzT/+Dk1hdZf00JGgZeuJGoXK9PX3CIKQKRQRHpi5e1vmOCrmHN5VMOxGO4d+znJDEbNHOD\
ZR4HzsSdpQ9SGMSx7raJJedEIbr0IP6DgnWgiA7R1mUdAgMBAAE='

keyDER = b64decode(key64)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct( (seq[0], seq[1]) )
</snippet></ROW><ROW><id>10574830</id><snippet>" ".join("--%s=%s" % item for item in args.iteritems())
</snippet></ROW><ROW><id>10574830</id><snippet>iteritems</snippet></ROW><ROW><id>10574830</id><snippet>items</snippet></ROW><ROW><id>10575189</id><snippet>for</snippet></ROW><ROW><id>10575189</id><snippet>  for kw in kw_1:
            kw_list_1.append(kw_1)
</snippet></ROW><ROW><id>10575189</id><snippet>kw_list_1.append(kw_1)</snippet></ROW><ROW><id>10575748</id><snippet>if resource.rstrip('0123456789') in resources:
    if resource != resource.rstrip('0123456789'):
        print 'ok'
    else:
        print 'banned'
else:
    raise NotImplementedError()  # replace with own code
</snippet></ROW><ROW><id>10575762</id><snippet>takeuntil()</snippet></ROW><ROW><id>10575762</id><snippet>itertools.takewhile()</snippet></ROW><ROW><id>10575762</id><snippet>def takeuntil(iterable, stop):
    for x in iterable:
        yield x
        if x[1] == stop:
            break

with open("SA1.WRD") as unsplit_words, open("SA1.PHN") as unsplit_sounds:
    sounds = (line.split() for line in unsplit_sounds)
    words = (line.split() for line in unsplit_words)
    output = [
        (word, " ".join(sound for _, _, sound in takeuntil(sounds, stop)))
        for start, stop, word in words
    ]

print(output)
</snippet></ROW><ROW><id>10575762</id><snippet>[('she', 'sh iy'), ('had', 'hv ae dcl d')]
</snippet></ROW><ROW><id>10575762</id><snippet>with</snippet></ROW><ROW><id>10575762</id><snippet>open()</snippet></ROW><ROW><id>10575762</id><snippet>with</snippet></ROW><ROW><id>10575762</id><snippet>readlines()</snippet></ROW><ROW><id>10575762</id><snippet>sounds</snippet></ROW><ROW><id>10575762</id><snippet>str.join()</snippet></ROW><ROW><id>10575762</id><snippet>with open("SA1.WRD") as words, open("SA1.PHN") as sounds:
    output = []
    current = []
    for line in words:
        start, stop, word = line.split()
        for sound_line in sounds:
            sound_start, sound_stop, sound = sound_line.split()
            current.append(sound)
            if sound_stop == stop:
                break
        output.append((word, " ".join(current)))
        current = []

print(output)
</snippet></ROW><ROW><id>10575796</id><snippet>instance</snippet></ROW><ROW><id>10575796</id><snippet>form = UserProfileEdit(instance=u)
</snippet></ROW><ROW><id>10575845</id><snippet>get_last_child_body</snippet></ROW><ROW><id>10575845</id><snippet>Message</snippet></ROW><ROW><id>10575888</id><snippet>if (myFile[-4:] == ".asm"):
    newFile = myFile[:4]+".hack"
</snippet></ROW><ROW><id>10575888</id><snippet>if (myFile[-4:] == ".asm"):
    newFile = myFile[:-4]+".hack"
</snippet></ROW><ROW><id>10575888</id><snippet>-4</snippet></ROW><ROW><id>10575888</id><snippet>4</snippet></ROW><ROW><id>10575888</id><snippet>/Use.hack</snippet></ROW><ROW><id>10575888</id><snippet>/Use</snippet></ROW><ROW><id>10575888</id><snippet>.hack</snippet></ROW><ROW><id>10575936</id><snippet>"example.h"</snippet></ROW><ROW><id>10575936</id><snippet>namespace Geom</snippet></ROW><ROW><id>10575936</id><snippet>Geom</snippet></ROW><ROW><id>10575936</id><snippet>namespace</snippet></ROW><ROW><id>10575936</id><snippet>{</snippet></ROW><ROW><id>10575936</id><snippet>}</snippet></ROW><ROW><id>10575936</id><snippet>tu = index.parse(sys.argv[1], args=['-x', 'c++'])
</snippet></ROW><ROW><id>10575940</id><snippet>GCA</snippet></ROW><ROW><id>10575940</id><snippet>import Image, ImageDraw, ImageStat

def gcr(im, percentage):
    '''basic "Gray Component Replacement" function. Returns a CMYK image with 
       percentage gray component removed from the CMY channels and put in the
       K channel, ie. for percentage=100, (41, 100, 255, 0) &gt;&gt; (0, 59, 214, 41)'''
    cmyk_im = im.convert('CMYK')
    if not percentage:
        return cmyk_im
    cmyk_im = cmyk_im.split()
    cmyk = []
    for i in xrange(4):
        cmyk.append(cmyk_im[i].load())
    for x in xrange(im.size[0]):
        for y in xrange(im.size[1]):
            gray = min(cmyk[0][x,y], cmyk[1][x,y], cmyk[2][x,y]) * percentage / 100
            for i in xrange(3):
                cmyk[i][x,y] = cmyk[i][x,y] - gray
            cmyk[3][x,y] = gray
    return Image.merge('CMYK', cmyk_im)

def halftone(im, cmyk, sample, scale):
    '''Returns list of half-tone images for cmyk image. sample (pixels), 
       determines the sample box size from the original image. The maximum 
       output dot diameter is given by sample * scale (which is also the number 
       of possible dot sizes). So sample=1 will presevere the original image 
       resolution, but scale must be &gt;1 to allow variation in dot size.'''
    cmyk = cmyk.split()
    dots = []
    angle = 0
    for channel in cmyk:
        channel = channel.rotate(angle, expand=1)
        size = channel.size[0]*scale, channel.size[1]*scale
        half_tone = Image.new('L', size)
        draw = ImageDraw.Draw(half_tone)
        for x in xrange(0, channel.size[0], sample):
            for y in xrange(0, channel.size[1], sample):
                box = channel.crop((x, y, x + sample, y + sample))
                stat = ImageStat.Stat(box)
                diameter = (stat.mean[0] / 255)**0.5
                edge = 0.5*(1-diameter)
                x_pos, y_pos = (x+edge)*scale, (y+edge)*scale
                box_edge = sample*diameter*scale
                draw.ellipse((x_pos, y_pos, x_pos + box_edge, y_pos + box_edge), fill=255)
        half_tone = half_tone.rotate(-angle, expand=1)
        width_half, height_half = half_tone.size
        xx=(width_half-im.size[0]*scale) / 2
        yy=(height_half-im.size[1]*scale) / 2
        half_tone = half_tone.crop((xx, yy, xx + im.size[0]*scale, yy + im.size[1]*scale))
        dots.append(half_tone)
        angle += 15
    return dots

im = Image.open("1_tree.jpg")

cmyk = gcr(im, 0)
dots = halftone(im, cmyk, 10, 1)
im.show()
new = Image.merge('CMYK', dots)
new.show()
</snippet></ROW><ROW><id>10575940</id><snippet>sample=1</snippet></ROW><ROW><id>10575940</id><snippet>scale</snippet></ROW><ROW><id>10575940</id><snippet>RGB</snippet></ROW><ROW><id>10575940</id><snippet>CMYK</snippet></ROW><ROW><id>10575940</id><snippet>K</snippet></ROW><ROW><id>10575940</id><snippet>K</snippet></ROW><ROW><id>10575940</id><snippet>CMY</snippet></ROW><ROW><id>10575940</id><snippet>GCA</snippet></ROW><ROW><id>10575940</id><snippet>K</snippet></ROW><ROW><id>10575940</id><snippet>CMY</snippet></ROW><ROW><id>10575940</id><snippet>letter F</snippet></ROW><ROW><id>10575940</id><snippet>sample=1</snippet></ROW><ROW><id>10575940</id><snippet>scale=8</snippet></ROW><ROW><id>10575940</id><snippet>CMYK</snippet></ROW><ROW><id>10575940</id><snippet>percentage=0</snippet></ROW><ROW><id>10575940</id><snippet>K</snippet></ROW><ROW><id>10575940</id><snippet>CMYK</snippet></ROW><ROW><id>10575940</id><snippet>percentage=100</snippet></ROW><ROW><id>10575940</id><snippet>K</snippet></ROW><ROW><id>10575958</id><snippet>field1:value1 word1 word2</snippet></ROW><ROW><id>10575958</id><snippet>field1 &gt; 10</snippet></ROW><ROW><id>10576001</id><snippet>HttpResponse.__bases__ += (FullLoggingHttpResponse,)
</snippet></ROW><ROW><id>10576034</id><snippet>fin = open("hi.bmp", "rb")
out = open("values.txt","rw")
value = struct.unpack('i', fin.read(4))[0]
out.write("%d\n" % value) # just loop over the 2 last lines
out.close()
fin.close()
</snippet></ROW><ROW><id>10576657</id><snippet>variable1</snippet></ROW><ROW><id>10576657</id><snippet>values = [
    [(111, 222), (111, 333), (111, 444)],
    [(555, 333), (555, 444), (555, 777)],
    [(123, 444), (123, 888), (123, 999)]
]
</snippet></ROW><ROW><id>10576657</id><snippet>&gt;&gt;&gt; [[item[1] for item in sublist] for sublist in values]
[[222, 333, 444], [333, 444, 777], [444, 888, 999]]
</snippet></ROW><ROW><id>10576657</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>10576657</id><snippet>&gt;&gt;&gt; for values, more_values in itertools.combinations(new_values, 2):
...     set(values).intersection(more_values)
... 
{444, 333}
{444}
{444}
</snippet></ROW><ROW><id>10576657</id><snippet>import itertools

values = [
    [(111, 222), (111, 333), (111, 444)],
    [(555, 333), (555, 444), (555, 777)],
    [(123, 444), (123, 888), (123, 999)]
]

sets_of_first_items = ({item[1] for item in sublist} for sublist in values)
for values, more_values in itertools.combinations(sets_of_first_items, 2):
    print(values.intersection(more_values))
</snippet></ROW><ROW><id>10576657</id><snippet>{444, 333}
{444}
{444}
</snippet></ROW><ROW><id>10576657</id><snippet>enumerate()</snippet></ROW><ROW><id>10576657</id><snippet>sets_of_first_items = ({item[1] for item in sublist} for sublist in values)
for (first_number, first_values), (second_number, second_values) in itertools.combinations(enumerate(sets_of_first_items), 2):
    print("Intersection of {0} and {1}: {2}".format(first_number, second_number, first_values.intersection(second_values)))
</snippet></ROW><ROW><id>10576657</id><snippet>Intersection of 0 and 1: {444, 333}
Intersection of 0 and 2: {444}
Intersection of 1 and 2: {444}
</snippet></ROW><ROW><id>10576657</id><snippet>import itertools

values = {
    "111": {222, 333, 444},
    "555": {333, 444, 777},
    "123": {444, 888, 999}
}

for (first_user, first_values), (second_user, second_values) in itertools.combinations(values.items(), 2):
    print("Intersection of {0} and {1}: {2}".format(first_user, second_user, first_values.intersection(second_values)))
</snippet></ROW><ROW><id>10576657</id><snippet>Intersection of 555 and 123: {444}
Intersection of 555 and 111: {444, 333}
Intersection of 123 and 111: {444}
</snippet></ROW><ROW><id>10576716</id><snippet>POST</snippet></ROW><ROW><id>10576716</id><snippet>http://upload.bayimg.com/upload</snippet></ROW><ROW><id>10576729</id><snippet>I/O operation on closed file.</snippet></ROW><ROW><id>10576729</id><snippet>sales_file.close()
</snippet></ROW><ROW><id>10576729</id><snippet>for</snippet></ROW><ROW><id>10576729</id><snippet>for count in range(1, num_days + 1):
   sales = float(input('Enter the sales for day #' + str(count) + ': '))
   sales_file.write(str(sales) + '\n')
   print('Data written to sales.txt.')

sales_file.close()   # close file once when done
</snippet></ROW><ROW><id>10576729</id><snippet>with</snippet></ROW><ROW><id>10576729</id><snippet>with open('sales.txt', 'w') as sales_file:
   for count in range(1, num_days + 1)
      # rest of the code
      # but *no* close statement needed.
</snippet></ROW><ROW><id>10576739</id><snippet>def ret(self, result, request):
    request.write(result)
    request.finish()
</snippet></ROW><ROW><id>10576788</id><snippet>class TeeFiles(object):
    def __init__(self, file):
        self.sio = StringIO()
        self.file = file

    def write(self, txt):
        self.sio.write(txt)
        self.file.write(txt)

sys.stderr = TeeFiles(sys.stderr)

# do stuff

mymodel.errors = sys.stderr.sio.getvalue()
mymodel.save()
sys.stderr = sys.stderr.file
</snippet></ROW><ROW><id>10576788</id><snippet>closed</snippet></ROW><ROW><id>10576788</id><snippet>flush</snippet></ROW><ROW><id>10576788</id><snippet>#do stuff</snippet></ROW><ROW><id>10576788</id><snippet>StringIO</snippet></ROW><ROW><id>10576810</id><snippet>File "/home/.../webapps/django/myproject/classifieds/views/create.py" in checkout
  122.       send_mail(_('Your ad will be posted shortly.'),
</snippet></ROW><ROW><id>10576810</id><snippet>classifieds/views/create.py</snippet></ROW><ROW><id>10576810</id><snippet>Payment.complete</snippet></ROW><ROW><id>10576810</id><snippet>send_mail</snippet></ROW><ROW><id>10576942</id><snippet>MultipleObjectsReturned</snippet></ROW><ROW><id>10576942</id><snippet>    try:
        Event.objects.get(
            Q(user=self.user, status=1),
            Q(start_date__range=(self.start_date, self.end_date))
            |Q(end_date__range(self.start_date, self.end_date))
            |Q(start_date__lte=self.start_date, end_date__gte=self.end_date)
        )
        raise IntegrityError("Error message")
    except Event.DoesNotExist:
        super(Event,self).save(*args,**kwargs)
</snippet></ROW><ROW><id>10576942</id><snippet>    if Event.objects.filter(
        Q(user=self.user, status=1),
        Q(start_date__range=(self.start_date, self.end_date))
        | Q(end_date__range(self.start_date, self.end_date))
        | Q(start_date__lte=self.start_date, end_date__gte=self.end_date)
    ):
        raise IntegrityError("Error message")
    else:
        super(Event,self).save(*args,**kwargs)
</snippet></ROW><ROW><id>10577337</id><snippet>+- float("inf")</snippet></ROW><ROW><id>10577337</id><snippet>print(list(sorted([float("nan"), float("inf"), float("-inf"), float("nan"), float("nan")])))
# NaNs sort above and below +-Inf
# However, sorting a container with NaNs makes little sense, so not a real issue.
</snippet></ROW><ROW><id>10577337</id><snippet>inf</snippet></ROW><ROW><id>10577337</id><snippet>class _max:
    def __lt__(self, other): return False
    def __gt__(self, other): return True

class _min:
    def __lt__(self, other): return True
    def __gt__(self, other): return False

MAX, MIN = _max(), _min()

print(list(sorted([float("nan"), MAX, float('inf'), MIN, float('-inf'), 0,float("nan")])))
# [&lt;__main__._min object at 0xb756298c&gt;, nan, -inf, 0, inf, nan, &lt;__main__._max object at 0xb756296c&gt;]
</snippet></ROW><ROW><id>10577337</id><snippet>None</snippet></ROW><ROW><id>10577337</id><snippet>int</snippet></ROW><ROW><id>10577337</id><snippet>(typename, value)</snippet></ROW><ROW><id>10577444</id><snippet>base64</snippet></ROW><ROW><id>10577444</id><snippet>gzip</snippet></ROW><ROW><id>10577444</id><snippet>StringIO</snippet></ROW><ROW><id>10577444</id><snippet>sample_text_file = gzip.GzipFile(mode='rb',
    fileobj=StringIO(base64.b64decode(DEFAULT_SAMPLE_COMPRESSED)))
</snippet></ROW><ROW><id>10577444</id><snippet>StringIO</snippet></ROW><ROW><id>10577444</id><snippet>DEFAULT_SAMPLE_COMPRESSED</snippet></ROW><ROW><id>10577564</id><snippet>dict</snippet></ROW><ROW><id>10577564</id><snippet>values</snippet></ROW><ROW><id>10577564</id><snippet>test = {'food' : ['apple']}
test['food'].append('banana')
</snippet></ROW><ROW><id>10577796</id><snippet>/app/auth</snippet></ROW><ROW><id>10577796</id><snippet>/app/login</snippet></ROW><ROW><id>10577796</id><snippet>/app/auth</snippet></ROW><ROW><id>10577796</id><snippet>/app/login</snippet></ROW><ROW><id>10577796</id><snippet>/</snippet></ROW><ROW><id>10577796</id><snippet>/app</snippet></ROW><ROW><id>10577796</id><snippet>self.response.headers.add_header('Set-Cookie','user_id=%s; Path=/'% id_and_hash)
</snippet></ROW><ROW><id>10577796</id><snippet>response.set_cookie</snippet></ROW><ROW><id>10577796</id><snippet>self.response.set_cookie('user_id', id_and_hash)
</snippet></ROW><ROW><id>10577796</id><snippet>/</snippet></ROW><ROW><id>10577890</id><snippet>def f(a, b):
  return ((v1[a] - v1[i]) / (v2[a] - v2[i]) for i in xrange(a, b+1))
</snippet></ROW><ROW><id>10577890</id><snippet>def f(a, b):
  for i in xrange(a, b+1)
    yield (v1[a] - v1[i]) / (v2[a] - v2[i])
</snippet></ROW><ROW><id>10578857</id><snippet>usernames = []
with open("passwdfile") as htpwd:
    for line in htpwd.readlines():
        username, pwd = line.split(":")
        usernames.append(username)
</snippet></ROW><ROW><id>10578857</id><snippet>with open("passwdfile") as htpwd:
    usernames = [line.split(":")[0] for line in htpwd.readlines()]
</snippet></ROW><ROW><id>10578884</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def cdict():
...     return defaultdict(cdict)
... 
&gt;&gt;&gt; d = cdict()
&gt;&gt;&gt; d['a']=1
&gt;&gt;&gt; d['b']=3
&gt;&gt;&gt; d
defaultdict(&lt;function cdict at 0x28d3ed8&gt;, {'a': 1, 'b': 3})
&gt;&gt;&gt; d['c']['d'] = 33
&gt;&gt;&gt; d['c']['d']
33
&gt;&gt;&gt; d
defaultdict(&lt;function cdict at 0x28d3ed8&gt;, {'a': 1, 'c': defaultdict(&lt;function cdict at 0x28d3ed8&gt;, {'e': defaultdict(&lt;function cdict at 0x28d3ed8&gt;, {}), 'd': 33}), 'b': 3})
&gt;&gt;&gt; d['c']['e']
defaultdict(&lt;function cdict at 0x28d3ed8&gt;, {})
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10578884</id><snippet>cdict()</snippet></ROW><ROW><id>10578884</id><snippet>nil</snippet></ROW><ROW><id>10578884</id><snippet>None</snippet></ROW><ROW><id>10578884</id><snippet>repr</snippet></ROW><ROW><id>10579024</id><snippet>self.someval</snippet></ROW><ROW><id>10579024</id><snippet>func_closure</snippet></ROW><ROW><id>10579024</id><snippet>&gt;&gt;&gt; class MyClass:
...     def __init__(self, someval):
...         self.someval = someval
...     def get_a_function(self):
...         def result():
...             return self.someval
...         return result
... 
&gt;&gt;&gt; inst = MyClass("my value")
&gt;&gt;&gt; func = inst.get_a_function()
&gt;&gt;&gt; func
&lt;function result at 0x8d3efb4&gt;
&gt;&gt;&gt; func.func_closure
(&lt;cell at 0x8dbc554: instance object at 0x8d321cc&gt;,)
&gt;&gt;&gt; func.func_closure[0].cell_contents
&lt;__main__.MyClass instance at 0x8d321cc&gt;
</snippet></ROW><ROW><id>10579564</id><snippet>im.getdata</snippet></ROW><ROW><id>10579564</id><snippet>im.getpixel</snippet></ROW><ROW><id>10579564</id><snippet>&gt;&gt;&gt; import Image
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([[1., 2.], [3., 4.]])
&gt;&gt;&gt; im = Image.fromarray(x)
&gt;&gt;&gt; list(im.getdata())
[1.0, 2.0, 3.0, 4.0]
&gt;&gt;&gt; [im.getpixel(x) for x in [(0,0), (0,1), (1,0), (1,1)]]
[1.0, 3.0, 2.0, 4.0]
</snippet></ROW><ROW><id>10579743</id><snippet>bottle.request.method</snippet></ROW><ROW><id>10579743</id><snippet>from bottle import route, request

@route('/')
def hello():
    return "Method is " + request.method
</snippet></ROW><ROW><id>10579924</id><snippet>import argparse

## This function takes the 'extra' attribute from global namespace and re-parses it to create separate namespaces for all other chained commands.
def parse_extra (parser, namespace):
  namespaces = []
  extra = namespace.extra
  while extra:
    n = parser.parse_args(extra)
    extra = n.extra
    namespaces.append(n)

  return namespaces

argparser=argparse.ArgumentParser()
subparsers = argparser.add_subparsers(help='sub-command help', dest='subparser_name')

parser_a = subparsers.add_parser('command_a', help = "command_a help")
## Setup options for parser_a

## Add nargs="*" for zero or more other commands
argparser.add_argument('extra', nargs = "*", help = 'Other commands')

## Do similar stuff for other sub-parsers
</snippet></ROW><ROW><id>10579924</id><snippet>extra</snippet></ROW><ROW><id>10579931</id><snippet># -- coding: utf-8 --
</snippet></ROW><ROW><id>10579931</id><snippet>db = MySQLdb.connect(host=database_host ,user=user ,passwd=pass,db=database_name, charset = "utf8", use_unicode = True)
</snippet></ROW><ROW><id>10580014</id><snippet>import os

try:
    with open("/tmp/myproc.pid") as pidfile:
        pidfile.write(str(os.getpid()))
    main()
finally:
    os.remove("/tmp/myproc.pid")
</snippet></ROW><ROW><id>10580017</id><snippet>from django import forms
from my_project.my_app.models import Beverage

class InventoryForm(forms.ModelForm):
    units_reported = forms.IntegerField()
    class Meta:
        model = Beverage
        fields = ('name', 'id')
</snippet></ROW><ROW><id>10580017</id><snippet>from django.forms.models import modelformset_factory
from my_project.my_app.models import Beverage, Inventory

def update_inventory(request, location_id):

    InventoryFormSet = modelformset_factory(Beverage, form=InventoryForm)
    qs = Beverage.objects.filter(location=location_id)
    formset = InventoryFormSet(queryset=qs)
    if request.method == 'POST':
        formset = InventoryFormSet(request.POST)
        if formset.is_valid():
            for form in formset:
                beverage = form.save(commit=False)
                units_reported = form.cleaned_data['units_reported']
                Inventory(beverage=beverage, units_reported=units_reported).save()
    ...
</snippet></ROW><ROW><id>10580667</id><snippet>str.strip()</snippet></ROW><ROW><id>10580667</id><snippet>os.getenv()</snippet></ROW><ROW><id>10580667</id><snippet>import os
for env_check in open('env_check.conf'):
    env_check = env_check.strip()
    print '[{}]'.format(env_check)
    newenv = os.getenv(env_check)
    if newenv is None:
        print env_check, 'is not set'
    else:
        print 'Current Setting for {}={}'.format(env_check, newenv)
</snippet></ROW><ROW><id>10580782</id><snippet>(A==B).all()
</snippet></ROW><ROW><id>10580782</id><snippet>A</snippet></ROW><ROW><id>10580782</id><snippet>B</snippet></ROW><ROW><id>10580782</id><snippet>True</snippet></ROW><ROW><id>10580782</id><snippet>A==B</snippet></ROW><ROW><id>10580782</id><snippet>all</snippet></ROW><ROW><id>10580782</id><snippet>True</snippet></ROW><ROW><id>10580782</id><snippet>A</snippet></ROW><ROW><id>10580782</id><snippet>B</snippet></ROW><ROW><id>10580782</id><snippet>A</snippet></ROW><ROW><id>10580782</id><snippet>B</snippet></ROW><ROW><id>10580782</id><snippet>np.array_equal(A,B)  # test if same shape, same elements values
np.array_equiv(A,B)  # test if broadcastable shape, same elements values
np.allclose(A,B,...) # test if same shape, elements have close enough values
</snippet></ROW><ROW><id>10581031</id><snippet>(r'^change-password/$', 'django.contrib.auth.views.password_change'), 
(r'^password-changed/$', 'django.contrib.auth.views.password_change_done'),
</snippet></ROW><ROW><id>10581031</id><snippet>{% extends "base.html" %}
{% block title %}Password Change Successful{% endblock %}
{% block head %}Password Change Completed Successfully{% endblock %}
{% block content %}
    Your password has been changed successfully. Please re-login with your new credentials 
    &lt;a href="/login/"&gt;login&lt;/a&gt; or go back to the
    &lt;a href="/"&gt;main page&lt;/a&gt;.
{% endblock %}
</snippet></ROW><ROW><id>10581031</id><snippet>{% extends "base.html" %}
{% block title %}Change Registration{% endblock %}
{% block head %}Change Registration{% endblock %}
{% block content %}
    &lt;form method="post" action="."&gt;
        {{form.as_p}}
        &lt;input type="submit" value="Change" /&gt;
        {% csrf_token %}
    &lt;/form&gt;
{% endblock %}
</snippet></ROW><ROW><id>10581146</id><snippet>Queue</snippet></ROW><ROW><id>10581146</id><snippet>concurrent.futures</snippet></ROW><ROW><id>10581146</id><snippet>from concurrent import futures

def GetDict():
    return {'foo':'bar'}

# imports ...
# from Worker import GetDict

def ThreadStart():
    executor = futures.ThreadPoolExecutor(max_workers=4)
    future = executor.submit(GetDict)
    print(future.result()) # blocks until GetDict finished

    # or doing more then one:
    jobs = [executor.submit(GetDict) for i in range(10)]
    for j in jobs:
        print(j.result())

if __name__ == '__main__':
    ThreadStart()
</snippet></ROW><ROW><id>10581146</id><snippet>from threading import Thread

def GetDict():
    return {'foo':'bar'}

# imports ...
# from Worker import GetDict

class WorkerThread(Thread):

    def __init__(self, fnc, *args, **kwargs):
        super(WorkerThread, self).__init__()
        self.fnc = fnc
        self.args = args
        self.kwargs = kwargs

    def run(self):
        self.result = self.fnc(*self.args, **self.kwargs)


def ThreadStart():
    jobs = [WorkerThread(GetDict) for i in range(10)]
    for j in jobs:
        j.start()
    for j in jobs:
        j.join()
        print(j.result)

if __name__ == '__main__':
    ThreadStart()
</snippet></ROW><ROW><id>10581301</id><snippet>global li</snippet></ROW><ROW><id>10581301</id><snippet>a = 3

def b():
    print a
    a = 1
</snippet></ROW><ROW><id>10581301</id><snippet>a</snippet></ROW><ROW><id>10581301</id><snippet>print</snippet></ROW><ROW><id>10581301</id><snippet>global a</snippet></ROW><ROW><id>10581350</id><snippet>for x in file:</snippet></ROW><ROW><id>10581350</id><snippet>with open('myfile.chn', 'rb') as f:
   i = 0
   for x in f:
      i += 1
      print(x)  
print('reached the EOF')
</snippet></ROW><ROW><id>10581350</id><snippet>file</snippet></ROW><ROW><id>10581375</id><snippet>import os

def main(*args):
    for arg in args:
        if not os.path.exists(arg):
            continue

        with open(arg) as f:
            print("passed")
</snippet></ROW><ROW><id>10581375</id><snippet>IOError</snippet></ROW><ROW><id>10581375</id><snippet>def main(*args):
    for arg in args:
        try:
            with open(arg) as f:
                print("passed")
        except IOError:
            print("File doesn't exist")
</snippet></ROW><ROW><id>10581703</id><snippet>from sqlalchemy.orm import validates

class Vertex(Base):
    # ...

    @validates('successors')
    def validate_successors(self, key, value):
        check_value = True
        # @todo: insert the validation logic here
        if type(self) == B and type(value) == A:
            check_value = False
        assert check_value, 'Invalid Edge: not allowed to link from [{fr}] to [{to}]'.format(fr=type(self).__name__, to=type(value).__name__)
        return value
</snippet></ROW><ROW><id>10581703</id><snippet>class Vertex(Base):
    # ...

    def _validate_successors_impl(self, value):
        return True

    @validates('successors')
    def validate_successors(self, key, value):
        self._validate_successors_impl(value)
        return value

class A(Vertex):
    __mapper_args__ = {'polymorphic_identity': 'A'}

    def _validate_successors_impl(self, value):
        if type(value) == B:
            assert check_value, 'Invalid Edge: not allowed to link from [{fr}] to [{to}]'.format(fr=type(self).__name__, to=type(value).__name__)

class B(Vertex):
    __mapper_args__ = {'polymorphic_identity': 'B'}
</snippet></ROW><ROW><id>10581829</id><snippet>line_replace = line.replace(" ", "+").strip("\n")
</snippet></ROW><ROW><id>10582056</id><snippet>getattr(obj, prop)
</snippet></ROW><ROW><id>10582056</id><snippet>setattr(obj, prop, value)
</snippet></ROW><ROW><id>10582062</id><snippet>mytoplevel/
├── __init__.py
├── mydeploymenttasks.py
└── templates
    ├── __init__.py
    └── mytemplate.mak
</snippet></ROW><ROW><id>10582062</id><snippet>import pkg_resources
pkg_resources.resource_filename('mytoplevel.templates',mytemplate.mak)
</snippet></ROW><ROW><id>10582062</id><snippet>from mytoplevel.mydeploymenttasks import installApplicationTask
</snippet></ROW><ROW><id>10582099</id><snippet>sqlite3</snippet></ROW><ROW><id>10582099</id><snippet>SELECT</snippet></ROW><ROW><id>10582099</id><snippet>SELECT * FROM table WHERE...</snippet></ROW><ROW><id>10582099</id><snippet>SELECT * FROM table1 JOIN table2...</snippet></ROW><ROW><id>10582442</id><snippet>NameError</snippet></ROW><ROW><id>10582442</id><snippet>detail</snippet></ROW><ROW><id>10582442</id><snippet>detail</snippet></ROW><ROW><id>10582442</id><snippet>from views import *
</snippet></ROW><ROW><id>10582690</id><snippet>=</snippet></ROW><ROW><id>10582690</id><snippet>n = len(A)
best = A[0] 
for size in range(1,n+1): 
   cur = sum(A[:size]) 
   for i in range(n-size): 
      cur += A[i+size] - A[i] # &lt;- what happens here?
      best = max(best, cur)
</snippet></ROW><ROW><id>10582690</id><snippet>size</snippet></ROW><ROW><id>10582690</id><snippet>cur</snippet></ROW><ROW><id>10582690</id><snippet>size</snippet></ROW><ROW><id>10582690</id><snippet>A</snippet></ROW><ROW><id>10582690</id><snippet>A[i+size]</snippet></ROW><ROW><id>10582690</id><snippet>A[i]</snippet></ROW><ROW><id>10582690</id><snippet>best</snippet></ROW><ROW><id>10582690</id><snippet>best</snippet></ROW><ROW><id>10582690</id><snippet>A</snippet></ROW><ROW><id>10582690</id><snippet>sum(A)</snippet></ROW><ROW><id>10582690</id><snippet>best = A[0]</snippet></ROW><ROW><id>10582690</id><snippet>A = [4, 3, 2]</snippet></ROW><ROW><id>10582690</id><snippet>5</snippet></ROW><ROW><id>10582690</id><snippet>9</snippet></ROW><ROW><id>10582690</id><snippet>best = max(best, cur)</snippet></ROW><ROW><id>10582820</id><snippet>module</snippet></ROW><ROW><id>10582820</id><snippet>class Type(object): pass
var = Type()
class Type(object): pass
</snippet></ROW><ROW><id>10582820</id><snippet>&lt;class 'module.Type'&gt;</snippet></ROW><ROW><id>10582820</id><snippet>print id(Type), id(type(var))
</snippet></ROW><ROW><id>10582820</id><snippet>print Type is type(var)
</snippet></ROW><ROW><id>10582820</id><snippet>python -m module
</snippet></ROW><ROW><id>10582820</id><snippet>python module.py
</snippet></ROW><ROW><id>10582820</id><snippet>__main__</snippet></ROW><ROW><id>10582820</id><snippet>__instancecheck__()</snippet></ROW><ROW><id>10583241</id><snippet>from django.contrib.auth.decorators import login_required
from django.shortcuts import render

from your_app.models import ToDo

@login_required
def todos_for_user(request):
    todos = ToDo.objects.filter(user=request.user)
    return render(request, 'todos/index.html', {'todos' : todos})
</snippet></ROW><ROW><id>10583317</id><snippet>Field1,Field2,Field3
1,2,3
4,5,6
</snippet></ROW><ROW><id>10583317</id><snippet>[{'Field1':1,'Field2':2,'Field3':3} , {'Field1':4,'Field2':5,'Field3':6} ]
</snippet></ROW><ROW><id>10583317</id><snippet>class Person:
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

# that's it!  Now, you can create a Bunch
# whenever you want to group a few variables:

person = Person(field1=1, field2=2, field3=3)
</snippet></ROW><ROW><id>10583317</id><snippet>reader = csv.DictReader(open('yourfile.csv', 'rU'), delimiter=',')
entries = [Person(**entry) for entry in reader]
</snippet></ROW><ROW><id>10583648</id><snippet>event = [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1]
from itertools import izip_longest

def pair_iterator(event):
    event = [0] + event
    return enumerate(izip_longest(event, event[1:], fillvalue=0), -1)

def one_ranges(event):
    start = [i + 1 for i, pair in pair_iterator(event) if pair == (0, 1)]
    end = [i for i, pair in pair_iterator(event) if pair == (1, 0)]
    return zip(start, end)

print one_ranges(event)
</snippet></ROW><ROW><id>10583648</id><snippet>one_ranges</snippet></ROW><ROW><id>10583648</id><snippet>(start, end)</snippet></ROW><ROW><id>10583774</id><snippet>import numpy as np
from scipy.interpolate import UnivariateSpline

def make_norm_dist(x, mean, sd):
    return 1.0/(sd*np.sqrt(2*np.pi))*np.exp(-(x - mean)**2/(2*sd**2))

x = np.linspace(10, 110, 1000)
green = make_norm_dist(x, 50, 10)
pink = make_norm_dist(x, 60, 10)

blue = green + pink   

# create a spline of x and blue-np.max(blue)/2 
spline = UnivariateSpline(x, blue-np.max(blue)/2, s=0)
r1, r2 = spline.roots() # find the roots

import pylab as pl
pl.plot(x, blue)
pl.axvspan(r1, r2, facecolor='g', alpha=0.5)
pl.show()
</snippet></ROW><ROW><id>10583793</id><snippet>plus</snippet></ROW><ROW><id>10583793</id><snippet>addN</snippet></ROW><ROW><id>10583793</id><snippet>lambda</snippet></ROW><ROW><id>10583793</id><snippet>def</snippet></ROW><ROW><id>10583793</id><snippet>operator.add(a,b)</snippet></ROW><ROW><id>10583793</id><snippet>a+b</snippet></ROW><ROW><id>10583793</id><snippet>plus</snippet></ROW><ROW><id>10583793</id><snippet>addN</snippet></ROW><ROW><id>10583793</id><snippet>plus</snippet></ROW><ROW><id>10583793</id><snippet>addN</snippet></ROW><ROW><id>10583793</id><snippet>plus</snippet></ROW><ROW><id>10583978</id><snippet>subversion</snippet></ROW><ROW><id>10583978</id><snippet>subversion-python</snippet></ROW><ROW><id>10583978</id><snippet>--with-python</snippet></ROW><ROW><id>10583978</id><snippet>pysvn</snippet></ROW><ROW><id>10584249</id><snippet>utcnow</snippet></ROW><ROW><id>10584249</id><snippet>if os.getenv('ENV_USER_TZ', None):
    TIME_ZONE = os.getenv('ENV_USER_TZ') # changed to UTC
</snippet></ROW><ROW><id>10584364</id><snippet>exec myBootStrap "$arguments"
</snippet></ROW><ROW><id>10584364</id><snippet>$ a='"abc def" ghi'
$ echo "$a"
"abc def" ghi
$ args $a
3 args: &lt;"abc&gt; &lt;def"&gt; &lt;ghi&gt;
$ args "$a"
1 args: &lt;"abc def" ghi&gt;
$ cat args
#! /bin/sh
# Greg Wooledge's args script
printf "%d args:" $#
printf " &lt;%s&gt;" "$@"
echo
</snippet></ROW><ROW><id>10584364</id><snippet>exec myBootStrap "$@"
</snippet></ROW><ROW><id>10584364</id><snippet>#!/bin/bash
declare -a argv
for ((i = 1; i &lt;= $#; i += 1))
do

   arg=${@:i:1}

   if [[ "$arg" == "--preload"* ]]; then
      marg=${@: ++i:1}
      preLoadO=$arg
      preLoadA="${marg}"
      argv+=("$arg")
      argv+=("$preLoadA")

   elif [[ "$arg" == "--postload"* ]]; then
      marg=${@: ++i:1}
      postLoadO=$arg
      postLoadA="${marg}"
      argv+=("$arg")
      argv+=("$postLoadA")
   else
      argv+=("$arg")
   fi
done

exec ./myBootStrap "${argv[@]}"
</snippet></ROW><ROW><id>10584364</id><snippet>printf</snippet></ROW><ROW><id>10584364</id><snippet>$(())</snippet></ROW><ROW><id>10584364</id><snippet>i=i+1</snippet></ROW><ROW><id>10584364</id><snippet>1+1+1+1</snippet></ROW><ROW><id>10584364</id><snippet>:+</snippet></ROW><ROW><id>10584364</id><snippet>((i++)); marg=${@:i:1}</snippet></ROW><ROW><id>10584364</id><snippet>+=</snippet></ROW><ROW><id>10584410</id><snippet>Popen</snippet></ROW><ROW><id>10584410</id><snippet>&gt;&gt;&gt; from concurrent.futures import *
&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; executor = ThreadPoolExecutor(4)
&gt;&gt;&gt; future = executor.submit(Popen(['echo', 'test'], stdout=PIPE))
&gt;&gt;&gt; future.exception()
TypeError("'Popen' object is not callable",)
</snippet></ROW><ROW><id>10584410</id><snippet>from concurrent.futures import *
from subprocess import *

def make_call():
    process = Popen(['echo', 'test'], stdout=PIPE)
    return process.communicate()[0]

executor = ThreadPoolExecutor(4)
future = executor.submit(make_call)
print(future.result())
</snippet></ROW><ROW><id>10584539</id><snippet>django.jQuery</snippet></ROW><ROW><id>10584539</id><snippet>django/contrib/admin/static/admin/js/jquery.init.js</snippet></ROW><ROW><id>10584539</id><snippet>django/contrib/admin/static/admin/js/jquery.js</snippet></ROW><ROW><id>10584539</id><snippet>&lt;script type="text/javascript" src="/static/admin/js/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/admin/js/jquery.init.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>10584539</id><snippet>media</snippet></ROW><ROW><id>10584539</id><snippet>ModelAdmin</snippet></ROW><ROW><id>10584792</id><snippet>strace</snippet></ROW><ROW><id>10584792</id><snippet>&lt;c_identifier&gt;(
</snippet></ROW><ROW><id>10584792</id><snippet>(</snippet></ROW><ROW><id>10584792</id><snippet>(</snippet></ROW><ROW><id>10584792</id><snippet>syscalls = set(ln.split('(', 1)[0] for ln in strace_output)
</snippet></ROW><ROW><id>10584955</id><snippet>def element_count(p):
  q = p[:]
  count = 0
  while q:
    entry = q.pop()
    if isinstance(entry, list):
      q += entry
    count += 1
  return count

print element_count([1, [], 3]) 
print element_count([1, [1, 2, [3, 4]]])
print element_count([[[[[[[[1, 2, 3]]]]]]]])
</snippet></ROW><ROW><id>10585114</id><snippet>mock_foobar_class.save = save_mock
</snippet></ROW><ROW><id>10585114</id><snippet>mock_foobar_class</snippet></ROW><ROW><id>10585114</id><snippet>save</snippet></ROW><ROW><id>10585114</id><snippet>mock_foobar_class.return_value.save = save_mock
</snippet></ROW><ROW><id>10585118</id><snippet>/admin</snippet></ROW><ROW><id>10585406</id><snippet>newstr = re.sub(mystr1 + "\\\\", "", myfile)
</snippet></ROW><ROW><id>10585406</id><snippet>\\</snippet></ROW><ROW><id>10585406</id><snippet>"\\\\"</snippet></ROW><ROW><id>10585406</id><snippet>r"\\"</snippet></ROW><ROW><id>10585439</id><snippet>import wx

########################################################################
class TestFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test")

        panel = wx.Panel(self)
        self.radios = wx.RadioBox(panel, label="Choices",
                                  choices = ["None", "Accept", "Reject"])

        button = wx.Button(panel, label="Run")
        button.Bind(wx.EVT_BUTTON, self.onBtn)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.radios, 0, wx.ALL, 5)
        sizer.Add(button, 0, wx.ALL, 5)
        panel.SetSizer(sizer)

    #----------------------------------------------------------------------
    def onBtn(self, event):
        """"""
        btn = event.GetEventObject()
        btn.SetLabel("Running")
        radio_value = self.radios.GetStringSelection()
        if radio_value == "None":
            self.showMsg("Error", "Please Choose 'Accept' or 'Reject'!")
        elif radio_value == "Accept":
            self.showMsg("Message", "Thank you for accepting!")
        else:
            self.showMsg("Message", "We're sorry, but you cannot continue the install")

    #----------------------------------------------------------------------
    def showMsg(self, title, msg):
        """"""
        dlg = wx.MessageDialog(None, msg, title, wx.OK | wx.ICON_QUESTION)
        dlg.ShowModal()
        dlg.Destroy()



if __name__ == "__main__":
    app = wx.App(False)
    frame = TestFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10585464</id><snippet>self.Portal</snippet></ROW><ROW><id>10585464</id><snippet>self.locator</snippet></ROW><ROW><id>10585464</id><snippet>None</snippet></ROW><ROW><id>10585464</id><snippet>__init__</snippet></ROW><ROW><id>10585464</id><snippet>__int__</snippet></ROW><ROW><id>10585464</id><snippet>class baseElement(object):
    def __init__(self, portal, locator):
        self.Portal = portal
        self.locator = locator
</snippet></ROW><ROW><id>10585464</id><snippet>from somewhere import PortalClass, LocatorClass
# [...] 
element = SomeClassDerivingFromBaseElement(PortalClass(), LocatorClass()) 
</snippet></ROW><ROW><id>10585464</id><snippet>PortalClass</snippet></ROW><ROW><id>10585464</id><snippet>LocatorClass</snippet></ROW><ROW><id>10585464</id><snippet>PTF</snippet></ROW><ROW><id>10585464</id><snippet>Presence_of_Element</snippet></ROW><ROW><id>10585900</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>10585979</id><snippet>sheet.Range("A8").Hyperlinks.Item(1).Address
</snippet></ROW><ROW><id>10586224</id><snippet>webbrowser</snippet></ROW><ROW><id>10586224</id><snippet>urllib</snippet></ROW><ROW><id>10586224</id><snippet>http(s)://Username:Password@Server/Ressource.ext</snippet></ROW><ROW><id>10586224</id><snippet>mechanize</snippet></ROW><ROW><id>10586276</id><snippet>subprocess.call(['Cscript', r'c:/windows/System32/Printing_Admin_Scripts/en-US/Prnport.vbs', '-a', ...])
</snippet></ROW><ROW><id>10586305</id><snippet>[ORG Microsoft] CEO [PER Steve Ballmer]
</snippet></ROW><ROW><id>10586732</id><snippet>shared_ptr</snippet></ROW><ROW><id>10586732</id><snippet>#include &lt;boost/python.hpp&gt;

namespace bp = boost::python;

BOOST_PYTHON_MODULE(example) {
    bp::class_&lt;A &gt;("A");
    bp::register_ptr_to_python&lt; boost::shared_ptr&lt;A&gt; &gt;();
    bp::class_&lt; B, bp::bases&lt;A&gt; &gt;("B");
    bp::register_ptr_to_python&lt; boost::shared_ptr&lt;B&gt; &gt;();
}
</snippet></ROW><ROW><id>10586732</id><snippet>A</snippet></ROW><ROW><id>10586732</id><snippet>B</snippet></ROW><ROW><id>10586777</id><snippet>textedit.setLineWrapMode(QtGui.QPlainTextEdit.NoWrap)
# above code in between here
textedit.setLineWrapMode(QtGui.QPlainTextEdit.WidgetWidth)
</snippet></ROW><ROW><id>10586835</id><snippet>&gt;&gt;&gt; eval("20&lt;30")
True
</snippet></ROW><ROW><id>10586874</id><snippet>classmethod</snippet></ROW><ROW><id>10586874</id><snippet>class Dummy(object):

    @classmethod
    def some_function(cls,*args,**kwargs):
        print cls

#both of these will have exactly the same effect
Dummy.some_function()
Dummy().some_function()
</snippet></ROW><ROW><id>10586874</id><snippet>self.some_function()</snippet></ROW><ROW><id>10586874</id><snippet>some_function</snippet></ROW><ROW><id>10586874</id><snippet>self</snippet></ROW><ROW><id>10586874</id><snippet>some_function</snippet></ROW><ROW><id>10586874</id><snippet>staticmethod</snippet></ROW><ROW><id>10586874</id><snippet>staticmethod</snippet></ROW><ROW><id>10586874</id><snippet>In [6]: class Foo(object): some_static = staticmethod(lambda x: x+1)

In [7]: Foo.some_static(1)
Out[7]: 2

In [8]: Foo().some_static(1)
Out[8]: 2

In [9]: class Bar(Foo): some_static = staticmethod(lambda x: x*2)

In [10]: Bar.some_static(1)
Out[10]: 2

In [11]: Bar().some_static(1)
Out[11]: 2
</snippet></ROW><ROW><id>10586874</id><snippet>self</snippet></ROW><ROW><id>10586923</id><snippet>subprocess</snippet></ROW><ROW><id>10586923</id><snippet>Popen</snippet></ROW><ROW><id>10586923</id><snippet>subprocess.Popen(['convert', '1.png', '(', '+clone', '-background', 'black', '-shadow', '110x1+9+9',
                  ')', '+swap', '-background', 'none', '-layers', 'merge', '+repage', '2.png'],
                 otherargments=values, etc=etc)
</snippet></ROW><ROW><id>10586938</id><snippet>os.system()</snippet></ROW><ROW><id>10586938</id><snippet>system()</snippet></ROW><ROW><id>10586938</id><snippet>fork()</snippet></ROW><ROW><id>10586938</id><snippet>fork()</snippet></ROW><ROW><id>10586938</id><snippet>fork()</snippet></ROW><ROW><id>10586938</id><snippet>system()</snippet></ROW><ROW><id>10586938</id><snippet>system()</snippet></ROW><ROW><id>10586994</id><snippet>str</snippet></ROW><ROW><id>10586994</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.md5('some random title').hexdigest()
'bc847ea8db214557c611c9b3c2f043b1'
</snippet></ROW><ROW><id>10587265</id><snippet>QLineEdit</snippet></ROW><ROW><id>10587265</id><snippet>textEdited()</snippet></ROW><ROW><id>10587265</id><snippet># ...append all line edits to this list:
line_edits = []

for le in line_edits:
  le.textChanged.connect(self.mySumFunction)
</snippet></ROW><ROW><id>10587340</id><snippet>msn.py</snippet></ROW><ROW><id>10587340</id><snippet>def handle_USR(self, params):
    if len(params) != 4 and len(params) != 6:
        raise MSNProtocolError, "Invalid Number of Parameters for USR"

    mechanism = params[1]
    if mechanism == "OK":
        self.loggedIn(params[2], unquote(params[3]), int(params[4]))
    elif params[2].upper() == "S":
        # we need to obtain auth from a passport server
        f = self.factory
        d = execute(                                                   # &lt;------- here
            _login, f.userHandle, f.password, f.passportServer,
            authData=params[3])
        d.addCallback(self._passportLogin)
        d.addErrback(self._passportError)
</snippet></ROW><ROW><id>10587340</id><snippet>defer.execute</snippet></ROW><ROW><id>10587340</id><snippet>msn._login</snippet></ROW><ROW><id>10587340</id><snippet>msn._login</snippet></ROW><ROW><id>10587340</id><snippet>defer.execute</snippet></ROW><ROW><id>10587340</id><snippet>defer.succeed</snippet></ROW><ROW><id>10587340</id><snippet>execute</snippet></ROW><ROW><id>10587340</id><snippet>defer.maybeDeferred</snippet></ROW><ROW><id>10587340</id><snippet>maybeDeferred</snippet></ROW><ROW><id>10587340</id><snippet>twisted.internet.defer</snippet></ROW><ROW><id>10587340</id><snippet>execute</snippet></ROW><ROW><id>10587340</id><snippet>maybeDeferred</snippet></ROW><ROW><id>10587437</id><snippet>(attribute, regexp)</snippet></ROW><ROW><id>10587437</id><snippet>[('and', ('body', '.*to be or not.*'), ('author', (not, '.*shakespeare.*'))),
 ...]
</snippet></ROW><ROW><id>10587833</id><snippet>import sys
sys.path.append('/path/to/workspace')

from utils import utils_dict
</snippet></ROW><ROW><id>10587833</id><snippet>__init__.py</snippet></ROW><ROW><id>10587833</id><snippet>from ..utils import utils_dict
</snippet></ROW><ROW><id>10587833</id><snippet>import utils.utils_dict.py</snippet></ROW><ROW><id>10588133</id><snippet>&gt;&gt;&gt; datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2147570047)
datetime.datetime(2038, 1, 20, 4, 14, 7)
</snippet></ROW><ROW><id>10588133</id><snippet>&gt;&gt;&gt; datetime.datetime.fromtimestamp(2047570047)
datetime.datetime(2034, 11, 19, 17, 27, 27)
&gt;&gt;&gt; datetime.datetime.fromtimestamp(0) + datetime.timedelta(seconds=2047570047)
datetime.datetime(2034, 11, 19, 18, 27, 27)
</snippet></ROW><ROW><id>10588342</id><snippet>global</snippet></ROW><ROW><id>10588342</id><snippet>global someVar
someVar = 55
</snippet></ROW><ROW><id>10588361</id><snippet>#Add QApplication on top #################
from PyQt4.QtGui import QApplication
##########################################
def on_pushButton_clicked(self):
        '''
            Simulate some long process to be performed.
            Before Long Process starts, show an oscillating progress bar to
            indiate process is running in background. 
        '''
        dialog = QtGui.QDialog()    
        progressBar = Ui_porcessProgress()
        progressBar.setupUi(dialog)
        dialog.show()
        #dialog.exec_()

        start = time.time()
        diff = 0
        while diff &lt; 10:
            end = time.time()
            diff = end - start


            ################################################### 
            #add routine to update progressBar value
            progressBar.porcessProgressBar.setValue(diff)
            QApplication.processEvents()
            #add routine to update progressBar value 
            ###################################################


            print (diff)

class Ui_porcessProgress(object):
    def setupUi(self, porcessProgress):
        porcessProgress.setObjectName(_fromUtf8("porcessProgress"))
        porcessProgress.setWindowModality(QtCore.Qt.ApplicationModal)
        porcessProgress.resize(329, 81)
        porcessProgress.setMinimumSize(QtCore.QSize(329, 81))
        porcessProgress.setMaximumSize(QtCore.QSize(329, 81))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/WFT/wftlogo2.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        porcessProgress.setWindowIcon(icon)
        porcessProgress.setModal(True)
        self.verticalLayout = QtGui.QVBoxLayout(porcessProgress)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.label = QtGui.QLabel(porcessProgress)
        self.label.setObjectName(_fromUtf8("label"))
        self.verticalLayout.addWidget(self.label)
        self.porcessProgressBar = QtGui.QProgressBar(porcessProgress)

        ###########################################
        ####Set max value of progress bar
        self.porcessProgressBar.setMaximum(10)
        ############################################

        self.porcessProgressBar.setProperty("value", 10)
        self.porcessProgressBar.setTextVisible(False)
        self.porcessProgressBar.setObjectName(_fromUtf8("porcessProgressBar"))
        self.verticalLayout.addWidget(self.porcessProgressBar)
        porcessProgress.setWindowTitle(QtGui.QApplication.translate("porcessProgress", "Please wait...", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("porcessProgress", "Time History data extraction from ODB file in progress...", None, QtGui.QApplication.UnicodeUTF8))
        QtCore.QMetaObject.connectSlotsByName(porcessProgress)
#
#------------------------------------------------------------------------------ 
</snippet></ROW><ROW><id>10588443</id><snippet>result_proxy = query.fetchall()
for row in result_proxy:
    d = dict(row.items())
    d['Tags'] = d['Keywords']
</snippet></ROW><ROW><id>10588520</id><snippet>    &gt;&gt;&gt; import numpy as np
    &gt;&gt;&gt; a = np.array([[11,12,13],[21,22,23],[31,32,33],[41,42,43]])
    &gt;&gt;&gt; b = np.array([[1],[2],[3]])
    &gt;&gt;&gt; x = np.dot(a,b)
    &gt;&gt;&gt; x
    array([[ 74],
   [134],
   [194],
   [254]])
</snippet></ROW><ROW><id>10588520</id><snippet>    &gt;&gt;&gt; x = np.array([0.923423,0.12341235,0.213453241])
    &gt;&gt;&gt; x.round(2)
    array([ 0.92,  0.12,  0.21])
</snippet></ROW><ROW><id>10588520</id><snippet>    &gt;&gt;&gt; a = np.array([1,2,3,4,5])
    &gt;&gt;&gt; a
    array([1, 2, 3, 4, 5])
    &gt;&gt;&gt; a+2
    array([3, 4, 5, 6, 7])
    &gt;&gt;&gt; a*10
    array([10, 20, 30, 40, 50])
    &gt;&gt;&gt; np.sin(a)
    array([ 0.84147098,  0.90929743,  0.14112001, -0.7568025 , -0.95892427])
</snippet></ROW><ROW><id>10588790</id><snippet>s</snippet></ROW><ROW><id>10588790</id><snippet>attr()</snippet></ROW><ROW><id>10588904</id><snippet>d.fieldnames</snippet></ROW><ROW><id>10588904</id><snippet>DictReader</snippet></ROW><ROW><id>10589004</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(your_text)
description = soup.find('a').string
</snippet></ROW><ROW><id>10589656</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>10589656</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>10589656</id><snippet>brew install python</snippet></ROW><ROW><id>10589656</id><snippet>brew install python3</snippet></ROW><ROW><id>10589656</id><snippet>/usr/local</snippet></ROW><ROW><id>10589905</id><snippet>&gt;&gt;&gt; '{}{}{}.{}{}{}.{}{}{}-{}{}'.format(*c)
'324.867.842-98'
</snippet></ROW><ROW><id>10590090</id><snippet>    bytes = """
            00 00 00 90
            ff 53 4d 42 72 00 00 00 00 18 53 c8 00 00 00 00
            00 00 00 00 00 00 00 00 ff ff ff fe 00 00 00 00
            00 6d 00 02 50 43 20 4e 45 54 57 4f 52 4b 20 50
            52 4f 47 52 41 4d 20 31 2e 30 00 02 4c 41 4e 4d
            41 4e 31 2e 30 00 02 57 69 6e 64 6f 77 73 20 66
            6f 72 20 57 6f 72 6b 67 72 6f 75 70 73 20 33 2e
            31 61 00 02 4c 4d 31 2e 32 58 30 30 32 00 02 4c
            41 4e 4d 41 4e 32 2e 31 00 02 4e 54 20 4c 4d 20
            30 2e 31 32 00 02 53 4d 42 20 32 2e 30 30 32 00
            """
    packet = [chr(int(a, 16)) for a in bytes.split()]
</snippet></ROW><ROW><id>10590090</id><snippet>bytes</snippet></ROW><ROW><id>10590090</id><snippet>"""</snippet></ROW><ROW><id>10590090</id><snippet>bytes.split()</snippet></ROW><ROW><id>10590090</id><snippet>print bytes.split()

['00', '00', '00', '90', 'ff', '53', '4d', '42', '72', 
 '00', '00', '00', '00', '18', '53', 'c8', '00', '00' ... ] # and more
</snippet></ROW><ROW><id>10590090</id><snippet>packet = [chr(int(a, 16)) for a in bytes.split()]
</snippet></ROW><ROW><id>10590090</id><snippet>bytes</snippet></ROW><ROW><id>10590090</id><snippet>a</snippet></ROW><ROW><id>10590090</id><snippet>int(a,16)</snippet></ROW><ROW><id>10590090</id><snippet>FF</snippet></ROW><ROW><id>10590090</id><snippet>255</snippet></ROW><ROW><id>10590090</id><snippet>chr</snippet></ROW><ROW><id>10590090</id><snippet>packet</snippet></ROW><ROW><id>10590090</id><snippet>print packet
['\x00', '\x00', '\x00', '\x90', '\xff', 'S', 'M', 'B', 'r', '\x00', '\x00', '\x00',
 '\x00', '\x18', 'S', '\xc8', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 
 '\x00', '\x00', '\x00', '\x00', '\x00', '\xff', '\xff', '\xff', '\xfe', '\x00', 
 '\x00', '\x00', '\x00', '\x00', 'm', '\x00', '\x02', 'P', 'C', ' ', 'N', 'E', 'T', 
 'W', 'O', 'R', 'K', ' ', 'P', 'R', 'O', 'G', 'R', 'A', 'M', ' ', '1', '.', '0', 
 '\x00', '\x02', 'L', 'A', 'N', 'M', 'A', 'N', '1', '.', '0', '\x00', '\x02', 'W', 'i', 
 'n', 'd', 'o', 'w', 's', ' ', 'f', 'o', 'r', ' ', 'W', 'o', 'r', 'k', 'g', 'r', 'o', 
 ... more ]
</snippet></ROW><ROW><id>10590155</id><snippet>import time
import math

s_time = time.time()
def format_time():
    t = time.time() - s_time
    if t &lt; 60:
        f,i = math.modf(t)
        print '00:00:%02d:%02d' % (i, f/0.041666666666666664)

while True:
    format_time()
</snippet></ROW><ROW><id>10590179</id><snippet>newurl = '/my/new/route?' + urllib.urlencode(self.request.params)
self.redirect(newurl)
</snippet></ROW><ROW><id>10590272</id><snippet>x = [2143, 2390, 3350, 5239, 6250]
itertools.combinations(x, 2)
</snippet></ROW><ROW><id>10590272</id><snippet>(2143, 2390) (2143, 3350) (2143, 5239) (2143, 6250) (2390, 3350) (2390, 5239) (2390, 6250) (3350, 5239) (3350, 6250) (5239, 6250)
</snippet></ROW><ROW><id>10590299</id><snippet>bisect</snippet></ROW><ROW><id>10590299</id><snippet>keys</snippet></ROW><ROW><id>10590299</id><snippet>def findTime(time):
    keys = sorted(data.keys())
    return bisect.bisect_left(keys, time), bisect.bisect_right(keys, time)
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; from numpy import NA as NA
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; A.flags.maskna = True
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; A[3,3] = NA

array([[7, 5, 4, 8, 4],
       [2, 4, 3, 7, 3],
       [3, 1, 3, 2, 1],
       [8, 2, 0, NA, 7],
       [0, 7, 2, 5, 5],
       [5, 4, 2, 7, 4],
       [1, 2, 9, 2, 3],
       [7, 5, 1, 2, 9]])

&gt;&gt;&gt; A.sum(axis=0)
array([33, 30, 24, NA, 36])
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; A.sum(axis=0, skipna=True)
array([33, 30, 24, 33, 36])
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; A[(A&lt;=3)&amp;(A&lt;=6)] = NA

&gt;&gt;&gt; A
array([[8, 8, 4, NA, NA],
       [7, 9, NA, NA, 8],
       [NA, 6, 9, 5, NA],
       [9, 4, 6, 6, 5],
       [NA, 6, 8, NA, NA],
       [8, 5, 7, 7, NA],
       [NA, 4, 5, 9, 9],
       [NA, 8, NA, 5, 9]])
</snippet></ROW><ROW><id>10590513</id><snippet>&gt;&gt;&gt; A.sum(axis=0, skipna=True)
array([32, 50, 39, 32, 31])
</snippet></ROW><ROW><id>10590835</id><snippet>class Gene(object):
    def __init__(self, color, properties):
        self.color = color
        self.properties = properties

geneA = Gene('red', ['a', 'b', 'c'])
geneB = Gene('blue', ['d', 'e', 'f'])
genes = [geneA, geneB]

inverted = {}
for gene in genes:
    for prop in gene.properties:
        inverted[prop] = gene.color
</snippet></ROW><ROW><id>10591106</id><snippet>def matches_pattern(s, patterns):
    return any(p.match(s) for p in patterns)
</snippet></ROW><ROW><id>10591106</id><snippet>|</snippet></ROW><ROW><id>10591106</id><snippet>def matches_pattern(s, patterns):
    return re.match('|'.join('(?:%s)' % p for p in patterns), s)
</snippet></ROW><ROW><id>10591106</id><snippet>import timeit

setup = """
import re
patterns = [".*abc", "123.*", "ab.*", "foo.*bar", "11010.*", "1[^o]*"]*10
strings = ["asdabc", "123awd2", "abasdae23", "fooasdabar", "111", "11010100101", "xxxx", "eeeeee", "dddddddddddddd", "ffffff"]*10
compiled_patterns = list(map(re.compile, patterns))

def matches_pattern(str, patterns):
    for pattern in patterns:
        if pattern.match(str):
            return True
    return False

def test0():
    for s in strings:
        matches_pattern(s, compiled_patterns)

def test1():
    for s in strings:
        any(p.match(s) for p in compiled_patterns)

def test2():
    for s in strings:
        re.match('|'.join('(?:%s)' % p for p in patterns), s)

def test3():
    r = re.compile('|'.join('(?:%s)' % p for p in patterns))
    for s in strings:
        r.match(s)
"""

import sys
print(timeit.timeit("test0()", setup=setup, number=1000))
print(timeit.timeit("test1()", setup=setup, number=1000))
print(timeit.timeit("test2()", setup=setup, number=1000))
print(timeit.timeit("test3()", setup=setup, number=1000))
</snippet></ROW><ROW><id>10591106</id><snippet>1.4120500087738037
1.662621021270752
4.729579925537109
0.1489570140838623
</snippet></ROW><ROW><id>10591106</id><snippet>any</snippet></ROW><ROW><id>10591372</id><snippet>translate</snippet></ROW><ROW><id>10591372</id><snippet>&gt;&gt;&gt; '::2012-05-14 18:10:20.856000::'.translate(None, ' -.:')
'20120514181020856000'
</snippet></ROW><ROW><id>10591372</id><snippet>str</snippet></ROW><ROW><id>10591372</id><snippet>unicode</snippet></ROW><ROW><id>10591372</id><snippet>None</snippet></ROW><ROW><id>10591372</id><snippet>&gt;&gt;&gt; u'::2012-05-14 18:10:20.856000::'.translate({ord(k):None for k in u' -.:'})
u'20120514181020856000'
</snippet></ROW><ROW><id>10591372</id><snippet>re</snippet></ROW><ROW><id>10591372</id><snippet>&gt;&gt;&gt; timeit.timeit("""re.sub(r"[ -.:]", r"", "'::2012-05-14 18:10:20.856000::'")""","import re")
7.352270301875713
&gt;&gt;&gt; timeit.timeit("""'::2012-05-14 18:10:20.856000::'.translate(None, ' -.:')""")
0.5894893344550951
</snippet></ROW><ROW><id>10591447</id><snippet>&gt;&gt;&gt; unicodedata.normalize("NFKD", u"spëcïälchärs").encode('ascii', 'ignore')
'specialchars'
</snippet></ROW><ROW><id>10591447</id><snippet>str.translate</snippet></ROW><ROW><id>10591447</id><snippet>replace</snippet></ROW><ROW><id>10591447</id><snippet>str.translate</snippet></ROW><ROW><id>10591447</id><snippet>str.maketrans</snippet></ROW><ROW><id>10591479</id><snippet>lower</snippet></ROW><ROW><id>10591479</id><snippet>lower</snippet></ROW><ROW><id>10591479</id><snippet>lower</snippet></ROW><ROW><id>10591479</id><snippet>str</snippet></ROW><ROW><id>10591479</id><snippet>str.lower</snippet></ROW><ROW><id>10591479</id><snippet>obj.method</snippet></ROW><ROW><id>10591479</id><snippet>method</snippet></ROW><ROW><id>10591479</id><snippet>obj</snippet></ROW><ROW><id>10591479</id><snippet>method</snippet></ROW><ROW><id>10591479</id><snippet>self</snippet></ROW><ROW><id>10591479</id><snippet>method(obj)</snippet></ROW><ROW><id>10591479</id><snippet>def passMethod(obj, method):
    return method(obj)

passMethod('Hi', str.lower)
</snippet></ROW><ROW><id>10591479</id><snippet>def passMethod(obj, method):
    return getattr(obj, method)()

passMethod('Hi', 'lower')
</snippet></ROW><ROW><id>10591567</id><snippet># generator function to crawl web pages
def crawler():
    while iStillHaveWebPagesToCrawl():
        someStrings = getSomeStringsFromAWebPage()
        for aString in someStrings:
            yield aString

def oneStringAtATime():
    for aString in crawler():
        doSomethingWith( aString )
</snippet></ROW><ROW><id>10591567</id><snippet>oneStringAtATime()</snippet></ROW><ROW><id>10591567</id><snippet>crawler()</snippet></ROW><ROW><id>10591567</id><snippet>crawler()</snippet></ROW><ROW><id>10591567</id><snippet>yield</snippet></ROW><ROW><id>10591567</id><snippet>oneStringAtATime()</snippet></ROW><ROW><id>10591567</id><snippet>crawler()</snippet></ROW><ROW><id>10591567</id><snippet>oneStringAtATime()</snippet></ROW><ROW><id>10591870</id><snippet>pprint</snippet></ROW><ROW><id>10591870</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(x)
['Humidity\n',
 ['High',
  ['Outlook\n',
   ['Sunny',
    ['Temp\n',
     ['Hot', ['Wind\n', ['Weak', ['No']], ['Strong', ['No']]]],
     ['Mild', ['No']]]],
...
</snippet></ROW><ROW><id>10591892</id><snippet>db_dump</snippet></ROW><ROW><id>10591892</id><snippet>db_load</snippet></ROW><ROW><id>10591892</id><snippet>db_dump</snippet></ROW><ROW><id>10591892</id><snippet>$ db_dump my_broken_database
format=print
type=hash
h_nelem=77
db_pagesize=4096
HEADER=END
 key1\00
 this is a value\00
 key2\00
 this is another value\00
DATA=END
</snippet></ROW><ROW><id>10591892</id><snippet>$ db_dump my_broken_database &gt; data.txt
</snippet></ROW><ROW><id>10591892</id><snippet>db_load</snippet></ROW><ROW><id>10591892</id><snippet>$ db_load my_fixed_database &lt; data.txt
</snippet></ROW><ROW><id>10591992</id><snippet>def index(request):
    posts = Post.objects.filter(active=True)   
    return render(request, 'blog/index.html', {'posts': posts})
</snippet></ROW><ROW><id>10591992</id><snippet>{% for post in posts %}
    &lt;h2&gt;&lt;a href="{{ post.get_absolute_url }}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h2&gt;
    &lt;p&gt;{{ post.excerpt|truncatewords:30 }}&lt;/p&gt;
    &lt;p&gt;Posted by {{ post.user.first_name }} {{ post.user.last_name }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>10592347</id><snippet>class Book(models.Model):
  title = models.CharField(max_length=100, unique=True)
  tags = ManyToManyField(Tag)
</snippet></ROW><ROW><id>10592347</id><snippet>aspects</snippet></ROW><ROW><id>10592347</id><snippet>Book</snippet></ROW><ROW><id>10592347</id><snippet>BookAspect</snippet></ROW><ROW><id>10592347</id><snippet>class BookRating(models.Model):
  book = models.ForeignKey(Book)
  aspect = models.ForeignKey(Aspect)
  rating = models.RatingField()
  # Method to rate a book and check the aspect belong to one of the book's tags
  def rate(book, aspect):
    # check the aspect is related to a tag which is also related to the book
    # if so, save a new rating entry
  # You can also override the save() method to check the aspect is valid for the book
</snippet></ROW><ROW><id>10592536</id><snippet>items = ((k, k2, v) for k in d for k2, v in d[k].items())
ordered = sorted(items, key=lambda x: x[-1], reverse=True)
</snippet></ROW><ROW><id>10592536</id><snippet>(key_1, key_2, value)</snippet></ROW><ROW><id>10592536</id><snippet>reverse=True</snippet></ROW><ROW><id>10592536</id><snippet>&gt;&gt;&gt; pprint.pprint(ordered)
[('library', 'lamp', 6),
 ('library', 'wall', 2),
 ('hain', 'facet', 1),
 ('hain', 'wrapp', 1),
 ('hain', 'chinoiserie', 1),
 ('library', 'sconc', 1),
 ('library', 'floor', 1),
 ('library', 'desk', 1),
 ('library', 'table', 1),
 ('library', 'maine', 1)]
</snippet></ROW><ROW><id>10592536</id><snippet>key_1</snippet></ROW><ROW><id>10592536</id><snippet>for key_1, key_2, value in ordered:
    print key_1, key2, value         # add whatever formatting you want to here
</snippet></ROW><ROW><id>10592665</id><snippet>for eachjpgfile in filelist:
    os.chdir(eachjpgfile)
    newdirectorypath = os.curdir
    list_of_files = os.listdir(newdirectorypath)
    for eachfile in list_of_files:
         onlyfilename = os.path.splitext(eachfile)[0]
         if onlyfilename == 'doc':
            root, pathName= os.path.split(eachjpgfile) #split out dir name
            newjpgfilename = eachfile.replace(onlyfilename,pathName)
            os.rename(eachfile, newjpgfilename)
</snippet></ROW><ROW><id>10592718</id><snippet>import collections

def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
</snippet></ROW><ROW><id>10592718</id><snippet>def go(it):
    for x in it:
        if x == 'b':
            yield [x] + list(go(it))
        else:
            yield x
            if x == 'c':
                break
</snippet></ROW><ROW><id>10592718</id><snippet>go</snippet></ROW><ROW><id>10592718</id><snippet>flatten(output_of_go)</snippet></ROW><ROW><id>10592718</id><snippet>go(iter(string))</snippet></ROW><ROW><id>10592718</id><snippet>''.join(flatten(output_of_go))</snippet></ROW><ROW><id>10592718</id><snippet>lst = "aaabaabacabaacaca"
assert ''.join(flatten(go(iter(lst)))) == lst
</snippet></ROW><ROW><id>10592722</id><snippet>soup.&lt;something&gt;</snippet></ROW><ROW><id>10592722</id><snippet>&gt;&gt;&gt; for q in soup.find_all("sporsmal"):
...     print q.find("id", recursive=False).text
... 
47703
&gt;&gt;&gt; for q in soup.find_all("sporsmal"):
...     print q.find("id", recursive=True).text
... 
TG
&gt;&gt;&gt; for q in soup.find_all("sporsmal"):
...     print q.find("id").text # By default, the recursive call is true.
... 
TG
</snippet></ROW><ROW><id>10592722</id><snippet>&gt;&gt;&gt; soup.id
&lt;id&gt;TG&lt;/id&gt;
</snippet></ROW><ROW><id>10592722</id><snippet>sporsmal</snippet></ROW><ROW><id>10592722</id><snippet>kjoenn</snippet></ROW><ROW><id>10592722</id><snippet>&gt;&gt;&gt; soup.sporsmal.kjoenn
&lt;kjoenn&gt;mann&lt;/kjoenn&gt;
</snippet></ROW><ROW><id>10592728</id><snippet>&gt;&gt;&gt; l1 = [{'domain':'Ratios'},{'domain':'Geometry'}]
&gt;&gt;&gt; l2 = [3, 6]
&gt;&gt;&gt; for d,num in zip(l1,l2):
        d['count'] = num


&gt;&gt;&gt; l1
[{'count': 3, 'domain': 'Ratios'}, {'count': 6, 'domain': 'Geometry'}]
</snippet></ROW><ROW><id>10592728</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; [dict(chain(d.items(),[('count',n)])) for d,n in zip(l1,l2)]
[{'count': 3, 'domain': 'Ratios'}, {'count': 6, 'domain': 'Geometry'}]
</snippet></ROW><ROW><id>10592743</id><snippet>for ip in tt:
    child = pexpect.spawn("telnet %s" % ip)
    ...
</snippet></ROW><ROW><id>10592743</id><snippet>open</snippet></ROW><ROW><id>10592743</id><snippet>file</snippet></ROW><ROW><id>10592743</id><snippet>def inspect_ip(ip):
    ....
</snippet></ROW><ROW><id>10593154</id><snippet>inet_aton</snippet></ROW><ROW><id>10593154</id><snippet>inet_pton</snippet></ROW><ROW><id>10593154</id><snippet>int inet_aton(const char *, struct in_addr *);
int inet_pton(int, const char *, void *);
</snippet></ROW><ROW><id>10593154</id><snippet>inet_aton</snippet></ROW><ROW><id>10593175</id><snippet>np.log</snippet></ROW><ROW><id>10593175</id><snippet>ln</snippet></ROW><ROW><id>10593175</id><snippet>np.log10</snippet></ROW><ROW><id>10593176</id><snippet>import cPickle
# save the classifier
with open('my_dumped_classifier.pkl', 'wb') as fid:
    cPickle.dump(gnb, fid)    

# load it again
with open('my_dumped_classifier.pkl', 'rb') as fid:
    gnb_loaded = cPickle.load(fid)
</snippet></ROW><ROW><id>10593364</id><snippet>flask-sqlalchemy</snippet></ROW><ROW><id>10593410</id><snippet>for i in records[0]:
    for v in i:             
        header.append(v)
</snippet></ROW><ROW><id>10593410</id><snippet>for i in records:
    for v in i:
        if v not in header: header.append(v)
</snippet></ROW><ROW><id>10593410</id><snippet>import csv
testfile = open("test.csv", "w")
header = ["a","b", "a","b"]                      #duplicate header fields
writer = csv.DictWriter(testfile, header)
writer.writerow(dict(zip(header, header)))
writer.writerow({header[0]:"A", header[1]:"B"})  #notice it writes 4 values to the row
testfile.close()
</snippet></ROW><ROW><id>10593679</id><snippet>return next(dictionary.itervalues())
</snippet></ROW><ROW><id>10594134</id><snippet>.execute()</snippet></ROW><ROW><id>10594134</id><snippet>%s</snippet></ROW><ROW><id>10594134</id><snippet>sql_stmt = "UPDATE Players SET {} = %s WHERE nick=%s;".format(parts[1])
c.execute(sql_stmt, (int(parts[2]), parts[0]))
</snippet></ROW><ROW><id>10594142</id><snippet>IOError</snippet></ROW><ROW><id>10594142</id><snippet>def foo():
    try:
        f = open("file.txt")
        lines = f.readlines()
        return lines[0]
    except:
        return None
</snippet></ROW><ROW><id>10594142</id><snippet>IndexError</snippet></ROW><ROW><id>10594142</id><snippet>lines</snippet></ROW><ROW><id>10594142</id><snippet>None</snippet></ROW><ROW><id>10594451</id><snippet>defaultdict</snippet></ROW><ROW><id>10594451</id><snippet>from collections import defaultdict
values = defaultdict(int)
for o in my_object:
    values[o.day] += o.seconds
</snippet></ROW><ROW><id>10594451</id><snippet>Counter</snippet></ROW><ROW><id>10594451</id><snippet>from itertools import Counter
values = Counter()
for o in my_object:
    values += Counter({o.day: o.seconds})
</snippet></ROW><ROW><id>10594451</id><snippet>values.items() # or list(values.items()) in Python3
</snippet></ROW><ROW><id>10594634</id><snippet>col.type</snippet></ROW><ROW><id>10594678</id><snippet>def reverse_section(alist, start, end):
    return alist[:start] + list(reversed(alist[start:end+1])) + alist[end+1:]
</snippet></ROW><ROW><id>10594769</id><snippet>import pylab as pl
import numpy as np

x, y = np.mgrid[-2:1:100j, -1:1:100j]
z = np.sqrt(x*x+y*y)

cs = pl.contour(x, y, z, linewidths=2)

def path_length(path):
    v = path.vertices
    dv = np.diff(v, axis=0)
    return np.sum(np.sqrt(np.sum(dv**2, axis=-1)))

# remain the longest path and remove all others
deleted_path = []
for c in cs.collections:
    paths = c.get_paths()
    if len(paths) &gt; 1:
        paths.sort(key=path_length, reverse=True)
        for p in paths[1:]:
            deleted_path.append((c, p))
        del paths[1:]

# create labels
r = pl.clabel(cs, cs.levels, inline=True, fontsize=10)

# restore all removed paths
for c, p in deleted_path:
    c.get_paths().append(p)

pl.show()
</snippet></ROW><ROW><id>10594915</id><snippet>conn.commit()
</snippet></ROW><ROW><id>10595143</id><snippet>2</snippet></ROW><ROW><id>10595143</id><snippet>stdout</snippet></ROW><ROW><id>10595143</id><snippet>from ctypes import cdll</snippet></ROW><ROW><id>10595143</id><snippet>msvcrt</snippet></ROW><ROW><id>10595356</id><snippet>"</snippet></ROW><ROW><id>10595356</id><snippet>u = """my_www.%%first_game_start_time%%("%s", "%s")"""%("REN", "233_736")
</snippet></ROW><ROW><id>10595356</id><snippet>"</snippet></ROW><ROW><id>10595356</id><snippet>\</snippet></ROW><ROW><id>10595356</id><snippet>u = "my_www.%%first_game_start_time%%(\"%s\", \"%s\")"%("REN", "233_736")
</snippet></ROW><ROW><id>10595356</id><snippet>'</snippet></ROW><ROW><id>10595356</id><snippet>u = 'my_www.%%first_game_start_time%%("%s", "%s"))'%("REN", "233_736")
</snippet></ROW><ROW><id>10595662</id><snippet>appcfg.py download_data 
    --application=YourAppID --kind=YourKind
    --url=http://localhost:YourPort/_ah/remote_api 
    --filename=YourFileName
</snippet></ROW></DATA>