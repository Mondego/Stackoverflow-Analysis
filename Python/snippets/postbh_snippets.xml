<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>8032266</id><snippet>SortedList</snippet></ROW><ROW><id>8032266</id><snippet>def __str__(self):
    return str(self.L)
</snippet></ROW><ROW><id>8032502</id><snippet>python -m trace --trace some_script.py</snippet></ROW><ROW><id>8032502</id><snippet>python -m trace --count some_script.py</snippet></ROW><ROW><id>8032502</id><snippet>    1: def someFunc(aString):
            global numAs, numEs
    1:      s = aString
   10:      for i in range(len(aString)): 
    9:            if s[i] == 'a': 
    2:                numAs += 1 
    2:                continue 
    7:            if s[i] == 'e': 
    1:                numEs += 1 
    1:                if numEs &gt; numAs:  
                           break

    1: numAs = 0
    1: numEs = 0
    1: someFunc('flammable')
</snippet></ROW><ROW><id>8032599</id><snippet>exec_lines</snippet></ROW><ROW><id>8032599</id><snippet>c.InteractiveShellApp.exec_lines = [ "def f(s): print s" ]
</snippet></ROW><ROW><id>8032599</id><snippet>exec_files</snippet></ROW><ROW><id>8032599</id><snippet>c.InteractiveShellApp.exec_files = [ "/path/to/myscript.py" ] 
# if you put the script in the profile dir, just the filename will suffice
</snippet></ROW><ROW><id>8032599</id><snippet>glob.glob('*.py')</snippet></ROW><ROW><id>8032769</id><snippet>wordsofar</snippet></ROW><ROW><id>8032769</id><snippet>c.execute("SELECT word FROM wordlist WHERE word LIKE ?", wordsofar)
</snippet></ROW><ROW><id>8032769</id><snippet>c.execute("SELECT word FROM wordlist WHERE word LIKE ? AND word NOT LIKE ?", 
          wordsofar + (noletter,))
</snippet></ROW><ROW><id>8032769</id><snippet>noletter</snippet></ROW><ROW><id>8032769</id><snippet>wordsofar</snippet></ROW><ROW><id>8032769</id><snippet>execute()</snippet></ROW><ROW><id>8032769</id><snippet>parameters</snippet></ROW><ROW><id>8032769</id><snippet>len(parameters)</snippet></ROW><ROW><id>8033393</id><snippet>re.sub</snippet></ROW><ROW><id>8033393</id><snippet>lines = re.sub(pattern, key[1], lines)
</snippet></ROW><ROW><id>8033468</id><snippet>DAY_CHOICES = [('', 'Day')] + [(str(x), x) for x in range(1,32)]
</snippet></ROW><ROW><id>8033509</id><snippet>#</snippet></ROW><ROW><id>8033509</id><snippet>foo.pyx</snippet></ROW><ROW><id>8033509</id><snippet>include</snippet></ROW><ROW><id>8033509</id><snippet>*.pxd</snippet></ROW><ROW><id>8033598</id><snippet>0.0.0.0</snippet></ROW><ROW><id>8033598</id><snippet>0.0.0.0</snippet></ROW><ROW><id>8034278</id><snippet>int(digits) == 123456</snippet></ROW><ROW><id>8034278</id><snippet>conv_d = digits != None</snippet></ROW><ROW><id>8034278</id><snippet>digits</snippet></ROW><ROW><id>8034278</id><snippet>None</snippet></ROW><ROW><id>8034278</id><snippet>conv_d</snippet></ROW><ROW><id>8034278</id><snippet>conv_d = int(digits) if digits is not None else None
</snippet></ROW><ROW><id>8034278</id><snippet>def toint(s):
    try:
        return int(s)
    except (ValueError, TypeError):
        return None # or 0
</snippet></ROW><ROW><id>8034644</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; L=[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,1,2,3]
&gt;&gt;&gt; [k for k,v in Counter(L).items() if v==1]
[7, 8, 9]
</snippet></ROW><ROW><id>8034644</id><snippet>hash_counter = Counter(x[3] for x in self.files_for_json)
for (file,inode,image,hash) in self.files_for_json:
    if hash_counter[hash]&gt;1:
        # duplicated hash
        ...
</snippet></ROW><ROW><id>8034844</id><snippet>c.find('@')</snippet></ROW><ROW><id>8034844</id><snippet>agent,_,address = c.partition('@')
</snippet></ROW><ROW><id>8035323</id><snippet>message = sys.stdin.read()
sys.stdin = open('/dev/tty')
selected_index = raw_input('Which URL to open?')
</snippet></ROW><ROW><id>8035335</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>8035335</id><snippet>sys.stdout</snippet></ROW><ROW><id>8035335</id><snippet>print</snippet></ROW><ROW><id>8035335</id><snippet>file</snippet></ROW><ROW><id>8035335</id><snippet>print</snippet></ROW><ROW><id>8036400</id><snippet>os.read</snippet></ROW><ROW><id>8036400</id><snippet>class str</snippet></ROW><ROW><id>8036400</id><snippet>class bytes</snippet></ROW><ROW><id>8036400</id><snippet>if READ == "\n": READ="C:\\temp"</snippet></ROW><ROW><id>8036400</id><snippet>True</snippet></ROW><ROW><id>8036400</id><snippet>if str(READ,"ascii") == os.linesep: READ = "C:\\temp"
</snippet></ROW><ROW><id>8036400</id><snippet>import os,sys
READ = os.read(0,100)
if str(READ,sys.stdin.encoding) == os.linesep:
   READ = "C:\\temp"
</snippet></ROW><ROW><id>8036642</id><snippet>from gi.repository import GtkClutter</snippet></ROW><ROW><id>8036833</id><snippet>% python
Python 2.7.2+ (default, Oct  4 2011, 20:03:08) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 'k\xf8**e' in [u'k\xf8**e']
__main__:1: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
False
</snippet></ROW><ROW><id>8036833</id><snippet>s</snippet></ROW><ROW><id>8036833</id><snippet>str object</snippet></ROW><ROW><id>8036833</id><snippet>liste</snippet></ROW><ROW><id>8036833</id><snippet>ordliste</snippet></ROW><ROW><id>8036833</id><snippet>unicode</snippet></ROW><ROW><id>8036833</id><snippet>str object</snippet></ROW><ROW><id>8036833</id><snippet>utf-8</snippet></ROW><ROW><id>8036833</id><snippet>unicode</snippet></ROW><ROW><id>8036833</id><snippet>print(repr(s))
print(repr(liste))
print(repr(ordliste))
</snippet></ROW><ROW><id>8036833</id><snippet>unicode</snippet></ROW><ROW><id>8036833</id><snippet>ordliste</snippet></ROW><ROW><id>8036833</id><snippet>norsk.txt</snippet></ROW><ROW><id>8036833</id><snippet>codecs.open('norsk.txt','r','utf-8')</snippet></ROW><ROW><id>8036833</id><snippet>encoding = sys.stdin.encoding
with codecs.open('norsk.txt','r','utf-8') as fil:
    ordliste = [line.rstrip(u'\n') for line in fil]
</snippet></ROW><ROW><id>8036833</id><snippet>def get_unicode(widget):
    streng = widget.get()
    try:
        streng = streng.decode('utf-8')
    except UnicodeEncodeError:
        pass
    return streng
</snippet></ROW><ROW><id>8036833</id><snippet>import Tkinter as tk
import tkMessageBox
import codecs
import itertools
import sys

alfabetet = (u"abcdefghijklmnopqrstuvwxyz"
             u"\N{LATIN SMALL LETTER AE}"
             u"\N{LATIN SMALL LETTER O WITH STROKE}"
             u"\N{LATIN SMALL LETTER A WITH RING ABOVE}")

encoding = sys.stdin.encoding
with codecs.open('norsk.txt','r',encoding) as fil:
    ordliste = set(line.rstrip(u'\n') for line in fil)

def get_unicode(widget):
    streng = widget.get()
    if isinstance(streng,str):
        streng = streng.decode('latin-1')
    return streng

def siord():
    alfa=lagtabell()
    try:
        streng = get_unicode(ordinn)
        ordene=finnord(streng,alfa)
        if len(ordene) == 0:
            # There are no words that match
            tkMessageBox.showinfo('Dessverre..','Det er ingen ord som passer...')
        else:
            # Done: The words that fit the pattern
            tkMessageBox.showinfo('Ferdig',
                'Ordene som passer er:\n'+ordene.encode('utf-8'))
    except Exception as err:
        # There has been a mistake .. Check your word
        print(repr(err))
        tkMessageBox.showerror('ERROR','Det har skjedd en feil.. Sjekk ordet ditt.')

def finnord(streng,alfa): 
    liste = set()
    for substitution in itertools.permutations(alfa,streng.count(u'*')):
        s = streng
        for ch in substitution:
            s = s.replace(u'*',ch,1)
        if s in ordliste:
            liste.add(s)
    liste = [streng]+list(liste)
    return u','.join(liste)+u'.'

def lagtabell():
    tinbox = get_unicode(bokstinn)
    if not tinbox.isalpha():
        alfa = alfabetet
    else:
        alfa = tinbox.lower()
    return alfa

root = tk.Tk()
root.title('FeudHjelper av Martin Skow Røed')
root.geometry('400x250+450+200')
# root.iconbitmap('data/ikon.ico')

skrift1 = tk.Label(root,
                text = '''\
Velkommen til FeudHjelper. Skriv inn de bokstavene du har, og erstatt ukjente med *.
F. eks: sl**ge
Det er kun lov til å bruke tre stjerner, altså tre ukjente bokstaver.''',
                font = ('Verdana',8), wraplength=350)
skrift1.pack(pady = 5)

ordinn = tk.StringVar(None)
tekstboks = tk.Entry(root, textvariable = ordinn)
tekstboks.pack(pady = 5)

# What letters do you have? Eg "ahneki". Leave blank here if you want all the words.
skrift2 = tk.Label(root, text = '''Hvilke bokstaver har du? F. eks "ahneki". La det være blankt her hvis du vil ha alle ordene.''',
                font = ('Verdana',8), wraplength=350)
skrift2.pack(pady = 10)

bokstinn = tk.StringVar(None)
tekstboks2 = tk.Entry(root, textvariable = bokstinn)
tekstboks2.pack()

knapp = tk.Button(text = 'Finn ord!', command = siord)
knapp.pack(pady = 10)
root.mainloop()
</snippet></ROW><ROW><id>8037049</id><snippet>stdout</snippet></ROW><ROW><id>8037049</id><snippet>subprocess.Popen(...)
</snippet></ROW><ROW><id>8037049</id><snippet>MyWriter</snippet></ROW><ROW><id>8037078</id><snippet>from numpy import vectorize
vfunc = vectorize(func)
y = vfunc(x)
</snippet></ROW><ROW><id>8037079</id><snippet>not any(dict.itervalues())
</snippet></ROW><ROW><id>8037079</id><snippet>all(not X for X in dict.itervalues())
</snippet></ROW><ROW><id>8037146</id><snippet>Note.objects.all().order_by('note_data__created')
</snippet></ROW><ROW><id>8037300</id><snippet>migrate=False</snippet></ROW><ROW><id>8037300</id><snippet>Auth.define_tables()</snippet></ROW><ROW><id>8037300</id><snippet>migrate</snippet></ROW><ROW><id>8037300</id><snippet>Auth</snippet></ROW><ROW><id>8037300</id><snippet>auth.define_tables(migrate=False)
</snippet></ROW><ROW><id>8037300</id><snippet>db = DAL(..., migrate_enabled=False)
</snippet></ROW><ROW><id>8037343</id><snippet>TextProperty</snippet></ROW><ROW><id>8037343</id><snippet>TextProperty</snippet></ROW><ROW><id>8037343</id><snippet>StringProperty</snippet></ROW><ROW><id>8037540</id><snippet>k</snippet></ROW><ROW><id>8037540</id><snippet>collections.deque</snippet></ROW><ROW><id>8037540</id><snippet>list</snippet></ROW><ROW><id>8037540</id><snippet>from collections import deque

def dequefilter(deck, condition):
    for _ in xrange(len(deck)):
        item = deck.popleft()
        if condition(item):
            deck.append(item)

deck = deque((1, 2, 3, 4, 5))
dequefilter(deck, lambda x: x &gt; 2) # or operator.gt(2)
print deck
# deque([3, 4, 5])
</snippet></ROW><ROW><id>8037620</id><snippet>objdump -p TestDll.dll | grep dll</snippet></ROW><ROW><id>8037620</id><snippet>nm TestDll.dll | grep Dll</snippet></ROW><ROW><id>8037620</id><snippet>DllMain</snippet></ROW><ROW><id>8037620</id><snippet>g++ testdll.c -mno-cygwin -shared -o TestDll.dll
</snippet></ROW><ROW><id>8037620</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; dll = ctypes.CDLL('TestDll')
&gt;&gt;&gt; dll.sum(4, 5)
9
</snippet></ROW><ROW><id>8037620</id><snippet>i686-w64-mingw32-g++.exe</snippet></ROW><ROW><id>8037994</id><snippet>strings = ['a','b','c']
widths1 = [10, 15, 3]
widths2 = [5, 5, 7]
''.join('%*.*s' %i for i in zip(widths1, widths2, strings))
</snippet></ROW><ROW><id>8037994</id><snippet>'         a              b  c'
</snippet></ROW><ROW><id>8037994</id><snippet>.</snippet></ROW><ROW><id>8038032</id><snippet>Results</snippet></ROW><ROW><id>8038032</id><snippet>result['SearchResponse']['Translation']['Results'][0]['TranslatedTerm']
</snippet></ROW><ROW><id>8038203</id><snippet>&gt;&gt;&gt; s = 'blah blah iden=\ntifier blah blah'
&gt;&gt;&gt; print s
blah blah iden=
tifier blah blah
&gt;&gt;&gt; s.replace('=\n', '')
'blah blah identifier blah blah'
&gt;&gt;&gt; s.replace('=\n', '').find('identifier')
10
</snippet></ROW><ROW><id>8038406</id><snippet>revision</snippet></ROW><ROW><id>8038406</id><snippet>Version</snippet></ROW><ROW><id>8038406</id><snippet>reversion.get_for_object(Model)</snippet></ROW><ROW><id>8038406</id><snippet>Version</snippet></ROW><ROW><id>8038406</id><snippet>version.revision.user
</snippet></ROW><ROW><id>8038406</id><snippet>versions = reversion.get_for_object(MyModel)

for version in versions:
    print '%s made this revision' % version.revision.user.username
</snippet></ROW><ROW><id>8038407</id><snippet>glob()</snippet></ROW><ROW><id>8038407</id><snippet>os.listdir()</snippet></ROW><ROW><id>8038407</id><snippet>import os,re
for f in os.listdir("/path/to/dir"):
    if re.match(r"^\d+\.txt$", f):
        print(f)
</snippet></ROW><ROW><id>8038699</id><snippet>import zmq

context = zmq.Context()
sender = context.socket(zmq.PUB)
sender.connect("tcp://localhost:5555")

sender.send("Sending to nobody", zmq.NOBLOCK)

print "Msg sent"
</snippet></ROW><ROW><id>8038699</id><snippet>close()</snippet></ROW><ROW><id>8038699</id><snippet>LINGER</snippet></ROW><ROW><id>8038699</id><snippet>sender = context.socket(zmq.PUB)
sender.setsockopt(zmq.LINGER, 100)
</snippet></ROW><ROW><id>8038699</id><snippet>zmq_setsockopt</snippet></ROW><ROW><id>8038809</id><snippet>Permission</snippet></ROW><ROW><id>8038809</id><snippet>Product</snippet></ROW><ROW><id>8038809</id><snippet>ecom/models/__init__.py</snippet></ROW><ROW><id>8039368</id><snippet>selected_values = (e_data &gt; (no_data + eps)) &amp; (e_data &lt; (no_data - eps))
pyplot.hist(e_data[selected_values])
</snippet></ROW><ROW><id>8039368</id><snippet>(e_data &gt; (no_data + eps))</snippet></ROW><ROW><id>8039368</id><snippet>np.bool</snippet></ROW><ROW><id>8039368</id><snippet>e_data</snippet></ROW><ROW><id>8039368</id><snippet>True</snippet></ROW><ROW><id>8039368</id><snippet>(no_data + eps)</snippet></ROW><ROW><id>8039368</id><snippet>&amp;</snippet></ROW><ROW><id>8039368</id><snippet>no_data</snippet></ROW><ROW><id>8039368</id><snippet>numpy.nan</snippet></ROW><ROW><id>8039368</id><snippet>e_data[numpy.isfinite(e_data)]</snippet></ROW><ROW><id>8039527</id><snippet>sys.version</snippet></ROW><ROW><id>8039584</id><snippet>key = value</snippet></ROW><ROW><id>8039584</id><snippet>text = file("text.txt", "r").readlines()

skip_keys = ('film', '')
data_dict = {}
for each in text:
    temp = [x.strip() for x in each.split('=')]
    if temp[0] in skip_keys:
        continue
    if len(temp) == 2:
        data_dict[temp[0]] = temp[1]
    else:
        data_dict['no_key'] = temp[0]
print data_dict
</snippet></ROW><ROW><id>8040090</id><snippet>mydate = datetime.datetime.now()
myxmldate = '&lt;start&gt;%s&lt;/start&gt;' % mydate.isoformat()
</snippet></ROW><ROW><id>8040549</id><snippet>import numpy

# Populate the lattice
lattice = numpy.concatenate([numpy.ones(90), numpy.zeros(10)])
numpy.random.shuffle(lattice)

# Intialize problem
in_trap = False
steps = 0
pos = int(numpy.random.randint(0,len(lattice),1))
history = []

while in_trap == False:
    # Step of -1 is backward, 1 is forward
    step = numpy.random.permutation([-1,1])[0]

    # Check position for edges and fix if required
    if pos + step &gt; len(lattice) - 1:
        pos = 0
    elif pos + step &lt; 0:
        pos = len(lattice) - 1
    else:
        pos += step

    # Keep track of random walk
    history.append(pos)

    # Check if it's a trap
    if lattice[pos] == 0:
        in_trap = True

    # If not, continue
    steps += 1


print steps
print history
print lattice
</snippet></ROW><ROW><id>8040549</id><snippet>def lattice():
    code
    return steps, history

steps = []
histories = []
for i in range(0,10):
    num_steps, history = lattice()
    steps.append(num_steps)
    histories.append(history)
</snippet></ROW><ROW><id>8040772</id><snippet>import re
filename = re.findall("filename=(\S+)", f[1]['Content-Disposition'])
</snippet></ROW><ROW><id>8040812</id><snippet>&gt;&gt;&gt; a = '2(3.4)'
&gt;&gt;&gt; a[a.index("(") + 1:a.rindex(")")]
'3.4'
</snippet></ROW><ROW><id>8041222</id><snippet>myarr += [""] * (15 - len(myarr))
</snippet></ROW><ROW><id>8041301</id><snippet>devFound = any(d['name'] == devName for d in dev['devices'])
</snippet></ROW><ROW><id>8041399</id><snippet>__init__.py
</snippet></ROW><ROW><id>8041399</id><snippet>module = __import__("subdirectory.jack2")
</snippet></ROW><ROW><id>8041399</id><snippet>sys.path</snippet></ROW><ROW><id>8041399</id><snippet>sys</snippet></ROW><ROW><id>8041399</id><snippet>import sys
sys.path.append("full/path/to/directory/to/import/from")
</snippet></ROW><ROW><id>8041399</id><snippet>__import__</snippet></ROW><ROW><id>8041399</id><snippet>module = __import__("mymodule")
result = module.mymodule.myfunction()
</snippet></ROW><ROW><id>8041634</id><snippet>root.after</snippet></ROW><ROW><id>8041634</id><snippet>update</snippet></ROW><ROW><id>8041634</id><snippet>strl = tk.StringVar()</snippet></ROW><ROW><id>8041634</id><snippet>tk.Label(...,textvariable=strl)</snippet></ROW><ROW><id>8041634</id><snippet>strl.set()</snippet></ROW><ROW><id>8041634</id><snippet>screenroot</snippet></ROW><ROW><id>8041634</id><snippet>display.Display().screen().root</snippet></ROW><ROW><id>8041634</id><snippet>mousepos</snippet></ROW><ROW><id>8041634</id><snippet>mousepos</snippet></ROW><ROW><id>8041634</id><snippet>mousepos()</snippet></ROW><ROW><id>8041634</id><snippet>import Tkinter as tk
import Xlib.display as display

def mousepos(screenroot=display.Display().screen().root):
    pointer = screenroot.query_pointer()
    data = pointer._data
    return data["root_x"], data["root_y"]

def update():
    strl.set("mouse at {0}".format(mousepos()))
    root.after(100, update)

root = tk.Tk()
strl = tk.StringVar()
lab = tk.Label(root,textvariable=strl)
lab.pack()
root.after(100, update)
root.title("Mouseposition")
root.mainloop()
</snippet></ROW><ROW><id>8041638</id><snippet>random.seed()
</snippet></ROW><ROW><id>8041638</id><snippet>print(roll_die())
</snippet></ROW><ROW><id>8041809</id><snippet>validMoves = [item for item in pegholes if item != PEGGED]
</snippet></ROW><ROW><id>8041905</id><snippet>alist = ['a', 'man', 'ran', 'at', 'a', 'catamaran', 'boat']
result = set()
for word1 in alist:
    if word1 in result:
        continue # shortcut for performance reasons only
    to_remove = []
    for word2 in result:
        if word1 in word2:
            break
        if word2 in word1:
            to_remove.append(word2)
    else:
        result.add(word1)
    for word in to_remove:
        result.remove(word)
print result
</snippet></ROW><ROW><id>8041905</id><snippet>set(['catamaran', 'boat', 'man'])
</snippet></ROW><ROW><id>8041910</id><snippet>walk</snippet></ROW><ROW><id>8041910</id><snippet>payload</snippet></ROW><ROW><id>8041968</id><snippet>and</snippet></ROW><ROW><id>8041968</id><snippet>'var1' and 'var2' in theQuestion
True   and 'var2' in theQuestion # Since bool('var1') == True
           'var2' in theQuestion
</snippet></ROW><ROW><id>8041968</id><snippet>if 'var1' in theQuestion and 'var2' in theQuestion:
</snippet></ROW><ROW><id>8041968</id><snippet>if all(k in theQuestion for k in ('var1', 'var2')):
</snippet></ROW><ROW><id>8042368</id><snippet>c:\WINDOWS\system32\python27.dll
</snippet></ROW><ROW><id>8042368</id><snippet>c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxbase28uh_net_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxbase28uh_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxbase28uh_xml_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_adv_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_aui_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_core_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_gizmos_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_gizmos_xrc_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_gl_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_html_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_media_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_qa_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_richtext_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_stc_vc.dll
c:\Python27\Lib\site-packages\wx-2.8-msw-unicode\wx\wxmsw28uh_xrc_vc.dll
</snippet></ROW><ROW><id>8042644</id><snippet>True</snippet></ROW><ROW><id>8042644</id><snippet>while</snippet></ROW><ROW><id>8042644</id><snippet>if</snippet></ROW><ROW><id>8042644</id><snippet>def ask_number(low, high):
    while True:
        try:
            number = int(raw_input("Enter a number within the range: "))
        except ValueError:
            continue
        if low &lt;= number &lt;= high:
            return number
</snippet></ROW><ROW><id>8042644</id><snippet>try</snippet></ROW><ROW><id>8042644</id><snippet>except</snippet></ROW><ROW><id>8042872</id><snippet>result = template.render({'a' : "value-1" })
# in the template {% set b = "value-2" %}
b = template.module.b
</snippet></ROW><ROW><id>8043433</id><snippet>#!/usr/bin/python

class Hello:
    def __init__(self):
        print "Hello, Interactive Shell World!"
        raw_input()
</snippet></ROW><ROW><id>8043433</id><snippet>&gt;&gt;&gt; from hello import Hello
&gt;&gt;&gt; Hello()
Hello, Interactive Shell World!

&lt;hello.Hello instance at 0xb782686c&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8043433</id><snippet>&gt;&gt;&gt; h = Hello()
</snippet></ROW><ROW><id>8043433</id><snippet>if __name__ == '__main__':
    Hello()
</snippet></ROW><ROW><id>8043832</id><snippet>root
  + --- tests
  |       + --- unit_tests
  |       |         + --- some_app_tests   
  |       |         + --- another_app_tests
  |       |         | run_tests.py
  |       |
  |       + --- integrate_tests 
  |                 + --- some_app_tests
  |                 + --- another_app_tests
  |                 | run_tests.py
  |       
  + --- project_root
          + --- some_app
          + --- another_app
</snippet></ROW><ROW><id>8043837</id><snippet>def pytest_funcarg__some_data(request):
    def create():
        # Load the test data here
        print 'Test data loaded'

    return request.cached_setup(
        setup=create,
        scope='session',
        extrakey='some_data'
    )

def uses_some_data(func):
    # The funcarg is actually requested here
    def wrapper(self, some_data):
        return func
    return wrapper

class TestSomething(object):
    @uses_some_data
    def test_something(self):
        # "Some data" is now available
        pass
</snippet></ROW><ROW><id>8044191</id><snippet>#!/usr/bin/env python

import random
import sys

pegs = range(2, 11)

def roll_dice():
    return random.randint(1, 5) + random.randint(1, 5)

while True:
    roll = roll_dice()
    print "You rolled %s" %roll
    available_choices = set(p for p in pegs if p != 'X') - set(range(roll+1, 11))
    if len(available_choices) == 0:
        print "FAIL SAUCE"
        sys.exit()
    while True:
        choice = raw_input("Choose a number %s: " % (", ".join(str(x) for x in sorted(list(available_choices)))))
        if choice == 'q':
            sys.exit()
        choice = int(choice)
        if choice in available_choices:
            break
        print "Nice try buddy... pick a number in range, that hasn't been picked"
    pegs[choice - 2] = 'X'
    print "".join("(%s)" % p for p in pegs)
    if len([x for x in pegs if x == 'X']) == 9:
        print "WINNER!"
        sys.exit()
</snippet></ROW><ROW><id>8044259</id><snippet>Willian</snippet></ROW><ROW><id>8044259</id><snippet>...
url(r'^anagrafica/$','gpf1.views.anagrafica'),
...
url(r'^anagrafica/new/$','gpf1.views.anagrafica_new'),
...
</snippet></ROW><ROW><id>8044259</id><snippet>url(r'^anagrafica/','gpf1.views.anagrafica')
</snippet></ROW><ROW><id>8044259</id><snippet>anagrafica/anything here</snippet></ROW><ROW><id>8044259</id><snippet>gpf1.views.anagrafica</snippet></ROW><ROW><id>8044330</id><snippet>&gt;&gt;&gt; sys.getsizeof(bitArray.tobytes()) / float(len(sequence))
1.2972972973
</snippet></ROW><ROW><id>8044330</id><snippet>getsizeof</snippet></ROW><ROW><id>8044330</id><snippet>getsizeof(sequence)</snippet></ROW><ROW><id>8044330</id><snippet>len</snippet></ROW><ROW><id>8044330</id><snippet>len</snippet></ROW><ROW><id>8044936</id><snippet>subprocess</snippet></ROW><ROW><id>8044936</id><snippet>os.system()</snippet></ROW><ROW><id>8044936</id><snippet>Thread</snippet></ROW><ROW><id>8044936</id><snippet>Thread(target=func, args=func_args).start()
</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript.start(options.script)</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript(options.script).start()</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript(options.script)</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript.start(options.script)</snippet></ROW><ROW><id>8044936</id><snippet>.start</snippet></ROW><ROW><id>8044936</id><snippet>options.script</snippet></ROW><ROW><id>8044936</id><snippet>obj.method()</snippet></ROW><ROW><id>8044936</id><snippet>obj = AsyncScript(options.script)</snippet></ROW><ROW><id>8044936</id><snippet>threading.Thread.__init__(self)</snippet></ROW><ROW><id>8044936</id><snippet>AsyncScript.__init__()</snippet></ROW><ROW><id>8044936</id><snippet>threading.Thread.__init__(self)</snippet></ROW><ROW><id>8044936</id><snippet>_initialized</snippet></ROW><ROW><id>8044951</id><snippet>sum([1, 2, 3, 4])
</snippet></ROW><ROW><id>8044951</id><snippet>[1, 2, 3, 4][::-1]
</snippet></ROW><ROW><id>8044951</id><snippet>def sum(lst):
    s = 0
    for e in lst:
        s += e
    return s

def reverse(lst):
    l = []
    for e in lst:
        l = [e] + l
    return l
</snippet></ROW><ROW><id>8044971</id><snippet>SimpleHTTPRequestHandler</snippet></ROW><ROW><id>8044971</id><snippet>import cgi, os, SocketServer, sys, time, urllib
from SimpleHTTPServer import SimpleHTTPRequestHandler
from StringIO import StringIO

class DirectoryHandler(SimpleHTTPRequestHandler):
    def list_directory(self, path):
        try:
            list = os.listdir(path)
        except os.error:
            self.send_error(404, "No permission to list directory")
            return None
        list.sort(key=lambda a: a.lower())
        f = StringIO()
        displaypath = cgi.escape(urllib.unquote(self.path))
        f.write('&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;')
        f.write("&lt;html&gt;\n&lt;title&gt;Directory listing for %s&lt;/title&gt;\n" % displaypath)
        f.write("&lt;body&gt;\n&lt;h2&gt;Directory listing for %s&lt;/h2&gt;\n" % displaypath)
        f.write("&lt;hr&gt;\n&lt;ul&gt;\n")
        for name in list:
            fullname = os.path.join(path, name)
            displayname = linkname = name
            date_modified = time.ctime(os.path.getmtime(fullname))
            # Append / for directories or @ for symbolic links
            if os.path.isdir(fullname):
                displayname = name + "/"
                linkname = name + "/"
            if os.path.islink(fullname):
                displayname = name + "@"
                # Note: a link to a directory displays with @ and links with /
            f.write('&lt;li&gt;&lt;a href="%s"&gt;%s - %s&lt;/a&gt;\n'
                    % (urllib.quote(linkname), cgi.escape(displayname), date_modified))
        f.write("&lt;/ul&gt;\n&lt;hr&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n")
        length = f.tell()
        f.seek(0)
        self.send_response(200)
        encoding = sys.getfilesystemencoding()
        self.send_header("Content-type", "text/html; charset=%s" % encoding)
        self.send_header("Content-Length", str(length))
        self.end_headers()
        return f

httpd = SocketServer.TCPServer(("", 8000), DirectoryHandler)
print "serving at port", 8000
httpd.serve_forever()
</snippet></ROW><ROW><id>8044971</id><snippet>list_directory</snippet></ROW><ROW><id>8044971</id><snippet>    date_modified = time.ctime(os.path.getmtime(fullname))
</snippet></ROW><ROW><id>8045223</id><snippet>lxml</snippet></ROW><ROW><id>8045223</id><snippet>requests</snippet></ROW><ROW><id>8045223</id><snippet>import requests
import lxml.html as lh
from BeautifulSoup import UnicodeDammit

URL = "http://en.wikipedia.org/w/index.php?title=data_mining&amp;printable=yes"
HEADERS = {'User-agent': 'Mozilla/5.0'}

def lhget(*args, **kwargs):
    r = requests.get(*args, **kwargs)
    html = UnicodeDammit(r.content).unicode
    tree = lh.fromstring(html)
    return tree

def remove(el):
    el.getparent().remove(el)

tree = lhget(URL, headers=HEADERS)

el = tree.xpath("//div[@class='mw-content-ltr']/p")[0]

for ref in el.xpath("//sup[@class='reference']"):
    remove(ref)

print lh.tostring(el, pretty_print=True)

print el.text_content()
</snippet></ROW><ROW><id>8045552</id><snippet>import re

BAD_WORDS = ["spam", "ham"]
BAD_WORDS_RE = re.compile(r"\b(%s)\b" % "|".join(BAD_WORDS))

for i, line in enumerate(open("file.txt").readlines()):
    words = set(BAD_WORDS_RE.findall(line))
    if words:
        print "Found the following words on line %i: %s" % (i + 1, ", ".join(words))
        print line
</snippet></ROW><ROW><id>8045687</id><snippet>cache={}
def expensive_calc(x):
    # If x is a numpy array, you need to convert x into something hashable so it
    # can be used as a key in cache.
    key=tuple(x)
    try:
        return cache[key]
    except KeyError:
        # do expensive calc for result
        cache[key] = result
        return result

def func(x):
    y=expensive_calc(x)
    return something_based_on_y

def func_der(x):
    y=expensive_calc(x)
    return something_else_based_on_y

def optimize_fmin_bfgs():
    xopt = fmin_bfgs(func, x_guess, fprime=func_der)  
</snippet></ROW><ROW><id>8045756</id><snippet>&gt;&gt;&gt; class A(object):
        def f(self):
            pass

&gt;&gt;&gt; A.f                         # dotted access calls f.__get__
&lt;unbound method A.f&gt;
&gt;&gt;&gt; vars(A)['f']                # dict access bypasses f.__get__
&lt;function f at 0x101723500&gt;

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.f                         # dotted access calls f.__get__
&lt;bound method A.f of &lt;__main__.A object at 0x10171e810&gt;&gt;
&gt;&gt;&gt; vars(a.__class__)['f']      # dict access bypasses f.__get__
&lt;function f at 0x101723500&gt;
</snippet></ROW><ROW><id>8045756</id><snippet>class lazyobject2(lazyobject):

    def __getattribute__(self, key):
        # bypass __get__
        return object.__getattribute__(self, '__dict__')[key]
</snippet></ROW><ROW><id>8045969</id><snippet>def remove(self, item):
    finalSet=[]
    for item in self.s_list:
        if item not in finalSet:
            finalSet.append(item)
            return finalSet
</snippet></ROW><ROW><id>8045969</id><snippet>item</snippet></ROW><ROW><id>8046160</id><snippet>abspath = os.path.abspath
dirname = os.path.dirname
# 15 lines of heavy usage of those functions
a = abspath(somepath)
d = dirname(somepath)
...
del abspath, dirname
</snippet></ROW><ROW><id>8046160</id><snippet>&gt;&gt;&gt; import math as m
&gt;&gt;&gt; m.sin(x / 2.0) + m.sin(x * m.pi)

&gt;&gt;&gt; p = os.path
...
&gt;&gt;&gt; a = p.abspath(somepath)
&gt;&gt;&gt; d = p.dirname(somepath)
</snippet></ROW><ROW><id>8046160</id><snippet>d = dict(abspath = os.path.abspath,
         dirname = os.path.dirname)
...
a = d['abspath'](somepath)
d = d['dirname'](somepath)
</snippet></ROW><ROW><id>8046160</id><snippet> def temp():                        # disadvantage 1: awkward setup
    global a, d                     # disadvantage 2: global declarations
    abspath = os.path.abspath
    dirname = os.path.dirname
    # 15 lines of heavy usage of those functions
    a = abspath(somepath)
    d = dirname(somepath)
 temp()                             # disadvantage 3: invoking the code
</snippet></ROW><ROW><id>8046254</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG')
&gt;&gt;&gt; group = parser.add_mutually_exclusive_group()
&gt;&gt;&gt; group.add_argument('--foo', action='store_true')
&gt;&gt;&gt; group.add_argument('--bar', action='store_false')
&gt;&gt;&gt; parser.parse_args(['--foo'])
Namespace(bar=True, foo=True)
&gt;&gt;&gt; parser.parse_args(['--bar'])
Namespace(bar=False, foo=False)
&gt;&gt;&gt; parser.parse_args(['--foo', '--bar'])
usage: PROG [-h] [--foo | --bar]
PROG: error: argument --bar: not allowed with argument --foo
</snippet></ROW><ROW><id>8046277</id><snippet>os.stat()</snippet></ROW><ROW><id>8046277</id><snippet>os.stat()</snippet></ROW><ROW><id>8046277</id><snippet>os.stat()</snippet></ROW><ROW><id>8046277</id><snippet>filecmp.cmp()</snippet></ROW><ROW><id>8046277</id><snippet>True</snippet></ROW><ROW><id>8046277</id><snippet>os.stat</snippet></ROW><ROW><id>8047253</id><snippet>from your_project import settings
from django.core.management import setup_environ
setup_environ(settings)
</snippet></ROW><ROW><id>8047329</id><snippet>curl -so /dev/null 'http://www.windowsphone.com/en-US/apps?list=free' -c 'myCookieJar'
</snippet></ROW><ROW><id>8047329</id><snippet>more myCookieJar</snippet></ROW><ROW><id>8047329</id><snippet># Netscape HTTP Cookie File
# http://www.netscape.com/newsref/std/cookie_spec.html
# This file was generated by libcurl! Edit at your own risk.

.www.windowsphone.com   TRUE    /       FALSE   0       WPMSLSS SLSS=1
login.live.com  FALSE   /       FALSE   0       MSPRequ lt=1320738008&amp;co=1&amp;id=268289
</snippet></ROW><ROW><id>8047329</id><snippet>curl -so 'windowsphone.html' 'http://www.windowsphone.com/en-US/apps?list=free' -b 'myCookieJar'
</snippet></ROW><ROW><id>8047726</id><snippet>USE_PYTHON=yes
USE_PYDISTUTILS=yes
</snippet></ROW><ROW><id>8047729</id><snippet>s = "123321124421125521"
pat = re.compile("(1(2[3456]+2)+1)")
print pat.findall(s)
</snippet></ROW><ROW><id>8047729</id><snippet>findall()</snippet></ROW><ROW><id>8047771</id><snippet>mystuff.py</snippet></ROW><ROW><id>8047771</id><snippet>mystuff/__init__.py</snippet></ROW><ROW><id>8047826</id><snippet>[i for i in xrange(no_jobs) for x in xrange(T)]
</snippet></ROW><ROW><id>8047949</id><snippet>class MyForm(forms.Form):
    to_select = forms.MultipleChoiceField(widget=forms.CheckboxInput, choices=[])
</snippet></ROW><ROW><id>8047949</id><snippet>class MyForm(forms.ModelForm):
    class Meta():
        model=Subgroup
</snippet></ROW><ROW><id>8048000</id><snippet>onchange</snippet></ROW><ROW><id>8048000</id><snippet>class Language(forms.Form):
    language = forms.ModelChoiceField(queryset=Category.objects.all(), widget=forms.Select(attrs={'onchange':'ajaxfunction()'}))
</snippet></ROW><ROW><id>8048071</id><snippet>rows = [[1,2,3,4],[3,5,88,9],[4,55,-6,0],[0,34,22,1222]]
t1 = [(min([row[i] for row in rows]),max([row[i] for row in rows])) for i in range(len(rows[0]))]
print(t1)

# Easy loop
t2 = []
for i in range(len(rows[0])):
    innerElements = []
    for row in rows:
        innerElements.append(row[i])
    newTuple = ( min(innerElements),max(innerElements) )
    t2.append(newTuple)

print(t2)
</snippet></ROW><ROW><id>8048197</id><snippet>with open('file.txt') as file:
    for line in file:
        print(re.sub('windows', 'linux', line))
</snippet></ROW><ROW><id>8048197</id><snippet>with open('file.txt') as file:
    print(re.sub('windows', 'linux', file.read()))
</snippet></ROW><ROW><id>8048206</id><snippet>ms = fb.MyStruct

# This will fail (throws a Python exception) 
# ret =  fb.MYSTRUCT_Func1(ms, 123) 
</snippet></ROW><ROW><id>8048206</id><snippet>ms</snippet></ROW><ROW><id>8048206</id><snippet>ms = fb.MyStruct()
ret =  fb.MYSTRUCT_Func1(ms, 123) 
</snippet></ROW><ROW><id>8048346</id><snippet>'your_module' in sys.modules</snippet></ROW><ROW><id>8048346</id><snippet>player = my_lib.PlayerCharacter()
assert player.position == (0, 0)  # or whatever assert syntax `pymock` uses
press_key('k')
assert player.position == (0, 1)
</snippet></ROW><ROW><id>8048417</id><snippet>(bit position, length)</snippet></ROW><ROW><id>8048417</id><snippet>bit position</snippet></ROW><ROW><id>8048417</id><snippet>int</snippet></ROW><ROW><id>8049772</id><snippet>TESTDATA_FILENAME = os.path.join(os.path.dirname(__file__), 'testdata.html')


class MyTest(unittest.TestCase)

   def setUp(self):
       self.testdata = open(TESTDATA_FILENAME).read()

   def test_something(self):
       ....
</snippet></ROW><ROW><id>8050092</id><snippet>x=os.popen('mp3info -p "%S" f).read()
</snippet></ROW><ROW><id>8050092</id><snippet>x=os.popen('mp3info -p "%S" ' + f).read()
</snippet></ROW><ROW><id>8050092</id><snippet>subprocess</snippet></ROW><ROW><id>8050092</id><snippet>import subprocess
x = subprocess.check_output(['mp3info', '-p', '%S', f])
</snippet></ROW><ROW><id>8050243</id><snippet>&gt;&gt;&gt; matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; [[el - 1 for el in row] for row in matrix]
[[0, 1, 2], [3, 4, 5], [6, 7, 8]]
</snippet></ROW><ROW><id>8050243</id><snippet>ySet</snippet></ROW><ROW><id>8050243</id><snippet>&gt;&gt;&gt; rows = ([1, 2, 3], [10, 20, 30])
&gt;&gt;&gt; [(min([row[i] for row in rows]),max([row[i] for row in rows])) for i in range(len(rows[0]))]
[(1, 10), (2, 20), (3, 30)]
</snippet></ROW><ROW><id>8050243</id><snippet>&gt;&gt;&gt; zip(rows[0], rows[1])
[(1, 10), (2, 20), (3, 30)]
</snippet></ROW><ROW><id>8050243</id><snippet>&gt;&gt;&gt; zip(*rows)
[(1, 10), (2, 20), (3, 30)]
</snippet></ROW><ROW><id>8050278</id><snippet>output = Phonon.AudioOutput(Phonon.MusicCategory)
m_media = Phonon.MediaObject()
Phonon.createPath(m_media, output)
m_media.setCurrentSource(Phonon.MediaSource("files/song.mp3"))
m_media.play()
</snippet></ROW><ROW><id>8050304</id><snippet>vowels = set(['aa', 'ae', 'ah', 'ao', 'eh', 'er', 'ey', 'ih', 'iy', 'uh', 'uw', 'o'])
consonants = set(['b', 'ch', 'd', 'dh', 'dx', 'f', 'g', 'hh', 'jh', 'k', 'l', 'm', 'n', 'ng', 'p', 'r', 's', 'sh', 't', 'th', 'v', 'w', 'y', 'z', 'zh'])


if phoneme in vowels:
    do this
else :
    do that (for consonants)
</snippet></ROW><ROW><id>8050637</id><snippet>''</snippet></ROW><ROW><id>8050637</id><snippet>' '</snippet></ROW><ROW><id>8050637</id><snippet>SelectedSignals</snippet></ROW><ROW><id>8050637</id><snippet>name2index</snippet></ROW><ROW><id>8050637</id><snippet>name2index['header0'] = 0</snippet></ROW><ROW><id>8050637</id><snippet>name2index = ...</snippet></ROW><ROW><id>8050637</id><snippet>'header0'</snippet></ROW><ROW><id>8050637</id><snippet>SelectedSignals</snippet></ROW><ROW><id>8050637</id><snippet>name2index.get(name, 0)</snippet></ROW><ROW><id>8050637</id><snippet>name2index[name]</snippet></ROW><ROW><id>8050637</id><snippet>writeindices</snippet></ROW><ROW><id>8050658</id><snippet>import cairo

def text_extent(font, font_size, text, *args, **kwargs):
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 0, 0)
    ctx = cairo.Context(surface)
    ctx.select_font_face(font, *args, **kwargs)
    ctx.set_font_size(font_size)
    return ctx.text_extents(text)

text='Example'
font="Sans"
font_size=55.0
font_args=[cairo.FONT_SLANT_NORMAL]
(x_bearing, y_bearing, text_width, text_height,
 x_advance, y_advance) = text_extent(font, font_size, text, *font_args)
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, int(text_width), int(text_height))
ctx = cairo.Context(surface)
ctx.select_font_face(font, *font_args)
ctx.set_font_size(font_size)
ctx.move_to(-x_bearing, -y_bearing)
ctx.text_path(text)
ctx.set_source_rgb(0.47, 0.47, 0.47)
ctx.fill_preserve()
ctx.set_source_rgb(1, 0, 0)
ctx.set_line_width(1.5)
ctx.stroke()

surface.write_to_png("/tmp/out.png")
</snippet></ROW><ROW><id>8050706</id><snippet>[x.encode('latin-1') if isinstance(x, unicode) else x
 for x in row]
</snippet></ROW><ROW><id>8051378</id><snippet>class MyForm(forms.ModelForm):

    campaign = forms.BooleanField(widget=forms.HiddenInput())
</snippet></ROW><ROW><id>8051396</id><snippet>if song != True:
    raise ValueError
</snippet></ROW><ROW><id>8051396</id><snippet>if song == Null:
    raise ValueError
</snippet></ROW><ROW><id>8051531</id><snippet>myTuple = ['a','b','c','d','e','f','g']
cur.executemany("INSERT INTO rehberim(names, phone, mobile, email, \
                    photo, address, note, date) VALUES({0}, {1}, {2}, {3}, {4}, {5}, {6}" .format (myTuple[1], myTuple[2], myTuple[3], myTuple[4], myTuple[5], myTuple[6], myTuple[7])
</snippet></ROW><ROW><id>8052392</id><snippet> http://docs.python.org/library/sets.html
</snippet></ROW><ROW><id>8052392</id><snippet>&gt;&gt;&gt; a = [1,2,2,5,4,5,4,2,1,3]
&gt;&gt;&gt; set(a)
set([1, 2, 3, 4, 5])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8052570</id><snippet>package</snippet></ROW><ROW><id>8052570</id><snippet>MyApp</snippet></ROW><ROW><id>8052570</id><snippet>from MyApp.models import apples, oranges

p = apples.objects.get(id=1)
...
</snippet></ROW><ROW><id>8052570</id><snippet>from MyApp import models
from MyApp import apples, oranges // ImportError
</snippet></ROW><ROW><id>8052570</id><snippet>apples</snippet></ROW><ROW><id>8052570</id><snippet>oranges</snippet></ROW><ROW><id>8052570</id><snippet>models.py</snippet></ROW><ROW><id>8053014</id><snippet>mime = {"html":"text/html", "css":"text/css", "png":"image/png"}
if RequestedFileType in mime.keys():
    self.send_response(200)
    self.send_header('Content-type', mime[RequestedFileType])
    self.end_headers()
    print RequestedFileType
    f = open(curdir + sep + self.path)             
    self.wfile.write(f.read())              
    f.close()
    return
</snippet></ROW><ROW><id>8053084</id><snippet>import subprocess

myProcess = subprocess.Popen(   ['these', 'are', 'for', 'the', 'shell'],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE )

[outStream, errStream] = myProcess.communicate()
</snippet></ROW><ROW><id>8053084</id><snippet>outStream</snippet></ROW><ROW><id>8053084</id><snippet>errStream</snippet></ROW><ROW><id>8053084</id><snippet>import subprocess

with open('dateHelp.log', 'w') as dateLog:
    with open('dateHelp.err', 'w') as errLog:
        dateHelp = subprocess.Popen([ 'date', '-h'], stdout=dateLog, 
                                                     stderr=errLog)
        dateHelp.communicate()
</snippet></ROW><ROW><id>8053162</id><snippet>with</snippet></ROW><ROW><id>8053661</id><snippet>exec</snippet></ROW><ROW><id>8053661</id><snippet>exec()</snippet></ROW><ROW><id>8054164</id><snippet>scripts</snippet></ROW><ROW><id>8054172</id><snippet>r'[!-\.&amp;]'</snippet></ROW><ROW><id>8054172</id><snippet>r'[!-.]'</snippet></ROW><ROW><id>8054172</id><snippet>ord</snippet></ROW><ROW><id>8054172</id><snippet>33 = ord('!')</snippet></ROW><ROW><id>8054172</id><snippet>46 = ord('.')</snippet></ROW><ROW><id>8054172</id><snippet>!"#$%&amp;\'()*+,-.
</snippet></ROW><ROW><id>8054172</id><snippet>.</snippet></ROW><ROW><id>8054172</id><snippet>.</snippet></ROW><ROW><id>8054172</id><snippet>&amp;</snippet></ROW><ROW><id>8054179</id><snippet>exception()</snippet></ROW><ROW><id>8054179</id><snippet>try...except</snippet></ROW><ROW><id>8054179</id><snippet>sys.excepthook()</snippet></ROW><ROW><id>8054179</id><snippet>import logging
import sys

logger = logging.getLogger('mylogger')
# Configure logger to write to a file...

def my_handler(type, value, tb):
    logger.exception("Uncaught exception: {0}".format(str(value)))

# Install exception handler
sys.excepthook = my_handler

# Run your main script here:
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8054242</id><snippet>meeting.partcipates.add(person)</snippet></ROW><ROW><id>8054244</id><snippet>import code
import sys

class Tee(object):

  def __init__(self, log_fname, mode='a'):
    self.log = open(log_fname, mode)

  def __del__(self):
    # Restore sin, so, se
    sys.stdout = sys.__stdout__
    sys.stdir = sys.__stdin__
    sys.stderr = sys.__stderr__
    self.log.close()

  def write(self, data):
    self.log.write(data)
    sys.__stdout__.write(data)

  def readline(self):
    s = sys.__stdin__.readline()
    self.log.write(s)
    return s

# Tie the ins and outs to Tee.
sys.stdout = sys.stderr = sys.stdin = Tee('consolelog.dat', 'w')

console = code.InteractiveConsole()
console.interact()
</snippet></ROW><ROW><id>8054517</id><snippet>spooler.py</snippet></ROW><ROW><id>8054517</id><snippet>class printer(base_printer):
    def sendjob(self, fp, title = None):
        # title is irrelevant here
        out = os.popen("lpr -P'%s' &gt;/dev/null 2&gt;&amp;1" \
            % self.printer_name, "wb")
        blk = fp.read(8192)
        while blk:
            out.write(blk)
            blk = fp.read(8192)
        rc = out.close()
        if rc is not None:
            print "Error: lpr returns %02x" % rc
</snippet></ROW><ROW><id>8054517</id><snippet>popen()</snippet></ROW><ROW><id>8054517</id><snippet>lpr</snippet></ROW><ROW><id>8054609</id><snippet>c = 0.1
pos = 100
myzeros=scipy.zeros((c*pos,c*pos))
myzeros1D = myzeros.ravel()
grid=scipy.ones((pos,pos))
grid1D = grid.ravel()
dist=sc.random.permutation(pos*pos)[:c*pos*c*pos]
grid1D[dist]=myzeros1D
myzeros = myzeros1D.reshape((c*pos,c*pos))
grid = grid1D.reshape((pos, pos))
</snippet></ROW><ROW><id>8054609</id><snippet>dist = scipy.random.permutation(pos*pos)[:c*pos]
grid1D[dist] = myzeros1D[:c*pos]
</snippet></ROW><ROW><id>8054609</id><snippet>grid1D[dist] = 0
</snippet></ROW><ROW><id>8054759</id><snippet>    cur.execute('insert into user_reg (username,pwdhash,email,initial_date)\
                    values (?,?,?,?)',
                    [username,
                     pwdhash,
                     email,
                     date])
</snippet></ROW><ROW><id>8054759</id><snippet>    cur.execute = ('insert ...
</snippet></ROW><ROW><id>8055290</id><snippet>datetime</snippet></ROW><ROW><id>8055290</id><snippet>from datetime import datetime

def strToDatetime(dateStr):
    return datetime.strptime(dateStr, "%d/%m/%Y")
</snippet></ROW><ROW><id>8055290</id><snippet>datetime</snippet></ROW><ROW><id>8055290</id><snippet>strToDatetime("1/3/2011").strftime("%d/%m/%Y)
&gt;'01/03/2011'
</snippet></ROW><ROW><id>8055397</id><snippet>a = A(3)</snippet></ROW><ROW><id>8055397</id><snippet>a = Test(3)</snippet></ROW><ROW><id>8055397</id><snippet>Test</snippet></ROW><ROW><id>8055397</id><snippet>self.a = Test(i-1)</snippet></ROW><ROW><id>8055397</id><snippet>&gt;&gt;&gt; class A():
...     def __init__(self, i):
...         self.i = i
...         if i &gt; 0:
...             self.a = A(i-1)
... 
&gt;&gt;&gt; a = A(3)
&gt;&gt;&gt; a.i
3
&gt;&gt;&gt; a.a.i
2
&gt;&gt;&gt; a.a.a.i
1
&gt;&gt;&gt; a.a.a.a.a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'a'
</snippet></ROW><ROW><id>8055493</id><snippet>numpy.fft</snippet></ROW><ROW><id>8055493</id><snippet>ma.filled()</snippet></ROW><ROW><id>8055493</id><snippet>ft_type_1 = np.log(np.abs(np.fft.fft2(ma.mean(carbon_flux.filled(cflux_fill_value), 2)))
ft_type_2 = np.log(np.mean(np.abs(np.fft.fft2(carbon_flux.filled(cflux_fill_value), axes=(0, 1))),axis=2)
</snippet></ROW><ROW><id>8055493</id><snippet>cflux_fill_value</snippet></ROW><ROW><id>8055493</id><snippet>carbon_flux.filled()</snippet></ROW><ROW><id>8055701</id><snippet>os.path.dirname(__file__)
</snippet></ROW><ROW><id>8055823</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as ndimage

X, Y = np.mgrid[-70:70, -70:70]
Z = np.cos((X**2+Y**2)/200.)+ np.random.normal(size=X.shape)

# Increase the value of sigma to increase the amount of blurring.
# order=0 means gaussian kernel
Z2 = ndimage.gaussian_filter(Z, sigma=1.0, order=0)
fig=plt.figure()
ax=fig.add_subplot(1,2,1)
ax.imshow(Z)
ax=fig.add_subplot(1,2,2)
ax.imshow(Z2)
plt.show()
</snippet></ROW><ROW><id>8055823</id><snippet>gaussian_filter</snippet></ROW><ROW><id>8056227</id><snippet>save(self, text, *index)</snippet></ROW><ROW><id>8056227</id><snippet>index</snippet></ROW><ROW><id>8056227</id><snippet>save</snippet></ROW><ROW><id>8056227</id><snippet>text</snippet></ROW><ROW><id>8056227</id><snippet>myobject.save("sample text", 1, 2, 3)
</snippet></ROW><ROW><id>8056227</id><snippet>index</snippet></ROW><ROW><id>8056227</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>8056227</id><snippet>for x in
index</snippet></ROW><ROW><id>8056227</id><snippet>1</snippet></ROW><ROW><id>8056227</id><snippet>2</snippet></ROW><ROW><id>8056227</id><snippet>3</snippet></ROW><ROW><id>8056227</id><snippet>myobject.save("sample text", (1,2))
</snippet></ROW><ROW><id>8056227</id><snippet>index</snippet></ROW><ROW><id>8056227</id><snippet>((1,2),)</snippet></ROW><ROW><id>8056227</id><snippet>x</snippet></ROW><ROW><id>8056227</id><snippet>(1,2)</snippet></ROW><ROW><id>8056227</id><snippet>TypeError</snippet></ROW><ROW><id>8056239</id><snippet>import lxml.etree as et

ns = {"atom": "http://www.w3.org/2005/Atom"}
tree = et.fromstring(xml)
for node in tree.xpath('//atom:entry', namespaces=ns):
    print node
</snippet></ROW><ROW><id>8056239</id><snippet>for node in tree.xpath("//*[local-name() = 'entry']"):
    print node
</snippet></ROW><ROW><id>8056504</id><snippet>user-config.py</snippet></ROW><ROW><id>8056504</id><snippet>family</snippet></ROW><ROW><id>8056504</id><snippet>usernames[familyname][language]</snippet></ROW><ROW><id>8056522</id><snippet>#!/usr/bin/env python3
import smtplib    
from contextlib import contextmanager
from datetime   import datetime
from email.mime.text import MIMEText
from netrc      import netrc
from timeit     import default_timer as timer

@contextmanager
def logined(sender, password, smtp_host='smtp.gmail.com', smtp_port=587):
    start = timer(); smtp_serv = smtplib.SMTP(smtp_host, smtp_port, timeout=10)
    try: # make smtp server and login
        smtp_serv.ehlo_or_helo_if_needed()
        smtp_serv.starttls()
        smtp_serv.ehlo()
        print('smtp setup took (%.2f seconds passed)' % (timer()-start,))
        start = timer(); smtp_serv.login(sender, password)
        print('login took %.2f seconds' % (timer()-start,))
        start = timer(); yield smtp_serv
    finally:
        print('Operations with smtp_serv took %.2f seconds' % (timer()-start,))
        start = timer(); smtp_serv.quit()
        print('Quiting took %.2f seconds' % (timer()-start,))

smtp_host = 'smtp.gmail.com'
login, _, password = netrc().authenticators(smtp_host)
with logined(login, password, smtp_host) as smtp_serv:
    for i in range(10):
        msg = MIMEText('#%d timestamp %s' % (i, datetime.utcnow()))
        msg['Subject'] = 'test #%d' % i
        msg['From'] = login
        msg['To'] = login
        smtp_serv.send_message(msg) 
</snippet></ROW><ROW><id>8056522</id><snippet>smtp setup took (5.43 seconds passed)
login took 0.40 seconds
Operations with smtp_serv took 9.84 seconds
Quiting took 0.05 seconds
</snippet></ROW><ROW><id>8056522</id><snippet>.send_message()</snippet></ROW><ROW><id>8056522</id><snippet>smtp_serv.sendmail(from, to, msg.as_string())
</snippet></ROW><ROW><id>8056573</id><snippet>unicode_string = bytes.decode("utf-8")
print len(unicode_string)
</snippet></ROW><ROW><id>8056766</id><snippet>max_length</snippet></ROW><ROW><id>8056766</id><snippet>for s in s_tuples:
    if l &gt; max_length:
        break
    output.append(s[0])
    l+=len(get_words_from(s[0]))
return ''.join(output)
</snippet></ROW><ROW><id>8056795</id><snippet>process</snippet></ROW><ROW><id>8056795</id><snippet>def process(line1, line2):
  # process a line from each input

for a, b in izip(open(file1, 'r'), open(file2, 'r')):
  process(a, b)
</snippet></ROW><ROW><id>8056795</id><snippet>process</snippet></ROW><ROW><id>8056795</id><snippet>for</snippet></ROW><ROW><id>8056866</id><snippet>class things1tab(wx.Panel):
    def newAddImage(self,parent):
        things2_listbox.append('hi');
        self.listBox.Set(things2_listbox)
        self.listBox.SetSelection(len(things2_listbox)-1)
    def reName(self,parent):
        sel = self.listBox.GetSelection()
        text = self.listBox.GetString(sel)
        renamed = wx.GetTextFromUser('Rename item', 'Rename dialog', text)
        if renamed != '':
            things2_listbox.pop(sel)
            things2_listbox.insert(sel,renamed)
            self.listBox.Set(things2_listbox)
            self.listBox.SetSelection(sel)
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.listBox = wx.ListBox(self, size=(200, -1), choices=things2_listbox, style=wx.LB_SINGLE)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        btnSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sizerMain = wx.BoxSizer()
        self.listBox.Bind(wx.EVT_LISTBOX_DCLICK, self.reName)
        btn = wx.Button(self, label="Test")
        btnTwo = wx.Button(self, label="Test 2")

        self.sizer.Add(self.listBox, proportion=1, flag=wx.TOP | wx.EXPAND | wx.LEFT, border=5)
        btnSizer.Add(btn, 0, wx.ALL, 5)
        btnSizer.Add(btnTwo, 0, wx.ALL, 5)
        self.sizer.Add(btnSizer)
        self.sizerMain.Add(self.sizer, proportion=0, flag=wx.BOTTOM | wx.EXPAND, border=70)
        self.SetSizer(self.sizerMain)
</snippet></ROW><ROW><id>8056866</id><snippet>self.sizer.Add(self.listBox, proportion=1, flag=wx.TOP | wx.EXPAND | wx.LEFT, border=5)
</snippet></ROW><ROW><id>8057182</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# DPI, here, has _nothing_ to do with your screen's DPI.
dpi = 80.0
xpixels, ypixels = 800, 800

fig = plt.figure(figsize=(ypixels/dpi, xpixels/dpi), dpi=dpi)
fig.figimage(np.random.random((xpixels, ypixels)))
plt.show()
</snippet></ROW><ROW><id>8057182</id><snippet>imshow</snippet></ROW><ROW><id>8057182</id><snippet>import matplotlib.pyplot as plt
import numpy as np

dpi = 80
margin = 0.05 # (5% of the width/height of the figure...)
xpixels, ypixels = 800, 800

# Make a figure big enough to accomodate an axis of xpixels by ypixels
# as well as the ticklabels, etc...
figsize = (1 + margin) * ypixels / dpi, (1 + margin) * xpixels / dpi

fig = plt.figure(figsize=figsize, dpi=dpi)
# Make the axis the right size...
ax = fig.add_axes([margin, margin, 1 - 2*margin, 1 - 2*margin])

ax.imshow(np.random.random((xpixels, ypixels)))
plt.show()
</snippet></ROW><ROW><id>8057343</id><snippet>numpy.__version__</snippet></ROW><ROW><id>8057688</id><snippet>&gt;&gt;&gt; 3 / 2
1
</snippet></ROW><ROW><id>8057688</id><snippet>&gt;&gt;&gt; 3.0 / 2
1.5
&gt;&gt;&gt; 3 / 2.0
1.5
</snippet></ROW><ROW><id>8057688</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 3 / 2
1.5
</snippet></ROW><ROW><id>8057688</id><snippet>&gt;&gt;&gt; 3 // 2
1
</snippet></ROW><ROW><id>8057868</id><snippet>from django.db import connections
import sqlite3

# Create a Django database connection for our test database
connections.databases['test'] = {'NAME': ":memory:", 'ENGINE': "sqlite3"}

# We assume that the database under the source_wrapper hasn't been created
source_wrapper = connections.all()[0]
target_wrapper = connections.all()[1]

# Create the tables for the source database
source_wrapper.creation.create_test_db()

# Dump the database into a single text query
query="".join(line for line in source_wrapper.connection.iterdump())

# Generate an in-memory sqlite connection
connection = sqlite3.connect(":memory:")
target_wrapper.connection = connection
target_wrapper.connection.executescript(query)
</snippet></ROW><ROW><id>8057868</id><snippet>test</snippet></ROW><ROW><id>8057868</id><snippet>default</snippet></ROW><ROW><id>8057995</id><snippet>stdin.close()</snippet></ROW><ROW><id>8057995</id><snippet>exit</snippet></ROW><ROW><id>8057995</id><snippet>stdin.write('exit\n')</snippet></ROW><ROW><id>8057995</id><snippet>Channel</snippet></ROW><ROW><id>8057995</id><snippet>stdin</snippet></ROW><ROW><id>8057995</id><snippet>stdin.channel.shutdown_write()
</snippet></ROW><ROW><id>8057995</id><snippet>Channel</snippet></ROW><ROW><id>8057995</id><snippet>recv_ready(self)</snippet></ROW><ROW><id>8057995</id><snippet>recv(self, nbytes)</snippet></ROW><ROW><id>8058084</id><snippet>get()</snippet></ROW><ROW><id>8058084</id><snippet>get_by_id</snippet></ROW><ROW><id>8058084</id><snippet>get</snippet></ROW><ROW><id>8058158</id><snippet> def MyFunction(MyArg):
      MyArg.
</snippet></ROW><ROW><id>8058158</id><snippet>MyArg.</snippet></ROW><ROW><id>8058158</id><snippet>MyArg</snippet></ROW><ROW><id>8058158</id><snippet>MyArg.SomeNonExistentFunction()</snippet></ROW><ROW><id>8058158</id><snippet> def MyFunction:
      MyObject = MyClass(SomeArg)
      MyObject.
</snippet></ROW><ROW><id>8058318</id><snippet>self.sizerBox.Add(self.images_area, 1, wx.EXPAND|wx.ALL, 10)
</snippet></ROW><ROW><id>8058499</id><snippet>static_dir</snippet></ROW><ROW><id>8058499</id><snippet>/bl/</snippet></ROW><ROW><id>8058499</id><snippet>/bl/</snippet></ROW><ROW><id>8058499</id><snippet>.*</snippet></ROW><ROW><id>8058737</id><snippet>urllib</snippet></ROW><ROW><id>8058737</id><snippet>requests</snippet></ROW><ROW><id>8058737</id><snippet>urllib</snippet></ROW><ROW><id>8058737</id><snippet>requests</snippet></ROW><ROW><id>8058820</id><snippet>StaticBoxSizer</snippet></ROW><ROW><id>8058820</id><snippet>app = wx.App(redirect=False)
frame = wx.Frame(None)
static_box = wx.StaticBox(frame, label='Label')
sizer = wx.StaticBoxSizer(static_box, wx.VERTICAL)

for i in range(5):
    sizer.Add(wx.Button(frame, label='Button ' + str(i)))

frame.Sizer = sizer
frame.Sizer.Fit(frame)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>8058939</id><snippet>codec.open('w', encoding='utf8')</snippet></ROW><ROW><id>8058939</id><snippet>str</snippet></ROW><ROW><id>8058939</id><snippet>unicode</snippet></ROW><ROW><id>8058939</id><snippet>corpusFile = codecs.open(filename, mode = 'w', encoding = 'utf-8')
# ...
tagged_token = '\xdcml\xe4ut'
tagged_token = tagged_token.decode('ISO-8859-1')
corpusFile.write(tagged_token)
corpusFile.write(u'\n')
</snippet></ROW><ROW><id>8058939</id><snippet>corpusFile = open(filename, mode = 'wb')
# ...
tagged_token = '\xdcml\xe4ut'
tagged_token = tagged_token.decode('ISO-8859-1')
corpusFile.write(tagged_token.encode('utf-8'))
corpusFile.write('\n')
</snippet></ROW><ROW><id>8058939</id><snippet>os.sep</snippet></ROW><ROW><id>8058939</id><snippet>'\n'</snippet></ROW><ROW><id>8058939</id><snippet>ANSI as UTF-8</snippet></ROW><ROW><id>8059223</id><snippet>import lxml.html
doc = lxml.html.parse(url_to_site)
feeds = doc.xpath('//link[@type="application/rss+xml"]/@href') # list feed urls
</snippet></ROW><ROW><id>8059251</id><snippet>if x in list</snippet></ROW><ROW><id>8059251</id><snippet>count[x]</snippet></ROW><ROW><id>8059251</id><snippet>set count to 0
for each element in the list:
   if the element is what we are looking for:
      add one to count
</snippet></ROW><ROW><id>8059950</id><snippet>import ctypes
from ctypes import wintypes

FindWindow = ctypes.windll.user32.FindWindowA
FindWindow.restype = wintypes.HWND
FindWindow.argtypes = [
    wintypes.LPCSTR, #lpClassName
    wintypes.LPCSTR, #lpWindowName
]

SetWindowPos = ctypes.windll.user32.SetWindowPos
SetWindowPos.restype = wintypes.BOOL
SetWindowPos.argtypes = [
    wintypes.HWND, #hWnd
    wintypes.HWND, #hWndInsertAfter
    ctypes.c_int,  #X
    ctypes.c_int,  #Y
    ctypes.c_int,  #cx
    ctypes.c_int,  #cy
    ctypes.c_uint, #uFlags
] 

TOGGLE_HIDEWINDOW = 0x80
TOGGLE_UNHIDEWINDOW = 0x40

def hide_taskbar():
    handleW1 = FindWindow(b"Shell_traywnd", b"")
    SetWindowPos(handleW1, 0, 0, 0, 0, 0, TOGGLE_HIDEWINDOW)

def unhide_taskbar():
    handleW1 = FindWindow(b"Shell_traywnd", b"")
    SetWindowPos(handleW1, 0, 0, 0, 0, 0, TOGGLE_UNHIDEWINDOW)
</snippet></ROW><ROW><id>8060219</id><snippet>defaultdict</snippet></ROW><ROW><id>8060219</id><snippet>defaultdict</snippet></ROW><ROW><id>8060219</id><snippet>dict</snippet></ROW><ROW><id>8060219</id><snippet>defaultdict</snippet></ROW><ROW><id>8060219</id><snippet>days</snippet></ROW><ROW><id>8060219</id><snippet>weeks</snippet></ROW><ROW><id>8060219</id><snippet>from collections import defaultdict

r = defaultdict(lambda: defaultdict(int))
for t in time:
    week = t.date.isocalendar()[1]
    day = t.date.isoweekday()
    r[week][day] += t.hours
</snippet></ROW><ROW><id>8060543</id><snippet>def lookup(elem):
    # do your SQL call here for a given category 'elem' and return
    # a list of it's subcategories
    return []

def leaves(lst):
    if lst:
        for elem in lst:                          # for every category
            for sublist in leaves(lookup(elem)):  # enumerate it's sub categories
                yield sublist                     # and return it
            yield elem                            # once lookup(elem) is [] return elem

d = { 111: [Run, Jump, swim] , 222: [Eat, drink] }

for key, lst in d.items():
    print key, [elem for elem in leaves(lst)]
</snippet></ROW><ROW><id>8060543</id><snippet>[elem for elem in leaves(lst)]</snippet></ROW><ROW><id>8060543</id><snippet>elem</snippet></ROW><ROW><id>8060543</id><snippet>leaves</snippet></ROW><ROW><id>8060707</id><snippet>void MyTest()
{
   Assert.That(B(), Is.False);
   A();
   Assert.That(B(), Is.True);
}
</snippet></ROW><ROW><id>8060880</id><snippet>[::-1]</snippet></ROW><ROW><id>8060880</id><snippet>for element in stack[::-1]:
    print element
</snippet></ROW><ROW><id>8060880</id><snippet>__iter__()</snippet></ROW><ROW><id>8060880</id><snippet>next()</snippet></ROW><ROW><id>8060880</id><snippet>class Stack:
    def __init__(self):
        self.data = []
    def push(self,n):
        self.data.append(n)
    def pop(self):
        return self.data.pop()
    def __iter__(self):
        return self
    def next(self):
        if len(self.data)&gt;0:
            return self.pop()
        else:
            raise StopIteration

filo = Stack()
filo.push(1)
filo.push(2)
filo.push(3)

for i in filo:
    print i
</snippet></ROW><ROW><id>8061310</id><snippet>python_select</snippet></ROW><ROW><id>8061310</id><snippet>port select</snippet></ROW><ROW><id>8061472</id><snippet>mechanize</snippet></ROW><ROW><id>8061472</id><snippet>urllib2</snippet></ROW><ROW><id>8061472</id><snippet>requests</snippet></ROW><ROW><id>8061691</id><snippet>ElementMaker</snippet></ROW><ROW><id>8061691</id><snippet>E.date_added</snippet></ROW><ROW><id>8061691</id><snippet>date_added</snippet></ROW><ROW><id>8061691</id><snippet>&gt;&gt;&gt; def foo-bar():
  File "&lt;stdin&gt;", line 1
    def foo-bar():
           ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>8061691</id><snippet>date-added</snippet></ROW><ROW><id>8061691</id><snippet>&gt;&gt;&gt; etree.tostring(E.url(E('date-added', '2011-11-11')))
'&lt;url&gt;&lt;date-added&gt;2011-11-11&lt;/date-added&gt;&lt;/url&gt;'
</snippet></ROW><ROW><id>8061915</id><snippet>print</snippet></ROW><ROW><id>8061915</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>8061918</id><snippet>poll</snippet></ROW><ROW><id>8061918</id><snippet>poll</snippet></ROW><ROW><id>8061918</id><snippet>None</snippet></ROW><ROW><id>8061918</id><snippet>returncode</snippet></ROW><ROW><id>8061918</id><snippet>readline</snippet></ROW><ROW><id>8061918</id><snippet>read</snippet></ROW><ROW><id>8061918</id><snippet>from subprocess import Popen, PIPE
self.myproc = Popen('dir /s', shell=True, stdout=PIPE, stderr=PIPE)
while self.myproc.poll() == None:
    self._parent.AppendUpdate(self.myproc.stdout.readline())
self._parent.AppendUpdate('Return code was ' + self.myproc.returncode)
</snippet></ROW><ROW><id>8061918</id><snippet>.strip()</snippet></ROW><ROW><id>8061918</id><snippet>readline</snippet></ROW><ROW><id>8061918</id><snippet>self.myproc.stdout.readline</snippet></ROW><ROW><id>8061918</id><snippet>sys.exit</snippet></ROW><ROW><id>8061918</id><snippet>import sys
# Do some stuff
print 'pass'    # Gets to stdout
sys.exit(0)     # Return code
</snippet></ROW><ROW><id>8061918</id><snippet>test.py</snippet></ROW><ROW><id>8061918</id><snippet>Popen</snippet></ROW><ROW><id>8061918</id><snippet>pass</snippet></ROW><ROW><id>8061918</id><snippet>self.myproc.stdout</snippet></ROW><ROW><id>8061918</id><snippet>0</snippet></ROW><ROW><id>8061918</id><snippet>self.myproc.poll</snippet></ROW><ROW><id>8061918</id><snippet>self.myproc.returncode</snippet></ROW><ROW><id>8061918</id><snippet>0</snippet></ROW><ROW><id>8061918</id><snippet>1</snippet></ROW><ROW><id>8061918</id><snippet>2</snippet></ROW><ROW><id>8061918</id><snippet>9</snippet></ROW><ROW><id>8061918</id><snippet>poll</snippet></ROW><ROW><id>8062014</id><snippet>import Service.Model</snippet></ROW><ROW><id>8062014</id><snippet>m = Service.Model.DBModel1()</snippet></ROW><ROW><id>8062014</id><snippet>from Service.Model import *</snippet></ROW><ROW><id>8062014</id><snippet>from Service.Model import DBModel1</snippet></ROW><ROW><id>8062014</id><snippet>m = DBModel1()</snippet></ROW><ROW><id>8062368</id><snippet>from django.contrib.auth import authenticate, login

def my_view(request):
    username = request.POST['username']
    password = request.POST['password']
    user = authenticate(username=username, password=password)
    if user is not None:
        if user.is_active  *** and user can login in this store ***:
            login(request, user)
            # Redirect to a success page.
        else:
            # Return a 'disabled account' error message
    else:
        # Return an 'invalid login' error message.
</snippet></ROW><ROW><id>8062543</id><snippet>from __future__ import division

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure(figsize=plt.figaspect(1))  # Square figure
ax = fig.add_subplot(111, projection='3d')

r=1;
u=np.linspace(-2,2,200);
v=np.linspace(0,2*np.pi,60);
[u,v]=np.meshgrid(u,v);

a = 1
b = 1
c = 1

x = a*np.cosh(u)*np.cos(v)
y = b*np.cosh(u)*np.sin(v)
z = c*np.sinh(u)

ax.plot_surface(x, y, z,  rstride=4, cstride=4, color='b')

plt.show()
</snippet></ROW><ROW><id>8062887</id><snippet>random.shuffle</snippet></ROW><ROW><id>8062887</id><snippet>import random

with open('filename', 'rb') as infile:
    lines = infile.readlines()

random.shuffle(lines)

with open('newfilename', 'wb') as outfile:
    outfile.writelines(lines)
</snippet></ROW><ROW><id>8062887</id><snippet>end = len(lines) - 1
for i in range(end + 1):
    choice = random.randint(i, end)
    lines[i], lines[choice] = lines[choice], lines[i]
</snippet></ROW><ROW><id>8062887</id><snippet>randint</snippet></ROW><ROW><id>8062947</id><snippet>for row in x:
    print "shape of", row, "is", numpy.reshape(row, (1, row.size)).shape
</snippet></ROW><ROW><id>8063685</id><snippet>import struct
s = struct.pack("f", -0.8)
i = struct.unpack("i", s)
print i
</snippet></ROW><ROW><id>8063722</id><snippet>InlineModel</snippet></ROW><ROW><id>8063722</id><snippet>    class Artist(models.Model):
    name = models.CharField(max_length=100)
    def __unicode__(self):
        return self.name

class Album(models.Model):
    name = models.CharField(max_length=100)
    def __unicode__(self):
        return self.name

class Song(models.Model):
    title = models.CharField(max_length=100)
    artist = models.ForeignKey(Artist)
    album = models.ForeignKey(Album)
    type = models.ForeignKey(Category)

    def __unicode__(self):
        return self.title
</snippet></ROW><ROW><id>8063722</id><snippet>class SongInline(admin.TabularInline):
    #list_display = ('title','artist','song_1','song_2','song_3','song_4','song_5','song_6')
    #prepopulated_fields = { 'slug': ['title'] }
    model = Song

class AlbumAdmin(admin.ModelAdmin):
    inlines = [
            SongInline,
            ]
class ArtistAdmin(admin.ModelAdmin):
    pass
</snippet></ROW><ROW><id>8063810</id><snippet>print_head()</snippet></ROW><ROW><id>8063810</id><snippet>.get()</snippet></ROW><ROW><id>8063810</id><snippet>joinall()</snippet></ROW><ROW><id>8063810</id><snippet>total_result = [x.get() for x in jobs]
</snippet></ROW><ROW><id>8063810</id><snippet>joinall()</snippet></ROW><ROW><id>8063810</id><snippet>print_head()</snippet></ROW><ROW><id>8063810</id><snippet>def print_head(url):
    print ('Starting %s' % url)
    return urllib2.urlopen(url).read()
</snippet></ROW><ROW><id>8063810</id><snippet>total_result</snippet></ROW><ROW><id>8063890</id><snippet>0777</snippet></ROW><ROW><id>8063890</id><snippet>0666</snippet></ROW><ROW><id>8063890</id><snippet>0755</snippet></ROW><ROW><id>8063890</id><snippet>0644</snippet></ROW><ROW><id>8063890</id><snippet>0022</snippet></ROW><ROW><id>8063890</id><snippet>0</snippet></ROW><ROW><id>8063927</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>8063927</id><snippet>return HttpResponseRedirect(request.META.get('HTTP_REFERER','/'))
</snippet></ROW><ROW><id>8064309</id><snippet>re.findall('(\S+|^)(\s*)', s)
</snippet></ROW><ROW><id>8064586</id><snippet>@view_config(name='login_widget',
             renderer='templates/account_login_widget.pt')
def login_widget(request):
    return {'username': ...}
</snippet></ROW><ROW><id>8064586</id><snippet>&lt;span metal:use-macro="load: account_login_widget.pt"&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>8064586</id><snippet>&lt;span tal:replace="structure render_view('login_widget')"&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>8064586</id><snippet>render_view</snippet></ROW><ROW><id>8064586</id><snippet>from pyramid.events import subscriber
from pyramid.events import BeforeRender
from pyramid.view import render_view_to_response

@subscriber(BeforeRender)
def add_render_view_global(event):
    event['render_view'] = lambda name: render_view_to_response(context, request, name, secure).ubody
</snippet></ROW><ROW><id>8064839</id><snippet>equals()</snippet></ROW><ROW><id>8064839</id><snippet>&lt;?php
class User
{
    private $id;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function getId()
    {
        return $this-&gt;id;
    }

    public function equals(User $user)
    {
        return $this-&gt;getId() === $user-&gt;getId();
    }
}

$user1 = new User(1);
$user2 = new User(2);

var_dump($user1-&gt;equals($user2)); // bool(false)
var_dump($user2-&gt;equals($user1)); // bool(false)
?&gt;
</snippet></ROW><ROW><id>8064839</id><snippet>var_dump($user1 == $user2);
var_dump($user2 == $user1);
</snippet></ROW><ROW><id>8064839</id><snippet>==</snippet></ROW><ROW><id>8065961</id><snippet>open('one.dat').read().decode('utf-8')
</snippet></ROW><ROW><id>8065961</id><snippet>codecs.open('one.dat', encoding='utf-8').read()
</snippet></ROW><ROW><id>8065961</id><snippet>unicode</snippet></ROW><ROW><id>8065961</id><snippet>str</snippet></ROW><ROW><id>8065961</id><snippet>s</snippet></ROW><ROW><id>8065961</id><snippet>unicode</snippet></ROW><ROW><id>8065961</id><snippet>s.decode('utf-8')</snippet></ROW><ROW><id>8065961</id><snippet>open('one.dat').read()
</snippet></ROW><ROW><id>8065961</id><snippet>open('one.dat', encoding='utf-8').read()
</snippet></ROW><ROW><id>8065961</id><snippet>str</snippet></ROW><ROW><id>8065961</id><snippet>bytes</snippet></ROW><ROW><id>8065961</id><snippet>decode</snippet></ROW><ROW><id>8065961</id><snippet>unicode</snippet></ROW><ROW><id>8065961</id><snippet>str</snippet></ROW><ROW><id>8066106</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
link = "http://yourlink.com"
driver.get(link)

#this waits for the new page to load
while(link == driver.current_url):
  time.sleep(1)

redirected_url = driver.current_url
</snippet></ROW><ROW><id>8066116</id><snippet>&lt;div clas="image-wrapper"&gt;
for i in images:
    print &gt;&gt; htmlpage, "&lt;img src='../folder/%s'&gt;" % i
&lt;/div&gt;
</snippet></ROW><ROW><id>8066116</id><snippet>.image-wrapper {
    width: (Image width * 5);
}
.image-wrapper img {
    float: left;
}
</snippet></ROW><ROW><id>8066307</id><snippet>ps a</snippet></ROW><ROW><id>8066307</id><snippet>kill -9 &lt;pid&gt;</snippet></ROW><ROW><id>8066323</id><snippet>import lxml.html as LH

html_table='''
&lt;table&gt;
&lt;tr&gt;
&lt;tr&gt;
&lt;tr&gt;
&lt;tr&gt;
&lt;tr&gt;
&lt;/table&gt;
'''

nums=['1','2','20','47','50']
doc=LH.fromstring(html_table)
for tr,n in zip(doc.xpath('//tr'),nums):
    tr.attrib['id']=n
print(LH.tostring(doc,pretty_print=True))
</snippet></ROW><ROW><id>8066323</id><snippet>&lt;table&gt;
&lt;tr id="1"&gt;&lt;/tr&gt;
&lt;tr id="2"&gt;&lt;/tr&gt;
&lt;tr id="20"&gt;&lt;/tr&gt;
&lt;tr id="47"&gt;&lt;/tr&gt;
&lt;tr id="50"&gt;&lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>8066677</id><snippet>@cherrypy.expose
def saveTheValues(self, **kw):
    values = kw.pop('values[]', [])
    #code to save the values
</snippet></ROW><ROW><id>8066677</id><snippet>var arr = ['some', 'string', 'array'];

jQuery.post('saveTheValues', $.param({'values': arr}, true),
    function(data)
    {
        //do stuff with the returned data
    }, 'json');
</snippet></ROW><ROW><id>8066942</id><snippet>NewCounter1 = counter()
NewCounter2 = counter()
NewCounter2.__class__.count = 3
</snippet></ROW><ROW><id>8066942</id><snippet>class counter:
    count = 0
    def __init__(self):
        self.__class__.count += 1

print 'counter.count BEFORE ==',counter.count  # The result is 0
NewCounter1 = counter()
print '\nNewCounter1.__dict__ ==',NewCounter1.__dict__  # The result is {}
print 'NewCounter1.count    ==',NewCounter1.count # The result is 1
print 'counter.count AFTER  ==',counter.count  # The result is 1
</snippet></ROW><ROW><id>8066942</id><snippet>print NewCounter1.count</snippet></ROW><ROW><id>8066942</id><snippet>print counter.count</snippet></ROW><ROW><id>8066942</id><snippet>print 'NewCounter1.count   ==',NewCounter1.count</snippet></ROW><ROW><id>8066942</id><snippet>NewCounter1.count equals NewCounter1.__class__.count</snippet></ROW><ROW><id>8066942</id><snippet>NewCounter2.__class__.count = 3</snippet></ROW><ROW><id>8066942</id><snippet>NewCounter2.count = 5</snippet></ROW><ROW><id>8066942</id><snippet>__dict__</snippet></ROW><ROW><id>8066942</id><snippet>from itertools import islice

class counter:
    count = 0
    def __init__(self):
        print ('  |  counter.count   first == %d  at  %d\n'
               '  |     self.count   first == %d  at  %d')\
               % (counter.count,id(counter.count),
                  self.count,id(self.count))

        self.__class__.count += 1 # &lt;&lt;=====

        print ('  |  counter.count  second == %d  at  %d\n'
               '  |     self.count  second == %d  at  %d\n'
               '  |  id(counter) == %d   id(self) == %d')\
               % (counter.count,id(counter.count),
                  self.count,id(self.count),
                  id(counter),id(self))



def display(*li):
    it = iter(li)
    for ch in it:
        nn = (len(ch)-len(ch.lstrip('\n')))*'\n'
        x = it.next()
        print '%s ==  %s %s' % (ch,x,'' if '__dict__' in ch else 'at '+str(id(x)))



display('counter.count AT START',counter.count)


print ('\n\n----- C1 = counter() ------------------------')
C1 = counter()
display('C1.__dict__',C1.__dict__,
        'C1.count ',C1.count,
        '\ncounter.count ',counter.count)


print ('\n\n----- C2 = counter() ------------------------')
C2 = counter()
print ('  -------------------------------------------') 
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)


print '\n\n------- C2.__class__.count = 3 ------------------------\n'
C2.__class__.count = 3
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)


print '\n\n------- C2.count = 5 ------------------------\n'
C2.count = 5
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)
</snippet></ROW><ROW><id>8066942</id><snippet>counter.count AT START ==  0 at 10021628


----- C1 = counter() ------------------------
  |  counter.count   first == 0  at  10021628
  |     self.count   first == 0  at  10021628
  |  counter.count  second == 1  at  10021616
  |     self.count  second == 1  at  10021616
  |  id(counter) == 11211248   id(self) == 18735712
C1.__dict__ ==  {} 
C1.count  ==  1 at 10021616

counter.count  ==  1 at 10021616


----- C2 = counter() ------------------------
  |  counter.count   first == 1  at  10021616
  |     self.count   first == 1  at  10021616
  |  counter.count  second == 2  at  10021604
  |     self.count  second == 2  at  10021604
  |  id(counter) == 11211248   id(self) == 18736032
  -------------------------------------------
C1.__dict__ ==  {} 
C2.__dict__ ==  {} 
C1.count  ==  2 at 10021604
C2.count  ==  2 at 10021604
C1.__class__.count ==  2 at 10021604
C2.__class__.count ==  2 at 10021604

counter.count  ==  2 at 10021604


------- C2.__class__.count = 3 ------------------------

C1.__dict__ ==  {} 
C2.__dict__ ==  {} 
C1.count  ==  3 at 10021592
C2.count  ==  3 at 10021592
C1.__class__.count ==  3 at 10021592
C2.__class__.count ==  3 at 10021592

counter.count  ==  3 at 10021592


------- C2.count = 5 ------------------------

C1.__dict__ ==  {} 
C2.__dict__ ==  {'count': 5} 
C1.count  ==  3 at 10021592
C2.count  ==  5 at 10021568
C1.__class__.count ==  3 at 10021592
C2.__class__.count ==  3 at 10021592

counter.count  ==  3 at 10021592
</snippet></ROW><ROW><id>8066942</id><snippet>self.count = counter.count</snippet></ROW><ROW><id>8066942</id><snippet>self.__class__.count += 1 # &lt;&lt;=====</snippet></ROW><ROW><id>8066942</id><snippet>__class__</snippet></ROW><ROW><id>8066955</id><snippet>TemplateView</snippet></ROW><ROW><id>8066955</id><snippet>TemplateResponseMixin</snippet></ROW><ROW><id>8066955</id><snippet>get_template_names</snippet></ROW><ROW><id>8066955</id><snippet>SimpleCategoryView</snippet></ROW><ROW><id>8066955</id><snippet>class SimpleCategoryView(TemplateView):
    ...
    def get_template_names(self):
        return [self.get_category().template_name]
</snippet></ROW><ROW><id>8067136</id><snippet>csv.reader</snippet></ROW><ROW><id>8067136</id><snippet>row</snippet></ROW><ROW><id>8067136</id><snippet>stops</snippet></ROW><ROW><id>8067136</id><snippet>stops.extend(row)
</snippet></ROW><ROW><id>8067136</id><snippet>stops = [item for row in reader for item in row]
</snippet></ROW><ROW><id>8067243</id><snippet>testblock.html</snippet></ROW><ROW><id>8067243</id><snippet>testbase.html</snippet></ROW><ROW><id>8067243</id><snippet>render_to_response</snippet></ROW><ROW><id>8067243</id><snippet>return render_to_response('testblock.html')
</snippet></ROW><ROW><id>8067243</id><snippet>testbase.html</snippet></ROW><ROW><id>8067376</id><snippet>list.insert</snippet></ROW><ROW><id>8067376</id><snippet>None</snippet></ROW><ROW><id>8067376</id><snippet>&gt;&gt;&gt; numlist = ['0', '1', '2', '3', '4', '5', '6']
&gt;&gt;&gt; numlist.insert(0, '-1')
&gt;&gt;&gt; numlist
['-1', '1', '2', '3', '4', '5', '6']
</snippet></ROW><ROW><id>8067470</id><snippet>#</snippet></ROW><ROW><id>8067470</id><snippet>zip</snippet></ROW><ROW><id>8067470</id><snippet>out = []
labels = ['dns', 'ip', 'description']
for line in data:
    out.append(dict(zip(labels, line.split('#'))))
</snippet></ROW><ROW><id>8067470</id><snippet># makes the list ['host2.example.com', '192.168.0.7', 'web server']
line.split('#')  

# takes the labels list and matches them up:
# [('dns', 'host2.example.com'),
#  ('ip', '192.168.0.7'),
#  ('description', 'web server')]
zip(labels, line.split('#'))  

# takes each tuple and makes the first item the key,
#  and the second item the value
dict(...)  
</snippet></ROW><ROW><id>8067631</id><snippet>LOGGER = logging.getLogger("my_logger_name")
for my_url in urls_to_test:
   try:
       #test your url
   except Exception:   # or BaseException if you really want to catch all python exceptions
      LOGGER.exception("something weird happened") 
</snippet></ROW><ROW><id>8067823</id><snippet>[:]</snippet></ROW><ROW><id>8067823</id><snippet>[:]</snippet></ROW><ROW><id>8067823</id><snippet>list(old)</snippet></ROW><ROW><id>8067823</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def colon(x):
...     return x[:]
...
&gt;&gt;&gt; def new_list(x):
...     return list(x)
...
&gt;&gt;&gt;
&gt;&gt;&gt; dis.dis(colon)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               0 (None)
              6 LOAD_CONST               0 (None)
              9 BUILD_SLICE              2
             12 BINARY_SUBSCR
             13 RETURN_VALUE
&gt;&gt;&gt; dis.dis(new_list)
  2           0 LOAD_GLOBAL              0 (list)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8067823</id><snippet>list(old)</snippet></ROW><ROW><id>8067855</id><snippet>import config</snippet></ROW><ROW><id>8067855</id><snippet>.</snippet></ROW><ROW><id>8068030</id><snippet>    text = "%{0}%" .format(self.lineEdit_6.text())
    c.execute("select id, name from contacts where nome like '{0}'" .format(text))
</snippet></ROW><ROW><id>8068030</id><snippet>    c.execute("select id, name from contacts where nome like ?", [text])
</snippet></ROW><ROW><id>8068030</id><snippet>    c.execute("select id, name from contacts where nome like ?", (text, ))
</snippet></ROW><ROW><id>8068030</id><snippet>text</snippet></ROW><ROW><id>8068030</id><snippet>O'Reilly</snippet></ROW><ROW><id>8068035</id><snippet>background-image: `-webkit-linear-gradient(top, #fff, #e6e6e6)`
</snippet></ROW><ROW><id>8068239</id><snippet>ff.communicate("open vnc://www.example.com\n")
</snippet></ROW><ROW><id>8068248</id><snippet>math.sqrt()</snippet></ROW><ROW><id>8068248</id><snippet>x1 = 1234567890.0 / 4.0
x2 = 1234567890.0 * 0.25
x3 = 1234567890.0 ** 0.5
x4 = math.sqrt(1234567890.0)
</snippet></ROW><ROW><id>8068248</id><snippet>  # x1 = 1234567890.0 / 4.0
  4           0 LOAD_CONST               1 (1234567890.0)
              3 LOAD_CONST               2 (4.0)
              6 BINARY_DIVIDE       
              7 STORE_FAST               0 (x1)

  # x2 = 1234567890.0 * 0.25
  5          10 LOAD_CONST               5 (308641972.5)
             13 STORE_FAST               1 (x2)

  # x3 = 1234567890.0 ** 0.5
  6          16 LOAD_CONST               6 (35136.418286444619)
             19 STORE_FAST               2 (x3)

  # x4 = math.sqrt(1234567890.0)
  7          22 LOAD_GLOBAL              0 (math)
             25 LOAD_ATTR                1 (sqrt)
             28 LOAD_CONST               1 (1234567890.0)
             31 CALL_FUNCTION            1
             34 STORE_FAST               3 (x4)
</snippet></ROW><ROW><id>8068248</id><snippet>In [16]: x = 1234567890.0

In [17]: %timeit x / 4.0
10000000 loops, best of 3: 87.8 ns per loop

In [18]: %timeit x * 0.25
10000000 loops, best of 3: 91.6 ns per loop
</snippet></ROW><ROW><id>8068248</id><snippet>math.sqrt(x)</snippet></ROW><ROW><id>8068248</id><snippet>x ** 0.5</snippet></ROW><ROW><id>8068248</id><snippet>In [19]: %timeit x ** 0.5
1000000 loops, best of 3: 211 ns per loop

In [20]: %timeit math.sqrt(x)
10000000 loops, best of 3: 181 ns per loop
</snippet></ROW><ROW><id>8068248</id><snippet>peephole.c</snippet></ROW><ROW><id>8068248</id><snippet>    case BINARY_DIVIDE:
        /* Cannot fold this operation statically since
           the result can depend on the run-time presence
           of the -Qnew flag */
        return 0;
</snippet></ROW><ROW><id>8068248</id><snippet>-Qnew</snippet></ROW><ROW><id>8068284</id><snippet>import urllib

inputfile = urllib.urlopen("http://standards.ieee.org/develop/regauth/oui/oui.txt")
data = inputfile.read()

entries = data.split("\n\n")[1:-1] #ignore first and last entries, they're not real entries

d = {}
for entry in entries:
    parts = entry.split("\n")[1].split("\t")
    company_id = parts[0].split()[0]
    company_name = parts[-1]
    d[company_id] = company_name
</snippet></ROW><ROW><id>8068284</id><snippet>40F52E: Leica Microsystems (Schweiz) AG
3831AC: WEG
00B0F0: CALY NETWORKS
9CC077: PrintCounts, LLC
000099: MTX, INC.
000098: CROSSCOMM CORPORATION
000095: SONY TEKTRONIX CORP.
000094: ASANTE TECHNOLOGIES
000097: EMC Corporation
000096: MARCONI ELECTRONICS LTD.
000091: ANRITSU CORPORATION
000090: MICROCOM
000093: PROTEON INC.
000092: COGENT DATA TECHNOLOGIES
002192: Baoding Galaxy Electronic Technology  Co.,Ltd
90004E: Hon Hai Precision Ind. Co.,Ltd.
002193: Videofon MV
00A0D4: RADIOLAN,  INC.
E0F379: Vaddio
002190: Goliath Solutions
</snippet></ROW><ROW><id>8068348</id><snippet>squares = [item ** 2 for item in some_list]
</snippet></ROW><ROW><id>8068348</id><snippet>for item in some_list:
    print(item)
</snippet></ROW><ROW><id>8068348</id><snippet>append</snippet></ROW><ROW><id>8068348</id><snippet>def polynomial(x):
    return x ** 4 + 7 * x ** 3 - 2 * x ** 2 + 3 * x - 4
result = [polynomial(x) for x in some_list]
</snippet></ROW><ROW><id>8068723</id><snippet>__import__()</snippet></ROW><ROW><id>8068723</id><snippet>dir()</snippet></ROW><ROW><id>8068723</id><snippet>inspect.isclass(getattr(&lt;module ref&gt;, &lt;object name&gt;))</snippet></ROW><ROW><id>8068723</id><snippet>issubclass()</snippet></ROW><ROW><id>8068758</id><snippet>from matplotlib import pyplot as plt
from matplotlib.collections import LineCollection
lc = LineCollection(points[edges])
fig = plt.figure()
plt.gca().add_collection(lc)
plt.xlim(points[:,0].min(), points[:,0].max())
plt.ylim(points[:,1].min(), points[:,1].max())
plt.plot(points[:,0], points[:,1], 'ro')
fig.savefig('full_figure.png')
</snippet></ROW><ROW><id>8068979</id><snippet>groupName</snippet></ROW><ROW><id>8068979</id><snippet>None</snippet></ROW><ROW><id>8068979</id><snippet>If groupName is not None:
    print groupName.group
</snippet></ROW><ROW><id>8068979</id><snippet>groupName</snippet></ROW><ROW><id>8068979</id><snippet>group</snippet></ROW><ROW><id>8068979</id><snippet>If groupName is not None:
    print getattr(groupName, 'group', None)
</snippet></ROW><ROW><id>8068979</id><snippet>getattr</snippet></ROW><ROW><id>8068989</id><snippet>import re
matcher = re.compile(r"""
^[^\{]*          # Starting from the beginning of the string, match anything that isn't an opening bracket
       (         # Open a group to record what's next
        \{.+\}   # The JSON substring
       )         # close the group
 [^}]*$          # at the end of the string, anything that isn't a closing bracket
""", re.VERBOSE)

# Your example
print matcher.match('100{"1":2, "3":4}312').group(1)

# Example with embedded hashmap
print matcher.match('100{"1":{"a":"b", "c":"d"}, "3":4}312').group(1)
</snippet></ROW><ROW><id>8068989</id><snippet>import re
print re.match("^[^\{]*(\{[^\}]+\})[^}]*$", '100{"1":2, "3":4}312').group(1)
</snippet></ROW><ROW><id>8069010</id><snippet>twisted.internet.stdio</snippet></ROW><ROW><id>8069010</id><snippet>LineReceiver</snippet></ROW><ROW><id>8069109</id><snippet>try .. except .. else</snippet></ROW><ROW><id>8069109</id><snippet>for i in range(3, 0, -1):
  try:
    f()
  except IOError:
    if i == 1:
      raise
    print('retry')
  else:
    break
</snippet></ROW><ROW><id>8069122</id><snippet>__tagGrab</snippet></ROW><ROW><id>8069122</id><snippet>def __tagGrab(self, tagName, parent=self._element):
</snippet></ROW><ROW><id>8069122</id><snippet>self</snippet></ROW><ROW><id>8069122</id><snippet>None</snippet></ROW><ROW><id>8069122</id><snippet>def __tagGrab(self, tagName, parent=None):
    if parent is None:
        parent = self._element
    ...
</snippet></ROW><ROW><id>8069122</id><snippet>self</snippet></ROW><ROW><id>8069122</id><snippet>globals()</snippet></ROW><ROW><id>8069122</id><snippet>Element</snippet></ROW><ROW><id>8069122</id><snippet>__tagGrab</snippet></ROW><ROW><id>8069122</id><snippet>__module__</snippet></ROW><ROW><id>8069122</id><snippet>__init__</snippet></ROW><ROW><id>8069122</id><snippet>getTree</snippet></ROW><ROW><id>8069122</id><snippet>getTag</snippet></ROW><ROW><id>8069122</id><snippet>class TestClassCreation(object):
    print("Started creating class")
    print("names so far: %s" % vars())

    def __init__(self):
        pass
    print("now we have %s" % vars())

    def noop(self, default=None):
        print("this gets run when noop is called")
    print("and now have %s" % vars())
    print()

    print("and now we'll fail...")
    def failure(self, some_arg=self.noop):
        pass
    print("we never get here...")
</snippet></ROW><ROW><id>8069135</id><snippet>b</snippet></ROW><ROW><id>8069135</id><snippet>self.b = Button(.....)
</snippet></ROW><ROW><id>8069135</id><snippet>self.chooseColor</snippet></ROW><ROW><id>8069135</id><snippet>self.b</snippet></ROW><ROW><id>8069135</id><snippet>def chooseColor(self):
    color = askColor()
    self.b["bg"] = color # or however you change a color in python/tkinter
</snippet></ROW><ROW><id>8069151</id><snippet># Check position for edges and fix if requireD

if in_pos + step &gt; sc.size(grid) - 1:
    in_pos = 0
elif in_pos + step &lt; 0:
    in_pos = sc.size(grid) - 1
else:
    in_pos += step
</snippet></ROW><ROW><id>8069151</id><snippet>size</snippet></ROW><ROW><id>8069151</id><snippet>x</snippet></ROW><ROW><id>8069151</id><snippet>y</snippet></ROW><ROW><id>8069151</id><snippet>shape</snippet></ROW><ROW><id>8069151</id><snippet>mod</snippet></ROW><ROW><id>8069151</id><snippet>%</snippet></ROW><ROW><id>8069151</id><snippet># Move by step
in_pos += step
# Correct according to periodic boundaries
in_pos = in_pos % grid.shape    # or simply in_pos %= grid.shape
</snippet></ROW><ROW><id>8069151</id><snippet>grid</snippet></ROW><ROW><id>8069151</id><snippet>if grid[in_pos[0], in_pos[1]] == 0:
    initial_trap = True
</snippet></ROW><ROW><id>8069747</id><snippet>(r'^search/', include('haystack.urls')),</snippet></ROW><ROW><id>8069747</id><snippet>#your root urls.py
from django.conf.urls.defaults import *
from haystack.forms import FacetedSearchForm
from haystack.query import SearchQuerySet
from haystack.views import FacetedSearchView

sqs = SearchQuerySet().filter(author='john')

urlpatterns = patterns('haystack.views',
url(r'^/my_custom_very_special_url$', FacetedSearchView(
    template='my/special/path/to/faceted_search.html',
    searchqueryset=sqs,
    form_class=FacetedSearchForm
), name='haystack_search'),
)
</snippet></ROW><ROW><id>8069912</id><snippet>url (r'^article/edit/(?P&lt;article_id&gt;\d+)$', 'mysite.views.edit_article'),
</snippet></ROW><ROW><id>8069937</id><snippet># First, create a dictionary for each column, that maps each
# value (eg colorfront2) to a list of house names.
results = [{}, {}, {}, {}]
for filename in os.listdir('/wherever'):
    s = open(os.path.join('/wherever', filename), 'rb').read()
    for line in s.split('\n'):
        if not line.strip(): continue # skip blank lines
        house, values = line.split(',', 1)
        values = values.split(',')
        assert len(values) == len(results) # sanity check
        for value, result in zip(values, results):
            if value not in result:
                result[value] = []
            result[value].append(house)


# Then, do something with it -- e.g., show them in order
for i, result in enumerate(results):
    print 'COLUMN %d' % i
    def sortkey(pair): return len(pair[1]) # number of houses
    for (val, houses) in sorted(result.items(), key=sortkey, reverse=True):
        print '   %20s occurs for %d houses' % (val, len(houses))
</snippet></ROW><ROW><id>8070008</id><snippet>csv</snippet></ROW><ROW><id>8070008</id><snippet>from csv import reader

# test
infile = ['A,B,C,"D12121",E,F,G,H,"I9,I8",J,K']
# real is probably like
# infile = open('filename', 'r')
# or use 'with open(...) as infile:' and indent the rest

for line in reader(infile):
    print line
# for the test input, prints
# ['A', 'B', 'C', 'D12121', 'E', 'F', 'G', 'H', 'I9,I8', 'J', 'K']
</snippet></ROW><ROW><id>8070044</id><snippet>add_url_rule()</snippet></ROW><ROW><id>8070410</id><snippet>__enter__</snippet></ROW><ROW><id>8070410</id><snippet>__exit__</snippet></ROW><ROW><id>8070410</id><snippet>class File(object):
   # ... all the methods you already have ...

   # context management
   def __enter__(self):
       return self
   def __exit__(self, *exc_info):
       self.close()
</snippet></ROW><ROW><id>8070410</id><snippet>open</snippet></ROW><ROW><id>8070410</id><snippet>__init__</snippet></ROW><ROW><id>8070716</id><snippet>import numpy as np
n=4
m=5
a = np.arange(1,n*m+1).reshape(n,m)
print(a)
# [[ 1  2  3  4  5]
#  [ 6  7  8  9 10]
#  [11 12 13 14 15]
#  [16 17 18 19 20]]
sz = a.itemsize
h,w = a.shape
bh,bw = 2,2
shape = (h/bh, w/bw, bh, bw)
print(shape)
# (2, 2, 2, 2)

strides = sz*np.array([w*bh,bw,w,1])
print(strides)
# [40  8 20  4]

blocks=np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)
print(blocks)
# [[[[ 1  2]
#    [ 6  7]]
#   [[ 3  4]
#    [ 8  9]]]
#  [[[11 12]
#    [16 17]]
#   [[13 14]
#    [18 19]]]]
</snippet></ROW><ROW><id>8070716</id><snippet>1</snippet></ROW><ROW><id>8070716</id><snippet>a</snippet></ROW><ROW><id>8070716</id><snippet>blocks[0,0,0,0]</snippet></ROW><ROW><id>8070716</id><snippet>2</snippet></ROW><ROW><id>8070716</id><snippet>blocks[0,0,0,1]</snippet></ROW><ROW><id>8070716</id><snippet>a.itemsize</snippet></ROW><ROW><id>8070716</id><snippet>strides = (10,2,5,1)*a.itemsize = (40,8,20,4)</snippet></ROW><ROW><id>8070716</id><snippet>1</snippet></ROW><ROW><id>8070716</id><snippet>6</snippet></ROW><ROW><id>8070716</id><snippet>blocks[0,0,1,0]</snippet></ROW><ROW><id>8070716</id><snippet>w</snippet></ROW><ROW><id>8070716</id><snippet>strides</snippet></ROW><ROW><id>8070716</id><snippet>1</snippet></ROW><ROW><id>8070716</id><snippet>3</snippet></ROW><ROW><id>8070716</id><snippet>blocks[0,1,0,0]</snippet></ROW><ROW><id>8070716</id><snippet>bw</snippet></ROW><ROW><id>8070716</id><snippet>strides</snippet></ROW><ROW><id>8070716</id><snippet>1</snippet></ROW><ROW><id>8070716</id><snippet>11</snippet></ROW><ROW><id>8070716</id><snippet>blocks[1,0,0,0]</snippet></ROW><ROW><id>8070716</id><snippet>w*bh</snippet></ROW><ROW><id>8070716</id><snippet>strides = (40,8,20,4)</snippet></ROW><ROW><id>8070810</id><snippet>set_dashes</snippet></ROW><ROW><id>8070942</id><snippet>def fix_imports(top_dir, not_ui_keys):
    """Walk through the directory and substitute the wrong imports """
    from itertools import imap,ifilter
    gen = ifilter(None,imap(extract_dotted, not_ui_keys))
    repl = dict((dotted,add_model(dotted)) for dotted in gen)

    py_files = (path.join(root, x)
                for root, dirs, files in walk(top_dir)
                for x in files if x[-3:]=='.py')
    for py in py_files:
        with open(py) as opf:
            res = replace_text(opf.read(), repl)
</snippet></ROW><ROW><id>8070942</id><snippet>x[-3:]=='.py'</snippet></ROW><ROW><id>8070942</id><snippet>x.endswith('.py')</snippet></ROW><ROW><id>8071441</id><snippet>cdecl</snippet></ROW><ROW><id>8071441</id><snippet>WinDLL</snippet></ROW><ROW><id>8071441</id><snippet>stdcall</snippet></ROW><ROW><id>8071441</id><snippet>cdecl</snippet></ROW><ROW><id>8071441</id><snippet>lpDLL=CDLL("C:\some_path\myDll.dll")
</snippet></ROW><ROW><id>8071725</id><snippet>MultipleChoiseField</snippet></ROW><ROW><id>8071725</id><snippet>MultipleChoiseField</snippet></ROW><ROW><id>8071725</id><snippet>CharField</snippet></ROW><ROW><id>8071725</id><snippet>SelectMultiple</snippet></ROW><ROW><id>8071960</id><snippet>&gt;&gt;&gt; something = 1
&gt;&gt;&gt; somthing    # typo, left out 'e'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'somthing' is not defined
</snippet></ROW><ROW><id>8072119</id><snippet>"kids"</snippet></ROW><ROW><id>8072119</id><snippet>result[4]["kids"]</snippet></ROW><ROW><id>8072119</id><snippet>days = {"Monday": 1, "Tuesday": 2, "Wednesday": 3, "Thursday": 4,
        "Friday": 5, "Saturday": 6, "Sunday": 7}
result = {}
with open('schedule.txt', 'rb') as f:
    for line in f:
        d = ast.literal_eval(line)
        result[days[d["day"]]] = d
print result[4]["kids"]
</snippet></ROW><ROW><id>8072354</id><snippet>while True:
    selection2 = random.randrange(self.pool[-1])
    while selection2 &gt;= self.pool[index2]:
        index2 += 1
    if not index1 == index2: break
</snippet></ROW><ROW><id>8072354</id><snippet>iters = 0
while iters &lt; 5000:
    selection2 = random.randrange(self.pool[-1])
    while selection2 &gt;= self.pool[index2]:
        index2 += 1
    iters += 1
    if index1 != index2: break

if iters == 5000:
    # Deal with not being able to identify a Couple
</snippet></ROW><ROW><id>8072616</id><snippet>yourproject/apps/firstapp</snippet></ROW><ROW><id>8072616</id><snippet>'apps.firstapp',</snippet></ROW><ROW><id>8072616</id><snippet>__init__.py</snippet></ROW><ROW><id>8072616</id><snippet>from yourproject.apps.firstapp.filename import yourclass</snippet></ROW><ROW><id>8072616</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>8072635</id><snippet>ends_with</snippet></ROW><ROW><id>8072635</id><snippet>&gt;&gt;&gt; blacklisted = 'foo.com'
&gt;&gt;&gt; email = 'x@foo.com'
&gt;&gt;&gt; email.endswith('foo.com')
True
&gt;&gt;&gt; email = 'x@subdomain.foo.com'
&gt;&gt;&gt; email.endswith('foo.com')
True
</snippet></ROW><ROW><id>8072635</id><snippet>'foo.com'</snippet></ROW><ROW><id>8072635</id><snippet>'foo.com'</snippet></ROW><ROW><id>8072635</id><snippet>endswith</snippet></ROW><ROW><id>8072635</id><snippet>&gt;&gt;&gt; blacklisted = ('foo.com', 'bar.com')
&gt;&gt;&gt; email = 'x@bar.com'
&gt;&gt;&gt; email.endswith(blacklisted)
True
</snippet></ROW><ROW><id>8072635</id><snippet>&gt;&gt;&gt; blacklisted = ('foo.com', 'bar.com', 'sub.baz.net')
&gt;&gt;&gt; email_bad = 'x@sub.baz.net'
&gt;&gt;&gt; email_bad.endswith(blacklisted)
True
&gt;&gt;&gt; email_good = 'x@good.baz.net'
&gt;&gt;&gt; email_good.endswith(blacklisted)
False
</snippet></ROW><ROW><id>8072635</id><snippet>&gt;&gt;&gt; blacklisted = ('bar.com', 'baz.com')
&gt;&gt;&gt; email = 'x@foobar.com'
&gt;&gt;&gt; email.endswith(blacklisted)
True
</snippet></ROW><ROW><id>8072635</id><snippet>'.bar.com'</snippet></ROW><ROW><id>8072635</id><snippet>'@bar.com'</snippet></ROW><ROW><id>8072635</id><snippet>&gt;&gt;&gt; blacklisted = ('.bar.com', '@bar.com', '.baz.com', '@baz.com')
&gt;&gt;&gt; email = 'x@foobar.com'
&gt;&gt;&gt; email.endswith(blacklisted)
False
</snippet></ROW><ROW><id>8072657</id><snippet>foo()</snippet></ROW><ROW><id>8072657</id><snippet>def foo():
    import traceback
    print 'foo called from', traceback.extract_stack(limit=2)[0][2]
    # previous foo() code
</snippet></ROW><ROW><id>8072657</id><snippet>foo()</snippet></ROW><ROW><id>8072710</id><snippet>sudo port install python27 py27-numpy py27-scipy py27-matplotlib py27-ipython</snippet></ROW><ROW><id>8072710</id><snippet>/opt/local/</snippet></ROW><ROW><id>8072710</id><snippet>/Applications/MacPorts/</snippet></ROW><ROW><id>8072710</id><snippet>/opt/local/</snippet></ROW><ROW><id>8072710</id><snippet>python</snippet></ROW><ROW><id>8072710</id><snippet>sudo port select python python27</snippet></ROW><ROW><id>8072710</id><snippet>sudo port select ipython ipython27</snippet></ROW><ROW><id>8072710</id><snippet>python</snippet></ROW><ROW><id>8072710</id><snippet>ipython</snippet></ROW><ROW><id>8072710</id><snippet>sudo port install py27-tornado py27-zmq</snippet></ROW><ROW><id>8072784</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>8072784</id><snippet>for url in url_list:
    req = urllib2.Request(url)
    try:
        resp = urllib2.urlopen(req, timeout=5)
    except urllib2.URLError:
        print "Bad URL or timeout"
        continue # skips to the next iteration of the loop
    resp_page = resp.read()
    print resp_page
</snippet></ROW><ROW><id>8072788</id><snippet>from datetime import datetime, time

utcnow = datetime.utcnow()
midnight_utc = datetime.combine(utcnow.date(), time(0))
delta = utcnow - midnight_utc
print delta.seconds # &lt;-- careful
</snippet></ROW><ROW><id>8072788</id><snippet>total_seconds()</snippet></ROW><ROW><id>8072788</id><snippet>print delta.total_seconds()  # 2.7
print delta.days * 24 * 60 * 60 + delta.seconds + delta.microseconds / 1e6 # &lt; 2.7
</snippet></ROW><ROW><id>8072841</id><snippet>def match_all(the_list, to_match):
    return [sublist for sublist in the_list 
                if all(item in sublist for item in to_match)]
</snippet></ROW><ROW><id>8072841</id><snippet>set</snippet></ROW><ROW><id>8072841</id><snippet>def match_all(the_list, to_match):
    matches = set(to_match).issubset
    return [sublist for sublist in the_list if matches(sublist)]
</snippet></ROW><ROW><id>8073120</id><snippet>fin = readFile(db)
categoryDict = defaultdict(dict)     # automatically create a subdict
for line in fin:
    itemDict = {}                    # a new innermost dict for every item
    itemInstance = setItemInstances(line)
    itemDict[itemInstance._product_id] = itemInstance
    categoryDict[itemInstance._category_id] = itemDict
</snippet></ROW><ROW><id>8073338</id><snippet>class one:
    def funct1(self):
        print 'I am defined in class one'
    self.data1 = "one"

class two:
    def funct2(self):
        print 'I am defined in class two'
    self.data2 = "two"

class three(one, two):
    def funct3(self):
        print 'I am defined in class three'
    self.data3 = "three"
</snippet></ROW><ROW><id>8073338</id><snippet>ob_3 = three()
ob_3.data1
</snippet></ROW><ROW><id>8073338</id><snippet>ob_3.funct1()
</snippet></ROW><ROW><id>8073338</id><snippet>class one:
    def funct1(self):
        print 'class one'

class two(one):
    def funct2(self):
        one.funct1(self)

ob2 = two()
ob2.funct2()
</snippet></ROW><ROW><id>8073377</id><snippet>client = xmlrpclib.ServerProxy('http://user:password@blah.com/plone')
completePath = '/'.join(client.getPhysicalPath()) + '/sites/ng/path/to/folder'
if len(client.portal_catalog.searchResults(path=completePath)):
    return True
</snippet></ROW><ROW><id>8073377</id><snippet>client = xmlrpclib.ServerProxy('http://user:password@blah.com/plone')
path = '/sites/ng/path/to/folder'
subdirs = path.split('/')[1:]
dir = client
for subdir in subdirs:
    if subdir in dir.objectIds():
        dir = dir[subdir]
    else:
        return False
return True
</snippet></ROW><ROW><id>8073377</id><snippet>try:
   path = 'http://user:password@blah.com/plone/sites/ng/path/to/folder'
   xmlrpclib.ServerProxy(path).getPhysicalPath()
   return True
except xmlrpclib.Fault, e:
   return False
</snippet></ROW><ROW><id>8073438</id><snippet>RawRequest = s
</snippet></ROW><ROW><id>8073438</id><snippet>RawRequest.append(s)
</snippet></ROW><ROW><id>8073438</id><snippet>RawRequest = []</snippet></ROW><ROW><id>8073438</id><snippet>RawRequest[0]</snippet></ROW><ROW><id>8073705</id><snippet>eggs</snippet></ROW><ROW><id>8073705</id><snippet>#! /usr/bin/env python
import sys


def main():
    #
    # Do something ... Whatever processing you need to do, make it happen here.
    # Don't shove everything into main, break it up into testable functions!
    #
    # Whatever this function returns, is what the exit code of the interpreter,
    # i.e. your script, will be.  Because main is called by sys.exit(), it will
    # behave differently depending on what you return.
    # 
    # So, if you return None, 0 is returned.  If you return integer, that 
    # return code is used.  Anything else is printed to the console and 1 (error) 
    # is returned.
    #
    if an_error_occurred:
        return 'I\'m returning a string, it will be printed and 1 returned'

    # Otherwise 0, success is returned.
    return 0

# This is true if the script is run by the interpreter, not imported by another
# module.
if __name__ == '__main__':
    # main should return 0 for success, something else (usually 1) for error.
    sys.exit(main())
</snippet></ROW><ROW><id>8073705</id><snippet>def func1():
    pass
def func2():
    pass
def main():
    return 0

if __name__ == '__main__':
    sys.exit(main())
</snippet></ROW><ROW><id>8073748</id><snippet>super(Goblin, self).__init__(self, power, MaxHP, magic, MaxMP, speed, name)</snippet></ROW><ROW><id>8073748</id><snippet>difficulty</snippet></ROW><ROW><id>8073748</id><snippet>class Enemy(object)</snippet></ROW><ROW><id>8073748</id><snippet>Enemy</snippet></ROW><ROW><id>8073748</id><snippet>super</snippet></ROW><ROW><id>8073748</id><snippet>class Animal(object):
  def __init__(self, talk):
    print '__init__ Animal: ', talk

class Cat(Animal):
  def __init__(self, talk='meow'):
    print '__init__ Cat'
    super(Cat, self).__init__(talk)

if __name__ == '__main__':
  tom = Cat()
</snippet></ROW><ROW><id>8073748</id><snippet>__init__ Cat
__init__ Animal:  meow
</snippet></ROW><ROW><id>8073748</id><snippet>class Enemy(object):
  def __init__(self, difficulty, power, MaxHP, magic, MaxMP, speed, name):
    self.power = power + 2*difficulty
    self.HP = self.MaxHP = MaxHP + 5*difficulty
    self.magic = magic + 2* difficulty
    self.MP = self.MaxMP = MaxMP + 5*difficulty
    print 'Raaarghh!! I am the formidable {}.'.format(name)

class Goblin(Enemy):
  def __init__(self, difficulty=1, power=1, MaxHP=5, magic=1, MaxMP=5, speed=5, name="Goblin"):
    super(Goblin, self).__init__(difficulty, power, MaxHP, magic, MaxMP, speed, name)

if __name__ == '__main__':
  g = Goblin(name='user1038783 goblin')
</snippet></ROW><ROW><id>8074004</id><snippet>list</snippet></ROW><ROW><id>8074004</id><snippet>def cons(seq):
    result = None
    for item in reversed(seq):
        result = (item, result)
    return result

def iter_cons(seq):
    while seq is not None:
        car, cdr = seq
        yield car
        seq = cdr

&gt;&gt;&gt; cons([1, 2, 3, 4, 5, 6])
(1, (2, (3, (4, (5, (6, None))))))
&gt;&gt;&gt; iter_cons(_)
&lt;generator object uncons at 0x00000000024D7090&gt;
&gt;&gt;&gt; list(_)
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>8074242</id><snippet>buffer</snippet></ROW><ROW><id>8074242</id><snippet>from itertools import islice, izip

s = "to_be_or_not_to_be"
pos = [15, 2, 8]


length = len(s)    

for start1, start2 in izip(pos, islice(pos, 1, None)):
    pref = 0
    for pos1, pos2 in izip(xrange(start1, length), xrange(start2, length)):
        if s[pos1] == s[pos2]:
            pref += 1
        else:
            break
    print pref
# prints 3 1
</snippet></ROW><ROW><id>8074242</id><snippet>islice</snippet></ROW><ROW><id>8074242</id><snippet>izip</snippet></ROW><ROW><id>8074242</id><snippet>xrange</snippet></ROW><ROW><id>8074242</id><snippet>[next((i for i, (a, b) in 
    enumerate(izip(islice(s, start1, None), islice(s, start2, None))) 
        if a != b), 
    length - max((start1, start2))) 
 for start1, start2 in izip(pos, islice(pos, 1, None))]
</snippet></ROW><ROW><id>8074242</id><snippet>os.path.commonprefix</snippet></ROW><ROW><id>8074242</id><snippet>[len(commonprefix((buffer(s, n), buffer(s, m)))) for n, m in zip(pos, pos[1:])]
</snippet></ROW><ROW><id>8074341</id><snippet>import config
import MySQLdb
import MySQLdb.cursors as mc
import _mysql_exceptions
DictCursor = mc.DictCursor
SSCursor = mc.SSCursor
SSDictCursor = mc.SSDictCursor
Cursor = mc.Cursor


class Cursor(object):
    def __init__(self,
                 cursorclass=Cursor,
                 host=config.HOST, user=config.USER,
                 passwd=config.PASS, dbname=config.MYDB,
                 driver=MySQLdb,
                 ):
        self.cursorclass = cursorclass
        self.host = host
        self.user = user
        self.passwd = passwd
        self.dbname = dbname
        self.driver = driver
        self.connection = self.driver.connect(
            host=host, user=user, passwd=passwd, db=dbname,
            cursorclass=cursorclass)
        self.cursor = self.connection.cursor()

    def __iter__(self):
        for item in self.cursor:
            yield item

    def __enter__(self):
        return self.cursor

    def __exit__(self, ext_type, exc_value, traceback):
        self.cursor.close()
        if isinstance(exc_value, Exception):
            self.connection.rollback()
        else:
            self.connection.commit()
        self.connection.close()

with Cursor() as cursor:
    print(cursor)
    connection = (cursor.connection)
    print(connection)
</snippet></ROW><ROW><id>8074341</id><snippet>config.py</snippet></ROW><ROW><id>8074341</id><snippet>with</snippet></ROW><ROW><id>8074341</id><snippet>with some_connection as cursor:
    do_something_with(cursor)
</snippet></ROW><ROW><id>8074676</id><snippet>.xls</snippet></ROW><ROW><id>8074676</id><snippet>.xls</snippet></ROW><ROW><id>8074676</id><snippet>.csv</snippet></ROW><ROW><id>8074676</id><snippet>.csv</snippet></ROW><ROW><id>8074676</id><snippet>os.rename</snippet></ROW><ROW><id>8074676</id><snippet>import os

os.rename("C:\Users\JohnDoe\Downloads\Report.txt", 
          "C:\Users\JohnDoe\Downloads\Report.cvs")
</snippet></ROW><ROW><id>8074676</id><snippet>from csv import reader

for row in reader(open(r"C:\Users\JohnDoe\Downloads\Report.txt", 'rb')):
    # do something with row
</snippet></ROW><ROW><id>8074877</id><snippet>OmniCloud_App_accounts
OmniCloud_App_user
</snippet></ROW><ROW><id>8074877</id><snippet>OmniCloud_App_users
</snippet></ROW><ROW><id>8074877</id><snippet>"OmniCloud_App_user"</snippet></ROW><ROW><id>8074877</id><snippet>omnicloud_app_user
</snippet></ROW><ROW><id>8074877</id><snippet>user_id_refs_id_468fbcec324e93d2</snippet></ROW><ROW><id>8074877</id><snippet>SELECT n.nspname AS schema_name
      ,c.relname AS table_name
      ,c.relhastriggers
      ,c.reltuples
FROM   pg_catalog.pg_class c
LEFT   JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE  c.relname ~~* '%user%'
AND    c.relkind = 'r'
AND    nspname &lt;&gt; 'pg_catalog';
</snippet></ROW><ROW><id>8074877</id><snippet>ANALYZE</snippet></ROW><ROW><id>8074877</id><snippet>\d</snippet></ROW><ROW><id>8074877</id><snippet>psql</snippet></ROW><ROW><id>8074877</id><snippet>set log_statement = 'all';
</snippet></ROW><ROW><id>8074980</id><snippet>datetime</snippet></ROW><ROW><id>8075108</id><snippet>for elem in (item for item in my_list if not (item=='')):
    #Do something...
</snippet></ROW><ROW><id>8075175</id><snippet>class Group(models.Model):
    name = models.CharField(max_length=32, unique=True)
    keywords = models.ManyToManyField(MyKeywords)

    def __unicode__(self):
        return '%s' % (self.name)

class MyKeywords(models.Model):
    name = models.CharField(max_length=32, unique=True)

    def __unicode__(self):
            return self.name
</snippet></ROW><ROW><id>8075175</id><snippet>group = Group.objects.get(name='something')
keyw = MyKeywords.objects.get(name='something_else')
group.keywords.add(keyw)
group.keywords.all()
group.keywords.remove(keyw)
</snippet></ROW><ROW><id>8075175</id><snippet>MyKeyword</snippet></ROW><ROW><id>8075175</id><snippet>MyKeywords</snippet></ROW><ROW><id>8075624</id><snippet>gdbm</snippet></ROW><ROW><id>8075624</id><snippet>DB4.6</snippet></ROW><ROW><id>8075624</id><snippet>gdbm</snippet></ROW><ROW><id>8075624</id><snippet>gdbm</snippet></ROW><ROW><id>8075624</id><snippet>gdbm 1.9</snippet></ROW><ROW><id>8075718</id><snippet>hard</snippet></ROW><ROW><id>8076092</id><snippet>os.environ["map.input.file"]</snippet></ROW><ROW><id>8076092</id><snippet>&lt;Hello, 1&gt;</snippet></ROW><ROW><id>8076092</id><snippet>&lt;input.txt, &lt;Hello, 1&gt;&gt;</snippet></ROW><ROW><id>8076092</id><snippet>&lt;Hello, 1&gt;</snippet></ROW><ROW><id>8076288</id><snippet>webdriver.set_window_position()</snippet></ROW><ROW><id>8076288</id><snippet>webdriver.set_window_size()</snippet></ROW><ROW><id>8076288</id><snippet>#!/usr/bin/env python
import time
from contextlib import closing
from selenium.webdriver import Firefox # pip install selenium

with closing(Firefox()) as browser:
    browser.set_window_position(0, 0) #NOTE: 0,0 might fail on some systems
    browser.set_window_size(800, 600)
    time.sleep(2)
</snippet></ROW><ROW><id>8076938</id><snippet>sys.last_value</snippet></ROW><ROW><id>8076938</id><snippet>sys.last_value</snippet></ROW><ROW><id>8076938</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>8076984</id><snippet>sample.c</snippet></ROW><ROW><id>8076984</id><snippet>import ctypes
from random import randrange, seed

seed(42)

SPAMSUM_LENGTH = 64
FUZZY_MAX_RESULT = SPAMSUM_LENGTH + SPAMSUM_LENGTH // 2 + 20
SIZE = 0x50000

fuzzy = ctypes.CDLL('fuzzy.dll')

fuzzy_hash_buf = fuzzy.fuzzy_hash_buf
fuzzy_hash_buf.restype = ctypes.c_int
fuzzy_hash_buf.argtypes = [
    ctypes.c_char_p, #buf
    ctypes.c_uint32, #buf_len
    ctypes.c_char_p, #result
]
fuzzy_compare = fuzzy.fuzzy_compare
fuzzy_compare.restype = ctypes.c_int
fuzzy_compare.argtypes = [
    ctypes.c_char_p, #sig1
    ctypes.c_char_p, #sig2
]

out1 = ctypes.create_string_buffer('\x00' * FUZZY_MAX_RESULT)
out2 = ctypes.create_string_buffer('\x00' * FUZZY_MAX_RESULT)

in1 = ''.join(chr(randrange(256)) for x in xrange(SIZE))
in2 = ''.join(c if (i &lt; 0x100 or i &gt;= 0x110) else '\x25'
              for i, c in enumerate(in1))

print fuzzy_hash_buf(in1, len(in1), out1)
print fuzzy_hash_buf(in2, len(in2), out2)
print out1.value
print out2.value
print fuzzy_compare(out1, out2)
</snippet></ROW><ROW><id>8076984</id><snippet>0
0
6144:rR1yoHH0XI3VFNdCRXmg0BqMFKDLA6sPaVujZAQhO5HQXNHtQyr4zgytywlfj:qYFF5CRXmg9IK4ouqQAHu+y8zgS7
6144:LR1yoHH0XI3VFNdCRXmg0BqMFKDLA6sPaVujZAQhO5HQXNHtQyr4zgytywlfj:KYFF5CRXmg9IK4ouqQAHu+y8zgS7
99
</snippet></ROW><ROW><id>8077036</id><snippet>import os
os.system("/path/to/script.sh")
</snippet></ROW><ROW><id>8077097</id><snippet># obviously adapt this to your actual model
schools = School.objects.order_by('name').all()

school_dict = {}
for school in schools:
    first_letter = school.name[0].lower()
    if first_letter in school_dict:
        school_dict[first_letter].append(school)
    else:
        school_dict[first_letter] = [school]
</snippet></ROW><ROW><id>8077327</id><snippet>*</snippet></ROW><ROW><id>8077327</id><snippet>sys.argv</snippet></ROW><ROW><id>8077327</id><snippet>["./foo", "bar", "quux"]</snippet></ROW><ROW><id>8077327</id><snippet>main(*sys.argv)</snippet></ROW><ROW><id>8077327</id><snippet>main("./foo", "bar", "quux")</snippet></ROW><ROW><id>8077883</id><snippet>class D(object):
    def create(self):
        self.foo = 100
        self.bar = 'squirrels'
        baz = 'I have %d insane %s in my head.' % (self.foo, self.bar)
        return baz

class C(D):
    def create(self):
        super(C, self).create()
        print self.foo
        self.baz = 'I have %s cute %s in my yard.' % (self.foo, self.bar)

C().create()
</snippet></ROW><ROW><id>8077906</id><snippet>initList = [b'script', b'-compiler', b'123cds', b'-algo', b'timing']
resultList = [str(x) for x in initList ]
</snippet></ROW><ROW><id>8077906</id><snippet>resultList = [x.decode("utf-8") for x in initList ] # where utf-8 is encoding used
</snippet></ROW><ROW><id>8078386</id><snippet>import csv
with open('large.csv','w') as f1:
    writer=csv.writer(f1, delimiter='\t',lineterminator='\n',)
    for i in range(1000000):
        row = [i + j*0.2 for j in range(i+1)]
        writer.writerow(row)
</snippet></ROW><ROW><id>8078386</id><snippet>import csv
with open('large.csv','w') as f1:
    writer=csv.writer(f1, delimiter='\t',lineterminator='\n',)
    writer.writerow([''] + range(1000000))
    for i in range(1000000):
        row = [i] + [i + j*0.2 for j in range(i+1)]
        writer.writerow(row)
</snippet></ROW><ROW><id>8078386</id><snippet>        0       1       2       3       4       5       6       7       8       9
0       0.0
1       1.0     1.2
2       2.0     2.2     2.4
3       3.0     3.2     3.4     3.6
4       4.0     4.2     4.4     4.6     4.8
5       5.0     5.2     5.4     5.6     5.8     6.0
6       6.0     6.2     6.4     6.6     6.8     7.0     7.2
7       7.0     7.2     7.4     7.6     7.8     8.0     8.2     8.4
8       8.0     8.2     8.4     8.6     8.8     9.0     9.2     9.4     9.6
9       9.0     9.2     9.4     9.6     9.8     10.0    10.2    10.4    10.6    10.8
</snippet></ROW><ROW><id>8078553</id><snippet>div</snippet></ROW><ROW><id>8078553</id><snippet>import lxml.html as LH
import lxml.etree as ET

content='&lt;root&gt;&lt;div id="pgbrk" ......&gt;....Page Break....&lt;/div&gt;&lt;/root&gt;'
doc=LH.fromstring(content)
# print(LH.tostring(doc))    
for div in doc.xpath('//div[@id="pgbrk"]'):
    parent=div.getparent()
    parent.replace(div,ET.Comment("page break"))
print(LH.tostring(doc))
</snippet></ROW><ROW><id>8078553</id><snippet>&lt;root&gt;&lt;!--page break--&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>8078678</id><snippet>import itertools

class B(A):
    def gen(self):
        return itertools.chain([3], super().gen())
</snippet></ROW><ROW><id>8078763</id><snippet>__getitem__</snippet></ROW><ROW><id>8078763</id><snippet>start</snippet></ROW><ROW><id>8078763</id><snippet>stop</snippet></ROW><ROW><id>8078763</id><snippet>safe_slice</snippet></ROW><ROW><id>8078763</id><snippet>class SafeSlice(object):
    # slice rules: http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange
    def __init__(self,seq):
        self.seq=seq
    def __getitem__(self,key):
        seq=self.seq
        if isinstance(key,slice):
            start,stop,step=key.start,key.stop,key.step
            if start:
                seq[start]
            if stop:
                if stop&lt;0: stop=len(seq)+stop
                seq[stop-1]
        return seq[key]

seq=[1]
print(seq[:-2])
# []
print(SafeSlice(seq)[:-1])
# []
print(SafeSlice(seq)[:-2])
# IndexError: list index out of range
</snippet></ROW><ROW><id>8078763</id><snippet>safe_slice</snippet></ROW><ROW><id>8078763</id><snippet>range</snippet></ROW><ROW><id>8078763</id><snippet>def safe_slice(seq, start, stop=None, step=1):
    if stop is None:
        stop=start
        start=0
    else:
        seq[start]
    if stop&lt;0: stop=len(seq)+stop
    seq[stop-1]        
    return seq[start:stop:step]
</snippet></ROW><ROW><id>8078888</id><snippet>last</snippet></ROW><ROW><id>8078888</id><snippet>(defn cumulative-sum-2 [s]
  (loop [[x &amp; xs] s
         ss 0
         acc (transient [])]
    (if x      
      (let [ssx (+ ss x)]
        (recur xs ssx (conj! acc ssx)))
      (persistent! acc))))
</snippet></ROW><ROW><id>8079151</id><snippet>def myfunc(a,b):
    if (a&gt;b): return a
    else: return b
vecfunc = np.vectorize(myfunc)
result=vecfunc([[1,2,3],[5,6,9]],[7,4,5])
print(result)
# [[7 4 5]
#  [7 6 9]]
</snippet></ROW><ROW><id>8079151</id><snippet>np.vectorize</snippet></ROW><ROW><id>8079151</id><snippet>np.frompyfunc</snippet></ROW><ROW><id>8079151</id><snippet>np.vectorize</snippet></ROW><ROW><id>8079151</id><snippet>x</snippet></ROW><ROW><id>8079151</id><snippet>y</snippet></ROW><ROW><id>8079151</id><snippet>(array['x']&lt;y).sum()
</snippet></ROW><ROW><id>8079151</id><snippet>import numpy as np
array=np.arange(6).view([('x',np.int),('y',np.int)])
print(array)
# [(0, 1) (2, 3) (4, 5)]

print(array['x'])
# [0 2 4]

print(array['x']&lt;3)
# [ True  True False]

print((array['x']&lt;3).sum())
# 2
</snippet></ROW><ROW><id>8079458</id><snippet>def steps1d(self, ns):    
    return 2*sc.random.random_integers(0, 1, size=ns)-1

def Walk1d(self, ns=None):
    if ns is None:
        ns = self.ns
    return sc.cumsum(self.steps1d(ns))
</snippet></ROW><ROW><id>8079536</id><snippet>break</snippet></ROW><ROW><id>8079536</id><snippet># Try three times to make contact
while True:
    try:
        # Connect to API 
        connection = urllib2.urlopen(request, timeout=10)
        xmlstring = connection.read()
        break
    except URLError as e:
        tries += 1
        if tries &gt;= 3:
            sys.stderr.write(
                      'own3dStreamsUpdater: Fatal error: Repeated timeouts')
            exit()
</snippet></ROW><ROW><id>8079598</id><snippet>resources</snippet></ROW><ROW><id>8079598</id><snippet>lib</snippet></ROW><ROW><id>8079598</id><snippet>prog</snippet></ROW><ROW><id>8079598</id><snippet>prog.py</snippet></ROW><ROW><id>8079598</id><snippet>import prog</snippet></ROW><ROW><id>8079598</id><snippet>prog.py</snippet></ROW><ROW><id>8079956</id><snippet>import copy
new_list = copy.deepcopy(old_list)
</snippet></ROW><ROW><id>8080841</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>8080841</id><snippet>In [5]: datetime.datetime.strptime('2011/12/03', '%Y/%m/%d').date()
Out[5]: datetime.date(2011, 12, 3)
</snippet></ROW><ROW><id>8080903</id><snippet>d = dict(zip(keys, values))
</snippet></ROW><ROW><id>8080903</id><snippet>dict</snippet></ROW><ROW><id>8080903</id><snippet>dict</snippet></ROW><ROW><id>8081137</id><snippet>gcc python_test.c -lpython2.7 -o python_test
</snippet></ROW><ROW><id>8081580</id><snippet>zip()</snippet></ROW><ROW><id>8081580</id><snippet>&gt;&gt;&gt; zip(*[(1, 2), (3, 4), (5, 6)])
[(1, 3, 5), (2, 4, 6)]
</snippet></ROW><ROW><id>8081580</id><snippet>map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
</snippet></ROW><ROW><id>8081611</id><snippet>&gt;&gt;&gt; "Hello there. My name is Fr.ed. I am 25.5 years old.".split(". ")
['Hello there', 'My name is Fr.ed', 'I am 25.5 years old.']
</snippet></ROW><ROW><id>8082407</id><snippet>import hashlib
salt = 'uphi8eiV'
hash = 'a7a2a98cc06f5b2935db5d2866670cc8b48116022e5bc30095b6167ddc2f3f96'
if hashlib.md5.hexdigest(salt + rawInput).hexdigest() == hash:
  print('Correct password')
</snippet></ROW><ROW><id>8082572</id><snippet>def find_condition(cond_mk, cond_ck, *args):
    """
    .. function:: find_condition(cond_mk, cond_ck) -&gt; cond

       Create conditions by calling cond_mk until one is found that passes
       the condition check, cond_ck.  Once cond_ck returns True, iteration 
       over cond_mk stops and the last value processed is returned.

       ** WARNING **
       This function could loop infinitely.

       ``cond_mk`` - callable that creates a condition.  It's return value is
       passed to cond_ck for verification.

       ``cond_ck`` - callable that checks the return value of cond_mk.  

       ``args`` - any arguments to pass to cond_mk should be supplied here.
    """
    v = cond_mk(*args)
    while not cond_ck(v):
        v = cond_mk(*args)
    return v

# Test it out..
import random
random.seed()
print find_condition(random.randint, lambda x: x &gt; 95, 1, 100)
</snippet></ROW><ROW><id>8083525</id><snippet>@method_decorator</snippet></ROW><ROW><id>8083525</id><snippet>dispatch</snippet></ROW><ROW><id>8083525</id><snippet>from django.views.generic import View
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import user_passes_test

class MyView(View):
    @method_decorator(user_passes_test(lambda u: u.is_superuser))
    def dispatch(self, *args, **kwargs):
        return super(MyView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>8083575</id><snippet>  /* "cyexample.pyx":11
 *     cdef Py_ssize_t N = len(input)
 * 
 *     for i from 0 &lt;= i &lt; N:             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
 *         cur += input[i]
 * 
 */
  __pyx_t_1 = __pyx_v_N;
  for (__pyx_v_i = 0; __pyx_v_i &lt; __pyx_t_1; __pyx_v_i++) {
    /* "cyexample.pyx":12
 * 
 *     for i from 0 &lt;= i &lt; N:
 *         cur += input[i]             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
 * 
 *     return cur / N
 */
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = -1;
    if (__pyx_t_2 &lt; 0) {
      __pyx_t_2 += __pyx_bshape_0_input;
      if (unlikely(__pyx_t_2 &lt; 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 &gt;= __pyx_bshape_0_input)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_cur = (__pyx_v_cur + (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_bstruct_input.buf, __pyx_t_2, __pyx_bstride_0_input)));
  }
</snippet></ROW><ROW><id>8083655</id><snippet>draw_circular</snippet></ROW><ROW><id>8083655</id><snippet>draw_networkx</snippet></ROW><ROW><id>8083655</id><snippet>node_color</snippet></ROW><ROW><id>8083655</id><snippet>node_color</snippet></ROW><ROW><id>8083655</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
from random import random
g = nx.random_graphs.erdos_renyi_graph(10,0.5)
colors = [(random(), random(), random()) for _i in range(10)]
nx.draw_circular(g, node_color=colors)
plt.show()
</snippet></ROW><ROW><id>8083655</id><snippet>networkx.layout.circular_layout</snippet></ROW><ROW><id>8083670</id><snippet>from django.db.models import Max
from datetime import datetime, timedelta

Profile.objects.annotate(last_update=Max('subscription__created')).filter(last_update__lt=datetime.now()-timedelta(days=3))
</snippet></ROW><ROW><id>8084281</id><snippet>types.MethodType</snippet></ROW><ROW><id>8084281</id><snippet>@property</snippet></ROW><ROW><id>8084281</id><snippet>class User:
    name = models.CharField(max_length=32)
    @property
    def company(self):
        return UserProfile.objects.get_or_create(user=self)[0].get_company())
</snippet></ROW><ROW><id>8084281</id><snippet>User</snippet></ROW><ROW><id>8084281</id><snippet>class MyUser(User):
    @property
    def company(self):
        return UserProfile.objects.get_or_create(user=self)[0].get_company())
</snippet></ROW><ROW><id>8084311</id><snippet>fname</snippet></ROW><ROW><id>8084311</id><snippet>with open(fname, 'r') as fin:
    print fin.read()
</snippet></ROW><ROW><id>8084817</id><snippet>import functools

def callback(x, y):
    return x + y

g = functools.partial(f, y=3)
g(2) #=&gt; 5
</snippet></ROW><ROW><id>8084976</id><snippet>for url in urls:
    print url
</snippet></ROW><ROW><id>8085078</id><snippet>TextTestRunner</snippet></ROW><ROW><id>8085078</id><snippet>failfast</snippet></ROW><ROW><id>8085210</id><snippet>myWords = MyGroup.objects.get(name = "bla").allkeyword.values_list('name', flat=True)
</snippet></ROW><ROW><id>8085330</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8085330</id><snippet># parse bookmarks.html
with open(sys.argv[1]) as bookmark_file:
    soup = BeautifulSoup(bookmark_file.read())

# extract youtube video urls
video_url_regex = re.compile('http://www.youtube.com/watch')
urls = [link['href'] for link in soup('a', href=video_url_regex)]
</snippet></ROW><ROW><id>8085330</id><snippet># extract video ids from the urls
ids = [] # you could use `set()` and `ids.add()` to avoid duplicates
for video_url in urls:
    url = urlparse.urlparse(video_url)
    video_id = urlparse.parse_qs(url.query).get('v')
    if not video_id: continue # no video_id in the url
    ids.append(video_id[0])
</snippet></ROW><ROW><id>8085330</id><snippet># get some statistics for the videos
yt_service = YouTubeService()
yt_service.ssl = True #NOTE: it works for readonly requests
yt_service.debug = True # show requests
</snippet></ROW><ROW><id>8085330</id><snippet>writer = csv.writer(open(sys.argv[2], 'wb')) # save to cvs file
for video_id in ids:
    try:
        entry = yt_service.GetYouTubeVideoEntry(video_id=video_id)
    except Exception, e:
        print &gt;&gt;sys.stderr, "Failed to retrieve entry video_id=%s: %s" %(
            video_id, e)
    else:
        title = entry.media.title.text
        print "Title:", title
        view_count = entry.statistics.view_count
        print "View count:", view_count
        writer.writerow((video_id, title, view_count)) # write it
</snippet></ROW><ROW><id>8085330</id><snippet>$ python download-video-stats.py neudorfer.html out.csv
send: u'GET https://gdata.youtube.com/feeds/api/videos/Gg81zi0pheg HTTP/1.1\r\nAcc
ept-Encoding: identity\r\nHost: gdata.youtube.com\r\nContent-Type: application/ato
m+xml\r\nUser-Agent: None GData-Python/2.0.15\r\n\r\n'                           
reply: 'HTTP/1.1 200 OK\r\n'
header: X-GData-User-Country: RU
header: Content-Type: application/atom+xml; charset=UTF-8
header: Expires: Thu, 10 Nov 2011 19:31:23 GMT
header: Date: Thu, 10 Nov 2011 19:31:23 GMT
header: Cache-Control: private, max-age=300, no-transform
header: Vary: *
header: GData-Version: 1.0
header: Last-Modified: Wed, 02 Nov 2011 08:58:11 GMT
header: Transfer-Encoding: chunked
header: X-Content-Type-Options: nosniff
header: X-Frame-Options: SAMEORIGIN
header: X-XSS-Protection: 1; mode=block
header: Server: GSE
Title: Paramore - Let The Flames Begin [Wal-Mart Soundcheck]
View count: 27807
</snippet></ROW><ROW><id>8085586</id><snippet>graph[v1][v2] = weight
</snippet></ROW><ROW><id>8086040</id><snippet>my_list = forms.ModelMultipleChoiceField(
    label='List',
    required=False,
    queryset=[],
    widget=SelectMultiple(attrs={'class': 'foobar'}))
</snippet></ROW><ROW><id>8086042</id><snippet>content=r'''\documentclass{article}
\begin{document}
...
\textbf{\huge %(school)s \\}
\vspace{1cm}
\textbf{\Large %(title)s \\}
...
\end{document}
'''
</snippet></ROW><ROW><id>8086042</id><snippet>argparse</snippet></ROW><ROW><id>8086042</id><snippet>parser=argparse.ArgumentParser()
parser.add_argument('-c', '--course')
parser.add_argument('-t', '--title')
parser.add_argument('-n', '--name',) 
parser.add_argument('-s', '--school', default='My U')
</snippet></ROW><ROW><id>8086042</id><snippet>content</snippet></ROW><ROW><id>8086042</id><snippet>args=parser.parse_args()
content%args.__dict__
</snippet></ROW><ROW><id>8086042</id><snippet>with open('cover.tex','w') as f:
    f.write(content%args.__dict__)
</snippet></ROW><ROW><id>8086042</id><snippet>subprocess</snippet></ROW><ROW><id>8086042</id><snippet>pdflatex cover.tex</snippet></ROW><ROW><id>8086042</id><snippet>proc=subprocess.Popen(shlex.split('pdflatex cover.tex'))
proc.communicate()
</snippet></ROW><ROW><id>8086042</id><snippet>lpr</snippet></ROW><ROW><id>8086042</id><snippet>os.unlink('cover.tex')
os.unlink('cover.log')
</snippet></ROW><ROW><id>8086042</id><snippet>make_cover.py -c "Hardest Class Ever" -t "Theoretical Theory" -n Me
</snippet></ROW><ROW><id>8086312</id><snippet>#!/usr/bin/python
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.shapes import Drawing
from reportlab.lib import colors
from random import randint
from datetime import date, timedelta

# Generate some testdata
data = [
    [(x,randint(90,100)) for x in range(0,2001,100)],
    [(x,randint(30,80)) for x in range(0,2001,100)],
    [(x,randint(5,20)) for x in range(0,2001,100)],
    ]

# Create the drawing and the lineplot
drawing = Drawing(400, 200)
lp = LinePlot()
lp.x = 50
lp.y = 50
lp.height = 125
lp.width = 300
lp._inFill = 1
lp.data = data
for i in range(len(data)):
    lp.lines[i].strokeColor = colors.toColor('hsl(%s,80%%,40%%)'%(i*60))

# Specify where the labels should be
lp.xValueAxis.valueSteps = [5, 500, 1402, 1988]
# Create a formatter that takes the value and format it however you like.
def formatter(val):
    #return val
    #return 'x=%s'%val
    return (date(2010,1,1) + timedelta(val)).strftime('%Y-%m-%d')

# Use the formatter
lp.xValueAxis.labelTextFormat = formatter
drawing.add(lp)

from reportlab.graphics import renderPDF
renderPDF.drawToFile(drawing, 'example.pdf', 'lineplot with dates')
</snippet></ROW><ROW><id>8086380</id><snippet>//ns1:entry[ns2:content[@name='type' and .='directory']]
</snippet></ROW><ROW><id>8086661</id><snippet>nl=$'\n'
...
   --summary "Today is ${date}. Poor whiskers takes a tumble.${nl}She's fine, though, don't worry."
</snippet></ROW><ROW><id>8086862</id><snippet>from pamie30 import PAM30

ie1 = PAM30.PAMIE("http://www.google.com")
ie2 = PAM30.PAMIE("http://news.google.com")
</snippet></ROW><ROW><id>8086862</id><snippet>ie1.setTextBox("q","my text goes here")
ie1.clickButton("btnK")
</snippet></ROW><ROW><id>8086862</id><snippet>ie1 = None
</snippet></ROW><ROW><id>8086899</id><snippet>abstractmethod</snippet></ROW><ROW><id>8086947</id><snippet>class MyActiveManager(models.Manager):
    def active(self):
        return self.filter(is_active=True)

    def online(self):
        return self.filter(is_online=True)


class MyModel:
    ...
    objects = MyActiveManager()

...

active_objects = MyModel.objects.active()
online_objects = MyModel.objects.online()
</snippet></ROW><ROW><id>8087109</id><snippet>&gt;&gt;&gt; tosearch = "This is a text string where I typed hlelo but I meant to type hello."
&gt;&gt;&gt; import string
&gt;&gt;&gt; exclude = set(string.punctuation)
&gt;&gt;&gt; tosearch = ''.join(ch for ch in tosearch if ch not in exclude)
&gt;&gt;&gt; tosearch
'This is a text string where I typed hlelo but I meant to type hello'
&gt;&gt;&gt; words = set(tosearch.split(" "))
</snippet></ROW><ROW><id>8087109</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; difflib.get_close_matches('hello', words)
['hello', 'hlelo']
</snippet></ROW><ROW><id>8087294</id><snippet>v1 = '2011.11.10'
v2 = 10
...
c.execute(" UPDATE archive SET date=? WHERE Id=? ", (v1,v2) ) 
</snippet></ROW><ROW><id>8087294</id><snippet>cursor.execute</snippet></ROW><ROW><id>8087294</id><snippet>cursor.executemany</snippet></ROW><ROW><id>8087795</id><snippet>filter()</snippet></ROW><ROW><id>8087795</id><snippet>set()</snippet></ROW><ROW><id>8087850</id><snippet>&lt;gd:rating average='4.553648' max='5' min='1' numRaters='233' rel='http://schemas.google.com/g/2005#overall'/&gt;
</snippet></ROW><ROW><id>8087850</id><snippet>&lt;entry/&gt;</snippet></ROW><ROW><id>8087905</id><snippet>QPixmap.fill</snippet></ROW><ROW><id>8087905</id><snippet>from PyQt4 import QtGui

class Window(QtGui.QComboBox):
    def __init__(self):
        QtGui.QComboBox.__init__(self)
        self.resize(200, 25)
        pixmap = QtGui.QPixmap(20, 20)
        for color in 'red orange yellow green blue grey violet'.split():
            pixmap.fill(QtGui.QColor(color))
            self.addItem(QtGui.QIcon(pixmap), color.title())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    win = Window()
    win.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8088009</id><snippet>s.decode('ascii', 'strict').encode('ascii', 'ignore')
</snippet></ROW><ROW><id>8088009</id><snippet>soup = BeautifulSoup(strIndexPage)
strIndexPageBody = unicode(soup.body)
strIndexPageBody = strIndexPageBody.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>8088042</id><snippet>data = '''\
2008-10-01 12:00:10, 34  
2008-10-01 12:00:20, 55  
2008-10-01 12:00:30, 46  
2008-10-01 12:00:40, 33  
2008-10-01 12:00:50, 55  
2008-10-01 12:01:00, 21  
2008-10-01 12:01:10, 2  
2008-10-01 12:01:20, 34  
2008-10-01 12:01:30, 521  
2008-10-01 12:01:40, 45  
2008-10-01 12:01:50, 32  
2008-10-01 12:02:00, 34
'''.splitlines()

import csv

d = {}
for timestamp, value in csv.reader(data):
    minute, colon, second = timestamp.rpartition(':')
    if minute not in d:
        d[minute] = [float(value)]
    else:
        d[minute].append(float(value))

for minute, values in sorted(d.items()):
    avg_value = sum(values) / len(values)
    print minute + ',' + str(avg_value)
</snippet></ROW><ROW><id>8088095</id><snippet>{% for sport in sports %}
    &lt;p&gt;{{forloop.counter}}. {{ sport }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>8088095</id><snippet>&lt;ol&gt;
{% for sport in sports %}
    &lt;li&gt;{{ sport }}&lt;/li&gt;
{% endfor %}
&lt;/ol&gt;
</snippet></ROW><ROW><id>8088312</id><snippet>rem Configure the environment for 64-bit builds.
rem Use "vcvars32.bat" for a 32-bit build.
"C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvars64.bat"
rem Convince setup.py to use the SDK tools.
set MSSdk=1
set DISTUTILS_USE_SDK=1 
</snippet></ROW><ROW><id>8088351</id><snippet>%</snippet></ROW><ROW><id>8088351</id><snippet>if len(s) % 3 == 0:
    ...
</snippet></ROW><ROW><id>8088351</id><snippet>s[:len(s) // 3 * 3]
</snippet></ROW><ROW><id>8088351</id><snippet>s[:-(len(s) % 3)]
</snippet></ROW><ROW><id>8088374</id><snippet>.py</snippet></ROW><ROW><id>8088374</id><snippet>PyQt4</snippet></ROW><ROW><id>8088374</id><snippet>from foo import *</snippet></ROW><ROW><id>8088374</id><snippet>from PyQt4 import QtGui, QtCore</snippet></ROW><ROW><id>8088374</id><snippet>QtGui.QMainWindow</snippet></ROW><ROW><id>8088383</id><snippet>&gt;&gt;&gt; hex(ord("c"))
'0x63'
&gt;&gt;&gt; format(ord("c"), "x")
'63'
&gt;&gt;&gt; "c".encode("hex")
'63'
</snippet></ROW><ROW><id>8088408</id><snippet>In [1]: a = 0xECE4
In [2]: b = 0xE4EC

In [3]: a
Out[3]: 60644

In [4]: b
Out[4]: 58604

In [5]: socket.htons(a)
Out[5]: 58604

In [6]: socket.htons(b)
Out[6]: 60644

In [7]: socket.htons(a) == b
Out[7]: True

In [8]: socket.htons(b) == a
Out[8]: True

In [9]: hex(socket.htons(a))
Out[9]: '0xe4ec'

In [10]: hex(socket.htons(b))
Out[10]: '0xece4'

In [11]: bin(socket.htons(a))
Out[11]: '0b1110010011101100'

In [12]: bin(socket.htons(b))
Out[12]: '0b1110110011100100'
</snippet></ROW><ROW><id>8088408</id><snippet>socket.htons(x)</snippet></ROW><ROW><id>8088572</id><snippet>reversed</snippet></ROW><ROW><id>8088572</id><snippet>records = [
    {'p_pnref': 'E78P2DFEA7E3', 'p_result': '12'},
    {'p_pnref': 'E78P2E93B933', 'p_result': '0'},
    {'p_pnref': 'E35P0A5578D3', 'p_result': '12'},
    {'p_pnref': 'E24P0AA506C3', 'p_result': '24'},
    {'p_pnref': 'E25P0AFF2C43', 'p_result': '24'},
    {'p_pnref': 'E34P0B4909A3', 'p_result': '24'},
]

for record in reversed(records):
    if record['p_result'] == '0':
        print record['p_pnref']
        break
</snippet></ROW><ROW><id>8088872</id><snippet>np.rot90</snippet></ROW><ROW><id>8088872</id><snippet>block3[:] = np.rot90(block3.copy(),-1)
</snippet></ROW><ROW><id>8088872</id><snippet>copy()</snippet></ROW><ROW><id>8088872</id><snippet>copy()</snippet></ROW><ROW><id>8088872</id><snippet>block3</snippet></ROW><ROW><id>8088872</id><snippet>copy()</snippet></ROW><ROW><id>8088872</id><snippet>block3</snippet></ROW><ROW><id>8088872</id><snippet>import numpy as np
a = np.arange(36).reshape(6, 6)
print(a)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [18 19 20 21 22 23]
#  [24 25 26 27 28 29]
#  [30 31 32 33 34 35]]
block3 = a[3:6, 0:3]

# To rotate counterclockwise
block3[:] = np.rot90(block3.copy())
print(a)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [20 26 32 21 22 23]
#  [19 25 31 27 28 29]
#  [18 24 30 33 34 35]]

# To rotate clockwise
a = np.arange(36).reshape(6, 6)
block3 = a[3:6, 0:3]
block3[:] = np.rot90(block3.copy(),-1)
print(a)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [30 24 18 21 22 23]
#  [31 25 19 27 28 29]
#  [32 26 20 33 34 35]]
</snippet></ROW><ROW><id>8088956</id><snippet>ting.py</snippet></ROW><ROW><id>8088956</id><snippet>/.*</snippet></ROW><ROW><id>8089132</id><snippet>soup.find('abbr').string</snippet></ROW><ROW><id>8089132</id><snippet>date</snippet></ROW><ROW><id>8089132</id><snippet>from BeautifulSoup import BeautifulSoup

doc = '&lt;abbr class="dtstart" title="2012-11-16T00:00:00-05:00"&gt;November 16, 2012&lt;/abbr&gt;'

soup = BeautifulSoup(doc)

for abbr in soup.findAll('abbr'):
    print abbr.string
</snippet></ROW><ROW><id>8089132</id><snippet>text</snippet></ROW><ROW><id>8089132</id><snippet>''.join([el.string for el in r.findAll('strong')])</snippet></ROW><ROW><id>8089198</id><snippet>SELECT word FROM table WHERE word NOT REGEXP '[abc]';
</snippet></ROW><ROW><id>8089241</id><snippet>&lt;KeyRelease-Return&gt;</snippet></ROW><ROW><id>8089241</id><snippet>import Tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.text = tk.Text(self)
        self.text.pack()
        self.text.bind("&lt;KeyRelease-Return&gt;", self.on_return_release)

    def on_return_release(self, event):
        self.text.insert("end", "boink! ")

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>8089241</id><snippet>"break"</snippet></ROW><ROW><id>8089453</id><snippet>RequestContext</snippet></ROW><ROW><id>8089453</id><snippet>render_to_response("foo.html", RequestContext(request, {}))
</snippet></ROW><ROW><id>8089453</id><snippet>django.core.context_processors.csrf</snippet></ROW><ROW><id>8089453</id><snippet>CONTEXT_PROCESSORS</snippet></ROW><ROW><id>8089501</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>8089501</id><snippet>__iter__()</snippet></ROW><ROW><id>8089501</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>8089501</id><snippet>__iter__()</snippet></ROW><ROW><id>8089576</id><snippet>ctypes</snippet></ROW><ROW><id>8089576</id><snippet>ctypes</snippet></ROW><ROW><id>8089576</id><snippet>import ctypes
from ctypes import wintypes

_PSECURITY_DESCRIPTOR = ctypes.POINTER(wintypes.BYTE)
_PSID = ctypes.POINTER(wintypes.BYTE)
_LPDWORD = ctypes.POINTER(wintypes.DWORD)
_LPBOOL = ctypes.POINTER(wintypes.BOOL)

_OWNER_SECURITY_INFORMATION = 0X00000001
_SID_TYPES = dict(enumerate(
              "User Group Domain Alias WellKnownGroup DeletedAccount "
              "Invalid Unknown Computer Label".split(), 1))

_advapi32 = ctypes.windll.advapi32

##MSDN windows/desktop/aa446639
_GetFileSecurity = _advapi32.GetFileSecurityW
_GetFileSecurity.restype = wintypes.BOOL
_GetFileSecurity.argtypes = [
    wintypes.LPCWSTR,      #File Name (in)
    wintypes.DWORD,        #Requested Information (in)
    _PSECURITY_DESCRIPTOR, #Security Descriptor (out_opt)
    wintypes.DWORD,        #Length (in)
    _LPDWORD,              #Length Needed (out)
]

##MSDN windows/desktop/aa446651
_GetSecurityDescriptorOwner = _advapi32.GetSecurityDescriptorOwner
_GetSecurityDescriptorOwner.restype = wintypes.BOOL
_GetSecurityDescriptorOwner.argtypes = [
    _PSECURITY_DESCRIPTOR,  #Security Descriptor (in)
    ctypes.POINTER(_PSID),  #Owner (out)
    _LPBOOL,                #Owner Exists (out)
]

##MSDN windows/desktop/aa379166
_LookupAccountSid = _advapi32.LookupAccountSidW
_LookupAccountSid.restype = wintypes.BOOL
_LookupAccountSid.argtypes = [
    wintypes.LPCWSTR, #System Name (in)
    _PSID,            #SID (in)
    wintypes.LPCWSTR, #Name (out)
    _LPDWORD,         #Name Size (inout)
    wintypes.LPCWSTR, #Domain(out_opt)
    _LPDWORD,         #Domain Size (inout)
    _LPDWORD,         #SID Type (out)
]

def get_file_security(filename, request):
    length = wintypes.DWORD()
    _GetFileSecurity(filename, request, None, 0, ctypes.byref(length))

    if length.value:
        sd = (wintypes.BYTE * length.value)()
        if _GetFileSecurity(filename, request, sd, length, 
                            ctypes.byref(length)):
            return sd

def get_security_descriptor_owner(sd):
    if sd is not None:
        sid = _PSID()
        sid_defaulted = wintypes.BOOL()

        if _GetSecurityDescriptorOwner(sd, ctypes.byref(sid), 
                                       ctypes.byref(sid_defaulted)):
            return sid

def look_up_account_sid(sid):
    if sid is not None:
        SIZE = 256
        name = ctypes.create_unicode_buffer(SIZE)
        domain = ctypes.create_unicode_buffer(SIZE) 
        cch_name = wintypes.DWORD(SIZE)
        cch_domain = wintypes.DWORD(SIZE)
        sid_type = wintypes.DWORD()

        if _LookupAccountSid(None, sid, name, ctypes.byref(cch_name),
                             domain, ctypes.byref(cch_domain),
                             ctypes.byref(sid_type)):
            return name.value, domain.value, sid_type.value

    return None, None, None

if __name__ == '__main__':
    import sys

    filename = sys.argv[1]
    if isinstance(filename, bytes):
        filename = filename.decode(sys.stdin.encoding)
    request = _OWNER_SECURITY_INFORMATION

    sd = get_file_security(filename, request)
    sid = get_security_descriptor_owner(sd)
    name, domain, sid_type = look_up_account_sid(sid)

    print("File: {0}".format(filename))
    if name is not None:
        print("owner: {0}\ntype: {1}\ndomain: {2}".format(
              name, _SID_TYPES[sid_type], domain))
    else:
        print('Error')
</snippet></ROW><ROW><id>8089930</id><snippet>page = request.GET.get('page')
</snippet></ROW><ROW><id>8089930</id><snippet>page = request.GET.get('page', '1')
</snippet></ROW><ROW><id>8089930</id><snippet>[]</snippet></ROW><ROW><id>8089930</id><snippet>KeyError</snippet></ROW><ROW><id>8089930</id><snippet>get</snippet></ROW><ROW><id>8089930</id><snippet>None</snippet></ROW><ROW><id>8089930</id><snippet>int(None)</snippet></ROW><ROW><id>8089930</id><snippet>get</snippet></ROW><ROW><id>8089930</id><snippet>None</snippet></ROW><ROW><id>8089930</id><snippet>'1'</snippet></ROW><ROW><id>8089930</id><snippet>int</snippet></ROW><ROW><id>8090226</id><snippet>normalize-space(//tr[contains(td,"Description")]/following-sibling::tr[1]/td)
</snippet></ROW><ROW><id>8090226</id><snippet>normalize-space()</snippet></ROW><ROW><id>8090240</id><snippet>def func(fx):
    d={'AAA':1,'BBB':2,'CCC':3}
    length=len(fx)
    if length % 3 == 0:
        pass
    elif length % 3 == 1:
        fx = fx[:-1]
    elif length % 3 == 2:
        fx = fx[:-2]
    Fx=fx.upper()
    Fx3=[Fx[i:i+3] for i in range(0,len(Fx),3)]
    translate=[d[x] for x in Fx3]
    return translate
</snippet></ROW><ROW><id>8090240</id><snippet>def func(fx):
    d = {'AAA':1,'BBB':2,'CCC':3}
    return [d["".join(x).upper()] for x in zip(*[iter(fx)]*3)]
</snippet></ROW><ROW><id>8090402</id><snippet>itervalues</snippet></ROW><ROW><id>8090402</id><snippet>d = {1:2, 3:4}
if 4 in d.itervalues():
    print 'Aha!'
</snippet></ROW><ROW><id>8090402</id><snippet>set</snippet></ROW><ROW><id>8090412</id><snippet>video_id</snippet></ROW><ROW><id>8090412</id><snippet>python</snippet></ROW><ROW><id>8090412</id><snippet>&gt;&gt;&gt; from gdata.youtube.service import YouTubeService
&gt;&gt;&gt; yt = YouTubeService()
&gt;&gt;&gt; entry = yt.GetYouTubeVideoEntry(video_id='pP9VjGmmhfo')
&gt;&gt;&gt; entry.rating
&lt;gdata.youtube.Rating object at 0x2722cd0&gt;
&gt;&gt;&gt; print entry.rating
&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;ns0:rating average="4.4662576" max="5" min="1" numRaters="652" rel="http://schemas.google.com/g/2005#overall" xmlns:ns0="http://schemas.google.com/g/2005" /&gt;
&gt;&gt;&gt; entry.rating.average
'4.4662576'
&gt;&gt;&gt; entry.rating.numRaters
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Rating' object has no attribute 'numRaters'
&gt;&gt;&gt; dir(entry.rating)
['FindExtensions', 'ToString', '_AddMembersToElementTree', '_BecomeChildElement', '_ConvertElementAttributeToMember', '_ConvertElementTreeToMember', '_HarvestElementTree', '_ToElementTree', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_attributes', '_children', '_namespace', '_tag', 'average', 'extension_attributes', 'extension_elements', 'max', 'min', 'num_raters', 'text']
&gt;&gt;&gt; entry.rating.num_raters
'652'
</snippet></ROW><ROW><id>8090511</id><snippet>In [13]: %paste
import numpy as np

List = [['a',.3,.3],
        ['b',-.5,.4]]

scale = lambda x: x - x.mean()
Arr = np.rec.fromrecords(List,names=['id','var1','var2'])

vars_to_scale = ['var1', 'var2']
for var in vars_to_scale:
    Arr[var] = scale(Arr[var])
print Arr
## -- End pasted text --
[('a', 0.4, -0.04999999999999999) ('b', -0.4, 0.050000000000000044)]
</snippet></ROW><ROW><id>8090605</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(24).reshape((4,6))
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23]])
&gt;&gt;&gt; a.reshape((2,a.shape[0]//2,3,-1)).mean(axis=3).mean(1)
array([[  3.5,   5.5,   7.5],
       [ 15.5,  17.5,  19.5]])
</snippet></ROW><ROW><id>8090605</id><snippet>def rebin(a, shape):
    sh = shape[0],a.shape[0]//shape[0],shape[1],a.shape[1]//shape[1]
    return a.reshape(sh).mean(-1).mean(1)
</snippet></ROW><ROW><id>8091714</id><snippet>newIng.parentIng = parentIngObj</snippet></ROW><ROW><id>8091714</id><snippet>newIng.parent = parentIngObj</snippet></ROW><ROW><id>8091714</id><snippet>id</snippet></ROW><ROW><id>8091714</id><snippet>addIngredient(...)</snippet></ROW><ROW><id>8091714</id><snippet>ingredient</snippet></ROW><ROW><id>8091714</id><snippet>ingName</snippet></ROW><ROW><id>8091714</id><snippet>addIngredient(...)</snippet></ROW><ROW><id>8091714</id><snippet>None</snippet></ROW><ROW><id>8091714</id><snippet>parent</snippet></ROW><ROW><id>8091921</id><snippet>size = (n + n + 1) * (2 * m + 1)
histogram = zeros(size, Int)
</snippet></ROW><ROW><id>8091921</id><snippet>updateHistogram(i, j, element)

    if (element &lt; 0)
        element = m - element;

    rowIndex        = i * m + element
    columnIndex     = n * m + j * m + element
    diagonalIndex   = 2 * n * m + element

    histogram[rowIndex] = histogram[rowIndex] + 1
    histogram[columnIndex] = histogram[columnIndex] + 1

    if (i = j)
        histogram[diagonalIndex] = histogram[diagonalIndex] + 1
</snippet></ROW><ROW><id>8092220</id><snippet>result = cursor.fetchone ("SELECT count(*) FROM movie_movie WHERE title = %s AND pageid = %s;" % (title,pageid))
</snippet></ROW><ROW><id>8092220</id><snippet>result = cursor.fetchone ("SELECT count(*) FROM movie_movie WHERE title = :1 AND pageid = :2", [title,pageid])
</snippet></ROW><ROW><id>8092344</id><snippet>UserAdmin</snippet></ROW><ROW><id>8092344</id><snippet>User</snippet></ROW><ROW><id>8092376</id><snippet>for name, func in inspect.getmembers(targetCls, inspect.ismethod):
        def wrapper(*args, **kwargs):
            print ("Start debug support for %s.%s()" % (targetCls.__name__, name))
</snippet></ROW><ROW><id>8092376</id><snippet>wrapper</snippet></ROW><ROW><id>8092376</id><snippet>name</snippet></ROW><ROW><id>8092376</id><snippet>for-loop</snippet></ROW><ROW><id>8092376</id><snippet>for-loop</snippet></ROW><ROW><id>8092376</id><snippet>name</snippet></ROW><ROW><id>8092376</id><snippet>TestMethod2</snippet></ROW><ROW><id>8092376</id><snippet>name</snippet></ROW><ROW><id>8092376</id><snippet>TestMethod2</snippet></ROW><ROW><id>8092376</id><snippet>name</snippet></ROW><ROW><id>8092376</id><snippet>closure</snippet></ROW><ROW><id>8092376</id><snippet>def Debug(targetCls):
    for name, func in inspect.getmembers(targetCls, inspect.ismethod):
        def closure(name=name,func=func):
            def wrapper(*args, **kwargs):
                print ("Start debug support for %s.%s()" % (targetCls.__name__, name))
                result = func(*args, **kwargs)
                return result
            return wrapper        
        setattr(targetCls, name, closure())
    return targetCls
</snippet></ROW><ROW><id>8092376</id><snippet>def Debug(targetCls):
    def closure(name,func):
        def wrapper(*args, **kwargs):
            print ("Start debug support for %s.%s()" % (targetCls.__name__, name));
            result = func(*args, **kwargs)
            return result
        return wrapper        
    for name, func in inspect.getmembers(targetCls, inspect.ismethod):
        setattr(targetCls, name, closure(name,func))
    return targetCls
</snippet></ROW><ROW><id>8092376</id><snippet>closure</snippet></ROW><ROW><id>8092376</id><snippet>closure(name,func)</snippet></ROW><ROW><id>8092376</id><snippet>name</snippet></ROW><ROW><id>8092376</id><snippet>func</snippet></ROW><ROW><id>8092710</id><snippet>MIDDLEWARE_CLASSES = (
   'django.contrib.sessions.middleware.SessionMiddleware',
   'django.middleware.locale.LocaleMiddleware',
   'django.middleware.common.CommonMiddleware',
   ...
)
</snippet></ROW><ROW><id>8092711</id><snippet>__init__</snippet></ROW><ROW><id>8092711</id><snippet>char</snippet></ROW><ROW><id>8092711</id><snippet>def</snippet></ROW><ROW><id>8092813</id><snippet>spam[3:5]</snippet></ROW><ROW><id>8092813</id><snippet>:</snippet></ROW><ROW><id>8092813</id><snippet>[me@home]$ pep8  &lt;(echo "spam[3:44]")   # no warnings
[me@home]$ pep8  &lt;(echo "spam[3 : 44]")  
/dev/fd/63:1:7: E203 whitespace before ':'
</snippet></ROW><ROW><id>8092813</id><snippet>:</snippet></ROW><ROW><id>8092813</id><snippet>spam[3: 44]</snippet></ROW><ROW><id>8092813</id><snippet>spam[3:44]</snippet></ROW><ROW><id>8092813</id><snippet>[me@home]$ pep8 &lt;(echo "spam[ham(66)//3:44+eggs()]")
/dev/fd/63:1:13: E225 missing whitespace around operator

[me@home]$ pep8 &lt;(echo "spam[ham(66) // 3:44 + eggs()]")  # OK

[me@home]$ pep8 &lt;(echo "spam[ham(66) // 3 : 44 + eggs()]")
/dev/fd/63:1:18: E203 whitespace before ':'
</snippet></ROW><ROW><id>8092813</id><snippet> spam[(ham(66) // 3):(44 + eggs())]
</snippet></ROW><ROW><id>8092813</id><snippet> s_from = ham(66) // 3 
 s_to = 44 + eggs()
 spam[s_from:s_to]
</snippet></ROW><ROW><id>8092908</id><snippet>import itertools
import operator

data=[(1, 'A', 'foo'),
    (2, 'A', 'bar'),
    (100, 'A', 'foo-bar'),

    ('xx', 'B', 'foobar'),
    ('yy', 'B', 'foo'),

    (1000, 'C', 'py'),
    (200, 'C', 'foo'),
    ]

for key,group in itertools.groupby(data,operator.itemgetter(1)):
    print(list(group))
</snippet></ROW><ROW><id>8092908</id><snippet>[(1, 'A', 'foo'), (2, 'A', 'bar'), (100, 'A', 'foo-bar')]
[('xx', 'B', 'foobar'), ('yy', 'B', 'foo')]
[(1000, 'C', 'py'), (200, 'C', 'foo')]
</snippet></ROW><ROW><id>8092908</id><snippet>[list(group) for key,group in itertools.groupby(data,operator.itemgetter(1))]
</snippet></ROW><ROW><id>8092908</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8092908</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8092908</id><snippet>data</snippet></ROW><ROW><id>8092908</id><snippet>key</snippet></ROW><ROW><id>8092908</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8092908</id><snippet>key</snippet></ROW><ROW><id>8092908</id><snippet>row=(1, 'A', 'foo')
</snippet></ROW><ROW><id>8092908</id><snippet>operator.itemgetter(1)(row)
</snippet></ROW><ROW><id>8092908</id><snippet>'A'</snippet></ROW><ROW><id>8092908</id><snippet>data</snippet></ROW><ROW><id>8092908</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8092908</id><snippet>itertools.groupy</snippet></ROW><ROW><id>8092908</id><snippet>data2=sorted(data,key=operator.itemgetter(1))
</snippet></ROW><ROW><id>8093043</id><snippet>import numpy as np
import numpy.linalg as linalg

A = np.random.random((3,3))
eigenValues,eigenVectors = linalg.eig(A)

idx = eigenValues.argsort()   
eigenValues = eigenValues[idx]
eigenVectors = eigenVectors[:,idx]
</snippet></ROW><ROW><id>8093127</id><snippet>SessionID</snippet></ROW><ROW><id>8093127</id><snippet>Application.onCreate</snippet></ROW><ROW><id>8093127</id><snippet>Session.lookupSession</snippet></ROW><ROW><id>8093127</id><snippet>SessionID</snippet></ROW><ROW><id>8093127</id><snippet>SessionID</snippet></ROW><ROW><id>8093146</id><snippet>struct</snippet></ROW><ROW><id>8093146</id><snippet>import struct
content = f.read() #I'm not sure why in a binary file you were using "readlines",
                   #but if this is too much data, you can supply a size to read()
n, T, Teq, cool = struct.unpack("dddd",content[:32])
</snippet></ROW><ROW><id>8093146</id><snippet>struct.unpack</snippet></ROW><ROW><id>8093146</id><snippet>struct.unpack</snippet></ROW><ROW><id>8093146</id><snippet>struct.error</snippet></ROW><ROW><id>8093146</id><snippet>read</snippet></ROW><ROW><id>8093146</id><snippet>n_content = f.read(8*number_of_ns) #8, because doubles are 8 bytes
n = struct.unpack("d"*number_of_ns,n_content)
</snippet></ROW><ROW><id>8093206</id><snippet>ImportError</snippet></ROW><ROW><id>8093206</id><snippet>xxx</snippet></ROW><ROW><id>8093206</id><snippet>sys.path</snippet></ROW><ROW><id>8093206</id><snippet>xxx</snippet></ROW><ROW><id>8093206</id><snippet>xxx</snippet></ROW><ROW><id>8093206</id><snippet>json</snippet></ROW><ROW><id>8093621</id><snippet>
clutter_texture_set_from_rgb_data (texture,
                                   gdk_pixbuf_get_pixels (pixbuf),
                                   gdk_pixbuf_get_has_alpha (pixbuf),
                                   gdk_pixbuf_get_width (pixbuf),
                                   gdk_pixbuf_get_height (pixbuf),
                                   gdk_pixbuf_get_rowstride (pixbuf),
                                   gdk_pixbuf_get_has_alpha (pixbuf) ? 4 : 3,
                                   CLUTTER_TEXTURE_NONE,
                                   &amp;error);
</snippet></ROW><ROW><id>8093795</id><snippet>reader</snippet></ROW><ROW><id>8093795</id><snippet>empsTbl</snippet></ROW><ROW><id>8093795</id><snippet>empsTbl</snippet></ROW><ROW><id>8093795</id><snippet>empsTbl</snippet></ROW><ROW><id>8093795</id><snippet>readerSet = set(i[0] for i in reader)

for j in empsTbl:
    if j.inmptl_wiw_userid in readerSet:
        print "Match"
</snippet></ROW><ROW><id>8094295</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>8094295</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>8094295</id><snippet>from xml.etree.ElementTree import ElementTree, dump

tree = ElementTree()
tree.parse('file.xml')

items = tree.findall('item')
for item in items:
    link, description = list(item)
    link.text = description.text

dump(tree)
</snippet></ROW><ROW><id>8094571</id><snippet>function polygonSampledFromPath(path,samples){
  var doc = path.ownerDocument;
  var poly = doc.createElementNS('http://www.w3.org/2000/svg','polygon');

  var points = [];
  var len  = path.getTotalLength();
  var step = step=len/samples;
  for (var i=0;i&lt;=len;i+=step){
    var p = path.getPointAtLength(i);
    points.push( p.x+','+p.y );
  }
  poly.setAttribute('points',points.join(' '));
  return poly;
}
</snippet></ROW><ROW><id>8094571</id><snippet>SVGPathElement</snippet></ROW><ROW><id>8095332</id><snippet>&gt;In [1]: from urlparse import *
&gt;
&gt;In [2]: url = urlparse('http://localhost:8000/service/social/acc?auth=true&amp;body=%7B%22site%22%3A%22twitter%22%2C%22account%22%3A%22twitter_1%22%2C%22name%22%3A%22%93X%95%DC1%22%7D')
&gt;
&gt;In [3]: url
&gt;Out[3]: ParseResult(scheme='http', netloc='localhost:8000', path='/service/social/acc', params='', query='auth=true&amp;body=%7B%22site%22%3A%22twitter%22%2C%22account%22%3A%22twitter_1%22%2C%22name%22%3A%22%93X%95%DC1%22%7D', fragment='')
&gt;
&gt;In [4]: parse_qs(url.query)
&gt;Out[4]:
{'auth': ['true'],
 'body': ['{"site":"twitter","account":"twitter_1","name":"\x93X\x95\xdc1"}']}
&gt;
&gt;In [5]: name = "\x93X\x95\xdc1"
&gt;
&gt;In [5]: print name.decode('shift-jis')
&gt;
&gt;店舗1
</snippet></ROW><ROW><id>8095337</id><snippet>centralWidget</snippet></ROW><ROW><id>8095337</id><snippet>centralWidget</snippet></ROW><ROW><id>8095467</id><snippet>win32gui.GetForegroundWindow()</snippet></ROW><ROW><id>8095467</id><snippet>win32process.GetWindowThreadProcessId(hwnd)</snippet></ROW><ROW><id>8095467</id><snippet>import win32com.client
import win32gui
import win32process

hwnd = win32gui.GetForegroundWindow()

_, pid = win32process.GetWindowThreadProcessId(hwnd)

shell = win32com.client.Dispatch("WScript.Shell")

shell.AppActivate('Console2')
shell.SendKeys('{UP}{ENTER}')

shell.AppActivate(pid)
</snippet></ROW><ROW><id>8095776</id><snippet>appengine_config.py</snippet></ROW><ROW><id>8095913</id><snippet>cgi.FieldStorage()</snippet></ROW><ROW><id>8095915</id><snippet>is_valid()</snippet></ROW><ROW><id>8095915</id><snippet>()</snippet></ROW><ROW><id>8095915</id><snippet>if request.method == 'POST':
    form = TestForm(request.POST)
    if form.is_valid():
        print 'form is valid'
        print form.cleaned_data
    ...
</snippet></ROW><ROW><id>8096090</id><snippet>--disable-preconnect</snippet></ROW><ROW><id>8096748</id><snippet>i = 1
fout = open("output0.txt","wb")
for line in fileinput.FileInput(filename):
  fout.write(line)
  i+=1
  if i%40000 == 0:
    fout.close()
    fout = open("output%d.txt"%(i/40000),"wb")

fout.close()  
</snippet></ROW><ROW><id>8096851</id><snippet>idx</snippet></ROW><ROW><id>8096851</id><snippet>&gt;&gt;&gt; w = np.where(a[..., 0][idx] == 1)[0]
&gt;&gt;&gt; array(idx).T[w]
array([[0, 1],
       [1, 1]])
</snippet></ROW><ROW><id>8096904</id><snippet>numpy.char</snippet></ROW><ROW><id>8096904</id><snippet>Arr</snippet></ROW><ROW><id>8096904</id><snippet>print '.'.join(item.upper() for item in Arr['strings'])
</snippet></ROW><ROW><id>8096904</id><snippet>ndarray</snippet></ROW><ROW><id>8096904</id><snippet>ndarray</snippet></ROW><ROW><id>8096904</id><snippet>['Dog', 'Cat', 'Horse']</snippet></ROW><ROW><id>8096904</id><snippet>'.'.join(...)</snippet></ROW><ROW><id>8096904</id><snippet>(x.view(np.uint8) - 32).view('S1')</snippet></ROW><ROW><id>8096904</id><snippet>'A' + 'B'</snippet></ROW><ROW><id>8096904</id><snippet>'AB'</snippet></ROW><ROW><id>8096904</id><snippet>'AB'</snippet></ROW><ROW><id>8096904</id><snippet>'A'</snippet></ROW><ROW><id>8096904</id><snippet>'B'</snippet></ROW><ROW><id>8096904</id><snippet>np.uint8(4) + np.float(3.4)</snippet></ROW><ROW><id>8096904</id><snippet>'A'**2</snippet></ROW><ROW><id>8096904</id><snippet>print '.'.join(item.upper() for item in Arr['strings'])</snippet></ROW><ROW><id>8097092</id><snippet>a = re.finditer('&lt;a.+?question-hyperlink"&gt;(.+?)&lt;/a&gt;', html)
for m in a: 
    print m.group(1)
</snippet></ROW><ROW><id>8097092</id><snippet>doc = BeautifulSoup(html)
for a in doc.findAll('a', 'question-hyperlink'):
    print a.text
</snippet></ROW><ROW><id>8097151</id><snippet>import numpy as np

def main():
    # Generate some data...
    t = np.linspace(0, 10*np.pi, 30)
    x = np.sin(t)
    condition = np.where(x&gt;0,1,0)

    onarray,offarray = on_off_times(condition)

    print "Condition: ",condition
    print "Ontimes:   ",onarray
    print "Offtimes:  ",offarray


def on_off_times(condition):

    changing=np.diff(condition)         #complete array, -1 when tunring off, +1 when turning on
    idx, = changing.nonzero()           #Indices of changepoints
    times=np.diff(idx)              #'Times' between changes
    times=np.r_[0,times]            # The first time can't be calculated -&gt;is set to 0

    ontimes=np.where(changing[idx]&lt;0,times,False)   #When turning off: Was Ontime (times-array with "False" instead of offtimes)
    offtimes=np.where(changing[idx]&gt;0,times,False)  #When turning on:  Was Offtime

    onarray=np.r_[changing.copy(),0]            #copy the array with all the values and add 1(to have an "empty" array of the right size)
    offarray=np.r_[changing.copy(),0]

    np.put(onarray,idx,ontimes)         #Put the times into it (at the changepoints)
    np.put(offarray,idx,offtimes)

    return onarray,offarray

main()
</snippet></ROW><ROW><id>8097151</id><snippet>Condition:  [0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0]
Ontimes:    [0 0 2 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0]
Offtimes:   [0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 3 0 0 0 0 0 0]
</snippet></ROW><ROW><id>8097220</id><snippet>zzz = u"foo"
</snippet></ROW><ROW><id>8097220</id><snippet>zzz = unicode(zzz, encoding="latin1")
</snippet></ROW><ROW><id>8097241</id><snippet>sudo apt-get install build-essential</snippet></ROW><ROW><id>8097241</id><snippet>sudo apt-get build-dep python2.7</snippet></ROW><ROW><id>8097241</id><snippet>./configure --prefix=/path/where/you/want/python/installed</snippet></ROW><ROW><id>8097241</id><snippet>make</snippet></ROW><ROW><id>8097241</id><snippet>make install</snippet></ROW><ROW><id>8097386</id><snippet>INSERT INTO ... VALUES ... WHERE ...</snippet></ROW><ROW><id>8097386</id><snippet>WHERE</snippet></ROW><ROW><id>8097386</id><snippet>INSERT</snippet></ROW><ROW><id>8097386</id><snippet>checkup_date</snippet></ROW><ROW><id>8097386</id><snippet>DATA</snippet></ROW><ROW><id>8097386</id><snippet>UPDATE DATA SET checkup_date = %s WHERE machine_name = %s
</snippet></ROW><ROW><id>8097503</id><snippet>run_in_parallel()</snippet></ROW><ROW><id>8097503</id><snippet>def run_in_parallel(*functions):
    processes={}
    for function in functions:
        process=Process(target=function)
        process.start()
        processes[process.pid]=process
    # wait for any process to complete
    pid, status = os.waitpid(-1, 0) 
    # one process terminated
    # join it
    processes[pid].join()
    del processes[pid]
    # terminate the rest
    for process in processes.itervalues():
        process.terminate()
    for process in processes.itervalues():
        process.join()
</snippet></ROW><ROW><id>8097503</id><snippet>os.waitpid()</snippet></ROW><ROW><id>8097503</id><snippet>Event</snippet></ROW><ROW><id>8097503</id><snippet>from multiprocessing import Process, Event

class MyProcess(Process):
    def __init__(self, event, *args, **kwargs):
        self.event = event
        Process.__init__(self, *args, **kwargs)

    def run(self):
        Process.run(self)
        self.event.set()

class PythonHelper(object):
    @staticmethod
    #with your fix
    def run_in_parallel(*functions):
        event = Event()
        processes=[]
        for function in functions:
            process=MyProcess(event, target=function)
            process.start()
            processes.append(process)
        # wait for any process to complete
        event.wait()
        # one process completed
        # terminate all child processes
        for process in processes:
            process.terminate()
        for process in processes:
            process.join()


class Logger(object):
    def run_numbers_1(self):
        for i in range(90000):
            print("1 number: {}".format(i))
    def run_numbers_2(self):
        for i in range(10000):
            print("2 number: {}".format(i))
    def run_logger(self):
        PythonHelper.run_in_parallel(self.run_numbers_1,self.run_numbers_2)

if __name__=="__main__":
    logger=Logger()
    logger.run_logger()
</snippet></ROW><ROW><id>8097545</id><snippet>':memory:'</snippet></ROW><ROW><id>8097545</id><snippet>sqlite</snippet></ROW><ROW><id>8097545</id><snippet>":memory:"</snippet></ROW><ROW><id>8097545</id><snippet>':memory:'</snippet></ROW><ROW><id>8097647</id><snippet>memcache.Client().add("searchindex", json)
</snippet></ROW><ROW><id>8097647</id><snippet>memcache.add("searchindex", json)
</snippet></ROW><ROW><id>8097647</id><snippet>add</snippet></ROW><ROW><id>8097647</id><snippet>add</snippet></ROW><ROW><id>8097669</id><snippet>range</snippet></ROW><ROW><id>8097669</id><snippet>xrange</snippet></ROW><ROW><id>8097669</id><snippet>range</snippet></ROW><ROW><id>8097669</id><snippet>int</snippet></ROW><ROW><id>8097838</id><snippet>words = ["mama", "papa", "sister", "brother"]
pairs = list(itertools.permutations(words, 2))
print pairs
</snippet></ROW><ROW><id>8097903</id><snippet>\ufeff</snippet></ROW><ROW><id>8097903</id><snippet>bom = unicode(codecs.BOM_UTF8, "utf8" )
r = r.replace(bom, '')
</snippet></ROW><ROW><id>8097903</id><snippet>\ufeff</snippet></ROW><ROW><id>8097913</id><snippet>super()</snippet></ROW><ROW><id>8097913</id><snippet>SchoolHouse</snippet></ROW><ROW><id>8097913</id><snippet>super(School, self).build(*args)
</snippet></ROW><ROW><id>8097913</id><snippet>super(SchoolHouse, self).build(*args)
</snippet></ROW><ROW><id>8097928</id><snippet>def connect_and_get_data(query, data):
    ...
    cursor.execute(query, data)
    ...

def get_data_about_first_amazing_topic(useful_string):
    query = "SELECT ... FROM ... WHERE ... AND some_field=%s"
    connect_and_get_data(query, ("one","two","three"))
    ...
</snippet></ROW><ROW><id>8097928</id><snippet>...
CONNECTION = MySQLdb.connect(host=..., port=...,
                             user=..., passwd=..., db=...,
                             cursorclass=MySQLdb.cursors.DictCursor,
                             charset = "utf8")
cursor = CONNECTION.cursor()
cursor.execute("SELECT ... FROM ... WHERE ... AND some_field=%s", ("first", "amazing", "topic"))
first_result = cursor.fetchall()

cursor.execute("SELECT ... FROM ... WHERE ... AND some_field=%s", (("first", "amazing", "topic")))
second_result = cursor.fetchall()

cursor.close()
...
</snippet></ROW><ROW><id>8098117</id><snippet>jython -Djava.security.manager=securitymanager -Djava.security.policy=policyfile
</snippet></ROW><ROW><id>8098117</id><snippet>grant {
  permission java.security.AllPermission;
}
</snippet></ROW><ROW><id>8098117</id><snippet>grant {
  permission java.io.FilePermission "${user.home}${/}-", "read, write";
  permission java.lang.RuntimePermission "createClassLoader";
  permission java.lang.RuntimePermission "getProtectionDomain";
};
</snippet></ROW><ROW><id>8098117</id><snippet>&gt;&gt;&gt; f1=open('test.txt', 'r')
&gt;&gt;&gt; f2=open('/tmp/test.txt', 'r')
Traceback (innermost last):
  File "&lt;console&gt;", line 1, in ?
java.security.AccessControlException: access denied (java.io.FilePermission /tmp/test.txt read)
    at java.security.AccessControlContext.checkPermission(AccessControlContext.java:342)
    at java.security.AccessController.checkPermission(AccessController.java:553)
    at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
    at java.lang.SecurityManager.checkRead(SecurityManager.java:888)
    at java.io.File.exists(File.java:748)
    at org.python.core.PyFile._setup(Unknown Source)
    at org.python.core.PyFile.file_init(Unknown Source)
    at org.python.core.PyFile$1.new_impl(Unknown Source)
    at org.python.core.PyType.invoke_new_(Unknown Source)
    at org.python.core.PyType.type___call__(Unknown Source)
    at org.python.core.PyType.__call__(Unknown Source)
    at org.python.core.PyObject.__call__(Unknown Source)
    at org.python.pycode._pyx2.f$0(&lt;console&gt;:1)
    at org.python.pycode._pyx2.call_function(&lt;console&gt;)
    at org.python.core.PyTableCode.call(Unknown Source)
    at org.python.core.PyCode.call(Unknown Source)
    at org.python.core.Py.runCode(Unknown Source)
    at org.python.core.Py.exec(Unknown Source)
    at org.python.util.PythonInterpreter.exec(Unknown Source)
    at org.python.util.InteractiveInterpreter.runcode(Unknown Source)
    at org.python.util.InteractiveInterpreter.runsource(Unknown Source)
    at org.python.util.InteractiveInterpreter.runsource(Unknown Source)
    at org.python.util.InteractiveConsole.push(Unknown Source)
    at org.python.util.InteractiveConsole.interact(Unknown Source)
    at org.python.util.jython.main(Unknown Source)

java.security.AccessControlException: java.security.AccessControlException: access denied (java.io.FilePermission /tmp/test.txt read)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8098481</id><snippet>matplotlib</snippet></ROW><ROW><id>8098481</id><snippet>image_gradient</snippet></ROW><ROW><id>8098481</id><snippet>figure</snippet></ROW><ROW><id>8098481</id><snippet>image_circle_radius</snippet></ROW><ROW><id>8098481</id><snippet>fig.dpi</snippet></ROW><ROW><id>8098481</id><snippet>axes</snippet></ROW><ROW><id>8098481</id><snippet>fig.add_axes([0,0,1,1],frameon=False, xticks=[], yticks=[]</snippet></ROW><ROW><id>8098481</id><snippet>imshow</snippet></ROW><ROW><id>8098481</id><snippet>set_clip_path()</snippet></ROW><ROW><id>8098481</id><snippet>AxesImage</snippet></ROW><ROW><id>8098481</id><snippet>imshow</snippet></ROW><ROW><id>8098481</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.path as path
import matplotlib.patches as patches

pi = np.pi
sqrt = np.sqrt
exp = np.exp

def make_node_image(measured_value, std_dev, coverage="0.96",imageID=1):

    DPI = 100
    TODPI=1
    MINSIZE = 50 # in DPI
    MAXSIZE = 400 # in DPI
    MAXAMPLITUDE = .005

    # make radius,std_dev  values in grid units
    mean_circle_radius = int(sqrt(measured_value/pi)/TODPI)
    image_circle_radius = int(sqrt((measured_value + 2*std_dev)/pi)/TODPI)
    if image_circle_radius &lt; MINSIZE:
        raise Exception("image_circle_radius too small!")
    if image_circle_radius &gt; MAXSIZE:
        raise Exception("image_circle_radius too large!")

    grid_std_dev = std_dev/TODPI

    gradient_amplitude = 1/(std_dev*sqrt(2*pi))/MAXAMPLITUDE
    gradient_fade = np.zeros([2*image_circle_radius,
                              2*image_circle_radius])
    for ix in range(2*image_circle_radius):
        for iy in range(2*image_circle_radius):
            r = sqrt((ix-image_circle_radius)**2
                     +(iy-image_circle_radius)**2)
            gradient_fade[ix,iy] = exp(
                -(r-mean_circle_radius)**2
                 /(2*grid_std_dev**2))

    image_gradient = gradient_amplitude*gradient_fade

    fig = plt.figure(figsize=(2*image_circle_radius/DPI,
                              2*image_circle_radius/DPI),dpi=DPI)


    ax = fig.add_axes([0,0,1,1],frameon=True, xticks=[], yticks=[])

    #***generate_image_from_gradient***
    im = ax.imshow(image_gradient,vmin=0,vmax=1)

    patch = patches.Circle((image_circle_radius,image_circle_radius), 
                           radius=image_circle_radius,fc='white')

    #***scale_and_clip_image_to_image_circle_radius***
    im.set_clip_path(patch)

    name = 'circImage%d.png'%imageID
    fig.savefig(name)

    return name

make_node_image(90000*pi,100)
</snippet></ROW><ROW><id>8098481</id><snippet>gradient_fade</snippet></ROW><ROW><id>8098669</id><snippet>kill -HUP</snippet></ROW><ROW><id>8099558</id><snippet>&gt;&gt;&gt; many_tuples = [() for x in range(5000000)] #replace with xrange for 2.x
</snippet></ROW><ROW><id>8099558</id><snippet>&gt;&gt;&gt; del many_tuples
</snippet></ROW><ROW><id>8099558</id><snippet>del</snippet></ROW><ROW><id>8099580</id><snippet>yum install python-devel</snippet></ROW><ROW><id>8099607</id><snippet>str.join</snippet></ROW><ROW><id>8099607</id><snippet>waypoints = '|'.join("{0},{1}".format(p.latitude, p.longitude) for p in points)
</snippet></ROW><ROW><id>8100014</id><snippet>xmlrpclib</snippet></ROW><ROW><id>8100014</id><snippet>   # note: to call a remote object with an non-standard name, use
   # result getattr(server, "strange-python-name")(args)
</snippet></ROW><ROW><id>8100114</id><snippet>tornado.escape.url_escape(value)</snippet></ROW><ROW><id>8100114</id><snippet>tornado.escape.url_unescape(value, encoding='utf-8')</snippet></ROW><ROW><id>8100114</id><snippet>#coding: utf-8 (there is # dont know how to show it here...)
import tornado.ioloop
import tornado.web

class Abdou(tornado.web.RequestHandler):
    def get(self):
        self.write("hi")

miaw = tornado.web.Application([
(tornado.escape.url_escape(u'/ééé'), Abdou),
])

if __name__ == "__main__":
    miaw.listen(8000)
    tornado.ioloop.IOLoop
</snippet></ROW><ROW><id>8100114</id><snippet>class Page(tornado.web.RequestHandler):
    def get(self,title):
        title = tornado.escape.url_unescape(title, encoding='utf-8')
        self.write(title)


miaw = tornado.web.Application([
(tornado.escape.url_escape(u'/ééé/(*.)'), Page),
])
# you can get /ééé/page_name, where page_name can be unicode

if __name__ == "__main__":
    miaw.listen(8000)
    tornado.ioloop.IOLoop
</snippet></ROW><ROW><id>8100202</id><snippet>copied_list = [x[:] for x in my_list]
</snippet></ROW><ROW><id>8100202</id><snippet>copied_list = copy.deepcopy(my_list)
</snippet></ROW><ROW><id>8100202</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>8100331</id><snippet>check value -&gt; update value -&gt; read value</snippet></ROW><ROW><id>8100331</id><snippet>executeSql</snippet></ROW><ROW><id>8100331</id><snippet>getDatabaseResult</snippet></ROW><ROW><id>8100364</id><snippet>import datetime, os
def mtime(filename):
    return datetime.datetime.fromtimestamp(os.stat(filename).st_mtime)
time_diff = mtime(file_path_a) - mtime(file_path_b)
</snippet></ROW><ROW><id>8100364</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>8100806</id><snippet>ahocorasick</snippet></ROW><ROW><id>8100806</id><snippet>import acora
import collections

ss = "this is the first sentence in this book "
     "the first sentence is really the most interesting "
     "the first sentence is always first"

words = ["first sentence is", 
         "first sentence",
         "the first sentence",
         "the first sentence is"]

tree = acora.AcoraBuilder(*words).build()

for match in tree.findall(ss):
    result[match] += 1
</snippet></ROW><ROW><id>8100806</id><snippet>&gt;&gt;&gt; result
defaultdict(&lt;type 'int'&gt;, 
            {'the first sentence'   : 3,
             'first sentence'       : 3,
             'first sentence is'    : 2,
             'the first sentence is': 2})
</snippet></ROW><ROW><id>8100900</id><snippet>man ssh</snippet></ROW><ROW><id>8100941</id><snippet>&gt;&gt;&gt; s = 'a, b,\nc, d, e, f, g, h, i, j, k,\nl, m, n, o, p, q, r'
&gt;&gt;&gt; re.split(r'\s*,\s*', s)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r']
&gt;&gt;&gt; re.split(r'\s*,\s*', s, maxsplit=16)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q, r']
&gt;&gt;&gt; re.split(r'\s*,\s*', s, flags=re.DOTALL)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r']
</snippet></ROW><ROW><id>8100941</id><snippet>re.DOTALL</snippet></ROW><ROW><id>8100941</id><snippet>maxsplit=0</snippet></ROW><ROW><id>8100941</id><snippet>flags=0</snippet></ROW><ROW><id>8100941</id><snippet>re.DOTALL</snippet></ROW><ROW><id>8100941</id><snippet>16</snippet></ROW><ROW><id>8100995</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8100995</id><snippet>sys.path</snippet></ROW><ROW><id>8100995</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8101153</id><snippet>list(f.read())[:100]</snippet></ROW><ROW><id>8101153</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>8101230</id><snippet>if entry.rating:
    print entry.rating.average
    print entry.rating.num_raters
else:
    print 'entry has no rating'
</snippet></ROW><ROW><id>8101362</id><snippet>print "export PYTHONPATH=$PYTHONPATH:..."
</snippet></ROW><ROW><id>8101362</id><snippet>eval "$(python myscript.py)"
</snippet></ROW><ROW><id>8101440</id><snippet>try:
    return self.object[row][column]
except IndexError:
    return "error"
</snippet></ROW><ROW><id>8101501</id><snippet>awk(1)</snippet></ROW><ROW><id>8101501</id><snippet>$ echo 101222_1_1_ab | awk -F_ '{print $1 "_" $2 "_" $4 "_" $3;}'
101222_1_ab_1
</snippet></ROW><ROW><id>8101501</id><snippet>-F_</snippet></ROW><ROW><id>8101501</id><snippet>awk(1)</snippet></ROW><ROW><id>8101501</id><snippet>awk -F_ -v OFS=_ '{print $1, $2, $4, $3}'
</snippet></ROW><ROW><id>8101584</id><snippet>RepeatingGroupedSequence</snippet></ROW><ROW><id>8101584</id><snippet>extract_padding</snippet></ROW><ROW><id>8101584</id><snippet>def extract_padding(self, s):
    return '', s
</snippet></ROW><ROW><id>8101584</id><snippet>def extract_padding(self, s):
    return s, None
</snippet></ROW><ROW><id>8101598</id><snippet>def fix_docs(cls):
    for name, func in vars(cls).items():
        if not func.__doc__:
            print func, 'needs doc'
            for parent in cls.__bases__:
                parfunc = getattr(parent, name)
                if parfunc and getattr(parfunc, '__doc__', None):
                    func.__doc__ = parfunc.__doc__
                    break
    return cls


class Animal:
    def walk(self):
        'Walk like a duck'

class Dog(Animal):
    def walk(self):
        pass

Dog = fix_docs(Dog)
print Dog.walk.__doc__
</snippet></ROW><ROW><id>8101787</id><snippet>&lt;envVar name="MAKE" type="command"&gt;which make&lt;/envVar&gt;
&lt;envVar name="QTDIR" type="string"&gt;/homeqt/libs.qt4/qt4.5.1&lt;/envVar&gt;
</snippet></ROW><ROW><id>8101787</id><snippet>if node.attributes['type'] == 'command':
    value = os.popen(node.firstChild.text).read()
elif node.attributes['type'] == 'string':
    value = node.firstChild.text
os.environ[node.attributes['name']] = value
</snippet></ROW><ROW><id>8102120</id><snippet>facecolor or facecolors: matplotlib color arg or sequence of rgba tuples  
</snippet></ROW><ROW><id>8102120</id><snippet>facecolor = None</snippet></ROW><ROW><id>8102155</id><snippet>&gt;&gt;&gt; import json, ast
&gt;&gt;&gt; r = {u'name': u'A', u'primary_key': 1}
&gt;&gt;&gt; ast.literal_eval(json.dumps(r))
{'name': 'A', 'primary_key': 1}
</snippet></ROW><ROW><id>8102190</id><snippet>mycnt</snippet></ROW><ROW><id>8102190</id><snippet>sys.argv</snippet></ROW><ROW><id>8102479</id><snippet>&gt;&gt;&gt; u = urllib.request.urlopen('http://cnn.com')
&gt;&gt;&gt; u.getheader('Content-Type')
'text/html; charset=UTF-8'
&gt;&gt;&gt; html = u.read().decode('utf-8')
&gt;&gt;&gt; type(html)
&lt;class 'str'&gt;
</snippet></ROW><ROW><id>8102505</id><snippet>Average:     O(min(len(s), len(t))
Worst case:  O(len(s) * len(t))
</snippet></ROW><ROW><id>8102712</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>8102712</id><snippet>initializer</snippet></ROW><ROW><id>8102712</id><snippet>initargs</snippet></ROW><ROW><id>8102712</id><snippet>import lxml.html
import mechanize, cookielib
import multiprocessing as mp

def download(i):
    link = 'http://www.google.com'
    response = browser.open(link)
    tree = lxml.html.parse(response)
    print tree
    return 0

def init(count):
    global browser
    browser = mechanize.Browser()
    cookie_jar = cookielib.LWPCookieJar()
    browser.set_cookiejar(cookie_jar)
    browser.set_handle_equiv(True)
    browser.set_handle_gzip(True)  #warning
    browser.set_handle_redirect(True)
    browser.set_handle_referer(False)
    browser.set_handle_robots(False)
    browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), 
                               max_time=1)
    browser.addheaders = [('User-agent', 
        'Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:2.0.1) '
        'Gecko/20100101 Ubuntu/11.04 maverick Firefox/4.0.1')]

    count.value -= 1

if __name__ == '__main__':
    import time
    count = mp.Value('I', mp.cpu_count())
    pool = mp.Pool(count.value, initializer=init, initargs=(count,))
    #wait until all processes are initialized
    while count.value &gt; 0:
        time.sleep(0.1)

    tasks = range(8)
    r = pool.map_async(download, tasks)
    r.wait()
</snippet></ROW><ROW><id>8103151</id><snippet>&gt;&gt;&gt; text
"{{ Info extra text}}\n{{Infobox film\n| name           = Papori\n| released       = 1986\n| runtime        = 144 minutes\n| country        = Assam, {{IND}}\n| budget         = [[a]]\n| followed by    = free\n}}\nAlbert Einstein ( /'ælb?rt 'a?nsta?n/; German: ['alb?t 'a?n?ta?n] ( listen); 14 March 1879 – 18 April 1955)\n was a German-born theoretical physicist who developed the theory of general relativity, effecting a\n revolution in physics. For this achievement, Einstein is often regarded as the father of modern physics \n and one of the most prolific intellects in human history.`"
&gt;&gt;&gt; re.sub(r"\{\{[\w\W\n\s]*\}\}", "", text)
"\nAlbert Einstein ( /'ælb?rt 'a?nsta?n/; German: ['alb?t 'a?n?ta?n] ( listen); 14 March 1879 – 18 April 1955)\n was a German-born theoretical physicist who developed the theory of general relativity, effecting a\n revolution in physics. For this achievement, Einstein is often regarded as the father of modern physics \n and one of the most prolific intellects in human history.`"
</snippet></ROW><ROW><id>8103151</id><snippet>&gt;&gt;&gt; re.sub(r"\{\{[^\}]*\}\}", "", "{{a\n   oaheduh}} b {{c}} d")
' b  d'
</snippet></ROW><ROW><id>8103448</id><snippet>PYTHONPATH=.</snippet></ROW><ROW><id>8103448</id><snippet>.</snippet></ROW><ROW><id>8104217</id><snippet>   flatten_args = []
            for arg in args:
                if (arg.__class__==cls):
                    flatten_args.extend(arg.args)
                else:
                    flatten_args.append(arg)

            obj = Expr.__new__(cls, *flatten_args) 
</snippet></ROW><ROW><id>8104217</id><snippet>arg_list.sort()</snippet></ROW><ROW><id>8104273</id><snippet>import threading
import time
import logging

logger=logging.getLogger(__name__)

def f(resume,is_waiting,name):
    while True:
        if not resume.is_set():
            is_waiting.set()
            logger.debug('{n} pausing...'.format(n=name))
            resume.wait()
            is_waiting.clear()
        logger.info(name)
        time.sleep(1)

def h(resume,waiters):
    while True:
        logger.debug('halt') 
        resume.clear()
        for i,w in enumerate(waiters):
            logger.debug('{i}: wait for worker to pause'.format(i=i))
            w.wait()
        logger.info('h begin')
        time.sleep(2)
        logger.info('h end')        
        logger.debug('resume')
        resume.set()
        time.sleep(5)

logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s %(threadName)s] %(message)s',
                    datefmt='%H:%M:%S')

# set means resume; clear means halt
resume = threading.Event()
resume.set()

waiters=[]
for name in 'fg':
    is_waiting=threading.Event()
    waiters.append(is_waiting)
    threading.Thread(target=f,args=(resume,is_waiting,name)).start()    
threading.Thread(target=h,args=(resume,waiters)).start()
</snippet></ROW><ROW><id>8104273</id><snippet>[07:28:55 Thread-1] f
[07:28:55 Thread-2] g
[07:28:55 Thread-3] halt
[07:28:55 Thread-3] 0: wait for worker to pause
[07:28:56 Thread-1] f pausing...
[07:28:56 Thread-2] g pausing...
[07:28:56 Thread-3] 1: wait for worker to pause
[07:28:56 Thread-3] h begin
[07:28:58 Thread-3] h end
[07:28:58 Thread-3] resume
[07:28:58 Thread-1] f
[07:28:58 Thread-2] g
[07:28:59 Thread-1] f
[07:28:59 Thread-2] g
[07:29:00 Thread-1] f
[07:29:00 Thread-2] g
[07:29:01 Thread-1] f
[07:29:01 Thread-2] g
[07:29:02 Thread-1] f
[07:29:02 Thread-2] g
[07:29:03 Thread-3] halt
</snippet></ROW><ROW><id>8104273</id><snippet>h</snippet></ROW><ROW><id>8104273</id><snippet>h</snippet></ROW><ROW><id>8104273</id><snippet>h</snippet></ROW><ROW><id>8104273</id><snippet>import threading
import time
import logging

logger=logging.getLogger(__name__)

def f(lock,n):
    while True:
        with lock:
            logger.info(n)
            time.sleep(1)

def h(locks):
    while True:
        t=time.time()
        for n,lock in enumerate(locks):
            lock.acquire()
            t2=time.time()
            logger.info('h acquired {n}: {d}'.format(n=n,d=t2-t))
            t=t2
        t2=time.time()
        logger.info('h {d}'.format(d=t2-t))
        t=t2
        for lock in locks:
            lock.release()
        time.sleep(5)

logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s %(threadName)s] %(message)s',
                    datefmt='%H:%M:%S')

locks=[]
N=5
for n in range(N):
    lock=threading.Lock()
    locks.append(lock)
    t=threading.Thread(target=f,args=(lock,n))
    t.start()

threading.Thread(target=h,args=(locks,)).start()
</snippet></ROW><ROW><id>8104514</id><snippet>i = 0
a = [1, 2, 3]
while i &lt; len(a):
    print(a[i])
    if a[i] == 1:
        a = [4, 5, 6]
        i = 0          # edit - good catch larsmans
    else:
        i += 1
</snippet></ROW><ROW><id>8104835</id><snippet>chmod</snippet></ROW><ROW><id>8104984</id><snippet>[{
  "type":"/people/person",
  "name":None,
  "/common/topic/alias":[],
  "limit":100
}]​
</snippet></ROW><ROW><id>8104984</id><snippet>import freebase

f = file('types.txt')
for t in f:
    t=t.strip()
    q = [{'type':t,
          'mid':None,
          'name':None,
          '/common/topic/alias':[],
          'limit':500,
          }]
    for r in freebase.mqlreaditer(q):
        print '\t'.join([t,r['mid'],r['name']]+r['/common/topic/alias'])
f.close()
</snippet></ROW><ROW><id>8105243</id><snippet>k</snippet></ROW><ROW><id>8105243</id><snippet>k = {x:v for x,v in k.iteritems() if x != 1}
</snippet></ROW><ROW><id>8105243</id><snippet>k = dict((x,v) for x,v in k.iteritems() if x!=1)
</snippet></ROW><ROW><id>8105257</id><snippet>best</snippet></ROW><ROW><id>8105257</id><snippet>max()</snippet></ROW><ROW><id>8105257</id><snippet>bestPlayer = max(self.players, key = lambda p: p.best)
bestPlayer.wins += 1
print ("Winner: ", bestPlayer.name, "\nResult: ", bestPlayer.best)
</snippet></ROW><ROW><id>8105257</id><snippet>best</snippet></ROW><ROW><id>8105257</id><snippet>best</snippet></ROW><ROW><id>8105257</id><snippet>map()</snippet></ROW><ROW><id>8105257</id><snippet>filter()</snippet></ROW><ROW><id>8105257</id><snippet>best = max(map(lambda p: p.best, self.players))
bestPlayers = filter(lambda p: p.best == best, self.players)
</snippet></ROW><ROW><id>8105400</id><snippet>treewidget.setAutoScroll(False)
</snippet></ROW><ROW><id>8105400</id><snippet>def mousePressEvent(self, event):
    self.setAutoScroll(False)
    QtGui.QTreeWidget.mousePressEvent(self, event)
    self.setAutoScroll(True)
</snippet></ROW><ROW><id>8105589</id><snippet>eval</snippet></ROW><ROW><id>8105589</id><snippet>eval</snippet></ROW><ROW><id>8105589</id><snippet>mappingDict = {"ClassName1" : MyPythonClass1, 
               "ClassName2" : MyPythonClass2, ... }
# keys are strings, values are classes
</snippet></ROW><ROW><id>8105589</id><snippet>myClassName = types['extension1']
myClass = mappingDict[myClassName]
</snippet></ROW><ROW><id>8106041</id><snippet>is</snippet></ROW><ROW><id>8106041</id><snippet>c == c2
</snippet></ROW><ROW><id>8106041</id><snippet>c.id == c2.id
</snippet></ROW><ROW><id>8106210</id><snippet>__init__</snippet></ROW><ROW><id>8106210</id><snippet>__new__</snippet></ROW><ROW><id>8106210</id><snippet>object</snippet></ROW><ROW><id>8106210</id><snippet>&gt;&gt;&gt; class Foo(object):
...  pass
...
&gt;&gt;&gt; Foo()
&lt;__main__.Foo object at 0x021757F0&gt;
&gt;&gt;&gt; Foo(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object.__new__() takes no parameters
</snippet></ROW><ROW><id>8106210</id><snippet>__init__</snippet></ROW><ROW><id>8106270</id><snippet>l1 = ['a', 'b', 'c', 'b', 'c']
l2 = ['a', 'b', 'c', 'b']

from collections import Counter

c1 = Counter(l1)
c2 = Counter(l2)

diff = c1-c2
print list(diff.elements())
</snippet></ROW><ROW><id>8106352</id><snippet>xxx</snippet></ROW><ROW><id>8106352</id><snippet>abc</snippet></ROW><ROW><id>8106352</id><snippet>xxx</snippet></ROW><ROW><id>8106352</id><snippet>decrypt_string</snippet></ROW><ROW><id>8106524</id><snippet>field.field</snippet></ROW><ROW><id>8106524</id><snippet>{% for field in form %}
    {% for option in field.field.choices.queryset %}
        {{ option.image }}
        {{ option.title }}
        {{ option.description }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>8106729</id><snippet>GLOBAL_1 = getattr(settings, 'GLOBAL_1', 'Def value for global 1')
</snippet></ROW><ROW><id>8106847</id><snippet>-Wstrict-prototypes</snippet></ROW><ROW><id>8106847</id><snippet>-Wstrict-prototypes</snippet></ROW><ROW><id>8106847</id><snippet>-Wstrict-prototypes</snippet></ROW><ROW><id>8106847</id><snippet>setup.py</snippet></ROW><ROW><id>8106847</id><snippet>example_wrap.cxx</snippet></ROW><ROW><id>8106847</id><snippet>% python setup.py build_ext -i
running build_ext
building '_foolib' extension
gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/include/python2.7 -c example_wrap.cxx -o build/temp.linux-i686-2.7/example_wrap.o
cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
...
</snippet></ROW><ROW><id>8106847</id><snippet>build_ext</snippet></ROW><ROW><id>8106847</id><snippet>configure.in</snippet></ROW><ROW><id>8106847</id><snippet>case $GCC in
yes)
    if test "$CC" != 'g++' ; then
        STRICT_PROTO="-Wstrict-prototypes"
    fi
</snippet></ROW><ROW><id>8106847</id><snippet>build_ext</snippet></ROW><ROW><id>8106847</id><snippet>-Wstrict-prototypes</snippet></ROW><ROW><id>8106847</id><snippet>g++</snippet></ROW><ROW><id>8106847</id><snippet>gcc</snippet></ROW><ROW><id>8106847</id><snippet>Lib/distutils/command/build_ext.py</snippet></ROW><ROW><id>8106847</id><snippet>build_extension()</snippet></ROW><ROW><id>8106847</id><snippet>self.compiler.compile()</snippet></ROW><ROW><id>8106847</id><snippet>self.compiler.link_shared_object()</snippet></ROW><ROW><id>8106847</id><snippet>g++</snippet></ROW><ROW><id>8106977</id><snippet>__init__</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>__init__</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>self</snippet></ROW><ROW><id>8106977</id><snippet>cls</snippet></ROW><ROW><id>8106977</id><snippet>self</snippet></ROW><ROW><id>8106977</id><snippet>cls</snippet></ROW><ROW><id>8106977</id><snippet>def __new__(tuple)</snippet></ROW><ROW><id>8106977</id><snippet>tuple</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>def __new__(cls, *args, **kwargs):
    # do allocation to get an object, say, obj
    return obj
</snippet></ROW><ROW><id>8106977</id><snippet>tuple</snippet></ROW><ROW><id>8106977</id><snippet>[1,2,3]</snippet></ROW><ROW><id>8106977</id><snippet>MyClass()</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>issubclass</snippet></ROW><ROW><id>8106977</id><snippet>isinstance</snippet></ROW><ROW><id>8106977</id><snippet>class MyClass(tuple)</snippet></ROW><ROW><id>8106977</id><snippet>isinstance</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>__new__</snippet></ROW><ROW><id>8106977</id><snippet>Eel</snippet></ROW><ROW><id>8106977</id><snippet>class Eel(object):
    MAX_EELS = 20
    n_eels = 0

    def __new__(cls, *args, **kwargs):
        if cls.n_eels == cls.MAX_EELS:
            raise HovercraftFull()

        obj = super(Eel, cls).__new__(cls)
        cls.n_eels += 1
        return obj

    def __init__(self, voltage):
        self.voltage = voltage

    def __del__(self):
        type(self).n_eels -= 1

    def electric(self):
        """Is this an electric eel?"""
        return self.voltage &gt; 0
</snippet></ROW><ROW><id>8107038</id><snippet>def purifystring(string_to_analyze):    # string is a really bad variable name as it is a python module's name
   return "".join(digit for digit in string_to_analyze if digit.isdigit())
</snippet></ROW><ROW><id>8107236</id><snippet>#: Dictionary of files to multipart upload (``{filename: content}``).
self.files = files
</snippet></ROW><ROW><id>8107236</id><snippet>myPostRequest = requests.post("https://someURL.com", files={'mytextfile.txt': savedTextFile})
</snippet></ROW><ROW><id>8107278</id><snippet>self.object[row][col]</snippet></ROW><ROW><id>8107278</id><snippet>&gt;&gt;&gt; 1 == "1"
False
</snippet></ROW><ROW><id>8107278</id><snippet>if str(self.object[row][col]) == "1":
</snippet></ROW><ROW><id>8107278</id><snippet>if int(self.object[row][col]) == 1:
</snippet></ROW><ROW><id>8107310</id><snippet>range(0,10)</snippet></ROW><ROW><id>8107310</id><snippet>1, 2, 3, 4, 5, 6, 7, 8, 9, 10
</snippet></ROW><ROW><id>8107337</id><snippet>object</snippet></ROW><ROW><id>8107337</id><snippet>class Hello(object):
    pass

&gt;&gt;&gt; issubclass(Hello,object)
True
</snippet></ROW><ROW><id>8107337</id><snippet>(object)</snippet></ROW><ROW><id>8107391</id><snippet>shutil.move()</snippet></ROW><ROW><id>8107391</id><snippet>from shutil import move

move('C:\\Users\\Test.txt', 'C:\\Users\\Tests.csv')
</snippet></ROW><ROW><id>8107391</id><snippet>os.remove</snippet></ROW><ROW><id>8107391</id><snippet>shutil.move</snippet></ROW><ROW><id>8107391</id><snippet>from os import remove
from shutil import move

remove('C:\\Users\\Tests.csv')
move('C:\\Users\\Test.txt', 'C:\\Users\\Tests.csv')
</snippet></ROW><ROW><id>8107425</id><snippet>&lt;form name="choice_form" action="/choicehandler" method="post" onsubmit="writeToStorage()"&gt;
  &lt;textarea name="choice" rows="7" cols="50"&gt;&lt;/textarea&gt;&lt;br /&gt;
  &lt;input type="submit" value="submit your choice"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>8107684</id><snippet>raw_post_data</snippet></ROW><ROW><id>8107684</id><snippet>payload = request.readlines()
</snippet></ROW><ROW><id>8107684</id><snippet>   payload = request.raw_post_data
</snippet></ROW><ROW><id>8107776</id><snippet>argument</snippet></ROW><ROW><id>8107776</id><snippet>Action</snippet></ROW><ROW><id>8107776</id><snippet>Action</snippet></ROW><ROW><id>8107776</id><snippet>ValueError</snippet></ROW><ROW><id>8107776</id><snippet>def percentFloat ( string ):
    value = float( string )
    if value &lt; 0 or value &gt; 1:
        raise argparse.ArgumentTypeError( 'Value has to be between 0 and 1' )
    return value

parser = argparse.ArgumentParser()
parser.add_argument( 'test', type=percentFloat )
parser.parse_args()
</snippet></ROW><ROW><id>8107776</id><snippet>float( string )</snippet></ROW><ROW><id>8107776</id><snippet>ValueError</snippet></ROW><ROW><id>8107776</id><snippet>argparse</snippet></ROW><ROW><id>8107776</id><snippet>ArgumentTypeError</snippet></ROW><ROW><id>8107776</id><snippet>argparse.add_mutually_exclusive_group</snippet></ROW><ROW><id>8107776</id><snippet>args = parser.parse_args()
if args.w and not args.p:
    parser.error( '-p is required when -w is set.' )
</snippet></ROW><ROW><id>8107776</id><snippet>-p</snippet></ROW><ROW><id>8107904</id><snippet>import eventlet
eventlet.monkey_patch()
import module
</snippet></ROW><ROW><id>8107904</id><snippet>module = eventlet.import_patched(module)
</snippet></ROW><ROW><id>8107945</id><snippet>re.match</snippet></ROW><ROW><id>8107945</id><snippet>r"\$([1-9][0-9,]+)"
</snippet></ROW><ROW><id>8107974</id><snippet>data.__class__()
</snippet></ROW><ROW><id>8108002</id><snippet>from Tkinter import *

def change_image(*args):
    # Change image of label accordingly
    label.config(image=photos[int(studFiles.get())])

app = Tk()
app.title("Example")
app.geometry('500x200+200+200')
app.configure(background='black')
app.resizable(0,0)

studFiles = StringVar()
studFiles.set('Image')
files =['0', '1'] # Number is corresponding list index
studDropDown = OptionMenu(app, studFiles, *files)
studDropDown.config(font=("Times", 16, "italic"))
studDropDown["menu"].config(font=("Times", 16, "italic"))
studDropDown.pack()

studFiles.trace("w", change_image)

# List of photoimages for each image
photos =(PhotoImage(file='im.gif'), PhotoImage(file='im2.gif'))
label = Label(app,image=photos[0])
label.pack()

app.mainloop()
</snippet></ROW><ROW><id>8108002</id><snippet>PhotoImage</snippet></ROW><ROW><id>8108002</id><snippet>StringVar</snippet></ROW><ROW><id>8108002</id><snippet>OptionMenu</snippet></ROW><ROW><id>8108002</id><snippet>config</snippet></ROW><ROW><id>8108147</id><snippet>execute</snippet></ROW><ROW><id>8108147</id><snippet>checkUserID</snippet></ROW><ROW><id>8108147</id><snippet>None</snippet></ROW><ROW><id>8108147</id><snippet>.fetchone()</snippet></ROW><ROW><id>8108147</id><snippet>None</snippet></ROW><ROW><id>8108147</id><snippet>checkSql = 'SELECT userid FROM bs_members WHERE userid = :checkUser'
while True:
    newUser.userID = ga.getInput('Enter userID: ', "\w+$")
    ds.execute(checkSql,checkUser=newUser.userID)
    if ds.fetchone() is None:
        # This userID is available.
        break
    else:
        print 'That user name is already in use.  Please enter a new username.'
</snippet></ROW><ROW><id>8108147</id><snippet>ds</snippet></ROW><ROW><id>8108147</id><snippet>Cursor</snippet></ROW><ROW><id>8108389</id><snippet>/home/mysite/whoosh_index</snippet></ROW><ROW><id>8108423</id><snippet>GET trends/:woeid</snippet></ROW><ROW><id>8108423</id><snippet>GET geo/id/:place_id</snippet></ROW><ROW><id>8108423</id><snippet>GET</snippet></ROW><ROW><id>8108440</id><snippet>try/catch</snippet></ROW><ROW><id>8108440</id><snippet>import timeit

s = []

s.append('''\
try:
    x = D['key']
except KeyError:
    x = None
''')

s.append('''\
x = D['key'] if 'key' in D else None
''')

s.append('''\
try:
    x = D['xxx']
except KeyError:
    x = None
''')

s.append('''\
x = D['xxx'] if 'xxx' in D else None
''')

for i,c in enumerate(s,1):
    t = timeit.Timer(c,"D={'key':'value'}")
    print('Run',i,'=',min(t.repeat()))
</snippet></ROW><ROW><id>8108440</id><snippet>Run 1 = 0.05600167960596991       # try/catch, key exists
Run 2 = 0.08530091918578364       # LBYL, key exists (slower)
Run 3 = 0.3486251291120652        # try/catch, key doesn't exist (MUCH slower)
Run 4 = 0.050621117060586585      # LBYL, key doesn't exist
</snippet></ROW><ROW><id>8108440</id><snippet>try/catch</snippet></ROW><ROW><id>8108625</id><snippet>enumerate</snippet></ROW><ROW><id>8108625</id><snippet> for i, item in enumerate(lst):
     write_to_me = open('list_item_{0}.txt'.format(i), 'w') 
     write_to_me.write(item)
     write_to_me.close()
</snippet></ROW><ROW><id>8108821</id><snippet>class duck: 
    def __init__(self):pass
    def eat(self, o): pass 
    def crap(self) : pass
    def die(self)
    ....
</snippet></ROW><ROW><id>8108821</id><snippet>def kill(o):
    if o is duck:
        o.die()
    elif o is dog:
        print "WHY????"
        o.die()
    elif o is nyancat:
        raise Exception("NYAN "*9001)
    else:
       print "can't kill it."
</snippet></ROW><ROW><id>8108983</id><snippet>x=np.random.randint(1,3,size=(3,2))
print(x)

# [[2 2]
#  [1 2]
#  [2 1]]
</snippet></ROW><ROW><id>8108983</id><snippet>y=np.array([[0,0,0,0,0],[0,0,0,0,1],[0,0,0,1,0]])
</snippet></ROW><ROW><id>8108983</id><snippet>0 --&gt; [0,0,0,0,0]   # y[0] is mapped to [0,0,0,0,0]
1 --&gt; [0,0,0,0,1]   # y[1]      ...     [0,0,0,0,1]
2 --&gt; [0,0,0,1,0]   # y[2]      ...     [0,0,0,1,0]
</snippet></ROW><ROW><id>8108983</id><snippet>y[x]</snippet></ROW><ROW><id>8108983</id><snippet>print(y[x])

# [[[0 0 0 1 0]
#   [0 0 0 1 0]]

#  [[0 0 0 0 1]
#   [0 0 0 1 0]]

#  [[0 0 0 1 0]
#   [0 0 0 0 1]]]
</snippet></ROW><ROW><id>8109002</id><snippet>length</snippet></ROW><ROW><id>8109002</id><snippet>len(list)</snippet></ROW><ROW><id>8109002</id><snippet>(list[counter] +total)</snippet></ROW><ROW><id>8109002</id><snippet>total = total + counter</snippet></ROW><ROW><id>8109002</id><snippet>0 + 1 + 2</snippet></ROW><ROW><id>8109002</id><snippet>length</snippet></ROW><ROW><id>8109002</id><snippet>3</snippet></ROW><ROW><id>8109002</id><snippet>9</snippet></ROW><ROW><id>8109002</id><snippet>my_list = [3,3,3]</snippet></ROW><ROW><id>8109079</id><snippet>dir()</snippet></ROW><ROW><id>8109079</id><snippet>locals().keys()</snippet></ROW><ROW><id>8109080</id><snippet>gcc-4.0</snippet></ROW><ROW><id>8109080</id><snippet>Distribute</snippet></ROW><ROW><id>8109080</id><snippet>pip</snippet></ROW><ROW><id>8109080</id><snippet>pip</snippet></ROW><ROW><id>8109080</id><snippet>easy_install</snippet></ROW><ROW><id>8109080</id><snippet>export CC=gcc
</snippet></ROW><ROW><id>8109158</id><snippet>.sort()</snippet></ROW><ROW><id>8109158</id><snippet>key</snippet></ROW><ROW><id>8109158</id><snippet>direction</snippet></ROW><ROW><id>8109158</id><snippet>id</snippet></ROW><ROW><id>8109158</id><snippet>.sort("_id", 1)</snippet></ROW><ROW><id>8109309</id><snippet>if i in range(0, 20):
    print("You caught nothing!")
elif i in range(20, 40):
    print("You caught a Minnow! +10 points.")
    score += 10
</snippet></ROW><ROW><id>8109366</id><snippet>./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/usr/local/share/man/man1/python2.7.1
</snippet></ROW><ROW><id>8109366</id><snippet>./configure --with-apxs=/usr/local/apache2/bin/apxs --with-python=/usr/local/bin/python2.7.1
</snippet></ROW><ROW><id>8109411</id><snippet>trac.web.main.dispatch_request</snippet></ROW><ROW><id>8109411</id><snippet>TRAC_ENV</snippet></ROW><ROW><id>8109411</id><snippet>PYTHON_EGG_CACHE</snippet></ROW><ROW><id>8109411</id><snippet>trac.wsgi</snippet></ROW><ROW><id>8109411</id><snippet>$ TRAC_ENV=/path/to/your/trac-env PYTHON_EGG_CACHE=/tmp/.egg-cache spawning trac.web.main.dispatch_request
</snippet></ROW><ROW><id>8109698</id><snippet>from stemming.porter2 import stem
stem("simpsons")
</snippet></ROW><ROW><id>8109771</id><snippet>def lcount(keyword, fname):
    with open(fname, 'r') as fin:
        return sum([1 for line in fin if keyword in line])
</snippet></ROW><ROW><id>8109771</id><snippet>print lcount('int', 'foo.cpp')
</snippet></ROW><ROW><id>8109771</id><snippet>grep int foo.cpp | wc -l
</snippet></ROW><ROW><id>8109865</id><snippet>import itertools

for i1,i2 in itertools.product(xrange(len(Seq1)), xrange(len(Seq2))):
    a[i1,i2] = Seq1[i1] == Seq2[i2]
</snippet></ROW><ROW><id>8110193</id><snippet>If one or more groups are present in the pattern, return a list of groups; 
this will be a list of tuples if the pattern has more than one group.
</snippet></ROW><ROW><id>8110193</id><snippet>regex = re.compile('((\d+,?)+)')
</snippet></ROW><ROW><id>8110193</id><snippet>regex = re.compile('((\d+,)*\d+)')
</snippet></ROW><ROW><id>8110193</id><snippet>s = "..."
regex = re.compile('(\d+,?)+')
it = re.finditer(regex, s)

for match in it:
  print match.group(0)
</snippet></ROW><ROW><id>8110516</id><snippet>bat</snippet></ROW><ROW><id>8110516</id><snippet>regsvr32.exe</snippet></ROW><ROW><id>8110516</id><snippet>"a"</snippet></ROW><ROW><id>8110516</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8110516</id><snippet>PathToExe</snippet></ROW><ROW><id>8110516</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8110516</id><snippet>output</snippet></ROW><ROW><id>8110516</id><snippet>output.write()</snippet></ROW><ROW><id>8110516</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8110516</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8110551</id><snippet>def mylogin(request):
    app = request.GET.get('app')
    ...
</snippet></ROW><ROW><id>8110664</id><snippet>import base64

base64_encrypted_message = base64.b64encode(encrypted_message)
// send your message via POST as GET can be seen on system logs

encrypted_message = base64.b64decode(base64_encrypted_message)
// decrypt your message
</snippet></ROW><ROW><id>8110861</id><snippet>In [20]: f = figure(facecolor='red')
In [21]: ax = f.add_subplot(111)
In [22]: ax.set_axis_bgcolor('black')
In [23]: ya = ax.yaxis                  
In [24]: xa = ax.xaxis                           # you modify x ticks indepently
In [25]: ya.set_tick_params(labelcolor='green')  # label
In [26]: ya.set_tick_params(color='white')       # ticks
</snippet></ROW><ROW><id>8111323</id><snippet>cur.close()
conn.commit()
conn.close()
</snippet></ROW><ROW><id>8111499</id><snippet>x = a or b
</snippet></ROW><ROW><id>8111499</id><snippet>||</snippet></ROW><ROW><id>8111499</id><snippet>&gt; 'test' || 'again'
"test"
&gt; false || 'again'
"again"
&gt; false || 0
0
&gt; 1 || 0
1
</snippet></ROW><ROW><id>8111499</id><snippet>or</snippet></ROW><ROW><id>8111499</id><snippet>&gt;&gt;&gt; 'test' or 'again'
'test'
&gt;&gt;&gt; False or 'again'
'again'
&gt;&gt;&gt; False or 0
0
&gt;&gt;&gt; 1 or 0
1
</snippet></ROW><ROW><id>8111503</id><snippet>import scipy as sp
import Image
import ImageDraw
import ImageFont

font_fname = '/usr/share/fonts/truetype/freefont/FreeSansBold.ttf'
font_size = 200
font = ImageFont.truetype(font_fname, font_size)

h,w = 1080, 1920
bg_colour = (255, 255, 255)
bg_image = sp.dot(sp.ones((h,w,3), dtype='uint8'), sp.diag(sp.asarray((bg_colour), dtype='uint8')))
image0 = Image.fromarray(bg_image)
draw = ImageDraw.Draw(image0)
draw.text((530, 160), "hello world", font=font, fill='rgb(0, 0, 0)')
</snippet></ROW><ROW><id>8111560</id><snippet>class Foo(object):
    calls=0            # &lt;--- call is a class member
    def baz(self):
        Foo.calls+=1

foo=Foo()
bar=Foo()
for i in range(100): 
    foo.baz()
    bar.baz()
print('Foo.baz was called {n} times'.format(n=foo.calls))
# Foo.baz was called 200 times
</snippet></ROW><ROW><id>8111560</id><snippet>calls</snippet></ROW><ROW><id>8111560</id><snippet>class Foo(object):
    calls=0            
</snippet></ROW><ROW><id>8111560</id><snippet>Foo.__dict__</snippet></ROW><ROW><id>8111560</id><snippet>Foo.calls</snippet></ROW><ROW><id>8111560</id><snippet>Foo</snippet></ROW><ROW><id>8111560</id><snippet>foo=Foo()</snippet></ROW><ROW><id>8111560</id><snippet>foo.calls</snippet></ROW><ROW><id>8111560</id><snippet>Foo.calls</snippet></ROW><ROW><id>8111560</id><snippet>Foo.calls = ...</snippet></ROW><ROW><id>8111560</id><snippet>foo.calls = ...</snippet></ROW><ROW><id>8111560</id><snippet>foo.__dict__</snippet></ROW><ROW><id>8111621</id><snippet>IOError</snippet></ROW><ROW><id>8111621</id><snippet>communicate</snippet></ROW><ROW><id>8111621</id><snippet>stdin</snippet></ROW><ROW><id>8111621</id><snippet>--rc-fake-tty</snippet></ROW><ROW><id>8111621</id><snippet>startupinfo</snippet></ROW><ROW><id>8111621</id><snippet>CreateProcess</snippet></ROW><ROW><id>8111621</id><snippet>--rc-quiet</snippet></ROW><ROW><id>8111621</id><snippet>startupinfo</snippet></ROW><ROW><id>8111621</id><snippet>startupinfo = subprocess.STARTUPINFO()
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
subprocess.Popen(cmd, startupinfo=startupinfo)
</snippet></ROW><ROW><id>8111621</id><snippet>--rc-host</snippet></ROW><ROW><id>8111621</id><snippet>--rc-quiet</snippet></ROW><ROW><id>8111621</id><snippet>import socket
import subprocess
from select import select

try:
    import winreg
except ImportError:
    import _winreg as winreg

try:
    VLC_PATH = winreg.QueryValueEx(
        winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
            r'SOFTWARE\VideoLAN\VLC'), '')[0]
except WindowsError:
    exit("Error: VLC not found.")

def send_command(sock, cmd, get_result=False):
    try:
        cmd = (cmd + '\n').encode('ascii')
    except AttributeError:
        cmd += b'\n'
    sent = total = sock.send(cmd)
    while total &lt; len(cmd):
        sent = sock.send(cmd[total:])
        if sent == 0:
            raise socket.error('Socket connection broken.')
        total += sent
    if get_result:
        return receive_result(sock)

def receive_result(sock):
    data = bytearray()
    sock.setblocking(0)
    while select([sock], [], [], 1.0)[0]:
        chunk = sock.recv(1024)
        if chunk == b'': 
            raise socket.error('Socket connection broken.')
        data.extend(chunk)
    sock.setblocking(1)
    return data.decode('utf-8')

def main(address, port):
    import time
    rc_host = '{0}:{1}'.format(address, port)
    vlc = subprocess.Popen([VLC_PATH, '-I', 'rc', '--rc-host', rc_host, 
                            '--rc-quiet'])
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((address, port))
        help_msg = send_command(sock, 'help', True)
        print(help_msg)
        send_command(sock, 'quit')
    except socket.error as e:
        exit("Error: " + e.args[0])
    finally:
        sock.close()
        time.sleep(0.5)
        if vlc.poll() is None:
            vlc.terminate()

if __name__ == '__main__':
    main('localhost', 12345)
</snippet></ROW><ROW><id>8111748</id><snippet>{'234nj233nkj2k4n52': {'embedded_list': []},
 'jb234bhj23423h4b4': {'embedded_list': []},
    ... }
</snippet></ROW><ROW><id>8111748</id><snippet>{'234nj233nkj2k4n52': [],
 'jb234bhj23423h4b4': [],
    ... }
</snippet></ROW><ROW><id>8111748</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>8111748</id><snippet>from collections import defaultdict
d = defaultdict(list)
d['234nj233nkj2k4n52'].append(whatever)
</snippet></ROW><ROW><id>8112006</id><snippet>$ wget http://www.python.org/ftp/python/3.3.2/Python-3.3.2.tar.bz2
</snippet></ROW><ROW><id>8112006</id><snippet>$ bzip2 -cd Python-3.* | tar xvf -
$ cd Python-3.*
</snippet></ROW><ROW><id>8112006</id><snippet>$ ./configure
</snippet></ROW><ROW><id>8112006</id><snippet>$ make
</snippet></ROW><ROW><id>8112006</id><snippet>$ make install
</snippet></ROW><ROW><id>8112006</id><snippet>python</snippet></ROW><ROW><id>8112006</id><snippet>yum</snippet></ROW><ROW><id>8112006</id><snippet>python</snippet></ROW><ROW><id>8112006</id><snippet>python3.3</snippet></ROW><ROW><id>8112006</id><snippet>$ make altinstall
</snippet></ROW><ROW><id>8112057</id><snippet>wind = Tkinter.Tk()</snippet></ROW><ROW><id>8112057</id><snippet>wind = Tkinter.Toplevel()</snippet></ROW><ROW><id>8112057</id><snippet>def new():
    wind = Tkinter.Toplevel()
    wind.geometry('600x600')       
</snippet></ROW><ROW><id>8112224</id><snippet>&gt;&gt;&gt; l = [('a', [(0,1), (1,2), (2,3)]),
... ('b', [(0,1), (1,2), (2,3)]),
... ('c', [(0,1), (1,2), (2,3)])]
&gt;&gt;&gt; newl = [(i[0], [(j[0]+j[1])/2 for j in i[1]]) for i in l]
&gt;&gt;&gt; newl
[('a', [0.5, 1.5, 2.5]), ('b', [0.5, 1.5, 2.5]), ('c', [0.5, 1.5, 2.5])]
</snippet></ROW><ROW><id>8112224</id><snippet>&gt;&gt;&gt; newl = [(i[0], [(j[0]+j[1])/2.0 for j in i[1]]) for i in l]
</snippet></ROW><ROW><id>8112224</id><snippet>&gt;&gt;&gt; newl = []
&gt;&gt;&gt; for i in l:
...     temp = (i[0], [])
...     for j in i[1]:
...         temp[1].append((j[0]+j[1])/2.0)
...     newl.append(temp)
</snippet></ROW><ROW><id>8112652</id><snippet>python django-admin.py ...</snippet></ROW><ROW><id>8112803</id><snippet>#!</snippet></ROW><ROW><id>8112803</id><snippet>./my.py</snippet></ROW><ROW><id>8112803</id><snippet>python2 my.py</snippet></ROW><ROW><id>8112803</id><snippet>if sys.version_info[:3] &lt; (3,2,0):
    print('requires Python &gt;= 3.2.0')
    sys.exit(1)
</snippet></ROW><ROW><id>8112830</id><snippet>app.yaml</snippet></ROW><ROW><id>8112830</id><snippet>app.yaml</snippet></ROW><ROW><id>8112841</id><snippet>foo/../../</snippet></ROW><ROW><id>8112841</id><snippet>os.path.join</snippet></ROW><ROW><id>8112841</id><snippet>os.path.abspath</snippet></ROW><ROW><id>8112841</id><snippet>/</snippet></ROW><ROW><id>8112841</id><snippet>..</snippet></ROW><ROW><id>8112841</id><snippet>target_dir = "/target/" # trailing slash is important
with tarfile.open(…) as tarf:
    for n in tarf.names:
        if not os.path.abspath(os.path.join(target_dir, n)).startswith(target_dir):
            print "unsafe filenames!"
            sys.exit(1)
    tarf.extractall(path=target_dir)
</snippet></ROW><ROW><id>8112868</id><snippet>self.assertRaises(IntegrityError, add_user, user_detail1, user_detail2)
</snippet></ROW><ROW><id>8112868</id><snippet>assertRaises</snippet></ROW><ROW><id>8112868</id><snippet>try/except</snippet></ROW><ROW><id>8112868</id><snippet>assertRaises</snippet></ROW><ROW><id>8112868</id><snippet>def add_user(*user_details):
         try:
             u = User(*user_details)
             session.add(u)
             session.commit()
         except:
             session.rollback()
             raise
</snippet></ROW><ROW><id>8113077</id><snippet>match.group()</snippet></ROW><ROW><id>8113077</id><snippet>m = re.search( pattern, text )
if m and len( m.group(3) ) &gt; 3:
    text = text.replace( m.group(), m.group(1) + solve( m.group(2) ) )
</snippet></ROW><ROW><id>8113077</id><snippet>str.replace</snippet></ROW><ROW><id>8113077</id><snippet>m.start()</snippet></ROW><ROW><id>8113077</id><snippet>m.end()</snippet></ROW><ROW><id>8113148</id><snippet>while ((num and exp) != (1001)):
</snippet></ROW><ROW><id>8113148</id><snippet>True</snippet></ROW><ROW><id>8113148</id><snippet>0</snippet></ROW><ROW><id>8113148</id><snippet>1</snippet></ROW><ROW><id>8113148</id><snippet>1001</snippet></ROW><ROW><id>8113148</id><snippet>(num and exp)</snippet></ROW><ROW><id>8113148</id><snippet>num</snippet></ROW><ROW><id>8113148</id><snippet>exp</snippet></ROW><ROW><id>8113148</id><snippet>True</snippet></ROW><ROW><id>8113148</id><snippet>0</snippet></ROW><ROW><id>8113148</id><snippet>1</snippet></ROW><ROW><id>8113148</id><snippet>True</snippet></ROW><ROW><id>8113148</id><snippet>0</snippet></ROW><ROW><id>8113148</id><snippet>False</snippet></ROW><ROW><id>8113148</id><snippet>1001</snippet></ROW><ROW><id>8113148</id><snippet>if</snippet></ROW><ROW><id>8113148</id><snippet>while</snippet></ROW><ROW><id>8113148</id><snippet>if (num != 1001) and (exp != 1001):
</snippet></ROW><ROW><id>8113148</id><snippet>^</snippet></ROW><ROW><id>8113148</id><snippet>xor</snippet></ROW><ROW><id>8113148</id><snippet>**</snippet></ROW><ROW><id>8113148</id><snippet>&gt;&gt;&gt; 2^4
6
&gt;&gt;&gt; 2**4
16
</snippet></ROW><ROW><id>8113226</id><snippet>def get_initial(self):
    initial = super(MyCreateView, self).get_initial()
    initial['user'] = self.request.user
    return initial
</snippet></ROW><ROW><id>8113226</id><snippet>def __init__(self, *args, **kwargs):
    self.user = kwargs['initial']['user']
    super(MyObjectForm, self).__init__(self, *args, **kwargs)

def clean(self):
    # Clean all the submitted data
    super(MyObjectForm, self).clean()

    # Validate that the user submitted &gt; n time ago
    profile = self.user.get_profile()

    if datetime.now() - profile.lastpost &lt; timedelta(hours=1)
        raise forms.ValidationError("Need to wait longer than n=1 hours")
    else:
        self.cleaned_data['user'] = self.user

    return self.cleaned_data
</snippet></ROW><ROW><id>8113411</id><snippet>import itertools

data=[]
with open('data.txt','r') as f:
    for key,group in itertools.groupby(f,lambda line: line.startswith('#meta')):
        if key:
            meta=next(group).strip()
        else:
            lines=''.join(group).strip()
            data.append((meta,lines))
print(data)            
</snippet></ROW><ROW><id>8113411</id><snippet>[('#meta data 1', 'skadjflaskdjfasljdfalskdjfl\nsdkfjhasdlkgjhsdlkjghlaskdj\nasdhfk'), ('#meta data 2', 'jflaksdjflaksjdflkjasdlfjas\nldaksjflkdsajlkdfj'), ('#meta data 3', 'alsdkjflasdjkfglalaskdjf')]
</snippet></ROW><ROW><id>8113411</id><snippet>itertools.groupby(f,lambda line: line.startswith('#meta'))
</snippet></ROW><ROW><id>8113411</id><snippet>f</snippet></ROW><ROW><id>8113411</id><snippet>lambda</snippet></ROW><ROW><id>8113411</id><snippet>#meta</snippet></ROW><ROW><id>8113411</id><snippet>True</snippet></ROW><ROW><id>8113411</id><snippet>False</snippet></ROW><ROW><id>8113411</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8113411</id><snippet>#meta</snippet></ROW><ROW><id>8113411</id><snippet>#meta</snippet></ROW><ROW><id>8113411</id><snippet>key</snippet></ROW><ROW><id>8113411</id><snippet>lambda</snippet></ROW><ROW><id>8113411</id><snippet>True</snippet></ROW><ROW><id>8113411</id><snippet>False</snippet></ROW><ROW><id>8113525</id><snippet>#TODO: must make sure about the indentation
import argparse
import re
import sys

PATCH_LINE = "import sys; sys.exit(0)  # PATCHED"


def parse_arguments():
    # take the file and the line to patch, or maybe we can take a
    # diff file generated via uniform_diff
    parser = argparse.ArgumentParser(description='enable and disable the automatic exit')
    parser.add_argument('file', help='file to patch')

    parser.add_argument('line', help='line where to quit')

    parser.add_argument('-m', '--msg',
                        default=PATCH_LINE)

    parser.add_argument('-d', '--disable',
                        action='store_true')

    return parser.parse_args()


if __name__ == '__main__':
    ns = parse_arguments()
    text = open(ns.file).readlines()
    line_no = int(ns.line)

    if ns.disable:
        # the line should not be necessary in that case?
        text.remove(text[line_no])
    else:
        # count spaces
        prev = text[line_no - 1]
        m = re.match('\s*', prev)
        to_insert = m.group() + ns.msg
        print("inserting line %s" % to_insert)
        text.insert(line_no, to_insert)

    open(ns.file, 'w').writelines(text)
</snippet></ROW><ROW><id>8113579</id><snippet>&gt;&gt;&gt; sample = '   string    --More--    anotherstring    \n'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'(\s+)(--More--)(\s+)', sample).groups()
('    ', '--More--', '    ')
</snippet></ROW><ROW><id>8113692</id><snippet>itertools.permutations()</snippet></ROW><ROW><id>8113692</id><snippet>list(map("".join, itertools.permutations('1234')))
</snippet></ROW><ROW><id>8113709</id><snippet>self.statusbar.SetStatusText('text', field_number)
</snippet></ROW><ROW><id>8113787</id><snippet>str.split()</snippet></ROW><ROW><id>8113787</id><snippet>&gt;&gt;&gt; "many   fancy word \nhello    \thi".split()
['many', 'fancy', 'word', 'hello', 'hi']
</snippet></ROW><ROW><id>8114228</id><snippet>self</snippet></ROW><ROW><id>8114228</id><snippet>Assignment(self, name, discription, deadline, grade, studentID)
</snippet></ROW><ROW><id>8114228</id><snippet>Assignment(name, discription, deadline, grade, studentID)
</snippet></ROW><ROW><id>8114228</id><snippet>self</snippet></ROW><ROW><id>8114405</id><snippet>while True</snippet></ROW><ROW><id>8114405</id><snippet>guess = 50     # this should be outside the loop, I think
while True:    # infinite loop
    n = raw_input("\n\nTrue, False or Correct?: ")
    if n == "Correct":
        break  # stops the loop
    elif n == "True":
        # etc.
</snippet></ROW><ROW><id>8114436</id><snippet>HTMLParser</snippet></ROW><ROW><id>8114436</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; s = h.unescape('© 2010')
&gt;&gt;&gt; s
u'\xa9 2010'
&gt;&gt;&gt; print s
© 2010
&gt;&gt;&gt; s = h.unescape('© 2010')
&gt;&gt;&gt; s
u'\xa9 2010'
</snippet></ROW><ROW><id>8114460</id><snippet>v= [10,8,6] 
m = [[abs(y-x) for y in v] for x in v]
</snippet></ROW><ROW><id>8114460</id><snippet>for i in m:
 print '%s '*len(i) % tuple(i)
</snippet></ROW><ROW><id>8114529</id><snippet>CFLAGS="-I&lt;local include dir&gt;" LDFLAGS="-L&lt;local lib dir&gt;"
</snippet></ROW><ROW><id>8114924</id><snippet>def read_graph(lines):
    g = {}
    for line in lines:
        words = line.split()
        if words[1] == '.':
            words = words[:1]
        g[words[0]] = words[1:]
    return g

def dump_graph(g):
    out = []
    def dump(key):
        for k in g[key]:
            dump(k)
        if key not in out:
            out.append(key)
    for k in g:
        dump(k)
    return out
</snippet></ROW><ROW><id>8114924</id><snippet>&gt;&gt;&gt; data = """Civic        Honda Car
... Honda        Manufacturer
... VW           Manufacturer
... Manufacturer .
... Car          .
... Beetle       VW Car
... """
&gt;&gt;&gt; g = read_graph(data.splitlines())
&gt;&gt;&gt; g
{'VW': ['Manufacturer'], 'Civic': ['Honda', 'Car'], 'Car': [],
'Honda': ['Manufacturer'], 'Beetle': ['VW', 'Car'], 'Manufacturer': []}
&gt;&gt;&gt; dump_graph(g)
['Manufacturer', 'VW', 'Honda', 'Car', 'Civic', 'Beetle']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8114974</id><snippet>csv</snippet></ROW><ROW><id>8115040</id><snippet>import wx

class TestFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, -1)

        self.tree = wx.TreeCtrl(self, style = wx.TR_HIDE_ROOT)
        self.root = self.tree.AddRoot("")

        gr = self.tree.AppendItem(self.root, "Grooveshark")
        pop_r = self.tree.AppendItem(gr, "Popular")
        sr = self.tree.AppendItem(gr, "Search")

        dr = self.tree.AppendItem(self.root, "Download")

        pr = self.tree.AppendItem(self.root, "Pandora")
        stat_r = self.tree.AppendItem(pr, "Stations")

        image_list = wx.ImageList(16, 16)
        grooveshark = image_list.Add(wx.Image("images/grooveshark (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())
        popular     = image_list.Add(wx.Image("images/popular (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())
        search      = image_list.Add(wx.Image("images/search (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())
        download    = image_list.Add(wx.Image("images/download (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())
        pandora     = image_list.Add(wx.Image("images/playlist_icon (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())
        stations    = image_list.Add(wx.Image("images/stations (Custom).png", wx.BITMAP_TYPE_PNG).Scale(16,16).ConvertToBitmap())

        self.tree.AssignImageList(image_list)

        self.tree.SetPyData(gr, None)
        self.tree.SetItemImage(gr, grooveshark, wx.TreeItemIcon_Normal)
        self.tree.SetPyData(pop_r, None)
        self.tree.SetItemImage(pop_r, popular, wx.TreeItemIcon_Normal)
        self.tree.SetPyData(sr, None)
        self.tree.SetItemImage(sr, search, wx.TreeItemIcon_Normal)
        self.tree.SetPyData(dr, None)
        self.tree.SetItemImage(dr, download, wx.TreeItemIcon_Normal)
        self.tree.SetPyData(pr, None)
        self.tree.SetItemImage(pr, pandora, wx.TreeItemIcon_Normal)
        self.tree.SetPyData(stat_r, None)
        self.tree.SetItemImage(stat_r, stations, wx.TreeItemIcon_Normal)


if __name__ == "__main__":
    a = wx.App(False)

    f = TestFrame()
    f.Show()
    a.MainLoop()
</snippet></ROW><ROW><id>8115050</id><snippet>enumerate</snippet></ROW><ROW><id>8115050</id><snippet>listEx = ['cat *(select: "Brown")*', 'dog', 'turtle', 'apple']
listEx2 = ['hampter',' bird', 'monkey', 'banana', 'cat']

for j in listEx2:
    for pos, i in enumerate(listEx):
        if j in i:
            print j, "found in", i, "at position", pos, "of listEx"
</snippet></ROW><ROW><id>8115050</id><snippet>cat found in cat *(select: "Brown")* at position 0 of listEx
</snippet></ROW><ROW><id>8115286</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; s = r'Hello,\nworld!'
&gt;&gt;&gt; print(literal_eval("'%s'" % s))
Hello,
world!
</snippet></ROW><ROW><id>8115286</id><snippet>def is_ascii(s):
    try:
        s.decode('ascii')
        return True
    except UnicodeDecodeError:
        return False

[s for s in ['william', 'short', '\x80', 'twitter', '\xaa',
             '\xe2', 'video', 'guy', 'ray']
 if is_ascii(s)]
</snippet></ROW><ROW><id>8115329</id><snippet>python</snippet></ROW><ROW><id>8115329</id><snippet>python2.7</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8115329</id><snippet>/usr/bin/python -c "import bz2; print bz2.__doc__"
</snippet></ROW><ROW><id>8115329</id><snippet>λ &gt; /usr/bin/python -c "import bz2; print bz2.__doc__"

The python bz2 module provides a comprehensive interface for
the bz2 compression library. It implements a complete file
interface, one shot (de)compression functions, and types for
sequential (de)compression.
</snippet></ROW><ROW><id>8115329</id><snippet>PATH</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local</snippet></ROW><ROW><id>8115329</id><snippet>python</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8115329</id><snippet>python</snippet></ROW><ROW><id>8115329</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8115329</id><snippet>sudo rm /usr/local/bin/python
</snippet></ROW><ROW><id>8115329</id><snippet>/usr/bin</snippet></ROW><ROW><id>8115329</id><snippet>PATH</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8115329</id><snippet>/usr/bin</snippet></ROW><ROW><id>8115329</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>8115329</id><snippet>export PATH=/usr/bin:$PATH
</snippet></ROW><ROW><id>8115329</id><snippet>virtualenv</snippet></ROW><ROW><id>8115329</id><snippet>python</snippet></ROW><ROW><id>8115329</id><snippet>python2.7</snippet></ROW><ROW><id>8115329</id><snippet>pythonw</snippet></ROW><ROW><id>8115329</id><snippet>pythonw2.7</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8115329</id><snippet>/usr/local/lib/python/2.7.2</snippet></ROW><ROW><id>8115500</id><snippet>user</snippet></ROW><ROW><id>8115500</id><snippet>def postloop(self):
    user = 'lilith'
    return user
</snippet></ROW><ROW><id>8115500</id><snippet>user</snippet></ROW><ROW><id>8115500</id><snippet>global user
</snippet></ROW><ROW><id>8115500</id><snippet>global</snippet></ROW><ROW><id>8115511</id><snippet>pythonw</snippet></ROW><ROW><id>8115511</id><snippet>python</snippet></ROW><ROW><id>8115511</id><snippet>pyw</snippet></ROW><ROW><id>8115527</id><snippet>netstat -ln | grep 80</snippet></ROW><ROW><id>8115527</id><snippet>telnet localhost 80</snippet></ROW><ROW><id>8115531</id><snippet>/usr</snippet></ROW><ROW><id>8115531</id><snippet>PYTHONPATH=$HOME/py/foo:$HOME/py/django
DJANGO_SETTINGS_MODULE=website_foobar.settings

export PYTHONPATH DJANGO_SETTINGS_MODULE
</snippet></ROW><ROW><id>8115548</id><snippet>*</snippet></ROW><ROW><id>8115548</id><snippet>op</snippet></ROW><ROW><id>8115548</id><snippet>def vectorizeIt(args, op):
    op(*args)
</snippet></ROW><ROW><id>8115736</id><snippet>querystring['param2']
</snippet></ROW><ROW><id>8116132</id><snippet>value = 'Test' if 1 == 1 else 'NoTest'
</snippet></ROW><ROW><id>8116228</id><snippet>doctest.py</snippet></ROW><ROW><id>8116228</id><snippet>sys.stdout</snippet></ROW><ROW><id>8116228</id><snippet>sys.stdout</snippet></ROW><ROW><id>8116228</id><snippet>def printing_func(inarg, file=None):
    # (do some stuff...)

    if file is None:
        file = sys.stdout

    print(result, file=file)
</snippet></ROW><ROW><id>8116228</id><snippet>printing_func()</snippet></ROW><ROW><id>8116228</id><snippet>sys</snippet></ROW><ROW><id>8116228</id><snippet>sys.stdout</snippet></ROW><ROW><id>8116228</id><snippet>stdout</snippet></ROW><ROW><id>8116228</id><snippet>sys</snippet></ROW><ROW><id>8116228</id><snippet>def inside_doctest(original_stdout=sys.stdout):
    return original_stdout != sys.stdout
</snippet></ROW><ROW><id>8116580</id><snippet>if __name__=='__main__':
    # these variables would normally be called in from a config file
    job_type = 'job1'
    uni_var = 10

    job_select = superClass.optionFactory(job_type, uni_var)
    job_select.job()        


class superClass(object):
    def __init__(self, job_type, uni_var):
        self.job_type = job_type   
        self.uni_var = uni_var

    # This is the definition called by the main function it then
    # redirects the request to the appropriate job sub class   
    def job(self):
        raise NotImplementedError()

    @staticmethod
    def optionFactory(job_type, uni_var):
        "Return an instance of superClass based on job_type and uni_var."
        if job_type == "job1":
            return option1(job_type, uni_var)
        else:
            return option2(job_type, uni_var)

class option1(superClass):
    def __init__(self, job_type, uni_var):
        super(option1, self).__init__(job_type, uni_var)

    def job(self):
        print 'job option 1'
        print uni_var

class option2(superClass):
    def __init__(self, job_type, uni_var):
        super(option2, self).__init__(job_type, uni_var)

    def job(self):
        print 'job option 2'
        print uni_var
</snippet></ROW><ROW><id>8116580</id><snippet>superClass</snippet></ROW><ROW><id>8116580</id><snippet>optionFactory</snippet></ROW><ROW><id>8116580</id><snippet>superClass</snippet></ROW><ROW><id>8116580</id><snippet>if __name__=='__main__':
    # these variables would normally be called in from a config file
    job_type = 'job1'
    uni_var = 10

    job_select = optionFactory(job_type, uni_var)
    job_select.job()        


class superClass(object):
    def __init__(self, job_type, uni_var):
        self.job_type = job_type   
        self.uni_var = uni_var

    # This is the definition called by the main function it then
    # redirects the request to the appropriate job sub class   
    def job(self):
        raise NotImplementedError()

class option1(superClass):
    def __init__(self, job_type, uni_var):
        super(option1, self).__init__(job_type, uni_var)

    def job(self):
        print 'job option 1'
        print uni_var

class option2(superClass):
    def __init__(self, job_type, uni_var):
        super(option2, self).__init__(job_type, uni_var)

    def job(self):
        print 'job option 2'
        print uni_var

def optionFactory(job_type, uni_var):
    "Return an instance of superClass based on job_type and uni_var."
    if job_type == "job1":
        return option1(job_type, uni_var)
    else:
        return option2(job_type, uni_var)
</snippet></ROW><ROW><id>8116608</id><snippet>lines = open("someFile", "r").read().splitlines()
IP = "10.10.1.10"
hostname = None
for i, line in enumerate(lines):
    if IP in line:
        hostname = lines[i - 1]
        break

if hostname:
    # Do stuff
</snippet></ROW><ROW><id>8116626</id><snippet>iterparse()</snippet></ROW><ROW><id>8116626</id><snippet>xml.etree</snippet></ROW><ROW><id>8116626</id><snippet>import xml.etree.cElementTree as etree

for event, elem in etree.iterparse(file, events=('start', 'end')):
    if event == 'start':
       print(elem.tag) # use only tag name and attributes here
    elif event == 'end':
       # elem children elements, elem.text, elem.tail are available
       if elem.text is not None and elem.tail is not None:
          print(repr(elem.tail))
</snippet></ROW><ROW><id>8116626</id><snippet>start()</snippet></ROW><ROW><id>8116626</id><snippet>data()</snippet></ROW><ROW><id>8116626</id><snippet>end()</snippet></ROW><ROW><id>8116626</id><snippet>etree.TreeBuilder()</snippet></ROW><ROW><id>8116626</id><snippet>from xml.etree.ElementTree import XMLParser, TreeBuilder

class MyTreeBuilder(TreeBuilder):

    def start(self, tag, attrs):
        print("&lt;%s&gt;" % tag)
        return TreeBuilder.start(self, tag, attrs)

    def data(self, data):
        print(repr(data))
        TreeBuilder.data(self, data)

    def end(self, tag):
        return TreeBuilder.end(self, tag)

text = """&lt;xml&gt;
The captial of &lt;place pid="1"&gt;South Africa&lt;/place&gt; is &lt;place&gt;Pretoria&lt;/place&gt;.
&lt;/xml&gt;"""

# ElementTree.fromstring()
parser = XMLParser(target=MyTreeBuilder())
parser.feed(text)
root = parser.close() # return an ordinary Element
</snippet></ROW><ROW><id>8116626</id><snippet>&lt;xml&gt;
'\nThe captial of '
&lt;place&gt;
'South Africa'
' is '
&lt;place&gt;
'Pretoria'
'.\n'
</snippet></ROW><ROW><id>8116638</id><snippet>source = urllib2.urlopen("http://someUrl.com/somePage.html").read()
open("/path/to/someFile", "wb").write(source)
</snippet></ROW><ROW><id>8116638</id><snippet>try</snippet></ROW><ROW><id>8116638</id><snippet>except</snippet></ROW><ROW><id>8116638</id><snippet>open("/path/to/someFile", "wb").write(urllib2.urlopen("http://someUrl.com/somePage.html").read())
</snippet></ROW><ROW><id>8116674</id><snippet>self.data</snippet></ROW><ROW><id>8116674</id><snippet>for mid, group in itertools.groupby(
    sorted(self.data,key=operator.itemgetter(1)), key=operator.itemgetter(1)):
</snippet></ROW><ROW><id>8116716</id><snippet>:</snippet></ROW><ROW><id>8116716</id><snippet>fixtag</snippet></ROW><ROW><id>8116716</id><snippet>from xml.etree import ElementTree as etree

if etree.VERSION[0:3] == '1.2':
    #in etree &lt; 1.3, this is a workaround for supressing prefixes

    def fixtag(tag, namespaces):
        import string
        # given a decorated tag (of the form {uri}tag), return prefixed
        # tag and namespace declaration, if any
        if isinstance(tag, etree.QName):
            tag = tag.text
        namespace_uri, tag = string.split(tag[1:], "}", 1)
        prefix = namespaces.get(namespace_uri)
        if namespace_uri not in namespaces:
            prefix = etree._namespace_map.get(namespace_uri)
            if namespace_uri not in etree._namespace_map:
                prefix = "ns%d" % len(namespaces)
            namespaces[namespace_uri] = prefix
            if prefix == "xml":
                xmlns = None
            else:
                if prefix is not None:
                    nsprefix = ':' + prefix
                else:
                    nsprefix = ''
                xmlns = ("xmlns%s" % nsprefix, namespace_uri)
        else:
            xmlns = None
        if prefix is not None:
            prefix += ":"
        else:
            prefix = ''

        return "%s%s" % (prefix, tag), xmlns

    etree.fixtag = fixtag
    etree._namespace_map['http://some.namespace'] = None
else:
    #For etree &gt; 1.3, use register_namespace function
    etree.register_namespace('', 'http://some.namespace')
</snippet></ROW><ROW><id>8116770</id><snippet>form</snippet></ROW><ROW><id>8116770</id><snippet>textarea</snippet></ROW><ROW><id>8116770</id><snippet>textarea</snippet></ROW><ROW><id>8116770</id><snippet>&lt;form name="choice_form" id="choice_form" action="/g/choicehandler" method="post" onsubmit="writeToStorage()"&gt;
  &lt;textarea name="choice" rows="7" cols="50"&gt;&lt;/textarea&gt;&lt;br /&gt;
  &lt;input type="hidden" name="chooser" id="form_chooser" /&gt;
  &lt;input type="submit" value="submit your choice"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>8116770</id><snippet>var count = 0;

function writeToStorage()
{ 
  var user = "user" + count;
  count++;
  localStorage.setItem("chooser", user);

  document.getElementById("form_chooser").value = user;
};
</snippet></ROW><ROW><id>8116984</id><snippet>raise</snippet></ROW><ROW><id>8116984</id><snippet>raise</snippet></ROW><ROW><id>8117194</id><snippet>__slots__</snippet></ROW><ROW><id>8117194</id><snippet>__slots__ = ('the','names','of','fields')</snippet></ROW><ROW><id>8117194</id><snippet>sys.getsizeof(myobj.Container)</snippet></ROW><ROW><id>8117194</id><snippet>sys.getsizeof(myobj.Container())</snippet></ROW><ROW><id>8117243</id><snippet>a.name = ...</snippet></ROW><ROW><id>8117243</id><snippet>name</snippet></ROW><ROW><id>8117243</id><snippet>__dict__</snippet></ROW><ROW><id>8117243</id><snippet>name</snippet></ROW><ROW><id>8117243</id><snippet>__dict__</snippet></ROW><ROW><id>8117691</id><snippet>map</snippet></ROW><ROW><id>8117691</id><snippet>reduce</snippet></ROW><ROW><id>8117691</id><snippet>map</snippet></ROW><ROW><id>8117691</id><snippet>reduce</snippet></ROW><ROW><id>8117691</id><snippet>map</snippet></ROW><ROW><id>8117691</id><snippet>reduce</snippet></ROW><ROW><id>8117691</id><snippet>list = ['a', 'foo', 'bar', 'foobar', 'foo', 'a', 'bar', 'bar', 'bar', 'bar', 'foo']
list2 = ['b', 'foo', 'foo', 'b', 'a', 'bar']
</snippet></ROW><ROW><id>8117691</id><snippet>def wordToDict(word):
  return {word: 1}
</snippet></ROW><ROW><id>8117691</id><snippet>def countReduce(d1, d2):
  out = d1.copy()
  for key in d2: 
    if key in out:
      out[key] += d2[key]
    else:
      out[key] = d2[key]
  return out 
</snippet></ROW><ROW><id>8117691</id><snippet>reduce(countReduce, map(wordToDict, list + list2))

&gt;&gt;&gt; {'a': 3, 'foobar': 1, 'b': 2, 'bar': 6, 'foo': 5}
</snippet></ROW><ROW><id>8117691</id><snippet>reduce(countReduce, [reduce(countReduce, map(wordToDict, list)), reduce(countReduce, map(wordToDict, list2))])

&gt;&gt;&gt; {'a': 3, 'foobar': 1, 'b': 2, 'foo': 5, 'bar': 6}
</snippet></ROW><ROW><id>8117768</id><snippet>setuptools</snippet></ROW><ROW><id>8117768</id><snippet>Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8117768</id><snippet>C:\&gt;easy_install pywhois
</snippet></ROW><ROW><id>8117768</id><snippet>Searching for pywhois
Reading http://pypi.python.org/simple/pywhois/
Best match: pywhois 0.1
Downloading http://pypi.python.org/packages/source/p/pywhois/pywhois-0.1.tar.gz#
md5=b888dcd990574b7b284d9a9f4b300776
Processing pywhois-0.1.tar.gz
Running pywhois-0.1\setup.py -q bdist_egg --dist-dir c:\docume~1\40843\locals~1\
temp\easy_install-hugnul\pywhois-0.1\egg-dist-tmp-aarhii
Adding pywhois 0.1 to easy-install.pth file
Installing pywhois-script.py script to C:\Python27\Scripts
Installing pywhois.exe script to C:\Python27\Scripts
Installing pywhois.exe.manifest script to C:\Python27\Scripts

Installed c:\python27\lib\site-packages\pywhois-0.1-py2.7.egg
Processing dependencies for pywhois
Finished processing dependencies for pywhois
</snippet></ROW><ROW><id>8117768</id><snippet>Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pywhois
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8118219</id><snippet>tempfile</snippet></ROW><ROW><id>8118444</id><snippet>char const *greet(boost::python::object obj) {
    PyObject* pobj = obj.ptr();
    Py_buffer pybuf;
    PyObject_GetBuffer(pobj, &amp;pybuf, PyBUF_SIMPLE);
    void *buf = pybuf.buf;
    double *p = (double*)buf;
    *p = 2.;
    *(p+1) = 3;
    return "hello world";
    }
</snippet></ROW><ROW><id>8118444</id><snippet>print cmod.greet(a)
</snippet></ROW><ROW><id>8118692</id><snippet>t = Table(name, meta, autoload=True)#, autoload_with=engine)
</snippet></ROW><ROW><id>8118744</id><snippet>&gt;&gt;&gt; def my_round(x):
...  return round(x*4)/4
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; assert my_round(10.38) == 10.50
&gt;&gt;&gt; assert my_round(11.12) == 11.00
&gt;&gt;&gt; assert my_round(5.24) == 5.25
&gt;&gt;&gt; assert my_round(9.76) == 9.75
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8119061</id><snippet>self.view.window().run_command('exec', {'cmd': ['sh', 'script.sh'], 'quiet': False})        
</snippet></ROW><ROW><id>8119299</id><snippet>source ~/.bashrc</snippet></ROW><ROW><id>8119316</id><snippet>inserted-text</snippet></ROW><ROW><id>8119316</id><snippet>Gtk.EntryBuffer</snippet></ROW><ROW><id>8119316</id><snippet>Gtk.Entry</snippet></ROW><ROW><id>8119316</id><snippet>entry = Gtk.Entry()
entry_buffer = entry.get_buffer()
entry_buffer.connect('inserted-text', callback)
</snippet></ROW><ROW><id>8119837</id><snippet>&gt;&gt;&gt; a = """This is a test string line 1
... This is a test string line 2
... This is a test string line 3"""
</snippet></ROW><ROW><id>8119849</id><snippet>[buildout]
parts = django tornado

[django]
recipe = z3c.recipe.scripts
eggs =
    Django
    # DjangoDevKit

[tornado]
recipe = z3c.recipe.scripts
eggs = Tornado
</snippet></ROW><ROW><id>8120031</id><snippet>%reset</snippet></ROW><ROW><id>8120031</id><snippet>%rerun 1-17</snippet></ROW><ROW><id>8120045</id><snippet>for i in count:</snippet></ROW><ROW><id>8120045</id><snippet>for i in 7:</snippet></ROW><ROW><id>8120045</id><snippet>in</snippet></ROW><ROW><id>8120045</id><snippet>for i in range(count):
</snippet></ROW><ROW><id>8120427</id><snippet>root</snippet></ROW><ROW><id>8120427</id><snippet>import Tkinter as tk
class StatusBar(tk.Frame):   
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.variable=tk.StringVar()        
        self.label=tk.Label(self, bd=1, relief=tk.SUNKEN, anchor=tk.W,
                           textvariable=self.variable,
                           font=('arial',16,'normal'))
        self.variable.set('Status Bar')
        self.label.pack(fill=tk.X)        
        self.pack()

root=tk.Tk()
d=StatusBar(root)
root.geometry('300x100')
root.mainloop()
</snippet></ROW><ROW><id>8120427</id><snippet>tk.StringVar</snippet></ROW><ROW><id>8120427</id><snippet>self.variable.set(...)</snippet></ROW><ROW><id>8120427</id><snippet>self.variable.set('')</snippet></ROW><ROW><id>8120571</id><snippet>usOwner</snippet></ROW><ROW><id>8120571</id><snippet>USER()</snippet></ROW><ROW><id>8120571</id><snippet>datafiles = dbDatafile.gql("WHERE usOwner = USER(:1)", user.email())
</snippet></ROW><ROW><id>8121104</id><snippet>def resize(new_size):
     g = pgmagick.Geometry(new_size) # distinguishes whether width, height or both given
     image = pgmagick.Image(img)
     rw, rh = image.size()
     w, h = g.width(), g.height()
     if w and not h:
         g.height(int(rh * w * 1.0/rw))
     elif h and not w:
         g.width(int(rw * h * 1.0/rh))

     image.scale(g)
</snippet></ROW><ROW><id>8121691</id><snippet>class Art2C(..):
    art = m.ForeignKey('Article')
    from_other_app = m.ForeignKey('other_app.Article')
</snippet></ROW><ROW><id>8121808</id><snippet>match</snippet></ROW><ROW><id>8121808</id><snippet>search</snippet></ROW><ROW><id>8121808</id><snippet>re.search(r'([a-zA-Z][a-zA-Z]+)',str)
</snippet></ROW><ROW><id>8122006</id><snippet>file_name = 'lex_parser'
class_name = 'LexParser'

Parser = getattr(__import__(file_name), class_name)
</snippet></ROW><ROW><id>8122006</id><snippet>file_name</snippet></ROW><ROW><id>8122006</id><snippet>.py</snippet></ROW><ROW><id>8122006</id><snippet>__import__</snippet></ROW><ROW><id>8122006</id><snippet>import sys

file_name = 'parsers.lex_parser'
class_name = 'LexParser'

__import__(file_name)
Parser = getattr(sys.modules[file_name], class_name)
</snippet></ROW><ROW><id>8122006</id><snippet>__import__</snippet></ROW><ROW><id>8122006</id><snippet>Parser</snippet></ROW><ROW><id>8122006</id><snippet>parser = Parser()
</snippet></ROW><ROW><id>8122096</id><snippet>any(substring in s for substring in substring_list)
</snippet></ROW><ROW><id>8122096</id><snippet>True</snippet></ROW><ROW><id>8122096</id><snippet>substring_list</snippet></ROW><ROW><id>8122096</id><snippet>s</snippet></ROW><ROW><id>8122096</id><snippet>from itertools import imap
any(imap(s.__contains__, substring_list))
</snippet></ROW><ROW><id>8122105</id><snippet>        linkstr = ""
        for link in Listlinker: 
          linkstr = link.get_attribute("href")

          if linkstr in Domenesider:
            pass
          elif str(HovedDomene) in linkstr:
            Domenesider.append(side)
</snippet></ROW><ROW><id>8122672</id><snippet>aux=matriz;
</snippet></ROW><ROW><id>8122672</id><snippet>matriz</snippet></ROW><ROW><id>8122672</id><snippet>matriz</snippet></ROW><ROW><id>8122672</id><snippet>aux</snippet></ROW><ROW><id>8122672</id><snippet>aux=matriz[:]
</snippet></ROW><ROW><id>8122672</id><snippet>matriz</snippet></ROW><ROW><id>8122672</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>8122672</id><snippet>aux = copy.deepcopy(matriz)
</snippet></ROW><ROW><id>8123038</id><snippet>z.py</snippet></ROW><ROW><id>8123038</id><snippet>z.pyc</snippet></ROW><ROW><id>8123038</id><snippet>import imp
import time
def write_module(filename):
  fp = open('z.py', 'w')
  fp.write(open(filename).read())
  fp.close()

write_module('x.py')
import z
print(z.x.var) # Prints 'from x.py'
time.sleep(1)  # Wait one second
write_module('y.py')
imp.reload(z)
print(z.x.var) # Prints 'from y.py'
</snippet></ROW><ROW><id>8123073</id><snippet>ModelForm</snippet></ROW><ROW><id>8123073</id><snippet>User</snippet></ROW><ROW><id>8123073</id><snippet>class RegistrationForm(forms.ModelForm):
    location = forms.CharField(max_length=100)
    # etc -- enter all the forms from UserProfile here

    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'email', and other fields in User ]

    def save(self, *args, **kwargs):
        user = super(RegistrationForm, self).save(*args, **kwargs)
        profile = UserProfile()
        profile.user = user
        profile.location = self.cleaned_data['location']
        # and so on with the remaining fields
        profile.save()
        return profile
</snippet></ROW><ROW><id>8123103</id><snippet>def concatenations(target_string, fragments, concat_path=()):
    if not target_string:
        yield concat_path
    else:
        for frag in fragments:
            if target_string.startswith(frag):
                new_target = target_string[len(frag):]
                new_path = concat_path + (frag,)
                for c in concatenations(new_target, fragments, new_path):
                    yield c
</snippet></ROW><ROW><id>8123103</id><snippet>fragments</snippet></ROW><ROW><id>8123103</id><snippet>fragments - {frag}</snippet></ROW><ROW><id>8123103</id><snippet>fragments = {"ab", "cde", "abcd", "a", "bcd", "cd", "e"}
list(concatenations("abcde", fragments))
</snippet></ROW><ROW><id>8123103</id><snippet>[('a', 'bcd', 'e'), ('abcd', 'e'), ('ab', 'cde'), ('ab', 'cd', 'e')]
</snippet></ROW><ROW><id>8123112</id><snippet>autoload=True</snippet></ROW><ROW><id>8123112</id><snippet>autoload=True</snippet></ROW><ROW><id>8123173</id><snippet>&gt;&gt;&gt; chars = set("abc")
&gt;&gt;&gt; chars.issubset("bracket")
True
&gt;&gt;&gt; chars.issubset("fish")
False
&gt;&gt;&gt; chars.issubset("bad")
False
</snippet></ROW><ROW><id>8123274</id><snippet>types_qs.annotate(num_components=Count('components')).filter(Q(is_bulk=False) | (Q(is_bulk=True) &amp; Q(num_components__gt=0)))
</snippet></ROW><ROW><id>8123612</id><snippet>import subprocess

process = subprocess.Popen('script_name')
print process.communicate()
</snippet></ROW><ROW><id>8123841</id><snippet>git add -A
git diff --quiet --exit-code --cached || git commit -m 'bla'
</snippet></ROW><ROW><id>8123877</id><snippet>class SelectableText(urwid.Text):
    ...
    def selectable(self):
        return True
...

items = map(lambda x: SelectableText(`x`), range(500))
</snippet></ROW><ROW><id>8123934</id><snippet>is</snippet></ROW><ROW><id>8123934</id><snippet>==</snippet></ROW><ROW><id>8123934</id><snippet>is</snippet></ROW><ROW><id>8123934</id><snippet>endswith</snippet></ROW><ROW><id>8123934</id><snippet>if word.endswith("e"):
     print word + "d"
</snippet></ROW><ROW><id>8123990</id><snippet>y = np.zeros([num_rows,1])
</snippet></ROW><ROW><id>8123990</id><snippet>y = np.zeros([num_rows])
</snippet></ROW><ROW><id>8124692</id><snippet>var count = 12;
</snippet></ROW><ROW><id>8124692</id><snippet>&lt;script type="text/javascript"&gt;
var count = 12;
&lt;/script&gt;
</snippet></ROW><ROW><id>8124827</id><snippet>for a in text</snippet></ROW><ROW><id>8124827</id><snippet>text</snippet></ROW><ROW><id>8124827</id><snippet>tostring</snippet></ROW><ROW><id>8124827</id><snippet>etree.Element</snippet></ROW><ROW><id>8124827</id><snippet>a</snippet></ROW><ROW><id>8124827</id><snippet>text</snippet></ROW><ROW><id>8124827</id><snippet>root = ET.parse(xml_file).getroot()
for child in root:
    print tostring(child)
</snippet></ROW><ROW><id>8124827</id><snippet>#print a, "--&gt;", a.text</snippet></ROW><ROW><id>8124827</id><snippet>text</snippet></ROW><ROW><id>8124827</id><snippet>tostring</snippet></ROW><ROW><id>8124827</id><snippet>tostring</snippet></ROW><ROW><id>8124827</id><snippet>a.text</snippet></ROW><ROW><id>8125293</id><snippet>do_something</snippet></ROW><ROW><id>8125293</id><snippet>doctree-resolved(app, doctree, docname)
html-page-context(app, pagename, templatename, context, doctree)
</snippet></ROW><ROW><id>8125293</id><snippet>def setup(app):
    app.connect('doctree-resolved', do_something)
</snippet></ROW><ROW><id>8125687</id><snippet>function func()
{
        for (a in arguments)
               WriteOutput(arguments[a] &amp; "is a quality argument");
}
</snippet></ROW><ROW><id>8125687</id><snippet>a</snippet></ROW><ROW><id>8125687</id><snippet>arguments[a]</snippet></ROW><ROW><id>8125687</id><snippet>&lt;cfscript&gt;</snippet></ROW><ROW><id>8125687</id><snippet>&lt;/cfscript&gt;</snippet></ROW><ROW><id>8125687</id><snippet>component {</snippet></ROW><ROW><id>8125687</id><snippet>}</snippet></ROW><ROW><id>8125687</id><snippet>.cfc</snippet></ROW><ROW><id>8125687</id><snippet>&lt;cffunction name="func"&gt;
    &lt;cfloop item="a" collection=#Arguments#&gt;
        &lt;cfoutput&gt;#Arguments[a]# is a quality argument&lt;/cfoutput&gt;
    &lt;/cfloop&gt;
&lt;/cffunction&gt;
</snippet></ROW><ROW><id>8125687</id><snippet>a</snippet></ROW><ROW><id>8125687</id><snippet>&lt;cffunction name="func"&gt;
    &lt;cfloop index="a" array=#Arguments#&gt;
        &lt;cfoutput&gt;#a# is a quality argument&lt;/cfoutput&gt;
    &lt;/cfloop&gt;
&lt;/cffunction&gt;
</snippet></ROW><ROW><id>8125687</id><snippet>function func()
{
    loop index="a" array=Arguments
    {
        WriteOutput(a &amp; 'is a quality argument');
    }
}
</snippet></ROW><ROW><id>8125708</id><snippet>import csv
import re

data = [ ['9-1', '9-2', '9-3'] ]


def quoteCsvData(data):
    for x, row in enumerate(data):
        for y, item in enumerate(row):
             if data[x][y] != '':
                 data[x][y] = r'="' + data[x][y] + r'"'
    return data

def unquoteCsvData(data):
    for x, row in enumerate(data):
        for y, item in enumerate(row):
            if data[x][y] != '':
                m = re.match(r'="([^"]*)"',data[x][y])
                if m:
                    data[x][y] =  m.group(1)
    return data


fd = open('test2.csv', 'wb')
data = quoteCsvData(data)
try:
    writer = csv.writer(fd, delimiter=',',
                            quotechar='|', 
                            quoting=csv.QUOTE_NONE, 
                            escapechar='\\')
    writer.writerows(data)

finally:
    fd.close()

fd = open('test2.csv', 'rb')
try:
    reader = csv.reader(fd, delimiter=',', 
                            quotechar='|', 
                            quoting=csv.QUOTE_NONE, 
                            escapechar='\\')
    data = []
    for row in reader:
        data.append(row)

finally:
    fd.close()

data = unquoteCsvData(data)

print data
</snippet></ROW><ROW><id>8125708</id><snippet>=""</snippet></ROW><ROW><id>8125791</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; arr = numpy.zeros((6,6), numpy.bool_)
&gt;&gt;&gt; arr[2,3] = True
&gt;&gt;&gt; arr[5,1] = True
&gt;&gt;&gt; numpy.where(arr)
(array([2, 5]), array([3, 1]))
</snippet></ROW><ROW><id>8125791</id><snippet>&gt;&gt;&gt; numpy.array(numpy.where(arr)).T
array([[2, 3],
       [5, 1]])
</snippet></ROW><ROW><id>8125901</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>8125901</id><snippet>reverse</snippet></ROW><ROW><id>8125901</id><snippet>return HttpResponseRedirect(reverse("myview", kwargs={"firstid": 3, 
    "secondid": 3}))
</snippet></ROW><ROW><id>8126070</id><snippet>__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>iter()</snippet></ROW><ROW><id>8126070</id><snippet>__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>iter()</snippet></ROW><ROW><id>8126070</id><snippet>a.__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>a.__iter__().__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>a.__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>a.__iter__().__iter__()</snippet></ROW><ROW><id>8126070</id><snippet>a = ['a', 'b', 'c']
i = iter(a)    # a.__iter__()
j = iter(i)    # i.__iter__() which is a.__iter__().__iter__()
print i is j   # True, they're the same object
</snippet></ROW><ROW><id>8126330</id><snippet>ids</snippet></ROW><ROW><id>8126330</id><snippet>print counter, "videos remaining"
counter -= 1
</snippet></ROW><ROW><id>8126357</id><snippet>from pylab import *

# The data
xActA = array([0, 1, 2, 3, 4, 5, 6, 129, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
    18, 147, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 
    39, 40, 7, 45, 46, 49, 50, 52, 53, 183, 59, 63, 65, 69, 70, 72, 73, 55, 77,
    78, 84, 85, 43, 215, 88, 100, 94, 131, 167, 19, 375, 122, 125, 149])
yActA = array([1212, 822, 194, 94, 61, 44, 24, 1, 26, 20, 11, 16, 10, 8, 5, 8, 
    5, 5, 3, 1, 4, 4, 5, 3, 2, 3, 4, 3, 1, 2, 2, 3, 2, 1, 2, 2, 2, 2, 31, 2, 1,
    1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
    1, 1, 1, 1])

xActQ = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 
    19, 20, 21, 22, 23, 24, 25, 29, 36, 40, 45, 48, 50, 55, 67, 124])
yActQ = array([204, 242, 150, 50, 49, 27, 5, 9, 4, 2, 6, 3, 2, 8, 4, 5, 1, 3, 
    3, 1, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])

# The plots
close('all')
f1 = figure()
ax1 = scatter(xActA, yActA, color='blue', s=20, label='Answers', marker='o')
ax2 = scatter(xActQ, yActQ, color='black', s=20, label='Questions', marker='o')
xscale('symlog')
yscale('symlog')
xlim([0, 1e3])
ylim([0, 1.5e3])
title('User activity')
xlabel('Number of posts')
ylabel('Number of users')
legend()
f1.show()
f1.savefig('figure7_test.png')
</snippet></ROW><ROW><id>8126901</id><snippet>&lt;browser type="content"&gt;</snippet></ROW><ROW><id>8126901</id><snippet>browser.addProgressListener()</snippet></ROW><ROW><id>8126901</id><snippet>onStateChange</snippet></ROW><ROW><id>8126901</id><snippet>aFlag</snippet></ROW><ROW><id>8126901</id><snippet>STATE_IS_REQUEST</snippet></ROW><ROW><id>8126901</id><snippet>aRequest.QueryInterface(Components.interfaces.nsIChannel).URI.spec</snippet></ROW><ROW><id>8126901</id><snippet>aFlag</snippet></ROW><ROW><id>8126901</id><snippet>STATE_STOP</snippet></ROW><ROW><id>8126901</id><snippet>aRequest.QueryInterface(Components.interfaces.nsIHttpChannel).getResponseHeader("Set-Cookie")</snippet></ROW><ROW><id>8126901</id><snippet>browser.loadURI()</snippet></ROW><ROW><id>8126909</id><snippet>t = [[0] * 4 for i in xrange(10000)]
</snippet></ROW><ROW><id>8126909</id><snippet>xrange</snippet></ROW><ROW><id>8126909</id><snippet>range</snippet></ROW><ROW><id>8127045</id><snippet>n1</snippet></ROW><ROW><id>8127045</id><snippet>e1</snippet></ROW><ROW><id>8127045</id><snippet>element &lt;= e1</snippet></ROW><ROW><id>8127045</id><snippet>getLowerRange(list,n):
  e &lt;- select(list,n) 
  result &lt;- []
  for each element in list:
     if element &lt;= e:
         result.append(element)
  return result
</snippet></ROW><ROW><id>8127045</id><snippet>O(n)</snippet></ROW><ROW><id>8127594</id><snippet>init_dictionary</snippet></ROW><ROW><id>8127594</id><snippet>main()</snippet></ROW><ROW><id>8127594</id><snippet>init_dictionary</snippet></ROW><ROW><id>8127594</id><snippet>sunspot_dict = {}</snippet></ROW><ROW><id>8127594</id><snippet>main()</snippet></ROW><ROW><id>8127594</id><snippet>sunspot_dict</snippet></ROW><ROW><id>8127647</id><snippet>browser.webview.setWindowTitle('the title')
</snippet></ROW><ROW><id>8127697</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches

np.random.seed(101)
x = np.random.random(100)
y = np.random.random(100)

fig = plt.figure()
ax = fig.add_subplot(111)
imForEngland = ax.scatter(x,y)
fig.savefig('beforeclip.png')
imForWales = ax.scatter(x,y)
england = patches.Circle((.75,.75),radius=.25,fc='none')
wales = patches.Circle((.25,.25),radius=.25,fc='none')
ax.add_patch(england)
ax.add_patch(wales)
imForEngland.set_clip_path(england)
imForWales.set_clip_path(wales)

fig.savefig('afterclip.png')
</snippet></ROW><ROW><id>8127747</id><snippet>import csv
reader = csv.reader(open('myfile.csv', 'rb'), dialect='excel-tab')
fieldnames = ['Name','Class']
writer = csv.DictWriter(open('myfile.csv', 'rb'), fieldnames, restval='', extrasaction='ignore', dialect='excel-tab')

for row in reader:
    newrow = {}
    for field in row:
        key = field.split(' ', 1)[0]
        newrow[key] = field
    writer.writerow(newrow)
</snippet></ROW><ROW><id>8127747</id><snippet>restval</snippet></ROW><ROW><id>8127747</id><snippet>extrasaction</snippet></ROW><ROW><id>8127777</id><snippet>yaml.load()</snippet></ROW><ROW><id>8127777</id><snippet>import yaml
with open('tree.yaml', 'r') as f:
    doc = yaml.load(f)
</snippet></ROW><ROW><id>8127777</id><snippet>txt = doc["treeroot"]["branch1"]
print txt
"branch1 text"
</snippet></ROW><ROW><id>8127777</id><snippet>branch 1</snippet></ROW><ROW><id>8127777</id><snippet>treeroot</snippet></ROW><ROW><id>8127962</id><snippet>Thread</snippet></ROW><ROW><id>8127962</id><snippet>threading</snippet></ROW><ROW><id>8127962</id><snippet>threading.join()</snippet></ROW><ROW><id>8128033</id><snippet>import sys,new,os
p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('flufl',))
ie = os.path.exists(os.path.join(p,'__init__.py'))
m = not ie and sys.modules.setdefault('flufl',new.module('flufl'))
mp = (m or []) and m.__dict__.setdefault('__path__',[])
(p not in mp) and mp.append(p)
</snippet></ROW><ROW><id>8128033</id><snippet>&gt;&gt;&gt; import new
&gt;&gt;&gt; new.module('foo')
&lt;module 'foo' (built-in)&gt;
</snippet></ROW><ROW><id>8128429</id><snippet>&gt;&gt;&gt; userdata = (('dlazarov',), ('ant1',))
&gt;&gt;&gt; [x[0] for x in userdata]
['dlazarov', 'ant1']
</snippet></ROW><ROW><id>8128734</id><snippet>PyObject* Allocator()
{
    void* buff = my_alloc_function(char, size);
    Py_buffer pybuffer;
    int res = PyBuffer_FillInfo(&amp;pybuffer, 0, buff, size, false, PyBUF_CONTIG);
    if (res == -1)
        return NULL;
    return PyMemoryView_FromBuffer(&amp;pybuffer);
}

void Destructor()(object pyMemoryView_object) const 
{
    Py_buffer* py_buffer = PyMemoryView_GET_BUFFER(pyMemoryView_object.ptr());
    my_free_function(py_buffer-&gt;buf);
    PyBuffer_Release(py_buffer);
}
</snippet></ROW><ROW><id>8128734</id><snippet>PyObject*</snippet></ROW><ROW><id>8128734</id><snippet>object</snippet></ROW><ROW><id>8129031</id><snippet>os.makedirs()</snippet></ROW><ROW><id>8129031</id><snippet>if not os.path.exists(dirname):
    os.makedirs(dirname)
</snippet></ROW><ROW><id>8129031</id><snippet>FileHandler</snippet></ROW><ROW><id>8129031</id><snippet>os.makedirs()</snippet></ROW><ROW><id>8129172</id><snippet>class Item(object):

  def __init__(self, product_id = None, name = None, description = None, price = None)
      ... implementation ...
</snippet></ROW><ROW><id>8129172</id><snippet>None</snippet></ROW><ROW><id>8129172</id><snippet>item1 = Item(product_id = 4, price = 13) # use the field name!
item2 = Item(name = "hammer", description = "used to belong to Thor")
</snippet></ROW><ROW><id>8129172</id><snippet>item = Item(otherItem)</snippet></ROW><ROW><id>8129172</id><snippet>*args</snippet></ROW><ROW><id>8129172</id><snippet>**kwargs</snippet></ROW><ROW><id>8129279</id><snippet> for i in range(100):
     locals()['A%i'%i] = i
</snippet></ROW><ROW><id>8129279</id><snippet>locals()</snippet></ROW><ROW><id>8129279</id><snippet>locals()</snippet></ROW><ROW><id>8129279</id><snippet>locals()</snippet></ROW><ROW><id>8129279</id><snippet>globals()</snippet></ROW><ROW><id>8129279</id><snippet>locals()</snippet></ROW><ROW><id>8129279</id><snippet>locals()</snippet></ROW><ROW><id>8129405</id><snippet>events</snippet></ROW><ROW><id>8129405</id><snippet>('end',)</snippet></ROW><ROW><id>8129405</id><snippet>('start',)</snippet></ROW><ROW><id>8129405</id><snippet>context=etree.iterparse(filehandle, events=('end',), tag=mainElement)
</snippet></ROW><ROW><id>8129405</id><snippet>parseXml</snippet></ROW><ROW><id>8129405</id><snippet>start</snippet></ROW><ROW><id>8129405</id><snippet>parseXml</snippet></ROW><ROW><id>8129405</id><snippet>end</snippet></ROW><ROW><id>8129405</id><snippet>def fast_iter(context, func, *args, **kwargs):
    # http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
    # Author: Liza Daly
    for event, elem in context:
        func(elem, *args, **kwargs)
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]
    del context

def parseXml(element,attribList,elemList): 
    for child in element:
       if child.tag in elemList:
           print len(child) #for a given child,the len should be constant
           #do things   

context=etree.iterparse(filehandle, events=('end',), tag=mainElement)   
fast_iter(context, parseXml, attribList, elemList)
</snippet></ROW><ROW><id>8129429</id><snippet>class ProjectType(object):
    build_cmd = ""
    markers = []

    @classmethod
    def make_project(cls, path):
        prj_types = (PythonProject, AutoconfProject, MakefileOnly, ProjectType)
        for p in prj_types:
            markers = p.markers
            if any(path.isfile(path.join(path, x)) for x in markers):
                return p()

class PythonProject(ProjectType):
    build_cmd = "python setup.py develop --user"
    markers = ['setup.py']

class AutoconfProject(ProjectType):
    #TODO: there should be also a way to configure it
    build_cmd = "./configure &amp;&amp; make -j3"
    markers = ['configure.in', 'configure.ac', 'makefile.am']

class MakefileOnly(ProjectType):
    build_cmd = "make"
    markers = ['Makefile']
</snippet></ROW><ROW><id>8129661</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; s = re.compile('\d+')
&gt;&gt;&gt;
&gt;&gt;&gt; s2 = 'a123'
&gt;&gt;&gt;
&gt;&gt;&gt; s.match(s2)
&gt;&gt;&gt; s.search(s2)
&lt;_sre.SRE_Match object at 0x01E29AD8&gt;
</snippet></ROW><ROW><id>8129905</id><snippet>DataInputStream in;
char[] handle = new char[6]; in.readFully(handle);
byte messageVersion = in.readByte();
byte source = in.readByte();
int startTime = in.readInt();
byte dataFormat = in.readByte();
byte sampleCount = in.readByte();
int sampleInterval = in.readInt();
short physDim = in.readShort();
int digMin = in.readInt();
int digMax = in.readInt();
float physMin = in.readFloat();
float physMax = in.readFloat();
int freq = in.readInt();
</snippet></ROW><ROW><id>8130112</id><snippet>import argparse

parser = argparse.ArgumentParser(description="A dummy program")
parser.add_argument('positional', nargs="+", help="A positional argument")
parser.add_argument('--optional', help="An optional argument")

args = parser.parse_args()
</snippet></ROW><ROW><id>8130112</id><snippet>usage: script.py [-h] [--optional OPTIONAL] positional [positional ...]
script.py: error: too few arguments
</snippet></ROW><ROW><id>8130173</id><snippet>~ $ python -m timeit --setup 'var=2' 'var in [2, 5, 9]'
10000000 loops, best of 3: 0.0629 usec per loop
~ $ python -m timeit --setup 'var=5' 'var in [2, 5, 9]'
10000000 loops, best of 3: 0.0946 usec per loop
~ $ python -m timeit --setup 'var=9' 'var in [2, 5, 9]'
10000000 loops, best of 3: 0.117 usec per loop

~ $ python -m timeit --setup 'var=2' 'var == 2 or var==5 or var == 9'
10000000 loops, best of 3: 0.0583 usec per loop
~ $ python -m timeit --setup 'var=5' 'var == 2 or var==5 or var == 9'
10000000 loops, best of 3: 0.104 usec per loop
~ $ python -m timeit --setup 'var=9' 'var == 2 or var==5 or var == 9'
10000000 loops, best of 3: 0.127 usec per loop
</snippet></ROW><ROW><id>8130173</id><snippet>def f(x):
    var = random.randint(1, 10)
    # First version
    if var in [2, 5, 9]:
      print "First: 2, 5 or 9"

    # Second version
    if var == 2 or number == 5 or number == 9:
      print "Second: 2, 5 or 9"

import dis
dis.dis(f)
</snippet></ROW><ROW><id>8130173</id><snippet>if var in {2, 5, 9}:
    ...
</snippet></ROW><ROW><id>8130173</id><snippet>~ $ python -m timeit --setup 'var=2' 'var in {2, 5, 9}'
1000000 loops, best of 3: 0.276 usec per loop
~ $ python -m timeit --setup 'var=5' 'var in {2, 5, 9}'
1000000 loops, best of 3: 0.281 usec per loop
~ $ python -m timeit --setup 'var=9' 'var in {2, 5, 9}'
1000000 loops, best of 3: 0.304 usec per loop
</snippet></ROW><ROW><id>8130364</id><snippet>?</snippet></ROW><ROW><id>8130364</id><snippet>key = 'field_a'
value = '01/01/2011'
#self.testac = '010101010'

sql = '''UPDATE data_base SET %(key)s=? WHERE atnumber = ?''' % dict(key=key)
self.qry.execute(sql, (value, self.testac))
</snippet></ROW><ROW><id>8130393</id><snippet>return false</snippet></ROW><ROW><id>8130393</id><snippet>onsubmit="writeToStorage()"
</snippet></ROW><ROW><id>8130393</id><snippet>onsubmit="return writeToStorage();"
</snippet></ROW><ROW><id>8130559</id><snippet>imp.load_source</snippet></ROW><ROW><id>8130559</id><snippet>reload</snippet></ROW><ROW><id>8130559</id><snippet>modhandle = imp.load_source(modname, modfile)
</snippet></ROW><ROW><id>8130983</id><snippet>lxml</snippet></ROW><ROW><id>8130983</id><snippet>//c[text()='j']</snippet></ROW><ROW><id>8130983</id><snippet>import lxml.etree as et

doc = '''
&lt;a&gt;
   &lt;b&gt;
       &lt;c&gt;h&lt;/c&gt;
   &lt;/b&gt;
   &lt;b&gt;
       &lt;c&gt;j&lt;/c&gt;
   &lt;/b&gt;
&lt;/a&gt;
'''

tree = et.fromstring(doc)

tree.xpath("/a/b/c[text()='j']")
</snippet></ROW><ROW><id>8130991</id><snippet>&lt;document&gt;</snippet></ROW><ROW><id>8130991</id><snippet>.*?</snippet></ROW><ROW><id>8130991</id><snippet>&lt;document docid=(\d+)&gt;(.*?)&lt;/document&gt;
</snippet></ROW><ROW><id>8131029</id><snippet>&gt;&gt;&gt; p = Popen(["ls", "-hal"]);sleep (5);print "Word"
total 12M
drwxr-xr-x 51 ishpeck users   4.0K Nov 14 19:58 .
drwxr-xr-x  7 root    root    4.0K Jun 25 04:30 ..
drwxr-xr-x  2 ishpeck users   4.0K Jun  6 00:46 abcde.b00b030d
drwx------  2 ishpeck users   4.0K Nov 13 13:57 .AbiSuite
drwx------  3 ishpeck users   4.0K May 29 20:14 .adobe
-rw-r--r--  1 ishpeck archive   55 Jun 29 07:18 .apvlvinfo
drwxr-xr-x  2 ishpeck archive 4.0K Jul 28 23:16 .archive
-rw-r--r--  1 ishpeck archive  180 Nov 14 18:23 .aspell.en.prepl
-rw-r--r--  1 ishpeck archive  250 Nov 14 18:23 .aspell.en.pws
-rw-r--r--  1 ishpeck users    152 Jun  6 00:45 .asunder
-rw-------  1 ishpeck users   9.0K Nov 14 20:06 .bash_history
-rw-r--r--  1 ishpeck users   2.2K Oct 22 08:54 .bashrc
drwx------  3 ishpeck users   4.0K Sep 28 08:23 .bitcoin
drwx------  3 ishpeck archive 4.0K Jul 30 22:44 .Broken Rules
drwx------ 10 ishpeck users   4.0K Aug 16 16:37 .cache
drwx------  2 ishpeck users   4.0K May 30 03:42 .cmus
drwxr-xr-x 11 ishpeck users   4.0K Nov  6 16:42 .codelite
drwx------ 23 ishpeck users   4.0K Sep 22 00:18 .config
-rw-r--r--  1 ishpeck users   2.6K Jun  5 17:21 .conkyrc
drwx------  3 ishpeck users   4.0K May 28 08:29 .dbus
drwx------ 13 ishpeck users   4.0K Sep 27 21:25 dl
drwxr-xr-x 29 ishpeck users   4.0K Nov 12 00:00 docs
-rw-r--r--  1 ishpeck archive 1000 Nov 11 06:26 .emacs
-rw-r--r--  1 ishpeck archive 1000 Nov 11 06:25 .emacs~
-rw-r--r--  1 ishpeck archive  511 Nov 10 11:14 .emacs-backup
drwx------  6 ishpeck users   4.0K Nov 10 11:22 .emacs.d
drwxr-xr-x  3 ishpeck archive 4.0K Jun 17 04:26 .Eterm
-rw-r--r--  1 ishpeck users    105 Nov 14 20:00 .fehbg
-rw-------  1 ishpeck archive    9 Nov 13 22:10 .fetchmail.pid
-rw-------  1 ishpeck archive  323 Oct 30 08:10 .fetchmailrc
drwxr-xr-x  2 ishpeck users   4.0K Nov  2 00:43 .fontconfig
drwx------  4 ishpeck users   4.0K Nov 13 22:10 .gconf
drwx------  2 ishpeck users   4.0K Oct  1 20:50 .gconfd
-rw-r--r--  1 ishpeck archive 127K Nov  7 10:19 geany-colors.tar.gz
drwxr-xr-x  2 ishpeck users   4.0K May 31 05:43 .ghc
drwxr-xr-x 22 ishpeck archive 4.0K Nov 14 18:24 .gimp-2.6
-rw-r--r--  1 ishpeck users     75 May 31 12:59 .gitconfig
-rw-r--r--  1 ishpeck archive  893 Oct 12 20:03 .gitk
drwx------  3 ishpeck archive 4.0K Jul 30 19:46 .gnome
drwx------  3 ishpeck users   4.0K Jul  1 13:37 .gnome2
drwx------  2 ishpeck archive 4.0K Jul  1 13:37 .gnome2_private
drwxr-xr-x  2 ishpeck users   4.0K Nov  2 19:05 .gstreamer-0.10
-rw-------  1 ishpeck users    234 Nov  7 20:36 .gtk-bookmarks
-rw-r--r--  1 ishpeck users    164 Jun  1 04:10 .gtkrc-2.0
drwx------  2 ishpeck users   4.0K May 30 03:35 .gvfs
drwxr-xr-x  3 ishpeck users   4.0K May 28 15:51 .icons
drwxr-xr-x  2 ishpeck archive 4.0K Aug 11 06:59 .idlerc
drwx------  2 ishpeck archive 4.0K Jul 16 19:36 .irssi
-rw-------  1 ishpeck users    846 Nov 11 20:09 .lesshst
drwx------  3 ishpeck users   4.0K Nov 11 22:35 .liferea_1.6
drwx------  3 ishpeck users   4.0K May 28 06:12 .local
-rw-r--r--  1 ishpeck users    842 Jun  5 16:34 lynx_bookmarks.html
-rw-------  1 ishpeck users   3.3K Jun 11 04:14 Lynx.trace
drwx------  3 ishpeck users   4.0K May 29 20:14 .macromedia
drwx------  2 ishpeck users   4.0K Sep  2 19:42 Mail
drwxr-xr-x  5 ishpeck users   4.0K Nov  7 07:47 media
-rw-r--r--  1 ishpeck archive 3.8K Jul 16 22:56 .mrxvtrc
drwxr-xr-x  2 ishpeck archive 4.0K Sep 14 08:12 .mutt
-rw-r--r--  1 ishpeck archive 3.3K Oct 14 06:32 .muttrc
-rw-r--r--  1 ishpeck archive 1.3K Jul 27 22:36 .nvidia-settings-rc
drwx------  3 ishpeck users   4.0K May 28 08:35 .pki
-rw-------  1 ishpeck archive    0 Nov  9 07:24 postponed
drwxr-xr-x 12 ishpeck users   4.0K Sep 28 08:08 project
drwx------  2 ishpeck archive 4.0K Nov 14 18:07 .pulse
-rw-------  1 ishpeck users    256 May 31 03:52 .pulse-cookie
drwx------  6 ishpeck users   4.0K Nov 14 20:15 .purple
-rw-r--r--  1 ishpeck users    12K Nov  2 07:06 .pypanelrc
drwxr-xr-x  3 ishpeck users   4.0K Jun 11 02:29 .q3a
-rw-r--r--  1 ishpeck archive 1.9K Aug 23 17:11 .recently-used
drwxr-xr-x  2 ishpeck users   4.0K Nov  2 07:55 .sbin
-    rw-------  1 ishpeck archive  11M Nov 14 19:52 sent
-rw-r--r--  1 ishpeck archive   61 Jul  2 21:44 .signature
drwxr-xr-x  3 ishpeck archive 4.0K Nov  5 07:43 .slime
drwx------  2 ishpeck users   4.0K Oct 31 22:46 .ssh
drwxr-xr-x  3 ishpeck archive 4.0K Aug  6 16:49 .steelstorm
drwxr-xr-x  3 ishpeck archive 4.0K Jul 28 23:16 .subversion
-rw-r--r--  1 ishpeck archive  273 Jun 18 02:47 .synergy.conf
drwxr-xr-x  9 ishpeck users   4.0K Jun  1 04:10 .themes
drwx------  3 ishpeck users   4.0K May 28 09:39 .thumbnails
drwxr-xr-x  2 ishpeck users   4.0K Oct 25 06:36 .vim
-rw-------  1 ishpeck archive  19K Nov 14 19:52 .viminfo
-rw-r--r--  1 ishpeck users     65 Jun 17 22:30 .vimrc
drwxr-xr-x  2 ishpeck archive 4.0K Nov 13 23:26 .VirtualBox
drwxr-xr-x  3 ishpeck archive 4.0K Jul 30 19:52 .vvvvvv
-rw-------  1 ishpeck archive  101 Aug 17 05:51 .Xauthority
-rw-r--r--  1 ishpeck archive  134 Aug 19 06:32 .Xdefaults
-rw-r--r--  1 ishpeck users    120 Sep 26 21:19 .xinitrc
-rw-r--r--  1 ishpeck archive 7.6K Oct 13 07:23 .xscreensaver
Word
</snippet></ROW><ROW><id>8131174</id><snippet>C['myCookie'] = pickle.dumps(arr)
arr_restored = pickle.loads(C['myCookie'].value)
</snippet></ROW><ROW><id>8131296</id><snippet>def recordsFromFile(inputFile):
    record = ''
    terminator = ' ' * 20
    for line in inputFile:
        if line.startswith('1') and record.endswith(terminator):
            yield record
            record = ''
        record += line
    yield record

inputFile = open('test.txt')
for record in recordsFromFile(inputFile):
    # Do stuff
</snippet></ROW><ROW><id>8131296</id><snippet>file</snippet></ROW><ROW><id>8131578</id><snippet>?</snippet></ROW><ROW><id>8131578</id><snippet>import re

htmlML = '&lt;a href=/foo.php?XID=123 &gt;&lt;font color=#000000&gt;&lt;b&gt;user&lt;/b&gt;'
patMemberID = re.compile('&lt;a href=/foo.php\?XID=(\d*) &gt;&lt;font color=#000000&gt;&lt;b&gt;user&lt;/b&gt;')

searchMemberID = re.findall(patMemberID, htmlML)
print len(searchMemberID)

for i in searchMemberID:
    print (i)
</snippet></ROW><ROW><id>8131578</id><snippet>123</snippet></ROW><ROW><id>8131578</id><snippet>(.*?)</snippet></ROW><ROW><id>8131578</id><snippet>some string</snippet></ROW><ROW><id>8131578</id><snippet>?</snippet></ROW><ROW><id>8131626</id><snippet>l2 = [item.strip('\t') for item in l1]
</snippet></ROW><ROW><id>8131756</id><snippet>write</snippet></ROW><ROW><id>8131756</id><snippet>'rb'</snippet></ROW><ROW><id>8131756</id><snippet>real(8), allocatable :: xxx(:)</snippet></ROW><ROW><id>8131756</id><snippet>write(filenum) (xxx(i),i = 1,imax)
</snippet></ROW><ROW><id>8131953</id><snippet>from pyramid.config import Configurator
from pyramid.httpexceptions import HTTPFound
from paste.httpserver import serve

config = Configurator()

config.add_route('redirect', '/{arg}')

def redirect_view(request):
    dst = 'http://mydomain2.com/register.php?id={id}&amp;from={host}'
    args = {
        'id': request.matchdict['arg'],
        'host': request.host,
    }
    return HTTPFound(dst.format(**args))
config.add_view(redirect_view, route_name='redirect')

serve(config.make_wsgi_app(), host='0.0.0.0', port=80)
</snippet></ROW><ROW><id>8131960</id><snippet>class C:
    def __init__(self, format):
        self.format = format

    def process(formatting=None):
        formatting = formatting or self.format
        print formatting
</snippet></ROW><ROW><id>8131960</id><snippet>or self.format</snippet></ROW><ROW><id>8131960</id><snippet>formatting</snippet></ROW><ROW><id>8131960</id><snippet>None</snippet></ROW><ROW><id>8131960</id><snippet>def mk_default():
    print "mk_default has been called!"

def myfun(foo=mk_default()):
    print "myfun has been called."

print "about to test functions"
myfun("testing")
myfun("testing again")
</snippet></ROW><ROW><id>8131960</id><snippet>mk_default has been called!
about to test functions
myfun has been called.
myfun has been called.
</snippet></ROW><ROW><id>8132373</id><snippet>&gt;&gt;&gt; dict([(k, data[ mappings[k][0]:mappings[k][1] ]) for k in mappings])
{'color': 'Blue', 'job': 'Chemist', 'name': 'John'}
</snippet></ROW><ROW><id>8132373</id><snippet>&gt;&gt;&gt; dict(((k, data[ mappings[k][0]:mappings[k][1] ]) for k in mappings))
{'color': 'Blue', 'job': 'Chemist', 'name': 'John'}
</snippet></ROW><ROW><id>8132753</id><snippet>start-ecl1: c:\eclipse\eclipse.exe -vm &lt;jdk&gt; -data ws1
start-ecl2: c:\eclipse\eclipse.exe -vm &lt;jdk&gt; -data ws2
</snippet></ROW><ROW><id>8132753</id><snippet>Open in new window</snippet></ROW><ROW><id>8132978</id><snippet>subprocess</snippet></ROW><ROW><id>8133001</id><snippet>temp = temp...</snippet></ROW><ROW><id>8133001</id><snippet>long_list = list(long_sentence)
for end, repstr in indices:
    long_list[end-len(repstr):end] = ['.'] * len(repstr)
new_sentence = ''.join(long_list)
</snippet></ROW><ROW><id>8133425</id><snippet>class classonlymethod(classmethod):
    def __get__(self, instance, owner):
        if instance is not None:
            raise AttributeError("This method is available only on the view class.")
        return super(classonlymethod, self).__get__(instance, owner)
</snippet></ROW><ROW><id>8133425</id><snippet>classmethod</snippet></ROW><ROW><id>8133425</id><snippet>classonlymethod</snippet></ROW><ROW><id>8133564</id><snippet>class GladeTest:

    def __init__(self):

        #Set the Glade file
        filename = "gui.glade"
        self.builder = gtk.Builder()
        self.builder.add_from_file(filename)
        self.builder.connect_signals(self)

        #Create our dictionay and connect it
        dic = { "btnSubmit_clicked" : self.btnSubmit_clicked,
        "chkboxDropbox_toggled" : self.chkboxDropbox_toggled,
        "MainWindow_destroy" : gtk.main_quit }

    def btnSubmit_clicked(self, widget):
        chkbt_chrome = self.builder.get_object("chkboxChrome")
        print "ACTIVE--",chkbt_chrome.get_active()
        # do same for rest of the check buttons

        self.button = gtk.ToggleButton("chkboxDropbox_toggled") # if used for check box status then there is no need for this button.

        status = self.button.get_active()
        print status

    def chkboxDropbox_toggled(self, widget):
        print ""


if __name__ == "__main__":
    hwg = GladeTest()
    gtk.main()
</snippet></ROW><ROW><id>8133774</id><snippet>SELECT COLUMN_NAME, COLUMN_TYPE
  FROM INFORMATION_SCHEMA.COLUMNS
  WHERE table_name = 'tbl_name'
</snippet></ROW><ROW><id>8134546</id><snippet>class BaseClass(object):
  def __init__(self, mark=None, name=None):   # you're using named parameters, declare them as named one.
    self.mark = mark
    self.name = name

class DerivedClass(BaseClass):   # don't forget to declare inheritance
  def __init__(self, rank, *args, **kwargs):    # in args, kwargs, there will be all parameters you don't care, but needed for baseClass
    super(DerivedClass, self).__init__(*args, **kwargs)
    self.rank = rank 

b1 = derivedClass(name='Jibin')
print b1.name
</snippet></ROW><ROW><id>8134764</id><snippet>im.convert('L')
</snippet></ROW><ROW><id>8134764</id><snippet>im.mode = 'I'
im = im.point(lambda i:i*(1./256)).convert('L').filter(ImageFilter.BLUR)
</snippet></ROW><ROW><id>8135501</id><snippet>Tkinter.Text</snippet></ROW><ROW><id>8135501</id><snippet>subprocess</snippet></ROW><ROW><id>8135501</id><snippet>t = Tkinter.Text(root)
while some_condition:
    s = p.readline()          # get subprocess output
    t.insert(END, s)
</snippet></ROW><ROW><id>8135501</id><snippet>Tkinter.Scrollbar</snippet></ROW><ROW><id>8135501</id><snippet>Text.see()</snippet></ROW><ROW><id>8135902</id><snippet>droid.eventWait()
</snippet></ROW><ROW><id>8135902</id><snippet>droid.eventWaitFor()
</snippet></ROW><ROW><id>8135921</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8135921</id><snippet>sys.path[0]</snippet></ROW><ROW><id>8135921</id><snippet>settings</snippet></ROW><ROW><id>8135921</id><snippet>mypackage.mymodule</snippet></ROW><ROW><id>8135921</id><snippet>import settings</snippet></ROW><ROW><id>8136209</id><snippet>close()</snippet></ROW><ROW><id>8136209</id><snippet>logging.shutdown()</snippet></ROW><ROW><id>8136209</id><snippet>atexit</snippet></ROW><ROW><id>8136209</id><snippet>close()</snippet></ROW><ROW><id>8136209</id><snippet>class MyHandler(logging.Handler):

    def close(self):
       # Write XML epilog.
       # ...
       super(MyHandler, self).close()
</snippet></ROW><ROW><id>8136371</id><snippet>&gt;&gt;&gt; import psutil
&gt;&gt;&gt; [p for p in psutil.get_process_list() if p.name=='python.exe']
[&lt;psutil.Process(pid=2576, name='python.exe') at 21324176&gt;]
</snippet></ROW><ROW><id>8136622</id><snippet>double(double(double))(inc)(5)
</snippet></ROW><ROW><id>8136622</id><snippet>inc</snippet></ROW><ROW><id>8136622</id><snippet>inc</snippet></ROW><ROW><id>8136622</id><snippet>(define quadruple (double double))
(define hexadecuple (double quadruple)) ; hexadecuple may not actually be a word... 
(define add16 (hexadecuple inc))
(add16 5)
</snippet></ROW><ROW><id>8136622</id><snippet>add2 = double(inc)
add4 = double(add2)
add8 = double(add4)
add8(5)
</snippet></ROW><ROW><id>8136831</id><snippet>urllib.unquote(</snippet></ROW><ROW><id>8136831</id><snippet>)</snippet></ROW><ROW><id>8136831</id><snippet>%xx</snippet></ROW><ROW><id>8136831</id><snippet>unquote('/%7Econnolly/')</snippet></ROW><ROW><id>8136831</id><snippet>'/~connolly/'</snippet></ROW><ROW><id>8137015</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; oldhook = sys.displayhook
&gt;&gt;&gt; sys.displayhook = your_module.DisplayHook(oldhook)
</snippet></ROW><ROW><id>8137015</id><snippet>print obj</snippet></ROW><ROW><id>8137015</id><snippet>dict</snippet></ROW><ROW><id>8137476</id><snippet>def example():
    pass

x = example # x is now a reference to the example 
            # method. no invocation takes place
            # but later the method can be called as
            # x()
</snippet></ROW><ROW><id>8137476</id><snippet>x = example() # calls example and assigns the return value to x
</snippet></ROW><ROW><id>8137476</id><snippet>x = method(:example)</snippet></ROW><ROW><id>8137476</id><snippet>x.call</snippet></ROW><ROW><id>8137713</id><snippet>redirectTo</snippet></ROW><ROW><id>8137713</id><snippet>    from twisted.web.util import redirectTo

    def render_GET(self, request):
        player = getPlayer(request)
        if player.loggedIn():
            return redirectTo("play")
        else:
            return redirectTo("login")
</snippet></ROW><ROW><id>8137826</id><snippet>__dict__</snippet></ROW><ROW><id>8137826</id><snippet>def getAttributes(clazz):
    return {name: attr for name, attr in clazz.__dict__.items()
            if not name.startswith("__") 
            and not callable(attr)
            and not type(attr) is staticmethod}
</snippet></ROW><ROW><id>8137908</id><snippet>datetime.datetime</snippet></ROW><ROW><id>8137908</id><snippet>import datetime as dt
dates=[]
with open('holiday.txt','r') as f:
    dates=[dt.datetime.strptime(line.strip(),'%m/%d/%y')
           for line in f if line.strip()]

print(dates)
</snippet></ROW><ROW><id>8138098</id><snippet>#!/usr/bin/env python3
from gi.repository import Gtk,Gdk, GLib
import threading 
import time

class Gui(Gtk.Window):
  def __init__(self):
      self.Window = Gtk.Window()
      self.Window.set_border_width(8)
      self.Window.set_title("Некий GUI")
      self.Window.connect('destroy', lambda x: self.stop())

      self.outBut = Gtk.Button.new_from_stock(Gtk.STOCK_OK)
      self.outBut.set_size_request(150, 35)
      self.Window.connect('destroy', lambda x: self.stop())
      self.Window.add(self.outBut)

      self.Window.show_all()
      threading.Thread(target=loop_sleep).start()

  def stop(self):
      Gtk.main_quit()

  def passfun(self):
      pass

def loop_sleep():
      i = 1
      while True:
           print(i)
           i = i + 1
           #time.sleep(1)



app = Gui()
GLib.threads_init()
Gdk.threads_init()
Gdk.threads_enter()
Gtk.main()
Gdk.threads_leave()
</snippet></ROW><ROW><id>8138397</id><snippet>&gt;&gt;&gt; print u"Düsseldorf"
Düsseldorf
</snippet></ROW><ROW><id>8138442</id><snippet>stdout</snippet></ROW><ROW><id>8138442</id><snippet>file.read()</snippet></ROW><ROW><id>8138442</id><snippet>output = stdout.read()
</snippet></ROW><ROW><id>8138442</id><snippet>paramiko</snippet></ROW><ROW><id>8138482</id><snippet>from lib.reader import Reader</snippet></ROW><ROW><id>8138482</id><snippet>from reader import Reader</snippet></ROW><ROW><id>8138570</id><snippet>import pipes
...
database + " &lt; " + pipes.quote(filename)
</snippet></ROW><ROW><id>8138570</id><snippet>subprocess</snippet></ROW><ROW><id>8138570</id><snippet>test = subprocess.call(['mysql', '-u', username, '-p', password, database],
    stdin=open(file))
</snippet></ROW><ROW><id>8138598</id><snippet>$.post("POST_URL", $("#form").serialize(),
        function(data){
             alert(data); //data returned from server side
        }, "json");
</snippet></ROW><ROW><id>8138894</id><snippet>def get_a(cls):
    print "Getting value of " + k
</snippet></ROW><ROW><id>8138894</id><snippet>def get_a(cls, k=k):
    print "Getting value of " + k
</snippet></ROW><ROW><id>8138894</id><snippet>k</snippet></ROW><ROW><id>8138894</id><snippet>get_a()</snippet></ROW><ROW><id>8138894</id><snippet>k</snippet></ROW><ROW><id>8139356</id><snippet>q_objects[type] = [Q(**q_dict)]
</snippet></ROW><ROW><id>8139356</id><snippet>q_objects[type] = [Q(**{k: v}) for (k, v) in q_dict.iteritems()]
</snippet></ROW><ROW><id>8139607</id><snippet>reactor.run</snippet></ROW><ROW><id>8139607</id><snippet>reactor.callLater</snippet></ROW><ROW><id>8139607</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>8139790</id><snippet>findall</snippet></ROW><ROW><id>8139790</id><snippet>len(s)</snippet></ROW><ROW><id>8139790</id><snippet>s</snippet></ROW><ROW><id>8139790</id><snippet>out.write('%s:\t%s\n' %(name,len(s)))
</snippet></ROW><ROW><id>8139870</id><snippet>class ReplacableString:
    def __init__(self, base_string):
        self.base_string =base_string

    def replacer(self, to_replace, replacer):
        for i in xrange(len(self.base_string)):
            if to_replace == self.base_string[i:i+len(to_replace)]:
                self.base_string = self.base_string[:i] + replacer + self.base_string[i+len(to_replace):]

    def __str__(self):
        return str(self.base_string)


test_str = ReplacableString("This is eth string")
test_str.replacer("eth", "the")
print test_str

&gt;&gt;&gt; This is the string
</snippet></ROW><ROW><id>8139900</id><snippet>table = soup.find("table", id = "history")
rows = table.findAll('tr')
data = [[td.findChildren(text=True) for td in tr.findAll("td")] for tr in rows]
# data now contains:
[[u'Google', u'07/11/2001'],
 [u'Apple', u'27/08/2001'],
 [u'Microsoft', u'01/11/1991']]

# If the data may contain extraneous whitespace you can clean it up
# Additional processing could also be done - but once you hit much more
# complex than this later maintainers, yourself included, will thank you
# for using a series of for loops that call clearly named functions to perform
# the work.
data = [[u"".join(d).strip() for d in l] for l in data]

# If you want to store it joined as name | company
# then simply follow that up with:
data = [u"|".join(d) for d in data]
</snippet></ROW><ROW><id>8139900</id><snippet>for</snippet></ROW><ROW><id>8139900</id><snippet>[[td.findNext(text=True) for td in tr.findAll("td")] for tr in rows]
</snippet></ROW><ROW><id>8139900</id><snippet>final_list = []
intermediate_list = []

for tr in rows:
    for td in tr.findAll("td")
        intermediate_list.append(td.findNext(text=True))

    final_list.append(intermediate_list)
    intermediate_list = []

data = final_list
</snippet></ROW><ROW><id>8140080</id><snippet>subprocess</snippet></ROW><ROW><id>8140080</id><snippet>subprocess</snippet></ROW><ROW><id>8140116</id><snippet>[[example]] and [[exmaple|text]]</snippet></ROW><ROW><id>8140116</id><snippet>example]] and [[exmaple|tex</snippet></ROW><ROW><id>8140116</id><snippet>\[\[([^\[\]|]*)[^\[\]]*\]\]</snippet></ROW><ROW><id>8140116</id><snippet>\[\[             # Opening [[
   (               # Capture grp 1
     [^\[\]|]*        # Optional chars, NOT open/close brackets, nor |
                      # (this can be changed to required with a + quantifier)
   )               # End grp 1
   [^\[\]]*        # Optional chars, NOT open/close brackets
\]\]             # Closing ]]
</snippet></ROW><ROW><id>8140170</id><snippet>node[]</snippet></ROW><ROW><id>8140170</id><snippet>nodes()</snippet></ROW><ROW><id>8140170</id><snippet>[]</snippet></ROW><ROW><id>8140170</id><snippet>self.b.nodes()[self.r]</snippet></ROW><ROW><id>8140229</id><snippet>clean</snippet></ROW><ROW><id>8140229</id><snippet>form = MyFormClass</snippet></ROW><ROW><id>8140529</id><snippet>document_node[0]</snippet></ROW><ROW><id>8140529</id><snippet>title</snippet></ROW><ROW><id>8140535</id><snippet>self</snippet></ROW><ROW><id>8141055</id><snippet>*args</snippet></ROW><ROW><id>8141055</id><snippet>**kwargs</snippet></ROW><ROW><id>8141186</id><snippet>import csv, itertools, operator
with open('data.csv', 'rb') as infile:
    results = []
    # uses the header row to get field names, each row will be a dict
    rows = csv.DictReader(infile)
    # keeps track of all the custom names we've seen
    all_custom_vals = set()
    for id_val, group in itertools.groupby(rows, operator.itemgetter('ID')):
        collapsed_row = {}
        for row in group:
            collapsed_row['ID'] = row['ID']
            collapsed_row['STUFF'] = row['STUFF']
            collapsed_row[row['Custom']] = row['Custom Value']
            all_custom_vals.add(row['Custom'])
        results.append(collapsed_row)
</snippet></ROW><ROW><id>8141186</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8141186</id><snippet>results</snippet></ROW><ROW><id>8141186</id><snippet>import sys
writer = csv.writer(sys.stdout)
keys = sorted(all_custom_vals)
writer.writerow(['ID', 'STUFF'] + keys)
for row in results:
    items = [row['ID'], row['STUFF']]
    for key in keys:
        items.append(row.get(key, '&lt;no value&gt;'))
    writer.writerow(items)
</snippet></ROW><ROW><id>8141186</id><snippet>&lt;no value&gt;</snippet></ROW><ROW><id>8141186</id><snippet>import sys
writer = csv.writer(sys.stdout)
keys = sorted(all_custom_vals)
for row in results:
    items = [row['ID'], row['STUFF']]
    for key in keys:
        items.append(key)
        items.append(row.get(key, '&lt;no value&gt;'))
    writer.writerow(items)
</snippet></ROW><ROW><id>8141219</id><snippet>fn = getattr(foo_obj, str_command, None)
if callable(fn):
    fn()
</snippet></ROW><ROW><id>8141219</id><snippet>str_command = ...

#Double-check: only allowed methods and foo_obj must have it!
allowed_commands = ['print', 'install', 'remove']
assert str_command in allowed_commands, "Command '%s' is not allowed"%str_command

fn = getattr(foo_obj, str_command, None)
assert callable(fn), "Command '%s' is invalid"%str_command

#Ok, call it!
fn()    
</snippet></ROW><ROW><id>8141540</id><snippet>Range</snippet></ROW><ROW><id>8141540</id><snippet>Range(3,7)
# translates to
[3, Range(4,7)]
# which translates to
[3, [4, Range(5,7)]]
# etc.
</snippet></ROW><ROW><id>8141540</id><snippet>def Range (lo, hi):
    if lo &gt;= hi:
        return []
    else:
        return [lo] + Range(lo+1, hi)
</snippet></ROW><ROW><id>8141540</id><snippet>acc</snippet></ROW><ROW><id>8141540</id><snippet>accumulator</snippet></ROW><ROW><id>8141618</id><snippet>doc3.cssselect('meta[property="og:locality"]')[0].get('content')
</snippet></ROW><ROW><id>8141818</id><snippet>public class MembaseTap
{
    public void Tap()
    {
        var options = new Dictionary&lt;string, object&gt;();
        options["Arguments"] = new [] { "foo", "bar" };
        var pyEngine = Python.CreateEngine(options); 

        pyEngine.ExecuteFile(@"E:\Program Files\Membase\Server\bin\tap_example.py"); 
    }
}
</snippet></ROW><ROW><id>8141931</id><snippet>#Create our dictionary and connect it</snippet></ROW><ROW><id>8141931</id><snippet>self.Destroy</snippet></ROW><ROW><id>8141931</id><snippet>self.on_MainWindow_destroy</snippet></ROW><ROW><id>8141931</id><snippet>builder.connect_signals</snippet></ROW><ROW><id>8142190</id><snippet>{{ptype}}
</snippet></ROW><ROW><id>8142190</id><snippet>def process_step(self, request, form, step):
        if step == 1:
            self.extra_context = {'ptype': form.cleaned_data}
            return
        else:
            return
</snippet></ROW><ROW><id>8142190</id><snippet>def process_step(self, request, form, step):
        self.extra_context = {'ptype': 'hello!!',}
</snippet></ROW><ROW><id>8142209</id><snippet>itertext</snippet></ROW><ROW><id>8142209</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>8142209</id><snippet>' Detroit'</snippet></ROW><ROW><id>8142209</id><snippet>from lxml import html

doc = html.fromstring("""&lt;li&gt;&lt;a href="/stations/1"&gt;&lt;span class="num"&gt;3&lt;/span&gt; Detroit&lt;/a&gt;&lt;/li&gt;""")
stop_nodes = doc.cssselect('li a') 
stop_names = []
for start in stop_list:
    node_text = start.itertext()
    node_text.next() # Skip '3'
    stop_names.append(node_text.next().lstrip())
    continue
</snippet></ROW><ROW><id>8142209</id><snippet>text()</snippet></ROW><ROW><id>8142209</id><snippet>stop_names = [a.xpath('text()').lstrip() for a in doc.cssselect('li a')]
</snippet></ROW><ROW><id>8142344</id><snippet>teardown_request</snippet></ROW><ROW><id>8142344</id><snippet>after_request</snippet></ROW><ROW><id>8142344</id><snippet>None</snippet></ROW><ROW><id>8142344</id><snippet>Exception</snippet></ROW><ROW><id>8142344</id><snippet>HttpException</snippet></ROW><ROW><id>8142344</id><snippet>teardown_request</snippet></ROW><ROW><id>8142344</id><snippet>@app.teardown_request
def teardown1(exc):
    print "Teardown 1 {0!r}".format(exc)

@app.teardown_request
def teardown2(exc):
    print "Teardown 2 {0!r}".format(exc)
</snippet></ROW><ROW><id>8142344</id><snippet>teardown_request</snippet></ROW><ROW><id>8142411</id><snippet>datetime</snippet></ROW><ROW><id>8142411</id><snippet>&lt;</snippet></ROW><ROW><id>8142411</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; past = datetime.now()
&gt;&gt;&gt; present = datetime.now()
&gt;&gt;&gt; past &lt; present
True
&gt;&gt;&gt; datetime(2012, 1, 1) &lt; present
False
&gt;&gt;&gt; present - datetime(2000, 4, 4)
datetime.timedelta(4242, 75703, 762105)
</snippet></ROW><ROW><id>8142466</id><snippet>os.system()</snippet></ROW><ROW><id>8142656</id><snippet>&gt;&gt;&gt; mylist = [['A;B', 'C'], ['D;E', 'F']]
&gt;&gt;&gt; [first.split(';') + [second] for first, second in mylist]
[['A', 'B', 'C'], ['D', 'E', 'F']]
</snippet></ROW><ROW><id>8142878</id><snippet>split('e')</snippet></ROW><ROW><id>8142878</id><snippet>rstrip('0')</snippet></ROW><ROW><id>8142934</id><snippet>mksdcard &lt;size&gt; &lt;file&gt;</snippet></ROW><ROW><id>8142934</id><snippet>mksdcard 1024M sdcard1.iso</snippet></ROW><ROW><id>8142934</id><snippet>mount -o loop sdcard1.iso /mnt/cdrom/</snippet></ROW><ROW><id>8142934</id><snippet>umount /mnt/cdrom/</snippet></ROW><ROW><id>8142943</id><snippet>class_&lt;Foo&gt;("Foo")
.def(init&lt;bool&gt;())
.def(init&lt;double&gt;())
.def(init&lt;int&gt;());

Foo() # calls Foo()
Foo(True) # calls Foo(int)
Foo(1) # calls Foo(int)
Foo(4.2) # calls Foo(double)
</snippet></ROW><ROW><id>8142943</id><snippet>using namespace boost::python;

static boost::shared_ptr&lt;Foo&gt;
makeFoo(const object&amp; data)
{
    boost::shared_ptr&lt;Foo&gt; obj;

    if (PyBool_Check(data.ptr())) {
        bool val = extract&lt;bool&gt;(data);
        obj.reset(new Foo(val));
    }
    else if (PyFloat_Check(data.ptr())) {
        double val = extract&lt;double&gt;(data);
        obj.reset(new Foo(val));
    }
    else {
        int val = extract&lt;int&gt;(data);
        obj.reset(new Foo(val));
    }

    return obj;
}

class_&lt;Foo&gt;("Foo")
    .def("__init__", make_constructor(makeFoo));
</snippet></ROW><ROW><id>8142943</id><snippet>Foo() # calls Foo()
Foo(True) # calls Foo(bool)
Foo(1) # calls Foo(int)
Foo(4.2) # calls Foo(double)
</snippet></ROW><ROW><id>8143076</id><snippet>import csv
import itertools

with open('errors','w') as err: pass
with open('data','r') as f:
    for key, group in itertools.groupby(
            csv.reader(f),
            lambda row: row[0].startswith('1234567890')):
        if key: continue  # key is True means we've reach the end of an array
        group=list(group) # group is an iterator; we turn it into a list
        array=group[1:]   # everything but the first row is data
        arr_length=int(group[0][0]) # first row contains the length
        if arr_length != len(array): # sanity check
            with open('errors','a') as err:
                err.write('''\
Data file claims arr_length = {l}
{a}
{h}
'''.format(l=arr_length,a=str(list(array)),h='-'*80))
        print(array)
</snippet></ROW><ROW><id>8143076</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8143076</id><snippet>csv.reader(f)</snippet></ROW><ROW><id>8143076</id><snippet>lambda</snippet></ROW><ROW><id>8143076</id><snippet>True</snippet></ROW><ROW><id>8143076</id><snippet>'1234567890'</snippet></ROW><ROW><id>8143076</id><snippet>True</snippet></ROW><ROW><id>8143076</id><snippet>False</snippet></ROW><ROW><id>8143076</id><snippet>key</snippet></ROW><ROW><id>8143076</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8143154</id><snippet>Str1 = '"HHHHLLLHHHHHLLLLL"'
if Str1.count("H") &gt;= 8 : print "match"
</snippet></ROW><ROW><id>8143214</id><snippet>self.parent.bitmap.Destroy()</snippet></ROW><ROW><id>8143214</id><snippet>IMAGE_LISTSEL</snippet></ROW><ROW><id>8143214</id><snippet>IMAGE_NAME</snippet></ROW><ROW><id>8143214</id><snippet>IMAGE_DATA</snippet></ROW><ROW><id>8143214</id><snippet>wxPython in Action</snippet></ROW><ROW><id>8143214</id><snippet>Noel Rappin</snippet></ROW><ROW><id>8143214</id><snippet>Robin Dunn</snippet></ROW><ROW><id>8143214</id><snippet>IMAGE_NAME = []
IMAGE_DATA = []

import sys
import wx

def deletepic(self):
    try:
        self.parent.bitmap.Destroy()
    except:
        print sys.exc_info()

def sendnewpic(self):
    if self.parent.bitmap: deletepic(self)  
    if IMAGE_DATA[self.image_listsel] != '':
        try:
            print IMAGE_DATA[self.image_listsel]
            bmp = wx.Image(IMAGE_DATA[self.image_listsel], wx.BITMAP_TYPE_ANY).ConvertToBitmap()
            self.parent.scroll_img.SetScrollbars(1, 1, bmp.GetWidth(), bmp.GetHeight())
            self.parent.bitmap = wx.StaticBitmap(self.parent.scroll_img, -1, bmp, (0, 0))
            self.parent.Refresh()
        except:
            pass

def areachange(self, pg):
    print pg
    try:
        if IMAGE_DATA[self.image_listsel] == '':
            deletepic(self)
    except:
        pass

    if pg == "Images":
        self.images_area.Show()
    else:
        self.images_area.Hide()


class imageTab(wx.Panel):

    def __init__(self, parent, grandparent):
        wx.Panel.__init__(self, parent)
        self.parent = grandparent
        self.image_listsel = 0
        self.listBox = wx.ListBox(self, size=(200, -1), choices=IMAGE_NAME, style=wx.LB_SINGLE)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        btnSizer = wx.BoxSizer(wx.VERTICAL) #change to horizontal for side by side
        self.sizerMain = wx.BoxSizer()
        self.listBox.Bind(wx.EVT_LISTBOX_DCLICK, self.reName)
        self.listBox.Bind(wx.EVT_LISTBOX, self.imagesel)
        btn = wx.Button(self, label="Create New",size=(200, 40))
        btnTwo = wx.Button(self, label="Test 2",size=(200, 40))
        btn.Bind(wx.EVT_BUTTON, self.newAddImage)
        self.sizer.Add(self.listBox, proportion=1, flag=wx.TOP | wx.EXPAND | wx.LEFT, border=5)
        btnSizer.Add(btn, 0, wx.ALL, 5)
        btnSizer.Add(btnTwo, 0, wx.ALL, 5)
        self.sizer.Add(btnSizer)
        self.sizerMain.Add(self.sizer, proportion=0, flag=wx.BOTTOM | wx.EXPAND, border=0)
        self.SetSizer(self.sizerMain)

    def imagesel(self, evt):
        self.image_listsel = self.listBox.GetSelection()
        sendnewpic(self)

    def newAddImage(self, evt):
        IMAGE_NAME.append('hi')
        IMAGE_DATA.append('')
        self.listBox.Set(IMAGE_NAME)
        self.listBox.SetSelection(len(IMAGE_NAME)-1)
        self.imagesel(None) #making it a selected image, globally

    def reName(self,parent):
        sel = self.listBox.GetSelection()
        text = self.listBox.GetString(sel)
        renamed = wx.GetTextFromUser('Rename item', 'Rename dialog', text)
        if renamed != '':
            IMAGE_NAME.pop(sel)
            IMAGE_NAME.insert(sel,renamed)
            self.listBox.Set(IMAGE_NAME)
            self.listBox.SetSelection(sel)


class MyPanel(wx.Panel):

    def __init__(self, *args, **kwargs):

        wx.Panel.__init__(self, *args, **kwargs)
        self.notebook = wx.Notebook(self, size=(225, -1))
# 
        self.tab_images = imageTab(self.notebook, self)
        # add the pages to the notebook with the label to show on the tab
        self.notebook.AddPage(self.tab_images, "Pics", select=True)

        self.scroll_img = wx.ScrolledWindow(self, -1)
        self.scroll_img.SetScrollbars(1, 1, 600, 400)

        self.images_area = wx.StaticBox(self, -1, '')
        self.sizerBox = wx.StaticBoxSizer(self.images_area, wx.HORIZONTAL)

        self.sizerBox2 = wx.BoxSizer()
        self.sizerBox.Add(self.scroll_img, 1, wx.EXPAND|wx.ALL, 10)
        self.sizerBox2.Add(self.sizerBox, 1, wx.EXPAND|wx.ALL, 10)
        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.notebook, proportion=0, flag=wx.EXPAND)
#
        btnSizer = wx.BoxSizer() #change to horizontal for side by side
        btnTwo = wx.Button(self, label="Load File", size=(200, 40))
        btnTwo.Bind(wx.EVT_BUTTON, self.onOpenFile)

        self.bmp = None
        self.bitmap = None

        btnSizer.Add(btnTwo, 0, wx.TOP, 15)
        self.sizerBox2.Add(btnSizer)
        #
        self.sizer.Add(self.sizerBox2, proportion=1, flag=wx.EXPAND)

        self.SetSizer(self.sizer)
        self.notebook.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        areachange(self, self.notebook.GetPageText(0))

    def OnClickTop(self, event):
        self.scroll_img.Scroll(600, 400)

    def OnClickBottom(self, event):
        self.scroll_img.Scroll(1, 1)

    def OnPageChanged(self, event):
        new = event.GetSelection()
        areachange(self, self.notebook.GetPageText(new))
        event.Skip()

    def OnPageChanging(self, event):
        event.Skip()

    def onOpenFile(self, evt):
        """ Open a file"""
        filename = wx.FileSelector()
        if filename != '':
            IMAGE_DATA[ self.tab_images.image_listsel] = filename
            self.tab_images.imagesel(None)
            print IMAGE_DATA


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = MyPanel(self)
        self.Show()


app = wx.App(False)
win = MainWindow(None, size=(600, 400))
app.MainLoop()
</snippet></ROW><ROW><id>8143352</id><snippet>get_table</snippet></ROW><ROW><id>8143352</id><snippet>In [14]: sel=selenium.selenium("localhost",4444,"*firefox", "http://www.google.com/webhp")
In [19]: sel.get_table?
Type:       instancemethod
Base Class: &lt;type 'instancemethod'&gt;
String Form:    &lt;bound method selenium.get_table of &lt;selenium.selenium.selenium object at 0xb728304c&gt;&gt;
Namespace:  Interactive
File:       /usr/local/lib/python2.7/dist-packages/selenium/selenium.py
Definition: sel.get_table(self, tableCellAddress)
Docstring:
    Gets the text from a cell of a table. The cellAddress syntax
    tableLocator.row.column, where row and column start at 0.

    'tableCellAddress' is a cell address, e.g. "foo.1.4"
</snippet></ROW><ROW><id>8143352</id><snippet>import selenium.webdriver as webdriver
import contextlib

with contextlib.closing(webdriver.Firefox()) as driver:
    driver.get(url)
    data=[]
    for tr in driver.find_elements_by_xpath('//table[@id="table_id_10"]//tr'):
        tds=tr.find_elements_by_tag_name('td')
        if tds: 
            data.append([td.text for td in tds])
print(data)
# [[u'10/15/2011', u'92', u'37'], [u'7/15/2011', u'91', u'27'], [u'4/15/2011', u'90', u'25']]
</snippet></ROW><ROW><id>8143380</id><snippet>filter(str.isdigit, s)</snippet></ROW><ROW><id>8143380</id><snippet>s</snippet></ROW><ROW><id>8143380</id><snippet>&gt;&gt;&gt; s = "--10-"
&gt;&gt;&gt; int(filter(str.isdigit, s))
10
</snippet></ROW><ROW><id>8143380</id><snippet>&gt;&gt;&gt; int(filter(str.isdigit, "12 abc 34"))
1234
</snippet></ROW><ROW><id>8143380</id><snippet>&gt;&gt;&gt; int(filter(str.isdigit, "-10"))
10
</snippet></ROW><ROW><id>8143380</id><snippet>unicode</snippet></ROW><ROW><id>8143380</id><snippet>str</snippet></ROW><ROW><id>8143380</id><snippet>int(filter(unicode.isdigit, u"--10-"))
</snippet></ROW><ROW><id>8143443</id><snippet>class MyModel(mongoengine.Document):
    creation_date = mongo.DateTimeField()
    modified_date = mongo.DateTimeField(default=datetime.datetime.now)

    def save(self, *args, **kwargs):
        if not self.creation_date:
            self.creation_date = datetime.datetime.now()
        self.modified_date = datetime.datetime.now()
        return super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>8143665</id><snippet>ax.set_aspect</snippet></ROW><ROW><id>8143665</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax=fig.add_subplot(1,1,1)
ax.set_aspect(0.3)
x,y=np.random.random((2,100))
plt.scatter(x,y)    
</snippet></ROW><ROW><id>8143665</id><snippet>figsize</snippet></ROW><ROW><id>8143665</id><snippet>plt.figure</snippet></ROW><ROW><id>8143665</id><snippet>fig = plt.figure(figsize=(3,1))</snippet></ROW><ROW><id>8143665</id><snippet>figsize</snippet></ROW><ROW><id>8143665</id><snippet>set_aspect</snippet></ROW><ROW><id>8143665</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>8143665</id><snippet>plt.savefig('/tmp/test.png', bbox_inches='tight')
</snippet></ROW><ROW><id>8143665</id><snippet>ax.set_xlim</snippet></ROW><ROW><id>8143665</id><snippet>ax.set_ylim</snippet></ROW><ROW><id>8143665</id><snippet>ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
</snippet></ROW><ROW><id>8143713</id><snippet>def report_view(request):
   ...
   return render_to_response(request,....)
</snippet></ROW><ROW><id>8143713</id><snippet>def report_view(request):
   ...
   archive_link = "/some/nice/url/to/the/archive"
   response = render_to_response(request, ... { "archive-link" : archive_link})
   store_archive(response)
   return response

def store_archive(response):
     # here you will need to find css/js files etc
     # and bundle them in whatever type of archive you like
     # then temporarily store that archive so it can be accessed by the archive_link
     # you previously used in your view to allow for downloading

def report_archive_view(request):
     # serve the temporarily stored archive, then delete it if you like
</snippet></ROW><ROW><id>8143725</id><snippet>^Details: WARNING|CRITICAL|ERROR</snippet></ROW><ROW><id>8143725</id><snippet>^Details: WARNING</snippet></ROW><ROW><id>8143725</id><snippet>CRITICAL</snippet></ROW><ROW><id>8143725</id><snippet>ERROR</snippet></ROW><ROW><id>8143725</id><snippet>re.match</snippet></ROW><ROW><id>8143725</id><snippet>re.search</snippet></ROW><ROW><id>8143725</id><snippet>Details: CRITICAL</snippet></ROW><ROW><id>8143725</id><snippet>Details: ERROR</snippet></ROW><ROW><id>8143725</id><snippet>r'^Details: (?:WARNING|CRITICAL|ERROR)'
</snippet></ROW><ROW><id>8143725</id><snippet>^Details: WARNING</snippet></ROW><ROW><id>8143725</id><snippet>^Details: CRITICAL</snippet></ROW><ROW><id>8143725</id><snippet>^Details: ERROR</snippet></ROW><ROW><id>8143725</id><snippet>re.search</snippet></ROW><ROW><id>8143725</id><snippet>re.match</snippet></ROW><ROW><id>8143965</id><snippet>class LoggingFoo(object):
    def __init__(self, *args, **kwargs):
        self.obj = Foo(*args, **kwargs)

    def method1(self):
        # ...
        return self.obj.method1()

    def method2(self):
        # ...
        return self.obj.method2()
</snippet></ROW><ROW><id>8144039</id><snippet>__str__()</snippet></ROW><ROW><id>8144039</id><snippet>__str__()</snippet></ROW><ROW><id>8144039</id><snippet>class fancytype(type):
    def __str__(self):
        return self.__name__
class ham(object):
    __metaclass__ = fancytype
print ham
</snippet></ROW><ROW><id>8144039</id><snippet>ham
</snippet></ROW><ROW><id>8144039</id><snippet>__str__()</snippet></ROW><ROW><id>8144039</id><snippet>__repr__()</snippet></ROW><ROW><id>8144600</id><snippet>queries &amp;= Q(**{key: options[key]})
</snippet></ROW><ROW><id>8144600</id><snippet>for option in options:
    if options[option] is None:
        del(options[option])
# or otherwise only add the ones you actually want to filter on
# then
results = Orchard.objects.filter(**options)
</snippet></ROW><ROW><id>8144755</id><snippet>plt.get_current_fig_manager().toolbar.zoom()
</snippet></ROW><ROW><id>8145616</id><snippet>&gt;&gt;&gt; def make_class(class_docstring):
...     class X:
...         __doc__ = class_docstring
...     return X
...
&gt;&gt;&gt; x = make_class('test doc')
&gt;&gt;&gt; x
&lt;class '__main__.X'&gt;
&gt;&gt;&gt; xx = x()
&gt;&gt;&gt; xx.__doc__
'test doc'
</snippet></ROW><ROW><id>8145790</id><snippet>struct.unpack_from()</snippet></ROW><ROW><id>8145790</id><snippet>unpack_from</snippet></ROW><ROW><id>8145790</id><snippet>struct</snippet></ROW><ROW><id>8145790</id><snippet>$ python -m timeit -s "import struct; network_stream = struct.pack('&gt;I', 0x12345678)" "(converted_int,) = struct.unpack_from('&gt;I', network_stream, 0)" 
1000000 loops, best of 3: 0.277 usec per loop

$ python -m timeit -s "import struct; from struct import unpack_from; network_stream = struct.pack('&gt;I', 0x12345678)" "(converted_int,) = unpack_from('&gt;I', network_stream, 0)"
1000000 loops, best of 3: 0.258 usec per loop
</snippet></ROW><ROW><id>8145885</id><snippet>mysql -u root -h localhost --port 10127
</snippet></ROW><ROW><id>8145989</id><snippet>function qperm (x, y, xprime, yprime) {
  var i;
  var n = x.length;
  var qperm = new Array(n);
  var countsx = [], countsy = []; // same as new Array()
  qperm[xprime] = yprime; // doing 1.

  for (i = 0; i &lt; n; ++i) {
    if (x[i] == y[i] &amp;&amp; i != xprime &amp;&amp; i != yprime) { // doing 2.
      qperm[i] = i; }
    else { // preparing for 4. below
      if (i != xprime) {
        if (countsx[x[i]]) countsx[x[i]]++; else countsx[x[i]] = 1; }
      if (i != yprime) {
        if (countsy[y[i]]) countsy[y[i]]++; else countsy[y[i]] = 1; } }

  // finishing countsx and countsy
  var count, sum;
  for (i = 0, count = 0; i &lt; countsx.length; ++i) {
    if (countsx[i]) {
      sum = count + countsx[i];
      countsx[i] = count;
      count = sum; }
  for (i = 0, count = 0; i &lt; countsy.length; ++i) {
    if (countsy[i]) {
      sum = count + countsy[i];
      countsy[i] = count;
      count = sum; }

  var yranked = new Array(count);      
  for (i = 0; i &lt; n; ++i) {
    if (i != yprime &amp;&amp; (x[i] != y[i] || i == xprime)) { // doing 4. for y
      yranked[countsy[y[i]]] = y[i];
      countsy[y[i]]++; } }

  for (i = 0; i &lt; n; ++i) {
    if (i != xprime &amp;&amp; (x[i] != y[i] || i == yprime)) { // doing 4. for x and 5. at the same time
      // this was here but was not right: qperm[x[i]] = yranked[countsx[x[i]]];
      qperm[i] = yranked[countsx[x[i]]];
      // this was here but was not right: countsy[y[i]]++; } } }
      countsx[x[i]]++; } }

  return qperm; }
</snippet></ROW><ROW><id>8146033</id><snippet>__init__</snippet></ROW><ROW><id>8146033</id><snippet>class TxdTest(object):
    def __init__(self, name = '', atrributes = None):
        self.name = name
        if attributes is None
             self.attributes = []
        else:
             self.attributes = attributes
</snippet></ROW><ROW><id>8146401</id><snippet>def my_func(my_arg, handle_exceptions):
    try:
        do_something(my_arg)
    except Exception, e:
        if not handle_exceptions:
            # preserve prior stack trace
            raise

            # Or, if you dont care about the stack prior to this point
            #raise Exception(e)

            # similarly, you can just re-raise e.  The stack trace will start here though.
            #raise e
        else:
            print "my_func is handling the exception"
</snippet></ROW><ROW><id>8146401</id><snippet>Exception</snippet></ROW><ROW><id>8146401</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>8146401</id><snippet>raise</snippet></ROW><ROW><id>8146401</id><snippet>class MyException(Exception):
    def __init__(self, message):
        self.message = message

class MyExceptionTwo(Exception):
    def __init__(self, message):
        self.message = message
    def __repr__(self):
        return "Hi, I'm MyExceptionTwo.  My error message is: %s" % self.message

def something():
    if not tuesday:
        raise MyException("Error: it's not Tuesday.")
    else:
        raise MyExceptionTwo("Error: it's Tuesday.")

def my_func(my_arg):
    try:
        something()
    except MyException, e:
        print e.message
    # Will pass MyExceptionTwo up the call chain

def my_other_func():
    try:
        my_func(your_arg)
    except MyExceptionTwo, e:
        print str(e)
    # No need to catch MyException here since we know my_func() handles it
    # but we can hadle MyExceptionTwo here
</snippet></ROW><ROW><id>8146837</id><snippet>stripe</snippet></ROW><ROW><id>8147217</id><snippet>self.__board[:]</snippet></ROW><ROW><id>8147217</id><snippet>self.__board</snippet></ROW><ROW><id>8147217</id><snippet>self.__board</snippet></ROW><ROW><id>8147217</id><snippet>s_board</snippet></ROW><ROW><id>8147217</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>8147217</id><snippet>deepcopy</snippet></ROW><ROW><id>8147217</id><snippet>b = s_board()</snippet></ROW><ROW><id>8147217</id><snippet>b.__board</snippet></ROW><ROW><id>8147217</id><snippet>b.__solved</snippet></ROW><ROW><id>8147217</id><snippet>class s_board:

    def __init__(self, board=None, solved=None):
        if board is None:
            self.__board = [[n for n in range(1, 10)] for m in range(81)]
        else:
            self.__board = copy.deepcopy(board)
        if solved is None:
            self.__solved = [False for m in range(81)]
        else:
            self.__solved = copy.deepcopy(solved)

    def copy(self):
        b = s_board(self.__board, self.__solved)
        return b
</snippet></ROW><ROW><id>8147217</id><snippet>A = s_board()</snippet></ROW><ROW><id>8147217</id><snippet>A.copy()</snippet></ROW><ROW><id>8147217</id><snippet>A</snippet></ROW><ROW><id>8147679</id><snippet>from webprofiles import *

for x in text:
    a= match(x)
</snippet></ROW><ROW><id>8147679</id><snippet>from webprofiles import match

for x in text:
    a= match(x)
</snippet></ROW><ROW><id>8147761</id><snippet>os</snippet></ROW><ROW><id>8147761</id><snippet>stat</snippet></ROW><ROW><id>8147761</id><snippet>stat</snippet></ROW><ROW><id>8148020</id><snippet>download_count = db.IntegerProperty(required=True, count=0)
</snippet></ROW><ROW><id>8148020</id><snippet>IntegerProperty</snippet></ROW><ROW><id>8148020</id><snippet>count</snippet></ROW><ROW><id>8148020</id><snippet>download_count = db.IntegerProperty(required=True, default=0)
</snippet></ROW><ROW><id>8148116</id><snippet>from django.db import connection
connection.queries
</snippet></ROW><ROW><id>8148116</id><snippet>try:
    modelObj.save()
except OperationalError:
    from django.db import connection
    print connection.queries[-1]
</snippet></ROW><ROW><id>8148504</id><snippet>@register.tag
def render_string(parser, token):
    bits = token.contents.split()
    if len(bits) != 2:
        raise TemplateSyntaxError("...")
    return RenderStringNode(bits[1])


class RenderStringNode(Node):
    def __init__(self, varname):
        self.varname = varname

    def render(self, context):
        var = context.get(self.varname, "")
        return Template(var).render(context)
</snippet></ROW><ROW><id>8148597</id><snippet>import web
template_globals = {
    "cookies": web.cookies,
}
render = web.template.render('templates/', globals=template_globals, base='layout', cache=False)
</snippet></ROW><ROW><id>8148597</id><snippet>render_partial = web.template.render('templates/', globals=template_globals)
template_globals.update(render=render_partial)
</snippet></ROW><ROW><id>8148612</id><snippet>python setup.py develop</snippet></ROW><ROW><id>8148612</id><snippet>virtualenv</snippet></ROW><ROW><id>8149087</id><snippet>client = SSHClient()
lient.load_system_host_keys()
client.set_missing_host_key_policy(AllowAllKeys())
client.connect(HOST,username=USERNAME,password=PASSWORD)
channel = client.invoke_shell()
channel.send('ls\n')
while channel.recv_ready():
    channel.recv(1024)

channel.send('exit\n')
if channel.exit_status_ready():
    print channel.recv_exit_status()
</snippet></ROW><ROW><id>8149876</id><snippet>__main__</snippet></ROW><ROW><id>8149876</id><snippet>datacheck</snippet></ROW><ROW><id>8149876</id><snippet>datacheck</snippet></ROW><ROW><id>8149876</id><snippet>datacheck</snippet></ROW><ROW><id>8149876</id><snippet>config</snippet></ROW><ROW><id>8149876</id><snippet>datacheck</snippet></ROW><ROW><id>8149876</id><snippet>__init__.py</snippet></ROW><ROW><id>8150306</id><snippet>value = None
while not value:
   value = sp.readline()
print value
</snippet></ROW><ROW><id>8150329</id><snippet>from io import BytesIO
from struct import pack
import psycopg2

# Two rows of data; "id" is not in the upstream data source
# Columns: node, ts, val1, val2
data = [(23253, 342, -15.336734, 2494627.949375),
        (23256, 348, 43.23524, 2494827.949375)]

conn = psycopg2.connect("dbname=mydb user=postgres")
curs = conn.cursor()

# Determine starting value for sequence
curs.execute("SELECT nextval('num_data_id_seq')")
id_seq = curs.fetchone()[0]

# Make a binary file object for COPY FROM
cpy = BytesIO()
# 11-byte signature, no flags, no header extension
cpy.write(pack('!11sii', b'PGCOPY\n\377\r\n\0', 0, 0))

# Columns: id, node, ts, val1, val2
# Zip: (column position, format, size)
row_format = list(zip(range(-1, 4),
                      ('i', 'i', 'h', 'f', 'd'),
                      ( 4,   4,   2,   4,   8 )))
for row in data:
    # Number of columns/fields (always 5)
    cpy.write(pack('!h', 5))
    for col, fmt, size in row_format:
        value = (id_seq if col == -1 else row[col])
        cpy.write(pack('!i' + fmt, size, value))
    id_seq += 1  # manually increment sequence outside of database

# File trailer
cpy.write(pack('!h', -1))

# Copy data to database
cpy.seek(0)
curs.copy_expert("COPY num_data FROM STDIN WITH BINARY", cpy)

# Update sequence on database
curs.execute("SELECT setval('num_data_id_seq', %s, false)", (id_seq,))
conn.commit()
</snippet></ROW><ROW><id>8150329</id><snippet>data</snippet></ROW><ROW><id>8150329</id><snippet>import psycopg2
import numpy as np
from struct import pack
from io import BytesIO
from datetime import datetime

conn = psycopg2.connect("dbname=mydb user=postgres")
curs = conn.cursor()

# NumPy record array
shape = (7, 2000, 500)
print('Generating data with %i rows, %i columns' % (shape[1]*shape[2], shape[0]))

dtype = ([('id', 'i4'), ('node', 'i4'), ('ts', 'i2')] +
         [('s' + str(x), 'f4') for x in range(shape[0])])
data = np.empty(shape[1]*shape[2], dtype)
data['id'] = np.arange(shape[1]*shape[2]) + 1
data['node'] = np.tile(np.arange(shape[1]) + 1, shape[2])
data['ts'] = np.repeat(np.arange(shape[2]) + 1, shape[1])
data['s0'] = np.random.rand(shape[1]*shape[2]) * 100
prv = 's0'
for nxt in data.dtype.names[4:]:
    data[nxt] = data[prv] + np.random.rand(shape[1]*shape[2]) * 10
    prv = nxt
</snippet></ROW><ROW><id>8150329</id><snippet>CREATE TABLE num_data_binary
(
  id integer PRIMARY KEY,
  node integer NOT NULL,
  ts smallint NOT NULL,
  s0 real,
  s1 real,
  s2 real,
  s3 real,
  s4 real,
  s5 real,
  s6 real
) WITH (OIDS=FALSE);
</snippet></ROW><ROW><id>8150329</id><snippet>num_data_text</snippet></ROW><ROW><id>8150329</id><snippet>def prepare_text(dat):
    cpy = BytesIO()
    for row in dat:
        cpy.write('\t'.join([repr(x) for x in row]) + '\n')
    return(cpy)

def prepare_binary(dat):
    pgcopy_dtype = [('num_fields','&gt;i2')]
    for field, dtype in dat.dtype.descr:
        pgcopy_dtype += [(field + '_length', '&gt;i4'),
                         (field, dtype.replace('&lt;', '&gt;'))]
    pgcopy = np.empty(dat.shape, pgcopy_dtype)
    pgcopy['num_fields'] = len(dat.dtype)
    for i in range(len(dat.dtype)):
        field = dat.dtype.names[i]
        pgcopy[field + '_length'] = dat.dtype[i].alignment
        pgcopy[field] = dat[field]
    cpy = BytesIO()
    cpy.write(pack('!11sii', b'PGCOPY\n\377\r\n\0', 0, 0))
    cpy.write(pgcopy.tostring())  # all rows
    cpy.write(pack('!h', -1))  # file trailer
    return(cpy)
</snippet></ROW><ROW><id>8150329</id><snippet>def time_pgcopy(dat, table, binary):
    print('Processing copy object for ' + table)
    tstart = datetime.now()
    if binary:
        cpy = prepare_binary(dat)
    else:  # text
        cpy = prepare_text(dat)
    tendw = datetime.now()
    print('Copy object prepared in ' + str(tendw - tstart) + '; ' +
          str(cpy.tell()) + ' bytes; transfering to database')
    cpy.seek(0)
    if binary:
        curs.copy_expert('COPY ' + table + ' FROM STDIN WITH BINARY', cpy)
    else:  # text
        curs.copy_from(cpy, table)
    conn.commit()
    tend = datetime.now()
    print('Database copy time: ' + str(tend - tendw))
    print('        Total time: ' + str(tend - tstart))
    return

time_pgcopy(data, 'num_data_text', binary=False)
time_pgcopy(data, 'num_data_binary', binary=True)
</snippet></ROW><ROW><id>8150329</id><snippet>time_pgcopy</snippet></ROW><ROW><id>8150329</id><snippet>Processing copy object for num_data_text
Copy object prepared in 0:01:15.288695; 84355016 bytes; transfering to database
Database copy time: 0:00:37.929166
        Total time: 0:01:53.217861
Processing copy object for num_data_binary
Copy object prepared in 0:00:01.296143; 80000021 bytes; transfering to database
Database copy time: 0:00:23.325952
        Total time: 0:00:24.622095
</snippet></ROW><ROW><id>8150329</id><snippet>s0</snippet></ROW><ROW><id>8150329</id><snippet>s6</snippet></ROW><ROW><id>8150532</id><snippet>import csv
import itertools

def is_end_of_record(line):
    return line.startswith('///')

class FieldClassifier(object):
    def __init__(self):
        self.field=''
    def __call__(self,row):
        if not row[0].isspace():
            self.field=row.split(' ',1)[0]
        return self.field

fields='NAME DESCRIPTION ORGANISM CLASS DBLINKS'.split()
with open('data','r') as f:
    for end_of_record, lines in itertools.groupby(f,is_end_of_record):
        if not end_of_record:
            classifier=FieldClassifier()
            record={}
            for fieldname, row in itertools.groupby(lines,classifier):
                record[fieldname]='; '.join(r.strip() for r in row)
            print('\t'.join(record.get(fieldname,'NA') for fieldname in fields))
</snippet></ROW><ROW><id>8150532</id><snippet>NAME         IMP4   DESCRIPTION  small nucleolar ribonucleoprotein  NA  CLASS        Genetic Information Processing; Translation; Ribosome biogenesis in eukaryotes DBLINKS      NCBI-GI: 15529982; NCBI-GeneID: 92856; OMIM: 612981
NAME         COMMD9 DESCRIPTION  COMM domain containing 9   ORGANISM     H.sapiens  NA  DBLINKS      NCBI-GI: 156416007; NCBI-GeneID: 29099; OMIM: 612299
</snippet></ROW><ROW><id>8150532</id><snippet>repr</snippet></ROW><ROW><id>8150532</id><snippet>__call__</snippet></ROW><ROW><id>8150798</id><snippet>DOTALL</snippet></ROW><ROW><id>8150798</id><snippet>&gt;&gt;&gt; re.findall("'(?P&lt;content&gt;.*?)'","'&lt;p&gt;something, \n something else&lt;/p&gt;'", re.DOTALL)
['&lt;p&gt;something, \n something else&lt;/p&gt;']
</snippet></ROW><ROW><id>8150880</id><snippet>import itertools
for x, y, z in itertools.izip(List1, List2, List3):
    # ...
</snippet></ROW><ROW><id>8150880</id><snippet>zip</snippet></ROW><ROW><id>8150957</id><snippet>printf("%f", c_double(10.1))</snippet></ROW><ROW><id>8150957</id><snippet>printf()</snippet></ROW><ROW><id>8150957</id><snippet>float</snippet></ROW><ROW><id>8150957</id><snippet>double</snippet></ROW><ROW><id>8150957</id><snippet>float</snippet></ROW><ROW><id>8150957</id><snippet>double</snippet></ROW><ROW><id>8150957</id><snippet>printf()</snippet></ROW><ROW><id>8150957</id><snippet>float</snippet></ROW><ROW><id>8150957</id><snippet>double</snippet></ROW><ROW><id>8150957</id><snippet>printf()</snippet></ROW><ROW><id>8150961</id><snippet>profdir = '~/.config/mozilla'
profile = 'foo'
mozembed.set_profile_path(profile_directory, profile)
</snippet></ROW><ROW><id>8150961</id><snippet>~/.config/mozilla/foo/prefs.js</snippet></ROW><ROW><id>8150961</id><snippet>user_pref("general.useragent.override", 'foo');
</snippet></ROW><ROW><id>8150961</id><snippet>gtkmozembed.*_stream</snippet></ROW><ROW><id>8150961</id><snippet>User-Agent</snippet></ROW><ROW><id>8150961</id><snippet>urllib2</snippet></ROW><ROW><id>8151361</id><snippet>RewriteEngine On
RewriteBase /

RewriteRule "(^|/)\." - [F]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} !=/favicon.ico
RewriteRule ^ index.php [NC,NS,L]
</snippet></ROW><ROW><id>8151371</id><snippet>fnmatch.translate</snippet></ROW><ROW><id>8151371</id><snippet>re.compile(fnmatch.translate(pattern), re.IGNORECASE)
</snippet></ROW><ROW><id>8151371</id><snippet>foo</snippet></ROW><ROW><id>8151371</id><snippet>Foo</snippet></ROW><ROW><id>8151371</id><snippet>FOO</snippet></ROW><ROW><id>8151492</id><snippet>list.insert(index, obj)</snippet></ROW><ROW><id>8151492</id><snippet>index</snippet></ROW><ROW><id>8151492</id><snippet>obj</snippet></ROW><ROW><id>8151492</id><snippet>In [14]: d = {}
In [15]: d[42] = "foo"
In [16]: d[43] = "bar"
In [17]: d[44] = "baz"
In [18]: print(d[43])
bar
</snippet></ROW><ROW><id>8151492</id><snippet>In [19]: l = [None] * 50
In [20]: l[42] = "foo"
In [21]: l[43] = "bar"
In [22]: l[44] = "bar"
In [23]: print(l[43])
bar
</snippet></ROW><ROW><id>8151492</id><snippet>list</snippet></ROW><ROW><id>8151492</id><snippet>list()</snippet></ROW><ROW><id>8151539</id><snippet>import win32com.client

xl = win32com.client.Dispatch("Excel.Application")
xl.DisplayAlerts = False
wb = xl.Workbooks.Open(r"C:\PATH\TO\SOURCE_FILENAME.XLSX")
wb.SaveAs(r"C:\PATH\TO\DESTINATION_FILENAME.XLS", FileFormat = 56)
wb.Close()
xl.Quit()
</snippet></ROW><ROW><id>8151640</id><snippet>show_urls()</snippet></ROW><ROW><id>8152106</id><snippet>mmap</snippet></ROW><ROW><id>8152106</id><snippet>with open(STAT_FILE, "r+b") as f:
    map = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
    for line in iter(map.readline, ""):
        # whatever
</snippet></ROW><ROW><id>8152156</id><snippet>daemon=True</snippet></ROW><ROW><id>8152156</id><snippet>multiprocessing</snippet></ROW><ROW><id>8152156</id><snippet>pip install multiprocessing</snippet></ROW><ROW><id>8152156</id><snippet>#!/usr/bin/env python
import logging, signal, sys, time
import multiprocessing as mp # `pip install multiprocessing` on Python &lt;2.6

class AddProcessNameFilter(logging.Filter):
    """Add missing on Python 2.4 `record.processName` attribute."""
    def filter(self, r):
        r.processName = getattr(r, 'processName', mp.current_process().name)
        return logging.Filter.filter(self, r)

def print_dot():
    while True:
        mp.get_logger().info(".")
        time.sleep(1)

def main():
    logger = mp.log_to_stderr()
    logger.setLevel(logging.INFO)
    logger.addFilter(AddProcessNameFilter()) # fix logging records

    # catch TERM signal to allow finalizers to run and reap daemonic children
    signal.signal(signal.SIGTERM, lambda *args: sys.exit(-signal.SIGTERM))

    # create daemonic child processes
    processes = [mp.Process(target=print_dot) for _ in range(2)]
    for p in processes:
        p.daemon = True
        p.start()    
    print_dot()

if __name__=="__main__":
    mp.freeze_support()
    main()
</snippet></ROW><ROW><id>8152310</id><snippet>curses</snippet></ROW><ROW><id>8152310</id><snippet>curses.noecho()</snippet></ROW><ROW><id>8152310</id><snippet>curses.echo()</snippet></ROW><ROW><id>8152310</id><snippet>curses.wrapper()</snippet></ROW><ROW><id>8152581</id><snippet>import glob, gzip, re
import cPickle

logformat = re.compile(r'^\S+ \S+ \S+ \[([\w:/]+\s[+\-]\d{4})\] "(\S+) (\S+) .*" (\d+) (\d+) "([^"]*)" "[^"]*"')

with open('Logs.txt', 'w') as f_out:
    for i in glob.glob('*.gz'):
        with gzip.GzipFile(i,'r') as f_in:
            for txtline in f_in:
                parsedline = logformat.match(txtline)
                if parsedline:
                    f_out.write("time={t} size={s} url={u}".format(t=parsedline.group(1), s=parsedline.group(5), u=parsedline.group(3)))
</snippet></ROW><ROW><id>8152700</id><snippet>domain = "الاعلي-للاتصالات.قطر"
domain_unicode = unicode(domain, "utf8")
domain_idna = domain_unicode.encode("idna")
urllib2.urlopen("http://" + domain_idna).read()
</snippet></ROW><ROW><id>8152840</id><snippet>format()</snippet></ROW><ROW><id>8152840</id><snippet>s = u"{}".format(x)
</snippet></ROW><ROW><id>8153347</id><snippet>final</snippet></ROW><ROW><id>8153427</id><snippet>temp_geom=MyModel.geom
MyModel.geom=None 
objects_MyModel.send_to_cache() 
MyMyodel.geom=temp_geom 
</snippet></ROW><ROW><id>8153608</id><snippet>checkConnectivity</snippet></ROW><ROW><id>8153608</id><snippet>def checkConnectivity():
    print 'Checking connection'

def CheckConnectionDecorator(fn):
    def new(*args, **kwargs):
        checkConnectivity()
        return fn(*args, **kwargs)
    return new

@CheckConnectionDecorator
def insertToTable():
    print 'Insertion'

@CheckConnectionDecorator
def anotherQueryFunction():
    print 'Another query'
</snippet></ROW><ROW><id>8153651</id><snippet>import numpy as np
x = np.array([[0,3],[5,1],[2,1],[4,5]])
x[np.lexsort((x[:,0],x[:,1]))]
</snippet></ROW><ROW><id>8153651</id><snippet>array([[2,1],[5,1],[0,3],[4,5]])
</snippet></ROW><ROW><id>8154033</id><snippet>"Tue, 22 Nov 2011 06:00:00 GMT"
</snippet></ROW><ROW><id>8154033</id><snippet>datetime.strptime("Tue, 22 Nov 2011 06:00:00 GMT", "%a, %d %b %Y %H:%M:%S %Z")
</snippet></ROW><ROW><id>8154127</id><snippet>HTMLParser</snippet></ROW><ROW><id>8154127</id><snippet>from HTMLParser import HTMLParser

class MLStripper(HTMLParser):
    def __init__(self):
        # initialize the base class
        HTMLParser.__init__(self)

    def read(self, data):
        # clear the current output before re-use
        self._lines = []
        # re-set the parser's state before re-use
        self.reset()
        self.feed(data)
        return ''.join(self._lines)

    def handle_data(self, d):
        self._lines.append(d)

def strip_tags(html):
    s = MLStripper()
    return s.read(html)

html = """Python's &lt;code&gt;easy_install&lt;/code&gt;
 makes installing new packages extremely convenient.
 However, as far as I can tell, it doesn't implement
 the other common features of a dependency manager -
 listing and removing installed packages."""

print strip_tags(html)
</snippet></ROW><ROW><id>8154285</id><snippet>cur.execute("SELECT video_info, COUNT(distinct src_ip) "
            "FROM videoinfo "
            "GROUP BY video_info "
            "ORDER BY COUNT(DISTINCT src_ip) DESC")

counter = dict(cur)
for n in xrange(1, max(counter.itervalues()) + 1):
    perc = 100. / sum(1 for nb in counter.itervalues() if nb == n) / len(counter)
    if perc:
        print '%.f%% videos have been downloaded %d times' % (perc, n)
</snippet></ROW><ROW><id>8154285</id><snippet>counter = {'a': 1, 'b': 1, 'c': 2, 'd': 1, 'e': 2, 'f': 3}</snippet></ROW><ROW><id>8154285</id><snippet>50% videos have been downloaded 1 times
33% videos have been downloaded 2 times
17% videos have been downloaded 3 times
</snippet></ROW><ROW><id>8154302</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>8154302</id><snippet>f = NamedTemporaryFile()
# stuff
f.delete = False
f.close()
</snippet></ROW><ROW><id>8154419</id><snippet>from cutplace import checks
from cutplace import ranges

class FullNameLengthIsInRangeCheck(checks.AbstractCheck):
    """Check that total length of customer name is within the specified range."""
    def __init__(self, description, rule, availableFieldNames, location=None):
        super(FullNameLengthIsInRangeCheck, self).__init__(description, rule, availableFieldNames, location)
        self._fullNameRange = ranges.Range(rule)
        self.reset()
def checkRow(self, rowMap, location):
    fullName = rowMap["surname"] + ", " + rowMap["first_name"]
    fullNameLength = len(fullName)
    try:
        self._fullNameRange.validate("full name", fullNameLength)
    except ranges.RangeValueError, error:
        raise checks.CheckError("full name length is %d but must be in range %s: %r" \
                % (fullNameLength, self._fullNameRange, fullName))
</snippet></ROW><ROW><id>8154419</id><snippet>,Interface: customers,
,,
,Data format,
D,Format,CSV
D,Header,1
,,
,Fields,
,Name,
F,branch_id,
F,customer_id,
F,first_name,
F,surname,
F,gender,
F,date_of_birth,

C,"full name must have at most 100 characters",mychecks.FullNameLengthIsInRange,:10
</snippet></ROW><ROW><id>8154479</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.quote
&lt;function quote at 0x104a10848&gt;
&gt;&gt;&gt; urllib2.quote("ü")
'%C3%BC'
&gt;&gt;&gt; urllib2.quote('Olá mundo!')
'Ol%C3%A1%20mundo%21'
</snippet></ROW><ROW><id>8154481</id><snippet>s.find()</snippet></ROW><ROW><id>8154481</id><snippet>s</snippet></ROW><ROW><id>8154481</id><snippet>0</snippet></ROW><ROW><id>8154481</id><snippet>len(str) - 1</snippet></ROW><ROW><id>8154481</id><snippet>-1</snippet></ROW><ROW><id>8154481</id><snippet>if ".py" not in s:
    return False
</snippet></ROW><ROW><id>8154481</id><snippet>if not s.endswith(".py"):
    return False
</snippet></ROW><ROW><id>8154663</id><snippet>'E:\\Videos, TV etc\\Python\\ca2\\adjective.txt'
</snippet></ROW><ROW><id>8154811</id><snippet>&gt;&gt;&gt; re.findall('\((?P&lt;content&gt;.*?)\)', r'(It\'s something)')
["It\\'s something"]
&gt;&gt;&gt; ["It\\'s something"] == [r"It\'s something"]
True
</snippet></ROW><ROW><id>8154856</id><snippet>cPickle.dumps</snippet></ROW><ROW><id>8154856</id><snippet>VARCHAR</snippet></ROW><ROW><id>8154856</id><snippet>unicode(base64.encode(cPickle.dumps(myobject)))</snippet></ROW><ROW><id>8154856</id><snippet>object2varchar = lambda obj: unicode(base64.encode(cPickle.dumps(obj)))
store(object2varchar([1, 'foo']))
</snippet></ROW><ROW><id>8155236</id><snippet># genfind.py
#
# A function that generates files that match a given filename pattern

import os
import shutil
import fnmatch

def gen_find(filepat,top):
    for path, dirlist, filelist in os.walk(top):
        for name in fnmatch.filter(filelist,filepat):
            yield os.path.join(path,name)

# Example use

if __name__ == '__main__':
    src = 'O:\DATA\ASTER GDEM\Original\North America\UTM Zone 14\USA\Extracted' # input
    dst = 'O:\DATA\ASTER GDEM\Original\North America\UTM Zone 14\USA\Analyses' # desired     location

    filesToMove = gen_find("*dem.tif",src)
    for name in lognames:
        shutil.move(name, dst)
</snippet></ROW><ROW><id>8155387</id><snippet>text = """
blah blah OOO_128934( blah blah
blah bloop OOO_231 bloop bloop
beep OOO_421398234beep beep
"""

import re

print re.findall(r'OOO_\d+', text) 
&gt;&gt;&gt; ['OOO_128934', 'OOO_231', 'OOO_421398234']
</snippet></ROW><ROW><id>8155933</id><snippet>temp = a
a = b
b = temp
</snippet></ROW><ROW><id>8155933</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>8155933</id><snippet>i, j = # two indexes to swap in the list
L[i], L[j] = L[j], L[i]
</snippet></ROW><ROW><id>8156051</id><snippet>imshow</snippet></ROW><ROW><id>8156051</id><snippet>pcolor</snippet></ROW><ROW><id>8156051</id><snippet>pcolor</snippet></ROW><ROW><id>8156051</id><snippet>pcolormesh</snippet></ROW><ROW><id>8156051</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Make some random data to represent your r, g, b bands.
ny, nx = 2, 3
r, g, b = [np.random.random(ny*nx).reshape((ny, nx)) for _ in range(3)]

c = np.dstack([r,g,b])

plt.imshow(c, interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>8156227</id><snippet>raw_id_fields</snippet></ROW><ROW><id>8156265</id><snippet>zip(amr_list, pssr_list, inservice_list)
</snippet></ROW><ROW><id>8156265</id><snippet>dict((x,list(a[1:] for a in y)) for x,y in
    itertools.groupby(zip(amr_list, pssr_list, inservice_list), lambda z: z[0]))
</snippet></ROW><ROW><id>8156265</id><snippet>combined={}
for k, v in zip(amr_list, zip(pssr_list, inservice_list)):
    combined.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>8156363</id><snippet>http://wallbase.cc/search/160</snippet></ROW><ROW><id>8156363</id><snippet>query:sky
board:123
res_opt:eqeq
res:0x0
aspect:0
nsfw_sfw:1
nsfw_sketchy:0
nsfw_nsfw:0
thpp:32
orderby:relevance
orderby_opt:desc
</snippet></ROW><ROW><id>8156363</id><snippet>wallbase.cc/searc/128</snippet></ROW><ROW><id>8156383</id><snippet>DATA</snippet></ROW><ROW><id>8156383</id><snippet>import matplotlib.pyplot as plt

def assignIDs(list):
    '''Take a list of strings, and for each unique value assign a number.
    Returns a map for "unique-val"-&gt;id.
    '''
    sortedList = sorted(list)

    #taken from
    #http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order/480227#480227
    seen = set()
    seen_add = seen.add
    uniqueList =  [ x for x in sortedList if x not in seen and not seen_add(x)]

    return  dict(zip(uniqueList,range(len(uniqueList))))

def plotData(inData,color):
    x,y = zip(*inData)

    xMap = assignIDs(x)
    xAsInts = [xMap[i] for i in x]


    plt.scatter(xAsInts,y,color=color)
    plt.xticks(xMap.values(),xMap.keys())


DATA = [
    ('a', 4),
    ('b', 5),
    ('c', 5),
    ('d', 4),
    ('e', 2),
    ('f', 5),
]


DATA2 = [
    ('a', 3),
    ('b', 4),
    ('c', 4),
    ('d', 3),
    ('e', 1),
    ('f', 4),
    ('a', 5),
    ('b', 7),
    ('c', 7),
    ('d', 6),
    ('e', 4),
    ('f', 7),
]

plotData(DATA,'blue')
plotData(DATA2,'red')

plt.gcf().savefig("correlation.png")
</snippet></ROW><ROW><id>8156383</id><snippet>DATA2</snippet></ROW><ROW><id>8156383</id><snippet>plotData</snippet></ROW><ROW><id>8156383</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>8156383</id><snippet>numpy.corrcoef</snippet></ROW><ROW><id>8156383</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def plotData(inData,color):
    x,y = zip(*inData)

    xMap = assignIDs(x)
    xAsInts = np.array([xMap[i] for i in x])

    pearR = np.corrcoef(xAsInts,y)[1,0]
    # least squares from:
    # http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.lstsq.html
    A = np.vstack([xAsInts,np.ones(len(xAsInts))]).T
    m,c = np.linalg.lstsq(A,np.array(y))[0]

    plt.scatter(xAsInts,y,label='Data '+color,color=color)
    plt.plot(xAsInts,xAsInts*m+c,color=color,
             label="Fit %6s, r = %6.2e"%(color,pearR))
    plt.xticks(xMap.values(),xMap.keys())
    plt.legend(loc=3)
</snippet></ROW><ROW><id>8156403</id><snippet>def shuffle(L, nswaps):
    n = 0

    for item in L:
        while n &lt; nswaps:
            card_one = choose(L)
            card_two = choose(L)

            if card_two == card_one:
                card_two = choose(L)

            n += 1
            L[card_one], L[card_two] = L[card_two], L[card_one]

        print L
</snippet></ROW><ROW><id>8156403</id><snippet>print L</snippet></ROW><ROW><id>8156403</id><snippet>for</snippet></ROW><ROW><id>8156403</id><snippet>print L</snippet></ROW><ROW><id>8156724</id><snippet>check_call(['gzip', fullFilePath])
</snippet></ROW><ROW><id>8156780</id><snippet>self.label1.set_text(status)
</snippet></ROW><ROW><id>8156780</id><snippet>while gtk.events_pending():
    gtk.main_iteration()
</snippet></ROW><ROW><id>8157317</id><snippet>coord_re = re.sub(r"(\d), (\d)", r"\1,\2", coords)
</snippet></ROW><ROW><id>8157317</id><snippet>chr(1) + "," + chr(2)</snippet></ROW><ROW><id>8157317</id><snippet>&gt;&gt;&gt; '\1,\2'
'\x01,\x02'
&gt;&gt;&gt; print '\1,\2'
,
&gt;&gt;&gt; print r'\1,\2'   # this is what you actually want
\1,\2
</snippet></ROW><ROW><id>8157317</id><snippet>r</snippet></ROW><ROW><id>8157317</id><snippet>\\1,\\2</snippet></ROW><ROW><id>8157788</id><snippet>sample</snippet></ROW><ROW><id>8157788</id><snippet>sample.remove(x)</snippet></ROW><ROW><id>8157788</id><snippet>for x in reversed(sample)</snippet></ROW><ROW><id>8157788</id><snippet>sample.remove(x)</snippet></ROW><ROW><id>8157788</id><snippet>if</snippet></ROW><ROW><id>8157788</id><snippet>    ...
    for eachbin in binBoundaries: #for each bin
        dic[eachbin] = 0          #initial value = 0 to account for no number
        for x in reversed(sample):          #for each value wanted to calculate for
            if x &lt;= eachbin:       #if the number falls into the bin
                dic[eachbin] += 1 #the number of values in the bin increases
                sample.remove(x)
    ...
</snippet></ROW><ROW><id>8158335</id><snippet>chain</snippet></ROW><ROW><id>8158335</id><snippet>from itertools import chain

for k,v in chain(d1.iteritems(), d2.iteritems(), d3.iteritems()):
    do_some_stuff(k, v)
</snippet></ROW><ROW><id>8158335</id><snippet>ds = d1,d2,d3
for k,v in chain.from_iterable(d.iteritems() for d in ds):
    do_some_stuff(k, v)
</snippet></ROW><ROW><id>8158449</id><snippet>&gt;&gt;&gt; re.findall('-[a-zA-Z]', 'ls -A -H -B -b .')
['-A', '-H', '-B', '-b']
</snippet></ROW><ROW><id>8158449</id><snippet>&gt;&gt;&gt; re.findall('-[a-zA-Z]', 'ls -A -H -B -b .')[-1]
'-b'
</snippet></ROW><ROW><id>8158468</id><snippet>Queue.Queue()</snippet></ROW><ROW><id>8158468</id><snippet>Event()</snippet></ROW><ROW><id>8158468</id><snippet>event.set()</snippet></ROW><ROW><id>8158468</id><snippet>Event</snippet></ROW><ROW><id>8158468</id><snippet>import Queue
big_queue = Queue.Queue()
</snippet></ROW><ROW><id>8158468</id><snippet>import threading
myevent = threading.Event()
big_queue.put(myevent)
myevent.wait()
</snippet></ROW><ROW><id>8158468</id><snippet>event = big_queue.get()
event.set()
</snippet></ROW><ROW><id>8158533</id><snippet>print '\n'.join(milistofdatastrings)
</snippet></ROW><ROW><id>8158775</id><snippet>urls.py</snippet></ROW><ROW><id>8158775</id><snippet>flatpages</snippet></ROW><ROW><id>8158775</id><snippet>admin</snippet></ROW><ROW><id>8158882</id><snippet>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = "hey"
&gt;&gt;&gt; b = "hey"
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; a = "hey!"
&gt;&gt;&gt; b = "hey!"
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>8158882</id><snippet>is</snippet></ROW><ROW><id>8158988</id><snippet>def view(request):
    ...
    def new(request):
        ...
</snippet></ROW><ROW><id>8158988</id><snippet>def view(request):
    ...

def new(request):
    ...
</snippet></ROW><ROW><id>8158988</id><snippet>url(r'^$', views.index),
url(r'^(?P&lt;slug&gt;[^\.]+)', 'view_post', name='view_blog_post'),
url(r'^new/$', 'new_post', name='new_blog_post'),
</snippet></ROW><ROW><id>8158988</id><snippet>url(r'^$', views.index),
url(r'^new/$', 'new_post', name='new_blog_post'),
url(r'^(?P&lt;slug&gt;[^\.]+)', 'view_post', name='view_blog_post'),
</snippet></ROW><ROW><id>8158988</id><snippet>r'^(?P&lt;slug&gt;[^\.]+)'
</snippet></ROW><ROW><id>8159059</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('limit', type=int, nargs='?')
args = parser.parse_args()
if args.limit is not None:
    print "Limiting to %d." % -args.limit
</snippet></ROW><ROW><id>8159059</id><snippet>metavar</snippet></ROW><ROW><id>8159059</id><snippet>add_argument</snippet></ROW><ROW><id>8159059</id><snippet>"-n"</snippet></ROW><ROW><id>8159059</id><snippet>from optparse import OptionParser
parser = OptionParser()
parser.add_option("-1")
parser.add_option("-2")
options,args = parser.parse_args()
if options.__dict__["1"] is not None:
    print "Your number was %d." % (int("1"+options.__dict__["1"]))
elif options.__dict__["2"] is not None:
    print "Your number was %d." % (int("2"+options.__dict__["2"]))
</snippet></ROW><ROW><id>8159151</id><snippet>list()</snippet></ROW><ROW><id>8159151</id><snippet>def names(self, section):
    return (m[0] for m in self.items(section))
</snippet></ROW><ROW><id>8159151</id><snippet>for name in obj.names(section):
    ...
</snippet></ROW><ROW><id>8159151</id><snippet>mylist = list(obj.names(section))
mytuple = tuple(obj.names(section))
</snippet></ROW><ROW><id>8159192</id><snippet>QTableView.model().index(row, column).data()</snippet></ROW><ROW><id>8159192</id><snippet>QTableView.model(row, column)</snippet></ROW><ROW><id>8159192</id><snippet>QModelIndex</snippet></ROW><ROW><id>8159192</id><snippet>QModelIndex.data(role)</snippet></ROW><ROW><id>8159192</id><snippet>Qt.DisplayRole</snippet></ROW><ROW><id>8159506</id><snippet>time.sleep(0.1)</snippet></ROW><ROW><id>8159506</id><snippet>sleep</snippet></ROW><ROW><id>8159506</id><snippet>LogProtocol.connectionMade</snippet></ROW><ROW><id>8159506</id><snippet>connectionMade</snippet></ROW><ROW><id>8159506</id><snippet>follow</snippet></ROW><ROW><id>8159506</id><snippet>LogProtocol.connectionMade</snippet></ROW><ROW><id>8159506</id><snippet>sleep</snippet></ROW><ROW><id>8159506</id><snippet>LogProtocol.connectionMade</snippet></ROW><ROW><id>8159506</id><snippet>reactor.callLater</snippet></ROW><ROW><id>8159506</id><snippet>def follow(fObj):
    line = fObj.readline()
    reactor.callLater(0.1, follow, fObj)

follow(open(filename))
</snippet></ROW><ROW><id>8159506</id><snippet>LoopingCall</snippet></ROW><ROW><id>8159506</id><snippet>def follow(fObj):
    line = fObj.readline()

from twisted.internet.task import LoopingCall

loop = LoopingCall(follow, open(filename))
loop.start(0.1)
</snippet></ROW><ROW><id>8159506</id><snippet>LogProtocol</snippet></ROW><ROW><id>8159506</id><snippet>follow</snippet></ROW><ROW><id>8159506</id><snippet>def follow(fObj, gotLine):
    line = fObj.readline()
    if line:
        gotLine(line)

def printLine(line):
    print line

loop = LoopingCall(follow, open(filename), printLine)
loop.start(0.1)
</snippet></ROW><ROW><id>8159506</id><snippet>LogProtocol</snippet></ROW><ROW><id>8159506</id><snippet>class LogProtocol(Protocol):
    def connectionMade(self):
        self.loop = LoopingCall(follow, open(filename), self._sendLogLine)
        self.loop.start()

    def _sendLogLine(self, line):
        self.transport.write(line)
</snippet></ROW><ROW><id>8159506</id><snippet>    def connectionLost(self, reason):
        self.loop.stop()
</snippet></ROW><ROW><id>8159506</id><snippet>LoopingCall</snippet></ROW><ROW><id>8159506</id><snippet>time.sleep</snippet></ROW><ROW><id>8159564</id><snippet>x = fileprocess</snippet></ROW><ROW><id>8159564</id><snippet>x</snippet></ROW><ROW><id>8159564</id><snippet>fileprocess</snippet></ROW><ROW><id>8159564</id><snippet>x</snippet></ROW><ROW><id>8159564</id><snippet>fileprocess</snippet></ROW><ROW><id>8159564</id><snippet>()</snippet></ROW><ROW><id>8159564</id><snippet>x = fileprocess()
x.pread('c:/test.txt')
</snippet></ROW><ROW><id>8159564</id><snippet>x</snippet></ROW><ROW><id>8159564</id><snippet>x = fileprocess
f = x() # creates a fileprocess
f.pread('c:/test.txt')
</snippet></ROW><ROW><id>8159722</id><snippet>templates.py</snippet></ROW><ROW><id>8159722</id><snippet>from templates import jinjaenv</snippet></ROW><ROW><id>8159962</id><snippet>zipfile</snippet></ROW><ROW><id>8160181</id><snippet>from neo4j import GraphDatabase
db = GraphDatabase('..')
node_count = sum(1 for _ in db.getAllNodes().iterator())
</snippet></ROW><ROW><id>8160181</id><snippet>node_count = sum(1 for _ in db.nodes)
node_count = len(db.nodes)
</snippet></ROW><ROW><id>8160241</id><snippet>key</snippet></ROW><ROW><id>8160241</id><snippet>min</snippet></ROW><ROW><id>8160241</id><snippet>&gt;&gt;&gt; min(-5, -10, 10, -2, -1, key=abs)
-1
</snippet></ROW><ROW><id>8160241</id><snippet>min</snippet></ROW><ROW><id>8160266</id><snippet>adbapi.ConnectionPool("MySQLdb", cp_reconnect=True, host="", user="", passwd="", db="")
</snippet></ROW><ROW><id>8160266</id><snippet>

from twisted.enterprise import adbapi
from twisted.internet import reactor, defer, task

class sqlClass:
        def __init__(self, db_pointer):
                self.dbpool=db_pointer
                self.dbping = task.LoopingCall(self.dbping)
                self.dbping.start(1200) #20 minutes = 1200 seconds; i found out that if MySQL socket is idled for 20 minutes or longer, MySQL itself disconnects the session for security reasons; i do believe you can change that in the configuration of the database server itself but it may not be recommended.
                self.reconnect=False
                print "database ping initiated"

        def dbping(self):
                def ping(conn):
                        conn.ping() #what happens here is that twisted allows us to access methods from the MySQLdb module that python posesses; i chose to use the native command instead of sending null commands to the database.
                pingdb=self.dbpool.runWithConnection(ping)
                pingdb.addCallback(self.dbactive)
                pingdb.addErrback(self.dbout)
                print "pinging database"

        def dbactive(self, data):
                if data==None and self.reconnect==True:
                        self.dbping.stop()
                        self.reconnect=False
                        self.dbping.start(1200) #20 minutes = 1200 seconds
                        print "Reconnected to database!"
                elif data==None:
                        print "database is active"

        def dbout(self, deferr):
                #print deferr
                if self.reconnect==False:
                        self.dbreconnect()
                elif self.reconnect==True:
                        print "Unable to reconnect to database"
                print "unable to ping MySQL database!"

        def dbreconnect(self, *data):
                self.dbping.stop()
                self.reconnect=True
                #self.dbping = task.LoopingCall(self.dbping)
                self.dbping.start(60) #60
if __name__ == "__main__":
        db = sqlClass(adbapi.ConnectionPool("MySQLdb", cp_reconnect=True, host="", user="", passwd="", db=""))
        reactor.callLater(2, db.dbping)
        reactor.run()</snippet></ROW><ROW><id>8160307</id><snippet>microsecond</snippet></ROW><ROW><id>8160307</id><snippet>time.mktime(then.timetuple())*1e3 + then.microsecond/1e3
</snippet></ROW><ROW><id>8160676</id><snippet>functools.wraps</snippet></ROW><ROW><id>8160676</id><snippet>from functools import wraps

def _makefunc(val):
    @wraps(val)
    def result():
        return val()
    return result

&gt;&gt;&gt; somefunc = _makefunc(list)
&gt;&gt;&gt; somefunc()
[]
&gt;&gt;&gt; somefunc.__name__
'list'
</snippet></ROW><ROW><id>8160735</id><snippet>frameworkName-extensionName</snippet></ROW><ROW><id>8160771</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>8160771</id><snippet>render()</snippet></ROW><ROW><id>8160771</id><snippet>finish()</snippet></ROW><ROW><id>8160771</id><snippet>from twisted.web.resource import Resource
from twisted.web.template import flatten
from twisted.web.server import NOT_DONE_YET

class ElementResource(Resource):
    def __init__(self, element):
        Resource.__init__(self)
        self.element = element
    def render_GET(self, request):
        d = flatten(request, self.element, request.write)
        def done(ignored):
            request.finish()
            return ignored
        d.addBoth(done)
        return NOT_DONE_YET
</snippet></ROW><ROW><id>8161123</id><snippet>In [59]: from scipy import absolute, fft

In [60]: absolute(fft([1,2,3,4]))
Out[60]: array([ 10.        ,   2.82842712,   2.        ,   2.82842712])

In [61]: absolute(fft([1,2,3,4, 1,2,3,4]))
Out[61]: 
array([ 20.        ,   0.        ,   5.65685425,   0.        ,
         4.        ,   0.        ,   5.65685425,   0.        ])

In [62]: absolute(fft([1,2,3,4, 1,2,3,4, 1,2,3,4]))
Out[62]: 
array([ 30.        ,   0.        ,   0.        ,   8.48528137,
         0.        ,   0.        ,   6.        ,   0.        ,
         0.        ,   8.48528137,   0.        ,   0.        ])
</snippet></ROW><ROW><id>8161123</id><snippet>X[k] = fft(x)</snippet></ROW><ROW><id>8161123</id><snippet>Y[k] = fft([x x])</snippet></ROW><ROW><id>8161123</id><snippet>Y[2k] = 2*X[k]</snippet></ROW><ROW><id>8161123</id><snippet>k in {0, 1, ..., N-1}</snippet></ROW><ROW><id>8161123</id><snippet>signal_time_lon</snippet></ROW><ROW><id>8161274</id><snippet>for mod in net.modules:
  print "Module:", mod.name
  if mod.paramdim &gt; 0:
    print "--parameters:", mod.params
  for conn in net.connections[mod]:
    print "-connection to", conn.outmod.name
    if conn.paramdim &gt; 0:
       print "- parameters", conn.params
  if hasattr(net, "recurrentConns"):
    print "Recurrent connections"
    for conn in net.recurrentConns:             
       print "-", conn.inmod.name, " to", conn.outmod.name
       if conn.paramdim &gt; 0:
          print "- parameters", conn.params
</snippet></ROW><ROW><id>8161693</id><snippet>wP = [Point(bX - (10 * bS) + 5, bS + 80), Point(bX - (10 * bS) + 105, bS + 120)]
</snippet></ROW><ROW><id>8161693</id><snippet>wP</snippet></ROW><ROW><id>8161693</id><snippet>goWest = Rectangle(wP)
</snippet></ROW><ROW><id>8161693</id><snippet>Rectangle</snippet></ROW><ROW><id>8161693</id><snippet>self</snippet></ROW><ROW><id>8161693</id><snippet>self</snippet></ROW><ROW><id>8161693</id><snippet>wP</snippet></ROW><ROW><id>8161693</id><snippet>goWest = Rectangle(wP[0], wP[1])
</snippet></ROW><ROW><id>8161693</id><snippet>goWest = Rectangle(*wP)
</snippet></ROW><ROW><id>8161693</id><snippet>*</snippet></ROW><ROW><id>8161693</id><snippet>f(*args)</snippet></ROW><ROW><id>8161693</id><snippet>f(args[0], args[1], args[2], ...)
</snippet></ROW><ROW><id>8161709</id><snippet>&lt;root&gt;
    &lt;brandName type="http://example.com/codes/bmw#" abbrev="BMW" value="BMW"&gt;BMW&lt;/brandName&gt;
    &lt;maxspeed&gt;
        &lt;value&gt;250&lt;/value&gt;
        &lt;unit type="http://example.com/codes/units#" value="miles per hour" abbrev="mph" /&gt;
    &lt;/maxspeed&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>8161709</id><snippet>root.find('maxspeed').find('unit') #returns the unit Element
</snippet></ROW><ROW><id>8161709</id><snippet>for element in root.iter(tag='unit'):
    print element #This would print all the unit elements in the document.
</snippet></ROW><ROW><id>8161709</id><snippet>import lxml.etree
from StringIO import StringIO

def ns_join(element, tag, namespace=None):
    '''Joins the namespace and tag together, and
    returns the fully qualified name.
    @param element - The lxml.etree._Element you're searching
    @param tag - The tag you're joining
    @param namespace - (optional) The Namespace shortname default is None'''

    return '{%s}%s' % (element.nsmap[namespace], tag)

def parse_car(element):
    '''Parse a car element, This will return a dictionary containing
    brand_name, maxspeed_value, and maxspeed_unit'''

    maxspeed = element.find(ns_join(element,'maxspeed'))
    return { 
        'brand_name' : element.findtext(ns_join(element,'brandName')), 
        'maxspeed_value' : maxspeed.findtext(ns_join(maxspeed,'value')), 
        'maxspeed_unit' : maxspeed.find(ns_join(maxspeed, 'unit')).attrib['abbrev']
        }

#Create the StringIO object to feed to the parser.
XML = StringIO('''
&lt;Reports&gt;
    &lt;Car xmlns="http://example.com/vocab/xml/cars#"&gt;
        &lt;dateStarted&gt;2011-02-05&lt;/dateStarted&gt;
        &lt;dateSold&gt;2011-02-13&lt;/dateSold&gt;
        &lt;name type="http://example.com/codes/bmw#" abbrev="X6" value="BMW X6" &gt;BMW X6&lt;/name&gt;
        &lt;brandName type="http://example.com/codes/bmw#" abbrev="BMW" value="BMW" &gt;BMW&lt;/brandName&gt;
        &lt;maxspeed&gt;
            &lt;value&gt;250&lt;/value&gt;
            &lt;unit type="http://example.com/codes/units#" value="miles per hour" abbrev="mph" /&gt;
        &lt;/maxspeed&gt;
        &lt;route type="http://example.com/codes/routes#" abbrev="HW" value="Highway" &gt;Highway&lt;/route&gt;
        &lt;power&gt;
            &lt;value&gt;180&lt;/value&gt;
            &lt;unit type="http://example.com/codes/units#" value="powerhorse" abbrev="ph" /&gt;
        &lt;/power&gt;
        &lt;frequency type="http://example.com/codes/frequency#" value="daily" &gt;Daily&lt;/frequency&gt;  
    &lt;/Car&gt;
&lt;/Reports&gt;
''')

#Get the root element object of the xml
car_root_element = lxml.etree.parse(XML).getroot()

# For each 'Car' tag in the root element,
# we want to parse it and save the list as cars
cars = [ parse_car(element) 
    for element in car_root_element.iter() if element.tag.endswith('Car')]

print cars
</snippet></ROW><ROW><id>8161816</id><snippet>==</snippet></ROW><ROW><id>8161816</id><snippet>&gt;=</snippet></ROW><ROW><id>8161816</id><snippet>&lt;=</snippet></ROW><ROW><id>8161816</id><snippet>install_requires = ['django-pipeline==1.1.22', 'south&gt;=0.7']
</snippet></ROW><ROW><id>8162252</id><snippet>signals_by_date[i] = [v for v in signals_by_date[i] if v &gt;= 3]
</snippet></ROW><ROW><id>8162408</id><snippet>def nearest(ts):
    # Given a presorted list of timestamps:  s = sorted(index)
    i = bisect_left(s, ts)
    return min(s[max(0, i-1): i+2], key=lambda t: abs(ts - t))
</snippet></ROW><ROW><id>8162408</id><snippet> def get_closest_stamp(ts):
      'Speed-up timestamp search by looking only at entries in the same hour'
      hour = round_to_nearest_hour(ts)
      cluster = daydict[hour]         # return a list of entries
      return min(cluster, key=lambda t: abs(ts - t))
</snippet></ROW><ROW><id>8162746</id><snippet>env</snippet></ROW><ROW><id>8162746</id><snippet>wsgiref.util</snippet></ROW><ROW><id>8163115</id><snippet>logger1 = logging.getLogger('')
...
logger2 = logging.getLogger('')
</snippet></ROW><ROW><id>8163115</id><snippet>logger1</snippet></ROW><ROW><id>8163115</id><snippet>logger2</snippet></ROW><ROW><id>8163115</id><snippet>logger2</snippet></ROW><ROW><id>8163115</id><snippet>logger1</snippet></ROW><ROW><id>8163115</id><snippet>logger1 = logging.getLogger('user')
...
logger2 = logging.getLogger('dev')
</snippet></ROW><ROW><id>8163115</id><snippet>critical()</snippet></ROW><ROW><id>8163115</id><snippet>info()</snippet></ROW><ROW><id>8163115</id><snippet>warning()</snippet></ROW><ROW><id>8163115</id><snippet>logger1</snippet></ROW><ROW><id>8163115</id><snippet>logger2</snippet></ROW><ROW><id>8163115</id><snippet>critical()</snippet></ROW><ROW><id>8163115</id><snippet>info()</snippet></ROW><ROW><id>8163115</id><snippet>warning()</snippet></ROW><ROW><id>8163115</id><snippet>import logging

mylogger = logging.getLogger('mylogger')
handler1 = logging.FileHandler('usr.log')
handler1.setLevel(logging.INFO)
mylogger.addHandler(handler1)
handler2 = logging.FileHandler('dev.log')
handler2.setLevel(logging.ERROR)
mylogger.addHandler(handler2)
mylogger.setLevel(logging.INFO)

mylogger.critical('A critical message')
mylogger.info('An info message')
</snippet></ROW><ROW><id>8163115</id><snippet>class MyFilter(object):
    def __init__(self, level):
        self.__level = level

    def filter(self, logRecord):
        return logRecord.levelno &lt;= self.__level
</snippet></ROW><ROW><id>8163115</id><snippet>handler1.addFilter(MyFilter(logging.INFO))
...
handler2.addFilter(MyFilter(logging.ERROR))
</snippet></ROW><ROW><id>8163211</id><snippet>python2.6</snippet></ROW><ROW><id>8163211</id><snippet>apt-get install python2.6</snippet></ROW><ROW><id>8163211</id><snippet>ln -s /usr/bin/python2.6 /usr/bin/python
</snippet></ROW><ROW><id>8163211</id><snippet>#!/usr/bin/python2.6
</snippet></ROW><ROW><id>8163802</id><snippet>Django.forms.forms.BaseForm</snippet></ROW><ROW><id>8163802</id><snippet>_html_output</snippet></ROW><ROW><id>8163802</id><snippet>Django.forms.forms.BoundField</snippet></ROW><ROW><id>8163802</id><snippet>unicode(boundField)</snippet></ROW><ROW><id>8163802</id><snippet>#in templatetags/user_list_tags.py
from django import template
from django import forms
register = template.Library()

#this is djangp template tag for user selection form
@register.filter
def user_select_field(form, userid):
    """
    returns UserSelectionForm field for a user with userid
    """
    key = str(userid)
    if key not in form.fields.keys():
        print 'Key %s not found in dict' % key
        return None
    #here i use BoundField:
    boundField = forms.forms.BoundField(form, form.fields[key], key)
    return unicode(boundField)
</snippet></ROW><ROW><id>8163802</id><snippet>#in UserSelectionForm definition:
...
#__init__
for f in userlist:
    self.fields[str(f.id)] = forms.BooleanField(initial=False, required=False) 
#get_selected    
return filter(lambda u: self.cleaned_data[str(u.id)],
    self.custom_fields)
</snippet></ROW><ROW><id>8164050</id><snippet>In</snippet></ROW><ROW><id>8164050</id><snippet>myscript.py</snippet></ROW><ROW><id>8164050</id><snippet>Python 2.7.1 |EPD 7.0-2 (32-bit)| (r271:86832, Nov 29 2010, 13:52:51) 
Type "copyright", "credits" or "license" for more information.

IPython 0.10.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object'. ?object also works, ?? prints more.

In [2]: print "Hello world."
Hello world.

In [3]: print "Hello world again."
Hello world again.

In [4]: fid = open("myscript.py", "w")

In [5]: for i in range(2,4):
   ...:     fid.write(In[i])
   ...: 

In [6]: fid.close()

In [7]: run myscript.py
Hello world.
Hello world again.
</snippet></ROW><ROW><id>8164221</id><snippet>shell=False</snippet></ROW><ROW><id>8164221</id><snippet>p = subprocess.Popen(("paraview", "--script=script.py"), bufsize=-1)
</snippet></ROW><ROW><id>8164221</id><snippet>shell=False</snippet></ROW><ROW><id>8164221</id><snippet>/home/woltan/local/lib/python2.7/site.py:157: Warning: 'with' will become a reserved keyword in Python 2.6
</snippet></ROW><ROW><id>8164221</id><snippet>site.py</snippet></ROW><ROW><id>8164221</id><snippet>with</snippet></ROW><ROW><id>8164221</id><snippet>with</snippet></ROW><ROW><id>8164586</id><snippet>\0</snippet></ROW><ROW><id>8164586</id><snippet>\0</snippet></ROW><ROW><id>8164586</id><snippet>void fun(char** s, int *sz)
{
    *s = "abc\0de";
    *sz = 6;
}
</snippet></ROW><ROW><id>8164586</id><snippet>cstring.i</snippet></ROW><ROW><id>8164586</id><snippet>%cstring_output_allocate_size(parm, szparm, release)
</snippet></ROW><ROW><id>8164742</id><snippet>lazy_reverse</snippet></ROW><ROW><id>8164742</id><snippet>unicode</snippet></ROW><ROW><id>8164742</id><snippet>str</snippet></ROW><ROW><id>8164742</id><snippet>from django.utils.functional import lazy
from django.core.urlresolvers import reverse

reverse_lazy = lazy(reverse, unicode) 
</snippet></ROW><ROW><id>8164871</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>8164871</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>8164871</id><snippet>sys.maxint</snippet></ROW><ROW><id>8164871</id><snippet>123</snippet></ROW><ROW><id>8164871</id><snippet>12345678987654321L</snippet></ROW><ROW><id>8164871</id><snippet>sys.maxint</snippet></ROW><ROW><id>8164904</id><snippet>rss = "".join([ line.strip() for line in movie_info ])
</snippet></ROW><ROW><id>8164904</id><snippet>mi_tree = etree.fromstring(movie_info)
</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>lpStartupInfo</snippet></ROW><ROW><id>8164912</id><snippet>__in</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>lpProcessInformation</snippet></ROW><ROW><id>8164912</id><snippet>__out</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164912</id><snippet>CreateProcess</snippet></ROW><ROW><id>8164922</id><snippet>/Library/Python/2.6/site-packages</snippet></ROW><ROW><id>8164922</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8165130</id><snippet>script, filename = argv
</snippet></ROW><ROW><id>8165130</id><snippet>argv</snippet></ROW><ROW><id>8165130</id><snippet>script</snippet></ROW><ROW><id>8165130</id><snippet>filename</snippet></ROW><ROW><id>8165560</id><snippet>/* my_interface.i */

%{
#include "my_header.h"
typedef my_namespace::Bar Bar;
%}

typedef my_namespace::Bar Bar;
%include "my_header.h"
</snippet></ROW><ROW><id>8165894</id><snippet>wrapper &lt;- function(func, ...) {
    func(...)
}
</snippet></ROW><ROW><id>8166050</id><snippet>from fabric.api import *
print "Hello"

def deploy():
    with settings(hosts_string="Remote", user = "ubuntu", key_filename="/home/ubuntu/key.pem"):
        put('/home/localuser/sample.sh', '/home/ubuntu/')
        run('bash /home/ubuntu/sample.sh')

if __name__ == '__main__':
   deploy()
</snippet></ROW><ROW><id>8166050</id><snippet>python ./sample.py</snippet></ROW><ROW><id>8166050</id><snippet>fab deploy</snippet></ROW><ROW><id>8166050</id><snippet>fab</snippet></ROW><ROW><id>8166050</id><snippet>fab</snippet></ROW><ROW><id>8166055</id><snippet>from file_a import A</snippet></ROW><ROW><id>8166055</id><snippet>A</snippet></ROW><ROW><id>8166055</id><snippet>file_b</snippet></ROW><ROW><id>8166055</id><snippet>file_a</snippet></ROW><ROW><id>8166055</id><snippet>import modulename
from modulename import something
</snippet></ROW><ROW><id>8166055</id><snippet>modulename.someotherthing</snippet></ROW><ROW><id>8166055</id><snippet>*</snippet></ROW><ROW><id>8166055</id><snippet>from modulename import *
</snippet></ROW><ROW><id>8166055</id><snippet>from file_a import *</snippet></ROW><ROW><id>8166055</id><snippet>file_b</snippet></ROW><ROW><id>8166055</id><snippet>file_a</snippet></ROW><ROW><id>8166055</id><snippet>from module import *</snippet></ROW><ROW><id>8166055</id><snippet>module</snippet></ROW><ROW><id>8166055</id><snippet>__all__</snippet></ROW><ROW><id>8166857</id><snippet>QObject.receivers</snippet></ROW><ROW><id>8166999</id><snippet>dom = xml.dom.minidom.parseString(document)

for node in dom.childNodes:
    if node.attributes:
        for key in node.attributes.keys():
            node.removeAttribute(key)
</snippet></ROW><ROW><id>8167029</id><snippet>SELECT foo_type, SUM(amount)
FROM items
GROUP BY foo_type
</snippet></ROW><ROW><id>8167029</id><snippet>foo_type</snippet></ROW><ROW><id>8167029</id><snippet>sum</snippet></ROW><ROW><id>8167029</id><snippet>cursor.execute("SELECT foo_type, SUM(amount) "
               "FROM items, foos "
               "WHERE items.foo_type = foos.type "
               "GROUP BY foo_type")
results = list(cursor)

# results is a list of tuples: [(type1, sum1), (type2, sum2), ...]
</snippet></ROW><ROW><id>8167348</id><snippet>&lt;html&gt;
&lt;body&gt;

&lt;form action="test.php" method="get"&gt;
&lt;input type="text" name="name" /&gt;
&lt;input type="submit" /&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt; 
</snippet></ROW><ROW><id>8167348</id><snippet>&lt;?php
exec("python mypythonscript.py ".$name, $output);
?&gt;
</snippet></ROW><ROW><id>8168272</id><snippet>b = "the"
a = b * 5
print a
&gt;&gt;&gt; "thethethethethe"
a = a.replace(b, "", 2)  # or a.replace(b*2, "", 1) if you want to remove "thethe" from the string
print a
&gt;&gt;&gt; "thethethe"
</snippet></ROW><ROW><id>8168272</id><snippet>b = "the"
a = "theAtheBthethe"
a = "".join(a.rsplit("the", 2))   # or "".join(a.rsplit("thethe", 1)) if you want to remove "theth" of the string
print a
&gt;&gt;&gt; "theAtheB"
</snippet></ROW><ROW><id>8168272</id><snippet>b * 5</snippet></ROW><ROW><id>8168598</id><snippet>forms.CharField</snippet></ROW><ROW><id>8168598</id><snippet>None</snippet></ROW><ROW><id>8168598</id><snippet>NULL</snippet></ROW><ROW><id>8168598</id><snippet>''</snippet></ROW><ROW><id>8168598</id><snippet>NULL</snippet></ROW><ROW><id>8168598</id><snippet>django.forms.DecimalField</snippet></ROW><ROW><id>8168742</id><snippet>MagicMock</snippet></ROW><ROW><id>8168742</id><snippet>patch</snippet></ROW><ROW><id>8168742</id><snippet>MagicMock</snippet></ROW><ROW><id>8168742</id><snippet>import mock

def foo():
    for line in open('myfile'):
        print line

@mock.patch('__builtin__.open')
def test_foo(open_mock):
    foo()
    assert open_mock.called
</snippet></ROW><ROW><id>8168742</id><snippet>import mock

def foo():
    for line in open('myfile'):
        print line

def test_foo():
    open_mock = mock.MagicMock()
    with mock.patch('__builtin__.open', open_mock):
        foo()
        assert open_mock.called
</snippet></ROW><ROW><id>8168778</id><snippet>pprint</snippet></ROW><ROW><id>8168778</id><snippet>repr</snippet></ROW><ROW><id>8168778</id><snippet>vars</snippet></ROW><ROW><id>8168778</id><snippet>__dict__</snippet></ROW><ROW><id>8168778</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, a, b):
...             self.a = a
...             self.b = b
...     def __repr__(self):
...             return 'Foo(a=%s)' % self.a
...
&gt;&gt;&gt; f = Foo(a=1, b=2)
&gt;&gt;&gt; vars(f)
{'a': 1, 'b': 2}
&gt;&gt;&gt; pprint.pprint(f)
Foo(a=1)
&gt;&gt;&gt; vars(f) is f.__dict__
True
</snippet></ROW><ROW><id>8168778</id><snippet>__repr__</snippet></ROW><ROW><id>8168778</id><snippet>pprint()</snippet></ROW><ROW><id>8168778</id><snippet>print</snippet></ROW><ROW><id>8168778</id><snippet>repr()</snippet></ROW><ROW><id>8168778</id><snippet>a</snippet></ROW><ROW><id>8168778</id><snippet>__dict__</snippet></ROW><ROW><id>8168778</id><snippet>a</snippet></ROW><ROW><id>8168778</id><snippet>b</snippet></ROW><ROW><id>8168778</id><snippet>vars()</snippet></ROW><ROW><id>8169002</id><snippet>dict</snippet></ROW><ROW><id>8169002</id><snippet>class Foo(object):
    def __init__(self, x, y):
       self.x = x
       self.y = y
    def __iter__(self):
       return vars(self).iteritems()
</snippet></ROW><ROW><id>8169002</id><snippet>&gt;&gt;&gt; dict(Foo(2, 3))
{'x': 2, 'y': 3}
</snippet></ROW><ROW><id>8169002</id><snippet>&gt;&gt;&gt; vars(Foo(2, 3))
{'x': 2, 'y': 3}
</snippet></ROW><ROW><id>8169002</id><snippet>__iter__()</snippet></ROW><ROW><id>8169105</id><snippet>if set("abc").issubset(my_list):
    # whatever
</snippet></ROW><ROW><id>8169534</id><snippet>&lt;p&gt;[\s\n\r]*Artist\(s\)[\s\n\r]*(.*?)[\s\n\r]*:[\s\n\r]*&lt;br/&gt;[\s\n\r]*Music:[\s\n\r]*(.*?)&lt;br/&gt;[\s\n\r]*&lt;/p&gt;
</snippet></ROW><ROW><id>8169534</id><snippet>[1] =&gt; "David"
[2] =&gt; "Ramana Gogula"
</snippet></ROW><ROW><id>8169534</id><snippet>Artists(s)</snippet></ROW><ROW><id>8169534</id><snippet>Music:</snippet></ROW><ROW><id>8170075</id><snippet>checkThreadsStatus()</snippet></ROW><ROW><id>8170075</id><snippet>console.log</snippet></ROW><ROW><id>8170205</id><snippet>table = Table('anExistingTable', Base.metadata, autoload=True, autoload_with=Session.bind)
Extension = type('Extension', (BaseClass,), {
    '__table__' : table,
    '__mapper_args__' : {
        'inherits': BaseClass,
        'polymorphic_identity': 'extension'
    }
})
</snippet></ROW><ROW><id>8170694</id><snippet>points = [(1, 2), (3, 4), (1, 8)]
distances = (math.hypot(b[0]-a[0], b[1]-a[1])
             for a, b in zip(points, points[1:]))
total_distance = sum(distances)
</snippet></ROW><ROW><id>8170694</id><snippet>reduce()</snippet></ROW><ROW><id>8170694</id><snippet>sum()</snippet></ROW><ROW><id>8170694</id><snippet>import operator

total_distance = reduce(operator.add, distances)
</snippet></ROW><ROW><id>8170694</id><snippet>import numpy

total_distance = numpy.hypot(*numpy.diff(numpy.array(points), axis=0)).sum()
</snippet></ROW><ROW><id>8170694</id><snippet>math.hypot()</snippet></ROW><ROW><id>8170758</id><snippet>1&gt; set textsize 10000 
2&gt; go 
</snippet></ROW><ROW><id>8170758</id><snippet>pymssql</snippet></ROW><ROW><id>8171258</id><snippet>def trunc_at(s, d, n=3):
    "Returns s truncated at the n'th (3rd by default) occurrence of the delimiter, d."
    return d.join(s.split(d)[:n])

print trunc_at("115Z2113-3-777-55789ABC7777", "-")
</snippet></ROW><ROW><id>8171258</id><snippet>s</snippet></ROW><ROW><id>8171258</id><snippet>d</snippet></ROW><ROW><id>8171258</id><snippet>s.split(d)</snippet></ROW><ROW><id>8171258</id><snippet>["115Z2113", "3", "777", "55789ABC7777"]</snippet></ROW><ROW><id>8171258</id><snippet>n</snippet></ROW><ROW><id>8171258</id><snippet>[:n]</snippet></ROW><ROW><id>8171258</id><snippet>["115Z2113", "3", "777"]</snippet></ROW><ROW><id>8171258</id><snippet>d</snippet></ROW><ROW><id>8171258</id><snippet>d.join(...)</snippet></ROW><ROW><id>8171258</id><snippet>"115Z2113-3-777"</snippet></ROW><ROW><id>8171415</id><snippet>s</snippet></ROW><ROW><id>8171415</id><snippet>s</snippet></ROW><ROW><id>8171415</id><snippet>L</snippet></ROW><ROW><id>8171415</id><snippet>s</snippet></ROW><ROW><id>8171415</id><snippet>L = []
input = [sys.stdin]

for i in range(4):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    server.bind((host,port+i)) 
    server.listen(backlog)
    L.append(server)
    input.append(server)

running = 1
print len(L)
while running: 
    inputready,outputready,exceptready = select.select(input,[],[]) 

    for s in inputready: 
        if s in L: 
            # handle the server socket
            print "opened"
            client, address = s.accept() 
            input.append(client)
        elif s == sys.stdin: 
            # handle standard input 
            junk = sys.stdin.readline() 
            running = 0 
        else: 
            # handle all other sockets 
            data = s.recv(size)
</snippet></ROW><ROW><id>8171456</id><snippet>import lxml.etree as et

tree = et.fromstring('''
... your xml ...
''')

for host_ip in tree.xpath("/scenario/init/send/command[@name='CER']/avp[@name='Host-IP-Address']"):
    host_ip.attrib['value'] = 'foo'

print et.tostring(tree)
</snippet></ROW><ROW><id>8171629</id><snippet>from kreivik.classes import *
</snippet></ROW><ROW><id>8171823</id><snippet>Dear {{primary-firstname}},
AN IMPORTANT REMINDER…
You have a {{product}} that is maturing on {{maturity_date}} with {{financial institution}}.
etc ...
</snippet></ROW><ROW><id>8171823</id><snippet>from django.template.loader import render_to_string

# previous code ...
template_file = 'where/is/my/template.txt'
context_data = {'primary-firstname': 'Mr. Johnson',
                'product': 'banana',
                'maturity_date': '11-17-2011',
                'financial institution': 'something else'}
message = render_to_string(template_file, context_data)
# here you send the message to the user ...
</snippet></ROW><ROW><id>8171823</id><snippet>Dear Mr. Johnson,
AN IMPORTANT REMINDER…
You have a banana that is maturing on 11-17-2011 with something else.
etc ...
</snippet></ROW><ROW><id>8171941</id><snippet>from pyramid.asset import abspath_from_asset_spec 
import pystache
import os 

def pystache_renderer_factory(info):
    template = os.path.join(abspath_from_asset_spec('myproj:templates', False),
                            info.name)
    f = open(template) 
    s = f.read() 
    f.close() 
    def _render(value, system):
        return pystache.render(s, value)
    return _render
</snippet></ROW><ROW><id>8171941</id><snippet>__init__.py</snippet></ROW><ROW><id>8171941</id><snippet>config.add_renderer('.pmt', 'myproj.mustacherenderer.pystache_renderer_factory')
</snippet></ROW><ROW><id>8171994</id><snippet>&gt;&gt;&gt; tu = (('aa',), ('bb',), ('cc',))
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain(*tu))
['aa', 'bb', 'cc']
</snippet></ROW><ROW><id>8171994</id><snippet>Could you please comment on the cost tradeoff? (for loop and itertools)</snippet></ROW><ROW><id>8171994</id><snippet>&gt;&gt;&gt; t = timeit.Timer(stmt="itertools.chain(*(('aa',), ('bb',), ('cc',)))")
&gt;&gt;&gt; print t.timeit()
0.341422080994
&gt;&gt;&gt; t = timeit.Timer(stmt="[a[0] for a in (('aa',), ('bb',), ('cc',))]")
&gt;&gt;&gt; print t.timeit()
0.575773954391
</snippet></ROW><ROW><id>8171994</id><snippet>Could you pl explain itertools.chain(*)</snippet></ROW><ROW><id>8171994</id><snippet>*</snippet></ROW><ROW><id>8171994</id><snippet>&gt;&gt;&gt; def f(*args):
...    print "len args:",len(args)
...    for a in args:
...       print a
... 
&gt;&gt;&gt; tu = (('aa',), ('bb',), ('cc',))
&gt;&gt;&gt; f(tu)
len args: 1
(('aa',), ('bb',), ('cc',))
&gt;&gt;&gt; f(*tu)
len args: 3
('aa',)
('bb',)
('cc',)
</snippet></ROW><ROW><id>8171994</id><snippet>&gt;&gt;&gt; f('abcde')
len args: 1
abcde
&gt;&gt;&gt; f(*'abcde')
len args: 5
a
b
c
d
e
</snippet></ROW><ROW><id>8172249</id><snippet>all()</snippet></ROW><ROW><id>8172249</id><snippet>isgood = all(re.search(regex, s) for regex in regexPatterns)
</snippet></ROW><ROW><id>8172366</id><snippet>search_string</snippet></ROW><ROW><id>8172366</id><snippet>files = os.listdir(".")
files.sort(key=os.path.getmtime, reverse=True)
for name in files:
    with open(name) as f:
        if search_string in f.read():
            print name
            break
</snippet></ROW><ROW><id>8172366</id><snippet>search_string</snippet></ROW><ROW><id>8172441</id><snippet>*</snippet></ROW><ROW><id>8172441</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>8172441</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>8172441</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>8172441</id><snippet>#!/usr/bin/env python
from settings import INSTALLED_APPS
from django.utils.importlib import import_module
import os

app_names = (x for x in INSTALLED_APPS if not x.startswith('django'))
app_paths = (os.path.dirname(os.path.abspath(import_module(x).__file__)) for x in app_names)    
print "\n".join(x for x in app_paths if not x.startswith(os.getcwd()))
</snippet></ROW><ROW><id>8172441</id><snippet>snakefood</snippet></ROW><ROW><id>8172441</id><snippet>*</snippet></ROW><ROW><id>8172441</id><snippet>settings</snippet></ROW><ROW><id>8172716</id><snippet># --------- EXAMPLE ----------

from webob import Response

def application(environ, start_response):
    res = Response()
    res.content_type = 'text/plain'
    res.body = "mptest.py\r\n"
    return res(environ, start_response)
</snippet></ROW><ROW><id>8172873</id><snippet>lambda a=a: inputBoardSize(a)
</snippet></ROW><ROW><id>8173098</id><snippet>new_string = re.sub(r'"(\d+),(\d+)"', r'\1.\2', original_string)
</snippet></ROW><ROW><id>8173098</id><snippet>,</snippet></ROW><ROW><id>8173098</id><snippet>.</snippet></ROW><ROW><id>8173203</id><snippet>def __init__(self, queue, result_queue):
   self.result_queue = result_queue
   # ...

def terminate(self):
   self.results_queue.put(self.lines)
   super(LineConsumer, self).terminate()
</snippet></ROW><ROW><id>8173203</id><snippet>queue = JoinableQueue(100)
result_queue = Queue()
# ...
  lc = LineConsumer(queue, result_queue)
# ...
for p in consumers:
  p.terminate()
  p.join()

while True:
  try:
    print results.queue.get(False)
  except Queue.Empty: # need to import Queue
    break
</snippet></ROW><ROW><id>8173543</id><snippet>Header</snippet></ROW><ROW><id>8173543</id><snippet>Subject</snippet></ROW><ROW><id>8173543</id><snippet>&gt;&gt;&gt; from email.mime.text import MIMEText
&gt;&gt;&gt; from email.header import Header
&gt;&gt;&gt; s = 'ação'
&gt;&gt;&gt; m = MIMEText(s.encode('utf-8'), 'plain', 'utf-8')
&gt;&gt;&gt; m['Subject'] = Header(s, 'utf-8')
&gt;&gt;&gt; m.as_string()
'Content-Type: text/plain; charset="utf-8"\nMIME-Version: 1.0\nContent-Transfer-Encoding: base64\nSubject: =?utf-8?b?YcOnw6Nv?=\n\nYcOnw6Nv\n'
</snippet></ROW><ROW><id>8173543</id><snippet>servidor = smtplib.SMTP()
servidor.connect(HOST, PORT)
servidor.login(user, usenha)
assunto = str(self.lineEdit.text())
para = str(globe_email)             
texto = str(self.textEdit.toPlainText())
corpo = MIMEText(texto.encode('utf-8'), 'plain', 'utf-8')
corpo['From'] = user
corpo['To'] = para
corpo['Subject'] = Header(assunto, 'utf-8')
servidor.sendmail(user, [para], corpo.as_string())
</snippet></ROW><ROW><id>8173546</id><snippet>&gt;&gt;&gt; json.loads('ewrwerw')
ValueError: No JSON object could be decoded
</snippet></ROW><ROW><id>8173546</id><snippet>raise</snippet></ROW><ROW><id>8173546</id><snippet>json</snippet></ROW><ROW><id>8173546</id><snippet>ValueError</snippet></ROW><ROW><id>8173546</id><snippet>simplejson</snippet></ROW><ROW><id>8173546</id><snippet>class JSONDecodeError(ValueError):
</snippet></ROW><ROW><id>8173546</id><snippet>ValueError</snippet></ROW><ROW><id>8173546</id><snippet>simplejson</snippet></ROW><ROW><id>8174085</id><snippet>class ConvertingDateTimeFeild(models.DateTimeField):

    def get_prep_value(self, value):
        return str(datetime.strptime(value, FORMAT_STRING))
</snippet></ROW><ROW><id>8174435</id><snippet>qs = user.blog_set.all().order_by("follow__created")
</snippet></ROW><ROW><id>8174535</id><snippet>n</snippet></ROW><ROW><id>8174535</id><snippet>p</snippet></ROW><ROW><id>8174535</id><snippet>remainder_size = newsize - nb;

if (remainder_size &lt; MINSIZE) { /* not enough extra to split off */
  set_head_size(newp, newsize | (av != &amp;main_arena ? NON_MAIN_ARENA : 0));
  set_inuse_bit_at_offset(newp, newsize);
}
else { /* split remainder */
  remainder = chunk_at_offset(newp, nb);
  set_head_size(newp, nb | (av != &amp;main_arena ? NON_MAIN_ARENA : 0));
  set_head(remainder, remainder_size | PREV_INUSE |
       (av != &amp;main_arena ? NON_MAIN_ARENA : 0));
  /* Mark remainder as inuse so free() won't complain */
  set_inuse_bit_at_offset(remainder, remainder_size);
 #ifdef ATOMIC_FASTBINS
  _int_free(av, remainder, 1);
 #else
  _int_free(av, remainder);
 #endif
}
</snippet></ROW><ROW><id>8174535</id><snippet>nb</snippet></ROW><ROW><id>8174535</id><snippet>newsize</snippet></ROW><ROW><id>8174535</id><snippet>oldsize</snippet></ROW><ROW><id>8174535</id><snippet>magazine_malloc</snippet></ROW><ROW><id>8174535</id><snippet>malloc</snippet></ROW><ROW><id>8174535</id><snippet>realloc</snippet></ROW><ROW><id>8174535</id><snippet>szone_realloc</snippet></ROW><ROW><id>8174535</id><snippet>if (new_good_size &lt;= (old_size &gt;&gt; 1)) {
            /*
             * Serious shrinkage (more than half). free() the excess.
             */
            return tiny_try_shrink_in_place(szone, ptr, old_size, new_good_size);
} else if (new_good_size &lt;= old_size) {
            /* 
             * new_good_size smaller than old_size but not by much (less than half).
             * Avoid thrashing at the expense of some wasted storage.
             */
             return ptr;
}
</snippet></ROW><ROW><id>8174535</id><snippet>new_size &lt;= old_size / 2</snippet></ROW><ROW><id>8174630</id><snippet>vi /usr/local/Library/Formula/python.rb  
</snippet></ROW><ROW><id>8174807</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; xs = dict.fromkeys(range(2), a)
</snippet></ROW><ROW><id>8174807</id><snippet>fromkeys()</snippet></ROW><ROW><id>8174807</id><snippet>&gt;&gt;&gt; xs[0] is a and xs[1] is a
True
</snippet></ROW><ROW><id>8174807</id><snippet>xs = dict((i, []) for i in range(2))
</snippet></ROW><ROW><id>8174895</id><snippet>g()</snippet></ROW><ROW><id>8174895</id><snippet>&gt;&gt;&gt; def f():
...     def g():
...         print myvar
...     myvar = 1
...     g()
... 
&gt;&gt;&gt; f()
1
</snippet></ROW><ROW><id>8174895</id><snippet>g()</snippet></ROW><ROW><id>8174895</id><snippet>myvar</snippet></ROW><ROW><id>8174895</id><snippet>g()</snippet></ROW><ROW><id>8174937</id><snippet>http://</snippet></ROW><ROW><id>8174937</id><snippet>hrefs = ['http://www.high-rely.com' + relative for relative in [x['href'] for x in links]]
</snippet></ROW><ROW><id>8175380</id><snippet>def f(a):
    def inner(h, a):
        print h+a
        return lambda (x): inner(h+1, x)
    return inner(1, a)
</snippet></ROW><ROW><id>8175380</id><snippet>g = f(0) # +1
g = g(0) # +2
g = g(0) # +3

f(0) # +1
g(0) # +4
g(0) # +4
</snippet></ROW><ROW><id>8175380</id><snippet>1
2
3
1
4
4
</snippet></ROW><ROW><id>8175437</id><snippet>Person</snippet></ROW><ROW><id>8175437</id><snippet>| Description   | First Name | Second Name  |
=============================================
| initial value | Joe        | Smith        |
| first user    | Joseph     | Smith        |
| second user   | Joe        | Bloggs       |
=============================================
</snippet></ROW><ROW><id>8175607</id><snippet>import multiprocessing

def f():
  import pygame
  pygame.init()

  while True:
    pygame.event.pump()

if __module__ == "__main__"
  p = multiprocessing.Process(target=f)
  p.start()

  import pygame
  pygame.init()

  while True:
    pygame.event.pump()
</snippet></ROW><ROW><id>8175630</id><snippet>for child in parent.findChildren(QtGui.QLineEdit):
    child.clear()
</snippet></ROW><ROW><id>8175630</id><snippet>for widget in qApp.allWidgets():
    if isinstance(widget, QtGui.QLineEdit):
        widget.clear()
</snippet></ROW><ROW><id>8175713</id><snippet>plot([1 2],[3 4])
hgsave(gcf,'c','-v7');
</snippet></ROW><ROW><id>8175713</id><snippet>&gt;&gt;&gt; from scipy.io import loadmat
&gt;&gt;&gt; x = loadmat('c.fig')
&gt;&gt;&gt; x
{'hgS_070000': array([[&lt;scipy.io.matlab.mio5.mat_struct object at 0x1500e70&gt;]], dtype=object), '__version__': '1.0', '__header__': 'MATLAB 5.0 MAT-file, Platform: MACI64, Created on: Fri Nov 18 12:02:31 2011', '__globals__': []}
&gt;&gt;&gt; x['hgS_070000'][0,0].__dict__
{'handle': array([[1]], dtype=uint8), 'children': array([[&lt;scipy.io.matlab.mio5.mat_struct object at 0x1516030&gt;]], dtype=object), '_fieldnames': ['type', 'handle', 'properties', 'children', 'special'], 'type': array([u'figure'], dtype='&lt;U6'), 'properties': array([[&lt;scipy.io.matlab.mio5.mat_struct object at 0x1500fb0&gt;]], dtype=object), 'special': array([], shape=(1, 0), dtype=float64)}
</snippet></ROW><ROW><id>8175713</id><snippet>.__dict__</snippet></ROW><ROW><id>8175713</id><snippet>XData</snippet></ROW><ROW><id>8175713</id><snippet>YData</snippet></ROW><ROW><id>8175713</id><snippet>&gt;&gt;&gt; x['hgS_070000'][0,0].children[0,0].children[0,0].properties[0,0].XData
array([[1, 2]], dtype=uint8)
&gt;&gt;&gt; x['hgS_070000'][0,0].children[0,0].children[0,0].properties[0,0].YData
array([[3, 4]], dtype=uint8)
</snippet></ROW><ROW><id>8175713</id><snippet>plot([1 2],[3 4])</snippet></ROW><ROW><id>8175796</id><snippet>IReactorTime.callLater</snippet></ROW><ROW><id>8175796</id><snippet>Deferred</snippet></ROW><ROW><id>8175796</id><snippet>twisted.internet.task.deferLater</snippet></ROW><ROW><id>8175796</id><snippet>from twisted.internet import reactor, task

d = task.deferLater(reactor, 0, myFunction, parameter1)
d.addCallback(lambda ignored: reactor.stop())
reactor.run()
</snippet></ROW><ROW><id>8175851</id><snippet>pos_tag</snippet></ROW><ROW><id>8175851</id><snippet>pos_tag</snippet></ROW><ROW><id>8175851</id><snippet>&gt;&gt;&gt; nltk.data.load('taggers/maxent_treebank_pos_tagger/english.pickle')
</snippet></ROW><ROW><id>8175851</id><snippet>&gt;&gt;&gt; _.classifier().labels()
['PRP$', 'VBG', 'VBD', '``', 'VBN', 'POS', "''", 'VBP', 'WDT', 'JJ', 'WP', 'VBZ',
 'DT', '#', 'RP', '$', 'NN', 'FW', ',', '.', 'TO', 'PRP', 'RB', '-LRB-', ':',
 'NNS', 'NNP', 'VB', 'WRB', 'CC', 'LS', 'PDT', 'RBS', 'RBR', 'CD', '-NONE-',
 'EX', 'IN', 'WP$', 'MD', 'NNPS', '-RRB-', 'JJS', 'JJR', 'SYM', 'UH']
</snippet></ROW><ROW><id>8175851</id><snippet>JJ</snippet></ROW><ROW><id>8175851</id><snippet>RB</snippet></ROW><ROW><id>8175851</id><snippet>VBN</snippet></ROW><ROW><id>8176049</id><snippet>try:
  uri = boto.storage_uri()
except Exception, e:
  print e
</snippet></ROW><ROW><id>8176049</id><snippet>exception</snippet></ROW><ROW><id>8176167</id><snippet>import lxml.etree as et
from lxml.builder import E

xml = """
&lt;text&gt;
    &lt;name&gt;
        &lt;ref&gt;foobar&lt;/ref&gt;
    &lt;/name&gt;
&lt;/text&gt;
"""

tree = et.fromstring(xml)

for name in tree.findall('name'):
    text = name.find('ref').text
    tree.replace(name, E.ref(E.name(text)))

print et.tostring(tree)
</snippet></ROW><ROW><id>8176333</id><snippet>Course</snippet></ROW><ROW><id>8176333</id><snippet>class Course:
    def __init__(self, date, title, instructor, ID, description, instructorDescription, *args):
        self.date = date
        self.title = title
        self.instructor = instructor
        self.ID = ID
        self.description = description
        self.instructorDescription = instructorDescription
        self.misc = args

    def matches_term(self, term):
        if term in self.date.lower():
            return True
        # etc
        return False
</snippet></ROW><ROW><id>8176333</id><snippet>def searchCourses(courses, query):
    terms = query.lower().strip().split()
    return tuple(course for course in courses
                 if all(course.matches_term(term)
                        for term in terms)
                )
</snippet></ROW><ROW><id>8176333</id><snippet>courses = (
    Course("today", "", "", "", "", ""),
    Course("wednesday", "", "", "", "", ""),
    Course("today", "", "", "", "", ""),
    Course("sunday", "", "", "", "", ""),
)

results = searchCourses(courses, "on today or wednesday")
for course in results:
    print course.date
</snippet></ROW><ROW><id>8176333</id><snippet>today
wednesday
today
</snippet></ROW><ROW><id>8176756</id><snippet>href</snippet></ROW><ROW><id>8176756</id><snippet>a</snippet></ROW><ROW><id>8176756</id><snippet>b</snippet></ROW><ROW><id>8176756</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = """
... &lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;
... &lt;a href="first/index.php"&gt;&lt;b&gt;first&lt;/b&gt;&lt;/a&gt;
... &lt;a&gt;&lt;b&gt;no-href&lt;/b&gt;&lt;/a&gt;
... &lt;div&gt;&lt;a href="second/index.php"&gt;&lt;b&gt;second&lt;/b&gt;&lt;/a&gt;&lt;/div&gt;
... &lt;div&gt;&lt;a href="third/index.php"&gt;&lt;b&gt;third&lt;/b&gt;&lt;/a&gt;&lt;/div&gt;
... &lt;a href="foo/index.php"&gt;no-bold-tag&lt;/a&gt;
... &lt;a href="foo/index.php"&gt;&lt;b&gt;text&lt;/b&gt;&lt;p&gt;other-stuff&lt;/p&gt;&lt;/a&gt;
... &lt;/body&gt;&lt;/html&gt;
... ... """
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; [a['href'] for a in soup('a', href=True) if a.b and len(a) == 1]
[u'first/index.php', u'second/index.php', u'third/index.php']
</snippet></ROW><ROW><id>8176843</id><snippet>self.var</snippet></ROW><ROW><id>8176897</id><snippet>def filt(delete, lst):
    return [x for x in lst if x != delete]
</snippet></ROW><ROW><id>8176897</id><snippet>def filt(delete, lst):
    return filter(lambda x: x != delete, lst)
</snippet></ROW><ROW><id>8176897</id><snippet>filter</snippet></ROW><ROW><id>8177040</id><snippet>CustomQueryWalker</snippet></ROW><ROW><id>8177040</id><snippet>from Products.contentmigration.walker import CustomQueryWalker

def getImagesToPhotosMigrationWalker(self, query):
    return CustomQueryWalker(self, ImagesToPhotosMigrator, query)

def migrateImages(self):
    walker = getImagesToPhotosMigrationWalker(self, {'path' : '/youfolder'})
    walker.go()
    return walker.getOutput()
</snippet></ROW><ROW><id>8177090</id><snippet>list2.extend(list1)
</snippet></ROW><ROW><id>8177090</id><snippet>list2.append(list1)
</snippet></ROW><ROW><id>8177090</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; b = range(3)
&gt;&gt;&gt; c = range(2)
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; b
[0, 1, 2, [0, 1, 2, 3, 4]]
&gt;&gt;&gt; c.extend(a)
&gt;&gt;&gt; c
[0, 1, 0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>8177090</id><snippet>list.extend()</snippet></ROW><ROW><id>8177090</id><snippet>for line in mylog:
    list1.append(line)
</snippet></ROW><ROW><id>8177090</id><snippet>list1.extend(mylog)
</snippet></ROW><ROW><id>8177274</id><snippet>import sys
sys.setrecursionlimit(10000) # 10000 is an example, try with different values
</snippet></ROW><ROW><id>8177318</id><snippet>re.compile</snippet></ROW><ROW><id>8177318</id><snippet>match</snippet></ROW><ROW><id>8177318</id><snippet>ippattern.match(ip)</snippet></ROW><ROW><id>8177318</id><snippet>MatchObject.group()</snippet></ROW><ROW><id>8177318</id><snippet>#!/usr/bin/python

import sys
import re

def ipcheck(ip):
    ippattern_str = '(([1-2]?[\d]{0,2}\.){1,3}([1-2]?[\d]{0,2})|any)'

    ippattern = re.compile(ippattern_str)
    # ippattern is now used to call match, passing only the ip string
    matchip = ippattern.match(ip)
    if matchip:
        print "ip match: %s" % matchip.group()

if len(sys.argv) &gt; 1:
    ipcheck(sys.argv[1])
</snippet></ROW><ROW><id>8177318</id><snippet>[ 19:46 jon@hozbox ~/SO/python ]$ ./new.py 100.
ip match: 100.
[ 19:46 jon@hozbox ~/SO/python ]$ ./new.py 100.1.
ip match: 100.1.
[ 19:46 jon@hozbox ~/SO/python ]$ ./new.py 100.1.55.
ip match: 100.1.55.
[ 19:46 jon@hozbox ~/SO/python ]$ ./new.py 100.1.55.255
ip match: 100.1.55.255
[ 19:47 jon@hozbox ~/SO/python ]$ ./new.py any
ip match: any
[ 19:47 jon@hozbox ~/SO/python ]$ ./new.py foo
[ 19:47 jon@hozbox ~/SO/python ]$ 
</snippet></ROW><ROW><id>8177393</id><snippet>#filename: /tmp/test.py
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import scoped_session, sessio

nmaker
from sqlalchemy.ext.declarative import declarative_base
import os

sqldebug=True 

engine = create_engine('mysql://test:test@localhost/test1', 
            convert_unicode=True,
            echo=sqldebug)

#create_engine( 
#           'postgresql://user:passwd@localhost/clasificador',
#           convert_unicode=True,
#           echo=sqldebug)

db_session = scoped_session(sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))
Base = declarative_base(bind=engine)
Base.query = db_session.query_property()

class Documento(Base):
    '''Clase definiendo los documentos'''
    __tablename__ = "documentos"

    id = Column(Integer,primary_key=True)
    nombre = Column(String(248))

    def __init__(self,nombre):         
        self.nombre = nombre

    def __repr__(self):
        return '&lt;Documento %r&gt;' % self.nombre

Base.metadata.create_all(engine)


from sqlalchemy.orm import sessionmaker
#some other code
Session = sessionmaker(bind=engine)
session = Session()
doc = Documento(os.path.basename('/tmp/test.py'))
session.add(doc) #here fails
session.commit()
</snippet></ROW><ROW><id>8177393</id><snippet>In [11]: ed /tmp/test.py
Editing... done. Executing edited code...
2011-11-18 08:48:41,254 INFO sqlalchemy.engine.base.Engine SELECT DATABASE()
2011-11-18 08:48:41,254 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,259 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'character_set%%'
2011-11-18 08:48:41,259 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,290 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'lower_case_table_names'
2011-11-18 08:48:41,290 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,320 INFO sqlalchemy.engine.base.Engine SHOW COLLATION
2011-11-18 08:48:41,320 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,339 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'sql_mode'
2011-11-18 08:48:41,339 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,343 INFO sqlalchemy.engine.base.Engine DESCRIBE `documentos`
2011-11-18 08:48:41,343 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,389 INFO sqlalchemy.engine.base.Engine ROLLBACK
2011-11-18 08:48:41,391 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE documentos (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    nombre VARCHAR(248), 
    PRIMARY KEY (id)
)


2011-11-18 08:48:41,391 INFO sqlalchemy.engine.base.Engine ()
2011-11-18 08:48:41,683 INFO sqlalchemy.engine.base.Engine COMMIT
2011-11-18 08:48:41,698 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2011-11-18 08:48:41,700 INFO sqlalchemy.engine.base.Engine INSERT INTO documentos (nombre) VALUES (%s)
2011-11-18 08:48:41,700 INFO sqlalchemy.engine.base.Engine ('test.py',)
2011-11-18 08:48:41,701 INFO sqlalchemy.engine.base.Engine COMMIT
</snippet></ROW><ROW><id>8177540</id><snippet>def foo(a, b, c):
    print(a, b, c)

a = [1,2,3]
foo(*a)
# 1 2 3
</snippet></ROW><ROW><id>8177559</id><snippet>tissot</snippet></ROW><ROW><id>8177559</id><snippet>ellipse</snippet></ROW><ROW><id>8177559</id><snippet>from __future__ import division
import pylab
import numpy

from matplotlib.patches import Polygon
from mpl_toolkits.basemap import pyproj
from mpl_toolkits.basemap import Basemap

class Basemap(Basemap):
    def ellipse(self, x0, y0, a, b, n, ax=None, **kwargs):
        """
        Draws a polygon centered at ``x0, y0``. The polygon approximates an
        ellipse on the surface of the Earth with semi-major-axis ``a`` and 
        semi-minor axis ``b`` degrees longitude and latitude, made up of 
        ``n`` vertices.

        For a description of the properties of ellipsis, please refer to [1].

        The polygon is based upon code written do plot Tissot's indicatrix
        found on the matplotlib mailing list at [2].

        Extra keyword ``ax`` can be used to override the default axis instance.

        Other \**kwargs passed on to matplotlib.patches.Polygon

        RETURNS
            poly : a maptplotlib.patches.Polygon object.

        REFERENCES
            [1] : http://en.wikipedia.org/wiki/Ellipse


        """
        ax = kwargs.pop('ax', None) or self._check_ax()
        g = pyproj.Geod(a=self.rmajor, b=self.rminor)
        # Gets forward and back azimuths, plus distances between initial
        # points (x0, y0)
        azf, azb, dist = g.inv([x0, x0], [y0, y0], [x0+a, x0], [y0, y0+b])
        tsid = dist[0] * dist[1] # a * b

        # Initializes list of segments, calculates \del azimuth, and goes on 
        # for every vertex
        seg = [self(x0+a, y0)]
        AZ = numpy.linspace(azf[0], 360. + azf[0], n)
        for i, az in enumerate(AZ):
            # Skips segments along equator (Geod can't handle equatorial arcs).
            if numpy.allclose(0., y0) and (numpy.allclose(90., az) or
                numpy.allclose(270., az)):
                continue

            # In polar coordinates, with the origin at the center of the 
            # ellipse and with the angular coordinate ``az`` measured from the
            # major axis, the ellipse's equation  is [1]:
            #
            #                           a * b
            # r(az) = ------------------------------------------
            #         ((b * cos(az))**2 + (a * sin(az))**2)**0.5
            #
            # Azymuth angle in radial coordinates and corrected for reference
            # angle.
            azr = 2. * numpy.pi / 360. * (az + 90.)
            A = dist[0] * numpy.sin(azr)
            B = dist[1] * numpy.cos(azr)
            r = tsid / (B**2. + A**2.)**0.5
            lon, lat, azb = g.fwd(x0, y0, az, r)
            x, y = self(lon, lat)

            # Add segment if it is in the map projection region.
            if x &lt; 1e20 and y &lt; 1e20:
                seg.append((x, y))

        poly = Polygon(seg, **kwargs)
        ax.add_patch(poly)

        # Set axes limits to fit map region.
        self.set_axes_limits(ax=ax)

        return poly
</snippet></ROW><ROW><id>8177559</id><snippet>pylab.close('all')
pylab.ion()

m = Basemap(width=12000000, height=8000000, resolution='l', projection='stere',
            lat_ts=50, lat_0=50, lon_0=-107.)
m.drawcoastlines()
m.fillcontinents(color='coral',lake_color='aqua')
# draw parallels and meridians.
m.drawparallels(numpy.arange(-80.,81.,20.))
m.drawmeridians(numpy.arange(-180.,181.,20.))
m.drawmapboundary(fill_color='aqua') 
# draw ellipses
ax = pylab.gca()
for y in numpy.linspace(m.ymax/20, 19*m.ymax/20, 9):
    for x in numpy.linspace(m.xmax/20, 19*m.xmax/20, 12):
        lon, lat = m(x, y, inverse=True)
        poly = m.ellipse(lon, lat, 3, 1.5, 100, facecolor='green', zorder=10,
            alpha=0.5)
pylab.title("Ellipses on stereographic projection")
</snippet></ROW><ROW><id>8177617</id><snippet>&gt;&gt;&gt; ['The Boy','1:34','Let go','4:21','Wherever to', '5:30'][::2]
['The Boy', 'Let go', 'Wherever to']
&gt;&gt;&gt; ['The Boy','1:34','Let go','4:21','Wherever to', '5:30'][1::2]
['1:34', '4:21', '5:30']
&gt;&gt;&gt; zip(['The Boy', 'Let go', 'Wherever to'], ['1:34', '4:21', '5:30'])
[('The Boy', '1:34'), ('Let go', '4:21'), ('Wherever to', '5:30')]
</snippet></ROW><ROW><id>8177742</id><snippet>site_name = getarrr(settings, "SITE_NAME", false)
</snippet></ROW><ROW><id>8177742</id><snippet>site_name = getattr(settings, "SITE_NAME", false)
</snippet></ROW><ROW><id>8178567</id><snippet>private:
    ...
    bool checked;
</snippet></ROW><ROW><id>8178567</id><snippet>bool isChecked() const { return checked; }
void setChecked( bool set ) { checked = set; }
</snippet></ROW><ROW><id>8178567</id><snippet>QVariant TreeModel::data(const QModelIndex &amp;index, int role) const
{
    if (!index.isValid())
        return QVariant();

    TreeItem *item = static_cast&lt;TreeItem*&gt;(index.internalPointer());

    if ( index.role() == Qt::CheckStateRole &amp;&amp; index.column() == 0 )
        return static_cast&lt; int &gt;( item-&gt;isChecked() ? Qt::Checked : Qt::Unchecked );

    if (role != Qt::DisplayRole)
        return QVariant();

    return item-&gt;data(index.column());
}
</snippet></ROW><ROW><id>8178567</id><snippet>Qt::ItemFlags TreeModel::flags(const QModelIndex &amp;index) const
{
    if (!index.isValid())
        return 0;

    Qt::ItemFlags flags = Qt::ItemIsEnabled | Qt::ItemIsSelectable;

    if ( index.column() == 0 )
        flags |= Qt::ItemIsUserCheckable;

    return flags;
}
</snippet></ROW><ROW><id>8178726</id><snippet>nonlocal</snippet></ROW><ROW><id>8178726</id><snippet>def a():
    def b():
        print d["x"]
        d["x"]=2
    d = dict(x=1)
    b()
    print d["x"]
</snippet></ROW><ROW><id>8178726</id><snippet>nonlocal</snippet></ROW><ROW><id>8178726</id><snippet>import ctypes
import inspect

locals_to_fast = ctypes.pythonapi.PyFrame_LocalsToFast
locals_to_fast.restype = None
locals_to_fast.argtypes = [ctypes.py_object, ctypes.c_int]

def set_in_frame(frame, name, value):
    frame.f_locals[name] = value
    locals_to_fast(frame, 1)

def a():
    def b(frame=inspect.currentframe()):
        print x
        set_in_frame(frame, "x", 2)
    x = 1
    b()
    print x
</snippet></ROW><ROW><id>8178726</id><snippet>PyFrame_LocalsToFast()</snippet></ROW><ROW><id>8178726</id><snippet>a</snippet></ROW><ROW><id>8178726</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>8178726</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>8179375</id><snippet>gc.DEBUG_STATS
gc.DEBUG_COLLECTABLE
gc.DEBUG_UNCOLLECTABLE
gc.DEBUG_INSTANCES
gc.DEBUG_OBJECTS
gc.DEBUG_SAVEALL
gc.DEBUG_LEAK
</snippet></ROW><ROW><id>8180055</id><snippet>def ask_for_products(how_many):
    products = []
    for i in xrange(how_many):
        product = {
            'name': raw_input('What Item do you have: '),
            'price': float(input('What is the price of your item: ')),
            'quantity': float(input('How many are you buying: '))
        }
    products.append(product)
    return products
</snippet></ROW><ROW><id>8180055</id><snippet>products</snippet></ROW><ROW><id>8180055</id><snippet>total_sum = sum([i['price']*i['quantity'] for i in products])
</snippet></ROW><ROW><id>8180055</id><snippet>suggested_gst = .05 * total_sum
</snippet></ROW><ROW><id>8180055</id><snippet>for p in products:
    print '%.2f X %.2f %s' % (p['quantity'], p['price'], p['name'])
</snippet></ROW><ROW><id>8180070</id><snippet>self</snippet></ROW><ROW><id>8180070</id><snippet>self</snippet></ROW><ROW><id>8180070</id><snippet>route</snippet></ROW><ROW><id>8180070</id><snippet>self.add_url_rule</snippet></ROW><ROW><id>8180070</id><snippet>Blueprint</snippet></ROW><ROW><id>8180070</id><snippet>Test</snippet></ROW><ROW><id>8180070</id><snippet>self.testView</snippet></ROW><ROW><id>8180070</id><snippet>Test.testview</snippet></ROW><ROW><id>8180070</id><snippet>blueprint.add_url_rule</snippet></ROW><ROW><id>8180070</id><snippet>Test</snippet></ROW><ROW><id>8180070</id><snippet>Test</snippet></ROW><ROW><id>8180253</id><snippet>sdist</snippet></ROW><ROW><id>8180253</id><snippet>python setup.py sdist --help</snippet></ROW><ROW><id>8180253</id><snippet>from distutils import log
from distutils.core import setup
from distutils.command.sdist import sdist

class CustomSdist(sdist):

    user_options = [
        ('packaging=', None, "Some option to indicate what should be packaged")
    ] + sdist.user_options

    def __init__(self, *args, **kwargs):
        sdist.__init__(self, *args, **kwargs)

        self.packaging = "default value for this option"

    def get_file_list(self):

        log.info("Chosen packaging option: {self.packaging}".format(self=self))

        # Change the data_files list here based on the packaging option
        self.distribution.data_files = list(
          ('folder', ['file1', 'file2'])
        )
        sdist.get_file_list(self)

if __name__ == "__main__":

    setup(
        name = "name",
        version = "version",
        author = "author",
        author_email = "author_email",
        url = "url",
        py_modules = [
            # ...
        ],
        packages = [
            # ...
        ],
#        data_files = default data files for commands other than sdist if you wish
        cmdclass={
            'sdist': CustomSdist
        }
    )
</snippet></ROW><ROW><id>8180490</id><snippet>ssh-keygen -t rsa
</snippet></ROW><ROW><id>8180490</id><snippet>$HOME/.ssh/authorized_keys</snippet></ROW><ROW><id>8180490</id><snippet>103.116.140.151</snippet></ROW><ROW><id>8180490</id><snippet>-oStrictHostKeyChecking=no</snippet></ROW><ROW><id>8180490</id><snippet>import paramiko
ssh = paramiko.SSHClient()
# Uncomment the following line for the equivalent of -oStrictHostKeyChecking=no
#ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect('103.116.140.151', username='user', password='diana_123')
stdin, stdout, stderr = ssh.exec_command("date")
date = stdout.read()
print(date)
</snippet></ROW><ROW><id>8180577</id><snippet>type(l2 + l3) == CustomList</snippet></ROW><ROW><id>8180577</id><snippet>__add__()</snippet></ROW><ROW><id>8180577</id><snippet>   def __add__(self, rhs):
        return CustomList(list.__add__(self, rhs))
</snippet></ROW><ROW><id>8180577</id><snippet>    def __getitem__(self, item):
        result = list.__getitem__(self, item)
        try:
            return CustomList(result)
        except TypeError:
            return result
</snippet></ROW><ROW><id>8180577</id><snippet>pydoc list
</snippet></ROW><ROW><id>8180577</id><snippet>list</snippet></ROW><ROW><id>8180805</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as etree
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt;
&gt;&gt;&gt; s = """&lt;?xml version="1.0"?&gt;
... &lt;definitions
...   name="DateService"
...   targetNamespace="http://dev-b.handel-dev.local:8080/DateService.wsdl"
...   xmlns:tns="http://dev-b.handel-dev.local:8080/DateService.wsdl"
...   xmlns="http://schemas.xmlsoap.org/wsdl/"
...   xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
...   xmlns:myType="DateType_NS"
...   xmlns:xsd="http://www.w3.org/2001/XMLSchema"
...   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;
... &lt;/definitions&gt;"""
&gt;&gt;&gt; file_ = StringIO(s)
&gt;&gt;&gt; namespaces = []
&gt;&gt;&gt; for event, elem in etree.iterparse(file_, events=('start-ns',)):
...     print elem
...
(u'tns', 'http://dev-b.handel-dev.local:8080/DateService.wsdl')
('', 'http://schemas.xmlsoap.org/wsdl/')
(u'soap', 'http://schemas.xmlsoap.org/wsdl/soap/')
(u'myType', 'DateType_NS')
(u'xsd', 'http://www.w3.org/2001/XMLSchema')
(u'wsdl', 'http://schemas.xmlsoap.org/wsdl/')
</snippet></ROW><ROW><id>8180844</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid.axislines import Subplot

left,bottom,width,height= -0.02 , 0.12, 1, 0.9
fig = plt.figure(figsize=(3,5))
ax1 = plt.Axes(fig,[left,bottom,width,height])
ax1.plot([1,2,3,4],'b') # plot on the first axes you created
fig.add_axes(ax1)

# using subplot you are acually using higher level objects

ax2 = Subplot(fig,111) # this addes another axis instance
fig.add_subplot(ax2)
ax2.axis["top"].set_visible(False)
ax2.axis["right"].set_visible(False)
ax2.plot([1,2,3,4,5],'r') # thos plots on the second

# now comment everything in ax2, and uncomment ax3
# you will get a crude, low level control of axes
# but both do what you want...

#ax3 = plt.Axes(fig,[left+0.2,bottom-0.2,width,height])
#ax3.plot([1,2,3,4],'g') # plot on the first axes you created

#for loc, spine in ax3.spines.iteritems():
#    if loc in ['left','bottom']:
#        spine.set_position(('outward',10)) # outward by 10 points
#    if loc in ['right','top']:
#        spine.set_color('none') # don't draw spine
#fig.add_axes(ax3)
plt.show()
</snippet></ROW><ROW><id>8181008</id><snippet>timeout = 60

def on_timeout():
  global connection
  connection.close()

connection.add_timeout(timeout, on_timeout)
</snippet></ROW><ROW><id>8181810</id><snippet>output = [list(group) for key,group in groupby(sorted(words,key=sorted),sorted)]
</snippet></ROW><ROW><id>8181810</id><snippet>&gt;&gt;&gt; words = ['abc', 'cab', 'cafe', 'goo', 'face']
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [list(group) for key,group in groupby(sorted(words,key=sorted),sorted)]
[['abc', 'cab'], ['cafe', 'face'], ['goo']]
</snippet></ROW><ROW><id>8181810</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8181810</id><snippet>itertools</snippet></ROW><ROW><id>8181810</id><snippet>groupby</snippet></ROW><ROW><id>8181810</id><snippet>sorted(words,key=sorted)</snippet></ROW><ROW><id>8181810</id><snippet>sorted</snippet></ROW><ROW><id>8181810</id><snippet>sorted</snippet></ROW><ROW><id>8181810</id><snippet>lambda</snippet></ROW><ROW><id>8181810</id><snippet>groupby</snippet></ROW><ROW><id>8181810</id><snippet>sorted</snippet></ROW><ROW><id>8181810</id><snippet>list</snippet></ROW><ROW><id>8181810</id><snippet>input</snippet></ROW><ROW><id>8181810</id><snippet>input</snippet></ROW><ROW><id>8181859</id><snippet>close</snippet></ROW><ROW><id>8181859</id><snippet>abc</snippet></ROW><ROW><id>8182267</id><snippet>base_dn = 'cn=users,dc=company,dc=com'
</snippet></ROW><ROW><id>8182267</id><snippet>retrieveAttributes = ["uniquemember"]
</snippet></ROW><ROW><id>8182267</id><snippet>searchFilter = "cn=aaron*"
</snippet></ROW><ROW><id>8182267</id><snippet>[('cn=Aaron_A@company.com,cn=Users,dc=company,dc=com', {})]
</snippet></ROW><ROW><id>8182480</id><snippet>mock.patch</snippet></ROW><ROW><id>8182480</id><snippet>mock.Mock</snippet></ROW><ROW><id>8182480</id><snippet>patch</snippet></ROW><ROW><id>8182480</id><snippet>&gt;&gt;&gt; class MyClass(object):
...   def __init__(self):
...     print 'Created MyClass@{0}'.format(id(self))
... 
&gt;&gt;&gt; def create_instance():
...   return MyClass()
... 
&gt;&gt;&gt; x = create_instance()
Created MyClass@4299548304
&gt;&gt;&gt; 
&gt;&gt;&gt; @mock.patch('__main__.MyClass')
... def create_instance2(MyClass):
...   MyClass.return_value = 'foo'
...   return create_instance()
... 
&gt;&gt;&gt; i = create_instance2()
&gt;&gt;&gt; i
'foo'
&gt;&gt;&gt; def create_instance():
...   print MyClass
...   return MyClass()
...
&gt;&gt;&gt; create_instance2()
&lt;mock.Mock object at 0x100505d90&gt;
'foo'
&gt;&gt;&gt; create_instance()
&lt;class '__main__.MyClass'&gt;
Created MyClass@4300234128
&lt;__main__.MyClass object at 0x100505d90&gt;
</snippet></ROW><ROW><id>8182480</id><snippet>patch</snippet></ROW><ROW><id>8182480</id><snippet>MyClass</snippet></ROW><ROW><id>8182480</id><snippet>mock.patch</snippet></ROW><ROW><id>8182480</id><snippet>mock.Mock</snippet></ROW><ROW><id>8182480</id><snippet>self.sut.something</snippet></ROW><ROW><id>8182480</id><snippet>MyClass</snippet></ROW><ROW><id>8182480</id><snippet>mock.patch</snippet></ROW><ROW><id>8182713</id><snippet>Failure.value</snippet></ROW><ROW><id>8182883</id><snippet>class Control(object):
        def __init__(self, word=0):
                self.word = word
        def get_low(self):
                return self.word &amp; 0xFF
        def set_low(self, x):
                self.word &amp;= 0xFF00
                self.word |= x &amp; 0xFF
        def get_high(self):
                return (self.word &gt;&gt; 8) &amp; 0xFF
        def set_high(self, x):
                self.word &amp;= 0x00FF
                self.word |= (x &amp; 0xFF) &lt;&lt; 8
        low = property(get_low, set_low)
        high = property(get_high, set_high)
</snippet></ROW><ROW><id>8182883</id><snippet>In [3]: c = Control(0x1234)

In [4]: hex(c.low)
Out[4]: '0x34'

In [5]: hex(c.high)
Out[5]: '0x12'

In [6]: c.low=56

In [7]: hex(c.word)
Out[7]: '0x1238'

In [8]: c.low=0x56

In [9]: hex(c.word)
Out[9]: '0x1256'

In [10]: c.high = 0x78

In [11]: hex(c.word)
Out[11]: '0x7856'

In [12]: c.word = 0xFE0A

In [13]: c.low
Out[13]: 10

In [14]: c.high
Out[14]: 254
</snippet></ROW><ROW><id>8182883</id><snippet>c = Control();
      device_control = dict(device_control = c.word, device_read_permissions
      = c.low, device_write_permissions = c.high)</snippet></ROW><ROW><id>8182883</id><snippet>Control</snippet></ROW><ROW><id>8182883</id><snippet>dict</snippet></ROW><ROW><id>8182883</id><snippet>class DictControl(Control):
        def __len__(self):
                return 3
        def __getitem__(self, k):
                if k == 'device_control':
                        return self.word
                elif k == 'device_read_permissions':
                        return self.low
                elif k == 'device_write_permissions':
                        return self.high
                else: raise KeyError
        def __setitem__(self, k, v):
                if k == 'device_control':
                        self.word = v
                elif k == 'device_read_permissions':
                        self.low = v
                elif k == 'device_write_permissions':
                        self.high = v
                else: raise KeyError
</snippet></ROW><ROW><id>8182883</id><snippet>In [2]: c = DictControl()

In [3]: c.word = 0x1234

In [4]: hex(c['device_control'])
Out[4]: '0x1234'

In [5]: c['device_read_permissions'] = 0xFF

In [6]: c.low
Out[6]: 255

In [7]: c.high = 0xAA

In [8]: c['device_write_permissions']
Out[8]: 170

In [9]: hex(c.word)
Out[9]: '0xaaff'
</snippet></ROW><ROW><id>8183168</id><snippet>arr = []
arr.append([])
arr[0].append('aa1')
arr[0].append('aa2')
</snippet></ROW><ROW><id>8183168</id><snippet>arr = []
arr.append(['aa1', 'aa2'])
</snippet></ROW><ROW><id>8183279</id><snippet>def indexMatching(seq, condition):
    for i,x in enumerate(seq):
        if condition(x):
            return i
    return -1

class Z(object):
    def __init__(self, name):
        self.name = name

class X(object):
    def __init__(self, zs):
        self.mylist = list(zs)

    def indexByName(self, name):
        return indexMatching(self.mylist, lambda x: x.name==name)

x = X([Z('Fred'), Z('Barney'), Z('Wilma'), Z('Betty')])

print x.indexByName('Wilma')
</snippet></ROW><ROW><id>8183279</id><snippet>enumerate(seq)</snippet></ROW><ROW><id>8183507</id><snippet>numpy.all(array1 == array2)</snippet></ROW><ROW><id>8183507</id><snippet>if all((numpy.all(array_to_add != a) for a in array_list)):
    array_list.append(array_to_add)
</snippet></ROW><ROW><id>8183507</id><snippet>array_to_add</snippet></ROW><ROW><id>8183507</id><snippet>array_list</snippet></ROW><ROW><id>8183507</id><snippet>all</snippet></ROW><ROW><id>8183507</id><snippet>__builtin__.all</snippet></ROW><ROW><id>8183507</id><snippet>numpy.all</snippet></ROW><ROW><id>8183507</id><snippet>from numpy import *</snippet></ROW><ROW><id>8183507</id><snippet>import numpy</snippet></ROW><ROW><id>8183507</id><snippet>if array_to_add is not in array_list:
    array_list.append(array_to_add)
</snippet></ROW><ROW><id>8183861</id><snippet>myList = ["dog", "cat", "hamster"]
cbo = wx.ComboBox(self, choices=myList)
</snippet></ROW><ROW><id>8183861</id><snippet>import wx

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test")
        panel = wx.Panel(self)

        myList = ["dog", "cat", "hamster"]
        cbo = wx.ComboBox(panel)
        cbo.SetItems(myList)

        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>8184077</id><snippet>application/json</snippet></ROW><ROW><id>8184077</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>8184077</id><snippet>text/html</snippet></ROW><ROW><id>8184680</id><snippet>a.save() # Succeeds, and never undone by savepoint rollback
try:
    sid = transaction.savepoint()
    b.save() # Could throw exception
    transaction.savepoint_commit(sid)
except IntegrityError:
    transaction.savepoint_rollback(sid)
c.save() # Succeeds, and a.save() is never undone
</snippet></ROW><ROW><id>8185225</id><snippet>def sendCommand(self, in_result, command):
    do_the_stuff
</snippet></ROW><ROW><id>8185488</id><snippet>ListProperty</snippet></ROW><ROW><id>8185488</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8185705</id><snippet>from django.core.cache import cache

client = cache._client  # &lt;--direct reference to memcached.Client object
</snippet></ROW><ROW><id>8185763</id><snippet>ForeignKey</snippet></ROW><ROW><id>8185763</id><snippet>User</snippet></ROW><ROW><id>8185763</id><snippet>User</snippet></ROW><ROW><id>8185763</id><snippet>User</snippet></ROW><ROW><id>8185763</id><snippet>clean</snippet></ROW><ROW><id>8185763</id><snippet>def clean(self):
    if self.who_has and self.who_has.itemobject_set.count() &gt;= LIMIT:
        raise ValidationError('You have already checked out your maximum amount of items.')
</snippet></ROW><ROW><id>8185763</id><snippet>status</snippet></ROW><ROW><id>8185763</id><snippet>class ItemObject(models.Model):
    AVAILABLE = 1
    CHECKED_OUT = 2
    STATUS_CHOICES = (
        (AVAILABLE, 'Available'),
        (CHECKED_OUT, 'Checked Out'),
    )

    ...

    status = models.PositiveIntegerField(choices=STATUS_CHOICES, default=AVAILABLE)
</snippet></ROW><ROW><id>8185763</id><snippet>if self.status == self.STATUS_AVAILABLE:
    self.status = self.STATUS_CHECKED_OUT
</snippet></ROW><ROW><id>8185763</id><snippet>CharField</snippet></ROW><ROW><id>8185763</id><snippet>history</snippet></ROW><ROW><id>8185763</id><snippet>ManyToManyField</snippet></ROW><ROW><id>8185763</id><snippet>class ItemObject(models.Model):
    ...
    history = models.ManyToManyField(User, through='ItemHistory', related_name='item_history', blank=True)

class ItemHistory(models.Model):
    CHECKED_OUT = 1
    RETURNED = 2
    ACTIVITY_CHOICES = (
        (CHECKED_OUT, 'Checked Out'),
        (RETURNED, 'Returned'),
    )

    item = models.ForeignKey(ItemObject)
    user = models.ForeignKey(User)
    activity = models.PostiveIntegerField(choices=ACTIVITY_CHOICES)
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-timestamp'] # latest first
</snippet></ROW><ROW><id>8185763</id><snippet>some_item.history.all()
some_user.item_history.all()
</snippet></ROW><ROW><id>8185763</id><snippet>ItemHistory.objects.create(item=some_item, user=some_user, activity=ItemHistory.CHECKED_OUT)
</snippet></ROW><ROW><id>8185763</id><snippet>auto_now_add</snippet></ROW><ROW><id>8185763</id><snippet>last_checkout</snippet></ROW><ROW><id>8185763</id><snippet>last_activity</snippet></ROW><ROW><id>8185763</id><snippet>class ItemObject(models.Model):
    ...
    def _last_checkout(self):
        try:
            return self.history.filter(activity=ItemHistory.CHECKED_OUT)[0].timestamp
        except IndexError:
            return None
    last_checkout = property(_last_checkout)

    def _last_activity(self):
        try:
            return self.history.all()[0].timestamp
        except IndexError:
            return None
    last_activity = property(_last_activity)
</snippet></ROW><ROW><id>8185763</id><snippet>    some_item.last_checkout
</snippet></ROW><ROW><id>8185763</id><snippet>save</snippet></ROW><ROW><id>8185763</id><snippet>super(ItemObject, self).save()</snippet></ROW><ROW><id>8185763</id><snippet>self.save()</snippet></ROW><ROW><id>8186080</id><snippet>im_func</snippet></ROW><ROW><id>8186080</id><snippet>classmethod</snippet></ROW><ROW><id>8186080</id><snippet>@classmethod</snippet></ROW><ROW><id>8186080</id><snippet>instancemethod</snippet></ROW><ROW><id>8186080</id><snippet>im_self</snippet></ROW><ROW><id>8186080</id><snippet>None</snippet></ROW><ROW><id>8186080</id><snippet>classmethod</snippet></ROW><ROW><id>8186080</id><snippet>@staticmethod</snippet></ROW><ROW><id>8186080</id><snippet>types.MethodType</snippet></ROW><ROW><id>8186080</id><snippet>im_self</snippet></ROW><ROW><id>8186080</id><snippet>None</snippet></ROW><ROW><id>8186080</id><snippet>im_func</snippet></ROW><ROW><id>8186080</id><snippet>meth = types.MethodType(func, None, cls)</snippet></ROW><ROW><id>8186080</id><snippet>im_self</snippet></ROW><ROW><id>8186080</id><snippet>None</snippet></ROW><ROW><id>8186080</id><snippet>im_func</snippet></ROW><ROW><id>8186080</id><snippet>classmethod</snippet></ROW><ROW><id>8186080</id><snippet>classmethod()</snippet></ROW><ROW><id>8186080</id><snippet>meth = types.MethodType(func, cls, type)</snippet></ROW><ROW><id>8186080</id><snippet>type</snippet></ROW><ROW><id>8186080</id><snippet>type</snippet></ROW><ROW><id>8186080</id><snippet>types.MethodType</snippet></ROW><ROW><id>8186085</id><snippet>pkg_resources.resource_filename()</snippet></ROW><ROW><id>8186085</id><snippet>sys.prefix</snippet></ROW><ROW><id>8186110</id><snippet>() is ()</snippet></ROW><ROW><id>8186175</id><snippet>data = [line.strip().split(':') for line in data.split('\n') if line.strip()]
</snippet></ROW><ROW><id>8186199</id><snippet>import  wx

class MyFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)
        self.splitter = wx.SplitterWindow(self)

        pan1 = wx.Window(self.splitter, style=wx.BORDER_SUNKEN)
        pan1.SetBackgroundColour("yellow")
        wx.StaticText(pan1, -1, "My Left Panel")

        pan2 = wx.Window(self.splitter, style=wx.BORDER_SUNKEN)
        pan2.SetBackgroundColour("orange")
        wx.StaticText(pan2, -1, "my Right Panel")

        self.splitter.SplitVertically(pan1, pan2, -100)


if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = MyFrame(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8186340</id><snippet>class A(object):
    def printme(self):
        print "A"
a = A()
a.printme()
</snippet></ROW><ROW><id>8186340</id><snippet>self</snippet></ROW><ROW><id>8186340</id><snippet>self</snippet></ROW><ROW><id>8186340</id><snippet>A()</snippet></ROW><ROW><id>8186340</id><snippet>__init__()</snippet></ROW><ROW><id>8186340</id><snippet>class A(object):
    def __init__(self):
        self.printme()
    def printme(self):
        print "A"
a = A()
</snippet></ROW><ROW><id>8186730</id><snippet>wait()</snippet></ROW><ROW><id>8186730</id><snippet>threading._Event</snippet></ROW><ROW><id>8186730</id><snippet>thread.lock</snippet></ROW><ROW><id>8186730</id><snippet>acquire()</snippet></ROW><ROW><id>8186730</id><snippet>acquire()</snippet></ROW><ROW><id>8186730</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>8186967</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(0, 1000, 100)
# As a placeholder for your calculation...
y = np.cos(x / 100.0)  

plt.plot(x, y, marker='o', mfc='red')
plt.show()
</snippet></ROW><ROW><id>8187018</id><snippet>t = 100, 200 ... 1000</snippet></ROW><ROW><id>8187018</id><snippet>his_pos</snippet></ROW><ROW><id>8187018</id><snippet>means</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>import scipy as sc
import matplotlib.pyplot as plt

plegma=1000
his_pos=[]  # list which holds the position of the particle in the grid
means=[]    #list which holds the means 

for p in range(10000):
    #-------Initialize problem--------
    in_pos = int(sc.random.randint(0,len(grid),1)) #initial position of particle
    grid=sc.ones(plegma)   # grid full of available positions(ones)    
    his_pos.append([])
</snippet></ROW><ROW><id>8187018</id><snippet>i</snippet></ROW><ROW><id>8187018</id><snippet>len(range(0,1000,100)) == 10</snippet></ROW><ROW><id>8187018</id><snippet>i</snippet></ROW><ROW><id>8187018</id><snippet>    for i in range(1000):
</snippet></ROW><ROW><id>8187018</id><snippet>grid[in_pos]</snippet></ROW><ROW><id>8187018</id><snippet>        if i % 100 == 0:
            # count the number of 0s in grid and append it to his_pos[p]
</snippet></ROW><ROW><id>8187018</id><snippet>his_pos</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>his_pos</snippet></ROW><ROW><id>8187018</id><snippet>his_pos</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>his_pos</snippet></ROW><ROW><id>8187018</id><snippet>p</snippet></ROW><ROW><id>8187018</id><snippet>#-------Initialize problem--------
plegma=1000
his_pos=[]  # list which holds the number of visited cells in the grid
means=[]    #list which holds the means 

for p in range(10000):
    #-------Initialize run--------
    in_pos = int(sc.random.randint(0,len(grid),1)) #initial position of particle
    grid=sc.ones(plegma)   # grid full of available positions(ones)    
    num_cells = []  # list which holds number of visited cells during run  
    for i in range(1000):
        # make i-th step, get particle position
        # mark particle position on grid as "visited"
        if (i+1) % 100 == 0: # on each 100th step (steps count from 0, thus i+1)
            # count the number of "visited positions" in grid
            # append it to num_cells
    # append num_cells to his_pos
# find column-wise means for his_pos
</snippet></ROW><ROW><id>8187110</id><snippet>:hidden:</snippet></ROW><ROW><id>8187110</id><snippet>.. toctree::

   doc1.rst 
   doc2.rst

.. toctree::
   :hidden:

   copy.rst   
</snippet></ROW><ROW><id>8187124</id><snippet>f(in[i][j],in[i+1][j],in[i-1][j],in[i][j+1],in[i][j-1],…)
</snippet></ROW><ROW><id>8187124</id><snippet>b[ij]</snippet></ROW><ROW><id>8187124</id><snippet>a[i,j], a[(i-1),j], a[i,(j-1)], a[(i-1),(j-1)]</snippet></ROW><ROW><id>8187124</id><snippet>A = # your first array
B = numpy.ones((2,2))/4
C = scipy.signal.convolve2d(A,B, 'valid')
</snippet></ROW><ROW><id>8187124</id><snippet>'valid'</snippet></ROW><ROW><id>8187124</id><snippet>convolve2d</snippet></ROW><ROW><id>8187124</id><snippet>'same'</snippet></ROW><ROW><id>8187203</id><snippet>setattr</snippet></ROW><ROW><id>8187203</id><snippet>class Foo:
  def setAllWithKwArgs(self, **kwargs):
    for key, value in kwargs.items():
      setattr(self, key, value)
</snippet></ROW><ROW><id>8187203</id><snippet>getattr</snippet></ROW><ROW><id>8187278</id><snippet>Queue</snippet></ROW><ROW><id>8187278</id><snippet>PriorityQueue</snippet></ROW><ROW><id>8187278</id><snippet>(priority, message)</snippet></ROW><ROW><id>8187278</id><snippet>message</snippet></ROW><ROW><id>8187278</id><snippet>priority</snippet></ROW><ROW><id>8187465</id><snippet>PYTHON_CMD=${PYTHON_CMD:="/usr/local/EPD/bin/python"}
</snippet></ROW><ROW><id>8187465</id><snippet>Then in a terminal run the following commands:
./preconfig
make
sudo make install
source ~/setup_cantera
If every thing went well you should be able to import the Cantera module in python:
python
&gt;&gt;&gt;from Cantera import *
</snippet></ROW><ROW><id>8187496</id><snippet>import</snippet></ROW><ROW><id>8187496</id><snippet>main</snippet></ROW><ROW><id>8187496</id><snippet>main</snippet></ROW><ROW><id>8187524</id><snippet>result = ''.join(map(''.join, zip(*strings)))
</snippet></ROW><ROW><id>8187810</id><snippet>./configure</snippet></ROW><ROW><id>8187810</id><snippet>./configure --help</snippet></ROW><ROW><id>8187810</id><snippet>/opt/local/</snippet></ROW><ROW><id>8188054</id><snippet># list labels for columns
columns = ['Masculine', 'Neuter', 'Feminine', 'Plural']

# list labels for rows
rows = ['Nominative', 'Accusative', 'Dative', 'Genitive']

# create a grid of answers for combination of column-rows
answers = [['der', 'das', 'die', 'die'],
        ['den', 'das', 'die', 'die'],
        ['dem', 'dem', 'der', 'den'],
        ['des', 'des', 'der', 'der']]

def correct_answer(column_name, row_name):
    # get correct indexes
    column_index = columns.index(column_name)
    row_index = rows.index(row_name)
    # used indexes to get answer
    return answers[row_index][column_index]

print correct_answer('Masculine', 'Accusative')
</snippet></ROW><ROW><id>8188054</id><snippet>den
</snippet></ROW><ROW><id>8188123</id><snippet>print [[(j, [(float(x[0]) + float(x[1])) / 2.0 for x in e]) for j,e in i] for i in newlist]
</snippet></ROW><ROW><id>8188123</id><snippet>~$ python ~/test.py 
[[('s', [0.15, 0.45, 0.5, 0.0, 0.25]), ('aa', [0.15, 0.45, 0.5, 0.5, 0.25])], [('m', [0.0, 0.0, 0.3, 0.4, 0.0]), ('ih', [0.0, 0.45, 0.3, 0.2, 0.0])]]
</snippet></ROW><ROW><id>8188123</id><snippet>import pprint; pprint.pprint([[(j, [(float(x[0]) + float(x[1])) / 2.0 for x in e]) for j,e in i] for i in newlist])
</snippet></ROW><ROW><id>8188123</id><snippet>~$ python ~/test.py 
[[('s', [0.15, 0.45, 0.5, 0.0, 0.25]), ('aa', [0.15, 0.45, 0.5, 0.5, 0.25])],
 [('m', [0.0, 0.0, 0.3, 0.4, 0.0]), ('ih', [0.0, 0.45, 0.3, 0.2, 0.0])]]
</snippet></ROW><ROW><id>8188299</id><snippet>request.POST</snippet></ROW><ROW><id>8188299</id><snippet>dict.get</snippet></ROW><ROW><id>8188299</id><snippet>content = request.POST.get('content')
</snippet></ROW><ROW><id>8188299</id><snippet>None</snippet></ROW><ROW><id>8188299</id><snippet>content = request.POST.get('content', 'this is the default')
</snippet></ROW><ROW><id>8188524</id><snippet>procedure</snippet></ROW><ROW><id>8188524</id><snippet>def procedure(self):#{{{
        s=self.s
        print s
        self.operation()
        # the following line is edited
        print self.s
</snippet></ROW><ROW><id>8188524</id><snippet>self.s</snippet></ROW><ROW><id>8188617</id><snippet>ModelMultipleChoiceField</snippet></ROW><ROW><id>8188617</id><snippet>render</snippet></ROW><ROW><id>8188617</id><snippet>render_options</snippet></ROW><ROW><id>8188617</id><snippet>widgets</snippet></ROW><ROW><id>8188617</id><snippet>forms.CheckboxSelectMultiple</snippet></ROW><ROW><id>8188643</id><snippet>import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np

def inWhichEllipse(x,y,rads):
    '''
    With a list of (r1,r2) pairs, rads, return the index of the pair in which
    the point x,y resides. Return None as the index if it is outside all 
    Ellipses.
    '''
    xx = x*x
    yy = y*y

    count = 0
    ithEllipse =0
    while True:
        rx,ry = rads[count]
        ellips = xx/(rx*rx)+yy/(ry*ry)
        if ellips &lt; 1:
            ithEllipse = count
            break
        count+=1
        if count &gt;= len(rads):
            ithEllipse = None
            break

    return ithEllipse

rads = zip(np.arange(.5,10,.5),np.arange(.125,2.5,.25))

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xlim(-15,15)
ax.set_ylim(-15,15)

# plot Ellipses
for rx,ry in rads:
    ellipse = patches.Ellipse((0,0),rx*2,ry*2,fc='none',ec='red')    
    ax.add_patch(ellipse)

x=3.0
y=1.0
idx = inWhichEllipse(x,y,rads)
rx,ry = rads[idx]
ellipse = patches.Ellipse((0,0),rx*2,ry*2,fc='none',ec='blue')    
ax.add_patch(ellipse)

if idx != None:
    circle = patches.Circle((x,y),.1)
    ax.add_patch(circle)

plt.show()
</snippet></ROW><ROW><id>8188643</id><snippet>inWhichEllipse</snippet></ROW><ROW><id>8188841</id><snippet>my_module</snippet></ROW><ROW><id>8188841</id><snippet>reload(my_module)
</snippet></ROW><ROW><id>8188841</id><snippet>reload()</snippet></ROW><ROW><id>8188858</id><snippet>C = B[A]</snippet></ROW><ROW><id>8188858</id><snippet>In [1]: import numpy as np
In [2]: A = np.array([[1, 1, 0, 2],
   ...:            [1, 0, 0, 2],
   ...:            [1, 1, 0, 2]])

In [3]: B = np.array([0, 5, 3])

In [4]: B[A]
Out[4]: 
array([[5, 5, 0, 3],
       [5, 0, 0, 3],
       [5, 5, 0, 3]])
</snippet></ROW><ROW><id>8189085</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as B
&gt;&gt;&gt; s = B("&lt;span class='class_id' id='New_line'&gt;&lt;/span&gt;")
&gt;&gt;&gt; s.span.attrs
[(u'class', u'class_id'), (u'id', u'New_line')]
</snippet></ROW><ROW><id>8189196</id><snippet>l = [[2,2,2],[3,3,3],[4,4,4]
for i1 in xrange(len(l)):
    for i2 in xrange(len(l[i1])):
        print i1, i2, l[i1][i2]
</snippet></ROW><ROW><id>8189196</id><snippet>for inner_l in l:
    for item in inner_l:
        print item
</snippet></ROW><ROW><id>8189196</id><snippet>enumerate</snippet></ROW><ROW><id>8189196</id><snippet>for i1, inner_l in enumerate(l):
    for i2, item in enumerate(inner_l):
        print i1, i2, item, l[i1][i2]
</snippet></ROW><ROW><id>8189385</id><snippet>import urllib, urllib2, cookielib
url='http://localhost:8080/rest/auth/latest/session'
post={"username" : "admin", "password" : "hunter2"}
post_data=urllib.urlencode(post)
cookie = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
opener.open(url,post_data)
cookie.save('cookie_filename', True)
</snippet></ROW><ROW><id>8189597</id><snippet>@bottle.route("/&lt;url:re:.+&gt;")
</snippet></ROW><ROW><id>8189597</id><snippet>@bottle.route("/:url#.+#")
</snippet></ROW><ROW><id>8189672</id><snippet>class Base(object):
    foo = 5

class Derived(Base):
    """A class derived from Base.

    &gt;&gt;&gt; bar = Base()
    &gt;&gt;&gt; print bar.foo
    5
    &gt;&gt;&gt; foobar = Derived()
    &gt;&gt;&gt; print foobar.foo
    6
    &gt;&gt;&gt; print foobar.__class__.__base__.foo
    5
    &gt;&gt;&gt; foobar.__class__.__base__.foo = 7
    &gt;&gt;&gt; bar.foo
    7
    """
    foo = 6
</snippet></ROW><ROW><id>8189672</id><snippet>foo</snippet></ROW><ROW><id>8189672</id><snippet>foo</snippet></ROW><ROW><id>8189749</id><snippet>psf = Pyro4.Proxy("PYRONAME:MyApp.Factories.ProductFactory")
product = psf.GetProductOnButton(buttonNoPressed, parentProductId)
</snippet></ROW><ROW><id>8190142</id><snippet>kinds = (("p_audio", ".mp3"), ("p_video", ".flv"), ("p_swf", ".swf"))
extra_context.update((key, False) for key, _ in kinds)

for key, ext in kinds:
    entries = plate.parts.filter(content__iendswith=ext)
    if entries:
        extra_context[key] = entries[0]
        break
</snippet></ROW><ROW><id>8190150</id><snippet>for line in file:
    line = line.strip()
    llist = line.split()

    if llist and llist[0] == 'NUMS':
        for line in file:
            line = line.strip()
            if line == 'END':
                break
            else:
                print line,
        print # newline
</snippet></ROW><ROW><id>8190433</id><snippet>struct</snippet></ROW><ROW><id>8190433</id><snippet>bytes</snippet></ROW><ROW><id>8190433</id><snippet>open(filename, 'rb')</snippet></ROW><ROW><id>8190433</id><snippet>import os

origbytes = os.path.getsize(firstfile)
fullbytes = os.path.getsize(secondfile)
numbytes = fullbytes-origbytes

with open(secondfile,'rb') as f:
    first = f.seek(origbytes)
    rest = f.read()

with open(newfile,'wb') as f:
    f.write(rest)
</snippet></ROW><ROW><id>8190445</id><snippet>conf</snippet></ROW><ROW><id>8190445</id><snippet>.htaccess</snippet></ROW><ROW><id>8190445</id><snippet>AddHandler cgi-script .cgi .py

Options +ExecCGI
</snippet></ROW><ROW><id>8190445</id><snippet>chmod</snippet></ROW><ROW><id>8190445</id><snippet>755</snippet></ROW><ROW><id>8190445</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>8190445</id><snippet>C:\Python32\python.exe</snippet></ROW><ROW><id>8190445</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>8190445</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>8190486</id><snippet>platformSubscriptions</snippet></ROW><ROW><id>8190486</id><snippet>platform</snippet></ROW><ROW><id>8190486</id><snippet>id</snippet></ROW><ROW><id>8190486</id><snippet>for subedPlat in user.platformSubscriptions:
    if subedPlat.id == platform.user.platformSubscriptions.remove(subedPlat)
</snippet></ROW><ROW><id>8190578</id><snippet>import main; main.display1()</snippet></ROW><ROW><id>8190578</id><snippet>import whateverTHEfileNAMEis</snippet></ROW><ROW><id>8190578</id><snippet>class Class1:
    def __init__(self, value):
        self.value = value

    def main_logic(self):
        if self.value == 'y':
            return self.value
        else:
            self.value == 'n':
                import main
                main.display1()
</snippet></ROW><ROW><id>8190854</id><snippet>option_string</snippet></ROW><ROW><id>8190944</id><snippet>if moveE:</snippet></ROW><ROW><id>8190944</id><snippet>moveE</snippet></ROW><ROW><id>8190944</id><snippet>moveW</snippet></ROW><ROW><id>8191090</id><snippet>resource_stream</snippet></ROW><ROW><id>8191093</id><snippet>from pyparsing import *

my_expr = Literal("The") + "quick" + "brown" + "fox" + "jumps" + "over" + "the" + "lazy" + "dog"

string_1 = """The quick brown 
fox jumps over the lazy dog.
"""

string_2 = """The quick brown fox jumps
over the lazy dog.
"""

for test in (string_1, string_2):
    print '-'*40
    print test
    print my_expr.parseString(test)
    print
</snippet></ROW><ROW><id>8191093</id><snippet>my_expr = And(map(Literal, "The quick brown fox jumps over the lazy dog".split()))
</snippet></ROW><ROW><id>8191093</id><snippet>originalTextFor</snippet></ROW><ROW><id>8191093</id><snippet>my_expr = originalTextFor(my_expr)
</snippet></ROW><ROW><id>8191151</id><snippet>id int primary key
</snippet></ROW><ROW><id>8191151</id><snippet>id integer primary key
</snippet></ROW><ROW><id>8191151</id><snippet>sqlite&gt; create table a (a integer primary key, b integer);
sqlite&gt; insert into a (b) values (0);
sqlite&gt; select * from a;
1|0
sqlite&gt; create table b (a int primary key, b integer);
sqlite&gt; insert into b (b) values (0);
sqlite&gt; select * from b;
|0
</snippet></ROW><ROW><id>8191370</id><snippet>line = self.app.stdout.readline()
</snippet></ROW><ROW><id>8191370</id><snippet>readline()</snippet></ROW><ROW><id>8191370</id><snippet>stdin</snippet></ROW><ROW><id>8191370</id><snippet>stdout</snippet></ROW><ROW><id>8191370</id><snippet>stderr</snippet></ROW><ROW><id>8191370</id><snippet>ioloop</snippet></ROW><ROW><id>8191478</id><snippet>loremipsum</snippet></ROW><ROW><id>8191478</id><snippet>pypsum</snippet></ROW><ROW><id>8191478</id><snippet>setup.py</snippet></ROW><ROW><id>8191478</id><snippet>loremipsum</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>egg = {
    'name': name,
    'version': module.__version__,
    'author': author,
    'author_email': email.strip('&lt;&gt;'),
    'url': url,
    'description': "A Lorem Ipsum text generator",
    'long_description': long_description,
    'classifiers': module.__classifiers__,
    'keywords': ['lorem', 'ipsum', 'text', 'generator'],
    'setup_requires': ['distribute'],
    'install_requires': ['distribute'],
    'packages': [name],
    # 'package_dir': {'': '.'},
    # 'package_data': {'': 'default/*.txt'},
    # 'data_files': [(name, ('default/dictionary.txt', 'default/sample.txt'))],
    'include_package_data': True,
    'test_suite': 'tests.suite' }
</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>setup.py</snippet></ROW><ROW><id>8191478</id><snippet>virtualenv</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>virtualenv</snippet></ROW><ROW><id>8191478</id><snippet>no-site-packages</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>virtualenv</snippet></ROW><ROW><id>8191478</id><snippet>distribute</snippet></ROW><ROW><id>8191478</id><snippet>setuptools</snippet></ROW><ROW><id>8191478</id><snippet>pkg_resources</snippet></ROW><ROW><id>8191478</id><snippet>virtualenv</snippet></ROW><ROW><id>8191478</id><snippet>virtualenv --distribute --no-site-packages /path/to/ve
</snippet></ROW><ROW><id>8191478</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8191559</id><snippet>aa
  1           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE        
localFunc
 10           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE 
</snippet></ROW><ROW><id>8191559</id><snippet>localFunc.func_globals != compiledFunc.func_globals</snippet></ROW><ROW><id>8191559</id><snippet>exec cc in globals(), dd
</snippet></ROW><ROW><id>8191838</id><snippet>form = myform(request.POST)
if form.is_valid():
        # do something awesome
return render_to_response(...)
</snippet></ROW><ROW><id>8191898</id><snippet>local()</snippet></ROW><ROW><id>8191898</id><snippet>local()</snippet></ROW><ROW><id>8191970</id><snippet>json</snippet></ROW><ROW><id>8191970</id><snippet>simplejson</snippet></ROW><ROW><id>8191970</id><snippet>simplejson</snippet></ROW><ROW><id>8192206</id><snippet># password prompt 
while True:
    mysql_password = getpass('Please enter MySQL root password: ')
    mysql_password_confirmation = getpass('Please confirm your password: ')
    if mysql_password == mysql_password_confirmation:
        break
    else:
        print "Passwords don't match"

# set the value in debconf
with settings(hide('warnings', 'running', 'stdout', 'stderr'),
              warn_only=True):
    if not run('dpkg-query --show mysql-server'):
        sudo('echo "mysql-server-5.1 mysql-server/root_password password '
            '%s" | debconf-set-selections' % mysql_password)
        sudo('echo "mysql-server-5.1 mysql-server/root_password_again '
             'password %s" | debconf-set-selections' % mysql_password)
</snippet></ROW><ROW><id>8192426</id><snippet>array</snippet></ROW><ROW><id>8192426</id><snippet>a.fromlist([int(val) for val in stdin.read().split()])
</snippet></ROW><ROW><id>8192426</id><snippet>&gt;&gt;&gt; a
array('i', [1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>8192426</id><snippet>a = array('i', (int(val) for row in stdin for val in row.split()))
</snippet></ROW><ROW><id>8192426</id><snippet>from StringIO import StringIO
import numpy as np

# fake stdin
stdin = StringIO("""1 2
3 4
5 6""")

a = np.loadtxt(stdin, dtype=np.int)
</snippet></ROW><ROW><id>8192426</id><snippet>&gt;&gt;&gt; a
array([[1, 2],
       [3, 4],
       [5, 6]])
</snippet></ROW><ROW><id>8192426</id><snippet>a = [map(int, row.split()) for row in stdin]
</snippet></ROW><ROW><id>8192426</id><snippet>&gt;&gt;&gt; a
[[1, 2], [3, 4], [5, 6]]
</snippet></ROW><ROW><id>8192557</id><snippet>&gt;&gt;&gt; img = 'ABCDEFGHIJKL'
&gt;&gt;&gt; x, y = 4, 3
&gt;&gt;&gt; def chunks(l, n):
...     for i in xrange(0, len(l), n):
...         yield l[i:i+n]
... 
&gt;&gt;&gt; [row for row in chunks(img, x)]
['ABCD', 'EFGH', 'IJKL']
&gt;&gt;&gt; ''.join(reversed([row for row in chunks(img, x)]))
'IJKLEFGHABCD'
</snippet></ROW><ROW><id>8192557</id><snippet>&gt;&gt;&gt; A
array([[ 1.,  0.,  0.],
       [ 0.,  2.,  0.],
       [ 0.,  0.,  3.]])
&gt;&gt;&gt; np.flipud(A)
array([[ 0.,  0.,  3.],
       [ 0.,  2.,  0.],
       [ 1.,  0.,  0.]])
</snippet></ROW><ROW><id>8192557</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; img = [0x00, 0x01, 0x02, 0x03]
&gt;&gt;&gt; img
[0, 1, 2, 3]
&gt;&gt;&gt; x = y = 2
&gt;&gt;&gt; aimg = np.array(img).reshape(x, y)
&gt;&gt;&gt; aimg
array([[0, 1],
       [2, 3]])
&gt;&gt;&gt; np.flipud(aimg)
array([[2, 3],
       [0, 1]])
</snippet></ROW><ROW><id>8192608</id><snippet>A=np.random.random(100).reshape(10,10)

# Padded copy of A
B=np.empty((12,12))
B[1:-1,1:-1]=A
B[0,1:-1]=A[0,:]   
B[-1,1:-1]=A[-1,:]
B[1:-1,0]=A[:,0]
B[1:-1,-1]=A[:,-1]
B[0,0]=A[1,1]
B[-1,-1]=A[-1,-1]
B[-1,0]=A[-1,0]
B[0,1]=A[0,1]

# Compute 4 absolute differences
D1=np.abs(B[1:,1:-1]-B[:-1,1:-1]) # first dimension
D2=np.abs(B[1:-1,1:]-B[1:-1,:-1]) # second dimension
D3=np.abs(B[1:,1:]-B[:-1,:-1]) # Diagonal
D4=np.abs(B[1:,:-1]-B[:-1,1:]) # Antidiagonal

# Compute maxima in each direction
M1=np.maximum(D1[1:,:],D1[:-1,:])
M2=np.maximum(D2[:,1:],D2[:,:-1])
M3=np.maximum(D3[1:,1:],D3[:-1,:-1])
M4=np.maximum(D4[1:,:-1],D4[:-1,1:])

# Compute local maximum for each entry
M=np.max(np.dstack([M1,M2,M3,M4]),axis=2)
</snippet></ROW><ROW><id>8192608</id><snippet>T=np.where((M==np.max(np.dstack([Ma,Mb,Mc,Md,Me,Mf,Mg,Mh]),axis=2)))
</snippet></ROW><ROW><id>8192626</id><snippet>obj</snippet></ROW><ROW><id>8192626</id><snippet>getInfoFor</snippet></ROW><ROW><id>8192626</id><snippet>review_state</snippet></ROW><ROW><id>8192626</id><snippet>workflow_tool.getInfoFor</snippet></ROW><ROW><id>8192626</id><snippet>brain</snippet></ROW><ROW><id>8192626</id><snippet>review_state</snippet></ROW><ROW><id>8192626</id><snippet>brain.review_state</snippet></ROW><ROW><id>8192626</id><snippet>workflow_tool.getInfoFor(obj, 'review_state')</snippet></ROW><ROW><id>8193079</id><snippet>Javascript is client-side.</snippet></ROW><ROW><id>8193079</id><snippet>Python is server side</snippet></ROW><ROW><id>8193125</id><snippet># class labels are 0 and 1
labeled_data = [
    (1, featureset_1),
    (0, featureset_2),
    (1, featureset_3),
    # ...
]

# naive_bayes is your already trained classifier,
# preferrably not on the data you're testing on :)

from pyroc import ROCData

roc_data = ROCData(
    (label, naive_bayes.prob_classify(featureset).prob(1))
    for label, featureset
    in labeled_data
)
roc_data.plot()
</snippet></ROW><ROW><id>8193125</id><snippet>.prob(1)</snippet></ROW><ROW><id>8193191</id><snippet>dtype=object</snippet></ROW><ROW><id>8193191</id><snippet>import numpy as np

class Foo: pass

arr=np.empty(2,dtype=object)
arr[:]=[Foo(),Foo()]
print(arr)
# [&lt;__main__.Foo instance at 0xb7827d0c&gt;
#  &lt;__main__.Foo instance at 0xb748b5ac&gt;]

print(arr.dtype)
# object
</snippet></ROW><ROW><id>8193209</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>8193209</id><snippet>f = open(os.path.dirname(__file__) + /'BP/file.pdf', r)</snippet></ROW><ROW><id>8193456</id><snippet>sudo rabbitmqctl list_queues -p my_vhost</snippet></ROW><ROW><id>8193456</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>8193456</id><snippet>haigha</snippet></ROW><ROW><id>8193592</id><snippet>data = [

    { 'id': 1, 'parent_id': 2, 'name': "Node1" },
    { 'id': 2, 'parent_id': 5, 'name': "Node2" },
    { 'id': 3, 'parent_id': 0, 'name': "Node3" },
    { 'id': 4, 'parent_id': 5, 'name': "Node4" },
    { 'id': 5, 'parent_id': 0, 'name': "Node5" },
    { 'id': 6, 'parent_id': 3, 'name': "Node6" },
    { 'id': 7, 'parent_id': 3, 'name': "Node7" },
    { 'id': 8, 'parent_id': 0, 'name': "Node8" },
    { 'id': 9, 'parent_id': 1, 'name': "Node9" }
]
</snippet></ROW><ROW><id>8193592</id><snippet>sub</snippet></ROW><ROW><id>8193592</id><snippet>def list_to_tree(data):
    out = { 
        0: { 'id': 0, 'parent_id': 0, 'name': "Root node", 'sub': [] }
    }

    for p in data:
        out.setdefault(p['parent_id'], { 'sub': [] })
        out.setdefault(p['id'], { 'sub': [] })
        out[p['id']].update(p)
        out[p['parent_id']]['sub'].append(out[p['id']])

    return out[0]
</snippet></ROW><ROW><id>8193592</id><snippet>tree = list_to_tree(data)
import pprint
pprint.pprint(tree)
</snippet></ROW><ROW><id>8193592</id><snippet>def list_to_tree(data):
    out = {
        'root': { 'id': 0, 'parent_id': 0, 'name': "Root node", 'sub': [] }
    }

    for p in data:
        pid = p['parent_id'] or 'root'
        out.setdefault(pid, { 'sub': [] })
        out.setdefault(p['id'], { 'sub': [] })
        out[p['id']].update(p)
        out[pid]['sub'].append(out[p['id']])

    return out['root']
    # or return out['root']['sub'] to return the list of root nodes
</snippet></ROW><ROW><id>8193963</id><snippet>try:
    idx = db.node.indexes.get('my_index')
except ValueError,e:
    idx = db.node.indexes.create('my_index')
</snippet></ROW><ROW><id>8193963</id><snippet>if db.node.indexes.exists('my_index'):
    db.node.indexes.get('my_index')
else:
    db.node.indexes.create('my_index')
</snippet></ROW><ROW><id>8193963</id><snippet>hits = iter(users_idx['id']['3'])
c = hits.next()
hits.close()
</snippet></ROW><ROW><id>8194050</id><snippet>__getattribute__</snippet></ROW><ROW><id>8194050</id><snippet>__getattribute__</snippet></ROW><ROW><id>8194050</id><snippet>getattr()</snippet></ROW><ROW><id>8194050</id><snippet>getattr(contenttype, classname)(param= value)
</snippet></ROW><ROW><id>8194302</id><snippet>tests/runner.py</snippet></ROW><ROW><id>8194302</id><snippet>from django.test.simple import DjangoTestSuiteRunner
from django.conf import settings

class AppsTestSuiteRunner(DjangoTestSuiteRunner):
    """ Override the default django 'test' command, include only
        apps that are part of this project
        (unless the apps are specified explicitly)
    """


    def run_tests(self, test_labels, extra_tests=None, **kwargs):
        if not test_labels:
            PROJECT_PREFIX = 'my_project.'
            test_labels = [app.replace(PROJECT_PREFIX, '')
                for app in settings.INSTALLED_APPS
                if app.startswith(PROJECT_PREFIX)]
        return super(AppsTestSuiteRunner, self).run_tests(
              test_labels, extra_tests, **kwargs)
</snippet></ROW><ROW><id>8194302</id><snippet>settings.py</snippet></ROW><ROW><id>8194302</id><snippet>TEST_RUNNER = 'my_project.tests.runner.AppsTestSuiteRunner'
</snippet></ROW><ROW><id>8194331</id><snippet>SOCK_DGRAM</snippet></ROW><ROW><id>8194331</id><snippet>SOCK_STREAM</snippet></ROW><ROW><id>8194331</id><snippet>socket.create_connection</snippet></ROW><ROW><id>8194419</id><snippet>[build]
compiler = mingw32

[build_ext]
compiler = mingw32

[build_clib]
compiler = mingw32
</snippet></ROW><ROW><id>8194828</id><snippet>(?&lt;=^\bHEADa|HEAD\b)
</snippet></ROW><ROW><id>8194828</id><snippet>(?:(?&lt;=^HEADa\b)|(?&lt;=\bHEAD\b))
</snippet></ROW><ROW><id>8194828</id><snippet>(?:^HEADa|\bHEAD)\b
</snippet></ROW><ROW><id>8194828</id><snippet>(.*?)</snippet></ROW><ROW><id>8194982</id><snippet>map</snippet></ROW><ROW><id>8194982</id><snippet>result = map(lambda x: x * P, S)
</snippet></ROW><ROW><id>8194982</id><snippet>result = [x * P for x in S]
</snippet></ROW><ROW><id>8195232</id><snippet>    import pys60usb
    usb = pys60usb.USBConnection()

    # Connect to port 1. Works with most S60 3rd devices.
    usb.connect( port = 1, mode = pys60usb.ECommExclusive )
</snippet></ROW><ROW><id>8195766</id><snippet>ftp.</snippet></ROW><ROW><id>8195766</id><snippet>FTP_TLS</snippet></ROW><ROW><id>8195766</id><snippet>from ftplib import FTP_TLS
ftp = FTP_TLS("10.0.1.14")
</snippet></ROW><ROW><id>8195809</id><snippet>import numpy as np
x = np.arange(4)
numrepeats = 3

y = np.lib.stride_tricks.as_strided(x, (numrepeats,)+x.shape, (0,)+x.strides)

print y
x[0] = 9
print y
</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>import numpy as np
x = np.arange(4)
numrepeats = 1e15

y = np.lib.stride_tricks.as_strided(x, (numrepeats,)+x.shape, (0,)+x.strides)
</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>y**2</snippet></ROW><ROW><id>8195809</id><snippet>y **= 2</snippet></ROW><ROW><id>8195809</id><snippet>x **= 2</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8195809</id><snippet>def f(x):
    return x**3

x[...] = f(x)
print y
</snippet></ROW><ROW><id>8195809</id><snippet>y</snippet></ROW><ROW><id>8195809</id><snippet>x</snippet></ROW><ROW><id>8196360</id><snippet>lis &gt; 2</snippet></ROW><ROW><id>8196360</id><snippet>True</snippet></ROW><ROW><id>8196360</id><snippet>"list" &gt; "int"</snippet></ROW><ROW><id>8196360</id><snippet>True</snippet></ROW><ROW><id>8196360</id><snippet>1</snippet></ROW><ROW><id>8196360</id><snippet>[x for x in lis if x &gt; 2]
</snippet></ROW><ROW><id>8196440</id><snippet>/System/Library</snippet></ROW><ROW><id>8196440</id><snippet>/System/​Library/​Frameworks/​Python.framework/​Versions/​2.6/​Extras/​lib/​pyth‌​on/​pkg_resources.pyc</snippet></ROW><ROW><id>8196440</id><snippet>virtualenv</snippet></ROW><ROW><id>8196440</id><snippet>virtualenv</snippet></ROW><ROW><id>8196440</id><snippet>easy_install</snippet></ROW><ROW><id>8196440</id><snippet>/usr/bin</snippet></ROW><ROW><id>8196440</id><snippet>$ which python
/Library/Frameworks/Python.framework/Versions/2.7/bin/python
</snippet></ROW><ROW><id>8196440</id><snippet>virtualenv</snippet></ROW><ROW><id>8196440</id><snippet>pip</snippet></ROW><ROW><id>8196440</id><snippet>distribute</snippet></ROW><ROW><id>8196440</id><snippet>setuptools</snippet></ROW><ROW><id>8196440</id><snippet>virtualenv</snippet></ROW><ROW><id>8196440</id><snippet>virtualenv</snippet></ROW><ROW><id>8196484</id><snippet>login_required</snippet></ROW><ROW><id>8196526</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.setWindowTitle(self.tr('Document Printer'))
        self.editor = QtGui.QTextEdit(self)
        self.editor.textChanged.connect(self.handleTextChanged)
        self.buttonOpen = QtGui.QPushButton('Open', self)
        self.buttonOpen.clicked.connect(self.handleOpen)
        self.buttonPrint = QtGui.QPushButton('Print', self)
        self.buttonPrint.clicked.connect(self.handlePrint)
        self.buttonPreview = QtGui.QPushButton('Preview', self)
        self.buttonPreview.clicked.connect(self.handlePreview)
        layout = QtGui.QGridLayout(self)
        layout.addWidget(self.editor, 0, 0, 1, 3)
        layout.addWidget(self.buttonOpen, 1, 0)
        layout.addWidget(self.buttonPrint, 1, 1)
        layout.addWidget(self.buttonPreview, 1, 2)
        self.handleTextChanged()

    def handleOpen(self):
        path = QtGui.QFileDialog.getOpenFileName(
            self, self.tr('Open file'), '',
            self.tr('HTML files (*.html);;Text files (*.txt)'))
        if not path.isEmpty():
            stream = QtCore.QFile(path)
            if stream.open(QtCore.QIODevice.ReadOnly):
                info = QtCore.QFileInfo(path)
                text = QtCore.QString.fromLocal8Bit(stream.readAll())
                if info.completeSuffix() == 'html':
                    self.editor.setHtml(text)
                else:
                    self.editor.setPlainText(text)
            stream.close()

    def handlePrint(self):
        dialog = QtGui.QPrintDialog()
        if dialog.exec_() == QtGui.QDialog.Accepted:
            self.editor.document().print_(dialog.printer())

    def handlePreview(self):
        dialog = QtGui.QPrintPreviewDialog()
        dialog.paintRequested.connect(self.editor.print_)
        dialog.exec_()

    def handleTextChanged(self):
        enable = not self.editor.document().isEmpty()
        self.buttonPrint.setEnabled(enable)
        self.buttonPreview.setEnabled(enable)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8196526</id><snippet>render</snippet></ROW><ROW><id>8196526</id><snippet>def handlePreview(self):
    dialog = QtGui.QPrintPreviewDialog()
    dialog.paintRequested.connect(self.handlePaintRequest)
    dialog.exec_()

def handlePaintRequest(self, printer):
    self.view.render(QtGui.QPainter(printer))
</snippet></ROW><ROW><id>8196691</id><snippet>C:\&gt;ftype | findstr -i python
Python.CompiledFile="C:\Python27\python.exe" "%1" %*
Python.File="C:\Python27\python.exe" "%1" %*
Python.NoConFile="C:\Python27\pythonw.exe" "%1" %*
</snippet></ROW><ROW><id>8196691</id><snippet>C:\&gt;assoc | findstr -i python
.py=Python.File
.pyc=Python.CompiledFile
.pyo=Python.CompiledFile
.pyw=Python.NoConFile
</snippet></ROW><ROW><id>8196691</id><snippet>assoc .py=Python.File
assoc .pyc=Python.CompiledFile
assoc .pyo=Python.CompiledFile
assoc .pyw=Python.NoConFile
</snippet></ROW><ROW><id>8196763</id><snippet>for</snippet></ROW><ROW><id>8196763</id><snippet>.items()</snippet></ROW><ROW><id>8196763</id><snippet>{% for key, value in menu.items %}
    &lt;li class="single-link"&gt;&lt;a href="{{ value.url }}" title="{{ value.caption }}"&gt;{{ value.caption }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>8196763</id><snippet>for value in menu.values</snippet></ROW><ROW><id>8196996</id><snippet>vs</snippet></ROW><ROW><id>8196996</id><snippet>vs</snippet></ROW><ROW><id>8196996</id><snippet>Vertex</snippet></ROW><ROW><id>8196996</id><snippet>index</snippet></ROW><ROW><id>8196996</id><snippet>index</snippet></ROW><ROW><id>8196996</id><snippet>name</snippet></ROW><ROW><id>8196996</id><snippet>id</snippet></ROW><ROW><id>8196996</id><snippet>for v in graph.vs:
    outcsv.writerow([v["name"], estimate[v.index]])
</snippet></ROW><ROW><id>8196996</id><snippet>vs</snippet></ROW><ROW><id>8196996</id><snippet>from itertools import izip

for name, est in izip(graph.vs["name"], estimate):
    outcsv.writerow([name, est])
</snippet></ROW><ROW><id>8196996</id><snippet>outcsv.writerows(izip(graph.vs["name"], estimate))
</snippet></ROW><ROW><id>8197100</id><snippet>xml.etree.ElementTree.tostring()</snippet></ROW><ROW><id>8197100</id><snippet>pretty_print</snippet></ROW><ROW><id>8197100</id><snippet>lxml.etree.tostring()</snippet></ROW><ROW><id>8197100</id><snippet>pretty_print</snippet></ROW><ROW><id>8197178</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;td casd2" aasdeft" class="satyle3"&gt;&lt;b&gt;&lt;a asddidasd?ct=Peasds&amp;fasdaao=Monsdar&amp;pID=19635"...'
&gt;&gt;&gt; match = re.search(".*pID=(\d+).*",s)
&gt;&gt;&gt; if match:
...   match.group(1)
... 
'19635'
</snippet></ROW><ROW><id>8197188</id><snippet>func</snippet></ROW><ROW><id>8197188</id><snippet>import numpy as np
import scipy.optimize as optimize
import textwrap

funcstr=textwrap.dedent('''\
def func(x, {p}):
    return x * 2*a + 4*b - 5*c
''')
def make_model(**kwargs):
    params=set(('a','b','c')).difference(kwargs.keys())
    exec funcstr.format(p=','.join(params)) in kwargs
    return kwargs['func']

func=make_model(a=3, b=1)

xdata = np.array([1,3,6,8,10])
ydata = np.array([  0.91589774,   4.91589774,  10.91589774,  14.91589774,  18.91589774])
popt, pcov = optimize.curve_fit(func, xdata, ydata)
print(popt)
# [ 5.49682045]
</snippet></ROW><ROW><id>8197188</id><snippet>func=make_model(a=3, b=1)
</snippet></ROW><ROW><id>8197188</id><snippet>make_model</snippet></ROW><ROW><id>8197188</id><snippet>func</snippet></ROW><ROW><id>8197188</id><snippet>optimize.curve_fit</snippet></ROW><ROW><id>8197188</id><snippet>func</snippet></ROW><ROW><id>8197188</id><snippet>exec</snippet></ROW><ROW><id>8197188</id><snippet>func</snippet></ROW><ROW><id>8197188</id><snippet>func</snippet></ROW><ROW><id>8197188</id><snippet>x</snippet></ROW><ROW><id>8197188</id><snippet>c</snippet></ROW><ROW><id>8197188</id><snippet>popt</snippet></ROW><ROW><id>8197188</id><snippet>c</snippet></ROW><ROW><id>8197188</id><snippet>textwrap.dedent</snippet></ROW><ROW><id>8197188</id><snippet>textwrap.dedent</snippet></ROW><ROW><id>8197188</id><snippet>funcstr</snippet></ROW><ROW><id>8197188</id><snippet>textwrap.dedent</snippet></ROW><ROW><id>8197188</id><snippet>def foo():
    funcstr=textwrap.dedent('''\
        def func(x, {p}):
            return x * 2*a + 4*b - 5*c
        ''')
</snippet></ROW><ROW><id>8197188</id><snippet>def foo():
    funcstr='''\
def func(x, {p}):
    return x * 2*a + 4*b - 5*c
'''
</snippet></ROW><ROW><id>8197188</id><snippet>def foo():
    funcstr=(
        'def func(x, {p}):\n'
        '    return x * 2*a + 4*b - 5*c'
        )
</snippet></ROW><ROW><id>8197243</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = '''&lt;span dir="ltr"&gt;&lt;a href="unique?id=1234"&gt;Jay-Z&lt;/a&gt; &amp; 
... &lt;a href="unique?id" = 321"&gt;Kanye West&lt;/a&gt; - Watch the Throne&lt;/span&gt;'''
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; soup.span.contents[-1].strip('- ')
u'Watch the Throne'
</snippet></ROW><ROW><id>8197564</id><snippet>found = x in somelist
</snippet></ROW><ROW><id>8197564</id><snippet>i = somelist.index(x) if x in somelist else None
</snippet></ROW><ROW><id>8197687</id><snippet>range(amount)</snippet></ROW><ROW><id>8197687</id><snippet>"".join(my_list)</snippet></ROW><ROW><id>8197851</id><snippet>except</snippet></ROW><ROW><id>8197851</id><snippet>validate()</snippet></ROW><ROW><id>8197851</id><snippet>except</snippet></ROW><ROW><id>8197851</id><snippet>validate()</snippet></ROW><ROW><id>8197851</id><snippet>return</snippet></ROW><ROW><id>8197851</id><snippet>None</snippet></ROW><ROW><id>8198170</id><snippet>sys.argv</snippet></ROW><ROW><id>8198170</id><snippet>import sys
xDate = sys.argv[1]
</snippet></ROW><ROW><id>8198170</id><snippet>import argparse

parser=argparse.ArgumentParser()
parser.add_argument('xDate')
args=parser.parse_args()
</snippet></ROW><ROW><id>8198170</id><snippet>args.xDate</snippet></ROW><ROW><id>8198170</id><snippet>xDate</snippet></ROW><ROW><id>8198170</id><snippet>argparse</snippet></ROW><ROW><id>8198170</id><snippet>delete_images.py -h
</snippet></ROW><ROW><id>8198170</id><snippet>xDate</snippet></ROW><ROW><id>8198170</id><snippet>xDate</snippet></ROW><ROW><id>8198170</id><snippet>datetime.date</snippet></ROW><ROW><id>8198170</id><snippet>expDate = time.strptime(xDate, '%Y-%m-%d')
</snippet></ROW><ROW><id>8198170</id><snippet>xDate</snippet></ROW><ROW><id>8198170</id><snippet>argparse</snippet></ROW><ROW><id>8198170</id><snippet>args.xDate</snippet></ROW><ROW><id>8198170</id><snippet>import argparse
import time

def mkdate(datestr):
    return time.strptime(datestr, '%Y-%m-%d')
parser=argparse.ArgumentParser()
parser.add_argument('xDate',type=mkdate)
args=parser.parse_args()
print(args.xDate)
</snippet></ROW><ROW><id>8198170</id><snippet>% test.py 2000-1-1
</snippet></ROW><ROW><id>8198170</id><snippet>time.struct_time(tm_year=2000, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=1, tm_isdst=-1)
</snippet></ROW><ROW><id>8198170</id><snippet>expDate = time.strptime(xDate, '%Y-%m-%d')
</snippet></ROW><ROW><id>8198170</id><snippet>for-loop</snippet></ROW><ROW><id>8198170</id><snippet>xDate</snippet></ROW><ROW><id>8198170</id><snippet>expDate</snippet></ROW><ROW><id>8198226</id><snippet>import re
from simplejson import JSONDecoder
from simplejson.decoder import JSONDecodeError
#from cherrypy._cperror import HTTPError
from decimal import Decimal

class ValidationException(Exception):
    pass 

class ArgumentException(ValidationException):
    pass

class MandatoryException(ValidationException):
    pass

class DenialException(ValidationException):
    pass

class ParameterTypeException(ValidationException):
    pass

class ParameterValueException(ValidationException):
    pass

def validate_parameters(args,kwargs,required_args=None
                                     ,deny_args=None
                                     ,requires=None
                                     ,deny=None
                                     ,deny_except=None
                                     ,types=None
                                     ,values=None
                                     ,filter=None
                                     ,json_decode=None
                                     ,defaults=None):
    """Validates input parameters of a callable

    @param required_arguments:   list of types, Required argument's types  &amp; counts in order
    @param deny_args             string ,regex pattern, if any argument matches with the pattern, exception raises
    @param requires:             list of fields to check for mandatory
    @param deny:                 string ,regex pattern, if any parameter matches with the pattern, exception raises
    @param deny_except:          string ,regex pattern for excluding fields from deny
    @param types:                dict of key:name and value:type to check for types, if mismatch it will be raises exception
    @param values:               dict of key:name and value:regex pattern to check the values, &amp; fire exception if mismatch
    @param filter:               string ,regex pattern of parameters to filter
    @param json_decode:          list of string: field to be decoded as json data    
    @param defaults:             dict of key:name and value:default_value

    @raise MandatoryException:           if any param in requires does not provided
    @raise ArgumentException:            if arguments are invalid , short or mismatch type.
    @raise DenialException:              if found param in deny list
    @raise ParameterTypeException:       if parameter types invalid
    @raise ParameterValueException:      if values are not in correct format
    """


    #check deny arguments
    if deny_args:
        for arg in args: 
            if re.match(deny_args, arg):
                raise DenialException('the argument %s was not allowed' % arg)

    #decoding json parameters
    if json_decode:
        decoder = JSONDecoder(parse_float=Decimal)
        def decode(d):
            try:
                return decoder.decode(d)
            except (JSONDecodeError,TypeError):
                return d

        if isinstance(json_decode,list):
            decoded_list =[(key,decode(kwargs[key])) for key in kwargs if key in json_decode]
        else:
            decoded_list =[(key,decode(kwargs[key])) for key in kwargs]
        kwargs.update(decoded_list) 



    #check required arguments
    if required_args: 
        try:
            new_args = list(args)
            for at in required_args:
                index = required_args.index(at)
                if not isinstance(new_args[index],at):
                    try:
                        #try to cast
                        new_args[index] = at(new_args[index])
                    except:
                        raise ParameterTypeException('argument at index:%s must be %s' % (required_args.index(at),at))
            args = tuple(new_args)
        except IndexError:
            raise ArgumentException('argument\'s length is too short')

    #check required parameters
    if requires: 
        for name in requires:
            if name not in kwargs:
                raise MandatoryException('the parameter:"%s" is mandatory' % name)


    filtered_params = {}
    for param in kwargs:

        #checking requires
        if requires and param in requires and not kwargs[param]:
            raise MandatoryException('the parameter:"%s" is mandatory' % param)

        #checking for denial
        if deny and re.match(deny,param) and  (not deny_except or not re.match(deny_except, param)):
            raise DenialException('Parameter: %s was denied' % param)

        #value checking
        if values and param in values and not re.match(values[param], kwargs[param]):
            raise ParameterValueException('Parameter:%s does not meet value pattern: given value:%s' % (param,kwargs[param]))

        #checking for types
        if types and param in types:
            if kwargs[param] and not isinstance(kwargs[param],types[param]):
                try:
                    #try to cast the type too needed type
                    kwargs[param] = types[param](kwargs[param])
                except:
                    raise ParameterTypeException('Parameter:%s must be type:%s, given type:%s' % (param,types[param],type(kwargs[param])))


        #filtering parameters
        if not filter or not re.match(filter,param):
            filtered_params[param] = kwargs[param]

    #add defaults if not supplied
    if defaults:
        for param in defaults:
            if param not in filtered_params:
                filtered_params[param] = defaults[param]

    return args,filtered_params


def validate(**val_cfg):
    def validecorator(func):
        def wrapper(*args,**kwargs):
                if len(func.func_code.co_varnames) and func.func_code.co_varnames[0] == 'self':
                    new_args,filtered_params = validate_parameters(args[1:], kwargs,**val_cfg)
                    return func(*(args[0],)+new_args,**filtered_params)
                else:
                    new_args,filtered_params = validate_parameters(args, kwargs,**val_cfg)
                    return func(*new_args,**filtered_params)
            #calling the callable!

        return wrapper
    return validecorator

validate.__doc__ = validate_parameters.__doc__
</snippet></ROW><ROW><id>8198226</id><snippet>@validate(types={'name':str,age:int},values={'name':'[a-zA-Z]{5,50}',age:'\d{1,2}'})
def my_controller(name=None,age=None):
    # process data
    return render(\\some template\\)
</snippet></ROW><ROW><id>8198300</id><snippet>class ClassProperty(object):
    def __init__(self, func):
        self.func = func
    def __get__(self, inst, cls):
        return self.func(cls)

class A(object):
    model_fields = ['field1', 'field2', 'field3']

    @ClassProperty
    def fields(cls):
        return cls.model_fields + ['extra_field']

print A.fields
</snippet></ROW><ROW><id>8198737</id><snippet>comint-process-echoes</snippet></ROW><ROW><id>8198737</id><snippet>M-: (setq comint-process-echoes t)  ;; or nil
</snippet></ROW><ROW><id>8198803</id><snippet>print('original order:', names)</snippet></ROW><ROW><id>8198803</id><snippet>print('original order:')
for name in names:
    print(name)
names.sort()
print('sorted order:')
for name in names:
    print(name)
</snippet></ROW><ROW><id>8198971</id><snippet>base_url</snippet></ROW><ROW><id>8198971</id><snippet>[trac]</snippet></ROW><ROW><id>8198971</id><snippet>url</snippet></ROW><ROW><id>8198971</id><snippet>[project]</snippet></ROW><ROW><id>8199055</id><snippet>with open('returns.csv', 'wb') as f:
    writer = csv.writer(f)
    for val in daily_returns:
        writer.writerow([val])
</snippet></ROW><ROW><id>8199233</id><snippet>ReportLab</snippet></ROW><ROW><id>8199233</id><snippet>PyX</snippet></ROW><ROW><id>8199233</id><snippet>pyfpdf</snippet></ROW><ROW><id>8199362</id><snippet>ans = input('What is 4 + {0} ?'.format(operand)) 
</snippet></ROW><ROW><id>8199362</id><snippet>input</snippet></ROW><ROW><id>8199422</id><snippet>import re
word1 = " ".join(re.findall("[a-zA-Z]+", st))
</snippet></ROW><ROW><id>8199528</id><snippet>gridTiles</snippet></ROW><ROW><id>8199528</id><snippet>gridTiles = []

for r in range(totalSpaces):
    row = []

    for c in range(totalSpaces):
        tiles = Rectangle(Point(borderSet + r * spaceSize, borderSet + c * spaceSize), Point(borderSet + (r + 1) * spaceSize, borderSet + (c + 1) * spaceSize))
        tiles.setWidth(2)
        tiles.draw(board)

        row.append(tiles)
    gridTiles.append(row)
</snippet></ROW><ROW><id>8199528</id><snippet>gridTiles[0][0]
</snippet></ROW><ROW><id>8199679</id><snippet>cd</snippet></ROW><ROW><id>8199679</id><snippet>setup.py</snippet></ROW><ROW><id>8199751</id><snippet>reAttack = r'&lt;td\s+align=center&gt;(\d+/\d+/\d+)&lt;br&gt;(\d+:\d+:\d+\s+\w+)&lt;/td&gt;\s*&lt;td.*?&lt;font\s+color=#006633&gt;(\w+)&lt;/font&gt;&lt;/a&gt;\s+hospitalized\s+'

for m in re.finditer(reAttack, htmlA1):
  print 'date: %s; time: %s; player: %s' % (m.group(1), m.group(2), m.group(3))
</snippet></ROW><ROW><id>8199751</id><snippet>.*?</snippet></ROW><ROW><id>8199751</id><snippet>.*?</snippet></ROW><ROW><id>8199751</id><snippet>(?:(?!/?td&gt;).)*</snippet></ROW><ROW><id>8199751</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8199751</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>8199981</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.capwords("john's school")
"John's School"
</snippet></ROW><ROW><id>8199981</id><snippet>" "</snippet></ROW><ROW><id>8199981</id><snippet>sep</snippet></ROW><ROW><id>8199981</id><snippet>&gt;&gt;&gt; string.capwords("john's    school", " ")
"John's    School"
</snippet></ROW><ROW><id>8200221</id><snippet>locale</snippet></ROW><ROW><id>8200221</id><snippet>moneyfmt</snippet></ROW><ROW><id>8200353</id><snippet>a = set(a)
</snippet></ROW><ROW><id>8200353</id><snippet>a = list(set(a))
</snippet></ROW><ROW><id>8200353</id><snippet>seen = set()
result = []
for item in a:
    if item not in seen:
        seen.add(item)
        result.append(item)
</snippet></ROW><ROW><id>8200381</id><snippet>cdef extern from "math.h":
    bint isnan(double x)
</snippet></ROW><ROW><id>8200381</id><snippet>isnan(value)</snippet></ROW><ROW><id>8200388</id><snippet>PinyinToneMark = {
    0: "aoeiuv\u00fc",
    1: "\u0101\u014d\u0113\u012b\u016b\u01d6\u01d6",
    2: "\u00e1\u00f3\u00e9\u00ed\u00fa\u01d8\u01d8",
    3: "\u01ce\u01d2\u011b\u01d0\u01d4\u01da\u01da",
    4: "\u00e0\u00f2\u00e8\u00ec\u00f9\u01dc\u01dc",
}

def decode_pinyin(s):
    s = s.lower()
    r = ""
    t = ""
    for c in s:
        if c &gt;= 'a' and c &lt;= 'z':
            t += c
        elif c == ':':
            assert t[-1] == 'u'
            t = t[:-1] + "\u00fc"
        else:
            if c &gt;= '0' and c &lt;= '5':
                tone = int(c) % 5
                if tone != 0:
                    m = re.search("[aoeiuv\u00fc]+", t)
                    if m is None:
                        t += c
                    elif len(m.group(0)) == 1:
                        t = t[:m.start(0)] + PinyinToneMark[tone][PinyinToneMark[0].index(m.group(0))] + t[m.end(0):]
                    else:
                        if 'a' in t:
                            t = t.replace("a", PinyinToneMark[tone][0])
                        elif 'o' in t:
                            t = t.replace("o", PinyinToneMark[tone][1])
                        elif 'e' in t:
                            t = t.replace("e", PinyinToneMark[tone][2])
                        elif t.endswith("ui"):
                            t = t.replace("i", PinyinToneMark[tone][3])
                        elif t.endswith("iu"):
                            t = t.replace("u", PinyinToneMark[tone][4])
                        else:
                            t += "!"
            r += t
            t = ""
    r += t
    return r
</snippet></ROW><ROW><id>8200388</id><snippet>ü</snippet></ROW><ROW><id>8200388</id><snippet>u:</snippet></ROW><ROW><id>8200388</id><snippet>v</snippet></ROW><ROW><id>8200409</id><snippet>import scipy.ndimage
</snippet></ROW><ROW><id>8200453</id><snippet>&lt;input type="submit" name="reset_hist" /&gt;
</snippet></ROW><ROW><id>8200453</id><snippet>if(reset_hist):
    History = []
</snippet></ROW><ROW><id>8200453</id><snippet>xmlHttpRequest()</snippet></ROW><ROW><id>8200479</id><snippet>v = [[row[1][i] for row in plist] for i in range(len(plist[0][1]))]
</snippet></ROW><ROW><id>8200479</id><snippet>v[0]</snippet></ROW><ROW><id>8200479</id><snippet>v[1]</snippet></ROW><ROW><id>8200479</id><snippet>v0 = v[0]
v1 = v[1]
.
.
.
</snippet></ROW><ROW><id>8200675</id><snippet>boost::python::object</snippet></ROW><ROW><id>8200675</id><snippet>boost::function&lt;int (int, int)&gt;</snippet></ROW><ROW><id>8200675</id><snippet>void function(boost::function&lt;int (int, int)&gt; func) {
    // ...
}

// And then you expose the function as you normally would
</snippet></ROW><ROW><id>8200675</id><snippet>void function_wrap(boost::python::object func)
{
    auto lambda = [func](int a, int b) -&gt; int {
        return boost::python::extract&lt;int&gt;(func(a, b));
    };
    function(boost::function&lt;int (int, int)&gt;(lambda));
}

// And then you expose the wrapper, not the original function
</snippet></ROW><ROW><id>8200718</id><snippet>@classmethod
    def window_query(cls, q, windowsize, windows=None):
        """
            q=Query object we want to window results
            windowsize=The number of elements each window has
            windows=The window, or window list, numbers: 1-based to query
        """
        windowselect=False
        if windows:
            if not isinstance(windows,list):
                windows=list(windows)
            windowselect=True
        #Appending u_columns to ordered counting subquery will ensure unique ordering
        u_columns=list([col for col in cls.getBestUniqueColumns()])
        #o_columns is the list of order by columns for the query
        o_columns=list([col for col in q._order_by])
        #we append columns from u_columns not in o_columns to ensure unique ordering but keeping the desired one
        sq_o_columns=list(o_columns)
        for col in u_columns:
            if not col in sq_o_columns:
                sq_o_columns.append(col)

        sub=None
        #we select unique columns in subquery that we'll need to join in parent query
        for col in u_columns:
            if not sub:
                sub=q.session.query(col)
            else:
                sub=sub.add_column(col)

        #Generate a tuple from sq_o_columns list (I don't know why over() won't accept list itself TODO: more elegant
        sq_o_col_tuple=()
        for col in sq_o_columns:
            sq_o_col_tuple=sq_o_col_tuple + (col,)
        #we add row counting column, counting on generated combined ordering+unique columns tuple
        sub = sub.add_column(func.row_number().over(order_by=sq_o_col_tuple).label('rownum')).filter(q._criterion)

        #Prepare sub query to use as subquery (LOL)
        sub=sub.subquery('lacrn')

        #Prepare join ON clauses epxression comparing unique columns defined by u_columns 
        joinclause=expression.BooleanClauseList()
        for col in u_columns:
            joinclause=joinclause.__and__(col == sub.c[col.key])
        #Make the joining
        q=q.join(sub,joinclause
                 )
        i=-1
        while True:
            #We try to query windows defined by windows list
            if windowselect:
                #We want selected-windows-results to returned
                if windows:
                    i=windows.pop(0)-1
                else:
                    break
            else:
                #We want all-windows-results to be returned
                i=i+1
            res=q.filter(and_(sub.c.rownum &gt; (i*windowsize), sub.c.rownum &lt;= ((i+1)*windowsize))).all()
            if not (res or windowselect):
                #We end an all-windows-results because of no more results, we must check if is selected-window-query
                #because of selected-window-results may not exist and the are unordered
                #EX: [1,2,9999999999999,3] : Assuming the third page required has no results it will return pages 1, 2, and 3 
                break
            for row in res:
                yield row
</snippet></ROW><ROW><id>8201257</id><snippet>push</snippet></ROW><ROW><id>8201257</id><snippet>git pull</snippet></ROW><ROW><id>8201312</id><snippet>import os
if any(x.startswith('runner') for x in os.listdir('/path/to/runners')):
    print "At least one entry begins with 'runner'"
</snippet></ROW><ROW><id>8201312</id><snippet>any</snippet></ROW><ROW><id>8201543</id><snippet>[...]</snippet></ROW><ROW><id>8201543</id><snippet>values[1]</snippet></ROW><ROW><id>8201543</id><snippet>[0, &lt;pointer to itself&gt;, 2]
</snippet></ROW><ROW><id>8201543</id><snippet>&lt;pointer to itself&gt;</snippet></ROW><ROW><id>8201543</id><snippet>[0, &lt;pointer to itself&gt;, 2]
</snippet></ROW><ROW><id>8201543</id><snippet>[0, [0, &lt;pointer to itself&gt;, 2], 2]
</snippet></ROW><ROW><id>8201543</id><snippet>&lt;pointer to itself&gt;</snippet></ROW><ROW><id>8201543</id><snippet>[0, [0, [0, &lt;pointer to itself&gt;, 2], 2], 2]
</snippet></ROW><ROW><id>8201825</id><snippet>/opt/local</snippet></ROW><ROW><id>8201825</id><snippet>python</snippet></ROW><ROW><id>8201825</id><snippet>which python
</snippet></ROW><ROW><id>8201825</id><snippet>/opt/local/bin/python2.5
</snippet></ROW><ROW><id>8201825</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>8201825</id><snippet>/use/local/bin</snippet></ROW><ROW><id>8201825</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>8201975</id><snippet>len(sys.argv)</snippet></ROW><ROW><id>8201975</id><snippet>argv</snippet></ROW><ROW><id>8201983</id><snippet>if 'Apple' in line:</snippet></ROW><ROW><id>8201983</id><snippet>Company = {"Apple": 1, "Apple Computer": 1, "AAPL": 1, "Apple, Inc": 1,
           "Apple Vacations": 2, "Applebee's Restaurant": 3 }

sum[Company[name]] += amount
</snippet></ROW><ROW><id>8201983</id><snippet>Company = {}
for &lt;name, amount&gt; in file:  # pseudo-code for reading and parsing the input
    if name in Company:
        Company[name] += amount
    else:
        Company[name] = amount
</snippet></ROW><ROW><id>8202034</id><snippet>a</snippet></ROW><ROW><id>8202034</id><snippet>var</snippet></ROW><ROW><id>8202034</id><snippet>getattr()</snippet></ROW><ROW><id>8202056</id><snippet>strg="22+11-aa+bb-44-"
arr=[]
i=0
for j in range(len(strg)):
        if strg[j] in '+-':
            arr.append(strg[i:j])
            if strg[j]=='-' and strg[min(j+1,len(strg)-1)].isdigit():
                i=j
            else:
                arr.append(strg[j])
                i=j+1
print arr
</snippet></ROW><ROW><id>8202056</id><snippet>['22', '+', '11', '-', 'aa', '+', 'bb', '-44', '-']
</snippet></ROW><ROW><id>8202224</id><snippet>-i</snippet></ROW><ROW><id>8202224</id><snippet>-b</snippet></ROW><ROW><id>8202224</id><snippet>gimp -i -b \(python-fu-do-it \)
</snippet></ROW><ROW><id>8202371</id><snippet>def change(self, event):
    myobject = event.GetEventObject()
    myobject.Disable()
</snippet></ROW><ROW><id>8202577</id><snippet>.../list/anything/</snippet></ROW><ROW><id>8202577</id><snippet>(?P&lt;what&gt;\w)</snippet></ROW><ROW><id>8202577</id><snippet>.../list/a/</snippet></ROW><ROW><id>8202577</id><snippet>url(r'^list/(?P&lt;what&gt;\w+)/', list, name='list-notes'),
</snippet></ROW><ROW><id>8202617</id><snippet>DCOM_ERROR_CONSTANTS = {
    1726:'RPC_S_CALL_FAILED',
    0:'WBEM_NO_ERROR',
    0x40001:'WBEM_S_ALREADY_EXISTS',
    0x40002:'WBEM_S_RESET_TO_DEFAULT',
    0x40003:'WBEM_S_DIFFERENT',
    0x40004:'WBEM_S_TIMEDOUT',
    0x40005:'WBEM_S_NO_MORE_DATA',
    0x40006:'WBEM_S_OPERATION_CANCELLED',
    0x40007:'WBEM_S_PENDING',
    0x40008:'WBEM_S_DUPLICATE_OBJECTS',
    0x40009:'WBEM_S_ACCESS_DENIED',
    0x40010:'WBEM_S_PARTIAL_RESULTS',
    0x40011:'WBEM_S_NO_POSTHOOK',
    0x40012:'WBEM_S_POSTHOOK_WITH_BOTH',
    0x40013:'WBEM_S_POSTHOOK_WITH_NEW',
    0x40014:'WBEM_S_POSTHOOK_WITH_STATUS',
    0x40015:'WBEM_S_POSTHOOK_WITH_OLD',
    0x40016:'WBEM_S_REDO_PREHOOK_WITH_ORIGINAL_OBJECT',
    0x40017:'WBEM_S_SOURCE_NOT_AVAILABLE',
    0x80041001:'WBEM_E_FAILED',
    0x80041002:'WBEM_E_NOT_FOUND',
    0x80041003:'WBEM_E_ACCESS_DENIED',
    0x80041004:'WBEM_E_PROVIDER_FAILURE',
    0x80041005:'WBEM_E_TYPE_MISMATCH',
    0x80041006:'WBEM_E_OUT_OF_MEMORY',
    0x80041007:'WBEM_E_INVALID_CONTEXT',
    0x80041008:'WBEM_E_INVALID_PARAMETER',
    0x80041009:'WBEM_E_NOT_AVAILABLE',
    0x8004100A:'WBEM_E_CRITICAL_ERROR',
    0x8004100B:'WBEM_E_INVALID_STREAM',
    0x8004100C:'WBEM_E_NOT_SUPPORTED',
    0x8004100D:'WBEM_E_INVALID_SUPERCLASS',
    0x8004100E:'WBEM_E_INVALID_NAMESPACE',
    0x8004100F:'WBEM_E_INVALID_OBJECT',
    0x80041010:'WBEM_E_INVALID_CLASS',
    0x80041011:'WBEM_E_PROVIDER_NOT_FOUND',
    0x80041012:'WBEM_E_INVALID_PROVIDER_REGISTRATION',
    0x80041013:'WBEM_E_PROVIDER_LOAD_FAILURE',
    0x80041014:'WBEM_E_INITIALIZATION_FAILURE',
    0x80041015:'WBEM_E_TRANSPORT_FAILURE',
    0x80041016:'WBEM_E_INVALID_OPERATION',
    0x80041017:'WBEM_E_INVALID_QUERY',
    0x80041018:'WBEM_E_INVALID_QUERY_TYPE',
    0x80041019:'WBEM_E_ALREADY_EXISTS',
    0x8004101A:'WBEM_E_OVERRIDE_NOT_ALLOWED',
    0x8004101B:'WBEM_E_PROPAGATED_QUALIFIER',
    0x8004101C:'WBEM_E_PROPAGATED_PROPERTY',
    0x8004101D:'WBEM_E_UNEXPECTED',
    0x8004101E:'WBEM_E_ILLEGAL_OPERATION',
    0x8004101F:'WBEM_E_CANNOT_BE_KEY',
    0x80041020:'WBEM_E_INCOMPLETE_CLASS',
    0x80041021:'WBEM_E_INVALID_SYNTAX',
    0x80041022:'WBEM_E_NONDECORATED_OBJECT',
    0x80041023:'WBEM_E_READ_ONLY',
    0x80041024:'WBEM_E_PROVIDER_NOT_CAPABLE',
    0x80041025:'WBEM_E_CLASS_HAS_CHILDREN',
    0x80041026:'WBEM_E_CLASS_HAS_INSTANCES',
    0x80041027:'WBEM_E_QUERY_NOT_IMPLEMENTED',
    0x80041028:'WBEM_E_ILLEGAL_NULL',
    0x80041029:'WBEM_E_INVALID_QUALIFIER_TYPE',
    0x8004102A:'WBEM_E_INVALID_PROPERTY_TYPE',
    0x8004102B:'WBEM_E_VALUE_OUT_OF_RANGE',
    0x8004102C:'WBEM_E_CANNOT_BE_SINGLETON',
    0x8004102D:'WBEM_E_INVALID_CIM_TYPE',
    0x8004102E:'WBEM_E_INVALID_METHOD',
    0x8004102F:'WBEM_E_INVALID_METHOD_PARAMETERS',
    0x80041030:'WBEM_E_SYSTEM_PROPERTY',
    0x80041031:'WBEM_E_INVALID_PROPERTY',
    0x80041032:'WBEM_E_CALL_CANCELLED',
    0x80041033:'WBEM_E_SHUTTING_DOWN',
    0x80041034:'WBEM_E_PROPAGATED_METHOD',
    0x80041035:'WBEM_E_UNSUPPORTED_PARAMETER',
    0x80041036:'WBEM_E_MISSING_PARAMETER_ID',
    0x80041037:'WBEM_E_INVALID_PARAMETER_ID',
    0x80041038:'WBEM_E_NONCONSECUTIVE_PARAMETER_IDS',
    0x80041039:'WBEM_E_PARAMETER_ID_ON_RETVAL',
    0x8004103A:'WBEM_E_INVALID_OBJECT_PATH',
    0x8004103B:'WBEM_E_OUT_OF_DISK_SPACE',
    0x8004103C:'WBEM_E_BUFFER_TOO_SMALL',
    0x8004103D:'WBEM_E_UNSUPPORTED_PUT_EXTENSION',
    0x8004103E:'WBEM_E_UNKNOWN_OBJECT_TYPE',
    0x8004103F:'WBEM_E_UNKNOWN_PACKET_TYPE',
    0x80041040:'WBEM_E_MARSHAL_VERSION_MISMATCH',
    0x80041041:'WBEM_E_MARSHAL_INVALID_SIGNATURE',
    0x80041042:'WBEM_E_INVALID_QUALIFIER',
    0x80041043:'WBEM_E_INVALID_DUPLICATE_PARAMETER',
    0x80041044:'WBEM_E_TOO_MUCH_DATA',
    0x80041045:'WBEM_E_SERVER_TOO_BUSY',
    0x80041046:'WBEM_E_INVALID_FLAVOR',
    0x80041047:'WBEM_E_CIRCULAR_REFERENCE',
    0x80041048:'WBEM_E_UNSUPPORTED_CLASS_UPDATE',
    0x80041049:'WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE',
    0x80041050:'WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE',
    0x80041051:'WBEM_E_TOO_MANY_PROPERTIES',
    0x80041052:'WBEM_E_UPDATE_TYPE_MISMATCH',
    0x80041053:'WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED',
    0x80041054:'WBEM_E_UPDATE_PROPAGATED_METHOD',
    0x80041055:'WBEM_E_METHOD_NOT_IMPLEMENTED',
    0x80041056:'WBEM_E_METHOD_DISABLED',
    0x80041057:'WBEM_E_REFRESHER_BUSY',
    0x80041058:'WBEM_E_UNPARSABLE_QUERY',
    0x80041059:'WBEM_E_NOT_EVENT_CLASS',
    0x8004105A:'WBEM_E_MISSING_GROUP_WITHIN',
    0x8004105B:'WBEM_E_MISSING_AGGREGATION_LIST',
    0x8004105C:'WBEM_E_PROPERTY_NOT_AN_OBJECT',
    0x8004105D:'WBEM_E_AGGREGATING_BY_OBJECT',
    0x8004105F:'WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY',
    0x80041060:'WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING',
    0x80041061:'WBEM_E_QUEUE_OVERFLOW',
    0x80041062:'WBEM_E_PRIVILEGE_NOT_HELD',
    0x80041063:'WBEM_E_INVALID_OPERATOR',
    0x80041064:'WBEM_E_LOCAL_CREDENTIALS',
    0x80041065:'WBEM_E_CANNOT_BE_ABSTRACT',
    0x80041066:'WBEM_E_AMENDED_OBJECT',
    0x80041067:'WBEM_E_CLIENT_TOO_SLOW',
    0x80041068:'WBEM_E_NULL_SECURITY_DESCRIPTOR',
    0x80041069:'WBEM_E_TIMED_OUT',
    0x8004106A:'WBEM_E_INVALID_ASSOCIATION',
    0x8004106B:'WBEM_E_AMBIGUOUS_OPERATION',
    0x8004106C:'WBEM_E_QUOTA_VIOLATION',
    0x8004106D:'WBEM_E_RESERVED_001',
    0x8004106E:'WBEM_E_RESERVED_002',
    0x8004106F:'WBEM_E_UNSUPPORTED_LOCALE',
    0x80041070:'WBEM_E_HANDLE_OUT_OF_DATE',
    0x80041071:'WBEM_E_CONNECTION_FAILED',
    0x80041072:'WBEM_E_INVALID_HANDLE_REQUEST',
    0x80041073:'WBEM_E_PROPERTY_NAME_TOO_WIDE',
    0x80041074:'WBEM_E_CLASS_NAME_TOO_WIDE',
    0x80041075:'WBEM_E_METHOD_NAME_TOO_WIDE',
    0x80041076:'WBEM_E_QUALIFIER_NAME_TOO_WIDE',
    0x80041077:'WBEM_E_RERUN_COMMAND',
    0x80041078:'WBEM_E_DATABASE_VER_MISMATCH',
    0x80041079:'WBEM_E_VETO_DELETE',
    0x8004107A:'WBEM_E_VETO_PUT',
    0x80041080:'WBEM_E_INVALID_LOCALE',
    0x80041081:'WBEM_E_PROVIDER_SUSPENDED',
    0x80041082:'WBEM_E_SYNCHRONIZATION_REQUIRED',
    0x80041083:'WBEM_E_NO_SCHEMA',
    0x80041084:'WBEM_E_PROVIDER_ALREADY_REGISTERED',
    0x80041085:'WBEM_E_PROVIDER_NOT_REGISTERED',
    0x80041086:'WBEM_E_FATAL_TRANSPORT_ERROR',
    0x80041087:'WBEM_E_ENCRYPTED_CONNECTION_REQUIRED',
    0x80041088:'WBEM_E_PROVIDER_TIMED_OUT',
    0x80041089:'WBEM_E_NO_KEY',
    0x8004108a:'WBEM_E_PROVIDER_DISABLED',
    # not dcom, but frequently seen
    0x000006be: 'OPERATION_COULD_NOT_BE_COMPLETED',
}
</snippet></ROW><ROW><id>8202617</id><snippet>from library import DCOM_ERROR_CONSTANTS
</snippet></ROW><ROW><id>8202764</id><snippet>img_one[..., ALPHA] - img_two[..., ALPHA] &gt; 0.5
</snippet></ROW><ROW><id>8203150</id><snippet>import base64

# Set the location of the proxy
proxy_string = choice(self._get_proxies_from_file('proxies.txt')) # user:pass@ip:port
proxy_items = proxy_string.split('@')
request.meta['proxy'] = "http://%s" % proxy_items[1]

# setup basic authentication for the proxy
user_pass=base64.encodestring(proxy_items[0])
request.headers['Proxy-Authorization'] = 'Basic ' + user_pass
</snippet></ROW><ROW><id>8203177</id><snippet>output = ''
def add(s):
    output = output + s
</snippet></ROW><ROW><id>8203177</id><snippet>output+=s</snippet></ROW><ROW><id>8203177</id><snippet>output</snippet></ROW><ROW><id>8203177</id><snippet>global</snippet></ROW><ROW><id>8203177</id><snippet>output</snippet></ROW><ROW><id>8203177</id><snippet>output_list = []
def add(s):
    output_list.append(s)
# ...
output = ''.join(output_list)
</snippet></ROW><ROW><id>8203177</id><snippet>global</snippet></ROW><ROW><id>8203177</id><snippet>''</snippet></ROW><ROW><id>8203177</id><snippet>+=</snippet></ROW><ROW><id>8203401</id><snippet>numbers</snippet></ROW><ROW><id>8203401</id><snippet>int</snippet></ROW><ROW><id>8203401</id><snippet>Integral</snippet></ROW><ROW><id>8203401</id><snippet>int</snippet></ROW><ROW><id>8203401</id><snippet>Integral</snippet></ROW><ROW><id>8203645</id><snippet>MouseEvent</snippet></ROW><ROW><id>8203645</id><snippet>Event</snippet></ROW><ROW><id>8203645</id><snippet>copy</snippet></ROW><ROW><id>8203645</id><snippet>pickle</snippet></ROW><ROW><id>8203645</id><snippet>pickle</snippet></ROW><ROW><id>8203645</id><snippet>class Event(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self._aab = fancyFunction(a, b)
    def retrieve_state(self):
        return self.a, self.b, self._aab
    def restore_state(self, state):
        self.a, self.b, self._aab = state
    def copy_from(self, event):
        self.restore_state(event.retrieve_state())
    def copy(self):
        e = object.__new__(self.__class__)
        e.restore_state(self.retrieve_state())
        return e

class MouseEvent(Event):    
    def __init__(self, a, b, c, d):
        Event.__init__(self, a, b)
        self.c = c
        self.d = d
    def retrieve_state(self):
        event_state = super(MouseEvent, self).retrieve_state()
        return event_state, self.c, self.d
    def restore_state(self, state):
        event_state, self.c, self.d = state
        super(MouseEvent, self).restore_state(event_state)
</snippet></ROW><ROW><id>8203645</id><snippet>copy()</snippet></ROW><ROW><id>8203645</id><snippet>copy_from()</snippet></ROW><ROW><id>8203645</id><snippet>retrieve_state()</snippet></ROW><ROW><id>8203645</id><snippet>restore_state()</snippet></ROW><ROW><id>8203645</id><snippet>__getstate__()</snippet></ROW><ROW><id>8203645</id><snippet>__setstate__()</snippet></ROW><ROW><id>8203645</id><snippet>copy()</snippet></ROW><ROW><id>8203645</id><snippet>__getstate__()</snippet></ROW><ROW><id>8203645</id><snippet>__setstate__()</snippet></ROW><ROW><id>8203652</id><snippet>struct</snippet></ROW><ROW><id>8203652</id><snippet>struct</snippet></ROW><ROW><id>8203652</id><snippet>template &lt;typename Type, size_t N&gt;
struct wrapped_array {
  Type data[N];
};

typedef struct {
    wrapped_array&lt;int, 40&gt; icntl;
    wrapped_array&lt;double, 15&gt; cntl;
    int      *irn, *jcn;
} Test;
</snippet></ROW><ROW><id>8203652</id><snippet>%module test

%{
#include "test.h"
#include &lt;exception&gt;
%}

%include "test.h"
%include "std_except.i"

%extend wrapped_array {
  inline size_t __len__() const { return N; }

  inline const Type&amp; __getitem__(size_t i) const throw(std::out_of_range) {
    if (i &gt;= N || i &lt; 0)
      throw std::out_of_range("out of bounds access");
    return self-&gt;data[i];
  }

  inline void __setitem__(size_t i, const Type&amp; v) throw(std::out_of_range) {
    if (i &gt;= N || i &lt; 0)
      throw std::out_of_range("out of bounds access");
    self-&gt;data[i] = v;
  }
}

%template (intArray40) wrapped_array&lt;int, 40&gt;;
%template (doubleArray15) wrapped_array&lt;double, 15&gt;;
</snippet></ROW><ROW><id>8203652</id><snippet>%extend</snippet></ROW><ROW><id>8203652</id><snippet>__getitem__</snippet></ROW><ROW><id>8203652</id><snippet>__setitem__</snippet></ROW><ROW><id>8203652</id><snippet>__iter__</snippet></ROW><ROW><id>8203652</id><snippet>wraped_array</snippet></ROW><ROW><id>8203652</id><snippet>&gt;&gt;&gt; import test
&gt;&gt;&gt; foo = test.Test()
&gt;&gt;&gt; foo.icntl[30] = -654321
&gt;&gt;&gt; print foo.icntl[30]
-654321
&gt;&gt;&gt; print foo.icntl[40]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "test.py", line 108, in __getitem__
    def __getitem__(self, *args): return _test.intArray40___getitem__(self, *args)
IndexError: out of bounds access
</snippet></ROW><ROW><id>8203679</id><snippet>store_true</snippet></ROW><ROW><id>8203679</id><snippet>store_false</snippet></ROW><ROW><id>8203734</id><snippet>In [4]: %timeit fact1(1)
10000000 loops, best of 3: 151 ns per loop

In [5]: %timeit fact2(1)
10000000 loops, best of 3: 154 ns per loop
</snippet></ROW><ROW><id>8203734</id><snippet>In [6]: dis.dis(fact1)
  2           0 LOAD_FAST                0 (n)
              3 LOAD_CONST               1 (2)
              6 COMPARE_OP               0 (&lt;)
              9 JUMP_IF_FALSE            5 (to 17)
             12 POP_TOP             

  3          13 LOAD_CONST               2 (1)
             16 RETURN_VALUE        
        &gt;&gt;   17 POP_TOP             

  5          18 LOAD_FAST                0 (n)
             21 LOAD_GLOBAL              0 (fact)
             24 LOAD_FAST                0 (n)
             27 LOAD_CONST               2 (1)
             30 BINARY_SUBTRACT     
             31 CALL_FUNCTION            1
             34 BINARY_MULTIPLY     
             35 RETURN_VALUE        
             36 LOAD_CONST               0 (None)
             39 RETURN_VALUE        

In [7]: dis.dis(fact2)
  2           0 LOAD_FAST                0 (n)
              3 LOAD_CONST               1 (2)
              6 COMPARE_OP               0 (&lt;)
              9 JUMP_IF_FALSE            5 (to 17)
             12 POP_TOP             

  3          13 LOAD_CONST               2 (1)
             16 RETURN_VALUE        
        &gt;&gt;   17 POP_TOP             

  4          18 LOAD_FAST                0 (n)
             21 LOAD_GLOBAL              0 (fact)
             24 LOAD_FAST                0 (n)
             27 LOAD_CONST               2 (1)
             30 BINARY_SUBTRACT     
             31 CALL_FUNCTION            1
             34 BINARY_MULTIPLY     
             35 RETURN_VALUE        
</snippet></ROW><ROW><id>8203734</id><snippet>else</snippet></ROW><ROW><id>8203734</id><snippet>None</snippet></ROW><ROW><id>8203749</id><snippet>itertools.product()</snippet></ROW><ROW><id>8203749</id><snippet>[Config(*x) for x in itertools.product([False, True], repeat=4)]
</snippet></ROW><ROW><id>8203762</id><snippet>QMimeData</snippet></ROW><ROW><id>8203762</id><snippet>startDrag()</snippet></ROW><ROW><id>8203762</id><snippet>def scene_startDrag(self, dropActions):
    item = self.listWidget1.currentItem()
    data = QByteArray()
    stream = QDataStream(data, QIODevice.WriteOnly)
    stream.writeQString(item.text())
    mimeData = QMimeData()
    mimeData.setData("application/x-imgname", data)
    drag = QDrag(self)
    drag.setMimeData(mimeData)
    drag.exec() #actually starts the dragging
</snippet></ROW><ROW><id>8203762</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>8203762</id><snippet>QGraphicsView</snippet></ROW><ROW><id>8203762</id><snippet>dropEvent()</snippet></ROW><ROW><id>8203762</id><snippet>def dropEvent(self, event):
    if(event.mimeData().hasFormat("application/x-imgname")):
        event.accept()
        data = event.mimeData().data("application/x-imgname")
        stream = QDataStream(data, QIODevice.ReadOnly)
        text = stream.readQString()
        item = QGraphicsPixmapItem(QPixmap("images/{}".format(text)))
        item.setFlags(QGraphicsItem.ItemIsSelectable|
                      QGraphicsItem.ItemIsMovable)
        position = QPointF(event.scenePos())
        item.setPos(position)
        self.addItem(item)
</snippet></ROW><ROW><id>8203812</id><snippet>QApplication.exec()</snippet></ROW><ROW><id>8203812</id><snippet>self.parent()</snippet></ROW><ROW><id>8204026</id><snippet>urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls),
     (r'^tiny_mce/(?P&lt;path&gt;.*)$', 'django.views.static.serve',
                               { 'document_root': 'C:/Documents and Settings/Administrator/Desktop/django-projects/cms/javascript/tinymce/jscripts/tiny_mce' },

    )
</snippet></ROW><ROW><id>8204194</id><snippet>load_stack = str(stack)</snippet></ROW><ROW><id>8204194</id><snippet>load_stack = repr(stack)</snippet></ROW><ROW><id>8204247</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.linspace(-10, 10, 1000)
&gt;&gt;&gt; y = np.sin(x)
&gt;&gt;&gt; plt.plot(x, y)
[&lt;matplotlib.lines.Line2D object at 0x25d1ed0&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>8204407</id><snippet>urlopen()</snippet></ROW><ROW><id>8204407</id><snippet>read()</snippet></ROW><ROW><id>8204407</id><snippet>site = urllib.request.urlopen(link).read()
</snippet></ROW><ROW><id>8204407</id><snippet>in</snippet></ROW><ROW><id>8204559</id><snippet>True=10</snippet></ROW><ROW><id>8204559</id><snippet>&gt;&gt;&gt; True = 10
SyntaxError: assignment to keyword
</snippet></ROW><ROW><id>8204559</id><snippet>__builtins__.list = mylist</snippet></ROW><ROW><id>8204651</id><snippet>None</snippet></ROW><ROW><id>8204953</id><snippet>import re

s = "heLLo hOw are you toDay"
pattern = re.compile("[A-Z]")
start = -1
while True:
    m = pattern.search(s, start + 1) 
    if m == None:
        break
    start = m.start()
    print(start)
</snippet></ROW><ROW><id>8205084</id><snippet>comments</snippet></ROW><ROW><id>8205084</id><snippet>@route('/')
@view('index')
def index():
    # code
    comments = [
        (u'34782439', 78438845, 6, u'hello im nick'), 
        (u'34754554', 7843545, 5, u'hello im john'), 
        (u'332432434', 785345545, 3, u'hello im phil')]
    return { "comments": comments }
</snippet></ROW><ROW><id>8205084</id><snippet>@view</snippet></ROW><ROW><id>8205084</id><snippet>@route</snippet></ROW><ROW><id>8205084</id><snippet>index.html</snippet></ROW><ROW><id>8205084</id><snippet>%for address, date, user, text in comments:
    &lt;h3&gt;{{address}}&lt;/h3&gt;
    &lt;h3&gt;{{date}}&lt;/h3&gt;
    &lt;h3&gt;{{user}}&lt;/h3&gt;
    &lt;h3&gt;{{text}}&lt;/h3&gt;
%end
</snippet></ROW><ROW><id>8205113</id><snippet>del l</snippet></ROW><ROW><id>8205113</id><snippet>del l[:]</snippet></ROW><ROW><id>8205113</id><snippet>del l</snippet></ROW><ROW><id>8205113</id><snippet>del l[:]</snippet></ROW><ROW><id>8205113</id><snippet>del l</snippet></ROW><ROW><id>8205237</id><snippet>import sympy

def main():
   e = sympy.sympify(raw_input("input equation here: "))
   g = input("number to substitute for g: ")
   print 'e=',e.subs({'g':g})
</snippet></ROW><ROW><id>8205241</id><snippet>HTMLParser</snippet></ROW><ROW><id>8205241</id><snippet>html.parser</snippet></ROW><ROW><id>8205241</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print "Found Start Tag", attrs

s = "noivos, convites de casamento &lt;a href=\"http://www.olharcaricato.com.br\"&gt;
        http://www.olharcaricato.com.br&lt;/a&gt; more entries here"

parser = MyHTMLParser()
parser.feed(s)
</snippet></ROW><ROW><id>8205241</id><snippet>Found Start Tag [('href', 'http://www.olharcaricato.com.br')]</snippet></ROW><ROW><id>8205453</id><snippet>zip</snippet></ROW><ROW><id>8205453</id><snippet>for x, y, z in zip(func1(), func2(), func3()):
    melFile.write("currentTime %f" % x)
    melFile.write('setAttr "blend_shape.lip_round" %f' % y)
    melFile.write('setAttr "blend_shape.jaw_open" %f' % z)
</snippet></ROW><ROW><id>8205453</id><snippet>x</snippet></ROW><ROW><id>8205453</id><snippet>y</snippet></ROW><ROW><id>8205453</id><snippet>z</snippet></ROW><ROW><id>8205788</id><snippet>urllib</snippet></ROW><ROW><id>8205788</id><snippet>quote</snippet></ROW><ROW><id>8205788</id><snippet>string</snippet></ROW><ROW><id>8205788</id><snippet>encode("utf8")</snippet></ROW><ROW><id>8205788</id><snippet>In  [1]: url = u'Ol\xe1 mundo!'

In  [2]: url.encode("utf8")
Out [2]: 'Ol\xc3\xa1 mundo!'

In  [3]: print url.encode("utf8")
Olá mundo!

In  [4]: urllib.quote(url.encode("utf8"))
Out [4]: 'Ol%C3%A1%20mundo%21'

In  [5]: print urllib.quote(url.encode("utf8"))
Ol%C3%A1%20mundo%21
</snippet></ROW><ROW><id>8205788</id><snippet>In  [6]: urllib.unquote(urllib.quote(url.encode("utf8")))
Out [6]: 'Ol\xc3\xa1 mundo!'

In  [7]: print urllib.unquote(urllib.quote(url.encode("utf8")))
Olá mundo!
</snippet></ROW><ROW><id>8205805</id><snippet>book_set</snippet></ROW><ROW><id>8205805</id><snippet>def books(self):
    books = self.book_set.all()
    return ', '.join([book.title for book in books])
</snippet></ROW><ROW><id>8205830</id><snippet>crimefile = open(fileName, 'r')
yourResult = [line.split(',') for line in crimefile.readlines()]
</snippet></ROW><ROW><id>8205937</id><snippet>pythoncom.py</snippet></ROW><ROW><id>8205937</id><snippet>click.py</snippet></ROW><ROW><id>8205953</id><snippet>def wordpoints(word):
    return sum(dict.get(char) for char in word)
</snippet></ROW><ROW><id>8205953</id><snippet>    return sum[dict.get(char) for char in word]
                                ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>8205953</id><snippet>^</snippet></ROW><ROW><id>8205953</id><snippet>sum</snippet></ROW><ROW><id>8205953</id><snippet>[]</snippet></ROW><ROW><id>8205953</id><snippet>dict.get(char)</snippet></ROW><ROW><id>8205953</id><snippet>for</snippet></ROW><ROW><id>8206001</id><snippet>sql</snippet></ROW><ROW><id>8206001</id><snippet>manage.py loaddata</snippet></ROW><ROW><id>8206001</id><snippet>initial_data.[xml/yaml/json]</snippet></ROW><ROW><id>8206030</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'Hello, my name is [name] and I am [age] years old'
&gt;&gt;&gt; re.split(r'(\[|\])', s)
['Hello, my name is ', '[', 'name', ']', ' and I am ', '[', 'age', ']', ' years old']
</snippet></ROW><ROW><id>8206321</id><snippet>Foo.__nonzero__ = Foo.__bool__
</snippet></ROW><ROW><id>8206321</id><snippet>__nonzero__ = __bool__
</snippet></ROW><ROW><id>8206321</id><snippet>__nonzero__</snippet></ROW><ROW><id>8206321</id><snippet>__bool__</snippet></ROW><ROW><id>8206321</id><snippet>__nonzero__</snippet></ROW><ROW><id>8206321</id><snippet>__nonzero__</snippet></ROW><ROW><id>8206737</id><snippet>for x in doclist:
    if x == '[':
        count=count+1
    elif count == 1:
        response=raw_input("Please enter %s" % x)
        count=count-1
    else:
        pass
</snippet></ROW><ROW><id>8206900</id><snippet>##gets file with movie information
f = open("filename.txt")
actedWith = {}
ActorList = []
movies = {}
actedIn = []
dos = 1

def getDegrees(original, target, base, dos=0, seen=[]):
    dos = dos+1
    print "----&gt; checking %s against %s" % (target, base)
    for actor in actedWith[base]:
        #print "\t" + actor
        if target == actor:
            print original, "has ", dos, " degree(s) of separation from ", target
            return True
    for actor in actedWith[base]:
        if actor in seen: continue
        seen = seen + [actor]
        if getDegrees(original, target, actor, dos, seen):
            return True
    return False


for l in f:
    ##strip of whitespace
    l = l.strip()
    ##split by where forward-slashes are
    l = l.split("/")
    ##add the first "word" on the line to the database of movie names
    movies = {l[0] : l[1:]}
    for e in l[1:]:
        if e in actedWith:
            actedWith[e] = actedWith[e]+movies[l[0]]
        else:
            actedWith[e] = movies[l[0]]

original = raw_input("Enter Actor Name (Last, First): ")
target = raw_input("Enter Second Actor Name (Last, First): ")
getDegrees(original, target, original)
</snippet></ROW><ROW><id>8206900</id><snippet>Bacon, Kevin has  65  degree(s) of separation from  Kosaka, Masami
</snippet></ROW><ROW><id>8207725</id><snippet>^A</snippet></ROW><ROW><id>8207725</id><snippet>([^=])+=(.*)</snippet></ROW><ROW><id>8207940</id><snippet>regexp = r'\b[AEIOUaeiou]+|[AEIOUaeiou]+\b|[^AEIOUaeiou]'
</snippet></ROW><ROW><id>8208414</id><snippet>ConfigParser</snippet></ROW><ROW><id>8208414</id><snippet>[options]
day = monday,tuesday,wednesday
month = jan,feb,march,april
holiday = thanksgiving,christmas
</snippet></ROW><ROW><id>8208414</id><snippet>import ConfigParser

parser = ConfigParser.ConfigParser()
parser.read('myoption.ini')
day = parser.get('options','day').split(',')
month = parser.get('options','month').split(',')
holiday = parser.get('options','holiday').split(',')
</snippet></ROW><ROW><id>8210077</id><snippet>opendirectory</snippet></ROW><ROW><id>8210077</id><snippet>cur.execute ("INSERT INTO folder (foldername) VALUES (?);", (opendirectory))
cur.execute("INSERT INTO file (dataname) VALUES(?);", (textfiles))
</snippet></ROW><ROW><id>8210077</id><snippet>opendirectory</snippet></ROW><ROW><id>8210077</id><snippet>parent_folder</snippet></ROW><ROW><id>8210077</id><snippet>file</snippet></ROW><ROW><id>8210077</id><snippet>for dirpath, dirsInDirpath, filesInDirPath in os.walk(opendirectory):
    for myfile in filesInDirPath:   
        cur.execute("INSERT INTO file (dataname, parent_folder) VALUES(?, ?);", (myfile, dirpath))
</snippet></ROW><ROW><id>8210360</id><snippet>&lt;input type="(?:checkbox|radio)" name="(.*?)".*?&gt;
</snippet></ROW><ROW><id>8210427</id><snippet>scipy.spatial.Delaunay</snippet></ROW><ROW><id>8210427</id><snippet>scipy.spatial.Delaunay</snippet></ROW><ROW><id>8210427</id><snippet>qhull</snippet></ROW><ROW><id>8210427</id><snippet>Qhull</snippet></ROW><ROW><id>8210427</id><snippet>Quickhull</snippet></ROW><ROW><id>8210427</id><snippet>s</snippet></ROW><ROW><id>8210427</id><snippet>c</snippet></ROW><ROW><id>8210427</id><snippet>q</snippet></ROW><ROW><id>8210427</id><snippet>Quickhull partitions a point and determines its horizon facets by computing 
whether the point is above or below a hyperplane. We have assumed that 
computations return consistent results ... With floating-point arithmetic, we 
cannot prevent errors from occurring, but we can repair the damage after 
processing a point. We use brute force: if adjacent facets are nonconvex, one of 
the facets is merged into a neighbor. Quickhull merges the facet that minimizes 
the maximum distance of a vertex to the neighbor.
</snippet></ROW><ROW><id>8210427</id><snippet>Quickhull</snippet></ROW><ROW><id>8210427</id><snippet>co = points[0]
points = points - co

edges1 = delaunay_edges(points)
edges2 = delaunay_edges_matplotlib(points)

print numpy.unique(edges1) 
&gt;&gt;&gt; [0 1 2 3 4]
print numpy.unique(edges2)
&gt;&gt;&gt; [0 1 2 3 4]
</snippet></ROW><ROW><id>8210951</id><snippet>column = 3
message = '{'+str(column)+'}'
print message.format(0,0,0,'spam')
</snippet></ROW><ROW><id>8211090</id><snippet>- self.rect = pygame.Rect(self.x,self.y,self.x+20,self.y+20)
+ self.rect = pygame.Rect(self.x,self.y,self.20,self.20)
</snippet></ROW><ROW><id>8211090</id><snippet>  def move(self,direction):
      self.x = self.x + direction[0]*self.speed
      self.y = self.y + direction[1]*self.speed
+     self.rect = pygame.Rect(self.x,self.y,self.20,self.20)
</snippet></ROW><ROW><id>8211090</id><snippet>tick()</snippet></ROW><ROW><id>8211090</id><snippet>player_moving</snippet></ROW><ROW><id>8211090</id><snippet>import pygame
import random

red = [255,0,0]
green = [0,255,0]
blue = [0,0,255]
white = [255,255,255]
black = [0,0,0]
UP = [0,-1]
DOWN = [0,1]
LEFT = [-1,0]
RIGHT = [1,0]
NOTMOVING = [0,0]
#constants end
#classes
class collidable:
    x = 0
    y = 0
    w = 0
    h = 0
    rect = pygame.Rect(x,y,w,h)
    color = [0,0,0]
    def __init__(self,x,y,w,h,color):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.color = color
        self.rect = pygame.Rect(x,y,w,h)
    def draw(self):
        pygame.draw.rect(screen,self.color,[self.x,self.y,self.w,self.h],6)

class player:
    x = 0
    y = 0
    speed = 0
    rect = pygame.Rect(x,y,20,20)
    def __init__(self,x,y,speed):
        self.x = x
        self.y = y
        self.speed = speed
        self.rect = pygame.Rect(self.x,self.y,20,20)
    def draw(self):
        if player_moving==LEFT:
                pygame.draw.polygon(screen,black,[(self.x-10,self.y),(self.x+10,self.y-10),(self.x+10,self.y+10)])
        elif player_moving==RIGHT:
            pygame.draw.polygon(screen,black,[(self.x+10,self.y),(self.x-10,self.y-10),(self.x-10,self.y+10)])
        elif player_moving==UP:
            pygame.draw.polygon(screen,black,[(self.x,self.y-10),(self.x+10,self.y+10),(self.x-10,self.y+10)])
        elif player_moving==DOWN:
            pygame.draw.polygon(screen,black,[(self.x,self.y+10),(self.x+10,self.y-10),(self.x-10,self.y-10)])
        else:
            pygame.draw.rect(screen,black,pygame.Rect(self.x-10,self.y-10,20,20),6)
    def setpos(self,x,y):
        self.x = x
        self.y = y
    def move(self,direction):
        self.x = self.x + direction[0]*self.speed
        self.y = self.y + direction[1]*self.speed
        self.rect = pygame.Rect(self.x,self.y,20,20)
#classes end

#globals
pygame.init()
screenSize = [800,600]
screenBGColor = white
screen=pygame.display.set_mode(screenSize)
pygame.display.set_caption("Move the Block")
player = player(screenSize[0]/2,screenSize[1]/2,9)
collidables = []
clock=pygame.time.Clock()
for i in range(10):
    collidables.append(collidable(random.randrange(0,screenSize[0]),random.randrange(0,screenSize[1]),random.randrange(10,200),random.randrange(10,200),blue))

running = True
#globals end
player_moving = NOTMOVING
#functions
def render():
    screen.fill(screenBGColor)
    clock.tick(60)
    player.draw()
    for c in collidables:
        c.draw()
    pygame.display.flip()
def tick(player_moving):                                           #----------------HERE
    for c in collidables:
        if player.rect.colliderect(c.rect):
            player_moving = NOTMOVING
            print("hit"+str(c.rect)+" with "+str(player.rect))
    player.move(player_moving)

#functions end

#main loop
while running==True:
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            running = False
        if event.type==pygame.KEYDOWN:
            if event.key==pygame.K_LEFT:
                player_moving = LEFT
            if event.key==pygame.K_RIGHT:
                player_moving = RIGHT
            if event.key==pygame.K_UP:
                player_moving = UP
            if event.key==pygame.K_DOWN:
                player_moving = DOWN
        else:
            player_moving = NOTMOVING
    tick(player_moving)
    render()
#main loop end

pygame.quit()
</snippet></ROW><ROW><id>8211685</id><snippet>if hasattr(node, contents) and len(node.contents) == 1 and isinstance(node.contents[0], NavigableString):
    textLevelFlag = true
else:
    something else
</snippet></ROW><ROW><id>8211949</id><snippet>&gt;&gt;&gt; l = list('hello world')
&gt;&gt;&gt; l
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
&gt;&gt;&gt; sorted(l)
[' ', 'd', 'e', 'h', 'l', 'l', 'l', 'o', 'o', 'r', 'w']
&gt;&gt;&gt; l
['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; l
[' ', 'd', 'e', 'h', 'l', 'l', 'l', 'o', 'o', 'r', 'w']
</snippet></ROW><ROW><id>8211949</id><snippet>crop()</snippet></ROW><ROW><id>8211949</id><snippet>cropped()</snippet></ROW><ROW><id>8212181</id><snippet>pisa</snippet></ROW><ROW><id>8212181</id><snippet>xhtml2pdf</snippet></ROW><ROW><id>8212181</id><snippet>ho</snippet></ROW><ROW><id>8212181</id><snippet>&gt;&gt;&gt; import xhtml2pdf.pisa as pisa
</snippet></ROW><ROW><id>8212291</id><snippet>-2.77555756156e-17</snippet></ROW><ROW><id>8212291</id><snippet>-0.0000000000000000277555756156</snippet></ROW><ROW><id>8212291</id><snippet>1.0 * 0.2 + 0.0 * 0.1 - 0.2</snippet></ROW><ROW><id>8212291</id><snippet>1 * 0.19999999999999998 + 1 * 0 - 0.20000000000000001</snippet></ROW><ROW><id>8212342</id><snippet>return process_event()</snippet></ROW><ROW><id>8212342</id><snippet>process_event</snippet></ROW><ROW><id>8212342</id><snippet>HttpResponse</snippet></ROW><ROW><id>8212412</id><snippet>MyChat</snippet></ROW><ROW><id>8212412</id><snippet>def lineReceived(self, line):
   print "received", repr(line)
   for c in self.factory.clients:
       c.transport.write(message + '\n')
   for server in self.factory.otherServers:
       server.otherServerMessage(self, line)
</snippet></ROW><ROW><id>8212412</id><snippet>otherServers</snippet></ROW><ROW><id>8212412</id><snippet>otherServerMessage</snippet></ROW><ROW><id>8212412</id><snippet>MyChat.lineReceived</snippet></ROW><ROW><id>8212413</id><snippet>        # Try to determine the current system user's username to use as a default.
    try:
        default_username = getpass.getuser().replace(' ', '').lower()
    except (ImportError, KeyError):
        # KeyError will be raised by os.getpwuid() (called by getuser())
        # if there is no corresponding entry in the /etc/passwd file
        # (a very restricted chroot environment, for example).
        default_username = ''
</snippet></ROW><ROW><id>8212987</id><snippet>from cStringIO import StringIO
lines = tn.read_all().splitlines(True) # keep \n
o = StringIO()
for line in lines:
    if search_string in line:
        line = replacement_string # or line = line.replace(search_string, new_string) 
    o.write(line)
</snippet></ROW><ROW><id>8213102</id><snippet>del cmd_list[4:14 + 1]
</snippet></ROW><ROW><id>8213102</id><snippet>+ 1</snippet></ROW><ROW><id>8213529</id><snippet>import sys
import curses
curses.setupterm()
sys.stdout.write(curses.tigetstr('civis'))
</snippet></ROW><ROW><id>8213529</id><snippet>curses.tigestr</snippet></ROW><ROW><id>8213858</id><snippet>    &lt;xsd:element name="port" type="xsd:integer" default="2"/&gt;
</snippet></ROW><ROW><id>8213969</id><snippet>import sys

def main(src, dest):
    with open(dest, 'w') as output:
        with open(src) as source:
            for line in source:
                try:
                    start, end, sound = line.split()
                except ValueError:
                    continue
                if sound == 'ay':
                    start = int(start)
                    end = int(end)
                    offset = (end - start) // 2
                    output.write('%s %s ao\n' % (start, start + offset))
                    output.write('%s %s ih\n' % (start + offset, end))
                else:
                    output.write(line)

if __name__ == "__main__":

    main(*sys.argv[1:])
</snippet></ROW><ROW><id>8213969</id><snippet>18800000 20400000 pau
20400000 21300000 aa
21300000 22500000 p
22500000 23200000 l
23200000 23600000 ao
23600000 24000000 ih
24000000 25000000 k
25000000 26500000 pau
</snippet></ROW><ROW><id>8214125</id><snippet>MTest</snippet></ROW><ROW><id>8214125</id><snippet>UploadedFile</snippet></ROW><ROW><id>8214125</id><snippet>UploadedFile</snippet></ROW><ROW><id>8214125</id><snippet>Mtest</snippet></ROW><ROW><id>8214125</id><snippet>file1</snippet></ROW><ROW><id>8214125</id><snippet>file2</snippet></ROW><ROW><id>8214125</id><snippet>MtestModelForm</snippet></ROW><ROW><id>8214125</id><snippet>MtestModelForm</snippet></ROW><ROW><id>8214125</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>8214125</id><snippet>prefix</snippet></ROW><ROW><id>8214125</id><snippet>MtestModelForm</snippet></ROW><ROW><id>8214125</id><snippet>commit=False</snippet></ROW><ROW><id>8214125</id><snippet>file1</snippet></ROW><ROW><id>8214125</id><snippet>file2</snippet></ROW><ROW><id>8214125</id><snippet>def my_view(request):
    if request.method == "POST"
        file1_form = UploadedFileForm(request.POST, request.FILES, prefix="file1")
        file2_form = UploadedFileForm(request.POST, request.FILES, prefix="file2")
        mtest_form = MTestForm(data=request.POST, prefix="mtest")
        if mtest_form.is_valid() and file1_form.is_valid and file2_form.is_valid():
            file1 = file1_form.save()
            file2 = file2_form.save()
            mtest = mtest_form.save(commit=False)
            mtest.file1 = file1
            mtest.file2 = file2
            mtest.save()
            return HttpResponseRedirect("/success-url/")
        # case for invalid form data or GET request omitted
</snippet></ROW><ROW><id>8214450</id><snippet>lower_lip_under_upper_teeth_bezier</snippet></ROW><ROW><id>8214450</id><snippet>lower_lip_under_upper_teeth_bezier</snippet></ROW><ROW><id>8214450</id><snippet>def mel_script(lip_var):
    '''The mel script generated for the input speech with the chosen energy level'''
    with open("mel.txt", "w") as melFile :
        melFile.write('setKeyframe "BS_stickyLips_SL_recept.head_geo_stickyLips_wire";'
                      'setKeyframe "BS_stickyLips_baseSL_recept.head_geo";'
                      'setKeyframe "BS_stickyLips_wireSL_recept.head_geo";'
                      'setKeyframe "blend_shape.lip_round";'
                      'setKeyframe "blend_shape.jaw_open";'
                      'setKeyframe "blend_shape.lips_spread";'
                      'setKeyframe "blend_shape.lips_part";'
                      'setKeyframe "blend_shape.lower_lip_under_upper_teeth";')
    for p in lip_var:    # Check this out!!!
        melFile.write('setAttr "blend_shape.jaw_open" %f ;' % p )
</snippet></ROW><ROW><id>8214450</id><snippet>mel_script</snippet></ROW><ROW><id>8214450</id><snippet>mel_script</snippet></ROW><ROW><id>8214450</id><snippet>def mel_script(list1, list2, list3, list4, list5):
    # Your code here should work with list1, list2, etc...
</snippet></ROW><ROW><id>8214450</id><snippet>mel_script</snippet></ROW><ROW><id>8214450</id><snippet>f1</snippet></ROW><ROW><id>8214450</id><snippet>f2</snippet></ROW><ROW><id>8214450</id><snippet>f3</snippet></ROW><ROW><id>8214450</id><snippet>mel_script(f1(), f2(), f3(), f4(), f5())
</snippet></ROW><ROW><id>8214450</id><snippet>mel_scirpt</snippet></ROW><ROW><id>8214450</id><snippet>tmp1 = f1()
tmp2 = f2()
tmp3 = f3()
tmp4 = f4()
tmp5 = f5()
mel_script(tmp1, tmp2, tmp3, tmp4, tmp5)
</snippet></ROW><ROW><id>8214450</id><snippet>f1()</snippet></ROW><ROW><id>8214450</id><snippet>f1</snippet></ROW><ROW><id>8214466</id><snippet>def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((HOST, PORT))
    sock.listen(0)

    FINISHEDCLIENTS = []

    while 1:
        data = 'None'
        IP = [0, 0]
        try:
            client, ip = sock.accept()
            data = client.recv(1024)
            print "%s: Server recieved: '%s'" % (time.ctime(), data)

            if data == 'Done':
                print "%s: Server sending: 'Thanks'" % time.ctime()
                client.send('Thanks')

                if ip[0] in CLIENT_IPS and ip[0] not in FINISHEDCLIENTS: 
                    FINISHEDCLIENTS.append(ip[0])

                    if len(FINISHEDCLIENTS) == 12:
                        #raise MyException
                        break

        except Exception, e:
            print "%s: Server Exception - %s" % (time.ctime(), e)
</snippet></ROW><ROW><id>8214466</id><snippet>SentFlag = 0
data = 'no'
while SentFlag == 0:
    try:
        f = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        f.connect((IPofServer, RandomPort))
        f.settimeout(20)
        f.send('Done')
        data = f.recv(1024)
        if data == 'Thanks':
            f.shutdown(socket.SHUT_RDWR)
            f.close()
            SentFlag = 1
    except:
        f.close()
        time.sleep(2*random.random())
</snippet></ROW><ROW><id>8214542</id><snippet>append()</snippet></ROW><ROW><id>8214998</id><snippet>&gt;&gt;&gt; d = {'1': 'one', '3': 'three', '2': 'two', '5': 'five', '4': 'four'}
&gt;&gt;&gt; 'one' in d.values()
True
</snippet></ROW><ROW><id>8214998</id><snippet>&gt;&gt;&gt; T(lambda : 'one' in d.itervalues()).repeat()
[0.28107285499572754, 0.29107213020324707, 0.27941107749938965]
&gt;&gt;&gt; T(lambda : 'one' in d.values()).repeat()
[0.38303399085998535, 0.37257885932922363, 0.37096405029296875]
&gt;&gt;&gt; T(lambda : 'one' in d.viewvalues()).repeat()
[0.32004380226135254, 0.31716084480285645, 0.3171098232269287]
</snippet></ROW><ROW><id>8214998</id><snippet>&gt;&gt;&gt; type(d.viewvalues())
&lt;type 'dict_values'&gt;
&gt;&gt;&gt; type(d.values())
&lt;type 'list'&gt;
&gt;&gt;&gt; type(d.itervalues())
&lt;type 'dictionary-valueiterator'&gt;
</snippet></ROW><ROW><id>8214998</id><snippet>&gt;&gt;&gt; T(lambda : 'four' in d.itervalues()).repeat()
[0.41178202629089355, 0.3959040641784668, 0.3970959186553955]
&gt;&gt;&gt; T(lambda : 'four' in d.values()).repeat()
[0.4631338119506836, 0.43541407585144043, 0.4359898567199707]
&gt;&gt;&gt; T(lambda : 'four' in d.viewvalues()).repeat()
[0.43414998054504395, 0.4213531017303467, 0.41684913635253906]
</snippet></ROW><ROW><id>8215233</id><snippet>outputwriter = csv.writer(open('output.csv', 'w'), delimiter = ' ')
for tup in in_tup:
    inputList = [tup[0]]
    inputList.extend(tup[1])
    outputwriter.writerow(inputList)
</snippet></ROW><ROW><id>8215382</id><snippet>sum(my_list[i] for i in (0, 2, 3))
</snippet></ROW><ROW><id>8215382</id><snippet>my_list[0]</snippet></ROW><ROW><id>8215456</id><snippet>def xml_to_list(fname):
    with open(fname) as xml_file:
            tree = etree.iterparse(xml_file)
            for item in tree:
                 if item[1].text.strip() != '-':
                        print item[1].text
</snippet></ROW><ROW><id>8215461</id><snippet>4.0 - 3.320999999999998</snippet></ROW><ROW><id>8215479</id><snippet>axes = plt.gca()  # Get current axes
axes.lines.remove(ax2[0])  # Removes the (first and only) line created in ax2
plt.draw()  # Updates the graph (in interactive mode)
</snippet></ROW><ROW><id>8215479</id><snippet>axes.lines.append(ax2[0])  # Puts the line back (the drawing order is changed, here)
</snippet></ROW><ROW><id>8215479</id><snippet>all_lines = list(axes.lines)  # Copy
# ...
axes.lines[:] = all_lines  # All lines put back
</snippet></ROW><ROW><id>8215479</id><snippet>plot()</snippet></ROW><ROW><id>8215562</id><snippet>printf</snippet></ROW><ROW><id>8215562</id><snippet>libc.stdio</snippet></ROW><ROW><id>8215562</id><snippet>from libc.stdio cimport printf

def go():
    py_string = """
a complicated string
with a few
newlines.
"""

    cdef bytes py_bytes = py_string.encode()
    cdef char* c_string = py_bytes
    printf(c_string)

    print "we actually got this far! :)"
</snippet></ROW><ROW><id>8215562</id><snippet>printf</snippet></ROW><ROW><id>8215562</id><snippet>stdio.pxd</snippet></ROW><ROW><id>8215562</id><snippet>cdef extern from *:
    ctypedef char const_char "const char"

int printf(const_char *, ...)
</snippet></ROW><ROW><id>8215562</id><snippet>object printf(char *)</snippet></ROW><ROW><id>8215562</id><snippet>int</snippet></ROW><ROW><id>8215562</id><snippet>Py_XDECREF</snippet></ROW><ROW><id>8215562</id><snippet>printf</snippet></ROW><ROW><id>8215562</id><snippet>printf</snippet></ROW><ROW><id>8215562</id><snippet>void *</snippet></ROW><ROW><id>8215739</id><snippet>class _AssertRaisesContext(object):
    """A context manager used to implement TestCase.assertRaises* methods."""

    def __init__(self, expected, test_case, expected_regexp=None):
        self.expected = expected
        self.failureException = test_case.failureException
        self.expected_regexp = expected_regexp

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, tb):
        if exc_type is None:
            try:
                exc_name = self.expected.__name__
            except AttributeError:
                exc_name = str(self.expected)
            raise self.failureException(
                "{0} not raised".format(exc_name))
        if not issubclass(exc_type, self.expected):
            # let unexpected exceptions pass through
            return False
        self.exception = exc_value # store for later retrieval
        if self.expected_regexp is None:
            return True

        expected_regexp = self.expected_regexp
        if isinstance(expected_regexp, basestring):
            expected_regexp = re.compile(expected_regexp)
        if not expected_regexp.search(str(exc_value)):
            raise self.failureException('"%s" does not match "%s"' %
                     (expected_regexp.pattern, str(exc_value)))
        return True
</snippet></ROW><ROW><id>8215739</id><snippet>def testsample(self):
    with self.assertRaises(ValueError):
         try:
             random.sample(self.seq, 20)
         except ValueError as e:
             # do some action with e
             self.assertEqual(e.args,
                              ('sample larger than population',))
             # now let the context manager do its work
             raise                    
</snippet></ROW><ROW><id>8216043</id><snippet>import sqlite3
connection = sqlite3.connect('/path/to/temp.sqlite')
cursor=connection.cursor()
cursor.execute('ATTACH "/path/to/main.sqlite" AS master')
</snippet></ROW><ROW><id>8216043</id><snippet>cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')
</snippet></ROW><ROW><id>8216110</id><snippet>float</snippet></ROW><ROW><id>8216110</id><snippet>sys.float_info</snippet></ROW><ROW><id>8216110</id><snippet>a.itemsize</snippet></ROW><ROW><id>8216110</id><snippet>a</snippet></ROW><ROW><id>8216205</id><snippet>d = {
     'id1':  [id_best_match_to_id1, id_next_best_match_to_id1, ..., id_worst_match_to_id1],
     'id2':  [id_best_match_to_id2, id_next_best_match_to_id2, ..., id_worst_match_to_id2],
     ...
}
</snippet></ROW><ROW><id>8216205</id><snippet>(id_best_match_to_id1, similarity_score_to_id1)</snippet></ROW><ROW><id>8216205</id><snippet>sim(x,y)==sim(y,x)</snippet></ROW><ROW><id>8216428</id><snippet>class PartialAuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ('name', 'title')
</snippet></ROW><ROW><id>8216710</id><snippet>Agg</snippet></ROW><ROW><id>8216710</id><snippet>TkAgg</snippet></ROW><ROW><id>8216710</id><snippet>GtkAgg</snippet></ROW><ROW><id>8216710</id><snippet>QtAgg</snippet></ROW><ROW><id>8216710</id><snippet>pyplot.ion</snippet></ROW><ROW><id>8216710</id><snippet>Tk</snippet></ROW><ROW><id>8217068</id><snippet>numpy.array()</snippet></ROW><ROW><id>8217068</id><snippet>for x in iterable</snippet></ROW><ROW><id>8217068</id><snippet>numpy.array()</snippet></ROW><ROW><id>8217068</id><snippet>numpy.fromiter()</snippet></ROW><ROW><id>8217076</id><snippet>class Foo(db.Model):
    ...
    def get_bars(self):
        return db.get(self.bars)
</snippet></ROW><ROW><id>8217076</id><snippet>{% for bar in current_foo.get_bars %}
</snippet></ROW><ROW><id>8217124</id><snippet>re.search('A+?B', 'AAB')</snippet></ROW><ROW><id>8217124</id><snippet>appointments</snippet></ROW><ROW><id>8217124</id><snippet>appointments = """\
COURT A
...
COURT B
...
COURT C
Judge Judy"""

&gt;&gt;&gt; re.findall(r'^COURT[^\n]+(?:.(?!^COURT))+Judge Judy', appointments, re.S | re.M)
['COURT C\nJudge Judy']
</snippet></ROW><ROW><id>8217124</id><snippet>&gt;&gt;&gt; re.findall(r'COURT.+?\n.+?Judge Judy', appointments, re.S)
['COURT A\n...\nCOURT B\n...\nCOURT C\nJudge Judy']
</snippet></ROW><ROW><id>8217190</id><snippet>key</snippet></ROW><ROW><id>8217190</id><snippet>list.sort()</snippet></ROW><ROW><id>8217190</id><snippet>d</snippet></ROW><ROW><id>8217190</id><snippet>for scores in d.itervalues():
    scores.sort(key=lambda x: next(x.itervalues()), reverse=True)
</snippet></ROW><ROW><id>8217190</id><snippet>{id_1: [(id_2, score_2), (id_3, score_3),...], id_2: [(id_1, score_1),...]}
</snippet></ROW><ROW><id>8217190</id><snippet>for scores in d.itervalues():
    scores.sort(key=lambda x: x[1], reverse=True)
</snippet></ROW><ROW><id>8217190</id><snippet>for scores in d.itervalues():
    scores.sort(key=operator.itemgetter(1), reverse=True)
</snippet></ROW><ROW><id>8217414</id><snippet>    import tornado.platform.twisted
    from telephus.pool import CassandraClusterPool
    from twisted.internet import reactor

    tornado.platform.twisted.install()

    from twisted.internet import reactor

    pool = CassandraClusterPool([HOST], keyspace='XXXX', reactor=reactor)

    pool.startService()

    reactor.run()        # this calls tornado.ioloop.IOLoop.instance().start() 
</snippet></ROW><ROW><id>8217626</id><snippet>@tornado.web.authenticated
def get(self):
    ...
</snippet></ROW><ROW><id>8217626</id><snippet>login_url</snippet></ROW><ROW><id>8217646</id><snippet>import subprocess

command = ['ls', '-l']
p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.IGNORE)
text = p.stdout.read()
retcode = p.wait()
</snippet></ROW><ROW><id>8217646</id><snippet>text</snippet></ROW><ROW><id>8217646</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8217687</id><snippet>indices = set([0, 7, 12, 25])
s = "i like stackoverflow and python"
print("".join(c.upper() if i in indices else c for i, c in enumerate(s)))
</snippet></ROW><ROW><id>8217687</id><snippet>I like StackOverflow and Python
</snippet></ROW><ROW><id>8217743</id><snippet>site-packages</snippet></ROW><ROW><id>8218003</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>8218003</id><snippet>h5py</snippet></ROW><ROW><id>8218003</id><snippet>class LockedH5File(object):
    def __init__(self, path, ...):
        self.h5file = h5py.File(path, 'r+')
    def __enter__(self):
        fcntl.flock(fcntl.LOCK_EX)
        return self.h5file
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.h5file.close()
</snippet></ROW><ROW><id>8218361</id><snippet>In [13]: numpy.where(mask)
Out[13]: (array([36, 68, 84, 92, 96, 98]),)
</snippet></ROW><ROW><id>8218361</id><snippet>numpy.where(mask==True)</snippet></ROW><ROW><id>8218747</id><snippet>any</snippet></ROW><ROW><id>8218747</id><snippet>any([True, False, 0, []])
=&gt; True
</snippet></ROW><ROW><id>8218747</id><snippet>if any(x for x in NL if x &lt; sc.NLayer):
    print 'true'
else:
    print 'false'
</snippet></ROW><ROW><id>8218747</id><snippet>for x in NL:
    if x &lt; sc.NLayer:
        print 'true'
    else:
        print 'false'
</snippet></ROW><ROW><id>8218791</id><snippet>class setup(tornado.web.RequestHandler):
    @classmethod
    def dbmongo(cls):
        if not hasattr(cls, '_dbmongo'):
            cls._dbmongo = apymongo.Connection("127.0.0.1", 27017)
        return cls._dbmongo
</snippet></ROW><ROW><id>8218791</id><snippet>dbmongo_connection = None
def dbmongo():
    if not dbmongo_connection:
        dbmongo_connection = apymongo.Connection("127.0.0.1", 27017)
    return dbmongo_connection
</snippet></ROW><ROW><id>8218791</id><snippet>class MongoMixin(object):
    def mongodb(self):
        if not hasattr(self.application, 'mongodb'):
            self.application.mongodb = apymongo.Connection(self.application.settings.get("mongohost", "127.0.0.1"), 27017)
        return self.application.mongodb

class expand(tornado.web.RequestHandler, MongoMixin):
    def get(self):
       db = self.mongodb()
</snippet></ROW><ROW><id>8218844</id><snippet>query = ContentItem.objects.filter( (Q(account=account) and Q(public=True)) or  (Q(account=account) and Q(creator=logged_in_user)) ).order_by('-last_used')
</snippet></ROW><ROW><id>8218887</id><snippet>import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>8218887</id><snippet>fig = plt.figure(frameon=False)
fig.set_size_inches(w,h)
</snippet></ROW><ROW><id>8218887</id><snippet>ax = plt.Axes(fig, [0., 0., 1., 1.])
ax.set_axis_off()
fig.add_axes(ax)
</snippet></ROW><ROW><id>8218887</id><snippet>ax.imshow(your_image, aspect='normal')
fig.savefig(fname, dpi)
</snippet></ROW><ROW><id>8218887</id><snippet>aspect</snippet></ROW><ROW><id>8218887</id><snippet>fig.set_size_inches(…)</snippet></ROW><ROW><id>8219005</id><snippet>self.url</snippet></ROW><ROW><id>8219005</id><snippet>url</snippet></ROW><ROW><id>8219005</id><snippet>url</snippet></ROW><ROW><id>8219005</id><snippet>visit()</snippet></ROW><ROW><id>8219268</id><snippet>string.Formatter</snippet></ROW><ROW><id>8219268</id><snippet>&gt;&gt;&gt; class Mapping(object):
...     def __getitem__(self, key):
...         return 'Proxied: %s' % key
...
&gt;&gt;&gt; my_mapping = Mapping()
&gt;&gt;&gt; from string import Formatter
&gt;&gt;&gt; Formatter().vformat('{Thing1} and {other_thing}', (), my_mapping)
'Proxied: Thing1 and Proxied: other_thing'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8219268</id><snippet>vformat</snippet></ROW><ROW><id>8219268</id><snippet>()</snippet></ROW><ROW><id>8219324</id><snippet>from PyQt4.QtCore import Qt
from PyQt4.QtGui import QApplication, QCursor
...
QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
# do lengthy process
QApplication.restoreOverrideCursor()
</snippet></ROW><ROW><id>8219584</id><snippet>import csv
with open("input.csv", "rb") as input, open("output.csv", "wb") as output:
    w = csv.writer(output)
    for record in csv.reader(input):
        w.writerow(tuple(s.remove("\n") for s in record))
</snippet></ROW><ROW><id>8219709</id><snippet>cf</snippet></ROW><ROW><id>8219709</id><snippet>
num_rows = len(list(cf.get_range()))
</snippet></ROW><ROW><id>8219709</id><snippet>start</snippet></ROW><ROW><id>8219709</id><snippet>row_count</snippet></ROW><ROW><id>8219749</id><snippet>'abc'</snippet></ROW><ROW><id>8219749</id><snippet>str</snippet></ROW><ROW><id>8219749</id><snippet>u'abc'</snippet></ROW><ROW><id>8219749</id><snippet>'abc'</snippet></ROW><ROW><id>8219749</id><snippet>str</snippet></ROW><ROW><id>8219749</id><snippet>b'abc'</snippet></ROW><ROW><id>8219749</id><snippet>u'abc'</snippet></ROW><ROW><id>8219749</id><snippet>        |  2.x                     |  3.x
--------+--------------------------+-----------------------
Bytes   |  'abc' &lt;type 'str'&gt;      |  b'abc' &lt;type 'bytes'&gt;
Unicode | u'abc' &lt;type 'unicode'&gt;  |   'abc' &lt;type 'str'&gt;
</snippet></ROW><ROW><id>8219867</id><snippet>mount -o offset=32256 /dev/sda /mnt/my_hd
</snippet></ROW><ROW><id>8219982</id><snippet>&gt;&gt;&gt; d = {1:'男人'}
&gt;&gt;&gt; d[1]
'\xe7\x94\xb7\xe4\xba\xba'
&gt;&gt;&gt; print d[1]
男人
</snippet></ROW><ROW><id>8220095</id><snippet>&gt;&gt;&gt; [re.findall(r'[A-Za-z_\'-]+[^-\d\(\)\']', line) for line in s.split('\n')]
[['dep', 'Company', 'rent'], 
 ['conj_or', 'rent', 'share'], 
 ['amod', 'information', 'personal'], 
 ['prep_about', 'rent', 'you'], 
 ['amod', 'companies', 'non-affiliated'], 
 ['aux', 'provide', 'to'], 
 ['xcomp', 'you', 'provide'], 
 ['dobj', 'provide', 'products'], 
 ['aux', 'requested', "'ve"]]
</snippet></ROW><ROW><id>8220095</id><snippet>[A-Za-z]</snippet></ROW><ROW><id>8220095</id><snippet>[^...]</snippet></ROW><ROW><id>8220095</id><snippet>\</snippet></ROW><ROW><id>8220095</id><snippet>s</snippet></ROW><ROW><id>8220141</id><snippet>from sys import platform as _platform
if _platform == "linux" or _platform == "linux2":
    # linux
elif _platform == "darwin":
    # OS X
elif _platform == "win32":
    # Windows...
</snippet></ROW><ROW><id>8220198</id><snippet>datetime</snippet></ROW><ROW><id>8220198</id><snippet>timedelta</snippet></ROW><ROW><id>8220198</id><snippet>total_seconds()</snippet></ROW><ROW><id>8220211</id><snippet>\n</snippet></ROW><ROW><id>8220211</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8220388</id><snippet>import random
random_numbers = [ random.random() for _ in xrange(N) ]
</snippet></ROW><ROW><id>8220388</id><snippet>random</snippet></ROW><ROW><id>8220388</id><snippet>randint</snippet></ROW><ROW><id>8220460</id><snippet>&gt;&gt;&gt; text = 'If JOHN would be married to PETER, then MARY would probably be unhappy'
&gt;&gt;&gt; names = ['JOHN', 'LARRY', 'PETER', 'MARY']
&gt;&gt;&gt; [text.find(name) for name in names]
[3, -1, 28, 40]  #This list will be always long as the names list
</snippet></ROW><ROW><id>8220460</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>8220460</id><snippet>find</snippet></ROW><ROW><id>8220512</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; message = '''hQIOA68nz9GqU7SREAgAxWfwvpziO4N6KquxmeuYD/txfTceyXRZGVqAGFUGmOdE
... +K9PCLp/+p3cFC8OcOZg8WReI4wlpYzgS3/XsB4LL9MegSHwjjI9jNsnQOr9EeLA
... IgDEb1NeXZ499qnSY1ZvCy/VCF1O7H71y77VQTckpfyHgWvzkaaaheMC0r+JGLZO
... 0w3NCTERFJ8XaXKz/+qw4gA7xxbpT9nXVXMwEwYgiAviJBJhdYw63oTlRYGgGzPh
... H2YVNv2TWnpWp816xi+sbM1ZsJJERnAZSADKFYZzYw4E73VhUlrX5YBY4WN7UmQw=
... '''
&gt;&gt;&gt; binascii.a2b_base64(message)
'\x85\x02\x0e\x03\xaf\'\xcf\xd1\xaaS\xb4\x91\x10\x08\x00\xc5g\xf0\xbe\x9c\xe2;\x83z*\xab\xb1\x99\xeb\x98\x0f\xfbq}7\x1e\xc9tY\x19Z\x80\x18U\x06\x98\xe7D\xf8\xafO\x08\xba\x7f\xfa\x9d\xdc\x14/\x0ep\xe6`\xf1d^#\x8c%\xa5\x8c\xe0K\x7f\xd7\xb0\x1e\x0b/\xd3\x1e\x81!\xf0\x8e2=\x8c\xdb\'@\xea\xfd\x11\xe2\xc0"\x00\xc4oS^]\x9e=\xf6\xa9\xd2cVo\x0b/\xd5\x08]N\xec~\xf5\xcb\xbe\xd5A7$\xa5\xfc\x87\x81k\xf3\x91\xa6\x9a\x85\xe3\x02\xd2\xbf\x89\x18\xb6N\xd3\r\xcd\t1\x11\x14\x9f\x17ir\xb3\xff\xea\xb0\xe2\x00;\xc7\x16\xe9O\xd9\xd7Us0\x13\x06 \x88\x0b\xe2$\x12au\x8c:\xde\x84\xe5E\x81\xa0\x1b3\xe1\x1ff\x156\xfd\x93ZzV\xa7\xcdz\xc6/\xacl\xcdY\xb0\x92DFp\x19H\x00\xca\x15\x86sc\x0e\x04\xefuaRZ\xd7\xe5\x80X\xe1c{Rd0'
</snippet></ROW><ROW><id>8220541</id><snippet>required=True</snippet></ROW><ROW><id>8220541</id><snippet>class MyModel(models.Model):
    tags = TagField(blank=False)
</snippet></ROW><ROW><id>8220599</id><snippet>SUBSYSTEM !="usb_device", ACTION !="add", GOTO="device_rules_end"
SYSFS{idVendor} =="1532", SYSFS{idProduct} =="0017", SYMLINK+="mydevice"
MODE="0666", OWNER="&lt;your-username-here&gt;", GROUP="root"
LABEL="device_rules_end"
</snippet></ROW><ROW><id>8220599</id><snippet>/etc/udev/rules.d</snippet></ROW><ROW><id>8220599</id><snippet>sudo</snippet></ROW><ROW><id>8220730</id><snippet>int([x[age1]])
</snippet></ROW><ROW><id>8220730</id><snippet>x = int(age1)
</snippet></ROW><ROW><id>8220730</id><snippet>print "Hi, " + name1+ " you will be 21 in: " + str(twentyone) + " years."
</snippet></ROW><ROW><id>8220730</id><snippet>name1 = raw_input("What's your name? ")
age1 = raw_input ("how old are you? ")
x = 0
x = int(age1)
twentyone = 21 - x
print "Hi, " + name1+ " you will be 21 in: " + str(twentyone) + " years."
</snippet></ROW><ROW><id>8220804</id><snippet>json_string = """
{
    "pk": 1, 
    "fa": "cc.ee", 
    "fb": {
        "fc": "", 
        "fd_id": "12345"
    }
}"""

import json
data = json.loads(json_string)
if data["fa"] == "cc.ee":
    data["fb"]["new_key"] = "cc.ee was present!"

print json.dumps(data)
</snippet></ROW><ROW><id>8220943</id><snippet>&gt;&gt;&gt; import timeit

&gt;&gt;&gt; setup = '''
import random

random.seed('slartibartfast')
s = [random.random() for i in range(1000)]
timsort = list.sort
'''

&gt;&gt;&gt; print min(timeit.Timer('a=s[:]; timsort(a)', setup=setup).repeat(7, 1000))
0.334147930145
</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>fd</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>fd</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>reactor</snippet></ROW><ROW><id>8220957</id><snippet>d1.callback(None)</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>f1</snippet></ROW><ROW><id>8220957</id><snippet>fd</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>f1</snippet></ROW><ROW><id>8220957</id><snippet>f3</snippet></ROW><ROW><id>8220957</id><snippet>d2.callback(None)</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>f2</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>f3</snippet></ROW><ROW><id>8220957</id><snippet>d1.callback(None)</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>f1</snippet></ROW><ROW><id>8220957</id><snippet>fd</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>f2</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>d2.callback(None)</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>d1</snippet></ROW><ROW><id>8220957</id><snippet>f3</snippet></ROW><ROW><id>8220957</id><snippet>d2</snippet></ROW><ROW><id>8220957</id><snippet>f2</snippet></ROW><ROW><id>8220957</id><snippet>f2</snippet></ROW><ROW><id>8220997</id><snippet>import BeautifulSoup
doc = BeautifulSoup.BeautifulStoneSoup(xml)
for item in doc.findAll('item'):
    for elt in item:
        if isinstance(elt,BeautifulSoup.Tag):
            print(elt)
</snippet></ROW><ROW><id>8220997</id><snippet>import lxml.etree as ET
doc = ET.fromstring(xml)
for item in doc.xpath('//item'):
    for elt in item.xpath('descendant::*'):
        print(ET.tostring(elt))
</snippet></ROW><ROW><id>8220999</id><snippet>Popen_arg</snippet></ROW><ROW><id>8220999</id><snippet>Popen_arg</snippet></ROW><ROW><id>8220999</id><snippet>r'explorer /select, "C:\Apps\E_drive\Python_win32Clipboard.pdf"'
</snippet></ROW><ROW><id>8220999</id><snippet>Popen_arg = r'explorer /select, "' + f + '"'
</snippet></ROW><ROW><id>8220999</id><snippet>Popen_arg = str(Popen_arg)
</snippet></ROW><ROW><id>8221111</id><snippet>pdb</snippet></ROW><ROW><id>8221111</id><snippet>b classname.methodname
</snippet></ROW><ROW><id>8221111</id><snippet>% pdb ~/pybin/test.py

&gt; /home/unutbu/pybin/test.py(4)&lt;module&gt;()
-&gt; class Foo(object):
(Pdb) l
  1     #!/usr/bin/env python
  2     # coding: utf-8
  3     
  4  -&gt; class Foo(object):
  5         def bar(self): pass
  6     
  7     foo=Foo()
  8     foo.bar()
[EOF]
</snippet></ROW><ROW><id>8221111</id><snippet>(Pdb) b Foo.bar
*** The specified object 'Foo.bar' is not a function
or was not found along sys.path.
</snippet></ROW><ROW><id>8221111</id><snippet>(Pdb) n
&gt; /home/unutbu/pybin/test.py(7)&lt;module&gt;()
-&gt; foo=Foo()
(Pdb) l
  2     # coding: utf-8
  3     
  4     class Foo(object):
  5         def bar(self): pass
  6     
  7  -&gt; foo=Foo()
  8     foo.bar()
[EOF]
</snippet></ROW><ROW><id>8221111</id><snippet>(Pdb) b Foo.bar
Breakpoint 1 at /home/unutbu/pybin/test.py:5
(Pdb) 

(Pdb) r
&gt; /home/unutbu/pybin/test.py(5)bar()
-&gt; def bar(self): pass
</snippet></ROW><ROW><id>8221125</id><snippet>shutil</snippet></ROW><ROW><id>8221125</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; remote_fo = urllib2.urlopen('http://docs.python.org/library/shutil.html')
&gt;&gt;&gt; with open('bigfile', 'wb') as local_fo:
...     shutil.copyfileobj(remote_fo, local_fo)
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8221125</id><snippet>copyfileobj</snippet></ROW><ROW><id>8221125</id><snippet>shutil.copyfileobj.</snippet></ROW><ROW><id>8221125</id><snippet>def copyfileobj(fsrc, fdst, length=16*1024):
    """copy data from file-like object fsrc to file-like object fdst"""
    while 1:
        buf = fsrc.read(length)
        if not buf:
            break
        fdst.write(buf)
</snippet></ROW><ROW><id>8221263</id><snippet>from wsgiref import make_server</snippet></ROW><ROW><id>8221524</id><snippet>class MyClass:
    myList = []    # Static variable

    def __init__(self):
        self.myRealList = []   # Member variable
</snippet></ROW><ROW><id>8221524</id><snippet>c = MyClass()
c.myList = [1]
print MyClass.myList  # will print [1]
</snippet></ROW><ROW><id>8221524</id><snippet>__init__</snippet></ROW><ROW><id>8221764</id><snippet>eval</snippet></ROW><ROW><id>8221764</id><snippet>eval</snippet></ROW><ROW><id>8221764</id><snippet>eval(repr(x))</snippet></ROW><ROW><id>8221764</id><snippet>__repr__</snippet></ROW><ROW><id>8221932</id><snippet>import networkx as nx
data=[[1, 5, 6], [2, 3, 5, 6], [2, 5], [7]]
G = nx.DiGraph()
for path in data:
    G.add_nodes_from(path)
    G.add_path(path)
ts=nx.topological_sort(G)
print(ts)
# [7, 2, 3, 1, 5, 6]
</snippet></ROW><ROW><id>8222017</id><snippet>select</snippet></ROW><ROW><id>8222017</id><snippet>poll</snippet></ROW><ROW><id>8222017</id><snippet>select</snippet></ROW><ROW><id>8222017</id><snippet>poll</snippet></ROW><ROW><id>8222017</id><snippet>node.js</snippet></ROW><ROW><id>8222123</id><snippet>2011-11-22 10:15:37,188 INFO sqlalchemy.engine.base.Engine SELECT DATABASE()
2011-11-22 10:15:37,188 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,191 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'character_set%%'
2011-11-22 10:15:37,191 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,193 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'lower_case_table_names'
2011-11-22 10:15:37,193 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,194 INFO sqlalchemy.engine.base.Engine SHOW COLLATION
2011-11-22 10:15:37,194 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,200 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'sql_mode'
2011-11-22 10:15:37,201 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,203 INFO sqlalchemy.engine.base.Engine DESCRIBE `users`
2011-11-22 10:15:37,203 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,204 INFO sqlalchemy.engine.base.Engine ROLLBACK
2011-11-22 10:15:37,206 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE users (
    id INTEGER NOT NULL AUTO_INCREMENT, 
    firstname VARCHAR(40), 
    lastname INTEGER, 
    PRIMARY KEY (id)
)


2011-11-22 10:15:37,206 INFO sqlalchemy.engine.base.Engine ()
2011-11-22 10:15:37,331 INFO sqlalchemy.engine.base.Engine COMMIT
2011-11-22 10:15:37,333 INFO sqlalchemy.engine.base.Engine INSERT INTO users (id, firstname, lastname) VALUES (%s, %s, %s)
2011-11-22 10:15:37,333 INFO sqlalchemy.engine.base.Engine ((1, 'Name1', 'Lname1'), (2, 'Name2', 'Lname2'), (3, 'Name3', 'Lname3'))
</snippet></ROW><ROW><id>8222151</id><snippet># convert mystring from little-endian UTF-16 with optional BOM to ASCII
mystring = unicode(mystring, encoding="utf-16le").encode("ascii", "ignore")
</snippet></ROW><ROW><id>8222151</id><snippet>mystring = unicode(mystring, encoding="utf-16le").lstrip(u"\ufeff")
</snippet></ROW><ROW><id>8222157</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>8222157</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "car":
            kwargs["queryset"] = Car.objects.filter(owner=request.user)
        return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>8222339</id><snippet>&gt;&gt;&gt; p='/stuff/home/blah/pictures/myaccount/album'
&gt;&gt;&gt; os.path.abspath(p).split(os.sep)[-1]
'album'
&gt;&gt;&gt; os.path.abspath(p).split(os.sep)[-2]
'myaccount'
&gt;&gt;&gt; os.path.abspath(p).split(os.sep)[-3]
'pictures'
&gt;&gt;&gt; os.path.abspath(p).split(os.sep)[-4]
'blah'
</snippet></ROW><ROW><id>8222439</id><snippet>script.py | grep "\\b2KB$" &gt; output.txt
</snippet></ROW><ROW><id>8222604</id><snippet>x</snippet></ROW><ROW><id>8222604</id><snippet>while</snippet></ROW><ROW><id>8222604</id><snippet>while abs(current - previous) &gt; tolerance:
</snippet></ROW><ROW><id>8222878</id><snippet>&gt;&gt;&gt; 'hello'.islower()
True

&gt;&gt;&gt; [m for m in dir(str) if m.startswith('is')]
['isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper']
</snippet></ROW><ROW><id>8222878</id><snippet>&gt;&gt;&gt; words = ['The', 'quick', 'BROWN', 'Fox', 'jumped', 'OVER', 'the', 'Lazy', 'DOG']
&gt;&gt;&gt; [word for word in words if word.islower()]
['quick', 'jumped', 'the']
&gt;&gt;&gt; [word for word in words if word.isupper()]
['BROWN', 'OVER', 'DOG']
&gt;&gt;&gt; [word for word in words if not word.islower() and not word.isupper()]
['The', 'Fox', 'Lazy']
</snippet></ROW><ROW><id>8223236</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8223236</id><snippet>For your convenience, if a tag has only one child node,
and that child node is a string,the child node is made
available as tag.string, as well as tag.contents[0].
</snippet></ROW><ROW><id>8223236</id><snippet>&gt;&gt;&gt; t = soup.find('title')
&lt;title&gt;&lt;ne&gt;MediaPortal&lt;/ne&gt; Install Guide&lt;/title&gt;
</snippet></ROW><ROW><id>8223236</id><snippet>tag.string</snippet></ROW><ROW><id>8223236</id><snippet>tag.contents</snippet></ROW><ROW><id>8223236</id><snippet>tag.text</snippet></ROW><ROW><id>8223236</id><snippet>&gt;&gt;&gt; t.contents
[&lt;ne&gt;MediaPortal&lt;/ne&gt;, u' Install Guide']
&gt;&gt;&gt; t.text
u'MediaPortalInstall Guide'
</snippet></ROW><ROW><id>8223265</id><snippet>numpy.rec.fromarrays</snippet></ROW><ROW><id>8223265</id><snippet>import numpy as np

a=np.array([1,2,3,4,5,6,7,8,9])
b=np.array(["a","b","c","d","e","f","g","h","i"])
c=np.array([9,8,7,6,5,4,3,2,1])

d = np.rec.fromarrays([a,b,c], formats=['i','S32','i'], names=['num','char','len'])
</snippet></ROW><ROW><id>8223265</id><snippet>itertools</snippet></ROW><ROW><id>8223265</id><snippet>In [2]: %timeit d = np.rec.fromarrays([a,b,c], formats=['i','S32','i'], names=['num','char','len'])
10000 loops, best of 3: 86.5 us per loop

In [6]: import itertools

In [7]: %timeit np.fromiter(itertools.izip(a,b,c),dtype=datatype)
100000 loops, best of 3: 11.5 us per loop
</snippet></ROW><ROW><id>8223278</id><snippet>class SessionWizardView(WizardView):
    @classonlymethod
    def as_view(cls, *args, **kwargs):
        #...snipped..
        pass

class ParentWizard(SessionWizardView):
    @classonlymethod
    def as_view(cls, *args, **kwargs):
        return super(cls, ParentWizard).as_view( ... )

class ChildWizard(ParentWizard):
    @classonlymethod
    def as_view(cls, *args, **kwargs):
        return super(cls, ChildWizard).as_view( ... )
</snippet></ROW><ROW><id>8223745</id><snippet>db_column</snippet></ROW><ROW><id>8223955</id><snippet>import urlparse
&gt;&gt;&gt; urlparse.urljoin(url1, url2)
'http://127.0.0.1/test1/test4/test6.xml'
</snippet></ROW><ROW><id>8224606</id><snippet>if option.A has a value that evaluates to True:
    define an empty class called "TmpClass" that inherits from the object called "A"
otherwise:
    define an empty class called "TmpClass" that inherits from the object called "B"
</snippet></ROW><ROW><id>8224606</id><snippet>print('TmpClass inherits from : %s' % TmpClass.__bases__)
</snippet></ROW><ROW><id>8225118</id><snippet>isinstance()</snippet></ROW><ROW><id>8225118</id><snippet>isinstance()</snippet></ROW><ROW><id>8225118</id><snippet>def setUp(self):
    self.mock_obj = mock.Mock(name="Mock object", spec=Fubar)
    self.sut = Monkey(self.mock_obj)

def test_is_method_called (self):
    """Calls the mock object method. not a real one."""
    self.sut.do_something()
    self.assertTrue(self.mock_obj.method.called)
</snippet></ROW><ROW><id>8225118</id><snippet>Fubar</snippet></ROW><ROW><id>8225395</id><snippet>urlopen()</snippet></ROW><ROW><id>8225395</id><snippet>\n</snippet></ROW><ROW><id>8225395</id><snippet>\r\n</snippet></ROW><ROW><id>8225395</id><snippet>\r</snippet></ROW><ROW><id>8225395</id><snippet>\n</snippet></ROW><ROW><id>8225395</id><snippet>&gt;&gt;&gt; from urllib import urlopen
&gt;&gt;&gt; urlopen("http://****.com/win_new_lines.htm").read()
'line 1\nline 2\n\n\nline 3'
&gt;&gt;&gt; urlopen("http://****.com/unix_new_lines.htm").read()   
'line 1\nline 2\n\n\nline 3'
</snippet></ROW><ROW><id>8225411</id><snippet>Axes.axis(*v, **kwargs)</snippet></ROW><ROW><id>8225411</id><snippet>ax1.axis(xmin=0.5,xmax=13.5)
</snippet></ROW><ROW><id>8225419</id><snippet>set_text</snippet></ROW><ROW><id>8225419</id><snippet>set_markup</snippet></ROW><ROW><id>8225419</id><snippet>self.label.set_use_markup(True)
t = time.strftime('%m/%d/%Y-%H%M%S')
self.label.set_markup('&lt;span size="18000"&gt;The time:&lt;/span&gt; ' + t)
</snippet></ROW><ROW><id>8225588</id><snippet>c.py</snippet></ROW><ROW><id>8225588</id><snippet>a.py</snippet></ROW><ROW><id>8225588</id><snippet>b.py</snippet></ROW><ROW><id>8225588</id><snippet>a.py</snippet></ROW><ROW><id>8225588</id><snippet>VAR</snippet></ROW><ROW><id>8225588</id><snippet>__main__</snippet></ROW><ROW><id>8225588</id><snippet>a.py</snippet></ROW><ROW><id>8225588</id><snippet>VAR</snippet></ROW><ROW><id>8225588</id><snippet>p()</snippet></ROW><ROW><id>8225588</id><snippet>VAR</snippet></ROW><ROW><id>8225588</id><snippet>b.p()</snippet></ROW><ROW><id>8225588</id><snippet>a.p()</snippet></ROW><ROW><id>8225588</id><snippet>VAR</snippet></ROW><ROW><id>8225588</id><snippet>b.py</snippet></ROW><ROW><id>8225588</id><snippet>VAR</snippet></ROW><ROW><id>8225588</id><snippet>__main__</snippet></ROW><ROW><id>8225635</id><snippet>__rmul__()</snippet></ROW><ROW><id>8225715</id><snippet>sys.stdout = codecs.getwriter(encoding)(sys.stdout)</snippet></ROW><ROW><id>8225715</id><snippet>print</snippet></ROW><ROW><id>8225715</id><snippet>&gt;&gt;&gt; print u"%s" % Bottle(u"魯賓遜漂流記")
debug: __unicode__ 魯賓遜漂流記
{{{魯賓遜漂流記}}}
</snippet></ROW><ROW><id>8225715</id><snippet>sys.stdout</snippet></ROW><ROW><id>8225715</id><snippet>sys.stdout</snippet></ROW><ROW><id>8225715</id><snippet>__unicode__()</snippet></ROW><ROW><id>8225715</id><snippet>def __init__(self, msg, encoding='utf-8'):
    if not isinstance(msg, unicode):
       msg = msg.decode(encoding)
    self.msg = msg

def __unicode__(self):
    return u"{{{%s}}}" % self.msg
</snippet></ROW><ROW><id>8225715</id><snippet>__repr__()</snippet></ROW><ROW><id>8225715</id><snippet>str</snippet></ROW><ROW><id>8225715</id><snippet>def __repr__(self):
    return "Bottle(%r)" % self.msg
</snippet></ROW><ROW><id>8225715</id><snippet>__str__()</snippet></ROW><ROW><id>8225715</id><snippet>str</snippet></ROW><ROW><id>8225715</id><snippet>encoding</snippet></ROW><ROW><id>8225715</id><snippet>def __str__(self, encoding="utf-8")
    return self.__unicode__().encode(encoding)
</snippet></ROW><ROW><id>8225715</id><snippet>write()</snippet></ROW><ROW><id>8225715</id><snippet>def write(self, file, encoding=None):
    encoding = encoding or getattr(file, 'encoding', None)
    s = unicode(self)
    if encoding is not None:
       s = s.encode(encoding)
    return file.write(s)
</snippet></ROW><ROW><id>8225786</id><snippet>configparser</snippet></ROW><ROW><id>8225786</id><snippet>import ConfigParser, os

config = ConfigParser.ConfigParser()
config.readfp(open('defaults.cfg'))
config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')])
</snippet></ROW><ROW><id>8226090</id><snippet>example.conf</snippet></ROW><ROW><id>8226090</id><snippet># use normal python comments

value1 = 32
value2 = u"A unicode value"
value3 = "A plain string value"

value4 = ["lists", "are", "handy"]
value5 = {"and": "so", "are": "dictionaries"}
</snippet></ROW><ROW><id>8226090</id><snippet>execfile</snippet></ROW><ROW><id>8226090</id><snippet>if __name__ == "__main__":
    config = {}
    execfile("example.conf", config) 
    # python 3: exec(open("example.conf").read(), config)

    print config["value1"]
    print config["value5"]
</snippet></ROW><ROW><id>8226090</id><snippet>execfile</snippet></ROW><ROW><id>8226090</id><snippet>import</snippet></ROW><ROW><id>8226090</id><snippet>settings.py</snippet></ROW><ROW><id>8226090</id><snippet>~/.bashrc</snippet></ROW><ROW><id>8226090</id><snippet>site.py</snippet></ROW><ROW><id>8226377</id><snippet>#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;boost/make_shared.hpp&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

namespace bp = boost::python;

struct Foo{
    Foo(){}
    Foo(std::string const&amp; s) : m_string(s){}
    void doSomething() {
        std::cout &lt;&lt; "Foo:" &lt;&lt; m_string &lt;&lt; std::endl;
    }
    std::string m_string;
};

typedef boost::shared_ptr&lt;Foo&gt; foo_ptr;

BOOST_PYTHON_MODULE(hello)
{
    bp::class_&lt;Foo, foo_ptr&gt;("Foo")
        .def("doSomething", &amp;Foo::doSomething)
    ;
};

int main(int argc, char **argv)
{
    Py_Initialize();
    try {
        PyRun_SimpleString(
            "a_foo = None\n"
            "\n"
            "def setup(a_foo_from_cxx):\n"
            "    print 'setup called with', a_foo_from_cxx\n"
            "    global a_foo\n"
            "    a_foo = a_foo_from_cxx\n"
            "\n"
            "def run():\n"
            "    a_foo.doSomething()\n"
            "\n"
            "print 'main module loaded'\n"
        );

        foo_ptr a_cxx_foo = boost::make_shared&lt;Foo&gt;("c++");

        inithello();
        bp::object main = bp::object(bp::handle&lt;&gt;(bp::borrowed(
            PyImport_AddModule("__main__")
        )));

        // pass the reference to a_cxx_foo into python:
        bp::object setup_func = main.attr("setup");
        setup_func(a_cxx_foo);

        // now run the python 'main' function
        bp::object run_func = main.attr("run");
        run_func();
    }
    catch (bp::error_already_set) {
        PyErr_Print();
    }

    Py_Finalize();

    return 0;
}
</snippet></ROW><ROW><id>8226785</id><snippet>cython.cdivision</snippet></ROW><ROW><id>8226951</id><snippet>from cluster import *

data = [10.01,5.001,4.89,5.1,9.9,10.1,5.05,4.99]
cl = HierarchicalClustering(data, lambda x,y: abs(x-y))
print [mean(cluster) for cluster in cl.getlevel(1.0)]
</snippet></ROW><ROW><id>8226951</id><snippet>[5.0062, 10.003333333333332]
</snippet></ROW><ROW><id>8227914</id><snippet>subprocess.Popen(["emacs", "--batch", "+83:28", "md.mdp", "--eval", 
                 eval("'(insert \"%g\")'" %i), "-f", "save-buffer", "--kill"], 
                 stdout=subprocess.PIPE).wait()
</snippet></ROW><ROW><id>8227914</id><snippet>subprocess.Popen(["grompp", "-f", "%s" %opts.myMdp, "-c", "%s" %opts.myGro,
                 "-p", "%s" %opts.myTop], stdout=subprocess.PIPE).wait()
</snippet></ROW><ROW><id>8227914</id><snippet>'(insert \"%g\")' %i</snippet></ROW><ROW><id>8227914</id><snippet>Traceback (most recent call last): File
"/home/boris/its/plts/bio/bk-simulates-work.py", line 100, in &lt;module&gt;

subprocess.Popen(["emacs", "--batch", "+83:28", "md.mdp", "--eval",
'(insert \"%g\")' %i, "-f", "save-buffer", "--kill"],
stdout=subprocess.PIPE).wait() 

NameError: name 'i' is not defined
</snippet></ROW><ROW><id>8227914</id><snippet>for in in range....</snippet></ROW><ROW><id>8227914</id><snippet>'(insert \"%g\")'</snippet></ROW><ROW><id>8227914</id><snippet>subprocess.Popen(["emacs", "--batch", "+83:28", "md.mdp", "--eval",
'(insert \"%g\")', "-f", "save-buffer", "--kill"],
stdout=subprocess.PIPE).wait()
</snippet></ROW><ROW><id>8227914</id><snippet>myInput = open(opts.myMdp, 'r')
myTempFile = opts.myMdp + '~~~'
myOutput = open(myTempFile, 'w')
for line in myInput:
    myOutput.write(line.replace(opts.myToken, "%g" %myValue))
myOutput.close()
myInput.close()
os.rename(myTempFile, opts.myMdp)
</snippet></ROW><ROW><id>8228132</id><snippet>local</snippet></ROW><ROW><id>8228132</id><snippet>local</snippet></ROW><ROW><id>8228215</id><snippet>import PyQt4.QtCore.Qt
</snippet></ROW><ROW><id>8228215</id><snippet>Qt</snippet></ROW><ROW><id>8228215</id><snippet>from PyQt4 import QtCore
</snippet></ROW><ROW><id>8228215</id><snippet>QtCore.Qt.AlignRight
</snippet></ROW><ROW><id>8228215</id><snippet>QGridLayout.addItem</snippet></ROW><ROW><id>8228259</id><snippet># hello.py
def hello(to=__name__):
    return "hello, %s" % to

if __name__ == "__main__":
    print hello("world")
</snippet></ROW><ROW><id>8228259</id><snippet>__name__</snippet></ROW><ROW><id>8228259</id><snippet>#program.py
from hello import hello # this won't cause anything to print
print hello("world")
</snippet></ROW><ROW><id>8228259</id><snippet>$ python hello.py
hello, __main__
</snippet></ROW><ROW><id>8228259</id><snippet>__name__</snippet></ROW><ROW><id>8228259</id><snippet>__main__</snippet></ROW><ROW><id>8228259</id><snippet>hello</snippet></ROW><ROW><id>8228259</id><snippet>__main__</snippet></ROW><ROW><id>8228470</id><snippet>TabularInline</snippet></ROW><ROW><id>8228470</id><snippet>class MyTabularInline(admin.TabularInline):
    model = MyModel
    readonly_fields = ['decrypt_first_field', 'decrypt_second_field']

    def decrypt_first_field(self, obj):
        if obj.first_field:
            return decrypt(obj.first_field)
        else:
            return 'Nothing here ...'

    def decrypt_first_field(self, obj):
        ...
</snippet></ROW><ROW><id>8228630</id><snippet>pip install http://pypi.python.org/packages/source/n/nltk/nltk-2.0.1rc1.tar.gz
</snippet></ROW><ROW><id>8228630</id><snippet>~/Downloads</snippet></ROW><ROW><id>8228630</id><snippet>pip install ~/Downloads/nltk-2.0.1rc1.tar.gz
</snippet></ROW><ROW><id>8228841</id><snippet>handle</snippet></ROW><ROW><id>8228841</id><snippet># incoming connection
def setup(self):
    print "connection established", self.client_address

def handle(self):
    while 1:
        try:
            self.data = self.request.recv(1024).strip()

            # incoming message
            self.headers = self.headsToDict(self.data.split("\r\n"))

            # its a handshake
            if "Upgrade" in self.headers and self.headers["Upgrade"] == "websocket":
                key = self.headers["Sec-WebSocket-Key"]
                accept = b64encode(sha1(key + MAGIC).hexdigest().decode('hex'))
                response = "HTTP/1.1 101 Switching Protocols\r\n"
                response += "Upgrade: websocket\r\n"
                response += "Connection: Upgrade\r\n"
                response += "Sec-WebSocket-Accept: "+accept+"\r\n\r\n"
                print response
                self.request.send(response)
            # its a normal message, echo it back
            else:
                print self.data
                self.request.send(self.data)
        except:
            print "except"
            break
</snippet></ROW><ROW><id>8228874</id><snippet>import logging
import sys
import unittest
</snippet></ROW><ROW><id>8229487</id><snippet>class MyClass(object):
    def someFunc():       
        thatDict={} # recreated every function call
</snippet></ROW><ROW><id>8229487</id><snippet>class MyClass(object):
    thatDict={} # Only one copy
</snippet></ROW><ROW><id>8229487</id><snippet>thatDict={} # Only one copy
class MyClass(object):
    ...
</snippet></ROW><ROW><id>8229809</id><snippet>PyString_</snippet></ROW><ROW><id>8229809</id><snippet>PyBytes_</snippet></ROW><ROW><id>8229809</id><snippet>PyInt_</snippet></ROW><ROW><id>8229809</id><snippet>PyLong_</snippet></ROW><ROW><id>8229809</id><snippet>PyUnicode_</snippet></ROW><ROW><id>8229809</id><snippet>PyString_/PyBytes_</snippet></ROW><ROW><id>8230183</id><snippet>from setings import *
try:
    from local.py import *
except ImportError:
    pass
</snippet></ROW><ROW><id>8230183</id><snippet>import os
DEBUG = False
TEMPLATE_DEBUG = DEBUG

SITE_ROOT = os.path.join( os.path.dirname( os.path.realpath(__file__) ) ,'..' )

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
    }

etc...
</snippet></ROW><ROW><id>8230183</id><snippet>from settings import settings as PROJECT_DEFAULT

PREPEND_WWW = False
DEBUG = True
TEMPLATE_DEBUG = DEBUG

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_pyscopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'somesecretname',                      # Or path to database file if using sqlite3.
        'USER': 'somesecretuser',                      # Not used with sqlite3.
        'PASSWORD': 'somesecretpassword',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

INSTALLED_APPS += PROJECT_DEFAULT.INSTALLED_APPS + ('debug_toolbar',)
</snippet></ROW><ROW><id>8230373</id><snippet>dict.fromkeys(s)</snippet></ROW><ROW><id>8230373</id><snippet>from json import dumps, loads, JSONEncoder, JSONDecoder
import pickle

class PythonObjectEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (list, dict, str, unicode, int, float, bool, type(None))):
            return JSONEncoder.default(self, obj)
        return {'_python_object': pickle.dumps(obj)}

def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(str(dct['_python_object']))
    return dct
</snippet></ROW><ROW><id>8230373</id><snippet>&gt;&gt;&gt; data = [1,2,3, set(['knights', 'who', 'say', 'ni']), {'key':'value'}, Decimal('3.14')]

&gt;&gt;&gt; j = dumps(data, cls=PythonObjectEncoder)

&gt;&gt;&gt; loads(j, object_hook=as_python_object)
[1, 2, 3, set(['knights', 'say', 'who', 'ni']), {u'key': u'value'}, Decimal('3.14')]
</snippet></ROW><ROW><id>8230454</id><snippet>argv</snippet></ROW><ROW><id>8230454</id><snippet>sys</snippet></ROW><ROW><id>8230454</id><snippet>from sys import argv
</snippet></ROW><ROW><id>8230454</id><snippet>sys</snippet></ROW><ROW><id>8230454</id><snippet>argv</snippet></ROW><ROW><id>8230470</id><snippet>worker_shutdown</snippet></ROW><ROW><id>8230470</id><snippet>MainProcess</snippet></ROW><ROW><id>8230470</id><snippet>worker_*</snippet></ROW><ROW><id>8230470</id><snippet>except for worker_process_init</snippet></ROW><ROW><id>8230470</id><snippet>MainProcess</snippet></ROW><ROW><id>8230470</id><snippet>--soft-time-limit</snippet></ROW><ROW><id>8230470</id><snippet>--time-limit</snippet></ROW><ROW><id>8230470</id><snippet>from celery import platforms
from celery.signals import worker_process_init

def cleanup_after_tasks(signum, frame):
    # reentrant code here (see http://docs.python.org/library/signal.html)

def install_pool_process_sighandlers(**kwargs):
    platforms.signals["TERM"] = cleanup_after_tasks
    platforms.signals["INT"] = cleanup_after_tasks

worker_process_init.connect(install_pool_process_sighandlers)
</snippet></ROW><ROW><id>8230724</id><snippet>str</snippet></ROW><ROW><id>8230724</id><snippet>unicode</snippet></ROW><ROW><id>8230724</id><snippet>str</snippet></ROW><ROW><id>8230724</id><snippet>unicode</snippet></ROW><ROW><id>8230724</id><snippet>body</snippet></ROW><ROW><id>8230724</id><snippet>str</snippet></ROW><ROW><id>8230724</id><snippet>body = [str(seg) for seg in body]
body = '\r\n'.join(body)
</snippet></ROW><ROW><id>8231236</id><snippet>workbook.datemode == 0</snippet></ROW><ROW><id>8231236</id><snippet>1.0 &lt;= value &lt; 61.0</snippet></ROW><ROW><id>8231335</id><snippet>who = raw_input("Give a name")
for name, number in zip(a, b): 
    if name == who:
        print name, number
</snippet></ROW><ROW><id>8231468</id><snippet>columnList = ['a', 'b', ............'zzzz']

results = {}
for column in columnList:
    query = (
            "select count(*) from " + tablename
            + " where " + column + " is not null"
            )
    result = execute_query(qCountsEmployee)
    results[column] = result
</snippet></ROW><ROW><id>8231468</id><snippet>def do_counting(column_list):
    for column in column_list:
        query = (
            "select count(*) from " + tablename
            + " where " + column + " is not null"
            )
        result = execute_query(qCountsEmployee)
        yield column, result

result_dict = dict(do_counting(['...']))
</snippet></ROW><ROW><id>8231638</id><snippet>rm -r bin
rm -r include
rm -r lib
rm .Python
</snippet></ROW><ROW><id>8231850</id><snippet>import os

filename = "a.txt"
if not os.access(filename, os.W_OK):
    print "Write access not permitted on %s" % filename
</snippet></ROW><ROW><id>8231934</id><snippet>n==1</snippet></ROW><ROW><id>8231934</id><snippet>n</snippet></ROW><ROW><id>8231934</id><snippet>n+1</snippet></ROW><ROW><id>8232156</id><snippet>curl</snippet></ROW><ROW><id>8232156</id><snippet>curl</snippet></ROW><ROW><id>8232156</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>8232156</id><snippet>subprocess.call()</snippet></ROW><ROW><id>8232156</id><snippet>stdout</snippet></ROW><ROW><id>8232156</id><snippet>subp = subprocess.Popen(['curl', '-O', imgurl], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

curlstdout, curlstderr = psub.communicate()

op = str(curlstdout)
</snippet></ROW><ROW><id>8232156</id><snippet>curl</snippet></ROW><ROW><id>8232162</id><snippet>draw.base.utils</snippet></ROW><ROW><id>8232162</id><snippet>draw.base.events</snippet></ROW><ROW><id>8232162</id><snippet>draw.base</snippet></ROW><ROW><id>8232162</id><snippet>draw.base</snippet></ROW><ROW><id>8232162</id><snippet>import draw.base.utils</snippet></ROW><ROW><id>8232162</id><snippet>import utils</snippet></ROW><ROW><id>8232162</id><snippet>from ..base import utils</snippet></ROW><ROW><id>8232162</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>8232162</id><snippet>draw.base.events</snippet></ROW><ROW><id>8232171</id><snippet>'\0'</snippet></ROW><ROW><id>8232171</id><snippet>import rijndael
import base64

KEY_SIZE = 16
BLOCK_SIZE = 32

def encrypt(key, plaintext):
    padded_key = key.ljust(KEY_SIZE, '\0')
    padded_text = plaintext + (BLOCK_SIZE - len(plaintext) % BLOCK_SIZE) * '\0'

    # could also be one of
    #if len(plaintext) % BLOCK_SIZE != 0:
    #    padded_text = plaintext.ljust((len(plaintext) / BLOCK_SIZE) + 1 * BLOCKSIZE), '\0')
    # -OR-
    #padded_text = plaintext.ljust((len(plaintext) + (BLOCK_SIZE - len(plaintext) % BLOCK_SIZE)), '\0')

    r = rijndael.rijndael(padded_key, BLOCK_SIZE)

    ciphertext = ''
    for start in range(0, len(padded_text), BLOCK_SIZE):
        ciphertext += r.encrypt(padded_text[start:start+BLOCK_SIZE])

    encoded = base64.b64encode(ciphertext)

    return encoded


def decrypt(key, encoded):
    padded_key = key.ljust(KEY_SIZE, '\0')

    ciphertext = base64.b64decode(encoded)

    r = rijndael.rijndael(padded_key, BLOCK_SIZE)

    padded_text = ''
    for start in range(0, len(ciphertext), BLOCK_SIZE):
        padded_text += r.decrypt(ciphertext[start:start+BLOCK_SIZE])

    plaintext = padded_text.split('\x00', 1)[0]

    return plaintext
</snippet></ROW><ROW><id>8232171</id><snippet>key = 'MyKey'
text = 'test'

encoded = encrypt(key, text)
print repr(encoded)
# prints 'I+KlvwIK2e690lPLDQMMUf5kfZmdZRIexYJp1SLWRJY='

decoded = decrypt(key, encoded)
print repr(decoded)
# prints 'test'
</snippet></ROW><ROW><id>8232171</id><snippet>$ php -a
Interactive shell

php &gt; $key = 'MyKey';
php &gt; $text = 'test';
php &gt; $output = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_ECB);
php &gt; $encoded = base64_encode($output);
php &gt; echo $encoded;
I+KlvwIK2e690lPLDQMMUf5kfZmdZRIexYJp1SLWRJY=
</snippet></ROW><ROW><id>8232178</id><snippet>try:
    do_something()
except Exception, ex:
    print "The process failed because", ex
    do_something_else()
</snippet></ROW><ROW><id>8232323</id><snippet>annotate(total_count=Sum(twitter_count) + Sum(facebook_count))
</snippet></ROW><ROW><id>8232323</id><snippet>def get_total(self):
    if twitter_count == None and facebook_count == None:
        return 0
    elif twitter_count != None and facebook_count != None:
        return twitter_count + facebook_count
    elif twitter_count != None:
        return twitter_count
    else:
        return facebook_count
total_count = property(get_total)
</snippet></ROW><ROW><id>8232323</id><snippet>pages = Page.objects.filter(
    setup_complete=1, active=1
).exclude(
    Q(background_image__isnull=True) | Q(background_image__exact='')
).annotate(
    total_count=Sum(total)
).order_by=('-total')
)[:99]
</snippet></ROW><ROW><id>8232436</id><snippet>std::vector</snippet></ROW><ROW><id>8232436</id><snippet>%include "pyabc.i"
%include "std_vector.i" // Assuming you don't already
</snippet></ROW><ROW><id>8232436</id><snippet>%template(MetaDataBase) std::vector&lt;Column*&gt;;
</snippet></ROW><ROW><id>8232436</id><snippet>std::vector</snippet></ROW><ROW><id>8232436</id><snippet>-extranative</snippet></ROW><ROW><id>8232436</id><snippet>__getitem__</snippet></ROW><ROW><id>8232436</id><snippet>%extend MetaData {
   Column* __getitem__(int i) { return (*self)[i]; }
};
</snippet></ROW><ROW><id>8232513</id><snippet>global ISC_CACHE
</snippet></ROW><ROW><id>8232513</id><snippet>x = 5 # global scope
def f():
    print x # This must be global, since it is never assigned in this function

&gt;&gt;&gt; f()
5

def g():
    x = 6 # This is a local variable, since we're assigning to it here
    print x

&gt;&gt;&gt; g()
6

def h():
    print x # Python will parse this as a local variable, since it is assigned to below
    x = 7

&gt;&gt;&gt; h()
UnboundLocalError: local variable 'x' referenced before assignment


def i():
    global x # Now we're making this a global variable, explicitly
    print x
    x = 8 # This is the global x, too

&gt;&gt;&gt; x # Print the global x
5
&gt;&gt;&gt; i()
5
&gt;&gt;&gt; x # What is the global x now?
8
</snippet></ROW><ROW><id>8232968</id><snippet>string[-4:]</snippet></ROW><ROW><id>8232968</id><snippet>string = "asdfPALD"
</snippet></ROW><ROW><id>8232968</id><snippet>string[-4:]</snippet></ROW><ROW><id>8232968</id><snippet>'PALD'</snippet></ROW><ROW><id>8233036</id><snippet>for i in range(10):
    print i
</snippet></ROW><ROW><id>8233036</id><snippet>from __future__ import print_function # Added in 2.6

map(print, range(10))
</snippet></ROW><ROW><id>8233228</id><snippet>setenv</snippet></ROW><ROW><id>8233271</id><snippet>itertools</snippet></ROW><ROW><id>8233271</id><snippet>permutations()</snippet></ROW><ROW><id>8233271</id><snippet>set</snippet></ROW><ROW><id>8233271</id><snippet>sorted</snippet></ROW><ROW><id>8233271</id><snippet>in</snippet></ROW><ROW><id>8233271</id><snippet>x in y</snippet></ROW><ROW><id>8233271</id><snippet>x</snippet></ROW><ROW><id>8233271</id><snippet>y</snippet></ROW><ROW><id>8233271</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; perms = [''.join(p) for p in permutations('AAAABBBB', 4)]
&gt;&gt;&gt; len(perms)
1680
&gt;&gt;&gt; len(set(perms))
16
&gt;&gt;&gt; filtered = [p for p in sorted(set(perms)) if 'AB' not in p]
&gt;&gt;&gt; filtered
['AAAA', 'BAAA', 'BBAA', 'BBBA', 'BBBB']
</snippet></ROW><ROW><id>8233425</id><snippet>sql='UPDATE proxydata SET description = ? WHERE proxy = ?'
args=[decription,proxy]
self.c.execute(sql,args)
</snippet></ROW><ROW><id>8233425</id><snippet>proxy</snippet></ROW><ROW><id>8233425</id><snippet>description</snippet></ROW><ROW><id>8233425</id><snippet>UPDATE ... VALUES ... WHERE</snippet></ROW><ROW><id>8233425</id><snippet>UPDATE ... SET ... WHERE</snippet></ROW><ROW><id>8233460</id><snippet>&gt;&gt;&gt; a = u'{0.128,0.128,0.133,0.137,0.141,0.146,0.15,0.155,0.159,0.164,0.169,0.174,0.179,0.185,0.19,0.196,0.202,0.208,0.214,0.22}'
&gt;&gt;&gt; [float(i) for i in a.strip('{}').split(',')]
[0.128, 0.128, 0.133, 0.137, 0.141, 0.146, 0.15, 0.155, 0.159, 0.164, 0.169, 0.174, 0.179, 0.185, 0.19, 0.196, 0.202, 0.208, 0.214, 0.22]
</snippet></ROW><ROW><id>8233460</id><snippet>str</snippet></ROW><ROW><id>8233460</id><snippet>.split()</snippet></ROW><ROW><id>8233460</id><snippet>strip()</snippet></ROW><ROW><id>8233460</id><snippet>float</snippet></ROW><ROW><id>8233460</id><snippet>str</snippet></ROW><ROW><id>8233460</id><snippet>{</snippet></ROW><ROW><id>8233460</id><snippet>}</snippet></ROW><ROW><id>8233460</id><snippet>.strip('{}')</snippet></ROW><ROW><id>8233460</id><snippet>,</snippet></ROW><ROW><id>8233460</id><snippet>.split(',')</snippet></ROW><ROW><id>8233460</id><snippet>float</snippet></ROW><ROW><id>8233802</id><snippet>import datetime as dt
data=[
    {"time": "2010-11-11 03:23:59"},
    {"time": "2010-11-12 10:16:15"},
    {"time": "2010-11-12 14:51:13"},
    ]

def freq(data):
    dates=[dt.datetime.strptime(dct['time'],'%Y-%m-%d %H:%M:%S') for dct in data]
    date_min=min(dates)
    date_max=max(dates)
    span=date_max-date_min
    l=len(dates)
    if span&lt;dt.timedelta(hours=1):
        duration='an hour'
    elif span&lt;dt.timedelta(hours=24):
        duration='a day'
    elif span&lt;dt.timedelta(days=7):
        duration='a week'
    else:
        duration='all'
    return l,duration

num,duration=freq(data)
print('{n} times in {d}'.format(n=num,d=duration))
</snippet></ROW><ROW><id>8233802</id><snippet>3 times in a week
</snippet></ROW><ROW><id>8234436</id><snippet>list</snippet></ROW><ROW><id>8234436</id><snippet>[ i for [_, i] in lst ]
</snippet></ROW><ROW><id>8234511</id><snippet>str.format</snippet></ROW><ROW><id>8234511</id><snippet>line_new = '{:&gt;12}  {:&gt;12}  {:&gt;12}'.format(word[0], word[1], word[2])
</snippet></ROW><ROW><id>8234511</id><snippet>%</snippet></ROW><ROW><id>8234511</id><snippet>str.format</snippet></ROW><ROW><id>8234511</id><snippet>line_new = '%12s  %12s  %12s' % (word[0], word[1], word[2])
</snippet></ROW><ROW><id>8234662</id><snippet>search</snippet></ROW><ROW><id>8234662</id><snippet>findall</snippet></ROW><ROW><id>8234662</id><snippet>number = re.search(r'\d+', filename).group()
</snippet></ROW><ROW><id>8234662</id><snippet>number = filter(str.isdigit, filename)
</snippet></ROW><ROW><id>8234670</id><snippet>listy2=['fun','super','Stop']
listy=['great','life','Stop','toys','nothing','Stop']
listpool=[listy,listy2]
total=[]
nested=True
for i in listpool:
    current=[]
    for line in enumerate(i):
        if (line[0]==0):
            current.append(line[1])
            #skipping first line
            continue
        if (line[1].strip()!="") and (nested==True):
            current.append(line[1])
            nested=False
            continue
        if (line[1].strip()=="Stop"):
            nested=True
            continue
    total.append(current)
print total
</snippet></ROW><ROW><id>8234670</id><snippet>listy=['great','life','Stop','toys','nothing','Stop']
listy2=['fun','super','Stop']
listpool=[listy,listy2]

total=[]
for i in listpool:
    nested=True
    current=[]
    for (n, line) in enumerate(i):
        if (n==0):
            current.append(line) #skipping first line
        elif nested and line.strip():
            current.append(line)
            nested=False
        elif line.strip()=="Stop":
            nested=True
    total.append(current)
print total
</snippet></ROW><ROW><id>8234812</id><snippet>strVar[-4:].isdigit()
</snippet></ROW><ROW><id>8234812</id><snippet>s = strVar[-4:]
try:
    i = int(s)
except ValueError:
    # handle the case that it isn't all digits
</snippet></ROW><ROW><id>8235574</id><snippet>50</snippet></ROW><ROW><id>8235574</id><snippet>50.0</snippet></ROW><ROW><id>8235574</id><snippet>Decimal</snippet></ROW><ROW><id>8235574</id><snippet>Decimal('50')</snippet></ROW><ROW><id>8235574</id><snippet>50</snippet></ROW><ROW><id>8235574</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d = Decimal('50')
&gt;&gt;&gt; print d
50
</snippet></ROW><ROW><id>8235574</id><snippet>DecimalField</snippet></ROW><ROW><id>8235574</id><snippet>import decimal
import json
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, decimal.Decimal):
            return '%.2f' % obj # Display Decimal obj as float
        return json.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>8235574</id><snippet>cls=DjangoJSONEncoder</snippet></ROW><ROW><id>8235574</id><snippet>simplejson.dump(...)</snippet></ROW><ROW><id>8235574</id><snippet>DecimalEncoder</snippet></ROW><ROW><id>8235574</id><snippet>from django.core.serializers.json import Serializer as JSONSerializer
class DecimalSerializer(JSONSerializer):
    def end_serialization(self):
        self.options.pop('stream', None)
        self.options.pop('fields', None)
        json.dump(self.objects, self.stream, cls=DecimalEncoder, **self.options)
</snippet></ROW><ROW><id>8235574</id><snippet>DecimalSerializer</snippet></ROW><ROW><id>8235574</id><snippet>my_serializer = DecimalSerializer()
print my_serializer.serialize([obj], indent=4)
</snippet></ROW><ROW><id>8235574</id><snippet>[
    {
        "pk": 1, 
        "model": "app.foomodel", 
        "fields": {
            "foo": "50.00"
        }
    }
]
</snippet></ROW><ROW><id>8235574</id><snippet>FooModel.foo</snippet></ROW><ROW><id>8235574</id><snippet>from django.core.exceptions import ValidationError

class FooModel(models.Model):
    foo = models.DecimalField(max_digits=6, decimal_places=3, null=True)

    def clean(self):
        if '.' not in str(self.foo):
            raise ValidationError('Input must be float!')

    def save(self, *args, **kwargs):
        self.full_clean()
        super(FooModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>8235574</id><snippet>&gt;&gt;&gt; f = FooModel(foo='1')
&gt;&gt;&gt; f.save()
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
  File "/home/jathan/sandbox/foo/app/models.py", line 15, in save
    self.full_clean()
  File "/usr/local/lib/python2.6/dist-packages/django/db/models/base.py", line 828, in full_clean
    raise ValidationError(errors)
ValidationError: {'__all__': [u'Input must be float!']}
</snippet></ROW><ROW><id>8235656</id><snippet>linkedin.LinkedIn</snippet></ROW><ROW><id>8235656</id><snippet>from django.conf import settings

key = settings.KEY
secret = settings.SECRET
return_url = settings.CALLBACK


# You make the api connection here, so its not tied to any function
api = linkedin.LinkedIn(key, secret, return_url)

def login(request):
    if api.request_token():
        auth_url = api.get_authorize_url()
        return HttpResponseRedirect(auth_url)

#below is the view that will get called with the oauth oken.
def token(request, param):
    #do stuff with the api.
</snippet></ROW><ROW><id>8235773</id><snippet>import csv
import sys

keys = []
values = []

reader = csv.reader(sys.stdin, delimiter="\t")
for row in reader:
    keys.extend(row)
    values.extend(next(reader))

    # skip empty line
    assert next(reader, []) == []

writer = csv.writer(sys.stdout, delimiter="\t")
writer.writerow(keys)
writer.writerow(values)
</snippet></ROW><ROW><id>8235773</id><snippet>python thingie.py &lt; sample.csv</snippet></ROW><ROW><id>8235846</id><snippet>INTEGER</snippet></ROW><ROW><id>8235846</id><snippet>PLUS</snippet></ROW><ROW><id>8235846</id><snippet>INTEGER</snippet></ROW><ROW><id>8235846</id><snippet>STAR</snippet></ROW><ROW><id>8235846</id><snippet>INTEGER</snippet></ROW><ROW><id>8235846</id><snippet>Expr := Sum | Product | INTEGER;
Sum := Expr PLUS Expr;
Product := Expr STAR Expr;
</snippet></ROW><ROW><id>8235846</id><snippet>Expr := Sum
Expr := Expr PLUS Expr
Expr := INTEGER(2) PLUS Expr
Expr := INTEGER(2) PLUS Product
Expr := INTEGER(2) PLUS Expr STAR Expr
Expr := INTEGER(2) PLUS Integer(3) STAR Expr
Expr := INTEGER(2) PLUS Integer(3) STAR Integer(2)
</snippet></ROW><ROW><id>8235846</id><snippet>2 + (3 * 2)</snippet></ROW><ROW><id>8235846</id><snippet>(2 + 3) * 2</snippet></ROW><ROW><id>8235846</id><snippet>Expr := Sum | Product | INTEGER;
Sum := Expr PLUS Expr; [2]
Product := Expr STAR Expr; [1]
</snippet></ROW><ROW><id>8235846</id><snippet>Expr := Sum | INTEGER;
Sum := Expr PLUS Product;
Product := Term STAR INTEGER;
</snippet></ROW><ROW><id>8235868</id><snippet>counter += 1</snippet></ROW><ROW><id>8235868</id><snippet>counter + 1</snippet></ROW><ROW><id>8235868</id><snippet>counter</snippet></ROW><ROW><id>8235868</id><snippet>for counter, file in ((i + 1, f) for i, f in enumerate(files)):
    ...
</snippet></ROW><ROW><id>8236059</id><snippet>(?:...)</snippet></ROW><ROW><id>8236059</id><snippet>s ='''[22/Nov/2011 12:57:58] "GET /media/js/jquery-1.4.3.min.js HTTP/1.1" 304 0
[22/Nov/2011 12:57:58] "GET /media/js/fancybox/fancybox-x.png HTTP/1.1" 304 0
[22/Nov/2011 12:57:59] "GET /media/js/fancybox/fancybox-y.png HTTP/1.1" 304 0
[22/Nov/2011 12:57:59] "GET /media/js/fancybox/blank.gif HTTP/1.1" 304 0
[22/Nov/2011 12:57:59] "GET /ajax/pages/erlebnisse/ HTTP/1.1" 200 563
[22/Nov/2011 12:58:00] "GET /erlebnisse/alle-erlebnisse/ HTTP/1.1" 200 17114'''

import re

for m in re.findall('([-\w]+\.(?:jpg|gif|png))', s):
    print m
</snippet></ROW><ROW><id>8236474</id><snippet>os.path.join()</snippet></ROW><ROW><id>8236564</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Row = namedtuple('Row', ['Pair0', 'Pair1', 'Scalar0', 'Names', 'Scalar1'])
&gt;&gt;&gt; d = [
         Row((732, 2378), (233, 23), 23, ['jamie'], 7),
         Row((732, 2378), (233, 43), 24, ['jamie'], 3),
         Row((732, 2378), (233, 56), 23, ['jamie'], 2),
         Row((3434, 2378), (45, 23), 23, ['hello'], 1),
         Row((3445, 2378), (76, 43), 23, ['hello'], 2),
         Row((7834, 2378), (90, 56), 24, ['hello'], 5),
]
</snippet></ROW><ROW><id>8236564</id><snippet>&gt;&gt;&gt; # filter on x[1][5] and x[2]
&gt;&gt;&gt; e = [r for r in d if r.Pair1[1]==x and r.Scalar0==23]
&gt;&gt;&gt; e
[Row(Pair0=(732, 2378), Pair1=(233, 23), Scalar0=23, Names=['jamie'], Scalar1=7),
 Row(Pair0=(3434, 2378), Pair1=(45, 23), Scalar0=23, Names=['hello'], Scalar1=1)
]
</snippet></ROW><ROW><id>8236577</id><snippet>a = fsub()</snippet></ROW><ROW><id>8236577</id><snippet>a</snippet></ROW><ROW><id>8236577</id><snippet>fsub()</snippet></ROW><ROW><id>8236577</id><snippet>None</snippet></ROW><ROW><id>8236577</id><snippet>fsub()</snippet></ROW><ROW><id>8236577</id><snippet>fsub()</snippet></ROW><ROW><id>8236577</id><snippet>import sys

def fmain():
    sys.stdout = open('output','a')
    fsub()
    sys.stdout = sys.__stdout__
    print 'Output of fsub():'
    print open('output').read(),
    # added the coma (,) to avoid a new line
</snippet></ROW><ROW><id>8236577</id><snippet>&gt;&gt;&gt; fmain()
Output of fsub():
OK
</snippet></ROW><ROW><id>8236708</id><snippet>somefile</snippet></ROW><ROW><id>8236708</id><snippet>import os
import re

def replace_action(target, source, env):
    # NB. this is a pretty sloppy way to write a builder, but
    #     for things that are used internally or infrequently
    #     it should be more than sufficient
    assert( len(target) == 1 )
    assert( len(source) == 1 )
    srcf = str(source[0])
    dstf = str(target[0])
    with open(srcf, "r") as f:
        contents = f.read()
        # In cases where this builder fails, check to make sure you
        # have correctly added REPLST to your environment
        for old, new in env['REPLST']:
            contents = re.sub( old, new, contents )
        with open( dstf, "w") as outf:
            outf.write(contents)

replace_builder = Builder(action = replace_action)

env = Environment( ENV = os.environ )
env.Append( BUILDERS = {'Replace' : replace_builder } )
b = env.Replace( 'somefile', ['somefile.tmpl'], REPLST=[('A','b')] )
lib = env.SharedLibrary('lib', object + [b], extra_libs )
</snippet></ROW><ROW><id>8236708</id><snippet>re.sub</snippet></ROW><ROW><id>8236853</id><snippet>lst.sort(key=lambda x: x[::-1])
</snippet></ROW><ROW><id>8236917</id><snippet>from module_where_superclass_is import SuperClass

class SubClass(SuperClass):

    def method1(self):
        # ...
</snippet></ROW><ROW><id>8236950</id><snippet>class FBUser(db.Model):
    id = db.StringProperty(required=True)
    created = db.DateTimeProperty(auto_now_add=True)
    updated = db.DateTimeProperty(auto_now=True)
    name = db.StringProperty(required=True)
    profile_url = db.StringProperty()
    access_token = db.StringProperty(required=True)
    name = db.StringProperty(required=True)
    picture = db.StringProperty()
    email = db.StringProperty()
    friends = db.StringListProperty()
    dirty = db.BooleanProperty()

class I18NPage(I18NHandler):
    def get(self):
    if self.request.get('code'):
          args = dict(
            code = self.request.get('code'),
            client_id = facebookconf.FACEBOOK_APP_ID,
            client_secret = facebookconf.FACEBOOK_APP_SECRET,
            redirect_uri = 'http://www.koolbusiness.com/',
          )
      logging.debug("client_id"+str(args))
          file = urllib.urlopen("https://graph.facebook.com/oauth/access_token?" + urllib.urlencode(args))
          try:
        logging.debug("reading file")
            token_response = file.read()
        logging.debug("read file"+str(token_response))
          finally:
            file.close()
          access_token = cgi.parse_qs(token_response)["access_token"][-1]
          graph = main.GraphAPI(access_token)
          user = graph.get_object("me")   #write the access_token to the datastore
      fbuser = main.FBUser.get_by_key_name(user["id"])
          logging.debug("fbuser "+str(fbuser))

          if not fbuser:
            fbuser = main.FBUser(key_name=str(user["id"]),
                                id=str(user["id"]),
                                name=user["name"],
                                profile_url=user["link"],
                                access_token=access_token)
            fbuser.put()
          elif fbuser.access_token != access_token:
            fbuser.access_token = access_token
            fbuser.put()
</snippet></ROW><ROW><id>8237415</id><snippet>&lt;</snippet></ROW><ROW><id>8237415</id><snippet>safe</snippet></ROW><ROW><id>8237415</id><snippet>{{menustring|safe}}</snippet></ROW><ROW><id>8237505</id><snippet>x % n</snippet></ROW><ROW><id>8237505</id><snippet>0 &lt;= result &lt; n</snippet></ROW><ROW><id>8237575</id><snippet>BytesIO</snippet></ROW><ROW><id>8237575</id><snippet>bytearray</snippet></ROW><ROW><id>8237575</id><snippet>BytesIO</snippet></ROW><ROW><id>8237575</id><snippet>&gt;&gt;&gt; f = io.BytesIO(b'abc')
&gt;&gt;&gt; view = f.getbuffer()

&gt;&gt;&gt; view[:] = b'def'
&gt;&gt;&gt; f.getvalue()
b'def'

&gt;&gt;&gt; view[3] = b'g'
IndexError: index out of bounds

&gt;&gt;&gt; f.seek(0, 2)
&gt;&gt;&gt; f.write(b'g')
BufferError: Existing exports of data: object cannot be re-sized

&gt;&gt;&gt; del view
&gt;&gt;&gt; f.write(b'g')
&gt;&gt;&gt; f.getvalue()
b'defg'
</snippet></ROW><ROW><id>8237603</id><snippet>try:
    raise BaseException()
except BaseException, ex:
    print ex 
</snippet></ROW><ROW><id>8237603</id><snippet>try:
    raise BaseException("abc")
except BaseException, ex:
    print ex
</snippet></ROW><ROW><id>8237623</id><snippet>a = Group( n | Group( n + OneOrMore( Suppress(",") + n )))
</snippet></ROW><ROW><id>8237623</id><snippet>n</snippet></ROW><ROW><id>8237623</id><snippet>n</snippet></ROW><ROW><id>8237623</id><snippet>n</snippet></ROW><ROW><id>8237623</id><snippet>a = Group( Group( n + OneOrMore( Suppress(",") + n )) | n)
</snippet></ROW><ROW><id>8237623</id><snippet>n</snippet></ROW><ROW><id>8237623</id><snippet>a = Group( n ^ Group( n + OneOrMore( Suppress(",") + n )))
</snippet></ROW><ROW><id>8237623</id><snippet>delimitedList</snippet></ROW><ROW><id>8237623</id><snippet>expr + ZeroOrMore(Suppress(",") + expr)</snippet></ROW><ROW><id>8237623</id><snippet>delimitedList</snippet></ROW><ROW><id>8237623</id><snippet>delimitedList("X")</snippet></ROW><ROW><id>8237659</id><snippet>self.left = None</snippet></ROW><ROW><id>8237659</id><snippet>None</snippet></ROW><ROW><id>8238022</id><snippet>r = [v for v in secondlst if v not in lst]
</snippet></ROW><ROW><id>8238022</id><snippet>list(set(secondlst).difference(lst))
</snippet></ROW><ROW><id>8238122</id><snippet>menu_option.add_command(label="Edit Comp List",command=conf('comp'))
</snippet></ROW><ROW><id>8238122</id><snippet>command=conf('comp')
</snippet></ROW><ROW><id>8238122</id><snippet>conf('comp')</snippet></ROW><ROW><id>8238122</id><snippet>print</snippet></ROW><ROW><id>8238122</id><snippet>command=function_name
</snippet></ROW><ROW><id>8238340</id><snippet>urlpatterns = patterns('kiosks.views', url(r'^([\w ]+)/$', 'dashboard'),)
</snippet></ROW><ROW><id>8238340</id><snippet>reverse()</snippet></ROW><ROW><id>8238412</id><snippet>set(tuple(sorted(r.iteritems())) for r in result)
</snippet></ROW><ROW><id>8238412</id><snippet>len(result)</snippet></ROW><ROW><id>8238412</id><snippet>counter = {}
for r in result:
    tup = tuple(sorted(r.iteritems()))
    counter[tup] = counter.get(tup, 0) + 1
for tup, cnt in counter.iteritems():
    print dict(tup), cnt
</snippet></ROW><ROW><id>8238412</id><snippet>{'object_id': 2, 'content_type': 42} 1
{'object_id': 1, 'content_type': 46} 2
</snippet></ROW><ROW><id>8238552</id><snippet>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; try:
...   int('k')
... except:
...   var = traceback.format_exc()
... 
&gt;&gt;&gt; print var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'k'
</snippet></ROW><ROW><id>8238644</id><snippet>if not artist_rows:</snippet></ROW><ROW><id>8238644</id><snippet>    artist_slug = self.makeSlug(l)

cursor.execute("SELECT count(id) FROM song_artist WHERE name = %s and slug = %s ;" ,(l,artist_slug) ) # Id exist?
artist_rows = cursor.fetchone()
#artist_rows = artist_rows[0]
db.commit()
if not artist_rows:
cursor.execute( 'INSERT INTO song_artist (name,slug) VALUES (%s,%s) RETURNING id;',(l,artist_slug))
#k=( 'INSERT INTO song_artist (name,slug) SELECT %s,%s WHERE NOT EXISTS ( SELECT 42 FROM song_artist WHERE name = %s) RETURNING id;'%(l,artist_slug,l))
artist_id = cursor.fetchone()[0] # get mysql_insert_id using RETURNING
db.commit()
</snippet></ROW><ROW><id>8238782</id><snippet>\src
    \PackageNr1
       Main.py  &lt;-- File where Django was called.
    \PackageNr2  &lt;-- Package for the Django Files
       \trades   &lt;-- Django App
          models.py , 
          views ...usw 
       settings.py  &lt;-- Django Settings File
       manage.py 
</snippet></ROW><ROW><id>8238782</id><snippet> \src
    \PackageNr1
        \trades    &lt;-- The django app
            models.py
            views ....
        Main.py
        settings.py &lt;--Django Files
        manage.py
</snippet></ROW><ROW><id>8239626</id><snippet>import urllib2
import feedparser
import time
import sys

url = 'http://www.zurnal24.si/index.php?ctl=show_rss'
opener = urllib2.build_opener()
opener.addheaders = [('User-Agent', 'Mozilla/5.0')]

# Try to connect a few times, waiting longer after each consecutive failure
MAX_ATTEMPTS = 8
for attempt in range(MAX_ATTEMPTS):
    try:
        request = opener.open(url)
        break
    except urllib2.URLError, e:
        sleep_secs = attempt ** 2
        print &gt;&gt; sys.stderr, 'ERROR: %s.\nRetrying in %s seconds...' % (e, sleep_secs)            
        time.sleep(sleep_secs)

response = request.read()
feed = feedparser.parse(response)
title = feed['channel']['title']
print title
</snippet></ROW><ROW><id>8239849</id><snippet>__init__.py</snippet></ROW><ROW><id>8239849</id><snippet>def get_user_profile(self, access_token, selectors=None, headers=None, **kwargs):
    """
    Get a user profile.  If keyword argument "id" is not supplied, this
    returns the current user's profile, else it will return the profile of
    the user whose id is specificed.  The "selectors" keyword argument takes
    a list of LinkedIn compatible field selectors.
    """
</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser.parse_args</snippet></ROW><ROW><id>8239911</id><snippet>parse_known_args</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser.parse_known_args</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser._parse_known_args</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser._parse_known_args</snippet></ROW><ROW><id>8239911</id><snippet>-h</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser.parse_args</snippet></ROW><ROW><id>8239911</id><snippet>import sys, argparse
parser = argparse.ArgumentParser(description='my illustrative example', argument_default=argparse.SUPPRESS)
parser.add_argument('--content', metavar='file',
                     default='content.txt', type=argparse.FileType('r'),
                     help='file to process (defaults to content.txt)')
parser._parse_known_args(sys.argv[1:], argparse.Namespace())
args = parser.parse_args()
</snippet></ROW><ROW><id>8239911</id><snippet>ArgumentParser._parse_known_args</snippet></ROW><ROW><id>8239911</id><snippet>argparse</snippet></ROW><ROW><id>8239940</id><snippet>print pars_resp(rawresp0)
</snippet></ROW><ROW><id>8239940</id><snippet>pars_resp</snippet></ROW><ROW><id>8239940</id><snippet>None</snippet></ROW><ROW><id>8239940</id><snippet>pars_resp(rawresp0)
</snippet></ROW><ROW><id>8239940</id><snippet>def pars_resp(text):
    reg = re.compile(ur'(?&lt;=&lt;comment&gt;).+(?=&lt;/comment&gt;)', re.U)
    return reg.search(unicode(text, "UTF-8")).group(0)

print pars_resp(rawresp0)
</snippet></ROW><ROW><id>8240891</id><snippet>from django.shortcuts import render
def index(request):
    return render(request, 'app/index.html', { 'foo': 'bar', })
</snippet></ROW><ROW><id>8240891</id><snippet>from django.shortcuts import render
def myrender(request, template, dictionary):
    dictionary.update({'template_name': template})
    return render(request, template, dictionary)
</snippet></ROW><ROW><id>8240891</id><snippet>myutils.py</snippet></ROW><ROW><id>8240891</id><snippet>#from django.shortcuts import render &lt;- delete this line
from myutils import myrender as render
def index(request):
    return render(request, 'app/index.html', { 'foo': 'bar', })
</snippet></ROW><ROW><id>8240891</id><snippet>render</snippet></ROW><ROW><id>8240891</id><snippet>{{ template_name }}</snippet></ROW><ROW><id>8240891</id><snippet>render_to_response</snippet></ROW><ROW><id>8240891</id><snippet>import myrender as render</snippet></ROW><ROW><id>8240891</id><snippet>as render</snippet></ROW><ROW><id>8240891</id><snippet>render</snippet></ROW><ROW><id>8240891</id><snippet>myrender</snippet></ROW><ROW><id>8240991</id><snippet>dict(comb1)</snippet></ROW><ROW><id>8240991</id><snippet>&gt;&gt;&gt; comb1=[1,2,3,4]
&gt;&gt;&gt; dict(comb1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot convert dictionary update sequence element #0 to a sequence
</snippet></ROW><ROW><id>8240991</id><snippet>assertRaises</snippet></ROW><ROW><id>8240991</id><snippet>True</snippet></ROW><ROW><id>8240991</id><snippet>calculate_combinations</snippet></ROW><ROW><id>8241129</id><snippet>parser.reset()</snippet></ROW><ROW><id>8241224</id><snippet>manage.py runserver</snippet></ROW><ROW><id>8241224</id><snippet>manage.py shell</snippet></ROW><ROW><id>8241360</id><snippet>WIN1251</snippet></ROW><ROW><id>8241360</id><snippet>client_encoding</snippet></ROW><ROW><id>8241360</id><snippet>pyodbc</snippet></ROW><ROW><id>8241360</id><snippet>SET CLIENT_ENCODING TO 'WIN1251';
</snippet></ROW><ROW><id>8241367</id><snippet>def search(table_iterator, d, D, B):
    headings = next(table_iterator)
    junk = next(table_iterator)
    key = [d, D]
    for row in table_iterator:
        if row[0:2] != key: continue
        for index, value in enumerate(row[2:-1]):
            if value == B: 
                return headings(2 + index)
    return None
</snippet></ROW><ROW><id>8241592</id><snippet>&gt;&gt;&gt; d =  {'translation 1': 'dilligent', 'pinyin 1': 'ren4wei2', 'character 1': '\xe8\xaa\x8d\xe7\x88\xb2'}
&gt;&gt;&gt; key = "translation %s" % 1
&gt;&gt;&gt; d[key]
'dilligent'
</snippet></ROW><ROW><id>8241606</id><snippet>#!/usr/bin/python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

#vectors to plot: 4D for this example
y1=[1,2.3,8.0,2.5]
y2=[1.5,1.7,2.2,2.9]

x=[1,2,3,8] # spines

fig,(ax,ax2,ax3) = plt.subplots(1, 3, sharey=False)

# plot the same on all the subplots
ax.plot(x,y1,'r-', x,y2,'b-')
ax2.plot(x,y1,'r-', x,y2,'b-')
ax3.plot(x,y1,'r-', x,y2,'b-')

# now zoom in each of the subplots 
ax.set_xlim([ x[0],x[1]])
ax2.set_xlim([ x[1],x[2]])
ax3.set_xlim([ x[2],x[3]])

# set the x axis ticks 
for axx,xx in zip([ax,ax2,ax3],x[:-1]):
  axx.xaxis.set_major_locator(ticker.FixedLocator([xx]))
ax3.xaxis.set_major_locator(ticker.FixedLocator([x[-2],x[-1]]))  # the last one

# EDIT: add the labels to the rightmost spine
for tick in ax3.yaxis.get_major_ticks():
  tick.label2On=True

# stack the subplots together
plt.subplots_adjust(wspace=0)

plt.show()
</snippet></ROW><ROW><id>8241619</id><snippet>f.write(timestamp + ',' + dayTemp[0] + '\n')
</snippet></ROW><ROW><id>8241715</id><snippet>DOC = """&lt;root&gt;
  &lt;link rel='alternate' type='text/html' href='http://www.youtube.com/watch?v=gfyKPbic&amp;feature=youtube_gdata'/&gt;
  &lt;link rel='http://gdata.youtube.com/schemas/2007#video.responses' type='application/atom+xml' href='http://gdata.youtube.com/feeds/api/videos/gf7zhyKPbic/responses'/&gt;
&lt;/root&gt;"""
from xml.dom.minidom import parseString, parse
dom = parseString(DOC)
hreflist= [elt.getAttribute("href") for elt in dom.getElementsByTagName('link')  if elt.getAttribute("rel")=="alternate"]
for href in hreflist:
    print(href)
</snippet></ROW><ROW><id>8242238</id><snippet>__doc__</snippet></ROW><ROW><id>8242238</id><snippet>from django.utils.translation import ugettext_lazy as _
class Items(Model):
    __doc__ = _('translatable description for Items')

    def total(self):
        return self.__total
    total.__doc__ = _(""" Method: Count total order price""")
</snippet></ROW><ROW><id>8242359</id><snippet>import threading

def task1():
    pass
def task2():
    pass
def task3():
    pass
def task4():
    pass
def task5():
    pass
def task6():
    pass

def dep1():
    t1 = threading.Thread(target=task1)
    t2 = threading.Thread(target=task2)
    t3 = threading.Thread(target=task3)

    t1.start()
    t2.start()
    t3.start()

    t1.join()
    t2.join()
    t3.join()

def  dep2():
    t4 = threading.Thread(target=task4)
    t5 = threading.Thread(target=task5)

    t4.start()
    t5.start()

    t4.join()
    t5.join()

def dep3():
    d1 = threading.Thread(target=dep1)
    d2 = threading.Thread(target=dep2)

    d1.start()
    d2.start()

    d1.join()
    d2.join()

d3 = threading.Thread(target=dep3)
d3.start()
d3.join()
</snippet></ROW><ROW><id>8242372</id><snippet>file.read(SOME_BYTE_COUNT)</snippet></ROW><ROW><id>8242372</id><snippet>import numpy as np
a = np.fromfile("filename.ext", dtype="uint8")
</snippet></ROW><ROW><id>8242372</id><snippet>np.fromstring</snippet></ROW><ROW><id>8242372</id><snippet>np.tostring</snippet></ROW><ROW><id>8242372</id><snippet>np.tofile</snippet></ROW><ROW><id>8242372</id><snippet>np.insert</snippet></ROW><ROW><id>8242372</id><snippet>np.delete</snippet></ROW><ROW><id>8242372</id><snippet>np.append</snippet></ROW><ROW><id>8242372</id><snippet>largefile.bin</snippet></ROW><ROW><id>8242462</id><snippet>os.startfile(url)</snippet></ROW><ROW><id>8242462</id><snippet>start http://www.example.com</snippet></ROW><ROW><id>8242462</id><snippet>BROWSER</snippet></ROW><ROW><id>8242900</id><snippet>import itertools  

a = [1, 2, 3]
b = [4, 5, 6]
c = list(itertools.product(a, b))

idx = c.index((1,4))
</snippet></ROW><ROW><id>8242978</id><snippet>AUTO INCREMENT</snippet></ROW><ROW><id>8242978</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>8242978</id><snippet>AUTO_INCREMENT</snippet></ROW><ROW><id>8242978</id><snippet>date</snippet></ROW><ROW><id>8242978</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>8242978</id><snippet>LOAD DATA INFILE 'file_name'
    INTO TABLE videoinfo
    (`date`, src_ip, hash)
</snippet></ROW><ROW><id>8242978</id><snippet>INSERT</snippet></ROW><ROW><id>8242978</id><snippet>INSERT INTO videoinfo (`date`, src_ip, hash)
  VALUES (...);
</snippet></ROW><ROW><id>8243232</id><snippet>list.append('foo')
</snippet></ROW><ROW><id>8243232</id><snippet>list.insert(0, 'foo')
</snippet></ROW><ROW><id>8243839</id><snippet># On the POSIX compliant platforms, `utcfromtimestamp(timestamp)` is
# equivalent to the following expression:
datetime(1970, 1, 1) + timedelta(seconds=timestamp)

# There is no method to obtain the timestamp from a `datetime` instance,
# but POSIX timestamp corresponding to a `datetime` instance `dt` can be
# easily calculated as follows. For a naive `dt`:
timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)

# And for an aware ``dt``::
timestamp = (dt - datetime(1970, 1, 1, tzinfo=timezone.utc)) / timedelta(seconds=1)
</snippet></ROW><ROW><id>8243998</id><snippet>class CollectorContext(object):
    """Sets the meta_path hook with the passed import hook when
    entering and clean up when exiting
    """

    def __init__(self, collector, argv, output_file):
        self.collector = collector
        self.old_argv = argv[:]
        self.output_file = output_file
        self.progname = self.old_argv[1]

    def __enter__(self):
        sys.argv = self.old_argv[1:]
        sys.meta_path.append(self.collector)
        return self

    def __exit__(self, type, value, traceback):
        # TODO: should assert that the variables are None, otherwise
        # we are quitting with some exceptions
        self.collector.dump_to_file(self.output_file)
        sys.meta_path.remove(self.collector)
        sys.argv = self.old_argv[:]

    def run(self):
        code = compile(open(self.progname).read(), self.progname, 'exec')
        exec(code)


def main_context():
    cl = CollectImports()

    with CollectorContext(cl, sys.argv, 'imports.log') as cc:
        cc.run()
</snippet></ROW><ROW><id>8244379</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; diff = datetime.datetime.utcnow() - datetime.datetime(1900, 1, 1, 0, 0, 0)
&gt;&gt;&gt; timestamp = diff.days*24*60*60+diff.seconds
&gt;&gt;&gt; timestamp
3531049334
</snippet></ROW><ROW><id>8244379</id><snippet>timedelta.total_seconds()</snippet></ROW><ROW><id>8244876</id><snippet>exec_()</snippet></ROW><ROW><id>8244876</id><snippet>messagebox.finished.connect(self.handler)
messagebox.setWindowModality(QtCore.Qt.WindowModal)
messagebox.setParent(messagebox.parentWidget(), QtCore.Qt.Sheet)
messagebox.setResult(0)
messagebox.show()
</snippet></ROW><ROW><id>8244949</id><snippet>myList = [10,20,30,40,50,60,70,80,90]
myInt = 10
newList = [x/myInt for x in myList]
</snippet></ROW><ROW><id>8245178</id><snippet>import os 

for dirpath, dirsInDirpath, filesInDirPath in os.walk("yourFolderContainingTxtFiles"):
    for myfile in filesInDirPath:
        sqlQuery = "LOAD DATA INFILE %s INTO TABLE xxxx (col1,col2,...);" % os.path.join(dirpath, myfile)
        # execute the query here using your mysql connector.
        # I used string formatting to build the query, but you should use the safe placeholders provided by the mysql api instead of %s, to protect against SQL injections
</snippet></ROW><ROW><id>8245239</id><snippet>r".*\d"
</snippet></ROW><ROW><id>8245239</id><snippet>.</snippet></ROW><ROW><id>8245239</id><snippet>*</snippet></ROW><ROW><id>8245239</id><snippet>\d</snippet></ROW><ROW><id>8245239</id><snippet>[x for x in old_list if x[-1].isdigit()]
</snippet></ROW><ROW><id>8245582</id><snippet>__metaclass__</snippet></ROW><ROW><id>8245582</id><snippet>@dont_decorate</snippet></ROW><ROW><id>8245582</id><snippet>def dont_decorate(func):
    func._dont_decorate = True
    return func
</snippet></ROW><ROW><id>8245582</id><snippet>if callable(value):</snippet></ROW><ROW><id>8245582</id><snippet>if callable(value) and not hasttr(value, "_dont_decorate"):
</snippet></ROW><ROW><id>8245582</id><snippet>isinstance()</snippet></ROW><ROW><id>8245582</id><snippet>callable()</snippet></ROW><ROW><id>8245673</id><snippet>unicode()</snippet></ROW><ROW><id>8245771</id><snippet>validate_unique</snippet></ROW><ROW><id>8245771</id><snippet>is_deleted</snippet></ROW><ROW><id>8245771</id><snippet>False</snippet></ROW><ROW><id>8245771</id><snippet>...

def validate_unique(self, exclude=None):
    if not self.is_deleted and \
       LibraryEntry.objects.exclude(pk=self.pk).filter(host_lib_song_id=self.host_lib_song_id, owning_user=self.owning_user).exists():
        raise ValidationError('Some error message about uniqueness required')
    super(LibraryEntry, self).validate_unique(exclude=exclude)
</snippet></ROW><ROW><id>8245991</id><snippet>append</snippet></ROW><ROW><id>8245991</id><snippet>subid</snippet></ROW><ROW><id>8245991</id><snippet>topid = { 
    "ida" : "ida",
    "idb" : "idb",
    "idc" : "idc",
    "subid" : {}
}
</snippet></ROW><ROW><id>8245991</id><snippet>topid = { 
    "ida" : "ida",
    "idb" : "idb",
    "idc" : "idc",
    "subid" : []
}
</snippet></ROW><ROW><id>8245991</id><snippet>subid</snippet></ROW><ROW><id>8246171</id><snippet>def first_row(a, labels):
    d = {}
    d_setdefault = d.setdefault
    len_ = len
    num_labels = len_(labels)
    for i, row in enumerate(a):
        for label in row:
            d_setdefault(label, i)
        if len_(d) == num_labels:
            break
    return d
</snippet></ROW><ROW><id>8246171</id><snippet>A</snippet></ROW><ROW><id>8246171</id><snippet>A.T</snippet></ROW><ROW><id>8246171</id><snippet>A[::-1]</snippet></ROW><ROW><id>8246171</id><snippet>A.T[::-1]</snippet></ROW><ROW><id>8246171</id><snippet>map(d.get, labels)</snippet></ROW><ROW><id>8246405</id><snippet>hidx/GUI/main.py</snippet></ROW><ROW><id>8246405</id><snippet>@pyqtSignature("")
def on_actionScatterplot_Matrix_activated(self):
    ...
    spm = scatmat.ScatMat(pars, self.currentdbname)
    print "==&gt;", spm.pw.isVisible()
    spm.pw.hide()
    spm.pw.showMaximized()
    print spm.pw.size()
    print "==&gt;", spm.pw.isVisible()

@pyqtSignature("int")
def on_rowStart_valueChanged(self, p0):
    ...
</snippet></ROW><ROW><id>8246405</id><snippet>on_actionScatterplot_Matrix_activated</snippet></ROW><ROW><id>8246405</id><snippet>ScatMat</snippet></ROW><ROW><id>8246524</id><snippet>import inspect

print inspect.stack()
</snippet></ROW><ROW><id>8246524</id><snippet>import a
</snippet></ROW><ROW><id>8246524</id><snippet>[
   (&lt;frame object at 0x28a9b70&gt;, '/path/a.py', 5, '&lt;module&gt;', ['print inspect.stack()\n'], 0),
   (&lt;frame object at 0x28a9660&gt;, 'b.py', 2, '&lt;module&gt;', ['import to_import\n'], 0)
]
</snippet></ROW><ROW><id>8246541</id><snippet>teamLeader = ForeignKey(User)
</snippet></ROW><ROW><id>8246779</id><snippet>setup(
    windows = [
              {'script': PyAppName,
               'icon_resources':[(0, Icon)],
               'dest_base' : Exe[:-4],
               'version' : AppVers,
               'company_name' : "JoaquinAbian",
               'copyright' : "No Copyrights",
               'name' : AppName 
              }
              ],
</snippet></ROW><ROW><id>8246905</id><snippet>try:
    fn = argv[1]

except IndexError:
    fn = raw_input("filename &gt; ")
</snippet></ROW><ROW><id>8246980</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>8246980</id><snippet>def get_time_deltas(infile):
    entries = (line.split() for line in open(INFILE, "r"))
    ts = {} 
    for e in entries:
        if len(e) == 11 and " ".join(e[2:5]) == "TMsg out: [O]":
            ts[e[8]] = e[0]   # store timestamp for id
        elif len(e) == 10 and " ".join(e[2:5]) == "TMsg in: [A]":   
            in_ts, ref_id = e[0], e[9]
            # Raises KeyError if out msg not seen yet. Handle if required.
            out_ts = ts.pop(ref_id)   # get ts for this id
            yield (ref_id[1:-1], float(in_ts) - float(out_ts))
</snippet></ROW><ROW><id>8246980</id><snippet>&gt;&gt;&gt; INFILE = 'C:/Users/kdalton/Documents/Minicomm.txt'
&gt;&gt;&gt; list(get_time_deltas(INFILE))
[('123', 8.699999307282269e-05), ('1233', 0.00028700000257231295)]
</snippet></ROW><ROW><id>8246980</id><snippet>&gt;&gt;&gt; with open("out.txt", "w") as outfile:
...     for id, td in get_time_deltas(INFILE):
...          outfile.write("Msg %s took %f seconds\n", (id, td))
</snippet></ROW><ROW><id>8246980</id><snippet>def get_time_deltas(infile):
    entries = (line.split() for line in open(INFILE, "r"))
    ts = {} 
    for e in entries:
        if " ".join(e[2:5]) == "OuchMsg out: [O]":
            ts[e[8]] = e[0]   # store timestamp for id
        elif " ".join(e[2:5]) == "OuchMsg in: [A]":   
            in_ts, ref_id = e[0], e[7]
            out_ts = ts.pop(ref_id, None)   # get ts for this id
            # TODO: handle case where out_ts = None (no id found)
            yield (ref_id[1:-1], float(in_ts) - float(out_ts))

INFILE = 'C:/Users/kdalton/Documents/Minicomm.txt'
print list(get_time_deltas(INFILE))
</snippet></ROW><ROW><id>8246980</id><snippet>ordID</snippet></ROW><ROW><id>8246980</id><snippet>in</snippet></ROW><ROW><id>8246980</id><snippet>refID</snippet></ROW><ROW><id>8246980</id><snippet>out</snippet></ROW><ROW><id>8246980</id><snippet>OuchMsg</snippet></ROW><ROW><id>8246980</id><snippet>TMsg</snippet></ROW><ROW><id>8246980</id><snippet>deltas = [d for _, d in get_time_deltas(INFILE)] 
average = sum(deltas) / len(deltas)
</snippet></ROW><ROW><id>8246980</id><snippet>data = list(get_time_deltas(INFILE))
# .. use data for something some operation ...

# calculate average using the list
average = sum(d for _, d in data) / len(data)
</snippet></ROW><ROW><id>8247218</id><snippet>glob</snippet></ROW><ROW><id>8247218</id><snippet>from glob import glob
paths = glob('set01/*/*.png')
</snippet></ROW><ROW><id>8247256</id><snippet>data problems log;
  length line $1000;

  infile "&amp;logfile";
  input;

  logfile = "&amp;logfile";
  line_no = _n_;
  line    = _infile_;
  problem = 0;

  if 
  (
     line =: "ERROR:"
  or line =: "WARNING:"
  or line =: "NOTE: Numeric values have been converted to character values"
  or line =: "NOTE: Character values have been converted to numeric values"
  or line =: "NOTE: Missing values were generated as a result of performing an operation on missing values"
  or line =: "NOTE: MERGE statement has more than one data set with repeats of BY values"
  or line =: "NOTE: Invalid (or missing) arguments to the INTNX function have caused the function to return"
  or line =: "INFO: Character variables have defaulted to a length of 200"
  or line =: "NOTE: Invalid"
  )
  and not
  (
     line =: "WARNING: Your system is scheduled to expire"
  or line =: "WARNING: The Base Product product with which Session Manager is associated"
  or line =: "WARNING: will be expiring soon, and is currently in warning mode to indicate"
  or line =: "WARNING: this upcoming expiration. Please run PROC SETINIT to obtain more"
  or line =: "WARNING: information on your warning period."
  or line =: "WARNING: This CREATE TABLE statement recursively references the target table. A consequence"
  or line =: "WARNING: Unable to copy SASUSER registry to WORK registry. Because of this, you will not see registry customizations during this"
  or line =: "WARNING: Estimates did not improve after a ridge was encountered in the objective function."
  or line =: "WARNING: Estimates may not have converged."
  or line =: "ERROR: A lock is not available for"
  or line =: "ERROR: Errors printed on pages"
  )
  then do;
    problem = 1;
    output problems;
  end;
  output log;
run;
</snippet></ROW><ROW><id>8247457</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route('/flask')
def hello_world():
  return 'This comes from Flask ^_^'
</snippet></ROW><ROW><id>8247457</id><snippet>from tornado.wsgi import WSGIContainer
from tornado.ioloop import IOLoop
from tornado.web import FallbackHandler, RequestHandler, Application
from flasky import app

class MainHandler(RequestHandler):
  def get(self):
    self.write("This message comes from Tornado ^_^")

tr = WSGIContainer(app)

application = Application([
(r"/tornado", MainHandler),
(r".*", FallbackHandler, dict(fallback=tr)),
])

if __name__ == "__main__":
  application.listen(8000)
  IOLoop.instance().start()
</snippet></ROW><ROW><id>8247579</id><snippet>with open("input") as infile, open("ouptut", "w") as outfile:
    for line in infile:
        if line.startswith("chr"):
            key = line.strip()
        else:
            print &gt;&gt; outfile, key, line.rstrip("\n")
</snippet></ROW><ROW><id>8247835</id><snippet>&gt;&gt;&gt; s = 'http://www.domain.com/?s=some&amp;two=20'
&gt;&gt;&gt; s.split('&amp;')
['http://www.domain.com/?s=some', 'two=20']
</snippet></ROW><ROW><id>8247835</id><snippet>&gt;&gt;&gt; s2 = s.split('&amp;')[0]
&gt;&gt;&gt; print s2
http://www.domain.com/?s=some
</snippet></ROW><ROW><id>8247906</id><snippet>python3-numpy</snippet></ROW><ROW><id>8248228</id><snippet>submitted_fields = set(['length', 'width', 'color', 'single element'])
required_fields = set(['width', 'length'])
if submitted_fields &gt;= required_fields:
    # all required fields in submittedFields exist
else:
    # error handling
</snippet></ROW><ROW><id>8248430</id><snippet>os</snippet></ROW><ROW><id>8248430</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/home/user'
&gt;&gt;&gt; os.chdir("/tmp/")
&gt;&gt;&gt; os.getcwd()
'/tmp'
</snippet></ROW><ROW><id>8248430</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8248430</id><snippet>export PYTHONPATH=/path/to/my/library:$PYTHONPATH
</snippet></ROW><ROW><id>8248430</id><snippet>import</snippet></ROW><ROW><id>8248430</id><snippet>set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
</snippet></ROW><ROW><id>8248506</id><snippet>plt.subplots_adjust(top=0.85)</snippet></ROW><ROW><id>8248506</id><snippet>import numpy as np
import matplotlib.pyplot as plt

f = np.random.random(100)
g = np.random.random(100)
fig = plt.figure()
fig.suptitle('Long Suptitle', fontsize=24)
plt.subplot(121)
plt.plot(f)
plt.title('Very Long Title 1', fontsize=20)
plt.subplot(122)
plt.plot(g)
plt.title('Very Long Title 2', fontsize=20)
plt.subplots_adjust(top=0.85)
plt.show()
</snippet></ROW><ROW><id>8249026</id><snippet>small_article_popular(article)</snippet></ROW><ROW><id>8249026</id><snippet>article</snippet></ROW><ROW><id>8249026</id><snippet>None</snippet></ROW><ROW><id>8249026</id><snippet>if article:</snippet></ROW><ROW><id>8249103</id><snippet>repo.index.checkout([filename]. force=True)</snippet></ROW><ROW><id>8249178</id><snippet>I just can't figure this out and honestly I can't get my head around what's going wrong</snippet></ROW><ROW><id>8249178</id><snippet>validateString</snippet></ROW><ROW><id>8249178</id><snippet>string</snippet></ROW><ROW><id>8249178</id><snippet>validateTel</snippet></ROW><ROW><id>8249178</id><snippet>json</snippet></ROW><ROW><id>8249178</id><snippet>json</snippet></ROW><ROW><id>8249178</id><snippet>+</snippet></ROW><ROW><id>8249178</id><snippet>import re

def validateTel(call_ID):
    phoneNumberRegex = re.compile("^\d{10}$") # match a string of 10 digits
    return phoneNumberRegex.match(call_ID)
</snippet></ROW><ROW><id>8249178</id><snippet>import json
phoneNumber1, phoneNumber2, phoneNumber3 = ... whatever ...
mylist = [phoneNumber1, phoneNumber2, phoneNumber3]
print json.dumps(mylist)
</snippet></ROW><ROW><id>8249212</id><snippet>&gt;&gt;&gt; input = [10, ["ETSc", "Juniper Hairstreak"], ["ETSc", "Spotted Turtle"], ["ETSc", "Blanding's Turtle"], "IWWH"]
&gt;&gt;&gt; output = [elt[0] + " (" + elt[1] + ")" if type(elt) == list and elt[0] == "ETSc" else str(elt) for elt in input]
&gt;&gt;&gt; output
['10', 'ETSc (Juniper Hairstreak)', 'ETSc (Spotted Turtle)', "ETSc (Blanding's Turtle)", 'IWWH']
</snippet></ROW><ROW><id>8249212</id><snippet>def xform(elt):
    if type(elt) == list and len(elt) &gt; 1 and elt[0] == "ETSc":
        return elt[0] + " (" + elt[1] + ")"
    else:
        return str(elt)

output = [xform(elt) for elt in input]
</snippet></ROW><ROW><id>8249328</id><snippet>f2py.py</snippet></ROW><ROW><id>8249328</id><snippet>.PY</snippet></ROW><ROW><id>8249328</id><snippet>PATHEXT</snippet></ROW><ROW><id>8249551</id><snippet>&gt;&gt;&gt; ''.join(['first', 'second', 'other'])
'firstsecondother'
</snippet></ROW><ROW><id>8249551</id><snippet>for</snippet></ROW><ROW><id>8249551</id><snippet>&gt;&gt;&gt; mylist = ['first', 'second', 'other']
&gt;&gt;&gt; s = ""
&gt;&gt;&gt; for item in mylist:
...    s += item
...
&gt;&gt;&gt; s
'firstsecondother'
</snippet></ROW><ROW><id>8249646</id><snippet>total - yes</snippet></ROW><ROW><id>8249812</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>8249850</id><snippet>itertools.product()</snippet></ROW><ROW><id>8249850</id><snippet>&gt;&gt;&gt; list(itertools.product(*a))
[('a', 1), ('a', 2), ('b', 1), ('b', 2)]
</snippet></ROW><ROW><id>8249905</id><snippet>cd myproject</snippet></ROW><ROW><id>8249905</id><snippet>from IPython.external.path import _path</snippet></ROW><ROW><id>8249905</id><snippet>IPython/external/path/__init__.py</snippet></ROW><ROW><id>8250002</id><snippet>pip</snippet></ROW><ROW><id>8250002</id><snippet>0.8.1</snippet></ROW><ROW><id>8250002</id><snippet>sudo easy_install pip
</snippet></ROW><ROW><id>8250002</id><snippet>sudo pip install werkzeug
</snippet></ROW><ROW><id>8250002</id><snippet>pip</snippet></ROW><ROW><id>8250002</id><snippet>virtualenv</snippet></ROW><ROW><id>8250143</id><snippet>parser.parseargs(...)</snippet></ROW><ROW><id>8250143</id><snippet>set_defaults(...)</snippet></ROW><ROW><id>8250143</id><snippet>set_defaults()</snippet></ROW><ROW><id>8250143</id><snippet>import argparse

parser = argparse.ArgumentParser( version='pyargparsetest 1.0' )
subparsers = parser.add_subparsers(help='commands')

# all
all_parser = subparsers.add_parser('all', help='process all apps')
all_parser.set_defaults(which='all')

# app
app_parser = subparsers.add_parser('app', help='process a single app')
app_parser.add_argument('appname', action='store', help='name of app to process')
app_parser.set_defaults(which='app')
</snippet></ROW><ROW><id>8250143</id><snippet>print parser.parse_args(["all"])
</snippet></ROW><ROW><id>8250143</id><snippet>Namespace(which='all')
</snippet></ROW><ROW><id>8250143</id><snippet>add_subparsers()</snippet></ROW><ROW><id>8250252</id><snippet>&lt;key&gt;EnableTransactions&lt;/key&gt;&lt;true/&gt;</snippet></ROW><ROW><id>8250252</id><snippet>&lt;key&gt;EnableTransactions&lt;/key&gt;&lt;false/&gt;</snippet></ROW><ROW><id>8250450</id><snippet>&gt;&gt;&gt; costs = { '1': 1, '2': 2, '3': 3 }
&gt;&gt;&gt; open_set = set( ['1','2'] )
&gt;&gt;&gt; min(open_set,key=lambda x:costs[x])
'1'
</snippet></ROW><ROW><id>8250615</id><snippet>TarInfo</snippet></ROW><ROW><id>8250615</id><snippet>tar.extractfile(member)</snippet></ROW><ROW><id>8250615</id><snippet>member</snippet></ROW><ROW><id>8250615</id><snippet>TarInfo</snippet></ROW><ROW><id>8250615</id><snippet>extractfile(...)</snippet></ROW><ROW><id>8250615</id><snippet>read()</snippet></ROW><ROW><id>8250615</id><snippet>tar = tarfile.open('test.tar')</snippet></ROW><ROW><id>8250615</id><snippet>test_multiproc()</snippet></ROW><ROW><id>8250615</id><snippet>def test_multiproc():
    tar   = tarfile.open('test.tar')
    files = [name for name in tar.getnames()]
    pool  = Pool(processes=1)
    result = pool.map(read_file2, files)
    tar.close()
</snippet></ROW><ROW><id>8250615</id><snippet>def read_file2(name):
    t2 = tarfile.open('test.tar')
    print t2.extractfile(name).read()
    t2.close()
</snippet></ROW><ROW><id>8250848</id><snippet>/tmp</snippet></ROW><ROW><id>8250848</id><snippet>/tmp</snippet></ROW><ROW><id>8250902</id><snippet>from ctypes import string_at
from sys import getsizeof
from binascii import hexlify
a = 0x7fff 
print(hexlify(string_at(id(a), getsizeof(a))))
</snippet></ROW><ROW><id>8250902</id><snippet>b'02000000d8191e1e01000000ff7f'
</snippet></ROW><ROW><id>8251122</id><snippet>%feature("director:except")</snippet></ROW><ROW><id>8251122</id><snippet>#include &lt;iostream&gt;
#include &lt;exception&gt;

class MyException : public std::exception {
};

class AnotherException : public std::exception {
};

class Callback {
public:
        virtual ~Callback() { std::cout &lt;&lt; "~Callback()" &lt;&lt; std:: endl; }
        virtual void run() { std::cout &lt;&lt; "Callback::run()" &lt;&lt; std::endl; }
};

inline void call(Callback *callback) { if (callback) callback-&gt;run(); }
</snippet></ROW><ROW><id>8251122</id><snippet>import example 

class PyCallback(example.Callback):
    def __init__(self):
        example.Callback.__init__(self)
    def run(self):
        print("PyCallback.run()")
        raise example.MyException()

callback = PyCallback()
example.call(callback)
</snippet></ROW><ROW><id>8251122</id><snippet>%module(directors="1") example
%{
#include "example.h"
%}

%include "std_string.i"
%include "std_except.i"
%include "pyabc.i"

// Python requires that anything we raise inherits from this
%pythonabc(MyException, Exception);

%feature("director:except") {
    PyObject *etype = $error;
    if (etype != NULL) {
      PyObject *obj, *trace;
      PyErr_Fetch(&amp;etype, &amp;obj, &amp;trace);
      Py_DecRef(etype);
      Py_DecRef(trace);
      // Not too sure if I need to call Py_DecRef for obj

      void *ptr;
      int res = SWIG_ConvertPtr(obj, &amp;ptr, SWIGTYPE_p_MyException, 0);
      if (SWIG_IsOK(res) &amp;&amp; ptr) {
        MyException *e = reinterpret_cast&lt; MyException * &gt;(ptr);
        // Throw by pointer (Yucky!)
        throw e;
      }

      res = SWIG_ConvertPtr(obj, &amp;ptr, SWIGTYPE_p_AnotherException, 0);
      if (SWIG_IsOK(res) &amp;&amp; ptr) {
        AnotherException *e = reinterpret_cast&lt; AnotherException * &gt;(ptr);
        throw e; 
      }

      throw Swig::DirectorMethodException();
    }
}

%feature("director") Callback;
%include "example.h"
</snippet></ROW><ROW><id>8251122</id><snippet>MyException</snippet></ROW><ROW><id>8251122</id><snippet>PyErr_ExceptionMatches</snippet></ROW><ROW><id>8251122</id><snippet>  // Throw by value (after a copy!)
  MyException temp = *e;
  if (SWIG_IsNewObj(res)) 
    delete e;
  throw temp;
</snippet></ROW><ROW><id>8251122</id><snippet>MyException</snippet></ROW><ROW><id>8251122</id><snippet>%pythonabc</snippet></ROW><ROW><id>8251122</id><snippet>-py3</snippet></ROW><ROW><id>8251407</id><snippet>f = open(zipname , 'rb')
content =  f.read() 
f.close()

alt = open('x.zip', 'wb')
alt.write(content )
alt.close()
</snippet></ROW><ROW><id>8251564</id><snippet>pickle</snippet></ROW><ROW><id>8251564</id><snippet>serialize</snippet></ROW><ROW><id>8251564</id><snippet>pickle.dump(myobject, open('myfile', 'w'))
</snippet></ROW><ROW><id>8251564</id><snippet>myobject = pickle.load(open('myfile', 'r'))
</snippet></ROW><ROW><id>8251610</id><snippet>results = []
for i in range(runs):
    results.append(model_solve(100))
</snippet></ROW><ROW><id>8251610</id><snippet>np.hstack(results)
</snippet></ROW><ROW><id>8251757</id><snippet>import numpy as np
x = np.array([3,5,7,1,9,8,6,6])
y = np.array([2,1,5,10,100,6])

index = np.argsort(x)
sorted_x = x[index]
sorted_index = np.searchsorted(sorted_x, y)

yindex = np.take(index, sorted_index, mode="clip")
mask = x[yindex] != y

result = np.ma.array(yindex, mask=mask)
print result
</snippet></ROW><ROW><id>8251757</id><snippet>[-- 3 1 -- -- 6]
</snippet></ROW><ROW><id>8251896</id><snippet>EnumWindows</snippet></ROW><ROW><id>8251896</id><snippet>EnumDisplayMonitors</snippet></ROW><ROW><id>8251896</id><snippet>GetMonitorInfo</snippet></ROW><ROW><id>8251896</id><snippet>MoveWindow</snippet></ROW><ROW><id>8251918</id><snippet>cookies</snippet></ROW><ROW><id>8251918</id><snippet>cookies</snippet></ROW><ROW><id>8251918</id><snippet>cookies</snippet></ROW><ROW><id>8251918</id><snippet>response.info()</snippet></ROW><ROW><id>8251918</id><snippet>User-agent</snippet></ROW><ROW><id>8251918</id><snippet>from urllib import urlencode
# Use urlencode to encode your data

data = urlencode(dict(username='testuser', password=md5encode("testpassword")))
response = opener.open("http://site.com/login", data)
</snippet></ROW><ROW><id>8251918</id><snippet>site.com</snippet></ROW></DATA>