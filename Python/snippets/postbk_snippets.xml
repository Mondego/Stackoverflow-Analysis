<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>8686844</id><snippet>charset='ABC'
print '\n'.join(''.join(p) for i in xrange(1,len(charset)+1) 
                for p in itertools.product(charset, repeat=i))

A
B
C
AA
AB
AC
BA
BB
BC
CA
</snippet></ROW><ROW><id>8686844</id><snippet>for x in (''.join(p) for i in xrange(1,len(charset)+1) 
                for p in itertools.product(charset, repeat=i)):
    print x
    ...hashing code and other file I/O
</snippet></ROW><ROW><id>8686943</id><snippet>os.path.normpath('(path-to-wiki)/foo/bar.txt').startswith('(path-to-wiki)')
</snippet></ROW><ROW><id>8686943</id><snippet>userpath=os.path.normpath('(path-to-wiki)/foo/bar.txt')
re.findall(r'[^A-Za-z0-9_\-\\]',userpath)
</snippet></ROW><ROW><id>8686943</id><snippet>userpath=os.path.normpath('(path-to-wiki)/foo/bar.txt')</snippet></ROW><ROW><id>8686943</id><snippet>if not os.path.normpath('(path-to-wiki)/foo/bar.txt').startswith('(path-to-wiki)')  
   or re.search(r'[^A-Za-z0-9_\-\\]',userpath):
  ... Do what ever you want with an invalid path
</snippet></ROW><ROW><id>8686997</id><snippet>+</snippet></ROW><ROW><id>8687380</id><snippet>t = x; x = y; y = t</snippet></ROW><ROW><id>8687380</id><snippet>&gt;&gt;&gt; # swap a with b
&gt;&gt;&gt; 'obama'.replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
'oabmb'
</snippet></ROW><ROW><id>8687380</id><snippet>1,234,567.89</snippet></ROW><ROW><id>8687380</id><snippet>1.234.567,89</snippet></ROW><ROW><id>8687549</id><snippet>{% if user.is_authenticated %}
   Hello {{ user.username }}
{% else %}
   Please log in
{% endif %}
</snippet></ROW><ROW><id>8687918</id><snippet>scaled(const QSize, Qt::AspectRatioMode, Qt::TransformationMode)</snippet></ROW><ROW><id>8687918</id><snippet>Qt::KeepAspectRatio</snippet></ROW><ROW><id>8687918</id><snippet>scaled</snippet></ROW><ROW><id>8687918</id><snippet>pixmap</snippet></ROW><ROW><id>8687918</id><snippet>myPixmap = QtGui.QPixmap(_fromUtf8('image.jpg'))
myScaledPixmap = myPixmap.scaled(self.label.size(), Qt.KeepAspectRatio)
self.label.setPixmap(myScaledPixmap)
</snippet></ROW><ROW><id>8687954</id><snippet>__getattr__</snippet></ROW><ROW><id>8687954</id><snippet>__setattr__</snippet></ROW><ROW><id>8687954</id><snippet>class Structure(dict):
    def __getattr__(self, k):
        return self[k]
    def __setattr__(self, k, v):
        self[k] = v
</snippet></ROW><ROW><id>8687954</id><snippet>__getattr__</snippet></ROW><ROW><id>8687954</id><snippet>__setattr__</snippet></ROW><ROW><id>8687954</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>8688037</id><snippet>variable</snippet></ROW><ROW><id>8688037</id><snippet>2</snippet></ROW><ROW><id>8688037</id><snippet>1</snippet></ROW><ROW><id>8688037</id><snippet>name</snippet></ROW><ROW><id>8688037</id><snippet>1</snippet></ROW><ROW><id>8688037</id><snippet>2</snippet></ROW><ROW><id>8688037</id><snippet>variable</snippet></ROW><ROW><id>8688037</id><snippet>2</snippet></ROW><ROW><id>8688037</id><snippet>object3 = Sample()</snippet></ROW><ROW><id>8688037</id><snippet>2</snippet></ROW><ROW><id>8688037</id><snippet>variable</snippet></ROW><ROW><id>8688037</id><snippet>&gt;&gt;&gt; class Sample:
...     variable=[2]
... 
&gt;&gt;&gt; object1 = Sample()
&gt;&gt;&gt; object2 = Sample()
&gt;&gt;&gt; print object1.variable[0]; print object2.variable[0]
2
2
&gt;&gt;&gt; object1.variable[0]=1
&gt;&gt;&gt; print object1.variable[0]; print object2.variable[0]
1
1
</snippet></ROW><ROW><id>8688037</id><snippet>variable</snippet></ROW><ROW><id>8688037</id><snippet>variable[0]</snippet></ROW><ROW><id>8688355</id><snippet>run -&gt; run configurations</snippet></ROW><ROW><id>8688355</id><snippet>Python Run</snippet></ROW><ROW><id>8688720</id><snippet>builtins:
- remote_api: on
</snippet></ROW><ROW><id>8688720</id><snippet>appcfg.py download_data --application=~myapp --url=http://myapp.appspot.com/_ah/remote_api --filename=first-test-backup
</snippet></ROW><ROW><id>8688720</id><snippet>_ah</snippet></ROW><ROW><id>8688720</id><snippet>http://myapp.appspot.com/_ah/remote_api</snippet></ROW><ROW><id>8688756</id><snippet>from django.contrib.admin.util import (get_model_from_relation,
    reverse_field_path, get_limit_choices_to_from_path)
</snippet></ROW><ROW><id>8688756</id><snippet>\</snippet></ROW><ROW><id>8688756</id><snippet>()</snippet></ROW><ROW><id>8688756</id><snippet>def has_output(self):
    extra = (isinstance(self.field, models.related.RelatedObject) and 
             self.field.field.null or hasattr(self.field, 'rel') and self.field.null)
    extra = 1 if extra else 0
    return len(self.lookup_choices) + extra &gt; 1
</snippet></ROW><ROW><id>8688756</id><snippet>if-else</snippet></ROW><ROW><id>8688756</id><snippet>def has_output(self):
    if isinstance(self.field, models.related.RelatedObject) \
       and self.field.field.null or hasattr(self.field, 'rel') \
       and self.field.null:
        return len(self.lookup_choices) &gt; 0
    else:
        return len(self.lookup_choices) &gt; 1
</snippet></ROW><ROW><id>8688756</id><snippet>extra</snippet></ROW><ROW><id>8688756</id><snippet>def choices(self, cl):
    from django.contrib.admin.views.main import EMPTY_CHANGELIST_VALUE
    yield self._some_default_choice()
    for pk_val, val in self.lookup_choices:
        yield self._choice_from_lookup_choices(pk_val, val)
    if isinstance(self.field, models.related.RelatedObject) \
       and self.field.field.null or hasattr(self.field, 'rel') \
       and self.field.null:
        yield self._some_conditional_choice()
</snippet></ROW><ROW><id>8688964</id><snippet>zip</snippet></ROW><ROW><id>8688964</id><snippet>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; z = zipfile.ZipFile("yourDocInDocx.docx")
&gt;&gt;&gt; "someText" in z.read("word/document.xml")
True
&gt;&gt;&gt; "random other string" in z.read("word/document.xml")
False
&gt;&gt;&gt; z.close()
</snippet></ROW><ROW><id>8688964</id><snippet># Import the module
from docx import *

# Open the .docx file
document = opendocx('yourDocInDocx.docx')

# Search returns true if found    
search(document,'your search string')
</snippet></ROW><ROW><id>8689080</id><snippet>col name="POW"</snippet></ROW><ROW><id>8689080</id><snippet>//row[col[@name = 'POW']
                    [not(*)]
                       [not(normalize-space())]
      ]
</snippet></ROW><ROW><id>8689080</id><snippet>row</snippet></ROW><ROW><id>8689080</id><snippet>col</snippet></ROW><ROW><id>8689080</id><snippet>name</snippet></ROW><ROW><id>8689080</id><snippet>"POW"</snippet></ROW><ROW><id>8689080</id><snippet>//row[col[@name = 'POW']
                    [not(node())]
      ]
</snippet></ROW><ROW><id>8689114</id><snippet>import numpy as np
a = xrange(10)
b = np.array([3,2,1,9])

c = np.setdiff1d(a,b)
</snippet></ROW><ROW><id>8689114</id><snippet>In [7]: c
Out[7]: array([0, 4, 5, 6, 7, 8])
</snippet></ROW><ROW><id>8689190</id><snippet>functools</snippet></ROW><ROW><id>8689277</id><snippet>_</snippet></ROW><ROW><id>8689826</id><snippet>&gt;&gt;&gt; s = "some\x00string. with\x15 funny characters"
&gt;&gt;&gt; import string
&gt;&gt;&gt; filter(lambda x: x in string.printable, s)
'somestring. with funny characters'
</snippet></ROW><ROW><id>8689826</id><snippet>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c
</snippet></ROW><ROW><id>8689983</id><snippet>Tkinter.Toplevel(master, class_='ClassName')</snippet></ROW><ROW><id>8690010</id><snippet>row.key</snippet></ROW><ROW><id>8690010</id><snippet>"key"</snippet></ROW><ROW><id>8690010</id><snippet>key</snippet></ROW><ROW><id>8690010</id><snippet>setattr</snippet></ROW><ROW><id>8690010</id><snippet>setattr(row, key, value)
</snippet></ROW><ROW><id>8690043</id><snippet>import sys
import PyQt4.QtGui as QtGui

class Form(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Form, self).__init__(parent)

        button = QtGui.QPushButton('Button')
        button.clicked.connect(self.my_method)

        self.radiobutton1 = QtGui.QRadioButton('1')
        self.radiobutton2 = QtGui.QRadioButton('2')

        layout = QtGui.QHBoxLayout()
        layout.addWidget(button)
        layout.addWidget(self.radiobutton1)
        layout.addWidget(self.radiobutton2)
        self.setLayout(layout)

        self.group = QtGui.QButtonGroup()
        self.group.addButton(self.radiobutton1)
        self.group.addButton(self.radiobutton2)       

    def my_method(self):
        self.group.setExclusive(False)        
        self.radiobutton1.setChecked(False)
        self.radiobutton2.setChecked(False)
        self.group.setExclusive(True)

app = QtGui.QApplication(sys.argv)
form = Form()
form.show()
app.exec_()
</snippet></ROW><ROW><id>8690043</id><snippet>self.group.setExclusive(False)</snippet></ROW><ROW><id>8690043</id><snippet>self.group.setExclusive(True)</snippet></ROW><ROW><id>8690043</id><snippet>my_method</snippet></ROW><ROW><id>8690043</id><snippet>self.group.setExclusive(False)</snippet></ROW><ROW><id>8690043</id><snippet>self.group.setExclusive(True)</snippet></ROW><ROW><id>8690043</id><snippet>parent</snippet></ROW><ROW><id>8690043</id><snippet>None</snippet></ROW><ROW><id>8690043</id><snippet>super(Form, self).__init__(parent = None)
</snippet></ROW><ROW><id>8690043</id><snippet>parent</snippet></ROW><ROW><id>8690043</id><snippet>Form</snippet></ROW><ROW><id>8690043</id><snippet>parent</snippet></ROW><ROW><id>8690043</id><snippet>QDialog.__init__</snippet></ROW><ROW><id>8690087</id><snippet>class Example(db.Model):    
    #other fields
    status = db.StringProperty()
</snippet></ROW><ROW><id>8690087</id><snippet>example = Example()
example.status = "Happy new year"
example.put()
</snippet></ROW><ROW><id>8690348</id><snippet>pygame.mixer.init(44100, -16, 2, 2048)
# Read the docs to know what these numbers are
</snippet></ROW><ROW><id>8690429</id><snippet>wombat.vim</snippet></ROW><ROW><id>8690429</id><snippet>guifg</snippet></ROW><ROW><id>8690429</id><snippet>guibg</snippet></ROW><ROW><id>8690429</id><snippet>ctermfg</snippet></ROW><ROW><id>8690429</id><snippet>ctermbg</snippet></ROW><ROW><id>8690429</id><snippet>~/.vim/colors/wombat256.vim
</snippet></ROW><ROW><id>8690429</id><snippet>term</snippet></ROW><ROW><id>8690429</id><snippet>:set term?
</snippet></ROW><ROW><id>8690429</id><snippet>xterm</snippet></ROW><ROW><id>8690429</id><snippet>xterm-256color</snippet></ROW><ROW><id>8690429</id><snippet>:set term=xterm-256color
</snippet></ROW><ROW><id>8690464</id><snippet>readARP=scanProcess.read()
readFPING = fpingscanPocess.read()
print readARP
192.168.1.1
192.168.1.100
192.168.1.1

print readFPING
192.168.1.1
192.168.2.1
192.168.1.12

print '\n'.join(set(readARP.splitlines()).symmetric_difference(readFPING.splitlines()))
192.168.1.100
192.168.2.1
192.168.1.12
</snippet></ROW><ROW><id>8690505</id><snippet>exec</snippet></ROW><ROW><id>8690505</id><snippet>exec your_code_str</snippet></ROW><ROW><id>8690505</id><snippet>exec your_code_str in globals(), locals()</snippet></ROW><ROW><id>8690521</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; alphabet = list(string.ascii_uppercase)
&gt;&gt;&gt; for i in range(2, len(alphabet), 2):
...     alphabet[i], alphabet[i-1] = alphabet[i-1], alphabet[i]
... 
&gt;&gt;&gt; alphabet
['A', 'C', 'B', 'E', 'D', 'G', 'F', 'I', 'H', 'K', 'J', 'M', 'L', 'O', 'N', 'Q', 'P', 'S', 'R', 'U', 'T', 'W', 'V', 'Y', 'X', 'Z']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8690882</id><snippet>C = B . inv(A)</snippet></ROW><ROW><id>8690882</id><snippet>AC = B</snippet></ROW><ROW><id>8690882</id><snippet>B</snippet></ROW><ROW><id>8690882</id><snippet>C</snippet></ROW><ROW><id>8690882</id><snippet>A C1 = B1</snippet></ROW><ROW><id>8690882</id><snippet>A C2 = B2</snippet></ROW><ROW><id>8691331</id><snippet>re.sub(r'(?&lt;!\\)\\', '', filename)
</snippet></ROW><ROW><id>8691331</id><snippet>echo</snippet></ROW><ROW><id>8691331</id><snippet>bash-3.2$ echo foo\\bar
foo\bar
bash-3.2$ echo foo\ bar
foo bar
bash-3.2$ echo foo\=bar
foo=bar
</snippet></ROW><ROW><id>8691331</id><snippet>import re

def unescape(filename):
    return re.sub(r'(?&lt;!\\)\\', '', filename)

print unescape(r'foo\ bar')
print unescape(r'foo\=bar')
print unescape(r'foo\\bar')
</snippet></ROW><ROW><id>8691331</id><snippet>foo bar
foo=bar
foo\bar
</snippet></ROW><ROW><id>8691360</id><snippet>target.write(line1 \n, line2 \n, line3 \n)
</snippet></ROW><ROW><id>8691360</id><snippet>target.write('line1 \n, line2 \n, line3 \n')
</snippet></ROW><ROW><id>8691360</id><snippet>target.write(line1 '\n' line2 '\n' line3 '\n')
</snippet></ROW><ROW><id>8691360</id><snippet>2 2</snippet></ROW><ROW><id>8691360</id><snippet>2 + 2</snippet></ROW><ROW><id>8691360</id><snippet>2 * 2</snippet></ROW><ROW><id>8691360</id><snippet>2 2</snippet></ROW><ROW><id>8691360</id><snippet>target.write(line + '\n' + line2 + '\n' + line3 + '\n')
</snippet></ROW><ROW><id>8691360</id><snippet>target.write(%r \n, %r \n, %r \n) % (line1, line2, line3)
</snippet></ROW><ROW><id>8691360</id><snippet>\n</snippet></ROW><ROW><id>8691360</id><snippet>target.write('%r \n', '%r \n', '%r \n') % (line1, line2, line3)
</snippet></ROW><ROW><id>8691360</id><snippet>target.write('%r \n%r \n%r \n') % (line1, line2, line3)
</snippet></ROW><ROW><id>8691360</id><snippet>None % (line1, line2, line3)
</snippet></ROW><ROW><id>8691360</id><snippet>% ()</snippet></ROW><ROW><id>8691360</id><snippet>.write()</snippet></ROW><ROW><id>8691360</id><snippet>target.write('%r\n%r\n%r\n' % (line1, line2, line3))
</snippet></ROW><ROW><id>8691369</id><snippet>std::map</snippet></ROW><ROW><id>8691369</id><snippet>dict</snippet></ROW><ROW><id>8691369</id><snippet>x = dict()
x['a'] = 5
x[6] = MyObject()
</snippet></ROW><ROW><id>8691369</id><snippet>std::map</snippet></ROW><ROW><id>8691369</id><snippet>class MyClass:
    pass

x[1] = MyClass
</snippet></ROW><ROW><id>8691369</id><snippet>dict</snippet></ROW><ROW><id>8691369</id><snippet>x[1] = MyClass() # this creates an instance
</snippet></ROW><ROW><id>8691795</id><snippet>from Tkinter import *

root = Tk() 
root.title("app")
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
root.geometry("550x250+%d+%d" % (screen_width/2-275, screen_height/2-125))
root.configure(background='gold')
root.lift ()

mainloop()
</snippet></ROW><ROW><id>8691808</id><snippet>sin</snippet></ROW><ROW><id>8691808</id><snippet>sin(x)
    Return the sine of x (measured in radians).
</snippet></ROW><ROW><id>8691808</id><snippet>math.radians</snippet></ROW><ROW><id>8691808</id><snippet>&gt;&gt;&gt; math.sin(math.radians(35)) * 15 + 9
17.60364654526569
</snippet></ROW><ROW><id>8692493</id><snippet>isinstance(obj, Klass)</snippet></ROW><ROW><id>8692493</id><snippet>&gt;&gt;&gt; class A(object):
...    pass
... 
&gt;&gt;&gt; class B(A):
...    pass
... 
&gt;&gt;&gt; obj = B()
&gt;&gt;&gt; 
&gt;&gt;&gt; isinstance(obj, A)
True
</snippet></ROW><ROW><id>8692493</id><snippet>try:
    isbasemodel = False
    if issubclass(x, BaseModel):
       isbasemodel = True
except TypeError:
    # Accept that we test non-classes:
    pass
</snippet></ROW><ROW><id>8692493</id><snippet>def update_model(model):
    if not issubclass(model, BaseModel):
        raise TypeError('Must be a model')
</snippet></ROW><ROW><id>8692573</id><snippet>ffprobe</snippet></ROW><ROW><id>8692573</id><snippet>stdout</snippet></ROW><ROW><id>8692573</id><snippet>ffprobe</snippet></ROW><ROW><id>8692573</id><snippet>stdout</snippet></ROW><ROW><id>8692573</id><snippet>p = sub.Popen(['ffprobe', fname], stderr=sub.PIPE)
stdin, stderr = p.communicate()
</snippet></ROW><ROW><id>8692573</id><snippet>p = sub.Popen(['ffprobe', fname], stdout=sub.PIPE, stderr=sub.PIPE)
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>8692573</id><snippet>stdout</snippet></ROW><ROW><id>8692573</id><snippet>p.communicate</snippet></ROW><ROW><id>8692573</id><snippet>stdout</snippet></ROW><ROW><id>8692573</id><snippet>stdin</snippet></ROW><ROW><id>8693052</id><snippet>print( [e.encode('utf-8', 'ignore') for e in stuff] )
</snippet></ROW><ROW><id>8693057</id><snippet>&gt;&gt;&gt; path = '/book/html/wa/foo/bar/'
&gt;&gt;&gt; path[path.find('/wa'):]
'/wa/foo/bar/'
</snippet></ROW><ROW><id>8693200</id><snippet>class StatModel(object):
    '''parent class - starting point to add abstraction'''    
    def load(self, fn):
        self.model.load(fn)
    def save(self, fn):
        self.model.save(fn)
</snippet></ROW><ROW><id>8693200</id><snippet>class SVM(StatModel):
    '''wrapper for OpenCV SimpleVectorMachine algorithm'''
    def __init__(self):
        self.model = cv2.SVM()

    def train(self, samples, responses):
        #setting algorithm parameters
        params = dict( kernel_type = cv2.SVM_LINEAR, 
                       svm_type = cv2.SVM_C_SVC,
                       C = 1 )
        self.model.train(samples, responses, params = params)

    def predict(self, samples):
        return np.float32( [self.model.predict(s) for s in samples])
</snippet></ROW><ROW><id>8693200</id><snippet>import numpy as np
import cv2

samples = np.array(np.random.random((4,2)), dtype = np.float32)
y_train = np.array([1.,0.,0.,1.], dtype = np.float32)

clf = SVM()
clf.train(samples, y_train)
y_val = clf.predict(samples)
</snippet></ROW><ROW><id>8693540</id><snippet>from itertools import cycle

n = 1
lst = [n]
for i in cycle(lst):
   print i
   n += 1
   if n &lt; 100:
     lst.append(n)
</snippet></ROW><ROW><id>8693637</id><snippet>retrlines</snippet></ROW><ROW><id>8693637</id><snippet>lines = []
def append_line(line):
    lines.append(line)
ftp.retrlines('LIST', append_line)
</snippet></ROW><ROW><id>8693736</id><snippet>for</snippet></ROW><ROW><id>8693736</id><snippet>items.split(',')</snippet></ROW><ROW><id>8693736</id><snippet>items = argv[1]
for item in items.split(','):
    print int(item)
</snippet></ROW><ROW><id>8693747</id><snippet>text = 'a, b, c'
text = text.replace(',', '\n')
print text
</snippet></ROW><ROW><id>8693747</id><snippet>text = ['a', 'b', 'c']
text = '\n'.join(text)
print text
</snippet></ROW><ROW><id>8694035</id><snippet>db = Table()
db.mysqlconnect()
</snippet></ROW><ROW><id>8694035</id><snippet>mysqlconnect</snippet></ROW><ROW><id>8694035</id><snippet>Table</snippet></ROW><ROW><id>8694035</id><snippet>Table</snippet></ROW><ROW><id>8694035</id><snippet>db = Table()</snippet></ROW><ROW><id>8694035</id><snippet>db</snippet></ROW><ROW><id>8694035</id><snippet>Table()</snippet></ROW><ROW><id>8694200</id><snippet>ndarray</snippet></ROW><ROW><id>8694200</id><snippet>argmax</snippet></ROW><ROW><id>8694200</id><snippet>import numpy as np
import operator

names = [str(x) for x in xrange(10000)]
values = [float(x) for x in xrange(10000)]
tuples = zip(names, values)
dic = dict(tuples)
npvalues = np.fromiter(values, np.float)

def fa():
    return names[npvalues.argmax()]

def fb():
    return max(tuples, key=operator.itemgetter(1))[0]

def fc():
    return max(dic, key=dic.get)

def fd():
    v = np.fromiter((x[1] for x in tuples), np.float)
    return tuples[v.argmax()][0]
</snippet></ROW><ROW><id>8694670</id><snippet>def get_hours():
    result = dbconn.query("select * from hours where date &lt; (select max(date) from last_export) order by date DESC")   

    if result:
        return result
    else:
        return False
</snippet></ROW><ROW><id>8694823</id><snippet>target = randrange(sum(d.values()))</snippet></ROW><ROW><id>8694823</id><snippet>d.values()</snippet></ROW><ROW><id>8694823</id><snippet>d.values()</snippet></ROW><ROW><id>8694823</id><snippet>sum(d.values())</snippet></ROW><ROW><id>8694823</id><snippet>randrange()</snippet></ROW><ROW><id>8694823</id><snippet>sum(d.values())</snippet></ROW><ROW><id>8694823</id><snippet>d.items()</snippet></ROW><ROW><id>8694823</id><snippet>make_markov</snippet></ROW><ROW><id>8695057</id><snippet>bool(config.StartValues['Checkbox2'])</snippet></ROW><ROW><id>8695057</id><snippet>bool</snippet></ROW><ROW><id>8695057</id><snippet>True</snippet></ROW><ROW><id>8695057</id><snippet>0</snippet></ROW><ROW><id>8695057</id><snippet>0.0</snippet></ROW><ROW><id>8695057</id><snippet>"True"</snippet></ROW><ROW><id>8695057</id><snippet>"False"</snippet></ROW><ROW><id>8695057</id><snippet>True</snippet></ROW><ROW><id>8695057</id><snippet>def evalBooleans(value):
    """Assumes we're getting either booleans or strings!"""
    return (value if isinstance(value, bool)
                else value.lower() == "true")

cb2 = evalBooleans(config.StartValues['Checkbox2'])
self.Checkbox2.SetValue(cb2)
self.Checkbox2TextCtrl.Enable(cb2)
self.Checkbox2StaticText.Enable(cb2)
</snippet></ROW><ROW><id>8695067</id><snippet>def remove_accents(data):
    return ''.join(x for x in unicodedata.normalize('NFKD', data) if x in string.ascii_letters).lower()
</snippet></ROW><ROW><id>8695312</id><snippet>fileMod = [item['fileMod'] for item in fileList if item['fileName'] == filename]
</snippet></ROW><ROW><id>8695315</id><snippet>clean_title</snippet></ROW><ROW><id>8695315</id><snippet>ordering</snippet></ROW><ROW><id>8695394</id><snippet>(r'^/edit/(?P&lt;page_name&gt;\w+)$', 'gallery.views.edit_page'),
(r'^/save/(?P&lt;page_name&gt;\w+)$', 'gallery.views.save_page'),
(r'^/(?P&lt;page_name&gt;\w+)$', 'gallery.views.view_page')
</snippet></ROW><ROW><id>8695394</id><snippet>urls.py</snippet></ROW><ROW><id>8695438</id><snippet>import threading  

class MiThread(threading.Thread):  
      def __init__(self, num):  
          threading.Thread.__init__(self)  
          self.num = num  

      def run(self):  
          while true:
             print "Soy el hilo", self.num  

print "Soy el hilo principal"  

for i in range(0, 10):  
    t = MiThread(i)  
    t.start()  
</snippet></ROW><ROW><id>8695438</id><snippet>      def run(self):  
          f = open('/tmp/workfile{0}.txt'.format(self.num), 'r+')
          while true:
             f.write("Soy el hilo {0}\n".format( self.num ))
</snippet></ROW><ROW><id>8695438</id><snippet>class MiThread(threading.Thread):  
      def __init__(self, num):  
          threading.Thread.__init__(self)  
          self.num = num  
          self.status = ''

      def run(self):  
          while true:
             self.status = "Soy el hilo {0}".format( self.num )


t1 = MiThread(i)  
t1.start()  
t2 = MiThread(i)  #&lt;-- at this point you get back interpreter
t2.start()  
print t1.status
</snippet></ROW><ROW><id>8695606</id><snippet>itertools.product</snippet></ROW><ROW><id>8695606</id><snippet>tuple</snippet></ROW><ROW><id>8695606</id><snippet>itertools</snippet></ROW><ROW><id>8695606</id><snippet>Modules/itertoolsmodule.c</snippet></ROW><ROW><id>8695606</id><snippet>product_new</snippet></ROW><ROW><id>8695606</id><snippet>product</snippet></ROW><ROW><id>8695606</id><snippet>for (i=0; i &lt; nargs ; ++i) {
    PyObject *item = PyTuple_GET_ITEM(args, i);
    PyObject *pool = PySequence_Tuple(item);
    if (pool == NULL)
        goto error;
    PyTuple_SET_ITEM(pools, i, pool);
    indices[i] = 0;
}
</snippet></ROW><ROW><id>8695606</id><snippet>args</snippet></ROW><ROW><id>8695606</id><snippet>product</snippet></ROW><ROW><id>8695606</id><snippet>i</snippet></ROW><ROW><id>8695606</id><snippet>xrange(0, 10**9)</snippet></ROW><ROW><id>8695606</id><snippet>MemoryError</snippet></ROW><ROW><id>8695606</id><snippet>itertools.product</snippet></ROW><ROW><id>8695612</id><snippet>key</snippet></ROW><ROW><id>8695612</id><snippet>sorted</snippet></ROW><ROW><id>8695612</id><snippet>&gt;&gt;&gt; d = {'ONE' : (4, 6, 9), 'TWO' : (3, 8, 10), 'FOUR': (2, 5, 8)}
&gt;&gt;&gt; sorted(d.iteritems(), key=lambda i: i[1][2])
[('FOUR', (2, 5, 8)), ('ONE', (4, 6, 9)), ('TWO', (3, 8, 10))]
</snippet></ROW><ROW><id>8695612</id><snippet>&gt;&gt;&gt; d = {'ONE' : (4, 6, 9), 'TWO' : (3, 8, 10), 'FOUR': (2, 5, 8), 'THREE': 0}
&gt;&gt;&gt; sorted(d.iteritems(),
...        key=lambda i: i[1][2] if isinstance(i[1], tuple) else i[1])
[('THREE', 0), ('FOUR', (2, 5, 8)), ('ONE', (4, 6, 9)), ('TWO', (3, 8, 10))]
</snippet></ROW><ROW><id>8696288</id><snippet>mongoexport</snippet></ROW><ROW><id>8696288</id><snippet>sergio@soviet-russia$ mongoexport -d test -c geo \
sergio@soviet-russia$    -q '{"_id":  ObjectId("4efa5f7d8840e680c850cd94") }'
connected to: 127.0.0.1
{ "_id" : { "$oid" : "4efa5f7d8840e680c850cd94" }, 
  "longg" : [ { "start" : 322815488, "end" : 322817535 }, 
              { "start" : 822815488, "end" : 822817535 } ], 
  "m" : "Cracow", 
  "postal" : 55050, 
  "lat" : [ "XX.89XXX", "XX.74XXX" ] }
exported 1 records
</snippet></ROW><ROW><id>8696303</id><snippet>app = Flask(__name__)
database = load_database()

@app.route('/get_genomes')
def get_genomes():
    return database.all_genomes()

app.run(debug=True)
</snippet></ROW><ROW><id>8696303</id><snippet>app.run</snippet></ROW><ROW><id>8696303</id><snippet>os.fork()</snippet></ROW><ROW><id>8696339</id><snippet>scipy</snippet></ROW><ROW><id>8696339</id><snippet>sparse</snippet></ROW><ROW><id>8696339</id><snippet>import scipy.sparse</snippet></ROW><ROW><id>8696339</id><snippet>import scipy</snippet></ROW><ROW><id>8696339</id><snippet>scipy/__init__.py</snippet></ROW><ROW><id>8696339</id><snippet>import scipy.sparse</snippet></ROW><ROW><id>8696339</id><snippet>sparse</snippet></ROW><ROW><id>8696339</id><snippet>scipy</snippet></ROW><ROW><id>8696647</id><snippet>exec</snippet></ROW><ROW><id>8696647</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>8696647</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>8696647</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>8696647</id><snippet>exec</snippet></ROW><ROW><id>8696647</id><snippet>exec(some_code, globals())
</snippet></ROW><ROW><id>8696647</id><snippet>global my_var</snippet></ROW><ROW><id>8696647</id><snippet>exec</snippet></ROW><ROW><id>8696647</id><snippet>eval</snippet></ROW><ROW><id>8696647</id><snippet>algorithm</snippet></ROW><ROW><id>8696647</id><snippet>algorithm</snippet></ROW><ROW><id>8696647</id><snippet>None</snippet></ROW><ROW><id>8696783</id><snippet>&gt;&gt;&gt; format(0.01, '.30f')
'0.010000000000000000208166817117'
</snippet></ROW><ROW><id>8696783</id><snippet>0.01</snippet></ROW><ROW><id>8696783</id><snippet>0.01</snippet></ROW><ROW><id>8696783</id><snippet>&gt;&gt;&gt; sum([0.01]*100)
1.0000000000000007
</snippet></ROW><ROW><id>8696783</id><snippet>round()</snippet></ROW><ROW><id>8696783</id><snippet>&gt;&gt;&gt; round(1.0000000000000007, 13)
1.0
</snippet></ROW><ROW><id>8697167</id><snippet>searches = ('aa90_273024', 'another_search', 'yet_another_search')
my_result = [item[1:] for item in data if item[0] in searches]
</snippet></ROW><ROW><id>8697197</id><snippet>startValue = -1.0
intervalLength = 2.0
numberOfSteps = 14
increasePerStep = intervalLength / numberOfSteps

print startValue

x = startValue
for i in range (numberOfSteps):
    x += increasePerStep
    print x


-1.0
-0.857142857143
-0.714285714286
-0.571428571429
-0.428571428571
-0.285714285714
-0.142857142857
-2.22044604925e-16
0.142857142857
0.285714285714
0.428571428571
0.571428571429
0.714285714286
0.857142857143
1.0
</snippet></ROW><ROW><id>8698021</id><snippet>isinstance()</snippet></ROW><ROW><id>8698312</id><snippet>&gt;&gt;&gt; consume(some_func(x) for x in some_list if x&gt;5)
</snippet></ROW><ROW><id>8698697</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; for i in range(0, 360, 15):
...     print i, sympy.sin(sympy.Rational(i, 180) * sympy.pi)
...

0 0
15 sin(pi/12)
30 1/2
45 2**(1/2)/2
60 3**(1/2)/2
75 sin(5*pi/12)
90 1
105 sin(5*pi/12)
120 3**(1/2)/2
135 2**(1/2)/2
150 1/2
165 sin(pi/12)
180 0
195 -sin(pi/12)
210 -1/2
225 -2**(1/2)/2
240 -3**(1/2)/2
255 -sin(5*pi/12)
270 -1
285 -sin(5*pi/12)
300 -3**(1/2)/2
315 -2**(1/2)/2
330 -1/2
345 -sin(pi/12)
</snippet></ROW><ROW><id>8699141</id><snippet>try ... except</snippet></ROW><ROW><id>8699141</id><snippet>class Something(object):
    def __enter__(self):
        print "Entering"

    def __exit__(self, t, v, tr):
        print "cleanup - always runs"
        raise Exception("Exception occurred during __exit__")

try:
    with Something() as something:
        raise Exception("Exception occurred!")
except Exception, e:
    print e
    import traceback
    traceback.print_exc(e)

print "Exited normally!"
</snippet></ROW><ROW><id>8699141</id><snippet>Entering
cleanup - always runs
Exception occurred during __exit__
Traceback (most recent call last):
  File "s3.py", line 11, in &lt;module&gt;
    raise Exception("Exception occurred!")
  File "s3.py", line 7, in __exit__
    raise Exception("Exception occurred during __exit__")
Exception: Exception occurred during __exit__
Exited normally!
</snippet></ROW><ROW><id>8699141</id><snippet>except</snippet></ROW><ROW><id>8699141</id><snippet>__exit__()</snippet></ROW><ROW><id>8699141</id><snippet>__exit__()</snippet></ROW><ROW><id>8699141</id><snippet>with</snippet></ROW><ROW><id>8699141</id><snippet>__exit__()</snippet></ROW><ROW><id>8699141</id><snippet>__exit__()</snippet></ROW><ROW><id>8699141</id><snippet>class Something(object):
    def __enter__(self):
        print "Entering"

    def __exit__(self, t, v, tr):
        print "cleanup - always runs"
        try:
            raise Exception("Exception occurred during __exit__")
        except Exception, e:
            if (t, v, tr) != (None, None, None):
                # __exit__ called with an existing exception
                return False
            else:
                # __exit__ called with NO existing exception
                raise

try:
    with Something() as something:
        raise Exception("Exception occurred!")
        pass
except Exception, e:
    print e
    traceback.print_exc(e)
    raise

print "Exited normally!"
</snippet></ROW><ROW><id>8699141</id><snippet>Entering
cleanup - always runs
Exception occurred!
Traceback (most recent call last):
  File "s2.py", line 22, in &lt;module&gt;
    raise Exception("Exception occurred!")
Exception: Exception occurred!
Traceback (most recent call last):
  File "s2.py", line 22, in &lt;module&gt;
   raise Exception("Exception occurred!")
Exception: Exception occurred!
</snippet></ROW><ROW><id>8699870</id><snippet>files = {
    'file1.txt': {'fileMod': '0000048723'},
    'file2.txt': {'fileMod': '0000048723'}
}
</snippet></ROW><ROW><id>8699870</id><snippet>mod = None
if 'file1.txt' in files:
    mod = files['file1.txt']['fileMod']
</snippet></ROW><ROW><id>8700325</id><snippet>self.onActionCombobox1(None)
</snippet></ROW><ROW><id>8700325</id><snippet>__init__</snippet></ROW><ROW><id>8700716</id><snippet>collectstatic</snippet></ROW><ROW><id>8700756</id><snippet>python -c 'import sys;print "".join(sorted(set.intersection(*[set(open(a).readlines()) for a in sys.argv[1:]])))' File1 File2 File3
</snippet></ROW><ROW><id>8700756</id><snippet>Paul</snippet></ROW><ROW><id>8700756</id><snippet>File1</snippet></ROW><ROW><id>8700756</id><snippet>File2</snippet></ROW><ROW><id>8700756</id><snippet>File3</snippet></ROW><ROW><id>8700935</id><snippet>def UploadResourceSample(filename, filepath, fullpath):
  """Upload a document, and convert to Google Docs."""
  client = CreateClient()
  doc = gdata.docs.data.Resource(type='document', title=filename)

  path = fullpath
  print 'Selected file at: %s' % path

  # Create a MediaSource, pointing to the file
  media = gdata.data.MediaSource()
  media.SetFileHandle(path, 'application/pdf')

  # Pass the MediaSource when creating the new Resource
  create_uri = gdata.docs.client.RESOURCE_UPLOAD_URI + '?ocr=true&amp;ocr-language=de'
  doc = client.CreateResource(doc, create_uri=create_uri, media=media)
  print 'Created, and uploaded:', doc.title.text, doc.resource_id.text
</snippet></ROW><ROW><id>8700983</id><snippet>formfield_for_manytomany</snippet></ROW><ROW><id>8700983</id><snippet>ModelAdmin</snippet></ROW><ROW><id>8700983</id><snippet>BaseModelAdmin</snippet></ROW><ROW><id>8700983</id><snippet>models.py</snippet></ROW><ROW><id>8700983</id><snippet>from django.contrib.admin.options import ModelAdmin
from django.contrib.admin import widgets
class CustomModelAdmin:
    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        """
        Get a form Field for a ManyToManyField.
        """
        # If it uses an intermediary model that isn't auto created, don't show
        # a field in admin.
        if not db_field.rel.through._meta.auto_created:
            return None
        db = kwargs.get('using')

        if db_field.name in self.raw_id_fields:
            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.rel, using=db)
            kwargs['help_text'] = ''
        else:
            kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, False) # change second argument to True for filter_vertical

        return db_field.formfield(**kwargs)

ModelAdmin.__bases__ = (CustomModelAdmin,) + ModelAdmin.__bases__
</snippet></ROW><ROW><id>8701180</id><snippet>dictio = {your dictionary here}

def translate(seq):
    x = 0
    aaseq = []
    while True:
        try:
            aaseq.append(dicti[seq[x:x+3]])
            x += 3
        except (IndexError, KeyError):
            break
    return aaseq

seq = "TTTCAATACTAGCATGACCAAAGTGGGAACCCCCTTACGTAGCATGACCCATATATATATATATA"

for frame in range(3):
    print('+%i' %(frame+1), ''.join(item.split('|')[1] for item in translate(seq[frame:])))
</snippet></ROW><ROW><id>8701180</id><snippet>dicti</snippet></ROW><ROW><id>8701180</id><snippet>dict</snippet></ROW><ROW><id>8701180</id><snippet>translate</snippet></ROW><ROW><id>8701180</id><snippet>aaseq = ["L|Leu","L|Leu","P|Pro", ....]
</snippet></ROW><ROW><id>8701180</id><snippet>translate</snippet></ROW><ROW><id>8701180</id><snippet>translate</snippet></ROW><ROW><id>8701180</id><snippet>''.join(item.split('|')[1] for item in translate(seq[frame:]))
</snippet></ROW><ROW><id>8701180</id><snippet>   ''.join(item.split('|')[1]
</snippet></ROW><ROW><id>8701530</id><snippet>def combine(a, b, a_weight, b_weight):
    if isinstance(a, tuple):
        return tuple(combine(x,y,a_weight,b_weight) for x,y in zip(a,b))
    elif isinstance(a, dict):
        return dict((k, combine(a[k],b[k],a_weight,b_weight)) for k in a)
    #add other data structures here if you need to (e.g. list, set, etc.)
    else: #assume a number
        return ((a * a_weight) + (b * b_weight)) / (a_weight + b_weight)
</snippet></ROW><ROW><id>8701530</id><snippet>a</snippet></ROW><ROW><id>8701530</id><snippet>b</snippet></ROW><ROW><id>8701550</id><snippet># Right here is where I am stuck
for i in names:
    box.insert(END, i)
</snippet></ROW><ROW><id>8701550</id><snippet>app.geometry("500x700")
</snippet></ROW><ROW><id>8701644</id><snippet>.</snippet></ROW><ROW><id>8701644</id><snippet>self.list</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self.list.append(1)
</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701644</id><snippet>self.list = []
</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701644</id><snippet>list</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701644</id><snippet>class testClass():
    list = ['foo']
    def __init__(self):
        self.list = []
        self.list.append('thing')

x = testClass()
print x.list
print testClass.list
del x.list
print x.list
</snippet></ROW><ROW><id>8701644</id><snippet>['thing']
['foo']
['foo']
</snippet></ROW><ROW><id>8701644</id><snippet>self</snippet></ROW><ROW><id>8701969</id><snippet>def std_output(stdout,outfile=''):
    out = 0
    f = codecs.open(outfile,'w','UTF-8')
    for line in iter(stdout.readline, ''):
        f.write('%s\n'%(line.rstrip().decode('UTF-8')))
        out += 1
        if i == out: break
    stdout.close()
    f.close()

outfile = '/path/myout'
infile = '/path/mydata'

subproc = subprocess.Popen(args,**kw)
t = threading.Thread(target=std_output,args=[subproc.stdout,outfile])
t.daemon = True
t.start()

i = 0
f = codecs.open(infile,'r','UTF-8')
for line in f:
    subproc.stdin.write('%s\n'%(line.strip().encode('UTF-8')))
    i += 1
subproc.stdin.write('%s\n'%(' '*4096)) ### push dummy data ###
f.close()
t.join()
subproc.terminate()
</snippet></ROW><ROW><id>8702083</id><snippet>stuff</snippet></ROW><ROW><id>8702083</id><snippet>login</snippet></ROW><ROW><id>8702083</id><snippet>login</snippet></ROW><ROW><id>8702083</id><snippet>Download</snippet></ROW><ROW><id>8702083</id><snippet>stuff</snippet></ROW><ROW><id>8702083</id><snippet>.....

app.geometry("300x300")

stuff = None # &lt;&lt;&lt;&lt;----

lines = []

.....

#This is where I am caught-------&gt; 
def Download():
    global stuff # &lt;&lt;&lt;&lt;----

    filename = stuff

    ......

    ftp.close()

def login():
    global stuff # &lt;&lt;&lt;&lt;----

    ......

    stuff = Listbox(app, height = "700", width = "500")
    ftp.retrlines('NLST', append_line)
    for i in lines:
        stuff.insert(END, i)
    stuff.pack(padx = "10", pady = "10")

    stuff.config(yscrollcommand = scrollBar.set)
    scrollBar.config(command = stuff.yview)


......
</snippet></ROW><ROW><id>8702293</id><snippet>cgitb.py</snippet></ROW><ROW><id>8702293</id><snippet>import sys
import traceback
import cgitb

def handleException(excType, excValue, trace):
    print 'error'
    cgitb.Hook(format="text")(excType, excValue, trace)

sys.excepthook = handleException

h = 1
k = 0

print h/k
</snippet></ROW><ROW><id>8702645</id><snippet>dirname</snippet></ROW><ROW><id>8702645</id><snippet>__file__</snippet></ROW><ROW><id>8702645</id><snippet>from os.path import dirname, join
config = ConfigParser.ConfigParser()
config_fn = join(dirname(__file__), '..', 'conf', 'settings.conf')
config.read(config_fn)
</snippet></ROW><ROW><id>8702854</id><snippet>from django.db.models import get_app, get_models

app = get_app('my_application_name')
for model in get_models(app):
    # do something with the model
</snippet></ROW><ROW><id>8702854</id><snippet>model</snippet></ROW><ROW><id>8702854</id><snippet>for model in get_models(app):
    new_object = model() # Create an instance of that model
    model.objects.filter(...) # Query the objects of that model
    model._meta.db_table # Get the name of the model in the database
    model._meta.verbose_name # Get a verbose name of the model
    # ...
</snippet></ROW><ROW><id>8703055</id><snippet>from arcpy import Raster

...

ras = Raster('path_to_raster') 
PythonRad = ras * degrad
</snippet></ROW><ROW><id>8703078</id><snippet>import re
re.sub('&lt;.*?&gt;', '', string)
"i think mabe 124 + but I don't have a big experience it just how I see it in my eyes fun stuff"
</snippet></ROW><ROW><id>8703078</id><snippet>re.sub</snippet></ROW><ROW><id>8703078</id><snippet>'&lt;.*?&gt;'</snippet></ROW><ROW><id>8703078</id><snippet>''</snippet></ROW><ROW><id>8703078</id><snippet>?</snippet></ROW><ROW><id>8703078</id><snippet>re</snippet></ROW><ROW><id>8703078</id><snippet>re module</snippet></ROW><ROW><id>8703138</id><snippet>def decrypt(binary):
    """Function to convert binary into string"""
    return ''.join(( chr(int(p, 2)) for p in grouper(8,binary,'') ))
</snippet></ROW><ROW><id>8703138</id><snippet>def decrypt2(binary):
    """Function to convert binary into string"""
    return ''.join(( DICO_INVERTED[p] for p in grouper(8,binary,'') ))
</snippet></ROW><ROW><id>8703425</id><snippet>&gt;&gt;&gt; f = open('data.txt','w')
&gt;&gt;&gt; pickle.dump(123,f)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be str, not bytes
&gt;&gt;&gt; 
&gt;&gt;&gt; f = open('data.txt','wb')
&gt;&gt;&gt; pickle.dump(123,f)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8703509</id><snippet>streetno = {"1":"Sachine Tendulkar", "2":"Dravid", "3":"Sehwag", "4":"Laxman","5":"Kohli"}
</snippet></ROW><ROW><id>8703509</id><snippet>streetno = dict({"1":"Sachine Tendulkar", "2":"Dravid"}) 
</snippet></ROW><ROW><id>8703509</id><snippet>streetno = {}
streetno["1"] = "Sachine Tendulkar" 
</snippet></ROW><ROW><id>8703608</id><snippet>open('/', 'r')</snippet></ROW><ROW><id>8703608</id><snippet>e.filename</snippet></ROW><ROW><id>8703688</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8703688</id><snippet>/var/www/wsgi/myproject</snippet></ROW><ROW><id>8704025</id><snippet>[random.random() for x in xrange(3)]
</snippet></ROW><ROW><id>8704025</id><snippet>results = (random.random() for x in xrange(3))
for r in results:
   ...
# results is "used up" now.
# We could have used results_list = list(results) to convert the generator
</snippet></ROW><ROW><id>8704025</id><snippet>xrange</snippet></ROW><ROW><id>8704025</id><snippet>range</snippet></ROW><ROW><id>8704025</id><snippet>range</snippet></ROW><ROW><id>8704025</id><snippet>xrange</snippet></ROW><ROW><id>8704187</id><snippet>"http://www.ivona.com/voicetest.php?rtr=1&amp;t2r=%(the_text)s..&amp;v2r=dXNfc2FsbGk.&amp;lang=us" % dict(
    the_text=base64.b64encode("Hello, world!"),
    the_voice=base64.b64encode("us_salli"),
    )
</snippet></ROW><ROW><id>8704187</id><snippet>mplayer "http://www.ivona.com/voicetest.php?rtr=1&amp;t2r=SGVsbG8sIHdvcmxkIQ==..&amp;v2r=dXNfc2FsbGk.&amp;lang=us"
</snippet></ROW><ROW><id>8704345</id><snippet>from timeit import Timer

setstr="""import numpy as np
import itertools
import random

Nlists = 1000
total_lists = 5000
outsz = 100
maxsublistsz = 100


# create random list of lists
list_range_values = random.sample(xrange(total_lists),Nlists)
list_list_values = [random.sample(xrange(outsz),np.random.randint(1,maxsublistsz)) for k in xrange(total_lists)]

list_comp_values = 10*np.random.uniform(size=(total_lists,))

v = np.zeros((outsz,))

def indices(start, end):
    lens = end - start
    np.cumsum(lens, out=lens)
    i = np.ones(lens[-1], dtype=int)
    i[0] = start[0]
    i[lens[:-1]] += start[1:]
    i[lens[:-1]] -= end[:-1]
    np.cumsum(i, out=i)
    return i

def sum_by_group(values, groups):
    order = np.argsort(groups)
    groups = groups[order]
    values = values[order]
    values.cumsum(out=values)
    index = np.ones(len(groups), 'bool')
    index[:-1] = groups[1:] != groups[:-1]
    values = values[index]
    groups = groups[index]
    values[1:] = np.diff(values)
    return values, groups


"""

method1="""
list_list_lens = np.array(map(len, list_list_values))
comp_vals_expanded = np.repeat(list_comp_values, list_list_lens)

list_vals_flat = np.fromiter(itertools.chain.from_iterable(list_list_values),dtype=int)
list_list_starts = np.concatenate(([0], np.cumsum(list_list_lens)[:-1]))

toadd = indices(list_list_starts[list_range_values],(list_list_starts + list_list_lens)[list_range_values])

v[list_vals_flat[toadd]] += comp_vals_expanded[toadd]
"""

method2="""
for k in list_range_values:
    v[list_list_values[k]] += list_comp_values[k]

"""

method3="""
llv = [list_list_values[i] for i in list_range_values]
lcv = [list_comp_values[i] for i in list_range_values]
counts = map(len, llv)
indices = np.concatenate(llv)
values = np.repeat(lcv, counts)

totals, indices_unique = sum_by_group(values, indices)
v[indices_unique] += totals
"""


t1 = Timer(method1,setup=setstr).timeit(100)
print t1

t2 = Timer(method2,setup=setstr).timeit(100)
print t2

t3 = Timer(method3,setup=setstr).timeit(100)
print t3
</snippet></ROW><ROW><id>8704345</id><snippet>Nlists</snippet></ROW><ROW><id>8704534</id><snippet>diff</snippet></ROW><ROW><id>8704534</id><snippet>stderr</snippet></ROW><ROW><id>8704534</id><snippet>stderr</snippet></ROW><ROW><id>8704534</id><snippet>Output from exec('python hello-numpy.py'):
    &lt;?php echo exec('python hello-numpy.py 2&gt;&amp;1'); ?&gt;&lt;br&gt;
</snippet></ROW><ROW><id>8704534</id><snippet>2&gt;&amp;1</snippet></ROW><ROW><id>8704534</id><snippet>stderr</snippet></ROW><ROW><id>8704534</id><snippet>stdout</snippet></ROW><ROW><id>8704534</id><snippet>ImportError: No module named numpy</snippet></ROW><ROW><id>8704534</id><snippet>import sys, os
for path in sys.path:
    print path
print
print 'Root:', os.readlink('/proc/self/root') # Linux only
</snippet></ROW><ROW><id>8704534</id><snippet>numpy</snippet></ROW><ROW><id>8704555</id><snippet>scipy.integrate.complex_ode</snippet></ROW><ROW><id>8704555</id><snippet>scipy.integrate.odeint</snippet></ROW><ROW><id>8704713</id><snippet>Entry</snippet></ROW><ROW><id>8704713</id><snippet>LastName</snippet></ROW><ROW><id>8704713</id><snippet>sort</snippet></ROW><ROW><id>8704713</id><snippet>entries.sort(key=lambda e: e.last_name.last_name)
</snippet></ROW><ROW><id>8704713</id><snippet>collection_name</snippet></ROW><ROW><id>8704713</id><snippet>last_names</snippet></ROW><ROW><id>8704713</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8704713</id><snippet>Entry</snippet></ROW><ROW><id>8704713</id><snippet>LastName</snippet></ROW><ROW><id>8704770</id><snippet>&gt;&gt;&gt; def StrangeSwitch(list1,list2):
    return (list1[:len(list1)/2]+list2[:len(list2)/2],list1[len(list1)/2:]+list2[len(list2)/2:])

&gt;&gt;&gt; list1 = ['A', 'B', 'C', 'D']
&gt;&gt;&gt; list2 = ['E', 'F', 'G', 'H']
&gt;&gt;&gt; (list1,list2)=StrangeSwitch(list1,list2)
&gt;&gt;&gt; list1
['A', 'B', 'E', 'F']
&gt;&gt;&gt; list2
['C', 'D', 'G', 'H']
&gt;&gt;&gt; list3 = ['A', 'B', 'C']
&gt;&gt;&gt; list4 = ['D', 'E', 'F', 'G']
&gt;&gt;&gt; (list3,list4)=StrangeSwitch(list3,list4)
&gt;&gt;&gt; list3
['A', 'B', 'C']
&gt;&gt;&gt; list4
['B', 'C', 'F', 'G']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8704770</id><snippet>&gt;&gt;&gt; def StrangeSwitchFast(list1,list2):
    #return (list1[:len(list1)/2]+list2[:len(list2)/2],list1[len(list1)/2:]+list2[len(list2)/2:])
    return (list(itertools.chain(itertools.islice(list1,0,len(list1)/2),itertools.islice(list2,0,len(list2)/2))),
        list(itertools.chain(itertools.islice(list1,len(list1)/2,None),itertools.islice(list2,len(list2)/2,None))))
</snippet></ROW><ROW><id>8705031</id><snippet>'\n'.join(elem[0] for elem in queryresult)
</snippet></ROW><ROW><id>8705050</id><snippet>flush</snippet></ROW><ROW><id>8705050</id><snippet>im.save</snippet></ROW><ROW><id>8705168</id><snippet>dict</snippet></ROW><ROW><id>8705168</id><snippet>l = [('a','b'),('c','d'),('e','f')]
d = dict(l)
</snippet></ROW><ROW><id>8705406</id><snippet>hash(b) == hash(x)</snippet></ROW><ROW><id>8705570</id><snippet>from scipy.spatial.distance import sqeuclidean
a = [1,2,3]
b = [0,0,0]
print sqeuclidean(a,b) # 14
</snippet></ROW><ROW><id>8705570</id><snippet>import numpy
a = numpy.array([1,2,3])
</snippet></ROW><ROW><id>8705570</id><snippet>sqeuclidean(scipy.sparse.coo_matrix((1,3)),scipy.sparse.coo_matrix((1,3))) # 0
</snippet></ROW><ROW><id>8705570</id><snippet>scipy.sparse.csr_matrix([1,2,3])
</snippet></ROW><ROW><id>8705601</id><snippet>pip install django</snippet></ROW><ROW><id>8705855</id><snippet>def pi_sum(n):
    total, k = 0.0, 1.0
    while k &lt;= n:
        total, k = total + 8.0 /(k *(k+2)), k + 4
    return total
</snippet></ROW><ROW><id>8706266</id><snippet>print</snippet></ROW><ROW><id>8706266</id><snippet>def recursive(x):
  print '[start] recursive({0})'.format(x)
  if x &gt; 10:
    print recursive(x/10)
  print '[return] recursive({0}) = {1}'.format(x, x%10)
  return x%10

print recursive(2678)
</snippet></ROW><ROW><id>8706266</id><snippet>[start] recursive(2678)
[start] recursive(267)
[start] recursive(26)
[start] recursive(2)
[return] recursive(2) = 2
2
[return] recursive(26) = 6
6
[return] recursive(267) = 7
7
[return] recursive(2678) = 8
8
</snippet></ROW><ROW><id>8706331</id><snippet>top_package = __import__(__name__.split('.')[0])
</snippet></ROW><ROW><id>8706331</id><snippet>__name__</snippet></ROW><ROW><id>8706331</id><snippet>top_package.level_one_a.my_lib</snippet></ROW><ROW><id>8706331</id><snippet>__import__</snippet></ROW><ROW><id>8706331</id><snippet>top_package</snippet></ROW><ROW><id>8706439</id><snippet>{1: [1, 2, 3], 2: [4, 5, 6]}
</snippet></ROW><ROW><id>8706439</id><snippet>[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>8706439</id><snippet>from timeit import timeit

def select_items_old(temp_dict, n):
  res = []
  sort_keys = sorted(temp_dict.keys())
  count = 0
  for key in sort_keys:
    for pair in temp_dict[key]:
      if count &lt; n:
        res.append(pair)
        count += 1
      else:
        return res
  return res

def select_items_new(data, limit):
    count = 0
    result = []
    extend = result.extend
    for key in sorted(data.keys()):
        value = data[key]
        extend(value)
        count += len(value)
        if count &gt;= limit:
            break
    return result[:limit]

data = {x:range(10) for x in range(1000)}

def compare(*args):
    number = 1000
    for func in args:
        name = func.__name__
        print ('test: %s(data, 12): %r' % (name, func(data, 12)))
        code = '%s(data, %d)' % (name, 300)
        duration = timeit(
            code, 'from __main__ import %s, data' % name, number=number)
        print ('time: %s: %.2f usec/pass\n' % (code, 1000000 * duration/number))

compare(select_items_old, select_items_new)
</snippet></ROW><ROW><id>8706439</id><snippet>test: select_items_old(data, 12): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]
time: select_items_old(data, 300): 163.81 usec/pass

test: select_items_new(data, 12): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]
time: select_items_new(data, 300): 67.74 usec/pass
</snippet></ROW><ROW><id>8706559</id><snippet>temperature</snippet></ROW><ROW><id>8706559</id><snippet>q</snippet></ROW><ROW><id>8706559</id><snippet>quit</snippet></ROW><ROW><id>8706559</id><snippet>temperature</snippet></ROW><ROW><id>8706559</id><snippet>temp</snippet></ROW><ROW><id>8706559</id><snippet>continue</snippet></ROW><ROW><id>8706559</id><snippet>break</snippet></ROW><ROW><id>8706559</id><snippet>q</snippet></ROW><ROW><id>8706559</id><snippet>quit</snippet></ROW><ROW><id>8706693</id><snippet>$ grep return Lib/*py
</snippet></ROW><ROW><id>8706693</id><snippet>case 2</snippet></ROW><ROW><id>8706693</id><snippet>normalized_query = query.replace(' ', '').lower()
return normalized_query
</snippet></ROW><ROW><id>8706693</id><snippet>&gt;&gt;&gt; def f(x):
        return x + 2

&gt;&gt;&gt; def g(x):
        y = x + 2
        return y

&gt;&gt;&gt; dis(f)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD          
              7 RETURN_VALUE        
&gt;&gt;&gt; dis(g)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD          
              7 STORE_FAST               1 (y)

  3          10 LOAD_FAST                1 (y)
             13 RETURN_VALUE 
</snippet></ROW><ROW><id>8706807</id><snippet>class BehaviorPack(object):
    def __init__(self):
        whatever
    def OnClose(self, event)
        whatever
    def colour_panel(self):
        whatever
</snippet></ROW><ROW><id>8706807</id><snippet>class MyFrame(wx.Frame, BehaviorPack):
    def __init__(self, *args, **kargs):
        ..........
</snippet></ROW><ROW><id>8706875</id><snippet>string.zfill()</snippet></ROW><ROW><id>8706875</id><snippet>&gt;&gt;&gt; "1138".zfill(10)
0000001138
</snippet></ROW><ROW><id>8706921</id><snippet>reference</snippet></ROW><ROW><id>8707384</id><snippet>self.xxx</snippet></ROW><ROW><id>8707384</id><snippet>def factorial(self, n=None):
    if n is None: n = self.val
    if n&lt;=1: return 1
    return n*self.factorial(n=n-1)
</snippet></ROW><ROW><id>8707384</id><snippet>self</snippet></ROW><ROW><id>8707384</id><snippet>globals()</snippet></ROW><ROW><id>8707384</id><snippet>factorial</snippet></ROW><ROW><id>8707384</id><snippet>__module__</snippet></ROW><ROW><id>8707384</id><snippet>__init__</snippet></ROW><ROW><id>8707384</id><snippet>class TestClassCreation(object):
    print("Started creating class")
    print("names so far: %s" % vars())

    def __init__(self):
        pass
    print("now we have %s" % vars())

    def noop(self, default=None):
        print("this gets run when noop is called")
    print("and now have %s" % vars())
    print()

    print("and now we'll fail...")
    def failure(self, some_arg=self.noop):
        pass
    print("we never get here...")
</snippet></ROW><ROW><id>8707693</id><snippet>primeCounter = 1
candidate = 3

while primeCounter &lt; 1000:
    isPrime = True
    counter = 2
    while counter &lt; candidate:
        if candidate%counter == 0:
            isPrime = False
            break # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   break here, or the loop will go infinite
        else:
            counter = counter + 1

    if isPrime == True:
        print candidate
        primeCounter = primeCounter + 1

    candidate = candidate + 1
</snippet></ROW><ROW><id>8708069</id><snippet>import audiere
ds = audiere.open_device()
os = ds.open_array(input_array, 44100)
os.play()
</snippet></ROW><ROW><id>8708150</id><snippet>timedelta</snippet></ROW><ROW><id>8708150</id><snippet>d</snippet></ROW><ROW><id>8708150</id><snippet>next_day</snippet></ROW><ROW><id>8708150</id><snippet>from datetime import date, timedelta
...
n = (next_day - d.weekday()) % 7 # mod-7 ensures we don't go backward in time
next_run_date = d + timedelta(days=n)
</snippet></ROW><ROW><id>8708947</id><snippet>&gt;&gt;&gt; class A(object):
        def f(x):
            pass

&gt;&gt;&gt; class B(A):
        def g(x):
            pass

&gt;&gt;&gt; 'f' in vars(B)
False
&gt;&gt;&gt; 'g' in vars(B)
True
</snippet></ROW><ROW><id>8709401</id><snippet>os.system</snippet></ROW><ROW><id>8709401</id><snippet>filenm</snippet></ROW><ROW><id>8709401</id><snippet>pipe = subprocess.Popen(['find', '.', '-name', '*PARSER*.gz'], stdout=subprocess.PIPE</snippet></ROW><ROW><id>8709401</id><snippet>pipe.stdout</snippet></ROW><ROW><id>8709401</id><snippet>ftp.retrbinary</snippet></ROW><ROW><id>8709401</id><snippet>'filenm'</snippet></ROW><ROW><id>8709401</id><snippet>handleDownload</snippet></ROW><ROW><id>8709401</id><snippet>file.write</snippet></ROW><ROW><id>8709401</id><snippet>local_fobj = file('downloaded_file.gz', 'wb')
def download_cb(data):
    local_fobj.write(data)
ftp.retrbinary('RETR %s' % filenm, download_cb)
local_fobj.close()
</snippet></ROW><ROW><id>8709401</id><snippet>cwd = os.getwd()</snippet></ROW><ROW><id>8709401</id><snippet>os.chdir(cwd)</snippet></ROW><ROW><id>8709401</id><snippet>rmtip</snippet></ROW><ROW><id>8709401</id><snippet>rmthstip</snippet></ROW><ROW><id>8709509</id><snippet>sub_menu.py</snippet></ROW><ROW><id>8709509</id><snippet>...
try:
            shape_num = int(shape_num)
            if ( shape_num == 0):
                return None
            if (1 &lt;= shape_num &lt;= 5):
                print "  Number ", shape_num ," is OK."
                break
            else:
                print
                print "  The number you entered must be from 1 to 5 only."
        except:
 ....
</snippet></ROW><ROW><id>8709509</id><snippet>my_shape_num = s_m.how_many()
            if ( my_shape_num is None):
                continue
</snippet></ROW><ROW><id>8709521</id><snippet>@SPRITE_LOCATION: '..path/to/sprites/'
#header .topriglogin .telephone{background:url(@SPRITE_LOCATION'sprites.gif') -314px -183px no-repeat;
</snippet></ROW><ROW><id>8709523</id><snippet>log.warning("OnKeyDown event %s" % (event))
</snippet></ROW><ROW><id>8709523</id><snippet>Level    Value
CRITICAL  50
ERROR     40
WARNING   30
INFO      20
DEBUG     10
UNSET      0
</snippet></ROW><ROW><id>8709523</id><snippet>log.info</snippet></ROW><ROW><id>8709523</id><snippet>log.debug</snippet></ROW><ROW><id>8709523</id><snippet>class MainWindow(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(200,100))
        self.panel =  wx.Panel(self, wx.ID_ANY)
        self.Bind(wx.EVT_KEY_DOWN, self.KeyDown)
        self.Bind(wx.EVT_KEY_UP, self.KeyDown)
        self.Bind(wx.EVT_CHAR, self.KeyDown)
        self.panel.SetFocus()

    def KeyDown(self, event=None):
        logging.warning("OnKeyDown event %s" % (event))

if __name__ == "__main__":
    app = wx.App(False)
    gui = MainWindow(None, "test")
    gui.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8709579</id><snippet>a.bar=4</snippet></ROW><ROW><id>8709579</id><snippet>instance -&gt; class -&gt; parent classes in MRO order (left to right)
</snippet></ROW><ROW><id>8709579</id><snippet>class Foo(object):
    bar = 1
</snippet></ROW><ROW><id>8709579</id><snippet>a = Foo()
a.bar = 2
</snippet></ROW><ROW><id>8709579</id><snippet>a</snippet></ROW><ROW><id>8709579</id><snippet>bar</snippet></ROW><ROW><id>8709579</id><snippet>a.__class__.bar</snippet></ROW><ROW><id>8709666</id><snippet>try:
    HTMLParser.HTMLParser.feed(self, data)
except:
    print 'malformed data: %r' % data
    raise
</snippet></ROW><ROW><id>8709902</id><snippet>transfer = TransferForm(prefix="transfer")
visit = VisitForm(prefix="visit")
accommodate = AccommodateForm(prefix="accommodate")
</snippet></ROW><ROW><id>8709953</id><snippet>&gt;&gt;&gt; from urllib.request import urlopen
&gt;&gt;&gt; for line in urlopen("http://google.com/"):
       print(line.decode("cp1251"))
</snippet></ROW><ROW><id>8710086</id><snippet>DictAsMember</snippet></ROW><ROW><id>8710086</id><snippet>__getattr__</snippet></ROW><ROW><id>8710086</id><snippet>class DictAsMember(dict):
    def __getattr__(self, name):
        value = self[name]
        if isinstance(value, dict):
            value = DictAsMember(value)
        elif isinstance(value, list):
            value = [DictAsMember(element)
                     if isinstance(element, dict)
                     else element
                     for element in value]

        return value

my_dict = DictAsMember()
my_dict["property"] = {'sub': 1}
print my_dict.property.sub    # 1 will be printed

my_dict = DictAsMember()
my_dict["property"] = [{'name': 1}, {'name': 2}]
print my_dict.property[1].name    # 2 will be printed
</snippet></ROW><ROW><id>8710440</id><snippet>import random

list_of_groups = [['a', 'b'], ['c', 'd', 'e'], ['f']]
l = [group[:] for group in list_of_groups] # make a copy
random.shuffle(l)
out = []
prev_i = -1
while any(a for a in l):
    new_i = max(((i,a) for i,a in enumerate(l) if i != prev_i), key=lambda x: len(x[1]))[0]
    out.append(l[new_i].pop(random.randint(0, len(l[new_i]) - 1)))
    prev_i = new_i

print out
</snippet></ROW><ROW><id>8710759</id><snippet>--global-option="-vv"</snippet></ROW><ROW><id>8710759</id><snippet>pip install</snippet></ROW><ROW><id>8710759</id><snippet>setup.py</snippet></ROW><ROW><id>8710759</id><snippet>install</snippet></ROW><ROW><id>8710759</id><snippet>setup.py</snippet></ROW><ROW><id>8711061</id><snippet>with open(fileName, mode='rb') as file: # b is important -&gt; binary
    fileContent = file.read()
</snippet></ROW><ROW><id>8711061</id><snippet>struct.unpack("iiiii", fileContent[:20])</snippet></ROW><ROW><id>8711061</id><snippet>'i'</snippet></ROW><ROW><id>8711061</id><snippet>struct.unpack("i" * ((len(fileContent) -24) // 4), fileContent[20:-4])
</snippet></ROW><ROW><id>8711061</id><snippet>struct.unpack("i", fileContent[-4:])</snippet></ROW><ROW><id>8711129</id><snippet>$VENV/python setup.py develop</snippet></ROW><ROW><id>8711129</id><snippet>$VENV/python</snippet></ROW><ROW><id>8711129</id><snippet>sys.path</snippet></ROW><ROW><id>8711209</id><snippet>from bottle import route, run, request

@route('/hello/:name')
def index(name='World'):
    return '&lt;b&gt;Hello %s! You are at %s&lt;/b&gt;' % (name, request.path)

run(host='localhost', port=8080)
</snippet></ROW><ROW><id>8711209</id><snippet>request.path</snippet></ROW><ROW><id>8711209</id><snippet>http://127.0.0.1:8080/hello/you</snippet></ROW><ROW><id>8711209</id><snippet>Hello you! You are at /hello/you
</snippet></ROW><ROW><id>8711508</id><snippet>ancestor</snippet></ROW><ROW><id>8711508</id><snippet>import lxml

html = ...
doc = lxml.html.fromstring(html)

for element in doc.xpath('//label[contains(text(), "PRICE:")]/ancestor::div[@class="price_class"]'):
    print 'Found %s: %s' % (element.tag, element.text_content().strip())
</snippet></ROW><ROW><id>8711508</id><snippet>Found div: PRICE: 125 Rs.
</snippet></ROW><ROW><id>8711508</id><snippet>doc.xpath('//*[contains(text(), "PRICE:")]/\
          ancestor::*[not(self::strong|self::bold|self::italic)][1]')
</snippet></ROW><ROW><id>8711508</id><snippet>PRICE:</snippet></ROW><ROW><id>8711508</id><snippet>strong</snippet></ROW><ROW><id>8711508</id><snippet>bold</snippet></ROW><ROW><id>8711508</id><snippet>italic</snippet></ROW><ROW><id>8711508</id><snippet>div</snippet></ROW><ROW><id>8711508</id><snippet>ul</snippet></ROW><ROW><id>8711508</id><snippet>doc.xpath('//*[contains(text(), "PRICE:")]/ancestor::*[self::div|self::ul][1]')
</snippet></ROW><ROW><id>8712064</id><snippet>string_with_color = '#00ff00'  # gathered somehow

color = QtGui.QColor(0, 0, 0)
color.setNamedColor(string_with_color)
</snippet></ROW><ROW><id>8712064</id><snippet>ff</snippet></ROW><ROW><id>8712064</id><snippet>QString</snippet></ROW><ROW><id>8712064</id><snippet>EvalString = "QtGui.QColor(QtCore.QString(" + ColorString +"))"
</snippet></ROW><ROW><id>8712306</id><snippet>/etc/mtab</snippet></ROW><ROW><id>8712306</id><snippet>/etc/fstab</snippet></ROW><ROW><id>8712306</id><snippet>mountpoint</snippet></ROW><ROW><id>8712306</id><snippet>% grep /home /etc/fstab
UUID=000008-0003-000c-9ecd-0f1a /home           ext3    defaults        0       2
% grep /usr/src /etc/fstab
/home/Src /usr/src none bind 0 0
% mountpoint /usr/src
/usr/src is a mountpoint
% mountpoint /home/Src
/home/Src is not a mountpoint
</snippet></ROW><ROW><id>8712306</id><snippet>strace</snippet></ROW><ROW><id>8712306</id><snippet>mountpoint</snippet></ROW><ROW><id>8712306</id><snippet>lstat</snippet></ROW><ROW><id>8712306</id><snippet>stat</snippet></ROW><ROW><id>8712306</id><snippet>fstat</snippet></ROW><ROW><id>8712306</id><snippet>/usr/src</snippet></ROW><ROW><id>8712306</id><snippet>/usr/src/..</snippet></ROW><ROW><id>8712349</id><snippet>"servers":</snippet></ROW><ROW><id>8712349</id><snippet>data['servers'][0]['status']
</snippet></ROW><ROW><id>8712349</id><snippet>data</snippet></ROW><ROW><id>8712349</id><snippet>json.loads</snippet></ROW><ROW><id>8712506</id><snippet>In [42]: x[np.arange(x.shape[0])!=1,:,:]
Out[42]: 
array([[[4, 2, 3],
        [2, 0, 1],
        [1, 3, 4]],

       [[2, 4, 1],
        [0, 2, 2],
        [4, 0, 0]]])
</snippet></ROW><ROW><id>8712582</id><snippet>django-admin.py</snippet></ROW><ROW><id>8712582</id><snippet>django-admin.py</snippet></ROW><ROW><id>8712582</id><snippet>bin/</snippet></ROW><ROW><id>8712582</id><snippet>django-admin.py</snippet></ROW><ROW><id>8712582</id><snippet>echo "$(dirname $(python -c "import django; print django.__file__"))/bin/django-admin.py"</snippet></ROW><ROW><id>8712643</id><snippet>EHSS_updated_atoms.out</snippet></ROW><ROW><id>8712643</id><snippet>prog</snippet></ROW><ROW><id>8712643</id><snippet>wx.Yield()</snippet></ROW><ROW><id>8712643</id><snippet>wx.SafeYield()</snippet></ROW><ROW><id>8712643</id><snippet>sys.stdout</snippet></ROW><ROW><id>8712643</id><snippet>sys.stderr</snippet></ROW><ROW><id>8712643</id><snippet>subprocess.call</snippet></ROW><ROW><id>8712643</id><snippet>redir</snippet></ROW><ROW><id>8712643</id><snippet>prog</snippet></ROW><ROW><id>8712643</id><snippet>call(.........., stdout = redir, stderr = redir)</snippet></ROW><ROW><id>8712643</id><snippet>p subprocess.Popen(['./EHSS_updated_atoms.out', pdb[:-4]+'_new_mobcal.mfj',pdb[:-4]+'_new_mobcal.out'],
                   stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout:
    redir.write(line)
p.wait()
</snippet></ROW><ROW><id>8712684</id><snippet>C</snippet></ROW><ROW><id>8712838</id><snippet>#!/usr/bin/env python3
from itertools import groupby
from pprint import pprint

x = [
        {"foo":"A", "bar":"R", "baz":"X"},
        {"foo":"A", "bar":"R", "baz":"Y"},
        {"foo":"B", "bar":"S", "baz":"X"},
        {"foo":"A", "bar":"S", "baz":"Y"},
        {"foo":"C", "bar":"R", "baz":"Y"},
    ]


def fun(x, l):
    ks = ['foo', 'bar', 'baz']
    kn = ks[l]
    kk = lambda i:i[kn]
    for k,g in groupby(sorted(x, key=kk), key=kk):
        kg = [dict((k,v) for k,v in i.items() if k!=kn) for i in g]
        d = {}
        d[kn] = k
        if l&lt;len(ks)-1:
            d[ks[l+1]+'s'] = list(fun(kg, l+1))
        yield d

pprint(list(fun(x, 0)))
</snippet></ROW><ROW><id>8712838</id><snippet>[{'bars': [{'bar': 'R', 'bazs': [{'baz': 'X'}, {'baz': 'Y'}]},
           {'bar': 'S', 'bazs': [{'baz': 'Y'}]}],
  'foo': 'A'},
 {'bars': [{'bar': 'S', 'bazs': [{'baz': 'X'}]}], 'foo': 'B'},
 {'bars': [{'bar': 'R', 'bazs': [{'baz': 'Y'}]}], 'foo': 'C'}]
</snippet></ROW><ROW><id>8712962</id><snippet>so_far = new</snippet></ROW><ROW><id>8712962</id><snippet>if guess in word:
    print("\nYes!", guess, "is in the word!")

    # Create a new variable (so_far) to contain the guess
    new = ""
    i = 0
    for i in range(len(word)):
        if guess == word[i]:
            new += guess
        else:
            new += so_far[i]
    so_far = new # unindented this
</snippet></ROW><ROW><id>8713237</id><snippet>text = "Some sample (with parenthesis) text"
regEx = re.compile(r'([^\(]*)\([^\)]*\) *(.*)')
m = regEx.match(text)
while m:
  text = m.group(1) + m.group(2)
  m = regEx.match(text)
print text
</snippet></ROW><ROW><id>8713243</id><snippet>import matplotlib.pyplot as plt
import math

def polar_sort(l):
    x, y = zip(*((c['lat'], c['lon']) for c in l))
    ave_x = float(sum(x))/len(x)
    ave_y = float(sum(y))/len(y)

    return sorted(l, key=lambda c: math.atan2(c['lat']-ave_x, c['lon']-ave_y))

latLons = [{'lat': -33.783781327, 'lon': 137.47747747700001}, {'lat': -33.783781326899998, 'lon': 139.63963964000001}, {'lat': -33.603601166200001, 'lon': 136.03603603600001}, {'lat': -33.423421005500003, 'lon': 134.59459459499999}, {'lat': -32.882880523399997, 'lon': 132.43243243200001}, {'lat': -32.522520202199999, 'lon': 131.71171171200001}, {'lat': -32.342340041600004, 'lon': 145.40540540500001}, {'lat': -31.261259078399998, 'lon': 147.56756756799999}, {'lat': -31.081078917799999, 'lon': 128.828828829}, {'lat': -29.459457473099999, 'lon': 126.666666667}, {'lat': -28.558556670200002, 'lon': 125.94594594599999}, {'lat': -27.657655866700001, 'lon': 125.225225225}, {'lat': -26.936935223300001, 'lon': 151.89189189199999}, {'lat': -26.7567550624, 'lon': 124.504504504}, {'lat': -25.6756740961, 'lon': 152.61261261300001}, {'lat': -25.3153137736, 'lon': 123.78378378399999}, {'lat': -23.873872481599999, 'lon': 153.33333333300001}, {'lat': -23.333331995999998, 'lon': 123.063063063}, {'lat': -19.3693684138, 'lon': 154.05405405400001}, {'lat': -15.765765115600001, 'lon': 123.063063063}, {'lat': -15.2252246167, 'lon': 153.33333333300001}, {'lat': -13.243242777300001, 'lon': 152.61261261300001}, {'lat': -12.162161767000001, 'lon': 124.504504505}, {'lat': -11.801801428999999, 'lon': 151.89189189199999}, {'lat': -10.9009005815, 'lon': 125.225225225}, {'lat': -8.1981980155999992, 'lon': 149.00900900900001}, {'lat': -6.9369368056800003, 'lon': 147.56756756799999}, {'lat': -6.5765764584799999, 'lon': 129.54954954999999}, {'lat': -6.5765764584799999, 'lon': 146.84684684699999}, {'lat': -5.6756755875199998, 'lon': 130.99099099099999}, {'lat': -4.7747747122700002, 'lon': 143.24324324299999}, {'lat': -4.23423418502, 'lon': 141.08108108100001}, {'lat': -3.8738738326600002, 'lon': 138.198198198}]

x,y = zip(*((c['lat'], c['lon']) for c in polar_sort(latLons)))

plt.plot(x,y)
plt.show()
</snippet></ROW><ROW><id>8713248</id><snippet>import sys 
import cdecimal
sys.modules["decimal"] = cdecimal

from sqlalchemy import create_engine, Numeric, Integer, Column
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('mysql://test:test@localhost/test1')
Base = declarative_base()


class Exchange(Base):
    __tablename__ = 'exchange'
    id = Column(Integer, primary_key=True)
    amount = Column(Numeric(10,2))

    def __init__(self, amount):
        self.amount = cdecimal.Decimal(amount)


Base.metadata.create_all(engine)
from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)
session = Session()


x = Exchange(10.5)
session.add(x)
session.commit()
</snippet></ROW><ROW><id>8713414</id><snippet>import flaskr.helloworld as helloworld
application = helloworld.app
</snippet></ROW><ROW><id>8713414</id><snippet>import flaskr.helloworld
application = flaskr.helloworld.app
</snippet></ROW><ROW><id>8713681</id><snippet>plot_data = [[]] * len(positions) 
</snippet></ROW><ROW><id>8713681</id><snippet>len(positions)</snippet></ROW><ROW><id>8713681</id><snippet>&gt;&gt;&gt; plot_data = [[]] * 3
&gt;&gt;&gt; plot_data
[[], [], []]
&gt;&gt;&gt; plot_data[0].append(1)
&gt;&gt;&gt; plot_data
[[1], [1], [1]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8713681</id><snippet>plot_data = [[] for _ in positions]
</snippet></ROW><ROW><id>8713681</id><snippet>&gt;&gt;&gt; pd = [[] for _ in range(3)]
&gt;&gt;&gt; pd
[[], [], []]
&gt;&gt;&gt; pd[0].append(1)
&gt;&gt;&gt; pd
[[1], [], []]
</snippet></ROW><ROW><id>8713822</id><snippet>print 'Hello World!'</snippet></ROW><ROW><id>8713822</id><snippet>return 'Hello World!'</snippet></ROW><ROW><id>8713951</id><snippet>python -v -m path/to/python/module/to_start
</snippet></ROW><ROW><id>8714025</id><snippet> while True:

      if condition1:
            statements
      elif condition2:
            statements
      ...
      else:
            statements
</snippet></ROW><ROW><id>8714030</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>8714030</id><snippet>call()</snippet></ROW><ROW><id>8714030</id><snippet>p2.communicate()[0]</snippet></ROW><ROW><id>8714035</id><snippet>&gt;&gt;&gt; def test(n):
...     old = uuid.uuid1()
...     print old
...     for x in range(n):
...             new = uuid.uuid1()
...             if old &gt;= new:
...                     print "OOops"
...                     break
...             old = new
...     print new
&gt;&gt;&gt; test(1000000)
fd4ae687-3619-11e1-8801-c82a1450e52f
OOops
00000035-361a-11e1-bc9f-c82a1450e52f
</snippet></ROW><ROW><id>8714405</id><snippet>In [1]: import copy

In [2]: a={'foo':'bar'}

In [3]: b={'x': a}

In [4]: bb=copy.copy(b)

In [5]: b['x']['foo']
Out[5]: 'bar'

In [6]: b['x']['foo'] = 'test'

In [8]: bb['x']['foo']
Out[8]: 'test'

In [9]: bbb=copy.deepcopy(b)

In [10]: bbb['x']['foo'] = 'y'

In [11]: bb['x']['foo']
Out[11]: 'test'

In [12]: b['x']['foo']
Out[12]: 'test'

In [13]: bbb['x']['foo']
Out[13]: 'y'
</snippet></ROW><ROW><id>8714430</id><snippet>self.clear_cookie("user")
</snippet></ROW><ROW><id>8714430</id><snippet>False</snippet></ROW><ROW><id>8714502</id><snippet>open_</snippet></ROW><ROW><id>8714502</id><snippet>sum_</snippet></ROW><ROW><id>8714581</id><snippet>__missing__</snippet></ROW><ROW><id>8714581</id><snippet>class ImageDict(dict):
    def __missing__(self, key):
        self[key] = img = self.load(key)
        return img
    def load(self, key):
        # create a queue if not exist (could be moved to __init__)
        if not hasattr(self, '_queue'):
            self._queue = []
        # pop the oldest entry in the list and the dict
        if len(self._queue) &gt;= 100:
            self.pop(self._queue.pop(0))
        # append this key as a newest entry in the queue
        self._queue.append(key)
        # implement image loading here and return the image instance
        print 'loading', key
        return 'Image for %s' % key
</snippet></ROW><ROW><id>8714581</id><snippet>&gt;&gt;&gt; d = ImageDict()
&gt;&gt;&gt; d[3]
loading 3
'Image for 3'
&gt;&gt;&gt; d[3]
'Image for 3'
&gt;&gt;&gt; d['bleh']
loading bleh
'Image for bleh'
&gt;&gt;&gt; d['bleh']
'Image for bleh'
</snippet></ROW><ROW><id>8714788</id><snippet>while True:
    seq = input("voer uw sequentie in, IN HOOFDLETTERS: ")
    if seq.isupper():
        break
    else:
        print "Input must be IN HOOFDLETTERS"
</snippet></ROW><ROW><id>8714873</id><snippet>def find_things(tags=None, user=None, published_since=None):
    # all queries begin with something common, which may
    # be an empty dict, but here's an example
    query = {
        'is_published': True
    }
    if tags:
        # assume that it is an array of strings
        query['tags'] = {'$in': tags}
    if user:
        # assume that it is a string
        query['user'] = user
    if published_since:
        # assume that it is a datetime.datetime
        query['date_published'] = {'$gte': published_since}
    # etc...

    return db.collection.find(query)
</snippet></ROW><ROW><id>8715483</id><snippet>printf</snippet></ROW><ROW><id>8715483</id><snippet>raw_input()</snippet></ROW><ROW><id>8715483</id><snippet>./output | ./read.py</snippet></ROW><ROW><id>8715756</id><snippet>funclist = [f,g,h]
somelist+=[[x+f(x) for x,f in zip(somelist[-1],funclist)]]
</snippet></ROW><ROW><id>8715756</id><snippet>somelist+=[[x+f(x) for x in somelist[-1]]]
</snippet></ROW><ROW><id>8715756</id><snippet>itertools.count(someStartTime,delta)
</snippet></ROW><ROW><id>8715756</id><snippet>somelist+=[[x+f(t) for x,t in zip(somelist[-1],itertools.count(someStartTime,delta))]]
</snippet></ROW><ROW><id>8715756</id><snippet>def f(n):
    ........
    return .....
</snippet></ROW><ROW><id>8715784</id><snippet>__init__</snippet></ROW><ROW><id>8715784</id><snippet>__getitem__</snippet></ROW><ROW><id>8715784</id><snippet>__setitem__</snippet></ROW><ROW><id>8715784</id><snippet># From the example on the next section
&gt;&gt;&gt; f = fileinfo.FileInfo("/music/_singles/kairo.mp3")
&gt;&gt;&gt; f["name"]
'/music/_singles/kairo.mp3'
</snippet></ROW><ROW><id>8715784</id><snippet>fileinfo</snippet></ROW><ROW><id>8715784</id><snippet>__setitem__</snippet></ROW><ROW><id>8715784</id><snippet>def __setitem__(self, key, item):
    self.data[key] = item
    if key == "sensor":
        print("Sensor activated!")
</snippet></ROW><ROW><id>8715784</id><snippet>__getitem__</snippet></ROW><ROW><id>8715784</id><snippet>def __getitem__(self, key):
    if key == "temperature":
        return CurrentWeatherTemperature()
    else:
        return self.data[key]
</snippet></ROW><ROW><id>8715815</id><snippet>urllib2.Request</snippet></ROW><ROW><id>8715815</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>8715815</id><snippet>urllib2.Request(url, data, headers)</snippet></ROW><ROW><id>8715815</id><snippet>read()</snippet></ROW><ROW><id>8715815</id><snippet>url</snippet></ROW><ROW><id>8715815</id><snippet>data</snippet></ROW><ROW><id>8715815</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>8715815</id><snippet>urllib2.Request</snippet></ROW><ROW><id>8715815</id><snippet># headers contains `{'Content-Type': 'application/octet-stream'}`
r = urllib2.Request(url.encode('utf-8'), data, headers)
</snippet></ROW><ROW><id>8715821</id><snippet>login_required</snippet></ROW><ROW><id>8715821</id><snippet>login_required(original_view)</snippet></ROW><ROW><id>8715821</id><snippet>login_required(
    active_required(
        my_view
    )
)

first checks if you are logged in, then
    first(second) checks if you are active, then
        runs my_vew
</snippet></ROW><ROW><id>8716022</id><snippet>if __name__ == '__main__':
    # this was run as a main script
</snippet></ROW><ROW><id>8716022</id><snippet>__main__</snippet></ROW><ROW><id>8716022</id><snippet>main()</snippet></ROW><ROW><id>8716505</id><snippet>.pyc</snippet></ROW><ROW><id>8717120</id><snippet>streetno={"1":"Sachin Tendulkar","2":"Sehawag","3":"Dravid","4":"Dhoni","5":"Kohli"}
streetno.update([(v, k) for k, v in streetno.items()])
</snippet></ROW><ROW><id>8717120</id><snippet>&gt;&gt;&gt; pprint(streetno)
{'1': 'Sachin Tendulkar',
 '2': 'Sehawag',
 '3': 'Dravid',
 '4': 'Dhoni',
 '5': 'Kohli',
 'Dhoni': '4',
 'Dravid': '3',
 'Kohli': '5',
 'Sachin Tendulkar': '1',
 'Sehawag': '2'}
</snippet></ROW><ROW><id>8717120</id><snippet>key = raw_input("Enter name or number (i/p):")
result = streetno.get(key)
</snippet></ROW><ROW><id>8717120</id><snippet>raw_input()</snippet></ROW><ROW><id>8717120</id><snippet>input()</snippet></ROW><ROW><id>8717191</id><snippet>File "&lt;string&gt;"</snippet></ROW><ROW><id>8717191</id><snippet>exec</snippet></ROW><ROW><id>8717191</id><snippet>eval</snippet></ROW><ROW><id>8717312</id><snippet>list(file_obj)</snippet></ROW><ROW><id>8717312</id><snippet>fileobj</snippet></ROW><ROW><id>8717312</id><snippet>reader = csv.reader(f)
chunks = itertools.groupby(reader, keyfunc)
</snippet></ROW><ROW><id>8717312</id><snippet>groups = [list(chunk) for key, chunk in itertools.islice(chunks, num_chunks)]
result = pool.map(worker, groups)
</snippet></ROW><ROW><id>8717312</id><snippet>num_chunks</snippet></ROW><ROW><id>8717312</id><snippet>num_chunks</snippet></ROW><ROW><id>8717312</id><snippet>import multiprocessing as mp
import itertools
import time
import csv

def worker(chunk):
    # `chunk` will be a list of CSV rows all with the same name column
    # replace this with your real computation
    # print(chunk)
    return len(chunk)  

def keyfunc(row):
    # `row` is one row of the CSV file.
    # replace this with the name column.
    return row[0]

def main():
    pool = mp.Pool()
    largefile = 'test.dat'
    num_chunks = 10
    results = []
    with open(largefile) as f:
        reader = csv.reader(f)
        chunks = itertools.groupby(reader, keyfunc)
        while True:
            # make a list of num_chunks chunks
            groups = [list(chunk) for key, chunk in
                      itertools.islice(chunks, num_chunks)]
            if groups:
                result = pool.map(worker, groups)
                results.extend(result)
            else:
                break
    pool.close()
    pool.join()
    print(results)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8717446</id><snippet>for key, value in your_dict.items():
    if key not in your_blacklisted_set:
        print value
</snippet></ROW><ROW><id>8717446</id><snippet>resultset = [value for key, value in your_dict.items() if key not in your_blacklisted_set]
</snippet></ROW><ROW><id>8717850</id><snippet>Director</snippet></ROW><ROW><id>8717850</id><snippet>class Director(models.Model, Specializable):
    date_of_appointment = models.DateField()
    date_ceased_to_act = models.DateField(blank=True,null=True)
    def date_of_appointment_str(self):
        if self.date_of_appointment == datetime.date(1,1,1):
            return "On incorporation"
        else:
            return "%s" % (self.date_of_appointment) # format as you wish
</snippet></ROW><ROW><id>8717850</id><snippet>'date_of_appointment_str'</snippet></ROW><ROW><id>8717850</id><snippet>readonly_fields</snippet></ROW><ROW><id>8717850</id><snippet>models.DateField</snippet></ROW><ROW><id>8717850</id><snippet>MyCustomDateField</snippet></ROW><ROW><id>8717850</id><snippet>DateField</snippet></ROW><ROW><id>8717850</id><snippet>date(1,1,1)</snippet></ROW><ROW><id>8717850</id><snippet>date(1,1,1)</snippet></ROW><ROW><id>8717850</id><snippet>DateField</snippet></ROW><ROW><id>8717850</id><snippet>class MyCustomDateField(models.DateField):
    date_111_str = 'On incorporation'
    def value_to_string(self, obj):
        val = self._get_val_from_obj(obj)
        if val is None:
            data = ''
        elif val.year == val.day == val.month == 1:
            data = date_111_str
        else:
            data = datetime_safe.new_date(val).strftime("%Y-%m-%d")
        return data
    def get_prep_value(self, value):
        if value == date_111_str:
            value = datetime.date(1,1,1)
        return super(MyCustomDateField,self).get_prep_value(self, value)
</snippet></ROW><ROW><id>8718039</id><snippet>QInputDialog</snippet></ROW><ROW><id>8718039</id><snippet>from PyQt4 import QtGui, QtCore

class TabBar(QtGui.QTabBar):
    def __init__(self, parent):
        QtGui.QTabBar.__init__(self, parent)
        self._editor = QtGui.QLineEdit(self)
        self._editor.setWindowFlags(QtCore.Qt.Popup)
        self._editor.setFocusProxy(self)
        self._editor.editingFinished.connect(self.handleEditingFinished)
        self._editor.installEventFilter(self)

    def eventFilter(self, widget, event):
        if ((event.type() == QtCore.QEvent.MouseButtonPress and
             not self._editor.geometry().contains(event.globalPos())) or
            (event.type() == QtCore.QEvent.KeyPress and
             event.key() == QtCore.Qt.Key_Escape)):
            self._editor.hide()
            return True
        return QtGui.QTabBar.eventFilter(self, widget, event)

    def mouseDoubleClickEvent(self, event):
        index = self.tabAt(event.pos())
        if index &gt;= 0:
            self.editTab(index)

    def editTab(self, index):
        rect = self.tabRect(index)
        self._editor.setFixedSize(rect.size())
        self._editor.move(self.parent().mapToGlobal(rect.topLeft()))
        self._editor.setText(self.tabText(index))
        if not self._editor.isVisible():
            self._editor.show()

    def handleEditingFinished(self):
        index = self.currentIndex()
        if index &gt;= 0:
            self._editor.hide()
            self.setTabText(index, self._editor.text())

class Window(QtGui.QTabWidget):
    def __init__(self):
        QtGui.QTabWidget.__init__(self)
        self.setTabBar(TabBar(self))
        self.addTab(QtGui.QWidget(self), 'Tab One')
        self.addTab(QtGui.QWidget(self), 'Tab Two')

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8718180</id><snippet>scipy.stats.lognorm</snippet></ROW><ROW><id>8718180</id><snippet>In [315]: from scipy import stats

In [316]: x = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,8,8,8,8,8,9,9,9,10,10,11,12,13,14,14,15,19,19,21,23,25,27,28,30,31,36,41,45,48,52,55,60,68,75,86,118,159,207,354])

In [317]: mu, sigma = stats.norm.fit(np.log(x))

In [318]: mu, sigma
Out[318]: (1.8256265573350701, 1.3900377379913127)

In [319]: shape, loc, scale = stats.lognorm.fit(x, floc=0)

In [320]: np.log(scale), shape
Out[320]: (1.8256267737298788, 1.3900309739954713)
</snippet></ROW><ROW><id>8718180</id><snippet>In [321]: dist = stats.lognorm(shape, loc, scale)

In [322]: means, sds = [], []

In [323]: for i in xrange(1000):
   .....:     sample = dist.rvs(size=100)
   .....:     logsample = np.log(sample)
   .....:     means.append(logsample.mean())
   .....:     sds.append(logsample.std())
   .....:

In [324]: np.mean(means), np.mean(sds)
Out[324]: (1.8231068508345041, 1.3816361818739145)
</snippet></ROW><ROW><id>8718655</id><snippet>.py</snippet></ROW><ROW><id>8718655</id><snippet>python.exe</snippet></ROW><ROW><id>8718655</id><snippet>.pyw</snippet></ROW><ROW><id>8718655</id><snippet>.pyw</snippet></ROW><ROW><id>8718655</id><snippet>.pyw</snippet></ROW><ROW><id>8718655</id><snippet>.py</snippet></ROW><ROW><id>8718945</id><snippet>list3</snippet></ROW><ROW><id>8718945</id><snippet>list1</snippet></ROW><ROW><id>8718945</id><snippet>list2</snippet></ROW><ROW><id>8718945</id><snippet>list3 = [item1 for item1, item2 in zip(list1, list2) if item1 &gt; item2]
</snippet></ROW><ROW><id>8719013</id><snippet>class RevealAccess(object):
    """A data descriptor that sets and returns values
       normally and prints a message logging their access.
    """
    def __init__(self, initval=None, name='var'):
        self.val = initval
        self.name = name
    def __get__(self, obj, objtype):
        print 'Retrieving', self.name
        return self.val
    def __set__(self, obj, val):
        print 'Updating' , self.name
        self.val = val

class MyClass(object):
    x = RevealAccess(10, 'var "x"')
    y = RevealAccess(5, 'var "y"')

m = MyClass()
m.x
m.x = 20
m.x
m.y
</snippet></ROW><ROW><id>8719013</id><snippet>Retrieving var "x"
Updating var "x"
Retrieving var "x"
Retrieving var "y"
</snippet></ROW><ROW><id>8719013</id><snippet>class Stored(object):
    """A data descriptor that stores instance values in itself.
    """
    instances = dict()
    def __init__(self, val):
        self.instances[self, None] = val
    def __get__(self, obj, objtype):
        return self.instances[self, obj]
    def __set__(self, obj, val):
        self.instances[self, obj] = val

class MyClass(object):
    x = Stored(3)
    y = Stored(9)

print(MyClass.x)
print(MyClass.y)
m = MyClass()
m.x = 42
print(m.x)
m.y = 19
print(m.y)
print(m.x)
</snippet></ROW><ROW><id>8719100</id><snippet>__import__</snippet></ROW><ROW><id>8719100</id><snippet>i = __import__('matplotlib.text')
</snippet></ROW><ROW><id>8719100</id><snippet>i = __import__('matplotlib.text', fromlist=[''])
</snippet></ROW><ROW><id>8719100</id><snippet>i</snippet></ROW><ROW><id>8719100</id><snippet>matplotlib.text</snippet></ROW><ROW><id>8719100</id><snippet>importlib</snippet></ROW><ROW><id>8719100</id><snippet>import importlib

i = importlib.import_module("matplotlib.text")
</snippet></ROW><ROW><id>8719445</id><snippet>badXML = "your bad utf-8 xml here"  #(type &lt;str&gt;)

#Turn it into a python unicode string - ignore errors, kick out bad unicode
decoded = badXML.decode('utf-8', errors='ignore')  #(type &lt;unicode&gt;)

#turn it back into a string, using utf-8 encoding.
goodXML = decoded.encode('utf-8')   #(type &lt;str&gt;)
</snippet></ROW><ROW><id>8719445</id><snippet>from suds.plugin import MessagePlugin
class UnicodeFilter(MessagePlugin):
    def received(self, context):
        decoded = context.reply.decode('utf-8', errors='ignore')
        reencoded = decoded.encode('utf-8')
        context.reply = reencoded
</snippet></ROW><ROW><id>8719445</id><snippet>from suds.client import Client
client = Client(WSDL_url, plugins=[UnicodeFilter()])
</snippet></ROW><ROW><id>8719445</id><snippet>errors='ignore'</snippet></ROW><ROW><id>8719445</id><snippet>"\xef\xbc&lt;/name".decode('utf-8', errors='ignore')</snippet></ROW><ROW><id>8719445</id><snippet>"&lt;/name"</snippet></ROW><ROW><id>8719445</id><snippet>"/name"</snippet></ROW><ROW><id>8719445</id><snippet>e</snippet></ROW><ROW><id>8719445</id><snippet>0xef</snippet></ROW><ROW><id>8719445</id><snippet>0xbc</snippet></ROW><ROW><id>8719445</id><snippet>0x3c</snippet></ROW><ROW><id>8719445</id><snippet>'&lt;'</snippet></ROW><ROW><id>8719445</id><snippet>0x3c</snippet></ROW><ROW><id>8719445</id><snippet>0x3c</snippet></ROW><ROW><id>8719461</id><snippet>from xml.etree import ElementTree as ET

XML = """&lt;?xml version="1.0" ?&gt;
    &lt;ItemLookupResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2010-11-01"&gt; 
      &lt;OperationRequest&gt;
        &lt;HTTPHeaders&gt;
            &lt;Header Name="UserAgent" Value="TSN (Language=Python)"&gt;&lt;/Header&gt;
        &lt;/HTTPHeaders&gt;
        &lt;RequestId&gt;96ef9bc3-68a8-4bf3-a2c7-c98b8aeae00f&lt;/RequestId&gt;
        &lt;Arguments&gt;
            &lt;Argument Name="Operation" Value="ItemLookup"&gt;&lt;/Argument&gt;
            &lt;Argument Name="Service" Value="AWSECommerceService"&gt;&lt;/Argument&gt;
            &lt;Argument Name="Signature" Value="gjc4wRNum3YT82app1d06vMIDM7v44fOmZTP8Uh3LqE="&gt;&lt;/Argument&gt;
            &lt;Argument Name="AssociateTag" Value="sneakick-20"&gt;&lt;/Argument&gt;
            &lt;Argument Name="Version" Value="2010-11-01"&gt;&lt;/Argument&gt;
            &lt;Argument Name="ItemId" Value="810056013349,810056013264"&gt;&lt;/Argument&gt;
            &lt;Argument Name="IdType" Value="UPC"&gt;&lt;/Argument&gt;
            &lt;Argument Name="AWSAccessKeyId" Value="AKIAIFMUMJLJOOINRVRA"&gt;&lt;/Argument&gt;
            &lt;Argument Name="Timestamp" Value="2012-01-03T21:26:39Z"&gt;&lt;/Argument&gt;
            &lt;Argument Name="ResponseGroup" Value="ItemIds"&gt;&lt;/Argument&gt;
            &lt;Argument Name="SearchIndex" Value="Apparel"&gt;&lt;/Argument&gt;
        &lt;/Arguments&gt;
       &lt;RequestProcessingTime&gt;0.0595830000000000&lt;/RequestProcessingTime&gt;
      &lt;/OperationRequest&gt;
      &lt;Items&gt;
          &lt;Request&gt;
              &lt;IsValid&gt;True&lt;/IsValid&gt;
              &lt;ItemLookupRequest&gt;
                  &lt;IdType&gt;UPC&lt;/IdType&gt;
                  &lt;ItemId&gt;810056013349&lt;/ItemId&gt;
                  &lt;ItemId&gt;810056013264&lt;/ItemId&gt;
                  &lt;ResponseGroup&gt;ItemIds&lt;/ResponseGroup&gt;
                  &lt;SearchIndex&gt;Apparel&lt;/SearchIndex&gt;
                  &lt;VariationPage&gt;All&lt;/VariationPage&gt;
              &lt;/ItemLookupRequest&gt;
          &lt;/Request&gt;
          &lt;Item&gt;
              &lt;ASIN&gt;B000XR4K6U&lt;/ASIN&gt;
          &lt;/Item&gt;
          &lt;Item&gt;
              &lt;ASIN&gt;B000XR2UU8&lt;/ASIN&gt;
          &lt;/Item&gt;
       &lt;/Items&gt;
    &lt;/ItemLookupResponse&gt;"""

NS = "{http://webservices.amazon.com/AWSECommerceService/2010-11-01}"

doc = ET.fromstring(XML)
Item_elems = doc.findall(".//" + NS + "Item")  # All Item elements in document

print Item_elems
</snippet></ROW><ROW><id>8719461</id><snippet>[&lt;Element '{http://webservices.amazon.com/AWSECommerceService/2010-11-01}Item' at 0xbf0c50&gt;, 
&lt;Element '{http://webservices.amazon.com/AWSECommerceService/2010-11-01}Item' at 0xbf0cd0&gt;]
</snippet></ROW><ROW><id>8719461</id><snippet>NS = "{http://webservices.amazon.com/AWSECommerceService/2010-11-01}"
doc = ET.fromstring(XML)
items = doc[1]                           # Items element

first_item = items.find(NS + 'Item')     # First direct Item child
all_items =  items.findall(NS + 'Item')  # List of all direct Item children
</snippet></ROW><ROW><id>8719786</id><snippet>owner</snippet></ROW><ROW><id>8719786</id><snippet>instance</snippet></ROW><ROW><id>8719786</id><snippet>None</snippet></ROW><ROW><id>8719786</id><snippet>print(Container.managed_attr)</snippet></ROW><ROW><id>8719786</id><snippet>instance</snippet></ROW><ROW><id>8719786</id><snippet>None</snippet></ROW><ROW><id>8719786</id><snippet>instance._name</snippet></ROW><ROW><id>8719786</id><snippet>AttributeError</snippet></ROW><ROW><id>8719786</id><snippet>instance is None</snippet></ROW><ROW><id>8719786</id><snippet>owner</snippet></ROW><ROW><id>8719786</id><snippet>        def __get__(self, instance, owner):
            if instance is None:
                # special handling for Customer.managed_attr
            else:
                return instance._name 
</snippet></ROW><ROW><id>8719940</id><snippet>class defaultlist(list):
    def __init__(self, fx):
        self._fx = fx

    def __setitem__(self, index, value):
        while len(self) &lt;= index:
            self.append(self._fx())
        list.__setitem__(self, index, value)
</snippet></ROW><ROW><id>8719940</id><snippet>a = defaultlist(int)
print a
a[2] = 7
a[4] = 'x'
print a
</snippet></ROW><ROW><id>8719940</id><snippet>[]
[0, 0, 7, 0, 'x']
</snippet></ROW><ROW><id>8719941</id><snippet>def set_shape_predicate(shape):
    def predicate(context, request):
        request.shape = shape
        return True
    return predicate

@view_config(renderer="shape.mak", route_name='circle_route', custom_predicates=[set_shape_predicate('circle')])
@view_config(renderer="shape.mak", route_name='triangle route', custom_predicates=[set_shape_predicate('triangle')])
def new_model(self):
    # request.shape will be 'circle' or 'triangle'
</snippet></ROW><ROW><id>8719941</id><snippet>request.matched_route.name</snippet></ROW><ROW><id>8719941</id><snippet>'circle_route'</snippet></ROW><ROW><id>8719941</id><snippet>'triangle_route'</snippet></ROW><ROW><id>8720162</id><snippet>from collections import defaultdict

counts = defaultdict(set)

for mydict in li:
  for k, v in mydict.items():
    counts[k].add(v)
</snippet></ROW><ROW><id>8720162</id><snippet>print dict((k, len(v)) for k, v in counts.items())
# prints {1: 1, 2: 2}
</snippet></ROW><ROW><id>8720421</id><snippet>parameters = {field_name: value for field_name, value in request.GET.items()
              if value and field_name in model._meta.get_all_field_names()}
model.objects.filter(**parameters)
</snippet></ROW><ROW><id>8720421</id><snippet>filter</snippet></ROW><ROW><id>8720431</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>8720431</id><snippet>@contextlib.contextmanager
def write_on_change_file(filename):
    with tempfile.TemporaryFile('r+') as temporary_file:
        yield temporary_file
        try:
             ... some saving logic that you had in __exit__ ...
</snippet></ROW><ROW><id>8720431</id><snippet>with write_on_change_file(...) as f:</snippet></ROW><ROW><id>8720431</id><snippet>with</snippet></ROW><ROW><id>8720431</id><snippet>yield</snippet></ROW><ROW><id>8720431</id><snippet>yield</snippet></ROW><ROW><id>8720431</id><snippet>try</snippet></ROW><ROW><id>8720431</id><snippet>with</snippet></ROW><ROW><id>8720454</id><snippet>obj = my_dict.get('obj')
if obj:   # &lt;--- test is on truthiness of obj
  # if we are here, it means:
  #   1. my_dict has key 'obj', AND...
  #   2. at least one of the following,
  #        my_dict['obj'].__nonzero__() returned True (__bool__ for python 3)
  #      OR
  #        my_dict['obj'].__len__() returned something &gt; 0
  #      OR
  #        my_dict['obj'] is not None, and is an instance which defines neither of __nonzero__ or __len__ 
  var = obj
</snippet></ROW><ROW><id>8720454</id><snippet>False</snippet></ROW><ROW><id>8720454</id><snippet>var</snippet></ROW><ROW><id>8720454</id><snippet>var = my_dict['obj'] if 'obj' in my_dict and my_dict['obj'] else var
</snippet></ROW><ROW><id>8720454</id><snippet>NameError</snippet></ROW><ROW><id>8720454</id><snippet>var</snippet></ROW><ROW><id>8720454</id><snippet>var</snippet></ROW><ROW><id>8720657</id><snippet>&gt;&gt;&gt; server = xmlrpclib.ServerProxy("http://admin:admin@localhost:8080/plone")
&gt;&gt;&gt; server.get_schema('Document')
{'creators': {'required': False, 'type': 'lines'}, 'description': ...
&gt;&gt;&gt; baduser_server = xmlrpclib.ServerProxy("http://bad:bad@localhost:8080/plone")
&gt;&gt;&gt; baduser_server.get_schema('Document')
Traceback (most recent call last):
...
ProtocolError: &lt;ProtocolError for bad:bad@localhost:8080/plone: 401 Unauthorized&gt;
</snippet></ROW><ROW><id>8720657</id><snippet>from xmlrpclib import ServerProxy
from xmlrpclib import ProtocolError
try:
    server = ServerProxy("http://admin:admin@localhost:8080/plone")
    server.get_schema('Document')
    return server
except ProtocolError:
    return None
</snippet></ROW><ROW><id>8720822</id><snippet>bool(x)</snippet></ROW><ROW><id>8720822</id><snippet>True</snippet></ROW><ROW><id>8720822</id><snippet>x</snippet></ROW><ROW><id>8720822</id><snippet>False</snippet></ROW><ROW><id>8720822</id><snippet>Ellipsis</snippet></ROW><ROW><id>8720822</id><snippet>True</snippet></ROW><ROW><id>8720822</id><snippet>None</snippet></ROW><ROW><id>8720822</id><snippet>bool()</snippet></ROW><ROW><id>8720822</id><snippet>False</snippet></ROW><ROW><id>8720822</id><snippet>bool()</snippet></ROW><ROW><id>8720822</id><snippet>PyObject_IsTrue()</snippet></ROW><ROW><id>8720822</id><snippet>int
PyObject_IsTrue(PyObject *v)
{
    Py_ssize_t res;
    if (v == Py_True)
        return 1;
    if (v == Py_False)
        return 0;
    if (v == Py_None)
        return 0;
    else if (v-&gt;ob_type-&gt;tp_as_number != NULL &amp;&amp;
             v-&gt;ob_type-&gt;tp_as_number-&gt;nb_nonzero != NULL)
        res = (*v-&gt;ob_type-&gt;tp_as_number-&gt;nb_nonzero)(v);
    else if (v-&gt;ob_type-&gt;tp_as_mapping != NULL &amp;&amp;
             v-&gt;ob_type-&gt;tp_as_mapping-&gt;mp_length != NULL)
        res = (*v-&gt;ob_type-&gt;tp_as_mapping-&gt;mp_length)(v);
    else if (v-&gt;ob_type-&gt;tp_as_sequence != NULL &amp;&amp;
             v-&gt;ob_type-&gt;tp_as_sequence-&gt;sq_length != NULL)
        res = (*v-&gt;ob_type-&gt;tp_as_sequence-&gt;sq_length)(v);
    else
        return 1;
    /* if it is negative, it should be either -1 or -2 */
    return (res &gt; 0) ? 1 : Py_SAFE_DOWNCAST(res, Py_ssize_t, int);
}
</snippet></ROW><ROW><id>8720889</id><snippet>os.system</snippet></ROW><ROW><id>8720889</id><snippet>import subprocess
p=subprocess.Popen(['msfconsole'], stdin=subprocess.PIPE, stderr=subprocess.PIPE)
p.communicate(myvariable)
</snippet></ROW><ROW><id>8720972</id><snippet>instance</snippet></ROW><ROW><id>8720972</id><snippet>__get__</snippet></ROW><ROW><id>8720972</id><snippet>class Price(object):
    def __init__(self, dollars):
        self.dollars = dollars

    class Convert(object):
        def __init__(self, rate):
            self.rate = rate

        def __get__(self, instance, owner):
            if instance is None:
                # Accessed through class, return the descriptor instead.
                return self
            return instance.dollars * self.rate

    euros = Convert(0.75)
</snippet></ROW><ROW><id>8720972</id><snippet>&gt;&gt;&gt; Price.euros.rate
0.75
</snippet></ROW><ROW><id>8721057</id><snippet>prev_line = ''

for current_line in x: 
   print "Current: " + current_line
   print "Previous: " + prev_line

   if prev_line &gt; current_line:
       print "Folder"
   elif prev_line == current_line:
       print "Root"

    prev_line = current_line
</snippet></ROW><ROW><id>8721233</id><snippet>- url: /geocode   
  script: first.py   
  login: admin 
</snippet></ROW><ROW><id>8721413</id><snippet>cook, chef, fireman
cook, chef, fireman
cook, chef, fireman
cook, chef, fireman
house, farm, road
</snippet></ROW><ROW><id>8721413</id><snippet># from: http://www.gnu.org/software/gawk/manual/html_node/Join-Function.html
function join(array, start, end, sep, result, i){
         if (sep == "")
            sep = " "
         else if (sep == SUBSEP) # magic value
            sep = ""
         result = array[start]
         for (i = start + 1; i &lt;= end; i++)
            result = result sep array[i]
         return result
}
BEGIN {
    FS="\n";
}
{
    # split input on newline
    for(i=1;i&lt;=NF;i++) {
        # split line on the commas
        size = split($i, s, ",")
        for(ii=1;ii&lt;=size;ii++) {
            # trim whitespace
            gsub(/[[:space:]]*/,"",s[ii])
            # uppercase first char and glue it back together
            s[ii] = toupper(substr(s[ii], 0, 1)) substr(s[ii], 2)
        }
        # join array back and print it out
        print join(s, 1, size, ", ")
    }
}
</snippet></ROW><ROW><id>8721413</id><snippet>awk -f up.awk test.input &gt;test.output</snippet></ROW><ROW><id>8721413</id><snippet>Cook, Chef, Fireman
Cook, Chef, Fireman
Cook, Chef, Fireman
Cook, Chef, Fireman
House, Farm, Road
</snippet></ROW><ROW><id>8721457</id><snippet>def find_the_man( T, name,  p = None):
    r = False 
    for i in T: 
        if type( i ) == list: 
            r = find_the_man( i, name, T[0] )
            if r:
               break
        elif i == name:
            return ( p, [ i[0] if type(i) == list else i for i in T[ 1: ] ] ) if T.index(i) == 0 else ( T[0], None )
    return r 

T= [ "Kanky", [ "satan", [ "ben", "ian" ], "Alan" ], "malan", [ "yugi", "yuppi" ] ] 
# function return tuple ( parent, list_of_children )
find_the_man( T, "Kanky" )  # (None, ['satan', 'malan', 'yugi'])
find_the_man( T, "satan" )  # ('Kanky', ['ben', 'Alan'])
find_the_man( T, "ben" )    # ('satan', ['ian'])
find_the_man( T, "malan" )  # ('Kanky', None)
find_the_man( T, "yugi" )   # ('Kanky', ['yuppi'])
find_the_man( T, "yuppi" )  # ('yugi', None)
find_the_man(T, "stranger" )# False
</snippet></ROW><ROW><id>8721508</id><snippet>pynessus</snippet></ROW><ROW><id>8721508</id><snippet>pynessus.py</snippet></ROW><ROW><id>8721508</id><snippet>import pynessus
</snippet></ROW><ROW><id>8721508</id><snippet>pynessus</snippet></ROW><ROW><id>8721670</id><snippet>L += [4] * 10
</snippet></ROW><ROW><id>8721670</id><snippet>&gt;&gt;&gt; L = [0,1,2,3]
&gt;&gt;&gt; L += [4] * 10
&gt;&gt;&gt; L
[0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
</snippet></ROW><ROW><id>8721720</id><snippet>posts_list = sorted(posts_list, key=lambda post: (Vote.objects.get_score(post)['score'], post.datetime))
</snippet></ROW><ROW><id>8721720</id><snippet>ordering</snippet></ROW><ROW><id>8721720</id><snippet>order_by</snippet></ROW><ROW><id>8721720</id><snippet>scores = Vote.objects.get_score_in_bulk(posts_list)
posts_list = sorted(posts_list, key=lambda post: (scores[post.id]['score'], post.datetime))
</snippet></ROW><ROW><id>8721798</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *

try:
    import enchant
except ImportError:
    enchant = None

class Translit(QMainWindow):
    def __init__(self, parent = None):
        super(Translit, self).__init__(parent)
        if enchant is not None:
            dict_list = enchant.list_languages()
            if "ru_RU" in dict_list:
                self.dict = enchant.Dict("ru_RU")
            else:
                self.dict = enchant.Dict()
            self.change_dict()
        else:
            self.dict = None
            QMessageBox.warning(parent, "",
                "Error: could not import the 'enchant' module\n\n"
                "Spell checking will be disabled")

    def change_dict(self):
        if self.dict is not None:
            self.dict = enchant.Dict("en_US")
            QMessageBox.about(
                parent, "", "Spellcheck is set to " + self.dict.tag)
</snippet></ROW><ROW><id>8721798</id><snippet>enchant</snippet></ROW><ROW><id>8722111</id><snippet>if os.path.exists(df):
  with open(df, 'rb') as f:
    packet = f.read(blocksize)

    while packet != '':
      conn.send(packet)

      packet = f.read(blocksize)
</snippet></ROW><ROW><id>8722111</id><snippet>df = 'path/to/data/file'
blocksize = 8192 # or some other size packet you want to transmit.  
                 # Powers of 2 are good.
conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
</snippet></ROW><ROW><id>8722201</id><snippet>funcname(...)</snippet></ROW><ROW><id>8722201</id><snippet>reobj = re.compile(r"""
    # Match (unreliably) Python function with self reference.
    ^                        # Anchor to start of line.
    ([ \t]*)                 # $1: Indentation of DEF statement.
    def[ \t]+                # Function definition.
    ([^\s(]+)                # $2: Name of function to find.
    .*\r?\n                  # Remainder of function def line.
    (?:                      # Zero or more lines w/o funcname.
      (?:                    # Function block lines alternatives.
        \1[ \t]+             # Func block lines have extra indentation.
        (?:(?!\b\2\s*\().)*  # Optional non-funcname stuff on line
      | [ \t]*\#.*           # Allow comment lines to defy indent rules.
      )?                     # Allow blank lines in function block.
      \r?\n                  # End of line not containing funcname.
    )*                       # Zero or more lines w/o funcname
    \1[ \t]+                 # Now match the line having funcname.
    (?:(?!\b\2\s*\().)*      # Optional non-funcname stuff on line
    \b\2\s*\(                # Match the function self reference.
    """, re.MULTILINE | re.VERBOSE)
</snippet></ROW><ROW><id>8722201</id><snippet>'def'</snippet></ROW><ROW><id>8722201</id><snippet>$1</snippet></ROW><ROW><id>8722201</id><snippet>$2</snippet></ROW><ROW><id>8722351</id><snippet>SpellTextEdit</snippet></ROW><ROW><id>8722351</id><snippet>def highlighterEnabled(self):
     return self.highlighter.document() is not None

def setHighlighterEnabled(self, enable):
    if enable != self.highlighterEnabled():
        if enable:
            self.highlighter.setDocument(self.document())
        else:
            self.highlighter.setDocument(None)
</snippet></ROW><ROW><id>8722486</id><snippet>map()</snippet></ROW><ROW><id>8722486</id><snippet>", ".join(x.strftime("%d/%m/%Y") for x in daterange)
</snippet></ROW><ROW><id>8723033</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import random

def fun(x, y):
  return x + y

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
n = 10
xs = [i for i in range(n) for _ in range(n)]
ys = range(n) * n
zs = [fun(x, y) for x,y in zip(xs,ys)]

ax.scatter(xs, ys, zs)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()
</snippet></ROW><ROW><id>8723033</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import random

def fun(x, y):
  return x**2 + y

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = y = np.arange(-3.0, 3.0, 0.05)
X, Y = np.meshgrid(x, y)
zs = np.array([fun(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])
Z = zs.reshape(X.shape)

ax.plot_surface(X, Y, Z)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()
</snippet></ROW><ROW><id>8723806</id><snippet>settings.py</snippet></ROW><ROW><id>8723806</id><snippet>try:
    from settings_dev import *
except ImportError:
    pass
</snippet></ROW><ROW><id>8723806</id><snippet>settings_dev.py</snippet></ROW><ROW><id>8723806</id><snippet>settings.py</snippet></ROW><ROW><id>8723806</id><snippet>import sys
globals().update(vars(sys.modules['settings']))
</snippet></ROW><ROW><id>8723941</id><snippet>result = list(db.collection.find())
</snippet></ROW><ROW><id>8724373</id><snippet>make</snippet></ROW><ROW><id>8724373</id><snippet>parser_make.set_defaults(func=lang.make())
</snippet></ROW><ROW><id>8724373</id><snippet>lang.make()
</snippet></ROW><ROW><id>8724373</id><snippet>func</snippet></ROW><ROW><id>8724373</id><snippet>make</snippet></ROW><ROW><id>8724373</id><snippet>parser_make.set_defaults(func=lang.make)
</snippet></ROW><ROW><id>8724373</id><snippet>argparse</snippet></ROW><ROW><id>8724373</id><snippet>func</snippet></ROW><ROW><id>8724373</id><snippet>args</snippet></ROW><ROW><id>8724373</id><snippet>args = parser.parse_args()
args.func()
</snippet></ROW><ROW><id>8724373</id><snippet>args.func</snippet></ROW><ROW><id>8724373</id><snippet>lang.make</snippet></ROW><ROW><id>8724373</id><snippet>lang.compile</snippet></ROW><ROW><id>8724373</id><snippet>lang.clean</snippet></ROW><ROW><id>8724373</id><snippet>()</snippet></ROW><ROW><id>8724428</id><snippet>class MyList(ULC.UltimateListCtrl, listmix.ColumnSorterMixin):
    def __init__(self, parent, data):
        ULC.UltimateListCtrl.__init__(self, parent, agwStyle=ULC.ULC_REPORT | ULC.ULC_HAS_VARIABLE_ROW_HEIGHT)
        self.data = data
        self.IDoMyself()
        self.Bind(wx.EVT_LIST_COL_CLICK, self.OnColumn)

    def IDoMyself(self):
        self.itemDataMap = self.data
        listmix.ColumnSorterMixin.__init__(self, len(self.data))

        self.InsertColumn(0, "A")      # you should generalize this for any size
        self.InsertColumn(1, "B")
        self.InsertColumn(2, "C")

        for key, data in self.data.items():
            index = self.Append(data)
            self.SetItemData(index, key)

    def OnColumn(self, e):
        self.Refresh()
        e.Skip()

    def GetListCtrl(self):
        return self
</snippet></ROW><ROW><id>8724428</id><snippet>class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        DATA = { 0 : ("3", "3", "1"), 1 : ("2", "1", "2"), 2 : ("1", "2", "3") }
        self.list = MyList(self, DATA)
        self.Show()
</snippet></ROW><ROW><id>8724481</id><snippet>findAll</snippet></ROW><ROW><id>8724481</id><snippet>rows = soup.findAll('tr')[4::5]
</snippet></ROW><ROW><id>8724601</id><snippet>import subprocess
retcode = subprocess.call(["/usr/bin/python", "/path/to/test.py"])
print "Return code of test.py is ", retcode
</snippet></ROW><ROW><id>8725167</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8725193</id><snippet>in</snippet></ROW><ROW><id>8725193</id><snippet>if "0" in myString:
  print "%s contains 0" % myString
</snippet></ROW><ROW><id>8725193</id><snippet>0</snippet></ROW><ROW><id>8725193</id><snippet>abc: 200
</snippet></ROW><ROW><id>8725193</id><snippet>def is_row_zero(row):
  parts = row.split(":")
  value = parts[1].strip()
  if value == "0":
    print "%s is 0, not allowed" % parts[0]
    return True
  return False
</snippet></ROW><ROW><id>8725321</id><snippet>def dict_sum(d1, d2):
    if d1 is None: return d2
    if d2 is None: return d1
    if isinstance(d1, list) and isinstance(d2, list):
        return list(set(d1 + d2))
    try:
        return d1 + d2
    except TypeError:
        # assume d1 and d2 are dictionaries
        keys = set(d1.iterkeys()) | set(d2.iterkeys())
        return dict((key, dict_sum(d1.get(key), d2.get(key))) for key in keys)
</snippet></ROW><ROW><id>8725321</id><snippet>dict_sum(a, b)</snippet></ROW><ROW><id>8725321</id><snippet>AttributeError</snippet></ROW><ROW><id>8725321</id><snippet>dict_sum({'a': 1}, 2)
</snippet></ROW><ROW><id>8725768</id><snippet>views.py</snippet></ROW><ROW><id>8725768</id><snippet>return render_to_response('login.html', {'form': })
</snippet></ROW><ROW><id>8725768</id><snippet>render_to_response</snippet></ROW><ROW><id>8725768</id><snippet>login.html</snippet></ROW><ROW><id>8725768</id><snippet>{'form': }</snippet></ROW><ROW><id>8725768</id><snippet>form</snippet></ROW><ROW><id>8725768</id><snippet>return return render_to_response('login.html', {'form': my_form})
</snippet></ROW><ROW><id>8725769</id><snippet>x, y = y, x + y
</snippet></ROW><ROW><id>8725769</id><snippet>y</snippet></ROW><ROW><id>8725769</id><snippet>ham</snippet></ROW><ROW><id>8725769</id><snippet>x + y</snippet></ROW><ROW><id>8725769</id><snippet>spam</snippet></ROW><ROW><id>8725769</id><snippet>x</snippet></ROW><ROW><id>8725769</id><snippet>ham</snippet></ROW><ROW><id>8725769</id><snippet>y</snippet></ROW><ROW><id>8725769</id><snippet>spam</snippet></ROW><ROW><id>8725769</id><snippet>ham = y
spam = x + y
x = ham
y = spam
</snippet></ROW><ROW><id>8725769</id><snippet>x = y
y = x + y
</snippet></ROW><ROW><id>8725769</id><snippet>x</snippet></ROW><ROW><id>8725769</id><snippet>y</snippet></ROW><ROW><id>8725769</id><snippet>y</snippet></ROW><ROW><id>8725769</id><snippet>x</snippet></ROW><ROW><id>8725769</id><snippet>== y</snippet></ROW><ROW><id>8725769</id><snippet>y</snippet></ROW><ROW><id>8725769</id><snippet>x = y
y = y + y
</snippet></ROW><ROW><id>8726146</id><snippet>CoMarshalInterThreadInterfaceInStream</snippet></ROW><ROW><id>8726146</id><snippet>CoGetInterfaceAndReleaseStream</snippet></ROW><ROW><id>8726223</id><snippet>self</snippet></ROW><ROW><id>8726223</id><snippet>App</snippet></ROW><ROW><id>8726223</id><snippet>bottle.route()</snippet></ROW><ROW><id>8726223</id><snippet>import bottle        

class App(object):
    def __init__(self,param):
        self.param   = param

    def index1(self):
        return("I'm 1 | self.param = %s" % self.param)

myapp = App(param='some param')
bottle.route("/1")(myapp.index1)
</snippet></ROW><ROW><id>8726223</id><snippet>def routeapp(obj):
    for kw in dir(app):
        attr = getattr(app, kw)
        if hasattr(attr, 'route'):
            bottle.route(attr.route)(attr)

class App(object):
    def __init__(self, config):
        self.config = config

    def index(self):
        pass
    index.route = '/index/'

app = App({'config':1})
routeapp(app)
</snippet></ROW><ROW><id>8726223</id><snippet>bottle.route()</snippet></ROW><ROW><id>8726223</id><snippet>App.__init__()</snippet></ROW><ROW><id>8726223</id><snippet>App</snippet></ROW><ROW><id>8726223</id><snippet>index.route=</snippet></ROW><ROW><id>8726223</id><snippet>def methodroute(route):
    def decorator(f):
        f.route = route
        return f
    return decorator

class App(object):
    @methodroute('/index/')
    def index(self):
        pass
</snippet></ROW><ROW><id>8726282</id><snippet>&lt;Tag1&gt;&lt;Tag2&gt;&lt;/Tag1&gt;&lt;/Tag2&gt;
</snippet></ROW><ROW><id>8726533</id><snippet>bin/python</snippet></ROW><ROW><id>8726533</id><snippet>import sys
print sys.argv[1:]
</snippet></ROW><ROW><id>8726533</id><snippet>python test.py</snippet></ROW><ROW><id>8726533</id><snippet>[]</snippet></ROW><ROW><id>8726533</id><snippet>python test.py 5</snippet></ROW><ROW><id>8726533</id><snippet>['5']</snippet></ROW><ROW><id>8726533</id><snippet>python -i test.py 5</snippet></ROW><ROW><id>8726533</id><snippet>['5']</snippet></ROW><ROW><id>8726533</id><snippet>-i</snippet></ROW><ROW><id>8726533</id><snippet>bin/python /usr/local/bin/nosetests --with-snort
</snippet></ROW><ROW><id>8726745</id><snippet>"""H1"""
from multiprocessing import Process, Pipe
import sys

def P1(conn):
    print 'P1: some short lived work'
    sys.stdout.flush()
    conn.send('work done')
    # wait for shutdown command...
    conn.recv()
    conn.close()
    print 'P1: shutting down'

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=P1, args=(child_conn,))
    p.start()
    print parent_conn.recv()
    print 'H1: some other IO bound task'
    parent_conn.send("game over")
    p.join()
</snippet></ROW><ROW><id>8726745</id><snippet>P1: some short lived work
work done
H1: some other IO bound task
P1: shutting down
</snippet></ROW><ROW><id>8726803</id><snippet>#!/usr/bin/env python3
from re import match
from collections import namedtuple
from pprint import pprint
from random import choice

Mail = namedtuple('Mail', 'subject, body')

def parseMails(filename):
    mails = {}
    with open(filename) as f:
        index = ''
        subject = ''
        body = ''
        for line in f:
            m = match(r'^\[(.+)\]$', line)
            if m:
                if index:
                    mails[index] = Mail(subject, body)
                index = m.group(1)
                body = ''
            elif line.startswith('Subject: '):
                subject = line[len('Subject: '):-1]
            else:
                body += line[len('Body: '):]
        else:
            mails[index] = Mail(subject, body)
    return mails

mails = parseMails('mails.txt')
index = choice(list(mails.keys()))
mail = mails[index]
pprint(mail)
</snippet></ROW><ROW><id>8726803</id><snippet>Mail(subject='Goodbye', body='This is not a test\nNo one cares\nFoo bar foo bar foo bar\nRegards\n')
</snippet></ROW><ROW><id>8726853</id><snippet>pip install django-less</snippet></ROW><ROW><id>8726853</id><snippet>less</snippet></ROW><ROW><id>8726853</id><snippet>npm install less</snippet></ROW><ROW><id>8726853</id><snippet>{% load less %}</snippet></ROW><ROW><id>8726853</id><snippet>&lt;link rel="stylesheet" href="{{ STATIC_URL}}{% less "path/to/styles.less" %}" /&gt;</snippet></ROW><ROW><id>8726853</id><snippet>LESS_CACHE</snippet></ROW><ROW><id>8726853</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8726853</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>8726853</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8726853</id><snippet>LESS_OUTPUT_DIR</snippet></ROW><ROW><id>8727062</id><snippet>HKCU\Software\Python\PythonCore\X.X\InstallPath</snippet></ROW><ROW><id>8727062</id><snippet>Wow3264Node</snippet></ROW><ROW><id>8727190</id><snippet>self.button1.text = "hello"</snippet></ROW><ROW><id>8727190</id><snippet>self.button1["text"] = "hello"</snippet></ROW><ROW><id>8727190</id><snippet>config</snippet></ROW><ROW><id>8727190</id><snippet>self.button1.config(text="hello")</snippet></ROW><ROW><id>8727190</id><snippet>self.button1 = Button(self.myContainer1, text="hello")</snippet></ROW><ROW><id>8727190</id><snippet>pack</snippet></ROW><ROW><id>8727190</id><snippet>button1.pack()</snippet></ROW><ROW><id>8727190</id><snippet>button1</snippet></ROW><ROW><id>8727314</id><snippet>stats</snippet></ROW><ROW><id>8727314</id><snippet>dbstats</snippet></ROW><ROW><id>8727314</id><snippet>Database.command</snippet></ROW><ROW><id>8727314</id><snippet>&gt; db.stats
function (scale) {
    return this.runCommand({dbstats:1, scale:scale});
}
</snippet></ROW><ROW><id>8727314</id><snippet>Database.command</snippet></ROW><ROW><id>8727314</id><snippet>db.$cmd.find_one</snippet></ROW><ROW><id>8727333</id><snippet>&gt;&gt;&gt; type(A.f)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(A.g)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>8727662</id><snippet>class SetFacade:

def __init__(self, iterable=None):
    if iterable is None: 
         iterable = []
    self.lst = list(iterable)
</snippet></ROW><ROW><id>8727790</id><snippet>fav_colors</snippet></ROW><ROW><id>8727790</id><snippet>@register.filter
def to_json(value):
    return mark_safe(simplejson.dumps(value))
</snippet></ROW><ROW><id>8727790</id><snippet>&lt;option value="{{ c.fav_colors|to_json }}"&gt;
</snippet></ROW><ROW><id>8727921</id><snippet>poll</snippet></ROW><ROW><id>8727921</id><snippet>time.sleep()</snippet></ROW><ROW><id>8727921</id><snippet>poll</snippet></ROW><ROW><id>8727943</id><snippet>sapply(Sys.glob('./Trial7/*.csv'), read.table) -&gt; fsc
</snippet></ROW><ROW><id>8728774</id><snippet>from scipy import sparse [as sp]
</snippet></ROW><ROW><id>8728774</id><snippet>import scipy.sparse [as sp]
</snippet></ROW><ROW><id>8728774</id><snippet>[]</snippet></ROW><ROW><id>8728774</id><snippet>import</snippet></ROW><ROW><id>8728774</id><snippet>import as</snippet></ROW><ROW><id>8728973</id><snippet>__init__.py</snippet></ROW><ROW><id>8728973</id><snippet>.py</snippet></ROW><ROW><id>8728973</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>8728973</id><snippet>import</snippet></ROW><ROW><id>8728973</id><snippet>runTest()</snippet></ROW><ROW><id>8728973</id><snippet>test_*</snippet></ROW><ROW><id>8728973</id><snippet>unittest.main()</snippet></ROW><ROW><id>8728973</id><snippet>TextTestRunner</snippet></ROW><ROW><id>8728973</id><snippet>TextTestResult</snippet></ROW><ROW><id>8728973</id><snippet>stdout</snippet></ROW><ROW><id>8728973</id><snippet>TestSuite      &lt;---executed by--- TestRunner
   + TestCaseA                        |
       +test_a()                      |
       +test_b()             stores test-results 
           ...                      into
       +test_z()                      |
    + TestCaseB                       V
    + TestCaseC                  TestResult
</snippet></ROW><ROW><id>8728973</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>8728973</id><snippet>unittest.defaultTestLoader</snippet></ROW><ROW><id>8728973</id><snippet>suite.addTest(test) / suite.addTests(tests)</snippet></ROW><ROW><id>8728973</id><snippet>tests</snippet></ROW><ROW><id>8728973</id><snippet>TestCases</snippet></ROW><ROW><id>8728973</id><snippet>TestSuites</snippet></ROW><ROW><id>8728973</id><snippet>unittest.TestRunner</snippet></ROW><ROW><id>8728973</id><snippet>unittest.TestResult</snippet></ROW><ROW><id>8728973</id><snippet>unittest.TextTestRunner</snippet></ROW><ROW><id>8728973</id><snippet>def main():
    suite = test_suite()                #1 create a TestSuite object
    runner = unittest.TextTestRunner()  #2 create a TextTestRunner object
    runner.run(suite)                   #3 executes the TestSuite with TestSuite
                                        #  build by the function test_suite()
</snippet></ROW><ROW><id>8728973</id><snippet>python __init__.py</snippet></ROW><ROW><id>8729211</id><snippet>ForeignKey</snippet></ROW><ROW><id>8729211</id><snippet>ManyToManyField</snippet></ROW><ROW><id>8729211</id><snippet>User</snippet></ROW><ROW><id>8729211</id><snippet>User</snippet></ROW><ROW><id>8729211</id><snippet>SomeModel.objects.filter(user=some_user)
# where `user` is the name of your foreign key field
</snippet></ROW><ROW><id>8729211</id><snippet>class SomeModel(models.Model):
    ...
    user = models.ForeignKey(User)

# Later ...

some_user.somemodel_set.all()
</snippet></ROW><ROW><id>8729211</id><snippet>somemodels = request.user.somemodel_set.all()
</snippet></ROW><ROW><id>8729211</id><snippet>SomeModel</snippet></ROW><ROW><id>8729518</id><snippet>SomeMiddleware</snippet></ROW><ROW><id>8729518</id><snippet>SomeMiddleware</snippet></ROW><ROW><id>8729518</id><snippet>settings</snippet></ROW><ROW><id>8729518</id><snippet>os.path.exists()</snippet></ROW><ROW><id>8730102</id><snippet>import subprocess
output = subprocess.check_output(['ssh', 'otherserver', 'python', '/home/log/scripts/script2.py', regex])
</snippet></ROW><ROW><id>8730185</id><snippet>link = td_elem.find('a').text.strip()
text = ''.join(td_elem.itertext()).strip()
text.split(link)[1]
</snippet></ROW><ROW><id>8730185</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8730185</id><snippet>' '.join(map(str, [el.tail for el in td_elem.iterchildren() if el.tail]))
</snippet></ROW><ROW><id>8730185</id><snippet>map</snippet></ROW><ROW><id>8730185</id><snippet>str</snippet></ROW><ROW><id>8730277</id><snippet>The justify function :

def vjust(str,level=5,delim='.',bitsize=6,fillchar=' '):
    """
    1.12 becomes : 1.    12
    1.1  becomes : 1.     1
    """
    nb = str.count(delim)
    if nb &lt; level:
        str += (level-nb) * delim
    return delim.join([ v.rjust(bitsize,fillchar) for v in str.split(delim)[:level+1] ])

The django VersionField :

class VersionField(models.CharField) :

    description = 'Field to store version strings ("a.b.c.d") in a way it is sortable'

    __metaclass__ = models.SubfieldBase

    def get_prep_value(self, value):
        return vjust(value,fillchar=' ')

    def to_python(self, value):
        return re.sub('\.+$','',value.replace(' ',''))
</snippet></ROW><ROW><id>8730397</id><snippet>## Some shared class that is used all over the place and needs to be patched.

class A(object):
    def __init__(self):
        self.firstname = 'Bob'

    # Print my first name.
    def name(self):
        return self.firstname

    # Use this to allow patching arbitrary methods...
    @classmethod
    def patch(cls, func_name):
        def patch_by_name(new_func):
            old_func = getattr(cls, func_name)
            def patched_func(self):
                return new_func(self, old_func)
            setattr(cls, func_name, patched_func)
        return patch_by_name

## Some other area of the code where you want to throw in a patch

class PatchedA(A):  # doesn't need to subclass, but comes in handy sometimes
    @A.patch('name')
    def name(self, orig_func):
        return 'I am ' + orig_func(self) + 'McWizwaz'

print 'Who are you, A class?'
print A().name()  # prints 'I am Bob McWizwaz'
</snippet></ROW><ROW><id>8730606</id><snippet>string.find(row[1], drug)</snippet></ROW><ROW><id>8730606</id><snippet>row[1].find(drug)</snippet></ROW><ROW><id>8730606</id><snippet>.find()</snippet></ROW><ROW><id>8730674</id><snippet>from json import JSONDecoder

def loads_invalid_obj_list(s):
    decoder = JSONDecoder()
    s_len = len(s)

    objs = []
    end = 0
    while end != s_len:
        obj, end = decoder.raw_decode(s, idx=end)
        objs.append(obj)

    return objs
</snippet></ROW><ROW><id>8730674</id><snippet>&gt;&gt;&gt; loads_invalid_obj_list('{}{}')
[{}, {}]

&gt;&gt;&gt; loads_invalid_obj_list('{}{\n}{')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "decode.py", line 9, in loads_invalid_obj_list
    obj, end = decoder.raw_decode(s, idx=end)
  File     "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 376, in raw_decode
    obj, end = self.scan_once(s, idx)
ValueError: Expecting object: line 2 column 2 (char 5)
</snippet></ROW><ROW><id>8730674</id><snippet>import json
import re

#shameless copy paste from json/decoder.py
FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL
WHITESPACE = re.compile(r'[ \t\n\r]*', FLAGS)

class ConcatJSONDecoder(json.JSONDecoder):
    def decode(self, s, _w=WHITESPACE.match):
        s_len = len(s)

        objs = []
        end = 0
        while end != s_len:
            obj, end = self.raw_decode(s, idx=_w(s, end).end())
            end = _w(s, end).end()
            objs.append(obj)
        return objs
</snippet></ROW><ROW><id>8730674</id><snippet>&gt;&gt;&gt; print json.loads('{}', cls=ConcatJSONDecoder)
[{}]

&gt;&gt;&gt; print json.load(open('file'), cls=ConcatJSONDecoder)
[{}]

&gt;&gt;&gt; print json.loads('{}{} {', cls=ConcatJSONDecoder)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py", line 339, in loads
    return cls(encoding=encoding, **kw).decode(s)
  File "decode.py", line 15, in decode
    obj, end = self.raw_decode(s, idx=_w(s, end).end())
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py", line 376, in raw_decode
    obj, end = self.scan_once(s, idx)
ValueError: Expecting object: line 1 column 5 (char 5)
</snippet></ROW><ROW><id>8730820</id><snippet>Repo</snippet></ROW><ROW><id>8730820</id><snippet>from dulwich.repo import Repo
x = Repo("/path/to/git/repo")
</snippet></ROW><ROW><id>8730820</id><snippet>x = Repo.init("/path/to/new/repo")
</snippet></ROW><ROW><id>8730820</id><snippet>from dulwich.patch import write_tree_diff
commit = x[commit_id]
parent_commit = x[commit.parents[0]]
write_tree_diff(sys.stdout, x.object_store, parent_commit.tree, commit.tree)
</snippet></ROW><ROW><id>8730820</id><snippet>from dulwich.client import get_transport_and_path
client, path = get_transport_and_path(remote_url)
remote_refs = client.fetch(path, x)
print x[remote_refs["refs/heads/master"]]
</snippet></ROW><ROW><id>8730994</id><snippet>dict.get</snippet></ROW><ROW><id>8730994</id><snippet>get</snippet></ROW><ROW><id>8730994</id><snippet>some_func(value=some_dict.get('value'))
</snippet></ROW><ROW><id>8731006</id><snippet>inp=input('Enter M/N:')
</snippet></ROW><ROW><id>8731006</id><snippet>input</snippet></ROW><ROW><id>8731006</id><snippet>raw_input</snippet></ROW><ROW><id>8731006</id><snippet>raw_input</snippet></ROW><ROW><id>8731006</id><snippet>streetno = { "1" : "Sachin Tendulkar",
             "2" : "Sehawag",
             "3" : "Dravid",
             "4" : "Dhoni",
             "5" : "Kohli"}

# we create a "reversed" dictionary here that maps
# names to numbers
streetname = dict((y,x) for x,y in streetno.items())

while True:
    inp = raw_input('Enter M/N:')
    if inp == "M" or inp == "m":
        key = raw_input("Enter the main number:")
        # you don't need .get here, a simple [] is probably what you want
        result = streetno[key]
    else:
        key = raw_input("Enter the street name: ")
        # we need to use our reversed map here!
        result = streetname[key]

    # do something with the result (change that to whatever you want
    # to do with it)
    print result
</snippet></ROW><ROW><id>8731032</id><snippet>"\\t".decode("string_escape"))
</snippet></ROW><ROW><id>8731252</id><snippet>In [1]: t = (
   ...:     ('P', 'Shtg1'),
   ...:     ('R', u'Shtg2'),
   ...:     ('D', 'Shtg3'),
   ...: )

In [2]: d = dict(t)

In [3]: d['P']
Out[3]: 'Shtg1'
</snippet></ROW><ROW><id>8731431</id><snippet> triger=0
 while [ $triger -ne 1 ];  do sleep 3;  
       if [ -f NameOfFile ];
       then
       echo "FileFound";
       sh YourScriptToLaunch
       triger=1
       fi
 echo "sleeping ..."
 done
</snippet></ROW><ROW><id>8731476</id><snippet>&amp;</snippet></ROW><ROW><id>8731476</id><snippet>#xxxx;</snippet></ROW><ROW><id>8731476</id><snippet>amp;</snippet></ROW><ROW><id>8731476</id><snippet>&amp;</snippet></ROW><ROW><id>8731476</id><snippet>&amp;</snippet></ROW><ROW><id>8731476</id><snippet>re.sub(r"&amp;(?!#\d{4};|amp;)", "&amp;", your_string)
</snippet></ROW><ROW><id>8731869</id><snippet>print etree.tostring(n).replace('"', "'")</snippet></ROW><ROW><id>8732127</id><snippet>import numpy as np
import MySQLdb
import matplotlib.pyplot as plt # This is meant for scripts
# import pylab as pl # This is meant for interactive sessions; 
import operator

conn = MySQLdb.connect(
    host="localhost",
    user="root",
    passwd="root",
    db="myproject")

with conn:
    cur = conn.cursor()

    #will fetch all recoreds called monoiso field
    cur.execute("SELECT monoiso FROM pmass_selectedion")
    rows = cur.fetchall()

monoisos = [row[0] for row in rows]

# Make a histogram of `monoisos` with 50 bins.
n, bins, histpatches = plt.hist(monoisos, 50, facecolor = 'green')
plt.show()
</snippet></ROW><ROW><id>8732127</id><snippet>momoisos = [row[0] for row in rows]
hist, bin_edges = np.histogram(monoisos, bins = 50)
mid = (bin_edges[1:] + bin_edges[:-1])/2
plt.plot(mid, hist, 'o')
plt.show()
</snippet></ROW><ROW><id>8732127</id><snippet>matplotlib.pylab</snippet></ROW><ROW><id>8732258</id><snippet>&lt;Nodes&gt;
    &lt;!-- User added data goes here --&gt;
    &lt;Node name="1"&gt;Data Data Data&lt;/Node&gt;
    &lt;Node name="2"&gt;Data Data Data&lt;/Node&gt;
    &lt;Node name="3"&gt;Data Data Data&lt;/Node&gt;

    &lt;!-- User, do not modify nodes below this line. --&gt;
    &lt;Node name="4" from="autogenerated"&gt;Data Data Data&lt;/Node&gt;
    &lt;Node name="5" from="autogenerated"&gt;Data Data Data&lt;/Node&gt;
    &lt;Node name="6" from="autogenerated"&gt;Data Data Data&lt;/Node&gt;
&lt;/Nodes&gt;
</snippet></ROW><ROW><id>8732258</id><snippet>from="autogenerated"</snippet></ROW><ROW><id>8732258</id><snippet>&lt;Node&gt;</snippet></ROW><ROW><id>8732258</id><snippet>xmldoc = minidom.parse(filename)
nodes = xmldoc.documentElement.childNodes
commentIdx = next(i for i,n in enumerate(nodes) if
                n.nodeType == n.COMMENT_ELEMENT and n.data == ' AUTOMATEDSTUFF ')
automatedNodes = nodes[commentIdx+1:]
print(automatedNodes) # or do something else with them
</snippet></ROW><ROW><id>8732295</id><snippet>'int' &lt; 'str'</snippet></ROW><ROW><id>8732295</id><snippet>&gt;&gt;&gt; '10' &gt; 100
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: str() &gt; int()
&gt;&gt;&gt; 100 &lt; '10'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; str()
</snippet></ROW><ROW><id>8732397</id><snippet>(r'^sum/(?P&lt;allargs&gt;[/0-9]+)$', 'views.sum')
</snippet></ROW><ROW><id>8732397</id><snippet>def sum(request, allargs):
    args = map( int, allargs.split('/') )
    # Compute sum
</snippet></ROW><ROW><id>8732594</id><snippet>dict = {1:[...],3:[...], ....}
</snippet></ROW><ROW><id>8732594</id><snippet>dict[key].append(vals)
dict[key].sort()
</snippet></ROW><ROW><id>8733599</id><snippet>mx.max(axis=1)</snippet></ROW><ROW><id>8733599</id><snippet>mx.max(axis=1)[2:]
</snippet></ROW><ROW><id>8733599</id><snippet>In [38]: mx = np.arange(60).reshape((10, 6))

In [39]: mx
Out[39]: 
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35],
       [36, 37, 38, 39, 40, 41],
       [42, 43, 44, 45, 46, 47],
       [48, 49, 50, 51, 52, 53],
       [54, 55, 56, 57, 58, 59]])
</snippet></ROW><ROW><id>8733599</id><snippet>In [40]: mx.max(axis=1)[2:]
Out[40]: array([17, 23, 29, 35, 41, 47, 53, 59])
</snippet></ROW><ROW><id>8733599</id><snippet>mx = np.random.randn(10, 6)</snippet></ROW><ROW><id>8734046</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(range(2), repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
&gt;&gt;&gt; all((a &amp; b | c) == ((a &amp; b) | c) for a, b, c in product(range(2), repeat=3))
True
&gt;&gt;&gt; all((a &amp; b | c) == (a &amp; (b | c)) for a, b, c in product(range(2), repeat=3))
False
</snippet></ROW><ROW><id>8734450</id><snippet>NessusXMLRPC.py</snippet></ROW><ROW><id>8734485</id><snippet>$obj-&gt;foo</snippet></ROW><ROW><id>8734485</id><snippet>$obj['foo']</snippet></ROW><ROW><id>8734485</id><snippet> 1  &lt;?php
 2  class Magic implements ArrayAccess {
 3  
 4      protected $items = array();
 5  
 6      public function offsetExists($key) {
 7          return isset($this-&gt;items[$key]);
 8      }
 9      public function offsetGet($key) {
10          return $this-&gt;items[$key];
11      }
12      public function offsetSet($key, $value) {
13          $this-&gt;items[$key] = $value;
14      }
15      public function offsetUnset($key) {
16          unset($this-&gt;items[$key]);
17      }
18  
19      //do not modify below, this makes sure we have a consistent
20      //implementation only by using ArrayAccess-specific methods
21      public function __get($key) {
22          return $this-&gt;offsetGet($key);
23      }
24      public function __set($key, $value) {
25          $this-&gt;offsetSet($key, $value);
26      }
27      public function __isset($key) {
28          return $this-&gt;offsetExists($key);
29      }
30      public function __unset($key) {
31          $this-&gt;offsetUnset($key);
32      }
33  }
34  
35  //demonstrate the rountrip of magic
36  $foo = new Magic;
37  $foo['bar'] = 42;
38  echo $foo-&gt;bar, PHP_EOL;//output 42
39  $foo-&gt;bar++;
40  echo $foo['bar'];//output 43
41  
</snippet></ROW><ROW><id>8734596</id><snippet>win32api.LoadKeyboardLayout('00000409',1) # to switch to english
win32api.LoadKeyboardLayout('00000401',1) # to switch to arabic
</snippet></ROW><ROW><id>8734618</id><snippet>application: mygaeid
version: 1
runtime: python
api_version: 1

handlers:
- url: /(.*\.html)
  static_files: static/htmdir/\1
  upload: static/htmdir/.*\.html

- url: /css
  static_dir: css

- url: /js
  static_dir: js

- url: /images
  static_dir: images

- url: /
  static_files: static/htmdir/apples.html
  upload: static/htmdir/apples\.html
</snippet></ROW><ROW><id>8734798</id><snippet>BadStatusLine</snippet></ROW><ROW><id>8734798</id><snippet>urllib2.urlopen(url)</snippet></ROW><ROW><id>8734798</id><snippet>url</snippet></ROW><ROW><id>8734798</id><snippet>from httplib import BadStatusLine

try:
    page = urllib2.urlopen(url)
    # do something with page
except BadStatusLine:
    print "could not fetch %s" % url
</snippet></ROW><ROW><id>8734821</id><snippet>Meta</snippet></ROW><ROW><id>8734971</id><snippet>import urllib2
opener = urllib2.build_opener()
opener.addheaders.append(('Cookie', 'cookiename=cookievalue'))
f = opener.open("http://example.com/")
</snippet></ROW><ROW><id>8735346</id><snippet>HTTPForbidden</snippet></ROW><ROW><id>8735346</id><snippet>UnencryptedCookieSessionFactoryConfig</snippet></ROW><ROW><id>8735346</id><snippet>cookie_max_age</snippet></ROW><ROW><id>8735346</id><snippet>response.set_cookie()</snippet></ROW><ROW><id>8735346</id><snippet>request.response</snippet></ROW><ROW><id>8735370</id><snippet>os.listdir</snippet></ROW><ROW><id>8735370</id><snippet>import os
basedir = 'C:/Test'
for fn in os.listdir(basedir):
  if not os.path.isdir(os.path.join(basedir, fn)):
    continue # Not a directory
  if ',' in fn:
    continue # Already in the correct form
  if ' ' not in fn:
    continue # Invalid format
  firstname,_,surname = fn.rpartition(' ')
  os.rename(os.path.join(basedir, fn),
            os.path.join(basedir, surname + ', ' + firstname))
</snippet></ROW><ROW><id>8735509</id><snippet>Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
</snippet></ROW><ROW><id>8735509</id><snippet>def valid_XML_char_ordinal(i):
    return ( # conditions ordered by presumed frequency
        0x20 &lt;= i &lt;= 0xD7FF 
        or i in (0x9, 0xA, 0xD)
        or 0xE000 &lt;= i &lt;= 0xFFFD
        or 0x10000 &lt;= i &lt;= 0x10FFFF
        )
</snippet></ROW><ROW><id>8735509</id><snippet>cleaned_string = ''.join(
    c for c in input_string if valid_XML_char_ordinal(ord(c))
    )
</snippet></ROW><ROW><id>8735651</id><snippet>**</snippet></ROW><ROW><id>8735651</id><snippet>def findArticleWithAttr(tableattrib, user_url_input):
    articles = Something.objects.filter(**{tableattrib : user_url_input}) 
</snippet></ROW><ROW><id>8735651</id><snippet>**</snippet></ROW><ROW><id>8735651</id><snippet>func(**{'foo' : 'bar'})
</snippet></ROW><ROW><id>8735651</id><snippet>func(foo = 'bar')
</snippet></ROW><ROW><id>8735688</id><snippet>&lt;/h3&gt;</snippet></ROW><ROW><id>8735688</id><snippet>&lt;h3&gt;</snippet></ROW><ROW><id>8735688</id><snippet>from itertools import takewhile

h3s = soup('h3') # find all &lt;h3&gt; elements
for h3, h3next in zip(h3s, h3s[1:]):
  # get elements in between
  between_it = takewhile(lambda el: el is not h3next, h3.nextSiblingGenerator())
  # extract text
  print(''.join(getattr(el, 'text', el) for el in between_it))
</snippet></ROW><ROW><id>8735688</id><snippet>&lt;h3&gt;</snippet></ROW><ROW><id>8735688</id><snippet>h3.nextGenerator()</snippet></ROW><ROW><id>8735688</id><snippet>h3.nextSiblingGenerator()</snippet></ROW><ROW><id>8735810</id><snippet>def filter_to_string(value):
    if value is None:
        return ''
    return str(value)
</snippet></ROW><ROW><id>8735810</id><snippet>&gt;&gt;&gt; "&lt;html&gt;\n&lt;body&gt;\n" + \
    filter_to_string(ns['none']) + " should be ''\n" + \
    filter_to_string(ns['number']) + " should be '1'\n&lt;/body&gt;\n&lt;/html&gt;\n"
"&lt;html&gt;\n&lt;body&gt;\n should be ''\n1 should be '1'\n&lt;/body&gt;\n&lt;/html&gt;\n"
</snippet></ROW><ROW><id>8735810</id><snippet>ns</snippet></ROW><ROW><id>8735894</id><snippet>raw_input()</snippet></ROW><ROW><id>8735894</id><snippet>&gt;&gt;&gt; 'first@google.com,second@google.com,third@google.com'.split(',')
['first@google.com', 'second@google.com', 'third@google.com']
</snippet></ROW><ROW><id>8735894</id><snippet>mailinputs = raw_input('Enter all mails with comma: ')
receivers = mailinputs.split(',')
</snippet></ROW><ROW><id>8735894</id><snippet>mailinputs = raw_input('Enter all mails with comma: ')
receivers = [x.strip() for x in mailinputs.split(',')]
</snippet></ROW><ROW><id>8735896</id><snippet>b &lt;- lapply(Sys.glob('Trial7/*.csv'), function(file) {
    e &lt;- read.table(file)
    data.frame(as.Date(e$V1, "%d.%m.%Y"), e$V2)
})

png('./Pictures/compare2.png')
plot(b[[1]], type='l', ylim=range(b[[1]][[2]],b[[2]][[2]]))
lines(b[[2]])
</snippet></ROW><ROW><id>8735903</id><snippet>$ python manage.py shell
&gt;&gt;&gt; from my_app.models import Test
&gt;&gt;&gt; for obj in Test.objects.all():
&gt;&gt;&gt;     obj.save()
</snippet></ROW><ROW><id>8735903</id><snippet>auto_now</snippet></ROW><ROW><id>8735903</id><snippet>auto_now</snippet></ROW><ROW><id>8735903</id><snippet>auto_now_add</snippet></ROW><ROW><id>8735903</id><snippet>save()</snippet></ROW><ROW><id>8736388</id><snippet>&gt;&gt;&gt; s='auszuschließen…'
&gt;&gt;&gt; s
'auszuschließen…'
&gt;&gt;&gt; print(s)
auszuschließen…
&gt;&gt;&gt; b=s.encode('ascii','xmlcharrefreplace')
&gt;&gt;&gt; b
b'auszuschließen…'
&gt;&gt;&gt; print(b)
b'auszuschließen…'
&gt;&gt;&gt; b.decode()
'auszuschließen…'
&gt;&gt;&gt; print(b.decode())
auszuschließen…
</snippet></ROW><ROW><id>8736388</id><snippet>ascii</snippet></ROW><ROW><id>8736388</id><snippet>bytes</snippet></ROW><ROW><id>8736388</id><snippet>b</snippet></ROW><ROW><id>8736388</id><snippet>decode</snippet></ROW><ROW><id>8736388</id><snippet>utf-8</snippet></ROW><ROW><id>8736388</id><snippet>bytes</snippet></ROW><ROW><id>8736388</id><snippet>ascii</snippet></ROW><ROW><id>8736388</id><snippet>utf-8</snippet></ROW><ROW><id>8737226</id><snippet>-tt</snippet></ROW><ROW><id>8737374</id><snippet>persons = Person.all()

for p in persons:
    p.delete()
</snippet></ROW><ROW><id>8737374</id><snippet>BadValueError: Property y must be a str or unicode instance, not a long</snippet></ROW><ROW><id>8737384</id><snippet>captain2.py</snippet></ROW><ROW><id>8737384</id><snippet>from twisted.internet import reactor
</snippet></ROW><ROW><id>8737384</id><snippet>reactor</snippet></ROW><ROW><id>8737384</id><snippet>from twisted.internet import default
</snippet></ROW><ROW><id>8737384</id><snippet>selectreactor.py</snippet></ROW><ROW><id>8737384</id><snippet>from zope.interface import implements
</snippet></ROW><ROW><id>8737384</id><snippet>zope.interface</snippet></ROW><ROW><id>8737536</id><snippet>run</snippet></ROW><ROW><id>8737536</id><snippet>while</snippet></ROW><ROW><id>8737536</id><snippet>queue = Queue.Queue()
out_queue = Queue.Queue()

class ThreadUrl(threading.Thread):
    ...
    def run(self):
        while True:
            #grabs host from queue
            host = self.queue.get()

            #grabs urls of hosts and saves first 1024 bytes of page
            url = urllib2.urlopen(host)
            out_queue.put(url.read(1024))

            #signals to queue job is done
            self.queue.task_done()

...

def main():
    ...
    #populate queue with data   
    for host in hosts:
        queue.put(host)

    #don't have to wait until everything has been processed if we don't want to

    for _ in range(len(hosts)):
        first_1k = out_queue.get()
        print first_1k
</snippet></ROW><ROW><id>8737536</id><snippet>class WorkItem(object):
    def __init__(self, host):
        self.host = host

class ThreadUrl(threading.Thread):
    ...
    def run(self):
        while True:
            #grabs host from queue
            work_item = self.queue.get()
            host = work_item.host

            #grabs urls of hosts and saves first 1024 bytes of page
            url = urllib2.urlopen(host)
            work_item.first_1k = url.read(1024)

            #signals to queue job is done
            self.queue.task_done()

...

def main():
    ...
    #populate queue with data   
    work_items = [WorkItem(host) for host in hosts]
    for item in work_items:
        queue.put(item)

    #wait on the queue until everything has been processed     
    queue.join()

    for item in work_items:
        print item.first_1k
</snippet></ROW><ROW><id>8737753</id><snippet>request.args</snippet></ROW><ROW><id>8737753</id><snippet>request.form</snippet></ROW><ROW><id>8737753</id><snippet>request.values</snippet></ROW><ROW><id>8737753</id><snippet>@app.route('/search/&lt;location&gt;')
def search(location=None):
    location = location or request.args.get('location')
    # perform search
</snippet></ROW><ROW><id>8737753</id><snippet>def _search(location=None,other_param=None):
    # perform search

@app.route('/search')
def search_custom():
    location = request.args.get('location')
    # ... get other params too ...
    return _search(location=location, other params ... )

@app.route('/search/&lt;location&gt;')
def search_location(location):
    return _search(location=location)
</snippet></ROW><ROW><id>8738477</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>8738477</id><snippet>ValueError</snippet></ROW><ROW><id>8738477</id><snippet>&gt;&gt;&gt; ast.literal_eval('{"foo": [23.8, 170, (1, 2, 3)]}')
{'foo': [23.8, 170, (1, 2, 3)]}
</snippet></ROW><ROW><id>8738553</id><snippet>&gt;&gt;&gt; a = u'Le bébé (de 4 ans) a également un étrange "rire"'
&gt;&gt;&gt; r = unicodedata.normalize('NFKD',a).encode('cp1256','ignore')
&gt;&gt;&gt; r = unicode(re.sub('[^\w\s-]','',r).strip().lower())
&gt;&gt;&gt; r = re.sub('[-\s]+','-',r)
&gt;&gt;&gt; print r
le-bebe-de-4-ans-a-egalement-un-etrange-rire
</snippet></ROW><ROW><id>8738574</id><snippet>schemamigration</snippet></ROW><ROW><id>8738574</id><snippet>migrate --fake</snippet></ROW><ROW><id>8738574</id><snippet>python manage.py migrate --no-initial-data
</snippet></ROW><ROW><id>8738605</id><snippet>From</snippet></ROW><ROW><id>8738605</id><snippet>message = """From: From Postmaster &lt;%s&gt;
To: To Person &lt;%s&gt;
MIME-Version: 1.0
Content-type: text/html
Subject: blahblah

&lt;b&gt;This is HTML message.&lt;/b&gt;
&lt;h1&gt;The following email addresses have been removed&lt;/h1&gt;
%s
""" %(self.sender,self.receivers,remove)
</snippet></ROW><ROW><id>8738605</id><snippet>email</snippet></ROW><ROW><id>8738605</id><snippet>import email.mime.text

message = """
&lt;b&gt;This is HTML message.&lt;/b&gt;
&lt;h1&gt;The following email addresses have been removed&lt;/h1&gt;
%s
""" % remove
message = email.mime.text.MIMEText(message, 'html')
message['From'] = 'From Postmaster &lt;%s&gt;' % sender
message['To'] = 'To Person &lt;%s&gt;' % receivers[0]
message['Subject'] = 'blahblah'
</snippet></ROW><ROW><id>8738649</id><snippet>not 'ham' in 'spam and eggs'</snippet></ROW><ROW><id>8738649</id><snippet>&gt;&gt;&gt; import dis

&gt;&gt;&gt; def notin():
    'ham' not in 'spam and eggs'
&gt;&gt;&gt; dis.dis(notin)
  2           0 LOAD_CONST               1 ('ham')
              3 LOAD_CONST               2 ('spam and eggs')
              6 COMPARE_OP               7 (not in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE    

&gt;&gt;&gt; def not_in():
    not 'ham' in 'spam and eggs'
&gt;&gt;&gt; dis.dis(not_in)
  2           0 LOAD_CONST               1 ('ham')
              3 LOAD_CONST               2 ('spam and eggs')
              6 COMPARE_OP               7 (not in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE    

&gt;&gt;&gt; def not__in():
    not ('ham' in 'spam and eggs')
&gt;&gt;&gt; dis.dis(not__in)
  2           0 LOAD_CONST               1 ('ham')
              3 LOAD_CONST               2 ('spam and eggs')
              6 COMPARE_OP               7 (not in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        

&gt;&gt;&gt; def noteq():
    not 'ham' == 'spam and eggs'
&gt;&gt;&gt; dis.dis(noteq)
  2           0 LOAD_CONST               1 ('ham')
              3 LOAD_CONST               2 ('spam and eggs')
              6 COMPARE_OP               2 (==)
              9 UNARY_NOT           
             10 POP_TOP             
             11 LOAD_CONST               0 (None)
             14 RETURN_VALUE      
</snippet></ROW><ROW><id>8738649</id><snippet>not</snippet></ROW><ROW><id>8738649</id><snippet>a in b</snippet></ROW><ROW><id>8738649</id><snippet>not in</snippet></ROW><ROW><id>8738649</id><snippet>not</snippet></ROW><ROW><id>8738649</id><snippet>not a in b</snippet></ROW><ROW><id>8738649</id><snippet>not a in b</snippet></ROW><ROW><id>8738649</id><snippet>a not in b</snippet></ROW><ROW><id>8738975</id><snippet>lxml</snippet></ROW><ROW><id>8738975</id><snippet>title</snippet></ROW><ROW><id>8738975</id><snippet>import lxml
from lxml import etree
youtube = etree.HTML(urllib.urlopen("http://www.youtube.com/watch?v=KQEOBZLx-Z8").read()) //enter your youtube url here
video_title = youtube.xpath("//span[@id='eow-title']/@title") //get xpath using firepath firefox addon
print ''.join(video_title)
</snippet></ROW><ROW><id>8739096</id><snippet>os.system("mkdir /.pdf")
</snippet></ROW><ROW><id>8739096</id><snippet>s.system("gs -q -dSAFER  -sDEVICE=png16m -r500 -dBATCH -dNOPAUSE  -dFirstPage=%d -dLastPage=%d -sOutputFile=/xx.png %s" %(i,i,self.id,i,pdfname))
</snippet></ROW><ROW><id>8739282</id><snippet>s = ["a1","a2","a1","a3","a2"]
duplicates = [x for x in s if s.count(x) &gt; 1]
myl = list(set(duplicates))
print myl
</snippet></ROW><ROW><id>8739282</id><snippet>['a1', 'a2']</snippet></ROW><ROW><id>8739526</id><snippet>from scipy.optimize import fsolve
import math

def equations(p):
    x, y = p
    return (x+y**2-4, math.exp(x) + x*y - 3)

x, y =  fsolve(equations, (1, 1))

print equations((x, y))
</snippet></ROW><ROW><id>8740034</id><snippet>treeview.freeze_child_notify()
treeview.set_model(None)

# Add rows to the model
# ...

treeview.set_model(model)
treeview.thaw_child_notify()
</snippet></ROW><ROW><id>8740122</id><snippet>lst = ['abc34','def987','ghij','klmno','pqrstuvwxyz1234567','98765','43','210abc']
idx, maxLenStr = max(enumerate(lst), key=lambda x:len(x[1]))
sublist = lst[:idx]
</snippet></ROW><ROW><id>8740122</id><snippet>max()</snippet></ROW><ROW><id>8740122</id><snippet>index()</snippet></ROW><ROW><id>8740122</id><snippet>maxLenStr</snippet></ROW><ROW><id>8740122</id><snippet>idx</snippet></ROW><ROW><id>8740161</id><snippet>datetime</snippet></ROW><ROW><id>8740161</id><snippet>import datetime

class Eastern(datetime.tzinfo):

    def utcoffset(self, dt):
      return datetime.timedelta(hours=-5)

    def tzname(self, dt): 
        return "EST"

    def dst(self, dt):
        return datetime.timedelta(0)


EST = Eastern()
</snippet></ROW><ROW><id>8740161</id><snippet># Get now for EST
now = datetime.datetime.now(EST)
print now.strftime('%Y-%m-%d %H:%M:%S')

from pymongo import Connection
# Create a timezone aware connection
connection = Connection('localhost', 27017, tz_aware=True)

# Save your data
db = connection.test_database
db.stackoverflow.save({"Type": "reports", "patId": 'JOHNSONGARY', "lastUpdated": now})

doc = db.stackoverflow.find()[0]
print doc['lastUpdated'].astimezone(EST).strftime('%Y-%m-%d %H:%M:%S')

# Confirm they are the same
assert doc['lastUpdated'].astimezone(EST).strftime('%Y-%m-%d %H:%M:%S') == now.strftime('%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>8740250</id><snippet>if not processed_data.file exists:
   my_data = process_raw_data()
else:
   my_data = read_data_from_file(processed_data.file)

plot(my_data)
</snippet></ROW><ROW><id>8740426</id><snippet>body="%7B%22type%22%3A%22change%22%2C%22url%22%3A%22http%3A%2F%2Fapi.pachube.com%2Fv2%2Ftriggers%2F4100%22%2C%22environment%22%3A%7B%22feed%22%3A%22http%3A%2F%2Fapi.pachube.com%2Fv2%2Ffeeds%2F36133%22%2C%22title%22%3A%22Current+Cost+Bridge%22%2C%22description%22%3Anull%2C%22id%22%3A36133%7D%2C%22threshold_value%22%3Anull%2C%22timestamp%22%3A%222012-01-05T09%3A27%3A01Z%22%2C%22triggering_datastream%22%3A%7B%22url%22%3A%22http%3A%2F%2Fapi.pachube.com%2Fv2%2Ffeeds%2F36133%2Fdatastreams%2F1%22%2C%22value%22%3A%7B%22value%22%3A%22523%22%2C%22max_value%22%3A1269.0%2C%22min_value%22%3A0.0%7D%2C%22id%22%3A%221%22%2C%22units%22%3A%7B%22symbol%22%3A%22W%22%2C%22type%22%3A%22derivedUnits%22%2C%22label%22%3A%22watts%22%7D%7D%2C%22id%22%3A4100%7D"
import urlib
unquoted = urllib.unquote(body)
</snippet></ROW><ROW><id>8740426</id><snippet>import json
pythonDict = json.loads(unquoted)
</snippet></ROW><ROW><id>8740546</id><snippet>countries_dict = dict(COUNTRIES)  # Conversion to a dictionary mapping
print countries_dict['AS']
</snippet></ROW><ROW><id>8741529</id><snippet>seek()</snippet></ROW><ROW><id>8741529</id><snippet>read()</snippet></ROW><ROW><id>8741538</id><snippet>rstrip</snippet></ROW><ROW><id>8741538</id><snippet>.py</snippet></ROW><ROW><id>8741538</id><snippet>y.py</snippet></ROW><ROW><id>8741538</id><snippet>y.p</snippet></ROW><ROW><id>8741884</id><snippet>In [100]: a=np.arange(6)

In [101]: ind=[2,3]

In [102]: cind=(a==a)

In [103]: cind[ind]=False

In [104]: a[cind]
Out[104]: array([0, 1, 4, 5])
</snippet></ROW><ROW><id>8741921</id><snippet>True</snippet></ROW><ROW><id>8741921</id><snippet>0</snippet></ROW><ROW><id>8741921</id><snippet>False</snippet></ROW><ROW><id>8741921</id><snippet>--number</snippet></ROW><ROW><id>8741921</id><snippet>None</snippet></ROW><ROW><id>8741921</id><snippet>if options.number is not None:
</snippet></ROW><ROW><id>8741974</id><snippet>select statements 
from X
where length (statements) &lt; 13
</snippet></ROW><ROW><id>8742107</id><snippet>import lxml
from lxml import etree
source_xml = " path to your xml file"
et = etree.parse(source_xml)
value = et.xpath("//document/request/pair[name='q']/value/text()")
print " ".join(value) 
</snippet></ROW><ROW><id>8742107</id><snippet>'LOL LOL2'</snippet></ROW><ROW><id>8742117</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; exp = re.compile('(\w+\.\w+)|(\w+,\s?\w+)')
&gt;&gt;&gt; map(exp.findall, abc)
[[('', 'adams, brian')], [('', 'smith, will')], [('j.smith', '')], [], [], []]
</snippet></ROW><ROW><id>8742117</id><snippet>&gt;&gt;&gt; r = map(exp.findall, abc)
&gt;&gt;&gt; filter(None, sum(sum(r, []), ()))
('adams, brian', 'smith, will', 'j.smith')
</snippet></ROW><ROW><id>8742384</id><snippet>&gt;&gt;&gt; cProfile.run('solution1(lst)')
         5 function calls in 0.000 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;pyshell#305&gt;:1(solution1)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {max}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}


&gt;&gt;&gt; cProfile.run('solution2(lst)')
         2004 function calls in 0.012 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.012    0.012 &lt;pyshell#306&gt;:1(solution2)
     1000    0.006    0.000    0.009    0.000 &lt;pyshell#306&gt;:2(&lt;lambda&gt;)
        1    0.000    0.000    0.012    0.012 &lt;string&gt;:1(&lt;module&gt;)
     1000    0.003    0.000    0.003    0.000 {len}
        1    0.003    0.003    0.012    0.012 {max}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>8742550</id><snippet>m1 = M1.objects.filter(title__istartswith=q)
m2 = M2.objects.filter(title__istartswith=q)
results = [x.title for x in m1] + [x.title for x in m2]
</snippet></ROW><ROW><id>8742776</id><snippet>from collections import Counter
import re

Counter(re.findall(r"\w+", text))
</snippet></ROW><ROW><id>8742776</id><snippet>Counter(w.lower() for w in re.findall(r"\w+", text))
</snippet></ROW><ROW><id>8742776</id><snippet>defaultdict</snippet></ROW><ROW><id>8742776</id><snippet>Counter</snippet></ROW><ROW><id>8742776</id><snippet>freq = defaultdict(int)
for w in re.findall(r"\w+", text):
    freq[w.lower()] += 1
</snippet></ROW><ROW><id>8743157</id><snippet>a,b,c  =  [ 1 if i&gt;1 else i for i in [ a, b, c ] ]
a,b,c = map( lambda x: 1 if x&gt;1 else x, [a,b,c] ) #lambda or name of some function
</snippet></ROW><ROW><id>8743226</id><snippet>matrix.dim</snippet></ROW><ROW><id>8743226</id><snippet>from sage.matrix.matrix import is_Matrix
from sage.structure.element import is_Vector

def myfunction(x):
    if is_Vector(x):
        # do something
    elif is_Matrix(x):
        # do something else
    else:
        raise TypeError("The argument must be vector or matrix")
</snippet></ROW><ROW><id>8743724</id><snippet>import numpy as np
np.random.seed(0)

n,m,k = 2,3,5
A = np.arange(n*m*k,0,-1).reshape((n,m,k))
print(A)
# [[[30 29 28 27 26]
#   [25 24 23 22 21]
#   [20 19 18 17 16]]

#  [[15 14 13 12 11]
#   [10  9  8  7  6]
#   [ 5  4  3  2  1]]]

B = np.random.randint(k, size=(n,m))
print(B)
# [[4 0 3]
#  [3 3 1]]
</snippet></ROW><ROW><id>8743724</id><snippet>print(A.reshape(-1, k)[np.arange(n * m), B.ravel()])
# [26 25 17 12  7  4]
</snippet></ROW><ROW><id>8743724</id><snippet>nxm</snippet></ROW><ROW><id>8743724</id><snippet>i,j = np.ogrid[0:n, 0:m]
print(A[i, j, B])
# [[26 25 17]
#  [12  7  4]]
</snippet></ROW><ROW><id>8743882</id><snippet>hostname = 'host'
servername = 'server'
commandargs = [
    '/usr/sbin/mminfo',
    '-o', 'n', # these are separate arguments, but on the same line for clarity's sake
    '-s', servername, # same here
    '-q', "client='%s',savetime&gt;=last day" % hostname, # same here...
    '-r', 'client,name' # and here.
]
process = subprocess.Popen(commandargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>8743882</id><snippet>import subprocess

client_name = "lxds05"
server_name = "nsr_srv"

queryspec = "client='%s',savetime&gt;=last day" % client_name
reportspec = "client,name,savetime(17),nsavetime,level,ssflags"

args = [
    '/usr/sbin/mminfo',
    '-o', 'n',
    '-s', server_name,
    '-q', queryspec,
    '-r', reportspec,
    '-x', 'c'
]

subprocess.Popen(args) # ... etc
</snippet></ROW><ROW><id>8744091</id><snippet>with open('crap3.txt') as inData:
    for line in inData:
        line = line.strip()
        name, year = line.split('\t', 1)
        print(year)
</snippet></ROW><ROW><id>8744091</id><snippet>with</snippet></ROW><ROW><id>8744133</id><snippet>b = a[:]
</snippet></ROW><ROW><id>8744590</id><snippet>def vScale(xmax):
    return ((xmax-1)/250+1)*250
</snippet></ROW><ROW><id>8744590</id><snippet>[(x,vScale(x)) for x in xrange(0,1200,50)]
</snippet></ROW><ROW><id>8744590</id><snippet>[(0, 0), (50, 250), (100, 250), (150, 250), (200, 250), (250, 250), (300, 500), (350, 500), (400, 500), (450, 500), (500, 500), (550, 750), (600, 750), (650, 750), (700, 750), (750, 750), (800, 1000), (850, 1000), (900, 1000), (950, 1000), (1000, 1000), (1050, 1250), (1100, 1250), (1150, 1250)]</snippet></ROW><ROW><id>8744590</id><snippet>limits=[0,250,500,750,1000]
ymax=limits[bisect.bisect_right(limits,xmax-1)]
</snippet></ROW><ROW><id>8744590</id><snippet>def vScale(xmax):
    return [250,500,750,1000][(xmax-1)/250]
</snippet></ROW><ROW><id>8744633</id><snippet>import itertools

# collect all the names involved
names = itertools.chain.from_iterables(f.values() for f in friendships)
query = 'SELECT name, id FROM People WHERE name in (%s)' \
             % ','.join(mysql_escape(n) for n in names)
</snippet></ROW><ROW><id>8744633</id><snippet>mysql_escape</snippet></ROW><ROW><id>8744633</id><snippet># will contain a map from names to IDs
name_to_id = dict((row["name"], row["id"]) for row in rows)
</snippet></ROW><ROW><id>8744633</id><snippet>friendship_ids</snippet></ROW><ROW><id>8744633</id><snippet>friendship_ids = [{'id1': name_to_id[f['name1']], 'id2': name_to_id[f['name2']]}
                  for f in friendships]
</snippet></ROW><ROW><id>8745104</id><snippet>append</snippet></ROW><ROW><id>8745104</id><snippet>extend</snippet></ROW><ROW><id>8745104</id><snippet>--param1=123</snippet></ROW><ROW><id>8745104</id><snippet>import subprocess
import os.path

PYTHON_BIN_DIR = '/usr/bin/python'
SCRIPTS_DIR = '/some/path'


if __name__ == "__main__":
    dateparam = "05-Jan-2012"
    command = [PYTHON_BIN_DIR, os.path.join(SCRIPTS_DIR, 'myfile1.py'),
               '--param1', 123, '--date', dateparam]

    retcode = subprocess.call(command)

    if retcode != 0:
        # do something
        pass
    else:
        # do something else
        pass
</snippet></ROW><ROW><id>8745185</id><snippet>allfiles = filter(lambda x: x.startswith('n'), allfiles)
</snippet></ROW><ROW><id>8745610</id><snippet>prefix</snippet></ROW><ROW><id>8745610</id><snippet>dir</snippet></ROW><ROW><id>8745610</id><snippet>os.path.split</snippet></ROW><ROW><id>8745610</id><snippet>import tempfile
import os
dirname, basename = os.path.split(filename)
temp = tempfile.NamedTemporaryFile(prefix = basename, dir = dirname)
print(temp.name)
</snippet></ROW><ROW><id>8745869</id><snippet>#       WCHAR   ReparseTarget[1];
</snippet></ROW><ROW><id>8745871</id><snippet>In [6]: import re

In [7]: re.findall(r'(?&lt;!\.\s)\b[A-Z][a-z]*\b', 'lookbehind. This is what I have')
Out[7]: ['I']
</snippet></ROW><ROW><id>8745871</id><snippet>r'...'</snippet></ROW><ROW><id>8746097</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8746097</id><snippet>STATIC_URL</snippet></ROW><ROW><id>8746097</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>8746097</id><snippet>collectstatic</snippet></ROW><ROW><id>8746097</id><snippet>static</snippet></ROW><ROW><id>8746097</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>8746097</id><snippet>static</snippet></ROW><ROW><id>8746097</id><snippet>collectstatic</snippet></ROW><ROW><id>8746097</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8746097</id><snippet>static</snippet></ROW><ROW><id>8746097</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8746156</id><snippet>return HTTPFound(location='foo', headers=response.headers)</snippet></ROW><ROW><id>8746266</id><snippet>Alias</snippet></ROW><ROW><id>8746266</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>8746266</id><snippet>Alias /static [project-path]/static
Alias /media [project-path]/media
&lt;Directory [project-path]/static&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;
&lt;Directory [project-path]/media&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>8746266</id><snippet>./manage collectstatic</snippet></ROW><ROW><id>8746558</id><snippet>Map(`*`, 0:2, c(1, 11, 111))
</snippet></ROW><ROW><id>8746558</id><snippet>unlist(Map(`*`, 0:2, c(1, 11, 111)))
</snippet></ROW><ROW><id>8746558</id><snippet>Map(function(x, y) x*y, 0:2, c(1, 11, 111))
</snippet></ROW><ROW><id>8746558</id><snippet>Map</snippet></ROW><ROW><id>8746558</id><snippet>mapply</snippet></ROW><ROW><id>8746558</id><snippet>Reduce</snippet></ROW><ROW><id>8746558</id><snippet>Filter</snippet></ROW><ROW><id>8746558</id><snippet>Negate</snippet></ROW><ROW><id>8746558</id><snippet>0:2 * c(1, 11, 111)</snippet></ROW><ROW><id>8746593</id><snippet>session.query(User)</snippet></ROW><ROW><id>8746593</id><snippet>type</snippet></ROW><ROW><id>8746593</id><snippet>SQL SELECT</snippet></ROW><ROW><id>8746593</id><snippet>users</snippet></ROW><ROW><id>8746593</id><snippet>with_polymorphic(...)</snippet></ROW><ROW><id>8746593</id><snippet>filter</snippet></ROW><ROW><id>8746593</id><snippet>session.query(User).filter(User.type=='user').all()
</snippet></ROW><ROW><id>8746923</id><snippet>url.replace('\/', '/')
</snippet></ROW><ROW><id>8747107</id><snippet>csv</snippet></ROW><ROW><id>8747107</id><snippet>\r\n</snippet></ROW><ROW><id>8747107</id><snippet>\n</snippet></ROW><ROW><id>8747107</id><snippet>DictWriter</snippet></ROW><ROW><id>8747107</id><snippet>output = csv.DictWriter(open('file3.csv','w'), delimiter=',', lineterminator='\n', fieldnames=headers)
</snippet></ROW><ROW><id>8747120</id><snippet>In [46]: alpha=[('A',1,1,2),('B',2,2,2),('C',3,1,2)]

In [49]: total = float(sum(reduce(mul,a[1:]) for a in alpha))

In [50]: total
Out[50]: 16.0

In [51]: [(a[0], "%.2f" % (reduce(mul,a[1:])/total)) for a in alpha]
Out[51]: [('A', '0.12'), ('B', '0.50'), ('C', '0.38')]
</snippet></ROW><ROW><id>8747120</id><snippet>0.44</snippet></ROW><ROW><id>8747148</id><snippet>StringIO</snippet></ROW><ROW><id>8747148</id><snippet>file_mock = MagicMock(spec=file, wraps=StringIO('test')</snippet></ROW><ROW><id>8747148</id><snippet>StringIO</snippet></ROW><ROW><id>8747189</id><snippet>list_of_bytes = map(ord, my_unicode_string.encode('utf8'))
</snippet></ROW><ROW><id>8747189</id><snippet>list_of_code_points = map(ord, my_unicode_string)
</snippet></ROW><ROW><id>8747314</id><snippet>import contextlib
@contextlib.contextmanager
def write_on_change(filename):
    with tempfile.NamedTemporaryFile(delete=False) as f:
        yield f
        tempname = f.name
    try:
        overwrite = not filecmp.cmp(tempname,filename)
    except (OSError,IOError):
        overwrite = True
    if overwrite:
        shutil.copyfile(tempname,filename)
    os.unlink(tempname)
</snippet></ROW><ROW><id>8747314</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>8747314</id><snippet>tempname</snippet></ROW><ROW><id>8747314</id><snippet>filename</snippet></ROW><ROW><id>8747314</id><snippet>filecmp.cmp</snippet></ROW><ROW><id>8747314</id><snippet>False</snippet></ROW><ROW><id>8747314</id><snippet>bufsize</snippet></ROW><ROW><id>8747570</id><snippet>my_matrix = [row1, row2, row3]
print "\n".join(["\t".join(map(str, r)) for r in my_matrix])
</snippet></ROW><ROW><id>8747570</id><snippet>import string

max_lens = [max([len(str(r[i])) for r in my_matrix])
                for i in range(len(my_matrix[0]))]

print "\n".join(["".join([string.ljust(str(e), l + 2)
                for e, l in zip(r, max_lens)]) for r in my_matrix])
</snippet></ROW><ROW><id>8747890</id><snippet>try:
   somefunction()
except:
   self.fail("....")
</snippet></ROW><ROW><id>8748146</id><snippet>_ = lambda *args: args
</snippet></ROW><ROW><id>8748146</id><snippet>_ = lambda x: x
</snippet></ROW><ROW><id>8748486</id><snippet>requirements.txt</snippet></ROW><ROW><id>8748486</id><snippet>import pkg_resources, setuptools

for dist in pkg_resources.working_set:
    for pkg in setuptools.find_packages(dist.location):
        __import__(pkg)
</snippet></ROW><ROW><id>8748560</id><snippet>&gt;&gt;&gt; sorted(map(lambda x: sorted(x[:2]) + [x[2]], li))
[['a', 'u', 'asdgasdgasdgasd'],
 ['h', 'j', 'asdgasdgasdgasdgas'],
 ['i', 'o', 'sdagasdgasdgdsag'],
 ['m', 'z', 'asdgwergerwhwre']]
</snippet></ROW><ROW><id>8748722</id><snippet>loc</snippet></ROW><ROW><id>8748722</id><snippet>scale</snippet></ROW><ROW><id>8748722</id><snippet>scale</snippet></ROW><ROW><id>8748722</id><snippet>shape</snippet></ROW><ROW><id>8748722</id><snippet>loc=0</snippet></ROW><ROW><id>8748722</id><snippet>In [56]: import numpy as np

In [57]: from scipy import stats

In [58]: logsample = stats.norm.rvs(loc=10, scale=3, size=1000) # logsample ~ N(mu=10, sigma=3)

In [59]: sample = np.exp(logsample) # sample ~ lognormal(10, 3)

In [60]: shape, loc, scale = stats.lognorm.fit(sample, floc=0) # hold location to 0 while fitting

In [61]: shape, loc, scale
Out[61]: (2.9212650122639419, 0, 21318.029350592606)

In [62]: np.log(scale), shape  # mu, sigma
Out[62]: (9.9673084420467362, 2.9212650122639419)
</snippet></ROW><ROW><id>8748833</id><snippet>&gt;&gt;&gt; a[1][2] = 5
&gt;&gt;&gt; a
&gt;&gt;&gt; [[0, 0, 5], [0, 0, 5], [0, 0, 5]]


&gt;&gt;&gt; b[1][2] = 5
&gt;&gt;&gt; b
&gt;&gt;&gt; [[0, 0, 0], [0, 0, 5], [0, 0, 0]]
</snippet></ROW><ROW><id>8748836</id><snippet>text()</snippet></ROW><ROW><id>8748836</id><snippet>string()</snippet></ROW><ROW><id>8748836</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8748836</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>8748836</id><snippet>response = response.replace(body=response.body.replace('&lt;br /&gt;', '\n')) 
hxs = HtmlXPathSelector(response)
</snippet></ROW><ROW><id>8748836</id><snippet>text()</snippet></ROW><ROW><id>8748836</id><snippet>string()</snippet></ROW><ROW><id>8748836</id><snippet>date = hxs.select('//*[@id="date_long"]/text()').extract()[0]
</snippet></ROW><ROW><id>8749214</id><snippet>__init__.py</snippet></ROW><ROW><id>8749214</id><snippet>.py</snippet></ROW><ROW><id>8749214</id><snippet>DIRA
  + __init__.py    &lt;-- makes DIRA to package DIRA
  + moduleA.py     &lt;-- module DIRA.moduleA
</snippet></ROW><ROW><id>8749214</id><snippet>/otherplace/DIRA  &lt;-+
                    |  points to DIRA
mylibraries/SYMA  --+  symbolic link
</snippet></ROW><ROW><id>8749214</id><snippet>import sys
sys.path.append('/path/to/your/package/root')
</snippet></ROW><ROW><id>8749214</id><snippet>import SYMA.ModuleA
</snippet></ROW><ROW><id>8749214</id><snippet>import SYMA
</snippet></ROW><ROW><id>8749344</id><snippet>import itertools
non_starting_words = list(itertools.chain(*[s[1:] for s in treebank.sents()]))
uppercase_words = [w for w in non_starting_words if w[0].isupper()]
</snippet></ROW><ROW><id>8749344</id><snippet>punctuation_marks = ".!?"
first_word = True
uppercase_words = []

for w in text:
    if not first_word and re.match("[A-Z][a-z]*$", w):
        uppercase_words.append(w)
    first_word = w in punctuation_marks

print uppercase_words
</snippet></ROW><ROW><id>8749473</id><snippet>input_raw = {112762853378: 
   {'dst': ['10.121.4.136'], 
    'src': ['1.2.3.4'], 
    'alias': ['www.example.com']
   },
 112762853385: 
   {'dst': ['10.121.4.136'], 
    'src': ['1.2.3.4'], 
    'alias': ['www.example.com']
   },
 112760496444: 
   {'dst': ['10.121.4.136'], 
    'src': ['1.2.3.4']
   },
 112760496502: 
   {'dst': ['10.122.195.34'], 
    'src': ['4.3.2.1']
   }
}

result = {}

for key,value in input_raw.items():
    if value not in result.values():
        result[key] = value

print result
</snippet></ROW><ROW><id>8749640</id><snippet>dl[2]['a']</snippet></ROW><ROW><id>8749640</id><snippet>__getitem__</snippet></ROW><ROW><id>8749640</id><snippet>class defaultlist(list):
    def __init__(self, fx):
        self._fx = fx
    def _fill(self, index):
        while len(self) &lt;= index:
            self.append(self._fx())
    def __setitem__(self, index, value):
        self._fill(index)
        list.__setitem__(self, index, value)
    def __getitem__(self, index):
        self._fill(index)
        return list.__getitem__(self, index)
</snippet></ROW><ROW><id>8750744</id><snippet>for i, word in enumerate(tmpstr):
    print word, tmpstr[i+1]
</snippet></ROW><ROW><id>8750744</id><snippet>def pairs(it):
    it = iter(it)
    for element in it:
        yield element, next(it)

for word1, word2 in pairs(tmpstr):
    print word1, word2
</snippet></ROW><ROW><id>8751078</id><snippet>PyString_AsString</snippet></ROW><ROW><id>8751601</id><snippet>None</snippet></ROW><ROW><id>8751601</id><snippet>sql='''
SELECT p.price, t.date
FROM ( {t} ) t
LEFT JOIN price p
ON p.date = t.date
WHERE p.id = ?
'''.format(t=' UNION ALL '.join('SELECT {d!r} date'.format(d=d) for d in date))

cursor.execute(sql,[id])
result=cursor.fetchall()
</snippet></ROW><ROW><id>8751601</id><snippet>len(date)</snippet></ROW><ROW><id>8751601</id><snippet>OperationalError: too many terms in compound SELECT
</snippet></ROW><ROW><id>8751601</id><snippet>SELECT p.price, t.date
FROM ( SELECT date from dates ) t
LEFT JOIN price p
ON p.date = t.date
</snippet></ROW><ROW><id>8751601</id><snippet>curs.execute('''
    SELECT date, price
    FROM prices
    WHERE date &lt;= ?
        AND date &gt;= ?
        AND id = ?''', (max(date), min(date), id))
</snippet></ROW><ROW><id>8751601</id><snippet>sql = '''
    SELECT date, price
    FROM prices
    WHERE date IN ({s})
        AND id = ?'''.format(s={','.join(['?']*len(dates))})
curs.execute(sql,dates + [id])
</snippet></ROW><ROW><id>8751601</id><snippet>result</snippet></ROW><ROW><id>8751601</id><snippet>None</snippet></ROW><ROW><id>8751601</id><snippet>dict</snippet></ROW><ROW><id>8751601</id><snippet>(date,price)</snippet></ROW><ROW><id>8751601</id><snippet>dict.get()</snippet></ROW><ROW><id>8751601</id><snippet>None</snippet></ROW><ROW><id>8751601</id><snippet>date</snippet></ROW><ROW><id>8751601</id><snippet>result = dict(curs.fetchall())
result = [(result.get(d,None), d) for d in date]
</snippet></ROW><ROW><id>8751601</id><snippet>dict</snippet></ROW><ROW><id>8751601</id><snippet>date</snippet></ROW><ROW><id>8751601</id><snippet>price</snippet></ROW><ROW><id>8751601</id><snippet>def using_sqlite_union():
    sql = '''
        SELECT p.price, t.date
        FROM ( {t} ) t
        LEFT JOIN price p
        ON p.date = t.date
    '''.format(t = ' UNION ALL '.join('SELECT {d!r} date'.format(d = str(d))
                                      for d in dates))
    cursor.execute(sql)
    return cursor.fetchall()

def using_sqlite_dates():
    sql = '''
        SELECT p.price, t.date
        FROM ( SELECT date from dates ) t
        LEFT JOIN price p
        ON p.date = t.date
    '''
    cursor.execute(sql)
    return cursor.fetchall()

def using_python_dict():
    cursor.execute('''
        SELECT date, price
        FROM price
        WHERE date &lt;= ?
            AND date &gt;= ?
            ''', (max(dates), min(dates)))

    result = dict(cursor.fetchall())
    result = [(result.get(d,None), d) for d in dates]
    return result

N = 500
m = 10
omit = random.sample(range(N), m)
dates = [ datetime.date(2000, 1, 1)+datetime.timedelta(days = i) for i in range(N) ]
rows = [ (d, random.random()) for i, d in enumerate(dates) if i not in omit ]
</snippet></ROW><ROW><id>8751601</id><snippet>rows</snippet></ROW><ROW><id>8751601</id><snippet>price</snippet></ROW><ROW><id>8751601</id><snippet>python -mtimeit -s'import timeit_sqlite_union as t' 't.using_python_dict()'
</snippet></ROW><ROW><id>8751601</id><snippet>·────────────────────·────────────────────·
│  using_python_dict │ 1.47 msec per loop │
│ using_sqlite_dates │ 3.39 msec per loop │
│ using_sqlite_union │ 5.69 msec per loop │
·────────────────────·────────────────────·
</snippet></ROW><ROW><id>8751601</id><snippet>using_python_dict</snippet></ROW><ROW><id>8751601</id><snippet>using_sqlite_dates</snippet></ROW><ROW><id>8751601</id><snippet>·────────────────────·────────────────────·
│  using_python_dict │ 32.5 msec per loop │
│ using_sqlite_dates │ 81.5 msec per loop │
·────────────────────·────────────────────·
</snippet></ROW><ROW><id>8751855</id><snippet>keys=consoleHandler, hunterFileHandler
                    ^
</snippet></ROW><ROW><id>8751855</id><snippet>KeyError</snippet></ROW><ROW><id>8751855</id><snippet>" hunterFileHandler"</snippet></ROW><ROW><id>8751855</id><snippet>keys=consoleHandler,hunterFileHandler
</snippet></ROW><ROW><id>8751944</id><snippet>void</snippet></ROW><ROW><id>8751944</id><snippet>__device__ float lerp(float a, float b, float w)
{
    return a + w*(b-a);
}
</snippet></ROW><ROW><id>8751944</id><snippet>__global__ void lerp_kernel(const float *a, const float *b, const float w, float *y)
{
    int tid = threadIdx.x + blockIdx.x*blockDim.x; // unique thread number in the grid
    y[tid] = a[tid] + w*(b[tid]-a[tid]);
}
</snippet></ROW><ROW><id>8752005</id><snippet>&lt;body py:match="body" py:attrs="select('@*')"&gt;
    &lt;topmenu id="menu-items"&gt;&lt;/topmenu&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>8752005</id><snippet>&lt;body&gt;
    &lt;div py:match="topmenu" py:attrs="select('@*')"&gt;&lt;span&gt;item1&lt;/span&gt;&lt;/div&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>8752187</id><snippet>open</snippet></ROW><ROW><id>8752187</id><snippet>'r'</snippet></ROW><ROW><id>8752187</id><snippet>f = open(curdir + sep + self.path); self.wfile.write(f.read())</snippet></ROW><ROW><id>8752187</id><snippet>fn = os.path.normpath(os.path.join(curdir, self.path))
if not fn.startswith(abspath + os.path.sep):
    raise Exception('Path traversal attempt')
with open(fn, 'rb') as f:
    self.wfile.write(f.read())
</snippet></ROW><ROW><id>8752187</id><snippet>with</snippet></ROW><ROW><id>8752187</id><snippet>f.close()</snippet></ROW><ROW><id>8752187</id><snippet>os.path.join</snippet></ROW><ROW><id>8752187</id><snippet>import os.path</snippet></ROW><ROW><id>8752250</id><snippet>asset_path</snippet></ROW><ROW><id>8752250</id><snippet>STATIC_URL</snippet></ROW><ROW><id>8752250</id><snippet>STATIC_URL</snippet></ROW><ROW><id>8752250</id><snippet>/assets/</snippet></ROW><ROW><id>8752250</id><snippet>/assets/manage/</snippet></ROW><ROW><id>8752250</id><snippet>#models.py
class Asset(models.Model):
    name = models.CharField(max_length=100)
    asset_filename = models.CharField(max_length=4096)
    creation_date = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return self.name

#views.py
from urlparse import urljoin

def detail(request, asset_id):
    asset = get_object_or_404(Asset, pk=asset_id)
    asset_url = build_asset_url(request.get_host(), settings.ASSET_URL, asset.asset_filename)
    return render_to_response('html/detail.html', {'asset': asset, 'url': asset_url})

def build_asset_url(host, path, filename):
    """ Builds an absolute url to an asset located on the current server """ 
    url = "http://" % host
    url = urljoin(url, path)
    return urljoin(url, filename)

#settings.py
STATIC_URL = '/static/'
ASSET_URL = '/static/assets/assetrepository/'
</snippet></ROW><ROW><id>8752250</id><snippet>/static/assets/assetrepository/</snippet></ROW><ROW><id>8752344</id><snippet>gtk.Widget.queue_draw()</snippet></ROW><ROW><id>8752344</id><snippet>self.queue_draw()</snippet></ROW><ROW><id>8752344</id><snippet>gtk.Widget.queue_draw_area()</snippet></ROW><ROW><id>8752344</id><snippet>gtk.gdk.Window.invalidate_rect()</snippet></ROW><ROW><id>8752383</id><snippet>MyObject.objects.filter(name='Mike').values_list('address', flat=True)
</snippet></ROW><ROW><id>8752433</id><snippet>ComputedProperty</snippet></ROW><ROW><id>8752433</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>8752472</id><snippet>__setitem__</snippet></ROW><ROW><id>8752472</id><snippet>class MyDict(dict):
    def __setitem__(self, key, value):
         dict.__setitem__(self, key, 2 * value)
</snippet></ROW><ROW><id>8752472</id><snippet>&gt;&gt;&gt; m  = MyDict()
&gt;&gt;&gt; m[0] = 5
&gt;&gt;&gt; m
{0: 10}
</snippet></ROW><ROW><id>8752472</id><snippet>__setattr__</snippet></ROW><ROW><id>8752652</id><snippet>^(.*?)\s*(\d+)\s*(\d+)$
</snippet></ROW><ROW><id>8752652</id><snippet>^(.*?)\t*(\d+)\t*(\d+)$
</snippet></ROW><ROW><id>8752669</id><snippet>students = Student.objects.all()
attr_chain = "group.title".split(".")

for student in students:
    item = student
    for attr in attr_chain:
        item = getattr(item, attr)

    print "%s is in the group %s" % (student, item)
</snippet></ROW><ROW><id>8752669</id><snippet>values_list</snippet></ROW><ROW><id>8752669</id><snippet>name_attr = "name"

#If you look in the documentation you will see why I use "__" here
group_title_attr = "group__title" 

for student_name, group_title in Student.objects.all().values_list(name_attr, group_title_attr):
    print "%s is in the group %s" % (student_name, group_title)
</snippet></ROW><ROW><id>8752832</id><snippet>AdminEmailHandler</snippet></ROW><ROW><id>8752832</id><snippet>class AdminEmailHandler(logging.Handler):
    """An exception log handler that emails log entries to site admins.

    If the request is passed as the first argument to the log record,
    request data will be provided in the email report.
    """

    def __init__(self, include_html=False):
        logging.Handler.__init__(self)
        self.include_html = include_html

    def emit(self, record):
        try:
            request = record.request
            subject = '%s (%s IP): %s' % (
                record.levelname,
                (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'),
                record.msg
            )
            filter = get_exception_reporter_filter(request)
            request_repr = filter.get_request_repr(request)
        except:
            subject = '%s: %s' % (
                record.levelname,
                record.getMessage()
            )
            request = None
            request_repr = "Request repr() unavailable."

        if record.exc_info:
            exc_info = record.exc_info
            stack_trace = '\n'.join(traceback.format_exception(*record.exc_info))
        else:
            exc_info = (None, record.getMessage(), None)
            stack_trace = 'No stack trace available'

        message = "%s\n\n%s" % (stack_trace, request_repr)
        reporter = ExceptionReporter(request, is_email=True, *exc_info)
        html_message = self.include_html and reporter.get_traceback_html() or None
        mail.mail_admins(subject, message, fail_silently=True, html_message=html_message)
</snippet></ROW><ROW><id>8752832</id><snippet>process_response</snippet></ROW><ROW><id>8752832</id><snippet># Custom middleware

class MyErrorMiddleware(object):
    def process_response(self, request, response):
        if response.status_code == 404:
            domain = request.get_host()
            referer = request.META.get('HTTP_REFERER', None)
            is_internal = _is_internal_request(domain, referer)
            path = request.get_full_path()
                if referer and not _is_ignorable_404(path) and (is_internal or '?' not in referer):
                    ua = request.META.get('HTTP_USER_AGENT', '&lt;none&gt;')
                    ip = request.META.get('REMOTE_ADDR', '&lt;none&gt;')
                    mail_error("Broken %slink on %s" % ((is_internal and 'INTERNAL ' or ''), domain),
                        "Referrer: %s\nRequested URL: %s\nUser agent: %s\nIP address: %s\n" \
                                  % (referer, request.get_full_path(), ua, ip),
                                  fail_silently=True)
                return response

# Custom mail_error function

def mail_error(subject, message, fail_silently=False, connection=None,
                  html_message=None):
    """Sends a message to the managers, as defined by the MANAGERS setting."""
    if not settings.MANAGERS:
        return

    # put your extra headers here
    mail = EmailMultiAlternatives(u'%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject),
                message, settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],
                connection=connection, header={})
    mail
    if html_message:
        mail.attach_alternative(html_message, 'text/html')
    mail.send(fail_silently=fail_silently)
</snippet></ROW><ROW><id>8753188</id><snippet>set(A)</snippet></ROW><ROW><id>8753188</id><snippet>set(B)</snippet></ROW><ROW><id>8753188</id><snippet>list_of_objects = [(i, i in A, i in B) for i in set(A) | set(B)]
</snippet></ROW><ROW><id>8753229</id><snippet>&gt;&gt;&gt; ListA = ['a1','a2','a1','a3','a2','a4','a5','a4']
&gt;&gt;&gt; ListB = ['b1','b2','b1','b3','b2','b4','b5','b4']
&gt;&gt;&gt; cB=collections.Counter(ListB)
&gt;&gt;&gt; cA=x=collections.Counter(ListA)
&gt;&gt;&gt; [i for i in cA if cA[i]&gt;1]
['a1', 'a2', 'a4']
&gt;&gt;&gt; [i for i in cB if cB[i]&gt;1]
['b4', 'b1', 'b2']
</snippet></ROW><ROW><id>8753229</id><snippet>dB=collections.OrderedDict()
dA=collections.OrderedDict()
&gt;&gt;&gt; for a in ListB:
    dB.setdefault(a,0)
    dB[b]+=1

&gt;&gt;&gt; for b in ListB:
    dB.setdefault(b,0)
    dB[b]+=1

&gt;&gt;&gt; [i for i in dA if dA[i]&gt;1]
['a1', 'a2', 'a4']
&gt;&gt;&gt; [i for i in dB if dB[i]&gt;1]
['b1', 'b2', 'b4']
</snippet></ROW><ROW><id>8753354</id><snippet>self.int_att1 = int</snippet></ROW><ROW><id>8753354</id><snippet>int_att1</snippet></ROW><ROW><id>8753354</id><snippet>int</snippet></ROW><ROW><id>8753354</id><snippet>int</snippet></ROW><ROW><id>8753354</id><snippet>&gt;&gt;&gt; number_type = int
&gt;&gt;&gt; i = number_type()
&gt;&gt;&gt; i
0
&gt;&gt;&gt; type(i)
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>8753354</id><snippet>number_type</snippet></ROW><ROW><id>8753354</id><snippet>int</snippet></ROW><ROW><id>8753354</id><snippet>i</snippet></ROW><ROW><id>8753354</id><snippet>int</snippet></ROW><ROW><id>8753354</id><snippet>number_type</snippet></ROW><ROW><id>8753354</id><snippet>self.list_att = list</snippet></ROW><ROW><id>8753354</id><snippet>class Name(object):

    def __init__(self):
        self.int_att1 = int()
        self.int_att2 = int()
        self.list_att = list()
</snippet></ROW><ROW><id>8753354</id><snippet>&gt;&gt;&gt; initial_int = int()
&gt;&gt;&gt; initial_int
0
&gt;&gt;&gt; initial_list = list()
&gt;&gt;&gt; initial_list
[]
</snippet></ROW><ROW><id>8753354</id><snippet>int</snippet></ROW><ROW><id>8753354</id><snippet>0</snippet></ROW><ROW><id>8753354</id><snippet>list</snippet></ROW><ROW><id>8753354</id><snippet>[]</snippet></ROW><ROW><id>8753548</id><snippet>filtered = [ v for v in address if not v.startswith('10.') ]
</snippet></ROW><ROW><id>8753815</id><snippet>p.join()</snippet></ROW><ROW><id>8753815</id><snippet>numpy.Pool</snippet></ROW><ROW><id>8753815</id><snippet>apply_async</snippet></ROW><ROW><id>8753815</id><snippet>def f(i):  
    return i*np.identity(4)

if __name__ == '__main__':
    p=Pool(5)
    result = np.zeros((4,4))
    def adder(value):
        global result
        result += value

    for i in range(30):
        p.apply_async(f, args=(i,), callback=adder)
    p.close()
    p.join()
    print result
</snippet></ROW><ROW><id>8753815</id><snippet>result</snippet></ROW><ROW><id>8753815</id><snippet>Pool.imap</snippet></ROW><ROW><id>8753815</id><snippet>if __name__ == '__main__':
    p=Pool(5)
    result = np.zeros((4,4))

    im = p.imap_unordered(f, range(30), chunksize=5)

    for x in im:
        result += x

    print result
</snippet></ROW><ROW><id>8753815</id><snippet>imap</snippet></ROW><ROW><id>8753815</id><snippet>imap_unordered</snippet></ROW><ROW><id>8753909</id><snippet>open()</snippet></ROW><ROW><id>8753909</id><snippet>open()</snippet></ROW><ROW><id>8753909</id><snippet>TEMPLATE</snippet></ROW><ROW><id>8753909</id><snippet>import csv

file_name = "test.tsv"
TEMPLATE = "template.tsv"
fil = open(file_name, "w")

# you forgot this line, which will open the file
template_file = open(TEMPLATE, 'r')

template = csv.DictReader(template_file, delimiter='\t')
new_file = csv.DictWriter(fil, fieldnames=template.fieldnames, delimiter='\t')
new_file.writeheader()
</snippet></ROW><ROW><id>8753951</id><snippet>import calendar
import datetime

current = datetime.date.today().replace(day=1)
mylist = list()
for i in xrange(12):
    rng = calendar.monthrange(current.year, current.month)
    last = current.replace(day = rng[1])
    mylist.append(current.strftime("%b 1, %Y") + " - " + last.strftime("%b %d, %Y"))
    current = (current - datetime.timedelta(1)).replace(day=1)
print mylist
</snippet></ROW><ROW><id>8753951</id><snippet>['Jan 1, 2012 - Jan 31, 2012', 'Dec 1, 2011 - Dec 31, 2011', 'Nov 1, 2011 - Nov 30, 2011', 'Oct 1, 2011 - Oct 31, 2011', 'Sep 1, 2011 - Sep 30, 2011', 'Aug 1, 2011 - Aug 31, 2011', 'Jul 1, 2011 - Jul 31, 2011', 'Jun 1, 2011 - Jun 30, 2011', 'May 1, 2011 - May 31, 2011', 'Apr 1, 2011 - Apr 30, 2011', 'Mar 1, 2011 - Mar 31, 2011', 'Feb 1, 2011 - Feb 28, 2011']
</snippet></ROW><ROW><id>8753978</id><snippet>&lt;</snippet></ROW><ROW><id>8753978</id><snippet>..., Q(deadline__lt=datetime.datetime.today()), ....
</snippet></ROW><ROW><id>8754233</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>8754233</id><snippet>settings.py</snippet></ROW><ROW><id>8754981</id><snippet>st = "\B1\B1xxA1xxMdl1zzInoAEROzzMofIN"
s = re.sub(r"\\","",st)
idx = s.rindex("B1")
print s[idx:]
</snippet></ROW><ROW><id>8754981</id><snippet>'B1xxA1xxMdl1zzInoAEROzzMofIN'</snippet></ROW><ROW><id>8754981</id><snippet>st = "\B1\B1xxA1xxMdl1zzInoAEROzzMofIN"
idx = st.rindex("\\")
print st[idx+1:]
</snippet></ROW><ROW><id>8754981</id><snippet>'B1xxA1xxMdl1zzInoAEROzzMofIN'</snippet></ROW><ROW><id>8755162</id><snippet>tar -xvzf pack.tar.gz</snippet></ROW><ROW><id>8755162</id><snippet>setup.py</snippet></ROW><ROW><id>8755162</id><snippet>python setup.py install</snippet></ROW><ROW><id>8755252</id><snippet>input_text</snippet></ROW><ROW><id>8755252</id><snippet>import re

regexes = (r'[A-Z][a-z]+ [A-Z][a-z]+', # capitalized first and last name
           r'[A-Z]\. [A-Z][a-z]+')     # capitalized initial, then last name
names = []

for regex in regexes:
    names += re.findall(regex, input_text)
</snippet></ROW><ROW><id>8755252</id><snippet>Information Processing</snippet></ROW><ROW><id>8755317</id><snippet>if</snippet></ROW><ROW><id>8755317</id><snippet>def main():
    # ...

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8755317</id><snippet>if</snippet></ROW><ROW><id>8755341</id><snippet>0</snippet></ROW><ROW><id>8755341</id><snippet>bool(0)</snippet></ROW><ROW><id>8755341</id><snippet>false</snippet></ROW><ROW><id>8755341</id><snippet>new = ["yes" if x else "no" for x in list]
</snippet></ROW><ROW><id>8755404</id><snippet>setLayoutDirection(QtCore.Qt.RightToLeft)</snippet></ROW><ROW><id>8755404</id><snippet>import sys
from PyQt4 import QtGui, QtCore

app = QtGui.QApplication(sys.argv)
main = QtGui.QMainWindow()
menubar = QtGui.QMenuBar()

menus = []
submenus = {}
for x in range(10):
    # top menus
    menu = QtGui.QMenu('Top %d' % x)
    menus.append(menu)

    # set direction
    menu.setLayoutDirection(QtCore.Qt.RightToLeft)

    # add to menubar
    menubar.addMenu(menu)

    for y in range(5):
        # a sub-menu
        submenu = QtGui.QMenu('Level 1 - %d' % y)

        # some dummy actions
        submenu.addAction('Level 2 - 1')
        submenu.addAction('Level 2 - 2')

        # keep reference
        submenus[(x,y)] = submenu
        # add to the top menu
        menu.addMenu(submenu)

main.setMenuBar(menubar)
main.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>8755811</id><snippet>import codecs
f = codecs.open("myfile.txt","r",encoding="utf-8") 
</snippet></ROW><ROW><id>8755811</id><snippet>&gt;&gt;&gt; ord(u"£")
163
</snippet></ROW><ROW><id>8755811</id><snippet>unicodedata</snippet></ROW><ROW><id>8755811</id><snippet>&gt;&gt;&gt; unicodedata.bidirectional(u"£")
ET  # 'E'uropean 'T'erminator
</snippet></ROW><ROW><id>8755818</id><snippet>import matplotlib.font_manager
matplotlib.font_manager.findSystemFonts(fontpaths=None, fontext='ttf')
</snippet></ROW><ROW><id>8756132</id><snippet>&lt;tr bgcolor="#e5e5e5" valign="top"&gt;&lt;td align="right"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;&lt;b&gt;1.&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td align="center"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;9.2&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;&lt;a href="/title/tt0111161/"&gt;The Shawshank Redemption&lt;/a&gt; (1994)&lt;/font&gt;&lt;/td&gt;&lt;td align="right"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;689,815&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>8756132</id><snippet>#e5e5e5</snippet></ROW><ROW><id>8756132</id><snippet>#ffffff</snippet></ROW><ROW><id>8756132</id><snippet>|</snippet></ROW><ROW><id>8756132</id><snippet>bgcolor="#(?:e5e5e5|ffffff)"
</snippet></ROW><ROW><id>8756132</id><snippet>|</snippet></ROW><ROW><id>8756132</id><snippet>?:</snippet></ROW><ROW><id>8756132</id><snippet>(\d{1,3})\.
</snippet></ROW><ROW><id>8756132</id><snippet>\d</snippet></ROW><ROW><id>8756132</id><snippet>{1,3}</snippet></ROW><ROW><id>8756132</id><snippet>.</snippet></ROW><ROW><id>8756132</id><snippet>\.</snippet></ROW><ROW><id>8756132</id><snippet>.</snippet></ROW><ROW><id>8756132</id><snippet>.^$*+?|{}[]()\</snippet></ROW><ROW><id>8756132</id><snippet>re.findall</snippet></ROW><ROW><id>8756132</id><snippet>?:</snippet></ROW><ROW><id>8756132</id><snippet>(\d\.\d)
</snippet></ROW><ROW><id>8756132</id><snippet>&lt;a href="/title/tt(\d{7})/"&gt;
</snippet></ROW><ROW><id>8756132</id><snippet>&lt;</snippet></ROW><ROW><id>8756132</id><snippet>([A-Za-z0-9 ,.:'-]+)
</snippet></ROW><ROW><id>8756132</id><snippet>A-Z</snippet></ROW><ROW><id>8756132</id><snippet>+</snippet></ROW><ROW><id>8756132</id><snippet>&lt;</snippet></ROW><ROW><id>8756132</id><snippet>([^&lt;]+)
</snippet></ROW><ROW><id>8756132</id><snippet>^</snippet></ROW><ROW><id>8756132</id><snippet>^</snippet></ROW><ROW><id>8756132</id><snippet>&lt;</snippet></ROW><ROW><id>8756132</id><snippet>&lt;</snippet></ROW><ROW><id>8756132</id><snippet>&lt;</snippet></ROW><ROW><id>8756132</id><snippet>\((\d{4})\)
</snippet></ROW><ROW><id>8756132</id><snippet>(\d{1,3}(?:,\d{3})*)
</snippet></ROW><ROW><id>8756132</id><snippet>*</snippet></ROW><ROW><id>8756132</id><snippet>+</snippet></ROW><ROW><id>8756132</id><snippet>*</snippet></ROW><ROW><id>8756132</id><snippet>?:</snippet></ROW><ROW><id>8756132</id><snippet>r</snippet></ROW><ROW><id>8756132</id><snippet>entries = re.findall(r'&lt;tr bgcolor="#(?:e5e5e5|ffffff)" valign="top"&gt;&lt;td align="right"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;&lt;b&gt;(\d{1,3})\.&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;td align="center"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;(\d\.\d)&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;&lt;a href="/title/tt(\d{7})/"&gt;([^&lt;]+)&lt;/a&gt; \((\d{4})\)&lt;/font&gt;&lt;/td&gt;&lt;td align="right"&gt;&lt;font face="Arial, Helvetica, sans-serif" size="-1"&gt;(\d{1,3}(?:,\d{3})*)&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;', html)
</snippet></ROW><ROW><id>8756132</id><snippet>re</snippet></ROW><ROW><id>8756666</id><snippet>t2 = re.sub(r'[\n\t\ ]+', ' ', t)  # t is your original text
</snippet></ROW><ROW><id>8756666</id><snippet>re.findall('[A-Z]{3}[A-Z0-9]{10}[0-9]{4}', t2)
Out[2]: ['JTEZU4BF7AK009445']
</snippet></ROW><ROW><id>8756666</id><snippet>r2 = re.compile('(\$[0-9\,\.]+)')
r2.findall(t2, t2.find('VIN:') - 50, t2.find('VIN:') + 50)
Out[4]: []
</snippet></ROW><ROW><id>8756666</id><snippet>r2.findall(t2, t2.find('VIN:') - 100, t2.find('VIN:') + 100)
Out[5]: ['$29,988']
</snippet></ROW><ROW><id>8756786</id><snippet>import urllib2
import sys

for i in range(1000000):
  try:
    pic = urllib2.urlopen("http://www.tjoernegaard.dk/Faelles/ElevFotos/"+str(i)+".jpg").read()
    with open(str(i).zfill(7)+".jpg") as f:
      f.write(pic)
    print "SUCCESS "+str(i)
  except KeyboardInterrupt:
    sys.exit(1)
  except urllib2.HTTPError, e:
    print "ERROR("+str(e.code)+") "+str(i)
</snippet></ROW><ROW><id>8756919</id><snippet>for item in b.flat:
    if item:
        print item.get_a()
</snippet></ROW><ROW><id>8757323</id><snippet>tempfile</snippet></ROW><ROW><id>8757447</id><snippet>argparse.ArgumentParser</snippet></ROW><ROW><id>8757447</id><snippet>__init__</snippet></ROW><ROW><id>8757447</id><snippet>SansParser</snippet></ROW><ROW><id>8757447</id><snippet>ArgumentParser</snippet></ROW><ROW><id>8757447</id><snippet>self.subparsers._parser_class = argparse.ArgumentParser
</snippet></ROW><ROW><id>8757447</id><snippet>add_parser</snippet></ROW><ROW><id>8757447</id><snippet>SansParser</snippet></ROW><ROW><id>8757447</id><snippet>ArgumentParser</snippet></ROW><ROW><id>8757569</id><snippet>from decimal import Decimal
from operator import itemgetter
survey ='''
BREAK_L,PN1000,LA55.16469813,LN18.15054629
PN1,LA54.16469813,LN17.15054629,EL22.222
BREAK_L,PN2000,LA55.16507249,LN18.15125566
PN6,LA54.16506873,LN17.15115798,EL33.333
PN7,LA54.16507249,LN17.15125566,EL44.444
BREAK_L,PN3000,LA55.16507249,LN18.15125566
PN10,LA54.16507522,LN17.15198405,EL55.555
PN11,LA54.16506566,LN17.15139220,EL44.44
PN12,LA54.16517275,LN17.15100652,EL11.111
'''

def parse_line(line):
  brk = False
  kv = {}
  for part in line.split(','):
    if part == 'BREAK_L':
      brk = True
    else:
      k = part[:2]
      v = part[2:]
      kv[k] = v
  return (brk,kv)

def parse_survey(survey):
  ig1 = itemgetter('PN','LA','LN','EL')
  ig2 = itemgetter('PN','LA','LN')
  brk_data = None
  for line in survey.strip().splitlines():
    brk, data = parse_line(line)
    if brk:
      brk_data = data
      continue
    else:
      yield ig1(data) + ig2(brk_data)

for r in parse_survey(survey):
  print r
</snippet></ROW><ROW><id>8757569</id><snippet>('1', '54.16469813', '17.15054629', '22.222', '1000', '55.16469813', '18.15054629')
('6', '54.16506873', '17.15115798', '33.333', '2000', '55.16507249', '18.15125566')
('7', '54.16507249', '17.15125566', '44.444', '2000', '55.16507249', '18.15125566')
('10', '54.16507522', '17.15198405', '55.555', '3000', '55.16507249', '18.15125566')
('11', '54.16506566', '17.15139220', '44.44', '3000', '55.16507249', '18.15125566')
('12', '54.16517275', '17.15100652', '11.111', '3000', '55.16507249', '18.15125566')
</snippet></ROW><ROW><id>8757569</id><snippet>1000</snippet></ROW><ROW><id>8757569</id><snippet>BP1000</snippet></ROW><ROW><id>8757886</id><snippet>./manage.py shell
from django.core.mail import send_mail

verified_address = "from@example.com"
send_mail('Subject here', 'Here is the message.', verified_address,
    ['to@example.com'], fail_silently=False)
</snippet></ROW><ROW><id>8757886</id><snippet>send_mail</snippet></ROW><ROW><id>8757974</id><snippet>draw.py</snippet></ROW><ROW><id>8757974</id><snippet>from line import line
</snippet></ROW><ROW><id>8757974</id><snippet>mygraph.draw.line</snippet></ROW><ROW><id>8757974</id><snippet>__init__.py</snippet></ROW><ROW><id>8758521</id><snippet>urdict=[{'mar': 0.0, 'sep': 567.82000000000005, 'may': 567.82000000000005, 'jun': 567.82000000000005, 'jul': 567.82000000000005, 'nov': 0.0, 'feb': 0.0, 'aug': 567.82000000000005,'jan': 0.0, 'apr': 567.82000000000005, 'dec': 0.0, 'oct': 567.82000000000005}, {'mar': 0.0, 'sep': 0.0, 'may': 0.0, 'jun': 0.0, 'jul': 0.0,  'nov': 567.82000000000005, 'feb': 0.0, 'aug': 0.0, 'jan': 0.0, 'apr': 0.0, 'dec': 567.82000000000005, 'oct': 0.0}, {'mar': 567.82000000000005, 'sep': 0.0, 'may': 0.0, 'jun': 0.0, 'jul': 0.0, 'nov': 0.0, 'feb': 567.82000000000005, 'aug': 0.0, 'jan': 567.82000000000005, 'apr': 0.0, 'dec': 0.0, 'oct': 0.0}]</snippet></ROW><ROW><id>8758521</id><snippet>month={'jan':0,'feb':1,'mar':2,'apr':3,'may':4,'jun':5,'jul':6,'aug':7,'sep':8,'oct':9,'nov':10,'dec':11}
</snippet></ROW><ROW><id>8758521</id><snippet>ursorteddicts=[]  
</snippet></ROW><ROW><id>8758521</id><snippet>for d in urdict:
    ursorteddicts.append(collections.OrderedDict(sorted(((k,v) for k,v in d.iteritems()),key=lambda x:month[x[0]])))
</snippet></ROW><ROW><id>8758875</id><snippet>count</snippet></ROW><ROW><id>8758875</id><snippet>def count(phrase, word):
    count1 = 0
    num_phrase = len(phrase)   
    num_letters = len(word)    
    for i in range(num_letters):
        if word[i:i+num_phrase] == phrase:
          count1 += 1
    return count1
</snippet></ROW><ROW><id>8758979</id><snippet>class FormHandler(webapp.RequestHandler):
    def post(self):
        if processFormData(self.request):
            self.redirect("/home")
        else:
            # Display the form, possibly with error messages.
</snippet></ROW><ROW><id>8759017</id><snippet>def extract_choices(text):
    choices = []

    def callback(match):
        variants = match.group().strip('{}')
        choices.append(dict(
            (v.lstrip('+'), v.startswith('+'))
            for v in variants.split('|')
        ))
        return '___'

    text = re.sub('{.*?}', callback, text)

    return text, choices
</snippet></ROW><ROW><id>8759017</id><snippet>&gt;&gt;&gt; t = 'Would you like {to get|having|+to have} responses to your questions    sent {up to|+to|on} you via email?'
&gt;&gt;&gt; pprint.pprint(extract_choices(t))
... ('Would you like ___ responses to your questions sent ___ you via email?',
... [{'having': False, 'to get': False, 'to have': True},
...  {'on': False, 'to': True, 'up to': False}])
</snippet></ROW><ROW><id>8759324</id><snippet>if __name__=='__main__':
</snippet></ROW><ROW><id>8759324</id><snippet>import multiprocessing as mp

def worker(inq,outq):
    obj = inq.get()
    obj = obj[::-1]
    outq.put(obj)

if __name__=='__main__':
    inq = mp.Queue()
    outq = mp.Queue()

    p = mp.Process(target=worker, args=(inq,outq))
    p.start()

    inq.put('Fancy Dan')

    # Wait for the worker to finish
    p.join()
    result = outq.get()
    print(result)
</snippet></ROW><ROW><id>8759448</id><snippet>import sys

def foobar():
    print sys._getframe().f_code.co_name
</snippet></ROW><ROW><id>8759716</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>8759739</id><snippet>class AlarmException(Exception): 
    pass 

...

    def alarm_handler(signum, frame):
        raise AlarmException()
</snippet></ROW><ROW><id>8760403</id><snippet>sed</snippet></ROW><ROW><id>8760403</id><snippet>sed ':a;{N;s/\n/, /};ba' INPUT_FILE
</snippet></ROW><ROW><id>8760403</id><snippet>sed</snippet></ROW><ROW><id>8760403</id><snippet>:a</snippet></ROW><ROW><id>8760403</id><snippet>:label</snippet></ROW><ROW><id>8760403</id><snippet>a</snippet></ROW><ROW><id>8760403</id><snippet>ba</snippet></ROW><ROW><id>8760403</id><snippet>N</snippet></ROW><ROW><id>8760403</id><snippet>N</snippet></ROW><ROW><id>8760403</id><snippet>\n</snippet></ROW><ROW><id>8760403</id><snippet>s/\n/, /</snippet></ROW><ROW><id>8760403</id><snippet>\n</snippet></ROW><ROW><id>8760403</id><snippet>\n</snippet></ROW><ROW><id>8760403</id><snippet>,</snippet></ROW><ROW><id>8760403</id><snippet>space</snippet></ROW><ROW><id>8760403</id><snippet>[jaypal:~/Temp] cat file
Paul
Pammy
Jacob
Robin

[jaypal:~/Temp] sed ':a;{N;s/\n/, /};ba' file
Paul, Pammy, Jacob, Robin
</snippet></ROW><ROW><id>8760670</id><snippet>raise failingThread.exc_info[0], failingThread.exc_info[1], failingThread.exc_info[2]
</snippet></ROW><ROW><id>8760670</id><snippet>help('raise')</snippet></ROW><ROW><id>8760670</id><snippet>None</snippet></ROW><ROW><id>8760670</id><snippet>None</snippet></ROW><ROW><id>8760670</id><snippet>TypeError</snippet></ROW><ROW><id>8760670</id><snippet>raise</snippet></ROW><ROW><id>8760670</id><snippet>raise</snippet></ROW><ROW><id>8760723</id><snippet>class MyQuerySet(models.query.QuerySet):
    def some_method(self, an_arg, another_arg, a_kwarg='some_value'):
        # do something
        return a_queryset

class MyManager(models.Manager):
    def get_query_set(self):
        return MyQuerySet(self.model)

    def some_method(self, *args, **kwargs):
        return self.get_query_set().some_method(*args, **kwargs)
</snippet></ROW><ROW><id>8761154</id><snippet>from django.forms import ModelForm, Textarea

class PostModelForm(ModelForm):
    class Meta:
        model = Post
        widgets = {
            'content': Textarea(attrs={'cols': 80, 'rows': 20}),
        }
</snippet></ROW><ROW><id>8761212</id><snippet>next</snippet></ROW><ROW><id>8761212</id><snippet>&gt;&gt;&gt; html = '&lt;td&gt;plan_49913.doc&lt;br /&gt; &lt;font color="#990000"&gt;Document superseded by:  &lt;/font&gt;&lt;a href="/plans/Jan_2012.html"&gt;January 2012&lt;/a&gt;&lt;/td&gt;'
&gt;&gt;&gt; bs = BeautifulSoup(html)
&gt;&gt;&gt; texts = [ node.next for node in bs.findAll('td') if node.next.endswith('.doc') ]
&gt;&gt;&gt; texts
[u'plan_49913.doc']
</snippet></ROW><ROW><id>8761212</id><snippet>if</snippet></ROW><ROW><id>8761286</id><snippet>                {% for i in found_entries %}
                    &lt;li&gt;&lt;a href="{{ i.get_absolute_url }}"&gt;{{i}}&lt;/a&gt;&lt;/li&gt;
                {% endfor %}
</snippet></ROW><ROW><id>8761286</id><snippet>{{i}}</snippet></ROW><ROW><id>8761286</id><snippet>__unicode__</snippet></ROW><ROW><id>8761286</id><snippet>{{i.category}}</snippet></ROW><ROW><id>8761286</id><snippet>{{i.title}}</snippet></ROW><ROW><id>8761382</id><snippet>s</snippet></ROW><ROW><id>8761382</id><snippet>import matplotlib.pyplot as plt

BOX = 5
START = 365
changes = (8, -3, 4, -4, 12, -3, 7, -3, 5, -9, 3)

# one way to force dimensions is to set the figure size:
fig = plt.figure(figsize=(5, 10))

# another way is to control the axes dimensions
# for axes to have specific dimensions:
#                  [ x0,  y0,   w,   h]  in figure units, from 0 to 1
#ax = fig.add_axes([.15, .15, .7*.5, .7])
ax = fig.add_axes([.15, .15, .7, .7])

def sign(val):
    return val / abs(val)

pointChanges = []
for chg in changes:
    pointChanges += [sign(chg)] * abs(chg)

symbol = {-1:'o',
           1:'x'}

chgStart = START
for ichg, chg in enumerate(changes):
    x = [ichg+1] * abs(chg)
    y = [chgStart + i * BOX * sign(chg) for i in range(abs(chg))] 
    chgStart += BOX * sign(chg) * (abs(chg)-2)
    ax.scatter(x, y,
               marker=symbol[sign(chg)],
               s=175)   #&lt;----- control size of scatter symbol

ax.set_xlim(0, len(changes)+1)
fig.savefig('pointandfigure.png')
plt.show()
</snippet></ROW><ROW><id>8761382</id><snippet>s</snippet></ROW><ROW><id>8761382</id><snippet>Collection</snippet></ROW><ROW><id>8761552</id><snippet>generator</snippet></ROW><ROW><id>8761552</id><snippet>def filtered_gen(gen):
    for item in gen:
        result = expensive_function(item)
        if result &lt; 5:
            yield result
</snippet></ROW><ROW><id>8761688</id><snippet>&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>8761688</id><snippet>Content-Type:</snippet></ROW><ROW><id>8761880</id><snippet>import re

input_str = raw_input("Please provide some info: ")
if not re.match("^[a-z]*$", input_str):
    print "Error! Only letters a-z allowed!"
    sys.exit()
</snippet></ROW><ROW><id>8761880</id><snippet>input_str = raw_input("Please provide some info: ")
if len(input_str) &gt; 15:
    print "Error! Only 15 characters allowed!"
    sys.exit()
</snippet></ROW><ROW><id>8761880</id><snippet>import re

input_str = raw_input("Please provide some info: ")
if not re.match("^[a-z]*$", input_str):
    print "Error! Only letters a-z allowed!"
    sys.exit()
elif len(input_str) &gt; 15:
    print "Error! Only 15 characters allowed!"
    sys.exit()

print "Your input was:", input_str
</snippet></ROW><ROW><id>8762022</id><snippet>import subprocess
from time import strftime       # Load just the strftime Module from Time

f = open('check_'+strftime("%Y-%m-%d")+'.log', 'w')
for server in open('check.txt'):
    f.write(server.strip() + "\n")
    p = subprocess.Popen(['plink', server.strip(), 'df','-k'],stdout=f)
    p.wait()
    f.flush()
</snippet></ROW><ROW><id>8762043</id><snippet>model_instance = MyModel.objects.get_or_create(surname='foo')
</snippet></ROW><ROW><id>8762043</id><snippet>management.call_command</snippet></ROW><ROW><id>8762043</id><snippet>try:
    MyModel.objects.get(surname='foo')
except MyModel.DoesNotExist:
      management.call_command(....)
</snippet></ROW><ROW><id>8762043</id><snippet>if not MyModel.objects.filter(surname='foo').exists():
      management.call_command(....)
</snippet></ROW><ROW><id>8762059</id><snippet>from collections import namedtuple

class DataPack(object):
    def __init__(self, line, seperator =',', headerfields = None, groupfields = None):        
        self.seperator = seperator
        self.header_fields = headerfields or ('date', 'time', 'nr', 'groups')
        self.group_fields = groupfields or ('nr', 'sensors','controlfields',
                                            't1values', 't2values')
        Header = namedtuple('Header', self.header_fields)

        self.header_part = line.split(self.seperator)[:self.data_start]
        self.data_start = len(self.header_fields)
        self.data_part = line.split(self.seperator)[self.data_start:]
        self.header = Header(*self.header_part)
        self.groups = self._create_groups(self.data_part, self.header.groups)

    def _create_groups(self, datalst, groups):
        """nr, sensors controllfield * 4, t1value*sensors, t2value*sensors """        
        Group = namedtuple('DataGroup', self.group_fields)
        _groups = []
        for i in range(int(groups)):
            nr = datalst[0]
            sensors = datalst[1]
            controlfields = datalst [2:6]
            t1values = datalst[6:6+int(sensors)]
            t2values = datalst[6+int(sensors):6+int(sensors)*2]
            _groups.append(Group(nr, sensors, controlfields, t1values, t2values))
            datalst = datalst[6+int(sensors)*2:]
        return _groups

    def __str__(self):
        _return = []        
        for group in self.groups:
            for sensor in range(int(group.sensors)):
                _return.append('%s, ' % self.header.date.replace('-','/'))
                _return.append('%s, ' % self.header.time)
                _return.append('%s, ' % group.nr)
                _return.append('%s, ' % (int(sensor) + 1,))
                _return.append('(%s, ' % group.t1values[int(sensor)])
                _return.append('%s)\n' % group.t2values[int(sensor)])
        return u''.join(_return)

if __name__ == '__main__':
    line = """2012-01-02,12:50:32,658,2,1,2,0,0,0,0,1556,1555,62,60,2,3,0,0,0,0,1559,1557,1557,63,64,65,0.305,0.265,0.304,0.308,0.309"""
    data = DataPack(line)
    for i in data.header: print i,
    for i in data.groups: print '\n',i
    print '\n',data
    print 'cfield 0:2 ', data.groups[0].controlfields[2]
    print 't2value 1:2 ', data.groups[1].t2values[2]
</snippet></ROW><ROW><id>8762059</id><snippet>_create_groups</snippet></ROW><ROW><id>8762059</id><snippet>__str__</snippet></ROW><ROW><id>8762073</id><snippet>StringIO</snippet></ROW><ROW><id>8762073</id><snippet>import StringIO
import sys

filelike = StringIO.StringIO(sys.stdin.read())

# Now use `filelike` as a regular open file, e.g.:
filelike.seek(2)
print filelike.read()
</snippet></ROW><ROW><id>8762112</id><snippet>import django
print(django.__file__)
</snippet></ROW><ROW><id>8762481</id><snippet>celeryd -l info -n worker1.example.com  -Q celery,worker1.example.com
</snippet></ROW><ROW><id>8762481</id><snippet>worker1.example.com</snippet></ROW><ROW><id>8762481</id><snippet>celery</snippet></ROW><ROW><id>8762481</id><snippet>task.apply_async(args, kwargs, queue="worker1.example.com")
</snippet></ROW><ROW><id>8762481</id><snippet>task.retry(queue="worker1.example.com")
</snippet></ROW><ROW><id>8762481</id><snippet>task.retry(queue=task.request.hostname)
</snippet></ROW><ROW><id>8762640</id><snippet>import wx

def set_frame_display(frame, display_index):
    display = wx.Display(display_index)
    x, y, w, h = display.GetGeometry()
    frame.SetPosition((x, y))

def main():
    app = wx.PySimpleApp()
    count = wx.Display_GetCount()
    for index in range(count):
        frame = wx.Frame(None, -1, 'Display %d of %d' % (index + 1, count))
        set_frame_display(frame, index)
        frame.Center()
        frame.Show()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8762684</id><snippet>lambda</snippet></ROW><ROW><id>8762684</id><snippet>def rects_bound(rects):
    """ Returns a rectangle that bounds all given rectangles
    """
    def bounding_rect_reducer((ax, ay, aw, ah), (bx, by, bw, bh)):
        return (min(ax,bx),
                min(ay,by),
                max(ax+aw, bx+bw), 
                max(ay+ah, by+bh))

    return reduce(bounding_rect_reducer, rects)
</snippet></ROW><ROW><id>8762876</id><snippet>somehash</snippet></ROW><ROW><id>8762876</id><snippet>defaultdict</snippet></ROW><ROW><id>8762876</id><snippet>if somehash[maxkey] &gt; k:
</snippet></ROW><ROW><id>8762889</id><snippet>&gt;&gt;&gt; StringVar(Tk())
&lt;Tkinter.StringVar instance at 0x0000000004435208&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8762889</id><snippet>&gt;&gt;&gt; root = Tk()
&gt;&gt;&gt; StringVar()
&lt;Tkinter.StringVar instance at 0x0000000004435508&gt;
</snippet></ROW><ROW><id>8762889</id><snippet>&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt; StringVar()
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
  File "C:\Python26\lib\lib-tk\Tkinter.py", line 251, in __init__
    Variable.__init__(self, master, value, name)
  File "C:\Python26\lib\lib-tk\Tkinter.py", line 182, in __init__
    self._tk = master.tk
AttributeError: 'NoneType' object has no attribute 'tk'
&gt;&gt;&gt; root = Tk()
&gt;&gt;&gt; StringVar()
&lt;Tkinter.StringVar instance at 0x00000000044C4408&gt;
</snippet></ROW><ROW><id>8763045</id><snippet>socket.accept()</snippet></ROW><ROW><id>8763045</id><snippet>SocketServer.ThreadingMixIn</snippet></ROW><ROW><id>8763085</id><snippet>c:\Python26\lib\site-packages\win32
c:\Python26\lib\site-packages\win32\lib
</snippet></ROW><ROW><id>8763100</id><snippet>axHisty.set_xlabel("this is the x axis")
</snippet></ROW><ROW><id>8763149</id><snippet>def running_avg(data, ws):
    tmp = np.cumsum(data, axis=-1, dtype='float')
    ra = (tmp[..., ws:] - tmp[..., :-ws]) / ws
    return ra
</snippet></ROW><ROW><id>8763149</id><snippet>def running_avg(data, ws):
    ra = np.cumsum(data, axis=-1, dtype='float') / ws
    ra[..., ws:] = ra[..., ws:] - ra[..., :-ws]
    return ra
</snippet></ROW><ROW><id>8763149</id><snippet>ra[..., ws:] -= ra[..., :-ws]
</snippet></ROW><ROW><id>8763149</id><snippet>ra[..., ws:] = ra[..., ws:] - ra[..., :-ws]
</snippet></ROW><ROW><id>8763175</id><snippet>print()</snippet></ROW><ROW><id>8763175</id><snippet>print()</snippet></ROW><ROW><id>8763245</id><snippet>datetime</snippet></ROW><ROW><id>8763245</id><snippet>tzinfo</snippet></ROW><ROW><id>8763245</id><snippet>datetime</snippet></ROW><ROW><id>8763245</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>8763245</id><snippet>datetime.now()</snippet></ROW><ROW><id>8763542</id><snippet>from socket import timeout
try:
    response = urllib.request.urlopen(url, timeout=10).read().decode('utf-8')
except (HTTPError, URLError) as error:
    logging.error('Data of %s not retrieved because %s\nURL: %s', name, error, url)
except timeout:
    logging.error('socket timed out - URL %s', url)
else:
    logging.info('Access successful.')
</snippet></ROW><ROW><id>8764077</id><snippet>SIGCHLD</snippet></ROW><ROW><id>8764077</id><snippet>gunicorn</snippet></ROW><ROW><id>8764077</id><snippet>SIGCHLD</snippet></ROW><ROW><id>8764077</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8764077</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8764077</id><snippet>SIGCHLD</snippet></ROW><ROW><id>8764229</id><snippet>Process</snippet></ROW><ROW><id>8764229</id><snippet>Process</snippet></ROW><ROW><id>8764229</id><snippet>Process</snippet></ROW><ROW><id>8764229</id><snippet>multiprocessing</snippet></ROW><ROW><id>8764312</id><snippet>$EDITOR</snippet></ROW><ROW><id>8764312</id><snippet>/usr/bin/editor</snippet></ROW><ROW><id>8764312</id><snippet>/usr/bin/x-terminal-emulator</snippet></ROW><ROW><id>8764312</id><snippet>/etc/alternatives/</snippet></ROW><ROW><id>8764390</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.setWindowTitle(self.tr('Document Printer'))
        self.table = QtGui.QTableWidget(200, 5, self)
        for row in range(self.table.rowCount()):
            for col in range(self.table.columnCount()):
                item = QtGui.QTableWidgetItem('(%d, %d)' % (row, col))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.table.setItem(row, col, item)
        self.table.setHorizontalHeaderLabels(
            'SKU #|NAME|DESCRIPTION|QUANTITY|PRICE'.split('|'))
        self.buttonPrint = QtGui.QPushButton('Print', self)
        self.buttonPrint.clicked.connect(self.handlePrint)
        self.buttonPreview = QtGui.QPushButton('Preview', self)
        self.buttonPreview.clicked.connect(self.handlePreview)
        layout = QtGui.QGridLayout(self)
        layout.addWidget(self.table, 0, 0, 1, 2)
        layout.addWidget(self.buttonPrint, 1, 0)
        layout.addWidget(self.buttonPreview, 1, 1)

    def handlePrint(self):
        dialog = QtGui.QPrintDialog()
        if dialog.exec_() == QtGui.QDialog.Accepted:
            self.handlePaintRequest(dialog.printer())

    def handlePreview(self):
        dialog = QtGui.QPrintPreviewDialog()
        dialog.paintRequested.connect(self.handlePaintRequest)
        dialog.exec_()

    def handlePaintRequest(self, printer):
        document = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(document)
        table = cursor.insertTable(
            self.table.rowCount(), self.table.columnCount())
        for row in range(table.rows()):
            for col in range(table.columns()):
                cursor.insertText(self.table.item(row, col).text())
                cursor.movePosition(QtGui.QTextCursor.NextCell)
        document.print_(printer)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8764672</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>8764672</id><snippet>/bin</snippet></ROW><ROW><id>8764672</id><snippet>$PATH</snippet></ROW><ROW><id>8764672</id><snippet>which python</snippet></ROW><ROW><id>8764672</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>8764672</id><snippet>/usr/local/bin/python2.7</snippet></ROW><ROW><id>8764672</id><snippet>/bin/python</snippet></ROW><ROW><id>8764721</id><snippet>RubyPython.start
nltk = RubyPython.import("nltk")
RubyPython.stop
</snippet></ROW><ROW><id>8764721</id><snippet>RubyPython.start(:python_exe =&gt; "python2.7") # Can also be a full path
</snippet></ROW><ROW><id>8764900</id><snippet># Imports
import numpy
import pylab
import scipy
import sklearn.cluster

# Set up original data - note that it's monotonically increasing by X value!
data = {}
data['original'] = {}
data['original']['x'] = [0, 5024.2059124920379, 7933.1645067836089, 7990.4664106277542, 9879.9717114947653, 13738.60563208926, 15113.277958924193]
data['original']['y'] = [0.0, 3072.5653360000988, 5477.2689107965398, 5851.6866463790966, 6056.3852496014106, 7895.2332350173638, 9154.2956175610598]

# Cluster data, sort it and and save
inputNumpy = numpy.array([[data['original']['x'][i], data['original']['y'][i]] for i in range(0, len(data['original']['x']))])
meanShift = sklearn.cluster.MeanShift()
meanShift.fit(inputNumpy)
clusteredData = [[pair[0], pair[1]] for pair in meanShift.cluster_centers_]
clusteredData.sort(lambda pair1, pair2: cmp(pair1[0],pair2[0]))
data['clustered'] = {}
data['clustered']['x'] = [pair[0] for pair in clusteredData]
data['clustered']['y'] = [pair[1] for pair in clusteredData]

# Build a spline using the clustered data and predict
mySpline = scipy.interpolate.UnivariateSpline(x=data['clustered']['x'], y=data['clustered']['y'], k=1)
xi = range(0, round(max(data['original']['x']), -3) + 3000, 20)
yi = mySpline(xi)

# Plot the datapoints
pylab.plot(data['clustered']['x'], data['clustered']['y'], "D", label="Datapoints (%s)" % 'clustered')
pylab.plot(xi, yi, label="Predicted (%s)" %  'clustered')
pylab.plot(data['original']['x'], data['original']['y'], "o", label="Datapoints (%s)" % 'original')

# Show the plot
pylab.grid(True)
pylab.xticks(rotation=45)
pylab.legend( loc="lower right" )
pylab.show()
</snippet></ROW><ROW><id>8764973</id><snippet>python -c 'print "hello world"'</snippet></ROW><ROW><id>8765298</id><snippet>commit=False</snippet></ROW><ROW><id>8765298</id><snippet>ModelForm.save()</snippet></ROW><ROW><id>8765298</id><snippet>if form.is_valid():
    obj = form.save(commit=False)
    obj.user = request.user
    obj.save()
</snippet></ROW><ROW><id>8765322</id><snippet>class Foo(object):
    def __init__(self):
        self.bar = 'test'

im = Foo()
print im.bar.upper()
</snippet></ROW><ROW><id>8765322</id><snippet>im.bar</snippet></ROW><ROW><id>8765322</id><snippet>im.self.bar</snippet></ROW><ROW><id>8765322</id><snippet>self</snippet></ROW><ROW><id>8765322</id><snippet>__init__</snippet></ROW><ROW><id>8765322</id><snippet>im</snippet></ROW><ROW><id>8765322</id><snippet>self.bar</snippet></ROW><ROW><id>8765322</id><snippet>__init__</snippet></ROW><ROW><id>8765322</id><snippet>im.bar</snippet></ROW><ROW><id>8765592</id><snippet>scipy.linalg.eig</snippet></ROW><ROW><id>8765592</id><snippet>eig</snippet></ROW><ROW><id>8765592</id><snippet>chol</snippet></ROW><ROW><id>8765592</id><snippet>eig</snippet></ROW><ROW><id>8765592</id><snippet>scipy.linalg.eigh</snippet></ROW><ROW><id>8765592</id><snippet>&gt;&gt;&gt; eigh(C, eigvals_only=True)
array([ -3.73825923e-17,  -1.60154836e-17,   8.11704449e-19,
         3.65055777e-17,   7.90175615e-01])
</snippet></ROW><ROW><id>8765690</id><snippet>-i</snippet></ROW><ROW><id>8765690</id><snippet>python -i scriptname.py
</snippet></ROW><ROW><id>8765903</id><snippet>urllib</snippet></ROW><ROW><id>8765903</id><snippet># Use http://www.someproxy.com:3128 for http proxying
proxies = {'http': 'http://www.someproxy.com:3128'}
filehandle = urllib.urlopen(some_url, proxies=proxies)
</snippet></ROW><ROW><id>8765903</id><snippet>urlopen</snippet></ROW><ROW><id>8765960</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>8765960</id><snippet>from xml.dom import minidom

xml = """\
&lt;target depends="create-build-dir" name="build-Folio"&gt;
   &lt;property name="project.name" value="Folio"/&gt;
   &lt;ant antfile="build.xml" dir="Folio/FolioUI" inheritall="false" target="package"/&gt;
   &lt;ant antfile="build.xml" dir="Folio/Folio" inheritall="false" target="package"/&gt;
&lt;/target&gt;
"""

def comment_node(node):
    comment = node.ownerDocument.createComment(node.toxml())
    node.parentNode.replaceChild(comment, node)
    return comment

def uncomment_node(comment):
    node = minidom.parseString(comment.data).firstChild
    comment.parentNode.replaceChild(node, comment)
    return node

doc = minidom.parseString(xml).documentElement

comment_node(doc.getElementsByTagName('ant')[-1])

xml = doc.toxml()

print 'comment_node():\n'
print xml
print

doc = minidom.parseString(xml).documentElement

comment = doc.lastChild.previousSibling

print 're-parsed comment:\n'
print comment.toxml()
print

uncomment_node(comment)

print 'uncomment_node():\n'
print doc.toxml()
print
</snippet></ROW><ROW><id>8765960</id><snippet>comment_node():

&lt;target depends="create-build-dir" name="build-Folio"&gt;
   &lt;property name="project.name" value="Folio"/&gt;
   &lt;ant antfile="build.xml" dir="Folio/FolioUI" inheritall="false" target="package"/&gt;
   &lt;!--&lt;ant antfile="build.xml" dir="Folio/Folio" inheritall="false" target="package"/&gt;--&gt;
&lt;/target&gt;

re-parsed comment:

&lt;!--&lt;ant antfile="build.xml" dir="Folio/Folio" inheritall="false" target="package"/&gt;--&gt;

uncomment_node():

&lt;target depends="create-build-dir" name="build-Folio"&gt;
   &lt;property name="project.name" value="Folio"/&gt;
   &lt;ant antfile="build.xml" dir="Folio/FolioUI" inheritall="false" target="package"/&gt;
   &lt;ant antfile="build.xml" dir="Folio/Folio" inheritall="false" target="package"/&gt;
&lt;/target&gt;
</snippet></ROW><ROW><id>8766033</id><snippet>torrent1 = decode(open("test1.torrent", "rb").read())
torrent2 = decode(open("test2.torrent", "rb").read())

m = hashlib.sha1()
m.update(str(torrent1["info"]))
print m.hexdigest()

m = hashlib.sha1()
m.update(str(torrent2["info"]))
print m.hexdigest()
</snippet></ROW><ROW><id>8766129</id><snippet>@login_required</snippet></ROW><ROW><id>8766416</id><snippet>os.environ</snippet></ROW><ROW><id>8766416</id><snippet>XML = parse('%s/Data/Config.xml' % os.environ['SYNCTOOL'])
</snippet></ROW><ROW><id>8766623</id><snippet>sum(iterable)</snippet></ROW><ROW><id>8766623</id><snippet>sum([1,2,3])</snippet></ROW><ROW><id>8766623</id><snippet>6</snippet></ROW><ROW><id>8766637</id><snippet>import wx 


class MyFrame(wx.Frame): 
    """a frame with a panel"""
    def __init__(self, parent=None, id=wx.ID_ANY, title=None):
        wx.Frame.__init__(self, parent, wx.ID_ANY, title) 
        self.xcolor = (0, 0, 0)
        self.panel = wx.Panel(self, size=(350, 200)) 
        self.panel.Bind(wx.EVT_PAINT, self.on_paint)
        self.button2 = wx.Button(self.panel, id=wx.ID_ANY, label='Button2',
                                             pos=(8, 38), size=(175, 28))
        self.button2.Bind(wx.EVT_BUTTON, self.onColorDlg)

        self.Fit() 

    def onColorDlg(self, event):
        """
        This is mostly from the wxPython Demo!
        """
        dlg = wx.ColourDialog(None)
        dlg.GetColourData().SetChooseFull(True)

        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetColourData()
            self.xcolor = data.GetColour().Get()
            print 'You selected: %s\n' % str(self.xcolor)

        dlg.Destroy()
        self.panel.Refresh()

    def on_paint(self, event):
        dc = wx.PaintDC(self.panel)
        dc.SetPen(wx.Pen(self.xcolor, 2))
        rect = wx.Rect(50, 50, 100, 100) 
        dc.DrawRoundedRectangleRect(rect, 8)


# test it ...
app = wx.PySimpleApp() 
frame1 = MyFrame(title='rounded-rectangle &amp; circle') 
frame1.Center() 
frame1.Show() 
app.MainLoop()
</snippet></ROW><ROW><id>8766686</id><snippet>self.request.get</snippet></ROW><ROW><id>8766686</id><snippet>get</snippet></ROW><ROW><id>8766686</id><snippet>json.dumps(self.request.GET.items())
</snippet></ROW><ROW><id>8766686</id><snippet>request.GET</snippet></ROW><ROW><id>8766686</id><snippet>UnicodeMultiDict</snippet></ROW><ROW><id>8766686</id><snippet>request.GET.items()</snippet></ROW><ROW><id>8766686</id><snippet>(key, value</snippet></ROW><ROW><id>8767108</id><snippet>POST /some/url HTTP/1.0
Host: somehost

^
</snippet></ROW><ROW><id>8767119</id><snippet>_ScanRoot</snippet></ROW><ROW><id>8767119</id><snippet>for ext1 in self.extensions:
    chb = wx.CheckBox(self, wx.ID_ANY, ext1, wx.DefaultPosition, wx.DefaultSize, 0 )
    self.bSizer_Ext.Add(chb)
self.Layout()
</snippet></ROW><ROW><id>8767119</id><snippet>bSizer_Ext</snippet></ROW><ROW><id>8767119</id><snippet>self.bSizer_Ext</snippet></ROW><ROW><id>8767119</id><snippet>    def OnCheck(self, evt):
        """Here I will decide which actions to take"""
        obj = evt.GetEventObject()
        if obj.IsChecked():
            print "%s selected" % obj.Label
        else:
            print "%s deselected" % obj.Label

    # Virtual event handlers, overide them in your derived class
    def _ScanRoot( self, event ):
        ext = ''
        for root, dirs, files in os.walk(self.root_dir_pick.GetPath()):
            for f in files:
                try:
                    ext = os.path.splitext(f)
                    self.extensions.index(ext[1])
                except:
                    self.extensions.append(ext[1])
        for ext1 in self.extensions:
            chb = wx.CheckBox(self, wx.ID_ANY, ext1, wx.DefaultPosition, wx.DefaultSize, 0 )
            self.bSizer_Ext.Add(chb)
            self.Bind(wx.EVT_CHECKBOX, self.OnCheck, chb)
        self.Layout()
</snippet></ROW><ROW><id>8767253</id><snippet>ship_to = relation('Address', ...)
</snippet></ROW><ROW><id>8767253</id><snippet>AddressMixin</snippet></ROW><ROW><id>8767253</id><snippet>class AddressMixin(object):
    @declared_attr
    def street(cls):
        return Column(Text, ...)

class CustomerAddress(Base, AddressMixin):
    __tablename__ = 'customer_addresses'
    id = ...
</snippet></ROW><ROW><id>8767312</id><snippet>import pygame
from pygame.locals import*
img = pygame.image.load('clouds.bmp')

white = (255, 64, 64)
w = 640
h = 480
screen = pygame.display.set_mode((w, h))
screen.fill((white))
running = 1

while running:
    screen.fill((white))
    screen.blit(img,(0,0))
    pygame.display.flip()
</snippet></ROW><ROW><id>8767400</id><snippet>$(function() {
    var i = 1;
    $('a[href="/hello/doit.do"]').each(function() {
        $(this).attr('id', 'link_' + i);
        i += 1;
    });
});
</snippet></ROW><ROW><id>8767519</id><snippet>a[0]=3
</snippet></ROW><ROW><id>8767519</id><snippet>a=np.array(a,np.float)
</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767519</id><snippet>a</snippet></ROW><ROW><id>8767585</id><snippet>datetime.datetime</snippet></ROW><ROW><id>8767585</id><snippet>$ python manage.py sql &lt;appname&gt;
...
CREATE TABLE "&lt;appname&gt;_totals" (
"time" datetime NOT NULL PRIMARY KEY
)
;


$ sqlite3 &lt;database_filename&gt;
.schema &lt;app_name&gt;_totals
CREATE TABLE "&lt;app_name&gt;_totals" (
"time" datetime NOT NULL PRIMARY KEY
);
</snippet></ROW><ROW><id>8767786</id><snippet>sorted</snippet></ROW><ROW><id>8767786</id><snippet>sheet_list.sort(key = lambda ele : ele[1])
</snippet></ROW><ROW><id>8768134</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import Image
import ImageQt
import ImageEnhance
import time

class TestWidget(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.scene = QGraphicsScene()
        self.view = QGraphicsView(self.scene)
        self.button = QPushButton("Do test")

        layout = QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.view)
        self.setLayout(layout)

        self.button.clicked.connect(self.do_test)

    def do_test(self):
        img = Image.open('image.png')
        enhancer = ImageEnhance.Brightness(img)
        for i in range(1, 8):
            img = enhancer.enhance(i)
            self.display_image(img)
            QCoreApplication.processEvents()  # let Qt do his work
            time.sleep(0.5)

    def display_image(self, img):
        self.scene.clear()
        w, h = img.size
        self.imgQ = ImageQt.ImageQt(img)  # we need to hold reference to imgQ, or it will crash
        pixMap = QPixmap.fromImage(self.imgQ)
        self.scene.addPixmap(pixMap)
        self.view.fitInView(QRectF(0, 0, w, h), Qt.KeepAspectRatio)
        self.scene.update()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = TestWidget()
    widget.resize(640, 480)
    widget.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8768134</id><snippet>sleep</snippet></ROW><ROW><id>8768134</id><snippet>QCoreApplication.processEvents()</snippet></ROW><ROW><id>8768134</id><snippet>ImageQt.ImageQt</snippet></ROW><ROW><id>8768134</id><snippet>self.imgQ</snippet></ROW><ROW><id>8768134</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>8768134</id><snippet>scene.clear()</snippet></ROW><ROW><id>8768134</id><snippet>QGraphicsView.fitInView()</snippet></ROW><ROW><id>8768250</id><snippet>letter in 'OQ'</snippet></ROW><ROW><id>8768250</id><snippet>re.match('[OQ]', letter)</snippet></ROW><ROW><id>8768250</id><snippet>prefixes = 'JKLMNOPQ'
prefixes_taking_u = 'OQ'
suffix = 'ack'
for p in prefixes:
    u_part = 'u' if p in prefixes_taking_u else ''
    print p + u_part + suffix
</snippet></ROW><ROW><id>8768250</id><snippet>letter == ("O" or "Q")</snippet></ROW><ROW><id>8768250</id><snippet>("O" or "Q")</snippet></ROW><ROW><id>8768250</id><snippet>letter == "O"</snippet></ROW><ROW><id>8768250</id><snippet>letter == "O" or "Q"</snippet></ROW><ROW><id>8768250</id><snippet>letter == "O"</snippet></ROW><ROW><id>8768250</id><snippet>or</snippet></ROW><ROW><id>8768346</id><snippet>&gt;&gt;&gt; print '# \'// Warning: Render view: Selected region is too small // \r\ndefaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);\r\nrenderWindowRender redoPreviousRender renderView;\r\n'.replace(r'\r\n', '\n')
# '// Warning: Render view: Selected region is too small // 
defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);
renderWindowRender redoPreviousRender renderView;
</snippet></ROW><ROW><id>8768704</id><snippet>class A(Base):
    # ...
    def get_children(self, offset, count):
        # @todo: might need to handle some border cases
        qry = B.query.with_parent(self)
        #or: qry = object_session(self).query(B).with_parent(self)
        return qry[offset:offset+count]

my_a = session.query(A).get(a_id)
print my_a.get_children( 0, 10) # print first 10 children
print my_a.get_children(10, 10) # print second 10 children
</snippet></ROW><ROW><id>8768704</id><snippet>B</snippet></ROW><ROW><id>8768704</id><snippet>top N</snippet></ROW><ROW><id>8768704</id><snippet>A</snippet></ROW><ROW><id>8768704</id><snippet>sqlalchemy.sql.expression.over</snippet></ROW><ROW><id>8768704</id><snippet># @note: this is the subquery using *sqlalchemy.orm.over* function to limit number of rows
# this subquery is used for both queries below
# @note: the code below sorts Bs by id, but you can change it in order_by
subq = (session.query(
            B.__table__.c.id.label("b_id"), 
            over(func.row_number(), partition_by="a_id", order_by="id").label("rownum")
       ).subquery())
# this produces the following SQL (@note: the RDBMS should support the OVER...)
# &gt;&gt; SELECT b.id AS b_id, row_number() OVER (PARTITION BY a_id ORDER BY id) AS rownum FROM b
</snippet></ROW><ROW><id>8768704</id><snippet>A</snippet></ROW><ROW><id>8768704</id><snippet>B</snippet></ROW><ROW><id>8768704</id><snippet>A</snippet></ROW><ROW><id>8768704</id><snippet>B</snippet></ROW><ROW><id>8768704</id><snippet>def get_A_with_Bs_in_batch(b_limit=10):
    """ 
    @return: dict(A, [list of top *b_limit* A.b_s])  
    @note: uses 2 SQL statements, but does not screw up relationship.
    @note: if the relationship is requested via a_instance.b_s, the new SQL statement will be
    issued to load *all* related objects
    """
    qry_a = session.query(A)
    qry_b = (session.query(B)
            .join(subq, and_(subq.c.b_id == B.id, subq.c.rownum &lt;= b_limit))
            )
    a_s = qry_a.all()
    b_s = qry_b.all()
    res = dict((a, [b for b in b_s if b.a == a]) for a in a_s)
    return res
</snippet></ROW><ROW><id>8768704</id><snippet>TOP N Bs</snippet></ROW><ROW><id>8768704</id><snippet>A.b_s</snippet></ROW><ROW><id>8768704</id><snippet>def get_A_with_Bs_hack_relation(b_limit=10):
    """ 
    @return: dict(A, [list of top *b_limit* A.b_s])
    @note: the Bs are loaded as relationship A.b_s, but with the limit.
    """
    qry = (session.query(A)
            .outerjoin(B)
            # @note: next line will trick SA to load joined Bs as if they were *all* objects
            # of relationship A.b_s. this is a @hack: and one should discard/reset a session after this
            # kind of hacky query!!!
            .options(contains_eager(A.b_s))
            .outerjoin(subq, and_(subq.c.b_id == B.id, subq.c.rownum &lt;= b_limit))
            # @note: next line is required to make both *outerjoins* to play well together 
            # in order produce the right result
            .filter(or_(B.id == None, and_(B.id != None, subq.c.b_id != None)))
            )
    res = dict((a, a.b_s) for a in qry.all())
    return res
</snippet></ROW><ROW><id>8768748</id><snippet>return</snippet></ROW><ROW><id>8768748</id><snippet>seedresult = seed(addy)
</snippet></ROW><ROW><id>8768748</id><snippet>seedresult = None

def seed(addy):
    global seedresult
    ...
</snippet></ROW><ROW><id>8768975</id><snippet>"INSERT INTO cmt_errors(date, msg) VALUES (%s, %s)"
</snippet></ROW><ROW><id>8769255</id><snippet>request.html?param1=value1&amp;param2=value2</snippet></ROW><ROW><id>8769255</id><snippet>import urllib
params = urllib.urlencode({'param1': 'value1', 'param2': 'value2', 'value3': 'param3'})
url = "example.com?%s" % params
</snippet></ROW><ROW><id>8769393</id><snippet>import os
filepath = '/path/to/file'
modifytime1 = os.path.getmtime(filepath)
fp = open(filepath)
modifytime2 = os.path.getmtime(filepath)
if modifytime1 != modifytime2:
    print "File modified after opening"
</snippet></ROW><ROW><id>8769513</id><snippet>user.groups.all()</snippet></ROW><ROW><id>8769749</id><snippet>csv.py</snippet></ROW><ROW><id>8769749</id><snippet>import csv</snippet></ROW><ROW><id>8769749</id><snippet>myCsv.py</snippet></ROW><ROW><id>8769875</id><snippet>autodata</snippet></ROW><ROW><id>8769875</id><snippet>""" 
This module is...

Module variables:

* var1: var1 doc
* var2: var2 doc
"""

my_vars = [{'name': 'var1', 'value': 'first'},
           {'name': 'var2', 'value': 'second'}]

for var in my_vars:
    exec("{var[name]} = '{var[value]}'".format(var=var))

...
... 
</snippet></ROW><ROW><id>8769875</id><snippet>"""

:var var1: var1 doc
:var var2: var2 doc
"""
</snippet></ROW><ROW><id>8769875</id><snippet>str</snippet></ROW><ROW><id>8769875</id><snippet>from collections import UserString   

my_vars = [{'name': 'var1', 'value': 'first', "doc": "var1 docstring"},
           {'name': 'var2', 'value': 'second', "doc": "var2 docstring"}]

for var in my_vars:
    code = """\
{0} = UserString('{1}')
{0}.__doc__ = '{2}'""".format(var["name"], var["value"], var["doc"])
    exec(code)
</snippet></ROW><ROW><id>8769921</id><snippet>from twisted.internet import task

class Intake:
    def __init__(self):

        #
        # aggregate dict to store all the counters
        #
        self.counters = {}
        self.count = 0
        #
        # start a looping call to run reach minute
        #
        self.lc = task.LoopingCall(self.aggregate, self.counters)
        self.lc.start(1)


    def aggregate(self, counters):
        print '%d, %r, %r' % (self.count, counters, self.counters)
        self.count += 1
        self.counters = {}

if __name__ == "__main__":
    from twisted.internet import reactor
    r = Intake()
    reactor.run()
</snippet></ROW><ROW><id>8770044</id><snippet>files_names</snippet></ROW><ROW><id>8770044</id><snippet>Config</snippet></ROW><ROW><id>8770044</id><snippet>file_name_1</snippet></ROW><ROW><id>8770044</id><snippet>file_name_2</snippet></ROW><ROW><id>8770044</id><snippet>None</snippet></ROW><ROW><id>8770044</id><snippet>set_file_names</snippet></ROW><ROW><id>8770044</id><snippet>dict</snippet></ROW><ROW><id>8770044</id><snippet>file_name_1</snippet></ROW><ROW><id>8770044</id><snippet>file_name_2</snippet></ROW><ROW><id>8770044</id><snippet>set_file_names</snippet></ROW><ROW><id>8770044</id><snippet>Config.file_name_1 = whatever</snippet></ROW><ROW><id>8770044</id><snippet>self.file_name_1 = whatever</snippet></ROW><ROW><id>8770044</id><snippet>set_file_names</snippet></ROW><ROW><id>8770044</id><snippet>@classmethod</snippet></ROW><ROW><id>8770044</id><snippet>Config</snippet></ROW><ROW><id>8770044</id><snippet>Config()</snippet></ROW><ROW><id>8770094</id><snippet>spellnum.py</snippet></ROW><ROW><id>8770094</id><snippet>spellnum.py
spelling/
  __init__.py
  en.py
  es.py
</snippet></ROW><ROW><id>8770491</id><snippet>input</snippet></ROW><ROW><id>8770491</id><snippet>output = {}
for line in input:
    key, values = line.strip().split('=', 1)
    data = values.split(',')
    output['record' + key[5:]] = dict(name=data[0], addr=data[1], phone=data[2])
</snippet></ROW><ROW><id>8770491</id><snippet>input1</snippet></ROW><ROW><id>8770491</id><snippet>list</snippet></ROW><ROW><id>8770491</id><snippet>output = []
for line in input:
    values = line.strip().split('=', 1)[1]
    data = values.split(',')
    output.append(dict(name=data[0], addr=data[1], phone=data[2]))
</snippet></ROW><ROW><id>8770730</id><snippet>import pygame
import sys
import itertools

cloud_background = pygame.image.load('clouds.bmp')
brick_tile = pygame.image.load('brick_tile.png')

pink = (255, 64, 64)
w = 640
h = 480
screen = pygame.display.set_mode((w, h))
running = 1

def setup_background():
    screen.fill((pink))
    screen.blit(cloud_background,(0,0))
    brick_width, brick_height = brick_tile.get_width(), brick_tile.get_height()
    for x,y in itertools.product(range(0,610+1,brick_width),
                                 range(390,450+1,brick_height)):
        # print(x,y)
        screen.blit(brick_tile, (x, y))
    pygame.display.flip()

while running:
    setup_background()    
    event = pygame.event.poll()
    if event.type == pygame.QUIT: sys.exit()
</snippet></ROW><ROW><id>8771287</id><snippet>&lt;a href="/pmc/articles/PMC2586675/figure/F10/" class="icon-reflink figpopup"
 target="figure" onclick="return startTarget(this, 'figure', 1024, 800)"
 canvas-rid="_cid___pmc_articles_PMC2586675_bin_nihms61582f10_jpg_"&gt;
  &lt;div class="small-thumb-canvas"&gt;
    &lt;div class="small-thumb-canvas-1"&gt;
       &lt;img src="/pmc/articles/PMC2586675/bin/nihms61582f10.gif"
        class="icon-reflink small-thumb" alt="Scheme 1" title="Scheme 1"
        src-large="/pmc/articles/PMC2586675/bin/nihms61582f10.jpg"&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>8771287</id><snippet>DOMContent</snippet></ROW><ROW><id>8771287</id><snippet>Load</snippet></ROW><ROW><id>8771438</id><snippet>(?= (?:".*?"|\'.*?\'|[^&gt;]*?)+</snippet></ROW><ROW><id>8771438</id><snippet>(?= (?:[^&gt;"\']|(?&gt;".*?"|\'.*?\'))*?</snippet></ROW><ROW><id>8771438</id><snippet>attr="so&lt; m &gt;e"</snippet></ROW><ROW><id>8771438</id><snippet>&lt;input 
  (?=\s) 
  (?= (?:[^&gt;"\']|(?&gt;".*?"|\'.*?\'))*? (?&lt;=\s) class \s*=\s* ([\'"]) \s* csrftoken \s*\1 )
  (?= (?:[^&gt;"\']|(?&gt;".*?"|\'.*?\'))*? (?&lt;=\s) name  \s*=\s* ([\'"]) \s* csrftoken_reply \s*\2 )
  (?= (?:[^&gt;"\']|(?&gt;".*?"|\'.*?\'))*? (?&lt;=\s) type  \s*=\s* ([\'"]) \s* hidden \s*\3 )
  (?= (?:[^&gt;"\']|(?&gt;".*?"|\'.*?\'))*? (?&lt;=\s) value \s*=\s* ([\'"]) \s* (.*?)  \s*\4 )
  \s+ (?:".*?"|\'.*?\'|[^&gt;]*?)+ (?&lt;!/)
&gt;
</snippet></ROW><ROW><id>8771567</id><snippet>agent_eB.execute(init_event.eventcommand)
</snippet></ROW><ROW><id>8771567</id><snippet>agent_eb.execute((init_event.eventcommand,))
</snippet></ROW><ROW><id>8772109</id><snippet>User-Agent</snippet></ROW><ROW><id>8772109</id><snippet>User-Agent</snippet></ROW><ROW><id>8772109</id><snippet>urllib2</snippet></ROW><ROW><id>8772162</id><snippet>&lt;%namespace name="foo" file="${context['tmpl_context'].filename}"/&gt;
</snippet></ROW><ROW><id>8772162</id><snippet>&lt;%namespace name="foo" file="${context['c'].filename}"/&gt;
</snippet></ROW><ROW><id>8772194</id><snippet>PONG</snippet></ROW><ROW><id>8772194</id><snippet>PING</snippet></ROW><ROW><id>8772194</id><snippet>PONG :3C8E9173
</snippet></ROW><ROW><id>8772283</id><snippet>def pairwise(iterable):
    it = iter(iterable)
    last = next(it)+next(it)
    for curr in it:
        yield last, curr
        last = last[1]+curr


def valid_pair((last, curr)):
    return last[0] in valid and last[1] in valid and curr in valid
</snippet></ROW><ROW><id>8772410</id><snippet>from timeit import timeit
from cProfile import runctx
from dis import dis

def analyse(*args):
    victim = 'detartrated'
    number = 1000
    for func in args:
        print('\n%s\n' % ('#' * 50))
        name = func.__name__
        print('test: %s(%r): %r' % (name, victim, func(victim)))
        code = '%s(%r)' % (name, victim)
        duration = timeit(
            code, 'from __main__ import %s' % name, number=number)
        usec = 1000000 * duration / number
        print('time: %s: %.2f usec/pass\n' % (code, usec))
        runctx(code, globals(), locals())
        dis(func)

def check_palin1(victim):
    """ check progressively inner chars """
    x = 0
    # len/2 is num of iter needed for guarantee
    while x &lt; (len(victim)/2):
        # on pass n, compare nth letter and nth to last letter
        if victim[x+0] is victim[-(1+x)]:
            # then increment the n counter
            x += 1
        else:
            return False
    return True

def check_palin2(victim):
    """ check first and last chars repeatedly """
    tmp = []
    for i in victim:
        # convert string into list
        tmp.append(i)
    # if 1 or 0 char left, palin is guaranteed
    while len(tmp) &gt; 1:
        # if the first and last characters are the same letter
        if tmp[0] is tmp[-1]:
            # remove them both
            tmp.pop(0)
            tmp.pop(-1)
        else:
            return False
    return True

def check_palin3(victim):
    """ reverse string and compare to original using a loop """
    tmp = ""
    # for every letter
    for i in victim:
        # cat it to the beginning, not append
        tmp = i + tmp
    return tmp == victim

def check_palin4(victim):
    """ reverse string and compare to original using slice syntax """
    return victim == victim[::-1]

analyse(check_palin1, check_palin2, check_palin3, check_palin4)
</snippet></ROW><ROW><id>8772410</id><snippet>##################################################

test: check_palin1('detartrated'): True
time: check_palin1('detartrated'): 3.80 usec/pass

         9 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 test.py:20(check_palin1)
        6    0.000    0.000    0.000    0.000 {len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


 22           0 LOAD_CONST               1 (0)
              3 STORE_FAST               1 (x)

 24           6 SETUP_LOOP              72 (to 81)
        &gt;&gt;    9 LOAD_FAST                1 (x)
             12 LOAD_GLOBAL              0 (len)
             15 LOAD_FAST                0 (victim)
             18 CALL_FUNCTION            1
             21 LOAD_CONST               2 (2)
             24 BINARY_DIVIDE       
             25 COMPARE_OP               0 (&lt;)
             28 POP_JUMP_IF_FALSE       80

 26          31 LOAD_FAST                0 (victim)
             34 LOAD_FAST                1 (x)
             37 LOAD_CONST               1 (0)
             40 BINARY_ADD          
             41 BINARY_SUBSCR       
             42 LOAD_FAST                0 (victim)
             45 LOAD_CONST               3 (1)
             48 LOAD_FAST                1 (x)
             51 BINARY_ADD          
             52 UNARY_NEGATIVE      
             53 BINARY_SUBSCR       
             54 COMPARE_OP               8 (is)
             57 POP_JUMP_IF_FALSE       73

 28          60 LOAD_FAST                1 (x)
             63 LOAD_CONST               3 (1)
             66 INPLACE_ADD         
             67 STORE_FAST               1 (x)
             70 JUMP_ABSOLUTE            9

 30     &gt;&gt;   73 LOAD_GLOBAL              1 (False)
             76 RETURN_VALUE        
             77 JUMP_ABSOLUTE            9
        &gt;&gt;   80 POP_BLOCK           

 31     &gt;&gt;   81 LOAD_GLOBAL              2 (True)
             84 RETURN_VALUE        

##################################################

test: check_palin2('detartrated'): True
time: check_palin2('detartrated'): 10.57 usec/pass

         30 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 test.py:33(check_palin2)
        6    0.000    0.000    0.000    0.000 {len}
       11    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       10    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}


 35           0 BUILD_LIST               0
              3 STORE_FAST               1 (tmp)

 36           6 SETUP_LOOP              27 (to 36)
              9 LOAD_FAST                0 (victim)
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                19 (to 35)
             16 STORE_FAST               2 (i)

 38          19 LOAD_FAST                1 (tmp)
             22 LOAD_ATTR                0 (append)
             25 LOAD_FAST                2 (i)
             28 CALL_FUNCTION            1
             31 POP_TOP             
             32 JUMP_ABSOLUTE           13
        &gt;&gt;   35 POP_BLOCK           

 40     &gt;&gt;   36 SETUP_LOOP              75 (to 114)
        &gt;&gt;   39 LOAD_GLOBAL              1 (len)
             42 LOAD_FAST                1 (tmp)
             45 CALL_FUNCTION            1
             48 LOAD_CONST               1 (1)
             51 COMPARE_OP               4 (&gt;)
             54 POP_JUMP_IF_FALSE      113

 42          57 LOAD_FAST                1 (tmp)
             60 LOAD_CONST               2 (0)
             63 BINARY_SUBSCR       
             64 LOAD_FAST                1 (tmp)
             67 LOAD_CONST               3 (-1)
             70 BINARY_SUBSCR       
             71 COMPARE_OP               8 (is)
             74 POP_JUMP_IF_FALSE      106

 44          77 LOAD_FAST                1 (tmp)
             80 LOAD_ATTR                2 (pop)
             83 LOAD_CONST               2 (0)
             86 CALL_FUNCTION            1
             89 POP_TOP             

 45          90 LOAD_FAST                1 (tmp)
             93 LOAD_ATTR                2 (pop)
             96 LOAD_CONST               3 (-1)
             99 CALL_FUNCTION            1
            102 POP_TOP             
            103 JUMP_ABSOLUTE           39

 47     &gt;&gt;  106 LOAD_GLOBAL              3 (False)
            109 RETURN_VALUE        
            110 JUMP_ABSOLUTE           39
        &gt;&gt;  113 POP_BLOCK           

 48     &gt;&gt;  114 LOAD_GLOBAL              4 (True)
            117 RETURN_VALUE        

##################################################

test: check_palin3('detartrated'): True
time: check_palin3('detartrated'): 2.77 usec/pass

         3 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 test.py:50(check_palin3)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


 52           0 LOAD_CONST               1 ('')
              3 STORE_FAST               1 (tmp)

 54           6 SETUP_LOOP              24 (to 33)
              9 LOAD_FAST                0 (victim)
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                16 (to 32)
             16 STORE_FAST               2 (i)

 56          19 LOAD_FAST                2 (i)
             22 LOAD_FAST                1 (tmp)
             25 BINARY_ADD          
             26 STORE_FAST               1 (tmp)
             29 JUMP_ABSOLUTE           13
        &gt;&gt;   32 POP_BLOCK           

 57     &gt;&gt;   33 LOAD_FAST                1 (tmp)
             36 LOAD_FAST                0 (victim)
             39 COMPARE_OP               2 (==)
             42 RETURN_VALUE        

##################################################

test: check_palin4('detartrated'): True
time: check_palin4('detartrated'): 0.65 usec/pass

         3 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 test.py:59(check_palin4)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


 61           0 LOAD_FAST                0 (victim)
              3 LOAD_FAST                0 (victim)
              6 LOAD_CONST               1 (None)
              9 LOAD_CONST               1 (None)
             12 LOAD_CONST               2 (-1)
             15 BUILD_SLICE              3
             18 BINARY_SUBSCR       
             19 COMPARE_OP               2 (==)
             22 RETURN_VALUE        
</snippet></ROW><ROW><id>8772747</id><snippet>decor</snippet></ROW><ROW><id>8772747</id><snippet>def decor(function):
    def result():
        printf('decorated')
        return function()
    return result

def plonk():
    global decor
    decor = lambda x: x
    return None
</snippet></ROW><ROW><id>8772747</id><snippet>@decor
def my_foo(foo=plonk()):
    print('my_foo')
</snippet></ROW><ROW><id>8772747</id><snippet>def my_foo(foo=plonk()):
    print('my_foo')
my_foo = decor(my_foo)
</snippet></ROW><ROW><id>8772868</id><snippet>model.id</snippet></ROW><ROW><id>8772868</id><snippet>model = Model('some_title', 'some text')
session.add(model)

&lt;em&gt;&lt;strong&gt;session.flush()&lt;/strong&gt;&lt;/em&gt;
return HTTPFound(location='/ads/%s/%s' % (model.id, model.title))
</snippet></ROW><ROW><id>8772893</id><snippet>print (number + 3) * 2 - 4 - (number * 2) + 3
</snippet></ROW><ROW><id>8772893</id><snippet>3 * 2</snippet></ROW><ROW><id>8772893</id><snippet>print 5
</snippet></ROW><ROW><id>8772913</id><snippet>    for newcurr, cnt in d.items():
        cumulative += cnt
        if cumulative &gt; target:
            break

    curr = curr[1] + newcurr
</snippet></ROW><ROW><id>8772987</id><snippet>import matplotlib.pyplot as plt
import random
import numpy as np
import string

def generate_data(N = 20):
    data = [random.randrange(3) for x in range(N)]
    A = [i for i, x in enumerate(data) if x == 0]
    B = [i for i, x in enumerate(data) if x == 1]
    C = [i for i, x in enumerate(data) if x == 2]
    return A,B,C

def to_xy(*events):
    x, y = [], []
    for i,event in enumerate(events):
        y.extend([i]*len(event))
        x.extend(event)
    x, y = np.array(x), np.array(y)
    return x,y

def event_string(x,y):
    labels = np.array(list(string.uppercase))        
    seq = labels[y[np.argsort(x)]]
    return seq.tostring()

def plot_events(x,y):
    labels = np.array(list(string.uppercase))    
    plt.hlines(y, x, x+1, lw = 2, color = 'red')
    plt.ylim(max(y)+0.5, min(y)-0.5)
    plt.yticks(range(y.max()+1), labels)
    plt.show()

A,B,C = generate_data(20)
x,y = to_xy(A,B,C)
print(event_string(x,y))
plot_events(x,y)
</snippet></ROW><ROW><id>8772987</id><snippet>BBACBCACCABACCBCABCC
</snippet></ROW><ROW><id>8773046</id><snippet>sys.stdout</snippet></ROW><ROW><id>8773046</id><snippet>cmd.Cmd</snippet></ROW><ROW><id>8773046</id><snippet>import sys, cmd

class Std(object):
    def __getattribute__(self, name):
        if name in ('__getattribute__', '__setattr__'):
            return object.__getattribute__(self, name)
        else:
            return getattr(sys.__stdout__, name)

    def __setattr__(self, name, value):
        setattr(sys.__stdout__, name, value)

class HelloWorld(cmd.Cmd):
    FRIENDS = [ 'Alice', 'Adam', 'Barbara', 'Bob' ]

    def do_greet(self, person):
        "Greet the person"
        if person and person in self.FRIENDS:
            greeting = 'hi, %s!' % person
        elif person:
            greeting = "hello, " + person
        else:
            greeting = 'hello'
        print greeting

    def complete_greet(self, text, line, begidx, endidx):
        if not text:
            completions = self.FRIENDS[:]
        else:
            completions = [f for f in self.FRIENDS
                           if f.startswith(text)]
        return completions

    def do_EOF(self, line):
        return True

if __name__ == '__main__':

    HelloWorld(stdout=Std()).cmdloop()
</snippet></ROW><ROW><id>8773046</id><snippet>Cmd</snippet></ROW><ROW><id>8773046</id><snippet>stdout</snippet></ROW><ROW><id>8773046</id><snippet>Cmd</snippet></ROW><ROW><id>8773217</id><snippet>pickle</snippet></ROW><ROW><id>8773217</id><snippet>Rprotobuf</snippet></ROW><ROW><id>8773217</id><snippet>pickle</snippet></ROW><ROW><id>8773217</id><snippet>.Rdat</snippet></ROW><ROW><id>8773217</id><snippet>.Rdat</snippet></ROW><ROW><id>8773446</id><snippet>"MySQLdb"</snippet></ROW><ROW><id>8773446</id><snippet>"mysql-python"</snippet></ROW><ROW><id>8773523</id><snippet>pygame.image.load(Mario_sideways_sprite_2xL.png)
</snippet></ROW><ROW><id>8773523</id><snippet>pygame.image.load("Mario_sideways_sprite_2xL.png")
</snippet></ROW><ROW><id>8773523</id><snippet>class plumber(sprite)</snippet></ROW><ROW><id>8773523</id><snippet>plumber(Sprite)</snippet></ROW><ROW><id>8773523</id><snippet>Plumber(Sprite)</snippet></ROW><ROW><id>8773523</id><snippet>myplumber = Plumber()
allsprites = pygame.sprite.RenderPlain((myplumber, ....))
clock = pygame.time.Clock()
</snippet></ROW><ROW><id>8773530</id><snippet>import logging
l = logging.getLogger('django.db.backends')
l.setLevel(logging.DEBUG)
l.addHandler(logging.StreamHandler())
</snippet></ROW><ROW><id>8773829</id><snippet>def iterskip(iterator, test, n):
    """Iterate skipping values matching test, and n following values"""
    iterator = iter(iterator)
    while 1:
        value = next(iterator)
        if test(value):
            for dummy in range(n):
                next(iterator)
        else:
            yield value

def is_foo(value):
    return value == 'foo'

print list(iterskip(values, is_foo, 2))
</snippet></ROW><ROW><id>8773905</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; '{0:.2f}'.format(decimal.Decimal((pow(2,70)-2)))
1180591620717411303422.00
</snippet></ROW><ROW><id>8773966</id><snippet>readlines()</snippet></ROW><ROW><id>8773966</id><snippet>lines = (line.strip() for line in open("out2.txt"))
</snippet></ROW><ROW><id>8773966</id><snippet>readlines()</snippet></ROW><ROW><id>8774155</id><snippet>myUnicode = u'\u4f60\u597d'
</snippet></ROW><ROW><id>8774155</id><snippet>mystr = myUnicode.encode('utf-8')
</snippet></ROW><ROW><id>8774188</id><snippet>[:]</snippet></ROW><ROW><id>8774188</id><snippet>from copy import deepcopy
list2 = deepcopy(list1)
</snippet></ROW><ROW><id>8774188</id><snippet>from copy import deepcopy

list1 = [[1], [1]]
list2 = list1[:]   # while id(list1) != id(list2), it's items have the same id()s
list3 = deepcopy(list1)

list1[0] += [3]

print list1
print list2
print list3
</snippet></ROW><ROW><id>8774188</id><snippet>[[1, 3], [1]]  # list1
[[1, 3], [1]]  # list2
[[1], [1]]     # list3 - unaffected by reference-madness
</snippet></ROW><ROW><id>8774644</id><snippet>cx_Freeze-4.2.3.win-amd64-py3.2.‌exe</snippet></ROW><ROW><id>8774644</id><snippet>C:\Python32\Scripts</snippet></ROW><ROW><id>8774644</id><snippet>@echo off</snippet></ROW><ROW><id>8774644</id><snippet>X:\Python32\python.exe X:\Python32\Scripts\cxfreeze %*</snippet></ROW><ROW><id>8774644</id><snippet>@echo off</snippet></ROW><ROW><id>8774644</id><snippet>C:\Python32\python.exe C:\Python32\Scripts\cxfreeze %*</snippet></ROW><ROW><id>8774644</id><snippet>C:\Python32\Scripts</snippet></ROW><ROW><id>8774644</id><snippet>Microsoft Windows [Versión 6.1.7601]
Copyright (c) 2009 Microsoft Corporation. Reservados todos los derechos.

C:\&gt;cd c:\Python32\Scripts

c:\Python32\Scripts&gt;cxfreeze.bat "C:\Users\pc user\Documents\First project\Main.py"
copying C:\Python32\lib\site-packages\cx_Freeze\bases\Console.exe -&gt; c:\Python32\Scripts\d
ist\Main.exe
copying C:\Windows\system32\python32.dll -&gt; c:\Python32\Scripts\dist\python32.dll
...............................................
................................................. 
m zipimport
m zlib

copying C:\Python32\DLLs\bz2.pyd -&gt; c:\Python32\Scripts\dist\bz2.pyd
copying C:\Python32\DLLs\unicodedata.pyd -&gt; c:\Python32\Scripts\dist\unicodedata.pyd

c:\Python32\Scripts&gt;
</snippet></ROW><ROW><id>8774644</id><snippet>C:\Python32\Scripts\</snippet></ROW><ROW><id>8774732</id><snippet>self.socket.bind(("", MULTICAST_PORT))
</snippet></ROW><ROW><id>8774732</id><snippet>$ python multicast.py -s --sp 20000
$ python multicast.py -c --sip localhost --sp 20000
</snippet></ROW><ROW><id>8774748</id><snippet>FROB_METHOD_REGISTER = []
def frob_method(fn):
    def decorate_frob(fn):
        FROB_METHOD_REGISTER.add(fn.__name__)
        return fn
    return decorate_frob

class WidgetFrobber:
    def get_frob_methods(self):
        return [getattr(self, method) for method in FROB_METHOD_REGISTER]

    @frob_method
    def simpleFrobAttempt(widget, data):
        # fastest way, might not work
    @frob_method
    def cleverFrobAttempt(widget, data):
        # fiddly, fast, and doesn't always work
    @frob_method
    def boringFrobAttempt(widget, data):
        # works most of the time, often slow
    @frob_method
    def desperateFrobAttempt(widget, data):
        # doesn't always work, pathetically slow
</snippet></ROW><ROW><id>8774748</id><snippet>for method in my_widget_frobber.get_frob_methods():
    #do your thing
</snippet></ROW><ROW><id>8774748</id><snippet>__dict__</snippet></ROW><ROW><id>8774748</id><snippet>[fn for name, fn in WidgetFrobber.__dict__.iteritems() if "FrobAttempt" in name]
</snippet></ROW><ROW><id>8774748</id><snippet>__dict__</snippet></ROW><ROW><id>8774932</id><snippet>SafeUnicode</snippet></ROW><ROW><id>8774932</id><snippet>SafeString</snippet></ROW><ROW><id>8774932</id><snippet>django.utils.safestring.mark_safe</snippet></ROW><ROW><id>8774932</id><snippet>&gt;&gt;&gt; from django.utils.safestring import mark_safe
&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; Template("{{ name }}").render(Context({'name': mark_safe('&lt;b&gt;Brad&lt;/b&gt;')}))
u"&lt;b&gt;Brad&lt;/b&gt;"
</snippet></ROW><ROW><id>8774932</id><snippet>render()</snippet></ROW><ROW><id>8774932</id><snippet>is_safe = True</snippet></ROW><ROW><id>8774932</id><snippet>@register.filter
def myfilter(value):
    return value
myfilter.is_safe = True
</snippet></ROW><ROW><id>8775008</id><snippet>try ... finally ...</snippet></ROW><ROW><id>8775008</id><snippet>f</snippet></ROW><ROW><id>8775008</id><snippet>NameError</snippet></ROW><ROW><id>8775008</id><snippet>finally</snippet></ROW><ROW><id>8775008</id><snippet>f</snippet></ROW><ROW><id>8775008</id><snippet>with</snippet></ROW><ROW><id>8775008</id><snippet>f = open(my_file)

try:
    do_stuff_that_fails()
finally:
    f.close()
</snippet></ROW><ROW><id>8775008</id><snippet>except</snippet></ROW><ROW><id>8775008</id><snippet>try:
    f = open(my_file)

    try:
        do_stuff_that_fails()
    except EXPECTED_EXCEPTION_TYPES as e:
        do_stuff_when_it_doesnt_work()
    finally:
        f.close()

except (IOError, OSError) as e:
    do_other_stuff_when_it_we_have_file_IO_problems()
</snippet></ROW><ROW><id>8775008</id><snippet>f.close()</snippet></ROW><ROW><id>8775008</id><snippet>with</snippet></ROW><ROW><id>8775008</id><snippet>decimal</snippet></ROW><ROW><id>8775008</id><snippet>os.walk</snippet></ROW><ROW><id>8775026</id><snippet>threading</snippet></ROW><ROW><id>8775026</id><snippet>multiprocessing</snippet></ROW><ROW><id>8775026</id><snippet>Thread</snippet></ROW><ROW><id>8775026</id><snippet>Process</snippet></ROW><ROW><id>8775071</id><snippet>help</snippet></ROW><ROW><id>8775071</id><snippet>pydoc</snippet></ROW><ROW><id>8775071</id><snippet>&gt;&gt;&gt; import numpy, inspect
&gt;&gt;&gt; def sig(func):
...     argspec = inspect.getargspec(func)
...     return func.__name__ + inspect.formatargspec(*argspec)
... 
&gt;&gt;&gt; print sig(numpy.polydiv)
polydiv(u, v)
</snippet></ROW><ROW><id>8775183</id><snippet>merge()</snippet></ROW><ROW><id>8775183</id><snippet>merge()</snippet></ROW><ROW><id>8775183</id><snippet>&gt;&gt;&gt; merge([1, 5], [2, 7])
[1, 2, 5]
</snippet></ROW><ROW><id>8775183</id><snippet>left</snippet></ROW><ROW><id>8775183</id><snippet>right</snippet></ROW><ROW><id>8775183</id><snippet>merged</snippet></ROW><ROW><id>8775499</id><snippet>(color[0] != "a") or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k"</snippet></ROW><ROW><id>8775499</id><snippet>color[0] == 'a'</snippet></ROW><ROW><id>8775499</id><snippet>color[0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')</snippet></ROW><ROW><id>8775499</id><snippet>&gt;=</snippet></ROW><ROW><id>8775576</id><snippet>+=</snippet></ROW><ROW><id>8775576</id><snippet>extend</snippet></ROW><ROW><id>8775576</id><snippet>a = [1,2,3]
a.extend(set([4,5,6]))
</snippet></ROW><ROW><id>8775576</id><snippet>a = [1,2,3]
a += set([4,5,6])
</snippet></ROW><ROW><id>8775576</id><snippet>[item for sublist in l for item in sublist] is faster.
</snippet></ROW><ROW><id>8775580</id><snippet>class bookentry(dict):
    def __init__(self,n):
        self.d = {}
        # rest of your constructor
</snippet></ROW><ROW><id>8775580</id><snippet>class person(bookentry):
    def foo(self,bar):
       self.d[bar] = ...

person().foo(bar)
</snippet></ROW><ROW><id>8775580</id><snippet>class Person(bookEntry):
    def __init__(self, n):
        super(Person, self).__init__()
        self.n = n
        print '%s has been created' % (self.n)
</snippet></ROW><ROW><id>8775633</id><snippet>import random
import time
import collections
import cProfile

LIST_LEN = 14000

def timefunc(f):
    t = time.time()
    f()
    return time.time() - t


def random_string(length=3):
    """Return a random string of given length"""
    return "".join([chr(random.randint(65, 90)) for i in range(length)])


class Profiler:
    def __init__(self):
        self.original = [[random_string() for i in range(LIST_LEN)]
                            for j in range(4)]

    def old_method(self):
        self.ListVar = self.original[:]
        for b in range(len(self.ListVar)):
            self.list1 = []
            self.temp = []
            for n in range(len(self.ListVar[b])):
                if not self.ListVar[b][n] in self.temp:
                    self.list1.insert(n, self.ListVar[b][n] + '(' +    str(self.ListVar[b].count(self.ListVar[b][n])) + ')')
                    self.temp.insert(0, self.ListVar[b][n])

            self.ListVar[b] = list(self.list1)
        return self.ListVar

    def new_method(self):
        self.ListVar = self.original[:]
        for i, inner_lst in enumerate(self.ListVar):
            freq_dict = collections.defaultdict(int)
            # create frequency dictionary
            for e in inner_lst:
                freq_dict[e] += 1
            temp = set()
            ret = []
            for e in inner_lst:
                if e not in temp:
                    ret.append(e + '(' + str(freq_dict[e]) + ')')
                    temp.add(e)
            self.ListVar[i] = ret
        return self.ListVar

    def time_and_confirm(self):
        """
        Time the old and new methods, and confirm they return the same value
        """
        time_a = time.time()
        l1 = self.old_method()
        time_b = time.time()
        l2 = self.new_method()
        time_c = time.time()

        # confirm that the two are the same
        assert l1 == l2, "The old and new methods don't return the same value"

        return time_b - time_a, time_c - time_b

p = Profiler()
print p.time_and_confirm()
</snippet></ROW><ROW><id>8775633</id><snippet>import time
NUM_RANGE = 100000000

from multiprocessing  import Process

def timefunc(f):
    t = time.time()
    f()
    return time.time() - t

def multi():
    class MultiProcess(Process):
        def __init__(self):
            Process.__init__(self)

        def run(self):
            # Alter string + test processing speed
            for i in xrange(NUM_RANGE):
                a = 20 * 20

    thread1 = MultiProcess()
    thread2 = MultiProcess()
    thread1.start()
    thread2.start()
    thread1.join()
    thread2.join()

def single():
    for i in xrange(NUM_RANGE):
        a = 20 * 20

    for i in xrange(NUM_RANGE):
        a = 20 * 20

print timefunc(multi) / timefunc(single)
</snippet></ROW><ROW><id>8775664</id><snippet>A.a = 'a_b'
</snippet></ROW><ROW><id>8775664</id><snippet>C.B.__init__</snippet></ROW><ROW><id>8775664</id><snippet>A</snippet></ROW><ROW><id>8775664</id><snippet>C.A</snippet></ROW><ROW><id>8775664</id><snippet>C.A.a = 'a_b'
</snippet></ROW><ROW><id>8775664</id><snippet>__init__</snippet></ROW><ROW><id>8775664</id><snippet>C.B.__init__</snippet></ROW><ROW><id>8775664</id><snippet>C.A.__init__(self)
</snippet></ROW><ROW><id>8775664</id><snippet>A.__init__(self)
</snippet></ROW><ROW><id>8775724</id><snippet>import re

pattern = re.compile(r'^cfn(\d+)e(\d+)')
a, b = pattern.match('cfn99e1195_1.lp').groups()
</snippet></ROW><ROW><id>8775772</id><snippet>def foo(...):</snippet></ROW><ROW><id>8775772</id><snippet>foo()</snippet></ROW><ROW><id>8775894</id><snippet>SELECT (n * A + m * B) AS C, *
  FROM T
 ORDER BY C DESC; -- or ORDER BY 1 DESC
</snippet></ROW><ROW><id>8775894</id><snippet>SELECT *
  FROM T
 ORDER BY (n * A + m * B) DESC;
</snippet></ROW><ROW><id>8775922</id><snippet>itertools.product((0,1), repeat=4)
</snippet></ROW><ROW><id>8775922</id><snippet>product</snippet></ROW><ROW><id>8775922</id><snippet>repeat</snippet></ROW><ROW><id>8775922</id><snippet>itertools.product((0, 1), (0, 1), (0, 1), (0, 1))</snippet></ROW><ROW><id>8775922</id><snippet>lst = [1, 2, 4, 6, 8, ...]
</snippet></ROW><ROW><id>8775922</id><snippet>f(1, 2, 4, 6, 8, ...)
</snippet></ROW><ROW><id>8775922</id><snippet>*</snippet></ROW><ROW><id>8775922</id><snippet>f(*lst)
</snippet></ROW><ROW><id>8775936</id><snippet>y = np.zeros(len(x))
y.file(i)
</snippet></ROW><ROW><id>8775972</id><snippet>tofile</snippet></ROW><ROW><id>8775972</id><snippet>save</snippet></ROW><ROW><id>8776125</id><snippet>QTableWidget</snippet></ROW><ROW><id>8776125</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>8776125</id><snippet>QTableWidget.setItem</snippet></ROW><ROW><id>8776125</id><snippet>entries = []
with open('data') as input:
    for line in input:
        entries.append(line.strip().split('\t'))

tableWidget.setRowCount(len(entries))
tableWidget.setColumnCount(len(entries[0]))

for i, row in enumerate(entries):
    for j, col in enumerate(row):
        item = QTableWidgetItem(col)
        tableWidget.setItem(i, j, item)
</snippet></ROW><ROW><id>8776125</id><snippet>data</snippet></ROW><ROW><id>8776125</id><snippet>tableWidget</snippet></ROW><ROW><id>8776125</id><snippet>QTableWidget</snippet></ROW><ROW><id>8776254</id><snippet>    cn = httplib.HTTPSConncetion(post_url,httplib.HTTPS_PORT)
</snippet></ROW><ROW><id>8776258</id><snippet>def _sort(_list):
    buckets=[0]*len(_list)
    for i in _list:
        i=int(i)
        assert(0&lt;=i&lt;len(_list))
        buckets[i]+=1
    result=[]
    for num,count in enumerate(buckets):
        result.extend([num]*count)
    return result



alp=map(ord,list("dabce"))
m=min(alp)
alp=[i-m for i in alp]
alp=_sort(alp)
alp=[i+m for i in alp]
alp=map(chr,alp)

print zip(_sort([1,3,2,0,4]),alp)
#[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e')]
</snippet></ROW><ROW><id>8776262</id><snippet>sudo updatedb
locate django/contrib/admin/media/
</snippet></ROW><ROW><id>8776480</id><snippet>lxml.html.tostring</snippet></ROW><ROW><id>8776480</id><snippet>print lxml.html.tostring(el)
</snippet></ROW><ROW><id>8776555</id><snippet>import datetime
d = datetime.datetime.now()
print (d.strftime("%d-%b-%Y %H:%M:%S"))
</snippet></ROW><ROW><id>8776688</id><snippet>def parse(self, response):
    ...
    image_relative_url = hxs.select("...").extract()[0]
    import urlparse
    image_absolute_url = urlparse.urljoin(response.url, image_relative_url.strip())
    item['image_urls'] = [image_absolute_url]
    ...
</snippet></ROW><ROW><id>8776688</id><snippet>item['image_urls'] = 'http://www.domain.com' + item['image_urls']
</snippet></ROW><ROW><id>8776752</id><snippet>sudo apt-get install python-mechanize
</snippet></ROW><ROW><id>8776862</id><snippet>subplot_adjust</snippet></ROW><ROW><id>8776862</id><snippet>from matplotlib.pyplot import *
fig = figure(1, figsize=(3.25, 3))
plot([0, 1, 5, 2, 9])
title('title')
xlabel('xAxis')
ylabel('yAxis')
subplots_adjust(bottom=0.14)   # &lt;--
fig.savefig('test.png', dpi=600) 
</snippet></ROW><ROW><id>8776862</id><snippet>show()</snippet></ROW><ROW><id>8776862</id><snippet>from matplotlib.pyplot import *
fig = figure(1, figsize=(6.5, 6))   # &lt;---
plot([0, 1, 5, 2, 9])
title('title')
xlabel('xAxis')
ylabel('yAxis')
fig.savefig('test.png', dpi=300)    # &lt;---
</snippet></ROW><ROW><id>8776871</id><snippet>cmp</snippet></ROW><ROW><id>8776871</id><snippet>import locale
locale.setlocale(locale.LC_ALL, "C")
yourList.sort(cmp=locale.strcoll)
</snippet></ROW><ROW><id>8776959</id><snippet>from dis import dis

def foo(a, (b, c) ,d):
    return a + b + c + d

def bar(a, b_c, d):
    b, c = b_c
    return a + b + c + d

def baz(a, b, c, d):
    return a + b + c + d

print '\nfoo:'
dis(foo)
print '\nbar:'
dis(bar)
print '\nbaz:'
dis(baz)
</snippet></ROW><ROW><id>8776959</id><snippet>foo:
  3           0 LOAD_FAST                1 (.1)
              3 UNPACK_SEQUENCE          2
              6 STORE_FAST               3 (b)
              9 STORE_FAST               4 (c)

  4          12 LOAD_FAST                0 (a)
             15 LOAD_FAST                3 (b)
             18 BINARY_ADD          
             19 LOAD_FAST                4 (c)
             22 BINARY_ADD          
             23 LOAD_FAST                2 (d)
             26 BINARY_ADD          
             27 RETURN_VALUE        


bar:
  7           0 LOAD_FAST                1 (b_c)
              3 UNPACK_SEQUENCE          2
              6 STORE_FAST               3 (b)
              9 STORE_FAST               4 (c)

  8          12 LOAD_FAST                0 (a)
             15 LOAD_FAST                3 (b)
             18 BINARY_ADD          
             19 LOAD_FAST                4 (c)
             22 BINARY_ADD          
             23 LOAD_FAST                2 (d)
             26 BINARY_ADD          
             27 RETURN_VALUE        


baz:
 11           0 LOAD_FAST                0 (a)
              3 LOAD_FAST                1 (b)
              6 BINARY_ADD          
              7 LOAD_FAST                2 (c)
             10 BINARY_ADD          
             11 LOAD_FAST                3 (d)
             14 BINARY_ADD          
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>8776959</id><snippet>foo</snippet></ROW><ROW><id>8776959</id><snippet>bar</snippet></ROW><ROW><id>8776959</id><snippet>baz</snippet></ROW><ROW><id>8777172</id><snippet>oldstdout = sys.stdout
</snippet></ROW><ROW><id>8777172</id><snippet>sys.stdout</snippet></ROW><ROW><id>8777172</id><snippet>del</snippet></ROW><ROW><id>8777172</id><snippet>__del__</snippet></ROW><ROW><id>8777172</id><snippet>__del__</snippet></ROW><ROW><id>8777172</id><snippet>__del__</snippet></ROW><ROW><id>8777172</id><snippet>sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>8777627</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; dataINeed = np.arange(3)
&gt;&gt;&gt; dataINeed
array([0, 1, 2])
&gt;&gt;&gt; data = np.array([5,7,9,1,5,3,7,1,2,0])
&gt;&gt;&gt; dataINeedset = set(dataINeed)
&gt;&gt;&gt; np.array([x in dataINeedset for x in data])
array([False, False, False,  True, False, False, False,  True,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>8778040</id><snippet>conf2/__init__.py</snippet></ROW><ROW><id>8778040</id><snippet>from conf import general
</snippet></ROW><ROW><id>8778040</id><snippet>import conf.general
</snippet></ROW><ROW><id>8778040</id><snippet>$ find .
.
./conf
./conf/__init__.py
./conf/general.py
./conf2
./conf2/__init__.py

$ python
Python 2.6.1 (r261:67515, Aug  2 2010, 20:10:18) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import conf2
&gt;&gt;&gt; conf2.general
&lt;module 'conf.general' from 'conf/general.pyc'&gt;
</snippet></ROW><ROW><id>8778040</id><snippet>&gt;&gt;&gt; conf2.conf.general
&lt;module 'conf.general' from 'conf/general.pyc'&gt;
</snippet></ROW><ROW><id>8778704</id><snippet>generator_tools</snippet></ROW><ROW><id>8778704</id><snippet>picklegenerator</snippet></ROW><ROW><id>8778851</id><snippet>with</snippet></ROW><ROW><id>8778851</id><snippet>finally:worker.close()</snippet></ROW><ROW><id>8778851</id><snippet>import logging
import proconex

class IntegerProducer(proconex.Producer):
    def items(self):
        for item in xrange(10):
            logging.info('produce %d', item)
            yield item

class IntegerConsumer(proconex.Consumer):
    def consume(self, item):
        logging.info('consume %d with %s', item, self.name)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    producer = IntegerProducer()
    consumer1 = IntegerConsumer('consumer1')
    consumer2 = IntegerConsumer('consumer2')

    with proconex.Worker(producer, [consumer1, consumer2]) as worker:
        worker.work()
</snippet></ROW><ROW><id>8778909</id><snippet>gethostbyname()</snippet></ROW><ROW><id>8778909</id><snippet>lns.sa</snippet></ROW><ROW><id>8778909</id><snippet>67.215.65.132</snippet></ROW><ROW><id>8778909</id><snippet>hit-nxdomain.opendns.com.</snippet></ROW><ROW><id>8778913</id><snippet>blog/2010/01/05</snippet></ROW><ROW><id>8778913</id><snippet>hyde gen</snippet></ROW><ROW><id>8778913</id><snippet>hyde serve</snippet></ROW><ROW><id>8778920</id><snippet>list = []
</snippet></ROW><ROW><id>8778920</id><snippet>list.append(self)
</snippet></ROW><ROW><id>8779164</id><snippet>PkgInfo={}
Tags=['Package', 'Section', 'Name']


for line in reader.readlines():
    entry = line.strip().split(': ', 2)
    if len(entry) != 2:
        continue
    element, value = entry[0], entry[1]
    if element in Tags:
        PkgInfo[element] = value

print PkgInfo
</snippet></ROW><ROW><id>8779164</id><snippet>Tags</snippet></ROW><ROW><id>8779164</id><snippet>Tags</snippet></ROW><ROW><id>8779164</id><snippet>tags</snippet></ROW><ROW><id>8779164</id><snippet>split.line</snippet></ROW><ROW><id>8779164</id><snippet>line.split()</snippet></ROW><ROW><id>8779184</id><snippet>ShowMap()</snippet></ROW><ROW><id>8779184</id><snippet>getImages()</snippet></ROW><ROW><id>8779184</id><snippet>def getImages(self, img_list) :
    nb_img = len(img_list)
    i = 1.0
    for img in img_list :
        self.progress_interface.set_progress(i, nb_img)
        gtk.gdk.threads_enter()
        get_maps.download_image(img)
        gtk.gdk.threads_leave()
        i += 1.0
        yield True
    self.progress_interface.progress_bar.set_text("Les images sont à jour")
    self.progress_interface.progress_bar.set_fraction(1)
    thread.start_new_thread(self.ShowMap, ()) # Here
    yield False
</snippet></ROW><ROW><id>8779184</id><snippet>gtk.IconView</snippet></ROW><ROW><id>8779184</id><snippet>gobject.idle_add()</snippet></ROW><ROW><id>8779184</id><snippet>def getImages(self, img_list) :
    nb_img = len(img_list)
    i = 1.0
    for img in img_list :
        self.progress_interface.set_progress(i, nb_img)
        gtk.gdk.threads_enter()
        get_maps.download_image(img)
        gtk.gdk.threads_leave()
        i += 1.0
        yield True
    self.progress_interface.progress_bar.set_text("Les images sont à jour")
    self.progress_interface.progress_bar.set_fraction(1)
    map_loading = self.loadMap()
    gobject.idle_add(map_loading.next)
    yield False

    def loadMap(self, step=128) :
    i = 1.0
    nb_tiles = len(self.graph) * len(self.graph[0])
    self.grid.iconview.freeze_child_notify()
    for row in self.graph :
        for col in row :
            ...
            self.grid.listStore.append(...)
            self.progress_interface.progressbar_map.set_fraction(i/nb_tiles)
            self.progress_interface.progressbar_map.set_text("Chargement des tuiles en cours ...")
            i += 1.0
            if (i % step) == 0:
                self.grid.iconview.thaw_child_notify()
                yield True
                self.grid.iconview.freeze_child_notify()
    self.grid.iconview.set_model(self.grid.listStore)
    self.grid.iconview.thaw_child_notify()
    yield False
</snippet></ROW><ROW><id>8779285</id><snippet>os.walk</snippet></ROW><ROW><id>8779285</id><snippet>find</snippet></ROW><ROW><id>8779285</id><snippet>find</snippet></ROW><ROW><id>8779352</id><snippet>&gt;&gt;&gt; from numpy import cov
&gt;&gt;&gt; cov([1, 2, 3], [2, 12, 14])
array([[  1.        ,   6.        ],
       [  6.        ,  41.33333333]])
</snippet></ROW><ROW><id>8779380</id><snippet>print(repr(input("put y: "))</snippet></ROW><ROW><id>8779380</id><snippet>input("put y:").strip().lower() == "y"
</snippet></ROW><ROW><id>8779543</id><snippet>list</snippet></ROW><ROW><id>8779543</id><snippet>input</snippet></ROW><ROW><id>8779543</id><snippet>z = numpy.add(x, y)</snippet></ROW><ROW><id>8779543</id><snippet>z = x + y</snippet></ROW><ROW><id>8779543</id><snippet>x</snippet></ROW><ROW><id>8779543</id><snippet>y</snippet></ROW><ROW><id>8779543</id><snippet>x += 1</snippet></ROW><ROW><id>8779543</id><snippet>x = x + 1</snippet></ROW><ROW><id>8779543</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>8779543</id><snippet>import random
import itertools
import numpy
import scipy.io.wavfile

def main():
    """Read a wav file and shuffle the negative and positive pieces."""
    # Use unpacking to your advantage, and avoid using "input" as a var name
    samplerate, data = scipy.io.wavfile.read('sample.wav')     

    # Note, my sample.wav is stereo, so I'm going to just work with one channel
    # If yours is mono, you'd want to just pass "data" directly in
    left, right = data.T

    wavchunks = process_wav(left)  
    output = shuffle_wav(wavchunks).astype(numpy.int16)
    print get_fitness(output, samplerate)

    scipy.io.wavfile.write('output.wav', 44100, output)

def process_wav(wavdata):
    """Read a wav file data array, detect zero crossings, 
    split at zero crossings, and return a list of numpy arrays"""

    # I prefer nonzero to where, but either works in this case...
    zerocrossings, = numpy.diff(numpy.sign(wavdata)).nonzero()
    zerocrossings += 1
    indicies = [0] + zerocrossings.tolist() + [None]

    # The key is that we don't need to convert everything to a list.
    # Just pass back a list of views into the array. This uses less memory.
    return [wavdata[i:j] for i, j in zip(indicies[:-1], indicies[1:])]

def shuffle_wav(partitions):
    """Accept a list as input, separate into positive and negative chunks, 
    shuffle, and return a shuffled nested list."""

    # Instead of iterating through each item, just use indexing 
    poschunks = partitions[::2]
    negchunks = partitions[1::2]
    if poschunks[0][0] &lt; 0:
        # Reverse the variable names if the first chunk wasn't positive.
        negchunks, poschunks = poschunks, negchunks

    # Instead of popping a random index off, just shuffle the lists...
    random.shuffle(poschunks)
    random.shuffle(negchunks)

    # To avoid the error you were getting, use izip_longest
    chunks = itertools.izip_longest(poschunks, negchunks, fillvalue=[])

    return numpy.hstack(item for sublist in chunks for item in sublist)


def get_fitness(array, target):
    """Compares sum of square differences between the two arrays."""
    # I'm going to assume that you wanted a single sum returned here...
    # Your original code returned an array.
    return ((array - target)**2).sum()

main()
</snippet></ROW><ROW><id>8779684</id><snippet>import csv

people = []
reader = csv.reader(open('people.txt'), delimiter='\t')
for row in reader:
    people.append(row)
</snippet></ROW><ROW><id>8779684</id><snippet>from PyQt4 import QtGui

rowCount = len(people)
colCount = max([len(p) for p in people])

tableWidget = QtGui.QTableWidget()
tableWidget.setRowCount(rowCount)
tableWidget.setColumnCount(colCount)

for row, person in enumerate(people):
    for column, value in enumerate(person):
        newItem = QtGui.QTableWidgetItem(value)
        tableWidget.setItem(row, column, newItem)
</snippet></ROW><ROW><id>8779684</id><snippet>self</snippet></ROW><ROW><id>8779684</id><snippet>myButton.clicked.connect(search)

def search(*args, **kwargs):
    value = myLineEdit.text()
    items = tableWidget.findItems(value, QtCore.Qt.MatchContains)
    if items:
        # scroll to the first match?
        tableWidget.scrollToItem(items[0], tableWidget.PositionAtCenter)
</snippet></ROW><ROW><id>8779872</id><snippet>isinstance()</snippet></ROW><ROW><id>8779969</id><snippet>def profile_main():
    # This is the main function for profiling
    # We've renamed our original main() above to real_main()
    import cProfile, pstats
    prof = cProfile.Profile()
    prof = prof.runctx("real_main()", globals(), locals())
    print "&lt;pre&gt;"
    stats = pstats.Stats(prof)
    stats.sort_stats("time")  # Or cumulative
    stats.print_stats(80)  # 80 = how many to print
    # The rest is optional.
    # stats.print_callees()
    # stats.print_callers()
    print "&lt;/pre&gt;"
</snippet></ROW><ROW><id>8779972</id><snippet>IRCClient</snippet></ROW><ROW><id>8779972</id><snippet>irc_PING</snippet></ROW><ROW><id>8780280</id><snippet>class Database(object):

    def __init__(self, **kwargs):
        self.connect(**kwargs)

    def connect(self, **kwargs):
        pass


class Couch(Database):

    def __init__(**kwargs):
        super(Couch, self).__init__(**kwargs)

    def connect(self, username=None, password=None):
        if username and password:
            # connect this way
            pass
        else:
            # connect that way
            pass
</snippet></ROW><ROW><id>8780344</id><snippet>number != 24</snippet></ROW><ROW><id>8780490</id><snippet>sock.getsockname()[1]</snippet></ROW><ROW><id>8780490</id><snippet>import socket
import BaseHTTPServer
from oauth2client.tools import ClientRedirectServer, ClientRedirectHandler

port_number = 0
host_name = 'localhost'
try:
    httpd = ClientRedirectServer((host_name, port_number), ClientRedirectHandler)
except socket.error, e:
    print "socket error: " + str(e)
else:
    print "The server is running on: port " + str(httpd.socket.getsockname()[1])
    print "and host_name " + host_name
    httpd.serve_forever()
</snippet></ROW><ROW><id>8780503</id><snippet>y</snippet></ROW><ROW><id>8780503</id><snippet>write('440saw2000.wav', 44100, y) # without quotes around y and 44100
</snippet></ROW><ROW><id>8780907</id><snippet>import settings
</snippet></ROW><ROW><id>8780907</id><snippet>from django.conf import settings
</snippet></ROW><ROW><id>8780922</id><snippet>my_list[start:end:step]
</snippet></ROW><ROW><id>8780922</id><snippet>[::-1]</snippet></ROW><ROW><id>8780922</id><snippet>start</snippet></ROW><ROW><id>8780922</id><snippet>end</snippet></ROW><ROW><id>8780922</id><snippet>step</snippet></ROW><ROW><id>8781052</id><snippet>dict</snippet></ROW><ROW><id>8781052</id><snippet>d</snippet></ROW><ROW><id>8781052</id><snippet>repr</snippet></ROW><ROW><id>8781052</id><snippet>dict</snippet></ROW><ROW><id>8781052</id><snippet>bookEntry</snippet></ROW><ROW><id>8781052</id><snippet>dict</snippet></ROW><ROW><id>8781052</id><snippet>self['name'] = n
</snippet></ROW><ROW><id>8781052</id><snippet>self.d['name'] = n
</snippet></ROW><ROW><id>8781052</id><snippet>dict</snippet></ROW><ROW><id>8781052</id><snippet>list</snippet></ROW><ROW><id>8781111</id><snippet>load*</snippet></ROW><ROW><id>8781111</id><snippet>ui.page().mainFrame().loadStarted.connect(onStart)
ui.page().mainFrame().loadFinished.connect(onDone)
</snippet></ROW><ROW><id>8781111</id><snippet>frameCreated</snippet></ROW><ROW><id>8781111</id><snippet>def onFrame(val):
    print 'Frame Created:', val.frameName()

ui.page().frameCreated.connect(onFrame)
</snippet></ROW><ROW><id>8781255</id><snippet>class Book(models.Model):
    name        = models.CharField(max_length=140)

class UserProfile(models.Model):
    favorites    = models.ManyToManyField(Book, null=True, blank=True)
    user         = models.OneToOneField(User)

favorite_books = this_user_profile.favorites.all()
for b in Book.objects.all():
    if b in favorite_books:
        print "Book", b.name, "is a favorite of this user!"
    else:
        print "Book", b.name, "is not a favorite of this user!"
</snippet></ROW><ROW><id>8781255</id><snippet>book_list = [(b, (b in favorite_books)) for b in Book.objects.all()]
</snippet></ROW><ROW><id>8781255</id><snippet>{% for book, is_favorite in book_list %}
    {% if is_favorite %}
        {% comment %} Do something with this favorite book {% endcomment %}
    {% else %}
        {% comment %} Do something with this non favorite book {% endcomment %}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>8781271</id><snippet>me/feed?until={date}</snippet></ROW><ROW><id>8781360</id><snippet>Thing..</snippet></ROW><ROW><id>8781360</id><snippet>import re

def explode(s, keywords):
    for k in keywords:
        m = re.search(r'(%s~[^~]*)(?:~|$)' % (re.escape(k),), s)
        yield m and m.group(1)

for row in lst:
    row[1:2] = explode(row[1], "Mega Mid Micro".split())
</snippet></ROW><ROW><id>8781360</id><snippet>import re
from pprint import pprint

def explode(s, keywords):
    for k in keywords:
        m = re.search(r'(%s~[^~]*)(?:~|$)' % (re.escape(k),), s)
        yield m and m.group(1)


lst = [
 ['171000', 'Thing..Mega~Corporate~Thing..Mid~Dairy~Thing..Micro~Cheese', 'Cheese', '0.012174'],
 ['171000', 'Thing..Mega~Corporate', 'Cheese', '0.012174'],
]

print("Before:")
pprint(lst)

for row in lst:
    row[1:2] = explode(row[1], "Mega Mid Micro".split())

print("\nAfter:")
pprint(lst)
</snippet></ROW><ROW><id>8781360</id><snippet>Before:
[['171000',
  'Thing..Mega~Corporate~Thing..Mid~Dairy~Thing..Micro~Cheese',
  'Cheese',
  '0.012174'],
 ['171000', 'Thing..Mega~Corporate', 'Cheese', '0.012174']]

After:
[['171000',
  'Mega~Corporate',
  'Mid~Dairy',
  'Micro~Cheese',
  'Cheese',
  '0.012174'],
 ['171000', 'Mega~Corporate', None, None, 'Cheese', '0.012174']]
</snippet></ROW><ROW><id>8781456</id><snippet>import decimal
D = decimal.Decimal
cent = D('0.01')

x = D('39.142')
print(x.quantize(cent,rounding=decimal.ROUND_UP))
# 39.15
</snippet></ROW><ROW><id>8781653</id><snippet>pyuic4</snippet></ROW><ROW><id>8781653</id><snippet>pyuic4</snippet></ROW><ROW><id>8781653</id><snippet>PyQt4/uic/uiparser.py</snippet></ROW><ROW><id>8781653</id><snippet>createSpacer</snippet></ROW><ROW><id>8781653</id><snippet>setupObject</snippet></ROW><ROW><id>8781653</id><snippet>UIParser</snippet></ROW><ROW><id>8781653</id><snippet>setupObject</snippet></ROW><ROW><id>8781653</id><snippet>createSpacer</snippet></ROW><ROW><id>8781653</id><snippet>self.gridLay.itemAtPosition(row, column).spacerItem()
</snippet></ROW><ROW><id>8781738</id><snippet>&lt;rss&gt;</snippet></ROW><ROW><id>8781750</id><snippet>def read_file(self, logs):
</snippet></ROW><ROW><id>8781750</id><snippet>def read_file(logs, self):
</snippet></ROW><ROW><id>8781750</id><snippet>self</snippet></ROW><ROW><id>8781750</id><snippet>self.read_file(logs)
</snippet></ROW><ROW><id>8782076</id><snippet>if not os.path.exists(dst):
</snippet></ROW><ROW><id>8782097</id><snippet>from Tkinter import *

class ResizableCanvasFrame(Frame):
    '''
    Class that handles creating resizable frames on a canvas.
    Don't pack it.

    Set save_callback to whatever you want to happen when the mouse
    lets up on the border. You can catch &lt;Configure&gt; too, but at least
    in my case I didn't want to save the new position on every mouse move.
    '''
    def __init__(self, master, x, y, w, h, *args, **kwargs):
        # master should be a Canvas
        self.frame_thickness = 5
        Frame.__init__(
            self,
            master,
            *args,
            borderwidth = self.frame_thickness,
            cursor = 'fleur',
            **kwargs
        )
        self.canvas = master
        self.resize_state = None
        self.bind('&lt;Button-1&gt;', self.mousedown)
        self.bind('&lt;B1-Motion&gt;', self.mousemove)
        self.bind('&lt;ButtonRelease-1&gt;', self.mouseup)
        self.bind('&lt;Destroy&gt;', self.delete_item)
        # add self to canvas
        self.itemid = self.canvas.create_window(
            x,
            y,
            window=self,
            anchor="nw",
            width=w,
            height=h
        )
        self.save_callback = None

    def canvas_coords(self):
        return map(int, self.canvas.coords(self.itemid))

    def move(self, dx, dy):
        # strictly, this is out of the range of RCF,
        # but it helps with the law of demeter
        self.canvas.move(self.itemid, dx, dy)

    def mousedown(self, event):
        window_width = self.winfo_width()
        window_height = self.winfo_height()
        self.resize_state = {
            'start_coords': (event.x, event.y),
            'last_coords': (event.x, event.y),
            'left_edge': (0 &lt;= event.x &lt; self.frame_thickness),
            'right_edge': (window_width - self.frame_thickness &lt;= event.x &lt; window_width),
            'top_edge': (0 &lt;= event.y &lt; self.frame_thickness),
            'bottom_edge': (window_height - self.frame_thickness &lt;= event.y &lt; window_height),
        }            

    def mousemove(self, event):
        if self.resize_state:
            resize = self.resize_state # debug var
            event_x = event.x
            event_y = event.y
            # distance of cursor from original position of window
            delta = map(int, (event.x - self.resize_state['start_coords'][0],
                              event.y - self.resize_state['start_coords'][1]))
            # load current pos, size
            new_x, new_y = self.canvas_coords()
            new_width = int(self.canvas.itemcget(self.itemid, 'width'))
            new_height = int(self.canvas.itemcget(self.itemid, 'height'))
            # handle x resize/move
            if self.resize_state['left_edge']:
                # must move pos and resize
                new_x += delta[0]
                new_width -= delta[0]
            elif self.resize_state['right_edge']:
                new_width += (event.x - self.resize_state['last_coords'][0])
            # handle y resize/move
            if self.resize_state['top_edge']:
                new_y += delta[1]
                new_height -= delta[1]
            elif self.resize_state['bottom_edge']:
                new_height += (event.y - self.resize_state['last_coords'][1])
            # save new settings in item, not card yet
            self.resize_state['last_coords'] = (event.x, event.y)
            self.canvas.coords(self.itemid, new_x, new_y)
            self.canvas.itemconfig(self.itemid, width=new_width, height=new_height)

    def mouseup(self, event):
        if self.resize_state:
            self.resize_state = None
            if self.save_callback:
                self.save_callback()

    def delete_item(self, event):
        self.canvas.delete(self.itemid)
</snippet></ROW><ROW><id>8782288</id><snippet>VariationFormSet = modelformset_factory(Variation, form=VariationASINMatch, extra=0)
VariationFormSet.form = staticmethod(curry(VariationFormSet, asins=extra_asins))
</snippet></ROW><ROW><id>8782288</id><snippet>VariationASINMatch</snippet></ROW><ROW><id>8782288</id><snippet>VariationFormSet</snippet></ROW><ROW><id>8782288</id><snippet>VariationFormSet = modelformset_factory(Variation, form=VariationASINMatch, extra=0)
VariationFormSet.form = staticmethod(curry(VariationASINMatch, asins=extra_asins))
</snippet></ROW><ROW><id>8782361</id><snippet>.next</snippet></ROW><ROW><id>8782361</id><snippet>&gt;&gt;&gt; nodes = soup.findAll(text=re.compile('[sS]maller.*[rR]eporting.*[cC]ompany'))
&gt;&gt;&gt; nodes[-1].next.next  # last item in list is the only good one... kinda crap
u'þ'
</snippet></ROW><ROW><id>8782361</id><snippet>find</snippet></ROW><ROW><id>8782361</id><snippet>&gt;&gt;&gt; nodes[-1].parent.find('font',style="font-family: Wingdings").next
u'þ'
</snippet></ROW><ROW><id>8782361</id><snippet>&gt;&gt;&gt; soup.findAll(text='þ')[0].previous.previous
u' Smaller reporting company '
</snippet></ROW><ROW><id>8782361</id><snippet>if</snippet></ROW><ROW><id>8782466</id><snippet>Text</snippet></ROW><ROW><id>8782466</id><snippet>from Tkinter import *

root = Tk()

mytext = "Here_your very long text"

scrbar = Scrollbar(root, orient=VERTICAL)
scrbar.pack(side=RIGHT,fill=Y)

text = Text(root, width=80, height=10, state=NORMAL, background="white", foreground="black")
text.insert(INSERT, mytext)
text['state'] = DISABLED
text.pack()

text['yscrollcommand'] = scrbar.set
scrbar['command'] = text.yview

root.title("Matrix References")
root.mainloop()
</snippet></ROW><ROW><id>8782613</id><snippet>defaultfilters.py</snippet></ROW><ROW><id>8782613</id><snippet>admindocs</snippet></ROW><ROW><id>8782613</id><snippet>from django.contrib.admindocs.views import load_all_installed_template_libraries
from django import template

app_libs = template.libraries.items()
builtin_libs = [(None, lib) for lib in template.builtins]

for module_name, library in builtin_libs + app_libs:
    for tag_name, tag_func in library.tags.items():
        print 'Tag: ', tag_name
    for filter_name, filter_func in library.filters.items():
        print 'Filter: ', filter_name
</snippet></ROW><ROW><id>8782613</id><snippet>django-admin.py shell</snippet></ROW><ROW><id>8782613</id><snippet>python manage.py shell</snippet></ROW><ROW><id>8782663</id><snippet>message</snippet></ROW><ROW><id>8782663</id><snippet>@classmethod
def validate(cls, message=[], **kwargs):
    if this:
        message.append(u'...')
    return kwargs, message
</snippet></ROW><ROW><id>8782663</id><snippet>message</snippet></ROW><ROW><id>8782663</id><snippet>validate()</snippet></ROW><ROW><id>8782663</id><snippet>messsage</snippet></ROW><ROW><id>8782663</id><snippet>@classmethod
def validate(cls, **kwargs):
    message = []
    ...
</snippet></ROW><ROW><id>8783207</id><snippet>int</snippet></ROW><ROW><id>8783207</id><snippet>int</snippet></ROW><ROW><id>8783273</id><snippet>pow</snippet></ROW><ROW><id>8783273</id><snippet>import math
math.sqrt(4)
</snippet></ROW><ROW><id>8783406</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup('Your resource&lt;title&gt;hi&lt;/title&gt;')
soup.title.string # Your title string.
</snippet></ROW><ROW><id>8783634</id><snippet>y = height * exp(-(x - mu)^2 / (2 * sigma</snippet></ROW><ROW><id>8783634</id><snippet>ln(y) = ln(height) - (x - mu)^2 / (2 * sigma^2)
</snippet></ROW><ROW><id>8783634</id><snippet>ln(y) = -x^2 / (2 * sigma^2) + x * mu / sigma^2 - mu^2 / sigma^2 + ln(height)
</snippet></ROW><ROW><id>8783634</id><snippet>ln(y) = A * x^2 + B * x + C
</snippet></ROW><ROW><id>8783634</id><snippet>A = 1 / (2 * sigma^2)
B = mu / (2 * sigma^2)
C = mu^2 / sigma^2 + ln(height)
</snippet></ROW><ROW><id>8783634</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import itertools

def main():
    x, data = generate_data(256, 6)
    model = [invert(x, y) for y in data.T]
    sigma, mu, height = [np.array(item) for item in zip(*model)]
    prediction = gaussian(x, sigma, mu, height)

    plot(x, data, linestyle='none', marker='o')
    plot(x, prediction, linestyle='-')
    plt.show()

def invert(x, y):
    # Use only data within the "peak" (20% of the max value...)
    key_points = y &gt; (0.2 * y.max())
    x = x[key_points]
    y = y[key_points]

    # Fit a 2nd order polynomial to the log of the observed values
    A, B, C = np.polyfit(x, np.log(y), 2)

    # Solve for the desired parameters...
    sigma = np.sqrt(-1 / (2.0 * A))
    mu = B * sigma**2
    height = np.exp(C + 0.5 * mu**2 / sigma**2)
    return sigma, mu, height

def generate_data(numpoints, numcurves):
    np.random.seed(3)
    x = np.linspace(0, 500, numpoints)

    height = 100 * np.random.random(numcurves)
    mu = 200 * np.random.random(numcurves) + 200
    sigma = 100 * np.random.random(numcurves) + 0.1
    data = gaussian(x, sigma, mu, height)

    noise = 5 * (np.random.random(data.shape) - 0.5)
    return x, data + noise

def gaussian(x, sigma, mu, height):
    data = -np.subtract.outer(x, mu)**2 / (2 * sigma**2)
    return height * np.exp(data)

def plot(x, ydata, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    colorcycle = itertools.cycle(mpl.rcParams['axes.color_cycle'])
    for y, color in zip(ydata.T, colorcycle):
        ax.plot(x, y, color=color, **kwargs)

main()
</snippet></ROW><ROW><id>8783634</id><snippet>multiprocessing.Pool.imap</snippet></ROW><ROW><id>8783634</id><snippet>def parallel_main():
    import multiprocessing
    p = multiprocessing.Pool()
    x, data = generate_data(256, 262144)
    args = itertools.izip(itertools.repeat(x), data.T)
    model = p.imap(parallel_func, args, chunksize=500)
    sigma, mu, height = [np.array(item) for item in zip(*model)]
    prediction = gaussian(x, sigma, mu, height)

def parallel_func(args):
    return invert(*args)
</snippet></ROW><ROW><id>8783634</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import itertools

def main():
    def run(x, data, func, threshold=0):
        model = [func(x, y, threshold=threshold) for y in data.T]
        sigma, mu, height = [np.array(item) for item in zip(*model)]
        prediction = gaussian(x, sigma, mu, height)

        plt.figure()
        plot(x, data, linestyle='none', marker='o', markersize=4)
        plot(x, prediction, linestyle='-', lw=2)

    x, data = generate_data(256, 6, noise=100)
    threshold = 50

    run(x, data, weighted_invert, threshold=threshold)
    plt.title('Weighted by Y-Value')

    run(x, data, invert, threshold=threshold)
    plt.title('Un-weighted Linear Inverse'

    plt.show()

def invert(x, y, threshold=0):
    mask = y &gt; threshold
    x, y = x[mask], y[mask]

    # Fit a 2nd order polynomial to the log of the observed values
    A, B, C = np.polyfit(x, np.log(y), 2)

    # Solve for the desired parameters...
    sigma, mu, height = poly_to_gauss(A,B,C)
    return sigma, mu, height

def poly_to_gauss(A,B,C):
    sigma = np.sqrt(-1 / (2.0 * A))
    mu = B * sigma**2
    height = np.exp(C + 0.5 * mu**2 / sigma**2)
    return sigma, mu, height

def weighted_invert(x, y, weights=None, threshold=0):
    mask = y &gt; threshold
    x,y = x[mask], y[mask]
    if weights is None:
        weights = y
    else:
        weights = weights[mask]

    d = np.log(y)
    G = np.ones((x.size, 3), dtype=np.float)
    G[:,0] = x**2
    G[:,1] = x

    model,_,_,_ = np.linalg.lstsq((G.T*weights**2).T, d*weights**2)
    return poly_to_gauss(*model)

def generate_data(numpoints, numcurves, noise=None):
    np.random.seed(3)
    x = np.linspace(0, 500, numpoints)

    height = 7000 * np.random.random(numcurves)
    mu = 1100 * np.random.random(numcurves) 
    sigma = 100 * np.random.random(numcurves) + 0.1
    data = gaussian(x, sigma, mu, height)

    if noise is None:
        noise = 0.1 * height.max()
    noise = noise * (np.random.random(data.shape) - 0.5)
    return x, data + noise

def gaussian(x, sigma, mu, height):
    data = -np.subtract.outer(x, mu)**2 / (2 * sigma**2)
    return height * np.exp(data)

def plot(x, ydata, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    colorcycle = itertools.cycle(mpl.rcParams['axes.color_cycle'])
    for y, color in zip(ydata.T, colorcycle):
        #kwargs['color'] = kwargs.get('color', color)
        ax.plot(x, y, color=color, **kwargs)

main()
</snippet></ROW><ROW><id>8783634</id><snippet>def iterative_weighted_invert(x, y, threshold=None, numiter=5):
    last_y = y
    for _ in range(numiter):
        model = weighted_invert(x, y, weights=last_y, threshold=threshold)
        last_y = gaussian(x, *model)
    return model
</snippet></ROW><ROW><id>8784029</id><snippet>urllib2.urlopen("http://somedomain.com/?" + data)
</snippet></ROW><ROW><id>8784029</id><snippet>urllib2.urlopen("http://somedomain.com/?" + parameters, data)
</snippet></ROW><ROW><id>8784259</id><snippet>urlllib2</snippet></ROW><ROW><id>8784259</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; response = urllib2.urlopen('http://www.ltg.ed.ac.uk/~richard/unicode-sample.html')
&gt;&gt;&gt; data = response.read()
</snippet></ROW><ROW><id>8784259</id><snippet>&gt;&gt;&gt; data[:200]
'&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Unicode 2.0 test page&lt;/title&gt;\n&lt;meta
content="text/html; charset=UTF-8" http-equiv="Content-type"/&gt;\n
&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;This page contains characters from each of the
Unicode\ncharact'
</snippet></ROW><ROW><id>8784259</id><snippet>&gt;&gt;&gt; text = data.decode('utf-8')
</snippet></ROW><ROW><id>8784436</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;@ """@$ FSDF &gt;something something &lt;more noise&gt;'
&gt;&gt;&gt; re.sub('&lt;[^&gt;]+&gt;', '', s)
'something something '
</snippet></ROW><ROW><id>8784436</id><snippet>&lt;.+&gt;</snippet></ROW><ROW><id>8784436</id><snippet>&gt;&gt;&gt; re.sub(r'&lt;.+&gt;', s, '')
''
</snippet></ROW><ROW><id>8784436</id><snippet>&gt;</snippet></ROW><ROW><id>8784436</id><snippet>&lt;</snippet></ROW><ROW><id>8784436</id><snippet>&gt;</snippet></ROW><ROW><id>8784436</id><snippet>[^x]</snippet></ROW><ROW><id>8784436</id><snippet>&gt;</snippet></ROW><ROW><id>8784436</id><snippet>?</snippet></ROW><ROW><id>8784436</id><snippet>&gt;&gt;&gt; re.sub(r'&lt;.+?&gt;', '', s)
'something something '
</snippet></ROW><ROW><id>8784436</id><snippet>x?</snippet></ROW><ROW><id>8784540</id><snippet>cache.delete('key')</snippet></ROW><ROW><id>8784540</id><snippet>cache</snippet></ROW><ROW><id>8784540</id><snippet>django.core.cache</snippet></ROW><ROW><id>8784540</id><snippet>from django.core.cache import cache

# ...
cache.delete('my_url')
</snippet></ROW><ROW><id>8784540</id><snippet>$ ./manage.py shell
&gt;&gt;&gt; from django.core.cache import cache
&gt;&gt;&gt; cache.has_key('/post/1234/')
# this will return True or False, whether the key was found or not
# if False, keep trying until you find the correct key ...
&gt;&gt;&gt; cache.has_key('domain.com/post/1234/') # including domain.com ?
&gt;&gt;&gt; cache.has_key('www.domain.com/post/1234/') # including www.domain.com ?
&gt;&gt;&gt; cache.has_key('/post/1234') # without the trailing / ?
</snippet></ROW><ROW><id>8784838</id><snippet>timeit</snippet></ROW><ROW><id>8784838</id><snippet>timeit.Timer('print "hi"').timeit(number=1)
</snippet></ROW><ROW><id>8784852</id><snippet>itertools.dropwhile()</snippet></ROW><ROW><id>8784852</id><snippet>&gt;&gt;&gt; L = [0, 0, 1, 1, 2, 2, 0]
&gt;&gt;&gt; list(itertools.dropwhile(lambda x: x == 0, L))
[1, 1, 2, 2, 0]
</snippet></ROW><ROW><id>8785505</id><snippet>if numLarge &lt; 0:
    continue
if nuggets == numLarge * 20 + numMed * 9 + numSmall * 6:
    print ...
</snippet></ROW><ROW><id>8785505</id><snippet>elif numLarge &lt; 0: return None</snippet></ROW><ROW><id>8785505</id><snippet>def boxes_nuggets(nuggets):
    if nuggets &lt; 6: print "there are no sizes for less than 6 nuggets"
    else:
        for numSmall in range(nuggets/6+1):
            for numMed in range(nuggets/9+1):
                numLarge = (nuggets - 6 * numSmall - 9 * numMed)/20
                if numLarge &lt; 0: continue
                if nuggets == numLarge * 20 + numMed * 9 + numSmall * 6:
                    print numLarge, "large boxes", numMed, "medium boxes", numSmall, "small boxes"
</snippet></ROW><ROW><id>8785579</id><snippet>a[0:0] = k
</snippet></ROW><ROW><id>8785579</id><snippet>a = k + a
</snippet></ROW><ROW><id>8785579</id><snippet>a[n:n] = k</snippet></ROW><ROW><id>8785579</id><snippet>a = a[:n] + k + a[n:]
</snippet></ROW><ROW><id>8785603</id><snippet>html</snippet></ROW><ROW><id>8785603</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(html)
print [t.text for t in soup.find("table", {"class": "list04"}).findAll("div")]
</snippet></ROW><ROW><id>8785603</id><snippet>[u'string1', u'string2', u'string3', u'string4', u'string5', u'string6']
</snippet></ROW><ROW><id>8786060</id><snippet>mtab</snippet></ROW><ROW><id>8786060</id><snippet>getfsstat(2)</snippet></ROW><ROW><id>8786060</id><snippet>getmntinfo(2)</snippet></ROW><ROW><id>8786060</id><snippet>getmntent(3C)</snippet></ROW><ROW><id>8786060</id><snippet>mount</snippet></ROW><ROW><id>8786112</id><snippet>random</snippet></ROW><ROW><id>8786112</id><snippet>numpy.random.RandomState</snippet></ROW><ROW><id>8786112</id><snippet>random</snippet></ROW><ROW><id>8786112</id><snippet>hashlib</snippet></ROW><ROW><id>8786196</id><snippet>queryset = queryset.order_by('practice')
</snippet></ROW><ROW><id>8786196</id><snippet>objects</snippet></ROW><ROW><id>8786364</id><snippet>consume</snippet></ROW><ROW><id>8786364</id><snippet>L = list('SxPyAMz') 
deque((L.remove(c) for c in ('x', 'y', 'z')), maxlen=0)
</snippet></ROW><ROW><id>8786364</id><snippet>_consumer = deque(maxlen=0)
do_all = _consumer.extend

L = list('SxPyAMz') 
do_all(L.remove(c) for c in ('x', 'y', 'z'))
print L
</snippet></ROW><ROW><id>8786557</id><snippet>TypeError</snippet></ROW><ROW><id>8786557</id><snippet>multiprocessing</snippet></ROW><ROW><id>8786557</id><snippet>get</snippet></ROW><ROW><id>8786557</id><snippet>import multiprocessing
import sqlalchemy.exc

def do(kwargs):
    i = kwargs['i']
    print i
    raise sqlalchemy.exc.ProgrammingError("", {}, None)
    return i


pool = multiprocessing.Pool(processes=5)               # start 4 worker processes
results = []
arglist = []
for i in range(10):
    arglist.append({'i':i})
r = pool.map_async(do, arglist, callback=results.append) # evaluate "f(10)" asynchronously

# Use get or wait?
# r.get()
r.wait()

pool.close()
pool.join()
print results
</snippet></ROW><ROW><id>8786557</id><snippet>r.wait</snippet></ROW><ROW><id>8786557</id><snippet>r.get</snippet></ROW><ROW><id>8786557</id><snippet>TypeError</snippet></ROW><ROW><id>8786557</id><snippet>r.wait</snippet></ROW><ROW><id>8786557</id><snippet>map_async</snippet></ROW><ROW><id>8786557</id><snippet>TypeError</snippet></ROW><ROW><id>8786557</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>8786557</id><snippet>import multiprocessing

class BadExc(Exception):
    def __init__(self, a):
        '''Non-optional param in the constructor.'''
        self.a = a

class GoodExc(Exception):
    def __init__(self, a=None):
        '''Optional param in the constructor.'''
        self.a = a

def do(kwargs):
    i = kwargs['i']
    print i
    raise BadExc('a')
    # raise GoodExc('a')
    return i

pool = multiprocessing.Pool(processes=5)
results = []
arglist = []
for i in range(10):
    arglist.append({'i':i})
r = pool.map_async(do, arglist, callback=results.append)
try:
    # set a timeout in order to be able to catch C-c
    r.get(1e100)
except KeyboardInterrupt:
    pass
print results
</snippet></ROW><ROW><id>8786557</id><snippet>do</snippet></ROW><ROW><id>8786557</id><snippet>Exception</snippet></ROW><ROW><id>8786557</id><snippet>import multiprocessing

class BadExc(Exception):
    def __init__(self, a):
        '''Non-optional param in the constructor.'''
        self.a = a

def do(kwargs):
    try:
        i = kwargs['i']
        print i
        raise BadExc('a')
        return i
    except Exception as e:
        raise Exception(repr(e))

pool = multiprocessing.Pool(processes=5)
results = []
arglist = []
for i in range(10):
    arglist.append({'i':i})
r = pool.map_async(do, arglist, callback=results.append)
try:
    # set a timeout in order to be able to catch C-c
    r.get(1e100)
except KeyboardInterrupt:
    pass
print results
</snippet></ROW><ROW><id>8786608</id><snippet>numpy.where</snippet></ROW><ROW><id>8786608</id><snippet>In [7]: numpy.where(ar == 'c')
Out[7]: (array([2]), array([2]))
</snippet></ROW><ROW><id>8786608</id><snippet>In [8]: ar[numpy.where(ar == 'c')]
Out[8]: 
array(['c'], 
      dtype='|S1')
</snippet></ROW><ROW><id>8787469</id><snippet>execute_script</snippet></ROW><ROW><id>8787469</id><snippet>execute_async_script</snippet></ROW><ROW><id>8787592</id><snippet>X</snippet></ROW><ROW><id>8787592</id><snippet>Y</snippet></ROW><ROW><id>8787592</id><snippet>triangle width</snippet></ROW><ROW><id>8787592</id><snippet>Y</snippet></ROW><ROW><id>8787592</id><snippet>triangle width+1/2 triangle width</snippet></ROW><ROW><id>8787592</id><snippet>Y</snippet></ROW><ROW><id>8787592</id><snippet>n*height</snippet></ROW><ROW><id>8787592</id><snippet>n*width</snippet></ROW><ROW><id>8787592</id><snippet>X</snippet></ROW><ROW><id>8787592</id><snippet>even rows</snippet></ROW><ROW><id>8787592</id><snippet>odd rows</snippet></ROW><ROW><id>8787592</id><snippet>X</snippet></ROW><ROW><id>8787592</id><snippet>Y</snippet></ROW><ROW><id>8787592</id><snippet>X</snippet></ROW><ROW><id>8787592</id><snippet>y:name</snippet></ROW><ROW><id>8787592</id><snippet>X</snippet></ROW><ROW><id>8787592</id><snippet>coordinate_x[&lt;xvale&gt;][&lt;yvalue&gt;]
</snippet></ROW><ROW><id>8787592</id><snippet>xvalue</snippet></ROW><ROW><id>8787592</id><snippet>yvalue</snippet></ROW><ROW><id>8787592</id><snippet>for x in coordinate_x.keys():
    if x-point_x &lt; min:
        make x-point the closest
</snippet></ROW><ROW><id>8787631</id><snippet>lenA</snippet></ROW><ROW><id>8787631</id><snippet> ncalls  tottime  percall  cumtime  percall  filename:lineno(function)
      1    1.986    1.986    3.830    3.830  .../lentest.py:5(lenA)
1000000    1.845    0.000    1.845    0.000  {built-in method len}
</snippet></ROW><ROW><id>8787631</id><snippet>lenB</snippet></ROW><ROW><id>8787631</id><snippet>      1    0.273    0.273    0.273    0.273  .../lentest.py:9(lenB)
</snippet></ROW><ROW><id>8787631</id><snippet>lenA</snippet></ROW><ROW><id>8787631</id><snippet>len</snippet></ROW><ROW><id>8787631</id><snippet>lenB</snippet></ROW><ROW><id>8787889</id><snippet>types.MethodType</snippet></ROW><ROW><id>8787889</id><snippet>In [1]: class A:
   ...:     def __init__(self):
   ...:         self.x = 2
   ...:     def f(self):
   ...:         return 1

In [2]: a=A()

In [3]: import types

In [4]: isinstance(a.f, types.MethodType)
Out[4]: True
</snippet></ROW><ROW><id>8787889</id><snippet>types.FunctionType</snippet></ROW><ROW><id>8787889</id><snippet>In [5]: [name for name in dir(a) if isinstance(getattr(a, name), types.MethodType)]
Out[5]: ['__init__', 'f']
</snippet></ROW><ROW><id>8788076</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8788076</id><snippet>main.py</snippet></ROW><ROW><id>8788076</id><snippet>import sys, os
sys.path.insert(0, os.path.dirname(__file__))
</snippet></ROW><ROW><id>8788186</id><snippet>myfunction = []
for i in range(0, 5):
    myfunction.append(whatever)
</snippet></ROW><ROW><id>8788195</id><snippet>foo_ids = set(resA.values_list('foo_id', flat=True)) &amp; \
    set(resB.values_list('foo_id', flat=True))
</snippet></ROW><ROW><id>8788195</id><snippet>Foo</snippet></ROW><ROW><id>8788195</id><snippet>ret = Foo.objects.in_bulk(foo_ids).values()
</snippet></ROW><ROW><id>8788195</id><snippet>set</snippet></ROW><ROW><id>8788195</id><snippet>&amp;</snippet></ROW><ROW><id>8788195</id><snippet>ValueQuerySet</snippet></ROW><ROW><id>8788237</id><snippet>items = test.items()
random.shuffle(items)
</snippet></ROW><ROW><id>8788237</id><snippet>(key, value)</snippet></ROW><ROW><id>8788237</id><snippet>OrderedDict</snippet></ROW><ROW><id>8788321</id><snippet> def dispatcher(request, arg):
      if arg == 1:
           return fun1(request, arg)
      else:
           return fun2(request, arg)
</snippet></ROW><ROW><id>8788321</id><snippet>url(r'^foobar/(?P&lt;field1&gt;1)/$', fun1)
url(r'^foobar/(?P&lt;field1&gt;.*)/$', fun2)
</snippet></ROW><ROW><id>8788422</id><snippet>find_elements_by_class_name,</snippet></ROW><ROW><id>8788422</id><snippet>num</snippet></ROW><ROW><id>8788422</id><snippet>find_elements_by_class_name('className')[num]</snippet></ROW><ROW><id>8788559</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>8788559</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>8788559</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>8788559</id><snippet>.tail</snippet></ROW><ROW><id>8788559</id><snippet>following-sibling</snippet></ROW><ROW><id>8788559</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>8788559</id><snippet>from lxml import etree

doc = etree.HTML("""
&lt;li class="taf"&gt;&lt;h3&gt;&lt;a href="26eOfferCode%3DGSONESTP-----------" id="pa1"&gt;
    Citibank &lt;b&gt;Credit Card&lt;/b&gt; - Save over 5% on fuel | Citibank.co.in&lt;/a&gt;
   &lt;/h3&gt;Get the IndianOil Citibank &lt;b&gt;Card&lt;/b&gt;. Apply Now! 
   &lt;br /&gt;
   &lt;a href="e%253DGOOGLE ------"&gt;Get 10X Rewards On Shopping&lt;/a&gt; -
   &lt;a href="S%2526eOfferCode%253DGSCCSLEX ------"&gt;Save Over 5% On Fuel&lt;/a&gt;
   &lt;br /&gt;
   &lt;cite&gt;www.citibank.co.in/&lt;b&gt;CreditCards&lt;/b&gt;&lt;/cite&gt;
&lt;/li&gt;""")

etree.strip_tags(doc,'a','b')

for element in doc.xpath('//*[following-sibling::*[name()="br"]]'):
  print repr(element.tail.strip())
</snippet></ROW><ROW><id>8788559</id><snippet>'Get the IndianOil Citibank Card. Apply Now!'
'Get 10X Rewards On Shopping -\n   Save Over 5% On Fuel'
</snippet></ROW><ROW><id>8789193</id><snippet>csv</snippet></ROW><ROW><id>8789193</id><snippet>ldap_data = list(csv.DictReader(ldap_file))
</snippet></ROW><ROW><id>8789335</id><snippet>get_attribute(name)</snippet></ROW><ROW><id>8789335</id><snippet>WebElement</snippet></ROW><ROW><id>8789400</id><snippet>cat</snippet></ROW><ROW><id>8789400</id><snippet>cat file1 file2 file3 &gt; bigfile
</snippet></ROW><ROW><id>8789400</id><snippet>cat</snippet></ROW><ROW><id>8789400</id><snippet>cat file1 file2 file3 | sqlite database
</snippet></ROW><ROW><id>8789400</id><snippet>file.read(65536)</snippet></ROW><ROW><id>8789400</id><snippet>for</snippet></ROW><ROW><id>8789401</id><snippet>dizGroup = {}

for obj in mc.ls(type='transform'):
    if mc.objExists(obj + ('.matteGroup')):
        matteGroup = mc.getAttr(obj + ('.matteGroup'))
        matteName = mc.getAttr(obj + ('.matteName'))

        if matteGroup not in dizGroup:
            dizGroup[matteGroup] = {}

        if matteName not in dizGroup[matteGroup]:
            dizGroup[matteGroup][matteName] = []

        dizGroup[matteGroup][matteName].append(obj)
</snippet></ROW><ROW><id>8789782</id><snippet>Actions clkAndHld = new Actions(driver);
clkAndHld.clickAndHold(WebElement).build().perform();
</snippet></ROW><ROW><id>8789806</id><snippet>baseSet = ThreadedComment.objects.filter(tree_path__contains = ('%010i' % int(baseT.comment_ptr_id)))
</snippet></ROW><ROW><id>8789806</id><snippet>tree_path__contains = ('%%0%ii' % COMMENT_PATH_DIGITS % int(baseT.comment_ptr_id))
</snippet></ROW><ROW><id>8790063</id><snippet>/usr/local/google_appengine/:/usr/local/google_appengine/lib/:/usr/local/google_appengine/lib/yaml/
</snippet></ROW><ROW><id>8790188</id><snippet>map</snippet></ROW><ROW><id>8790188</id><snippet>import cProfile, numpy as np
from operator import add

A = np.random.rand(1000000)
B = np.random.rand(1000000)

&gt;&gt;&gt; cProfile.run('C = map(add, A, B)')
         3 function calls in 0.693 seconds

&gt;&gt;&gt; cProfile.run('C = [a+b for a,b in izip(A,B)]')
         2 function calls in 0.765 seconds

&gt;&gt;&gt; cProfile.run('for i in np.arange(0,len(B),1): C[i] = A[i]+B[i]')
         4 function calls in 1.971 seconds
</snippet></ROW><ROW><id>8790188</id><snippet>&gt;&gt;&gt; cProfile.run('C = A + B')
         2 function calls in 0.005 seconds
</snippet></ROW><ROW><id>8790199</id><snippet>split</snippet></ROW><ROW><id>8790199</id><snippet>my_list = "Paul Michael Jessica Megan".split(" ")
</snippet></ROW><ROW><id>8790614</id><snippet>import wx

########################################################################
class RandomPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent, color):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.SetBackgroundColour(color)



########################################################################
class MainPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        topSplitter = wx.SplitterWindow(self)
        hSplitter = wx.SplitterWindow(topSplitter)

        panelOne = RandomPanel(hSplitter, "blue")
        panelTwo = RandomPanel(hSplitter, "red")
        hSplitter.SplitVertically(panelOne, panelTwo)
        hSplitter.SetSashGravity(0.5)

        panelThree = RandomPanel(topSplitter, "green")
        topSplitter.SplitHorizontally(hSplitter, panelThree)
        topSplitter.SetSashGravity(0.5)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(topSplitter, 1, wx.EXPAND)
        self.SetSizer(sizer)

########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Nested Splitters",
                          size=(800,600))
        panel = MainPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>8790678</id><snippet>from datetime import datetime, timedelta
now = datetime.now()
delta = timedelta(days=20)

then = now - delta
</snippet></ROW><ROW><id>8790678</id><snippet>query = db.GqlQuery("SELECT * FROM Medicine WHERE exp_date=:1", exp_date - timedelta(days=20) )
</snippet></ROW><ROW><id>8791406</id><snippet>find()</snippet></ROW><ROW><id>8791406</id><snippet>__getitem__</snippet></ROW><ROW><id>8791406</id><snippet>skip()</snippet></ROW><ROW><id>8791406</id><snippet>limit()</snippet></ROW><ROW><id>8791406</id><snippet>articles[0]</snippet></ROW><ROW><id>8791406</id><snippet>articles[0]</snippet></ROW><ROW><id>8791406</id><snippet>update()</snippet></ROW><ROW><id>8791406</id><snippet>sort()</snippet></ROW><ROW><id>8791406</id><snippet>find()</snippet></ROW><ROW><id>8791406</id><snippet>find()</snippet></ROW><ROW><id>8791683</id><snippet>class MyBall(object):
    ...
    def update(self, dt):
        ...
        self.trajectory.append(self.position)

    def draw(self, surface):
        pygame.draw.lines(surface, somecolor, self.trajectory)
</snippet></ROW><ROW><id>8792010</id><snippet>user_cache_dir</snippet></ROW><ROW><id>8792277</id><snippet>logicalindexAt</snippet></ROW><ROW><id>8792277</id><snippet>def callFilter(self, pos):
    column = self.horizontalHeader.logicalIndexAt(pos)
</snippet></ROW><ROW><id>8792467</id><snippet>z = (set(("a", "b", "c")) - set((x, y))).pop()
</snippet></ROW><ROW><id>8792467</id><snippet>set(("a", "b", "c")) - set((x, y))</snippet></ROW><ROW><id>8792467</id><snippet>pop()</snippet></ROW><ROW><id>8792467</id><snippet>z, = set(("a", "b", "c")) - set((x, y))
</snippet></ROW><ROW><id>8792758</id><snippet>import math,cairo

width, height = 768,768
surface = cairo.PDFSurface ("circle.pdf", width, height)
ctx = cairo.Context (surface)
ctx.set_source_rgb(1,1,1)
ctx.rectangle(0,0,width,height)
ctx.fill()
ctx.set_source_rgb(1,0,0)
ctx.move_to(width/2,height/2)
ctx.arc(width/2,height/2,512*0.25,0,math.pi*2)
ctx.fill()
ctx.show_page()
</snippet></ROW><ROW><id>8792897</id><snippet>date = str(now.year)+str(now.month)+str(now.day)
filename = date + "backup_lucas.tar.gz"
subprocess.Popen(['tar', '-pczf', filename, '/home/lucas/backup/'])
</snippet></ROW><ROW><id>8793084</id><snippet>sphinx-apidoc</snippet></ROW><ROW><id>8793084</id><snippet>$ sphinx-apidoc . --full -o doc -H 'MyProject' -A 'MyName' -V '1.0'
</snippet></ROW><ROW><id>8793084</id><snippet>doc</snippet></ROW><ROW><id>8793084</id><snippet>conf.py</snippet></ROW><ROW><id>8793247</id><snippet>iPhones</snippet></ROW><ROW><id>8793468</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>8793468</id><snippet>//td[@class='col-1 first']/text()[normalize-space()='Nov 2011']/parent::*/parent::*/td/input
</snippet></ROW><ROW><id>8793639</id><snippet>instance.bz_checks</snippet></ROW><ROW><id>8793639</id><snippet>Traceback (most recent call last):
  File "test.py", line 44, in &lt;module&gt;
    instance.bz_checks.append(check)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/attributes.py", line 168, in __get__
    return self.impl.get(instance_state(instance),dict_)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/attributes.py", line 453, in get
    value = self.callable_(state, passive)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/strategies.py", line 563, in _load_for_state
    result = q.all()
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/query.py", line 1983, in all
    return list(self)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/query.py", line 2092, in __iter__
    self.session._autoflush()
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/session.py", line 973, in _autoflush
    self.flush()
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/session.py", line 1547, in flush
    self._flush(objects)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/session.py", line 1616, in _flush
    flush_context.execute()
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/unitofwork.py", line 328, in execute
    rec.execute(self)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/unitofwork.py", line 472, in execute
    uow
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/mapper.py", line 2291, in _save_obj
    execute(statement, params)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/base.py", line 1405, in execute
    params)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/base.py", line 1538, in _execute_clauseelement
    compiled_sql, distilled_params
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/base.py", line 1646, in _execute_context
    context)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/base.py", line 1639, in _execute_context
    context)
  File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py", line 330, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.IntegrityError: (IntegrityError) null value in column "instance_id" violates not-null constraint
 'INSERT INTO "bzCheck" (bz_id, status) VALUES (%(bz_id)s, %(status)s) RETURNING "bzCheck".instance_id' {'status': 'OK', 'bz_id': 19876}
</snippet></ROW><ROW><id>8793639</id><snippet>instance.bz_checks.append(check)
</snippet></ROW><ROW><id>8793639</id><snippet>self.session._autoflush()
File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/session.py", line 973, in _autoflush
</snippet></ROW><ROW><id>8793639</id><snippet>check.bug = somebug</snippet></ROW><ROW><id>8793639</id><snippet>check</snippet></ROW><ROW><id>8793639</id><snippet>cascade_backrefs</snippet></ROW><ROW><id>8793684</id><snippet>inspect.stack()</snippet></ROW><ROW><id>8793684</id><snippet>@</snippet></ROW><ROW><id>8793684</id><snippet>defined_in_class = (len(frames) &gt; 2 and
                    frames[2][4][0].strip().startswith('class '))
</snippet></ROW><ROW><id>8793684</id><snippet>frames = inspect.stack()
defined_in_class = False
if len(frames) &gt; 2:
    maybe_class_frame = frames[2]
    statement_list = maybe_class_frame[4]
    first_statment = statement_list[0]
    if first_statment.strip().startswith('class '):
        defined_in_class = True
</snippet></ROW><ROW><id>8793684</id><snippet>class</snippet></ROW><ROW><id>8793684</id><snippet>frames[1]</snippet></ROW><ROW><id>8793684</id><snippet>frames[1][0].f_code.co_name</snippet></ROW><ROW><id>8793838</id><snippet>tee()</snippet></ROW><ROW><id>8793838</id><snippet>filter()</snippet></ROW><ROW><id>8793838</id><snippet>filterfalse()</snippet></ROW><ROW><id>8793838</id><snippet>def partition(pred, iterable):
    'Use a predicate to partition entries into false entries and true entries'
    # partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
</snippet></ROW><ROW><id>8794568</id><snippet>devcon hwids =net
</snippet></ROW><ROW><id>8794568</id><snippet>devcon disable hwids =net</snippet></ROW><ROW><id>8794568</id><snippet>netsh wlan disconnect</snippet></ROW><ROW><id>8794568</id><snippet>pywin32</snippet></ROW><ROW><id>8794568</id><snippet>wmi</snippet></ROW><ROW><id>8794568</id><snippet>import wmi
cur=wmi.WMI()
wireless_devices=cur.query("select * from Win32_NetworkAdapter WHERE NetConnectionID = 'Wireless Network Connection'")
for device in wireless_devices:
    device.Disable()
</snippet></ROW><ROW><id>8794604</id><snippet>select column
  from table 
 where outputdate between to_date('2010/01/01','yyyy/mm/dd') 
       and to_date('2011/01/01','yyyy/mm/dd')
</snippet></ROW><ROW><id>8794604</id><snippet>outputdate</snippet></ROW><ROW><id>8794604</id><snippet>between</snippet></ROW><ROW><id>8794604</id><snippet>cx_Oracle</snippet></ROW><ROW><id>8794765</id><snippet>urllib2.HTTPRedirectHandler</snippet></ROW><ROW><id>8794765</id><snippet>class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        print "Going through 302:\n"
        print headers
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
</snippet></ROW><ROW><id>8794765</id><snippet>location</snippet></ROW><ROW><id>8794765</id><snippet>...
Going through 302:

Server: nginx/0.7.65
Date: Mon, 09 Jan 2012 20:20:11 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Cache-Control: private
Location: https://stackexchange.com/oauth/login_success#access_token=K4zKd*HkKw5Opx(a8t12FA))&amp;expires=86400
Content-Length: 218
...
</snippet></ROW><ROW><id>8794771</id><snippet>"C:\\mydir\\myfile.mp3"</snippet></ROW><ROW><id>8794771</id><snippet>r'C:\mydir\myfile.mp3'</snippet></ROW><ROW><id>8794771</id><snippet>os.path</snippet></ROW><ROW><id>8794771</id><snippet>os.path.join(r'C:\mydir','myfile.mp3')</snippet></ROW><ROW><id>8795719</id><snippet>scipy.ndimage.distance_transform_edt</snippet></ROW><ROW><id>8795719</id><snippet>return_indices</snippet></ROW><ROW><id>8795719</id><snippet>data</snippet></ROW><ROW><id>8795719</id><snippet>import numpy as np
from scipy.ndimage import distance_transform_edt

labels = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] )
i, j = distance_transform_edt(labels == 0, return_distances=False, 
                              return_indices=True) 
neighborhoods = labels[i,j]
print neighborhoods
</snippet></ROW><ROW><id>8795719</id><snippet>array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
       [1, 1, 1, 1, 1, 1, 1, 1, 2, 2],
       [1, 1, 1, 1, 1, 1, 1, 2, 2, 2],
       [1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
       [1, 1, 1, 1, 1, 2, 2, 2, 2, 2],
       [1, 1, 1, 1, 2, 2, 2, 2, 2, 2],
       [1, 1, 1, 2, 2, 2, 2, 2, 2, 2],
       [1, 1, 2, 2, 2, 2, 2, 2, 2, 2]])
</snippet></ROW><ROW><id>8796172</id><snippet>SIGNAL("atzero")</snippet></ROW><ROW><id>8796172</id><snippet>SIGNAL("atzero(int)")</snippet></ROW><ROW><id>8796172</id><snippet>checkzero</snippet></ROW><ROW><id>8796172</id><snippet>Form.__init__</snippet></ROW><ROW><id>8796172</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *

class ZeroSpinBox(QSpinBox):
    zeros = 0

    def __init__(self, parent=None):
        super(ZeroSpinBox, self).__init__(parent)
        self.valueChanged.connect(self.checkzero)

    atzero = Signal(int)

    def checkzero(self):
        if self.value() == 0:
            self.zeros += 1
            self.atzero.emit(self.zeros)

class Form(QDialog):
    def __init__(self, parent= None):
        super(Form, self).__init__(parent)

        dial = QDial()
        dial.setNotchesVisible(True)
        spinbox = ZeroSpinBox()
        spinbox.setRange(0,200)
        dial.setRange(0,200)

        layout = QHBoxLayout()
        layout.addWidget(dial)
        layout.addWidget(spinbox)
        self.setLayout(layout)

        dial.valueChanged.connect(spinbox.setValue)
        spinbox.valueChanged.connect(dial.setValue)
        spinbox.atzero.connect(self.announce)

        self.setWindowTitle("Signals and Slots Part 2")

    @Slot(int)
    def announce(self, zeros):
        print "ZeroSpinBox has been at zero %d times" % zeros


if __name__ == "__main__":
    app = QApplication(sys.argv)
    form = Form()
    form.show()
    app.exec_()
</snippet></ROW><ROW><id>8796407</id><snippet>&gt;&gt;&gt; d = {'var': 'x'}
&gt;&gt;&gt; template = '%s %(var)s'
&gt;&gt;&gt; esc_template = re.sub(r'(%[^()]*[sdf])', r'%\1', template)
&gt;&gt;&gt; esc_template % d
'%s x'
</snippet></ROW><ROW><id>8796456</id><snippet>yql/__init.py</snippet></ROW><ROW><id>8796456</id><snippet>sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../'))
</snippet></ROW><ROW><id>8796456</id><snippet>sys.path</snippet></ROW><ROW><id>8796456</id><snippet>yql</snippet></ROW><ROW><id>8796456</id><snippet>sys.path.insert</snippet></ROW><ROW><id>8796504</id><snippet>import numpy as np
import scipy.spatial

def main():
    xyz = np.random.random((100, 3))
    area_underneath = trapezoidal_area(xyz)
    print area_underneath

def trapezoidal_area(xyz):
    """Calculate volume under a surface defined by irregularly spaced points
    using delaunay triangulation. "x,y,z" is a &lt;numpoints x 3&gt; shaped ndarray."""
    d = scipy.spatial.Delaunay(xyz[:,:2])
    tri = xyz[d.vertices]

    a = tri[:,0,:2] - tri[:,1,:2]
    b = tri[:,0,:2] - tri[:,2,:2]
    proj_area = np.cross(a, b).sum(axis=-1)
    zavg = tri[:,:,2].sum(axis=1)
    vol = zavg * np.abs(proj_area) / 6.0
    return vol.sum()

main()
</snippet></ROW><ROW><id>8796535</id><snippet>#Import Random
import random as r


#Create a random Number!
guessed = r.randint(1,100)

print("I guessed a number between 1 and 100. Try to find it!")


#Initiate variable --entered--
entered = 0
while (entered != guessed):
    entered = int(input("Enter your suggestion:"))
    #Fixed your if/else tree with correct indents and an elif.
    if (entered &gt; guessed):
        print('Try less')
    elif (entered &lt;guessed):
        print('Try more')
    else:
        print('You win!')
</snippet></ROW><ROW><id>8796581</id><snippet>&gt;&gt;&gt; correct_order = ['AAA', 'AA+', 'BBB+', 'BBB', 'BB+']
&gt;&gt;&gt; list(sorted("BBB BBB+ BB+ AAA AA+ BBB+ BBB AA+".split(), key=lambda s:correct_order.index(s)))
['AAA', 'AA+', 'AA+', 'BBB+', 'BBB+', 'BBB', 'BBB', 'BB+']
</snippet></ROW><ROW><id>8796581</id><snippet>correct_order = ['AAA', 'AA+',...,'BBB+', 'BBB', 'BB+',...]
the_lists.sort(key=lambda l: correct_order.index(l[0]))
</snippet></ROW><ROW><id>8796632</id><snippet>config = {'webapp2_extras.jinja2': {'template_path': 'templates',
          'filters': {
          'timesince': filters.timesince,
          'datetimeformat': filters.datetimeformat},
          'environment_args': {'extensions': ['jinja2.ext.i18n']}},
          'webapp2_extras.sessions': {'secret_key': 'my-secret-key'}}
</snippet></ROW><ROW><id>8796632</id><snippet>config = {
  'webapp2_extras.jinja2': {
    'template_path': 'templates',
    'filters': {
      'timesince': filters.timesince,
      'datetimeformat': filters.datetimeformat
    },
    'environment_args': {'extensions': ['jinja2.ext.i18n']},
  },
  'webapp2_extras.sessions': {'secret_key': 'my-secret-key'}
}
</snippet></ROW><ROW><id>8796657</id><snippet>caveNumber = chooseCave()
checkCave(caveNumber)
</snippet></ROW><ROW><id>8796755</id><snippet>Wass</snippet></ROW><ROW><id>8796755</id><snippet>sys.path</snippet></ROW><ROW><id>8796755</id><snippet>/tmp</snippet></ROW><ROW><id>8796755</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8796755</id><snippet>/tmp/Wass</snippet></ROW><ROW><id>8796755</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8796755</id><snippet>/tmp/Wass/__init__.py*</snippet></ROW><ROW><id>8796755</id><snippet>python</snippet></ROW><ROW><id>8796755</id><snippet>Wass</snippet></ROW><ROW><id>8796755</id><snippet>__init__.py</snippet></ROW><ROW><id>8796755</id><snippet>from Wass.protocols.smpp.proto import ...</snippet></ROW><ROW><id>8796755</id><snippet>import *</snippet></ROW><ROW><id>8796755</id><snippet>protocols</snippet></ROW><ROW><id>8796755</id><snippet>import *</snippet></ROW><ROW><id>8796755</id><snippet>basic</snippet></ROW><ROW><id>8796755</id><snippet>smtp</snippet></ROW><ROW><id>8796755</id><snippet>pop3</snippet></ROW><ROW><id>8796755</id><snippet>$ cd /tmp
$ mkdir runstuff
$ cd runstuff
$ PYTHONPATH=/tmp/Wass trial protocols
</snippet></ROW><ROW><id>8796774</id><snippet>|</snippet></ROW><ROW><id>8796774</id><snippet>re.sub(r'''(?x)
     .*(
     Chairman | Managing[]Director     # or
     ).*     
     ''','Executive Director', row['capacity'])
</snippet></ROW><ROW><id>8796908</id><snippet>@total_ordering
class Student:
    def __eq__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))
    def __lt__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) &lt;
                (other.lastname.lower(), other.firstname.lower()))
</snippet></ROW><ROW><id>8797058</id><snippet>def hypergeometric(N, n, r, k):
    return 1.0 * combination(r, k) * combination(N - r, n - k) / combination(N, n)
</snippet></ROW><ROW><id>8797058</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>8797058</id><snippet>/</snippet></ROW><ROW><id>8797058</id><snippet>//</snippet></ROW><ROW><id>8797058</id><snippet>import</snippet></ROW><ROW><id>8797256</id><snippet>futures</snippet></ROW><ROW><id>8797374</id><snippet>[^\s]</snippet></ROW><ROW><id>8797374</id><snippet>\S</snippet></ROW><ROW><id>8797374</id><snippet>    ip = re.search(r'inet addr:(\S+)', paragraph)
    if ip:
        info['ip_address'] = ip.group(1)
</snippet></ROW><ROW><id>8797374</id><snippet>    mac = re.search(r'HWaddr\s+(\S+)', paragraph)
    if mac:
        info['mac_address'] = mac.group(1)
</snippet></ROW><ROW><id>8797374</id><snippet>&gt;&gt;&gt; re.findall(r'^(\S+).*?inet addr:(\S+).*?Mask:(\S+)', ifconfig, re.S | re.M)
[('eth0', '192.168.98.157', '255.255.255.0'), ('lo', '127.0.0.1', '255.0.0.0')]
</snippet></ROW><ROW><id>8797398</id><snippet>from random import randint

def guessingGame():
    n = randint(1, 10)
    correct = False
    while not correct:
        raw = raw_input("Guess what integer I'm thinking of.") 
        if int(i) == n:
            print "Correct!"
            correct = True
        elif int(i) &lt; n:
            print "Too low."
        elif int(i) &gt; n:
            print "Too high."
        else:
            print "Huh?"

guessingGame()
</snippet></ROW><ROW><id>8797871</id><snippet>import sys, os

sys.path.insert(0, os.path.abspath("../src") )

# Then try 
from domain.entries import MyClass 
</snippet></ROW><ROW><id>8798113</id><snippet>import matplotlib.pyplot as plt
import numpy as np

xy = 100 * np.random.random((2,10))
x, y = xy

fig, ax = plt.subplots()
points, = ax.plot(x, y, 'bo')

for i in range(10):
    xy += np.random.random(xy.shape) - 0.5
    points.set_data(xy)
    fig.savefig('%03i.png' % i)
</snippet></ROW><ROW><id>8799062</id><snippet>Py_Initialize/Py_Finalize</snippet></ROW><ROW><id>8799062</id><snippet>/* startup */
Py_Initialize();

/* do whatever */
while (moreFiles()) {
    PyRun_SimpleString("execfile('%s')" % nextFile());
    /* do whatever */
}

/* shutdown */
Py_Finalize();
</snippet></ROW><ROW><id>8799062</id><snippet>Py_Finalize</snippet></ROW><ROW><id>8799062</id><snippet>Py_Initialize</snippet></ROW><ROW><id>8799062</id><snippet>sys.modules</snippet></ROW><ROW><id>8799062</id><snippet>Py_Finalize</snippet></ROW><ROW><id>8799062</id><snippet>Py_Finalize</snippet></ROW><ROW><id>8799470</id><snippet>mysite/
    app.yaml
    main.py
    urls.py
    ...
    tlslite/
        __init__.py
        ...
</snippet></ROW><ROW><id>8799495</id><snippet>PROJECT_DIR = os.path.dirname(__file__)
</snippet></ROW><ROW><id>8799560</id><snippet>exec</snippet></ROW><ROW><id>8799560</id><snippet>print 'iWantAVariableWithThisName' in locals()
junkVar = 'iWantAVariableWithThisName'
exec(junkVar + " = 1")
print 'iWantAVariableWithThisName' in locals()
</snippet></ROW><ROW><id>8799707</id><snippet>termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
</snippet></ROW><ROW><id>8799851</id><snippet>class TestThread(threading.Thread):
    def __init__(self, input):
        threading.Thread.__init__(self)
        self.input = input
        self.lock = threading.Lock()

    def run(self):
        self.lock.acquire()
        print("waste some time for %s" % self.input)
        time.sleep(5)
        print("%s done" % self.input)
        self.lock.release()
</snippet></ROW><ROW><id>8799851</id><snippet>LOCK_DICT = {}
LOCK_DICT_LOCK = threading.RLock()

class TestThread(threading.Thread):
    def __init__(self, input):
        threading.Thread.__init__(self)
        self.input = input

        with LOCK_DICT_LOCK:
            if self.input not in LOCK_DICT:
                LOCK_DICT[self.input] = threading.Lock()

    def run(self):
        with LOCK_DICT_LOCK:
            lock = LOCK_DICT[self.input]

        lock.acquire()
        print("waste some time for %s" % self.input)
        time.sleep(5)
        print("%s done" % self.input)        
        lock.release()
</snippet></ROW><ROW><id>8799851</id><snippet>eval</snippet></ROW><ROW><id>8800323</id><snippet>import csv
from collections import defaultdict
reader = csv.DictReader(open('test.csv', newline=''))
cities = defaultdict(int)
for row in reader:
    cities[row["CITY"]] += int(row["AMOUNT"])

writer = csv.writer(open('out.csv', 'w', newline = ''))
writer.writerow(["CITY", "AMOUNT"])
writer.writerows([city, cities[city]] for city in cities)
</snippet></ROW><ROW><id>8800323</id><snippet>CITY,AMOUNT
New York,25
London,75
Tokyo,45
</snippet></ROW><ROW><id>8800323</id><snippet>import csv
from collections import defaultdict

def default_factory():
    return [0, None, None, 0]

reader = csv.DictReader(open('test.csv', newline=''))
cities = defaultdict(default_factory)
for row in reader:
    amount = int(row["AMOUNT"])
    cities[row["CITY"]][0] += amount
    max = cities[row["CITY"]][1]
    cities[row["CITY"]][1] = amount if max is None else amount if amount &gt; max else max
    min = cities[row["CITY"]][2]
    cities[row["CITY"]][2] = amount if min is None else amount if amount &lt; min else min
    cities[row["CITY"]][3] += 1
for city in cities:
    cities[city][3] = cities[city][0]/cities[city][3] # calculate mean

writer = csv.writer(open('out.csv', 'w', newline = ''))
writer.writerow(["CITY", "AMOUNT", "max", "min", "mean"])
writer.writerows([city] + cities[city] for city in cities)
</snippet></ROW><ROW><id>8800323</id><snippet>CITY,AMOUNT,max,min,mean
New York,25,25,25,25.0
London,75,55,20,37.5
Tokyo,45,45,45,45.0
</snippet></ROW><ROW><id>8800323</id><snippet>from __future__ import division</snippet></ROW><ROW><id>8800739</id><snippet>&lt;?php
foreach (getallheaders() as $name =&gt; $value) {
    echo "$name: $value\n";
}
?&gt;
</snippet></ROW><ROW><id>8800739</id><snippet>headers.php</snippet></ROW><ROW><id>8800887</id><snippet>import unittest
from mymoduletests import MyModuleTests

class myclass(object):
    def somefunction(self, x):
        return x*x

if __name__ == '__main__':
    unittest.main()  
</snippet></ROW><ROW><id>8800887</id><snippet>import unittest
from mymodule import myclass

class MyModuleTests(unittest.TestCase):
    def test_somefunction(self):
        m = myclass()
        self.assertEqual(4, m.somefunction(2))
</snippet></ROW><ROW><id>8800887</id><snippet>Traceback (most recent call last):
  File "mymodule.py", line 2, in &lt;module&gt;
    from mymoduletests import MyModuleTests
  File "/Users/srgerg/Desktop/p/mymoduletests.py", line 2, in &lt;module&gt;
    from mymodule import myclass
  File "/Users/srgerg/Desktop/p/mymodule.py", line 2, in &lt;module&gt;
    from mymoduletests import MyModuleTests
ImportError: cannot import name MyModuleTests
</snippet></ROW><ROW><id>8800887</id><snippet>class myclass(object):
    def somefunction(self, x):
        return x*x

if __name__ == '__main__':
    import unittest
    from mymoduletests import MyModuleTests
    unittest.main()
</snippet></ROW><ROW><id>8800887</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</snippet></ROW><ROW><id>8801066</id><snippet>cat foo.txt | sed "s/[^A-Za-z0-99]/ /g" &gt; bar.txt
</snippet></ROW><ROW><id>8801066</id><snippet>re</snippet></ROW><ROW><id>8801066</id><snippet>import re
original_string = open('foo.txt').read()
new_string = re.sub('[^a-zA-Z0-9\n\.]', ' ', original_string)
open('bar.txt', 'w').write(new_string)
</snippet></ROW><ROW><id>8801191</id><snippet>user model</snippet></ROW><ROW><id>8801191</id><snippet>Users</snippet></ROW><ROW><id>8801191</id><snippet>    # Extract the POST values
    username = request.POST.get('username ', False) 
    .
    .
    .

    # Create new user object
    user = User()

    # Fill the POST request information
    user.username = username
    .
    .

    # Fill the default values
    user.slug = 'What ever you want'
    .
    .
    .

    # Save the object
    user.save()
</snippet></ROW><ROW><id>8801191</id><snippet>or '</snippet></ROW><ROW><id>8801191</id><snippet>class UserForm(ModelForm):

    class Meta:
        model = User
        fields = ('username','password','email','slug')
</snippet></ROW><ROW><id>8801191</id><snippet>exclude</snippet></ROW><ROW><id>8801191</id><snippet>class UserForm(ModelForm):

    class Meta:
        model = User
        exclude = ('role',)
</snippet></ROW><ROW><id>8801197</id><snippet>datetime</snippet></ROW><ROW><id>8801197</id><snippet>import datetime
</snippet></ROW><ROW><id>8801197</id><snippet>d = datetime.date.today()
</snippet></ROW><ROW><id>8801197</id><snippet>date.weekday</snippet></ROW><ROW><id>8801197</id><snippet>while d.weekday() != 4:
</snippet></ROW><ROW><id>8801197</id><snippet>date</snippet></ROW><ROW><id>8801197</id><snippet>timedelta</snippet></ROW><ROW><id>8801197</id><snippet>    d += datetime.timedelta(1)
</snippet></ROW><ROW><id>8801197</id><snippet>d</snippet></ROW><ROW><id>8801197</id><snippet>date</snippet></ROW><ROW><id>8801278</id><snippet>False</snippet></ROW><ROW><id>8801278</id><snippet>the_dict = { "k1": True, "k2": False, "k3": False, "k4": True, "k5": False, "k6": True }
check_keys = ["k1", "k2", "k3", "k4", "k5"]
found = 0
for k in check_keys:
  if k in the_dict and not the_dict[k]:
    found += 1
print "Found %u False values for the checked keys" % found
</snippet></ROW><ROW><id>8801278</id><snippet>the_dict</snippet></ROW><ROW><id>8801278</id><snippet>&gt;&gt;&gt; print sorted(the_dict.keys()[:5]
['k1', 'k2', 'k3', 'k4', 'k5'] 
</snippet></ROW><ROW><id>8801742</id><snippet>/* lib.c -&gt; lib.so */
#include &lt;stdio.h&gt;

void fn1(void) {
        puts("Called function 1");
}

void fn2(void) {
        puts("Called function 2");
}
</snippet></ROW><ROW><id>8801742</id><snippet>/* main.c -&gt; main.so */

typedef void (*callback)();

void mainfunction(void *F) {
        ((callback)F)();
}
</snippet></ROW><ROW><id>8801742</id><snippet>&gt;&gt;&gt; from ctypes import cdll
&gt;&gt;&gt; lib = cdll.LoadLibrary('./lib.so')
&gt;&gt;&gt; main = cdll.LoadLibrary('./main.so')
&gt;&gt;&gt; main.mainfunction(lib.fn1)
Called function 1
&gt;&gt;&gt; main.mainfunction(lib.fn2)
Called function 2
</snippet></ROW><ROW><id>8801742</id><snippet>&gt;&gt;&gt; from ctypes import CFUNCTYPE
&gt;&gt;&gt; def pyfn():
...     print "Called the Python function"
... 
&gt;&gt;&gt; CWRAPPER = CFUNCTYPE(None)

&gt;&gt;&gt; wrapped_py_func = CWRAPPER(pyfn)
&gt;&gt;&gt; main.mainfunction(wrapped_py_func)
Called the Python function
</snippet></ROW><ROW><id>8802119</id><snippet>add_prefix</snippet></ROW><ROW><id>8802119</id><snippet>FIELD_NAME_MAPPING = {
    'field1': 'html_field1',
    'field2': 'html_field2'
}

class MyForm(forms.ModelForm):
    def add_prefix(self, field_name):
        # look up field name; return original if not found
        field_name = FIELD_NAME_MAPPING.get(field_name, field_name)
        return super(MyForm, self).add_prefix(field_name)
</snippet></ROW><ROW><id>8802143</id><snippet>entities.query.select_related = False</snippet></ROW><ROW><id>8802143</id><snippet>select_related</snippet></ROW><ROW><id>8802383</id><snippet>s = '''1 2 3
4 5 6
7 8 9'''

l = [ map( float, i.strip().split(" ") ) for i in s.split( "\n" ) ] 
</snippet></ROW><ROW><id>8802383</id><snippet>strip</snippet></ROW><ROW><id>8802383</id><snippet>trim</snippet></ROW><ROW><id>8802463</id><snippet>&lt;widget_name&gt;_1</snippet></ROW><ROW><id>8802463</id><snippet>&lt;widget_name&gt;_2</snippet></ROW><ROW><id>8802463</id><snippet>&lt;widget_name&gt;_n</snippet></ROW><ROW><id>8802463</id><snippet>widget_list = [builder.get_object('&lt;widget_name&gt;_{0}'.format(i))
               for i in range(1, n+1)]
</snippet></ROW><ROW><id>8802463</id><snippet>widget_list[6]
</snippet></ROW><ROW><id>8802463</id><snippet>{0}</snippet></ROW><ROW><id>8802463</id><snippet>&gt;&gt; ['&lt;widget_name&gt;_{0}'.format(i)) for i in range(1, 4)
['&lt;widget_name&gt;_1', '&lt;widget_name&gt;_2', '&lt;widget_name&gt;_3']
</snippet></ROW><ROW><id>8802463</id><snippet>format</snippet></ROW><ROW><id>8802523</id><snippet>AB2</snippet></ROW><ROW><id>8802523</id><snippet>from cStringIO import StringIO
fileA = StringIO("""20111225, 20111226, 20090101""")
fileB = StringIO("""20111225, 20111226, 20090101, 20090102, 20111227, 20090105""")

def fileReader(infile):
  for line in infile:
    for part in line.split(','):
      yield part.strip()

def next_or_none(iterable):
  for value in iterable:
    yield value
  yield None

def combine(a,b):
  current_val = None
  hasA = hasB = False
  next_a, next_b = next_or_none(a).next, next_or_none(b).next
  current_a, current_b = next_a(), next_b()
  while True:
    if current_val is None:
      if current_a == current_b:
        current_val = current_a
        hasA = hasB = True
        current_a, current_b = next_a(), next_b()
      elif current_a is not None and (current_b is None or current_a &lt; current_b):
        current_val = current_a
        hasA = True
        current_a = next_a()
      elif current_b is not None and (current_a is None or current_b &lt; current_a):
        current_val = current_b
        hasB = True
        current_b = next_b()
      else:
        break
    else: # There's a current_val
      sub_a = []
      while current_a is not None and current_a &lt; current_val:
        sub_a.append(current_a)
        current_a = next_a()
      sub_b = []
      while current_b is not None and current_b &lt; current_val:
        sub_b.append(current_b)
        current_b = next_b()
      if sub_a or sub_b:
        sub_ab = list(combine(sub_a,sub_b))
      else:
        sub_ab = []
      yield (current_val,hasA,hasB,sub_ab)
      current_val = None
      hasA = hasB = False

for row in combine(fileReader(fileA),fileReader(fileB)):
  print row
</snippet></ROW><ROW><id>8802523</id><snippet>('20111225', True, True, [])
('20111226', True, True, [('20090101', True, True, []), ('20090102', False, True, [])])
('20111227', False, True, [('20090105', False, True, [])])
</snippet></ROW><ROW><id>8802889</id><snippet>aString = "hello world"
aString.startswith("hello")
</snippet></ROW><ROW><id>8802975</id><snippet>multiprocessing</snippet></ROW><ROW><id>8802975</id><snippet>pool</snippet></ROW><ROW><id>8802975</id><snippet>Array</snippet></ROW><ROW><id>8803125</id><snippet>a, b, c, ..., y, z</snippet></ROW><ROW><id>8803125</id><snippet>op1, op2, ..., opN</snippet></ROW><ROW><id>8803125</id><snippet>a op1 b op2 c ... y opN</snippet></ROW><ROW><id>8803125</id><snippet>op1 b and b op2 c and ... y opN z</snippet></ROW><ROW><id>8803125</id><snippet>3&lt;4 == 2&lt;3
</snippet></ROW><ROW><id>8803125</id><snippet>3 &lt; 4 and 4 == 2 and 2 &lt; 3
</snippet></ROW><ROW><id>8803125</id><snippet>False</snippet></ROW><ROW><id>8803200</id><snippet>self.hostName_regex.search(self.fqdn)</snippet></ROW><ROW><id>8803200</id><snippet>None</snippet></ROW><ROW><id>8803200</id><snippet>.group()</snippet></ROW><ROW><id>8803200</id><snippet>None</snippet></ROW><ROW><id>8803291</id><snippet>self</snippet></ROW><ROW><id>8803291</id><snippet>x</snippet></ROW><ROW><id>8803291</id><snippet>class bla:
    def function1(self):
        print 1
</snippet></ROW><ROW><id>8803291</id><snippet>self</snippet></ROW><ROW><id>8803291</id><snippet>this</snippet></ROW><ROW><id>8803291</id><snippet>static</snippet></ROW><ROW><id>8803291</id><snippet>class bla:
    @staticmethod
    def function1():
        print 1

    @staticmethod
    def function2():
        bla.function1()
</snippet></ROW><ROW><id>8803291</id><snippet>bla.function1()</snippet></ROW><ROW><id>8803291</id><snippet>bla</snippet></ROW><ROW><id>8803291</id><snippet>function2</snippet></ROW><ROW><id>8803348</id><snippet>params</snippet></ROW><ROW><id>8803348</id><snippet>from collections import OrderedDict
from urllib import urlencode
import requests

params = OrderedDict([('first', 1), ('second', 2), ('third', 3)])
requests.get('https://example.org/private_api', params=urlencode(params))
</snippet></ROW><ROW><id>8803348</id><snippet>self.params = dict(params or []</snippet></ROW><ROW><id>8804425</id><snippet>def getVideoChunk(filepath, timerange, outputfile):
    retcode = systemcall("ffmpeg %s %s", filepath, timerange, outputfile)
    return retcode
</snippet></ROW><ROW><id>8804425</id><snippet>ffmpeg -i input.mpg -sameq -ss 00:02:00 -t 00:02:00 output.mpg
</snippet></ROW><ROW><id>8804425</id><snippet>getVideoChunk("input.mpg", "00:02:00", "output.mpg")
</snippet></ROW><ROW><id>8804425</id><snippet>os.system("ffmpeg -i %s -sameq -ss %s -t %s %s" % (filepath, timerange, timerange, outputfile))
</snippet></ROW><ROW><id>8804564</id><snippet>Layout()</snippet></ROW><ROW><id>8804601</id><snippet>tuples = [(2,5),(8,9),(11,19),(22,43),(47,50)]
#tuples = [(2,7),(9,14),(17,20)]

def result(tuple, value):
    start = tuples[0][0] - 1
    for idx in range(len(tuples) - 1):
        if tuples[idx][1] &gt;= value + start:
            break
        start = start + (tuples[idx+1][0] - tuples[idx][1] - 1)  
    return value + start  

for i in range(1, 16):
    print str(i) + ' ' + str(result(tuples, i))
</snippet></ROW><ROW><id>8805015</id><snippet>import os
import subprocess

outfile = os.open("test",os.O_CREAT)
os.close(outfile)
outfile = os.open("test",os.O_RDWR)
command = ["mdfind","kMDItemKind == '*AppleWorks*'"]
subpipe = subprocess.Popen(command, stdout=outfile)
</snippet></ROW><ROW><id>8805115</id><snippet>deny</snippet></ROW><ROW><id>8805115</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>8805115</id><snippet>allow</snippet></ROW><ROW><id>8805115</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>8805115</id><snippet>favorable_url</snippet></ROW><ROW><id>8805115</id><snippet>'singapore-property-listing/'</snippet></ROW><ROW><id>8805115</id><snippet>deny</snippet></ROW><ROW><id>8805115</id><snippet>/mrt/</snippet></ROW><ROW><id>8805115</id><snippet>deny</snippet></ROW><ROW><id>8805115</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>8805115</id><snippet>deny</snippet></ROW><ROW><id>8805144</id><snippet>redirect_stdout</snippet></ROW><ROW><id>8805144</id><snippet>def redirect_stdout():
    print "Redirecting stdout"
    sys.stdout.flush() # &lt;--- important when redirecting to files

    # Duplicate stdout (file descriptor 1)
    # to a different file descriptor number
    newstdout = os.dup(1)

    # /dev/null is used just to discard what is being printed
    devnull = os.open('/dev/null', os.O_WRONLY)

    # Duplicate the file descriptor for /dev/null
    # and overwrite the value for stdout (file descriptor 1)
    os.dup2(devnull, 1)

    # Close devnull after duplication (no longer needed)
    os.close(devnull)

    # Use the original stdout to still be able
    # to print to stdout within python
    sys.stdout = os.fdopen(newstdout, 'w')
</snippet></ROW><ROW><id>8805244</id><snippet>import multiprocessing as mp

class Foo():
    @staticmethod
    def work(self):
        pass

pool = mp.Pool()
foo = Foo()
pool.apply_async(foo.work)
pool.close()
pool.join()
</snippet></ROW><ROW><id>8805244</id><snippet>Exception in thread Thread-2:
Traceback (most recent call last):
  File "/usr/lib/python2.7/threading.py", line 552, in __bootstrap_inner
    self.run()
  File "/usr/lib/python2.7/threading.py", line 505, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/usr/lib/python2.7/multiprocessing/pool.py", line 315, in _handle_tasks
    put(task)
PicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed
</snippet></ROW><ROW><id>8805244</id><snippet>pool</snippet></ROW><ROW><id>8805244</id><snippet>queue.Queue</snippet></ROW><ROW><id>8805244</id><snippet>queue.Queue</snippet></ROW><ROW><id>8805244</id><snippet>foo.work</snippet></ROW><ROW><id>8805244</id><snippet>foo.work()</snippet></ROW><ROW><id>8805244</id><snippet>def work(foo):
    foo.work()

pool.apply_async(work,args=(foo,))
</snippet></ROW><ROW><id>8805244</id><snippet>foo</snippet></ROW><ROW><id>8805244</id><snippet>Foo</snippet></ROW><ROW><id>8805244</id><snippet>foo.__dict__</snippet></ROW><ROW><id>8805402</id><snippet>&gt;&gt;&gt; import ConfigParser
&gt;&gt;&gt; config = ConfigParser.ConfigParser()
&gt;&gt;&gt; config.read('8805198.cfg')
['8805198.cfg']
&gt;&gt;&gt; d = dict((section, dict(config.items(section))) for section in config.sections())
&gt;&gt;&gt; print d
{'Message 1': {'1': 'Hello', '3': 'Blah\nHah', '2': 'Hi'}, 'Message 2': {'1': 'Hi', '3': 'Great.', '2': "How's it going?", '4': 'Yep'}}
&gt;&gt;&gt; print d['Message 1']
{'1': 'Hello', '3': 'Blah\nHah', '2': 'Hi'}
&gt;&gt;&gt; print d['Message 1']['3']
Blah
Hah
</snippet></ROW><ROW><id>8805440</id><snippet>\</snippet></ROW><ROW><id>8805440</id><snippet>print time.strftime(("%m/%d/%Y %I:%M:%S "
    "%p"), time.localtime(os.path.getmtime(fname)))
</snippet></ROW><ROW><id>8805988</id><snippet>scipy.sparse.coo_matrix</snippet></ROW><ROW><id>8805988</id><snippet>digitize</snippet></ROW><ROW><id>8805988</id><snippet>histogram*</snippet></ROW><ROW><id>8805988</id><snippet>1.5</snippet></ROW><ROW><id>8805988</id><snippet>f = h5py.File(sys.argv[1], 'r')
A = np.empty(f['A'].shape, f['A'].dtype)
T = np.empty(f['T'].shape, f['T'].dtype)
f['A'].read_direct(A)
f['T'].read_direct(T)
</snippet></ROW><ROW><id>8805988</id><snippet>h5py</snippet></ROW><ROW><id>8805988</id><snippet>histogram2d</snippet></ROW><ROW><id>8805988</id><snippet>import numpy as np
import scipy.sparse
import timeit

def generate_data(num):
    x = np.random.random(num)
    y = np.random.random(num)
    return x, y

def crazy_histogram2d(x, y, bins=10):
    try:
        nx, ny = bins
    except TypeError:
        nx = ny = bins
    xmin, xmax = x.min(), x.max()
    ymin, ymax = y.min(), y.max()
    dx = (xmax - xmin) / (nx - 1.0)
    dy = (ymax - ymin) / (ny - 1.0)

    weights = np.ones(x.size)

    # Basically, this is just doing what np.digitize does with one less copy
    xyi = np.vstack((x,y)).T
    xyi -= [xmin, ymin]
    xyi /= [dx, dy]
    xyi = np.floor(xyi, xyi).T

    # Now, we'll exploit a sparse coo_matrix to build the 2D histogram...
    grid = scipy.sparse.coo_matrix((weights, xyi), shape=(nx, ny)).toarray()

    return grid, np.linspace(xmin, xmax, nx), np.linspace(ymin, ymax, ny)

if __name__ == '__main__':
    num=1e6
    numruns = 1
    x, y = generate_data(num)
    t1 = timeit.timeit('crazy_histogram2d(x, y, bins=500)',
            setup='from __main__ import crazy_histogram2d, x, y',
            number=numruns)
    t2 = timeit.timeit('np.histogram2d(x, y, bins=500)',
            setup='from __main__ import np, x, y',
            number=numruns)
    print 'Average of %i runs, using %.1e points' % (numruns, num)
    print 'Crazy histogram', t1 / numruns, 'sec'
    print 'numpy.histogram2d', t2 / numruns, 'sec'
</snippet></ROW><ROW><id>8805988</id><snippet>Average of 10 runs, using 1.0e+06 points
Crazy histogram 0.104092288017 sec
numpy.histogram2d 0.686891794205 sec
</snippet></ROW><ROW><id>8806046</id><snippet>Gtk.main()</snippet></ROW><ROW><id>8806046</id><snippet>GObject.threads_init()
Gdk.threads_init()
</snippet></ROW><ROW><id>8806046</id><snippet>Gdk.threads_enter()
# your code here
Gdk.threads_leave()
</snippet></ROW><ROW><id>8806046</id><snippet>Gdk.threads_enter()
your_window.append_text('something')
your_window.scroll_to_end()
Gdk.threads_leave()
</snippet></ROW><ROW><id>8806176</id><snippet>for link in link_list:
    u, v = link
    print u, v
</snippet></ROW><ROW><id>8806363</id><snippet>__init__.py</snippet></ROW><ROW><id>8806363</id><snippet>__author__</snippet></ROW><ROW><id>8806363</id><snippet>__email__</snippet></ROW><ROW><id>8806617</id><snippet>test.func_defaults</snippet></ROW><ROW><id>8806663</id><snippet>if tunnel == "Y" or "Yes" or "Yea" or "Si" or "go" or "Aye" or "Sure":
</snippet></ROW><ROW><id>8806663</id><snippet>if (tunnel == "Y") or ("Yes") or ("Yea") or ("Si") or ("go") or ("Aye") or ("Sure"):
</snippet></ROW><ROW><id>8806663</id><snippet>if tunnel in ("Y", "Yes", "Yea", "Si", "go", "Aye", "Sure"):
</snippet></ROW><ROW><id>8806663</id><snippet>if tunnel.lower() in ("y", "yes", "yea", "si", "go", "aye", "sure"):
</snippet></ROW><ROW><id>8806663</id><snippet>in</snippet></ROW><ROW><id>8806663</id><snippet>if tunnel.lower() in {"y", "yes", "yea", "si", "go", "aye", "sure"}:
</snippet></ROW><ROW><id>8807060</id><snippet>from django.forms import ModelForm, PasswordInput
class UserForm(ModelForm):

    class Meta:
        model = Users

        widgets = {
            'password' : PasswordInput(),
        }
</snippet></ROW><ROW><id>8807446</id><snippet>class OAuth(object):
    """Handles OAuth authentication procedures and helps retrieve tokens"""
    def __init__(self, client_id, client_secret, redirect_uri):
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_uri = redirect_uri

    def auth_url(self):
        """Gets the url a user needs to access to give up a user token"""
        data = {
            'client_id': self.client_id,
            'response_type': u'code',
            'redirect_uri': self.redirect_uri,
        }
        return u'{AUTH_ENDPOINT}?{params}'.format(
            AUTH_ENDPOINT=AUTH_ENDPOINT,
            params=urllib.urlencode(data))

    def get_token(self, code):
        """Gets the auth token from a user's response"""
        if not code:
            log.error(u'Code not provided')
            return None
        data = {
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'grant_type': u'authorization_code',
            'redirect_uri': self.redirect_uri,
            'code': unicode(code),
        }
        # Build the token uri to request
        url = u'{TOKEN_ENDPOINT}?{params}'.format(
            TOKEN_ENDPOINT=TOKEN_ENDPOINT,
            params=urllib.urlencode(data))
        log.debug(u'GET: {0}'.format(url))
        access_token = None
        # Get the response from the token uri and attempt to parse
        response = _request_with_retry(url)
        return response.get('access_token')
</snippet></ROW><ROW><id>8807470</id><snippet>Item Delegate</snippet></ROW><ROW><id>8807470</id><snippet>QItemDelegate</snippet></ROW><ROW><id>8807470</id><snippet>setItemDelegateForColumn</snippet></ROW><ROW><id>8807470</id><snippet>class MaskInputDelegate(QItemDelegate):

    def __init__(self, mask, parent=None):
        QItemDelegate.__init__(self, parent)
        self._mask = mask

    def createEditor(self, parent, option, index):
        editor = QLineEdit(parent)
        editor.setInputMask(self._mask)
        return editor
</snippet></ROW><ROW><id>8807470</id><snippet>self.table.setItemDelegateForColumn(1, MaskInputDelegate('0-00-00-0-0000'))
</snippet></ROW><ROW><id>8807470</id><snippet>QTableWidget</snippet></ROW><ROW><id>8807644</id><snippet>a = textbox.textbox("test")
</snippet></ROW><ROW><id>8807644</id><snippet>from textbox import textbox
</snippet></ROW><ROW><id>8807655</id><snippet>X-Something</snippet></ROW><ROW><id>8807816</id><snippet>from FooBar import FooBar
FooBar.test = 1

foo_bar = FooBar()
foo_bar.Foo()
</snippet></ROW><ROW><id>8807816</id><snippet>class FooBar:
    test = None

    def Foo( self ):
        print self.test
</snippet></ROW><ROW><id>8807816</id><snippet>from FooBar import FooBar
foo_bar = FooBar( 1 )
foo_bar.Foo()
</snippet></ROW><ROW><id>8807816</id><snippet>class FooBar:
    def __init__( self, test ):
        self.test = test

    def Foo( self ):
        print self.test 
</snippet></ROW><ROW><id>8807828</id><snippet>_</snippet></ROW><ROW><id>8807828</id><snippet>None</snippet></ROW><ROW><id>8807828</id><snippet>__</snippet></ROW><ROW><id>8807828</id><snippet>___</snippet></ROW><ROW><id>8807828</id><snippet>Out</snippet></ROW><ROW><id>8807828</id><snippet>_</snippet></ROW><ROW><id>8807834</id><snippet>wx.ID_XXX</snippet></ROW><ROW><id>8807834</id><snippet>import wx

x = dir(wx)
for y in x:
    if y.startswith('ID_'):
        print y
</snippet></ROW><ROW><id>8807834</id><snippet>wx.ID_ANY</snippet></ROW><ROW><id>8807834</id><snippet>frame = wx.Frame(parent, id=wx.ID_ANY, title="", .....)
</snippet></ROW><ROW><id>8808095</id><snippet>In [1]: l = [122,423,134]

In [2]: [int(str(val)[::-1]) for val in l]
Out[2]: [221, 324, 431]
</snippet></ROW><ROW><id>8808095</id><snippet>str(val)</snippet></ROW><ROW><id>8808095</id><snippet>[::-1]</snippet></ROW><ROW><id>8808095</id><snippet>int()</snippet></ROW><ROW><id>8808210</id><snippet>dict</snippet></ROW><ROW><id>8808210</id><snippet>d</snippet></ROW><ROW><id>8808210</id><snippet>LidarPropertiesField</snippet></ROW><ROW><id>8808210</id><snippet>d</snippet></ROW><ROW><id>8808210</id><snippet>d</snippet></ROW><ROW><id>8808210</id><snippet>for k, v in d.iteritems():
     if getattr(LidarPropertiesField, k) != v:
         # difference found; note, an exception will be raised
         # if LidarPropertiesField has no attribute k
</snippet></ROW><ROW><id>8808210</id><snippet>dict</snippet></ROW><ROW><id>8808210</id><snippet>dict((k, v) for k, v in LidarPropertiesField.__dict__.iteritems()
            if not k.startswith('_'))
</snippet></ROW><ROW><id>8808210</id><snippet>==</snippet></ROW><ROW><id>8808210</id><snippet>_</snippet></ROW><ROW><id>8808210</id><snippet>__doc__</snippet></ROW><ROW><id>8808210</id><snippet>__dict__</snippet></ROW><ROW><id>8808210</id><snippet>__module__</snippet></ROW><ROW><id>8808210</id><snippet>__weakref__</snippet></ROW><ROW><id>8808302</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.button = QtGui.QPushButton('Test', self)
        self.button.clicked.connect(self.handleButton)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.button)

    def handleButton(self):
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers == QtCore.Qt.ShiftModifier:
            print('Shift+Click')
        elif modifiers == QtCore.Qt.ControlModifier:
            print('Control+Click')
        else:
            print('Click')

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8808310</id><snippet>clean_title</snippet></ROW><ROW><id>8808310</id><snippet>clean_story</snippet></ROW><ROW><id>8808310</id><snippet>class SubmitForm(forms.Form):
    title = forms.CharField(max_length=100)
    story = forms.CharField(max_length=3000)
    # lat = forms.DecimalField(max_digits=25, decimal_places=20)
    # lng = forms.DecimalField(max_digits=25, decimal_places=20)

    def clean_title(self):  
        if len(self.cleaned_data['title']) &lt; 4:
            raise forms.ValidationError("Enter your full title")
        # Always return the cleaned data
        return self.cleaned_data['title']


    def clean_story(self):
        if len(self.cleaned_data['story']) &lt; 4:
            raise forms.ValidationError("Enter your full story")
        # Always return the cleaned data
        return self.cleaned_data['story']

    def clean(self):
        cleaned_data = self.cleaned_data
        return cleaned_data
</snippet></ROW><ROW><id>8808530</id><snippet>def addToClass(cls, ClassId):
    cls.Context = ClassId1+"CONTEXTSTR"
    cls.SubContext = ClassId1+"SUBCONTEXTSTR"
    cls.UpVal = ClassID+"UPVAL"
    cls.DoenVal = ClassID1+"DOWNVAL"

class NewClass(MyClass):
    ...
</snippet></ROW><ROW><id>8808530</id><snippet>addToClass(NewClass, "someid")
</snippet></ROW><ROW><id>8808530</id><snippet>def getMetaClass(classId):
    class MyMetaClass(type):
        def __new__(cls, name, bases, dct):
            dct["Context"] =  "%sCONTEXTSTR" % classId
            dct["SubContext"] = "%sSUBCONTEXTSTR" % classId
            dct["UpVal"] = "%sUPVAL" % classId
            dct["DownVal"] = "%sDOWNVAL" % classId
            return super(MyMetaClass, cls).__new__(cls, name, bases, dct)
    return MyMetaClass
</snippet></ROW><ROW><id>8808530</id><snippet>class MyClass1():
    __metaclass__ = getMetaClass("test01")
</snippet></ROW><ROW><id>8808530</id><snippet>&gt;&gt;&gt; A.Context
'test01CONTEXTSTR'
</snippet></ROW><ROW><id>8808530</id><snippet>__metaclass__</snippet></ROW><ROW><id>8808530</id><snippet>class MyMetaClass(type):
    def __new__(cls, name, bases, dct):
        classId = dct.get("CLASSID", "noClassId")
        dct["Context"] =  "%sCONTEXTSTR" % classId
        dct["SubContext"] = "%sSUBCONTEXTSTR" % classId
        dct["UpVal"] = "%sUPVAL" % classId
        dct["DownVal"] = "%sDOWNVAL" % classId
        return super(MyMetaClass, cls).__new__(cls, name, bases, dct)
</snippet></ROW><ROW><id>8808530</id><snippet>class AutoContext:
    __metaclass__ = getMetaClass()
</snippet></ROW><ROW><id>8808530</id><snippet>class MyClass1(AutoContext):
    CLASSID = "test01"
</snippet></ROW><ROW><id>8808635</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>8808635</id><snippet>{% for book in books %}</snippet></ROW><ROW><id>8808649</id><snippet>A = zeros(D.shape)
for i, j in I:
    A[i, j] = D[i, j]
</snippet></ROW><ROW><id>8808649</id><snippet>A = zeros(D.shape)
i, j = I.T
A[i, j] = D[i, j]
</snippet></ROW><ROW><id>8809241</id><snippet>app.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app-test.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app-test.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app-test.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>app-test.appspot.com</snippet></ROW><ROW><id>8809241</id><snippet>whoami</snippet></ROW><ROW><id>8809241</id><snippet>resttest_dsl</snippet></ROW><ROW><id>8809241</id><snippet>client.GET('/').responds_access_denied()
client.GET('/', auth='user').responds_html()
client.GET('/admin').responds_access_denied()
client.GET('/admin', auth='user').responds_access_denied()
client.GET('/admin', auth='admin').responds_html()
client.GET('/artikel/').responds_with_html_to_valid_auth()
client.GET('/artikel/?q=Ratzfratz', auth='user').responds_html()
client.GET('/api/ic/v3/a/14600/03/zukunft.json').responds_with_json_to_valid_auth()
client.GET('/kunden/SC50313/o/SO1194829/', auth='user').responds_html()
client.GET('/api/masterdata/artikel/v2/artnr/14600/bild=s210').redirects_to('...')
</snippet></ROW><ROW><id>8809241</id><snippet>Makefile</snippet></ROW><ROW><id>8809241</id><snippet>deploy:
appcfg.py update -V dev-`whoami` -A app .
TESTHOST=dev-`whoami`.app.appspot.com make resttest
open http://dev-`whoami`.app.appspot.com/
</snippet></ROW><ROW><id>8809241</id><snippet>deploy_production:
rm -Rf tmp
mkdir tmp
(cd tmp ; git clone git@github.com:user/app.git)
(cd tmp/app ; git checkout production ; make dependencies)
(cd tmp/app ; git show-ref --hash=7 refs/remotes/origin/production &gt; version.txt)
appcfg.py update -V "v`cat tmp/app/version.txt`" -A app tmp/app
(cd tmp/huWaWi ; TESTHOST="v`cat version.txt`".app.appspot.com make resttest)
appcfg.py update -V production -A app tmp/app
appcfg.py backends -V production -A app tmp/huWaWi app
</snippet></ROW><ROW><id>8809241</id><snippet>resttest.py</snippet></ROW><ROW><id>8809241</id><snippet>make</snippet></ROW><ROW><id>8809257</id><snippet>import time
import numpy as np
from scipy import spatial
import multiprocessing as mp

pool = mp.Pool(4)

test_data = np.random.random(100000*500).reshape([100000,500])

outfile = open('/tmp/test.out','w')

def split(data,size):
    for i in xrange(0, len(data), size):
        yield data[i:i+size]

def distance(vecs):
    return spatial.distance.cdist(vecs,test_data)

chunks = list(split(test_data,100))
for chunk in chunks:
    t0 = time.time()
    distances = spatial.distance.cdist(chunk,test_data)
    outfile.write(' '.join([str(x) for x in distances]))
    print 'estimated: %.2f secs'%((time.time()-t0)*len(chunks))
</snippet></ROW><ROW><id>8809605</id><snippet>help</snippet></ROW><ROW><id>8809605</id><snippet>help</snippet></ROW><ROW><id>8809605</id><snippet>pydoc</snippet></ROW><ROW><id>8809605</id><snippet>ModuleScanner</snippet></ROW><ROW><id>8809605</id><snippet>&gt;&gt;&gt; modules = []
&gt;&gt;&gt; def callback(path, modname, desc, modules=modules):
    if modname and modname[-9:] == '.__init__':
        modname = modname[:-9] + ' (package)'
    if modname.find('.') &lt; 0:
        modules.append(modname)

&gt;&gt;&gt; def onerror(modname):
    callback(None, modname, None)

&gt;&gt;&gt; from pydoc import ModuleScanner 
&gt;&gt;&gt; ModuleScanner().run(callback, onerror=onerror)
&gt;&gt;&gt; len(modules)
379
&gt;&gt;&gt; modules[:10]
['__builtin__', '_ast', '_bisect', '_codecs', '_codecs_cn', '_codecs_hk', '_codecs_iso2022', '_codecs_jp', '_codecs_kr', '_codecs_tw']
&gt;&gt;&gt; len(modules)
379
</snippet></ROW><ROW><id>8809907</id><snippet>areas = relationship('DbArea',
    backref = backref('routes', order_by = 'DbRoute.name'),
    secondary = area_relationship_table,
    primaryjoin = area_id == area_relationship_table.c.descendent,
    secondaryjoin = DbArea.area_id == area_relationship_table.c.ancestor,
    innerjoin = True, order_by = DbArea.name,
    foreign_keys =
       [area_relationship_table.c.ancestor,
            area_relationship_table.c.descendent]) 
</snippet></ROW><ROW><id>8809969</id><snippet>from datetime import datetime
from pytz import timezone
import pytz

date_format='%m/%d/%Y %H:%M:%S %Z'
date = datetime.now(tz=pytz.utc)
print 'Current date &amp; time is:', date.strftime(date_format)

date = date.astimezone(timezone('US/Pacific'))

print 'Local date &amp; time is  :', date.strftime(date_format)
</snippet></ROW><ROW><id>8810050</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>8810050</id><snippet>logging.StreamHandler</snippet></ROW><ROW><id>8810050</id><snippet>handlers</snippet></ROW><ROW><id>8810050</id><snippet>logging.StreamHandlers</snippet></ROW><ROW><id>8810050</id><snippet>logging.ERROR</snippet></ROW><ROW><id>8810050</id><snippet>logging.StreamHandler</snippet></ROW><ROW><id>8810050</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>8810050</id><snippet>logging.BasicConfig</snippet></ROW><ROW><id>8810050</id><snippet>if len(root.handlers) == 0:
    filename = kwargs.get("filename")
    if filename:
        mode = kwargs.get("filemode", 'a')
        hdlr = FileHandler(filename, mode)
    else:
        stream = kwargs.get("stream")
        hdlr = StreamHandler(stream)
    fs = kwargs.get("format", BASIC_FORMAT)
    dfs = kwargs.get("datefmt", None)
    fmt = Formatter(fs, dfs)
    hdlr.setFormatter(fmt)
    root.addHandler(hdlr)
    level = kwargs.get("level")
    if level is not None:
        root.setLevel(level)
</snippet></ROW><ROW><id>8810050</id><snippet>filename</snippet></ROW><ROW><id>8810050</id><snippet>logging.StreamHandler</snippet></ROW><ROW><id>8810081</id><snippet>X</snippet></ROW><ROW><id>8810081</id><snippet>X.argmin(axis=1)
</snippet></ROW><ROW><id>8810195</id><snippet>import sys, pkgutil
mods = set()

#You may not need this part if you don't care about the builtin modules
print sys.builtin_module_names
for m in sys.builtin_module_names:
    if m != '__main__':
        mods.add(m)
        #mods.add(m)


for loader, name, ispkg in pkgutil.walk_packages():
    if name.find('.') == -1:
        mods.add(name)

print mods
</snippet></ROW><ROW><id>8810555</id><snippet>button.Bind(wx.EVT_BUTTON, parent.onSwitchPanels)
</snippet></ROW><ROW><id>8810555</id><snippet>import wx
import wx.grid as gridlib

########################################################################
class PanelOne(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)
        txt = wx.TextCtrl(self)
        button =wx.Button(self, label="Save", pos=(200, 325))
        button.Bind(wx.EVT_BUTTON, parent.onSwitchPanels)

########################################################################
class PanelTwo(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)

        grid = gridlib.Grid(self)
        grid.CreateGrid(25,12)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(grid, 0, wx.EXPAND)
        self.SetSizer(sizer)

########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY,
                          "Panel Switcher Tutorial",
                          size=(800,600))

        self.panel_one = PanelOne(self)
        self.panel_two = PanelTwo(self)
        self.panel_two.Hide()

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.panel_one, 1, wx.EXPAND)
        self.sizer.Add(self.panel_two, 1, wx.EXPAND)
        self.SetSizer(self.sizer)

        menubar = wx.MenuBar()
        fileMenu = wx.Menu()
        switch_panels_menu_item = fileMenu.Append(wx.ID_ANY,
                                                  "Switch Panels",
                                                  "Some text")
        self.Bind(wx.EVT_MENU, self.onSwitchPanels,
                  switch_panels_menu_item)
        menubar.Append(fileMenu, '&amp;File')
        self.SetMenuBar(menubar)

    #----------------------------------------------------------------------
    def onSwitchPanels(self, event):

        if self.panel_one.IsShown():
           self.SetTitle("Panel Two Showing")
           self.panel_one.Hide()
           self.panel_two.Show()
        else:
           self.SetTitle("Panel One Showing")
           self.panel_one.Show()
           self.panel_two.Hide()
        self.Layout()

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>8810685</id><snippet> import re
 mfcList1, ctrlList1 = [],[]
 # read the whole file as a list of lines - its easier
 with open(file1, 'r') as f1:
     lines = f1.readlines()

 # for each line, search for your string. 
 # If you have found MegaMon append one mfcList1, else append ctrlList1
 foundMegaMon = False
 for line in lines:
     if re.search("MegaMon&gt; mfc",line):
          foundMegaMon = True
     if foundMegaMon:
          mfcList1.append(line)
     else:
          ctrlList1.append(line)
</snippet></ROW><ROW><id>8810797</id><snippet>def main():
    dog = Animal()    
    dog.set_owner('Sue')
    print dog.get_owner()
    dog.noise()


if  __name__ =='__main__':main()
</snippet></ROW><ROW><id>8810797</id><snippet>class Animal:
    __hungry = "yes"
    __name = "no name"
    __owner = "no owner"

    def __init__(self):
        pass

    def set_owner(self,newOwner):
        self.__owner= newOwner
        return

    def get_owner(self):
        return self.__owner

    def set_name(self,newName):
        self.__name= newName
        return

    def get_name(self):
        return self.__name

    def noise(self):
        print('errr')
        return

    def __hiddenmethod(self):
        print("hard to find")


def main():
    dog = Animal()    
    dog.set_owner('Sue')
    print dog.get_owner()
    dog.noise()


if  __name__ =='__main__':
    main()
</snippet></ROW><ROW><id>8810930</id><snippet>installed_modules = page.module_set.all()
</snippet></ROW><ROW><id>8810930</id><snippet>module_map = dict([(m.module_static_object.key, m) for m in installed_modules])
</snippet></ROW><ROW><id>8810930</id><snippet>navigation_links = [m for m in installed_modules if m.module_type == ModuleTypeCode.MODAL]
</snippet></ROW><ROW><id>8810930</id><snippet>module_static_object.key</snippet></ROW><ROW><id>8810930</id><snippet>select_related</snippet></ROW><ROW><id>8811096</id><snippet>def cycle(lst, val, stop=None):
    d = dict(lst)
    stop = stop if stop is not None else val
    while True:
        yield val
        val = d.get(val, stop)
        if val == stop: break
</snippet></ROW><ROW><id>8811096</id><snippet>&gt;&gt;&gt; for x in cycle([[0, 3], [1, 0], [3, 1]], 0):
....    print x
....
0
3
1
</snippet></ROW><ROW><id>8811096</id><snippet>&gt;&gt;&gt; list(cycle([[0, 3], [1, 0], [3, 1]], 0))
[0, 3, 1]
</snippet></ROW><ROW><id>8811096</id><snippet>&gt;&gt;&gt; generator = cycle([[0, 3], [1, 0], [3, 1]], 0, Ellipsis)
&gt;&gt;&gt; generator.next()
... 0
&gt;&gt;&gt; generator.next()
... 3
&gt;&gt;&gt; generator.next()
... 1
&gt;&gt;&gt; generator.next()
... 0
&gt;&gt;&gt; generator.next()
... 3
&gt;&gt;&gt; generator.next()
... 1
&gt;&gt;&gt; generator.next()
... 0
&gt;&gt;&gt; generator.next()
... 3
</snippet></ROW><ROW><id>8811350</id><snippet>SConstruct</snippet></ROW><ROW><id>8811350</id><snippet># SConscript, for example
sources = ["bar1_1.cpp", "bar1_2.cpp", ...]
objects = [env.Object(x) for x in sources]
Return(objects)

# SConstruct (top-level)
directory_1_objects = SConscript("directory_1/SConscript")
directory_2_objects = SConscript("directory_2/SConscript")
program = env.Program("magical_wonders", [directory_1_objects, directory_2_objects])
</snippet></ROW><ROW><id>8811418</id><snippet>$ pip install "package&gt;=0.2,&lt;=0.3"
</snippet></ROW><ROW><id>8811418</id><snippet>pip</snippet></ROW><ROW><id>8811649</id><snippet>{ _id: ...,
  "4f0cbe6d7f40d36b24a5c4d7":           true,
  ObjectId("4f0cbe6d7f40d36b24a5c4d7"): false
}
</snippet></ROW><ROW><id>8811649</id><snippet>db.foo.find({"4f0cbe6d7f40d36b24a5c4d7": false})
</snippet></ROW><ROW><id>8811649</id><snippet>{ answers: [
    { answer_id: ObjectId("..."), summary: "Good answer to this question" },
    { answer_id: ObjectId("..."), summary: "Bad answer to this question" }
  ]
}
</snippet></ROW><ROW><id>8811649</id><snippet>answers</snippet></ROW><ROW><id>8811649</id><snippet>answers.answer_id</snippet></ROW><ROW><id>8811693</id><snippet>awk</snippet></ROW><ROW><id>8811693</id><snippet>awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"}' INPUT_FILE
</snippet></ROW><ROW><id>8811693</id><snippet>[jaypal:~/Temp] cat file
1   3
2   3
3   3
4   3
8   3
9   3
12  3
14  3
18  3
19  3
20  3
25  3
26  3
27  3
28  3
30  3
31  3
32  3
36  3
38  3
101 3
109 3

[jaypal:~/Temp] awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"}' file
0 6
1 4
2 5
3 5
10 2
</snippet></ROW><ROW><id>8811996</id><snippet>to_write = []
for line in open(file):
  #...
  to_write.append(MyEntity(prop1=XXX, prop2=YYY)
db.put(to_write)
</snippet></ROW><ROW><id>8812069</id><snippet>c.execute("insert into medicoes values(?,?,?,?,?,?,?)" % keys)
</snippet></ROW><ROW><id>8812069</id><snippet>c.execute("insert into medicoes values (?,?,?,?,?,?,?)", keys)
</snippet></ROW><ROW><id>8812069</id><snippet>%</snippet></ROW><ROW><id>8812069</id><snippet>keys</snippet></ROW><ROW><id>8812069</id><snippet>import json

traffic = json.load(open('xxx.json'))

columns = ['local', 'coord', 'sentido', 'veiculos', 'modalidade', 'pistas']
for timestamp, data in traffic.iteritems():
    keys = (timestamp,) + tuple(data[c] for c in columns)
    print str(keys)
</snippet></ROW><ROW><id>8812069</id><snippet>(u'2011-12-19 08:38', u'R. Fernandes Vieira; esquina Prot\xe1sio Alves', u'-30.035535,-51.211079', u'\xfanico', u'automotores', u'sem\xe1foro 30-70', u'3')
(u'2011-12-17 16:00', u'Av. Prot\xe1sio Alves; esquina Ramiro Barcelos', u'-30.036916,-51.208093', u'bairro-centro', u'automotores', u'semaforo 50-15', u'2+c')
</snippet></ROW><ROW><id>8812069</id><snippet>import json
import sqlite3

traffic = json.load(open('xxx.json'))
db = sqlite3.connect("fluxos.sqlite")

query = "insert into medicoes values (?,?,?,?,?,?,?)"
columns = ['local', 'coord', 'sentido', 'veiculos', 'modalidade', 'pistas']
for timestamp, data in traffic.iteritems():
    keys = (timestamp,) + tuple(data[c] for c in columns)
    c = db.cursor()
    c.execute(query, keys)
    c.close()
</snippet></ROW><ROW><id>8812069</id><snippet>import json

traffic = json.load(open('xxx.json'))

someitem = traffic.itervalues().next()
columns = list(someitem.keys())
print columns
</snippet></ROW><ROW><id>8812069</id><snippet>[u'medicoes', u'veiculos', u'coord', u'modalidade', u'sentido', u'local', u'pistas', u'regime']
</snippet></ROW><ROW><id>8812069</id><snippet>import json
import sqlite3

db = sqlite3.connect('fluxos.sqlite')
traffic = json.load(open('xxx.json'))

someitem = traffic.itervalues().next()
columns = list(someitem.keys())
columns.remove('medicoes')
columns.remove('regime')

query = "insert into medicoes (timestamp,{0}) values (?{1})"
query = query.format(",".join(columns), ",?" * len(columns))
print query

for timestamp, data in traffic.iteritems():
    keys = (timestamp,) + tuple(data[c] for c in columns)
    c = db.cursor()
    c.execute(query)
    c.close()
</snippet></ROW><ROW><id>8812069</id><snippet>insert into medicoes (timestamp,veiculos,coord,modalidade,sentido,local,pistas) values (?,?,?,?,?,?,?)
</snippet></ROW><ROW><id>8812146</id><snippet>r,c=raw_input().split()</snippet></ROW><ROW><id>8812146</id><snippet>raw_input()</snippet></ROW><ROW><id>8812146</id><snippet>str</snippet></ROW><ROW><id>8812146</id><snippet>r</snippet></ROW><ROW><id>8812146</id><snippet>c</snippet></ROW><ROW><id>8812146</id><snippet>r</snippet></ROW><ROW><id>8812146</id><snippet>str</snippet></ROW><ROW><id>8812146</id><snippet>if r%2==0:</snippet></ROW><ROW><id>8812146</id><snippet>r</snippet></ROW><ROW><id>8812146</id><snippet>int</snippet></ROW><ROW><id>8812146</id><snippet>r,c=raw_input().split()
if int(r)%2==0:
    r=int(r)/2
else:
    r=int(r)/2+1
print(r*c)
tc=tc-1
</snippet></ROW><ROW><id>8812234</id><snippet>list_of_lists = [
    [4, 5, 6],
    [7, 0, 8],
    [6, 2, 9]
]

def index_of(value, matrix):
    for i, r in enumerate(matrix):
        for j, c in enumerate(r):
            if c == value:
                # returns the first instance
                return (i,j)
    return None

if index_of(0, list_of_lists) == (1,1):
    print "hey"

list_of_lists2 = [
    [0, 5, 6],
    [7, 0, 8],
    [0, 2, 9]
]

def indexes_of(value, matrix):
    return [(i,j) for i, r in enumerate(matrix) for j, c in enumerate(r) if c == value]

print indexes_of(0, list_of_lists2)
</snippet></ROW><ROW><id>8812234</id><snippet>hey
[(0, 0), (1, 1), (2, 0)]
</snippet></ROW><ROW><id>8812234</id><snippet>&gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']
&gt;&gt;&gt; list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
&gt;&gt;&gt; list(enumerate(seasons, start=1))
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
</snippet></ROW><ROW><id>8812234</id><snippet>for i, r in enumerate(matrix)
</snippet></ROW><ROW><id>8812704</id><snippet>import webbrowser
webbrowser.open_new("http://www.cnn.com")
</snippet></ROW><ROW><id>8812704</id><snippet>echo 'open location "http://www.cnn.com"' | osascript
</snippet></ROW><ROW><id>8812704</id><snippet>open location www.cnn.com</snippet></ROW><ROW><id>8812737</id><snippet>from scipy import signal
import numpy as np
b1, a1 = signal.iirdesign(wp = 0.11, ws= 0.1, gstop= 60, gpass=1, ftype='cheby1')
b2, a2 = signal.iirdesign(wp = 0.119, ws= 0.1, gstop= 60, gpass=1, ftype='cheby1')

print "filter1", np.all(np.abs(np.roots(a1))&lt;1)
print "filter2", np.all(np.abs(np.roots(a2))&lt;1)
</snippet></ROW><ROW><id>8813069</id><snippet>__getattr__</snippet></ROW><ROW><id>8813069</id><snippet>__getattribute__</snippet></ROW><ROW><id>8813069</id><snippet>__getattr__</snippet></ROW><ROW><id>8813069</id><snippet>__getattribute__</snippet></ROW><ROW><id>8813069</id><snippet>class Test(object):
    def __getattr__(self,key):
        def placeholder(*args, **kwargs):
            print "Warning - method '%s' does not exist for this instance"%key
        return placeholder
</snippet></ROW><ROW><id>8813131</id><snippet>import matplotlib.pyplot as plt

def main():
    fig = plt.figure()
    plt.subplots_adjust(top=0.85) # use a lower number to make more vertical space
    plt.bar([1,2],[5,4])
    fig.canvas.mpl_connect('draw_event', on_draw)
    plt.title('this is a very long title and therefore it gets cropped which is an unthinkable behaviour as it loses the information in the title')
    plt.savefig('./test.png')

def on_draw(event):
    """Auto-wraps all text objects in a figure at draw-time"""
    import matplotlib as mpl
    fig = event.canvas.figure

    # Cycle through all artists in all the axes in the figure
    for ax in fig.axes:
        for artist in ax.get_children():
            # If it's a text artist, wrap it...
            if isinstance(artist, mpl.text.Text):
                autowrap_text(artist, event.renderer)

    # Temporarily disconnect any callbacks to the draw event...
    # (To avoid recursion)
    func_handles = fig.canvas.callbacks.callbacks[event.name]
    fig.canvas.callbacks.callbacks[event.name] = {}
    # Re-draw the figure..
    fig.canvas.draw()
    # Reset the draw event callbacks
    fig.canvas.callbacks.callbacks[event.name] = func_handles

def autowrap_text(textobj, renderer):
    """Wraps the given matplotlib text object so that it exceed the boundaries
    of the axis it is plotted in."""
    import textwrap
    # Get the starting position of the text in pixels...
    x0, y0 = textobj.get_transform().transform(textobj.get_position())
    # Get the extents of the current axis in pixels...
    clip = textobj.get_axes().get_window_extent()
    # Set the text to rotate about the left edge (doesn't make sense otherwise)
    textobj.set_rotation_mode('anchor')

    # Get the amount of space in the direction of rotation to the left and 
    # right of x0, y0 (left and right are relative to the rotation, as well)
    rotation = textobj.get_rotation()
    right_space = min_dist_inside((x0, y0), rotation, clip)
    left_space = min_dist_inside((x0, y0), rotation - 180, clip)

    # Use either the left or right distance depending on the horiz alignment.
    alignment = textobj.get_horizontalalignment()
    if alignment is 'left':
        new_width = right_space 
    elif alignment is 'right':
        new_width = left_space
    else:
        new_width = 2 * min(left_space, right_space)

    # Estimate the width of the new size in characters...
    aspect_ratio = 0.5 # This varies with the font!! 
    fontsize = textobj.get_size()
    pixels_per_char = aspect_ratio * renderer.points_to_pixels(fontsize)

    # If wrap_width is &lt; 1, just make it 1 character
    wrap_width = max(1, new_width // pixels_per_char)
    try:
        wrapped_text = textwrap.fill(textobj.get_text(), wrap_width)
    except TypeError:
        # This appears to be a single word
        wrapped_text = textobj.get_text()
    textobj.set_text(wrapped_text)

def min_dist_inside(point, rotation, box):
    """Gets the space in a given direction from "point" to the boundaries of
    "box" (where box is an object with x0, y0, x1, &amp; y1 attributes, point is a
    tuple of x,y, and rotation is the angle in degrees)"""
    from math import sin, cos, radians
    x0, y0 = point
    rotation = radians(rotation)
    distances = []
    threshold = 0.0001 
    if cos(rotation) &gt; threshold: 
        # Intersects the right axis
        distances.append((box.x1 - x0) / cos(rotation))
    if cos(rotation) &lt; -threshold: 
        # Intersects the left axis
        distances.append((box.x0 - x0) / cos(rotation))
    if sin(rotation) &gt; threshold: 
        # Intersects the top axis
        distances.append((box.y1 - y0) / sin(rotation))
    if sin(rotation) &lt; -threshold: 
        # Intersects the bottom axis
        distances.append((box.y0 - y0) / sin(rotation))
    return min(distances)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8813131</id><snippet>plt.subplots_adjust(top=0.85) # use a lower number to make more vertical space
</snippet></ROW><ROW><id>8813131</id><snippet>plt.subplots_adjust(top=0.5)
</snippet></ROW><ROW><id>8813175</id><snippet>print AllData[CurrentDay][day] 
</snippet></ROW><ROW><id>8813175</id><snippet>print CurrentDay[day]</snippet></ROW><ROW><id>8813175</id><snippet>day</snippet></ROW><ROW><id>8813175</id><snippet>CurrentDay</snippet></ROW><ROW><id>8813264</id><snippet>partition</snippet></ROW><ROW><id>8813264</id><snippet>head, separator, tail</snippet></ROW><ROW><id>8813264</id><snippet>separator</snippet></ROW><ROW><id>8813264</id><snippet>tail</snippet></ROW><ROW><id>8813264</id><snippet>&gt;&gt;&gt; data = 'AAACTGACACCATCGATCAGAACCTGA'
&gt;&gt;&gt; head, sep, tail = data.partition('ACTGAC')
&gt;&gt;&gt; tail[:10]
'ACCATCGATC'
</snippet></ROW><ROW><id>8813264</id><snippet>&gt;&gt;&gt; data.partition('ACTGAC')[2][:10]
'ACCATCGATC'
</snippet></ROW><ROW><id>8813281</id><snippet>import re
print re.sub('class', 'function', 'Class object', flags=re.I)
</snippet></ROW><ROW><id>8813281</id><snippet>re.I</snippet></ROW><ROW><id>8813281</id><snippet>count</snippet></ROW><ROW><id>8813499</id><snippet>t = (a * (x0 - rx) + b * (y0 - ry) + c * (x0 - rz)) / (a * vx + b * vy + c * vz)
</snippet></ROW><ROW><id>8813499</id><snippet>a(x - x0) + b(y - y0) + c(z - z0) = 0
</snippet></ROW><ROW><id>8813499</id><snippet>&lt;x, y, z&gt; = &lt;rx + vx * t, ry + vy * t, rz + vz * t&gt;
</snippet></ROW><ROW><id>8813499</id><snippet>&lt;rx, ry, rz&gt;
</snippet></ROW><ROW><id>8813499</id><snippet>&lt;vx, vy, vz&gt;
</snippet></ROW><ROW><id>8813537</id><snippet>import os
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html, convertEntities=BeautifulSoup.HTML_ENTITIES)

with open('output.txt', 'wb') as stream:
    for tr in soup.findAll('tr')[1:]: # [1:] skips the header
        columns = tr.findAll('td')
        line = [columns[0].a.string.strip()]
        for item in (item.strip() for item in columns[1].findAll(text=True)):
            if (item and not item.startswith('Phone:')
                and not item.startswith('Fax:')):
                line.append(item)
        stream.write(' '.join(line).encode('utf-8'))
        stream.write(os.linesep)
</snippet></ROW><ROW><id>8813577</id><snippet>TypeError: unhashable type: 'matrix'
</snippet></ROW><ROW><id>8813577</id><snippet>matrix</snippet></ROW><ROW><id>8813577</id><snippet>O(n^2)</snippet></ROW><ROW><id>8813577</id><snippet>O(1)</snippet></ROW><ROW><id>8813736</id><snippet>var = self.__helper(record)
</snippet></ROW><ROW><id>8813936</id><snippet>a, b = b, a+b</snippet></ROW><ROW><id>8813936</id><snippet>a = b

b = a+b
</snippet></ROW><ROW><id>8814105</id><snippet>class Foo(object):
    a = "/admin'
    b = a + '/hello'
</snippet></ROW><ROW><id>8814180</id><snippet>shelve</snippet></ROW><ROW><id>8814180</id><snippet>cd</snippet></ROW><ROW><id>8814180</id><snippet>current_dictionary</snippet></ROW><ROW><id>8814180</id><snippet>import shelve

fs = shelve.open('filesystem.fs', writeback=True)
current_dir = []

def install(fs):
    # create root and others
    username = raw_input('What do you want your username to be? ')

    fs[""] = {"System": {}, "Users": {username: {}}}

def current_dictionary():
    """Return a dictionary representing the files in the current directory"""
    d = fs[""]
    for key in current_dir:
        d = d[key]
    return d

def ls(args):
    print 'Contents of directory', "/" + "/".join(current_dir) + ':'
    for i in current_dictionary():
        print i

def cd(args):
    if len(args) != 1:
        print "Usage: cd &lt;directory&gt;"
        return

    if args[0] == "..":
        if len(current_dir) == 0:
            print "Cannot go above root"
        else:
            current_dir.pop()
    elif args[0] not in current_dictionary():
        print "Directory " + args[0] + " not found"
    else:
        current_dir.append(args[0])


def mkdir(args):
    if len(args) != 1:
        print "Usage: mkdir &lt;directory&gt;"
        return
    # create an empty directory there and sync back to shelve dictionary!
    d = current_dictionary()[args[0]] = {}
    fs.sync()

COMMANDS = {'ls' : ls, 'cd': cd, 'mkdir': mkdir}

install(fs)

while True:
    raw = raw_input('&gt; ')
    cmd = raw.split()[0]
    if cmd in COMMANDS:
        COMMANDS[cmd](raw.split()[1:])

#Use break instead of exit, so you will get to this point.
raw_input('Press the Enter key to shutdown...')
</snippet></ROW><ROW><id>8814180</id><snippet>What do you want your username to be? David
&gt; ls
Contents of directory /:
System
Users
&gt; cd Users
&gt; ls
Contents of directory /Users:
David
&gt; cd David
&gt; ls
Contents of directory /Users/David:
&gt; cd ..
&gt; ls
Contents of directory /Users:
David
&gt; cd ..
&gt; mkdir Other
&gt; ls
Contents of directory /:
System
Users
Other
&gt; cd Other
&gt; ls
Contents of directory /Other:
&gt; mkdir WithinOther
&gt; ls
Contents of directory /Other:
WithinOther
</snippet></ROW><ROW><id>8814180</id><snippet>mkdir</snippet></ROW><ROW><id>8814180</id><snippet>ls</snippet></ROW><ROW><id>8814180</id><snippet>ls Users</snippet></ROW><ROW><id>8814251</id><snippet>Objectives.get()</snippet></ROW><ROW><id>8814251</id><snippet>None</snippet></ROW><ROW><id>8814251</id><snippet>NewBaseHandler.dispatch()</snippet></ROW><ROW><id>8814251</id><snippet>dispatch</snippet></ROW><ROW><id>8814251</id><snippet>get</snippet></ROW><ROW><id>8814345</id><snippet>query = 'INSERT INTO packages VALUES(%s)' % ','.join(['?'] * len(Tags))
cursor.execute(query, Tags)
</snippet></ROW><ROW><id>8814409</id><snippet>from c import MyGlobals

def func2():
    print MyGlobals.x
    MyGlobals.x = 2
</snippet></ROW><ROW><id>8814409</id><snippet>import a
from c import MyGlobals

def func1():
    MyGlobals.x = 1   


if __name__ == "__main__":
    print MyGlobals.x
    func1()
    print MyGlobals.x
    a.func2()
    print MyGlobals.x
</snippet></ROW><ROW><id>8814409</id><snippet>class MyGlobals(object):
    x = 0
</snippet></ROW><ROW><id>8814409</id><snippet>$ python b.py 
0
1
1
2
</snippet></ROW><ROW><id>8814595</id><snippet>import urllib2
import re

print("Calibre is Updating")
url = urllib2.urlopen ( "http://sourceforge.net/projects/calibre/files" ).read()

result = re.search('title="/[0-9.]*/([a-zA-Z\-]*-[0-9\.]*)', url).groups()[0][:-1]
print(result)
</snippet></ROW><ROW><id>8814672</id><snippet>p = 10000
n = 12
r = 8
t = int(input("Enter the number of months the money will be compounded: "))

a = p * (1 + (r / n)) ** (n * t)

print(a)
</snippet></ROW><ROW><id>8814672</id><snippet>t</snippet></ROW><ROW><id>8814672</id><snippet>n = 12</snippet></ROW><ROW><id>8814672</id><snippet>__future__</snippet></ROW><ROW><id>8814672</id><snippet>raw_input</snippet></ROW><ROW><id>8814780</id><snippet>mysql_config</snippet></ROW><ROW><id>8814780</id><snippet>export PATH="path-to-the-dir-with-mysql-config:$PATH"</snippet></ROW><ROW><id>8814861</id><snippet>zipfile.ZipFile</snippet></ROW><ROW><id>8814861</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>8814861</id><snippet>read</snippet></ROW><ROW><id>8814861</id><snippet>#download file
download = "http://status.calibre-ebook.com/dist/portable/" + result
request = urllib2.urlopen( download )

#save
output = open("install.zip", "w")
output.write(request.read())
output.close()
</snippet></ROW><ROW><id>8814915</id><snippet>UserProfileForm</snippet></ROW><ROW><id>8814915</id><snippet>save()</snippet></ROW><ROW><id>8814915</id><snippet>cleaned_data</snippet></ROW><ROW><id>8814915</id><snippet>ModelForm</snippet></ROW><ROW><id>8814915</id><snippet>   if form.is_valid():
            form.save()
</snippet></ROW><ROW><id>8815091</id><snippet>#!/usr/bin/env python

def check(f, *args, **kwargs):
    def inner(*args, **kwargs):
        print 'checking...'
        return f(*args, **kwargs)
    return inner

class Example(object):

    @check
    def hello(self):
        print 'inside hello'

    @check
    def hi(self):
        print 'inside hi'

if __name__ == '__main__':
    example = Example()
    example.hello()
    example.hi()
</snippet></ROW><ROW><id>8815091</id><snippet>checking...
inside hello
checking...
inside hi
</snippet></ROW><ROW><id>8815091</id><snippet>functools.wrap</snippet></ROW><ROW><id>8815414</id><snippet>unittests</snippet></ROW><ROW><id>8815414</id><snippet>unittests</snippet></ROW><ROW><id>8815414</id><snippet>def basic_tests(self, cacheclass, outer=10, inner=100, hit_rate=None):
    c = cacheclass(lambda x: x + 1)
    for n in xrange(outer):
        for i in xrange(inner):
            self.assertEqual(c(i), i + 1)
    if hit_rate != None:
        self.assertEqual(c.hit_rate(), hit_rate)

def test_single_cache(self):
    self.basic_tests(SingleCache, outer=10, inner=100, hit_rate=0)
    sc = SingleCache(lambda x: x + 1)
    for input in [0, 1, 2, 2, 2, 2, 1, 1, 0, 0]:
        self.assertEqual(sc(input), input + 1)
    self.assertEqual(sc.hit_rate(), .5)
</snippet></ROW><ROW><id>8815414</id><snippet>django.test.client</snippet></ROW><ROW><id>8815781</id><snippet>import math
from random import gauss

my_mean = 0
my_variance = 10

random_numbers = [gauss(my_mean, math.sqrt(my_variance)) for i in range(100)]
</snippet></ROW><ROW><id>8815876</id><snippet>pip install braintree</snippet></ROW><ROW><id>8816144</id><snippet>f = open('newfile',"wb")
f.seek(1073741824-1)
f.write("\0")
f.close()
import os
os.stat("newfile").st_size

1073741824
</snippet></ROW><ROW><id>8816179</id><snippet>getattr</snippet></ROW><ROW><id>8816179</id><snippet>t_query = session.query(func.strftime('%Y-%m-%d', getattr(MyBaseClass, "period")),
                        func.sum(getattr(MyBaseClass, "foo")),
                        func.sum(getattr(MyBaseClass, "other_name") * getattr(MyBaseClass, "value_one"))
                        )
</snippet></ROW><ROW><id>8816205</id><snippet>{% load billing_tags %}</snippet></ROW><ROW><id>8816205</id><snippet>pay_pay.html</snippet></ROW><ROW><id>8816338</id><snippet>{0,1}</snippet></ROW><ROW><id>8816338</id><snippet>?</snippet></ROW><ROW><id>8816338</id><snippet>r'(\d+\.?)+$'
</snippet></ROW><ROW><id>8816338</id><snippet>.</snippet></ROW><ROW><id>8816338</id><snippet>r'\d+(\.\d+)*$'
</snippet></ROW><ROW><id>8816338</id><snippet>re.findall()</snippet></ROW><ROW><id>8816338</id><snippet>&gt;&gt;&gt; ver = "1.2.3.4"
&gt;&gt;&gt; re.findall(r'\d+', ver)
['1', '2', '3', '4']
</snippet></ROW><ROW><id>8816768</id><snippet>x and y</snippet></ROW><ROW><id>8817051</id><snippet>for key in [key4, key5, key6, key7]:
    if mydict[key] == valueB:
        pass # do stuff here
</snippet></ROW><ROW><id>8817291</id><snippet>class HandlerBase(webapp.RequestHandler):

    def get_context(self):
        return {}

    def get(self):
        tUser = users.get_current_user()
        tContext = {
            'user':      tUser,
            'login':     users.create_login_url(self.request.uri),
            'logout':    users.create_logout_url(self.request.uri),
        }
        # tContext holds the defaults for your context

        #User is logged in
        if (tUser):
            # if the dict returned by self.get_context() contains a key
            # that's already in tContext, tContext[key] will be overridden
            # with self.get_context()[key]
            tContext.update(self.get_context())
        else: 
            self.redirect("/")

        tmpl = os.path.join(os.path.dirname(__file__), 'logged-in.html')
        self.response.out.write(render(tmpl, tContext))


class MainHandler(HandlerBase):

    def get_context(self):
        # the contents of the following dict will be added to
        # the context in HandlerBase
        return {'greeting': 'Hi!'}
</snippet></ROW><ROW><id>8817575</id><snippet>from lxml import etree as ET

xmlString = """
    &lt;some_root_name&gt;
        &lt;tag_x&gt;bubbles&lt;/tag_x&gt;
        &lt;tag_y&gt;car&lt;/tag_y&gt;
        &lt;tag...&gt;42&lt;/tag...&gt;
    &lt;/some_root_name&gt; """

document = ET.fromstring(xmlString)
for elementtag in document.getiterator():
   print "elementtag name:", elementtag.tag
</snippet></ROW><ROW><id>8817575</id><snippet>document = ET.parse("myxmlfile.xml")
</snippet></ROW><ROW><id>8818161</id><snippet>for</snippet></ROW><ROW><id>8818161</id><snippet>dict((vert, i) for (i, cl) in enumerate(clusters) for vert in cl.vertices)
</snippet></ROW><ROW><id>8818219</id><snippet>@expr
def foo(args):
    pass
</snippet></ROW><ROW><id>8818219</id><snippet>def foo(args):
    pass
foo = expr(foo)
</snippet></ROW><ROW><id>8818219</id><snippet>expr</snippet></ROW><ROW><id>8818219</id><snippet>mimerender(…)</snippet></ROW><ROW><id>8818219</id><snippet>def GET(self, name):
    if not name: 
        name = 'world'
    return {'message': 'Hello, ' + name + '!'}
GET = mimerender(…)(GET)
</snippet></ROW><ROW><id>8818362</id><snippet>def execute(func=None, *args, **kwargs):
    if func:
        func(*args, **kwargs)
</snippet></ROW><ROW><id>8818593</id><snippet>(
    myOjbect
    .doStuf()
    .doMoreStuf()
    .goRed()
    .goBlue()
    .die()
)
</snippet></ROW><ROW><id>8818593</id><snippet>die()</snippet></ROW><ROW><id>8818593</id><snippet>die()</snippet></ROW><ROW><id>8818593</id><snippet>myObject.doStuf()
myObject.doMoreStuf()
myObject.goRed()
myObject.goBlue()
myObject.die()
</snippet></ROW><ROW><id>8818593</id><snippet>my_stuff = []
my_stuff.append('laptop')  # my_stuff == ['laptop']
my_stuff.append('jacket')  # my_stuff == ['laptop', 'jacket']
my_stuff.append('apple')  # my_stuff == ['laptop', 'jacket', 'apple']
</snippet></ROW><ROW><id>8818593</id><snippet>list.append()</snippet></ROW><ROW><id>8818593</id><snippet>myObject = myObject.doStuf()
myObject = myObject.doMoreStuf()
myObject = myObject.goRed()
myObject = myObject.goBlue()
myObject.die()
</snippet></ROW><ROW><id>8818593</id><snippet>name = '-Tadek-'
name = name.strip('-')  # name == 'Tadek'
name = name.lower()  # name == 'tadek'
name = name.replace('k', 'ck')  # name == 'tadeck'
</snippet></ROW><ROW><id>8818628</id><snippet>from nltk import FreqDist
from nltk.classify.naivebayes import NaiveBayesClassifier

def make_training_data(rdr):
    for c in rdr.categories():
        for f in rdr.fileids(c):
            yield FreqDist(rdr.words(fileids=[f])), c

clf = NaiveBayesClassifier.train(list(make_training_data(reader)))
</snippet></ROW><ROW><id>8818628</id><snippet>clf</snippet></ROW><ROW><id>8818628</id><snippet>classify</snippet></ROW><ROW><id>8818628</id><snippet>FreqDist</snippet></ROW><ROW><id>8818628</id><snippet>cap_pattern</snippet></ROW><ROW><id>8818973</id><snippet>{% with %}</snippet></ROW><ROW><id>8818973</id><snippet>{% with %}
    {% set loop_revindex = loop.revindex %}
    {% include ... %}
{% endwith %}
</snippet></ROW><ROW><id>8818973</id><snippet>loop.revindex</snippet></ROW><ROW><id>8818973</id><snippet>loop_revindex</snippet></ROW><ROW><id>8819389</id><snippet>itertools.takewhile()</snippet></ROW><ROW><id>8819389</id><snippet>from itertools import takewhile
for s in takewhile(lambda x: x.count(" ") &lt; 3, abc):
    print s
</snippet></ROW><ROW><id>8819389</id><snippet>for abc in list_of_lists:
    for s in takewhile(lambda x: x.count(" ") &lt; 3, abc):
        print s
</snippet></ROW><ROW><id>8819633</id><snippet>self.val = self.val.lower()
</snippet></ROW><ROW><id>8819633</id><snippet>class test:
    def __init__(self, val):
        self.val = val.lower()
</snippet></ROW><ROW><id>8819633</id><snippet>lower()</snippet></ROW><ROW><id>8819661</id><snippet>python somescript.py</snippet></ROW><ROW><id>8819723</id><snippet>getattr(self, attr)
</snippet></ROW><ROW><id>8820162</id><snippet>qs = Model.objects.filter(...) # qs with objects to exclude
result = Model.objects.exclude(pk__in=qs.values_list('pk', flat=True))
</snippet></ROW><ROW><id>8820416</id><snippet>__version__</snippet></ROW><ROW><id>8820416</id><snippet>__cached__</snippet></ROW><ROW><id>8820416</id><snippet>__doc__</snippet></ROW><ROW><id>8820416</id><snippet>__file__</snippet></ROW><ROW><id>8820416</id><snippet>__name__</snippet></ROW><ROW><id>8820416</id><snippet>__package__</snippet></ROW><ROW><id>8820416</id><snippet>distutils</snippet></ROW><ROW><id>8820416</id><snippet>__version__</snippet></ROW><ROW><id>8820416</id><snippet>ast</snippet></ROW><ROW><id>8820416</id><snippet>lib2to3</snippet></ROW><ROW><id>8820636</id><snippet>t = 42
t.__doc__ = "something"
</snippet></ROW><ROW><id>8820636</id><snippet>t</snippet></ROW><ROW><id>8820636</id><snippet>t</snippet></ROW><ROW><id>8820636</id><snippet>42</snippet></ROW><ROW><id>8820636</id><snippet>print(42 .__doc__) # would print "something" if the above worked!
</snippet></ROW><ROW><id>8820743</id><snippet>KMID</snippet></ROW><ROW><id>8820743</id><snippet>:</snippet></ROW><ROW><id>8820743</id><snippet>midscatterkernel=np.fromfunction(lambda x, y: KMID(x,y,0.1,0.2,0.3), shape)
</snippet></ROW><ROW><id>8820884</id><snippet># in view, passed to template
datasets = Dateset.objects.all()
# template
{% for d in datasets %}
    {% for s in d.subcat_set.all %}
        &lt;option value="{{ s.id }}"&gt;{{ s.name }}&lt;/option&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>8820923</id><snippet>cat</snippet></ROW><ROW><id>8820923</id><snippet>shell=True</snippet></ROW><ROW><id>8820923</id><snippet>textfile</snippet></ROW><ROW><id>8820923</id><snippet>stdin</snippet></ROW><ROW><id>8820923</id><snippet>subprocess.Popen(args,
                 stdin=open("textfile"),
                 stdout=subprocess.PIPE,
                 stderr=subprocess.PIPE,
                 env={'LANG':'de_DE@euro'})
</snippet></ROW><ROW><id>8820969</id><snippet>fp = open("file")
for i, line in enumerate(fp):
  if line == x
    do something
fp.close()
</snippet></ROW><ROW><id>8821064</id><snippet>import numpy as np

alpha = np.array([1e5, 1e3, 1e5, 1e7, 1e3])
dz = 0.001
zeta = alpha / dz**2
</snippet></ROW><ROW><id>8821203</id><snippet>def f(my_list):
    return dict((x, "like") for x in my_list)
</snippet></ROW><ROW><id>8821203</id><snippet>&gt;&gt;&gt; f([1, 2, 3])
{1: 'like', 2: 'like', 3: 'like'}
</snippet></ROW><ROW><id>8821203</id><snippet>def f(my_list):
    return {x: "like" for x in my_list}
</snippet></ROW><ROW><id>8821203</id><snippet>def f([a, b, c])</snippet></ROW><ROW><id>8821203</id><snippet>d</snippet></ROW><ROW><id>8821203</id><snippet>d = {}
</snippet></ROW><ROW><id>8821339</id><snippet>if int(r)%2==0 and r!=2 and r!=0 and c!=0:
</snippet></ROW><ROW><id>8821339</id><snippet>r</snippet></ROW><ROW><id>8821339</id><snippet>r</snippet></ROW><ROW><id>8821339</id><snippet>!=2</snippet></ROW><ROW><id>8821339</id><snippet>"2" != 2</snippet></ROW><ROW><id>8821339</id><snippet>TypeError</snippet></ROW><ROW><id>8821339</id><snippet>if r%2==0</snippet></ROW><ROW><id>8821339</id><snippet>int</snippet></ROW><ROW><id>8821393</id><snippet>from cStringIO import StringIO
file_jpgdata = StringIO(jpgdata)
dt = Image.open(file_jpgdata)
</snippet></ROW><ROW><id>8821393</id><snippet>self.rfile</snippet></ROW><ROW><id>8821914</id><snippet>add_handler</snippet></ROW><ROW><id>8821914</id><snippet>add_callback</snippet></ROW><ROW><id>8821914</id><snippet>import tornado.httpserver
import tornado.ioloop
import tornado.web

class TextHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        self.generator = self.generate_text(1000)
        tornado.ioloop.IOLoop.instance().add_callback(self.loop)

    def loop(self):
        try:
            text = self.generator.next()
            self.write(text)
            tornado.ioloop.IOLoop.instance().add_callback(self.loop)
        except StopIteration:
            self.finish()

    def generate_text(self, n):
        for x in xrange(n):
            if not x % 15:
                yield "FizzBuzz\n"
            elif not x % 5:
                yield "Buzz\n"
            elif not x % 3:
                yield "Fizz\n"
            else:
                yield "%s\n" % x

application = tornado.web.Application([
    (r"/text/", TextHandler),
])

http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(8888)
tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>8821957</id><snippet>/me/feed</snippet></ROW><ROW><id>8822187</id><snippet>print</snippet></ROW><ROW><id>8822187</id><snippet>print raw_input('?')
</snippet></ROW><ROW><id>8822187</id><snippet>'\n'</snippet></ROW><ROW><id>8822187</id><snippet>raw_input</snippet></ROW><ROW><id>8822187</id><snippet>raw_input</snippet></ROW><ROW><id>8822187</id><snippet>print repr(raw_input('?'))  # You'll get 'f', not 'f\n'
</snippet></ROW><ROW><id>8822278</id><snippet>$ hachoir-metadata pacte_des_gnous.avi
Common:
- Duration: 4 min 25 sec
- Comment: Has audio/video index (248.9 KB)
- MIME type: video/x-msvideo
- Endian: Little endian
Video stream:
- Image width: 600
- Image height: 480
- Bits/pixel: 24
- Compression: DivX v4 (fourcc:"divx")
- Frame rate: 30.0
Audio stream:
- Channel: stereo
- Sample rate: 22.1 KHz
- Compression: MPEG Layer 3
</snippet></ROW><ROW><id>8822377</id><snippet>.py</snippet></ROW><ROW><id>8822377</id><snippet>.pyc</snippet></ROW><ROW><id>8822377</id><snippet>*.pyc</snippet></ROW><ROW><id>8822377</id><snippet>.pyo</snippet></ROW><ROW><id>8822377</id><snippet>*.pyc</snippet></ROW><ROW><id>8822377</id><snippet>-O</snippet></ROW><ROW><id>8822377</id><snippet>.pyd</snippet></ROW><ROW><id>8822377</id><snippet>.pyc</snippet></ROW><ROW><id>8822377</id><snippet>.pyo</snippet></ROW><ROW><id>8822554</id><snippet>hist</snippet></ROW><ROW><id>8822554</id><snippet>import numpy as np
import pylab as p

data=np.array(np.random.rand(1000))
y,binEdges=np.histogram(data,bins=100)
bincenters = 0.5*(binEdges[1:]+binEdges[:-1])
p.plot(bincenters,y,'-')
p.show()
</snippet></ROW><ROW><id>8822562</id><snippet>{{video.file_minus_extension}}</snippet></ROW><ROW><id>8822562</id><snippet>def file_minus_extension(self): 
    basename, extension = os.path.splitext(self.file.url) 
    return basename
</snippet></ROW><ROW><id>8822562</id><snippet>def filename_minus_extension(self): 
    basename, extension = os.path.splitext(os.path.basename(self.file.name)) 
    return basename
</snippet></ROW><ROW><id>8822603</id><snippet>a[0] is a[1]</snippet></ROW><ROW><id>8822603</id><snippet>a[0][0] is a[0][1]</snippet></ROW><ROW><id>8822603</id><snippet>a[0]</snippet></ROW><ROW><id>8822603</id><snippet>a[1]</snippet></ROW><ROW><id>8822603</id><snippet>a[0][0]</snippet></ROW><ROW><id>8822603</id><snippet>a[0][1]</snippet></ROW><ROW><id>8822603</id><snippet>a[0][0]</snippet></ROW><ROW><id>8822603</id><snippet>a[0][1]</snippet></ROW><ROW><id>8822722</id><snippet>thread</snippet></ROW><ROW><id>8822722</id><snippet>timer</snippet></ROW><ROW><id>8822722</id><snippet>QTimer.singleShot</snippet></ROW><ROW><id>8822722</id><snippet>QTimer.singleShot(1, your_time_consuming_function)
</snippet></ROW><ROW><id>8822722</id><snippet>QCoreApplication.processEvents()</snippet></ROW><ROW><id>8822770</id><snippet>*</snippet></ROW><ROW><id>8822770</id><snippet>+</snippet></ROW><ROW><id>8822770</id><snippet>In [1]: a = [[1]]

In [2]: b = a + a

In [3]: b
Out[3]: [[1], [1]]

In [4]: b[0][0] = 10

In [5]: b
Out[5]: [[10], [10]]
</snippet></ROW><ROW><id>8822770</id><snippet>*</snippet></ROW><ROW><id>8822770</id><snippet>rows</snippet></ROW><ROW><id>8822770</id><snippet>In [6]: rows = [['']*5]*5

In [7]: for row in rows:
   ...:     print id(row)
   ...:     
   ...:     
15975992
15975992
15975992
15975992
15975992
</snippet></ROW><ROW><id>8822770</id><snippet>rows = [['']*5 for i in range(5)]
</snippet></ROW><ROW><id>8822779</id><snippet>to</snippet></ROW><ROW><id>8822779</id><snippet>drag</snippet></ROW><ROW><id>8822779</id><snippet>class drag:
    def __init__(self, source):
        self.source = source
    def to(self, target):
        print 'Dragging ' + self.source + ' to ' + target
</snippet></ROW><ROW><id>8822779</id><snippet>Container</snippet></ROW><ROW><id>8822779</id><snippet>drag</snippet></ROW><ROW><id>8822779</id><snippet>class Container:
    def __init__(self, source):
        self.source = source
    def to(self, target):
        print 'Dragging ' + self.source + ' to ' + target

def drag(source):
    return Container(source)
</snippet></ROW><ROW><id>8823019</id><snippet>Connection</snippet></ROW><ROW><id>8823019</id><snippet>class Connection(object):
    def __init__(self, sock):
        self.socket = sock

    def fileno(self):
        return self.socket.fileno()
</snippet></ROW><ROW><id>8823085</id><snippet>rev_aliases = {}
for name, nick_list in aliases.iteritems():
    for nick in nick_list:
        rev_aliases[nick] = name
</snippet></ROW><ROW><id>8823085</id><snippet>rev_aliases = {nick: name 
               for name, nick_list in aliases.viewitems()
               for nick in nick_list}
</snippet></ROW><ROW><id>8823085</id><snippet>rev_aliases = dict((nick, name)
                   for name, nick_list in aliases.iteritems()
                   for nick in nick_list)
</snippet></ROW><ROW><id>8823159</id><snippet>result = "\n".join(map(str, potions))
</snippet></ROW><ROW><id>8823195</id><snippet>result</snippet></ROW><ROW><id>8823470</id><snippet>fcntl.lockf</snippet></ROW><ROW><id>8823470</id><snippet>fcntl.flock</snippet></ROW><ROW><id>8823751</id><snippet>    """
Demonstration of using Python for a RESTful call to JIRA

Matt Doar
CustomWare
"""

import urllib
import urllib2
import cookielib

jira_serverurl = "http://jira.example.com:8080"
creds = { "username" : "admin", "password" : "admin" }
authurl = jira_serverurl + "/rest/auth/latest/session"

# Get the authentication cookie using the REST API
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
req = urllib2.Request(authurl)
req.add_data('{ "username" : "admin", "password" : "admin" }')
req.add_header("Content-type", "application/json")
req.add_header("Accept", "application/json")
fp = opener.open(req)
fp.close()

add_component_url = jira_serverurl + "/secure/project/AddComponent.jspa?pid=10020&amp;name=ABC4"
print "Using %s" % (add_component_url)

# Have to add data to make urllib2 send a POST
values = {}
data = urllib.urlencode(values)

# Have to tell JIRA to not use a form token
headers = {'X-Atlassian-Token': 'no-check'}

request = urllib2.Request(add_component_url, data, headers=headers)
fp = opener.open(request)

print fp.read()
</snippet></ROW><ROW><id>8824146</id><snippet>ModelForm</snippet></ROW><ROW><id>8824146</id><snippet>from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseNotAllowed
from django.utils import simplejson

def upload_view(request):
    if request.method == 'POST':
        form = UploadForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            result = {'success': True}
            return HttpResponse(simplejson.dumps(result), mimetype='application/json')
        else:
            return HttpResponseBadRequest()
    else:
       return HttpResponseNotAllowed(['POST'])
</snippet></ROW><ROW><id>8824181</id><snippet>import foo_dev as foo</snippet></ROW><ROW><id>8824181</id><snippet>import foo</snippet></ROW><ROW><id>8824219</id><snippet>import xlrd
book = xlrd.open_workbook("univ_list.xls")
</snippet></ROW><ROW><id>8824407</id><snippet>itertools.count()</snippet></ROW><ROW><id>8824407</id><snippet>&gt;&gt;&gt; c = itertools.count()
&gt;&gt;&gt; next(c)
0
&gt;&gt;&gt; next(c)
1
&gt;&gt;&gt; next(c)
2
</snippet></ROW><ROW><id>8824811</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.mapper = QtCore.QSignalMapper(self)
        self.toolbar = self.addToolBar('Foo')
        self.toolbar.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        for text in 'One Two Three'.split():
            action = QtGui.QAction(text, self)
            self.mapper.setMapping(action, text)
            action.triggered.connect(self.mapper.map)
            self.toolbar.addAction(action)
        self.mapper.mapped['QString'].connect(self.handleButton)
        self.edit = QtGui.QLineEdit(self)
        self.setCentralWidget(self.edit)

    def handleButton(self, identifier):
        if identifier == 'One':
            text = 'Do This'
        elif identifier == 'Two':
            text = 'Do That'
        elif identifier == 'Three':
            text = 'Do Other'
        self.edit.setText(text)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(300, 60)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8825282</id><snippet>[1:]</snippet></ROW><ROW><id>8825282</id><snippet>[:4]</snippet></ROW><ROW><id>8825360</id><snippet>while run:</snippet></ROW><ROW><id>8825360</id><snippet>out_queue.get()</snippet></ROW><ROW><id>8825360</id><snippet>class DatamineThread(threading.Thread):
    def run(self):
        while True:
            data = self.out_queue.get()
            if data == "time to quit": break
            # non-sentinel processing here.
</snippet></ROW><ROW><id>8825360</id><snippet>class DatamineThread(threading.Thread):
    def run(self):
        while True:
            try:
                data = self.out_queue.get_nowait() # also, out_queue.get(False)
            except Queue.Empty: break
            # data processing here.
</snippet></ROW><ROW><id>8825360</id><snippet>for i in range(numWorkers):
  out_queue.put('time to quit')

out_queue.join()
</snippet></ROW><ROW><id>8825360</id><snippet>class DatamineThread(threading.Thread):
    def run(self):
        while True:
            data = self.out_queue.get()
            if data == "time to quit": 
                self.out_queue.put('time to quit')
                break
            # non-sentinel processing here.
</snippet></ROW><ROW><id>8825360</id><snippet>join()</snippet></ROW><ROW><id>8825360</id><snippet>join()</snippet></ROW><ROW><id>8825434</id><snippet>sys.stdout = os.fdopen(1, 'w', 0)    # from first part of your script
...
sys.stdout = os.fdopen(new, 'w', 0)  # from second part of your script
</snippet></ROW><ROW><id>8825434</id><snippet>os.fdopen</snippet></ROW><ROW><id>8825434</id><snippet>os.fstat</snippet></ROW><ROW><id>8825434</id><snippet>import os
whatever = os.fdopen(1, 'w', 0)
os.fstat(1)
del whatever
os.fstat(1)
</snippet></ROW><ROW><id>8825434</id><snippet>import sys
import tempfile
import os

class captured_stdout:
    def __init__(self):
        self.prevfd = None
        self.prev = None

    def __enter__(self):
        F = tempfile.NamedTemporaryFile()
        self.prevfd = os.dup(sys.stdout.fileno())
        os.dup2(F.fileno(), sys.stdout.fileno())
        self.prev = sys.stdout
        sys.stdout = os.fdopen(self.prevfd, "w")
        return F

    def __exit__(self, exc_type, exc_value, traceback):
        os.dup2(self.prevfd, self.prev.fileno())
        sys.stdout = self.prev

## 
## Example usage
##

## here is a hack to print directly to stdout
import ctypes
libc=ctypes.LibraryLoader(ctypes.CDLL).LoadLibrary("libc.so.6")
def directfdprint(s):
    libc.write(1, s, len(s))


print("I'm printing from python before capture")
directfdprint("I'm printing from libc before captrue\n")

with captured_stdout() as E:
    print("I'm printing from python in capture")
    directfdprint("I'm printing from libc in capture\n")

print("I'm printing from python after capture")
directfdprint("I'm printing from libc after captrue\n")

print("Capture contains: " + repr(file(E.name).read()))
</snippet></ROW><ROW><id>8825715</id><snippet>int</snippet></ROW><ROW><id>8825715</id><snippet>&gt;&gt;&gt; int(63.0)
63
&gt;&gt;&gt; int(sheet.row(1)[0].value)
63
</snippet></ROW><ROW><id>8825799</id><snippet>import datetime, pymongo
created_at = 'Mon Jun 8 10:51:32 +0000 2009' # Get this string from the Twitter API
dt = datetime.strptime(created_at, '%a %b %d %H:%M:%S +0000 %Y')
</snippet></ROW><ROW><id>8825799</id><snippet>connection = pymongo.Connection('mymongohostname.com')
connection.my_database.my_collection.insert({
    'created_at': dt,
    # ... other info about the tweet ....
}, safe=True)
</snippet></ROW><ROW><id>8825799</id><snippet>three_days_ago = datetime.datetime.utcnow() - datetime.timedelta(days=3)
tweets = list(connection.my_database.my_collection.find({
    'created_at': { '$gte': three_days_ago }
}).sort([('created_at', pymongo.DESCENDING)]))
</snippet></ROW><ROW><id>8825844</id><snippet>#egg=[egg-name]</snippet></ROW><ROW><id>8825844</id><snippet>git+git://github.com/yuchant/django-jinja2.git#egg=django-jinja2
hg+https://bitbucket.org/yuchant/django-storages#egg=django-storages
</snippet></ROW><ROW><id>8825844</id><snippet>#egg=[egg-name]</snippet></ROW><ROW><id>8825844</id><snippet>git+git://github.com/yuchant/django-jinja2.git</snippet></ROW><ROW><id>8825846</id><snippet>file.split('\n')</snippet></ROW><ROW><id>8825846</id><snippet>[0]</snippet></ROW><ROW><id>8825846</id><snippet>[1:]</snippet></ROW><ROW><id>8826060</id><snippet>glTexEnv</snippet></ROW><ROW><id>8826060</id><snippet>import pyglet
from pyglet.gl import *

window = pyglet.window.Window()
image = pyglet.resource.image('pic.jpg')
mask = pyglet.resource.image('mask.jpg')
createdtex=False;
imagetex = 0


@window.event
def on_draw():
    window.clear()
    global createdtex
    texfrmbuf =(GLuint*1)()
    global imagetex
    if createdtex!=True:
        imagetex = image.get_texture()
        glEnable(GL_BLEND)
        glBlendFunc(GL_ZERO, GL_SRC_COLOR)
        glGenFramebuffersEXT(1,texfrmbuf)
        glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT,texfrmbuf[0])
        glFramebufferTexture2DEXT(GL_DRAW_FRAMEBUFFER_EXT,GL_COLOR_ATTACHMENT0_EXT, imagetex.target,imagetex.id,0)
        mask.blit(0,0)
        glFlush()
        glDisable(GL_BLEND)
        glDeleteFramebuffersEXT(1,texfrmbuf)
        glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT,0)
        createdtex=True

    imagetex.blit(0,0)

pyglet.app.run()
</snippet></ROW><ROW><id>8826072</id><snippet>CONFIG = "some string"
ANOTHER = [ "some", "list" ]
MORE = "another value"
</snippet></ROW><ROW><id>8826072</id><snippet>settings = {}
execfile('the_config.py', settings )
settings['CONFIG'] == "some string"
</snippet></ROW><ROW><id>8826179</id><snippet>{% autoescape off %}
&lt;div id="right_suggest_div" name={{ suggestion.key }}&gt;   
   {{ suggestion.text }}  
   &lt;p class="padding"&gt;Votes: {{ suggestion.votes }} &lt;/p&gt;
 &lt;/div&gt;

{% endautoescape %} 
</snippet></ROW><ROW><id>8826179</id><snippet>safe</snippet></ROW><ROW><id>8826179</id><snippet>{{ suggestion.text|safe }}</snippet></ROW><ROW><id>8826383</id><snippet>1) POST takes 2 arguments (like GET), self and the resource (method_id is fine)
2) When you're making a POST request you're setting "Content-Type" and not "Accept"
3) Your JSON isn't in quotes as a string
</snippet></ROW><ROW><id>8826383</id><snippet>curl -i -H "Content-Type: application/json" -X POST -d '{"value":"30","type":"Tip 3","targetModule":"Target 3","active":true}' http://127.0.0.1:8080
</snippet></ROW><ROW><id>8826383</id><snippet>def POST(self,method_id):
    try:
        i = web.input()
        data = web.data() # you can get data use this method
        return
    except Error(e):
        print e
</snippet></ROW><ROW><id>8826602</id><snippet>b += [a] if a is not None else []
</snippet></ROW><ROW><id>8826602</id><snippet>(b.append(a) if a is not None else None)
</snippet></ROW><ROW><id>8826602</id><snippet>b.append(a)</snippet></ROW><ROW><id>8826602</id><snippet>b += filter(None, [func()])
</snippet></ROW><ROW><id>8826602</id><snippet>filter(None, &lt;list&gt;)</snippet></ROW><ROW><id>8826602</id><snippet>b += &lt;list&gt;</snippet></ROW><ROW><id>8826602</id><snippet>None</snippet></ROW><ROW><id>8826602</id><snippet>(lambda l, a: l.append(a) if a is not None else None)(b, func())
</snippet></ROW><ROW><id>8826729</id><snippet>$ virtualenv foo
$ cd foo
$ . bin/activate
(foo)$ pip install thrift
</snippet></ROW><ROW><id>8826783</id><snippet>TeamMember</snippet></ROW><ROW><id>8826783</id><snippet>user</snippet></ROW><ROW><id>8826783</id><snippet>user</snippet></ROW><ROW><id>8826783</id><snippet>user.objects.filter( 
                teammember__team__teammember__user__icontains=query
          ).exclude(user=request.user).distinct()
</snippet></ROW><ROW><id>8826783</id><snippet>users</snippet></ROW><ROW><id>8826783</id><snippet>teammember</snippet></ROW><ROW><id>8826783</id><snippet>team</snippet></ROW><ROW><id>8826783</id><snippet>teammember</snippet></ROW><ROW><id>8826783</id><snippet>user</snippet></ROW><ROW><id>8826783</id><snippet>query</snippet></ROW><ROW><id>8827120</id><snippet>def configure():
  build()

def wrap(f):
  import new
  def build():
    print 'build'

  new.function(f.func_code, locals(), f.func_name, f.func_defaults, f.func_closure)()

wrap(configure)
</snippet></ROW><ROW><id>8827407</id><snippet>&gt;&gt;&gt; c=[ (0.5, 0.6, 0.7), (0.1, 0.9, 0.8), (0.9, 1.0, 0.4),(0.5, 0.6, 0.7), (0.1, 0.9, 0.8), (0.9, 1.0, 0.4),(0.5, 0.6, 0.7), (0.1, 0.9, 0.8), (0.9, 1.0, 0.4)]
&gt;&gt;&gt; [ sum([t[i] for t in c]) for i in range(len(c[0]))]
[4.5, 7.5, 5.6999999999999993]
</snippet></ROW><ROW><id>8827446</id><snippet>import module
othername = module
del module
</snippet></ROW><ROW><id>8827446</id><snippet>sys.modules</snippet></ROW><ROW><id>8827446</id><snippet>guessedname.run()</snippet></ROW><ROW><id>8827446</id><snippet>__import__("sys").modules["&lt;module_name&gt;"].run()
</snippet></ROW><ROW><id>8827446</id><snippet>from module import *</snippet></ROW><ROW><id>8827504</id><snippet>theString = text.read()
</snippet></ROW><ROW><id>8827504</id><snippet>theString</snippet></ROW><ROW><id>8827512</id><snippet>str.decode</snippet></ROW><ROW><id>8827512</id><snippet>str.encode</snippet></ROW><ROW><id>8827512</id><snippet>with open(ff_name, 'rb') as source_file:
  with open(target_file_name, 'w+b') as dest_file:
    contents = source_file.read()
    dest_file.write(contents.decode('utf-16').encode('utf-8'))
</snippet></ROW><ROW><id>8827512</id><snippet>str.decode</snippet></ROW><ROW><id>8827723</id><snippet>from itertools import izip
value = sum((x * y) for x, y in izip(weights, items))
</snippet></ROW><ROW><id>8827723</id><snippet>izip</snippet></ROW><ROW><id>8827723</id><snippet>zip</snippet></ROW><ROW><id>8827930</id><snippet>&gt;&gt;&gt; "{0:+.03f}".format(1.23456)
'+1.235'
</snippet></ROW><ROW><id>8828171</id><snippet>np.sqrt(((points[np.newaxis] - centroids[:,np.newaxis]) ** 2).sum(axis=2)).argmin(axis=0)
</snippet></ROW><ROW><id>8828171</id><snippet>diff = points[np.newaxis] - centroids[:,np.newaxis]
norm = np.sqrt((diff*diff).sum(axis=2))
closest = norm.argmin(axis=0)
</snippet></ROW><ROW><id>8828171</id><snippet>points[np.newaxis] - centroids[:,np.newaxis]</snippet></ROW><ROW><id>8828171</id><snippet>diffs</snippet></ROW><ROW><id>8828171</id><snippet>np.sqrt((diffs ** 2).sum(axis=2))</snippet></ROW><ROW><id>8828171</id><snippet>(k, m)</snippet></ROW><ROW><id>8828171</id><snippet>centroids[0]</snippet></ROW><ROW><id>8828171</id><snippet>.argmin(axis=0)</snippet></ROW><ROW><id>8828177</id><snippet>table.setEditTriggers(QAbstractItemView.CurrentChanged)
</snippet></ROW><ROW><id>8828177</id><snippet>table.editItem(table.item(0, 1))
</snippet></ROW><ROW><id>8828184</id><snippet>int</snippet></ROW><ROW><id>8828184</id><snippet>fib(46) = 1836311903</snippet></ROW><ROW><id>8828198</id><snippet>mat = numpy.random.rand(10,10)
f = open('myFile','a')
m,n = mat.shape
for i in range(0,m):
    for j in range(0,n):
        f.writelines(repr(round(mat[i,j],4)).rjust(7))
f.writelines('\n')

f.close()
</snippet></ROW><ROW><id>8828454</id><snippet>__getitem__</snippet></ROW><ROW><id>8828454</id><snippet>IndexError</snippet></ROW><ROW><id>8828454</id><snippet>%extend</snippet></ROW><ROW><id>8828454</id><snippet>%exception</snippet></ROW><ROW><id>8828454</id><snippet>__getitem__</snippet></ROW><ROW><id>8828454</id><snippet>%module test

%include "exception.i"

%{
#include &lt;assert.h&gt;
#include "test.h"
static int myErr = 0; // flag to save error state
%}

%exception MyStruct::__getitem__ {
  assert(!myErr);
  $action
  if (myErr) {
    myErr = 0; // clear flag for next time
    // You could also check the value in $result, but it's a PyObject here
    SWIG_exception(SWIG_IndexError, "Index out of bounds");
  }
}

%include "test.h"

%extend MyStruct {
  double __getitem__(size_t i) {
    if (i &gt;= $self-&gt;len) {
      myErr = 1;
      return 0;
    }
    return $self-&gt;clientdata[i];
  }
}
</snippet></ROW><ROW><id>8828454</id><snippet>static MyStruct *test() {
  static MyStruct inst = {0,0};
  if (!inst.clientdata) {
    inst.len = 10;
    inst.clientdata = malloc(sizeof(double)*inst.len);
    for (size_t i = 0; i &lt; inst.len; ++i) {
      inst.clientdata[i] = i;
    }
  }
  return &amp;inst;
}
</snippet></ROW><ROW><id>8828454</id><snippet>import test

for i in test.test():
  print i
</snippet></ROW><ROW><id>8828454</id><snippet>python run.py
0.0
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0
</snippet></ROW><ROW><id>8828454</id><snippet>MyStruct</snippet></ROW><ROW><id>8828454</id><snippet>PyList</snippet></ROW><ROW><id>8828454</id><snippet>%module test

%{
#include "test.h"
%}

%typemap(out) (MyStruct *) {
  PyObject *list = PyList_New($1-&gt;len);
  for (size_t i = 0; i &lt; $1-&gt;len; ++i) {
    PyList_SetItem(list, i, PyFloat_FromDouble($1-&gt;clientdata[i]));
  }

  $result = list;
}

%include "test.h"
</snippet></ROW><ROW><id>8828454</id><snippet>PyList</snippet></ROW><ROW><id>8828454</id><snippet>MyStruct *</snippet></ROW><ROW><id>8828454</id><snippet>%typemap(out)</snippet></ROW><ROW><id>8828454</id><snippet>%typemap(in)</snippet></ROW><ROW><id>8828454</id><snippet>%typemap(freearg)</snippet></ROW><ROW><id>8828454</id><snippet>%typemap(in) (MyStruct *) {
  if (!PyList_Check($input)) {
    SWIG_exception(SWIG_TypeError, "Expecting a PyList");
    return NULL;
  }
  MyStruct *tmp = malloc(sizeof(MyStruct));
  tmp-&gt;len = PyList_Size($input);
  tmp-&gt;clientdata = malloc(sizeof(double) * tmp-&gt;len);
  for (size_t i = 0; i &lt; tmp-&gt;len; ++i) {
    tmp-&gt;clientdata[i] = PyFloat_AsDouble(PyList_GetItem($input, i));
    if (PyErr_Occured()) {
      free(tmp-&gt;clientdata);
      free(tmp);
      SWIG_exception(SWIG_TypeError, "Expecting a double");
      return NULL;
    }
  }
  $1 = tmp;
}

%typemap(freearg) (MyStruct *) {
  free($1-&gt;clientdata);
  free($1);
}
</snippet></ROW><ROW><id>8828454</id><snippet>MyStruct</snippet></ROW><ROW><id>8828454</id><snippet>__iter__</snippet></ROW><ROW><id>8828454</id><snippet>__iter__()</snippet></ROW><ROW><id>8828454</id><snippet>next()</snippet></ROW><ROW><id>8828454</id><snippet>MyStructIter</snippet></ROW><ROW><id>8828454</id><snippet>%inline</snippet></ROW><ROW><id>8828454</id><snippet>%module test

%include "exception.i"

%{
#include &lt;assert.h&gt;
#include "test.h"
static int myErr = 0;
%}

%exception MyStructIter::next {
  assert(!myErr);
  $action
  if (myErr) {
    myErr = 0; // clear flag for next time
    PyErr_SetString(PyExc_StopIteration, "End of iterator");
    return NULL;
  }
}

%inline %{
  struct MyStructIter {
    double *ptr;
    size_t len;
  };
%}

%include "test.h"

%extend MyStructIter {
  struct MyStructIter *__iter__() {
    return $self;
  }

  double next() {
    if ($self-&gt;len--) {
      return *$self-&gt;ptr++;
    }
    myErr = 1;
    return 0;
  }
}

%extend MyStruct {
  struct MyStructIter __iter__() {
    struct MyStructIter ret = { $self-&gt;clientdata, $self-&gt;len };
    return ret;
  }
}
</snippet></ROW><ROW><id>8828454</id><snippet>__iter__()</snippet></ROW><ROW><id>8828454</id><snippet>next()</snippet></ROW><ROW><id>8828454</id><snippet>__iter__()</snippet></ROW><ROW><id>8828454</id><snippet>MyStructIter</snippet></ROW><ROW><id>8828454</id><snippet>MyStruct</snippet></ROW><ROW><id>8828454</id><snippet>%inline %{
  struct MyStructIter {
    MyStruct *list;
    size_t pos;
  };
%}

%include "test.h"

%extend MyStructIter {
  struct MyStructIter *__iter__() {
    return $self;
  }

  double next() {
    if ($self-&gt;pos &lt; $self-&gt;list-&gt;len) {
      return $self-&gt;list-&gt;clientdata[$self-&gt;pos++];
    }
    myErr = 1;
    return 0;
  }
}

%extend MyStruct {
  struct MyStructIter __iter__() {
    struct MyStructIter ret = { $self, 0 };
    return ret;
  }
}
</snippet></ROW><ROW><id>8828454</id><snippet>__iter__()</snippet></ROW><ROW><id>8828454</id><snippet>next()</snippet></ROW><ROW><id>8828459</id><snippet>OpenCV-2.3.x/samples/python2</snippet></ROW><ROW><id>8828459</id><snippet>mask</snippet></ROW><ROW><id>8828459</id><snippet>mask.astype('uint8')</snippet></ROW><ROW><id>8828459</id><snippet>img</snippet></ROW><ROW><id>8828459</id><snippet>CV_8U</snippet></ROW><ROW><id>8828459</id><snippet>CV_32F</snippet></ROW><ROW><id>8828459</id><snippet>img.astype('uint8')</snippet></ROW><ROW><id>8828459</id><snippet>img.astype('float32')</snippet></ROW><ROW><id>8828459</id><snippet>python2</snippet></ROW><ROW><id>8828459</id><snippet>camshift.py</snippet></ROW><ROW><id>8828459</id><snippet>color_histogram.py</snippet></ROW><ROW><id>8828459</id><snippet>ranges</snippet></ROW><ROW><id>8828459</id><snippet>cv2.calcHist( [img.astype('float32')],                 # &lt;-- convert to float32
              channels=[0], 
              mask=np.ones(img.size).astype('uint8'),  # &lt;-- convert to uint8
              histSize=[6], 
              ranges=[0,6] )                           # &lt;-- flat list
</snippet></ROW><ROW><id>8828529</id><snippet>datetime.datetime.strptime(...)</snippet></ROW><ROW><id>8828529</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('07_Nov_2011', '%d_%b_%Y').date()
datetime.date(2011, 11, 7)
</snippet></ROW><ROW><id>8828529</id><snippet>&gt;&gt;&gt; start_date = '07_Nov_2011'
&gt;&gt;&gt; end_date = '10_Jan_2012'
&gt;&gt;&gt; 
&gt;&gt;&gt; first = datetime.datetime.strptime(start_date, '%d_%b_%Y')
&gt;&gt;&gt; last = datetime.datetime.strptime(end_date, '%d_%b_%Y')
&gt;&gt;&gt; for i in xrange((last-first).days):
...     print (first+datetime.timedelta(i)).strftime('%d_%b_%Y')
... 
07_Nov_2011
08_Nov_2011
09_Nov_2011
10_Nov_2011
11_Nov_2011

etc.
</snippet></ROW><ROW><id>8828553</id><snippet>import sqlite3
con = sqlite3.connect(...)
...
with con:
    # Database is locked here
</snippet></ROW><ROW><id>8828588</id><snippet>elseif</snippet></ROW><ROW><id>8828588</id><snippet>elif</snippet></ROW><ROW><id>8828601</id><snippet>client_list</snippet></ROW><ROW><id>8828601</id><snippet>next_record = {}
for client in client_list:
    s = s_dates_dict[client.pk]
    e = e_dates_dict[client.pk]
    next_record[client.pk] = client.tasks_set.filter(date__range(s,e), task_type__in=[A,B])
</snippet></ROW><ROW><id>8828601</id><snippet>next_record</snippet></ROW><ROW><id>8828601</id><snippet>ForeignKey</snippet></ROW><ROW><id>8828601</id><snippet>Tasks</snippet></ROW><ROW><id>8828601</id><snippet>Client</snippet></ROW><ROW><id>8828833</id><snippet>terms = [create_time&lt;=DateTime('2012-01-01')]
records = DBSession.query(myrecords).filter(and_(*terms))
</snippet></ROW><ROW><id>8828855</id><snippet>RunYourOtherScript()</snippet></ROW><ROW><id>8828855</id><snippet>build</snippet></ROW><ROW><id>8828855</id><snippet>execfile('src/something.py')</snippet></ROW><ROW><id>8828855</id><snippet>from distutils.command import build as build_module

class build(build_module.build):
  def run(self):
    RunYourOtherScript()
    build_module.build.run(self)

setup(
  ...
  cmdclass = {
      'build': build,
  },
)
</snippet></ROW><ROW><id>8829261</id><snippet>myregex = re.compile('regex-pattern', re.IGNORECASE | re.MULTILINE);
myregex.sub(replacement, target[, count = 0]);
</snippet></ROW><ROW><id>8829261</id><snippet>myregex = re.compile('(title href="#_ftnref\d+"&gt;&lt;span lang="en-us"&gt;)(.{1,4}&lt;)', re.IGNORECASE | re.MULTILINE);
myregex.sub('\1xyz&lt;', content);
</snippet></ROW><ROW><id>8829602</id><snippet>cp reports/coverage.xml reports/coverage2.xml
sed 's/ name=\"api\"/ name=\"api_\"/' reports/coverage2.xml &gt; reports/coverage.xml
</snippet></ROW><ROW><id>8829602</id><snippet>api</snippet></ROW><ROW><id>8829602</id><snippet>api_</snippet></ROW><ROW><id>8829602</id><snippet>name</snippet></ROW><ROW><id>8829602</id><snippet>filename</snippet></ROW><ROW><id>8829610</id><snippet>&gt;&gt;&gt; url = 'http://httpbin.org/post'
&gt;&gt;&gt; files = {'report.xls': open('report.xls', 'rb')}
&gt;&gt;&gt; r = requests.post(url, files=files)
</snippet></ROW><ROW><id>8829754</id><snippet>poll(...)</snippet></ROW><ROW><id>8829754</id><snippet>import multiprocessing as mp

timelimit = 3

def f(pipe):
    a = 1/0
    pipe.send('hola')

parent, child = mp.Pipe()

proc = mp.Process(target=f, args=(child,))

proc.start()

print "Grabbing result"
if parent.poll(timelimit):
    print "Result: {0}".format(parent.recv())
else:
    print "No data available after {0} seconds...".format(timelimit)

proc.join()
</snippet></ROW><ROW><id>8829754</id><snippet>Grabbing result
Process Process-1:
Traceback (most recent call last):
  File "/usr/lib/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "s.py", line 6, in f
    a = 1/0
ZeroDivisionError: integer division or modulo by zero
No data available after 3 seconds...
</snippet></ROW><ROW><id>8830050</id><snippet>str.split('\n')</snippet></ROW><ROW><id>8830050</id><snippet>l = mystr.split('\n')
l[2] += ' extra text'
mystr = '\n'.join(l)
</snippet></ROW><ROW><id>8830050</id><snippet>replace</snippet></ROW><ROW><id>8830050</id><snippet>x</snippet></ROW><ROW><id>8830050</id><snippet>mystr.replace('x\n', 'x extra extra stuff\n')
</snippet></ROW><ROW><id>8830257</id><snippet>Customers</snippet></ROW><ROW><id>8830257</id><snippet>Products</snippet></ROW><ROW><id>8830257</id><snippet>Days</snippet></ROW><ROW><id>8830257</id><snippet>node(Person) --- edge(Day) ---&gt; node(Product)
</snippet></ROW><ROW><id>8830257</id><snippet>node(Bob) --- 1/1/12 ---&gt; node(Pencil)
</snippet></ROW><ROW><id>8830257</id><snippet>          -- 1/1/12 --
         /            \
node(Bob)              &gt; node(Pencil)
         \            /
          -- 1/2/12 --
</snippet></ROW><ROW><id>8830257</id><snippet>networkx</snippet></ROW><ROW><id>8830257</id><snippet>MultiGraph</snippet></ROW><ROW><id>8830257</id><snippet>MultiDiGraph</snippet></ROW><ROW><id>8830257</id><snippet>In : g = networkx.MultiDiGraph()

In : g.add_node("Bob")
In : g.add_node("Alice")

In : g.add_node("Pencil")

In : g.add_edge("Bob","Pencil",key="1/1/12")
In : g.add_edge("Bob","Pencil",key="1/2/12")

In : g.add_edge("Alice","Pencil",key="1/3/12")
In : g.add_edge("Alice","Pencil",key="1/2/12")

In : g.edges(keys=True)
Out:
[('Bob', 'Pencil', '1/2/12'),
 ('Bob', 'Pencil', '1/1/12'),
 ('Alice', 'Pencil', '1/3/12'),
 ('Alice', 'Pencil', '1/2/12')]
</snippet></ROW><ROW><id>8830257</id><snippet>In : g.has_edge("Alice","Pencil","1/1/12")
Out: False

In : g.has_edge("Alice","Pencil","1/2/12")
Out: True
</snippet></ROW><ROW><id>8830257</id><snippet>In : [(from_node, to_node) for from_node, to_node, key in g.edges(keys=True) if key=="1/2/12"]
Out: [('Bob', 'Pencil'), ('Alice', 'Pencil')]
</snippet></ROW><ROW><id>8830257</id><snippet>networkx</snippet></ROW><ROW><id>8830550</id><snippet>import xml.etree.cElementTree as xml
from ast import literal_eval

xmldata = {}
xmlfile = xml.parse(XMLFile.xml)
for xmltag in xmlfile.iter():
    try:
        xmldata[xmltag.tag] = literal_eval(xmltag.text)
    except SyntaxError:
        xmldata[xmltag.tag] = xmltag.text
</snippet></ROW><ROW><id>8830649</id><snippet>formatted_text_to_add = 'Sample text'
with open('userfile', 'rb') as filename:
    filetext = filename.read()

newfiletext = formatted_text_to_add + '/n' + filetext
with open('userfile', 'wb') as filename:   
    filename.write(newfiletext)
</snippet></ROW><ROW><id>8830785</id><snippet>import urllib2

@cherrypy.expose
def onSubmit(**kwargs):
  ##Do something
  ##Do something
  ##Do something

  url = "http://localhost/some_other_location/doSomethingElse?arg1=x&amp;arg2=y"

  try:
    data = urllib2.urlopen(url).read()
  except urllib2.HTTPError, e:
    raise cherrypy.HTTPError(500, "HTTP error: %d" % e.code)
  except urllib2.URLError, e:
    raise cherrypy.HTTPError(500, "Network error: %s" % e.reason.args[1])

  ##Do something with the data
</snippet></ROW><ROW><id>8830944</id><snippet>for loop</snippet></ROW><ROW><id>8830996</id><snippet>deleted</snippet></ROW><ROW><id>8830996</id><snippet>class Animal():...</snippet></ROW><ROW><id>8830996</id><snippet>class Man(Animal):</snippet></ROW><ROW><id>8831301</id><snippet>getattr</snippet></ROW><ROW><id>8831301</id><snippet>setattr</snippet></ROW><ROW><id>8831301</id><snippet>delattr</snippet></ROW><ROW><id>8831301</id><snippet>for attr, nice in zip(attrs, niceAttrs):
    setattr(self, attr, value)
</snippet></ROW><ROW><id>8831301</id><snippet>value</snippet></ROW><ROW><id>8831301</id><snippet>self</snippet></ROW><ROW><id>8831301</id><snippet>self</snippet></ROW><ROW><id>8831654</id><snippet>grid = [[[] for x in xrange(5)] for y in xrange(5)]
</snippet></ROW><ROW><id>8831960</id><snippet>[General]
orig_str = line1
 line2
</snippet></ROW><ROW><id>8831960</id><snippet>'line1\nline2'</snippet></ROW><ROW><id>8831960</id><snippet>'\r'</snippet></ROW><ROW><id>8831960</id><snippet>'\n'</snippet></ROW><ROW><id>8831960</id><snippet>'\r\n'</snippet></ROW><ROW><id>8831960</id><snippet>ConfigParser</snippet></ROW><ROW><id>8831960</id><snippet>from ConfigParser import ConfigParser

class MyConfigParser(ConfigParser):
    def get(self, section, option):
      return ConfigParser.get(self, section, option).replace('\n', '\r\n')

config = MyConfigParser()
config.read('test_config.ini')

orig_str = """line1\r\nline2"""
config_str = config.get('General', 'orig_str')
print orig_str == config_str    # Prints True
</snippet></ROW><ROW><id>8832234</id><snippet>test.1 = Test()</snippet></ROW><ROW><id>8832234</id><snippet>Test(self)</snippet></ROW><ROW><id>8832234</id><snippet>class Test:
   def func(self):
       print('func')
</snippet></ROW><ROW><id>8832234</id><snippet>test2.newfunc = Test.func
</snippet></ROW><ROW><id>8832234</id><snippet>newfunc</snippet></ROW><ROW><id>8832302</id><snippet>ListVar = original[:]
</snippet></ROW><ROW><id>8832302</id><snippet>for b in range(len(ListVar)):
   for c in range(len(ListVar[b])):
</snippet></ROW><ROW><id>8832302</id><snippet>       #If its an int ... remove
       try:
           int(ListVar[b][c].replace(' ', ''))
           ListVar[b][c] = ''
       except: pass
</snippet></ROW><ROW><id>8832302</id><snippet>try..except</snippet></ROW><ROW><id>8832302</id><snippet>.isdigit()</snippet></ROW><ROW><id>8832302</id><snippet>       #if any second sufxList delete
       for d in range(len(SufxList)):
           if ListVar[b][c].find(SufxList[d]) != -1: ListVar[b][c] = ''
</snippet></ROW><ROW><id>8832302</id><snippet>.endswith()</snippet></ROW><ROW><id>8832302</id><snippet>in</snippet></ROW><ROW><id>8832302</id><snippet>       for d in range(len(TerminateHook)):
           if ListVar[b][c].find(TerminateHook[d]) != -1: ListVar[b][c] = ''
</snippet></ROW><ROW><id>8832302</id><snippet>in</snippet></ROW><ROW><id>8832302</id><snippet>any()</snippet></ROW><ROW><id>8832302</id><snippet>   #remove all '' from list
   while '' in ListVar[b]: ListVar[b].remove('')
</snippet></ROW><ROW><id>8832302</id><snippet>while</snippet></ROW><ROW><id>8832302</id><snippet>print(ListVar[b])
</snippet></ROW><ROW><id>8832302</id><snippet>suffixes = tuple(SufxList)
newListVar = []
for row in original:
   newRow = []
   newListVar.append(newRow)
   for value in row:
       if (not value.isdigit() and 
           not value.endswith(suffixes) and
           not any(th in value for th in TerminateHook)):
           newRow.append(value)

    print(newRow)
</snippet></ROW><ROW><id>8832311</id><snippet>str(tr.transcribe.decode('utf-8'))
</snippet></ROW><ROW><id>8832311</id><snippet>unicode(tr.transcribe).count(' ')
</snippet></ROW><ROW><id>8832311</id><snippet>len(unicode(tr.transcribe).split())
</snippet></ROW><ROW><id>8832695</id><snippet>class FileResolver(etree.Resolver):
    def resolve(self, url, pubid, context):
        return self.resolve_filename(url, context)

parser = etree.XMLParser()
parser.resolvers.add(FileResolver())
xml_input = etree.parse(open('a.xml','r'), parser)
xslt_root = etree.parse(open('merge.xsl','r'), parser)
transform = etree.XSLT(xslt_root)
print str(transform(xml_input))
</snippet></ROW><ROW><id>8832750</id><snippet>in</snippet></ROW><ROW><id>8832750</id><snippet>if i in set(mylist):
</snippet></ROW><ROW><id>8832856</id><snippet>numpy.i</snippet></ROW><ROW><id>8833014</id><snippet>wildcard = "pictures (*.jpeg,*.png)|*.jpeg;*.png"
</snippet></ROW><ROW><id>8833061</id><snippet>import json
import urlparse
data = urlparse.parse_qs(r)
print json.loads(r['payload'][0])
</snippet></ROW><ROW><id>8833061</id><snippet>r</snippet></ROW><ROW><id>8833134</id><snippet>int(out_ts)</snippet></ROW><ROW><id>8833134</id><snippet>itertools.groupby</snippet></ROW><ROW><id>8833134</id><snippet>from itertools import groupby

data = get_time_deltas(INFILE)  
get_key = lambda x: int(x[0])  # function to get group key from data
bins = [(k, list(g)) for k, g in groupby(data, get_key)]
</snippet></ROW><ROW><id>8833134</id><snippet>bins</snippet></ROW><ROW><id>8833134</id><snippet>082438</snippet></ROW><ROW><id>8833134</id><snippet>082438.*</snippet></ROW><ROW><id>8833134</id><snippet># print out the number of messages for each second
for sec, data in bins:
    print('{0} --- {1}'.format(sec, len(data)))

# write (sec, msg_per_sec) out to CSV file
import csv
with open("test.csv", "w") as f:
    csv.writer(f).writerows((s, len(d)) for s, d in bins)

# get average message per second
message_counts = [len(d) for s, d in bins]
avg_msg_per_second = float(sum(message_count)) / len(message_count)
</snippet></ROW><ROW><id>8833134</id><snippet>list</snippet></ROW><ROW><id>8833134</id><snippet>bins</snippet></ROW><ROW><id>8833134</id><snippet>OrderedDict</snippet></ROW><ROW><id>8833134</id><snippet>get_key</snippet></ROW><ROW><id>8833134</id><snippet>get_key = lambda x: int(x[0] / 60)  # truncate timestamp to the minute
</snippet></ROW><ROW><id>8833155</id><snippet>from PyQt4.QtCore import * 
from PyQt4.QtGui import *
</snippet></ROW><ROW><id>8833155</id><snippet>from PyQt4 import QtCore, QtGui
</snippet></ROW><ROW><id>8833155</id><snippet>class DlgAbout(QtGui.QDialog, Ui_DlgAbout):
</snippet></ROW><ROW><id>8833155</id><snippet>from PyQt4 import QtGui
import sys


class MyMainWindow(QtGui.QMainWindow):

    def __init__(self, parent=None):

        super(MyMainWindow, self).__init__(parent)
        self.form_widget = FormWidget(self)
        self.setCentralWidget(self.form_widget)


class FormWidget(QtGui.QWidget):

    def __init__(self, parent):
        super(FormWidget, self).__init__(parent)
        self.layout = QtGui.QVBoxLayout(self)

        self.button = QtGui.QPushButton("Button!")
        self.layout.addWidget(self.button)


if __name__ == "__main__":
    app = QtGui.QApplication([])
    foo = MyMainWindow()
    foo.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8833155</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>8833155</id><snippet>app = QtGui.QApplication([])</snippet></ROW><ROW><id>8833223</id><snippet>os.walk</snippet></ROW><ROW><id>8833223</id><snippet>os.access</snippet></ROW><ROW><id>8833223</id><snippet>import os

unreadable_dirs = []
unreadable_files = []

for dirpath, dirnames, filenames in os.walk('/var/log'):
  for dirname in dirnames:
    dirname = os.path.join(dirpath, dirname)
    if not os.access(dirname, os.R_OK):
      unreadable_dirs.append(dirname)
  for filename in filenames:
    filename = os.path.join(dirpath, filename)
    if not os.access(filename, os.R_OK):
      unreadable_dirs.append(filename)

print 'Unreadable directories:\n{0}'.format('\n'.join(unreadable_dirs))
print 'Unreadable files:\n{0}'.format('\n'.join(unreadable_files))
</snippet></ROW><ROW><id>8833223</id><snippet>os.walk</snippet></ROW><ROW><id>8833223</id><snippet>glob.glob</snippet></ROW><ROW><id>8833233</id><snippet>../../SharedScripts/python/</snippet></ROW><ROW><id>8833233</id><snippet>common.py</snippet></ROW><ROW><id>8833233</id><snippet>import common
common.f1()
</snippet></ROW><ROW><id>8833233</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8833233</id><snippet>sys.path.append("../../SharedScripts/python/")</snippet></ROW><ROW><id>8833233</id><snippet>os.path.abspath</snippet></ROW><ROW><id>8833233</id><snippet>os.path.abspath('../../SharedScripts/python/')</snippet></ROW><ROW><id>8833355</id><snippet>defaultdict</snippet></ROW><ROW><id>8833355</id><snippet>persons_by_jobs = defaultdict(list)
for person in persons:
    persons_by_jobs[person['job']].append(person['person'])
</snippet></ROW><ROW><id>8833540</id><snippet>POST</snippet></ROW><ROW><id>8833540</id><snippet>GET</snippet></ROW><ROW><id>8833540</id><snippet>mechanize.browser.open</snippet></ROW><ROW><id>8833794</id><snippet>class Candidate(models.Model):
    name = models.CharField(max_length=50)

class Step(model.Model):
    candidate = models.ForeignKey(Candidate)
    text = models.TextField(blank=True)

class Review(models.Model):
    reviewer = models.ForeignKey(User)
    step =  models.OneToOneField(Step)
    text = models.TextField(blank=True)
</snippet></ROW><ROW><id>8833794</id><snippet>ModelFromset</snippet></ROW><ROW><id>8834209</id><snippet>Image.fromstring(mode, size, data, decoder_name='raw', *args)
</snippet></ROW><ROW><id>8834209</id><snippet>Image.fromstring("RGBA", old_image.size, contents)
</snippet></ROW><ROW><id>8834209</id><snippet>StringIO</snippet></ROW><ROW><id>8834209</id><snippet>output = StringIO.StringIO()
old_image.save(output, format="PNG")

output.seek(0)
new_image = Image.open(output)
</snippet></ROW><ROW><id>8834235</id><snippet>matplotlib.nxutils</snippet></ROW><ROW><id>8834455</id><snippet>blank=True</snippet></ROW><ROW><id>8834455</id><snippet>default</snippet></ROW><ROW><id>8834455</id><snippet>extension = models.IntegerField("Extension in days", default=0)
</snippet></ROW><ROW><id>8834486</id><snippet>draw_cylinder</snippet></ROW><ROW><id>8834486</id><snippet>pos = (
    location[0]+offsetPosition[0],
    location[1]+offsetPosition[2],
    location[1]+offsetPosition[2],
)
</snippet></ROW><ROW><id>8834486</id><snippet>bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=depth, location=pos, rotation=rotation)
</snippet></ROW><ROW><id>8834909</id><snippet>K = 10 ** 200000 + 2</snippet></ROW><ROW><id>8834909</id><snippet>str_half = str(int(str_half+string[half]) + 1)</snippet></ROW><ROW><id>8835017</id><snippet>insert</snippet></ROW><ROW><id>8835017</id><snippet>get_children</snippet></ROW><ROW><id>8835017</id><snippet>get_children</snippet></ROW><ROW><id>8835060</id><snippet>class RateField(models.DecimalField):
    def __init__(self, *args, **kwargs):
        kwargs.update(dict(max_digits=2, decimal_places=1, choices=MY_CHOICES))
        super(RateField, self).__init__(*args, **kwargs)

rate = RateField()
</snippet></ROW><ROW><id>8835333</id><snippet>dom.getElementsByTagName("test")[0].toxml()</snippet></ROW><ROW><id>8835333</id><snippet>dom.getElementsByTagName("test")[0].firstChild.data</snippet></ROW><ROW><id>8835563</id><snippet>r'£\d{1,3}(?:\,\d{3})+(?:\.\d{2})?'
</snippet></ROW><ROW><id>8835563</id><snippet>&gt;&gt;&gt; re.findall(r'£\d{1,3}(?:\,\d{3})+(?:\.\d{2})?',
... " The little £250,000 brown fox jumped over the lazy dog")
['\xc2\xa3250,000']
</snippet></ROW><ROW><id>8835563</id><snippet>Decimal</snippet></ROW><ROW><id>8835563</id><snippet>&gt;&gt;&gt; Decimal('\xc2\xa3250,000'.decode('utf-8')[1:].strip(','))
Decimal('250000')
</snippet></ROW><ROW><id>8835710</id><snippet>curl http://localhost:8080/default.jsp &gt; default.bak
... wipe db ...
data = $(cat default.bak)
curl -X "POST" -d "backup=$data" http://localhost:8080/default_restore.jsp
</snippet></ROW><ROW><id>8835710</id><snippet>data = $(cat default.bak)
python your_script.py $data

curl http://localhost:8080/default.jsp | python yourscript.py &gt; default.bak
</snippet></ROW><ROW><id>8835762</id><snippet>http.client</snippet></ROW><ROW><id>8835762</id><snippet>sock</snippet></ROW><ROW><id>8835762</id><snippet>try:
    from http.client import HTTPConnection
except ImportError: # Python&lt;3
    from httplib import HTTPConnection

h = HTTPConnection('example.net', 80)
h.request('GET', '/')
print('Local port: ' + str(h.sock.getsockname()[1]))
</snippet></ROW><ROW><id>8836147</id><snippet>$ActionType</snippet></ROW><ROW><id>8836147</id><snippet>ActionType</snippet></ROW><ROW><id>8836147</id><snippet>for val in nXML.xpath('//{ActionType}/Startup/@value'.format(ActionType=ActionType)):
    stdin, stdout, stderr = dssh.exec_command(val)
</snippet></ROW><ROW><id>8836290</id><snippet>target.write("%s\n,%s\n,%s\n")
</snippet></ROW><ROW><id>8836290</id><snippet>"%s\n%s\n%s\n"  // Note that the code from the book doesn't print commas
</snippet></ROW><ROW><id>8836446</id><snippet>&gt;&gt;&gt; import wx
&gt;&gt;&gt; frame = wx.Frame(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python26\lib\site-packages\wx-2.8-msw-unicode\wx\_windows.py", line 505, in __init__
    _windows_.Frame_swiginit(self,_windows_.new_Frame(*args, **kwargs))
wx._core.PyNoAppError: The wx.App object must be created first!
</snippet></ROW><ROW><id>8836539</id><snippet>http://example.com?user=foo
</snippet></ROW><ROW><id>8836539</id><snippet>request()</snippet></ROW><ROW><id>8836539</id><snippet>HTTPConnection.request(method, url[, body[, headers]])
</snippet></ROW><ROW><id>8836539</id><snippet>conn.request("GET", connections_strings.auth, params, headers)
</snippet></ROW><ROW><id>8836539</id><snippet>selector = '{}?{}'.format(connections_strings.auth, params)
conn.request("GET", selector, headers=headers)
</snippet></ROW><ROW><id>8836643</id><snippet>malloc()</snippet></ROW><ROW><id>8836643</id><snippet>free()</snippet></ROW><ROW><id>8836643</id><snippet>malloc()</snippet></ROW><ROW><id>8836643</id><snippet>malloc()</snippet></ROW><ROW><id>8836704</id><snippet>t = (1, 315.0, 2, 30.399999618530273, 3, 1.1033999919891357, 4, 8.0)
print tuple(zip(*[iter(t)] * 2))
</snippet></ROW><ROW><id>8836704</id><snippet>grouper()</snippet></ROW><ROW><id>8836704</id><snippet>itertools</snippet></ROW><ROW><id>8836704</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>8836907</id><snippet>sys.stdin</snippet></ROW><ROW><id>8836907</id><snippet>import sys
from StringIO import StringIO

input_text = 'whatever you want the function to read from input()'

old_stdin = sys.stdin
#Reassign stdin to a StringIO object
sys.stdin = StringIO(input_text)

f()

sys.stdin = old_stdin
</snippet></ROW><ROW><id>8837356</id><snippet>import datetime
string = "2011-10-01 19:25:01"
dt = datetime.datetime.strptime(string, "%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>8837356</id><snippet>dt.year
dt.month
dt.day
</snippet></ROW><ROW><id>8837554</id><snippet>import re

def get_function_name(module, line):
    module_file = module.replace('.', '/') + '.py'
    lines = open(module_file, 'r').xreadlines()
    i = line - 1
    try:
        while i:
            tmp = next(lines)
            i -= 1
    except StopIteration:
        raise EOFError('Not enought lines in module %s' % module)
    function_line = next(lines)
    function_name =  re.match('def (\w+)\([^)]*\):', function_line)
    if function_name:
        return function_name.group(1)
    raise ValueError('No function declared on line %s' % line)
</snippet></ROW><ROW><id>8837554</id><snippet>Error</snippet></ROW><ROW><id>8837554</id><snippet>&gt;&gt;&gt; get_function_name('my_module.my_submodule', 24)
'my_function_name'
&gt;&gt;&gt; get_function_name('my_module.my_submodule', 25)
    Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 15, in get_function_name
ValueError: No function declared on line 17
&gt;&gt;&gt; get_function_name('my_module.my_submodule', 123456)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in get_function_name
EOFError: Not enought lines in module
</snippet></ROW><ROW><id>8837962</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url = "http://www.opcom.ro/rapoarte/export_csv_raportPIPsiVolumTranzactionat.php?zi=13&amp;luna=1&amp;an=2012&amp;limba=ro"
&gt;&gt;&gt; request = urllib2.Request(url)
&gt;&gt;&gt; response = urllib2.urlopen(request)
&gt;&gt;&gt; print response.read()
"PIP si volum tranzactionat pentru ziua de livrare: 13/1/2012"

"","Pret mediu [lei/MWh]","Volum [MWh]"
"ROPEX_DAM_Base (1-24)","185.23","31226.488"
"ROPEX_DAM_Peak (7-22)","239.68","22773.036"
"ROPEX_DAM_Off_Peak (1-6) &amp; (23-24)","76.32","8453.452"

"Interval","Pret de Inchidere a Pietei [lei/MWh]","Volum Tranzactionat [MWh]"
"1","29.99","876.148"
"2","70.00","1057.729"
"3","50.00","1058.868"
"4","50.00","1044.700"
"5","50.00","1061.574"
"6","61.71","1015.513"
"7","86.08","1070.586"
"8","181.00","1187.392"
"9","222.00","1434.829"
"10","230.00","1515.633"
"11","262.60","1539.495"
"12","226.00","1538.931"
"13","225.00","1559.273"
"14","271.00","1515.113"
"15","266.42","1513.220"
"16","250.00","1534.506"
"17","263.02","1481.099"
"18","298.00","1351.114"
"19","283.42","1336.266"
"20","280.00","1398.646"
"21","271.00","1450.183"
"22","219.34","1346.750"
"23","170.00","1219.772"
"24","128.88","1119.148"

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8838190</id><snippet>input_file = open('infile.txt', 'r')
output_file = open('outfile.txt', 'w')
for line in input_file:
    line += "transformed"
    output_file.write(line)
</snippet></ROW><ROW><id>8838190</id><snippet>try a.split(' ')[0] in flags.iterkeys():
</snippet></ROW><ROW><id>8838190</id><snippet>in flags.iterkeys()</snippet></ROW><ROW><id>8838190</id><snippet>in flags</snippet></ROW><ROW><id>8838190</id><snippet>while l</snippet></ROW><ROW><id>8838190</id><snippet>while l is True</snippet></ROW><ROW><id>8838190</id><snippet>l</snippet></ROW><ROW><id>8838190</id><snippet>break</snippet></ROW><ROW><id>8838190</id><snippet>input_file = open('infile.txt', 'r')
output_file = open('outfile.txt', 'w')
flags = { ... }

for line in input_file:
    parts = line.strip().split()
    if parts[0] in flags:
        line = line + ' ' + flags[parts[0]]
    output_file.write(line + "\n")
</snippet></ROW><ROW><id>8838430</id><snippet>matchObj</snippet></ROW><ROW><id>8838430</id><snippet>match_obj</snippet></ROW><ROW><id>8839101</id><snippet>#!/usr/bin/env python
import logging
from argparse import ArgumentParser

def getConsoleLevel(level):
    if level is None: return
    try: level = int(level)
    except: pass
    if level not in CONSL_LEVEL_RANGE:
        args.console_log = None
        print 'warning: console log level ', level, ' not in range 1..50.'
        return
    return level

COMPANY_LOGGER = 'COMPANY.Python.Logger'
CONSL_LEVEL_RANGE = range(0, 51)
LOG_FILE = 'company.log'
FORMAT_STR = '%(asctime)s %(levelname)s %(message)s'

parser = ArgumentParser()
parser.add_argument('-c', '--console-log', metavar='ARG',
                    action='store', dest='console_log',
                    default=None,
                    help='Adds a console logger for the level specified in the range 1..50')

args = parser.parse_args()

## Create logger
logger = logging.getLogger(COMPANY_LOGGER)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter(FORMAT_STR)
## Add FileHandler
fh = logging.FileHandler(LOG_FILE)
fh.name = 'File Logger'
fh.level = logging.WARNING
fh.formatter = formatter
logger.addHandler(fh)
## Add (optionally) ConsoleHandler
level = getConsoleLevel(args.console_log)
if level is not None:
    ch = logging.StreamHandler()
    ch.name = 'Console Logger'
    ch.level = level
    ch.formatter = formatter
    logger.addHandler(ch)

logger.debug('DEBUG')
logger.info('INFO')
logger.warning('WARNING')
logger.critical('CRITICAL')
</snippet></ROW><ROW><id>8839101</id><snippet>-c1</snippet></ROW><ROW><id>8839101</id><snippet>~ zacharyyoung$ ./so.py -c1
2012-01-12 08:59:50,086 DEBUG DEBUG
2012-01-12 08:59:50,086 INFO INFO
2012-01-12 08:59:50,087 WARNING WARNING
2012-01-12 08:59:50,087 CRITICAL CRITICAL
~ zacharyyoung$ cat company.log 
2012-01-12 08:59:50,087 WARNING WARNING
2012-01-12 08:59:50,087 CRITICAL CRITICAL
</snippet></ROW><ROW><id>8839101</id><snippet>-c20</snippet></ROW><ROW><id>8839101</id><snippet>~ zacharyyoung$ ./so.py -c20
2012-01-12 09:00:09,393 INFO INFO
2012-01-12 09:00:09,393 WARNING WARNING
2012-01-12 09:00:09,393 CRITICAL CRITICAL
~ zacharyyoung$ cat company.log 
2012-01-12 08:59:50,087 WARNING WARNING
2012-01-12 08:59:50,087 CRITICAL CRITICAL
2012-01-12 09:00:09,393 WARNING WARNING
2012-01-12 09:00:09,393 CRITICAL CRITICAL
</snippet></ROW><ROW><id>8839455</id><snippet>m = numpy.ones(1000, dtype=numpy.float32) / 1000
print repr(m.sum())
</snippet></ROW><ROW><id>8839455</id><snippet>m = numpy.ones(1000, dtype=numpy.float64) / 1000
print repr(m.sum())
</snippet></ROW><ROW><id>8839455</id><snippet>numpy.float</snippet></ROW><ROW><id>8839455</id><snippet>float32</snippet></ROW><ROW><id>8839455</id><snippet>float64</snippet></ROW><ROW><id>8839516</id><snippet>$elemMatch</snippet></ROW><ROW><id>8839516</id><snippet>foo.find( { "array_element" : 
             { $elemMatch : { 'some_identifier' : 'abcdefg', 'value' : 8 } } } );
</snippet></ROW><ROW><id>8839518</id><snippet>import os
import sys
</snippet></ROW><ROW><id>8839518</id><snippet>import sys, os
</snippet></ROW><ROW><id>8839518</id><snippet>from subprocess import Popen, PIPE
</snippet></ROW><ROW><id>8839610</id><snippet>sort -u</snippet></ROW><ROW><id>8840066</id><snippet>    #!/usr/bin/python2.7
    import pcap, dpkt, socket

    pc = pcap.pcap()
    ports = (80, 8080, 888, 443)

    def process():
      mem = 0
      sport = 0
      dport = 0
      try:
        for ts, pkt in pc:
          eth = dpkt.ethernet.Ethernet(pkt)
          ip = eth.data

          if ip.__class__ == dpkt.ip.IP:
            ip1, ip2 = map(socket.inet_ntoa, [ip.src, ip.dst])
            if ip.p == 6:
              I7 = ip.data
              sport, dport = [I7.sport, I7.dport]
            if sport in ports or dport in ports:
              if len(data) &gt; 0:
                print 'From %s to %s, length: %d' %(ip1, ip2, len(I7.data))
                mem = mem + len(I7.data)
     except KeyboardInterrupt:
       return mem

    def main():
      mem = process()
      print float(mem/(1024*1024)), 'mb'
      return

    if __name__ == '__main__':
      main()
</snippet></ROW><ROW><id>8840347</id><snippet>class Delegate:
    def __init__(self, cls, obj):
        self._delegate_cls = cls
        self._delegate_obj = obj
    def __getattr__(self, name):
        x = getattr(self._delegate_cls, name)
        if hasattr(x, "__get__"):
            return x.__get__(self._delegate_obj)
        return x
</snippet></ROW><ROW><id>8840347</id><snippet>b = Delegate(B, c)
</snippet></ROW><ROW><id>8840347</id><snippet>__class__</snippet></ROW><ROW><id>8840347</id><snippet>super</snippet></ROW><ROW><id>8840347</id><snippet>class Delegate:
    def __init__(self, cls):
        self._delegate_cls = cls
    def __getattr__(self, name):
        x = getattr(self._delegate_cls, name)
        if hasattr(x, "__get__"):
            return x.__get__(self)
        return x
</snippet></ROW><ROW><id>8840347</id><snippet>self</snippet></ROW><ROW><id>8840347</id><snippet>class Delegate:
    def __init__(self, cls, obj):
        self._delegate_cls = cls
        self._delegate_obj = obj
    def __getattr__(self, name):
        if name in vars(self._delegate_obj):
            return getattr(self._delegate_obj, name)
        x = getattr(self._delegate_cls, name)
        if hasattr(x, "__get__"):
            return x.__get__(self)
        return x
</snippet></ROW><ROW><id>8840451</id><snippet>import urllib, urllib2

quoted_query = urllib.quote(query)
host = 'http://www.bing.com/search?q=%s&amp;go=&amp;qs=n&amp;sk=&amp;sc=8-13&amp;first=%s' % (quoted_query, page)
req = urllib2.Request(host)
req.add_header('User-Agent', User_Agent)
response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>8840451</id><snippet>import requests

results = requests.get("http://www.bing.com/search", 
              params={'q': query, 'first': page}, 
              headers={'User-Agent': user_agent})
</snippet></ROW><ROW><id>8840535</id><snippet>fn = new.function(c.to_code(), module.__dict__, name.name)
</snippet></ROW><ROW><id>8840565</id><snippet>from PyQt4 import QtCore, QtGui, QtXml

class XmlHandler(QtXml.QXmlDefaultHandler):
    def __init__(self, root):
        QtXml.QXmlDefaultHandler.__init__(self)
        self._root = root
        self._item = None
        self._text = ''
        self._error = ''

    def startElement(self, namespace, name, qname, attributes):
        if qname == 'folder' or qname == 'item':
            if self._item is not None:
                self._item = QtGui.QTreeWidgetItem(self._item)
            else:
                self._item = QtGui.QTreeWidgetItem(self._root)
            self._item.setData(0, QtCore.Qt.UserRole, qname)
            self._item.setText(0, 'Unknown Title')
            if qname == 'folder':
                self._item.setExpanded(True)
            elif qname == 'item':
                self._item.setText(1, attributes.value('type'))
        self._text = ''
        return True

    def endElement(self, namespace, name, qname):
        if qname == 'title':
            if self._item is not None:
                self._item.setText(0, self._text)
        elif qname == 'folder' or qname == 'item':
            self._item = self._item.parent()
        return True

    def characters(self, text):
        self._text += text
        return True

    def fatalError(self, exception):
        print('Parse Error: line %d, column %d:\n  %s' % (
              exception.lineNumber(),
              exception.columnNumber(),
              exception.message(),
              ))
        return False

    def errorString(self):
        return self._error

class Window(QtGui.QTreeWidget):
    def __init__(self):
        QtGui.QTreeWidget.__init__(self)
        self.header().setResizeMode(QtGui.QHeaderView.Stretch)
        self.setHeaderLabels(['Title', 'Type'])
        source = QtXml.QXmlInputSource()
        source.setData(xml)
        handler = XmlHandler(self)
        reader = QtXml.QXmlSimpleReader()
        reader.setContentHandler(handler)
        reader.setErrorHandler(handler)
        reader.parse(source)

xml = """\
&lt;root&gt;
    &lt;folder&gt;
        &lt;title&gt;Folder One&lt;/title&gt;
        &lt;item type="1"&gt;
            &lt;title&gt;Item One&lt;/title&gt;
        &lt;/item&gt;
        &lt;item type="1"&gt;
            &lt;title&gt;Item Two&lt;/title&gt;
        &lt;/item&gt;
        &lt;item type="2"&gt;
            &lt;title&gt;Item Three&lt;/title&gt;
        &lt;/item&gt;
        &lt;folder&gt;
            &lt;title&gt;Folder Two&lt;/title&gt;
            &lt;item type="3"&gt;
                &lt;title&gt;Item Four&lt;/title&gt;
            &lt;/item&gt;
            &lt;item type="0"&gt;
                &lt;title&gt;Item Five&lt;/title&gt;
            &lt;/item&gt;
            &lt;item type="1"&gt;
                &lt;title&gt;Item Six&lt;/title&gt;
            &lt;/item&gt;
        &lt;/folder&gt;
    &lt;/folder&gt;
    &lt;folder&gt;
        &lt;title&gt;Folder Three&lt;/title&gt;
        &lt;item type="0"&gt;
            &lt;title&gt;Item Six&lt;/title&gt;
        &lt;/item&gt;
        &lt;item type="2"&gt;
            &lt;title&gt;Item Seven&lt;/title&gt;
        &lt;/item&gt;
        &lt;item type="2"&gt;
            &lt;title&gt;Item Eight&lt;/title&gt;
        &lt;/item&gt;
    &lt;/folder&gt;
&lt;/root&gt;
"""

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(400, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8840609</id><snippet>driver.execute_script('document.getElementById("myId").focus()')</snippet></ROW><ROW><id>8840609</id><snippet>driver.execute_script(r'document.getElementById("myId").value="c:\\test\\myfile.txt"')</snippet></ROW><ROW><id>8840788</id><snippet>X-Requested-With: XMLHttpRequest</snippet></ROW><ROW><id>8840788</id><snippet>live http header</snippet></ROW><ROW><id>8840788</id><snippet>more</snippet></ROW><ROW><id>8840788</id><snippet>python-spidermonkey module</snippet></ROW><ROW><id>8840827</id><snippet>&gt;&gt;&gt; fact.func_code.co_varnames
('i', 'f', 'j')
</snippet></ROW><ROW><id>8840827</id><snippet>&gt;&gt;&gt; def f():
        a = 1
        if 0:
            b = 2
&gt;&gt;&gt; f.func_code.co_varnames
('a',)
</snippet></ROW><ROW><id>8841211</id><snippet>-i</snippet></ROW><ROW><id>8841311</id><snippet>csv</snippet></ROW><ROW><id>8841311</id><snippet>with open('your_data_file.dat','r') as source:
    rdr= csv.reader( source, delimiter='\t', quotechar='')
    for row in rdr:
        # you have your columns with which to do your insert.
conn.commit()
</snippet></ROW><ROW><id>8841311</id><snippet>from contextlib import closing

with open('your_data_file.dat','r') as source:
    rdr= csv.reader( source, delimiter='\t', quotechar='')
    with closing(conn.cursor()) as cursor:
        for row in rdr:
            # you have your columns with which to do your insert.
conn.commit()
</snippet></ROW><ROW><id>8841322</id><snippet>split()</snippet></ROW><ROW><id>8841322</id><snippet>re</snippet></ROW><ROW><id>8841322</id><snippet>import re
...
p.extend(re.split('[ ,]', lines))
</snippet></ROW><ROW><id>8841322</id><snippet>[ ,]</snippet></ROW><ROW><id>8841322</id><snippet>p</snippet></ROW><ROW><id>8841322</id><snippet>extend()</snippet></ROW><ROW><id>8841322</id><snippet>append()</snippet></ROW><ROW><id>8841322</id><snippet>p</snippet></ROW><ROW><id>8841520</id><snippet>class Thing(object):
    def __init__(self, thing):
        self.value = thing
        self.name = str(thing)
    id = property(lambda s: id(s))
    #...
    def __repr__(self):
        return "I am a %s" %self.name 

class ThingList(list):
    def __init__(self, items):
        for item in items:
            self.append(item)
    def append(self, value):
        list.append(self, Thing(value))
    def __setitem__(self, index, value):
        list.__setitem__(self, index, Thing(value))
</snippet></ROW><ROW><id>8841520</id><snippet>&gt;&gt;&gt; a = ThingList(range(3))
&gt;&gt;&gt; a.append("three")
&gt;&gt;&gt; a
[I am a 0, I am a 1, I am a 2, I am a three]
&gt;&gt;&gt; a[0].id
35242896
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8841520</id><snippet>Things</snippet></ROW><ROW><id>8841520</id><snippet>class Thing(object):
    # Prevents duplicating the wrapping of objects:
    def __new__(cls, thing):
        if isinstance(thing, cls):
            return thing
        return object.__new__(cls, thing)

    def __init__(self, thing):
        self.value = thing
        self.name = str(thing)
    id = property(lambda s: id(s))
    #...
    def __repr__(self):
        return "I am a %s" %self.name 

def converter(func, cardinality=1):
    def new_func(*args):
        # Pick the last item in the argument list, which
        # for all item setter methods on  a list is the one
        # which actually contains the values
        if cardinality == 1:
            args = args[:-1] + (Thing(args[-1]  ),)
        else:
            args = args[:-1] + ([Thing(item) for item in args[-1]],)
        return func(*args)
    new_func.func_name = func.__name__
    return new_func

my_list_dict = {}

for single_setter in ("__setitem__", "append", "insert"):
    my_list_dict[single_setter] = converter(getattr(list, single_setter), cardinality=1)

for many_setter in ("__setslice__", "__add__", "__iadd__", "__init__", "extend"):
    my_list_dict[many_setter] = converter(getattr(list, many_setter), cardinality="many")

MyList = type("MyList", (list,), my_list_dict)
</snippet></ROW><ROW><id>8841520</id><snippet>&gt;&gt;&gt; a = MyList()
&gt;&gt;&gt; a
[]
&gt;&gt;&gt; a.append(5)
&gt;&gt;&gt; a
[I am a 5]
&gt;&gt;&gt; a + [2,3,4]
[I am a 5, I am a 2, I am a 3, I am a 4]
&gt;&gt;&gt; a.extend(range(4))
&gt;&gt;&gt; a
[I am a 5, I am a 0, I am a 1, I am a 2, I am a 3]
&gt;&gt;&gt; a[1:2] =  range(10,12)
&gt;&gt;&gt; a
[I am a 5, I am a 10, I am a 11, I am a 1, I am a 2, I am a 3]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8841649</id><snippet>def distance(lista, listb):
    return sum( (b - a) ** 2 for a,b in zip(lista, listb) ) ** .5
</snippet></ROW><ROW><id>8841649</id><snippet>def distance(lista, listb):
    runsum = 0.0
    for a, b in zip(lista, listb):
        # square the distance of each
        #  then add them back into the sum
        runsum += (b - a) ** 2  

    # square root it
    return runsum **.5
</snippet></ROW><ROW><id>8841681</id><snippet>Accept-Charset</snippet></ROW><ROW><id>8841681</id><snippet>HTTP_ACCEPT_CHARSET</snippet></ROW><ROW><id>8841681</id><snippet>accept-charset</snippet></ROW><ROW><id>8841703</id><snippet>context</snippet></ROW><ROW><id>8841703</id><snippet>investments</snippet></ROW><ROW><id>8841703</id><snippet>context['total_dollar_amt']</snippet></ROW><ROW><id>8841703</id><snippet>context['counted']</snippet></ROW><ROW><id>8841703</id><snippet>counted</snippet></ROW><ROW><id>8841703</id><snippet>total_dollar_amt</snippet></ROW><ROW><id>8841703</id><snippet>context</snippet></ROW><ROW><id>8841703</id><snippet>for i in investments:
    #count all members in each plan
    count = i.plan.planmember_set.all().count()
    #take off the primary member of the account
    count -= 1
    if i.interestoption:
        if i.interestoption.short_label == 'AN':
            pay_amt = i.pay_amount
            total_amt = (pay_amt / count)
            # attach value to the investment
            i.total_dollar_amt = total_amt
    # attach value to the investment
    i.counted = count
</snippet></ROW><ROW><id>8841703</id><snippet>investments</snippet></ROW><ROW><id>8841775</id><snippet>execute</snippet></ROW><ROW><id>8841775</id><snippet>c.execute('SELECT {} FROM {} WHERE id=?'.format(column, table), row))
</snippet></ROW><ROW><id>8841775</id><snippet>oursql</snippet></ROW><ROW><id>8841814</id><snippet>mybundle/test/__init__.py 
</snippet></ROW><ROW><id>8841814</id><snippet>import mybundle.JSONEncoder
</snippet></ROW><ROW><id>8841814</id><snippet>├── mybundle
│   ├── __init__.py
│   ├── jsonencoder
│   │   ├── __init__.py
│   └── test
│       ├── __init__.py
</snippet></ROW><ROW><id>8841814</id><snippet>[gwidion@powerpuff tmp]$ cat mybundle/__init__.py
import test

[gwidion@powerpuff tmp]$ cat mybundle/test/__init__.py
import mybundle.jsonencoder

[gwidion@powerpuff tmp]$ cat mybundle/jsonencoder/__init__.py
print 5
</snippet></ROW><ROW><id>8841814</id><snippet>[gwidion@powerpuff tmp]$ python
Python 2.7.1 (r271:86832, Apr 12 2011, 16:15:16) 
[GCC 4.6.0 20110331 (Red Hat 4.6.0-2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import mybundle
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8842155</id><snippet>import re

regex = re.compile('==============.+?==============', re.DOTALL)

with open('in.txt', 'r') as f:
    content = f.read()
matches = regex.findall(content)
</snippet></ROW><ROW><id>8842390</id><snippet>attrMap</snippet></ROW><ROW><id>8842390</id><snippet>Tag</snippet></ROW><ROW><id>8842390</id><snippet>value = tag[key]
tag[key] = value
</snippet></ROW><ROW><id>8842390</id><snippet>tag.attrMap[key]</snippet></ROW><ROW><id>8842390</id><snippet>__getitem__</snippet></ROW><ROW><id>8842390</id><snippet>__setitem__</snippet></ROW><ROW><id>8842390</id><snippet>self.attrMap</snippet></ROW><ROW><id>8842390</id><snippet>_getAttrMap</snippet></ROW><ROW><id>8842390</id><snippet>dict(self.attrs)</snippet></ROW><ROW><id>8842390</id><snippet>&gt;&gt;&gt; url = "http://stackoverflow.com/questions/8842224/"
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(url).read())
&gt;&gt;&gt; soup.find(name='input')
&gt;&gt;&gt; tag = soup.find(name='input')
&gt;&gt;&gt; tag['type']
u'text'
</snippet></ROW><ROW><id>8842390</id><snippet>try:
    tag[key]
    # found key
except KeyError:
    # key not present
</snippet></ROW><ROW><id>8842390</id><snippet>if key in dict(tag.attrs):
    # found key
else:
    # key not present
</snippet></ROW><ROW><id>8842390</id><snippet>__contains__</snippet></ROW><ROW><id>8842390</id><snippet>Tag</snippet></ROW><ROW><id>8842390</id><snippet>key in tag</snippet></ROW><ROW><id>8842390</id><snippet>key in dict(tag.attrs)</snippet></ROW><ROW><id>8842419</id><snippet>apply</snippet></ROW><ROW><id>8842419</id><snippet>[:2]</snippet></ROW><ROW><id>8842419</id><snippet>+ 'qwerty'</snippet></ROW><ROW><id>8842419</id><snippet>s.map</snippet></ROW><ROW><id>8842419</id><snippet>apply</snippet></ROW><ROW><id>8842419</id><snippet>    try:
        result = func(self)
        if not isinstance(result, Series):
            result = Series(result, index=self.index, name=self.name)
        return result
    except Exception:
        mapped = lib.map_infer(self.values, func)
        return Series(mapped, index=self.index, name=self.name)
</snippet></ROW><ROW><id>8842522</id><snippet>      x          x                                     x  ...
SequenSack and PaFull Name****************************]JOB...
000001T1  P1     Sample A Sample                          ...
</snippet></ROW><ROW><id>8842522</id><snippet>import sys
import Tkinter as tk
import tkFont

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        header = "SequenSack and PaFull Name****************************]JOB TITLE****************]HOSP NAME******************************]Delivery Address***********************]Alternate 1 Address********************]Calculated Text**********************************]POSTNET Bar"
        sample = "000001T1  P1     Sample A Sample                                                                                         123 Any Street                                                                  Anytown 12345-6789                                12345678900"
        widget = DelimiterWidget(self, header, sample)
        hsb = tk.Scrollbar(orient="horizontal", command=widget.xview)
        widget.configure(xscrollcommand=hsb.set)
        hsb.pack(side="bottom", fill="x")
        widget.pack(side="top", fill="x")

class DelimiterWidget(tk.Text):
    def __init__(self, parent, header, samplerow):
        fixedFont = tkFont.nametofont("TkFixedFont")
        tk.Text.__init__(self, parent, wrap="none", height=3, font=fixedFont)
        self.configure(cursor="left_ptr")
        self.tag_configure("header", background="gray")
        self.tag_configure("even", background="#ffffff")
        self.tag_configure("header_even", background="bisque")
        self.tag_configure("header_odd", background="lightblue")
        self.tag_configure("odd", background="#eeeeee")
        markers = " "*len(header)
        for i in range(len(header)):
            tag = "even" if i%2==0 else "odd"
            self.insert("end", " ", (tag,))
        self.insert("end", "\n")
        self.insert("end", header+"\n", "header")
        self.insert("end", samplerow, "sample")
        self.configure(state="disabled")
        self.bind("&lt;1&gt;", self.on_click)
        self.bind("&lt;Double-1&gt;", self.on_click)
        self.bind("&lt;Triple-1&gt;", self.on_click)

    def on_click(self, event):
        '''Handle a click on a marker'''
        index = self.index("@%s,%s" % (event.x, event.y))
        current = self.get(index)
        self.configure(state="normal")
        self.delete(index)
        (line, column) = index.split(".")
        tag = "even" if int(column)%2 == 0 else "odd"
        char = " " if current == "x" else "x"
        self.insert(index, char, tag)
        self.configure(state="disabled")
        self.highlight_header()
        return "break"

    def highlight_header(self):
        '''Highlight the header based on marker positions'''
        self.tag_remove("header_even", 1.0, "end")
        self.tag_remove("header_odd", 1.0, "end")
        markers = self.get(1.0, "1.0 lineend")

        i = 0
        start = "2.0"
        tag = "header_even"
        while True:
            try:
                i = markers.index("x", i+1)
                end = "2.%s" % i
                self.tag_add(tag, start, end)
                start = self.index(end)
                tag = "header_even" if tag == "header_odd" else "header_odd"
            except ValueError:
                break

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>8842527</id><snippet>def addChildren(pname, pid, cloc, cstat):
    p = session.query(Parent).get(pid) # will give you either Parent or None
    if not(p):
        p = Parent(pname, pid)
        session.add(p)
    p.children.append(Child(loc=cloc, status=cstat))
    session.commit()
</snippet></ROW><ROW><id>8842527</id><snippet>lazy='noload'</snippet></ROW><ROW><id>8842527</id><snippet>parent = relationship("Parent", backref=backref('children', lazy='noload'))
</snippet></ROW><ROW><id>8842527</id><snippet>p.children</snippet></ROW><ROW><id>8843310</id><snippet>getattr(self.factory.mainWindowInstance.ui.testWidget.ui, 'channelBrowser'),
                                QColor(255, 0, 0, 127), 'testFont', 12)
</snippet></ROW><ROW><id>8843310</id><snippet>getattr(getattr(self.factory.mainWindowInstance.ui.testWidget, 'ui'), 'channelBrowser'),
                                    QColor(255, 0, 0, 127), 'testFont', 12)
</snippet></ROW><ROW><id>8843437</id><snippet>(\s+(\w*\.*\w*);)*
</snippet></ROW><ROW><id>8843437</id><snippet>findall</snippet></ROW><ROW><id>8843437</id><snippet>;</snippet></ROW><ROW><id>8843437</id><snippet>map(lambda x: x.strip(), s.split(";"))
</snippet></ROW><ROW><id>8843489</id><snippet>import numpy as np
import tables

# Generate some data
x = np.random.random((100,100,100))

# Store "x" in a chunked array...
f = tables.openFile('test.hdf', 'w')
atom = tables.Atom.from_dtype(x.dtype)
ds = f.createCArray(f.root, 'somename', atom, x.shape)
ds[:] = x
f.close()
</snippet></ROW><ROW><id>8843489</id><snippet>tables.Filters</snippet></ROW><ROW><id>8843489</id><snippet>import numpy as np
import tables

# Generate some data
x = np.random.random((100,100,100))

# Store "x" in a chunked array with level 5 BLOSC compression...
f = tables.openFile('test.hdf', 'w')
atom = tables.Atom.from_dtype(x.dtype)
filters = tables.Filters(complib='blosc', complevel=5)
ds = f.createCArray(f.root, 'somename', atom, x.shape, filters=filters)
ds[:] = x
f.close()
</snippet></ROW><ROW><id>8843489</id><snippet>pytables</snippet></ROW><ROW><id>8843503</id><snippet>from lxml import etree
from cStringIO import StringIO

xml = """&lt;foo&gt;&lt;bar/&gt; baz!&lt;/foo&gt;"""

# parse from string
etree.fromstring(xml)

# parse from file-like; in this case, StringIO
s = StringIO(xml)
etree.parse(s)

# parse from URL
etree.parse("http://example.com/somefile.xml")
</snippet></ROW><ROW><id>8843689</id><snippet>id, provider_id, title = row[0], row[2], row[4]
cursor.execute("INSERT INTO vendor_id VALUES (%s, %s, %s)", id, provider_id, title)
</snippet></ROW><ROW><id>8843689</id><snippet>cursor.execute("INSERT INTO vendor_id VALUES (%s, %s, %s)", (id, provider_id, title))
cursor.execute("INSERT INTO vendor_id VALUES (?, ?, ?)", (id, provider_id, title))
</snippet></ROW><ROW><id>8843692</id><snippet>dst= collections.defaultdict( list )
src= collections.defaultdict( list )
for k in original:
    for addr in original[k]['ip.dst']:
        dst[addr].append( k )
    for addr in original[k]['ip.src']:
        src[addr].append( k )
</snippet></ROW><ROW><id>8843692</id><snippet>dst[addr]</snippet></ROW><ROW><id>8843692</id><snippet>src[addr]</snippet></ROW><ROW><id>8843863</id><snippet>BaseComponableMeta</snippet></ROW><ROW><id>8843863</id><snippet>from itertools import chain

class Meta1(type):
    def __new__(metacls, name, bases, dct):
        print name
        return type.__new__(metacls, name, bases, dct)

class BaseComponableMeta(type):
    def __new__(metacls, *args, **kw):
        return metacls.__superclass.__new__(metacls, *args, **kw)

class ComponentMeta(object):
    def __init__(self, metaclass):
        self.metaclass = metaclass
    def __call__(self, name, bases,dct):
        #retrieves the deepest previous metaclass in the object hierarchy
        bases_list = sorted ((cls for cls in chain(*(base.mro() for base in bases)))
        , key=lambda s: len(type.mro(s.__class__)))   
        previous_metaclass = bases_list[-1].__class__
        # Adds the "__superclass" attribute to the metaclass, so that it can call
        # its bases:
        metaclass_dict = dict(self.metaclass.__dict__).copy()
        new_metaclass_name = self.metaclass.__name__ 
        metaclass_dict["_%s__superclass" % new_metaclass_name] = previous_metaclass
        #dynamicaly generates a new metaclass for this class:
        new_metaclass = type(new_metaclass_name, (previous_metaclass, ), metaclass_dict)
        return new_metaclass(name, bases, dct)

# From here on, example usage:

class ComponableMeta(BaseComponableMeta):
    pass

class NewComponableMeta_1(BaseComponableMeta):
    def __new__(metacls, *args):
        print "Overriding the previous metaclass part 1"
        return metacls.__superclass.__new__(metacls, *args)

class NewComponableMeta_2(BaseComponableMeta):
    def __new__(metacls, *args):
        print "Overriding the previous metaclass part 2"
        return metacls.__superclass.__new__(metacls, *args)

class A(object):
    __metaclass__ = Meta1


class B(A):
    __metaclass__ = ComponentMeta(ComponableMeta)

# trying multiple inheritance, and subclassing the metaclass once:
class C(B, A):
    __metaclass__ = ComponentMeta(NewComponableMeta_1)

# Adding a third metaclass to the chain:
class D(C):
    __metaclass__ = ComponentMeta(NewComponableMeta_2)

# class with a "do nothing" metaclass, which calls its bases metaclasses:  
class E(D):
    __metaclass__ = ComponentMeta(ComponableMeta)
</snippet></ROW><ROW><id>8843878</id><snippet>import fabric.api as fab
from fabric.network import disconnect_all
from contextlib import contextmanager

@context_manager
def ssh(settings):
    with settings:
         try:
            yield
         finally:
            disconnect_all()

def hostname(request, host='somehost', user='someuser', pw='secret'):  
    with ssh(fab.settings(host_string=host, user=user, password=pw)):
         return fab.run('hostname')
</snippet></ROW><ROW><id>8843942</id><snippet>%module test

%{
#include &lt;vector&gt;
%}

%include "std_vector.i"
%template(DoubleVector) std::vector&lt;double&gt;;
</snippet></ROW><ROW><id>8843942</id><snippet>DoubleVector</snippet></ROW><ROW><id>8843942</id><snippet>%extend</snippet></ROW><ROW><id>8843942</id><snippet>%extend std::vector&lt;double&gt; {
  void bar() {
    // don't for get to #include &lt;iostream&gt; where you include vector:
    std::cout &lt;&lt; "Hello from bar" &lt;&lt; std::endl;       
  }
}
</snippet></ROW><ROW><id>8843942</id><snippet>%pythoncode</snippet></ROW><ROW><id>8843942</id><snippet>%pythoncode %{
def foo (self):
        print "Hello from foo"

DoubleVector.foo = foo
%}
</snippet></ROW><ROW><id>8843942</id><snippet>Python 2.6.7 (r267:88850, Aug 11 2011, 12:16:10) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; d = test.DoubleVector()
&gt;&gt;&gt; d.foo()
Hello from foo
&gt;&gt;&gt; d.bar()
Hello from bar
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8843944</id><snippet>ax.set_axis_off()
</snippet></ROW><ROW><id>8844088</id><snippet>pip freeze -l &gt; requirements.txt
</snippet></ROW><ROW><id>8844088</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>8844177</id><snippet>choices</snippet></ROW><ROW><id>8844177</id><snippet>choices</snippet></ROW><ROW><id>8844177</id><snippet>choices</snippet></ROW><ROW><id>8844177</id><snippet>choices = [("a","aaaa"), ("s", "ssssssssss"), ("d", "ddddddddd")]
</snippet></ROW><ROW><id>8844508</id><snippet>pymssql</snippet></ROW><ROW><id>8844508</id><snippet>testQuery = """
CREATE TABLE #TEST (
[name] varchar(256)
,[age] int )

INSERT INTO #TEST
values ('Mike', 12)
,('someone else', 904)

"""

conn = pymssql.connect(host=sqlServer, user=sqlID, password=sqlPwd, \
    database=sqlDB) ## obviously setting up proper variables here...
conn.autocommit(1)
cur = conn.cursor()
cur.execute(testQuery)
cur.execute("SELECT * FROM #TEST")
tmp = cur.fetchone()
tmp
</snippet></ROW><ROW><id>8844508</id><snippet>('Mike', 12)
</snippet></ROW><ROW><id>8844508</id><snippet>testQuery = """
CREATE TABLE #TEST (
[name] varchar(256)
,[age] int )

INSERT INTO #TEST
values ('Mike', 12)
,('someone else', 904)

SELECT * FROM #TEST

"""

conn = pymssql.connect(host=sqlServer, user=sqlID, password=sqlPwd, \
    database=sqlDB) ## obviously setting up proper variables here...
conn.autocommit(1)
cur = conn.cursor()
cur.execute(testQuery)
tmp = cur.fetchone()
tmp
</snippet></ROW><ROW><id>8844508</id><snippet>pymssql.OperationalError: No data available.</snippet></ROW><ROW><id>8844508</id><snippet>cur.execute(...)</snippet></ROW><ROW><id>8844508</id><snippet>cur.execute()</snippet></ROW><ROW><id>8844508</id><snippet>cur.execute()</snippet></ROW><ROW><id>8844508</id><snippet>pymssql</snippet></ROW><ROW><id>8844574</id><snippet>pig mypigscript.pig ...
mkdir /tmp/pigout/
hadoop fs -get output/part* /tmp/pigout/
cat /tmp/pigout/* | python mypostprocessing.py
</snippet></ROW><ROW><id>8845063</id><snippet>!file.f
! This is a fortran code

!Parameters
alpha = %(alpha)s
beta = %(beta)s
</snippet></ROW><ROW><id>8845063</id><snippet>template = open("fortram_template.for", "rt").read()
data = {"alpha": 0.5, "beta": 100}

with open("fortram_1.for", "wt") as output:
    output.write (template % data)
</snippet></ROW><ROW><id>8845080</id><snippet>ZipFile.namelist()</snippet></ROW><ROW><id>8845080</id><snippet>zip.open('filename_you_discover')</snippet></ROW><ROW><id>8846368</id><snippet>from selenium import webdriver 
from selenium.common.exceptions import NoSuchElementException 
from selenium.webdriver.common.keys import Keys

browser = webdriver.Firefox() # Get local session of firefox 
browser.get(yoursite) # Load page 
elem = browser.find_element_by_name("email") # Find the query box 
elem.send_keys(email) 

ps = browser.find_element_by_name("password") # Find the query box 
ps.send_keys(passwd + Keys.RETURN)
</snippet></ROW><ROW><id>8846660</id><snippet>  File "G:\Programming\Tests\wxThread_FTP_Funtion.py", line 126, in updateDisplay
    bytes_so_far, size = list
</snippet></ROW><ROW><id>8846660</id><snippet>list</snippet></ROW><ROW><id>8846660</id><snippet>bytes_so_far, size</snippet></ROW><ROW><id>8846660</id><snippet>too many values to unpack</snippet></ROW><ROW><id>8846660</id><snippet>list</snippet></ROW><ROW><id>8846660</id><snippet>bytes_so_far, size = list</snippet></ROW><ROW><id>8846660</id><snippet>wx.CallAfter(Publisher().sendMessage, "update", "Thread finished!")
</snippet></ROW><ROW><id>8846660</id><snippet>bytes_so_far, size = msg.data
</snippet></ROW><ROW><id>8846660</id><snippet>msg.data</snippet></ROW><ROW><id>8846660</id><snippet>"Thread finished!"</snippet></ROW><ROW><id>8846660</id><snippet>too many values to unpack</snippet></ROW><ROW><id>8846660</id><snippet>need more than x values to unpack</snippet></ROW><ROW><id>8846770</id><snippet>x.p = lambda self, a, b, c=None: x.p(self, a, b)
</snippet></ROW><ROW><id>8846808</id><snippet>import sys
sys.path.append("..")
</snippet></ROW><ROW><id>8846808</id><snippet>__all__ = ['myfile']
</snippet></ROW><ROW><id>8846808</id><snippet>import myfile</snippet></ROW><ROW><id>8846808</id><snippet>python c:\mydir\myfile.py</snippet></ROW><ROW><id>8847168</id><snippet>list</snippet></ROW><ROW><id>8847168</id><snippet>dict</snippet></ROW><ROW><id>8847168</id><snippet>__dict__</snippet></ROW><ROW><id>8847168</id><snippet>__dict__</snippet></ROW><ROW><id>8847772</id><snippet>c = chars.charAt(ind);
</snippet></ROW><ROW><id>8847808</id><snippet>add</snippet></ROW><ROW><id>8847808</id><snippet>from celery.decorators import task

@task
def add():
    pass
</snippet></ROW><ROW><id>8847808</id><snippet>tasks.py</snippet></ROW><ROW><id>8847820</id><snippet>python -O *.py
</snippet></ROW><ROW><id>8847820</id><snippet>for /f in %x in (*.py) do python -O "%x"
</snippet></ROW><ROW><id>8847840</id><snippet>test_task</snippet></ROW><ROW><id>8847840</id><snippet>main</snippet></ROW><ROW><id>8847840</id><snippet>test_task</snippet></ROW><ROW><id>8847936</id><snippet>get_integration</snippet></ROW><ROW><id>8847936</id><snippet>pay_pal = get_integration("pay_pal", test_mode=False)</snippet></ROW><ROW><id>8847936</id><snippet>PAYPAL_TEST</snippet></ROW><ROW><id>8848171</id><snippet>make_key_set</snippet></ROW><ROW><id>8848171</id><snippet>return set(key(line.lower()) for line in open(file_path)
</snippet></ROW><ROW><id>8848171</id><snippet>filtered_lines</snippet></ROW><ROW><id>8848171</id><snippet>key_set</snippet></ROW><ROW><id>8848171</id><snippet>return (line for line in open(file_path1) if key(line.lower()) not in key_set) 
</snippet></ROW><ROW><id>8848222</id><snippet>((foo,bar),)</snippet></ROW><ROW><id>8848222</id><snippet>(foo, bar)</snippet></ROW><ROW><id>8848254</id><snippet>void foo();
</snippet></ROW><ROW><id>8848254</id><snippet>%module test

%{
#include "test.h"
#include &lt;iostream&gt;
%}

%rename (foo) foo_safe;
%inline %{
  void foo_safe() {
    std::cout &lt;&lt; "Hello world" &lt;&lt; std::endl;
    foo(); // Calls the foo() from test.h, as you'd hope
  }
%}
</snippet></ROW><ROW><id>8848254</id><snippet>%include</snippet></ROW><ROW><id>8848254</id><snippet>%module test

%{
#include "test.h"
#include &lt;iostream&gt;
%}

%rename (unsafe_foo) foo;    
%include "test.h"

%rename (foo) foo_safe;    
%inline %{
  void foo_safe() {
    std::cout &lt;&lt; "Hello world" &lt;&lt; std::endl;
    foo();
  }
%}
</snippet></ROW><ROW><id>8848254</id><snippet>foo</snippet></ROW><ROW><id>8848254</id><snippet>unsafe_foo</snippet></ROW><ROW><id>8848254</id><snippet>%ignore</snippet></ROW><ROW><id>8848254</id><snippet>unsafe_ignore</snippet></ROW><ROW><id>8848254</id><snippet>%module test

%{
#include "test.h"
#include &lt;iostream&gt;
%}

%rename (foo) foo_safe;    
%inline %{
  void foo_safe() {
    std::cout &lt;&lt; "Hello world" &lt;&lt; std::endl;
    foo();
  }
%}

%ignore foo;    
%include "test.h"
</snippet></ROW><ROW><id>8848254</id><snippet>pythonprepend</snippet></ROW><ROW><id>8848254</id><snippet>%feature("pythonprepend") foo() %{
   print "hello world"
   # check args and raise possibly 
%}
</snippet></ROW><ROW><id>8848254</id><snippet>%exception</snippet></ROW><ROW><id>8848254</id><snippet>%exception inplace {
   // Check args and possibly throw
   $action
}
</snippet></ROW><ROW><id>8848254</id><snippet>$action</snippet></ROW><ROW><id>8848336</id><snippet>len(s)</snippet></ROW><ROW><id>8848336</id><snippet>&gt;&gt;&gt; s = "hello"
&gt;&gt;&gt; s[3]
'l'
&gt;&gt;&gt; s[5]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
IndexError: string index out of range
&gt;&gt;&gt; s[0]
'h'
&gt;&gt;&gt; s[-1]
'o'
&gt;&gt;&gt; s[-5]
'h'
&gt;&gt;&gt; s[-6]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
IndexError: string index out of range
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8848350</id><snippet>URLFetch</snippet></ROW><ROW><id>8848350</id><snippet>grep</snippet></ROW><ROW><id>8848401</id><snippet>QtDesigner</snippet></ROW><ROW><id>8848401</id><snippet>.ui</snippet></ROW><ROW><id>8848401</id><snippet>.py</snippet></ROW><ROW><id>8848401</id><snippet>.ui</snippet></ROW><ROW><id>8848401</id><snippet>.py</snippet></ROW><ROW><id>8848545</id><snippet>&lt;script...&gt;
    myJsVar = "{{ myDjangoVar }}"
&lt;/script&gt;
</snippet></ROW><ROW><id>8848549</id><snippet>ElementTree</snippet></ROW><ROW><id>8848549</id><snippet>Element</snippet></ROW><ROW><id>8848549</id><snippet>ElementTree.find()</snippet></ROW><ROW><id>8848549</id><snippet>getroot().find()</snippet></ROW><ROW><id>8848549</id><snippet>getroot()</snippet></ROW><ROW><id>8848959</id><snippet>def matcher (l1, l2):
    if (l1 == []):
        return (l2 == [] or l2 == ['*'])
    if (l2 == [] or l2[0] == '*'):
        return matcher(l2, l1)
    if (l1[0] == '*'):
        return (matcher(l1, l2[1:]) or matcher(l1[1:], l2))
    if (l1[0] == l2[0]):
        return matcher(l1[1:], l2[1:])
    else:
        return False
</snippet></ROW><ROW><id>8849115</id><snippet>import datetime
obj.email_token_expiry = datetime.datetime.now()+datetime.timedelta(hours=24)
</snippet></ROW><ROW><id>8849128</id><snippet>try:
    if ...: return
    ...
    if ...: return
    ...
finally:
    #Code to be executed on every return path (including exceptions) here
</snippet></ROW><ROW><id>8849278</id><snippet>print token
</snippet></ROW><ROW><id>8849278</id><snippet>print temp
</snippet></ROW><ROW><id>8849416</id><snippet>sum(a[0] for a in my_list)
</snippet></ROW><ROW><id>8849448</id><snippet>./manage.py runserver</snippet></ROW><ROW><id>8849448</id><snippet>print token</snippet></ROW><ROW><id>8849448</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>8849524</id><snippet>FileCookieJar</snippet></ROW><ROW><id>8849524</id><snippet>.save</snippet></ROW><ROW><id>8849524</id><snippet>MozillaCookieJar</snippet></ROW><ROW><id>8849524</id><snippet>LWPCookieJar</snippet></ROW><ROW><id>8849731</id><snippet>import xml.etree.cElementTree as ET
# import lxml.etree as ET   # also works

content = '''\
&lt;abc&gt;
    &lt;cd&gt;text1&lt;/cd&gt;
    &lt;cd&gt;text2&lt;/cd&gt;
    &lt;ef&gt;text3&lt;/ef&gt;
    &lt;ef&gt;text4&lt;/ef&gt;
&lt;/abc&gt;'''

doc = ET.fromstring(content)
texts = (x.text for x in doc)
print(zip(*zip(*[texts]*2)))
</snippet></ROW><ROW><id>8849731</id><snippet>[('text1', 'text3'), ('text2', 'text4')]
</snippet></ROW><ROW><id>8849731</id><snippet>In [8]: [x.text for x in doc]
Out[8]: ['text1', 'text2', 'text3', 'text4']
</snippet></ROW><ROW><id>8849731</id><snippet>zip(*[iter]*2)</snippet></ROW><ROW><id>8849731</id><snippet>In [11]: zip(*[texts]*2)
Out[11]: [('text1', 'text2'), ('text3', 'text4')]
</snippet></ROW><ROW><id>8849731</id><snippet>In [14]: zip(*zip(*[texts]*2))
Out[14]: [('text1', 'text3'), ('text2', 'text4')]
</snippet></ROW><ROW><id>8849771</id><snippet>def join_with_tab(iterable):
    r"""
    &gt;&gt;&gt; join_with_tab(['1', '2'])
    '1\t2'
    """

    return '\t'.join(iterable)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>8849804</id><snippet>python-dateutil</snippet></ROW><ROW><id>8849804</id><snippet>django-storages</snippet></ROW><ROW><id>8849804</id><snippet>python-dateutil</snippet></ROW><ROW><id>8849804</id><snippet>iter() returned non-iterator of type ‘_timelex’
</snippet></ROW><ROW><id>8849848</id><snippet>class UsersModelForm(forms.ModelForm):
    passwordrepeat = forms.PasswordInput()
    class Meta:
        model = Users

    def clean(self):
        cleaned_data = self.cleaned_data
        password = cleaned_data.get("password")
        passwordrepeat = cleaned_data.get("passwordrepeat")
        if password != passwordrepeat:
            raise forms.ValidationError("Passwords must match.")

        return cleaned_data
</snippet></ROW><ROW><id>8849850</id><snippet>newuser = userf.save(commit=False)
newuser.email_token = token
newuser.email_token_expiry = current_datetime + timedelta(1)
newuser.save()
</snippet></ROW><ROW><id>8850091</id><snippet>gtk.Label</snippet></ROW><ROW><id>8850091</id><snippet>gtk.Notebook</snippet></ROW><ROW><id>8850091</id><snippet>gtk.HBox</snippet></ROW><ROW><id>8850091</id><snippet>gtk.Label</snippet></ROW><ROW><id>8850091</id><snippet>gtk.Button</snippet></ROW><ROW><id>8850091</id><snippet>class Dash(gtk.Notebook):
...
    def defaultTab(self):
        self.append_page(tab.child,tab.header)
...
class Tab():
    def __init__(self):
        ...
        header = gtk.HBox()
        title_label = gtk.Label()
        image = gtk.Image()
        image.set_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
        close_button = gtk.Button()
        close_button.set_image(image)
        close_button.set_relief(gtk.RELIEF_NONE)
        self.connect(close_button, 'clicked', self.close_cb)

        header.pack_start(title_label,
                          expand=True, fill=True, padding=0)
        header.pack_end(close_button,
                        expand=False, fill=False, padding=0)
        header.show_all()
        self.header = header
        ...
</snippet></ROW><ROW><id>8850091</id><snippet>clicked</snippet></ROW><ROW><id>8850126</id><snippet>frame.Freeze()
try:
    # load all data
finally:
    frame.Thaw()
</snippet></ROW><ROW><id>8850409</id><snippet>i</snippet></ROW><ROW><id>8850409</id><snippet>for i in numberArray:
  print text + str(i)
</snippet></ROW><ROW><id>8850489</id><snippet>setup(
    name="mypkg", version="0.0.1",
    # etc etc blah blah blabh
    install_requires=["PIL"],
)
</snippet></ROW><ROW><id>8850547</id><snippet>if test.sound.name: print "I have a sound file"
else: print "no sound"
</snippet></ROW><ROW><id>8850547</id><snippet>FieldFile</snippet></ROW><ROW><id>8850547</id><snippet>bool(test.sound) == False</snippet></ROW><ROW><id>8850547</id><snippet>test.sound.name</snippet></ROW><ROW><id>8850622</id><snippet>{{ image.image.url }}</snippet></ROW><ROW><id>8850622</id><snippet>{{ image.image.path }}</snippet></ROW><ROW><id>8850622</id><snippet>{{ image }}</snippet></ROW><ROW><id>8850933</id><snippet>p</snippet></ROW><ROW><id>8850933</id><snippet>data</snippet></ROW><ROW><id>8850933</id><snippet>data</snippet></ROW><ROW><id>8850933</id><snippet>from dpkt.ip import IP, IP_PROTO_UDP
from dpkt.udp import UDP
ip = IP('E\x00\x00"\x00\x00\x00\x00@\x11r\xc0\x01\x02\x03\x04\x01\x02\x03\x04\x00o\x00\xde\x00\x0e\xbf5foobar')
#if ip.p == IP_PROTO_UDP:  # checking for protocol field in ip header
if type(ip.data) == UDP :  # checking of type of data that was recognized by dpkg
    udp = ip.data
    print udp.sport
else:
    print "Not UDP"
</snippet></ROW><ROW><id>8850976</id><snippet>from multiprocessing.dummy import list
</snippet></ROW><ROW><id>8850976</id><snippet>list</snippet></ROW><ROW><id>8850976</id><snippet>list</snippet></ROW><ROW><id>8850976</id><snippet>multiprocessing.dummy</snippet></ROW><ROW><id>8850976</id><snippet>list</snippet></ROW><ROW><id>8850976</id><snippet>a</snippet></ROW><ROW><id>8850976</id><snippet>b</snippet></ROW><ROW><id>8850976</id><snippet>list</snippet></ROW><ROW><id>8850976</id><snippet>__builtins__</snippet></ROW><ROW><id>8850976</id><snippet>powerful/__init__.py:
from powerfulinternals import PowerfulList as list
from simple.simpleinternals import Something as whoo

simple/__init__.py:
list = list
from simpleinternals import Something as whoo

application.py:
try:
  import powerful as api
else:
  import simple as api

mylist = api.list()
woot = api.whoo()
</snippet></ROW><ROW><id>8850976</id><snippet>list = list
</snippet></ROW><ROW><id>8850976</id><snippet>list</snippet></ROW><ROW><id>8850976</id><snippet>dict</snippet></ROW><ROW><id>8850976</id><snippet>manager = multiprocessing.dummy.Manager()
l = manager.list()
d = manager.dict()
</snippet></ROW><ROW><id>8850976</id><snippet>Manager</snippet></ROW><ROW><id>8850976</id><snippet>def Manager():
  return sys.modules[__name__]
</snippet></ROW><ROW><id>8850976</id><snippet>Manager.list = list</snippet></ROW><ROW><id>8851049</id><snippet>&gt;&gt;&gt; import wx
&gt;&gt;&gt; mod = dir(wx)
&gt;&gt;&gt; [item for item in mod if item.startswith('ICON_')]
['ICON_ASTERISK', 'ICON_ERROR', 'ICON_EXCLAMATION', 'ICON_HAND', 
 'ICON_INFORMATION', 'ICON_MASK', 'ICON_QUESTION', 'ICON_STOP', 'ICON_WARNING']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8851305</id><snippet>&gt;&gt;&gt; alist = [np.array([item, item+1]) for item in range(5)]
&gt;&gt;&gt; alist
[array([0, 1]), array([1, 2]), array([2, 3]), array([3, 4]), array([4, 5])]

&gt;&gt;&gt; np.array(alist)
array([[ 0,  1],
       [ 1,  2],
       [ 2,  3],
       [ 3,  4],
       [ 4,  5]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8851305</id><snippet>&gt;&gt;&gt; np.matrix(alist)
matrix([[ 0,  1],
        [ 1,  2],
        [ 2,  3],
        [ 3,  4],
        [ 4,  5]])
</snippet></ROW><ROW><id>8851842</id><snippet>__init__</snippet></ROW><ROW><id>8851842</id><snippet>class Whatever( object ):
    pass

w = Whatever()
w.new_attribute= "some value"
</snippet></ROW><ROW><id>8851842</id><snippet>new_attribute</snippet></ROW><ROW><id>8851842</id><snippet>&gt;&gt;&gt; w.__dict__
</snippet></ROW><ROW><id>8851880</id><snippet>from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://www.example.com')
element = browser.find_element_by_tag_name('h1')
assert element.text == 'Example Domains'
browser.quit()
</snippet></ROW><ROW><id>8852004</id><snippet>def perms(A):
    if len(A)==1:
        yield A
    for i in xrange(len(A)-1,-1,-1):
        for B in perms(A[:i]+A[i+1:]):
            yield B+A[i:i+1]
</snippet></ROW><ROW><id>8852004</id><snippet>for a in perms([1,2,3,4]):
    print a
</snippet></ROW><ROW><id>8852004</id><snippet>[1, 2, 3, 4]
[2, 1, 3, 4]
[1, 3, 2, 4]
[3, 1, 2, 4]
[2, 3, 1, 4]
[3, 2, 1, 4]
[1, 2, 4, 3]
[2, 1, 4, 3]
[1, 4, 2, 3]
[4, 1, 2, 3]
[2, 4, 1, 3]
[4, 2, 1, 3]
[1, 3, 4, 2]
[3, 1, 4, 2]
[1, 4, 3, 2]
[4, 1, 3, 2]
[3, 4, 1, 2]
[4, 3, 1, 2]
[2, 3, 4, 1]
[3, 2, 4, 1]
[2, 4, 3, 1]
[4, 2, 3, 1]
[3, 4, 2, 1]
[4, 3, 2, 1]
</snippet></ROW><ROW><id>8852195</id><snippet>flashvars</snippet></ROW><ROW><id>8852195</id><snippet>&lt;embed&gt;</snippet></ROW><ROW><id>8852195</id><snippet>mechanize</snippet></ROW><ROW><id>8852195</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>8852195</id><snippet>flashvars</snippet></ROW><ROW><id>8852195</id><snippet>&lt;embed&gt;</snippet></ROW><ROW><id>8852195</id><snippet>  br = mechanize.Browser()
  # Browser options
  br.set_handle_equiv(True)
  br.set_handle_redirect(True)
  br.set_handle_referer(True)
  br.set_handle_robots(False)
  # Follows refresh 0 but not hangs on refresh &gt; 0
  br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
  # User-Agent (this is cheating, ok?)
  br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]
  br.open('%s?v=%s' % (YOUTUBE_URL, vidId))
  soup = BeautifulSoup.BeautifulSoup(br.response().read())
  flashVars = urllib2.urlparse.parse_qs(soup.find('embed').get('flashvars'))
  # Return the first second video source URL
  return flashVars['fmt_stream_map'][0].split('|')[1]
</snippet></ROW><ROW><id>8852492</id><snippet>import numpy as np
x=np.array([[7,8,5],[3,5,7]],np.int32)
</snippet></ROW><ROW><id>8852902</id><snippet>class ItemWarehouse(Base):
    # version-1:
    __tablename__ = 'item_warehouse'
    __table_args__ = (PrimaryKeyConstraint('item_id', 'warehouse_id', name='ItemWarehouse_PK'),)
    # version-2:
    #__table_args__ = (UniqueConstraint('item_id', 'warehouse_id', name='ItemWarehouse_PK'),)
    #id = Column(Integer, primary_key=True, autoincrement=True)

    # other columns
    item_id = Column(Integer, ForeignKey('items.id'), nullable=False)
    warehouse_id = Column(Integer, ForeignKey('warehouses.id'), nullable=False)
    quantity = Column(Integer, default=0)
</snippet></ROW><ROW><id>8852902</id><snippet>(item_id, warehouse_id)</snippet></ROW><ROW><id>8852902</id><snippet>version-1</snippet></ROW><ROW><id>8852902</id><snippet>version-2</snippet></ROW><ROW><id>8852902</id><snippet>w = Warehouse(...)
i = Item(name="kindle", price=...)
iw = ItemWarehouse(quantity=50)
iw.item = i
w.items.append(i)
</snippet></ROW><ROW><id>8852902</id><snippet>w = Warehouse(...)
i = Item(name="kindle", price=...)
w[i] = 50 # sets the quantity to 50 of item _i_ in warehouse _w_
i[w] = 50 # same as above, if you configure it symmetrically
</snippet></ROW><ROW><id>8852961</id><snippet>r'C:\a\foo'</snippet></ROW><ROW><id>8852961</id><snippet>'C:/a/foo'</snippet></ROW><ROW><id>8852961</id><snippet>os.path</snippet></ROW><ROW><id>8852961</id><snippet>os.path</snippet></ROW><ROW><id>8853029</id><snippet>module extendable_list

implicit none

type result_type
  double precision,allocatable :: vector(:)
end type

type list_type
  integer :: n
  type(result_type),allocatable :: result(:)
end type

contains

subroutine append(list,r)
  type(list_type),intent(inout) :: list
  double precision,intent(in)   :: r(:)
  type(result_type),allocatable :: temporary(:)
  integer :: i
  if(.not.allocated(list%result)) then
    allocate(list%result(10))
    list%n=0
  else if(list%n &gt;= size(list%result)) then
    allocate(temporary(2*list%n))
    do i=1,list%n
      call move_alloc(list%result(i)%vector,temporary(i)%vector)
    enddo
    call move_alloc(temporary,list%result)
  endif
  list%n=list%n+1
  allocate(list%result(list%n)%vector(size(r)))
  list%result(list%n)%vector=r
end subroutine

end module

program main
  use extendable_list
  implicit none
  type(list_type) :: list
  integer :: i
  do i=1,10
    call append(list,(/1.d0,3.d0/))
    call append(list,(/7.d0,-9.d0,45.d0/))
  enddo
  do i=1,list%n
    write(*,*) list%result(i)%vector
  enddo
end program
</snippet></ROW><ROW><id>8853029</id><snippet>coul@b10p5001:~/test$ ifort t65.f90
coul@b10p5001:~/test$ ./a.out
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
   1.00000000000000        3.00000000000000     
   7.00000000000000       -9.00000000000000        45.0000000000000     
</snippet></ROW><ROW><id>8853111</id><snippet>kw1 = some calculation here
kw2 = some calculation here
kw3 = some calculation here
some_func(1,
    2,
    kw1=kw1,
    kw2=kw2,
    kw3=kw3)
</snippet></ROW><ROW><id>8853416</id><snippet>O(n)</snippet></ROW><ROW><id>8853416</id><snippet>value_key.setdefault(item,[]).append(index)</snippet></ROW><ROW><id>8853416</id><snippet>try..except</snippet></ROW><ROW><id>8853416</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>8853416</id><snippet>pos_value</snippet></ROW><ROW><id>8853416</id><snippet>value_key</snippet></ROW><ROW><id>8853416</id><snippet>sym_value</snippet></ROW><ROW><id>8853416</id><snippet>pos_value</snippet></ROW><ROW><id>8853416</id><snippet>sym_value</snippet></ROW><ROW><id>8853416</id><snippet>value_key</snippet></ROW><ROW><id>8853416</id><snippet>value_key</snippet></ROW><ROW><id>8853416</id><snippet>pos_value</snippet></ROW><ROW><id>8853416</id><snippet>sym_value</snippet></ROW><ROW><id>8853416</id><snippet>pos_value</snippet></ROW><ROW><id>8853416</id><snippet>sym_value</snippet></ROW><ROW><id>8853416</id><snippet>seen = set()</snippet></ROW><ROW><id>8853416</id><snippet>sym_value</snippet></ROW><ROW><id>8853416</id><snippet>len(key_pairs)</snippet></ROW><ROW><id>8853416</id><snippet>key_pairs</snippet></ROW><ROW><id>8853416</id><snippet>set</snippet></ROW><ROW><id>8853416</id><snippet>num_pairs</snippet></ROW><ROW><id>8853416</id><snippet>num_pairs += 2*len(value_key[pos_value])*len(value_key[sym_value])
</snippet></ROW><ROW><id>8853416</id><snippet>pos_value == sym_value</snippet></ROW><ROW><id>8853416</id><snippet>def complementary_pairs_number(complementary_diff, values):
    value_key = {} # dictionary storing indexes indexed by values
    for index, item in enumerate(values):
        value_key.setdefault(item,[]).append(index)
    # print(value_key)
    num_pairs = 0
    seen = set()
    for pos_value in value_key: 
        if pos_value in seen: continue
        sym_value = complementary_diff - pos_value
        seen.add(sym_value)
        if sym_value in value_key: 
            # print(pos_value, sym_value, value_key[pos_value],value_key[sym_value])
            n = len(value_key[pos_value])*len(value_key[sym_value])
            if pos_value == sym_value:
                num_pairs += n
            else:
                num_pairs += 2*n
    return num_pairs
</snippet></ROW><ROW><id>8853472</id><snippet>if 'training' in request.POST:
</snippet></ROW><ROW><id>8853472</id><snippet>if request.POST.get('training'):
</snippet></ROW><ROW><id>8853590</id><snippet>user = zip(u, (hitratio for area, hitratio in nameh_sorted))
</snippet></ROW><ROW><id>8853637</id><snippet>lxml</snippet></ROW><ROW><id>8853637</id><snippet>etree</snippet></ROW><ROW><id>8853637</id><snippet>from lxml import etree
tree = etree.parse(yourfile)
lucky = tree.xpath('/html/body/center/span/center/div[2]/form/div[2]/div[3]/center/input[2]')
</snippet></ROW><ROW><id>8854054</id><snippet>__init__</snippet></ROW><ROW><id>8854054</id><snippet>__init__</snippet></ROW><ROW><id>8854054</id><snippet>class Person(object):
    def __init__(self, name, phone):
        self.name = name
        self.phone = phone
class Teenager(Person):
    def __init__(self, name, phone, website):
        Person.__init__(self, name, phone)
        self.website=website
</snippet></ROW><ROW><id>8854054</id><snippet>Person.__init__(self, name, phone)
</snippet></ROW><ROW><id>8854054</id><snippet>super(Teenager, self).__init__(name, phone)
</snippet></ROW><ROW><id>8854054</id><snippet>instance.method(args)</snippet></ROW><ROW><id>8854054</id><snippet>Class.method(instance, args)</snippet></ROW><ROW><id>8854054</id><snippet>super</snippet></ROW><ROW><id>8854054</id><snippet>object</snippet></ROW><ROW><id>8854054</id><snippet>Person</snippet></ROW><ROW><id>8854054</id><snippet>super</snippet></ROW><ROW><id>8854054</id><snippet>__init__</snippet></ROW><ROW><id>8854054</id><snippet>self</snippet></ROW><ROW><id>8854054</id><snippet>Teenager</snippet></ROW><ROW><id>8854167</id><snippet>subprocess</snippet></ROW><ROW><id>8854167</id><snippet>stdout</snippet></ROW><ROW><id>8854167</id><snippet>stderr</snippet></ROW><ROW><id>8854167</id><snippet>Popen</snippet></ROW><ROW><id>8854167</id><snippet>stdout</snippet></ROW><ROW><id>8854167</id><snippet>stderr</snippet></ROW><ROW><id>8854167</id><snippet>os.system</snippet></ROW><ROW><id>8854467</id><snippet>print</snippet></ROW><ROW><id>8854467</id><snippet>__str__</snippet></ROW><ROW><id>8854467</id><snippet>print</snippet></ROW><ROW><id>8854467</id><snippet>str(my_object_instance)</snippet></ROW><ROW><id>8854467</id><snippet>&gt;&gt;&gt; class A:                                                                                        
...   def __str__(self):                                                                            
...     return "I am an instance of A"                                                              
...                                                                                                 
&gt;&gt;&gt; a_inst = A()                                                                                    
&gt;&gt;&gt; print a_inst                                                                                    
I am an instance of A                                                                               
&gt;&gt;&gt;  
</snippet></ROW><ROW><id>8854570</id><snippet>import os.path

visited = set()
for path in path_list:
    head, tail = os.path.split(path)
    while head and tail:
        if head in visited:
            break
        head, tail = os.path.split(head)
    else:
        process(path)
        visited.add(path)
</snippet></ROW><ROW><id>8854570</id><snippet>path_list</snippet></ROW><ROW><id>8855295</id><snippet>def logger(foo):
    def fn():
        try:
            print foo()
        except Exception as e:
            print e
    return fn
</snippet></ROW><ROW><id>8855373</id><snippet>Python 3.2.2 (default, Sep  5 2011, 22:09:30) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; λ=1.54
&gt;&gt;&gt; print(λ)
1.54
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>8855408</id><snippet>title_re = re.compile('alt="(?P&lt;title&gt;[A-z]*)"')
</snippet></ROW><ROW><id>8855645</id><snippet>.astype</snippet></ROW><ROW><id>8855645</id><snippet>&gt;&gt;&gt; a = numpy.array([1, 2, 3, 4], dtype=numpy.float64)
&gt;&gt;&gt; a
array([ 1.,  2.,  3.,  4.])
&gt;&gt;&gt; a.astype(numpy.int64)
array([1, 2, 3, 4])
</snippet></ROW><ROW><id>8855660</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)

    def changeEvent(self, event):
        if event.type() == QtCore.QEvent.WindowStateChange:
            if self.windowState() &amp; QtCore.Qt.WindowMinimized:
                print('changeEvent: Minimised')
            elif event.oldState() &amp; QtCore.Qt.WindowMinimized:
                print('changeEvent: Normal/Maximised/FullScreen')
        QtGui.QWidget.changeEvent(self, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>8855947</id><snippet>from django.conf import settings; settings.MY_SETTING</snippet></ROW><ROW><id>8855947</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>8855947</id><snippet>ConfigParser</snippet></ROW><ROW><id>8856235</id><snippet>foo = decorator(foo)</snippet></ROW><ROW><id>8856235</id><snippet>self</snippet></ROW><ROW><id>8856235</id><snippet>seqLength</snippet></ROW><ROW><id>8856235</id><snippet>memoize</snippet></ROW><ROW><id>8856235</id><snippet>collatz</snippet></ROW><ROW><id>8856235</id><snippet>class memoize(object):
    '''memoize descriptor'''
    def __init__(self, func):
        self.func = func

    def __get__(self, obj, type=None):
        return self.memoize_inst(obj, self.func)

    class memoize_inst(object):
        def __init__(self, inst, fget):
            self.inst = inst
            self.fget = fget

            self.cache = {}

        def __call__(self, *args):
            # if cache hit, done
            if args in self.cache:
                return self.cache[args]
            # otherwise populate cache and return
            self.cache[args] = self.fget(self.inst, *args)
            return self.cache[args]
</snippet></ROW><ROW><id>8856265</id><snippet>import os
import tempfile

#define the location of 'mytemp' parent folder relative to the system temp
sysTemp = tempfile.gettempdir()
myTemp = os.path.join(sysTemp,'mytemp')

#You must make sure myTemp exists
if not os.path.exists(myTemp):
    os.makedirs(myTemp)

#now make your temporary sub folder
tempdir = tempfile.mkdtemp(suffix='foo',prefix='bar',dir=myTemp)

print tempdir
</snippet></ROW><ROW><id>8856310</id><snippet>sel = selection()
while sel != 0:
    input()
    if sel==1:
        ...
    sel = selection()
</snippet></ROW><ROW><id>8856387</id><snippet>echo('foo')</snippet></ROW><ROW><id>8856387</id><snippet>def echo(**kwargs):
    for name, value in kwargs.items():
        print name, value

foo = 7
echo(foo=foo)
</snippet></ROW><ROW><id>8856387</id><snippet>echo(foo)</snippet></ROW><ROW><id>8856387</id><snippet>inspect</snippet></ROW><ROW><id>8856387</id><snippet>import inspect
import re

def echo(arg):
    frame = inspect.currentframe()
    try:
        context = inspect.getframeinfo(frame.f_back).code_context
        caller_lines = ''.join([line.strip() for line in context])
        m = re.search(r'echo\s*\((.+?)\)$', caller_lines)
        if m:
            caller_lines = m.group(1)
        print caller_lines, arg
    finally:
        del frame

foo = 7
bar = 3
baz = 11
echo(foo)
echo(foo + bar)
echo((foo + bar)*baz/(bar+foo))
</snippet></ROW><ROW><id>8856387</id><snippet>foo 7
foo + bar 10
(foo + bar)*baz/(bar+foo) 11
</snippet></ROW><ROW><id>8856387</id><snippet>echo((foo + bar)*
      baz/(bar+foo))
</snippet></ROW><ROW><id>8856387</id><snippet>baz/(bar+foo)) 11
</snippet></ROW><ROW><id>8856551</id><snippet>def example():
    from one import test
    print test[1][5]
</snippet></ROW><ROW><id>8856551</id><snippet>#one.py
two.example(test)

#two.py
def example(test):
    print test[1][5]
</snippet></ROW><ROW><id>8856631</id><snippet>print "Hello%%20World%s" %"!"
</snippet></ROW><ROW><id>8856631</id><snippet>print "Hello%20World{0}".format("!")
</snippet></ROW><ROW><id>8856841</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = """ &lt;what you have above&gt; """
&gt;&gt;&gt; Soup = BeautifulSoup(html)
&gt;&gt;&gt; bullets = Soup.findAll('div', {'class': 'productDescriptionWrapper'})
&gt;&gt;&gt; ptags = bullets[0].findAll('p')
&gt;&gt;&gt; print ptags
[&lt;p&gt;A worm worth getting your hands dirty over. With over six feet of crawl space,      Playhut&amp;rsquo;s Wiggly Worm is a brightly colored and friendly play structure.
&lt;/p&gt;, &lt;p&gt;&lt;strong&gt;Intended for Indoor Use&lt;/strong&gt;&lt;/p&gt;]
&gt;&gt;&gt; print ptags[0].text
A worm worth getting your hands dirty over. With over six feet of crawl space, Playhut&amp;rsquo;s Wiggly Worm is a brightly colored and friendly play structure.
</snippet></ROW><ROW><id>8857040</id><snippet>Null</snippet></ROW><ROW><id>8857040</id><snippet>target = table.sql('select * where sales &lt; 1000.00')
</snippet></ROW><ROW><id>8857040</id><snippet>Null</snippet></ROW><ROW><id>8857040</id><snippet>target</snippet></ROW><ROW><id>8857207</id><snippet>    class DictionayModelForm(ModelForm):
        def __init__(self, *largs, **kwargs):
            super(DictionayModelForm, self).__init__(*largs, **kwargs)
            if self.instance and self.instance.pk is not None:
                for f in self.instance._meta.fields:
                    if isinstance(f, models.ForeignKey) and issubclass(f.rel.to, Dictionary):
                        model_field = self.fields[f.name]
                        value = getattr(self.instance, f.name, None)
                        if value and value not in model_field.choices:
                            model_field.queryset = Dictionary.objects.filter(Q(**f.rel.limit_choices_to) | Q(id = value.id))
</snippet></ROW><ROW><id>8857300</id><snippet>python | cat
</snippet></ROW><ROW><id>8857300</id><snippet>redis-cli | cat
</snippet></ROW><ROW><id>8857300</id><snippet>TERM=dumb redis-cli | cat
</snippet></ROW><ROW><id>8857353</id><snippet>DeviceLocation.objects.filter(timestamp__range=(time_from, time_now)).order_by('device', '-timestamp').distinct('device')
</snippet></ROW><ROW><id>8857353</id><snippet>'-timestamp'</snippet></ROW><ROW><id>8857582</id><snippet># Python interpreter from environment.
ENV_PYTHON="/sites/.virtualenvs/myproject/bin/python"

# How to call "manage.py celeryd_multi"
CELERYD_MULTI="$ENV_PYTHON $CELERYD_CHDIR/manage.py celeryd_multi"

# How to call "manage.py celeryctl"
CELERYCTL="$ENV_PYTHON $CELERYD_CHDIR/manage.py celeryctl"
</snippet></ROW><ROW><id>8857977</id><snippet>str.translate(table[, deletechars])</snippet></ROW><ROW><id>8857977</id><snippet>table</snippet></ROW><ROW><id>8857977</id><snippet>None</snippet></ROW><ROW><id>8857977</id><snippet>deletechars</snippet></ROW><ROW><id>8857977</id><snippet>s.translate(None, r"()\"'")
</snippet></ROW><ROW><id>8857977</id><snippet>&gt;&gt;&gt; "\"hello\" '(world)'".translate(None, r"()\"'")
'hello world'
&gt;&gt;&gt; "a'b c\"d e(f g)h i\\j".translate(None, r"()\"'")
'ab cd ef gh ij'
</snippet></ROW><ROW><id>8858026</id><snippet>os.rename()</snippet></ROW><ROW><id>8858026</id><snippet>shutil.move()</snippet></ROW><ROW><id>8858138</id><snippet>sys.ps1</snippet></ROW><ROW><id>8858138</id><snippet>sys.ps2</snippet></ROW><ROW><id>8858138</id><snippet>...</snippet></ROW><ROW><id>8858349</id><snippet>SimplePool</snippet></ROW><ROW><id>8858349</id><snippet>TConnectionManager</snippet></ROW><ROW><id>8858735</id><snippet># fetch.py
from cStringIO import StringIO
import gzip
import requests
# Called a 'tar' file but actually a gzip file. @#$%!!!
url = "http://example.com/data.tar.gz"
response = requests.get(url)

results = gzip.GzipFile(fileobj=StringIO(response.content))
</snippet></ROW><ROW><id>8859119</id><snippet>input_file = open('some_tab_separated_file.txt', 'r')
output_file = open('some_tab_separated_file.csv', 'w')
input_file.readline() # skip first line 
for line in input_file:
    (a, date, time, lon, lat, country) = line.strip().split('\t')
    output_file.write(','.join([lon, lat, country, date, time]) + '\n')
input_file.close()
output_file.close()
</snippet></ROW><ROW><id>8859168</id><snippet>class Tracker(object):
    def __init__(self):
        self.lst = trackable_type('lst', self, list)
        self.dct = trackable_type('dct', self, dict)
        self.revisions = {'lst': [], 'dct': []}


&gt;&gt;&gt; obj = Tracker()            # create an instance of Tracker
&gt;&gt;&gt; obj.lst.append(1)          # make some changes to list attribute
&gt;&gt;&gt; obj.lst.extend([2, 3])
&gt;&gt;&gt; obj.lst.pop()
3
&gt;&gt;&gt; obj.dct['a'] = 5           # make some changes to dict attribute
&gt;&gt;&gt; obj.dct.update({'b': 3})
&gt;&gt;&gt; del obj.dct['a']
&gt;&gt;&gt; obj.revisions              # check out revision history
{'lst': [[1], [1, 2, 3], [1, 2]], 'dct': [{'a': 5}, {'a': 5, 'b': 3}, {'b': 3}]}
</snippet></ROW><ROW><id>8859168</id><snippet>trackable_type()</snippet></ROW><ROW><id>8859168</id><snippet>def trackable_type(name, obj, base):
    def func_logger(func):
        def wrapped(self, *args, **kwargs):
            before = base(self)
            result = func(self, *args, **kwargs)
            after = base(self)
            if before != after:
                obj.revisions[name].append(after)
            return result
        return wrapped

    methods = (type(list.append), type(list.__setitem__))
    skip = set(['__iter__', '__len__', '__getattribute__'])
    class TrackableMeta(type):
        def __new__(cls, name, bases, dct):
            for attr in dir(base):
                if attr not in skip:
                    func = getattr(base, attr)
                    if isinstance(func, methods):
                        dct[attr] = func_logger(func)
            return type.__new__(cls, name, bases, dct)

    class TrackableObject(base):
        __metaclass__ = TrackableMeta

    return TrackableObject()
</snippet></ROW><ROW><id>8859168</id><snippet>list</snippet></ROW><ROW><id>8859168</id><snippet>dict</snippet></ROW><ROW><id>8859245</id><snippet>appstats_TZOFFSET = 0
</snippet></ROW><ROW><id>8859396</id><snippet>category</snippet></ROW><ROW><id>8859396</id><snippet>/(?P&lt;category&gt;\w+/feedback/$</snippet></ROW><ROW><id>8859396</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = Feedback

def my_view(request, category):
    form = MyForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            feedback = form.save(commit=False)
            feedback.category = category
            feedback.save()
            return http.HttpResponse("Thanks for posting!")
    return render(request, "mytemplate.html", {'form': form})

# urls.py
(r'^(?P&lt;category&gt;\w+)/feedback/$', 'my_view')

# user can visit dev/feedback or support/feedback and the feedback will be tagged appropriately
</snippet></ROW><ROW><id>8859396</id><snippet>def view_generator(model_class):
    class MyForm(forms.ModelForm):
         class Meta:
              model = model_class

    def my_view(request):
        form = MyForm(request.POST or None)
        if request.method == 'POST':
            if form.is_valid():
                form.save()
                return http.HttpResponse("Thanks for posting!")
        return render(request, "mytemplate.html", {'form': form})
    return my_view


# urls.py
from foo import view_generator

(r'^my_first_feedback_form', view_generator(Model1))
(r'^my_second_feedback_form', view_generator(Model2l))
</snippet></ROW><ROW><id>8859437</id><snippet>&gt;&gt;&gt; dict1 = {'topkey1': {'datetimes': [9,8], 'values': [7,6]}, 'topkey2': {'datetimes': [5,4], 'values': [3,2]}}
&gt;&gt;&gt; dict2 = {'topkey3': {'datetimes': [9,8], 'values': [7,6]}, 'topkey4': {'datetimes': [5,4], 'values': [3,2]}}
&gt;&gt;&gt; dictlist = [dict1, dict2]
&gt;&gt;&gt;  new_dict = {key: value for item in dictlist for key, value in item.items()}
&gt;&gt;&gt; new_dict
{'topkey4': {'values': [3, 2], 'datetimes': [5, 4]}, 'topkey1': {'values': [7, 6], 'datetimes': [9, 8]}, 'topkey3': {'values': [7, 6], 'datetimes': [9, 8]}, 'topkey2': {'values': [3, 2], 'datetimes': [5, 4]}}
</snippet></ROW><ROW><id>8859437</id><snippet>&gt;&gt;&gt; dict1 = {'topkey1': {'datetimes': [9,8], 'values': [7,6]}, 'topkey2': {'datetimes': [5,4], 'values': [3,2]}}
&gt;&gt;&gt; dict2 = {'topkey1': {'datetimes': [29,28], 'values': [17,16]}, 'topkey2': {'datetimes': [35,34], 'values': [43,42]}}
&gt;&gt;&gt; for key, value in dict2.items():
...     for subkey, subvalue in value.items():
...         dict1[key][subkey] = dict1[key][subkey] + subvalue
...    
&gt;&gt;&gt; dict1
{'topkey1': {'values': [7, 6, 17, 16], 'datetimes': [9, 8, 29, 28]}, 'topkey2': {'values': [3, 2, 43, 42], 'datetimes': [5, 4, 35, 34]}}
</snippet></ROW><ROW><id>8859494</id><snippet>select()</snippet></ROW><ROW><id>8859494</id><snippet>NoneType</snippet></ROW><ROW><id>8859494</id><snippet>select()</snippet></ROW><ROW><id>8859564</id><snippet>ChoiceField</snippet></ROW><ROW><id>8859564</id><snippet>select</snippet></ROW><ROW><id>8859564</id><snippet>class CronForm(forms.Form):
    days = forms.ChoiceField(choices=[(x, x) for x in range(1, 32)])
</snippet></ROW><ROW><id>8859667</id><snippet>end_lat = math.radians(end_long)</snippet></ROW><ROW><id>8859667</id><snippet>end_lat = math.radians(end_lat)</snippet></ROW><ROW><id>8859667</id><snippet>atan2()</snippet></ROW><ROW><id>8859667</id><snippet>delta(latitude)</snippet></ROW><ROW><id>8859667</id><snippet>from math import radians, sqrt, sin, cos, atan2

def geocalc(lat1, lon1, lat2, lon2):
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon1 - lon2

    EARTH_R = 6372.8

    y = sqrt(
        (cos(lat2) * sin(dlon)) ** 2
        + (cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dlon)) ** 2
        )
    x = sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(dlon)
    c = atan2(y, x)
    return EARTH_R * c



&gt;&gt;&gt; geocalc(36.12, -86.67, 33.94, -118.40)
2887.2599506071115
&gt;&gt;&gt; geocalc(-6.508, 55.071, -8.886, 51.622)
463.09798886300376
&gt;&gt;&gt; geocalc(55.071, -6.508, 51.622, -8.886)
414.7830891822618
</snippet></ROW><ROW><id>8859826</id><snippet>copy</snippet></ROW><ROW><id>8859826</id><snippet>deepcopy</snippet></ROW><ROW><id>8859826</id><snippet>__copy__</snippet></ROW><ROW><id>8859826</id><snippet>__deepcopy__</snippet></ROW><ROW><id>8859826</id><snippet>def mycopy(obj):
    if isinstance(obj, list):
        return [mycopy(i) for i in obj]
    if isinstance(obj, tuple):
        return tuple(mycopy(i) for i in obj)
    if isinstance(obj, dict):
        return dict(mycopy(i) for i in obj.iteritems())
    return obj
</snippet></ROW><ROW><id>8860222</id><snippet>web2py Web Framework
Created by Massimo Di Pierro, Copyright 2007-2011
Version 1.99.4 (2011-12-14 14:46:14) stable
Database drivers available: SQLite3, pymysql, PostgreSQL
Starting hardcron...
</snippet></ROW><ROW><id>8860227</id><snippet>from simpleparse.parser import Parser

grammar = r"""
&lt;space&gt;      := [ \t]
&lt;newline&gt;    := '\n'
&lt;identifier&gt; := [A-Za-z_],[A-Za-z0-9z_]*
match        := newline,identifier,space+,'WORD'
&lt;junk&gt;       := newline*,identifier,space+,-'WORD',(identifier/space)*
data         := (match/junk)*
"""

parser = Parser(grammar, 'data')

data = 'some junk\nvariable1 WORD\nvariable2 some ' +\
       'junk\nvariable3 WORD\nvariable4 some other ' +\
       'junk\nvariable5 WORD'

(start, matches, stop) = parser.parse(data)

print [ start for name, start, stop, other in matches ]
</snippet></ROW><ROW><id>8860227</id><snippet>[9, 44, 85]
</snippet></ROW><ROW><id>8860330</id><snippet>agenda=open("agenda.txt","w+")
</snippet></ROW><ROW><id>8860330</id><snippet>agenda=open("agenda.txt","a")
</snippet></ROW><ROW><id>8860428</id><snippet>str(intersect(a, b)).replace('(', '').replace(')', '')
</snippet></ROW><ROW><id>8860428</id><snippet>str(intersect(a, b)).translate(None, '()')
</snippet></ROW><ROW><id>8860500</id><snippet>ModelForm</snippet></ROW><ROW><id>8860500</id><snippet>__init__</snippet></ROW><ROW><id>8860500</id><snippet>self.fields['myfield']</snippet></ROW><ROW><id>8860500</id><snippet>class ChildForm(BaseForm):
    def __init__(self, *args, **kwargs):
        super(ChildForm, self).__init__(*args, **kwargs)
        self.fields['userid'].required = False
</snippet></ROW><ROW><id>8860527</id><snippet>class</snippet></ROW><ROW><id>8860527</id><snippet>class Foo {
    String bar;
    public Foo() {
        this.bar = "xyz";
    }
}
</snippet></ROW><ROW><id>8860527</id><snippet>class Foo:
    # String bar;  &lt;-- useless declaration is useless
    def __init__(self):
        self.bar = "xyz"
</snippet></ROW><ROW><id>8860747</id><snippet>sys.stdout</snippet></ROW><ROW><id>8860747</id><snippet>import sys, time

buf_size = 1024
for counter in xrange(buf_size):
    sys.stdout.write('a')
time.sleep(3)
</snippet></ROW><ROW><id>8860747</id><snippet>buf_size</snippet></ROW><ROW><id>8860747</id><snippet>buf_size</snippet></ROW><ROW><id>8860839</id><snippet>file1.py</snippet></ROW><ROW><id>8860839</id><snippet>settings.py</snippet></ROW><ROW><id>8861176</id><snippet>mkvirtualenv test --no-site-packages
workon test
pip install flask==dev
pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>8861176</id><snippet>Warning: cannot find svn location for Flask==0.9-devdev-20120114
</snippet></ROW><ROW><id>8861176</id><snippet>## FIXME: could not find svn URL in dependency_links for this package:
Flask==0.9-devdev-20120114
Jinja2==2.6
Werkzeug==0.8.2
wsgiref==0.1.2
</snippet></ROW><ROW><id>8861176</id><snippet>mkvirtualenv test2 --no-site-packages
workon test2
pip install -r requirements.txt
</snippet></ROW><ROW><id>8861176</id><snippet>Downloading/unpacking Flask==0.9-devdev-20120114 (from -r requirements.txt (line 2))
Could not find a version that satisfies the requirement Flask==0.9-devdev-20120114 (from -r requirements.txt (line 2)) (from versions: )
No distributions matching the version for Flask==0.9-devdev-20120114 (from -r requirements.txt (line 2))
Storing complete log in /Users/dgrtwo/.pip/pip.log
</snippet></ROW><ROW><id>8861768</id><snippet>import sys
import os.path as path

sys.path.append(path.join(path.dirname(__file__),
    '&lt;relative path between this program and the command line tool module&gt;'))

import &lt;command line tool module&gt;
</snippet></ROW><ROW><id>8861768</id><snippet>..</snippet></ROW><ROW><id>8861768</id><snippet>my_runner</snippet></ROW><ROW><id>8861768</id><snippet>my_runner</snippet></ROW><ROW><id>8861768</id><snippet>runner</snippet></ROW><ROW><id>8861768</id><snippet>import sys
import os.path as path

sys.path.append(path.join(path.dirname(__file__),
    '&lt;relative path between this program and the original ino module&gt;'))

from ino.runner import *
</snippet></ROW><ROW><id>8861768</id><snippet>my_runner</snippet></ROW><ROW><id>8861768</id><snippet>from my_runner import main
</snippet></ROW><ROW><id>8861999</id><snippet>def weightedL2(a,b,w):
    q = a-b
    return np.sqrt((w*q*q).sum())
</snippet></ROW><ROW><id>8862015</id><snippet>__of__</snippet></ROW><ROW><id>8862015</id><snippet>&gt;&gt;&gt; wrapped = child.__of__(parent2)
&gt;&gt;&gt; assert wrapped.aq_parent is parent2
True
</snippet></ROW><ROW><id>8862033</id><snippet>lock = threading.lock()

while 1:
    raw_input()     # Waiting for you to press Enter
    with lock:
        r = raw_input('--&gt; ')
        # send your command to the thread
</snippet></ROW><ROW><id>8862033</id><snippet>def worker(lock, ...):
    [...]
    with lock:
        print('what the thread write')
</snippet></ROW><ROW><id>8862033</id><snippet>Press Enter</snippet></ROW><ROW><id>8862033</id><snippet>Press Enter</snippet></ROW><ROW><id>8862033</id><snippet>--&gt;</snippet></ROW><ROW><id>8862033</id><snippet>some previous output

---&gt; your input
THE THREAD OUTPUT
</snippet></ROW><ROW><id>8862044</id><snippet>attrs = "Id,First,Last,Department,Hourly_Wage".split(',') 
data = [ (1, 'Greg','Foo','HR',100), 
          (2, 'Judy','Bar','EE',51), 
          (3, 'Jake','Bar','HR',75), 
          (4, 'Lila','Bax','HR',49), 
          (5, 'Norm','Fob','EE',49) ] 

from littletable import Table, DataObject

instructors = Table()
instructors.insert_many(
    DataObject(**dict(zip(attrs,d))) 
        for d in data)

# can add index before or after items are added to table
instructors.create_index("Id", unique=True)
instructors.create_index("Department")

# unique keys are enforced
try:
    instructors.insert(DataObject(Id=4, First="Bob", Last="Fob"))
except KeyError as e:
    print e

# keys checked for uniqueness when creating unique index
try:
    instructors.create_index("Last", unique=True)
except KeyError as e:
    print e

# Uniquely indexed access gives a single record
print "%(First)s %(Last)s" % instructors.by.Id[3]

# Non-uniquely indexed access gives a new Table
print '\n'.join("%(Department)s %(First)s %(Last)s" % inst 
                    for inst in instructors.by.Department["HR"])

# Table can still be accessed like a Python list
print "%(First)s %(Last)s" % instructors[-1]
print '\n'.join("%(Department)s %(First)s %(Last)s" % inst 
                    for inst in instructors)

# use pivot for multi-dimensional grouping
instructors.addfield("wage_bracket", lambda d:d.Hourly_Wage/10*10)
instructors.create_index("wage_bracket")
instructors.pivot("Department wage_bracket").dump()
instructors.pivot("Department wage_bracket").dump_counts()

import sys
instructors.csv_export(sys.stdout)
</snippet></ROW><ROW><id>8862044</id><snippet>("duplicate unique key value '4' for index Id", {'Last': 'Fob', 'Id': 4, 'First': 'Bob'})
'duplicate key value Bar'
Jake Bar
HR Greg Foo
HR Jake Bar
HR Lila Bax
Norm Fob
HR Greg Foo
EE Judy Bar
HR Jake Bar
HR Lila Bax
EE Norm Fob
Pivot: Department,wage_bracket
  Department:EE
    Department:EE/wage_bracket:40
      {'Last': 'Fob', 'Hourly_Wage': 49, 'Department': 'EE', 'wage_bracket': 40, 'Id': 5, 'First': 'Norm'}
    Department:EE/wage_bracket:50
      {'Last': 'Bar', 'Hourly_Wage': 51, 'Department': 'EE', 'wage_bracket': 50, 'Id': 2, 'First': 'Judy'}
  Department:HR
    Department:HR/wage_bracket:40
      {'Last': 'Bax', 'Hourly_Wage': 49, 'Department': 'HR', 'wage_bracket': 40, 'Id': 4, 'First': 'Lila'}
    Department:HR/wage_bracket:70
      {'Last': 'Bar', 'Hourly_Wage': 75, 'Department': 'HR', 'wage_bracket': 70, 'Id': 3, 'First': 'Jake'}
    Department:HR/wage_bracket:100
      {'Last': 'Foo', 'Hourly_Wage': 100, 'Department': 'HR', 'wage_bracket': 100, 'Id': 1, 'First': 'Greg'}
Pivot: Department,wage_bracket
              40         50         70        100      Total
EE             1          1          0          0          2
HR             1          0          1          1          3
Total          2          1          1          1          5
Last,Hourly_Wage,Department,wage_bracket,Id,First
Foo,100,HR,100,1,Greg
Bar,51,EE,50,2,Judy
Bar,75,HR,70,3,Jake
Bax,49,HR,40,4,Lila
Fob,49,EE,40,5,Norm
</snippet></ROW><ROW><id>8862212</id><snippet>Article\s</snippet></ROW><ROW><id>8862212</id><snippet>re.findall(r"""Article\s(?P&lt;number&gt;\d+)(?P&lt;content&gt;.*?)(?=Article\s|$)""",content,re.UNICODE)
</snippet></ROW><ROW><id>8862212</id><snippet>Article\s</snippet></ROW><ROW><id>8862212</id><snippet>^(?P&lt;number&gt;\d+)(?P&lt;content&gt;.*)$
</snippet></ROW><ROW><id>8862448</id><snippet>return</snippet></ROW><ROW><id>8863480</id><snippet>from Crypto.Cipher import AES
import simplejson as json
import base64

key = '0123456789abcdef'
mode = AES.MODE_CBC
encryptor = AES.new(key, mode)
text = '1010101010101010'

json.dumps(base64.encodestring(encryptor.encrypt(text)))
</snippet></ROW><ROW><id>8863532</id><snippet>../bin/python tasks.py
</snippet></ROW><ROW><id>8863564</id><snippet>os.exec*</snippet></ROW><ROW><id>8863564</id><snippet>execl(file, *args)
execle(file, *args, env)
execlp(file, *args)
execlpe(file, *args, env)
execv(path, args)
execve(path, args, env)
execvp(file, args)
execvpe(file, args, env)
</snippet></ROW><ROW><id>8863564</id><snippet>l</snippet></ROW><ROW><id>8863564</id><snippet>*args</snippet></ROW><ROW><id>8863564</id><snippet>v</snippet></ROW><ROW><id>8863564</id><snippet>args</snippet></ROW><ROW><id>8863564</id><snippet>p</snippet></ROW><ROW><id>8863564</id><snippet>file</snippet></ROW><ROW><id>8863564</id><snippet>e</snippet></ROW><ROW><id>8863564</id><snippet>e</snippet></ROW><ROW><id>8863564</id><snippet>e</snippet></ROW><ROW><id>8863564</id><snippet>os.execle</snippet></ROW><ROW><id>8863597</id><snippet>git+git://github.com/django-nonrel/mongodb-engine.git@master
git+git://github.com/django-nonrel/django-nonrel.git@master
git+git://github.com/django-nonrel/django-permission-backend-nonrel.git@master
</snippet></ROW><ROW><id>8863597</id><snippet>pip install -U -r requirements.txt</snippet></ROW><ROW><id>8863614</id><snippet>Scripts/activate.bat</snippet></ROW><ROW><id>8863646</id><snippet>nickname = line.split("\t")[0]
</snippet></ROW><ROW><id>8863952</id><snippet>typedef struct {
   unsigned char r, g, b;
} RGB;

double ColourDistance(RGB e1, RGB e2)
{
  long rmean = ( (long)e1.r + (long)e2.r ) / 2;
  long r = (long)e1.r - (long)e2.r;
  long g = (long)e1.g - (long)e2.g;
  long b = (long)e1.b - (long)e2.b;
  return sqrt((((512+rmean)*r*r)&gt;&gt;8) + 4*g*g + (((767-rmean)*b*b)&gt;&gt;8));
}
</snippet></ROW><ROW><id>8863952</id><snippet>colorsys</snippet></ROW><ROW><id>8864020</id><snippet>import Image
</snippet></ROW><ROW><id>8864020</id><snippet>import PIL</snippet></ROW><ROW><id>8864020</id><snippet>import Image</snippet></ROW><ROW><id>8864020</id><snippet>import PIL</snippet></ROW><ROW><id>8864135</id><snippet>import mymodule

@mymodule.myClass
class myOtherClass:
    pass
</snippet></ROW><ROW><id>8864142</id><snippet>hg clone https://bunbun68@code.google.com/p/ruffus/ 
</snippet></ROW><ROW><id>8864142</id><snippet>exec</snippet></ROW><ROW><id>8864142</id><snippet>function.__module__</snippet></ROW><ROW><id>8864142</id><snippet>None</snippet></ROW><ROW><id>8864142</id><snippet>str()</snippet></ROW><ROW><id>8864142</id><snippet>None</snippet></ROW><ROW><id>8864142</id><snippet>"None"</snippet></ROW><ROW><id>8864203</id><snippet>python</snippet></ROW><ROW><id>8864203</id><snippet>QTreeView</snippet></ROW><ROW><id>8864203</id><snippet>columnCount</snippet></ROW><ROW><id>8864204</id><snippet>sleep</snippet></ROW><ROW><id>8864204</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt;
&gt;&gt;&gt; matches = ['01','06','11','16','21','26','31','36','41','46','51','56']
&gt;&gt;&gt;
&gt;&gt;&gt; while True:
...     seconds = time.strftime('%S')
...     if seconds in matches:
...         print('YES')
...     else:
...         print(seconds)
...     time.sleep(1)
...
07
08
09
10
YES
12
13
14
15
YES
17
18
19
</snippet></ROW><ROW><id>8864309</id><snippet>exposes the machine to unauthorized access
</snippet></ROW><ROW><id>8864309</id><snippet>pyodbc</snippet></ROW><ROW><id>8864507</id><snippet>sorted_anagram = sorted(anagram)
possibles = [word for word in wordlist if sorted(word) == sorted_anagram]
</snippet></ROW><ROW><id>8864507</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter('book')
Counter({'o': 2, 'k': 1, 'b': 1})
&gt;&gt;&gt; Counter('obko')
Counter({'o': 2, 'k': 1, 'b': 1})
&gt;&gt;&gt; Counter('bok')
Counter({'k': 1, 'b': 1, 'o': 1})
&gt;&gt;&gt; 
&gt;&gt;&gt; Counter('book') == Counter('boko')
True
&gt;&gt;&gt; Counter('book') == Counter('bok')
False
</snippet></ROW><ROW><id>8864743</id><snippet>for field in ['first_name', 'last_name']: 
    value = getattr(self, field)
    setattr(self, field, value.title())
</snippet></ROW><ROW><id>8864830</id><snippet>import re
import string

''.join(map(lambda x: string.lowercase[len(x) - 1], re.findall(r'\s+', 'hello all  the   world')))
# 'abc'
</snippet></ROW><ROW><id>8865011</id><snippet>&gt;&gt;&gt; open("file.txt", 'w').write("one two three")
&gt;&gt;&gt; len(open("file.txt").read())
13
</snippet></ROW><ROW><id>8865248</id><snippet>sentence = [(4,'make'),(1,'sentence'),(0,'this'),(3,'now'),(5,'sense'),(2,'should')]
print "[%s]" % ', '.join(word for _,word in sorted(sentence))
</snippet></ROW><ROW><id>8865248</id><snippet>join</snippet></ROW><ROW><id>8865248</id><snippet>_</snippet></ROW><ROW><id>8865248</id><snippet>[]</snippet></ROW><ROW><id>8865248</id><snippet>str.format</snippet></ROW><ROW><id>8865302</id><snippet>        if userf.is_valid():
            user = userf.save(commit=False)
            user.email_token = token
            user.email_token_expiry = current_datetime + timedelta(1)
            user.save()
</snippet></ROW><ROW><id>8865494</id><snippet>&gt;&gt;&gt; mat[:, 0:8]
array([[ 0,  1,  2,  3,  4,  5,  6,  7],
       [10, 11, 12, 13, 14, 15, 16, 17]])
&gt;&gt;&gt; mat[:, 1:9]
array([[ 1,  2,  3,  4,  5,  6,  7,  8],
       [11, 12, 13, 14, 15, 16, 17, 18]])
</snippet></ROW><ROW><id>8865544</id><snippet>sortedList[sortcount] = [ int(userInput) ]
</snippet></ROW><ROW><id>8865544</id><snippet>sortedList[sortcount] = int(userInput)
</snippet></ROW><ROW><id>8865544</id><snippet>sortedList.append(int(userInput))
</snippet></ROW><ROW><id>8865708</id><snippet>a[start:stop:step]
</snippet></ROW><ROW><id>8865708</id><snippet>step</snippet></ROW><ROW><id>8865708</id><snippet>-1</snippet></ROW><ROW><id>8865708</id><snippet>start</snippet></ROW><ROW><id>8865708</id><snippet>stop</snippet></ROW><ROW><id>8865734</id><snippet>rjust</snippet></ROW><ROW><id>8865734</id><snippet>for (path, dirs, files) in os.walk(PATH):
  for z in files:
    filename = z.replace(" ","_").replace("-","").replace("__","_")

    # explode and transform number
    parts = filename.split('_', 2)
    parts[1] = parts[1].rjust(2, '0')

    # rejoin the transformed parts
    print '_'.join(parts)
</snippet></ROW><ROW><id>8865826</id><snippet>Picture.add_text_with_style</snippet></ROW><ROW><id>8865905</id><snippet>def altElement(a):
    return a[::2]
</snippet></ROW><ROW><id>8866125</id><snippet>round</snippet></ROW><ROW><id>8866125</id><snippet>math.floor</snippet></ROW><ROW><id>8866125</id><snippet>math.ceil</snippet></ROW><ROW><id>8866125</id><snippet>math.ceil</snippet></ROW><ROW><id>8866125</id><snippet>math.ceil</snippet></ROW><ROW><id>8866125</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; def roundup(x):
...     return int(math.ceil(x / 100.0)) * 100
... 
&gt;&gt;&gt; roundup(100)
100
&gt;&gt;&gt; roundup(101)
200
</snippet></ROW><ROW><id>8866125</id><snippet>math.ceil</snippet></ROW><ROW><id>8866125</id><snippet>10**n</snippet></ROW><ROW><id>8866125</id><snippet>n = 1</snippet></ROW><ROW><id>8866125</id><snippet>n = 3</snippet></ROW><ROW><id>8866125</id><snippet>&gt;&gt;&gt; def roundup(x):
...     return x if x % 100 == 0 else x + 100 - x % 100
</snippet></ROW><ROW><id>8866125</id><snippet>&gt;&gt;&gt; roundup(100)
100
&gt;&gt;&gt; roundup(130)
200
&gt;&gt;&gt; roundup(1234567891234567891)
1234567891234567900L
</snippet></ROW><ROW><id>8866125</id><snippet>$ python -m timeit -s 'import math' -s 'x = 130' 'int(math.ceil(x/100.0)) * 100'
1000000 loops, best of 3: 0.364 usec per loop
$ python -m timeit -s 'x = 130' 'x if x % 100 == 0 else x + 100 - x % 100'
10000000 loops, best of 3: 0.162 usec per loop
</snippet></ROW><ROW><id>8866125</id><snippet>math.ceil</snippet></ROW><ROW><id>8866125</id><snippet>$ python -m timeit -s 'x = 130' 'x + 100*(x%100&gt;0) - x%100'
10000000 loops, best of 3: 0.167 usec per loop
</snippet></ROW><ROW><id>8866125</id><snippet>round</snippet></ROW><ROW><id>8866125</id><snippet>&gt;&gt;&gt; int(round(130, -2))
100
&gt;&gt;&gt; int(round(170, -2))
200
</snippet></ROW><ROW><id>8866204</id><snippet>staticmethod</snippet></ROW><ROW><id>8866204</id><snippet>&gt;&gt;&gt; C.a = staticmethod(lambda x: k*x)
&gt;&gt;&gt; print C.a(2)
4
</snippet></ROW><ROW><id>8866298</id><snippet>def main():
    with open('infile.txt', 'r') as input:
        ages, n = 0, 0
        for line in input:
            age = int(line.split()[1])
            ages += age
            n += 1
            print age
        print 'average:', float(ages) / n
</snippet></ROW><ROW><id>8866298</id><snippet>split()</snippet></ROW><ROW><id>8866298</id><snippet>with</snippet></ROW><ROW><id>8866298</id><snippet>main</snippet></ROW><ROW><id>8866517</id><snippet>count_lines</snippet></ROW><ROW><id>8866517</id><snippet>DeferToThread</snippet></ROW><ROW><id>8866517</id><snippet>select</snippet></ROW><ROW><id>8866592</id><snippet>for i in list:
</snippet></ROW><ROW><id>8866592</id><snippet>i</snippet></ROW><ROW><id>8866592</id><snippet>list</snippet></ROW><ROW><id>8866592</id><snippet>for i in xrange(len(list)):
</snippet></ROW><ROW><id>8866592</id><snippet>for i, _ in enumerate(list):
</snippet></ROW><ROW><id>8866592</id><snippet>i</snippet></ROW><ROW><id>8866592</id><snippet>list[i]</snippet></ROW><ROW><id>8866592</id><snippet>list</snippet></ROW><ROW><id>8866661</id><snippet>import collections
collections.Counter(x) == collections.Counter(y)
</snippet></ROW><ROW><id>8866661</id><snippet>sorted(x) == sorted(y)
</snippet></ROW><ROW><id>8866661</id><snippet>set(x) == set(y)
</snippet></ROW><ROW><id>8866697</id><snippet>keyWordList = ['command1', 'command2', 'command3']
userInput = 'The quick brown command1 fox jumped over command2 the lazy dog command3'
inputList = userInput.split()

def tokenize(userInputList, keyWordList):
    keywords = set(keyWordList)
    tokens, acc = [], []
    for e in userInputList:
        if e in keywords:
            tokens.append(acc)
            tokens.append(e)
            acc = []
        else:
            acc.append(e)
    if acc:
        tokens.append(acc)
    return tokens

tokenize(inputList, keyWordList)
&gt; [['The', 'quick', 'brown'], 'command1', ['fox', 'jumped', 'over'], 'command2', ['the', 'lazy', 'dog'], 'command3']
</snippet></ROW><ROW><id>8867275</id><snippet>while True</snippet></ROW><ROW><id>8867275</id><snippet>True</snippet></ROW><ROW><id>8867275</id><snippet>while 1</snippet></ROW><ROW><id>8867275</id><snippet>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; def f():
        while True:
            print

&gt;&gt;&gt; dis(f)
  2           0 SETUP_LOOP              11 (to 14)
        &gt;&gt;    3 LOAD_GLOBAL              0 (True)
              6 POP_JUMP_IF_FALSE       13
  3           9 PRINT_NEWLINE       
             10 JUMP_ABSOLUTE            3
        &gt;&gt;   13 POP_BLOCK           
        &gt;&gt;   14 LOAD_CONST               0 (None)
             17 RETURN_VALUE        

&gt;&gt;&gt; def g():
        while 1:
            print

&gt;&gt;&gt; dis(g)
  2           0 SETUP_LOOP               4 (to 7)
  3     &gt;&gt;    3 PRINT_NEWLINE       
              4 JUMP_ABSOLUTE            3
        &gt;&gt;    7 LOAD_CONST               0 (None)
             10 RETURN_VALUE    
</snippet></ROW><ROW><id>8867275</id><snippet>sum(imap(pow, repeat(2), xrange(10)))</snippet></ROW><ROW><id>8867275</id><snippet>def collatz(n):
    print n
    while n &gt; 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        print n
</snippet></ROW><ROW><id>8867529</id><snippet>pygame.key.get_pressed</snippet></ROW><ROW><id>8867529</id><snippet>True</snippet></ROW><ROW><id>8867529</id><snippet>if pygame.key.get_pressed()[pygame.K_ESCAPE]:
     pygame.quit()
</snippet></ROW><ROW><id>8867529</id><snippet>pygame.event.post</snippet></ROW><ROW><id>8867529</id><snippet>else</snippet></ROW><ROW><id>8867664</id><snippet>__metaclass__</snippet></ROW><ROW><id>8867664</id><snippet>Foo.__metaclass__ = MetaSub</snippet></ROW><ROW><id>8867664</id><snippet>Foo = Metasub("Foo", Foo.__bases__, dict(Foo.__dict__))</snippet></ROW><ROW><id>8867664</id><snippet>Foo</snippet></ROW><ROW><id>8867664</id><snippet>Foo</snippet></ROW><ROW><id>8867664</id><snippet>Foo</snippet></ROW><ROW><id>8867664</id><snippet>Foo</snippet></ROW><ROW><id>8867930</id><snippet>a</snippet></ROW><ROW><id>8867930</id><snippet>10</snippet></ROW><ROW><id>8867930</id><snippet>for</snippet></ROW><ROW><id>8867930</id><snippet>10</snippet></ROW><ROW><id>8867930</id><snippet>while</snippet></ROW><ROW><id>8867930</id><snippet>print</snippet></ROW><ROW><id>8867930</id><snippet>a=0
while a!=10:
    for counter in range(11):
        a+=counter
    print a
    raw_input('press enter to keep looping')
</snippet></ROW><ROW><id>8868055</id><snippet>with open(filename, 'r') as f:
    lines = len(f.readlines())

with open(filename, 'w') as f:
    f.writelines(lines)
</snippet></ROW><ROW><id>8868435</id><snippet>cursor = self.__db.cursor()
cursor.execute('select * from UserConfirm where Benutzer = \'' + ds + '\'') 
return cursor.fetchone()
</snippet></ROW><ROW><id>8868532</id><snippet>.sav</snippet></ROW><ROW><id>8868532</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; filename = 'somefile.txt'
&gt;&gt;&gt; with open(filename) as f:
        lines = f.readlines()
&gt;&gt;&gt; basename, ext = os.path.splitext(filename)
&gt;&gt;&gt; savefile = basename + '.sav'
&gt;&gt;&gt; os.rename(filename, savefile)
&gt;&gt;&gt; lines = map(str.upper, lines)    # do your edits here
&gt;&gt;&gt; with open(filename, 'w') as f:
        f.writelines(lines)
</snippet></ROW><ROW><id>8868586</id><snippet>connection.queries</snippet></ROW><ROW><id>8868589</id><snippet>resultstring = ElementTree.tostring(tree, encoding='utf-16')
</snippet></ROW><ROW><id>8868589</id><snippet>ElementTree</snippet></ROW><ROW><id>8868589</id><snippet>etree</snippet></ROW><ROW><id>8868589</id><snippet>lxml</snippet></ROW><ROW><id>8868608</id><snippet>tostring</snippet></ROW><ROW><id>8868608</id><snippet>from lxml import etree

s = """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;tmx version="1.4a"/&gt;""" 

tree = etree.fromstring(s)
header = etree.SubElement(tree,'header',{'adminlang': 'EN'})
body = etree.SubElement(tree,'body')

print etree.tostring(tree, encoding="UTF-8",
                     xml_declaration=True,
                     pretty_print=True,
                     doctype='&lt;!DOCTYPE tmx SYSTEM "tmx14a.dtd"&gt;')
</snippet></ROW><ROW><id>8868608</id><snippet>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;!DOCTYPE tmx SYSTEM "tmx14a.dtd"&gt;
&lt;tmx version="1.4a"&gt;
  &lt;header adminlang="EN"/&gt;
  &lt;body/&gt;
&lt;/tmx&gt;
</snippet></ROW><ROW><id>8868632</id><snippet>bcrypt</snippet></ROW><ROW><id>8868632</id><snippet>import bcrypt

# Hash a password for the first time
hashed = bcrypt.hashpw(password, bcrypt.gensalt())

# gensalt's log_rounds parameter determines the complexity
# the work factor is 2**log_rounds, and the default is 12
hashed = bcrypt.hashpw(password, bcrypt.gensalt(10))

# Check that an unencrypted password matches one that has
# previously been hashed
if bcrypt.hashpw(plaintext, hashed) == hashed:
    print "It matches"
else:
    print "It does not match"
</snippet></ROW><ROW><id>8868681</id><snippet>connect_object</snippet></ROW><ROW><id>8868681</id><snippet>&gt;&gt;&gt; label = gtk.Label()
&gt;&gt;&gt; button = gtk.Button()
&gt;&gt;&gt; def callback(obj):
...    print obj
&gt;&gt;&gt; button.connect('clicked', callback)  # button will be passed by default
&gt;&gt;&gt; button.emit('clicked')
&lt;gtk.Button object at 0x27cd870 (GtkButton at 0x22c6190)&gt;
&gt;&gt;&gt; button.disconnect_by_func(callback)
&gt;&gt;&gt; button.connect_object('clicked', callback, label)  # label will be passed instead of button
&gt;&gt;&gt; button.emit('clicked')
&lt;gtk.Label object at 0x27cd9b0 (GtkLabel at 0x22b64f0)&gt;
</snippet></ROW><ROW><id>8868681</id><snippet>connect_object</snippet></ROW><ROW><id>8868681</id><snippet>connect_object()</snippet></ROW><ROW><id>8868735</id><snippet>import Image
import ImageDraw
import ImageFont

def draw_underlined_text(draw, pos, text, font, **options):    
    twidth, theight = draw.textsize(text, font=font)
    lx, ly = pos[0], pos[1] + theight
    draw.text(pos, text, font=font, **options)
    draw.line((lx, ly, lx + twidth, ly), **options)

im = Image.new('RGB', (400, 400), (255,)*3)
draw = ImageDraw.Draw(im)
font = ImageFont.truetype("arial.ttf", 50)

draw_underlined_text(draw, (50, 150), 'Hello PIL!', font, fill=0)
draw_underlined_text(draw, (50, 300), 'Test', font, fill=128)

im.show()
</snippet></ROW><ROW><id>8868927</id><snippet>def take_screenshot(x=0, y=0, width=None, height=None):
    window = gtk.gdk.get_default_root_window()
    if not (width and height):
        size = window.get_size()
        if not width:
            width = size[0]
        if not height:
            height = size[1]
    pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
    pixbuf = pixbuf.get_from_drawable(window, window.get_colormap(),
                                      x, y, 0, 0, width, height)
    array = pixbuf.get_pixels_array()
    return Image("screenshot", array=array,
                 width=array.shape[1], height=array.shape[0])
</snippet></ROW><ROW><id>8868962</id><snippet>$.fn.uploader = function( options ) {
    var defaults = {},
        opts = $.extend( defaults, options ),
        that = $( this ),
        url = that.data( "upload_url" ),
        is_uploading = false;

    function upload( files ) {

        $.get( "/file/blank.html" );

        if ( FormData === undefined ) {
            alert( "Your browser does not support standard HTML5 Drag and Drop" );
            return;
        }        

        var xhr = new XMLHttpRequest(),
            new_element = $( "&lt;li&gt;&lt;p&gt;Loading&lt;/p&gt;&lt;span&gt;&lt;/span&gt;&lt;/li&gt;" )
                .appendTo( that ),
            xhr_upload = xhr.upload,
            form = new FormData();

        xhr_upload.addEventListener( "progress", function( e ) {
            if( e.lengthComputable ) {
                var p = Math.round( e.loaded * 100 / e.total );
                new_element.children( "span" ).text( e.loaded == e.total ? "Processing..." : p + "%" );
            }
        }, false);
        xhr_upload.addEventListener( "load", function( e ){}, false);
        xhr_upload.addEventListener( "error", function( error ) { alert( "error: " + error ); }, false);

        xhr.open( "POST", url, true );
        xhr.setRequestHeader( "X-Requested-With", "XMLHttpRequest" );

        xhr.onreadystatechange = function ( e ) {
            if ( xhr.readyState == 4 ) {
                is_uploading = false;
                if( xhr.status == 200 ) {
                    var data = $.parseJSON( e.target.responseText );
                    if ( data.status == 0 ) {
                        new_element
                            .fadeOut(function (){ $( this ).remove(); })
                            .children( "span" ).text( "Upload error!" );
                    } else {
                        that.html( data.html );
                    }
                } else {
                    new_element
                        .fadeOut(function (){ $( this ).remove(); })
                        .children( "span" ).text( "Upload error!" );
                }
            }
        };
        $.each( files, function() {
            form.append( "files", this );
        });
        is_uploading = true;
        xhr.send( form );
    }

    that.bind({
        "dragover": function( e ) {
            var dt = e.originalEvent.dataTransfer;
            if( !dt || is_uploading ) { return; };
            if( $.browser.webkit ) { dt.dropEffect = "copy"; };
            $( this ).addClass( "active" );
            return false;
        },
        "dragleave": function( e ) {
            $( this ).removeClass( "active" );
        },
        "dragenter": function( e ){ return false; },
        "drop": function( e ){
            var dt = e.originalEvent.dataTransfer;
            $( this ).removeClass( "active" );
            if( !dt || !dt.files || is_uploading ) { return; };
            upload( dt.files );
            return false;
        }
    });

    $( document ).bind({
        'dragenter': function( e ) { return false; },
        'dragleave': function( e ) { return false; },
        'dragover': function( e ) {
            var dt = e.originalEvent.dataTransfer;
            if ( !dt ) { return; }
            dt.dropEffect = "none";
            return false;
        }
    });

};
</snippet></ROW><ROW><id>8868962</id><snippet>def POST(self):
    i = web.webapi.rawinput()
    try:
        files = i.files
        if not isinstance(files, list):
            files = [files]
        for f in files:
            if f.filename:
                filetype, encoding = mimetypes.guess_type(f.filename)
                # do smth with f.file
    except KeyError:
        pass
    if web.ctx.env.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':
        web.header("Content-Type", "application/json")
        return json.dumps(dict(status=1, html=unicode(render_partial.files(uploaded_files))))
    else:
        raise web.seeother(web.ctx.env.get("HTTP_REFERER", "/"))
</snippet></ROW><ROW><id>8868991</id><snippet>&lt;input type="file" /&gt;</snippet></ROW><ROW><id>8868991</id><snippet>file</snippet></ROW><ROW><id>8868991</id><snippet>name=</snippet></ROW><ROW><id>8868991</id><snippet>'&lt;input type="file" name="myfile" id="myfile" accept="image/jpeg,image/png,image/gif" /&gt;'
//                  ^^^^^^^^^^^^^
</snippet></ROW><ROW><id>8869156</id><snippet>round()</snippet></ROW><ROW><id>8869156</id><snippet>float</snippet></ROW><ROW><id>8869156</id><snippet>Decimal</snippet></ROW><ROW><id>8869156</id><snippet>decimal</snippet></ROW><ROW><id>8869156</id><snippet>round()</snippet></ROW><ROW><id>8869156</id><snippet>Decimal</snippet></ROW><ROW><id>8869156</id><snippet>round()</snippet></ROW><ROW><id>8869425</id><snippet>salt = bcrypt.gensalt()
password = bcrypt.hashpw(password, salt)
repeatpassword = bcrypt.hashpw(repeatpassword,salt)
</snippet></ROW><ROW><id>8869532</id><snippet>static</snippet></ROW><ROW><id>8869782</id><snippet>commands</snippet></ROW><ROW><id>8869782</id><snippet>subprocess</snippet></ROW><ROW><id>8869782</id><snippet>import subprocess
import shlex
import sys

def parse_fdisk(fdisk_output):
    result = {}
    for line in fdisk_output.split("\n"):
        if not line.startswith("/"): continue
        parts = line.split()

        inf = {}
        if parts[1] == "*":
            inf['bootable'] = True
            del parts[1]

        else:
            inf['bootable'] = False

        inf['start'] = int(parts[1])
        inf['end'] = int(parts[2])
        inf['blocks'] = int(parts[3].rstrip("+"))
        inf['partition_id'] = int(parts[4], 16)
        inf['partition_id_string'] = " ".join(parts[5:])

        result[parts[0]] = inf
    return result

def main():
    proc = subprocess.Popen(shlex.split("fdisk -l"),
                            stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    fdisk_output, fdisk_error = proc.communicate()
    fdisk_output = fdisk_output.decode(sys.stdout.encoding)
    for disk, info in parse_fdisk(fdisk_output).items():
        print(disk, " ".join(["%s=%r" % i for i in info.items()]))

main()
</snippet></ROW><ROW><id>8869782</id><snippet>parse_fdisk</snippet></ROW><ROW><id>8869782</id><snippet>commands.getoutput</snippet></ROW><ROW><id>8869782</id><snippet>main()</snippet></ROW><ROW><id>8869880</id><snippet>__spam</snippet></ROW><ROW><id>8869880</id><snippet>_classname__spam</snippet></ROW><ROW><id>8869880</id><snippet>__methodname</snippet></ROW><ROW><id>8869880</id><snippet>_classname__methodname</snippet></ROW><ROW><id>8869880</id><snippet>AttributeError</snippet></ROW><ROW><id>8869942</id><snippet>clean</snippet></ROW><ROW><id>8869942</id><snippet>save</snippet></ROW><ROW><id>8870265</id><snippet># Store a hash.
import bcrypt
hashed = bcrypt.hashpw(password, bcrypt.gensalt())
store_in_db(user, hashed) #Where user is the user to load the hash for, and store_in_db does what it says on the tin.

# Check against an existing hash
import bcrypt
hashed = load_from_db(user) # (get the password of the user from database) Where user is the user to load the hash for, and load_from_db does what it says on the tin.
if bcrypt.hashpw(password, hashed) == hashed: # Where password is a plaintext password attempt.
        print "It matches"
else:
        print "It does not match"
</snippet></ROW><ROW><id>8870418</id><snippet>0.3</snippet></ROW><ROW><id>8870418</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(0.3)
Decimal('0.299999999999999988897769753748434595763683319091796875')
</snippet></ROW><ROW><id>8870418</id><snippet>repr(f)</snippet></ROW><ROW><id>8870418</id><snippet>float(s)</snippet></ROW><ROW><id>8870418</id><snippet>repr(0.3) == '0.3'</snippet></ROW><ROW><id>8870418</id><snippet>repr(0.3) == '0.29999999999999999'</snippet></ROW><ROW><id>8870418</id><snippet>&gt;&gt;&gt; (Decimal(2.0) - Decimal(1.1)) / Decimal(0.3) - Decimal(3) 
Decimal('-1.85037170771E-16')
</snippet></ROW><ROW><id>8870418</id><snippet>(2.0 - 1.1) / 0.3 == 3.0</snippet></ROW><ROW><id>8870418</id><snippet>&gt;&gt;&gt; (2 - 1.1) / 0.3 - 3
0.0
&gt;&gt;&gt; bool((2 - 1.1) / 0.3 - 3)
False
</snippet></ROW><ROW><id>8870418</id><snippet>&gt;&gt;&gt; bool(-1.85037170771E-16)
True
</snippet></ROW><ROW><id>8870418</id><snippet>&gt;&gt;&gt; 2.0**53    
9007199254740992.0
&gt;&gt;&gt; 2.0**53 + 1
9007199254740992.0
&gt;&gt;&gt; 2.0**53 + 2
9007199254740994.0
</snippet></ROW><ROW><id>8870418</id><snippet>i</snippet></ROW><ROW><id>8870418</id><snippet>i - 1</snippet></ROW><ROW><id>8870418</id><snippet>0.0</snippet></ROW><ROW><id>8870575</id><snippet>def find_words(instring, prefix = '', words = None):
    if not instring:
        return []
    if words is None:
        words = set()
        with open('/usr/share/dict/words') as f:
            for line in f:
                words.add(line.strip())
    if (not prefix) and (instring in words):
        return [instring]
    prefix, suffix = prefix + instring[0], instring[1:]
    solutions = []
    # Case 1: prefix in solution
    if prefix in words:
        try:
            solutions.append([prefix] + find_words(suffix, '', words))
        except ValueError:
            pass
    # Case 2: prefix not in solution
    try:
        solutions.append(find_words(suffix, prefix, words))
    except ValueError:
        pass
    if solutions:
        return sorted(solutions,
                      key = lambda solution: [len(word) for word in solution],
                      reverse = True)[0]
    else:
        raise ValueError('no solution')

print(find_words('tableapplechairtablecupboard'))
print(find_words('tableprechaun', words = set(['tab', 'table', 'leprechaun'])))
</snippet></ROW><ROW><id>8870575</id><snippet>['table', 'apple', 'chair', 'table', 'cupboard']
['tab', 'leprechaun']
</snippet></ROW><ROW><id>8870734</id><snippet>import numpy as np

def F(c,D,x):
    """Assume c and x are numpy arrays of equal size and D is a scalar"""
    # differencing of the concentration field
    deltac = np.diff(c)
    deltax = np.diff(x)

    return -D * deltac / deltax
</snippet></ROW><ROW><id>8870850</id><snippet>'a'</snippet></ROW><ROW><id>8870850</id><snippet>'w'</snippet></ROW><ROW><id>8870850</id><snippet>try..finally</snippet></ROW><ROW><id>8870850</id><snippet>with open('file.txt', 'a') as f:
    f.write('blah')
    f.writelines(lines)
</snippet></ROW><ROW><id>8870850</id><snippet>with</snippet></ROW><ROW><id>8870915</id><snippet>maxWidths = [0] * maxCols
</snippet></ROW><ROW><id>8870915</id><snippet>map</snippet></ROW><ROW><id>8870915</id><snippet>[[] for dummy in range(100)]
</snippet></ROW><ROW><id>8871165</id><snippet># ∫</snippet></ROW><ROW><id>8871165</id><snippet>  File "example.py", line 4  
SyntaxError: Non-ASCII character '\xe2' in file x.py on line 4, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
</snippet></ROW><ROW><id>8871165</id><snippet>python -m unittest example</snippet></ROW><ROW><id>8871222</id><snippet>from scipy.stats import lognorm
stddev = 0.859455801705594
mean = 0.418749176686875
dist=lognorm([stddev],loc=mean)
</snippet></ROW><ROW><id>8871222</id><snippet>import numpy as np
import pylab as pl
x=np.linspace(0,6,200)
pl.plot(x,dist.pdf(x))
pl.plot(x,dist.cdf(x))
</snippet></ROW><ROW><id>8871419</id><snippet>def show_sprites():
    screen.blit(plumbers,(50 + M ,337 + N))
    .......
</snippet></ROW><ROW><id>8871419</id><snippet>def show_sprites():
    print M, N
    screen.blit(plumbers,(50 + M ,337 + N))
    .......
</snippet></ROW><ROW><id>8871419</id><snippet>def show_sprites():
    if event.key == pygame.K_UP:
</snippet></ROW><ROW><id>8871419</id><snippet>event</snippet></ROW><ROW><id>8871419</id><snippet>def show_sprites(M, N, event):
</snippet></ROW><ROW><id>8871419</id><snippet>def show_sprites(event):
    if event.key == pygame.K_UP:
        M = 1
        N = 0
    else:
        M = 0  # ? up to you
        N = 0  # ?
    screen.blit(plumbers,(50 + M ,337 + N))
</snippet></ROW><ROW><id>8871419</id><snippet>while running:
    setup_background()
    event = pygame.event.poll()
    if event.type == pygame.QUIT: sys.exit()
    show_sprites(event)
    move()
</snippet></ROW><ROW><id>8871419</id><snippet>if event.type == pygame.QUIT:
    sys.exit()
elif event.type == pygame.KEYDOWN:
    show_sprites(event)
    move()
</snippet></ROW><ROW><id>8871517</id><snippet>user = 'username'
y = True

while y:
    openurl = urllib.urlopen("https://api.twitter.com/1/statuses/user_timeline.json?include_entities=true&amp;contributor_details&amp;include_rts=true&amp;screen_name="+user+"&amp;count=3600")
    user += "a"
    #You have to do something in here to change y or this will be an infinite loop
</snippet></ROW><ROW><id>8871683</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>8871802</id><snippet>def test_regress():
    stats=importr('stats')
    x=random.uniform(0,1,100).reshape([100,1])
    y=1+x+random.uniform(0,1,100).reshape([100,1])
    x_in_r=create_r_matrix(x, x.shape[1])
    y_in_r=create_r_matrix(y, y.shape[1])
    formula=robjects.Formula('y~x')
    env = formula.environment
    env['x']=x_in_r
    env['y']=y_in_r
    fit=stats.lm(formula)
    coeffs=array(fit[0])
    resids=array(fit[1])
    fitted_vals=array(fit[4])
    modsum = base.summary(fit)
    rsquared = array(modsum[7])
    se = array(modsum.rx2('coefficients')[2:4])
    return(coeffs, resids, fitted_vals, rsquared, se) 
</snippet></ROW><ROW><id>8871802</id><snippet>print(modsum.names)</snippet></ROW><ROW><id>8871802</id><snippet>names(modsum)</snippet></ROW><ROW><id>8871802</id><snippet>.rx</snippet></ROW><ROW><id>8871802</id><snippet>.rx2</snippet></ROW><ROW><id>8871802</id><snippet>[</snippet></ROW><ROW><id>8871802</id><snippet>[[</snippet></ROW><ROW><id>8871884</id><snippet>QPushButton</snippet></ROW><ROW><id>8871884</id><snippet>QPushButton</snippet></ROW><ROW><id>8871884</id><snippet>QWidget</snippet></ROW><ROW><id>8871884</id><snippet>QObject</snippet></ROW><ROW><id>8871884</id><snippet>QAbstractButton</snippet></ROW><ROW><id>8871884</id><snippet>clicked(bool checked=false)</snippet></ROW><ROW><id>8871884</id><snippet>pressed()</snippet></ROW><ROW><id>8871884</id><snippet>released()</snippet></ROW><ROW><id>8871884</id><snippet>toggled(bool)</snippet></ROW><ROW><id>8872199</id><snippet># -- update_batch.py --
import sys
import os

def main():
    if len(sys.argv) == 1:
        return 

    appId = sys.argv[1]
    print "appId", appId

    # Your script to minify javascipt
    #os.chdir(r".\template")
    #cmd = r'jscom.py ./js/new/xxx_plugin.js xxx_plugin.js %s.appspot.com'%appId
    #os.system(cmd)

    os.chdir("..")
    # Perform appcfg.py to update GAE server
    cmd = r'"C:\Program Files\Google\google_appengine\appcfg.py"'
    os.system(cmd + " update . " + " -A %s"%appId)

    #os.system(cmd + " backends . " + " update worker " + " -A %s"%appId)

if __name__ == "__main__":
    main()

# Usage update_batch.py YOUR_APP_ID_HERE
</snippet></ROW><ROW><id>8872208</id><snippet>f = urllib.request.urlopen('http://www.maxmind.com/app/locate_my_ip')
for line in f:
    if b'align="center"&gt;' in line:
        print(next(f).decode().rstrip())
f.close()
</snippet></ROW><ROW><id>8872208</id><snippet>for line in f</snippet></ROW><ROW><id>8872208</id><snippet>if b'align="center"&gt;' in line</snippet></ROW><ROW><id>8872208</id><snippet>b</snippet></ROW><ROW><id>8872208</id><snippet>urllib.reqquest.urlopen</snippet></ROW><ROW><id>8872208</id><snippet>'align="center"&gt;'</snippet></ROW><ROW><id>8872208</id><snippet>TypeError</snippet></ROW><ROW><id>8872208</id><snippet>next(f)</snippet></ROW><ROW><id>8872208</id><snippet>decode</snippet></ROW><ROW><id>8872208</id><snippet>rstrip()</snippet></ROW><ROW><id>8872362</id><snippet>expanded_url</snippet></ROW><ROW><id>8872819</id><snippet>def ip_to_int(a, b, c, d):
    return (a &lt;&lt; 24) + (b &lt;&lt; 16) + (c &lt;&lt; 8) + d
</snippet></ROW><ROW><id>8872819</id><snippet>&gt;&gt;&gt; bin(0xFFFFFFFF ^ ip_to_int(192, 168, 1, 1) ^ ip_to_int(192, 168, 1, 254))
'0b11111111111111111111111100000000'
</snippet></ROW><ROW><id>8872819</id><snippet>def mask(ip1, ip2):
    "ip1 and ip2 are lists of 4 integers 0-255 each"
    m = 0xFFFFFFFF ^ ip_to_int(*ip1) ^ ip_to_int(*ip2)
    return [(m &amp; (0xFF &lt;&lt; (8*n))) &gt;&gt; 8*n for n in (3, 2, 1, 0)]

&gt;&gt;&gt; mask([192, 168, 1, 1], [192, 168, 1, 254])
[255L, 255L, 255L, 0L]
</snippet></ROW><ROW><id>8872840</id><snippet>filter(lambda x: x!='\n', obj)
</snippet></ROW><ROW><id>8872911</id><snippet>DELIMITER //</snippet></ROW><ROW><id>8872911</id><snippet>DELIMITER</snippet></ROW><ROW><id>8872911</id><snippet>DELIMIETER ;</snippet></ROW><ROW><id>8872911</id><snippet>DELIMIETER ;</snippet></ROW><ROW><id>8872911</id><snippet> DELIMITER //
    CREATE TRIGGER %(table)s_before_insert BEFORE INSERT ON %(table)s
    FOR EACH ROW
    BEGIN
        SET NEW.create_ts = NOW();
        SET NEW.mod_ts = NOW();
        SET NEW.uid = UUID();
    END;// DELIMIETER ; &lt;-- this one is wrong, it should be DELIMITER
</snippet></ROW><ROW><id>8872923</id><snippet>testCacheGetOK</snippet></ROW><ROW><id>8872923</id><snippet>keyedcache</snippet></ROW><ROW><id>8872934</id><snippet>dir</snippet></ROW><ROW><id>8872934</id><snippet>filename</snippet></ROW><ROW><id>8872934</id><snippet>locals()</snippet></ROW><ROW><id>8872934</id><snippet>globals()</snippet></ROW><ROW><id>8872934</id><snippet>import shelve

T = 'Hiya'
val = [1, 2, 3]

def save_variables(globals_=None):
    if globals_ is None:
        globals_ = globals()
    filename = '/tmp/shelve.out'
    my_shelf = shelve.open(filename, 'n')
    for key, value in globals_.items():
        if not key.startswith('__'):
            try:
                my_shelf[key] = value
            except Exception:
                print('ERROR shelving: "%s"' % key)
            else:
                print('shelved: "%s"' % key)
    my_shelf.close()

save_variables()
</snippet></ROW><ROW><id>8872934</id><snippet>globals()</snippet></ROW><ROW><id>8872934</id><snippet>save_variables</snippet></ROW><ROW><id>8872934</id><snippet>save_variables(globals())
</snippet></ROW><ROW><id>8872949</id><snippet>Object</snippet></ROW><ROW><id>8872949</id><snippet>Camera</snippet></ROW><ROW><id>8872949</id><snippet>Camera</snippet></ROW><ROW><id>8872949</id><snippet>bpy.data.cameras</snippet></ROW><ROW><id>8872949</id><snippet>import bpy

if(len(bpy.data.cameras) == 1):
    obj = bpy.data.objects['Camera'] # bpy.types.Camera
    obj.location.x = 0.0
    obj.location.y = -10.0
    obj.location.z = 10.0
    obj.keyframe_insert(data_path="location", frame=10.0)
    obj.location.x = 10.0
    obj.location.y = 0.0
    obj.location.z = 5.0
    obj.keyframe_insert(data_path="location", frame=20.0)
</snippet></ROW><ROW><id>8873006</id><snippet>import Afailure #@UnresolvedImport
</snippet></ROW><ROW><id>8873155</id><snippet>boto</snippet></ROW><ROW><id>8873218</id><snippet>from my.plugin import MessageFactory as _my_plugin
</snippet></ROW><ROW><id>8873302</id><snippet>myimage = pygame.image.load("myimage.bmp")
imagerect = myimage.get_rect()

while 1:
    your_code_here

    screen.fill(black)
    screen.blit(myimage, imagerect)
    pygame.display.flip()
</snippet></ROW><ROW><id>8873780</id><snippet>б</snippet></ROW><ROW><id>8873780</id><snippet>б</snippet></ROW><ROW><id>8873780</id><snippet>cp1251</snippet></ROW><ROW><id>8873780</id><snippet>баба</snippet></ROW><ROW><id>8873780</id><snippet>баба</snippet></ROW><ROW><id>8873780</id><snippet>cp1251</snippet></ROW><ROW><id>8873780</id><snippet>In [219]: "баба".decode('utf-8').encode('cp1251')
Out[219]: '\xe1\xe0\xe1\xe0'
</snippet></ROW><ROW><id>8873780</id><snippet>utf-8</snippet></ROW><ROW><id>8873780</id><snippet>utf-8</snippet></ROW><ROW><id>8873780</id><snippet>cp1251</snippet></ROW><ROW><id>8873780</id><snippet>"баба".decode('utf-8')</snippet></ROW><ROW><id>8873780</id><snippet>баба</snippet></ROW><ROW><id>8873780</id><snippet>баба</snippet></ROW><ROW><id>8873780</id><snippet>\xe1\xe0\xe1\xe0</snippet></ROW><ROW><id>8873780</id><snippet>u"баба"</snippet></ROW><ROW><id>8873780</id><snippet>u'\xe1\xe0\xe1\xe0'</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; s
u'\xe1\xe0\xe1\xe0'
</snippet></ROW><ROW><id>8873780</id><snippet>áàáà</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; print s.encode('latin1')
</snippet></ROW><ROW><id>8873780</id><snippet>latin1</snippet></ROW><ROW><id>8873780</id><snippet>u'\xe1\xe0\xe1\xe0'</snippet></ROW><ROW><id>8873780</id><snippet>'\xe1\xe0\xe1\xe0'</snippet></ROW><ROW><id>8873780</id><snippet>'\xe1\xe0\xe1\xe0'</snippet></ROW><ROW><id>8873780</id><snippet>cp1251</snippet></ROW><ROW><id>8873780</id><snippet>баба</snippet></ROW><ROW><id>8873780</id><snippet>In [222]: print('\xe1\xe0\xe1\xe0'.decode('cp1251'))
баба
</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; s = "баба"
</snippet></ROW><ROW><id>8873780</id><snippet>u</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; s = "баба".decode('cp1251')
</snippet></ROW><ROW><id>8873780</id><snippet>s</snippet></ROW><ROW><id>8873780</id><snippet>unicode</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; s = u'\N{CYRILLIC SMALL LETTER BE}\N{CYRILLIC SMALL LETTER A}\N{CYRILLIC SMALL LETTER BE}\N{CYRILLIC SMALL LETTER A}'
</snippet></ROW><ROW><id>8873780</id><snippet>&gt;&gt;&gt; s = u'\u0431\u0430\u0431\u0430'
</snippet></ROW><ROW><id>8873829</id><snippet>foreign_keys</snippet></ROW><ROW><id>8873829</id><snippet>primaryjoin</snippet></ROW><ROW><id>8873840</id><snippet>xml.etree.ElementTree.iterparse</snippet></ROW><ROW><id>8873840</id><snippet>def find_spam(xml):
    for event, element in xml.etree.ElementTree.iterparse(xml):
        if element.tag == "spam":
            print("We found a spam!")
            # Potentially do something
            yield element
</snippet></ROW><ROW><id>8874124</id><snippet>-runBunchOfScripts</snippet></ROW><ROW><id>8874124</id><snippet>-runPythonScript</snippet></ROW><ROW><id>8874124</id><snippet>- (NSString*)runPythonScript
{
    NSTask* task = [[[NSTask alloc] init] autorelease];
    task.launchPath = @"/usr/bin/python";  
    NSString *scriptPath = [[NSBundle mainBundle] pathForResource:@"MyScript" ofType:@"py"];
    task.arguments = [NSArray arrayWithObjects: scriptPath, nil];

    // NSLog breaks if we don't do this...
    [task setStandardInput: [NSPipe pipe]];

    NSPipe *stdOutPipe = nil;
    stdOutPipe = [NSPipe pipe];
    [task setStandardOutput:stdOutPipe];

    NSPipe* stdErrPipe = nil;
    stdErrPipe = [NSPipe pipe];
    [task setStandardError: stdErrPipe];

    [task launch];        

    NSData* data = [[stdOutPipe fileHandleForReading] readDataToEndOfFile];

    [task waitUntilExit];

    NSInteger exitCode = task.terminationStatus;

    if (exitCode != 0)
    {
        NSLog(@"Error!");
        return nil;
    }

    return [[[NSString alloc] initWithBytes: data.bytes length:data.length encoding: NSUTF8StringEncoding] autorelease];
}

- (void)runBunchOfScripts
{
    dispatch_group_t group = dispatch_group_create();
    NSMutableArray* results = [[NSMutableArray alloc] init];
    for (NSUInteger i = 0; i &lt; 10; i++)
    {
        dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            NSString* result = [self runPythonScript];
            @synchronized(results)
            {
                [results addObject: result];
            }
        });
    }

    dispatch_group_notify(group, dispatch_get_main_queue(), ^{
        [self scriptsDidFinishWithResults: results];
        dispatch_release(group);
        [results release];
    });
}

- (void)scriptsDidFinishWithResults: (NSArray*)results
{
    NSLog(@"Do something with the results...");
}
</snippet></ROW><ROW><id>8874235</id><snippet>content = "This is some sentence that has more than eight words"
content = content.split(" ")
print content
['This', 'is', 'some', 'sentence', 'that', 'has', 'more', 'than', 'eight', 'words']
print(" ".join(content[0:8]))
This is some sentence that has more than
</snippet></ROW><ROW><id>8874265</id><snippet>textbook</snippet></ROW><ROW><id>8874265</id><snippet>from collections import defaultdict
from itertools import permutations

PRIMES = list(gen_primes(256)) # some arbitrary prime generator

def get_dict(path):
    res = defaultdict(list)
    with open(path, "r") as file:
        for line in file.readlines():
            word = line.strip().upper()
            hash = compute_hash(word)
            res[hash].append(word)
    return res

def compute_hash(word):
    hash = 1
    for char in word:
        try:
            hash *= PRIMES[ord(char) - ord(' ')]
        except IndexError:
            # contains some character out of range - always 0 for our purposes
            return 0
    return hash

def get_result(path, given_word):
    words = get_dict(path)
    given_word = given_word.upper()
    result = set()
    powerset = lambda x: powerset(x[1:]) + [x[:1] + y for y in powerset(x[1:])] if x else [x]
    for word in (word for word in powerset(given_word) if len(word) &gt;= 4):
        hash = compute_hash(word)
        for equiv in words[hash]:
            result.add(equiv)
    return result

if __name__ == '__main__':
    path = "dict.txt"
    given_word = "textbook"
    result = get_result(path, given_word)
    print(result)
</snippet></ROW><ROW><id>8874339</id><snippet>import urllib.request, pprint

data = urllib.request.urlopen('http://www.maxmind.com/app/locate_my_ip')

fields = []
for line in data:
    if b'class=output' in line:
        fields.append(next(data).decode('iso-8859-1').strip())
data.close()
</snippet></ROW><ROW><id>8874339</id><snippet>address = fields[0]
isp = fields[8]
domain = fields[-1]
</snippet></ROW><ROW><id>8874339</id><snippet>del fields[3], fields[4], fields[6]
</snippet></ROW><ROW><id>8874368</id><snippet>'format'</snippet></ROW><ROW><id>8874368</id><snippet>literal(...)</snippet></ROW><ROW><id>8874368</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect(...)
&gt;&gt;&gt; print "insert into table VALUES ( %s, %s, %s )" % db.literal((5, "ab'c", None))
insert into table VALUES ( 5, 'ab\\'c', NULL )
</snippet></ROW><ROW><id>8874368</id><snippet>db.literal(...)</snippet></ROW><ROW><id>8874374</id><snippet>def complex(real=0.0, imag=0.0):
    """Form a complex number.

    Keyword arguments:
    real -- the real part (default 0.0)
    imag -- the imaginary part (default 0.0)

    """
    if imag == 0.0 and real == 0.0: return complex_zero
    ...
</snippet></ROW><ROW><id>8874468</id><snippet>self.image = pygame.image.load("jellyfishBad.png").convert_alpha()
</snippet></ROW><ROW><id>8874487</id><snippet>cv2.error</snippet></ROW><ROW><id>8874487</id><snippet>try:
    ...
except cv2.error as e:
    ...
</snippet></ROW><ROW><id>8874508</id><snippet>make_computer_move(board, avail_col)</snippet></ROW><ROW><id>8874508</id><snippet>import random

def display_board(board):
    col = "   "
    cols = len(board[0])
    for index1 in range(cols):
        col += "%i   " % index1
    print col
    for index2 in range(len(board)):
        print str(index2) + ": " + " | ".join(board[index2]) + " |"
        print "  " + "---+" * cols


def make_computer_move(board, avail_cols):
    col = random.choice(avail_cols) 
    for row in range(len(board)-1, -1, -1):            # counts from bottom of board and up
        if board[row][col] == " ":                      # if there is a blank space, put a "O" and break
            print "The pairing is (%i,%i)" % (row,col)  #Print the coordinates
            board[row][col] = 'O'
            break

    if row == 0:      #arrives to the last row
        return col


def main():
    board = [[" ", " ", " ", " ", " "] for i in range(5)]
    avail_cols = range(len(board[0]))
    display_board(board)
    for counter in range(25):
        filled = make_computer_move(board, avail_cols)
        display_board(board)
        if filled is not None: avail_cols.remove(filled)


main()
</snippet></ROW><ROW><id>8874508</id><snippet>display_board(board)</snippet></ROW><ROW><id>8874508</id><snippet>make_computer_move</snippet></ROW><ROW><id>8874508</id><snippet>len(board[0])</snippet></ROW><ROW><id>8874637</id><snippet>render_to_response('qr_results.html', {'url': qc['url']})
</snippet></ROW><ROW><id>8874880</id><snippet>random.randint(1,UPPER_BOUND)</snippet></ROW><ROW><id>8874880</id><snippet>inner()</snippet></ROW><ROW><id>8874880</id><snippet>runner()</snippet></ROW><ROW><id>8874880</id><snippet>&gt;&gt;&gt; def runner(f, callable):
...   def inner():
...     for i in xrange(1000):
...       f(*callable())
...   return inner
... 
&gt;&gt;&gt; runner(f, lambda: (random.randint(1, 1000),))()
603
385
321
etc.
</snippet></ROW><ROW><id>8874880</id><snippet>callable</snippet></ROW><ROW><id>8874880</id><snippet>f</snippet></ROW><ROW><id>8874880</id><snippet>callable</snippet></ROW><ROW><id>8874880</id><snippet>f</snippet></ROW><ROW><id>8874880</id><snippet>&gt;&gt;&gt; def runner(f, callable):
...   def inner(*args, **kwds):
...     for i in xrange(1000):
...       pos = list(callable())
...       pos.extend(args)
...       f(*pos, **kwds)
...   return inner
... 
&gt;&gt;&gt; def f(a, b, c, d = 3):
...   print a, b, c, d
... 
&gt;&gt;&gt; runner(f, lambda: (random.randint(1,1000),))(3, 5, d = 7)
771 3 5 7
907 3 5 7
265 3 5 7
</snippet></ROW><ROW><id>8874969</id><snippet>secondary_system = A * primary_system + b
</snippet></ROW><ROW><id>8874969</id><snippet>A</snippet></ROW><ROW><id>8874969</id><snippet>b</snippet></ROW><ROW><id>8874969</id><snippet>secondary_system_coords2 = A2 * primary_system2,
</snippet></ROW><ROW><id>8874969</id><snippet>secondary_system</snippet></ROW><ROW><id>8874969</id><snippet>[secondary_system,1]</snippet></ROW><ROW><id>8874969</id><snippet>primary_system</snippet></ROW><ROW><id>8874969</id><snippet>[primary_system,1]</snippet></ROW><ROW><id>8874969</id><snippet>A2</snippet></ROW><ROW><id>8874969</id><snippet>[   A   b ]
[ 0,0,0,1 ]
</snippet></ROW><ROW><id>8874969</id><snippet>y = A2 x
</snippet></ROW><ROW><id>8874969</id><snippet>A2</snippet></ROW><ROW><id>8874969</id><snippet>y</snippet></ROW><ROW><id>8874969</id><snippet>secondary_system</snippet></ROW><ROW><id>8874969</id><snippet>x</snippet></ROW><ROW><id>8874969</id><snippet>primary_system</snippet></ROW><ROW><id>8874969</id><snippet>A2</snippet></ROW><ROW><id>8874969</id><snippet>x</snippet></ROW><ROW><id>8874969</id><snippet>A2 = y*x^(-1)
</snippet></ROW><ROW><id>8874969</id><snippet>x</snippet></ROW><ROW><id>8874969</id><snippet>x</snippet></ROW><ROW><id>8874969</id><snippet>y</snippet></ROW><ROW><id>8874969</id><snippet>x</snippet></ROW><ROW><id>8874969</id><snippet>x = [ primary_system1 | primary_system2 | primary_system3 | primary_system4 ]
</snippet></ROW><ROW><id>8874969</id><snippet>primary_systemi</snippet></ROW><ROW><id>8874969</id><snippet>y</snippet></ROW><ROW><id>8874969</id><snippet>A2</snippet></ROW><ROW><id>8874969</id><snippet>transformed = A2 * point_to_transform
</snippet></ROW><ROW><id>8874969</id><snippet>numpy</snippet></ROW><ROW><id>8874969</id><snippet>import numpy as np
def solve_affine( p1, p2, p3, p4, s1, s2, s3, s4 ):
    x = np.transpose(np.matrix([p1,p2,p3,p4]))
    y = np.transpose(np.matrix([s1,s2,s3,s4]))
    # add ones on the bottom of x and y
    x = np.vstack((x,[1,1,1,1]))
    y = np.vstack((y,[1,1,1,1]))
    # solve for A2
    A2 = y * x.I
    # return function that takes input x and transforms it
    # don't need to return the 4th row as it is 
    return lambda x: (A2*np.vstack((np.matrix(x).reshape(3,1),1)))[0:3,:]
</snippet></ROW><ROW><id>8874969</id><snippet>transformFn = solve_affine( primary_system1, primary_system2, 
                            primary_system3, primary_system4,
                            secondary_system1, secondary_system2,
                            secondary_system3, secondary_system4 )

# test: transform primary_system1 and we should get secondary_system1
np.matrix(secondary_system1).T - transformFn( primary_system1 )
# np.linalg.norm of above is 0.02555

# transform another point (x,y,z).
transformed = transformFn((x,y,z))
</snippet></ROW><ROW><id>8874969</id><snippet>primary_systemx</snippet></ROW><ROW><id>8874969</id><snippet>secondary_systemx</snippet></ROW><ROW><id>8875016</id><snippet>pygame.event.get()
while not pygame.mouse.get_pressed()[0]:
    #DO SOMETHING
    pygame.event.get()
</snippet></ROW><ROW><id>8875236</id><snippet>os.chmod(user_dir, 02775)
</snippet></ROW><ROW><id>8875243</id><snippet>None</snippet></ROW><ROW><id>8875243</id><snippet>def print_stuff():
    print "Hello, World"

print print_stuff()
&gt; Hello, World
&gt; None

# But print_stuff prints stuff, so you don't need to print it too:

print_stuff()
&gt; Hello, World
</snippet></ROW><ROW><id>8875258</id><snippet>class Foo(object):
    def __init__(self): pass

x = Foo()
</snippet></ROW><ROW><id>8875258</id><snippet>self</snippet></ROW><ROW><id>8875258</id><snippet>__init__</snippet></ROW><ROW><id>8875258</id><snippet>x</snippet></ROW><ROW><id>8875462</id><snippet>self.</snippet></ROW><ROW><id>8875462</id><snippet>enter = Entry(self.search_frame, width=30).pack(side=LEFT, expand=NO, padx=5, pady=5, ipadx=5, ipady=5)</snippet></ROW><ROW><id>8875462</id><snippet>self.enter = Entry(self.search_frame, width=30).pack(side=LEFT, expand=NO, padx=5, pady=5, ipadx=5, ipady=5)</snippet></ROW><ROW><id>8875462</id><snippet>if enter.get()==fruit_bowl[x][0]:</snippet></ROW><ROW><id>8875462</id><snippet>if self.enter.get()==fruit_bowl[x][0]:</snippet></ROW><ROW><id>8875514</id><snippet>__del__</snippet></ROW><ROW><id>8875632</id><snippet>def main():
    q = Queue.Queue()
    for i in range(3):
        t = threading.Timer(1, run_function, [q, i])
        t.start()

    while True:
        item = q.get()
        save_to_disk(item)
        q.task_done()

def run_function(q, i):
    t = threading.Timer(1, run_function, [q, i])
    t.start()
    q.put(function_with_delay(i))
</snippet></ROW><ROW><id>8875823</id><snippet>key</snippet></ROW><ROW><id>8875823</id><snippet>key</snippet></ROW><ROW><id>8875823</id><snippet># -*- coding: utf-8 -*-
import heapq

class MyHeap(object):
   def __init__(self, initial=None, key=lambda x:x):
       self.key = key
       if initial:
           self._data = [(key(item), item) for item in initial]
           heapq.heapify(self._data)
       else:
           self._data = []

   def push(self, item):
       heapq.heappush(self._data, (self.key(item), item))

   def pop(self):
       return heapq.heappop(self._data)[1]
</snippet></ROW><ROW><id>8875928</id><snippet>h = []
for b in range(1, 9):
    for k in range(b, b*10):
        if k%2==0:
            for j in range(2*k, k*k):
                h.append(b)
</snippet></ROW><ROW><id>8875928</id><snippet>&gt;&gt;&gt; for i,j in itertools.groupby(h):
    print(i, sum(1 for i in j))

1 80
2 960
3 3640
4 9120
5 18392
6 32472
7 52328
8 79008
</snippet></ROW><ROW><id>8876197</id><snippet>list_of_dicts = xmlrpc_call(...)
objects_to_put = []

for row in list_of_dicts.items():
    object = DatastoreModel(**row)
    object.x = ...
    objects_to_put.append(object)
    if len(objects_to_put) &gt; 10:
        db.put_async(objects_to_put)
        del objects_to_put[:]

db.put_async(objects_to_put)
</snippet></ROW><ROW><id>8876344</id><snippet>&gt;&gt;&gt; values = '12,12,12'
&gt;&gt;&gt; values = ast.literal_eval(values)
&gt;&gt;&gt; datetime.time(*values)
datetime.time(12, 12, 12)
</snippet></ROW><ROW><id>8876344</id><snippet>values = (int(i) for i in values.split(','))
</snippet></ROW><ROW><id>8876344</id><snippet>values = map(int, values.split(','))
</snippet></ROW><ROW><id>8876467</id><snippet>User Module Folder</snippet></ROW><ROW><id>8876467</id><snippet>Preferences -&gt; Script Engine</snippet></ROW><ROW><id>8876467</id><snippet>~/autokey</snippet></ROW><ROW><id>8876467</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>8876467</id><snippet>sys.path</snippet></ROW><ROW><id>8876467</id><snippet>User Module Folder</snippet></ROW><ROW><id>8876467</id><snippet>sys.path</snippet></ROW><ROW><id>8876566</id><snippet>QTable</snippet></ROW><ROW><id>8876712</id><snippet>import pygame
</snippet></ROW><ROW><id>8876712</id><snippet>if pygame.key.get_pressed()[pygame.K_SPACE]:
    pygame.quit
</snippet></ROW><ROW><id>8876747</id><snippet>pygame.init</snippet></ROW><ROW><id>8876747</id><snippet>pygame</snippet></ROW><ROW><id>8877085</id><snippet>SELECT Image.key
  FROM Image
  JOIN TagRelationship
    ON Image.ID = TagRelationship.ImageID
  JOIN Tag
    ON TagRelationship.TagID = Tag.ID
 GROUP BY Image.key
HAVING SUM(Tag.tag IN (&lt;i&gt;mandatory tags&lt;/i&gt; )) = &lt;i&gt;N&lt;/i&gt;  /*the number of mandatory tags*/
   AND SUM(Tag.tag IN (&lt;i&gt;optional tags&lt;/i&gt;  )) &gt; 0
   AND SUM(Tag.tag IN (&lt;i&gt;prohibited tags&lt;/i&gt;)) = 0
</snippet></ROW><ROW><id>8877085</id><snippet>SELECT Image.key
  FROM Image
  JOIN TagRelationship
    ON Image.ID = TagRelationship.ImageID
  JOIN Tag
    ON TagRelationship.TagID = Tag.ID
 GROUP BY Image.key
HAVING SUM(CASE WHEN Tag.tag IN (&lt;i&gt;mandatory tags&lt;/i&gt; ) THEN 1 ELSE 0 END) = &lt;i&gt;N&lt;/i&gt;  /*the number of mandatory tags*/
   AND SUM(CASE WHEN Tag.tag IN (&lt;i&gt;optional tags&lt;/i&gt;  ) THEN 1 ELSE 0 END) &gt; 0
   AND SUM(CASE WHEN Tag.tag IN (&lt;i&gt;prohibited tags&lt;/i&gt;) THEN 1 ELSE 0 END) = 0
</snippet></ROW><ROW><id>8877085</id><snippet>SELECT Image.key
  FROM Image
  JOIN TagRelationship
    ON Image.ID = TagRelationship.ImageID
  JOIN Tag
    ON TagRelationship.TagID = Tag.ID
 GROUP BY Image.key
HAVING COUNT(CASE WHEN Tag.tag IN (&lt;i&gt;mandatory tags&lt;/i&gt; ) THEN 1 END) = &lt;i&gt;N&lt;/i&gt;  /*the number of mandatory tags*/
   AND COUNT(CASE WHEN Tag.tag IN (&lt;i&gt;optional tags&lt;/i&gt;  ) THEN 1 END) &gt; 0
   AND COUNT(CASE WHEN Tag.tag IN (&lt;i&gt;prohibited tags&lt;/i&gt;) THEN 1 END) = 0
</snippet></ROW><ROW><id>8877411</id><snippet>UserForm</snippet></ROW><ROW><id>8877411</id><snippet>user</snippet></ROW><ROW><id>8877411</id><snippet>forms.Form</snippet></ROW><ROW><id>8877411</id><snippet>&gt;&gt;&gt; f = UserForm(None, {})
&gt;&gt;&gt; f.is_bound
True
</snippet></ROW><ROW><id>8877555</id><snippet>from google.appengine.ext import webapp
import json

class Handler(webapp.RequestHandler):
    def post(self):

        # Convert JSON from the request to Python objects.
        data = json.loads(self.request.body)

        # For your sample input, data will be a list of dicts.
        for person in data:
            name = person['name']
            value = person['value']
</snippet></ROW><ROW><id>8878221</id><snippet>1) Add a Frame widget, select a wx.Frame.  

2) Customize wx.Frame properties:  
     Give the Frame a MenuBar (the property dialog for the menubar appears).  
     Customize MenuBar: Add File, Edit...  
     Go back to the Frame properties' View (click the Frame icon on the wxglade Tree View).  
     (not nice but it's the way I found to go in and out from Menu and StatusBar dialogs).  
     Give the wx.Frame a StatusBar. Go back (click the Frame icon in the wxglade Tree View).  

3) Create 3 vertical slots from the default BoxSizer (right-click on the sizer + add * 3)
      1st slot: 
          Add a BoxSizer with 5 horizontal slots
          Set proportion=0 to the sizer, set border=5 and mark wxALL
          Add 4 Buttons and a Spacer in those slots
          Mark EXPAND and set proportion=1 in the Spacer properties.

      2nd slot:
          Add a SplitterWindow. Select Vertical type.
          Optionally set border=5 with wxALL
          Add a BoxSizer to each section of the SplitterWindow
          At its left, add a ListCtrl
          At its right, add a NoteBook
          Customize NoteBook:
              Add 4 sheets.
              Add BoxSizer with 2 vertical slots to first notebook sheet.
                  1st slot: insert a wx.Panel.
                  2nd slot: add a BoxSizer with 3 horizontal slots.
                      Set proportion=0 to the sizer.
                      Add 2 buttons and 1 Spacer in those slots.
                      Mark EXPAND and set proportion=1 in the Spacer properties.

      3rd slot:
          Add a BoxSizer with 5 horizontal slots.
          Set proportion=0 to the sizer, set border=5 with wxALL
          Add 2 Buttons, 1 Spacer and 2 Buttons more.
          Mark EXPAND and set proportion=1 in the Spacer properties.

4) Give background colour to the Frame.
  (Choose wisely, you still have 5 minutes left of the 15 allotted).
</snippet></ROW><ROW><id>8878531</id><snippet>__init__</snippet></ROW><ROW><id>8878531</id><snippet>self</snippet></ROW><ROW><id>8878531</id><snippet>DoIt</snippet></ROW><ROW><id>8878531</id><snippet>Finalize</snippet></ROW><ROW><id>8878535</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>8878535</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>8878535</id><snippet>['s', 'o', 'm', 'e', 'T', 'e', 's', 't', 'F', 'i', 'l', 'e']</snippet></ROW><ROW><id>8878535</id><snippet>parser.parse_args(['someTestFile'])</snippet></ROW><ROW><id>8878789</id><snippet>class AForm(forms.Form):
    ...

    def clean(self):
        cd = self.cleaned_data
        widget_id = self['field'].auto_id
</snippet></ROW><ROW><id>8878789</id><snippet>Form['field']</snippet></ROW><ROW><id>8878789</id><snippet>BaseForm.__getitem__</snippet></ROW><ROW><id>8878789</id><snippet>BoundField</snippet></ROW><ROW><id>8878789</id><snippet>BoundField</snippet></ROW><ROW><id>8878789</id><snippet>auto_id</snippet></ROW><ROW><id>8878789</id><snippet>prefix</snippet></ROW><ROW><id>8878832</id><snippet>from django.core.mail import send_mail

send_mail('Subject here', 'Here is the message.', 'from@example.com',
    ['to@example.com'], fail_silently=False)
</snippet></ROW><ROW><id>8879818</id><snippet>&gt;&gt;&gt; print "foo\\nbar\\n\\tbaz"
foo\nbar\n\tbaz
&gt;&gt;&gt; print "foo\\nbar\\n\\tbaz".decode('string_escape')
foo
bar
        baz
</snippet></ROW><ROW><id>8880037</id><snippet>csv</snippet></ROW><ROW><id>8880037</id><snippet>import csv

with open('data.csv') as f:
    for row in csv.reader(f):
        print row[13]
</snippet></ROW><ROW><id>8880470</id><snippet>QString</snippet></ROW><ROW><id>8880470</id><snippet>sip.setapi</snippet></ROW><ROW><id>8880470</id><snippet>import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
c = QtGui.QComboBox()
c.addItems(["one","two"])
print c.currentText(), type(c.currentText())
c.show()
sys.exit(app.exec_())

# Outputs
one &lt;class 'PyQt4.QtCore.QString'&gt;
</snippet></ROW><ROW><id>8880470</id><snippet>sip.setapi</snippet></ROW><ROW><id>8880470</id><snippet>import sip
sip.setapi("QString",2)

import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
c = QtGui.QComboBox()
c.addItems(["one","two"])
print c.currentText(), type(c.currentText())
c.show()
sys.exit(app.exec_())

# Outputs
one &lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>8880717</id><snippet>--auto-servernum</snippet></ROW><ROW><id>8880717</id><snippet>xvfb-run</snippet></ROW><ROW><id>8880717</id><snippet>Xvfb</snippet></ROW><ROW><id>8880717</id><snippet>:99</snippet></ROW><ROW><id>8880768</id><snippet>ls -l</snippet></ROW><ROW><id>8880768</id><snippet>csv.DictReader</snippet></ROW><ROW><id>8880768</id><snippet>import subprocess
import csv

process = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)
stdout, stderr = process.communicate()

reader = csv.DictReader(stdout.decode('ascii').splitlines(),
                        delimiter=' ', skipinitialspace=True,
                        fieldnames=['permissions', 'links',
                                    'owner', 'group', 'size',
                                    'date', 'time', 'name'])

for row in reader:
    print(row)
</snippet></ROW><ROW><id>8880768</id><snippet>ls -l</snippet></ROW><ROW><id>8880768</id><snippet>{'group': '&lt;group_name&gt;',
 'name': '&lt;filename&gt;',
 'links': '1',
 'date': '&lt;modified_date&gt;',
 'time': '&lt;modified_time&gt;',
 'owner': '&lt;user_name&gt;',
 'permissions': '-rw-rw-r--',
 'size': '&lt;size&gt;'}
</snippet></ROW><ROW><id>8880784</id><snippet># __init__.py
# re-export run.run as run
from .run import run
</snippet></ROW><ROW><id>8880784</id><snippet>__init__.py</snippet></ROW><ROW><id>8880784</id><snippet>run.py</snippet></ROW><ROW><id>8880784</id><snippet># run.py
def run(*args):
    print args  # real application code belongs here

if __name__ == "__main__":
    run(*sys.argv[1:])
</snippet></ROW><ROW><id>8880866</id><snippet>PyGTK</snippet></ROW><ROW><id>8880961</id><snippet>pip</snippet></ROW><ROW><id>8880961</id><snippet>$ sudo pip install http://svn.edgewall.org/repos/babel/trunk
</snippet></ROW><ROW><id>8880961</id><snippet>pip</snippet></ROW><ROW><id>8880961</id><snippet>$ sudo pip install Flask-Babel
...
Requirement already satisfied (use --upgrade to upgrade): Babel in /usr/local/lib/python2.7/dist-packages (from Flask-Babel)
...
</snippet></ROW><ROW><id>8880961</id><snippet>setup.py</snippet></ROW><ROW><id>8880961</id><snippet>pip</snippet></ROW><ROW><id>8881058</id><snippet>u</snippet></ROW><ROW><id>8881058</id><snippet>v</snippet></ROW><ROW><id>8881058</id><snippet>x</snippet></ROW><ROW><id>8881058</id><snippet>y</snippet></ROW><ROW><id>8881058</id><snippet>barbs</snippet></ROW><ROW><id>8881058</id><snippet>x, y = m(lon, lat)
x1, y1 = m(lon+u, lat+v)
u_map, v_map = x1-x, y1-y
</snippet></ROW><ROW><id>8881058</id><snippet>import numpy
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

# Define locations of my vectors
lat = numpy.array([50.1,46.2,51.6,52.2,54.4])
lon = numpy.array([-3.3,-1.0,-5.2,-1.2,0.2])

# Define some east-west vectors to illustrate the problem
u = numpy.array([5,5,5,5,5])
v = numpy.array([0,0,0,0,0])

# Set up map projection
m = Basemap(llcrnrlon=-15.,llcrnrlat=46.,urcrnrlon=15.,urcrnrlat=59.,
            projection='lcc',lat_1=40.,lat_2=50.,lon_0=-50.,
            resolution ='l')

# Calculate positions of vectors on map projection 
x,y = m(lon,lat)

# Calculate the orientation of the vectors
x1, y1 = m(lon+u, lat+v)
u_map, v_map = x1-x, y1-y

# Rescale the magnitudes of the vectors...
mag_scale = np.hypot(u_map, v_map) / np.hypot(u, v)
u_map /= mag_scale
v_map /= mag_scale

# Draw barbs
m.barbs(x,y,u_map,v_map, length=7, color='red')

# Draw some grid lines for reference
parallels = numpy.arange(-80.,90,20.)
meridians = numpy.arange(0.,360.,20.)
m.drawparallels(parallels)
m.drawmeridians(meridians)
m.drawcoastlines(linewidth=0.5)

plt.show()
</snippet></ROW><ROW><id>8881064</id><snippet>paste</snippet></ROW><ROW><id>8881124</id><snippet>project1</snippet></ROW><ROW><id>8881124</id><snippet>sys.path</snippet></ROW><ROW><id>8881124</id><snippet>__init__.py</snippet></ROW><ROW><id>8881124</id><snippet>from project1.utils.utils import cool_function</snippet></ROW><ROW><id>8881124</id><snippet>from ..utils.utils import cool_function</snippet></ROW><ROW><id>8881149</id><snippet>try:
    response = urllib2.urlopen.....
except urllib2.HTTPError as e:
    error = e.read() # this will be your error message
    print error
</snippet></ROW><ROW><id>8881265</id><snippet>__all__</snippet></ROW><ROW><id>8881866</id><snippet>%</snippet></ROW><ROW><id>8881866</id><snippet>pagination +='&lt;li&gt;&lt;a href="/main/?page=%(current_link)s&gt;%(current)s&lt;/a&gt;&lt;/li&gt;' % \
                     {'current_link': current_link, 'current': current_link}
</snippet></ROW><ROW><id>8881866</id><snippet>link</snippet></ROW><ROW><id>8881866</id><snippet>pagination +='&lt;li&gt;&lt;a href="/main/?page=%(current_link)s%(link)s&gt;%(current)s&lt;/a&gt;&lt;/li&gt;' % \
                     {'link': link, 'current_link': current_link, 'current': current_link}
</snippet></ROW><ROW><id>8881967</id><snippet>try:
    from mylibrary.codecs import optional
except ImportError, e:
    if e.message != 'No module named optional':
        raise
</snippet></ROW><ROW><id>8881973</id><snippet>axis</snippet></ROW><ROW><id>8881973</id><snippet>x.min()</snippet></ROW><ROW><id>8881973</id><snippet>x.max()</snippet></ROW><ROW><id>8881973</id><snippet>OverflowError</snippet></ROW><ROW><id>8881973</id><snippet>y += 0.3 * y.max() np.random...</snippet></ROW><ROW><id>8881973</id><snippet>0.1</snippet></ROW><ROW><id>8881973</id><snippet>import matplotlib.pyplot as plt
import numpy as np
np.random.seed(1977)

# Generate some very noisy but interesting data...
num = 1e7
x = np.linspace(0, 10, num)
y = np.random.random(num) - 0.5
y.cumsum(out=y) 
y += 0.3 * y.max() * np.random.random(num)

fig, ax = plt.subplots()

# Wrap the array into a 2D array of chunks, truncating the last chunk if 
# chunksize isn't an even divisor of the total size.
# (This part won't use _any_ additional memory)
chunksize = 10000
numchunks = y.size // chunksize 
ychunks = y[:chunksize*numchunks].reshape((-1, chunksize))
xchunks = x[:chunksize*numchunks].reshape((-1, chunksize))

# Calculate the max, min, and means of chunksize-element chunks...
max_env = ychunks.max(axis=1)
min_env = ychunks.min(axis=1)
ycenters = ychunks.mean(axis=1)
xcenters = xchunks.mean(axis=1)

# Now plot the bounds and the mean...
ax.fill_between(xcenters, min_env, max_env, color='gray', 
                edgecolor='none', alpha=0.5)
ax.plot(xcenters, ycenters)

fig.savefig('temp.png', dpi=600)
</snippet></ROW><ROW><id>8882019</id><snippet>&gt;&gt;&gt; d = {'01234':'value'}
&gt;&gt;&gt; print d.items()
[('01234', 'value')]
</snippet></ROW><ROW><id>8882019</id><snippet>int</snippet></ROW><ROW><id>8882019</id><snippet> fo.write("key+";"+value+";"+words[key]\n")
</snippet></ROW><ROW><id>8882019</id><snippet>places = {}
for line in f:
    post, place, _rest = line.split('\t',2)
    places[post] = place
f.close()

times = {}
for line in f1:
    _id, post, _rest = line.split(';',2)
    times[post] = times.get(post, 0) + 1
f1.close()

for k,v in times.iteritems():
    fo.write("%s;%s;%s\n" % (k,v,places[k]))
fo.close()

number = sum(times.itervalues())
number_unique = len(times)
number_alike = number - number_unique

print number, number_unique, number_alike
</snippet></ROW><ROW><id>8882042</id><snippet>airport --help</snippet></ROW><ROW><id>8882042</id><snippet>-x        --xml                Print info as XML
</snippet></ROW><ROW><id>8882042</id><snippet>plistlib</snippet></ROW><ROW><id>8882042</id><snippet>#!/usr/bin/env python
from subprocess import Popen, PIPE
from plistlib import readPlist
from pprint import pprint

AirportPath = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

proc = Popen([AirportPath, '-s', '-x'], stdout=PIPE)

ssid_data = readPlist(proc.stdout)
pprint(ssid_data)
</snippet></ROW><ROW><id>8882309</id><snippet>db_types = (d[1] for d in db1_cursor.description)
db2_cursor.setinputsizes(*db_types)
</snippet></ROW><ROW><id>8882625</id><snippet>import webbrowser
webbrowser.open('www.youtube.com')
</snippet></ROW><ROW><id>8882625</id><snippet>C:\Users\yourusername\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</snippet></ROW><ROW><id>8882625</id><snippet>C:\Documents and Settings\yourusername\Start Menu\Programs\Startup</snippet></ROW><ROW><id>8882809</id><snippet>find /usr/bin /bin/ /usr/local/bin -iname 'python*'
</snippet></ROW><ROW><id>8883046</id><snippet>def isValidDate(d,m,y):
    if(d&gt;=1 and d&lt;=31 and m&gt;=1 and m&lt;=12):
        global dd, mm, yy
        dd,mm,yy=d,m,y
        ...
</snippet></ROW><ROW><id>8883125</id><snippet>numpy.datetime64</snippet></ROW><ROW><id>8883125</id><snippet>1e6</snippet></ROW><ROW><id>8883125</id><snippet>import numpy as np

# Generate a few unix time stamps near today...
x = np.arange(1326706251, 1326706260)

# Convert to datetimes...
x *= 1e6
x = x.view(np.datetime64)

print x
</snippet></ROW><ROW><id>8883125</id><snippet>[2012-01-16 09:30:51 2012-01-16 09:30:52 2012-01-16 09:30:53
 2012-01-16 09:30:54 2012-01-16 09:30:55 2012-01-16 09:30:56
 2012-01-16 09:30:57 2012-01-16 09:30:58 2012-01-16 09:30:59]
</snippet></ROW><ROW><id>8883489</id><snippet>&gt;&gt;&gt; d = (
 ("row a", "a1","a2","a3"),
 ("another row", "b1"),
 ("c", "x", "y", "a long string")
)
</snippet></ROW><ROW><id>8883489</id><snippet>&gt;&gt;&gt; col_size = {}
&gt;&gt;&gt; for row in d:
        for i, col in enumerate(row):
            col_size[i] = max(col_size.get(i, 0), len(col))

&gt;&gt;&gt; ncols = len(col_size)
</snippet></ROW><ROW><id>8883489</id><snippet>&gt;&gt;&gt; result = []
&gt;&gt;&gt; for row in d:
        row = list(row) + [''] * (ncols - len(row))
        for i, col in enumerate(row):
            row[i] = col.ljust(col_size[i])
        result.append(row)
</snippet></ROW><ROW><id>8883489</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(result)
[['row a      ', 'a1', 'a2', 'a3           '],
 ['another row', 'b1', '  ', '             '],
 ['c          ', 'x ', 'y ', 'a long string']]
</snippet></ROW><ROW><id>8883489</id><snippet>def align(array):
    col_size = {}
    for row in array:
        for i, col in enumerate(row):
            col_size[i] = max(col_size.get(i, 0), len(col))
    ncols = len(col_size)
    result = []
    for row in array:
        row = list(row) + [''] * (ncols - len(row))
        for i, col in enumerate(row):
            row[i] = col.ljust(col_size[i])
        result.append(row)
    return result
</snippet></ROW><ROW><id>8883570</id><snippet>r = cursor.execute("select to_char( thetime, 'DD-MON-RR HH24.MI.SSXFF' ) from my_table")
</snippet></ROW><ROW><id>8883812</id><snippet>pygame.font.Font</snippet></ROW><ROW><id>8884226</id><snippet>&gt;&gt;&gt; (e*d) % phi
1
</snippet></ROW><ROW><id>8884226</id><snippet>&gt;&gt;&gt; e = 17
&gt;&gt;&gt; d = 53
&gt;&gt;&gt; phi = 60
&gt;&gt;&gt; (e*d) % phi
1
</snippet></ROW><ROW><id>8884420</id><snippet>unique=True</snippet></ROW><ROW><id>8884420</id><snippet>Category</snippet></ROW><ROW><id>8884420</id><snippet>CategoryGroup</snippet></ROW><ROW><id>8884420</id><snippet>Category.save()</snippet></ROW><ROW><id>8884420</id><snippet>self.pk</snippet></ROW><ROW><id>8884420</id><snippet>super(Category, self).save(*args, **kwargs)</snippet></ROW><ROW><id>8884511</id><snippet>save</snippet></ROW><ROW><id>8884511</id><snippet>User</snippet></ROW><ROW><id>8884511</id><snippet>Business</snippet></ROW><ROW><id>8884511</id><snippet>save</snippet></ROW><ROW><id>8884511</id><snippet>class SignupFormExtra(SignupForm):
    address = forms.CharField(label=_(u'Address'),max_length=30,required=False)
    contact = forms.CharField(label=_(u'Contact'),max_length=30,required=False)
    business = forms.CharField(label=_(u'Business Name'),max_length=30,required=False)

    def save(self):
        """
        Override the save method to save the first and last name to the user
        field.

        """
        # Original save method returns the user
        user = super(SignupFormExtra, self).save()

        # Get the profile, the `save` method above creates a profile for each
        # user because it calls the manager method `create_user`.
        # See: https://github.com/bread-and-pepper/django-userena/blob/master/userena/managers.py#L65
        user_profile = user.get_profile()

        # Be sure that you have validated these fields with `clean_` methods.
        # Garbage in, garbage out.
        user_profile.address = self.cleaned_data['address']
        user_profile.contact = self.cleaned_data['contact']
        user_profile.save()

        # Business
        business = self.cleaned_data['business']
        business = Business.objects.get_or_create(name=business)
        business.save()

        # Return the user, not the profile!
        return user
</snippet></ROW><ROW><id>8884511</id><snippet>url(r'^accounts/signup/$',
        userena_views.signup,
        {'signup_form': SignupFormExtra}),
</snippet></ROW><ROW><id>8884563</id><snippet>a</snippet></ROW><ROW><id>8884563</id><snippet>any</snippet></ROW><ROW><id>8884563</id><snippet>any(word in text  for word in a)
</snippet></ROW><ROW><id>8884563</id><snippet>a</snippet></ROW><ROW><id>8884563</id><snippet>add</snippet></ROW><ROW><id>8884563</id><snippet>print('Number of words in a that match text: %s' %
      sum(word in text  for word in a))
</snippet></ROW><ROW><id>8884563</id><snippet>test</snippet></ROW><ROW><id>8884563</id><snippet>testing</snippet></ROW><ROW><id>8884563</id><snippet>words = set(text.split())
any(word in words  for word in a)
</snippet></ROW><ROW><id>8884567</id><snippet>list = ['a', 'b', 'c']
# Insert newlines between every element, with a * prepended
inserted_list = '\n'.join(['* ' + x for x in list])

template = '''&lt;html&gt;
&lt;title&gt;Attributes&lt;/title&gt;
%s
&lt;/html&gt;''' %(inserted_list)


&gt;&gt;&gt; print template
&lt;html&gt;
&lt;title&gt;Attributes&lt;/title&gt;
* a
* b
* c
&lt;/html&gt;
</snippet></ROW><ROW><id>8884638</id><snippet>import configparser

config = configparser.ConfigParser()
config.read('FILE.INI')
print(config['DEFAULT']['path'])     # -&gt; "/path/name/"
config['DEFAULT']['path'] = '/var/shared/'    # update
config['DEFAULT']['default_message'] = 'Hey! help me!!'   # create

with open('FILE.INI', 'w') as configfile:    # save
    config.write(configfile)
</snippet></ROW><ROW><id>8884797</id><snippet>DlgDbError.py</snippet></ROW><ROW><id>8884797</id><snippet>DlgDbError_ui.py</snippet></ROW><ROW><id>8884797</id><snippet>pyuic4</snippet></ROW><ROW><id>8884797</id><snippet>Ui_DlgDbError</snippet></ROW><ROW><id>8884797</id><snippet>setupUi</snippet></ROW><ROW><id>8884797</id><snippet>DlgDbError</snippet></ROW><ROW><id>8884797</id><snippet>DlgDbError</snippet></ROW><ROW><id>8884797</id><snippet>setupUi</snippet></ROW><ROW><id>8884797</id><snippet>DlgDbError</snippet></ROW><ROW><id>8884797</id><snippet>accept()</snippet></ROW><ROW><id>8884797</id><snippet>QDialog</snippet></ROW><ROW><id>8884797</id><snippet>QDialog</snippet></ROW><ROW><id>8884797</id><snippet>setupUi</snippet></ROW><ROW><id>8884797</id><snippet>AttributeError</snippet></ROW><ROW><id>8884797</id><snippet>from DlgDbError_ui import Ui_DlgDbError

class MyDlgDbError(Ui_DlgDbError):
    def __init__(self, parent=None)
        self.dialog = QtGui.QDialog(parent)
        self.setupUi(self.dialog)
        ...
</snippet></ROW><ROW><id>8884920</id><snippet>defaultdict</snippet></ROW><ROW><id>8884920</id><snippet>from collections import defaultdict

earnings = defaultdict(float)  # float has a default value of 0.
</snippet></ROW><ROW><id>8884920</id><snippet>earnings[currency] = value
</snippet></ROW><ROW><id>8884920</id><snippet>earnings["USD"]
</snippet></ROW><ROW><id>8884962</id><snippet>def itemIsDict(item):
    return isinstance(item, dict)
</snippet></ROW><ROW><id>8885283</id><snippet>&gt;&gt;&gt; float("0000.0000")
0.0
&gt;&gt;&gt; float("0006.5400")
6.54
&gt;&gt;&gt; float("0000.5400")
0.54
</snippet></ROW><ROW><id>8885283</id><snippet>'%0.4f' % float("0000.5400")</snippet></ROW><ROW><id>8885522</id><snippet>p.close()
p.join()
</snippet></ROW><ROW><id>8885522</id><snippet>map()</snippet></ROW><ROW><id>8885551</id><snippet>&gt;&gt;&gt; alist = [{'position': 'first'}, {'position': 'second'}, {'position': 'third'}]
&gt;&gt;&gt; print alist[-1]['position']
{'position': 'third'}
&gt;&gt;&gt; print alist[-1]['position']
third
</snippet></ROW><ROW><id>8885688</id><snippet>for x in numbers:
    print "{:10.4f}".format(x)
</snippet></ROW><ROW><id>8885688</id><snippet>   23.2300
    0.1233
    1.0000
    4.2230
 9887.2000
</snippet></ROW><ROW><id>8885786</id><snippet>(r'^home/?$', 'user_home_page'),
</snippet></ROW><ROW><id>8885877</id><snippet>__init__</snippet></ROW><ROW><id>8885877</id><snippet>initialize_vars</snippet></ROW><ROW><id>8885877</id><snippet>_initialize_vars</snippet></ROW><ROW><id>8885940</id><snippet>def getScreen():
    # Grab image and crop it to the desired window. Find pixel borders manually.
    box = (left, top, right, bottom)        
    im = ImageGrab.grab().crop(box)
    #im.save('testcrop.jpg')  # optionally save your crop

    for y in reversed(range(8)):
        for x in reversed(range(8)):
            #sqh,sqw are the height and width of each piece.
            #each pieceim is one of the game piece squares
            piecebox = ( sqw*(x), sqh*(y), sqw*(x+1), sqh*(y+1))
            pieceim = im.crop(piecebox)
            #pieceim.save('piececrop_xy_'+ str(x) + str(y) + '.jpg')

            stats = ImageStat.Stat(pieceim)
            statsmean = stats.mean
            Rows[x][y] = whichpiece(statsmean)
</snippet></ROW><ROW><id>8885940</id><snippet>rgbdict = {
           'blue':[65.48478993, 149.0030965, 179.4636593],  #1
           'red':[105.3613444,55.95710092, 36.07481793],   #2
           ......
            }
 def whichpiece(statsmean):
        bestScore = 100
        curScore= 0
        pieceColor = 'empty'
        for key in rgbdict.keys():
            curScore = (math.pow( (statsmean[0]/255) - (rgbdict[key][0]/255), 2)
                +  math.pow( (statsmean[1]/255) - (rgbdict[key][1]/255), 2)
                +  math.pow( (statsmean[2]/255) - (rgbdict[key][2]/255), 2) )
            if curScore &lt; bestScore:
                pieceColor = key
                bestScore = curScore  
        return piececolor
</snippet></ROW><ROW><id>8886059</id><snippet>csv</snippet></ROW><ROW><id>8886059</id><snippet>with open("myfile.csv") as input_file:
   with open("output.csv", "wt") as output:
      output.write(input_file.readline())
      for line in input_file:
           parts = line.split('""')
           id = parts.split('"')[-1]
           output.write(parts[0] + id + parts[2])
</snippet></ROW><ROW><id>8886482</id><snippet>for number, row in enumerate(cursor.fetchall()):
    for column, cell in enumerate(row):
        sheet.write(number, column, cell)
</snippet></ROW><ROW><id>8886716</id><snippet>boys = ["b1", "b2", "b3"]
girls = ["g1", "g2", "g3"]
for girls_perm in itertools.permutations(girls):
    for b, g in zip(boys, girls_perm):
        print b + g,
    print
</snippet></ROW><ROW><id>8886716</id><snippet>b1g1 b2g2 b3g3
b1g1 b2g3 b3g2
b1g2 b2g1 b3g3
b1g2 b2g3 b3g1
b1g3 b2g1 b3g2
b1g3 b2g2 b3g1
</snippet></ROW><ROW><id>8886754</id><snippet>      L = primes(int(math.sqrt(perimeter)) #list of primes to divide the perimeter
#                ^   ^         ^         ^^
#nesting count   1   2         3         21
</snippet></ROW><ROW><id>8886797</id><snippet>from SimpleCV import *
img = Image('simplecv')
(r,g,b) = img.splitChannels(False) #we pass false to break into color channels, not greyscale
updated = ((r * 2) - (g * 0.5) - b)/4
updated.show()
</snippet></ROW><ROW><id>8887092</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>8887092</id><snippet>shell=True</snippet></ROW><ROW><id>8887092</id><snippet>No such file or directory</snippet></ROW><ROW><id>8887092</id><snippet>"htmldoc -t pdf --quiet '...</snippet></ROW><ROW><id>8887092</id><snippet>htmldoc = subprocess.Popen(
  ['/usr/bin/htmldoc', '-t', 'pdf', '--webpage', '-'], 
  stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
stdout, stderr = htmldoc.communicate(html)
</snippet></ROW><ROW><id>8887092</id><snippet>/usr/bin/htmldoc</snippet></ROW><ROW><id>8887092</id><snippet>-</snippet></ROW><ROW><id>8887092</id><snippet>html</snippet></ROW><ROW><id>8887092</id><snippet>stdin</snippet></ROW><ROW><id>8887092</id><snippet>htmldoc.communicate</snippet></ROW><ROW><id>8887092</id><snippet>stdout</snippet></ROW><ROW><id>8887092</id><snippet>stderr</snippet></ROW><ROW><id>8887128</id><snippet>class User(db.Model):
  username = db.StringProperty()

class Group(db.Model):
  users = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>8887128</id><snippet>groups = db.GqlQuery("SELECT * "
                     "FROM Group")        

for g in groups:                
   if user.key() not in g.users:                    
      group = g
      break

group.users.append(user.key())
</snippet></ROW><ROW><id>8887361</id><snippet>from itertools import combinations, islice

def cons(nums):
    if len(nums)%2 or len(nums)&lt;2:
        raise ValueError
    if len(nums) == 2:
        yield (nums,)
        return
    for c in islice(combinations(nums, 2), len(nums)-1):
        for sub in cons(tuple(set(nums) - set(c))):
            yield ((c,) + sub)

def constellations(n):
    return cons(range(1, n+1))

for c in constellations(6):
    print c
</snippet></ROW><ROW><id>8887361</id><snippet>((1, 2), (3, 4), (5, 6))
((1, 2), (3, 5), (4, 6))
((1, 2), (3, 6), (4, 5))
((1, 3), (2, 4), (5, 6))
((1, 3), (2, 5), (4, 6))
((1, 3), (2, 6), (4, 5))
((1, 4), (2, 3), (5, 6))
((1, 4), (2, 5), (3, 6))
((1, 4), (2, 6), (3, 5))
((1, 5), (2, 3), (4, 6))
((1, 5), (2, 4), (3, 6))
((1, 5), (2, 6), (3, 4))
((1, 6), (2, 3), (4, 5))
((1, 6), (2, 4), (3, 5))
((1, 6), (2, 5), (3, 4))
</snippet></ROW><ROW><id>8887361</id><snippet>constellations(8)</snippet></ROW><ROW><id>8887511</id><snippet>&lt;env&gt;/lib/pythonX.X/</snippet></ROW><ROW><id>8887511</id><snippet>no-global-site-packages.txt</snippet></ROW><ROW><id>8887511</id><snippet>--no-site-packages</snippet></ROW><ROW><id>8887511</id><snippet>% virtualenv --no-site-packages env.without
% virtualenv --system-site-packages env.with

% find env.without | sed 's/env.without//' &gt; files.without
% find env.with | sed 's/env.with//' &gt; files.with

% diff files.with*
230a231
&gt; /lib/python3.2/no-global-site-packages.txt
</snippet></ROW><ROW><id>8887579</id><snippet>current_thread().name</snippet></ROW><ROW><id>8887579</id><snippet>import threading

def cb_func():
    "The callback function."
    print 'Callback, in thread %s' % threading.current_thread().name

def th_func(callback):
    "The threaded function."
    # ...
    callback()

thr = threading.Thread(target=th_func, args=(cb_func,)).start()
</snippet></ROW><ROW><id>8887579</id><snippet>Callback, in thread Thread-1`
</snippet></ROW><ROW><id>8887767</id><snippet>&gt;&gt;&gt; class Object(object):
         pass
&gt;&gt;&gt; mockdata = Object()
&gt;&gt;&gt; mockdata.someattr = somevalue
</snippet></ROW><ROW><id>8887969</id><snippet>$ ./t stop
$ ./t start
$ ./t -f start
$ ./t -f stop
$ ./t -f
usage: someprog [-h] [-p PORT] [-f] {start,stop}
someprog: error: too few arguments
$ ./t -f -p 8080
usage: someprog [-h] [-p PORT] [-f] {start,stop}
someprog: error: too few arguments
$ ./t -f -p 8080 start
</snippet></ROW><ROW><id>8887969</id><snippet>parser = argparse.ArgumentParser(
    prog="someprog",
    description="Start or stop the server.",
    epilog="If you don't know what you're doing, run. Run for your life.\n"
)
</snippet></ROW><ROW><id>8887969</id><snippet>try:
    parser.parse_args()
except Exception e:
    print "************************"
    parser.print_help()
    print "************************"
</snippet></ROW><ROW><id>8887973</id><snippet>render()</snippet></ROW><ROW><id>8888076</id><snippet>sys.setrecursionlimit(10000000)</snippet></ROW><ROW><id>8888076</id><snippet>import md5
hashed = raw_input("Hash:")
with open(raw_input("Wordlist Path: ")) as f:
    for line in f:
        if md5.new(line.strip()).hexdigest() == hashed:
            print(line.strip())
            break
    else:
        print("The hash was not found. Please try a new wordlist.")

    raw_input("Press ENTER to close.")
</snippet></ROW><ROW><id>8888277</id><snippet>PyEval_ReleaseLock();

PyObject * pModule = PyImport_ImportModule("grasp_behavior");
</snippet></ROW><ROW><id>8888277</id><snippet>Run()</snippet></ROW><ROW><id>8888277</id><snippet>PyEval_ReleaseLock</snippet></ROW><ROW><id>8888277</id><snippet>PyEval_SaveThread</snippet></ROW><ROW><id>8888277</id><snippet>PyThreadState* tstate = PyEval_SaveThread();
</snippet></ROW><ROW><id>8888277</id><snippet>PyEval_RestoreThread(tstate);
</snippet></ROW><ROW><id>8888277</id><snippet>PyEval_SaveThread</snippet></ROW><ROW><id>8888277</id><snippet>Run()</snippet></ROW><ROW><id>8888277</id><snippet>PyGILState_Ensure</snippet></ROW><ROW><id>8888277</id><snippet>PyGILState_Release</snippet></ROW><ROW><id>8888277</id><snippet>PyGILState_Release</snippet></ROW><ROW><id>8888277</id><snippet>Run()</snippet></ROW><ROW><id>8888277</id><snippet>PyGILState</snippet></ROW><ROW><id>8888503</id><snippet>activate</snippet></ROW><ROW><id>8888503</id><snippet>net.activate((1,2,3))
</snippet></ROW><ROW><id>8888554</id><snippet>def append_children(parent, iterable):
    last = None
    for i in iterable:
        if hasattr(i, '__iter__'):
            append_children(last, i)
        else:
            parent.children.append(i)
            last = i

def magic(lst):
    result = []
    for i in lst:
        if hasattr(i, '__iter__'):
            append_children(result[-1], i)
        else:
            result.append(i)
    return result
</snippet></ROW><ROW><id>8888554</id><snippet>&gt;&gt;&gt; l_in = [T(id=1, children=[]), T(id=2, children=[]), [T(id=3, children=[]), 
...         T(id=4, children=[]), [T(id=5, children=[])]]]
&gt;&gt;&gt; l_expected = [T(id=1, children=[]),
...               T(id=2, children=[T(id=3, children=[]), 
...                                 T(id=4, children=[T(id=5, children=[])])])]
&gt;&gt;&gt; l_ouput = magic(l_in)
&gt;&gt;&gt; repr(l_output) == repr(l_expected)
True
</snippet></ROW><ROW><id>8888585</id><snippet>syntax.txt</snippet></ROW><ROW><id>8888585</id><snippet>:syn-multi-line</snippet></ROW><ROW><id>8888600</id><snippet>sorted()</snippet></ROW><ROW><id>8888600</id><snippet>reversed()</snippet></ROW><ROW><id>8888615</id><snippet>any</snippet></ROW><ROW><id>8888615</id><snippet>all</snippet></ROW><ROW><id>8888615</id><snippet>any (regex.match(line) for regex in [regex1, regex2, regex3])</snippet></ROW><ROW><id>8888615</id><snippet>any(re.match(regex_str, line) for regex in [regex_str1, regex_str2, regex_str2])</snippet></ROW><ROW><id>8888615</id><snippet>|</snippet></ROW><ROW><id>8888615</id><snippet>re.match("|".join([regex_str1, regex_str2, regex_str2])    , line)</snippet></ROW><ROW><id>8888615</id><snippet>|</snippet></ROW><ROW><id>8888636</id><snippet>ax.axis('tight')
</snippet></ROW><ROW><id>8888636</id><snippet>plt.axis('tight')
</snippet></ROW><ROW><id>8888636</id><snippet>plt.tight_layout()</snippet></ROW><ROW><id>8888636</id><snippet>adjustable='box'</snippet></ROW><ROW><id>8888636</id><snippet>aspect='equal'</snippet></ROW><ROW><id>8888636</id><snippet>plt.subplot</snippet></ROW><ROW><id>8888636</id><snippet>plt.axis('equal')</snippet></ROW><ROW><id>8888636</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.array([58, 0, 20, 2, 2, 0, 12, 17, 16, 6, 257, 0, 0, 0, 0, 1, 0, 13, 25,
              9, 13, 94, 0, 0, 2, 42, 83, 0, 0, 157, 27, 1, 80, 0, 0, 0, 0, 2, 
              0, 41, 0, 4, 0, 10, 1, 4, 63, 6, 0, 31, 3, 5, 0, 61, 2, 0, 0, 0, 
              17, 52, 46, 15, 67, 20, 0, 0, 20, 39, 0, 31, 0, 0, 0, 0, 116, 0, 
              0, 0, 11, 39, 0, 17, 0, 59, 1, 0, 0, 2, 7, 0, 66, 14, 1, 19, 0, 
              101, 104, 228, 0, 31])

y = np.array([60, 0, 9, 1, 3, 0, 13, 9, 11, 7, 177, 0, 0, 0, 0, 1, 0, 12, 31, 
              10, 14, 80, 0, 0, 2, 30, 70, 0, 0, 202, 26, 1, 96, 0, 0, 0, 0, 1,
              0, 43, 0, 6, 0, 9, 1, 3, 32, 6, 0, 20, 1, 2, 0, 52, 1, 0, 0, 0, 
              26, 37, 44, 13, 74, 15, 0, 0, 24, 36, 0, 22, 0, 0, 0, 0, 75, 0, 
              0, 0, 9, 40, 0, 14, 0, 51, 2, 0, 0, 1, 9, 0, 59, 9, 0, 23, 0, 80,
              81, 158, 0, 27])
c = 0.01

# Let's make the figure a bit bigger so the text doesn't run into itself...
# (5x3 is rather small at 100dpi. Adjust the dpi if you really want a 5x3 plot)
fig, axes = plt.subplots(ncols=3, figsize=(10, 6), 
                         subplot_kw=dict(aspect=1, adjustable='box'))

# Don't use scatter for this. Use plot. Scatter is if you want to vary things 
# like color or size by a third or fourth variable.
for ax in axes:
    ax.plot(x + c, y + c, 'bo')

for ax in axes[1:]:
    ax.set_xscale('log', basex=2)
    ax.set_yscale('log', basey=2)

axes[0].set_title('Unlogged')
axes[1].set_title('Logged')

axes[2].axis([2**-2, 2**20, 2**-2, 2**20])
axes[2].set_title('Logged with wrong xlim/ylim')

plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>8888636</id><snippet>adjustable='datalim'</snippet></ROW><ROW><id>8888636</id><snippet>subplots_adjust</snippet></ROW><ROW><id>8888636</id><snippet># For 3 columns and one row, we'd want a 3 to 1 ratio...
fig, axes = plt.subplots(ncols=3, figsize=(9,3), 
                         subplot_kw=dict(adjustable='datalim', aspect='equal')

# By default, the width available to make subplots in is 5% smaller than the 
# height to make them in. This is easily changable...
# ("right" is a percentage of the total width. It will be 0.95 regardless.)
plt.subplots_adjust(right=0.95)
</snippet></ROW><ROW><id>8888636</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.array([58, 0, 20, 2, 2, 0, 12, 17, 16, 6, 257, 0, 0, 0, 0, 1, 0, 13, 25,
              9, 13, 94, 0, 0, 2, 42, 83, 0, 0, 157, 27, 1, 80, 0, 0, 0, 0, 2, 
              0, 41, 0, 4, 0, 10, 1, 4, 63, 6, 0, 31, 3, 5, 0, 61, 2, 0, 0, 0, 
              17, 52, 46, 15, 67, 20, 0, 0, 20, 39, 0, 31, 0, 0, 0, 0, 116, 0, 
              0, 0, 11, 39, 0, 17, 0, 59, 1, 0, 0, 2, 7, 0, 66, 14, 1, 19, 0, 
              101, 104, 228, 0, 31])

y = np.array([60, 0, 9, 1, 3, 0, 13, 9, 11, 7, 177, 0, 0, 0, 0, 1, 0, 12, 31, 
              10, 14, 80, 0, 0, 2, 30, 70, 0, 0, 202, 26, 1, 96, 0, 0, 0, 0, 1,
              0, 43, 0, 6, 0, 9, 1, 3, 32, 6, 0, 20, 1, 2, 0, 52, 1, 0, 0, 0, 
              26, 37, 44, 13, 74, 15, 0, 0, 24, 36, 0, 22, 0, 0, 0, 0, 75, 0, 
              0, 0, 9, 40, 0, 14, 0, 51, 2, 0, 0, 1, 9, 0, 59, 9, 0, 23, 0, 80,
              81, 158, 0, 27])
c = 0.01

fig, axes = plt.subplots(ncols=3, figsize=(9, 3),
                         subplot_kw=dict(adjustable='datalim', aspect='equal'))
plt.subplots_adjust(right=0.95)

for ax in axes:
    ax.plot(x + c, y + c, 'bo')

for ax in axes[1:]:
    ax.set_xscale('log', basex=2)
    ax.set_yscale('log', basey=2)

axes[0].set_title('Unlogged')
axes[1].set_title('Logged')

axes[2].axis([2**-2, 2**20, 2**-2, 2**20])
axes[2].set_title('Logged with wrong xlim/ylim')

plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>8888896</id><snippet>get_xl</snippet></ROW><ROW><id>8888896</id><snippet>/get_xl?params_here</snippet></ROW><ROW><id>8888896</id><snippet>var fields = $.param('#search-form');
    if ( !fields.length ) {
        alert("Dude, you must search for something.");
        return false;
    }

window.location.href = '/get_xl?' + fields;
</snippet></ROW><ROW><id>8889168</id><snippet>x = np.array(range(10))</snippet></ROW><ROW><id>8889168</id><snippet>(x[i] for i in np.linspace(0, len(x)-1, num=25))</snippet></ROW><ROW><id>8889202</id><snippet>ID</snippet></ROW><ROW><id>8889202</id><snippet>do_one()</snippet></ROW><ROW><id>8889202</id><snippet>do_one()</snippet></ROW><ROW><id>8889202</id><snippet>my_ID = os.getpid() &amp; 0xFFFF
</snippet></ROW><ROW><id>8889202</id><snippet># add to module header
try:
    from thread import get_ident
except ImportError:
    try:
        from _thread import get_ident
    except ImportError:
        def get_ident():
            return 0

# now in do_one() body:
my_ID = (get_ident() ^ os.getpid()) &amp; 0xFFFF
</snippet></ROW><ROW><id>8889202</id><snippet>Ping()</snippet></ROW><ROW><id>8889202</id><snippet>own_id</snippet></ROW><ROW><id>8889202</id><snippet>Ping()</snippet></ROW><ROW><id>8889202</id><snippet>self.own_id = os.getpid() &amp; 0xFFFF
</snippet></ROW><ROW><id>8889234</id><snippet>nbproject</snippet></ROW><ROW><id>8889234</id><snippet>darcs</snippet></ROW><ROW><id>8889234</id><snippet>(gaeunit/.*)|
</snippet></ROW><ROW><id>8889600</id><snippet>import collections
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import numpy as np

def main():
    x = np.arange(0, 25, 0.01)
    y = x + np.random.randn(x.size)
    plot = DotDashHist(figsize=(10, 8))
    plot.plot(x, y, whis=1.0, sym='r.')
    plot.title('This is a Test')
    plt.show()

class DotDashHist(object):
    def __init__(self, **kwargs):
        self.fig = plt.figure(**kwargs)
        gs = GridSpec(6, 6)
        self.ax = self.fig.add_subplot(gs[1:, :-1])
        self.topax = self.fig.add_subplot(gs[0, :-1], sharex=self.ax)
        self.rightax = self.fig.add_subplot(gs[1:, -1], sharey=self.ax)
        for ax in [self.topax, self.rightax]:
            ax.set_axis_off()

    def plot(self, x, y, **kwargs):
        _, _, self.topbars = self.topax.hist(x, normed=1, bins=50)
        _, _, self.rightbars = self.rightax.hist(y, normed=1, bins=50,
                                                 orientation='horizontal')
        boxes = collections.defaultdict(list)
        for X, Y in zip(x, y):
            boxes[int(X)].append(Y)

        kwargs.pop('positions', None)
        self.boxes = self.ax.boxplot(boxes.values(), **kwargs)

    def title(self, *args, **kwargs):
        self.topax.set_title(*args, **kwargs)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>8889623</id><snippet>if not mystr.endswith('.py'):
</snippet></ROW><ROW><id>8889624</id><snippet>start_time = time.time()

# ... do stuff

end_time = time.time()
print("Elapsed time was %g seconds" % (end_time - start_time))
</snippet></ROW><ROW><id>8889624</id><snippet>time.clock()</snippet></ROW><ROW><id>8889624</id><snippet>time.time()</snippet></ROW><ROW><id>8889630</id><snippet>ascii</snippet></ROW><ROW><id>8889630</id><snippet>str='美'</snippet></ROW><ROW><id>8889630</id><snippet>Out[2]</snippet></ROW><ROW><id>8889630</id><snippet>Out[3]</snippet></ROW><ROW><id>8889630</id><snippet>Out[2]</snippet></ROW><ROW><id>8889630</id><snippet>美</snippet></ROW><ROW><id>8889630</id><snippet>\xe7</snippet></ROW><ROW><id>8889630</id><snippet>Out[3]</snippet></ROW><ROW><id>8889630</id><snippet>美</snippet></ROW><ROW><id>8890190</id><snippet>try:
    raise os.rename('nonexisting_file', 'def')
except OSError:
    print 'caught'
</snippet></ROW><ROW><id>8890683</id><snippet>time</snippet></ROW><ROW><id>8890683</id><snippet>time ruby -e "1.upto(10000000) {|i| i}"
real    0m2.926s
user    0m1.570s
sys 0m1.350s
</snippet></ROW><ROW><id>8891153</id><snippet>ncat -o dump -l 192.168.10.159 35621 --sh-exec "ncat 192.168.10.40 9000"
</snippet></ROW><ROW><id>8891202</id><snippet>libraries:
- name: jinja2
  version: latest
- name: markupsafe
  version: latest
- name: django
  version: latest
</snippet></ROW><ROW><id>8891406</id><snippet>form = cgi.FieldStorage()
name = form['name'].value
print 'Hello ' + name
</snippet></ROW><ROW><id>8891988</id><snippet>subprocess.call(['gksudo','./python script2.py'])</snippet></ROW><ROW><id>8891988</id><snippet>pyz = PYZ(a1.pure)
exe = EXE(pyz,
  a1.scripts,
  exclude_binaries=1,
  name={name here},
  debug=False,
  strip=False,
  upx=True,
  console=1 )
</snippet></ROW><ROW><id>8891988</id><snippet>    coll = COLLECT( exe,
       a1.binaries,
       a1.zipfiles,
       a1.datas,
       a2.binaries,
       a2.zipfiles,
       a2.datas,
   python_tree, 
       *additional_trees,
       strip=False,
       upx=True,
       name={})
</snippet></ROW><ROW><id>8891988</id><snippet> export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
 export LD_RUN_PATH=`pwd`:$LD_RUN_PATH
</snippet></ROW><ROW><id>8892064</id><snippet>request.POST['title'].decode('utf-8')</snippet></ROW><ROW><id>8892064</id><snippet>request.POST['title']</snippet></ROW><ROW><id>8892064</id><snippet>str</snippet></ROW><ROW><id>8892748</id><snippet>for sub_dict in pl:
</snippet></ROW><ROW><id>8892748</id><snippet>pl</snippet></ROW><ROW><id>8892748</id><snippet>&gt;&gt;&gt; l = [1,2,3,4]
&gt;&gt;&gt; for x in l:
...   print x,
... 
1 2 3 4
</snippet></ROW><ROW><id>8892788</id><snippet>passwordrepeat</snippet></ROW><ROW><id>8892788</id><snippet>forms.PasswordInput</snippet></ROW><ROW><id>8892788</id><snippet>CharField</snippet></ROW><ROW><id>8892788</id><snippet>PasswordInput</snippet></ROW><ROW><id>8892788</id><snippet>label</snippet></ROW><ROW><id>8892788</id><snippet>passwordrepeat = forms.CharField(widget=forms.PasswordInput, label=u'Repeat Password')
</snippet></ROW><ROW><id>8892788</id><snippet>class UsersModelForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(UsersModelForm, self).__init__(*args, **kwargs)
        self.fields.keyOrder = ['username', 'password', 'passwordrepeat', 'email']

    # ... other fields and methods ...
</snippet></ROW><ROW><id>8892923</id><snippet>class BaseAttrEnforcer(type):
    def __init__(cls, name, bases, d):
        if 'loglevel' not in d:
            raise ValueError("Class %s doesn't define loglevel attribute" % name)
        type.__init__(cls, name, bases, d)

class Base(object):
    __metaclass__ = BaseAttrEnforcer
    loglevel = None

class d1(Base):
    logfile = "d1.log"
    loglevel = "debug"

class d2(Base):
    logfile = "d2.log"
    loglevel = "info"

class d3(Base):
    logfile = "d3.log"
    # I should fail
</snippet></ROW><ROW><id>8892925</id><snippet>import csv
description = table_timeline_inner['user']['description']
writer = csv.writer(open('stocks.csv', 'a', buffering=0))
            writer.writerows([(description, hashtags])
</snippet></ROW><ROW><id>8893236</id><snippet>import networkx 
</snippet></ROW><ROW><id>8893236</id><snippet>#!/usr/bin/env python
# encoding: utf-8
"""
Example of creating a block model using the blockmodel function in NX.  Data used is the Hartford, CT drug users network:

@article{,
title = {Social Networks of Drug Users in {High-Risk} Sites: Finding the Connections},
volume = {6},
shorttitle = {Social Networks of Drug Users in {High-Risk} Sites},
url = {http://dx.doi.org/10.1023/A:1015457400897},
doi = {10.1023/A:1015457400897},
number = {2},
journal = {{AIDS} and Behavior},
author = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},
month = jun,
year = {2002},
pages = {193--206}
}

"""

__author__ = """\n""".join(['Drew Conway &lt;drew.conway@nyu.edu&gt;',
                          'Aric Hagberg &lt;hagberg@lanl.gov&gt;'])

from collections import defaultdict
import networkx as nx
import numpy
from scipy.cluster import hierarchy
from scipy.spatial import distance
import matplotlib.pyplot as plt


def create_hc(G):
"""Creates hierarchical cluster of graph G from distance matrix"""
path_length=nx.all_pairs_shortest_path_length(G)
distances=numpy.zeros((len(G),len(G)))
for u,p in path_length.items():
    for v,d in p.items():
        distances[u][v]=d
# Create hierarchical cluster
Y=distance.squareform(distances)
Z=hierarchy.complete(Y)  # Creates HC using farthest point linkage
# This partition selection is arbitrary, for illustrive purposes
membership=list(hierarchy.fcluster(Z,t=1.15))
# Create collection of lists for blockmodel
partition=defaultdict(list)
for n,p in zip(list(range(len(G))),membership):
    partition[p].append(n)
return list(partition.values())

if __name__ == '__main__':
G=nx.read_edgelist("hartford_drug.edgelist")

# Extract largest connected component into graph H
H=nx.connected_component_subgraphs(G)[0]
# Makes life easier to have consecutively labeled integer nodes
H=nx.convert_node_labels_to_integers(H)
# Create parititions with hierarchical clustering
partitions=create_hc(H)
# Build blockmodel graph
BM=nx.blockmodel(H,partitions)


# Draw original graph
pos=nx.spring_layout(H,iterations=100)
fig=plt.figure(1,figsize=(6,10))
ax=fig.add_subplot(211)
nx.draw(H,pos,with_labels=False,node_size=10)
plt.xlim(0,1)
plt.ylim(0,1)

# Draw block model with weighted edges and nodes sized by number of internal nodes
node_size=[BM.node[x]['nnodes']*10 for x in BM.nodes()]
edge_width=[(2*d['weight']) for (u,v,d) in BM.edges(data=True)]
# Set positions to mean of positions of internal nodes from original graph
posBM={}
for n in BM:
    xy=numpy.array([pos[u] for u in BM.node[n]['graph']])
    posBM[n]=xy.mean(axis=0)
ax=fig.add_subplot(212)
nx.draw(BM,posBM,node_size=node_size,width=edge_width,with_labels=False)
plt.xlim(0,1)
plt.ylim(0,1)
plt.axis('off')
plt.savefig('hartford_drug_block_model.png')
</snippet></ROW><ROW><id>8893413</id><snippet>shlex.split</snippet></ROW><ROW><id>8893413</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; ','.join(shlex.split(some_string))
'one,two,three four,five,six seven'
</snippet></ROW><ROW><id>8893413</id><snippet>&gt;&gt;&gt; ','.join(['"{0}"'.format(fragment) if ' ' in fragment else fragment
...           for fragment in shlex.split(some_string)])
'one,two,"three four",five,"six seven"'
</snippet></ROW><ROW><id>8893499</id><snippet>import tarfile
tar = tarfile.open("sample.tar.gz")
tar.extractall()
tar.close()
</snippet></ROW><ROW><id>8893554</id><snippet>ids = [(l.strip(),) for l in guidfile.readlines()]
</snippet></ROW><ROW><id>8893554</id><snippet>cursor.setinputsizes(cx_Oracle.STRING)
</snippet></ROW><ROW><id>8893554</id><snippet>import base64
ids = [(base64.b16decode(l.strip()),) for l in guidfile.readlines()]
cursor.setinputsizes(cx_Oracle.BINARY)
</snippet></ROW><ROW><id>8893643</id><snippet>pip install pyrex
</snippet></ROW><ROW><id>8893709</id><snippet>app = webapp2.WSGIApplication([
    webapp2.Route('/', handler='handlers.HomeHandler', name='home'),
    webapp2.Route('/wiki', handler=WikiHandler, name='wiki'),
    webapp2.Route('/wiki/&lt;page&gt;', handler=WikiHandler, name='wiki-page'),
])

# /
uri = uri_for('home')
# http://localhost:8080/
uri = uri_for('home', _full=True)
# /wiki
uri = uri_for('wiki')
# http://localhost:8080/wiki
uri = uri_for('wiki', _full=True)
# http://localhost:8080/wiki#my-heading
uri = uri_for('wiki', _full=True, _fragment='my-heading')
# /wiki/my-first-page
uri = uri_for('wiki-page', page='my-first-page')
# /wiki/my-first-page?format=atom
uri = uri_for('wiki-page', page='my-first-page', format='atom')
</snippet></ROW><ROW><id>8894180</id><snippet>''.join('%s %s\n' % o for o in a.items())
</snippet></ROW><ROW><id>8894180</id><snippet>map</snippet></ROW><ROW><id>8894180</id><snippet>map</snippet></ROW><ROW><id>8894180</id><snippet>''.join(map(lambda o:'%s %s\n' % o, a.items()))
</snippet></ROW><ROW><id>8894262</id><snippet>import socket 
from celery.task import task

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.connect(('localhost', 9999)) 

@task
def echo(arg):
    s.send(arg) 
    return s.recv()
</snippet></ROW><ROW><id>8894441</id><snippet>urlpatterns += patterns('django.contrib.auth.views', 
</snippet></ROW><ROW><id>8894743</id><snippet>pyramid_includes = pyramid_beaker
</snippet></ROW><ROW><id>8894743</id><snippet>config.include('pyramid_beaker')
</snippet></ROW><ROW><id>8894743</id><snippet>session = request.session
</snippet></ROW><ROW><id>8894874</id><snippet>http://www.istockphoto.com/search/text/meow/filetype/photos/source/basic</snippet></ROW><ROW><id>8894874</id><snippet>#e2430b3</snippet></ROW><ROW><id>8894986</id><snippet>str = """ Your HTML String here"""

pattern = re.compile(r"""Device Time:([ \d\-:]*)""")
s = pattern.search(str)

time = s.group(1)
</snippet></ROW><ROW><id>8895157</id><snippet>IsDescription</snippet></ROW><ROW><id>8895303</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; xml = """&lt;ham&gt;&lt;spam&gt;Hello!&lt;/spam&gt; &lt;spam&gt;Goodbye!&lt;/spam&gt;&lt;/ham&gt;"""
&gt;&gt;&gt; tree.xpath("//spam/text()")
['Hello!', 'Goodbye!']
</snippet></ROW><ROW><id>8895305</id><snippet>import csv

class PseudoFile(object):
    # http://stackoverflow.com/a/8712426/190597
    def write(self, string):
        return string
writer = csv.writer(PseudoFile())
</snippet></ROW><ROW><id>8895305</id><snippet>a</snippet></ROW><ROW><id>8895305</id><snippet>a = ['1',",2","3,"]
line = writer.writerow(a)
print(line)
# 1,",2","3,"
</snippet></ROW><ROW><id>8895305</id><snippet>a</snippet></ROW><ROW><id>8895305</id><snippet>line</snippet></ROW><ROW><id>8895305</id><snippet>print(next(csv.reader([line])))
# ['1', ',2', '3,']
</snippet></ROW><ROW><id>8895653</id><snippet>import random
def print_random(random_number=None):
    if random_number is None:
        random_number = 4 # chosen by fair dice roll.
                          # guaranteed to be random.
    print random_number
</snippet></ROW><ROW><id>8895653</id><snippet>None</snippet></ROW><ROW><id>8895653</id><snippet>is</snippet></ROW><ROW><id>8895653</id><snippet>if not random_number</snippet></ROW><ROW><id>8895653</id><snippet>0</snippet></ROW><ROW><id>8895847</id><snippet>&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt; win = Tk()
&gt;&gt;&gt; button = Button( Frame( win, name = "myframe" ), name = "mybutton" )
&gt;&gt;&gt; win.nametowidget("myframe.mybutton")
&lt;Tkinter.Button instance at 0x2550c68&gt;
</snippet></ROW><ROW><id>8895944</id><snippet>dict</snippet></ROW><ROW><id>8895944</id><snippet>switch_dict = {
    Foo: self.doFoo,
    Bar: self.doBar,
    }

func = switch_dict[switch_var]
result = func() # or if they take args, pass args
</snippet></ROW><ROW><id>8895979</id><snippet>MySQLdb</snippet></ROW><ROW><id>8895979</id><snippet>connection</snippet></ROW><ROW><id>8895979</id><snippet>import MySQLdb
import MySQLdb.cursors as cursors
connection = MySQLdb.connect(
    ...
    cursorclass = cursors.SSCursor)
cursor = connection.cursor()
cursor.execute(query)
for row in cursor:
    ...
</snippet></ROW><ROW><id>8895986</id><snippet>ComputedProperty</snippet></ROW><ROW><id>8895986</id><snippet>ComputedProperty</snippet></ROW><ROW><id>8895986</id><snippet>indexed</snippet></ROW><ROW><id>8895986</id><snippet>False</snippet></ROW><ROW><id>8895986</id><snippet>def someComputedProperty(self):
  if not self.someCondition:
      return []
  src = self.someReferenceProperty
  list =  src.list1 + src.list2 + src.list3 + src.list4 \
          + [src.str1, src.str2]
  return map(lambda x:'' if not x else x.lower(), list) 
</snippet></ROW><ROW><id>8896102</id><snippet>class Dummy:

    def __init__(self):

        self.location = 'USA'
        print(self.location)

        self.location_change()
        print(self.location)

    def location_change(self):

        self.location = 'UK'


first_dummy = Dummy()
</snippet></ROW><ROW><id>8896780</id><snippet>app.config['TRAP_BAD_REQUEST_ERRORS'] = True
</snippet></ROW><ROW><id>8896833</id><snippet>pack</snippet></ROW><ROW><id>8896833</id><snippet>None</snippet></ROW><ROW><id>8896833</id><snippet>self.my_label = Label(root, text="My Label").pack(side=LEFT,anchor=W)
</snippet></ROW><ROW><id>8896833</id><snippet>self.my_label</snippet></ROW><ROW><id>8896833</id><snippet>None</snippet></ROW><ROW><id>8896833</id><snippet>self.my_label</snippet></ROW><ROW><id>8896833</id><snippet>pack</snippet></ROW><ROW><id>8896833</id><snippet>self.my_label = Label(root, text="My Label")
self.my_label.pack(side=LEFT,anchor=W)
</snippet></ROW><ROW><id>8896855</id><snippet>performancemodule.c</snippet></ROW><ROW><id>8896855</id><snippet>performancemodule.so</snippet></ROW><ROW><id>8896855</id><snippet>performancemodule.dll</snippet></ROW><ROW><id>8896855</id><snippet>performancetest.py</snippet></ROW><ROW><id>8896855</id><snippet>convolve (seconds, microseconds) 81 349969
scipy.signal.convolve (seconds, microseconds) 1 962599
convolve in C (seconds, microseconds) 0 87024
</snippet></ROW><ROW><id>8897023</id><snippet>mech = mechanize.Browser()
// needs to be set before you call open
mech.set_handle_robots(False)
</snippet></ROW><ROW><id>8897023</id><snippet>challenge   [a14b1f67-11edcc01]
charset UTF-8
login   Login
origurl /Login/
password    
savedpw 0
sha1    3f77d1e8c2ab0470ef8005a85f5f9c0d7aeedba6
userid  sdsads
</snippet></ROW><ROW><id>8897437</id><snippet>&gt;&gt;&gt; name =  "11111A"
&gt;&gt;&gt; ser = name[:3]     # first 3 characters
&gt;&gt;&gt; code = name[3:]    # rest of chars after the third
&gt;&gt;&gt; ser
'111'
&gt;&gt;&gt; code
'11A'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>8897437</id><snippet>  &gt;&gt;&gt; code = name[-1]     # last character
  &gt;&gt;&gt; code
  'A'
</snippet></ROW><ROW><id>8897437</id><snippet>&gt;&gt;&gt; contents = rules[ser]
&gt;&gt;&gt; if code == 'V':
...     print contents[:2]
... else:
...     print contents[2:]
</snippet></ROW><ROW><id>8897568</id><snippet>return map(lambda x: x.doSomething(), 
           filter(lambda x: x[0] == "z", getIterator()))
</snippet></ROW><ROW><id>8897963</id><snippet>%include "stdint.i"
</snippet></ROW><ROW><id>8897963</id><snippet>uint8_t</snippet></ROW><ROW><id>8898129</id><snippet>std::vector</snippet></ROW><ROW><id>8898129</id><snippet>std::vector</snippet></ROW><ROW><id>8898129</id><snippet>#include &lt;vector&gt;
#include &lt;string&gt;

struct foo {
  std::string name;
};

inline std::vector&lt;foo&gt; test() {
  std::vector&lt;foo&gt; ret;
  foo instance;
  instance.name = "one";
  ret.push_back(instance);
  instance.name = "two";
  ret.push_back(instance);
  return ret;
}
</snippet></ROW><ROW><id>8898129</id><snippet>%template</snippet></ROW><ROW><id>8898129</id><snippet>pyabc.i</snippet></ROW><ROW><id>8898129</id><snippet>std_vector.i</snippet></ROW><ROW><id>8898129</id><snippet>%module test

%{
#include "test.h"
%}

%include "pyabc.i"
%include "std_vector.i"

%include "test.h"

%template (FooVector) std::vector&lt;foo&gt;;
</snippet></ROW><ROW><id>8898201</id><snippet>render_to_response</snippet></ROW><ROW><id>8898201</id><snippet>if</snippet></ROW><ROW><id>8898201</id><snippet>items</snippet></ROW><ROW><id>8898201</id><snippet>GET</snippet></ROW><ROW><id>8898201</id><snippet>items</snippet></ROW><ROW><id>8898201</id><snippet>/path/?items=</snippet></ROW><ROW><id>8898201</id><snippet>apps</snippet></ROW><ROW><id>8898201</id><snippet>if request.GET.has_key('items'):
</snippet></ROW><ROW><id>8898439</id><snippet>fp = open("file.txt")
s = fp.read()
u = s.decode("utf-8-sig")
</snippet></ROW><ROW><id>8898439</id><snippet>unicode</snippet></ROW><ROW><id>8898439</id><snippet>s = u.encode("utf-8")
</snippet></ROW><ROW><id>8898439</id><snippet>s</snippet></ROW><ROW><id>8898439</id><snippet>import os, sys, codecs

BUFSIZE = 4096
BOMLEN = len(codecs.BOM_UTF8)

path = sys.argv[1]
with open(path, "r+b") as fp:
    chunk = fp.read(BUFSIZE)
    if chunk.startswith(codecs.BOM_UTF8):
        i = 0
        chunk = chunk[BOMLEN:]
        while chunk:
            fp.seek(i)
            fp.write(chunk)
            i += len(chunk)
            fp.seek(BOMLEN, os.SEEK_CUR)
            chunk = fp.read(BUFSIZE)
        fp.seek(-BOMLEN, os.SEEK_CUR)
        fp.truncate()
</snippet></ROW><ROW><id>8898439</id><snippet>def decode(s):
    for encoding in "utf-8-sig", "utf-16":
        try:
            return s.decode(encoding)
        except UnicodeDecodeError:
            continue
    return s.decode("latin-1") # will always work
</snippet></ROW><ROW><id>8898439</id><snippet>None</snippet></ROW><ROW><id>8898444</id><snippet>StingVar</snippet></ROW><ROW><id>8898444</id><snippet>Entry</snippet></ROW><ROW><id>8898444</id><snippet>self.entry_var = StringVar()
self.enter = Entry(root, width = 30, textvariable = self.entry_var)
selection = self.entry_var.get()
</snippet></ROW><ROW><id>8898444</id><snippet>self.enter = Entry(root, width=30)
self.enter.pack(side=LEFT, expand=NO)

#fruit  texture  climate 
fruit_bowl={'apple': ('Crunchy','Temperate'),
            'orange': ('Soft','Tropical'),
            'pawpaw': ('Soft','Temperate')}

selection = self.enter.get()
try:
   self.texture_option = fruit_bowl[selection.lower()][0]
   self.climate_option = fruit_bowl[selection.lower()][1]
   self.fruit_option = selection.capitalize()
except KeyError:
    print "%s not in fruit-bowl" % selection
</snippet></ROW><ROW><id>8898444</id><snippet>for fruit in fruit_bowl:
    i = fruit_bowl.index(fruit)
    if self.enter.get()==fruit_bowl[i][0]:
        self.texture_option.set(fruit_bowl[i][1])
        self.climate_option.set(fruit_bowl[i][2])
</snippet></ROW><ROW><id>8898444</id><snippet>i</snippet></ROW><ROW><id>8898444</id><snippet>fruit_bowl</snippet></ROW><ROW><id>8898444</id><snippet>for i in xrange(len(fruit_bowl)):
    if self.enter.get()==fruit_bowl[i][0]:
        self.texture_option.set(fruit_bowl[i][1])
        self.climate_option.set(fruit_bowl[i][2])
</snippet></ROW><ROW><id>8898657</id><snippet>echo</snippet></ROW><ROW><id>8898657</id><snippet>echo "Lorem ipsum" | openssl dgst -sha1 -hex
(stdin)= d0c05753484098c61e86f402a2875e68992b5ca3
</snippet></ROW><ROW><id>8898657</id><snippet>-n</snippet></ROW><ROW><id>8898657</id><snippet>echo -n "Lorem ipsum" | openssl dgst -sha1 -hex
(stdin)= 94912be8b3fb47d4161ea50e5948c6296af6ca05
</snippet></ROW><ROW><id>8898725</id><snippet>import numpy as np
a = np.ones((3,4,5))
b = np.ones((3,4,5))
c = np.concatenate((a[...,np.newaxis],b[...,np.newaxis]),axis=3)
</snippet></ROW><ROW><id>8898784</id><snippet>import nltk
import nltk.book as book
text1 = book.text1
c = nltk.ConcordanceIndex(text1.tokens, key = lambda s: s.lower())
print([text1.tokens[offset+1] for offset in c.offsets('monstrous')])
</snippet></ROW><ROW><id>8898784</id><snippet>['size', 'bulk', 'clubs', 'cannibal', 'and', 'fable', 'Pictures', 'pictures', 'stories', 'cabinet', 'size']
</snippet></ROW><ROW><id>8898784</id><snippet>concordance</snippet></ROW><ROW><id>8898784</id><snippet>text1.concordance</snippet></ROW><ROW><id>8898784</id><snippet>/usr/lib/python2.7/dist-packages/nltk/text.py</snippet></ROW><ROW><id>8898784</id><snippet>In [107]: text1.concordance?
Type:       instancemethod
Base Class: &lt;type 'instancemethod'&gt;
String Form:    &lt;bound method Text.concordance of &lt;Text: Moby Dick by Herman Melville 1851&gt;&gt;
Namespace:  Interactive
File:       /usr/lib/python2.7/dist-packages/nltk/text.py
</snippet></ROW><ROW><id>8898784</id><snippet>def concordance(self, word, width=79, lines=25):
    ... 
        self._concordance_index = ConcordanceIndex(self.tokens,
                                                   key=lambda s:s.lower())
    ...            
    self._concordance_index.print_concordance(word, width, lines)
</snippet></ROW><ROW><id>8898784</id><snippet>ConcordanceIndex</snippet></ROW><ROW><id>8898784</id><snippet>class ConcordanceIndex(object):
    def __init__(self, tokens, key=lambda x:x):
        ...
    def print_concordance(self, word, width=75, lines=25):
        ...
        offsets = self.offsets(word)
        ...
        right = ' '.join(self._tokens[i+1:i+context])
</snippet></ROW><ROW><id>8898784</id><snippet>self.offsets('monstrous')</snippet></ROW><ROW><id>8898784</id><snippet>monstrous</snippet></ROW><ROW><id>8898784</id><snippet>self._tokens[offset]</snippet></ROW><ROW><id>8898784</id><snippet>text1.tokens[offset]</snippet></ROW><ROW><id>8898784</id><snippet>monstrous</snippet></ROW><ROW><id>8898784</id><snippet>text1.tokens[offset+1]</snippet></ROW><ROW><id>8898787</id><snippet>Universally unique identifiers (UUID)</snippet></ROW><ROW><id>8898787</id><snippet>uuid</snippet></ROW><ROW><id>8898977</id><snippet>def bits(n):
    while n:
        b = n &amp; (~n+1)
        yield b
        n ^= b


&gt;&gt;&gt; for b in bits(109):
    print(b)


1
4
8
32
64
</snippet></ROW><ROW><id>8899033</id><snippet>with open('yourlog.log', 'w'):
    pass
</snippet></ROW><ROW><id>8899042</id><snippet>org.python.util.PythonInterpreter</snippet></ROW><ROW><id>8899042</id><snippet>PythonInterpreter interpreter = new PythonInterpreter();
interpreter.exec("import sys\nsys.path.append('pathToModiles if they're not there by default')\nimport yourModule");
// execute a function that takes a string and returns a string
PyObject someFunc = interpreter.get("funcName");
PyObject result = someFunc.__call__(new PyString("Test!"));
String realResult = (String) result.__tojava__(String.class);
</snippet></ROW><ROW><id>8899208</id><snippet>break</snippet></ROW><ROW><id>8899208</id><snippet>try</snippet></ROW><ROW><id>8899208</id><snippet>    try:
        x = int(raw_input("Please enter a number: "))
    except ValueError:
        print "Oops! That was no valid number. Try again..."
</snippet></ROW><ROW><id>8899345</id><snippet>api</snippet></ROW><ROW><id>8899345</id><snippet>import myproject.mymodule.api
print myproject.mymodule.api.MyClass
</snippet></ROW><ROW><id>8899345</id><snippet>api</snippet></ROW><ROW><id>8899345</id><snippet>myproject.mymodule</snippet></ROW><ROW><id>8899345</id><snippet>myproject/mymodule/__init__.py</snippet></ROW><ROW><id>8899345</id><snippet>import myproject.mymodule.api
</snippet></ROW><ROW><id>8899345</id><snippet>from myproject import mymodule

print mymodule.api.MyClass 
</snippet></ROW><ROW><id>8899451</id><snippet>subject = obj.subject
body = obj.body
for key, value in kwargs.iteritems():
    subject = subject.replace('[%s]' % key.toupper(), value)
    body = body.replace('[%s]' % key.toupper(), value)

return (subject, body, obj.is_html)
</snippet></ROW><ROW><id>8899580</id><snippet>QTextDocument</snippet></ROW><ROW><id>8899580</id><snippet>doc = QtGui.QTextDocument()
doc.setHtml(label.text())
text = doc.toPlainText()
</snippet></ROW><ROW><id>8899612</id><snippet>def startString(char, stringlist):
    newlist = []
    for string in stringlist:
        if string.startswith(char):
            newlist.append(string)
    print newlist
</snippet></ROW><ROW><id>8899952</id><snippet>def save_model(self, request, obj, form, change):
    """  
    Given a model instance save it to the database.
    """

    # your custom stuff here, this is the file path, change "upload_field_name"
    # by your actual FileField name
    obj.upload_field_name.path

    obj.save()
</snippet></ROW><ROW><id>8899952</id><snippet>django/contrib/admin/options.py</snippet></ROW><ROW><id>8899952</id><snippet>from django.db.models import signals

def encode_upload(sender, instance=None, created=None, **kwargs):
   # your custom stuff here, this is the file path, change "upload_field_name"
   # by your actual FileField name
   instance.upload_field_name.path

# change YourModelClass by the name of your actual model class
signals.pre_save.connect(encode_upload, sender=YourModelClass)
</snippet></ROW><ROW><id>8899952</id><snippet>encode_upload</snippet></ROW><ROW><id>8899952</id><snippet>models.py</snippet></ROW><ROW><id>8899990</id><snippet>&gt;&gt;&gt; def foo():
...     pass
... 
&gt;&gt;&gt; def bar():
...     pass
... 
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; [member.__name__ for member in globals().values() \
...                  if inspect.isfunction(member)]
['bar', 'foo']
</snippet></ROW><ROW><id>8900189</id><snippet>&gt;&gt;&gt; x = [1,2]
&gt;&gt;&gt; x.append(3)
&gt;&gt;&gt; x
[1, 2, 3]
</snippet></ROW><ROW><id>8900189</id><snippet>&gt;&gt;&gt; x = (1,2)
&gt;&gt;&gt; x
(1, 2)
&gt;&gt;&gt; x.append(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'tuple' object has no attribute 'append'
</snippet></ROW><ROW><id>8900189</id><snippet>&gt;&gt;&gt; x = (1,2)
&gt;&gt;&gt; y = [1,2]
&gt;&gt;&gt; z = {}
&gt;&gt;&gt; z[x] = 3
&gt;&gt;&gt; z
{(1, 2): 3}
&gt;&gt;&gt; z[y] = 4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>8900299</id><snippet>def fun(x, y, param1=10, param2=None):
    if param2 is None:
        param2 = param1/3
    # do something
</snippet></ROW><ROW><id>8900299</id><snippet>param2=None</snippet></ROW><ROW><id>8900299</id><snippet>fun()</snippet></ROW><ROW><id>8900299</id><snippet>default = object()

def fun(x, y, param1=10, param2=default):
    if param2 is default:
        param2 = param1 / 3
    # do something
</snippet></ROW><ROW><id>8900299</id><snippet>is default</snippet></ROW><ROW><id>8900299</id><snippet>param1</snippet></ROW><ROW><id>8900340</id><snippet>from django.db import models
from django.core import exceptions
import re


MONEY_REGEX_PATTERN = re.compile('^\$?-?0*(?:\d+(?!,)(?:\.\d{1,2})?|(?:\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))$')

def MoneyValidator(value):
    """Will validate a string value against a money regular expression"""
    if not MONEY_REGEX_PATTERN.match(value):
        raise exceptions.ValidationError('{v} is not a valid dollar amount'.format(v=value))


class MyMoneyField(models.CharField):

    """Custom field for handling values from PostgreSQL's money data type"""

    def __init__(self, *args, **kwargs):
        kwargs['validators'] = [MoneyValidator]
        kwargs['max_length'] = 20
        super(MyMoneyField, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>8900502</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; 
&gt;&gt;&gt; a = np.array([[1,2,3],[4,5,6]])
&gt;&gt;&gt; a[:, 2]
array([3, 6])
</snippet></ROW><ROW><id>8901259</id><snippet>as</snippet></ROW><ROW><id>8901259</id><snippet>except</snippet></ROW><ROW><id>8901259</id><snippet>try:
    raise Exception("hello world")
except Exception as x:
    print(x)
</snippet></ROW><ROW><id>8901259</id><snippet>except Exception, x:</snippet></ROW></DATA>