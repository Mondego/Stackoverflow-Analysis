<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>5557664</id><snippet>binascii.a2b_hex()</snippet></ROW><ROW><id>5557664</id><snippet>&gt;&gt;&gt; binascii.crc32(binascii.a2b_hex('18329a7e'))
-1357533383
</snippet></ROW><ROW><id>5557814</id><snippet>group_id = models.ForeignKey(Groups, db_column='id')
user_id = models.ForeignKey(Users, db_column='id')
</snippet></ROW><ROW><id>5557814</id><snippet>group_id = models.ForeignKey(Groups)
user_id = models.ForeignKey(Users)
</snippet></ROW><ROW><id>5557814</id><snippet>Users</snippet></ROW><ROW><id>5557814</id><snippet>Groups</snippet></ROW><ROW><id>5557814</id><snippet>Groups</snippet></ROW><ROW><id>5557814</id><snippet>Group</snippet></ROW><ROW><id>5557814</id><snippet>Users</snippet></ROW><ROW><id>5557814</id><snippet>User</snippet></ROW><ROW><id>5557814</id><snippet>user = User()
</snippet></ROW><ROW><id>5557814</id><snippet>user = Users()
</snippet></ROW><ROW><id>5557975</id><snippet>def stripName(name):
    return name[0].strip()
</snippet></ROW><ROW><id>5557998</id><snippet>while True:
    value = raw_input('Value between 0 and 100:')
    try:
       value = int(value)
    except ValueError:
       print 'Valid number, please'
       continue
    if 0 &lt;= value &lt;= 100:
       break
    else:
       print 'Valid range, please: 0-100'
</snippet></ROW><ROW><id>5558065</id><snippet>process_response</snippet></ROW><ROW><id>5558065</id><snippet>process_request</snippet></ROW><ROW><id>5558589</id><snippet>def ex(N):
    N = abs(int(N))
    print 'SUM', sum(n for n in xrange(1, N + 1) if N % n == 0)
</snippet></ROW><ROW><id>5558589</id><snippet>def ex2(N):
    N = abs(int(N))
    l = [n for n in xrange(1, N + 1) if N % n == 0]
    print '  of '+str(N),l
    print 'SUM', sum(l)
</snippet></ROW><ROW><id>5558624</id><snippet>import numpy as np

arr=np.array([(0,2),(1,3)],dtype=[('a',int),('b',int)])
print(arr)
# [(0, 2) (1, 3)]
</snippet></ROW><ROW><id>5558624</id><snippet>'a'</snippet></ROW><ROW><id>5558624</id><snippet>'b'</snippet></ROW><ROW><id>5558624</id><snippet>DL</snippet></ROW><ROW><id>5558624</id><snippet>print(arr['a'])
# [0 1]
</snippet></ROW><ROW><id>5558624</id><snippet>LD</snippet></ROW><ROW><id>5558624</id><snippet>print(arr[0])
# (0, 2)
</snippet></ROW><ROW><id>5558624</id><snippet>LD</snippet></ROW><ROW><id>5558624</id><snippet>print(arr[0]['b'])
# 2
</snippet></ROW><ROW><id>5559001</id><snippet>xterm</snippet></ROW><ROW><id>5559001</id><snippet>xterm</snippet></ROW><ROW><id>5559001</id><snippet>import os
from subprocess import Popen, PIPE
import time

PIPE_PATH = "/tmp/my_pipe"

if not os.path.exists(PIPE_PATH):
    os.mkfifo(PIPE_PATH)

Popen(['xterm', '-e', 'tail', '-f', PIPE_PATH])

for _ in range(5):
    with open(PIPE_PATH, "w") as p:
        p.write("Hello world!\n")
        time.sleep(1)
</snippet></ROW><ROW><id>5559090</id><snippet>&lt;link rel-'stylesheet' href='css/something'&gt;</snippet></ROW><ROW><id>5559090</id><snippet>/place/css/something</snippet></ROW><ROW><id>5559090</id><snippet>&lt;link rel='stylesheet' href='/static/something.css'&gt;</snippet></ROW><ROW><id>5559090</id><snippet>- url: /static/
  static_dir: static
</snippet></ROW><ROW><id>5559098</id><snippet>tuples = genreDictionary.items()
</snippet></ROW><ROW><id>5559165</id><snippet>ProgramX*</snippet></ROW><ROW><id>5559165</id><snippet>import glob, os

programxoutput = glob.glob('ProgramX*')[0]
os.rename(programxoutput, 'input.output')
</snippet></ROW><ROW><id>5559165</id><snippet>os.stat</snippet></ROW><ROW><id>5559213</id><snippet>people = [
    Person(name='Bob', age=38, occupation=PROFESSIONAL_WEASEL_TRAINER),
    Person(name='Douglas', age=42, occupation=WRITER),
    # etc.
]
</snippet></ROW><ROW><id>5559213</id><snippet>names = ['Bob', 'Douglas', ...]
ages = [38, 42, ...]
occupations = [PROFESSIONAL_WEASEL_TRAINER, WRITER, ...]
</snippet></ROW><ROW><id>5559238</id><snippet>def foo(self):
    c.countries = Model.get(Country)....
return Render('foo.html')
</snippet></ROW><ROW><id>5559238</id><snippet>${h.field(
    "Country:",
    h.select(
    "country",
    id='country',
    options = c.countries,
    selected_values=[],
    required=True,
 ),
)}
</snippet></ROW><ROW><id>5559270</id><snippet>obj._ClassName__variableName</snippet></ROW><ROW><id>5559382</id><snippet>^[^/]*$
</snippet></ROW><ROW><id>5559490</id><snippet>max_age</snippet></ROW><ROW><id>5559490</id><snippet>expires</snippet></ROW><ROW><id>5559490</id><snippet>expires</snippet></ROW><ROW><id>5559490</id><snippet>datetime.now()</snippet></ROW><ROW><id>5559490</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>5559490</id><snippet>hr.set_cookie('user_id', user_id, max_age=30)
</snippet></ROW><ROW><id>5559490</id><snippet>datetime</snippet></ROW><ROW><id>5559490</id><snippet>max_age</snippet></ROW><ROW><id>5559682</id><snippet>__import__</snippet></ROW><ROW><id>5559682</id><snippet>&gt;&gt;&gt; def getMethod(module, cls, method):
...     return getattr(getattr(__import__(module), cls), method)
... 
&gt;&gt;&gt; getMethod('sys', 'stdin', 'write')
&lt;built-in method write of file object at 0x7fcd518fa0c0&gt;
</snippet></ROW><ROW><id>5559682</id><snippet>&gt;&gt;&gt; def getMethod(path):
...     names = path.split('.')
...     return reduce(getattr, names[1:], __import__(names[0]))
... 
&gt;&gt;&gt; getMethod('sys.stdin.write')
&lt;built-in method write of file object at 0x7fdc7e0ca0c0&gt;
</snippet></ROW><ROW><id>5559763</id><snippet>try:
    os.open(filename, os.O_WRONLY | os.O_CREAT | os.O_EXCL)
except IOError: # or OSError?
    # Someone else created it already.
</snippet></ROW><ROW><id>5559780</id><snippet>&gt;&gt;&gt; supplied_list = [0, 1]
&gt;&gt;&gt; list(set(range(3)) - set(supplied_list))
[2]
</snippet></ROW><ROW><id>5559806</id><snippet>mmap</snippet></ROW><ROW><id>5559861</id><snippet>'\x00'</snippet></ROW><ROW><id>5559861</id><snippet>filename.split('\x00', 1)[0]</snippet></ROW><ROW><id>5560274</id><snippet>from PyQt4 import QtGui, QtWebKit
from PyQt4.QtCore import Qt
a = QtGui.QApplication([])
view = QtWebKit.QWebView()
view.setAttribute(Qt.WA_TranslucentBackground)
# Works with and without that following line
view.setAttribute(Qt.WA_OpaquePaintEvent, False)
page = view.page()
palette = page.palette()
palette.setBrush(QtGui.QPalette.Base, Qt.transparent)
page.setPalette(palette)
page.currentFrame().documentElement().setInnerXml("text")
view.show()
a.exec_()
</snippet></ROW><ROW><id>5560622</id><snippet>for x in points:
   for y in x:
       for Z in y:
           # z is a tuple with GPS coordinates
</snippet></ROW><ROW><id>5560622</id><snippet># initially, points is a list of lists of lists
points = itertools.chain.from_iterable(points)
# now points is an iterable producing lists
points = itertools.chain.from_iterable(points)
# now points is an iterable producing coordinates
points = itertools.chain.from_iterable(points)
# now points is an iterable producing individual floating points values
data = numpy.fromiter(points, float)
# data is a numpy array containing all the coordinates
data = data.reshape( data.size/2,2)
# data has now been reshaped to be an nx2 array
</snippet></ROW><ROW><id>5560622</id><snippet># firstly, we use imap to call GetMyPoints a bunch of times
objects = itertools.imap(GetMyPoints, xrange(100))
# next, we use itertools.chain to flatten it into all of the polygons
polygons = itertools.chain.from_iterable(objects)
# tee gives us two iterators over the polygons
polygons_a, polygons_b = itertools.tee(polygons)
# the lengths will be the length of each polygon
polygon_lengths = itertools.imap(len, polygons_a)
# for the actual points, we'll flatten the polygons into points
points = itertools.chain.from_iterable(polygons_b)
# then we'll flatten the points into values
values = itertools.chain.from_iterable(points)

# package all of that into a numpy array
all_points = numpy.fromiter(values, float)
# reshape the numpy array so we have two values for each coordinate
all_points = all_points.reshape(all_points.size // 2, 2)

# produce an iterator of lengths, but put a zero in front
polygon_positions = itertools.chain([0], polygon_lengths)
# produce another numpy array from this
# however, we take the cumulative sum
# so that each index will be the starting index of a polygon
polygon_positions = numpy.cumsum( numpy.fromiter(polygon_positions, int) )

# now for the transformation
# multiply the first coordinate of every point by *.5
all_points[:,0] *= .5

# now to get it out

# polygon_positions is all of the starting positions
# polygon_postions[1:] is the same, but shifted on forward,
# thus it gives us the end of each slice
# slice makes these all slice objects
slices = itertools.starmap(slice, itertools.izip(polygon_positions, polygon_positions[1:]))
# polygons produces an iterator which uses the slices to fetch
# each polygon
polygons = itertools.imap(all_points.__getitem__, slices)

# just iterate over the polygon normally
# each one will be a slice of the numpy array
for polygon in polygons:
    draw_polygon(polygon)
</snippet></ROW><ROW><id>5560662</id><snippet>def make_method(params):
    def impl(*args, **kwargs):
        # do stuff with args &amp; kwargs
        print "I was called with {args} and {kwargs}".format(
            args=args,
            kwargs=kwargs)
        pass
    name = 'some_name'
    scope = dict(__impl=impl)
    exec """\
def {name}({pos_arg_defs}):
    'Very helpful function.'
    return __impl({pos_arg_names})
""".format(name=name,
           pos_arg_defs=', '.join('='.join((k, repr(v)))
                                  for k, v in params.iteritems()
                                  if v is not None),
           pos_arg_names=', '.join(k
                                   for k, v in params.iteritems()
                                   if v is not None)) in scope
    return scope[name]
</snippet></ROW><ROW><id>5560961</id><snippet>yield context.transaction(lambda: increment_counter(acc.key(), 5))
</snippet></ROW><ROW><id>5561044</id><snippet>get_or_create</snippet></ROW><ROW><id>5561044</id><snippet>country, country_is_new = UserReportedCountry.objects.get_or_create(country_name=my_country_name)
city, city_is_new = UserReportedCity.objects.get_or_create(country=country, city_name=my_city_name)
</snippet></ROW><ROW><id>5561080</id><snippet>Error 127</snippet></ROW><ROW><id>5561080</id><snippet>NUM_FILES=200</snippet></ROW><ROW><id>5561080</id><snippet>NUM_FILES=2</snippet></ROW><ROW><id>5561080</id><snippet>NUM_FILES=2</snippet></ROW><ROW><id>5561080</id><snippet>NUM_FILES=200</snippet></ROW><ROW><id>5561080</id><snippet>JCC</snippet></ROW><ROW><id>5561080</id><snippet># Linux     (Ubuntu 8.10 64-bit, Python 2.5.2, OpenJDK 1.6, setuptools 0.6c9)
PREFIX_PYTHON=/usr
ANT=ant
PYTHON=$(PREFIX_PYTHON)/bin/python
JCC=$(PYTHON) -m jcc.__main__ --shared
NUM_FILES=200
</snippet></ROW><ROW><id>5561122</id><snippet>import re
text='''Service ( ndfdXML ) tns="http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl" Prefixes (2) ns0 = "http://schemas.xmlsoap.org/soap/encoding/" ns1 = "http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd" Ports (1): (ndfdXMLPort) Methods (12): CornerPoints(ns1:sectorType sector, ) GmlLatLonList(ns1:listLatLonType listLatLon, xs:dateTime requestedTime, ns1:featureTypeType featureType, ns1:weatherParametersType weatherParameters, ) GmlTimeSeries(ns1:listLatLonType listLatLon, xs:dateTime startTime, xs:dateTime endTime, ns1:compTypeType compType, ns1:featureTypeType featureType, xs:string propertyName, ) LatLonListCityNames(ns1:displayLevelType displayLevel, ) LatLonListLine(xs:decimal endPoint1Lat, xs:decimal endPoint1Lon, xs:decimal endPoint2Lat, xs:decimal endPoint2Lon, ) LatLonListSquare(xs:decimal centerPointLat, xs:decimal centerPointLon, xs:decimal distanceLat, xs:decimal distanceLon, xs:decimal resolution, ) LatLonListSubgrid(xs:decimal lowerLeftLatitude, xs:decimal lowerLeftLongitude, xs:decimal upperRightLatitude, xs:decimal upperRightLongitude, xs:decimal resolution, ) LatLonListZipCode(ns1:zipCodeListType zipCodeList, ) NDFDgen(xs:decimal latitude, xs:decimal longitude, ns1:productType product, xs:dateTime startTime, xs:dateTime endTime, ns1:weatherParametersType weatherParameters, ) NDFDgenByDay(xs:decimal latitude, xs:decimal longitude, xs:date startDate, xs:integer numDays, ns1:formatType format, ) NDFDgenByDayLatLonList(ns1:listLatLonType listLatLon, xs:date startDate, xs:integer numDays, ns1:formatType format, ) NDFDgenLatLonList(ns1:listLatLonType listLatLon, ns1:productType product, xs:dateTime startTime, xs:dateTime endTime, ns1:weatherParametersType weatherParameters, ) Types (60): ns0:Array ns0:ENTITIES ns0:ENTITY ns0:ID ns0:IDREF ns0:IDREFS ns0:NCName ns0:NMTOKEN ns0:NMTOKENS ns0:NOTATION ns0:Name ns0:QName ns0:Struct ns0:anyURI ns0:arrayCoordinate ns0:base64 ns0:base64Binary ns0:boolean ns0:byte ns1:compTypeType ns0:date ns0:dateTime ns0:decimal ns1:displayLevelType ns0:double ns0:duration ns1:featureTypeType ns0:float ns1:formatType ns0:gDay ns0:gMonth ns0:gMonthDay ns0:gYear ns0:gYearMonth ns0:hexBinary ns0:int ns0:integer ns0:language ns1:latLonPairType ns1:listCityNamesType ns1:listLatLonType ns0:long ns0:negativeInteger ns0:nonNegativeInteger ns0:nonPositiveInteger ns0:normalizedString ns0:positiveInteger ns1:productType ns1:sectorType ns0:short ns0:string ns0:time ns0:token ns0:unsignedByte ns0:unsignedInt ns0:unsignedLong ns0:unsignedShort ns1:weatherParametersType ns1:zipCodeListType'''

for match in re.findall(r"[a-zA-Z]+?\s*\([a-z]*?[0-9]*?:",text):
    print match.split("(")[0]
</snippet></ROW><ROW><id>5561178</id><snippet>from Tkinter import *

def cipher():
    data = text_area.get("1.0",END)

    As,Ts,Cs,Gs, = 0,0,0,0

    for x in data:
        if 'A' == x:
            As+=1 
        elif x == 'T':
            Ts+=1
        elif x =='C':
            Cs+=1
        elif x == 'G':
            Gs+=1
    result.set('Num As: '+str(As)+' Num of Ts: '+str(Ts)+' Num Cs: '+str(Cs)+' Num Gs: '+str(Gs))

window = Tk()

frame=Frame(window)
frame.pack()

text_area = Text(frame)
text_area.pack()

result = StringVar()
result.set('Num As: 0 Num of Ts: 0 Num Cs: 0 Num Gs: 0')
label=Label(window,textvariable=result)
label.pack()

button=Button(window,text="Count", command=cipher)
button.pack()

window.mainloop()
</snippet></ROW><ROW><id>5561317</id><snippet>def __init__(self, l=None):
    if l is None:
        l = []
    self.mylist = l
</snippet></ROW><ROW><id>5561507</id><snippet>inlines</snippet></ROW><ROW><id>5561507</id><snippet>this</snippet></ROW><ROW><id>5561644</id><snippet>url(...)</snippet></ROW><ROW><id>5561644</id><snippet>url(r'^xd_receiver\.html$', direct_to_template, {'template': 'xd_receiver.html'}, name='xd_receiver')
</snippet></ROW><ROW><id>5561644</id><snippet>(r'^xd_receiver\.html$', direct_to_template, {'template': 'xd_receiver.html'}, name='xd_receiver')
</snippet></ROW><ROW><id>5562183</id><snippet>facebookConnect.py</snippet></ROW><ROW><id>5562183</id><snippet>templatetags</snippet></ROW><ROW><id>5562183</id><snippet>__init__.py</snippet></ROW><ROW><id>5562183</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>5562183</id><snippet>facebookconnect</snippet></ROW><ROW><id>5562183</id><snippet>universityDB.universityDetails</snippet></ROW><ROW><id>5563038</id><snippet>freindship=FriendShip()
friendship.user1=#assign a key of user or user object
friendship.user2=#assign a key of user or user object
friendhsip.put()
</snippet></ROW><ROW><id>5563119</id><snippet>arg</snippet></ROW><ROW><id>5563119</id><snippet>raw_input([arg])</snippet></ROW><ROW><id>5563119</id><snippet>raw_input()</snippet></ROW><ROW><id>5563119</id><snippet>name = raw_input("What is your name? ")
print "Hello, %s." % name
</snippet></ROW><ROW><id>5563119</id><snippet>input()</snippet></ROW><ROW><id>5563119</id><snippet>input()</snippet></ROW><ROW><id>5563119</id><snippet>raw_input()</snippet></ROW><ROW><id>5563263</id><snippet>ExternalUser.objects.filter(external_account_id__in=[friend.id for friend in all_friends])
</snippet></ROW><ROW><id>5563432</id><snippet>import glob

list_of_files = glob.glob('./*.txt')

with open("stripD.xls", "w") as fout:
    for fileName in list_of_files:
        data_list = open( fileName, "r" ).readlines()
        fout.write(data_list[17])
        fout.writelines(data_list[44:])
</snippet></ROW><ROW><id>5563966</id><snippet>parem1</snippet></ROW><ROW><id>5563966</id><snippet>parem2</snippet></ROW><ROW><id>5564628</id><snippet>ls</snippet></ROW><ROW><id>5564628</id><snippet>Exit status:
   0      if OK,

   1      if minor problems (e.g., cannot access subdirectory),

   2      if serious trouble (e.g., cannot access command-line argument).
</snippet></ROW><ROW><id>5564630</id><snippet>TextProperty</snippet></ROW><ROW><id>5564630</id><snippet>StringProperty</snippet></ROW><ROW><id>5565239</id><snippet>related_name="%(app_label)s_%(class)s_related"</snippet></ROW><ROW><id>5565601</id><snippet>exec "/usr/bin/perl"
   if 0;
</snippet></ROW><ROW><id>5565663</id><snippet>callable(getattr(classname))</snippet></ROW><ROW><id>5565663</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; c=datetime.datetime
&gt;&gt;&gt; methodList = [method for method in dir(c) if callable(getattr(c, method))]
&gt;&gt;&gt; methodList
['__add__', '__class__', '__delattr__', '__eq__', '__format__', '__ge__',
 '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', 
 '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', 
 '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__', 
 '__subclasshook__', 'astimezone', 'combine', 'ctime', 'date', 'dst', 
 'fromordinal', 'fromtimestamp', 'isocalendar', 'isoformat', 'isoweekday', 
 'now', 'replace', 'strftime', 'strptime', 'time', 'timetuple', 'timetz', 
 'today', 'toordinal', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset',
 'utctimetuple', 'weekday']
</snippet></ROW><ROW><id>5565663</id><snippet>&gt;&gt;&gt; methodList = [item for item in dir(c) 
                  if type(getattr(c, item))==type(getattr(c,'__new__'))]
&gt;&gt;&gt; methodList
['__new__', '__subclasshook__', 'combine', 'fromordinal', 'fromtimestamp', 
 'now', 'strptime', 'today', 'utcfromtimestamp', 'utcnow']
</snippet></ROW><ROW><id>5565663</id><snippet>__new__</snippet></ROW><ROW><id>5565757</id><snippet>import signal
...
def handler(signum, frame):
    print 'Signal handler called with signal', signum
...
signal.signal(signal.SIGALRM, handler)
</snippet></ROW><ROW><id>5565757</id><snippet>signal.alarm(5)
response = urllib2.urlopen(request)
signal.alarm(0) # Disable the signal
</snippet></ROW><ROW><id>5566070</id><snippet>in_stock</snippet></ROW><ROW><id>5566070</id><snippet>StorageItem</snippet></ROW><ROW><id>5566070</id><snippet>def in_stock(self):
    if 'destroyed' and 'permanent_retrieval' not in self.itemstatushistory_set.latest().status.description:
        return True 
</snippet></ROW><ROW><id>5566070</id><snippet>total_items_in_stock = [item for item in storage_items if item.in_stock()]
</snippet></ROW><ROW><id>5566188</id><snippet>[aa+bb for aa,bb in zip(a,b)]
</snippet></ROW><ROW><id>5566352</id><snippet>f = lambda n,t=5**.5:((1+t)**n-(1-t)**n)/(2**n*t)</snippet></ROW><ROW><id>5566352</id><snippet>,t=5**.5</snippet></ROW><ROW><id>5566352</id><snippet>5**.5</snippet></ROW><ROW><id>5566352</id><snippet>t</snippet></ROW><ROW><id>5566352</id><snippet>2*n</snippet></ROW><ROW><id>5566352</id><snippet>2**n</snippet></ROW><ROW><id>5566352</id><snippet>f=lambda n:round((1+5**.5)**n/5**.5/2**n)</snippet></ROW><ROW><id>5566638</id><snippet>threading.Timer()</snippet></ROW><ROW><id>5566638</id><snippet>threading.Thread</snippet></ROW><ROW><id>5566638</id><snippet>print "%s" % hello</snippet></ROW><ROW><id>5566638</id><snippet>threading.Timer()</snippet></ROW><ROW><id>5566638</id><snippet>import threading
import time

class RepeatEvery(threading.Thread):
    def __init__(self, interval, func, *args, **kwargs):
        threading.Thread.__init__(self)
        self.interval = interval  # seconds between calls
        self.func = func          # function to call
        self.args = args          # optional positional argument(s) for call
        self.kwargs = kwargs      # optional keyword argument(s) for call
        self.runable = True
    def run(self):
        while self.runable:
            self.func(*self.args, **self.kwargs)
            time.sleep(self.interval)
    def stop(self):
        self.runable = False

def greeting(hello):
    print hello

thread = RepeatEvery(3, greeting, "Hi guys")
print "starting"
thread.start()
thread.join(21)  # allow thread to execute a while...
thread.stop()
print 'stopped'
</snippet></ROW><ROW><id>5566638</id><snippet># starting
# Hi guys
# Hi guys
# Hi guys
# Hi guys
# Hi guys
# Hi guys
# Hi guys
# stopped
</snippet></ROW><ROW><id>5566638</id><snippet>threading.Thread</snippet></ROW><ROW><id>5566638</id><snippet>__init__()</snippet></ROW><ROW><id>5566638</id><snippet>run()</snippet></ROW><ROW><id>5566638</id><snippet>stop()</snippet></ROW><ROW><id>5566638</id><snippet>print "%s" % hello</snippet></ROW><ROW><id>5566638</id><snippet>greeting()</snippet></ROW><ROW><id>5566638</id><snippet>print hello</snippet></ROW><ROW><id>5566922</id><snippet>for x in range (2,n)
</snippet></ROW><ROW><id>5566922</id><snippet>for (x = 2; x &lt; n; x++)
</snippet></ROW><ROW><id>5566922</id><snippet>for x in range (2,n): 
</snippet></ROW><ROW><id>5566922</id><snippet>n</snippet></ROW><ROW><id>5566922</id><snippet>def isprime(n)</snippet></ROW><ROW><id>5566922</id><snippet>n</snippet></ROW><ROW><id>5566922</id><snippet>print("{} equals {} x {}".format(n, x, n // x))
</snippet></ROW><ROW><id>5566922</id><snippet>A equals B x C</snippet></ROW><ROW><id>5566922</id><snippet>A</snippet></ROW><ROW><id>5566922</id><snippet>n</snippet></ROW><ROW><id>5566922</id><snippet>B</snippet></ROW><ROW><id>5566922</id><snippet>x</snippet></ROW><ROW><id>5566922</id><snippet>C</snippet></ROW><ROW><id>5566922</id><snippet>n/x</snippet></ROW><ROW><id>5566922</id><snippet>9 // 2 = 4</snippet></ROW><ROW><id>5567753</id><snippet>newImage = numpy.where(np.logical_and(image1, image2), (image1 + image2) / 2, 0)
</snippet></ROW><ROW><id>5567753</id><snippet>image1</snippet></ROW><ROW><id>5567753</id><snippet>image2</snippet></ROW><ROW><id>5567847</id><snippet>def command_output(cmd):
    """ Capture a command's standard output."""
    import subprocess;
    return subprocess.Popen(cmd.split(), stdout=subprocess.PIPE).communicate()[0];

result = command_output('ls -al');
</snippet></ROW><ROW><id>5568041</id><snippet>HTTP 404</snippet></ROW><ROW><id>5568041</id><snippet>request()</snippet></ROW><ROW><id>5568041</id><snippet>httpConn.request('PUT','/ShazaamMon/setmfgdata.cgi?serial=' + str(hwSerialNum))
</snippet></ROW><ROW><id>5568041</id><snippet>httpConn.request('GET','/ShazaamMon/setmfgdata.cgi?serial=' + str(hwSerialNum))
</snippet></ROW><ROW><id>5568125</id><snippet>&gt;&gt;&gt; from django.forms import DecimalField
&gt;&gt;&gt; f = DecimalField(max_digits=10, decimal_places=1)
&gt;&gt;&gt; f.validate(Decimal('1E+2'))
Traceback (most recent call last):
...
ValidationError: [u'Ensure that there are no more than 1 decimal places.']
</snippet></ROW><ROW><id>5568169</id><snippet>import numpy as np
a = np.arange(10)
</snippet></ROW><ROW><id>5568169</id><snippet>b = np.lib.stride_tricks.as_strided(a, (1000, a.size), (0, a.itemsize))
</snippet></ROW><ROW><id>5568169</id><snippet>c = b.flat
</snippet></ROW><ROW><id>5568374</id><snippet>python3.2</snippet></ROW><ROW><id>5568374</id><snippet>python</snippet></ROW><ROW><id>5568498</id><snippet>from win32com.client import Dispatch
ex = Dispatch("Excel.Application")
# you can use the ex object to invoke Excel methods etc.
</snippet></ROW><ROW><id>5568681</id><snippet>usleep</snippet></ROW><ROW><id>5568681</id><snippet>import time
time.sleep(seconds/1000000.0)
</snippet></ROW><ROW><id>5568681</id><snippet>time.sleep()</snippet></ROW><ROW><id>5568758</id><snippet>fraction of a second elapsed since last frame * distance you want your block to move in a second
</snippet></ROW><ROW><id>5569002</id><snippet>None</snippet></ROW><ROW><id>5569193</id><snippet>messages = []
try:
    pdict = parser.parseProtocol(id)
    messages.append("parsing worked")
except:
    messages.append("parsing failed")

try:
    file = parser.getFile(pdict['filePath'])
    messages.append("file retrieved")
except:
    messages.append("file not found")

print '\n'.join(messages)
</snippet></ROW><ROW><id>5569193</id><snippet>class Tests(object):
    def __init__(self):
        messages = []
        self.pdict = None

    def parsetest(self):
        try:
            self.pdict = parser.parseProtocol(id)
        except:
            self.messages.append("parsing failed")
        else:
            self.messages.append("parsing worked")

    def retrievetest(self):
        if self.pdict is None:
            raise Exception("called retrievetest() before successfully parsing")
        try:
            file = parser.getFile(self.pdict['filePath'])
        except:
            self.messages.append("file not found")
        else:
            self.messages.append("file retrieved")
</snippet></ROW><ROW><id>5569193</id><snippet>tests = Tests()
tests.parsetest()
if condition:
    tests.retrievetest()
print '\n'.join(tests.messages)
</snippet></ROW><ROW><id>5569324</id><snippet>class MyTemplateAdmin(admin.ModelAdmin):
    def __init__(self, *args, **kwargs):
        super(MyTemplateAdmin, self).__init__(*args, **kwargs)
        #see if there are new templates
        #and set the inlines list property

    list_display = ('name')
    search_fields = ['name']
</snippet></ROW><ROW><id>5569589</id><snippet>self</snippet></ROW><ROW><id>5569589</id><snippet>__init__</snippet></ROW><ROW><id>5569589</id><snippet>def __init__(self):
</snippet></ROW><ROW><id>5569815</id><snippet>import io, optparse, tarfile
</snippet></ROW><ROW><id>5569815</id><snippet>str</snippet></ROW><ROW><id>5569815</id><snippet>&gt;&gt;&gt; tarfile
&lt;module 'tarfile' from '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/tarfile.py'&gt;
</snippet></ROW><ROW><id>5569815</id><snippet>.py</snippet></ROW><ROW><id>5570024</id><snippet>element = pylab.plot(range(100))
pylab.legend([element],[ "first line \n second line"])
</snippet></ROW><ROW><id>5570047</id><snippet>hh &lt;right@gmail.com&gt;</snippet></ROW><ROW><id>5570047</id><snippet>hh &lt;right@gmail.com&gt; = hhh &lt;right@gmail.com&gt;</snippet></ROW><ROW><id>5570165</id><snippet>re.split</snippet></ROW><ROW><id>5570165</id><snippet>re.findall</snippet></ROW><ROW><id>5570165</id><snippet>&gt;&gt;&gt; re.split('(\d{3,4}.[\d.]+?){1}\s([\w\s]+[.]){1}',text)

['', '101.1', 'Title.', ' This is an example code.\n\n', '101.1.2', 'Local Fees.', ' The local jurisdiction may charge fees for building permit violations per Section 300.1.\n']
</snippet></ROW><ROW><id>5570749</id><snippet>__reduce_ex__()</snippet></ROW><ROW><id>5570844</id><snippet>c, b = a</snippet></ROW><ROW><id>5571004</id><snippet>if len(sys.argv) == 1:
    print 'no arg'
</snippet></ROW><ROW><id>5571004</id><snippet>for arg in sys.argv:
    ...
</snippet></ROW><ROW><id>5571004</id><snippet>for arg in sys.argv[1:]:
    ...
</snippet></ROW><ROW><id>5571244</id><snippet>def unzipItem(self, fileName, destination)
    print "--unzipItem--"
    zip = zipfile.ZipFile(fileName)
    nameList = zip.namelist()

    #get the amount of files in the file to properly size the progress bar
    fileCount = 0
    for item in nameList:
        fileCount += 1

    #Built progress dialog
    dlg = wx.ProgressDialog("Unziping files",
                           "An informative message",
                           fileCount,
                           parent = self,
                           )

    keepGoing = True
    count = 0

    for item in nameList:
        count += 1
        dir,file = os.path.split(item)
        print "unzip " + file

        #update status bar
        self.SetStatusText("Unziping " + str(item))
        #update progress dialog
        (keepGoing, skip) = dlg.Update(count, file)
        zip.extract(item,destination)

    zip.close()
</snippet></ROW><ROW><id>5571938</id><snippet>files = [f for f in files if f.endswith('.php')]
</snippet></ROW><ROW><id>5571938</id><snippet>files = (f for f in files if f.endswith('.php'))
</snippet></ROW><ROW><id>5572081</id><snippet>create</snippet></ROW><ROW><id>5572081</id><snippet>remove</snippet></ROW><ROW><id>5572106</id><snippet>def key(d): return tuple(sorted(d.items()))

x = {}
x[key({'stupid':True, 'foo':'bar', ...})] = object_123

x.get(key({'stupid':True, 'foo':'bar', ...})) =&gt; object_123
</snippet></ROW><ROW><id>5572195</id><snippet>#python2.6 setup.py
</snippet></ROW><ROW><id>5572195</id><snippet>#python2.5 setup.py
</snippet></ROW><ROW><id>5572558</id><snippet>data=Markup(feedItem.html)</snippet></ROW><ROW><id>5572558</id><snippet>data=Markup(feedItem.html).unescape()</snippet></ROW><ROW><id>5572563</id><snippet>lp</snippet></ROW><ROW><id>5572563</id><snippet>ShellExecute</snippet></ROW><ROW><id>5572683</id><snippet>contourf</snippet></ROW><ROW><id>5572683</id><snippet>contour</snippet></ROW><ROW><id>5572683</id><snippet>import numpy as np
import matplotlib.pyplot as plt

xi = np.array([0., 0.5, 1.0])
yi = np.array([0., 0.5, 1.0])
zi = np.ones((3,3))

try:
    CS = plt.contour(xi, yi, zi, 15, linewidths=0.5, colors='k')
except ValueError:
    pass
CS = plt.contourf(xi, yi, zi, 15, cmap=plt.cm.jet)

plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>5572715</id><snippet>type</snippet></ROW><ROW><id>5572715</id><snippet>=</snippet></ROW><ROW><id>5572715</id><snippet>link = category.links.filter('type =', 'in').get()
</snippet></ROW><ROW><id>5572760</id><snippet>__gsignals__ = {
  "some-signal": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, ()),
}
</snippet></ROW><ROW><id>5572897</id><snippet>pi = ProductImage(product=product)
pi.source_image.save(image_name, ContentFile(image_file.read()))
pi.save()
</snippet></ROW><ROW><id>5572903</id><snippet>SWIG_SHARED_PTR(base_int_sptr, base_int) 
SWIG_SHARED_PTR_DERIVED(derived_int_sptr, base_int, derived_int)
</snippet></ROW><ROW><id>5572903</id><snippet>SWIG_SHARED_PTR(base_int_sptr, Base&lt;int&gt;)                              
SWIG_SHARED_PTR_DERIVED(derived_int_sptr, Base&lt;int&gt;, Derived&lt;int&gt;)
</snippet></ROW><ROW><id>5573025</id><snippet>import telnetlib

def process_rawq(self):
    #existing stuff
    self.cookedq = self.cookedq + buf[0]
    print("Dbg: Cooked Queue contents = %r" % buf[0]
    self.sbdataq = self.sbdataq + buf[1]

telnetlib.Telnet.process_rawq = process_rawq
</snippet></ROW><ROW><id>5573025</id><snippet>set_debuglevel(1)</snippet></ROW><ROW><id>5573253</id><snippet>*[local-name() = "elem"]</snippet></ROW><ROW><id>5573253</id><snippet>import lxml.etree

def xpath_ns(tree, expr):
    "Parse a simple expression and prepend namespace wildcards where unspecified."
    qual = lambda n: n if not n or ':' in n else '*[local-name() = "%s"]' % n
    expr = '/'.join(qual(n) for n in expr.split('/'))
    nsmap = dict((k, v) for k, v in tree.nsmap.items() if k)
    return tree.xpath(expr, namespaces=nsmap)

doc = '''&lt;root xmlns="http://really-long-namespace.uri"
    xmlns:other="http://with-ambivalent.end/#"&gt;
    &lt;other:elem/&gt;
&lt;/root&gt;'''

tree = lxml.etree.fromstring(doc)
print xpath_ns(tree, '/root')
print xpath_ns(tree, '/root/elem')
print xpath_ns(tree, '/root/other:elem')
</snippet></ROW><ROW><id>5573253</id><snippet>[&lt;Element {http://really-long-namespace.uri}root at 23099f0&gt;]
[&lt;Element {http://with-ambivalent.end/#}elem at 2309a48&gt;]
[&lt;Element {http://with-ambivalent.end/#}elem at 2309a48&gt;]
</snippet></ROW><ROW><id>5573798</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>5573798</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>5573798</id><snippet>appscript</snippet></ROW><ROW><id>5573798</id><snippet>Program Argument</snippet></ROW><ROW><id>5573798</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5573798</id><snippet>#!/opt/local/bin/python2.6
</snippet></ROW><ROW><id>5573798</id><snippet>.bash_profile</snippet></ROW><ROW><id>5573798</id><snippet>PATH</snippet></ROW><ROW><id>5573798</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>5573798</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>5573798</id><snippet>python</snippet></ROW><ROW><id>5573798</id><snippet>launchd</snippet></ROW><ROW><id>5573798</id><snippet>PATH</snippet></ROW><ROW><id>5573798</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>5573798</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>5574147</id><snippet>send</snippet></ROW><ROW><id>5574147</id><snippet>[winfo interps]</snippet></ROW><ROW><id>5574147</id><snippet>[tk appname]</snippet></ROW><ROW><id>5574147</id><snippet>send $other_app tk_dialog . "Sample Dialog" "See, it's this easy." "" 0 Ok
</snippet></ROW><ROW><id>5574180</id><snippet>def somename(z):
    i = 0
    while (....):
        a += z[i]
        b += z[i+1]
        c += z[i+2]
        i += 3
</snippet></ROW><ROW><id>5574180</id><snippet>z</snippet></ROW><ROW><id>5574180</id><snippet>(....)</snippet></ROW><ROW><id>5574221</id><snippet>xsltproc</snippet></ROW><ROW><id>5574578</id><snippet>cgi</snippet></ROW><ROW><id>5574578</id><snippet>os</snippet></ROW><ROW><id>5574578</id><snippet>environ</snippet></ROW><ROW><id>5574578</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>5574578</id><snippet>import cgi
import os

print "Content-type: text/html"
print ""
print cgi.escape(os.environ["REMOTE_ADDR"])
</snippet></ROW><ROW><id>5574616</id><snippet>threading.Lock</snippet></ROW><ROW><id>5574623</id><snippet>from xml.dom.minidom import Document, parseString
import nltk

sentences = "Call me Ishmael. Some years ago - never mind how long precisely - having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world."

tagged = nltk.sent_tokenize(sentences.strip())
tagged = [nltk.word_tokenize(sent) for sent in tagged]
tagged = [nltk.pos_tag(sent) for sent in tagged]

# Write to xml string
doc = Document()

base = doc.createElement("Document")
doc.appendChild(base)

headline = doc.createElement("headline")
htext = doc.createTextNode("Article Headline")
headline.appendChild(htext)
base.appendChild(headline)

body = doc.createElement("body")
btext = doc.createTextNode(sentences)
headline.appendChild(btext)
base.appendChild(body)

pos_tags = doc.createElement("pos_tags")
tagtext = doc.createTextNode(repr(tagged))
pos_tags.appendChild(tagtext)
base.appendChild(pos_tags)

xmlstring = doc.toxml()

# Read back tagged

doc2 = parseString(xmlstring)
el = doc2.getElementsByTagName("pos_tags")[0]
text = el.firstChild.nodeValue
tagged2 = eval(text)

print "Equal? ", tagged == tagged2</snippet></ROW><ROW><id>5574672</id><snippet>while mazesol.removeDeadEnds(win, board) != 0:
    pass
</snippet></ROW><ROW><id>5574886</id><snippet>from matplotlib import pyplot as plt
import numpy as np

x = np.arange(0,10,.1)
y = np.sin(x)
plt.plot(x,y)
ax = plt.gca()
ax.axhline(.4, xmin=0, xmax=1, linewidth=0.3, color=(0, 0, 0, 0.75))
plt.show()
</snippet></ROW><ROW><id>5574886</id><snippet>axhline</snippet></ROW><ROW><id>5575192</id><snippet>l1 = ['a', ['b', ['x', '1'], ['y', '2']]]
l2 = ['a', ['c', ['xx', '4'], ['gg', ['m', '3']]]]

def combine(d, l):
    if not l[0] in d:
        d[l[0]] = {}

    for v in l[1:]:
        if type(v) == list:
            combine(d[l[0]],v)
        else:
            d[l[0]] = v

h = {}
combine(h, l1)
combine(h, l2)
print h
</snippet></ROW><ROW><id>5575192</id><snippet>{'a': {'c': {'gg': {'m': '3'}, 'xx': '4'}, 'b': {'y': '2', 'x': '1'}}}
</snippet></ROW><ROW><id>5575319</id><snippet>AuthSub</snippet></ROW><ROW><id>5575425</id><snippet>2147483647</snippet></ROW><ROW><id>5575425</id><snippet>0x7fffffff</snippet></ROW><ROW><id>5575467</id><snippet>class LimitedList:
    def __init__(self, inputList=[]):
        self._list = []
        self.append(inputList)

    def append(self, inputList):
        for i in inputList:
            if i in [0,1,2] and i not in self._list:
                self._list += [i]
        return self._list.sort()

    def set(self, inputList=[]):
        self.__init__(inputList)

    def get(self):
        return self._list   

    def __iter__(self):
        return (i for i in self._list)

    def __add__(self, inputList):
        temp = LimitedList(self._list)
        for i in inputList:
            if i in [0,1,2] and i not in temp._list:
                temp._list += [i]
        temp._list.sort()
        return temp

    def __getitem__(self, key):
        return self._list[key]

    def __len__(self):
        return len(self._list)




a = LimitedList([2,3,4,5,6,0]) # create a LimitedList

print a.get()  # get the LimitedList

a += [2,3,4,5,6,6,1] # use the "+" operator to append a list to your limited list

print len(a) # get the length 

print a[1]   # get the element at position 1

for i in a:  # iterate over the LimitedList
    print i
</snippet></ROW><ROW><id>5575467</id><snippet>+</snippet></ROW><ROW><id>5575467</id><snippet>in</snippet></ROW><ROW><id>5575467</id><snippet>len()</snippet></ROW><ROW><id>5575703</id><snippet>{i:j+'www'  for i,j in a.items()}
</snippet></ROW><ROW><id>5575703</id><snippet>dict((i,j+'www') for i,j in a.items())
</snippet></ROW><ROW><id>5575773</id><snippet>import operator

for fn in os.listdir(path):

    if fn[0] == '.':
        continue

    try:
        p = os.path.join(path, fn)
    except:
        continue

    s = os.lstat(p)

    if stat.S_ISDIR(s.st_mode):
        l.append((fn, build_tree(p)))
    elif stat.S_ISREG(s.st_mode):
        l.append((fn, s.st_size))
</snippet></ROW><ROW><id>5575773</id><snippet>l.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>5575773</id><snippet>l.sort(key=operator.itemgetter(1), reverse=True)
</snippet></ROW><ROW><id>5575845</id><snippet>window.opener.location.href = "http://some/new/location";
window.close();
</snippet></ROW><ROW><id>5576911</id><snippet>import hashlib
import struct

cha1 = struct.pack('16B', *[int(c, 16) for c in (challenge[i:i+2]
    for i in xrange(0, len(challenge), 2))])

word = hashlib.md5('\0%s%s' % (word, cha1)).hexdigest()
</snippet></ROW><ROW><id>5577110</id><snippet>&gt;&gt;&gt; s = "Hello, World"
&gt;&gt;&gt; c_s = c_char_p(s)
&gt;&gt;&gt; print c_s
c_char_p('Hello, World')
&gt;&gt;&gt; c_s.value = "Hi, there"
&gt;&gt;&gt; print c_s
c_char_p('Hi, there')
&gt;&gt;&gt; print s                 # first string is unchanged
Hello, World
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5577110</id><snippet>const char*</snippet></ROW><ROW><id>5577110</id><snippet>create_string_buffer</snippet></ROW><ROW><id>5577182</id><snippet>--noreload</snippet></ROW><ROW><id>5577182</id><snippet>--noreload</snippet></ROW><ROW><id>5577182</id><snippet>pydev/django</snippet></ROW><ROW><id>5577536</id><snippet>string</snippet></ROW><ROW><id>5577536</id><snippet>isdigit()</snippet></ROW><ROW><id>5577536</id><snippet>string[0].isdigit()
</snippet></ROW><ROW><id>5577763</id><snippet>&lt;</snippet></ROW><ROW><id>5577831</id><snippet>@page{</snippet></ROW><ROW><id>5577831</id><snippet>{</snippet></ROW><ROW><id>5577831</id><snippet>@page {</snippet></ROW><ROW><id>5577879</id><snippet>pyclbr</snippet></ROW><ROW><id>5577961</id><snippet>CreateDirectoryW</snippet></ROW><ROW><id>5577961</id><snippet>CreateDirectory</snippet></ROW><ROW><id>5577961</id><snippet>#!/usr/bin/perl
use utf8;
use Win32::FindFile qw( CreateDirectory );
my $dir = 'H:\\Dolly. - 。.〆bear小熊-葉鏗然-ω·）~☆ぼんじ';
CreateDirectory($dir)
   or die $^E;
</snippet></ROW><ROW><id>5578056</id><snippet>activate</snippet></ROW><ROW><id>5578056</id><snippet>app</snippet></ROW><ROW><id>5578056</id><snippet>acrobat = app('Adobe Acrobat Pro')
acrobat.activate()
acrobat.open(fileURL)
</snippet></ROW><ROW><id>5578141</id><snippet>thread</snippet></ROW><ROW><id>5578141</id><snippet>_thread</snippet></ROW><ROW><id>5578141</id><snippet>threading</snippet></ROW><ROW><id>5578141</id><snippet>_thread</snippet></ROW><ROW><id>5578141</id><snippet>threading</snippet></ROW><ROW><id>5578211</id><snippet>object</snippet></ROW><ROW><id>5578211</id><snippet>dtype</snippet></ROW><ROW><id>5579185</id><snippet>([], )
#  ^
</snippet></ROW><ROW><id>5580341</id><snippet>from hachoir_core.stream.input import InputStreamError
</snippet></ROW><ROW><id>5580799</id><snippet>import os, pickle, struct

myfile = open('/path/to/my/file', 'w+b')
myfile.write(struct.pack('L', 0)) # write a long of zeroes
index = []
for o in objects:
    index.append(myfile.tell())
    pickle.dump(o, myfile)
index_loc = myfile.tell()
pickle.dump(index, myfile)
myfile.seek(0, 0,  os.SEEK_SET)
myfile.write(struct.pack('L', index_loc))
</snippet></ROW><ROW><id>5580898</id><snippet>__init__.py</snippet></ROW><ROW><id>5580898</id><snippet>from model01 import Model01Form
from model02 import Model02Form
</snippet></ROW><ROW><id>5581563</id><snippet>result= { '=': lambda a, b: a == b,
    '&gt;': lambda a, b: a &gt; b,
    '&gt;=': lambda a, b: a &gt;= b,
    etc.
    }[condition]( prevTime, currentTime )
</snippet></ROW><ROW><id>5581586</id><snippet>FileField</snippet></ROW><ROW><id>5581755</id><snippet>[lena][0]</snippet></ROW><ROW><id>5581755</id><snippet>a</snippet></ROW><ROW><id>5581755</id><snippet>from heapq import heappop, heappush

def distance(a, b):
   pq = [(0,0,0)]
   lena = len(a)
   lenb = len(b)
   while True:
      (wgh, i, j) = heappop(pq)
      if i == lena and j == lenb:
         return wgh
      if i &lt; lena:
         # deleted
         heappush(pq, (wgh+1, i+1, j))
      if j &lt; lenb:
         # inserted
         heappush(pq, (wgh+1, i, j+1))
      if i &lt; lena and j &lt; lenb:
         if a[i] == b[i]:
            # unchanged
            heappush(pq, (wgh, i+1, j+1))
         else:
            # changed
            heappush(pq, (wgh+1, i+1, j+1))
      # ... more possibilities for changes, like your "+(i-i1-1)+1+(j-j1-1)"
</snippet></ROW><ROW><id>5581755</id><snippet>heapq</snippet></ROW><ROW><id>5581762</id><snippet>min</snippet></ROW><ROW><id>5582128</id><snippet>git-archive</snippet></ROW><ROW><id>5582128</id><snippet>export-subst</snippet></ROW><ROW><id>5582128</id><snippet>git log --format=...</snippet></ROW><ROW><id>5582128</id><snippet>__version__ = $Format:%H$</snippet></ROW><ROW><id>5582128</id><snippet>&lt;filename&gt; export-subst</snippet></ROW><ROW><id>5582128</id><snippet>git archive</snippet></ROW><ROW><id>5582128</id><snippet>git describe</snippet></ROW><ROW><id>5582128</id><snippet>v1.7.4.1-59-ge3d3f7d</snippet></ROW><ROW><id>5582128</id><snippet>v1.7.4.1</snippet></ROW><ROW><id>5582128</id><snippet>ge3d3f7d</snippet></ROW><ROW><id>5582128</id><snippet>-D</snippet></ROW><ROW><id>5582408</id><snippet>value = reduce(lambda sum, (x, y): sum + x*y, zip(a, b), 0)
</snippet></ROW><ROW><id>5582828</id><snippet>from django.views import debug
</snippet></ROW><ROW><id>5582875</id><snippet>np.maximum</snippet></ROW><ROW><id>5582875</id><snippet>g</snippet></ROW><ROW><id>5582875</id><snippet>4</snippet></ROW><ROW><id>5582875</id><snippet>4</snippet></ROW><ROW><id>5582875</id><snippet>True == 1</snippet></ROW><ROW><id>5582875</id><snippet>h.dtype.type == np.dtype(np.int32)</snippet></ROW><ROW><id>5582875</id><snippet>h.dtype == np.int32</snippet></ROW><ROW><id>5583194</id><snippet>post_save</snippet></ROW><ROW><id>5583194</id><snippet>pre_save</snippet></ROW><ROW><id>5583194</id><snippet>old = Vote.objects.get(pk=instance.pk)</snippet></ROW><ROW><id>5583201</id><snippet>def getsize_workaround( filename ):
    size = os.path.getsize( filename )
    if size &lt; 0:
        import subprocess as s
        size = long( s.Popen("ls -l %s | cut -d ' ' -f5" % filename,
                    shell=True, stdout=s.PIPE).communicate()[0] )
    return size
</snippet></ROW><ROW><id>5583253</id><snippet>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
TEMPLATE_DIRS = [
    os.path.join(PROJECT_ROOT, "templates"),
]
</snippet></ROW><ROW><id>5583253</id><snippet>__file__</snippet></ROW><ROW><id>5583253</id><snippet>local_settings.py</snippet></ROW><ROW><id>5583253</id><snippet>try:
    from local_settings import *
except ImportError:
    pass
</snippet></ROW><ROW><id>5583542</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/datetime.h:186: warning: ‘PyDateTimeAPI’ defined but not used
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
</snippet></ROW><ROW><id>5583542</id><snippet>ARCHFLAGS="-arch i386 -arch x86_64" python setup.py install
</snippet></ROW><ROW><id>5583749</id><snippet>client.get</snippet></ROW><ROW><id>5583749</id><snippet>follow</snippet></ROW><ROW><id>5583749</id><snippet>response = self.client.get('/contact/', follow=True)
</snippet></ROW><ROW><id>5584124</id><snippet>impl = getattr(c.service, method)
response = impl('90210')
print response
</snippet></ROW><ROW><id>5584124</id><snippet>url = 'http://www.webservicex.net/stockquote.asmx?WSDL'
client = Client(url=url)
name = 'GetQuote'
impl = getattr(client.service, name)
print impl('IBM')
</snippet></ROW><ROW><id>5584124</id><snippet>&lt;StockQuotes&gt;
&lt;Stock&gt;
    &lt;Symbol&gt;IBM&lt;/Symbol&gt;
    &lt;Last&gt;163.81&lt;/Last&gt;
    &lt;Date&gt;4/7/2011&lt;/Date&gt;
    &lt;Time&gt;11:47am&lt;/Time&gt;
    &lt;Change&gt;-0.23&lt;/Change&gt;
    &lt;Open&gt;164.10&lt;/Open&gt;
    &lt;High&gt;164.5463&lt;/High&gt;
    &lt;Low&gt;163.44&lt;/Low&gt;
    &lt;Volume&gt;1573461&lt;/Volume&gt;
    &lt;MktCap&gt;199.8B&lt;/MktCap&gt;
    &lt;PreviousClose&gt;164.04&lt;/PreviousClose&gt;
    &lt;PercentageChange&gt;-0.14%&lt;/PercentageChange&gt;
    &lt;AnnRange&gt;116.00 - 167.72&lt;/AnnRange&gt;
    &lt;Earns&gt;11.52&lt;/Earns&gt;
    &lt;P-E&gt;14.24&lt;/P-E&gt;
    &lt;Name&gt;International Bus&lt;/Name&gt;
&lt;/Stock&gt;
&lt;/StockQuotes&gt;
</snippet></ROW><ROW><id>5584604</id><snippet>a%b
</snippet></ROW><ROW><id>5584604</id><snippet>26%7
</snippet></ROW><ROW><id>5584695</id><snippet>self</snippet></ROW><ROW><id>5584695</id><snippet>def dump(f):
    def decorated(self, *args, **kwargs):
        print 'Class: {0}'.format(self.__class__.__name__)
        print 'Args passed to decorated function: {0}'.format(args)
        print 'Keyword args passed to decorated function: {0}'.format(kwargs)
        return f(self, *args, **kwargs)
    return decorated

class Test(object):
    """
    &gt;&gt;&gt; Test().test('arg1', 'arg2', kwarg1='kwval1')
    Class: Test
    Args passed to decorated function: ('arg1', 'arg2')
    Keyword args passed to decorated function: {'kwarg1': 'kwval1'}
    """
    @dump
    def test(*args, **kwargs):
        pass
</snippet></ROW><ROW><id>5584840</id><snippet>_DBNAME_MAP = {
    'psycopg2': 'postgres',
    'MySQLdb': 'mysql',
    'sqlite3': 'sqlite',
    'sqlite': 'sqlite'
    }

def get_dbname(dbobj):
    mod = dbobj.__class__.__module__.split('.', 1)[0]
    return _DBNAME_MAP.get(mod)
</snippet></ROW><ROW><id>5584840</id><snippet>&gt;&gt;&gt; s_conn = sqlite3.connect('foo.db')
&gt;&gt;&gt; get_dbname(s_conn)
'sqlite'
&gt;&gt;&gt; get_dbname(s_conn.cursor())
'sqlite'

&gt;&gt;&gt; p_conn = psycopg2.connect('host=localhost user=postgres')
&gt;&gt;&gt; get_dbname(p_conn)
'postgres'
&gt;&gt;&gt; get_dbname(p_conn.cursor())
'postgres'
</snippet></ROW><ROW><id>5584965</id><snippet>eval()</snippet></ROW><ROW><id>5585345</id><snippet>return</snippet></ROW><ROW><id>5585345</id><snippet>execute_script()</snippet></ROW><ROW><id>5585345</id><snippet>&gt;&gt;&gt; from selenium import webdriver
&gt;&gt;&gt; wd = webdriver.Firefox()
&gt;&gt;&gt; wd.get("http://localhost/foo/bar")
&gt;&gt;&gt; wd.execute_script("return 5")
5
&gt;&gt;&gt; wd.execute_script("return true")
True
&gt;&gt;&gt; wd.execute_script("return {foo: 'bar'}")
{u'foo': u'bar'}
&gt;&gt;&gt; wd.execute_script("return foobar()")
u'eli'
</snippet></ROW><ROW><id>5585789</id><snippet>strptime</snippet></ROW><ROW><id>5585789</id><snippet>time</snippet></ROW><ROW><id>5585789</id><snippet>datetime</snippet></ROW><ROW><id>5585789</id><snippet>strptime</snippet></ROW><ROW><id>5585789</id><snippet>datetime(*(time.strptime(date_string, format)[0:6]))</snippet></ROW><ROW><id>5585792</id><snippet>enc_key</snippet></ROW><ROW><id>5585792</id><snippet> a_var_that_gets_display = user_supplied_string % locals()
</snippet></ROW><ROW><id>5585792</id><snippet>Encryption key is %(enc_key)s</snippet></ROW><ROW><id>5585792</id><snippet>user_supplied_string</snippet></ROW><ROW><id>5585792</id><snippet>locals()</snippet></ROW><ROW><id>5586266</id><snippet>python manage.py ...</snippet></ROW><ROW><id>5586501</id><snippet>Simple Storage Service (S3)
SimpleQueue Service (SQS)
Elastic Compute Cloud (EC2) 
</snippet></ROW><ROW><id>5586522</id><snippet>reset</snippet></ROW><ROW><id>5586860</id><snippet># filter implementation
@filter
def myfilter(arg1, arg2):
    ....

# usage in template
{{ arg1|myfilter:arg2 }}
</snippet></ROW><ROW><id>5586860</id><snippet>{% extends %}</snippet></ROW><ROW><id>5586860</id><snippet>{%</snippet></ROW><ROW><id>5586860</id><snippet>%}</snippet></ROW><ROW><id>5586860</id><snippet>@inclusion_tag</snippet></ROW><ROW><id>5586860</id><snippet>{% include %}</snippet></ROW><ROW><id>5586860</id><snippet>{% include %}</snippet></ROW><ROW><id>5586860</id><snippet>{% mytag "some str" arg2 arg3 %}</snippet></ROW><ROW><id>5586860</id><snippet>context</snippet></ROW><ROW><id>5586872</id><snippet>painter = QPainter() // the QPainter to the object you want to paint

a = QImage("file1.png")
b = QImage("file2.png")
space = 5 // pixels
tile = QPixmap(QSize(a.width() + b.width(), a.height() + space)
painter2.setBrush(QBrush(QColor(0, 0, 0, 0)))
painter2.fillRect(0, 0, tile.width(), tile.height())
painter2 = QPainter(tile)
painter2.drawImage(QPoint(0, 0), a)
painter2.drawImage(QPoint(a.width(), 0), b)

painter.setBrush(tile.toImage())

// now anything you draw will be filled with the tiled pattern
</snippet></ROW><ROW><id>5586898</id><snippet>import numpy, scipy
from scipy import interpolate

kernelIn = numpy.array([
    [0,-2,0],
    [-2,11,-2],
    [0,-2,0]])

inKSize = len(kernelIn)
outKSize = 5

kernelOut = numpy.zeros((outKSize),numpy.uint8)

x = numpy.array([0,1,2])
y = numpy.array([0,1,2])

z = kernelIn

xx = numpy.linspace(x.min(),x.max(),outKSize)
yy = numpy.linspace(y.min(),y.max(),outKSize)

newKernel = interpolate.RectBivariateSpline(x,y,z, kx=2,ky=2)

kernelOut = newKernel(xx,yy)

print kernelOut
##[[  0.      -1.5     -2.      -1.5      0.    ]
## [ -1.5      5.4375   7.75     5.4375  -1.5   ]
## [ -2.       7.75    11.       7.75    -2.    ]
## [ -1.5      5.4375   7.75     5.4375  -1.5   ]
## [  0.      -1.5     -2.      -1.5      0.    ]]
</snippet></ROW><ROW><id>5586919</id><snippet>def __init__(self, *args, **kwargs):
   super(MyForm, self).__init__(*args, **kwargs)
   self.fields['year'].choices = self.get_years()
</snippet></ROW><ROW><id>5587571</id><snippet>from collections import deque
from types import StringTypes

s = "A!\nB!\nC!\n&lt;tag&gt;\nD!\nE!\n&lt;/tag&gt;\nF!\n&lt;tag&gt;\nG!\n&lt;/tag&gt;"

def parse(parts):
    if type(parts) in StringTypes:
        parts = deque(parts.split("\n"))
    ret = []
    while parts:
        part = parts.popleft()
        if part[-1] == "!":
            ret.append(part[:-1])
        elif part == "&lt;tag&gt;":
            ret.append(parse(parts))
        elif part == "&lt;/tag&gt;":
            return ret
    return ret

print parse(s)
</snippet></ROW><ROW><id>5587869</id><snippet>B.Foo.alice</snippet></ROW><ROW><id>5587869</id><snippet>Foo</snippet></ROW><ROW><id>5587869</id><snippet>A</snippet></ROW><ROW><id>5587869</id><snippet>Foo</snippet></ROW><ROW><id>5587869</id><snippet>B</snippet></ROW><ROW><id>5587869</id><snippet>B</snippet></ROW><ROW><id>5587869</id><snippet>Foo</snippet></ROW><ROW><id>5587869</id><snippet>A</snippet></ROW><ROW><id>5587869</id><snippet>class B(A):
    nay = False
    class Foo(A.Foo):
        bob = False
</snippet></ROW><ROW><id>5587869</id><snippet>B</snippet></ROW><ROW><id>5587869</id><snippet>yay</snippet></ROW><ROW><id>5587869</id><snippet>True</snippet></ROW><ROW><id>5587869</id><snippet>nay</snippet></ROW><ROW><id>5587869</id><snippet>False</snippet></ROW><ROW><id>5587869</id><snippet>Foo</snippet></ROW><ROW><id>5588180</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>5588180</id><snippet>urls.py</snippet></ROW><ROW><id>5588180</id><snippet>admin.site</snippet></ROW><ROW><id>5588180</id><snippet>admin.py</snippet></ROW><ROW><id>5588180</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5588180</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5588180</id><snippet>admin.site</snippet></ROW><ROW><id>5588180</id><snippet>SearchKeyword</snippet></ROW><ROW><id>5588299</id><snippet>from lxml import etree
root = etree.fromstring(your_text)
print root.xpath("//td[contains(text(), 'Image')]/following-sibling::td/a/@href")[0]
</snippet></ROW><ROW><id>5588417</id><snippet>&lt;div id="pager"&gt;
    {% if object.get_prev_by_title  %}
        &lt;a class="prev" href="{{ object.get_prev_by_title.get_absolute_url }}"&gt;
{{ object.get_prev_by_title }}&lt;/a&gt;
    {% endif %}
    {% if object.get_next_by_title  %}
        &lt;a class="next" href="{{ object.get_next_by_title.get_absolute_url }}"&gt;
{{ object.get_next_by_title }}&lt;/a&gt;
    {% endif %}
&lt;/div&gt;
</snippet></ROW><ROW><id>5588461</id><snippet># this is broken
pts = [(1, 1), (1, 10), (10, 10), (10, 1)]
# this works
pts = [(1, 1), (10, 1), (10, 10), (1, 10)]
</snippet></ROW><ROW><id>5588461</id><snippet>import numpy
import mahotas.polygon

def run(n, reverse=0):
    canvas = numpy.zeros((n, n), dtype=int)
    lim = n-2
    print '\n%d x %d, lim=%d reverse=%d' % (n, n, lim, reverse)
    pts = [(1, 1), (1, lim), (lim, lim), (lim, 1), (1, 1)]
    if reverse:
        pts.reverse()
    mahotas.polygon.fill_polygon(pts, canvas)
    return canvas

for rev in (0, 1):
    for n in range(3, 14):
        print run(n, rev)
</snippet></ROW><ROW><id>5588461</id><snippet>6 x 6, lim=4 reverse=0
[[0 0 0 0 0 0]
 [0 1 0 0 1 0]
 [0 1 1 1 1 0]
 [0 1 1 1 1 0]
 [0 1 0 0 0 0]
 [0 0 0 0 0 0]]

6 x 6, lim=4 reverse=1
[[0 0 0 0 0 0]
 [0 1 1 1 1 0]
 [0 1 1 1 1 0]
 [0 1 1 1 1 0]
 [0 1 1 1 1 0]
 [0 0 0 0 0 0]]
</snippet></ROW><ROW><id>5588714</id><snippet>str.join</snippet></ROW><ROW><id>5588714</id><snippet>"\n".join(map(str, list_of_things)</snippet></ROW><ROW><id>5589446</id><snippet>volumes = my_parsed_xml_file.find('.//Volume')
</snippet></ROW><ROW><id>5589446</id><snippet>Volume</snippet></ROW><ROW><id>5589446</id><snippet>doc.getElementsByTagName('Volume')[0]
</snippet></ROW><ROW><id>5589446</id><snippet>Volume</snippet></ROW><ROW><id>5589446</id><snippet>for volume in doc.getElementsByTagName('Volume'):
  child = volume.childNodes[0]
  // ... rest of your code inside the loop
</snippet></ROW><ROW><id>5589584</id><snippet>append</snippet></ROW><ROW><id>5589584</id><snippet>append</snippet></ROW><ROW><id>5589584</id><snippet>s.append(b)</snippet></ROW><ROW><id>5589584</id><snippet>users_stories_dict[a] = s</snippet></ROW><ROW><id>5589584</id><snippet>0</snippet></ROW><ROW><id>5589584</id><snippet>false</snippet></ROW><ROW><id>5589584</id><snippet>None</snippet></ROW><ROW><id>5589780</id><snippet>lxml.html</snippet></ROW><ROW><id>5590364</id><snippet>utf8</snippet></ROW><ROW><id>5590364</id><snippet>codecs.open()</snippet></ROW><ROW><id>5590364</id><snippet>your_byte_string.decode()</snippet></ROW><ROW><id>5590364</id><snippet>&gt;&gt;&gt; bom8 = u'\ufeff'.encode('utf8')
&gt;&gt;&gt; bom8
'\xef\xbb\xbf'
&gt;&gt;&gt; bom8.decode('utf8')
u'\ufeff'
&gt;&gt;&gt; bom8.decode('utf_8_sig')
u'' # removes the BOM
&gt;&gt;&gt; 'abcd'.decode('utf_8_sig')
u'abcd' # doesn't care if no BOM
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5590612</id><snippet>collections.MutableSequence</snippet></ROW><ROW><id>5590612</id><snippet>list</snippet></ROW><ROW><id>5590947</id><snippet>import wx

class myFrame(wx.Frame):
    def __init__(self, size, *arg, **kwarg):
        wx.Frame.__init__(self, *arg, **kwarg)
        self.text = wx.TextCtrl(self, style=wx.TE_MULTILINE, size=size)

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.text, proportion=1, flag=wx.EXPAND)
        self.SetSizerAndFit(self.sizer)

        self.Show()


myApp = wx.App(False)

size = []
for a in ["X", "Y"]:
    d = wx.NumberEntryDialog(None, "Text size", "%s: " % a, "Window size entry", 100, 50, 200)
    if d.ShowModal() == wx.ID_OK:
        size.append(d.GetValue())

frameNow = myFrame(size, None)
myApp.MainLoop()
</snippet></ROW><ROW><id>5591672</id><snippet># Do everything needed to start the game
# For dramatic pacing, any of these might be scheduled to be
# called in a second or so, using pyglet.clock.schedule_once
world.add(player)
camera.to_follow(player)
world.add(scoredisplay)

# Finally, remove the main menu from the world
# This will stop showing it on screen
# and it will remove its keyboard event handler
world.remove_item(self)
</snippet></ROW><ROW><id>5591699</id><snippet>python.exe</snippet></ROW><ROW><id>5591699</id><snippet>Process</snippet></ROW><ROW><id>5591737</id><snippet>if &lt;dir does not exist&gt;:
    &lt;create dir&gt; # May still fail if another process creates the target dir
</snippet></ROW><ROW><id>5592180</id><snippet>cities.txt</snippet></ROW><ROW><id>5592180</id><snippet>wget</snippet></ROW><ROW><id>5592180</id><snippet>for city in `cat cities.txt`; do
  for keyword in 'kung-fu' 'martial arts'; do
    wget http://searchsite1.com/?search=${keyword}&amp;city=${city}
    wget http://searchsite2.com/groups/search?q=${keyword}+${city}
  done
done
</snippet></ROW><ROW><id>5592432</id><snippet>def __new__(cls, input_array, attrs={})
</snippet></ROW><ROW><id>5592432</id><snippet>attrs={}</snippet></ROW><ROW><id>5592432</id><snippet>def __new__(cls, input_array, attrs=None):
    if attrs is None:
        attrs = {}
</snippet></ROW><ROW><id>5592497</id><snippet>reload(cmath)
</snippet></ROW><ROW><id>5592497</id><snippet>import cmath
del cmath.sqrt
reload(cmath)
cmath.sqrt(-1)
</snippet></ROW><ROW><id>5592497</id><snippet>1j
</snippet></ROW><ROW><id>5592508</id><snippet>form.find_control("foo").readonly = False # allow changing .value of control foo 
form.set_all_readonly(False) # allow changing the .value of all controls
</snippet></ROW><ROW><id>5592782</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>5592782</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlencode({'a': 1, 'b': 2})
'a=1&amp;b=2'
</snippet></ROW><ROW><id>5592937</id><snippet>content_type = models.ForeignKey(ContentType, null=True, blank=True)
</snippet></ROW><ROW><id>5592937</id><snippet>null=True</snippet></ROW><ROW><id>5592937</id><snippet>blank=True</snippet></ROW><ROW><id>5593191</id><snippet>win32api</snippet></ROW><ROW><id>5593191</id><snippet>GetAsyncKeyState</snippet></ROW><ROW><id>5593191</id><snippet>SHORT WINAPI GetAsyncKeyState(
__in  int vKey
);
</snippet></ROW><ROW><id>5593191</id><snippet>SHORT</snippet></ROW><ROW><id>5593191</id><snippet>boolean</snippet></ROW><ROW><id>5593191</id><snippet>vKey</snippet></ROW><ROW><id>5593191</id><snippet>win32con</snippet></ROW><ROW><id>5593191</id><snippet>&gt;&gt;&gt; import win32api
&gt;&gt;&gt; import win32con
&gt;&gt;&gt; win32con.VK_CAPITAL
20
&gt;&gt;&gt; win32api.GetAsyncKeyState(win32con.VK_CAPITAL)
0
&gt;&gt;&gt; win32api.GetAsyncKeyState(win32con.VK_CAPITAL)
1
</snippet></ROW><ROW><id>5593191</id><snippet>&gt;&gt;&gt; win32api.GetAsyncKeyState(ord('H'))
1
</snippet></ROW><ROW><id>5593256</id><snippet>NET USE 
</snippet></ROW><ROW><id>5593618</id><snippet>del ii</snippet></ROW><ROW><id>5593618</id><snippet>del(ii)</snippet></ROW><ROW><id>5593618</id><snippet>ii</snippet></ROW><ROW><id>5593618</id><snippet>__delitem__</snippet></ROW><ROW><id>5593618</id><snippet>del</snippet></ROW><ROW><id>5593618</id><snippet>ii</snippet></ROW><ROW><id>5593618</id><snippet>self.list.remove(ii);</snippet></ROW><ROW><id>5593618</id><snippet>self.list.remove(self.list[ii])</snippet></ROW><ROW><id>5593618</id><snippet>del self.list[ii]</snippet></ROW><ROW><id>5594813</id><snippet>2/5000000.</snippet></ROW><ROW><id>5594930</id><snippet>stdin</snippet></ROW><ROW><id>5594930</id><snippet>NUL</snippet></ROW><ROW><id>5594930</id><snippet>import os
from subprocess import PIPE, STDOUT, Popen

lines = []
p = Popen(cmd, bufsize=1, stdin=open(os.devnull), stdout=PIPE, stderr=STDOUT)
for line in iter(p.stdout.readline, ''):
      print line,          # print to stdout immediately
      lines.append(line)   # capture for later
p.stdout.close()
</snippet></ROW><ROW><id>5595012</id><snippet>def dothisstuff():
   line 1
   line 2

if (verbose):
   with hide('running', 'stdout', 'stderr'):
       dothisstuff()
else:
    dothisstuff()
</snippet></ROW><ROW><id>5595021</id><snippet>lcd</snippet></ROW><ROW><id>5595021</id><snippet>cd</snippet></ROW><ROW><id>5595237</id><snippet>from google.appengine.api import images

xpng = #Load data from x.png here, or read from BlobProperty
ypng = #Load data from y.png here, or read from BlobProperty

composite = images.composite([(xpng, 0, 0, 1.0, images.TOP_LEFT),
    (ypng, 100, 100, 1.0, images.TOP_LEFT)], 400, 400)

#composite now holds your new image data, to do what you want with
</snippet></ROW><ROW><id>5595759</id><snippet>cam.getImage</snippet></ROW><ROW><id>5595759</id><snippet>cam.saveSnapshot</snippet></ROW><ROW><id>5595759</id><snippet>cam.getImage</snippet></ROW><ROW><id>5595759</id><snippet>from VideoCapture import Device
import datetime
def capt():
  a = datetime.datetime.now().strftime("%Y%m%dT%H%M%S%ms")

  b = str(a)
  cam = Device(devnum=0)
  cam.setResolution(1280, 960)

  return cam.getImage(), b

while True:
  im, b = capt()
  if im:
    break
im.save('%s.png' % (b), 'JPEG')
</snippet></ROW><ROW><id>5595871</id><snippet>defaultdict</snippet></ROW><ROW><id>5595871</id><snippet>from collections import defaultdict
for line in myfile:
    # tokenize
    word_counts = defaultdict(int)
    for word in line:
        if word in hotwords:
            word_counts[word] += 1
    print '\n'.join('%s: %s' % (k, v) for k, v in word_counts.items())
</snippet></ROW><ROW><id>5596708</id><snippet>matplotlib.delaunay.triangulate.Triangulation</snippet></ROW><ROW><id>5596708</id><snippet>  circumcenters -- (ntriangles, 2) array of floats giving the (x,y)
    coordinates of the circumcenters of each triangle (indexed by a triangle_id).
</snippet></ROW><ROW><id>5596708</id><snippet>import matplotlib.pyplot as plt
import matplotlib.delaunay
import matplotlib.tri as tri
import numpy as np
import math

# Creating a Triangulation without specifying the triangles results in the
# Delaunay triangulation of the points.

# First create the x and y coordinates of the points.
n_angles = 36
n_radii = 8
min_radius = 0.25
radii = np.linspace(min_radius, 0.95, n_radii)

angles = np.linspace(0, 2*math.pi, n_angles, endpoint=False)
angles = np.repeat(angles[...,np.newaxis], n_radii, axis=1)
angles[:,1::2] += math.pi/n_angles

x = (radii*np.cos(angles)).flatten()
y = (radii*np.sin(angles)).flatten()

tt = matplotlib.delaunay.triangulate.Triangulation(x,y)
triang = tri.Triangulation(x, y)

# Plot the triangulation.
plt.figure()
plt.gca().set_aspect('equal')
plt.triplot(triang, 'bo-')

plt.plot(tt.circumcenters[:,0],tt.circumcenters[:,1],'r.')
plt.show()
</snippet></ROW><ROW><id>5597433</id><snippet>save()</snippet></ROW><ROW><id>5597433</id><snippet>save()</snippet></ROW><ROW><id>5598371</id><snippet>inet_pton()</snippet></ROW><ROW><id>5598482</id><snippet>r=re.compile(r'\w')
r.findall(x)
# 'a', 'b', 'c', 'd', 'e', 'f'
</snippet></ROW><ROW><id>5598541</id><snippet>loglevel</snippet></ROW><ROW><id>5598541</id><snippet>init_opts();
show_banner();
</snippet></ROW><ROW><id>5598541</id><snippet>void show_banner(void)
{
    fprintf(stderr, "%s version " FFMPEG_VERSION ", Copyright (c) %d-%d the FFmpeg developers\n",
            program_name, program_birth_year, this_year);
    fprintf(stderr, "  built on %s %s with %s %s\n",
            __DATE__, __TIME__, CC_TYPE, CC_VERSION);
    fprintf(stderr, "  configuration: " FFMPEG_CONFIGURATION "\n");
    print_all_libs_info(stderr, INDENT|SHOW_CONFIG);
    print_all_libs_info(stderr, INDENT|SHOW_VERSION);
}
</snippet></ROW><ROW><id>5598541</id><snippet>show_banner()</snippet></ROW><ROW><id>5598678</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup('&lt;script&gt;a&lt;/script&gt;baba&lt;script&gt;b&lt;/script&gt;')
&gt;&gt;&gt; [s.extract() for s in soup('script')]
&gt;&gt;&gt; soup
baba
</snippet></ROW><ROW><id>5599313</id><snippet>x=1</snippet></ROW><ROW><id>5599313</id><snippet>exec</snippet></ROW><ROW><id>5599313</id><snippet>&gt;&gt;&gt; exec('x=1')
&gt;&gt;&gt; x
1
</snippet></ROW><ROW><id>5599313</id><snippet>exec</snippet></ROW><ROW><id>5599313</id><snippet>eval</snippet></ROW><ROW><id>5599313</id><snippet>setattr</snippet></ROW><ROW><id>5599313</id><snippet>locals()</snippet></ROW><ROW><id>5599313</id><snippet>&gt;&gt;&gt; locals()['y'] = 1
&gt;&gt;&gt; y
1
</snippet></ROW><ROW><id>5599388</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\("Exercises.*?\))', r'\1)', '("Exercises, 31" "#42")')
'("Exercises, 31" "#42"))'
&gt;&gt;&gt; re.sub(r'(\("Chapter.*?)\)', r'\1', '("Chapter 2 I Positive Borel Measures, 33" "#44")')
'("Chapter 2 I Positive Borel Measures, 33" "#44"'
</snippet></ROW><ROW><id>5599545</id><snippet>names = {"Spiderman":1, "Dr. House":2, "Jon Skeet":1}

resulting_keys = [k for k, v in names.iteritems() if v == 1]
# returns ['Spiderman', 'Jon Skeet']
</snippet></ROW><ROW><id>5599545</id><snippet> names.update(dict((k,names[k] + 1) for k in resulting_keys))
</snippet></ROW><ROW><id>5599545</id><snippet>{'Jon Skeet': 2, 'Dr. House': 2, 'Spiderman': 2}
</snippet></ROW><ROW><id>5599712</id><snippet>__init__()</snippet></ROW><ROW><id>5599712</id><snippet>autodoc-skip-member</snippet></ROW><ROW><id>5599712</id><snippet>def skip(app, what, name, obj, skip, options):
    if name == "__init__":
        return False
    return skip

def setup(app):
    app.connect("autodoc-skip-member", skip)
</snippet></ROW><ROW><id>5599712</id><snippet>__init__</snippet></ROW><ROW><id>5599712</id><snippet>special-members</snippet></ROW><ROW><id>5599712</id><snippet>__special__</snippet></ROW><ROW><id>5599712</id><snippet>:special-members: __init__
</snippet></ROW><ROW><id>5599712</id><snippet>undoc-members</snippet></ROW><ROW><id>5599712</id><snippet>inherited-members</snippet></ROW><ROW><id>5599712</id><snippet>__init__</snippet></ROW><ROW><id>5599712</id><snippet>automethod</snippet></ROW><ROW><id>5599712</id><snippet>.. autoclass:: MyClass     
   :members: 

   .. automethod:: __init__
</snippet></ROW><ROW><id>5599712</id><snippet>automodule</snippet></ROW><ROW><id>5599894</id><snippet>list.pop</snippet></ROW><ROW><id>5599894</id><snippet>while</snippet></ROW><ROW><id>5599894</id><snippet>a[:]</snippet></ROW><ROW><id>5599894</id><snippet>copy</snippet></ROW><ROW><id>5600052</id><snippet>dict</snippet></ROW><ROW><id>5600052</id><snippet>d = {}
for name in L:
    d[name] = []
</snippet></ROW><ROW><id>5600052</id><snippet>{name: [] for name in L}</snippet></ROW><ROW><id>5600144</id><snippet>import re

matches = re.findall('[^()]+', '(abc)(def)(ghi)h')
map = []
for m in matches: 
  map.append(list(m))
for e in map:
  print e
</snippet></ROW><ROW><id>5600144</id><snippet>['a', 'b', 'c']
['d', 'e', 'f']
['g', 'h', 'i']
['h']
</snippet></ROW><ROW><id>5600144</id><snippet>[^()]</snippet></ROW><ROW><id>5600144</id><snippet>(</snippet></ROW><ROW><id>5600144</id><snippet>)</snippet></ROW><ROW><id>5600144</id><snippet>[^()]+</snippet></ROW><ROW><id>5600144</id><snippet>(</snippet></ROW><ROW><id>5600144</id><snippet>)</snippet></ROW><ROW><id>5600144</id><snippet>[</snippet></ROW><ROW><id>5600144</id><snippet>]</snippet></ROW><ROW><id>5600144</id><snippet>^</snippet></ROW><ROW><id>5600818</id><snippet>response_generator = (
    json.dumps(
        {
            'name': row.getAttribute("name"),
            'address': row.getAttribute("address"),
            'phone': row.getAttribute("phone")},
        sort_keys=True,
        indent=4)
    for row in rows)

return HttpResponse(response_generator)
</snippet></ROW><ROW><id>5600964</id><snippet>txt</snippet></ROW><ROW><id>5600964</id><snippet>self.txt</snippet></ROW><ROW><id>5600964</id><snippet>txt = None

def onclick(event):
    global txt
    txt = plt.text(event.xdata, event.ydata, 'TESTTEST', fontsize=8)
    fig.canvas.draw()

def offclick(event):
    txt.remove()
    fig.canvas.draw()

fig.canvas.mpl_connect('button_press_event', onclick)
fig.canvas.mpl_connect('button_release_event', offclick) 

plt.show()
</snippet></ROW><ROW><id>5601101</id><snippet>lexicon</snippet></ROW><ROW><id>5601101</id><snippet>lex = lexicon(data)
lex.scan()
</snippet></ROW><ROW><id>5601152</id><snippet>node.xpath()</snippet></ROW><ROW><id>5601152</id><snippet>node.xpath()</snippet></ROW><ROW><id>5601152</id><snippet>doc = '&lt;root xmlns="chaos"&gt;&lt;bar /&gt;&lt;/root&gt;'
tree = lxml.etree.fromstring(doc)
tree.xpath('//bar')
[]
tree.xpath('//x:bar', namespaces={'x': 'chaos'})
[&lt;Element {chaos}bar at 7fa40f9c50a8&gt;]
</snippet></ROW><ROW><id>5601152</id><snippet>class SitemapSpider(XMLFeedSpider):
    namespaces = [
        ('sm', 'http://www.sitemaps.org/schemas/sitemap/0.9'),
        ]
     itertag = 'sm:url'
</snippet></ROW><ROW><id>5601436</id><snippet>[test]
recipe = zc.recipe.testrunner
# Note that only tests for packages that are explicitly named (instead
# of 'implicitly' added to the instance as dependency) can be found.
eggs =
# Use the name of the plone.recipe.zope2instance part here, might be zeoclient instead: 
    ${instance:eggs}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
</snippet></ROW><ROW><id>5601925</id><snippet>(key, value)</snippet></ROW><ROW><id>5601925</id><snippet>sorted_d = sorted(d.iteritems(), key=lambda v: v[1]['winPct'])
</snippet></ROW><ROW><id>5601925</id><snippet>sorted_d = sorted(d.iteritems(), key=lambda v: v[1]['winPct'], reverse=True)
</snippet></ROW><ROW><id>5602182</id><snippet>self.tagged = list(input)</snippet></ROW><ROW><id>5602182</id><snippet>list</snippet></ROW><ROW><id>5602182</id><snippet>isinstance</snippet></ROW><ROW><id>5602182</id><snippet>Sequence</snippet></ROW><ROW><id>5602182</id><snippet>Mapping</snippet></ROW><ROW><id>5602182</id><snippet>Number</snippet></ROW><ROW><id>5602182</id><snippet>list</snippet></ROW><ROW><id>5602182</id><snippet>dict</snippet></ROW><ROW><id>5602182</id><snippet>int</snippet></ROW><ROW><id>5602182</id><snippet>Sequence</snippet></ROW><ROW><id>5602182</id><snippet>Mapping</snippet></ROW><ROW><id>5602182</id><snippet>Number</snippet></ROW><ROW><id>5602182</id><snippet>isinstance</snippet></ROW><ROW><id>5602238</id><snippet>def my_preexec_fn():
    os.setuid(10033)
process = subprocess.Popen(cmdstr,stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=my_preexec_fn)
</snippet></ROW><ROW><id>5602271</id><snippet>names = [person.GetName() for person in persons]
</snippet></ROW><ROW><id>5602323</id><snippet>:</snippet></ROW><ROW><id>5602323</id><snippet>'\r\n'</snippet></ROW><ROW><id>5602323</id><snippet>PRIVMSG</snippet></ROW><ROW><id>5602323</id><snippet>'PRIVMSG nick :message with spaces\r\n'</snippet></ROW><ROW><id>5602323</id><snippet>PRIVMSG</snippet></ROW><ROW><id>5602323</id><snippet>:</snippet></ROW><ROW><id>5602323</id><snippet>"You have not registered"</snippet></ROW><ROW><id>5602323</id><snippet>USER</snippet></ROW><ROW><id>5602323</id><snippet>NICK</snippet></ROW><ROW><id>5602323</id><snippet>NICK</snippet></ROW><ROW><id>5602323</id><snippet>USER</snippet></ROW><ROW><id>5602323</id><snippet>NICK</snippet></ROW><ROW><id>5602323</id><snippet>PING</snippet></ROW><ROW><id>5602323</id><snippet>PONG</snippet></ROW><ROW><id>5602418</id><snippet>if not v.get():
</snippet></ROW><ROW><id>5602552</id><snippet>open()</snippet></ROW><ROW><id>5602552</id><snippet>os</snippet></ROW><ROW><id>5602552</id><snippet>os.open()</snippet></ROW><ROW><id>5602552</id><snippet>sys</snippet></ROW><ROW><id>5602552</id><snippet>sys.open()</snippet></ROW><ROW><id>5602572</id><snippet>site</snippet></ROW><ROW><id>5602572</id><snippet>sys.path</snippet></ROW><ROW><id>5602615</id><snippet>def perm_given_index(alist, apermindex):
    alist = alist[:]
    for i in range(len(alist)-1):
        apermindex, j = divmod(apermindex, len(alist)-i)
        alist[i], alist[i+j] = alist[i+j], alist[i]
    return alist
</snippet></ROW><ROW><id>5602615</id><snippet>apermindex</snippet></ROW><ROW><id>5602615</id><snippet>0</snippet></ROW><ROW><id>5602615</id><snippet>factorial(len(alist))</snippet></ROW><ROW><id>5602629</id><snippet>exscript</snippet></ROW><ROW><id>5602629</id><snippet>telnetlib</snippet></ROW><ROW><id>5602629</id><snippet>pexpect</snippet></ROW><ROW><id>5602629</id><snippet>import pexpect as px

cmds = ['cmd1', 'cmd2', 'cmd3']
retcode = -1
while (retcode&lt;10):
    if (retcode&lt;2):
        child = px.spawn('telnet %s %s' % (ip_addr,port))
    lregex = '(sername:)'            # Insert regex for login prompt here
    pregex = '(prompt1&gt;)|(prompt2$)' # Insert your prompt regex here
    # retcode = 0 for px.TIMEOUT, 1 for px.EOF, 2 for lregex match...
    retcode = child.expect([px.TIMEOUT, px.EOF, lregex, pregex],timeout = 10)
    if (retcode==2):
        do_login(child)  # Build a do_login() method to send user / passwd
    elif (2&lt;retcode&lt;10) and (len(cmds)&gt;0):
        cmd = cmds.pop(0)
        child.sendline(cmd)
    else:
        retcode = 10
</snippet></ROW><ROW><id>5603462</id><snippet>-c Package1 Package2, --compare Package1 Package2
                      Compare two packages (may not be used with -v).
-v Package, --verify Package
                      Verify Content of package (may not be used with -c).
</snippet></ROW><ROW><id>5603462</id><snippet>PROG: error: argument -c: not allowed with argument -v</snippet></ROW><ROW><id>5604266</id><snippet>ConstBitArray</snippet></ROW><ROW><id>5604266</id><snippet>ConstBitStream</snippet></ROW><ROW><id>5604266</id><snippet>mmap</snippet></ROW><ROW><id>5604266</id><snippet>&gt;&gt;&gt; a = bitstring.ConstBitArray(filename='your_file')
</snippet></ROW><ROW><id>5604266</id><snippet>&gt;&gt;&gt; b = bitstring.ConstBitStream(a_file_object)
</snippet></ROW><ROW><id>5604270</id><snippet>/usr/lib/python2.7/subprocess.py</snippet></ROW><ROW><id>5604270</id><snippet>if p2cwrite is not None:
    self.stdin = os.fdopen(p2cwrite, 'wb', bufsize)
if c2pread is not None:
    if universal_newlines:
        self.stdout = os.fdopen(c2pread, 'rU', bufsize)
    else:
        self.stdout = os.fdopen(c2pread, 'rb', bufsize)
if errread is not None:
    if universal_newlines:
        self.stderr = os.fdopen(errread, 'rU', bufsize)
    else:
        self.stderr = os.fdopen(errread, 'rb', bufsize)
</snippet></ROW><ROW><id>5604270</id><snippet>bufsize</snippet></ROW><ROW><id>5604575</id><snippet>//table//text()</snippet></ROW><ROW><id>5604760</id><snippet>__sub__</snippet></ROW><ROW><id>5604760</id><snippet>__div__</snippet></ROW><ROW><id>5604760</id><snippet>class Integer(object) :
    def __init__(self, val=0) :
        self._val = int(val)
    def __add__(self, val) :
        if type(val) == Integer :
            return Integer(self._val + val._val)
        return self._val + val
    def __iadd__(self, val) :
        self._val += val
        return self
    def __str__(self) :
        return str(self._val)
    def __repr__(self) :
        return 'Integer(%s)' %self._val
</snippet></ROW><ROW><id>5604760</id><snippet>n = Integer()
print n
m = Integer(7)
m+=5
print m
</snippet></ROW><ROW><id>5604760</id><snippet>__repr__</snippet></ROW><ROW><id>5604760</id><snippet>__iadd__</snippet></ROW><ROW><id>5604760</id><snippet>__add__</snippet></ROW><ROW><id>5604958</id><snippet>  def ftp_read(self, trim=False):
    if self.proxy is None:
      temp = self.s.read(READBUFF)
    else:
      temp = ""
      while True:
        try:
          temp += self.sock.recv(READBUFF)
          break
        except Exception, e:
          if type(e) == SSL.WantReadError:
            self.ssl_wants_read()
          elif type(e) == SSL.WantWriteError:
            self.ssl_wants_write()
</snippet></ROW><ROW><id>5604958</id><snippet>  def ssl_wants_read(self):
    try:
      self.chan.send(self.sock.bio_read(10240))
    except Exception, e:
      chan_output = None
    chan_output = self.chan.recv(10240)
    self.sock.bio_write(chan_output)

  def ssl_wants_write(self):
    self.chan.send(self.sock.bio_read(10240))
</snippet></ROW><ROW><id>5605077</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.engine import reflection
engine = create_engine('...')
insp = reflection.Inspector.from_engine(engine)
for name in insp.get_table_names():
    for index in insp.get_indexes(name):
        print index
</snippet></ROW><ROW><id>5605338</id><snippet>os.open()</snippet></ROW><ROW><id>5605338</id><snippet>open()</snippet></ROW><ROW><id>5605349</id><snippet>ridiculous custom if-ladders</snippet></ROW><ROW><id>5605354</id><snippet>urllib</snippet></ROW><ROW><id>5605354</id><snippet>urllib</snippet></ROW><ROW><id>5605354</id><snippet>irilib</snippet></ROW><ROW><id>5605354</id><snippet>In [6]: print urllib.unquote(urllib.quote(u'Cataño'.encode('utf8')))
CataÃ±o
</snippet></ROW><ROW><id>5605354</id><snippet>print</snippet></ROW><ROW><id>5605354</id><snippet>urllib</snippet></ROW><ROW><id>5605354</id><snippet>&gt;&gt;&gt; u'Cata\u00F1o'.encode('utf-8')
'Cata\xC3\xB1o'
&gt;&gt;&gt; urllib.quote(_)
'Cata%C3%B1o'

&gt;&gt;&gt; urllib.unquote(_)
'Cata\xC3\xB1o'
&gt;&gt;&gt; _.decode('utf-8')
u'Cata\xF1o'
</snippet></ROW><ROW><id>5605357</id><snippet>import</snippet></ROW><ROW><id>5605357</id><snippet>#include</snippet></ROW><ROW><id>5605357</id><snippet>sys</snippet></ROW><ROW><id>5605357</id><snippet>import sys
# ... somewhere down in the file
sys.exit(0)
</snippet></ROW><ROW><id>5605357</id><snippet>exit()</snippet></ROW><ROW><id>5605357</id><snippet>sys</snippet></ROW><ROW><id>5605409</id><snippet>itemkey = {'imgid': str(item_list[0].key())}
</snippet></ROW><ROW><id>5605597</id><snippet>p = subprocess.Popen(..., stderr=subprocess.PIPE)
fd = p.stderr.fileno()
my_stderr = os.fdopen(os.dup(fd), 'rU', new_bufsize)
os.close(fd)
# use my_stderr from here on
</snippet></ROW><ROW><id>5605661</id><snippet>__init__</snippet></ROW><ROW><id>5605661</id><snippet>__call__</snippet></ROW><ROW><id>5605661</id><snippet>__call__</snippet></ROW><ROW><id>5605661</id><snippet>from zope.publisher.browser import BrowserView

class MyView(BrowserView):

    def __call__(self):
        # do some work
        return super(MyView, self).__call__()
</snippet></ROW><ROW><id>5605686</id><snippet>L.sort(key=lambda x: int(x[index]))
</snippet></ROW><ROW><id>5605692</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

x = np.exp2(np.arange(10))

plt.semilogy(x)
plt.yticks(x, x)

# Turn y-axis minor ticks off 
plt.gca().yaxis.set_minor_locator(mpl.ticker.NullLocator())

plt.show()
</snippet></ROW><ROW><id>5605692</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

x = np.exp2(np.arange(10))

fig = plt.figure()
ax = fig.add_subplot(111) 
ax.semilogy(x)
ax.yaxis.get_major_locator().base(2)
ax.yaxis.get_minor_locator().base(2)

# This will place 1 minor tick halfway (in linear space) between major ticks
# (in general, use np.linspace(1, 2.0001, numticks-2))
ax.yaxis.get_minor_locator().subs([1.5])

ax.yaxis.get_major_formatter().base(2)

plt.show()
</snippet></ROW><ROW><id>5605692</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

x = np.exp2(np.arange(10))

fig = plt.figure()
ax = fig.add_subplot(111) 
ax.semilogy(x)
ax.yaxis.get_major_locator().base(2)
ax.yaxis.get_minor_locator().base(2)

ax.yaxis.get_minor_locator().subs([1.5])

# This is the only difference from the last snippet, uses "regular" numbers.
ax.yaxis.set_major_formatter(mpl.ticker.ScalarFormatter())

plt.show()
</snippet></ROW><ROW><id>5605725</id><snippet>report()</snippet></ROW><ROW><id>5605725</id><snippet>listing()</snippet></ROW><ROW><id>5605725</id><snippet>invoice()</snippet></ROW><ROW><id>5605725</id><snippet>db.define_table</snippet></ROW><ROW><id>5605819</id><snippet>import numpy as np
import scipy.misc as mpl

a = mpl.imread('01background.jpg')
b = mpl.imread('02testgray.jpg')

c = a/((b.astype('float')+1)/256)
d = c*(c &lt; 255)+255*np.ones(np.shape(c))*(c &gt; 255)

e = d.astype('uint8')

mpl.imshow(e)
mpl.imsave('output.png', e)
</snippet></ROW><ROW><id>5606424</id><snippet>import collections

def parse_cities(filepath):
    countries_cities_map = collections.defaultdict(list)
    with open(filepath) as fd:
        for line in fd:
            values = line.strip().split(',')
            if len(values) == 2:
                city, country = values
                countries_cities_map[country].append(city)
    return countries_cities_map

def format_cities_per_country(countries_cities_map):
    for country, cities in countries_cities_map.iteritems():
        print " {ncities} Cities found in {country} country".format(country=country, ncities = len(cities))


if __name__ == '__main__':
    import sys
    filepath = sys.argv[1]
    format_cities_per_country(parse_cities(filepath))
</snippet></ROW><ROW><id>5606446</id><snippet>{'a': 5}</snippet></ROW><ROW><id>5606446</id><snippet>{'a': 4, 'A': 1}</snippet></ROW><ROW><id>5606627</id><snippet>str.isdigit()</snippet></ROW><ROW><id>5606627</id><snippet>[row for row in listOfLists if row[x].isdigit()]
</snippet></ROW><ROW><id>5606627</id><snippet>row[x].lstrip('-').isdigit()
</snippet></ROW><ROW><id>5606926</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>5606926</id><snippet>s</snippet></ROW><ROW><id>5606926</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>5606926</id><snippet>Python/getargs.c</snippet></ROW><ROW><id>5606926</id><snippet>convertsimple</snippet></ROW><ROW><id>5606926</id><snippet>'s'</snippet></ROW><ROW><id>5606926</id><snippet>char **p = va_arg(*p_va, char **);
/* ... */
*p = PyBytes_AS_STRING(uarg);
</snippet></ROW><ROW><id>5606926</id><snippet>PyBytes_AS_STRING</snippet></ROW><ROW><id>5606926</id><snippet>#define PyBytes_AS_STRING(op) (assert(PyBytes_Check(op)), \
                                (((PyBytesObject *)(op))-&gt;ob_sval))
</snippet></ROW><ROW><id>5606926</id><snippet>ob_sval</snippet></ROW><ROW><id>5606926</id><snippet>command</snippet></ROW><ROW><id>5607035</id><snippet>vsprintf('The first 4 letters of the english alphabet are: %s, %s, %s and %s', ['a', 'b', 'c', 'd']);
</snippet></ROW><ROW><id>5607049</id><snippet>result = re.findall('&lt;div id="result" &gt;(.+?)&lt;/div', data)
if result:
    print result
else:
    print 'Could not find the hash'
</snippet></ROW><ROW><id>5607087</id><snippet>import cookielib
import urllib2

cookies = cookielib.LWPCookieJar()
handlers = [
    urllib2.HTTPHandler(),
    urllib2.HTTPSHandler(),
    urllib2.HTTPCookieProcessor(cookies)
    ]
opener = urllib2.build_opener(*handlers)

def fetch(uri):
    req = urllib2.Request(uri)
    return opener.open(req)

def dump():
    for cookie in cookies:
        print cookie.name, cookie.value

uri = 'http://www.google.com/'
res = fetch(uri)
dump()

res = fetch(uri)
dump()

# save cookies to disk. you can load them with cookies.load() as well.
cookies.save('mycookies.txt')
</snippet></ROW><ROW><id>5607087</id><snippet>NID</snippet></ROW><ROW><id>5607087</id><snippet>PREF</snippet></ROW><ROW><id>5607087</id><snippet>HTTPCookieProcessor</snippet></ROW><ROW><id>5607087</id><snippet>Cookie</snippet></ROW><ROW><id>5607156</id><snippet>f.write()</snippet></ROW><ROW><id>5607156</id><snippet>fwrite()</snippet></ROW><ROW><id>5607156</id><snippet>f.flush()</snippet></ROW><ROW><id>5607156</id><snippet>f.close()</snippet></ROW><ROW><id>5607156</id><snippet>fsync()</snippet></ROW><ROW><id>5607285</id><snippet>arg</snippet></ROW><ROW><id>5607285</id><snippet>arg</snippet></ROW><ROW><id>5607285</id><snippet>arg</snippet></ROW><ROW><id>5607285</id><snippet>str(arg[0])</snippet></ROW><ROW><id>5607358</id><snippet>(1,2)+(3,4) = (1,2,3,4)
</snippet></ROW><ROW><id>5607358</id><snippet>def myadd(x,y):
     z = []
     for i in range(len(x)):
         z.append(x[i]+y[i])
     return tuple(z)
</snippet></ROW><ROW><id>5607358</id><snippet>def myadd(xs,ys):
     return tuple(x + y for x, y in izip(xs, ys))
</snippet></ROW><ROW><id>5607358</id><snippet>myadd = lambda xs,ys: tuple(x + y for x, y in izip(xs, ys))
</snippet></ROW><ROW><id>5607358</id><snippet>if( b &lt; a) return myadd((1,0),foo(a-b,b))
</snippet></ROW><ROW><id>5607439</id><snippet>tuple(set(dir(Foo)) - set(dir(Bar)))
</snippet></ROW><ROW><id>5607439</id><snippet>bases = Foo.mro()
</snippet></ROW><ROW><id>5607529</id><snippet>def hist(inputstr):
    lowlet = inputstr.upper()
    alphas = 'abcdefghijklmnopqrstuvwxyz'.upper()
    occurrences = dict( (letter, 0) for letter in alphas)
    total = 0
    for letter in lowlet:
        if letter in occurrences:
            total += 1
            occurrences[letter] += 1
    letcount = sorted(occurrences.iteritems(),key = lambda x:-x[1])
    for letter, count in letcount:
        if count&gt;0:
             print letter*count
</snippet></ROW><ROW><id>5607653</id><snippet>$ telnet m.onet.pl 80
Trying 213.180.150.45...
Connected to m.onet.pl.
Escape character is '^]'.
HEAD /_m/33fb7563935e11c0cba62f504d91675f,59,29,134-68-525-303-0.jpg HTTP/1.1
host: m.onet.pl

HTTP/1.0 200 OK
Server: nginx/0.8.53
Date: Sat, 09 Apr 2011 18:32:44 GMT
Content-Type: image/jpeg
Content-Length: 37545
Last-Modified: Sat, 09 Apr 2011 18:29:22 GMT
Expires: Sat, 16 Apr 2011 18:32:44 GMT
Cache-Control: max-age=604800
Accept-Ranges: bytes
Age: 6575
X-Cache: HIT from emka1.m10r2.onet
Via: 1.1 emka1.m10r2.onet:80 (squid)
Connection: close

Connection closed by foreign host.
</snippet></ROW><ROW><id>5607697</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

""" 
    long comment about IPython.Shell that you 
    might want to read; omitted here for brevity 
"""
import IPython.Shell

IPython.Shell.start().mainloop()
</snippet></ROW><ROW><id>5607697</id><snippet>/path/to/python2.7 /path/to/ipython</snippet></ROW><ROW><id>5607708</id><snippet>urlencode()</snippet></ROW><ROW><id>5607708</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; f = { 'eventName' : 'myEvent', 'eventDescription' : "cool event"}
&gt;&gt;&gt; urllib.urlencode(f)
'eventName=myEvent&amp;eventDescription=cool+event'
</snippet></ROW><ROW><id>5607790</id><snippet>sql = """ drop table %s """ % a_table_name
self.conn.execute( sql )
</snippet></ROW><ROW><id>5607790</id><snippet>TABLES_THAT_CAN_BE_DROPPED = ('table_a','table_b',)
if a_table_name in TABLES_THAT_CAN_BE_DROPPED:
    sql = """ drop table %s """ % a_table_name
    self.conn.execute( sql )
else:
    pass # handle creatively
</snippet></ROW><ROW><id>5607903</id><snippet>/usr/lib/</snippet></ROW><ROW><id>5607903</id><snippet>sys.path.append("/usr/lib/")
</snippet></ROW><ROW><id>5607903</id><snippet>import py-json
</snippet></ROW><ROW><id>5607903</id><snippet>import py-json.modulename
</snippet></ROW><ROW><id>5608000</id><snippet>class Profile(models.Model):
  user = models.ForeignKey(User, unique=True)
  gender = models.CharField(max_length=1, blank=True)
  hobbies = models.ManyToManyField(Hobbies)
</snippet></ROW><ROW><id>5608000</id><snippet>user = Profile.objects.get(pk=1)
hobbies = user.hobbies.all()
</snippet></ROW><ROW><id>5608359</id><snippet>class_prepared</snippet></ROW><ROW><id>5608359</id><snippet>models.py</snippet></ROW><ROW><id>5608843</id><snippet>lockmap()</snippet></ROW><ROW><id>5608843</id><snippet>DrawBot()</snippet></ROW><ROW><id>5608843</id><snippet>NameError</snippet></ROW><ROW><id>5608843</id><snippet>self</snippet></ROW><ROW><id>5608843</id><snippet>class</snippet></ROW><ROW><id>5608843</id><snippet>waitingt = Timer(30.0, self.lockmap)
</snippet></ROW><ROW><id>5608895</id><snippet>'^/(?!x/|x$).*$'</snippet></ROW><ROW><id>5609191</id><snippet>def int_or_float(s):
    try:
        return int(s)
    except ValueError:
        return float(s)
</snippet></ROW><ROW><id>5609191</id><snippet>"10.0000"</snippet></ROW><ROW><id>5609191</id><snippet>def int_dammit_else_float(s):
    f = float(s)
    i = int(f)
    return i if i == f else f
</snippet></ROW><ROW><id>5609191</id><snippet>"1e25"</snippet></ROW><ROW><id>5609202</id><snippet>/reportlab/fonts</snippet></ROW><ROW><id>5609528</id><snippet>index</snippet></ROW><ROW><id>5609528</id><snippet>for</snippet></ROW><ROW><id>5609528</id><snippet>f = open(fname,'r+b')
A = str(mmap.mmap(f.fileno(),0)[:]).split()
for i, value in enumerate(A):
    if value == "********":
       A[i] = "0.0"
</snippet></ROW><ROW><id>5609595</id><snippet>if</snippet></ROW><ROW><id>5609595</id><snippet>"
for line in file:
    Is there a colon in line?
        field_name = normalize(informaton before the colon)
        data = information after the colon
    else: 
        field_name = next_field_in_list(previous_field)
        data = line
"
</snippet></ROW><ROW><id>5609665</id><snippet>&gt;&gt;&gt; x = 42
</snippet></ROW><ROW><id>5609683</id><snippet>__del__</snippet></ROW><ROW><id>5609683</id><snippet>__del__</snippet></ROW><ROW><id>5609683</id><snippet>__del__</snippet></ROW><ROW><id>5609683</id><snippet> ~]$ pypy                                                                                       
Python 2.5.2 (78826, Nov 29 2010, 00:18:05)                                                                       
[PyPy 1.4.0] on linux2                                                                                            
Type "help", "copyright", "credits" or "license" for more information.                                            
And now for something completely different: ``sorry, I'll teach the cactus how                                    
to swim later''                                                                                                   
&gt;&gt;&gt;&gt; import gc
&gt;&gt;&gt;&gt; class Meta(type):         
....    def __del__(cls):                          
....       print ("Arghh!!")                                              
....                                                                      
&gt;&gt;&gt;&gt; class A(object):                                                                     
....   __metaclass__ = Meta                                                                                     
....                                                                                                                                                                                                                
&gt;&gt;&gt;&gt; del A                                                                                                        
&gt;&gt;&gt;&gt; gc.collect()                                                                                                 
Arghh!!                                                                                                           
0                                                                                                                 
&gt;&gt;&gt;&gt;
</snippet></ROW><ROW><id>5609855</id><snippet>cursor.execute('''INSERT INTO COURSE (title) VALUES (?)''',(title,)) 
</snippet></ROW><ROW><id>5610009</id><snippet>result = p.parseDateText("March 5th, 1980") 
result = p.parseDate("4/4/80") 
</snippet></ROW><ROW><id>5610404</id><snippet>windows-1252</snippet></ROW><ROW><id>5610404</id><snippet>&gt;&gt;&gt; s=u'\x01\x0b\xb7\r\x00\x05\xee\u2030\x10\x029\x060\x04\x00/\x03\x04++HQqD0wWr_hZP75\x00\x00 \x02"\x06\x00$\x04inbox\x001\x02+\x04+33626320868\x00\x00%\x0e\x00\x00\x01.0\x19\xb3\x10&amp;\x04Ok\x00-\rM\\/\u20302\n:\r\x00\x05\xee\u2030\'\x04sms\x003\n(\x04successful\x00.\rM\\/\u2030\x00'
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; soup.originalEncoding
'windows-1252'
&gt;&gt;&gt; chardet.detect(s)
{'confidence': 0.5, 'encoding': 'windows-1252'}
</snippet></ROW><ROW><id>5610404</id><snippet>&gt;&gt;&gt; s.decode('windows-1252')
u'\x01\x0b\xb7\r\x00\x05\xee\u2030\x10\x029\x060\x04\x00/\x03\x04++HQqD0wWr_hZP75\x00\x00 \x02"\x06\x00$\x04inbox\x001\x02+\x04+33626320868\x00\x00%\x0e\x00\x00\x01.0\x19\xb3\x10&amp;\x04Ok\x00-\rM\\/\u20302\n:\r\x00\x05\xee\u2030\'\x04sms\x003\n(\x04successful\x00.\rM\\/\u2030\x00'
</snippet></ROW><ROW><id>5610541</id><snippet>accept(2)</snippet></ROW><ROW><id>5610541</id><snippet>libpcap</snippet></ROW><ROW><id>5610541</id><snippet>winpcap</snippet></ROW><ROW><id>5610541</id><snippet>tcp_wrappers</snippet></ROW><ROW><id>5610541</id><snippet>accept(2)</snippet></ROW><ROW><id>5610541</id><snippet>getpeername(2)</snippet></ROW><ROW><id>5610541</id><snippet>close(2)</snippet></ROW><ROW><id>5610541</id><snippet>tcp_wrappers</snippet></ROW><ROW><id>5610541</id><snippet>/etc/hosts.allow</snippet></ROW><ROW><id>5610541</id><snippet>/etc/hosts.deny</snippet></ROW><ROW><id>5610541</id><snippet>/etc/hosts.options</snippet></ROW><ROW><id>5610541</id><snippet>hosts.allow(5)</snippet></ROW><ROW><id>5610541</id><snippet>close(2)</snippet></ROW><ROW><id>5610541</id><snippet>accept(2)</snippet></ROW><ROW><id>5610541</id><snippet>socket.getpeername()</snippet></ROW><ROW><id>5610541</id><snippet>socket.close()</snippet></ROW><ROW><id>5610637</id><snippet>&gt;&gt;&gt; d = {(1, 2): ('A', 'B'), (3, 4): ('C', 'D')}
&gt;&gt;&gt; (1, 2) in d
True
&gt;&gt;&gt; d[(1, 2)]
('A', 'B')
&gt;&gt;&gt; d[(1, 2)][0]
'A'
</snippet></ROW><ROW><id>5610927</id><snippet>L * N</snippet></ROW><ROW><id>5610927</id><snippet>N</snippet></ROW><ROW><id>5610927</id><snippet>L</snippet></ROW><ROW><id>5610927</id><snippet>[None] * (n//i - 1)</snippet></ROW><ROW><id>5610927</id><snippet>ceil(n / i)</snippet></ROW><ROW><id>5610927</id><snippet>None</snippet></ROW><ROW><id>5610927</id><snippet>L[start:end:step] = new_L</snippet></ROW><ROW><id>5610927</id><snippet>new_L</snippet></ROW><ROW><id>5610927</id><snippet>False</snippet></ROW><ROW><id>5610927</id><snippet>None</snippet></ROW><ROW><id>5610927</id><snippet>None</snippet></ROW><ROW><id>5610927</id><snippet>bool(None) is False</snippet></ROW><ROW><id>5610927</id><snippet>.. if i</snippet></ROW><ROW><id>5610927</id><snippet>if bool(i)</snippet></ROW><ROW><id>5610928</id><snippet>byref()</snippet></ROW><ROW><id>5610928</id><snippet>customer_id = c_int()
dbbind(dbconn, 1, INTBIND, 0, byref(customer_id))
</snippet></ROW><ROW><id>5610928</id><snippet>from ctypes import *
libc = cdll.msvcrt

buf = create_string_buffer(256) 
buf_u = create_unicode_buffer(256)

libc.scanf(b"%s",  buf)
libc.wscanf("%s",  buf_u)

print(buf.value)
print(buf_u.value)
</snippet></ROW><ROW><id>5611242</id><snippet>Base</snippet></ROW><ROW><id>5611242</id><snippet>bp::class_&lt;Base, boost::noncopyable&gt;("Base", bp::no_init)
</snippet></ROW><ROW><id>5611242</id><snippet>bp::no_init</snippet></ROW><ROW><id>5611242</id><snippet>class Der(Base):
    def __init__(self):
        super(Der, self).__init__() # Add this!
</snippet></ROW><ROW><id>5611527</id><snippet>set</snippet></ROW><ROW><id>5611527</id><snippet>#! /usr/bin/env python

def get_values(lst):
    sets=map(set,lst)
    common=reduce(lambda x,y:x.intersection(y),sets,set(lst[0]))
    for value in common:
        yield value
if __name__=='__main__':
    e = [[1,2,3,4],range(10000),[4,5,6,7]]  
    for common_item in get_values(e):
        print common_item
</snippet></ROW><ROW><id>5612107</id><snippet>try:
    transaction.commit()
except Exception, e:
    session.rollback()
    print str(e)
</snippet></ROW><ROW><id>5612156</id><snippet>data = db.GqlQuery("SELECT * FROM Playlist WHERE tags = :1 ORDER BY :2", tag, order)
</snippet></ROW><ROW><id>5612261</id><snippet>old_list = json.loads(old_json)
new_list = json.loads(new_json)

new_items_list = list(set(new_list) - set(old_list))
</snippet></ROW><ROW><id>5612282</id><snippet>ForeignKey</snippet></ROW><ROW><id>5612282</id><snippet>related_name</snippet></ROW><ROW><id>5612282</id><snippet>TaskUser</snippet></ROW><ROW><id>5612282</id><snippet>owner = models.ForeignKey(TaskUser, related_name="%(app_label)s_%(class)s_ownership")
</snippet></ROW><ROW><id>5612317</id><snippet>datetime</snippet></ROW><ROW><id>5612317</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; start_time = datetime.datetime(2011,3,10,15,45,48)
&gt;&gt;&gt; end_time = datetime.datetime(2011,3,10,18,4,0)
</snippet></ROW><ROW><id>5612317</id><snippet>datetime</snippet></ROW><ROW><id>5612317</id><snippet>timedelta</snippet></ROW><ROW><id>5612317</id><snippet>abs</snippet></ROW><ROW><id>5612317</id><snippet>&gt;&gt;&gt; start_time - end_time
datetime.timedelta(-1, 78108)
&gt;&gt;&gt; abs(start_time - end_time)
datetime.timedelta(0, 8292)
</snippet></ROW><ROW><id>5612317</id><snippet>&gt;&gt;&gt; hours_difference = abs(start_time - end_time).total_seconds() / 3600.0
&gt;&gt;&gt; hours_difference
2.3033333333333332
</snippet></ROW><ROW><id>5612317</id><snippet>total_seconds()</snippet></ROW><ROW><id>5612317</id><snippet>.days</snippet></ROW><ROW><id>5612317</id><snippet>.seconds</snippet></ROW><ROW><id>5612317</id><snippet>abs(start_time - end_time) &gt; timedelta(hours=6)
</snippet></ROW><ROW><id>5612409</id><snippet>file</snippet></ROW><ROW><id>5612409</id><snippet>file</snippet></ROW><ROW><id>5612774</id><snippet>UNIQUE</snippet></ROW><ROW><id>5612774</id><snippet>INSERT OR INGORE</snippet></ROW><ROW><id>5612774</id><snippet>connection=sqlite3.connect(':memory:')
cursor=connection.cursor()
cursor.execute('CREATE TABLE foo (bar INTEGER UNIQUE, baz INTEGER)')
</snippet></ROW><ROW><id>5612774</id><snippet>cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))
</snippet></ROW><ROW><id>5612774</id><snippet>try:
    cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))
except sqlite3.IntegrityError as err:
    print(err)
    # sqlite3.IntegrityError: column bar is not unique
</snippet></ROW><ROW><id>5612774</id><snippet>INSERT OR IGNORE</snippet></ROW><ROW><id>5612774</id><snippet>UNIQUE</snippet></ROW><ROW><id>5612774</id><snippet>cursor.execute('INSERT OR IGNORE INTO foo (bar,baz) VALUES (?, ?)',(1,3))

cursor.execute('SELECT * from foo')
data=cursor.fetchall()
print(data)
# [(1, 2)]    
</snippet></ROW><ROW><id>5612774</id><snippet>UNIQUE</snippet></ROW><ROW><id>5612774</id><snippet>cursor.execute('''
    CREATE TABLE foo (bar INTEGER, baz INTEGER, bing INTEGER, UNIQUE (bar, baz))''')
</snippet></ROW><ROW><id>5612965</id><snippet>compiler</snippet></ROW><ROW><id>5612965</id><snippet>ast</snippet></ROW><ROW><id>5612965</id><snippet>ast</snippet></ROW><ROW><id>5612965</id><snippet>compiler</snippet></ROW><ROW><id>5613068</id><snippet>im1,=ax.imshow(im)</snippet></ROW><ROW><id>5613068</id><snippet>TypeError</snippet></ROW><ROW><id>5613068</id><snippet>im1.set_clim=(smin.val,smax.val)</snippet></ROW><ROW><id>5613068</id><snippet>from pylab import *</snippet></ROW><ROW><id>5613068</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.widgets import Slider, Button, RadioButtons

fig = plt.figure()
ax = fig.add_subplot(111)
fig.subplots_adjust(left=0.25, bottom=0.25)
min0 = 0
max0 = 25000

im = max0 * np.random.random((10,10))
im1 = ax.imshow(im)
fig.colorbar(im1)

axcolor = 'lightgoldenrodyellow'
axmin = fig.add_axes([0.25, 0.1, 0.65, 0.03], axisbg=axcolor)
axmax  = fig.add_axes([0.25, 0.15, 0.65, 0.03], axisbg=axcolor)

smin = Slider(axmin, 'Min', 0, 30000, valinit=min0)
smax = Slider(axmax, 'Max', 0, 30000, valinit=max0)

def update(val):
    im1.set_clim([smin.val,smax.val])
    fig.canvas.draw()
smin.on_changed(update)
smax.on_changed(update)

plt.show()
</snippet></ROW><ROW><id>5613358</id><snippet>U = np.zeros((N,N))
ind = 1
k = np.zeros(N)
k[:] = U[ind,:]
</snippet></ROW><ROW><id>5613555</id><snippet>#!/usr/bin/python
import re

inp = "farm011 - farm018, farm020, farm022 - farm033, farm041 - farm052"
range_re = re.compile("farm(\d+) - farm(\d+)")

items = [i.strip() for i in inp.split(",")]
op_list = []
for i in items:
    result = range_re.match(i)
    if result:
        start = int(result.group(1), 10)
        end = int(result.group(2), 10)
        for j in range(start, end + 1):
            op_list.append("farm%03d" % j)
    else:
        op_list.append(i)

print op_list
</snippet></ROW><ROW><id>5614175</id><snippet>for i in range(0,numberOfClusters):
    # loop logic
</snippet></ROW><ROW><id>5614300</id><snippet>&gt;&gt;&gt; from distutils import sysconfig
&gt;&gt;&gt; sysconfig.get_python_inc()
'/usr/include/python2.6'
&gt;&gt;&gt; sysconfig.get_python_inc(plat_specific=True)
'/usr/include/python2.6'
</snippet></ROW><ROW><id>5614300</id><snippet>python-config</snippet></ROW><ROW><id>5614309</id><snippet>open(file).read()</snippet></ROW><ROW><id>5614309</id><snippet>open("file").read()</snippet></ROW><ROW><id>5614324</id><snippet>a = Literal('a')[1:]
</snippet></ROW><ROW><id>5614324</id><snippet>[0:]</snippet></ROW><ROW><id>5614405</id><snippet>wchar_t</snippet></ROW><ROW><id>5614579</id><snippet>"extracted motif sets"</snippet></ROW><ROW><id>5614579</id><snippet>line</snippet></ROW><ROW><id>5614579</id><snippet>for</snippet></ROW><ROW><id>5614579</id><snippet>for</snippet></ROW><ROW><id>5614579</id><snippet>line</snippet></ROW><ROW><id>5614579</id><snippet>lysozyme.seq</snippet></ROW><ROW><id>5614579</id><snippet>line.split(" ")</snippet></ROW><ROW><id>5614579</id><snippet>line.split("\t")</snippet></ROW><ROW><id>5614579</id><snippet>\t</snippet></ROW><ROW><id>5614579</id><snippet>" "</snippet></ROW><ROW><id>5614579</id><snippet>"\t"</snippet></ROW><ROW><id>5614697</id><snippet>def index(self, ...):
    root = my_domain_map[cherrypy.request.headers['Host']]
    cherrypy.lib.staticdir(section='', dir='', root=root)
    # And then this funky hack...
    return cherrypy.response.body
index.exposed = True
</snippet></ROW><ROW><id>5614697</id><snippet>root</snippet></ROW><ROW><id>5614697</id><snippet>before_handler</snippet></ROW><ROW><id>5614697</id><snippet>def staticroot(debug=False):
    root = my_domain_map[cherrypy.request.headers['Host']]
    cherrypy.request.toolmaps['tools']['staticdir']['root'] = root
cherrypy.tools.staticroot = cherrypy.Tool(
    staticroot, point='before_handler', priority=30)
</snippet></ROW><ROW><id>5614697</id><snippet>[/]
tools.staticroot.on = True
</snippet></ROW><ROW><id>5614788</id><snippet>import copy
import types

def _deepcopy_method(x, memo):
    return type(x)(x.im_func, copy.deepcopy(x.im_self, memo), x.im_class)
copy._deepcopy_dispatch[types.MethodType] = _deepcopy_method
</snippet></ROW><ROW><id>5615072</id><snippet>$ python manage.py syncdb
Creating table auth_permission
Creating table auth_group_permissions
Creating table auth_group
Creating table auth_user_user_permissions
Creating table auth_user_groups
Creating table auth_user
Creating table auth_message
Creating table django_content_type
Creating table django_session
Creating table django_site

You just installed Django's auth system, which means you don't have any superusers defined.
Would you like to create one now? (yes/no): no
Installing index for auth.Permission model
Installing index for auth.Group_permissions model
Installing index for auth.User_user_permissions model
Installing index for auth.User_groups model
Installing index for auth.Message model
No fixtures found.
$ python manage.py createsuperuser --username yourname
E-mail address: email@example.com
Password: 
Password (again): 
Superuser created successfully.
</snippet></ROW><ROW><id>5615142</id><snippet>deadline</snippet></ROW><ROW><id>5615142</id><snippet>save()</snippet></ROW><ROW><id>5615142</id><snippet>class StoryForm(ModelForm):

    fecha_cierre = forms.TypedChoiceField(
       choices=DAYS_CHOICES, widget=forms.Select)

    class Meta:
        models = Story
        exclude = ('deadline',)

    def save(self):
        story = super(StoryForm, self).save(commit=False)
        story.deadline = datetime.datetime.now() + \
                         datetime.timedelta(days=self.cleaned_data['fecha_cierre']))
        story.save()
        return story
</snippet></ROW><ROW><id>5615192</id><snippet>json.loads(external_JSON_string)</snippet></ROW><ROW><id>5615192</id><snippet>Print Status</snippet></ROW><ROW><id>5615192</id><snippet>print status</snippet></ROW><ROW><id>5615192</id><snippet>&gt;&gt;&gt; result = [{u'status': u'active', u'due_date': None, u'group': u'later', u'task_id': 73286}]
&gt;&gt;&gt; print result[0]['status']
active
</snippet></ROW><ROW><id>5615192</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(result)
'[{"status": "active", "due_date": null, "group": "later", "task_id": 73286}]'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5615192</id><snippet>import simplejson as json</snippet></ROW><ROW><id>5615192</id><snippet>import json</snippet></ROW><ROW><id>5615192</id><snippet>try:
    import json
except ImportError:
    import simplejson as json
</snippet></ROW><ROW><id>5615268</id><snippet>from flask import Flask, render_template
app = Flask(__name__)

@app.route('/')
def index():
  return render_template('template.html')

@app.route('/my-link/')
def my_link():
  print 'I got clicked!'

  return 'Click.'

if __name__ == '__main__':
  app.run()
</snippet></ROW><ROW><id>5615268</id><snippet>&lt;!doctype html&gt;

&lt;title&gt;Test&lt;/title&gt; 
&lt;meta charset=utf-8&gt; 

&lt;a href="/my-link/"&gt;Click me&lt;/a&gt;
</snippet></ROW><ROW><id>5615499</id><snippet>content_type</snippet></ROW><ROW><id>5615499</id><snippet>ct</snippet></ROW><ROW><id>5615509</id><snippet>import urllib

url = ('http://www.epicurious.com/articlesguides/bestof/'
       'toprecipes/bestchickenrecipes/recipes/food/views/'
       'My-Favorite-Simple-Roast-Chicken-231348')


sock = urllib.urlopen(url)
ch = sock.read()
sock.close()


gen = (str(i)+' '+repr(line) for i,line in enumerate(ch.splitlines(1)))

print '\n'.join(gen)
</snippet></ROW><ROW><id>5615509</id><snippet>import urllib
import re

url = ('http://www.epicurious.com/articlesguides/bestof/'
       'toprecipes/bestchickenrecipes/recipes/food/views/'
       'My-Favorite-Simple-Roast-Chicken-231348')

sock = urllib.urlopen(url)
ch = sock.read()
sock.close()

x = ch.find('ul class="ingredientsList"&gt;')

patingr = re.compile('&lt;li class="ingredient"&gt;(.+?)&lt;/li&gt;\n')

print patingr.findall(ch,x)
</snippet></ROW><ROW><id>5615509</id><snippet>'</snippet></ROW><ROW><id>5615509</id><snippet>"</snippet></ROW><ROW><id>5615509</id><snippet>'</snippet></ROW><ROW><id>5615509</id><snippet>"</snippet></ROW><ROW><id>5615509</id><snippet>"</snippet></ROW><ROW><id>5615509</id><snippet>'</snippet></ROW><ROW><id>5615509</id><snippet>import urllib
import re

url = ('http://www.epicurious.com/articlesguides/bestof/'
       'toprecipes/bestchickenrecipes/recipes/food/views/'
       'My-Favorite-Simple-Roast-Chicken-231348')

sock = urllib.urlopen(url)
ch = sock.read()
sock.close()

#----------------------------------------------------------
patingr = re.compile('&lt;li class="ingredient"&gt;(.+?)&lt;/li&gt;\n')
print
print '\n'.join(repr(mat.group()) for mat in patingr.finditer(ch))


ch = ch.replace('&lt;li class="ingredient"&gt;One 2- to 3-pound farm-raised chicken&lt;/li&gt;',
                "&lt;LI class='ingredient'&gt;One 2- to 3-pound farm-raised \nchicken&lt;/li&gt;")
print
print '\n'.join(repr(mat.group()) for mat in patingr.finditer(ch))


patingr = re.compile('&lt;li class=["\']ingredient["\']&gt;(.+?)&lt;/li&gt;\n',re.DOTALL|re.IGNORECASE)
print
print '\n'.join(repr(mat.group()) for mat in patingr.finditer(ch))
</snippet></ROW><ROW><id>5615509</id><snippet>'&lt;li class="ingredient"&gt;One 2- to 3-pound farm-raised chicken&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Kosher salt and freshly ground black pepper&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;2 teaspoons minced thyme (optional)&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Unsalted butter&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Dijon mustard&lt;/li&gt;\n'

'&lt;li class="ingredient"&gt;Kosher salt and freshly ground black pepper&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;2 teaspoons minced thyme (optional)&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Unsalted butter&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Dijon mustard&lt;/li&gt;\n'

"&lt;LI class='ingredient'&gt;One 2- to 3-pound farm-raised \nchicken&lt;/li&gt;\n"
'&lt;li class="ingredient"&gt;Kosher salt and freshly ground black pepper&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;2 teaspoons minced thyme (optional)&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Unsalted butter&lt;/li&gt;\n'
'&lt;li class="ingredient"&gt;Dijon mustard&lt;/li&gt;\n'
</snippet></ROW><ROW><id>5615509</id><snippet>["']</snippet></ROW><ROW><id>5615539</id><snippet>from PyQt4.QtCore import QProcess

class YourClass(QObject):

    [...]

    def videoProcess(self):
        self.pushButton.setEnabled(0)
        self.pushButton.setText("Please Wait")
        command = "handbrake.exe"
        args =  ["-i", "somefile.wmv", "-o", "somefile.mp4"]
        process = QProcess(self)
        process.finished.connect(self.onFinished)
        process.startDetached(command, args)

    def onFinished(self, exitCode, exitStatus):
        self.pushButton.setEnabled(True)

    [...]
</snippet></ROW><ROW><id>5615674</id><snippet>self</snippet></ROW><ROW><id>5615674</id><snippet>def isNear(self, p):
    self.distToPoint(p)
    ...
</snippet></ROW><ROW><id>5615770</id><snippet>import urllib2
import BeautifulSoup

def main():
    url = "http://allrecipes.com/Recipe/Slow-Cooker-Pork-Chops-II/Detail.aspx"
    data = urllib2.urlopen(url).read()
    bs = BeautifulSoup.BeautifulSoup(data)

    ingreds = bs.find('div', {'class': 'ingredients'})
    ingreds = [s.getText().strip() for s in ingreds.findAll('li')]

    fname = 'PorkChopsRecipe.txt'
    with open(fname, 'w') as outf:
        outf.write('\n'.join(ingreds))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5615770</id><snippet>1/4 cup olive oil
1 cup chicken broth
2 cloves garlic, minced
1 tablespoon paprika
1 tablespoon garlic powder
1 tablespoon poultry seasoning
1 teaspoon dried oregano
1 teaspoon dried basil
4 thick cut boneless pork chops
salt and pepper to taste
</snippet></ROW><ROW><id>5615770</id><snippet>from time import clock
import urllib
import re
import BeautifulSoup
import lxml.html

start = clock()
url = 'http://allrecipes.com/Recipe/Slow-Cooker-Pork-Chops-II/Detail.aspx'
data = urllib.urlopen(url).read()
print "Loading took", (clock()-start), "s"

# by regex
start = clock()
x = data.find('Ingredients&lt;/h3&gt;')
patingr = re.compile('&lt;li class="plaincharacterwrap"&gt;\r\n +(.+?)&lt;/li&gt;\r\n')
res1 = '\n'.join(patingr.findall(data,x))
print "Regex parse took", (clock()-start), "s"

# by BeautifulSoup
start = clock()
bs = BeautifulSoup.BeautifulSoup(data)
ingreds = bs.find('div', {'class': 'ingredients'})
res2 = '\n'.join(s.getText().strip() for s in ingreds.findAll('li'))
print "BeautifulSoup parse took", (clock()-start), "s  - same =", (res2==res1)

# by lxml
start = clock()
lx = lxml.html.fromstring(data)
ingreds = lx.xpath('//div[@class="ingredients"]//li/text()')
res3 = '\n'.join(s.strip() for s in ingreds)
print "lxml parse took", (clock()-start), "s  - same =", (res3==res1)
</snippet></ROW><ROW><id>5615770</id><snippet>Loading took 1.09091222621 s
Regex parse took 0.000432703726233 s
BeautifulSoup parse took 0.28126133314 s  - same = True
lxml parse took 0.0100940499505 s  - same = True
</snippet></ROW><ROW><id>5615826</id><snippet>import math

class Point(object):
    def __init__(self, x, y):
        self.x = x + 0.
        self.y = y + 0.

    def distToPoint(self, p):
        dx = self.x - p.x
        dy = self.y - p.y
        return math.sqrt(dx*dx + dy*dy)

a = Point(0, 0)
b = Point(3, 4)

print a.distToPoint(b)
</snippet></ROW><ROW><id>5615826</id><snippet>5.0
</snippet></ROW><ROW><id>5615913</id><snippet>zip</snippet></ROW><ROW><id>5615913</id><snippet>newList = [a + b for a,b in zip(list[::2], list[1::2])]
</snippet></ROW><ROW><id>5615913</id><snippet>it = iter(list)
newList = [a + b for a, b in zip(it, it)]
</snippet></ROW><ROW><id>5615913</id><snippet>izip</snippet></ROW><ROW><id>5615913</id><snippet>import itertools
it = iter(list)
newList = [a + b for a, b in itertools.izip(it, it)]
</snippet></ROW><ROW><id>5615913</id><snippet>zip</snippet></ROW><ROW><id>5615913</id><snippet>list</snippet></ROW><ROW><id>5615913</id><snippet>list</snippet></ROW><ROW><id>5615937</id><snippet>/html/head/meta[@http-equiv='Content-Type']/@content
</snippet></ROW><ROW><id>5615937</id><snippet>/html/head/meta/@charset
</snippet></ROW><ROW><id>5616393</id><snippet>request()</snippet></ROW><ROW><id>5616393</id><snippet>request()</snippet></ROW><ROW><id>5616393</id><snippet>result = client.request(request_token_url, "GET")
</snippet></ROW><ROW><id>5616393</id><snippet>result[0]</snippet></ROW><ROW><id>5616393</id><snippet>result[1]</snippet></ROW><ROW><id>5616486</id><snippet>__get__</snippet></ROW><ROW><id>5616486</id><snippet>MethodType</snippet></ROW><ROW><id>5616486</id><snippet>def __get__(self, obj, objtype=None):
    return MethodType(self, obj, objtype)
</snippet></ROW><ROW><id>5616486</id><snippet>MethodType</snippet></ROW><ROW><id>5616486</id><snippet>self</snippet></ROW><ROW><id>5616637</id><snippet>python MyGame.py
</snippet></ROW><ROW><id>5616637</id><snippet>.bat</snippet></ROW><ROW><id>5616734</id><snippet>"script_name = project.main:do_stuff</snippet></ROW><ROW><id>5616734</id><snippet>script_name</snippet></ROW><ROW><id>5616734</id><snippet>project.main:do_stuff</snippet></ROW><ROW><id>5616734</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>5616734</id><snippet>#!/usr/bin/python
# EASY-INSTALL-ENTRY-SCRIPT: 'distribute==0.6.14','console_scripts','easy_install'
__requires__ = 'distribute==0.6.14'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('distribute==0.6.14', 'console_scripts', 'easy_install')()
    )
</snippet></ROW><ROW><id>5616734</id><snippet>if __name__ == "__main__": do_stuff()</snippet></ROW><ROW><id>5616816</id><snippet>&lt;a href="{% url post object_id=object.id %}"&gt;{{ object.title }}&lt;/a&gt;
</snippet></ROW><ROW><id>5616816</id><snippet>url('^(\d+)/$', 'posts.views.detail_view', name="post")
</snippet></ROW><ROW><id>5616816</id><snippet>... , {'object':object[0]}, ...
</snippet></ROW><ROW><id>5616816</id><snippet>render_to_response</snippet></ROW><ROW><id>5616816</id><snippet>filter</snippet></ROW><ROW><id>5616816</id><snippet>update</snippet></ROW><ROW><id>5616910</id><snippet>import re 
s = "123456789123456789"
matches = re.finditer(r'(?=(\d{10}))',s)
results = [int(match.group(1)) for match in matches]
# results: 
# [1234567891,
#  2345678912,
#  3456789123,
#  4567891234,
#  5678912345,
#  6789123456,
#  7891234567,
#  8912345678,
#  9123456789]
</snippet></ROW><ROW><id>5616969</id><snippet>http://docs.python.org/library/sqlite3.html#cursor-objects
</snippet></ROW><ROW><id>5616969</id><snippet>executemany</snippet></ROW><ROW><id>5616969</id><snippet>values_to_insert = [(1,"foo"), (2, "bar"), (3, "baz")]

cursor.executemany("""
    INSERT INTO some_table ('item_num', 'item_name')
    VALUES (?, ?)""", values_to_insert)
</snippet></ROW><ROW><id>5617198</id><snippet>even</snippet></ROW><ROW><id>5617198</id><snippet>odd</snippet></ROW><ROW><id>5617198</id><snippet>words</snippet></ROW><ROW><id>5617198</id><snippet>codecs.open()</snippet></ROW><ROW><id>5617198</id><snippet>"utf-8"</snippet></ROW><ROW><id>5617306</id><snippet>&lt;a href="http://m.facebook.com/logout.php?confirm=1&amp;next=http://10.1.0.90:8080/registrationForm" &gt;Sign Out&lt;/a&gt; 
</snippet></ROW><ROW><id>5617311</id><snippet>&lt;a href="http://m.facebook.com/logout.php?confirm=1&amp;next=http://10.1.0.90:8080/registrationForm" &gt;Sign Out&lt;/a&gt; 
</snippet></ROW><ROW><id>5617573</id><snippet>a = [x for x in a if x != 43] 
</snippet></ROW><ROW><id>5617939</id><snippet>class UserReportedCountry(db.Model):
  country_name = db.StringProperty( required=True,
                          choices=['Afghanistan','Aring land Islands']
                         )

class UserReportedCity(db.Model):
  country = db.ReferenceProperty(UserReportedCountry, collection_name='cities')
  city_name = db.StringProperty(required=True)   

class UserReportedStatus(db.Model):
  city = db.ReferenceProperty(UserReportedCity, collection_name='statuses')
  status = db.BooleanProperty(required=True)
  date_time = db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>5617939</id><snippet>class MainPage(webapp.RequestHandler):
    def get(self):
        User_country=UserReportedCountry.all().fetch(1000)
        return self.response.out.write(template.render('#pathtohtml','{'user_c':User_country}))
</snippet></ROW><ROW><id>5617939</id><snippet>&lt;!--importing javascript and css files --&gt;
&lt;style type="text/css"&gt;@import "/media/css/demo_table.css";&lt;/style&gt;  
&lt;script type="text/javascript" language="javascript" src="/media/js/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/media/js/jquery.dataTables.js"&gt;&lt;/script&gt;

&lt;!-- Configuring the datatable javascript library to allow multicolumn sorting --&gt;
&lt;script type="text/javascript"&gt;
    /* Define two custom functions (asc and desc) for string sorting */
    jQuery.fn.dataTableExt.oSort['string-case-asc']  = function(x,y) {
        return ((x &lt; y) ? -1 : ((x &gt; y) ?  1 : 0));
    };

    jQuery.fn.dataTableExt.oSort['string-case-desc'] = function(x,y) {
        return ((x &lt; y) ?  1 : ((x &gt; y) ? -1 : 0));
    };

    $(document).ready(function() {
    /* Build the DataTable with third column using our custom sort functions */
    // #user_reported_data_table is the name of the table which is used to display the data reported by the users
    $('#user_reported_data_table').dataTable( {
        "aaSorting": [ [0,'asc'], [1,'asc'] ],
        "aoColumns": [
            null,
            null,
            { "sType": 'string-case' },
            null
        ]
    } );
} );
&lt;/script&gt;

&lt;!-- Table containing the data to be printed--&gt; 
&lt;div id="userReportedData"&gt;
&lt;table cellpadding="0" cellspacing="0" border="0" class="display" id="user_reported_data_table"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Country&lt;/th&gt;
            &lt;th&gt;City&lt;/th&gt;
            &lt;th&gt;Status&lt;/th&gt;
            &lt;th&gt;Reported at&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;

    &lt;tbody&gt;
        &lt;tr class="gradeA"&gt;
             {% for country in user_c %}
             &lt;td&gt;{{country}}&lt;/td&gt;
             {%endfor%}
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;  
</snippet></ROW><ROW><id>5618237</id><snippet>def index(req)</snippet></ROW><ROW><id>5618237</id><snippet>s ="""\
&lt;html&gt;
&lt;body&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;
"""

def index():
   return s
</snippet></ROW><ROW><id>5618731</id><snippet>gtk.gdk.Event</snippet></ROW><ROW><id>5618731</id><snippet>event = gtk.gdk.Event(gtk.gdk.FOCUS_CHANGE)
event.window = entry.get_window()  # the gtk.gdk.Window of the widget
event.send_event = True  # this means you sent the event explicitly
event.in_ = False  # False for focus out, True for focus in
</snippet></ROW><ROW><id>5618935</id><snippet># models.py
class Page(models.Model):
    hits = models.PositiveIntegerField()

# views.py
def hit(request, page_pk):
    Page.objects.filter(pk=page_pk).update(hits=F('hits')+1)
    return HttpResponse()
</snippet></ROW><ROW><id>5618935</id><snippet># views.py
from django.db.decorators import commit_on_success

@commit_on_success
def hit(request, page_pk):
    page = Page.objects.filter(pk=page_pk)
    page.hits += 1
    page.save()
    return HttpResponse()
</snippet></ROW><ROW><id>5619069</id><snippet>category = models.ManyToManyField('PlayCat')
</snippet></ROW><ROW><id>5619328</id><snippet>if not pdf.err:
    response = HttpResponse(result.getvalue(), mimetype='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=Client_Summary.pdf'
    return response
</snippet></ROW><ROW><id>5619517</id><snippet>birthday</snippet></ROW><ROW><id>5619517</id><snippet>&lt;td&gt;Birthday&lt;/td&gt;
&lt;td&gt;&lt;input type="text" id="picker1" name="birthday" value="" 
           maxlength="100" class="picker" /&gt;
</snippet></ROW><ROW><id>5619517</id><snippet>birthday</snippet></ROW><ROW><id>5619517</id><snippet>django forms</snippet></ROW><ROW><id>5619517</id><snippet>birthdaypicker</snippet></ROW><ROW><id>5619517</id><snippet>hiddenDate</snippet></ROW><ROW><id>5619517</id><snippet>birthdate</snippet></ROW><ROW><id>5619517</id><snippet>div</snippet></ROW><ROW><id>5619517</id><snippet>birthdaypicker</snippet></ROW><ROW><id>5619517</id><snippet>&lt;td&gt;Birthday&lt;/td&gt;
&lt;td&gt;&lt;!--&lt;input type="text" name="datepicker" id="datepicker"
                        value="" maxlength="100" /&gt;--&gt;
    &lt;div class="picker" id="picker1" name="birthday" value=""&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>5619517</id><snippet>birthdaypicker</snippet></ROW><ROW><id>5619517</id><snippet>hiddendate</snippet></ROW><ROW><id>5619517</id><snippet>  $(document).ready (function() {
    //$( "#datepicker" ).datepicker();
    $("#picker1").birthdaypicker({hiddenDate: true});
});
</snippet></ROW><ROW><id>5619517</id><snippet>django</snippet></ROW><ROW><id>5619517</id><snippet>birthdate</snippet></ROW><ROW><id>5619517</id><snippet>birthday</snippet></ROW><ROW><id>5619517</id><snippet>birthday = request.POST.get("birthdate")
</snippet></ROW><ROW><id>5619699</id><snippet>{% facebook_connect_script %}</snippet></ROW><ROW><id>5619886</id><snippet>re.compile</snippet></ROW><ROW><id>5619886</id><snippet>bytes</snippet></ROW><ROW><id>5619886</id><snippet>b</snippet></ROW><ROW><id>5619886</id><snippet>r = re.compile(b"(This)")
</snippet></ROW><ROW><id>5620335</id><snippet>resource</snippet></ROW><ROW><id>5620335</id><snippet>pyxmpp.jabber.client.JabberClient(jid=pyxmpp.jid.JID("johny", "example.com", "home"), ...)
</snippet></ROW><ROW><id>5620335</id><snippet>pyxmpp.jabber.client.JabberClient(jid=pyxmpp.jid.JID("johny", "example.com", "work"), ...)
</snippet></ROW><ROW><id>5620535</id><snippet>_w</snippet></ROW><ROW><id>5620535</id><snippet>$ python2.5
Python 2.5.4 (r254:67917, Dec 23 2008, 14:57:27) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import Tkinter as tk
&gt;&gt;&gt; root=tk.Tk()
&gt;&gt;&gt; canvas = tk.Canvas(root)
&gt;&gt;&gt;&gt; print canvas._w
.8327736
</snippet></ROW><ROW><id>5620535</id><snippet>object has no attribute '_w'</snippet></ROW><ROW><id>5620535</id><snippet>tag_bind</snippet></ROW><ROW><id>5620535</id><snippet>__init__</snippet></ROW><ROW><id>5620535</id><snippet>__init__</snippet></ROW><ROW><id>5620535</id><snippet>Canvas</snippet></ROW><ROW><id>5620535</id><snippet>&gt;&gt;&gt; class Board(tk.Canvas):
...     def __init__(self, *args):
...         pass         
...     
&gt;&gt;&gt; board = Board()
&gt;&gt;&gt; board.tag_bind("whatever","&lt;1&gt;", None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-tk
/Tkinter.py", line 2129, in tag_bind
return self._bind((self._w, 'bind', tagOrId),
AttributeError: Board instance has no attribute '_w'
</snippet></ROW><ROW><id>5620535</id><snippet>Canvas</snippet></ROW><ROW><id>5620535</id><snippet>Canvas.__init__</snippet></ROW><ROW><id>5620590</id><snippet>import urllib2

proxy_support = urllib2.ProxyHandler({"http":"http://61.233.25.166:80"})
opener = urllib2.build_opener(proxy_support)
urllib2.install_opener(opener)

html = urllib2.urlopen("http://www.google.com").read()
print html
</snippet></ROW><ROW><id>5620590</id><snippet>import urllib2

#proxy = "61.233.25.166:80"
proxy = "YOUR_PROXY_GOES_HERE"

proxies = {"http":"http://%s" % proxy}
url = "http://www.google.com/search?q=test"
headers={'User-agent' : 'Mozilla/5.0'}

proxy_support = urllib2.ProxyHandler(proxies)
opener = urllib2.build_opener(proxy_support, urllib2.HTTPHandler(debuglevel=1))
urllib2.install_opener(opener)

req = urllib2.Request(url, None, headers)
html = urllib2.urlopen(req).read()
print html
</snippet></ROW><ROW><id>5620754</id><snippet>URIRef</snippet></ROW><ROW><id>5620754</id><snippet>&lt;http://data.org/inst1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "david" .
&lt;http://data.org/inst2&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "luis" .
&lt;http://data.org/inst3&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "max" .
</snippet></ROW><ROW><id>5620754</id><snippet>&lt;http://data.org/inst1&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;http://data.org/inst2&gt; .
&lt;http://data.org/inst2&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;http://data.org/inst3&gt; .
&lt;http://data.org/inst3&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;http://data.org/inst1&gt; .
</snippet></ROW><ROW><id>5620754</id><snippet>import rdflib

g = rdflib.ConjunctiveGraph("IOMemory",)

#g is made of two sub-graphs or triples gathered in two different contexts.
#the second paramaters identifies the URIRef for each subgraph.
g.parse("dataA.nt",rdflib.URIRef("http://mygraphs.org/names"),format="n3")
g.parse("dataB.nt",rdflib.URIRef("http://mygraphs.org/relations"),format="n3")

print "traverse all contexts and all triples for each context"
for subgraph in g.contexts():
    print "Graph name",subgraph.identifier 
    for triple in subgraph.triples((None,None,None)):
        print triple

print "traverse all contexts where a triple appears"
for subgraph in g.contexts(triple=(rdflib.URIRef('http://data.org/inst1'),rdflib.URIRef("http://xmlns.com/foaf/0.1/name"),rdflib.Literal(u'david'))):
    print "Graph name",subgraph.identifier 
    for triple in subgraph.triples((None,None,None)):
        print triple

print "traverse a triple pattern regardless the context is in"
for t in g.triples((None,rdflib.URIRef("http://xmlns.com/foaf/0.1/name"),None)):
    print t
</snippet></ROW><ROW><id>5620851</id><snippet>n&lt;10</snippet></ROW><ROW><id>5620851</id><snippet>n/10 == 0</snippet></ROW><ROW><id>5621382</id><snippet>shelve</snippet></ROW><ROW><id>5621382</id><snippet>self.allphones</snippet></ROW><ROW><id>5621382</id><snippet>import shelve
from contextlib import closing

try: raw_input = raw_input
except NameError:
    raw_input = input # py3k

class phonebook:

    def __init__ (self, filename):
        self.allphones = shelve.open(filename, protocol=1, writeback=True)

    def adddata(self, name, phone):
        self.allphones[name] = phone # append to the dictionary
        self.allphones.sync()
        # confirm the input
        print ('A new phone book entry added - {0}:{1}'.format(name, phone))
        # dump the complete phonebook data
        print (dict(self.allphones.items())) 

    def close(self):
        self.allphones.close()

with closing(phonebook('.phonebook')) as adding:
    name = raw_input('Type person\'s name --&gt; ')
    phone = raw_input('Type person\'s phone number --&gt; ')
    adding.adddata(name, phone)
</snippet></ROW><ROW><id>5621382</id><snippet>phone</snippet></ROW><ROW><id>5621382</id><snippet>writeback=True</snippet></ROW><ROW><id>5621382</id><snippet>.sync()</snippet></ROW><ROW><id>5621382</id><snippet>name</snippet></ROW><ROW><id>5621382</id><snippet>$ python3 phonebook.py 
Type person's name --&gt; a
Type person's phone number --&gt; 1
A new phone book entry added - a:1
{'a': '1'}

$ python3 phonebook.py 
Type person's name --&gt; b
Type person's phone number --&gt; 2
A new phone book entry added - b:2
{'a': '1', 'b': '2'}

$ python phonebook.py 
Type person's name --&gt; c
Type person's phone number --&gt; 3
A new phone book entry added - c:3
{'a': u'1', 'c': '3', 'b': u'2'}
</snippet></ROW><ROW><id>5622888</id><snippet>audio</snippet></ROW><ROW><id>5622888</id><snippet>add_header</snippet></ROW><ROW><id>5622888</id><snippet>file = open(file_name, 'rb')
audio = MIMEAudio(file.read())
file.close()
audio.add_header('Content-Disposition', 'attachment', filename=file_name)
msg.attach(audio)
</snippet></ROW><ROW><id>5622893</id><snippet>petsc</snippet></ROW><ROW><id>5623025</id><snippet>d</snippet></ROW><ROW><id>5623025</id><snippet>datetime.strptime(max(d.keys()),'%Y-%m-%d %H:%M:%S.%f')</snippet></ROW><ROW><id>5623025</id><snippet>max(map(lambda dt:datetime.strptime(dt,'%Y-%m-%d %H:%M:%S.%f'),d.keys()))</snippet></ROW><ROW><id>5623040</id><snippet>timeit</snippet></ROW><ROW><id>5623040</id><snippet>profile</snippet></ROW><ROW><id>5623040</id><snippet>time</snippet></ROW><ROW><id>5623231</id><snippet>request.is_ajax()</snippet></ROW><ROW><id>5623388</id><snippet>class Base
{
   public:
      virtual ~Base() {}
      // Other members...
};
</snippet></ROW><ROW><id>5623413</id><snippet>__init__</snippet></ROW><ROW><id>5623413</id><snippet>class Foo(object):
    def __init__(self, *args, **kwargs):
        DB.connect()
</snippet></ROW><ROW><id>5623641</id><snippet>import numpy as np
v=[1,4,4,4,23,4]
t=[1,2,3,4,5,6]

data = np.array([v,t])
</snippet></ROW><ROW><id>5623641</id><snippet>data[:,2:4]  #array([[4, 4],[3, 4]])

ii = [1,2,5] # Fancy indexing
data[:,ii] # array([[4, 4, 4],
           #        [2, 3, 6]])
</snippet></ROW><ROW><id>5623933</id><snippet>vctestNames = dict((vctest['name'], vctest) for vctest in vcdict['tests'])
dbtestNames = dict((dbtest.name, dbtest) for dbtest in alldbTests)

obsoleteTests = [vctestNames[key]
                 for key in set(vctestNames.keys()) - set(dbtestNames.keys())]

newTests = [dbtestNames[key]
            for key in set(dbtestNames.keys()) - set(vctestNames.keys())]
</snippet></ROW><ROW><id>5624499</id><snippet>np.repeat</snippet></ROW><ROW><id>5624499</id><snippet>In [5]: np.repeat(test, [4, 1, 1], axis=0)
Out[5]: 
array([[0, 1, 2],
       [0, 1, 2],
       [0, 1, 2],
       [0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
</snippet></ROW><ROW><id>5624499</id><snippet>[4, 1, 1]</snippet></ROW><ROW><id>5624547</id><snippet>out = [x[1:3] for x in aa]
</snippet></ROW><ROW><id>5624566</id><snippet>sqlplus</snippet></ROW><ROW><id>5624691</id><snippet>file.close()</snippet></ROW><ROW><id>5624691</id><snippet>os.open()</snippet></ROW><ROW><id>5624691</id><snippet>with os.fdopen(os.open('/path/to/file', os.O_WRONLY | os.O_CREAT, 0600), 'w') as handle:
  handle.write(...)     
</snippet></ROW><ROW><id>5624732</id><snippet>s = raw_input()
try:
    x = float(s)
except ValueError:
    # no number
else:
    # number
</snippet></ROW><ROW><id>5624791</id><snippet>key</snippet></ROW><ROW><id>5624791</id><snippet>list.sort()</snippet></ROW><ROW><id>5624791</id><snippet>a = ["Wednesday-Morning-Go bowling", "Sunday-Really late at night-Sleep",
     "July-Noon-BBQ"]
a.sort(key=lambda x: x.split("-", 2)[-1])
print a
</snippet></ROW><ROW><id>5624791</id><snippet>['July-Noon-BBQ', 'Wednesday-Morning-Go bowling', 'Sunday-Really late at night-Sleep']
</snippet></ROW><ROW><id>5624791</id><snippet>split()</snippet></ROW><ROW><id>5624942</id><snippet>for key in ('log', 'bin', 'pid', 'conf'):
    if key in kwargs:
        setattr(self, key, kwargs[key])
</snippet></ROW><ROW><id>5624942</id><snippet>self.__dict__.update((key, kwargs[key])
                     for key in ('log', 'bin', 'pid', 'conf')
                     if key in kwargs)
</snippet></ROW><ROW><id>5625413</id><snippet>def bold_partial_rep(matchobj):
    return '&lt;b&gt;' + matchobj.group(0) + '&lt;/b&gt;'

def bold_partial(long_string, partial):
    replacer = re.compile(partial, re.IGNORECASE)
    new_long_string = replacer.sub(bold_partial_rep, long_string)
    print new_long_string
</snippet></ROW><ROW><id>5625413</id><snippet>bold_partial()</snippet></ROW><ROW><id>5625413</id><snippet>new_long_string = replacer.sub(lambda m: '&lt;b&gt;%s&lt;/b&gt;' % m.group(0), long_string)
</snippet></ROW><ROW><id>5625516</id><snippet>eval()</snippet></ROW><ROW><id>5625516</id><snippet>obj = globals()[txtobj]()
</snippet></ROW><ROW><id>5625516</id><snippet>txtobj</snippet></ROW><ROW><id>5625516</id><snippet>classes = dict((c.__name__, c) for c in [Iteration,Observation,DataPoint])
# ...
obj = classes[txtobj]()
</snippet></ROW><ROW><id>5625766</id><snippet>for each in data:
    v= dict((each, []) for each in data)
print v
</snippet></ROW><ROW><id>5625766</id><snippet>d=[]
for each in c:
    d.append(each)
</snippet></ROW><ROW><id>5625766</id><snippet>d = list(c)
</snippet></ROW><ROW><id>5625766</id><snippet>csr = cxn.cursor()
c = csr.execute("Select * from p.s")
a = numpy.fromiter(c)
v = dict((key, []) for key in a[:,0])
</snippet></ROW><ROW><id>5626250</id><snippet>get_data</snippet></ROW><ROW><id>5626250</id><snippet>get_data</snippet></ROW><ROW><id>5626729</id><snippet>FILE_UPLOAD_TEMP_DIR</snippet></ROW><ROW><id>5626729</id><snippet>/tmp</snippet></ROW><ROW><id>5626776</id><snippet>case BINARY_SUBSCR:
    w = POP();
    v = TOP();
    if (PyList_CheckExact(v) &amp;&amp; PyInt_CheckExact(w)) {
        /* INLINE: list[int] */
        Py_ssize_t i = PyInt_AsSsize_t(w);
        if (i &lt; 0)
            i += PyList_GET_SIZE(v);
        if (i &gt;= 0 &amp;&amp; i &lt; PyList_GET_SIZE(v)) {
            x = PyList_GET_ITEM(v, i);
            Py_INCREF(x);
        }
</snippet></ROW><ROW><id>5626840</id><snippet>myapp</snippet></ROW><ROW><id>5626840</id><snippet>myapp_test</snippet></ROW><ROW><id>5626840</id><snippet>myapp_test</snippet></ROW><ROW><id>5626840</id><snippet>models.py</snippet></ROW><ROW><id>5626840</id><snippet>from myapp import models</snippet></ROW><ROW><id>5626840</id><snippet>settings.py</snippet></ROW><ROW><id>5626840</id><snippet>myapp_test</snippet></ROW><ROW><id>5626840</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5626840</id><snippet>local_settings.py</snippet></ROW><ROW><id>5626840</id><snippet>myapp_test</snippet></ROW><ROW><id>5626840</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5627013</id><snippet>def getconstants(arg):
    try:
        arg = int(arg)
    except:
        raise TypeError("expected integer, or something that can be converted to one, but got " + repr(arg))
</snippet></ROW><ROW><id>5627013</id><snippet>int</snippet></ROW><ROW><id>5627013</id><snippet>int</snippet></ROW><ROW><id>5627013</id><snippet>__int__()</snippet></ROW><ROW><id>5627013</id><snippet>try/except</snippet></ROW><ROW><id>5627013</id><snippet>int()</snippet></ROW><ROW><id>5627013</id><snippet>TypeError</snippet></ROW><ROW><id>5627013</id><snippet>ValueError</snippet></ROW><ROW><id>5627013</id><snippet>TypeError</snippet></ROW><ROW><id>5627013</id><snippet>TypeError</snippet></ROW><ROW><id>5627087</id><snippet>export PYTHONIOENCODING=utf-8
nohup python2.7 myProgram.py &amp;
</snippet></ROW><ROW><id>5627087</id><snippet>unicode_obj=u'\N{INFINITY}'
print(unicode_obj)    
</snippet></ROW><ROW><id>5627087</id><snippet>nohup python2.7 myProgram.py &gt; /tmp/test &amp;
</snippet></ROW><ROW><id>5627087</id><snippet>UnicodeEncodeError: 'ascii' codec can't encode character u'\u221e' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>5627087</id><snippet>export PYTHONIOENCODING=utf-8
nohup python2.7 myProgram.py &gt; /tmp/test &amp;
</snippet></ROW><ROW><id>5627087</id><snippet>∞
</snippet></ROW><ROW><id>5627130</id><snippet>pip-3.2 install hg+https://bitbucket.org/birkenfeld/sphinx
</snippet></ROW><ROW><id>5627165</id><snippet>FILE = open('report.pdf', "w")
</snippet></ROW><ROW><id>5627165</id><snippet>FILE = open('report.pdf', "wb")
</snippet></ROW><ROW><id>5627460</id><snippet>D.1  Introduction
D.2  Database Access: An Overview
D.3  Page Sets and Files
D.4  Indexing
D.5  Hashing
D.6  Pointer Chains
D.7  Compression Techniques
D.8  Summary
     Exercises
     References and Bibliography
</snippet></ROW><ROW><id>5627467</id><snippet>open</snippet></ROW><ROW><id>5627467</id><snippet>open</snippet></ROW><ROW><id>5627467</id><snippet>try</snippet></ROW><ROW><id>5627467</id><snippet>open</snippet></ROW><ROW><id>5627467</id><snippet>with</snippet></ROW><ROW><id>5627467</id><snippet>with</snippet></ROW><ROW><id>5627467</id><snippet>try</snippet></ROW><ROW><id>5627467</id><snippet>import os

if os.path.exists(fName):
   with open(fName, 'rb') as f:
       try:
           # do stuff
       except : # whatever reader errors you care about
           # handle error
</snippet></ROW><ROW><id>5627598</id><snippet>ImportError</snippet></ROW><ROW><id>5627598</id><snippet>ImportError</snippet></ROW><ROW><id>5627624</id><snippet>{0:f}</snippet></ROW><ROW><id>5627624</id><snippet>"I have {0:f} dollars on me".format(100.113)
</snippet></ROW><ROW><id>5627624</id><snippet>'I have 100.113000 dollars on me'
</snippet></ROW><ROW><id>5627788</id><snippet>{{ variable|stringformat:".3f" }}
</snippet></ROW><ROW><id>5628116</id><snippet>printcounter = 0

# Whatever a while loop is in Python
while (...):   
    ...
    if (printcounter == 1000000):
        print('Progress report...')
        printcounter = 0
    ...
    printcounter += 1
</snippet></ROW><ROW><id>5628127</id><snippet>self.assertTrue( issubclass(QuizForm, forms.Form) )
</snippet></ROW><ROW><id>5628488</id><snippet>Item</snippet></ROW><ROW><id>5628488</id><snippet>Weapon</snippet></ROW><ROW><id>5628488</id><snippet>MagicalItem</snippet></ROW><ROW><id>5628488</id><snippet>LegendaryItem</snippet></ROW><ROW><id>5628488</id><snippet>LegendaryMagicalWeaponItem</snippet></ROW><ROW><id>5628488</id><snippet>MagicalItem</snippet></ROW><ROW><id>5628488</id><snippet>mana</snippet></ROW><ROW><id>5628488</id><snippet>LegendaryItem</snippet></ROW><ROW><id>5628488</id><snippet>legacy()</snippet></ROW><ROW><id>5628488</id><snippet>damage</snippet></ROW><ROW><id>5628488</id><snippet>Item</snippet></ROW><ROW><id>5628488</id><snippet>// Base classes
function Item() {
   // some default values...
}
Item.prototype.physics = function (t) {/* physics stuff */}

function Magical(mana) {
  this.mana = mana;
}
function Weapon(damage) {
  this.damage = damage;
}
function Legendary(legacy) {
  this.legacy = function () {return legacy;};
}

// Actual world item class
function MyLegendaryMagicalSword(x,y) {
  this.x = x;
  this.y = y;
  Weapon.call(this, MyLegendaryMagicalSword.DAMAGE);
  Legendary.call(this, MyLegendaryMagicalSword.LORE);
  Magical.call(this, MyLegendaryMagicalSword.START_MANA);
}
// actual prototypal inheritance
MyLegendaryMagicalSword.prototype = new Item();
// class attributes
MyLegendaryMagicalSword.DAMAGE = 1000;
MyLegendaryMagicalSword.START_MANA = 10;
MyLegendaryMagicalSword.LORE = "An old sword.";

// Sword instance
var sword = new MyLegendaryMagicalSword(0, 0);
sword.physics(0);
sword.mana;
sword.legacy();
// etc

// probe object for supported interface
if (sword.hasOwnProperty("damage")) {
   // it's a weapon...
}
</snippet></ROW><ROW><id>5628488</id><snippet>&gt; sword
{ x: 0,
  y: 0,
  damage: 1000,
  legacy: [Function],
  mana: 10 }
</snippet></ROW><ROW><id>5628495</id><snippet>&gt;&gt;&gt; d = {'a': 0, 'b': 1, 'c': 2}
&gt;&gt;&gt; print d['c']
2
&gt;&gt;&gt; d['c'] = 9000
&gt;&gt;&gt; print d['c']
9000
</snippet></ROW><ROW><id>5628616</id><snippet>global IS_SETUP 
IS_SETUP = False
def setuplogger(filename = 'python.log', directory = None, format = 'L:%(name)s M:%(module)s T:%(asctime)s &gt; %(levelname)s: %(message)s'):
   global IS_SETUP
   if directory == None:
      fd, fname = tempfile.mkstemp()
      directory = os.path.dirname(fname)

   logging.basicConfig(filename = directory + '/' + filename, format = format)
   IS_SETUP = True

def getlog(logname, level = logging.INFO):
   '''returns a logger with logname that will print to filename and directoryname.'''
   if IS_SETUP == False:
      setuplogger()

   mylog = logging.getLogger(logname)

   mylog.setLevel(level)
   mylog.info('NEW LOGGER STARTED')
   return mylog
</snippet></ROW><ROW><id>5628729</id><snippet>hKeyboardHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, NULL, 0);
</snippet></ROW><ROW><id>5628859</id><snippet>def str2cords(scords):
    return [float(c) for c in scords.split(',')] #or maybe just scords.split(',') since float might mess up the exact cords?
</snippet></ROW><ROW><id>5628859</id><snippet>'/(-?\d+\.\d+),(-?\d+\.\d+)/'
</snippet></ROW><ROW><id>5629002</id><snippet>(?P&lt;body&gt; .. )</snippet></ROW><ROW><id>5629002</id><snippet>href=""</snippet></ROW><ROW><id>5629002</id><snippet>(?&lt;host&gt; .. )</snippet></ROW><ROW><id>5629002</id><snippet>avoid_hosts=[]</snippet></ROW><ROW><id>5629002</id><snippet>host</snippet></ROW><ROW><id>5629002</id><snippet>None</snippet></ROW><ROW><id>5629002</id><snippet>import re
import lxml.html
import lxml.html.clean

url_regexp = re.compile(r"""(?i)\b(?P&lt;body&gt;(?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|(?P&lt;host&gt;[a-z0-9.\-]+[.][a-z]{2,4}/))(?:[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|[^\s`!()\[\]{};:'".,&lt;&gt;?«»“”‘’]))""")

DOC = """&lt;html&gt;&lt;body&gt;
    http://foo.com/blah_blah
    http://foo.com/blah_blah/.
    http://www.extinguishedscholar.com/wpglob/?p=364.
    http://✪df.ws/1234
    rdar://1234
    rdar:/1234
    message://%3c330e7f840905021726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e
    What about &lt;mailto:gruber@daringfireball.net?subject=TEST&gt; (including brokets).
    bit.ly/foo
&lt;/body&gt;&lt;/html&gt;"""

tree = lxml.html.fromstring(DOC)
body = tree.find('body')
lxml.html.clean.autolink(body, [url_regexp], avoid_hosts=[])
print lxml.html.tostring(tree)
</snippet></ROW><ROW><id>5629002</id><snippet>&lt;html&gt;&lt;body&gt;
    &lt;a href="http://foo.com/blah_blah"&gt;http://foo.com/blah_blah&lt;/a&gt;
    &lt;a href="http://foo.com/blah_blah/"&gt;http://foo.com/blah_blah/&lt;/a&gt;.
    &lt;a href="http://www.extinguishedscholar.com/wpglob/?p=364"&gt;http://www.extinguishedscholar.com/wpglob/?p=364&lt;/a&gt;.
    &lt;a href="http://%C3%A2%C2%9C%C2%AAdf.ws/1234"&gt;http://â&#156;ªdf.ws/1234&lt;/a&gt;
    &lt;a href="rdar://1234"&gt;rdar://1234&lt;/a&gt;
    &lt;a href="rdar:/1234"&gt;rdar:/1234&lt;/a&gt;
    &lt;a href="message://%3c330e7f840905021726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e"&gt;message://%3c330e7f840905021726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e&lt;/a&gt;
    What about &lt;&lt;a href="mailto:gruber@daringfireball.net?subject=TEST"&gt;mailto:gruber@daringfireball.net?subject=TEST&lt;/a&gt;&gt;
    (including brackets).
    &lt;a href="bit.ly/foo"&gt;bit.ly/foo&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>5629050</id><snippet>OrderedDict({'a': 1, 'b':2, 'c':3})</snippet></ROW><ROW><id>5629050</id><snippet>dict</snippet></ROW><ROW><id>5629050</id><snippet>{...}</snippet></ROW><ROW><id>5629050</id><snippet>OrderedDict([('a', 1), ('b', 2), ('c', 3)])</snippet></ROW><ROW><id>5629275</id><snippet>os.listdir(".")</snippet></ROW><ROW><id>5629275</id><snippet>for name in os.listdir("."):
    if name.endswith(".txt"):
        print(name)
</snippet></ROW><ROW><id>5629275</id><snippet>a = [name for name in os.listdir(".") if name.endswith(".txt")]
</snippet></ROW><ROW><id>5629359</id><snippet>lex = lexicon(stuff)</snippet></ROW><ROW><id>5629359</id><snippet>lex.scan("north")</snippet></ROW><ROW><id>5629359</id><snippet>scan("north")</snippet></ROW><ROW><id>5629359</id><snippet>scan(lex, "north")</snippet></ROW><ROW><id>5629406</id><snippet>event.preventDefault();</snippet></ROW><ROW><id>5629406</id><snippet>$(document).ready(function() {
   $("a").click(function() {
       event.preventDefault();
       alert("hi");
       $.get("xhr_test", function(data) {
           alert(data);
       });
   });
});
&lt;a href=""&gt;Click here&lt;/a&gt;
</snippet></ROW><ROW><id>5629511</id><snippet>class env_form(forms.Form):
    env = forms.ChoiceField(choices=ENV, required=True)

class add_uRG(env_form):
    user = forms.CharField(max_length=50)
    group = forms.CharField(required=True)
    role = forms.CharField(required=True)

    def clean_user(self):
        post_user = self.cleaned_data['user']
        post_env = self.cleaned_data['env']
        c = User.objects.filter(user__contains=post_user, env__contains=post_env ).count()
        if (c == 0):
            raise forms.ValidationError(u"User Not Found.")
        else:
            user_info = User.objects.filter(user__contains=post_user).values('password').distinct().count()
            user_env = User.objects.filter(user__contains=post_user).values('env').distinct().count()
            if not (user_env == user_info):
                raise forms.ValidationError(u'User is using same password')
        return(post_user)


    def __init__(self, *args, **kwargs):
        super(env_form, self).__init__(*args, **kwargs)

class SomeOtherForm(env_form):
    some_field = forms.CharField()

    def __init__(self,*args,**kwargs):
        super(env_form, self).__init__(*args,**kwargs)
</snippet></ROW><ROW><id>5629559</id><snippet>play_game</snippet></ROW><ROW><id>5629559</id><snippet>def global_thermonuclear_war():
    print "Boom!"

while raw_input("Shall we play a game? [y|n] ") == 'y':
    global_thermonuclear_war()
</snippet></ROW><ROW><id>5629734</id><snippet>import itertools
import string

letter = string.lowercase
vowel  = "aeiouy"

def all_words(*args):
    return (''.join(letters) for letters in itertools.product(*args))

wordlist = list(all_words(vowel, letter, letter, "n", "o"))
</snippet></ROW><ROW><id>5629734</id><snippet>['aaano', 'aabno', 'aacno', 'aadno', 'aaeno', 'aafno' ... ]
</snippet></ROW><ROW><id>5629825</id><snippet>&gt;&gt;&gt; ks = set(random.sample(d, 2))
&gt;&gt;&gt; dict((k, list(ks &amp; set(d[k]))) for k in ks)
{'a': ['a', 'c'], 'c': ['a', 'c']}
</snippet></ROW><ROW><id>5629923</id><snippet>import urllib2
import BeautifulSoup
import string

badwords = set([
    'cup','cups',
    'clove','cloves',
    'tsp','teaspoon','teaspoons',
    'tbsp','tablespoon','tablespoons',
    'minced'
])

def cleanIngred(s):
    # remove leading and trailing whitespace
    s = s.strip()
    # remove numbers and punctuation in the string
    s = s.strip(string.digits + string.punctuation)
    # remove unwanted words
    return ' '.join(word for word in s.split() if not word in badwords)

def main():
    url = "http://allrecipes.com/Recipe/Slow-Cooker-Pork-Chops-II/Detail.aspx"
    data = urllib2.urlopen(url).read()
    bs = BeautifulSoup.BeautifulSoup(data)

    ingreds = bs.find('div', {'class': 'ingredients'})
    ingreds = [cleanIngred(s.getText()) for s in ingreds.findAll('li')]

    fname = 'PorkRecipe.txt'
    with open(fname, 'w') as outf:
        outf.write('\n'.join(ingreds))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5629923</id><snippet>olive oil
chicken broth
garlic,
paprika
garlic powder
poultry seasoning
dried oregano
dried basil
thick cut boneless pork chops
salt and pepper to taste
</snippet></ROW><ROW><id>5630275</id><snippet>import re
s = 'My name is Conrad, and blahblah@gmail.com is my email.'
domain = re.search("@[\w.]+", s)
print domain.group()
</snippet></ROW><ROW><id>5630275</id><snippet>@gmail.com
</snippet></ROW><ROW><id>5630275</id><snippet>@</snippet></ROW><ROW><id>5630275</id><snippet>[\w.]</snippet></ROW><ROW><id>5630275</id><snippet>\w</snippet></ROW><ROW><id>5630275</id><snippet>.</snippet></ROW><ROW><id>5630275</id><snippet>+</snippet></ROW><ROW><id>5630275</id><snippet>@</snippet></ROW><ROW><id>5630342</id><snippet>Usage: monkeyrunner [options] SCRIPT_FILE

    -s      MonkeyServer IP Address.
    -p      MonkeyServer TCP Port.
    -v      MonkeyServer Logging level (ALL, FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE, OFF)
</snippet></ROW><ROW><id>5630342</id><snippet>help.py</snippet></ROW><ROW><id>5630354</id><snippet>preexec_fn</snippet></ROW><ROW><id>5630354</id><snippet>subprocess.Popen(['openssl', ..., 'file:/dev/fd/12', ...], ...,
  preexec_fn=passtofd12(password), ...)
</snippet></ROW><ROW><id>5630481</id><snippet>schema</snippet></ROW><ROW><id>5630481</id><snippet>nonlocal schema</snippet></ROW><ROW><id>5630481</id><snippet>_f()</snippet></ROW><ROW><id>5630481</id><snippet>_f()</snippet></ROW><ROW><id>5630481</id><snippet>def _f(self, schema=schema, *args, **kwargs):
</snippet></ROW><ROW><id>5630497</id><snippet>print ", ".join(k for k, v in occurrences.items() if k != "consonants" and v &gt; 0),
print "were inserted"
print ", ".join(str(v) for k, v in occurrences.items() if k != "consonants" and v &gt; 0),
print "times respectively"
</snippet></ROW><ROW><id>5630497</id><snippet>a = [(k, str(v)) for k, v in occurrences.items() if k != "consonants" and v &gt; 0]
print ", ".join(x[0] for x in a), "were inserted",
print ", ".join(x[1] for x in a), "times respectively"
</snippet></ROW><ROW><id>5631433</id><snippet>import urllib
import urllib2
from scrapy.selector import HtmlXPathSelector
from scrapy.http import HtmlResponse

URL = "http://jackjones.bestsellershop.com/DE/jeans/clark-vintage-jos-217-sup/37246/37256"

url_handler = urllib2.build_opener()
urllib2.install_opener(url_handler)

handle = url_handler.open(URL)
response = handle.read()
handle.close()

html_response = HtmlResponse(URL).replace(body=response) # Problematic line
hxs = HtmlXPathSelector(html_response)

desc = hxs.select('//span[@id="attribute-content"]/text()')
desc_text = desc.extract()[0]
print desc_text
print desc_text.encode('utf-8')
</snippet></ROW><ROW><id>5631433</id><snippet>pdb</snippet></ROW><ROW><id>5631433</id><snippet>import urllib
import urllib2
from scrapy.selector import HtmlXPathSelector
from scrapy.http import HtmlResponse

URL = "http://jackjones.bestsellershop.com/DE/jeans/clark-vintage-jos-217-sup/37246/37256"

url_handler = urllib2.build_opener()
urllib2.install_opener(url_handler)

handle = url_handler.open(URL)
response = handle.read()
handle.close()

#html_response = HtmlResponse(URL).replace(body=response)
html_response = HtmlResponse(URL, body=response)
hxs = HtmlXPathSelector(html_response)

desc = hxs.select('//span[@id="attribute-content"]/text()')
desc_text = desc.extract()[0]
print desc_text
print desc_text.encode('utf-8')
</snippet></ROW><ROW><id>5631433</id><snippet>html_response = HtmlResponse(URL).replace(body=response)</snippet></ROW><ROW><id>5631433</id><snippet>html_response = HtmlResponse(URL, body=response)</snippet></ROW><ROW><id>5631433</id><snippet>replace()</snippet></ROW><ROW><id>5631433</id><snippet>replace()</snippet></ROW><ROW><id>5631638</id><snippet>file</snippet></ROW><ROW><id>5631819</id><snippet>Popen.subprocess</snippet></ROW><ROW><id>5631819</id><snippet>returncode</snippet></ROW><ROW><id>5631819</id><snippet>Popen.returncode 
  The child return code, set by poll() and wait() (and indirectly by communicate()). 
  A None value indicates that the process hasn’t terminated yet.

  A negative value -N indicates that the child was terminated by signal N (Unix only).
</snippet></ROW><ROW><id>5631819</id><snippet>import subprocess as sp
child = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)
streamdata = child.communicate()[0]
rc = child.returncode
</snippet></ROW><ROW><id>5631819</id><snippet>wait</snippet></ROW><ROW><id>5631910</id><snippet>for exploit in results['matches'][:5]:
        print '%s:' % (exploit['description'])
</snippet></ROW><ROW><id>5632084</id><snippet>json['translations']</snippet></ROW><ROW><id>5632084</id><snippet>translations = [x['translatedText'] for x in json['translations']]
</snippet></ROW><ROW><id>5632084</id><snippet>translations  = map(lambda x: x['translatedText'], json['translations'])
</snippet></ROW><ROW><id>5632224</id><snippet>...filter(or_(people.marriage_status!='married', people.marriage_status is None))
</snippet></ROW><ROW><id>5632224</id><snippet>...filter(or_(people.marriage_status!='married', people.marriage_status == None))
</snippet></ROW><ROW><id>5632224</id><snippet>is None</snippet></ROW><ROW><id>5632224</id><snippet>== None</snippet></ROW><ROW><id>5632224</id><snippet>SELECT people.name AS people_name, people.marriage_status AS people_marriage_status 
FROM people 
WHERE people.marriage_status IS NULL OR people.marriage_status != ?
</snippet></ROW><ROW><id>5632224</id><snippet>IS NULL</snippet></ROW><ROW><id>5632833</id><snippet>answer</snippet></ROW><ROW><id>5632833</id><snippet>for line in answerKey:
    answer = line.split()
</snippet></ROW><ROW><id>5632833</id><snippet>for line in studentExam:</snippet></ROW><ROW><id>5632833</id><snippet>answer</snippet></ROW><ROW><id>5632833</id><snippet>zip</snippet></ROW><ROW><id>5632833</id><snippet>for answerLine, studentLine in zip(answerKey, studentExam):
    answer = answerLine.split()
    studentAnswer = studentLine.split()
</snippet></ROW><ROW><id>5632833</id><snippet>answerKey.close()
studentExam.close()
</snippet></ROW><ROW><id>5633061</id><snippet>etree.strip_tags</snippet></ROW><ROW><id>5633061</id><snippet>from lxml import etree
d = etree.HTML('&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;b&gt;text1&lt;/b&gt; (&lt;span&gt;&lt;a href="#1"&gt;asdf&lt;/a&gt;text2&lt;/span&gt;)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;')
block = d.xpath('/html/body/p')[0]
# etree.strip_tags apparently takes a list of tags to strip, but it wasn't working for me
for tag in set(x.tag for x in block.iterdescendants() if x.tag != 'a'):
  etree.strip_tags(block,tag)

block.xpath('./text()|a')
</snippet></ROW><ROW><id>5633061</id><snippet>['text1', ' (', &lt;Element a at fa4a48&gt;, 'text2', ')']
</snippet></ROW><ROW><id>5633170</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(a[1])
{1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12}
</snippet></ROW><ROW><id>5633403</id><snippet>map</snippet></ROW><ROW><id>5633403</id><snippet>itertools.imap</snippet></ROW><ROW><id>5633403</id><snippet>class map(object)
 |  map(func, *iterables) --&gt; map object
 |  
 |  Make an iterator that computes the function using arguments from
 |  each of the iterables.  Stops when the shortest iterable is exhausted.
</snippet></ROW><ROW><id>5633403</id><snippet>map(...)
    map(function, sequence[, sequence, ...]) -&gt; list
</snippet></ROW><ROW><id>5633403</id><snippet>list</snippet></ROW><ROW><id>5633403</id><snippet>numwords = list(map(wordcount, lines))</snippet></ROW><ROW><id>5633835</id><snippet>__import__(attackerControlledString)</snippet></ROW><ROW><id>5633910</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>5633910</id><snippet>mechanize</snippet></ROW><ROW><id>5633910</id><snippet>possible_items</snippet></ROW><ROW><id>5633910</id><snippet>threading</snippet></ROW><ROW><id>5633910</id><snippet>multiprocessing</snippet></ROW><ROW><id>5633910</id><snippet>def select_item(br, form, listname, value, submit_form=None):
  br.select_form(form)
  br[listname] = [value]
  return br.submit(type="submit", name=(submit_form or form))
</snippet></ROW><ROW><id>5633910</id><snippet>def get_name(br, formname, label):
br.select_form(formname)
  return str(br.get_value_by_label(label)).strip("[]")
</snippet></ROW><ROW><id>5634030</id><snippet>with open("my.file", "r+") as f:
    [f.readline() for x in range(100)]
    f.truncate()
</snippet></ROW><ROW><id>5634030</id><snippet>with open("my.file", "r+") as f:
    for x in xrange(100):
        f.readline()
    f.truncate()
</snippet></ROW><ROW><id>5634098</id><snippet>\r\n</snippet></ROW><ROW><id>5634098</id><snippet>\n</snippet></ROW><ROW><id>5634098</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>5634098</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>5634098</id><snippet>{{greeting.content|linebreaks}}</snippet></ROW><ROW><id>5634098</id><snippet>white-space:pre</snippet></ROW><ROW><id>5634157</id><snippet>grid</snippet></ROW><ROW><id>5634157</id><snippet>sticky="ew"</snippet></ROW><ROW><id>5634272</id><snippet>super()</snippet></ROW><ROW><id>5634272</id><snippet>class UpperBase(Base):
    def __init__(self, name):
        if not name_valid(name):
            raise ValueError()
        super(UpperBase, self).__init__(name)
</snippet></ROW><ROW><id>5634324</id><snippet>cleaned_data</snippet></ROW><ROW><id>5634324</id><snippet>is_valid()</snippet></ROW><ROW><id>5634324</id><snippet>cd = form.cleaned_data</snippet></ROW><ROW><id>5634324</id><snippet>if</snippet></ROW><ROW><id>5634350</id><snippet>def isPrime(p):
    if(p==2): return True
    if(not(p&amp;1)): return False
    return pow(2,p-1,p)==1
</snippet></ROW><ROW><id>5634363</id><snippet>max([option['type'] for option in programmes_by_type], key=len)
</snippet></ROW><ROW><id>5634739</id><snippet>url</snippet></ROW><ROW><id>5634739</id><snippet>import hashlib
import os

def url2filename(url, ext=''):
    return hashlib.md5(url).hexdigest() + ext # anything that removes '\/'

# ...
with open(os.path.join("/head2", url2filename(url, '.jpg')), 'wb') as f:
     f.write(body)
print "file saved"
</snippet></ROW><ROW><id>5634739</id><snippet>'/head2'</snippet></ROW><ROW><id>5634739</id><snippet>urllib.urlretrieve()</snippet></ROW><ROW><id>5634830</id><snippet>&gt;&gt;&gt; a = 12345.6789
&gt;&gt;&gt; b = int(a*10000)
&gt;&gt;&gt; b
123456789
&gt;&gt;&gt; c = b % 1000000
&gt;&gt;&gt; c
456789
</snippet></ROW><ROW><id>5634861</id><snippet>import re
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(my_html)
nodes_to_censor = soup.findAll(text=re.compile('.*SECRET.*'))
for node in nodes_to_censor:
    node.replaceWith('###')
</snippet></ROW><ROW><id>5635649</id><snippet>NewsCategory</snippet></ROW><ROW><id>5635649</id><snippet>categories = NewsCategory.objects.all()
user_preferences = [item.id for item in Profile.preference.all()]
</snippet></ROW><ROW><id>5635649</id><snippet>user_preferences</snippet></ROW><ROW><id>5635649</id><snippet>&lt;div id="c_b"&gt;
{% for c in categories %}
    &lt;input type="checkbox" name="category[]" id="id_{{ c.category }}" value="{{ c.id }}" {% if c.id in user_preferences %}checked="checked"{% endif %} /&gt;
    &lt;label for="id_{{ c.id }}"&gt;{{ c.category }}&lt;/label&gt;
{% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>5635649</id><snippet>from django.db import transaction

@transaction.commit_manually
def add_preferences(user, preferences):
  user.preference.clear()
  for pref in preferences:
    user.preference.add(pref)
  transaction.commit()
</snippet></ROW><ROW><id>5635762</id><snippet>import re

t = 'a b c 100 200'

f = lambda x: str(int(x.group(0)) / 10)
re.sub('\d+', f, t)

# returns 'a b c 10 20'
</snippet></ROW><ROW><id>5635765</id><snippet># decorator to make system call methods safe from EINTR
def systemcall(meth):
    # have to import this way to avoid a circular import
    from _socket import error as SocketError
    def systemcallmeth(*args, **kwargs):
        while 1:
            try:
                    rv = meth(*args, **kwargs)
            except EnvironmentError as why:
                if why.args and why.args[0] == EINTR:
                    continue
                else:
                    raise
            except SocketError as why:
                if why.args and why.args[0] == EINTR:
                    continue
                else:
                    raise
            else:
                break
        return rv
    return systemcallmeth
</snippet></ROW><ROW><id>5636203</id><snippet>pdb.runcall</snippet></ROW><ROW><id>5636203</id><snippet>import pdb
pdb.runcall(foo.bar, x)
</snippet></ROW><ROW><id>5636463</id><snippet>class inheritedclass(initialclass):
    def __init__(self):
        initialclass.__init__(self)
        self.attr3 = 'three'
</snippet></ROW><ROW><id>5637017</id><snippet>svn status | grep "^[AMD]" | sed 's/^.\{8\}//' | xargs zcvf My.tar.gz
</snippet></ROW><ROW><id>5637017</id><snippet>grep</snippet></ROW><ROW><id>5637017</id><snippet>sed</snippet></ROW><ROW><id>5637105</id><snippet>Scripts/</snippet></ROW><ROW><id>5637105</id><snippet>__init__.py</snippet></ROW><ROW><id>5637105</id><snippet>from Scripts import script1

map = {"One" : script1.function_one, "Two" : script1.function_two]

def return_mapping(str):
    return map[str]
</snippet></ROW><ROW><id>5637279</id><snippet>#**************************************************************************#
# Set up a graph. A click creates a blue box. More blue boxes can be made
# by choosing "Make a new box" from right/click menu.
#**************************************************************************#

import wx
import matplotlib
matplotlib.use('WX')
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigCanv
from pylab import *

#**************************************************************************#
class MainCanvas(wx.Frame):
    """ Class to set up graph """
    def __init__(self):
        wx.Frame.__init__(self,None,-1, 'Make Blue Boxes',size=(550,350))
        self.Bind(wx.EVT_CLOSE, self.deleteAll)

    #**********************************************************************#
    def deleteAll(self,event):
        sys.exit()

    #**********************************************************************#
    def setupGraph(self):
        """ Set up window and graph """
        self.definePlot() 
        self.canvas = FigCanv(self, -1, self.figure)
        self.setSizer() 

    #**********************************************************************#
    def definePlot(self):
        """ Define attributes of graph """
        self.SetBackgroundColour(wx.NamedColor("WHITE"))
        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)

    #**********************************************************************#
    def setSizer(self):
        """ Set the size of the graph """
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        self.SetSizer(self.sizer)
        self.Fit()

#**************************************************************************#
class BlueBox(MainCanvas):
    """ Class to set up BlueBox """
    def __init__(self):
        MainCanvas.__init__(self)

    #**********************************************************************#
    def setupBlueBox(self):
        """ Blue box set up """
        self.blueBox = patches.Rectangle((0, 0), 0.05, 0.05,  
                fc = "Blue", visible = False, zorder = 3)
        # Set zorder so new boxes are in front of old
        if len(self.listDT)&gt;1: 
            oldz = self.listDT[len(self.listDT)-2].blueBox.get_zorder() + 3
            self.listDT[len(self.listDT)-1].blueBox.set_zorder(oldz)

        self.axes.add_patch(self.blueBox)


    #**********************************************************************#      
    def onPick(self, event):
        """ Behavior when graph is clicked """
        # Refresh BlueBox position and coordinate text
        self.refreshBlueBox(event)    
        # Set the current BlueBox visible
        self.listDT[len(self.listDT)-1].setVisible()

    #**********************************************************************#
    def refreshBlueBox(self, event):
        """ Blue box refresh    """
        # Center the BlueBox (Point Box) over the mouse click location
        self.blueBox.set_x(event.xdata - .5 * self.blueBox.get_width())
        self.blueBox.set_y(event.ydata - .5 * self.blueBox.get_height())

    #**********************************************************************#
    def setVisible(self):
        """ Make BlueBox visible and refresh canvas """
        self.blueBox.set_visible(True)
        self.figure.canvas.draw()

    #**********************************************************************#
    def setGraphAttributes(self, axes, figure, listDT):
        """ Tell each BlueBox about the graph attributes it needs """
        self.axes = axes
        self.figure = figure
        self.listDT = listDT


#**************************************************************************#
class MyPopupMenu(BlueBox):
    """ Class to handle right clicks """
    def __init__(self):
        BlueBox.__init__(self)

    #**********************************************************************#
    def setup(self):
        """ Set up graph and BlueBox """
        self.setupGraph()
        # Bind right clicks to open the popup menu
        self.canvas.Bind(wx.EVT_RIGHT_DOWN,
                self.createPopupMenu)

        # Create lists for BlueBoxs and binding IDs
        self.listDT = []
        self.listBID = []

        self.popupCreateNew = wx.NewId()
        self.menu = wx.Menu()
        self.cn = self.menu.Append(self.popupCreateNew, 
                "Make a new box")
        self.Bind(wx.EVT_MENU, self.createNew, self.cn)

        # Make the first BlueBox
        self.newBox()


    #**********************************************************************#
    def createPopupMenu(self, event):
        """ Create all parts of the right-click popup menu """
        self.PopupMenu(self.menu)

    #**********************************************************************#
    def newBox(self):
        """ Make a new BlueBox """
        self.listDT.append(BlueBox())
        self.listDT[len(self.listDT)-1].setGraphAttributes(self.axes, 
                self.figure, self.listDT)
        self.listDT[len(self.listDT)-1].setupBlueBox()
        self.listBID.append(self.figure.canvas.mpl_connect('button_press_event', 
                self.listDT[len(self.listDT)-1].onPick)) 

    #**********************************************************************#
    def createNew(self, event):
        """ Create a new BlueBox """
        event.Skip()
        self.newBox()
        if len(self.listBID) &gt; 1: 
            self.figure.canvas.mpl_disconnect(self.listBID[len(self.listBID)-2])


#**************************************************************************#
class app(wx.App):
    """ Create and show all """
    def OnInit(self):
        self.mpm = MyPopupMenu()
        self.mpm.setup()
        self.frame = self.mpm.Show()        
        return True


#**************************************************************************#
# Run the program
#**************************************************************************#
app = app(0)
app.MainLoop()
</snippet></ROW><ROW><id>5637673</id><snippet>ulimit -s</snippet></ROW><ROW><id>5637673</id><snippet>pmap</snippet></ROW><ROW><id>5637850</id><snippet>OneToOneField(User, related_name='profile')</snippet></ROW><ROW><id>5637850</id><snippet>Post.objects.select_related('author__profile')</snippet></ROW><ROW><id>5638110</id><snippet>my @input = qw(abducts abe abeam abel abele);
my @output = grep { not /(\w).*\1/ } @input;
</snippet></ROW><ROW><id>5638110</id><snippet>@input</snippet></ROW><ROW><id>5638110</id><snippet>grep</snippet></ROW><ROW><id>5638110</id><snippet>-v</snippet></ROW><ROW><id>5638626</id><snippet>text(1,1,'foobar',rasterized=True)
</snippet></ROW><ROW><id>5638688</id><snippet>complete_[name]</snippet></ROW><ROW><id>5638688</id><snippet>_complete_path(path)</snippet></ROW><ROW><id>5638688</id><snippet>import os
import re
import readline

COMMANDS = ['extra', 'extension', 'stuff', 'errors',
            'email', 'foobar', 'foo']
RE_SPACE = re.compile('.*\s+$', re.M)

class Completer(object):

    def _listdir(self, root):
        "List directory 'root' appending the path separator to subdirs."
        res = []
        for name in os.listdir(root):
            path = os.path.join(root, name)
            if os.path.isdir(path):
                name += os.sep
            res.append(name)
        return res

    def _complete_path(self, path=None):
        "Perform completion of filesystem path."
        if not path:
            return self._listdir('.')
        dirname, rest = os.path.split(path)
        tmp = dirname if dirname else '.'
        res = [os.path.join(dirname, p)
                for p in self._listdir(tmp) if p.startswith(rest)]
        # more than one match, or single match which does not exist (typo)
        if len(res) &gt; 1 or not os.path.exists(path):
            return res
        # resolved to a single directory, so return list of files below it
        if os.path.isdir(path):
            return [os.path.join(path, p) for p in self._listdir(path)]
        # exact file match terminates this completion
        return [path + ' ']

    def complete_extra(self, args):
        "Completions for the 'extra' command."
        if not args:
            return self._complete_path('.')
        # treat the last arg as a path and complete it
        return self._complete_path(args[-1])

    def complete(self, text, state):
        "Generic readline completion entry point."
        buffer = readline.get_line_buffer()
        line = readline.get_line_buffer().split()
        # show all commands
        if not line:
            return [c + ' ' for c in COMMANDS][state]
        # account for last argument ending in a space
        if RE_SPACE.match(buffer):
            line.append('')
        # resolve command to the implementation function
        cmd = line[0].strip()
        if cmd in COMMANDS:
            impl = getattr(self, 'complete_%s' % cmd)
            args = line[1:]
            if args:
                return (impl(args) + [None])[state]
            return [cmd + ' '][state]
        results = [c + ' ' for c in COMMANDS if c.startswith(cmd)] + [None]
        return results[state]

comp = Completer()
# we want to treat '/' as part of a word, so override the delimiters
readline.set_completer_delims(' \t\n;')
readline.parse_and_bind("tab: complete")
readline.set_completer(comp.complete)
raw_input('Enter section name: ')
</snippet></ROW><ROW><id>5638688</id><snippet>% python complete.py 
Enter section name: ext&lt;tab&gt;
extension extra
Enter section name: extra foo&lt;tab&gt;
foo.py foo.txt foo/
Enter section name: extra foo/&lt;tab&gt;
foo/bar.txt foo/baz.txt
Enter section name: extra foo/bar.txt
</snippet></ROW><ROW><id>5638688</id><snippet>/</snippet></ROW><ROW><id>5638688</id><snippet>% python complete.py
Enter section name: extra /Use&lt;tab&gt;
/Users/.localized  /Users/Shared/  /Users/user1 /Users/user2
Enter section name: extra /Users/use&lt;tab&gt;
/Users/user1  /Users/user2
</snippet></ROW><ROW><id>5638868</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label="New")
        self.button.Bind(wx.EVT_BUTTON, self.OnButton)
        self.buttons = []
        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)
        self.panel.SetSizerAndFit(self.sizer)
        self.Show()

    def OnButton(self, e):
        button = wx.Button(self.panel, label=str(len(self.buttons)))
        self.buttons.append(button)
        self.sizer.Insert(len(self.sizer.Children) - 1, button)
        self.sizer.Layout()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>5639025</id><snippet>User</snippet></ROW><ROW><id>5639626</id><snippet>if normalize:
    a = (a - mean(a)) / (std(a) * len(a))
    v = (v - mean(v)) /  std(v)
</snippet></ROW><ROW><id>5639626</id><snippet>len(a)</snippet></ROW><ROW><id>5639626</id><snippet>(len(a)-1)</snippet></ROW><ROW><id>5640137</id><snippet>NULL</snippet></ROW><ROW><id>5640137</id><snippet>PyNone</snippet></ROW><ROW><id>5640354</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>5640354</id><snippet>{% load static %}
{% get_static_prefix as STATIC_PREFIX %}
&lt;head&gt;
&lt;link rel="stylesheet" href="{{ STATIC_PREFIX }}/yourpath/your.css" /&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>5640354</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>5640494</id><snippet>return HttpResponse("")
</snippet></ROW><ROW><id>5640494</id><snippet>return HttpResponse("OK")
</snippet></ROW><ROW><id>5640512</id><snippet>import numpy as np
N = int(1e6)
a = np.random.uniform(-5,5,size=(N,))
standard_deviation = np.std(a)
</snippet></ROW><ROW><id>5640701</id><snippet>set.difference</snippet></ROW><ROW><id>5640701</id><snippet>result = [a for a in A if a not in subset_of_A]
</snippet></ROW><ROW><id>5640701</id><snippet>subset_of_A</snippet></ROW><ROW><id>5640701</id><snippet>set</snippet></ROW><ROW><id>5640701</id><snippet>set</snippet></ROW><ROW><id>5640701</id><snippet>A = [6, 7, 8, 9, 10, 11, 12]
subset_of_A = set([6, 9, 12]) # the subset of A

result = [a for a in A if a not in subset_of_A]
</snippet></ROW><ROW><id>5640733</id><snippet>setattr()</snippet></ROW><ROW><id>5640733</id><snippet>attributeList = (('Name',    'name',    'name'),
                 ('Version', 'version', 'revision'))

for title, obj_attribute, dict_key in attributeList:
    obj_value = getattr(obj, obj_attribute)
    adict_value = adict[dict_key]

    if obj_value == adict_value:
        msg.append('%s is the same' % (obj_value))
    else:
        msg.append('%s was updated from %s to %s' % (title, obj_value, adict_value))

        setattr(obj, obj_attribute, adict_value)
</snippet></ROW><ROW><id>5640868</id><snippet>Message-Id</snippet></ROW><ROW><id>5641125</id><snippet>str.join</snippet></ROW><ROW><id>5641125</id><snippet>result = ' '.join(e)
print result
</snippet></ROW><ROW><id>5641125</id><snippet>import string
def create_word(suffix):
   return ' '.join(i + suffix for i in string.ascii_lowercase)
</snippet></ROW><ROW><id>5641178</id><snippet>M.search(None, 'ALL')</snippet></ROW><ROW><id>5641178</id><snippet>M.sort(search_critera, 'UTF-8', 'ALL')</snippet></ROW><ROW><id>5641178</id><snippet>search_criteria</snippet></ROW><ROW><id>5641178</id><snippet>search_criteria = 'DATE' #Ascending, most recent email last
search_criteria = 'REVERSE DATE' #Descending, most recent email first

search_criteria = '[REVERSE] sort-key' #format for sorting
</snippet></ROW><ROW><id>5641178</id><snippet>sort-key</snippet></ROW><ROW><id>5641178</id><snippet>"ARRIVAL" / "CC" / "DATE" / "FROM" / "SIZE" / "SUBJECT" / "TO"</snippet></ROW><ROW><id>5641178</id><snippet>US-ASCII</snippet></ROW><ROW><id>5641178</id><snippet>UTF-8</snippet></ROW><ROW><id>5641178</id><snippet>ALL</snippet></ROW><ROW><id>5641629</id><snippet>#!/usr/bin/env python
print 'Content-Type: text/html'
print
</snippet></ROW><ROW><id>5641629</id><snippet>Content-Type</snippet></ROW><ROW><id>5641629</id><snippet>import cgi
import cgitb
cgitb.enable() # allows error tracebacks
</snippet></ROW><ROW><id>5641629</id><snippet>cgitb</snippet></ROW><ROW><id>5641712</id><snippet>initial = "aSuffixbSuffixcSuffix"

final = initial.replace("Suffix", "Suffix ")
print(final)
</snippet></ROW><ROW><id>5641764</id><snippet>posts = Post.objects.filter(...)[:20]

post_id_map = {}
for post in posts:
    post_id_map[post.id] = post
    # Iteration causes the queryset to be evaluated and cached.
    # We can therefore annotate instances, e.g. with a custom `tag_list`.
    # Note: Don't assign to `tags`, because that would result in an update.
    post.tag_list = []

# We'll now need all relations between Post and Tag. 
# The auto-generated model that contains this data is `Post.tags.through`.
for t in Post.tags.through.select_related('tag').filter(post_id__in=post):
    post_id_map[t.post_id].tag_list.append(t.tag)

# Now you can iterate over `posts` again and use `tag_list` instead of `tags`.
</snippet></ROW><ROW><id>5641764</id><snippet>select_tags()</snippet></ROW><ROW><id>5641852</id><snippet>def format_output(self, rendered_widgets):
        return u'%s - %s - %s' % \
            (rendered_widgets[0], rendered_widgets[1], rendered_widgets[2])
</snippet></ROW><ROW><id>5642146</id><snippet>value|striptags
</snippet></ROW><ROW><id>5642146</id><snippet>strip_tags</snippet></ROW><ROW><id>5642146</id><snippet>django.utils.html</snippet></ROW><ROW><id>5642146</id><snippet>from django.utils.html import strip_tags
message = strip_tags(form.cleaned_data['message'])
</snippet></ROW><ROW><id>5642174</id><snippet>mahotas.imread</snippet></ROW><ROW><id>5642174</id><snippet>sudo apt-get install libfreeimage3
</snippet></ROW><ROW><id>5642174</id><snippet>libfreeimage.so</snippet></ROW><ROW><id>5642174</id><snippet>/usr/lib</snippet></ROW><ROW><id>5642477</id><snippet>def enumerate_month_dates(start_date, end_date):
    current = start_date
    while current &lt;= end_date:
        if current.month &gt;= 12:
            next = datetime.date(current.year + 1, 1, 1)
        else:
            next = datetime.date(current.year, current.month + 1, 1)
        last = min(next - datetime.timedelta(1), end_date)
        yield current, last
        current = next
</snippet></ROW><ROW><id>5642480</id><snippet>array2d[ix_(nonzeroValidIndices[0],nonzeroValidIndices[1])]
</snippet></ROW><ROW><id>5642480</id><snippet>nonzeroValidCoordinates</snippet></ROW><ROW><id>5642480</id><snippet>unzip = lambda l: [list(li) for li in zip(*l)]
array2d[ix_(unzip(nonzeroValidCoordinates))]
</snippet></ROW><ROW><id>5642525</id><snippet>__gt__</snippet></ROW><ROW><id>5642525</id><snippet>__lt__</snippet></ROW><ROW><id>5642525</id><snippet>x = np.arange(9).reshape(3,3)
print x &gt; 5
</snippet></ROW><ROW><id>5642525</id><snippet>array([[False, False, False],
       [False, False, False],
       [ True,  True,  True]], dtype=bool)
</snippet></ROW><ROW><id>5642525</id><snippet>if x &gt; 5:</snippet></ROW><ROW><id>5642525</id><snippet>x</snippet></ROW><ROW><id>5642525</id><snippet>x[x&gt;5]</snippet></ROW><ROW><id>5642525</id><snippet>[6 7 8]</snippet></ROW><ROW><id>5642525</id><snippet>numpy.where</snippet></ROW><ROW><id>5642525</id><snippet>True</snippet></ROW><ROW><id>5642870</id><snippet>cursor.commit()</snippet></ROW><ROW><id>5642887</id><snippet>from xml.sax.handler import ContentHandler
</snippet></ROW><ROW><id>5642927</id><snippet>term -&gt; index</snippet></ROW><ROW><id>5642927</id><snippet>corpus = dict(((term, index) for index, term in enumerate(sorted(all_words))))
</snippet></ROW><ROW><id>5642927</id><snippet>0</snippet></ROW><ROW><id>5642927</id><snippet>num_words = len(corpus)
fvs = [[0]*num_words for _ in docs]
</snippet></ROW><ROW><id>5642927</id><snippet>for i, doc_terms in enumerate(docs):
    fv = fvs[i]
    for term in doc_terms:
        fv[corpus[term]] += 1
</snippet></ROW><ROW><id>5643181</id><snippet>os.chdir(newDir)</snippet></ROW><ROW><id>5643181</id><snippet>win32serviceutil.HandleCommandLine</snippet></ROW><ROW><id>5643237</id><snippet>lines</snippet></ROW><ROW><id>5643237</id><snippet>for i in lines:
    outfile.write(" ".join(i) + "\n")
</snippet></ROW><ROW><id>5643237</id><snippet>.join()</snippet></ROW><ROW><id>5643237</id><snippet>i</snippet></ROW><ROW><id>5643237</id><snippet>" "</snippet></ROW><ROW><id>5643237</id><snippet>"\n"</snippet></ROW><ROW><id>5643237</id><snippet>lines = open("file.txt", "r").readlines()
outfile = open("file.2txt", "w")
lines.sort(key=lambda x: x.split()[5], reverse=True)
for i in lines:
    outfile.write(i)
</snippet></ROW><ROW><id>5643293</id><snippet>find_withtag</snippet></ROW><ROW><id>5643315</id><snippet>import ast

for elem in doc.findall('Default_Config/Lanestat'):
    if elem.tag == 'Lanestat':
        val = ast.literal_eval(elem.text)
        print type(val), val
        print elem.tag, val[1]
</snippet></ROW><ROW><id>5643315</id><snippet>&lt;type 'dict'&gt; {1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12}
Lanestat 2
</snippet></ROW><ROW><id>5643315</id><snippet>from compiler import parse
from compiler.ast import *

def literal_eval(node_or_string):
    """
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the  
    following Python literal structures: strings, numbers, tuples, 
    lists, dicts, booleans, and None.
    """
    _safe_names = {'None': None, 'True': True, 'False': False}
    if isinstance(node_or_string, basestring):
        node_or_string = parse(node_or_string, mode='eval')
    if isinstance(node_or_string, Expression):
        node_or_string = node_or_string.node
    def _convert(node):
        if isinstance(node, Const) and isinstance(node.value,
                (basestring, int, float, long, complex)):
             return node.value
        elif isinstance(node, Tuple):
            return tuple(map(_convert, node.nodes))
        elif isinstance(node, List):
            return list(map(_convert, node.nodes))
        elif isinstance(node, Dict):
            return dict((_convert(k), _convert(v)) for k, v
                        in node.items)
        elif isinstance(node, Name):
            if node.name in _safe_names:
                return _safe_names[node.name]
        elif isinstance(node, UnarySub):
            return -_convert(node.expr)
        raise ValueError('malformed string')
    return _convert(node_or_string)

print literal_eval("(1, [-2, 3e10, False, True, None, {'a': ['b']}])")
</snippet></ROW><ROW><id>5643315</id><snippet>(1, [-2, 30000000000.0, False, True, None, {'a': ['b']}])
</snippet></ROW><ROW><id>5643354</id><snippet>def __cmp__(gem, other):
    if (gem.value / gem.carot) &lt; (other.value / other.carot):
        return -1
    elif (gem.value / gem.carot) &gt; (other.value / other.carot): 
        return 1
    else:
        return 0
</snippet></ROW><ROW><id>5643461</id><snippet>(r'^login/$', 'django.contrib.auth.views.login'),
</snippet></ROW><ROW><id>5643461</id><snippet>&lt;html&gt;
&lt;head&gt; &lt;title&gt;User Login&lt;/title&gt; &lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;User Login&lt;/h1&gt;
{% if form.errors %}
&lt;p&gt;Your username and password didn't match!
Please try again!&lt;/p&gt;
{% endif %}
&lt;form method="post" action="."&gt;
{% csrf_token %}
&lt;p&gt;&lt;label for="id_username"&gt;Username:&lt;/label&gt;{{ form.username }}&lt;/p&gt;
&lt;p&gt;&lt;label for="id_password"&gt;Password:&lt;/label&gt;{{ form.password }}&lt;/p&gt;
&lt;input type="hidden" name="next" value="/" /&gt;
&lt;input type="submit" value="login" /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>5643622</id><snippet>~\.ipython\ipythonrc</snippet></ROW><ROW><id>5643622</id><snippet># colors - Coloring option for prompts and traceback printouts.

# Currently available schemes: NoColor, Linux, LightBG.

# This option allows coloring the prompts and traceback printouts. This
# requires a terminal which can properly handle color escape sequences. If you
# are having problems with this, use the NoColor scheme (uses no color escapes
# at all).

# The Linux option works well in linux console type environments: dark
# background with light fonts.

# LightBG is similar to Linux but swaps dark/light colors to be more readable
# in light background terminals.

# keep uncommented only the one you want:
colors Linux
#colors LightBG
#colors NoColor
</snippet></ROW><ROW><id>5643728</id><snippet>xmlNodePtr</snippet></ROW><ROW><id>5643728</id><snippet>libxml2.so.2</snippet></ROW><ROW><id>5643728</id><snippet>xmlNode</snippet></ROW><ROW><id>5643728</id><snippet>xmlNode</snippet></ROW><ROW><id>5643728</id><snippet>xmlNodeDump</snippet></ROW><ROW><id>5643728</id><snippet>call xmlNodeDump(a_pointer)</snippet></ROW><ROW><id>5643728</id><snippet>xmlNodeDump</snippet></ROW><ROW><id>5643728</id><snippet>gdb.Value</snippet></ROW><ROW><id>5643728</id><snippet>dereference</snippet></ROW><ROW><id>5643728</id><snippet>cast</snippet></ROW><ROW><id>5643775</id><snippet>a.printerthing()
</snippet></ROW><ROW><id>5643794</id><snippet>pypm install mysql-python</snippet></ROW><ROW><id>5643794</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>5643794</id><snippet>$PATH</snippet></ROW><ROW><id>5643794</id><snippet>sudo /Library/Frameworks/Python.framework/Versions/2.7/Resources/Scripts/uninstall
</snippet></ROW><ROW><id>5643794</id><snippet>sudo pythonselect 2.6</snippet></ROW><ROW><id>5643794</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>5643915</id><snippet>template &lt; typename Real, unsigned int l, unsigned int m, unsigned int n &gt;
__device__ __host__ 
void matmul(const Real *a,
            const Real *b,
                  Real *c)
{
    for(int i=0; i&lt;l; i++) {
        for(int j=0; j&lt;n; j++) {
            Real dotprod = Real(0);
               for(int k=0; k&lt;m; k++) {
                   dotprod += a[idx2c(i,k,l)] * b[idx2c(k,j,m)];
                }
                c[idx2c(i,j,l)] = dotprod;
           }
     }
}
</snippet></ROW><ROW><id>5644089</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>5644089</id><snippet>import ex25
sentence = "All good things come to those who wait."
words = ex25.break_words(sentence) 
words
</snippet></ROW><ROW><id>5644089</id><snippet>words</snippet></ROW><ROW><id>5644221</id><snippet>from google.appengine.api.users import User
</snippet></ROW><ROW><id>5644221</id><snippet>from google.appengine.api.users import *
</snippet></ROW><ROW><id>5644221</id><snippet>from google.appengine.api import users
</snippet></ROW><ROW><id>5644221</id><snippet>users.User</snippet></ROW><ROW><id>5644857</id><snippet>open(bla, 'r', encoding="utf-16")</snippet></ROW><ROW><id>5645133</id><snippet>import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings(record=True) as w:
    # Cause all warnings to always be triggered.
    warnings.simplefilter("always")
    # Trigger a warning.
    fxn()
    # Verify some things
    assert len(w) == 1
    assert issubclass(w[-1].category, DeprecationWarning)
    assert "deprecated" in str(w[-1].message)
</snippet></ROW><ROW><id>5645469</id><snippet>cgi-bin</snippet></ROW><ROW><id>5645469</id><snippet>#!/usr/bin/env python
import cgi; cgi.test()
</snippet></ROW><ROW><id>5645469</id><snippet>test.py</snippet></ROW><ROW><id>5645469</id><snippet>cgi-bin</snippet></ROW><ROW><id>5645469</id><snippet>$ chmod a+rx test.py
</snippet></ROW><ROW><id>5645469</id><snippet>.py</snippet></ROW><ROW><id>5645469</id><snippet>.cgi</snippet></ROW><ROW><id>5645487</id><snippet>y=x[1:-1].split(",")
</snippet></ROW><ROW><id>5645487</id><snippet>&gt;&gt;&gt; x="(174,185)"
&gt;&gt;&gt; map(int, x[1:-1].split(','))
[174, 185]
</snippet></ROW><ROW><id>5645487</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(x)
(174, 185)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5646296</id><snippet>+</snippet></ROW><ROW><id>5646296</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>5646296</id><snippet>tail</snippet></ROW><ROW><id>5646296</id><snippet>import lxml.html
root = lxml.html.fromstring('''
&lt;table class="results"&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=".."&gt;link&lt;/a&gt;&lt;span&gt;2nd Mar 2011&lt;/span&gt;&lt;br&gt;XYZ Consultancy Ltd&lt;br&gt;
       &lt;div&gt;....&lt;/div&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
''')
for br_with_tail in root.cssselect('table.results &gt; tr &gt; td &gt; a + span + br'):
    print br_with_tail.tail
    # =&gt; XYZ Consultancy Ltd
</snippet></ROW><ROW><id>5646606</id><snippet>print "A" * 10
</snippet></ROW><ROW><id>5646606</id><snippet>print("A"*10)
</snippet></ROW><ROW><id>5646959</id><snippet>fron jinja2 import WHATEVER
</snippet></ROW><ROW><id>5646959</id><snippet>sys.path.append()</snippet></ROW><ROW><id>5647506</id><snippet>import os
result = [[urlparse(u).netloc] for u in 
          file(os.path.abspath('S:\Dev\Python\BDDtest.csv'))]
</snippet></ROW><ROW><id>5647506</id><snippet>import ntpath
result = [[urlparse(u).netloc] for u in 
          file(ntpath.abspath('S:\Dev\Python\BDDtest.csv'))]
</snippet></ROW><ROW><id>5647655</id><snippet>lxml.etree</snippet></ROW><ROW><id>5647655</id><snippet>git</snippet></ROW><ROW><id>5647748</id><snippet>from django.contrib.auth.models import User as DjangoUser
from django.db import models

class ClientDetails(models.Model):
   user = models.OneToOneField(DjangoUser)
   address = models.ForeignKey(Address, blank=True, null=True)
</snippet></ROW><ROW><id>5647941</id><snippet>db = QSqlDatabase.addDatabase('QODBC')
#TODO: Add support for trusted connections.
#("Driver={SQLServer};Server=Your_Server_Name;Database=Your_Database_Name;Trusted_Connection=yes;")
db.setDatabaseName('DRIVER={SQL Server};SERVER=%s;DATABASE=%s;UID=%s;PWD=%s;'
                        % (hostname,
                           databasename,
                           username,
                           password))
db.open()
</snippet></ROW><ROW><id>5648143</id><snippet>__init__()</snippet></ROW><ROW><id>5648646</id><snippet>extra</snippet></ROW><ROW><id>5648646</id><snippet>QuerySet</snippet></ROW><ROW><id>5648646</id><snippet>X.objects.extra(where=["x.n in (select y.n from y where y.m = '%s')"], params=['m_value'])
</snippet></ROW><ROW><id>5648669</id><snippet>class Class2(object):
   def method(self):
      print ("I am method at %s" % self.__class__)

class Class1(object):
   pass

class Class0(Class1):
   method = Class2.__dict__["method"]

ob = Class0()
ob.method()
</snippet></ROW><ROW><id>5648669</id><snippet>__dict__</snippet></ROW><ROW><id>5648669</id><snippet>method = Class2.__dict__["method"]
</snippet></ROW><ROW><id>5648669</id><snippet>method = Class2.method
</snippet></ROW><ROW><id>5648725</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = u"[u'38', u'36', u'34', u'32']"
&gt;&gt;&gt; [ item.encode('ascii') for item in ast.literal_eval(s) ]
['38', '36', '34', '32']
</snippet></ROW><ROW><id>5648769</id><snippet>print repr(a).decode("unicode-escape")
</snippet></ROW><ROW><id>5648826</id><snippet>zip()</snippet></ROW><ROW><id>5649658</id><snippet>a</snippet></ROW><ROW><id>5649658</id><snippet>d</snippet></ROW><ROW><id>5649658</id><snippet>b</snippet></ROW><ROW><id>5649658</id><snippet>|</snippet></ROW><ROW><id>5649658</id><snippet>c</snippet></ROW><ROW><id>5649658</id><snippet>b</snippet></ROW><ROW><id>5649658</id><snippet>c</snippet></ROW><ROW><id>5649658</id><snippet>a</snippet></ROW><ROW><id>5649658</id><snippet>d</snippet></ROW><ROW><id>5649658</id><snippet>a[bc]d</snippet></ROW><ROW><id>5649658</id><snippet>a(b|c)d</snippet></ROW><ROW><id>5649658</id><snippet>|</snippet></ROW><ROW><id>5649658</id><snippet>|</snippet></ROW><ROW><id>5649658</id><snippet>b</snippet></ROW><ROW><id>5649658</id><snippet>c</snippet></ROW><ROW><id>5649658</id><snippet>abc</snippet></ROW><ROW><id>5649658</id><snippet>a[bc][cd]</snippet></ROW><ROW><id>5649658</id><snippet>a(bc|cd)</snippet></ROW><ROW><id>5650234</id><snippet>subprocess.Popen([PATH_TO_G++ + "/g++", "file.cpp", "-o", "file.exe"])
</snippet></ROW><ROW><id>5650616</id><snippet>class User:
    STATUS_INACTIVE = 'Inactive'
    STATUS_ACTIVE = 'Active'
    STATUS_PENDING = 'Pending'
    STATUS_BANNED = 'Banned'

    def __init__(self):
        self.status = User.STATUS_ACTIVE
</snippet></ROW><ROW><id>5650698</id><snippet>bound_error</snippet></ROW><ROW><id>5650698</id><snippet>bound_error</snippet></ROW><ROW><id>5650698</id><snippet>x_1</snippet></ROW><ROW><id>5650698</id><snippet>t</snippet></ROW><ROW><id>5650698</id><snippet>from scipy import *
from scipy.integrate import odeint
from scipy.interpolate import interp1d
from pylab import *

# ODE system with forcing function u(t)
def sis(x,t,u):
    return [x[1], u(t)]

# Solution time span
t = linspace(0, 10, 1e3)
t_interp = linspace(0,20,2e3)

# Profile for forcing function u(t)
acel = lambda t: 3*(t&lt;2)-3*(t&gt;8)

# Interpolator for acelerator
acel_interp = interp1d(t_interp, acel(t_interp))    

# ODE integration with u(t) = acel, a lambda function
x_1 = odeint(sis, [0,0], t, args=(acel,) )            
# ODE integration with u(t) = acel_interp, an interpolator
x_2 = odeint(sis, [0,0], t, args=(acel_interp,) )     
</snippet></ROW><ROW><id>5651055</id><snippet>from xml.dom import minidom

xml = """
&lt;root&gt;
 &lt;x&gt;text&lt;/x&gt;
&lt;/root&gt;""" 

dom = minidom.parseString(xml)
pi = dom.createProcessingInstruction('xml-stylesheet',
                                     'type="text/xsl" href="mystyle.xslt"')
root = dom.firstChild
dom.insertBefore(pi, root)
print dom.toprettyxml()
</snippet></ROW><ROW><id>5651055</id><snippet>&lt;?xml version="1.0" ?&gt;
&lt;?xml-stylesheet type="text/xsl" href="mystyle.xslt"?&gt;
&lt;root&gt;

   &lt;x&gt;
      text
   &lt;/x&gt;

&lt;/root&gt;
</snippet></ROW><ROW><id>5651443</id><snippet>JsonCleaner.ERROR_CODES_MAPPING_DICT = ...
</snippet></ROW><ROW><id>5651824</id><snippet>from datetime import datetime

def a_view(request):
    return render_to_response("a_template.html", {
        'time':datetime.now(),
        }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>5651824</id><snippet>&lt;p&gt;{{time}}&lt;/p&gt;
</snippet></ROW><ROW><id>5651844</id><snippet>file.write(str(tickers))
</snippet></ROW><ROW><id>5651844</id><snippet>file.write(', '.join(tickers))
</snippet></ROW><ROW><id>5651866</id><snippet>pygraph</snippet></ROW><ROW><id>5651866</id><snippet>pygraphviz</snippet></ROW><ROW><id>5651866</id><snippet>#!/usr/bin/env python

# Copyright (c) 2007-2008 Pedro Matiello &lt;pmatiello@gmail.com&gt;
# License: MIT (see COPYING file)

# Import pygraphviz
import pygraphviz as pgv

# Graph creation and setting of attributes
gr = pgv.AGraph(rotate='90',bgcolor='lightgray')

# Add nodes and edges
gr.add_edge(("Portugal", "Spain"))
gr.add_edge(("Spain","France"))
gr.add_edge(("France","Belgium"))
gr.add_edge(("France","Germany"))
gr.add_edge(("France","Italy"))
gr.add_edge(("Belgium","Netherlands"))
gr.add_edge(("Germany","Belgium"))
gr.add_edge(("Germany","Netherlands"))
gr.add_edge(("England","Wales"))
gr.add_edge(("England","Scotland"))
gr.add_edge(("Scotland","Wales"))
gr.add_edge(("Switzerland","Austria"))
gr.add_edge(("Switzerland","Germany"))
gr.add_edge(("Switzerland","France"))
gr.add_edge(("Switzerland","Italy"))
gr.add_edge(("Austria","Germany"))
gr.add_edge(("Austria","Italy"))
gr.add_edge(("Austria","Czech Republic"))
gr.add_edge(("Austria","Slovakia"))
gr.add_edge(("Austria","Hungary"))
gr.add_edge(("Denmark","Germany"))
gr.add_edge(("Poland","Czech Republic"))
gr.add_edge(("Poland","Slovakia"))
gr.add_edge(("Poland","Germany"))
gr.add_edge(("Czech Republic","Slovakia"))
gr.add_edge(("Czech Republic","Germany"))
gr.add_edge(("Slovakia","Hungary"))

# Draw as PNG
gr.layout(prog='dot')
gr.draw('europe.png')
</snippet></ROW><ROW><id>5652040</id><snippet>d = {}
val = 0
bigrams = [ ('wealth', 'gain'), ('gain', 'burnt'), ('burnt', 'will'), ('will', 'fire') ]
for word in bigrams:
    s = '-'.join(word)
    if s in d:
        d[s] += 1
    else:
        d[s] = val
</snippet></ROW><ROW><id>5652084</id><snippet>while True:
    try:
        # some code goes here
    except:
        counter += 1

        #some code goes here 

        if counter == 3:
            counter = 0 
</snippet></ROW><ROW><id>5652104</id><snippet>Status</snippet></ROW><ROW><id>5652246</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.findAll("div", {"class":re.compile("name|number")})

[&lt;div class="name"&gt;John Smith&lt;/div&gt;, &lt;div class="number"&gt;2&lt;/div&gt;, &lt;div class="name"&gt;Paul Peterson&lt;/div&gt;, &lt;div class="number"&gt;14&lt;/div&gt;, &lt;div class="name"&gt;Steve Jones&lt;/div&gt;, &lt;div class="number"&gt;5&lt;/div&gt;]
</snippet></ROW><ROW><id>5652291</id><snippet>d</snippet></ROW><ROW><id>5652291</id><snippet>if d:
    # not empty
else:
    # empty
</snippet></ROW><ROW><id>5652291</id><snippet>d</snippet></ROW><ROW><id>5652291</id><snippet>bool</snippet></ROW><ROW><id>5652291</id><snippet>True</snippet></ROW><ROW><id>5652291</id><snippet>False</snippet></ROW><ROW><id>5652992</id><snippet>filter()</snippet></ROW><ROW><id>5652992</id><snippet>def find_listcomp(students, value):
    return [student for student in students if student[1] == value or student[2] == value]

def find_filter(students, value):
    return filter(lambda s: s[1] == value or s[2] == value, students) 
</snippet></ROW><ROW><id>5653126</id><snippet>&gt;&gt;&gt; os.system('"'+cmdBuilder+'"')
</snippet></ROW><ROW><id>5653303</id><snippet>'ticket[assignees][0][]': project.estimator_id
'ticket[assignees][0][]': another assignee ID
'ticket[assignees][0][]': and another assignee ID
'ticket[assignees][0][]': ...
'ticket[assignees][1]': project.estimator_id
</snippet></ROW><ROW><id>5653398</id><snippet>course.studentIDs
</snippet></ROW><ROW><id>5653398</id><snippet>studentIDToGet = "johnsmith001"
studentsCourses = list()
for course in courses:
    if studentIDToGet in course.studentIDs:
        studentsCourses.append(course.id)
</snippet></ROW><ROW><id>5653549</id><snippet>j</snippet></ROW><ROW><id>5653549</id><snippet>[0]</snippet></ROW><ROW><id>5653549</id><snippet>for l in i:
    j.append(l)
</snippet></ROW><ROW><id>5653661</id><snippet>file</snippet></ROW><ROW><id>5653661</id><snippet>open(filename).readlines()
</snippet></ROW><ROW><id>5653661</id><snippet>&gt;&gt;&gt; f = open('foo.txt', 'r')
&gt;&gt;&gt; f.readlines()
['This is the first line of the file.\n', 'Second line of the file\n']
</snippet></ROW><ROW><id>5653661</id><snippet>&gt;&gt;&gt; for line in f:
        print line,

This is the first line of the file.
Second line of the file
</snippet></ROW><ROW><id>5653673</id><snippet>MyLocation = 'DE'
location_score = { MyLocation : 1 }
that_other_field_score = {'PRF1' : 3, 'PRF2' : 2, 'PRF3' : 1}

def score( row ):
    # returns a tuple of item score
    # items not in the score dicts get score 0 for that field
    return ( that_other_field_score.get(row[3], 0),
                  location_score.get(row[4], 0))    

data = [    
('Pencils', 'Artists Pencils', 18.95, 'PVT', 'DE'),
('Pencils', '', 19.95, 'PVT', 'IT'),
('Pencils', '', 23.50, 'PRF1', 'US'),
('Pencils', 'Wooden Pencils', 23.50, 'PRF2', 'DE'),
('Pencils', '', 12.50, 'NON', 'DE')]

# sort data, highest score first
data.sort(key=score, reverse=True)
print data 
</snippet></ROW><ROW><id>5653673</id><snippet>location_score</snippet></ROW><ROW><id>5653673</id><snippet>(1 if row[4]=='DE' else 0)</snippet></ROW><ROW><id>5653755</id><snippet>Key</snippet></ROW><ROW><id>5653755</id><snippet>f</snippet></ROW><ROW><id>5653755</id><snippet>([0-9A-Ea-e]+)</snippet></ROW><ROW><id>5653755</id><snippet>([0-9A-Fa-f]+)</snippet></ROW><ROW><id>5653755</id><snippet>r</snippet></ROW><ROW><id>5653755</id><snippet>\</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; regex = r"(Key):[\s]*([0-9A-Fa-f]+)[\s]*" \
...     r"(Index):[\s]*([0-9]+)[\s]*" \
...     r"(Field 1):[\s]*([0-9]+)[\s]*" \
...     r"(Field 2):[\s]*([0-9 A-Za-z]+)[\s]*" \
...     r"(Field 3):[\s]*([-+]?[0-9]+)[\s]*"
</snippet></ROW><ROW><id>5653755</id><snippet>findall()</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; re.findall(regex, line)
[('Key', 'af12d9', 'Index', '0', 'Field 1', '1234', 'Field 2', '1234 Ring ', 'Field 3', '-10')]
</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; found = re.findall(regex, line)[0]
&gt;&gt;&gt; found
('Key', 'af12d9', 'Index', '0', 'Field 1', '1234', 'Field 2', '1234 Ring ', 'Field 3', '-10')
</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; found[::2]
('Key', 'Index', 'Field 1', 'Field 2', 'Field 3')
</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; found[1::2]
('af12d9', '0', '1234', '1234 Ring ', '-10')
</snippet></ROW><ROW><id>5653755</id><snippet>zip()</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; zip(found[::2], found[1::2])
[('Key', 'af12d9'), ('Index', '0'), ('Field 1', '1234'), ('Field 2', '1234 Ring '), ('Field 3', '-10')]
</snippet></ROW><ROW><id>5653755</id><snippet>dict()</snippet></ROW><ROW><id>5653755</id><snippet>&gt;&gt;&gt; dict(zip(found[::2], found[1::2]))
{'Field 3': '-10', 'Index': '0', 'Field 1': '1234', 'Key': 'af12d9', 'Field 2': '1234 Ring '}
</snippet></ROW><ROW><id>5653942</id><snippet>write(1, "M\n", 2)                      = 2
write(1, "\n", 1)                       = 1
write(1, "M\n", 2)                      = 2
write(1, "\n", 1)                       = 1
</snippet></ROW><ROW><id>5653983</id><snippet>MainI18N</snippet></ROW><ROW><id>5653983</id><snippet>MainI18N.objects.filter(main__is_active=True, language='en').select_related('main')
</snippet></ROW><ROW><id>5653983</id><snippet>class MainQuerySet(QuerySet):
    def translate(self, lang):
       for obj in MainI18N.filter(language=lang, main__in=self).select_related('main'):
           main = obj.main
           main.i18n = obj
           yield main
</snippet></ROW><ROW><id>5654065</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>5654065</id><snippet>import collections
...
hash = collections.defaultdict(list)
r = stsize-mersize+1

for i in range(0, r):
    mer = st[i:i+mersize]
    hash[mer].append(i)
</snippet></ROW><ROW><id>5654065</id><snippet>if ... else</snippet></ROW><ROW><id>5654387</id><snippet>arguments</snippet></ROW><ROW><id>5654387</id><snippet>String script = "var callback = arguments[arguments.length - 1];"
    + "callback(myJavaScriptFunctionThatWaitsUntilReady());";

driver.manage().timeouts().setScriptTimeout(15, TimeUnit.SECONDS);
((JavascriptExecutor)driver).executeAsyncScript(script);
</snippet></ROW><ROW><id>5654665</id><snippet>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read() # This is what is read from the file. In your case,
                       # it'll only read the contents of the webpage.
</snippet></ROW><ROW><id>5654665</id><snippet>ifconfig eth0 192.168.1.5 netmask 255.255.255.0 up
ifconfig eth0
</snippet></ROW><ROW><id>5654665</id><snippet>os.system()</snippet></ROW><ROW><id>5654665</id><snippet>import os
os.system('ifconfig eth0 192.168.1.5 netmask 255.255.255.0 up')
os.system('ifconfig eth0')
</snippet></ROW><ROW><id>5654665</id><snippet>python foo.py bar foo bar bar</snippet></ROW><ROW><id>5654665</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>5655286</id><snippet>import numpy as np
xind = np.floor((x-xmin)/xdelta).astype(int)
yind = np.floor((y-ymin)/ydelta).astype(int)

xind[np.argmax(x)] = -1
yind[np.argmax(y)] = -1

arr = grid[xind,yind]
</snippet></ROW><ROW><id>5655309</id><snippet>filter</snippet></ROW><ROW><id>5655309</id><snippet>try:
    filter(lambda client: client.screenName == search, clients)[0]
except IndexError:
    # handle error. May be use a default value
</snippet></ROW><ROW><id>5655537</id><snippet>def print_books(d):
    if isinstance(d['shelf'], dict):
        print d['shelf']['book']['title']
    else:
        for book in d['shelf']:
            print book['book']['title']
</snippet></ROW><ROW><id>5655635</id><snippet>while True:
   stringName = raw_input("Convert string to hex &amp; ascii(type stop to quit): ").strip()
   if stringName == 'stop':
      break

   print "Hex value: ", stringName.encode('hex')
   print "ASCII value: ", ', '.join(str(ord(c)) for c in stringName)
</snippet></ROW><ROW><id>5655840</id><snippet>"a=%(name1)s,b=%(name2)s,c=%(name1)s,d=%(name2)s" % {'name1': n1, 'name2': n2}
</snippet></ROW><ROW><id>5656097</id><snippet>def joinit(iterable, delimiter):
    it = iter(iterable)
    yield next(it)
    for x in it:
        yield delimiter
        yield x
</snippet></ROW><ROW><id>5656425</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>5656425</id><snippet>chmod</snippet></ROW><ROW><id>5656425</id><snippet>chmod +x /path/to/helloworld.py
</snippet></ROW><ROW><id>5656425</id><snippet>/path/to/</snippet></ROW><ROW><id>5656425</id><snippet>% ls -l
total 0
drwxr-xr-x  2 jathan jathan   60 2011-04-13 15:28 ./
drwxrwxrwt 12 root   root   6.5K 2011-04-13 15:28 ../
-rw-r--r--  1 jathan jathan    0 2011-04-13 15:28 helloworld.py
</snippet></ROW><ROW><id>5656425</id><snippet>% chmod +x helloworld.py 
% ls -l                 
drwxr-xr-x  2 jathan jathan   60 2011-04-13 15:28 ./
drwxrwxrwt 12 root   root   6.5K 2011-04-13 15:28 ../
-rwxr-xr-x  1 jathan jathan    0 2011-04-13 15:28 helloworld.py*
</snippet></ROW><ROW><id>5656425</id><snippet>% ./helloworld.py   
Hello World!
</snippet></ROW><ROW><id>5656643</id><snippet>Child</snippet></ROW><ROW><id>5656643</id><snippet>c = Child.objects.get(id=1)
c.family_set.all()  # gives you a list of Families
</snippet></ROW><ROW><id>5656643</id><snippet>class Family(models.Model):
    pass # your fields here

class Child(models.Model):
    family = models.ForeignKey(Family)
</snippet></ROW><ROW><id>5656643</id><snippet>mychild.family</snippet></ROW><ROW><id>5656643</id><snippet>myfamily.child_set.all()</snippet></ROW><ROW><id>5656653</id><snippet>import csv, sys

filename = sys.argv[1]
csvfile = open(filename, 'r')
csvreader = csv.DictReader(csvfile)
rows = []
for row in csvreader:
  try:
      row['keywords'].decode('ascii')
      rows.append(row) 
  except UnicodeDecodeError:
      pass

print rows
</snippet></ROW><ROW><id>5656708</id><snippet>mylist = [1, 4, 0, 3, 2]
mylist.remove(max(mylist))
mylist.remove(min(mylist))
</snippet></ROW><ROW><id>5656708</id><snippet>min()</snippet></ROW><ROW><id>5656708</id><snippet>max()</snippet></ROW><ROW><id>5656710</id><snippet>class Company(models.Model):
    pass

class Item(models.Model):
    ...
    owner = models.ForeignKey(Company, related_name='owned_items')
    holder = models.ForeignKey(Company, related_name='held_items')
</snippet></ROW><ROW><id>5656710</id><snippet>company_a = Company.objects.get(pk=1)

company_a.owned_items.all()
company_a.held_items.all()

items_owned_and_held_by_a=Items.objects.filter(owner=company_a, holder=company_a)

items_on_loan_by_a=Items.objects.filter(owner=company_a).exclude(holder=company_a)
#or
items_on_loan_by_a=company_a.owned_items.exclude(holder=company_a)

items_a_is_borrowing=Items.objects.exclude(owner=company_a).filter(holder=company_a)
#or
items_a_is_borrowing=company_a.held_items.exclude(owner=company_a)

company_b = Company.objects.get(pk=2)

items_owned_by_a_held_by_b=Items.objects.filter(owner=company_a, holder=company_b)
#or
items_owned_by_a_held_by_b=company_a.owned_items.filter(holder=company_b)
#or
items_owned_by_a_held_by_b=company_b.held_items.filter(owner=company_a)
</snippet></ROW><ROW><id>5656858</id><snippet>def z():
  whatever

x = y = z
</snippet></ROW><ROW><id>5656858</id><snippet>def</snippet></ROW><ROW><id>5656858</id><snippet>lambda</snippet></ROW><ROW><id>5656858</id><snippet>x = y = z = lambda foo: bar()
</snippet></ROW><ROW><id>5657199</id><snippet>name = "Slartibartfast"
person = name
</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657199</id><snippet>id()</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>__name__</snippet></ROW><ROW><id>5657199</id><snippet>def</snippet></ROW><ROW><id>5657199</id><snippet>class</snippet></ROW><ROW><id>5657199</id><snippet>person = person.replace("art", "aart")
</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>def dutchnametag(name):
    name = name.replace("art", "aart")
    print "HELLO! My Dutch name is", name

person = "Slartibartfast"
dutchnametag(person)
</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>replace()</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>name</snippet></ROW><ROW><id>5657199</id><snippet>person</snippet></ROW><ROW><id>5657264</id><snippet>lat</snippet></ROW><ROW><id>5657264</id><snippet>place.centroid.latitude</snippet></ROW><ROW><id>5657264</id><snippet>type(place.centroid.latitude)</snippet></ROW><ROW><id>5657264</id><snippet>float()</snippet></ROW><ROW><id>5657264</id><snippet>path = os.path.join(os.path.dirname(__file__), 'path/to/your/file')
</snippet></ROW><ROW><id>5657271</id><snippet>current_destination = CreateOutputDirectory()
for root, folders, files in os.walk(input_directory):
   for file in files:
       file_size = os.path.getsize(file)
       if os.path.getsize(current_destination) + file_size &gt; limit:
          current_destination = CreateOutputDirectory()
       CopyFileToDirectory(root, file, current_destination)
</snippet></ROW><ROW><id>5657328</id><snippet>date.timetuple()</snippet></ROW><ROW><id>5657328</id><snippet>time.struct_time</snippet></ROW><ROW><id>5657328</id><snippet>time.localtime()</snippet></ROW><ROW><id>5657328</id><snippet>d.timetuple()</snippet></ROW><ROW><id>5657328</id><snippet>time.struct_time((d.year, d.month,
  d.day, 0, 0, 0, d.weekday(), yday,
  -1))</snippet></ROW><ROW><id>5657328</id><snippet>yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1</snippet></ROW><ROW><id>5657330</id><snippet>[(name, gender) for (id0, gender) in genders for (id1, name) in names if id0==id1]
</snippet></ROW><ROW><id>5657330</id><snippet>namedict = dict(names)
genderdict = dict(genders)
[(namedict[id], genderdict[id]) for id in set(namedict) &amp; set(genderdict)]
</snippet></ROW><ROW><id>5657734</id><snippet>Class.method(obj)</snippet></ROW><ROW><id>5657734</id><snippet>obj.method()</snippet></ROW><ROW><id>5657734</id><snippet>obj</snippet></ROW><ROW><id>5657734</id><snippet>Class</snippet></ROW><ROW><id>5657734</id><snippet>__init__()</snippet></ROW><ROW><id>5657739</id><snippet>import xlrd
wb = xlrd.open_workbook('myworkbook.xls')
b.sheet_names()
sh = wb.sheet_by_index(0)
col = sh.col_values(0)
.....
</snippet></ROW><ROW><id>5658067</id><snippet>self.render("template.html", aString=aUnicodeString)
</snippet></ROW><ROW><id>5658067</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;/head&gt;
    &lt;body&gt;
        {{aString}}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>5658067</id><snippet>self.render('&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;&lt;/head&gt;&lt;body&gt;{{aString}}&lt;/body&gt;&lt;/html&gt;', aString=aUnicodeString)
</snippet></ROW><ROW><id>5658107</id><snippet>processLine</snippet></ROW><ROW><id>5658107</id><snippet>wordlist</snippet></ROW><ROW><id>5658107</id><snippet>addword</snippet></ROW><ROW><id>5658107</id><snippet>for</snippet></ROW><ROW><id>5658289</id><snippet>return render_to_response('login.html' {
                                    'failed_login' : False,
                                    'form' : AuthenticationForm()
                                                },
                                    context_instance=RequestContext(request),
                                 )
</snippet></ROW><ROW><id>5658289</id><snippet>return render_to_response('login.html', {
                                    'failed_login' : False,
                                    'form' : AuthenticationForm()
                                                },
                                    context_instance=RequestContext(request),
                                 )
</snippet></ROW><ROW><id>5658439</id><snippet>import re
line = re.sub(r"&lt;/?\[\d+&gt;", "", line)
</snippet></ROW><ROW><id>5658439</id><snippet>line = re.sub(r"""
  (?x) # Use free-spacing mode.
  &lt;    # Match a literal '&lt;'
  /?   # Optionally match a '/'
  \[   # Match a literal '['
  \d+  # Match one or more digits
  &gt;    # Match a literal '&gt;'
  """, "", line)
</snippet></ROW><ROW><id>5658446</id><snippet>[~]
|1&gt; import numpy as np

[~]
|2&gt; a = np.zeros(1000000, dtype=np.int16)

[~]
|3&gt; b = a.astype(np.float32).view(np.complex64)

[~]
|4&gt; b.shape
(500000,)

[~]
|5&gt; b.dtype
dtype('complex64')
</snippet></ROW><ROW><id>5659063</id><snippet>#include &lt;math.h&gt;

__device__ float func(float x) {

   return x * x * fpow(x, 0.123456f);
}
</snippet></ROW><ROW><id>5659104</id><snippet>import inspect
def isclassandsubclass(value, classinfo):
    return inspect.isclass(value) and issubclass(value, classinfo)
</snippet></ROW><ROW><id>5659197</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.panel.SetBackgroundColour(wx.GREEN)

        self.list = wx.ListCtrl(self, style=wx.LC_REPORT, size=(200, -1))
        column_size = self.list.GetSize()[0] / 2 - 2
        self.list.InsertColumn(0, 'Name')
        self.list.InsertColumn(1, 'Age')   
        self.list.SetColumnWidth(0, column_size)
        self.list.SetColumnWidth(1, column_size)

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.list, proportion=0, flag=wx.EXPAND)
        self.sizer.Add(self.panel, proportion=1, flag=wx.EXPAND)

        self.SetSizerAndFit(self.sizer)
        self.SetSize((600, 400))       
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>5659197</id><snippet>import wx
import wx.lib.mixins.listctrl as listmix

class TestListCtrl(wx.ListCtrl, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, *args, **kwargs):
        wx.ListCtrl.__init__(self, *args, **kwargs)
        listmix.ListCtrlAutoWidthMixin.__init__(self)

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.panel.SetBackgroundColour(wx.GREEN)

        self.list = TestListCtrl(self, style=wx.LC_REPORT, size=(200, -1))
        self.list.InsertColumn(0, 'Name')
        self.list.InsertColumn(1, 'Age')   

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.list, proportion=0, flag=wx.EXPAND)
        self.sizer.Add(self.panel, proportion=1, flag=wx.EXPAND)

        self.SetSizerAndFit(self.sizer)
        self.SetSize((600, 400))       
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>5659249</id><snippet>__file__</snippet></ROW><ROW><id>5659249</id><snippet>Popen</snippet></ROW><ROW><id>5659249</id><snippet>Popen</snippet></ROW><ROW><id>5659249</id><snippet>os.execvp</snippet></ROW><ROW><id>5659249</id><snippet>shell=False</snippet></ROW><ROW><id>5659249</id><snippet>PATH</snippet></ROW><ROW><id>5659249</id><snippet>os.environ</snippet></ROW><ROW><id>5659249</id><snippet>shell=False</snippet></ROW><ROW><id>5659249</id><snippet>env</snippet></ROW><ROW><id>5659249</id><snippet>shell=True</snippet></ROW><ROW><id>5659249</id><snippet>Popen(['/usr/bin/env', 'progtorun', other, args], ...)</snippet></ROW><ROW><id>5659249</id><snippet>env</snippet></ROW><ROW><id>5659249</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>5659763</id><snippet>&gt;&gt;&gt; class A(type):
...     def __repr__(self):
...             return '&lt;this is not a class!&gt;'
...
&gt;&gt;&gt; class B(object):
...     __metaclass__ = A
...
&gt;&gt;&gt; print B
&lt;this is not a class!&gt;
</snippet></ROW><ROW><id>5659763</id><snippet>__str__</snippet></ROW><ROW><id>5659763</id><snippet>str(Class)</snippet></ROW><ROW><id>5659763</id><snippet>Class.__name__</snippet></ROW><ROW><id>5659763</id><snippet>Class.table_name</snippet></ROW><ROW><id>5659763</id><snippet>&lt;class 'foo.x'&gt;</snippet></ROW><ROW><id>5659763</id><snippet>Class.table_name</snippet></ROW><ROW><id>5659763</id><snippet>Class</snippet></ROW><ROW><id>5659815</id><snippet>simplejson.loads(str(trans_text))</snippet></ROW><ROW><id>5659815</id><snippet>trans_text</snippet></ROW><ROW><id>5659815</id><snippet>simplejson</snippet></ROW><ROW><id>5659815</id><snippet>repr(trans_text)</snippet></ROW><ROW><id>5659815</id><snippet>{'translations': [{'translatedText':
  'hola'}]}</snippet></ROW><ROW><id>5659815</id><snippet>trans_text</snippet></ROW><ROW><id>5659815</id><snippet>simplejson.dumps()</snippet></ROW><ROW><id>5659815</id><snippet>simplejson.loads()</snippet></ROW><ROW><id>5659815</id><snippet># Your other example
trans_text = {'translations': [{'translatedText': 'fleur'}, {'translatedText': 'voiture'}]} 
for x in trans_text['translations']:
    print "chunk of translated text:", x['translatedText']
</snippet></ROW><ROW><id>5659946</id><snippet>for mutex in exitmutexes:
    while not mutex.locked(): pass
</snippet></ROW><ROW><id>5660006</id><snippet>$ python -v
&gt;&gt;&gt; import xmlrpclib
# /usr/lib/python2.6/xmlrpclib.pyc matches /usr/lib/python2.6/xmlrpclib.py
&gt;&gt;&gt; xmlrpclib.__version__
'1.0.1'
&gt;&gt;&gt; xmlrpclib.dumps((None,), allow_none=True)
'&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;nil/&gt;&lt;/value&gt;&lt;/param&gt;\n&lt;/params&gt;\n
</snippet></ROW><ROW><id>5660147</id><snippet>system.ntfs_attrib</snippet></ROW><ROW><id>5660147</id><snippet>import os, struct, xattr

# values from http://www.tuxera.com/community/ntfs-3g-advanced/extended-attributes/
attributes = ['readonly', 'hidden', 'system', 'unknown',
              'unknown', 'archive', 'unknown', 'unknown',
              'temp', 'unknown', 'unknown', 'compressed_dir',
              'offline', 'not_content_indexed' ] + ['unknown']*18

def ntfs_attr(path):
    attr = struct.unpack("i", xattr.get(path, "system.ntfs_attrib"))[0]
    for shift, attribute in enumerate(attributes):
        if (attr &gt;&gt; shift) &amp; 1 == 1:
            yield attribute

def main():
    import sys
    if len(sys.argv) != 3:
        print "Usage: %s path attribute" % sys.argv[0]
        a = set(attributes)
        a.remove('unknown')
        print "where attribute is one of:", ' '.join(a)
        sys.exit(1)

    path = sys.argv[1]
    attribute = sys.argv[2]
    print "Files with %s attribute in %s:" % (attribute, path)
    for filename in os.listdir(path):
        fullname = os.path.join(path, filename)
        if attribute in ntfs_attr(fullname):
            print fullname


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5661156</id><snippet>numpy.loadtxt('data.txt', dtype=[ ('time', np.uint64), ('pos', [('x', np.float), ('y', np.float)]) ])
</snippet></ROW><ROW><id>5661156</id><snippet>dt=[('E', '&lt;i4'), ('M', '&lt;i4'), ('S', '&lt;i4'), ('T', '&lt;i4'), ('N', '|O4')]
print numpy.loadtxt('data.txt', dtype=dt)
</snippet></ROW><ROW><id>5661156</id><snippet>[(9998, 1, 1, 128, '10097')
 (9999, 1, 1, 128, '10098')
 (10000, 1, 1, 128, '10099')…]
</snippet></ROW><ROW><id>5661156</id><snippet>numpy.loadtxt()</snippet></ROW><ROW><id>5661156</id><snippet>dt=[('E', '&lt;i4'), ('M', '&lt;i4'), ('S', '&lt;i4'), ('T', '&lt;i4'), ('N', '|O4')]
arr = numpy.loadtxt('data.txt', dtype=dt)  # Correctly reads the first 4 columns

with open('data.txt') as input_file:
    for (line_num, line) in enumerate(input_file):
        arr[line_num]['N'] = tuple(int(x) for x in line.split()[4:])  # Manual setting of the tuple column
</snippet></ROW><ROW><id>5661156</id><snippet>[(9998, 1, 1, 128, (10097, 10098, 10199, 10198, 20298, 20299, 20400, 20399))
 (9999, 1, 1, 128, (10098, 10099, 10200, 10199, 20299, 20300, 20401, 20400))
 (10000, 1, 1, 128, (10099, 10100, 10201, 10200, 20300, 20301, 20402, 20401))
 (10001, 1, 2, 44, (2071, 2172, 12373, 12272))
 (10002, 1, 2, 44, (2172, 2273, 12474, 1237))]
</snippet></ROW><ROW><id>5661453</id><snippet># assign conf as a dict()
# assign rev and repo as variables
import os
os.system('%s log --revision %s %s' % (conf['svnlook'], rev, repo))
</snippet></ROW><ROW><id>5661453</id><snippet>&gt;&gt;&gt; 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')
'Coordinates: 37.24N, -115.81W'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5661453</id><snippet>perl</snippet></ROW><ROW><id>5661527</id><snippet>&gt;&gt;&gt; from PyQt4 import QtCore
&gt;&gt;&gt; QtCore.QObject.__mro__
(&lt;class 'PyQt4.QtCore.QObject'&gt;, &lt;type 'sip.wrapper'&gt;, &lt;type 'sip.simplewrapper'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>5661527</id><snippet>QObject</snippet></ROW><ROW><id>5661527</id><snippet>QObject</snippet></ROW><ROW><id>5661548</id><snippet>current = DateTime().</snippet></ROW><ROW><id>5661658</id><snippet>&gt;&gt;&gt; def app():
...     x=5
...     exec("x+=1")
...     print(x)
... 
&gt;&gt;&gt; app()
5
</snippet></ROW><ROW><id>5661658</id><snippet>x</snippet></ROW><ROW><id>5661658</id><snippet>&gt;&gt;&gt; x=5
&gt;&gt;&gt; exec("x+=1")
&gt;&gt;&gt; print(x)
6
</snippet></ROW><ROW><id>5661658</id><snippet>x=5
def app():
    exec("global x;x+=1")
    print(x)

app()
</snippet></ROW><ROW><id>5661658</id><snippet>def app():
    x=5
    d = {'x': x}
    exec("x+=1", d)
    x = d['x']
    print(x)

app()
</snippet></ROW><ROW><id>5661658</id><snippet>d=locals().copy()</snippet></ROW><ROW><id>5661753</id><snippet>''.join('%02x'%i for i in input)
</snippet></ROW><ROW><id>5662624</id><snippet>str</snippet></ROW><ROW><id>5662624</id><snippet>unicode</snippet></ROW><ROW><id>5662624</id><snippet>prefixed_bits = "extract this double:\xc2\x8eET\xfb!\t@"
pos = prefixed_bits.index(":") + 1
print "That looks like the value %f" % struct.unpack("d", prefixed_bits[pos:pos+8])
</snippet></ROW><ROW><id>5662873</id><snippet>&gt;&gt;&gt; L1 = ["the","end"]
&gt;&gt;&gt; bigramslist = [ ("the","end"), ("end","of"), ("of","the"), ("the","world") ]
&gt;&gt;&gt; tuple(L1) in bigramslist
True
</snippet></ROW><ROW><id>5662873</id><snippet>&gt;&gt;&gt; bigramsset = set( [ ("the","end"), ("end","of"), ("of","the"), ("the","world") ] )
&gt;&gt;&gt; L1 = ["the","end"]
&gt;&gt;&gt; tuple(L1) in bigramsset
True
</snippet></ROW><ROW><id>5663071</id><snippet>types</snippet></ROW><ROW><id>5663449</id><snippet>m = np.array([x[:5] for x in d], dtype=object)
</snippet></ROW><ROW><id>5663599</id><snippet>{{capture|safe}}</snippet></ROW><ROW><id>5663600</id><snippet>cn=Config</snippet></ROW><ROW><id>5663749</id><snippet>class CommercialPack(object):
    def __init__(self, pack):
        self.__dict__.update(pack.__dict__)
</snippet></ROW><ROW><id>5663749</id><snippet>class CommercialPack(object):
    def __init__(self, pack):
        self.__dict__ = pack.__dict__
</snippet></ROW><ROW><id>5663749</id><snippet>PER_KM_PRICE = 100

class Pack(object):
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight


class CommercialPack(Pack):
    def __init__(self, pack):
        self.__dict__ = pack.__dict__

    def get_delivery_price(self, distance):
        return self.weight * PER_KM_PRICE * distance

def get_pack():
    return Pack("pack", 20)

cp = CommercialPack(get_pack())
print cp.get_delivery_price(3)
</snippet></ROW><ROW><id>5663794</id><snippet>-b</snippet></ROW><ROW><id>5663794</id><snippet>import os
os.system("acpi -b &gt; batteryinfo.txt")
#code to parse batteryinfo.txt
</snippet></ROW><ROW><id>5663794</id><snippet>acpi</snippet></ROW><ROW><id>5664039</id><snippet>from setuptools import setup
</snippet></ROW><ROW><id>5664039</id><snippet>from distutils.core import setup
</snippet></ROW><ROW><id>5664332</id><snippet># -*- coding: utf-8 -*-
from xml.etree import ElementTree as ET

def build_xpath(node, path):
    components = path.split("/")
    if components[0] == node.tag:
        components.pop(0)
    while components:
        # take in account positional  indexes in the form /path/para[3] or /path/para[location()=3]
        if "[" in components[0]:
            component, trail = components[0].split("[",1)
            target_index = int(trail.split("=")[-1].strip("]"))
        else:
            component = components[0]
            target_index = 0
        components.pop(0)
        found_index = -1
        for child in node.getchildren():
            if child.tag == component:
                found_index += 1
                if found_index == target_index:
                    node = child
                    break
        else:
            for i in range(target_index - found_index):
                new_node = ET.Element(component)
                node.append(new_node)
            node = new_node


if __name__  == "__main__":
    #Example
    root = ET.Element("root")
    build_xpath(root, "root/foo/bar[position()=4]/snafu")
    print ET.tostring(root)
</snippet></ROW><ROW><id>5664465</id><snippet>"SELECT * FROM table ORDER BY %s %s" % ('avg', 'DESC')
</snippet></ROW><ROW><id>5664547</id><snippet>array_map()</snippet></ROW><ROW><id>5664547</id><snippet>$arr = array_map(function($el) { return $el[0]; }, array('dingo', 'wombat', 'wallaby'));
print_r($arr);
</snippet></ROW><ROW><id>5664547</id><snippet>Array
(
    [0] =&gt; d
    [1] =&gt; w
    [2] =&gt; w
)
</snippet></ROW><ROW><id>5664547</id><snippet>$arr = array_map('ucwords', array('dingo', 'wombat', 'wallaby'));
print_r($arr);
</snippet></ROW><ROW><id>5664547</id><snippet>Array
(
    [0] =&gt; Dingo
    [1] =&gt; Wombat
    [2] =&gt; Wallaby
)
</snippet></ROW><ROW><id>5664653</id><snippet>if l.isalpha()</snippet></ROW><ROW><id>5664653</id><snippet>   import string
    def LetterCount(str):
            str= str.lower().strip()
            str = str.strip(string.punctuation)
            list1=list(str)
            lcDict= {}
            for l in list1:
                    if l.isalpha():
                            if l in lcDict:
                                    lcDict[l] +=1
                            else:
                                    lcDict[l]= 1
            print lcDict

    LetterCount("Abracadabra, Monsignor")
</snippet></ROW><ROW><id>5664673</id><snippet># -*- coding: utf8 -*-
'''This tool will ftp all the files in a given directory to a given location

if the file ftpallcfg.py exists in the directory it will be loaded and the values within it used, 
with the current directory used as the source directory.

ftpallcfg.py file contains the following variables.
===========================
server = &lt;server to ftp to&gt;
username = &lt;Username for access to given server&gt;
remote_dir = &lt;remote server directory&gt;
encrypt= True/False
monitor = True/False
walk = True/False
=========================== 
'''
import ftplib
import os
import getpass
import sys
import time
import socket
import psftplib

__revision__ = 1.11

SLEEP_SECONDS = 1


class FtpAddOns():
    PATH_CACHE = []

    def __init__(self, ftp_h):
        self.ftp_h = ftp_h

    def ftp_exists(self, path):
        '''path exists check function for ftp handler'''
        exists = None
        if path not in self.PATH_CACHE:
            try:
                self.ftp_h.cwd(path)
                exists = True
                self.PATH_CACHE.append(path)
            except ftplib.error_perm, e:
                if str(e.args).count('550'):    
                    exists = False
        else:
            exists = True

        return exists


    def ftp_mkdirs(self, path, sep='/'):
        '''mkdirs function for ftp handler'''
        split_path = path.split(sep)

        new_dir = ''
        for server_dir in split_path:
            if server_dir:
                new_dir += sep + server_dir
                if not self.ftp_exists(new_dir):
                    try:
                        print 'Attempting to create directory (%s) ...' % (new_dir),
                        self.ftp_h.mkd(new_dir)
                        print 'Done!'
                    except Exception, e:
                        print 'ERROR -- %s' % (str(e.args))                


def _get_local_files(local_dir, walk=False):
    '''Retrieve local files list
    result_list == a list of dictionaries with path and mtime keys. ex: {'path':&lt;filepath&gt;,'mtime':&lt;file last modified time&gt;}
    ignore_dirs == a list of directories to ignore, should not include the base_dir.
    ignore_files == a list of files to ignore.
    ignore_file_ext == a list of extentions to ignore. 
    ''' 
    result_list = []   

    ignore_dirs = ['CVS', '.svn']
    ignore_files = ['.project', '.pydevproject']
    ignore_file_ext = ['.pyc']

    base_dir = os.path.abspath(local_dir)

    for current_dir, dirs, files in os.walk(base_dir):
        for this_dir in ignore_dirs:
            if this_dir in dirs:
                dirs.remove(this_dir)

        sub_dir = current_dir.replace(base_dir, '')
        if not walk and sub_dir:
            break

        for this_file in files:
            if this_file not in ignore_files and os.path.splitext(this_file)[-1].lower() not in ignore_file_ext:
                filepath = os.path.join(current_dir, this_file)
                file_monitor_dict = {
                                     'path': filepath, 
                                     'mtime': os.path.getmtime(filepath)
                                     } 
                result_list.append(file_monitor_dict)
    return result_list 


def monitor_and_ftp(server, 
                      username, 
                      password, 
                      local_dir, 
                      remote_dir, 
                      encrypt=False, 
                      walk=False):
    '''Monitor local files and when an update is found connect and upload'''
    print 'Monitoring changes in (%s).' % (os.path.abspath(local_dir))
    print '(Use ctrl-c to exit)'

    last_files_list = _get_local_files(local_dir)

    while True:
        try:
            time.sleep(SLEEP_SECONDS)

            latest_files_list = _get_local_files(local_dir)

            files_to_update = []

            for idx in xrange(len(latest_files_list)):

                if idx &lt; len(last_files_list):
                    # compare last modified times
                    if latest_files_list[idx]['mtime'] &gt; last_files_list[idx]['mtime']:
                        files_to_update.append(latest_files_list[idx])

                else:
                    # add the file to the list (new file)
                    files_to_update.append(latest_files_list[idx])

            if files_to_update:
                print
                print 'Detected NEW or CHANGED file(s), attempting to send ...'
                print
                is_success = upload_all(server,
                                        username,
                                        password,
                                        local_dir, 
                                        remote_dir, 
                                        files_to_update, 
                                        encrypt, 
                                        walk)

                if not is_success:
                    break

            else:
                print '.',

            last_files_list = latest_files_list[:] # copy the list to hold
        except KeyboardInterrupt:
            print
            print 'Exiting.'
            break


def upload_all(server, 
                username, 
                password, 
                base_local_dir, 
                base_remote_dir, 
                files_to_update=None, 
                encrypt=False, 
                walk=False):
    '''Upload all files in a given directory to the given remote directory'''
    continue_on = False
    login_ok = False
    server_connect_ok = False

    base_local_dir = os.path.abspath(base_local_dir)
    base_remote_dir = os.path.normpath(base_remote_dir)

    if files_to_update:
        local_files = files_to_update
    else:
        local_files = _get_local_files(base_local_dir, walk)

    if local_files:
        if not encrypt: # Use standard FTP
            ftp_h = ftplib.FTP()
        else: # Use sftp
            ftp_h = psftplib.SFTP()

        try:
            ftp_h.connect(server)
            server_connect_ok = True
        except socket.gaierror, e:
            print 'ERROR -- Could not connect to (%s): %s' % (server, str(e.args))
        except IOError, e:
            print 'ERROR -- File not found: %s' % (str(e.args))
        except socket.error, e:
            print 'ERROR -- Could not connect to (%s): %s' % (server, str(e.args))

        ftp_path_tools = FtpAddOns(ftp_h)

        if server_connect_ok:
            try:
                ftp_h.login(username,password)
                print 'Logged into (%s) as (%s)' % (server, username)
                login_ok = True
            except ftplib.error_perm, e:
                print 'ERROR -- Check Username/Password: %s' % (str(e.args))
            except psftplib.ProcessTimeout, e:
                print 'ERROR -- Check Username/Password (timeout): %s' % (str(e.args))

            if login_ok:

                for file_info in local_files:
                    filepath = file_info['path']

                    path, filename = os.path.split(filepath)
                    remote_sub_path = path.replace(base_local_dir, '')
                    remote_path = path.replace(base_local_dir, base_remote_dir)
                    remote_path = remote_path.replace('\\', '/') # Convert to unix style

                    if not ftp_path_tools.ftp_exists(remote_path):
                        ftp_path_tools.ftp_mkdirs(remote_path)

                    # Change to directory
                    try:
                        ftp_h.cwd(remote_path)
                        continue_on = True
                    except ftplib.error_perm, e:
                        print 'ERROR -- %s' % (str(e.args))
                    except psftplib.PsFtpInvalidCommand, e:
                        print 'ERROR -- %s' % (str(e.args))                        

                    if continue_on:
                        if os.path.exists(filepath):
                            f_h = open(filepath,'rb')
                            filename = os.path.split(f_h.name)[-1]

                            display_filename = os.path.join(remote_sub_path, filename)
                            display_filename = display_filename.replace('\\', '/')

                            print 'Sending (%s) ...' % (display_filename),
                            send_cmd = 'STOR %s' % (filename)
                            try:
                                ftp_h.storbinary(send_cmd, f_h)
                                f_h.close()
                                print 'Done!' 
                            except Exception, e:
                                print 'ERROR!'
                                print str(e.args)
                                print
                        else:
                            print "WARNING -- File no longer exists, (%s)!" % (filepath)

                ftp_h.quit()
                print 'Closing Connection'
    else:
        print 'ERROR -- No files found in (%s)' % (base_local_dir)

    return continue_on


if __name__ == '__main__':
    import optparse

    default_config_file = u'ftpallcfg.py'

    # Create parser, and configure command line options to parse
    parser = optparse.OptionParser()
    parser.add_option("-l", "--local_dir",
                      dest="local_dir",
                      help="Local Directory (Defaults to CWD)",
                      default='.')
    parser.add_option("-r", "--remote_dir",
                      dest="remote_dir",
                      help="[REQUIRED] Target Remote directory",
                      default=None)
    parser.add_option("-u", "--username",
                      dest="username",
                      help="[REQUIRED] username",
                      default=None)
    parser.add_option("-s","--server",
                      dest="server",
                      help="[REQUIRED] Server Address",
                      default=None)
    parser.add_option("-e", "--encrypt",
                      action="store_true", 
                      dest="encrypt",
                      help="Use sftp",
                      default=False)
    parser.add_option("-m", 
                      action="store_true", 
                      dest="monitor",
                      help="Keep process open and monitor changes",
                      default=False)
    parser.add_option("-w", 
                      action="store_true", 
                      dest="walkdir",
                      help="Walk sub directories of the given directory to find files to send.",
                      default=False)      


    (options,args) = parser.parse_args()

    if (options.username and options.server and options.remote_dir) or \
        os.path.exists(default_config_file):
        local_dir = options.local_dir

        if os.path.exists(default_config_file):
            sys.path.append('.')
            import ftpallcfg
            try:
                server = ftpallcfg.server
                username = ftpallcfg.username
                remote_dir = ftpallcfg.remote_dir
                encrypt = ftpallcfg.encrypt
                monitor = ftpallcfg.monitor
                walk = ftpallcfg.walk
            except AttributeError, e:
                print "ERROR --", str(e.args)
                print
                print 'Value(s) missing in %s file!  The following values MUST be included:' % (default_config_file)
                print '================================'
                print 'server = &lt;server to ftp to&gt;'
                print 'username = &lt;Username for access to given server&gt;'
                print 'remote_dir = &lt;remote server directory&gt;'
                print 'encrypt= True/False'
                print 'monitor = True/False'
                print 'walk == True/False'
                print '================================' 
                sys.exit()
        else:
            server = options.server
            username = options.username
            remote_dir = options.remote_dir
            encrypt = options.encrypt
            monitor = options.monitor
            walk = options.walkdir

        # get the user password
        prompt = 'Password (%s@%s): ' % (username, server)

        if os.isatty(sys.stdin.fileno()):
            p = getpass.getpass(prompt)
        else:
            #p = sys.stdin.readline().rstrip()
            p = raw_input(prompt).rstrip()


        if options.encrypt:
            print '&gt;&gt; Using sftp for secure transfers &lt;&lt;'
            print 

        if monitor:
            try:
                monitor_and_ftp(server,username,p,local_dir, remote_dir, encrypt, walk)
            except KeyboardInterrupt:
                print 'Exiting...'
        else:  
            try:
                upload_all(server, username, p, local_dir, remote_dir, [], encrypt, walk)
            except KeyboardInterrupt:
                print 'Exiting...'            

    else:
        print 'ERROR -- Required option not given!'
        print __revision__
        print __doc__
        print
        parser.print_help()
</snippet></ROW><ROW><id>5664794</id><snippet>from shodan.api import WebAPIError
</snippet></ROW><ROW><id>5664794</id><snippet>try:
    # Here your code
except WebAPIError as e:
    e.args = ('My new message',) # Remember the comma! It is a tuple
    raise # Re-raise the exception
</snippet></ROW><ROW><id>5664794</id><snippet>try:
    # Here your code
except WebAPIError:
    raise WebAPIError('My new message')
</snippet></ROW><ROW><id>5665172</id><snippet>for r in result:
  for d in dict:
    if d['value'] == r:
       print "ok"
</snippet></ROW><ROW><id>5665427</id><snippet>import xmlrpclib
import httplib

class TimeoutHTTPConnection(httplib.HTTPConnection):

    def __init__(self,host,timeout=10):
        httplib.HTTPConnection.__init__(self,host,timeout=timeout)
        self.set_debuglevel(99)
        #self.sock.settimeout(timeout)

"""
class TimeoutHTTP(httplib.HTTP):
    _connection_class = TimeoutHTTPConnection
    def set_timeout(self, timeout):
        self._conn.timeout = timeout
"""

class TimeoutTransport(xmlrpclib.Transport):
    def __init__(self, timeout=10, *l, **kw):
        xmlrpclib.Transport.__init__(self,*l,**kw)
        self.timeout=timeout

    def make_connection(self, host):
        conn = TimeoutHTTPConnection(host,self.timeout)
        return conn

class TimeoutServerProxy(xmlrpclib.ServerProxy):
    def __init__(self,uri,timeout=10,*l,**kw):
        kw['transport']=TimeoutTransport(timeout=timeout, use_datetime=kw.get('use_datetime',0))
        xmlrpclib.ServerProxy.__init__(self,uri,*l,**kw)

if __name__ == "__main__":
    s=TimeoutServerProxy('http://127.0.0.1:8888',timeout=2)
    print s.test()
</snippet></ROW><ROW><id>5665515</id><snippet>python manage.py runtornado --reload 8888
</snippet></ROW><ROW><id>5665631</id><snippet>%e</snippet></ROW><ROW><id>5665631</id><snippet>&gt;&gt;&gt; '%.2e' % 55820.02932238298323
'5.58e+04'
</snippet></ROW><ROW><id>5665804</id><snippet>is</snippet></ROW><ROW><id>5665804</id><snippet>x is y</snippet></ROW><ROW><id>5665804</id><snippet>==</snippet></ROW><ROW><id>5665804</id><snippet>!=</snippet></ROW><ROW><id>5665804</id><snippet>csv</snippet></ROW><ROW><id>5665913</id><snippet># pylint: disable=R0904
</snippet></ROW><ROW><id>5665913</id><snippet># pylint: disable-msg=R0904
</snippet></ROW><ROW><id>5665913</id><snippet># pylint: disable-msg</snippet></ROW><ROW><id>5665913</id><snippet># pylint: disable</snippet></ROW><ROW><id>5666187</id><snippet>db.Model</snippet></ROW><ROW><id>5666187</id><snippet>to_xml()</snippet></ROW><ROW><id>5666461</id><snippet>p = cs.collections[0].get_paths()[0]
v = p.vertices
x = v[:,0]
y = v[:,1]
</snippet></ROW><ROW><id>5666630</id><snippet>pypm -E C:\virtualenvs\myvirtualenv2 install mysql-python
</snippet></ROW><ROW><id>5666643</id><snippet>&gt;&gt;&gt; import yourdbmodelclassnamehere
&gt;&gt;&gt; m = yourmodelclassnamehere(x='',y='')
&gt;&gt;&gt; m.put()
</snippet></ROW><ROW><id>5666643</id><snippet>package remoteapiexample;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.tools.remoteapi.RemoteApiInstaller;
import com.google.appengine.tools.remoteapi.RemoteApiOptions;
import java.io.IOException;

public class RemoteApiExample {
    public static void main(String[] args) throws IOException {
        String username = System.console().readLine("username: ");
        String password = 
            new String(System.console().readPassword("password: "));
        RemoteApiOptions options = new RemoteApiOptions()
            .server("&lt;your app&gt;.appspot.com", 443)
            .credentials(username, password);
        RemoteApiInstaller installer = new RemoteApiInstaller();
        installer.install(options);
        try {
            DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
            System.out.println("Key of new entity is " + 
                ds.put(new Entity("Hello Remote API!")));
        } finally {
            installer.uninstall();
        }
    }
}
</snippet></ROW><ROW><id>5666744</id><snippet>server = NNTP('http://www.news.readfreenews.net')</snippet></ROW><ROW><id>5666744</id><snippet>server = NNTP('news.readfreenews.net')</snippet></ROW><ROW><id>5666744</id><snippet>server = NNTP('www.news.readfreenews.net')</snippet></ROW><ROW><id>5666809</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>5666809</id><snippet>urllib2.addinourl</snippet></ROW><ROW><id>5666809</id><snippet>f.write(image.read())</snippet></ROW><ROW><id>5666822</id><snippet>max()</snippet></ROW><ROW><id>5666822</id><snippet>min()</snippet></ROW><ROW><id>5666822</id><snippet>return max(
    sqrt( abs(x - cx) + abs(y - cy) )
    for cx, cy in chests)
</snippet></ROW><ROW><id>5666822</id><snippet>sqrt(x) &gt; sqrt(y)</snippet></ROW><ROW><id>5666822</id><snippet>x &gt; y</snippet></ROW><ROW><id>5666822</id><snippet>sqrt</snippet></ROW><ROW><id>5666822</id><snippet>return sqrt(max(
    abs(x - cx) + abs(y - cy)
    for cx, cy in chests))
</snippet></ROW><ROW><id>5666822</id><snippet>abs()</snippet></ROW><ROW><id>5666822</id><snippet>sqrt((x-x')^2 + (y-y')^2)</snippet></ROW><ROW><id>5666933</id><snippet>__init__</snippet></ROW><ROW><id>5666933</id><snippet>self.s</snippet></ROW><ROW><id>5666933</id><snippet>super(Person,self)</snippet></ROW><ROW><id>5666933</id><snippet>import uuid

class Element(object):
   def __init__(self,element_type):
        self.oid = None
        self.uuid = uuid.uuid4()
        self.key = None
        self.element_type = element_type

   def params(self):
       print 'here Element'
       return dict(uuid=self.uuid, key=self.key)

class Vertex(Element):
   def __init__(self):
       super(Vertex,self).__init__("vertex")

class Person(Vertex):

   def __init__(self,name=None,uri=None,email=None):
       super(Person,self).__init__()
       self.name=name
       self.uri=uri
       self.email = email

   def params(self):
       print 'here Person'
       params = dict(name=self.name,uri=self.uri,email=self.email)
       params.update(super(Person,self).params())
       return params

class User(Person):

   def __init__(self,
                name=None,
                uri=None,
                email=None,
                first_name=None,
                last_name=None,
                facebook_id=None,
                facebook_link=None,
                facebook_username=None,
                gender=None,
                locale=None):
       super(User,self).__init__(name,uri,email)
       self.first_name = first_name
       self.last_name = last_name
       self.facebook_id = facebook_id
       self.facebook_link = facebook_link
       self.facebook_username = facebook_username
       self.gender = gender
       self.locale = locale

   def params(self):
       params = dict(first_name=self.first_name,
                     last_name=self.last_name,
                     facebook_id=self.facebook_id,
                     facebook_link=self.facebook_link,
                     facebook_username=self.facebook_username,
                     gender=self.gender,
                     locale=self.locale)
       print 'here User'
       params.update(super(User, self).params())
       return params

if __name__ == '__main__':
   u = User()
   print '\n'.join(sorted(u.params().keys()))
</snippet></ROW><ROW><id>5666996</id><snippet>__dict__</snippet></ROW><ROW><id>5666996</id><snippet>imap_unordered</snippet></ROW><ROW><id>5666996</id><snippet>_index</snippet></ROW><ROW><id>5666996</id><snippet>while</snippet></ROW><ROW><id>5666996</id><snippet>completed = rs._index
if (completed == num_tasks): break
print "Waiting for", num_tasks-completed, "tasks to complete..."
time.sleep(2)
</snippet></ROW><ROW><id>5666996</id><snippet>imap_unordered</snippet></ROW><ROW><id>5666996</id><snippet>map_async</snippet></ROW><ROW><id>5666996</id><snippet>map_async</snippet></ROW><ROW><id>5666996</id><snippet>_number_left</snippet></ROW><ROW><id>5666996</id><snippet>ready()</snippet></ROW><ROW><id>5666996</id><snippet>if (rs.ready()): break
remaining = rs._number_left
print "Waiting for", remaining, "tasks to complete..."
time.sleep(0.5)
</snippet></ROW><ROW><id>5667354</id><snippet>def readRows():
    for rownum in range(sh1.nrows):
        rows = sh1.row_values(rownum)
        userNm = rows[4]
        Password = rows[5]
        supID = rows[6]
        print userNm, Password, supID

readRows()
</snippet></ROW><ROW><id>5667354</id><snippet>docs</snippet></ROW><ROW><id>5667354</id><snippet>Returns a slice of the values of the cells in the given row.
</snippet></ROW><ROW><id>5667354</id><snippet>def readRows():
    # using list comprehension
    return [ sh1.row_values(idx, 4, 6) for idx in range(sh1.nrows) ]

print readRows()
</snippet></ROW><ROW><id>5667354</id><snippet>L1 = readRows()
for row in L1:
    print row[0], row[1], row[2]
</snippet></ROW><ROW><id>5667354</id><snippet>def login(name, password, id):
    # do stuff with name password and id passed into method
    ...

for row in L1:
    login(row)
</snippet></ROW><ROW><id>5667354</id><snippet>def readRows():
    rows = [ sh1.row_values(idx, 4, 6) for idx in range(sh1.nrows) ]
    # using list comprehension
    return dict([ [row[4], (row[5], row[6])] for row in rows ])

D1 = readRows()
print D['Bob']
('sdfadfadf',23)

import pprint

pprint.pprint(D1)
{'Bob': ('sdafdfadf',23),
 'Cat': ('asdfa',24),
 'Dog': ('fadfasdf',24)}
</snippet></ROW><ROW><id>5667445</id><snippet>str.split()</snippet></ROW><ROW><id>5667445</id><snippet>list.append()</snippet></ROW><ROW><id>5667445</id><snippet>list_resize()</snippet></ROW><ROW><id>5667552</id><snippet>os.walk</snippet></ROW><ROW><id>5667588</id><snippet>mmap</snippet></ROW><ROW><id>5667823</id><snippet>print</snippet></ROW><ROW><id>5667823</id><snippet>stdout</snippet></ROW><ROW><id>5667935</id><snippet>listOfFiles.sort(key=operator.itemgetter(1, 2))
</snippet></ROW><ROW><id>5667937</id><snippet>**kwargs</snippet></ROW><ROW><id>5668349</id><snippet>&gt;&gt;&gt; int("2,919,247".replace(",", ""))
2919247
</snippet></ROW><ROW><id>5668572</id><snippet>def is_duplicate(a,b):
  if a['name'] == b['name'] and a['cost'] == b['cost'] and abs(int(a['cost']-b['cost'])) &lt; 2:
    return True
  return False

newlist = []
for a in oldlist:
  isdupe = False
  for b in newlist:
    if is_duplicate(a,b):
      isdupe = True
      break
  if not isdupe:
    newlist.append(a)
</snippet></ROW><ROW><id>5668773</id><snippet>inspect</snippet></ROW><ROW><id>5668773</id><snippet>from inspect import getcallargs
def f1(a,b):
   """a==b"""
   pass

def f2(f, *f_args, **f_kwargs):
    f_callargs = getcallargs(f, *f_args, **f_kwargs)
    return eval(f.__doc__, None, f_callargs)

f2(f1, 2, 2)
</snippet></ROW><ROW><id>5668773</id><snippet>True</snippet></ROW><ROW><id>5668773</id><snippet>f2</snippet></ROW><ROW><id>5668773</id><snippet>getcallargs</snippet></ROW><ROW><id>5668773</id><snippet>dict</snippet></ROW><ROW><id>5668773</id><snippet>zip</snippet></ROW><ROW><id>5668962</id><snippet>str.replace()</snippet></ROW><ROW><id>5669111</id><snippet>class FibSet:
    '''Fibonacci sequence with the in operator defined'''

    def __init__(self):
        self.a, self.b = 0, 1
        self.fib = set()

    def __contains__(self, n):
        if n &gt; self.b:
            self.compute_upto(n)
        return n in self.fib

    def compute_upto(self, n):
        while self.b &lt; n:
            self.fib.add(self.a)
            self.a, self.b = self.b, self.a + self.b
</snippet></ROW><ROW><id>5669246</id><snippet>lambda</snippet></ROW><ROW><id>5669246</id><snippet>map</snippet></ROW><ROW><id>5669246</id><snippet>dict</snippet></ROW><ROW><id>5669246</id><snippet>header.version = read_field(edf, 8);
header.patinfo = read_field(edf, 80);
</snippet></ROW><ROW><id>5669301</id><snippet>import matplotlib.pylab as plt
import numpy as np

# If you're not familiar with np.r_, don't worry too much about this. It's just 
# a series with points from 0 to 1 spaced at 0.1, and 9 to 10 with the same spacing.
x = np.r_[0:1:0.1, 9:10:0.1]
y = np.sin(x)

fig,(ax,ax2) = plt.subplots(1, 2, sharey=True)

# plot the same data on both axes
ax.plot(x, y, 'bo')
ax2.plot(x, y, 'bo')

# zoom-in / limit the view to different portions of the data
ax.set_xlim(0,1) # most of the data
ax2.set_xlim(9,10) # outliers only

# hide the spines between ax and ax2
ax.spines['right'].set_visible(False)
ax2.spines['left'].set_visible(False)
ax.yaxis.tick_left()
ax.tick_params(labeltop='off') # don't put tick labels at the top
ax2.yaxis.tick_right()

# Make the spacing between the two axes a bit smaller
plt.subplots_adjust(wspace=0.15)

plt.show()
</snippet></ROW><ROW><id>5669301</id><snippet>//</snippet></ROW><ROW><id>5669301</id><snippet>import matplotlib.pylab as plt
import numpy as np

# If you're not familiar with np.r_, don't worry too much about this. It's just 
# a series with points from 0 to 1 spaced at 0.1, and 9 to 10 with the same spacing.
x = np.r_[0:1:0.1, 9:10:0.1]
y = np.sin(x)

fig,(ax,ax2) = plt.subplots(1, 2, sharey=True)

# plot the same data on both axes
ax.plot(x, y, 'bo')
ax2.plot(x, y, 'bo')

# zoom-in / limit the view to different portions of the data
ax.set_xlim(0,1) # most of the data
ax2.set_xlim(9,10) # outliers only

# hide the spines between ax and ax2
ax.spines['right'].set_visible(False)
ax2.spines['left'].set_visible(False)
ax.yaxis.tick_left()
ax.tick_params(labeltop='off') # don't put tick labels at the top
ax2.yaxis.tick_right()

# Make the spacing between the two axes a bit smaller
plt.subplots_adjust(wspace=0.15)

# This looks pretty good, and was fairly painless, but you can get that
# cut-out diagonal lines look with just a bit more work. The important
# thing to know here is that in axes coordinates, which are always
# between 0-1, spine endpoints are at these locations (0,0), (0,1),
# (1,0), and (1,1). Thus, we just need to put the diagonals in the
# appropriate corners of each of our axes, and so long as we use the
# right transform and disable clipping.

d = .015 # how big to make the diagonal lines in axes coordinates
# arguments to pass plot, just so we don't keep repeating them
kwargs = dict(transform=ax.transAxes, color='k', clip_on=False)
ax.plot((1-d,1+d),(-d,+d), **kwargs) # top-left diagonal
ax.plot((1-d,1+d),(1-d,1+d), **kwargs) # bottom-left diagonal

kwargs.update(transform=ax2.transAxes) # switch to the bottom axes
ax2.plot((-d,d),(-d,+d), **kwargs) # top-right diagonal
ax2.plot((-d,d),(1-d,1+d), **kwargs) # bottom-right diagonal

# What's cool about this is that now if we vary the distance between
# ax and ax2 via f.subplots_adjust(hspace=...) or plt.subplot_tool(),
# the diagonal lines will move accordingly, and stay right at the tips
# of the spines they are 'breaking'

plt.show()
</snippet></ROW><ROW><id>5670089</id><snippet>def recursiveLength(theString):
    if theString == '': return 0
    return 1 + recursiveLength(theString[1:])
</snippet></ROW><ROW><id>5670103</id><snippet>os.system("python executer.pyc")
</snippet></ROW><ROW><id>5670656</id><snippet>string.maketrans</snippet></ROW><ROW><id>5670656</id><snippet>string.translate</snippet></ROW><ROW><id>5670806</id><snippet>In [11]: from Cookie import SimpleCookie

In [12]: c = SimpleCookie()

In [13]: c['test'] = 'MYTEST'

In [14]: print c
Set-Cookie: test=MYTEST
</snippet></ROW><ROW><id>5670880</id><snippet>while</snippet></ROW><ROW><id>5670880</id><snippet>    f = next(a)
    for words in frequencies:
        # we need a new value from fib, since we have passed the current one
        while words[1] &gt; f:
            f = next(a)
        # if the frequency of this word matches the fib value, print it
        if words[1] == f:
            print(words)
</snippet></ROW><ROW><id>5670881</id><snippet>import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

mymetadata = sa.MetaData()
Base = declarative_base(metadata=mymetadata)
Session = sessionmaker(bind=sa.engine)

session = Session()

class Person(Base):
    __tablename__ = 'some_table'
    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(50))


print sa.select([Person.name, sa.text('NULL as null_bar')])

&gt;&gt;&gt; SELECT some_table.name, NULL as null_bar 
FROM some_table
</snippet></ROW><ROW><id>5671091</id><snippet>from pyparsing import Suppress, Word, nums, oneOf, Regex, ZeroOrMore, Optional

# define basic punctuation
EQ,LPAR,RPAR,LBRACK,RBRACK = map(Suppress,"=()[]")

# numeric values
integer = Word(nums).setParseAction(lambda t : int(t[0]))
real = Regex(r"[+-]?\d+\.\d*").setParseAction(lambda t : float(t[0]))

# id and assignment fields
idRef = LBRACK + integer("id") + RBRACK
typesep = LPAR + oneOf("D G") + RPAR
lExpr = 'L' + EQ + integer("Lint")
rExpr = 'R' + EQ + integer("Rint")
pExpr = 'p' + EQ + real("pFloat")
eExpr = 'e' + EQ + integer("Eint")
nExpr = 'n' + EQ + integer("Nint")

# accept assignments in any order, with or without leading (D) or (G)
assignment = lExpr | rExpr | pExpr | eExpr | nExpr
line = idRef + lExpr + ZeroOrMore(Optional(typesep) + assignment)


# test the parser
text = "[ 0 ] L= 9 (D) R= 14 (D) p= 0.0347222 e= 10 n= 34"
data = line.parseString(text)
print data.dump()


# prints
# [0, 'L', 9, 'D', 'R', 14, 'D', 'p', 0.034722200000000002, 'e', 10, 'n', 34]
# - Eint: 10
# - Lint: 9
# - Nint: 34
# - Rint: 14
# - id: 0
# - pFloat: 0.0347222
</snippet></ROW><ROW><id>5671091</id><snippet>Word(nums)</snippet></ROW><ROW><id>5671568</id><snippet>def paths(tree):
  #Helper function
  #receives a tree and 
  #returns all paths that have this node as root and all other paths

  if tree is the empty tree:
    return ([], [])
  else: #tree is a node
    root = tree.value
    rooted_paths = [[root]]
    unrooted_paths = []
    for subtree in tree.children:
        (useable, unueseable) = paths(subtree)
        for path in useable:
            unrooted_paths.append(path)
            rooted_paths.append([root]+path)
        for path in unuseable:
            unrooted_paths.append(path)
    return (rooted_paths, unrooted_paths)

def the_function_you_use_in_the_end(tree):
   a,b = paths(tree)
   return a+b
</snippet></ROW><ROW><id>5671587</id><snippet>import rpyc
conn = rpyc.classic.connect("hostname")  # assuming a classic server is running on 'hostname'

print conn.modules.sys.path
conn.modules.sys.path.append("lucy")
print conn.modules.sys.path[-1]

# a version of 'ls' that runs remotely
def remote_ls(path):
    ros = conn.modules.os
    for filename in ros.listdir(path):
        stats = ros.stat(ros.path.join(path, filename))
        print "%d\t%d\t%s" % (stats.st_size, stats.st_uid, filename)

remote_ls("/usr/bin")

# and exceptions...
try:
     f = conn.builtin.open("/non/existent/file/name")
except IOError:
     pass
</snippet></ROW><ROW><id>5671651</id><snippet>import csv
cursor = connection.cursor() # assuming you know how to connect to your oracle db
cursor.execute('select * from table_you_want_to_turn_to_csv')
with open('output_file.csv', 'wb') as fout:
    writer = csv.writer(fout)
    writer.writerow([ i[0] for i in cursor.description ]) # heading row
    writer.writerows(cursor.fetchall())
</snippet></ROW><ROW><id>5671963</id><snippet>Xcode 4</snippet></ROW><ROW><id>5671963</id><snippet>Xcode 3</snippet></ROW><ROW><id>5671963</id><snippet>i386</snippet></ROW><ROW><id>5671963</id><snippet>x86_64</snippet></ROW><ROW><id>5671963</id><snippet>ppc</snippet></ROW><ROW><id>5671963</id><snippet>Xcode 4</snippet></ROW><ROW><id>5671963</id><snippet>ppc</snippet></ROW><ROW><id>5671963</id><snippet>ARCHFLAGS</snippet></ROW><ROW><id>5671963</id><snippet>sudo bash
export ARCHFLAGS='-arch i386 -arch x86_64'
rm -r build
python setup.py build
python setup.py install
</snippet></ROW><ROW><id>5672092</id><snippet>General_Category, Script, Alphabetic, Uppercase, Lowercase, White_Space, Noncharacter_Code_Point, Default_Ignorable_Code_Point, ANY, ASCII,</snippet></ROW><ROW><id>5672092</id><snippet>ASSIGNED</snippet></ROW><ROW><id>5672136</id><snippet>for i,tax in enumerate(othertaxes):
    basecost += tax.calculate(basecost,othertaxes[:i])
</snippet></ROW><ROW><id>5672439</id><snippet>for row in table:
    row[1:] = [int(c) for c in row[1:]]
</snippet></ROW><ROW><id>5672643</id><snippet>''</snippet></ROW><ROW><id>5672643</id><snippet>Person.objects.filter(resume='')
</snippet></ROW><ROW><id>5672643</id><snippet>CharField()</snippet></ROW><ROW><id>5672643</id><snippet>Filefield</snippet></ROW><ROW><id>5672643</id><snippet>Model Field References regarding Null</snippet></ROW><ROW><id>5672827</id><snippet>img = Image.frombuffer(mode, size, data)</snippet></ROW><ROW><id>5672827</id><snippet>img.save('image.png', transparency=transparency)</snippet></ROW><ROW><id>5673187</id><snippet>plt.imshow(E[:,:], cmap = 'spectral', vmin=0)
</snippet></ROW><ROW><id>5673576</id><snippet>(n,l,k) = [int(v) for v in raw_input().split()]
</snippet></ROW><ROW><id>5673576</id><snippet>print [t(tok) for (t, tok) in zip((int, str, int), raw_input().split())]
</snippet></ROW><ROW><id>5673648</id><snippet>zipstream</snippet></ROW><ROW><id>5673648</id><snippet>zipf</snippet></ROW><ROW><id>5673648</id><snippet>zipstream</snippet></ROW><ROW><id>5674150</id><snippet>fabric.contrib.files.uncomment</snippet></ROW><ROW><id>5674150</id><snippet>from fabric.contrib.files import uncomment
uncomment("~/.bashrc", "^#force_color_prompt=yes", char='#')
</snippet></ROW><ROW><id>5674209</id><snippet>job.wait()</snippet></ROW><ROW><id>5674209</id><snippet>top</snippet></ROW><ROW><id>5674233</id><snippet>CPI &lt;- c(102.3, 103.1, 104.3, 105.7, 106.2, 106.6, 107, 108.2, 108.5, 108.9, 
        108.9, 108.9, 109.2, 109.5, 110.2, 111.1, 111.3, 111.5, 111.5, 
        112.2, 112.3, 112.4, 112.6, 112.8, 113, 113.5, 114.3)
</snippet></ROW><ROW><id>5674233</id><snippet>dCPI &lt;- ts(CPI[-1] - CPI[-length(CPI)], start=2008, frequency=12)
</snippet></ROW><ROW><id>5674233</id><snippet>plot(stl(dCPI, "periodic"))
</snippet></ROW><ROW><id>5674273</id><snippet>docRelCounts = docCounts/docLengths

goodDocRelCounts = docRelCounts[i,:][np.invert(np.isnan(docRelCounts[i,:]))]
relCountMeans = goodDocRelCounts.mean()
relCountDeviations = goodDocRelCounts.std()
</snippet></ROW><ROW><id>5674273</id><snippet>np.isnan</snippet></ROW><ROW><id>5674273</id><snippet>True</snippet></ROW><ROW><id>5674273</id><snippet>NaN</snippet></ROW><ROW><id>5674273</id><snippet>False</snippet></ROW><ROW><id>5674273</id><snippet>np.invert</snippet></ROW><ROW><id>5674273</id><snippet>goodDocRelCounts</snippet></ROW><ROW><id>5674273</id><snippet>NaN</snippet></ROW><ROW><id>5674421</id><snippet>hours_ahead</snippet></ROW><ROW><id>5674421</id><snippet>from mysite.views import current_datetime, hours_ahead
</snippet></ROW><ROW><id>5675027</id><snippet>tests.update({t.name:site.copy()})</snippet></ROW><ROW><id>5675027</id><snippet>Test1 -&gt; site1 -&gt; test_results1
         site2 -&gt; test_results2
         ...

Test2 -&gt; site1 -&gt; test_results1
         site2 -&gt; test_results2
         ...
</snippet></ROW><ROW><id>5675027</id><snippet>tests={}
for t in Test.objects.all():
    sites={}
    for s in Site.objects.all():
        site_results={}
        for sv in s.siteversions.all():
            results=sv.results.filter(idTest=t)
            result = ''
            if(results):
                result=results[0].result_test()
            site_results[sv.version] = result
    sites[s.name] = site_results
tests[t.name] = sites

print tests
</snippet></ROW><ROW><id>5675147</id><snippet>np.array(test)                                       # 1.19s

np.fromiter(test, dtype=np.int)                      # 1.08s

np.frombuffer(test)                                  # 459ns !!!
</snippet></ROW><ROW><id>5675282</id><snippet>lock = flock('tmp.lock', True).acquire()
</snippet></ROW><ROW><id>5675282</id><snippet>'tmp.lock'</snippet></ROW><ROW><id>5675282</id><snippet>'c:/tmp-folder/tmp.lock'</snippet></ROW><ROW><id>5675282</id><snippet>lock = flock('c:/tmp-folder/tmp.lock', True).acquire()
</snippet></ROW><ROW><id>5675450</id><snippet>collection = models.ForeignKey('Collection') # Collection is in the same module
</snippet></ROW><ROW><id>5675450</id><snippet>collection = models.ForeignKey('myapp.Collection') # Collection is in another app
</snippet></ROW><ROW><id>5675686</id><snippet>cursor.fetchone() 
</snippet></ROW><ROW><id>5675686</id><snippet>row = cur1.fetchone()
</snippet></ROW><ROW><id>5675954</id><snippet>import fileinput
for line in fileinput.input():
  process(line)
</snippet></ROW><ROW><id>5676417</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>5676525</id><snippet>def build_ports(portlist)
    ports = []
    for idx, portname in enumerate(portlist):
        ports.append(Port())
        ports[-1].port_method1()
        if idx &gt; 5:
            ports[-1].port_method2()
</snippet></ROW><ROW><id>5676525</id><snippet>ports[-1]</snippet></ROW><ROW><id>5676525</id><snippet>portname</snippet></ROW><ROW><id>5676525</id><snippet>portname = Port()</snippet></ROW><ROW><id>5676525</id><snippet>ports</snippet></ROW><ROW><id>5676525</id><snippet>portlist</snippet></ROW><ROW><id>5676676</id><snippet>str.ljust(width[, fillchar])</snippet></ROW><ROW><id>5676676</id><snippet>len(s)</snippet></ROW><ROW><id>5676676</id><snippet>&gt;&gt;&gt; 'hi'.ljust(10)
'hi        '
</snippet></ROW><ROW><id>5677769</id><snippet>{% regroup dict by col_mapper as column_gr %}

{% for column in column_gr %}                
    {{ column.grouper }}&lt;br&gt;
    {# assign the grouper to another variable #}
    {% with column.grouper as grouper %}
        {% regroup grouper by main_title as item_gr %}
        {% for i in item_gr %}
            {{ i }}
        {% endfor %}
    {% endwith %}
{% endfor %}
</snippet></ROW><ROW><id>5677832</id><snippet>def observer(self, data):
    self.odd_sample = !self.odd_sample
    if self.odd_sample:
        print str(data)
</snippet></ROW><ROW><id>5677832</id><snippet>while True:
    y = producer()
    print(y)
    y = producer()
    # ignore this value
</snippet></ROW><ROW><id>5677975</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>5678148</id><snippet>cache = {}

def load_cache():
    """Load hotels into {id: data} dict cache."""
    rows = db.select('hotels')
    for row in rows:
        cache[row.id] = row

def get_hotel(hotel_id):
    """Get data for hotel with given ID, or return None if not found."""
    if not cache:
        raise Exception('hotels cache not loaded')
    return cache.get(hotel_id)
</snippet></ROW><ROW><id>5678148</id><snippet>import hotels

def main():
    hotels.load_cache()
    start_server()
</snippet></ROW><ROW><id>5678516</id><snippet>.strip()</snippet></ROW><ROW><id>5678516</id><snippet>.read()</snippet></ROW><ROW><id>5678516</id><snippet>.splitlines()</snippet></ROW><ROW><id>5678516</id><snippet>subject_dic = {}
inputFile = open(filename)

# Turn "line1\nline2\n" into ['line1', 'line2']
inputData = inputFile.read().splitlines()

#for line in inputFile:
for line in inputData:
    #split_line = string.split(line, ',')
    #subject_dic[split_line[0]] = tuple(split_line[1:3])
    mykey, myval1, myval2 = line.split(',') # Strings always have .split()
    subject_dic[mykey] = (myval1, myval2) # Explicit tuple assignment

print subject_dic
</snippet></ROW><ROW><id>5678516</id><snippet>{'6.00': ('10', '1'),
 '6.01': ('5', '4'),
 '6.02': ('5', '6'),
 '6.03': ('2', '9'),
 '6.04': ('1', '2'),
 '6.05': ('1', '18'),
 '6.06': ('5', '19'),
 '6.07': ('2', '10'),
 '6.08': ('1', '10'),
 '6.09': ('3', '7'),
 '6.10': ('8', '18'),
 '6.11': ('6', '8'),
 '6.12': ('6', '3'),
 '6.13': ('9', '16'),
 '6.14': ('10', '8'),
 '6.15': ('10', '6'),
 '6.16': ('6', '9'),
 '6.17': ('9', '3'),
 '6.18': ('10', '4'),
 '6.19': ('8', '19')}
</snippet></ROW><ROW><id>5678753</id><snippet>login_required</snippet></ROW><ROW><id>5678753</id><snippet>def my_login_required(function):
    def wrapper(request, *args, **kw):
        user=request.user  
        if not (user.id and request.session.get('code_success')):
            return HttpResponseRedirect('/splash/')
        else:
            return function(request, *args, **kw)
    return wrapper
</snippet></ROW><ROW><id>5678806</id><snippet>pyramid_formalchemy</snippet></ROW><ROW><id>5678806</id><snippet>'view', 'edit', 'delete', 'new'</snippet></ROW><ROW><id>5678806</id><snippet>__acl__</snippet></ROW><ROW><id>5678806</id><snippet>__acl__</snippet></ROW><ROW><id>5678806</id><snippet>pyramid_formalchemy</snippet></ROW><ROW><id>5678806</id><snippet>pyramidapp</snippet></ROW><ROW><id>5678806</id><snippet>class Bar(Base):
    __tablename__ = 'bar'
    __acl__ = [
            (Allow, 'admin', ALL_PERMISSIONS),
            (Allow, 'bar_manager', ('view', 'new', 'edit', 'delete')),
        ]
    id = Column(Integer, primary_key=True)
    foo = Column(Unicode(255))
</snippet></ROW><ROW><id>5678806</id><snippet>__acl__</snippet></ROW><ROW><id>5678806</id><snippet>factory</snippet></ROW><ROW><id>5678806</id><snippet>pyramid_formalchemy</snippet></ROW><ROW><id>5678806</id><snippet>pyramid_formalchemy.resources.Models</snippet></ROW><ROW><id>5678806</id><snippet>__acl__</snippet></ROW><ROW><id>5678806</id><snippet>from pyramid_formalchemy.resources import Models

class ModelsWithACL(Models):
    """A factory to override the default security setting"""
    __acl__ = [
            (Allow, 'admin', ALL_PERMISSIONS),
            (Allow, Authenticated, 'view'),
            (Allow, 'editor', 'edit'),
            (Allow, 'manager', ('new', 'edit', 'delete')),
        ]

config.formalchemy_admin('admin', package='package', view=..., factory=ModelsWithACL)
</snippet></ROW><ROW><id>5678843</id><snippet>from suds.client import Client

url = 'http://localhost:7080/webservices/WebServiceTestBean?wsdl'
client = Client(url)
result = client.service.MyMethod(args)
</snippet></ROW><ROW><id>5679249</id><snippet>rdflib</snippet></ROW><ROW><id>5679249</id><snippet>rapper</snippet></ROW><ROW><id>5679249</id><snippet>RDF/XML</snippet></ROW><ROW><id>5679249</id><snippet>ntriples</snippet></ROW><ROW><id>5679249</id><snippet>rapper</snippet></ROW><ROW><id>5679249</id><snippet>rapper -i rdfxml -o ntriples YOUR_FILE.rdf &gt; YOUR_FILE.ntriples</snippet></ROW><ROW><id>5679249</id><snippet>import RDF
parser=RDF.Parser(name="ntriples")
model=RDF.Model()
stream=parser.parse_into_model(model,"file://file_path",
                                      "http://your_base_uri.org")
for triple in model:
    print triple.subject, triple.predicate, triple.object
</snippet></ROW><ROW><id>5679304</id><snippet>import Image
import matplotlib.pyplot as plt
import numpy

N = 20
size = 4
x_data = y_data = range(N)

fig = plt.figure()

prev = None
for n in range(0, N, size):
    # clear figure
    plt.clf()

    # set axes background transparent for plots n &gt; 0
    if n:
        fig.patch.set_alpha(0.0)
        axes = plt.axes()
        axes.patch.set_alpha(0.0)

    plt.axis([0, N, 0, N])

    # here you'd read the next x/y values from disk into memory and plot
    # them.  simulated by grabbing batches from the arrays.
    x = x_data[n:n+size]
    y = y_data[n:n+size]
    ax = plt.plot(x, y, 'ro')
    del x, y

    # render the points
    plt.draw()

    # now composite the current image over the previous image
    w, h = fig.canvas.get_width_height()
    buf = numpy.fromstring(fig.canvas.tostring_argb(), dtype=numpy.uint8)
    buf.shape = (w, h, 4)
    # roll alpha channel to create RGBA
    buf = numpy.roll(buf, 3, axis=2)
    w, h, _ = buf.shape
    img = Image.fromstring("RGBA", (w, h), buf.tostring())
    if prev:
        # overlay current plot on previous one
        prev.paste(img)
        del prev
    prev = img

# save the final image
prev.save('plot.png')
</snippet></ROW><ROW><id>5679448</id><snippet>Entry</snippet></ROW><ROW><id>5679448</id><snippet>ForeignKey</snippet></ROW><ROW><id>5679448</id><snippet>Manager</snippet></ROW><ROW><id>5679448</id><snippet>Manager</snippet></ROW><ROW><id>5679448</id><snippet>FOO_set</snippet></ROW><ROW><id>5679448</id><snippet>FOO</snippet></ROW><ROW><id>5679557</id><snippet>/Zc:wchar_t-</snippet></ROW><ROW><id>5679557</id><snippet>CMakeLists.txt</snippet></ROW><ROW><id>5679569</id><snippet>__ini__.py</snippet></ROW><ROW><id>5679569</id><snippet>QApplication</snippet></ROW><ROW><id>5679569</id><snippet>app.exec_()</snippet></ROW><ROW><id>5679569</id><snippet>__init__.py</snippet></ROW><ROW><id>5679742</id><snippet>transform=ax.transAxes</snippet></ROW><ROW><id>5679742</id><snippet>Polygon</snippet></ROW><ROW><id>5679742</id><snippet>Rectangle</snippet></ROW><ROW><id>5679742</id><snippet>transFigure</snippet></ROW><ROW><id>5679742</id><snippet>from matplotlib import pyplot as plt
from matplotlib.patches import Polygon
import numpy as np
x = np.linspace(0,5,100)
y = np.sin(x)

plt.plot(x,y)
ax = plt.gca()

polygon = Polygon([[.1,.1],[.3,.2],[.2,.3]], True, transform=ax.transAxes)
ax.add_patch(polygon)

plt.show()
</snippet></ROW><ROW><id>5679742</id><snippet>from matplotlib import pyplot as plt
from matplotlib.patches import Polygon
import numpy as np

x = np.linspace(0,5,100)
y = np.sin(x)

plt.plot(x,y)
ax = plt.gca()

dta_pts = [[.5,-.75],[1.5,-.6],[1,-.4]]

# coordinates converters:
#ax_to_display = ax.transAxes.transform
display_to_ax = ax.transAxes.inverted().transform
data_to_display = ax.transData.transform
#display_to_data = ax.transData.inverted().transform

ax_pts = display_to_ax(data_to_display(dta_pts))

# this triangle will move with the plot
ax.add_patch(Polygon(dta_pts, True)) 
# this triangle will stay put relative to the axes bounds
ax.add_patch(Polygon(ax_pts, True, transform=ax.transAxes))

plt.show()
</snippet></ROW><ROW><id>5679746</id><snippet>l = [[1,2,3,4,5,6,7,8],[9,8,8,4,3,4,5,7,8],[5,6,7,4,9,9,9,8],[0,0,1,4,7,6,3,8]]

p = [i for i, j in enumerate(zip(*l)) if all(j[0]==k for k in j[1:])]

# p == [3] - because of some typo in your original list, probably too many elements in the second list.
</snippet></ROW><ROW><id>5679746</id><snippet>p = []
for i, j in enumerate(zip(*l)):
    if all(j[0]==k for k in j[1:]):
        p.append(i)
</snippet></ROW><ROW><id>5679746</id><snippet>zip(*l)</snippet></ROW><ROW><id>5679746</id><snippet>[(1, 9, 5, 0),
 (2, 8, 6, 0),
 (3, 8, 7, 1),
 (4, 4, 4, 4),
 (5, 3, 9, 7),
 (6, 4, 9, 6),
 (7, 5, 9, 3),
 (8, 7, 8, 8)]
</snippet></ROW><ROW><id>5679746</id><snippet>enumerate()</snippet></ROW><ROW><id>5679746</id><snippet>all(j[0]==k for k in j[1:])</snippet></ROW><ROW><id>5679746</id><snippet>True</snippet></ROW><ROW><id>5679746</id><snippet>False</snippet></ROW><ROW><id>5679746</id><snippet>False</snippet></ROW><ROW><id>5679899</id><snippet>set()</snippet></ROW><ROW><id>5679899</id><snippet>yield</snippet></ROW><ROW><id>5679899</id><snippet>tuple()</snippet></ROW><ROW><id>5679899</id><snippet>saved</snippet></ROW><ROW><id>5679899</id><snippet>def merge(times):
    saved = list(times[0])
    for st, en in sorted([sorted(t) for t in times]):
        if st &lt;= saved[1]:
            saved[1] = max(saved[1], en)
        else:
            yield tuple(saved)
            saved[0] = st
            saved[1] = en
    yield tuple(saved)

data = [
    [(1, 5), (2, 4), (3, 6)],
    [(1, 3), (2, 4), (5, 8)]
    ]

for times in data:
    print list(merge(times))
</snippet></ROW><ROW><id>5680145</id><snippet>-e VCS+REPOS_URL[@REV]#egg=PACKAGE, --editable=VCS+REPOS_URL[@REV]#egg=PACKAGE
</snippet></ROW><ROW><id>5680978</id><snippet>import locale
import os

locale.setlocale(locale.LC_ALL, "")

def get_size(state, root, names):
    paths = [os.path.realpath(os.path.join(root, n)) for n in names]
    # handles dangling symlinks
    state[0] += sum(os.stat(p).st_size for p in paths if os.path.exists(p))

def print_sizes(root):
    total = 0
    paths = []
    state = [0]
    n_ind = s_ind = 0
    for name in sorted(os.listdir(root)):
        path = os.path.join(root, name)
        if not os.path.isdir(path):
            continue

        state[0] = 0
        os.path.walk(path, get_size, state)
        total += state[0]
        s_size = locale.format('%8.0f', state[0], 3)
        n_ind = max(n_ind, len(name), 5)
        s_ind = max(s_ind, len(s_size))
        paths.append((name, s_size))

    for name, size in paths:
        print name.ljust(n_ind), size.rjust(s_ind), 'bytes'
    s_total = locale.format('%8.0f', total, 3)
    print '\ntotal'.ljust(n_ind), s_total.rjust(s_ind), 'bytes'

print_sizes('.')
</snippet></ROW><ROW><id>5680978</id><snippet>% python dirsizes.py
bar    102,672 bytes
foo    102,400 bytes

total  205,072 bytes
</snippet></ROW><ROW><id>5681030</id><snippet>import ftplib

def callback(p):
    print("This is the callback function")

s = ftplib.FTP('myserver.com','login','password') # Connect

f = open('test.txt','rb')                # file to send
s.storbinary('STOR test.txt', f, 1024, callback)         # Send the file

f.close()                                # Close file and FTP
s.quit()
</snippet></ROW><ROW><id>5681030</id><snippet>callback</snippet></ROW><ROW><id>5681030</id><snippet>None</snippet></ROW><ROW><id>5681036</id><snippet>import StringIO
import tarfile

tar = tarfile.open('example.tar.gz', 'w:gz')

# create a file record
data = StringIO.StringIO('this is some text')
info = tar.tarinfo()
info.name = 'foo.txt'
info.uname = 'pat'
info.gname = 'users'
info.size = data.len

# add the file to the tar and close it
tar.addfile(info, data)
tar.close()
</snippet></ROW><ROW><id>5681036</id><snippet>% tar tvf example.tar.gz
-rw-r--r--  0 pat    users       17 Dec 31  1969 foo.txt
</snippet></ROW><ROW><id>5681074</id><snippet>raw_input()</snippet></ROW><ROW><id>5681074</id><snippet>None</snippet></ROW><ROW><id>5681074</id><snippet>""</snippet></ROW><ROW><id>5681074</id><snippet>if not string_name:
    # whatever
</snippet></ROW><ROW><id>5681201</id><snippet>self.statusBar.showMessage('Ready')</snippet></ROW><ROW><id>5681201</id><snippet>self.statusBar().showMessage('Ready')</snippet></ROW><ROW><id>5681291</id><snippet>and</snippet></ROW><ROW><id>5681291</id><snippet>while input != 10 and input != 20:
</snippet></ROW><ROW><id>5681291</id><snippet>input</snippet></ROW><ROW><id>5681291</id><snippet>10</snippet></ROW><ROW><id>5681291</id><snippet>false</snippet></ROW><ROW><id>5681291</id><snippet>input != 20</snippet></ROW><ROW><id>5681291</id><snippet>10</snippet></ROW><ROW><id>5681291</id><snippet>20</snippet></ROW><ROW><id>5681291</id><snippet>true</snippet></ROW><ROW><id>5681291</id><snippet>false or true == true</snippet></ROW><ROW><id>5681291</id><snippet>true</snippet></ROW><ROW><id>5681291</id><snippet>20</snippet></ROW><ROW><id>5681405</id><snippet>import numpy
a = numpy.random.randint(0, 10, size=10)
b = numpy.a[3:10]
</snippet></ROW><ROW><id>5681405</id><snippet>a = numpy.random.randint(0, 10, size=10)
b = numpy.frombuffer(a.data, dtype='int8')
</snippet></ROW><ROW><id>5681405</id><snippet>a = numpy.random.randint(0, 10, size=(10, 10))
b = numpy.frombuffer(a[3,:].data, dtype='int8')
</snippet></ROW><ROW><id>5681405</id><snippet>b = numpy.frombuffer(a[:,3].data, dtype='int8')
</snippet></ROW><ROW><id>5681405</id><snippet>b  = a[:,3]
</snippet></ROW><ROW><id>5681405</id><snippet>a[:,3].flags
</snippet></ROW><ROW><id>5681405</id><snippet>a[3,:].flags
</snippet></ROW><ROW><id>5681513</id><snippet>blah bloo cake
donky cat sparrow
nago cheese
</snippet></ROW><ROW><id>5681513</id><snippet>lcount = 1
with open("file", "r") as f:
    for line in f:
        if word in line:
            testline = line.split()
            ind = testline.index("sparrow")
            print "Word sparrow found at line %d, word %d" % (lcount, ind+1)
            break
        else:
            lcount += 1
</snippet></ROW><ROW><id>5681513</id><snippet>Word sparrow found at line 2, word 3
</snippet></ROW><ROW><id>5681513</id><snippet>def findword(objf, word):
    lcount = 1
    found = False
    with open(objf, "r") as f:
        for line in f:
            if word in line: # If word is in line
                testline = line.split()
                ind = testline.index(word) # This is the index, starting from 0
                found = True
                break
            else:
                lcount += 1
        if found:
            print "Word %s found at line %d, word %d" % (word, lcount, ind+1)
        else:
            print "Not found"
</snippet></ROW><ROW><id>5681513</id><snippet>&gt;&gt;&gt; findword('file', "sparrow")
Word sparrow found at line 2, word 3
&gt;&gt;&gt; findword('file', "donkey")
Not found
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5681621</id><snippet>import unittest


class ts(unittest.TestCase):
    def test_null(self): self.assertTrue(True)
class ts1(unittest.TestCase):
    def test_null(self): self.assertTrue(True)



testSuite = unittest.TestSuite()

testSuite.addTests(unittest.makeSuite(ts))
testSuite.addTest(unittest.makeSuite(ts1))

import doctest
import my_module_with_doctests

testSuite.addTest(doctest.DocTestSuite(my_module_with_doctests))

unittest.TextTestRunner(verbosity = 2).run(testSuite)
</snippet></ROW><ROW><id>5681651</id><snippet>from cStringIO import StringIO
import gnupg
import logging
import os
import shutil

def generate_key(gpg, first_name, last_name, domain, passphrase=None):
    "Generate a key"
    params = {
        'Key-Type': 'DSA',
        'Key-Length': 1024,
        'Subkey-Type': 'ELG-E',
        'Subkey-Length': 2048,
        'Name-Comment': 'A test user',
        'Expire-Date': 0,
    }
    params['Name-Real'] = '%s %s' % (first_name, last_name)
    params['Name-Email'] = ("%s.%s@%s" % (first_name, last_name, domain)).lower()
    if passphrase is None:
        passphrase = ("%s%s" % (first_name[0], last_name)).lower()
    params['Passphrase'] = passphrase
    cmd = gpg.gen_key_input(**params)
    return gpg.gen_key(cmd)

def init_logging():
    logging.basicConfig(level=logging.DEBUG, filename="gpg.log",
                        filemode="w", format="%(asctime)s %(levelname)-5s %(name)-10s %(threadName)-10s %(message)s")

def print_info(decrypted):
    print('User name: %s' % decrypted.username)
    print('Key id: %s' % decrypted.key_id)
    print('Signature id: %s' % decrypted.signature_id)
    #print('Signature timestamp: %s' % decrypted.sig_timestamp)
    print('Fingerprint: %s' % decrypted.fingerprint)

def main():
    init_logging()
    if os.path.exists('keys'):
        shutil.rmtree('keys')
    gpg = gnupg.GPG(gnupghome='keys')
    key = generate_key(gpg, "Andrew", "Able", "alpha.com",
                            passphrase="andy")
    andrew = key.fingerprint
    key = generate_key(gpg, "Barbara", "Brown", "beta.com")
    barbara = key.fingerprint
    #First - without signing
    data = 'Top secret'
    encrypted = gpg.encrypt_file(StringIO(data), barbara,
                                 #sign=andrew, passphrase='andy',
                                 output='encrypted.txt')
    assert encrypted.status == 'encryption ok'
    # Data is in encrypted.txt. Read it in and verify/decrypt it.
    data = open('encrypted.txt', 'r').read()
    decrypted = gpg.decrypt(data, passphrase='bbrown', output='decrypted.txt')
    print_info(decrypted)
    #Now with signing
    data = 'Top secret'
    encrypted = gpg.encrypt_file(StringIO(data), barbara,
                                 sign=andrew, passphrase='andy',
                                 output='encrypted.txt')
    assert encrypted.status == 'encryption ok'
    # Data is in encrypted.txt. Read it in and verify/decrypt it.
    data = open('encrypted.txt', 'r').read()
    decrypted = gpg.decrypt(data, passphrase='bbrown', output='decrypted.txt')
    print_info(decrypted)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5681708</id><snippet>]</snippet></ROW><ROW><id>5681708</id><snippet>results = re.search('ipAddress=([^&amp;]*)', line)
</snippet></ROW><ROW><id>5681943</id><snippet>return</snippet></ROW><ROW><id>5681943</id><snippet>@register.inclusion_tag('events/next_event_badge.html')
def show_next_event_badge():
    return next_event()
</snippet></ROW><ROW><id>5682027</id><snippet>invoice</snippet></ROW><ROW><id>5682027</id><snippet>class StockProduct(Stock):
    def __init__(self, stockName, stockLimit, inStock, rentPrice, factor):
        # the base-class constructor:
        Stock.__init__(self, stockName, stockLimit, inStock, rentPrice)
        self.factor = factor

    def invoice(self, nDay):
        return Stock.invoice(self, nDay) * self.factor
</snippet></ROW><ROW><id>5682135</id><snippet>brew install opencv
</snippet></ROW><ROW><id>5682186</id><snippet>except</snippet></ROW><ROW><id>5682186</id><snippet>finally</snippet></ROW><ROW><id>5682186</id><snippet>try</snippet></ROW><ROW><id>5682186</id><snippet>pass</snippet></ROW><ROW><id>5682186</id><snippet>    try:
        if not sys.argv[2]=="":
            f = open("/root/arg2","a")
            f.write(sys.argv[2])
            f.close()
    except:
        pass
</snippet></ROW><ROW><id>5682186</id><snippet>IndentationError</snippet></ROW><ROW><id>5682186</id><snippet>  try:
    foo = 1
    bar = 2
  baz = 3

  File "&lt;pyshell#13&gt;", line 5
    baz = 3
          ^
IndentationError: unindent does not match any outer indentation level
</snippet></ROW><ROW><id>5682600</id><snippet>some_script.py args1</snippet></ROW><ROW><id>5682600</id><snippet>some_script.py args2</snippet></ROW><ROW><id>5682600</id><snippet>some_script_wrapper.py</snippet></ROW><ROW><id>5682600</id><snippet>args1
args2
\end
</snippet></ROW><ROW><id>5682950</id><snippet>TestApp</snippet></ROW><ROW><id>5682950</id><snippet>.get()</snippet></ROW><ROW><id>5682950</id><snippet>.post()</snippet></ROW><ROW><id>5682950</id><snippet>import unittest

class FunctionalTests(unittest.TestCase):
    def setUp(self):
        from myapp import main
        app = main({})
        from webtest import TestApp
        self.testapp = TestApp(app)

    def test_root(self):
        res = self.testapp.get('/', status=200)
        self.failUnless('Pyramid' in res.body)
</snippet></ROW><ROW><id>5682984</id><snippet>&gt;&gt;&gt; hex_string = "deadbeef"
</snippet></ROW><ROW><id>5682984</id><snippet>&gt;&gt;&gt; hex_data = hex_string.decode("hex")
&gt;&gt;&gt; hex_data
"\xde\xad\xbe\xef"
</snippet></ROW><ROW><id>5682984</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; array.array('B', hex_data)
array.array('B', [0xDE, 0xAD, 0xBE, 0xEF])
</snippet></ROW><ROW><id>5682984</id><snippet>&gt;&gt;&gt; map(ord, hex_data)
[0xDE, 0xAD, 0xBE, 0xEF]
</snippet></ROW><ROW><id>5682984</id><snippet>&gt;&gt;&gt; bytearray(hex_data)
bytearray(b'\xde\xad\xbe\xef')
</snippet></ROW><ROW><id>5682984</id><snippet>\x12\x45\x00AB</snippet></ROW><ROW><id>5682984</id><snippet>.decode("hex")</snippet></ROW><ROW><id>5683303</id><snippet>for aName in sorted(mylist,key=lambda x:x.getName):</snippet></ROW><ROW><id>5683303</id><snippet>sorted()</snippet></ROW><ROW><id>5683303</id><snippet>try:
    sorted
    def mysorted(iterable, key, reverse=0):
        return sorted(iterable, key=key, reverse=reverse)
except NameError: # doesn't have "sorted"
    def mysorted(iterable, key, reverse=0):
        temp = [(key(x), x) for x in iterable]
        temp.sort()
        if reverse:
            return [temp[i][1] for i in xrange(len(temp) - 1, -1, -1)]
        return [t[1] for t in temp]

mylist = 'tom dick harriet alfred zechariah'.split()
mykey = lambda x: x[2:] # ignore 1st 2 characters
print mylist
print mysorted(mylist, mykey)
print mysorted(mylist, mykey, reverse=1)
</snippet></ROW><ROW><id>5683303</id><snippet>['tom', 'dick', 'harriet', 'alfred', 'zechariah']
['zechariah', 'dick', 'alfred', 'tom', 'harriet']
['harriet', 'tom', 'alfred', 'dick', 'zechariah']
</snippet></ROW><ROW><id>5683319</id><snippet>items = [...]  # items
profit = {...} # this needs to be the profit for each item
sizes = {...}  # this needs to be the sizes of each item
epsilon = 0.1  # you can adjust this to be arbitrarily small
P = max(items) # maximum profit of the list of items
K = (epsilon * P) / float(len(items))
for item in items:
    profit[item] = math.floor(profit[item] / K)
return _most_prof_set(items, sizes, profit, P)
</snippet></ROW><ROW><id>5683319</id><snippet>A(i + 1, p) = min {A(i,p), size(item at i + 1 position) + A(i, p - profit(item at i + 1 position))} if profit(item at i + 1) &lt; p otherwise A(i,p)
</snippet></ROW><ROW><id>5683319</id><snippet>def _most_prof_set(items, sizes, profit, P):
    A = {...}
    for i in range(len(items) - 1):
        item = items[i+1]
        oitem = items[i]
        for p in [P * k for k in range(1,i+1)]:
            if profit[item] &lt; p:
                A[(item,p)] = min([A[(oitem,p)], \
                                     sizes[item] + A[(item, p - profit[item])]])
            else:
                A[(item,p)] = A[(oitem,p)] if (oitem,p) in A else sys.maxint
    return max(A) 
</snippet></ROW><ROW><id>5683426</id><snippet>for _ in xrange(0, num_flushes):
    in_memory_blocks[:blocks_per_flush] = numpy.random.randint(
            0, _BLOCK_MAX+1, blocks_per_flush)

    print('flushing bytes stored in memory...')

    # commented out for SO; exists in actual code
    # removing this doesn't make an order-of-magnitude difference in time
    # m.update(in_memory_blocks[:blocks_per_flush])

    in_memory_blocks[:blocks_per_flush].tofile(f)
</snippet></ROW><ROW><id>5683426</id><snippet>numpy.random.randint</snippet></ROW><ROW><id>5683426</id><snippet>numpy.random.randint</snippet></ROW><ROW><id>5683426</id><snippet>random.randint</snippet></ROW><ROW><id>5683426</id><snippet>from timeit import Timer
t = Timer(stmt='a=numpy.uint8(numpy.random.randint(0, 100, 20000000))',
        setup='import numpy')
test_runs = 50
time = t.timeit(test_runs)/test_runs
print time
</snippet></ROW><ROW><id>5683426</id><snippet>in_memory_blocks</snippet></ROW><ROW><id>5683426</id><snippet>blocks_per_flush</snippet></ROW><ROW><id>5683426</id><snippet>numpy.random.randint</snippet></ROW><ROW><id>5683426</id><snippet>in_memory_blocks = numpy.random.randint(0, _BLOCK_MAX+1, blocks_per_flush)
</snippet></ROW><ROW><id>5683426</id><snippet>in_memory_blocks[:blocks_per_flush] = numpy.random.randint(
        0, _BLOCK_MAX+1, blocks_per_flush)
</snippet></ROW><ROW><id>5683442</id><snippet>class threading.Timer(interval, function, args=[], kwargs={})
</snippet></ROW><ROW><id>5683442</id><snippet>args</snippet></ROW><ROW><id>5683442</id><snippet>kwargs</snippet></ROW><ROW><id>5683442</id><snippet>Timer(3.0, self.repeat2,messagearg,color)
</snippet></ROW><ROW><id>5683450</id><snippet>python</snippet></ROW><ROW><id>5683450</id><snippet>python.exe</snippet></ROW><ROW><id>5683495</id><snippet>import re

adn = ('TCGCGCCCCCCCCCCATCAAGACATGGTTTTTTTTTTATTTATCAGATTACAGATACA'
       'GTTATGGGGGGGGGGATATACAGATGCATAGCGATTAGCCTAGCTA')


regx = re.compile('(.{10})(AT.{3,6}CA)(.{10})')
res = regx.findall(adn)
for u in res:
    print u

print

pat = re.compile('(.{10})(AT.{3,6}CA)')
li = []
for mat in pat.finditer(adn):
    x = mat.end()
    li.append(mat.groups()+(adn[x:x+10],))
for u in li:
    print u
</snippet></ROW><ROW><id>5683495</id><snippet>('CCCCCCCCCC', 'ATCAAGACA', 'TGGTTTTTTT')
('GGGGGGGGGG', 'ATATACA', 'GATGCATAGC')

('CCCCCCCCCC', 'ATCAAGACA', 'TGGTTTTTTT')
('TTTTTTTTTT', 'ATTTATCA', 'GATTACAGAT')
('GGGGGGGGGG', 'ATATACA', 'GATGCATAGC')
</snippet></ROW><ROW><id>5683496</id><snippet>T</snippet></ROW><ROW><id>5683580</id><snippet>self.redirect('your_url')
</snippet></ROW><ROW><id>5683700</id><snippet>number_of_lists = ...
empty_lists = [[] for i in xrange(number_of_lists)]
</snippet></ROW><ROW><id>5683700</id><snippet>nonempty_lists = [['a', 'b', 'c'] for i in xrange(number_of_lists)]
</snippet></ROW><ROW><id>5683700</id><snippet>number_of_lists</snippet></ROW><ROW><id>5683700</id><snippet>'a'</snippet></ROW><ROW><id>5683700</id><snippet>'b'</snippet></ROW><ROW><id>5683700</id><snippet>'c'</snippet></ROW><ROW><id>5683798</id><snippet>print</snippet></ROW><ROW><id>5683798</id><snippet>cgi</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683802</id><snippet>[[0]]
[[1]]
</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683802</id><snippet>[[0, 0], [0, 0]]
[[0, 0], [0, 1]]
[[0, 0], [1, 0]]
[[0, 0], [1, 1]]
[[0, 1], [0, 0]]
[[0, 1], [0, 1]]
[[0, 1], [1, 0]]
[[0, 1], [1, 1]]
[[1, 0], [0, 0]]
[[1, 0], [0, 1]]
[[1, 0], [1, 0]]
[[1, 0], [1, 1]]
[[1, 1], [0, 0]]
[[1, 1], [0, 1]]
[[1, 1], [1, 0]]
[[1, 1], [1, 1]]
</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683802</id><snippet>bin()</snippet></ROW><ROW><id>5683802</id><snippet>str.zfill()</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683802</id><snippet>list</snippet></ROW><ROW><id>5683846</id><snippet>"/bin/usr/proga/file.c".count("/")
</snippet></ROW><ROW><id>5683862</id><snippet>class class1(object):
    stuff = 1
    def blah(self):
        foo = class2()
        foo.start()

class class2(threading.Thread):
    def run(self):
       print(class1.stuff)
</snippet></ROW><ROW><id>5683862</id><snippet>__init__</snippet></ROW><ROW><id>5683866</id><snippet>from UserDict import DictMixin

class Map(object, DictMixin):
    def __init__(self, *maps):
        self.maps = maps
    def __getitem__(self, key):
        for m in self.maps:
            if key in m:
                return m[key]
    def keys(self):
        return list(self.iterkeys())
    def iterkeys(self):
        return (k for m in self.maps for k in m.iterkeys())
    def values(self):
        return list(self.itervalues())
    def itervalues(self):
        return (v for m in self.maps for v in m.itervalues())

def glue(*maps):
    return Map(*maps)

M1 = {'blah': 1}
M2 = {'duh': 2}

M = glue(M1, M2)
print M['blah']
print M['duh']
print list(M.keys())
print list(M.values())
</snippet></ROW><ROW><id>5683866</id><snippet>1
2
['blah', 'duh']
[1, 2]
</snippet></ROW><ROW><id>5683888</id><snippet>values = map(compare, new_subjects.values())
len([x for x in values if x]) == len(values) - 1
</snippet></ROW><ROW><id>5683992</id><snippet>import numpy as np

a = np.arange(12)
b = np.array([5, 9, 2, 4])
b = np.append(b, b[0])

for i in range(0, len(b)-1):
    print np.roll(a, len(a)-b[i])[:b[i+1]-b[i]+1]
</snippet></ROW><ROW><id>5684023</id><snippet>def checkExists(fileName, index=0):
    print "checkExists(" + fileName + ")"

    if exists(fileName):
        splitPath = split(newFile)
        splitName = splitext(splitPath[1])
        newSplitName = splitName[0] + "-" + str(index)

        index += 1
        newName = splitPath[0] + "/" + newSplitName + splitName[1]

        print "newName = " + newName
        return checkExists(newName, index)   # recurse
    else:
        print "(else) fileName = " + fileName
        print "(else) fileName = " + str(type(fileName))
        print ""
        return fileName
</snippet></ROW><ROW><id>5684023</id><snippet>newName</snippet></ROW><ROW><id>5684029</id><snippet>cur = conn.cursor()
cur.execute("SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED")
cur.execute("SELECT @@session.tx_isolation")
print cur.fetchall()[0]
cur.execute("SELECT * FROM bar")
print cur.fetchall()
cur.execute("SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ")
cur.execute("SELECT @@session.tx_isolation")
print cur.fetchall()[0]

# output
('READ-UNCOMMITTED',)
(('foo',), ('bar',))
('REPEATABLE-READ',)
</snippet></ROW><ROW><id>5684029</id><snippet>cur.execute("SELECT * FROM bar WHERE thing = 'bar'; SELECT * FROM bar")
print cur.fetchall()

# output
(('bar',),)
</snippet></ROW><ROW><id>5684125</id><snippet>rank = {key:rank for rank, key in list1}
print(sorted(list2, key=lambda t: rank.get(t[0]), reverse=True))
</snippet></ROW><ROW><id>5684199</id><snippet>raw_input()</snippet></ROW><ROW><id>5684199</id><snippet>import sys

outfile = open(sys.argv[1], 'w')
# write to the outfile
x = raw_input("What's your name?")
outfile.write(x)
</snippet></ROW><ROW><id>5684199</id><snippet>python myscript.py file.out
</snippet></ROW><ROW><id>5684369</id><snippet>entry.published.text</snippet></ROW><ROW><id>5684369</id><snippet>import datetime
import time

feed = client.YouTubeQuery(query)
for entry in feed.entry:
    _tmp = time.strptime(entry.published.text, '%Y-%m-%dT%H:%M:%S.000Z')
    ptime = datetime.datetime(*_tmp[:6])
    print ptime
    print ptime.time()
</snippet></ROW><ROW><id>5684369</id><snippet>2010-01-27 19:42:42
19:42:42
</snippet></ROW><ROW><id>5684386</id><snippet>def count_different_values(k_v1s, k_v2s):
    """kv1s and kv2s should be dictionaries mapping keys to 
    values.  count_different_values() returns the number of keys in 
    k_v1s and k_v2s that don't have the same value"""
    ks = set(k_v1s.iterkeys()) | set(k_v2s.iterkeys())
    return sum(1 for k in ks if k_v1s.get(k) != k_v2s.get(k))


def sum_square_diffs(x0s, x1s):
    """x1s and x2s should be equal-lengthed sequences of numbers.
    sum_square_differences() returns the sum of the squared differences 
    of x1s and x2s."""
    sum((pow(x1-x2,2) for x1,x2 in zip(x1s,x2s)))

def incr(x_c, x, inc=1):
    """increments the value associated with key x in dictionary x_c
    by inc, or sets it to inc if key x is not in dictionary x_c."""
    x_c[x] = x_c.get(x, 0) + inc

def count_items(xs, x_c=None):
    """returns a dictionary x_c whose keys are the items in xs, and 
    whose values are the number of times each item occurs in xs."""
    if x_c == None:
        x_c = {}
    for x in xs:
        incr(x_c, x)
    return x_c

def second(xy):
    """returns the second element in a sequence"""
    return xy[1]

def most_frequent(xs):
    """returns the most frequent item in xs"""
    x_c = count_items(xs)
    return sorted(x_c.iteritems(), key=second, reverse=True)[0][0]


class kNN_classifier:
    """This is a k-nearest-neighbour classifer."""
    def __init__(self, train_data, k, distf):
        self.train_data = train_data
        self.k = min(k, len(train_data))
        self.distf = distf

    def classify(self, x):
        Ns = sorted(self.train_data, 
                    key=lambda xy: self.distf(xy[0], x))
        return most_frequent((y for x,y in Ns[:self.k]))

    def batch_classify(self, xs):
        return [self.classify(x) for x in xs]

def train(train_data, k=1, distf=count_different_values):
    """Returns a kNN_classifer that contains the data, the number of
    nearest neighbours k and the distance function"""
    return kNN_classifier(train_data, k, distf)
</snippet></ROW><ROW><id>5684386</id><snippet>#!/usr/bin/env python
# This code is part of the Biopython distribution and governed by its
# license.  Please see the LICENSE file that should have been included
# as part of this package.
"""
This module provides code for doing k-nearest-neighbors classification.

k Nearest Neighbors is a supervised learning algorithm that classifies
a new observation based the classes in its surrounding neighborhood.

Glossary:
distance   The distance between two points in the feature space.
weight     The importance given to each point for classification. 


Classes:
kNN           Holds information for a nearest neighbors classifier.


Functions:
train        Train a new kNN classifier.
calculate    Calculate the probabilities of each class, given an observation.
classify     Classify an observation into a class.

    Weighting Functions:
equal_weight    Every example is given a weight of 1.

"""

import numpy

class kNN:
    """Holds information necessary to do nearest neighbors classification.

    Members:
    classes  Set of the possible classes.
    xs       List of the neighbors.
    ys       List of the classes that the neighbors belong to.
    k        Number of neighbors to look at.

    """
    def __init__(self):
        """kNN()"""
        self.classes = set()
        self.xs = []
        self.ys = []
        self.k = None

def equal_weight(x, y):
    """equal_weight(x, y) -&gt; 1"""
    # everything gets 1 vote
    return 1

def train(xs, ys, k, typecode=None):
    """train(xs, ys, k) -&gt; kNN

    Train a k nearest neighbors classifier on a training set.  xs is a
    list of observations and ys is a list of the class assignments.
    Thus, xs and ys should contain the same number of elements.  k is
    the number of neighbors that should be examined when doing the
    classification.

    """
    knn = kNN()
    knn.classes = set(ys)
    knn.xs = numpy.asarray(xs, typecode)
    knn.ys = ys
    knn.k = k
    return knn

def calculate(knn, x, weight_fn=equal_weight, distance_fn=None):
    """calculate(knn, x[, weight_fn][, distance_fn]) -&gt; weight dict

    Calculate the probability for each class.  knn is a kNN object.  x
    is the observed data.  weight_fn is an optional function that
    takes x and a training example, and returns a weight.  distance_fn
    is an optional function that takes two points and returns the
    distance between them.  If distance_fn is None (the default), the
    Euclidean distance is used.  Returns a dictionary of the class to
    the weight given to the class.

    """
    x = numpy.asarray(x)

    order = []  # list of (distance, index)
    if distance_fn:
        for i in range(len(knn.xs)):
            dist = distance_fn(x, knn.xs[i])
            order.append((dist, i))
    else:
        # Default: Use a fast implementation of the Euclidean distance
        temp = numpy.zeros(len(x))
        # Predefining temp allows reuse of this array, making this
        # function about twice as fast.
        for i in range(len(knn.xs)):
            temp[:] = x - knn.xs[i]
            dist = numpy.sqrt(numpy.dot(temp,temp))
            order.append((dist, i))
    order.sort()

    # first 'k' are the ones I want.
    weights = {}  # class -&gt; number of votes
    for k in knn.classes:
        weights[k] = 0.0
    for dist, i in order[:knn.k]:
        klass = knn.ys[i]
        weights[klass] = weights[klass] + weight_fn(x, knn.xs[i])

    return weights

def classify(knn, x, weight_fn=equal_weight, distance_fn=None):
    """classify(knn, x[, weight_fn][, distance_fn]) -&gt; class

    Classify an observation into a class.  If not specified, weight_fn will
    give all neighbors equal weight.  distance_fn is an optional function
    that takes two points and returns the distance between them.  If
    distance_fn is None (the default), the Euclidean distance is used.
    """
    weights = calculate(
        knn, x, weight_fn=weight_fn, distance_fn=distance_fn)

    most_class = None
    most_weight = None
    for klass, weight in weights.items():
        if most_class is None or weight &gt; most_weight:
            most_class = klass
            most_weight = weight
    return most_class
</snippet></ROW><ROW><id>5684605</id><snippet>text = "&lt;p&gt;&lt;b&gt; hello world &lt;/b&gt;&lt;/p&gt;. I am playing &lt;b&gt; python &lt;/b&gt;"

import re 

pattern1 = re.compile(r'\&lt;p&gt;(.*?)\&lt;/p&gt;')
pattern2 = re.compile(r'\&lt;b&gt;(.*?)\&lt;/b&gt;')

replaced = re.sub(pattern1, r'&lt;bold&gt;\1&lt;/bold&gt;', text)
replaced = re.sub(pattern2, r'&lt;bold&gt;\1&lt;/bold&gt;', replaced)
</snippet></ROW><ROW><id>5684605</id><snippet>text = "&lt;p&gt;&lt;b&gt; hello world &lt;/b&gt;&lt;/p&gt;. I am playing &lt;b&gt; python &lt;/b&gt;"

import re 

pattern = re.compile(r'\&lt;p&gt;(.*?)\&lt;/p&gt;|\&lt;b&gt;(.*?)\&lt;/b&gt;')

for match in pattern.finditer(text):
  print match.groups()
</snippet></ROW><ROW><id>5684605</id><snippet>('&lt;b&gt; hello world &lt;/b&gt;', None) # Here captured the 1st group
(None, ' python ') # Here the 2nd ;)
</snippet></ROW><ROW><id>5684605</id><snippet>&lt;p&gt;&lt;/p&gt;</snippet></ROW><ROW><id>5684605</id><snippet>&lt;b&gt; hello world &lt;/b&gt;</snippet></ROW><ROW><id>5684605</id><snippet>pattern</snippet></ROW><ROW><id>5684605</id><snippet>&lt;b&gt;&lt;p&gt; ... &lt;/p&gt;&lt;/b&gt;</snippet></ROW><ROW><id>5684745</id><snippet>class Company(models.Model):
    name = models.CharField(max_length=50)

class Employee(models.Model):
    name = models.CharField(max_length=50)
    company = models.ForeignKey('Company')
    car = models.ForeignKey('Car')

    def model_callable(self):
        return self.car.rego

class Car(models.Model):
    rego = models.CharField(max_length=50)
</snippet></ROW><ROW><id>5684745</id><snippet>def unbound_callable(emp):
    return emp.car.rego

class EmployeeInline(admin.TabularInline):
    model = Employee
    fields = ('name', 'model_callable', 'model_admin_callable', unbound_callable)
    readonly_fields = ('model_callable', 'model_admin_callable', unbound_callable)

    def model_admin_callable(self, emp):
        return emp.car.rego

class CompanyAdmin(admin.ModelAdmin):
    model = Company
    inlines = (EmployeeInline,)

admin.site.register(Company, CompanyAdmin)
</snippet></ROW><ROW><id>5684745</id><snippet>other__name</snippet></ROW><ROW><id>5684745</id><snippet>car__rego</snippet></ROW><ROW><id>5684745</id><snippet>Employee.objects.filter(car__rego='111')
</snippet></ROW><ROW><id>5685201</id><snippet>nserv = service.objects.are_active()</snippet></ROW><ROW><id>5685201</id><snippet>class ServiceManager(models.Manager):
def are_active(self):
    # use your method to filter results
    return you_custom_queryset
</snippet></ROW><ROW><id>5685335</id><snippet>try:
    return self._text
except AttributeError:
    self._text = None
return self._text
</snippet></ROW><ROW><id>5685489</id><snippet>add</snippet></ROW><ROW><id>5685489</id><snippet>__add__</snippet></ROW><ROW><id>5685489</id><snippet>+</snippet></ROW><ROW><id>5686017</id><snippet>from scipy.special import gamma as Gamma
#from scitools.std import *
from pylab import *

def f1(x):
    return Gamma(x)


x = linspace(-6, 6, 512)
y1 = f1(x)
gca().set_autoscale_on(False)

# Matlab-style syntax:
plot(x, y1)

xlabel('x')
ylabel('y')
# legend(r'$\Gamma(x)$')
axis([-6, 6, -100, 100])
grid(True)

show()
</snippet></ROW><ROW><id>5686154</id><snippet>import multiprocessing.Pool

p = multiprocessing.Pool() # use all available CPUs

input = open("input.txt")
x = (process_line(line) for line in input)
y = p.imap(process_item, x)
z = (generate_output_line(item) + "\n" for item in y)
output = open("output.txt", "w")
output.writelines(z)
</snippet></ROW><ROW><id>5686234</id><snippet>shift_jis</snippet></ROW><ROW><id>5686234</id><snippet>UTF-8</snippet></ROW><ROW><id>5686234</id><snippet>&gt;&gt;&gt; message1 = '\202\261\202\352\202\315\225\275\220\254\226\276\222\251\202\305\202\267\201B'
&gt;&gt;&gt; print message1.decode('shift_jis')
これは平成明朝です。
&gt;&gt;&gt; message3 = '\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88'
&gt;&gt;&gt; print message3.decode('UTF-8')
テスト
&gt;&gt;&gt;str_data = '\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e'
&gt;&gt;&gt; print str_data.decode('UTF-8')
日本語
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5686284</id><snippet>if __name__ == '__main__':
    from subclasses import *
</snippet></ROW><ROW><id>5686284</id><snippet>from BaseClass import BaseClass
from subclasses import *

def NewClass():
    """Map Factory"""
    for cls in BaseClass.__subclasses__():
        print ("checking class...")

NewClass ()
</snippet></ROW><ROW><id>5686400</id><snippet>os.path.basename</snippet></ROW><ROW><id>5686400</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename(file)
'go.py'
</snippet></ROW><ROW><id>5686400</id><snippet>ntpath</snippet></ROW><ROW><id>5686400</id><snippet>os.path</snippet></ROW><ROW><id>5686734</id><snippet>class Thing(object):
    all = {}

    def __init__(self, id, also, etc):
        self.id = id
        self.all[id] = self

    @classmethod
    def by_id(cls, id):
        return cls.all[id]
</snippet></ROW><ROW><id>5686832</id><snippet>TransactionMiddleware</snippet></ROW><ROW><id>5686832</id><snippet>commit_on_success</snippet></ROW><ROW><id>5686832</id><snippet>commit_on_success</snippet></ROW><ROW><id>5686832</id><snippet>@transaction.commit_manually
def purchase(request, ...):
    try:
      ... # change some data
      _purchase(request, *args, **kwargs) # process purchase optimistically
    except PurchaseError, ex: # My own exception class for errors we know about
      _log_purchase(request, ex) # Save error in DB
      messages.error(ex.human_message())
      transaction.commit() # Save log entries
    except:
      transaction.rollback()
      raise
    else:
      transaction.commit()

@transaction.commit_on_success
def _purchase(request, ...):
    ...  
</snippet></ROW><ROW><id>5687091</id><snippet>&gt;&gt;&gt; '%d' % 1.2
'1'
</snippet></ROW><ROW><id>5687091</id><snippet>&gt;&gt;&gt; '%f' % 1.2
'1.200000'
</snippet></ROW><ROW><id>5687091</id><snippet>&gt;&gt;&gt; '%.2f' % 1.234
'1.23'
&gt;&gt;&gt; '%.2f' % 1.236
'1.24'
</snippet></ROW><ROW><id>5687499</id><snippet>import re

filename = 'tr.txt'

with open(filename,'r') as f:
    ch = f.read()

pat = re.compile('createNode newnode -n ("\w+?_SET");(.*?)(?=createNode|\Z)',re.DOTALL)
pit = re.compile('^ *setAttr.+?("[^"\n]+").+("[^"\n]+");(?:\n|\Z)',re.MULTILINE)

dic = dict( (mat.group(1),dict(pit.findall(mat.group(2)))) for mat in pat.finditer(ch)) 
print dic
</snippet></ROW><ROW><id>5687499</id><snippet>{'"b_SET"': {'".test2"': '"ehmehm"', '".test1"': '"hmm"'}, '"a_SET"': {'".test2"': '"blablabla"', '".test1"': '"blabla"'}}
</snippet></ROW><ROW><id>5687499</id><snippet>'"'</snippet></ROW><ROW><id>5687499</id><snippet>"..."</snippet></ROW><ROW><id>5687499</id><snippet>"..."</snippet></ROW><ROW><id>5687499</id><snippet>"    setAttr"</snippet></ROW><ROW><id>5687499</id><snippet>"    setAttr"</snippet></ROW><ROW><id>5687499</id><snippet>"..."</snippet></ROW><ROW><id>5687499</id><snippet>"....\n......"</snippet></ROW><ROW><id>5687499</id><snippet>(?:\n(?! *setAttr)|[^"\n])</snippet></ROW><ROW><id>5687499</id><snippet>'"'</snippet></ROW><ROW><id>5687499</id><snippet>newlines \n</snippet></ROW><ROW><id>5687499</id><snippet>' *setAttr'</snippet></ROW><ROW><id>5687499</id><snippet>(?:\n(?! *setAttr)|.)</snippet></ROW><ROW><id>5687499</id><snippet>' *setAttr'</snippet></ROW><ROW><id>5687499</id><snippet>ch = '''//Last modified: Sat, Apr 16, 2011 09:55:04 AM
//Codeset: ISO-8859-1
fileInfo "version" "20x64";
createNode newnode -n "a_SET";
    addAttr -ci true -k true -sn "connections" -ln "connections" -dt "string";
    setAttr -l on -k off ".tx";
    setAttr -l on -k off ".ty";
    setAttr -l on -k off ".sz";
    setAttr -l on -k on ".test1" -type "string" "blabla";
    setAttr -l on -k on ".test2" -type "string" "blablabla";
createNode newnode -n "b_SET";
    addAttr -ci true -k true -sn "connections" -ln "connections" -dt "string";
    setAttr -l on -k off ".tx";
    setAttr -l on -k off ".ty";
    setAttr -l on -k off ".sz";
    setAttr -l on -k on ".test1" -type "string" (
      "hmm bl
      abla\tbla" );
    setAttr -l on -k on ".tes\nt\t2" -type "string" "ehm\tehm";
    setAttr -l on -k on ".test3" -type "string" "too
    much" "pff" """ "feretini" "gol\nolo";
    '''

import re

pat = re.compile('createNode newnode -n ("\w+?_SET");(.*?)(?=createNode|\Z)',re.DOTALL)
pot = re.compile('^ *setAttr.+?'
                 '"((?:\n(?! *setAttr)|[^"\n])+)"'
                 '(?:\n(?! *setAttr)|.)+'
                 '"((?:\n(?! *setAttr)|[^"\n])+)"'
                 '.*;(?:\n|\Z)',re.MULTILINE)

dic = dict( (mat.group(1),dict(pot.findall(mat.group(2)))) for mat in pat.finditer(ch)) 
for x in dic:
    print x,'\n',dic[x],'\n'
</snippet></ROW><ROW><id>5687499</id><snippet>"b_SET" 
{'.test3': 'gol\nolo', '.test1': 'hmm bl\n      abla\tbla', '.tes\nt\t2': 'ehm\tehm'} 

"a_SET" 
{'.test1': 'blabla', '.test2': 'blablabla'}
</snippet></ROW><ROW><id>5687548</id><snippet>use-underline</snippet></ROW><ROW><id>5687548</id><snippet>_</snippet></ROW><ROW><id>5687548</id><snippet>close_menu = Gtk.MenuItem()
close_menu.set_label("_Close")
close_menu.set_use_underline(True)
</snippet></ROW><ROW><id>5687548</id><snippet>close_menu = Gtk.MenuItem("_Close", True)
</snippet></ROW><ROW><id>5687803</id><snippet>X*i + Y*j = K
</snippet></ROW><ROW><id>5687856</id><snippet>#Server Connection to MySQL:

import MySQLdb
conn = MySQLdb.connect(host= "localhost",
                  user="root",
                  passwd="newpassword",
                  db="engy1")
x = conn.cursor()

try:
   x.execute("""INSERT INTO anooog1 VALUES (%s,%s)""",(188,90))
   conn.commit()
except:
   conn.rollback()

conn.close()
</snippet></ROW><ROW><id>5687856</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; #connect to db
... db = MySQLdb.connect("localhost","root","password","testdb" )
&gt;&gt;&gt; 
&gt;&gt;&gt; #setup cursor
... cursor = db.cursor()
&gt;&gt;&gt; 
&gt;&gt;&gt; #create anooog1 table
... cursor.execute("DROP TABLE IF EXISTS anooog1")
__main__:2: Warning: Unknown table 'anooog1'
0L
&gt;&gt;&gt; 
&gt;&gt;&gt; sql = """CREATE TABLE anooog1 (
...          COL1 INT,  
...          COL2 INT )"""
&gt;&gt;&gt; cursor.execute(sql)
0L
&gt;&gt;&gt; 
&gt;&gt;&gt; #insert to table
... try:
...     cursor.execute("""INSERT INTO anooog1 VALUES (%s,%s)""",(188,90))
...     db.commit()
... except:     
...     db.rollback()
... 
1L
&gt;&gt;&gt; #show table
... cursor.execute("""SELECT * FROM anooog1;""")
1L
&gt;&gt;&gt; print cursor.fetchall()
((188L, 90L),)
&gt;&gt;&gt; 
&gt;&gt;&gt; db.close()
</snippet></ROW><ROW><id>5687856</id><snippet>mysql&gt; use testdb;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; SELECT * FROM anooog1;
+------+------+
| COL1 | COL2 |
+------+------+
|  188 |   90 |
+------+------+
1 row in set (0.00 sec)

mysql&gt; 
</snippet></ROW><ROW><id>5688155</id><snippet>DEBUG = True</snippet></ROW><ROW><id>5688155</id><snippet>urls</snippet></ROW><ROW><id>5688155</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

# ... the rest of your URLconf goes here ...

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>5688155</id><snippet>context processor</snippet></ROW><ROW><id>5688155</id><snippet>load static</snippet></ROW><ROW><id>5688155</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>5688237</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5688237</id><snippet>pip install django==1.2.5
</snippet></ROW><ROW><id>5688359</id><snippet>def get_absolute_url(self):
    return '/forums/%s/%s/' % (str(self.forum_id.pk), self.topic_id)
</snippet></ROW><ROW><id>5688359</id><snippet>def get_absolute_url(self):
    return '/forums/%s/%s/' % (self.forum_id_id, self.topic_id)
</snippet></ROW><ROW><id>5688480</id><snippet>data</snippet></ROW><ROW><id>5688480</id><snippet>pythonstring = mutablestring.data
</snippet></ROW><ROW><id>5688560</id><snippet>import threading

def thid():
    print threading.currentThread().ident

t1 = threading.Thread(target=thid)
t2 = threading.Thread(target=thid)
t1.start()
t2.start()
t1.join()
t2.join()
</snippet></ROW><ROW><id>5688560</id><snippet>&gt;&gt;&gt; t1.start()
4301111296
&gt;&gt;&gt; t2.start()
4301111296
</snippet></ROW><ROW><id>5688560</id><snippet>me@mine:~ $ python th.py 
4300935168
4302835712
</snippet></ROW><ROW><id>5688560</id><snippet>threading</snippet></ROW><ROW><id>5688560</id><snippet>thid</snippet></ROW><ROW><id>5688560</id><snippet>&gt;&gt;&gt; def thid():
...     print threading.currentThread().ident
...     sleep(10)
</snippet></ROW><ROW><id>5688560</id><snippet>t2.start()</snippet></ROW><ROW><id>5688560</id><snippet>t1.start()</snippet></ROW><ROW><id>5688560</id><snippet>id(threading.currentThread())</snippet></ROW><ROW><id>5688875</id><snippet>from BeautifulSoup import BeautifulSoup  
import urllib2

def searchLinks(url, query_string):
    f = urllib2.urlopen(url)
    soup = BeautifulSoup(f, convertEntities='html')
    for a in soup.findAll('a'):
        if a.has_key('href'):
            idx = a.contents[0].find(query_string)
            if idx is not None and idx &gt; -1:
                yield a['href'] 

res = list(searchLinks('http://example.com', 'game2'))
print res
</snippet></ROW><ROW><id>5688945</id><snippet>def iter1d(a):
    return itertools.chain.from_iterable(
        numpy.rollaxis(a, axis, a.ndim).reshape(-1, dim)
        for axis, dim in enumerate(a.shape))
</snippet></ROW><ROW><id>5688945</id><snippet>for x in iter1d(a):
    print x
</snippet></ROW><ROW><id>5688945</id><snippet>[ 0 12]
[ 1 13]
[ 2 14]
[ 3 15]
[ 4 16]
[ 5 17]
[ 6 18]
[ 7 19]
[ 8 20]
[ 9 21]
[10 22]
[11 23]
[0 4 8]
[1 5 9]
[ 2  6 10]
[ 3  7 11]
[12 16 20]
[13 17 21]
[14 18 22]
[15 19 23]
[0 1 2 3]
[4 5 6 7]
[ 8  9 10 11]
[12 13 14 15]
[16 17 18 19]
[20 21 22 23]
</snippet></ROW><ROW><id>5689398</id><snippet>self</snippet></ROW><ROW><id>5689398</id><snippet>gd_client.get(rev_uri)</snippet></ROW><ROW><id>5689398</id><snippet>gd_client</snippet></ROW><ROW><id>5689398</id><snippet>get</snippet></ROW><ROW><id>5689398</id><snippet>get_revisions</snippet></ROW><ROW><id>5689927</id><snippet>setattr</snippet></ROW><ROW><id>5689927</id><snippet>class UserEnteredData(object):
    def __init__(self):
        self.a = None
        self.b = None

class TextField(pygame.sprite.Sprite):
    def __init__(self, userdata, uservar, name, x, y):
        self.userdata = userdata
        self.var = uservar
        self.value = ""  
    def update(self, key):
        if key == "return":
            setattr(self.userdata, self.var, self.value)

userdata = UserEnteredData
userdata.a = "NAME"
txt = TextField(userdata, "a", "popo", 20, 20)
txt.update("return")
print userdata.a       # prints a null string
</snippet></ROW><ROW><id>5689927</id><snippet>update</snippet></ROW><ROW><id>5689927</id><snippet>class TextField(pygame.sprite.Sprite):
    # [... define init here ...]
    def update(self, key):
        if key=="return":
            return self.value

# [... create txt, etc ...]
a = txt.update("return")
</snippet></ROW><ROW><id>5690215</id><snippet>UnivariateSpline</snippet></ROW><ROW><id>5690215</id><snippet>data.txt</snippet></ROW><ROW><id>5690215</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline

data = np.loadtxt('data.txt')
x = data[:,0]
y = data[:,1]

spline = UnivariateSpline(x, y, s=0)
xi = np.linspace(x.min(), x.max(), 1000)
yi = spline(xi) 

p1 = plt.plot(x, y, 'bo', label='Original Points')
p2 = plt.plot(xi, yi, 'g', label='Interpolated Points')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>5690215</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline

data = np.loadtxt('data.txt')
x = data[:,0][::-1] # Reversing the input data...
y = data[:,1][::-1]

spline = UnivariateSpline(x, y, s=0)
xi = np.linspace(x.min(), x.max(), 1000)
yi = spline(xi) 

p1 = plt.plot(x, y, 'bo', label='Original Points')
p2 = plt.plot(xi, yi, 'g', label='Interpolated Points')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>5690311</id><snippet>django.template.loader.get_template(template_name)</snippet></ROW><ROW><id>5690364</id><snippet>$.post("/AjaxRequest/get_data_for_users_country_city", {
    selected_country_name: $('#id_country_name').val(),
    selected_city_name: $('#id_city_name').val()
}, function(data) {
    alert("hello");
});
</snippet></ROW><ROW><id>5691101</id><snippet>&gt;&gt;&gt; ser = serial.Serial('/dev/ttyUSB-17', 115200, timeout=1)
&gt;&gt;&gt; output = open("/var/log/messages", "rb")
</snippet></ROW><ROW><id>5691101</id><snippet>data = output.read()
print(data)
</snippet></ROW><ROW><id>5691101</id><snippet>from time import sleep
from threading import Thread
class Display(Thread):
    def run(self):
        while True:
            data = self.output.read()
            if data: print(data)
            sleep(1)


t = Display()
t.output = output
t.start()
</snippet></ROW><ROW><id>5691264</id><snippet>dicList</snippet></ROW><ROW><id>5691264</id><snippet>dicList</snippet></ROW><ROW><id>5691264</id><snippet>class IContainer:
    def __init__(self):
        self.dicList = {}
</snippet></ROW><ROW><id>5691332</id><snippet>def create_action(*args, **kwargs):
    action = Action(*args, **kwargs)
</snippet></ROW><ROW><id>5691372</id><snippet>for i in rows[2]:
</snippet></ROW><ROW><id>5691372</id><snippet>    'x'[2] = 'a'
</snippet></ROW><ROW><id>5691372</id><snippet>def getInt(msg):
    return int(raw_input(msg))

row = getInt('Which row? ')
col = getInt('Which col? ')

rows[row-1][col] = 'a'
</snippet></ROW><ROW><id>5691372</id><snippet>def getInt(msg, lo=None, hi=None):
    while True:
        try:
            val = int(raw_input(msg))
            if lo is None or lo &lt;= val:
                if hi is None or val &lt;= hi:
                    return val
        except ValueError:
            pass

class GameBoard(object):
    def __init__(self, width=4, height=4):
        self.width  = width
        self.height = height
        self.rows   = [['x']*width for _ in xrange(height)]

    def getMove(self):
        row = getInt('Please enter row (1-{0}): '.format(self.height), 1, self.height)
        col = getInt('Please enter column (1-{0}): '.format(self.width), 1, self.width)
        return row,col

    def move(self, row, col, newch='a'):
        if 1 &lt;= row &lt;= self.height and 1 &lt;= col &lt;= self.width:
            self.rows[row-1][col-1] = newch

    def __str__(self):
        return '\n'.join(' '.join(row) for row in self.rows)

def main():
    bd = GameBoard()

    row,col = bd.getMove()
    bd.move(row,col)

    print bd

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5691419</id><snippet>if string:
    # String is not empty.
else:
    # String is empty.
</snippet></ROW><ROW><id>5691804</id><snippet>somepackage</snippet></ROW><ROW><id>5691804</id><snippet>setuptools</snippet></ROW><ROW><id>5691804</id><snippet>setuptools</snippet></ROW><ROW><id>5691804</id><snippet>Distribute</snippet></ROW><ROW><id>5691804</id><snippet>somepackage</snippet></ROW><ROW><id>5691804</id><snippet>setuptools</snippet></ROW><ROW><id>5691804</id><snippet>somepackage</snippet></ROW><ROW><id>5691804</id><snippet>from setuptools import setup
setup(
    name = "HelloWorld",
    version = "0.1",
    scripts = ['say_hello.py'],
    install_requires = ['somepackage == 1.0.0'],
)
</snippet></ROW><ROW><id>5691804</id><snippet>somepackage 1.0.0</snippet></ROW><ROW><id>5691804</id><snippet>somepackage 2.0.0</snippet></ROW><ROW><id>5691804</id><snippet>pip</snippet></ROW><ROW><id>5691804</id><snippet>pkg_resources.DistributionNotFound: somepackage==1.0.0
</snippet></ROW><ROW><id>5691804</id><snippet>somepackage</snippet></ROW><ROW><id>5691804</id><snippet>easy_install</snippet></ROW><ROW><id>5691804</id><snippet>pip</snippet></ROW><ROW><id>5691804</id><snippet>easy_install</snippet></ROW><ROW><id>5691804</id><snippet>somepackage</snippet></ROW><ROW><id>5691804</id><snippet>setuptools</snippet></ROW><ROW><id>5691804</id><snippet>Distribute</snippet></ROW><ROW><id>5691804</id><snippet>virutalenv</snippet></ROW><ROW><id>5691804</id><snippet>pip</snippet></ROW><ROW><id>5691804</id><snippet>setuptools</snippet></ROW><ROW><id>5691804</id><snippet>virtualenv</snippet></ROW><ROW><id>5692367</id><snippet>def get_selected_ids(self):
    ids = []
    store, paths = self.get_selection().get_selected_rows()

    # self.adapter is a mapping class from my data-model to a model column index.
    # If you know the column index from your gtk.ListStore, you don't need it.
    colindex = self.adapter.get_column_modelindex("id")

    for path in paths:
        treeiter = store.get_iter(path)
        # Pull value from liststore
        val = store.get_value(
            treeiter, 
            colindex
        )
        ids.append(val)
    return ids
</snippet></ROW><ROW><id>5692367</id><snippet>def blacklistServer(self, menuitem, *ignore):
    # you have to modify *get_selected_ids* so it returns the values you need for
    # blacklisting.
    values = self.get_selected_ids()
    blacklist = set(values)
    self.saveBlacklist(blacklist)
</snippet></ROW><ROW><id>5692648</id><snippet>data='''atl001 I
atl001 I
cms017 H
atl001 R
lhc003 H
cms017 R
cms017 I
lhc003 H
lhc003 R
cms017 R'''

stats={}
for i in data.split('\n'):
    user, irh = i.split()
    u = stats.setdefault(user, {})
    u[irh] = u.setdefault(irh, 0) + 1

print 'user  I  R  H'
for user in sorted(stats):
    stat = stats[user]
    print user, stat.get('I', 0), stat.get('R', 0), stat.get('H', 0) 
</snippet></ROW><ROW><id>5693214</id><snippet>%</snippet></ROW><ROW><id>5693214</id><snippet>execute</snippet></ROW><ROW><id>5693214</id><snippet>cur.execute("INSERT INTO token VALUES (?, ?)", (token,expires))
</snippet></ROW><ROW><id>5693214</id><snippet>cur.fetchone()</snippet></ROW><ROW><id>5693214</id><snippet>INSERT</snippet></ROW><ROW><id>5693214</id><snippet>$ sqlite3 test.db
sqlite&gt; create table token (token text primary key, expires text);

$ python
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; from uuid import uuid4
&gt;&gt;&gt; token = uuid4().bytes.encode("base64")
&gt;&gt;&gt; expires = datetime.now() + timedelta(days=1)
&gt;&gt;&gt; conn = sqlite3.connect("test.db")
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute("INSERT INTO token VALUES (?, ?)", (token, expires))
&lt;sqlite3.Cursor object at 0x7fdb18c70660&gt;
&gt;&gt;&gt; cur.execute("SELECT * FROM token")
&lt;sqlite3.Cursor object at 0x7fdb18c70660&gt;
&gt;&gt;&gt; cur.fetchone()
(u'9SVqLgL8ShWcCzCvzw+2nA==\n', u'2011-04-18 15:36:45.079025')
</snippet></ROW><ROW><id>5693330</id><snippet>onclick</snippet></ROW><ROW><id>5693363</id><snippet>echo</snippet></ROW><ROW><id>5693363</id><snippet>\n</snippet></ROW><ROW><id>5693363</id><snippet>-n</snippet></ROW><ROW><id>5693363</id><snippet>&gt; echo -n mystringforhash | md5sum
86b6423cb6d211734fc7d81bbc5e11d3  -
</snippet></ROW><ROW><id>5693585</id><snippet>&gt;&gt;&gt; zip((1,2,3),(10,20,30),(100,200,300))
[(1, 10, 100), (2, 20, 200), (3, 30, 300)]

&gt;&gt;&gt; [sum(x) for x in zip((1,2,3),(10,20,30),(100,200,300))]
[111, 222, 333]
</snippet></ROW><ROW><id>5693585</id><snippet>&gt;&gt;&gt; myTuples = [(1,2,3), (10,20,30), (100,200,300)]
&gt;&gt;&gt; [sum(x) for x in zip(*myTuples)]
[111, 222, 333]
</snippet></ROW><ROW><id>5693989</id><snippet>count</snippet></ROW><ROW><id>5693989</id><snippet>start</snippet></ROW><ROW><id>5693991</id><snippet>- url: /index\.html
script: index.py

- url: /
script: index.py
</snippet></ROW><ROW><id>5694033</id><snippet>class Player:
    def __init__(self, name):
        self.name = name 
        self.cardsInHand = set()
        self.hasBid = False
</snippet></ROW><ROW><id>5694279</id><snippet>u</snippet></ROW><ROW><id>5694279</id><snippet>u</snippet></ROW><ROW><id>5694279</id><snippet>decode()</snippet></ROW><ROW><id>5694353</id><snippet>n.show()</snippet></ROW><ROW><id>5694353</id><snippet>import pynotify

pynotify.init('someName')
n = pynotify.Notification("Summary", "Body")
try:
    n.show()
except:
    n.show()
</snippet></ROW><ROW><id>5694353</id><snippet>n.show()</snippet></ROW><ROW><id>5694382</id><snippet>seq</snippet></ROW><ROW><id>5694382</id><snippet>'&gt;'</snippet></ROW><ROW><id>5694382</id><snippet>def parseSequenceIntoDictionary(filename):
    lis=[]
    seq=''
    with open(filename, 'r') as fp:
        for line in fp:
            if('&gt;' not in line):
                seq+=line.rstrip()
            elif('&gt;' in line):
                lis.append(seq)
                seq=''
        # the file ended
        lis.append(seq) # store the last section
        lis.remove('')
        return lis
</snippet></ROW><ROW><id>5694382</id><snippet>if line.startswith("'&gt;"):</snippet></ROW><ROW><id>5694570</id><snippet>setup(...,
    package_data={
        'testapp' : ['testapp/*.html']
    }, ...)
</snippet></ROW><ROW><id>5694677</id><snippet>window.getmaxyx()</snippet></ROW><ROW><id>5694677</id><snippet>import os
rows, cols = os.popen('stty size', 'r').read().split()
</snippet></ROW><ROW><id>5694838</id><snippet>reply.rawHeaderPairs()</snippet></ROW><ROW><id>5694838</id><snippet>import pprint, sys
from PyQt4 import QtCore, QtNetwork

app = QtCore.QCoreApplication(sys.argv)
request = QtNetwork.QNetworkRequest(QtCore.QUrl("http://stackoverflow.com"))
manager = QtNetwork.QNetworkAccessManager()
reply = manager.get(request)
while not reply.isFinished():
    app.processEvents()

try:
    # for Qt 4.7 and higher:
    pprint.pprint(reply.rawHeaderPairs())
except AttributeError:
    # for Qt &lt; 4.7:
    for header in reply.rawHeaderList():
        pprint.pprint((header, reply.rawHeader(header)))
</snippet></ROW><ROW><id>5694838</id><snippet>QNetworkReply</snippet></ROW><ROW><id>5694838</id><snippet>rawHeader</snippet></ROW><ROW><id>5694838</id><snippet>rawHeaderList</snippet></ROW><ROW><id>5694838</id><snippet>header</snippet></ROW><ROW><id>5694847</id><snippet>uid = User.objects.get(username='Greg').id
pinyin = Pinyin.objects.get(pinyinWord='kuai')

learned, created = Learned.objects.get_or_create(pinyinWord=pinyin.pinyinWord, 
                                                                 user__id=uid)
if created:   # newly INSERTed Learned  instance
     learned.date = datetime.date.today()
     learned.learned = False
     learned.save()
</snippet></ROW><ROW><id>5695268</id><snippet>values = set(map(lambda x:x[1], list))
newlist = [[y[0] for y in list if y[1]==x] for x in values]
</snippet></ROW><ROW><id>5695271</id><snippet>fread()</snippet></ROW><ROW><id>5695271</id><snippet>#include &lt;inttypes.h&gt; /* uint32_t and PRIu32 macros */
#include &lt;stdbool.h&gt; /* bool type */
#include &lt;stdio.h&gt;

/* 
   gcc *.c &amp;&amp; 
  python -c'import struct, sys; sys.stdout.write(struct.pack("&lt;I", 123))' |
  ./a.out 
*/

static bool is_little_endian(void) {
  /* Find endianness of the system. */
  const int n = 1;
  return (*(char*)&amp;n) == 1; /* 01 00 00 00 for little-endian */
}

static uint32_t reverse_byteorder(uint32_t n) {
  uint32_t i;
  char *c = (char*) &amp;n;
  char *p = (char*) &amp;i;
  p[0] = c[3];
  p[1] = c[2];
  p[2] = c[1];
  p[3] = c[0];
  return i;
}

int main() {
  uint32_t n; /* '&lt;' format assumes 4-byte integer */

  if (fread(&amp;n, sizeof(n), 1, stdin) != 1) {
    fprintf(stderr, "error while reading unsigned from stdin");
    return 1;
  }

  if (! is_little_endian()) 
    /* convert from big-endian to little-endian ('&lt;' format) */
    n = reverse_byteorder(n);

  printf("%" PRIu32 " 0x%08x\n", n, n);
  return 0;
}
</snippet></ROW><ROW><id>5695271</id><snippet>123 0x0000007b
</snippet></ROW><ROW><id>5695442</id><snippet>DictReader</snippet></ROW><ROW><id>5695442</id><snippet>for row in csv.DictReader(items_file, dialect='excel', delimiter='\t'):
    for key in row:
        print 'key=%s, value=%s' % (key, row[key])
</snippet></ROW><ROW><id>5695593</id><snippet>post_quote_id</snippet></ROW><ROW><id>5695593</id><snippet>Post</snippet></ROW><ROW><id>5695593</id><snippet>quoted_by = models.ManyToManyField('self')
</snippet></ROW><ROW><id>5695593</id><snippet>example_post = Post.objects.get(pk=1)
posts_that_quote_my_example_post = example_post.quoted_by.all()
</snippet></ROW><ROW><id>5695593</id><snippet>&lt;ul&gt;
  {% for quote in post.quoted_by.all %}
    &lt;li&gt;{{ quote.post_body }}&lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>5695748</id><snippet>u"..."</snippet></ROW><ROW><id>5695748</id><snippet>u'...'</snippet></ROW><ROW><id>5695748</id><snippet>% cat test.py
# -*- coding: utf-8 -*-
a = u"2 €uros"
b = u"2 Euros"
print len(b)
print len(a)
print a[3:]
print b[3:]
% python test.py 
7
7
uros
uros
</snippet></ROW><ROW><id>5696521</id><snippet>cmd</snippet></ROW><ROW><id>5696521</id><snippet>cmd</snippet></ROW><ROW><id>5696521</id><snippet>cmd2</snippet></ROW><ROW><id>5696836</id><snippet>cumtime  filename:lineno(function)
 32.168  &lt;string&gt;:1(&lt;module&gt;)
 32.168  win32.py:46(run)
 20.531  engine.py:58(Update)
 17.069  window.py:60(SetTile)
 11.995  sprite.py:349(_set_texture)
  9.062  sprite.py:365(_create_vertex_list)
</snippet></ROW><ROW><id>5696836</id><snippet>_set_texture</snippet></ROW><ROW><id>5696836</id><snippet>_create_vertex_list</snippet></ROW><ROW><id>5696852</id><snippet>rows = []
for row in csv.DictReader(items_file, dialect='excel', delimiter='\t'):
    rows.append(row)

# rows[0]
{'keyA': 13, 'keyB': 'dataB' ... }
# rows[1]
{'keyA': 5, 'keyB': 'dataB' ... }
</snippet></ROW><ROW><id>5696852</id><snippet>sum(row['keyA'] for row in rows)
</snippet></ROW><ROW><id>5696852</id><snippet>rows</snippet></ROW><ROW><id>5696852</id><snippet>import csv
import sqlite3

conn = sqlite3.connect(":memory:")
c = conn.cursor()
c.execute("create table t (col1 text, col2 float);")

# csv.DictReader uses the first line in the file as column headings by default
dr = csv.DictReader(open('data.csv', delimiter=','))
to_db = [(i['col1'], i['col2']) for i in dr]
c.executemany("insert into t (col1, col2) values (?, ?);", to_db)
</snippet></ROW><ROW><id>5697057</id><snippet>BLOB in the datastore</snippet></ROW><ROW><id>5697418</id><snippet>function(data) {
    var newRow = $('&lt;tr class="gradeA"&gt;&lt;/tr&gt;');

    //you can use $('attributename', data) to access each attribute
    // in the returned data object

    // build tds with the data, like I've done in the line above for the tr
    // then append them to newRow, using .append()

    // then we can just append the new row to the table
    $('#your_city').find('tbody').append(newRow);
}
</snippet></ROW><ROW><id>5697518</id><snippet>&gt;&gt;&gt; def list_length(L):
...     if L:
...         return 1 + list_length(L[1:])
...     return 0
... 
&gt;&gt;&gt; list_length(myarray)
5
&gt;&gt;&gt; list_length([])
0
&gt;&gt;&gt; list_length([1]*4)
4
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5697531</id><snippet>socket.setblocking(0)</snippet></ROW><ROW><id>5697531</id><snippet>select()</snippet></ROW><ROW><id>5697531</id><snippet>import socket
import select

SERVER_SOCKADDR = ("", 424242)

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setblocking(0)      # &lt;------------------
server.bind(SERVER_SOCKADDR)
server.listen(5)

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.setblocking(0)

result = client.connect_ex(SERVER_SOCKADDR)

rfds, wfds, xfds = select.select([server], [client], [], 1)
if server in rfds:
    print "Server socket: accept does not block"
    sockfd, addr = server.accept()    # sockfd.send() and sockfd.recv() to 
                                      # write and read the stream...
    sockfd.setblocking(0)
    print sockfd, addr
else:
    print "Server socket: accept blocks"
if client in wfds:
    print "Client socket: write does not block"
else:
    print "Client socket: write blocks"


server.close()
client.close()
</snippet></ROW><ROW><id>5697531</id><snippet>[mpenning@Bucksnort ~]$ python socket_test.py
Server socket: accept does not block
&lt;socket._socketobject object at 0xb75764c4&gt; ('127.0.0.1', 35810)
Client socket: write does not block
[mpenning@Bucksnort ~]$
</snippet></ROW><ROW><id>5697547</id><snippet>cmp</snippet></ROW><ROW><id>5697547</id><snippet>None</snippet></ROW><ROW><id>5697547</id><snippet>None</snippet></ROW><ROW><id>5697547</id><snippet>0</snippet></ROW><ROW><id>5697547</id><snippet>L = [[None], [1, 2]]
normalized = list(list(0 if i is None else i for i in x) for x in L)
# list-comprehension alternative:
# L2 = [[0 if i is None else i for i in x] for x in L]
</snippet></ROW><ROW><id>5697547</id><snippet>assertEquals</snippet></ROW><ROW><id>5697547</id><snippet>expected_result = [[0], [1, 2]]
self.assertEquals(sorted(normalized), sorted(expected_result))
</snippet></ROW><ROW><id>5697547</id><snippet>import collections
def replace_nested(L, replacement=0):
    if None in L:
        for i,item in enumerate(L):
            if item is None:
                L[i] = replacement
    else:
        for i,S in enumerate(L):
            if isinstance(S, collections.Iterable) and not isinstance(S, str):
                replace_nested(S)
</snippet></ROW><ROW><id>5697693</id><snippet>//div[contains(@class, 'pagination')]/a[re:match(text(), '^\d+$')]
</snippet></ROW><ROW><id>5697789</id><snippet>__iter__</snippet></ROW><ROW><id>5697789</id><snippet>def __iter__(self):
    for start in self.start_nodes:
        for end in self.end_nodes:
            for path in self.find_path(self._graph, start, end):
                yield path
</snippet></ROW><ROW><id>5697964</id><snippet>file_name = files.blobstore.create(mime_type='image/png',_blobinfo_uploaded_filename=file_name_from_url)
</snippet></ROW><ROW><id>5698357</id><snippet>def printquery(statement, bind=None):
    """
    print a query, with values filled in
    for debugging purposes *only*
    for security, you should always separate queries from their values
    please also note that this function is quite slow
    """
    import sqlalchemy.orm
    if isinstance(statement, sqlalchemy.orm.Query):
        if bind is None:
            bind = statement.session.get_bind(
                    statement._mapper_zero_or_none()
            )
        statement = statement.statement
    elif bind is None:
        bind = statement.bind 

    dialect = bind.dialect
    compiler = statement._compiler(dialect)
    class LiteralCompiler(compiler.__class__):
        def visit_bindparam(
                self, bindparam, within_columns_clause=False, 
                literal_binds=False, **kwargs
        ):
            return super(LiteralCompiler, self).render_literal_bindparam(
                    bindparam, within_columns_clause=within_columns_clause,
                    literal_binds=literal_binds, **kwargs
            )

    compiler = LiteralCompiler(dialect, statement)
    print compiler.process(statement)
</snippet></ROW><ROW><id>5698369</id><snippet>setup.py</snippet></ROW><ROW><id>5698369</id><snippet>-arch i386</snippet></ROW><ROW><id>5698369</id><snippet>-arch ppc</snippet></ROW><ROW><id>5698369</id><snippet>gcc-4.0</snippet></ROW><ROW><id>5698369</id><snippet>MACOSX_DEPLOYMENT_TARGET=10.3</snippet></ROW><ROW><id>5698369</id><snippet>10.4</snippet></ROW><ROW><id>5698950</id><snippet>('A', 'A')</snippet></ROW><ROW><id>5698950</id><snippet>from Bio.SubsMat import MatrixInfo

def score_match(pair, matrix):
    if pair not in matrix:
        return matrix[(tuple(reversed(pair)))]
    else:
        return matrix[pair]

def score_pairwise(seq1, seq2, matrix, gap_s, gap_e):
    score = 0
    gap = False
    for i in range(len(seq1)):
        pair = (seq1[i], seq2[i])
        if not gap:
            if '-' in pair:
                gap = True
                score += gap_s
            else:
                score += score_match(pair, matrix)
        else:
            if '-' not in pair:
                gap = False
                score += score_match(pair, matrix)
            else:
                score += gap_e
    return score

seq1 = 'PAVKDLGAEG-ASDKGT--SHVVY----------TI-QLASTFE'
seq2 = 'PAVEDLGATG-ANDKGT--LYNIYARNTEGHPRSTV-QLGSTFE'

blosum = MatrixInfo.blosum62

score_pairwise(seq1, seq2, blosum, -5, -1)
</snippet></ROW><ROW><id>5699153</id><snippet>import re
topic_message = 'This topic is a-ok'

# Option 1: Invalidate one char in string.
re1 = re.compile(r"[&lt;&gt;/{}[\]~`]");
if re1.search(topic_message):
    print ("RE1: Invalid char detected.")
else:
    print ("RE1: No invalid char detected.")

# Option 2: Validate all chars in string.
re2 =  re.compile(r"^[^&lt;&gt;/{}[\]~`]*$");
if re2.match(topic_message):
    print ("RE2: All chars are valid.")
else:
    print ("RE2: Not all chars are valid.")
</snippet></ROW><ROW><id>5699153</id><snippet>set()</snippet></ROW><ROW><id>5699153</id><snippet>timeit</snippet></ROW><ROW><id>5699153</id><snippet>r"""
TEST topic_message STRINGS:
ok:  'This topic is A-ok.     This topic is     A-ok.'
bad: 'This topic is &lt;not&gt;-ok. This topic is {not}-ok.'

MEASURED PYTHON STATEMENTS:
Method 1: 're1.search(topic_message)'
Method 2: 're2.match(topic_message)'
Method 3: 'set(invalid_chars).intersection(topic_message)'
"""
</snippet></ROW><ROW><id>5699153</id><snippet>r"""
Seconds to perform 1000000 Ok-match/Bad-no-match loops:
Method  Ok-time  Bad-time
1        1.054    1.190
2        1.830    1.636
3        4.364    4.577
"""
</snippet></ROW><ROW><id>5699153</id><snippet>set().intersection()</snippet></ROW><ROW><id>5699803</id><snippet>pylab</snippet></ROW><ROW><id>5699803</id><snippet>import matplotlib as mpl
import matplotlib.pylab  # Loads the pylab submodule as well
# mpl.pylab is now defined
</snippet></ROW><ROW><id>5699803</id><snippet>import matplotlib.pylab as pl</snippet></ROW><ROW><id>5699803</id><snippet>pylab</snippet></ROW><ROW><id>5699803</id><snippet>matplotlib</snippet></ROW><ROW><id>5700032</id><snippet>print</snippet></ROW><ROW><id>5700032</id><snippet>&gt;&gt;&gt; name = "Foo"
&gt;&gt;&gt; print "How many times did " + name "go here?";
  File "&lt;stdin&gt;", line 1
    print "How many times did " + name "go here?";
                                                ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>5700032</id><snippet>+</snippet></ROW><ROW><id>5700032</id><snippet>name</snippet></ROW><ROW><id>5700032</id><snippet>&gt;&gt;&gt; print "How many times did " + name + "go here?";
How many times did Foogo here?
</snippet></ROW><ROW><id>5700350</id><snippet>self.sock.connect(("someserver.com",443))
</snippet></ROW><ROW><id>5700350</id><snippet>httplib</snippet></ROW><ROW><id>5700886</id><snippet>from linkrator.models import LinksPlugin as LinkListPluginModel</snippet></ROW><ROW><id>5700886</id><snippet>from linkrotator.models import LinkListPluginModel</snippet></ROW><ROW><id>5700886</id><snippet>from linkrotator.models import LinkListPluginModel

class LinkListPlugin(CMSPluginBase):
    name = 'Link rotator'
    text_enabled = True
    model = LinkListPluginModel
    render_template = "linkrotator/links.html"

    def render(self, context, instance, placeholder):
        context.update({'instance':instance})
        return context
</snippet></ROW><ROW><id>5701800</id><snippet>newuser.fileman_Setting</snippet></ROW><ROW><id>5701934</id><snippet>output_lines = []
for u in li:  
    z = u[1]  
    A = z.count('A')  
    C = z.count('C')   
    G = z.count('G')   
    T = z.count('T')
    sumbases = "A,C,G,T" # I suppose you format it here differently
    y = sumbases.replace("\n"," ")  # not sure why you need this

    # print(y) # don't print now, print later...
    output_lines.append(y)

print(','.join(output_lines))
</snippet></ROW><ROW><id>5701934</id><snippet>seq = input("enter DNA sequence to search: ")
pat = re.compile('(.{10})(ATC.{3,6}CAG)')
output_lines = [] 
for mat in pat.finditer(seq):
    x = mat.end()
    z = (mat.groups()+(seq[x:x+10],)[1]
    output_lines.append(str([z.count(a) for a in 'ACGT')]))
print(','.join(output_lines))
</snippet></ROW><ROW><id>5701939</id><snippet>numpy.indices()</snippet></ROW><ROW><id>5701939</id><snippet>t, y, x = numpy.indices(J.shape)
b = a[t, J, y, x]
</snippet></ROW><ROW><id>5702105</id><snippet>from pprint import pprint

outf.write("array1 = "); pprint(array1, outf)
</snippet></ROW><ROW><id>5702198</id><snippet>foo2.ops.im_func</snippet></ROW><ROW><id>5702584</id><snippet>from .. import database.data</snippet></ROW><ROW><id>5702584</id><snippet>sys.path</snippet></ROW><ROW><id>5702584</id><snippet>addsitedir()</snippet></ROW><ROW><id>5702584</id><snippet>.pth</snippet></ROW><ROW><id>5702632</id><snippet>time.sleep(10)</snippet></ROW><ROW><id>5702632</id><snippet>def worker(stop, jobs):
    for j in jobs:
        if stop:
            break
        j.do()

stop = []
d = deferToThread(worker)

# This will make the list eval to true and break out of the loop.
stop.append(None)
</snippet></ROW><ROW><id>5702816</id><snippet>from xml.dom import minidom

doc = minidom.parse(myXmlFile)
for element in doc.getElementsByTagName('MyElementName'):
    if element.getAttribute('name') in ['AttrName1', 'AttrName2']:
        parentNode = element.parentNode
        parentNode.insertBefore(doc.createComment(element.toxml()), element)
        parentNode.removeChild(element)
f = open(myXmlFile, "w")
f.write(doc.toxml())
f.close()
</snippet></ROW><ROW><id>5702962</id><snippet>A</snippet></ROW><ROW><id>5702962</id><snippet>a</snippet></ROW><ROW><id>5702962</id><snippet>A</snippet></ROW><ROW><id>5702962</id><snippet>a</snippet></ROW><ROW><id>5702962</id><snippet>A</snippet></ROW><ROW><id>5702962</id><snippet>A</snippet></ROW><ROW><id>5703378</id><snippet>MyISAM</snippet></ROW><ROW><id>5703378</id><snippet>DELETE</snippet></ROW><ROW><id>5703378</id><snippet>DELETE</snippet></ROW><ROW><id>5703459</id><snippet>--verbose</snippet></ROW><ROW><id>5703459</id><snippet>place</snippet></ROW><ROW><id>5703459</id><snippet>path = '/storing/txtFiles'</snippet></ROW><ROW><id>5703459</id><snippet>file_path = os.path.dirname(__file__)
path = os.path.join(file_path, 'storing', 'txtFiles')
</snippet></ROW><ROW><id>5703459</id><snippet>print</snippet></ROW><ROW><id>5703459</id><snippet>self.response.out.write(stuff_to_write)</snippet></ROW><ROW><id>5704106</id><snippet>$todaysdate = date("Y-m-j H:i:s");
print $todaysdate;
</snippet></ROW><ROW><id>5704176</id><snippet>http://</snippet></ROW><ROW><id>5704176</id><snippet>conn = httplib.HTTPConnection('http://127.0.0.1:6868')
</snippet></ROW><ROW><id>5704176</id><snippet>conn = httplib.HTTPConnection('127.0.0.1:6868')
</snippet></ROW><ROW><id>5704338</id><snippet>n += p</snippet></ROW><ROW><id>5704338</id><snippet>n += p
print n
</snippet></ROW><ROW><id>5704630</id><snippet>from urlparse import urlparse
import csv
import re

ifile =open(ipath,'r')
ofile = open(opath, 'wb')
writer = csv.writer(ofile, dialect='excel')

url =[urlparse(u).netloc for u in ifile]
sitesource =  set([re.sub("www.", "", e) for e in url])

for u in sitesource:
    print ("Creation de:", u)
    writer.writerow([u]) 

ofile.close()
ifile.close()
</snippet></ROW><ROW><id>5704630</id><snippet>liste</snippet></ROW><ROW><id>5704630</id><snippet>for row in file (ifile):</snippet></ROW><ROW><id>5704630</id><snippet>url</snippet></ROW><ROW><id>5704630</id><snippet>url =[urlparse(u).netloc for u in file (ipath, "r+b")]
</snippet></ROW><ROW><id>5704630</id><snippet>url =[urlparse(u).netloc for u in ifile]
</snippet></ROW><ROW><id>5704630</id><snippet>writerow(u)</snippet></ROW><ROW><id>5704630</id><snippet>writerow([u])</snippet></ROW><ROW><id>5704630</id><snippet>u</snippet></ROW><ROW><id>5704630</id><snippet>writer.writerow(sitesource)</snippet></ROW><ROW><id>5704757</id><snippet>c.ro * 3
</snippet></ROW><ROW><id>5704757</id><snippet>c[0] * 3
</snippet></ROW><ROW><id>5705014</id><snippet>s = "2,5,7-9,12"
ranges = (x.split("-") for x in s.split(","))
print [i for r in ranges for i in range(int(r[0]), int(r[-1]) + 1)]
</snippet></ROW><ROW><id>5705014</id><snippet>[2, 5, 7, 8, 9, 12]
</snippet></ROW><ROW><id>5705041</id><snippet>          for tf in self.solve():
             yield tf
</snippet></ROW><ROW><id>5705041</id><snippet>n = 0
def rekurse(z):
    global n
    if z:
        yield z
        for x in rekurse(z-1):
            n += 1
            yield x

print list(rekurse(10))
print n
</snippet></ROW><ROW><id>5705041</id><snippet>n</snippet></ROW><ROW><id>5705041</id><snippet>recurse(10)</snippet></ROW><ROW><id>5705041</id><snippet>recurse(9)</snippet></ROW><ROW><id>5705430</id><snippet>import numpy
from scipy.spatial.distance import pdist
D=2
N=3000
p=numpy.random.uniform(size=(N,D))
dist=pdist(p, 'euclidean')
</snippet></ROW><ROW><id>5705430</id><snippet>distance</snippet></ROW><ROW><id>5705430</id><snippet>O(n^2)</snippet></ROW><ROW><id>5705430</id><snippet>for i in xrange(1, N):
  v = p[:N-i] - p[i:]
  dist = numpy.sqrt(numpy.sum(numpy.square(v), axis=1))
  for j in numpy.nonzero(dist &gt; 1.4)[0]:
    print j, i+j
</snippet></ROW><ROW><id>5705472</id><snippet>print"1."+`map(len,"""      








       """.split("\n"))`[1::3]
</snippet></ROW><ROW><id>5705673</id><snippet>$ ls -al `which python`
lrwxrwxrwx 1 root root 9 2010-04-21 12:08 /usr/bin/python -&gt; python2.6
</snippet></ROW><ROW><id>5705673</id><snippet>cd /usr/bin
sudo ln -sf `which python2.6` python
</snippet></ROW><ROW><id>5705685</id><snippet>sudo apt-get remove python-django
</snippet></ROW><ROW><id>5705691</id><snippet>@property</snippet></ROW><ROW><id>5705691</id><snippet>class foo(object):
    bar = "bar"
    @property
    def baz(self):
        return "baz"
</snippet></ROW><ROW><id>5705847</id><snippet>A = [1 2; 3 4]</snippet></ROW><ROW><id>5705847</id><snippet>    |1 3|   
A = |   |
    |2 4|
</snippet></ROW><ROW><id>5705865</id><snippet>bulletdefs.h</snippet></ROW><ROW><id>5705865</id><snippet>#defines</snippet></ROW><ROW><id>5705865</id><snippet>#define _ACTIVE_TAG 1
#define _ISLAND_SLEEPING 2
#define _WANTS_DEACTIVATION 3
#define _DISABLE_DEACTIVATION 4
#define _DISABLE_SIMULATION 5
</snippet></ROW><ROW><id>5705865</id><snippet>bullet.pyx</snippet></ROW><ROW><id>5705865</id><snippet>cdef extern from "bulletdefs.h":
    cdef int _ACTIVE_TAG
    cdef int _ISLAND_SLEEPING
    cdef int _WANTS_DEACTIVATION
    cdef int _DISABLE_DEACTIVATION
    cdef int _DISABLE_SIMULATION

ACTIVE_TAG = _ACTIVE_TAG
ISLAND_SLEEPING = _ISLAND_SLEEPING
WANTS_DEACTIVATION = _WANTS_DEACTIVATION
DISABLE_DEACTIVATION = _DISABLE_DEACTIVATION
DISABLE_SIMULATION = _DISABLE_SIMULATION
</snippet></ROW><ROW><id>5705865</id><snippet>Python 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import bullet
&gt;&gt;&gt; bullet.ACTIVE_TAG
1
&gt;&gt;&gt; bullet.DISABLE_SIMULATION
5
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5705904</id><snippet>socketpair()</snippet></ROW><ROW><id>5705904</id><snippet>select()</snippet></ROW><ROW><id>5705904</id><snippet>poll()</snippet></ROW><ROW><id>5705913</id><snippet>develop</snippet></ROW><ROW><id>5705913</id><snippet>[buildout]
develop = .
</snippet></ROW><ROW><id>5705913</id><snippet>[buildout]
extensions = mr.developer
auto-checkout = package.name

[sources]
package.name = git url/to/package.name.git
</snippet></ROW><ROW><id>5705913</id><snippet>src/</snippet></ROW><ROW><id>5705913</id><snippet>develop</snippet></ROW><ROW><id>5705913</id><snippet>find-links</snippet></ROW><ROW><id>5705913</id><snippet>[buildout]
find-links = http://github.com/yourname/package.name/tarball/version#egg=package.name-versionnumber
eggs = package.name
</snippet></ROW><ROW><id>5705913</id><snippet>find-links</snippet></ROW><ROW><id>5706242</id><snippet>start=cuda.Event()
end=cuda.Event()

start.record() # start timing
func(args,block=blockdims)
cuda.memcpy_dtoh(d,h)
end.record() # end timing
# calculate the run length
end.synchronize()
millis = start.time_till(end)
print millis
</snippet></ROW><ROW><id>5706388</id><snippet>a.click()</snippet></ROW><ROW><id>5706388</id><snippet>z.next()</snippet></ROW><ROW><id>5706388</id><snippet>click()</snippet></ROW><ROW><id>5706388</id><snippet>z.next()</snippet></ROW><ROW><id>5706388</id><snippet>def click_link_partial(div_id, partial):
  linkdiv = driver.find_element_by_id(div_id)
  for a in linkdiv.find_elements_by_tag_name('a'):
      if a.text.startswith(partial):
         a.click()
         break  # stop iterating over the partially matched elements.
</snippet></ROW><ROW><id>5706388</id><snippet>z.next()</snippet></ROW><ROW><id>5706388</id><snippet>def click_link_partial(div_id, partial):
  linkdiv = driver.find_element_by_id(div_id)
  return (a for a in linkdiv.find_elements_by_tag_name('a') 
            if a.text.startswith(partial))

for matched_clickable_anchor in click_link_partial('#some-div-id', 'spam'):
    matched_clickable_anchor.click()  # do click
    # do something else.
</snippet></ROW><ROW><id>5706576</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5706576</id><snippet>ModelForm</snippet></ROW><ROW><id>5706576</id><snippet>class YourAdminForm(forms.ModelForm):

    class Meta:
        model = YourModel

    def __init__(self, *args, **kwargs):
        super(YourAdminForm, self).__init__(*args, **kwargs)
        qs = self.fields['your_fk_field'].queryset
        self.fields['your_fk_field'].queryset = qs.filter(is_active=1) 
</snippet></ROW><ROW><id>5706599</id><snippet>__setattr__</snippet></ROW><ROW><id>5706599</id><snippet>__setitem__</snippet></ROW><ROW><id>5706599</id><snippet>root</snippet></ROW><ROW><id>5706599</id><snippet>from persistent.mapping import PersistentMapping
root['layer'] = PersistentMapping()
</snippet></ROW><ROW><id>5706599</id><snippet>root['layer'] = root['layer']
</snippet></ROW><ROW><id>5706599</id><snippet>_p_changed</snippet></ROW><ROW><id>5706599</id><snippet>root._p_changed = 1
</snippet></ROW><ROW><id>5706634</id><snippet>TestForm</snippet></ROW><ROW><id>5706634</id><snippet>TesForm</snippet></ROW><ROW><id>5706634</id><snippet>Meta = type("Meta", (), {"model": Consumer})
TestForm = type("TestForm", (djangoforms.ModelForm,), {"Meta": Meta})
</snippet></ROW><ROW><id>5706669</id><snippet>b10.00000010100011111100001010001111110000101000111111000010100011111100...
</snippet></ROW><ROW><id>5706669</id><snippet>b10.000000101000111111000010100011111100001010001111110
</snippet></ROW><ROW><id>5706669</id><snippet>2.0099999999999997868371792719699442386627197265625
</snippet></ROW><ROW><id>5706669</id><snippet>2.0099999999999998
</snippet></ROW><ROW><id>5706787</id><snippet>x = ["c~d", "e~f", "g~h"]
a, b = zip(*(s.split("~") for s in x))
print a
print b
</snippet></ROW><ROW><id>5706787</id><snippet>('c', 'e', 'g')
('d', 'f', 'h')
</snippet></ROW><ROW><id>5707113</id><snippet>__init__.py</snippet></ROW><ROW><id>5707142</id><snippet>for data in (self.mfiles, self.nmfiles):
    for key, value in data.iteritems():
        if key not in self.INPUT['extras']:
            data[key] = self.dirs['confdir'] + '/' + value
</snippet></ROW><ROW><id>5707554</id><snippet>getattr(student_data, "student%d" % (i,))</snippet></ROW><ROW><id>5707605</id><snippet>myFuncs = [f0,f1,f2]
myFuncs[2](...) #calls f2
</snippet></ROW><ROW><id>5707605</id><snippet>myFuncs = {'alice':f1, 'bob':f2}
myFuncs['alice'](...)
</snippet></ROW><ROW><id>5707605</id><snippet>def fN(n):
    return globals()['f'+str(n)]

fN(2)(...) #calls f2, defined in same module
</snippet></ROW><ROW><id>5707605</id><snippet>&gt;&gt;&gt; def makeRegistrar():
...     registry = {}
...     def registrar(func):
...         registry[func.__name__] = func
...         return func  # normally a decorator returns a wrapped function, 
...                      # but here we return func unmodified, after registering it
...     registrar.all = registry
...     return registrar
</snippet></ROW><ROW><id>5707605</id><snippet>&gt;&gt;&gt; reg = makeRegistrar()
&gt;&gt;&gt; @reg
... def f1(a):
...  return a+1
... 
&gt;&gt;&gt; @reg
... def f2(a,b):
...  return a+b
... 
&gt;&gt;&gt; reg.all
{'f1': &lt;function f1 at 0x7fc24c381958&gt;, 'f2': &lt;function f2 at 0x7fc24c3819e0&gt;}
... 
&gt;&gt;&gt; def fN(n):
...  return reg.all['f'+str(n)]
... 
&gt;&gt;&gt; fN(2)(10,20)
30
</snippet></ROW><ROW><id>5707943</id><snippet>array[6][0:5]</snippet></ROW><ROW><id>5707943</id><snippet>KFCFzip</snippet></ROW><ROW><id>5707943</id><snippet>for line in text:
    array= line.strip().split(",")
    print(array[6][0:5])
    if int(array[6][0:5]) in KFCFzip:
        print("yes")
</snippet></ROW><ROW><id>5707943</id><snippet>range</snippet></ROW><ROW><id>5707943</id><snippet>O(n*m)</snippet></ROW><ROW><id>5707943</id><snippet>n = len(KFCFzip)</snippet></ROW><ROW><id>5707943</id><snippet>KFCFzip = [[93201,93399], [93529,93535], [93601,93899], [95301,95399]]

for line in text:
    array= line.strip().split(",")
    zip = int(array[6][0:5]))
    print(zip)
    found = False
    for r in KFCFzip:
        if zip &gt;= r[0] and zip &lt; r[1]:
            found = True
            break
    if found:
        print("yes")
</snippet></ROW><ROW><id>5707943</id><snippet>197+5+297+97 = 596</snippet></ROW><ROW><id>5707943</id><snippet>596/2 = 298</snippet></ROW><ROW><id>5707943</id><snippet>8/2 = 4</snippet></ROW><ROW><id>5708032</id><snippet>header: Location: http://en.wikipedia.org/wiki/tuticorin_port_trust 
</snippet></ROW><ROW><id>5708426</id><snippet>escape</snippet></ROW><ROW><id>5708426</id><snippet>&lt;div style="width:100%;height:100%"&gt;{{temp1|escape}}&lt;/div&gt;
</snippet></ROW><ROW><id>5708482</id><snippet># 5 is the index of bool in the liststore
gtk.TreeViewColumn('Fav',renderer,active=5)
</snippet></ROW><ROW><id>5708482</id><snippet>import gtk


def on_toggle(cell, path, model, *ignore):
    if path is not None:
        it = model.get_iter(path)
        model[it][0] = not model[it][0]

model = gtk.ListStore(bool)
tv = gtk.TreeView(model)

cell = gtk.CellRendererToggle()
cell.connect("toggled", on_toggle, model)
col = gtk.TreeViewColumn("Foo", cell, active=0)
tv.append_column(col)

w = gtk.Window()
w.connect("destroy", gtk.main_quit)
w.show()

w.add(tv)
tv.show()

## Some initial data
model.append([True])
model.append([False])

gtk.main()
</snippet></ROW><ROW><id>5708560</id><snippet>str</snippet></ROW><ROW><id>5708560</id><snippet>bytes</snippet></ROW><ROW><id>5708560</id><snippet>unicode</snippet></ROW><ROW><id>5708560</id><snippet>str</snippet></ROW><ROW><id>5708560</id><snippet>print('abcd kΩ ☠ °C √Hz µF ü ☃ ♥')
</snippet></ROW><ROW><id>5708560</id><snippet>'abcd k\xce\xa9 \xe2\x98\xa0 \xc2\xb0C \xe2\x88\x9aHz \xc2\xb5F \xc3\xbc \xe2\x98\x83 \xe2\x99\xa5'
</snippet></ROW><ROW><id>5708560</id><snippet>print</snippet></ROW><ROW><id>5708560</id><snippet>abcd k╬⌐ Γÿá ┬░C ΓêÜHz ┬╡F ├╝ Γÿâ ΓÖÑ
</snippet></ROW><ROW><id>5708560</id><snippet>print(u'abcd kΩ ☠ °C √Hz µF ü ☃ ♥')
</snippet></ROW><ROW><id>5708560</id><snippet>☠☃♥</snippet></ROW><ROW><id>5708560</id><snippet>Ω☠√☃♥</snippet></ROW><ROW><id>5708560</id><snippet>char</snippet></ROW><ROW><id>5708560</id><snippet>wchar_t</snippet></ROW><ROW><id>5708560</id><snippet>char</snippet></ROW><ROW><id>5708560</id><snippet>int MessageBoxA(HWND hWnd, const char* lpText, const char* lpCaption, unsigned int uType);
int MessageBoxW(HWND hWnd, const wchar_t* lpText, const wchar_t* lpCaption, unsigned int uType);
</snippet></ROW><ROW><id>5708645</id><snippet>import sys

if old_version:
    print 'hey, upgrade.'
    sys.exit(1)  # A non-zero code indicates failure, on Unix (sys.exit() exits too, but it returns a 0 [=success] exit code)

# main body of whole script
</snippet></ROW><ROW><id>5708645</id><snippet>sys.exit("hey, upgrade")</snippet></ROW><ROW><id>5709340</id><snippet>def log(msg):
  if DEBUG:
    logger.log(msg)
</snippet></ROW><ROW><id>5709340</id><snippet>DEBUG</snippet></ROW><ROW><id>5709522</id><snippet>mylist[start:stop:step]</snippet></ROW><ROW><id>5709522</id><snippet>mylist[start*step:stop*step]</snippet></ROW><ROW><id>5709522</id><snippet>[mylist[i] for i in range(start,stop,step)]
</snippet></ROW><ROW><id>5709532</id><snippet>strptime</snippet></ROW><ROW><id>5709532</id><snippet>import datetime

my_date = datetime.datetime.strptime('2011-07-15', '%Y-%m-%d')
</snippet></ROW><ROW><id>5709532</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>5709532</id><snippet>print d.days</snippet></ROW><ROW><id>5709632</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>5709632</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>5709632</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>5709632</id><snippet>python</snippet></ROW><ROW><id>5709632</id><snippet>$PATH</snippet></ROW><ROW><id>5709632</id><snippet>which python</snippet></ROW><ROW><id>5709632</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>5709632</id><snippet>virtualenv</snippet></ROW><ROW><id>5709632</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>5709632</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>5709999</id><snippet>style = getSampleStyleSheet()['Normal']
style.leading = 24
</snippet></ROW><ROW><id>5710100</id><snippet>import collections
</snippet></ROW><ROW><id>5710100</id><snippet>import collections
orderedDict = collections.OrderedDict()


from collections import OrderedDict
</snippet></ROW><ROW><id>5710253</id><snippet>return checkIndiv(name) or addIndiv(name)
</snippet></ROW><ROW><id>5710276</id><snippet>list(my_ordered_dict)[i]</snippet></ROW><ROW><id>5710276</id><snippet>i</snippet></ROW><ROW><id>5710276</id><snippet># Make your own like this...
class CustomOrderedDict(collections.OrderedDict):
    def __getitem__(self,key):
        try:
            return self.values()[key]
        except TypeError:
            return super(CustomOrderedDict,self).__getitem__(key)
</snippet></ROW><ROW><id>5710276</id><snippet>[]</snippet></ROW><ROW><id>5710294</id><snippet>from coke import *
make(data)
</snippet></ROW><ROW><id>5710294</id><snippet>from coke import make, make2
</snippet></ROW><ROW><id>5710379</id><snippet>import subprocess
import time

start = time.clock()
ret = subprocess.call(['myprog', 'myarg0', ...])
end = time.clock()
if end - start &gt; threshold:
    restart()
</snippet></ROW><ROW><id>5710402</id><snippet>func(**{'type':'Event'})
</snippet></ROW><ROW><id>5710402</id><snippet>func(type='Event')
</snippet></ROW><ROW><id>5710600</id><snippet>class C(object):

    def __init__(self, Type='generic', X=None, Y=None):
        X = X or 5
        Y = Y or 500
        self.X, self.Y = {
            "generic": (X, Y),
            "short": (1, Y),
            "long": (10, Y),
            "large": (X, 2000),
            "small": (X, 100),
        }[Type]

    def __str__(self):
        return "X={0} Y={1}".format(self.X, self.Y)


print(C())
print(C('short'))
print(C('long'))
print(C('large'))
print(C('small'))
print(C('small', 10))
print(C('small', 20, 20))
</snippet></ROW><ROW><id>5710775</id><snippet>import config
</snippet></ROW><ROW><id>5710775</id><snippet>oddValue if isOddSituation() else config.normalValue</snippet></ROW><ROW><id>5710775</id><snippet>copy</snippet></ROW><ROW><id>5710775</id><snippet>import config as baseConfig
config = dict(baseConfig, overriddenValue=etc)
</snippet></ROW><ROW><id>5710797</id><snippet>host=''</snippet></ROW><ROW><id>5710797</id><snippet>host = '0.0.0.0'
s.bind((host, 8080))
</snippet></ROW><ROW><id>5710797</id><snippet>&gt;&gt;&gt; s.getsockname()
('0.0.0.0', 8080)
</snippet></ROW><ROW><id>5710925</id><snippet>StringIO</snippet></ROW><ROW><id>5710925</id><snippet># get_zip_data() gets a zip archive containing 'foo.txt', reading 'hey, foo'

from StringIO import StringIO
zipdata = StringIO()
zipdata.write(get_zip_data())
myzipfile = zipfile.ZipFile(zipdata)
foofile = myzipfile.open('foo.txt')
print foofile.read()

# output: "hey, foo"
</snippet></ROW><ROW><id>5710925</id><snippet>myzipfile = zipfile.Zipfile(StringIO(get_zip_data()))
for name in myzipfile.namelist():
    [ ... ]
</snippet></ROW><ROW><id>5711032</id><snippet>scipy.ndimage.gaussian</snippet></ROW><ROW><id>5711032</id><snippet>scipy.ndimage.uniform</snippet></ROW><ROW><id>5711032</id><snippet>t = timeit.timeit(stmt='ndimage.convolve(x, y, output=x)', number=1,
setup="""
import numpy as np
from scipy import ndimage
x = np.random.random((2048, 2048)).astype(np.float32)
y = np.random.random((32, 32)).astype(np.float32)
""")
print t
</snippet></ROW><ROW><id>5711032</id><snippet>fftconvolve</snippet></ROW><ROW><id>5711032</id><snippet>t = timeit.timeit(stmt="signal.fftconvolve(x, y, mode='same')", number=1,
setup="""
import numpy as np
from scipy import signal
x = np.random.random((2048, 2048)).astype(np.float32)
y = np.random.random((32, 32)).astype(np.float32)
""")
print t
</snippet></ROW><ROW><id>5712059</id><snippet>import calendar
import pprint

year = 2011
days_in_week = 8

c = calendar.Calendar()

# First month with zeroes to create full week
l = list(c.itermonthdays(year, 1))

# Slice by days_in_week
l2 = [[l[a*days_in_week:a*days_in_week+days_in_week] for a in range(len(l) / days_in_week + 1)]]
# Add zeroes if needed and slice rest
l2[-1][-1] += [0] * (days_in_week - (len(l2[-1][-1])))
if l2[-1][-1].count(0) == days_in_week:
    l2[-1] = l2[-1][:-1]

for month in range(2, 13):
    # Days in month
    l = range(1, calendar.monthrange(year, month)[1]+1)

    # Add needed zeroes to the beginning
    zeroes_at_end = l2[-1][-1].count(0)
    l = [0] * ((days_in_week - zeroes_at_end) % days_in_week) + l 

    # Slice by days_in_week
    l2 += [[l[a*days_in_week:a*days_in_week+days_in_week] for a in range(len(l) / days_in_week + 1)]]
    # Add zeroes if needed and slice rest
    l2[-1][-1] += [0] * (days_in_week - (len(l2[-1][-1])))
    if l2[-1][-1].count(0) == days_in_week:
        l2[-1] = l2[-1][:-1]

pprint.pprint(l2)
</snippet></ROW><ROW><id>5712059</id><snippet>[[[0, 0, 0, 0, 0, 1, 2, 3],
  [4, 5, 6, 7, 8, 9, 10, 11],
  [12, 13, 14, 15, 16, 17, 18, 19],
  [20, 21, 22, 23, 24, 25, 26, 27],
  [28, 29, 30, 31, 0, 0, 0, 0]],
 [[0, 0, 0, 0, 1, 2, 3, 4],
  [5, 6, 7, 8, 9, 10, 11, 12],
  [13, 14, 15, 16, 17, 18, 19, 20],
  [21, 22, 23, 24, 25, 26, 27, 28]],
 [[1, 2, 3, 4, 5, 6, 7, 8],
  [9, 10, 11, 12, 13, 14, 15, 16],
  [17, 18, 19, 20, 21, 22, 23, 24],
  [25, 26, 27, 28, 29, 30, 31, 0]],
 [[0, 0, 0, 0, 0, 0, 0, 1],
  [2, 3, 4, 5, 6, 7, 8, 9],
  [10, 11, 12, 13, 14, 15, 16, 17],
  [18, 19, 20, 21, 22, 23, 24, 25],
  [26, 27, 28, 29, 30, 0, 0, 0]],
 [[0, 0, 0, 0, 0, 1, 2, 3],
  [4, 5, 6, 7, 8, 9, 10, 11],
  [12, 13, 14, 15, 16, 17, 18, 19],
  [20, 21, 22, 23, 24, 25, 26, 27],
  [28, 29, 30, 31, 0, 0, 0, 0]],
 [[0, 0, 0, 0, 1, 2, 3, 4],
  [5, 6, 7, 8, 9, 10, 11, 12],
  [13, 14, 15, 16, 17, 18, 19, 20],
  [21, 22, 23, 24, 25, 26, 27, 28],
  [29, 30, 0, 0, 0, 0, 0, 0]],
 [[0, 0, 1, 2, 3, 4, 5, 6],
  [7, 8, 9, 10, 11, 12, 13, 14],
  [15, 16, 17, 18, 19, 20, 21, 22],
  [23, 24, 25, 26, 27, 28, 29, 30],
  [31, 0, 0, 0, 0, 0, 0, 0]],
 [[0, 1, 2, 3, 4, 5, 6, 7],
  [8, 9, 10, 11, 12, 13, 14, 15],
  [16, 17, 18, 19, 20, 21, 22, 23],
  [24, 25, 26, 27, 28, 29, 30, 31]],
 [[1, 2, 3, 4, 5, 6, 7, 8],
  [9, 10, 11, 12, 13, 14, 15, 16],
  [17, 18, 19, 20, 21, 22, 23, 24],
  [25, 26, 27, 28, 29, 30, 0, 0]],
 [[0, 0, 0, 0, 0, 0, 1, 2],
  [3, 4, 5, 6, 7, 8, 9, 10],
  [11, 12, 13, 14, 15, 16, 17, 18],
  [19, 20, 21, 22, 23, 24, 25, 26],
  [27, 28, 29, 30, 31, 0, 0, 0]],
 [[0, 0, 0, 0, 0, 1, 2, 3],
  [4, 5, 6, 7, 8, 9, 10, 11],
  [12, 13, 14, 15, 16, 17, 18, 19],
  [20, 21, 22, 23, 24, 25, 26, 27],
  [28, 29, 30, 0, 0, 0, 0, 0]],
 [[0, 0, 0, 1, 2, 3, 4, 5],
  [6, 7, 8, 9, 10, 11, 12, 13],
  [14, 15, 16, 17, 18, 19, 20, 21],
  [22, 23, 24, 25, 26, 27, 28, 29],
  [30, 31, 0, 0, 0, 0, 0, 0]]]
</snippet></ROW><ROW><id>5712122</id><snippet>run("export TZ=\":Pacific/Auckland\"")
run("date")
</snippet></ROW><ROW><id>5712122</id><snippet>/bin/sh -c 'export TZ=":Pacific/Auckland"'
/bin/sh -c 'date'
</snippet></ROW><ROW><id>5712122</id><snippet>date</snippet></ROW><ROW><id>5712122</id><snippet>os.environ['TZ'] = ":Pacific/Auckland"
run("date")
</snippet></ROW><ROW><id>5712182</id><snippet>value = 256
va = numpy.int32(value)

func(va)
</snippet></ROW><ROW><id>5712265</id><snippet>session.query(...)</snippet></ROW><ROW><id>5712628</id><snippet>nosetests</snippet></ROW><ROW><id>5712628</id><snippet>Pr</snippet></ROW><ROW><id>5712628</id><snippet>pr</snippet></ROW><ROW><id>5712769</id><snippet>inspect.getgeneratorstate()</snippet></ROW><ROW><id>5712769</id><snippet>GEN_CREATED = 'GEN_CREATED'
GEN_RUNNING = 'GEN_RUNNING'
GEN_SUSPENDED = 'GEN_SUSPENDED'
GEN_CLOSED = 'GEN_CLOSED'
</snippet></ROW><ROW><id>5712982</id><snippet>class C(object):
    def __init__(self, **kwargs):
        for (variableName, value) in kwargs.items():
            # setattr(), etc.
</snippet></ROW><ROW><id>5712982</id><snippet>C(x=3, y=123,…)</snippet></ROW><ROW><id>5712982</id><snippet>class C(object):
    def __init__(self, *args):
        arg_iter = iter(args)
        for (variableName, value) in zip(arg_iter, arg_iter):
            # setattr(), etc.
</snippet></ROW><ROW><id>5712982</id><snippet>C('x', 3, 'y', 123,…)</snippet></ROW><ROW><id>5712982</id><snippet>zip()</snippet></ROW><ROW><id>5712982</id><snippet>args</snippet></ROW><ROW><id>5712982</id><snippet>C(3)</snippet></ROW><ROW><id>5712982</id><snippet>zip()</snippet></ROW><ROW><id>5713088</id><snippet>&gt;&gt;&gt; re.findall("_\\w+_", 'sdsd _sdsd_ sdsd sdsd _sssssssss_')
['_sdsd_', '_sssssssss_']
&gt;&gt;&gt; re.findall("_\\w+_", '')
[]
</snippet></ROW><ROW><id>5713233</id><snippet>GIF89a</snippet></ROW><ROW><id>5713264</id><snippet>else</snippet></ROW><ROW><id>5713303</id><snippet>d.pop</snippet></ROW><ROW><id>5713303</id><snippet>item = d.pop("keyA")</snippet></ROW><ROW><id>5713303</id><snippet>del</snippet></ROW><ROW><id>5713523</id><snippet>by_key_name</snippet></ROW><ROW><id>5713523</id><snippet>get_data_for_users_country_and_city</snippet></ROW><ROW><id>5713523</id><snippet>city_name</snippet></ROW><ROW><id>5713523</id><snippet>country_name</snippet></ROW><ROW><id>5713523</id><snippet>country_name</snippet></ROW><ROW><id>5713523</id><snippet>UserReportedCity</snippet></ROW><ROW><id>5713523</id><snippet>UserReportedCity</snippet></ROW><ROW><id>5713523</id><snippet>UserReportedStatus</snippet></ROW><ROW><id>5713570</id><snippet>dosth</snippet></ROW><ROW><id>5713570</id><snippet>foo1()</snippet></ROW><ROW><id>5713570</id><snippet>foo2()</snippet></ROW><ROW><id>5713570</id><snippet>dosth()</snippet></ROW><ROW><id>5713570</id><snippet>try:
    foo1() 
    foo2()
except (FooError1, FooError2):
    dosth()
raise raisesth()
</snippet></ROW><ROW><id>5713570</id><snippet>and</snippet></ROW><ROW><id>5713570</id><snippet>except</snippet></ROW><ROW><id>5713570</id><snippet>FooError2</snippet></ROW><ROW><id>5713649</id><snippet>pickle</snippet></ROW><ROW><id>5713649</id><snippet>cPickle</snippet></ROW><ROW><id>5713662</id><snippet>def signup_form(request):
    return SignupForm()
</snippet></ROW><ROW><id>5713662</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>5713662</id><snippet>'signup.form.signup_form',
</snippet></ROW><ROW><id>5713778</id><snippet>objectify.pyd</snippet></ROW><ROW><id>5713778</id><snippet>lxml</snippet></ROW><ROW><id>5714298</id><snippet>apt-get install xautomation</snippet></ROW><ROW><id>5714298</id><snippet>xte</snippet></ROW><ROW><id>5714298</id><snippet>from subprocess import Popen, PIPE

control_f4_sequence = '''keydown Control_L
key F4
keyup Control_L
'''

shift_a_sequence = '''keydown Shift_L
key A
keyup Shift_L
'''

def keypress(sequence):
    p = Popen(['xte'], stdin=PIPE)
    p.communicate(input=sequence)

keypress(shift_a_sequence)
keypress(control_f4_sequence)
</snippet></ROW><ROW><id>5714857</id><snippet>isinstance(SystemExit(1), Exception)</snippet></ROW><ROW><id>5714857</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>5714857</id><snippet>Exception</snippet></ROW><ROW><id>5715599</id><snippet>after</snippet></ROW><ROW><id>5715599</id><snippet>after</snippet></ROW><ROW><id>5715599</id><snippet>after</snippet></ROW><ROW><id>5715635</id><snippet>        elif currNode.parentNode.nextSibling is None:
            print('&lt;--')
            currNode = currNode.parentNode
            relsLookup(currNode, rootNode)
</snippet></ROW><ROW><id>5715635</id><snippet>        elif currNode.parentNode.nextSibling is None:
            print('&lt;--')
            currNode = currNode.parentNode
            return relsLookup(currNode, rootNode)
</snippet></ROW><ROW><id>5715676</id><snippet>query</snippet></ROW><ROW><id>5715676</id><snippet>all()</snippet></ROW><ROW><id>5716010</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>5716166</id><snippet>malloc</snippet></ROW><ROW><id>5716166</id><snippet>PyObject_Free</snippet></ROW><ROW><id>5716166</id><snippet>PyObject_Realloc</snippet></ROW><ROW><id>5716233</id><snippet>inSliceFrom</snippet></ROW><ROW><id>5716233</id><snippet>inSliceTo</snippet></ROW><ROW><id>5716233</id><snippet>outSliceFrom</snippet></ROW><ROW><id>5716233</id><snippet>outSliceTo</snippet></ROW><ROW><id>5716233</id><snippet>Connection</snippet></ROW><ROW><id>5716233</id><snippet>#create network and modules
net = FeedForwardNetwork()
inp = LinearLayer(9)
h1 = SigmoidLayer(2)
h2 = TanhLayer(2)
outp = LinearLayer(1)
# add modules
net.addOutputModule(outp)
net.addInputModule(inp)
net.addModule(h1)
net.addModule(h2)
# create connections
net.addConnection(FullConnection(inp, h1, inSliceTo=6))
net.addConnection(FullConnection(inp, h2, inSliceFrom=6))
net.addConnection(FullConnection(h1, h2))
net.addConnection(FullConnection(h2, outp))
# finish up
net.sortModules()
</snippet></ROW><ROW><id>5716574</id><snippet>from contextlib import contextmanager
import fcntl

@contextmanager
def file_locked(filename, exclusive=True):
    lockfile = open(filename, 'w')
    if exclusive:
        fcntl.flock(lockfile, fcntl.LOCK_EX)
    else:
        fcntl.flock(lockfile, fcntl.LOCK_SH)
    yield
    fcntl.flock(lockfile, fcntl.LOCK_UN)

if __name__ == '__main__':
    from time import sleep
    from random import random
    from os import getpid
    while True:
        print '%d waiting for lock' % getpid()
        with file_locked('filelock.lck'):
            print '%d got the lock'% getpid()
            sleep(random())
        print '%d released the lock\n' % getpid()
</snippet></ROW><ROW><id>5716744</id><snippet>{n \choose 2}</snippet></ROW><ROW><id>5716744</id><snippet>   - Q : ndarray
       A condensed or redundant distance matrix. A condensed
       distance matrix is a flat array containing the upper
       triangular of the distance matrix. This is the form that
       ``pdist`` returns. Alternatively, a collection of
       :math:`m` observation vectors in n dimensions may be passed as
       a :math:`m` by :math:`n` array.
</snippet></ROW><ROW><id>5716744</id><snippet>m</snippet></ROW><ROW><id>5716832</id><snippet>using boost;
using boost::python;

shared_ptr&lt;MyClass&gt; CreateWithList(list lst)
{
    // construct with a list here
}

shared_ptr&lt;MyClass&gt; CreateWithPyArrayObject(PyArrayObject* obj)
{
    // construct with numpy array here
}


BOOST_PYTHON_MODULE(mymodule)
{
    class_&lt;MyClass, boost::noncopyable, boost::shared_ptr&lt;MyClass&gt; &gt;
        ("MyClass", no_init)
        .def("__init__", make_constructor(&amp;CreateWithList))
        .def("__init__", make_constructor(&amp;CreateWithPyArrayObject))
}
</snippet></ROW><ROW><id>5716981</id><snippet># Common code goes in this new class
class DerHelper:
    def __init__(self, parent):
        self._parent = parent
    def OwnFoo(self):
        print 'Do something 1', self._parent
    def OwnFoo2(self):
        print 'Do something 2', self._parent
    def Foo(self):
        print 'Do something 3', self._parent

# First derived class
class Der1(Base):
    def __init__(self):
        # include helper class by composition
        self._helper = DerHelper('Der1')
    def OwnFoo(self):
        self._helper.OwnFoo()
    def OwnFoo2(self):
        self._helper.OwnFoo2()
    def Foo(self):
        self._helper.Foo()

# Second derived class
class Der2(Base):
    def __init__(self):
        # include helper class by composition
        self._helper = DerHelper('Der2')
    def OwnFoo(self):
        self._helper.OwnFoo()
    def OwnFoo2(self):
        self._helper.OwnFoo2()
    def Foo(self):
        self._helper.Foo()
</snippet></ROW><ROW><id>5716981</id><snippet>d = Der1()
d.OwnFoo()
d.OwnFoo2()
d.Foo()

d = Der2()
d.OwnFoo()
d.OwnFoo2()
d.Foo()
</snippet></ROW><ROW><id>5716981</id><snippet>Do something 1 Der1
Do something 2 Der1
Do something 3 Der1
Do something 1 Der2
Do something 2 Der2
Do something 3 Der2
</snippet></ROW><ROW><id>5717181</id><snippet>cal.set(y, m - 1, d); 
</snippet></ROW><ROW><id>5717181</id><snippet>Calendar</snippet></ROW><ROW><id>5717181</id><snippet>cal.setMinimalDaysInFirstWeek(4);    
cal.setFirstDayOfWeek(Calendar.MONDAY);
</snippet></ROW><ROW><id>5717759</id><snippet>true</snippet></ROW><ROW><id>5717759</id><snippet>sys.argv[2]</snippet></ROW><ROW><id>5717759</id><snippet>true</snippet></ROW><ROW><id>5717937</id><snippet>re.I</snippet></ROW><ROW><id>5717937</id><snippet>\b[a-z]+\b
</snippet></ROW><ROW><id>5717937</id><snippet>\b</snippet></ROW><ROW><id>5717937</id><snippet>\b[a-z]+\b</snippet></ROW><ROW><id>5717937</id><snippet>pie</snippet></ROW><ROW><id>5717937</id><snippet>pie21</snippet></ROW><ROW><id>5717937</id><snippet>21pie</snippet></ROW><ROW><id>5717937</id><snippet>\b[^\W\d_]+\b
</snippet></ROW><ROW><id>5717937</id><snippet>[^\W\d_]</snippet></ROW><ROW><id>5718537</id><snippet>property</snippet></ROW><ROW><id>5718537</id><snippet>class A:
    def get_x(self, neg=False):
        return -5 if neg else 5
    x = property(get_x)

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.x
5
&gt;&gt;&gt; a.get_x()
5
&gt;&gt;&gt; a.get_x(True)
-5
</snippet></ROW><ROW><id>5718552</id><snippet> import re
 matchWinPaths = re.compile("^.*([A-Z]:\\.+$)")
</snippet></ROW><ROW><id>5718552</id><snippet> matches = re.match(line, matchWinPaths)
 winPath = matches.group(1)
</snippet></ROW><ROW><id>5718969</id><snippet>for row_index, row in enumerate(csv.DictReader(items_file, dialect='excel', delimiter='\t')):
    if (row_index &gt;= 200):
        break
    rows.append(row)
</snippet></ROW><ROW><id>5718969</id><snippet>while</snippet></ROW><ROW><id>5718969</id><snippet>for</snippet></ROW><ROW><id>5718969</id><snippet>while</snippet></ROW><ROW><id>5718969</id><snippet>for</snippet></ROW><ROW><id>5718969</id><snippet>if</snippet></ROW><ROW><id>5718969</id><snippet>itr = enumerate(csv.DictReader(items_file, dialect='excel', delimiter='\t'))
row_index = -1
while row_index &lt; 199:
    try:
        row_index, row = next(itr) # Python 3. Use itr.next() in Python 2
    except StopIteration:
        break # Ran out of data
    rows.append(row)
</snippet></ROW><ROW><id>5718969</id><snippet>itertools</snippet></ROW><ROW><id>5718969</id><snippet>from itertools import islice
itr = csv.DictReader(items_file, dialect='excel', delimiter='\t')
rows = list(islice(itr, 200))
</snippet></ROW><ROW><id>5719205</id><snippet>run(server='eventlet',host='localhost', port=8080, reloader=True)
</snippet></ROW><ROW><id>5719225</id><snippet>cx_freeze</snippet></ROW><ROW><id>5719225</id><snippet>py2exe</snippet></ROW><ROW><id>5719225</id><snippet>cx_freeze</snippet></ROW><ROW><id>5719241</id><snippet>&gt;&gt;&gt; for m in re.finditer(r"\w+ly", text):
...     print '%02d-%02d: %s' % (m.start(), m.end(), m.group(0))
</snippet></ROW><ROW><id>5719518</id><snippet>php -r 'var_dump(base64_encode(str_repeat("x", 10)));'
string(16) "eHh4eHh4eHh4eA=="
</snippet></ROW><ROW><id>5719518</id><snippet>&gt;&gt;&gt; ("x" * 10).encode('base64')
'eHh4eHh4eHh4eA==\n'
</snippet></ROW><ROW><id>5719575</id><snippet>  if data.find('.topic') != -1:
     nick = data.split('!')[ 0 ].replace(':','')
     for line in open('masters.txt'):
         if nick in line:
            sck.send('TOPIC ' + " " + chan + " :" + args + '\r\n')
</snippet></ROW><ROW><id>5719575</id><snippet>" :"</snippet></ROW><ROW><id>5719786</id><snippet>ast</snippet></ROW><ROW><id>5719786</id><snippet>from ... import</snippet></ROW><ROW><id>5719786</id><snippet>a.py</snippet></ROW><ROW><id>5719786</id><snippet>import ast
code = open("a.py").read()
for node in ast.parse(code).body:
    if isinstance(node, ast.ImportFrom):
        for name in node.names:
            print name.name
</snippet></ROW><ROW><id>5719786</id><snippet>ast.walk()</snippet></ROW><ROW><id>5720080</id><snippet>try:
    import mypkg
    print "can import"
except:
    import "can't import"
</snippet></ROW><ROW><id>5720365</id><snippet>is_valid()</snippet></ROW><ROW><id>5720365</id><snippet>class DogRequestForm(forms.Form):
    id = forms.IntegerField(required=False, widget=forms.HiddenInput())
    color = forms.ModelChoiceField(queryset=Color.objects.all())
    speed = forms.ModelChoiceField(queryset=Speed.objects.all())
</snippet></ROW><ROW><id>5720365</id><snippet>data = {
    'id': dog_request_id,
    'color': dog_color,
    'speed': dog_speed,
}
form = DogRequestForm(data)
</snippet></ROW><ROW><id>5720365</id><snippet>dog_request_id</snippet></ROW><ROW><id>5720365</id><snippet>dog_color</snippet></ROW><ROW><id>5720365</id><snippet>dog_speed</snippet></ROW><ROW><id>5720365</id><snippet>DogRequest</snippet></ROW><ROW><id>5721861</id><snippet>python-simpledb</snippet></ROW><ROW><id>5721861</id><snippet>def escape(s):
  return urllib.quote(s, safe='-_~')

def urlencode(d):
  if isinstance(d, dict):
    d = d.iteritems()
  return '&amp;'.join(['%s=%s' % (escape(k), escape(v)) for k, v in d])
</snippet></ROW><ROW><id>5721901</id><snippet>list[1:]</snippet></ROW><ROW><id>5721901</id><snippet>status</snippet></ROW><ROW><id>5721901</id><snippet>status_id</snippet></ROW><ROW><id>5721901</id><snippet>[-1]</snippet></ROW><ROW><id>5721901</id><snippet>latest</snippet></ROW><ROW><id>5721901</id><snippet>StatusUpdate.objects.filter(status_user=user1).latest('status_date_time')
</snippet></ROW><ROW><id>5722068</id><snippet>a[:]</snippet></ROW><ROW><id>5722068</id><snippet>a</snippet></ROW><ROW><id>5722068</id><snippet>memoryview</snippet></ROW><ROW><id>5722475</id><snippet>__getattr__</snippet></ROW><ROW><id>5722475</id><snippet>__getattribute__</snippet></ROW><ROW><id>5722475</id><snippet>__getattr__</snippet></ROW><ROW><id>5722475</id><snippet>def __getattr__(self, name):
    return getattr(self.curs, name)
</snippet></ROW><ROW><id>5722475</id><snippet>class Cursor(cx_Oracle.Cursor):</snippet></ROW><ROW><id>5722475</id><snippet>class Cursor(object):</snippet></ROW><ROW><id>5722475</id><snippet>cursor</snippet></ROW><ROW><id>5722548</id><snippet>squery =
['OBJECTID&gt;=%s AND OBJECTID&lt;=%s' % (i*300k+(i!=0),(i+1)*300k) for i in range(0,3)]
</snippet></ROW><ROW><id>5722548</id><snippet>range(0,*3*)</snippet></ROW><ROW><id>5722717</id><snippet>subprocess.popen()</snippet></ROW><ROW><id>5722717</id><snippet>wiki: "|/home/wiki/scripts/wiki.py"</snippet></ROW><ROW><id>5722717</id><snippet>4 -rw-r--r-- 1 wiki mail 1902 2011-04-19 21:04 wiki.py</snippet></ROW><ROW><id>5722717</id><snippet>procmail</snippet></ROW><ROW><id>5722717</id><snippet>.procmailrc</snippet></ROW><ROW><id>5722717</id><snippet>/etc/aliases</snippet></ROW><ROW><id>5722717</id><snippet>extra="" 
 while 1:
    line = sys.stdin.readline()
     if not line:
        break
            extra = extra + line.strip(" ")</snippet></ROW><ROW><id>5723003</id><snippet>array</snippet></ROW><ROW><id>5723067</id><snippet>try:
    retval = gfile.mount_enclosing_volume_finish(result)
except gio.Error, e:
    # If we run the tests too fast
    if e.code == gio.ERROR_ALREADY_MOUNTED:
        print ('WARNING: testfile is already mounted, '
        'skipping test')
        loop.quit()
        return
    raise
self.failUnless(retval)
</snippet></ROW><ROW><id>5723067</id><snippet># Already mounted ?
if g_file.query_exists():
    self._folder = g_file
else:
    mount_operation = MountOperation()
    mount_operation.set_anonymous(True)
    g_file.mount_enclosing_volume(mount_operation, self._mount_end)
</snippet></ROW><ROW><id>5723124</id><snippet>&gt;&gt;&gt; import feedparser
&gt;&gt;&gt; url = 'http://feeds2.feedburner.com/ziffdavis/pcmag'
&gt;&gt;&gt; d = feedparser.parse(url)
&gt;&gt;&gt; d.feed.title
u'PCMag.com: New Product Reviews'
&gt;&gt;&gt; d.feed.link
u'http://www.pcmag.com'
&gt;&gt;&gt; d.feed.subtitle
u"First Look At New Products From PCMag.com including Lab Tests, Ratings, Editor's and User's Reviews."
&gt;&gt;&gt; len(d['entries'])
30
&gt;&gt;&gt; d['entries'][0]['title']
u'Canon Color imageClass MF9280cdn'
</snippet></ROW><ROW><id>5723124</id><snippet>&gt;&gt;&gt; url = 'http://feeds.wired.com/wired/index'
&gt;&gt;&gt; d = feedparser.parse(url)
&gt;&gt;&gt; d.feed.title
u'Wired Top Stories'
&gt;&gt;&gt; d.feed.link
u'http://www.wired.com/rss/index.xml'
&gt;&gt;&gt; d.feed.subtitle
u'Top Stories&lt;img src="http://www.wired.com/rss_views/index.gif" /&gt;'
&gt;&gt;&gt; len(d['entries'])
30
&gt;&gt;&gt; d['entries'][0]['title']
u'Heart of Dorkness: LARPing Goes Haywire in &lt;em&gt;Wild Hunt&lt;/em&gt;'
</snippet></ROW><ROW><id>5723453</id><snippet>repr()</snippet></ROW><ROW><id>5723453</id><snippet>&gt;&gt;&gt; x = '\xa5'
&gt;&gt;&gt; print repr(x)
'\xa5'
</snippet></ROW><ROW><id>5723525</id><snippet>sql = """CREATE TABLE try (COL1 INT, COL2 INT, PRIMARY KEY (COL1))"""
</snippet></ROW><ROW><id>5723525</id><snippet>COL1</snippet></ROW><ROW><id>5723525</id><snippet> CREATE TABLE try (COL1 INT, COL2 INT, MyString VARCHAR(128), PRIMARY KEY (COL1))  
</snippet></ROW><ROW><id>5723551</id><snippet>t1.var</snippet></ROW><ROW><id>5723551</id><snippet>var</snippet></ROW><ROW><id>5723551</id><snippet>t1</snippet></ROW><ROW><id>5723551</id><snippet>t1</snippet></ROW><ROW><id>5723551</id><snippet>t2</snippet></ROW><ROW><id>5723551</id><snippet>t1</snippet></ROW><ROW><id>5723551</id><snippet>var</snippet></ROW><ROW><id>5723551</id><snippet>t2</snippet></ROW><ROW><id>5723551</id><snippet># t1 class is the same as yours

class t2:
    def __init__(self, t1):
        self.t1 = t1
    def getVar(self):
        print self.t1.returnVar(t1)

obj1 = t1()
obj2 = t2(obj1)  # give the t2 instance the t1 instance

print obj2.getVar()
</snippet></ROW><ROW><id>5723721</id><snippet>import pdb
def some_function():
    pdb.set_trace()
    some_other_computation()
</snippet></ROW><ROW><id>5723730</id><snippet>(left, upper, right, lower)</snippet></ROW><ROW><id>5723730</id><snippet>box = (70, 70, 100, 100)
</snippet></ROW><ROW><id>5723730</id><snippet>x, y, w, h = (70, 70, 30, 30)
box = (x, y, x + w, y + h)
</snippet></ROW><ROW><id>5723810</id><snippet>sun.alt</snippet></ROW><ROW><id>5723810</id><snippet>alt</snippet></ROW><ROW><id>5723810</id><snippet>sun = ephem.Sun(o)</snippet></ROW><ROW><id>5723810</id><snippet>g(date) -&gt; altitude</snippet></ROW><ROW><id>5723810</id><snippet>#!/usr/bin/env python
import math
import ephem    
import matplotlib.pyplot as plt
import numpy as np
import scipy.optimize as opt

def main():
    # find a shadow length for a unit-length stick
    o = ephem.Observer()
    o.lat, o.long = '37.0625', '-95.677068'
    now = o.date
    sun = ephem.Sun(o) #NOTE: use observer; it provides coordinates and time
    A = sun.alt
    shadow_len = 1 / math.tan(A)

    # find the next time when the sun will cast a shadow of the same length
    t = ephem.Date(find_next_time(shadow_len, o, sun))
    print "current time:", now, "next time:", t # UTC time
    ####print ephem.localtime(t) # print "next time" in a local timezone

def update(time, sun, observer):
    """Update Sun and observer using given `time`."""
    observer.date = time
    sun.compute(observer) # computes `sun.alt` implicitly.
    # return nothing to remember that it modifies objects inplace

def find_next_time(shadow_len, observer, sun, dt=1e-3):
    """Solve `sun_altitude(time) = known_altitude` equation w.r.t. time."""
    def f(t):
        """Convert the equation to `f(t) = 0` form for the Brent's method.

        where f(t) = sun_altitude(t) - known_altitude
        """
        A = math.atan(1./shadow_len) # len -&gt; altitude
        update(t, sun, observer)
        return sun.alt - A

    # find a, b such as f(a), f(b) have opposite signs
    now = observer.date # time in days
    x = np.arange(now, now + 1, dt) # consider 1 day
    plt.plot(x, map(f, x))
    plt.grid(True)
    ####plt.show()
    # use a, b from the plot (uncomment previous line to see it)
    a, b = now+0.2, now+0.8

    return opt.brentq(f, a, b) # solve f(t) = 0 equation using Brent's method


if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5723810</id><snippet>current time: 2011/4/19 23:22:52 next time: 2011/4/20 13:20:01
</snippet></ROW><ROW><id>5723892</id><snippet>query = Relations.all()
query.filter('events =', node)

direct_list = []
inverse_list = []

for relation in query:
  relation.events.remove(node)
  if relation.name == 'direct':
    direct_list.extend(relation.events)
  else:
    inverse_list.extend(relation.events)

if action == 'up':
  #direct_list is all 'up'
  #inverse_list is all 'down'
else:
  #opposite of above
</snippet></ROW><ROW><id>5723906</id><snippet># embed.ly keys which map 1:1 with your database record keys
RESPONSE_KEYS = set([
    'provider_url', 'description', 'title', 'author_name', 'thumbnail_url',
    'thumbnail_width', 'thumbnail_height', 'author_url'
    ])

# mapping from embed.ly's key name to your database record key
KEY_MAP = {
    'url': 'content_url',
    'width': 'width_px',
    'height': 'height_px',
    'type': 'url_type'
    }

url_return = get_oembed(content_url)
record = ContentQueue(submitted_url=content_url)
record.version = 1

# iterate over the response keys and add them to the record
for key_name in url_return.iterkeys():
    key = key_name if key_name in RESPONSE_KEYS else KEY_MAP.get(key_name)
    if key:
        record[key] = url_return[key_name]
</snippet></ROW><ROW><id>5723933</id><snippet>data</snippet></ROW><ROW><id>5723933</id><snippet>__init__</snippet></ROW><ROW><id>5723933</id><snippet>self.foo=1</snippet></ROW><ROW><id>5723933</id><snippet>class Data(object):

    def __init__(self):

        self.SIZE = 8 # dimensions of the game field
        self.MAX_TURNS = 5 # amount of iterations for each of the players ("turns") before the end
        self.turns = 0 # count of turns done
        self.score_PC = self.score_PC2 = 0 # score values

        # create and init the data matrices
        self.data_PC = [['X' for j in xrange(self.SIZE)] for i in xrange(self.SIZE)]
        self.data_PC2 = [['X' for j in xrange(self.SIZE)] for i in xrange(self.SIZE)]
</snippet></ROW><ROW><id>5723933</id><snippet>.get()</snippet></ROW><ROW><id>5723933</id><snippet>.put()</snippet></ROW><ROW><id>5723933</id><snippet>.task_done()</snippet></ROW><ROW><id>5724453</id><snippet>class mygenerator(object):
    def __init__(self):
        next_value = compute_first_value()
    def __iter__(self):
        return self
    def next(self):
        if next_value == terminating_value:
            raise StopIteration()
        return next_value
</snippet></ROW><ROW><id>5724842</id><snippet>findall</snippet></ROW><ROW><id>5724842</id><snippet>in</snippet></ROW><ROW><id>5724842</id><snippet>if search_string in line:</snippet></ROW><ROW><id>5724842</id><snippet>enumerate</snippet></ROW><ROW><id>5724842</id><snippet>for line_number, line in enumerate(logfile):</snippet></ROW><ROW><id>5724991</id><snippet>extract(name, dest)</snippet></ROW><ROW><id>5724991</id><snippet>import sys
import zipfile

def unzip(path, root='/'):
    zh = zipfile.ZipFile(path, 'r')
    for name in zh.namelist():
        zh.extract(name, root)
    zh.close()

unzip(sys.argv[1])
</snippet></ROW><ROW><id>5724991</id><snippet>./usr/bin/script</snippet></ROW><ROW><id>5724991</id><snippet>/usr/bin/script</snippet></ROW><ROW><id>5724991</id><snippet>% python unzip.py myfiles.zip
</snippet></ROW><ROW><id>5724991</id><snippet>import os
import sys
import tarfile

def untar(path, root='/'):
    mode = 'r'
    _, ext = os.path.splitext(path)
    if ext in ('.gz', '.bz2'):
        mode += ':' + ext[1:]
    th = tarfile.open(path, mode)
    for info in th.getmembers():
        th.extract(info, root)
    th.close()

untar(sys.argv[1])
</snippet></ROW><ROW><id>5724991</id><snippet>import os
import subprocess
import sys

def untar(path, root):
    subprocess.call(['tar', '-C', root, '-xf', path])

def unzip(path, root):
    subprocess.call(['unzip', os.path.abspath(path)], cwd=root)

path = sys.argv[1]
dest = os.path.abspath(sys.argv[2])
if not os.path.exists(dest):
    os.makedirs(dest)
if path.endswith('.zip'):
    unzip(path, dest)
else:
    untar(path, dest)
</snippet></ROW><ROW><id>5725135</id><snippet>os.stat</snippet></ROW><ROW><id>5725135</id><snippet>tail</snippet></ROW><ROW><id>5725135</id><snippet>tail -f</snippet></ROW><ROW><id>5725135</id><snippet>tail -f</snippet></ROW><ROW><id>5725135</id><snippet>select</snippet></ROW><ROW><id>5725135</id><snippet>tail -f</snippet></ROW><ROW><id>5725135</id><snippet>tail</snippet></ROW><ROW><id>5725135</id><snippet>readline()</snippet></ROW><ROW><id>5725135</id><snippet>os.listdir</snippet></ROW><ROW><id>5725135</id><snippet>popen</snippet></ROW><ROW><id>5725135</id><snippet>grep</snippet></ROW><ROW><id>5725135</id><snippet>subprocess.popen</snippet></ROW><ROW><id>5725135</id><snippet>os.popen</snippet></ROW><ROW><id>5725153</id><snippet>import urllib
from multiprocessing import Process, Queue

def worker(input, output):
  for func, args in iter(input.get, 'STOP'):
    result = func(*args)
    output.put(result)

def find_on_page(num):
  uri = 'http://www.example.com/index.php?id=%d' % num
  f = urllib.urlopen(uri)
  data = f.read()
  f.close()
  index = data.find('datahere:') # obviously use your own methods
  if index &lt; 0:
    return None
  else:
    return data[index:index+20]

def main():
  NUM_PROCESSES = 4
  tasks = [(find_on_page, (i,)) for i in range(99999)]
  task_queue = Queue()
  done_queue = Queue()
  for task in tasks:
    task_queue.put(task)
  for i in range(NUM_PROCESSES):
    Process(target=worker, args=(task_queue, done_queue)).start()
  for i in range(99999):
    print done_queue.get()
  for i in range(NUM_PROCESSES):
    task_queue.put('STOP')

if __name__ == "__main__":
  main()
</snippet></ROW><ROW><id>5725176</id><snippet>odeint</snippet></ROW><ROW><id>5725537</id><snippet>response.set_cookie( cookie_name, "cookie_value")</snippet></ROW><ROW><id>5725537</id><snippet>request.COOKIES.get(cookie_name)</snippet></ROW><ROW><id>5725870</id><snippet>the_list = ['z', 'y', 'x', 'w', 'v', 'w', 'x', 'y', 'z']
print "".join(the_list)
</snippet></ROW><ROW><id>5725927</id><snippet>if hasattr(self, 'field', False)
</snippet></ROW><ROW><id>5726147</id><snippet>&gt;&gt;&gt; a=[1000,200,30]
&gt;&gt;&gt; [str(e).zfill(5) for e in a]
['01000', '00200', '00030']
</snippet></ROW><ROW><id>5727084</id><snippet>python</snippet></ROW><ROW><id>5727084</id><snippet>executable</snippet></ROW><ROW><id>5727084</id><snippet>[buildout]
python = python
parts =
    python

[python]
recipe = zc.recipe.cmmi
url = http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz
executable = ${buildout:directory}/parts/python/bin/python2.6
extra_options=
    --enable-unicode=ucs4
    --with-threads
    --with-readline
</snippet></ROW><ROW><id>5727084</id><snippet>bin/</snippet></ROW><ROW><id>5727084</id><snippet>[pythonbin]
recipe = plone.recipe.command
command = ln -s ${python:executable} ${buildout:bin-directory}/python
</snippet></ROW><ROW><id>5727089</id><snippet>dict</snippet></ROW><ROW><id>5727089</id><snippet>__str__</snippet></ROW><ROW><id>5727089</id><snippet># -*- coding: utf-8 -*-

class MyDict(dict):
    def __str__(self):
        return "{"+", ".join(["%s: %s" % (key, self[key]) for key in self])+"}" 

a = {0:"Velmi žluťoučký kůň"}
b = MyDict({0:"Velmi žluťoučký kůň"})
c = "Velmi žluťoučký kůň"
print(a)
print(b)
print(c)
</snippet></ROW><ROW><id>5727089</id><snippet>{0: 'Velmi \xc5\xbelu\xc5\xa5ou\xc4\x8dk\xc3\xbd k\xc5\xaf\xc5\x88'}
{0: Velmi žluťoučký kůň}
Velmi žluťoučký kůň
</snippet></ROW><ROW><id>5727089</id><snippet>dict</snippet></ROW><ROW><id>5727523</id><snippet>multiprocessing</snippet></ROW><ROW><id>5728296</id><snippet>&lt;xyz&gt;
      &lt;pqr&gt;
        &lt;abc&gt;&lt;![CDATA[&lt;a href="data:text/html;charset=utf-8,base64,JTNjc2NyaXB0JTNlYWxlcnQoIlhTUyIpO2hpc3RvcnkuYmFjaygpOyUzYy9zY3JpcHQlM2UiPjwvYT4=]]&gt;&lt;/abc&gt;
      &lt;/pqr&gt;
      &lt;pqr&gt;
        &lt;abc&gt;&lt;![CDATA[&lt;iframe src="data:text/html;charset=utf-8,base64,JTNjc2NyaXB0JTNlYWxlcnQoIlhTUyIpO2hpc3RvcnkuYmFjaygpOyUzYy9zY3JpcHQlM2UiPjwv]]&gt;&lt;/abc&gt;
      &lt;/pqr&gt;
&lt;xyz&gt;
</snippet></ROW><ROW><id>5728392</id><snippet>.values()</snippet></ROW><ROW><id>5728392</id><snippet>.annotate()</snippet></ROW><ROW><id>5728392</id><snippet>created</snippet></ROW><ROW><id>5728392</id><snippet>.values()</snippet></ROW><ROW><id>5728392</id><snippet>.raw()</snippet></ROW><ROW><id>5728392</id><snippet>query = """
    SELECT
        ep.product_id              AS product_id,
        ep.user_id                 AS user_id,
        MAX(ep.created)            AS created,
        SUM(eup.units)             AS units
    FROM
        ecom_unitpermission AS eup
    WHERE
        ep.user_id = 1
    GROUP BY
        ep.product_id,
        ep.user_id
"""

for perm in MyModel.objects.raw(query):
    print "%15s %3s %s" % (perm.product.name, perm.units, perm.product.somemethod())
</snippet></ROW><ROW><id>5728392</id><snippet>.defer()</snippet></ROW><ROW><id>5728392</id><snippet>.annotate()</snippet></ROW><ROW><id>5729103</id><snippet>&gt;&gt;&gt; a, b = 0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>5729103</id><snippet>squares_to_check = deque((0, loc))
</snippet></ROW><ROW><id>5729103</id><snippet>0</snippet></ROW><ROW><id>5729103</id><snippet>loc</snippet></ROW><ROW><id>5729103</id><snippet>(0, loc)</snippet></ROW><ROW><id>5729103</id><snippet>squares_to_check = deque([(0, loc)])
</snippet></ROW><ROW><id>5729322</id><snippet>category = request.GET.get("category")
if category:
    try:
        post_list = post_list.filter(category=int(category))
    except ValueError:
        print "That's not an integer"
</snippet></ROW><ROW><id>5729906</id><snippet>for i in range(0, len(some_list), line_length):
    print( some_list[i:i+line_length] )
</snippet></ROW><ROW><id>5729906</id><snippet>for i in range(0, len(some_list), line_length):
    print( "  ".join( "{0:.2f}".format(x) for x in some_list[i:i+line_length] ) )
</snippet></ROW><ROW><id>5730004</id><snippet>numpy.atleast_2d()</snippet></ROW><ROW><id>5730004</id><snippet>result = np.append(result, np.atleast_2d(i), axis=0)
</snippet></ROW><ROW><id>5730004</id><snippet>numpy.append()</snippet></ROW><ROW><id>5730401</id><snippet>__metaclass__</snippet></ROW><ROW><id>5730401</id><snippet>ModelBase</snippet></ROW><ROW><id>5730401</id><snippet>contribute_to_class</snippet></ROW><ROW><id>5730401</id><snippet>_get_FOO_display</snippet></ROW><ROW><id>5730401</id><snippet>django/db/models/fields/__init__.py</snippet></ROW><ROW><id>5730401</id><snippet>_get_FIELD_display</snippet></ROW><ROW><id>5730401</id><snippet>get_myfieldname_display</snippet></ROW><ROW><id>5730873</id><snippet>'%.14f' % lat</snippet></ROW><ROW><id>5730873</id><snippet>repr()</snippet></ROW><ROW><id>5730873</id><snippet>&gt;&gt;&gt; lat = 1/3.
&gt;&gt;&gt; lat
0.3333333333333333
&gt;&gt;&gt; str(lat).count('3')
12
&gt;&gt;&gt; ('%.14f' % lat).count('3')
14
&gt;&gt;&gt; repr(lat).count('3')
16
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5730873</id><snippet>&gt;&gt;&gt; 0.33245794180134 == 0.33245794180133997
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5730873</id><snippet>repr(a_float)</snippet></ROW><ROW><id>5730873</id><snippet>float(repr(a_float)) == a_float</snippet></ROW><ROW><id>5730873</id><snippet>repr()</snippet></ROW><ROW><id>5731055</id><snippet>install</snippet></ROW><ROW><id>5731055</id><snippet>python setup.py bdist_egg --exclude-source-files</snippet></ROW><ROW><id>5731055</id><snippet>easy_install dist/eggname.egg</snippet></ROW><ROW><id>5731055</id><snippet>install</snippet></ROW><ROW><id>5731192</id><snippet> GUI.self = self
</snippet></ROW><ROW><id>5731508</id><snippet>def build_authentication_redirect(self):
            args = {}
            args["client_id"]=self.app_id
            args["redirect_uri"]=self.redirect_uri
            args["scope"]=",".join(self.req_perms)
            redirect_url = "https://www.facebook.com/dialog/oauth?"+urllib.urlencode(args)
            redirect_code = """
                    &lt;script type="text/javascript"&gt;
                    top.location.href='%s';
                    &lt;/script&gt;
            """ % redirect_url;
            return HttpResponse(redirect_code,mimetype="text/html")
</snippet></ROW><ROW><id>5731508</id><snippet>def load_signed_request(self, signed_request):
            """Load the user state from a signed_request value"""
            sig, payload = signed_request.split(u'.', 1)
            sig = self.base64_url_decode(sig)
            data = json.loads(self.base64_url_decode(payload))

            expected_sig = hmac.new(self.app_secret, msg=payload, digestmod=hashlib.sha256).digest()

            # allow the signed_request to function for upto 1 day
            if sig == expected_sig and data[u'issued_at'] &gt; (time.time() - 86400):
                    return data.get(u'user_id'), data.get(u'oauth_token')
            else:
                    return None,None
</snippet></ROW><ROW><id>5731508</id><snippet>sigreq =request.POST.get('signed_request', None)
user_id,access_token = load_signed_request(sigreq)
</snippet></ROW><ROW><id>5731508</id><snippet>@staticmethod
    def base64_url_decode(data):
            data = data.encode(u'ascii')
            data += '=' * (4 - (len(data) % 4))
            return base64.urlsafe_b64decode(data)
</snippet></ROW><ROW><id>5731508</id><snippet>import cgi
import hashlib
import time
import urllib
import base64
import datetime
import hmac

from django.conf import settings
from django.http import HttpResponseRedirect,HttpResponse,HttpResponseNotFound
</snippet></ROW><ROW><id>5731531</id><snippet>def combinations(iterable, r):
    # combinations('ABCD', 2) --&gt; AB AC AD BC BD CD
    # combinations(range(4), 3) --&gt; 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r &gt; n:
        return
    indices = range(r)
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
</snippet></ROW><ROW><id>5731668</id><snippet># Sample Python/Pygame Programs
# Simpson College Computer Science
# http://cs.simpson.edu/?q=python_pygame_examples

import pygame

black = (0,0,0)
white = (255,255,255)
blue = (0,0,255)

# This class represents the bar at the bottom that the player controls
class Wall(pygame.sprite.Sprite):
    # Constructor function
    def __init__(self,x,y,width,height):
        # Call the parent's constructor
        pygame.sprite.Sprite.__init__(self)

        # Make a blue wall, of the size specified in the parameters
        self.image = pygame.Surface([width, height])
        self.image.fill(blue)

        # Make our top-left corner the passed-in location.
        self.rect = self.image.get_rect()
        self.rect.top = y
        self.rect.left = x


# This class represents the bar at the bottom that the player controls
class Player(pygame.sprite.Sprite):

    # Set speed vector
    change_x=0
    change_y=0

    # Constructor function
    def __init__(self,x,y):
        # Call the parent's constructor
        pygame.sprite.Sprite.__init__(self)

        # Set height, width
        self.image = pygame.Surface([15, 15])
        self.image.fill(white)

        # Make our top-left corner the passed-in location.
        self.rect = self.image.get_rect()
        self.rect.top = y
        self.rect.left = x

    # Change the speed of the player
    def changespeed(self,x,y):
        self.change_x+=x
        self.change_y+=y

    # Find a new position for the player
    def update(self,walls):
        # Get the old position, in case we need to go back to it
        old_x=self.rect.left
        new_x=old_x+self.change_x
        self.rect.left = new_x

        # Did this update cause us to hit a wall?
        collide = pygame.sprite.spritecollide(self, walls, False)
        if collide:
            # Whoops, hit a wall. Go back to the old position
            self.rect.left=old_x

        old_y=self.rect.top
        new_y=old_y+self.change_y
        self.rect.top = new_y

        # Did this update cause us to hit a wall?
        collide = pygame.sprite.spritecollide(self, walls, False)
        if collide:
            # Whoops, hit a wall. Go back to the old position
            self.rect.top=old_y


score = 0
# Call this function so the Pygame library can initialize itself
pygame.init()

# Create an 800x600 sized screen
screen = pygame.display.set_mode([800, 600])

# Set the title of the window
pygame.display.set_caption('Test')

# Create a surface we can draw on
background = pygame.Surface(screen.get_size())

# Used for converting color maps and such
background = background.convert()

# Fill the screen with a black background
background.fill(black)

# Create the player paddle object
player = Player( 50,50 )
movingsprites = pygame.sprite.RenderPlain()
movingsprites.add(player)

# Make the walls. (x_pos, y_pos, width, height)
wall_list=pygame.sprite.RenderPlain()
wall=Wall(0,0,10,600)
wall_list.add(wall)
wall=Wall(10,0,790,10)
wall_list.add(wall)
wall=Wall(10,200,100,10)
wall_list.add(wall)

clock = pygame.time.Clock()

done = False

while done == False:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done=True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                player.changespeed(-3,0)
            if event.key == pygame.K_RIGHT:
                player.changespeed(3,0)
            if event.key == pygame.K_UP:
                player.changespeed(0,-3)
            if event.key == pygame.K_DOWN:
                player.changespeed(0,3)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                player.changespeed(3,0)
            if event.key == pygame.K_RIGHT:
                player.changespeed(-3,0)
            if event.key == pygame.K_UP:
                player.changespeed(0,3)
            if event.key == pygame.K_DOWN:
                player.changespeed(0,-3)

    player.update(wall_list)

    screen.fill(black)

    movingsprites.draw(screen)
    wall_list.draw(screen)
    pygame.display.flip()

    clock.tick(40)

pygame.quit()
</snippet></ROW><ROW><id>5731719</id><snippet>deb-bootstrap</snippet></ROW><ROW><id>5731719</id><snippet>/etc/init.d</snippet></ROW><ROW><id>5731719</id><snippet>/opt</snippet></ROW><ROW><id>5731719</id><snippet>run</snippet></ROW><ROW><id>5731719</id><snippet>/opt</snippet></ROW><ROW><id>5731759</id><snippet># create the dict and save it to a file
d={
'part1':[
    'Ae',
    'Di',
    'Mo',
    'Fam',],
'part2':[
    'dar',
    'kil',
    'glar',
    'tres',],
}

import pickle
f=open('syllables','w')
pickle.dump(d,f)
f.close()


# read the dict back in from the file
f1=open('syllables','r')
sd=pickle.load(f1)
f1.close()

import random
first_part=sd['part1'][random.randint(0,len(sd['part1'])-1)]
second_part=sd['part2'][random.randint(0,len(sd['part2'])-1)]

print '%s%s'%(first_part,second_part)
</snippet></ROW><ROW><id>5731911</id><snippet>...
kernel=mod.get_function("foo")
meminfo(kernel)
...
def meminfo(kernel):
    shared=kernel.shared_size_bytes
    regs=kernel.num_regs
    local=kernel.local_size_bytes
    const=kernel.const_size_bytes
    mbpt=kernel.max_threads_per_block
    print("""=MEM=\nLocal:%d,\nShared:%d,\nRegisters:%d,\nConst:%d,\nMax Threads/B:%d"""%(local,shared,regs,const,mbpt))
</snippet></ROW><ROW><id>5731911</id><snippet>=MEM=
Local:24,
Shared:64,
Registers:18,
Const:0,
Max Threads/B:512    
</snippet></ROW><ROW><id>5731911</id><snippet>import pycuda.autoinit
import pycuda.driver as cuda

(free,total)=cuda.mem_get_info()
print("Global memory occupancy:%f%% free"%(free*100/total))

for devicenum in range(cuda.Device.count()):
    device=cuda.Device(devicenum)
    attrs=device.get_attributes()

    #Beyond this point is just pretty printing
    print("\n===Attributes for device %d"%devicenum)
    for (key,value) in attrs.iteritems():
        print("%s:%s"%(str(key),str(value)))
</snippet></ROW><ROW><id>5731911</id><snippet>Global memory occupancy:70.000000% free

===Attributes for device 0
MAX_THREADS_PER_BLOCK:512
MAX_BLOCK_DIM_X:512
MAX_BLOCK_DIM_Y:512
MAX_BLOCK_DIM_Z:64
MAX_GRID_DIM_X:65535
MAX_GRID_DIM_Y:65535
MAX_GRID_DIM_Z:1
MAX_SHARED_MEMORY_PER_BLOCK:16384
TOTAL_CONSTANT_MEMORY:65536
WARP_SIZE:32
MAX_PITCH:2147483647
MAX_REGISTERS_PER_BLOCK:8192
CLOCK_RATE:1500000
TEXTURE_ALIGNMENT:256
GPU_OVERLAP:1
MULTIPROCESSOR_COUNT:14
KERNEL_EXEC_TIMEOUT:1
INTEGRATED:0
CAN_MAP_HOST_MEMORY:1
COMPUTE_MODE:DEFAULT
MAXIMUM_TEXTURE1D_WIDTH:8192
MAXIMUM_TEXTURE2D_WIDTH:65536
MAXIMUM_TEXTURE2D_HEIGHT:32768
MAXIMUM_TEXTURE3D_WIDTH:2048
MAXIMUM_TEXTURE3D_HEIGHT:2048
MAXIMUM_TEXTURE3D_DEPTH:2048
MAXIMUM_TEXTURE2D_ARRAY_WIDTH:8192
MAXIMUM_TEXTURE2D_ARRAY_HEIGHT:8192
MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES:512
SURFACE_ALIGNMENT:256
CONCURRENT_KERNELS:0
ECC_ENABLED:0
PCI_BUS_ID:1
PCI_DEVICE_ID:0
TCC_DRIVER:0
</snippet></ROW><ROW><id>5731974</id><snippet>y = list(y)
</snippet></ROW><ROW><id>5731974</id><snippet>y</snippet></ROW><ROW><id>5731974</id><snippet>y</snippet></ROW><ROW><id>5731974</id><snippet>y</snippet></ROW><ROW><id>5732053</id><snippet>A/b/foo.spec</snippet></ROW><ROW><id>5732053</id><snippet>A</snippet></ROW><ROW><id>5732053</id><snippet>  f = open ("repository/A/b/foo.spec")
  change_file(f)
  run_command(git add A/b/foo.spec)
  run_command(git commit -m "Changed spec file for package A")
</snippet></ROW><ROW><id>5732646</id><snippet>null=True</snippet></ROW><ROW><id>5732646</id><snippet>self_url</snippet></ROW><ROW><id>5732646</id><snippet>python manage.py reset myapp</snippet></ROW><ROW><id>5733487</id><snippet>f = open('test.txt','r')
g = open('test1.txt','w') 
while True:
    x = f.readline()
    x = x.rstrip()
    if not x: break
    print &gt;&gt; g, int(x, 16)
</snippet></ROW><ROW><id>5733487</id><snippet>for x in f</snippet></ROW><ROW><id>5733487</id><snippet>readline</snippet></ROW><ROW><id>5733487</id><snippet>with</snippet></ROW><ROW><id>5733487</id><snippet>with open('test.txt','r') as f:
    with open('test1.txt','w') as g: 
        for x in f:
            x = x.rstrip()
            if not x: continue
            print &gt;&gt; g, int(x, 16)
</snippet></ROW><ROW><id>5733549</id><snippet>^([A-Z]+([ ]?)+([A-Z])*([ /])*)*$
</snippet></ROW><ROW><id>5733549</id><snippet>^([A-Z]+[ ]?)+([A-Z]+[ /]*)*$
</snippet></ROW><ROW><id>5733549</id><snippet>+</snippet></ROW><ROW><id>5733549</id><snippet>*</snippet></ROW><ROW><id>5734128</id><snippet>tp_getattr</snippet></ROW><ROW><id>5734239</id><snippet>getattr()</snippet></ROW><ROW><id>5734526</id><snippet>addgui = app()
gtk.main()
</snippet></ROW><ROW><id>5734526</id><snippet>self.alert = self.builder.get_object('dailog1')  ## dialog is spelled wrong
</snippet></ROW><ROW><id>5734564</id><snippet>def month_year_iter( start_month, start_year, end_month, end_year ):
    ym_start= 12*start_year + start_month - 1
    ym_end= 12*end_year + end_month - 1
    for ym in range( ym_start, ym_end ):
        y, m = divmod( ym, 12 )
        yield y, m+1
</snippet></ROW><ROW><id>5734754</id><snippet>float xtmp[MAT1];
//Swap rows (x=Px)
for (i=0; i&lt;MAT1; i++){
    int idx = p[i];
    xtmp[i]=x[idx]; //value that should be here
}
</snippet></ROW><ROW><id>5734838</id><snippet>ValueError</snippet></ROW><ROW><id>5734838</id><snippet>.</snippet></ROW><ROW><id>5734838</id><snippet>args</snippet></ROW><ROW><id>5735058</id><snippet>children</snippet></ROW><ROW><id>5735135</id><snippet>import foo as bar
bar = None
</snippet></ROW><ROW><id>5735135</id><snippet>bar</snippet></ROW><ROW><id>5735135</id><snippet>None</snippet></ROW><ROW><id>5735664</id><snippet>self</snippet></ROW><ROW><id>5735664</id><snippet>self.a</snippet></ROW><ROW><id>5735664</id><snippet>a</snippet></ROW><ROW><id>5735664</id><snippet>a</snippet></ROW><ROW><id>5735664</id><snippet>p</snippet></ROW><ROW><id>5735664</id><snippet>self.a</snippet></ROW><ROW><id>5735664</id><snippet>class d:
    def __init__(self,arg):
        self.a = arg
    def p(self):
        a = self.a - 99
        print "my a= ", a
        print "instance a= ",self.a


x = d(1)
y = d(2)
x.p()
y.p()
</snippet></ROW><ROW><id>5735664</id><snippet>my a=  -98
instance a=  1
my a=  -97
instance a=  2
</snippet></ROW><ROW><id>5735664</id><snippet>self</snippet></ROW><ROW><id>5735664</id><snippet>self</snippet></ROW><ROW><id>5735690</id><snippet>#!/bin/sh    
python -O "$1"
</snippet></ROW><ROW><id>5735690</id><snippet>#!/usr/bin/env pythono       
</snippet></ROW><ROW><id>5735690</id><snippet>PYTHONOPTIMIZE</snippet></ROW><ROW><id>5735690</id><snippet>-O</snippet></ROW><ROW><id>5735690</id><snippet>man python</snippet></ROW><ROW><id>5735690</id><snippet>   PYTHONOPTIMIZE
          If this is set to a non-empty string it is equivalent to  specifying  the
          -O option. If set to an integer, it is equivalent to specifying -O multi‐
          ple times.
</snippet></ROW><ROW><id>5736238</id><snippet>&gt;&gt;&gt; [node.attributes['name'].value for node in sorted(nodes, key=lambda x: x.attributes['name'].value)]
[u'created', u'family', u'from_system', u'hop_count', 
u'message_data', u'message_type', u'msg_format_id', u'msg_unique_id', 
u'original_msg_format_id', u'original_unique_id', u'padding', u'priority', 
u'to_system', u'version']
</snippet></ROW><ROW><id>5736238</id><snippet>return_message</snippet></ROW><ROW><id>5736238</id><snippet># No example because I don't have acces to Python 2.7
</snippet></ROW><ROW><id>5736238</id><snippet>sorted()</snippet></ROW><ROW><id>5736238</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; sorted_return_message = sorted(return_message.iteritems(), key=operator.itemgetter(0))
&gt;&gt;&gt; for k,v in sorted_return_message: print k
... 
created
family
from_system
hop_count
message_data
message_type
msg_format_id
msg_unique_id
original_msg_format_id
original_unique_id
padding
priority
to_system
version
</snippet></ROW><ROW><id>5736238</id><snippet>&gt;&gt;&gt; for k in sorted(return_message):
...     print k
... 
created
family
from_system
hop_count
message_data
message_type
msg_format_id
msg_unique_id
original_msg_format_id
original_unique_id
padding
priority
to_system
version
</snippet></ROW><ROW><id>5736357</id><snippet>/</snippet></ROW><ROW><id>5736357</id><snippet>.*?</snippet></ROW><ROW><id>5736357</id><snippet>'/([^/]*)\.bar$'
</snippet></ROW><ROW><id>5736371</id><snippet>list</snippet></ROW><ROW><id>5736371</id><snippet>&gt;&gt;&gt; list("hey, you")
['h', 'e', 'y', ',', ' ', 'y', 'o', 'u']
</snippet></ROW><ROW><id>5736371</id><snippet>input</snippet></ROW><ROW><id>5736371</id><snippet>list</snippet></ROW><ROW><id>5736371</id><snippet>'(1, 2, 3)'</snippet></ROW><ROW><id>5736371</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>5736371</id><snippet>&gt;&gt;&gt; pwm = raw_input("enter PWM: ")
enter PWM: (1, 2, 3)
&gt;&gt;&gt; pwm
'(1, 2, 3)'
&gt;&gt;&gt; npwm = pwm.strip('(').strip(')')
&gt;&gt;&gt; npwm
'1, 2, 3'
&gt;&gt;&gt; npwm = npwm.split(',')
&gt;&gt;&gt; npwm
['1', ' 2', ' 3']
&gt;&gt;&gt; y = [int(x) for x in npwm]
&gt;&gt;&gt; y
[1, 2, 3]
</snippet></ROW><ROW><id>5736371</id><snippet>eval</snippet></ROW><ROW><id>5736371</id><snippet>input</snippet></ROW><ROW><id>5736371</id><snippet>input</snippet></ROW><ROW><id>5736579</id><snippet>from sqlalchemy import Column, Integer
from sqlalchemy.ext.declarative import declarative_base, DeclarativeMeta

class MyMeta(DeclarativeMeta): 

    def __init__(klass, classname, bases, dict_): 

        for k, v in dict_.items():

            if k.endswith('__column_dict'):

                for name, datatype, is_pk in v:

                    setattr(klass, name, Column(name, datatype, primary_key=is_pk))

        return DeclarativeMeta.__init__(klass, classname, bases, dict_)

Base = declarative_base(metaclass=MyMeta)

class Bob(Base):
    __tablename__ = 'bob'
    __column_dict = [('a', Integer, True), ('b', Integer, False)]

bob = Bob()
print bob.a
print bob.b
</snippet></ROW><ROW><id>5736814</id><snippet>doc = gd_client.GetDoc('spreadsheet:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')

gd_client.auth_token = gdata.gauth.ClientLoginToken(gs_client.GetClientLoginToken())

gd_client.Export(doc, 'spreadsheeet.csv')
</snippet></ROW><ROW><id>5737157</id><snippet>array</snippet></ROW><ROW><id>5737157</id><snippet>add_one(x)</snippet></ROW><ROW><id>5737157</id><snippet>x</snippet></ROW><ROW><id>5737157</id><snippet>add_one</snippet></ROW><ROW><id>5737157</id><snippet>new_array = array</snippet></ROW><ROW><id>5737157</id><snippet>array</snippet></ROW><ROW><id>5737157</id><snippet>add_one</snippet></ROW><ROW><id>5737157</id><snippet>x</snippet></ROW><ROW><id>5737157</id><snippet>array</snippet></ROW><ROW><id>5737157</id><snippet>array = []</snippet></ROW><ROW><id>5737157</id><snippet>new_array[i] = ...</snippet></ROW><ROW><id>5737157</id><snippet>[x + 1 for x array]</snippet></ROW><ROW><id>5737274</id><snippet>&gt;&gt;&gt; s = ['3.65e+03', '1.14e+04', '1.35e+04', '1.46e+04']
&gt;&gt;&gt; map(float,s) 
&gt;&gt;&gt; [3650.0, 11400.0, 13500.0, 14600.0]
</snippet></ROW><ROW><id>5737274</id><snippet>&gt;&gt;&gt; s = ['3.65e+93', '1.14e+04', '1.35e+04', '1.46e+04']
&gt;&gt;&gt; map(float,s)
[3.6500000000000001e+93, 11400.0, 13500.0, 14600.0]
</snippet></ROW><ROW><id>5737274</id><snippet>Decimal</snippet></ROW><ROW><id>5737274</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; map(Decimal,s)
[Decimal('3.65E+93'), Decimal('1.14E+4'), Decimal('1.35E+4'), Decimal('1.46E+4')]
</snippet></ROW><ROW><id>5737338</id><snippet> newList = [op(e) for e in oldList]
</snippet></ROW><ROW><id>5737338</id><snippet> newList = [op(e) for e in oldList if e &lt; 5]
</snippet></ROW><ROW><id>5737338</id><snippet>  myVector = numpy.zeros(10)
</snippet></ROW><ROW><id>5737432</id><snippet>   smtpd_junk_command_limit (normal: 100, stress: 1)
          The number of junk commands (NOOP, VRFY, ETRN or  RSET)  that  a
          remote  SMTP  client  can  send  before  the Postfix SMTP server
          starts to increment the error counter with each junk command.
</snippet></ROW><ROW><id>5737432</id><snippet>nanosleep({1, 0}, 0x7fffda9a67a0)       = 0
poll([{fd=9, events=POLLOUT}], 1, 300000) = 1 ([{fd=9, revents=POLLOUT}])
write(9, "252 2.0.0 pat\r\n", 15)       = 15
poll([{fd=9, events=POLLIN}], 1, 300000) = 1 ([{fd=9, revents=POLLIN}])
read(9, "VRFY pat\r\n", 4096)           = 10
</snippet></ROW><ROW><id>5737448</id><snippet>[x for x in values if x % 2 == 1] + [x for x in values if x % 2 == 0] == values
</snippet></ROW><ROW><id>5737448</id><snippet>values</snippet></ROW><ROW><id>5737638</id><snippet>Monkeys</snippet></ROW><ROW><id>5737638</id><snippet>self.allmonkeys[name] = monkey(name)
</snippet></ROW><ROW><id>5737638</id><snippet>self.monkeydict[name] = monkey(name)
</snippet></ROW><ROW><id>5737638</id><snippet>Monkeys</snippet></ROW><ROW><id>5737638</id><snippet>Zoo</snippet></ROW><ROW><id>5737638</id><snippet>monkeylist</snippet></ROW><ROW><id>5737638</id><snippet>Monkey</snippet></ROW><ROW><id>5737892</id><snippet>from functools import partial
S=partial(SET, Family='ethernet-switching', PortMode='trunk')
S(Interface='ge-0/0/6.0', Vlan=['v100', 'v101', 'v102'])
S(Interface='ge-0/0/7.0', Vlan=['v100', 'v101', 'v102'])
S(Interface='ge-0/0/8.0', Vlan=['v100', 'v101', 'v102'])
</snippet></ROW><ROW><id>5738122</id><snippet>from django.test.client import Client
client = Client()
resp = client.put('/employee/2/', data={'email': 'here@there.com'}, follow=True)
#... etc
</snippet></ROW><ROW><id>5738586</id><snippet>class MyStream(object):

    @classmethod
    def from_file(cls, filepath, ignore_comments=False,):

        with open(filepath, 'r') as fileobj:
            for obj in cls(fileobj, ignore_comments):
                yield obj

    @classmethod
    def from_socket(cls,socket,ignore_comments = False
        raise NotImplemented # Placeholder until implemented




    def __init__(self, iterable, ignore_comments=False,):
     ....
</snippet></ROW><ROW><id>5738694</id><snippet>google.appengine.runtime.DeadlineExceededError</snippet></ROW><ROW><id>5738694</id><snippet>from google.appengine import runtime</snippet></ROW><ROW><id>5738694</id><snippet>runtime.DeadlineExceededError</snippet></ROW><ROW><id>5738910</id><snippet>INSERT OR IGNORE INTO ... etc. ...
</snippet></ROW><ROW><id>5738910</id><snippet>IGNORE</snippet></ROW><ROW><id>5738910</id><snippet>OR IGNORE</snippet></ROW><ROW><id>5738910</id><snippet>prefix</snippet></ROW><ROW><id>5738910</id><snippet>Insert</snippet></ROW><ROW><id>5738910</id><snippet>OR IGNORE</snippet></ROW><ROW><id>5738910</id><snippet>INSERT</snippet></ROW><ROW><id>5738910</id><snippet>INTO</snippet></ROW><ROW><id>5738933</id><snippet>&gt;&gt;&gt; L=[1,1,1,1,1,1,2,3,4,4,5,1,2]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [x[0] for x in groupby(L)]
[1, 2, 3, 4, 5, 1, 2]
</snippet></ROW><ROW><id>5738933</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map(itemgetter(0), groupby(L))
[1, 2, 3, 4, 5, 1, 2]
</snippet></ROW><ROW><id>5738933</id><snippet>&gt;&gt;&gt; [x for x,y in groupby(L) if len(list(y))&lt;2]
[2, 3, 5, 1, 2]
</snippet></ROW><ROW><id>5738933</id><snippet>&gt;&gt;&gt; [x for x,y in groupby(L) if sum(1 for i in y)&lt;2]
[2, 3, 5, 1, 2]
</snippet></ROW><ROW><id>5738989</id><snippet>%r</snippet></ROW><ROW><id>5738989</id><snippet>%s</snippet></ROW><ROW><id>5738989</id><snippet>print "So you're {height} tall.".format(height=height)
</snippet></ROW><ROW><id>5739115</id><snippet>cat file | grep apple | python -c "for line in __import__('sys').stdin: print line.replace(\"apple\", \"orange\"),"
</snippet></ROW><ROW><id>5739258</id><snippet>for x in iter(int, 1): pass
</snippet></ROW><ROW><id>5739258</id><snippet>iter</snippet></ROW><ROW><id>5739258</id><snippet>int()</snippet></ROW><ROW><id>5739258</id><snippet>0</snippet></ROW><ROW><id>5739258</id><snippet>iter(int, 1)</snippet></ROW><ROW><id>5739258</id><snippet>lambda</snippet></ROW><ROW><id>5739258</id><snippet>iter(f, object())</snippet></ROW><ROW><id>5739668</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/home/shop/webapps/django/shop/static/index.css" /&gt;
</snippet></ROW><ROW><id>5739668</id><snippet>static</snippet></ROW><ROW><id>5739668</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/static/index.css" /&gt;
</snippet></ROW><ROW><id>5740102</id><snippet>choice = choice.strip()
</snippet></ROW><ROW><id>5740102</id><snippet>choice = input('letter: ')
choice = choice.strip()
if choice == 'a':
    print ('that is an a')
    input('press any key to exit...')
else:
    print('that letter is not an a')
    input('press any key to exit')
</snippet></ROW><ROW><id>5740102</id><snippet>input</snippet></ROW><ROW><id>5740102</id><snippet>if</snippet></ROW><ROW><id>5740253</id><snippet>&gt;&gt;&gt; L = 2*[2*[0]]
&gt;&gt;&gt; id(L[0])
3078300332L
&gt;&gt;&gt; id(L[1])
3078300332L
</snippet></ROW><ROW><id>5740253</id><snippet>&gt;&gt;&gt; L = [[0]*2 for x in range(2)]
&gt;&gt;&gt; id(L[0])
3078302124L
&gt;&gt;&gt; id(L[1])
3078302220L
</snippet></ROW><ROW><id>5740666</id><snippet>import inspect

class MyObject(object):
    def __init__(self):
        self.b = 1
        self.c = 'a'
    def func(self):
        pass

obj = MyObject()
# Get all the user created attributes for the object
attributes = [d for d in dir(obj)
              if not d.startswith('__')]
# Filter those to get the non functions
properties = [a for a in attributes
              if not inspect.ismethod(getattr(obj,a))]
</snippet></ROW><ROW><id>5741396</id><snippet>.T</snippet></ROW><ROW><id>5741396</id><snippet>T</snippet></ROW><ROW><id>5741396</id><snippet>T</snippet></ROW><ROW><id>5741396</id><snippet>multivariate_normal()</snippet></ROW><ROW><id>5741396</id><snippet>&gt;&gt;&gt; np.random.multivariate_normal([0, 0], [[1, 0], [0, 1]], 5)  
array([[ 0.59589335,  0.97741328],
       [-0.58597307,  0.56733234],
       [-0.69164572,  0.17840394],
       [-0.24992978, -2.57494471],
       [ 0.38896689,  0.82221377]])
</snippet></ROW><ROW><id>5741396</id><snippet>array([[ 0.59589335, -0.58597307, -0.69164572, -0.24992978,  0.38896689],
       [ 0.97741328,  0.56733234,  0.17840394, -2.57494471,  0.82221377]])
</snippet></ROW><ROW><id>5741396</id><snippet>x</snippet></ROW><ROW><id>5741396</id><snippet>y</snippet></ROW><ROW><id>5741530</id><snippet>self.__dict__.update(
    variable1 = 1,
    variable2 = 2,
    variable3 = 'hello')
</snippet></ROW><ROW><id>5741530</id><snippet>self</snippet></ROW><ROW><id>5741588</id><snippet>import csv
with open('some.csv', 'rb') as f:
    reader = csv.reader(f, delimiter=';')
    for row in reader:
        print row[0]
</snippet></ROW><ROW><id>5741938</id><snippet>MyClass</snippet></ROW><ROW><id>5741938</id><snippet>__dict__</snippet></ROW><ROW><id>5741938</id><snippet>&gt;&gt;&gt; class MyClass(object):
&gt;&gt;&gt;   pass
&gt;&gt;&gt; dir(MyClass)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>5741938</id><snippet>object</snippet></ROW><ROW><id>5741938</id><snippet>__dict__</snippet></ROW><ROW><id>5741938</id><snippet>&gt;&gt;&gt; dir(object)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>type</snippet></ROW><ROW><id>5742232</id><snippet>sum</snippet></ROW><ROW><id>5742232</id><snippet>ord</snippet></ROW><ROW><id>5742232</id><snippet>&gt;&gt;&gt; type(sum)
&lt;type 'builtin_function_or_method'&gt;
&gt;&gt;&gt; type(ord)
&lt;type 'builtin_function_or_method'&gt;
</snippet></ROW><ROW><id>5742232</id><snippet>&gt;&gt;&gt; type(print)
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>if</snippet></ROW><ROW><id>5742232</id><snippet>return</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>print</snippet></ROW><ROW><id>5742232</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>5742468</id><snippet>cherrypy.tree.mount</snippet></ROW><ROW><id>5742468</id><snippet>import cherrypy

class AppRoot:
    def index(self):
        return "App root's index"
    index.exposed = True

    controller1 = Controller1Class()
    # controller2 = Controller2Class(), etc.

class Controller1Class:

     def index(self):
         return "Controller 1's index"
     index.exposed = True

     def action1(self, id):
         return "You passed %s to controller1's action1" % id      
     action1.exposed = True

     # def action2(self, id): etc...

# ... the rest of the config stuff ...

cherrypy.tree.mount(AppRoot(), '/')  

# ... the rest of the startup stuff....
</snippet></ROW><ROW><id>5742468</id><snippet>AppRoot::index()</snippet></ROW><ROW><id>5742468</id><snippet>Controller1Class::index()</snippet></ROW><ROW><id>5742468</id><snippet>Controller1Class::action1()</snippet></ROW><ROW><id>5742468</id><snippet>Controller1Class::action1("40")</snippet></ROW><ROW><id>5742483</id><snippet>from pylab import *
for (x, y) in clusters:
    plot(x, y, '+')
show() # or savefig(&lt;filename&gt;)
</snippet></ROW><ROW><id>5742622</id><snippet>&gt;&gt;&gt; domain = a.split('@')[1]
</snippet></ROW><ROW><id>5742622</id><snippet>&gt;&gt;&gt; domain = a.partition('@')[2]
</snippet></ROW><ROW><id>5742622</id><snippet>try:
    domain = a.split('@')[1]
except IndexError:
    print "Oops! No @ symbols exist!"
</snippet></ROW><ROW><id>5742689</id><snippet># check if correct file extension
def checkExt(path):
    return path.endswith(FILE_EXT)
</snippet></ROW><ROW><id>5742689</id><snippet># rsync subprocess
def rsyncFile(path):
    printLog("Syncing file '%s'" % os.path.basename(path))
    try:
        p = subprocess.Popen(['rsync', '-a', '--remove-source-files', path, REM_DIR], stdout=subprocess.PIPE)
        for line in p.stdout:
            printLog("rsync: '%s'" %line)
        p.wait()
        printlog(
            { 
                0  : '&lt;&lt;&lt; File synced successfully :) &gt;&gt;&gt;',
                10 : '****** Please check your internet connection!! ******  Rsync error code: %s' % p.returncode,
            }.get(p.returncode, '****** Please check your internet connection!! ******  Rsync error code: %s' % p.returncode) # A switch statement in python !
        )
    except:
        logging.exception("An exception occured")
</snippet></ROW><ROW><id>5742689</id><snippet>def main():
    while True:
        files = [f for f in getFiles(LOC_DIR) if checkExt(f)]
        if len(files) == 1:
            printLog('&lt;&lt;&lt; Found %s matching file &gt;&gt;&gt;' % len(files))
        elif len(files) &gt; 1:
            printLog('&lt;&lt;&lt; Found %s matching files &gt;&gt;&gt;' % len(files))
        for f in files:
            if checkSize(f):
                rsyncFile(f)
        printLog('No files found.  Checking again in %s seconds' % RUN_INT)
        time.sleep(RUN_INT)
        printLog('Checking for files')
</snippet></ROW><ROW><id>5742860</id><snippet>print ("hello " 
        "world"
        "!")
</snippet></ROW><ROW><id>5742860</id><snippet>print "hello " 
       "world"
       "!"
</snippet></ROW><ROW><id>5743275</id><snippet>while True:
    for a in range(10000):
        time.sleep(0.0001)
        for i in range(cntControl):
            barra[i].setValue(a)
</snippet></ROW><ROW><id>5743275</id><snippet>PySide.QtGui.QProgressBar.reset()
Reset the progress bar. The progress bar “rewinds” and shows no
progress
</snippet></ROW><ROW><id>5743281</id><snippet>python manage.py shell</snippet></ROW><ROW><id>5743281</id><snippet>manage.py</snippet></ROW><ROW><id>5743281</id><snippet>settings.py</snippet></ROW><ROW><id>5743325</id><snippet>In [1]: fn = lambda x: x**2 + 3*x - 4

In [2]: fn(3)
Out[2]: 14
</snippet></ROW><ROW><id>5743325</id><snippet>fn()</snippet></ROW><ROW><id>5743325</id><snippet>In [1]: def fn(x):
   ...:   return x**2 + 3*x - 4
   ...: 

In [2]: fn(4)
Out[2]: 24
</snippet></ROW><ROW><id>5743551</id><snippet>c.execute('''create table nokta
             id integer primary key autoincrement,
             name text,
             parent text
             FOREIGNKEY(parent) REFERENCES cihaz(name)''')
</snippet></ROW><ROW><id>5743551</id><snippet> c.execute('insert into nokta (text, parent) values ?, ?', ('Nokta1', 'Cihaz1'))
</snippet></ROW><ROW><id>5743551</id><snippet> c.execute('select * from nokta where parent = ?', ('Cihaz1',))
</snippet></ROW><ROW><id>5743685</id><snippet>'\x89'</snippet></ROW><ROW><id>5743685</id><snippet>0x89</snippet></ROW><ROW><id>5743685</id><snippet>137</snippet></ROW><ROW><id>5743685</id><snippet>mimetypes</snippet></ROW><ROW><id>5743685</id><snippet>import mimetypes
type, subtype = mimetypes.guess_type(filename_or_url)
</snippet></ROW><ROW><id>5743685</id><snippet>&gt;&gt;&gt; mimetypes.guess_type('http://upload.wikimedia.org/wikipedia/commons/9/9a/PNG_transparency_demonstration_2.png')
('image/png', None)
</snippet></ROW><ROW><id>5743797</id><snippet>ObjectListView</snippet></ROW><ROW><id>5743797</id><snippet>ObjectListView</snippet></ROW><ROW><id>5743797</id><snippet>_HandleLeftDownOnImage</snippet></ROW><ROW><id>5743797</id><snippet>SetCheckState</snippet></ROW><ROW><id>5743797</id><snippet>import  wx.lib.newevent

OvlCheckEvent, EVT_OVL_CHECK_EVENT = wx.lib.newevent.NewEvent()

class MyOvl(ObjectListView):  
    def SetCheckState(self, modelObject, state):
        """
        This is the same code, just added the event inside
        """
        if self.checkStateColumn is None:
            return None
        else:
            r = self.checkStateColumn.SetCheckState(modelObject, state)

            # Just added the event here ===================================
            e = OvlCheckEvent(object=modelObject, value=state)
            wx.PostEvent(self, e)
            # =============================================================

            return r

    def _HandleLeftDownOnImage(self, rowIndex, subItemIndex):
        """
        This is the same code, just added the event inside
        """
        column = self.columns[subItemIndex]
        if not column.HasCheckState():
            return

        self._PossibleFinishCellEdit()
        modelObject = self.GetObjectAt(rowIndex)
        if modelObject is not None:
            column.SetCheckState(modelObject, not column.GetCheckState(modelObject))

            # Just added the event here ===================================
            e = OvlCheckEvent(object=modelObject, value=column.GetCheckState(modelObject))
            wx.PostEvent(self, e)
            # =============================================================

            self.RefreshIndex(rowIndex, modelObject)
</snippet></ROW><ROW><id>5743797</id><snippet>ObjectListView</snippet></ROW><ROW><id>5743797</id><snippet>self.dataOlv = MyOvl(self, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
</snippet></ROW><ROW><id>5743797</id><snippet>self.dataOlv.Bind(EVT_OVL_CHECK_EVENT, self.HandleCheckbox)
</snippet></ROW><ROW><id>5743797</id><snippet>def HandleCheckbox(self, e):
    print(e.object.title, e.value)
</snippet></ROW><ROW><id>5743797</id><snippet>import wx
import  wx.lib.newevent
from ObjectListView import ObjectListView, ColumnDefn, OLVEvent

OvlCheckEvent, EVT_OVL_CHECK_EVENT = wx.lib.newevent.NewEvent()

class MyOvl(ObjectListView):  
    def SetCheckState(self, modelObject, state):
        """
        This is the same code, just added the event inside
        """
        if self.checkStateColumn is None:
            return None
        else:
            r = self.checkStateColumn.SetCheckState(modelObject, state)

            # Just added the event here ===================================
            e = OvlCheckEvent(object=modelObject, value=state)
            wx.PostEvent(self, e)
            # =============================================================

            return r

    def _HandleLeftDownOnImage(self, rowIndex, subItemIndex):
        """
        This is the same code, just added the event inside
        """
        column = self.columns[subItemIndex]
        if not column.HasCheckState():
            return

        self._PossibleFinishCellEdit()
        modelObject = self.GetObjectAt(rowIndex)
        if modelObject is not None:
            column.SetCheckState(modelObject, not column.GetCheckState(modelObject))

            # Just added the event here ===================================
            e = OvlCheckEvent(object=modelObject, value=column.GetCheckState(modelObject))
            wx.PostEvent(self, e)
            # =============================================================

            self.RefreshIndex(rowIndex, modelObject)

########################################################################
class Book(object):
    """
    Model of the Book object

    Contains the following attributes:
    'ISBN', 'Author', 'Manufacturer', 'Title'
    """
    #----------------------------------------------------------------------
    def __init__(self, title, author, isbn, mfg):
        self.isbn = isbn
        self.author = author
        self.mfg = mfg
        self.title = title

########################################################################
class MainPanel(wx.Panel):
    #----------------------------------------------------------------------
    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        self.products = [Book("wxPython in Action", "Robin Dunn",
                              "1932394621", "Manning"),
                         Book("Hello World", "Warren and Carter Sande",
                              "1933988495", "Manning")
                         ]

        self.dataOlv = MyOvl(self, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.setBooks()
        self.dataOlv.CreateCheckStateColumn()
        self.dataOlv.Bind(EVT_OVL_CHECK_EVENT, self.HandleCheckbox)

        # Allow the cell values to be edited when double-clicked
        self.dataOlv.cellEditMode = ObjectListView.CELLEDIT_SINGLECLICK

        # create an update button
        updateBtn = wx.Button(self, wx.ID_ANY, "Update OLV")
        updateBtn.Bind(wx.EVT_BUTTON, self.updateControl)

        # Create some sizers
        mainSizer = wx.BoxSizer(wx.VERTICAL)

        mainSizer.Add(self.dataOlv, 1, wx.ALL|wx.EXPAND, 5)
        mainSizer.Add(updateBtn, 0, wx.ALL|wx.CENTER, 5)
        self.SetSizer(mainSizer)

    def HandleCheckbox(self, e):
        print(e.object.title, e.value)

    #----------------------------------------------------------------------
    def updateControl(self, event):
        """

        """
        print "updating..."
        product_dict = [Book("Core Python Programming", "Wesley Chun",
                         "0132269937", "Prentice Hall"),
                        Book("Python Programming for the Absolute Beginner",
                         "Michael Dawson", "1598631128", "Course Technology"),
                        Book("Learning Python", "Mark Lutz",
                         "0596513984", "O'Reilly")
                        ]
        data = self.products + product_dict
        self.dataOlv.SetObjects(data)

    #----------------------------------------------------------------------
    def setBooks(self, data=None):
        self.dataOlv.SetColumns([
            ColumnDefn("Title", "left", 220, "title"),
            ColumnDefn("Author", "left", 200, "author"),
            ColumnDefn("ISBN", "right", 100, "isbn"),
            ColumnDefn("Mfg", "left", 180, "mfg")
        ])

        self.dataOlv.SetObjects(self.products)

########################################################################
class MainFrame(wx.Frame):
    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, parent=None, id=wx.ID_ANY,
                          title="ObjectListView Demo", size=(800,600))
        panel = MainPanel(self)

########################################################################
class GenApp(wx.App):

    #----------------------------------------------------------------------
    def __init__(self, redirect=False, filename=None):
        wx.App.__init__(self, redirect, filename)

    #----------------------------------------------------------------------
    def OnInit(self):
        # create frame here
        frame = MainFrame()
        frame.Show()
        return True

#----------------------------------------------------------------------
def main():
    """
    Run the demo
    """
    app = GenApp()
    app.MainLoop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5743979</id><snippet>&gt;&gt;&gt; pywt.dwtn([[1,2,3,4],[3,4,5,6],[5,6,7,8],[7,8,9,10]], 'db1')
{'aa': [[5.0, 9.0], [13.0, 17.0]],
 'ad': [[-1.0, -1.0], [-1.0, -1.0]],
 'da': [[-2.0, -2.0], [-2.0, -2.0]],
 'dd': [[0.0, 0.0], [0.0, -0.0]]}
</snippet></ROW><ROW><id>5743979</id><snippet>aa</snippet></ROW><ROW><id>5743979</id><snippet>da</snippet></ROW><ROW><id>5744114</id><snippet>a</snippet></ROW><ROW><id>5744114</id><snippet>a</snippet></ROW><ROW><id>5744114</id><snippet>a=0</snippet></ROW><ROW><id>5744114</id><snippet>global a</snippet></ROW><ROW><id>5744114</id><snippet>a=1</snippet></ROW><ROW><id>5744114</id><snippet>a=2</snippet></ROW><ROW><id>5744283</id><snippet>x['P'][x['TEST'] == 'GENO']</snippet></ROW><ROW><id>5744283</id><snippet>import numpy as np

# Make some fake data:
x = np.zeros(10, dtype={'names':['P', 'TEST'], 'formats':[np.int, '|S5']})
x['P'] = np.arange(10)
x['TEST'] = ['GENO', 'TREND', 'ALLEL', 'DOM', 'REC', 
             'GENO', 'TREND', 'DOM', 'ALLEL', 'REC']

# Get values in field "P" where field "TEST" == "GENO":
print x['P'][x['TEST'] == 'GENO']
</snippet></ROW><ROW><id>5744438</id><snippet>set_choices</snippet></ROW><ROW><id>5744438</id><snippet>get_choices</snippet></ROW><ROW><id>5744438</id><snippet>options</snippet></ROW><ROW><id>5744438</id><snippet>options</snippet></ROW><ROW><id>5744438</id><snippet>get_choices()</snippet></ROW><ROW><id>5744438</id><snippet>get_choices</snippet></ROW><ROW><id>5744438</id><snippet>options</snippet></ROW><ROW><id>5744438</id><snippet>set_choices</snippet></ROW><ROW><id>5744438</id><snippet>options</snippet></ROW><ROW><id>5744438</id><snippet>get_choices</snippet></ROW><ROW><id>5744438</id><snippet>options</snippet></ROW><ROW><id>5744438</id><snippet>__init__</snippet></ROW><ROW><id>5744438</id><snippet>class Test(forms.Form):
    options = forms.ChoiceField(choices=())

    def __init__(self, *args, **kwargs):
        choices = kwargs.pop('choices', None)
        super(Test, self).__init__(*args, **kwargs)
        if choices is not None:
            self.fields['options'].choices = choices
</snippet></ROW><ROW><id>5744646</id><snippet>CL_Rectf</snippet></ROW><ROW><id>5744646</id><snippet>CL_Rectx&lt;float&gt;</snippet></ROW><ROW><id>5744646</id><snippet>CL_Rectx&lt;float&gt;</snippet></ROW><ROW><id>5744646</id><snippet>CL_Floatf</snippet></ROW><ROW><id>5744646</id><snippet>CL_Rectx&lt;float&gt;</snippet></ROW><ROW><id>5744646</id><snippet>CL_Rectf</snippet></ROW><ROW><id>5744845</id><snippet>self.headers</snippet></ROW><ROW><id>5744845</id><snippet>def do_GET(self):
    host = self.headers.get('Host')
</snippet></ROW><ROW><id>5745133</id><snippet>input()</snippet></ROW><ROW><id>5745133</id><snippet>raw_input()</snippet></ROW><ROW><id>5745133</id><snippet>app = raw_input('Name of the application: ')
</snippet></ROW><ROW><id>5745133</id><snippet>system('pidof')</snippet></ROW><ROW><id>5745133</id><snippet>pidof</snippet></ROW><ROW><id>5745133</id><snippet>pidof</snippet></ROW><ROW><id>5745133</id><snippet>import subprocess

# Python 2.7 only
pid = int(subprocess.check_output(['pidof', app]))

# Python 2.4+
pid = int(subprocess.Popen(['pidof', app], stdout=subprocess.PIPE).communicate()[0])

# Older (deprecated)
pid = int(os.popen('pidof ' + app).read())
</snippet></ROW><ROW><id>5745133</id><snippet>grep</snippet></ROW><ROW><id>5745133</id><snippet>grep1234</snippet></ROW><ROW><id>5745133</id><snippet>%</snippet></ROW><ROW><id>5745133</id><snippet>os.system('top -d 30 | grep %d &gt; test.txt' % (pid))
</snippet></ROW><ROW><id>5745133</id><snippet>os.system("awk '{print $10, $11}' test.txt &gt; test2.txt")
</snippet></ROW><ROW><id>5745142</id><snippet>cur.executemany('INSERT INTO myTable (key, value) VALUES (%s, %s)', mydictionary.items())
</snippet></ROW><ROW><id>5745142</id><snippet>import StringIO
dictFile = StringIO.StringIO()
for item in dictionary.iteritems():
    dictFile.write("%s\t%s\n"%item)
cur.copy_from(dictFile, 'myTable')
</snippet></ROW><ROW><id>5745236</id><snippet>array.array('d', vals)</snippet></ROW><ROW><id>5745236</id><snippet>numpy.array(vals, numpy.float64)</snippet></ROW><ROW><id>5745236</id><snippet>import array
import cv
import numpy

ar = array.array('d', range(1, 13))
na = numpy.array(range(1, 13), numpy.float64)
for vals in (ar, na):
    m = cv.CreateMatHeader(3, 4, cv.CV_64FC1)
    cv.SetData(m, vals, cv.CV_AUTOSTEP)
    print cv.mGet(m, 0, 2)
</snippet></ROW><ROW><id>5745236</id><snippet>3.0
3.0
</snippet></ROW><ROW><id>5745488</id><snippet>fullname</snippet></ROW><ROW><id>5745488</id><snippet>from django.contrib.auth.forms import UserCreationForm
from django import forms
from django.contrib.auth.models import User

class RegisterForm(UserCreationForm):
    email = forms.EmailField(label = "Email")
    fullname = forms.CharField(label = "First name")

    class Meta:
        model = User
        fields = ("username", "fullname", "email", )
</snippet></ROW><ROW><id>5745488</id><snippet>def save(self, commit=True):
        user = super(RegisterForm, self).save(commit=False)
        first_name, last_name = self.cleaned_data["fullname"].split()
        user.first_name = first_name
        user.last_name = last_name
        user.email = self.cleaned_data["email"]
        if commit:
            user.save()
        return user
</snippet></ROW><ROW><id>5745488</id><snippet>http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/models.py#L201
</snippet></ROW><ROW><id>5745817</id><snippet>while True:
    print(p.stdout.readline())
</snippet></ROW><ROW><id>5746071</id><snippet>somelist = [x for x in somelist if not determine(x)]
</snippet></ROW><ROW><id>5746089</id><snippet>html = BeautifulSoup(p)
anchors = html.findAll('a', href='/slideshow')

for anchor in anchors:
    anchor['href'] = '/slideshow_v2'

print html.findAll('a', href='/slideshow_v2')
</snippet></ROW><ROW><id>5746178</id><snippet>None</snippet></ROW><ROW><id>5746178</id><snippet>def test(thing=None):
    if thing is None:
        thing = StringIO.StringIO()
    thing.write("test")
    print thing.getvalue()
</snippet></ROW><ROW><id>5746959</id><snippet>print some_unicode_string.decode('utf-8')
</snippet></ROW><ROW><id>5747306</id><snippet>glibc</snippet></ROW><ROW><id>5747306</id><snippet>.../bin</snippet></ROW><ROW><id>5747306</id><snippet>.../libexec</snippet></ROW><ROW><id>5747306</id><snippet>/opt</snippet></ROW><ROW><id>5747306</id><snippet>lib/python/site-packages</snippet></ROW><ROW><id>5747306</id><snippet>.py</snippet></ROW><ROW><id>5747533</id><snippet>from django import forms


    class Test(forms.Form):
        OPTIONS = (
            ("a", "A"),
            ("b", "B"),
            )
        name = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple,
                                         choices=OPTIONS)
</snippet></ROW><ROW><id>5747654</id><snippet>from myproject import models
</snippet></ROW><ROW><id>5747654</id><snippet>ImportError: No module named foo</snippet></ROW><ROW><id>5747654</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5747654</id><snippet>myproject/</snippet></ROW><ROW><id>5747654</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5747654</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5747654</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5747654</id><snippet>python</snippet></ROW><ROW><id>5747654</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>5747654</id><snippet>__main__</snippet></ROW><ROW><id>5747654</id><snippet>__main__</snippet></ROW><ROW><id>5747654</id><snippet>python myproject/scripts/myscript.py
</snippet></ROW><ROW><id>5747654</id><snippet>python -c 'import myproject.scripts.myscript'
</snippet></ROW><ROW><id>5747654</id><snippet>bin/myscript</snippet></ROW><ROW><id>5747654</id><snippet>import myprojects.scripts.myscript
myprojects.scripts.myscript.main()
</snippet></ROW><ROW><id>5747850</id><snippet>(r'^dashboard$', 'dashboard_view'),
</snippet></ROW><ROW><id>5747850</id><snippet>from django.contrib.admin.models import LogEntry
def dashboard_view(request):
    log = LogEntry.objects.select_related().all().order_by("id")
    return render_to_response("app_name/dashboard.html", {'log': log},)
</snippet></ROW><ROW><id>5747850</id><snippet>{% for l in log %}
&lt;p&gt;
    {{ l.id }} {{ l.user.username }} {{ l.change_message }}
&lt;/p&gt;

{% endfor %}
</snippet></ROW><ROW><id>5747866</id><snippet>threading.Thread</snippet></ROW><ROW><id>5747866</id><snippet>run</snippet></ROW><ROW><id>5747866</id><snippet>Thread</snippet></ROW><ROW><id>5747866</id><snippet>target=</snippet></ROW><ROW><id>5747866</id><snippet>run</snippet></ROW><ROW><id>5748043</id><snippet>unicode</snippet></ROW><ROW><id>5748043</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>5748203</id><snippet>axim    = ax.contourf(X,Y,Z,levels=[1e-3, 1e-2, 1e-1, 1e0],cmap=plt.cm.jet,norm = LogNorm())
</snippet></ROW><ROW><id>5748417</id><snippet>class UserProfile(db.Model):
    UserID = db.UserProperty()
    FirstSession = db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>5748417</id><snippet>from google.appengine.api import users

user = users.get_current_user()

is_existing_user = UserProfile.all().filter('UserID = ', user).get()

if is_existing_user:
    #do something
else:
    #do something else
</snippet></ROW><ROW><id>5748576</id><snippet>dir()</snippet></ROW><ROW><id>5748576</id><snippet>__dict__</snippet></ROW><ROW><id>5748576</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, a, b, c):
&gt;&gt;&gt;
&gt;&gt;&gt; f = Foo(1,2,3)
&gt;&gt;&gt; f.__dict__
{'a': 1, 'c': 3, 'b': 2}
&gt;&gt;&gt; dir(f)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'a', 'b', 'c']
</snippet></ROW><ROW><id>5748987</id><snippet>from module import *</snippet></ROW><ROW><id>5748987</id><snippet>from numpy import *
from numpy.random import *
</snippet></ROW><ROW><id>5748987</id><snippet>from numpy import *</snippet></ROW><ROW><id>5748987</id><snippet>sum</snippet></ROW><ROW><id>5748987</id><snippet>sum</snippet></ROW><ROW><id>5748987</id><snippet>import numpy as np
np_locals=set(dir(np))
builtins=set(dir(__builtins__))
print([name for name in np_locals.intersection(builtins) if not name.startswith('__')])

# ['all', 'any', 'min', 'int', 'max', 'sum', 'float', 'complex', 'long', 'abs', 'bool', 'round']
</snippet></ROW><ROW><id>5748987</id><snippet>from module import *</snippet></ROW><ROW><id>5749020</id><snippet>import homePageLib

class CalendarPage(object):
    def clickHomePageLink(self):
        [...]
        return homePageLib.HomePage()
</snippet></ROW><ROW><id>5749020</id><snippet>from [...] import [...]</snippet></ROW><ROW><id>5749020</id><snippet>import [...]</snippet></ROW><ROW><id>5749208</id><snippet>"2.7.0_bf4fda703454".split("_")</snippet></ROW><ROW><id>5749208</id><snippet>In [1]: "2.7.0_bf4fda703454".split("_")
Out[1]: ['2.7.0', 'bf4fda703454']
</snippet></ROW><ROW><id>5749208</id><snippet>"2.7.0_bf4fda703454".split("_", 1)</snippet></ROW><ROW><id>5749208</id><snippet>In [8]: lhs, rhs = "2.7.0_bf4fda703454".split("_", 1)

In [9]: lhs
Out[9]: '2.7.0'

In [10]: rhs
Out[10]: 'bf4fda703454'
</snippet></ROW><ROW><id>5749208</id><snippet>partition</snippet></ROW><ROW><id>5750082</id><snippet>class ArticleAdmin(admin.ModelAdmin):
    class Media:
        css = {
             "all": ("my_styles.css",)
         }
        js = ("my_code.js",)
</snippet></ROW><ROW><id>5750103</id><snippet>CreditCardField</snippet></ROW><ROW><id>5750103</id><snippet>def clean(self, value):
    if not value and not self.required:
        return value
    """Check if given CC number is valid and one of the
       card types we accept"""
    if value and (len(value) &lt; 13 or len(value) &gt; 16):
        raise forms.ValidationError("Please enter in a valid "+\
                "credit card number.")
    elif self.get_cc_type(value) not in ("Visa", "MasterCard",
                                             "American Express"):
        raise forms.ValidationError("Please enter in a Visa, "+\
            "Master Card, or American Express credit card number.")
    return super(CreditCardField, self).clean(value)
</snippet></ROW><ROW><id>5750267</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>5750267</id><snippet>settings.py</snippet></ROW><ROW><id>5750267</id><snippet>America/New_York EST5EDT SystemV/EST5EDT US/Eastern</snippet></ROW><ROW><id>5750267</id><snippet>America/New_York</snippet></ROW><ROW><id>5750267</id><snippet>/usr/share/zoneinfo/</snippet></ROW><ROW><id>5750297</id><snippet>setup.py</snippet></ROW><ROW><id>5750297</id><snippet>.py</snippet></ROW><ROW><id>5750297</id><snippet>.pyc</snippet></ROW><ROW><id>5750297</id><snippet>xlwt</snippet></ROW><ROW><id>5750297</id><snippet>sys.path</snippet></ROW><ROW><id>5750297</id><snippet>xlwt.zip</snippet></ROW><ROW><id>5750297</id><snippet>xlwt</snippet></ROW><ROW><id>5750297</id><snippet>setup.py</snippet></ROW><ROW><id>5750306</id><snippet>onclick</snippet></ROW><ROW><id>5750306</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>5750306</id><snippet>runat=server</snippet></ROW><ROW><id>5750306</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>5750306</id><snippet>urls.py</snippet></ROW><ROW><id>5750527</id><snippet>{{ obj.text|safe }}
</snippet></ROW><ROW><id>5750771</id><snippet>xlrd</snippet></ROW><ROW><id>5750771</id><snippet>xlwt</snippet></ROW><ROW><id>5750771</id><snippet>xlutils</snippet></ROW><ROW><id>5750771</id><snippet>Eclipse</snippet></ROW><ROW><id>5750771</id><snippet>import foo</snippet></ROW><ROW><id>5750771</id><snippet>foo</snippet></ROW><ROW><id>5750771</id><snippet>foo</snippet></ROW><ROW><id>5750771</id><snippet>foo_examples</snippet></ROW><ROW><id>5750771</id><snippet>foo_scripts</snippet></ROW><ROW><id>5750813</id><snippet>^</snippet></ROW><ROW><id>5750813</id><snippet>$</snippet></ROW><ROW><id>5750813</id><snippet>finditer</snippet></ROW><ROW><id>5750813</id><snippet>findall</snippet></ROW><ROW><id>5750813</id><snippet>search</snippet></ROW><ROW><id>5750813</id><snippet>p=re.compile(r',\s(19|20)\d\d')</snippet></ROW><ROW><id>5750813</id><snippet>for m in re.finditer(r',\s((19|20)\d\d)', text):
    print m.group(1)
</snippet></ROW><ROW><id>5751119</id><snippet>PySys_SetPath</snippet></ROW><ROW><id>5751119</id><snippet>:</snippet></ROW><ROW><id>5751119</id><snippet>PySys_SetObject</snippet></ROW><ROW><id>5751119</id><snippet>sys.path</snippet></ROW><ROW><id>5751119</id><snippet>PyListObject *path; 

path = (PyListObject *)PyList_New(0); 
PyList_Append((PyObject *) path, PyString_FromString("foo:bar")); 
PySys_SetObject("path", (PyObject *)path); 
</snippet></ROW><ROW><id>5751119</id><snippet>"foo:bar"</snippet></ROW><ROW><id>5751119</id><snippet>sys.path</snippet></ROW><ROW><id>5751327</id><snippet>sys.path</snippet></ROW><ROW><id>5751327</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>5751513</id><snippet>python</snippet></ROW><ROW><id>5751632</id><snippet>glib-genmarshal --header --body mediaplayerkeypressed.list &gt; marshal.h
</snippet></ROW><ROW><id>5751632</id><snippet>#include &lt;glib.h&gt;
#include &lt;dbus/dbus-glib.h&gt;
#include "marshal.h"

static void media_key_pressed(DBusGProxy *proxy, const char *value1, const char *value2, gpointer user_data) {
    g_print("mediakey: %s\n",value2);
}

int
main (int argc, char **argv)
{
    DBusGConnection *conn;
    DBusGProxy *proxy;
    GError *error;
    GMainLoop *loop;

    g_type_init();
    error = NULL;

    conn = dbus_g_bus_get (DBUS_BUS_SESSION, &amp;error);
    if (!conn) {
        g_printerr("Failed to connect to the D-BUS daemon: %s\n", error-&gt;message);
        g_error_free(error);

        return 1;
    }

    loop = g_main_loop_new (NULL, FALSE);
    if(!loop) {
        g_printerr("Could not create mainloop\n");

        return 1;
    }

    proxy = dbus_g_proxy_new_for_name(conn,
                                    "org.gnome.SettingsDaemon",
                                    "/org/gnome/SettingsDaemon/MediaKeys",
                                    "org.gnome.SettingsDaemon.MediaKeys");

    if(!proxy) {
        g_printerr("Could not create proxy object\n");
    }

    error = NULL;
    if(!dbus_g_proxy_call(proxy,
                      "GrabMediaPlayerKeys", &amp;error,
                      G_TYPE_STRING, "WebMediaKeys",
                      G_TYPE_UINT, 0,
                      G_TYPE_INVALID,
                      G_TYPE_INVALID)) {
        g_printerr("Could not grab media player keys: %s\n", error-&gt;message);
    }

    dbus_g_object_register_marshaller (
            g_cclosure_user_marshal_VOID__STRING_STRING,
            G_TYPE_NONE,
            G_TYPE_STRING,
            G_TYPE_STRING,
            G_TYPE_INVALID);

    dbus_g_proxy_add_signal(proxy,
                          "MediaPlayerKeyPressed",
                          G_TYPE_STRING,
                          G_TYPE_STRING,
                          G_TYPE_INVALID);

    dbus_g_proxy_connect_signal(proxy,
                              "MediaPlayerKeyPressed",
                              G_CALLBACK(media_key_pressed),
                              NULL,
                              NULL);

    g_print("Starting media key listener\n");
    g_main_loop_run (loop);

    return 0;
}
</snippet></ROW><ROW><id>5751843</id><snippet>__init__</snippet></ROW><ROW><id>5751843</id><snippet>class OAuthConsumer(db.Model):
    '''the oauth consumer information'''
    consumer_key = db.StringProperty()
    consumer_secret = db.StringProperty()

    @classmethod
    def new(cls, service):
        namespace_manager.set_namespace(service)
        query = db.GqlQuery('SELECT * FROM OAuthConsumer')
        creds = query.get()
        return cls(consumer_key=creds.consumer_key, consumer_secret=creds.consumer_secret)

creds = OAuthConsumer('google')
</snippet></ROW><ROW><id>5752013</id><snippet>f</snippet></ROW><ROW><id>5752013</id><snippet>MyClass.f</snippet></ROW><ROW><id>5752013</id><snippet>f</snippet></ROW><ROW><id>5752013</id><snippet>&gt;&gt;&gt; MyClass.f
&lt;unbound method MyClass.f&gt;
</snippet></ROW><ROW><id>5752510</id><snippet>Case.objects.exclude(agents=request.user)
</snippet></ROW><ROW><id>5752510</id><snippet>Case.objects.filter(Q(organization=organization)|Q(agents=None)).exclude(agents=request.user)
</snippet></ROW><ROW><id>5752736</id><snippet>  p = subprocess.Popen('ls', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>5753472</id><snippet>windowicon = window.render_icon(gtk.STOCK_DIALOG_AUTHENTICATION, gtk.ICON_SIZE_MENU)
window.set_icon(windowicon)
</snippet></ROW><ROW><id>5753546</id><snippet>&gt;&gt;&gt; r'\t\n\v\r'.decode('string-escape')
'\t\n\x0b\r'
</snippet></ROW><ROW><id>5753896</id><snippet>open</snippet></ROW><ROW><id>5753896</id><snippet>files.blobstore.get_blob_key(file_name)</snippet></ROW><ROW><id>5753896</id><snippet>BlobReader</snippet></ROW><ROW><id>5754229</id><snippet>class Like(Base):
    __tablename__ = 'Like'
    id = Column(Integer, primary_key=True)
    counter = Column(Integer, nullable=False, default=0)


o = session.merge(Like(id=1))
session.flush()  # Required when it's new record
o.counter = Like.counter+1
session.commit()
</snippet></ROW><ROW><id>5754229</id><snippet>INSERT OR IGNORE</snippet></ROW><ROW><id>5754229</id><snippet>clause = Like.__table__.insert(prefixes=['OR IGNORE'],
                               values=dict(id=1, counter=0))
session.execute(clause)
o = session.merge(Like(id=1, counter=Like.counter+1))
session.commit()
</snippet></ROW><ROW><id>5754229</id><snippet>INSERT OR REPLACE</snippet></ROW><ROW><id>5754229</id><snippet>ON DUPLICATE KEY</snippet></ROW><ROW><id>5754229</id><snippet>old = session.query(Like.counter).filter_by(id=1).statement.as_scalar()
new = func.ifnull(old, 0) + 1
clause = Like.__table__.insert(prefixes=['OR REPLACE'],
                               values=dict(id=1, counter=new))
session.execute(clause)
</snippet></ROW><ROW><id>5754539</id><snippet>__eq__</snippet></ROW><ROW><id>5754539</id><snippet>__ne__</snippet></ROW><ROW><id>5754539</id><snippet>__hash__</snippet></ROW><ROW><id>5754539</id><snippet>__eq__</snippet></ROW><ROW><id>5754539</id><snippet>__ne__</snippet></ROW><ROW><id>5754539</id><snippet>__eq__</snippet></ROW><ROW><id>5754539</id><snippet>__hash__</snippet></ROW><ROW><id>5754539</id><snippet>set</snippet></ROW><ROW><id>5754606</id><snippet>import numpy
a = [1, 1, 1 ,1, 1]
ar = numpy.array(a)
print ar + 2
</snippet></ROW><ROW><id>5754606</id><snippet>[3, 3, 3, 3, 3]
</snippet></ROW><ROW><id>5755087</id><snippet>setattr</snippet></ROW><ROW><id>5755087</id><snippet>a.x = ...</snippet></ROW><ROW><id>5755087</id><snippet>a.__setattr__('x', ...)</snippet></ROW><ROW><id>5755090</id><snippet>print(urllib.unquote('Krummh%C3%B6rn').decode('utf-8'))
</snippet></ROW><ROW><id>5755114</id><snippet>libxml2</snippet></ROW><ROW><id>5755120</id><snippet>def check_field(fieldname, errorname, errormessage):
    def fn(user, formdata):
        if fieldname in formdata and formdata[fieldname].value != '':
            return formdata[fieldname].value
        else:
            feedback = {errorname : errormessage}
            stepTwoError(user, formdata, errorname, feedback)
    return fn

check_address = check_field("streetAddress", "blank_address", "Please enter a valid street address!")
check_city = check_field("city", "blank_city", "Please enter a city!")
check_state = check_field("state", "blank_state", "Please enter a state!")
check_zip = check_field("zip", "blank_zip", "Please enter a zip code!")
</snippet></ROW><ROW><id>5755120</id><snippet>stepTwoError</snippet></ROW><ROW><id>5755290</id><snippet>tk*</snippet></ROW><ROW><id>5755290</id><snippet>tkinter</snippet></ROW><ROW><id>5756345</id><snippet>MySQLdb.Connection</snippet></ROW><ROW><id>5756345</id><snippet>MySQLdb.connection</snippet></ROW><ROW><id>5756824</id><snippet>&gt; a = (1,)
&gt; b = a
&gt; b == a
True
&gt; a += (2,)
&gt; b == a
False
</snippet></ROW><ROW><id>5757090</id><snippet>cat -A filename.py
</snippet></ROW><ROW><id>5757151</id><snippet>break</snippet></ROW><ROW><id>5757151</id><snippet>else</snippet></ROW><ROW><id>5757151</id><snippet>file_to_be_processed = filename</snippet></ROW><ROW><id>5757151</id><snippet>file_to_processed</snippet></ROW><ROW><id>5757151</id><snippet>status[7]</snippet></ROW><ROW><id>5757151</id><snippet>status[6]</snippet></ROW><ROW><id>5757190</id><snippet>Decimal('10.0').quantize(Decimal('1.00'))
</snippet></ROW><ROW><id>5757475</id><snippet>import httplib

NO_WEB_SERVER = 0
WEB_SERVER = 1
GAE_DEV_SERVER_1_0 = 2
def checkServer(host, port, try_only_ssl = False):
    hh = None
    connectionType = httplib.HTTPSConnection if try_only_ssl \
                                             else httplib.HTTPConnection
    try:
        hh = connectionType(host, port)
        hh.request('GET', '/_ah/admin')
        resp = hh.getresponse()
        headers = resp.getheaders()
        if headers:
            if (('server', 'Development/1.0') in headers):
                return GAE_DEV_SERVER_1_0|WEB_SERVER
            return WEB_SERVER
    except httplib.socket.error:
        return NO_WEB_SERVER
    except httplib.BadStatusLine:
        if not try_only_ssl:
            # retry with SSL
            return checkServer(host, port, True)
    finally:
        if hh:
            hh.close()
    return NO_WEB_SERVER

print checkServer('scorpio', 22)   # will print 0 an  ssh server
print checkServer('skiathos', 80)  # will print 1 for an apache web server
print checkServer('skiathos', 8080) # will print 3, a GAE Dev Web server
print checkServer('no-server', 80) # will print 0, no server
print checkServer('www.google.com', 80) # will print 1
print checkServer('www.google.com', 443) # will print 1
</snippet></ROW><ROW><id>5757517</id><snippet>all(0 &lt; n &lt; 50 for n in thetuple)
</snippet></ROW><ROW><id>5757524</id><snippet>--offset</snippet></ROW><ROW><id>5757524</id><snippet>--variable</snippet></ROW><ROW><id>5757524</id><snippet>offset_pattern</snippet></ROW><ROW><id>5757784</id><snippet>disttest</snippet></ROW><ROW><id>5757784</id><snippet>tests/</snippet></ROW><ROW><id>5757784</id><snippet>src/</snippet></ROW><ROW><id>5757784</id><snippet>tests/disttest</snippet></ROW><ROW><id>5757784</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>5757784</id><snippet>import sys; sys.modules['modulename'].__file__</snippet></ROW><ROW><id>5757836</id><snippet>&gt;&gt;&gt; Decimal("NaN456").as_tuple()
DecimalTuple(sign=0, digits=(4, 5, 6), exponent='n')
&gt;&gt;&gt; Decimal("NaN123").as_tuple()
DecimalTuple(sign=0, digits=(1, 2, 3), exponent='n')
&gt;&gt;&gt; Decimal("NaN").as_tuple()
DecimalTuple(sign=0, digits=(), exponent='n')
</snippet></ROW><ROW><id>5757859</id><snippet>for labeldic in [{"label":"Cut"},{"label":"Copy"},{"label":"Paste"},{"label":"Delete"}]:
    labeldic.update({"state": "disabled"})
    editmenu.add_command(**labeldic)
</snippet></ROW><ROW><id>5757859</id><snippet>'label'</snippet></ROW><ROW><id>5757859</id><snippet>'cut'</snippet></ROW><ROW><id>5757859</id><snippet>{'label': 'cut'}</snippet></ROW><ROW><id>5757859</id><snippet>dict()</snippet></ROW><ROW><id>5757859</id><snippet>dict(label='cut')</snippet></ROW><ROW><id>5757859</id><snippet>{label: 'cut'}</snippet></ROW><ROW><id>5757859</id><snippet>foo(bar='baz')</snippet></ROW><ROW><id>5757859</id><snippet>foo({'bar':'baz'})</snippet></ROW><ROW><id>5757859</id><snippet>foo(**{'bar':'baz'})</snippet></ROW><ROW><id>5757859</id><snippet>**</snippet></ROW><ROW><id>5757859</id><snippet>for label in ['Cut', 'Copy', 'Paste', 'Delete']:
    editmenu.add_command(label=label, state='disabled')
</snippet></ROW><ROW><id>5757958</id><snippet>for</snippet></ROW><ROW><id>5757958</id><snippet>for str_data, float_data in L:
    # str_data is the string, float_data is the Decimal object
</snippet></ROW><ROW><id>5758040</id><snippet>class C(object):
    __slots__ = ('x',)
    x = 0

C().x = 1
</snippet></ROW><ROW><id>5758040</id><snippet>__slots__</snippet></ROW><ROW><id>5758040</id><snippet>__slots__</snippet></ROW><ROW><id>5758040</id><snippet>__slots__</snippet></ROW><ROW><id>5758277</id><snippet>sorted_triplets = sorted(triplets, key=lambda x: int(x[0]))
</snippet></ROW><ROW><id>5758482</id><snippet>def RGB(r, g, b):    
    return r | (g &lt;&lt; 8) | (b &lt;&lt; 16)

def native_bmp_to_pil(hdc, bitmap_handle, width, height):
    bmpheader = struct.pack("LHHHH", struct.calcsize("LHHHH"),
                            width, height, 1, 24) #w,h, planes=1, bitcount)
    c_bmpheader = ctypes.c_buffer(bmpheader)

    #3 bytes per pixel, pad lines to 4 bytes    
    c_bits = ctypes.c_buffer(" " * (height * ((width*3 + 3) &amp; -4)))

    res = ctypes.windll.gdi32.GetDIBits(
        hdc, bitmap_handle, 0, height,
        c_bits, c_bmpheader,
        win32con.DIB_RGB_COLORS)
    if not res:
        raise IOError("native_bmp_to_pil failed: GetDIBits")

    im = Image.frombuffer(
        "RGB", (width, height), c_bits,
        "raw", "BGR", (width*3 + 3) &amp; -4, -1)
    return im    


class Win32Font:
    def __init__(self, name, height, weight=FW.NORMAL,
                 italic=False, underline=False):
        self.font = win32ui.CreateFont({
            'name': name, 'height': height,
            'weight': weight, 'italic': italic, 'underline': underline})

        #create a compatible DC we can use to draw:
        self.desktopHwnd = win32gui.GetDesktopWindow()
        self.desktopDC = win32gui.GetWindowDC(self.desktopHwnd)
        self.mfcDC = win32ui.CreateDCFromHandle(self.desktopDC)         
        self.drawDC = self.mfcDC.CreateCompatibleDC()

        #initialize it
        self.drawDC.SelectObject(self.font)

    def renderText(self, text):
        """render text to a PIL image using the windows API."""
        self.drawDC.SetTextColor(RGB(255,0,0))

        #create the compatible bitmap:
        w,h = self.drawDC.GetTextExtent(text)

        saveBitMap = win32ui.CreateBitmap()
        saveBitMap.CreateCompatibleBitmap(self.mfcDC, w, h)        
        self.drawDC.SelectObject(saveBitMap)

        #draw it
        self.drawDC.DrawText(text, (0, 0, w, h), win32con.DT_LEFT)

        #convert to PIL image
        im = native_bmp_to_pil(self.drawDC.GetSafeHdc(), saveBitMap.GetHandle(), w, h)

        #clean-up
        win32gui.DeleteObject(saveBitMap.GetHandle())

        return im        

    def __del__(self):
        self.mfcDC.DeleteDC()
        self.drawDC.DeleteDC()
        win32gui.ReleaseDC(self.desktopHwnd, self.desktopDC)
        win32gui.DeleteObject(self.font.GetSafeHandle())

    def __del__(self):
        win32gui.DeleteObject(self.font.GetSafeHandle())
</snippet></ROW><ROW><id>5758482</id><snippet>&gt;&gt;&gt; f = Win32Font("Arial", 15)
&gt;&gt;&gt; im = f.renderText("this is just a test")
&gt;&gt;&gt; im.save("c:/hope.png")
</snippet></ROW><ROW><id>5758482</id><snippet>.ttf</snippet></ROW><ROW><id>5758541</id><snippet>datetime.date()</snippet></ROW><ROW><id>5758541</id><snippet>from datetime import date, datetime
def spanning_months(start, end):
    assert start &lt;= end
    current = start.year * 12 + start.month - 1
    end = end.year * 12 + end.month - 1
    while current &lt;= end:
        yield date(current // 12, current % 12 + 1, 1)
        current += 1
</snippet></ROW><ROW><id>5758541</id><snippet>&gt;&gt;&gt; latest = datetime(2011, 4, 22, 15, 27, 28)
&gt;&gt;&gt; first = datetime(2010, 3, 17, 21, 0, 0)
&gt;&gt;&gt; for d in spanning_months(first, latest):
...     print d
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
</snippet></ROW><ROW><id>5758949</id><snippet>stderr</snippet></ROW><ROW><id>5758949</id><snippet>stderr</snippet></ROW><ROW><id>5758949</id><snippet>(dev_appserver.py &gt; /dev/tty) &gt;&amp; your_logfile.txt</snippet></ROW><ROW><id>5758949</id><snippet>logging</snippet></ROW><ROW><id>5758949</id><snippet>os.environ['SERVER_SOFTWARE'].startswith('Dev')</snippet></ROW><ROW><id>5758965</id><snippet>conf.py</snippet></ROW><ROW><id>5758965</id><snippet>latex_preamble = """
\usepackage{upquote}
"""
</snippet></ROW><ROW><id>5759052</id><snippet>**</snippet></ROW><ROW><id>5759052</id><snippet>    return math.sqrt((vector2[0]-vector1[0])**2+(vector2[1]-vector1[1])**2)
</snippet></ROW><ROW><id>5759052</id><snippet>^</snippet></ROW><ROW><id>5759052</id><snippet>math.hypot</snippet></ROW><ROW><id>5759052</id><snippet>    return math.hypot(vector2[0]-vector1[0], vector2[1]-vector1[1])
</snippet></ROW><ROW><id>5759662</id><snippet>ctypes</snippet></ROW><ROW><id>5759662</id><snippet>#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;

void
dostuff(uint64_t *ptr)
{
    while (1)
        (*ptr)++;
}
</snippet></ROW><ROW><id>5759662</id><snippet>% gcc -shared -g -o test.so test.c -fPIC
</snippet></ROW><ROW><id>5759662</id><snippet>import ctypes
import sys
import time
import threading

lib = ctypes.cdll.LoadLibrary('./test.so')
val = ctypes.c_uint64(0)

def loop():
    lib.dostuff(ctypes.byref(val))

t1 = threading.Thread(target=loop)
t1.start()

for i in range(1000):
    sys.stdout.write('%s ' % val.value)
    sys.stdout.flush()
    time.sleep(0.05)
</snippet></ROW><ROW><id>5759662</id><snippet>% python test.py 
0 24664442 48388062 71628820 94834416 118004961 141095893 164936784 ... ...
</snippet></ROW><ROW><id>5760011</id><snippet>cheetahVarStartToken</snippet></ROW><ROW><id>5760011</id><snippet>cheetahVarStartToken = "%"
</snippet></ROW><ROW><id>5760011</id><snippet> cheetahVarStartToken = "%"

 ConfigParser.ParsingError: File contains parsing errors: &lt;???&gt;
     [line  2]: ' cheetahVarStartToken = "%"\n'
</snippet></ROW><ROW><id>5760074</id><snippet>itertools.product</snippet></ROW><ROW><id>5760074</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for x, y in itertools.product([1,2,3,4], [5,6,7,8]): print x, y
... 
1 5
1 6
1 7
1 8
[ ... and so on ... ]
</snippet></ROW><ROW><id>5760091</id><snippet>super</snippet></ROW><ROW><id>5760091</id><snippet>super</snippet></ROW><ROW><id>5760091</id><snippet>Parent.method(self, ...)</snippet></ROW><ROW><id>5760091</id><snippet>Parent.method(self, ...)</snippet></ROW><ROW><id>5760127</id><snippet>#!/usr/bin/env python
import zipfile
from contextlib import closing

MiB = 2**20 # mebibyte

with closing(zipfile.ZipFile("example.zip")) as zfile:
    for info in zfile.infolist():
        if info.filename.endswith('.txt') and 0 &lt; info.file_size &lt;= 3*MiB:
            zfile.extract(info)
</snippet></ROW><ROW><id>5760232</id><snippet>mypoints = [(distance12, x1, x2),...,(distancenm, xn, xm)]
mypoints.sort()
three_closer = mypoints[:3]
</snippet></ROW><ROW><id>5760232</id><snippet>..............
mypoints = []
for row in rows:
     # Get coords for current record
     curr_coords = row.getAttribute("lat") + ',' + row.getAttribute("lng")
     # Get distance
     tempDistance = distance.distance(user_coords, curr_coords).miles
     mypoints.append((tempDistance, row))

mypoints.sort()
#the three closest points:
mythree_shorter = mypoints[0:3]
for distance, row in mythree_shorter:
    shortestStation = json.dumps(
                            {'number': row.getAttribute("number"),
                             'address': row.getAttribute("address"),
                             'lat': row.getAttribute("lat"),
                             'lng': row.getAttribute("lng"),
                             'open': row.getAttribute("open")},
                             sort_keys=True,
                             indent=4)
    save_in_some_way(shortestStation)   #maybe writing to a file?
..................
</snippet></ROW><ROW><id>5760432</id><snippet>range</snippet></ROW><ROW><id>5760432</id><snippet>range = None</snippet></ROW><ROW><id>5760432</id><snippet>range</snippet></ROW><ROW><id>5760432</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>5760562</id><snippet>libraries=["rt"]
</snippet></ROW><ROW><id>5760595</id><snippet>{% if field.field == form.fields.comment %}
</snippet></ROW><ROW><id>5760667</id><snippet>suds</snippet></ROW><ROW><id>5760667</id><snippet>#!/usr/bin/env python
from suds.xsd.doctor import Import, ImportDoctor
from suds.client import Client

# enable logging to see transmitted XML
import logging
logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)

# fix broken wsdl
# add &lt;s:import namespace="http://www.w3.org/2001/XMLSchema"/&gt; to the wsdl
imp = Import('http://www.w3.org/2001/XMLSchema',
             location='http://www.w3.org/2001/XMLSchema.xsd')
imp.filter.add('http://tempuri.org/')
wsdl_url = 'http://204.9.76.243/nuCast.DataFeedService/Service1.asmx?WSDL'
client = Client(wsdl_url, doctor=ImportDoctor(imp))

# make request
arrayofstring = client.factory.create('ArrayOfString')
arrayofstring.string = [1,2]
print client.service.CalculateWeb1D(1073757, arrayofstring, 99).string
</snippet></ROW><ROW><id>5760667</id><snippet>DEBUG:suds.client:sending to (
   http://204.9.76.243/nuCast.DataFeedService/Service1.asmx)
message:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://tempuri.org/"
   xmlns:ns1="http://schemas.xmlsoap.org/soap/envelope/"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;ns1:Body&gt;
      &lt;ns0:CalculateWeb1D&gt;
         &lt;ns0:HCID&gt;1073757&lt;/ns0:HCID&gt;
         &lt;ns0:jaggedobjDataMICRO&gt;
            &lt;ns0:string&gt;1&lt;/ns0:string&gt;
            &lt;ns0:string&gt;2&lt;/ns0:string&gt;
         &lt;/ns0:jaggedobjDataMICRO&gt;
         &lt;ns0:numeratorID&gt;99&lt;/ns0:numeratorID&gt;
      &lt;/ns0:CalculateWeb1D&gt;
   &lt;/ns1:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
DEBUG:suds.client:headers = {
  'SOAPAction': u'"http://tempuri.org/CalculateWeb1D"',
  'Content-Type': 'text/xml; charset=utf-8'}
</snippet></ROW><ROW><id>5760667</id><snippet>DEBUG:suds.client:http succeeded:
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;soap:Body&gt;
    &lt;CalculateWeb1DResponse xmlns="http://tempuri.org/"&gt;
      &lt;CalculateWeb1DResult&gt;
        &lt;string&gt;1&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
      &lt;/CalculateWeb1DResult&gt;
    &lt;/CalculateWeb1DResponse&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
[1, 2]
</snippet></ROW><ROW><id>5760796</id><snippet>class StartSub2(QtGui.QDialog, Ui_Dialog):
    def __init__(self,parent=None):
        QtGui.QDialog.__init__(self,parent)
        self.setupUi(self)
</snippet></ROW><ROW><id>5760796</id><snippet>getValues</snippet></ROW><ROW><id>5760796</id><snippet>StartSub2</snippet></ROW><ROW><id>5760796</id><snippet>def getValues(self):
    return somethingUseful
</snippet></ROW><ROW><id>5760796</id><snippet>dlg = StartSub2()
if dlg.exec_():
    values = dlg.getValues()
    # Do stuff with values
</snippet></ROW><ROW><id>5760844</id><snippet>arraySorter</snippet></ROW><ROW><id>5760844</id><snippet>findLongestWord</snippet></ROW><ROW><id>5760844</id><snippet>getSentence</snippet></ROW><ROW><id>5760844</id><snippet>appending</snippet></ROW><ROW><id>5760844</id><snippet>sentenceAppender</snippet></ROW><ROW><id>5760911</id><snippet>&gt;&gt;&gt; a1 = numpy.ones((3, 3))
&gt;&gt;&gt; a2 = numpy.ones((12, 12))
&gt;&gt;&gt; a2[:3,:3] += a1
&gt;&gt;&gt; a2
array([[ 2.,  2.,  2.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 2.,  2.,  2.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 2.,  2.,  2.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>5760911</id><snippet>&gt;&gt;&gt; a2[slice(None, a1.shape[0]), slice(None, a1.shape[1])]
array([[ 2.,  2.,  2.],
       [ 2.,  2.,  2.],
       [ 2.,  2.,  2.]])
</snippet></ROW><ROW><id>5761000</id><snippet>&gt;&gt;&gt; unicodedata.name(u"\xfc")
'LATIN SMALL LETTER U WITH DIAERESIS'
</snippet></ROW><ROW><id>5761000</id><snippet>&gt;&gt;&gt; print u'Gl\xfcck'
Glück
</snippet></ROW><ROW><id>5761039</id><snippet>/Library/Frameworks/Python.framework/Versions/3.2
</snippet></ROW><ROW><id>5761039</id><snippet>bin</snippet></ROW><ROW><id>5761039</id><snippet>lib</snippet></ROW><ROW><id>5761039</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7</snippet></ROW><ROW><id>5761039</id><snippet>3.2</snippet></ROW><ROW><id>5761039</id><snippet>IDLE.app</snippet></ROW><ROW><id>5761039</id><snippet>/Applications/Python m.n</snippet></ROW><ROW><id>5761039</id><snippet>/System/Library/Frameworks/Python.framework/Versions/
</snippet></ROW><ROW><id>5761039</id><snippet>PATH</snippet></ROW><ROW><id>5761039</id><snippet>bin</snippet></ROW><ROW><id>5761039</id><snippet>python3</snippet></ROW><ROW><id>5761039</id><snippet>python</snippet></ROW><ROW><id>5761039</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>5761039</id><snippet>bin</snippet></ROW><ROW><id>5761039</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>5761039</id><snippet>configure.in</snippet></ROW><ROW><id>5761039</id><snippet>Mac/BuildInstaller</snippet></ROW><ROW><id>5761042</id><snippet>self.ignore_dir_extensions = ['xcodeproj']

item = extension.split('/')[0]

print "String: " + repr(item)

if item in self.ignore_dir_extensions:
    print "Available: " + repr(item)
</snippet></ROW><ROW><id>5761042</id><snippet>item</snippet></ROW><ROW><id>5761042</id><snippet>repr()</snippet></ROW><ROW><id>5761042</id><snippet>repr()</snippet></ROW><ROW><id>5761042</id><snippet>&gt;&gt;&gt; repr("xcodeproj")
"'xcodeproj'"
&gt;&gt;&gt; print repr("xcodeproj")
'xcodeproj'
&gt;&gt;&gt; print "xcodeproj"
xcodeproj
</snippet></ROW><ROW><id>5761072</id><snippet>movie = Movie
</snippet></ROW><ROW><id>5761072</id><snippet>movie = Movie()
</snippet></ROW><ROW><id>5761072</id><snippet>Movie</snippet></ROW><ROW><id>5761072</id><snippet>Movie()</snippet></ROW><ROW><id>5761072</id><snippet>Movie</snippet></ROW><ROW><id>5761177</id><snippet>import re
import xml.sax.saxutils

def anchor_from_email_address_match(match):
    address = match.group(0)
    return "&lt;a href=%s&gt;%s&lt;/a&gt;" % (
        xml.sax.saxutils.quoteattr("mailto:" + address),
        xml.sax.saxutils.escape(address))

def replace_email_addresses_with_anchors(text):
    return re.sub("\w+@(?:\w|\.)+", anchor_from_email_address_match, text)

print replace_email_addresses_with_anchors(
    "An address: bob@example.com, and another: joe@example.com")
</snippet></ROW><ROW><id>5761421</id><snippet>notify()</snippet></ROW><ROW><id>5761455</id><snippet>select((sys.stdin,),(),())</snippet></ROW><ROW><id>5761455</id><snippet>select()</snippet></ROW><ROW><id>5761455</id><snippet>Popen</snippet></ROW><ROW><id>5761473</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>5761473</id><snippet>request.read()</snippet></ROW><ROW><id>5761473</id><snippet>HttpRequest</snippet></ROW><ROW><id>5761473</id><snippet>MultiPartParser</snippet></ROW><ROW><id>5761473</id><snippet>request.upload_handlers</snippet></ROW><ROW><id>5761473</id><snippet>MemoryFileUploadHandler</snippet></ROW><ROW><id>5761473</id><snippet>TemporaryFileUploadHandler</snippet></ROW><ROW><id>5761473</id><snippet>HttpRequest</snippet></ROW><ROW><id>5761473</id><snippet>MultiPartParser</snippet></ROW><ROW><id>5761473</id><snippet>Content-Disposition</snippet></ROW><ROW><id>5761473</id><snippet>handler.new_file</snippet></ROW><ROW><id>5761473</id><snippet>request.read()</snippet></ROW><ROW><id>5761473</id><snippet>handler.receive_data_chunk()</snippet></ROW><ROW><id>5761473</id><snippet>handler.file_complete()</snippet></ROW><ROW><id>5761473</id><snippet>upload_handlers = request.upload_handlers
content_type   = str(request.META.get('CONTENT_TYPE', ""))
content_length = int(request.META.get('CONTENT_LENGTH', 0))

if content_type == "":
    return HttpResponse(status=400)
if content_length == 0:
    # both returned 0
    return HttpResponse(status=400)

content_type = content_type.split(";")[0].strip()
try:
    charset = content_type.split(";")[1].strip()
except IndexError:
    charset = ""

# we can get the file name via the path, we don't actually
file_name = path.split("/")[-1:][0]
field_name = file_name
</snippet></ROW><ROW><id>5761473</id><snippet>image/jpeg; charset=binary</snippet></ROW><ROW><id>5761473</id><snippet>Content-Type</snippet></ROW><ROW><id>5761473</id><snippet>field_name</snippet></ROW><ROW><id>5761473</id><snippet>MemoryFileUploadHandler</snippet></ROW><ROW><id>5761473</id><snippet>TemporaryFileUploadHandler</snippet></ROW><ROW><id>5761473</id><snippet>MemoryFileUploadHandler</snippet></ROW><ROW><id>5761473</id><snippet>new_file</snippet></ROW><ROW><id>5761473</id><snippet>counters</snippet></ROW><ROW><id>5761473</id><snippet>counters = [0]*len(upload_handlers)

for handler in upload_handlers:
    result = handler.handle_raw_input("",request.META,content_length,"","")

for handler in upload_handlers:

    try:
        handler.new_file(field_name, file_name, 
                         content_type, content_length, charset)
    except StopFutureHandlers:
        break

for i, handler in enumerate(upload_handlers):
    while True:
        chunk = request.read(handler.chunk_size)
        if chunk:

            handler.receive_data_chunk(chunk, counters[i])
            counters[i] += len(chunk)
        else:
            # no chunk
            break

for i, handler in enumerate(upload_handlers):
    file_obj = handler.file_complete(counters[i])
    if not file_obj:
        # some indication this didn't work?
        return HttpResponse(status=500) 
    else:
        # handle file obj!
</snippet></ROW><ROW><id>5761530</id><snippet>popen</snippet></ROW><ROW><id>5761530</id><snippet>ulimit</snippet></ROW><ROW><id>5761530</id><snippet>ps</snippet></ROW><ROW><id>5761530</id><snippet>top</snippet></ROW><ROW><id>5761613</id><snippet>results = {}
start = 0
startColumn = ""
while True:
    # Fetch blocks of size 500

   buffer = get(key, column_start=startColumn, column_finish="", column_count=100)
   # iterate returned values. 
   # set startColumn == previous column_finish. 
</snippet></ROW><ROW><id>5761901</id><snippet>ACLAuthorizationPolicy</snippet></ROW><ROW><id>5761901</id><snippet>Foo</snippet></ROW><ROW><id>5761901</id><snippet>Bar</snippet></ROW><ROW><id>5761901</id><snippet>/foos/{obj}
/bars/{obj}
</snippet></ROW><ROW><id>5761901</id><snippet>__acl__</snippet></ROW><ROW><id>5761901</id><snippet>root                       (Root)
|- foos                    (FooContainer)
|  `- {obj}                (Foo)
`- bars                    (BarContainer)
   `- {obj}                (Bar)
</snippet></ROW><ROW><id>5761901</id><snippet>class Root(dict):
    # this is the root factory, you can set an __acl__ here for all resources
    __acl__ = [
        (Allow, 'admin', ALL_PERMISSIONS),
    ]
    def __init__(self, request):
        self.request = request
        self['foos'] = FooContainer(self, 'foos')
        self['bars'] = BarContainer(self, 'bars')

class FooContainer(object):
    # set ACL here for *all* objects of type Foo
    __acl__ = [
    ]

    def __init__(self, parent, name):
        self.__parent__ = parent
        self.__name__ = name

    def __getitem__(self, key):
        # get a database connection
        s = DBSession()
        obj = s.query(Foo).filter_by(id=key).scalar()
        if obj is None:
            raise KeyError
        obj.__parent__ = self
        obj.__name__ = key
        return obj

class Foo(object):
    # this __acl__ is computed dynamically based on the specific object
    @property
    def __acl__(self):
        acls = [(Allow, 'u:%d' % o.id, 'view') for o in self.owners]
        return acls

    owners = relation('FooOwner')

class Bar(object):
    # allow any authenticated user to view Bar objects
    __acl__ = [
        (Allow, Authenticated, 'view')
    ]
</snippet></ROW><ROW><id>5761901</id><snippet>config = Configurator()
config.add_route('item_options', '/item/{item}/some_options',
                 # tell pyramid where in the resource tree to go for this url
                 traverse='/foos/{item}')
</snippet></ROW><ROW><id>5761901</id><snippet>config.add_view(route_name='item_options', view='.views.options_view',
                permission='view', renderer='item_options.mako')
</snippet></ROW><ROW><id>5761901</id><snippet>def options_view(request):
    foo = request.context
    return {
        'foo': foo,
    }
</snippet></ROW><ROW><id>5761901</id><snippet>ACLAuthorizationPolicy</snippet></ROW><ROW><id>5761901</id><snippet>__parent__</snippet></ROW><ROW><id>5761901</id><snippet>DENY_ALL</snippet></ROW><ROW><id>5761997</id><snippet>a = np.arange(100)
condition = (a % 5 == 0) &amp; (a % 7 == 0)
b = a[condition]
index = np.argmax(b)
# The following should do what you want
a[condition][index]
</snippet></ROW><ROW><id>5761997</id><snippet>a = np.arange(100)
b_indices = np.where(a % 5 == 0)
b = a[b_indices]
index = np.argmax(b)
# Get the value of 'a' corresponding to 'index'
a[b_indices][index]
</snippet></ROW><ROW><id>5762333</id><snippet>def main():
    while True:
        all_files = getFiles(LOC_DIR)
        files = []
        for f in all_files:
            if checkExt(f):
                files.append(f)
        if len(files) == 1:
            printLog('&lt;&lt;&lt; Found %s matching file &gt;&gt;&gt;' % len(files))
        elif len(files) &gt; 1:
            printLog('&lt;&lt;&lt; Found %s matching files &gt;&gt;&gt;' % len(files))
        for f in files:
            if checkSize(f):
                rsyncFile(f)
        printLog('No files found.  Checking again in %s seconds' % RUN_INT)
        time.sleep(RUN_INT)
        printLog('Checking for files')

if __name__ == "__main__":    
    main()
</snippet></ROW><ROW><id>5762606</id><snippet>numpy.polyfit(x, y, deg, rcond=None, full=False)¶
Least squares polynomial fit.

Fit a polynomial p(x) = p[0] * x**deg + ... + p[deg] of degree deg to points (x, y).
Returns a vector of coefficients p that minimises the squared error.
</snippet></ROW><ROW><id>5762662</id><snippet>def copyf(dictlist, key, valuelist):
      return [dictio for dictio in dictlist if dictio[key] in valuelist]
</snippet></ROW><ROW><id>5762883</id><snippet>types = ('Blue', 'Polka', 'Red', 'Stripe', 'Yellow', 'Purple', 'Pink', 'Orange', 'Crazy', 'Plain')
for t in types:
    setattr(self, '%sEgg' % t, PhotoImage(file='assets/%segg.gif' % t.lower()))
</snippet></ROW><ROW><id>5762951</id><snippet>totPrimes = int(totPrimes)
while count &lt; totPrimes:
     ..................
</snippet></ROW><ROW><id>5763152</id><snippet>list.extend</snippet></ROW><ROW><id>5763152</id><snippet>+</snippet></ROW><ROW><id>5763152</id><snippet>def fib(a,b,n):
    data = []
    f = a+b
    if (f &gt; n):
        return data
    data.append(f)
    data.extend(fib(b,f,n))
    return data
</snippet></ROW><ROW><id>5763152</id><snippet>def fibgen(a, b):
    while True:
        a, b = b, a + b
        yield b
</snippet></ROW><ROW><id>5763152</id><snippet>fibgen()</snippet></ROW><ROW><id>5763152</id><snippet>.next()</snippet></ROW><ROW><id>5763373</id><snippet>input_handler</snippet></ROW><ROW><id>5763373</id><snippet>%run myfile.py</snippet></ROW><ROW><id>5763373</id><snippet>echo_handler</snippet></ROW><ROW><id>5763373</id><snippet>man RlwrapFilter</snippet></ROW><ROW><id>5763373</id><snippet>IPython.hooks.pre_runcode_hook</snippet></ROW><ROW><id>5763373</id><snippet>import os
import IPython
ip = IPython.ipapi.get()

def runMyFile(self):
    ip.magic('%run myFile.py')
    raise IPython.ipapi.TryNext()

ip.set_hook('pre_runcode_hook', runMyFile)
</snippet></ROW><ROW><id>5763518</id><snippet>app.yaml</snippet></ROW><ROW><id>5763518</id><snippet>- url: /user/\d+
  script: script.py
</snippet></ROW><ROW><id>5763518</id><snippet>script.py</snippet></ROW><ROW><id>5763518</id><snippet>class GetUser(webapp.RequestHandler):
    def get(self, user_id):
        logging.info('(GET) Webpage is opened in the browser')
        self.response.out.write(user_id)
        # and maybe you would later do something like this:
        #user_id = int(user_id)
        #user = User.get_by_id(user_id)

url_map = [('/user/(\d+)', GetUser),]
application = webapp.WSGIApplication(url_map, debug=True) # False after testing

def main():
    run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5763647</id><snippet>href</snippet></ROW><ROW><id>5763647</id><snippet>else: pass</snippet></ROW><ROW><id>5763647</id><snippet>from BeautifulSoup import BeautifulSoup
import re

# Assuming that html is your input as a string:
soup = BeautifulSoup(html)

all_contacts = []

def mailto_link(e):
    '''Return the email address if the element is is a mailto link,
    otherwise return None'''
    if e.name != 'a':
        return None
    for key, value in e.attrs:
        if key == 'href':
            m = re.search('mailto:(.*)',value)
            if m:
                return m.group(1)
    return None

for ul in soup.findAll('ul'):
    contact = {}
    for li in soup.findAll('li'):
        s = li.find('span')
        if not (s and s.string):
            continue
        if s.string == 'Email:':
            a = li.find(mailto_link)
            if a:
                contact['email'] = mailto_link(a)
        elif s.string == 'Website:':
            a = li.find('a')
            if a:
                contact['website'] = a['href']
        elif s.string == 'Phone:':
            contact['phone'] = unicode(s.nextSibling).strip()
    all_contacts.append(contact)

print all_contacts
</snippet></ROW><ROW><id>5763647</id><snippet>[{'website': u'http://www.abcl.com', 'phone': u'(123)456-789', 'email': u'abc@gmail.com'}]
</snippet></ROW><ROW><id>5763859</id><snippet>/usr/local/bin/python3.2 "/root/Advantage/main.py" &gt;&gt; /startuplogfile 2&gt;&amp;1
</snippet></ROW><ROW><id>5763996</id><snippet>&gt;&gt;&gt; a=["10.000","20.000","25.000"]
&gt;&gt;&gt; [ i.replace(".","") for i in a ]
['10000', '20000', '25000']
</snippet></ROW><ROW><id>5764439</id><snippet>&lt;![CDATA[</snippet></ROW><ROW><id>5764439</id><snippet>]]&gt;</snippet></ROW><ROW><id>5764455</id><snippet>chmod +x</snippet></ROW><ROW><id>5764455</id><snippet>chmod -R +rx</snippet></ROW><ROW><id>5764460</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5764460</id><snippet>django.contrib</snippet></ROW><ROW><id>5764460</id><snippet>ran 188 tests</snippet></ROW><ROW><id>5764807</id><snippet>from itertools import tee, izip
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

for v, w in pairwise(a):
    ...
</snippet></ROW><ROW><id>5764842</id><snippet>/usr/local/python25/bin</snippet></ROW><ROW><id>5764842</id><snippet>sh setuptools-0.6c11-py2.5.egg</snippet></ROW><ROW><id>5764842</id><snippet>easy_install pip</snippet></ROW><ROW><id>5764842</id><snippet>virtualenv</snippet></ROW><ROW><id>5764842</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>5764842</id><snippet>pip install v...</snippet></ROW><ROW><id>5764842</id><snippet>export WORKON_HOME = $HOME/.virtualenvs</snippet></ROW><ROW><id>5764842</id><snippet>mkvirtualenv foobar</snippet></ROW><ROW><id>5764842</id><snippet>workon foobar</snippet></ROW><ROW><id>5764842</id><snippet>pip install blah</snippet></ROW><ROW><id>5764842</id><snippet>jiewmeng@JM:/usr/local/python25/bin$ ./python virtualenv /works/tmp/test
</snippet></ROW><ROW><id>5764842</id><snippet>ls</snippet></ROW><ROW><id>5764842</id><snippet>virtualenv</snippet></ROW><ROW><id>5764842</id><snippet>jiewmeng@JM:/usr/local/python25/bin$ virtualenv /works/tmp/test
</snippet></ROW><ROW><id>5764842</id><snippet>virtualenv</snippet></ROW><ROW><id>5764842</id><snippet>which virtualenv</snippet></ROW><ROW><id>5764842</id><snippet>virtualenv</snippet></ROW><ROW><id>5764871</id><snippet>mydict = {'Jack': {'age': 15, 'location': 'UK'}, 
          'Jill': {'age': 23, 'location': 'US'}}

datalist = []

for name in mydict:
  data = mydict[name]
  data['name'] = name
  datalist.append(data)
</snippet></ROW><ROW><id>5764871</id><snippet>datalist</snippet></ROW><ROW><id>5764871</id><snippet>mydict</snippet></ROW><ROW><id>5764955</id><snippet>@decorator
def foo(): pass
</snippet></ROW><ROW><id>5764955</id><snippet>def foo(): pass
foo = decorator(foo)
</snippet></ROW><ROW><id>5764955</id><snippet>def decorator(f):
    def g(*args, **kwargs):
        return f(*args, **kwargs)
    return g
</snippet></ROW><ROW><id>5764955</id><snippet>def argument_decorator(will_I_call_f):
    def decorator(f):
        def g(*args, **kwargs):
            if will_I_call_f: return f(*args, **kwargs)
        return g
    return decorator
</snippet></ROW><ROW><id>5764955</id><snippet>decorator = argument_decorator(True)
@decorator
def foo(): pass
</snippet></ROW><ROW><id>5764955</id><snippet>@argument_decorator(True)
def foo(): pass
</snippet></ROW><ROW><id>5764955</id><snippet>def foo(): pass
foo = argument_decorator(True)(foo)
</snippet></ROW><ROW><id>5765009</id><snippet>spe.*al</snippet></ROW><ROW><id>5765009</id><snippet>import re
import lxml.html

NS = 'http://exslt.org/regular-expressions'
tree = lxml.html.fromstring(DOC)

# select sibling table nodes after matching node
path = "//*[re:test(text(), 'spe.*al')]/following-sibling::table"
print tree.xpath(path, namespaces={'re': NS})

# select all sibling nodes after matching node
path = "//*[re:test(text(), 'spe.*al')]/following-sibling::*"
print tree.xpath(path, namespaces={'re': NS})
</snippet></ROW><ROW><id>5765009</id><snippet>[&lt;Element table at 7fe21acd3f58&gt;]
[&lt;Element p at 7f76ac2c3f58&gt;, &lt;Element table at 7f76ac2e6050&gt;]
</snippet></ROW><ROW><id>5765395</id><snippet>import re
from collections import OrderedDict

ch = '&gt;AB0012xxxxaaaaaaaaaaaa'\
     '&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb'\
     '&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa'\
     '&gt;QD1547zzzzzzzzjjjiii'\
     '&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa'


print ch,'\n'

regx = re.compile('((?&lt;=&gt;)(.{7})[^&gt;]*(?:aaabbb|bbbaaa)[^&gt;]*?)(?=&gt;|\Z)')
rag = re.compile('aaabbb|bbbaaa')

dic = OrderedDict()


# Finding the result
for mat in regx.finditer(ch):
    chunk,head = mat.groups()
    headstart = mat.start()
    dic[(headstart,head)] = [(headstart+six.start(),six.start(),six.group())
                             for six in rag.finditer(chunk)]


# Diplaying the result
for (headstart,head),li in dic.iteritems():
    print '{:&gt;10} {}'.format(headstart,head)
    for x in li:
        print '{0[0]:&gt;10} {0[1]:&gt;6} {0[2]}'.format(x)
</snippet></ROW><ROW><id>5765395</id><snippet>&gt;AB0012xxxxaaaaaaaaaaaa&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa&gt;QD1547zzzzzzzzjjjiii&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa 

        24 CD00192
        31      8 aaabbb
        41     18 bbbaaa
        52     29 bbbaaa
        62     39 aaabbb
        69 ZP01990
        95     27 aaabbb
       136 SE45789
       148     13 aaabbb
       172     37 bbbaaa
</snippet></ROW><ROW><id>5765395</id><snippet>import re
from itertools import imap
from collections import OrderedDict

ch = '&gt;AB0012xxxxaaaaaaaaaaaa'\
     '&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb'\
     '&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa'\
     '&gt;QD1547zzzzzzzzjjjiii'\
     '&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa'


print ch,'\n'

regx = re.compile('((?&lt;=&gt;)(.{7})[^&gt;]*(?:aaabbb|bbbaaa)[^&gt;]*?)(?=&gt;|\Z)')
rag = re.compile('aaabbb|bbbaaa')

gen = ((mat.groups(),mat.start()) for mat in regx.finditer(ch)) 


dic = OrderedDict(((headstart,head),
                   [(headstart+six.start(),six.start(),six.group())
                    for six in rag.finditer(chunk)])
                  for (chunk,head),headstart in gen)


print '\n'.join('{:&gt;10} {}'.format(headstart,head)+'\n'+\
                '\n'.join(imap('{0[0]:&gt;10} {0[1]:&gt;6} {0[2]}'.format,li))
                for (headstart,head),li in dic.iteritems())
</snippet></ROW><ROW><id>5765395</id><snippet>import re
from collections import OrderedDict
from itertools import imap

ch = '&gt;AB0012xxxxaaaaaaaaaaaa'\
     '&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb'\
     '&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa'\
     '&gt;QD1547zzzzzzzzjjjiii'\
     '&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa'


print ch,'\n'


regx = re.compile('((?&lt;=&gt;).{7})|(aaabbb|bbbaaa)')

def collect(ch):
    li = []
    dic = OrderedDict()

    gen = ( (x.start(),x.group(1),x.group(2)) for x in regx.finditer(ch))
    for st,g1,g2 in gen:
        if g1:
            if li:
                dic[(stprec,g1prec)] = li
            li,stprec,g1prec = [],st,g1
        elif g2:
            li.append((st,g2))
    if li:
        dic[(stprec,g1prec)] = li
    return dic


dic = collect(ch)

print '\n'.join('{:&gt;10} {}'.format(headstart,head)+'\n'+\
                '\n'.join(imap('{0[0]:&gt;10}   {0[1]}'.format,li))
                for (headstart,head),li in dic.iteritems())
</snippet></ROW><ROW><id>5765395</id><snippet>&gt;AB0012xxxxaaaaaaaaaaaa&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa&gt;QD1547zzzzzzzzjjjiii&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa 

        24 CD00192
        31   aaabbb
        41   bbbaaa
        52   bbbaaa
        62   aaabbb
        69 ZP01990
        95   aaabbb
       136 SE45789
       148   aaabbb
       172   bbbaaa
</snippet></ROW><ROW><id>5765395</id><snippet>import re

ch = '&gt;AB0012xxxxaaaaaaaaaaaa'\
     '&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb'\
     '&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa'\
     '&gt;QD1547zzzzzzzzjjjiii'\
     '&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa'


print ch,'\n'

regx = re.compile('(&gt;.{7})|(aaabbb|bbbaaa)')

matches = []
for mat in regx.finditer(ch):
    g1,g2= mat.groups()
    if g1:
        head = g1
    else:
        matches.append((head,g2))

print matches
</snippet></ROW><ROW><id>5765395</id><snippet>&gt;AB0012xxxxaaaaaaaaaaaa&gt;CD00192aaabbbllyybbbaaayyyuubbbaaaggggaaabbb&gt;ZP0199000012mmmm3m4mmmxxxxaaabbbaaaaaaaaaaaaa&gt;QD1547zzzzzzzzjjjiii&gt;SE457895ffffaaabbbbbbbgjhgjgjhgjhgbbbbbaaa 

[('&gt;CD00192', 'aaabbb'), ('&gt;CD00192', 'bbbaaa'), ('&gt;CD00192', 'bbbaaa'), ('&gt;CD00192', 'aaabbb'), ('&gt;ZP01990', 'aaabbb'), ('&gt;SE45789', 'aaabbb'), ('&gt;SE45789', 'bbbaaa')]
</snippet></ROW><ROW><id>5765576</id><snippet>RSA.load_key_string</snippet></ROW><ROW><id>5765576</id><snippet>import base64
from M2Crypto import RSA

TEMPLATE = """
-----BEGIN RSA PRIVATE KEY-----
%s
-----END RSA PRIVATE KEY-----
"""
raw = open('key.der', 'rb').read()
data = TEMPLATE % base64.encodestring(raw).rstrip()
key = RSA.load_key_string(data)
print key
</snippet></ROW><ROW><id>5765576</id><snippet>&lt;M2Crypto.RSA.RSA instance at 0x10eb710&gt;
</snippet></ROW><ROW><id>5765594</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *
from PyQt4.QtNetwork import *

class XPrinter(QObject):

    def __init__(self):
        QObject.__init__(self)

    def print_page_info(self, ok):
        print ok

    def print_load_started(self):
        print 'started loading'

    def print_load_percent(self, percent):
        print percent


app = QApplication(sys.argv)

web = QWebView()
xprinter = XPrinter()
web.loadFinished.connect(xprinter.print_page_info)
web.loadStarted.connect(xprinter.print_load_started)
web.loadProgress.connect(xprinter.print_load_percent)

web.load(QUrl("http://www.gnu.org"))
web.setWindowState(Qt.WindowMaximized)
web.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>5765594</id><snippet>QObject.connect(web, SIGNAL("loadFinished(bool)"), xprinter.print_page_info)
QObject.connect(web, SIGNAL("loadStarted()"), xprinter.print_load_started)
QObject.connect(web, SIGNAL("loadProgress(int )"), xprinter.print_load_percent)
</snippet></ROW><ROW><id>5765861</id><snippet>shell=True</snippet></ROW><ROW><id>5765861</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>5766040</id><snippet>QObject::setTimer</snippet></ROW><ROW><id>5766040</id><snippet>QObject</snippet></ROW><ROW><id>5766040</id><snippet>int QObject::startTimer(int interval)
{
    Q_D(QObject);

    if (interval &lt; 0) {
        qWarning("QObject::startTimer: QTimer cannot have a negative interval");
        return 0;
    }

    d-&gt;pendTimer = true;                                // set timer flag

    if (!d-&gt;threadData-&gt;eventDispatcher) {
        qWarning("QObject::startTimer: QTimer can only be used with threads started with QThread");
        return 0;
    }
    return d-&gt;threadData-&gt;eventDispatcher-&gt;registerTimer(interval, this);
}
</snippet></ROW><ROW><id>5766040</id><snippet>pbar.setValue</snippet></ROW><ROW><id>5766040</id><snippet>startTimer</snippet></ROW><ROW><id>5766202</id><snippet>import numpy as np

import rpy2.robjects.numpy2ri
from rpy2.robjects.packages import importr

# Set up our R namespaces
R = rpy2.robjects.r
DTW = importr('dtw')

# Generate our data
idx = np.linspace(0, 2*np.pi, 100)
template = np.cos(idx)
query = np.sin(idx) + np.array(R.runif(100))/10

# Calculate the alignment vector and corresponding distance
alignment = R.dtw(query, template, keep=True)
dist = alignment.rx('distance')[0][0]

print(dist)
</snippet></ROW><ROW><id>5766210</id><snippet>    static PyMemberDef property_members[] = {
        {"fget", T_OBJECT, offsetof(propertyobject, prop_get), READONLY},
        {"fset", T_OBJECT, offsetof(propertyobject, prop_set), READONLY},
        {"fdel", T_OBJECT, offsetof(propertyobject, prop_del), READONLY},
        {"__doc__",  T_OBJECT, offsetof(propertyobject, prop_doc), READONLY},
        {0}
    };
</snippet></ROW><ROW><id>5766210</id><snippet>READONLY</snippet></ROW><ROW><id>5766210</id><snippet>0</snippet></ROW><ROW><id>5766210</id><snippet>fget, fset, ..</snippet></ROW><ROW><id>5766210</id><snippet>class Test(object):
    def __init__(self):
        self.flag = True
    prop = property(lambda self: self.flag)

obj = Test()
print obj.prop
Test.prop.fget = lambda self: not self.flag
print obj.prop
</snippet></ROW><ROW><id>5766210</id><snippet>True
False
</snippet></ROW><ROW><id>5766284</id><snippet>simplejson.dumps([dict(cow.__dict__) for cow in cows])</snippet></ROW><ROW><id>5766284</id><snippet>Cow</snippet></ROW><ROW><id>5766284</id><snippet>DateTimeField</snippet></ROW><ROW><id>5766284</id><snippet>unicode</snippet></ROW><ROW><id>5766293</id><snippet>?</snippet></ROW><ROW><id>5766293</id><snippet>args=[2,3]
sql="select * from sqlitetable where rowid in ({seq})".format(
    seq=','.join(['?']*len(args)))

cursor.execute(sql, args)
</snippet></ROW><ROW><id>5766334</id><snippet>l += [1]</snippet></ROW><ROW><id>5766334</id><snippet>l = l + [1]</snippet></ROW><ROW><id>5766334</id><snippet>l</snippet></ROW><ROW><id>5766334</id><snippet>f</snippet></ROW><ROW><id>5766334</id><snippet>global l</snippet></ROW><ROW><id>5766334</id><snippet>f</snippet></ROW><ROW><id>5766334</id><snippet>l</snippet></ROW><ROW><id>5766334</id><snippet>f</snippet></ROW><ROW><id>5766334</id><snippet>l += [1]</snippet></ROW><ROW><id>5766334</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>5766334</id><snippet>global l</snippet></ROW><ROW><id>5766334</id><snippet>nonlocal</snippet></ROW><ROW><id>5766502</id><snippet>self.ui.treeView.clicked.connect(self.ui.plainTextEdit.paste)
</snippet></ROW><ROW><id>5766502</id><snippet>paste</snippet></ROW><ROW><id>5766502</id><snippet>clicked</snippet></ROW><ROW><id>5766502</id><snippet>self.ui.treeView</snippet></ROW><ROW><id>5766502</id><snippet>self.ui.test()</snippet></ROW><ROW><id>5766502</id><snippet>()</snippet></ROW><ROW><id>5766502</id><snippet>test</snippet></ROW><ROW><id>5766502</id><snippet>data</snippet></ROW><ROW><id>5766502</id><snippet>QModelIndex</snippet></ROW><ROW><id>5766548</id><snippet>PyQt4</snippet></ROW><ROW><id>5766548</id><snippet>from PyQt4 import QtCore
from PyQt4 import QtGui
</snippet></ROW><ROW><id>5766548</id><snippet>QtNetwork</snippet></ROW><ROW><id>5766548</id><snippet>QtSql</snippet></ROW><ROW><id>5766548</id><snippet>lib/site-packages</snippet></ROW><ROW><id>5766683</id><snippet>while not curr_node.nextSibling().isNull():
     print curr_node, len(children)
     children.append(curr_node.nextSibling())
     curr_node = curr_node.nextSibling()
</snippet></ROW><ROW><id>5766809</id><snippet>#!usr/bin/env python

import random
import collections

# Candidates:
candidates = ['John', 'Max', 'Philip', 'Eric', 'Jane']

def simul_ballots(num_voters):
   """
   Returns the (random) ballots of num_voters voters.
   """

   ballots = []

   choice = candidates[:]

   for _ in range(num_voters):
      random.shuffle(choice)
      ballots.append(choice[:])  # Copy

   return ballots

def get_counts(ballots):
   """
   Returns the number of votes for each candidate placed first in the
   ballots.

   Candidates present in the ballots but found in any first ballot
   places are given a count of zero.
   """

   counts = dict()    
   for ballot in ballots:
      vote = ballot[0]
      if vote in counts:
         counts[vote] += 1
      else:
         counts[vote] = 1

   # Python 2.7+ replacement for the above code:
   # counts = collections.Counter(ballot[0] for ballot in ballots)

   candidates = set()
   for ballot in ballots:
      candidates.update(ballot)

   for not_represented in set(candidates)-set(counts):
      counts[not_represented] = 0

   return counts


def get_winners(ballots):
   """
   Returns the winners in the given ballots (lists of candidates), or
   [] if there is no winner.

   A winner is a candidate with 50 % or more of the votes, or a
   candidate with as many votes as all the other candidates.
   """

   counts = get_counts(ballots)

   max_count = max(counts.values())
   num_counts = sum(counts.values())

   potential_winners = [candidate for (candidate, count) in counts.items()
                        if count == max_count]

   if max_count &gt;= num_counts/2. or len(potential_winners) == len(counts):
      return potential_winners
   else:
      return []


def get_losers(ballots):
   """
   Returns the loser(s) of the ballots, i.e. the candidate(s) with the
   fewest voters.

   Returns [] if all candidates have the same number of votes.
   """

   counts = get_counts(ballots)

   min_count = min(counts.values())

   potential_losers = [candidate for (candidate, count) in counts.items()
                       if count == min_count]

   if len(potential_losers) == len(counts):
      return []
   else:
      return potential_losers

def remove_candidate(ballots, candidate):
   """
   Removes the given candidate from the ballots.
   """
   for ballot in ballots:
      ballot.remove(candidate)


if __name__ == '__main__':

   ballots = simul_ballots(20)

   while True:

      print "* Votes:"
      for ballot in ballots:
         print '-', ballot
      print "=&gt; Counts:", get_counts(ballots)

      winners = get_winners(ballots)
      if winners:
         break

      # The losers are removed:
      losers = get_losers(ballots)
      print '=&gt; Losers:', losers
      for loser in losers:
         remove_candidate(ballots, loser)

   print "Winners: ", winners
</snippet></ROW><ROW><id>5766809</id><snippet>* Votes:
- ['Max', 'John', 'Eric', 'Philip']
- ['Philip', 'Max', 'Eric', 'John']
- ['Eric', 'Philip', 'John', 'Max']
- ['Philip', 'John', 'Max', 'Eric']
- ['Eric', 'Max', 'Philip', 'John']
- ['Max', 'Philip', 'John', 'Eric']
- ['Max', 'John', 'Eric', 'Philip']
- ['Eric', 'Philip', 'Max', 'John']
- ['Max', 'Eric', 'Philip', 'John']
- ['Philip', 'Max', 'Eric', 'John']
- ['John', 'Eric', 'Max', 'Philip']
- ['Philip', 'Eric', 'Max', 'John']
- ['Max', 'Philip', 'John', 'Eric']
- ['Philip', 'Max', 'John', 'Eric']
- ['Philip', 'Eric', 'Max', 'John']
- ['John', 'Philip', 'Eric', 'Max']
- ['John', 'Max', 'Philip', 'Eric']
- ['Eric', 'Philip', 'John', 'Max']
- ['John', 'Eric', 'Philip', 'Max']
- ['Philip', 'John', 'Max', 'Eric']
=&gt; Counts: Counter({'Philip': 7, 'Max': 5, 'John': 4, 'Eric': 4})
=&gt; Losers: ['John', 'Eric']
* Votes:
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Philip', 'Max']
- ['Philip', 'Max']
- ['Max', 'Philip']
- ['Max', 'Philip']
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Philip', 'Max']
- ['Philip', 'Max']
- ['Max', 'Philip']
- ['Philip', 'Max']
- ['Philip', 'Max']
- ['Philip', 'Max']
=&gt; Counts: Counter({'Philip': 12, 'Max': 8})
Winners:  ['Philip']
</snippet></ROW><ROW><id>5766826</id><snippet>select()</snippet></ROW><ROW><id>5766826</id><snippet>select</snippet></ROW><ROW><id>5766851</id><snippet>for</snippet></ROW><ROW><id>5766851</id><snippet>import random
L = []
for x in range(5):
  l = range(5)
  random.shuffle(l)
  L.append(l)
</snippet></ROW><ROW><id>5766851</id><snippet>shuffled</snippet></ROW><ROW><id>5767324</id><snippet>@classmethod
def get_objects(cls, service, references, as_dict=False):
    """
    More efficient way to get multiple objects at once. Requires the service
    instance and a list or tuple of references.
    """
    vo_list = database.get_objects_from_references(references)
    items = list()
    for vo in vo_list:
        items.append(cls(service, vo.getRef(), vo))

    return items
</snippet></ROW><ROW><id>5767365</id><snippet>pip install cython</snippet></ROW><ROW><id>5767365</id><snippet>remove_inplace_senderle2()</snippet></ROW><ROW><id>5767365</id><snippet>delitems.pyx</snippet></ROW><ROW><id>5767365</id><snippet>#cython: boundscheck=False, wraparound=False
import cython

@cython.locals(end=cython.Py_ssize_t, i=cython.Py_ssize_t)
def remove_inplace_senderle2(L, keep):
    end = 0
    for i in range(len(L)):
        x = L[end] = L[i]
        if keep(x):
           end += 1

    del L[end:]
</snippet></ROW><ROW><id>5767365</id><snippet>for i in range(len(L))</snippet></ROW><ROW><id>5767365</id><snippet>for (i=0; i &lt; L_length; ++i)</snippet></ROW><ROW><id>5767365</id><snippet>keep()</snippet></ROW><ROW><id>5767365</id><snippet>L = filter(keep, L)</snippet></ROW><ROW><id>5767365</id><snippet>gcd()</snippet></ROW><ROW><id>5767402</id><snippet>if path[0] in endpoint1 and path[-1] in endpoint2 or \
   path[0] in endpoint2 and path[-1] in endpoint1:
</snippet></ROW><ROW><id>5767702</id><snippet>manage.py</snippet></ROW><ROW><id>5767702</id><snippet>dumpdata my_app</snippet></ROW><ROW><id>5767744</id><snippet>x = MyHandler()
print x.get() 
</snippet></ROW><ROW><id>5767744</id><snippet>print</snippet></ROW><ROW><id>5767744</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp import util


class MainHandler(webapp.RequestHandler):
    def get(self):
        self.response.out.write('Hello world!')


def main():
    application = webapp.WSGIApplication([('/', MainHandler)],
                                         debug=True)
    util.run_wsgi_app(application)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5767744</id><snippet>def get(self):
    name1 = self.request.get_all("q")
    name2 = self.request.get_all("input")
    self.response.out.write(name1 + ',' + name2)
</snippet></ROW><ROW><id>5767831</id><snippet>AttributeError</snippet></ROW><ROW><id>5767831</id><snippet>NavigableString</snippet></ROW><ROW><id>5767831</id><snippet>Tag</snippet></ROW><ROW><id>5767831</id><snippet>soup.a.b.c.findChildren()
#[&lt;d attr="x"&gt;
#&lt;e&gt;
#&lt;/e&gt;
#&lt;name&gt;
#&lt;/name&gt;
#&lt;/d&gt;, &lt;e&gt;
#&lt;/e&gt;, &lt;name&gt;
#&lt;/name&gt;]
</snippet></ROW><ROW><id>5767831</id><snippet>name</snippet></ROW><ROW><id>5767831</id><snippet>soup.a.b.c.d.findChildren('name')
#[&lt;name&gt;
#&lt;/name&gt;]
</snippet></ROW><ROW><id>5767831</id><snippet>from BeautifulSoup import BeautifulStoneSoup as bss
soup = bss(markup)
</snippet></ROW><ROW><id>5768000</id><snippet>'\x82'</snippet></ROW><ROW><id>5768000</id><snippet>&gt;&gt;&gt; s = '\x82'
&gt;&gt;&gt; len(s)
1
&gt;&gt;&gt; ord(s)
130
&gt;&gt;&gt; hex(ord(s))
'0x82'
&gt;&gt;&gt; print s
é # my sys.stdout.encoding is 'cp850'
&gt;&gt;&gt; print repr(s)
'\x82'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5768000</id><snippet>'x82'</snippet></ROW><ROW><id>5768000</id><snippet>@</snippet></ROW><ROW><id>5768000</id><snippet>&gt;</snippet></ROW><ROW><id>5768000</id><snippet>shift_jis</snippet></ROW><ROW><id>5768000</id><snippet>&gt;&gt;&gt; y = '\x82\xb1\x82\xea\x82\xa9\x82\xe7\x8c\xa9\x82\xa6\x82\xe9\x82\xbe\x82\xeb\x82\xa4'
&gt;&gt;&gt; print y.decode('shift_jis')
これから見えるだろう
</snippet></ROW><ROW><id>5768000</id><snippet>x
repr(x)
repr(x).replace('\\', '')
repr(x).replace('\\x', '') # if \ is noise, so is x
x.decode(whatever_the_encoding_is)
</snippet></ROW><ROW><id>5768000</id><snippet>!=</snippet></ROW><ROW><id>5768000</id><snippet>repr(x)</snippet></ROW><ROW><id>5768000</id><snippet>x</snippet></ROW><ROW><id>5768000</id><snippet>distance(s1, s2)</snippet></ROW><ROW><id>5768000</id><snippet>distance(s1, s2) / float(max(len(s1), len(s2)))</snippet></ROW><ROW><id>5768062</id><snippet>import chardet

text = '&lt;2011315123.04C6DACE618A7C2763810@\x82\xb1\x82\xea\x82\xa9\x82\xe7' + \
    '\x8c\xa9\x82\xa6\x82\xe9\x82\xbe\x82\xeb\x82\xa4&gt;'
cset = chardet.detect(text)
print cset
encoding = cset['encoding']
print encoding, text.decode(encoding)
</snippet></ROW><ROW><id>5768062</id><snippet>{'confidence': 1, 'encoding': 'SHIFT_JIS'}
SHIFT_JIS &lt;2011315123.04C6DACE618A7C2763810@これから見えるだろう&gt;
</snippet></ROW><ROW><id>5768077</id><snippet>sorted(..., key=operator.attrgetter(column))
</snippet></ROW><ROW><id>5768198</id><snippet>-o BatchMode=yes</snippet></ROW><ROW><id>5768198</id><snippet>ssh-test-thingy</snippet></ROW><ROW><id>5768198</id><snippet>exec ssh -o BatchMode=yes "$@" true
</snippet></ROW><ROW><id>5768198</id><snippet>true</snippet></ROW><ROW><id>5768278</id><snippet>from hg import hgenviron</snippet></ROW><ROW><id>5768278</id><snippet>/etc/profile.d</snippet></ROW><ROW><id>5768278</id><snippet>/etc/profile</snippet></ROW><ROW><id>5768278</id><snippet># System wide environment and startup programs, for login setup
# Functions and aliases go in /etc/bashrc

# It's NOT good idea to change this file unless you know what you
# are doing. Much better way is to create custom.sh shell script in
# /etc/profile.d/ to make custom changes to environment. This will
# prevent need for merging in future updates.
</snippet></ROW><ROW><id>5768278</id><snippet>/etc/profile</snippet></ROW><ROW><id>5768278</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>5768278</id><snippet>~/.bashrc</snippet></ROW><ROW><id>5768278</id><snippet>PYTHONPATH=/home/tmp:$PYTHONPATH
export PYTHONPATH
</snippet></ROW><ROW><id>5768603</id><snippet>original_as_array = list(original)
</snippet></ROW><ROW><id>5768626</id><snippet>Combine</snippet></ROW><ROW><id>5768626</id><snippet>grammar = Combine(Literal("from") + Literal(":") + Word(alphas))
</snippet></ROW><ROW><id>5768626</id><snippet>&gt;&gt;&gt; grammar = pyparsing.Combine(Literal("from") + Literal(":") + Word(pyparsing.alphas))
&gt;&gt;&gt; grammar.parseString('from : mary')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/pymodules/python2.6/pyparsing.py", line 1076, in parseString
    raise exc
pyparsing.ParseException: Expected ":" (at char 4), (line:1, col:5)
&gt;&gt;&gt; grammar.parseString('from:mary')
(['from:mary'], {})
</snippet></ROW><ROW><id>5768666</id><snippet>reset</snippet></ROW><ROW><id>5768692</id><snippet>compile</snippet></ROW><ROW><id>5768692</id><snippet>&gt;&gt;&gt; compile('sum([1, 2, 3])', '', 'single')
&lt;code object &lt;module&gt; at 0x19ad730, file "", line 1&gt;
&gt;&gt;&gt; exec compile('sum([1, 2, 3])', '', 'single')
6
&gt;&gt;&gt; compile('print "Hello world"', '', 'exec')
&lt;code object &lt;module&gt; at 0x19add30, file "", line 1&gt;
&gt;&gt;&gt; exec compile('print "Hello world"', '', 'exec')
Hello world
</snippet></ROW><ROW><id>5768692</id><snippet>__code__</snippet></ROW><ROW><id>5768692</id><snippet>func_code</snippet></ROW><ROW><id>5768692</id><snippet>&gt;&gt;&gt; def f(s): print s
... 
&gt;&gt;&gt; f.__code__
&lt;code object f at 0x19aa1b0, file "&lt;stdin&gt;", line 1&gt;
</snippet></ROW><ROW><id>5768747</id><snippet>        1     2     3     4     5     6     7     8     9     10     11     12     13     14     15
1             |--------------------------------------X---------|
2                   |--------------------------------X--------------------------------------------|
3                         |--------------------------X---|
4                                                  |-X-------------------------------------|
5                                           |--------X------------------------------|
6                               |--------------------X----------|
7                                                                     |---------------------------|

             +1    +1     +1   +1           +1     +1    -1    -2     +1           -1     -1     -2
              1     2     3     4           5       6    5      3     4             3      2      0
                                                     ^^^^
</snippet></ROW><ROW><id>5768747</id><snippet>1: 2 - 10
2: 3 - 15
3: 4 - 9
4: 8 - 14
5: 7 - 13
6: 5 - 10
7: 11 - 15
</snippet></ROW><ROW><id>5768747</id><snippet>[(2,+), (3,+), (4,+), (5,+), (7,+), (8,+), (9,-), (10,-), (10,-), (11,+), (13,-), (14,-), (15,-), (15,-)]
</snippet></ROW><ROW><id>5768747</id><snippet>intervals = [(2, 10), (3, 15), (4, 9), (8, 14), (7, 13), (5, 10), (11, 15)]
intqueue = sorted([(x[0], +1) for x in intervals] + [(x[1], -1) for x in intervals])
rsum = [(0,0)]
for x in intqueue: 
    rsum.append((x[0], rsum[-1][1] + x[1]))
busiest_start = max(rsum, key=lambda x: x[1])
# busiest_end = the next element in rsum after busiest_start 

# instead of using lambda, alternatively you can do:
#     def second_element(x):
#         return x[1]
#     busiest_start = max(rsum, key=second_element)
# or:
#     import operator
#     busiest_start = max(rsum, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>5768747</id><snippet>(n+n)*log(n+n)+n+n</snippet></ROW><ROW><id>5768747</id><snippet>O(n*log(n))</snippet></ROW><ROW><id>5769398</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>5769681</id><snippet>class UserMock(Mock):
    @property
    def shop(self):
        raise Shop.DoesNotExist()
</snippet></ROW><ROW><id>5769695</id><snippet>about</snippet></ROW><ROW><id>5769695</id><snippet>print about[0].title
</snippet></ROW><ROW><id>5769695</id><snippet>about = About.objects.get(id=1)
print about.title
</snippet></ROW><ROW><id>5769698</id><snippet>class MyClass(object):
    def __init__(self):
        self.trigger = False
        self._my_property = 0

    def set_my_property(self, value):
        if self.trigger:
            raise Exception("WHOOPS!")
        self._my_property = value
        # TODO: mark my_property so that if it gets set again, an assert
        # is triggered
        self.trigger = True

    def get_my_property(self):
        return self._my_property

    my_property = property(get_my_property, set_my_property, None)

c = MyClass()
c.set_my_property(4)

# any of these lines would cause an assertion
c.set_my_property(8)
c.my_property = 123
</snippet></ROW><ROW><id>5769706</id><snippet>a = A( 1, 2, lambda x,y: x + y)
b = A( 1, 2, lambda x,y: x * y)
</snippet></ROW><ROW><id>5769706</id><snippet>operator</snippet></ROW><ROW><id>5769784</id><snippet>http://graph.facebook.com/me/inbox/?access_token=XXX</snippet></ROW><ROW><id>5769784</id><snippet>http://graph.facebook.com/MESSAGE_ID?access_token=XXX</snippet></ROW><ROW><id>5769784</id><snippet>f = Facebook() 
res = f.get_object("me/inbox")
...
</snippet></ROW><ROW><id>5769849</id><snippet>CalculateWeb2DObjectArray()</snippet></ROW><ROW><id>5769849</id><snippet>CalculateWeb2DObjectArray()</snippet></ROW><ROW><id>5769849</id><snippet>print client
</snippet></ROW><ROW><id>5769849</id><snippet>CalculateWeb2DObjectArray(xs:string HCID,
                          ArrayOfArrayOfAnyType jaggedobjDataMICRO,
                          xs:int numeratorID, )
</snippet></ROW><ROW><id>5769849</id><snippet>ArrayOfArrayOfAnyType</snippet></ROW><ROW><id>5769849</id><snippet>client.factory</snippet></ROW><ROW><id>5769849</id><snippet>aoaoat = client.factory.create('ArrayOfArrayOfAnyType')
</snippet></ROW><ROW><id>5769849</id><snippet>aoaoat</snippet></ROW><ROW><id>5769849</id><snippet>print aoaoat
</snippet></ROW><ROW><id>5769849</id><snippet>(ArrayOfArrayOfAnyType){
  ArrayOfAnyType[] = &lt;empty&gt;
}
</snippet></ROW><ROW><id>5769849</id><snippet>ArrayOfAnyType</snippet></ROW><ROW><id>5769849</id><snippet>(ArrayOfAnyType){
  anyType[] = &lt;empty&gt;
}
</snippet></ROW><ROW><id>5769849</id><snippet>aoaoat = client.factory.create('ArrayOfArrayOfAnyType')
lst = aoaoat.ArrayOfAnyType = []
for L in [[1,2], [5,6]]:
    aoat = client.factory.create('ArrayOfAnyType')
    aoat.anyType = L
    lst.append(aoat)
response = client.service.CalculateWeb2DObjectArray(1073757, aoaoat, 99)
print response
</snippet></ROW><ROW><id>5769849</id><snippet>DEBUG:suds.client:sending to (
  http://204.9.76.243/nuCast.DataFeedService/Service1.asmx)
message:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:ns0="http://tempuri.org/"
  xmlns:ns1="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;SOAP-ENV:Header/&gt;
   &lt;ns1:Body&gt;
      &lt;ns0:CalculateWeb2DObjectArray&gt;
         &lt;ns0:HCID&gt;1073757&lt;/ns0:HCID&gt;
         &lt;ns0:jaggedobjDataMICRO&gt;
            &lt;ns0:ArrayOfAnyType&gt;
               &lt;ns0:anyType&gt;1&lt;/ns0:anyType&gt;
               &lt;ns0:anyType&gt;2&lt;/ns0:anyType&gt;
            &lt;/ns0:ArrayOfAnyType&gt;
            &lt;ns0:ArrayOfAnyType&gt;
               &lt;ns0:anyType&gt;5&lt;/ns0:anyType&gt;
               &lt;ns0:anyType&gt;6&lt;/ns0:anyType&gt;
            &lt;/ns0:ArrayOfAnyType&gt;
         &lt;/ns0:jaggedobjDataMICRO&gt;
         &lt;ns0:numeratorID&gt;99&lt;/ns0:numeratorID&gt;
      &lt;/ns0:CalculateWeb2DObjectArray&gt;
   &lt;/ns1:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
DEBUG:suds.client:headers = {
  'SOAPAction': u'"http://tempuri.org/CalculateWeb2DObjectArray"',
  'Content-Type': 'text/xml; charset=utf-8'}
</snippet></ROW><ROW><id>5769849</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;soap:Body&gt;
    &lt;CalculateWeb2DObjectArrayResponse xmlns="http://tempuri.org/"&gt;
      &lt;CalculateWeb2DObjectArrayResult&gt;
        &lt;ArrayOfAnyType&gt;
          &lt;anyType&gt;1&lt;/anyType&gt;
          &lt;anyType&gt;2&lt;/anyType&gt;
        &lt;/ArrayOfAnyType&gt;
        &lt;ArrayOfAnyType&gt;
          &lt;anyType&gt;5&lt;/anyType&gt;
          &lt;anyType&gt;6&lt;/anyType&gt;
        &lt;/ArrayOfAnyType&gt;
      &lt;/CalculateWeb2DObjectArrayResult&gt;
    &lt;/CalculateWeb2DObjectArrayResponse&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
</snippet></ROW><ROW><id>5769849</id><snippet>(ArrayOfArrayOfAnyType){
   ArrayOfAnyType[] = 
      (ArrayOfAnyType){
         anyType[] = 
            "1",
            "2",
      },
      (ArrayOfAnyType){
         anyType[] = 
            "5",
            "6",
      },
 }
</snippet></ROW><ROW><id>5769882</id><snippet>_("i love you")</snippet></ROW><ROW><id>5769882</id><snippet>django-admin.py compilemessages</snippet></ROW><ROW><id>5770037</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>5770156</id><snippet>buildout</snippet></ROW><ROW><id>5770156</id><snippet>zodbconvert</snippet></ROW><ROW><id>5770156</id><snippet>buildout</snippet></ROW><ROW><id>5770156</id><snippet>[buildout]
...
parts =
     ...
     zodbconvert

[zodbconvert]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
scripts = zodbconvert
</snippet></ROW><ROW><id>5770156</id><snippet>bin/zodbconvert</snippet></ROW><ROW><id>5770156</id><snippet>sys.path</snippet></ROW><ROW><id>5770156</id><snippet>sys.path</snippet></ROW><ROW><id>5770156</id><snippet>[buildout]
...
parts =
    ...
    zopepy

[zopepy]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy
</snippet></ROW><ROW><id>5770156</id><snippet>bin/zopepy</snippet></ROW><ROW><id>5770156</id><snippet>sys.path</snippet></ROW><ROW><id>5770156</id><snippet>bin/zopepy zodbconvert.py fstodb.conf</snippet></ROW><ROW><id>5770156</id><snippet>zopepy</snippet></ROW><ROW><id>5770156</id><snippet>buildout</snippet></ROW><ROW><id>5770156</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5770220</id><snippet>args</snippet></ROW><ROW><id>5770220</id><snippet>defaults</snippet></ROW><ROW><id>5770220</id><snippet>None</snippet></ROW><ROW><id>5770220</id><snippet>args</snippet></ROW><ROW><id>5770220</id><snippet>None</snippet></ROW><ROW><id>5770220</id><snippet>defaults</snippet></ROW><ROW><id>5770220</id><snippet>None</snippet></ROW><ROW><id>5770220</id><snippet>defaults</snippet></ROW><ROW><id>5770220</id><snippet>method(self, request)</snippet></ROW><ROW><id>5770220</id><snippet>method(self, request, dummy=None)</snippet></ROW><ROW><id>5770316</id><snippet>QtCore.QFileInfo(index.data(0).toString())
</snippet></ROW><ROW><id>5770316</id><snippet>QtCore.QFileInfo("readme.txt")
</snippet></ROW><ROW><id>5770316</id><snippet>QFileSystemModel::fileInfo
</snippet></ROW><ROW><id>5770316</id><snippet>self.model.fileInfo(index).absoluteFilePath()
</snippet></ROW><ROW><id>5770409</id><snippet>global x</snippet></ROW><ROW><id>5770409</id><snippet>x</snippet></ROW><ROW><id>5770409</id><snippet>f</snippet></ROW><ROW><id>5770409</id><snippet>x</snippet></ROW><ROW><id>5770409</id><snippet>x</snippet></ROW><ROW><id>5770409</id><snippet>x + 1</snippet></ROW><ROW><id>5770409</id><snippet>x</snippet></ROW><ROW><id>5770409</id><snippet>def f():
  global x
  x += 1

x = 1
f()
</snippet></ROW><ROW><id>5770409</id><snippet>f</snippet></ROW><ROW><id>5770409</id><snippet>x</snippet></ROW><ROW><id>5770409</id><snippet>++</snippet></ROW><ROW><id>5770409</id><snippet>x += 1</snippet></ROW><ROW><id>5770488</id><snippet>validator.State==QtGui.QValidator.Intermediate
</snippet></ROW><ROW><id>5770488</id><snippet>False</snippet></ROW><ROW><id>5770488</id><snippet>validate</snippet></ROW><ROW><id>5770488</id><snippet>def addClientButtonClicked(self, edit, validator):
    print("ip=", edit.text())
    print(validator.validate(edit.text(), 0))
</snippet></ROW><ROW><id>5770488</id><snippet>192.168.2.1</snippet></ROW><ROW><id>5770488</id><snippet>('ip=', PyQt4.QtCore.QString(u'192.168.2.1'))
(2, 0)
</snippet></ROW><ROW><id>5770488</id><snippet>validate</snippet></ROW><ROW><id>5770488</id><snippet>QValidator</snippet></ROW><ROW><id>5770488</id><snippet>def addClientButtonClicked(self, edit, validator):
    state, pos = validator.validate(edit.text(), 0)
    print(state == QtGui.QValidator.Acceptable)
</snippet></ROW><ROW><id>5770488</id><snippet>True</snippet></ROW><ROW><id>5770488</id><snippet>192.168.2.1</snippet></ROW><ROW><id>5770506</id><snippet>w</snippet></ROW><ROW><id>5770506</id><snippet>r</snippet></ROW><ROW><id>5770506</id><snippet>zip_file = zipfile.ZipFile(file_stream, 'r')
</snippet></ROW><ROW><id>5770967</id><snippet>PyQt</snippet></ROW><ROW><id>5770967</id><snippet>PyGame</snippet></ROW><ROW><id>5771042</id><snippet>replace_header</snippet></ROW><ROW><id>5771042</id><snippet>replace_header(_name, _value)</snippet></ROW><ROW><id>5771042</id><snippet>if msgRoot.has_key('to'):
    msgRoot.replace_header('to', someAdress)
else:
    msgRoot['to'] = 'email@email.com'
</snippet></ROW><ROW><id>5771164</id><snippet>['DIR1/',['fileA','fileB','DIR3/',['fileE','fileF']],'DIR2/',['fileC','fileD']]
</snippet></ROW><ROW><id>5771164</id><snippet>pprint.pformat</snippet></ROW><ROW><id>5771164</id><snippet>import pprint
import textwrap
import re

data=['DIR1/',['fileA','fileB','DIR3/',['fileE','fileF']],'DIR2/',['fileC','fileD']]
print(textwrap.dedent(re.sub(r"[\]\[',]", r' ',
                             pprint.pformat(data,indent=4,width=1))))
</snippet></ROW><ROW><id>5771164</id><snippet>DIR1/  
    fileA  
    fileB  
    DIR3/  
        fileE  
        fileF    
DIR2/  
    fileC  
    fileD   
</snippet></ROW><ROW><id>5771164</id><snippet>,[]'</snippet></ROW><ROW><id>5771390</id><snippet>PYTHONPATH=~/one/location:$PYTHONPATH
PYTHONPATH=~/second/location:$PYTHONPATH
export PYTHONPATH
</snippet></ROW><ROW><id>5771422</id><snippet>     PyRSS2Gen.RSSItem(
       enclosure = PyRSS2Gen.Enclosure(
                                        "http://www.example.com/url",
                                        17176948, # file size
                                        "mime-type"))
</snippet></ROW><ROW><id>5771532</id><snippet>URLField</snippet></ROW><ROW><id>5771532</id><snippet>CharField</snippet></ROW><ROW><id>5771532</id><snippet>validators.URLValidator</snippet></ROW><ROW><id>5771532</id><snippet>django.core</snippet></ROW><ROW><id>5771532</id><snippet>site-packages/django/core/validators.py</snippet></ROW><ROW><id>5771532</id><snippet>class URLValidator(RegexValidator):
    regex = re.compile(
        r'^https?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|' #domain...
        r'localhost|' #localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)

    def __init__(self, verify_exists=False, validator_user_agent=URL_VALIDATOR_USER_AGENT):
        super(URLValidator, self).__init__()
        self.verify_exists = verify_exists
        self.user_agent = validator_user_agent

    def __call__(self, value):
        try:
            super(URLValidator, self).__call__(value)
        except ValidationError, e:
            # Trivial case failed. Try for possible IDN domain
            if value:
                value = smart_unicode(value)
                scheme, netloc, path, query, fragment = urlparse.urlsplit(value)
                try:
                    netloc = netloc.encode('idna') # IDN -&gt; ACE
                except UnicodeError: # invalid domain part
                    raise e
                url = urlparse.urlunsplit((scheme, netloc, path, query, fragment))
                super(URLValidator, self).__call__(url)
            else:
                raise
        else:
            url = value

        if self.verify_exists:
            import urllib2
            headers = {
                "Accept": "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5",
                "Accept-Language": "en-us,en;q=0.5",
                "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.7",
                "Connection": "close",
                "User-Agent": self.user_agent,
            }
            try:
                req = urllib2.Request(url, None, headers)
                u = urllib2.urlopen(req)
            except ValueError:
                raise ValidationError(_(u'Enter a valid URL.'), code='invalid')
            except: # urllib2.URLError, httplib.InvalidURL, etc.
                raise ValidationError(_(u'This URL appears to be a broken link.'), code='invalid_link')
</snippet></ROW><ROW><id>5771532</id><snippet>urlparse</snippet></ROW><ROW><id>5771569</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>5771569</id><snippet>http.server</snippet></ROW><ROW><id>5772177</id><snippet>dict.get( i, [] )</snippet></ROW><ROW><id>5772177</id><snippet>None</snippet></ROW><ROW><id>5772177</id><snippet>append</snippet></ROW><ROW><id>5772177</id><snippet>dict.setdefault(i, []).append(j)</snippet></ROW><ROW><id>5772177</id><snippet>defaultdict</snippet></ROW><ROW><id>5772177</id><snippet>d = {}
for i in range( 0, 10 ):
    for j in range( 0, 100 ):
        d.setdefault( i, [] ).append( j )
</snippet></ROW><ROW><id>5772177</id><snippet>dict</snippet></ROW><ROW><id>5772177</id><snippet>d</snippet></ROW><ROW><id>5772177</id><snippet>dict</snippet></ROW><ROW><id>5772177</id><snippet>dict[i] =</snippet></ROW><ROW><id>5772420</id><snippet>BeforeRender</snippet></ROW><ROW><id>5772420</id><snippet>request</snippet></ROW><ROW><id>5772420</id><snippet>event</snippet></ROW><ROW><id>5772420</id><snippet>def add_renderer_globals(event):
    request, context = event['request'], event['context']
    event['user'] = authenticated_userid(request)
</snippet></ROW><ROW><id>5772474</id><snippet>line=''
lines = []
print "Enter Python lines (@ to quit):"
while line != '@':
    line=raw_input()
    lines.append(line)
lines.pop() # delete '@' line
lines = '\n'.join(lines)
exec lines
</snippet></ROW><ROW><id>5772474</id><snippet>&gt;&gt;&gt; 
Enter Python lines (@ to quit):
name = 'Terry'
if name == 'Drew':
  print 'Hi Drew'
else:
  print 'Hi stranger'
@
Hi stranger
</snippet></ROW><ROW><id>5772528</id><snippet>if charint &gt;= 65 and charint &lt;=90:
        cipher_int = ((charint-65 + k) % 26)+65
        code_char = chr(cipher_int)
        print code_char,

elif charint &gt;= 97 and charint &lt;=122:
    cipher_int = ((charint-97 + k) % 26)+97
    code_char = chr(cipher_int)
    print code_char,


else:
    print char,
</snippet></ROW><ROW><id>5772597</id><snippet>data = {
    'Explorer.EXE': [ ("19:03", 47), ("19:05" , 14), ("19:08" , 24)],
    'Firefox.EXE' : [ ("19:03", 21), ("19:05" , 14), ("19:08" , 2) ],
    'Messenger.EXE': [ ("19:03" , 11), ("19:05" , 12), ("19:08" , 11)]
}
</snippet></ROW><ROW><id>5772792</id><snippet>'\r'</snippet></ROW><ROW><id>5773115</id><snippet>&gt;&gt;&gt; n = 1
&gt;&gt;&gt; def bar():
&gt;&gt;&gt;     n = n + 1
&gt;&gt;&gt; 
&gt;&gt;&gt; bar()
Traceback (most recent call last):
  File "&lt;pyshell#8&gt;", line 1, in &lt;module&gt;
    bar()
  File "&lt;pyshell#7&gt;", line 2, in bar
    n = n + 1
UnboundLocalError: local variable 'n' referenced before assignment
</snippet></ROW><ROW><id>5773115</id><snippet>&gt;&gt;&gt; n=[1]
&gt;&gt;&gt; def bar():
&gt;&gt;&gt;     n[0] = n[0] + 1
&gt;&gt;&gt; 
&gt;&gt;&gt; bar()
&gt;&gt;&gt; n
[2]
</snippet></ROW><ROW><id>5773137</id><snippet>def render(template_path, template_dict, debug=False):
  """Renders the template at the given path with the given dict of values."""
  t = load(template_path, debug)
  return t.render(Context(template_dict))

template_cache = {}
def load(path, debug=False):
  abspath = os.path.abspath(path)

  if not debug:
    template = template_cache.get(abspath, None) # &lt;---- CACHING!
  else:
    template = None

  if not template:
    directory, file_name = os.path.split(abspath)
    ...
</snippet></ROW><ROW><id>5773137</id><snippet>debug = True</snippet></ROW><ROW><id>5773186</id><snippet>sorted(LL, key=itemgetter(1))</snippet></ROW><ROW><id>5773186</id><snippet>from operator import itemgetter</snippet></ROW><ROW><id>5773186</id><snippet>itemgetter</snippet></ROW><ROW><id>5773186</id><snippet>In [1]: LL = (('A123', 'A120', '2011-03'), ('A133', 'A123', '2011-03'), ('D123', 'D120', '2011-04'), ('D140', 'D123', '2011-04'))

In [2]: from operator import itemgetter

In [3]: sorted(LL, key=itemgetter(1))
Out[3]:
[('A123', 'A120', '2011-03'),
 ('A133', 'A123', '2011-03'),
 ('D123', 'D120', '2011-04'),
 ('D140', 'D123', '2011-04')]
</snippet></ROW><ROW><id>5773256</id><snippet>In [1]: import itertools
In [2]: x = {'a': 'foo', 'b': 'foobar'}
In [3]: y = {'c': 'barfoo', 'd': 'bar'}

In [4]: z = [key for key in itertools.chain(x, y)]

In [5]: z
Out[5]: ['a', 'b', 'c', 'd']

In [6]: dict(enumerate(z))
Out[6]: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}

In [7]: dict(enumerate(z, 1))
Out[7]: {1: 'a', 2: 'b', 3: 'c', 4: 'd'}
</snippet></ROW><ROW><id>5773256</id><snippet>[4]</snippet></ROW><ROW><id>5773256</id><snippet>z = set(key for key in itertools.chain(x, y))
</snippet></ROW><ROW><id>5773256</id><snippet>'a': 'meow'</snippet></ROW><ROW><id>5773256</id><snippet>y</snippet></ROW><ROW><id>5773256</id><snippet>In [15]: dict(enumerate(set(key for key in itertools.chain(x, y)), 1))
Out[15]: {1: 'a', 2: 'c', 3: 'b', 4: 'd'}

In [16]: dict(enumerate((key for key in itertools.chain(x, y)), 1))
Out[16]: {1: 'a', 2: 'b', 3: 'a', 4: 'c', 5: 'd'}
</snippet></ROW><ROW><id>5773404</id><snippet>&gt;&gt;&gt; list(collections.deque((1, 2, 3)))
[1, 2, 3]
</snippet></ROW><ROW><id>5773424</id><snippet>def paths(grid, x, y, l):
    """Returns a list of positions that the required letter is at"""

    positions = [(x - 1, y - 1), (x - 1, y), (x - 1, y + 1), (x, y - 1), (x, y + 1), (x + 1, y - 1), (x + 1, y), (x + 1, y + 1)]
    return [p for p in positions if p in grid and grid[p] == l]

def matchWord(grid, pos, word):
    """Returns true if the word was found in the grid starting from pos"""
    if word == "" : return True
    pos_paths = paths(grid, pos[0], pos[1], word[0])
    if pos_paths == [] : return False

    return any(matchWord(grid, the_pos, word[1:]) for the_pos in pos_paths)

def wordInGrid(grid, word):
    """returns true if the word is in the grid"""
    return any(matchWord(grid, key, word[1:]) for (key, val) in dict.iteritems(grid) if val == word[0])


gr_dict = {(0, 1): 'T', (1, 2): 'A', (3, 2): 'A', (0, 0): 'W', (3, 3): 'W', (3, 0): 'A', (3, 1): 'B', (2, 1): 'R', (0, 2): 'S', (2, 0): 'S', (1, 3): 'H', (2, 3): 'S', (2, 2): 'T', (1, 0): 'A', (0, 3): 'V', (1, 1): 'X'}

print wordInGrid(gr_dict, "RATS")
print wordInGrid(gr_dict, "WASABATAS")
</snippet></ROW><ROW><id>5773510</id><snippet>re.findall("[^ ]*.(?:cnn|espn).[^ ]*", u1)
</snippet></ROW><ROW><id>5773578</id><snippet>with</snippet></ROW><ROW><id>5773578</id><snippet>import pprint

pow = 1, 2, 3

pp = pprint.pprint
pp(pow)
</snippet></ROW><ROW><id>5773669</id><snippet>ljust()</snippet></ROW><ROW><id>5773669</id><snippet>bytes = f.read(self.chunksize)
if bytes:
    bytes = bytes.ljust(self.chunksize, '\0')
</snippet></ROW><ROW><id>5773741</id><snippet>self.response.headers['Content-Type'] = "application/json"
self.response.out.write(json.dumps(response))
</snippet></ROW><ROW><id>5773856</id><snippet>if form.is_valid():
    form.save()
    return http.HttpResponseRedirect('')
</snippet></ROW><ROW><id>5774012</id><snippet># Converts a decimal number to hexadecimal.
# Executes a zero-fill for up to six digits.
# This is used for correct conversion back
# to the instruction format. See zero_fill().
# @param  dec  Decimal representation of instruction
# @return  Zero-filled hexadecimal instruction.
def convert(dec):
# BEGIN convert()
    hex = "%X" % dec
    return zero_fill(hex, 6)
# END convert()

# Prepends zeros until the specified
# length is reached. Works recursively.
# @param  n  Number to fill
# @param  length  Length to reach
# @return  Zero-filled number
def zero_fill(n, length):
# BEGIN zero_fill()
    # Check if length requirement is met
    if len(n) != length:
        # Requirement not met, run function again with
        # n having one prepended zero.
        return zero_fill('0'+n, length)
    else:
        # Requirement met, return n.
        return n
# END zero_fill()
</snippet></ROW><ROW><id>5774145</id><snippet>import cPickle

class Foo(object):
    class Bar(object):
        pass

obj = Foo.Bar()
print obj.__class__
cPickle.dumps(obj)

&lt;class '__main__.Bar'&gt;
cPickle.PicklingError: Can't pickle &lt;class '__main__.Bar'&gt;: attribute lookup __main__.Bar failed
</snippet></ROW><ROW><id>5774145</id><snippet>scipy.spatial.kdtree</snippet></ROW><ROW><id>5774145</id><snippet>import cPickle
import numpy
from scipy.spatial import kdtree

# patch module-level attribute to enable pickle to work
kdtree.node = kdtree.KDTree.node
kdtree.leafnode = kdtree.KDTree.leafnode
kdtree.innernode = kdtree.KDTree.innernode

x, y = numpy.mgrid[0:5, 2:8]
t1 = kdtree.KDTree(zip(x.ravel(), y.ravel()))
r1 = t1.query([3.4, 4.1])
raw = cPickle.dumps(t1)

# read in the pickled tree
t2 = cPickle.loads(raw)
r2 = t2.query([3.4, 4.1])
print t1.tree.__class__
print repr(raw)[:70]
print t1.data[r1[1]], t2.data[r2[1]]
</snippet></ROW><ROW><id>5774145</id><snippet>&lt;class 'scipy.spatial.kdtree.innernode'&gt;
"ccopy_reg\n_reconstructor\np1\n(cscipy.spatial.kdtree\nKDTree\np2\nc_
[3 4] [3 4]
</snippet></ROW><ROW><id>5774257</id><snippet>#!/usr/bin/env python
import csv
filesource = 'PeopleAndResources.csv'
with open(filesource, 'rb') as f:
    reader = csv.reader(f, delimiter=';', quotechar='"')
    for row in reader:
        statement = "INSERT INTO ImportCSVTable " + \
        "(name, address, phone) " + \
        "VALUES ('%s', '%s', '%s')" % (tuple(row[0:3]))
        #execute statement
</snippet></ROW><ROW><id>5774324</id><snippet>&gt;&gt;&gt; list_iter = iter([1, 2, 3, 4, 5])
&gt;&gt;&gt; for i in list_iter:
...     print "not skipped: ", i
...     if i == 3:
...         print "skipped: ", next(list_iter, None)
...         continue
... 
not skipped:  1
not skipped:  2
not skipped:  3
skipped:  4
not skipped:  5
</snippet></ROW><ROW><id>5774324</id><snippet>next</snippet></ROW><ROW><id>5774324</id><snippet>None</snippet></ROW><ROW><id>5774324</id><snippet>StopIteration</snippet></ROW><ROW><id>5774333</id><snippet>def clean_email(self):
    data = self.cleaned_data['email']
    if User.objects.filter(email=data).exists():
        raise forms.ValidationError("This email already used")
    return data
</snippet></ROW><ROW><id>5774333</id><snippet>ALTER TABLE auth_user ADD UNIQUE (email)
</snippet></ROW><ROW><id>5774664</id><snippet>myfunc</snippet></ROW><ROW><id>5774664</id><snippet>// initialize state when 'myfunc' is loaded.
my_bool myfunc_init(UDF_INIT *initid, UDF_ARGS *args, ...)

// call myfunc, this would need to translate the args, invoke the
// python function, then return the string, may need to create and cache
// python sub-interpreters on the fly, etc
char *myfunc(UDF_INIT *initid, UDF_ARGS *args, ...)

// clean up the state when 'myfunc' is unloaded.
void myfunc_deinit(UDF_INIT *initid);
</snippet></ROW><ROW><id>5774882</id><snippet>from pyparsing import *

aExpr = Word("A", nums)
bExpr = Word("B", nums)
cExpr = Word("C", nums)

grammar = ZeroOrMore(aExpr.setResultsName("A",listAllMatches=True) |
                     bExpr.setResultsName("B",listAllMatches=True) |
                     cExpr.setResultsName("C",listAllMatches=True) )


results = grammar.parseString("A1 B1 A2 C1 B2 A3")
print results.dump()
</snippet></ROW><ROW><id>5774882</id><snippet>['A1', 'B1', 'A2', 'C1', 'B2', 'A3']
- A: ['A1', 'A2', 'A3']
- B: ['B1', 'B2']
- C: ['C1']
</snippet></ROW><ROW><id>5775151</id><snippet>map(lambda (index, word): someFunction(word, index), enumerate(data))
</snippet></ROW><ROW><id>5775217</id><snippet>set_logo()</snippet></ROW><ROW><id>5775217</id><snippet>set_logo_icon_name()</snippet></ROW><ROW><id>5775217</id><snippet>set_logo()</snippet></ROW><ROW><id>5775217</id><snippet>gtk.gdk.Pixbuf</snippet></ROW><ROW><id>5775217</id><snippet>gtk.gdk.pixbuf_new_from_file()</snippet></ROW><ROW><id>5775263</id><snippet>import collections
import types

def loads(repstr):
    """
    Return a new graph initialized by the contents of the string
    repstr.  The string should contain the representation generated by
    a call to dumps.
    """
    return eval(repstr)

def load(f):
    """
    Return a new graph initialized by the contents of the file f.  The
    file should contain the representation generated by a call to
    dump.
    """
    return loads(f.read())

class BaseGraph:
    """
    Abstract graph class that supports node and edge attributes.
    """

    ### Graph structure:
    ###
    ###  g = {node: _nodetup}
    ###  _nodetup = (attr, nbrs)
    ###  nbrs = {node: attr}
    _nodetup = collections.namedtuple('node', 'attr nbrs')

    def __init__(self):
        """
        Create an empty graph.
        """
        self._nodes = {}

    def __len__(self):
        """
        Return the number of nodes in the graph (len(g) == g.node_count()).
        """
        return self.node_count()

    def __contains__(self, node):
        """
        Returns true if node is in the graph, false otherwise.
        """
        return self.has_node(node)

    def __iter__(self):
        """
        Create an iterator over the nodes in the graph.
        """
        return self._nodes.__iter__()

    def __getitem__(self, node):
        """
        Return the neighbor dictionary for the node. 

        nbrs = g[k] is the same as nbrs = g.get_neighbors(k)
        """
        return self.get_neighbors(node)

    def __setitem__(self, node, nbrs):
        """
        Set the neighbor dictionary for the node.

        g[k] = nbrs is the same as g.set_neighbors(k, nbrs)
        """
        self.set_neighbors(node, nbrs)

    def _repstr(self):
        """
        Helper function for __str__ that returns a string of the
        internal graph representation.
        """
        return str(self._nodes)

    def _reprepr(self):
        """
        Helper function for __repr__ that returns a string of the
        internal graph representation that can be evaluated to
        recreate the representation.
        """
        s = self._repstr()
        s = s.replace('node(', 'BaseGraph._nodetup(')
        return s

    def nodes(self):
        """
        Returns a list of nodes in the graph.
        """
        return self._nodes.keys()

    def get_neighbors(self, node):
        """
        Returns the neighbor dictionary {neighbor node: attr} for node
        or raises a KeyError if node is not in the graph.
        """
        return self._nodes[node].nbrs

    def set_neighbors(self, node, neighbors):
        """
        Set the neighbor dictionary for the node.  Add node if it's
        not in the graph.

        Example: 
        g[0] = {1: None} -- node 0 has 1 neighbor (node 1)
                            and there is no edge attribute.
        """
        if self.has_node(node):
            if type(neighbors) != types.DictType:
                raise TypeError("neighbors must be a dictionary, not " + type(neighbors).__name__)
            self._nodes[node] = BaseGraph._nodetup(self._nodes[node].attr, neighbors)
        else:
            self._nodes[node] = BaseGraph._nodetup(None, neighbors)

    def get_node_attr(self, node):
        """
        Returns the attribute for node or raises KeyError if node is
        not in the graph.
        """
        return self._nodes[node].attr

    def set_node_attr(self, node, attr):
        """
        Sets the attribute for node to attr or raises KeyError if node
        is not in the graph.
        """
        if self.has_node(node):
            self._nodes[node] = Graph._nodetup(attr, self._nodes[node].nbrs)
        else:
            raise KeyError(node)        

    def get_edge_attr(self, u, v):
        """
        Returns the attribute for edge (u, v) or raises KeyError if
        the edge is not in the graph.
        """
        return self._nodes[u].nbrs[v]

    def set_edge_attr(self, u, v, attr):
        """
        Sets the attribute for edge (u, v) to attr or raises KeyError
        if edge is not in the graph.

        Must be overriden by subclasses
        """
        raise NotImplementedError

    def node_count(self):
        """
        Returns the number of nodes in the graph.
        """
        return len(self._nodes)

    def edge_count(self):
        """
        Returns the number of edges in the graph.

        Must be overriden by subclasses.
        """
        raise NotImplementedError

    def add_node(self, node, attr = None):
        """
        Add node to the graph with optional attribute attr.  Does
        nothing if node is already in the graph.
        """
        if not self.has_node(node):
            self._nodes[node] = Graph._nodetup(attr, {})

    def add_edge(self, u, v, attr = None):
        """
        Add edge (u, v) to the graph with optional attribute attr.
        If nodes u or v are not in the graph, they will be added.

        Must be overriden by subclasses.
        """
        raise NotImplementedError

    def remove_node(self, node):
        """
        Remove node from the graph, if it exists.  Raises KeyError if
        node is not in the graph.
        """
        self._nodes.pop(node)
        for k, nk in self._nodes.iteritems():
            nk.nbrs.pop(node, None)

    def remove_edge(self, u, v):
        """
        Remove edge from the graph, if it exists.

        Must be overriden by subclasses.
        """
        raise NotImplementedError

    def has_node(self, node):
        """
        Returns True if node is in the graph, False otherwise.
        """
        return node in self._nodes

    def has_edge(self, u, v):
        """
        Returns True if edge (u, v) is in the graph, False otherwise.
        """
        return (v in self._nodes[u].nbrs)

    def dumps(self):
        """
        Return a string representation of the graph that can 
        be used by loads to recreate the graph.

        Must be overriden by subclass.
        """
        raise NotImplementedError

    def dump(self, f):
        """
        Store a string representation to the file f that can be read
        by load to recreate the graph.
        """
        f.write(self.dumps())

    def validate(self):
        """
        Validates that the graph structure is consistent.  Raises
        UserWarning if inconsistent, does nothing otherwise.

        Should be overriden by subclasses.
        """
        raise UserWarning('unable to validate graph - no validate method')


class DiGraph(BaseGraph):
    """
    Directed graph class that supports node and edge attributes.
    """

    def __init__(self, graphrepr = None):
        """
        Create a new DiGraph.  

        If the optional graphrepr argument is not provided the graph
        will be empty.  Otherwise, graphrepr will be used as the
        internal representation and will be validated.  The graphrepr
        argument should primarily be used by load or loads.
        """
        BaseGraph.__init__(self)
        if graphrepr:
            self._nodes = graphrepr
            self.validate()

    def __str__(self):
        """
        Return a string representation of the graph.
        """
        return 'DiGraph(' + self._repstr() + ')'

    def edge_count(self):
        """
        Returns the number of edges in the graph.
        """
        edges = 0
        for n in self._nodes:
            edges += len(self._nodes[n].nbrs)
        return edges

    def set_edge_attr(self, u, v, attr):
        """
        Sets the attribute for edge (u, v) to attr or raises KeyError
        if edge is not in the graph.
        """
        if self.has_node(u):
            if v in self._nodes[u].nbrs:
                self._nodes[u].nbrs[v] = attr
            else:
                raise KeyError(v)
        else:
            raise KeyError(u)        

    def add_edge(self, u, v, attr = None):
        """
        Add edge (u, v) to the graph with optional attribute attr.
        If nodes u or v are not in the graph, they will be added.
        """
        if not self.has_node(u):
            self.add_node(u)
        if not self.has_node(v):
            self.add_node(v)
        self._nodes[u].nbrs[v] = attr

    def remove_edge(self, u, v):
        """
        Remove edge from the graph, if it exists.
        """
        if self.has_node(u):
            self._nodes[u].nbrs.pop(v, None)

    def dumps(self):
        """
        Return a string representation of the graph that can 
        be used by loads to recreate the graph.
        """
        return 'DiGraph(' + self._reprepr() + ')'

    def validate(self):
        """
        Validates that the graph structure is consistent.  If node a
        is a neighbor of node b, then node a must be a node in the
        graph.  If this holds for all neighbors, then do nothing.  If
        not, raises a UserWarning.
        """
        for n, nt in self._nodes.iteritems():
            for nbr in nt.nbrs:
                if nbr not in self._nodes:
                    # Missing node
                    msg = ('node ' + str(n) + ' has a neighbor (' +
                           str(nbr) + ') that is not a node in the graph')
                    raise UserWarning(msg)

class Graph(BaseGraph):
    """
    Undirected graph class that supports node and edge attributes.
    """

    def __init__(self, graphrepr = None):
        """
        Create a new Graph.  

        If the optional graphrepr argument is not provided the graph
        will be empty.  Otherwise, graphrepr will be used as the
        internal representation and will be validated.  The graphrepr
        argument should primarily be used by load or loads.
        """
        BaseGraph.__init__(self)
        if graphrepr:
            self._nodes = graphrepr
            self.validate()

    def __str__(self):
        """
        Return a string representation of the graph.
        """
        return 'Graph(' + self._repstr() + ')'

    def edge_count(self):
        """
        Returns the number of edges in the graph.
        """
        edges = 0
        for n in self._nodes:
            edges += len(self._nodes[n].nbrs)
        return edges / 2

    def set_edge_attr(self, u, v, attr):
        """
        Sets the attribute for edge (u, v) to attr or raises KeyError
        if edge is not in the graph.
        """
        if v not in self._nodes[u].nbrs:
            raise KeyError(v)
        if u not in self._nodes[v].nbrs:
            raise KeyError(u)

        self._nodes[u].nbrs[v] = attr
        self._nodes[v].nbrs[u] = attr

    def add_edge(self, u, v, attr = None):
        """
        Add edge (u, v) to the graph with optional attribute attr.
        If nodes u or v are not in the graph, they will be added.
        """
        if not self.has_node(u):
            self.add_node(u)
        if not self.has_node(v):
            self.add_node(v)
        self._nodes[u].nbrs[v] = attr
        self._nodes[v].nbrs[u] = attr

    def remove_edge(self, u, v):
        """
        Remove edge from the graph, if it exists.
        """
        if self.has_node(u) and self.has_node(v):
            self._nodes[u].nbrs.pop(v, None)
            self._nodes[v].nbrs.pop(u, None)

    def dumps(self):
        """
        Return a string representation of the graph that can 
        be used by loads to recreate the graph.
        """
        return 'Graph(' + self._reprepr() + ')'

    def validate(self):
        """
        Validates that the graph structure is consistent.  If node a
        is a neighbor of node b, then node b must be a neighbor of
        node a and they must both have the same attribute.  If this
        holds for all neighbors, then do nothing.  If not, raises a
        UserWarning.
        """
        for n, nt in self._nodes.iteritems():
            for nbr in nt.nbrs:
                if nbr not in self._nodes:
                    # Missing node
                    msg = ('node ' + str(n) + ' has a neighbor (' +
                           str(nbr) + ') that is not a node in the graph')
                    raise UserWarning(msg)
                elif n not in self._nodes[nbr].nbrs:
                    # Missing edge
                    msg = ('edge from ' + str(n) + ' to ' + 
                           str(nbr) + ', but not from ' + 
                           str(nbr) + ' to ' + str(n))
                    raise UserWarning(msg)
                elif self._nodes[n].nbrs[nbr] != self._nodes[nbr].nbrs[n]:
                    # Mismatched attribute
                    msg = ('edge attributes for edge (' + str(n) +
                           ', ' + str(nbr) + ') are mismatched: ' +
                           str(self._nodes[n].nbrs[nbr]) + ' and ' +
                           str(self._nodes[nbr].nbrs[n]))
                    raise UserWarning(msg)
</snippet></ROW><ROW><id>5775386</id><snippet>from django.db.models.loading import cache as model_cache
if not model_cache.loaded:
    model_cache.get_models()
</snippet></ROW><ROW><id>5775397</id><snippet>def index_2d(myList, v):
    for i, x in enumerate(myList):
        if v in x:
            return (i, x.index(v))
</snippet></ROW><ROW><id>5775397</id><snippet>&gt;&gt;&gt; index_2d(myList, 3)
(1, 0)
</snippet></ROW><ROW><id>5775569</id><snippet>query/recentchanges/rc

/api/query/recentchanges/rc
</snippet></ROW><ROW><id>5775745</id><snippet>input = "Self contained underwater breathing apparatus"
output = ""
for i in input.upper().split():
    output += i[0]
</snippet></ROW><ROW><id>5776613</id><snippet>'' != None</snippet></ROW><ROW><id>5776613</id><snippet>null=True</snippet></ROW><ROW><id>5776613</id><snippet>forms.CharField</snippet></ROW><ROW><id>5776613</id><snippet>clean</snippet></ROW><ROW><id>5776613</id><snippet>class NullCharField(forms.CharField):
    def clean(self, value):
        value = super(NullCharField, self).clean(value)
        if value in forms.fields.EMPTY_VALUES:
            return None
        return value
</snippet></ROW><ROW><id>5776613</id><snippet>class MyModelForm(forms.ModelForm):
    name = NullCharField(required=False, ...)
</snippet></ROW><ROW><id>5776613</id><snippet>''</snippet></ROW><ROW><id>5776666</id><snippet>list1 = [0,1,4,8,87,6,4,7,5,'a','f','er','fa','vz']
tuple1 = (8,5,'f')

def my_contains(first, second):
    return bool(set(first).intersection(second))

my_contains(list1, tuple1) # True
my_contains(list1, [1]) # True
my_contains(list1, (125,178,999)) # False
</snippet></ROW><ROW><id>5777428</id><snippet>cursor.execute( "SELECT COUNT(1) "
                " / ( SELECT COUNT(1) FROM users " 
                "     WHERE registered_at BETWEEN '1293861600' AND '1303729537') " 
                " FROM users "
                " WHERE ( registered_at BETWEEN '1293861600' AND '1303729537') "
                "   AND user_id IN ( SELECT parent_id FROM files "
                "                    WHERE created_at &gt; '1293861600') " )
</snippet></ROW><ROW><id>5777428</id><snippet>cursor.execute( " SELECT COUNT(DISTINCT users.user_id) "
                "        / ( SELECT COUNT(1) FROM users " 
                "            WHERE registered_at "
                "              BETWEEN '1293861600' AND '1303729537') " 
                " FROM users "
                "   JOIN files "
                "     ON files.parent_id = users.user_id "
                " WHERE ( users.registered_at BETWEEN '1293861600' AND '1303729537') "
                "   AND ( files.created_at &gt; '1293861600') "
              )
</snippet></ROW><ROW><id>5777428</id><snippet>cursor.execute( " SELECT SUM(IF(user_id IN ( SELECT parent_id "
                "                            FROM files "
                "                            WHERE created_at &gt; '1293861600') "
                "              ,1 ,0 ) ) "
                "        / COUNT(1) "
                " FROM users "
                " WHERE users.registered_at BETWEEN '1293861600' AND '1303729537' "
              )
</snippet></ROW><ROW><id>5777529</id><snippet>import glob, csv, xlwt, os
wb = xlwt.Workbook()
for filename in glob.glob("c:/xxx/*.csv"):
    (f_path, f_name) = os.path.split(filename)
    (f_short_name, f_extension) = os.path.splitext(f_name)
    ws = wb.add_sheet(f_short_name)
    spamReader = csv.reader(open(filename, 'rb'))
    for rowx, row in enumerate(spamReader):
        for colx, value in enumerate(row):
            ws.write(rowx, colx, value)
wb.save("c:/xxx/compiled.xls")
</snippet></ROW><ROW><id>5777583</id><snippet>numpy.bincount()</snippet></ROW><ROW><id>5777583</id><snippet>A = numpy.zeros(5, dtype='int')
I = [1, 1, 1, 3]
J = [2, 1, 1, 1]
sums = numpy.bincount(I, J)
A[:len(sums)] += sums
print(A)
</snippet></ROW><ROW><id>5777583</id><snippet>[0 4 0 1 0]
</snippet></ROW><ROW><id>5777818</id><snippet>ravel_index()</snippet></ROW><ROW><id>5777818</id><snippet>def ravel_index(x, dims):
    i = 0
    for dim, j in zip(dims, x):
        i *= dim
        i += j
    return i
</snippet></ROW><ROW><id>5777818</id><snippet>numpy.unravel_index()</snippet></ROW><ROW><id>5777818</id><snippet>ravel_index((x, y, z), m.shape)</snippet></ROW><ROW><id>5778185</id><snippet>function</snippet></ROW><ROW><id>5778185</id><snippet>function</snippet></ROW><ROW><id>5778185</id><snippet>
    spinbbox2.valueChanged.connect(handler)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The function handler called is called whenever
# value in spinbox2 is changed and parameter to
# handler is the new value of spinbox2
def handler(value):
    spinbox1.setMaximum(value)
</snippet></ROW><ROW><id>5778592</id><snippet>&gt;&gt;&gt; s = "randomfilename.txt:dslfkjsdosdfu"
&gt;&gt;&gt; print s.split(":")[0]
randomfilename.txt
</snippet></ROW><ROW><id>5778829</id><snippet>MatchFirst</snippet></ROW><ROW><id>5778829</id><snippet>Or</snippet></ROW><ROW><id>5778829</id><snippet>oneOf("scooby scoobydoo")</snippet></ROW><ROW><id>5778829</id><snippet>oneOf</snippet></ROW><ROW><id>5778984</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>5778984</id><snippet>ordereddict</snippet></ROW><ROW><id>5779016</id><snippet>python</snippet></ROW><ROW><id>5779016</id><snippet>manage.py</snippet></ROW><ROW><id>5779016</id><snippet>import live_settings
from django.core.management  import setup_environ
setup_environ(live_settings)
</snippet></ROW><ROW><id>5779016</id><snippet>live_settings.py</snippet></ROW><ROW><id>5779016</id><snippet>--settings</snippet></ROW><ROW><id>5779016</id><snippet>manage.py</snippet></ROW><ROW><id>5779016</id><snippet>python manage.py --settings=live_settings shell
</snippet></ROW><ROW><id>5779016</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>5779016</id><snippet>live_settings.py</snippet></ROW><ROW><id>5779016</id><snippet>manage.py</snippet></ROW><ROW><id>5779698</id><snippet>pyplot.text</snippet></ROW><ROW><id>5779698</id><snippet>from matplotlib import pyplot as plt
import numpy as np

x = np.arange(0,3,.25)
y = np.sin(x)
txt = '''
    Lorem ipsum dolor sit amet, consectetur adipisicing elit,
    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
    reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
    culpa qui officia deserunt mollit anim id est laborum.'''

fig = plt.figure()
ax1 = fig.add_axes((.1,.4,.8,.5))
ax1.bar(x,y,.2)
fig.text(.1,.1,txt)
plt.show()
</snippet></ROW><ROW><id>5780037</id><snippet>if 'q' in request.GET and request.GET['q'] != '':
</snippet></ROW><ROW><id>5780043</id><snippet>class MyRequestHandler(webapp.RequestHandler):
    def get(self, page):
        self.response.headers['Content-Type'] = 'text/plain'
        if not page:
            self.response.out.write('Hello, webapp World!')
        else:
            self.response.out.write('page is ' + page)

url_map = [('/(\d+)', MyRequestHandler)]
application = webapp.WSGIApplication(url_map, debug=True)
</snippet></ROW><ROW><id>5780072</id><snippet>def main():
    path = "C:\\temp\\log.txt"
    os.chmod(path, stat.S_IWRITE)
</snippet></ROW><ROW><id>5780221</id><snippet>r</snippet></ROW><ROW><id>5780221</id><snippet>__add__()</snippet></ROW><ROW><id>5780221</id><snippet>__radd()__</snippet></ROW><ROW><id>5780221</id><snippet>a</snippet></ROW><ROW><id>5780221</id><snippet>A</snippet></ROW><ROW><id>5780221</id><snippet>b</snippet></ROW><ROW><id>5780221</id><snippet>B</snippet></ROW><ROW><id>5780221</id><snippet>A.__add__(a, b)</snippet></ROW><ROW><id>5780221</id><snippet>NotImplemented</snippet></ROW><ROW><id>5780221</id><snippet>B.__radd__(b, a)</snippet></ROW><ROW><id>5780221</id><snippet>operator.add</snippet></ROW><ROW><id>5780221</id><snippet>operator</snippet></ROW><ROW><id>5780221</id><snippet>__floordiv__()</snippet></ROW><ROW><id>5780221</id><snippet>__rfloordiv__()</snippet></ROW><ROW><id>5780221</id><snippet>operator.floordiv</snippet></ROW><ROW><id>5780743</id><snippet>CreateProcess</snippet></ROW><ROW><id>5780743</id><snippet>shell=True</snippet></ROW><ROW><id>5780743</id><snippet>CreateProcess</snippet></ROW><ROW><id>5780992</id><snippet>get_object_or_redirect</snippet></ROW><ROW><id>5780992</id><snippet>get_object_or_404</snippet></ROW><ROW><id>5780992</id><snippet>get_object_or_404</snippet></ROW><ROW><id>5781048</id><snippet>sentence = raw_input()
number = int(raw_input())
print(sentence * number)
</snippet></ROW><ROW><id>5781052</id><snippet>Serial</snippet></ROW><ROW><id>5781052</id><snippet>__del__()</snippet></ROW><ROW><id>5781052</id><snippet>Serial</snippet></ROW><ROW><id>5781052</id><snippet>Serial</snippet></ROW><ROW><id>5781052</id><snippet>del</snippet></ROW><ROW><id>5781052</id><snippet>__del__()</snippet></ROW><ROW><id>5781052</id><snippet>import serial

class mySerial(serial.Serial):
    def __del__(self):
        pass

ser = mySerial()
# rest of script the same
</snippet></ROW><ROW><id>5781052</id><snippet>import serial

del serial.Serial.__del__
</snippet></ROW><ROW><id>5781052</id><snippet>__del__()</snippet></ROW><ROW><id>5781052</id><snippet>ser.close()</snippet></ROW><ROW><id>5781052</id><snippet>ser.close()</snippet></ROW><ROW><id>5781069</id><snippet>s = raw_input()
print sum(int(c) for c in s.strip())
</snippet></ROW><ROW><id>5781093</id><snippet>When I submit the following values:
  | username | foo |
  | password | bar |
</snippet></ROW><ROW><id>5781093</id><snippet>Given a user exists with username "foo"
And that user has the profile "bar"
When I login as "foo" with password "bar"
...
</snippet></ROW><ROW><id>5781112</id><snippet>name</snippet></ROW><ROW><id>5781112</id><snippet>name</snippet></ROW><ROW><id>5781112</id><snippet>slug_field</snippet></ROW><ROW><id>5781112</id><snippet>get_object</snippet></ROW><ROW><id>5781161</id><snippet>import pprint
LL= [ ('A123', 'A120', '2011-03'),
      ('A133', 'A123', '2011-03'),
      ('D123', 'D120', '2011-04'),
      ('D140', 'D123', '2011-04'),]
LL = [row+(i,) for i,row in enumerate(LL,1)]
pprint.pprint(LL)
</snippet></ROW><ROW><id>5781161</id><snippet>[('A123', 'A120', '2011-03', 1),
 ('A133', 'A123', '2011-03', 2),
 ('D123', 'D120', '2011-04', 3),
 ('D140', 'D123', '2011-04', 4)]
</snippet></ROW><ROW><id>5781161</id><snippet>LL</snippet></ROW><ROW><id>5781161</id><snippet>In [28]: LL
Out[28]: 
[('A123', 'A120', '2011-03'),
 ('A133', 'A123', '2011-03'),
 ('D123', 'D120', '2011-04'),
 ('D140', 'D123', '2011-04')]
</snippet></ROW><ROW><id>5781161</id><snippet>In [30]: list(enumerate(LL))
Out[30]: 
[(0, ('A123', 'A120', '2011-03')),
 (1, ('A133', 'A123', '2011-03')),
 (2, ('D123', 'D120', '2011-04')),
 (3, ('D140', 'D123', '2011-04'))]
</snippet></ROW><ROW><id>5781161</id><snippet>enumerate</snippet></ROW><ROW><id>5781161</id><snippet>enumerate(LL,1)</snippet></ROW><ROW><id>5781161</id><snippet>In [31]: [row+(i,) for i,row in enumerate(LL,1)]
Out[31]: 
[('A123', 'A120', '2011-03', 1),
 ('A133', 'A123', '2011-03', 2),
 ('D123', 'D120', '2011-04', 3),
 ('D140', 'D123', '2011-04', 4)]
</snippet></ROW><ROW><id>5781161</id><snippet>row</snippet></ROW><ROW><id>5781161</id><snippet>('A123', 'A120', '2011-03')</snippet></ROW><ROW><id>5781161</id><snippet>row+(i,)</snippet></ROW><ROW><id>5781161</id><snippet>In [32]: ('A123', 'A120', '2011-03')+(1,)
Out[32]: ('A123', 'A120', '2011-03', 1)
</snippet></ROW><ROW><id>5781236</id><snippet>request = urllib2.Request(bucket, data=data)
</snippet></ROW><ROW><id>5781319</id><snippet>[:-1]</snippet></ROW><ROW><id>5781319</id><snippet>sum(sum(float(el) for el in els[:-1]) for els in x)</snippet></ROW><ROW><id>5781319</id><snippet>sum(float(a) + float(b) for a,b,_ in x) 
</snippet></ROW><ROW><id>5781657</id><snippet> from django.core.serializers.json import DjangoJSONEncoder
 data =  json.dumps(data, cls=DjangoJSONEncoder)
</snippet></ROW><ROW><id>5781690</id><snippet>swap_seq</snippet></ROW><ROW><id>5781690</id><snippet>s[0]+s[1]+s[2]+s[3]+s[4]</snippet></ROW><ROW><id>5781690</id><snippet>s[2]+s[3]+s[0]+s[1]+s[4]</snippet></ROW><ROW><id>5781690</id><snippet>s="Hello"
swap_seq="23014"
swapped=''.join([s[int(i)] for i in swap_seq])
if s[0].isupper(): swapped.capitalize()
print swapped
</snippet></ROW><ROW><id>5781690</id><snippet>Llheo</snippet></ROW><ROW><id>5781690</id><snippet>swapped</snippet></ROW><ROW><id>5781690</id><snippet>s</snippet></ROW><ROW><id>5782243</id><snippet>is</snippet></ROW><ROW><id>5782243</id><snippet>==</snippet></ROW><ROW><id>5782243</id><snippet>In [1]: a = 3424
In [2]: b = 3424

In [3]: a is b
Out[3]: False

In [4]: a == b
Out[4]: True
</snippet></ROW><ROW><id>5782246</id><snippet>CreateVideoWriter()</snippet></ROW><ROW><id>5782246</id><snippet>CV_FOURCC()</snippet></ROW><ROW><id>5782246</id><snippet>#!/usr/bin/env python
import sys

from opencv.cv import *
from opencv.highgui import *

im1 = cvLoadImage("img1.jpg")
if not im1:
    print "Could not load im1"

im2 = cvLoadImage("img2.jpg")
if not im2:
    print "Could not load im2"

fps = 4.0
frame_size = cvGetSize(im1)
#writer = cvCreateVideoWriter("out.avi", CV_FOURCC('M', 'J', 'P', 'G'), fps, frame_size, True)
writer = cvCreateVideoWriter("out.avi", CV_FOURCC('F', 'L', 'V', '1'), fps, frame_size, True)
if not writer:
    print "Error in creating video writer"
    sys.exit(1)
else:
    print cvWriteFrame(writer, im1)
    print cvWriteFrame(writer, im2)

cvReleaseVideoWriter(writer)
</snippet></ROW><ROW><id>5782352</id><snippet>'/'</snippet></ROW><ROW><id>5782352</id><snippet>r'C:\Users\john\Desktop\text.txt'</snippet></ROW><ROW><id>5782571</id><snippet>IN</snippet></ROW><ROW><id>5782571</id><snippet>NOT IN</snippet></ROW><ROW><id>5782571</id><snippet>NOT IN</snippet></ROW><ROW><id>5782571</id><snippet>IN</snippet></ROW><ROW><id>5782571</id><snippet>FILTER (?item NOT IN (?SetB))</snippet></ROW><ROW><id>5782571</id><snippet>OPTIONAL</snippet></ROW><ROW><id>5782571</id><snippet>bound</snippet></ROW><ROW><id>5782571</id><snippet>SELECT ?title WHERE {
   some logic defining ?item
   OPTIONAL {
   some logic defining ?SetB
   }
   FILTER (bound(?SetB) &amp;&amp; ?setB != ?item)
}
</snippet></ROW><ROW><id>5782571</id><snippet>?SetB</snippet></ROW><ROW><id>5782571</id><snippet>SELECT ?title WHERE {
   some logic defining ?item
   FILTER (?item != &lt;setb_val1&gt; &amp;&amp; ?item != &lt;setb_val2&gt; &amp;&amp;
   ... &amp;&amp; ?item != &lt;setb_val2&gt;)
}
</snippet></ROW><ROW><id>5782808</id><snippet>globals()</snippet></ROW><ROW><id>5783238</id><snippet>strptime()</snippet></ROW><ROW><id>5783238</id><snippet>strftime()</snippet></ROW><ROW><id>5783238</id><snippet>In [1]: import time
In [2]: tm = time.strptime('January 10, 2012', '%B %d, %Y')
In [3]: time.strftime('%d %B %Y', tm)
Out[4]: '10 January 2012'
</snippet></ROW><ROW><id>5783274</id><snippet>sum(len(xx) - 1 for xx in x)</snippet></ROW><ROW><id>5783543</id><snippet>#!/usr/bin/env python

def main():
    outfiles = [open("/tmp/tmp{0}".format(i), 'wb') for i in (0,1,2,3)]

    with open('/dev/null', 'rb') as inf:
        # do reading/writing
        pass

    for i,f in enumerate(outfiles):
        print("Closing number {0}".format(i))
        f.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5783780</id><snippet>chunk_read</snippet></ROW><ROW><id>5783780</id><snippet>chunk_read</snippet></ROW><ROW><id>5783780</id><snippet>def chunk_read(response, chunk_size=8192, report_hook=None):
   total_size = response.info().getheader('Content-Length').strip()
   total_size = int(total_size)
   bytes_so_far = 0
   data = []

   while 1:
      chunk = response.read(chunk_size)
      bytes_so_far += len(chunk)

      if not chunk:
         break

      data += chunk
      if report_hook:
         report_hook(bytes_so_far, chunk_size, total_size)

   return "".join(data)
</snippet></ROW><ROW><id>5783990</id><snippet>global</snippet></ROW><ROW><id>5784284</id><snippet>ctypes.cast(addr, type)</snippet></ROW><ROW><id>5784284</id><snippet>INTP = ctypes.POINTER(ctypes.c_int)
num = ctypes.c_int(42)
addr = ctypes.addressof(num)
print 'address:', addr, type(addr)
ptr = ctypes.cast(addr, INTP)
print 'pointer:', ptr
print 'value:', ptr[0]
</snippet></ROW><ROW><id>5784284</id><snippet>address: 4301122528 &lt;type 'int'&gt;
pointer: &lt;__main__.LP_c_int object at 0x1005decb0&gt;
value: 42
</snippet></ROW><ROW><id>5784360</id><snippet># Look Ma, no imports!
&gt;&gt;&gt; s = 'id: 1234\nname: Peter\nmessage: foo bar zot\nmsg2: tee:hee\n'
&gt;&gt;&gt; dict(map(str.strip, line.split(':', 1)) for line in s.splitlines())
{'message': 'foo bar zot', 'msg2': 'tee:hee', 'id': '1234', 'name': 'Peter'}
</snippet></ROW><ROW><id>5784360</id><snippet>tee:hee</snippet></ROW><ROW><id>5784360</id><snippet>split(':', 1)</snippet></ROW><ROW><id>5784360</id><snippet>&gt;&gt;&gt; print dict(map(str.strip, line.split(':', 1)) for line in s.splitlines()[2:-1])
{'Status': 'new', 'Resolved': 'Not set', 'CF.{Severity}': '',
'TimeLeft': '0', 'Creator': 'young.park', 'Cc': '', 'Starts': 'Not set',
'Created': 'Mon Apr 25 15:50:27 2011', 'Due': 'Not set',
'LastUpdated': 'Mon Apr 25 15:50:28 2011', 'Started': 'Not set',
'Priority': '0', 'Requestors': 'superuser@meme.com',
'AdminCc': '', 'Owner': 'Nobody', 'Told': 'Not set',
'TimeEstimated': '0', 'InitialPriority': '0', 'FinalPriority': '0',
'TimeWorked': '0', 'Subject': 'testing'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5784407</id><snippet>python p1.py | python p2.py | python p3.py | python p4.py ...
</snippet></ROW><ROW><id>5784570</id><snippet>$.post()</snippet></ROW><ROW><id>5784570</id><snippet>$.post('/foo', {foo: "bar", nums: [1, 2, 3]})
</snippet></ROW><ROW><id>5784570</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>5784570</id><snippet>/foo</snippet></ROW><ROW><id>5784570</id><snippet>foo=bar&amp;nums%5B%5D=1&amp;nums%5B%5D=2&amp;nums%5B%5D=3
</snippet></ROW><ROW><id>5784570</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>5784570</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.parse_qs('foo=bar&amp;nums%5B%5D=1&amp;nums%5B%5D=2&amp;nums%5B%5D=3')
{'foo': ['bar'], 'nums[]': ['1', '2', '3']}
</snippet></ROW><ROW><id>5784894</id><snippet>&gt;&gt;&gt; OPS = [operator.add, operator.sub, operator.add]
&gt;&gt;&gt; nums = [1, 2, 3, 4]
&gt;&gt;&gt; print reduce(lambda x, y: y[0](x, y[1]), zip(OPS, nums[1:]), nums[0])
4
</snippet></ROW><ROW><id>5785065</id><snippet>Meta.unique_together</snippet></ROW><ROW><id>5785116</id><snippet>TestClass.list</snippet></ROW><ROW><id>5785116</id><snippet>object_list.append()</snippet></ROW><ROW><id>5785116</id><snippet>class Foo(object):
    lst = []

f1 = Foo()
f1.lst.append(1)
f2 = Foo()
f2.lst.append(2)
print f1.lst
print f2.lst

[1, 2]
[1, 2]
</snippet></ROW><ROW><id>5785116</id><snippet>class Bar(object):
    def __init__(self):
        self.lst = []

b1 = Bar()
b1.lst.append(1)
b2 = Bar()
b2.lst.append(2)
print b1.lst
print b2.lst

[1]
[2]
</snippet></ROW><ROW><id>5785163</id><snippet>%s</snippet></ROW><ROW><id>5785207</id><snippet>py manage.py  schemamigration chat --initial
</snippet></ROW><ROW><id>5785207</id><snippet>import os
import sys
SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
APPS_ROOT = os.path.join(SITE_ROOT, 'apps')
sys.path.append(APPS_ROOT)
</snippet></ROW><ROW><id>5785207</id><snippet>py manage.py  schemamigration chat --initial
</snippet></ROW><ROW><id>5785356</id><snippet>%typemap(in) (const int memoryCells, int *cellFailure) {
  int i;
  if (!PyList_Check($input)) {
    PyErr_SetString(PyExc_ValueError, "Expecting a list");
    return NULL;
  }
  $1 = PyList_Size($input);
  $2 = (int *) malloc(($1)*sizeof(int));
  for (i = 0; i &lt; $1; i++) {
    PyObject *s = PyList_GetItem($input,i);
    if (!PyInt_Check(s)) {
        free($2);
        PyErr_SetString(PyExc_ValueError, "List items must be integers");
        return NULL;
    }
    $2[i] = PyInt_AsLong(s);
  }
}

%typemap(freearg) (const int memoryCells, int *cellFailure) {
   if ($2) free($2);
}
</snippet></ROW><ROW><id>5785356</id><snippet>memoryCells</snippet></ROW><ROW><id>5785356</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>5785356</id><snippet>cellFailure</snippet></ROW><ROW><id>5785356</id><snippet>memoryCells</snippet></ROW><ROW><id>5785384</id><snippet>forloop.counter</snippet></ROW><ROW><id>5785384</id><snippet>&lt;table&gt;
    &lt;tr&gt;
{% for person in people %}
        &lt;td&gt;{{ person }}&lt;/td&gt;
    {% if not forloop.last and forloop.counter == 3 or forloop.counter == 6 %}
    &lt;/tr&gt;
    &lt;tr&gt;
    {% endif %}
{% endfor %}
    &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>5785384</id><snippet>here</snippet></ROW><ROW><id>5785427</id><snippet>tell application "Terminal"
    activate
    do script "/usr/bin/python WVCS-0.1.py"
end tell
</snippet></ROW><ROW><id>5785427</id><snippet>tell application "Terminal"
    activate
    do shell script "/usr/bin/python WVCS-0.1.py"
end tell
</snippet></ROW><ROW><id>5785427</id><snippet>&lt;array&gt;
    &lt;string&gt;osascript&lt;/string&gt;
    &lt;string&gt;/path/to/that/script&lt;/string&gt;
&lt;/array&gt;
</snippet></ROW><ROW><id>5785673</id><snippet>reset</snippet></ROW><ROW><id>5785680</id><snippet>day_records = new Array();
{% for point in day_records %}
    day_records[{{ forloop.counter0 }}] = '{{ point.date }}';
{% endfor %}

plant.bind("plothover",
       function(event,pos,item){
       if(item){
           removeTooltip();
           var point = item.dataIndex;           
           showTooltip(item.pageX,item.pageY, day_records[point]);
       }else{
           removeTooltip();
       }
       });
</snippet></ROW><ROW><id>5785791</id><snippet>photo.images</snippet></ROW><ROW><id>5785791</id><snippet>images</snippet></ROW><ROW><id>5785791</id><snippet>images.low_resolution</snippet></ROW><ROW><id>5785791</id><snippet>low_resolution</snippet></ROW><ROW><id>5785791</id><snippet>photo.images</snippet></ROW><ROW><id>5786019</id><snippet>wrong()</snippet></ROW><ROW><id>5786019</id><snippet>error()</snippet></ROW><ROW><id>5786096</id><snippet>["%.8f" % (x) for x in rates]
</snippet></ROW><ROW><id>5786096</id><snippet>['0.10000000', '0.00000100', '0.00000010']</snippet></ROW><ROW><id>5786096</id><snippet>Decimal</snippet></ROW><ROW><id>5786101</id><snippet>def find_or_add(model, session, **kwargs):
    if len(kwargs) &gt; 0:
         obj = session.query(model).filter_by(**kwargs).first()
         if not obj:
             obj = model(**kwargs)
             session.add(obj)
    else:
         # Otherwise, let's create an empty one and add it to the session...
         obj = model()
         session.add(obj)
    return obj

def find_and_delete(model, session, **kwargs):
    deleted = False
    obj = session.query(model).filter_by(**kwargs).first()
    if obj:
        session.delete(obj)
        deleted = True
    return deleted
</snippet></ROW><ROW><id>5786101</id><snippet>user = find_or_add(User, mysession, email="bob@localhost.com")
</snippet></ROW><ROW><id>5786101</id><snippet># let's add a classmethod to User or its base class:
class User(...):
    ...
    @classmethod
    def find_or_add(cls, session, **kwargs):
        if len(kwargs) &gt; 0:
            obj = session.query(cls).filter_by(**kwargs).first()
            if not obj:
                obj = cls(**kwargs)
                session.add(obj)
        else:
            # Otherwise, let's create an empty one and add it to the session...
            obj = cls()
            session.add(obj)
        return obj
    ...
user = User.find_or_add(session, email="someone@tld.com")
</snippet></ROW><ROW><id>5786389</id><snippet>asyncore</snippet></ROW><ROW><id>5786389</id><snippet>asynchat</snippet></ROW><ROW><id>5786591</id><snippet>jsonDate = "/Date(1154970000000+0700)/";

var strDate = parseInt(jsonDate.replace(/\/Date\(([-\d]+).*$/, "$1"));
var strHour = parseInt(jsonDate.replace(/.*\d([+-]\d\d).*$/, "$1"), 10);
var strMin = parseInt(jsonDate.replace(/.*\d([+-])\d\d(\d\d).*$/, "$1$2"), 10);

var date = new Date(strDate);
if (!isNaN(strHour)) date.setHours(date.getHours() + strHour);
if (!isNaN(strMin)) date.setMinutes(date.getMinutes() + strMin);

var out = date.toISOString();
</snippet></ROW><ROW><id>5786591</id><snippet>var toISOString = Date.prototype.toISOString ?
    function(d){return d}:
    (function(){
        function t(i){return i&lt;10?"0"+i:i};
        function h(i){return i.length&lt;2?"00"+i:i.length&lt;3?"0"+i:3&lt;i.length?Math.round(i/Math.pow(10,i.length-3)):i};
        function toISOString(){
            return "".concat(
                this.getUTCFullYear(), "-",
                t(this.getUTCMonth() + 1), "-",
                t(this.getUTCDate()), "T",
                t(this.getUTCHours()), ":",
                t(this.getUTCMinutes()), ":",
                t(this.getUTCSeconds()), ".",
                h("" + this.getUTCMilliseconds()), "Z"
            );
        };
        return function(d){
            d.toISOString = toISOString;
            return d;
        }
    })();
</snippet></ROW><ROW><id>5786615</id><snippet>calculate()</snippet></ROW><ROW><id>5786615</id><snippet>class Base(object):
    def __init__(self, args):
        # perform some initialization
        pass
    def calculate(self):
        # do stuff
        pass
    @classmethod
    def precalculated(cls, args):
        # construct first
        newBase = cls(args)
        # now call method "calculate"
        newBase.calculate()
        return newBase

class Derived(Base):
    def __init__(self, args, additional_attr):
        super(Derived, self).__init__(args)
        # do some work and create new instance attributes
        self.additional_attr = additional_attr
    @classmethod
    def precalculated(cls, args, additional_attr): # also if you want
        newDerived = cls(args, additional_attr)
        newDerived.calculate()
        return newDerived

newBase = Base('foo')
precalculatedBase = Base.precalculated('foo')
newDerived = Derived('foo', 'bar')
precalculatedDerived = Derived.precalculated('foo', 'bar')
</snippet></ROW></DATA>