<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19205168</id><snippet>CommonName,Species,Location,Color
Black-headed spider monkey,Ateles fusciceps,Ecuador,black
Central American squirrel monkey,Saimiri oerstedii,Costa Rica,orange
Vervet,Chlorocebus pygerythrus,South Africa,white
</snippet></ROW><ROW><id>19205168</id><snippet>import csv
import sqlite3

db = sqlite3.connect('outfile.db')
cursor = db.cursor()
cursor.execute('CREATE TABLE Monkeys (Common Name, Color, Species)')
cursor.execute('''CREATE TABLE MonkeyLocations (Species, Location,
                  FOREIGN KEY(Species) REFERENCES Monkeys(Species))''')
with open('infile.txt') as f:
    for row in csv.DictReader(f):
        cursor.execute('''INSERT INTO Monkeys 
                          VALUES (:CommonName, :Color, :Species)''', row)
        cursor.execute('''INSERT INTO MonkeyLocations 
                          VALUES (:Species, :Location)''', row)
db.commit()
db.close()
</snippet></ROW><ROW><id>19205168</id><snippet>readlines</snippet></ROW><ROW><id>19205168</id><snippet>fd</snippet></ROW><ROW><id>19205168</id><snippet>with</snippet></ROW><ROW><id>19205168</id><snippet>insert = """(insert into LN values (%s, %s, %s);, %(currentRow[4], currentRow[5], currentRow[6]))"""
c.execute(insert)
</snippet></ROW><ROW><id>19205168</id><snippet>%</snippet></ROW><ROW><id>19205168</id><snippet>insert = """insert into LN values (%s, %s, %s);""" % (currentRow[4], currentRow[5], currentRow[6])
c.execute(insert)
</snippet></ROW><ROW><id>19205168</id><snippet>insert = """insert into LN values (?, ?, ?);"""
c.execute(insert, (currentRow[4], currentRow[5], currentRow[6]))
</snippet></ROW><ROW><id>19205168</id><snippet>insert into LN values (?, ?, ?)</snippet></ROW><ROW><id>19205168</id><snippet>insert into LN values (5, 1.0, 200)</snippet></ROW><ROW><id>19205168</id><snippet>insert into LN values (1, 5.0, 5000)</snippet></ROW><ROW><id>19205214</id><snippet>__init__</snippet></ROW><ROW><id>19205214</id><snippet>Person</snippet></ROW><ROW><id>19205214</id><snippet>class Person(object):
    def __init__(self, name):
        self.name = name
</snippet></ROW><ROW><id>19205214</id><snippet>Employee</snippet></ROW><ROW><id>19205214</id><snippet>title</snippet></ROW><ROW><id>19205214</id><snippet>Person</snippet></ROW><ROW><id>19205214</id><snippet>class Employee(Person):
    def __init__(self, name, title):
        self.name = name
        self.title = title
</snippet></ROW><ROW><id>19205214</id><snippet>Person</snippet></ROW><ROW><id>19205214</id><snippet>super</snippet></ROW><ROW><id>19205214</id><snippet>__init__</snippet></ROW><ROW><id>19205214</id><snippet>class Employee(Person):
    def __init__(self, name, title):
        super(Employee, self).__init__(name)
        self.title = title
</snippet></ROW><ROW><id>19205214</id><snippet>__init__</snippet></ROW><ROW><id>19205434</id><snippet>for character in passwd:</snippet></ROW><ROW><id>19205434</id><snippet>if not character.islower() &gt; 1:</snippet></ROW><ROW><id>19205434</id><snippet>.islower()</snippet></ROW><ROW><id>19205434</id><snippet>True</snippet></ROW><ROW><id>19205434</id><snippet>False</snippet></ROW><ROW><id>19205434</id><snippet>not False == 1</snippet></ROW><ROW><id>19205434</id><snippet>not True == 0</snippet></ROW><ROW><id>19205434</id><snippet>capital = False
lowercase = False
number = False
if len(passwd) &lt; 6:
    print 'That was not more than 6 characters'
else:
    for character in passwd:
        if character.islower(): 
            lowercase = True
        elif character.isupper():
            capital = True
        elif character.isdigit():
            number = True
        if capital and lowercase and number:
            break
    else: 
        print 'That did not have a capital letter, lowercase letter, and a digit'
</snippet></ROW><ROW><id>19205496</id><snippet>value</snippet></ROW><ROW><id>19205496</id><snippet>Cls</snippet></ROW><ROW><id>19205496</id><snippet>self.value = start</snippet></ROW><ROW><id>19205496</id><snippet>__set__</snippet></ROW><ROW><id>19205496</id><snippet>self</snippet></ROW><ROW><id>19205496</id><snippet>Cls</snippet></ROW><ROW><id>19205496</id><snippet>instance.value = start</snippet></ROW><ROW><id>19205496</id><snippet>__set__</snippet></ROW><ROW><id>19205496</id><snippet>&gt;&gt;&gt; x = Cls("oops")
In Descriptor's __set__ method
&gt;&gt;&gt; y = Cls("dang")
In Descriptor's __set__ method
&gt;&gt;&gt; x.value
In Descriptor's __get__method
'dang'
&gt;&gt;&gt; Cls.__dict__['value'].value
'dang'
</snippet></ROW><ROW><id>19205496</id><snippet>y</snippet></ROW><ROW><id>19205496</id><snippet>x.value</snippet></ROW><ROW><id>19205496</id><snippet>Cls</snippet></ROW><ROW><id>19205496</id><snippet>self</snippet></ROW><ROW><id>19205496</id><snippet>__get__</snippet></ROW><ROW><id>19205496</id><snippet>__set__</snippet></ROW><ROW><id>19205496</id><snippet>instance</snippet></ROW><ROW><id>19205496</id><snippet>property</snippet></ROW><ROW><id>19205496</id><snippet>property</snippet></ROW><ROW><id>19205645</id><snippet>types.MethodType</snippet></ROW><ROW><id>19205645</id><snippet>import types

class what:
    def __init__(self):
        s = 'def yolo(self):\n\tself.extra = "Hello"\n\tprint self.extra'
        exec(s)
        self.yolo = types.MethodType(yolo, self)

what().yolo()
</snippet></ROW><ROW><id>19205645</id><snippet>exec</snippet></ROW><ROW><id>19205645</id><snippet>import types

class what:
    def __init__(self):
        def yolo(self):
            self.extra = "Hello"
            print self.extra

        self.yolo = types.MethodType(yolo, self)

what().yolo()
</snippet></ROW><ROW><id>19205645</id><snippet>class what:
    def __init__(self):
        def yolo(self):
            self.extra = "Hello"
            print self.extra

        self.yolo = yolo.__get__(self)

what().yolo()
</snippet></ROW><ROW><id>19205834</id><snippet>agg</snippet></ROW><ROW><id>19205834</id><snippet>myfunc2</snippet></ROW><ROW><id>19205834</id><snippet>lambda x: list(x.unique())</snippet></ROW><ROW><id>19205834</id><snippet>myfunc1</snippet></ROW><ROW><id>19205834</id><snippet>def collapse(x):
    uniq = x.unique()
    if len(uniq) == 1:
        return uniq[0]
    else:
        return list(uniq)
</snippet></ROW><ROW><id>19205834</id><snippet>myfunc1</snippet></ROW><ROW><id>19205834</id><snippet>myfunc2</snippet></ROW><ROW><id>19205834</id><snippet>apply</snippet></ROW><ROW><id>19205946</id><snippet>super(ChildClass, self).__init__()</snippet></ROW><ROW><id>19205946</id><snippet>class BaseClass(object):
    def __init__(self, *args, **kwargs):
        pass

class ChildClass(BaseClass):
    def __init__(self, *args, **kwargs):
        super(ChildClass, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>19205946</id><snippet>class Car(object):
    condition = "new"

    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg

class ElectricCar(Car):
    def __init__(self, battery_type, model, color, mpg):
        self.battery_type=battery_type
        super(ElectricCar, self).__init__(model, color, mpg)

car = ElectricCar('battery', 'ford', 'golden', 10)
print car.__dict__
</snippet></ROW><ROW><id>19205946</id><snippet>{'color': 'golden', 'mpg': 10, 'model': 'ford', 'battery_type': 'battery'}
</snippet></ROW><ROW><id>19206016</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def as_link(match):
...     link = match.group(1)
...     return '&lt;a href="{}"&gt;{}&lt;/a&gt;'.format(link.replace(' ', '_'), link)
...
&gt;&gt;&gt; text = 'This is a random text. This should be a [[link somewhere]]. And some more text at the end.'
&gt;&gt;&gt; re.sub(r'\[\[(.*?)\]\]', as_link, text)
'This is a random text. This should be a &lt;a href="link_somewhere"&gt;link somewhere&lt;/a&gt;. And some more text at the end.'
</snippet></ROW><ROW><id>19206160</id><snippet>change_pos</snippet></ROW><ROW><id>19206160</id><snippet>def change_pos(a, b):
    print 'DONE'
    return b, a
</snippet></ROW><ROW><id>19206160</id><snippet>a, b = change_pos(a,b)
</snippet></ROW><ROW><id>19206160</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>19206160</id><snippet>last_int</snippet></ROW><ROW><id>19206160</id><snippet>last_int</snippet></ROW><ROW><id>19206160</id><snippet>last_int[5]</snippet></ROW><ROW><id>19206160</id><snippet>last_int[j+1]</snippet></ROW><ROW><id>19206211</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>19206211</id><snippet>TimedRotatingFileHandler</snippet></ROW><ROW><id>19206418</id><snippet>$.ajax({url:'/addvendor', 
        type: 'post', 
        data:JSON.stringify({'vendor': {'name': 'test', 'description': 'a good company', 'tags':['foo', 'bar']}}), 
        contentType:'application/json; charset=utf-8',
        dataType: "json",
        success:function(data){console.log(data)}})

...

print json.loads(self.request.body)
</snippet></ROW><ROW><id>19206555</id><snippet>next</snippet></ROW><ROW><id>19206555</id><snippet>f.seek(0)</snippet></ROW><ROW><id>19206555</id><snippet>next</snippet></ROW><ROW><id>19206555</id><snippet>with open(file,'r') as f:
    reader = csv.reader(f)
    header = next(reader)
    result = []
    for row in reader:
        for col_index, colname in enumerate(header)[2:]:
            value = row[col_index]
            result.append(do_something_with(value, colname))
</snippet></ROW><ROW><id>19206555</id><snippet>csv.reader</snippet></ROW><ROW><id>19206555</id><snippet>maxes = {}
with open(file) as f:
    reader = csv.reader(f)
    header = next(reader)
    for col_index, colname in enumerate(header)[2:]:
        maxes[colname] = max(reader, key=operator.itemgetter(col_index))
</snippet></ROW><ROW><id>19206555</id><snippet>maxes = {}
with open(file) as f:
    reader = csv.reader(f)
    header = next(reader)
for col_index, colname in enumerate(header)[2:]:
    with open(file) as f:
        reader = csv.reader(f)
        next(reader)
        maxes[colname] = max(reader, key=lambda row: float(row[col_index]))
</snippet></ROW><ROW><id>19206555</id><snippet>f.seek(0)</snippet></ROW><ROW><id>19206555</id><snippet>csv.reader</snippet></ROW><ROW><id>19206555</id><snippet>csv.reader</snippet></ROW><ROW><id>19206555</id><snippet>csv</snippet></ROW><ROW><id>19206555</id><snippet>maxes = {}
with open(file) as f:
    reader = csv.reader(f)
    header = next(reader)
    for col_index, colname in enumerate(header)[2:]:
        f.seek(0)
        next(reader)
        maxes[colname] = max(reader, key=lambda row: float(row[col_index]))
</snippet></ROW><ROW><id>19206555</id><snippet>maxes = {}
with open(file) as f:
    reader = csv.reader(f)
    header = next(reader)
    rows = list(reader)
for col_index, colname in enumerate(header)[2:]:
    maxes[colname] = max(rows, key=lambda row: float(row[col_index]))
</snippet></ROW><ROW><id>19206555</id><snippet>max</snippet></ROW><ROW><id>19206555</id><snippet>with open(file) as f:
    reader = csv.reader(f)
    header = next(reader)
    maxes = {colname: float('-inf') for colname in header[2:]}
    for row in reader:
        for col_index, colname in enumerate(header)[2:]:
            maxes[colname] = max(maxes[colname], float(row[col_index]))
</snippet></ROW><ROW><id>19206555</id><snippet>Counter</snippet></ROW><ROW><id>19206555</id><snippet>dict</snippet></ROW><ROW><id>19206555</id><snippet>DictReader</snippet></ROW><ROW><id>19206555</id><snippet>reader</snippet></ROW><ROW><id>19206647</id><snippet>&gt;&gt;&gt; my_list = [1,2,3]
&gt;&gt;&gt; t = test(my_list)
&gt;&gt;&gt; t.numtimes(2)
&gt;&gt;&gt; my_list
[1,2,3,1,2,3]  # Not what you intended, probably!
</snippet></ROW><ROW><id>19206647</id><snippet>def __init__(self,l):
    self.obj = list(l)
</snippet></ROW><ROW><id>19206647</id><snippet>def mult(self, x, n):
    self.x = x*n
</snippet></ROW><ROW><id>19206711</id><snippet>if</snippet></ROW><ROW><id>19206711</id><snippet>while</snippet></ROW><ROW><id>19206711</id><snippet>if len(num) == 16:
    for i in num:
        total = total + int(i)
    print total
    if total % 10 == 0:
        print "ok"
    else:
        print " not ok"
else:
    print " not long enough"
</snippet></ROW><ROW><id>19206711</id><snippet>while</snippet></ROW><ROW><id>19206711</id><snippet>if</snippet></ROW><ROW><id>19206711</id><snippet>while</snippet></ROW><ROW><id>19206711</id><snippet>for</snippet></ROW><ROW><id>19206711</id><snippet>i = count = total = 0
while i &lt; len(num):
    digit = num[i]
    i += 1
    if digit in ' -.':
        # spaces, dashes and dots are fine
        continue
    if not digit.isdigit():
        # Oops, not a digit, bail out, not valid
        break
    total += int(digit)
    count += 1

if count != 16 or total % 10 != 0:
    print "Not a valid credit card number!"
else:
    print "Ok"
</snippet></ROW><ROW><id>19207013</id><snippet>readConfiguration()</snippet></ROW><ROW><id>19207013</id><snippet>open()</snippet></ROW><ROW><id>19207013</id><snippet>mock</snippet></ROW><ROW><id>19207013</id><snippet>&gt;&gt;&gt; mock = MagicMock(return_value=sentinel.file_handle)
&gt;&gt;&gt; with patch('builtins.open', mock):
...     import the_broken_module
...     # do your testing here
</snippet></ROW><ROW><id>19207013</id><snippet>sentinel.file_handle</snippet></ROW><ROW><id>19207013</id><snippet>StringIO("&lt;contents of mock config file&gt;")</snippet></ROW><ROW><id>19207013</id><snippet>readConfiguration()</snippet></ROW><ROW><id>19207042</id><snippet>[...]</snippet></ROW><ROW><id>19207042</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['d'] = d
&gt;&gt;&gt; d
{'d': {...}}
</snippet></ROW><ROW><id>19207042</id><snippet>&gt;&gt;&gt; l = ['foo', 'bar', {}]
&gt;&gt;&gt; l[-1]['spam'] = l
&gt;&gt;&gt; l[-1]['eggs'] = l
&gt;&gt;&gt; l
['foo', 'bar', {'eggs': [...], 'spam': [...]}]
</snippet></ROW><ROW><id>19207042</id><snippet>[...]</snippet></ROW><ROW><id>19207042</id><snippet>{...}</snippet></ROW><ROW><id>19207078</id><snippet>Python 2.7.4 (default, Sep 26 2013, 03:20:26) 
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from numpy import linalg as la
&gt;&gt;&gt; w, v = la.eig(np.array([[1, -1], [1, 1]]))
&gt;&gt;&gt; w
array([ 1.+1.j,  1.-1.j])
&gt;&gt;&gt; v
array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],
       [ 0.00000000-0.70710678j,  0.00000000+0.70710678j]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19207137</id><snippet>def removeTuplesWithOne(lst):
    return [x for x in lst if x[0] != 1]

a = removeTuplesWithOne([(1,2),(1,4),(2,6),(1,8),(3,6),(1,10),(1,6)])
</snippet></ROW><ROW><id>19207137</id><snippet>filter</snippet></ROW><ROW><id>19207137</id><snippet>def removeTuplesWithOne(lst):
    return (x for x in lst if x[0] != 1)
</snippet></ROW><ROW><id>19207179</id><snippet>arguments</snippet></ROW><ROW><id>19207179</id><snippet>import math


# ring size calculating function
def areaOfRing(r_out, r_in):
    r_outs = (r_out**2)*math.pi
    r_ins = (r_in**2)*math.pi
    ring_size  = r_outs - r_ins
    return ring_size

r_out = int(input("Insert rings outside raadius: ")) 
r_in = int(input("Insert rings inner raadius: "))

ring_size = areaOfRing(r_out, r_in) 
print('Ring size is = ',ring_size)
</snippet></ROW><ROW><id>19207428</id><snippet>print buildConnectionString(myParams)
</snippet></ROW><ROW><id>19207428</id><snippet>print(buildConnectionString(myParams))
</snippet></ROW><ROW><id>19207440</id><snippet>cellClicked()</snippet></ROW><ROW><id>19207440</id><snippet>itemSelectionChanged()</snippet></ROW><ROW><id>19207440</id><snippet>cellClicked()</snippet></ROW><ROW><id>19207440</id><snippet>index()</snippet></ROW><ROW><id>19207440</id><snippet>tableindex = mytablelist.index(sender)
</snippet></ROW><ROW><id>19207530</id><snippet>assertRaises</snippet></ROW><ROW><id>19207530</id><snippet>checkListItem</snippet></ROW><ROW><id>19207530</id><snippet>FilterList</snippet></ROW><ROW><id>19207530</id><snippet>__init__</snippet></ROW><ROW><id>19207530</id><snippet>self.flObj</snippet></ROW><ROW><id>19207639</id><snippet>group_concat</snippet></ROW><ROW><id>19207639</id><snippet>from sqlalchemy.sql import expression
import sqlalchemy
from sqlalchemy.ext import compiler


class group_concat(expression.FunctionElement):
    name = "group_concat"


@compiler.compiles(group_concat, 'mysql')
def _group_concat_mysql(element, compiler, **kw):
    if len(element.clauses) == 2:
        separator = compiler.process(element.clauses.clauses[1])
    else:
        separator = ','

    return 'GROUP_CONCAT(%s SEPARATOR %s)'.format(
        compiler.process(element.clauses.clauses[0]),
        separator,
    )
</snippet></ROW><ROW><id>19207639</id><snippet>query = select([
    table.c.some_column,
    expression.label(
        'grouped column',
        group_concat(
            table.c.some_oter_column,
            ' separator ',
        ),
    ),
]).group_by(table.c.some_column)
</snippet></ROW><ROW><id>19207683</id><snippet>import pylab as plb
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import asarray as ar,exp

x = ar(range(10))
y = ar([0,1,2,3,4,5,4,3,2,1])

n = len(x)                          #the number of data
mean = sum(x*y)/n                   #note this correction
sigma = sum(y*(x-mean)**2)/n        #note this correction

def gaus(x,a,x0,sigma):
    return a*exp(-(x-x0)**2/(2*sigma**2))

popt,pcov = curve_fit(gaus,x,y,p0=[1,mean,sigma])

plt.plot(x,y,'b+:',label='data')
plt.plot(x,gaus(x,*popt),'ro:',label='fit')
plt.legend()
plt.title('Fig. 3 - Fit for Time Constant')
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.show()
</snippet></ROW><ROW><id>19207713</id><snippet>percentage</snippet></ROW><ROW><id>19207713</id><snippet>percentage = float(diff_size)/folder_size_to_remove*100
</snippet></ROW><ROW><id>19207720</id><snippet>*</snippet></ROW><ROW><id>19207720</id><snippet>&gt;&gt;&gt; a = [[]]*5
# [[], [], [], [], []]
&gt;&gt;&gt; id(a[0])
35773832
&gt;&gt;&gt; id(a[1])
35773832
&gt;&gt;&gt; id(a[2])
35773832
</snippet></ROW><ROW><id>19207720</id><snippet>&gt;&gt;&gt; b = [[] for _ in range(5)]
# [[], [], [], [], []]
&gt;&gt;&gt; id(b[0])
32160440
&gt;&gt;&gt; id(b[1])
35773904

&gt;&gt;&gt; b[0].append("foo")
&gt;&gt;&gt; b[1].append("bar")
&gt;&gt;&gt; b
# [['foo'], ['bar'], [], [], []]
</snippet></ROW><ROW><id>19207743</id><snippet>if</snippet></ROW><ROW><id>19207743</id><snippet>if</snippet></ROW><ROW><id>19207743</id><snippet>a = a/w</snippet></ROW><ROW><id>19207743</id><snippet>if b == 2:
    a = a*2
else:
    a = a/w
</snippet></ROW><ROW><id>19207743</id><snippet>a</snippet></ROW><ROW><id>19207743</id><snippet>a = a*2 if b==2 else a/w
</snippet></ROW><ROW><id>19207743</id><snippet>odd_numbers = [number if number%2 else number+1 for number in numbers]
</snippet></ROW><ROW><id>19207743</id><snippet>if</snippet></ROW><ROW><id>19207743</id><snippet>def oddify(number):
    if number%2:
        return number
    else:
        return number+1
odd_numbers = [oddify(number) for number in numbers]
</snippet></ROW><ROW><id>19207743</id><snippet>if</snippet></ROW><ROW><id>19207743</id><snippet>if</snippet></ROW><ROW><id>19207743</id><snippet>odd_numbers = [number for number in numbers if number % 2]
</snippet></ROW><ROW><id>19208538</id><snippet>import re

# find out spaces' positions common to all rows
spaces = sorted(set.intersection(*[
    set(m.end() for m in re.finditer(ur'\s', line))
    for line in data
]))

# split by these positions
for line in data:
    row = []
    p = 0
    for s in spaces:
        row.append(line[p:s])
        p = s
    row.append(line[p:])
    row = filter(len, map(unicode.strip, row))
    print ' | '.join(row) # or whatever you want...
</snippet></ROW><ROW><id>19208538</id><snippet>data = u"""
Clnr   Kontonr     Konto                Valuta  Bokföringsdatum  Transaktionsdatum  Referens                            Kontohändelse                   Belopp
12345  1234567890  vardagskonto         SEK     13-09-30         13-09-30           Hyresgästför                        Autogiro                        -15,00
12345  1234567890  vardagskonto         SEK     13-09-30         13-09-30           SPOTIFY SPOTIFY                     Kortköp/uttag                   -19,00
12345  1234567890  vardagskonto         SEK     13-09-30         13-09-30           +46123456789                        Swish mottagen                   80,00
12345  1234567890  vardagskonto         SEK     13-09-30         13-09-30           PRIS NYCKELKUND                     Debiteringsavgift               -49,00
12345  1234567890  vardagskonto         SEK     13-09-27         13-09-27           12345678                            direktbetalning                -301,00
12345  1234567890  vardagskonto         SEK     13-09-27         13-09-27           Unionen                             Bg-bet. via internet           -125,00
12345  1234567890  vardagskonto         SEK     13-09-26         13-09-26           123456789012345                     Överföring                   -1 000,00
""".strip().splitlines()
</snippet></ROW><ROW><id>19208538</id><snippet>Clnr | Kontonr | Konto | Valuta | Bokföringsdatum | Transaktionsdatum | Referens | Kontohändelse | Belopp
12345 | 1234567890 | vardagskonto | SEK | 13-09-30 | 13-09-30 | Hyresgästför | Autogiro | -15,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-30 | 13-09-30 | SPOTIFY SPOTIFY | Kortköp/uttag | -19,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-30 | 13-09-30 | +46123456789 | Swish mottagen | 80,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-30 | 13-09-30 | PRIS NYCKELKUND | Debiteringsavgift | -49,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-27 | 13-09-27 | 12345678 | direktbetalning | -301,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-27 | 13-09-27 | Unionen | Bg-bet. via internet | -125,00
12345 | 1234567890 | vardagskonto | SEK | 13-09-26 | 13-09-26 | 123456789012345 | Överföring | -1 000,00
</snippet></ROW><ROW><id>19208625</id><snippet>for file in download_range("2", "10"):
    do_something_with_one(file)
</snippet></ROW><ROW><id>19208625</id><snippet>do_something_with_many(download_range("2", "10"))
</snippet></ROW><ROW><id>19208625</id><snippet>download_range("2", "10")</snippet></ROW><ROW><id>19208625</id><snippet>(downloading_class("2"), downloading_class("4"), downloading_class("6"))</snippet></ROW><ROW><id>19208625</id><snippet>reversed(download_range("2", 10"))</snippet></ROW><ROW><id>19208625</id><snippet>(file for file in download_range("2", "10") if file.size() &lt; 1000)</snippet></ROW><ROW><id>19208680</id><snippet>start_date</snippet></ROW><ROW><id>19208680</id><snippet>CharField</snippet></ROW><ROW><id>19208680</id><snippet>DataForm</snippet></ROW><ROW><id>19208680</id><snippet>forms.DateTimeField</snippet></ROW><ROW><id>19208680</id><snippet>empty_values</snippet></ROW><ROW><id>19208680</id><snippet>empty_values</snippet></ROW><ROW><id>19208680</id><snippet>ValidationError</snippet></ROW><ROW><id>19208680</id><snippet>forms.CharField</snippet></ROW><ROW><id>19208680</id><snippet>forms.DateTimeField</snippet></ROW><ROW><id>19208680</id><snippet>CharField</snippet></ROW><ROW><id>19208680</id><snippet>''</snippet></ROW><ROW><id>19208680</id><snippet>DateTimeField</snippet></ROW><ROW><id>19208680</id><snippet>None</snippet></ROW><ROW><id>19208680</id><snippet>model.DateTimeField</snippet></ROW><ROW><id>19208680</id><snippet>None</snippet></ROW><ROW><id>19208680</id><snippet>''</snippet></ROW><ROW><id>19208680</id><snippet>''</snippet></ROW><ROW><id>19208680</id><snippet>models.DateTimeField</snippet></ROW><ROW><id>19208680</id><snippet>''</snippet></ROW><ROW><id>19208680</id><snippet>DateTimeField</snippet></ROW><ROW><id>19208707</id><snippet>class Polyline(self):
    ...
    def getCoordinates(self):
        coords = []
        for point in self.points:
            coords.append(point.x)
            coords.append(point.y)
        return coords
</snippet></ROW><ROW><id>19208707</id><snippet>for polyline in polylines:
    canvas.create_line(polyline.getCoordinates())
</snippet></ROW><ROW><id>19208774</id><snippet>locale</snippet></ROW><ROW><id>19208774</id><snippet>format(val, ',')</snippet></ROW><ROW><id>19208774</id><snippet>,</snippet></ROW><ROW><id>19208774</id><snippet>.</snippet></ROW><ROW><id>19208774</id><snippet>&gt;&gt;&gt; a = 1234567.89
&gt;&gt;&gt; from string import maketrans
&gt;&gt;&gt; trans = maketrans('.,', ',.')
&gt;&gt;&gt; format(a, ',.2f').translate(trans)
'1.234.567,89'
</snippet></ROW><ROW><id>19208838</id><snippet>$PATH</snippet></ROW><ROW><id>19208838</id><snippet>PATH</snippet></ROW><ROW><id>19208838</id><snippet>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment</snippet></ROW><ROW><id>19208838</id><snippet>path.reg</snippet></ROW><ROW><id>19208838</id><snippet>REGEDIT4

[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment]
"PATH"="{put old value of %PATH% here};C:\\path\\to\\python\\dll"
</snippet></ROW><ROW><id>19208838</id><snippet>regedit path.reg</snippet></ROW><ROW><id>19208838</id><snippet>regedit</snippet></ROW><ROW><id>19208838</id><snippet>%PATH%</snippet></ROW><ROW><id>19208838</id><snippet>let $PATH.=';C:\path\to\python\dll'
</snippet></ROW><ROW><id>19209195</id><snippet>with-statement</snippet></ROW><ROW><id>19209195</id><snippet>connection = MySQLdb.connect(
    host=config.HOST, user=config.USER,
    passwd=config.PASS, db=config.MYDB, )
with connection as cursor:
    print(cursor)
    # the connection is closed for you automatically 
    # when Python leaves the `with-suite`.
</snippet></ROW><ROW><id>19209195</id><snippet>connect</snippet></ROW><ROW><id>19209748</id><snippet>python Question7.py</snippet></ROW><ROW><id>19209748</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>19210181</id><snippet>date_range</snippet></ROW><ROW><id>19210181</id><snippet>Series</snippet></ROW><ROW><id>19210181</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>19210181</id><snippet>1013</snippet></ROW><ROW><id>19210181</id><snippet>2013</snippet></ROW><ROW><id>19210181</id><snippet>&gt;&gt;&gt; x = pd.Series(np.random.randint(8,24,23892344)) # make some random data
&gt;&gt;&gt; when = pd.date_range(start=pd.datetime(2013,1,1),freq='S',periods=len(x))
&gt;&gt;&gt; when
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 00:00:00, ..., 2013-10-04 12:45:43]
Length: 23892344, Freq: S, Timezone: None
</snippet></ROW><ROW><id>19210181</id><snippet>&gt;&gt;&gt; x_with_time = pd.Series(x.values, index=when)
&gt;&gt;&gt; x_with_time
2013-01-01 00:00:00    13
2013-01-01 00:00:01    14
2013-01-01 00:00:02    15
2013-01-01 00:00:03    22
2013-01-01 00:00:04    16
[...]
2013-10-04 12:45:41    21
2013-10-04 12:45:42    16
2013-10-04 12:45:43    15
Freq: S, Length: 23892344
</snippet></ROW><ROW><id>19210377</id><snippet>OPENSHIFT_APP_NAME</snippet></ROW><ROW><id>19210377</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('OPENSHIFT_APP_NAME', 'A sensible default'),
</snippet></ROW><ROW><id>19210442</id><snippet>str.format</snippet></ROW><ROW><id>19210442</id><snippet>&gt;&gt;&gt; array_alpha = [ 133, 53, 234, 241 ]
&gt;&gt;&gt; print ''.join('{:02x}'.format(x) for x in array_alpha)
8535eaf1
</snippet></ROW><ROW><id>19210442</id><snippet>format</snippet></ROW><ROW><id>19210442</id><snippet>&gt;&gt;&gt; print ''.join(format(x, '02x') for x in array_alpha)
8535eaf1
</snippet></ROW><ROW><id>19210442</id><snippet>bytearray</snippet></ROW><ROW><id>19210442</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>19210442</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(bytearray(array_alpha))
'8535eaf1'
</snippet></ROW><ROW><id>19210514</id><snippet>\U</snippet></ROW><ROW><id>19210514</id><snippet>"tweet photo: 'tweeted from python test' + path: 'C:\\Users\\akhya_000\\Pictures\\My Pictures\\Bing.png"
</snippet></ROW><ROW><id>19210514</id><snippet>r"tweet photo: 'tweeted from python test' + path: 'C:\Users\akhya_000\Pictures\My Pictures\Bing.png"
</snippet></ROW><ROW><id>19210619</id><snippet>send_keys</snippet></ROW><ROW><id>19210619</id><snippet>click</snippet></ROW><ROW><id>19210619</id><snippet>WebElement</snippet></ROW><ROW><id>19210619</id><snippet>send_click</snippet></ROW><ROW><id>19210619</id><snippet>element_result[0].send_click()
</snippet></ROW><ROW><id>19210619</id><snippet>element_result[0].click()
</snippet></ROW><ROW><id>19210633</id><snippet>class Calculator:
    def __init__(self):
        # ... this is where you'd set up the rest of the GUI ..
        self.buttons = {}  # Store the calculator buttons in a dictioanry
        for num in [str(x) for x in range(10)]:
            self.buttons[num] = Tkinter.Button(self.keyFrame, text=num, command=self.callbackCreator(num))
        self.currentNumber = ""

    def callbackCreator(self, num):
        return lambda event:self.buttonCallback(num)

    def buttonCallback(key):
        if key in "0123456789":        # Check if the button is a digit or not
            self.currentNumber += key  # add new digit
</snippet></ROW><ROW><id>19210712</id><snippet>None</snippet></ROW><ROW><id>19210712</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(str)
&gt;&gt;&gt; d['a'] = 'data'
&gt;&gt;&gt; d['b'] = 1
&gt;&gt;&gt; d
defaultdict(&lt;type 'str'&gt;, {'a': 'data', 'b': 1})
&gt;&gt;&gt; a = d['a']
&gt;&gt;&gt; b = d['b']
&gt;&gt;&gt; c = d['c']
&gt;&gt;&gt; a, b, c
('data', 1, '')
&gt;&gt;&gt; d
defaultdict(&lt;type 'str'&gt;, {'a': 'data', 'c': '', 'b': 1})
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19210751</id><snippet>import gevent
from gevent import monkey; monkey.patch_all()
</snippet></ROW><ROW><id>19210751</id><snippet>run</snippet></ROW><ROW><id>19210751</id><snippet>open</snippet></ROW><ROW><id>19210751</id><snippet>run</snippet></ROW><ROW><id>19210751</id><snippet>gevent.joinall</snippet></ROW><ROW><id>19210751</id><snippet>def run(self):
    return gevent.spawn(self.open)

c1 = Crawler()
c2 = Crawler()
c3 = Crawler()
crawling_tasks = [c.run() for c in (c1,c2,c3)]
gevent.joinall(crawling_tasks)

print [c.links for c in (c1, c2, c3)]
</snippet></ROW><ROW><id>19210808</id><snippet>print</snippet></ROW><ROW><id>19210808</id><snippet>return</snippet></ROW><ROW><id>19210808</id><snippet>def rate_score(selection):
    if selection &lt; 1000:
        return "Nothing to be proud of!"
    else:
        return "Now that's something to be proud of!"

def main():
    print "# rate_score program #"
    while True:
        try:
            selection = int(raw_input('Please enter your score: '))
        except ValueError:
            print 'The value you entered does not appear to be a number !'
            continue
        print 'You entered [ %s ] as your score' % selection
        response = rate_score(selection) # Now the function rate_score returns the response
        print response # Now we can print the response rate_score() returned

main()
</snippet></ROW><ROW><id>19210808</id><snippet>raw_input</snippet></ROW><ROW><id>19210808</id><snippet>raw_input()</snippet></ROW><ROW><id>19210808</id><snippet>int()</snippet></ROW><ROW><id>19210808</id><snippet>int()</snippet></ROW><ROW><id>19210808</id><snippet>ValueError</snippet></ROW><ROW><id>19210808</id><snippet>&gt;&gt;&gt; int('notanumber')
ValueError: invalid literal for int() with base 10: 'notanumber'
</snippet></ROW><ROW><id>19210808</id><snippet>ValueError</snippet></ROW><ROW><id>19210808</id><snippet>except</snippet></ROW><ROW><id>19210808</id><snippet>except</snippet></ROW><ROW><id>19210808</id><snippet>try</snippet></ROW><ROW><id>19210808</id><snippet>try:
    # begin code which we know will throw the `ValueError`
    selection = int(raw_input('Please enter your score: '))
except ValueError:
    # what to do if the `ValueError` occurs?
    # tell the user that what they entered doesn't appear to be a number
    print 'The value you entered does not appear to be a number !'
    continue
</snippet></ROW><ROW><id>19210901</id><snippet>date_posted = db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>19210999</id><snippet>angle = findA(particles[el], particles[nuc]) + 0.001</snippet></ROW><ROW><id>19210999</id><snippet>el</snippet></ROW><ROW><id>19210999</id><snippet>nuc</snippet></ROW><ROW><id>19210999</id><snippet>particles</snippet></ROW><ROW><id>19210999</id><snippet>list</snippet></ROW><ROW><id>19210999</id><snippet>particles</snippet></ROW><ROW><id>19210999</id><snippet>tuple</snippet></ROW><ROW><id>19211008</id><snippet>lineNum</snippet></ROW><ROW><id>19211008</id><snippet>csvReader.line_num</snippet></ROW><ROW><id>19211008</id><snippet>for row in csvReader:
    print(csvReader.line_num)
</snippet></ROW><ROW><id>19211017</id><snippet>anotherObject = someObject
</snippet></ROW><ROW><id>19211017</id><snippet>from copy import copy

anotherObject = copy(someObject)
</snippet></ROW><ROW><id>19211195</id><snippet>sys.last_value</snippet></ROW><ROW><id>19211195</id><snippet>&gt;&gt;&gt; no_such_var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'no_such_var' is not defined
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.last_value
NameError("name 'no_such_var' is not defined",)
&gt;&gt;&gt; sys.last_value.args
("name 'no_such_var' is not defined",)
</snippet></ROW><ROW><id>19211195</id><snippet>&gt;&gt;&gt; no_such_var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'no_such_var' is not defined
&gt;&gt;&gt; import pdb, sys
&gt;&gt;&gt; pdb.set_trace()
--Return--
&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None
(Pdb) sys.last_value
NameError("name 'no_such_var' is not defined",)
</snippet></ROW><ROW><id>19211216</id><snippet>default_factory</snippet></ROW><ROW><id>19211216</id><snippet>__missing__()</snippet></ROW><ROW><id>19211216</id><snippet>None</snippet></ROW><ROW><id>19211216</id><snippet>&gt;&gt;&gt; dic = defaultdict(lambda:1)
&gt;&gt;&gt; dic[5]
1
&gt;&gt;&gt; dic.default_factory = lambda:2
&gt;&gt;&gt; dic[100]
2
</snippet></ROW><ROW><id>19211327</id><snippet>cp437</snippet></ROW><ROW><id>19211327</id><snippet>#!python3
#coding: utf8
print('Some text\nwith Chinese 美国\ncp1252 ÀÁÂÃ\nand cp437 ░▒▓')
</snippet></ROW><ROW><id>19211327</id><snippet>Traceback (most recent call last):
  File "C:\test.py", line 5, in &lt;module&gt;
    print('Some text\nwith Chinese \u7f8e\u56fd\ncp1252 \xc0\xc1\xc2\xc3\nand cp437 ░▒▓')
  File "C:\Python33\lib\encodings\cp437.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_map)[0]
UnicodeEncodeError: 'charmap' codec can't encode characters in position 24-25: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>19211327</id><snippet>stdout</snippet></ROW><ROW><id>19211327</id><snippet>#!python3
#coding: utf8
import io,sys
sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=sys.stdout.encoding,errors='replace')
print('Some text\nwith Chinese 美国\ncp1252 ÀÁÂÃ\nand cp437 ░▒▓')
</snippet></ROW><ROW><id>19211327</id><snippet>Some text
with Chinese ??
cp1252 ????
and cp437 ░▒▓
</snippet></ROW><ROW><id>19211327</id><snippet>stdout</snippet></ROW><ROW><id>19211327</id><snippet>buffer</snippet></ROW><ROW><id>19211327</id><snippet>sys.stdout.buffer.write('Some text\nwith Chinese 美国\ncp1252 ÀÁÂÃ\nand cp437 ░▒▓'.encode('cp437',errors='replace'))
</snippet></ROW><ROW><id>19211327</id><snippet>stdout</snippet></ROW><ROW><id>19211327</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>19211327</id><snippet>PYTHONIOENCODING=cp437:replace
</snippet></ROW><ROW><id>19211327</id><snippet>#!python3
#coding: utf8
with open('out.txt','w',encoding='utf8') as f:
    f.write('Some text\nwith Chinese 美国\ncp1252 ÀÁÂÃ\nand cp437 ░▒▓')
</snippet></ROW><ROW><id>19211426</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>19211536</id><snippet>import warnings
import sys

if sys.version_info &lt; (3,0):
    warnings.warn("company.package will be ported to Python 3 soon. Make sure that your script is Py3k-safe!")
</snippet></ROW><ROW><id>19211536</id><snippet>2to3</snippet></ROW><ROW><id>19211536</id><snippet>urllib</snippet></ROW><ROW><id>19211536</id><snippet>cStringIO</snippet></ROW><ROW><id>19211536</id><snippet>import</snippet></ROW><ROW><id>19211566</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19211566</id><snippet>virtualenv</snippet></ROW><ROW><id>19211566</id><snippet>PATH</snippet></ROW><ROW><id>19211566</id><snippet>PYTHONPATH=/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages</snippet></ROW><ROW><id>19211566</id><snippet>pip install</snippet></ROW><ROW><id>19211645</id><snippet>man select</snippet></ROW><ROW><id>19211716</id><snippet>x &lt;&lt; y</snippet></ROW><ROW><id>19211716</id><snippet>x &gt;&gt; y</snippet></ROW><ROW><id>19211716</id><snippet>x &amp; y</snippet></ROW><ROW><id>19211716</id><snippet>x | y</snippet></ROW><ROW><id>19211716</id><snippet>~ x</snippet></ROW><ROW><id>19211716</id><snippet>x ^ y</snippet></ROW><ROW><id>19211716</id><snippet>a</snippet></ROW><ROW><id>19211716</id><snippet>b</snippet></ROW><ROW><id>19211716</id><snippet>~(a &amp; b)
</snippet></ROW><ROW><id>19211716</id><snippet>bnand = lambda a, b: ~(a &amp; b)
</snippet></ROW><ROW><id>19211716</id><snippet>not (a and b)
</snippet></ROW><ROW><id>19211716</id><snippet>and</snippet></ROW><ROW><id>19211716</id><snippet>&amp;</snippet></ROW><ROW><id>19211716</id><snippet>not</snippet></ROW><ROW><id>19211716</id><snippet>~</snippet></ROW><ROW><id>19211795</id><snippet>reports_by_status = {'new': [],
     'read': [],
     'accepted': [],
     'deined': [],    # denied?
     'resubmitted': []}

for report in reports:
    d[report.status].append(report)
</snippet></ROW><ROW><id>19211795</id><snippet>status</snippet></ROW><ROW><id>19211795</id><snippet>reports_by_status = {}
for report in reports:
    if report.status not in reports_by_status:
        reports_by_status[status] = []
    reports_by_status[status].append(report)
</snippet></ROW><ROW><id>19211795</id><snippet>reports_by_status = {}
for report in reports:
    reports_by_status.set_default(report.status, []).append(report)
</snippet></ROW><ROW><id>19211795</id><snippet>from collections import defaultdict
by_status = defaultdict(list)
for report in reports:
    by_status[report].append(report)
</snippet></ROW><ROW><id>19211795</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19211795</id><snippet>from itertools import groupby
by_status = {}
for category, group in groupby(reports, lambda x: x.status):
    by_status[category] = list(group)
</snippet></ROW><ROW><id>19211795</id><snippet>map()</snippet></ROW><ROW><id>19211795</id><snippet>from itertools import groupby
dict([(k:list(v)) for k, v in groupby(reports, lambda x: x.status)])
</snippet></ROW><ROW><id>19211795</id><snippet>from itertools import groupby
{k:list(v) for k, v in groupby(reports, lambda x: x.status)}
</snippet></ROW><ROW><id>19211795</id><snippet>from itertools import groupby
from operator import attrgetter
{k:list(v) for k, v in groupby(reports, attrgetter('status'))}
</snippet></ROW><ROW><id>19211875</id><snippet>all</snippet></ROW><ROW><id>19211875</id><snippet>any</snippet></ROW><ROW><id>19211875</id><snippet>all()</snippet></ROW><ROW><id>19211875</id><snippet>False</snippet></ROW><ROW><id>19211875</id><snippet>any()</snippet></ROW><ROW><id>19211875</id><snippet>False</snippet></ROW><ROW><id>19211875</id><snippet>if any(foobars) == big_foobar:
</snippet></ROW><ROW><id>19211875</id><snippet>any(foobars)</snippet></ROW><ROW><id>19211875</id><snippet>True</snippet></ROW><ROW><id>19211875</id><snippet>False</snippet></ROW><ROW><id>19211875</id><snippet>big_foobar</snippet></ROW><ROW><id>19211875</id><snippet>False</snippet></ROW><ROW><id>19211875</id><snippet>if any(x == big_foobar for x in foobars):
</snippet></ROW><ROW><id>19211875</id><snippet>foobars</snippet></ROW><ROW><id>19211875</id><snippet>big_foobar</snippet></ROW><ROW><id>19211875</id><snippet>tmp = (x == big_foobar for x in foobars)
</snippet></ROW><ROW><id>19211875</id><snippet>any</snippet></ROW><ROW><id>19211875</id><snippet>tmp</snippet></ROW><ROW><id>19211875</id><snippet>True</snippet></ROW><ROW><id>19211875</id><snippet>True</snippet></ROW><ROW><id>19211875</id><snippet>foobars = ['big', 'small', 'medium', 'nice', 'ugly']
big_foobar = 'big'
any(['big' == big_foobar, 'small' == big_foobar, 'medium' == big_foobar, ...])
</snippet></ROW><ROW><id>19211875</id><snippet>any(x == y for x in xs)</snippet></ROW><ROW><id>19211875</id><snippet>y in xs</snippet></ROW><ROW><id>19211875</id><snippet>any(x &gt; 5 for x in range(4))  # =&gt; False
all(isinstance(x, int) for x in range(10))  # =&gt; True
any(x == 'Erik' for x in ['Erik', 'John', 'Jane', 'Jim'])  # =&gt; True
all([True, True, True, False, True])  # =&gt; False
</snippet></ROW><ROW><id>19211875</id><snippet>any</snippet></ROW><ROW><id>19211875</id><snippet>all</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>threading</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>threading</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>threading.Thread</snippet></ROW><ROW><id>19211933</id><snippet>.join()</snippet></ROW><ROW><id>19211933</id><snippet>threading.Thread</snippet></ROW><ROW><id>19211933</id><snippet>threading.Thread</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>.join()</snippet></ROW><ROW><id>19211933</id><snippet>.join()</snippet></ROW><ROW><id>19211933</id><snippet>threading</snippet></ROW><ROW><id>19211933</id><snippet>threading</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>threading</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>thread</snippet></ROW><ROW><id>19211933</id><snippet>_thread</snippet></ROW><ROW><id>19211998</id><snippet>delta = list(delta)[0]
</snippet></ROW><ROW><id>19212311</id><snippet>loc</snippet></ROW><ROW><id>19212311</id><snippet>In [90]: df
Out[90]:
    0   1   2   3   4   5
0   1 NaN NaN   1   1 NaN
1 NaN NaN NaN NaN NaN NaN
2   1   1 NaN NaN   1 NaN
3   1 NaN   1   1 NaN NaN
4 NaN NaN NaN NaN NaN NaN

In [91]: df.loc[df.sum(1) &gt; 0, df.sum(0) &gt; 0]
Out[91]:
   0   1   2   3   4
0  1 NaN NaN   1   1
2  1   1 NaN NaN   1
3  1 NaN   1   1 NaN
</snippet></ROW><ROW><id>19212311</id><snippet>df</snippet></ROW><ROW><id>19212311</id><snippet>In [112]: df
Out[112]:
    a   b   c   d   e
0   0   1   1 NaN   1
1 NaN NaN NaN NaN NaN
2   0   0   0 NaN   0
3   0   0   1 NaN   1
4   1   1   1 NaN   1
5   0   0   0 NaN   0
6   1   0   1 NaN   0
</snippet></ROW><ROW><id>19212311</id><snippet>In [113]: row_sum = df.sum()

In [114]: row_sum &gt; 0
Out[114]:
a     True
b     True
c     True
d    False
e     True
dtype: bool
</snippet></ROW><ROW><id>19212311</id><snippet>index</snippet></ROW><ROW><id>19212311</id><snippet>row_sum</snippet></ROW><ROW><id>19212311</id><snippet>columns</snippet></ROW><ROW><id>19212311</id><snippet>df</snippet></ROW><ROW><id>19212311</id><snippet>row_sum &gt; 0</snippet></ROW><ROW><id>19212311</id><snippet>df</snippet></ROW><ROW><id>19212475</id><snippet>min</snippet></ROW><ROW><id>19212475</id><snippet>max</snippet></ROW><ROW><id>19212475</id><snippet>min</snippet></ROW><ROW><id>19212475</id><snippet>max</snippet></ROW><ROW><id>19212475</id><snippet>timedelta</snippet></ROW><ROW><id>19212475</id><snippet>from datetime import datetime

# Start with the initial list
A = [u'Sun Oct 06 18:00:55 +0000 2013', u'Sun Oct 06 17:57:41 +0000 2013', u'Sun Oct 06 17:55:44 +0000 2013', u'Sun Oct 06 17:54:10 +0000 2013', u'Sun Oct 06 17:35:58 +0000 2013', u'Sun Oct 06 17:35:58 +0000 2013', u'Sun Oct 06 17:35:25 +0000 2013', u'Sun Oct 06 17:34:39 +0000 2013', u'Sun Oct 06 17:34:39 +0000 2013', u'Sun Oct 06 17:34:39 +0000 2013', u'Sun Oct 06 17:30:35 +0000 2013', u'Sun Oct 06 17:25:28 +0000 2013', u'Sun Oct 06 17:24:04 +0000 2013', u'Sun Oct 06 17:24:04 +0000 2013', u'Sun Oct 06 17:22:08 +0000 2013', u'Sun Oct 06 17:22:08 +0000 2013', u'Sun Oct 06 17:21:00 +0000 2013', u'Sun Oct 06 17:18:49 +0000 2013', u'Sun Oct 06 17:18:49 +0000 2013', u'Sun Oct 06 17:15:29 +0000 2013', u'Sun Oct 06 17:15:29 +0000 2013', u'Sun Oct 06 17:13:35 +0000 2013', u'Sun Oct 06 17:12:18 +0000 2013', u'Sun Oct 06 17:12:00 +0000 2013', u'Sun Oct 06 17:07:34 +0000 2013', u'Sun Oct 06 17:03:59 +0000 2013']

# This is the format string the date/time stamps are using
# On Python 3.3 on Windows you can use this format
# s_format = "%a %b %d %H:%M:%S %z %Y"
# However, Python 2.7 on Windows doesn't work with that. If all of your date/time stamps use the same timezone you can do:
s_format = "%a %b %d %H:%M:%S +0000 %Y"

# Convert the text list into datetime objects
A = [datetime.strptime(d, s_format) for d in A]

# Get the extremes
oldest = min(A)
newest = max(A)

# If you substract oldest from newest you get a timedelta object, which can give you the total number of seconds between them. You can use this to calculate days, hours, and minutes.
delta = int((newest - oldest).total_seconds())
delta_days, rem = divmod(delta, 86400)
delta_hours, rem = divmod(rem, 3600)
delta_minutes, delta_seconds = divmod(rem, 60)
</snippet></ROW><ROW><id>19212548</id><snippet>p = permutations(range(10), 2)
result = [str(x[0]) + str(x[1]) for x in p]
</snippet></ROW><ROW><id>19212598</id><snippet>range(10)</snippet></ROW><ROW><id>19212598</id><snippet>0</snippet></ROW><ROW><id>19212598</id><snippet>l.release()</snippet></ROW><ROW><id>19212611</id><snippet>select</snippet></ROW><ROW><id>19212611</id><snippet>accept</snippet></ROW><ROW><id>19212611</id><snippet>serversocket.setblocking(False)

readable, writable, err = select.select([serversocket.fileno()], [], [], 1)
if readable:
    clientsocket, address = serversocket.accept()
</snippet></ROW><ROW><id>19212611</id><snippet>while</snippet></ROW><ROW><id>19212611</id><snippet>readable</snippet></ROW><ROW><id>19212611</id><snippet>select</snippet></ROW><ROW><id>19212720</id><snippet>ssh -X</snippet></ROW><ROW><id>19213049</id><snippet>plt.show()
</snippet></ROW><ROW><id>19213049</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
g1 = nx.petersen_graph()
nx.draw(g1)
plt.show()
</snippet></ROW><ROW><id>19213049</id><snippet>plt.ion()</snippet></ROW><ROW><id>19213049</id><snippet>plt.show()</snippet></ROW><ROW><id>19213049</id><snippet>plt.ion()</snippet></ROW><ROW><id>19213049</id><snippet>plt.show()</snippet></ROW><ROW><id>19213049</id><snippet>plt.ion()</snippet></ROW><ROW><id>19213156</id><snippet>pred</snippet></ROW><ROW><id>19213156</id><snippet>results.append(accuracy_score(target[testcv], [x[1] for x in pred]) )
</snippet></ROW><ROW><id>19213156</id><snippet>results.append(accuracy_score(target[testcv], pred) )
</snippet></ROW><ROW><id>19213156</id><snippet>results.append(accuracy_score(target[testcv], [x for x in pred]) )
</snippet></ROW><ROW><id>19213241</id><snippet>(function() {
    function blah(a, b, c) {
        ...
    }
})();

(function() {
    blah(1, 2, 3);
});
</snippet></ROW><ROW><id>19213241</id><snippet>blah</snippet></ROW><ROW><id>19213241</id><snippet>window.blah = function(a, b, c) {
    ...
}
</snippet></ROW><ROW><id>19213271</id><snippet>size = 8; range(size, 12)</snippet></ROW><ROW><id>19213271</id><snippet>[8,9,10,11]</snippet></ROW><ROW><id>19213271</id><snippet>randint</snippet></ROW><ROW><id>19213271</id><snippet>def randompassword():
  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
  size = random.randint(8, 12)
  return ''.join(random.choice(chars) for x in range(size))
</snippet></ROW><ROW><id>19213283</id><snippet>&gt;&gt;&gt; "{:s}_{{later}}_{:s}".format("foo", "bar")
'foo_{later}_bar'
&gt;&gt;&gt; _.format(later="later")
'foo_later_bar'
</snippet></ROW><ROW><id>19213283</id><snippet>&gt;&gt;&gt; "{{:s}}_{later}_{{:s}}".format(later="later")
'{:s}_later_{:s}'
&gt;&gt;&gt; _.format("foo", "bar")
'foo_later_bar'
</snippet></ROW><ROW><id>19213310</id><snippet>import tkinter as tk
import time

class ButtonTimer:
    def __init__(self, root):
        self.master = root
        self.button = tk.Button(self.master, text="press me")  # Notice I haven't assigned the button a command - we're going to bind mouse events instead of using the built in command callback.
        self.button.bind('&lt;ButtonPress&gt;', self.press)       # call 'press' method when the button is pressed
        self.button.bind('&lt;ButtonRelease&gt;', self.release)   # call 'release' method when the button is released
        self.label = tk.Label(self.master)
        self.startTime = time.time()
        self.endTime = self.startTime

        self.button.grid(row=1, column=1)
        self.label.grid(row=2, column=1)

    def press(self, *args):
        self.startTime = time.time()

    def release(self, *args):
        self.endTime = time.time()
        self.label.config(text="Time pressed: "+str(round(self.endTime - self.startTime, 2))+" seconds")

root = tk.Tk()
b = ButtonTimer(root)
root.mainloop()
</snippet></ROW><ROW><id>19213310</id><snippet>Tkinter</snippet></ROW><ROW><id>19213310</id><snippet>tkinter</snippet></ROW><ROW><id>19213327</id><snippet>python --help</snippet></ROW><ROW><id>19213353</id><snippet>submit</snippet></ROW><ROW><id>19213353</id><snippet>action</snippet></ROW><ROW><id>19213353</id><snippet>&lt;form action="/quiz_answers" method="POST"&gt;
</snippet></ROW><ROW><id>19213353</id><snippet>&lt;input type="submit" value="Submit!" /&gt;
</snippet></ROW><ROW><id>19213353</id><snippet>http://your_server/quiz_answers</snippet></ROW><ROW><id>19213360</id><snippet>textsize</snippet></ROW><ROW><id>19213360</id><snippet>import Image, ImageDraw
from random import randint
make_color = lambda : (randint(50, 255), randint(50, 255), randint(50,255))

image = Image.new("RGB", (1200,20), (0,0,0)) # scrap image
draw = ImageDraw.Draw(image)
image2 = Image.new("RGB", (1200, 20), (0,0,0)) # final image

fill = " o "
x = 0
w_fill, y = draw.textsize(fill)
x_draw, x_paste = 0, 0
for c in "The quick brown fox jumps over the lazy dog.":
    w_full = draw.textsize(fill+c)[0]
    w = w_full - w_fill     # the width of the character on its own
    draw.text((x_draw,0), fill+c, make_color())
    iletter = image.crop((x_draw+w_fill, 0, x_draw+w_full, y))
    image2.paste(iletter, (x_paste, 0))
    x_draw += w_full
    x_paste += w
image2.show()
</snippet></ROW><ROW><id>19213360</id><snippet>import Image, ImageDraw
import string

A = " ".join(string.printable)

image = Image.new("RGB", (1200,20), (0,0,0))
draw = ImageDraw.Draw(image)

# make a dictionary of character images
xcuts = [draw.textsize(A[:i+1])[0] for i in range(len(A))]
xcuts = [0]+xcuts
ycut = draw.textsize(A)[1]
draw.text((0,0), A, (255,255,255))
# ichars is like {"a":(width,image), "b":(width,image), ...}
ichars = dict([(A[i], (xcuts[i+1]-xcuts[i]+1, image.crop((xcuts[i]-1, 0, xcuts[i+1], ycut)))) for i in range(len(xcuts)-1)])

# Test it...
image2 = Image.new("RGB", (400,20), (0,0,0))
x = 0
for c in "This is just a nifty text string":
    w, char_image = ichars[c]
    image2.paste(char_image, (x, 0))
    x += w
</snippet></ROW><ROW><id>19213360</id><snippet>ichar</snippet></ROW><ROW><id>19213390</id><snippet>text = """
I have a dictionary of 2 and 3 word phrases that I want to search in rss feeds for a match. 

I grab   the rss feeds, process them and they end up as a string IN a list entitled "documents". 
I want to check the dictionary below and if any of the phrases in the dictionary match part of a string of text I want to return the values for the key. 
I am not sure about the best way to approach this problem. Any suggestions would be greatly appreciated.
"""

ngrams = ["grab the rss", "approach this", "in"]

import re

counts = {}
for ngram in ngrams:
    words = ngram.rsplit()
    pattern = re.compile(r'%s' % "\s+".join(words),
        re.IGNORECASE)
    counts[ngram] = len(pattern.findall(text))

print counts
</snippet></ROW><ROW><id>19213390</id><snippet>{'grab the rss': 1, 'approach this': 1, 'in': 5}
</snippet></ROW><ROW><id>19213544</id><snippet>math.sin</snippet></ROW><ROW><id>19213544</id><snippet>math.radians(degValue)</snippet></ROW><ROW><id>19213549</id><snippet>&gt;&gt;&gt; numToBaseB(1024,2)
'10000000000'
&gt;&gt;&gt; numToBaseB(4,2)
'100'
</snippet></ROW><ROW><id>19213549</id><snippet>print(numToBaseB(4,2))</snippet></ROW><ROW><id>19213583</id><snippet>parameter</snippet></ROW><ROW><id>19213583</id><snippet>None</snippet></ROW><ROW><id>19213583</id><snippet>""</snippet></ROW><ROW><id>19213583</id><snippet>None</snippet></ROW><ROW><id>19213583</id><snippet>if parameter:
    # use parameter (well your expression using `" " + parameter` in this case
else:
    # use ""
</snippet></ROW><ROW><id>19213583</id><snippet>and</snippet></ROW><ROW><id>19213583</id><snippet>or</snippet></ROW><ROW><id>19213583</id><snippet>a and b</snippet></ROW><ROW><id>19213583</id><snippet>b</snippet></ROW><ROW><id>19213583</id><snippet>True</snippet></ROW><ROW><id>19213583</id><snippet>a</snippet></ROW><ROW><id>19213583</id><snippet>a or b</snippet></ROW><ROW><id>19213583</id><snippet>a</snippet></ROW><ROW><id>19213583</id><snippet>True</snippet></ROW><ROW><id>19213583</id><snippet>b</snippet></ROW><ROW><id>19213583</id><snippet>parameter and (" " + parameter) or ""
</snippet></ROW><ROW><id>19213583</id><snippet>(parameter and (" " + parameter)) or  ""
#    A1               A2               B
#           A                     or   B
</snippet></ROW><ROW><id>19213583</id><snippet>parameter - A1</snippet></ROW><ROW><id>19213583</id><snippet>True</snippet></ROW><ROW><id>19213583</id><snippet>result = (True and " " + parameter) or ""

result = (" " + parameter) or ""

result = " " + parameter
</snippet></ROW><ROW><id>19213583</id><snippet>parameter - A1</snippet></ROW><ROW><id>19213583</id><snippet>None</snippet></ROW><ROW><id>19213583</id><snippet>result = (None and " " + parameter) or ""

result = None or ""

result = ""
</snippet></ROW><ROW><id>19213583</id><snippet>A if C else B</snippet></ROW><ROW><id>19213583</id><snippet>" " + parameter if parameter else ""
</snippet></ROW><ROW><id>19213583</id><snippet>if-else</snippet></ROW><ROW><id>19213926</id><snippet>options = [
    {'vehicle': 'Car', 'destination': 'Ghana', 'coeff': 0.3},
    {'vehicle': 'Van', 'destination': 'Nigeria', 'coeff': 0.2},
    {'vehicle': 'Truck', 'destination': 'Togo', 'coeff': 0.33},
    {'vehicle': 'Van', 'destination': 'Kenya', 'coeff': 0.17},
    {'vehicle': 'Truck', 'destination': 'Somalia', 'coeff': 0.31},
]
while True:
    print("Vehicle Shipping Rates to Africa")
    for i, opt in enumerate(options):
        print("%i. %s to %s" % (i+1, opt['vehicle'], opt['destination']))
    option = options[int(raw_input("Enter the choice:"))]
    value = float(raw_input("Enter the car price:"))
    cost = value / option['coeff']
    print("It would cost $%s to ship a %s that cost $%s to %s." % (cost, option['vehicle'], value, option['destination']))
    print("Vehicle price you entered: %s" % value)
    print("Shipping cost: %s" % cost)
    again = raw_input("Would you like to choose another selection, Y=Yes or N=No.")
    if again.lower() == 'n':
        break
print("Thank you our application.")
</snippet></ROW><ROW><id>19213953</id><snippet>return int(somefunc(d1, d2) &gt; 32)
</snippet></ROW><ROW><id>19213953</id><snippet>int(True) == 1</snippet></ROW><ROW><id>19213953</id><snippet>int(False) == 0</snippet></ROW><ROW><id>19213986</id><snippet>Timestamp</snippet></ROW><ROW><id>19213986</id><snippet>pandas</snippet></ROW><ROW><id>19213986</id><snippet>Timestamp</snippet></ROW><ROW><id>19213986</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19213986</id><snippet>In [6]: pd.Timestamp('now') + np.timedelta64(100, 'ns')
Out[6]: Timestamp('2013-10-06 21:09:19.000000100', tz=None)

In [7]: isinstance(_6, datetime.datetime)
Out[7]: True
</snippet></ROW><ROW><id>19213986</id><snippet>Series</snippet></ROW><ROW><id>19213986</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>19213986</id><snippet>In [8]: Series(date_range('now', periods=5))
Out[8]:
0   2013-10-06 21:11:37
1   2013-10-07 21:11:37
2   2013-10-08 21:11:37
3   2013-10-09 21:11:37
4   2013-10-10 21:11:37
dtype: datetime64[ns]
</snippet></ROW><ROW><id>19213986</id><snippet>'D'</snippet></ROW><ROW><id>19213986</id><snippet>In [11]: Series(date_range('1/1/2001', periods=5, freq='D'))
Out[11]:
0   2001-01-01 00:00:00
1   2001-01-02 00:00:00
2   2001-01-03 00:00:00
3   2001-01-04 00:00:00
4   2001-01-05 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>19213986</id><snippet>values</snippet></ROW><ROW><id>19213986</id><snippet>Series</snippet></ROW><ROW><id>19213986</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19213986</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>19213986</id><snippet>In [12]: s = Series(date_range('1/1/2001', periods=5, freq='D'))

In [13]: s.values
Out[13]:
array(['2000-12-31T19:00:00.000000000-0500',
       '2001-01-01T19:00:00.000000000-0500',
       '2001-01-02T19:00:00.000000000-0500',
       '2001-01-03T19:00:00.000000000-0500',
       '2001-01-04T19:00:00.000000000-0500'], dtype='datetime64[ns]')
</snippet></ROW><ROW><id>19213986</id><snippet>'L'</snippet></ROW><ROW><id>19213986</id><snippet>'MS'</snippet></ROW><ROW><id>19213986</id><snippet>MonthBegin</snippet></ROW><ROW><id>19213986</id><snippet>In [18]: date_range('2013/11/1', freq='ms', periods=10)
Out[18]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-11-01 00:00:00, ..., 2013-11-01 00:00:00.009000]
Length: 10, Freq: L, Timezone: None
</snippet></ROW><ROW><id>19213986</id><snippet>pandas</snippet></ROW><ROW><id>19213986</id><snippet>date_range</snippet></ROW><ROW><id>19213986</id><snippet>In [15]: date_range('2013/11/1', freq='N', periods=10)
Out[15]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-11-01 00:00:00, ..., 2013-11-01 00:00:00.000000009]
Length: 10, Freq: N, Timezone: None
</snippet></ROW><ROW><id>19214158</id><snippet>prefix</snippet></ROW><ROW><id>19214158</id><snippet>import os
def get_files(directory, prefix=[]):
    for filename in directory.keys():
        path = prefix+[filename]
        if not isinstance(directory[filename], dict):
            print os.path.join(*path)
        else:
            get_files(directory[filename], path)
</snippet></ROW><ROW><id>19214189</id><snippet>counter_list</snippet></ROW><ROW><id>19214189</id><snippet>counter_list = [item for item in counter_list if item]
</snippet></ROW><ROW><id>19214189</id><snippet>Falsish</snippet></ROW><ROW><id>19214189</id><snippet>Truish</snippet></ROW><ROW><id>19214189</id><snippet>In [27]: bool(collections.Counter())
Out[27]: False

In [28]: bool(collections.Counter([1]))
Out[28]: True
</snippet></ROW><ROW><id>19214326</id><snippet>.to_string()</snippet></ROW><ROW><id>19214326</id><snippet>df</snippet></ROW><ROW><id>19214326</id><snippet>print df.to_string()</snippet></ROW><ROW><id>19214330</id><snippet>return [x[:5] for x in mylist]
</snippet></ROW><ROW><id>19214330</id><snippet>for x in mylist:
    yield x[:5]
</snippet></ROW><ROW><id>19214364</id><snippet>parse_nodes()</snippet></ROW><ROW><id>19214364</id><snippet>from scrapy import log
from scrapy.contrib.spiders import XMLFeedSpider
from myproject.items import TestItem
from scrapy.selector import XmlXPathSelector
from scrapy.http import Request

class MySpider(XMLFeedSpider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = ['http://www.example.com/feed.xml']
    iterator = 'iternodes' # This is actually unnecessary, since it's the default value
    itertag = 'item'

    def parse_node(self, response, node):
        log.msg('Hi, this is a &lt;%s&gt; node!: %s' % (self.itertag, ''.join(node.extract())))

        item = Item()
        item['id'] = node.select('@id').extract()
        item['name'] = node.select('name').extract()
        item['description'] = node.select('description').extract()
        return item

    def parse_nodes(self, response, nodes):
        # call built-in method that itself calls parse_node()
        # and yield whatever it returns
        for n in super(MySpider, self).parse_nodes(response, nodes):
            yield n

        # once you're done with item/nodes
        # look for the next page link using XPath
        # these lines are borrowed form
        # https://github.com/scrapy/scrapy/blob/master/scrapy/contrib/spiders/feed.py#L73
        selector = XmlXPathSelector(response)
        self._register_namespaces(selector)
        for link_url in selector.select('//pageSuivante/text()').extract():
            print "link_url", link_url
            yield Request(link_url)
</snippet></ROW><ROW><id>19214382</id><snippet>urllib</snippet></ROW><ROW><id>19214382</id><snippet>json</snippet></ROW><ROW><id>19214494</id><snippet>hede.person.findChild('first-name')
</snippet></ROW><ROW><id>19214494</id><snippet>hede = bs.BeautifulSoup(content, 'xml')
</snippet></ROW><ROW><id>19214494</id><snippet>lxml</snippet></ROW><ROW><id>19214494</id><snippet>hede = bs.BeautifulSoup(content, 'lxml')
</snippet></ROW><ROW><id>19214551</id><snippet>&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; a[4]
4
&gt;&gt;&gt; a[4:5]
[4]
</snippet></ROW><ROW><id>19214551</id><snippet>&gt;&gt;&gt; a[4:4]
[]
&gt;&gt;&gt; a[6:6]
[]
</snippet></ROW><ROW><id>19214605</id><snippet>def pdf_version(modeladmin, request, queryset):
    url = '/your_pdf_url/?pks=' + ','.join([q.pk for q in queryset])
    HttpResponseRedirect(url)
</snippet></ROW><ROW><id>19214605</id><snippet>class InvoiceItemAdmin(admin.ModelAdmin):
    actions = [pdf_version]
</snippet></ROW><ROW><id>19214693</id><snippet>weights</snippet></ROW><ROW><id>19214693</id><snippet>
pylab.hist(counted_data.keys(), weights=counted_data.values(), bins=range(50))
</snippet></ROW><ROW><id>19214693</id><snippet>hist</snippet></ROW><ROW><id>19214708</id><snippet>reset_index</snippet></ROW><ROW><id>19214708</id><snippet>orient='index'</snippet></ROW><ROW><id>19214708</id><snippet>In [11]: aggregated_df.reset_index().to_json(orient='index')
Out[11]: '{"0":{"created":"05-16-13","counter":3},"1":{"created":"05-17-13","counter":1},"2":{"created":"05-18-13","counter":1}}'
</snippet></ROW><ROW><id>19214837</id><snippet>DbfilenameShelf</snippet></ROW><ROW><id>19214837</id><snippet>__setitem__</snippet></ROW><ROW><id>19214837</id><snippet>__delitem__</snippet></ROW><ROW><id>19214837</id><snippet>from shelve import DbfilenameShelf

class AutoSyncShelf(DbfilenameShelf):
    # default to newer pickle protocol and writeback=True
    def __init__(self, filename, protocol=2, writeback=True):
        DbfilenameShelf.__init__(self, filename, protocol=protocol, writeback=writeback)
    def __setitem__(self, key, value):
        DbfilenameShelf.__setitem__(self, key, value)
        self.sync()
    def __delitem__(self, key):
        DbfilenameShelf.__delitem__(self, key)
        self.sync()

my_shelf = AutoSyncShelf("myshelf")
</snippet></ROW><ROW><id>19214919</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def next(s):
...     x = defaultdict(set)
...     for i in range(len(s)-1):
...         x[i].add(s[i+1])
...     return x
... 
&gt;&gt;&gt; next('hello')
defaultdict(&lt;type 'set'&gt;, {0: set(['e']), 1: set(['l']), 2: set(['l']), 3: set(['o'])})
</snippet></ROW><ROW><id>19214919</id><snippet>defaultdict(str)</snippet></ROW><ROW><id>19214919</id><snippet>s[i]</snippet></ROW><ROW><id>19214919</id><snippet>def next(s):
    x = defaultdict(set)
    for i in range(len(s)-1):
        x[s[i]].add(s[i+1])
    return x
</snippet></ROW><ROW><id>19214919</id><snippet>&gt;&gt;&gt; def next(s):
...     x = defaultdict(set)
...     for i in range(len(s)-1):
...         x[s[i]].add(s[i+1])
...     return x
... 
&gt;&gt;&gt; next('hello')
defaultdict(&lt;type 'set'&gt;, {'h': set(['e']), 'e': set(['l']), 'l': set(['l', 'o'])})
</snippet></ROW><ROW><id>19214919</id><snippet>def next_dict(s):
    x = defaultdict(set)
    prev = s[0]
    for char in s[1:]:
        x[prev].add(char)
        prev = char
    return x
</snippet></ROW><ROW><id>19215018</id><snippet>str.split()[3][1:].split(':')[0]
</snippet></ROW><ROW><id>19215022</id><snippet>format()</snippet></ROW><ROW><id>19215022</id><snippet>&gt;&gt;&gt; format(10, '+f')
'+10.000000'
&gt;&gt;&gt; format(-10, '+f')
'-10.000000'
&gt;&gt;&gt; format(3.14159, '+.3f')
'+3.142'
</snippet></ROW><ROW><id>19215022</id><snippet>+</snippet></ROW><ROW><id>19215022</id><snippet>-</snippet></ROW><ROW><id>19215022</id><snippet>.lstrip()</snippet></ROW><ROW><id>19215022</id><snippet>&gt;&gt;&gt; format(10, '+f').lstrip('-')
'+10.000000'
&gt;&gt;&gt; format(-10, '+f').lstrip('-')
'10.000000'
</snippet></ROW><ROW><id>19215102</id><snippet>print(*solution())</snippet></ROW><ROW><id>19215102</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>19215102</id><snippet>for i in solution():
    print i,
</snippet></ROW><ROW><id>19215102</id><snippet>for i in solution():
    print(i, end= ' ')
</snippet></ROW><ROW><id>19215148</id><snippet>else:
   return get_path(directory[filename], rqfile, path)
</snippet></ROW><ROW><id>19215148</id><snippet>None</snippet></ROW><ROW><id>19215148</id><snippet>else:</snippet></ROW><ROW><id>19215148</id><snippet>for filename in dictionary.keys():
    path = prefix+[filename]
    if not isinstance(dictionary[filename], dict):

        if rqfile in str(os.path.join(*path)):
            return str(os.path.join(*path))

    return get_path(directory[filename], rqfile, path)
</snippet></ROW><ROW><id>19215148</id><snippet>rqfile in str(os.path.join(*path))</snippet></ROW><ROW><id>19215148</id><snippet>False</snippet></ROW><ROW><id>19215148</id><snippet>return</snippet></ROW><ROW><id>19215148</id><snippet>None</snippet></ROW><ROW><id>19215236</id><snippet>gdbm</snippet></ROW><ROW><id>19215236</id><snippet>PyMappingMethods</snippet></ROW><ROW><id>19215236</id><snippet>operator.getitem()</snippet></ROW><ROW><id>19215236</id><snippet>&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; db['foo'] = 'bar'
&gt;&gt;&gt; getitem(db, 'foo')
'bar'
</snippet></ROW><ROW><id>19215236</id><snippet>getitem()</snippet></ROW><ROW><id>19215236</id><snippet>functools.partial()</snippet></ROW><ROW><id>19215236</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; gi = partial(getitem, db)
&gt;&gt;&gt; gi('foo')
'bar'
</snippet></ROW><ROW><id>19215236</id><snippet>getitem</snippet></ROW><ROW><id>19215236</id><snippet>partial</snippet></ROW><ROW><id>19215311</id><snippet>headers['display-name']</snippet></ROW><ROW><id>19215311</id><snippet>email.parser</snippet></ROW><ROW><id>19215311</id><snippet>In [17]: email.utils.parseaddr("jsmith@example.com")
Out[17]: ('', 'jsmith@example.com')

In [18]: email.utils.parseaddr("(John Smith) jsmith@example.com")
Out[18]: ('John Smith', 'jsmith@example.com')

In [19]: email.utils.parseaddr("John Smith &lt;jsmith@example.com&gt;")
Out[19]: ('John Smith', 'jsmith@example.com')
</snippet></ROW><ROW><id>19215311</id><snippet>In [21]: email.utils.parseaddr('''"unusual" &lt;"very.(),:;&lt;&gt;[]\".VERY.\"very@\\ \"very\".unusual"@strange.example.com&gt;''')
Out[21]: ('unusual', '"very.(),:;&lt;&gt;[]".VERY."very@ "very".unusual"@strange.example.com')
</snippet></ROW><ROW><id>19215395</id><snippet>df.fillna(0)
</snippet></ROW><ROW><id>19215395</id><snippet>df.fillna("")
</snippet></ROW><ROW><id>19215420</id><snippet>any()</snippet></ROW><ROW><id>19215420</id><snippet>if any(i in listB for i in listA):
    do something
</snippet></ROW><ROW><id>19215420</id><snippet>"do something"</snippet></ROW><ROW><id>19215420</id><snippet>i</snippet></ROW><ROW><id>19215420</id><snippet>listB</snippet></ROW><ROW><id>19215420</id><snippet>any(i in listB for i in listA)</snippet></ROW><ROW><id>19215420</id><snippet>for i in listA:
    if i in listB:
        return True
return False
</snippet></ROW><ROW><id>19215428</id><snippet>print type(returned_value)</snippet></ROW><ROW><id>19215428</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19215449</id><snippet>ballSnapLeft()</snippet></ROW><ROW><id>19215449</id><snippet>ballRect.right = playerRect.left - distance</snippet></ROW><ROW><id>19215449</id><snippet>def ballSnapTop():
    ballRect.top = playerRect.bottom - distance
</snippet></ROW><ROW><id>19215724</id><snippet>import csv

with open('test.csv', 'rb') as old_csv:
    csv_reader = csv.reader(old_csv)
    with open('testMODIFIED2.csv', 'wb') as new_csv:
        csv_writer = csv.writer(new_csv)
        for i, row in enumerate(csv_reader):
            if i != 0:
                row.append(float(row[10]) / float(row[37]))
                csv_writer.writerow(row)
</snippet></ROW><ROW><id>19215743</id><snippet>l = ['a','b','c','d']
if 'g' in l:
    print True
</snippet></ROW><ROW><id>19215825</id><snippet>matplotlib</snippet></ROW><ROW><id>19215825</id><snippet>In [7]: Traceback (most recent call last):
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/backends/backend_qt4.py", line 366, in idle_draw
    self.draw()
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/backends/backend_qt4agg.py", line 148, in draw
    FigureCanvasAgg.draw(self)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/backends/backend_agg.py", line 440, in draw
    self.figure.draw(self.renderer)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 54, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/figure.py", line 1027, in draw
    func(*args)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 54, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/axes.py", line 2088, in draw
    a.draw(renderer)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/artist.py", line 54, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/axis.py", line 1076, in draw
    ticks_to_draw = self._update_ticks(renderer)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/axis.py", line 938, in _update_ticks
    tick_tups = [t for t in self.iter_ticks()]
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/axis.py", line 882, in iter_ticks
    majorLocs = self.major.locator()
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/dates.py", line 785, in __call__
    self.refresh()
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/dates.py", line 794, in refresh
    dmin, dmax = self.viewlim_to_dt()
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/dates.py", line 560, in viewlim_to_dt
    return num2date(vmin, self.tz), num2date(vmax, self.tz)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/dates.py", line 305, in num2date
    return _from_ordinalf(x, tz)
  File "/home/tcaswell/local_installs/lib/python2.7/site-packages/matplotlib-1.3.x-py2.7-linux-x86_64.egg/matplotlib/dates.py", line 208, in _from_ordinalf
    dt = datetime.datetime.fromordinal(ix)
ValueError: ordinal must be &gt;= 1
</snippet></ROW><ROW><id>19215838</id><snippet>raw_input</snippet></ROW><ROW><id>19215838</id><snippet>9</snippet></ROW><ROW><id>19215838</id><snippet>"9"</snippet></ROW><ROW><id>19215838</id><snippet>type(d)== int or type(d)==float</snippet></ROW><ROW><id>19215838</id><snippet>def distance_from_zero(d):
    try:
        return abs(int(d))
    except ValueError:
        pass
    try:
        return abs(float(d))
    except ValueError:
        pass
    return "Not an integer or float!"
x = raw_input("Enter number: ")        
print distance_from_zero(x)
</snippet></ROW><ROW><id>19216095</id><snippet>print("How many teams would you like?")
numberteam = int(input("Number: "))
# Create a dictionary, where each team has an emtpy list
teams = dict([('Team{}'.format(i), []) for i in range(numberteam)])
# The following also works
# teams = {'Team{}'.format(i):[] for i in range(numberteam)}
</snippet></ROW><ROW><id>19216095</id><snippet>teams['Team3'] # returns an empty list
</snippet></ROW><ROW><id>19216095</id><snippet>print("How many teams would you like?")
numberteam = int(input("Number: "))
teams = {}
for i in range(numberteam):
    teams['Team{}'.format(i)] = []
</snippet></ROW><ROW><id>19216159</id><snippet>if</snippet></ROW><ROW><id>19216159</id><snippet>else</snippet></ROW><ROW><id>19216159</id><snippet>elif</snippet></ROW><ROW><id>19216159</id><snippet>uCheck = input('Unit? ')

if uCheck == 'nm':
    Wave = Wave
elif uCheck == 'cm':
    ...
</snippet></ROW><ROW><id>19216159</id><snippet>units = {
    'nm': 1,
    'mm': 10**6,
    'cm': 10**7,
    'm': 10**9
}

unit = input('Unit? ')

if unit in units:
    wave *= units[unit]
else:
    print('Invalid Unit! Valid units are: ' + ', '.join(units))
    frequency()
</snippet></ROW><ROW><id>19216872</id><snippet>print</snippet></ROW><ROW><id>19216872</id><snippet>chr(0x2500)</snippet></ROW><ROW><id>19216872</id><snippet>\u2502</snippet></ROW><ROW><id>19216872</id><snippet>chr(0x2502)</snippet></ROW><ROW><id>19216872</id><snippet>pushSLL</snippet></ROW><ROW><id>19216872</id><snippet>class StackLL:

    def __init__(self):
        self.head = None

    def pushSLL(self, item):
        temp = Node(str(item))
        temp.setNext(self.head)
        self.head = temp

    def dump(self):
        length = max(len(node.data) for node in self.allNodes()) if self.head else 0
        print('\u2510{}\u250c'.format(' '*length))
        for node in self.allNodes():
            print('\u2502{:&lt;{}}\u2502'.format(node.data, length))
        print('\u2514{}\u2518'.format('\u2500'*length))

    def allNodes(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next

s = StackLL()
s.pushSLL('Arc')
s.pushSLL('Circle')
s.pushSLL('Rect')
s.dump()
</snippet></ROW><ROW><id>19216968</id><snippet>any()</snippet></ROW><ROW><id>19216968</id><snippet>while any(flips_left.itervalues()):
</snippet></ROW><ROW><id>19217192</id><snippet>places= ["Home","In-n Out Burger", "John's house", "Santa Monica Pier", "Staples center",  "LA Dodgers stadium", "Home" ]

def placesCount(places):
    placesToGo = 0
    for i in range (len(places)):
        if places[i] == "LA Dodgers stadium":
            placesToGo = placesToGo + 1
            print placesToGo, "places to LA dodgers stadium"
        else:
            placesToGo = placesToGo + 1
def multiCount(places):
    spaces = 0
    multiWords = 0
    for j in range (len(places)):
        word = places[j]
        for characters in word:
            if characters == " ":
                spaces = spaces + 1
        if spaces != 0:
            multiWords = multiWords + 1
            spaces = 0
    print multiWords, "multi-word names"

placesCount(places)
multiCount(places)
</snippet></ROW><ROW><id>19217368</id><snippet>__init__.py</snippet></ROW><ROW><id>19217368</id><snippet>init.py</snippet></ROW><ROW><id>19217593</id><snippet>from __future__ import division
import numpy as np
import matplotlib.pyplot as plt

w = np.array([0.0, 11.11111111111111, 22.22222222222222, 33.333333333333336,
              44.44444444444444, 55.55555555555556, 66.66666666666667,
              77.77777777777777, 88.88888888888889, 100.0])
v = np.array([0.0, 8.333333333333332, 16.666666666666664, 25.0,
              36.11111111111111, 47.22222222222222, 58.333333333333336,
              72.22222222222221, 86.11111111111111, 100.0])

poly_coeff = np.polynomial.polynomial.polyfit(w, v, 2)
poly = np.polynomial.polynomial.Polynomial(poly_coeff)
roots = np.polynomial.polynomial.polyroots(poly_coeff - [99, -1, 0])

x = np.linspace(np.min(roots) - 50, np.max(roots) + 50, num=1000)
plt.plot(x, poly(x), 'r-')
plt.plot(x, 99 - x, 'b-')
for root in roots:
    plt.plot(root, 99 - root, 'ro')
</snippet></ROW><ROW><id>19217678</id><snippet>from functools import partial
def f(a,b,c):
    print a,b,c
bound_f = partial(f,1)
bound_f(2,3)
</snippet></ROW><ROW><id>19217678</id><snippet>callback = span_selected.bind(null, coordinate)
</snippet></ROW><ROW><id>19217678</id><snippet>callback = partial(span_selected, coordinate)
</snippet></ROW><ROW><id>19217776</id><snippet>'django+++python+'</snippet></ROW><ROW><id>19217776</id><snippet>(?P&lt;tag&gt;\w+(?:\+\w+)*)</snippet></ROW><ROW><id>19217776</id><snippet>tag.split('+')</snippet></ROW><ROW><id>19217779</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>19217779</id><snippet>return HttpResponseRedirect('/fun_two/?y=1,2,3,4')
</snippet></ROW><ROW><id>19217779</id><snippet>request.GET.get('y')</snippet></ROW><ROW><id>19217779</id><snippet>split(',')</snippet></ROW><ROW><id>19217875</id><snippet>re.sub</snippet></ROW><ROW><id>19217875</id><snippet>re.sub</snippet></ROW><ROW><id>19217875</id><snippet>return re.sub(term + r'\s*-\s*(\(\d{5}\))\s*-\s*(\w{3}\s?\d{4}\w?-?\d{3}\s*-?\s*(?:[^.\s]|\b\s\b)+)\s*-\s*([^.]+\.pdf)$',
      lambda match: term+' - {0} - {1} - {2}'.format(match.group(1),
      re.sub(r'(\w{3})\s?(\d{4}\w?)\s*-?\s*(\d{3})\s*-?\s*(.*)', r'\1 \2-\3-\4', match.group(2)),
      match.group(3)) ,
      f)
</snippet></ROW><ROW><id>19217875</id><snippet>re.sub</snippet></ROW><ROW><id>19217875</id><snippet>\s*-\s*(\(\d{5}\))\s*-\s*(\w{3}\s*\d{4}\w?\s*-?\s*\d{3}\s*-?\s*(?:[^.\s]|\b\s\b|\s&amp;\s)+)\s*-\s*([^.]+\.pdf)$
</snippet></ROW><ROW><id>19218033</id><snippet> QtCore.QObject.connect(self.worker,
                        Qt.SIGNAL("a"),
                        self.Tester,
                        Qt.Qt.DirectConnection) #this is added
</snippet></ROW><ROW><id>19219221</id><snippet>ir</snippet></ROW><ROW><id>19219221</id><snippet>If the jth column of the sparse mxArray has any nonzero elements:

jc[j] is the index in ir, pr, and pi (if it exists) of the first nonzero element in the jth column.
jc[j+1]-1 is the index of the last nonzero element in the jth column.
For the jth column of the sparse matrix, jc[j] is the total number of nonzero elements in all preceding columns.
The number of nonzero elements in the jth column of the sparse mxArray is:

jc[j+1] - jc[j];
</snippet></ROW><ROW><id>19219221</id><snippet>mxSetIr</snippet></ROW><ROW><id>19219387</id><snippet>urllib.urlunquote()</snippet></ROW><ROW><id>19219387</id><snippet>from urllib import urlunquote

self.performReq(unlunquote(self.path).decode('utf-8'))  
</snippet></ROW><ROW><id>19219387</id><snippet>&gt;&gt;&gt; from urllib import unquote
&gt;&gt;&gt; path = '/%D0%A2%D0%A0%D0%90/%D0%9F%D0%BE%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8C%D0%BD%D0%B8%D0%BA/%D0%9F%D0%BD.doc'
&gt;&gt;&gt; unquote(path).decode('utf8')
u'/\u0422\u0420\u0410/\u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a/\u041f\u043d.doc'
&gt;&gt;&gt; print unquote(path).decode('utf8')
/ТРА/Понедельник/Пн.doc
</snippet></ROW><ROW><id>19219888</id><snippet>Consistent create_xxx() signatures section</snippet></ROW><ROW><id>19220064</id><snippet>sendfile off;</snippet></ROW><ROW><id>19220064</id><snippet>/static</snippet></ROW><ROW><id>19220064</id><snippet>location /static {
    alias /var/www/localhost/current/static;
    sendfile off;
}
</snippet></ROW><ROW><id>19220441</id><snippet>unique_together</snippet></ROW><ROW><id>19220441</id><snippet>class Membership(models.Model):
....

    class Meta:
        unique_together = (
                               ("person", "group"),
                               ("is_master", "group"),
                          )
</snippet></ROW><ROW><id>19220441</id><snippet>person</snippet></ROW><ROW><id>19220441</id><snippet>group</snippet></ROW><ROW><id>19220441</id><snippet>is_master</snippet></ROW><ROW><id>19220441</id><snippet>group</snippet></ROW><ROW><id>19220463</id><snippet>parser</snippet></ROW><ROW><id>19220496</id><snippet>DeleteLectureFromCoursePanel</snippet></ROW><ROW><id>19220496</id><snippet>Fixtures</snippet></ROW><ROW><id>19220496</id><snippet>TestCase</snippet></ROW><ROW><id>19220496</id><snippet>Fixtures</snippet></ROW><ROW><id>19220571</id><snippet>import numpy as np
import matplotlib.pyplot as plt
# random data to stand in
x1 = 0.8+0.1*np.random.rand(25)
x2 = 0.3+0.2*np.random.rand(25)
# customise the marker properties
plt.plot(x1, color='g', marker='s', mec='w', mfc='g', mew='3', ms=8)
plt.plot(x2, color='b', marker='s', mec='w', mfc='b', mew='3', ms=8)
plt.show()
</snippet></ROW><ROW><id>19221024</id><snippet>__import__</snippet></ROW><ROW><id>19221024</id><snippet>api</snippet></ROW><ROW><id>19221024</id><snippet>fromlist</snippet></ROW><ROW><id>19221024</id><snippet>my_class_module =  __import__('api.apps.myapp.my_class', fromlist=[''])
</snippet></ROW><ROW><id>19221024</id><snippet>__import__</snippet></ROW><ROW><id>19221041</id><snippet>values()</snippet></ROW><ROW><id>19221041</id><snippet>annotate()</snippet></ROW><ROW><id>19221041</id><snippet>values()</snippet></ROW><ROW><id>19221041</id><snippet>vs = Operator.objects.filter(DisplayName="Jimmy",
                             TransactionSummary__StartTime__gte=tz.localize(datetime(year=2013, month=10, day=1)),
                             AlertSummary__StartTime__gte=tz.localize(datetime(year=2013, month=10, day=1)))\
    .values("DisplayName")\
    .annotate(TotalTransactions=Sum("TransactionSummary__TransactionCount"),
              TotalAlerts=Sum("AlertSummary__AlertScore"))
</snippet></ROW><ROW><id>19221041</id><snippet>values()</snippet></ROW><ROW><id>19221041</id><snippet>values()</snippet></ROW><ROW><id>19221041</id><snippet>annotate()</snippet></ROW><ROW><id>19221041</id><snippet>annotate()</snippet></ROW><ROW><id>19221041</id><snippet>values()</snippet></ROW><ROW><id>19221041</id><snippet>DisplayName</snippet></ROW><ROW><id>19221041</id><snippet>pk</snippet></ROW><ROW><id>19221041</id><snippet>aggregate()</snippet></ROW><ROW><id>19221041</id><snippet>annotate()</snippet></ROW><ROW><id>19221160</id><snippet>main()</snippet></ROW><ROW><id>19221160</id><snippet>subprocess.Popen(['myCppprogram.exe', 'foo', 'bar'], ...)
</snippet></ROW><ROW><id>19221160</id><snippet>main()</snippet></ROW><ROW><id>19221160</id><snippet>int main(int argc, char** argv)
{
  assert(argc == 3);
  assert(argv[1] == std::string("foo");
  assert(argv[2] == std::string("bar");
}
</snippet></ROW><ROW><id>19221229</id><snippet>call(['./myProgram'] + myArgs)
</snippet></ROW><ROW><id>19221423</id><snippet>print</snippet></ROW><ROW><id>19221423</id><snippet>print()</snippet></ROW><ROW><id>19221423</id><snippet>print('aaa')
</snippet></ROW><ROW><id>19221627</id><snippet>SublimeLauncher</snippet></ROW><ROW><id>19221627</id><snippet>Widget</snippet></ROW><ROW><id>19221627</id><snippet>FloatLayout</snippet></ROW><ROW><id>19221627</id><snippet>pos: 0, 0
size: 100, 100
</snippet></ROW><ROW><id>19221627</id><snippet>FloatLayout</snippet></ROW><ROW><id>19221636</id><snippet>lower</snippet></ROW><ROW><id>19221636</id><snippet>upper</snippet></ROW><ROW><id>19221636</id><snippet>lower = 1,2,3
upper = 5,2,7
xyz = 2,3,4

all(u &lt;= j &lt;= v for u, j, v in zip(lower, xyz, upper))
</snippet></ROW><ROW><id>19221636</id><snippet>(a &lt;= x &lt;= d) and (b &lt;= y &lt;= e) and (c &lt;= z &lt;= f)
</snippet></ROW><ROW><id>19221714</id><snippet>header = ""
with open(path_to_copy_from, 'rb') as f:
    for i in range(4):
        byte = f.read(1)
        header += hex(ord(byte))[2:] + " "
</snippet></ROW><ROW><id>19221714</id><snippet>header</snippet></ROW><ROW><id>19221724</id><snippet>./manage.py schemamigration your_app --initial
</snippet></ROW><ROW><id>19221724</id><snippet>./manage.py schemamigration your_app --auto
</snippet></ROW><ROW><id>19221951</id><snippet>master.config(menu=menubar)
</snippet></ROW><ROW><id>19222031</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19222031</id><snippet>from collections import defaultdict, Mapping

class default_attribute_dict(defaultdict):
    def __init__(self, *args, **kwargs):
        super(default_attribute_dict, self).__init__(*args, **kwargs)
        self.__dict__ = self

    def __getattr__(self, name):
        # trigger default
        return self[name]

    @classmethod
    def from_dictionaries(cls, d, default=lambda: None):
        cdic = cls(default)
        for key, value in d.iteritems():
            if isinstance(value, Mapping):
               value = cls.from_dictionaries(value, default=default)
            cdic[key] = value
        return cdic
</snippet></ROW><ROW><id>19222031</id><snippet>&gt;&gt;&gt; cdic = default_attribute_dict(lambda: 100)
&gt;&gt;&gt; cdic.hundred
100
&gt;&gt;&gt; cdic['ten'] = 10
&gt;&gt;&gt; cdic.ten
10
&gt;&gt;&gt; cdic['ten']
10
</snippet></ROW><ROW><id>19222031</id><snippet>from_dictionaries()</snippet></ROW><ROW><id>19222031</id><snippet>&gt;&gt;&gt; cdic = default_attribute_dict.from_dictionaries(dic, default=lambda: 100)
&gt;&gt;&gt; cdic
defaultdict(&lt;function &lt;lambda&gt; at 0x109998848&gt;, {'one': 1, 'three': 3, 'two': defaultdict(&lt;function &lt;lambda&gt; at 0x109998848&gt;, {'four': 4, 'five': defaultdict(&lt;function &lt;lambda&gt; at 0x109998848&gt;, {'seven': 7, 'six': 6})})})
&gt;&gt;&gt; cdic.two.four
4
</snippet></ROW><ROW><id>19222031</id><snippet>&gt;&gt;&gt; cdic = default_attribute_dict.from_dictionaries(dic, default=lambda: 100)
&gt;&gt;&gt; cdic.keys
&lt;built-in method keys of default_attribute_dict object at 0x7fdd0bcc9ac0&gt;
&gt;&gt;&gt; cdic['keys']
100
&gt;&gt;&gt; cdic.keys
100
&gt;&gt;&gt; cdic.keys()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
</snippet></ROW><ROW><id>19222153</id><snippet>$(document).ready(function() {
    $.post( '/tutorial/ajax/hit/',
    { 'hitcount_pk' : '1',
     'csrfmiddlewaretoken': getCookie('csrftoken') },
    function(data, status) {
            if (data.status == 'error') {
        // do something for error?
            }
        },
    'json');
 });
</snippet></ROW><ROW><id>19222204</id><snippet>numpy.sum()</snippet></ROW><ROW><id>19222204</id><snippet>result = np.sum(matrix)
</snippet></ROW><ROW><id>19222204</id><snippet>.sum()</snippet></ROW><ROW><id>19222204</id><snippet>result = matrix.sum()
</snippet></ROW><ROW><id>19222204</id><snippet>axis</snippet></ROW><ROW><id>19222204</id><snippet>matrix.sum(0)</snippet></ROW><ROW><id>19222204</id><snippet>matrix</snippet></ROW><ROW><id>19222204</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19222204</id><snippet>numpy.matrix</snippet></ROW><ROW><id>19222800</id><snippet>functools.partial</snippet></ROW><ROW><id>19222800</id><snippet>from functools import partial
from PyQt4.QtGui import *

class MyWindow(QWidget):
    def __init__(self):
        super(QWidget, self).__init__()
        self.button = QPushButton('test', parent=self)
        self.button.clicked.connect(partial(self.func, False))
        self.button.show()
    def func(self, boolVar):
        print boolVar

app = QApplication([])
win = MyWindow()
win.show()
app.exec_()
</snippet></ROW><ROW><id>19222800</id><snippet>func</snippet></ROW><ROW><id>19222800</id><snippet>def func(self, boolVar, checked):
    print boolVar
</snippet></ROW><ROW><id>19223074</id><snippet>dict.items()</snippet></ROW><ROW><id>19223074</id><snippet>for key, value in dbdata["test"]["skins_t"].items():
     if key not in tskinspath:
        if value == 0:
            del dbdata["test"]["skins_t"][key]
</snippet></ROW><ROW><id>19223074</id><snippet>list(dbdata["test"]["skins_t"].items())</snippet></ROW><ROW><id>19223074</id><snippet>to_be_deleted = []
for key, value in dbdata["test"]["skins_t"].iteritems():
     if key not in tskinspath:
        if value == 0:
            to_be_deleted.append(key)
for k in to_be_deleted: 
    del dbdata["test"]["skins_t"][k]
</snippet></ROW><ROW><id>19223124</id><snippet>factorialRecursive</snippet></ROW><ROW><id>19223124</id><snippet>factorial (n - 1)</snippet></ROW><ROW><id>19223124</id><snippet>&gt; factorialCumprod &lt;- function(n) cumprod (seq_len (n))[n]

&gt; microbenchmark(factorial(150), 
                 factorialRecursive(150), factorialTailRecursive(150), 
                 factorialIterF(150), factorialIterW(150), factorialCumprod (150),
                 times = 5000)
Unit: microseconds
                        expr     min      lq   median       uq       max neval
              factorial(150)   1.258   2.026   2.2360   2.5850    55.386  5000
     factorialRecursive(150) 273.014 281.325 285.0265 301.2310  2699.336  5000
 factorialTailRecursive(150) 291.732 301.858 306.4690 323.9295  4958.803  5000
         factorialIterF(150)  71.728  74.941  76.1290  78.7830  2894.819  5000
         factorialIterW(150) 218.118 225.102 228.0360 238.3020 78845.045  5000
       factorialCumprod(150)   3.493   4.959   5.3790   5.9375    65.444  5000
</snippet></ROW><ROW><id>19223124</id><snippet>microbenchmark</snippet></ROW><ROW><id>19223124</id><snippet>gamma (150 + 1)</snippet></ROW><ROW><id>19223124</id><snippet>factorial (150)</snippet></ROW><ROW><id>19223124</id><snippet>&gt; for (i in 1 : 3) {
+    cat (i ," ")
+    i &lt;- 10
+    cat (i ,"\n")
+ }
1  10 
2  10 
3  10 
</snippet></ROW><ROW><id>19223124</id><snippet>while</snippet></ROW><ROW><id>19223124</id><snippet>for</snippet></ROW><ROW><id>19223124</id><snippet>n : 1</snippet></ROW><ROW><id>19223124</id><snippet>for</snippet></ROW><ROW><id>19223124</id><snippet>cumprod</snippet></ROW><ROW><id>19223124</id><snippet>factorial</snippet></ROW><ROW><id>19223124</id><snippet>factorialCumprod</snippet></ROW><ROW><id>19223124</id><snippet>cumprod</snippet></ROW><ROW><id>19223124</id><snippet>cumsum</snippet></ROW><ROW><id>19223193</id><snippet>np.histogram()</snippet></ROW><ROW><id>19223193</id><snippet>pp.errorbar()</snippet></ROW><ROW><id>19223193</id><snippet>import numpy as np
from matplotlib import pyplot as pp

x = np.random.randn(10000)
counts,bin_edges = np.histogram(x,20)
bin_centres = (bin_edges[:-1] + bin_edges[1:])/2.
err = np.random.rand(bin_centres.size)*100
pp.errorbar(bin_centres, counts, yerr=err, fmt='o')

pp.show()
</snippet></ROW><ROW><id>19223502</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>19223502</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>19223502</id><snippet>/usr/local</snippet></ROW><ROW><id>19223502</id><snippet>$ /usr/bin/python --version
Python 2.7.2
</snippet></ROW><ROW><id>19223516</id><snippet>def rec_increment(p):
    if len(p) == 0:
        return ""                    #If you return an empty string, you don't get the "None" printing at the end.
    else:
        #r = list(p)                 This is not necessary now.
        print p[0]+1                 #r.pop(0) + 1   Rather than pop, just index.
        return rec_increment(p[1:])  # Only recurse on the 2nd-nth part of the list

print rec_increment([1,2,3,4])       # Note that you don't need to both "print" in the function *and* print the result of the function - you can pick which you want to do.
</snippet></ROW><ROW><id>19223797</id><snippet>pyte</snippet></ROW><ROW><id>19223797</id><snippet>pip install pyte</snippet></ROW><ROW><id>19223797</id><snippet>import pyte

screen = pyte.Screen(80, 24)
stream = pyte.ByteStream()
stream.attach(screen)
stream.feed('xyzzz\by\rfoo')
print ''.join(c.data for c in screen[0]).rstrip()
# prints foozy
</snippet></ROW><ROW><id>19223797</id><snippet>'\n'.join(''.join(c.data for c in row).rstrip() for row in screen).rstrip('\n')</snippet></ROW><ROW><id>19223890</id><snippet>zip</snippet></ROW><ROW><id>19223890</id><snippet>&gt;&gt;&gt; mylist = ['apple','banana','pear','orange'] 
&gt;&gt;&gt; values = [3,1,2,4]
&gt;&gt;&gt; [i[1] for i in sorted(zip(values, mylist))]
 ['banana', 'pear', 'apple', 'orange']
</snippet></ROW><ROW><id>19223890</id><snippet>list</snippet></ROW><ROW><id>19223890</id><snippet>itertools.izip</snippet></ROW><ROW><id>19223890</id><snippet>zip()</snippet></ROW><ROW><id>19223890</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; mylist = ['apple','banana','pear','orange'] 
&gt;&gt;&gt; values = [3,1,2,4]
&gt;&gt;&gt; [i[1] for i in sorted(izip(values, mylist))]
 ['banana', 'pear', 'apple', 'orange']
</snippet></ROW><ROW><id>19223919</id><snippet>$0</snippet></ROW><ROW><id>19223919</id><snippet>for my $i (1 .. 5) {
  fork &amp;&amp; next;
  $0 = "foobar: $i";
  sleep 5;
  exit;
}

print for grep /foobar/, `ps aux`;
</snippet></ROW><ROW><id>19223919</id><snippet>1000      1231  0.0  0.0   7836   552 pts/5    S+   13:32   0:00 foobar: 1
1000      1232  0.0  0.0   7836   552 pts/5    S+   13:32   0:00 foobar: 2
1000      1233  0.0  0.0   7836   552 pts/5    S+   13:32   0:00 foobar: 3
1000      1235  0.0  0.0   7836   552 pts/5    S+   13:32   0:00 foobar: 4
1000      1236  0.0  0.0   7836   552 pts/5    S+   13:32   0:00 foobar: 5
</snippet></ROW><ROW><id>19223942</id><snippet>list.index()</snippet></ROW><ROW><id>19223942</id><snippet>list_a = ['s1', 's2', 's3', 's4', 's5']
list_b = ['s8', 's5', 's1', 's9', 's3']
print [list_b.index(i) for i in list_a]
</snippet></ROW><ROW><id>19223942</id><snippet>if elem_b == elem_a:</snippet></ROW><ROW><id>19224092</id><snippet>/</snippet></ROW><ROW><id>19224092</id><snippet>$a = preg_replace('/"[ \t]*"/', '":"', $a);
</snippet></ROW><ROW><id>19224164</id><snippet>from gi.repository import Gst
</snippet></ROW><ROW><id>19224226</id><snippet>B</snippet></ROW><ROW><id>19224226</id><snippet>A</snippet></ROW><ROW><id>19224226</id><snippet>B</snippet></ROW><ROW><id>19224226</id><snippet>B</snippet></ROW><ROW><id>19224226</id><snippet>A</snippet></ROW><ROW><id>19224226</id><snippet>class A:
    a=1

class B(A):
    b=1
    def pr(self):
        print self.a, self.b

c = B()
c.pr()
</snippet></ROW><ROW><id>19224226</id><snippet>1 1
</snippet></ROW><ROW><id>19224231</id><snippet>id()</snippet></ROW><ROW><id>19224231</id><snippet>id(s[0]) != id(s)</snippet></ROW><ROW><id>19224231</id><snippet>id(s[1]) == id(s[2])</snippet></ROW><ROW><id>19224231</id><snippet>some_str is other_str</snippet></ROW><ROW><id>19224494</id><snippet>loads()</snippet></ROW><ROW><id>19224494</id><snippet>json</snippet></ROW><ROW><id>19224494</id><snippet>import json

response = requests.get('http://api.appannie.com/v1/accounts/1000/apps/mysuperapp/sales?break_down=application+iap&amp;start_date=2013-10-01&amp;end_date=2013-10-02',
                        auth=('username', 'password'))
data = json.loads(response.json()) # data is a dictionary now

sales_list = data.get('sales_list')
for sales in sales_list:
    print sales['revenue']['app']
</snippet></ROW><ROW><id>19224741</id><snippet>from django.shortcuts import render, get_object_or_404
# form imports here
# model imports here

# get all objects
def get_view(request):
    objects = YourModel.objects.all()
    return render(request, 'all-objects.html', {'objects': objects}

# make a new object
def make_new_obj(request):
    form = YourForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            form.save()
    return render(request, 'make-new-obj.html', {'form': form}

# get an object by id
def get_single_object_view(request, id):
    obj = get_object_or_404(YourModel, pk=id)
    return render(request, 'obj-detail.html', {'obj': obj}

# update an object
def update_obj(request, id):
    obj = get_object_or_404(YourModel, pk=id)
    form = YourForm(request.POST or None, instance=obj)
    if request.method == 'POST':
        if form.is_valid():
            form.save()
    return render(request, 'update-obj.html',
        {'obj': obj, 'form': form}

# delete an object
def delete_obj(request, id):
    obj = get_object_or_404(YourModel, pk=id)
    obj.delete()
    # do something else like redirect to the object index, etc
    # you'll probably want to make this a two-step process
</snippet></ROW><ROW><id>19224916</id><snippet>csv</snippet></ROW><ROW><id>19224916</id><snippet>import csv
with open("your/file.csv", ...) as source:
    reader = csv.reader(source, delimiter='\t')
    selection = [row for row in reader if row[2] == 'a']
</snippet></ROW><ROW><id>19225101</id><snippet>&gt;&gt;&gt; def foo(a,b,c):
...     pass
...
&gt;&gt;&gt; foo(*[1,2,3])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19225101</id><snippet>&gt;&gt;&gt; (*[1,2,3])
  File "&lt;stdin&gt;", line 1
    (*[1,2,3])
     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19225101</id><snippet>print</snippet></ROW><ROW><id>19225101</id><snippet>print(*[1,2,3])
</snippet></ROW><ROW><id>19225101</id><snippet>print *[1,2,3]
</snippet></ROW><ROW><id>19225101</id><snippet>print</snippet></ROW><ROW><id>19225101</id><snippet>&gt;&gt;&gt; print(*[1,2,3])
1 2 3
</snippet></ROW><ROW><id>19225101</id><snippet>print</snippet></ROW><ROW><id>19225101</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print(*[1,2,3])
1 2 3
</snippet></ROW><ROW><id>19225107</id><snippet>import math</snippet></ROW><ROW><id>19225107</id><snippet>row=0</snippet></ROW><ROW><id>19225107</id><snippet>ResultsTable.addValue()</snippet></ROW><ROW><id>19225107</id><snippet>ResultsTable.setValue()</snippet></ROW><ROW><id>19225107</id><snippet>import math
IJ.run("Set Measurements...", "area centroid perimeter shape feret's area_fraction     redirect=None decimal=6")
IJ.run("Analyze Particles...")
rt = ResultsTable.getResultsTable()
row=0
for roi in RoiManager.getInstance().getRoisAsArray():
  a = rt.getValue("Feret", row)
  b = rt.getValue("MinFeret", row)
  nu= 1
  L = 1
  p = 1
  s = (math.pi/4) * (1/(nu*L)) * math.pow(a, 3) * math.pow(b, 3) / (math.pow(a, 2) + math.pow(a, 2))*p
  rt.setValue("S", row, s)
  row = row + 1
rt.show("Results")
</snippet></ROW><ROW><id>19225112</id><snippet>enumate(seq)</snippet></ROW><ROW><id>19225112</id><snippet>dict</snippet></ROW><ROW><id>19225112</id><snippet>Set</snippet></ROW><ROW><id>19225368</id><snippet>import inspect
if not hasattr(sys.modules[__name__], '__file__'):
    __file__ = inspect.getfile(inspect.currentframe())
</snippet></ROW><ROW><id>19225794</id><snippet>colors = ["#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043"]</snippet></ROW><ROW><id>19225794</id><snippet>if pop</snippet></ROW><ROW><id>19225794</id><snippet>else</snippet></ROW><ROW><id>19225794</id><snippet>color_class</snippet></ROW><ROW><id>19225794</id><snippet>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;else:
    color_class = null

if color_class != null
    color = colors[color_class]
    p['style'] = path_style + color
</snippet></ROW><ROW><id>19225879</id><snippet>with open('text.txt') as f:
    word1 = f.readline().strip()
    word2 = f.readline().strip()

print word1, word2

# now you can compare word1 and word2 if you like
</snippet></ROW><ROW><id>19225879</id><snippet>text.txt</snippet></ROW><ROW><id>19225879</id><snippet>foo
bar
asdijaiojsd
asdiaooiasd
</snippet></ROW><ROW><id>19225879</id><snippet>foo bar
</snippet></ROW><ROW><id>19225879</id><snippet>with open('text.txt') as f:
    # sequence of all words in all lines
    words = (word for line in f for word in line.split())
    # consume the first 2 items from the words sequence
    word1 = next(words)
    word2 = next(words)
</snippet></ROW><ROW><id>19225879</id><snippet>text.txt</snippet></ROW><ROW><id>19226149</id><snippet>appname/templates/registration</snippet></ROW><ROW><id>19226149</id><snippet>django/contrib/admin/templates/registration (or ../admin)</snippet></ROW><ROW><id>19226149</id><snippet>{% extends "base.html" %}</snippet></ROW><ROW><id>19226149</id><snippet>urls.py</snippet></ROW><ROW><id>19226149</id><snippet>url(r'^accounts/login/$', 'django.contrib.auth.views.login'),
url(r'^accounts/logout/$', 'django.contrib.auth.views.logout_then_login'),
url(r'^accounts/password_change_done/$', 'django.contrib.auth.views.password_change_done', name="password_change_done"),
url(r'^accounts/password_change/$', 'django.contrib.auth.views.password_change', name='password_change'),
</snippet></ROW><ROW><id>19226168</id><snippet>self.main_widget</snippet></ROW><ROW><id>19226168</id><snippet>self.main_widget</snippet></ROW><ROW><id>19226168</id><snippet>import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class FeedbackWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.main_layout = QVBoxLayout(self)
        #self.main_widget = QWidget(self)              # main_widget is not used.
        #self.main_widget.setLayout(self.main_layout)
        self.setLayout(self.main_layout)
        self.title_label = QLabel("Tell us what you think:")
        self.feedback_text_editor = QTextEdit()
        self.send_button = QPushButton("Send")

        self.main_layout.addWidget(self.title_label)
        self.main_layout.addWidget(self.feedback_text_editor)
        self.main_layout.addWidget(self.send_button)

        self.setWindowTitle("Feedback")
        self.setGeometry(200,120,300,300)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    w = FeedbackWindow()
    w.show()
    app.exec_()
</snippet></ROW><ROW><id>19226258</id><snippet>xpath</snippet></ROW><ROW><id>19226258</id><snippet>result = driver.find_elements_by_xpath("//ol[@id="rso"]/li")[0] //make a list of results and get the first one
result.find_element_by_xpath("./div/h3/a").click() //click its href
</snippet></ROW><ROW><id>19226617</id><snippet>pandas</snippet></ROW><ROW><id>19226617</id><snippet>pandas.read_csv</snippet></ROW><ROW><id>19226617</id><snippet>import pandas
df = pandas.read_csv("test.csv")
df.loc[df.ID == 103, 'FirstName'] = "Matt"
df.loc[df.ID == 103, 'LastName'] = "Jones"
</snippet></ROW><ROW><id>19226617</id><snippet>df.loc[df.ID == 103, ['FirstName', 'LastName']] = 'Matt', 'Jones'
</snippet></ROW><ROW><id>19226617</id><snippet>pandas</snippet></ROW><ROW><id>19226617</id><snippet>loc</snippet></ROW><ROW><id>19226617</id><snippet>import pandas
df = pandas.read_csv("test.csv")
df['FirstName'][df.ID == 103] = "Matt"
df['LastName'][df.ID == 103] = "Jones"
</snippet></ROW><ROW><id>19226642</id><snippet>P</snippet></ROW><ROW><id>19226642</id><snippet>Q</snippet></ROW><ROW><id>19226642</id><snippet>R</snippet></ROW><ROW><id>19226642</id><snippet>80</snippet></ROW><ROW><id>19226642</id><snippet>81</snippet></ROW><ROW><id>19226642</id><snippet>82</snippet></ROW><ROW><id>19226642</id><snippet>&gt;&gt;&gt; ord('P')
80
</snippet></ROW><ROW><id>19226642</id><snippet>\xhh</snippet></ROW><ROW><id>19226642</id><snippet>&gt;&gt;&gt; hex(80)
'0x50'
&gt;&gt;&gt; '\x50'
'P'
&gt;&gt;&gt; '\xff'
'\xff'
</snippet></ROW><ROW><id>19227084</id><snippet>list_func = [f1, f2, f3]
</snippet></ROW><ROW><id>19227084</id><snippet>a = int(input('insert the function number: ') #get the input and convert it to integer
list_func[a]() #execute the function inputted
</snippet></ROW><ROW><id>19227084</id><snippet>inp = int(input('insert the function number: ') #get the input and convert it to integer
eval('f%d'%inp) 
</snippet></ROW><ROW><id>19227084</id><snippet>eval()</snippet></ROW><ROW><id>19227084</id><snippet>globals()</snippet></ROW><ROW><id>19227084</id><snippet>globals()['f%d'%inp]()
</snippet></ROW><ROW><id>19227173</id><snippet>from itertools import groupby
aa = 'booked#booked#available#available#available#available#available#booked#available#booked'
words = aa.split('#')
for key, group in groupby(words):
    print len(list(group)), key
</snippet></ROW><ROW><id>19227173</id><snippet>2 booked
5 available
1 booked
1 available
1 booked
</snippet></ROW><ROW><id>19227338</id><snippet>"%.2f" % myNum
</snippet></ROW><ROW><id>19227365</id><snippet>(y1, m1, d1) &lt; (y2, m2, d2)
</snippet></ROW><ROW><id>19227365</id><snippet>y1 &lt; y2</snippet></ROW><ROW><id>19227365</id><snippet>m1 &lt; m2</snippet></ROW><ROW><id>19227365</id><snippet>&gt;&gt;&gt; (2001, 3, 13) &lt; (2002, 3, 14)
True
&gt;&gt;&gt; (2001, 3, 13) &lt; (2001, 3, 12)
False
</snippet></ROW><ROW><id>19227786</id><snippet>def import_class(modulename, classname):
    ''' Returns imported class. '''
    try:
        return getattr(__import__(modulename, globals(), locals(), [classname], -1), classname)
    except AttributeError:
        print 'Error in importing class. "%s" has no class "%s"' % (modulename, classname)
        return None
    except ImportError as e:
        print 'Error in importing class: %s' % (e)
        return None
</snippet></ROW><ROW><id>19227947</id><snippet>if/else</snippet></ROW><ROW><id>19227947</id><snippet>x</snippet></ROW><ROW><id>19227947</id><snippet>y</snippet></ROW><ROW><id>19227947</id><snippet>In [1]: from math import sqrt, cos, sin
In [2]: def f(x, y):
   ...:     if (x &lt; -1 or x &gt; 3) and (y &lt; -1 or y &gt; 1):
   ...:         return sqrt(y)/(3 * x - 7)
   ...:     else:
   ...:         return cos(x) + sin(y)
   ...:     
</snippet></ROW><ROW><id>19228052</id><snippet>BEGIN</snippet></ROW><ROW><id>19228052</id><snippet>awk 'BEGIN { FS="\x01" } {print $1}' input
</snippet></ROW><ROW><id>19228121</id><snippet>url(r'^$', turk_post, name='post', {'SSL':True}),
</snippet></ROW><ROW><id>19228121</id><snippet>url(r'^$', turk_post, name='post', kwargs={'SSL':True}),
</snippet></ROW><ROW><id>19228121</id><snippet>url</snippet></ROW><ROW><id>19228121</id><snippet>def url(regex, view, kwargs=None, name=None, prefix=''):
    # et cetera
</snippet></ROW><ROW><id>19228188</id><snippet>SELECT * FROM data</snippet></ROW><ROW><id>19228188</id><snippet>SELECT * FROM data WHERE id = 1</snippet></ROW><ROW><id>19228188</id><snippet>Foo.objects.all()</snippet></ROW><ROW><id>19228188</id><snippet>Foo.objects.get(id=1)</snippet></ROW><ROW><id>19228188</id><snippet>datalist</snippet></ROW><ROW><id>19228188</id><snippet>for obj in datalist:
    print "%s =&gt; %s" % (obj.id, obj)
</snippet></ROW><ROW><id>19228188</id><snippet>for obj in datalist:
    print "OBJECT %s" % obj.id
    for field in Foo._meta.fields:
        print "  %s =&gt; %s" % (field.name, getattr(obj, field.name)
</snippet></ROW><ROW><id>19228188</id><snippet>django.forms.models.model_to_dict</snippet></ROW><ROW><id>19228188</id><snippet>from django.forms.models import model_to_dict

for obj in datalist:
    print "OBJECT %s" % obj.id
    for key, value in model_to_dict(obj_as_dict).items():
        print "  %s =&gt; %s" % (key, value)
</snippet></ROW><ROW><id>19228282</id><snippet>__self__</snippet></ROW><ROW><id>19228282</id><snippet>None</snippet></ROW><ROW><id>19228282</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @classmethod
...     def bar(cls):
...         pass
...     def baz(self):
...         pass
... 
&gt;&gt;&gt; Foo.baz
&lt;unbound method Foo.baz&gt;
&gt;&gt;&gt; Foo.baz.__self__
&gt;&gt;&gt; Foo.baz.__self__ is None
True
&gt;&gt;&gt; Foo.bar.__self__
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; Foo.bar.__self__ is Foo
True
</snippet></ROW><ROW><id>19228282</id><snippet>inspect.ismethod()</snippet></ROW><ROW><id>19228282</id><snippet>import inspect

if inspect.ismethod(cls.method) and cls.method.__self__ is cls:
    # class method
</snippet></ROW><ROW><id>19228282</id><snippet>method.__self__</snippet></ROW><ROW><id>19228282</id><snippet>method.im_self</snippet></ROW><ROW><id>19228714</id><snippet>e[np.all((e-np.array([1,2]))==0, axis=2)]
</snippet></ROW><ROW><id>19228714</id><snippet>e-np.array([1,2])</snippet></ROW><ROW><id>19228714</id><snippet>[0,0]</snippet></ROW><ROW><id>19228714</id><snippet>[1,2]</snippet></ROW><ROW><id>19228714</id><snippet>e</snippet></ROW><ROW><id>19228714</id><snippet>np.all(..., axis=2</snippet></ROW><ROW><id>19228714</id><snippet>True</snippet></ROW><ROW><id>19228714</id><snippet>[0,0]</snippet></ROW><ROW><id>19228714</id><snippet>False</snippet></ROW><ROW><id>19228714</id><snippet>[1,1]</snippet></ROW><ROW><id>19228714</id><snippet>[1,2]</snippet></ROW><ROW><id>19228714</id><snippet>[1,2]</snippet></ROW><ROW><id>19228714</id><snippet>np.argwhere(np.all((e-array([1,2]))==0, axis=2))
</snippet></ROW><ROW><id>19228783</id><snippet>datetime</snippet></ROW><ROW><id>19228783</id><snippet>from datetime import tzinfo, timedelta, datetime
now = datetime.utcnow()
later = now - timedelta(seconds=40)


&gt;&gt;&gt; now
datetime.datetime(2013, 10, 7, 15, 9, 5, 903000)
&gt;&gt;&gt; print now
2013-10-07 15:09:05.903000
&gt;&gt;&gt; print later
2013-10-07 15:08:25.903000
</snippet></ROW><ROW><id>19228783</id><snippet>now = datetime.utcnow()
later = now + timedelta(weeks=78, minutes=85, seconds=128)
diff = later - now
</snippet></ROW><ROW><id>19228783</id><snippet>&gt;&gt;&gt; print diff
546 days, 1:27:08
</snippet></ROW><ROW><id>19228783</id><snippet>################################################################################
#Class definition for EST timezone since python doesn't have one
class EST(tzinfo):
    def utcoffset(self, dt):
        return timedelta(-5)

    def tzname(self, dt):
        return "EST"

    def dst(self, dt):
        return timedelta(0)

################################################################################
#Class definition for CST timezone since python doesn't have one
class CST(tzinfo):
    def utcoffset(self, dt):
        return timedelta(hours=-6)

    def tzname(self, dt):
        return "CST"

    def dst(self, dt):
        return timedelta(0)


nowcst = datetime.now(tz=CST())
nowest = now.replace(tzinfo(EST())
</snippet></ROW><ROW><id>19228795</id><snippet>action='append'</snippet></ROW><ROW><id>19228795</id><snippet>Namespace(p=[['x'], ['y']])
</snippet></ROW><ROW><id>19228795</id><snippet>-p</snippet></ROW><ROW><id>19228795</id><snippet>['x']</snippet></ROW><ROW><id>19228795</id><snippet>nargs='+'</snippet></ROW><ROW><id>19228795</id><snippet>append</snippet></ROW><ROW><id>19228795</id><snippet>NS['p']=['x']</snippet></ROW><ROW><id>19228795</id><snippet>action</snippet></ROW><ROW><id>19228795</id><snippet>optionals</snippet></ROW><ROW><id>19228795</id><snippet>append</snippet></ROW><ROW><id>19228795</id><snippet>count</snippet></ROW><ROW><id>19228795</id><snippet>positionals</snippet></ROW><ROW><id>19228795</id><snippet>-flag</snippet></ROW><ROW><id>19228795</id><snippet>nargs</snippet></ROW><ROW><id>19228795</id><snippet>action</snippet></ROW><ROW><id>19229096</id><snippet>any</snippet></ROW><ROW><id>19229096</id><snippet>all</snippet></ROW><ROW><id>19229096</id><snippet>&gt;&gt;&gt; vals0 = [0, 0, 0, 0, 0]
&gt;&gt;&gt; vals1 = [1, 1, 1, 1, 1]
&gt;&gt;&gt; vals2 = [0, 1, 0, 1, 0]
&gt;&gt;&gt; def category(vals):
...     if all(vals):
...         return 1
...     elif any(vals):
...         return 2
...     else:
...         return 0
... 
&gt;&gt;&gt; category(vals0)
0
&gt;&gt;&gt; category(vals1)
1
&gt;&gt;&gt; category(vals2)
2
</snippet></ROW><ROW><id>19229096</id><snippet>&gt;&gt;&gt; def category(vals):
...     return 1 if all(vals) else 2 if any(vals) else 0
... 
</snippet></ROW><ROW><id>19229096</id><snippet>__nonzero__</snippet></ROW><ROW><id>19229096</id><snippet>__bool__</snippet></ROW><ROW><id>19229178</id><snippet>&gt;&gt;&gt; pattern = re.compile("([0-9]+|[a-z\)])(?=[a-z\(])", re.IGNORECASE)
&gt;&gt;&gt; s = "RX(3X)R"
&gt;&gt;&gt; print pattern.sub('\\1*', s)
R*X*(3*X)*R
</snippet></ROW><ROW><id>19229178</id><snippet>RX</snippet></ROW><ROW><id>19229178</id><snippet>*</snippet></ROW><ROW><id>19229178</id><snippet>X</snippet></ROW><ROW><id>19229178</id><snippet>*</snippet></ROW><ROW><id>19229178</id><snippet>X(</snippet></ROW><ROW><id>19229178</id><snippet>X</snippet></ROW><ROW><id>19229488</id><snippet>list</snippet></ROW><ROW><id>19229488</id><snippet>dict</snippet></ROW><ROW><id>19229488</id><snippet>tuple</snippet></ROW><ROW><id>19229488</id><snippet>DataFrame</snippet></ROW><ROW><id>19229488</id><snippet>Series</snippet></ROW><ROW><id>19229488</id><snippet>concat</snippet></ROW><ROW><id>19229488</id><snippet>TypeError</snippet></ROW><ROW><id>19229488</id><snippet>lastData</snippet></ROW><ROW><id>19229488</id><snippet>axis</snippet></ROW><ROW><id>19229488</id><snippet>axis == 0</snippet></ROW><ROW><id>19229488</id><snippet>TypeError</snippet></ROW><ROW><id>19229488</id><snippet>In [31]: a
Out[31]:
   0        1                2        3           4         5
0  0  1234567  dummy@dummy.net  x.x.x.x  2008-11-15  19:16:07
1  1  8911234  dummy@dummy.com  x.x.x.x  2008-11-15  17:59:55
2  2  4567833  dummy@dummy.com  x.x.x.x  2008-11-15  17:50:20

In [32]: b
Out[32]:
   0        1                2        3           4         5
0  3  1234567  dummy@dummy.net  x.x.x.x  2008-11-15  17:43:13
1  4  8901234  dummy@dummy.com  x.x.x.x  2008-11-15  13:18:01
2  5  4567890  dummy@dummy.com  x.x.x.x  2008-11-15  09:29:10

In [33]: concat([a, b])
Out[33]:
   0        1                2        3           4         5
0  0  1234567  dummy@dummy.net  x.x.x.x  2008-11-15  19:16:07
1  1  8911234  dummy@dummy.com  x.x.x.x  2008-11-15  17:59:55
2  2  4567833  dummy@dummy.com  x.x.x.x  2008-11-15  17:50:20
0  3  1234567  dummy@dummy.net  x.x.x.x  2008-11-15  17:43:13
1  4  8901234  dummy@dummy.com  x.x.x.x  2008-11-15  13:18:01
2  5  4567890  dummy@dummy.com  x.x.x.x  2008-11-15  09:29:10

In [34]: concat([a, b], axis=1)
Out[34]:
   0        1                2        3           4         5  0        1  \
0  0  1234567  dummy@dummy.net  x.x.x.x  2008-11-15  19:16:07  3  1234567
1  1  8911234  dummy@dummy.com  x.x.x.x  2008-11-15  17:59:55  4  8901234
2  2  4567833  dummy@dummy.com  x.x.x.x  2008-11-15  17:50:20  5  4567890

                 2        3           4         5
0  dummy@dummy.net  x.x.x.x  2008-11-15  17:43:13
1  dummy@dummy.com  x.x.x.x  2008-11-15  13:18:01
2  dummy@dummy.com  x.x.x.x  2008-11-15  09:29:10
</snippet></ROW><ROW><id>19229488</id><snippet>AssertionError</snippet></ROW><ROW><id>19229488</id><snippet>36142334</snippet></ROW><ROW><id>19229718</id><snippet>class MyClass(Object):
    class_attribute = "Foo"

    def __init__(self,*args,**kwargs):
        self.instance_property = "whatever"
</snippet></ROW><ROW><id>19229718</id><snippet>class GPIO(object):
    @property
    def value(self):
        return open("/sys/class/gpio/gpio141/value").read()

    @value.setter
    def set_value(self,val):
         open("/sys/class/gpio/gpio141/value","w").write(val)
</snippet></ROW><ROW><id>19230681</id><snippet>sql = """CREATE TABLE IF NOT EXISTS temps (
  temp1 FLOAT,  
  temp2 FLOAT )"""
cursor.execute(sql)
</snippet></ROW><ROW><id>19230828</id><snippet>SHARED_APPS</snippet></ROW><ROW><id>19230828</id><snippet>TENANT_APPS</snippet></ROW><ROW><id>19230828</id><snippet>HOST</snippet></ROW><ROW><id>19230828</id><snippet>PUBLIC_SCHEMA_URLCONF</snippet></ROW><ROW><id>19230925</id><snippet>locale.setlocale(category,locale)</snippet></ROW><ROW><id>19230925</id><snippet>print( locale.locale_alias)
</snippet></ROW><ROW><id>19230925</id><snippet>locale.setlocale(locale.LC_ALL,'portuguese_brazil')
today = dt.date.today()
today.strftime('%x')
print(today)
</snippet></ROW><ROW><id>19231154</id><snippet>re.search</snippet></ROW><ROW><id>19231154</id><snippet>re.findall</snippet></ROW><ROW><id>19231154</id><snippet>r"RED[0-9]+"</snippet></ROW><ROW><id>19231154</id><snippet>&gt;&gt;&gt; strings
['CS989_-RED814298959', 'CS663_RED812657324', 'RED819238322_CS537']
&gt;&gt;&gt; re.match(r"(RED[0-9]+)", strings[0])
&gt;&gt;&gt; re.findall(r"(RED[0-9]+)", strings[0])
['RED814298959']
&gt;&gt;&gt; re.findall(r"(RED[0-9]+)", strings[1])
['RED812657324']
&gt;&gt;&gt; re.findall(r"(RED[0-9]+)", strings[2])
['RED819238322']
&gt;&gt;&gt; re.search(r"(RED[0-9]+)", strings[0])
&lt;_sre.SRE_Match object at 0x1772e40&gt;
</snippet></ROW><ROW><id>19231395</id><snippet>def changeImage(self):

    ##
    ##  FUNCTION THAT UPDATES THE IMAGES AND CYCLES THROUGH THEM
    ##

    #if player is going left
    while faceWhatDirection == 1 and keyDown == True:
        self.image =self.imagesLeft[0]
        self.image =self.imagesLeft[1]

    #if player is going right
    while faceWhatDirection == 2 and keyDown == True:
        self.image =self.imagesRight[0]
        self.image =self.imagesRight[1]

    #if player is going up
    while faceWhatDirection == 3 and keyDown == True:
        self.image =self.imagesUp[0]
        self.image =self.imagesUp[1]

    #if player is going down
    while faceWhatDirection == 4 and keyDown == True:
        self.image =self.imagesDown[0]
        self.image =self.imagesDown[1]
</snippet></ROW><ROW><id>19231395</id><snippet>while</snippet></ROW><ROW><id>19231395</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>19231395</id><snippet>import pygame
import sys

# Define some colors
black    = (   0,   0,   0)
white    = ( 255, 255, 255)
red      = ( 255,   0,   0)

class Player(pygame.sprite.Sprite):
    def __init__(self): 
        pygame.sprite.Sprite.__init__(self)

        self.images = {
            'left': self.load_animation('man1_lf1.gif', 'man1_lf2.gif'),
            'right': self.load_animation('man1_rt1.gif', 'man1_rt2.gif')
            'up': self.load_animation('man1_bk1.gif', 'man1_bk2.gif')
            'down': self.load_animation('man1_fr1.gif', 'man1_fr2.gif')
        }

        self.direction = 'down'
        self.moving = False

        # Arbitrary starting coordinates
        self.x = 5
        self.y = 5

    def load_animation(self, *names):
        output = []
        for name in names:
            img = pygame.image.load(name).convert()
            img.set_colorkey(white)
        return output

    @property
    def image(self):
        seconds = pygame.time.get_ticks() / 1000  
        # Returns the time in milliseconds since the game started
        image_index = seconds % 2:

        # Returns a new image every second
        if self.moving:
            return self.images[self.direction][image_index]
        else:
            return self.images[self.direction][0]

    @property
    def rect(self):
        image_rect = self.get_image().get_rect()
        return pygame.Rect((self.x, self.y), image_rect.size)


def main():
    pygame.init()

    width = 800
    height = 480
    mainScreen = pygame.display.set_mode([width,height])

    player = Player()

    all_sprites_list = pygame.sprite.Group()
    all_sprites_list.add(player)

    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYUP:
                if event.key in (pygame.K_LEFT, pygame.K_RIGHT, pygame.K_UP, pygame.K_DOWN):
                    player.moving = False

            if event.type == pygame.KEYDOWN:
                player.moving = True
                if event.key == pygame.K_LEFT:
                    player.x -= 1
                    player.direction = 'left'
                if event.key == pygame.K_RIGHT:
                    player.x += 1
                    player.direction = 'right'
                if event.key == pygame.K_UP: 
                    player.y -=1
                    player.direction = 'up'
                if event.key == pygame.K_DOWN:
                    player.y +=1
                    player.direction = 'down'


        clock.tick(20)

        mainScreen.fill(white)
        all_sprites_list.draw(mainScreen)
        pygame.display.flip()

    pygame.quit()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19231395</id><snippet>Player</snippet></ROW><ROW><id>19231395</id><snippet>my_player.image</snippet></ROW><ROW><id>19231395</id><snippet>image</snippet></ROW><ROW><id>19231474</id><snippet>import datetime
</snippet></ROW><ROW><id>19231474</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>19231474</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.now()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'now'
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now()
datetime.datetime(2013, 10, 7, 13, 57, 18, 456504)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19231516</id><snippet>currenttime = datetime.datetime.now().time().strftime("%H:%M")
if currenttime &gt;= "10:00" and currenttime &lt;= "13:00":
    if m2 &gt;= "10:00" and m2 &gt;= "12:00":
        m2 = ("""%s%s""" % (m2, " AM"))
    else:
        m2 = ("""%s%s""" % (m2, " PM"))
else:
    m2 = ("""%s%s""" % (m2, " PM"))
m2 = datetime.datetime.strptime(m2, '%I:%M %p')
m2 = m2.strftime("%H:%M %p")
m2 = m2[:-3]
print m2
</snippet></ROW><ROW><id>19231516</id><snippet>13:35
</snippet></ROW><ROW><id>19231939</id><snippet>In [20]: df = DataFrame(data['values'])

In [21]: df.columns = ["date","price"]

In [22]: df
Out[22]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 358 entries, 0 to 357
Data columns (total 2 columns):
date     358  non-null values
price    358  non-null values
dtypes: float64(1), int64(1)

In [23]: df.head()
Out[23]: 
         date  price
0  1349720105  12.08
1  1349806505  12.35
2  1349892905  12.15
3  1349979305  12.19
4  1350065705  12.15
In [25]: df['date'] = pd.to_datetime(df['date'],unit='s')

In [26]: df.head()
Out[26]: 
                 date  price
0 2012-10-08 18:15:05  12.08
1 2012-10-09 18:15:05  12.35
2 2012-10-10 18:15:05  12.15
3 2012-10-11 18:15:05  12.19
4 2012-10-12 18:15:05  12.15

In [27]: df.dtypes
Out[27]: 
date     datetime64[ns]
price           float64
dtype: object
</snippet></ROW><ROW><id>19232034</id><snippet>class stuff(Scene):
    def __init__(self):
        self.seen_description = False
        #other initialization goes here

    def enter(self):
        print "End Of The Road"
        if not self.seen_description:
            print "You are standing beside a small brick building at the end of a road from the north."
            print "A river flows south."
            print "To the north is open country, and all around is dense forest."
            self.seen_description = True

        action = raw_input("&gt; ")

        if action == "go inside":
            print "You enter the brick building"
            return 'brick building'

x = stuff()
x.enter()
x.enter()
</snippet></ROW><ROW><id>19232034</id><snippet>End Of The Road
You are standing beside a small brick building at the end of a road from the north.
A river flows south.
To the north is open country, and all around is dense forest.
&gt; wait
End Of The Road
&gt; wait
</snippet></ROW><ROW><id>19232034</id><snippet>enter</snippet></ROW><ROW><id>19232102</id><snippet>s=json.dumps(variables)
variables2=json.loads(s)
assert(variables==variables2)
</snippet></ROW><ROW><id>19232124</id><snippet>&gt;&gt;&gt; var = {}
&gt;&gt;&gt; var['a'] = {}
&gt;&gt;&gt; var['b'] = {}
&gt;&gt;&gt; var['b'][len(var['b'] )] = 'text1'
&gt;&gt;&gt; var['b'][len(var['b'] )] = 'text2'
&gt;&gt;&gt; var
{'a': {}, 'b': {0: 'text1', 1: 'text2'}}
</snippet></ROW><ROW><id>19232124</id><snippet>&gt;&gt;&gt; class array(dict):
    def __getitem__(self, key):
        return dict.__getitem__(self, key)
    def __setitem__(self, key, value):
        if key == slice(None, None, None):
            dict.__setitem__(self, self.__len__(), value)
        else:
            dict.__setitem__(self, key, value)


&gt;&gt;&gt; var = array()
&gt;&gt;&gt; var['a'] = array()
&gt;&gt;&gt; var['b'] = array()
&gt;&gt;&gt; var['b'][:] = 'text1'
&gt;&gt;&gt; var['b'][:] = 'text2'
&gt;&gt;&gt; var
{'a': {}, 'b': {0: 'text1', 1: 'text2'}}
</snippet></ROW><ROW><id>19232441</id><snippet>class YourModel(models.Model):
    name = models.CharField(max_length=100)

class YourModelUpdateHistory(models.Model):
    your_model = models.ForeignKey('YourModel')
    updated = models.DateTimeField() 
</snippet></ROW><ROW><id>19232441</id><snippet>YourModelUpdateHistory</snippet></ROW><ROW><id>19232441</id><snippet>YourModel</snippet></ROW><ROW><id>19232441</id><snippet>save()</snippet></ROW><ROW><id>19232441</id><snippet>from django.utils import timezone

class YourModel(models.Model):
    name = models.CharField(max_length=100)

    def save(self, *args, **kwargs):
        super(YourModel, self).save(*args, **kwargs)
        YourModelUpdateHistory.objects.create(your_model=self, updated=timezone.now())
</snippet></ROW><ROW><id>19232459</id><snippet>game</snippet></ROW><ROW><id>19232459</id><snippet>()</snippet></ROW><ROW><id>19232459</id><snippet>while gaming == 1:
    game()
</snippet></ROW><ROW><id>19232459</id><snippet>game</snippet></ROW><ROW><id>19232459</id><snippet>gaming</snippet></ROW><ROW><id>19232459</id><snippet># Always import at the top of your script
from random import choice
print "1 stands for paper, 2 stands for rock, 3 stand for scissors"
# Using a tuple here is actually faster than using a list
signs = 1, 2, 3
def game():
    i = int(raw_input("pick a sign, use the numbers shown above "))
    cc = choice(signs)
    if i - cc == 0:
        print "it's a draw"
    elif i - cc == 1:
        print "you lose"
    elif  i - cc == 2:
        print "you win"
    elif i - cc == -1:
        print "you win"
    elif i - cc == -2:
        print "you lose"
    return int(raw_input("if you want to play again, press 1"))
# Have the script loop until the return value of game != 1
while game() == 1:
    # pass is a do-nothing placeholder
    pass
</snippet></ROW><ROW><id>19232527</id><snippet>self.order_id</snippet></ROW><ROW><id>19232527</id><snippet>OrderId</snippet></ROW><ROW><id>19232527</id><snippet>OrderID</snippet></ROW><ROW><id>19232645</id><snippet>from bs4 import BeautifulSoup
import urllib2
url="http://jobsearch.monsterboard.nl/browse/"
page=urllib2.urlopen(url)
soup = BeautifulSoup(page.read())
jobs=soup.findAll('a',{'class':'slJobTitle'})
for eachjob in jobs:
 print eachjob['href']  
</snippet></ROW><ROW><id>19232666</id><snippet>import sys
print(sys.path)
</snippet></ROW><ROW><id>19232666</id><snippet>sys.path.append("C:\Anaconda\Lib\site-packages") 
</snippet></ROW><ROW><id>19232765</id><snippet>While True
    ask user for input1
    ask user for input2
    display input1 + input2
    ask user if they want to go again
    if no then exit
</snippet></ROW><ROW><id>19233116</id><snippet>def message(func, e):
    print "Exception", type(e).__name__, "in", func.__name__
    print str(e)
</snippet></ROW><ROW><id>19233116</id><snippet>import functools

def handle_with(handler, *exceptions):
    try:
        handler, cleanup = handler
    except TypeError:
        cleanup = lambda f, e: None
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except exceptions or Exception as e:
                return handler(func, e)
            finally:
                cleanup(func, e)
        return wrapper
    return decorator
</snippet></ROW><ROW><id>19233116</id><snippet>Exception</snippet></ROW><ROW><id>19233116</id><snippet>finally</snippet></ROW><ROW><id>19233116</id><snippet>@handle_with(message, TypeError, ValueError)
def add(x, y):
    return x + y
</snippet></ROW><ROW><id>19233116</id><snippet>from contextlib import contextmanager 

@contextmanager
def handler(handler, *exceptions):
    try:
        handler, cleanup = handler
    except TypeError:
        cleanup = lambda e: None
    try:
        yield
    except exceptions or Exception as e:
        handler(e)
    finally:
        cleanup(e)
</snippet></ROW><ROW><id>19233116</id><snippet>def message(e):
    print "Exception", type(e).__name__
    print str(e)

 def add(x, y):
     with handler(message, TypeError, ValueError):
         return x + y
</snippet></ROW><ROW><id>19233116</id><snippet>inspect</snippet></ROW><ROW><id>19233187</id><snippet>class Companies(db.Model):                                                                                                                                                                                                        
    ...
    branches = db.relationship("Branches")                                                                                                                                                                                        
    ...
</snippet></ROW><ROW><id>19233187</id><snippet>company.branches</snippet></ROW><ROW><id>19233187</id><snippet>filter()</snippet></ROW><ROW><id>19233187</id><snippet>all()</snippet></ROW><ROW><id>19233187</id><snippet>company = session.query(Companies).first()
my_branch = Branches(...)
company.branches.append(my_branch)
session.commit()
</snippet></ROW><ROW><id>19233187</id><snippet>Branches</snippet></ROW><ROW><id>19233187</id><snippet>type(company.branches)</snippet></ROW><ROW><id>19233187</id><snippet>&lt;type 'list'&gt;</snippet></ROW><ROW><id>19233187</id><snippet>branches</snippet></ROW><ROW><id>19233187</id><snippet>company.branches.filter(...).all()</snippet></ROW><ROW><id>19233187</id><snippet>lazy</snippet></ROW><ROW><id>19233187</id><snippet>class Companies(db.Model):                                                                                                                                                                                                        
    ...
    branches = db.relationship("Branches", lazy='dynamic')                                                                                                                                                                                        
    ...
</snippet></ROW><ROW><id>19233398</id><snippet>/search</snippet></ROW><ROW><id>19233398</id><snippet>request.query</snippet></ROW><ROW><id>19233526</id><snippet>cursor.execute("""INSERT INTO temps VALUES (%s,%s,CURRENT_TIMESTAMP)""",(avgtemperatures[0],avgtemperatures[1]))
</snippet></ROW><ROW><id>19233572</id><snippet>.format()</snippet></ROW><ROW><id>19233572</id><snippet>&gt;&gt;&gt; a = 11222.33
&gt;&gt;&gt; "${:,.2f}".format(a)
'$11,222.33'
&gt;&gt;&gt; a = 111111111222.33
&gt;&gt;&gt; "${:,.2f}".format(a)
'$111,111,111,222.33'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19233693</id><snippet>name = row.split()</snippet></ROW><ROW><id>19233693</id><snippet>In [1]: "john".split()
Out[1]: ['john']
</snippet></ROW><ROW><id>19233693</id><snippet>row.split()[0]
</snippet></ROW><ROW><id>19233708</id><snippet>if request.method == 'POST':
    form = CourseForm(request.POST)
    if form.is_valid():
        course = form.cleaned_data['Title']
        print "Course Selected:", course
        return HttpResponseRedirect('/home/')
else:
    form = CourseForm()
return render(request, 'templates/home/courses.html', {'form': form})
</snippet></ROW><ROW><id>19233830</id><snippet>print</snippet></ROW><ROW><id>19233830</id><snippet>print '{} {}'.format(*d())
</snippet></ROW><ROW><id>19233830</id><snippet>dret = d()
print dret[0],dret[1]
</snippet></ROW><ROW><id>19233830</id><snippet>print a,b</snippet></ROW><ROW><id>19233830</id><snippet>a,b</snippet></ROW><ROW><id>19233830</id><snippet>print</snippet></ROW><ROW><id>19233830</id><snippet>print</snippet></ROW><ROW><id>19233830</id><snippet>a,b</snippet></ROW><ROW><id>19233830</id><snippet>q,r</snippet></ROW><ROW><id>19233830</id><snippet>c = a,b
print c
</snippet></ROW><ROW><id>19233830</id><snippet>print</snippet></ROW><ROW><id>19233851</id><snippet>-mapper "python mapper.py" -reducer "python reducer.py"
</snippet></ROW><ROW><id>19233851</id><snippet>*.py</snippet></ROW><ROW><id>19233851</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>19233862</id><snippet>input_list = input("Enter numbers separated by spaces: ")

number = input_list.split()
if len(number) == 5:
    for n in number:
        a = int(n)
        if 0&lt; a &lt;=5:
            print ('x'* a)
        elif a == 0:
            print ('.')
        else:
            print ("Number does not lie in the range 0 to 5.")
else:
    print ("Invalid Input.")
</snippet></ROW><ROW><id>19234033</id><snippet>import nltk
import sys
print(nltk)
print(sys.executable)
</snippet></ROW><ROW><id>19234033</id><snippet>python script.py
</snippet></ROW><ROW><id>19234297</id><snippet>sys.gettrace/settrace</snippet></ROW><ROW><id>19234297</id><snippet>[ok]</snippet></ROW><ROW><id>19234297</id><snippet>import inspect
import sys


def logging_tracer(frame, event, arg):
    lines, firstline = inspect.getsourcelines(frame)

    def local_tracer(local_frame, event, arg):
        if event == 'line' and frame is local_frame:
            print event, frame.f_lineno,'\t', lines[frame.f_lineno - firstline]
            #print event, lines[frame.f_lineno - firstline]
            #print frame.f_code.co_name, frame.f_lineno, event, arg

    if frame.f_code in LOG_THESE_FUNCTIONS:
        print event, frame.f_lineno,'\t', lines[frame.f_lineno - firstline + (event == 'call')]
        #print frame.f_code.co_name, event, arg
        return local_tracer
    else:
        return None


LOG_THESE_FUNCTIONS = set()


def loggingdecorator(func):
    LOG_THESE_FUNCTIONS.add(func.func_code)

    def _wrapper():
        old_trace_function = sys.gettrace()
        sys.settrace(logging_tracer)
        try:
            result = func()
        except:
            raise
        else:
            return result
        finally:
            sys.settrace(old_trace_function)
    return _wrapper
</snippet></ROW><ROW><id>19234366</id><snippet>for sortedkey in sorted(jDict):
    # first join1, then join2
</snippet></ROW><ROW><id>19234366</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>19234366</id><snippet>join1</snippet></ROW><ROW><id>19234366</id><snippet>join2</snippet></ROW><ROW><id>19234366</id><snippet>join1</snippet></ROW><ROW><id>19234366</id><snippet>join2</snippet></ROW><ROW><id>19234366</id><snippet>jDict['joins'] = [join1, join2, etc.]</snippet></ROW><ROW><id>19234376</id><snippet>numpy</snippet></ROW><ROW><id>19234376</id><snippet>numpy</snippet></ROW><ROW><id>19234376</id><snippet>list_answer = [item.CalculateDutyCycle() * 100.0 for item in self.dictTable.values()]
newTable = np.array(list_answer)
</snippet></ROW><ROW><id>19234401</id><snippet>flush</snippet></ROW><ROW><id>19234401</id><snippet>transport.write</snippet></ROW><ROW><id>19234401</id><snippet>Int32StringReceiver.sendString</snippet></ROW><ROW><id>19234489</id><snippet>timedelta</snippet></ROW><ROW><id>19234489</id><snippet>def custom_format(td):
    minutes, seconds = divmod(td.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return '{:d}:{:02d}'.format(hours, minutes)
</snippet></ROW><ROW><id>19234489</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; def custom_format(td):
...     minutes, seconds = divmod(td.seconds, 60)
...     hours, minutes = divmod(minutes, 60)
...     return '{:d}:{:02d}'.format(hours, minutes)
... 
&gt;&gt;&gt; custom_format(timedelta(hours=9, minutes=46, seconds=4, microseconds=352515))
'9:46'
</snippet></ROW><ROW><id>19234489</id><snippet>.days</snippet></ROW><ROW><id>19234489</id><snippet>def custom_format(td):
    minutes, seconds = divmod(td.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    formatted = '{:d}:{:02d}'.format(hours, minutes)
    if td.days:
        formatted = '{} day{} {}'.format(
            td.days, 's' if td.days &gt; 1 else '', formatted)
    return formatted
</snippet></ROW><ROW><id>19234489</id><snippet>&gt;&gt;&gt; custom_format(timedelta(days=42, hours=9, minutes=46, seconds=4, microseconds=352515))
'42 days 9:46'
&gt;&gt;&gt; custom_format(timedelta(days=1, hours=9, minutes=46, seconds=4, microseconds=352515))
'1 day 9:46'
&gt;&gt;&gt; custom_format(timedelta(hours=9, minutes=46, seconds=4, microseconds=352515))
'9:46'
</snippet></ROW><ROW><id>19234574</id><snippet>urllib2</snippet></ROW><ROW><id>19234574</id><snippet>curl</snippet></ROW><ROW><id>19234574</id><snippet>WRITEDATA</snippet></ROW><ROW><id>19234574</id><snippet>StringIO</snippet></ROW><ROW><id>19234574</id><snippet># ...
s = StringIO.StringIO()
req.setopt(pycurl.WRITEDATA, s)
req.perform()
data = s.getvalue()
</snippet></ROW><ROW><id>19234574</id><snippet>StringIO</snippet></ROW><ROW><id>19234574</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>19234574</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>19234574</id><snippet>s = StringIO.StringIO()
req.setopt(pycurl.WRITEFUNCTION, s.write)
req.perform()
data = s.getvalue()
</snippet></ROW><ROW><id>19234574</id><snippet>StringIO</snippet></ROW><ROW><id>19234574</id><snippet>curl</snippet></ROW><ROW><id>19234574</id><snippet>pycurl</snippet></ROW><ROW><id>19234574</id><snippet>''.join</snippet></ROW><ROW><id>19234574</id><snippet>libcurl</snippet></ROW><ROW><id>19234574</id><snippet>pycurl</snippet></ROW><ROW><id>19234574</id><snippet>pycurl</snippet></ROW><ROW><id>19234574</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>19234574</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>19234574</id><snippet>curl</snippet></ROW><ROW><id>19234574</id><snippet>z = zlib.decompressobj()
s = []
def handle(chunk):
    s.append(z.decompress(chunk))
    return len(chunk)
req.setopt(pycurl.WRITEFUNCTION, handle)
req.perform()
s.append(z.flush())
data = ''.join(s)
</snippet></ROW><ROW><id>19234574</id><snippet>curl</snippet></ROW><ROW><id>19234574</id><snippet>req.perform()</snippet></ROW><ROW><id>19234574</id><snippet>z.decompress</snippet></ROW><ROW><id>19234895</id><snippet>datetime</snippet></ROW><ROW><id>19234895</id><snippet>timedelta</snippet></ROW><ROW><id>19234895</id><snippet>+</snippet></ROW><ROW><id>19234895</id><snippet>&gt;&gt;&gt; dt = datetime.datetime(1945, 1, 3, 11, 45, 0, 44000)
&gt;&gt;&gt; td = datetime.timedelta(hours=0, minutes=7, seconds=38.701)
&gt;&gt;&gt; dt + td
datetime.datetime(1945, 1, 3, 11, 52, 38, 745000)
</snippet></ROW><ROW><id>19234895</id><snippet>timedelta</snippet></ROW><ROW><id>19234895</id><snippet>strptime</snippet></ROW><ROW><id>19234895</id><snippet>datetime</snippet></ROW><ROW><id>19234895</id><snippet>datetime</snippet></ROW><ROW><id>19234895</id><snippet>timedelta</snippet></ROW><ROW><id>19234895</id><snippet>def strpdelta(s):
    hr, min, sec = map(float, s.split(':'))
    return datetime.timedelta(hours=hr, minutes=min, seconds=sec)
</snippet></ROW><ROW><id>19234937</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>19234977</id><snippet>#! /usr/bin/python3
numbers = []
while True:
    number = int(input('Give me a number: '))
    if number == -99: break
    numbers.append(number)
for number in sorted(numbers, reverse=True):
    print(number)
</snippet></ROW><ROW><id>19234984</id><snippet>self</snippet></ROW><ROW><id>19234984</id><snippet>def GET(self):
    user_data = web.input()
    return self.performstuff(user_data.color, user_data.shade)
</snippet></ROW><ROW><id>19235033</id><snippet>    import sys

    if __name__ == '__main__':
        import foo
        f_list = []
        in_line = int(sys.argv[1])
        for k,v in sys.modules['foo'].__dict__.iteritems():
            if k.startswith('__'):
                continue
            if hasattr(v, '__call__'): #We have a function
                f_list.append((v.__name__, v.__code__.co_firstlineno))
        #sort our function list according to starting line of each function (if needed)
        last_fn = None
        for f_name, f_line in f_list:
            if f_line &gt;= in_line:
                break;
            else:
                last_fn = f_name

        if last_fn:
                print 'Line {} is probably in function {}'.format(in_line, last_fn)
</snippet></ROW><ROW><id>19235033</id><snippet>    ./intro.py 7 
    Line 7 is probably in function do_foo

    ./intro.py 13
    Line 13 is probably in function do_blah
</snippet></ROW><ROW><id>19235173</id><snippet>app.run(host='0.0.0.0', debug=True)
</snippet></ROW><ROW><id>19235338</id><snippet>command-matrix.csv</snippet></ROW><ROW><id>19235338</id><snippet>command_matrix</snippet></ROW><ROW><id>19235338</id><snippet>commands_csv = open("command-matrix.csv")
command_matrix = []
for line in commands_csv:
    command_matrix.append(line.strip().split(','))
</snippet></ROW><ROW><id>19235338</id><snippet>strip</snippet></ROW><ROW><id>19235338</id><snippet>split</snippet></ROW><ROW><id>19235338</id><snippet>,</snippet></ROW><ROW><id>19235338</id><snippet>strip</snippet></ROW><ROW><id>19235504</id><snippet>import pandas as pd


df_dict = ({'unit' : [1, 1, 1, 2, 2, 2], 'cat' : [1, 2, 3, 1, 2, 4], 
           'count' : [8, 3, 2, 2, 8, 7] })
df = pd.DataFrame(df_dict)

df.set_index('unit', inplace = True)    

cumsum_count = df.groupby(level=0).apply(lambda x: pd.Series(x['count'].cumsum().values, index=x['cat']))
# unit  cat
# 1     1       8
#       2      11
#       3      13
# 2     1       2
#       2      10
#       4      17
# dtype: int64

cumsum_count = cumsum_count.unstack(level=1).fillna(method='ffill', axis=1)
# cat   1   2   3   4
# unit               
# 1     8  11  13  13
# 2     2  10  10  17

totals = df.groupby(level=0)['count'].sum()
# unit
# 1       13
# 2       17
# Name: count, dtype: int64

cumsum_dist = cumsum_count.div(totals, axis=0)
print(cumsum_dist)
</snippet></ROW><ROW><id>19235504</id><snippet>cat          1         2         3  4
unit                                 
1     0.615385  0.846154  1.000000  1
2     0.117647  0.588235  0.588235  1
</snippet></ROW><ROW><id>19235504</id><snippet>s.apply(lambda x: pd.Series(1, index=x))
</snippet></ROW><ROW><id>19235504</id><snippet>cat</snippet></ROW><ROW><id>19235508</id><snippet>from bs4 import BeautifulSoup

s = '''
&lt;doc id = "some_number" url = " some_link " title = " some_title " &gt;

text here

&lt;/doc&gt;

&lt;doc id = "some_number" url = " some_link " title = " some_title " &gt;

text here

&lt;/doc&gt;'''

soup = BeautifulSoup(s)
for doc in soup.find_all('doc'):
    print('{}: {}'.format(doc['title'], doc.text))
</snippet></ROW><ROW><id>19235508</id><snippet> some_title :
text here

 some_title :
text here
</snippet></ROW><ROW><id>19235508</id><snippet>for doc in soup.find_all('doc'):
    doc['title']('text')
</snippet></ROW><ROW><id>19235508</id><snippet>TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>19235508</id><snippet>.*?</snippet></ROW><ROW><id>19235508</id><snippet>re</snippet></ROW><ROW><id>19235508</id><snippet>'.'</snippet></ROW><ROW><id>19235508</id><snippet>pattern = re.compile("&lt;doc.*?&gt;(.*?)&lt;/doc&gt;", re.DOTALL)</snippet></ROW><ROW><id>19235508</id><snippet>doc</snippet></ROW><ROW><id>19235508</id><snippet>doc</snippet></ROW><ROW><id>19235611</id><snippet>values</snippet></ROW><ROW><id>19235611</id><snippet>zones</snippet></ROW><ROW><id>19235611</id><snippet>np.bincount</snippet></ROW><ROW><id>19235611</id><snippet>import numpy as np

zones = np.zeros((20,30), int)
zones[:8,:15] = 100
zones[8:,:15] = 101
zones[:8,15:] = 102
zones[8:,15:] = 103

values = np.random.randint(0,10,(20,30))  # no need for that loop

tab = np.array([np.bincount(values[zones==zone]) for zone in np.unique(zones)])
</snippet></ROW><ROW><id>19235611</id><snippet>np.histogram2d(zones.flatten(), values.flatten(), bins=[np.unique(zones).size, values.max()-values.min()+1])
</snippet></ROW><ROW><id>19235611</id><snippet>np.bincount(values)
</snippet></ROW><ROW><id>19235611</id><snippet>zone = 101         # the desired zone
mask = zone==zones # a mask that is True wherever your zones map matches the desired zone
np.bincount(values[mask])  # count the values where the mask is True
</snippet></ROW><ROW><id>19235611</id><snippet>zs = np.unique(zones)
</snippet></ROW><ROW><id>19235611</id><snippet>tab = np.array([np.bincount(values[zones==zone]) for zone in np.unique(zones)])
</snippet></ROW><ROW><id>19235611</id><snippet>print tab
# elements with cover = 
#  0  1  2  3  4  5  6  7  8  9     # in zone:
[[16 11 10 12 13 15 11  7 13 12]    # 100
 [13 23 15 16 24 16 24 21 15 13]    # 101
 [10 12 23 13 12 11 11  5 11 12]    # 102
 [19 25 20 12 16 19 13 18 22 16]]   # 103
</snippet></ROW><ROW><id>19235611</id><snippet>import matplotlib.pyplot as plt

plt.hist2d(zones.flatten(), values.flatten(), bins=[np.unique(zones).size, values.max()-values.min()+1])
</snippet></ROW><ROW><id>19235788</id><snippet>putalpha</snippet></ROW><ROW><id>19235788</id><snippet>load</snippet></ROW><ROW><id>19235788</id><snippet>getpixel</snippet></ROW><ROW><id>19235788</id><snippet>setpixel</snippet></ROW><ROW><id>19235788</id><snippet>from PIL import Image

im = Image.open('bird.jpg')
im.putalpha(255)
width, height = im.size
pixels = im.load()
for y in range(int(height*.55), int(height*.75)):
    alpha = 255-int((y - height*.55)/height/.20 * 255)
    for x in range(width):
        pixels[x, y] = pixels[x, y][:3] + (alpha,)
for y in range(y, height):
    for x in range(width):
        pixels[x, y] = pixels[x, y][:3] + (0,)
im.save('birdfade.png')
</snippet></ROW><ROW><id>19235788</id><snippet>putalpha</snippet></ROW><ROW><id>19235788</id><snippet>255</snippet></ROW><ROW><id>19235869</id><snippet>cur.execute('INSERT INTO %s (day, elapsed_time, net_time, length, average_speed, geometry) VALUES (%s, %s, %s, %s, %s, %s)', (escaped_name, day, time_length, time_length_net, length_km, avg_speed, myLine_ppy))
</snippet></ROW><ROW><id>19235869</id><snippet>execute()</snippet></ROW><ROW><id>19235869</id><snippet>escaped_name</snippet></ROW><ROW><id>19235869</id><snippet>escaped_name</snippet></ROW><ROW><id>19235869</id><snippet>query = "INSERT INTO %s (col1, ...) VALUES (%%s, ...)" % escaped_name
curs.execute(query, args_tuple)
</snippet></ROW><ROW><id>19235869</id><snippet>%</snippet></ROW><ROW><id>19235869</id><snippet>escaped_name</snippet></ROW><ROW><id>19236164</id><snippet>server_setup</snippet></ROW><ROW><id>19236164</id><snippet>In [1]: from pandas import * 
   ...: import numpy as np
   ...: 
   ...: user1 = 'foo'
   ...: pwd1 = 'xx1'
   ...: 
   ...: user2 = 'foo2'

In [2]: %macro server_setup 1
Macro `server_setup` created. To execute, type its name (without quotes).
</snippet></ROW><ROW><id>19236164</id><snippet>%store server_setup
Stored 'server_setup' (Macro)
</snippet></ROW><ROW><id>19236164</id><snippet>c.StoreMagics.autorestore = True
</snippet></ROW><ROW><id>19236164</id><snippet>server_setup</snippet></ROW><ROW><id>19236438</id><snippet>def quickSelect(lst, k):
    if len(lst) != 0:
        pivot = lst[(len(lst)) // 2]
        smallerList = []
        for i in lst:
            if i &lt; pivot:
                smallerList.append(i)
        largerList = []
        for i in lst:
            if i &gt; pivot:
                largerList.append(i)
        count = len(lst) - len(smallerList) - len(largerList)
        m = len(smallerList)
        if k &gt;= m and k &lt; m + count:
            return pivot
            print(pivot)
        elif m &gt; k:
            return quickSelect(smallerList, k)
        else:
            return quickSelect(largerList, k-m-count)

lst = [70, 120, 170, 200]
k = len(lst) // 2

print(quickSelect(lst, k))
</snippet></ROW><ROW><id>19236438</id><snippet>&gt;&gt;&gt; 170
</snippet></ROW><ROW><id>19236497</id><snippet>dev~fish-and-lily&gt; class Resort(ndb.Model):
...    hotel_keys = ndb.KeyProperty(repeated=True)
... 
dev~xxx-and-zzz&gt; y = XX()
dev~xxx-and-zzz&gt; y.hotel_keys.append(ndb.Key('abc',1))
dev~xxx-and-zzz&gt; y.hotel_keys.append(ndb.Key('abc',2))
dev~xxx-and-zzz&gt; y.hotel_keys.append(ndb.Key('abc',3))
dev~xxx-and-zzz&gt; y.hotel_keys.index(ndb.Key('abc',3))
2
dev~xxx-and-zzz&gt; y.hotel_keys.pop(2)
Key('abc', 3)
dev~xxx-and-zzz&gt; y.hotel_keys
[Key('abc', 1), Key('abc', 2)]
dev~xxx-and-zzz&gt; 
</snippet></ROW><ROW><id>19236631</id><snippet>python</snippet></ROW><ROW><id>19236631</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>19236631</id><snippet>sudo pip install Flask</snippet></ROW><ROW><id>19236631</id><snippet>sudo easy_install Flask</snippet></ROW><ROW><id>19236631</id><snippet>+AppDir
  |-myapp.py
  |+templates
    |-form.html
</snippet></ROW><ROW><id>19236631</id><snippet>from datetime import datetime
from flask import Flask
app = Flask(__name__)

@app.route('/writetofile' methods = ['GET', 'POST'])
def writetofile():
    if request.method == 'GET':
        now = str(datetime.now())
        data = {'name' : request.args['name'], 'date' : now, 'filled':False}
        return render_template('form.html', data=data)

    if request.method == 'POST':
        content = request.params['content']
        now = str(datetime.now())

        with open('samplefile.txt', 'w') as f:
            f.write(content)
        data = {'filled':True, 'file': 'samplefile.txt', 'date': now}
        return render_template('form.html', date=date)

if __name__ == '__main__':
    port = 8000 #the custom port you want
    app.run(host='0.0.0.0', port=port)
</snippet></ROW><ROW><id>19236631</id><snippet>&lt;html&gt;&lt;body&gt;
&lt;center&gt;
  &lt;h2&gt;Form&lt;/h2&gt;
  &lt;p&gt;Welcome, Current system DateTime is {{data.date}}.&lt;/p&gt;

  {% if data.filled %}
    &lt;p&gt;Your content has been written to {{ data.file }}&lt;/p&gt;
  {% endif %}

  &lt;form action="{{ url_for('writetofile') }}" method=post&gt;
    &lt;label&gt;What do you want to write to the file?&lt;/lable&gt;
    &lt;textarea name=content cols=60 rows=10 placeholder='Write here &gt; Press submit'&gt;
    &lt;/textarea&gt;

    &lt;input type=submit value='Lets Go!'&gt;
  &lt;/form&gt; 
&lt;/center&gt;
&lt;/html&gt;&lt;/body&gt;
</snippet></ROW><ROW><id>19236631</id><snippet>cd &lt;path/to/AppDir&gt;</snippet></ROW><ROW><id>19236631</id><snippet>python myapp.py</snippet></ROW><ROW><id>19236631</id><snippet>http://&lt;yourRPi address&gt;:8000/writetofile</snippet></ROW><ROW><id>19236631</id><snippet>screen</snippet></ROW><ROW><id>19236779</id><snippet>def del_col(in_path):
    # read file into memory
    file_obj = open(in_path, 'rb')
    readfile = csv.reader(file_obj, delimiter='\t')

    # delete the status column here:

    vals = [row[:1] + row[2:] for row in readfile]
    print vals
    file_obj.close()  # if you are going to use the same file name, close and re-open

    # Now write csv to new file: 
    # write data to file
    out_path = in_path + "_out.dat"
    out_obj = open(out_path, 'w')
    writefile = csv.writer(out_obj, delimiter='\t')
    writefile.writerows(vals)
    out_obj.close()
</snippet></ROW><ROW><id>19236779</id><snippet>'w'</snippet></ROW><ROW><id>19236779</id><snippet>'r'</snippet></ROW><ROW><id>19236779</id><snippet>csv.writer()</snippet></ROW><ROW><id>19236788</id><snippet>reduce(lambda x,y: x*100*y,[1,2],3)
</snippet></ROW><ROW><id>19236794</id><snippet>your_dict = {u'605': [u'56', u'31'], u'602': [u'43', u'77']}

for precincts in map_data["features"]:

    placeVariable = precincts["properties"]
    prec = placeVariable["precNum"] 

    if your_dict.get(prec): #checks if prec exists in your_dict
        placeVariable["cand1"] = your_dict['prec'][0]
        placevariable["cand2"] = your_dict['prec'][0]
</snippet></ROW><ROW><id>19236834</id><snippet>      Replace &lt;Numeric/arrayobject.h&gt; with &lt;numpy/arrayobject.h&gt;
</snippet></ROW><ROW><id>19236834</id><snippet>     import numpy as NU
</snippet></ROW><ROW><id>19236834</id><snippet>    include_dirs = [NU.get_include()], 
</snippet></ROW><ROW><id>19236853</id><snippet>read()</snippet></ROW><ROW><id>19236853</id><snippet>split(...)[1]</snippet></ROW><ROW><id>19236853</id><snippet>book = open('finn.txt').read()
x = book.split('*** START OF THIS PROJECT GUTENBERG EBOOK HUCKLEBERRY FINN ***')[1]
</snippet></ROW><ROW><id>19236860</id><snippet>statvfs</snippet></ROW><ROW><id>19236860</id><snippet>/data/foo/utils</snippet></ROW><ROW><id>19236860</id><snippet>used</snippet></ROW><ROW><id>19236860</id><snippet>used = (st.f_blocks - st.f_bfree) * st.f_frsize
</snippet></ROW><ROW><id>19236860</id><snippet>fsblkcnt_t     f_blocks;   /* size of fs in f_frsize units */
fsblkcnt_t     f_bfree;    /* # free blocks */
unsigned long  f_frsize;   /* fragment size */
</snippet></ROW><ROW><id>19236860</id><snippet>du</snippet></ROW><ROW><id>19236860</id><snippet>du</snippet></ROW><ROW><id>19237030</id><snippet>extra</snippet></ROW><ROW><id>19237030</id><snippet>queryset = Submission.objects.extra(
    select={'total': 'IFNULL((SELECT SUM(vote_value) ' + \
        'FROM submissions_vote ' + 'WHERE submissions_vote.submission_id = ' + \
        'submissions_submission.id), ' + '0)',
    'has_voted': 'CASE WHEN %d IN (SELECT voter_id FROM submissions_vote WHERE ' + \
        'submissions_vote.submission_id = submissions_submission.id) THEN 1 ELSE 0 END'
    }, select_params=(self.request.user.pk,)).order_by('-total')
</snippet></ROW><ROW><id>19237030</id><snippet>get_queryset</snippet></ROW><ROW><id>19237030</id><snippet>def get_queryset(self):
    return Submission.objects.extra(
    select={'total': 'IFNULL((SELECT SUM(vote_value) ' + \
        'FROM submissions_vote ' + 'WHERE submissions_vote.submission_id = ' + \
        'submissions_submission.id), ' + '0)',
    'has_voted': 'CASE WHEN %d IN (SELECT voter_id FROM submissions_vote WHERE ' + \
        'submissions_vote.submission_id = submissions_submission.id) THEN 1 ELSE 0 END'
    }, select_params=(self.request.user.pk,)).order_by('-total')
</snippet></ROW><ROW><id>19237030</id><snippet>queryset</snippet></ROW><ROW><id>19237185</id><snippet>textCursor = text.cursorForPosition(event.pos())
textCursor.select(QTextCursor.WordUnderCursor)
text.setTextCursor(textCursor)
word = textCursor.selectedText()

if meetsSomeCondition(word):
    toolTipText = toolTipFromWord(word)
    # Put the hover over in an easy to read spot
    pos = text.cursorRect(text.textCursor()).bottomRight()
    # The pos could also be set to event.pos() if you want it directly under the mouse
    pos = text.mapToGlobal(pos)
    QtGui.QToolTip.showText(pos,toolTipText)
</snippet></ROW><ROW><id>19237185</id><snippet>meetsSomeCondition()</snippet></ROW><ROW><id>19237185</id><snippet>toolTipFromWord()</snippet></ROW><ROW><id>19237185</id><snippet>QTextEdit.textCursor()</snippet></ROW><ROW><id>19237185</id><snippet>oldCur = text.textCursor()
textCursor.select(QTextCursor.WordUnderCursor) # line from above
text.setTextCursor(textCursor)                 # line from above
word = textCursor.selectedText()               # line from above
text.setTextCursor(oldCur)

# if condition as above
</snippet></ROW><ROW><id>19237471</id><snippet>from os import devnull
from subprocess import call

if __name__ == "__main__":
    with open(devnull, 'w') as dn:
        call(['echo', 'hello'], stdout=dn, stderr=dn)
</snippet></ROW><ROW><id>19237471</id><snippet>/dev/null</snippet></ROW><ROW><id>19237471</id><snippet>echo</snippet></ROW><ROW><id>19237471</id><snippet>shell=True</snippet></ROW><ROW><id>19237471</id><snippet>/bin/echo</snippet></ROW><ROW><id>19237471</id><snippet>call('echo hello', shell=True, stdout=dn, stderr=dn)
</snippet></ROW><ROW><id>19237471</id><snippet>from subprocess import call, DEVNULL

if __name__ == "__main__":
    call('echo hello', shell=True, stdout=DEVNULL, stderr=DEVNULL)
</snippet></ROW><ROW><id>19237856</id><snippet>commit</snippet></ROW><ROW><id>19237856</id><snippet>with</snippet></ROW><ROW><id>19237856</id><snippet>opens</snippet></ROW><ROW><id>19237856</id><snippet>with open(old,"w") as oldMaster,open(new,"w") as newMaster:
</snippet></ROW><ROW><id>19237907</id><snippet>teamA</snippet></ROW><ROW><id>19237907</id><snippet>teamB</snippet></ROW><ROW><id>19237907</id><snippet>&gt;&gt;&gt; alist = range(10)
&gt;&gt;&gt; alist
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; for i, x in enumerate(alist):
...     if i &lt; 5:
...         alist.remove(x)
...
&gt;&gt;&gt; alist
[1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>19237907</id><snippet>&gt;&gt;&gt; alist = range(10)
&gt;&gt;&gt; for i, x in enumerate(alist[:]):
...     if i &lt; 5:
...         alist.remove(x)
...
&gt;&gt;&gt; alist
[5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>19237917</id><snippet>from itertools import izip_longest

nums = [1646,
        2089,
         345]

revs = [str(n)[-1::-1] for n in nums]        # nums as reversed strings
izl  = izip_longest(*revs, fillvalue = '0')  # zip the digits together
xsum = lambda ds: str(sum(map(int, ds)))[-1] # digits -&gt; last digit of their sum
rres = ''.join(xsum(ds) for ds in izl)       # result, but as reversed string
res  = int(rres[-1::-1])                     # result: 3960
</snippet></ROW><ROW><id>19237917</id><snippet>map</snippet></ROW><ROW><id>19237917</id><snippet>izip_longest</snippet></ROW><ROW><id>19237917</id><snippet>revs = [str(n)[-1::-1] for n in nums]           # nums as reversed strings
dsum = lambda *ds: sum(int(d or 0) for d in ds) # str-digits -&gt; their sum
sums = map(dsum, *revs)[-1::-1]                 # digit sums, in order
ones = [str(s % 10) for s in sums]              # last digits of the sums
res  = int(''.join(ones))                       # result: 3960
</snippet></ROW><ROW><id>19238118</id><snippet>/&lt;var&gt;</snippet></ROW><ROW><id>19238118</id><snippet>/&lt;converter:var&gt;</snippet></ROW><ROW><id>19238118</id><snippet>from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/&lt;word&gt;', defaults={'word': 'bird'})
def word_up(word):
    return render_template('whatstheword.html', word=word)

@app.route('/files/&lt;path:path&gt;')
def serve_file(path):
    return send_from_directory(app.config['UPLOAD_DIR'], path, as_attachment=True)

if __name__ == '__main__':
    app.debug = True
    app.run(port=9017)
</snippet></ROW><ROW><id>19238118</id><snippet>&lt;int:var&gt;</snippet></ROW><ROW><id>19238118</id><snippet>&lt;float:var&gt;</snippet></ROW><ROW><id>19238118</id><snippet>&lt;path:blah&gt;</snippet></ROW><ROW><id>19238118</id><snippet>/</snippet></ROW><ROW><id>19238118</id><snippet>/blah/dee/blah</snippet></ROW><ROW><id>19238118</id><snippet>path</snippet></ROW><ROW><id>19238118</id><snippet>/blah/dee/blah</snippet></ROW><ROW><id>19238118</id><snippet>&lt;var&gt;</snippet></ROW><ROW><id>19238118</id><snippet>/</snippet></ROW><ROW><id>19238118</id><snippet>/files/&lt;path:path&gt;</snippet></ROW><ROW><id>19238118</id><snippet>arg</snippet></ROW><ROW><id>19238118</id><snippet>route()</snippet></ROW><ROW><id>19238118</id><snippet>url_map</snippet></ROW><ROW><id>19238156</id><snippet>floatformat</snippet></ROW><ROW><id>19238156</id><snippet>Decimal</snippet></ROW><ROW><id>19238156</id><snippet>form.price_retail</snippet></ROW><ROW><id>19238156</id><snippet>DecimalField</snippet></ROW><ROW><id>19238156</id><snippet>DecimalField</snippet></ROW><ROW><id>19238156</id><snippet>decimal_places</snippet></ROW><ROW><id>19238156</id><snippet>quantize</snippet></ROW><ROW><id>19238156</id><snippet>__init__</snippet></ROW><ROW><id>19238156</id><snippet>floatformat</snippet></ROW><ROW><id>19238156</id><snippet>input</snippet></ROW><ROW><id>19238156</id><snippet>value</snippet></ROW><ROW><id>19238156</id><snippet>__init__</snippet></ROW><ROW><id>19238156</id><snippet>class ProductForm(forms.ModelForm):
    # Meta as above
    def __init__(self, *args, **kwargs):
        if 'instance' in kwargs:
            kwargs['instance'].price_retail = kwargs['instance'].price_retail.quantize(Decimal('0.01'))
        super(ProductForm, self).__init__(*args, **kwargs) 
        self.fields['price_retail'].widget.attrs['class'] = 'input-price'
        self.fields['price_retail'].decimal_places = 2
</snippet></ROW><ROW><id>19238156</id><snippet>price_retail</snippet></ROW><ROW><id>19238291</id><snippet>from pylab import *
from matplotlib import colors
# A = [[1,2,3,4,5]]
A = [[0],[1]]
Amap = colors.ListedColormap(['blue','green'])

fig = figure(1)
ax = fig.add_subplot(111, autoscale_on=False)
imshow(A, cmap=Amap, interpolation='nearest')
ax.annotate('AA BB', fontsize=20, xy=(.25, .75),
            xycoords='data', xytext=(150, -6),
            textcoords='offset points',
            arrowprops=dict(arrowstyle="-&gt;",
                            linewidth = 5.,
                            color = 'red')
            )
ax.annotate('CC DD', fontsize=20, xy=(.25, .25),
            xycoords='data', xytext=(150, -6),
            textcoords='offset points',
            arrowprops=dict(width = 5.,
                            headwidth = 15.,
                            frac = 0.2,
                            shrink = 0.05,
                            linewidth = 2,
                            color = 'red')
            )
axis('off')
savefig('graph-py.pdf')
show()
close()
</snippet></ROW><ROW><id>19238369</id><snippet>Maximum = NULL
Minimum = NULL
Do 
  Get User Input string
  If Input is Blank Then Exit Loop
  Input = Convert Input to Number
  If Maximum=NULL 
     Then Maximum=Input
     Else If Input &gt; Maximum Then Input = Maximum
  If Minimum=NULL 
     Then Minimum=Input
     Else If Input &lt; Minimum Then Input = Minimum
Loop
Print "Min = " + Minimum
Print "Max = " + Maximum
</snippet></ROW><ROW><id>19238380</id><snippet>&gt;&gt;&gt; list2 = [120, 140, 150, 160]
&gt;&gt;&gt; set2 = set(list2)
&gt;&gt;&gt; for e in list1:
    name, _, num = e.rpartition(' ')
    if int(num) in set2:
        print name


store1
store2
store3
store4
</snippet></ROW><ROW><id>19238529</id><snippet> query = "SELECT car FROM cars....."

 cursor.execute(query)

 results = cursor.fetchall()
 if results:
      for row in results:
           print row[0]
 else:
      print 'No cars available.'
</snippet></ROW><ROW><id>19238550</id><snippet># -*- coding: utf-8 -*-
import HTMLParser
from bs4 import BeautifulSoup

astring = u"P&amp;O."
bstring = u"&amp; "
cstring = u"&gt;"
dstring = u"&gt; 150ÎC"

pars = HTMLParser.HTMLParser()
a1 = BeautifulSoup('&lt;span&gt;%s&lt;/span&gt;' % astring)
a2 = pars.unescape(astring)
print "a1:", a1
print "a2:", a2
b1 = BeautifulSoup('&lt;span&gt;%s&lt;/span&gt;' % bstring)
b2 = pars.unescape(bstring)
print "b1:", b1
print "b2:", b2
c1 = BeautifulSoup('&lt;span&gt;%s&lt;/span&gt;' % cstring)
c2 = pars.unescape(cstring)
print "c1:", c1
print "c2:", c2
d1 = BeautifulSoup('&lt;span&gt;%s&lt;/span&gt;' % dstring)
try: d2 = pars.unescape(dstring)
except: d2 = "HTML Parse Broke!"
print "d1:", d1
print "d2:", d2
</snippet></ROW><ROW><id>19238550</id><snippet>a1: &lt;span&gt;P&amp;O.&lt;/span&gt;
a2: P&amp;O.
b1: &lt;span&gt;&amp; &lt;/span&gt;
b2: &amp; 
c1: &lt;span&gt;&gt;&lt;/span&gt;
c2: &gt;
d1: &lt;span&gt;&gt; 150ÎC&lt;/span&gt;
d2: &gt; 150ÎC
</snippet></ROW><ROW><id>19238642</id><snippet>anagram_dict = {} # You could also use defaultdict(list) here
for w in words:
    key = "".join(sorted(w))
    if key in anagram_dict:
        anagram_dict[key].append(w)
    else:
        anagram_dict[key] = [w]
</snippet></ROW><ROW><id>19238642</id><snippet>anagram_list = []
for v in anagram_dict.iteritems():
    if len(v) &gt; 1:
        anagram_list += v
</snippet></ROW><ROW><id>19238884</id><snippet>collections.Counter</snippet></ROW><ROW><id>19238884</id><snippet>from collections import Counter
d = Counter(a)

n, m = d.keys(), d.values()
print n, m
</snippet></ROW><ROW><id>19239009</id><snippet>import os
from glob import glob
from shutil import rmtree

path = os.getcwd()
pattern = os.path.join(path, "tin*")

for item in glob(pattern):
    if not os.path.isdir(item):
        continue
    rmtree(item)
</snippet></ROW><ROW><id>19239115</id><snippet>plt.ion() 
plt.show()
</snippet></ROW><ROW><id>19239121</id><snippet>logging.addLevelName</snippet></ROW><ROW><id>19239121</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; MYLEVEL = 15
&gt;&gt;&gt; logging.addLevelName(MYLEVEL, 'MYLEVEL')
&gt;&gt;&gt; logging.basicConfig(level=0, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
&gt;&gt;&gt; logging.log(MYLEVEL, "ABCDEF")
2013-10-08 13:33:26,950 - root - MYLEVEL - ABCDEF
</snippet></ROW><ROW><id>19239284</id><snippet>chunkFuncs = {Math_EXP : Math_EXPChunk, Assignment : AssignmentChunk, Function : FunctionChunk}
</snippet></ROW><ROW><id>19239284</id><snippet>&gt;&gt;&gt; {[]: 3}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>19239284</id><snippet>Assignment</snippet></ROW><ROW><id>19239284</id><snippet>        localScope = chunkFuncs[chunk](chunk,localScope)
</snippet></ROW><ROW><id>19239284</id><snippet>Assignment</snippet></ROW><ROW><id>19239284</id><snippet>&gt;&gt;&gt; class mylist(list):
...   pass
...
&gt;&gt;&gt; hash(mylist)
2582159
&gt;&gt;&gt; hash(mylist())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'mylist'
</snippet></ROW><ROW><id>19239284</id><snippet>mylist</snippet></ROW><ROW><id>19239284</id><snippet>mylist()</snippet></ROW><ROW><id>19239284</id><snippet>pyPeg.List</snippet></ROW><ROW><id>19239284</id><snippet>id(the_instance)</snippet></ROW><ROW><id>19239420</id><snippet>curs.execute('insert ignore into sentences (sentence)  values (%s);', (x))
</snippet></ROW><ROW><id>19239420</id><snippet>curs.execute('insert ignore into sentences (sentence)  values (%s);', (x.encode('utf-8'))
</snippet></ROW><ROW><id>19239574</id><snippet>group_solvencias_manager</snippet></ROW><ROW><id>19239574</id><snippet>eval="[(4, ref('group_solvencia_user'))]"</snippet></ROW><ROW><id>19239574</id><snippet>eval="[(4, ref('group_solvencias_user'))]"</snippet></ROW><ROW><id>19239574</id><snippet>compra_grafibond</snippet></ROW><ROW><id>19239574</id><snippet>stock</snippet></ROW><ROW><id>19239574</id><snippet>'security/solvica_security.xml',
'security/ir.model.access.csv',
</snippet></ROW><ROW><id>19239596</id><snippet>__</snippet></ROW><ROW><id>19239596</id><snippet> TranscationHistory.objects.values('transaction__driverroute__id')
     .filter(User__id=request.user.id,Status='Completed')
     .annotate(sum_score=Sum('Credit'))
</snippet></ROW><ROW><id>19239600</id><snippet>easy_install SQLObject
</snippet></ROW><ROW><id>19239778</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19239778</id><snippet>pipe.wait()
</snippet></ROW><ROW><id>19239778</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19239778</id><snippet>os.system()</snippet></ROW><ROW><id>19240077</id><snippet>filter</snippet></ROW><ROW><id>19240077</id><snippet>save()</snippet></ROW><ROW><id>19240077</id><snippet>mdetails = MerchantDetails.select().where(MerchantDetails.id == 42).get()
mdetails.name = 'new name'
mdetails.save() # Will do the SQL update query.
</snippet></ROW><ROW><id>19240077</id><snippet>q = MerchantDetails.update(MerchantDetails.name='new name')
    .where(MerchantDetails.id == 42)
q.execute() # Will do the SQL update query.
</snippet></ROW><ROW><id>19240260</id><snippet>datetime</snippet></ROW><ROW><id>19240260</id><snippet>np.datetime64('2005-02')
</snippet></ROW><ROW><id>19240260</id><snippet>CumulativeMonth = (year - 1645) * 12 + month
</snippet></ROW><ROW><id>19240684</id><snippet>UNICODE</snippet></ROW><ROW><id>19240684</id><snippet>u''</snippet></ROW><ROW><id>19240684</id><snippet>import re
pattern = re.compile(r'^\s*([^\s]+)\s*$', re.UNICODE)
</snippet></ROW><ROW><id>19240978</id><snippet>1</snippet></ROW><ROW><id>19240978</id><snippet>0</snippet></ROW><ROW><id>19240978</id><snippet>x = x % 2</snippet></ROW><ROW><id>19240978</id><snippet>str(x % 2) * n</snippet></ROW><ROW><id>19240978</id><snippet>stringy</snippet></ROW><ROW><id>19240978</id><snippet>stringy.insert(0, str(x % 2))
x = x // 2
</snippet></ROW><ROW><id>19240978</id><snippet>&gt;&gt;&gt; def sortbit(n):
...     max_num = 2**n
...     for x in range(max_num):
...         stringy = []
...         for a in range(n):
...             stringy.append(str(x % 2))
...             x //= 2
...         print ''.join(reversed(stringy))
... 
&gt;&gt;&gt; sortbit(3)
000
001
010
011
100
101
110
111
</snippet></ROW><ROW><id>19240978</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>19240978</id><snippet>x &gt;&gt; 1</snippet></ROW><ROW><id>19240978</id><snippet>x</snippet></ROW><ROW><id>19240978</id><snippet>bin()</snippet></ROW><ROW><id>19240978</id><snippet>0b</snippet></ROW><ROW><id>19240978</id><snippet>format()</snippet></ROW><ROW><id>19240978</id><snippet>str.format()</snippet></ROW><ROW><id>19240978</id><snippet>b</snippet></ROW><ROW><id>19240978</id><snippet>def sortbit(n):
    for i in range(2**n):
        print '{:0{}b}'.format(i, n)
</snippet></ROW><ROW><id>19240978</id><snippet>n</snippet></ROW><ROW><id>19240978</id><snippet>itertools.product()</snippet></ROW><ROW><id>19240978</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for bits in product('01', repeat=3):
...     print ''.join(bits)
... 
000
001
010
011
100
101
110
111
</snippet></ROW><ROW><id>19241178</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>19241343</id><snippet>bool()</snippet></ROW><ROW><id>19241343</id><snippet>True</snippet></ROW><ROW><id>19241343</id><snippet>False</snippet></ROW><ROW><id>19241343</id><snippet>None</snippet></ROW><ROW><id>19241343</id><snippet>False</snippet></ROW><ROW><id>19241343</id><snippet>bool()</snippet></ROW><ROW><id>19241343</id><snippet>True</snippet></ROW><ROW><id>19241343</id><snippet>bool()</snippet></ROW><ROW><id>19241343</id><snippet>__len__</snippet></ROW><ROW><id>19241343</id><snippet>__nonzero__</snippet></ROW><ROW><id>19241343</id><snippet>__bool__</snippet></ROW><ROW><id>19241343</id><snippet>bool()</snippet></ROW><ROW><id>19241670</id><snippet>csv</snippet></ROW><ROW><id>19241670</id><snippet>reader = list(csv.reader(open(file_path_Inplane, 'rb'), delimiter="\t"))
</snippet></ROW><ROW><id>19241670</id><snippet>reader = [line.split() for in in open(file_path_Inplane)]
</snippet></ROW><ROW><id>19241702</id><snippet>in</snippet></ROW><ROW><id>19241702</id><snippet>if b in a:
</snippet></ROW><ROW><id>19241702</id><snippet>&gt;&gt;&gt; a = {'foo': 1, 'bar': 2}
&gt;&gt;&gt; 'foo' in a
True
&gt;&gt;&gt; 'spam' in a
False
</snippet></ROW><ROW><id>19241732</id><snippet>N</snippet></ROW><ROW><id>19241732</id><snippet>N[0]</snippet></ROW><ROW><id>19241732</id><snippet>if s in N:
    N[s] += 1
else:
    N[s] = 0 # or 1 or whatever
</snippet></ROW><ROW><id>19241742</id><snippet>net</snippet></ROW><ROW><id>19241742</id><snippet>net use X: \\Server\directory /user:"DOMAIN\username" "password"
</snippet></ROW><ROW><id>19241742</id><snippet>os.system()</snippet></ROW><ROW><id>19241857</id><snippet>DICT_COLOR = {'#':'red', 'X':'green', 'O':'yellow'}
SIZE_X = 300/len(grid[0])
SIZE_Y = 300/len(grid)
for i, line in enumerate(grid):
    for j, value in enumerate(line):
        self._canvas.create_rectangle(j*SIZE_X,
                                      i*SIZE_Y, 
                                      (j+1)*SIZE_X, 
                                      (i+1)*SIZE_Y, 
                                      fill=DICT_COLOR[value])
</snippet></ROW><ROW><id>19241923</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import urllib2

class MainWin:
    def my_timer(self):
        self.response=urllib2.urlopen(
            'http://192.168.1.11:7007/video/now.jpeg')
        self.loader=gtk.gdk.PixbufLoader()
        self.loader.write(self.response.read())
        self.loader.close()
        self.image.set_from_pixbuf(self.loader.get_pixbuf())
        return True# do ur work here, but not for long


    def destroy(self, widget, data=None):
        print "destroy signal occurred"
        gtk.main_quit()

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)
        self.image=gtk.Image()



        gtk.timeout_add(1000, self.my_timer) # call every min

        self.window.add(self.image)
        self.image.show()
        self.window.show()

    def main(self):
        gtk.main()

if __name__ == "__main__":
    MainWin().main()
</snippet></ROW><ROW><id>19241924</id><snippet>.pyx</snippet></ROW><ROW><id>19241924</id><snippet>setup</snippet></ROW><ROW><id>19241924</id><snippet>Cython -a rect.pyx --cplus</snippet></ROW><ROW><id>19241924</id><snippet>Python setup.py build_ext --inplace</snippet></ROW><ROW><id>19241924</id><snippet>import sys</snippet></ROW><ROW><id>19241924</id><snippet>sys.path.append("C:\\yourDirectory")</snippet></ROW><ROW><id>19241924</id><snippet>import Rectangle</snippet></ROW><ROW><id>19241924</id><snippet>r = Rectangle.PyRectangle(1,2,3,4)</snippet></ROW><ROW><id>19242343</id><snippet>django.http.request</snippet></ROW><ROW><id>19242343</id><snippet>django.core.handlers</snippet></ROW><ROW><id>19242451</id><snippet>[1, 0,    7, 6, 5, 4, 3, 2]    (spacing mine)
</snippet></ROW><ROW><id>19242456</id><snippet>Scatter</snippet></ROW><ROW><id>19242456</id><snippet>my_scatter = Scatter(do_rotation=False, do_scale=False) 
</snippet></ROW><ROW><id>19242456</id><snippet>Scatter</snippet></ROW><ROW><id>19242456</id><snippet>on_touch_down</snippet></ROW><ROW><id>19242456</id><snippet>on_touch_move</snippet></ROW><ROW><id>19242456</id><snippet>on_touch_up</snippet></ROW><ROW><id>19242456</id><snippet>on_touch_down</snippet></ROW><ROW><id>19242456</id><snippet>Widget</snippet></ROW><ROW><id>19242456</id><snippet>Widget</snippet></ROW><ROW><id>19242456</id><snippet>on_touch_down</snippet></ROW><ROW><id>19242456</id><snippet>def on_touch_down( self, touch ):
    if self.collide_point( *touch.pos ):
        touch.grab( self )
    return super(DraggableWidget, self).on_touch_down(touch)
</snippet></ROW><ROW><id>19242456</id><snippet>def on_touch_down( self, touch ):
    if self.collide_point( *touch.pos ):
        touch.grab( self )
        return True      # Don't call the on_touch_down of the Base Class
    return super(DraggableWidget, self).on_touch_down(touch)
</snippet></ROW><ROW><id>19242456</id><snippet>def on_touch_down( self, touch ):
    handled = super(DraggableWidget, self).on_touch_down(touch)
    if not handled and self.collide_point( *touch.pos ):
        touch.grab( self )
        return True
    return handled
</snippet></ROW><ROW><id>19242563</id><snippet>cursor.execute</snippet></ROW><ROW><id>19242563</id><snippet>        cursor.execute(add_produto, va, input_date, vc)
</snippet></ROW><ROW><id>19242563</id><snippet>        cursor.execute(add_produto, (va, input_date, vc))
</snippet></ROW><ROW><id>19242697</id><snippet>subprocess</snippet></ROW><ROW><id>19242697</id><snippet>'close_fds=True'</snippet></ROW><ROW><id>19242697</id><snippet>Popen</snippet></ROW><ROW><id>19242894</id><snippet>__table__</snippet></ROW><ROW><id>19242894</id><snippet>&gt;&gt;&gt; stmt = select([addresses.c.email_address]).\
...             where(addresses.c.user_id == users.c.id).\
...             limit(1)
&gt;&gt;&gt; conn.execute(users.update().values(fullname=stmt)) 
</snippet></ROW><ROW><id>19242894</id><snippet>__table__</snippet></ROW><ROW><id>19242894</id><snippet>&gt;&gt;&gt; stmt = select([Addresses.email_address]).\
...             where(Addresses.user_id == Users.id).\
...             limit(1)
&gt;&gt;&gt; conn.execute(Users.__table__.update().values(fullname=stmt)) 
</snippet></ROW><ROW><id>19242894</id><snippet>stmt = select([Location.id]).\
    where(and_(Location.x==Stopover.x, Location.y==Stopover.y)).limit(1)

conn.execute(Stopover.__table__.update().values(location_id=stmt)
</snippet></ROW><ROW><id>19242894</id><snippet>UPDATE stopovers SET location_id=(SELECT locations.id 
FROM locations 
WHERE locations.x = stopovers.x AND locations.y = stopovers.y
LIMIT ? OFFSET ?)
</snippet></ROW><ROW><id>19243025</id><snippet>sort()</snippet></ROW><ROW><id>19243025</id><snippet>int</snippet></ROW><ROW><id>19243025</id><snippet>Counter</snippet></ROW><ROW><id>19243025</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = [4,3,2,1]
&gt;&gt;&gt; Counter(a) == Counter(b)
True
</snippet></ROW><ROW><id>19243080</id><snippet>os.popen()</snippet></ROW><ROW><id>19243080</id><snippet>tmp = os.popen("ls").read()
</snippet></ROW><ROW><id>19243080</id><snippet>subprocess</snippet></ROW><ROW><id>19243080</id><snippet>proc = subprocess.Popen('ls', stdout=subprocess.PIPE)
tmp = proc.stdout.read()
</snippet></ROW><ROW><id>19243492</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; def give_str(input_list, template, delimiter="()", joiner=""):
    s = Template("$temp$left$inner$right")
    data = []
    for elem in input_list:
        for t in reversed(template):
            elem = s.substitute(
                temp=t,
                left = delimiter[0],
                right = delimiter[-1],
                inner = elem)
        data.append(elem)
    return joiner.join(data)

&gt;&gt;&gt; give_str(["first", "second", "third"], ["count", "rank"], delimiter="()", joiner=",")
'count(rank(first)),count(rank(second)),count(rank(third))'
&gt;&gt;&gt; give_str(["first", "second", "third"], ["count", "rank"], delimiter="|", joiner=",")
'count|rank|first||,count|rank|second||,count|rank|third||'
</snippet></ROW><ROW><id>19243527</id><snippet>DictVectorizer</snippet></ROW><ROW><id>19243527</id><snippet>&gt;&gt;&gt; features = ["age", "workclass", "fnlwgt", "education", "education-num", "marital-status", "occupation",
...             "relationship", "race", "sex", "capital-gain", "capital-loss", "hours-per-week", "native-country"]
&gt;&gt;&gt; input_text = """38   Private    215646   HS-grad    9    Divorced    Handlers-cleaners   Not-in-family   White   Male   0   0   40   United-States   &lt;=50K
... 53   Private    234721   11th   7    Married-civ-spouse  Handlers-cleaners   Husband     Black   Male   0   0   40   United-States   &lt;=50K
... 30   State-gov  141297   Bachelors  13   Married-civ-spouse  Prof-specialty  Husband     Asian-Pac-Islander  Male   0   0   40   India   &gt;50K
... """
</snippet></ROW><ROW><id>19243527</id><snippet>&gt;&gt;&gt; for ln in input_text.splitlines():
...     values = ln.split()
...     y.append(values[-1])
...     d = dict(zip(features, values[:-1]))
...     samples.append(d)
</snippet></ROW><ROW><id>19243527</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(samples[0])
{'age': '38',
 'capital-gain': '0',
 'capital-loss': '0',
 'education': 'HS-grad',
 'education-num': '9',
 'fnlwgt': '215646',
 'hours-per-week': '40',
 'marital-status': 'Divorced',
 'native-country': 'United-States',
 'occupation': 'Handlers-cleaners',
 'race': 'White',
 'relationship': 'Not-in-family',
 'sex': 'Male',
 'workclass': 'Private'}
&gt;&gt;&gt; print(y)
['&lt;=50K', '&lt;=50K', '&gt;50K']
</snippet></ROW><ROW><id>19243527</id><snippet>samples</snippet></ROW><ROW><id>19243527</id><snippet>DictVectorizer</snippet></ROW><ROW><id>19243527</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction import DictVectorizer
&gt;&gt;&gt; dv = DictVectorizer()
&gt;&gt;&gt; X = dv.fit_transform(samples)
&gt;&gt;&gt; X
&lt;3x29 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
        with 42 stored elements in Compressed Sparse Row format&gt;
</snippet></ROW><ROW><id>19243527</id><snippet>X</snippet></ROW><ROW><id>19243527</id><snippet>y</snippet></ROW><ROW><id>19243527</id><snippet>sparse=False</snippet></ROW><ROW><id>19243527</id><snippet>DictVectorizer</snippet></ROW><ROW><id>19243527</id><snippet>DictVectorizer.transform</snippet></ROW><ROW><id>19243794</id><snippet>create_all()</snippet></ROW><ROW><id>19243794</id><snippet>MetaData.create_all()</snippet></ROW><ROW><id>19243794</id><snippet>db = SQLAlchemy(app)

class MyTable(db.Model):
    ...

class MyOtherTable(db.Model):
    ...

db.metadata.create_all(db.engine, tables=[
    MyTable,
    ...
])
</snippet></ROW><ROW><id>19243794</id><snippet>create_all()</snippet></ROW><ROW><id>19243794</id><snippet>get_engine()</snippet></ROW><ROW><id>19244292</id><snippet>myFile.write(str(strength))
</snippet></ROW><ROW><id>19244292</id><snippet>myFile.write(repr(strength))
</snippet></ROW><ROW><id>19244292</id><snippet>myFile.write('{0:.5f}'.format(strength))
</snippet></ROW><ROW><id>19244292</id><snippet>str.format</snippet></ROW><ROW><id>19245023</id><snippet>__init__</snippet></ROW><ROW><id>19245023</id><snippet>Area</snippet></ROW><ROW><id>19245023</id><snippet>height</snippet></ROW><ROW><id>19245023</id><snippet>width</snippet></ROW><ROW><id>19245023</id><snippet>rectangle_area</snippet></ROW><ROW><id>19245023</id><snippet>height</snippet></ROW><ROW><id>19245023</id><snippet>width</snippet></ROW><ROW><id>19245023</id><snippet>class Area:
    def __init__ (self):
        self.width = 200
        self.height = 100
    def rectangle_area (self):
        return self.width * self.height

x = Area()
print(x.rectangle_area())
x.width += 50
x.height += 50
print(x.rectangle_area())
</snippet></ROW><ROW><id>19245058</id><snippet>db.session.query(User).filter(User.my_id==1).delete()
</snippet></ROW><ROW><id>19245058</id><snippet>delete()</snippet></ROW><ROW><id>19245058</id><snippet>delete()</snippet></ROW><ROW><id>19245058</id><snippet>Query.delete()</snippet></ROW><ROW><id>19245058</id><snippet>user = db.session.query(User).filter(User.my_id==1).first()
db.session.delete(user)
</snippet></ROW><ROW><id>19245263</id><snippet>x[0] &gt;= 0</snippet></ROW><ROW><id>19245263</id><snippet>scipy.optimize.fmin_slsqp</snippet></ROW><ROW><id>19245263</id><snippet>method='SLSQP'</snippet></ROW><ROW><id>19245567</id><snippet>word.replace("ies","y")</snippet></ROW><ROW><id>19245567</id><snippet>diesel</snippet></ROW><ROW><id>19245567</id><snippet>new_list = []
for word in old_list:
    if word.endswith("s"):
        if word.endswith("ies"):
            new_list.append(word[:-3] + "y")
        else:
            new_list.append(word[:-1])
</snippet></ROW><ROW><id>19245580</id><snippet>USER -&gt; BALANCER (nginx,apache,ecc) -&gt; APPSERVER (uwsgi, twisted, gunicorn, ..) -&gt; WSGI Application
</snippet></ROW><ROW><id>19245599</id><snippet>obsids=str(obsids[i])
print type(obsids)
os.environ['obsids']=obsids &lt;---- this makes the Python variable behave inside UNIX
os.system('sed -i "2 s:.*:/usr/data/$obsids/:" /usr/software/file.txt')
</snippet></ROW><ROW><id>19246195</id><snippet>if guess &gt;= 1 and guess &lt;= 10:
</snippet></ROW><ROW><id>19246195</id><snippet>if 1 &lt;= guess &lt;= 10:
</snippet></ROW><ROW><id>19246195</id><snippet>if not 1 &lt;= guess &lt;= 10:
    print("Input a number between one and ten silly!")
    continue
</snippet></ROW><ROW><id>19246195</id><snippet>try</snippet></ROW><ROW><id>19246195</id><snippet>continue</snippet></ROW><ROW><id>19246195</id><snippet>try:
    guess = int(input("Guess a number between one and ten."))
    if not 1 &lt;= guess &lt;= 10:
        print("Input a number between one and ten silly!")
        continue
except ValueError:
    print("Input a whole number between one and ten silly!")
    continue
</snippet></ROW><ROW><id>19246195</id><snippet>if play_again not in ('y', 'yes'):
    break
</snippet></ROW><ROW><id>19246195</id><snippet>continue</snippet></ROW><ROW><id>19246195</id><snippet>continue</snippet></ROW><ROW><id>19246195</id><snippet>break</snippet></ROW><ROW><id>19246502</id><snippet>else:
    missedLetters = missedLetters + guess

    if len(missedLetters) == len(HANGMANPICS) - 1:
       displayBoard(HANGMANPICS, missedLetters, correctLetters, secretWord)
       print 'You have run out of guesses!\nAfter ' + str(len(missedLetters)) + ' missed guesses and ' + str(len(correctLetters)) + ' correct guesses, the word was "' + secretWord + '"'
       gameIsDone = True
</snippet></ROW><ROW><id>19246502</id><snippet>if</snippet></ROW><ROW><id>19246502</id><snippet>if foundAllLetters:</snippet></ROW><ROW><id>19246502</id><snippet>else</snippet></ROW><ROW><id>19246502</id><snippet>if guess in secretWord</snippet></ROW><ROW><id>19246804</id><snippet>|random</snippet></ROW><ROW><id>19246815</id><snippet>re.findall()</snippet></ROW><ROW><id>19246815</id><snippet>import re
print re.findall(r'\s*(?P&lt;id&gt;\d+)\s+(?P&lt;enb_adr&gt;\d+\.\d+\.\d+\.\d+)\s+(?P&lt;mme_adr&gt;\d+\.\d+\.\d+\.\d+)\s+(?P&lt;facing&gt;\w+)\s+(?P&lt;state&gt;\w+)\s*', the_text_above)
</snippet></ROW><ROW><id>19247109</id><snippet>collections.Counter</snippet></ROW><ROW><id>19247109</id><snippet>|</snippet></ROW><ROW><id>19247109</id><snippet>&gt;&gt;&gt; c = collections.Counter([2, 2, 5])
&gt;&gt;&gt; d = collections.Counter([2, 3, 7])
&gt;&gt;&gt; list((c | d).elements())
[2, 2, 3, 5, 7]
</snippet></ROW><ROW><id>19247109</id><snippet>def merge_max_frequency(*iterables):
    return reduce(operator.or_, map(collections.Counter, iterables)).elements()
</snippet></ROW><ROW><id>19247109</id><snippet>list()</snippet></ROW><ROW><id>19247138</id><snippet>cat("Type n", "A  1", "B  20", "C  34", "D  5", sep = "\n", file = "myfile1.txt")
cat("Type n", "A  2", "B  15", "C  16", "D  5", sep = "\n", file = "myfile2.txt")
</snippet></ROW><ROW><id>19247138</id><snippet>"NULL"</snippet></ROW><ROW><id>19247138</id><snippet>colClasses</snippet></ROW><ROW><id>19247138</id><snippet>cbind</snippet></ROW><ROW><id>19247138</id><snippet>x &lt;- read.table("myfile1.txt", header=TRUE)
y &lt;- read.table("myfile2.txt", header=TRUE, colClasses=c("NULL", "numeric"))
cbind(x, y)
#   Type  n  n
# 1    A  1  2
# 2    B 20 15
# 3    C 34 16
# 4    D  5  5

## For more files:
## do.call(cbind, list(x, y, ...))
</snippet></ROW><ROW><id>19247138</id><snippet>c(FALSE, TRUE)</snippet></ROW><ROW><id>19247138</id><snippet>list</snippet></ROW><ROW><id>19247138</id><snippet>cbind</snippet></ROW><ROW><id>19247138</id><snippet>x1 &lt;- read.table("myfile1.txt", header = TRUE)
y1 &lt;- read.table("myfile2.txt", header = TRUE)

fileList &lt;- list(x1, y1)
cbind(x1[1], do.call(cbind, fileList)[c(FALSE, TRUE)])
#   Type  n n.1
# 1    A  1   2
# 2    B 20  15
# 3    C 34  16
# 4    D  5   5
</snippet></ROW><ROW><id>19247138</id><snippet>TRUE</snippet></ROW><ROW><id>19247138</id><snippet>FALSE</snippet></ROW><ROW><id>19247138</id><snippet>"NULL"</snippet></ROW><ROW><id>19247138</id><snippet>merge</snippet></ROW><ROW><id>19247138</id><snippet>"myfile4.txt"</snippet></ROW><ROW><id>19247138</id><snippet>cat("Type n", "A  1", "B  20", "C  34", "D  5", sep = "\n", file = "myfile1.txt")
cat("Type n", "A  2", "B  15", "C  16", "D  5", sep = "\n", file = "myfile2.txt")
cat("Type n", "A  1", "B   5", "C   6", "D  7", sep = "\n", file = "myfile3.txt")
cat("Type n", "A  8", "B   9", "D  11", "E  0", sep = "\n", file = "myfile4.txt")
</snippet></ROW><ROW><id>19247138</id><snippet>x &lt;- list.files(pattern="myfile")
y &lt;- lapply(x, read.table, header = TRUE)
</snippet></ROW><ROW><id>19247138</id><snippet>merge</snippet></ROW><ROW><id>19247138</id><snippet>merge</snippet></ROW><ROW><id>19247138</id><snippet>library(data.table) ## for `setnames`
## setnames will silently assign new names 
##   to the original data in list "y"
invisible(lapply(seq_along(y), function(z) 
  setnames(y[[z]], "n", paste("n", z, sep = "_"))))
</snippet></ROW><ROW><id>19247138</id><snippet>Reduce</snippet></ROW><ROW><id>19247138</id><snippet>merge</snippet></ROW><ROW><id>19247138</id><snippet>Reduce(function(x, y) merge(x, y, by = "Type", all = TRUE), y)
#   Type n_1 n_2 n_3 n_4
# 1    A   1   2   1   8
# 2    B  20  15   5   9
# 3    C  34  16   6  NA
# 4    D   5   5   7  11
# 5    E  NA  NA  NA   0
</snippet></ROW><ROW><id>19247157</id><snippet>request.GET</snippet></ROW><ROW><id>19247157</id><snippet>request.POST</snippet></ROW><ROW><id>19247157</id><snippet>QueryDict</snippet></ROW><ROW><id>19247333</id><snippet>re.findall()</snippet></ROW><ROW><id>19247333</id><snippet>print re.findall(r'\|(?P&lt;ng40core_instance&gt;\S+)\s+\|(?P&lt;user_name&gt;\S+)\s+\|(?P&lt;path&gt;\S+)\s+\|(?P&lt;start_time&gt;\d+\-\d+\-\d+\s+\d+:\d+:\d+)\s+\|(?P&lt;state&gt;\w+)\s+\|\s*', text)
</snippet></ROW><ROW><id>19247903</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>19247903</id><snippet>user</snippet></ROW><ROW><id>19247931</id><snippet>pip install pytest==2.3.5</snippet></ROW><ROW><id>19247980</id><snippet>SymLogNorm</snippet></ROW><ROW><id>19247980</id><snippet>vmin</snippet></ROW><ROW><id>19247980</id><snippet>vmax</snippet></ROW><ROW><id>19247980</id><snippet># loading modules
import matplotlib as mpl
import matplotlib.pyplot as plt

# defining variables
x=[0,1,2,3]
y=[0,1,2,3]
c=[-1000,-100,100,1000]

# making scatterplot
plt.scatter(x, y, c=c, s=100, norm=mpl.colors.SymLogNorm(linthresh=10, vmin=-1e3, vmax=1e3))
plt.colorbar(ticks=c)
</snippet></ROW><ROW><id>19248236</id><snippet>import time

start_time = 0
aList = [1,2,3,4,5]
k = len(aList)//2  

def quickSelect(aList, k):
    start_time = time.time()
#     print "%10.6f"%start_time
#     pivot = aList[0]
    if len(aList) != 0:
        pivot = aList[(len(aList) // 2)]
        smallerList = []
        for i in aList:
            if i &lt; pivot:
                smallerList.append(i)
                largerList = []
        for i in aList:
            if i &gt; pivot:
                largerList.append(i)
        m = len(smallerList)
        count = len(aList) - len(smallerList) - len(largerList)
        if k &gt;= m and k &lt; m + count:
            print "Pivot", pivot
#             print "%10.6f"%time.time()
            print "time: ", time.time() -start_time
            return pivot
        elif m &gt; k:
            return quickSelect(smallerList, k)
        else:
            return quickSelect(largerList, k - m - count)


quickSelect(aList, k)
</snippet></ROW><ROW><id>19248236</id><snippet>Pivot 3
time:  0.0
</snippet></ROW><ROW><id>19248380</id><snippet>mylist1,mylist2,mylist3 = [searchWord(segment) for segment in text]</snippet></ROW><ROW><id>19248380</id><snippet>return</snippet></ROW><ROW><id>19248380</id><snippet>return mylist1
return mylist2
return mylist3
</snippet></ROW><ROW><id>19248380</id><snippet>return (mylist1, mylist2, mylist3)
</snippet></ROW><ROW><id>19248380</id><snippet>def catagorize(data):
    container = [[],[],[]]
    for segment in data:
        searchWord(segment, container)
    return container

def searchWord(segment, container):
    letter, tag = segment.split('/')
    if tag == 'abc':
        container[0].append(letter)
    elif tag == 'abd':
        container[1].append(letter)
    elif tag == 'xyz':
        container[2].append(letter)
    else:
        raise ValueError('unknown tag')
</snippet></ROW><ROW><id>19248380</id><snippet>&gt;&gt;&gt; text = ["A/abc","B/abd","C/abc","D/xyz"]
&gt;&gt;&gt; mylist1, mylist2, mylist3 = catagorize(text)
&gt;&gt;&gt; print mylist1, mylist2, mylist3 
['A', 'C'] ['B'] ['D']
</snippet></ROW><ROW><id>19248380</id><snippet>from collections import defaultdict

def catagorize(data):
    container = defaultdict(list)
    for letter, tag in (segment.split('/') for segment in data):
        container[tag].append(letter)
    return container
</snippet></ROW><ROW><id>19248380</id><snippet>&gt;&gt;&gt; catagorize(["A/abc","B/abd","C/abc","D/xyz"])
defaultdict(&lt;type 'list'&gt;, {'xyz': ['D'], 'abc': ['A', 'C'], 'abd': ['B']})
</snippet></ROW><ROW><id>19248413</id><snippet>SQLALCHEMY_DATABASE_URI = 'mysql://root:pass@127.0.0.1/database?charset=utf8'
</snippet></ROW><ROW><id>19248413</id><snippet>SQLALCHEMY_DATABASE_URI = 'mysql://root:pass@127.0.0.1/database?charset=utf8',
</snippet></ROW><ROW><id>19248579</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame({"a": np.random.randn(10)})
df.sort(columns=['a'],inplace=True)
# bin according to cut
df["bins"] = pd.cut(df.a, np.linspace(-2,2,6))
df

Out[37]:
          a          bins
6 -1.273335    (-2, -1.2]
7 -0.604780  (-1.2, -0.4]
1 -0.467994  (-1.2, -0.4]
8  0.028114   (-0.4, 0.4]
9  0.032250   (-0.4, 0.4]
3  0.138368   (-0.4, 0.4]
0  0.541577    (0.4, 1.2]
5  0.838290    (0.4, 1.2]
2  1.171387    (0.4, 1.2]
4  1.770752      (1.2, 2]
</snippet></ROW><ROW><id>19248676</id><snippet>for src in inputready:
    if src == server_socket:
        ...
</snippet></ROW><ROW><id>19248676</id><snippet>os.fstat</snippet></ROW><ROW><id>19248676</id><snippet>stat.S_ISSOCK</snippet></ROW><ROW><id>19248694</id><snippet>def parse(dic):
    for k, v in dic.items():
        if isinstance(v, dict):
            for p in parse(v):
                yield [k] + p
        else:
            yield [k, v]

lst = list(parse(dic))
</snippet></ROW><ROW><id>19248694</id><snippet>[[key,key,key,value],[key,key,val] etc]</snippet></ROW><ROW><id>19248694</id><snippet>[[0, 0], [1, 0, 0], [1, 1, 1], [1, 2, 0, 0], [2, 0, 0, 0, 0], [2, 0, 1, 0], [3, 0]]
</snippet></ROW><ROW><id>19248694</id><snippet>for row in parse(dic):
    row = map(str, row)
    print '.'.join(row[:-1]) + '-&gt;' + row[-1]
</snippet></ROW><ROW><id>19248873</id><snippet>from PyQt4 import QtCore, QtGui

class ClickHandler():
    def __init__(self, time):
        self.timer = QtCore.QTimer()
        self.timer.setInterval(time)
        self.timer.setSingleShot(True)
        self.timer.timeout.connect(self.timeout)
        self.click_count = 0

    def timeout(self):
        if self.click_count == 1:
            print('Single click')
        elif self.click_count &gt; 1:
            print('Double click')    
        self.click_count = 0

    def __call__(self):
        self.click_count += 1
        if not self.timer.isActive():
            self.timer.start()


class MyDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)

        self.button1 = QtGui.QPushButton("Button 1")
        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(self.button1)
        self.setLayout(hbox)

        self.click_handler = ClickHandler(300)
        self.button1.clicked.connect(self.click_handler)

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    w = MyDialog()
    w.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19248873</id><snippet>from PyQt4 import QtCore, QtGui

class CustomButton(QtGui.QPushButton):

    left_clicked= QtCore.pyqtSignal(int)
    right_clicked = QtCore.pyqtSignal(int)

    def __init__(self, *args, **kwargs):
        QtGui.QPushButton.__init__(self, *args, **kwargs)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(250)
        self.timer.setSingleShot(True)
        self.timer.timeout.connect(self.timeout)
        self.left_click_count = self.right_click_count = 0

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.left_click_count += 1
            if not self.timer.isActive():
                self.timer.start()
        if event.button() == QtCore.Qt.RightButton:
            self.right_click_count += 1
            if not self.timer.isActive():
                self.timer.start()

    def timeout(self):
        if self.left_click_count &gt;= self.right_click_count:
            self.left_clicked.emit(self.left_click_count)
        else:
            self.right_clicked.emit(self.right_click_count)
        self.left_click_count = self.right_click_count = 0


class MyDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)
        self.button1 = CustomButton("Button 1")
        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(self.button1)
        self.setLayout(hbox)
        self.button1.left_clicked[int].connect(self.left_click)
        self.button1.right_clicked[int].connect(self.right_click)

    def left_click(self, nb):
        if nb == 1: print('Single left click')
        else: print('Double left click')

    def right_click(self, nb):
        if nb == 1: print('Single right click')
        else: print('Double right click')


if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    w = MyDialog()
    w.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19248943</id><snippet>app_name = app_name or __name__

config = config_str_to_obj(config)
app = Flask(app_name, static_url_path=config.SOME_CONFIGURATION_NAME)

configure_app(app, config)
...
</snippet></ROW><ROW><id>19249192</id><snippet>scipy.stats.gaussian_kde</snippet></ROW><ROW><id>19249192</id><snippet>import numpy as np
from scipy.stats import gaussian_kde
from matplotlib import pyplot as pp

# kernel density estimate of the PDF
kde = gaussian_kde(points)

# evaluate the estimated PDF on a grid
x,y = np.mgrid[40:101,-20:101]
z = kde((x.ravel(),y.ravel())).reshape(*x.shape)

# plot
fig,ax = pp.subplots(1,1)
ax.hold(True)
pc = ax.pcolor(x,y,z)
cb = pp.colorbar(pc)
cb.ax.set_ylabel('Probability density')
ax.plot(points[0],points[1],'o',mfc='w',mec='k')

pp.show()
</snippet></ROW><ROW><id>19249192</id><snippet>statsmodels</snippet></ROW><ROW><id>19249202</id><snippet>registration/login.html</snippet></ROW><ROW><id>19249202</id><snippet>&lt;form action="{% url auth:login %}" method="post"&gt;{% csrf_token %}
  {{ form.as_p }}
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>19249250</id><snippet>lst = [[] for _ in xrange(a)]
</snippet></ROW><ROW><id>19249250</id><snippet>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; lst = [[] for _ in xrange(a)]
&gt;&gt;&gt; lst
[[], [], []]
&gt;&gt;&gt; a = 10
&gt;&gt;&gt; lst = [[] for _ in xrange(a)]
&gt;&gt;&gt; lst
[[], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; # This is to prove that each of the lists in lst is unique
&gt;&gt;&gt; lst[0].append(1)
&gt;&gt;&gt; lst
[[1], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19249250</id><snippet>xrange</snippet></ROW><ROW><id>19249250</id><snippet>lst = [[] for _ in range(a)]
</snippet></ROW><ROW><id>19249262</id><snippet>DequeLL.last</snippet></ROW><ROW><id>19249262</id><snippet>addFrontDLL</snippet></ROW><ROW><id>19249262</id><snippet>addRearDLL</snippet></ROW><ROW><id>19249262</id><snippet>class DequeLL:

    def __init__(self):
        self.head = None
        self.last = None
        self.length = 0

    def __str__(self): # Refactored for clarity
        width = (max(len(node.data) for node in self.allNodes()) 
                    if self.head else 0) # width to avoid ambiguity with self.length
        s = ['\u2510{}\u250c'.format(' '*width)]
        for node in self.allNodes():
            s.append('\u2502{:&lt;{}}\u2502'.format(node.data, width))
        s.append('\u2514{}\u2518'.format('\u2500'*width))
        return '\n'.join(s)

    def addFrontDLL(self, item):
        temp = Node(str(item))
        temp.setNext(self.head)
        self.head = temp
        if self.last is None: # if adding to an empty deque, set the last node, too
            self.last = temp
        self.length += 1
        print(self) # refactored the pretty-printing into __str__ for clarity

    def addRearDLL(self, item):
        node = Node(str(item))
        node.next = None
        if self.length == 0:
            self.head = self.last = node
        else:
            last = self.last
            last.next = node
            self.last = node
        self.length = self.length + 1 
        print(self)

    def allNodes(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next
</snippet></ROW><ROW><id>19249262</id><snippet>In [97]: d = DequeLL()

In [98]: d.addFrontDLL('circle')
┐      ┌
│circle│
└──────┘

In [99]: d.addFrontDLL('arc')
┐      ┌
│arc   │
│circle│
└──────┘

In [100]: d.addRearDLL('123')
┐      ┌
│arc   │
│circle│
│123   │
└──────┘

In [101]: d.addFrontDLL('arc')
┐      ┌
│arc   │
│arc   │
│circle│
│123   │
└──────┘

In [102]: d.addFrontDLL('circle')
┐      ┌
│circle│
│arc   │
│arc   │
│circle│
│123   │
└──────┘

In [103]: d.addRearDLL('123')
┐      ┌
│circle│
│arc   │
│arc   │
│circle│
│123   │
│123   │
└──────┘
</snippet></ROW><ROW><id>19249292</id><snippet>r100 = range(100)
r2 = range(3, 40, 3)

# Find indices in r100 that aren't in r2.
# This is a set difference (or symmetric difference)
## Set methods
# Precalculated is fastest:
sr100 = set(r100)
sr2 = set(r2)
%timeit sr100 - sr2
100000 loops, best of 3: 3.84 us per loop

# Non-precalculated is still faster:
%timeit set(range(100)) ^ set(range(3,40,3))
100000 loops, best of 3: 9.76 us per loop
%timeit set(xrange(100)) ^ set(xrange(3,40,3))
100000 loops, best of 3: 8.84 us per loop

# Precalculating the original indices still helps, if you can hold it in memory:
%timeit sr100 ^ set(xrange(3,40,3))
100000 loops, best of 3: 4.87 us per loop

# This is true even including converting back to list, and sorting (if necessary):
%timeit [x for x in sr100 ^ set(xrange(3,40,3))]
100000 loops, best of 3: 9.02 us per loop
%timeit sorted(x for x in sr100 ^ set(xrange(3,40,3)))
100000 loops, best of 3: 15 us per loop


## List comprehension:

# Precalculated indices
%timeit [x for x in r100 if x not in r2]
10000 loops, best of 3: 30.5 us per loop

# Non-precalculated indices, using xrange
%timeit [x for x in xrange(100) if x not in xrange(3, 40, 3)]
10000 loops, best of 3: 65.8 us per loop

# The cost appears to be in the second xrange?
%timeit [x for x in r100 if x not in xrange(3, 40, 3)]
10000 loops, best of 3: 64.3 us per loop
%timeit [x for x in xrange(100) if x not in r2]
10000 loops, best of 3: 29.9 us per loop
# xrange is not really any faster than range here - uses less memory, but still have
# to walk through entire list
%timeit [x for x in range(100) if x not in range(3, 40, 3)]
10000 loops, best of 3: 63.5 us per loop
</snippet></ROW><ROW><id>19249609</id><snippet>unittest.mock.PropertyMock</snippet></ROW><ROW><id>19249609</id><snippet>from unittest import mock
with mock.patch.object(Foo, 'foo', new_callable=mock.PropertyMock) as m:
    m.return_value = 'nAME'
    assert Foo.foo == 'nAME'
</snippet></ROW><ROW><id>19249609</id><snippet>mock</snippet></ROW><ROW><id>19249748</id><snippet>&gt;&gt;&gt; print u'\xc3\x85sum'.encode('latin1').decode('utf8')
Åsum
</snippet></ROW><ROW><id>19249748</id><snippet>json.dumps(u'Åsum')
'"\\u00c5sum"'
</snippet></ROW><ROW><id>19250054</id><snippet>'r'</snippet></ROW><ROW><id>19250054</id><snippet>r"\n"</snippet></ROW><ROW><id>19250054</id><snippet>'\'</snippet></ROW><ROW><id>19250054</id><snippet>'n'</snippet></ROW><ROW><id>19250054</id><snippet>"\n"</snippet></ROW><ROW><id>19250054</id><snippet>\.</snippet></ROW><ROW><id>19250054</id><snippet>'\.'</snippet></ROW><ROW><id>19250054</id><snippet>r'\.'</snippet></ROW><ROW><id>19250054</id><snippet>&gt;&gt;&gt; len('\.')
2
&gt;&gt;&gt; len(r'\.')
2
</snippet></ROW><ROW><id>19250054</id><snippet>&gt;&gt;&gt; '\b'
'\x08'
&gt;&gt;&gt; r'\b'
'\\b'
&gt;&gt;&gt; len('\b')
1
&gt;&gt;&gt; len(r'\b')
2
</snippet></ROW><ROW><id>19250054</id><snippet>\b</snippet></ROW><ROW><id>19250054</id><snippet>\b</snippet></ROW><ROW><id>19250054</id><snippet>\\b</snippet></ROW><ROW><id>19250054</id><snippet>r'\b'</snippet></ROW><ROW><id>19250144</id><snippet>myImage = Image(Point(5,5), 'myimage.png')
</snippet></ROW><ROW><id>19250144</id><snippet>import graphics
from graphics import *

window = GraphWin("gameWindow", 800, 600)
myImage = Image(Point(5,5), "myimage.gif")
myImage.draw(window)
window.mainloop()
</snippet></ROW><ROW><id>19250490</id><snippet>count</snippet></ROW><ROW><id>19250490</id><snippet>&gt;&gt;&gt; # I named it 'mystr' because it is a bad practice to name a variable 'str'
&gt;&gt;&gt; # Doing so overrides the built-in
&gt;&gt;&gt; mystr = "Hello! My name is Barney!"
&gt;&gt;&gt; mystr.count("!")
2
&gt;&gt;&gt; if mystr.count("!") == 2:
...     print True
...
True
&gt;&gt;&gt;
&gt;&gt;&gt; # Just to explain further
&gt;&gt;&gt; help(str.count)
Help on method_descriptor:

count(...)
    S.count(sub[, start[, end]]) -&gt; int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

&gt;&gt;&gt;
</snippet></ROW><ROW><id>19251152</id><snippet>dpop</snippet></ROW><ROW><id>19251152</id><snippet>dpop = [1,2,3,4].pop
</snippet></ROW><ROW><id>19251152</id><snippet>pop</snippet></ROW><ROW><id>19251152</id><snippet>dpop</snippet></ROW><ROW><id>19251152</id><snippet>dpop.__self__</snippet></ROW><ROW><id>19251231</id><snippet>print</snippet></ROW><ROW><id>19251285</id><snippet>findall</snippet></ROW><ROW><id>19251285</id><snippet>xml_data = '''&lt;?xml version='1.0' encoding='ASCII' ?&gt;
&lt;root&gt;
&lt;foo&gt;
&lt;a&gt;&lt;/a&gt;
&lt;b&gt;&lt;/b&gt;
&lt;c&gt;&lt;/c&gt;
&lt;/foo&gt;
&lt;bars&gt;
&lt;bar&gt;
&lt;one&gt;interesting&lt;/one&gt;
&lt;two&gt;interesting&lt;/two&gt;
&lt;three&gt;interesting&lt;/three&gt;
&lt;/bar&gt;
&lt;bar&gt;
&lt;one&gt;interesting&lt;/one&gt;
&lt;two&gt;interesting&lt;/two&gt;
&lt;three&gt;interesting&lt;/three&gt;
&lt;/bar&gt;
&lt;bar&gt;
&lt;one&gt;interesting&lt;/one&gt;
&lt;two&gt;interesting&lt;/two&gt;
&lt;three&gt;interesting&lt;/three&gt;
&lt;/bar&gt;
&lt;/bars&gt;
&lt;/root&gt;
'''

from lxml import etree

root = etree.fromstring(xml_data)
for bars in root.findall('.//bars'):
    print(etree.tostring(bars, method='text'))
</snippet></ROW><ROW><id>19251296</id><snippet>add</snippet></ROW><ROW><id>19251296</id><snippet>type</snippet></ROW><ROW><id>19251296</id><snippet>def add(args):
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute("INSERT INTO todo VALUES (args, timestamp)")

parser.add_argument('-a', '--add', type=add)
</snippet></ROW><ROW><id>19251296</id><snippet>argparse.Action</snippet></ROW><ROW><id>19251334</id><snippet>In [13]: rate, data = zip(*datas)

In [14]: rate
Out[14]: (44100, 44100)

In [15]: data
Out[15]: (array([0, 0, 0, 0, 0, 0]), array([0, 0, 0, 0, 1]))
</snippet></ROW><ROW><id>19251334</id><snippet>rates = []
datas = []
for fp in filepath:
    rate, data = read(fp)
    rates.append(rate)
    datas.append(data)
</snippet></ROW><ROW><id>19251334</id><snippet>ValueError</snippet></ROW><ROW><id>19251636</id><snippet>data: JSON.stringify(data),
</snippet></ROW><ROW><id>19251636</id><snippet>data: data,
</snippet></ROW><ROW><id>19251636</id><snippet>imageSrc = self.request.get('imageSrc')
</snippet></ROW><ROW><id>19251636</id><snippet>// Add GET parameters to an URL
// Ex.:  site.com/?param=value
function addUrlSep( url ) {
    var sep = (url.indexOf('?') &gt; -1) ? '&amp;' : '?';
    return url + sep; }
function buildUrl( base, key, value ) {
    url = addUrlSep( base );
    return url + key + '=' + value; }

$(document).ready(function() {
    $("button").click( function(){

        base_url = "/i";

        url = buildUrl( base_url, 'imageSrc', 'https://www.google.com.br/images/srpr/logo6w.png' );

        window.location = url;  // Redirects to the URL

    });
});
</snippet></ROW><ROW><id>19251636</id><snippet>def get(self):
    z = self.request.get( 'imageSrc' )
    logging.info(z)
    self.response.write( "&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;img src='{}'&gt;&lt;/body&gt;&lt;/html&gt;" .format( z ) )

def post(self):
    pass
</snippet></ROW><ROW><id>19251659</id><snippet>emacs -Q</snippet></ROW><ROW><id>19251659</id><snippet>$ stty -a &gt; stty-before
$ python3.3
Python 3.3.2 (default, May 21 2013, 11:50:47) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; quit()
quit()
$ stty -a &gt; stty-after
stty -a &gt; stty-after
bash-3.2$ diff stty-before stty-after
diff stty-before stty-after
2c2
&lt; lflags: icanon isig iexten -echo echoe -echok echoke -echonl echoctl
---
&gt; lflags: icanon isig iexten echo echoe -echok echoke -echonl echoctl
7c7
&lt; oflags: opost -onlcr -oxtabs -onocr -onlret
---
&gt; oflags: opost onlcr -oxtabs -onocr -onlret
11,13c11,13
&lt;   eol2 = &lt;undef&gt;; erase = &lt;undef&gt;; intr = ^C; kill = &lt;undef&gt;;
&lt;   lnext = ^V; min = 1; quit = ^\; reprint = ^R; start = ^Q;
&lt;   status = ^T; stop = ^S; susp = ^Z; time = 0; werase = ^W;
---
&gt;   eol2 = &lt;undef&gt;; erase = ^?; intr = ^C; kill = ^U; lnext = ^V;
&gt;   min = 1; quit = ^\; reprint = ^R; start = ^Q; status = ^T;
&gt;   stop = ^S; susp = ^Z; time = 0; werase = ^W;
</snippet></ROW><ROW><id>19251659</id><snippet>ECHO</snippet></ROW><ROW><id>19251659</id><snippet>ONLCR</snippet></ROW><ROW><id>19251659</id><snippet>tcsetattr</snippet></ROW><ROW><id>19251659</id><snippet>tcsetattr</snippet></ROW><ROW><id>19251659</id><snippet>#0  0x00007fff898e7e63 in tcsetattr ()
#1  0x00000001007cbe96 in tty_init ()
#2  0x00000001007c19cf in el_init ()
#3  0x00000001007d1bb7 in rl_initialize ()
#4  0x00000001003f10ea in PyInit_readline ()
</snippet></ROW><ROW><id>19251659</id><snippet>#0  0x00007fff898e7e63 in tcsetattr ()
#1  0x00000001007cc812 in tty_rawmode ()
#2  0x00000001007c610f in read_prepare ()
#3  0x00000001007c203d in el_wset ()
#4  0x00000001007d554d in el_set ()
#5  0x00000001003f128a in call_readline ()
</snippet></ROW><ROW><id>19251659</id><snippet>PyInit_readline</snippet></ROW><ROW><id>19251659</id><snippet>call_readline</snippet></ROW><ROW><id>19251659</id><snippet>readline.c</snippet></ROW><ROW><id>19251659</id><snippet>#include &lt;readline/readline.h&gt;

int main() {
    char *line = readline("&gt; ");
    return 0;
}
</snippet></ROW><ROW><id>19251659</id><snippet>$ clang rl.c -lreadline
</snippet></ROW><ROW><id>19251659</id><snippet>$ clang rl.c -L/opt/local/lib -lreadline
</snippet></ROW><ROW><id>19251659</id><snippet>DYLD_PRINT_LIBRARIES</snippet></ROW><ROW><id>19251659</id><snippet>$ export DYLD_PRINT_LIBRARIES=1
$ /usr/bin/python
dyld: loaded: /usr/bin/python
dyld: loaded: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
[... many lines omitted ...]
dyld: loaded: /usr/lib/libstdc++.6.dylib
Python 2.6.7 (r267:88850, Oct 11 2012, 20:15:00) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
dyld: loaded: /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload/readline.so
dyld: loaded: /usr/lib/libedit.3.dylib
dyld: loaded: /usr/lib/libncurses.5.4.dylib
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19251659</id><snippet>$ port installed libedit
The following ports are currently installed:
  libedit @20110802-3.0_0
  libedit @20120601-3.0_0
  libedit @20121213-3.0_0 (active)
</snippet></ROW><ROW><id>19251659</id><snippet>$ sudo port activate libedit@20120601-3.0_0
---&gt;  Computing dependencies for libedit
---&gt;  Deactivating libedit @20121213-3.0_0
---&gt;  Cleaning libedit
---&gt;  Activating libedit @20120601-3.0_0
---&gt;  Cleaning libedit
</snippet></ROW><ROW><id>19251659</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>19251659</id><snippet>PATH</snippet></ROW><ROW><id>19251659</id><snippet>python</snippet></ROW><ROW><id>19251738</id><snippet>r</snippet></ROW><ROW><id>19251738</id><snippet>i</snippet></ROW><ROW><id>19251738</id><snippet>f</snippet></ROW><ROW><id>19251738</id><snippet>i += 1</snippet></ROW><ROW><id>19251738</id><snippet>i = i + 1</snippet></ROW><ROW><id>19251738</id><snippet>i</snippet></ROW><ROW><id>19251738</id><snippet>r</snippet></ROW><ROW><id>19251738</id><snippet>global var
</snippet></ROW><ROW><id>19251738</id><snippet>var</snippet></ROW><ROW><id>19251738</id><snippet>r</snippet></ROW><ROW><id>19251738</id><snippet>def r():
    global i
    i += 1
    return i
</snippet></ROW><ROW><id>19251893</id><snippet>b</snippet></ROW><ROW><id>19251893</id><snippet>def read_zipfile(path):
    with open(path, 'rb') as f:
        return f.read()
</snippet></ROW><ROW><id>19251893</id><snippet>with</snippet></ROW><ROW><id>19251893</id><snippet>close</snippet></ROW><ROW><id>19251908</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self, title):
        wx.Frame.__init__(self, None, title=title, size=(300,200))

        self.panel = wx.Panel(self)
        box = wx.BoxSizer(wx.VERTICAL)
        m_text = wx.StaticText(self.panel, -1, 'File Uploaded!')
        m_text.SetSize(m_text.GetBestSize())

        box.Add(m_text, 0, wx.ALL, 10)
        self.panel.SetSizer(box)
        self.panel.Layout()

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onClose, self.timer)
        self.timer.Start(5000)

    def onClose(self, event):
        self.Close()

app = wx.App(redirect=True)
top = Frame('test')
top.Show()
app.MainLoop()
</snippet></ROW><ROW><id>19251958</id><snippet>True</snippet></ROW><ROW><id>19251958</id><snippet>False</snippet></ROW><ROW><id>19251958</id><snippet>"true"</snippet></ROW><ROW><id>19251958</id><snippet>"false"</snippet></ROW><ROW><id>19251958</id><snippet>Dns</snippet></ROW><ROW><id>19251958</id><snippet>Env</snippet></ROW><ROW><id>19251958</id><snippet>PortSpecs</snippet></ROW><ROW><id>19251958</id><snippet>None</snippet></ROW><ROW><id>19251958</id><snippet>"null"</snippet></ROW><ROW><id>19251958</id><snippet>Memory</snippet></ROW><ROW><id>19251958</id><snippet>MemorySwap</snippet></ROW><ROW><id>19251958</id><snippet>0</snippet></ROW><ROW><id>19251958</id><snippet>"0"</snippet></ROW><ROW><id>19251958</id><snippet>payload={
 'AttachStderr': True,
 'AttachStdin': False,
 'AttachStdout': True,
 'Cmd': ['date'],
 'Dns': None,
 'Env': None,
 'Hostname': '',
 'Image': 'ubuntu',
 'Memory': 0,
 'MemorySwap': 0,
 'OpenStdin': False,
 'PortSpecs': None,
 'Privileged': False,
 'StdinOnce': False,
 'Tty': False,
 'User': '',
 'Volumes': {},
 'VolumesFrom': '',
 'WorkingDir': '',
}
</snippet></ROW><ROW><id>19252009</id><snippet>sendMessage</snippet></ROW><ROW><id>19252009</id><snippet>def broadcast(self):
    response = urllib2.urlopen('http://localhost:8001/json?as_text=1')

    for c in self.clients:
        c.sendMessage(response)
</snippet></ROW><ROW><id>19252009</id><snippet>twisted.web.client</snippet></ROW><ROW><id>19252009</id><snippet>urllib2</snippet></ROW><ROW><id>19252009</id><snippet>from twisted.internet import reactor
from twisted.web.client import Agent, readBody

agent = Agent(reactor)

def broadcast(self):
    getting = agent.request(
        b"GET", b"http://localhost:8001/json?as_text=1")
    getting.addCallback(readBody)

    def got(body):
        for c in self.clients:
            c.sendMessage(body)
    getting.addCallback(got)
    return getting
</snippet></ROW><ROW><id>19252157</id><snippet>if tools.not_blank(phones):
        lst = phones
        cnt = len(lst)
        current = profile.phones
        for x in xrange(cnt):
            o = lst[x]
            #key = o.get("key", o.get("guid", None))
            lbl = o["label"]
</snippet></ROW><ROW><id>19252157</id><snippet>[[]]</snippet></ROW><ROW><id>19252157</id><snippet>person.phones.push(phoneObjs);</snippet></ROW><ROW><id>19252157</id><snippet>person.phones = phoneObjs;</snippet></ROW><ROW><id>19252157</id><snippet>[]</snippet></ROW><ROW><id>19252157</id><snippet>addedPhones.each( function(i) {
    var tag = $(this).children("label").text();
    var value = $(this).children("input").val();
    phoneObjs = $(this).map(function(i,el) {
        var $el = $(el);
        return {
            tag: tag,
            label:value
        };
    }).get();
    person.phones = phoneObjs;
    console.log(phoneObjs);
});
</snippet></ROW><ROW><id>19252251</id><snippet>username</snippet></ROW><ROW><id>19252251</id><snippet>cleaned_data</snippet></ROW><ROW><id>19252251</id><snippet>primary</snippet></ROW><ROW><id>19252378</id><snippet>new_list = a[0:2] + [a[4]] + a[6:]</snippet></ROW><ROW><id>19252378</id><snippet>from itertools import chain
new_list = list(chain(a[0:2], [a[4]], a[6:]))
</snippet></ROW><ROW><id>19252378</id><snippet>def chain_elements_or_slices(*elements_or_slices):
    new_list = []
    for i in elements_or_slices:
        if isinstance(i, list):
        new_list.extend(i)
    else:
        new_list.append(i)
return new_list

new_list = chain_elements_or_slices(a[0:2],a[4], a[6:])
</snippet></ROW><ROW><id>19252378</id><snippet>a[4]</snippet></ROW><ROW><id>19252378</id><snippet>a[4:5]</snippet></ROW><ROW><id>19252378</id><snippet>a[n]</snippet></ROW><ROW><id>19252378</id><snippet>a[n:n+1]</snippet></ROW><ROW><id>19252430</id><snippet>fig</snippet></ROW><ROW><id>19252430</id><snippet>ax</snippet></ROW><ROW><id>19252430</id><snippet>cax</snippet></ROW><ROW><id>19252430</id><snippet>set_xticklabels</snippet></ROW><ROW><id>19252430</id><snippet>set_yticklabels</snippet></ROW><ROW><id>19252430</id><snippet>labels = ['business', 'health']
cm = confusion_matrix(y_test, pred, labels)
print(cm)
fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(cm)
pl.title('Confusion matrix of the classifier')
fig.colorbar(cax)
ax.set_xticklabels([''] + labels)
ax.set_yticklabels([''] + labels)
pl.xlabel('Predicted')
pl.ylabel('True')
pl.show()
</snippet></ROW><ROW><id>19252430</id><snippet>labels</snippet></ROW><ROW><id>19252430</id><snippet>confusion_matrix</snippet></ROW><ROW><id>19252704</id><snippet>None</snippet></ROW><ROW><id>19252704</id><snippet>null</snippet></ROW><ROW><id>19252704</id><snippet>if element:
    # This is not null

if not element:
    # This is null
</snippet></ROW><ROW><id>19252704</id><snippet>if not x</snippet></ROW><ROW><id>19252704</id><snippet>if x == None</snippet></ROW><ROW><id>19252704</id><snippet>False</snippet></ROW><ROW><id>19252704</id><snippet>None</snippet></ROW><ROW><id>19252704</id><snippet>False</snippet></ROW><ROW><id>19252704</id><snippet>0</snippet></ROW><ROW><id>19252704</id><snippet>0L</snippet></ROW><ROW><id>19252704</id><snippet>0.0</snippet></ROW><ROW><id>19252704</id><snippet>0j</snippet></ROW><ROW><id>19252704</id><snippet>''</snippet></ROW><ROW><id>19252704</id><snippet>()</snippet></ROW><ROW><id>19252704</id><snippet>[]</snippet></ROW><ROW><id>19252704</id><snippet>{}</snippet></ROW><ROW><id>19252704</id><snippet>__nonzero__()</snippet></ROW><ROW><id>19252704</id><snippet>__len__()</snippet></ROW><ROW><id>19252704</id><snippet>zero</snippet></ROW><ROW><id>19252704</id><snippet>False</snippet></ROW><ROW><id>19252704</id><snippet>True</snippet></ROW><ROW><id>19252704</id><snippet>None</snippet></ROW><ROW><id>19252704</id><snippet>[1,2,None,4,5,6]</snippet></ROW><ROW><id>19252704</id><snippet>&gt;&gt;&gt; lst = [1, 2, None, 4, 5, 6]
&gt;&gt;&gt; None in lst
True
</snippet></ROW><ROW><id>19252704</id><snippet>None</snippet></ROW><ROW><id>19252704</id><snippet>&gt;&gt;&gt; lst = [1, 2, None, 4, 5, 6]
&gt;&gt;&gt; for x in lst:
...  if not x:
...    print(x)
None
</snippet></ROW><ROW><id>19252704</id><snippet>lst</snippet></ROW><ROW><id>19252704</id><snippet>0</snippet></ROW><ROW><id>19252704</id><snippet>0</snippet></ROW><ROW><id>19252704</id><snippet>if element is None</snippet></ROW><ROW><id>19252704</id><snippet>if element is not None</snippet></ROW><ROW><id>19252939</id><snippet>help(plt.hist)</snippet></ROW><ROW><id>19252939</id><snippet>normed : boolean, optional, default: False
    If `True`, the first element of the return tuple will
    be the counts normalized to form a probability density, i.e.,
    ``n/(len(x)`dbin)``, ie the integral of the histogram will sum to
    1. If *stacked* is also *True*, the sum of the histograms is
    normalized to 1.
</snippet></ROW><ROW><id>19252939</id><snippet>&gt;&gt;&gt; a = np.random.normal(0.4,0.1,1024)
&gt;&gt;&gt; n, bins, patches = plt.hist(a, bins=32,range = ([0,1]),normed=True)
&gt;&gt;&gt; (np.diff(bins) * n).sum()
1.0
</snippet></ROW><ROW><id>19253086</id><snippet>window</snippet></ROW><ROW><id>19253086</id><snippet>console</snippet></ROW><ROW><id>19253086</id><snippet>from distutils.core import setup
import py2exe

setup(window=['hello.py'])
</snippet></ROW><ROW><id>19253199</id><snippet>from kivy.cache import Cache
Cache._categories['kv.image']['limit'] = 0
Cache._categories['kv.texture']['limit'] = 0 
</snippet></ROW><ROW><id>19253199</id><snippet>texture = Image('grid.jpg').texture
texture.wrap = 'repeat'
texture.uvsize = (20, 20)
with self.canvas:
    Color(1, 1, 1)
    Rectangle(pos=(0, 0), size=(2000, 2000), texture=texture)
</snippet></ROW><ROW><id>19253211</id><snippet>class Outer:
    class InnerException(Exception): pass
    def raise_inner(self):
        raise self.InnerException()
</snippet></ROW><ROW><id>19253211</id><snippet>class InnerException(Exception): pass
class Outer:
    def raise_inner(self):
        raise InnerException()
</snippet></ROW><ROW><id>19253374</id><snippet>(?:(?P&lt;days&gt;[0-9]{0,2})\s*day[^, ]*,? *)?(?:(?P&lt;hrs&gt;[0-9]+)\s*hour[^, ]*,? *)?(?:(?P&lt;min&gt;[0-9]+)\s*minute[^, ]*,? *)?
</snippet></ROW><ROW><id>19253374</id><snippet>[^, ]*,? *</snippet></ROW><ROW><id>19253374</id><snippet>.*</snippet></ROW><ROW><id>19253374</id><snippet>?</snippet></ROW><ROW><id>19253374</id><snippet>(?:                       # Start of non-capture group
    (?P&lt;days&gt;[0-9]{0,2})  # Numbers to capture
    \s*                   # Spaces if any
    day                   # Literal match
    [^, ]*,? *            # Anything until first comma and optional spaces
)?                        # Close of non-capture group and marking it as optional
</snippet></ROW><ROW><id>19253635</id><snippet>for k in set(dict1.keys())|set(dict2.keys()):
    dict3[k] = (dict1.get(k,0),dict2.get(k,0))
</snippet></ROW><ROW><id>19253635</id><snippet>dict1 = {'192.168.1.21':23,'127.0.0.1':5,'12.12.12.12':5,'55.55.55.55':10}
dict2 = {'192.168.1.21':27,'10.10.0.1':7,'127.0.0.1':1}
</snippet></ROW><ROW><id>19253635</id><snippet>dict3 = {'55.55.55.55': (10, 0), '10.10.0.1': (0, 7), '12.12.12.12': (5, 0), 
         '127.0.0.1': (5, 1), '192.168.1.21': (23, 27)}
</snippet></ROW><ROW><id>19253647</id><snippet>&gt;&gt;&gt; from pattern.en import parse
&gt;&gt;&gt; print parse('I eat pizza with a fork.')

I/PRP/B-NP/O eat/VBD/B-VP pizza/NN/B-NP/O with/IN/B-PP/B-PNP a/DT/B-NP/I-PNP
fork/NN/I-NP/I-PNP ././O/O
</snippet></ROW><ROW><id>19253647</id><snippet>&gt;&gt;&gt; text = nltk.word_tokenize("And now for something completely different")
&gt;&gt;&gt; nltk.pos_tag(text)
[('And', 'CC'), ('now', 'RB'), ('for', 'IN'), ('something', 'NN'),
('completely', 'RB'), ('different', 'JJ')]
</snippet></ROW><ROW><id>19253839</id><snippet>from collections import defaultdict
def sortbit(n):
    d = defaultdict(list)
    max_val = 2**n
    for x in range(0,max_val):
       d[bin(x).count("1")].append("{0:0{1}b}".format(x,n))
    return d
</snippet></ROW><ROW><id>19253839</id><snippet>&gt;&gt;&gt; sortbit(3)
defaultdict(&lt;type 'list'&gt;, {0: ['000'], 1: ['001', '010', '100'], 2: ['011', '10
1', '110'], 3: ['111']})
&gt;&gt;&gt; sortbit(4)
defaultdict(&lt;type 'list'&gt;, {0: ['0000'], 1: ['0001', '0010', '0100', '1000'], 2:
 ['0011', '0101', '0110', '1001', '1010', '1100'], 3: ['0111', '1011', '1101', '
1110'], 4: ['1111']})
</snippet></ROW><ROW><id>19254043</id><snippet>sums</snippet></ROW><ROW><id>19254043</id><snippet>func</snippet></ROW><ROW><id>19254043</id><snippet>L</snippet></ROW><ROW><id>19254043</id><snippet>sums</snippet></ROW><ROW><id>19254043</id><snippet>sums</snippet></ROW><ROW><id>19254043</id><snippet>sum</snippet></ROW><ROW><id>19254223</id><snippet># =============================================================================
# Plot central cross-section of sphere under steady-state conditions
# where the temperature on upper hemisphere is T=T_0 and the lower 
# hemisphere is held at T=0.  This is an expansion in Legendre polynomials.
#
# Author:           Max Graves
# Last Revised:     8-OCT-2013
# =============================================================================

import pylab as pl

from scipy.special import eval_legendre as Leg
import math,sys

def sumTerm(a,r,theta,l):
    """ 
    Compute term of sum given radius of sphere (a),
    y and z coordinates, and the current index of the 
    Legendre polynomials (l) over the entire range
    where these polynomials are orthogonal [-1,1].
    """
    xRange = pl.arange(-0.99,1.0,0.01)
    x = pl.cos(theta)
    # correct for scipy handling negative indices incorrectly
    lLow = l-1
    lHigh = l+1
    if lLow &lt; 0:
        lLow = -lLow-1
    return 0.5*((r/a)**l)*Leg(l,x)*(Leg(lLow,0)-Leg(lHigh,0))

def main():

    n = 20      # number of l terms to expand to
    a = 1.0     # radius of sphere

    # generate r, theta values
    aBins = pl.linspace(0, 2*pl.pi, 360)      # 0 to 360 in steps of 360/N.
    rBins = pl.linspace(0, 1, 50)
    theta,r = pl.meshgrid(aBins, rBins)

    tempProfile = pl.zeros([50,360])
    for nr,ri in enumerate(rBins):
        print nr
        for nt,ti in enumerate(aBins):
            temp = 0.0
            for l in range(n):
                temp += sumTerm(a, ri, ti, l)
            tempProfile[nr,nt] = temp

    # plot the Temperature profile
    fig, ax = pl.subplots(subplot_kw=dict(projection='polar'))
    pax = ax.pcolormesh(theta, r, tempProfile)
    ax.set_theta_zero_location("N") # 'north' location for theta=0
    ax.set_theta_direction(-1)      # angles increase clockwise
    fig.colorbar(pax)

    pl.show()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>19254263</id><snippet>pyV8</snippet></ROW><ROW><id>19254263</id><snippet>&gt;&gt;&gt; import PyV8
&gt;&gt;&gt; ctxt = PyV8.JSContext()          # create a context with an implicit global object
&gt;&gt;&gt; ctxt.enter()                     # enter the context (also support with statement)
&gt;&gt;&gt; ctxt.eval("1+2")  
</snippet></ROW><ROW><id>19254288</id><snippet>&gt;&gt;&gt; x = range(1,101)
&gt;&gt;&gt; y = x[9::10] # 9 -&gt; start from 10th, 10: step
&gt;&gt;&gt; y
[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</snippet></ROW><ROW><id>19254939</id><snippet>df2 = df.pivot(index="time", columns="machine", values="status")
df2 = df2.fillna(method='ffill')
both_up = df2[(df2 == "up").all(axis=1)]
</snippet></ROW><ROW><id>19254939</id><snippet>&gt;&gt;&gt; both_up
machine one two
time           
5        up  up
</snippet></ROW><ROW><id>19254939</id><snippet>DataFrame</snippet></ROW><ROW><id>19254939</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'time' : range(8),
'machine' : ["one","one","two","two","one","two","two","one"],
'status' : ["up","down","up","down","up","up","down","down"]})
&gt;&gt;&gt; df
  machine status  time
0     one     up     0
1     one   down     1
2     two     up     2
3     two   down     3
4     one     up     4
5     two     up     5
6     two   down     6
7     one   down     7
</snippet></ROW><ROW><id>19254939</id><snippet>&gt;&gt;&gt; df2 = df.pivot(index="time", columns="machine", values="status")
&gt;&gt;&gt; df2
machine   one   two
time               
0          up   NaN
1        down   NaN
2         NaN    up
3         NaN  down
4          up   NaN
5         NaN    up
6         NaN  down
7        down   NaN
</snippet></ROW><ROW><id>19254939</id><snippet>&gt;&gt;&gt; df2 = df2.fillna(method='ffill')
&gt;&gt;&gt; df2
machine   one   two
time               
0          up   NaN
1        down   NaN
2        down    up
3        down  down
4          up  down
5          up    up
6          up  down
7        down  down
</snippet></ROW><ROW><id>19254939</id><snippet>&gt;&gt;&gt; (df2 == "up").all(axis=1)
time
0       False
1       False
2       False
3       False
4       False
5        True
6       False
7       False
dtype: bool
&gt;&gt;&gt; both_up = df2[(df2 == "up").all(axis=1)]
&gt;&gt;&gt; both_up
machine one two
time           
5        up  up
</snippet></ROW><ROW><id>19254939</id><snippet>[5,6)</snippet></ROW><ROW><id>19255037</id><snippet>EXTRA_MODEL_FIELDS</snippet></ROW><ROW><id>19255037</id><snippet>EXTRA_MODEL_FIELDS = (
    (   "mezzanine.blog.models.BlogPost.featured_post",
        "BooleanField",
        ("Featured Post",),
        {"blank": False, "null": False, "default": False},
    ),
)
</snippet></ROW><ROW><id>19255037</id><snippet>init()</snippet></ROW><ROW><id>19255048</id><snippet>*</snippet></ROW><ROW><id>19255048</id><snippet>&gt;&gt;&gt; foo = [set([1,2]), set([2,3]), set([2,4])]
&gt;&gt;&gt; set.intersection(*foo)
set([2])
</snippet></ROW><ROW><id>19255117</id><snippet>   output_list = [hex(ord(c)) for c in ''.join(myData)]
</snippet></ROW><ROW><id>19255117</id><snippet>&gt;&gt;&gt; myData = ['a', '\x65', 'B', '\x66\x69', 'C']
&gt;&gt;&gt; [hex(ord(c)) for c in ''.join(myData)]
['0x61', '0x65', '0x42', '0x66', '0x69', '0x43']
</snippet></ROW><ROW><id>19255188</id><snippet>x</snippet></ROW><ROW><id>19255188</id><snippet>x^(1/n)</snippet></ROW><ROW><id>19255188</id><snippet>9**(1/2.0)</snippet></ROW><ROW><id>19255188</id><snippet>x**(1/float(n))
</snippet></ROW><ROW><id>19255188</id><snippet>1.0/n</snippet></ROW><ROW><id>19255188</id><snippet>1/float(n)</snippet></ROW><ROW><id>19255188</id><snippet>float</snippet></ROW><ROW><id>19255188</id><snippet>int</snippet></ROW><ROW><id>19255218</id><snippet>if type_info == "A"</snippet></ROW><ROW><id>19255250</id><snippet>from wsgiref import simple_server
httpd = simple_server.make_server('', 8000, &lt;your wsgi app here&gt;)
sa = httpd.socket.getsockname()
print "Serving HTTP on", sa[0], "port", sa[1], "..."
import webbrowser
webbrowser.open('http://localhost:8000/xyz?abc')
httpd.handle_request()  # serve one request, then exit
</snippet></ROW><ROW><id>19255276</id><snippet>datas</snippet></ROW><ROW><id>19255276</id><snippet>vstack</snippet></ROW><ROW><id>19255276</id><snippet>In [14]: datas = [np.asarray([0, 0, 0, 0, 0, 0]), np.asarray([0, 0, 0, 0, 0, 1])]

In [15]: datas
Out[15]: [array([0, 0, 0, 0, 0, 0]), array([0, 0, 0, 0, 0, 1])]

In [16]: datas[0].shape
Out[16]: (6,)

In [17]: np.vstack(datas)
Out[17]:
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1]])
</snippet></ROW><ROW><id>19255325</id><snippet>index</snippet></ROW><ROW><id>19255325</id><snippet>index</snippet></ROW><ROW><id>19255325</id><snippet>np.cumsum()</snippet></ROW><ROW><id>19255325</id><snippet>...
index = np.cumsum(bar_width)
...
</snippet></ROW><ROW><id>19255325</id><snippet>index</snippet></ROW><ROW><id>19255325</id><snippet>bar_width[0]</snippet></ROW><ROW><id>19255325</id><snippet>index - bar_width</snippet></ROW><ROW><id>19255325</id><snippet>rects1 = plt.bar(index-bar_width, ...)
</snippet></ROW><ROW><id>19255437</id><snippet> newlist = [i for i,x in enumerate(Startlist) if x == usrinput]
</snippet></ROW><ROW><id>19255442</id><snippet>a = [x.rsplit('.', 1)[-1] for x in la]
</snippet></ROW><ROW><id>19255442</id><snippet>rsplit()</snippet></ROW><ROW><id>19255442</id><snippet>maxsplit=1</snippet></ROW><ROW><id>19255465</id><snippet>(?=...)</snippet></ROW><ROW><id>19255465</id><snippet>&gt;&gt;&gt; re.findall('\\b(?=[abc321]*[321])[abc321]*[abc][abc321]*\\b', '  123abc 123 abc')
['123abc']
</snippet></ROW><ROW><id>19255465</id><snippet>&gt;&gt;&gt; help(re) 
(?=...)  Matches if ... matches next, but doesn't consume the string.
</snippet></ROW><ROW><id>19255465</id><snippet>&gt;&gt;&gt; re.findall('\\b[abc321]*(?:[abc][123]|[123][abc])[abc321]*\\b', '  123abc 123 abc')
['123abc']
</snippet></ROW><ROW><id>19255467</id><snippet>In [11]: df1.merge(df2, how='outer')
Out[11]: 
  Name  ADD   ST
0    A   12   CA
1    B   54   CA
2    C   34   TX
3    D  756  NaN
4    E   43  NaN
</snippet></ROW><ROW><id>19255559</id><snippet>Object1 = Testing(200)</snippet></ROW><ROW><id>19255559</id><snippet>self.BB_Key_Length</snippet></ROW><ROW><id>19255619</id><snippet>self.connection = pika.SelectConnection(self.connectionParameters,
        on_open_callback=self.onConnected, on_close_callback=self.onConnectionClosed,
        stop_ioloop_on_close=False)
self.connection.add_on_open_error_callback(self.onConnectionError)
</snippet></ROW><ROW><id>19255619</id><snippet>File "build/bdist.linux-i686/egg/pika/adapters/select_connection.py", line 51, in __init__
File "build/bdist.linux-i686/egg/pika/adapters/base_connection.py", line 62, in __init__
File "build/bdist.linux-i686/egg/pika/connection.py", line 590, in __init__
File "build/bdist.linux-i686/egg/pika/connection.py", line 707, in connect
File "build/bdist.linux-i686/egg/pika/callback.py", line 61, in wrapper
File "build/bdist.linux-i686/egg/pika/callback.py", line 92, in wrapper
File "build/bdist.linux-i686/egg/pika/callback.py", line 232, in process
File "build/bdist.linux-i686/egg/pika/connection.py", line 1192, in _on_connection_error
pika.exceptions.AMQPConnectionError: 1
</snippet></ROW><ROW><id>19255619</id><snippet>def _on_connection_error(self, connection_unused):
    """Default behavior when the connecting connection can not connect.

    :raises: exceptions.AMQPConnectionError

    """
    raise exceptions.AMQPConnectionError(self.params.connection_attempts)
</snippet></ROW><ROW><id>19255767</id><snippet>form.save</snippet></ROW><ROW><id>19255767</id><snippet>form.save()</snippet></ROW><ROW><id>19256012</id><snippet>None</snippet></ROW><ROW><id>19256012</id><snippet>False</snippet></ROW><ROW><id>19256012</id><snippet>0</snippet></ROW><ROW><id>19256012</id><snippet>0L</snippet></ROW><ROW><id>19256012</id><snippet>0.0</snippet></ROW><ROW><id>19256012</id><snippet>0j</snippet></ROW><ROW><id>19256012</id><snippet>''</snippet></ROW><ROW><id>19256012</id><snippet>()</snippet></ROW><ROW><id>19256012</id><snippet>[]</snippet></ROW><ROW><id>19256012</id><snippet>{}</snippet></ROW><ROW><id>19256012</id><snippet>__nonzero__()</snippet></ROW><ROW><id>19256012</id><snippet>__len__()</snippet></ROW><ROW><id>19256012</id><snippet>zero</snippet></ROW><ROW><id>19256012</id><snippet>bool</snippet></ROW><ROW><id>19256012</id><snippet>False</snippet></ROW><ROW><id>19256326</id><snippet>&gt;&gt;&gt; test_string = '1101100110000110110110011000001011011000101001111101100010101000'
&gt;&gt;&gt; print ('%x' % int(test_string, 2)).decode('hex').decode('utf-8')
نقاب
</snippet></ROW><ROW><id>19256326</id><snippet>&gt;&gt;&gt; '{:b}'.format(int(u'نقاب'.encode('utf-8').encode('hex'), 16))
1: '1101100110000110110110011000001011011000101001111101100010101000'
</snippet></ROW><ROW><id>19256383</id><snippet>org.apache.cassandra.metrics
  ColumnFamily
    cf_name
       TotalDiskSpaceUsed
       MemtableDataSize
</snippet></ROW><ROW><id>19256389</id><snippet>/usr/bin</snippet></ROW><ROW><id>19256389</id><snippet>#! /usr/bin/env python</snippet></ROW><ROW><id>19256389</id><snippet>/usr/bin</snippet></ROW><ROW><id>19256389</id><snippet>PATH</snippet></ROW><ROW><id>19256389</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19256389</id><snippet>/usr/bin</snippet></ROW><ROW><id>19256389</id><snippet>python</snippet></ROW><ROW><id>19256389</id><snippet>alias python=/usr/local/bin/python2.7
</snippet></ROW><ROW><id>19256389</id><snippet>~/.bashrc</snippet></ROW><ROW><id>19256389</id><snippet>python</snippet></ROW><ROW><id>19256389</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>19256422</id><snippet>bar</snippet></ROW><ROW><id>19256422</id><snippet>lambda</snippet></ROW><ROW><id>19256422</id><snippet>bar = lambda: None
</snippet></ROW><ROW><id>19256422</id><snippet>def bar():
    pass
</snippet></ROW><ROW><id>19256422</id><snippet>return None</snippet></ROW><ROW><id>19256422</id><snippet>pass</snippet></ROW><ROW><id>19256631</id><snippet>pip</snippet></ROW><ROW><id>19256631</id><snippet>/Library/Python/2.6/site-packages
</snippet></ROW><ROW><id>19256631</id><snippet>/usr/local/bin
</snippet></ROW><ROW><id>19256631</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>19256631</id><snippet>setuptools</snippet></ROW><ROW><id>19256631</id><snippet>distribute</snippet></ROW><ROW><id>19256631</id><snippet>egg-info</snippet></ROW><ROW><id>19256631</id><snippet>Pillow-x.y.z-py2.6.egg-info</snippet></ROW><ROW><id>19256631</id><snippet>egg-info</snippet></ROW><ROW><id>19256631</id><snippet>installed-files.txt</snippet></ROW><ROW><id>19256631</id><snippet>egg-info</snippet></ROW><ROW><id>19256631</id><snippet>rm -rf</snippet></ROW><ROW><id>19256631</id><snippet>${sitedir}/PIL</snippet></ROW><ROW><id>19256631</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19256652</id><snippet>In [29]: df = DataFrame(dict(A = [1.5,2.5], B = [2.5,3.0]))

In [30]: df
Out[30]: 
     A    B
0  1.5  2.5
1  2.5  3.0

In [31]: df.applymap(lambda x: str(x).replace('.',','))
Out[31]: 
     A    B
0  1,5  2,5
1  2,5  3,0
</snippet></ROW><ROW><id>19256652</id><snippet>In [37]: df.applymap(str).replace(r'\.',',',regex=True)
Out[37]: 
     A    B
0  1,5  2,5
1  2,5  3,0
</snippet></ROW><ROW><id>19256934</id><snippet>from twisted.web import server, resource
from twisted.internet import reactor

class HelloResource(resource.Resource):
    isLeaf = True
    numberRequests = 0

    def render_GET(self, request):
        self.numberRequests += 1
        request.setHeader("content-type", "text/plain")
        return "I am request #" + str(self.numberRequests) + "\n"

reactor.listenTCP(80, server.Site(HelloResource()))
reactor.run()
</snippet></ROW><ROW><id>19256934</id><snippet>80</snippet></ROW><ROW><id>19257025</id><snippet>stack</snippet></ROW><ROW><id>19257025</id><snippet>df.stack()
Out[25]: 
2013-10-1-16:00:00  GOOG    1
                    XOM     1
2013-10-4-16:00:00  SPY     1
2013-10-6-16:00:00  SPY     1
                    AAPL    1
2013-10-8-16:00:00  GOOG    1
</snippet></ROW><ROW><id>19257052</id><snippet>Content-Type: multipart/related;
    boundary="----=_NextPart_000_0009_01CEC44B.4C788080"
</snippet></ROW><ROW><id>19257052</id><snippet>Subject: ...
From: ...
To: ...
Content-Type: multipart/related;
    type="multipart/alternative";
    boundary="----=_NextPart_000_0009_01CEC44B.4C788080"

------=_NextPart_000_0009_01CEC44B.4C788080
Content-Type: multipart/alternative;
    boundary="----=_NextPart_001_000A_01CEC44B.4C788080"


------=_NextPart_001_000A_01CEC44B.4C788080
Content-Type: text/plain;
    charset="ISO-8859-15"
Content-Transfer-Encoding: quoted-printable

My Simple text

------=_NextPart_001_000A_01CEC44B.4C788080
Content-Type: text/html;
    charset="ISO-8859-15"
Content-Transfer-Encoding: quoted-printable

My HTML Text

------=_NextPart_001_000A_01CEC44B.4C788080--

------=_NextPart_000_0009_01CEC44B.4C788080
Content-Type: image/png;
    name="caddiigg.png"
Content-Transfer-Encoding: base64
Content-ID: &lt;38F81D2D49CB42B2AD8F93F5CF01BCA1@SKNB&gt;

iVBORw0KGgoAAAANSUhEUgAAAxcAAAH0CAIAAADADUduAAAgAElEQVR4nEy8adP02H3ex0+TFymZ
5JAzw01OpazZOVS2SjkvYpHzzELasiuOK4tLkhVJMcWZu7E0loN96x07cPZzsPR2P8+QlPOh8gL9
DFn1L


------=_NextPart_000_0009_01CEC44B.4C788080--
</snippet></ROW><ROW><id>19257052</id><snippet>Content-Type: multipart/mixed; boundary="===============0661849094=="
MIME-Version: 1.0
Subject: image test message
From: 
To: 

--===============0661849094==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

This is sample text from me
--===============0661849094==
Content-Type: text/html; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit


&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt; this is a test title &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt; Test me &lt;br&gt;
        Another line &lt;br&gt;
        This is the image you were looking for &lt;img src="cid:test_image"&gt;&lt;br&gt;
        This will teach you not to click on links in strange &lt;a href="http://purple.com"&gt;emails&lt;/a&gt;
        &lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;

--===============0661849094==
Content-Type: image/jpeg
MIME-Version: 1.0
Content-Transfer-Encoding: base64
Content-Id: &lt;test_image&gt;

YmxhYmxh
--===============0661849094==--
</snippet></ROW><ROW><id>19257052</id><snippet>...
&lt;BR&gt;&lt;IMG alt=3D""=20
src=3D"cid:38F81D2D49CB42B2AD8F93F5CF01BCA1@SKNB"&gt;
...

------=_NextPart_000_0009_01CEC44B.4C788080
Content-Type: image/png;
    name="caddiigg.png"
Content-Transfer-Encoding: base64
Content-ID: &lt;38F81D2D49CB42B2AD8F93F5CF01BCA1@SKNB&gt;

iVBORw0KGgoAAAANSUhEUg ....
</snippet></ROW><ROW><id>19257052</id><snippet>Content-ID</snippet></ROW><ROW><id>19257052</id><snippet>D</snippet></ROW><ROW><id>19257093</id><snippet>Text.see</snippet></ROW><ROW><id>19257093</id><snippet>text.insert(END, "spam\n")
text.see(END)
</snippet></ROW><ROW><id>19257093</id><snippet>scan_mark</snippet></ROW><ROW><id>19257093</id><snippet>scan_dragto</snippet></ROW><ROW><id>19257093</id><snippet>yview</snippet></ROW><ROW><id>19257514</id><snippet>def foo(a, b, c, *args):
    return len(args)

def bar(a, b, c, **kwargs):
    if kwargs["magicnumber"] == 7:
      return True
    return False
</snippet></ROW><ROW><id>19257639</id><snippet>From Queue import Queue
</snippet></ROW><ROW><id>19257639</id><snippet>From multiprocessing import Queue 
</snippet></ROW><ROW><id>19257639</id><snippet>put</snippet></ROW><ROW><id>19257639</id><snippet>get</snippet></ROW><ROW><id>19257639</id><snippet>queue.get()</snippet></ROW><ROW><id>19257639</id><snippet>from multiprocessing import Process,Queue

if __name__ == "__main__":

    tobeQueue = Queue()

    for i in range(1,10000):
        tobeQueue.put(i)

    for i in range(1,10000):
        tobeQueue.get() #remove all 9999 items, allow it to die.
</snippet></ROW><ROW><id>19257700</id><snippet>__init__</snippet></ROW><ROW><id>19257700</id><snippet>__new__</snippet></ROW><ROW><id>19257700</id><snippet>class C(namedtuple('C', 'x, y')):
    __slots__ = ()
    def __new__(cls, obj):
        return super(C, cls).__new__(cls, obj.x, obj.y)
</snippet></ROW><ROW><id>19257700</id><snippet>__new__</snippet></ROW><ROW><id>19257700</id><snippet>return</snippet></ROW><ROW><id>19257700</id><snippet>__new__</snippet></ROW><ROW><id>19257700</id><snippet>None</snippet></ROW><ROW><id>19257700</id><snippet>x</snippet></ROW><ROW><id>19257700</id><snippet>y</snippet></ROW><ROW><id>19257700</id><snippet>&gt;&gt;&gt; class C(namedtuple('C', 'x, y')):
...     __slots__ = ()
...     def __new__(cls, obj):
...         return super(C, cls).__new__(cls, obj.x, obj.y)
... 
&gt;&gt;&gt; O.x, O.y
(10, 20)
&gt;&gt;&gt; C(O)
C(x=10, y=20)
</snippet></ROW><ROW><id>19257700</id><snippet>datetime</snippet></ROW><ROW><id>19257700</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>19257700</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19257700</id><snippet>datetime.datetime.fromordinal()</snippet></ROW><ROW><id>19257700</id><snippet>class C(namedtuple('C', 'x, y')):
    __slots__ = ()

    def __new__(cls, x, y=None):
        if y is None:
            # assume attributes
            x, y = x.x, x.y
        return super(C, cls).__new__(cls, x, y)
</snippet></ROW><ROW><id>19257700</id><snippet>y</snippet></ROW><ROW><id>19257700</id><snippet>None</snippet></ROW><ROW><id>19257700</id><snippet>&gt;&gt;&gt; C(3, 5):
C(x=3, y=5)
&gt;&gt;&gt; C(O)
C(x=10, y=20)
</snippet></ROW><ROW><id>19257700</id><snippet>class C(namedtuple('C', 'x, y')):
    @classmethod
    def from_attributes(cls, obj):
        return cls(obj.x, obj.y)
</snippet></ROW><ROW><id>19257700</id><snippet>&gt;&gt;&gt; C(3, 5):
C(x=3, y=5)
&gt;&gt;&gt; C.from_attributes(O)
C(x=10, y=20)
</snippet></ROW><ROW><id>19257771</id><snippet>if</snippet></ROW><ROW><id>19257771</id><snippet>game = {'baseMap': '#here comes your 2D array of tiles',
'objects': [ {'class': Door, 'position': (x, y), 'other Door arguments': ...}, 
{'class': Door, 'position': (x2, y2), 'other Door arguments': ...},
{'class': Dragon, 'position': (x3, y3), 'dragon arguments': ...}, ] }
</snippet></ROW><ROW><id>19257771</id><snippet>class Door:
    def __init__ (self, position, colour, creaking = True):
        print (position, colour, creaking)

objDefs = [...,
          {'class': Door, 'kwargs': {'position': (2, 3), 'colour': 'black'} },
          ...]

#Here you actually iterate over objDefs
objDef = objDefs [1]
obj = objDef ['class'] (**objDef ['kwargs'] )
</snippet></ROW><ROW><id>19257771</id><snippet>#! /usr/bin/python3.2

colours = {'white': 7, 'green': 2, 'blue': 4, 'black': 0, 'yellow': 3}

class Tile:
    data = {'.': ('Floor', 'white', True),
        'Y': ('Forest', 'green', False),
        '~': ('Water', 'blue', False) }

    def __init__ (self, code, position):
        self.code = code
        self.position = position
        self.name, self.colour, self.passable = Tile.data [code]

    def __str__ (self):
        return '\x1b[{}m{}'.format (30 + colours [self.colour], self.code)

class GameObject:
    #here got he general interfaces common to all game objects
    def __str__ (self):
        return '\x1b[{}m{}'.format (30 + colours [self.colour], self.code)

class Door (GameObject):
    def __init__ (self, code, position, colour, key):
        self.code = code
        self.position = position
        self.colour = colour
        self.key = key

    def close (self): pass
        #door specific interface

class Dragon (GameObject):
    def __init__ (self, code, position, colour, stats):
        self.code = code
        self.position = position
        self.colour = colour
        self.stats = stats

    def bugger (self): pass
        #dragon specific interface

class Map:
    def __init__ (self, codeMap, objects):
        self.tiles = [ [Tile (c, (x, y) ) for x, c in enumerate (line) ] for y, line in enumerate (codeMap) ]
        self.objects = {obj ['args'] ['position']: obj ['cls'] (**obj ['args'] ) for obj in objects}

    def __str__ (self):
        return '\n'.join (
            ''.join (str (self.objects [ (x, y) ] if (x, y) in self.objects else tile)
                for x, tile in enumerate (line) )
            for y, line in enumerate (self.tiles)
            ) + '\n\x1b[0m'

mapRouge = ['~~~~~~~~~~',
            '~~~~.....Y',
            'YYYYY.YYYY',
            'YYYY....YY']

objects = [ {'cls': Door,
        'args': {'code': '.', 'position': (5, 2), 'colour': 'black',
        'key': 'Ancient Key of Constipation'} },
    {'cls': Dragon,
        'args': {'code': '@',  'position': (7, 3), 'colour': 'yellow',
        'stats': {'ATK': 20, 'DEF': 20} } } ]

theMap = Map (mapRouge, objects)
print (theMap)
</snippet></ROW><ROW><id>19257843</id><snippet>all()</snippet></ROW><ROW><id>19257843</id><snippet>True</snippet></ROW><ROW><id>19257843</id><snippet>False</snippet></ROW><ROW><id>19257843</id><snippet>True</snippet></ROW><ROW><id>19257843</id><snippet>True</snippet></ROW><ROW><id>19257843</id><snippet>any()</snippet></ROW><ROW><id>19257843</id><snippet>False</snippet></ROW><ROW><id>19257843</id><snippet>True</snippet></ROW><ROW><id>19257843</id><snippet>any()</snippet></ROW><ROW><id>19257843</id><snippet>&gt;&gt;&gt; any(True for _ in '')
False
</snippet></ROW><ROW><id>19257884</id><snippet>df = DataFrame({'a':[1,2,1,1,3], 'b':[1,2,2,2,1]})

df

Out[11]:

   a  b
0  1  1
1  2  2
2  1  2
3  1  2
4  3  1

In [13]:

df.sort(columns=['a','b'], inplace=True)

df

Out[13]:

   a  b
0  1  1
2  1  2
3  1  2
1  2  2
4  3  1
</snippet></ROW><ROW><id>19257884</id><snippet>df.sort(columns=['Time', 'Cost'],inplace=True)
</snippet></ROW><ROW><id>19257931</id><snippet>    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie &amp;&amp; document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i &lt; cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
</snippet></ROW><ROW><id>19257931</id><snippet>     $(document).ready(function() {
        $("#button").click(function(){
            $.ajax({
                type : "POST",
                url : "{% url 'getlist' %}",
                data : {
                    msg : 'abcd',
                    csrfmiddlewaretoken: getCookie('csrftoken')
                }
            }).done(function(data){
                alert(data.message);
            });
        });
    });
</snippet></ROW><ROW><id>19257985</id><snippet>For</snippet></ROW><ROW><id>19257985</id><snippet>w</snippet></ROW><ROW><id>19257985</id><snippet>number</snippet></ROW><ROW><id>19257985</id><snippet>numberstring = raw_input("&gt; ")  # expect a string like "1 2.0 4 100"
addition = 0
numberlist = numberstring.split(" ") # convert the chars into a list of "words"
for number in numberlist:
    addition = addition + float(number)
print addition
</snippet></ROW><ROW><id>19257985</id><snippet>.split()</snippet></ROW><ROW><id>19257985</id><snippet>float()</snippet></ROW><ROW><id>19257985</id><snippet>for letter in myvar:</snippet></ROW><ROW><id>19257985</id><snippet>letter</snippet></ROW><ROW><id>19257985</id><snippet>for eachitem in mybasket: 
    # add item to total
    # go to next item.
</snippet></ROW><ROW><id>19257995</id><snippet>shell=True</snippet></ROW><ROW><id>19257995</id><snippet>subprocess.call(["dir"], shell=True)
</snippet></ROW><ROW><id>19257995</id><snippet>dir</snippet></ROW><ROW><id>19257995</id><snippet>dir</snippet></ROW><ROW><id>19257995</id><snippet>shell=True</snippet></ROW><ROW><id>19257995</id><snippet>subprocess.call</snippet></ROW><ROW><id>19257995</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19257995</id><snippet>&gt;&gt;&gt; subprocess.check_output(['dir'], shell=True)
' Datentr\x84ger in Laufwerk C: ist … and more German output'
</snippet></ROW><ROW><id>19257995</id><snippet>dir</snippet></ROW><ROW><id>19257995</id><snippet>/bin/dir</snippet></ROW><ROW><id>19257995</id><snippet>dir</snippet></ROW><ROW><id>19257995</id><snippet>cmd.exe</snippet></ROW><ROW><id>19257995</id><snippet>Get-ChildItem</snippet></ROW><ROW><id>19257995</id><snippet>dir</snippet></ROW><ROW><id>19258032</id><snippet>def depluralise(plurals, plural_endings):
    new_list = []
    for plural, plural_ending in zip(plurals, plural_endings):
        if plural.endswith(plural_ending):
            if plural_ending == '':
                new_list.append(plural)
            else:
                new_list.append(plural[:-len(plural_ending)])
    return new_list 


plural_string = "cell phones|sheep|oxen"
plurals = plural_string.split('|')
plural_endings_string = "s,,en"
plural_endings = plural_endings_string.split(',')

print depluralise(plurals, plural_endings)

plurals = ['children', 'brothers', 'fish', 'penguins']
plural_endings = ['ren', 's', '', 's']

print depluralise(plurals, plural_endings)
</snippet></ROW><ROW><id>19258247</id><snippet>lxml.html.parse()</snippet></ROW><ROW><id>19258247</id><snippet>urllib.urlopen()</snippet></ROW><ROW><id>19258247</id><snippet>u'\n'.join()</snippet></ROW><ROW><id>19258247</id><snippet>p</snippet></ROW><ROW><id>19258247</id><snippet>\n</snippet></ROW><ROW><id>19258247</id><snippet>import urllib
import lxml.html

page = urllib.urlopen('http://www.toponymic-dictionary.in.ua/index.php?option=com_content&amp;view=section&amp;layout=blog&amp;id=1&amp;Itemid=2')

# use "page" as a file-like object
xmldata = lxml.html.parse(page).getroot()

ptexts = xmldata.xpath('//p[@class="MsoNormal"]//text()')
joined_text = u'\n'.join(ptexts)

print joined_text.encode('cp1251')
</snippet></ROW><ROW><id>19258365</id><snippet>total</snippet></ROW><ROW><id>19258365</id><snippet>total</snippet></ROW><ROW><id>19258365</id><snippet>lst</snippet></ROW><ROW><id>19258365</id><snippet>total += abs(med - i)
</snippet></ROW><ROW><id>19258365</id><snippet>total = sum(abs(med-i) for i in lst)
</snippet></ROW><ROW><id>19258407</id><snippet>np.choice</snippet></ROW><ROW><id>19258407</id><snippet>a = np.random.random(100)    # an array to draw from
n = 10                       # number of values to draw
i = np.arange(a.size)        # an array of the index value for weighting
w = np.exp(i/10.)            # higher weights for larger index values
w /= w.sum()                 # weight must be normalized
</snippet></ROW><ROW><id>19258407</id><snippet>np.random.choice(a, size=n, p=w)
</snippet></ROW><ROW><id>19258407</id><snippet>10</snippet></ROW><ROW><id>19258407</id><snippet>np.exp(i/50.)</snippet></ROW><ROW><id>19258407</id><snippet>In [38]: np.random.choice(a, size=n, p=w)
Out[38]: array([37, 53, 45, 22, 88, 69, 56, 86, 96, 24])
</snippet></ROW><ROW><id>19258407</id><snippet>np.exp(i)</snippet></ROW><ROW><id>19258407</id><snippet>In [41]: np.random.choice(a, size=n, p=w)
Out[41]: array([99, 99, 98, 99, 99, 99, 99, 97, 99, 98])
</snippet></ROW><ROW><id>19258407</id><snippet>replace=False</snippet></ROW><ROW><id>19258407</id><snippet>In [33]: np.random.choice(a, size=n, replace=False, p=w)
Out[33]: array([99, 84, 86, 91, 87, 81, 96, 89, 97, 95])

In [34]: np.random.choice(a, size=n, replace=True, p=w)
Out[34]: array([94, 98, 99, 98, 97, 99, 91, 96, 97, 93])
</snippet></ROW><ROW><id>19258407</id><snippet>idx = np.random.poisson(size=10)
</snippet></ROW><ROW><id>19258407</id><snippet>a[-idx-1]
</snippet></ROW><ROW><id>19258507</id><snippet>IResource</snippet></ROW><ROW><id>19258507</id><snippet>Deferred</snippet></ROW><ROW><id>19258507</id><snippet>Deferred</snippet></ROW><ROW><id>19258550</id><snippet>modules = map(__import__, moduleNames)
</snippet></ROW><ROW><id>19258550</id><snippet>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] 1
&gt;&gt;&gt; moduleNames
['sys', 'os', 're', 'unittest']
&gt;&gt;&gt; modules = map(__import__, moduleNames)        2
&gt;&gt;&gt; modules                                       3
[&lt;module 'sys' (built-in)&gt;,
&lt;module 'os' from 'c:\Python22\lib\os.pyc'&gt;,
&lt;module 're' from 'c:\Python22\lib\re.pyc'&gt;,
&lt;module 'unittest' from 'c:\Python22\lib\unittest.pyc'&gt;]
&gt;&gt;&gt; modules[0].version                            4
'2.2.2 (#37, Nov 26 2002, 10:24:37) [MSC 32 bit (Intel)]'
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.2.2 (#37, Nov 26 2002, 10:24:37) [MSC 32 bit (Intel)]'
</snippet></ROW><ROW><id>19258612</id><snippet>time()</snippet></ROW><ROW><id>19258612</id><snippet>start_time = time.time()</snippet></ROW><ROW><id>19258612</id><snippet>time.time() - start_time</snippet></ROW><ROW><id>19258612</id><snippet>quickSelect</snippet></ROW><ROW><id>19258612</id><snippet>quickSelect</snippet></ROW><ROW><id>19258612</id><snippet>L.append( int(locations) )
</snippet></ROW><ROW><id>19258711</id><snippet>pivot_table</snippet></ROW><ROW><id>19258711</id><snippet>In [21]: df.pivot_table(values='result', cols='test', rows='date')
Out[21]: 
test      test_1  test_2  test_3  test_4
date                                    
10-05-13       0     NaN     NaN     NaN
10-06-13     NaN     NaN       1     NaN
10-07-13     NaN     NaN       1       0
10-08-13       1     0.5     NaN     NaN

In [22]: df.pivot_table(values='result', cols='test', rows='date') * 100
Out[22]: 
test      test_1  test_2  test_3  test_4
date                                    
10-05-13       0     NaN     NaN     NaN
10-06-13     NaN     NaN     100     NaN
10-07-13     NaN     NaN     100       0
10-08-13     100      50     NaN     NaN
</snippet></ROW><ROW><id>19258715</id><snippet>class Foo(object):
    bar = ['baz']
</snippet></ROW><ROW><id>19258715</id><snippet>class Foo(object):
    def __init__(self):   
        self.bar = ['baz']
</snippet></ROW><ROW><id>19258715</id><snippet>bar</snippet></ROW><ROW><id>19258715</id><snippet>Foo</snippet></ROW><ROW><id>19258715</id><snippet>Foo</snippet></ROW><ROW><id>19258715</id><snippet>type</snippet></ROW><ROW><id>19258715</id><snippet>Foo</snippet></ROW><ROW><id>19258715</id><snippet>bar</snippet></ROW><ROW><id>19258715</id><snippet>Foo</snippet></ROW><ROW><id>19258715</id><snippet>bar</snippet></ROW><ROW><id>19258715</id><snippet>Foo</snippet></ROW><ROW><id>19258715</id><snippet>class Foo(object):
    bar = 'baz'

    def __init__(self):   
        self.bar = 'quux'
</snippet></ROW><ROW><id>19258715</id><snippet>Foo.bar == 'baz'</snippet></ROW><ROW><id>19258715</id><snippet>Foo().bar == 'quux'</snippet></ROW><ROW><id>19258715</id><snippet>type(Foo()).bar == 'baz'</snippet></ROW><ROW><id>19258715</id><snippet>__init__</snippet></ROW><ROW><id>19258715</id><snippet>User</snippet></ROW><ROW><id>19258715</id><snippet>Column</snippet></ROW><ROW><id>19258715</id><snippet>User</snippet></ROW><ROW><id>19258715</id><snippet>User</snippet></ROW><ROW><id>19258715</id><snippet>Base</snippet></ROW><ROW><id>19258715</id><snippet>sqlalchemy.ext.declarative.declarative_base()</snippet></ROW><ROW><id>19258715</id><snippet>Base</snippet></ROW><ROW><id>19258715</id><snippet>User</snippet></ROW><ROW><id>19258715</id><snippet>User</snippet></ROW><ROW><id>19258720</id><snippet>traceback.py</snippet></ROW><ROW><id>19258720</id><snippet>import traceback

class FakeCode(object):
    def __init__(self, co_filename, co_name):
        self.co_filename = co_filename
        self.co_name = co_name


class FakeFrame(object):
    def __init__(self, f_code, f_globals):
        self.f_code = f_code
        self.f_globals = f_globals


class FakeTraceback(object):
    def __init__(self, frames, line_nums):
        if len(frames) != len(line_nums):
            raise ValueError("Ya messed up!")
        self._frames = frames
        self._line_nums = line_nums
        self.tb_frame = frames[0]
        self.tb_lineno = line_nums[0]

    @property
    def tb_next(self):
        if len(self._frames) &gt; 1:
            return FakeTraceback(self._frames[1:], self._line_nums[1:])


class FakeException(Exception):
    def __init__(self, *args, **kwargs):
        self._tb = None
        super().__init__(*args, **kwargs)

    @property
    def __traceback__(self):
        return self._tb

    @__traceback__.setter
    def __traceback__(self, value):
        self._tb = value

    def with_traceback(self, value):
        self._tb = value
        return self


code1 = FakeCode("made_up_filename.py", "non_existent_function")
code2 = FakeCode("another_non_existent_file.py", "another_non_existent_method")
frame1 = FakeFrame(code1, {})
frame2 = FakeFrame(code2, {})
tb = FakeTraceback([frame1, frame2], [1,3])
exc = FakeException("yo").with_traceback(tb)

print(''.join(traceback.format_exception(FakeException, exc, tb)))
# Traceback (most recent call last):
#   File "made_up_filename.py", line 1, in non_existent_function
#   File "another_non_existent_file.py", line 3, in another_non_existent_method
# FakeException: yo
</snippet></ROW><ROW><id>19258720</id><snippet>FakeException</snippet></ROW><ROW><id>19258720</id><snippet>with_traceback()</snippet></ROW><ROW><id>19258720</id><snippet>format_exception</snippet></ROW><ROW><id>19258720</id><snippet>linecache</snippet></ROW><ROW><id>19258720</id><snippet>traceback</snippet></ROW><ROW><id>19258720</id><snippet>linecache</snippet></ROW><ROW><id>19258720</id><snippet>exc</snippet></ROW><ROW><id>19258720</id><snippet>traceback</snippet></ROW><ROW><id>19258720</id><snippet>inspect</snippet></ROW><ROW><id>19258720</id><snippet>traceback</snippet></ROW><ROW><id>19258750</id><snippet>select rdb$field_name from rdb$relation_fields
where rdb$relation_name='YOUR-TABLE_NAME';
</snippet></ROW><ROW><id>19258774</id><snippet>s = "سلام"</snippet></ROW><ROW><id>19258774</id><snippet>&gt;&gt;&gt; s = "سلام"
&gt;&gt;&gt; s
'\xd8\xb3\xd9\x84\xd8\xa7\xd9\x85'
</snippet></ROW><ROW><id>19258774</id><snippet>encode</snippet></ROW><ROW><id>19258774</id><snippet>u</snippet></ROW><ROW><id>19258774</id><snippet>&gt;&gt;&gt; s = u"سلام"
&gt;&gt;&gt; s
u'\u0633\u0644\u0627\u0645'
&gt;&gt;&gt; '{:b}'.format(int(s.encode('utf-8').encode('hex'), 16))
'1101100010110011110110011000010011011000101001111101100110000101'
</snippet></ROW><ROW><id>19258774</id><snippet>raw_input</snippet></ROW><ROW><id>19258774</id><snippet>encode</snippet></ROW><ROW><id>19258774</id><snippet>'{:b}'.format(int(s.encode('hex'), 16))
</snippet></ROW><ROW><id>19258774</id><snippet>s = s.decode('utf8')
</snippet></ROW><ROW><id>19258774</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>19258793</id><snippet>username</snippet></ROW><ROW><id>19258793</id><snippet>__unicode__</snippet></ROW><ROW><id>19258793</id><snippet>return self.username</snippet></ROW><ROW><id>19258793</id><snippet>username</snippet></ROW><ROW><id>19258793</id><snippet>self.user.username</snippet></ROW><ROW><id>19258793</id><snippet>players</snippet></ROW><ROW><id>19258793</id><snippet>players.all</snippet></ROW><ROW><id>19258793</id><snippet>players.all</snippet></ROW><ROW><id>19258793</id><snippet>length</snippet></ROW><ROW><id>19258793</id><snippet>players.count</snippet></ROW><ROW><id>19258889</id><snippet>Synset</snippet></ROW><ROW><id>19258889</id><snippet>&gt;&gt;&gt; wn.synsets('small')
[Synset('small.n.01'),
 Synset('small.n.02'),
 Synset('small.a.01'),
 Synset('minor.s.10'),
 Synset('little.s.03'),
 Synset('small.s.04'),
 Synset('humble.s.01'),
 Synset('little.s.07'),
 Synset('little.s.05'),
 Synset('small.s.08'),
 Synset('modest.s.02'),
 Synset('belittled.s.01'),
 Synset('small.r.01')]
</snippet></ROW><ROW><id>19258889</id><snippet>similar_tos()</snippet></ROW><ROW><id>19258889</id><snippet>Synset</snippet></ROW><ROW><id>19258889</id><snippet>for ss in wn.synsets('small'):
    print(ss)
    for sim in ss.similar_tos():
        print('    {}'.format(sim))
</snippet></ROW><ROW><id>19258889</id><snippet>sim.pos</snippet></ROW><ROW><id>19258889</id><snippet>sim.lemma_names</snippet></ROW><ROW><id>19258889</id><snippet>sim.definition</snippet></ROW><ROW><id>19258889</id><snippet>sim.examples</snippet></ROW><ROW><id>19258970</id><snippet>profile = AddProfile.all().filter('profiletitle', self.request.get('profile')).get()
</snippet></ROW><ROW><id>19258970</id><snippet>lang = AddLang(profile=profile, language=language)
lang.put()
</snippet></ROW><ROW><id>19259003</id><snippet>True</snippet></ROW><ROW><id>19259003</id><snippet>True</snippet></ROW><ROW><id>19259003</id><snippet>False</snippet></ROW><ROW><id>19259003</id><snippet>False</snippet></ROW><ROW><id>19259003</id><snippet>False</snippet></ROW><ROW><id>19259017</id><snippet>request.POST</snippet></ROW><ROW><id>19259017</id><snippet>QueryDict</snippet></ROW><ROW><id>19259017</id><snippet>request.FILES</snippet></ROW><ROW><id>19259017</id><snippet>def post(self, request, box_id, width = None, height = None):
    # ...
    photo = Photo(
              type = 'PH',
              title = request.POST['title'],
              date = request.POST['date'],
              is_with = request.POST['is_with'],
              latitude = request.POST['latitude'],
              longitude = request.POST['longitude'],
              location_desc = request.POST['location_desc'],
              photo_pic = '',
              photo_caption = request.POST['photo_caption'],
              photo_file = retina_photo,
              photo_full_size = full_image_size
            )
    # ...
</snippet></ROW><ROW><id>19259044</id><snippet>defaultdict</snippet></ROW><ROW><id>19259044</id><snippet>d = defaultdict(list)

data = [['o1415', '1', '0', '1'], ['o1415', '0', '0', '0'], ['o1414', '0', '0', '0'], ['o1414', '1', '0', '0'], ['o1414', '0', '0', '0'], ['o1408', '0', '0', '1'], ['o1406', '0', '0', '0']]

for sub in data:
    d[sub[0]].append([int(x) for x in sub[1:]])
</snippet></ROW><ROW><id>19259044</id><snippet>zip</snippet></ROW><ROW><id>19259044</id><snippet>d['o1414']
Out[58]: [[0, 0, 0], [1, 0, 0], [0, 0, 0]]

list(zip(*d['o1414']))
Out[59]: [(0, 1, 0), (0, 0, 0), (0, 0, 0)]
</snippet></ROW><ROW><id>19259044</id><snippet>[any(x) and not all(x) for x in zip(*d['o1414'])]
Out[60]: [True, False, False]
</snippet></ROW><ROW><id>19259044</id><snippet>any(x) and not all(x)</snippet></ROW><ROW><id>19259044</id><snippet>True</snippet></ROW><ROW><id>19259204</id><snippet>element</snippet></ROW><ROW><id>19259204</id><snippet>myList[element]</snippet></ROW><ROW><id>19259204</id><snippet>nList.append(myList[element])
</snippet></ROW><ROW><id>19259204</id><snippet>nList = []
for element in nList:
    if option == 0:
        if element &gt; 5:
            nList.append(element)
return nList
</snippet></ROW><ROW><id>19259204</id><snippet>range(len(spam))</snippet></ROW><ROW><id>19259204</id><snippet>spam</snippet></ROW><ROW><id>19259204</id><snippet>enumerate(spam)</snippet></ROW><ROW><id>19259204</id><snippet>zip</snippet></ROW><ROW><id>19259204</id><snippet>if option != 0:
    return []
return [element for element in nList if element &gt; 5]
</snippet></ROW><ROW><id>19259204</id><snippet>… element &gt; 5 or element &lt; -5 …
</snippet></ROW><ROW><id>19259204</id><snippet>… abs(element) &gt; 5 …
</snippet></ROW><ROW><id>19259204</id><snippet>number % 2</snippet></ROW><ROW><id>19259204</id><snippet>if option == 0:
    return [element for element in nList if abs(element) &gt; 5]
elif option == 1:
    return [element for element in nList if element % 2]
else:
    raise ValueError("I don't know option {}".format(option))
</snippet></ROW><ROW><id>19259204</id><snippet>for</snippet></ROW><ROW><id>19259204</id><snippet>while</snippet></ROW><ROW><id>19259204</id><snippet>while</snippet></ROW><ROW><id>19259204</id><snippet>for element in iterable:
    spam(element)

it = iterator(iterable)
while True:
    try:
        element = next(it)
    except StopIteration:
        break
    else:
        spam(element)
</snippet></ROW><ROW><id>19259204</id><snippet>list</snippet></ROW><ROW><id>19259204</id><snippet>index, size = 0, len(sequence)
while index &lt; size:
    spam(sequence[index])
    index += 1
</snippet></ROW><ROW><id>19259204</id><snippet>for</snippet></ROW><ROW><id>19259204</id><snippet>while</snippet></ROW><ROW><id>19259204</id><snippet>elif</snippet></ROW><ROW><id>19259204</id><snippet>preds = {0: lambda x: abs(x) &gt; 5,
         1: lambda x: x % 2}
def splitList(myList, option):
    return filter(preds[option], myList)
</snippet></ROW><ROW><id>19259246</id><snippet>print</snippet></ROW><ROW><id>19259246</id><snippet>def print_to_string(*objects, sep=' ', end='\n'):
     return sep.join(str(obj) for obj in objects) + end
</snippet></ROW><ROW><id>19259246</id><snippet>file</snippet></ROW><ROW><id>19259288</id><snippet>choices</snippet></ROW><ROW><id>19259288</id><snippet>choice</snippet></ROW><ROW><id>19259288</id><snippet>if choice == choices[0]:  
    #index choices ^           
    easygui.msgbox("Ethernet")      
elif choice == choices[1]:
    #index choices ^          
    easygui.msgbox("Wifi")          
else:                               
    easygui.msgbox("chus somthin!")
</snippet></ROW><ROW><id>19259308</id><snippet>import datetime

cursor_table1.execute('SELECT part, min, max, unitPrice, NOW() from table1')
for row in cursor_table1.fetchall():
    part, min, max, unitPrice, now = row
    cursor_table2.execute("INSERT INTO table2 VALUES (%s,%s,%s,%s,'%s')" % (part, min, max, unitPrice, now.strftime('%Y-%m-%d %H:%M:%S') ))
</snippet></ROW><ROW><id>19259311</id><snippet>In [49]: data = map(list, zip(*myDict.keys())) + [myDict.values()]

In [50]: df = DataFrame(zip(*data)).set_index([0, 1])[2].unstack()

In [52]: df.combine_first(df.T).fillna(0)
Out[52]: 
    a   b   c   d
a   0  10  20  30
b  10   0  40  50
c  20  40   0  60
d  30  50  60   0
</snippet></ROW><ROW><id>19259311</id><snippet>df</snippet></ROW><ROW><id>19259484</id><snippet>In [76]: df1
Out[76]: 
Level 0        A                   B
Level 1       A1        A2        B1
0       -0.28667  1.852091 -0.134793

In [77]: df2
Out[77]: 
Level 0         A                   B
Level 1        A1        A3        B1
0       -0.023582 -0.713594  0.487355
1        0.628819  0.764721 -1.118777
2       -0.572421  1.326448 -0.788531
3       -0.160608  1.985142  0.344845
4       -0.184555 -1.075794  0.630975
</snippet></ROW><ROW><id>19259484</id><snippet>In [63]: df1a,df2a = df1.align(df2,fill_value=0)

In [64]: df1a+df2a
Out[64]: 
Level 0         A                             B
Level 1        A1        A2        A3        B1
0       -0.310253  1.852091 -0.713594  0.352561
1        0.628819  0.000000  0.764721 -1.118777
2       -0.572421  0.000000  1.326448 -0.788531
3       -0.160608  0.000000  1.985142  0.344845
4       -0.184555  0.000000 -1.075794  0.630975
</snippet></ROW><ROW><id>19259484</id><snippet>In [65]: df1a,df2a = df1.align(df2)

In [66]: df1a.ffill().fillna(0) + df2a.fillna(0)
Out[66]: 
Level 0         A                             B
Level 1        A1        A2        A3        B1
0       -0.310253  1.852091 -0.713594  0.352561
1        0.342149  1.852091  0.764721 -1.253570
2       -0.859091  1.852091  1.326448 -0.923324
3       -0.447278  1.852091  1.985142  0.210052
4       -0.471226  1.852091 -1.075794  0.496181
</snippet></ROW><ROW><id>19259511</id><snippet>"python -v"</snippet></ROW><ROW><id>19259511</id><snippet>DefaultExecutor executor = new DefaultExecutor();
String s = "python  \"import sys; print sys.executable\""
executor.execute(s);
</snippet></ROW><ROW><id>19259527</id><snippet>[]</snippet></ROW><ROW><id>19259527</id><snippet>()</snippet></ROW><ROW><id>19259527</id><snippet>bestLoc = ((lst(len(lst))/2) + (lst(len(lst)/2)-1)) / 2
</snippet></ROW><ROW><id>19259527</id><snippet>bestLoc = ((lst[len(lst)]/2) + (lst[len(lst)/2]-1)) / 2
</snippet></ROW><ROW><id>19259536</id><snippet>&gt;&gt;&gt; code = """
... def hello():
...     print 'Hello world'
... """
&gt;&gt;&gt; exec code
&gt;&gt;&gt; hello()
Hello world
</snippet></ROW><ROW><id>19259606</id><snippet>alist  =[[('as','bn',1),('ck','dy',1),('et','fv',2)],
         [('as','bn',1),('gx','ha',3)],
         [('ck','dy',1),('kj','mw',5)]]

seen = set()
b = []
for i in alist:
    a = []
    for j in i:
        if (j[0], j[1]) not in seen:
            a.append(j)
            seen.add((j[0], j[1]))
    b.append(a)

alist = b
</snippet></ROW><ROW><id>19259606</id><snippet>&gt;&gt;&gt; pprint.pprint(alist)
[[('as', 'bn', 1), ('ck', 'dy', 1), ('et', 'fv', 2)],
 [('gx', 'ha', 3)],
 [('kj', 'mw', 5)]]
</snippet></ROW><ROW><id>19259606</id><snippet>if j not in seen:</snippet></ROW><ROW><id>19259606</id><snippet>seen.add(j)</snippet></ROW><ROW><id>19259646</id><snippet>enumerate()</snippet></ROW><ROW><id>19259646</id><snippet>for index, item in enumerate(b):
    print index, item
</snippet></ROW><ROW><id>19259646</id><snippet>range(len(b))</snippet></ROW><ROW><id>19259646</id><snippet>item</snippet></ROW><ROW><id>19259646</id><snippet>enumerate()</snippet></ROW><ROW><id>19259646</id><snippet>for index in range(len(b)):
    print index, b[index]
</snippet></ROW><ROW><id>19259717</id><snippet>==</snippet></ROW><ROW><id>19259717</id><snippet>=</snippet></ROW><ROW><id>19259717</id><snippet>=</snippet></ROW><ROW><id>19259717</id><snippet>if</snippet></ROW><ROW><id>19259717</id><snippet>correct</snippet></ROW><ROW><id>19259717</id><snippet>input</snippet></ROW><ROW><id>19259717</id><snippet>input</snippet></ROW><ROW><id>19259717</id><snippet>"yes"</snippet></ROW><ROW><id>19259717</id><snippet>correct</snippet></ROW><ROW><id>19259717</id><snippet>"yes"</snippet></ROW><ROW><id>19259717</id><snippet>if</snippet></ROW><ROW><id>19259717</id><snippet>if</snippet></ROW><ROW><id>19259717</id><snippet>:</snippet></ROW><ROW><id>19259717</id><snippet>input = "yes"</snippet></ROW><ROW><id>19259717</id><snippet>input = "yes"</snippet></ROW><ROW><id>19259717</id><snippet>input</snippet></ROW><ROW><id>19259717</id><snippet>if input:</snippet></ROW><ROW><id>19259717</id><snippet>SyntaxError</snippet></ROW><ROW><id>19259717</id><snippet>IndentationError</snippet></ROW><ROW><id>19259717</id><snippet>correct = input("Is this correct audio?")
if correct == "yes":
    stream.stop_stream()
</snippet></ROW><ROW><id>19259729</id><snippet>&gt;&gt;&gt; import jellyfish
&gt;&gt;&gt; jellyfish.levenshtein_distance('jellyfish', 'smellyfish')
2
&gt;&gt;&gt; jellyfish.jaro_distance('jellyfish', 'smellyfish')
0.89629629629629637
&gt;&gt;&gt; jellyfish.damerau_levenshtein_distance('jellyfish', 'jellyfihs')
1
</snippet></ROW><ROW><id>19259729</id><snippet>import jellyfish
target = 'take'
list = ['teak','fake','bake','sake','rake','sale']
outlist = [x for x in list if jellyfish.levenshtein_distance(x,target) == 1]

print outlist
['fake', 'bake', 'sake', 'rake']
</snippet></ROW><ROW><id>19259914</id><snippet>print</snippet></ROW><ROW><id>19259914</id><snippet>def fibonacciRecursive(n):
    global recAdd
    if n == 1 or n == 0:        
        return n  # &lt;-- should this be return 1?
    else:
        recAdd = recAdd + 1
        return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2)

recAdd = 0
fibonacciRecursive(5)
print(recAdd)
</snippet></ROW><ROW><id>19259914</id><snippet>def fib_aux(n):
    global recAdd
    recAdd = 0
    fibonacciRecursive(5)
    print(recAdd)
</snippet></ROW><ROW><id>19259914</id><snippet>fib_aux(5)
</snippet></ROW><ROW><id>19259914</id><snippet>def fibonacciRecursive(n, print_recAdd=True):
    global recAdd
    if n == 1 or n == 0:        
        retval = n  # &lt;-- should this be 1?
    else:
        recAdd = recAdd + 1
        retval = fibonacciRecursive(n - 1, False) + fibonacciRecursive(n - 2, False)
    if print_recAdd:
        print recAdd
    return retval
</snippet></ROW><ROW><id>19260155</id><snippet>multiprocessing</snippet></ROW><ROW><id>19260155</id><snippet>spawnProcess</snippet></ROW><ROW><id>19260155</id><snippet>multiprocessing</snippet></ROW><ROW><id>19260155</id><snippet>twistd</snippet></ROW><ROW><id>19260155</id><snippet>python-daemonize</snippet></ROW><ROW><id>19260155</id><snippet>upstart</snippet></ROW><ROW><id>19260155</id><snippet>launchd</snippet></ROW><ROW><id>19260155</id><snippet>systemd</snippet></ROW><ROW><id>19260155</id><snippet>runit</snippet></ROW><ROW><id>19260155</id><snippet>twistd</snippet></ROW><ROW><id>19260190</id><snippet>cd yourdir
rm -f yourglob   # oops things got removed from where you started if yourdir did not exist.
</snippet></ROW><ROW><id>19260232</id><snippet>__future__</snippet></ROW><ROW><id>19260232</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>19260232</id><snippet>$ echo -e 'print "PYTHONSTARTUP!"\n' &gt; pythonstartup.py
$ PYTHONSTARTUP=./pythonstartup.py ipython
</snippet></ROW><ROW><id>19260232</id><snippet>$IPYTHONDIR/profile_default/startup/*py</snippet></ROW><ROW><id>19260232</id><snippet>import os

if os.environ['PYTHONSTARTUP']:
    execfile(os.environ['PYTHONSTARTUP'])
</snippet></ROW><ROW><id>19260232</id><snippet>$PYTHONSTARTUP</snippet></ROW><ROW><id>19260232</id><snippet>exec</snippet></ROW><ROW><id>19260232</id><snippet>globals</snippet></ROW><ROW><id>19260232</id><snippet>exec</snippet></ROW><ROW><id>19260232</id><snippet>print_function</snippet></ROW><ROW><id>19260232</id><snippet>exec('from __future__ import print_function</snippet></ROW><ROW><id>19260232</id><snippet>ipython.rc</snippet></ROW><ROW><id>19260232</id><snippet>exec</snippet></ROW><ROW><id>19260232</id><snippet>globals</snippet></ROW><ROW><id>19260232</id><snippet>exec_files</snippet></ROW><ROW><id>19260232</id><snippet>ipython_config.py</snippet></ROW><ROW><id>19260232</id><snippet>exec_lines</snippet></ROW><ROW><id>19260232</id><snippet>~/.ipython/profile_default/ipython_config.py</snippet></ROW><ROW><id>19260232</id><snippet>c = get_config()
</snippet></ROW><ROW><id>19260232</id><snippet>c.InteractiveShellApp.exec_lines = ['from __future__ import print_function']
</snippet></ROW><ROW><id>19260232</id><snippet>import os
try:
    # Make sure to pop it so it won't get exec'd later in the startup
    pythonstartup = os.environ.pop('PYTHONSTARTUP')
    with open(pythonstartup) as f:
        c.InteractiveShellApp.exec_lines.append(list(f))
except KeyError:
    pass
</snippet></ROW><ROW><id>19260312</id><snippet>def get_children(parent):
    result = collection.find({'tags': 'exception', 'parentException': parent})
    result = result.sort('viewPriority')
    return [{'value': ex['value'], 'label': ex['label']} for ex in result]

def get_group_info(parent):     
    return {'groupName': parent, 'children': get_children(parent)}

result = collection.find({'tags': 'exception'})
result = result.sort('viewPriority').distinct('parentException')

exceptions = [get_group_info(parent) for parent in result]
</snippet></ROW><ROW><id>19260312</id><snippet>get_children</snippet></ROW><ROW><id>19260312</id><snippet>get_group_info</snippet></ROW><ROW><id>19260379</id><snippet>setup.py</snippet></ROW><ROW><id>19260379</id><snippet>NameError</snippet></ROW><ROW><id>19260379</id><snippet>Extenson</snippet></ROW><ROW><id>19260379</id><snippet>Extension</snippet></ROW><ROW><id>19260379</id><snippet>buld_ext</snippet></ROW><ROW><id>19260379</id><snippet>build_ext</snippet></ROW><ROW><id>19260379</id><snippet>$ python setup.py build_ext -i
running build_ext
cythoning test.pyx to test.c
</snippet></ROW><ROW><id>19260379</id><snippet>test.c</snippet></ROW><ROW><id>19260379</id><snippet>test.pyx</snippet></ROW><ROW><id>19260379</id><snippet>test.c</snippet></ROW><ROW><id>19260379</id><snippet>test.c</snippet></ROW><ROW><id>19260379</id><snippet>test.pyx</snippet></ROW><ROW><id>19260379</id><snippet>test.pyx</snippet></ROW><ROW><id>19260379</id><snippet>test.c</snippet></ROW><ROW><id>19260379</id><snippet>#include &lt;stdio.h&gt;
void hello_1(void){
    printf("hello 1\n");
}
void hello_2(void){
    printf("hello 2\n");
}
</snippet></ROW><ROW><id>19260379</id><snippet>import cython
cdef extern void hello_1()
</snippet></ROW><ROW><id>19260379</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(cmdclass={'build_ext':build_ext}, 
      ext_modules=[Extension("test",["test.pyx", "ctest.c"], 
                   extra_compile_args=['-g'],
                   extra_link_args=['-g', '-pthread'])
    ])
</snippet></ROW><ROW><id>19260379</id><snippet>$ python setup.py build_ext -i
running build_ext
cythoning test.pyx to test.c
# ...
clang: warning: argument unused during compilation: '-pthread'
$ python
&gt;&gt;&gt; import test
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19260514</id><snippet>element</snippet></ROW><ROW><id>19260514</id><snippet>myList</snippet></ROW><ROW><id>19260514</id><snippet>element</snippet></ROW><ROW><id>19260514</id><snippet>index</snippet></ROW><ROW><id>19260514</id><snippet>element = myList[index]</snippet></ROW><ROW><id>19260514</id><snippet>def splitList2(myList, option):
    nList = []
    index = 0 
    while index &lt; len(myList):
        element = myList[index]
        if option == 0:
            if abs(element) &gt; 5:
                nList.append(element)
        elif option == 1:
            if element % 2:
                nList.append(element)
        index = index + 1
    return nList
</snippet></ROW><ROW><id>19260514</id><snippet>for element in myList</snippet></ROW><ROW><id>19260568</id><snippet> x = (x&lt;&lt;13) ^ x
</snippet></ROW><ROW><id>19260568</id><snippet>n = (n &lt;&lt; 13) ** n
</snippet></ROW><ROW><id>19260568</id><snippet>nn = (n * (n * n * 60493 + 19990303) + 1376312589) &amp; 0x7fffffff
</snippet></ROW><ROW><id>19260568</id><snippet>n = (n &lt;&lt; 13) ^ n
</snippet></ROW><ROW><id>19260837</id><snippet>class RangeFont(object):

    def __init__(self, range):
        self._range = range

    def __setattr__(self, name, value):
        if name.startswith('_'):
            super(RangeFont, self).__setattr__(name, value)
            return

        for cell in self._range: # assuming a range is iterable
            setattr(cell.font, name, value)


class Range(object):
    @property
    def font(self):
        return RangeFont(self)
</snippet></ROW><ROW><id>19260837</id><snippet>ws.Range(...).font.foo.bar = 123</snippet></ROW><ROW><id>19260837</id><snippet>RangeFont.__getattr__</snippet></ROW><ROW><id>19261024</id><snippet>re</snippet></ROW><ROW><id>19261024</id><snippet>import re

with open("filename.txt") as f:
    text = f.read()                     # read the whole file

for match in re.finditer(r"\d+", text): # find all strings of consecutive digits
    num = int(match.group())            # convert to integer
    if 1900 &lt;= num &lt;= 2013:             # test boundaries
        print num
</snippet></ROW><ROW><id>19261291</id><snippet>start_list = []
end_list = []
started = False

with open(filename) as myFile:
    for num, line in enumerate(myFile, 1):
        if not started and start_needle in line:
            start_list.append(num)
            started = True
        if started and line.endswith(end_needle):
            end_list.append(num)
            started = False
</snippet></ROW><ROW><id>19261306</id><snippet>("billy", "jim")</snippet></ROW><ROW><id>19261306</id><snippet>'jim'</snippet></ROW><ROW><id>19261306</id><snippet>'jim</snippet></ROW><ROW><id>19261306</id><snippet>json.dumps</snippet></ROW><ROW><id>19261306</id><snippet>json.loads</snippet></ROW><ROW><id>19261306</id><snippet>repr</snippet></ROW><ROW><id>19261306</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19261306</id><snippet>shelve</snippet></ROW><ROW><id>19261306</id><snippet>CREATE TABLE whois (Rid, Names);
</snippet></ROW><ROW><id>19261306</id><snippet>CREATE TABLE whois (Rid);
CREATE TABLE whois_names (Rid, Name, FOREIGN KEY(Rid) REFERENCES whois(Rid);
</snippet></ROW><ROW><id>19261306</id><snippet>tt = [(rid,("billy","jim"))]
for rid, names in tt:
    c.execute('INSERT INTO whois VALUES (?)', (rid,))
    for name in names:
        c.execute('INSERT INTO whois_names VALUES (?, ?)', (rid, name))
</snippet></ROW><ROW><id>19261306</id><snippet>c.executemany('INSERT INTO whois VALUES (?)', (rid for rid, names in tt))
c.executemany('INSERT INTO whois_names VALUES (?, ?),
              (rid, name for rid, names in tt for name in names))
</snippet></ROW><ROW><id>19261365</id><snippet>import matplotlib.pyplot as plt

txt = '{0:50} {1:.4e}\n'.format('Row1:', 0.1542457) + \
      '{0:50} {1:.4e}\n'.format('Row2:', 0.00145744) + \
      '{0:50} {1:.4e}\n'.format('Long name for this row):', 0.00146655744) + \
      '{0:50} {1}'.format('medium size name):', 'some text')

fig = plt.figure()
ax1 = fig.add_axes((0.1, 0.3, 0.8, 0.65))
ax1.plot(range(10),range(10))
fig.text(0.17, 0.07, txt, family='monospace')
plt.show()
</snippet></ROW><ROW><id>19261402</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base, DeferredReflection

Base = declarative_base(cls=DeferredReflection)


e = create_engine("sqlite://", echo=True)
e.execute("""
    create table "user table" (
            "id col" integer primary key,
            "data col" varchar(30)
    )
""")

from sqlalchemy import event

@event.listens_for(Table, "column_reflect")
def reflect_col(inspector, table, column_info):
    column_info['key'] = column_info['name'].replace(' ', '_')

class User(Base):
    __tablename__ = "user table"

Base.prepare(e)

s = Session(e)
print s.query(User).filter(User.data_col == "some data")
</snippet></ROW><ROW><id>19261449</id><snippet>class User( db.Model, ActiveRecord ):

    __tablename__ = "users"

    #   Schema
    id = db.Column( db.Integer, primary_key = True )
    email = db.Column( db.String( 90 ), unique = True )
    password = db.Column( db.String( 64 ) )

    #   Relations
    roles = db.relationship( "Role", secondary = "UserRole", \
        backref = db.backref( "users" ) )
</snippet></ROW><ROW><id>19261449</id><snippet>secondary</snippet></ROW><ROW><id>19261449</id><snippet>Table</snippet></ROW><ROW><id>19261449</id><snippet>"user_roles"</snippet></ROW><ROW><id>19261449</id><snippet>    roles = db.relationship( "Role", secondary = "user_roles", \
        backref = db.backref( "users" ) )
</snippet></ROW><ROW><id>19261496</id><snippet>mainloop</snippet></ROW><ROW><id>19261702</id><snippet>def something(file1):
    with file1 as f:
        lines = (line.partition(' ') for line in f)
        nums = [int(line[-1]) for line in lines)
        print("Read from File: ", nums)
</snippet></ROW><ROW><id>19261702</id><snippet>partition</snippet></ROW><ROW><id>19261702</id><snippet>int</snippet></ROW><ROW><id>19261702</id><snippet>        nums = [int(line.partition(' ')[-1]) for line in f]
</snippet></ROW><ROW><id>19261702</id><snippet>partition</snippet></ROW><ROW><id>19261702</id><snippet>('Offices', ' ', '10')</snippet></ROW><ROW><id>19261702</id><snippet>[-1]</snippet></ROW><ROW><id>19261702</id><snippet>'10'</snippet></ROW><ROW><id>19261702</id><snippet>int</snippet></ROW><ROW><id>19261766</id><snippet>[sum(x) for x in zip(*C)]
</snippet></ROW><ROW><id>19261766</id><snippet>C</snippet></ROW><ROW><id>19261766</id><snippet>c_1...c_n</snippet></ROW><ROW><id>19261766</id><snippet>*</snippet></ROW><ROW><id>19261875</id><snippet>def the_list():
    try:
        with open('data.txt', 'r') as f:
            data = [line.strip() for line in f]
    except:
        data = []

    for i in data:
        print(i)

    print (' would you like to add')
    a = raw_input()

    if a == 'yes':
        b = input()

        data.append(b)
        print (data)

    with open('data.txt', 'r') as nf:
        nf.write('\n'.join(data))
the_list()
</snippet></ROW><ROW><id>19261950</id><snippet>def footToMeter(foot):
    return foot * .305

print("Feet \t Meters")
for foot in range(1,11):
    print(foot, "\t", footToMeter(foot))
</snippet></ROW><ROW><id>19262015</id><snippet> Coer = line.split("\s+")
</snippet></ROW><ROW><id>19262015</id><snippet>\s</snippet></ROW><ROW><id>19262015</id><snippet>+</snippet></ROW><ROW><id>19262015</id><snippet> import re
 Coer = re.split("\s+",line)
</snippet></ROW><ROW><id>19262152</id><snippet>__dict__</snippet></ROW><ROW><id>19262152</id><snippet>path.os</snippet></ROW><ROW><id>19262152</id><snippet>os.path</snippet></ROW><ROW><id>19262152</id><snippet>os</snippet></ROW><ROW><id>19262152</id><snippet>os</snippet></ROW><ROW><id>19262152</id><snippet>os.path</snippet></ROW><ROW><id>19262152</id><snippet>import foo</snippet></ROW><ROW><id>19262152</id><snippet>foo</snippet></ROW><ROW><id>19262231</id><snippet>sqlite:///C:\\path\\to\\database.db
</snippet></ROW><ROW><id>19262231</id><snippet>root</snippet></ROW><ROW><id>19262231</id><snippet>sqlite:///C:\\Users\\Username\\AppData\\Roaming\\Appname\\mydatabase.db
</snippet></ROW><ROW><id>19262299</id><snippet>spawn "cd .."</snippet></ROW><ROW><id>19262299</id><snippet>spawn "ssh user@localhost"</snippet></ROW><ROW><id>19262299</id><snippet>spawn "./addition.pl"</snippet></ROW><ROW><id>19262299</id><snippet>addition.pl</snippet></ROW><ROW><id>19262299</id><snippet>#!/usr/bin/ruby

print "Enter the number1 :"
inp1 = gets.chomp
print "Enter the number2 :"
inp2 = gets.chomp

puts inp1.to_i + inp2.to_i
</snippet></ROW><ROW><id>19262349</id><snippet>@app.route('/greeting/&lt;name&gt;')
def give_greeting(name):
    return 'Hello, {0}!'.format(name)
</snippet></ROW><ROW><id>19262349</id><snippet>def give_greeting(name):
    return 'Hello, {0}!'.format(name)

app.add_url_rule('/greeting/&lt;name&gt;', 'give_greeting', give_greeting)
</snippet></ROW><ROW><id>19262349</id><snippet>http://www.example.org/greeting/Mark
</snippet></ROW><ROW><id>19262349</id><snippet>/greeting/Mark
</snippet></ROW><ROW><id>19262349</id><snippet>give_greeting</snippet></ROW><ROW><id>19262349</id><snippet>URL (http://www.example.org/greeting/Mark) should be handled by View Function (the function "my_greeting")
</snippet></ROW><ROW><id>19262349</id><snippet>URL (http://www.example.org/greeting/Mark) should be handled by Endpoint "my_greeting".
Requests to Endpoint "my_greeting" should be handled by View Function "my_greeting"
</snippet></ROW><ROW><id>19262349</id><snippet>@app.route('/greeting/&lt;name&gt;', endpoint='say_hello')
def give_greeting(name):
    return 'Hello, {0}!'.format(name)
</snippet></ROW><ROW><id>19262349</id><snippet>URL (http://www.example.org/greeting/Mark) should be handled by Endpoint "say_hello".
Endpoint "say_hello" should be handled by View Function "my_greeting"
</snippet></ROW><ROW><id>19262349</id><snippet>url_for()</snippet></ROW><ROW><id>19262349</id><snippet>@app.route('/')
def index():
    print url_for('give_greeting', name='Mark') # This will print '/greeting/Mark'

@app.route('/greeting/&lt;name&gt;')
def give_greeting(name):
    return 'Hello, {0}!'.format(name)
</snippet></ROW><ROW><id>19262349</id><snippet>from flask import Flask, Blueprint
from admin import admin
from user import user

app = Flask(__name__)
app.register_blueprint(admin, url_prefix='admin')
app.register_blueprint(user, url_prefix='user')
</snippet></ROW><ROW><id>19262349</id><snippet>admin = Blueprint('admin', __name__)

@admin.route('/greeting')
def greeting():
    return 'Hello, administrative user!'
</snippet></ROW><ROW><id>19262349</id><snippet>user = Blueprint('user', __name__)
@user.route('/greeting')
def greeting():
    return 'Hello, lowly normal user!'
</snippet></ROW><ROW><id>19262349</id><snippet>print url_for('admin.greeting') # Prints '/admin/greeting'
print url_for('user.greeting') # Prints '/user/greeting'
</snippet></ROW><ROW><id>19262409</id><snippet>    if pixels[x, y] == (0, 0, 0, 255):  #black with alpha of 255
        pixels[x, y] = (0, 0, 0, 255)   #black with alpha of 255
    else:
        pixels[x, y] = (255, 255, 255, 0) #white with alpha of 255
</snippet></ROW><ROW><id>19262409</id><snippet>if pixels[x,y] == (255,255,255,255):
    pixels[x,y] = (pixels[x,y][0], pixels[x,y][1], pixels[x,y][2], 0)  #just set this pixel's alpha channel to 0
</snippet></ROW><ROW><id>19262409</id><snippet>import Image

image_two = Image.open ("image_two.png")
image_two = image_two.convert ("RGBA")

pixels = image_two.load()

for y in xrange (image_two.size[1]):
    for x in xrange (image_two.size[0]):
        if pixels[x, y][3] == 255:
            pixels[x, y] = (255, 0, 0, 255)
        else:
            pixels[x, y] = (255, 255, 255, 255)

image_two.save("image_two2.png")
</snippet></ROW><ROW><id>19262740</id><snippet>number = raw_input("Enter numbers separated by spaces: ")
2   num_list = number.split()
3   for n in num_list:
4       a = 'True'
5       if int(n) &lt;0 or int(n) &gt;5:
6           a = 'False'
7           break       
8   if (len(num_list) == 5) and a == 'True':
9       for n in num_list:
10          b = int(n)
11          if 0&lt; b &lt;=5:
12              print ('x'* b)
13          elif b == 0:
14              print ('.')
15  else:
16      print 'Invalid Input!'
</snippet></ROW><ROW><id>19262756</id><snippet>fileref = open("H:\CloudandBigData\finalproj\BeautifulSoup\twitter.txt","r")
</snippet></ROW><ROW><id>19262756</id><snippet>fileref = open(r"H:\CloudandBigData\finalproj\BeautifulSoup\twitter.txt","r")
</snippet></ROW><ROW><id>19262756</id><snippet>r""</snippet></ROW><ROW><id>19262756</id><snippet>"\t"</snippet></ROW><ROW><id>19262756</id><snippet>fileref = open("H:\\CloudandBigData\\finalproj\\BeautifulSoup\\twitter.txt","r")
</snippet></ROW><ROW><id>19262756</id><snippet>"\\" =&gt; \</snippet></ROW><ROW><id>19262756</id><snippet>os</snippet></ROW><ROW><id>19262756</id><snippet>import os
filepath = os.path.join('H:', 'CloudandBigData', 'finalproj', 'BeautifulSoup', 'twitter.txt')
fileref = open(filepath, 'r')
</snippet></ROW><ROW><id>19262756</id><snippet>with</snippet></ROW><ROW><id>19262964</id><snippet>QTextCursor.WordUnderCursor</snippet></ROW><ROW><id>19262964</id><snippet>QTextCursor.setPostition()</snippet></ROW><ROW><id>19263093</id><snippet>request.user.username</snippet></ROW><ROW><id>19263093</id><snippet>unicode(self)</snippet></ROW><ROW><id>19263093</id><snippet>call_command(
    'import_blogger_hs',
    mezzanine_user=request.user.username.decode('utf-8'),
    blog_id=blog_id)
</snippet></ROW><ROW><id>19263231</id><snippet>int(time.time())</snippet></ROW><ROW><id>19263231</id><snippet>setnx</snippet></ROW><ROW><id>19263571</id><snippet>def isalphabyte(c):
   return ((c&gt;96 and c&lt;123) or (c&gt; 64 and c&lt;91))
a=bytearray(b"azAZ 123")
isalphabyte(a[0])
20: True
isalphabyte(a[4]) 
False

&gt;&gt;&gt; timeit.timeit('for i in range(1000000): chr(b"abc"[0]).isalpha()',number=1)
36: 0.31040439769414263
&gt;&gt;&gt; timeit.timeit('for i in range(1000000): isalphabyte(b"abc"[0])',"from __main__ import isalphabyte",number=1)
37: 0.22895044913212814

&gt;&gt;&gt; cProfile.run('for i in range(1000000): chr(b"abc"[0]).isalpha()')
         2000003 function calls in 0.571 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.364    0.364    0.571    0.571 &lt;string&gt;:1(&lt;module&gt;)
  1000000    0.156    0.000    0.156    0.000 {built-in method chr}
        1    0.000    0.000    0.571    0.571 {built-in method exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
  1000000    0.051    0.000    0.051    0.000 {method 'isalpha' of 'str' objects}


&gt;&gt;&gt; cProfile.run('for i in range(1000000): isalphabyte(b"abc"[0])')
         1000003 function calls in 0.335 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  1000000    0.133    0.000    0.133    0.000 &lt;pyshell#74&gt;:1(isalphabyte)
        1    0.202    0.202    0.335    0.335 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.335    0.335 {built-in method exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>19263613</id><snippet>charset</snippet></ROW><ROW><id>19263613</id><snippet>self.conn = MySQLdb.connect(db='crawlDB', user='root', passwd='......', charset='utf8')
</snippet></ROW><ROW><id>19263613</id><snippet>self.cursor.execute("UPDATE urls SET state=%d,content='%s' WHERE url='%s'"%(state,content,url))
</snippet></ROW><ROW><id>19263613</id><snippet>self.cursor.execute("UPDATE urls SET state=%s, content=%s WHERE url=%s", (state,content,url))
</snippet></ROW><ROW><id>19263613</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; db = MySQLdb.connect('localhost', db='test', charset='utf8')
&gt;&gt;&gt; cursor = db.cursor()
&gt;&gt;&gt; cursor.execute('DROP TABLE IF EXISTS urls')
0L
&gt;&gt;&gt; cursor.execute('CREATE TABLE urls(url char(200), state int, content text)')
0L
&gt;&gt;&gt; cursor.execute('INSERT INTO urls(url, state, content) VALUES(%s, %s, %s)', ('http://daum.net/', 1, u'\uc548\ub155'))
1L
&gt;&gt;&gt; cursor.execute('SELECT * FROM urls')
1L
&gt;&gt;&gt; for row in cursor.fetchall():
...     print row
...
(u'http://daum.net/', 1L, u'\uc548\ub155')
</snippet></ROW><ROW><id>19263623</id><snippet>zip([iterable, ...])</snippet></ROW><ROW><id>19263623</id><snippet>&gt;&gt;&gt; zip(zip(*list1)[0], list2, list3)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>19263623</id><snippet>&gt;&gt;&gt; result = [['row1','row2','row3']] + zip(zip(*list1)[0], list2, list3)
&gt;&gt;&gt; with open('file.csv', 'wb') as fin:
    writer = csv.writer(fin, delimiter = '\t')
    writer.writerows(result)

row1    row2    row3
1   4   7
2   5   8
3   6   9
</snippet></ROW><ROW><id>19263623</id><snippet>str.format</snippet></ROW><ROW><id>19263623</id><snippet>&gt;&gt;&gt; header = ['row1','row2','row3']
&gt;&gt;&gt; result = zip(zip(*list1)[0], list2, list3)
&gt;&gt;&gt; format_string = "{:&lt;10}{:&lt;10}{:&lt;10}"
&gt;&gt;&gt; with open('file.csv', 'wb') as fin:
    fin.write(format_string.format(*header))
    fin.write('\n')
    for row in result:
        fin.write(format_string.format(*row))
        fin.write('\n')


row1      row2      row3      
1         4         7         
2         5         8         
3         6         9     
</snippet></ROW><ROW><id>19264041</id><snippet>grid</snippet></ROW><ROW><id>19264041</id><snippet>TestEntry = Entry(..).grid(...)</snippet></ROW><ROW><id>19264041</id><snippet>None</snippet></ROW><ROW><id>19264041</id><snippet>Entry</snippet></ROW><ROW><id>19264041</id><snippet>TestEntry = Entry(self, text="", width = 100).grid(row=4,columnspan=6)
</snippet></ROW><ROW><id>19264041</id><snippet>TestEntry = Entry(self, text="", width = 100)
TestEntry.grid(row=4,columnspan=6)
</snippet></ROW><ROW><id>19264041</id><snippet>from Tkinter import *

def CreateTest():
    def saveTest():
        SaveTestButton.grid_remove()    
        TestEntry.grid_remove() #ERROR 
    TestEntry = Entry(master, text="", width = 100)
    TestEntry.grid(row=4,columnspan=6)
    Label(master, text="Enter Test Name:").grid(row=3, column=0)
    SaveTestButton = Button(master, text="Save to database", command=saveTest, fg="green", bg="white",    font="Helvetica 10 bold")
    SaveTestButton.grid(row=4, column=5)

master = Tk()
CreateTestButton = Button(master, text="Create Test", command = CreateTest, fg="red", bg="white",     font="Helvetica 10 bold")
CreateTestButton.grid(column=7, row=1)
mainloop()
</snippet></ROW><ROW><id>19264299</id><snippet>def my_function():
    '''
    docstring
    '''
code_intended_for_my_function()

#my_function()
</snippet></ROW><ROW><id>19264299</id><snippet>code_intended_for_my_function</snippet></ROW><ROW><id>19264299</id><snippet>docstring</snippet></ROW><ROW><id>19264299</id><snippet>my_fuction</snippet></ROW><ROW><id>19264299</id><snippet>code_intended_for_my_function</snippet></ROW><ROW><id>19264299</id><snippet>docstring</snippet></ROW><ROW><id>19264299</id><snippet>IndentationError</snippet></ROW><ROW><id>19264457</id><snippet>received_time</snippet></ROW><ROW><id>19264457</id><snippet>.order(-Report.received_time)
</snippet></ROW><ROW><id>19264484</id><snippet>addWidget</snippet></ROW><ROW><id>19264484</id><snippet>self.update()</snippet></ROW><ROW><id>19264484</id><snippet>self.widgets[-1].show()
</snippet></ROW><ROW><id>19264484</id><snippet>show</snippet></ROW><ROW><id>19264562</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>19264562</id><snippet>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; count_dict = dict.fromkeys(range(0,n+1))
&gt;&gt;&gt; count_dict
{0: None, 1: None, 2: None, 3: None}
</snippet></ROW><ROW><id>19264562</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>19264562</id><snippet>&gt;&gt;&gt; count_dict = dict.fromkeys(range(0,n+1), [])
&gt;&gt;&gt; count_dict
{0: [], 1: [], 2: [], 3: []}
&gt;&gt;&gt; count_dict[0] is count_dict[1]
True
</snippet></ROW><ROW><id>19264562</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19264562</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; count_dict = defaultdict(list)
&gt;&gt;&gt; count_dict[0].append('000')
&gt;&gt;&gt; count_dict[1].append('001')
&gt;&gt;&gt; count_dict[1].append('010')
&gt;&gt;&gt; count_dict
defaultdict(&lt;type 'list'&gt;, {0: ['000'], 1: ['001', '010']})
</snippet></ROW><ROW><id>19264580</id><snippet>K = scip.exp(YOUR_DISTANCE_HERE / s**2)
</snippet></ROW><ROW><id>19264685</id><snippet>django.contrib.auth.models.AbstractBaseUser</snippet></ROW><ROW><id>19264685</id><snippet>django.contrib.auth.models.AbstractUser</snippet></ROW><ROW><id>19264685</id><snippet>User</snippet></ROW><ROW><id>19264707</id><snippet>value</snippet></ROW><ROW><id>19264707</id><snippet>&gt;&gt;&gt; type(value)
&lt;type 'str'&gt;

&gt;&gt;&gt; v = value.decode('utf-8')
&gt;&gt;&gt; type(v)
&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>19264707</id><snippet>value</snippet></ROW><ROW><id>19264707</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>19264707</id><snippet>encode</snippet></ROW><ROW><id>19264707</id><snippet>try:
    value = value.encode('utf-8')
except UnicodeDecodeError:
    print('It is already a UTF-8 encoded string')
else:
    print('It may have been a UTF-8 encoded string')
</snippet></ROW><ROW><id>19264846</id><snippet>"C:\Program Files (x86)\Ixia\IxOS\6.40-EA\TclScripts\bin\wish84.exe" "C:\Program Files (x86)\Ixia\IxOS\6.40-EA\TclScripts\bin\IxiaWish.tcl"
</snippet></ROW><ROW><id>19264846</id><snippet>subprocess</snippet></ROW><ROW><id>19264846</id><snippet>import subprocess
command = [
    r'C:\Program Files (x86)\Ixia\IxOS\6.40-EA\TclScripts\bin\wish84.exe',
    r'C:\Program Files (x86)\Ixia\IxOS\6.40-EA\TclScripts\bin\IxiaWish.tcl'
]
p = subprocess.Popen(commands, 
        shell=True, 
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE)
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>19264909</id><snippet>for line in f.readlines():
    line = line.strip()
</snippet></ROW><ROW><id>19264909</id><snippet>readlines()</snippet></ROW><ROW><id>19264909</id><snippet>\n</snippet></ROW><ROW><id>19264909</id><snippet>url</snippet></ROW><ROW><id>19264909</id><snippet>url = line+"?page=%d" % i</snippet></ROW><ROW><id>19264909</id><snippet>while</snippet></ROW><ROW><id>19264909</id><snippet>has_more</snippet></ROW><ROW><id>19264909</id><snippet>from bs4 import BeautifulSoup
import urllib
import urlparse

f = open("downloadray2.txt")
g = open("downloadray3.txt", "w")

for line in f.readlines():
    line = line.strip()
    i = 1
    prev_urls = []
    while 1:
        url = line+"?page=%d" % i
        print 'Examining %s' % url
        pageHtml = urllib.urlopen(url)
        soup = BeautifulSoup(pageHtml)

        list_of_urls = soup.select("div.n_head2 a[href]")
        if set(prev_urls)==set(list_of_urls):
            break
        else:
            for a in soup.select("div.n_head2 a[href]"):
                print (a["href"])
                g.write(a["href"]+"\n")
            i += 1
            prev_urls = list_of_urls
</snippet></ROW><ROW><id>19265260</id><snippet>Pipeline</snippet></ROW><ROW><id>19265260</id><snippet>PCA</snippet></ROW><ROW><id>19265260</id><snippet>OptionalPCA</snippet></ROW><ROW><id>19265260</id><snippet>GridSearchCV</snippet></ROW><ROW><id>19265283</id><snippet>isdigit()</snippet></ROW><ROW><id>19265556</id><snippet>LoginController</snippet></ROW><ROW><id>19265556</id><snippet>LoginController</snippet></ROW><ROW><id>19265556</id><snippet>Login_Controller</snippet></ROW><ROW><id>19265760</id><snippet>from Tkinter import * # Python 3.x: from tkinter import *

def hello(e=None):
    print('Hello')

root = Tk()
Button(root, text='say hello', command=hello).pack()
root.bind('&lt;Escape&gt;', lambda e: root.quit())
root.bind('h', hello)
root.mainloop()
</snippet></ROW><ROW><id>19265797</id><snippet>class CModel(models.Model):
    _related_model = None

   def all_obj(self):
       if self._related_model is None:
           # you could also return None or an EmptyQueryset or whatever
           raise NotImplementedError("CModel subclasses must define '_related_model'")

       # you don't need the `.all()` after a `.filter()`
       return self._related_model.objects.filter(model__model__pk=self.pk)

   # your code here

class Model1(CModel):
    # note that you'll have to define Model_1_A_B before 
    _related_model = Model_1_A_B

    # etc

class Model2(CModel):
    # note that you'll have to define Model_2_A_B before 
    _related_model = Model_2_A_B

    # etc
</snippet></ROW><ROW><id>19265836</id><snippet>listofStds</snippet></ROW><ROW><id>19265836</id><snippet>student</snippet></ROW><ROW><id>19265836</id><snippet>mark</snippet></ROW><ROW><id>19265836</id><snippet>students</snippet></ROW><ROW><id>19265836</id><snippet>listofStds = [std1, std2, std3, std4, std5]
</snippet></ROW><ROW><id>19266019</id><snippet>{}</snippet></ROW><ROW><id>19266019</id><snippet>OrderedDict(query=...)</snippet></ROW><ROW><id>19266019</id><snippet>x = OrderedDict()
x['query'] = OrderedDict()
...
</snippet></ROW><ROW><id>19266019</id><snippet>x = Query().filtered().query_string("*a*").and()....
</snippet></ROW><ROW><id>19266054</id><snippet>scenes</snippet></ROW><ROW><id>19266054</id><snippet>enter()</snippet></ROW><ROW><id>19266054</id><snippet>class Engine(object):

    def __init__(self, scene_map):
        self.scene_map = scene_map

    def play(self):
        current_scene = self.scene_map.opening_scene()

        while True:
            print "\n--------"
            next_scene_name = current_scene.enter()  # returns next scene key
            current_scene = self.scene_map.next_scene(next_scene_name)  # initiates next scene and sets it as `current_scene`
</snippet></ROW><ROW><id>19266054</id><snippet>CentralCorridor</snippet></ROW><ROW><id>19266054</id><snippet>def enter(self):
    print "The Gothons of Planet Percal #25 have invaded your ship and destroyed"
    ...
    print "flowing around his hate filled body.  He's blocking the door to the"
    print "Armory and about to pull a weapon to blast you."

    action = raw_input("&gt; ")

    if action == "shoot!":
        print "Quick on the draw you yank out your blaster and fire it at the Gothon."
        ...
        print "you are dead.  Then he eats you."
        return 'death'  # next scene `Death`

    elif action == "dodge!":
        print "Like a world class boxer you dodge, weave, slip and slide right"
        ...
        print "your head and eats you."
        return 'death'  # next scene `Death`

    elif action == "tell a joke":
        print "Lucky for you they made you learn Gothon insults in the academy."
        ...
        return 'laser_weapon_armory'  # next scene `LaserWeaponArmory`

    else:
        print "DOES NOT COMPUTE!"
        return 'central_corridor'  # next scene `CentralCorridor`
</snippet></ROW><ROW><id>19266054</id><snippet>enter()</snippet></ROW><ROW><id>19266054</id><snippet>def enter(self):
    print Death.quips[randint(0, len(self.quips)-1)]
    exit(1)
</snippet></ROW><ROW><id>19266105</id><snippet>df['num_totals'] = df.groupby('ID').transform('count')
</snippet></ROW><ROW><id>19266584</id><snippet>getattr</snippet></ROW><ROW><id>19266584</id><snippet>getattr(pb, Input)()
</snippet></ROW><ROW><id>19266584</id><snippet>getattr</snippet></ROW><ROW><id>19266584</id><snippet>()</snippet></ROW><ROW><id>19266584</id><snippet>"name added"</snippet></ROW><ROW><id>19266824</id><snippet>%cstring_mutable</snippet></ROW><ROW><id>19266824</id><snippet>%include &lt;cstring.i&gt;
%cstring_mutable(char *ustr);
...
void make_upper(char *ustr);
</snippet></ROW><ROW><id>19266824</id><snippet>&gt;&gt;&gt; make_upper("hello world")
'HELLO WORLD'
</snippet></ROW><ROW><id>19266824</id><snippet>char *ustr</snippet></ROW><ROW><id>19266824</id><snippet>expansion</snippet></ROW><ROW><id>19267132</id><snippet>af</snippet></ROW><ROW><id>19267132</id><snippet>def aj(a, b=None):
    if b is not None:
        result = a + b
    else:
        result = a * a
    print result
    return result
</snippet></ROW><ROW><id>19267132</id><snippet>numtimes</snippet></ROW><ROW><id>19267132</id><snippet>def foo(action, numtimes=1):
    # whatever
</snippet></ROW><ROW><id>19267281</id><snippet>X[sample] = 1 - X[sample]</snippet></ROW><ROW><id>19267281</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; X = np.array([1, 1, 0, 1, 1])
&gt;&gt;&gt; sample = [1,2,3]
&gt;&gt;&gt; X[sample]
array([1, 0, 1])
&gt;&gt;&gt; X[sample] = 1 - X[sample]
&gt;&gt;&gt; X
array([1, 0, 1, 0, 1])
</snippet></ROW><ROW><id>19267613</id><snippet>&gt;&gt;&gt; A_dict = {0: 'r', 1: 's', 2: 's', 3: 'r', 4: 'm', 5: 'm', 6: 'a', 7: 'k'}
&gt;&gt;&gt; base_dict = {0: 'k', 1: 'm', 2: 'm', 3: 's', 4: 'a', 5: 's', 6: 'r', 7: 'r'}
&gt;&gt;&gt;
&gt;&gt;&gt; d = sorted(base_dict)
&gt;&gt;&gt; used = set()
&gt;&gt;&gt; for key, value in sorted(A_dict.items()):
...     key2 = next((k for k in d if base_dict[k] == value and k not in used))
...     used.add(key2)
...     print('{} -&gt; {}'.format(key, key2))
...
0 -&gt; 6
1 -&gt; 3
2 -&gt; 5
3 -&gt; 7
4 -&gt; 1
5 -&gt; 2
6 -&gt; 4
7 -&gt; 0
</snippet></ROW><ROW><id>19267613</id><snippet>sorted</snippet></ROW><ROW><id>19267948</id><snippet>args</snippet></ROW><ROW><id>19267948</id><snippet>threading.Thread(target=message, args=(text)).start()
</snippet></ROW><ROW><id>19267948</id><snippet>threading.Thread(target=message, args=(text,)).start()
</snippet></ROW><ROW><id>19267948</id><snippet>&gt;&gt;&gt; ('foo')
'foo'
&gt;&gt;&gt; 'foo',
('foo',)
</snippet></ROW><ROW><id>19267948</id><snippet>message()</snippet></ROW><ROW><id>19267994</id><snippet>import socket
server = socket.socket() 
server.bind(("10.0.0.1",6677)) 
server.listen(4) 
client_socket, client_address = server.accept()
print(client_address, has connected)
while 1==1:
    recvieved_data = s.recv(1024)
    print(recvieved_data)
</snippet></ROW><ROW><id>19267994</id><snippet>cmd</snippet></ROW><ROW><id>19267994</id><snippet>ping www.google.com</snippet></ROW><ROW><id>19267994</id><snippet>192.168.1.50</snippet></ROW><ROW><id>19267994</id><snippet>83.55.102.40</snippet></ROW><ROW><id>19267994</id><snippet>83.55.102.40</snippet></ROW><ROW><id>19267994</id><snippet>192.168.1.50</snippet></ROW><ROW><id>19267994</id><snippet>6677</snippet></ROW><ROW><id>19267994</id><snippet>192.168.1.50</snippet></ROW><ROW><id>19268393</id><snippet>range()</snippet></ROW><ROW><id>19268393</id><snippet>def RangeTest(n):
    return list(range(n))
</snippet></ROW><ROW><id>19268393</id><snippet>range()</snippet></ROW><ROW><id>19268393</id><snippet>xrange()</snippet></ROW><ROW><id>19268393</id><snippet>list</snippet></ROW><ROW><id>19268393</id><snippet>list()</snippet></ROW><ROW><id>19268498</id><snippet> def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        task.LoopingCall(lambda : (self.msg(counterpartID, "hi there"))).start(5.0)
</snippet></ROW><ROW><id>19268737</id><snippet>lines = p.readlines()</snippet></ROW><ROW><id>19268737</id><snippet>os.popen</snippet></ROW><ROW><id>19268737</id><snippet>"".join(lines)</snippet></ROW><ROW><id>19268737</id><snippet>""</snippet></ROW><ROW><id>19268737</id><snippet>strip</snippet></ROW><ROW><id>19268737</id><snippet>"\n".join([l.strip() for l in lines])</snippet></ROW><ROW><id>19268737</id><snippet>a</snippet></ROW><ROW><id>19268737</id><snippet>grabc</snippet></ROW><ROW><id>19268737</id><snippet>subprocess</snippet></ROW><ROW><id>19268737</id><snippet>grabc &gt; some_file</snippet></ROW><ROW><id>19268737</id><snippet>h = "#a7bd7a"
t = 167,189,122
"#%02x%02x%02x" % t                              # color tuple to hex string
[int(h[i:i+2], 16) for i in range(1, len(h), 2)] # hex string to color tuple
</snippet></ROW><ROW><id>19268738</id><snippet>http://my.host/some/path?foo=1&amp;bar=2
</snippet></ROW><ROW><id>19268738</id><snippet>&amp;</snippet></ROW><ROW><id>19268738</id><snippet>,</snippet></ROW><ROW><id>19268738</id><snippet>response.read()</snippet></ROW><ROW><id>19268738</id><snippet>$ wget -O - 'http://my.host/some/path?foo=1&amp;bar=2'
...
$ curl -v 'http://my.host/some/path?foo=1&amp;bar=2'
... 
$
</snippet></ROW><ROW><id>19268738</id><snippet>$_POST</snippet></ROW><ROW><id>19268738</id><snippet>&lt;? ... &gt;</snippet></ROW><ROW><id>19268738</id><snippet>vous devez renseigner tous les champs
&lt;html&gt;
    &lt;form method='GET' action='#'&gt;
    &lt;/form&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19268818</id><snippet>C:\imagaginary_path\</snippet></ROW><ROW><id>19268818</id><snippet>python2.bat</snippet></ROW><ROW><id>19268818</id><snippet>C:\Python26\python.exe %*
</snippet></ROW><ROW><id>19268818</id><snippet>C:\imagaginary_path\</snippet></ROW><ROW><id>19268818</id><snippet>python3.bat</snippet></ROW><ROW><id>19268818</id><snippet>C:\Python33\python.exe %*
</snippet></ROW><ROW><id>19268818</id><snippet>C:\Python26\</snippet></ROW><ROW><id>19268818</id><snippet>C:\Python33\</snippet></ROW><ROW><id>19268818</id><snippet>PATH</snippet></ROW><ROW><id>19268818</id><snippet>C:\imaginary_path\</snippet></ROW><ROW><id>19268818</id><snippet>PATH</snippet></ROW><ROW><id>19268818</id><snippet>python2 test.py</snippet></ROW><ROW><id>19268818</id><snippet>start C:\Python26\python.exe %*
</snippet></ROW><ROW><id>19268939</id><snippet>from PIL import Image
img0 = Image.open(img/test.png);
blank_image = Image.open("images/map_blank.png")
blank_image.paste(img0, (0,0))
blank_image.save("result.png")
</snippet></ROW><ROW><id>19269304</id><snippet>scipy.signal.deconvolve()</snippet></ROW><ROW><id>19269768</id><snippet>&gt;&gt;&gt; x = np.array([1,2,3,4,5])
&gt;&gt;&gt; y = np.array([10,20,30,40,50])
&gt;&gt;&gt; z = np.linspace(0, 1, 5)
&gt;&gt;&gt; z[None, ...] * (y[..., None] - x[..., None]) + ( x[..., None])
array([[  1.  ,   3.25,   5.5 ,   7.75,  10.  ],
       [  2.  ,   6.5 ,  11.  ,  15.5 ,  20.  ],
       [  3.  ,   9.75,  16.5 ,  23.25,  30.  ],
       [  4.  ,  13.  ,  22.  ,  31.  ,  40.  ],
       [  5.  ,  16.25,  27.5 ,  38.75,  50.  ]])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19269776</id><snippet>Out[49]:
                    0         1         2       3         4       5
0 2013-09-16 09:30:00  461.0100  461.4900  461.00  461.0000  183507
1 2013-09-16 09:31:00  460.8200  461.6099  460.39  461.0700  212774
2 2013-09-16 09:33:00  460.0799  460.8800  458.97  459.2401  207880
3 2013-09-16 09:34:00  458.9700  460.0800  458.80  460.0400  148121
</snippet></ROW><ROW><id>19269776</id><snippet>df1 = df.set_index(keys=[0]).resample('1min', fill_method='ffill')
df1

Out[52]:
                            1         2       3         4       5
0                                                                
2013-09-16 09:30:00  461.0100  461.4900  461.00  461.0000  183507
2013-09-16 09:31:00  460.8200  461.6099  460.39  461.0700  212774
2013-09-16 09:32:00  460.8200  461.6099  460.39  461.0700  212774
2013-09-16 09:33:00  460.0799  460.8800  458.97  459.2401  207880
2013-09-16 09:34:00  458.9700  460.0800  458.80  460.0400  148121
</snippet></ROW><ROW><id>19269776</id><snippet>2013-09-17 09:30:00,448,448,447.5,447.96,173624
2013-09-17 09:33:00,451.39,451.96,450.58,450.7061,197019
</snippet></ROW><ROW><id>19269776</id><snippet>Out[55]:
                          1       2       3         4       5
0                                                            
2013-09-17 09:30:00  448.00  448.00  447.50  447.9600  173624
2013-09-17 09:31:00  448.00  448.00  447.50  447.9600  173624
2013-09-17 09:32:00  448.00  448.00  447.50  447.9600  173624
2013-09-17 09:33:00  451.39  451.96  450.58  450.7061  197019
</snippet></ROW><ROW><id>19269776</id><snippet>drop=False</snippet></ROW><ROW><id>19269776</id><snippet>set_index</snippet></ROW><ROW><id>19269842</id><snippet>r = redis.Redis(host=redisHost, port=redisPort, db=N)
</snippet></ROW><ROW><id>19270026</id><snippet>copy</snippet></ROW><ROW><id>19270026</id><snippet>copy</snippet></ROW><ROW><id>19270026</id><snippet>copy.py</snippet></ROW><ROW><id>19270026</id><snippet>copy.pyc</snippet></ROW><ROW><id>19270026</id><snippet>__file__</snippet></ROW><ROW><id>19270026</id><snippet>import copy
print copy.__file__
</snippet></ROW><ROW><id>19270027</id><snippet>import module

old_divide = module._divide

def new_divide(var):
    if var == 0:
        var = 1e-131
    return old_divide(var)

module._divide = new_divide
</snippet></ROW><ROW><id>19270027</id><snippet>run_program</snippet></ROW><ROW><id>19270027</id><snippet>_divide</snippet></ROW><ROW><id>19270027</id><snippet>run_program</snippet></ROW><ROW><id>19270709</id><snippet>    [decode]     [encode]
ASCII ---&gt; UNICODE ---&gt; UTF-8
1 Glyph                 1 Glyph 
  =        1 Glyph        =
1 Byte                  1-4 Bytes
</snippet></ROW><ROW><id>19270709</id><snippet>   unicode_str = mystring.decode('ascii')
   utf8_str = unicode_str.encode('utf-8')
</snippet></ROW><ROW><id>19270709</id><snippet>post</snippet></ROW><ROW><id>19270709</id><snippet>import sys
print sys.getdefaultencoding()
</snippet></ROW><ROW><id>19270709</id><snippet>post</snippet></ROW><ROW><id>19270755</id><snippet>function_table = { u'pmcTRIANG': np.random.triangular }

result = { input[1]: function_table[input[0]](*map(float, input[2:])) }
</snippet></ROW><ROW><id>19271110</id><snippet>C = (A, B)
</snippet></ROW><ROW><id>19271182</id><snippet>&lt;record id="action2" model="ir.actions.act_window"&gt;
        &lt;field name="name"&gt;Subordinate Hierarchy&lt;/field&gt;
        &lt;field name="type"&gt;ir.actions.act_window&lt;/field&gt;
        &lt;field name="res_model"&gt;hr.employee&lt;/field&gt;
        &lt;field name="domain"&gt;[('id','in',active_ids)]&lt;/field&gt;
        &lt;field name="view_type"&gt;tree&lt;/field&gt;
&lt;/record&gt;

    &lt;record model="ir.actions.act_window.view" id="action_action2_tree2"&gt;
        &lt;field name="sequence" eval="1"/&gt;
        &lt;field name="view_mode"&gt;tree&lt;/field&gt;
        &lt;field name="view_id" ref="view_partner_tree2"/&gt;
        &lt;field name="act_window_id" ref="action2"/&gt;
    &lt;/record&gt;
    &lt;record model="ir.actions.act_window.view" id="action_action2_tree1"&gt;
        &lt;field name="sequence" eval="2"/&gt;
        &lt;field name="view_mode"&gt;tree&lt;/field&gt;
        &lt;field name="view_id" ref="view_employee_tree"/&gt;
        &lt;field name="act_window_id" ref="action2"/&gt;
    &lt;/record&gt;
</snippet></ROW><ROW><id>19271188</id><snippet>--fake</snippet></ROW><ROW><id>19271188</id><snippet>migrate</snippet></ROW><ROW><id>19271345</id><snippet>for item in list:
    print item[u'text'].encode('utf-8')
</snippet></ROW><ROW><id>19271601</id><snippet>PS C:\&gt; python -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 ...

Keyboard interrupt received, exiting.
</snippet></ROW><ROW><id>19271773</id><snippet>a =int( sys.argv[1])
</snippet></ROW><ROW><id>19271773</id><snippet>a sf df sf
</snippet></ROW><ROW><id>19271773</id><snippet>if sys.argv[1].isdigit():
    a = int(sys.argv[1])
else:
    print "First argument is not a digit"
    sys.exit(1)
</snippet></ROW><ROW><id>19271773</id><snippet>try:
   a = int(sys.argv[1])
except ValueError:
   print "Stupid user, please enter a number"
   sys.exit(1)
</snippet></ROW><ROW><id>19271841</id><snippet>In [32]: df.groupby('a')['a'].transform('count')
Out[32]: 
0     4
1     4
2     4
3     4
4     2
5     2
6     3
7     3
8     3
9     7
10    7
11    7
12    7
13    7
14    7
15    7
Name: a, dtype: int64
</snippet></ROW><ROW><id>19271841</id><snippet>In [33]: df.groupby('a').transform('count')
Out[33]: 
Empty DataFrame
Columns: []
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</snippet></ROW><ROW><id>19271841</id><snippet>In [42]: df2.groupby('a').transform('count')
Out[42]: 
    b
0   4
1   4
2   4
3   4
4   2
5   2
6   3
7   3
8   3
9   7
10  7
11  7
12  7
13  7
14  7
15  7

In [43]: type(df2.groupby('a').transform('count'))
Out[43]: pandas.core.frame.DataFrame

Or a series

In [45]: df2.groupby('a')['a'].transform('count')
Out[45]: 
0     4
1     4
2     4
3     4
4     2
5     2
6     3
7     3
8     3
9     7
10    7
11    7
12    7
13    7
14    7
15    7
Name: a, dtype: int64

In [46]: type(df.groupby('a')['a'].transform('count'))
Out[46]: pandas.core.series.Series
</snippet></ROW><ROW><id>19271897</id><snippet>In [1]: from PIL import Image, ImageChops

In [3]: im = Image.open('iI3ZE.jpg')

In [4]: def trim(im):
   ...:         bg = Image.new(im.mode, im.size, im.getpixel((0,0)))
   ...:         diff = ImageChops.difference(im, bg)
   ...:         diff = ImageChops.add(diff, diff, 2.0, -100)
   ...:         bbox = diff.getbbox()
   ...:         if bbox:
   ...:                 return im.crop(bbox)
   ...:

In [5]: trim(im).show()
</snippet></ROW><ROW><id>19271897</id><snippet>pip install pillow
</snippet></ROW><ROW><id>19271982</id><snippet>for i in xrange(1,101):
   name = 'folder_%03d' % (i)
   if not os.path.exists(name): 
      os.mkdir(name)
</snippet></ROW><ROW><id>19272316</id><snippet>IPTCFormSet = modelformset_factory(IPTCForm)
formset = IPTCFormSet(queryset=IPTC.objects.all())
</snippet></ROW><ROW><id>19272338</id><snippet>'bbox_inches='tight'</snippet></ROW><ROW><id>19272338</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_axes([1,1,1,1])
plt.plot([1,2])

savefig('test.png', bbox_inches='tight')
</snippet></ROW><ROW><id>19272866</id><snippet>ImageStatistics.getStatistics()</snippet></ROW><ROW><id>19272866</id><snippet>pixelCount</snippet></ROW><ROW><id>19272866</id><snippet>import math

row = 0

IJ.run("Set Measurements...", "area centroid perimeter shape feret's area_fraction   redirect=None decimal=6")
IJ.run("Analyze Particles...")
rt = ResultsTable.getResultsTable()

imp = IJ.getImage()
ip = imp.getProcessor()

for roi in RoiManager.getInstance().getRoisAsArray():
  a = rt.getValue("Feret", row)
  b = rt.getValue("MinFeret", row)
  nu= 1
  L = 1
  p = 1
  sapf = (math.pi/4) * (1/(nu*L)) * math.pow(a, 3) * math.pow(b, 3) / (math.pow(a, 2) + math.pow(a, 2))*p
  rt.setValue("ROI no.", row, row + 1)
  rt.setValue("Sapflow", row, sapf)

  ip.setRoi(roi)
  stats = ImageStatistics.getStatistics(ip, Measurements.AREA, None)
  rt.setValue("Pixel count", row, stats.pixelCount)

  row = row + 1
rt.show("Results")
</snippet></ROW><ROW><id>19272945</id><snippet>var_class</snippet></ROW><ROW><id>19272945</id><snippet>zz</snippet></ROW><ROW><id>19272945</id><snippet>A(10)</snippet></ROW><ROW><id>19272945</id><snippet>class A(object):
    def __init__(self, x):
        self.x = x+2

zz = A(10)

class B():
    b = 0    
    def __init__(self):
        pass
    def update(self, zz):
        B.b = zz.x
</snippet></ROW><ROW><id>19273069</id><snippet>object_pk</snippet></ROW><ROW><id>19273069</id><snippet>active_videos_ids = Video.objects.filter(active=True).values_list('id', flat=True)
comments = Comment.objects.for_model(Video).filter(object_pk__in=active_videos_ids)
</snippet></ROW><ROW><id>19273115</id><snippet>d.addCallback(self.Success(request))
</snippet></ROW><ROW><id>19273115</id><snippet>temp = self.Success(request)
d.addCallback(temp)
</snippet></ROW><ROW><id>19273115</id><snippet>Success</snippet></ROW><ROW><id>19273115</id><snippet>request.write('Success')
request.finish()
temp = None
d.addCallback(None)
</snippet></ROW><ROW><id>19273115</id><snippet>d.addCallback(None)</snippet></ROW><ROW><id>19273115</id><snippet>finish</snippet></ROW><ROW><id>19273115</id><snippet>Deferred</snippet></ROW><ROW><id>19273115</id><snippet>d.addCallback(self.Success, request)</snippet></ROW><ROW><id>19273115</id><snippet>Deferred</snippet></ROW><ROW><id>19273115</id><snippet>Deferred</snippet></ROW><ROW><id>19273115</id><snippet>Success</snippet></ROW><ROW><id>19273115</id><snippet>def Success(self, result, request):
    ...
</snippet></ROW><ROW><id>19273423</id><snippet>self.media_control = wx.media.MediaCtrl(self.apanel,
    style=wx.SIMPLE_BORDER,
    szBackend=wx.media.MEDIABACKEND_DIRECTSHOW)
</snippet></ROW><ROW><id>19273449</id><snippet>print s[81:67:-1]
print s[81:67:1]
</snippet></ROW><ROW><id>19273449</id><snippet>taht rewsna na
</snippet></ROW><ROW><id>19273574</id><snippet>import ephem

def const(planet_name, date_string):
    planet_class = getattr(ephem, planet_name)
    planet = planet_class()
    south_bend = ephem.Observer()
    south_bend.lat = '41.67'
    south_bend.lon = '-86.26'  # west is negative
    south_bend.date = date_string
    planet.compute(south_bend)
    return ephem.constellation((planet.ra, planet.dec))

print const(raw_input('Planet: '), raw_input('yyyy/mm/dd: '))
</snippet></ROW><ROW><id>19273678</id><snippet># Conditional
if youAreInSoft1(): 
    import Soft1.Controls as Controls
    import Soft1.Rigs as Rigs
else:
    import Soft2.Controls as Controls
    import Soft2.Rigs as Rigs

reload(Controls)
reload(Rigs)

#Variable
import Soft1 as _soft1
import Soft2 as _soft2

Controls = None
Rigs = None

global Controls, Rigs

if youAreInSoft1():
    Controls = _soft1.Controls
    Rigs = _soft1.Controls
else:
    Controls = _soft2.Controls
    Rigs = _soft2.Controls

reload(Controls)
reload(Rigs)
</snippet></ROW><ROW><id>19273747</id><snippet>print("öäüß€".encode('L9'))</snippet></ROW><ROW><id>19274183</id><snippet>__new__</snippet></ROW><ROW><id>19274183</id><snippet>&gt;&gt;&gt; class Foo:
...     def __new__(self, *args, **kw):
...         print 'Nope'
... 
&gt;&gt;&gt; Foo()
&lt;__main__.Foo instance at 0x101f5c908&gt;
</snippet></ROW><ROW><id>19274183</id><snippet>__new__</snippet></ROW><ROW><id>19274725</id><snippet>import matplotlib.path as mpath
import matplotlib.patches as patches

verts = [(0,0),
         (1,0),
         (1,1),
         (0,1),
         (0,0)]

codes = [mpath.Path.MOVETO] + (len(x)-1)*[mpath.Path.LINETO]
square_verts = mpath.Path(verts, codes)

fig, ax = plt.subplots(subplot_kw={'aspect': 1.0, 'xlim': [-0.2,1.2], 'ylim': [-0.2,1.2]})

square = patches.PathPatch(square_verts, facecolor='orange', lw=2)
ax.add_patch(square)
</snippet></ROW><ROW><id>19274725</id><snippet>verts = [(0.2, 0.0),
         (0.8, 0.0), # start of the lower right corner
         (1.0, 0.0), # intermediate point (as if it wasn't rounded)
         (1.0, 0.2), # end point of the lower right corner
         (1.0, 0.8), # move to the next point etc.
         (1.0, 1.0),
         (0.8, 1.0),
         (0.2, 1.0),
         (0.0, 1.0),
         (0.0, 0.8),
         (0.0, 0.2),
         (0.0, 0.0),
         (0.2, 0.0)]

codes = [mpath.Path.MOVETO,
         mpath.Path.LINETO,
         mpath.Path.CURVE3,
         mpath.Path.CURVE3,
         mpath.Path.LINETO,
         mpath.Path.CURVE3,
         mpath.Path.CURVE3,
         mpath.Path.LINETO,
         mpath.Path.CURVE3,
         mpath.Path.CURVE3,
         mpath.Path.LINETO,
         mpath.Path.CURVE3,
         mpath.Path.CURVE3]


rounded_verts = mpath.Path(verts, codes)

fig, ax = plt.subplots(subplot_kw={'aspect': 1.0, 'xlim': [-0.2,1.2], 'ylim': [-0.2,1.2]})

rounded_verts = patches.PathPatch(rounded_verts, facecolor='orange', lw=2)
ax.add_patch(rounded_verts)
</snippet></ROW><ROW><id>19274725</id><snippet>x-coordinate</snippet></ROW><ROW><id>19274725</id><snippet>y-coordinate</snippet></ROW><ROW><id>19274834</id><snippet>buffer = [{"siteid": 1 , "distance": 2, "codes": "1|b|c", "urv": "545"}, {"siteid": 2 , "distance": 2, "codes": "1|b|c", "urv": "55"}, {"siteid": 2 , "distance": 2, "codes": "1|b|c", "urv": "55"}, {"siteid": 3 , "distance": 2, "codes": "1|b|c", "urv": "546"}]
layer = [{"siteid": 2 }, {"siteid": 4 }, {"siteid": 3 }]
ids = [l['siteid'] for l in layer]
print [b for b in buffer if b['siteid'] in ids]
</snippet></ROW><ROW><id>19274898</id><snippet>if model.name == u'é':
</snippet></ROW><ROW><id>19274996</id><snippet>numpy</snippet></ROW><ROW><id>19274996</id><snippet>np.mean(Y)
</snippet></ROW><ROW><id>19274996</id><snippet>t</snippet></ROW><ROW><id>19274996</id><snippet>np.mean(np.mean(a, axis=0), axis=0)
</snippet></ROW><ROW><id>19274996</id><snippet>np.mean(a, axis=(0, 1))</snippet></ROW><ROW><id>19275180</id><snippet>f_values = some_function_of(indgrid[mask])
result = np.zeros(indgrid.shape)
result[mask] = f_values
</snippet></ROW><ROW><id>19275188</id><snippet>Anonymous class</snippet></ROW><ROW><id>19275188</id><snippet>#!/usr/bin/python
#flask-login anonymous user class
from flask.ext.login import AnonymousUserMixin
class Anonymous(AnonymousUserMixin):
  def __init__(self):
    self.username = 'Guest'
</snippet></ROW><ROW><id>19275188</id><snippet>anonymous_user</snippet></ROW><ROW><id>19275188</id><snippet>login_manager.anonymous_user = Anonymous</snippet></ROW><ROW><id>19275432</id><snippet>import subprocess
direct_output = subprocess.check_output('ls', shell=True) #could be anything here.
</snippet></ROW><ROW><id>19275440</id><snippet>r2 = np.ones_like(numel, dtype=float)
num_mask = (numel != 0)
den_mask = (denel != 0)
mask = num_mask &amp; den_mask
r2[mask] = 1 - numel[mask]/denel[mask]
mask = ~den_mask &amp; num_mask
r2[mask] = 0
</snippet></ROW><ROW><id>19275626</id><snippet>x1</snippet></ROW><ROW><id>19275626</id><snippet>x2</snippet></ROW><ROW><id>19275626</id><snippet>c = corrcoef(x1,x2)</snippet></ROW><ROW><id>19275626</id><snippet>c(2,1)</snippet></ROW><ROW><id>19275626</id><snippet>plot(x1,x2,'.','markersize',3)</snippet></ROW><ROW><id>19275626</id><snippet>x1</snippet></ROW><ROW><id>19275626</id><snippet>x2</snippet></ROW><ROW><id>19275626</id><snippet>NaN</snippet></ROW><ROW><id>19275626</id><snippet>ind = ~(isnan(x1)|isnan(x2));
x1 = x1(ind);
x2 = x2(ind);
</snippet></ROW><ROW><id>19275626</id><snippet>c=0.91</snippet></ROW><ROW><id>19275628</id><snippet>class B(object): pass
b = B()
b.__nonzero__ = lambda: False
bool(b) # True
</snippet></ROW><ROW><id>19275628</id><snippet>B.__nonzero__ = lambda self: False
bool(b) # False
</snippet></ROW><ROW><id>19275642</id><snippet>import scipy
import scipy.stats
#now you can use
scipy.stats.poisson
#if you want it more accessible you could do what you did above
from scipy.stats import poisson
#then call poisson directly
poisson
</snippet></ROW><ROW><id>19275904</id><snippet>some_start = 0
some_end = 1720
</snippet></ROW><ROW><id>19275904</id><snippet>x[(x.start &gt;= some_start) &amp; (x.end &lt;= some_end)]
</snippet></ROW><ROW><id>19275904</id><snippet>start</snippet></ROW><ROW><id>19275904</id><snippet>end</snippet></ROW><ROW><id>19275904</id><snippet>.index</snippet></ROW><ROW><id>19275904</id><snippet>x.start==0</snippet></ROW><ROW><id>19275936</id><snippet>drop_missile</snippet></ROW><ROW><id>19275936</id><snippet>while True:</snippet></ROW><ROW><id>19275939</id><snippet>stat()</snippet></ROW><ROW><id>19275939</id><snippet>check()</snippet></ROW><ROW><id>19275939</id><snippet>sftp.rename</snippet></ROW><ROW><id>19276086</id><snippet>__getattr__</snippet></ROW><ROW><id>19276086</id><snippet>class spaceObj(object):
    storage = None

    def __init__(self):  # this is for testing only
        self.storage = {'total':100,'used':88,'free':1}

    def __getattr__(self, item):
        if item[:7] == 'getSize':  # check if an undefined attribute starts with this
            return self.getSize(item[7:])

    def getSize(self, what='total'):
        return self.storage[what.lower()]

print (spaceObj().getSizeTotal)  # 100
</snippet></ROW><ROW><id>19276869</id><snippet>console</snippet></ROW><ROW><id>19276869</id><snippet>tkcon.tcl</snippet></ROW><ROW><id>19276869</id><snippet>GetStatsFirst2.tcl</snippet></ROW><ROW><id>19276869</id><snippet>interp alias {} console {} tkcon
</snippet></ROW><ROW><id>19276869</id><snippet>x.tk.eval('interp alias {} console {} tkcon')
</snippet></ROW><ROW><id>19277078</id><snippet>South</snippet></ROW><ROW><id>19277078</id><snippet>settings/test.py</snippet></ROW><ROW><id>19277078</id><snippet>syncdb</snippet></ROW><ROW><id>19277078</id><snippet>SOUTH_TESTS_MIGRATE = False  
SOUTH_SKIP_TESTS = True
</snippet></ROW><ROW><id>19277078</id><snippet>base.py</snippet></ROW><ROW><id>19277081</id><snippet>median_list = median.split(",")</snippet></ROW><ROW><id>19277081</id><snippet>1,2,3,4,5</snippet></ROW><ROW><id>19277081</id><snippet>["1", "2", "3", "4", "5"]</snippet></ROW><ROW><id>19277081</id><snippet>eval</snippet></ROW><ROW><id>19277081</id><snippet>from ast import literal_eval

try:
    median_list = list(literal_eval(median))
except SyntaxError:
    print("Invalid data was entered!")
</snippet></ROW><ROW><id>19277222</id><snippet>exec</snippet></ROW><ROW><id>19277222</id><snippet>module_name = "filename_{0}".format(getpass.getuser())
exec_string = "import {0}".format(module_name)
exec exec_string
</snippet></ROW><ROW><id>19277222</id><snippet>__import__</snippet></ROW><ROW><id>19277222</id><snippet>importlib</snippet></ROW><ROW><id>19277222</id><snippet>module = __import__(module_name)
</snippet></ROW><ROW><id>19277222</id><snippet>import importlib
module = importlib.import_module(module_name)
</snippet></ROW><ROW><id>19277307</id><snippet>src</snippet></ROW><ROW><id>19277307</id><snippet>src</snippet></ROW><ROW><id>19277307</id><snippet>ResourcesLoader</snippet></ROW><ROW><id>19277494</id><snippet>import matplotlib.pylab as plt
import random
import matplotlib.gridspec as gridspec

random.seed(20)
data1 = [random.random() for i in range(10)]
data2 = [random.random()*1000 for i in range(10)]

gs = gridspec.GridSpec(2,1)
fig = plt.figure()

ax = fig.add_subplot(gs[0])
ax.plot(data1)
ax.set_ylabel(r'Label One', size =16)
ax.get_yaxis().set_label_coords(-0.1,0.5)

ax = fig.add_subplot(gs[1])
ax.plot(data2)
ax.set_ylabel(r'Label Two', size =16)
ax.get_yaxis().set_label_coords(-0.1,0.5)
</snippet></ROW><ROW><id>19277551</id><snippet>re.sub(r"\)[ \t]*(?=\))",")",") )    )",0)
</snippet></ROW><ROW><id>19277551</id><snippet>\)[ \t]*</snippet></ROW><ROW><id>19277551</id><snippet>\)</snippet></ROW><ROW><id>19277771</id><snippet>len</snippet></ROW><ROW><id>19277771</id><snippet>abs</snippet></ROW><ROW><id>19277771</id><snippet>s = "Hello"
t = "Worl"

if abs(len(s) - len(t)) &gt; 1:
    print("string lengths differ by more than 1")
</snippet></ROW><ROW><id>19277771</id><snippet>timeit</snippet></ROW><ROW><id>19277771</id><snippet>In [10]: s = str(range(100000))

In [11]: t = str(range(100001))

In [12]: %timeit len(s) &gt; len(t) + 1 and len(s) &lt; len(t) - 1
10000000 loops, best of 3: 106 ns per loop

In [13]: %timeit abs(len(s) - len(t)) &gt; 1
10000000 loops, best of 3: 115 ns per loop

In [14]: %timeit 1 &gt;= len(s) - len(t) &gt;= -1
10000000 loops, best of 3: 113 ns per loop
</snippet></ROW><ROW><id>19277771</id><snippet>abs(len(s) - len(t)) &gt; 1</snippet></ROW><ROW><id>19277841</id><snippet>python manage.py syncdb --all 
</snippet></ROW><ROW><id>19277903</id><snippet>tag_add</snippet></ROW><ROW><id>19277903</id><snippet>tag_configure</snippet></ROW><ROW><id>19278041</id><snippet>a = [{"id":1,"data":{"age":16,"name":"a"}}, 
     {"id":3,"data":{"age":35,"name":"b"}}, 
     {"id":2,"data":{"age":9,"name":"c"}}]
</snippet></ROW><ROW><id>19278041</id><snippet>itemgetter</snippet></ROW><ROW><id>19278041</id><snippet>from operator import itemgetter

a = [{"id":1,"data":{"age":16,"name":"a"}}, 
     {"id":3,"data":{"age":35,"name":"b"}}, 
     {"id":2,"data":{"age":9,"name":"c"}}]

l=sorted(a, key = lambda k : itemgetter('age')(itemgetter('data')(k)) )

print (l)
</snippet></ROW><ROW><id>19278108</id><snippet>zip</snippet></ROW><ROW><id>19278108</id><snippet>list</snippet></ROW><ROW><id>19278108</id><snippet>&gt;&gt;&gt; list(zip((1,2,3),(10,20,30),(100,200,300)))
[(1, 10, 100), (2, 20, 200), (3, 30, 300)]
</snippet></ROW><ROW><id>19278108</id><snippet>c = [  i ^ j for i, j in zip( x, y )  ]</snippet></ROW><ROW><id>19278108</id><snippet>zip</snippet></ROW><ROW><id>19278500</id><snippet>for i in myList:
    #check if index is greater than 5
    if i &gt;5:
        #if the number is greater than 5, add to greaterList
        greaterList.append(i)
</snippet></ROW><ROW><id>19278500</id><snippet>def splitList(myList, option):
    final_list = []
    if int(option) == 0:
        for i in myList:
            if i &gt; 5:
                final_list.append(i)
    elif int(option) == 1:
        for i in myList:
            if i%2 != 0:
                final_list.append(i)
    return final_list
</snippet></ROW><ROW><id>19278500</id><snippet>def splitList(myList, option):
    if int(option) == 0:
        return [elem for elem in myList if elem &gt; 5]
    elif int(option) == 1:
        return [elem for elem in myList if elem % 2 != 0]
</snippet></ROW><ROW><id>19278500</id><snippet>&gt;&gt;&gt; splitList([1,2,6,4,5,8,43,5,7,2], 1)
[1, 5, 43, 5, 7]
</snippet></ROW><ROW><id>19278577</id><snippet>L1 = np.array([1,1,1,1,0,0])
L2 = np.array([0,0,1,1,0,1])

D1 = np.array([0.03,0.04,0.01,0.02,0.01,0.02])
D2 = np.array([0.05,0.01,0.03,0.07,0.12,0.41])
</snippet></ROW><ROW><id>19278577</id><snippet>a = np.dot(D, L)
</snippet></ROW><ROW><id>19278577</id><snippet>D1</snippet></ROW><ROW><id>19278577</id><snippet>L1</snippet></ROW><ROW><id>19278577</id><snippet>True</snippet></ROW><ROW><id>19278577</id><snippet>a = D1[L1.astype(bool)].sum()  
b = D2[L2.astype(bool)].sum()
</snippet></ROW><ROW><id>19278577</id><snippet>D1</snippet></ROW><ROW><id>19278577</id><snippet>L1</snippet></ROW><ROW><id>19278577</id><snippet>a = np.sum(D1*L1)
b = np.sum(D2*L2)
</snippet></ROW><ROW><id>19278577</id><snippet>L = np.random.random_integers(0,1,4000)
D = np.random.rand(4000)

In [60]: timeit np.dot(D,L)
100000 loops, best of 3: 13.1 µs per loop

In [61]: timeit np.sum(D*L)
10000 loops, best of 3: 33.7 µs per loop

In [62]: timeit D[L.astype(bool)].sum()
10000 loops, best of 3: 65 µs per loop

In [67]: %%timeit
   ....: a = 0
   ....: for l, d in zip(L, D):
   ....:     if l == 1:
   ....:         a += d
   ....: 
100 loops, best of 3: 7.68 ms per loop
</snippet></ROW><ROW><id>19278885</id><snippet>from functools import partial
defaultdict(partial(deque, maxlen=10))
</snippet></ROW><ROW><id>19278885</id><snippet>&gt;&gt;&gt; deque10 = partial(deque, maxlen=10)
&gt;&gt;&gt; deque10()
deque([], maxlen=10)
&gt;&gt;&gt; deque10(range(20))
deque([10, 11, 12, 13, 14, 15, 16, 17, 18, 19], maxlen=10)
</snippet></ROW><ROW><id>19278885</id><snippet>functools.partial</snippet></ROW><ROW><id>19278927</id><snippet>for asteroid in self.overlapping_sprites:
    asteroid.handle_caught()
    if lives.value &lt;=0:
        self.ship_destroy()
</snippet></ROW><ROW><id>19278927</id><snippet>asteroid</snippet></ROW><ROW><id>19278927</id><snippet>overlapping_sprites</snippet></ROW><ROW><id>19278927</id><snippet>asteroid</snippet></ROW><ROW><id>19278927</id><snippet>ExtraLives</snippet></ROW><ROW><id>19278927</id><snippet>handle_caught()</snippet></ROW><ROW><id>19278927</id><snippet>ExtraLives</snippet></ROW><ROW><id>19278927</id><snippet>handle_caught()</snippet></ROW><ROW><id>19278927</id><snippet>add_extralives</snippet></ROW><ROW><id>19278927</id><snippet>handle_caught</snippet></ROW><ROW><id>19278927</id><snippet>ExtraLives</snippet></ROW><ROW><id>19278927</id><snippet>add_extralives()</snippet></ROW><ROW><id>19278927</id><snippet>ExtraLives</snippet></ROW><ROW><id>19278927</id><snippet>add_extralives</snippet></ROW><ROW><id>19278927</id><snippet>handle_caught</snippet></ROW><ROW><id>19278927</id><snippet>for extralives in self.overlapping_sprites:
    extralives.add_extralives()
</snippet></ROW><ROW><id>19278967</id><snippet>&gt;&gt;&gt; u'A\xe2\x80\x8ct\xe2\x80\x8ch...\xe2\x80\x8cdes'.encode('latin-1').decode('utf-8')
u'A\u200ct\u200ch\u200c\u200c\u200c\u200c\u200c\u200cl\u200c\u200c\u200ce\u200c\u200c\u200c\u200ct\u200c\u200c\u200c\u200c\u200c\u200c\u200ci\u200c\u200c\u200c\u200c\u200cc\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200c Bilbao (n)\tC\u200cD\u200c \u200c\u200c\u200c\u200c\u200c\u200cM\u200c\u200c\u200ci\u200c\u200c\u200c\u200cr\u200c\u200c\u200c\u200c\u200c\u200c\u200ca\u200c\u200c\u200c\u200c\u200cn\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200c\u200cdes'
&gt;&gt;&gt; print u'A\xe2\x80\x8ct\xe2\x80\x8ch...\xe2\x80\x8cdes'.encode('latin-1').decode('utf-8')
A‌t‌h‌‌‌‌‌‌l‌‌‌e‌‌‌‌t‌‌‌‌‌‌‌i‌‌‌‌‌c‌‌‌‌‌‌‌‌‌‌ Bilbao (n)    C‌D‌ ‌‌‌‌‌‌M‌‌‌i‌‌‌‌r‌‌‌‌‌‌‌a‌‌‌‌‌n‌‌‌‌‌‌‌‌‌‌des
</snippet></ROW><ROW><id>19279146</id><snippet>df = [df.hc== 2]
</snippet></ROW><ROW><id>19279146</id><snippet>df = df[df.hc == 2]
</snippet></ROW><ROW><id>19279146</id><snippet>mask = df.hc == 2
df = df[mask]
</snippet></ROW><ROW><id>19279146</id><snippet>df[mask]['fname'] = 'Johnson'
</snippet></ROW><ROW><id>19279277</id><snippet>.encode()</snippet></ROW><ROW><id>19279277</id><snippet>on_error()</snippet></ROW><ROW><id>19279277</id><snippet>on_success()</snippet></ROW><ROW><id>19279277</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>19279277</id><snippet>
print(u"[%s](%s) - %s" % (data['created_at'], data['coordinates']['coordinates'], data['text']))
</snippet></ROW><ROW><id>19279277</id><snippet>on_success()</snippet></ROW><ROW><id>19279277</id><snippet>tweetlog()</snippet></ROW><ROW><id>19279277</id><snippet>print()</snippet></ROW><ROW><id>19279300</id><snippet>print getattr(myobject, obj_name)
</snippet></ROW><ROW><id>19279301</id><snippet>df2 = df1.replace({'on': True, 'off': False})
</snippet></ROW><ROW><id>19279364</id><snippet>app.run(host="0.0.0.0", port=8888)
</snippet></ROW><ROW><id>19279496</id><snippet>from sympy import *
x, y, eta = symbols('x y eta', real=True)
re(integrate(1/(x - y + I*eta), (x, -1, 1))).simplify().subs({eta: 0})
# -&gt; log(Abs(-y + 1)/Abs(y + 1))
</snippet></ROW><ROW><id>19279496</id><snippet>int</snippet></ROW><ROW><id>19279496</id><snippet>f(y)</snippet></ROW><ROW><id>19279496</id><snippet>f(y) / (y - y_0)</snippet></ROW><ROW><id>19279496</id><snippet>scipy.integrate.quad</snippet></ROW><ROW><id>19279496</id><snippet>import numpy as np
from scipy import integrate, special

# P \int_{-1}^1 dx 1/(x - wvar) * (1 + sin(x))
print(integrate.quad(lambda x: 1 + np.sin(x), -1, 1, weight='cauchy', wvar=0))
# -&gt; (1.8921661407343657, 2.426947531830592e-13)

# Check against known result
print(2*special.sici(1)[0])
# -&gt; 1.89216614073
</snippet></ROW><ROW><id>19279525</id><snippet>mock.patch</snippet></ROW><ROW><id>19279525</id><snippet>with</snippet></ROW><ROW><id>19279525</id><snippet>    @it.should('replace the original methods with the fake methods')
    def test_should_replace_the_original_methods_with_the_fake_methods(case):
        class FakeObject(object):
            class Configuration(object):
                spec = RealObject

            def was_faked(self):
                return True

        with fake(FakeObject) as realObject:
            fake_obj = realObject()

            case.assertTrue(fake_obj.was_faked())
</snippet></ROW><ROW><id>19279525</id><snippet>def substitute(obj, qualified_name, spec):
    return mock.patch(qualified_name, new=obj, spec=spec)
</snippet></ROW><ROW><id>19279525</id><snippet>with</snippet></ROW><ROW><id>19279525</id><snippet>    @it.should('replace the original methods with the fake methods')
    def test_should_replace_the_original_methods_with_the_fake_methods(case):
       ...
    with fake(FakeObject, '%s.%s' % (__name__,'RealObject')):
        fake_obj = RealObject()

        case.assertTrue(fake_obj.was_faked())
</snippet></ROW><ROW><id>19279525</id><snippet>def fake(obj, qualified_name=None):
    """
    :rtype : mock._patch
    :param obj:
    """
    try:
        configuration = obj.Configuration()
    except AttributeError:
        raise TypeError('A fake testdouble must have a Configuration class.')

    try:
        spec = configuration.spec
    except AttributeError:
        raise TestDoubleConfigurationError('The type to be faked was not specified.')

    qualified_name = qualified_name or get_qualified_name(spec)
    ...
</snippet></ROW><ROW><id>19279525</id><snippet>    qualified_name = "%s.%s" % (obj.__module__, spec.__name__)
</snippet></ROW><ROW><id>19279718</id><snippet>jimbo</snippet></ROW><ROW><id>19279777</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = '$a * ($aa - $b)'
&gt;&gt;&gt; re.sub(r'\$(\w+)', r'[\1]', strs)
'[a] * ([aa] - [b])'
</snippet></ROW><ROW><id>19279830</id><snippet>required_func</snippet></ROW><ROW><id>19279830</id><snippet>globals</snippet></ROW><ROW><id>19279830</id><snippet>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; execfile('test.py', d)
&gt;&gt;&gt; from some_module import f
&gt;&gt;&gt; f
&lt;function required_func at 0x7fb5649b5578&gt;
&gt;&gt;&gt; f.func_globals is d
True
</snippet></ROW><ROW><id>19279830</id><snippet>globals</snippet></ROW><ROW><id>19280003</id><snippet>sudo apt-get install</snippet></ROW><ROW><id>19280003</id><snippet>wget</snippet></ROW><ROW><id>19280003</id><snippet>pip install</snippet></ROW><ROW><id>19280003</id><snippet>sudo apt-get install</snippet></ROW><ROW><id>19280017</id><snippet>"&lt;\\%s/&gt;" % a
</snippet></ROW><ROW><id>19280017</id><snippet>&lt;"\\%s %s/&gt;" % (a, b)
</snippet></ROW><ROW><id>19280017</id><snippet>"&lt;\\%(a)s/&gt;" % {'a': a}
</snippet></ROW><ROW><id>19280017</id><snippet>str.format</snippet></ROW><ROW><id>19280017</id><snippet>"&lt;\\{}/&gt;".format(a)
"&lt;\\{} {}/&gt;".format(a, b)
"&lt;\\{1} {0}/&gt;".format(a, b)  # =&gt; "&lt;\\" + b + " " + a + "/&gt;"
"&lt;\\{a} {b}/&gt;".format(a=a, b=b)
</snippet></ROW><ROW><id>19280038</id><snippet>In [7]: rng
Out[7]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-01 00:00:00, ..., 2013-01-01 00:00:00]
Length: 527041, Freq: T, Timezone: None

In [8]: rng[rng.indexer_between_time('9:30','16:00')]
Out[8]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-01 09:30:00, ..., 2012-12-31 16:00:00]
Length: 143106, Freq: None, Timezone: None
</snippet></ROW><ROW><id>19280141</id><snippet>ranges = [range(int(re.findall(r'(\d+)-(\d+)', wc[i])[0][0]), 
                int(re.findall(r'(\d+)-(\d+)', wc[i])[0][1]) + 1)
          for i in range(4)]
</snippet></ROW><ROW><id>19280141</id><snippet>for i, j, k, p in itertools.product(*ranges):
</snippet></ROW><ROW><id>19280141</id><snippet>ips.append('{}.{}.{}.{}'.format(i, j, k, p)) # OR
ips.append('.'.join(map(str, (i, j, k, p))))
</snippet></ROW><ROW><id>19280141</id><snippet>for components in itertools.product(*ranges):
    ips.append('{}.{}.{}.{}'.format(*components)) # OR
    ips.append('.'.join(map(str, components)))
</snippet></ROW><ROW><id>19280141</id><snippet>ips = ['{}.{}.{}.{}'.format(*components)
       for components in itertools.product(*ranges)]
</snippet></ROW><ROW><id>19280211</id><snippet>seconds = []</snippet></ROW><ROW><id>19280211</id><snippet>range(len(str(s)))</snippet></ROW><ROW><id>19280211</id><snippet>10</snippet></ROW><ROW><id>19280211</id><snippet>"10"</snippet></ROW><ROW><id>19280211</id><snippet>2</snippet></ROW><ROW><id>19280211</id><snippet>[0, 1]</snippet></ROW><ROW><id>19280211</id><snippet>seconds</snippet></ROW><ROW><id>19280211</id><snippet>0</snippet></ROW><ROW><id>19280211</id><snippet>1</snippet></ROW><ROW><id>19280211</id><snippet>def hms(s):
    h = s / 3600
    s -= h * 3600
    m = s / 60
    s -= m * 60
    return (h, m, s)

print hms(10000)  # =&gt; (2, 46, 40)
print hms(1000)  # =&gt; (0, 16, 40)
</snippet></ROW><ROW><id>19280211</id><snippet>def hms_list(amounts):
    ret = []
    for amount in amounts:
        ret.append(hms(amount))
    return ret

print hms_list([1000, 10000])  # =&gt; [(0, 16, 40), (2, 46, 40)]
</snippet></ROW><ROW><id>19280211</id><snippet>def hms_list(amounts):
    return [hms(amount) for amount in amounts]
</snippet></ROW><ROW><id>19280211</id><snippet>/</snippet></ROW><ROW><id>19280211</id><snippet>float</snippet></ROW><ROW><id>19280211</id><snippet>//</snippet></ROW><ROW><id>19280211</id><snippet>h = s // 3600
</snippet></ROW><ROW><id>19280230</id><snippet>components = (line[:10], line[10:29], line[29:42], line[42:53], line[53:60],
              line[60:67], line[67:])
</snippet></ROW><ROW><id>19280230</id><snippet>def parse_log(log)
    for line in log.splitlines():
        if line[29:42].rstrip() == 'notconnect':
            yield line[:10].rstrip()

notconnect_interfaces = list(parse_log(log))
</snippet></ROW><ROW><id>19280230</id><snippet>def parse_line(line, columns):
    for start, stop in zip(columns, columns[1:])
        yield line[start, stop].rstrip()

def parse_log(log):
    for line in log.splitlines():
        yield list(parse_line(line, (0, 10, 29, 42, 53, 60, 67, 80)))

def find_notconnected(log):
    for port, name, status, vlan, duplex, speed, type in parse_log(log):
        if status == 'notconnect':
            yield port
</snippet></ROW><ROW><id>19280230</id><snippet>bounds = (0, 10, 29, 42, 53, 60, 67, 80)
columns = ([line[start:stop].rstrip() for start, stop in zip(bounds, bounds[1:])]
           for line in log.splitlines())
notconnected = (port for port, _, status, _, _, _, _ in columns 
                if status == 'notconnected')
</snippet></ROW><ROW><id>19280321</id><snippet>from guidata.dataset.datatypes import DataSet
from guidata.dataset.dataitems import ChoiceItem, TextItem

class ChoicesVariable(object):
    def __init__(self):
        self.choices = [(0,'First',None),(1,'Second',None),(2,'Third',None)]
    def set(self, choices):
        normalized = []
        for idx, c in enumerate(choices):
            normalized.append(self._normalize_choice(idx, c))
        self.choices = normalized
    def __call__(self, *args):
        return self.choices
    def _normalize_choice(self, idx, choice_tuple):
        img = None
        if isinstance(choice_tuple, tuple):
            if len(choice_tuple) == 2:
                key, value = choice_tuple
            else:
                key, value, img = choice_tuple
        else:
            key = idx
            value = choice_tuple
        if isinstance(value, str):
            value = str(value)        
        return (key, value, img)
choices = ChoicesVariable()



class Example(DataSet):
    choiceBox = ChoiceItem("Example", choices)
    otherChoiceBox = ChoiceItem("Example2", [(0,'DontTouch'),(1,'Second'),(2,'Third')])
    text = TextItem("Example3")

if __name__ == "__main__":
    import guidata
    _app = guidata.qapplication()

    newChoices = [(0,'Aaa'),(1,'Bbb'),(2,'Ccc')]
    choices.set(newChoices)
    #Example._items[0].set_prop('data', choices=newChoices)
    win = Example()
    win.edit()
    newChoices = [(0,'Alpha',None),(1,'Beta',None),(2,'Gamma',None)]
    choices.set(newChoices)
    win.edit()
</snippet></ROW><ROW><id>19280399</id><snippet>defaultdict(set)</snippet></ROW><ROW><id>19280399</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>19280399</id><snippet>GO_dict[gene_id] = GO_id</snippet></ROW><ROW><id>19280399</id><snippet>&gt;&gt;&gt; GO_dict = defaultdict(set)
&gt;&gt;&gt; for GO_names in GO_file:
   gene_id,_,GO_id = GO_names.partition(" ")
   gene_id = gene_id.split("_")[0]
   GO_dict[gene_id].add(GO_id)


&gt;&gt;&gt; print GO_dict
defaultdict(&lt;type 'set'&gt;, {'A': set(['13', '12', '14']), 'B': set(['1', '5'])})
</snippet></ROW><ROW><id>19280399</id><snippet>OrderedSet</snippet></ROW><ROW><id>19280399</id><snippet>OrderedDict</snippet></ROW><ROW><id>19280399</id><snippet>&gt;&gt;&gt; GO_dict = defaultdict(OrderedDict)
&gt;&gt;&gt; for GO_names in GO_file:
   gene_id,_,GO_id = GO_names.partition(" ")
   gene_id = gene_id.split("_")[0]
   GO_dict[gene_id][GO_id] = None


&gt;&gt;&gt; OrderedDict([('A', ['12', '13', '14']), ('B', ['1', '5'])])
OrderedDict([('A', ['12', '13', '14']), ('B', ['1', '5'])])
</snippet></ROW><ROW><id>19280399</id><snippet>itertools</snippet></ROW><ROW><id>19280399</id><snippet>defaultdict</snippet></ROW><ROW><id>19280399</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; GO_file_kv = [(key.split("_")[0], value) 
                   for key, value in (elem.split(" ") for elem in GO_file)]
&gt;&gt;&gt; {key: OrderedDict.fromkeys([e for _, e in value]).keys()
     for key, value in groupby(sorted(GO_file_kv, key=itemgetter(0)),
                       key=itemgetter(0))
 }
{'A': ['12', '13', '14'], 'B': ['1', '5']} 
</snippet></ROW><ROW><id>19280600</id><snippet>pip install mypackage
</snippet></ROW><ROW><id>19280600</id><snippet>django==1.5
fabric&gt;1.2
South==0.7.3
</snippet></ROW><ROW><id>19280600</id><snippet>$ pip install -r requirements.txt
</snippet></ROW><ROW><id>19280600</id><snippet>$ pip install gunicorn
$ gunicorn -h
</snippet></ROW><ROW><id>19280600</id><snippet>pip bundle</snippet></ROW><ROW><id>19280600</id><snippet>pip zip/unzip</snippet></ROW><ROW><id>19280636</id><snippet>In [18]: from pandas import DataFrame

In [19]: from numpy.random import randn

In [20]: df = DataFrame(randn(10, 2))

In [21]: df2 = DataFrame(randn(10, 2))

In [22]: axs = df.hist()

In [23]: for ax, (colname, values) in zip(axs.flat, df2.iteritems()):
   ....:     values.hist(ax=ax, bins=10)
   ....:

In [24]: draw()
</snippet></ROW><ROW><id>19280712</id><snippet>class Question(models.Model):
    question = models.CharField(max_length=100)
    detail = models.TextField(null=True, blank=True)

class PossibleAnswer(models.Model):
    question = models.ForeignKey(Question)
    value = models.CharField(max_length=200)

class Answer(models.Model):
    possible_answer = models.ForeignKey(PossibleAnswers)
</snippet></ROW><ROW><id>19280712</id><snippet>Answer</snippet></ROW><ROW><id>19280712</id><snippet>Answer</snippet></ROW><ROW><id>19280712</id><snippet>foo</snippet></ROW><ROW><id>19280712</id><snippet>PossibleAnswer.objects.filter(question=foo).annotate(Count('answer'))
</snippet></ROW><ROW><id>19280785</id><snippet>(\d{8}\s)10\.3\s-84\.8\$(.*?)(?=\d{8}|$)
</snippet></ROW><ROW><id>19280785</id><snippet>(?= ... )</snippet></ROW><ROW><id>19280792</id><snippet>bytearray</snippet></ROW><ROW><id>19280792</id><snippet>bytearray</snippet></ROW><ROW><id>19280792</id><snippet>tuple</snippet></ROW><ROW><id>19280792</id><snippet>int</snippet></ROW><ROW><id>19280792</id><snippet>assert x[0] == 172
</snippet></ROW><ROW><id>19280792</id><snippet>zip</snippet></ROW><ROW><id>19280792</id><snippet>bytearray</snippet></ROW><ROW><id>19280960</id><snippet>Scanner.scan</snippet></ROW><ROW><id>19280960</id><snippet>scan</snippet></ROW><ROW><id>19280960</id><snippet>remainder</snippet></ROW><ROW><id>19280960</id><snippet>(r'.', lambda scanner, token: None),
</snippet></ROW><ROW><id>19280960</id><snippet>Scanner</snippet></ROW><ROW><id>19280960</id><snippet>Scanner</snippet></ROW><ROW><id>19280960</id><snippet>import re
line = '''\
1 h words words words
bla 2 h words words
'''

scanner = re.Scanner([
    (r"([0-9]+(?:\ h|h))",    lambda scanner, token: ("HOURS", token)),
    (r'.', lambda scanner, token: None),
    ], flags=re.DOTALL)

results, remainder = scanner.scan(line)
print(results)
</snippet></ROW><ROW><id>19280960</id><snippet>[('HOURS', '1 h'), ('HOURS', '2 h')]
</snippet></ROW><ROW><id>19281039</id><snippet>fopen</snippet></ROW><ROW><id>19281039</id><snippet>CreateFile</snippet></ROW><ROW><id>19281039</id><snippet>f = open(path, 'r+')</snippet></ROW><ROW><id>19281039</id><snippet>f = win32file.CreateFile(path, 
                         win32con.GENERIC_READ | win32con.GENERIC_WRITE,
                         win32con.FILE_SHARE_DELETE,
                         None, 
                         0, 
                         win32con.OPEN_ALWAYS,
                         None)
</snippet></ROW><ROW><id>19281039</id><snippet>buf = f.read(4096)</snippet></ROW><ROW><id>19281039</id><snippet>buflen, buf = win32file.ReadFile(f, 4096, None)
</snippet></ROW><ROW><id>19281039</id><snippet>with</snippet></ROW><ROW><id>19281039</id><snippet>win32file.CloseFile(f)
</snippet></ROW><ROW><id>19281039</id><snippet>win32file</snippet></ROW><ROW><id>19281039</id><snippet>open</snippet></ROW><ROW><id>19281039</id><snippet>CreateFile</snippet></ROW><ROW><id>19281039</id><snippet>io</snippet></ROW><ROW><id>19281181</id><snippet>actions = greetings = []
</snippet></ROW><ROW><id>19281181</id><snippet>actions</snippet></ROW><ROW><id>19281181</id><snippet>greetings</snippet></ROW><ROW><id>19281181</id><snippet>&gt;&gt;&gt; a = b = []
&gt;&gt;&gt; a.append(1)
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; b
[1]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19281181</id><snippet>b</snippet></ROW><ROW><id>19281181</id><snippet>1</snippet></ROW><ROW><id>19281181</id><snippet>a</snippet></ROW><ROW><id>19281181</id><snippet>b</snippet></ROW><ROW><id>19281181</id><snippet>actions = []
greetings = []
</snippet></ROW><ROW><id>19281181</id><snippet>actions, greetings = [], []
</snippet></ROW><ROW><id>19281181</id><snippet>with open(os.getcwd() + "/files/" + "actions.txt") as temp:
    actions = list(temp)
with open(os.getcwd() + "/files/" + "greetings.txt") as temp:        
    greetings = list(temp)
</snippet></ROW><ROW><id>19281210</id><snippet>x,y,z</snippet></ROW><ROW><id>19281210</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x, y, z = zip(*data)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x,y,z)
plt.show()
</snippet></ROW><ROW><id>19281347</id><snippet>MemoryError</snippet></ROW><ROW><id>19281347</id><snippet>7395 x 412605</snippet></ROW><ROW><id>19281347</id><snippet>float64</snippet></ROW><ROW><id>19281347</id><snippet>double</snippet></ROW><ROW><id>19281347</id><snippet>float32</snippet></ROW><ROW><id>19281347</id><snippet>float</snippet></ROW><ROW><id>19281347</id><snippet>AdaBoostClassifier</snippet></ROW><ROW><id>19281447</id><snippet>{% url "myview" as my_url %}
{{ my_url|urlize }}
</snippet></ROW><ROW><id>19281447</id><snippet>{% filter %}</snippet></ROW><ROW><id>19281447</id><snippet>{% filter urlize %}{% url "myview" %}{% endfilter %}
</snippet></ROW><ROW><id>19281447</id><snippet>&lt;a href="{% url "myview" %}"&gt;{% url "myview" %}&lt;/a&gt;
</snippet></ROW><ROW><id>19281542</id><snippet>&gt;&gt;&gt; a = [[1, None, 2], [3, 4, 5], [6, None, 7]]
&gt;&gt;&gt; [[0 if x is None else x for x in sublist] for sublist in a]
[[1, 0, 2], [3, 4, 5], [6, 0, 7]]
</snippet></ROW><ROW><id>19281542</id><snippet>&gt;&gt;&gt; [x[:1] + ([0] if x[1] is None else x[1:2]) + x[2:] for x in a]
[[1, 0, 2], [3, 4, 5], [6, 0, 7]]
</snippet></ROW><ROW><id>19281603</id><snippet>filepath</snippet></ROW><ROW><id>19281603</id><snippet>filepath = returned_values.get('filename')</snippet></ROW><ROW><id>19281603</id><snippet>mainloop</snippet></ROW><ROW><id>19281603</id><snippet>from Tkinter import *
from tkFileDialog import *

class trip_calculator:

    def gui(self):

        returned_values = {} 

        def open_file_dialog():
            returned_values['filename'] = askopenfilename()

        root = Tk()
        Button(root, text='Browse', command= open_file_dialog).pack()


        root.mainloop()

        filepath = returned_values.get('filename')
        return filepath

        root.quit()

print(trip_calculator().gui())
</snippet></ROW><ROW><id>19281675</id><snippet>hash</snippet></ROW><ROW><id>19281675</id><snippet>dict</snippet></ROW><ROW><id>19281675</id><snippet>hash</snippet></ROW><ROW><id>19281675</id><snippet>timestamp</snippet></ROW><ROW><id>19281675</id><snippet>heapq</snippet></ROW><ROW><id>19281675</id><snippet>(timestamp, hash)</snippet></ROW><ROW><id>19281675</id><snippet>import heapq


class ExpiringCache(object):
    def __init__(self):
        self._dict = {}
        self._heap = []

    def add(self, key, expiry):
        self._dict[key] = expiry
        heapq.heappush(self._heap, (expiry, key))

    def contains(self, key):
        return key in self._dict

    def collect(self, maxage):
        while self._heap and self._heap[0][0] &lt;= maxage:
            expiry, key = heapq.heappop(self._heap)
            if self._dict.get(key) == expiry:
                del self._dict[key]

    def items(self):
        return self._dict.items()
</snippet></ROW><ROW><id>19281675</id><snippet>&gt;&gt;&gt; xc = ExpiringCache()
&gt;&gt;&gt; xc.add('apples', 1)
&gt;&gt;&gt; xc.add('bananas', 2)
&gt;&gt;&gt; xc.add('mangoes', 3)
</snippet></ROW><ROW><id>19281675</id><snippet>&gt;&gt;&gt; xc.add('apples', 4)
</snippet></ROW><ROW><id>19281675</id><snippet>&gt;&gt;&gt; xc.collect(2)    
&gt;&gt;&gt; xc.contains('apples')
True
&gt;&gt;&gt; xc.contains('bananas')
False
</snippet></ROW><ROW><id>19281735</id><snippet>gmail.smtp</snippet></ROW><ROW><id>19281735</id><snippet>send_email</snippet></ROW><ROW><id>19281735</id><snippet>import django
from django.conf import settings
from django.core.mail import send_mail

send_mail('Subject here', 'Here is the message.', settings.EMAIL_HOST_USER,
    ['to@example.com'], fail_silently=False)
</snippet></ROW><ROW><id>19281817</id><snippet>http://www.pythontutor.com/visualize.html#code=%23+move+a+stack+of+n+disks+from+stack+a+to+stack+b,%0A%23+using+tmp+as+a+temporary+stack%0Adef+TowerOfHanoi(n,+a,+b,+tmp)%3A%0A++++if+n+%3D%3D+1%3A%0A++++++++b.append(a.pop())%0A++++else%3A%0A++++++++TowerOfHanoi(n-1,+a,+tmp,+b)%0A++++++++b.append(a.pop())%0A++++++++TowerOfHanoi(n-1,+tmp,+b,+a)%0A++++++++%0Astack1+%3D+%5B4,3,2,1%5D%0Astack2+%3D+%5B%5D%0Astack3+%3D+%5B%5D%0A++++++%0A%23+transfer+stack1+to+stack3+using+Tower+of+Hanoi+rules%0ATowerOfHanoi(len(stack1),+stack1,+stack3,+stack2)&amp;mode=display&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2&amp;curInstr=0</snippet></ROW><ROW><id>19281856</id><snippet>tal:define</snippet></ROW><ROW><id>19281856</id><snippet>tal:condition</snippet></ROW><ROW><id>19281856</id><snippet>tal:repeat</snippet></ROW><ROW><id>19281856</id><snippet>&lt;div id="publications" metal:define-macro="publications" tal:omit-tag=""&gt;
  &lt;!--publications--&gt;
  &lt;a href="selected-publications"&gt;&lt;h2&gt;Publications&lt;/h2&gt;&lt;/a&gt;
  &lt;ul style="list-style: none; margin-left: 0px; margin-right: 0px;"
      tal:define="publications nocall:context/selected-publications|nothing"
      tal:condition="publications"&gt;

    &lt;tal:block tal:repeat="publication publications/getFolderContents"&gt;
      &lt;li&gt;&lt;tal:block tal:content="publication/Authors"/&gt;
      (&lt;tal:block tal:content="publication/publication_year"/&gt;)
      &lt;a tal:attributes="href publication/getURL"
      tal:content="publication/Title"/&gt;&lt;/li&gt;&lt;br /&gt;
    &lt;/tal:block&gt;

  &lt;/ul&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>19281856</id><snippet>H2</snippet></ROW><ROW><id>19281856</id><snippet>tal:define</snippet></ROW><ROW><id>19281856</id><snippet>tal:condition</snippet></ROW><ROW><id>19281856</id><snippet>div</snippet></ROW><ROW><id>19281863</id><snippet>bootstrap.js</snippet></ROW><ROW><id>19281882</id><snippet>tldextract</snippet></ROW><ROW><id>19281882</id><snippet>tldextract</snippet></ROW><ROW><id>19281882</id><snippet>TLDExtract</snippet></ROW><ROW><id>19281882</id><snippet>fetch=False</snippet></ROW><ROW><id>19281882</id><snippet>import tldextract
no_fetch_extract = tldextract.TLDExtract(fetch=False)
no_fetch_extract('http://www.google.com')
</snippet></ROW><ROW><id>19282003</id><snippet>app.run(debug=True)</snippet></ROW><ROW><id>19282003</id><snippet>app.run(debug=True, use_reloader=False)</snippet></ROW><ROW><id>19282014</id><snippet>class PaddedStaticText(wx.Window):

    def __init__(...):
       self.text = ...
       ...

    def __getattr__(self, name):
        '''delegate missing attributes to text'''
        return getattr(self.text, name)
</snippet></ROW><ROW><id>19282014</id><snippet>__getattr__</snippet></ROW><ROW><id>19282014</id><snippet>SetFont</snippet></ROW><ROW><id>19282014</id><snippet>.text</snippet></ROW><ROW><id>19282014</id><snippet>.__text</snippet></ROW><ROW><id>19282014</id><snippet>foo = PaddedStaticText(...)
foo.text.SetFont(...)
</snippet></ROW><ROW><id>19282014</id><snippet>__getattribute__</snippet></ROW><ROW><id>19282014</id><snippet>def __getattribute__(self, name):
    if name in ('SetFont', ...):
        return getattr(self.text, name)
    else:
        return super(...).__getattribute__(self, name)
</snippet></ROW><ROW><id>19282014</id><snippet>def __init__(...):
    self.text = ...
    for name in ('SetFont', ...):
        setattr(self, name, getattr(self.text, name))
</snippet></ROW><ROW><id>19282100</id><snippet>map</snippet></ROW><ROW><id>19282100</id><snippet>None</snippet></ROW><ROW><id>19282100</id><snippet>map</snippet></ROW><ROW><id>19282100</id><snippet>map</snippet></ROW><ROW><id>19282100</id><snippet>timeit</snippet></ROW><ROW><id>19282100</id><snippet>for</snippet></ROW><ROW><id>19282460</id><snippet>result = L[0]
for num in L[1:]:
    result -= num
</snippet></ROW><ROW><id>19282460</id><snippet>sum()</snippet></ROW><ROW><id>19282460</id><snippet>map()</snippet></ROW><ROW><id>19282460</id><snippet>from operator import neg

result = sum(map(neg, L[1:]), L[0])
</snippet></ROW><ROW><id>19282460</id><snippet>operator.neg()</snippet></ROW><ROW><id>19282460</id><snippet>sum()</snippet></ROW><ROW><id>19282460</id><snippet>&gt;&gt;&gt; from operator import neg
&gt;&gt;&gt; L = [42, 10, 3, 8]
&gt;&gt;&gt; sum(map(neg, L[1:]), L[0])
21
</snippet></ROW><ROW><id>19282617</id><snippet>Driver</snippet></ROW><ROW><id>19282617</id><snippet>def test_has_right_title(self):
    title = self.browser.title
    self.assertEqual('aaa', title)
</snippet></ROW><ROW><id>19282617</id><snippet>def test_has_right_title(self):
    self.assertEqual('aaa', self.browser.title) # assuming you don't need it anywhere else
</snippet></ROW><ROW><id>19282824</id><snippet>Shell</snippet></ROW><ROW><id>19282824</id><snippet>'mysheet.csv'</snippet></ROW><ROW><id>19282824</id><snippet>r'foo\mysheet.csv'</snippet></ROW><ROW><id>19282824</id><snippet>cd</snippet></ROW><ROW><id>19282824</id><snippet>import sys, os

scriptdir = os.path.dirname(os.path.abspath(__file__))

# ... later ...

fd=open(os.path.join(scriptdir, csv_file), 'wt')
</snippet></ROW><ROW><id>19282824</id><snippet>fd = open(os.path.join(sys.argv[1], csv_file), 'wt')
</snippet></ROW><ROW><id>19282824</id><snippet>Shell (CurrentProject.Path &amp; "\Python\Python-Portable.exe " &amp; 
       CurrentProject.Path &amp; "\Python\scripts\convert.py " &amp; 
       CurrentProject.Path &amp; "\Python\scripts")
</snippet></ROW><ROW><id>19282997</id><snippet>enumerate(lst)</snippet></ROW><ROW><id>19282997</id><snippet>lst</snippet></ROW><ROW><id>19282997</id><snippet>tuple(y.x() for y in f)
</snippet></ROW><ROW><id>19282997</id><snippet>tuple()</snippet></ROW><ROW><id>19282997</id><snippet>list</snippet></ROW><ROW><id>19282997</id><snippet>tuple</snippet></ROW><ROW><id>19282997</id><snippet>(y.x() for y in f)</snippet></ROW><ROW><id>19282997</id><snippet>t = 1, 2, 3</snippet></ROW><ROW><id>19283006</id><snippet>y = x &gt;&gt; 1</snippet></ROW><ROW><id>19283006</id><snippet>rest = x&gt;&gt;1
cf = get_carry_flag()
</snippet></ROW><ROW><id>19283006</id><snippet>rest, cf = x&gt;&gt;1, x&amp;1
</snippet></ROW><ROW><id>19283006</id><snippet>x&gt;&gt;1</snippet></ROW><ROW><id>19283006</id><snippet>%</snippet></ROW><ROW><id>19283267</id><snippet>import re

num_words = "four kiddiewinks|four children|four kids"
words_list = num_words.split('|')

def append_2synonym(words_list, num_words):
    with open('test2 words.txt', 'a+') as f:
        read_f = f.read()
        patt = r'^' + words_list[0] + '\|'
        result = re.search(patt, read_f, re.MULTILINE)
        if result == None:
            f.seek(0,2) # change is here !!
            f.write("\n" + num_words)
        else:
            print "\nNo match found in '2 words.txt' file"

append_2synonym(words_list, num_words)
</snippet></ROW><ROW><id>19283267</id><snippet>f.seek(0,2)</snippet></ROW><ROW><id>19283267</id><snippet>2</snippet></ROW><ROW><id>19283267</id><snippet>from_what</snippet></ROW><ROW><id>19283267</id><snippet>from_what</snippet></ROW><ROW><id>19283267</id><snippet>0</snippet></ROW><ROW><id>19283267</id><snippet>1</snippet></ROW><ROW><id>19283267</id><snippet>2</snippet></ROW><ROW><id>19283267</id><snippet>from_what</snippet></ROW><ROW><id>19283267</id><snippet>0</snippet></ROW><ROW><id>19283268</id><snippet>from traits.api import *
from traitsui.api import *
from traitsui.ui_editors.array_view_editor import ArrayViewEditor
import numpy as np

class DContainer(HasTraits):
    _dict=Dict
    def __getattr__(self, k):
        if k in self._dict:
            return self._dict[k]

class SmallPartOfLargeApplication(HasTraits):
  d=Instance(DContainer)

  def _d_default(self):
    d=DContainer()
    d._dict={'a_stat':np.random.random((10,1)),
            'b_stat':np.random.random((10,10))}

    return d

  def traits_view(self):
    v=View(
        Item('object.d.a_stat',editor=ArrayViewEditor()))
    return v

SmallPartOfLargeApplication().configure_traits()
</snippet></ROW><ROW><id>19283284</id><snippet>int</snippet></ROW><ROW><id>19283284</id><snippet>str</snippet></ROW><ROW><id>19283284</id><snippet>"Hello World " + str(1)
</snippet></ROW><ROW><id>19283284</id><snippet> sqlFillCategories = "INSERT INTO categories(category_id, category_parentId,
 shop_id, category_name) VALUES ('"+str(category_id) + "', '" +
 str(category_parentId) + "', '" + str(TREND_BRANDS_SHOPID) + "', '" 
 + category_name + "');"
</snippet></ROW><ROW><id>19283284</id><snippet>sqlFillCategories =''
for category in categories:
        for item in category.getElementsByTagName("category"):
            category_name = item.childNodes[0].nodeValue.encode("utf-8")
            category_id = int(item.getAttribute('id'))
            category_parentId = item.getAttribute('parentId') 
            sqlFillCategories += 
            "INSERT INTO categories(category_id, category_parentId, shop_id, 
            category_name) VALUES ('"+category_id + "', '" + 
            category_parentId + "','" + TREND_BRANDS_SHOPID + "',
             '" + category_name + "');"
</snippet></ROW><ROW><id>19283284</id><snippet>sqlFillCategories</snippet></ROW><ROW><id>19283288</id><snippet>import numpy as np

a = [1,1,1,2]
b = [2,2,4,3]

all_larger = np.all(np.asarray(b) &gt; np.asarray(a))  # true if b &gt; a holds elementwise

print all_larger

        True
</snippet></ROW><ROW><id>19283288</id><snippet>all_larger = lambda b,a : np.all(np.asarray(b) &gt; np.asarray(a))

if all_larger(b,a):
       print "b &gt; a"
elif all_larger(a,b):
       print "a &gt; b"

else
       print "nothing!"
</snippet></ROW><ROW><id>19283288</id><snippet>&lt;, &gt;, &lt;=, &gt;=,</snippet></ROW><ROW><id>19283360</id><snippet>while True:
  # your entire program goes here

  try_again = int(input("Press 1 to try again, 0 to exit. "))
  if try_again == 0:
      break # break out of the outer while loop
</snippet></ROW><ROW><id>19283361</id><snippet>_pack_</snippet></ROW><ROW><id>19283361</id><snippet>class TMapCell(Structure):

    _pack_ = 1

    _fields_ = [
        ('Tile', c_ushort),
        ('Z', c_byte),
    ]
</snippet></ROW><ROW><id>19283461</id><snippet>def get_all_values(list_o_dicts):
    return [value for a_dict in list_o_dicts for value in a_dict.values()]
</snippet></ROW><ROW><id>19283461</id><snippet>def get_values(list_o_dicts, key):
    return [a_dict[key] for a_dict in list_o_dicts]
</snippet></ROW><ROW><id>19283461</id><snippet>&gt;&gt;&gt; src = [
...     {'a': 1, 'b': 2},
...     {'a': 3}
... ]
&gt;&gt;&gt; get_all_values(src)
[1, 2, 3]
&gt;&gt;&gt; get_values(src, 'a')
[1, 3]
</snippet></ROW><ROW><id>19283567</id><snippet>exclude = set(b)  # O(m)

new_list = [x for x in a if x not in exclude]  # O(n)
</snippet></ROW><ROW><id>19283567</id><snippet>b</snippet></ROW><ROW><id>19283567</id><snippet>&gt;&gt;&gt; a = ['a','b','c','d','e']
&gt;&gt;&gt; b = ['a','b','c','f','g']
&gt;&gt;&gt; 
&gt;&gt;&gt; exclude = set(b)
&gt;&gt;&gt; new_list = [x for x in a if x not in exclude]
&gt;&gt;&gt; 
&gt;&gt;&gt; new_list
['d', 'e']
</snippet></ROW><ROW><id>19283751</id><snippet> import sys
 sys.path.append('/opt/foo/bin')
 import foo
</snippet></ROW><ROW><id>19283863</id><snippet>A.CONSTANT_NAME</snippet></ROW><ROW><id>19283863</id><snippet>import A
class B:
    def makeAchoice(matchType=A.MATCH_ANY):
         instanceA = A()
         instanceA.setMatchType(A.MATCH_ANY) 
</snippet></ROW><ROW><id>19284031</id><snippet>os.system('python another/location/test2.py %s' % ' '.join(argList))
</snippet></ROW><ROW><id>19284031</id><snippet>['-a', '-b', '-c']
</snippet></ROW><ROW><id>19284031</id><snippet>' '.join("'%s'" % arg.replace("'", "\\'") for arg in ArgList)</snippet></ROW><ROW><id>19284123</id><snippet>engine = create_engine("mysql://user:password@host/dbname")
Session.configure(bind=engine)
</snippet></ROW><ROW><id>19284123</id><snippet>db1</snippet></ROW><ROW><id>19284146</id><snippet>self.on_the_fly</snippet></ROW><ROW><id>19284146</id><snippet>connect</snippet></ROW><ROW><id>19284146</id><snippet>None</snippet></ROW><ROW><id>19284146</id><snippet>on_the_fly</snippet></ROW><ROW><id>19284146</id><snippet>None</snippet></ROW><ROW><id>19284146</id><snippet>button.connect("clicked", self.on_the_fly, "a")

button.connect("clicked", lambda: self.on_the_fly("a"), None)
</snippet></ROW><ROW><id>19284146</id><snippet>button.connect("clicked", self.on_the_fly, ("a", button))

button.connect("clicked", lambda: self.on_the_fly("a", button), None)
</snippet></ROW><ROW><id>19284146</id><snippet>on_the_fly</snippet></ROW><ROW><id>19284146</id><snippet>def on_the_fly(self, input, widget):
    logging.debug(  'Clicked at x={0}, y={0}' )
    widget.set_sensitive(False)
    gtk.timeout_add_seconds(5*60, widget.set_sensitive, True)
    # rest of function
</snippet></ROW><ROW><id>19284157</id><snippet>vis</snippet></ROW><ROW><id>19284157</id><snippet>bags</snippet></ROW><ROW><id>19284157</id><snippet>class bfs:
    def __init__(self, x):
        self.vis = []
        self.bags = []
        # etc.
</snippet></ROW><ROW><id>19284157</id><snippet>class MyClass:
    """A simple example class"""
    i = 12345
    def f(self):
        return 'hello world'
</snippet></ROW><ROW><id>19284157</id><snippet>__init__</snippet></ROW><ROW><id>19284382</id><snippet>Â</snippet></ROW><ROW><id>19284382</id><snippet>encode("cp1252")</snippet></ROW><ROW><id>19284382</id><snippet>print</snippet></ROW><ROW><id>19284382</id><snippet>u'\u00a3'.encode('utf-8').decode('latin-1') == u'\u00c2\u00a3'</snippet></ROW><ROW><id>19284382</id><snippet>u'\u00c2'</snippet></ROW><ROW><id>19284382</id><snippet>Â</snippet></ROW><ROW><id>19284382</id><snippet>u'\u00a3'.encode('latin-1').decode('utf-8')</snippet></ROW><ROW><id>19284382</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>19284388</id><snippet>and</snippet></ROW><ROW><id>19284388</id><snippet>or</snippet></ROW><ROW><id>19284388</id><snippet>{% if user.username in req.accepted.all and user.username not in req.declined.all or
      user.username not in req.accepted.all and user.username in req.declined.all %}
</snippet></ROW><ROW><id>19284388</id><snippet>with</snippet></ROW><ROW><id>19284388</id><snippet>{% with accepted=req.accepted.all declined=req.declined.all username=user.username %}
    {% if username in accepted and username not in declined or
          username not in accepted and username in declined %}
    ...
{% endwith %}
</snippet></ROW><ROW><id>19284512</id><snippet>from collections import deque
fname = "source.txt"
last_lines = deque(maxlen = 4)
with open(fname) as f:
  text = f.read()
  for line in text.splitlines(True):
    last_lines.append(line)
#f is closed when we leave the block 

outfname = fname
with open(outfname, "w") as of:
  for line in last_lines:
    of.write(line)
</snippet></ROW><ROW><id>19284512</id><snippet>from collections import deque
fname = "source.txt"
last_lines = deque(maxlen = 4)
for line in open(fname):
  last_lines.append(line)
#file is closed when we leave the (for) block

outfname = fname
with open(outfname, "w") as of:
  for line in last_lines:
    of.write(line)
</snippet></ROW><ROW><id>19284512</id><snippet>from collections import deque
with open("target.txt", "w") as out_f:
  for line in deque(open("source.txt"), maxlen = 4):
    out_f.write(line)
</snippet></ROW><ROW><id>19284572</id><snippet>[d for d in dataList if not d.endswith('.shp')]
</snippet></ROW><ROW><id>19284572</id><snippet>&gt;&gt;&gt; ['the train', 'a mall', 'the ferry', 'a viaduct']
</snippet></ROW><ROW><id>19284832</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; A = []
&gt;&gt;&gt; sz = sys.getsizeof(A)
&gt;&gt;&gt; for i in range(100000):
...     if sz != sys.getsizeof(A):
...         sz = sys.getsizeof(A)
...         print i, sz
...     A.append(i)
... 
1 48
5 64
9 96
17 132
26 172
36 216
47 264
59 320
73 384
89 456
107 536
127 624
149 724
174 836
202 964
234 1108
270 1268
310 1448
355 1652
406 1880
463 2136
527 2424
599 2748
680 3116
772 3528
875 3992
991 4512
1121 5100
1268 5760
1433 6504
1619 7340
1828 8280
2063 9336
2327 10524
2624 11864
2959 13368
3335 15060
3758 16964
4234 19108
4770 21520
5373 24232
6051 27284
6814 30716
7672 34580
8638 38924
9724 43812
10946 49312
12321 55500
13868 62460
15608 70292
17566 79100
19768 89012
22246 100160
25033 112704
28169 126816
31697 142692
35666 160552
40131 180644
45154 203248
50805 228676
57162 257284
64314 289468
72360 325676
81412 366408
91595 412232
</snippet></ROW><ROW><id>19285072</id><snippet>D</snippet></ROW><ROW><id>19285072</id><snippet>main</snippet></ROW><ROW><id>19285072</id><snippet>main</snippet></ROW><ROW><id>19285072</id><snippet>def main():
    D = {} #create empty dictionary
    for x in open('wvtc_data.txt'):
        key, name, email, record = x.strip().split(':')
        key = int(key) #convert key from string to integer
        D[key] = {} #initialize key value with empty dictionary
        D[key]['name'] = name
        D[key]['email'] = email
        D[key]['record'] = record
    return D

D = main()
print(D[106]['name'])
print(D[110]['email'])
</snippet></ROW><ROW><id>19285271</id><snippet>1 / 2</snippet></ROW><ROW><id>19285271</id><snippet>from __future__ import division</snippet></ROW><ROW><id>19285271</id><snippet>0</snippet></ROW><ROW><id>19285271</id><snippet>0.5</snippet></ROW><ROW><id>19285271</id><snippet>1./2</snippet></ROW><ROW><id>19285271</id><snippet>[  3.00000000e-01   1.14967789e+00   7.48854782e-04]
</snippet></ROW><ROW><id>19285271</id><snippet>res.x</snippet></ROW><ROW><id>19285289</id><snippet>import numpy as np

def fast_wdist(A, B, W):
    """
    Compute the weighted euclidean distance between two arrays of points:

    D{i,j} = 
    sqrt( ((A{0,i}-B{0,j})/W{0,i})^2 + ... + ((A{k,i}-B{k,j})/W{k,i})^2 )

    inputs:
        A is an (k, m) array of coordinates
        B is an (k, n) array of coordinates
        W is an (k, m) array of weights

    returns:
        D is an (m, n) array of weighted euclidean distances
    """

    # compute the differences and apply the weights in one go using
    # broadcasting jujitsu. the result is (n, k, m)
    wdiff = (A[np.newaxis,...] - B[np.newaxis,...].T) / W[np.newaxis,...]

    # square and sum over the second axis, take the sqrt and transpose. the
    # result is an (m, n) array of weighted euclidean distances
    D = np.sqrt((wdiff*wdiff).sum(1)).T

    return D
</snippet></ROW><ROW><id>19285289</id><snippet>def slow_wdist(A, B, W):

    k,m = A.shape
    _,n = B.shape
    D = np.zeros((m, n))

    for ii in xrange(m):
        for jj in xrange(n):
            wdiff = (A[:,ii] - B[:,jj]) / W[:,ii]
            D[ii,jj] = np.sqrt((wdiff**2).sum())
    return D
</snippet></ROW><ROW><id>19285289</id><snippet># make some random points and weights
def setup(k=2, m=100, n=300):
    return np.random.randn(k,m), np.random.randn(k,n),np.random.randn(k,m)

a, b, w = setup()
d0 = slow_wdist(a, b, w)
d1 = fast_wdist(a, b, w)

print np.allclose(d0, d1)
# True
</snippet></ROW><ROW><id>19285289</id><snippet>%%timeit a, b, w = setup()
slow_wdist(a, b, w)
# 1 loops, best of 3: 647 ms per loop

%%timeit a, b, w = setup()
fast_wdist(a, b, w)
# 1000 loops, best of 3: 620 us per loop
</snippet></ROW><ROW><id>19285293</id><snippet>print</snippet></ROW><ROW><id>19285293</id><snippet>print</snippet></ROW><ROW><id>19285293</id><snippet>try</snippet></ROW><ROW><id>19285293</id><snippet>except</snippet></ROW><ROW><id>19285296</id><snippet>cls._init_attributes()</snippet></ROW><ROW><id>19285296</id><snippet>_init_attributes()</snippet></ROW><ROW><id>19285296</id><snippet>@classmethod
def from_file(cls, filename=None)
    obj = cls()
    obj._init_attributes()
    # do other stuff like reading from file
    return obj
</snippet></ROW><ROW><id>19285296</id><snippet>cls()</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>def __init__(self, name="", revision=None, _skip_default_init=False):
    # blah blah

@classmethod
def from_file(cls, filename=""):
    # blah blah setup
    obj = cls(_skip_default_init=True)
    # extra initialization work
    return obj
</snippet></ROW><ROW><id>19285296</id><snippet>**kwargs</snippet></ROW><ROW><id>19285296</id><snippet>_skip_default_init</snippet></ROW><ROW><id>19285296</id><snippet>__new__</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>__new__</snippet></ROW><ROW><id>19285296</id><snippet>cls</snippet></ROW><ROW><id>19285296</id><snippet>__new__</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>obj.__class__</snippet></ROW><ROW><id>19285296</id><snippet>__class__</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>super</snippet></ROW><ROW><id>19285296</id><snippet>super</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285296</id><snippet>__init__</snippet></ROW><ROW><id>19285307</id><snippet>python dev_appserver.py yourappfolder
</snippet></ROW><ROW><id>19285439</id><snippet>if findme in line</snippet></ROW><ROW><id>19285439</id><snippet> url=http\://pbx/register?username=E300B1&amp;password=1234&amp;option=localip&amp;localip=
</snippet></ROW><ROW><id>19285439</id><snippet>def readini(findme):
  f = open('/var/tmp/file.ini', "r")
  for line in f:
    if "=" in line:
        key,val = line.split("=",1)
        if findme in key:
            return val.replace("\\n", "").rstrip()
</snippet></ROW><ROW><id>19285564</id><snippet>dividend = divisor * quotient + remainder
</snippet></ROW><ROW><id>19285564</id><snippet>rem</snippet></ROW><ROW><id>19285564</id><snippet>mod</snippet></ROW><ROW><id>19285564</id><snippet>rem</snippet></ROW><ROW><id>19285564</id><snippet>div</snippet></ROW><ROW><id>19285564</id><snippet>mod</snippet></ROW><ROW><id>19285564</id><snippet>div</snippet></ROW><ROW><id>19285564</id><snippet>rem</snippet></ROW><ROW><id>19285564</id><snippet>remainder</snippet></ROW><ROW><id>19285564</id><snippet>mod</snippet></ROW><ROW><id>19285564</id><snippet>modulo</snippet></ROW><ROW><id>19285751</id><snippet>for val in S0:
   do something with val...
</snippet></ROW><ROW><id>19285751</id><snippet>for i in range(0,len(S0))
   do something with S0[i]...
</snippet></ROW><ROW><id>19285772</id><snippet>class Option(models.Model):
    value = models.CharField(max_length=200)
    objects = OptionManager()
    def __str__(self):
        return self.value

    def test(self):
        test = "test"
        return test
</snippet></ROW><ROW><id>19285772</id><snippet>{{ o.objects.test }}
</snippet></ROW><ROW><id>19285852</id><snippet>$ python myerr.py 
MyErr('bang!',) from ZeroDivisionError('integer division or modulo by zero',)
MyErr('nobang!',)
</snippet></ROW><ROW><id>19285852</id><snippet>import sys
import opcode

SETUP_EXCEPT = opcode.opmap["SETUP_EXCEPT"]
SETUP_FINALLY = opcode.opmap["SETUP_FINALLY"]
END_FINALLY = opcode.opmap["END_FINALLY"]

def try_blocks(co):
    """Generate code positions for try/except/end-of-block."""
    stack = []
    code = co.co_code
    n = len(code)
    i = 0
    while i &lt; n:
        op = ord(code[i])
        if op in (SETUP_EXCEPT, SETUP_FINALLY):
            stack.append((i, i + ord(code[i+1]) + ord(code[i+2])*256))
        elif op == END_FINALLY:
            yield stack.pop() + (i,)
        i += 3 if op &gt;= opcode.HAVE_ARGUMENT else 1

class MyErr(Exception):
    """Magic exception."""

    def __init__(self, *args):
        callee = sys._getframe(1)
        try:
            in_except = any(i[1] &lt;= callee.f_lasti &lt; i[2] for i in try_blocks(callee.f_code))
        finally:
            callee = None

        Exception.__init__(self, *args)
        self.cause = sys.exc_info()[1] if in_except else None

    def __str__(self):
        return "%r from %r" % (self, self.cause) if self.cause else repr(self)

if __name__ == "__main__":
    try:
        try:
            1/0
        except:
            x = MyErr('bang!')
            raise x
    except Exception as exc:
        print exc

    try:
        raise MyErr('nobang!')
    except Exception as exc:
        print exc
    finally:
        pass
</snippet></ROW><ROW><id>19285852</id><snippet>try:
    …
except Exception as exc:
    raise MyErr("msg", cause=exc)
</snippet></ROW><ROW><id>19285939</id><snippet>lambda</snippet></ROW><ROW><id>19285939</id><snippet>..., command=(lambda: exp(Output)))
</snippet></ROW><ROW><id>19285964</id><snippet>def main():
    largest = 0
    smallest = 0
    while (number != -99):
        if number &gt; largest:
            largest = number
        elif number &lt; smallest:
            smallest = number
        number = int(input('Input a number, enter -99 to stop')) # Indent this line
</snippet></ROW><ROW><id>19285964</id><snippet>while</snippet></ROW><ROW><id>19285964</id><snippet>number</snippet></ROW><ROW><id>19285964</id><snippet>while</snippet></ROW><ROW><id>19285964</id><snippet>while (number != -99):
### The while loop starts here ###
    if number &gt; largest:
        largest = number
    elif number &lt; smallest:
        smallest = number
### The while loop ends here ###
number = int(input('Input a number, enter -99 to stop'))
</snippet></ROW><ROW><id>19285964</id><snippet>while</snippet></ROW><ROW><id>19285964</id><snippet>number</snippet></ROW><ROW><id>19285964</id><snippet>number</snippet></ROW><ROW><id>19285964</id><snippet>input</snippet></ROW><ROW><id>19285964</id><snippet>while (number != -99):
### The while loop starts here ###
    if number &gt; largest:
        largest = number
    elif number &lt; smallest:
        smallest = number
    number = int(input('Input a number, enter -99 to stop'))
### The while loop ends here ###
</snippet></ROW><ROW><id>19285964</id><snippet>showNumber</snippet></ROW><ROW><id>19285964</id><snippet>main</snippet></ROW><ROW><id>19285964</id><snippet>showNumber</snippet></ROW><ROW><id>19285964</id><snippet>main</snippet></ROW><ROW><id>19285964</id><snippet>def main():
    largest = 0
    smallest = 0
    while (number != -99):
        if number &gt; largest:
            largest = number
        elif number &lt; smallest:
            smallest = number
        number = int(input('Input a number, enter -99 to stop'))
    showNumber(smallest, largest)
</snippet></ROW><ROW><id>19286040</id><snippet>tools = Tool.objects.filter(owner__user=request.user).order_by('name')
</snippet></ROW><ROW><id>19286209</id><snippet>elif</snippet></ROW><ROW><id>19286209</id><snippet>if</snippet></ROW><ROW><id>19286209</id><snippet>if something:
    do_somtething()
elif something_else:
    do_the_other_thing()
</snippet></ROW><ROW><id>19286213</id><snippet>IS_URL(prepend_scheme=None)</snippet></ROW><ROW><id>19286213</id><snippet>prepend_scheme</snippet></ROW><ROW><id>19286303</id><snippet>pip install South
</snippet></ROW><ROW><id>19286303</id><snippet>python manage.py schemamigration myapp --initial
python manage.py migrate myapp --fake 
#Make changes to your django model (add new field)
python manage.py schemamigration myapp --auto 
python manage.py migrate myapp
</snippet></ROW><ROW><id>19286397</id><snippet>import json

user_dict = {'some user': 'some password'}

with open('my_database.json', 'w') as db:
    json.dump(user_dict, db)

# Now the data can be can easily loaded
user_data = json.load(open('my_database.json'))

# This will get you the dictionary back. 
</snippet></ROW><ROW><id>19286437</id><snippet>url(r'^pages/$', include('project.pages.urls')),
</snippet></ROW><ROW><id>19286437</id><snippet>$</snippet></ROW><ROW><id>19286437</id><snippet>urls.py</snippet></ROW><ROW><id>19286437</id><snippet>$</snippet></ROW><ROW><id>19286489</id><snippet>A2 = A.reshape(time_len, -1)
regressions = np.polyfit(X, A2, degree)
regressions = regressions.reshape(A.shape)
</snippet></ROW><ROW><id>19286489</id><snippet>polyfit</snippet></ROW><ROW><id>19286489</id><snippet>A2</snippet></ROW><ROW><id>19286509</id><snippet>xml.etree.ElementTree.iterparse</snippet></ROW><ROW><id>19286509</id><snippet>xml.sax.parse</snippet></ROW><ROW><id>19286641</id><snippet>tuple</snippet></ROW><ROW><id>19286641</id><snippet>import random

def gen():
    for _ in range(10):
        i=random.randint(0,100)
        if i%2:
            yield True, str(i)
        else:
            yield False, str(i)

def test():
    for j, i in gen():
        if j:
            process1()
        else:
            process2()
</snippet></ROW><ROW><id>19286641</id><snippet>import random

def gen():
    for _ in range(10):
        i=random.randint(0,100)
        if i%2:
            yield process1, str(i)
        else:
            yield process2, str(i)

def test():
    for fn, i in gen():
        fn()
</snippet></ROW><ROW><id>19286650</id><snippet>print eval(raw_input(), {"__builtins__":None}, {'pi':math.pi})
</snippet></ROW><ROW><id>19286650</id><snippet>([x for x in 1.0.__class__.__base__.__subclasses__()
   if x.__name__ == 'catch_warnings'][0]()
   )._module.__builtins__['__import__']('os').system('echo hi!')
</snippet></ROW><ROW><id>19286650</id><snippet>1.0.__class__.__base__.__subclasses__().__getitem__(i)()._module.__builtins__.get('__import__')('os').system('echo hi')
</snippet></ROW><ROW><id>19286695</id><snippet>all</snippet></ROW><ROW><id>19286695</id><snippet>def numb(a, b, c, d, e):
    assert all(x in {3, 5, 7} for x in (a, b, c, d, e))
</snippet></ROW><ROW><id>19286695</id><snippet>def numb(a, b, c, d, e):
    assert {a, b, c, d, e} &lt;= {3, 5, 7}
</snippet></ROW><ROW><id>19286715</id><snippet>        return "You rolled a", diceTotal
        return "You Lose: Crap-Out!"
</snippet></ROW><ROW><id>19286715</id><snippet>rollDice == rollDice</snippet></ROW><ROW><id>19286740</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.arange(1,10)
&gt;&gt;&gt; mask = np.ones(arr.shape,dtype=bool)
&gt;&gt;&gt; mask[5]=0
&gt;&gt;&gt; arr[mask]
array([1, 2, 3, 4, 5, 7, 8, 9])
</snippet></ROW><ROW><id>19286740</id><snippet>itertools</snippet></ROW><ROW><id>19286740</id><snippet>numpy</snippet></ROW><ROW><id>19286740</id><snippet>&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; arr = range(1,10)
&gt;&gt;&gt; mask = [1]*len(arr)
&gt;&gt;&gt; mask[5]=0
&gt;&gt;&gt; list(compress(arr,mask))
[1, 2, 3, 4, 5, 7, 8, 9]
</snippet></ROW><ROW><id>19286957</id><snippet>iterator</snippet></ROW><ROW><id>19286957</id><snippet>for ... in</snippet></ROW><ROW><id>19286957</id><snippet>&gt;&gt;&gt; iterator = p.finditer('12 drummers, 11 pipers, 10 dancers')
</snippet></ROW><ROW><id>19287146</id><snippet>from collections import defaultdict

words = 'dog god steer reste trees dog fred steer'.split() # or words from a file

unique_words = set(words)
anagram_dict = defaultdict(list)
for word in unique_words:
    key = "".join(sorted(word))
    anagram_dict[key].append(word)

for anagram_list in anagram_dict.values():
    if len(anagram_list) &gt; 1:
        print(*anagram_list)
</snippet></ROW><ROW><id>19287146</id><snippet>god dog
steer trees reste
</snippet></ROW><ROW><id>19287146</id><snippet>items</snippet></ROW><ROW><id>19287146</id><snippet>values</snippet></ROW><ROW><id>19287146</id><snippet>anagram_dict</snippet></ROW><ROW><id>19287146</id><snippet>'fred'</snippet></ROW><ROW><id>19287146</id><snippet>set</snippet></ROW><ROW><id>19287146</id><snippet>O(M + U*N*log(N))</snippet></ROW><ROW><id>19287146</id><snippet>M</snippet></ROW><ROW><id>19287146</id><snippet>U</snippet></ROW><ROW><id>19287146</id><snippet>N</snippet></ROW><ROW><id>19287193</id><snippet>list</snippet></ROW><ROW><id>19287193</id><snippet>int</snippet></ROW><ROW><id>19287236</id><snippet>long</snippet></ROW><ROW><id>19287236</id><snippet>yesterday = {'facebook_adgroups': [4634L], 'google_third_party_tags': [1790L]}

for k, v in yesterday.iteritems():
    i = 0
    print v[0]
    yesterday[k] = v[0]
    i += 1

print yesterday
</snippet></ROW><ROW><id>19287236</id><snippet>4634
1790
{'facebook_adgroups': 4634L, 'google_third_party_tags': 1790L}
</snippet></ROW><ROW><id>19287236</id><snippet>L</snippet></ROW><ROW><id>19287236</id><snippet>yesterday[k] = int(v[0])
</snippet></ROW><ROW><id>19287236</id><snippet>{'facebook_adgroups': 4634, 'google_third_party_tags': 1790}
</snippet></ROW><ROW><id>19287236</id><snippet>yNum[0] = yesterday['facebook_adgroups']
yNum[1] = yesterday['google_third_party_tags']
</snippet></ROW><ROW><id>19287236</id><snippet>int()</snippet></ROW><ROW><id>19287255</id><snippet>total_count = Answer.objects.filter(option__question=question_id).count()
perc_dict = { }
for o in q.option_set.all():
    cnt = Answer.objects.filter(option=o).count()
    perc = cnt * 100 / total_count
    perc_dict.update( {o.value: perc} )

#after this the perc_dict will have percentages for all options that you can pass to template.
</snippet></ROW><ROW><id>19287255</id><snippet>Option</snippet></ROW><ROW><id>19287255</id><snippet>class Option(models.Model):
    question = models.ForeignKey(Question)
    value = models.CharField(max_length=200)
    def get_percentage(self):
        total_count = Answer.objects.filter(option__question=self.question).count()
        cnt = Answer.objects.filter(option=self).count()
        perc = cnt * 100 / total_count
        return perc
</snippet></ROW><ROW><id>19287255</id><snippet>{% for opt in o %}
     &lt;tr&gt;
         &lt;td&gt;{{ opt }}&lt;/td&gt;
     &lt;td&gt;{{ opt.num_votes }}&lt;/td&gt;
     &lt;td&gt;{{ opt.get_percentage }}&lt;/td&gt;
&lt;/tr&gt;
 {% endfor %}
</snippet></ROW><ROW><id>19287553</id><snippet>Python 2.7 (r27:82525, Jul  4 2010, 09:01:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = {}
&gt;&gt;&gt; for k in xrange(1000000): a['a' * k] = k
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
MemoryError
&gt;&gt;&gt; len(a)
64036
</snippet></ROW><ROW><id>19287553</id><snippet>&gt;&gt;&gt; log(sum(xrange(64036)), 2)
30.93316861532543
</snippet></ROW><ROW><id>19287553</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(a)
1573004
</snippet></ROW><ROW><id>19287553</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>19287553</id><snippet>&gt;&gt;&gt; a = {}
</snippet></ROW><ROW><id>19287553</id><snippet>&gt;&gt;&gt; for k in xrange(1000000): a[k] = k
</snippet></ROW><ROW><id>19287553</id><snippet>MemoryError
</snippet></ROW><ROW><id>19287553</id><snippet>&gt;&gt;&gt; len(a)
87382
</snippet></ROW><ROW><id>19287775</id><snippet>( python argument1.txt argument2.txt &gt;logfile.log 2&gt;logfile.err &amp; ) &amp;
</snippet></ROW><ROW><id>19287775</id><snippet>2&gt;logfile.err</snippet></ROW><ROW><id>19287775</id><snippet>2&gt;&amp;1</snippet></ROW><ROW><id>19287888</id><snippet>endprog = "start" 

while endprog != "exit":

    para = int(input("Enter a number 1-9 -&gt; "))

    if para == 1:
        print(''' THE ORIGINATOR
1's are originals. Coming up with new ideas and executing them is
natural. Having things their own way is another trait that gets them as
being stubborn and arrogant. 1\'s are extremely honest and do well to
learn some diplomacy skills. They like to take the initiative and are
often leaders or bosses, as they like to be the best. Being
self-employed is definitely helpful for them. Lesson to learn: Others'
ideas might be just as good or better and to stay open minded.
Famous 1's: Tom Hanks, Robert Redford, Hulk Hogan, Carol Burnett, Wynona
Judd, Nancy Reagan, Raque l Welch.''')
    elif para == 2:
        print('''" THE PEACEMAKER
2's are the born diplomats. They are aware of others' needs and moods
and often think of others before themselves. Naturally analytical and
very intuitive they don't like to be alone. Friendship and companionship
is very important and can lead them to be successful in life, but on the
other hand they'd rather be alone than in an uncomfortable relationship.
Being naturally shy they should learn to boost their self-esteem and
express themselves freely and seize the moment and not put things off.
Famous 2's: President Bill Clinton, Madonna, Whoopee Goldberg, Thomas
Edison, Wolfgang Amadeus Mozart."''')
</snippet></ROW><ROW><id>19287937</id><snippet>pattern.match</snippet></ROW><ROW><id>19287937</id><snippet>pattern.search</snippet></ROW><ROW><id>19287937</id><snippet>re.match()</snippet></ROW><ROW><id>19287937</id><snippet>re.search()</snippet></ROW><ROW><id>19288413</id><snippet>^keyword.*(?:\n^\t.*)*
</snippet></ROW><ROW><id>19288413</id><snippet>m</snippet></ROW><ROW><id>19288413</id><snippet>^</snippet></ROW><ROW><id>19288413</id><snippet>s</snippet></ROW><ROW><id>19288413</id><snippet>.</snippet></ROW><ROW><id>19288413</id><snippet>^keyword</snippet></ROW><ROW><id>19288413</id><snippet>keyword</snippet></ROW><ROW><id>19288413</id><snippet>.*</snippet></ROW><ROW><id>19288413</id><snippet>(?:\n^\t.*)*</snippet></ROW><ROW><id>19288481</id><snippet>{..}</snippet></ROW><ROW><id>19288481</id><snippet>#{..}</snippet></ROW><ROW><id>19288481</id><snippet>str.format_map</snippet></ROW><ROW><id>19288481</id><snippet>str.format</snippet></ROW><ROW><id>19288481</id><snippet>&gt;&gt;&gt; d = {'t1': 'm1', 'year': '2003'}
&gt;&gt;&gt; fmt = "select * from records where year = {year} and t1 = {t1}"
&gt;&gt;&gt; fmt.format_map(d) # available only in Python 3.2+
'select * from records where year = 2003 and t1 = m1'
&gt;&gt;&gt; fmt.format(**d)
'select * from records where year = 2003 and t1 = m1'
</snippet></ROW><ROW><id>19288481</id><snippet>re.sub</snippet></ROW><ROW><id>19288481</id><snippet>&gt;&gt;&gt; d = {'t1': 'm1', 'year': '2003'}
&gt;&gt;&gt; fmt = "select * from records where year = #{year} and t1 = #{t1}"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'#\{(.*?)\}', lambda m: d[m.group(1)], fmt) # m -&gt; match object
'select * from records where year = 2003 and t1 = m1'
</snippet></ROW><ROW><id>19288497</id><snippet>for key in sorted(yourDictionary.keys()):
    # Use as key and yourDictionary[key]
</snippet></ROW><ROW><id>19288813</id><snippet>start = '1.0'
    while 1:                
        tag_start = self.text.search(word, start, stopindex=END, regexp=True)                
        if not tag_start: break
        tag_end = '%s+%dc' % (tag_start, len(word))
        self.text.tag_add('bold', tag_start, tag_end)
        self.text.tag_configure('bold', font='TkDefaultFont 9 bold')
        start = tag_start + "+1c"
</snippet></ROW><ROW><id>19288889</id><snippet>coverage erase
tox
coverage combine
coveralls
</snippet></ROW><ROW><id>19288889</id><snippet>python {envbindir}/coverage run -p testing/run_tests.py
python {envbindir}/coverage run -p testing/run_tests.py testing.settings_no_debug
</snippet></ROW><ROW><id>19288952</id><snippet>$ sudo pip install redis
</snippet></ROW><ROW><id>19288952</id><snippet>$ sudo easy_install redis
</snippet></ROW><ROW><id>19288952</id><snippet>$ sudo python setup.py install
</snippet></ROW><ROW><id>19288952</id><snippet>&gt;&gt;&gt; import redis
&gt;&gt;&gt; r = redis.StrictRedis(host='localhost', port=6379, db=0)
&gt;&gt;&gt; r.set('foo', 'bar')
True
&gt;&gt;&gt; r.get('foo')
'bar'
</snippet></ROW><ROW><id>19289058</id><snippet>time.timezone</snippet></ROW><ROW><id>19289058</id><snippet>time.altzone</snippet></ROW><ROW><id>19289058</id><snippet>daylight</snippet></ROW><ROW><id>19289058</id><snippet>time.altzone</snippet></ROW><ROW><id>19289058</id><snippet>time.daylight</snippet></ROW><ROW><id>19289058</id><snippet>import time

def my_timezone():
    is_dst = time.daylight and time.localtime().tm_isdst
    offset = time.altzone if is_dst else time.timezone
    westerly = offset &gt; 0
    minutes, seconds = divmod(abs(offset), 60)
    hours, minutes = divmod(minutes, 60)
    return '{}{:02d}{:02d}'.format('-' if westerly else '+', hours, minutes)
</snippet></ROW><ROW><id>19289058</id><snippet>divmod()</snippet></ROW><ROW><id>19289058</id><snippet>&gt;&gt;&gt; my_timezone()
'+0100'
</snippet></ROW><ROW><id>19289225</id><snippet>np.corrcoef(array([63,84]),array([46,42]))
[[ 1. -1.]
 [-1.  1.]]
</snippet></ROW><ROW><id>19289225</id><snippet>n=3</snippet></ROW><ROW><id>19289225</id><snippet>n</snippet></ROW><ROW><id>19289225</id><snippet>p</snippet></ROW><ROW><id>19289225</id><snippet>n&gt;=max(3,p)
</snippet></ROW><ROW><id>19289225</id><snippet>p=2</snippet></ROW><ROW><id>19289225</id><snippet>n&gt;=3</snippet></ROW><ROW><id>19289256</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>19289435</id><snippet># ... only if version &gt;= 2.7
with self.assertRaises(IntegrityError):
    db.session.commit()
</snippet></ROW><ROW><id>19289435</id><snippet>self.assertRaises(IntegrityError, db.session.commit)
</snippet></ROW><ROW><id>19289435</id><snippet># Your example: You call db.session.commit(), this will raise an exception before
# assertRaises is called
self.assertRaises(IntegrityError, db.session.commit())

# Correct way: Pass what should be called to assertRaises, 
# let assertRaises invoke it and check for exception
self.assertRaises(IntegrityError, db.session.commit)
</snippet></ROW><ROW><id>19289435</id><snippet>with</snippet></ROW><ROW><id>19289683</id><snippet>arr = np.zeros((N, M, T))
for it in xrange(T):
    arr[:,:,it] -= np.sum(arr[:,:,:it], axis=2)
</snippet></ROW><ROW><id>19289683</id><snippet>for it in xrange(T): arr[:,:,it] -= np.sum(arr[:,:,:it], axis=2)
</snippet></ROW><ROW><id>19289683</id><snippet>arr</snippet></ROW><ROW><id>19290037</id><snippet>print</snippet></ROW><ROW><id>19290037</id><snippet>print</snippet></ROW><ROW><id>19290037</id><snippet>return</snippet></ROW><ROW><id>19290037</id><snippet>print</snippet></ROW><ROW><id>19290037</id><snippet>None</snippet></ROW><ROW><id>19290037</id><snippet>print</snippet></ROW><ROW><id>19290037</id><snippet>None</snippet></ROW><ROW><id>19290037</id><snippet>def foo(aList):
    listLen = len(aList) 
    return list(range(listLen))

x=[10,20,30,40,50]
print(foo(x))
</snippet></ROW><ROW><id>19290120</id><snippet>createSessionResponse</snippet></ROW><ROW><id>19290120</id><snippet>http://schemas.xmlsoap.org/soap/envelope/</snippet></ROW><ROW><id>19290120</id><snippet>&gt;&gt;&gt; import lxml.objectify
&gt;&gt;&gt; doc = """&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;soapenv:envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;soapenv:body&gt;&lt;createsessionresponse soapenv:encodingstyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;&lt;createsessionreturn xsi:type="xsd:string"&gt;59C3F170141E9CF6F5BF98FB39B0237B&lt;/createsessionreturn&gt;&lt;/createsessionresponse&gt;&lt;/soapenv:body&gt;&lt;/soapenv:envelope&gt;"""
&gt;&gt;&gt; obj = lxml.objectify.fromstring(doc)
&gt;&gt;&gt; obj
&lt;Element {http://schemas.xmlsoap.org/soap/envelope/}envelope at 0x2978eb0&gt;
&gt;&gt;&gt; for e in obj.iter():
...     print repr(e)
... 
&lt;Element {http://schemas.xmlsoap.org/soap/envelope/}envelope at 0x2978eb0&gt;
&lt;Element {http://schemas.xmlsoap.org/soap/envelope/}body at 0x2978f50&gt;
&lt;Element createsessionresponse at 0x297c050&gt;
'59C3F170141E9CF6F5BF98FB39B0237B'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19290120</id><snippet>obj.body.createsessionresponse.createsessionreturn</snippet></ROW><ROW><id>19290120</id><snippet>&gt;&gt;&gt; obj.body
&lt;Element {http://schemas.xmlsoap.org/soap/envelope/}body at 0x2978f00&gt;
&gt;&gt;&gt; obj.body.createsessionresponse
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "lxml.objectify.pyx", line 218, in lxml.objectify.ObjectifiedElement.__getattr__ (src/lxml/lxml.objectify.c:3488)
  File "lxml.objectify.pyx", line 437, in lxml.objectify._lookupChildOrRaise (src/lxml/lxml.objectify.c:5743)
AttributeError: no such child: {http://schemas.xmlsoap.org/soap/envelope/}createsessionresponse
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19290120</id><snippet>c = root["{http://other/}c"]</snippet></ROW><ROW><id>19290120</id><snippet>&gt;&gt;&gt; obj.body["{}createsessionresponse"]
&lt;Element createsessionresponse at 0x2978f50&gt;
&gt;&gt;&gt; obj.body["{}createsessionresponse"].createsessionreturn
'59C3F170141E9CF6F5BF98FB39B0237B'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19290120</id><snippet>&gt;&gt;&gt; obj.body["{}createsessionresponse"].createsessionreturn
'59C3F170141E9CF6F5BF98FB39B0237B'
&gt;&gt;&gt; type(obj.body["{}createsessionresponse"].createsessionreturn)
&lt;type 'lxml.objectify.StringElement'&gt;
&gt;&gt;&gt; obj.body["{}createsessionresponse"].createsessionreturn.text
'59C3F170141E9CF6F5BF98FB39B0237B'
&gt;&gt;&gt; type(obj.body["{}createsessionresponse"].createsessionreturn.text)
&lt;type 'str'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19290246</id><snippet>python some_prog.py --duration=1278678-3275678678 T1 column1 column2
</snippet></ROW><ROW><id>19290246</id><snippet>tableName</snippet></ROW><ROW><id>19290246</id><snippet>columns</snippet></ROW><ROW><id>19290246</id><snippet>tableName</snippet></ROW><ROW><id>19290246</id><snippet>argparse.REMAINDER</snippet></ROW><ROW><id>19290246</id><snippet>tableName</snippet></ROW><ROW><id>19290246</id><snippet>parse_known_args</snippet></ROW><ROW><id>19290246</id><snippet>parse_args</snippet></ROW><ROW><id>19290246</id><snippet>column</snippet></ROW><ROW><id>19290246</id><snippet>import argparse
parser = argparse.ArgumentParser(prog='some_prog',formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("tableName")
parser.add_argument("--duration",help = """It is an optional parameter.""")

(args, the_rest) = parser.parse_known_args()
print args.tableName
print args.duration
print the_rest
</snippet></ROW><ROW><id>19290261</id><snippet>from jsonschema import validate, ValidationError

schema = {
    'type': 'object',
    'properties': {
        'title': {
            'type': 'string',
        },
        'description': {
            'type': 'string',
        },
        'done': {
            'type': 'boolean',
        },
    },
}

try:
    validate(request.get_json(), schema)
except ValidationError:
    abort(400)
</snippet></ROW><ROW><id>19290261</id><snippet>request.json</snippet></ROW><ROW><id>19290261</id><snippet>flask&gt;=0.10</snippet></ROW><ROW><id>19290261</id><snippet>request.get_json()</snippet></ROW><ROW><id>19290276</id><snippet>pip install oauthlib
</snippet></ROW><ROW><id>19290284</id><snippet>global</snippet></ROW><ROW><id>19290284</id><snippet>nonlocal</snippet></ROW><ROW><id>19290284</id><snippet>x[...] = ...</snippet></ROW><ROW><id>19290284</id><snippet>x.whatever = ...</snippet></ROW><ROW><id>19290394</id><snippet>if len(sys.argv) &lt; 3 :
  print "Please enter two arguments"
  sys.exit(1)
</snippet></ROW><ROW><id>19290394</id><snippet>if len(sys.argv) &gt; 3 :
        print "Enter two arguments only"
        sys.exit(1)
</snippet></ROW><ROW><id>19290394</id><snippet>if len(sys.argv) &gt; 4 :
        print "Enter only two arguments after the program"
        sys.exit(1)
</snippet></ROW><ROW><id>19290394</id><snippet>if len(sys.argv) &gt;= 0 | len(sys.argv) &lt; 3 :
  fieldindex = int(sys.argv[1])-1  
else:
  sys.exit("enter up to 2 args")
</snippet></ROW><ROW><id>19290477</id><snippet>from pprint import pprint
pprint(the_dict)
</snippet></ROW><ROW><id>19290487</id><snippet>BaseResponse</snippet></ROW><ROW><id>19290487</id><snippet>HTTPAdapter.build_response()</snippet></ROW><ROW><id>19290487</id><snippet>HTTPAdapter.send()</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>Response</snippet></ROW><ROW><id>19290487</id><snippet>BaseRequest</snippet></ROW><ROW><id>19290618</id><snippet>self.cursor.execute("UPDATE urls SET state=%d,content='%s' WHERE url='%s'"%(state,self.conn.escape_string(content),url))
</snippet></ROW><ROW><id>19290787</id><snippet>SELECT *
FROM MyTable
WHERE ID IN ('a', 'd', 'e')
</snippet></ROW><ROW><id>19290848</id><snippet>for i in li</snippet></ROW><ROW><id>19290848</id><snippet>for idx in range(len(li)):
    i = li[idx]
    i = 'foo'
</snippet></ROW><ROW><id>19290848</id><snippet>i</snippet></ROW><ROW><id>19290848</id><snippet>li[idx]</snippet></ROW><ROW><id>19290848</id><snippet>for idx in range(len(li)):
    li[idx] = 'foo'
</snippet></ROW><ROW><id>19290848</id><snippet>enumerate</snippet></ROW><ROW><id>19290848</id><snippet>for idx, item in enumerate(li):
    li[idx] = 'foo'
</snippet></ROW><ROW><id>19291596</id><snippet>a, b, c</snippet></ROW><ROW><id>19291596</id><snippet>result = a[None, :, :] &amp; b[:, None, :] &amp; c[:, :, None]
</snippet></ROW><ROW><id>19291596</id><snippet>a</snippet></ROW><ROW><id>19291596</id><snippet>b</snippet></ROW><ROW><id>19291596</id><snippet>c</snippet></ROW><ROW><id>19291596</id><snippet>np.array([[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]], dtype=np.bool)
</snippet></ROW><ROW><id>19291984</id><snippet>TASK_UPLOAD_FILE_TYPES</snippet></ROW><ROW><id>19291984</id><snippet>for</snippet></ROW><ROW><id>19291984</id><snippet>for</snippet></ROW><ROW><id>19291984</id><snippet>str.endswith</snippet></ROW><ROW><id>19291984</id><snippet>&gt;&gt;&gt; 'data.docx'.endswith(('.pdf','.zip','.docx'))
True
&gt;&gt;&gt; 'data.py'.endswith(('.pdf','.zip','.docx'))
False
</snippet></ROW><ROW><id>19291984</id><snippet>def validate_file_extension(value):
    if not value.name.endswith(tuple(settings_dev.TASK_UPLOAD_FILE_TYPES)):
       raise ValidationError(u'Error message')
</snippet></ROW><ROW><id>19292067</id><snippet>i.find(h['path'])</snippet></ROW><ROW><id>19292067</id><snippet>&lt;osclass&gt;</snippet></ROW><ROW><id>19292067</id><snippet>None</snippet></ROW><ROW><id>19292067</id><snippet>...
e = i.find(h['path'])
if e is not None: print(e.get(h['el']))
...
</snippet></ROW><ROW><id>19292067</id><snippet>192.168.1.5
host1.example.com
Linux
</snippet></ROW><ROW><id>19292421</id><snippet>vtkMRMLNode</snippet></ROW><ROW><id>19292421</id><snippet>if (volumeNode-&gt;IsA("vtkMRMLDiffusionTensorVolumeNode"))
</snippet></ROW><ROW><id>19292593</id><snippet># note: this is half python / half pseudocode

class Model1(object):
    __collection__ = 'model1'
    __tablename__ = 'model1'
    # field definitions etc


class MongoDataLayer(object):
    def __init__(self, mongo_db_connection):
        self.conn = mongo_db_connection

    def load(self, model, conditions):
        raw = self.conn[model.__collection__].find(...)
        return model(**raw)

    def persist(self, obj):
        self.conn[obj.__collection__].save(obj.as_dict())


class SQLDataLayer(object):
    def __init__(self, sa_session_factory):
        self.Session = sa_session_factory
        self.session = self.Session()

    def load(self, model, conditions):
        return self.session.query(model).find_by(conditions).one() # ...etc

    def persist(self, obj):
        self.conn[obj.__collection__].save(obj)

# connections - mongo and postgres (I use SQLAlchemy)
dl_mongo = MongoDataLayer(db...)
dl_sql = SQLDataLayer(Session...)

# using them - you don't care which one you have
m = dl_mongo.load(models.Model1)
dl_mongo.persist(m)

m = dl_sql.load(models.Model1)
dl_sql.persist(m)
</snippet></ROW><ROW><id>19292725</id><snippet>D2 = (xf[:,None] - xg[None,:])**2 + (yf[:,None] - yg[None,:])**2 + (zf[:,None] - zg[None,:])**2
near = D2 &lt; 20**2
a1 = np.array([G.epsilon[near_row].mean() for near_row in near])
</snippet></ROW><ROW><id>19292725</id><snippet>D2 = (xf[:,None] - xg[None,:])**2 + (yf[:,None] - yg[None,:])**2 + (zf[:,None] - zg[None,:])**2
a1 = np.array([G.epsilon[near_row].mean() for near_row in D2 &lt; 20**2])
</snippet></ROW><ROW><id>19292832</id><snippet>import os
from urllib import urlopen
from bs4 import BeautifulSoup
url= "http://www.mathrubhumi.com/sports/story.php?id=397111"
raw = urlopen(url).read()
soup = BeautifulSoup(raw,'lxml')
texts = soup.findAll(text=True)

def contains_unicode(text):
    try:
        str(text)
    except:
        return True
    return False

result = ''.join((text for text in texts if contains_unicode(text)))

# Output to a file
with open('output.txt','w') as out:
    out.write(result)
</snippet></ROW><ROW><id>19293178</id><snippet>export BLAS=/path/to/libblas.so
</snippet></ROW><ROW><id>19293373</id><snippet>search the module_or_package in `sys.modules`
if not found:
    search the module_or_package_source in `sys.path`
    if not found:
        raise an ImportError
    create a `module` instance from the module_or_package_source 
    # -&gt; imply executing the top-level source code, which may raise anything
    store the `module` instance in `sys.modules`
bind the `module` name (or whatever name was imported from it) in the current namespace
</snippet></ROW><ROW><id>19293373</id><snippet>class</snippet></ROW><ROW><id>19293373</id><snippet>import</snippet></ROW><ROW><id>19293373</id><snippet>try:
    re
except NameError, e:
    print "name 're' is not yet defined in the module's namespace"
    print "module namespace : %s" % globals()

import re
print "name 're' is now defined in the module's namespace"
print "module namespace : %s" % globals()


def foo():
    try:
        os
    except NameError, e:
        print "name 'os' is not yet defined in the function's namespace"
        print "function namespace : %s" % locals()
        print "name 'os' is not defined in the module's namespace neither"
        print "module namespace : %s" % globals()

    import os
    print "name 'os' is now defined in the function's namespace"
    print "function namespace : %s" % locals()
    print "name 'os' is still not defined in the module's namespace"
    print "module namespace : %s" % globals()

foo()

print "After calling foo(), name 'os' is still not defined in the module's namespace"
print "module namespace : %s" % globals()

class Foo(object):
    try:
        os
    except NameError, e:
        print "name 'os' is not yet defined in the class namespace"
        print "but we cannot inspect this namespace now so you have to take me on words"
        print "but if you read the code you'll notice we can only get there if we have a NameError, so we have an indirect proof at least ;)"
        print "name 'os' is not defined in the module's namespace neither obvisouly"
        print "module namespace : %s" % globals()

    import os
    print "name 'os' is now defined in the class namespace"
    print "we still cannot inspect this namespace now but wait..."
    print "name 'os' is still not defined in the module's namespace neither"
    print "module namespace : %s" % globals()

print "class namespace is now accessible via Foo.__dict__"
print "Foo.__dict__ is %s" % (Foo.__dict__)
print "'os' is now an attribute of Foo - Foo.os = %s" % Foo.os
print "name 'os' is still not defined in the module's namespace"
print "module namespace : %s" % globals()
</snippet></ROW><ROW><id>19293814</id><snippet>BooleanVar</snippet></ROW><ROW><id>19293814</id><snippet>self.sensor = tk.BooleanVar()
self.sensor.trace("w", self.on_sensor_change)
...
def on_sensor_change(self, *args):
    print "the sensor changed:", self.sensor.get()
</snippet></ROW><ROW><id>19293966</id><snippet>a</snippet></ROW><ROW><id>19293966</id><snippet>b</snippet></ROW><ROW><id>19293966</id><snippet>from itertools import groupby

len_ab = len(a) + len(b)
groups = groupby(((a[len(a)*i//len_ab], b[len(b)*i//len_ab]) for i in range(len_ab)),
                 key=lambda x:x[0])
[j[i] for k,g in groups for i,j in enumerate(g)]
</snippet></ROW><ROW><id>19293966</id><snippet>&gt;&gt;&gt; a = range(8)
&gt;&gt;&gt; b = list("abc")
&gt;&gt;&gt; len_ab = len(a) + len(b)
&gt;&gt;&gt; groups = groupby(((a[len(a)*i//len_ab], b[len(b)*i//len_ab]) for i in range(len_ab)), key=lambda x:x[0])
&gt;&gt;&gt; [j[i] for k,g in groups for i,j in enumerate(g)]
[0, 'a', 1, 2, 'b', 3, 4, 5, 'c', 6, 7]
</snippet></ROW><ROW><id>19293966</id><snippet>a</snippet></ROW><ROW><id>19293966</id><snippet>b</snippet></ROW><ROW><id>19293966</id><snippet>b, a = sorted((a, b), key=len)
</snippet></ROW><ROW><id>19294036</id><snippet>class ToySale(EmbeddedDocument):
    end_time = FloatField()
    percentage = IntField()
    uid = IntField()

    @property
    def super_price(self):
        toy = Toy.objects(sale__uid=self.uid)  # get Document by EmbeddedDocument
        return toy.price - (self.percentage * toy.price / 100)
</snippet></ROW><ROW><id>19294485</id><snippet>files = ['1_IQ_QTA.csv','2_IQ_QTA.csv','3_IQ_QTA.csv','4_IQ_QTA.csv']
n = 0
row = 0
outputfile = open('outputList.csv', 'w')
cellrow = 12 #collect the cell (12, 1) from each file and put it in the output list
cellcolumn = 1
while n&lt;len(files):
    fname = files[n]
    currentfile = open(fname,'r')
    for i in range (cellrow):
        currentrow = currentfile.readline()
#        print currentrow #for testing
    columncnt=0
    currentcell = ''
    openquote = False
    for char in currentrow:
        if char == '"' and not openquote:
            openquote = True
        elif char == '"' and openquote:
            openquote = False
        elif char == ',' and not openquote:
            columncnt+=1
            if columncnt == cellcolumn:
                cellvalue = currentcell
#                print cellvalue #for testing
            currentcell=''
        else:
            currentcell += char

    outputfile.write (cellvalue + ',')
    currentfile.close()
    n += 1

outputfile.close()
</snippet></ROW><ROW><id>19294889</id><snippet>|</snippet></ROW><ROW><id>19294889</id><snippet>&gt;&gt;&gt; d
array([[1, 2, 3],
       [1, 2, 3],
       [1, 3, 3],
       [4, 4, 4],
       [5, 5, 5]])
&gt;&gt;&gt; (d[:,0] == 1) | (d[:,0] == 5)
array([ True,  True,  True, False,  True], dtype=bool)
&gt;&gt;&gt; d[(d[:,0] == 1) | (d[:,0] == 5)]
array([[1, 2, 3],
       [1, 2, 3],
       [1, 3, 3],
       [5, 5, 5]])
</snippet></ROW><ROW><id>19294889</id><snippet>np.in1d</snippet></ROW><ROW><id>19294889</id><snippet>&gt;&gt;&gt; np.in1d(d[:,0], [1, 5])
array([ True,  True,  True, False,  True], dtype=bool)
&gt;&gt;&gt; d[np.in1d(d[:,0], [1, 5])]
array([[1, 2, 3],
       [1, 2, 3],
       [1, 3, 3],
       [5, 5, 5]])
</snippet></ROW><ROW><id>19295196</id><snippet>msgid ""
msgstr ""
"Project-Id-Version: 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-04 13:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: XXXXX\n"
"Language-Team: Es XXXX\n"
"Language: Es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
</snippet></ROW><ROW><id>19295196</id><snippet>"Content-Type: text/plain; charset=UTF-8\n"
</snippet></ROW><ROW><id>19295270</id><snippet>__testname = 10</snippet></ROW><ROW><id>19295468</id><snippet>file = open("my_file", "r")
string_found = False
# Loop over the lines of the file
for line in file:
    temp = line.split(":")
    if test_string in temp[index]:
        print('Found it : {}'.format(line))
        string_found = True
# String not found case
if not string_found:
    print("String not found")
</snippet></ROW><ROW><id>19295531</id><snippet>.xpath()</snippet></ROW><ROW><id>19295531</id><snippet>starts-with()</snippet></ROW><ROW><id>19295531</id><snippet>urls = tree.xpath("//video/products/product/read_only_info/read_only_value[starts-with(@key, 'storeURL-')]")
if urls:
    url = urls[0]
</snippet></ROW><ROW><id>19295533</id><snippet>replace</snippet></ROW><ROW><id>19295533</id><snippet>m = "-7-10 -9-10 12 -9-10 -9 -9 -8 -8 -9 -8 -9 -9 -5 -7 -9 -4 -7"
print m.replace("-", " -").split()
</snippet></ROW><ROW><id>19295533</id><snippet>['-7', '-10', '-9', '-10', '12', '-9', '-10', '-9', '-9', '-8', '-8', '-9', '-8', '-9', '-9', '-5', '-7', '-9', '-4', '-7']
</snippet></ROW><ROW><id>19295533</id><snippet>707 K   -1 -2 -3
707 K   -4123 -6
</snippet></ROW><ROW><id>19295722</id><snippet>&gt;&gt;&gt; I = range(0,10)
&gt;&gt;&gt; t = 3
&gt;&gt;&gt; R = [1 if i&gt;=t else 0 for i in I]
&gt;&gt;&gt; R
[0, 0, 0, 1, 1, 1, 1, 1, 1, 1]
</snippet></ROW><ROW><id>19295879</id><snippet>for i in range(10):
    # create dict
    df.append( created_dict )
</snippet></ROW><ROW><id>19295879</id><snippet>df = pd.DataFrame(my_list_of_dicts)
</snippet></ROW><ROW><id>19295911</id><snippet>vertex_label</snippet></ROW><ROW><id>19295911</id><snippet>plot()</snippet></ROW><ROW><id>19295911</id><snippet>plot(g, vertex_label=["A", "B", "C"])
</snippet></ROW><ROW><id>19295911</id><snippet>label</snippet></ROW><ROW><id>19295911</id><snippet>g.vs["label"] = ["A", "B", "C"]
plot(g)
</snippet></ROW><ROW><id>19295911</id><snippet>Graph.__plot__</snippet></ROW><ROW><id>19295911</id><snippet>plot()</snippet></ROW><ROW><id>19295911</id><snippet>__plot__</snippet></ROW><ROW><id>19295942</id><snippet>filename = 'myimage.png'
imagea = (scipy.misc.imread(filename)).astype(float)

poissonNoise = numpy.random.poisson(50,imagea.shape).astype(float)

noisyImage = imagea + poissonNoise
</snippet></ROW><ROW><id>19295999</id><snippet>class Building():
    def __init__(self):
        self.rooms = []

b = Building()
b.rooms.append(Room(room_type, days, occupied, when_free))
</snippet></ROW><ROW><id>19295999</id><snippet>rooms.append()</snippet></ROW><ROW><id>19296238</id><snippet>Float</snippet></ROW><ROW><id>19296238</id><snippet>from sqlalchemy import</snippet></ROW><ROW><id>19296238</id><snippet>from sqlalchemy import Table, Column, Float, Integer, String, MetaData, ForeignKey
</snippet></ROW><ROW><id>19296238</id><snippet>Numeric</snippet></ROW><ROW><id>19296424</id><snippet>&gt;&gt;&gt; theta = 1e-6
&gt;&gt;&gt; a = Vector(1, 0)
&gt;&gt;&gt; b = Vector(cos(theta), sin(theta))
&gt;&gt;&gt; acos(a.dot(b) / (a.length * b.length))
9.999334257726859e-07
&gt;&gt;&gt; abs(theta - _) / theta
6.657422731408927e-05
</snippet></ROW><ROW><id>19296424</id><snippet>&gt;&gt;&gt; theta = 1e-9
&gt;&gt;&gt; a = Vector(1, 0)
&gt;&gt;&gt; b = Vector(cos(theta), sin(theta))
&gt;&gt;&gt; acos(a.dot(b) / (a.length * b.length))
0.0
</snippet></ROW><ROW><id>19296424</id><snippet>&gt;&gt;&gt; atan2(abs(a.cross(b)), a.dot(b))
1e-09
&gt;&gt;&gt; theta == _
True
</snippet></ROW><ROW><id>19296603</id><snippet>N = 20
nums = range(2, N)

for i in xrange(2, 8):
    print "NUMS:", nums
    new_nums = []
    for x in nums:
        print "CONDITION: x ({x}) == i ({i}) or x ({x}) % i({i}) == 0 ({x_mod_i})".format(x=x, i=i, x_mod_i=x % i)
        if x == i or x % i:
            print " =&gt; APPEND", x
            new_nums.append(x)
    nums = new_nums
    print "***********"

print nums    # [2, 3, 5, 7, 11, 13, 17, 19]
</snippet></ROW><ROW><id>19296609</id><snippet>from collections import Counter

pairs = Counter()

with open(...) as fp:
   for line in fp:
      pairs.update(re.findall(r'\d+\s+\d+', line))
</snippet></ROW><ROW><id>19296730</id><snippet>pre_save</snippet></ROW><ROW><id>19296730</id><snippet>read_only</snippet></ROW><ROW><id>19296731</id><snippet>from flaskext.babel import Babel
</snippet></ROW><ROW><id>19296731</id><snippet>from flask.ext.babel import Babel
</snippet></ROW><ROW><id>19296731</id><snippet>.</snippet></ROW><ROW><id>19296880</id><snippet>from PIL import Image
im = Image.open("screenshot.png")
width, height = im.size

pix = im.load()
for i in range(width):
    for j in range(height):
        r,g,b = pix[i,j]
        pix[i,j] = (g,r,b)

im.save("output.png")
</snippet></ROW><ROW><id>19296880</id><snippet>from PIL import Image
im = Image.open("screenshot.bmp")
im.save("screenshot.png")
</snippet></ROW><ROW><id>19296925</id><snippet>ref = 30
def f(x):
    print x + ref
</snippet></ROW><ROW><id>19296925</id><snippet>import myfunctions
myfunctions.f(10) # prints 40
myfunctions.ref = 50
myfunctions.f(10) # prints 60
</snippet></ROW><ROW><id>19296925</id><snippet>import myfunctions
myfunctions.f(20) # prints 50? prints 70?
</snippet></ROW><ROW><id>19296925</id><snippet>def f(x, ref=30):
    print x + ref
</snippet></ROW><ROW><id>19296925</id><snippet>import myfunctions
myfunctions.f(10) # prints 40
myfunctions.f(10, ref=50) # prints 60
</snippet></ROW><ROW><id>19296925</id><snippet>REF = 30
ref_count = 0

def f(x, ref=REF, other_thing=None):
    if not other_thing:
        other_thing = ref_count
    print x + ref + other_thing

def add_ref(current_count=None):
    global ref_count
    if current_count is not None:
        ref_count = current_count
    ref_count += 1
</snippet></ROW><ROW><id>19297044</id><snippet>foreign</snippet></ROW><ROW><id>19297044</id><snippet>install.packages("foreign")</snippet></ROW><ROW><id>19297044</id><snippet>import rpy2.robjects as robjects
robjects.r("require(foreign)")
robjects.r('x=read.csv("test.csv")')
robjects.r('write.dta(x,"test.dta")')
</snippet></ROW><ROW><id>19297044</id><snippet>robjects.r</snippet></ROW><ROW><id>19297044</id><snippet>robjects.r('x=read.csv("%s")' % fileName)
</snippet></ROW><ROW><id>19297235</id><snippet>imagea = PIL.Image.open('temp.png')
imageb = PIL.Image.open('temp.png')

for y in xrange(imagea.size[1]):
  for x in xrange(imagea.size[0]):
    currentPixel = imagea.getpixel((x,y))

    if currentPixel[0] &gt;  50:
    #if currentPixel ==(0,0,0):
      #this is a black pixel, you can directly modify image 2 now
      imageb.putpixel((x,y),(0,0,0))

imageb.save('outputfile.png')
</snippet></ROW><ROW><id>19297299</id><snippet> 1  fibs = Fibs()
 2  for f in fibs:
 3      if f &gt; 1000:
 4          print(f)
 5          break
</snippet></ROW><ROW><id>19297299</id><snippet>__init__()</snippet></ROW><ROW><id>19297299</id><snippet>__iter__()</snippet></ROW><ROW><id>19297299</id><snippet>__next__()</snippet></ROW><ROW><id>19297299</id><snippet>self.a</snippet></ROW><ROW><id>19297299</id><snippet>f</snippet></ROW><ROW><id>19297391</id><snippet>file = open('D:\\mydirectory\\soggetti.txt','r')
file_pf = open("D:\\mydirectory\\file_pf.txt","w")
file_pg = open("D:\\mydirectory\\file_pg.txt","w")
file_pf.close()
file_pg.close()


p_lines = []
g_lines = []
i = 0
with file:
    for line in file:
        i = 0
        c = 0
        while i &lt; len(line):
            carattere = line[i]
            if carattere == "|":
                c = c + 1
                if c == 4:
                    if line[i-1] == "P":
                        p_lines.append(line)
                        break
                    elif line[i-1] == "G":
                        g_lines.append(line)
                        break
            i = i + 1
file.close()

file_pf = open("D:\\mydirectory\\file_pf.txt","w")
file_pf.writelines(p_lines)
file_pf.close()

file_pg = open("D:\\mydirectory\\file_pg.txt","w")
file_pg.writelines(g_lines)
file_pg.close()
</snippet></ROW><ROW><id>19297391</id><snippet>split</snippet></ROW><ROW><id>19297391</id><snippet>file = open('D:\\mydirectory\\soggetti.txt','r')
file_pf = open("D:\\mydirectory\\file_pf.txt","w")
file_pg = open("D:\\mydirectory\\file_pg.txt","w")
file_pf.close()
file_pg.close()


p_lines = []
g_lines = []
with file:
    for line in file:
        fields = line.split("|")
        if fields[3] == "P":
            p_lines.append(line)
        elif fields[3] == "G":
            g_lines.append(line)
file.close()

file_pf = open("D:\\mydirectory\\file_pf.txt","w")
file_pf.writelines(p_lines)
file_pf.close()

file_pg = open("D:\\mydirectory\\file_pg.txt","w")
file_pg.writelines(g_lines)
file_pg.close()
</snippet></ROW><ROW><id>19297391</id><snippet>with</snippet></ROW><ROW><id>19297391</id><snippet>file_pf</snippet></ROW><ROW><id>19297391</id><snippet>file_pg</snippet></ROW><ROW><id>19297391</id><snippet>p_lines = []
g_lines = []
with open('D:\\mydirectory\\soggetti.txt','r') as file:
    for line in file:
        fields = line.split("|")
        if fields[3] == "P":
            p_lines.append(line)
        elif fields[3] == "G":
            g_lines.append(line)

file_pf = open("D:\\mydirectory\\file_pf.txt","w")
file_pf.writelines(p_lines)
file_pf.close()

file_pg = open("D:\\mydirectory\\file_pg.txt","w")
file_pg.writelines(g_lines)
file_pg.close()
</snippet></ROW><ROW><id>19297391</id><snippet>from collections import defaultdict
lines_to_write = defaultdict(list)
with file as open('D:\\mydirectory\\soggetti.txt','r'):
    for line in file:
        fields = line.split("|")
        lineType = fields[3].lower()
        lines_to_write[lineType].append(line)

for lineType, lines in lines_to_write.iteritems():
    filename = "D:\\mydirectory\\file_{}f.txt".format(lineType)
    with file as open(filename,"w"):
        file.writelines(lines)
</snippet></ROW><ROW><id>19297391</id><snippet>how_often_to_report = 100 #prints message every one hundred lines
with file as open('D:\\mydirectory\\soggetti.txt','r'):
    for line_number, line in enumerate(file):
        if line_number % how_often_to_report == 0:
            print "{} lines processed", line_number
        #do rest of processing work here
</snippet></ROW><ROW><id>19297454</id><snippet>CAST</snippet></ROW><ROW><id>19297454</id><snippet>CAST.new()</snippet></ROW><ROW><id>19297667</id><snippet>mydict = defaultdict(list)
sublist = None
for item in mylist:
    if iskey(item):
        sublist = mydict[item]
    else:
        sublist.append(item)
</snippet></ROW><ROW><id>19297667</id><snippet>collections</snippet></ROW><ROW><id>19297667</id><snippet>defaultdict</snippet></ROW><ROW><id>19297679</id><snippet>sys.modules['__main__']</snippet></ROW><ROW><id>19297679</id><snippet>a.py</snippet></ROW><ROW><id>19297679</id><snippet>if __name__ == '__main__'
</snippet></ROW><ROW><id>19297679</id><snippet>b.py</snippet></ROW><ROW><id>19297679</id><snippet>from a import Foo</snippet></ROW><ROW><id>19297679</id><snippet>sys.modules['a']</snippet></ROW><ROW><id>19297679</id><snippet>Foo</snippet></ROW><ROW><id>19297679</id><snippet>Foo.x</snippet></ROW><ROW><id>19297679</id><snippet>__main__.Foo.x</snippet></ROW><ROW><id>19297679</id><snippet>b.Bar.x</snippet></ROW><ROW><id>19297679</id><snippet>a.Foo.x</snippet></ROW><ROW><id>19297679</id><snippet>c.py</snippet></ROW><ROW><id>19297679</id><snippet>Foo</snippet></ROW><ROW><id>19297679</id><snippet>a</snippet></ROW><ROW><id>19297679</id><snippet>b.Bar</snippet></ROW><ROW><id>19297679</id><snippet>c</snippet></ROW><ROW><id>19297679</id><snippet>a.Foo</snippet></ROW><ROW><id>19297933</id><snippet>open</snippet></ROW><ROW><id>19297933</id><snippet>import subprocess
FileName = "/Users/fis/Desktop/installation_guide.txt"
subprocess.call(['open', FileName])
</snippet></ROW><ROW><id>19297952</id><snippet>$ sudo pip install virtualenv
...
$ cd your/project/dir
$ virtualenv venv
...
$ . venv/bin/activate
$ pip install Twisted
...
$ python -c "import twisted; print twisted.version"
... should print: Version('twisted', 13, 1, 0)
$ python -c "import twisted.web.http"
... should work without ImportError
</snippet></ROW><ROW><id>19298412</id><snippet>axes</snippet></ROW><ROW><id>19298412</id><snippet>subplots</snippet></ROW><ROW><id>19298412</id><snippet>axes</snippet></ROW><ROW><id>19298412</id><snippet>subplots</snippet></ROW><ROW><id>19298412</id><snippet>tight_layout</snippet></ROW><ROW><id>19298412</id><snippet>axes</snippet></ROW><ROW><id>19298412</id><snippet>subplots</snippet></ROW><ROW><id>19298412</id><snippet>axes</snippet></ROW><ROW><id>19298412</id><snippet>subplots</snippet></ROW><ROW><id>19298412</id><snippet>tight_layout</snippet></ROW><ROW><id>19298412</id><snippet>fig.add_axes([0.6, 0.12, 0.1, 0.02])</snippet></ROW><ROW><id>19298412</id><snippet>matplotlibrc</snippet></ROW><ROW><id>19298412</id><snippet>'datapath'</snippet></ROW><ROW><id>19298412</id><snippet>None</snippet></ROW><ROW><id>19298412</id><snippet>rcParams['datapath']</snippet></ROW><ROW><id>19298412</id><snippet>None</snippet></ROW><ROW><id>19298412</id><snippet>os.path.join</snippet></ROW><ROW><id>19298412</id><snippet>NoneType</snippet></ROW><ROW><id>19298412</id><snippet>matplotlibrc</snippet></ROW><ROW><id>19298412</id><snippet>~/.config/matplotlib</snippet></ROW><ROW><id>19298412</id><snippet>python -c 'import matplotlib; print(matplotlib.__version__); print(matplotlib.__file__)'
</snippet></ROW><ROW><id>19298412</id><snippet>gs = gridspec.GridSpec(1, 2)</snippet></ROW><ROW><id>19298412</id><snippet>fig = plt.figure(...)
ax0 = fig.add_subplot(121)
ax1 = fig.add_subplot(122)
</snippet></ROW><ROW><id>19298412</id><snippet>fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, ...)
</snippet></ROW><ROW><id>19298683</id><snippet>while 0==0:
   if grades_mix[index_no]=="HM1":
      index_no+=1
</snippet></ROW><ROW><id>19298683</id><snippet>while True</snippet></ROW><ROW><id>19299013</id><snippet>QuerySet.exclude</snippet></ROW><ROW><id>19299013</id><snippet>''</snippet></ROW><ROW><id>19299013</id><snippet>complete_contacts = Contact.objects.exclude(photo='')
</snippet></ROW><ROW><id>19299088</id><snippet>raw_input</snippet></ROW><ROW><id>19299088</id><snippet>input</snippet></ROW><ROW><id>19299088</id><snippet>def main ():
    user_ship_area = raw_input('Are you shipping to the US or Canada?') 

    if user_ship_area != 'Canada':
        print 'confirmed, we will ship to the United States '
    else:
        print "confirmed, we will ship to Canada" 

main() 
</snippet></ROW><ROW><id>19299295</id><snippet>__sitedefs</snippet></ROW><ROW><id>19299295</id><snippet>_sitedefs</snippet></ROW><ROW><id>19299424</id><snippet>&gt;&gt;&gt; 'q' in 'qeen'.replace('qu', '')
True
&gt;&gt;&gt; 'q' in 'queen'.replace('qu', '')
False

&gt;&gt;&gt; 'qeen'.replace('qu', 'q').replace('q', 'qu')
'queen'

$ python -m timeit -s"import re" 're.sub("q(?!u)", "qu", "The queen qarreled with the king")'
100000 loops, best of 3: 2.57 usec per loop
$ python -m timeit -s"'The queen qarreled with the king'.replace('qu', 'q').replace('q', 'qu')"
100000000 loops, best of 3: 0.0163 usec per loop
</snippet></ROW><ROW><id>19299499</id><snippet>(pick == 4) or (6) or (12)
</snippet></ROW><ROW><id>19299499</id><snippet>if pick==4 or pick==6 or pick==12
</snippet></ROW><ROW><id>19299499</id><snippet>if pick in [4,6,12]
</snippet></ROW><ROW><id>19299587</id><snippet>reverse</snippet></ROW><ROW><id>19299587</id><snippet>None</snippet></ROW><ROW><id>19299587</id><snippet>l.reverse()
print l
</snippet></ROW><ROW><id>19299737</id><snippet>lettuce -v [x]
</snippet></ROW><ROW><id>19299737</id><snippet>x</snippet></ROW><ROW><id>19299737</id><snippet>1, 2 or 3</snippet></ROW><ROW><id>19299757</id><snippet>instance=&lt;&gt;</snippet></ROW><ROW><id>19299757</id><snippet>ModelForm</snippet></ROW><ROW><id>19299757</id><snippet>def myview(request, id=None):
    if id:
        obj_to_edit = MyModel.objects.get(id=1)
        form = MyForm(instance=obj_to_edit)
    else:
        obj_to_edit = None
        form = MyForm()

    if request.method == 'POST':
        if id: #update
            form = MyForm(request.POST, instance=obj_to_edit)
        else: #create
            form = MyForm(request.POST)

    #rest of the code
</snippet></ROW><ROW><id>19299757</id><snippet>url(r'/blah/create/', 'myview'),
url(r'/blah/edit/(?P&lt;id&gt;[\d+])/', 'myview')
</snippet></ROW><ROW><id>19299757</id><snippet>forms.Form</snippet></ROW><ROW><id>19299757</id><snippet>id</snippet></ROW><ROW><id>19299884</id><snippet>tempfile.TemporaryDirectory()</snippet></ROW><ROW><id>19299884</id><snippet>from __future__ import print_function

import warnings as _warnings
import os as _os

from tempfile import mkdtemp

class TemporaryDirectory(object):
    """Create and return a temporary directory.  This has the same
    behavior as mkdtemp but can be used as a context manager.  For
    example:

        with TemporaryDirectory() as tmpdir:
            ...

    Upon exiting the context, the directory and everything contained
    in it are removed.
    """

    def __init__(self, suffix="", prefix="tmp", dir=None):
        self._closed = False
        self.name = None # Handle mkdtemp raising an exception
        self.name = mkdtemp(suffix, prefix, dir)

    def __repr__(self):
        return "&lt;{} {!r}&gt;".format(self.__class__.__name__, self.name)

    def __enter__(self):
        return self.name

    def cleanup(self, _warn=False):
        if self.name and not self._closed:
            try:
                self._rmtree(self.name)
            except (TypeError, AttributeError) as ex:
                # Issue #10188: Emit a warning on stderr
                # if the directory could not be cleaned
                # up due to missing globals
                if "None" not in str(ex):
                    raise
                print("ERROR: {!r} while cleaning up {!r}".format(ex, self,),
                      file=_sys.stderr)
                return
            self._closed = True
            if _warn:
                self._warn("Implicitly cleaning up {!r}".format(self),
                           ResourceWarning)

    def __exit__(self, exc, value, tb):
        self.cleanup()

    def __del__(self):
        # Issue a ResourceWarning if implicit cleanup needed
        self.cleanup(_warn=True)

    # XXX (ncoghlan): The following code attempts to make
    # this class tolerant of the module nulling out process
    # that happens during CPython interpreter shutdown
    # Alas, it doesn't actually manage it. See issue #10188
    _listdir = staticmethod(_os.listdir)
    _path_join = staticmethod(_os.path.join)
    _isdir = staticmethod(_os.path.isdir)
    _islink = staticmethod(_os.path.islink)
    _remove = staticmethod(_os.remove)
    _rmdir = staticmethod(_os.rmdir)
    _warn = _warnings.warn

    def _rmtree(self, path):
        # Essentially a stripped down version of shutil.rmtree.  We can't
        # use globals because they may be None'ed out at shutdown.
        for name in self._listdir(path):
            fullname = self._path_join(path, name)
            try:
                isdir = self._isdir(fullname) and not self._islink(fullname)
            except OSError:
                isdir = False
            if isdir:
                self._rmtree(fullname)
            else:
                try:
                    self._remove(fullname)
                except OSError:
                    pass
        try:
            self._rmdir(path)
        except OSError:
            pass

import os
with TemporaryDirectory() as tmp_dir:
    print("Temporary directory path: %s" % tmp_dir)
    print(os.path.isdir(tmp_dir))

# here the temporary diretory does not exist any more.
print(os.path.isdir(tmp_dir))
</snippet></ROW><ROW><id>19300049</id><snippet>globals</snippet></ROW><ROW><id>19300049</id><snippet>globals().update(args.__dict__)
</snippet></ROW><ROW><id>19300049</id><snippet>args</snippet></ROW><ROW><id>19300157</id><snippet>&gt;&gt;&gt; line = 'This,is,a,sample,string'
&gt;&gt;&gt; "sample" in line
 True
</snippet></ROW><ROW><id>19300264</id><snippet>tornado.platform.twisted</snippet></ROW><ROW><id>19300264</id><snippet>import tornado.httpserver
import tornado.ioloop
import tornado.web
import tornado.platform.twisted

tornado.platform.twisted.install()

from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor

proxy = Proxy('http://advogato.org/XMLRPC')

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class IndexHandler(tornado.web.RequestHandler):
    def printValue(self, value):
        self.write(repr(value))
        self.finish()

    def printError(self, error):
        self.write('error: %s' % error) 
        self.finish()

    @tornado.web.asynchronous
    def get(self):
        proxy.callRemote('test.sumprod', 3, 5).addCallbacks(self.printValue, self.printError)

if __name__ == "__main__":
    tornado.options.parse_command_line()
    app = tornado.web.Application(handlers=[(r"/", IndexHandler)])
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19300264</id><snippet>$ ab -n 1000 -c 5 http://localhost:8000/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests


Server Software:        TornadoServer/3.0.1
Server Hostname:        localhost
Server Port:            8000

Document Path:          /
Document Length:        7 bytes

Concurrency Level:      5
Time taken for tests:   76.529 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      201000 bytes
HTML transferred:       7000 bytes
Requests per second:    13.07 [#/sec] (mean)
Time per request:       382.646 [ms] (mean)
Time per request:       76.529 [ms] (mean, across all concurrent requests)
Transfer rate:          2.56 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:   302  382 498.9    308    5318
Waiting:      302  382 498.9    308    5318
Total:        302  382 498.9    308    5318

Percentage of the requests served within a certain time (ms)
  50%    308
  66%    310
  75%    311
  80%    313
  90%    320
  95%    334
  98%   1310
  99%   3309
 100%   5318 (longest request)
</snippet></ROW><ROW><id>19300264</id><snippet>xmlrpclib</snippet></ROW><ROW><id>19300264</id><snippet>import tornado.httpserver
import tornado.ioloop
import tornado.web

import xmlrpclib    

server = xmlrpclib.ServerProxy('http://advogato.org/XMLRPC')

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        self.write(repr(server.test.sumprod(3, 5)))

if __name__ == "__main__":
    tornado.options.parse_command_line()
    app = tornado.web.Application(handlers=[(r"/", IndexHandler)])
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19300264</id><snippet>$  ab -n 1000 -c 5 http://localhost:8000/
This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests


Server Software:        TornadoServer/3.0.1
Server Hostname:        localhost
Server Port:            8000

Document Path:          /
Document Length:        7 bytes

Concurrency Level:      5
Time taken for tests:   325.538 seconds
Complete requests:      1000
Failed requests:        0
Write errors:           0
Total transferred:      201000 bytes
HTML transferred:       7000 bytes
Requests per second:    3.07 [#/sec] (mean)
Time per request:       1627.690 [ms] (mean)
Time per request:       325.538 [ms] (mean, across all concurrent requests)
Transfer rate:          0.60 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       0
Processing:   305 1625 484.5   1532    4537
Waiting:      305 1624 484.5   1532    4537
Total:        305 1625 484.5   1532    4537

Percentage of the requests served within a certain time (ms)
  50%   1532
  66%   1535
  75%   1537
  80%   1539
  90%   1547
  95%   1984
  98%   4524
  99%   4533
 100%   4537 (longest request)
</snippet></ROW><ROW><id>19300347</id><snippet>filter(lambda sublist:not any(set(sublist).intersection(x) for x in list2),list1)
</snippet></ROW><ROW><id>19300400</id><snippet>temp = z[:]
</snippet></ROW><ROW><id>19300400</id><snippet>z</snippet></ROW><ROW><id>19300400</id><snippet>temp</snippet></ROW><ROW><id>19300400</id><snippet>copy</snippet></ROW><ROW><id>19300400</id><snippet>temp = copy.copy(z)
</snippet></ROW><ROW><id>19300400</id><snippet>temp = copy.deepcopy(z)
</snippet></ROW><ROW><id>19300410</id><snippet>def run_test(test_function):
    tests = []
    numtests = 100
    for i in range(0, numtests):
        #random
        zeros = [0] * 1024
        ones = [1] * 10
        #ones = [randint(0,1023) for _ in range(0,10)]
        input =  zeros + ones
        shuffle(input)
        tests.append(test_function(input,10))

    count = [x[0] for x in tests]
    found = [x[1] for x in tests]
    found.sort()
    num = Counter(found)
    freqs = [x for x in num.values()]
    cumsum = [sum(item for item in freqs[0:rank+1]) for rank in range(len(freqs))]
    normcumsum  = [float(x)/numtests for x in cumsum]

    print(freqs)
    print(cumsum)
    print(normcumsum)
    print(sorted(num.keys()))

    figure(0)
    plt.plot(sorted(num.keys()), normcumsum)
    plt.xlim(0,100)
    plt.show()

run_test(HGBSA)
run_test(SOME_OTHER_FUNCTION)
</snippet></ROW><ROW><id>19300672</id><snippet>&gt;&gt;&gt; d = {'sup': 100}
&gt;&gt;&gt; l = [d, d, d, d]
&gt;&gt;&gt; l
[{'sup': 100}, {'sup': 100}, {'sup': 100}, {'sup': 100}]
&gt;&gt;&gt; l[0]['nom'] = 12
&gt;&gt;&gt; l
[{'nom': 12, 'sup': 100}, {'nom': 12, 'sup': 100}, {'nom': 12, 'sup': 100}, {'nom': 12, 'sup': 100}]
</snippet></ROW><ROW><id>19300672</id><snippet>&gt;&gt;&gt; d = {'sup': 100}
&gt;&gt;&gt; l = [dict(d), dict(d), dict(d), dict(d)]
&gt;&gt;&gt; l
[{'sup': 100}, {'sup': 100}, {'sup': 100}, {'sup': 100}]
&gt;&gt;&gt; l[0]['nom'] = 12
&gt;&gt;&gt; l
[{'nom': 12, 'sup': 100}, {'sup': 100}, {'sup': 100}, {'sup': 100}]
</snippet></ROW><ROW><id>19300672</id><snippet>l = []
for name, points in dData.items():
    baseCopy = dict(baseCourbe)
    baseCopy['name'] = name
    baseCopy['dataPoints'] = points
    l.append(baseCopy)
</snippet></ROW><ROW><id>19300896</id><snippet>import sys
import random

class Question(object):
    def __init__(self, question, answer, options):
        self.question = question
        self.answer = answer
        self.options = options

    def ask(self):
        print self.question + "?"
        for n, option in enumerate(self.options):
            print "%d) %s" % (n + 1, option)

        response = int(sys.stdin.readline().strip())   # answers are integers
        if response == self.answer:
            print "CORRECT"
        else:
            print "wrong"

questions = [
    Question("How many legs on a horse", 4, ["one", "two", "three", "four", "five"]),
    Question("How many wheels on a bicycle", 2, ["one", "two", "three", "twenty-six"]),

    # more verbose formatting
    Question(question="What colour is a swan in Australia",
             answer=1,
             options=["black", "white", "pink"]),    # the last one can have a comma, too
    ]

random.shuffle(questions)    # randomizes the order of the questions

for question in questions:
    question.ask()
</snippet></ROW><ROW><id>19300896</id><snippet>del questions[0]
</snippet></ROW><ROW><id>19300896</id><snippet>questions.append(Question("What is a new question", 1, ["This is."]))
</snippet></ROW><ROW><id>19300896</id><snippet>pop</snippet></ROW><ROW><id>19300896</id><snippet>remove</snippet></ROW><ROW><id>19300896</id><snippet>del</snippet></ROW><ROW><id>19300896</id><snippet>    def __eq__(self, other):
        return self.question == other.question

    def __repr__(self):
        return "&lt;Question: %s? at %0x&gt;" % (self.question, id(self))
</snippet></ROW><ROW><id>19300896</id><snippet>Question</snippet></ROW><ROW><id>19300896</id><snippet>questions.remove(Question("How many legs on a horse", 0, []))
</snippet></ROW><ROW><id>19301132</id><snippet>N*d</snippet></ROW><ROW><id>19301132</id><snippet>N=10</snippet></ROW><ROW><id>19301132</id><snippet>N</snippet></ROW><ROW><id>19301132</id><snippet>N</snippet></ROW><ROW><id>19301141</id><snippet>boost::python::wrapper</snippet></ROW><ROW><id>19301141</id><snippet>boost::python::make_constructor</snippet></ROW><ROW><id>19301141</id><snippet>wrapper</snippet></ROW><ROW><id>19301141</id><snippet>get_override()</snippet></ROW><ROW><id>19301141</id><snippet>NoneType</snippet></ROW><ROW><id>19301141</id><snippet>NoneType</snippet></ROW><ROW><id>19301141</id><snippet>TypeError</snippet></ROW><ROW><id>19301141</id><snippet>wrapper</snippet></ROW><ROW><id>19301141</id><snippet>make_constructor()</snippet></ROW><ROW><id>19301141</id><snippet>make_wrapper_constructor()</snippet></ROW><ROW><id>19301141</id><snippet>#include &lt;iostream&gt;
#include &lt;boost/function_types/components.hpp&gt;
#include &lt;boost/function_types/result_type.hpp&gt;
#include &lt;boost/make_shared.hpp&gt;
#include &lt;boost/mpl/insert.hpp&gt;
#include &lt;boost/python.hpp&gt;

namespace detail {

/// @brief wrapper_constructor will force the initialization
///        of the wrapper hierarchy when a class is held by
///        another type and inherits from boost::python::wrapper.
template &lt;typename Fn&gt;
class wrapper_constructor
{
public:

  typedef typename boost::function_types::result_type&lt;Fn&gt;::type result_type;

public:

  /// @brief Constructor.
  wrapper_constructor(Fn fn)
    : constructor_(boost::python::make_constructor(fn))
  {}

  /// @brief Construct and initialize python object.
  result_type operator()(boost::python::object self)
  {
    constructor_(self);
    return initialize(self);
  }

  /// @brief Construct and initialize python object.
  template &lt;typename A1&gt;
  result_type operator()(boost::python::object self, A1 a1)
  {
    constructor_(self, a1);
    return initialize(self);
  }

  // ... overloads for arguments, or use variadic templates.

private:

  /// @brief Explicitly initialize the wrapper.
  static result_type initialize(boost::python::object self)
  {
    // Extract holder from self.
    result_type ptr = boost::python::extract&lt;result_type&gt;(self);

    // Explicitly initialize the boost::python::wrapper hierarchy.
    initialize_wrapper(self.ptr(),        // PyObject.
                       get_pointer(ptr)); // wrapper hierarchy.

    return ptr;
  }

private:
  boost::python::object constructor_;
};

} // namespace detail

/// @brief Makes a wrapper constructor (constructor that works with
///        classes inheriting from boost::python::wrapper).
template &lt;typename Fn&gt;
boost::python::object make_wrapper_constructor(Fn fn)
{
  // Python constructors take the instance/self argument as the first
  // argument.  Thus, inject the 'self' argument into the provided
  // constructor function type.
  typedef typename boost::function_types::components&lt;Fn&gt;::type
      components_type;
  typedef typename boost::mpl::begin&lt;components_type&gt;::type begin;
  typedef typename boost::mpl::next&lt;begin&gt;::type self_pos;
  typedef typename boost::mpl::insert&lt;
    components_type, self_pos, boost::python::object&gt;::type signature_type;

  // Create a callable python object that defers to the wrapper_constructor.
  return boost::python::make_function(
    detail::wrapper_constructor&lt;Fn&gt;(fn),
    boost::python::default_call_policies(),
    signature_type());
}

class Base
{
protected:
  Base(int x) : x(x) { std::cout &lt;&lt; "BASE DEFAULT CONSTRUCTOR" &lt;&lt; std::endl; }
  virtual ~Base() {}
  int x;
public:
  std::string CallSay() { return Say(); }
  virtual std::string Say() const = 0;
};

class BaseWrap:
  public Base,
  public boost::python::wrapper&lt;Base&gt;
{
public:
  BaseWrap(int x):
    Base(x)
  { std::cout &lt;&lt; "BASEWRAP DEFAULT CONSTRUCTOR" &lt;&lt; std::endl; }

  virtual std::string Say() const 
  {
    std::cout &lt;&lt; "C++ Say: " &lt;&lt; x &lt;&lt; std::endl;
    return this-&gt;get_override("Say")();
  }

  static boost::shared_ptr&lt;BaseWrap&gt; Create(int x)
  {
    return boost::make_shared&lt;BaseWrap&gt;(x);
  }
};

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;

  // Expose Base.
  python::class_&lt;BaseWrap, boost::shared_ptr&lt;BaseWrap&gt;,
                 boost::noncopyable&gt;("Base", python::no_init)
    .def("__init__", make_wrapper_constructor(&amp;BaseWrap::Create))
    .def("Say", python::pure_virtual(&amp;Base::Say))
    .def("CallSay", &amp;Base::CallSay)
    ;
}
</snippet></ROW><ROW><id>19301141</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; class PythonDerived(example.Base):
...     def __init__(self, x):
...         print "PYTHON DEFAULT CONSTRUCTOR"
...         example.Base.__init__(self, x)
...     def Say(self):
...          return "Python Say"
... 
&gt;&gt;&gt; d = PythonDerived(5)
PYTHON DEFAULT CONSTRUCTOR
BASE DEFAULT CONSTRUCTOR
BASEWRAP DEFAULT CONSTRUCTOR
&gt;&gt;&gt; d
&lt;__main__.PythonDerived object at 0xb7e688ec&gt;
&gt;&gt;&gt; d.Say()
'Python Say'
&gt;&gt;&gt; d.CallSay()
C++ Say: 5
'Python Say'
</snippet></ROW><ROW><id>19301873</id><snippet>from pylab import subplot, show, draw
ax = subplot(111)
props = dict(boxstyle='round', facecolor='red', alpha=0.3) 
t = ax.text(0.03, 0.97, 'test', transform=ax.transAxes, fontsize=10, verticalalignment='top', bbox=props)
show()
bb = t.get_bbox_patch()
bb.set_facecolor('blue')
draw()
</snippet></ROW><ROW><id>19301969</id><snippet>df.columns = ['rows', 'columns', 'values']

pd.pivot_table(
    ...:     data=df,
    ...:     rows='rows',
    ...:     cols='columns',
    ...:     values='values',
    ...:     margins=True)
Out[34]: 
columns                     a    b  All
rows                                   
2013-01-01 00:00:00  0.000000  NaN    0
2013-01-02 00:00:00       NaN  1.0    1
2013-01-03 00:00:00  2.000000  NaN    2
2013-01-04 00:00:00  3.000000  NaN    3
2013-01-05 00:00:00       NaN  4.0    4
All                  1.666667  2.5    2
</snippet></ROW><ROW><id>19302162</id><snippet>try:

    something_with_error

except:
    import traceback
    traceback.print_exc()
    input()
</snippet></ROW><ROW><id>19302205</id><snippet>.get()</snippet></ROW><ROW><id>19302205</id><snippet>.fetch(1)</snippet></ROW><ROW><id>19302205</id><snippet>user = db.GqlQuery("select * from User where user_id = :1", username).get()
if user:
    # now `user` will contain a value if the query returns a value or None if not
</snippet></ROW><ROW><id>19302315</id><snippet>import csv

with open(test.csv', 'rb') as mycsv:

    for item in mycsv:
        item = item.split(',')
        if item[29]:
            print ("Data text data %s" % (item[29])
</snippet></ROW><ROW><id>19302380</id><snippet>raw_input("Press enter to exit...") # use input() if using Python 3.x
</snippet></ROW><ROW><id>19302415</id><snippet>in_()</snippet></ROW><ROW><id>19302415</id><snippet>db.session.query(User).filter(User.id.in_([1, 2, 3, 4])).delete()
</snippet></ROW><ROW><id>19302457</id><snippet>while True:</snippet></ROW><ROW><id>19302457</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from pylab import * 
import pylab
from scipy import linalg
import sys
import scipy.interpolate as interpolate
import scipy.optimize as optimize

def GRLC(values):
    '''
    Calculate Gini index, Gini coefficient, Robin Hood index, and points of 
    Lorenz curve based on the instructions given in 
    www.peterrosenmai.com/lorenz-curve-graphing-tool-and-gini-coefficient-calculator
    Lorenz curve values as given as lists of x &amp; y points [[x1, x2], [y1, y2]]
    @param values: List of values
    @return: [Gini index, Gini coefficient, Robin Hood index, [Lorenz curve]] 
    '''

    n = len(values)
    assert(n &gt; 0), 'Empty list of values'
    sortedValues = sorted(values) #Sort smallest to largest

    #Find cumulative totals
    cumm = [0]
    for i in range(n):
        cumm.append(sum(sortedValues[0:(i + 1)]))

    #Calculate Lorenz points
    LorenzPoints = [[], []]
    sumYs = 0           #Some of all y values
    robinHoodIdx = -1   #Robin Hood index max(x_i, y_i)
    for i in range(1, n + 2):
        x = 100.0 * (i - 1)/n
        y = 100.0 * (cumm[i - 1]/float(cumm[n]))
        LorenzPoints[0].append(x)
        LorenzPoints[1].append(y)
        sumYs += y
        maxX_Y = x - y
        if maxX_Y &gt; robinHoodIdx: robinHoodIdx = maxX_Y   

    giniIdx = 100 + (100 - 2 * sumYs)/n #Gini index 

    return [giniIdx, giniIdx/100, robinHoodIdx, LorenzPoints]

#Name of the data file including the directory, must be .csv
a=raw_input("Data file name? ") 

datafile = open(a.strip(), 'r')
data = []

#opening and organizing the csv file
for row in datafile:
    data.append(row.strip().split(',')) 

#Remove header line if present
c=raw_input("Is there a header row? y/n?") 
if c.strip().lower() == ('y'):
    del data[0]

while True :
    #if I want the first column, that's index 0.
    b=raw_input("What column to analyze?")

    # Validate that the column input data is correct here.  Otherwise it might be out of range, etc.
    # Maybe try this.  You might want more smarts in there, depending on your intent:
    b = int(b.strip())

    # If you expect the user to inpt "2" to mean the second column, you're going to use index 1 (list indexes are 0 based)
    h=[[rowa[b-1] for rowa in data] for i in range(1)]

    # prepares data for calculations
    g=reduce(lambda x,y: x+y,h) 
    a=map(float, g)
    a.sort()
    print ('Organized data= ',a)

    result = GRLC(a)
    print 'Gini Index', result[0]  
    print 'Gini Coefficient', result[1]
    print 'Robin Hood Index', result[2]
</snippet></ROW><ROW><id>19302694</id><snippet>&gt;&gt;&gt; def double_inputs():
...     while True:
...         next = yield
...         yield next * 2
...
&gt;&gt;&gt; gen = double_inputs()
&gt;&gt;&gt; gen.next() #run up to the first yield
&gt;&gt;&gt; gen.send(10) #goes into 'next' variable
20
&gt;&gt;&gt; gen.next() #run up to the next yield
&gt;&gt;&gt; gen.send(6) #goes into 'next' again
12
&gt;&gt;&gt; gen.next() #run up to the next yield
&gt;&gt;&gt; gen.send(94.3) #goes into 'next' again
188.5999999999999
</snippet></ROW><ROW><id>19302694</id><snippet>yield</snippet></ROW><ROW><id>19302694</id><snippet>@defer.inlineCallbacks</snippet></ROW><ROW><id>19302694</id><snippet>@defer.inlineCallbacks
def doStuff():
    result = yield takesTwoSeconds()
    nextResult = yield takesTenSeconds(result * 10)
    defer.returnValue(nextResult / 10)
</snippet></ROW><ROW><id>19302694</id><snippet>takesTwoSeconds()</snippet></ROW><ROW><id>19302694</id><snippet>Deferred</snippet></ROW><ROW><id>19302694</id><snippet>doStuff()</snippet></ROW><ROW><id>19302694</id><snippet>doStuff()</snippet></ROW><ROW><id>19302694</id><snippet>def doStuff():
    returnDeferred = defer.Deferred()
    def gotNextResult(nextResult):
        returnDeferred.callback(nextResult / 10)
    def gotResult(result):
        takesTenSeconds(result * 10).addCallback(gotNextResult)
    takesTwoSeconds().addCallback(gotResult)
    return returnDeferred
</snippet></ROW><ROW><id>19302843</id><snippet>dateutil</snippet></ROW><ROW><id>19302843</id><snippet>country_code</snippet></ROW><ROW><id>19302843</id><snippet>In [83]: df
Out[83]:
                     country_code    request_type  latency
timestamp
2013-10-10 13:40:01             1     get_account      134
2013-10-10 13:40:59            34     get_account      256
2013-10-10 13:41:09           230  modify_account      589
2013-10-10 13:41:12           230     get_account       43
2013-10-10 13:53:12             1  modify_account     1003

In [100]: df.groupby('country_code').request_type.resample('10T', how='count')
Out[100]:
country_code  timestamp
1             2013-10-10 13:40:00    1
              2013-10-10 13:50:00    1
34            2013-10-10 13:40:00    1
230           2013-10-10 13:40:00    2
dtype: int64
</snippet></ROW><ROW><id>19302843</id><snippet>latency</snippet></ROW><ROW><id>19302843</id><snippet>request_type</snippet></ROW><ROW><id>19302843</id><snippet>In [107]: df.groupby('request_type').latency.resample('T', how=lambda x: x.quantile(0.99))
Out[107]:
request_type    timestamp
get_account     2013-10-10 13:40:00     254.78
                2013-10-10 13:41:00      43.00
modify_account  2013-10-10 13:41:00     589.00
                2013-10-10 13:42:00        NaN
                2013-10-10 13:43:00        NaN
                2013-10-10 13:44:00        NaN
                2013-10-10 13:45:00        NaN
                2013-10-10 13:46:00        NaN
                2013-10-10 13:47:00        NaN
                2013-10-10 13:48:00        NaN
                2013-10-10 13:49:00        NaN
                2013-10-10 13:50:00        NaN
                2013-10-10 13:51:00        NaN
                2013-10-10 13:52:00        NaN
                2013-10-10 13:53:00    1003.00
dtype: float64
</snippet></ROW><ROW><id>19302843</id><snippet>country_code</snippet></ROW><ROW><id>19302843</id><snippet>request_type</snippet></ROW><ROW><id>19302843</id><snippet>DataFrame.groupby</snippet></ROW><ROW><id>19302843</id><snippet>In [108]: df.groupby(['country_code', 'request_type']).request_type.resample('10T', how='count')
Out[108]:
country_code  request_type    timestamp
1             get_account     2013-10-10 13:40:00    1
              modify_account  2013-10-10 13:50:00    1
34            get_account     2013-10-10 13:40:00    1
230           get_account     2013-10-10 13:40:00    1
              modify_account  2013-10-10 13:40:00    1
dtype: int64
</snippet></ROW><ROW><id>19302856</id><snippet>e.xpath</snippet></ROW><ROW><id>19302856</id><snippet>e.find</snippet></ROW><ROW><id>19302856</id><snippet>import lxml.etree as ET

content = '''\
&lt;Envelope xmlns="http://www.xxx.com/zzz/yyy"&gt;
  &lt;Header&gt;
    &lt;Version&gt;1&lt;/Version&gt;
  &lt;/Header&gt;
  &lt;Buckets&gt;
    some stuff
  &lt;/Buckets&gt;
&lt;/Envelope&gt;
'''
root = ET.fromstring(content)
print(root.xpath("./*[local-name()='Buckets']"))
# [&lt;Element {http://www.xxx.com/zzz/yyy}Buckets at 0xb73a62ac&gt;]
</snippet></ROW><ROW><id>19302906</id><snippet>data.dtype.names
</snippet></ROW><ROW><id>19302906</id><snippet>In [39]: data
Out[39]: 
array([('2010-1-1', 1.2, 2.3, 3.4), ('2010-2-1', 4.5, 5.6, 6.7)], 
      dtype=[('f0', '|S10'), ('f1', '&lt;f8'), ('f2', '&lt;f8'), ('f3', '&lt;f8')])

In [40]: data.dtype
Out[40]: dtype([('f0', '|S10'), ('f1', '&lt;f8'), ('f2', '&lt;f8'), ('f3', '&lt;f8')])

In [41]: data.dtype.names
Out[41]: ('f0', 'f1', 'f2', 'f3')
</snippet></ROW><ROW><id>19302984</id><snippet>from collections import defaultdict

time=[1,2,3,3] 
cf=[100,500,1000,-500]

result = defaultdict(int)

for num,i in enumerate(time):
    result[i] += cf[num]   

time2 = list(result.keys())
cf2 = list(result.values())
</snippet></ROW><ROW><id>19303334</id><snippet>__init__</snippet></ROW><ROW><id>19303334</id><snippet>self</snippet></ROW><ROW><id>19303334</id><snippet>this</snippet></ROW><ROW><id>19303334</id><snippet>self.&lt;attribute&gt;</snippet></ROW><ROW><id>19303334</id><snippet>&gt;&gt;&gt; class Main:
...     def __init__(self):
...         self._age = None
...         self._xyz = None
...     def method(self):
...         print self._age, self._xyz
...
&gt;&gt;&gt; test = Main()
&gt;&gt;&gt; test.method()
None None
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19303477</id><snippet>rsplit()</snippet></ROW><ROW><id>19303477</id><snippet>&gt;&gt;&gt; st = 'Hello my name is John'
&gt;&gt;&gt; st.rsplit(' ', 1)
['Hello my name is', 'John']
&gt;&gt;&gt; 
&gt;&gt;&gt; st.rsplit(' ', 1)[1]
'John'
</snippet></ROW><ROW><id>19303477</id><snippet>split</snippet></ROW><ROW><id>19303477</id><snippet>None</snippet></ROW><ROW><id>19303477</id><snippet>&gt;&gt;&gt; st.rsplit(None, 1)[-1]
'John'
</snippet></ROW><ROW><id>19303477</id><snippet>-1</snippet></ROW><ROW><id>19303525</id><snippet> x = zip(*[iter(my_array)]*5)
</snippet></ROW><ROW><id>19303525</id><snippet>n = 5
x = [my_array[i:i+n] for i in range(0,len(my_array),n)]
</snippet></ROW><ROW><id>19303525</id><snippet>iter</snippet></ROW><ROW><id>19303558</id><snippet>mainfunc</snippet></ROW><ROW><id>19303558</id><snippet>post</snippet></ROW><ROW><id>19303558</id><snippet>import webapp2
import StringIO

class MainPage(webapp2.RequestHandler):
   def get(self):
     old_stdout = sys.stdout
     new_stdout = StringIO.StringIO()
     sys.stdout = new_stdout
     mainfunc()
     self.response.out.write(new_stdout.getvalue())
     sys.stdout = old_stdout

app = webapp2.WSGIApplication([('/', MainPage)],debug=True)
</snippet></ROW><ROW><id>19303591</id><snippet>[]</snippet></ROW><ROW><id>19303591</id><snippet>import json
import urllib2

data = json.load(urllib2.urlopen('http://someurl/path/to/json'))
print json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))
</snippet></ROW><ROW><id>19303591</id><snippet>obj = next((obj for obj in data if obj["id"] == 2), None)
</snippet></ROW><ROW><id>19303606</id><snippet>taskQ</snippet></ROW><ROW><id>19303606</id><snippet>resultQ</snippet></ROW><ROW><id>19303606</id><snippet>taskCond</snippet></ROW><ROW><id>19303606</id><snippet>resultCond</snippet></ROW><ROW><id>19303606</id><snippet>lock</snippet></ROW><ROW><id>19303606</id><snippet>import multiprocessing as mp
taskQ = mp.Queue()
resultQ = mp.Queue()
lock = mp.Lock()
# both conditions share lock
taskCond = mp.Condition(lock)
resultCond = mp.Condition(lock)
</snippet></ROW><ROW><id>19303606</id><snippet>def get_task():
    taskCond.acquire()
    while taskQ.qsize() == 0 or resultQ.qsize():
        taskCond.wait()
    # resultQ is empty and taskQ has something
    task = taskQ.get()
    taskCond.release()
    return task
</snippet></ROW><ROW><id>19303606</id><snippet>with resultCond:
    resultQ.put(result)
    # only the server waits on resultCond
    resultCond.notify()
</snippet></ROW><ROW><id>19303606</id><snippet>resultCond.acquire()
while True:
    while resultQ.qsize() == 0:
        resultCond.wait()
    # operations on both queues in all clients are blocked now
    # ... drain resultQ, reorder taskQ ...
    taskCond.notify_all()
</snippet></ROW><ROW><id>19303606</id><snippet>qsize()</snippet></ROW><ROW><id>19303606</id><snippet>mp.Queue</snippet></ROW><ROW><id>19303606</id><snippet>mp.Manager().list()</snippet></ROW><ROW><id>19303606</id><snippet>taskCond.notify_all()</snippet></ROW><ROW><id>19303606</id><snippet>resultQ.put(result)
with resultCond:
    resultCond.notify()
</snippet></ROW><ROW><id>19303743</id><snippet>Dictionary(x)</snippet></ROW><ROW><id>19303743</id><snippet>cd</snippet></ROW><ROW><id>19303743</id><snippet>None</snippet></ROW><ROW><id>19303743</id><snippet>def Dictionary(x):

     wDictionary = open('file.csv', 'r')
     mylist = []
     for line in wDictionary.readlines():
           mylist.append(line.split(','))
     return mylist


 def main():

     x = input('enter text:')
     cd = Dictionary(x)
     for line in cd:
         if x in line:
             print('yes')

 main()
</snippet></ROW><ROW><id>19303743</id><snippet>x</snippet></ROW><ROW><id>19303889</id><snippet>quality</snippet></ROW><ROW><id>19303889</id><snippet>im.save('/path/to/cover-2.jpg', format='JPEG', subsampling=0, quality=100)
</snippet></ROW><ROW><id>19304022</id><snippet>from datetime import datetime
a = datetime.strptime(convdate, "%b %d %H:%M:%S %Y %Z")
b = datetime(1970, 1, 1)
(a-b).total_seconds()
</snippet></ROW><ROW><id>19304057</id><snippet>__init__</snippet></ROW><ROW><id>19304057</id><snippet>testClass Object</snippet></ROW><ROW><id>19304057</id><snippet>class GameScore(Object):
    pass
</snippet></ROW><ROW><id>19304057</id><snippet>__init__</snippet></ROW><ROW><id>19304057</id><snippet>__init__(self, param)</snippet></ROW><ROW><id>19304057</id><snippet>testId</snippet></ROW><ROW><id>19304057</id><snippet>class testClass(Object):
    pass

testObj = testClass(testId=param)
</snippet></ROW><ROW><id>19304057</id><snippet>__init__</snippet></ROW><ROW><id>19304057</id><snippet>testId</snippet></ROW><ROW><id>19304057</id><snippet>__init__</snippet></ROW><ROW><id>19304057</id><snippet>__init__</snippet></ROW><ROW><id>19304057</id><snippet>class testClass(Object):
    """Create a Test Class Object"""
    def __init__(self, **kwargs):
        logging.info("testClass() New testClass object created()")
        print 'testClass() New testClass object created()'

        assert "testId" in kwargs

        Object.__init__(self, **kwargs)
</snippet></ROW><ROW><id>19304243</id><snippet>max</snippet></ROW><ROW><id>19304243</id><snippet>&gt;&gt;&gt; the_list = [['a','b','c','1'],['b','c','e','4'],['d','e','f','2']]
&gt;&gt;&gt; max(the_list, key=lambda x:int(x[-1]))
['b', 'c', 'e', '4']
</snippet></ROW><ROW><id>19304243</id><snippet>lambda</snippet></ROW><ROW><id>19304243</id><snippet>def func(x):
    return int(x[-1])
max(the_list, key=func)
#['b', 'c', 'e', '4']
</snippet></ROW><ROW><id>19304265</id><snippet>arr = []
for sublist in li:
    for item in sublist:
        arr.append( item )
</snippet></ROW><ROW><id>19304302</id><snippet>Cell</snippet></ROW><ROW><id>19304302</id><snippet>value</snippet></ROW><ROW><id>19304302</id><snippet>for cell in row:
    cell_value = cell.value
    # etc
</snippet></ROW><ROW><id>19304309</id><snippet>f</snippet></ROW><ROW><id>19304309</id><snippet>arcpy.Delete_management(f)</snippet></ROW><ROW><id>19304309</id><snippet>gdb</snippet></ROW><ROW><id>19304309</id><snippet>arcpy.da.Walk</snippet></ROW><ROW><id>19304309</id><snippet>(dirpath, dirnames, and filenames)</snippet></ROW><ROW><id>19304309</id><snippet>`dirpath` is the path to the workspace as a string.
`dirnames` is a list of names of subdirectories and other workspaces in `dirpath`.
`filenames` is a list of names of non-workspace contents in `dirpath`.
</snippet></ROW><ROW><id>19304309</id><snippet>dirpath</snippet></ROW><ROW><id>19304309</id><snippet>os.path.join(dirpath, name)</snippet></ROW><ROW><id>19304309</id><snippet>arcpy.Delete_management(os.path.join(gdb,f))
</snippet></ROW><ROW><id>19304309</id><snippet>for gdb, fd, fc in arcpy.da.Walk(out_loc):
    for f in fc:
        print "checking whether to keep", f
        if not any(f in fl_nm for fl_nm in fl_nm_lst):
            to_del = os.path.join(gdb,f)
            print "deleting", to_del
            arcpy.Delete_management(to_del)
        print "keeping", f
</snippet></ROW><ROW><id>19304347</id><snippet>x</snippet></ROW><ROW><id>19304347</id><snippet>&gt;&gt;&gt; "one: %s two: %s" % ('fish','chips')
'one: fish two: chips'
</snippet></ROW><ROW><id>19304347</id><snippet>&gt;&gt;&gt; "This is a tuple: %s" % (('fish','chips'),)
"This is a tuple: ('fish', 'chips')"
</snippet></ROW><ROW><id>19304347</id><snippet>(x,)</snippet></ROW><ROW><id>19304347</id><snippet>(x)</snippet></ROW><ROW><id>19304347</id><snippet>x</snippet></ROW><ROW><id>19304409</id><snippet>n</snippet></ROW><ROW><id>19304409</id><snippet>&gt;&gt;&gt; cf = [100,25,-30,4,-12,60]
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; [sum(cf[x:x+n]) for x in range(0, len(cf), n)]
[125, -26, 48]
</snippet></ROW><ROW><id>19304627</id><snippet>dict(line.split(',') for line in WDictionary)
</snippet></ROW><ROW><id>19304627</id><snippet>dict(line.strip().split(',') for line in WDictionary)
</snippet></ROW><ROW><id>19304751</id><snippet>array.array</snippet></ROW><ROW><id>19304751</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19304751</id><snippet>with contextlib.closing(dbm.open('temp.db', 'n')) as db:
    with open(path) as f:
        for i, line in enumerate(f):
            db[str(i)] = line
    linecount = i
    shuffled = random.shuffle(range(linecount))
    with open(path + '.shuffled', 'w') as f:
        for i in shuffled:
            f.write(db[str(i)])
os.remove('temp.db')
</snippet></ROW><ROW><id>19304751</id><snippet>sqlite3</snippet></ROW><ROW><id>19304751</id><snippet>SELECT * FROM Lines ORDER BY RANDOM()
</snippet></ROW><ROW><id>19304751</id><snippet>with open(path) as f:
    linecount = sum(1 for _ in f)
shuffled = random.shuffle(range(linecount))
with open(path + '.shuffled', 'w') as f:
    for i in shuffled:
        f.write(linecache.getline(path, i))
</snippet></ROW><ROW><id>19304751</id><snippet>with open(path) as f:
    linestarts = [f.tell() for line in f]
    lineranges = zip(linestarts, linestarts[1:] + [f.tell()])
    shuffled = random.shuffle(lineranges)
    with open(path + '.shuffled', 'w') as f1:
        for start, stop in shuffled:
            f.seek(start)
            f1.write(f.read(stop-start))
</snippet></ROW><ROW><id>19304887</id><snippet>next</snippet></ROW><ROW><id>19304887</id><snippet>item = next((item for item in data if item['id'] == 2), None)
if item:
    print item['abstract']
</snippet></ROW><ROW><id>19304887</id><snippet>id == 2</snippet></ROW><ROW><id>19304887</id><snippet>my_gen = (item for item in data if item['id'] == 2)
for item in my_gen:
    print item
</snippet></ROW><ROW><id>19304887</id><snippet>item</snippet></ROW><ROW><id>19304887</id><snippet>id == 2</snippet></ROW><ROW><id>19304941</id><snippet>()</snippet></ROW><ROW><id>19304941</id><snippet>f.close()
</snippet></ROW><ROW><id>19304941</id><snippet>with</snippet></ROW><ROW><id>19304941</id><snippet>with open("da_email.txt", "w") as f:
    f.write(pretty_email)
</snippet></ROW><ROW><id>19305206</id><snippet>__getitem__</snippet></ROW><ROW><id>19305206</id><snippet>SelObj</snippet></ROW><ROW><id>19305206</id><snippet>__getitem__</snippet></ROW><ROW><id>19305206</id><snippet>__getitem__</snippet></ROW><ROW><id>19305206</id><snippet>self[index]</snippet></ROW><ROW><id>19305206</id><snippet>self.__getitem__(index)</snippet></ROW><ROW><id>19305206</id><snippet>__getitem__</snippet></ROW><ROW><id>19305206</id><snippet>__getitem__</snippet></ROW><ROW><id>19305206</id><snippet>def __getitem__(self, index):
    return super(Darray, self).__getitem__(index)
</snippet></ROW><ROW><id>19305206</id><snippet>class NamedRows(np.ndarray):
    def __new__(cls, rows, *args, **kwargs):
        obj = np.asarray(*args, **kwargs).view(cls)
        obj.__row_name_idx = dict((n, i) for i, n in enumerate(rows))
        return obj

    def __getitem__(self, idx):
        if isinstance(idx, basestring):
            idx = self.__row_name_idx[idx]
        return super(NamedRows, self).__getitem__(idx)
</snippet></ROW><ROW><id>19305206</id><snippet>&gt;&gt;&gt; a = NamedRows(["foo", "bar"], [[1,2,3], [4,5,6]])
&gt;&gt;&gt; a["foo"]
NamedRows([1, 2, 3])
</snippet></ROW><ROW><id>19305213</id><snippet>output = ["\t".join(a) for a in the_list]
</snippet></ROW><ROW><id>19305249</id><snippet>poly[len(poly)-1:]
</snippet></ROW><ROW><id>19305249</id><snippet>poly</snippet></ROW><ROW><id>19305249</id><snippet>poly[len(poly)-1]
</snippet></ROW><ROW><id>19305249</id><snippet>poly[-1]
</snippet></ROW><ROW><id>19305443</id><snippet>__init__</snippet></ROW><ROW><id>19305443</id><snippet>@classmethod</snippet></ROW><ROW><id>19305443</id><snippet>class Breakfast(object):
    @classmethod
    def from_eggs(cls, eggs):
        obj = cls()
        obj.spam, obj.eggs = 5, eggs
        return obj

    @classmethod
    def from_spam_and_eggs(cls, spam, eggs):
        obj = cls()
        obj.spam, obj.eggs = spam, eggs
        return obj
</snippet></ROW><ROW><id>19305443</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19305443</id><snippet>now</snippet></ROW><ROW><id>19305443</id><snippet>fromtimestamp</snippet></ROW><ROW><id>19305443</id><snippet>class Breakfast(object):
    def __init__(self, eggs=0, spam=5):
        self.spam, self.eggs = spam, eggs
</snippet></ROW><ROW><id>19305443</id><snippet>int</snippet></ROW><ROW><id>19305443</id><snippet>class Breakfast(object):
    pass

class HealthyBreakfast(object):
    def __init__(self, spam):
        self.spam, self.eggs = spam, 0

class NormalBreakfast(object):
    def __init__(self, spam, eggs):
        self.spam, self.eggs = spam, eggs
</snippet></ROW><ROW><id>19305443</id><snippet>class Breakfast(object):
    def __init__(self, eggs, spam):
        self.spam, self.eggs = spam, eggs

class HealthyBreakfast(object):
    def __init__(self, spam):
        super(HealthyBreakfast, self).__init__(0, spam)
</snippet></ROW><ROW><id>19305781</id><snippet>text</snippet></ROW><ROW><id>19305781</id><snippet>bytea</snippet></ROW><ROW><id>19305781</id><snippet>bytea</snippet></ROW><ROW><id>19305781</id><snippet>bytea</snippet></ROW><ROW><id>19305781</id><snippet>bytea</snippet></ROW><ROW><id>19305781</id><snippet>SELECT convert_to(data, 'LATIN1') ...
</snippet></ROW><ROW><id>19305781</id><snippet>bytea</snippet></ROW><ROW><id>19305781</id><snippet>ASCII</snippet></ROW><ROW><id>19306015</id><snippet>jpeg</snippet></ROW><ROW><id>19306015</id><snippet>jpg</snippet></ROW><ROW><id>19306015</id><snippet>xlsx</snippet></ROW><ROW><id>19306015</id><snippet>import zipfile
XLSname = "/Users/user/myfile.xlsx"

EmbeddedFiles = zipfile.ZipFile(XLSname).namelist()
ImageFiles = [F for F in EmbeddedFiles if F.count('.jpg') or F.count('.jpeg') ]

for Image in ImageFiles:
    zipfile.ZipFile(XLSname).extract(Image)
</snippet></ROW><ROW><id>19306158</id><snippet>b["input"].append(3)</snippet></ROW><ROW><id>19306158</id><snippet>b["input"].append(3)</snippet></ROW><ROW><id>19306291</id><snippet>pic_mat = np.array(imo.convert('L'))
</snippet></ROW><ROW><id>19306291</id><snippet>shape=(dim[0] , dim[1])</snippet></ROW><ROW><id>19306291</id><snippet>shape=dim[:2]</snippet></ROW><ROW><id>19306291</id><snippet>:2</snippet></ROW><ROW><id>19306302</id><snippet>(?:\n^[ ]{5}[A-Za-zА-Яа-я0-9_\-:,\.«» ]+)*
</snippet></ROW><ROW><id>19306302</id><snippet>^([A-Za-zА-Яа-я0-9_\-:,\.«» ]+)\n{2}^[ ]{5}([A-Za-zА-Яа-я0-9_\-:,\.«» ]+(?:\n^[ ]{5}[A-Za-zА-Яа-я0-9_\-:,\.«» ]+)*)$
</snippet></ROW><ROW><id>19306477</id><snippet>BaseInlineFormSet</snippet></ROW><ROW><id>19306477</id><snippet>class BaseBarFormSet(BaseInlineFormSet):
    def __init__(other_model_queryset, *args, **kwargs):
        super(BaseInlineFormSet, self).__init__(*args, **kwargs)

        for form in self.forms:
            form.fields['other_field'].queryset = other_model_queryset
</snippet></ROW><ROW><id>19306477</id><snippet>FormSet = inlineformset_factory(Foo, Bar, form=BarForm, formset=forms.BaseBarFormSet) # notice formset=forms.BaseBarFormSet
</snippet></ROW><ROW><id>19306477</id><snippet>FormSet</snippet></ROW><ROW><id>19306477</id><snippet>formset = FormSet(OtherModel.objects.filter(…), instance=foo) #notice the first parameter
</snippet></ROW><ROW><id>19306487</id><snippet>import turtle
from random import randint

x = 50

turtle = turtle.Turtle()

degrees = randint(0, 360)
turtle.left(degrees)
turtle.forward(x)

turtle.getscreen()._root.mainloop()
</snippet></ROW><ROW><id>19306746</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>19306746</id><snippet>Peers.select().where((Peers.user == 'foo') &amp; (Peers.deleted &gt;&gt; None))
</snippet></ROW><ROW><id>19306746</id><snippet>Peers.select().where(~(Peers.deleted &gt;&gt; None))
</snippet></ROW><ROW><id>19306776</id><snippet>bbox = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
width, height = bbox.width, bbox.height
</snippet></ROW><ROW><id>19306776</id><snippet>fig.dpi</snippet></ROW><ROW><id>19306776</id><snippet>width *= fig.dpi
height *= fig.dpi
</snippet></ROW><ROW><id>19306776</id><snippet>import matplotlib.pyplot as plt

def get_ax_size(ax):
    bbox = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
    width, height = bbox.width, bbox.height
    width *= fig.dpi
    height *= fig.dpi
    return width, height

fig, ax = plt.subplots()
print(get_ax_size(ax))
#(496.0, 384.00000000000006)

ax2 = plt.axes([0.3, 0.3, 0.7, 0.7])
print(get_ax_size(ax2))
# (448.0, 336.0)
</snippet></ROW><ROW><id>19306776</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def get_ax_size(ax):
    bbox = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
    width, height = bbox.width, bbox.height
    width *= fig.dpi
    height *= fig.dpi
    return width, height

data = np.arange(9).reshape((3, 3))
fig = plt.figure(figsize=(8,6), dpi=80)
ax = plt.Axes(fig, [0., 0., 1., 1.])
ax.set_axis_off()
fig.add_axes(ax)
ax.imshow(data, aspect='normal')
print(get_ax_size(ax))
# (640.0, 480.0)
plt.savefig('/tmp/test.png', dpi=80)
</snippet></ROW><ROW><id>19306776</id><snippet>% identify /tmp/test.png
/tmp/test.png PNG 640x480 640x480+0+0 8-bit DirectClass 50.5KB 0.020u 0:00.020
</snippet></ROW><ROW><id>19307027</id><snippet>shuffle</snippet></ROW><ROW><id>19307027</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; r = random.random()
&gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; random.shuffle(x, lambda: r)
&gt;&gt;&gt; x
[1, 2, 3, 6, 4, 5]
&gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; random.shuffle(x, lambda: r)
&gt;&gt;&gt; x
[1, 2, 3, 6, 4, 5]
</snippet></ROW><ROW><id>19307027</id><snippet>shuffle</snippet></ROW><ROW><id>19307050</id><snippet>&gt;&gt;&gt; line = 'jaslkfdj,asldkfj,,,'
&gt;&gt;&gt; key, value = line.split(',')
ValueError: too many values to unpack (expected 2)
</snippet></ROW><ROW><id>19307050</id><snippet>&gt;&gt;&gt; line = 'jaslkfdj,asldkfj,,,'
&gt;&gt;&gt; parts = line.split(',')
&gt;&gt;&gt; key, value = parts[:2]
</snippet></ROW><ROW><id>19307050</id><snippet>maxsplit</snippet></ROW><ROW><id>19307050</id><snippet>&gt;&gt;&gt; line = 'jaslkfdj,asldkfj,,,'
&gt;&gt;&gt; key, value = line.split(',', 1)
</snippet></ROW><ROW><id>19307050</id><snippet>value</snippet></ROW><ROW><id>19307050</id><snippet>&gt;&gt;&gt; value = value.rstrip(',')
</snippet></ROW><ROW><id>19307134</id><snippet>def myfuncone(id, **kwargs):
    print kwargs.keys()

import functools
myfuncone_with_context = functools.partial(myfuncone, context=mycontextone)
app.add_url_rule('/myproj/one, methods=['GET'],
                 view_func=myfuncone_with_context)
</snippet></ROW><ROW><id>19307307</id><snippet>from datetime import date, timedelta

def perdelta(start, end, delta):
    curr = start
    while curr &lt; end:
        yield curr, min(curr + delta, end)
        curr += delta
</snippet></ROW><ROW><id>19307307</id><snippet>(date1, date2)</snippet></ROW><ROW><id>19307307</id><snippet>end</snippet></ROW><ROW><id>19307307</id><snippet>&gt;&gt;&gt; for s, e in perdelta(date(2011, 10, 10), date(2011, 11, 10), timedelta(days=3)):
...     print s, e
... 
2011-10-10 2011-10-13
2011-10-13 2011-10-16
2011-10-16 2011-10-19
2011-10-19 2011-10-22
2011-10-22 2011-10-25
2011-10-25 2011-10-28
2011-10-28 2011-10-31
2011-10-31 2011-11-03
2011-11-03 2011-11-06
2011-11-06 2011-11-09
2011-11-09 2011-11-10
</snippet></ROW><ROW><id>19307398</id><snippet>identifier ::=  (letter|"_") (letter | digit | "_")*
letter     ::=  lowercase | uppercase
lowercase  ::=  "a"..."z"
uppercase  ::=  "A"..."Z"
digit      ::=  "0"..."9"
</snippet></ROW><ROW><id>19307414</id><snippet>text_inside_button_id = driver.find_element_by_id("picview").text
</snippet></ROW><ROW><id>19307661</id><snippet>NONE</snippet></ROW><ROW><id>19307661</id><snippet>'.'</snippet></ROW><ROW><id>19307661</id><snippet>def printBoard (b):
    print('  '.join(map(lambda x: str(x + 1), range(BOARD_COLUMNS))))
    for y in range(BOARD_ROWS):
        print('  '.join(b[x][y] for x in range(BOARD_COLUMNS)))
</snippet></ROW><ROW><id>19307661</id><snippet>&gt;&gt;&gt; x = _new_game_board()
&gt;&gt;&gt; printBoard(x)
1  2  3  4  5  6  7
.  .  .  .  .  .  .
.  .  .  .  .  .  .
.  .  .  .  .  .  .
.  .  .  .  .  .  .
.  .  .  .  .  .  .
.  .  .  .  .  .  .
</snippet></ROW><ROW><id>19307661</id><snippet>&gt;&gt;&gt; x[1][-1] = RED
&gt;&gt;&gt; x[1][-2] = RED
&gt;&gt;&gt; x[1][-3] = YELLOW
&gt;&gt;&gt; x[2][-1] = RED
&gt;&gt;&gt; x[2][-2] = YELLOW
&gt;&gt;&gt; x[2][-3] = RED
&gt;&gt;&gt; x[2][-4] = YELLOW
&gt;&gt;&gt; printBoard(x)
1  2  3  4  5  6  7
.  .  .  .  .  .  .
.  .  .  .  .  .  .
.  .  Y  .  .  .  .
.  Y  R  .  .  .  .
.  R  Y  .  .  .  .
.  R  R  .  .  .  .
</snippet></ROW><ROW><id>19307669</id><snippet>subprocess</snippet></ROW><ROW><id>19307669</id><snippet>C:\xxx.txt</snippet></ROW><ROW><id>19307669</id><snippet>"C:\xxx.txt"</snippet></ROW><ROW><id>19307669</id><snippet>shell=True</snippet></ROW><ROW><id>19307821</id><snippet>multiprocessing</snippet></ROW><ROW><id>19307821</id><snippet>time.sleep(x)</snippet></ROW><ROW><id>19307821</id><snippet>x</snippet></ROW><ROW><id>19307821</id><snippet>.poll(x)</snippet></ROW><ROW><id>19307821</id><snippet>multiprocessing</snippet></ROW><ROW><id>19307821</id><snippet>multiprocessing</snippet></ROW><ROW><id>19307821</id><snippet>Manager</snippet></ROW><ROW><id>19307829</id><snippet>pytz</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; mytz = pytz.timezone('America/Los_Angeles')
&gt;&gt;&gt; now = datetime.datetime.now(tz=mytz)
&gt;&gt;&gt; now
datetime.datetime(2013, 10, 10, 16, 34, 3, 113620, tzinfo=&lt;DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST&gt;)
</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; now.strftime('%Y-%m-%d %H:%M:%S %Z')
'2013-10-10 16:34:03 PDT'
</snippet></ROW><ROW><id>19307829</id><snippet>os.environ['TZ']</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; time.tzset()
&gt;&gt;&gt; time.tzname
('PST', 'PDT')
</snippet></ROW><ROW><id>19307829</id><snippet>tzset</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; time.tzset()
&gt;&gt;&gt; sec = -time.timezone
</snippet></ROW><ROW><id>19307829</id><snippet>tzset</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; t = time.time()
&gt;&gt;&gt; local = datetime.datetime.fromtimestamp(t)
&gt;&gt;&gt; utc = datetime.datetime.utcfromtimestamp(t)
&gt;&gt;&gt; offset = local - utc
&gt;&gt;&gt; sec = offset.total_seconds()
</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; hr, sec = divmod(sec, 3600)
&gt;&gt;&gt; min, sec = divmod(sec, 60)
&gt;&gt;&gt; offstr = '{:+03d}{:02d}'.format(hr, min)
</snippet></ROW><ROW><id>19307829</id><snippet>&gt;&gt;&gt; datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " " + offstr
'2013-10-10 16:18:36 -0800'
</snippet></ROW><ROW><id>19307829</id><snippet>time</snippet></ROW><ROW><id>19307829</id><snippet>tzset</snippet></ROW><ROW><id>19307965</id><snippet>lloyd['homework'] == [90.0, 97.0, 75.0, 92.0]</snippet></ROW><ROW><id>19307965</id><snippet>[int(f) for f in lloyd['homework']]
Out[53]: [90, 97, 75, 92]
</snippet></ROW><ROW><id>19307965</id><snippet>map</snippet></ROW><ROW><id>19307965</id><snippet>map(int,lloyd['homework'])
Out[55]: [90, 97, 75, 92]
</snippet></ROW><ROW><id>19308127</id><snippet>test</snippet></ROW><ROW><id>19308127</id><snippet>__all__ = ['foo']

foo = 3
bar = 4
</snippet></ROW><ROW><id>19308127</id><snippet>&gt;&gt;&gt; import test
&gt;&gt;&gt; test.foo
3
&gt;&gt;&gt; test.bar
4
&gt;&gt;&gt; from test import *
&gt;&gt;&gt; foo
3
&gt;&gt;&gt; bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'bar' is not defined
</snippet></ROW><ROW><id>19308127</id><snippet>test.bar</snippet></ROW><ROW><id>19308127</id><snippet>bar</snippet></ROW><ROW><id>19308127</id><snippet>__all__</snippet></ROW><ROW><id>19308127</id><snippet>from ... import *</snippet></ROW><ROW><id>19308278</id><snippet>conn.commit()</snippet></ROW><ROW><id>19308303</id><snippet>def numberOfNumeral(n):
    """ Return the number represented by the single numeral """
    # e.g. "v" -&gt; 5, "i" -&gt; 5 (and handle v/V cases, etc.)

# avoid "string" as a variable name
# I chose "ns" for "numerals" (which might be better),
# but I'm also a bit terse .. anyway, name variables for what they represents.
ns = str(input("Enter a roman numeral"))

while ns:
   firstNum = numberOfNumeral(ns[0])
   # This makes secondValue = -1 when there is only one numeral left
   # so firstNum is always "at least" secondNum when len(ns) == 1. 
   secondNum = numberOfNumeral(ns[1]) if len(ns) &gt; 1 else -1
   if firstNum is at least secondNum:
      # Add firstNum to total.
      # Remove the character - so that the loop state advances.
      # If we don't don't his, as in the original, it will never end.
      # Here we use "slice notation".
      ns = ns[1:] 
   else:
      # Add the difference, secondNum - firstNum, to total.
      # Remove both characters - again, so we advance state.
      ns = ns[2:]
</snippet></ROW><ROW><id>19308555</id><snippet>sort</snippet></ROW><ROW><id>19308555</id><snippet># merger.py
# this python script takes in a file with sorted lines and gives your output
import sys

prevtag = None
data = ['', '', '']
printed = True
for line in sys.stdin:
    fields = line.strip().split()
    if fields[0] != prevtag:
        if not printed:
            print prevtag, ' '.join(data)
            printed = True
        prevtag = fields[0]
        data = ['', '', '']
    if fields[1] == '&lt;first&gt;':
        data[0] = fields[2]
        printed = False
    if fields[1] == '&lt;second&gt;':
        data[1] = fields[2]
        printed = False
    if fields[1] == '&lt;third&gt;':
        data[2] = fields[2]
        printed = False
if not printed:
    print prevtag, ' '.join(data)
</snippet></ROW><ROW><id>19308555</id><snippet>sort</snippet></ROW><ROW><id>19308555</id><snippet>sort &lt;inputfile&gt; | python merger.py
</snippet></ROW><ROW><id>19308555</id><snippet>&lt;abc&gt;  &lt;anything2&gt; &lt;anything3&gt;
&lt;_901&gt;  &lt;first&gt; &lt;something1&gt;
&lt;_905&gt;  &lt;second&gt; &lt;something2&gt;
&lt;_910&gt;  &lt;anything&gt; &lt;something3&gt;
&lt;_901&gt;  &lt;second&gt; &lt;something4&gt;
&lt;_905&gt;  &lt;first&gt; &lt;something6&gt;
&lt;_901&gt;  &lt;third&gt; &lt;something5&gt;
&lt;_905&gt;  &lt;third&gt; &lt;something7&gt;
</snippet></ROW><ROW><id>19308555</id><snippet>&lt;_901&gt; &lt;something1&gt; &lt;something4&gt; &lt;something5&gt;
&lt;_905&gt; &lt;something6&gt; &lt;something2&gt; &lt;something7&gt;
</snippet></ROW><ROW><id>19308720</id><snippet>Stream stdout = Console.OpenStandardOutput();
stdout.WriteByte((byte)message.Length);
stdout.WriteByte((byte)'\0');
stdout.WriteByte((byte)'\0');
stdout.WriteByte((byte)'\0');
Console.Write(message);
</snippet></ROW><ROW><id>19308727</id><snippet>fcntl</snippet></ROW><ROW><id>19308727</id><snippet>struct flock</snippet></ROW><ROW><id>19308858</id><snippet>self</snippet></ROW><ROW><id>19308858</id><snippet>#!/usr/bin/python   

class example(): 
    def doMath(self, x, y):
        z = x + y
        z = self.square(z)
        return z

    def square(self, z):
        z = z * z
        return z

p = example()
print p.doMath(5,4)
</snippet></ROW><ROW><id>19308858</id><snippet>paul@local:~/src/python$ ./square.py
81
paul@local:~/src/python$
</snippet></ROW><ROW><id>19308858</id><snippet>#!/usr/bin/python

def square(z):
    return z * z

def doMath(x, y):
    return square(x + y)

print doMath(5,4)
</snippet></ROW><ROW><id>19309047</id><snippet>+</snippet></ROW><ROW><id>19309047</id><snippet>%</snippet></ROW><ROW><id>19309047</id><snippet>%</snippet></ROW><ROW><id>19309047</id><snippet>+</snippet></ROW><ROW><id>19309047</id><snippet>+</snippet></ROW><ROW><id>19309047</id><snippet>print ('%0.2f' % userUSD + '= %0.2f' % Euro + 'Euro')
</snippet></ROW><ROW><id>19309047</id><snippet>print('%0.2f = %0.2f Euro' % (userUSD, Euro))
</snippet></ROW><ROW><id>19309047</id><snippet>str.format</snippet></ROW><ROW><id>19309047</id><snippet>%</snippet></ROW><ROW><id>19309047</id><snippet>print('{:.2f} = {:.2f} Euro'.format(userUSD, Euro))
</snippet></ROW><ROW><id>19309141</id><snippet>data = {'hash': hash, 'confirm': 'Continue as Free User'}
r = requests.post(url, data)
html = r.text
</snippet></ROW><ROW><id>19309143</id><snippet>from StringIO import StringIO    
import re

reader = StringIO("""{
    "title": "Pilot",
    "image": [
        {
            "resource": "http://images2.nokk.nocookie.net/__cb20110227141960/notr/images/8/8b/pilot.jpg",
            "description": "not yet implemented"
        }
    ],
    "content": "&lt;p&gt;The pilot ...&lt;/p&gt;"
},
{
    "title": "Special Christmas (Part 1)",
    "image": [
        {
            "resource": "http://images1.nat.nocookie.net/__cb20090519172121/obli/images/e/ed/SpecialChristmas.jpg",
            "description": "not yet implemented"
        }
    ],
    "content": "&lt;p&gt;Last comment...&lt;/p&gt;"
}""")

# to open a file just use reader = open(filename)

text = reader.read()
pattern = r'"resource": ".+/(.+).jpg"'
replacement = '"resource": "../img/\g&lt;1&gt;.jpg"'
text = re.sub(pattern, replacement, text)

print(text)
</snippet></ROW><ROW><id>19309143</id><snippet>"resource": ".+/(.+)?.jpg"</snippet></ROW><ROW><id>19309143</id><snippet>"resource": "</snippet></ROW><ROW><id>19309143</id><snippet>.jpg"</snippet></ROW><ROW><id>19309143</id><snippet>()</snippet></ROW><ROW><id>19309143</id><snippet>'\g&lt;1&gt;'</snippet></ROW><ROW><id>19309143</id><snippet>'\g&lt;0&gt;'</snippet></ROW><ROW><id>19309143</id><snippet>'</snippet></ROW><ROW><id>19309194</id><snippet>import os
import subprocess

cmd = 'ls'

if os.fork() == 0:
        process = subprocess.Popen(cmd, shell=True, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
        print "subprocess pid: %d" % process.pid
        stdout = process.communicate()
        print stdout
else:
        print 'parent...'
</snippet></ROW><ROW><id>19309200</id><snippet>code.InteractiveConsole</snippet></ROW><ROW><id>19309200</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; console = code.InteractiveConsole()
&gt;&gt;&gt; r = console.push('1+1')
2
&gt;&gt;&gt; r = console.push('x = 4 + 1')
&gt;&gt;&gt; r = console.push('x + 10')
15

&gt;&gt;&gt; r = console.push('def test(n):')
&gt;&gt;&gt; r = console.push('  return n + 5')
&gt;&gt;&gt; r = console.push('')
&gt;&gt;&gt; r = console.push('test(10)')
15
</snippet></ROW><ROW><id>19309200</id><snippet>&gt;&gt;&gt; r = console.push('def test2(n):\n  return n+10\n')
&gt;&gt;&gt; r = console.push('test2(10)')
20
&gt;&gt;&gt;

# the following, however, fails...
&gt;&gt;&gt; r = console.push('test(10)\ntest(15)')
  File "&lt;console&gt;", line 1
    test(10)
           ^
SyntaxError: multiple statements found while compiling a single statement
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19309272</id><snippet>sort()</snippet></ROW><ROW><id>19309272</id><snippet>sort()</snippet></ROW><ROW><id>19309272</id><snippet>key</snippet></ROW><ROW><id>19309272</id><snippet>key</snippet></ROW><ROW><id>19309272</id><snippet>&gt;&gt;&gt; a = [-5, 4, 6, -2, 3, 1]
&gt;&gt;&gt; a.sort(key=abs)
&gt;&gt;&gt; a
[1, -2, 3, 4, -5, 6]
</snippet></ROW><ROW><id>19309272</id><snippet>key</snippet></ROW><ROW><id>19309272</id><snippet>def get_occ(d): return d.occ
fullset.sort(key=get_occ)
</snippet></ROW><ROW><id>19309272</id><snippet>fullset.sort(key=lambda d: d.occ)</snippet></ROW><ROW><id>19309272</id><snippet>sort</snippet></ROW><ROW><id>19309272</id><snippet>fullset.sort(key=get_occ, reverse=True)</snippet></ROW><ROW><id>19309298</id><snippet>urls=[]
for x in soup.find_all('a', href=True):
    urls.append(x['href'])
print urls
</snippet></ROW><ROW><id>19309298</id><snippet>urls={}
search = soup.find_all('a', href=True)
for x in range(len(search)):
    urls[x] = search[x]['href'] ##Result is: {0:firsturl, 1:secondurl, 2:thirdurl}
    ##and so on
</snippet></ROW><ROW><id>19309335</id><snippet>%.nf</snippet></ROW><ROW><id>19309335</id><snippet>print 'var: %.10f' % 3.12345678
# outputs: "var: 3.1234567800"

print 'var: %.10E' % 3.12345678
# outputs: "var: 3.1234567800E+00"

print 'var:', 3.12345678
# outputs: "var: 3.12345678"
</snippet></ROW><ROW><id>19309344</id><snippet>count(n)</snippet></ROW><ROW><id>19309344</id><snippet>O(log n)</snippet></ROW><ROW><id>19309344</id><snippet>O(1)</snippet></ROW><ROW><id>19309344</id><snippet>O(1)</snippet></ROW><ROW><id>19309344</id><snippet>from math import log

def count(n): # The count, using position k conjectured by templatetypedef
    k = p(n-1)+1
    count_left = k/2
    count_right = f(n-k+1)
    return count_left + count_right

def f(n): # The f function calculated using Aleksi Torhamo conjecture
    return max(p(n-2)/2 + 1, n-p(n-2))

def p(n): # The largest power of 2 not exceeding n
    return 1 &lt;&lt; int(log(n,2))
</snippet></ROW><ROW><id>19309344</id><snippet>int log(int n){ // Integer logarithm, by counting the number of leading 0
    return 31-__builtin_clz(n);
}

int p(int n){ // The largest power of 2 not exceeding n
    return 1&lt;&lt;log(n);
}

int f(int n){ // The f function calculated using Aleksi Torhamo conjecture
    if(n==0) return 0;
    if(n&lt;=2) return 1;
    if(n&lt;=4) return 2;
    int val0 = p(n-2);
    int val1 = val0/2+1;
    int val2 = n-val0;
    return val1&gt;val2 ? val1 : val2;
}

int count(int n){ // The count, using position k conjectured by templatetypedef
    int k = p(n-1)+1;
    int count_left = k/2;
    int count_right = f(n-k+1);
    return count_left + count_right;
}
</snippet></ROW><ROW><id>19309344</id><snippet>n=100,000,000</snippet></ROW><ROW><id>19309344</id><snippet>n=1e24</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f</snippet></ROW><ROW><id>19309344</id><snippet>n&lt;=100,000,000</snippet></ROW><ROW><id>19309344</id><snippet>n=1,000,000</snippet></ROW><ROW><id>19309344</id><snippet>475712</snippet></ROW><ROW><id>19309344</id><snippet>n=10,000,000</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>n=2</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(1) = 1
f(2) = 1
f(3) = 2
f(4) = 2
f(5) = 3
</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(7)=3</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>f(2n) = f(n)+f(n+1)-1
f(2n+1) = 2*f(n+1)-1
</snippet></ROW><ROW><id>19309344</id><snippet>n&gt;=5</snippet></ROW><ROW><id>19309344</id><snippet>n=1,2,3,4</snippet></ROW><ROW><id>19309344</id><snippet>f( floor(n/2) ) + f( ceil(n/2) ) - 1</snippet></ROW><ROW><id>19309344</id><snippet>-1</snippet></ROW><ROW><id>19309344</id><snippet>g(n,i)</snippet></ROW><ROW><id>19309344</id><snippet>g(n,i)</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>i</snippet></ROW><ROW><id>19309344</id><snippet>ceil(n/2)</snippet></ROW><ROW><id>19309344</id><snippet>f(i)</snippet></ROW><ROW><id>19309344</id><snippet>f(n+1-i)</snippet></ROW><ROW><id>19309344</id><snippet>g(n,i)</snippet></ROW><ROW><id>19309344</id><snippet>g(n,i) = f(i) + f(n+1-i) - 1
</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>g(n)</snippet></ROW><ROW><id>19309344</id><snippet>g(n)</snippet></ROW><ROW><id>19309344</id><snippet>i</snippet></ROW><ROW><id>19309344</id><snippet>import time
mem_f = [0,1,1,2,2]
mem_f.extend([-1]*(10**7)) # This will take around 40MB of memory
def f(n):
    global mem_f
    if mem_f[n]&gt;-1:
        return mem_f[n]
    if n%2==1:
        mem_f[n] = 2*f((n+1)/2)-1
        return mem_f[n]
    else:
        half = n/2
        mem_f[n] = f(half)+f(half+1)-1
        return mem_f[n]

def g(n):
    return max(f(i)+f(n+1-i)-1 for i in range(1,(n+1)/2 + 1))

def main():
    while True:
        n = input('Enter n (1 &lt;= n &lt;= 10,000,000; 0 to stop): ')
        if n==0: break
        start_time = time.time()
        print 'g(%d) = %d, in %.3fs' % (n, g(n), time.time()-start_time)

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>19309344</id><snippet>g(n)</snippet></ROW><ROW><id>19309344</id><snippet>n/2</snippet></ROW><ROW><id>19309344</id><snippet>i</snippet></ROW><ROW><id>19309344</id><snippet>f(i)</snippet></ROW><ROW><id>19309344</id><snippet>f(n+1-i)</snippet></ROW><ROW><id>19309344</id><snippet>O(n * O(f(n)))</snippet></ROW><ROW><id>19309344</id><snippet>f</snippet></ROW><ROW><id>19309344</id><snippet>f(i)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>O(log n)</snippet></ROW><ROW><id>19309344</id><snippet>f(2n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n+1)</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(2n+1)</snippet></ROW><ROW><id>19309344</id><snippet>f((n+1)/2)</snippet></ROW><ROW><id>19309344</id><snippet>O(log n)</snippet></ROW><ROW><id>19309344</id><snippet>O(n^2)</snippet></ROW><ROW><id>19309344</id><snippet>O(n log n)</snippet></ROW><ROW><id>19309344</id><snippet>O(n^2)</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>g(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>O(n)</snippet></ROW><ROW><id>19309344</id><snippet>f(n)</snippet></ROW><ROW><id>19309344</id><snippet>O(1)</snippet></ROW><ROW><id>19309344</id><snippet>O(n+n) = O(n)</snippet></ROW><ROW><id>19309344</id><snippet>n=1,000,000</snippet></ROW><ROW><id>19309344</id><snippet>n=10,000,000</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>n</snippet></ROW><ROW><id>19309344</id><snippet>clock()</snippet></ROW><ROW><id>19309344</id><snippet>#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;

int mem_f[10000001];
int f(int n){
    if(mem_f[n]&gt;-1)
        return mem_f[n];
    if(n%2==1){
        mem_f[n] = 2*f((n+1)/2)-1;
        return mem_f[n];
    } else {
        int half = n/2;
        mem_f[n] = f(half)+f(half+1)-1;
        return mem_f[n];
    }
}

int g(int n){
    int result = 0;
    for(int i=1; i&lt;=(n+1)/2; i++){
        int cnt = f(i)+f(n+1-i)-1;
        result = (cnt &gt; result ? cnt : result);
    }
    return result;
}

int main(){
    memset(mem_f,-1,sizeof(mem_f));
    mem_f[0] = 0;
    mem_f[1] = mem_f[2] = 1;
    mem_f[3] = mem_f[4] = 2;
    clock_t start, end;
    while(true){
        int n;
        printf("Enter n (1 &lt;= n &lt;= 10,000,000; 0 to stop): ");
        scanf("%d",&amp;n);
        if(n==0) break;
        start = clock();
        int result = g(n);
        end = clock();
        printf("g(%d) = %d, in %.3fs\n",n,result,((double)(end-start))/CLOCKS_PER_SEC);
    }
}
</snippet></ROW><ROW><id>19309344</id><snippet>f</snippet></ROW><ROW><id>19309344</id><snippet>k</snippet></ROW><ROW><id>19309344</id><snippet>k</snippet></ROW><ROW><id>19309344</id><snippet>k</snippet></ROW><ROW><id>19309344</id><snippet>k</snippet></ROW><ROW><id>19309431</id><snippet>B=[(A[2*i],A[2*i+1]) for i in range(len(A)/2)]
</snippet></ROW><ROW><id>19309431</id><snippet>B=[(A[i],A[i+1]) for i in range(0,len(A),2)]
</snippet></ROW><ROW><id>19309445</id><snippet>td[1]</snippet></ROW><ROW><id>19309445</id><snippet>/td[1]</snippet></ROW><ROW><id>19309445</id><snippet>for row in p.xpath('.//div/div/table//tr[@class="tt"]'):
    proxy.ip =  row.xpath('td[1]')[0].text_content()
    proxy.port = row.xpath('td[2]')[0].text_content()
</snippet></ROW><ROW><id>19309445</id><snippet>for row in p.xpath('.//div/div/table//tr[@class="tt"]'):
    proxy.ip =  row.find('td[1]').text_content()
    proxy.port = row.find('td[2]').text_content()
</snippet></ROW><ROW><id>19309445</id><snippet>.//</snippet></ROW><ROW><id>19309445</id><snippet>div</snippet></ROW><ROW><id>19309445</id><snippet>table/tr</snippet></ROW><ROW><id>19309445</id><snippet>table//tr</snippet></ROW><ROW><id>19309445</id><snippet>tr</snippet></ROW><ROW><id>19309445</id><snippet>tbody</snippet></ROW><ROW><id>19309445</id><snippet>cssselect</snippet></ROW><ROW><id>19309445</id><snippet>for row in p.cssselect('div&gt;div&gt;table tr.tt'):
    proxy.ip =  row.cssselect('td:nth-child(1)')[0].text_content() 
    proxy.port = row.cssselect('td:nth-child(2)')[0].text_content() 
</snippet></ROW><ROW><id>19309559</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; 
&gt;&gt;&gt; interpreter = code.InteractiveInterpreter()
&gt;&gt;&gt; myCode = code.compile_command('if True: print("IT\'S ONE!!")')
&gt;&gt;&gt; interpreter.runcode(myCode)
TypeError: exec: arg 1 must be a string, file, or code object
</snippet></ROW><ROW><id>19309559</id><snippet>interpreter.runcode</snippet></ROW><ROW><id>19309559</id><snippet>myCode</snippet></ROW><ROW><id>19309559</id><snippet>&gt;&gt;&gt; myCode
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19309559</id><snippet>code.compile_command</snippet></ROW><ROW><id>19309559</id><snippet>interpreter.runcode</snippet></ROW><ROW><id>19309559</id><snippet>&gt;&gt;&gt; interpreter.runcode('if True: print("IT\'S ONE!!")')
IT'S ONE!!
</snippet></ROW><ROW><id>19309564</id><snippet>str.lstrip()</snippet></ROW><ROW><id>19309564</id><snippet>rstrip()</snippet></ROW><ROW><id>19309564</id><snippet>urls.append(x['href'].lstrip("'3D\"").rstrip("\"=\'"))
</snippet></ROW><ROW><id>19309727</id><snippet>from random import randint
import numpy
ip = numpy.array(['1{0:014d}'.format(randint(0, 10000000)) for x in xrange(10000000)], dtype=numpy.int64)

numpy.sum(ip &lt;= 100000000010000)
# 9960
%timeit numpy.sum(ip &lt;= 100000000010000)
# 10 loops, best of 3: 35 ms per loop
</snippet></ROW><ROW><id>19309727</id><snippet>import numpy

def find_numpy(look_for, ourset):
    search_min = int('{0:0&lt;15s}'.format(str(look_for)))
    search_max = int('{0:0&lt;15s}'.format(str(look_for+1)))
    return numpy.sum((ourset &gt;= search_min) &amp; (ourset &lt; search_max))

with open('path/to/your/file.txt', 'r') as f:
    ip = numpy.array([line.strip() for line in f], dtype=numpy.int64)

find_numpy(1000000001, ip)
# 99686
%timeit find_numpy(1000000001, ip)
# 10 loops, best of 3: 86.6 ms per loop
</snippet></ROW><ROW><id>19309735</id><snippet>B = [element for sublist in A for element in sublist]
</snippet></ROW><ROW><id>19309815</id><snippet>get_changelist_form</snippet></ROW><ROW><id>19309815</id><snippet>ModelForm</snippet></ROW><ROW><id>19309815</id><snippet>__init__</snippet></ROW><ROW><id>19309815</id><snippet>save</snippet></ROW><ROW><id>19309815</id><snippet>first_name</snippet></ROW><ROW><id>19309815</id><snippet>last_name</snippet></ROW><ROW><id>19309815</id><snippet>class PersonChangeListForm(forms.ModelForm):
    class Meta:
        model = Person
    name = forms.CharField()

    def __init__(self, *args, **kwargs):
        instance = kwargs.get('instance')
        if instance:
            initial = kwargs.get('initial', {})
            initial['name'] = '%s %s' % (instance.first_name, instance.last_name)
            kwargs['initial'] = initial
        super(PersonChangeListForm, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        # use whatever parsing you like here
        first_name, last_name = self.cleaned_data['name'].split(None, 1)
        self.cleaned_data['first_name'] = first_name
        self.cleaned_data['last_name'] = last_name
        super(PersonChangeListForm, self).save(*args, **kwargs)

class PersonAdmin(admin.ModelAdmin):
    def get_changelist_form(self, request, **kwargs):
        return PersonChangeListForm
</snippet></ROW><ROW><id>19309815</id><snippet>list_editable</snippet></ROW><ROW><id>19309815</id><snippet>True</snippet></ROW><ROW><id>19309815</id><snippet>list_editable</snippet></ROW><ROW><id>19309815</id><snippet>True</snippet></ROW><ROW><id>19309815</id><snippet>list_editable</snippet></ROW><ROW><id>19309815</id><snippet>list_display</snippet></ROW><ROW><id>19309815</id><snippet>changelist_view</snippet></ROW><ROW><id>19309815</id><snippet>list_editable</snippet></ROW><ROW><id>19309815</id><snippet>list</snippet></ROW><ROW><id>19309815</id><snippet>tuple</snippet></ROW><ROW><id>19309815</id><snippet>True</snippet></ROW><ROW><id>19309815</id><snippet>list_editable</snippet></ROW><ROW><id>19309946</id><snippet>def calculateGallonsNeeded(fltWallArea,AREA_UNIT):
    fltGallonsNeeded = math.ceil(fltWallArea / AREA_UNIT)
    return fltGallonsNeeded
</snippet></ROW><ROW><id>19309965</id><snippet>&lt;div&gt;
    &lt;ul class="list-group"&gt;
        {% for item in list %}
            {{ item.1 }},
        {% endfor %}
    &lt;/ul&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>19309984</id><snippet>def complete_subset(real_list, expected_list):
    real_set_list = [set(d.items()) for d in real_list]
    expected_set_list = [set(d.items()) for d in expected_list]

    while len(real_set_list):
        real_len = len(real_set_list)
        i = 0
        for real_set in real_set_list:
            for expected_set in expected_set_list:
                if not len(expected_set - real_set):
                    real_set_list.remove(real_set)
                    expected_set_list.remove(expected_set)
            i = i + 1
        if i == real_len:
            break

    return (not len(real_set_list)) and (not len(expected_set_list))
</snippet></ROW><ROW><id>19309984</id><snippet>print complete_subset([{'a': 1, 'b': 2}, {'a': 2, 'b': 3}], [{'a': 1}, {'a': 2, 'b': 3}]) == True
print complete_subset([{'a': 1, 'b': 2}, {'a': 2, 'b': 3}], [{'a': 2}, {'a': 2, 'b': 3}]) == False
print complete_subset([{'a': 1, 'b': 2}, {'a': 2, 'b': 3}], [{'a': 1}]) == False
print complete_subset([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}], [{'a': 1}, {'b': 2}]) == True
print complete_subset([
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
], [
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5},
    {'a': 1, 'b': 2, 'c': 3, 'd': 4},
    {'a': 1, 'b': 2, 'c': 3},
    {'a': 1, 'b': 2},
    {'a': 1},
    {'a': 1, 'c': 3, 'd': 4, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'c': 3, 'e': 5, 'f': 6, 'h': 8, 'i': 9, 'j': 10},
    {'a': 1, 'b': 2, 'd': 4, 'e': 5, 'g': 7, 'h': 8, 'j': 10},
]) == True
</snippet></ROW><ROW><id>19310067</id><snippet>"SELECT OUTPUT FROM IMAGES WHERE (X=? OR ?='') AND (Y=? OR ?='') AND (Z=? OR ?='')",[X,Y,Z]
</snippet></ROW><ROW><id>19310067</id><snippet>def Query(X, Y, Z):
    import sqlite3
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    c.execute("SELECT OUTPUT FROM IMAGES WHERE (X=:px OR :px='') AND (Y=:py OR :py='') AND (Z=:pz OR :pz='')", {"px": X, "py": Y, "pz": Z})
</snippet></ROW><ROW><id>19310067</id><snippet>(Y=? OR Y)
</snippet></ROW><ROW><id>19310067</id><snippet>('foo'=? OR 'foo')
</snippet></ROW><ROW><id>19310067</id><snippet>('foo'=? OR false)
</snippet></ROW><ROW><id>19310067</id><snippet>('foo'=?)
</snippet></ROW><ROW><id>19310067</id><snippet>('foo'='')
</snippet></ROW><ROW><id>19310159</id><snippet>input()</snippet></ROW><ROW><id>19310159</id><snippet>int()</snippet></ROW><ROW><id>19310159</id><snippet>int()</snippet></ROW><ROW><id>19310307</id><snippet>cached_records = Record.objects.all()
list(cached_records) # by using list() we force Django load all data into memory
</snippet></ROW><ROW><id>19310307</id><snippet>cached_records</snippet></ROW><ROW><id>19310307</id><snippet>filter</snippet></ROW><ROW><id>19310307</id><snippet>filter</snippet></ROW><ROW><id>19310394</id><snippet>primes</snippet></ROW><ROW><id>19310394</id><snippet>n/log(n)</snippet></ROW><ROW><id>19310394</id><snippet>n</snippet></ROW><ROW><id>19310394</id><snippet>sqrt(n)</snippet></ROW><ROW><id>19310394</id><snippet>prime_factor(n)</snippet></ROW><ROW><id>19310394</id><snippet>O(n/log(n))</snippet></ROW><ROW><id>19310394</id><snippet>n</snippet></ROW><ROW><id>19310394</id><snippet>factors(n)</snippet></ROW><ROW><id>19310394</id><snippet>O(sqrt(n))</snippet></ROW><ROW><id>19310394</id><snippet>sqrt(10000)</snippet></ROW><ROW><id>19310394</id><snippet>prime_factor(n)</snippet></ROW><ROW><id>19310429</id><snippet>#!/bin/bash
while true
do
    begin_time=$(date +%s)
    end_time=$((begin_time + 30*60))
    while [ $(date +%s) -lt $end_time ]
    do
        python script1.py
        sleep 5
        python script2.py
        sleep 5
    done
    python script3.py
 done
</snippet></ROW><ROW><id>19310596</id><snippet>if head.value is None:
</snippet></ROW><ROW><id>19310596</id><snippet>if head.next is None:
</snippet></ROW><ROW><id>19310596</id><snippet>None</snippet></ROW><ROW><id>19310596</id><snippet>None</snippet></ROW><ROW><id>19310596</id><snippet>countInt(head.next, n, count)</snippet></ROW><ROW><id>19310596</id><snippet>count</snippet></ROW><ROW><id>19310596</id><snippet>head.next</snippet></ROW><ROW><id>19310596</id><snippet>def countInt(head, n):
    count = 0
    if head.value == n:
        count = 1
    if head.next is None:
        return count
    return count + countInt(head.next, n)
</snippet></ROW><ROW><id>19310596</id><snippet>count</snippet></ROW><ROW><id>19310912</id><snippet>import android

droid = android.Android()

title=("Your Tittle")
content=("Your content")

droid.dialogCreateAlert(title, content)
droid.dialogShow()
</snippet></ROW><ROW><id>19310912</id><snippet>import android, time

droid = android.Android()
class Task():
    SET_VARIABLE = 547
    def new_task(self):
        self.action_cnt = 0
        self.extras = {'version_number': '1.0', 'task_name': 'task' + str(time.time()), 'task_priority': 9 }
    def set_var(self, varname, value):
        self.action_cnt += 1
        self.extras['action' + str(self.action_cnt)] = {'action': self.SET_VARIABLE, 'arg:1': varname, 'arg:2': value, 'arg:3': False, 'arg:4': False, 'arg:5': False}
    def run_task(self):
        taskIntent = droid.makeIntent('net.dinglisch.android.tasker.ACTION_TASK', None, None, self.extras).result
        droid.sendBroadcastIntent(taskIntent)
    def set_var_now(self, varname, value):
        self.new_task()
        self.set_var(varname, value)
        self.run_task()

t = Task()
t.set_var_now("%Var", "Your variable value")
</snippet></ROW><ROW><id>19310912</id><snippet>import android

droid = android.Android()

activity = 'com.twofortyfouram.locale.intent.action.FIRE_SETTING'
extras = {}
extras['de.devmil.minimaltext.locale.extras.VAR_NAME'] = 'Your Variable name'
extras['de.devmil.minimaltext.locale.extras.VAR_TEXT'] = 'Your Variable content'

packagename =  'de.devmil.minimaltext'
classname = 'de.devmil.minimaltext.locale.LocaleFireReceiver'

intent = droid.makeIntent(activity, None, None, extras, None, packagename, classname).result

droid.sendBroadcastIntent(intent)
</snippet></ROW><ROW><id>19310952</id><snippet>dir(obj)</snippet></ROW><ROW><id>19310952</id><snippet>In [3]: filter(lambda a: 'find' in a, dir(re))
Out[3]: ['findall', 'finditer']

In [4]: [a for a in dir(re) if 'find' in a]
Out[4]: ['findall', 'finditer']
</snippet></ROW><ROW><id>19311203</id><snippet>for (a, b), (c, d) in izip(iter1, iter2)
</snippet></ROW><ROW><id>19311238</id><snippet>Or(expr, empty)</snippet></ROW><ROW><id>19311238</id><snippet>Optional(expr)</snippet></ROW><ROW><id>19311238</id><snippet>Empty()</snippet></ROW><ROW><id>19311238</id><snippet>empty</snippet></ROW><ROW><id>19311238</id><snippet>expr.setResultsName("name")</snippet></ROW><ROW><id>19311238</id><snippet>expr("name")</snippet></ROW><ROW><id>19311238</id><snippet>Group</snippet></ROW><ROW><id>19311238</id><snippet>dump()</snippet></ROW><ROW><id>19311238</id><snippet>asDict()</snippet></ROW><ROW><id>19311238</id><snippet>from pyparsing import Word, nums, oneOf, Combine, Group, Optional

integer = Word(nums)

sign = oneOf("+ -")
signedInteger = Combine(sign + integer)

integerExpr = Group(integer("base") + Optional(signedInteger, default="0")("offset"))

integerRange = integerExpr("start") + Optional('_' + integerExpr("end"))


tests = """\
12
12+34
12_56
12+34_56-78""".splitlines()

for t in tests:
    result = integerRange.parseString(t)
    print t
    print result.dump()
    print result.asDict()
    print result.start.base, result.start.offset
    if result.end:
        print result.end.base, result.end.offset
    print
</snippet></ROW><ROW><id>19311238</id><snippet>12
[['12', '0']]
- start: ['12', '0']
  - base: 12
  - offset: 0
{'start': (['12', '0'], {'base': [('12', 0)], 'offset': [('0', 1)]})}
12 0

12+34
[['12', '+34']]
- start: ['12', '+34']
  - base: 12
  - offset: +34
{'start': (['12', '+34'], {'base': [('12', 0)], 'offset': [('+34', 1)]})}
12 +34

12_56
[['12', '0'], '_', ['56', '0']]
- end: ['56', '0']
  - base: 56
  - offset: 0
- start: ['12', '0']
  - base: 12
  - offset: 0
{'start': (['12', '0'], {'base': [('12', 0)], 'offset': [('0', 1)]}), 'end': (['56', '0'], {'base': [('56', 0)], 'offset': [('0', 1)]})}
12 0
56 0

12+34_56-78
[['12', '+34'], '_', ['56', '-78']]
- end: ['56', '-78']
  - base: 56
  - offset: -78
- start: ['12', '+34']
  - base: 12
  - offset: +34
{'start': (['12', '+34'], {'base': [('12', 0)], 'offset': [('+34', 1)]}), 'end': (['56', '-78'], {'base': [('56', 0)], 'offset': [('-78', 1)]})}
12 +34
56 -78
</snippet></ROW><ROW><id>19311348</id><snippet>while</snippet></ROW><ROW><id>19311348</id><snippet>action</snippet></ROW><ROW><id>19311348</id><snippet>if action[0]=='look'</snippet></ROW><ROW><id>19311496</id><snippet>zip</snippet></ROW><ROW><id>19311496</id><snippet>&gt;&gt;&gt; Field = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; Court = [5,4,1,2,3,4,5,1,2,3]
&gt;&gt;&gt; zip(Field, Court)
[(1, 5), (2, 4), (3, 1), (4, 2), (5, 3), (6, 4), (7, 5), (8, 1), (9, 2), (10, 3)]
</snippet></ROW><ROW><id>19311496</id><snippet>for field, court in zip(Field, Court):
    stringText = ','.join((FileName, TypeName, field, court))
</snippet></ROW><ROW><id>19311505</id><snippet>lxml</snippet></ROW><ROW><id>19311505</id><snippet>strip()</snippet></ROW><ROW><id>19311505</id><snippet>from lxml import etree

tree = etree.parse('xmlfile')
root = tree.getroot()

for elem in root.iter('*'):
    if elem.text is not None:
        elem.text = elem.text.strip()

print(etree.tostring(root))
</snippet></ROW><ROW><id>19311505</id><snippet>&lt;Person&gt;&lt;name&gt;My Name&lt;/name&gt;
&lt;Address&gt;My Address&lt;/Address&gt;
&lt;/Person&gt;
</snippet></ROW><ROW><id>19311505</id><snippet>tail</snippet></ROW><ROW><id>19311505</id><snippet>from lxml import etree

tree = etree.parse('xmlfile')
root = tree.getroot()

for elem in root.iter('*'):
    if elem.text is not None:
        elem.text = elem.text.strip()
    if elem.tail is not None:
        elem.tail = elem.tail.strip()

print(etree.tostring(root, encoding="utf-8", xml_declaration=True))
</snippet></ROW><ROW><id>19311536</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>19311536</id><snippet>&gt;&gt;&gt; ast.literal_eval('''[{u'body': u'this is the message body', u'user_id': u'8', u'name': u'Mark', u'time': u'2013-10-10-16:32'}]''')
[{u'body': u'this is the message body', u'user_id': u'8', u'name': u'Mark', u'time': u'2013-10-10-16:32'}]
</snippet></ROW><ROW><id>19311751</id><snippet>&lt;svg&gt;</snippet></ROW><ROW><id>19311751</id><snippet>xlink:</snippet></ROW><ROW><id>19311751</id><snippet>&lt;use&gt;</snippet></ROW><ROW><id>19311862</id><snippet>def getNth(head, n):
    if n == 0:
        return head.value
    return getNth(head.next, n - 1)
</snippet></ROW><ROW><id>19311862</id><snippet>def getNth(head, n):
   for _ in xrange(n):
       head = head.next
   return head.value
</snippet></ROW><ROW><id>19311870</id><snippet>timeDiffInt</snippet></ROW><ROW><id>19311870</id><snippet>timeDiffInt = np.where(np.array(timeDiffInt) == 0, 0, 1)
</snippet></ROW><ROW><id>19311870</id><snippet>fig, ax = plt.subplots(figsize=(5,5))

ax.scatter(x,y,c=z, s=150, marker='&lt;', edgecolor='none')
</snippet></ROW><ROW><id>19311870</id><snippet>fig, ax = plt.subplots(figsize=(5,5))

colors = ['red', 'blue']
levels = [0, 1]

cmap, norm = mpl.colors.from_levels_and_colors(levels=levels, colors=colors, extend='max')

ax.scatter(x,y,c=z, s=150, marker='&lt;', edgecolor='none', cmap=cmap, norm=norm)
</snippet></ROW><ROW><id>19311874</id><snippet>import os
import subprocess

os.environ['ORACLE_HOME'] = "/home/user1/oracle/client"
subprocess.call("printenv") #prints whole environment, see the ORACLE_HOME there
</snippet></ROW><ROW><id>19312186</id><snippet>DictReader</snippet></ROW><ROW><id>19312186</id><snippet>EXECUTION_STATUS</snippet></ROW><ROW><id>19312186</id><snippet>RELEASE</snippet></ROW><ROW><id>19312186</id><snippet>fieldnames</snippet></ROW><ROW><id>19312186</id><snippet>import csv
from collections import defaultdict

result = defaultdict(dict)
filenames = ("FR1.1.csv", "FR2.0.csv", "FR2.5.csv")
lengths = {}
fieldnames = ["TEST_ID"]

for csvfile in filenames:
    with open(csvfile, 'rb') as infile:
        reader = csv.reader(infile)
        headers = next(reader, [])  # read first line, headers
        fieldnames.extend(headers[1:])  # all but the first column name
        lengths[csvfile] = len(headers) - 1  # keep track of how many items to backfill
        for row in reader:
            result[row[0]][csvfile] = row[1:]  # all but the first column

with open("out.csv", "wb") as outfile:
    writer = csv.writer(outfile)
    writer.writerow(fieldnames)
    for id_ in sorted(result):
        row = [id_]
        data = result[id_]
        for filename in filenames:
            row.extend(data.get(filename) or [''] * lengths[filename])
        writer.writerow(row)
</snippet></ROW><ROW><id>19312186</id><snippet>DictReader</snippet></ROW><ROW><id>19312186</id><snippet>TEST_ID, RELEASE , COMPILE_STATUS , EXECUTION_STATUS, RELEASE , COMPILE_STATUS , EXECUTION_STATUS, RELEASE , COMPILE_STATUS , EXECUTION_STATUS
FC/B_019.config , FR1.1 , COMPILE_PASSED , EXECUTION_PASSED, FR2.0 , COMPILE_PASSED , EXECUTION_PASSED, FR2.5 , COMPILE_PASSED , EXECUTION_PASSED
FC/B_020.config , FR1.1 , COMPILE_PASSED , EXECUTION_PASSED, FR2.0 , COMPILE_PASSED , EXECUTION_PASSED, FR2.5 , COMPILE_PASSED , EXECUTION_PASSED
FC/B_021.config , FR1.1 , COMPILE_FAILED , EXECUTION_FAILED, FR2.0 , COMPILE_FAILED , EXECUTION_FAILED, FR2.5 , COMPILE_FAILED , EXECUTION_FAILED
</snippet></ROW><ROW><id>19312186</id><snippet>import csv
from collections import defaultdict

result = defaultdict(dict)
filenames = ("FR2.0.csv", "FR2.5.csv")
lengths = {}
fieldnames = []

for csvfile in filenames:
    with open(csvfile, 'rb') as infile:
        reader = csv.reader(infile)
        headers = next(reader, [])  # read first line, headers
        fieldnames.extend(headers[1:])  # all but the first column name
        lengths[csvfile] = len(headers) - 1  # keep track of how many items to backfill
        for row in reader:
            result[row[0]][csvfile] = row[1:]  # all but the first column

with open("FR1.1.csv", "rb") as infile, open("out.csv", "wb") as outfile:
    reader = csv.reader(infile)
    headers = next(reader, [])  # read first line, headers

    writer = csv.writer(outfile)
    writer.writerow(headers + fieldnames)

    for row in sorted(reader):
        data = result[row[0]]
        for filename in filenames:
            row.extend(data.get(filename) or [''] * lengths[filename])
        writer.writerow(row)
</snippet></ROW><ROW><id>19312186</id><snippet>TEST_ID</snippet></ROW><ROW><id>19312186</id><snippet>TEST_ID</snippet></ROW><ROW><id>19312186</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>19312186</id><snippet>TEST_ID</snippet></ROW><ROW><id>19312186</id><snippet>import csv
from collections import OrderedDict

result = OrderedDict(dict)
filenames = ("FR1.1.csv", "FR2.0.csv", "FR2.5.csv")
lengths = {}
fieldnames = ["TEST_ID"]

for csvfile in filenames:
    with open(csvfile, 'rb') as infile:
        reader = csv.reader(infile)
        headers = next(reader, [])  # read first line, headers
        fieldnames.extend(headers[1:])  # all but the first column name
        lengths[csvfile] = len(headers) - 1  # keep track of how many items to backfill
        for row in reader:
            if row[0] not in result:
                result[row[0]] = {}
            result[row[0]][csvfile] = row[1:]  # all but the first column

with open("out.csv", "wb") as outfile:
    writer = csv.writer(outfile)
    writer.writerow(fieldnames)
    for id_ in result:
        row = [id_]
        data = result[id_]
        for filename in filenames:
            row.extend(data.get(filename) or [''] * lengths[filename])
        writer.writerow(row)
</snippet></ROW><ROW><id>19312186</id><snippet>OrderedDict</snippet></ROW><ROW><id>19312186</id><snippet>FR1.1.csv</snippet></ROW><ROW><id>19312186</id><snippet>FR2.0.csv</snippet></ROW><ROW><id>19312186</id><snippet>import csv
from collections import defaultdict

result = defaultdict(dict)
filenames = ("FR1.1.csv", "FR2.0.csv", "FR2.5.csv")
lengths = {}
fieldnames = ["TEST_ID"]
ids, seen = [], set()

for csvfile in filenames:
    with open(csvfile, 'rb') as infile:
        reader = csv.reader(infile)
        headers = next(reader, [])  # read first line, headers
        fieldnames.extend(headers[1:])  # all but the first column name
        lengths[csvfile] = len(headers) - 1  # keep track of how many items to backfill
        for row in reader:
            id_ = row[0]
            # track ordering
            if id_ not in seen:
                seen.add(id_)
                ids.append(id_)
            result[id_][csvfile] = row[1:]  # all but the first column

with open("out.csv", "wb") as outfile:
    writer = csv.writer(outfile)
    writer.writerow(fieldnames)
    for id_ in ids:
        row = [id_]
        data = result[id_]
        for filename in filenames:
            row.extend(data.get(filename) or [''] * lengths[filename])
        writer.writerow(row)
</snippet></ROW><ROW><id>19312299</id><snippet>i + 1</snippet></ROW><ROW><id>19312299</id><snippet>i</snippet></ROW><ROW><id>19312299</id><snippet>test</snippet></ROW><ROW><id>19312299</id><snippet>test[i + 1]</snippet></ROW><ROW><id>19312299</id><snippet>while</snippet></ROW><ROW><id>19312299</id><snippet>test = ['aac', 'aad', 'aac', 'asd', 'msc']
i = 0
while i &lt; len(test) - 1:
    if test[i][:2] == test[i+1][:2]:
        del test[i]
        continue
    i += 1
</snippet></ROW><ROW><id>19312299</id><snippet>i</snippet></ROW><ROW><id>19312299</id><snippet>i</snippet></ROW><ROW><id>19312299</id><snippet>test[i + 1]</snippet></ROW><ROW><id>19312299</id><snippet>del test[i]</snippet></ROW><ROW><id>19312299</id><snippet>['aac', 'foo', 'aac', 'aad']</snippet></ROW><ROW><id>19312299</id><snippet>['aac', 'foo', 'aad']</snippet></ROW><ROW><id>19312299</id><snippet>['foo', 'aac', 'aad']</snippet></ROW><ROW><id>19312299</id><snippet>test.remove(test[i])</snippet></ROW><ROW><id>19312299</id><snippet>&gt;&gt;&gt; test = ['aac', 'aad', 'aac', 'asd', 'msc']
&gt;&gt;&gt; i = 0
&gt;&gt;&gt; while i &lt; len(test) - 1:
...     if test[i][:2] == test[i+1][:2]:
...         del test[i]
...         continue
...     i += 1
... 
&gt;&gt;&gt; test
['aac', 'asd', 'msc']
</snippet></ROW><ROW><id>19312299</id><snippet>&gt;&gt;&gt; [t for i, t in enumerate(test) if i == len(test) - 1 or t[:2] != test[i + 1][:2]]
['aac', 'asd', 'msc']
</snippet></ROW><ROW><id>19312585</id><snippet>Field</snippet></ROW><ROW><id>19312585</id><snippet>Court</snippet></ROW><ROW><id>19312585</id><snippet>field</snippet></ROW><ROW><id>19312585</id><snippet>court</snippet></ROW><ROW><id>19312585</id><snippet>J123,1234,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5, 4, 1, 2, 3, 4, 5, 1, 2, 3]
J123,1234,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5, 4, 1, 2, 3, 4, 5, 1, 2, 3]
etc.
</snippet></ROW><ROW><id>19312585</id><snippet>J123,1234,1,5
J123,1234,2,4
etc.
</snippet></ROW><ROW><id>19312585</id><snippet>csv</snippet></ROW><ROW><id>19312585</id><snippet>import csv

with open(newfile, "wb") as csvfile:
    writer = csv.writer(csvfile)
    for field, court in zip(Field, Court):
        writer.writerow([FileName, TypeName, field, court])
</snippet></ROW><ROW><id>19312585</id><snippet>with</snippet></ROW><ROW><id>19312585</id><snippet>csv</snippet></ROW><ROW><id>19312585</id><snippet>enumerate()</snippet></ROW><ROW><id>19312585</id><snippet>with open(newfile, "wb") as csvfile:
    writer = csv.writer(csvfile)
    # row of headers
    writer.writerow(['FileName', 'TypeName', 'field', 'court'])

    for i, (field, court) in enumerate(zip(Field, Court)):
        row = [[FileName, TypeName] if i == 0 else ['', '']
        writer.writerow(row + [field, court])
</snippet></ROW><ROW><id>19312607</id><snippet>keys = redis.keys('*');
for key in keys:
    type = redis.type(key);
    if type == KV:
        val = redis.get(key);
    if type == HASH:
        vals = redis.hgetall(key);
    if type == ZSET:
        vals = redis.zrange(key, 0, -1);
</snippet></ROW><ROW><id>19313007</id><snippet>!=</snippet></ROW><ROW><id>19313007</id><snippet>__ne__</snippet></ROW><ROW><id>19313007</id><snippet>__eq__</snippet></ROW><ROW><id>19313007</id><snippet>__ne__</snippet></ROW><ROW><id>19313007</id><snippet>__eq__</snippet></ROW><ROW><id>19313007</id><snippet>__ne__</snippet></ROW><ROW><id>19313007</id><snippet>__hash__</snippet></ROW><ROW><id>19313007</id><snippet>class SomeClass(object):
    # ...
    def __eq__(self, other):
        if not isinstance(other, SomeClass):
            return NotImplemented
        return self.attr1 == other.attr1 and self.attr2 == other.attr2

    def __ne__(self, other):
        return not (self == other)

    # if __hash__ is not needed, write __hash__ = None and it will be
    # automatically disabled
    def __hash__(self):
        return hash((self.attr1, self.attr2))
</snippet></ROW><ROW><id>19313029</id><snippet>ax.grid(False)</snippet></ROW><ROW><id>19313029</id><snippet>from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.grid(False)
X, Y, Z = axes3d.get_test_data(0.05)
ax.plot_wireframe(X, Y, Z, rstride=10, cstride=10)

plt.show()
</snippet></ROW><ROW><id>19313465</id><snippet>excel = win32.DispatchEx('Excel.Application')
</snippet></ROW><ROW><id>19313523</id><snippet>datastore_types.SCATTER_SPECIAL_PROPERTY: (False, True, _GetScatterProperty)
</snippet></ROW><ROW><id>19313686</id><snippet>painting.bmp</snippet></ROW><ROW><id>19313686</id><snippet>mask.bmp</snippet></ROW><ROW><id>19313686</id><snippet>import PIL
from PIL import Image
from PIL import ImageChops # used for multiplying images

# open images
painting = Image.open("painting.bmp")
mask     = Image.open("mask.bmp")


def black_onto(img1, img2):  
    # create blank white canvas to put img2 onto
    resized = Image.new("RGB", img1.size, "white")

    # define where to paste mask onto canvas
    img1_w, img1_h = img1.size
    img2_w, img2_h = img2.size
    box = (img1_w/2-img2_w/2, img1_h/2-img2_h/2, img1_w/2-img2_w/2+img2_w, img1_h/2-img2_h/2+img2_h)

    # multiply new mask onto image
    resized.paste(img2, box)
    return ImageChops.multiply(img1, resized)


out = black_onto(painting, mask)
out.show() # this gives the output image shown above
</snippet></ROW><ROW><id>19313686</id><snippet>(img1_w/2-img2_w/2, img1_h/2-img2_h/2, img1_w/2-img2_w/2+img2_w, img1_h/2-img2_h/2+img2_h)</snippet></ROW><ROW><id>19313686</id><snippet>box</snippet></ROW><ROW><id>19313686</id><snippet>box</snippet></ROW><ROW><id>19313686</id><snippet>(x1, y1, x2, y2)</snippet></ROW><ROW><id>19313686</id><snippet>(x, y, width, height)</snippet></ROW><ROW><id>19313686</id><snippet>img2_w</snippet></ROW><ROW><id>19313686</id><snippet>img2_h</snippet></ROW><ROW><id>19313686</id><snippet>img2</snippet></ROW><ROW><id>19313716</id><snippet>BasePermission</snippet></ROW><ROW><id>19313716</id><snippet>has_permission</snippet></ROW><ROW><id>19313716</id><snippet>request</snippet></ROW><ROW><id>19313716</id><snippet>view</snippet></ROW><ROW><id>19313716</id><snippet>request.user</snippet></ROW><ROW><id>19313716</id><snippet>True</snippet></ROW><ROW><id>19313716</id><snippet>False</snippet></ROW><ROW><id>19313725</id><snippet>PATTERN = '''
    power&lt; head=any+
     trailer&lt; '.' method=any &gt;
     parens=trailer&lt; '(' tail=[argument | arglist] ')'&gt;

    &gt;
'''
</snippet></ROW><ROW><id>19313860</id><snippet>FileName</snippet></ROW><ROW><id>19313860</id><snippet>TypeName</snippet></ROW><ROW><id>19313860</id><snippet>...
for field, court in zip(Field, Court):
    writer.writerow([FileName, TypeName, field, court])
    FileName = TypeName = '' # &lt;---
...
</snippet></ROW><ROW><id>19313879</id><snippet>&gt;&gt;&gt; import 1sdjkhl
  File "&lt;stdin&gt;", line 1
    import 1sdjkhl
           ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19313879</id><snippet>2to3</snippet></ROW><ROW><id>19313879</id><snippet>$ 2to3 myscript.py
</snippet></ROW><ROW><id>19313908</id><snippet>images.crop(image, 0.0, 1.0, 1.0, 0.0, output_encoding=images.JPEG)
</snippet></ROW><ROW><id>19313922</id><snippet>file.seek</snippet></ROW><ROW><id>19313922</id><snippet>\r\n</snippet></ROW><ROW><id>19313922</id><snippet>file.truncate</snippet></ROW><ROW><id>19313922</id><snippet>import os
import csv

with open('eggs.csv', 'wb') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=' ',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])
    csvfile.seek(-2, os.SEEK_END) # &lt;---- 2 : len('\r\n')
    csvfile.truncate()            # &lt;----
</snippet></ROW><ROW><id>19313922</id><snippet>-2</snippet></ROW><ROW><id>19313922</id><snippet>lineterminator</snippet></ROW><ROW><id>19313922</id><snippet>-2</snippet></ROW><ROW><id>19313922</id><snippet>\r\n</snippet></ROW><ROW><id>19314090</id><snippet>apt-get</snippet></ROW><ROW><id>19314090</id><snippet>apt-get install python3.1-dev
</snippet></ROW><ROW><id>19314192</id><snippet>itertools.product</snippet></ROW><ROW><id>19314192</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; t = [[1,2,3], [4,5], [6,7]]
&gt;&gt;&gt; [x for x in itertools.product(*t[::-1])]
[(6, 4, 1),
 (6, 4, 2),
 (6, 4, 3),
 (6, 5, 1),
 (6, 5, 2),
 (6, 5, 3),
 (7, 4, 1),
 (7, 4, 2),
 (7, 4, 3),
 (7, 5, 1),
 (7, 5, 2),
 (7, 5, 3)]
&gt;&gt;&gt; [list(x) for x in itertools.product(*t[::-1])]
[[6, 4, 1],
 [6, 4, 2],
 [6, 4, 3],
 [6, 5, 1],
 [6, 5, 2],
 [6, 5, 3],
 [7, 4, 1],
 [7, 4, 2],
 [7, 4, 3],
 [7, 5, 1],
 [7, 5, 2],
 [7, 5, 3]]
</snippet></ROW><ROW><id>19314351</id><snippet>import numpy as np
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
ind = [[0,1],[2,2],[1,1]]
values = a[zip(*ind)]
b = values.sum()
# b = 2+9+5 = 16
</snippet></ROW><ROW><id>19314351</id><snippet>ind</snippet></ROW><ROW><id>19314351</id><snippet>zip</snippet></ROW><ROW><id>19314351</id><snippet>a[...]</snippet></ROW><ROW><id>19314351</id><snippet>a[(0,2,1),(1,2,1)]</snippet></ROW><ROW><id>19314351</id><snippet>import numpy as np
a = np.array([[1,2,3],[4,5,6],[7,8,9]])
ind = [[0,1],[2,2],[1,1]]   # indices in array
op = [1,1,-1]               # 1 for addition, -1 for subtraction
values = a[zip(*ind)]*op
b = values.sum()
# b = 2+9-5 = 6
</snippet></ROW><ROW><id>19314462</id><snippet>.//common1
</snippet></ROW><ROW><id>19314540</id><snippet>import xlwt, xlrd, csv, os

files = ['file1.csv','file2.csv','file3.csv','file4.csv']
outputfile = 'outputList.xls'
wbk = xlwt.Workbook()
sheetw = wbk.add_sheet('sheet 1')
row_offset, col_offset = 2, 2 # i.e. 2, 2 to print in C3 instead of A1

for fname in files:
    currentfile = xlrd.open_workbook(fname,'r')
    sheetr = currentfile.sheet_by_index(0)    
    data = sheetr.cell(11,0).value
    print data #for testing
    sheetw.write(files.index(fname) + row_offset, 0 + col_offset, data)    

wbk.save(outputfile)
</snippet></ROW><ROW><id>19315085</id><snippet>cmd = ["mysqldump", "-uDmitriy", "-pMyPass", "dmitrii"]
</snippet></ROW><ROW><id>19315085</id><snippet>mysqldump '-u Dmitriy' '-pMyPass' 'dmitrii'
</snippet></ROW><ROW><id>19315085</id><snippet>mysqldump '-uDmitriy' '-pMyPass' 'dmitrii'
</snippet></ROW><ROW><id>19315096</id><snippet>import codecs
with codecs.open('output.txt','w',encoding='utf8') as out:
    out.write(result)
</snippet></ROW><ROW><id>19315164</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; s = random.sample(xrange(1, 10 ** 6), 10 ** 5)
</snippet></ROW><ROW><id>19315302</id><snippet>maxfev</snippet></ROW><ROW><id>19315302</id><snippet>def f(x, b, a, k):
    return (b/(np.sqrt(1 + a*((k-x)**2))))

popt, pcov = curve_fit(f, x, y, p0=[20, 600.0, 35.0])
</snippet></ROW><ROW><id>19315302</id><snippet>b</snippet></ROW><ROW><id>19315302</id><snippet>x~35</snippet></ROW><ROW><id>19315302</id><snippet>p0</snippet></ROW><ROW><id>19315357</id><snippet>__init__</snippet></ROW><ROW><id>19315357</id><snippet>&gt;&gt;&gt; class Stack:
...     def __init__(self):
...         self.list = []
... 
&gt;&gt;&gt; DFSstack = Stack()
</snippet></ROW><ROW><id>19315357</id><snippet>__init__</snippet></ROW><ROW><id>19315534</id><snippet>&gt;&gt;&gt; fig, axarray = plt.subplots(3, 4)
</snippet></ROW><ROW><id>19315534</id><snippet>axarray</snippet></ROW><ROW><id>19315534</id><snippet>matplotlib.axes.AxesSubplot</snippet></ROW><ROW><id>19315534</id><snippet>&gt;&gt;&gt; axarray.shape
(3, 4)
</snippet></ROW><ROW><id>19315534</id><snippet>axarray[0]</snippet></ROW><ROW><id>19315534</id><snippet>&gt;&gt;&gt; axarray[0].shape
(4,)

&gt;&gt;&gt; type(axarray[0])
numpy.ndarray
</snippet></ROW><ROW><id>19315534</id><snippet>&gt;&gt;&gt; type(axarray[0,0])
matplotlib.axes.AxesSubplot

&gt;&gt;&gt; axarray[0,0].set_title('Top left')
</snippet></ROW><ROW><id>19315534</id><snippet>for ii,ax in enumerate(axarray.flat):
    ax.set_title('Axis %i' %ii)
</snippet></ROW><ROW><id>19315534</id><snippet>fig, ((ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8), (ax9, ax10, ax11, ax12)) \
    = plt.subplots(3,4)
</snippet></ROW><ROW><id>19315648</id><snippet>csv</snippet></ROW><ROW><id>19315648</id><snippet>def quote(col):
    if col is None:
        return ''
    # uses double-quoting style to escape existing quotes
    return '"{}"'.format(str(col).replace('"', '""'))

writer = csv.writer(fileobj, quoting=csv.QUOTE_NONE, escapechar='', quotechar='')

for row in rows:
    writer.writerow(map(quote, row))
</snippet></ROW><ROW><id>19315648</id><snippet>escapechar</snippet></ROW><ROW><id>19315648</id><snippet>quotechar</snippet></ROW><ROW><id>19315648</id><snippet>with open(filename, 'w'), fd:
    for row in rows:
        fd.write(','.join(map(quote, row)) + '\r\n')
</snippet></ROW><ROW><id>19316360</id><snippet>list</snippet></ROW><ROW><id>19316360</id><snippet>for line in reference:       
    line_list.append(line[:-1].split("\t\t"))
print line_list[2][0]
</snippet></ROW><ROW><id>19316710</id><snippet>def newlist(old_list):
    new_list = []
    for i in old_list:
        sep = ''
        new_list.append(sep.join(i))
    return new_list
</snippet></ROW><ROW><id>19316710</id><snippet>def newlist(old_list):
    return [''.join(x) for x in old_list]
</snippet></ROW><ROW><id>19316710</id><snippet>new_list.append([sep.join(i)])
</snippet></ROW><ROW><id>19316710</id><snippet>return [[''.join(x)] for x in old_list]
</snippet></ROW><ROW><id>19316827</id><snippet>pygame.transform.rotate</snippet></ROW><ROW><id>19316827</id><snippet>Surface</snippet></ROW><ROW><id>19316827</id><snippet>Surface</snippet></ROW><ROW><id>19316827</id><snippet>Surface</snippet></ROW><ROW><id>19316827</id><snippet>90</snippet></ROW><ROW><id>19316827</id><snippet>Surface</snippet></ROW><ROW><id>19316827</id><snippet>angle = 0
...
while True:
    ...
    elif end - new  &gt; 10:
        ...
        # increase angle
        angle += 90
        # ensure angle does not increase indefinitely
        angle %= 360 
        # create a new, rotated Surface
        surf = pygame.transform.rotate(image_surf, angle)
        # and blit it to the screen
        display_surf.blit(surf, (640, 480))
        ...
</snippet></ROW><ROW><id>19317150</id><snippet>create_login_url(..)</snippet></ROW><ROW><id>19317150</id><snippet>User</snippet></ROW><ROW><id>19317150</id><snippet>google.appengine.api.users</snippet></ROW><ROW><id>19317150</id><snippet>from google.appengine.api import users

users.create_logout_url(url)
</snippet></ROW><ROW><id>19317190</id><snippet>for loop</snippet></ROW><ROW><id>19317190</id><snippet>function</snippet></ROW><ROW><id>19317190</id><snippet>module</snippet></ROW><ROW><id>19317190</id><snippet>class</snippet></ROW><ROW><id>19317190</id><snippet>i</snippet></ROW><ROW><id>19317315</id><snippet>weights=</snippet></ROW><ROW><id>19317315</id><snippet>wcounts, xedges, yedges = np.histogram2d(x, y, weights=w)
</snippet></ROW><ROW><id>19317315</id><snippet>extent = xedges[0], xedges[-1], yedges[0], yedges[-1]
imshow(wcounts, extent=extent, alpha=0.5)
</snippet></ROW><ROW><id>19317315</id><snippet>alpha=</snippet></ROW><ROW><id>19317315</id><snippet>imshow()</snippet></ROW><ROW><id>19317315</id><snippet>hexbin(x, y, C=w, alpha=0.5)
</snippet></ROW><ROW><id>19317315</id><snippet>C=</snippet></ROW><ROW><id>19317315</id><snippet>alpha=</snippet></ROW><ROW><id>19317315</id><snippet>np.histogram2d()</snippet></ROW><ROW><id>19317315</id><snippet># remember that for n bins there are n+1 bin edges
x_edges = np.linspace(0, 100, 101)
y_edges = np.linspace(0, 75, 76)

wcounts = np.histogram2d(x, y, weights=w, bins=(x_edges, y_edges))[0]
</snippet></ROW><ROW><id>19317315</id><snippet>wcounts</snippet></ROW><ROW><id>19317315</id><snippet>(100, 75)</snippet></ROW><ROW><id>19317608</id><snippet>\</snippet></ROW><ROW><id>19317608</id><snippet>r</snippet></ROW><ROW><id>19317608</id><snippet>pathToFile = r"R:\T2 Output\12345--01--Some File 1--ABCD.mp4"
</snippet></ROW><ROW><id>19317768</id><snippet>python-twisted-web</snippet></ROW><ROW><id>19317768</id><snippet>sudo apt-get install python-twisted-web
</snippet></ROW><ROW><id>19318259</id><snippet>def maximum (A, B):
    BisBigger = A-B
    BisBigger.data = np.where(BisBigger.data &lt; 0, 1, 0)
    return A - A.multiply(BisBigger) + B.multiply(BisBigger)
</snippet></ROW><ROW><id>19318287</id><snippet>update</snippet></ROW><ROW><id>19318287</id><snippet>textcols = ['MATCH2', 'MATCH1', 'TITLE01', 'MATCH3', 'TITLE02', 'Data', 'misc2', 'bla3']
csvdata = pandas.read_csv(CSV_IN)
textdata = pandas.DataFrame(table, columns=textcols)

# Add any new columns
newCols = textdata.columns - csvdata.columns
for c in newCols:
    csvdata[c] = None

mergecols = ['MATCH2', 'MATCH1', 'MATCH3']
csvdata.set_index(mergecols, inplace=True, drop=False)
textdata.set_index(mergecols, inplace=True,drop=False)
csvdata.update(textdata)
csvdata.to_csv(CSV_OUT, index=False)
</snippet></ROW><ROW><id>19318417</id><snippet>pip install q</snippet></ROW><ROW><id>19318417</id><snippet>easy_install q</snippet></ROW><ROW><id>19318417</id><snippet>import q; q(foo)

# use @q to trace a function's arguments and return value
@q
def bar():
   ...

# to start an interactive console at any point in your code:
q.d()
</snippet></ROW><ROW><id>19318417</id><snippet>tail -f /tmp/q</snippet></ROW><ROW><id>19318428</id><snippet>%store</snippet></ROW><ROW><id>19318428</id><snippet>%%cache</snippet></ROW><ROW><id>19318428</id><snippet>if==0:</snippet></ROW><ROW><id>19318500</id><snippet>str</snippet></ROW><ROW><id>19318500</id><snippet>ints</snippet></ROW><ROW><id>19318500</id><snippet>import pandas as pd
df = pd.DataFrame({'col':['2','1','2']})
for i in range(1,4):
    print(df['col'][0:i].mean())
</snippet></ROW><ROW><id>19318500</id><snippet>2.0
10.5
70.6666666667
</snippet></ROW><ROW><id>19318500</id><snippet>ints</snippet></ROW><ROW><id>19318500</id><snippet>df = pd.DataFrame({'col':[2,1,2]})
for i in range(1,4):
    print(df['col'][0:i].mean())
</snippet></ROW><ROW><id>19318500</id><snippet>2.0
1.5
1.66666666667
</snippet></ROW><ROW><id>19318500</id><snippet>str</snippet></ROW><ROW><id>19318500</id><snippet>ints</snippet></ROW><ROW><id>19318500</id><snippet>df['col'] = df['col'].map(int)
</snippet></ROW><ROW><id>19318500</id><snippet>int</snippet></ROW><ROW><id>19318547</id><snippet>for x in doc.findAll('span'):
    s = x["attrib"]
    t = x.find('font')
    t.string = t.text.strip() + '_' + s
    x.replaceWithChildren()
</snippet></ROW><ROW><id>19318547</id><snippet>    t = x.find('font')
    if not t:
        x.string += s
    else:
        t.string += s
    x.replaceWithChildren()
</snippet></ROW><ROW><id>19318923</id><snippet>c1 = ['ls']
p1 = subprocess.Popen(c1, stdout=subprocess.PIPE)

c2 = ['wc']
p2 = subprocess.Popen(c2, stdin=p1.stdout,
                      stdout=subprocess.PIPE)

result = p2.stdout.read()
</snippet></ROW><ROW><id>19319150</id><snippet>get_or_create</snippet></ROW><ROW><id>19319150</id><snippet>profile_user = Profile.objects.get_or_create(user=django_user)[0]</snippet></ROW><ROW><id>19319150</id><snippet>profile_user, created = Profile.objects.get_or_create(user=django_user)</snippet></ROW><ROW><id>19319150</id><snippet>models.CharField</snippet></ROW><ROW><id>19319150</id><snippet>max_length</snippet></ROW><ROW><id>19319150</id><snippet>()</snippet></ROW><ROW><id>19319150</id><snippet>@task</snippet></ROW><ROW><id>19319412</id><snippet>time.strftime()</snippet></ROW><ROW><id>19319412</id><snippet>iso = time.strftime('%Y-%m-%dT%H:%M:%SZ', timetup)
</snippet></ROW><ROW><id>19319412</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; timetup = time.gmtime()
&gt;&gt;&gt; time.strftime('%Y-%m-%dT%H:%M:%SZ', timetup)
'2013-10-11T13:31:03Z'
</snippet></ROW><ROW><id>19319412</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>19319412</id><snippet>datetime.isoformat()</snippet></ROW><ROW><id>19319412</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime(*timetup[:6]).isoformat()
'2013-10-11T13:31:03'
</snippet></ROW><ROW><id>19319412</id><snippet>Z</snippet></ROW><ROW><id>19319626</id><snippet>def proofOfConcept():
    def wrapper(func):

        class MethodDecoratorAdapter(object):
            def __init__(self, func):
                self.func = func
                self.is_method = False

            def __get__(self, instance, owner):
                if not self.is_method:
                    self.is_method = True
                self.instance = instance

                return self

            def __call__(self, *args, **kwargs):
                # Decorator real logic goes here
                if self.is_method:
                    return self.func(self.instance, *args, **kwargs)
                else:
                    return self.func(*args, **kwargs)

        return wraps(func)(MethodDecoratorAdapter(func))

    return wrapper
</snippet></ROW><ROW><id>19319626</id><snippet>__get__</snippet></ROW><ROW><id>19319636</id><snippet>i</snippet></ROW><ROW><id>19319636</id><snippet>if 'q'+str(i) in d:
</snippet></ROW><ROW><id>19319636</id><snippet>+</snippet></ROW><ROW><id>19319636</id><snippet>'q'</snippet></ROW><ROW><id>19319636</id><snippet>i</snippet></ROW><ROW><id>19319636</id><snippet>range(0, 1)</snippet></ROW><ROW><id>19319636</id><snippet>if 'q%i' % i in d:
</snippet></ROW><ROW><id>19319636</id><snippet>+</snippet></ROW><ROW><id>19319645</id><snippet>self.update_group = [New_Game_Button, Load_Game_Button, Quit_Game_Button, Settings_Button]
</snippet></ROW><ROW><id>19319730</id><snippet>S</snippet></ROW><ROW><id>19319730</id><snippet>x</snippet></ROW><ROW><id>19319730</id><snippet>Range of numbers   Range of log (base 10) value    Number of digits
           1 - 9                         [0, 1)                   1
         10 - 99                         [1, 2)                   2
       100 - 999                         [2, 3)                   3
     1000 - 9999                         [3, 4)                   4
   10000 - 99999                         [4, 5)                   5
</snippet></ROW><ROW><id>19319730</id><snippet>floor(log10(x)) + 1</snippet></ROW><ROW><id>19319730</id><snippet>n</snippet></ROW><ROW><id>19319730</id><snippet>b</snippet></ROW><ROW><id>19319730</id><snippet>x</snippet></ROW><ROW><id>19319730</id><snippet>b</snippet></ROW><ROW><id>19319730</id><snippet>x</snippet></ROW><ROW><id>19319730</id><snippet>1</snippet></ROW><ROW><id>19319730</id><snippet>Decimal range    Binary range    Range of log (base 2) value    Number of bits
            1               1                         [0, 0]                 1
        2 - 3         10 - 11                         [1, 2)                 2
        4 - 7       100 - 111                         [2, 3)                 3
       8 - 15     1000 - 1111                         [3, 4)                 4
      16 - 31   10000 - 11111                         [4, 5)                 5
</snippet></ROW><ROW><id>19319813</id><snippet>In [44]: x = df2.swaplevel('variable1','variable3',axis=1)

In [45]: x['y'] = x['y'].ffill()

In [46]: x.swaplevel('variable3','variable1',axis=1)
Out[46]: 
variable1   A               B    
variable2   a       b       a   b
variable3   x   y   x   y   x   y
index                            
0           1 NaN NaN NaN NaN NaN
1         NaN NaN   0 NaN NaN NaN
2         NaN NaN NaN NaN   0 NaN
3         NaN NaN NaN NaN NaN   1
4         NaN   1 NaN NaN NaN   1
5         NaN   1 NaN NaN NaN   0
6         NaN   1 NaN NaN   0   0
7         NaN   1 NaN   1 NaN   0
</snippet></ROW><ROW><id>19319813</id><snippet>drop_level=False</snippet></ROW><ROW><id>19319813</id><snippet>In [77]: df_sub = df2.xs('y',level='variable3',axis=1,drop_level=False).ffill()

In [78]: df_sub
Out[78]: 
variable1   A       B
variable2   a   b   b
variable3   y   y   y
index                
0         NaN NaN NaN
1         NaN NaN NaN
2         NaN NaN NaN
3         NaN NaN   1
4           1 NaN   1
5           1 NaN   0
6           1 NaN   0
7           1   1   0

In [79]: df2.loc[:,df_sub.columns] = df_sub

In [80]: df2
Out[80]: 
variable1   A               B    
variable2   a       b       a   b
variable3   x   y   x   y   x   y
index                            
0           1 NaN NaN NaN NaN NaN
1         NaN NaN   0 NaN NaN NaN
2         NaN NaN NaN NaN   0 NaN
3         NaN NaN NaN NaN NaN   1
4         NaN   1 NaN NaN NaN   1
5         NaN   1 NaN NaN NaN   0
6         NaN   1 NaN NaN   0   0
7         NaN   1 NaN   1 NaN   0
</snippet></ROW><ROW><id>19319867</id><snippet>import base64
from datetime import datetime
import httplib
import io
import os
import time

from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw


wdir = "workdir"
stream_url = ''
username = ''
password = ''


def main():
    time_count = 2
    looper_stream(time_count)


def looper_stream(time_count):
    h = httplib.HTTP(stream_url)
    h.putrequest('GET', '/videostream.cgi')
    h.putheader('Authorization', 'Basic %s' % base64.encodestring('%s:%s' % (username, password))[:-1])
    h.endheaders()
    errcode, errmsg, headers = h.getreply()
    stream_file = h.getfile()
    start = time.time()
    end = start + time_count
    while time.time() &lt;= end:
        now = datetime.now()
        dte = str(now.day) + "-" + str(now.month) + "-" + str(now.year)
        dte1 = str(now.hour) + "-" + str(now.minute) + "-" + str(now.second) + "." + str(now.microsecond)
        cname = "Cam1-"
        dnow = """Date: %s """ % dte
        dnow1 = """Time: %s""" % dte1
        # your camera may have a different streaming format
        # but I think you can figure it out from the debug style below
        source_name = stream_file.readline()    # '--ipcamera'
        content_type = stream_file.readline()    # 'Content-Type: image/jpeg'
        content_length = stream_file.readline()   # 'Content-Length: 19565'
        print 'confirm/adjust content (source?): ' + source_name
        print 'confirm/adjust content (type?): ' + content_type
        print 'confirm/adjust content (length?): ' + content_length
        # find the beginning of the jpeg data BEFORE pulling the jpeg framesize
        # there must be a more efficient way, but hopefully this is not too bad
        b1 = b2 = b''
        while True:
            b1 = stream_file.read(1)
            while b1 != chr(0xff):
                b1 = stream_file.read(1)
            b2 = stream_file.read(1)
            if b2 == chr(0xd8):
                break
        # pull the jpeg data
        framesize = int(content_length[16:])
        jpeg_stripped = b''.join((b1, b2, stream_file.read(framesize - 2)))
        # throw away the remaining stream data. Sorry I have no idea what it is
        junk_for_now = stream_file.readline()
        # convert directly to an Image instead of saving / reopening
        # thanks to SO: http://stackoverflow.com/a/12020860/377366
        image_as_file = io.BytesIO(jpeg_stripped)
        image_as_pil = Image.open(image_as_file)
        draw = ImageDraw.Draw(image_as_pil)
        draw.text((0, 0), cname, fill="white")
        draw.text((0, 10), dnow, fill="white")
        draw.text((0, 20), dnow1, fill="white")
        img_name = "Cam1-" + dte + dte1 + ".jpg"
        img_path = os.path.join(wdir, img_name)
        image_as_pil.save(img_path)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19319867</id><snippet>from datetime import datetime
import io
import threading
import os
import time

import urllib2

from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw


wdir = "workdir"


def looper(time_count, loop_name):
    start = time.time()
    end = start + time_count
    font = ImageFont.truetype("/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf", 10)
    while time.time() &lt;= end:
        now = datetime.now()
        dte = str(now.day) + "-" + str(now.month) + "-" + str(now.year)
        dte1 = str(now.hour) + "-" + str(now.minute) + "-" + str(now.second) + "." + str(now.microsecond)
        cname = "Cam1-"
        dnow = """Date: %s """ % dte
        dnow1 = """Time: %s""" % dte1
        image = urllib2.urlopen('http://(ip address)/snapshot.cgi?user=uname&amp;pwd=password').read()
        # convert directly to an Image instead of saving / reopening
        # thanks to SO: http://stackoverflow.com/a/12020860/377366
        image_as_file = io.BytesIO(image)
        image_as_pil = Image.open(image_as_file)
        draw = ImageDraw.Draw(image_as_pil)
        draw_text = "\n".join((cname, dnow, dnow1))
        draw.text((0, 0), draw_text, fill="white", font=font)
        #draw.text((0, 0), cname, fill="white", font=font)
        #draw.text((0, 10), dnow, fill="white", font=font)
        #draw.text((0, 20), dnow1, fill="white", font=font)
        img_name = "Cam1-" + dte + dte1 + "(" + loop_name + ").jpg"
        img_path = os.path.join(wdir, img_name)
        image_as_pil.save(img_path)


if __name__ == '__main__':
    time_count = 5
    threads = list()
    for i in range(2):
        name = str(i)
        t = threading.Thread(target=looper, args=(time_count, name))
        threads.append(p)
        t.start()
    for t in threads:
        t.join()
</snippet></ROW><ROW><id>19319904</id><snippet>@tornado.web.asynchronous</snippet></ROW><ROW><id>19319904</id><snippet>@gen.coroutine</snippet></ROW><ROW><id>19319904</id><snippet>@gen.engine</snippet></ROW><ROW><id>19320043</id><snippet>stream_body</snippet></ROW><ROW><id>19320419</id><snippet>products_names = ', '.join([product.name for movement in movements for product in movement.products])
</snippet></ROW><ROW><id>19320419</id><snippet>product.name</snippet></ROW><ROW><id>19320419</id><snippet>join</snippet></ROW><ROW><id>19320419</id><snippet>', '</snippet></ROW><ROW><id>19320419</id><snippet>products_names = ', '.join(product.name for movement in movements for product in movement.products)
</snippet></ROW><ROW><id>19320419</id><snippet>join()</snippet></ROW><ROW><id>19320522</id><snippet>def f(url):
    path_to_write = 'test.dat'
    pdf_data = 'asdf'
    try:
        write_to_disk(path_to_write, pdf_data)
    except Exception as e:
        print 'Did I jump directly to here?\n' + str(e)


def write_to_disk(path_to_write, pdf_data):
    try:
        print 'Here `1.1'
        with open(path_to_write, "w+") as fd:
            print 'Here `2.1'
            fd.write(pdf_data)
    except Exception as e:
        print 'file cannot be opened ' + path_to_write


f('fake_url')
</snippet></ROW><ROW><id>19320522</id><snippet>with</snippet></ROW><ROW><id>19320862</id><snippet>for index, row in pyrecords.iterrows():     
    analyze_text(row['review'], u'english',row['dealid'],row['userid'])
</snippet></ROW><ROW><id>19320862</id><snippet>analyze_text</snippet></ROW><ROW><id>19321183</id><snippet>sys.setrecursionlimit(1000000000)
</snippet></ROW><ROW><id>19321183</id><snippet>RuntimeError: maximum recursion depth exceeded</snippet></ROW><ROW><id>19321183</id><snippet>dict</snippet></ROW><ROW><id>19321275</id><snippet># in foo.py
from bar import cat

# in bar.py
from foo import dog
</snippet></ROW><ROW><id>19321650</id><snippet>number, type, identifier, height, width = mystring.split(',')
</snippet></ROW><ROW><id>19321650</id><snippet>split</snippet></ROW><ROW><id>19321650</id><snippet>list</snippet></ROW><ROW><id>19321650</id><snippet>,</snippet></ROW><ROW><id>19321650</id><snippet>&gt;&gt;&gt; x = "9532167,box,C,5,20"
&gt;&gt;&gt; x.split(',')
['9532167', 'box', 'C', '5', '20']
&gt;&gt;&gt; number, type, identifier, height, width = x.split(',')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19321710</id><snippet>from types import MethodType, FunctionType
methodtypes = set((MethodType, FunctionType, classmethod, staticmethod))

def methods_in_order(cls):
    "Given a class or instance, return its methods in the order they were defined."
    methodnames = (n for n in dir(cls) if type(getattr(cls, n)) in methodtypes)
    return sorted((getattr(cls, n) for n in methodnames), 
                  key=lambda f: getattr(f, "__func__", f).func_code.co_firstlineno)
</snippet></ROW><ROW><id>19321710</id><snippet>class Foo(object):
    def a(): pass
    def b(): pass
    def c(): pass

print methods_in_order(Foo)
[&lt;unbound method Foo.a&gt;, &lt;unbound method Foo.b&gt;, &lt;unbound method Foo.c&gt;]
</snippet></ROW><ROW><id>19321710</id><snippet>print methods_in_order(Foo())
</snippet></ROW><ROW><id>19321710</id><snippet>from types import MethodType, FunctionType
methodtypes = set((MethodType, FunctionType, classmethod, staticmethod))

def methods_in_order(cls):
    "Given a class or instance, return its methods in the order they were defined."
    methodnames = (n for n in (cls.__dict__ if type(cls) is type else type(cls).__dict__)
                   if type(getattr(cls, n)) in methodtypes)
    return sorted((getattr(cls, n) for n in methodnames), 
                  key=lambda f: getattr(f, "__func__", f).func_code.co_firstlineno)
</snippet></ROW><ROW><id>19321727</id><snippet>json_data = json.loads(your_line)

# Usage exemple
for feature in json_data['features']:
    print feature['id']
</snippet></ROW><ROW><id>19321854</id><snippet>return</snippet></ROW><ROW><id>19321854</id><snippet>return myList2
</snippet></ROW><ROW><id>19321854</id><snippet>myList</snippet></ROW><ROW><id>19321854</id><snippet>myList</snippet></ROW><ROW><id>19321854</id><snippet>def splitList(myList, option):
    myList2 = []
    if option == 0:
        for element in myList:
            if abs(element)&gt;5:
                myList2.append(element)
    return myList2
</snippet></ROW><ROW><id>19321854</id><snippet>def splitList(myList, option):
    if option == 0:
        return [el for el in myList if abs(el) &gt; 5]
</snippet></ROW><ROW><id>19321971</id><snippet>grequests.map</snippet></ROW><ROW><id>19321971</id><snippet>content</snippet></ROW><ROW><id>19321971</id><snippet>rs = (grequests.get(u) for u in urls)
for response in grequests.map(rs):
    print('{}: {}'.format(r.url, len(response.content)))
</snippet></ROW><ROW><id>19322199</id><snippet>import threading
def run_item(f, item):
    result_info = [threading.Event(), None]
    def runit():
        result_info[1] = f(item)
        result_info[0].set()
    threading.Thread(target=runit).start()
    return result_info
</snippet></ROW><ROW><id>19322199</id><snippet>def gather_results(result_infos):
    results = [] 
    for i in xrange(len(result_infos)):
        result_infos[i][0].wait()
        results.append(result_infos[i][1])
    return results
</snippet></ROW><ROW><id>19322199</id><snippet>proc</snippet></ROW><ROW><id>19322199</id><snippet>items</snippet></ROW><ROW><id>19322199</id><snippet>#start processing the items
result_infos = [run_item(proc, item) for item in items]
#gather the results (blocking)
results = gather_results(result_infos)
</snippet></ROW><ROW><id>19322199</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; def proc(item):
...     time.sleep(2.0)
...     return item * 2
... 
&gt;&gt;&gt; print gather_results([run_item(proc, item) for item in [1, 2, 10, 100]])
#2 seconds later...
[2, 4, 20, 200]
</snippet></ROW><ROW><id>19322307</id><snippet>\n</snippet></ROW><ROW><id>19322307</id><snippet>&gt;&gt;&gt; chr(10)
'\n'
</snippet></ROW><ROW><id>19322307</id><snippet>\x0a</snippet></ROW><ROW><id>19322307</id><snippet>&gt;&gt;&gt; struct.pack('!Bhh', 1, 1, 13)
b'\x01\x00\x01\x00\r'
&gt;&gt;&gt; struct.pack('!Bhh', 1, 1, 9)
b'\x01\x00\x01\x00\t'
&gt;&gt;&gt; struct.pack('!Bhh', 1, 1, 65)
b'\x01\x00\x01\x00A'
</snippet></ROW><ROW><id>19322307</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>19322307</id><snippet>&gt;&gt;&gt; from binascii import hexlify
&gt;&gt;&gt; hexlify(struct.pack('!Bhh', 1, 1, 10))
b'010001000a'
</snippet></ROW><ROW><id>19322396</id><snippet>f1=open('file')
contents=f1.readlines()[4:]
f1.close() #we don't need it anymore
with open('new_file','a') as f2:
    for i in range(1,11):
        for line in contents:
            columns = line.split()
            if len(columns) &gt; 3 and int(columns[1]) == i:
                f2.write(str(i)+'\n')
                break
</snippet></ROW><ROW><id>19322396</id><snippet>antennae=set()
f1=open('file')
lineno=1
for line in f1:
    if lineno &gt;= 5:
        row = line.split()
        if len(row) &gt; 3:
            antennae.add(int(row[1]))
    lineno+=1
f1.close()
f2=open('new_file','a')
for antenna in antennae:
    f2.write(str(antenna)+'\n')
f2.close()
</snippet></ROW><ROW><id>19322489</id><snippet>dict</snippet></ROW><ROW><id>19322489</id><snippet>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; 
&gt;&gt;&gt; s = 'CPU0Tjmax|90degreesC|ok'
&gt;&gt;&gt; li = s.split("|")
&gt;&gt;&gt; 
&gt;&gt;&gt; d[li[0]] = (li[1], li[2])
&gt;&gt;&gt; d
{'CPU0Tjmax': ('90degreesC', 'ok')}
</snippet></ROW><ROW><id>19322613</id><snippet>axes</snippet></ROW><ROW><id>19322613</id><snippet>set_clim</snippet></ROW><ROW><id>19322613</id><snippet>fig.set_clim(smin.val,smax.val)
</snippet></ROW><ROW><id>19322613</id><snippet>l.set_clim(smin.val,smax.val)
</snippet></ROW><ROW><id>19322613</id><snippet>set_clim</snippet></ROW><ROW><id>19322613</id><snippet>ScalarMappable</snippet></ROW><ROW><id>19322613</id><snippet>np.random.random</snippet></ROW><ROW><id>19322613</id><snippet>z = np.random.random((100, 100))
</snippet></ROW><ROW><id>19322766</id><snippet>In [11]: from pandas.util.testing import assert_frame_equal

In [12]: assert_frame_equal(df, expected, check_names=False)
</snippet></ROW><ROW><id>19322766</id><snippet>try:
    assert_frame_equal(df, expected, check_names=False)
    return True
except AssertionError:
    return False
</snippet></ROW><ROW><id>19322785</id><snippet># Sometimes MCO gives us a ruby hash as a string, We can coerce this into json then into dictionary
def convert_hash_to_dict(self,ruby_hash):
    dict_str = ruby_hash.replace(":",'"')    # Remove the ruby object key prefix
    dict_str = dict_str.replace("=&gt;",'" : ') # swap the k =&gt; v notation, and close any unshut quotes 
    dict_str = dict_str.replace('""','"')    # strip back any double quotes we created to sinlges
    return json.loads(dict_str) 
</snippet></ROW><ROW><id>19322880</id><snippet>joins</snippet></ROW><ROW><id>19322880</id><snippet>is_alive()</snippet></ROW><ROW><id>19322917</id><snippet>os.getcwd</snippet></ROW><ROW><id>19322917</id><snippet>import os
cwd = os.getcwd()
</snippet></ROW><ROW><id>19322935</id><snippet>vstack</snippet></ROW><ROW><id>19322935</id><snippet>hstack</snippet></ROW><ROW><id>19322935</id><snippet>n, p = 4700, 67
csr_vecs = [sps.rand(1, p, density=0.5, format='csr') for j in xrange(n)]
lil_vecs = [vec.tolil() for vec in csr_vecs]

%timeit sps.vstack(csr_vecs, format='csr')
1 loops, best of 3: 722 ms per loop

%timeit sps.vstack(lil_vecs, format='lil')
1 loops, best of 3: 1.34 s per loop
</snippet></ROW><ROW><id>19322935</id><snippet>scipy.sparse</snippet></ROW><ROW><id>19322935</id><snippet>def csr_stack(vectors):
    data = np.concatenate([vec.data for vec in vectors])
    indices = np.concatenate([vec.indices for vec in vectors])
    indptr = np.cumsum([0] + [vec.nnz for vec in vectors])
    return sps.csr_matrix((data, indices, indptr), shape=(len(vectors),
                                                          vectors[0].shape[1]))
import itertools as it
def lil_stack(vectors):
    indptr = np.cumsum([0] + [vec.nnz for vec in vectors])
    data = np.fromiter(it.chain(*(vec.data[0] for vec in vectors)),
                       dtype=vectors[0].dtype, count=indptr[-1])
    indices = np.fromiter(it.chain(*(vec.rows[0] for vec in vectors)),
                          dtype=np.intp, count=indptr[-1])
    return sps.csr_matrix((data, indices, indptr), shape=(len(vectors),
                                                          vectors[0].shape[1]))
</snippet></ROW><ROW><id>19322935</id><snippet>&gt;&gt;&gt; np.allclose(sps.vstack(csr_vecs).A, csr_stack(csr_vecs).A)
True
&gt;&gt;&gt; np.allclose(csr_stack(csr_vecs).A, lil_stack(lil_vecs).A)
True
</snippet></ROW><ROW><id>19322935</id><snippet>%timeit csr_stack(csr_vecs)
100 loops, best of 3: 11.7 ms per loop

%timeit lil_stack(lil_vecs)
10 loops, best of 3: 37.6 ms per loop

%timeit lil_stack(lil_vecs).tolil()
10 loops, best of 3: 53.6 ms per loop
</snippet></ROW><ROW><id>19323121</id><snippet>yaml</snippet></ROW><ROW><id>19323121</id><snippet>from yaml.representer import Representer
yaml.add_representer(collections.defaultdict, Representer.represent_dict)
</snippet></ROW><ROW><id>19323121</id><snippet>yaml.dump()</snippet></ROW><ROW><id>19323121</id><snippet>defaultdict</snippet></ROW><ROW><id>19323121</id><snippet>dict</snippet></ROW><ROW><id>19323121</id><snippet>&gt;&gt;&gt; print yaml.dump(data)
this:
  is: {me: test}

&gt;&gt;&gt; print yaml.dump(data, default_flow_style=False)
this:
  is:
    me: test
</snippet></ROW><ROW><id>19323238</id><snippet>ConfigParser</snippet></ROW><ROW><id>19323238</id><snippet>object</snippet></ROW><ROW><id>19323238</id><snippet>super</snippet></ROW><ROW><id>19323238</id><snippet>ConfigParser</snippet></ROW><ROW><id>19323238</id><snippet>class ConfigParser(object): # or inherit from some class who inherit from object
</snippet></ROW><ROW><id>19323238</id><snippet>super</snippet></ROW><ROW><id>19323238</id><snippet>ConfigParser</snippet></ROW><ROW><id>19323238</id><snippet>class MyParser(ConfigParser):
    def __init__(self, cpath):
        ConfigParser.__init__(self)
        self.configpath = cpath
        self.read(self.configpath)
</snippet></ROW><ROW><id>19323389</id><snippet>if re.match(r"\d{2}/\d{2}/\d{4}", date):
#                               here --^
</snippet></ROW><ROW><id>19323389</id><snippet>def getdate():
    date = raw_input("Please enter the date completed (MM/DD/YYY): ")
    valid = "(\d{2}/\d{2}/\d{4})"
    while not re.match(valid, date):
        print "Incorrect date format"
        date = raw_input("Please enter the date completed (MM/DD/YYY): ")
    return date
</snippet></ROW><ROW><id>19323389</id><snippet>re.match</snippet></ROW><ROW><id>19323461</id><snippet>Colormap</snippet></ROW><ROW><id>19323461</id><snippet>&gt;&gt;&gt; gradient2n(0.5)
(1.0, 0.49803921568627452, 0.49803921568627452, 1.0)
</snippet></ROW><ROW><id>19323461</id><snippet>matplotlib.colors.rgb2hex</snippet></ROW><ROW><id>19323461</id><snippet>from matplotlib.colors import rgb2hex

def colors_at_breaks(cmap, breaks):
    return [rgb2hex(cmap(bb)) for bb in breaks]
</snippet></ROW><ROW><id>19323461</id><snippet>&gt;&gt;&gt; colors_at_breaks(gradient2n, breaks)
['#ffffff', '#ffbfbf', '#ff7f7f', '#ff3f3f', '#ff0000']
</snippet></ROW><ROW><id>19323665</id><snippet>reversed(range(1000000000000000000000))
</snippet></ROW><ROW><id>19323665</id><snippet>__reversed__</snippet></ROW><ROW><id>19323665</id><snippet>def downrange(n):
    while n &gt; 0:
        yield n
        n -= 1

for i in downrange(n):
    print i
</snippet></ROW><ROW><id>19323739</id><snippet>None</snippet></ROW><ROW><id>19323739</id><snippet>shuffle</snippet></ROW><ROW><id>19323739</id><snippet>None</snippet></ROW><ROW><id>19323739</id><snippet>print a
</snippet></ROW><ROW><id>19323739</id><snippet>shuffle</snippet></ROW><ROW><id>19323739</id><snippet>shuffle</snippet></ROW><ROW><id>19323739</id><snippet>self</snippet></ROW><ROW><id>19323739</id><snippet>print</snippet></ROW><ROW><id>19323739</id><snippet>object</snippet></ROW><ROW><id>19323823</id><snippet>git root/
git root/{app name}
git root/{app name}/settings.py
git root/{app name}/static/         &lt;- this is what you're missing
</snippet></ROW><ROW><id>19323823</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>19323832</id><snippet>user</snippet></ROW><ROW><id>19323832</id><snippet>twisted.web.resource.IResource</snippet></ROW><ROW><id>19323832</id><snippet>u = user()
root.putChild("user", u)
u.putChild("register", register())
</snippet></ROW><ROW><id>19323832</id><snippet>putChild</snippet></ROW><ROW><id>19323832</id><snippet>None</snippet></ROW><ROW><id>19323881</id><snippet>endpoint = 'https://api-ssl.bitly.com/v3/shorten?access_token={0}&amp;longUrl={1}&amp;format=txt'
req = endpoint.format(settings.ACCESS_KEY, urllib.quote(long_url))
return urlopen(req).read()
</snippet></ROW><ROW><id>19323954</id><snippet>GL_CLAMP_TO_EDGE</snippet></ROW><ROW><id>19323954</id><snippet>GL_TEXTURE_WRAP_S</snippet></ROW><ROW><id>19323954</id><snippet>texelFetch (...)</snippet></ROW><ROW><id>19323954</id><snippet>a</snippet></ROW><ROW><id>19323954</id><snippet>gl_FragColor = texelFetch (palette, (int)(texture2D (texture, uv).a * 255.0), 0);
</snippet></ROW><ROW><id>19324075</id><snippet>pages = DBSession.query(Pages)
for page in pages:
    config.add_route(str(page.name), page.url)
    if page.template.decode('utf-8') == "home_view":
        config.add_view(home_view, route_name=str(page.name), renderer='templates/home.pt')        
    elif page.template.decode('utf-8') == "detail_view":
        config.add_view(home_view, route_name=str(page.name), renderer='templates/detail.pt')    
</snippet></ROW><ROW><id>19324075</id><snippet>def home_view(self, request):
    return dict(.....)
</snippet></ROW><ROW><id>19324113</id><snippet>a == 1
b == 1
c == -2*y
</snippet></ROW><ROW><id>19324113</id><snippet>x1 = (-1 + sqrt(1 + 8*y)) / 2
x2 = (-1 - sqrt(1 + 8*y)) / 2
</snippet></ROW><ROW><id>19324113</id><snippet>math.sqrt</snippet></ROW><ROW><id>19324130</id><snippet>migrate</snippet></ROW><ROW><id>19324130</id><snippet>models.py</snippet></ROW><ROW><id>19324130</id><snippet>db.create_all()</snippet></ROW><ROW><id>19324130</id><snippet>db.drop_all()</snippet></ROW><ROW><id>19324130</id><snippet>(venv)[miguel@miguel-linux nhs-listpull]$ ./run.py db init
  Creating directory /home/miguel/tmp/mark/nhs-listpull/migrations...done
  Creating directory /home/miguel/tmp/mark/nhs-listpull/migrations/versions...done
  Generating /home/miguel/tmp/mark/nhs-listpull/migrations/script.py.mako...done
  Generating /home/miguel/tmp/mark/nhs-listpull/migrations/env.pyc...done
  Generating /home/miguel/tmp/mark/nhs-listpull/migrations/env.py...done
  Generating /home/miguel/tmp/mark/nhs-listpull/migrations/README...done
  Generating /home/miguel/tmp/mark/nhs-listpull/migrations/alembic.ini...done
  Please edit configuration/connection/logging settings in
  '/home/miguel/tmp/mark/nhs-listpull/migrations/alembic.ini' before
  proceeding.
(venv)[miguel@miguel-linux nhs-listpull]$ ./run.py db migrate
INFO  [alembic.migration] Context impl SQLiteImpl.
INFO  [alembic.migration] Will assume non-transactional DDL.
INFO  [alembic.autogenerate] Detected added table 'list_type'
INFO  [alembic.autogenerate] Detected added table 'job'
  Generating /home/miguel/tmp/mark/nhs-
  listpull/migrations/versions/48ff3456cfd3_.py...done
</snippet></ROW><ROW><id>19324366</id><snippet>&gt;&gt;&gt; from sqlalchemy.sql import text
&gt;&gt;&gt; s = text(
...     "SELECT users.fullname || ', ' || addresses.email_address AS title "
...         "FROM users, addresses "
...         "WHERE users.id = addresses.user_id "
...         "AND users.name BETWEEN :x AND :y "
...         "AND (addresses.email_address LIKE :e1 "
...             "OR addresses.email_address LIKE :e2)")
SQL&gt;&gt;&gt; conn.execute(s, x='m', y='z', e1='%@aol.com', e2='%@msn.com').fetchall() 
[(u'Wendy Williams, wendy@aol.com',)]
</snippet></ROW><ROW><id>19324366</id><snippet>text()</snippet></ROW><ROW><id>19324366</id><snippet>sql.format(...)</snippet></ROW><ROW><id>19324366</id><snippet>def _sql_to_data(sql, values):
    ...
    conn.execute(sql, values)
</snippet></ROW><ROW><id>19324366</id><snippet>values</snippet></ROW><ROW><id>19324366</id><snippet>sql = 'SELECT ...'
data = { 'user_id' : 3 }
results = _sql_to_data(sql, data)
</snippet></ROW><ROW><id>19324366</id><snippet>execute()</snippet></ROW><ROW><id>19324445</id><snippet>undefined</snippet></ROW><ROW><id>19324445</id><snippet>in</snippet></ROW><ROW><id>19324445</id><snippet>var obj = {};
var key = "test";

if (key in obj) {
    // key exists
} else {
    // key doesn't exist
}
</snippet></ROW><ROW><id>19324445</id><snippet>undefined</snippet></ROW><ROW><id>19324445</id><snippet>var obj = {};
var value = obj.test;

alert(value === undefined);
</snippet></ROW><ROW><id>19324445</id><snippet>in</snippet></ROW><ROW><id>19324445</id><snippet>undefined</snippet></ROW><ROW><id>19324445</id><snippet>undefined</snippet></ROW><ROW><id>19324445</id><snippet>var obj = {};
var obj.test = "hello";

if (obj.test) {
    // key exists and has a truthy value
}
</snippet></ROW><ROW><id>19324445</id><snippet>var obj = {};
var obj.test = "hello";

if (obj.hasOwnProperty(test)) {
    // key exists on the object itself (not only on the prototype)
}
</snippet></ROW><ROW><id>19324591</id><snippet>Series.reindex</snippet></ROW><ROW><id>19324591</id><snippet>import pandas as pd

idx = pd.date_range('09-01-2013', '09-30-2013')

s = pd.Series({'09-02-2013': 2,
               '09-03-2013': 10,
               '09-06-2013': 5,
               '09-07-2013': 1})
s.index = pd.DatetimeIndex(s.index)

s = s.reindex(idx, fill_value=0)
print(s)
</snippet></ROW><ROW><id>19324591</id><snippet>2013-09-01     0
2013-09-02     2
2013-09-03    10
2013-09-04     0
2013-09-05     0
2013-09-06     5
2013-09-07     1
2013-09-08     0
...
</snippet></ROW><ROW><id>19324716</id><snippet>plt.ion()</snippet></ROW><ROW><id>19324716</id><snippet>plt.show()
</snippet></ROW><ROW><id>19324716</id><snippet>plt.plot</snippet></ROW><ROW><id>19324716</id><snippet>plt.contourf</snippet></ROW><ROW><id>19324807</id><snippet>def get_redirect_url(url):
    opener = urllib2.build_opener(urllib2.HTTPRedirectHandler)
    try:
        request = opener.open(url)
        return request.url
    except urllib2.HTTPError as e:
        pass # or do something
</snippet></ROW><ROW><id>19324807</id><snippet>None</snippet></ROW><ROW><id>19324921</id><snippet>from itertools import product
from math import log10
def foo(row, col):
    table = [[0]*col for _ in range(row)]
    for i, j in product(range(row), range(col)):
        table[i][j] =  sum(range(i+1, j+2)) if i &lt; j else sum(range(j+1, i+2))
    _max = max(row, col)
    _max = int(log10(_max*(_max+1) / 2)) + 3
    formatstr = ("{{:^{}}}".format(_max))*col
    for row in table:
        print formatstr.format(*row)


&gt;&gt;&gt; foo(3,4)
 1   3   6   10 
 3   2   5   9  
 6   5   3   7  
&gt;&gt;&gt; foo(10,10)
 1   3   6   10  15  21  28  36  45  55 
 3   2   5   9   14  20  27  35  44  54 
 6   5   3   7   12  18  25  33  42  52 
 10  9   7   4   9   15  22  30  39  49 
 15  14  12  9   5   11  18  26  35  45 
 21  20  18  15  11  6   13  21  30  40 
 28  27  25  22  18  13  7   15  24  34 
 36  35  33  30  26  21  15  8   17  27 
 45  44  42  39  35  30  24  17  9   19 
 55  54  52  49  45  40  34  27  19  10
</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>git ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>git ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>git remote show origin</snippet></ROW><ROW><id>19325030</id><snippet>git fetch origin</snippet></ROW><ROW><id>19325030</id><snippet>$ git fetch origin
$ git ls-remote origin
120a630b0b71193a33cd033ae9ddcee1db3df07e    HEAD
120a630b0b71193a33cd033ae9ddcee1db3df07e    refs/heads/master
$ git remote show origin
* remote origin
  Fetch URL: ssh://[host]//tmp/tt.git/
  Push  URL: ssh://[host]//tmp/tt.git/
  HEAD branch: master
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (fast-forwardable)
</snippet></ROW><ROW><id>19325030</id><snippet>HEAD branch</snippet></ROW><ROW><id>19325030</id><snippet>HEAD</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/*</snippet></ROW><ROW><id>19325030</id><snippet>git config --get remote.origin.url</snippet></ROW><ROW><id>19325030</id><snippet>git config --get remote.origin.pushurl</snippet></ROW><ROW><id>19325030</id><snippet>master merges with remote master</snippet></ROW><ROW><id>19325030</id><snippet>$ git config --get branch.master.remote
origin
$ git config --get branch.master.merge
refs/heads/master
</snippet></ROW><ROW><id>19325030</id><snippet>branch.&lt;current branch&gt;.merge</snippet></ROW><ROW><id>19325030</id><snippet>branch.&lt;current branch&gt;.remote</snippet></ROW><ROW><id>19325030</id><snippet>remote.&lt;remote&gt;.fetch</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/master</snippet></ROW><ROW><id>19325030</id><snippet>refs/remotes/origin/master</snippet></ROW><ROW><id>19325030</id><snippet>master pushes to master</snippet></ROW><ROW><id>19325030</id><snippet>git config push.default matching</snippet></ROW><ROW><id>19325030</id><snippet>push.default</snippet></ROW><ROW><id>19325030</id><snippet>push.default</snippet></ROW><ROW><id>19325030</id><snippet>nothing</snippet></ROW><ROW><id>19325030</id><snippet>current</snippet></ROW><ROW><id>19325030</id><snippet>upstream</snippet></ROW><ROW><id>19325030</id><snippet>simple</snippet></ROW><ROW><id>19325030</id><snippet>matching</snippet></ROW><ROW><id>19325030</id><snippet>ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/master</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>120a630b0b71193a33cd033ae9ddcee1db3df07e</snippet></ROW><ROW><id>19325030</id><snippet>$ git rev-list 120a630b0b71193a33cd033ae9ddcee1db3df07e..master
eed7b697cab0cbd5babf382f720668e12a86cf2a
224384fed46e1949c88eb514fa67743be66a4c5a
ddc0aab680bab0bd6a7dde4a6ef8cb58ba0368e6
ade842c8562cdccd1e98f7ffd5149a12ddc9226c
</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>$ git rev-list master..120a630b0b71193a33cd033ae9ddcee1db3df07e
</snippet></ROW><ROW><id>19325030</id><snippet>120a630...</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>ade842c...</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>$ if git merge-base --is-ancestor 120a630 master; then echo OK; fi
OK
</snippet></ROW><ROW><id>19325030</id><snippet>ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>120a630</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>        D--E--F
       /
A--B--C
       \
        G--H
</snippet></ROW><ROW><id>19325030</id><snippet>C</snippet></ROW><ROW><id>19325030</id><snippet>F</snippet></ROW><ROW><id>19325030</id><snippet>H</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>git merge-base</snippet></ROW><ROW><id>19325030</id><snippet>master</snippet></ROW><ROW><id>19325030</id><snippet>F</snippet></ROW><ROW><id>19325030</id><snippet>D</snippet></ROW><ROW><id>19325030</id><snippet>E</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/master</snippet></ROW><ROW><id>19325030</id><snippet>120a630b0b71193a33cd033ae9ddcee1db3df07e</snippet></ROW><ROW><id>19325030</id><snippet>git rev-list</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>refs/remotes/origin/master</snippet></ROW><ROW><id>19325030</id><snippet>$ git config --get remote.origin.fetch
+refs/heads/*:refs/remotes/origin/*
</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>ls-remote</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/*</snippet></ROW><ROW><id>19325030</id><snippet>refs/remotes/origin/&lt;match&gt;</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>origin/master</snippet></ROW><ROW><id>19325030</id><snippet>git rev-list origin/master..master</snippet></ROW><ROW><id>19325030</id><snippet>D</snippet></ROW><ROW><id>19325030</id><snippet>E</snippet></ROW><ROW><id>19325030</id><snippet>F</snippet></ROW><ROW><id>19325030</id><snippet>refs/heads/*</snippet></ROW><ROW><id>19325030</id><snippet>matching</snippet></ROW><ROW><id>19325030</id><snippet>current</snippet></ROW><ROW><id>19325030</id><snippet>simple</snippet></ROW><ROW><id>19325030</id><snippet>upstream</snippet></ROW><ROW><id>19325030</id><snippet>nothing</snippet></ROW><ROW><id>19325030</id><snippet>simple</snippet></ROW><ROW><id>19325030</id><snippet>refs/remotes/</snippet></ROW><ROW><id>19325030</id><snippet>remote.&lt;em&gt;name&lt;/em&gt;.fetch</snippet></ROW><ROW><id>19325030</id><snippet>push</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>git push blarg</snippet></ROW><ROW><id>19325030</id><snippet>matching</snippet></ROW><ROW><id>19325030</id><snippet>blarg</snippet></ROW><ROW><id>19325030</id><snippet>glink</snippet></ROW><ROW><id>19325030</id><snippet>glink</snippet></ROW><ROW><id>19325030</id><snippet>glink</snippet></ROW><ROW><id>19325030</id><snippet>branch.glink.remote</snippet></ROW><ROW><id>19325030</id><snippet>remote.pushdefault</snippet></ROW><ROW><id>19325030</id><snippet>remote.&lt;em&gt;name&lt;/em&gt;.push</snippet></ROW><ROW><id>19325030</id><snippet>fetch</snippet></ROW><ROW><id>19325030</id><snippet>git fetch</snippet></ROW><ROW><id>19325030</id><snippet>git branch -vv</snippet></ROW><ROW><id>19325032</id><snippet>next()</snippet></ROW><ROW><id>19325032</id><snippet>import csv

infilename = r'c:\Python27\scripts\colnewfile.csv'
outfilename = r'c:\Python27\scripts\final.csv'

with open(infilename, 'rb') as fp_in, open(outfilename, 'wb') as fp_out:
    reader = csv.reader(fp_in, delimiter=",")
    headers = next(reader)  # read first row

    writer = csv.writer(fp_out, delimiter=",")
    writer.writerow(headers + ['email2'])

    for row in reader:
        if len(row) &gt; 3:
            # make sure there are at least 4 columns
            email = row[3].split('@', 1)[0] + '@hotmail.com'
        writer.writerow(row + [email])
</snippet></ROW><ROW><id>19325032</id><snippet>@</snippet></ROW><ROW><id>19325032</id><snippet>@hotmail.com</snippet></ROW><ROW><id>19325032</id><snippet>&gt;&gt;&gt; 'example@gmail.com'.split('@', 1)[0]
'example'
&gt;&gt;&gt; 'example@gmail.com'.split('@', 1)[0] + '@hotmail.com'
'example@hotmail.com'
</snippet></ROW><ROW><id>19325032</id><snippet>first_name,last_name,uid,email,dep_code,dep_name,email2
john,smith,jsmith,jsmith@gmail.com,finance,21230,jsmith@hotmail.com
john,king,jking,jjing@gmail.com,human resource,31230,jjing@hotmail.com
</snippet></ROW><ROW><id>19325182</id><snippet>mydic = {"printer1": "printserver1", "printer2": "printserver2"}

template = r"""
FOR /F in blah blah blah
    do something with {key}
    with the value of {value}
    blah blah blah
END FOR
"""

for key, value in mydic.iteritems():
    print template.format(key=key, value=value)
</snippet></ROW><ROW><id>19325220</id><snippet>dictionary = {'o': (5.3, 7), 'k': (5, 9.2)}        # Don't use dict as a variable name, it's a built-in

print(dictionary['o'])
# (5.3, 7)

print(dictionary['k'][1]))
# 9.2
</snippet></ROW><ROW><id>19325220</id><snippet>dictionary = {'o': {5.3, 7}, 'k': {5, 9.2}}

print(7 in dictionary['o'])
# True
</snippet></ROW><ROW><id>19325441</id><snippet>FixedThreadPool</snippet></ROW><ROW><id>19325441</id><snippet>res.get()</snippet></ROW><ROW><id>19325441</id><snippet>.apply_async()</snippet></ROW><ROW><id>19325441</id><snippet>apply()</snippet></ROW><ROW><id>19325441</id><snippet>None</snippet></ROW><ROW><id>19325441</id><snippet>{}</snippet></ROW><ROW><id>19325441</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>19325441</id><snippet>import multiprocessing, time

def getlock(lck):
    global iolock
    iolock = lck

def printStuff(number):
    with iolock:
        print number
    if number % 2:
        time.sleep(0.5)
    return number*number

def execute():
    def resultAggregator(n):
        with iolock:
            print 'aggregator called...'
        a.append(n)

    for i in range(34):
        pool.apply_async(printStuff, (i,), callback=resultAggregator)
        with iolock:
            print "called for ", i

if __name__ == "__main__":
    a = []
    iolock = multiprocessing.Lock()
    pool = multiprocessing.Pool(5, getlock, (iolock,))   
    execute()
    pool.close()
    pool.join()
    print a
</snippet></ROW><ROW><id>19325441</id><snippet>None</snippet></ROW><ROW><id>19325441</id><snippet>multiprocessing</snippet></ROW><ROW><id>19325441</id><snippet>.apply_async()</snippet></ROW><ROW><id>19325441</id><snippet>error_callback</snippet></ROW><ROW><id>19325441</id><snippet>def ouch(e):
    raise e
</snippet></ROW><ROW><id>19325441</id><snippet>pool.apply_async(printStuff, (i,), None, resultAggregator, ouch)
</snippet></ROW><ROW><id>19325441</id><snippet>ouch()</snippet></ROW><ROW><id>19325441</id><snippet>TypeError: printStuff() argument after ** must be a mapping, not NoneType
</snippet></ROW><ROW><id>19325441</id><snippet>iolock</snippet></ROW><ROW><id>19325441</id><snippet>iolock</snippet></ROW><ROW><id>19325441</id><snippet>iolock = multiprocessing.Lock()
</snippet></ROW><ROW><id>19325441</id><snippet>iiolock = multiprocessing.Lock()
</snippet></ROW><ROW><id>19325441</id><snippet>Traceback (most recent call last):
  ...
    pool = multiprocessing.Pool(5, getlock, (iolock,))
NameError: global name 'iolock' is not defined
</snippet></ROW><ROW><id>19325441</id><snippet>pool = ...</snippet></ROW><ROW><id>19325441</id><snippet>iiolock</snippet></ROW><ROW><id>19325441</id><snippet>resultAggregator</snippet></ROW><ROW><id>19325441</id><snippet>iolock</snippet></ROW><ROW><id>19325441</id><snippet>Exception in thread Thread-3:
Traceback (most recent call last):
  ...
  File "mpool.py", line 19, in resultAggregator
    with iolock:
NameError: global name 'iolock' is not defined
</snippet></ROW><ROW><id>19325441</id><snippet>def</snippet></ROW><ROW><id>19325441</id><snippet>printStuff</snippet></ROW><ROW><id>19325441</id><snippet>def printstuff</snippet></ROW><ROW><id>19325441</id><snippet>execute()</snippet></ROW><ROW><id>19325441</id><snippet>def</snippet></ROW><ROW><id>19325441</id><snippet>execute()</snippet></ROW><ROW><id>19325441</id><snippet>    pool.apply_async(printStuff, (i,), callback=resultAggregator)
</snippet></ROW><ROW><id>19325441</id><snippet>printStuff</snippet></ROW><ROW><id>19325441</id><snippet>_pickle.PicklingError: Can't pickle &lt;class 'function'&gt;: attribute lookup builtins.function failed
</snippet></ROW><ROW><id>19325441</id><snippet>class</snippet></ROW><ROW><id>19325441</id><snippet>global</snippet></ROW><ROW><id>19325441</id><snippet>nonlocal</snippet></ROW><ROW><id>19325441</id><snippet>execute()</snippet></ROW><ROW><id>19325441</id><snippet>iiolock</snippet></ROW><ROW><id>19325441</id><snippet>execute()</snippet></ROW><ROW><id>19325441</id><snippet>iolock</snippet></ROW><ROW><id>19325441</id><snippet>main()</snippet></ROW><ROW><id>19325441</id><snippet>iolock</snippet></ROW><ROW><id>19325441</id><snippet>multiprocessing</snippet></ROW><ROW><id>19325441</id><snippet>mp.Lock()</snippet></ROW><ROW><id>19325441</id><snippet>mp.Pool()</snippet></ROW><ROW><id>19325441</id><snippet>pool = multiprocessing.Pool(5, getlock, (iolock,)) 
                                         ^^^^^^
</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp.Lock()</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp.Value</snippet></ROW><ROW><id>19325441</id><snippet>mp.Array</snippet></ROW><ROW><id>19325441</id><snippet>multiprocessing.sharedctypes</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>mp</snippet></ROW><ROW><id>19325441</id><snippet>.put()</snippet></ROW><ROW><id>19325441</id><snippet>mp.Queue</snippet></ROW><ROW><id>19325441</id><snippet>.get()</snippet></ROW><ROW><id>19325619</id><snippet>done()</snippet></ROW><ROW><id>19325619</id><snippet>form.save()</snippet></ROW><ROW><id>19325619</id><snippet>class MyWizard(SessionWizardView):
    file_storage = FileSystemStorage(location=os.path.join(settings.MEDIA_ROOT))
    def done(self, form_list, **kwargs):
        ... 
        #existing code

        if not thing:
            instance = Thing()

        #this is moved out of if
        for form in form_list:
            form.save(instance)

        instance.user = self.request.user
        instance.save()
        return render_to_response('wizard-done.html', {
                'form_data': [form.cleaned_data for form in form_list],})
</snippet></ROW><ROW><id>19325843</id><snippet># If the PE file was loaded using the fast_load=True argument, we will need to parse the data directories:
pe.parse_data_directories()

for entry in pe.DIRECTORY_ENTRY_IMPORT:
  print entry.dll
  for imp in entry.imports:
    print '\t', hex(imp.address), imp.name
</snippet></ROW><ROW><id>19325843</id><snippet>for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
  print hex(pe.OPTIONAL_HEADER.ImageBase + exp.address), exp.name, exp.ordinal
</snippet></ROW><ROW><id>19325879</id><snippet>raw_data = """&lt;?xml version="1.0"?&gt;
&lt;rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dbp="http://dbpedia.org/ontology/"
xmlns:dbprop="http://dbpedia.org/property/"
xmlns:foaf="http://xmlns.com/foaf/0.1/"&gt;
    &lt;rdf:Description rdf:about="http://dbpedia.org/page/Johann_Sebastian_Bach"&gt;
      &lt;dbp:birthDate&gt;1685-03-21&lt;/dbp:birthDate&gt;
      &lt;dbp:deathDate&gt;1750-07-28&lt;/dbp:deathDate&gt;
      &lt;dbp:birthPlace&gt;Eisenach&lt;/dbp:birthPlace&gt;
      &lt;dbp:deathPlace&gt;Leipzig&lt;/dbp:deathPlace&gt;
      &lt;dbprop:shortDescription&gt;German composer and organist&lt;/dbprop:shortDescription&gt;
      &lt;foaf:name&gt;Johann Sebastian Bach&lt;/foaf:name&gt;
      &lt;rdf:type rdf:resource="http://dbpedia.org/class/yago/GermanComposers"/&gt;
      &lt;rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Person"/&gt;
    &lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;"""
import rdflib
graph = rdflib.Graph()
graph.parse(data=raw_data)

output = []

for s, p, o in graph:
    if type(o) == rdflib.term.Literal:
        output.append(o.toPython())

print ', '.join(output)
</snippet></ROW><ROW><id>19325926</id><snippet>from gi.repository import Gtk, GLib

class MySpawned(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)

        vb = Gtk.VBox(False, 5)
        self.tw = Gtk.TextView()
        bt = Gtk.Button('Run')
        bt.connect('clicked', self.process)

        vb.pack_start(self.tw, True, True, 0)
        vb.pack_start(bt, False, False, 0)

        self.add(vb)
        self.set_size_request(200, 300)
        self.connect('delete-event', Gtk.main_quit)
        self.show_all()

    def run(self):
        Gtk.main()

    def process(self, widget, data=None):
        params = ['python', '-h']

        def write_to_textview(io, condition):
            print condition
            if condition is GLib.IO_IN:
               line = io.readline()
               self.tw.props.buffer.insert_at_cursor(line)
               return True
            elif condition is GLib.IO_HUP|GLib.IO_IN:
                GLib.source_remove(self.source_id)
                return False

        self.source_id = None

        pid, stdin, stdout, stderr = GLib.spawn_async(params,
                                        flags=GLib.SpawnFlags.SEARCH_PATH,                                       
                                        standard_output=True)

        io = GLib.IOChannel(stdout)

        self.source_id = io.add_watch(GLib.IO_IN|GLib.IO_HUP,
                                 write_to_textview,
                                 priority=GLib.PRIORITY_HIGH)
if __name__ == '__main__':
    s = MySpawned()
    s.run()
</snippet></ROW><ROW><id>19325948</id><snippet>a_variable = int(rssi.communicate()[0].split()[-1])</snippet></ROW><ROW><id>19326273</id><snippet>:first-of-type</snippet></ROW><ROW><id>19326273</id><snippet>:first-child</snippet></ROW><ROW><id>19326273</id><snippet>#product-list &gt; :first-child
</snippet></ROW><ROW><id>19326312</id><snippet>In [21]: index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
                                    ['one', 'two', 'three']],
                                    labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
                                    [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
                                    names=['foo', 'bar'])

In [22]: df_mi = DataFrame(np.random.randn(10, 3), index=index,columns=['A', 'B', 'C'])

In [23]: df_mi
Out[23]: 
                  A         B         C
foo bar                                
foo one    0.385666 -0.013980  1.787451
    two   -0.190728  0.574169 -0.115581
    three  0.823308  1.845204  0.603430
bar one   -0.863913 -1.544945 -0.598322
    two   -0.941484  1.080205 -0.086216
baz two   -0.510657  0.205781  1.747204
    three -1.322135 -1.131720 -0.838862
qux one    0.346890 -0.905762  0.348206
    two   -1.378711 -0.751701  2.229486
    three  0.120956 -0.535718 -0.344610
</snippet></ROW><ROW><id>19326312</id><snippet>format='table'</snippet></ROW><ROW><id>19326312</id><snippet>In [24]: df_mi.to_hdf('test.h5','df_mi',table=True,mode='w')
</snippet></ROW><ROW><id>19326312</id><snippet>In [25]: store = pd.HDFStore('test.h5')

In [26]: store.select_column('df_mi','foo')
Out[26]: 
0    foo
1    foo
2    foo
3    bar
4    bar
5    baz
6    baz
7    qux
8    qux
9    qux
dtype: object

In [30]: store.select_column('df_mi','bar')
Out[30]: 
0      one
1      two
2    three
3      one
4      two
5      two
6    three
7      one
8      two
9    three
dtype: object

In [31]: store.close()
</snippet></ROW><ROW><id>19326355</id><snippet>join</snippet></ROW><ROW><id>19326355</id><snippet>def reverse(word):
    index = len(word)-1                  
    result = []      
    while index &gt;= 0: 
        result.append(word[index]) 
        index -= 1 
    return "".join(result)
</snippet></ROW><ROW><id>19326355</id><snippet>def reverse(word):
    word_list = []
    for i in range(len(word)-1, -1, -1):
        word_list.append(word[i])
    return "".join(word_list)

def reverse(word):
    return "".join(word[i] for i in range(len(word)-1, -1, -1))
</snippet></ROW><ROW><id>19326355</id><snippet>def reverse(word):
    return "".join(reversed("abc"))
</snippet></ROW><ROW><id>19326355</id><snippet>def reverse(word):
    return word[::-1]
</snippet></ROW><ROW><id>19326355</id><snippet>reverse =lambda s:s and s[-1]+reverse(s[:-1])or s
</snippet></ROW><ROW><id>19326355</id><snippet>def reverse(word):
    word_list = []
    for i in word:
        word_list.insert(0, word[i])
    return "".join(word_list)
</snippet></ROW><ROW><id>19326439</id><snippet>shell=True</snippet></ROW><ROW><id>19326439</id><snippet>Process=Popen('./childdir/execute.sh %s %s' % (str(var1),str(var2),), shell=True)
</snippet></ROW><ROW><id>19326439</id><snippet>Popen</snippet></ROW><ROW><id>19326439</id><snippet>stdin=</snippet></ROW><ROW><id>19326439</id><snippet>stderr=</snippet></ROW><ROW><id>19326439</id><snippet>&gt;</snippet></ROW><ROW><id>19326439</id><snippet>check_output</snippet></ROW><ROW><id>19326439</id><snippet>Popen</snippet></ROW><ROW><id>19326439</id><snippet>output = subprocess.check_output(['./childdir/execute.sh',str(var1),str(var2)])
print(output)
</snippet></ROW><ROW><id>19326439</id><snippet>check_output</snippet></ROW><ROW><id>19326439</id><snippet>check_call</snippet></ROW><ROW><id>19326439</id><snippet>shell=</snippet></ROW><ROW><id>19326439</id><snippet>Popen</snippet></ROW><ROW><id>19326513</id><snippet>shape</snippet></ROW><ROW><id>19326513</id><snippet>image.shape[:2] # gives you (height, width) tuple
</snippet></ROW><ROW><id>19326513</id><snippet>image.shape[1::-1] # gives you (width, height) tuple
</snippet></ROW><ROW><id>19326645</id><snippet>i = 1

file.write('' + linecache.getline('support_files/sub_page_top_links.txt', i) + '')
i += 1
</snippet></ROW><ROW><id>19326864</id><snippet>currentHelp = base64.b64decode(helpData.read())
</snippet></ROW><ROW><id>19326879</id><snippet>params = {categories: "categories", interests: "interests",
        shops_at: "shops_at", eats_at: "eats_at"}

for k in params:
    try:
        value = self.getList(dict[k])
    except KeyError:
        print "No %s found!" % params[k]
</snippet></ROW><ROW><id>19326927</id><snippet>rounds = 0  # at the top
</snippet></ROW><ROW><id>19326927</id><snippet>global rounds 
</snippet></ROW><ROW><id>19326969</id><snippet>quotes</snippet></ROW><ROW><id>19326969</id><snippet>candlestick</snippet></ROW><ROW><id>19327046</id><snippet>&gt;&gt;&gt; from mock import Mock
&gt;&gt;&gt; from any_valid import AnyValid, Int, OneOf
&gt;&gt;&gt; valid_bar = {
...     'baz': AnyValid(Int(min=-3, max=14)),
...     'qux': AnyValid(OneOf(['yes', 'no'])),
...     }
&gt;&gt;&gt; mock = Mock(return_value=None)
&gt;&gt;&gt; mock('foo', bar={'baz': 4, 'qux': 'yes'})
&gt;&gt;&gt; mock.assert_called_once_with('foo', bar=valid_bar)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19327332</id><snippet>&gt;&gt;&gt; T = (1, 2, 3)
&gt;&gt;&gt; struct.pack('H' * len(T), *T)
'\x01\x00\x02\x00\x03\x00'
</snippet></ROW><ROW><id>19327332</id><snippet>&gt;&gt;&gt; "01020304deadbeef".decode('hex')
'\x01\x02\x03\x04\xde\xad\xbe\xef'
</snippet></ROW><ROW><id>19327342</id><snippet>&gt;&gt;&gt; try:
...   foo
... except None as e:
...   pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: name 'foo' is not defined
</snippet></ROW><ROW><id>19327342</id><snippet>except</snippet></ROW><ROW><id>19327342</id><snippet>BaseException</snippet></ROW><ROW><id>19327518</id><snippet>s1="This is a text with mathjax like $1&lt;2$, let's see if this works till here $2&gt;1$!"
import lxml.html.soupparser as sp
from lxml import html  
soup1 = sp.fromstring(s1)
print sp.unescape(html.tostring(soup1, encoding='unicode'))
</snippet></ROW><ROW><id>19327518</id><snippet>&lt;html&gt;This is a text with mathjax like $1&lt;2$, let's see if this works till here $2&gt;1$!&lt;/html&gt;
</snippet></ROW><ROW><id>19327712</id><snippet>def hi():
#    something
#    something
    hi.bye = 5
    sigh = 10

hi()
print hi.bye
</snippet></ROW><ROW><id>19327986</id><snippet>'maya.exe -command \"setProject \\\"'+dir+'\\\";\"'
</snippet></ROW><ROW><id>19328004</id><snippet>floatPtr = ctypes.cast(dataC, ctypes.POINTER(ctypes.c_float))
</snippet></ROW><ROW><id>19328004</id><snippet>floatList = [floatPtr[i] for i in range(arrayLength)]
</snippet></ROW><ROW><id>19328004</id><snippet>arrayLength</snippet></ROW><ROW><id>19328004</id><snippet>size / ctypes.sizeof(ctypes.c_float)</snippet></ROW><ROW><id>19328073</id><snippet>va</snippet></ROW><ROW><id>19328073</id><snippet>vb</snippet></ROW><ROW><id>19328073</id><snippet>[int(va)][int(vb)]</snippet></ROW><ROW><id>19328161</id><snippet>user_blogs = Blog.objects.filter(owner=user)

user_blogs_with_article = user_blogs.filter(articles=article)
</snippet></ROW><ROW><id>19328309</id><snippet>data.append([column[0]])
</snippet></ROW><ROW><id>19328356</id><snippet>mainurl, query = l.split("?")
queryvars = query.split("&amp;")
</snippet></ROW><ROW><id>19328356</id><snippet>tokens = [toke2.split("&amp;") for toke2 in l.split("?")]
</snippet></ROW><ROW><id>19328356</id><snippet>tokens = [token for toke2 in l.split("?")
          for token in toke2.split("&amp;")]
</snippet></ROW><ROW><id>19328472</id><snippet>mprotect</snippet></ROW><ROW><id>19328472</id><snippet>#!/usr/bin/python
import ctypes
shellcode_data = (b"\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53"
    b"\x48\x89\xe7\x68\x2d\x63\x00\x00\x48\x89\xe6\x52\xe8\x10\x00"
    b"\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x77\x68\x6f\x61"
    b"\x6d\x69\x00\x56\x57\x48\x89\xe6\x0f\x05")

shellcode = ctypes.c_char_p(shellcode_data)
function = ctypes.cast(shellcode, ctypes.CFUNCTYPE(None))

addr = ctypes.cast(function, ctypes.c_void_p).value
libc = ctypes.CDLL('libc.so.6')
pagesize = libc.getpagesize()
addr_page = (addr // pagesize) * pagesize
for page_start in range(addr_page, addr + len(shellcode_data), pagesize):
    assert libc.mprotect(page_start, pagesize, 0x7) == 0

function()
</snippet></ROW><ROW><id>19328542</id><snippet>dataset.rename(columns={typo: 'Address' for typo in AddressCol}, inplace=True)
</snippet></ROW><ROW><id>19328693</id><snippet>is</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>True</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>True</snippet></ROW><ROW><id>19328693</id><snippet>if grafo.node.index([int(va),int(vb)]):
</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>False</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>if</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>try:
    i = grafo.node.index([int(va), int(vb)])
except ValueError:
    Beta.criararesta(grafo,va,vb)
    print grafo.node
    # maybe assign i to something useful here, or None, depending on what you're doing with it
else:
    print("Arco já existe")
</snippet></ROW><ROW><id>19328693</id><snippet>except</snippet></ROW><ROW><id>19328693</id><snippet>ValueError</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>except ValueError:
    Beta.criararesta(grafo,va,vb)
</snippet></ROW><ROW><id>19328693</id><snippet>try/except</snippet></ROW><ROW><id>19328693</id><snippet>int</snippet></ROW><ROW><id>19328693</id><snippet>ValueError</snippet></ROW><ROW><id>19328693</id><snippet>va</snippet></ROW><ROW><id>19328693</id><snippet>vb</snippet></ROW><ROW><id>19328693</id><snippet>iva = int(va)
ivb = int(vb)
try:
    i = grafo.node.index([iva, ivb])
except ValueError:
    Beta.criararesta(grafo, va, vb) # or possibly (grafo, iva, ivb), depends on the implementation
</snippet></ROW><ROW><id>19328693</id><snippet>in</snippet></ROW><ROW><id>19328693</id><snippet>index</snippet></ROW><ROW><id>19328693</id><snippet>if [int(va),int(vb)] in grafo.node:
    print("Arco já existe")
else:
    Beta.criararesta(grafo,va,vb)
    print grafo.node
</snippet></ROW><ROW><id>19328764</id><snippet>d = dict(zip(keys, valuetuple))
</snippet></ROW><ROW><id>19328764</id><snippet>=</snippet></ROW><ROW><id>19328764</id><snippet>.update(…)</snippet></ROW><ROW><id>19328764</id><snippet>mydict.update(dict(zip('abd', mytuple))))
</snippet></ROW><ROW><id>19328764</id><snippet>setitems(d, ('a', 'b', 'd'), mytuple)
</snippet></ROW><ROW><id>19328805</id><snippet>def chunked_topsort(relations):
    # `relations` is an iterable producing relations.
    # A relation is a sequence, interpreted to mean
    # relation[0] &lt; relation[1] &lt; relation[2] &lt; ...
    # The result is a list such that
    # result[i] is the set of elements assigned to i.
    from collections import defaultdict
    succs = defaultdict(set)    # new empty set is default
    npreds = defaultdict(int)   # 0 is default
    allelts = set()
    nopreds = set()

    def add_elt(u):
        allelts.add(u)
        if npreds[u] == 0:
            nopreds.add(u)

    for r in relations:
        u = r[0]
        add_elt(u)
        for i in range(1, len(r)):
            v = r[i]
            add_elt(v)
            if v not in succs[u]:
                succs[u].add(v)
                npreds[v] += 1
                nopreds.discard(v)
            u = v
    result = []
    while nopreds:
        result.append(nopreds)
        allelts -= nopreds
        next_nopreds = set()
        for u in nopreds:
            for v in succs[u]:
                npreds[v] -= 1
                assert npreds[v] &gt;= 0
                if npreds[v] == 0:
                    next_nopreds.add(v)
        nopreds = next_nopreds
    if allelts:
        raise ValueError("elements in cycles %s" % allelts)
    return result
</snippet></ROW><ROW><id>19328805</id><snippet>&gt;&gt;&gt; print chunked_topsort(['ac', 'bc', 'bde', 'be', 'fbcg'])
[set(['a', 'f']), set(['b']), set(['c', 'd']), set(['e', 'g'])]
</snippet></ROW><ROW><id>19328805</id><snippet>chunked_topsort()</snippet></ROW><ROW><id>19328805</id><snippet>Version B</snippet></ROW><ROW><id>19328805</id><snippet>worst chunked  0.007 B  0.129 B/chunked  19.79
best  chunked  0.007 B  0.110 B/chunked  16.85
avg   chunked  0.006 B  0.118 B/chunked  19.06

worst chunked  0.007 B  0.127 B/chunked  18.25
best  chunked  0.006 B  0.103 B/chunked  17.16
avg   chunked  0.006 B  0.119 B/chunked  18.86

worst chunked  0.007 B  0.132 B/chunked  20.20
best  chunked  0.007 B  0.105 B/chunked  16.04
avg   chunked  0.007 B  0.113 B/chunked  17.32
</snippet></ROW><ROW><id>19328805</id><snippet>range(n)</snippet></ROW><ROW><id>19328805</id><snippet>n</snippet></ROW><ROW><id>19328805</id><snippet>chunked_topsort()</snippet></ROW><ROW><id>19328805</id><snippet>def ct_special(relations, n):
    # `relations` is an iterable producing relations.
    # A relation is a sequence, interpreted to mean
    # relation[0] &lt; relation[1] &lt; relation[2] &lt; ...
    # All elements are in range(n).
    # The result is a vector of length n such that
    # result[i] is the ordinal assigned to i, or
    # result[i] is -1 if i didn't appear in the relations.
    succs = [[] for i in xrange(n)]
    npreds = [-1] * n
    nopreds = [-1] * n
    numnopreds = 0

    def add_elt(u):
        if not 0 &lt;= u &lt; n:
            raise ValueError("element %s out of range" % u)
        if npreds[u] &lt; 0:
            npreds[u] = 0

    for r in relations:
        u = r[0]
        add_elt(u)
        for i in range(1, len(r)):
            v = r[i]
            add_elt(v)
            succs[u].append(v)
            npreds[v] += 1
            u = v

    result = [-1] * n
    for u in xrange(n):
        if npreds[u] == 0:
            nopreds[numnopreds] = u
            numnopreds += 1

    ordinal = nopreds_start = 0
    while nopreds_start &lt; numnopreds:
        next_nopreds_start = numnopreds
        for i in xrange(nopreds_start, numnopreds):
            u = nopreds[i]
            result[u] = ordinal
            for v in succs[u]:
                npreds[v] -= 1
                assert npreds[v] &gt;= 0
                if npreds[v] == 0:
                    nopreds[numnopreds] = v
                    numnopreds += 1
        nopreds_start = next_nopreds_start
        ordinal += 1
    if any(count &gt; 0 for count in npreds):
        raise ValueError("elements in cycles")
    return result
</snippet></ROW><ROW><id>19328855</id><snippet>np.any</snippet></ROW><ROW><id>19328855</id><snippet>np.any(np.absolute(my_array) &lt; eps)
</snippet></ROW><ROW><id>19328897</id><snippet>^(\d+) (.+) (\d+\.\d+|-|\d+) (\d+\.\d+|-|\d+)$</snippet></ROW><ROW><id>19328914</id><snippet>print line.decode('utf-16-le').split()
</snippet></ROW><ROW><id>19328914</id><snippet>file = io.open('data.txt','r', encoding='utf-16-le')
</snippet></ROW><ROW><id>19328927</id><snippet>namedtuple</snippet></ROW><ROW><id>19328927</id><snippet>collections</snippet></ROW><ROW><id>19328927</id><snippet>csv</snippet></ROW><ROW><id>19328927</id><snippet>from collections import namedtuple
import csv

Person = namedtuple('Person', ('name', 'gender', 'occurences')) # create our type

def main():
    filename = 'yob' + input('Enter year: ') + '.txt'
    with open(filename, newlines="") as f: # parameters differ a bit in Python 2
        reader = csv.reader(f) # the reader handles splitting the lines for you
        lst = [Person(*row) for row in reader]
</snippet></ROW><ROW><id>19328927</id><snippet>csv</snippet></ROW><ROW><id>19328927</id><snippet>open</snippet></ROW><ROW><id>19328927</id><snippet>'rb'</snippet></ROW><ROW><id>19328927</id><snippet>newlines</snippet></ROW><ROW><id>19328927</id><snippet>Person</snippet></ROW><ROW><id>19328927</id><snippet>&gt;&gt;&gt; print(lst)    
[Person(name='jon', gender='M', occurences=190203)]
</snippet></ROW><ROW><id>19328927</id><snippet>list</snippet></ROW><ROW><id>19328927</id><snippet>tuple</snippet></ROW><ROW><id>19328927</id><snippet>&gt;&gt;&gt; jon = lst[0]
&gt;&gt;&gt; print(jon[0])
jon
&gt;&gt;&gt; print(jon.gender)
M
</snippet></ROW><ROW><id>19328997</id><snippet>import csv
import itertools
from operator import itemgetter
import StringIO

def filter_data(data):
    for classname, group in itertools.groupby(data, itemgetter(2)):
        filtered_group = [line for line in group]
        new_count = len(filtered_group)
        for line in filtered_group:
            if line[5] == "Count":
                line[5] = "Counter"
            else:
                line[5] = new_count
            yield ','.join(map(str, line)) + '\n'

output = StringIO.StringIO()

with open('../main.csv', 'rb') as f_in:
    reader = csv.reader(f_in)
    output.writelines(filter_data(reader))

contents = output.getvalue()
output.close()

with open('../main.csv', 'wb') as f_out: 
    f_out.writelines(contents)
</snippet></ROW><ROW><id>19329084</id><snippet>for line in f:
    items = line.split()
    key, values = int(items[0]), items[1:]
    my_dict.setdefault(key, []).extend(values)
</snippet></ROW><ROW><id>19329128</id><snippet>patternProperties</snippet></ROW><ROW><id>19329128</id><snippet>{
    "type": "object",
    "patternProperties": {
        "^[a-zA-Z]+(-[a-zA-Z]+)*$": {...}
    },
    "additionalProperties": false
}
</snippet></ROW><ROW><id>19329148</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; pattern = "\s(\w*?(?P&lt;ext&gt;\w)(?P=ext){2,}\w*?)\W"
&gt;&gt;&gt; s1 = "Bob is the bessssst."
&gt;&gt;&gt; s2 = "Bob is the bessssst ."
&gt;&gt;&gt; ext_re = re.compile(pattern)
&gt;&gt;&gt; m = ext_re.search(s1)
&gt;&gt;&gt; m.groups()
('bessssst', 's')
&gt;&gt;&gt; m = ext_re.search(s2)
&gt;&gt;&gt; m.groups()
('bessssst', 's')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19329195</id><snippet>(?&lt;!\\)(?:\\\\)*".*?(?&lt;!\\)(?:\\\\)*"
</snippet></ROW><ROW><id>19329195</id><snippet>(?&lt;!\\)    Matches if the preceding char is not a backslash
(?:\\\\)*  Matches 0 or more occurrences of two backslashes
"          Matches a double quote
.*?        Matches any character except \n (0 or more times)

Repeat lines 1-3
</snippet></ROW><ROW><id>19329217</id><snippet>&gt;&gt;&gt; re.findall(r"([a-zA-Z]+[1-5]+)", "ape4banana3")
['ape4', 'banana3']
&gt;&gt;&gt; re.findall(r"([a-zA-Z]+[1-5]+)", "ape4 banana3")
['ape4', 'banana3']
</snippet></ROW><ROW><id>19329217</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>19329296</id><snippet>TypeError: unbound method all() must be called with Bob instance as first argument (got nothing instead)</snippet></ROW><ROW><id>19329296</id><snippet>all()</snippet></ROW><ROW><id>19329296</id><snippet>all()</snippet></ROW><ROW><id>19329296</id><snippet>@classmethod
def all(cls, keys_only=False):
    qry = super(Bob,cls).all(keys_only=keys_only)
    qry.filter(&lt;some filter&gt;)
    return qry
</snippet></ROW><ROW><id>19329296</id><snippet>@classmethod
def filtered_all(cls,keys_only=False) 
    qry = cls.all(keys_only)
    qry.filter('some boolean operation')
    return qry
</snippet></ROW><ROW><id>19329674</id><snippet>distutils</snippet></ROW><ROW><id>19329674</id><snippet>setup.py</snippet></ROW><ROW><id>19329674</id><snippet>setup.py</snippet></ROW><ROW><id>19329674</id><snippet>setup.py</snippet></ROW><ROW><id>19329674</id><snippet>python setup.py install</snippet></ROW><ROW><id>19329747</id><snippet>def normalise_repeatable_options(options):
    parsed = []
    flat = defaultdict(list)

    for o in options:
        if isinstance(o, Option):
            # For the first instance of this object, add a placemarker
            if o.long not in flat:
                parsed.append(o.long)

            flat[o.long].append(o)
        else:
            parsed.append(o)

    return [Option.combine(*tuple(flat[o])) if isinstance(o, str) else o for o in parsed]
</snippet></ROW><ROW><id>19329747</id><snippet>parsed</snippet></ROW><ROW><id>19329747</id><snippet>Option</snippet></ROW><ROW><id>19329747</id><snippet>str</snippet></ROW><ROW><id>19329759</id><snippet>dist_2</snippet></ROW><ROW><id>19329759</id><snippet>&gt;&gt;&gt; dist_1.shape
(300, 2, 100)
&gt;&gt;&gt; %timeit dist_2 = np.array([i[0]*i[1] for i in dist_1])
1000 loops, best of 3: 1.35 ms per loop
&gt;&gt;&gt; %timeit dist_2 = dist_1.prod(axis=1)
10000 loops, best of 3: 116 µs per loop
&gt;&gt;&gt; np.allclose(np.array([i[0]*i[1] for i in dist_1]), dist_1.prod(axis=1))
True
</snippet></ROW><ROW><id>19329759</id><snippet>dist_1</snippet></ROW><ROW><id>19329759</id><snippet>&gt;&gt;&gt; %timeit (-0.5*(wdiff*wdiff)) / w
1000 loops, best of 3: 467 µs per loop
&gt;&gt;&gt; %timeit np.exp((-0.5*(wdiff*wdiff)))/w
100 loops, best of 3: 3.3 ms per loop
</snippet></ROW><ROW><id>19329778</id><snippet>pip</snippet></ROW><ROW><id>19329778</id><snippet>pip freeze &gt; requirements.txt 
</snippet></ROW><ROW><id>19329807</id><snippet>a_list</snippet></ROW><ROW><id>19329807</id><snippet>&gt;&gt;&gt; c ={}
&gt;&gt;&gt; c[2,3] = 4
&gt;&gt;&gt; c
{(2,3):4)}
</snippet></ROW><ROW><id>19329833</id><snippet>re.compile</snippet></ROW><ROW><id>19329833</id><snippet>re.escape</snippet></ROW><ROW><id>19329833</id><snippet>word</snippet></ROW><ROW><id>19329833</id><snippet>import re
word = 'Par(ens'
regex = re.compile("\\b" + re.escape(word) + "\\b")
</snippet></ROW><ROW><id>19329891</id><snippet>self</snippet></ROW><ROW><id>19329891</id><snippet>def startElement(self, name, attrs):

    if name == "incollection":
        self.incollection = true
        self.publication["pubkey"] = attrs.getValue("pubkey")
        self.pubidCounter += 1

    if(name == "title" and incollection):
        self.publication["pubtype"] = "incollection"
</snippet></ROW><ROW><id>19330132</id><snippet>with open("Output.txt", "w") as outputFile:
    print &gt;&gt;outputFile, foo()
</snippet></ROW><ROW><id>19330132</id><snippet>with</snippet></ROW><ROW><id>19330185</id><snippet>def main():
    name = input("What is your first name?: ")
    name2 = input("What is your last name?: ")
    mass = float(input("What is your weight in kilograms?: "))
    height = float(input("What is your height in meters?: "))
    #mass = float(kg) #not needed
    #height = float(meters) #not needed
    result = health(mass, height)
    #printing based on the return value. result[0] is bmi, and so on.

    print("%s, %s (BMI: %d, Ponderal Index: %d, Rohrer's Index: %d"%(name2,name,health[0],health[1],health[2]))

def bmi (mass, height):
    result = mass / (height ** 2)
    return result

def ponderal (mass, height):
    result = mass / height ** 3
    return result

def rohrer(mass, height):
    result = (mass * 10000) / ((height * 100) ** 3)
    return result

def health (mass, height):
    #calling the functions
    bmi = bmi(mass, height)  #store the returned value to a variable
    ponderal = ponderal(mass, height)
    rohrer = rohrer(mass, height)
    return [bmi,ponderal,rohrer] #return it as a list.
</snippet></ROW><ROW><id>19330185</id><snippet>&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
What is your first name?: Akhyar
What is your last name?: Kamili
What is your weight in kilograms?: 50
What is your height in meters?: 1.7
Kamili, Akhyar (BMI: 17.301038062283737 , Ponderal Index: 10.177081213108082 , Rohrer's Index: 0.1017708121310808 , )
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19330249</id><snippet>defaultdict</snippet></ROW><ROW><id>19330249</id><snippet>from collections import defaultdict

d = defaultdict(int)

for subdict in dict_list:
    for k,v in subdict.items():
        d[k] += int(v)
</snippet></ROW><ROW><id>19330249</id><snippet>int(v)</snippet></ROW><ROW><id>19330249</id><snippet>d
Out[16]: defaultdict(&lt;class 'int'&gt;, {'orange': 11, 'blue': 5, 'pink': 10, 'red': 5, 'brown': 4})

[dict(d)]
Out[17]: [{'blue': 5, 'brown': 4, 'orange': 11, 'pink': 10, 'red': 5}]
</snippet></ROW><ROW><id>19330496</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; items = ['1', 'hello', '524', '65.23']
&gt;&gt;&gt; def convert(x):
        try:
            return ast.literal_eval(x)
        except:
            return x


&gt;&gt;&gt; [convert(x) for x in items]
[1, 'hello', 524, 65.23]
</snippet></ROW><ROW><id>19330549</id><snippet>p = 32
conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
             VALUES(1,'Paul',?,'California',20000.00)", [p])
</snippet></ROW><ROW><id>19330549</id><snippet>.execute(operation [, parameters])
</snippet></ROW><ROW><id>19330673</id><snippet>latin1</snippet></ROW><ROW><id>19330673</id><snippet>line = 'Auf der gr\xfcnen Wiese (1953)'
name = line.decode('latin1')
</snippet></ROW><ROW><id>19330673</id><snippet>f = codecs.open(path, 'r', 'latin1')
name = f.readline().strip()
</snippet></ROW><ROW><id>19330727</id><snippet>list_display</snippet></ROW><ROW><id>19330727</id><snippet>readonly_fields</snippet></ROW><ROW><id>19330727</id><snippet>admin_order_field</snippet></ROW><ROW><id>19330727</id><snippet>list_display</snippet></ROW><ROW><id>19330727</id><snippet>readonly_fields</snippet></ROW><ROW><id>19330727</id><snippet>admin_order_field</snippet></ROW><ROW><id>19330727</id><snippet>class UniversityContact(models.Model):
    # as above, plus:
    def abbrev(self):
        return self.university.abbrev
    abbrev.admin_order_field = 'university__abbrev'
</snippet></ROW><ROW><id>19330727</id><snippet>short_description</snippet></ROW><ROW><id>19330727</id><snippet>    abbrev.short_description = 'abbreviation'
</snippet></ROW><ROW><id>19330727</id><snippet>list_filter</snippet></ROW><ROW><id>19330727</id><snippet>    list_filter = ('university__region',)
</snippet></ROW><ROW><id>19330786</id><snippet>import gnupg

gpg_home = "/path/to/gnupg/home"
gpg = gnupg.GPG(gnupghome=gpg_home)

data = raw_input("Enter data to encrypt: ")
rkey = raw_input("Enter recipient's key ID: ")

encrypted_ascii_data = gpg.encrypt(data, rkey)

print(encrypted_ascii_data)
</snippet></ROW><ROW><id>19330786</id><snippet>import gnupg

gpg_home = "~/.gnupg"
gpg = gnupg.GPG(gnupghome=gpg_home)

data = raw_input("Enter full path of file to encrypt: ")
rkeys = raw_input("Enter key IDs separated by spaces: ")
savefile = data+".asc"

afile = open(data, "rb")
encrypted_ascii_data = gpg.encrypt_file(afile, rkeys.split(), always_trust=True, output=savefile)
afile.close()
</snippet></ROW><ROW><id>19330878</id><snippet>  blanks = blanks[:i] + secretWord[i] + blanks[i+1:]
</snippet></ROW><ROW><id>19330878</id><snippet>blank</snippet></ROW><ROW><id>19330878</id><snippet>secretWord</snippet></ROW><ROW><id>19330878</id><snippet>blank</snippet></ROW><ROW><id>19330878</id><snippet>blanks = "Welcome"
secretWord = "WELCOME"
i = 3
print blanks[:i] + secretWord[i] + blanks[i+1:]
</snippet></ROW><ROW><id>19330878</id><snippet>WelCome
</snippet></ROW><ROW><id>19330878</id><snippet>i</snippet></ROW><ROW><id>19330878</id><snippet>blank</snippet></ROW><ROW><id>19330878</id><snippet>i</snippet></ROW><ROW><id>19330878</id><snippet>secretWord</snippet></ROW><ROW><id>19331056</id><snippet>class foo:
    foo = 'K-Dawg'

    def __str__(self):
        print dir(self)
        return self.foo

obj = foo()
print obj
</snippet></ROW><ROW><id>19331056</id><snippet>class foo:
    def __init__(self):
        print locals()
        foo = 'K-Dawg'
        print locals()

    def __str__(self):
        print locals()
        return self.foo

obj = foo()
print obj
</snippet></ROW><ROW><id>19331056</id><snippet>['__doc__', '__module__', '__str__', 'foo']
K-Dawg
</snippet></ROW><ROW><id>19331056</id><snippet>foo</snippet></ROW><ROW><id>19331056</id><snippet>foo</snippet></ROW><ROW><id>19331056</id><snippet>{'self': &lt;__main__.foo instance at 0x7f528aa90488&gt;}
{'self': &lt;__main__.foo instance at 0x7f528aa90488&gt;, 'foo': 'K-Dawg'}
{'self': &lt;__main__.foo instance at 0x7f11f236d488&gt;}
AttributeError: foo instance has no attribute 'foo'
</snippet></ROW><ROW><id>19331056</id><snippet>foo</snippet></ROW><ROW><id>19331056</id><snippet>__init__</snippet></ROW><ROW><id>19331056</id><snippet>__str__</snippet></ROW><ROW><id>19331056</id><snippet>foo</snippet></ROW><ROW><id>19331056</id><snippet>__init__</snippet></ROW><ROW><id>19331056</id><snippet>class foo:
    def __init__(self):
        print locals()
        self.foo = 'K-Dawg'   # Note the self keyword at the beginning
        print locals()

    def __str__(self):
        print locals()
        return self.foo

obj = foo()
print obj
</snippet></ROW><ROW><id>19331056</id><snippet>{'self': &lt;__main__.foo instance at 0x7fe0e2da24d0&gt;}
{'self': &lt;__main__.foo instance at 0x7fe0e2da24d0&gt;}
{'self': &lt;__main__.foo instance at 0x7fe0e2da24d0&gt;}
K-Dawg
</snippet></ROW><ROW><id>19331056</id><snippet>self</snippet></ROW><ROW><id>19331056</id><snippet>foo</snippet></ROW><ROW><id>19331056</id><snippet>self.foo = 'K-Dawg'</snippet></ROW><ROW><id>19331094</id><snippet>g++</snippet></ROW><ROW><id>19331204</id><snippet>lines = [os.path.basename(str(os.path.splitext(filename)[0])) for filename in selectedFiles]

#extend lines' length to 5 and fill the space with None
lines = lines + [None] * (5-len(lines))

legend(lines,loc='upper left')
</snippet></ROW><ROW><id>19331417</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'(?&lt;=\s)m(?=\s)|^m|m$', "I'm a boy")
[]
&gt;&gt;&gt; re.findall(r'(?&lt;=\s)m(?=\s)|^m|m$', "I m a boy")
['m']
&gt;&gt;&gt; re.findall(r'(?&lt;=\s)m(?=\s)|^m|m$', "mama")
['m']
&gt;&gt;&gt; re.findall(r'(?&lt;=\s)m(?=\s)|^m|m$', "pm")
['m']
</snippet></ROW><ROW><id>19331417</id><snippet>(?=...)</snippet></ROW><ROW><id>19331417</id><snippet>...</snippet></ROW><ROW><id>19331417</id><snippet>(?=Asimov)</snippet></ROW><ROW><id>19331417</id><snippet>'Isaac '</snippet></ROW><ROW><id>19331417</id><snippet>'Asimov'</snippet></ROW><ROW><id>19331417</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>19331417</id><snippet>...</snippet></ROW><ROW><id>19331417</id><snippet>(?&lt;=abc)def</snippet></ROW><ROW><id>19331417</id><snippet>abcdef</snippet></ROW><ROW><id>19331417</id><snippet>r'this is raw string'</snippet></ROW><ROW><id>19331417</id><snippet>\</snippet></ROW><ROW><id>19331417</id><snippet>&gt;&gt;&gt; r'\s' == '\\s'
True
</snippet></ROW><ROW><id>19331621</id><snippet>""""string"""</snippet></ROW><ROW><id>19331621</id><snippet>"</snippet></ROW><ROW><id>19331621</id><snippet>s = '""""string""""'
g = tokenize.generate_tokens(io.StringIO(s).readline)
t = list(g)
print(t)
</snippet></ROW><ROW><id>19331621</id><snippet>'""""string"""'</snippet></ROW><ROW><id>19331621</id><snippet>'"'</snippet></ROW><ROW><id>19331999</id><snippet>cd ~/YOUR-PROJECT
python manage.py shell
</snippet></ROW><ROW><id>19332086</id><snippet>import os
import sqlite3 as sqlite

def make_movie_table(cursor):
    cursor.execute('CREATE TABLE movies(id INTEGER PRIMARY KEY, title VARCHAR(20), link VARCHAR(20))')

def make_series_table(cursor):
     cursor.execute('CREATE TABLE series(title VARCHAR(30) PRIMARY KEY,series_link VARCHAR(60),number_of_episodes INTEGER,number_of_seasons INTEGER)')

def make_episode_table(cursor):
    cursor.execute('CREATE TABLE episodes(id INTEGER PRIMARY KEY,title VARCHAR(30),episode_name VARCHAR(15), episode_link VARCHAR(40), Date TIMESTAMP, FOREIGN KEY (title) REFERENCES series(title) ON DELETE CASCADE)')

def make_version_table(cursor):
    cursor.execute('CREATE TABLE schema_versions(version VARCHAR(6))')
    cursor.execute('insert into schema_versions(version) values ("0.1.0")')

def create_database(sqlite_file):
    if not os.path.exists(sqlite_file):
        connection = sqlite.connect(sqlite_file)
        cursor = connection.cursor()
        cursor.execute("PRAGMA foreign_keys = ON")
        make_movie_table(cursor)
        make_series_table(cursor)
        make_episode_table(cursor)
        make_version_table(cursor)
        connection.commit()
        connection.close()

def upgrade_database(sqlite_file):
    if os.path.exists(sqlite_file):
        connection = sqlite.connect(sqlite_file)
        cursor = connection.cursor()

        cursor.execute("select max(version) from schema_versions")
        row = cursor.fetchone()
        database_version = row[0]
        print('current version is %s' % database_version)

        if database_version == '0.1.0':
            print('upgrading version to 0.1.1')
            cursor.execute('alter table series ADD COLUMN new_column1 VARCHAR(10)')
            cursor.execute('alter table series ADD COLUMN new_column2 INTEGER')
            cursor.execute('insert into schema_versions(version) values ("0.1.1")')

        #if database_version == '0.1.1':
            #print('upgrading version to 0.1.2')
            #etc cetera

        connection.commit()
        connection.close()

#I need to add 2 columns to the series table, when the user upgrade the software.

if __name__ == '__main__':
    create_database('/tmp/db.sqlite')
    upgrade_database('/tmp/db.sqlite')
</snippet></ROW><ROW><id>19332086</id><snippet>elif</snippet></ROW><ROW><id>19332114</id><snippet>class Point</snippet></ROW><ROW><id>19332114</id><snippet>class Cluster</snippet></ROW><ROW><id>19332114</id><snippet>to_string(self):</snippet></ROW><ROW><id>19332114</id><snippet>centroid = Point
</snippet></ROW><ROW><id>19332114</id><snippet>Point</snippet></ROW><ROW><id>19332114</id><snippet>centroid = Point()</snippet></ROW><ROW><id>19332114</id><snippet>a</snippet></ROW><ROW><id>19332114</id><snippet>b</snippet></ROW><ROW><id>19332114</id><snippet>Point()</snippet></ROW><ROW><id>19332114</id><snippet>__init__</snippet></ROW><ROW><id>19332114</id><snippet>Cluster</snippet></ROW><ROW><id>19332114</id><snippet>__init__</snippet></ROW><ROW><id>19332114</id><snippet>Cluster</snippet></ROW><ROW><id>19332114</id><snippet>centroid</snippet></ROW><ROW><id>19332114</id><snippet>self</snippet></ROW><ROW><id>19332114</id><snippet>centroid = Point</snippet></ROW><ROW><id>19332114</id><snippet>class cluster:

    points=[]
    def __init__(self,a,b):
        self.centroid = point(a,b)
</snippet></ROW><ROW><id>19332114</id><snippet>centroid= point</snippet></ROW><ROW><id>19332114</id><snippet>centroid</snippet></ROW><ROW><id>19332114</id><snippet>__init__</snippet></ROW><ROW><id>19332124</id><snippet>&lt;a href='{% if user.is_authenticated  %}{% url 'vote' %}{% else %}{% url 'login' %}{% endif %}' id='story-vote-{{ story.id }}' class='vote'&gt;&lt;img src='{{ STATIC_URL }}images/arrow.gif'&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>19332124</id><snippet>link = 'login'
if user.is_authenticated:  link = 'vote'
</snippet></ROW><ROW><id>19332124</id><snippet>&lt;a href='{{ link }}' id='story-vote-{{ story.id }}' class='vote'&gt;&lt;img src='{{ STATIC_URL }}images/arrow.gif'&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>19332293</id><snippet>grid = [[[0]*9]*9]*50</snippet></ROW><ROW><id>19332293</id><snippet>[[[0]*9]*9]*50</snippet></ROW><ROW><id>19332293</id><snippet>[0]</snippet></ROW><ROW><id>19332293</id><snippet>[0]</snippet></ROW><ROW><id>19332459</id><snippet>trends1 = t.trends.place(_id=1)
</snippet></ROW><ROW><id>19332459</id><snippet>twitter.TwitterCall()</snippet></ROW><ROW><id>19332459</id><snippet>id</snippet></ROW><ROW><id>19332459</id><snippet>id</snippet></ROW><ROW><id>19332459</id><snippet>twitter</snippet></ROW><ROW><id>19332459</id><snippet>_id</snippet></ROW><ROW><id>19332459</id><snippet>id=..</snippet></ROW><ROW><id>19332459</id><snippet># to pass in the GET/POST parameter `id` you need to use `_id`
t.statuses.oembed(_id=1234567890)
</snippet></ROW><ROW><id>19332459</id><snippet>id</snippet></ROW><ROW><id>19332459</id><snippet>geo/id/:place_id</snippet></ROW><ROW><id>19332459</id><snippet>t.geo.id(id='df51dec6f4ee2b2c')  # pass in `id` to extend the URL
t.geo.id.df51dec6f4ee2b2c()      # build the URL as an attribute instead
</snippet></ROW><ROW><id>19332616</id><snippet>with</snippet></ROW><ROW><id>19332616</id><snippet>def openAndSleep():
    with open("fff", 'w') as f:
        print "opened, sleep 10 sec"
        time.sleep(10)
        print "sleep finish"
</snippet></ROW><ROW><id>19332616</id><snippet>__del__</snippet></ROW><ROW><id>19332616</id><snippet>tp_dealloc</snippet></ROW><ROW><id>19332616</id><snippet>file_dealloc()</snippet></ROW><ROW><id>19332638</id><snippet>In [55]: from pandas.io.data import DataReader
In [56]: from datetime import datetime
In [57]: df_1=DataReader("AAPL",  "yahoo", datetime(1970,1,1), datetime(2013,10,1))
In [58]: df_1
Out[58]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 7330 entries, 1984-09-07 00:00:00 to 2013-10-01 00:00:00
Data columns (total 6 columns):
Open         7330  non-null values
High         7330  non-null values
Low          7330  non-null values
Close        7330  non-null values
Volume       7330  non-null values
Adj Close    7330  non-null values
dtypes: float64(5), int64(1)
</snippet></ROW><ROW><id>19332638</id><snippet>In [59]: df_2 = DataReader("AAPL",  "yahoo", datetime(1984,9,7), datetime(2013,10,1))
In [60]: df_2
Out [60]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 7330 entries, 1984-09-07 00:00:00 to 2013-10-01 00:00:00
Data columns (total 6 columns):
Open         7330  non-null values
High         7330  non-null values
Low          7330  non-null values
Close        7330  non-null values
Volume       7330  non-null values
Adj Close    7330  non-null values
dtypes: float64(5), int64(1)
</snippet></ROW><ROW><id>19332917</id><snippet>import ftplib

ftp = ftplib.FTP("ladsweb.nascom.nasa.gov")
ftp.login()

a = 'allData/5/MOD11A1/2002/001/MOD11A1.A2002001.h00v08.005.2007079015634.hdf'
fhandle = open('ftp-test', 'wb')
ftp.retrbinary('RETR ' + a, fhandle.write)
fhandle.close()
</snippet></ROW><ROW><id>19332951</id><snippet>g++</snippet></ROW><ROW><id>19332951</id><snippet>gcc</snippet></ROW><ROW><id>19332951</id><snippet>g++</snippet></ROW><ROW><id>19332951</id><snippet>$ c++filt -n _ZNSt8ios_base4InitD1Ev
std::ios_base::Init::~Init()
</snippet></ROW><ROW><id>19332975</id><snippet>while True:</snippet></ROW><ROW><id>19332975</id><snippet>break</snippet></ROW><ROW><id>19332975</id><snippet>while True:
    # your code here
    return_to_menu = input()
    if return_to_menu != 'M':
        break
</snippet></ROW><ROW><id>19332975</id><snippet>else if</snippet></ROW><ROW><id>19332975</id><snippet>if</snippet></ROW><ROW><id>19332975</id><snippet>else if</snippet></ROW><ROW><id>19333015</id><snippet>inline</snippet></ROW><ROW><id>19333015</id><snippet>inlines</snippet></ROW><ROW><id>19333099</id><snippet>has_op</snippet></ROW><ROW><id>19333099</id><snippet>get_names</snippet></ROW><ROW><id>19333099</id><snippet>Deferred.addCallback</snippet></ROW><ROW><id>19333099</id><snippet>def get_names(self, nicklist, user):
    if user in nicklist:
        log.msg("%r has op!" % (user,))

def has_op(self, channel, user):
    self.names('#' + channel).addCallback(self.get_names, user)
</snippet></ROW><ROW><id>19333099</id><snippet>change_mode</snippet></ROW><ROW><id>19333099</id><snippet>Deferred</snippet></ROW><ROW><id>19333099</id><snippet>Deferred</snippet></ROW><ROW><id>19333099</id><snippet>Deferred</snippet></ROW><ROW><id>19333099</id><snippet>has_op</snippet></ROW><ROW><id>19333099</id><snippet>Deferred</snippet></ROW><ROW><id>19333099</id><snippet>Deferred</snippet></ROW><ROW><id>19333099</id><snippet>True</snippet></ROW><ROW><id>19333099</id><snippet>False</snippet></ROW><ROW><id>19333099</id><snippet>def get_names(self, nicklist, user):
    return user in nicklist

def has_op(self, channel, user):
    return self.names('#' + channel).addCallback(self.get_names, user)
</snippet></ROW><ROW><id>19333099</id><snippet>change_mode</snippet></ROW><ROW><id>19333099</id><snippet>def change_mode(self, channel, user, msg):
    target = msg[5:-3]

    checking = self.has_op(channel, user)
    checking.addCallback(self._ofIfNotOp, channel, target)

def _opIfNotOp(self, isOp, channel, user):
    if not isOp:
        self.mode(channel, True, '+o', user=user)
</snippet></ROW><ROW><id>19333435</id><snippet>class User(Backend.instance().get_base()):

   __tablename__ = 'users'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    chat_messages = relationship("ChatMessage", backref="participants",
                             primaryjoin="User.id==ChatMessage.sender_id or User.id==ChatMessage.receiver_id")
</snippet></ROW><ROW><id>19333490</id><snippet>pip</snippet></ROW><ROW><id>19333490</id><snippet>easy_install</snippet></ROW><ROW><id>19333490</id><snippet>setup.py</snippet></ROW><ROW><id>19333490</id><snippet>setup.py --help-commands
</snippet></ROW><ROW><id>19333490</id><snippet>setup.py install
</snippet></ROW><ROW><id>19333568</id><snippet>pythonaslab</snippet></ROW><ROW><id>19333568</id><snippet>selectionmodule</snippet></ROW><ROW><id>19333568</id><snippet>pythonaslab</snippet></ROW><ROW><id>19333568</id><snippet>import pythonaslab</snippet></ROW><ROW><id>19333568</id><snippet>selectionmodule</snippet></ROW><ROW><id>19333568</id><snippet>pythonaslab</snippet></ROW><ROW><id>19333568</id><snippet># this function takes one argument, and locally it is known as b
def ascendingselection(b):
    # rest of function ..
</snippet></ROW><ROW><id>19333568</id><snippet>selectionmodule.ascendingselection(b)
</snippet></ROW><ROW><id>19333628</id><snippet>main</snippet></ROW><ROW><id>19333628</id><snippet>&gt;&gt;&gt; def main(): pass
... 
&gt;&gt;&gt; foo = main
&gt;&gt;&gt; def main(): pass
... 
&gt;&gt;&gt; foo is main
False
&gt;&gt;&gt; foo
&lt;function main at 0x1004ca500&gt;
&gt;&gt;&gt; main
&lt;function main at 0x1005778c0&gt;
</snippet></ROW><ROW><id>19333683</id><snippet>axes.imshow(z)</snippet></ROW><ROW><id>19333683</id><snippet>z[0,0]</snippet></ROW><ROW><id>19333683</id><snippet>origin="bottom"</snippet></ROW><ROW><id>19333683</id><snippet>imshow()</snippet></ROW><ROW><id>19333683</id><snippet>z[:,::-1]</snippet></ROW><ROW><id>19333928</id><snippet>eq = ''
while not eq.endswith('\n'):
    eq += tn.read_some().decode('utf-8')
eq.strip('\n')
</snippet></ROW><ROW><id>19334099</id><snippet>sql.with_query_result</snippet></ROW><ROW><id>19334099</id><snippet>rs = sql.with_query_result("""
    select distinct on (_timestamp::date)
        _timestamp::date, id
    from
        record
        inner  join
        unnest(:current_date::timestamp[]) d(_timestamp) on
            utc_dates @&gt; _timestamp
            or
            extract(isodow from _timestamp) = any(day_ids)
            or
            "type" = 'default'
    order by 1, priority desc
    """,
    {
        'current_date':
        rrule.rrule(rrule.DAILY, dtstart=start_date, until=end_date)
    }
)

ids = {}

for (current_date, id) in rs:
    ids[current_date] = id
</snippet></ROW><ROW><id>19334138</id><snippet>something</snippet></ROW><ROW><id>19334138</id><snippet># your-javascript-file.js or a script block on your page

function createSomething(some, thing) {
    if (some !== undefined &amp;&amp; thing !== undefined) {
        $.POST('/a-django-url-pattern/', {'something': some + thing},
            function(responseData) {
            // do something else with the responseData, etc
        });
    }
}

# your Django view
def your_view_function(request):
    if request.method == 'POST':
        something = request.POST.get('something')
        if something:
            # do whatever

    return render(request, 'a-template.html')
</snippet></ROW><ROW><id>19334156</id><snippet>defaultdict</snippet></ROW><ROW><id>19334156</id><snippet>from collections import defaultdict
temp2 = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

temp2[t][z][y] = temp
</snippet></ROW><ROW><id>19334156</id><snippet>from collections import defaultdict
temp2 = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))
temp2[1][2][3] = 4
print temp2[1][2][3]
</snippet></ROW><ROW><id>19334156</id><snippet>4
</snippet></ROW><ROW><id>19334265</id><snippet>**Algo**
</snippet></ROW><ROW><id>19334359</id><snippet>'name'</snippet></ROW><ROW><id>19334359</id><snippet>'ip'</snippet></ROW><ROW><id>19334359</id><snippet>In [38]: str = 'players 0 2 count:2 playerindex:0 playerid:a5:41:d2:cd:cd:05 ip:127.0.0.1:60488 name:127.0.0.1 model:softsqueeze displaytype:graphic-280x16 connected:1 playerindex:1 playerid:00:04:20:02:00:c8 ip:192.168.1.22:3483 name:Movy model:slimp3 displaytype:noritake-katakana connected:1'

In [39]: regex = re.compile(r'([^:]+):(\S+)\s')

In [40]: regex.findall(str)
Out[40]: 
[('players 0 2 count', '2'),
 ('playerindex', '0'),
 ('playerid', 'a5:41:d2:cd:cd:05'),
 ('ip', '127.0.0.1:60488'),
 ('name', '127.0.0.1'),
 ('model', 'softsqueeze'),
 ('displaytype', 'graphic-280x16'),
 ('connected', '1'),
 ('playerindex', '1'),
 ('playerid', '00:04:20:02:00:c8'),
 ('ip', '192.168.1.22:3483'),
 ('name', 'Movy'),
 ('model', 'slimp3'),
 ('displaytype', 'noritake-katakana')]
</snippet></ROW><ROW><id>19334359</id><snippet>lst = regex.findall(str)
In [45]: name_and_ip_tags = [x for x in lst if x[0] in ['ip', 'name']]

In [46]: name_and_ip_tags
Out[46]: 
[('ip', '127.0.0.1:60488'),
 ('name', '127.0.0.1'),
 ('ip', '192.168.1.22:3483'),
 ('name', 'Movy')]
</snippet></ROW><ROW><id>19334359</id><snippet>([^:]+):(\S+)\s
</snippet></ROW><ROW><id>19334359</id><snippet>([^:]+)</snippet></ROW><ROW><id>19334359</id><snippet>:</snippet></ROW><ROW><id>19334359</id><snippet>:</snippet></ROW><ROW><id>19334359</id><snippet>:</snippet></ROW><ROW><id>19334359</id><snippet>(\S+)</snippet></ROW><ROW><id>19334359</id><snippet>+</snippet></ROW><ROW><id>19334359</id><snippet>\s</snippet></ROW><ROW><id>19334359</id><snippet>regex.findall(str)</snippet></ROW><ROW><id>19334359</id><snippet>regex</snippet></ROW><ROW><id>19334359</id><snippet>str</snippet></ROW><ROW><id>19334359</id><snippet>list</snippet></ROW><ROW><id>19334610</id><snippet>self.var.get()</snippet></ROW><ROW><id>19334610</id><snippet>import sys
from Tkinter import *
import subprocess

class MyOptionMenu(OptionMenu):
    def __init__(self, master, status, *options):
        self.var = StringVar(master)
        self.var.set(status)
        OptionMenu.__init__(self, master, self.var, *options)
        self.config(
            font=('calibri', (10)), bg='white', width=12, fg='dark red')
        self['menu'].config(font=('calibri', (10)), bg='white', fg='dark blue')

    def callback(self):
        val = '{}.py'.format(self.var.get())
        print(val)
        # subprocess.call([val])

Dragonfly = Tk()
Dragonfly.geometry('400x400+400+300')
Dragonfly.title('Dragonfly')
mainlabel = Label(text='Dragonfly Trigger Test', font=('calibri', (14)),
                  fg='dark blue').pack()

mymenu1 = MyOptionMenu(Dragonfly, 'Select Protocol', 'SPMI', 'RFFE')
b1_1 = Button(Dragonfly, text="Run", fg='blue', command=mymenu1.callback)
b1_1.place(x=85, y=150)

mymenu2 = MyOptionMenu(Dragonfly, 'Select Protocol', 'SPMI', 'RFFE')
b2_2 = Button(Dragonfly, text="Run", fg='blue', command=mymenu2.callback)
b2_2.place(x=275, y=150)

mymenu1.place(x=40, y=100)
mymenu2.place(x=230, y=100)
m1label = Label(text='Frame Trigger', font=('calibri', (12)),
                fg='dark green').place(x=57, y=60)
m1labe2 = Label(text='External Trigger', font=('calibri', (12)),
                fg='dark green').place(x=240, y=60)

Dragonfly.mainloop()
</snippet></ROW><ROW><id>19334610</id><snippet>place</snippet></ROW><ROW><id>19334610</id><snippet>pack</snippet></ROW><ROW><id>19334610</id><snippet>grid</snippet></ROW><ROW><id>19334610</id><snippet>import sys
import Tkinter as tk
import subprocess

class MyOptionMenu(tk.OptionMenu):
    def __init__(self, master, status, *options):
        self.var = tk.StringVar(master)
        self.var.set(status)
        tk.OptionMenu.__init__(self, master, self.var, *options)
        self.config(
            font=('calibri', (10)), bg='white', width=12, fg='dark red')
        self['menu'].config(font=('calibri', (10)), bg='white', fg='dark blue')

    def callback(self):
        val = '{}.py'.format(self.var.get())
        print(val)
        # subprocess.call([val])

Dragonfly = tk.Tk()
Dragonfly.geometry('400x400+400+300')
Dragonfly.title('Dragonfly')
Dragonfly.columnconfigure(0, weight=1)
Dragonfly.columnconfigure(1, weight=1)  
mainlabel = tk.Label(text='Dragonfly Trigger Test', font=('calibri', (14)),
                  fg='dark blue').grid(row=0, column=0, columnspan=2, pady=20)

mymenu1 = MyOptionMenu(Dragonfly, 'Select Protocol', 'SPMI', 'RFFE')
mymenu1.grid(row=2, column=0, pady=10, padx=10,)
b1_1 = tk.Button(Dragonfly, text="Run", fg='blue', command=mymenu1.callback)
b1_1.grid(row=3, column=0, pady=10, padx=10,)

mymenu2 = MyOptionMenu(Dragonfly, 'Select Protocol', 'SPMI', 'RFFE')
mymenu2.grid(row=2, column=1, pady=10, padx=10,)
b2_2 = tk.Button(Dragonfly, text="Run", fg='blue', command=mymenu2.callback)
b2_2.grid(row=3, column=1, pady=10, padx=10,)

m1label = tk.Label(text='Frame Trigger', font=('calibri', (12)),
                fg='dark green').grid(row=1, column=0, pady=10, padx=10,)
m1labe2 = tk.Label(text='External Trigger', font=('calibri', (12)),
                fg='dark green').grid(row=1, column=1, pady=10, padx=10,)

Dragonfly.mainloop()
</snippet></ROW><ROW><id>19334624</id><snippet>__all__</snippet></ROW><ROW><id>19334624</id><snippet>__all__</snippet></ROW><ROW><id>19334624</id><snippet>__all__</snippet></ROW><ROW><id>19334624</id><snippet>_name</snippet></ROW><ROW><id>19334664</id><snippet>urllib.unquote</snippet></ROW><ROW><id>19334664</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; foo = '%23%C5%9Een%C5%9EakrakTakiple%C5%9FelimYine'
&gt;&gt;&gt; print urllib.unquote(foo).decode('utf-8')
#ŞenŞakrakTakipleşelimYine
</snippet></ROW><ROW><id>19334670</id><snippet>**mapping</snippet></ROW><ROW><id>19334670</id><snippet>Country('Africa', **dictionary)
</snippet></ROW><ROW><id>19334670</id><snippet>country</snippet></ROW><ROW><id>19334670</id><snippet>__init__</snippet></ROW><ROW><id>19334670</id><snippet>country</snippet></ROW><ROW><id>19334670</id><snippet>&gt;&gt;&gt; class Country(object):
...     def __init__(self, continent='Europe', country='Great Britain'):
...         print 'Continent: {}, Country: {}'.format(continent, country)
... 
&gt;&gt;&gt; dictionary = {'continent': 'Africa', 'country': 'Zimbabwe'}
&gt;&gt;&gt; Country(**dictionary)
Continent: Africa, Country: Zimbabwe
&lt;__main__.Country object at 0x100582550&gt;
&gt;&gt;&gt; Country(**{'country': 'France'})
Continent: Europe, Country: France
&lt;__main__.Country object at 0x100582510&gt;
</snippet></ROW><ROW><id>19334670</id><snippet>**mapping</snippet></ROW><ROW><id>19334670</id><snippet>def __init__(self, continent='Europe', country='Great Britain', **kw):
</snippet></ROW><ROW><id>19334670</id><snippet>continent</snippet></ROW><ROW><id>19334670</id><snippet>country</snippet></ROW><ROW><id>19334670</id><snippet>kw</snippet></ROW><ROW><id>19334704</id><snippet>INSERT INTO ... SELECT ...</snippet></ROW><ROW><id>19334704</id><snippet>country_id</snippet></ROW><ROW><id>19334704</id><snippet>city</snippet></ROW><ROW><id>19334704</id><snippet>country(country_id,name)</snippet></ROW><ROW><id>19334704</id><snippet>city(city_id,name,country_id)</snippet></ROW><ROW><id>19334704</id><snippet>INSERT</snippet></ROW><ROW><id>19334704</id><snippet>:country_id</snippet></ROW><ROW><id>19334704</id><snippet>INSERT INTO city (city_id, name, country_id)
          VALUES (:city_id, :name, :country_id);
</snippet></ROW><ROW><id>19334704</id><snippet>INSERT INTO city (city_id, name, country_id)
       SELECT :city_id, :name, :country_id
       FROM country
       WHERE country_id=:country_id;
</snippet></ROW><ROW><id>19334912</id><snippet>print 'hi'</snippet></ROW><ROW><id>19334912</id><snippet>if (x() and (b == False)):
</snippet></ROW><ROW><id>19334912</id><snippet>x()</snippet></ROW><ROW><id>19334912</id><snippet>if x() and not b:
</snippet></ROW><ROW><id>19334912</id><snippet>x</snippet></ROW><ROW><id>19334912</id><snippet>True</snippet></ROW><ROW><id>19334912</id><snippet>&gt;&gt;&gt; def foo(): return False
...
&gt;&gt;&gt; foo()
False
&gt;&gt;&gt; bool(foo)
True
</snippet></ROW><ROW><id>19334912</id><snippet>a</snippet></ROW><ROW><id>19334912</id><snippet>False</snippet></ROW><ROW><id>19334912</id><snippet>a = False</snippet></ROW><ROW><id>19334912</id><snippet>some string</snippet></ROW><ROW><id>19335051</id><snippet>totalList</snippet></ROW><ROW><id>19335051</id><snippet>w, h = 300, 200
blockSize = 20
totalList = []

for xStart in xrange(0, w, blockSize):
    xEnd = min(xStart+blockSize, w)
    for yStart in range(0, h, blockSize):
        yEnd = min(yStart+blockSize, h)
        partCoords = [(x,y) for x in xrange(xStart, xEnd) for y in xrange(yStart, yEnd)]
        totalList.append(partCoords)
</snippet></ROW><ROW><id>19335129</id><snippet>plt.xlim(-10, 10)
plt.ylim(-2, 2)
</snippet></ROW><ROW><id>19335129</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
x = np.linspace(-10, 10, 100)
y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x, y)
a = np.exp(-((X - 0) ** 2 + 3*(Y - 0) ** 2) / 4)
c = plt.contour(x, y, a)
plt.xlim(-10, 10)
plt.ylim(-2, 2)
plt.show()
</snippet></ROW><ROW><id>19335129</id><snippet>1*(X - A) ** 2 + 3*(Y - B) ** 2) == 0
</snippet></ROW><ROW><id>19335237</id><snippet>from twisted.internet.endpoints import TCP4ClientEndpoint 
from txsocksx.client import SOCKS5ClientEndpoint

if __name__ == "__main__":
    chan = "django-hotclub"
    chain_length = 5

    myID = sys.argv[1]
    counterpartID = sys.argv[2]

    puttyEndPoint = TCP4ClientEndpoint(reactor, '127.0.0.1', 22)
    ircEndpoint = SOCKS5ClientEndpoint('irc.freenode.net', 6667, puttyEndPoint)
    d = ircEndpoint.connect(MomBotFactory('#' + chan, myID, counterpartID, chain_length, chattiness=0.05))
    reactor.run()
</snippet></ROW><ROW><id>19335438</id><snippet>list.sort</snippet></ROW><ROW><id>19335438</id><snippet>key</snippet></ROW><ROW><id>19335438</id><snippet>&gt;&gt;&gt; counts = {
...     'A': 14,
...     'B': 157,
...     'C': 17,
... }
&gt;&gt;&gt;
&gt;&gt;&gt; lst = counts.items()
&gt;&gt;&gt; lst.sort(key=lambda x: x[1]) # x[1] =&gt; count
&gt;&gt;&gt; for key, val in lst:
...     print val, key
...
14 A
17 C
157 B
</snippet></ROW><ROW><id>19335438</id><snippet>sort()</snippet></ROW><ROW><id>19335438</id><snippet>key</snippet></ROW><ROW><id>19335609</id><snippet>sender_id</snippet></ROW><ROW><id>19335609</id><snippet>Message</snippet></ROW><ROW><id>19335609</id><snippet>ChatMessage</snippet></ROW><ROW><id>19335609</id><snippet>sender_id</snippet></ROW><ROW><id>19335609</id><snippet>receiver_id</snippet></ROW><ROW><id>19335609</id><snippet>ChatMessage</snippet></ROW><ROW><id>19335609</id><snippet>CheckConstraint</snippet></ROW><ROW><id>19335609</id><snippet>class ChatMessage(Base):
    __tablename__ = 'chat_messages'
    id = sa.Column(sa.Integer, primary_key=True)
    sender_id = sa.Column(sa.Integer, sa.ForeignKey(User.id))
    receiver_id = sa.Column(sa.Integer, sa.ForeignKey(User.id))
    content = sa.Column(sa.String, nullable=False)

    __table_args__ = (
        sa.CheckConstraint(receiver_id != sender_id),
    )
</snippet></ROW><ROW><id>19335927</id><snippet>import copy

def Class(clas12):
inputData = ''.join(clas12.readlines())
line=inputData.split('\n')
line2=[]
for a in line:
    b=a.split(' ')
    line2.append(b)
return line2

clas12=open('class12.txt','r')

Class12=Class(clas12)
Class13=copy.deepcopy(Class12)
</snippet></ROW><ROW><id>19336191</id><snippet>self.__class__</snippet></ROW><ROW><id>19336191</id><snippet>self</snippet></ROW><ROW><id>19336191</id><snippet>self.__class__</snippet></ROW><ROW><id>19336191</id><snippet>class bc(object):
    def get_subclass_name(self):
        return self.__class__.__name__
</snippet></ROW><ROW><id>19336191</id><snippet>&gt;&gt;&gt; class sc1(bc): pass
&gt;&gt;&gt; class sc2(sc1): pass
&gt;&gt;&gt; class sc3(sc2): pass
&gt;&gt;&gt; print sc2().get_subclass_name()
sc2
</snippet></ROW><ROW><id>19336388</id><snippet>for f in fList: # and delete all other child files
    f.close()
    remove(f.name)
</snippet></ROW><ROW><id>19336388</id><snippet>while</snippet></ROW><ROW><id>19336388</id><snippet>for f in fList: # Score all child files
    sList.append(scoreFile(f, lFile))
</snippet></ROW><ROW><id>19336388</id><snippet>f</snippet></ROW><ROW><id>19336388</id><snippet>remove(f.name)</snippet></ROW><ROW><id>19336388</id><snippet>fList</snippet></ROW><ROW><id>19336388</id><snippet>sList</snippet></ROW><ROW><id>19336388</id><snippet>fList</snippet></ROW><ROW><id>19336425</id><snippet>def templater(template,function,message):
    template = template.split('function')
    for i,f in enumerate(template):
        if function in f:
            template[i] = f.replace('[msg]',message)
    return 'function'.join(template)
</snippet></ROW><ROW><id>19336443</id><snippet>listofchar = map(lambda x: x.encode('unicode-escape'), data)
</snippet></ROW><ROW><id>19336443</id><snippet>map</snippet></ROW><ROW><id>19336443</id><snippet>listofchar = [x.encode('unicode-escape') for x in data]
</snippet></ROW><ROW><id>19336521</id><snippet>consummer = ServicesActivated.objects.filter(status=1)
consummer = consummer.exclude(name__exact=data['provider'])
form = ConsummerForm(instance=consummer)
</snippet></ROW><ROW><id>19336545</id><snippet>import operator

lst = [
    ('Lisa', 'F', 8976),
    ('Shelly', 'F', 8975),
    ('Tom', 'M', 1658),
    ('Anthony', 'M', 985),
    ('Ben', 'M', 698)]
]   
sorted(lst, key=operator.itemgetter(1, 2))
</snippet></ROW><ROW><id>19336606</id><snippet>def chunk_sequences(it, n):
    """
    Yield all sequences of n from iterable.
    """
    chunk = []
    for x in it:
        if x == n:
            chunk.append(n)
        else:
            if len(chunk) &gt; 0:
                yield chunk
                chunk = []
    if len(chunk) &gt; 0:
        #needed in case the last sequence runs into the last element
        yield chunk
</snippet></ROW><ROW><id>19336606</id><snippet>takewhile</snippet></ROW><ROW><id>19336606</id><snippet>list(chunk_sequences(pattern,1))
Out[59]: [[1, 1, 1], [1, 1], [1], [1, 1, 1, 1, 1]]
</snippet></ROW><ROW><id>19336606</id><snippet>[len(x) for x in list(chunk_sequences(pattern,1))]
Out[60]: [3, 2, 1, 5]
</snippet></ROW><ROW><id>19336607</id><snippet>ticker_id = models.CharField(
    max_length=255,
    blank=True,
    db_index=True,
    db_column='ticker'
)
ticker = models.ForeignKey(MemberCompany, to_field='ticker')
</snippet></ROW><ROW><id>19336684</id><snippet>try:
    # Notice that I got rid of str(Lookup)
    # raw_input always returns a string
    print Guide[Lookup]
# KeyErrors are generated when you try to access a key in a dict that doesn't exist
except KeyError:
    print 'Key not found.'
</snippet></ROW><ROW><id>19336684</id><snippet>if again != ('YES' or 'Y'):
</snippet></ROW><ROW><id>19336684</id><snippet>if again not in ('YES', 'Y'):
</snippet></ROW><ROW><id>19336684</id><snippet>if (again != 'YES') or 'Y':
</snippet></ROW><ROW><id>19336684</id><snippet>True</snippet></ROW><ROW><id>19336684</id><snippet>True</snippet></ROW><ROW><id>19336684</id><snippet>'Y'</snippet></ROW><ROW><id>19336684</id><snippet>else:
    Running = True
</snippet></ROW><ROW><id>19336704</id><snippet>csv</snippet></ROW><ROW><id>19336704</id><snippet>|</snippet></ROW><ROW><id>19336704</id><snippet>import csv

with open('minitest.csv', 'rb') as f:
    reader = csv.reader(f, delimiter='|')
    for row in reader:
</snippet></ROW><ROW><id>19336704</id><snippet>csv.reader()</snippet></ROW><ROW><id>19337027</id><snippet>nonlocal</snippet></ROW><ROW><id>19337027</id><snippet>+=</snippet></ROW><ROW><id>19337027</id><snippet>def main():
    range_dur = [0]
    xrange_dur = [0]

    def do_range():
        start = time.time()
        for i in range(2,10):
            print i
        range_dur[0] += time.time() - start

    def do_xrange():
        start = time.time()
        for i in xrange(2,10):
            print i
        xrange_dur[0] += time.time() - start             

    do_range()
    do_xrange()
    print range_dur[0]
    print xrange_dur[0]

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19337027</id><snippet>global</snippet></ROW><ROW><id>19337027</id><snippet>nonlocal</snippet></ROW><ROW><id>19337027</id><snippet>return</snippet></ROW><ROW><id>19337027</id><snippet>timeit</snippet></ROW><ROW><id>19337122</id><snippet>"int"</snippet></ROW><ROW><id>19337122</id><snippet>"list"</snippet></ROW><ROW><id>19337122</id><snippet>str</snippet></ROW><ROW><id>19337122</id><snippet>int</snippet></ROW><ROW><id>19337122</id><snippet>float</snippet></ROW><ROW><id>19337511</id><snippet>if variable is True:</snippet></ROW><ROW><id>19337511</id><snippet>if variable:</snippet></ROW><ROW><id>19337511</id><snippet>if variable is False:</snippet></ROW><ROW><id>19337511</id><snippet>if not variable:</snippet></ROW><ROW><id>19337511</id><snippet>elif user_input == "exit" or "stop":</snippet></ROW><ROW><id>19337511</id><snippet>(use_input == "exit") or ("stop")</snippet></ROW><ROW><id>19337511</id><snippet>"stop"</snippet></ROW><ROW><id>19337511</id><snippet>True</snippet></ROW><ROW><id>19337511</id><snippet>elif user_input == "exit" or user_input == "stop":</snippet></ROW><ROW><id>19337511</id><snippet>elif user_input in ("exit", "stop"):</snippet></ROW><ROW><id>19337511</id><snippet>log.write(str(now) + "Float switch turned off")</snippet></ROW><ROW><id>19337511</id><snippet>log.write("{}Float switch turned off".format(now))</snippet></ROW><ROW><id>19337511</id><snippet>%</snippet></ROW><ROW><id>19337511</id><snippet>%</snippet></ROW><ROW><id>19337591</id><snippet>In [7]: Particle.columns
Out[7]: 
{'lati': Int32Col(shape=(), dflt=0, pos=2),
 'longi': Int32Col(shape=(), dflt=0, pos=3),
 'name': StringCol(itemsize=16, shape=(), dflt='', pos=1),
 'pressure': Float32Col(shape=(), dflt=0.0, pos=4),
 'temperature': Float64Col(shape=(), dflt=0.0, pos=5)}
</snippet></ROW><ROW><id>19337804</id><snippet>    print(type(lst))
    tuple(lst)
    print(type(lst)) #still showing type='list'
</snippet></ROW><ROW><id>19337804</id><snippet>lst</snippet></ROW><ROW><id>19337804</id><snippet>tuple</snippet></ROW><ROW><id>19337804</id><snippet>tuple(lst)</snippet></ROW><ROW><id>19337804</id><snippet>lst = tuple(lst)
</snippet></ROW><ROW><id>19337931</id><snippet>while</snippet></ROW><ROW><id>19337931</id><snippet>badInput = True
while badInput:
    filesize = input("Podaj rozmiar pliku i jednostke (np. \"100 mb\", \"130 gb\", \"84 kb\"): ")
    if filesize[-3:] ==  ' mb' or filesize[-3:] == ' kb' or filesize[-3:] == ' gb':
        badInput = False
        print("true")
    else:
        print("Podaj jeszcze raz rozmiar pliku w formacie [liczba format] np. 12 kb")
</snippet></ROW><ROW><id>19337991</id><snippet>outerjoin</snippet></ROW><ROW><id>19338146</id><snippet>phone = models.CharField(max_length=20, blank=False)
mobile = models.CharField(max_length=20, blank=False)
</snippet></ROW><ROW><id>19338146</id><snippet>phone = models.CharField(max_length=20, blank=False)
is_mobile = models.BoleanField()
</snippet></ROW><ROW><id>19338146</id><snippet>is_mobile</snippet></ROW><ROW><id>19338175</id><snippet>in</snippet></ROW><ROW><id>19338175</id><snippet>for member in list:
    if member not in ('a', 'b', 'c'):
        print member 
</snippet></ROW><ROW><id>19338211</id><snippet>__repr__</snippet></ROW><ROW><id>19338211</id><snippet>__str__</snippet></ROW><ROW><id>19338211</id><snippet>class topList():
    __slots__ = ( "name", "gender", "occurences" )

    def __repr__(self):
        return 'topList({s.name!r}, {s.gender!r}, {s.occurences!r})'.format(s=self)

    def __str__(self):
        return '{s.name} ({s.gender}): {s.occurences!r})'.format(s=self)
</snippet></ROW><ROW><id>19338211</id><snippet>&gt;&gt;&gt; class topList():
...     __slots__ = ( "name", "gender", "occurences" )
...     def __str__(self):
...         return 'topList({s.name!r}, {s.gender!r}, {s.occurences!r})'.format(s=self)
... 
&gt;&gt;&gt; tl = topList()
&gt;&gt;&gt; tl.name = 'FooBar'
&gt;&gt;&gt; tl.gender = 'm'
&gt;&gt;&gt; tl.occurences = 42
&gt;&gt;&gt; print(tl)
FooBar (m): 42
&gt;&gt;&gt; tl
topList('FooBar', 'm', 42)
</snippet></ROW><ROW><id>19338211</id><snippet>__str__</snippet></ROW><ROW><id>19338211</id><snippet>print()</snippet></ROW><ROW><id>19338211</id><snippet>__repr__</snippet></ROW><ROW><id>19338211</id><snippet>repr()</snippet></ROW><ROW><id>19338259</id><snippet>badguy = list(badguy)
badguy[0]-=7
badguy = tuple(badguy)
</snippet></ROW><ROW><id>19338259</id><snippet>badguy</snippet></ROW><ROW><id>19338259</id><snippet>list</snippet></ROW><ROW><id>19338261</id><snippet>datetimefield__year</snippet></ROW><ROW><id>19338261</id><snippet>datetimefield__day</snippet></ROW><ROW><id>19338261</id><snippet>formulario =   get_object_or_404(adendum,adendum_credencial=credencial,
    adendum_fecha__year=date_for_search.year, 
    adendum_fecha__month=date_for_search.month, 
    adendum_fecha__day=date_for_search.day,
    adendum_fecha__hour=1)
</snippet></ROW><ROW><id>19338318</id><snippet>d1 = self.db.hget(auth, 'user_add')
d2 = self.db.get('foo')
</snippet></ROW><ROW><id>19338318</id><snippet>twisted.internet.defer.DeferredList</snippet></ROW><ROW><id>19338318</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19338318</id><snippet>@inlineCallbacks
def do_redis(self):
    foo = yield self.db.get('somekey')
    bar = yield self.db.hget(foo, 'bar') # Get 'bar' field of hash foo
</snippet></ROW><ROW><id>19338318</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19338318</id><snippet>twisted.web</snippet></ROW><ROW><id>19338318</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19338318</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>19338319</id><snippet>bulk_insert()</snippet></ROW><ROW><id>19338319</id><snippet>from datetime import date
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Date
from alembic import op

# Create an ad-hoc table to use for the insert statement.
accounts_table = table('account',
    column('id', Integer),
    column('name', String),
    column('create_date', Date)
)

op.bulk_insert(accounts_table,
    [
        {'id':1, 'name':'John Smith',
                'create_date':date(2010, 10, 5)},
        {'id':2, 'name':'Ed Williams',
                'create_date':date(2007, 5, 27)},
        {'id':3, 'name':'Wendy Jones',
                'create_date':date(2008, 8, 15)},
    ]
)
</snippet></ROW><ROW><id>19338319</id><snippet>execute()</snippet></ROW><ROW><id>19338319</id><snippet>execute()</snippet></ROW><ROW><id>19338319</id><snippet>from sqlalchemy.sql import table, column
from sqlalchemy import String
from alembic import op

account = table('account',
    column('name', String)
)
op.execute(
    account.update().\
        where(account.c.name==op.inline_literal('account 1')).\
        values({'name':op.inline_literal('account 2')})
        )
</snippet></ROW><ROW><id>19338319</id><snippet>update</snippet></ROW><ROW><id>19338359</id><snippet>lst</snippet></ROW><ROW><id>19338359</id><snippet>for line in file1:
    lst = (line.rstrip().split(","))
    lst = tuple(lst)

sorted(lst, key=operator.itemgetter(1,2))
</snippet></ROW><ROW><id>19338359</id><snippet>results = []
for line in file1:
    lst = line.rstrip().split(",")
    lst = tuple(lst)
    results.append(lst)

return sorted(results, key=operator.itemgetter(1,2))
</snippet></ROW><ROW><id>19338359</id><snippet>'10'</snippet></ROW><ROW><id>19338359</id><snippet>'91234'</snippet></ROW><ROW><id>19338359</id><snippet>results = []
for line in file1:
    lst = line.rstrip().split(",")
    lst[2] = int(lst[2])
    lst = tuple(lst)
    results.append(lst)

return sorted(results, key=operator.itemgetter(1,2))
</snippet></ROW><ROW><id>19338449</id><snippet>answer = raw_input("Your answer: ")
if answer.lower() in ("2", "two"):
    # Answer was good.
</snippet></ROW><ROW><id>19338449</id><snippet>("2", "two")</snippet></ROW><ROW><id>19338449</id><snippet>True</snippet></ROW><ROW><id>19338449</id><snippet>"Two"
"two"
"2"
"tWo"
</snippet></ROW><ROW><id>19338449</id><snippet>False</snippet></ROW><ROW><id>19338483</id><snippet>from StringIO import StringIO
from fabric.api import get

fd = StringIO()
get(remote_path, fd)
content=fd.getvalue()
</snippet></ROW><ROW><id>19338617</id><snippet>enumerate()</snippet></ROW><ROW><id>19338617</id><snippet>with open(filename) as f:
    for i, line in enumerate(f, 1):
        print('#{}: {}'.format(i, line.rstrip('\n'))
</snippet></ROW><ROW><id>19338617</id><snippet>1</snippet></ROW><ROW><id>19338617</id><snippet>enumerate()</snippet></ROW><ROW><id>19338766</id><snippet>/usr/share/dict/words</snippet></ROW><ROW><id>19338766</id><snippet>from random import choice
import string

dictionary = set(open('words.txt','r').read().lower().split())
max_len = max(map(len, dictionary)) #longest word in the set of words

text = ''.join([choice(string.ascii_lowercase) for i in xrange(28000)])
text += '-'+text[::-1] #append the reverse of the text to itself

words_found = set() #set of words found, starts empty
for i in xrange(len(text)): #for each possible starting position in the corpus
    chunk = text[i:i+max_len+1] #chunk that is the size of the longest word
    for j in xrange(1,len(chunk)+1): #loop to check each possible subchunk
        word = chunk[:j] #subchunk
        if word in dictionary: #constant time hash lookup if it's in dictionary
            words_found.add(word) #add to set of words

print words_found
</snippet></ROW><ROW><id>19338835</id><snippet>unittest.mock</snippet></ROW><ROW><id>19338835</id><snippet>import time
import unittest
import unittest.mock

class Alarm:
    def setAlarm(self):
        self.alarmed = False
        self._saved = time.perf_counter()
    def runStep(self):
        now = time.perf_counter()
        if now - self._saved &gt; 1000.0 and self._saved != -1:
            self.alarmed = True
            self._saved = -1

class MockPerfCounter:
    def __init__(self):
        self.t = 0
    def increment(self, n):
        self.t += n
    def perf_counter(self):
        return self.t

class TestAlarm(unittest.TestCase):
    def test_foo(self):
        clock = MockPerfCounter()
        with unittest.mock.patch('time.perf_counter', clock.perf_counter):
            alarm = Alarm()
            alarm.setAlarm()
            clock.increment(999.0)
            alarm.runStep()
            self.assertFalse(alarm.alarmed)
            clock.increment(1.1)    # tick another second
            alarm.runStep()
            self.assertTrue(alarm.alarmed)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>19338835</id><snippet>MockPerfCounter</snippet></ROW><ROW><id>19338835</id><snippet>unittest.mock.Mock</snippet></ROW><ROW><id>19338835</id><snippet>class TestAlarm(unittest.TestCase):
    def test_foo(self):
        clock = unittest.mock.Mock()
        clock.t = 0
        with unittest.mock.patch('time.perf_counter', lambda: clock.t):
            alarm = Alarm()
            alarm.setAlarm()
            clock.t += 999.0
            alarm.runStep()
            self.assertFalse(alarm.alarmed)
            clock.t += 1.1
            alarm.runStep()
            self.assertTrue(alarm.alarmed)
</snippet></ROW><ROW><id>19339031</id><snippet>__init__</snippet></ROW><ROW><id>19339031</id><snippet>NumRid</snippet></ROW><ROW><id>19339031</id><snippet>self.NumRid += 1</snippet></ROW><ROW><id>19339031</id><snippet>Person.NumRid += 1</snippet></ROW><ROW><id>19339056</id><snippet>CAT_RIGHT_LIMIT = WINDOWWIDTH - catImg.get_width()
</snippet></ROW><ROW><id>19339056</id><snippet>if catx &gt;= CAT_RIGHT_LIMIT:
    moveRight = False
    catx = CAT_RIGHT_LIMIT
if moveRight == True:
    catx += 5
</snippet></ROW><ROW><id>19339333</id><snippet>from email.utils import make_msgid 
make_msgid()
</snippet></ROW><ROW><id>19339334</id><snippet>_charset</snippet></ROW><ROW><id>19339334</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>19339334</id><snippet>Content-Type</snippet></ROW><ROW><id>19339334</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from email.MIMEText import MIMEText
&gt;&gt;&gt; body = "helloworld"
&gt;&gt;&gt; msg = MIMEText(body, 'plain', _charset='iso-8859-1')
&gt;&gt;&gt; msg['Subject'] = 'asdf'
&gt;&gt;&gt; msg['From'] = 'name &lt;username@example.com&gt;'
&gt;&gt;&gt; msg['Date'] = datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
&gt;&gt;&gt; print msg
From nobody Sun Oct 13 06:22:32 2013
Content-Type: text/plain; charset="iso-8859-1"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable
Subject: asdf
From: name &lt;username@example.com&gt;
Date: Sun, 13 Oct 2013 06:22:30

helloworld
</snippet></ROW><ROW><id>19339344</id><snippet>In [8]: df
Out[8]: 
    A   B   C  D
a   1   2   3  4
b   2 NaN NaN  5
c NaN   7 NaN  2
d NaN   2   4  3

In [11]: df.iloc[1:] + df.iloc[0]
Out[11]: 
    A   B   C  D
b   3 NaN NaN  9
c NaN   9 NaN  6
d NaN   4   7  7
</snippet></ROW><ROW><id>19339344</id><snippet>In [12]: df2 = df.iloc[1:] + df.iloc[0]

In [13]: df.prod()
Out[13]: 
A      2
B     28
C     12
D    120
dtype: float64

In [14]: df2/df.prod()
Out[14]: 
     A         B         C         D
b  1.5       NaN       NaN  0.075000
c  NaN  0.321429       NaN  0.050000
d  NaN  0.142857  0.583333  0.058333
</snippet></ROW><ROW><id>19339372</id><snippet>from scipy import stats
#Studnt, n=999, p&lt;0.05, 2-tail
#equivalent to Excel TINV(0.05,999)
print stats.t.ppf(1-0.025, 999)

#Studnt, n=999, p&lt;0.05%, Single tail
#equivalent to Excel TINV(2*0.05,999)
print stats.t.ppf(1-0.05, 999)
</snippet></ROW><ROW><id>19339373</id><snippet>WSGIProcessGroup myapp
WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>19339376</id><snippet>None</snippet></ROW><ROW><id>19339505</id><snippet>python-bindings.c</snippet></ROW><ROW><id>19339505</id><snippet>setup.py</snippet></ROW><ROW><id>19339505</id><snippet>cd /Users/USRName/Documents/suffix_tree-2.1/</snippet></ROW><ROW><id>19339505</id><snippet>python setup.py</snippet></ROW><ROW><id>19339532</id><snippet>def printGraph2(funcs, n):
    func0 = funcs[0]
    func1 = funcs[1]
</snippet></ROW><ROW><id>19339619</id><snippet>--extra-search-dir virtualenv_support</snippet></ROW><ROW><id>19339621</id><snippet>max(l1) + max(l2)</snippet></ROW><ROW><id>19339621</id><snippet>primes</snippet></ROW><ROW><id>19339621</id><snippet>primes</snippet></ROW><ROW><id>19339621</id><snippet>l2</snippet></ROW><ROW><id>19339621</id><snippet>l2 = set(l2)</snippet></ROW><ROW><id>19339621</id><snippet>l1</snippet></ROW><ROW><id>19339621</id><snippet>l1.sort()</snippet></ROW><ROW><id>19339621</id><snippet>for p in primes:
    for i in l1:
        diff = p - i
        if diff &lt; 0:
            # assuming there are no negative numbers in l2;
            # since l1 is sorted, all diffs at and beyond this
            # point will be negative
            break
        if diff in l2:
           # print whatever you like
           # at this point, p is a prime, and is the
           # sum of diff (from l2) and i (from l1)
</snippet></ROW><ROW><id>19339621</id><snippet>l2</snippet></ROW><ROW><id>19339621</id><snippet>l2 = [2, 3, 100000000000000000000000000000000000000000000000000]
</snippet></ROW><ROW><id>19339621</id><snippet>max(max(l1), max(l2))</snippet></ROW><ROW><id>19339621</id><snippet>def primesum(xs, ys):
    if len(xs) &gt; len(ys):
        xs, ys = ys, xs
    # Now xs is the shorter list.
    xs = sorted(xs)  # don't mutate the input list
    sum_limit = xs[-1] + max(ys)  # largest possible sum
    ys = set(ys)     # make lookups fast
    count = 0
    for p in gen_primes_through(sum_limit):
        for x in xs:
            diff = p - x
            if diff &lt; 0:
                # Since xs is sorted, all diffs at and
                # beyond this point are negative too.
                # Since ys contains no negative integers,
                # no point continuing with this p.
                break
            if diff in ys:
                #print("%s + %s = prime %s" % (x, diff, p))
                count += 1
    return count
</snippet></ROW><ROW><id>19339621</id><snippet>gen_primes_through()</snippet></ROW><ROW><id>19339621</id><snippet>from random import sample
xs = sample(range(100000), 50000)
ys = sample(range(100000), 50000)
print(primesum(xs, ys))
</snippet></ROW><ROW><id>19339621</id><snippet>xrange()</snippet></ROW><ROW><id>19339621</id><snippet>range()</snippet></ROW><ROW><id>19339621</id><snippet>219,334,097
</snippet></ROW><ROW><id>19339621</id><snippet>219,457,533
</snippet></ROW><ROW><id>19339621</id><snippet>def primesum2(xs, ys):
    sum_limit = max(xs) + max(ys)  # largest possible sum
    count = 0
    primes = set(gen_primes_through(sum_limit))
    for i in xs:
        for j in ys:
            if i+j in primes:
                # print("%s + %s = prime %s" % (i, j, i+j))
                count += 1
    return count
</snippet></ROW><ROW><id>19339621</id><snippet>isprime(n)</snippet></ROW><ROW><id>19339621</id><snippet>len(xs) * len(ys)</snippet></ROW><ROW><id>19339621</id><snippet>primesum2()</snippet></ROW><ROW><id>19339621</id><snippet>primesum()</snippet></ROW><ROW><id>19339621</id><snippet>primesum()</snippet></ROW><ROW><id>19339621</id><snippet>primesum()</snippet></ROW><ROW><id>19339787</id><snippet>return set(st)
</snippet></ROW><ROW><id>19339787</id><snippet>from collections import OrderedDict

return ''.join(OrderedDict.fromkeys(st))
</snippet></ROW><ROW><id>19339875</id><snippet>key</snippet></ROW><ROW><id>19339875</id><snippet>sort</snippet></ROW><ROW><id>19339875</id><snippet>import csv
import io

s = u'''text,text,text,11/03/12,text,text,text,UniqueNameClass1,text,text
text,text,text,11/03/12,text,text,text,UniqueNameClass2,text,text
text,text,text,10/03/12,text,text,text,UniqueNameClass3,text,text
text,text,text,12/03/12,text,text,text,UniqueNameClass1,text,text
text,text,text,10/03/12,text,text,text,UniqueNameClass2,text,text
text,text,text,10/03/12,text,text,text,UniqueNameClass5,text,text'''

data = list(csv.reader(io.StringIO(s)))
data.sort(key=lambda row: (row[3], row[7]))
print(u'\n'.join(u','.join(row) for row in data))
</snippet></ROW><ROW><id>19339875</id><snippet>with open('RawDataeDataTest.csv', 'rb') as csvf:
    data = list(csv.reader(csvf))
data.sort(key=lambda row: (row[3], row[7]))
print(u'\n'.join(u','.join(row) for row in data))
</snippet></ROW><ROW><id>19339875</id><snippet>import csv
import functools
import io
import tempfile
import os
import sys

filename = 'RawDataeDataTest.csv'

if sys.version_info &gt;= (3, 0):
    open_args = lambda mode: {'encoding': 'utf-8', 'mode': mode}
else:
    open_args = lambda mode: {'mode': mode + 'b'}

with io.open(filename, **open_args('r')) as csvf:
    data = list(csv.reader(csvf))
data.sort(key=lambda row: (row[3], row[7]))


with tempfile.NamedTemporaryFile(dir=os.path.dirname(filename), delete=False,
                                 **open_args('w')) as of:
    try:
        csv.writer(of).writerows(data)
        of.flush()
    except:
        os.unlink(of.name)
        raise

    try:
        os.replace(of.name, filename)
    except AttributeError:  # Python &lt; 3.3
        if os.name == 'nt':
            os.remove(filename)
        os.rename(of.name, filename)
</snippet></ROW><ROW><id>19339951</id><snippet>XHTMLParser</snippet></ROW><ROW><id>19339951</id><snippet>xhtml=True</snippet></ROW><ROW><id>19339951</id><snippet>if xhtml:
    #TODO: XHTMLParser doesn't see to exist...
    parser = html5lib.XHTMLParser(tree=treebuilders.getTreeBuilder("dom"))
</snippet></ROW><ROW><id>19339953</id><snippet>False</snippet></ROW><ROW><id>19339953</id><snippet>True</snippet></ROW><ROW><id>19339953</id><snippet>SyntaxError</snippet></ROW><ROW><id>19339953</id><snippet>break</snippet></ROW><ROW><id>19339953</id><snippet>input.close()</snippet></ROW><ROW><id>19339953</id><snippet>def checkString(filename, string):
    input = file(filename) # read only will be default file permission
    found = False
    searchString = string
    for line in input:
        if searchString in line:
            found = True
            break

    if callfunc == 'initialize':
        print listdir() #this will print list of files
        print "\n"

    for files in listdir():
        checkString(files,"hello")

    if found:
        print "String found"
    else:
        print "String not found"
    input.close()
</snippet></ROW><ROW><id>19339953</id><snippet>input</snippet></ROW><ROW><id>19339953</id><snippet>with</snippet></ROW><ROW><id>19339953</id><snippet>with</snippet></ROW><ROW><id>19340010</id><snippet>__lshift__</snippet></ROW><ROW><id>19340133</id><snippet>def _mydecorator(function):
    def logger(self):
        self.log = "BLA"
        return function(self)
    return logger
</snippet></ROW><ROW><id>19340238</id><snippet>import pyparsing as pyp

comma = pyp.Literal(',').suppress()
# use parse actions to do type conversion at parse time, so that results fields
# can immediately be used as ints or floats, without additional int() or float()
# calls
floatnum = pyp.Regex(r'([\d\.]+)').setParseAction(lambda t: float(t[0]))
integer = pyp.Word(pyp.nums).setParseAction(lambda t: int(t[0]))

# define the command keyword - I assume there will be other commands too, they
# should follow this general pattern (define the command keyword, then all the
# options, then define the overall command)
aperture_defn_command_keyword = pyp.Literal('AD')

# define a results name for the matched integer - I don't know what this
# option is, wasn't in your original post
d_option = 'D' + integer.setResultsName('D')

# shortcut for defining a results name is to use the expression as a 
# callable, and pass the results name as the argument (I find this much
# cleaner and keeps the grammar definition from getting messy with lots
# of calls to setResultsName)
circular_aperture_defn = 'C' + comma + floatnum('diameter') + 'X'

# define the overall command
aperture_defn_command = aperture_defn_command_keyword("command") + d_option + pyp.Optional(circular_aperture_defn)

# use searchString to skip over '%'s and '*'s, gives us a ParseResults object
test = "%ADD22C,0.35X*%"
appData = aperture_defn_command.searchString(test)[0]

# ParseResults can be accessed directly just like a dict
print appData['command']
print appData['D']
print appData['diameter']

# or if you prefer attribute-style access to results names
print appData.command
print appData.D
print appData.diameter

# convert ParseResults to an actual Python dict, removes all unnamed tokens
print appData.asDict()

# dump() prints out the parsed tokens as a list, then all named results
print appData.dump()
</snippet></ROW><ROW><id>19340238</id><snippet>AD
22
0.35
AD
22
0.35
{'diameter': 0.34999999999999998, 'command': 'AD', 'D': 22}
['AD', 'D', 22, 'C', 0.34999999999999998, 'X']
- D: 22
- command: AD
- diameter: 0.35
</snippet></ROW><ROW><id>19340326</id><snippet>a = FlipKart(BookName = b_name, Quantity = b_quantity, GrandTotal = b_total)</snippet></ROW><ROW><id>19340326</id><snippet>class FlipKart(db.Model):
    name = db.StringProperty()            
    quantity = db.IntegerProperty()
    total = db.IntegerProperty()   
</snippet></ROW><ROW><id>19340326</id><snippet>a = FlipKart(name = b_name, quantity = b_quantity, total = b_total)</snippet></ROW><ROW><id>19340574</id><snippet>map()</snippet></ROW><ROW><id>19340574</id><snippet>map(lambda x: x * 3, numbers)
</snippet></ROW><ROW><id>19340574</id><snippet>[x * 3 for x in numbers]
</snippet></ROW><ROW><id>19340755</id><snippet>print</snippet></ROW><ROW><id>19340786</id><snippet>from collections import defaultdict
</snippet></ROW><ROW><id>19340786</id><snippet>vat = defaultdict(list)
</snippet></ROW><ROW><id>19340938</id><snippet>files = {'files': open('/Users/djangod/text.txt', 'rb')}
#             ^ missing an s
</snippet></ROW><ROW><id>19340938</id><snippet>'files'</snippet></ROW><ROW><id>19341092</id><snippet>food.save (food[0:-4]+ '_X.png')
</snippet></ROW><ROW><id>19341204</id><snippet>{{ my_object.my_property or '' }}
</snippet></ROW><ROW><id>19341281</id><snippet>itertools.combinations</snippet></ROW><ROW><id>19341281</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; array = [1, 2, 3, 4]
&gt;&gt;&gt; [i * j for i, j in combinations(array, 2)]
[2, 3, 4, 6, 8, 12]
</snippet></ROW><ROW><id>19341641</id><snippet>return print(sorted(results, key=operator.itemgetter(1,2)))</snippet></ROW><ROW><id>19341641</id><snippet>print()</snippet></ROW><ROW><id>19341641</id><snippet>None</snippet></ROW><ROW><id>19341641</id><snippet>return None</snippet></ROW><ROW><id>19341641</id><snippet>main()</snippet></ROW><ROW><id>19341641</id><snippet>for person in mkEntry(file1):
    print("1. {0} ({1}): {2}".format(*person))
</snippet></ROW><ROW><id>19341732</id><snippet>previous_pixel = None
for y in xrange(image_test.size[1]):
    for x in xrange(image_test.size[0]):
        currentPixel_2 = image_test.getpixel((x,y))
        if currentPixel_2 == (0,0,0) and previous_pixel:
            image_test.putpixel((x,y), previous_pixel)
        else:
            previous_pixel = currentPixel_2
</snippet></ROW><ROW><id>19341732</id><snippet>previous_pixel</snippet></ROW><ROW><id>19341732</id><snippet>if currentPixel_2 == (0,0,0) and previous_pixel</snippet></ROW><ROW><id>19341732</id><snippet>previous_pixel</snippet></ROW><ROW><id>19341732</id><snippet>previous_pixel</snippet></ROW><ROW><id>19341764</id><snippet>pip install Pillow</snippet></ROW><ROW><id>19341764</id><snippet>easy_install Pillow</snippet></ROW><ROW><id>19341764</id><snippet>python setup.py install</snippet></ROW><ROW><id>19341764</id><snippet>from PIL import ImageChops</snippet></ROW><ROW><id>19341764</id><snippet>import Image
from PIL import ImageChops

im1 = Image.open("splash.png")
im2 = Image.open("splash2.png")

diff = ImageChops.difference(im2, im1)
</snippet></ROW><ROW><id>19341809</id><snippet>@register.inclusion_tag('featured_posts.html')
def featured_posts_list():
    blog_posts = BlogPost.objects.published().filter(
        featured_post=True).select_related("user")
    return {'blog_posts': blog_posts}
</snippet></ROW><ROW><id>19341809</id><snippet>{{ blog_posts.count }}
&lt;ul&gt;
    {% for blog_post in blog_posts %}
        &lt;li&gt;{{ blog_post.title }} &lt;/li&gt;
    {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>19341809</id><snippet>{% load blog_extras keyword_tags i18n_future %}
...
{% featured_blog_posts %}
</snippet></ROW><ROW><id>19341854</id><snippet>context manager</snippet></ROW><ROW><id>19341854</id><snippet>with sqlite3.connect(":memory:") as conn:
    # update will hold in transaction.
    for i in xrange(100):
        conn.execute("insert ....")

pass
# sqlite3 will commit now
</snippet></ROW><ROW><id>19341854</id><snippet>with a() as b:
    # data won't store
    for i in xrange(100):
        # don't store data
        b[i] = i + 5

pass
# data store while leave context
</snippet></ROW><ROW><id>19341854</id><snippet>class MemoryManager(object):
    def __init__(self):
        self.cache = {}
        self.buffer = False

    def __enter__(self):
        self.buffer = True

    def __store(self):
        # store data
        pass

    def __setitem__(self, key, value):
        self.cache[key] = value
        if not self.buffer:
            self.__store()

    def __exit__(self, exc_type, exc_value, traceback):
        self.__store()
        self.buffer = False
</snippet></ROW><ROW><id>19341854</id><snippet>m = MemoryManager()
with m as b:
    # __enter__ got called, set the manager to buffer mode
    # data won't store
    for i in xrange(100):
        # don't store data
        m[i] = i + 5    # in with block, so __store won't be called

pass
# __exit__ got called, __store automatically and leave buffer mode
m[0] = 10  # not in buffer mode, __store will be called 
</snippet></ROW><ROW><id>19341988</id><snippet>correctLetters</snippet></ROW><ROW><id>19341988</id><snippet>correctLetters = ''</snippet></ROW><ROW><id>19341988</id><snippet>while</snippet></ROW><ROW><id>19341988</id><snippet>if guess in secretWord:
    correctLetters = correctLetters + guess
</snippet></ROW><ROW><id>19341988</id><snippet>displayBoard</snippet></ROW><ROW><id>19342037</id><snippet>a &gt; b
</snippet></ROW><ROW><id>19342037</id><snippet>a.__gt__(b)
</snippet></ROW><ROW><id>19342037</id><snippet>a</snippet></ROW><ROW><id>19342037</id><snippet>str</snippet></ROW><ROW><id>19342037</id><snippet>str.__gt__(b)</snippet></ROW><ROW><id>19342037</id><snippet>a</snippet></ROW><ROW><id>19342037</id><snippet>x.__gt__(y)</snippet></ROW><ROW><id>19342037</id><snippet>True</snippet></ROW><ROW><id>19342037</id><snippet>x</snippet></ROW><ROW><id>19342037</id><snippet>y</snippet></ROW><ROW><id>19342037</id><snippet>gt</snippet></ROW><ROW><id>19342037</id><snippet>a.__cmp__(b)</snippet></ROW><ROW><id>19342037</id><snippet>__cmp__</snippet></ROW><ROW><id>19342037</id><snippet>a</snippet></ROW><ROW><id>19342037</id><snippet>str</snippet></ROW><ROW><id>19342037</id><snippet>__gt__</snippet></ROW><ROW><id>19342037</id><snippet>a &gt; b</snippet></ROW><ROW><id>19342037</id><snippet>lt, le, eq, ne, gt, ge</snippet></ROW><ROW><id>19342037</id><snippet>cmp</snippet></ROW><ROW><id>19342078</id><snippet># in student.py
class Student:
    Id=""

    def __init__(self, Id):
        self.Id = Id

# in main.py, assume main.py and student.py are in the same folder.
def main():
    from student import Student
    print("is workign")
    temp =  Student("50")  ## I want to create the object of class Student and send an attribute

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19342372</id><snippet>next()</snippet></ROW><ROW><id>19342372</id><snippet>&gt;&gt;&gt; b = map(obj.getDateTimeStat,data)
&gt;&gt;&gt; next(b)
Hello
&gt;&gt;&gt; next(b)
Hello
&gt;&gt;&gt; next(b)
Hello
&gt;&gt;&gt; next(b)
Hello
&gt;&gt;&gt; next(b)
Hello
&gt;&gt;&gt; next(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>19342372</id><snippet>&gt;&gt;&gt; b = list(map(obj.getDateTimeStat,data))
Hello
Hello
Hello
Hello
Hello
</snippet></ROW><ROW><id>19342516</id><snippet>rating</snippet></ROW><ROW><id>19342516</id><snippet>empty=np.where(ratings==0)
for (x,y) in zip(empty[0],empty[1]):
    ratings[x,y] = sum( ratings[n][y] * weights[x][y] for n in weights[x] if ratings[n][y] != 0) / sum( weights[x][w] for w in weights[x] if ratings[w,x] != 0 )
</snippet></ROW><ROW><id>19342516</id><snippet>empty=np.where(ratings==0)
for (x,y) in zip(empty[0],empty[1]):
    normalizer = sum( weights[x][w] for w in weights[x] if ratings[w,x] != 0 )
    if normalizer &gt; 0:
        ratings[x,y] = sum( ratings[n,y] * weights[x][y] for n in weights[x] if ratings[n][y] != 0) / normalizer
</snippet></ROW><ROW><id>19342835</id><snippet>ForeignKey</snippet></ROW><ROW><id>19342835</id><snippet>ManyToMany</snippet></ROW><ROW><id>19342835</id><snippet>class Group(models.Model):
    group_name = models.CharField()

class Contact(models.Model):
    contact_name = models.ForeignKey(Group)

{{ group.contact_set.all }}
</snippet></ROW><ROW><id>19342835</id><snippet>_set</snippet></ROW><ROW><id>19342835</id><snippet>Contact</snippet></ROW><ROW><id>19342835</id><snippet>class Contact(models.Model):
    contact_name = models.ForeignKey(Group, related_name='contacts')
</snippet></ROW><ROW><id>19342835</id><snippet>related_name</snippet></ROW><ROW><id>19342835</id><snippet>_set</snippet></ROW><ROW><id>19342835</id><snippet>{{ group.contacts.all }}
</snippet></ROW><ROW><id>19342906</id><snippet>wget https://github.com/ryanmcgrath/twython-django/archive/master.zip
unzip master.zip
cd twython-django-master
sudo python setup.py install
</snippet></ROW><ROW><id>19342964</id><snippet>coininfo = [ {} for k in range(0,numberOftrials)]
</snippet></ROW><ROW><id>19342964</id><snippet>coininfo[i]</snippet></ROW><ROW><id>19342964</id><snippet>coininfo = [ [] for k in range(0,numberOftrials)]
</snippet></ROW><ROW><id>19342964</id><snippet>coininfo[i][x] = outcome(x)
</snippet></ROW><ROW><id>19342964</id><snippet>coininfo[i].append([x,outcome(x)])
</snippet></ROW><ROW><id>19343066</id><snippet>unshorten_url("http://bit.ly/1atTViN")
</snippet></ROW><ROW><id>19343066</id><snippet>http://</snippet></ROW><ROW><id>19343066</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urlparse('bit.ly/1atTViN')
ParseResult(scheme='', netloc='', path='bit.ly/1atTViN', params='', query='', fragment='')
&gt;&gt;&gt; urlparse.urlparse('http://bit.ly/1atTViN')
ParseResult(scheme='http', netloc='bit.ly', path='/1atTViN', params='', query='', fragment='')
</snippet></ROW><ROW><id>19343066</id><snippet>netloc</snippet></ROW><ROW><id>19343066</id><snippet>http://</snippet></ROW><ROW><id>19343099</id><snippet>HTTPError</snippet></ROW><ROW><id>19343099</id><snippet>Response</snippet></ROW><ROW><id>19343099</id><snippet>def get_url_fp(image_url, request_kwargs=None):
    response = requests.get(some_url, **request_kwargs)
    response.raise_for_status()
    return response.raw


try:
    a = "http://example.com"
    fp = get_url_fp(a)

except HTTPError as e:
    # Need to check its an 404, 503, 500, 403 etc.
    status_code = e.response.status_code
</snippet></ROW><ROW><id>19343269</id><snippet>logging.config</snippet></ROW><ROW><id>19343269</id><snippet>format</snippet></ROW><ROW><id>19343269</id><snippet>datefmt</snippet></ROW><ROW><id>19343269</id><snippet>class</snippet></ROW><ROW><id>19343269</id><snippet>converter</snippet></ROW><ROW><id>19343269</id><snippet>class</snippet></ROW><ROW><id>19343269</id><snippet>logging.Formatter()</snippet></ROW><ROW><id>19343269</id><snippet>from logging import Formatter
import time

class GMTFormatter(Formatter):
    converter = time.gmtime
</snippet></ROW><ROW><id>19343269</id><snippet>formatters:
  simple:
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    class: ext://your.module.GMTFormatter
</snippet></ROW><ROW><id>19343366</id><snippet>sqlfillOffers = (
    "INSERT INTO offers (offer_id, url, price, currency_id, typePrefix, vendor, model, description) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, )"
)

cursor.execute(
    sqlfilOffers,
    (offer_id, offer_url, offer_price, offer_CurrId, offer_typePrefix, offer_vendor, offer_model, offer_description)
)
</snippet></ROW><ROW><id>19343382</id><snippet>badguy[0]-=7
</snippet></ROW><ROW><id>19343382</id><snippet>BADGER_SPEED=7</snippet></ROW><ROW><id>19343382</id><snippet>badguy[0]-=BADGER_SPEED
</snippet></ROW><ROW><id>19343382</id><snippet>badguys.append([640, random.randint(50,430)])
</snippet></ROW><ROW><id>19343446</id><snippet>def default_handler(parsed_url):
    pass

def youtube_handler(parsed_url):
    pass

def hulu_handler(parsed_url):
    pass

handlers = {
    'www.youtube.com': youtube_handler,
    'hulu.com':        hulu_handler,
}

handler = handlers.get(urlParsed.netloc, default_handler)
handler(urlParsed)
</snippet></ROW><ROW><id>19343578</id><snippet>*args</snippet></ROW><ROW><id>19343578</id><snippet>spacing.format(*l)
</snippet></ROW><ROW><id>19343578</id><snippet>l</snippet></ROW><ROW><id>19343578</id><snippet>.format()</snippet></ROW><ROW><id>19343578</id><snippet>spacing</snippet></ROW><ROW><id>19343578</id><snippet>l</snippet></ROW><ROW><id>19343578</id><snippet>spacing = "{:&lt;2} " * len(l)
</snippet></ROW><ROW><id>19343578</id><snippet>str.join()</snippet></ROW><ROW><id>19343578</id><snippet>spacing = ' '.join(['{:&lt;2}'] * len(l))
</snippet></ROW><ROW><id>19343578</id><snippet>&gt;&gt;&gt; l = ['A','B','C','D','E','F','G','H','I','J']
&gt;&gt;&gt; spacing = ' '.join(['{:&lt;2}'] * len(l))
&gt;&gt;&gt; spacing.format(*l)
'A  B  C  D  E  F  G  H  I  J '
</snippet></ROW><ROW><id>19343762</id><snippet>def set_if_not_there(d, fields, default_factory=None):
    if default_factory is None:
        default_factory = lambda: None
    for field in fields:
        if not field in d:
            d[field] = default_factory()
</snippet></ROW><ROW><id>19343762</id><snippet>set_if_not_there(d, ['cnt1', 'cnt2'], int)
set_if_not_there(d, ['tags1', 'tags2'], list)
</snippet></ROW><ROW><id>19343762</id><snippet>int()</snippet></ROW><ROW><id>19343762</id><snippet>0</snippet></ROW><ROW><id>19343762</id><snippet>list()</snippet></ROW><ROW><id>19343762</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19343762</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; set_if_not_there(d, ['cnt1', 'cnt2'], int)
&gt;&gt;&gt; set_if_not_there(d, ['tags1', 'tags2'], list)
&gt;&gt;&gt; d['cnt1'] += 1
&gt;&gt;&gt; d['tags1'].append('work')
&gt;&gt;&gt; print d
{'tags2': [], 'cnt2': 0, 'cnt1': 1, 'tags1': ['work']}
</snippet></ROW><ROW><id>19343814</id><snippet>numpy.argmax</snippet></ROW><ROW><id>19343814</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.argmax([5, 4, 3, 9, 1, 2])
3
&gt;&gt;&gt; numpy.argmax([10, 5, 4, 3, 9, 1, 2])
0
</snippet></ROW><ROW><id>19343814</id><snippet>import numpy

def find_max_index(xs):
    candidates = [((i,numpy.argmax(x))) for i, x in enumerate(xs)]
    return max(candidates, key=lambda pos: xs[pos[0]][pos[1]])
</snippet></ROW><ROW><id>19343814</id><snippet>&gt;&gt;&gt; n = [7,1,54,812,124,6,21]
&gt;&gt;&gt; c = [1,23,5,6,2,345]
&gt;&gt;&gt; find_max_index([n, c])
(0, 3)
</snippet></ROW><ROW><id>19343903</id><snippet>sudo apt-get install python-cairo
</snippet></ROW><ROW><id>19344000</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19344000</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>19344000</id><snippet>from collections import defaultdict
import csv

# you probably can think up better names
fields = ('x', 'class', 'indicator', 'col3', 'col4', 'col5', 'col6', 'col7', 'col8')

entries = defaultdict(list)

with open(filename, 'rb') as fd:
    reader = csv.DictReader(fd, fields)

    for row in reader:
        # each row is now a dictionary
        # make your numbers, numbers
        for field in fields[3:]:
            row[field] = row[field] and float(row[field])

        previous = entries[row['indicator']]
        for p in previous:
            if (row['col3'], row['col6']) == (2, 2) and (p['col3'], p['col6']) == (1, 1):
                print 'text data text {p[class]} text data {r[class]} text {r[col8]}'.format(p=p, r=row)
            # etc, testing againts previous rows with the same indicator

        # remember this row for later rows to match against.
        previous.append(row)
</snippet></ROW><ROW><id>19344000</id><snippet>text data text classq text data classqe text 3.1
</snippet></ROW><ROW><id>19344000</id><snippet>(col3, col6)</snippet></ROW><ROW><id>19344000</id><snippet>from collections import defaultdict
import csv

# you probably can think up better names
fields = ('x', 'class', 'indicator', 'col3', 'col4', 'col5', 'col6', 'col7', 'col8')

entries = defaultdict(dict)

with open(filename, 'rb') as fd:
    reader = csv.DictReader(fd, fields)

    for row in reader:
        # each row is now a dictionary
        # make your numbers, numbers
        for field in fields[3:]:
            row[field] = row[field] and float(row[field])

        key = (row['col3'], row['col6'])
        previous = entries[row['indicator']]

        # scenario 1
        if key == (2, 2) and (1, 1) in previous:
            p = previous[(1, 1)]
            print 'text data text {p[class]} text data {r[class]} text {r[col8]}'.format(p=p, r=row)

        # scenario 3
        if key = (3, 3) and (1, 1) in previous and (2, 2) in previous:
            print 'text data text data {r[col8]}'.format(r=row)

        # remember this row for later rows to match against.
        previous[key] = row
</snippet></ROW><ROW><id>19344212</id><snippet>def __iter__(self):
    for k in self.keys():
        yield k
</snippet></ROW><ROW><id>19344212</id><snippet>DictMixin</snippet></ROW><ROW><id>19344212</id><snippet>__iter__</snippet></ROW><ROW><id>19344276</id><snippet>{...}</snippet></ROW><ROW><id>19344276</id><snippet>dic1 = {
    'bug':'A broken piece of code that causes a program to stop functioning',
    'string':'A piece of text',
    'integer':'A whole number',
    'float':'A decimal number',
    'function':'A block of organized and clean code that performs a task/action',
    'syntax':'A set of rules that says how a program will be coded',      
    }
</snippet></ROW><ROW><id>19344302</id><snippet>struct.pack('&lt;l', len(message))+struct.pack('&lt;l',0)+message
</snippet></ROW><ROW><id>19344302</id><snippet>BitConverter.GetBytes((long)message.length) + BitConverter.GetBytes(0l) + message
</snippet></ROW><ROW><id>19344302</id><snippet>var bytes = new List&lt;byte[]&gt;(new[]
    {
        LittleEndianBitConverter.GetBytes(message.LongLength), 
        LittleEndianBitConverter.GetBytes(0l), 
        message
    });

var msg = new byte[bytes.Sum(barray =&gt; barray.LongLength)];
int offset = 0;
foreach (var bArray in bytes)
{
    System.Buffer.BlockCopy(bArray, 0, msg, offset, bArray.Length);
    offset = bArray.Length;
}
</snippet></ROW><ROW><id>19344302</id><snippet>Struct.Pack('&lt;l', 0)</snippet></ROW><ROW><id>19344302</id><snippet>import struct
message =  b'message "Render"'
msg = struct.pack('&lt;l',len(message)) + struct.pack('&lt;l',0) + message
print(":".join("{0:x}".format(ord(c)) for c in msg))
</snippet></ROW><ROW><id>19344302</id><snippet>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MiscUtil.Conversion;

public class Test
{
    public static void Main()
    {
        var message = Encoding.ASCII.GetBytes("message \"Render\"");

            var lenc = new LittleEndianBitConverter();

            var bytes = new List&lt;byte[]&gt;(new[]
            {
                lenc.GetBytes(message.LongLength),
                message
            });

            var msg = new byte[bytes.Sum(barray =&gt; barray.LongLength)];
            int offset = 0;
            foreach (var bArray in bytes)
            {
                Buffer.BlockCopy(bArray, 0, msg, offset, bArray.Length);
                offset = bArray.Length;
            }

            Console.WriteLine(BitConverter.ToString(msg).Replace("-", ":"));
    }
}
</snippet></ROW><ROW><id>19344351</id><snippet>out = file(OUTPUTFOLDER + os.path.splitext(filename)[0]+ "-2.jpeg", "wb")
</snippet></ROW><ROW><id>19344389</id><snippet>from lxml import etree
import pandas as pd

tree = etree.parse("http://charts.realclearpolitics.com/charts/1044.xml")

date = [s.text for s in tree.xpath("series/value")]
approve = [float(s.text) if s.text else 0.0
           for s in tree.xpath("graphs/graph[@title='Approve']/value")]
disapprove = [float(s.text) if s.text else 0.0
              for s in tree.xpath("graphs/graph[@title='Disapprove']/value")]

assert len(date) == len(approve) == len(disapprove)

finalresult = pd.DataFrame({'Date': date, 'Approve': approve, 'Disapprove': disapprove})
print finalresult
</snippet></ROW><ROW><id>19344389</id><snippet>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 1727 entries, 0 to 1726
Data columns (total 3 columns):
Date          1727  non-null values
Approve       1727  non-null values
Disapprove    1727  non-null values
dtypes: float64(2), object(1)
</snippet></ROW><ROW><id>19344569</id><snippet>d = {'A1':['Plain'], 'A2':['Beach'], 'A3':['Swamp']}
</snippet></ROW><ROW><id>19344569</id><snippet>from File1 import d
coords = 'A1'
location = d[coords]
</snippet></ROW><ROW><id>19344644</id><snippet>link_db=models.Arts()</snippet></ROW><ROW><id>19344644</id><snippet>post</snippet></ROW><ROW><id>19344644</id><snippet>from django.shortcuts import render, get_object_or_404

def artdetail(request,arts_id,slug):
      post = get_object_or_404(Post, id=arts_id,slug=slug)
      currentUrl = request.build_absolute_uri(post.get_short_id())
      return render(request,
                    'postdetail.html',
                    {'post':post,'Arts':Arts,'currentUrl':currentUrl})
</snippet></ROW><ROW><id>19344721</id><snippet>num</snippet></ROW><ROW><id>19344721</id><snippet>&gt;&gt;&gt; num = ( "which no. u want to check prime or not:" )
&gt;&gt;&gt; num % 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not all arguments converted during string formatting
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19344721</id><snippet>raw_input()</snippet></ROW><ROW><id>19344721</id><snippet>&gt;&gt;&gt; num = int(raw_input( "which no. u want to check prime or not:" ))
which no. u want to check prime or not:1
&gt;&gt;&gt; num
1
</snippet></ROW><ROW><id>19344811</id><snippet>from collections import OrderedDict

d = OrderedDict()
d['name'] = "Pratik"
d['age'] = 17
d['country'] = "India"

print d
</snippet></ROW><ROW><id>19344950</id><snippet>itertools.product</snippet></ROW><ROW><id>19344950</id><snippet>&gt;&gt;&gt; for xs in itertools.product('ab', repeat=2): # 2 == len('ab')
...     print(xs)
...
('a', 'a')
('a', 'b')
('b', 'a')
('b', 'b')
&gt;&gt;&gt; for xs in itertools.product('ab', repeat=2):
...     print(''.join(xs))
...
aa
ab
ba
bb
</snippet></ROW><ROW><id>19344965</id><snippet>background</snippet></ROW><ROW><id>19344965</id><snippet>fill</snippet></ROW><ROW><id>19344965</id><snippet>label_DocRoot.pack(fill="x")</snippet></ROW><ROW><id>19344965</id><snippet>grid</snippet></ROW><ROW><id>19344965</id><snippet>f.grid()
label_DocRoot.grid(row=1, column=1, sticky=Tkinter.W)
text_DR.grid(row=2, column=1, sticky=Tkinter.W)
label_Port.grid(row=3, column=1, sticky=Tkinter.W)
text_P.grid(row=4, column=1, sticky=Tkinter.W)
</snippet></ROW><ROW><id>19344965</id><snippet>row</snippet></ROW><ROW><id>19344965</id><snippet>column</snippet></ROW><ROW><id>19344965</id><snippet>Text</snippet></ROW><ROW><id>19344965</id><snippet>Entry</snippet></ROW><ROW><id>19344987</id><snippet>curses</snippet></ROW><ROW><id>19345231</id><snippet>from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def startNewVoting(request):
  from querystring_parser import parser
  p = parser.parse(request.POST.urlencode())
  for key, track in p['tracks'].iteritems():
    print track
    # save to db...
</snippet></ROW><ROW><id>19345249</id><snippet>{# in validation.html #}
&lt;ul&gt;
{% for value, is_valid, validity_message in data %}
    &lt;li&gt;{{ value }}: {{ validity_message }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>19345249</id><snippet>value: validity_message</snippet></ROW><ROW><id>19345249</id><snippet>&lt;ul&gt;
    &lt;li&gt;A: probably valid&lt;/li&gt;
    &lt;li&gt;B: no mx record&lt;/li&gt;
    &lt;!-- ... etc. ... --&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>19345249</id><snippet>d</snippet></ROW><ROW><id>19345249</id><snippet>iter</snippet></ROW><ROW><id>19345249</id><snippet>def validate_emails(names, domain, catchall):
    # run validation logic
    for name in names:
        email = name + "@" + domain
        has_mx = validate_email(email, check_mx=True)
        is_real = validate_email(email, verify=True)
        is_catchall = name == catchall

        if not has_mx:
            yield name, False, "no mx record"
            break
        elif is_real and is_catchall:
            yield name, False, "catchall detected"
        elif is_real and not is_catchall:
            yield email, True, "probably valid" 
        else:
            yield email, False, "not valid"
</snippet></ROW><ROW><id>19345249</id><snippet>messages = validate_emails(["a", "b", "c"], "somedomain.com", "sales")
return render_template("validation.html", data=messages)
</snippet></ROW><ROW><id>19345440</id><snippet>dict</snippet></ROW><ROW><id>19345440</id><snippet>dict</snippet></ROW><ROW><id>19345440</id><snippet>URL = 'http://www.something.com/index.html?'
params = {'field1': 'something': 'field2': 'something', 'field3': 'something'}

import requests
r = requests.get(URL, params=params)
params['field2'] = 'something else'
r = requests.get(URL, params=params)
</snippet></ROW><ROW><id>19345440</id><snippet>import urllib, urllib2
page = urllib2.urlopen(URL + urllib.urlencode(params))
</snippet></ROW><ROW><id>19345567</id><snippet>'PNG'</snippet></ROW><ROW><id>19345567</id><snippet>50</snippet></ROW><ROW><id>19345567</id><snippet>P</snippet></ROW><ROW><id>19345567</id><snippet>4e</snippet></ROW><ROW><id>19345567</id><snippet>N</snippet></ROW><ROW><id>19345567</id><snippet>47</snippet></ROW><ROW><id>19345567</id><snippet>G</snippet></ROW><ROW><id>19345567</id><snippet>import binascii
ff = open("cat.png", "rb")
data = ff.read()
ff.close()

txt = binascii.hexlify(data)

fw = open("cat.txt", "w")
fw.write(txt)
fw.close()
</snippet></ROW><ROW><id>19345567</id><snippet>import binascii

ff = open("cat.txt", "r")
txt = ff.read()
ff.close()

image = binascii.unhexlify(txt)
</snippet></ROW><ROW><id>19345567</id><snippet>import binascii

ff = open("cat.txt", "r")
txt = ff.read()
ff.close()

# Split on space, join back with no separator
txt = "".join(txt.split()) 

image = binascii.unhexlify(txt)
</snippet></ROW><ROW><id>19345626</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; id="j4156f9150ece727e38bbf982634ee"  
&gt;&gt;&gt; cookie = {'id': id}
&gt;&gt;&gt; content = requests.post('http://www.google.com',cookies=cookie)
&gt;&gt;&gt; print id
j4156f9150ece727e38bbf982634ee
&gt;&gt;&gt; print cookie
{'id': 'j4156f9150ece727e38bbf982634ee'}
&gt;&gt;&gt; print content.url
http://www.google.com/
&gt;&gt;&gt; print content.cookies
&lt;&lt;class 'requests.cookies.RequestsCookieJar'&gt;[&lt;Cookie id=j4156f9150ece727e38bbf982634ee for /&gt;]&gt;
&gt;&gt;&gt; print content.cookies.get('id')
j4156f9150ece727e38bbf982634ee
</snippet></ROW><ROW><id>19345898</id><snippet>strA = '0.8243'
strB = '12.3'
C = float(strA) + float(strB)
print '{:.{}f}'.format(C, len(strB.partition('.')[2]))
</snippet></ROW><ROW><id>19345898</id><snippet>13.1
</snippet></ROW><ROW><id>19345902</id><snippet>return</snippet></ROW><ROW><id>19345902</id><snippet>r</snippet></ROW><ROW><id>19346078</id><snippet>clamp_sel = [int(clamp_normalized[i][j][0])
    for i in range(0, len(clamp_normalized))
    for j in range(0, len(clamp_normalized[i]))
    if clamp_normalized[i][j][0] &lt; int(max_min_band[index_selec])]
</snippet></ROW><ROW><id>19346078</id><snippet>xx.append(yy)</snippet></ROW><ROW><id>19346078</id><snippet>yy</snippet></ROW><ROW><id>19346078</id><snippet>[]</snippet></ROW><ROW><id>19346078</id><snippet>range()</snippet></ROW><ROW><id>19346247</id><snippet>import pandas as pd
import io

content = io.BytesIO('''index ID
7     2035200584
8     2035200584
9     2035200584
31    2038128459
32    2038128459
33    2038128459
42    2053561908
43    2053561908
44    2053561908''')

df = pd.read_table(content, sep='\s+', header=0)

df['ID'] = df.groupby('ID')['ID'].transform(
    lambda x: map('{:.0f}_{:.0f}'.format, x, x.rank('first')))

print(df)
</snippet></ROW><ROW><id>19346247</id><snippet>   index            ID
0      7  2035200584_1
1      8  2035200584_2
2      9  2035200584_3
3     31  2038128459_1
4     32  2038128459_2
5     33  2038128459_3
6     42  2053561908_1
7     43  2053561908_2
8     44  2053561908_3
</snippet></ROW><ROW><id>19346344</id><snippet>list(the_iterator)</snippet></ROW><ROW><id>19346475</id><snippet>type</snippet></ROW><ROW><id>19346475</id><snippet>class my_class:
    ...
</snippet></ROW><ROW><id>19346475</id><snippet>class my_class(object):
    ...
</snippet></ROW><ROW><id>19346475</id><snippet>my_class</snippet></ROW><ROW><id>19346716</id><snippet>img</snippet></ROW><ROW><id>19346716</id><snippet>thresh</snippet></ROW><ROW><id>19346716</id><snippet>less</snippet></ROW><ROW><id>19346716</id><snippet>img&amp;less</snippet></ROW><ROW><id>19346716</id><snippet>img = cv2.cvtColor(thresh1, cv2.COLOR_GRAY2BGR)
</snippet></ROW><ROW><id>19346736</id><snippet>z-index</snippet></ROW><ROW><id>19346736</id><snippet>position</snippet></ROW><ROW><id>19346792</id><snippet>from google.appengine.ext.webapp.util import run_wsgi_app
import webapp2
from urllib import urlencode, urlopen
from xml.dom import minidom
import hashlib
import os

HOST = 'http://api.flickr.com'
API = '/services/rest'
API_KEY = 'my_key'

debug = False

class MainPage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/html'

        data = _doget('flickr.photos.search', auth=False, text='boston', per_page='2')

        if data:
            photos = data.getElementsByTagName("photo")
            for photo in photos:
                farm_id = 1 # ???
                server_id = photo.attributes['server'].value
                photo_id = photo.attributes['id'].value
                secret = photo.attributes['secret'].value
                photo_url = 'http://farm{farm_id}.staticflickr.com/{server_id}/{photo_id}_{secret}.jpg'.format(farm_id=farm_id,                                                                                                         server_id=server_id,                                                                                                         photo_id=photo_id,                                                                                                         secret=secret)
                self.response.write('&lt;img src="{0}"&gt;'.format(photo_url))
        else:
            self.response.write('Error')


def _doget(method, auth=False, **params):
    #print "***** do get %s" % method

    params = params
    url = '%s%s/?api_key=%s&amp;method=%s&amp;%s'% \
      (HOST, API, API_KEY, method, urlencode(params))

    #another useful debug print statement
    if debug:
        print "_doget", url

    res = urlopen(url)
    res = res.read()

    return minidom.parseString(res)


application = webapp2.WSGIApplication([('/', MainPage),], debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19346792</id><snippet>import json
from google.appengine.api import urlfetch

# ...

class MainPage(webapp2.RequestHandler):
    def get(self):
        # ...
        for photo in data['photos']['photo']:
            farm_id = 1 # ???
            server_id = photo['server']
            photo_id = photo['id']
            secret = photo['secret']
            # ...

def _doget(method, auth=False, **params):
    # ...
    url = '%s%s/?api_key=%s&amp;method=%s&amp;%s&amp;format=json'% \
      (HOST, API, API_KEY, method, urlencode(params))

    res = urlfetch.fetch(url).content

    # Flickr JSON api returns not valid JSON, which wrapped with "jsonFlickrApi(...)", so we get rid of it.
    if 'jsonFlickrApi(' in res:
        return res[14:-1]

    return json.loads(res)
</snippet></ROW><ROW><id>19346925</id><snippet>In [17]: df = DataFrame(dict(A = [1,2,0,0,0],B=[0,0,0,10,11],C=[3,4,5,6,7]))

In [18]: df
Out[18]: 
   A   B  C
0  1   0  3
1  2   0  4
2  0   0  5
3  0  10  6
4  0  11  7
</snippet></ROW><ROW><id>19346925</id><snippet>In [19]: mask = df['A'] == 0

In [20]: for col in ['A','B']:
   ....:     df.loc[mask,col] = df['C']
   ....:     

In [21]: df
Out[21]: 
   A  B  C
0  1  0  3
1  2  0  4
2  5  5  5
3  6  6  6
4  7  7  7
</snippet></ROW><ROW><id>19346986</id><snippet>build/python/2.X</snippet></ROW><ROW><id>19346986</id><snippet>/Library/Python/2.X/site-packages/</snippet></ROW><ROW><id>19347216</id><snippet>lambda</snippet></ROW><ROW><id>19347216</id><snippet>geom1</snippet></ROW><ROW><id>19347216</id><snippet>datasource_layer2</snippet></ROW><ROW><id>19347216</id><snippet>open_file_dialog()</snippet></ROW><ROW><id>19347216</id><snippet>trip_calculator</snippet></ROW><ROW><id>19347216</id><snippet>self.datasource_layer2 = datasource_layer2</snippet></ROW><ROW><id>19347216</id><snippet>self.geom1 = geom1</snippet></ROW><ROW><id>19347216</id><snippet>self</snippet></ROW><ROW><id>19347388</id><snippet>select.select</snippet></ROW><ROW><id>19347388</id><snippet>rlist</snippet></ROW><ROW><id>19347388</id><snippet>wlist</snippet></ROW><ROW><id>19347388</id><snippet>xlist</snippet></ROW><ROW><id>19347388</id><snippet>ready = select.select([s], [s], [s], 1)
</snippet></ROW><ROW><id>19347388</id><snippet>ready</snippet></ROW><ROW><id>19347388</id><snippet>break</snippet></ROW><ROW><id>19347388</id><snippet>c.send</snippet></ROW><ROW><id>19347452</id><snippet>master=parent</snippet></ROW><ROW><id>19347452</id><snippet>master</snippet></ROW><ROW><id>19347452</id><snippet>self</snippet></ROW><ROW><id>19347570</id><snippet>gformat = (inst_del +
           cmd_format('gerber-command') +
           format_zeros +
           format_notation +
           'X' + pyp.Group(format_data)('x') + 
           'Y' + pyp.Group(format_data)('y') + 
           inst_end +
           inst_del)
</snippet></ROW><ROW><id>19347570</id><snippet>aword = Word("A")
bword = Word("B")
cword = Word("C")

preface = aword + bword
body = cword
ending = aword + bword

totalExpr = preface + body + ending

print totalExpr.parseString("AA BB CCC A B").asList()
</snippet></ROW><ROW><id>19347570</id><snippet>['AA', 'BB', 'CCC', 'A', 'B']
</snippet></ROW><ROW><id>19347570</id><snippet>totalExpr = Group(preface) + body + Group(ending)
</snippet></ROW><ROW><id>19347570</id><snippet>[['AA', 'BB'], 'CCC', ['A', 'B']]
</snippet></ROW><ROW><id>19347570</id><snippet>preface = aword("As") + bword("Bs")
body = cword
ending = aword("As") + bword("Bs")

totalExpr = Group(preface)("preface") + body("body") + Group(ending)("ending")
print totalExpr.parseString("AA BB CCC A B").dump()
</snippet></ROW><ROW><id>19347570</id><snippet>[['AA', 'BB'], 'CCC', ['A', 'B']]
- body: CCC
- ending: ['A', 'B']
  - As: A
  - Bs: B
- preface: ['AA', 'BB']
  - As: AA
  - Bs: BB
</snippet></ROW><ROW><id>19347712</id><snippet>import itertools
import numpy as np
N = 10000
H1 = [np.array([0.04,0.03,0.01,0.002])] * N
H2 = [np.array([0.06,0.02,0.02,0.004])] * N

D1 = np.array([0.01,0.02,0.1,0.01]    )
D2 = np.array([0.1,0.3,0.01,0.4] )

Tp = np.sum(D1)    
Tn = np.sum(D2) 

T = []    
append2 = T.append   
E = []    
append3 = E.append   

for h1,h2 in itertools.izip(H1,H2):
    Err = []    
    append1 = Err.append
    for v in h1:

        #L1 = [1 if i&gt;=v else 0 for i in h1]    
        #L2 = [1 if i&gt;=v else 0 for i in h2]    
        L1 = h1 &gt; v
        L2 = h2 &gt; v
        Sp = np.dot(D1,L1)     
        Sn = np.dot(D2,L2)    

        err = min(Sp+Tn-Sn, Sn+Tp-Sp)    
        append1(err)  

    b = np.argmin(Err)    
    append2(h1[b])    
    append3(Err[b])
</snippet></ROW><ROW><id>19347753</id><snippet>postgresql.conf</snippet></ROW><ROW><id>19347753</id><snippet>max_connections</snippet></ROW><ROW><id>19347753</id><snippet>sysctl -w kernel.shmmax=1073741824
</snippet></ROW><ROW><id>19347792</id><snippet>&gt;&gt;&gt; old_dict = {29: ['15', '26', '16', '24', '4'], 30: ['25', '16', '18', '21', '19', '4'], 31: ['2'], 32: ['17', '20', '4'], 33: ['28', '20', '22', '4'], 34: ['24', '30', '9', '4', '36'], 35: ['33', '27', '22', '23', '32', '40', '17', '10', '20', '27', '28', '5'], 36: ['34', '5', '39'], 37: ['30', '28', '25', '29', '24', '21', '5'], 38: ['29', '27', '33', '35', '22', '26', '4'], 39: ['2'], 40: ['4', '41'], 41: ['40', '23', '20', '3'], 42: ['36', '21', '31', '2'], 43: ['35', '28', '37', '5'], 44: ['38', '20', '33', '28', '4', '48', '45'], 45: ['38', '43', '29', '30', '4'], 46: ['39', '34', '42', '31', '36', '2'], 47: ['41', '32', '20', '32', '40', '2'], 48: ['45', '44', '38', '37', '49', '37', '43', '4'], 49: ['48', '35', '43', '44', '43', '45', '3']}
&gt;&gt;&gt; new_dict = {k:len(v) for k,v in old_dict.iteritems()}
&gt;&gt;&gt; print new_dict
 {32: 3, 33: 4, 34: 5, 35: 12, 36: 3, 37: 7, 38: 7, 39: 1, 40: 2, 41: 4, 42: 4, 43: 4, 44: 7, 45: 5, 46: 6, 47: 6, 48: 8, 49: 7, 29: 5, 30: 6, 31: 1}
</snippet></ROW><ROW><id>19347797</id><snippet>dict{...}</snippet></ROW><ROW><id>19347797</id><snippet>dict(...)</snippet></ROW><ROW><id>19347797</id><snippet>OrderedDict{...}</snippet></ROW><ROW><id>19347797</id><snippet>dict</snippet></ROW><ROW><id>19347797</id><snippet>OrderedDict</snippet></ROW><ROW><id>19347797</id><snippet>('e':8,'data[1]','9')</snippet></ROW><ROW><id>19347797</id><snippet>('e',8),('data[1]','9')</snippet></ROW><ROW><id>19347797</id><snippet>from collections import OrderedDict

payload = dict([('f','1'),('s','2'),('t','3'),('f','4'),('ft','5'),('s','6'),('se','7'),('e', 8),('data[1]','9'),('t','10'),('el','1q'),('data[2]','12'),('data[3]','13'),('data[4]','14'),('htmldata[5]','15')])
payload = OrderedDict([('f','1'),('s','2'),('t','3'),('f','4'),('ft','5'),('s','6'),('se','7'),('e',8),('data[1]','9'),('t','10'),('el','1q'),('data[2]','12'),('data[3]','13'),('data[4]','14'),('htmldata[5]','15')])
payload = (('f','1'),('s','2'),('t','3'),('f','4'),('ft','5'),('s','6'),('se','7'),('e', 8),('data[1]','9'),('t','10'),('el','1q'),('data[2]','12'),('data[3]','13'),('data[4]','14'),('htmldata[5]','15'))
payload = [('f','1'),('s','2'),('t','3'),('f','4'),('ft','5'),('s','6'),('se','7'),('e', 8),('data[1]','9'),('t','10'),('el','1q'),('data[2]','12'),('data[3]','13'),('data[4]','14'),('htmldata[5]','15')]
</snippet></ROW><ROW><id>19347797</id><snippet>data</snippet></ROW><ROW><id>19347876</id><snippet>import pygame

screen = pygame.display.set_mode([800, 800], 0, 32)
#initiates screen

image1 = pygame.image.load('testimage0.jpg')
#testimage0.jpg is loaded into the variable image1

image2 = pygame.image.load('testimage.png').convert_alpha()
#testimage.png is loaded into the variable image2

while True:
    screen.fill([0, 0, 0])
    #screen is filled with a black background

    screen.blit(image1, [200, 200]) 
    #here image1 is blitted onto screen at the coordinates (200,200)

    image1.blit(image2, [0, 0])
    #here image2 is blitted onto image1 at the coordinates (0,0) which starts at the upper left of image1

    pygame.display.update()
    #updates display, which you can just ignore
</snippet></ROW><ROW><id>19347936</id><snippet>from collections import Counter

c = Counter(['bob','steve','steve','joe'])

# c == Counter({'steve': 2, 'bob': 1, 'joe': 1})

c.update(['alan','jose','steve'])

# c == Counter({'steve': 3, 'jose': 1, 'bob': 1, 'joe': 1, 'alan': 1})
</snippet></ROW><ROW><id>19348139</id><snippet>' '.join(word for word in line.split() if word.isalpha() and word.lower() in list)
</snippet></ROW><ROW><id>19348139</id><snippet>def myfilter(string):
    words = {'this', 'test', 'i', 'a', 'foo', 'bar'}
    return ' '.join(word for word in line.split() if word.isalpha() and word.lower() in words)

&gt;&gt;&gt; myfilter("This is '-' a test")
'This a test'
&gt;&gt;&gt; myfilter("This is a test L)[_U_O-Y OH : l’J1.l'}/")
'This a test'
&gt;&gt;&gt; myfilter("&gt; FOO &lt; BAR")
'FOO BAR'
&gt;&gt;&gt; myfilter("I&lt;&lt;W5§!‘1“¢!°\" I")
'I'
&gt;&gt;&gt; myfilter("l‘?£§l%nbia  ;‘\\~siI.ve_rswinq m")
''
&gt;&gt;&gt; myfilter("2|'J]B")
''
</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; df.pivot("rc", "algoasdaa", "rmse")
algoasdaa       asa      lorl
rc                           
20-100     0.462159  0.456810
20-50      0.585161  0.696916
40-100     2.664910  2.489900
60-200     3.957400  4.004530
60-300     3.799590  3.736500
</snippet></ROW><ROW><id>19348140</id><snippet>rmse</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; df.columns = ["rc", "algoasdaa", " rmse"]
&gt;&gt;&gt; df
     rc algoasdaa      rmse
0   asa     20-50  0.585161
1   asa    20-100  0.462159
2   asa    40-100  2.664910
3   asa    60-200  3.957400
4   asa    60-300  3.799590
5  lorl     20-50  0.696916
6  lorl    20-100  0.456810
7  lorl    40-100  2.489900
8  lorl    60-200  4.004530
9  lorl    60-300  3.736500
</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; df.pivot("rc", "algoasdaa", "rmse")
Traceback (most recent call last):
[...]
KeyError: u'no item named rmse'
</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; print df.columns
Index([u'rc', u'algoasdaa', u' rmse'], dtype=object)
</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; df.columns = [col.strip() for col in df.columns]
</snippet></ROW><ROW><id>19348140</id><snippet>&gt;&gt;&gt; df.columns = pd.Series(df.columns).str.strip()
</snippet></ROW><ROW><id>19348200</id><snippet>import threading
import urllib
import Queue

concurrent = 5

aim = 'http://edition.cnn.com'
paths = ['2013/10/12/opinion/kazin-tea-party/index.html?hpt=hp_t5',
         '2013/10/11/opinion/opinion-hay-nobel-opcw/index.html?hpt=hp_t5',
         '2013/10/11/opinion/rosin-women-in-charge/index.html?hpt=hp_t5',
         'some invalid path',
         '2013']  # also an invalid path


def main():
    work_q = Queue.Queue()
    result_q = Queue.Queue()

    # start the scanners and the result writer
    scanners = [Scanner(work_q, result_q) for i in range(concurrent)]
    for s in scanners:
        s.start()
    results_file_path = 'results.txt'
    result_writer = ResultWriter(result_q, 'results.txt')
    result_writer.start()
    # send all the work and wait for it to be completed
    for path in paths:
        work_q.put(path.strip())
    work_q.join()
    # tell everyone to stop
    # you could just kill the threads but you writer needs to close the file
    for s in scanners:
        work_q.put(Scanner.STOP_TOKEN)
    result_q.put(ResultWriter.STOP_TOKEN)  # make sure file gets closed
    # wait for everyone to actually stop
    for s in scanners:
        s.join()
    result_writer.join()
    print 'the scan has finished and results are in {}'.format(results_file_path)


class Scanner(threading.Thread):
    STOP_TOKEN = '&lt;&lt;stop&gt;&gt;'

    def __init__(self, work_q, result_q):
        threading.Thread.__init__(self)
        self.work_q = work_q
        self.result_q = result_q

    def run(self):
        while True:
            path = status = None  # reset in case of error
            try:
                try:
                    path = self.work_q.get(timeout=0.00001)
                except Queue.Empty:
                    continue
                if path == self.STOP_TOKEN:
                    break  # stop looking for work
                get_url = urllib.urlopen(aim + '/' + path)
                status = get_url.getcode()
            except Exception as e:
                status = 'unhandled error ({})'.format(e)
            self.result_q.put((path, status))
            self.work_q.task_done()


class ResultWriter(threading.Thread):
    STOP_TOKEN = '&lt;&lt;stop&gt;&gt;'

    def __init__(self, result_q, results_file_path):
        threading.Thread.__init__(self)
        self.result_q = result_q
        self.results_file_path = results_file_path

    def run(self):
        with open(self.results_file_path, 'w') as results_file:
            while True:
                try:
                    result = self.result_q.get(timeout=0.00001)
                except Queue.Empty:
                    continue
                if result == self.STOP_TOKEN:
                    break  # stop looking for results
                path, status = result
                results_file.write('{}=&gt;{}\n'.format(path, status))


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19348294</id><snippet>itertools.product</snippet></ROW><ROW><id>19348294</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; lis = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; points = list(product([0, 1, -1], repeat=2))[1:]
def get_adj_items(i, j, m, n, lis):
    return [lis[i+x][j+y] for x, y in points 
                                         if 0 &lt;= x+i &lt; m and 0 &lt;= y+j &lt; n]
... 
&gt;&gt;&gt; get_adj_items(0, 0, 3, 3, lis)
[2, 4, 5]
&gt;&gt;&gt; get_adj_items(1, 1, 3, 3, lis) 
[6, 4, 8, 9, 7, 2, 3, 1]
</snippet></ROW><ROW><id>19348294</id><snippet>&gt;&gt;&gt; lis = [[1, 2, 3 ,4], [5, 6 ,7 ,8]]
&gt;&gt;&gt; get_adj_items(1, 1, 2, 4, lis)     #items adjacent  to 6
[7, 5, 2, 3, 1]
</snippet></ROW><ROW><id>19348527</id><snippet>ser.read(ser.inWaiting())
</snippet></ROW><ROW><id>19348527</id><snippet>ser.write(bytes([0x05, 0x69, 0x02, 0x0A, 0x86]))
</snippet></ROW><ROW><id>19348527</id><snippet>found = False
buffer = '' # what is left from the previous run...
while not found:
    rd = ser.read(50)
    buffer += rd
    sp = buffer.split(chr(107), 1)
    if len(sp) == 2:
        pkt = chr(107) + sp[1] # candidate for a valid packet
        if pkt[1] == chr(105): # 
            while len(pkt) &lt; 107: # TODO add a timeout condition here...
                rd = ser.read(107 - len(pkt))
                pkt += rd
            found = True
        else:
            buffer = pkt[1:] # process this further...
    else: # no 107 found; empty the buffer.
        buffer = ''
# Now we have a pkt of 107 bytes and can do whatever we want with it.
</snippet></ROW><ROW><id>19348568</id><snippet>with open(r'&lt;file_path&gt;','r') as file:
        for line in file:
            if  re.match(r'^&lt;', line) == None:
                print line[:line.find(r'&lt;')]
</snippet></ROW><ROW><id>19348568</id><snippet>There are times when I've wondered
And times when I've cried
When my prayers they were answered
At times when I've lied
But if you asked me a question
Would I tell you the truth
Now there's something to bet on
You've got nothing to lose
When I've sat by the window
And gazed at the rain
With an ache in my heart
But never feeling the pain
And if you would tell me
Just what my life means
Walking a long road
Never reaching the end
God give me the answer to my life
God give me the answer to my dreams
God give me the answer to my prayers
God give me the answer to my being
</snippet></ROW><ROW><id>19348568</id><snippet>from lxml import etree
import urllib, StringIO

# Rip file from URL        
resultado=urllib.urlopen('http://www.azlyrics.com/lyrics/ironmaiden/noprayerforthedying.html')
html = resultado.read()
# Parse html to etree
parser= etree.HTMLParser()
tree=etree.parse(StringIO.StringIO(html),parser)
# Apply the xpath rule
e = tree.xpath("//div[@style='margin-left:10px;margin-right:10px;']/text()")
# print output
for i in e:
    print str(i).strip()
</snippet></ROW><ROW><id>19348710</id><snippet>dict</snippet></ROW><ROW><id>19348710</id><snippet>dict</snippet></ROW><ROW><id>19348710</id><snippet>for i in range(0, len(self.info)):
    tempdic = dict()
</snippet></ROW><ROW><id>19348800</id><snippet>None</snippet></ROW><ROW><id>19348800</id><snippet>results</snippet></ROW><ROW><id>19348818</id><snippet>defaultdict</snippet></ROW><ROW><id>19348818</id><snippet>In [8]: d = {23: ['20', '10', '3'],
   ...:  24: ['19', '16', '14', '6'],
   ...:  25: ['16', '5', '9', '24', '18', '15', '11', '12', '14', '5'],
   ...:  26: ['22', '15', '10', '6', '5', '4'],
   ...:  27: ['4'],
   ...:  28: ['27', '26', '20', '9', '22', '9', '25', '7'],
   ...:  29: ['15', '26', '16', '24', '4'],
   ...:  30: ['25', '16', '18', '21', '19', '4'],
   ...:  31: ['2'],}
In [9]: from collections import defaultdict
In [10]: hist = defaultdict(list)
In [11]: for k,v in d.iteritems():
    ...:     hist[len(v)].append(k)
In [12]: hist
Out[12]: defaultdict(&lt;type 'list'&gt;, {1: [27, 31], 3: [23], 4: [24],
            5: [29], 6: [26, 30], 8: [28], 10: [25]})
</snippet></ROW><ROW><id>19348971</id><snippet>def run(self):
        """Extended to set MINGW_ROOT_DIRECTORY, PATH and LIBRARY_PATH"""

        if self.compiler in mingw32_compilers:
            # Add MinGW environment variables.
            if 'MINGW_ROOT_DIRECTORY' not in os.environ:
                # Use MinGW setup conifiguration file if present.
                import mingwcfg
                try:
                    mingw_root = mingwcfg.read()
                except IOError:
                    raise RuntimeError(
                        "mingw32: required environment variable"
                        " MINGW_ROOT_DIRECTORY not set")
                os.environ['MINGW_ROOT_DIRECTORY'] = mingw_root
                path = os.environ['PATH']
                os.environ['PATH'] = ';'.join([os.path.join(mingw_root, 'bin'),
                                               path])
            if sys.version_info &gt;= (2, 6):
                # The Visual Studio 2008 C library is msvcr90.dll.
                c_runtime_path = os.path.join(self.__sdl_lib_dir, 'msvcr90')
            elif sys.version_info &gt;= (2, 4):
                # The Visual Studio 2003 C library is msvcr71.dll.
                c_runtime_path = os.path.join(self.__sdl_lib_dir, 'msvcr71')
            else:
                # The Visual Studio 6.0 C library is msvcrt.dll,
                # the MinGW default.
                c_runtime_path = ''
            if c_runtime_path and os.path.isdir(c_runtime_path):
                # Override the default msvcrt.dll linkage.
                os.environ['LIBRARY_PATH'] = c_runtime_path
            elif not (c_runtime_path or
                      glob.glob(os.path.join(self.__sdl_lib_dir,
                                             'msvcr*'))):
                pass
            else:
                raise RuntimeError("The dependencies are linked to"
                                   " the wrong C runtime for"
                                   " Python %i.%i" %
                                   sys.version_info[:2]
</snippet></ROW><ROW><id>19349085</id><snippet>def cachedfunction(f):
    cache = []
    def deco(*args, **kwargs):
        if cache:
            return cache[0]
        result = f(*args, **kwargs)
        cache.append(result)
        return result
    return deco

@cachedfunction
def periodicTable():
    #etc
</snippet></ROW><ROW><id>19349085</id><snippet>periodicTable</snippet></ROW><ROW><id>19349085</id><snippet>try/except</snippet></ROW><ROW><id>19349085</id><snippet>except</snippet></ROW><ROW><id>19349085</id><snippet>except TypeError</snippet></ROW><ROW><id>19349133</id><snippet>./</snippet></ROW><ROW><id>19349133</id><snippet>.</snippet></ROW><ROW><id>19349133</id><snippet>os.path.join()</snippet></ROW><ROW><id>19349133</id><snippet>listdir()</snippet></ROW><ROW><id>19349133</id><snippet>sendFnF()</snippet></ROW><ROW><id>19349133</id><snippet>def sendFnF(directory):
    for fname in os.listdir(directory):
        # Add the current directory to the filename
        fpath = os.path.join(directory, fname)

        # You need to check the full path, not just the filename
        if os.path.isdir(fpath):
            sendFnF(fpath)
        else:
            # ...

# ...
sendFnf(filename)
</snippet></ROW><ROW><id>19349133</id><snippet>os.walk()</snippet></ROW><ROW><id>19349281</id><snippet>def prime():
    import time
    start_time = time.clock()

    tot_sum = 2

    for num in xrange( 3, 2000000, 2 ): 
            isPrime = True
            for j in xrange(3, int( num ** 0.5 ) + 1, 2 ):
                if( num % j == 0 ):
                    isPrime = False
                    break

            if isPrime:
                tot_sum = tot_sum + num

    print "total sum is %d" % tot_sum

    print time.clock() - start_time, "seconds"

prime()
</snippet></ROW><ROW><id>19349281</id><snippet>gmpy2</snippet></ROW><ROW><id>19349281</id><snippet>def prime():
    from gmpy2 import is_prime
    import time
    start_time = time.clock()

    print "total sum is %d" % (sum(filter(is_prime, xrange(3,2000000,2)))+2)

    print time.clock() - start_time, "seconds"

prime()
</snippet></ROW><ROW><id>19349296</id><snippet>self.genx = [ item for item in self.genx if not range_min &lt; item &lt; range_max ]
</snippet></ROW><ROW><id>19349490</id><snippet>urls.py</snippet></ROW><ROW><id>19349490</id><snippet>get_absolute_url</snippet></ROW><ROW><id>19349490</id><snippet>def get_absolute_url(self):
    return reverse('blog-post', args=[
        self.publication_date.year, 
        self.publication_date.strftime('%m'), 
        self.publication_date.strftime('%d'), 
        self.URL
        ])
</snippet></ROW><ROW><id>19349512</id><snippet>'88672931'[4:8]</snippet></ROW><ROW><id>19349512</id><snippet>'88672931'[-4:]</snippet></ROW><ROW><id>19349590</id><snippet>input</snippet></ROW><ROW><id>19349590</id><snippet>s.get()</snippet></ROW><ROW><id>19349590</id><snippet>dataf.get()</snippet></ROW><ROW><id>19349590</id><snippet>pack</snippet></ROW><ROW><id>19349590</id><snippet>pack</snippet></ROW><ROW><id>19349590</id><snippet>None</snippet></ROW><ROW><id>19349590</id><snippet>dataf</snippet></ROW><ROW><id>19349590</id><snippet>s</snippet></ROW><ROW><id>19349590</id><snippet>None</snippet></ROW><ROW><id>19349590</id><snippet>def text_scan(...):
    dataf_value = self.dataf.get()
    ...
...
self.dataf = Entry(...)
self.dataf.pack(...)
...
</snippet></ROW><ROW><id>19349672</id><snippet>easy_install3</snippet></ROW><ROW><id>19349672</id><snippet>apt-get install python3-setuptools
</snippet></ROW><ROW><id>19350005</id><snippet>xrange</snippet></ROW><ROW><id>19350005</id><snippet>n</snippet></ROW><ROW><id>19350005</id><snippet>n - 1</snippet></ROW><ROW><id>19350005</id><snippet>def chunks(l, n):
    for i in xrange(0, len(l), n - 1):
        yield l[i:i + n]


list(chunks(range(20), 4))
[[0, 1, 2, 3], [3, 4, 5, 6], [6, 7, 8, 9], [9, 10, 11, 12], [12, 13, 14, 15], [15, 16, 17, 18], [18, 19]]
</snippet></ROW><ROW><id>19350021</id><snippet>xpath()</snippet></ROW><ROW><id>19350021</id><snippet>Restaurant</snippet></ROW><ROW><id>19350021</id><snippet>open(settings.MEDIA_ROOT+'\\table.xml').read()</snippet></ROW><ROW><id>19350021</id><snippet>xmllint</snippet></ROW><ROW><id>19350033</id><snippet>for i in range(1,10):
    parser.add_option('-l', '--location', value="{0}".format(i))
</snippet></ROW><ROW><id>19350033</id><snippet>for i in range(1,10):
    parser.add_option('-l', '--location', value=str(i))
</snippet></ROW><ROW><id>19350072</id><snippet>np.pad()</snippet></ROW><ROW><id>19350072</id><snippet>a = np.ones((4,3,2))

# npad is a tuple of (n_before, n_after) for each dimension
npad = ((0,0), (1,2), (2,1))

b = np.pad(a, pad_width=npad, mode='constant', constant_values=0)
print b
# [[[ 0.  0.  0.  0.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  0.  0.  0.]
#   [ 0.  0.  0.  0.  0.]]

#  [[ 0.  0.  0.  0.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  0.  0.  0.]
#   [ 0.  0.  0.  0.  0.]]

#  [[ 0.  0.  0.  0.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  0.  0.  0.]
#   [ 0.  0.  0.  0.  0.]]

#  [[ 0.  0.  0.  0.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  1.  1.  0.]
#   [ 0.  0.  0.  0.  0.]
#   [ 0.  0.  0.  0.  0.]]]
</snippet></ROW><ROW><id>19350185</id><snippet>In [271]: df
Out[271]: 
      data1     data2 key1 key2
0 -1.318436  0.829593    a  one
1  0.172596 -0.541057    a  two
2 -2.071856 -0.181943    b  one
3  0.183276 -1.889666    b  two
4  0.558144 -1.016027    a  one

In [272]: df.ix[df['data1'].argsort()[-3:]]
Out[272]: 
      data1     data2 key1 key2
1  0.172596 -0.541057    a  two
3  0.183276 -1.889666    b  two
4  0.558144 -1.016027    a  one
</snippet></ROW><ROW><id>19350185</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>19350185</id><snippet>argsort</snippet></ROW><ROW><id>19350185</id><snippet>import heapq
import pandas as pd
df = pd.DataFrame({'key1' : ['a', 'a', 'b', 'b', 'a']*10000,
                 'key2' : ['one', 'two', 'one', 'two', 'one']*10000,
                 'data1' : np.random.randn(50000),
                 'data2' : np.random.randn(50000)})

In [274]: %timeit df.ix[df['data1'].argsort()[-3:]]
100 loops, best of 3: 5.62 ms per loop

In [275]: %timeit df.iloc[heapq.nlargest(3, df.index, key=lambda x: df['data1'].iloc[x])]
1 loops, best of 3: 1.03 s per loop
</snippet></ROW><ROW><id>19350301</id><snippet>class game(object):
    def play(self): 
         name = input("What's your name, my friend? ")
         check = self.nameCheck(name)

         if check == 1:
             print ("Hello %r " %(name))
         else:
             print ("Sorry, I can't print your name because you don't have one!")


    def nameCheck(self, name):
         if name == "":
             print("I can't believe you have no name!")
             return 0

         else:
             print("%s is a nice name!" %name)
             return 1
game = Game()
game.play()
</snippet></ROW><ROW><id>19350301</id><snippet>self</snippet></ROW><ROW><id>19350301</id><snippet>game = game()</snippet></ROW><ROW><id>19350380</id><snippet>def is_divisible(n, primes):    
    for p in primes:
        if n % p == 0:
            return True
    return False  # Only return False if no matches      

def find_primes(N):  
    primes=[]
    for n in range(2, N+1):
        if not is_divisible(n,primes)
            primes.append(n)
    print(primes)

print find_primes(20)
</snippet></ROW><ROW><id>19350415</id><snippet>[0, 1]</snippet></ROW><ROW><id>19350415</id><snippet>total = sum(probs.itervalues())
for label, score in probs.iteritems():
    probs[label] = score / total
</snippet></ROW><ROW><id>19350599</id><snippet>frozenset</snippet></ROW><ROW><id>19350599</id><snippet>set</snippet></ROW><ROW><id>19350599</id><snippet>frozenset</snippet></ROW><ROW><id>19350599</id><snippet>Features</snippet></ROW><ROW><id>19350599</id><snippet>set</snippet></ROW><ROW><id>19350599</id><snippet>frozenset</snippet></ROW><ROW><id>19350599</id><snippet>df['Features'] = df['Features'].apply(frozenset)
</snippet></ROW><ROW><id>19350599</id><snippet>df['Features'] &amp; frozenset({1, 40020})
Out[64]: 
0    (1, 40020)
1    (1, 40020)
2           (1)
3            ()
</snippet></ROW><ROW><id>19350599</id><snippet>df.groupby(df['Features'] &amp; frozenset({1, 40020}), sort=False).sum()
Out[65]: 
            trial  observations
Features                       
(1, 40020)     18            10
(1)             1             0
()              2             1
</snippet></ROW><ROW><id>19350691</id><snippet>while list[0] == 0:
   list.pop(0)
while list[-1] == 0:
   list.pop()
</snippet></ROW><ROW><id>19350691</id><snippet>list</snippet></ROW><ROW><id>19350691</id><snippet>list</snippet></ROW><ROW><id>19350722</id><snippet>set</snippet></ROW><ROW><id>19350722</id><snippet>def only_once(a):
  d = {}
  for i in a:
    d.setdefault(i,0)
    d[i] += 1
  return [i for i in a if d[i] == 1]
</snippet></ROW><ROW><id>19350746</id><snippet>import subprocess
subprocess.call(["C:\Users\Public\Videos\Sample Videos\New Folder\ksp-win-0-21-1\KSP_win cosmetic mods\KSP.exe"])
</snippet></ROW><ROW><id>19351121</id><snippet>uniqueWords = [] 
for i in allWords:
      if not i in uniqueWords:
          uniqueWords.append(i);

return uniqueWords
</snippet></ROW><ROW><id>19351121</id><snippet>def getUniqueWords(allWords) :
    uniqueWords = [] 
    for i in allWords:
        if not i in uniqueWords:
            uniqueWords.append(i)
    return uniqueWords

print getUniqueWords(['a','b','c','a','b']);
</snippet></ROW><ROW><id>19351125</id><snippet>def makeArray():
    a = []
    for x in xrange(10):
        a.append(input("Please input the %d number: " % x))
    return a

def main():
    my_array = makeArray()
    print(my_array[2])
main()
</snippet></ROW><ROW><id>19351214</id><snippet>with open('/tmp/test.txt') as f:
    title=f.next()       # strip title line
    data=''.join(line.rstrip() for line in f)
</snippet></ROW><ROW><id>19351222</id><snippet>\f</snippet></ROW><ROW><id>19351222</id><snippet>0xC</snippet></ROW><ROW><id>19351222</id><snippet>tree = ET.parse("folder" + ID +'.xml')
</snippet></ROW><ROW><id>19351222</id><snippet>\\</snippet></ROW><ROW><id>19351222</id><snippet> import os 
 ...
 tree = ET.parse(os.path.join('folder', ID + '.xml'))
</snippet></ROW><ROW><id>19351277</id><snippet>ConfigParser</snippet></ROW><ROW><id>19351277</id><snippet>from ConfigParser import ConfigParser

config = ConfigParser()
config.readfp(open('desiredFile'))

somevar = config.get('label2', 'variable1')
</snippet></ROW><ROW><id>19351338</id><snippet>my_dataframe[my_dataframe.AAPL &gt; 570]
</snippet></ROW><ROW><id>19351338</id><snippet>valid_rows = my_dataframe[my_dataframe.AAPL &gt; 570]
for row in valid_rows.to_records():
    print row[1],row[2]
</snippet></ROW><ROW><id>19351418</id><snippet>PyObject *
PyString_FromStringAndSize(const char *str, Py_ssize_t size)
{
    // ...
    if (size == 1 &amp;&amp; str != NULL &amp;&amp;
        (op = characters[*str &amp; UCHAR_MAX]) != NULL)
    {
        Py_INCREF(op);
        return (PyObject *)op;
    }
    // ...
}
</snippet></ROW><ROW><id>19351418</id><snippet>characters</snippet></ROW><ROW><id>19351517</id><snippet>import socket

def main():
    s = socket.socket()
    s.connect(("localhost", 5555))

    while True:
        data = raw_input("&gt; ")
        s.send(data)

        if data == "quit":
            break

    s.close()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19351517</id><snippet>from multiprocessing import Process
from os import getpid

import socket

def receive(conn):
    print "(%d) connected." % getpid()
    while True:
        data = conn.recv(1024)
        if data:
            if data == "quit":
                break
            else:
                print "(%s) data" % getpid()

def main():
    s = socket.socket()
    s.bind(("localhost", 5555))
    s.listen(1)

    while True:
        conn, address = s.accept()
        print "%s:%d connected." % address
        Process(target=receive, args=(conn,)).start()

    s.close()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19351517</id><snippet>  File "C:\Python27\lib\pickle.py", line 880, in load_eof
    raise EOFError
</snippet></ROW><ROW><id>19351545</id><snippet>GRANT ALL ON test.* TO 'josh'@'localhost';
</snippet></ROW><ROW><id>19351545</id><snippet>GRANT ALL ON test.* TO 'josh'@'localhost' IDENTIFIED BY 'yyy';
</snippet></ROW><ROW><id>19351682</id><snippet>for p in soup.find_all("p", "review_comment"):
    if p.find(class_='show-archived'):
        continue
    # p is now a wanted p
</snippet></ROW><ROW><id>19351717</id><snippet>from flask import Flask, request
from twilio.rest import TwilioRestClient
import twilio.twiml

import game

account_sid = "ACXXXXXXXXXXXXXXXXX"
auth_token = "YYYYYYYYYYYYYYYYYY"
twilio_client = TwilioRestClient(account_sid, auth_token)

app = Flask(__name__)

games = {}

@app.route("/", methods=['GET', 'POST'])
def accept_response():
    from_number = request.values.get('From')
    body = request.values.get('Body')

    try:
        games[from_number].queue.put(body)
    except KeyError:
        games[from_number] = game.Game(twilio_client, from_number, "your number goes here")
        games[from_number].start()

    return str(twilio.twiml.Response())

if __name__ == "__main__":
    app.run(debug=True)
</snippet></ROW><ROW><id>19351717</id><snippet>import queue
from threading import Thread

class Game(Thread)

    def __init__(self, twilio, to_number, from_number):
        Thread.__init__(self, name=to_number)
        self.twilio = twilio
        self.from_number = from_number
        self.to_number = to_number
        self.queue = queue.Queue()

    def run(self):
        # Game logic goes here, e.g.:
        action = self.send_sms("You're being chased by a thing!", wait_for_response=True)        
        if action == "stop":
            self.send_sms("That was silly. The thing eats you, you die.")
        elif action == "run":
            self.send_sms("You're too slow! The thing eats you, you die.")
        else:
            self.send_sms("I don't know what you're trying to do, but the thing eats you, you die.")

    def send_sms(self, body, wait_for_response=False):
        self.twilio.messages.create(body=body, to=self.to_number, from_=self.from_number)
        if wait_for_response:
            response = self.queue.get()
            return response
</snippet></ROW><ROW><id>19351717</id><snippet>raw_input</snippet></ROW><ROW><id>19351717</id><snippet>enter()</snippet></ROW><ROW><id>19351717</id><snippet>action = this.game.send_sms('foo')</snippet></ROW><ROW><id>19351717</id><snippet>threading.current_thread()</snippet></ROW><ROW><id>19351717</id><snippet>threading.current_thread().send_sms</snippet></ROW><ROW><id>19351808</id><snippet>import win32com.client
shell = win32com.client.Dispatch("WScript.Shell")
shell.Run("outlook")
shell.AppActivate("Outlook")
shell.SendKeys("^o", 0) # 1 für Pause = true 0 für nein
shell.SendKeys("^a", 0)
shell.SendKeys("^c", 0)
</snippet></ROW><ROW><id>19351848</id><snippet>input()</snippet></ROW><ROW><id>19351848</id><snippet>list(numbers)</snippet></ROW><ROW><id>19351848</id><snippet>number = [number]
</snippet></ROW><ROW><id>19351848</id><snippet>len()</snippet></ROW><ROW><id>19351848</id><snippet>1 4 2 5 3 5
</snippet></ROW><ROW><id>19351848</id><snippet>num_list = numbers.split()
</snippet></ROW><ROW><id>19351848</id><snippet>num_list</snippet></ROW><ROW><id>19351848</id><snippet>[1,4,2,5,3,5]</snippet></ROW><ROW><id>19351945</id><snippet>[__.set_clip_on(False) for __ in plt.gca().get_children()]
</snippet></ROW><ROW><id>19351989</id><snippet>\</snippet></ROW><ROW><id>19351989</id><snippet>n</snippet></ROW><ROW><id>19351989</id><snippet>\\n</snippet></ROW><ROW><id>19351989</id><snippet>repr</snippet></ROW><ROW><id>19351989</id><snippet>\n</snippet></ROW><ROW><id>19351989</id><snippet>&gt;&gt;&gt; a = "\\n"
&gt;&gt;&gt; len(a)
2
&gt;&gt;&gt; print a
\n
&gt;&gt;&gt; a
'\\n'
&gt;&gt;&gt; a[0]
'\\'
&gt;&gt;&gt; len(a[0])
1
</snippet></ROW><ROW><id>19351989</id><snippet>\</snippet></ROW><ROW><id>19351989</id><snippet>n</snippet></ROW><ROW><id>19351989</id><snippet>chr(10)</snippet></ROW><ROW><id>19351989</id><snippet>&gt;&gt;&gt; a = "\\n"
&gt;&gt;&gt; a
'\\n'
&gt;&gt;&gt; b = a.replace("\\n", "\n")
&gt;&gt;&gt; b
'\n'
&gt;&gt;&gt; len(a)
2
&gt;&gt;&gt; len(b)
1
&gt;&gt;&gt; ord(b)
10
</snippet></ROW><ROW><id>19352003</id><snippet>def sieve(n):
    "Return all primes &lt;= n."
    np1 = n + 1
    s = list(range(np1)) # leave off `list()` in Python 2
    s[1] = 0
    sqrtn = int(round(n**0.5))
    for i in range(2, sqrtn + 1): # use `xrange()` in Python 2
        if s[i]:
            # next line:  use `xrange()` in Python 2
            s[i*i: np1: i] = [0] * len(range(i*i, np1, i))
    return filter(None, s)
</snippet></ROW><ROW><id>19352003</id><snippet>&gt;&gt;&gt; list(sieve(20))
[2, 3, 5, 7, 11, 13, 17, 19]
&gt;&gt;&gt; len(list(sieve(1000000)))
78498
</snippet></ROW><ROW><id>19352003</id><snippet>is_prime</snippet></ROW><ROW><id>19352003</id><snippet>primes = set(sieve(the_max_integer_you_care_about))
def is_prime(n):
    return n in primes
</snippet></ROW><ROW><id>19352003</id><snippet>set()</snippet></ROW><ROW><id>19352003</id><snippet>if n in primes:
</snippet></ROW><ROW><id>19352003</id><snippet>if is_prime(n):
</snippet></ROW><ROW><id>19352450</id><snippet>Form</snippet></ROW><ROW><id>19352450</id><snippet>class UserForm(forms.Form):
    username = forms.EmailField(required=True, error_messages={
        'required':'your message here', 'invalid':'your message here'})
</snippet></ROW><ROW><id>19352585</id><snippet>numpy.random.choice</snippet></ROW><ROW><id>19352585</id><snippet>your_samples = numpy.random.choice(your_array[1], size=20, replace=False,
                                   p=your_array[0])
</snippet></ROW><ROW><id>19352693</id><snippet>itertools.cycle</snippet></ROW><ROW><id>19352693</id><snippet>c=col[i]</snippet></ROW><ROW><id>19352693</id><snippet>next</snippet></ROW><ROW><id>19352693</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; cols = cycle(["red", "green", "blue"])
&gt;&gt;&gt; next(cols)
'red'
&gt;&gt;&gt; next(cols)
'green'
&gt;&gt;&gt; next(cols)
'blue'
&gt;&gt;&gt; next(cols)
'red'
</snippet></ROW><ROW><id>19352847</id><snippet>user_order &lt; 100.0 &gt; 50.01
</snippet></ROW><ROW><id>19352847</id><snippet>user_order &lt; 100.0 and 100.0 &gt; 50.01
</snippet></ROW><ROW><id>19352847</id><snippet>user_order &lt; 100.0 and user_order &gt; 50.01
</snippet></ROW><ROW><id>19352847</id><snippet>50.01 &lt; user_order &lt; 100.0
</snippet></ROW><ROW><id>19352847</id><snippet>float(input("how much is your order? "))
</snippet></ROW><ROW><id>19352847</id><snippet>float(raw_input("how much is your order? "))
</snippet></ROW><ROW><id>19352847</id><snippet>input("how much is your order? ") # Don't use this
</snippet></ROW><ROW><id>19352847</id><snippet>input</snippet></ROW><ROW><id>19352847</id><snippet>eval(whatever user inputs)</snippet></ROW><ROW><id>19352847</id><snippet>input</snippet></ROW><ROW><id>19353140</id><snippet>columns = 7
for i in range(1, 32):
 if i % columns != 0:
  print i,
 else:
  print i
</snippet></ROW><ROW><id>19353140</id><snippet>print ''
</snippet></ROW><ROW><id>19353140</id><snippet>print(x, end=" ")  # Appends a space instead of a newline
</snippet></ROW><ROW><id>19353140</id><snippet>print(x), # this will still print a space, but not a newline
</snippet></ROW><ROW><id>19353140</id><snippet>for i in range(1, 32):
  if i%column != 0:
    print(str(i).rjust(3)),
  else:
    print(str(i).rjust(3))
</snippet></ROW><ROW><id>19353140</id><snippet>  1   2   3   4   5   6   7
  8   9  10  11  12  13  14
 15  16  17  18  19  20  21
 22  23  24  25  26  27  28
 29  30  31
</snippet></ROW><ROW><id>19353140</id><snippet>str.ljust()</snippet></ROW><ROW><id>19353140</id><snippet>str.center()</snippet></ROW><ROW><id>19353140</id><snippet>import sys    
sys.stdout.write(str(i))
</snippet></ROW><ROW><id>19353209</id><snippet>import global # or any other keyword
</snippet></ROW><ROW><id>19353209</id><snippet>SyntaxError</snippet></ROW><ROW><id>19353209</id><snippet>global.py</snippet></ROW><ROW><id>19353209</id><snippet>print "I'm global!"
</snippet></ROW><ROW><id>19353209</id><snippet>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; importlib.import_module("global")
I'm global!
&lt;module 'global' from 'global.py'&gt;
</snippet></ROW><ROW><id>19353396</id><snippet>python test.py</snippet></ROW><ROW><id>19353396</id><snippet>__init__.py</snippet></ROW><ROW><id>19353416</id><snippet>from __future__ import print_function

from cffi import FFI

ffi = FFI()
ffi.cdef("""
typedef long long time_t;

typedef struct timespec {
    time_t   tv_sec;
    long     tv_nsec;
    ...;
};

typedef struct stat {
    struct timespec st_mtim;
    ...;
};

int lstat(const char *path, struct stat *buf);
""")

C = ffi.verify()

result = ffi.new("struct stat *")
p = C.lstat("foo.txt", result)
print("mtime = {0:d}.{1:09d}".format(result.st_mtim.tv_sec, result.st_mtim.tv_nsec))
</snippet></ROW><ROW><id>19353416</id><snippet>$ ./test.py
mtime = 1381711568.315075616
</snippet></ROW><ROW><id>19353416</id><snippet>$ gcc test.c -o test
$ ./test
mtime = 1381711568.315075616
</snippet></ROW><ROW><id>19353595</id><snippet>lambda</snippet></ROW><ROW><id>19353595</id><snippet>isin</snippet></ROW><ROW><id>19353595</id><snippet>pandas</snippet></ROW><ROW><id>19353595</id><snippet>import pandas as pd
categories = [['fast_food', 'restaurant'], ['coffee', 'cafe'], ['burger', 'restaurant']]
counts = [137, 176, 390]
df = pd.DataFrame({'categories': categories, 'review_count': counts})
# Show which rows contain 'restaurant'
df.categories.map(lambda x: 'restaurant' in x)
# Subset the dataframe using this:
df[df.categories.map(lambda x: 'restaurant' in x)]
</snippet></ROW><ROW><id>19353595</id><snippet>Out[11]: 
                categories  review_count
0  [fast_food, restaurant]           137
2     [burger, restaurant]           390
</snippet></ROW><ROW><id>19353644</id><snippet>xrange()</snippet></ROW><ROW><id>19353644</id><snippet>for scale in xrange(start_scale, scale &gt; 1,scale = scale* scale_update):
</snippet></ROW><ROW><id>19353644</id><snippet>scale = start_scale
while scale &gt; 1:
</snippet></ROW><ROW><id>19353644</id><snippet>    scale *= scale_update
</snippet></ROW><ROW><id>19353644</id><snippet>xrange()</snippet></ROW><ROW><id>19353653</id><snippet>lin = [i.strip().split(', ') for i in open(sys.argv[1]).readlines()]
lin = sorted(lin)
</snippet></ROW><ROW><id>19353653</id><snippet>lin = [map(int, i.strip().split(', ')) for i in open(sys.argv[1]).readlines()]
lin = sorted(lin)
</snippet></ROW><ROW><id>19353726</id><snippet>Process.join</snippet></ROW><ROW><id>19353726</id><snippet>os.wait4</snippet></ROW><ROW><id>19353726</id><snippet>Process.is_alive</snippet></ROW><ROW><id>19353726</id><snippet>waitpid</snippet></ROW><ROW><id>19353726</id><snippet>multiprocessing.forking.Popen.poll</snippet></ROW><ROW><id>19353726</id><snippet>os.wait4</snippet></ROW><ROW><id>19353726</id><snippet>waitpid</snippet></ROW><ROW><id>19353726</id><snippet>os.error</snippet></ROW><ROW><id>19353726</id><snippet>poll()</snippet></ROW><ROW><id>19353726</id><snippet>None</snippet></ROW><ROW><id>19353726</id><snippet>is_alive()</snippet></ROW><ROW><id>19353726</id><snippet>True</snippet></ROW><ROW><id>19353726</id><snippet>ret = os.wait4(proc.pid, 0)
</snippet></ROW><ROW><id>19353726</id><snippet>proc.join()
</snippet></ROW><ROW><id>19353728</id><snippet>cnt = Description.query(ancestor=ExamineKey).filter(Description.uuid == d_id).count()
</snippet></ROW><ROW><id>19354027</id><snippet>void part1()
{}

void part2()
{}

int main()
{
    part1();
    part2();
}
</snippet></ROW><ROW><id>19354027</id><snippet>part2()</snippet></ROW><ROW><id>19354027</id><snippet>part1()</snippet></ROW><ROW><id>19354027</id><snippet>import foobar

foobar.part1()
py_part2()
</snippet></ROW><ROW><id>19354027</id><snippet>main()</snippet></ROW><ROW><id>19354027</id><snippet>py_part2()</snippet></ROW><ROW><id>19354027</id><snippet>system("python foobar2.py")</snippet></ROW><ROW><id>19354027</id><snippet>python</snippet></ROW><ROW><id>19354027</id><snippet>system</snippet></ROW><ROW><id>19354261</id><snippet>var_list.append(init_list)
</snippet></ROW><ROW><id>19354261</id><snippet>init_list</snippet></ROW><ROW><id>19354261</id><snippet>var_list.append(init_list[:])
</snippet></ROW><ROW><id>19354261</id><snippet>init_list</snippet></ROW><ROW><id>19354261</id><snippet>var_list</snippet></ROW><ROW><id>19354261</id><snippet>def create_variations(split_string):
    init_list = split_string.split(', ')
    for i in range(len(init_list)):
        var_list.append(init_list[:])
        init_list.insert(0, init_list.pop())

    print var_list
</snippet></ROW><ROW><id>19354339</id><snippet>import json

s = '''{ "account_balance": 0, "cards": { "count": 1, "data": [ { "address_city": null, "address_country": null, "address_line1": null, "address_line1_check": null, "address_line2": null, "address_state": null, "address_zip": null, "address_zip_check": null, "country": "US", "customer": "cus_2kZQDsySSBFBb3", "cvc_check": null, "exp_month": 5, "exp_year": 2015, "fingerprint": "Nf1jHB21DkK6brg6", "id": "card_102kZQ2wq4yXwSPaT66QP0ho", "last4": "4242", "name": null, "object": "card", "type": "Visa" } ], "object": "list", "url": "/v1/customers/cus_2kZQDsySSBFBb3/cards" }, "created": 1381729976, "default_card": "card_102kZQ2wq4yXwSPaT66QP0ho", "delinquent": false, "description": "rohit.fantasy@yahoo.com", "discount": null, "email": null, "id": "cus_2kZQDsySSBFBb3", "livemode": false, "metadata": {}, "object": "customer", "subscription": null }'''

parsedJson = json.loads(s) 

country = parsedJson['cards']['data'][0]['country']
</snippet></ROW><ROW><id>19354339</id><snippet>parsedJson</snippet></ROW><ROW><id>19354394</id><snippet>data = [('abc','state','fsf', "val"), ('pqr','state','efg', "val2")]
import json
print json.dumps(data)
</snippet></ROW><ROW><id>19354394</id><snippet>[["abc", "state", "fsf", "val"], ["pqr", "state", "efg", "val2"]]
</snippet></ROW><ROW><id>19354394</id><snippet>data ='[["abc", "state", "fsf", "val"], ["pqr", "state", "efg", "val2"]]'
arrayOfArrays = JSON.parse(data);
console.log(arrayOfArrays);
</snippet></ROW><ROW><id>19354394</id><snippet>[ [ 'abc', 'state', 'fsf', 'val' ],
  [ 'pqr', 'state', 'efg', 'val2' ] ]
</snippet></ROW><ROW><id>19354394</id><snippet>console.log(arrayOfArrays[0]);
</snippet></ROW><ROW><id>19354394</id><snippet>[ 'abc', 'state', 'fsf', 'val' ]
</snippet></ROW><ROW><id>19354456</id><snippet>OneToOneField</snippet></ROW><ROW><id>19354456</id><snippet>request.user.clubuser
</snippet></ROW><ROW><id>19354550</id><snippet>return set(main_list)
</snippet></ROW><ROW><id>19354550</id><snippet>return main_list</snippet></ROW><ROW><id>19354550</id><snippet>main_list.append(sublist)
    return subsets(setys, count + 1, main_list)
</snippet></ROW><ROW><id>19354550</id><snippet>[]
[[0]]
[[0], [0, 1], [0, 1]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99]]
[[0], [0, 1], [0, 1], [0, 1, 34], [0, 1, 34], [0, 1, 34], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99], [0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99]]
</snippet></ROW><ROW><id>19354550</id><snippet>final_set = set()
        for item in tuple(main_list):
            final_set.add(tuple(item))
        return list(final_set)
</snippet></ROW><ROW><id>19354550</id><snippet>[(0, 1), (0,), (0, 1, 34, 3, 5, 6, 7, 9, 2, None, 99), (0, 1, 34), (0, 1, 34, 3, 5, 6, 7, 9, 2), (0, 1, 34, 3, 5), (0, 1, 34, 3, 5, 6, 7), (0, 1, 34, 3, 5, 6, 7, 9), (0, 1, 34, 3, 5, 6), (0, 1, 34, 3, 5, 6, 7, 9, 2, None), (0, 1, 34, 3)]
</snippet></ROW><ROW><id>19355337</id><snippet>url(r'^(?P&lt;short_id&gt;\w+)/$', 'artapp.views.artshort', name='artshort'),
url(r'^artlyf/(?P&lt;mrts_id&gt;\d+)/(?P&lt;slug&gt;[-\d\w]+)/$', 'artapp.views.artdetail', name='artdetail')
</snippet></ROW><ROW><id>19355337</id><snippet>from django.core.urlresolvers import reverse

class Mrts(models.Model):
    # ...

    def get_absolute_url(self):
        return reverse('artdetail', args=[str(self.pk), self.slug])

    def get_short_url(self):
        return reverse('artshort', args=[self.get_short_id()])
</snippet></ROW><ROW><id>19355337</id><snippet>from django.shortcuts import redirect, get_object_or_404

def artshort(request, short_id):
    id = Mrts.decode_id(short_id)
    object = get_object_or_404(Mrts, pk=id)
    return redirect(object)
</snippet></ROW><ROW><id>19355337</id><snippet>post</snippet></ROW><ROW><id>19355337</id><snippet>Mrts</snippet></ROW><ROW><id>19355337</id><snippet>{{ post.get_short_url }}
</snippet></ROW><ROW><id>19355454</id><snippet>clientSocket.recv(1024)</snippet></ROW><ROW><id>19355454</id><snippet>recv(1024)</snippet></ROW><ROW><id>19355454</id><snippet>recv(1024)</snippet></ROW><ROW><id>19355454</id><snippet>clientSocket.recv(1024)</snippet></ROW><ROW><id>19355460</id><snippet>label</snippet></ROW><ROW><id>19355460</id><snippet>vertex_label=...</snippet></ROW><ROW><id>19355460</id><snippet>plot</snippet></ROW><ROW><id>19355460</id><snippet>g.vs["label"] = range(g.vcount())
</snippet></ROW><ROW><id>19355460</id><snippet>plot(g, layout="kk", vertex_label=range(g.vcount())
</snippet></ROW><ROW><id>19355467</id><snippet>n * (n+1)</snippet></ROW><ROW><id>19355467</id><snippet>&gt;&gt;&gt; def solve(n):
...     return n*(n+1)
... 
&gt;&gt;&gt; solve(2)
6
&gt;&gt;&gt; solve(3)
12
&gt;&gt;&gt; solve(4)
20
&gt;&gt;&gt; solve(5)
30
</snippet></ROW><ROW><id>19355598</id><snippet>issubclass</snippet></ROW><ROW><id>19355598</id><snippet>&gt;&gt;&gt; import collections.abc
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; [v for k, v in vars(collections.abc).items()
                                  if inspect.isclass(v) and issubclass(list, v) ]
[&lt;class 'collections.abc.Container'&gt;,
 &lt;class 'collections.abc.Sequence'&gt;,
 &lt;class 'collections.abc.MutableSequence'&gt;,
 &lt;class 'collections.abc.Iterable'&gt;,
 &lt;class 'collections.abc.Sized'&gt;
]
</snippet></ROW><ROW><id>19355666</id><snippet>std::map</snippet></ROW><ROW><id>19355666</id><snippet>template &lt;class K, class V, class C, class A&gt;
void foo(const std::map&lt;K, V, C, A&gt; &amp;arg)
{
  doSomething(arg.at(K()));
}

struct MyMap : std::map&lt;int, int&gt;
{
  int at(int) { return 7; }
};

int main()
{
  MyMap m;
  foo(m);  //this will call std::map::at, NOT MyMap::at
}
</snippet></ROW><ROW><id>19355666</id><snippet>std::map</snippet></ROW><ROW><id>19355666</id><snippet>std::unordered_map</snippet></ROW><ROW><id>19355666</id><snippet>template &lt;
  class Key,
  class Value,
  class Comparator = typename std::map&lt;Key, Value&gt;::key_compare,
  class Allocator = typename std::map&lt;Key, Value&gt;::allocator_type
&gt;
class DefaultDict : private std::map&lt;Key, Value, Comparator, Allocator&gt;
{
public:
  // Publish the clear() function as is
  using std::map&lt;Key, Value, Comparator, Allocator&gt;::clear;

  // Provide my own at()
  Value&amp; at(const Key &amp;key) {
    return std::map&lt;Key, Value, Comparator, Allocator&gt;::operator[](key); //call the inherited function
  }

  // Etc.
};
</snippet></ROW><ROW><id>19355834</id><snippet>if 'ddd' or 'eee' in test</snippet></ROW><ROW><id>19355834</id><snippet>if ('ddd') or ('eee' in test)</snippet></ROW><ROW><id>19355834</id><snippet>True</snippet></ROW><ROW><id>19355834</id><snippet>or</snippet></ROW><ROW><id>19355834</id><snippet>True</snippet></ROW><ROW><id>19355834</id><snippet>&gt;&gt;&gt; bool('ddd')
True
</snippet></ROW><ROW><id>19355834</id><snippet>if 'ddd' in test or 'eee' in test:</snippet></ROW><ROW><id>19355834</id><snippet>any</snippet></ROW><ROW><id>19355834</id><snippet>if any(x in test for x in ('ddd', 'eee'))</snippet></ROW><ROW><id>19355920</id><snippet>parttwo = head.replace('https://www.evernote.com/shard/s2/sh/' '')

parttwo = head.replace('https://www.evernote.com/shard/s2/sh/', '')
</snippet></ROW><ROW><id>19356070</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = Counter({'menu': 20, 'good': 15, 'happy': 10, 'bar': 5})
&gt;&gt;&gt; b = Counter({'menu': 1, 'good': 1, 'bar': 3})
&gt;&gt;&gt; a + b
Counter({'menu': 21, 'good': 16, 'happy': 10, 'bar': 8})
</snippet></ROW><ROW><id>19356305</id><snippet>raw_input</snippet></ROW><ROW><id>19356305</id><snippet>from threading import Thread
from time import sleep

class A(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.value = 1
        self.stop_flag = False

    def run(self):
        while not self.stop_flag:
            sleep(1)
            print(self.value)

    def set_value(self, value):
        self.value = value

    def stop(self):
        self.stop_flag = True


if __name__ == '__main__':
    a = A()
    a.start()
    try:
        while 1:
            r = raw_input()
            a.set_value(int(r))
    except:
        a.stop()
</snippet></ROW><ROW><id>19356697</id><snippet>#include &lt;Python.h&gt;</snippet></ROW><ROW><id>19357137</id><snippet>np.histogram()</snippet></ROW><ROW><id>19357137</id><snippet>plot()</snippet></ROW><ROW><id>19357137</id><snippet>np.cumsum()</snippet></ROW><ROW><id>19357137</id><snippet>np.histogram()</snippet></ROW><ROW><id>19357137</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>19357137</id><snippet>hist, bins = np.histogram(data, bins=200)
plt.plot( bins[:-1], np.cumsum(hist) )
</snippet></ROW><ROW><id>19357137</id><snippet>offset = bins[1:]-bins[:-1]
plt.plot( bins[:-1]+offset, np.cumsum(hist) )
</snippet></ROW><ROW><id>19357235</id><snippet>os.kill(tcpdumpProcess.pid, signal.SIGTERM)
</snippet></ROW><ROW><id>19357403</id><snippet>while command != ("Exit lift" or "Up" or "Down" or "1" or "2" or "3" or "Cycle"):
</snippet></ROW><ROW><id>19357403</id><snippet>while not command in ("Exit lift", "Up", "Down", "1", "2", "3", "Cycle"):
</snippet></ROW><ROW><id>19357434</id><snippet>outputs</snippet></ROW><ROW><id>19357434</id><snippet>outputs</snippet></ROW><ROW><id>19357434</id><snippet>getdata</snippet></ROW><ROW><id>19357434</id><snippet>None</snippet></ROW><ROW><id>19357434</id><snippet>outputs</snippet></ROW><ROW><id>19357434</id><snippet>getdata</snippet></ROW><ROW><id>19357434</id><snippet>class Foo():
    def getdata(self):
        return 42

    @property
    def outputs(self):
        return self.getdata()
</snippet></ROW><ROW><id>19357442</id><snippet>entry_points</snippet></ROW><ROW><id>19357442</id><snippet>setup.py</snippet></ROW><ROW><id>19357442</id><snippet>if have_setuptools:
    extra_arguments = dict(
        zip_safe = False,
        test_suite = 'babel.tests.suite',
        tests_require = ['pytz'],

        entry_points = """
        [console_scripts]
        pybabel = babel.messages.frontend:main

        [distutils.commands]
        compile_catalog = babel.messages.frontend:compile_catalog
        extract_messages = babel.messages.frontend:extract_messages
        init_catalog = babel.messages.frontend:init_catalog
        update_catalog = babel.messages.frontend:update_catalog

        [distutils.setup_keywords]
        message_extractors = babel.messages.frontend:check_message_extractors

        [babel.checkers]
        num_plurals = babel.messages.checkers:num_plurals
        python_format = babel.messages.checkers:python_format

        [babel.extractors]
        ignore = babel.messages.extract:extract_nothing
        python = babel.messages.extract:extract_python
        javascript = babel.messages.extract:extract_javascript
        """,
    )
</snippet></ROW><ROW><id>19357442</id><snippet>pip</snippet></ROW><ROW><id>19357442</id><snippet>zc.buildout</snippet></ROW><ROW><id>19357442</id><snippet>console_scripts</snippet></ROW><ROW><id>19357442</id><snippet>pybabel</snippet></ROW><ROW><id>19357442</id><snippet>main()</snippet></ROW><ROW><id>19357442</id><snippet>babel.messages.frontend</snippet></ROW><ROW><id>19357442</id><snippet>distutils.commands</snippet></ROW><ROW><id>19357442</id><snippet>setup.py</snippet></ROW><ROW><id>19357442</id><snippet>babel.extractors</snippet></ROW><ROW><id>19357442</id><snippet>babel.messages.extract.extract</snippet></ROW><ROW><id>19357442</id><snippet>setuptools</snippet></ROW><ROW><id>19357442</id><snippet>pkg_resources</snippet></ROW><ROW><id>19357442</id><snippet>try:
    from pkg_resources import working_set
except ImportError:
    pass
else:
    for entry_point in working_set.iter_entry_points(GROUP_NAME,
                                                     method):
        func = entry_point.load(require=True)
        break
</snippet></ROW><ROW><id>19357442</id><snippet>setup.py</snippet></ROW><ROW><id>19357483</id><snippet>files = [open(os.path.join(sys.argv[2], "part{}".format(i + 1)), "w")
         for i in range(sys.argv[3])]
</snippet></ROW><ROW><id>19357483</id><snippet>files[0]</snippet></ROW><ROW><id>19357483</id><snippet>files[1]</snippet></ROW><ROW><id>19357483</id><snippet>files[-1]</snippet></ROW><ROW><id>19357483</id><snippet>for idx, line in enumerate(source.readlines()):
    position = idx % int(sys.argv[3])
    files[position].write(line)
</snippet></ROW><ROW><id>19357576</id><snippet>importlib.__import__()</snippet></ROW><ROW><id>19357576</id><snippet># __package__ is not guaranteed to be defined or could be set to None
# to represent that it's proper value is unknown
package = globals.get('__package__')
if package is None:
    package = globals['__name__']
    if '__path__' not in globals:
        package = package.rpartition('.')[0]
module = _gcd_import(name, package, level)
</snippet></ROW><ROW><id>19357631</id><snippet>uselist</snippet></ROW><ROW><id>19357631</id><snippet>True</snippet></ROW><ROW><id>19357631</id><snippet>False</snippet></ROW><ROW><id>19357631</id><snippet>station = relationship("Station", uselist=True)
</snippet></ROW><ROW><id>19357631</id><snippet>self.station = station
</snippet></ROW><ROW><id>19357686</id><snippet>json_graph.tree_data()</snippet></ROW><ROW><id>19357686</id><snippet>from networkx.readwrite import json_graph
import json
G = nx.DiGraph([(1,2)])
data = json_graph.tree_data(G,root=1)
s = json.dumps(data)
</snippet></ROW><ROW><id>19357686</id><snippet>{"id": 1, "children": [{"id": 2}]}</snippet></ROW><ROW><id>19357963</id><snippet>.__init__()</snippet></ROW><ROW><id>19357963</id><snippet>ob = derived()</snippet></ROW><ROW><id>19357963</id><snippet>.__init__()</snippet></ROW><ROW><id>19357963</id><snippet>bshow()</snippet></ROW><ROW><id>19357963</id><snippet>base.__init__()</snippet></ROW><ROW><id>19357963</id><snippet>raw_input()</snippet></ROW><ROW><id>19357963</id><snippet>base.__init__()</snippet></ROW><ROW><id>19357963</id><snippet>return</snippet></ROW><ROW><id>19357963</id><snippet>raw_input()</snippet></ROW><ROW><id>19357963</id><snippet>None</snippet></ROW><ROW><id>19357963</id><snippet>Name=raw_input("Global name:")

def display():
    print "Globally declared function has been called"

class base(object):
    def __init__(self):
        self.bname='base class'
        print self.bname

    def bfun1(self):
        display()

class derived(base):
    def __init__(self):
        self.dname="derived class"
        print self.dname
        super(derived, self).__init__()

    def bshow(self):
        self.bsname=raw_input()
        print self.bsname
        display()

ob=derived()
ob.bshow()
ob.bfun1()
</snippet></ROW><ROW><id>19358327</id><snippet>dictionary</snippet></ROW><ROW><id>19358327</id><snippet>&gt;&gt;&gt; dic = {'list1': range(1, 4), 'list2':range(1, 3), 'list3':range(1, 5)}
&gt;&gt;&gt; for k, v in dic.items():
...     if len(v) == 4:
...         print k
...         
list3
</snippet></ROW><ROW><id>19358327</id><snippet>lists = [list1,list2,list3]</snippet></ROW><ROW><id>19358327</id><snippet>&gt;&gt;&gt; lists[0] is list1
True
</snippet></ROW><ROW><id>19358327</id><snippet>[1,2,3]</snippet></ROW><ROW><id>19358327</id><snippet>list1</snippet></ROW><ROW><id>19358327</id><snippet>lists[0]</snippet></ROW><ROW><id>19358359</id><snippet>    participant_content_type = models.ForeignKey(ContentType,
                                             editable=False,
                                             related_name = '%(app_label)s_%(class)s_as_participant')
    match_content_type = models.ForeignKey(ContentType,
                                       editable=False,
                                       related_name = '%(app_label)s_%(class)s_model_as_match')
</snippet></ROW><ROW><id>19358359</id><snippet>%(app_label)_transcription2_as_participant</snippet></ROW><ROW><id>19358748</id><snippet>avariable = None

class a():

    def method(self):
        global avariable
        avariable = 100
        print "variable is", avariable
</snippet></ROW><ROW><id>19358748</id><snippet>import a


class b(a.a):
    def mymethod(self):
        a.a().method()
        print "avariable is ", a.avariable


if __name__ == '__main__':
    print a.avariable
    b().mymethod()
    b().mymethod()
</snippet></ROW><ROW><id>19358748</id><snippet>None
variable is 100
avariable is  100
variable is 100
avariable is  100
</snippet></ROW><ROW><id>19358748</id><snippet>None</snippet></ROW><ROW><id>19358748</id><snippet>avariable</snippet></ROW><ROW><id>19358748</id><snippet>a.py</snippet></ROW><ROW><id>19358748</id><snippet>avariable</snippet></ROW><ROW><id>19358748</id><snippet>a</snippet></ROW><ROW><id>19358748</id><snippet>a.avariable</snippet></ROW><ROW><id>19358748</id><snippet>avriable</snippet></ROW><ROW><id>19358748</id><snippet>a</snippet></ROW><ROW><id>19358748</id><snippet>import a


class b(a.a):
    def mymethod(self):
        self.method()
        print "avariable is ", a.avariable


if __name__ == '__main__':
    print a.avariable
    b().mymethod()
    b().mymethod()
</snippet></ROW><ROW><id>19358892</id><snippet>manage.py</snippet></ROW><ROW><id>19359570</id><snippet>Ta = np.array(Ta,dtype=np.float)
</snippet></ROW><ROW><id>19359570</id><snippet>Ta</snippet></ROW><ROW><id>19359570</id><snippet>Ta</snippet></ROW><ROW><id>19359570</id><snippet>a = b</snippet></ROW><ROW><id>19359570</id><snippet>a</snippet></ROW><ROW><id>19359570</id><snippet>b</snippet></ROW><ROW><id>19359570</id><snippet>a</snippet></ROW><ROW><id>19359570</id><snippet>a = 0</snippet></ROW><ROW><id>19359570</id><snippet>a</snippet></ROW><ROW><id>19359570</id><snippet>b</snippet></ROW><ROW><id>19359570</id><snippet>Ta</snippet></ROW><ROW><id>19359570</id><snippet>Ta</snippet></ROW><ROW><id>19359570</id><snippet>global</snippet></ROW><ROW><id>19359617</id><snippet>from subprocess import Popen, STDOUT, PIPE
print('Executing: /root/bin/xen-limit ' + str(dom) + ' ' + str(result) + ' --nosave')
handle = Popen('/root/bin/xen-limit ' + str(dom) + ' ' + str(result) + ' --nosave', shell=True, stdout=PIPE, stderr=STDOUT, stdin=PIPE)
print(handle.stdout.read())
</snippet></ROW><ROW><id>19359720</id><snippet>ConfigParser.ConfigParser()</snippet></ROW><ROW><id>19359720</id><snippet>ConfigParser.RawConfigParser()</snippet></ROW><ROW><id>19359720</id><snippet>optionxform()</snippet></ROW><ROW><id>19359720</id><snippet>RawConfigParser.optionxform()</snippet></ROW><ROW><id>19359720</id><snippet>self.config = ConfigParser.ConfigParser()
self.config.optionxform = str
</snippet></ROW><ROW><id>19359720</id><snippet>str</snippet></ROW><ROW><id>19359825</id><snippet>tput reset</snippet></ROW><ROW><id>19359825</id><snippet>import os

clear = lambda : os.system('tput reset')
clear()
</snippet></ROW><ROW><id>19360101</id><snippet>&gt;&gt;&gt; my_string = "Here come the braces : {a{b}c}d{e}f"
&gt;&gt;&gt; additional_content = " : {}"
&gt;&gt;&gt; additional_content = additional_content.format(42)
&gt;&gt;&gt; my_string += additional_content
&gt;&gt;&gt; my_string
'Here come the braces : {a{b}c}d{e}f : 42'
</snippet></ROW><ROW><id>19360101</id><snippet>def double_brace(string):
    string = string.replace('{','{{')
    string = string.replace('}','}}')
    return string

my_string = "Here come the braces : {a{b}c}d{e}f"
my_string = double_brace(my_string)
my_string += " : {}"
my_string = my_string.format(42)
print(my_string)
</snippet></ROW><ROW><id>19360101</id><snippet>&gt;&gt;&gt; Here come the braces : {a{b}c}d{e}f : 42
</snippet></ROW><ROW><id>19360189</id><snippet>import time

class myClass():

    def __init__(self):
        self.ranname = "0"

    def AskForName(self):
        self.ranname = "1"
        name = raw_input("Please enter your name: ")
        print("--------------------")
        print("  .:: ", name, " ::.")
        print("--------------------")
        print("     ")
        time.sleep(2)
        self.Start()

    def TryAgainQuestion(self):
        tryagain = raw_input("Do you want to try again? (Y or N): ")
        if (tryagain == "y"):
            self.AskForName()

        else:
            time.sleep(1)
            print("Made By: Daniel Parker")

    def Start(self):
        if self.ranname == "1":
            self.TryAgainQuestion()

        if self.ranname == "0":
            self.AskForName()

def main():

    myclass = myClass()
    myclass.Start()

   #end of main

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19360340</id><snippet>SCALE</snippet></ROW><ROW><id>19360340</id><snippet>SCALE = [(0.5*x, str(0.5*x)) for x in xrange(1,11)]</snippet></ROW><ROW><id>19360468</id><snippet>tt = list(ss)</snippet></ROW><ROW><id>19360468</id><snippet>tt = copy.deepcopy(ss)</snippet></ROW><ROW><id>19360549</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>19360549</id><snippet>__future__</snippet></ROW><ROW><id>19360549</id><snippet>json</snippet></ROW><ROW><id>19360549</id><snippet>import foo.json</snippet></ROW><ROW><id>19360549</id><snippet>from . import json</snippet></ROW><ROW><id>19360549</id><snippet>from .json import dumps</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator.connectTCP</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>d = Deferred()</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.callback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.errback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.addCallback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.addErrback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.cancel</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.addCallback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred.callback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>callback</snippet></ROW><ROW><id>19360616</id><snippet>errback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>myobjectx = MODBUSLIB.protocol.ClientCreator(reactor, ModbusClientProtocol
    ).connectTCP("localhost", Defaults.Port)

...

if ('Gigiisclicked' in existkeys):

    myobjectx.addCallback(beginAsynchronousTest)
    myobjectx.callback(beginAsynchronousTest)
    print "executed"
</snippet></ROW><ROW><id>19360616</id><snippet>myobjectx.callback</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator.connectTCP</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>ModbusClientProtocol</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator.connectTCP</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>client</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>addCallback</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator.connectTCP</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator</snippet></ROW><ROW><id>19360616</id><snippet>ModbusClientProtocol</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>ModbusClientProtocol</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>myobjectx</snippet></ROW><ROW><id>19360616</id><snippet>ModbusClientProtocol</snippet></ROW><ROW><id>19360616</id><snippet>read_coils</snippet></ROW><ROW><id>19360616</id><snippet>write_coil</snippet></ROW><ROW><id>19360616</id><snippet>Deferred</snippet></ROW><ROW><id>19360616</id><snippet>addCallback</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>reading = client.read_coils(1, 1)
</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>beginAsynchronousTest</snippet></ROW><ROW><id>19360616</id><snippet>client</snippet></ROW><ROW><id>19360616</id><snippet>class ButtonModbusSomething(object):
    def __init__(self):
        self.client = None

    def connect(self):
        creator = MODBUSLIB.protocol.ClientCreator(reactor, ModbusClientProtocol)
        connecting = creator.connectTCP("localhost", Defaults.Port)
        connecting.addCallback(self._connected)
        connecting.addErrback(log.err)

    def _connected(self, client):
        self.client = client

    def buttonClicked(self, existkeys):
        if self.client is not None:
            if "Gigiisclicked" in existkeys:
                self.client.read_coil(1, 1)
</snippet></ROW><ROW><id>19360616</id><snippet>client</snippet></ROW><ROW><id>19360616</id><snippet>ButtonModbusSomething</snippet></ROW><ROW><id>19360616</id><snippet>None</snippet></ROW><ROW><id>19360616</id><snippet>buttonClicked</snippet></ROW><ROW><id>19360616</id><snippet>_connected</snippet></ROW><ROW><id>19360616</id><snippet>client</snippet></ROW><ROW><id>19360616</id><snippet>ModbusClientProtocol</snippet></ROW><ROW><id>19360616</id><snippet>ClientCreator</snippet></ROW><ROW><id>19360616</id><snippet>twisted.internet.protocol</snippet></ROW><ROW><id>19360616</id><snippet>MODBUSLIB.protocol</snippet></ROW><ROW><id>19360675</id><snippet>class SessionLock(object):
    """
    Prevents users from making simultaneous requests.
    """

    def __init__(self):
        if not getattr(settings, 'SESSION_LOCK', True):
            raise MiddlewareNotUsed

        from django.db import connections, DEFAULT_DB_ALIAS
        from django.contrib.sessions.middleware import SessionMiddleware
        self.connections = connections
        self.db_alias = getattr(settings, 'SESSION_LOCK_DB', DEFAULT_DB_ALIAS)

        # Get session initialisation function from session middleware.
        self.load_session = SessionMiddleware.process_request.__func__

    def process_request(self, request):
        # Load the session to retrieve user id from it.
        self.load_session(None, request)

        # Generate a lock id.
        user_id = request.session.get(USER_ID_SESSION_KEY)
        if user_id is not None:
            request.session_lock_id = ('user_lock_%d' % user_id).__hash__()
        else:
            # If user is anonymous then use meta info for identification.
            request.session_lock_id = (
                request.META.get('HTTP_HOST', '') + ':' +
                request.META.get('HTTP_USER_AGENT', '')
            ).__hash__()

        # Acquire the lock.
        cursor = self.connections[self.db_alias].cursor()
        cursor.execute('SELECT pg_advisory_lock(%d)' % request.session_lock_id)

    def process_response(self, request, response):
        self._release_lock(request)
        return response

    def process_exception(self, request, exception):
        self._release_lock(request)

    def _release_lock(self, request):
        if hasattr(request, 'session_lock_id'):
            cursor = self.connections[self.db_alias].cursor()
            cursor.execute('SELECT pg_advisory_unlock(%d)' %
                           request.session_lock_id)
</snippet></ROW><ROW><id>19360943</id><snippet>Application</snippet></ROW><ROW><id>19360943</id><snippet>ctx.app</snippet></ROW><ROW><id>19360948</id><snippet>self.sSerial = serial.Serial() 
self.sSerial.port = "COM1"
self.sSerial.baudrate = 9600
.........
</snippet></ROW><ROW><id>19360948</id><snippet>self.sSerial.write("~~~~~~~~~~\r")</snippet></ROW><ROW><id>19360948</id><snippet>__init__</snippet></ROW><ROW><id>19361055</id><snippet>log.start()</snippet></ROW><ROW><id>19361055</id><snippet>spider_opened</snippet></ROW><ROW><id>19361055</id><snippet>from twisted.python.log import FileLogObserver
from scrapy import signals


class SpiderLog(object):

    @classmethod
    def from_crawler(cls, crawler):
        obj = cls()
        crawler.signals.connect(obj.setup_logfile, signal=signals.spider_opened)
        return obj

    def setup_logfile(self, spider):
        logfile = 'log/production_%s.log' % spider.name
        fl = FileLogObserver(open(logfile, 'w+'))
        fl.start()
</snippet></ROW><ROW><id>19361055</id><snippet>mybot</snippet></ROW><ROW><id>19361055</id><snippet>mybot/extensions.py</snippet></ROW><ROW><id>19361055</id><snippet>settings.py</snippet></ROW><ROW><id>19361055</id><snippet>EXTENSIONS = {
    'mybot.extensions.SpiderLog': 100,
}
</snippet></ROW><ROW><id>19361055</id><snippet>scrapy crawl myspider --set LOG_FILE=log/production_myspider.log
</snippet></ROW><ROW><id>19361072</id><snippet>from fractions import gcd
def lcm(a,b):
    "Calculate the lowest common multiple of two integers a and b"
    return a*b//gcd(a,b)
</snippet></ROW><ROW><id>19361072</id><snippet>lcm(a,b,c) ≡ lcm(lcm(a,b),c)</snippet></ROW><ROW><id>19361072</id><snippet>reduce</snippet></ROW><ROW><id>19361072</id><snippet>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; reduce(lcm, range(1,10+1))
2520
&gt;&gt;&gt; reduce(lcm, range(1,20+1))
232792560
</snippet></ROW><ROW><id>19361220</id><snippet>from social.apps.django_app.middleware import SocialAuthExceptionMiddleware
from django.http import HttpResponse
from social import exceptions as social_exceptions     

class MySocialAuthExceptionMiddleware(SocialAuthExceptionMiddleware):
    def process_exception(self, request, exception):
        if hasattr(social_exceptions, exception.__class__.__name__):
            return HttpResponse("catched: %s" % exception)
        else:
            raise exception
</snippet></ROW><ROW><id>19361220</id><snippet>MIDDLEWARE_CLASSES = (
    ...
    'path.to.MySocialAuthExceptionMiddleware',
   )
</snippet></ROW><ROW><id>19361232</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>19361232</id><snippet>re.X</snippet></ROW><ROW><id>19361232</id><snippet>(?x)</snippet></ROW><ROW><id>19361232</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; o = re.compile(r'''
... \btext1\b |
... \btext2\b |
... \btext3\b
... ''', flags=re.VERBOSE)
&gt;&gt;&gt; o.search('text1')
&lt;_sre.SRE_Match object at 0x0000000001E58578&gt;
&gt;&gt;&gt; o.search('text2')
&lt;_sre.SRE_Match object at 0x0000000002633370&gt;
&gt;&gt;&gt; o.search('text3')
&lt;_sre.SRE_Match object at 0x0000000001E58578&gt;
&gt;&gt;&gt; o.search('text4')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19361260</id><snippet>class ImageModel(models.Model):
    image = models.ImageField()

class MyFirstModel(models.Model):
    name = ...
    image = models.ForeignKey(Image)


&gt; image_model_instance = ImageModel()
&gt; image_model_instance.save()
&gt; first_model_instance = MyFirstModel(name="foo")
&gt; first_model_instance.image = image_model_instance
&gt; first_model_instance.save()
</snippet></ROW><ROW><id>19361260</id><snippet>create()</snippet></ROW><ROW><id>19361260</id><snippet>first_model_instance = MyFirstModel.objects.create(Name="foo")
</snippet></ROW><ROW><id>19361260</id><snippet>first_model_instance = MyFirstModel()
first_model_instance.save()
</snippet></ROW><ROW><id>19361334</id><snippet>def remove_item(xs, value):
    if is_empty(xs):
        return xs
    elif head(xs) == value:
        return tail(xs) # or remove_item(tail(xs), value) to remove all
    else:
        return cons(head(xs), remove_item(tail(xs), value))
</snippet></ROW><ROW><id>19361334</id><snippet>xs</snippet></ROW><ROW><id>19361334</id><snippet>xs</snippet></ROW><ROW><id>19361334</id><snippet>value</snippet></ROW><ROW><id>19361501</id><snippet>import sys
import time
import threading

class progress_bar_loading(threading.Thread):

    def run(self):
            global stop
            global kill
            print 'Loading....  ',
            sys.stdout.flush()
            i = 0
            while stop != True:
                    if (i%4) == 0: 
                        sys.stdout.write('\b/')
                    elif (i%4) == 1: 
                        sys.stdout.write('\b-')
                    elif (i%4) == 2: 
                        sys.stdout.write('\b\\')
                    elif (i%4) == 3: 
                        sys.stdout.write('\b|')

                    sys.stdout.flush()
                    time.sleep(0.2)
                    i+=1

            if kill == True: 
                print '\b\b\b\b ABORT!',
            else: 
                print '\b\b done!',


kill = False      
stop = False
p = progress_bar_loading()
p.start()

try:
    #anything you want to run. 
    time.sleep(1)
    stop = True
except KeyboardInterrupt or EOFError:
         kill = True
         stop = True
</snippet></ROW><ROW><id>19361603</id><snippet>is</snippet></ROW><ROW><id>19361603</id><snippet>Options</snippet></ROW><ROW><id>19361603</id><snippet>list</snippet></ROW><ROW><id>19361603</id><snippet>class ListOptions(object):
    pass

class Options(object):
    @classmethod
    def list(cls):
        return ListOptions

    @classmethod
    def __setattr__(cls, name, value):
        if instance(value, list):
            value = [] + value
        else:
            value = [ value ]
        object.__setattr__(cls, name, value[-1])
        setattr(ListOptions, name, value)

setattr(Options, 'opt', Option('opt', None))
</snippet></ROW><ROW><id>19361603</id><snippet>if Options.opt is None:
</snippet></ROW><ROW><id>19361603</id><snippet>list</snippet></ROW><ROW><id>19361603</id><snippet>list</snippet></ROW><ROW><id>19361603</id><snippet>if Options.list().opt[0] is None:

if Options.list().opt != "some value":

if Options.list().opt == 1:
</snippet></ROW><ROW><id>19361603</id><snippet>if ListOptions.opt[0] is None:

if ListOptions.opt != "some value":

if ListOptions.opt == 1:
</snippet></ROW><ROW><id>19361914</id><snippet>PyTuple_GetItem</snippet></ROW><ROW><id>19361914</id><snippet>PyTuple_GET_ITEM</snippet></ROW><ROW><id>19361914</id><snippet>PyObject</snippet></ROW><ROW><id>19361914</id><snippet>int</snippet></ROW><ROW><id>19361914</id><snippet>PyObject</snippet></ROW><ROW><id>19361914</id><snippet>PyInt_AsLong</snippet></ROW><ROW><id>19361914</id><snippet>PyObject</snippet></ROW><ROW><id>19361914</id><snippet>void *</snippet></ROW><ROW><id>19361914</id><snippet>PyObject</snippet></ROW><ROW><id>19361914</id><snippet>py_data[i]</snippet></ROW><ROW><id>19361914</id><snippet>PyObject</snippet></ROW><ROW><id>19361922</id><snippet>&gt;&gt;&gt; old_dict = {'one': '.', 'two': 2, 'three':3, 'four':'.'}
&gt;&gt;&gt; new_dict = {k:v for k,v in old_dict.iteritems() if not v == '.'}
&gt;&gt;&gt; new_dict
 {'three': 3, 'two': 2}
</snippet></ROW><ROW><id>19361922</id><snippet>iteritems</snippet></ROW><ROW><id>19361922</id><snippet>items</snippet></ROW><ROW><id>19362153</id><snippet>sys.exit()</snippet></ROW><ROW><id>19362153</id><snippet>SystemExit</snippet></ROW><ROW><id>19362153</id><snippet>threading.Condition</snippet></ROW><ROW><id>19362212</id><snippet>Toplevel</snippet></ROW><ROW><id>19362394</id><snippet>old_dict</snippet></ROW><ROW><id>19362394</id><snippet>new_dict</snippet></ROW><ROW><id>19362394</id><snippet>new_dict = {key:(value[:1] if len(value) &gt; 1 else value) for key,value in old_dict.iteritems()}
</snippet></ROW><ROW><id>19362394</id><snippet>if</snippet></ROW><ROW><id>19362394</id><snippet>'1'</snippet></ROW><ROW><id>19362446</id><snippet>class A(object):
    def __init__(self):
        print "entering A"
        super(A, self).__init__()
        print "leaving A"

class B(object):
    def __init__(self):
        print "entering B"
        super(B, self).__init__()
        print "leaving B"

class C(A,B):
    def __init__(self):
        print "entering c"
        A.__init__(self)
        B.__init__(self)
        print "leaving c"
</snippet></ROW><ROW><id>19362524</id><snippet>self.SetSizer(self.sizer)
</snippet></ROW><ROW><id>19362524</id><snippet>self.SetSizerAndFit(self.sizer)
</snippet></ROW><ROW><id>19362596</id><snippet>pattern = r'.\d+.\d+\w.'
</snippet></ROW><ROW><id>19362706</id><snippet>random()</snippet></ROW><ROW><id>19362706</id><snippet>$ python
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; rng = random.Random(0)
&gt;&gt;&gt; '%.50f' % rng.random() 
'0.84442185152504811718188193481182679533958435058594'
&gt;&gt;&gt; '%.50f' % rng.random() 
'0.75795440294030247407874867349164560437202453613281'
</snippet></ROW><ROW><id>19362990</id><snippet>$.get( "/products", function(data) {
        for(var i = 0;i &lt; data.length; ++i) 
        {
            $('.products_body').append("&lt;tr class='header'&gt;&lt;td id='name' class='product'&gt;" + data[i]["product"]['name'] + "&lt;/td&gt;&lt;td class='product'&gt; " + data[i]["product"]['id'] + "&lt;/td&gt;&lt;td class='product'&gt;" + data[i]["product"]['created'] +  "&lt;/td&gt;&lt;/tr&gt;");
            for(var j = 0;j &lt; data[i]["versions"].length; ++j)
            {
                var value = data[i]["versions"][j];
                $('.products_body').append("&lt;tr class='versions'&gt;&lt;td class='version'&gt;" + value['name'] + " &lt;/td&gt;&lt;td class='version'&gt; " + value['id'] + "&lt;/td&gt;&lt;td class='version'&gt;" + value['created'] + "&lt;/td&gt;&lt;/tr&gt;");
            }
        }
    })
</snippet></ROW><ROW><id>19362990</id><snippet>@cherrypy.expose
def products(self):
    c = self.dbConnect()
    products = list()

    # Get every products
    c.execute('Select * from T_products')
    result = c.fetchall()
    for row in result:
        versions = list()
        # Conversion ID to string
        id = self.b10to26(int(str(row).split(",")[0][1:]))
        if len(id)==1:
            id = "AA" + id
        elif len(id)==2:
            id = "A" + id

        # Parse db informations
        name = str(row).split("'")[1] 
        created = str(row).split(",")[2].split("'")[1]

        # Product in dict line
        product = {"name" : name, "id" : id, "created" : created}

        # Get every product versions
        cmd = ('Select * from T_products_Versions where id_product="{}"').format(str(row).split(",")[0][1:])
        c.execute(cmd)
        cmd_versions = c.fetchall()
        for row_version in cmd_versions:

            # Get ID + Name
            id_version = self.b10to26(int(str(row_version).split(",")[1]))
            if len(id_version)==1:
                id_version = "A" + id_version
            name = str(row_version).split("'")[1]
            created = str(row_version).split(",")[4].split("'")[1]

            # Product version dict line
            version = {"name" : name, "id" : id_version, "created" : created}

            #Put in a list
            versions.append (version)
        products.append({"product" : product, "versions" : versions})

    cherrypy.response.headers["Content-Type"] = "application/json"
    return json.dumps(products)
</snippet></ROW><ROW><id>19363055</id><snippet>def operate():
    number = input("Enter a number to start: ")
    while True:
        readline("data.csv", number)
        op = raw_input("Repeat (R), Next (N), Previous (P), or Quit (Q) ")
        if op == "R": pass
        elif op == "N": number += 1
        elif op == "P": number -= 1
        elif op == "Q": break
        else: raise Exception("Incorrect command")

operate()
</snippet></ROW><ROW><id>19363055</id><snippet>Quit</snippet></ROW><ROW><id>19363320</id><snippet>import csv
    header1 =['c']
    header2 =['e']

    with open(r'&lt;input_file_path&gt;', 'rb') as csvfilein, open(r'&lt;output_file_path&gt;', 'wb') as csvfileout:
        reader = csv.DictReader(csvfilein)
        for line in reader:
            csvfileout.write("I like "+line.get(header1[0])+" and "+line.get(header2[0])+"\n")
</snippet></ROW><ROW><id>19363320</id><snippet>I like AER and DME

I like ASF and LED
</snippet></ROW><ROW><id>19363554</id><snippet>def msg_generator(self):
    ''' Provides messages until bot dies '''
    while self.alive:
        for msg in self.irc.recv(self.buffer).split(('\r\n').encode()):

            if len(msg) &lt;= 3:
                continue

            try: 
                yield Message(msg.decode())
            except Exception as e:
                self.log('%s %s\n' % (except_str, str(e)))
</snippet></ROW><ROW><id>19363554</id><snippet>def msg_generator(self):
    ''' Provides messages until bot dies '''
    while self.alive:
        for msg in self.irc.recv(self.buffer).split(('\r\n').encode()):

            if not len(msg) &gt; 3:
                continue

            yield handle_message(msg)

def handle_message(msg):
    try: 
        return Message(msg.decode())
    except Exception as e:
        self.log('%s %s\n' % (except_str, str(e)))
</snippet></ROW><ROW><id>19363554</id><snippet>from itertools import imap

def msg_generator(self):
    ''' Provides messages until bot dies '''
    while self.alive:
        it = iter(self.irc.recv(self.buffer).split(('\r\n').encode()))
        return imap(handle_message, (msg for msg in it if len(msg) &gt; 3)

def handle_message(msg):
    try: 
        return Message(msg.decode())
    except Exception as e:
        self.log('%s %s\n' % (except_str, str(e)))
</snippet></ROW><ROW><id>19363554</id><snippet>None</snippet></ROW><ROW><id>19363554</id><snippet>filter()</snippet></ROW><ROW><id>19363554</id><snippet>None</snippet></ROW><ROW><id>19363660</id><snippet>$ java -jar tika-app-1.3.jar --server --port 1234
</snippet></ROW><ROW><id>19363660</id><snippet>$ nc 127.0.0.1 1234 &lt; test.pdf
</snippet></ROW><ROW><id>19363660</id><snippet>#!/usr/bin/python
import socket, sys

# Where to connect
host = '127.0.0.1'
port = 1234

if len(sys.argv) &lt; 2:
  print "Must give filename"
  sys.exit(1)

filename = sys.argv[1]
print "Sending %s to Tika on port %d" % (filename, port)

# Connect to Tika
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))

# Open the file to send
f = open(filename, 'rb')

# Stream the file to Tika
while True:
  chunk = f.read(65536)
  if not chunk:
    # EOF
    break
  s.sendall(chunk)

# Tell Tika we have sent everything
s.shutdown(socket.SHUT_WR)

# Get the response
while True:
  chunk = s.recv(65536)
  if not chunk:
    # EOF
    break
  print chunk
</snippet></ROW><ROW><id>19363701</id><snippet>File</snippet></ROW><ROW><id>19363701</id><snippet>save</snippet></ROW><ROW><id>19363701</id><snippet>image.bild.save()</snippet></ROW><ROW><id>19363778</id><snippet>brutedata = {'postdata[{}]'.format(i): v for i, v in enumerate(itemlist)}
</snippet></ROW><ROW><id>19363778</id><snippet>postdata[0]</snippet></ROW><ROW><id>19363778</id><snippet>postdata[1]</snippet></ROW><ROW><id>19363778</id><snippet>postdata[N]</snippet></ROW><ROW><id>19363778</id><snippet>itemlist</snippet></ROW><ROW><id>19363778</id><snippet>dict()</snippet></ROW><ROW><id>19363778</id><snippet>brutedata = dict(('postdata[{0}]'.format(i), v) for i, v in enumerate(itemlist))
</snippet></ROW><ROW><id>19363778</id><snippet>&gt;&gt;&gt; itemlist = ['foo', 'bar', 'baz']
&gt;&gt;&gt; {'postdata[{}]'.format(i): v for i, v in enumerate(itemlist)}
{'postdata[1]': 'bar', 'postdata[2]': 'baz', 'postdata[0]': 'foo'}
&gt;&gt;&gt; dict(('postdata[{0}]'.format(i), v) for i, v in enumerate(itemlist))
{'postdata[1]': 'bar', 'postdata[2]': 'baz', 'postdata[0]': 'foo'}
</snippet></ROW><ROW><id>19363778</id><snippet>postdata[0]</snippet></ROW><ROW><id>19363778</id><snippet>dict</snippet></ROW><ROW><id>19363880</id><snippet>class MyCustomAuthentication(Authentication):
    pass

class SpecializedResource(ModelResource):
    class Meta:
        authentication = MyCustomAuthentication()

class TestResource(SpecializedResource):
    class Meta(SpecializedResource.Meta):
        # just inheriting from parent meta
        pass
    print Meta.authentication
</snippet></ROW><ROW><id>19363880</id><snippet>&lt;__main__.MyCustomAuthentication object at 0x6160d10&gt; 
</snippet></ROW><ROW><id>19363880</id><snippet>TestResource</snippet></ROW><ROW><id>19363880</id><snippet>meta</snippet></ROW><ROW><id>19363880</id><snippet>class TestResource(SpecializedResource):
    class Meta(SpecializedResource.Meta):
        authentication = SpecializedResource.Meta.authentication # works (but hardcoding)
</snippet></ROW><ROW><id>19363880</id><snippet>class TestResource(SpecializedResource):
    class Meta(SpecializedResource.Meta):
        authentication = TestResource.Meta.authentication # works (because of the inheritance)
</snippet></ROW><ROW><id>19363894</id><snippet>['None' if v is None else v for v in d]
</snippet></ROW><ROW><id>19363894</id><snippet>&gt;&gt;&gt; d = [1,'q','3', None, 'temp']
&gt;&gt;&gt; ['None' if v is None else v for v in d]
[1, 'q', '3', 'None', 'temp']
</snippet></ROW><ROW><id>19363894</id><snippet>is None</snippet></ROW><ROW><id>19363894</id><snippet>None</snippet></ROW><ROW><id>19364519</id><snippet>$</snippet></ROW><ROW><id>19364519</id><snippet>url(r'^tutorial/$', include('apps.tutorial.urls')),
</snippet></ROW><ROW><id>19364519</id><snippet>url(r'^tutorial/', include('apps.tutorial.urls')),
</snippet></ROW><ROW><id>19365023</id><snippet>&gt;&gt;&gt; """Text with a single quote: '"""
"Text with a single quote: '"""
&gt;&gt;&gt; """We can use a double quote too: ". See?"""
'We can use a double quote too: ". See?'
&gt;&gt;&gt; """Even mixing " and ' is not a problem."""
'Even mixing " and \' is not a problem.'
</snippet></ROW><ROW><id>19365056</id><snippet>def function(...):
    ...
    for i in range (0, (len(num) + 1) / 2):
        if r[i] != num[i]:
            return False
    return True
</snippet></ROW><ROW><id>19365056</id><snippet>def palindrome(num):
    return num == num[::-1]
</snippet></ROW><ROW><id>19365185</id><snippet>train_end = (int(len(instances)*TRAINING_END) // CHANNELS) * CHANNELS
</snippet></ROW><ROW><id>19365185</id><snippet>int(len(instances)*TRAINING_END)</snippet></ROW><ROW><id>19365185</id><snippet>CHANNELS</snippet></ROW><ROW><id>19365185</id><snippet>valid_end</snippet></ROW><ROW><id>19365185</id><snippet>valid_end = (int(len(instances)*VALIDATION_END) // CHANNELS + 1) * CHANNELS
</snippet></ROW><ROW><id>19365201</id><snippet>&gt;&gt;&gt; [DEBUG] (thread1   ) 2</snippet></ROW><ROW><id>19365271</id><snippet>with open('FULL_DATA.txt','Ur')
</snippet></ROW><ROW><id>19365271</id><snippet>\r\n</snippet></ROW><ROW><id>19365271</id><snippet>\n</snippet></ROW><ROW><id>19365300</id><snippet>on code(appName, theNum, theModifier)
    tell application appName to activate
    delay 0.2

    set theNum to theNum as number
    tell application "System Events"
        if theModifier is "command" then
            key code theNum using command down
        else if theModifier is "option" then
            key code theNum using option down
        else if theModifier is "control" then
            key code theNum using control down
        else if theModifier is "shift" then
            key code theNum using shift down
        end if
    end tell
end code
</snippet></ROW><ROW><id>19365300</id><snippet>code("Safari", "123", "command")
</snippet></ROW><ROW><id>19365362</id><snippet>lines[0]</snippet></ROW><ROW><id>19365362</id><snippet>curr.execute("""
    SELECT fields.fieldkey
    FROM fields
    LEFT JOIN zone ON zone.fieldkey=fields.fieldkey
    WHERE zone.zonekey = %s;
""", (lines[0],))
</snippet></ROW><ROW><id>19365389</id><snippet>&gt;&gt;&gt; [Tuple_list[i-1] for i in order]
[(2, 3), (3, 2), (2, 0), (0, 1), (3, 1), (0, 3), (1, 3)]
</snippet></ROW><ROW><id>19365472</id><snippet>DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
STATICFILES_STORAGE = 'devfest.storage.CachedS3BotoStorage'
COMPRESS_STORAGE = STATICFILES_STORAGE

AWS_ACCESS_KEY_ID = get_env_setting('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = get_env_setting('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'asd'
AWS_QUERYSTRING_AUTH = False

COMPRESS_OFFLINE = True
COMPRESS_URL = 'https://{}.s3.amazonaws.com/'.format(AWS_STORAGE_BUCKET_NAME)
COMPRESS_ROOT = STATIC_ROOT
</snippet></ROW><ROW><id>19365514</id><snippet>def functionname(strng):
    strng = strng.split()[::-1]
    startval = strng.pop()
    while len(strng):
        op = strng.pop()
        val = strng.pop()
        startval = str(eval(startval + op + val)
    return startval
</snippet></ROW><ROW><id>19365680</id><snippet>public void addImg(){
    try{
        Runtime r = Runtime.getRuntime();

        //Don't use this one...
        //Process p = r.exec("/usr/bin/python2.7 ../wc.py");
        //p.waitFor();
        //p.destroy();

        //Use absolute paths (e.g blahblah/foo/bar/wc.py)
        p = r.exec("python2.7 ../wc.py");

        //Set up two threads to read on the output of the external process.
        Thread stdout = new Thread(new StreamReader(p.getInputStream()));
        Thread stderr = new Thread(new StreamReader(p.getErrorStream()));

        stdout.start();
        stderr.start();

        int exitval = p.waitFor();
        p.destroy();

        //Prints exit code to screen.
        System.out.println("Process ended with exit code:" + exitval);
    }catch(Exception e){
        String cause = e.getMessage();
        System.out.print(cause);
    }
}

private class StreamReader implements Runnable{
    private InputStream stream;
    private boolean run;

    public StreamReader(Inputstream i){
        stream = i;
        run = true;
    }

    public void run(){
        BufferedReader reader;
        try{
            reader = new BufferedReader(new InputStreamReader(stream));

            String line;

            while(run &amp;&amp; line != null){
                System.out.println(line);
            }
        }catch(IOException ex){
            //Handle if you want...
        }finally{
            try{
                reader.close();
            }catch(Exception e){}
        }
    }
}
</snippet></ROW><ROW><id>19365760</id><snippet>^['"]?(?:/[^/]+)*['"]?$
</snippet></ROW><ROW><id>19365760</id><snippet>[^/]+</snippet></ROW><ROW><id>19365760</id><snippet>+</snippet></ROW><ROW><id>19365965</id><snippet>total = 0.0
for i in range(scoresno):
    total += input("Enter exam score: ")

average = total/scoresno
</snippet></ROW><ROW><id>19365965</id><snippet>scores = []
for i in range(scoresno):
    score = input("Enter exam score: ")
    scores.append(score)

total = sum(scores)
average = total/float(scoresno)
</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Fourth
Second
Third
First
</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Fourth</snippet></ROW><ROW><id>19365976</id><snippet>Second</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Second</snippet></ROW><ROW><id>19365976</id><snippet>Third</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Second.__init__</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Second.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Third.__init__</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Third.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Second.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Second.__init__</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Second.__init__</snippet></ROW><ROW><id>19365976</id><snippet>Fourth.__init__</snippet></ROW><ROW><id>19365976</id><snippet>super</snippet></ROW><ROW><id>19365976</id><snippet>Second</snippet></ROW><ROW><id>19365976</id><snippet>Third</snippet></ROW><ROW><id>19365976</id><snippet>Third</snippet></ROW><ROW><id>19365976</id><snippet>Second</snippet></ROW><ROW><id>19366051</id><snippet>post_status</snippet></ROW><ROW><id>19366051</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, primary_key=True)

    _post_status = Column(String)

    @property
    def post_status(self):
        return self._post_status


print (A.post_status)
print (A.post_status != 5678)
</snippet></ROW><ROW><id>19366051</id><snippet>$ python test.py
&lt;property object at 0x10165bd08&gt;
True
</snippet></ROW><ROW><id>19366051</id><snippet>from sqlalchemy.ext.hybrid import hybrid_property

class A(Base):
    __tablename__ = 'a'

    id = Column(Integer, primary_key=True)

    _post_status = Column(String)

    @hybrid_property
    def post_status(self):
        return self._post_status

print (A.post_status)
print (A.post_status != 5678)
</snippet></ROW><ROW><id>19366051</id><snippet>$ python test.py
A._post_status
a._post_status != :_post_status_1
</snippet></ROW><ROW><id>19366094</id><snippet>python -c</snippet></ROW><ROW><id>19366173</id><snippet>E-05</snippet></ROW><ROW><id>19366173</id><snippet>8.73194...E-05 = 8.73194 * 10^(-5) = 0.000 087 319 4...
</snippet></ROW><ROW><id>19366209</id><snippet>def at(self, t):
    def get_arr(t):
        try: # Iterate over me
            return [get_arr(t1)[0] for t1 in t]
        except TypeError:
            #Opps am not Iterable
            pass
        try: # you can subtract datetime object
            return [(t-self.t0).total_seconds()]
        except TypeError:
            #Opps am not a datetime object
            pass
        # I am just a float
        return [t]
    self.initial*numpy.exp(self.growth*np.array(get_arr(t)))
</snippet></ROW><ROW><id>19366209</id><snippet>def foo(num):
    """Convert a string implementation to
       Python Object"""
    try: #First check if its an Integer
        return int(num)
    except ValueError:
        #Well not an Integer
        pass
    try: #Check if its a float
        return float(num)
    except ValueError:
        pass
    #Invalid Number
    raise TypeError("Invalid Number Specified")
</snippet></ROW><ROW><id>19366209</id><snippet>Errors should never pass silently.</snippet></ROW><ROW><id>19366390</id><snippet>players = variables.get_players()
</snippet></ROW><ROW><id>19366390</id><snippet>variables</snippet></ROW><ROW><id>19366390</id><snippet>get_players</snippet></ROW><ROW><id>19366390</id><snippet>from variables import get_players

players = get_players()
</snippet></ROW><ROW><id>19366402</id><snippet>import re

print re.sub('([bcdfghjklmnpqrstvwxyz])', r'o\1', 'tobias')
# otoobiaos
</snippet></ROW><ROW><id>19366402</id><snippet>[]</snippet></ROW><ROW><id>19366402</id><snippet>o</snippet></ROW><ROW><id>19366402</id><snippet>word = raw_input('Enter a word: ')
print re.sub('([bcdfghjklmnpqrstvwxyz])', r'o\1', word)
</snippet></ROW><ROW><id>19366422</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; print calendar.TextCalendar().formatmonth(2013,2,4)
          February 2013
Mon  Tue  Wed  Thu  Fri  Sat  Sun
                      1    2    3
  4    5    6    7    8    9   10
 11   12   13   14   15   16   17
 18   19   20   21   22   23   24
 25   26   27   28
</snippet></ROW><ROW><id>19366422</id><snippet>&gt;&gt;&gt; print calendar.TextCalendar(calendar.SUNDAY).formatmonth(2013,2,4)
          February 2013
Sun  Mon  Tue  Wed  Thu  Fri  Sat
                           1    2
  3    4    5    6    7    8    9
 10   11   12   13   14   15   16
 17   18   19   20   21   22   23
 24   25   26   27   28
</snippet></ROW><ROW><id>19366422</id><snippet>&gt;&gt;&gt; table=[['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
...        ['','','','','','1','2'],
...        ['3','4','5','6','7','8','9'],
...        ['10','11','12','13','14','15','16'],
...        ['17','18','19','20','21','22','23'],
...        ['24','25','26','27','28','','']] 
</snippet></ROW><ROW><id>19366422</id><snippet>def printTable (tbl, borderHorizontal = '-', borderVertical = '|', borderCross = '+'):
    cols = [list(x) for x in zip(*tbl)]
    lengths = [max(map(len, map(str, col))) for col in cols]
    f = borderVertical + borderVertical.join(' {:&gt;%d} ' % l for l in lengths) + borderVertical
    s = borderCross + borderCross.join(borderHorizontal * (l+2) for l in lengths) + borderCross
    rtr=[s]

    for row in tbl:
        rtr.append(f.format(*row))
        rtr.append(s)

    return '\n'.join(rtr)

print(printTable(table))
</snippet></ROW><ROW><id>19366422</id><snippet>+-----+-----+-----+-----+-----+-----+-----+
| Sun | Mon | Tue | Wed | Thu | Fri | Sat |
+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |   1 |   2 |
+-----+-----+-----+-----+-----+-----+-----+
|   3 |   4 |   5 |   6 |   7 |   8 |   9 |
+-----+-----+-----+-----+-----+-----+-----+
|  10 |  11 |  12 |  13 |  14 |  15 |  16 |
+-----+-----+-----+-----+-----+-----+-----+
|  17 |  18 |  19 |  20 |  21 |  22 |  23 |
+-----+-----+-----+-----+-----+-----+-----+
|  24 |  25 |  26 |  27 |  28 |     |     |
+-----+-----+-----+-----+-----+-----+-----+
</snippet></ROW><ROW><id>19366465</id><snippet>VIRTUALENV env1</snippet></ROW><ROW><id>19366465</id><snippet>. env\Scripts\activate
or
source env\Scripts\activate
</snippet></ROW><ROW><id>19366619</id><snippet>file1</snippet></ROW><ROW><id>19366619</id><snippet>file2</snippet></ROW><ROW><id>19366619</id><snippet>file1</snippet></ROW><ROW><id>19366619</id><snippet>file2</snippet></ROW><ROW><id>19366619</id><snippet>file2</snippet></ROW><ROW><id>19366619</id><snippet>string*string</snippet></ROW><ROW><id>19366619</id><snippet>use strict;
use warnings;
use autodie;

open my $fh1, '&lt;', 'file1';
my %file1;
while (&lt;$fh1&gt;) {
  my ($f1_2, $f1_5) = (split)[1,4];
  $file1{$f1_2} = $f1_5;
}

open my $fh2, '&lt;', 'file2';
while (&lt;$fh2&gt;) {
  my @f2_rec = split;
  my ($f2_nm2, $f2_n) = @f2_rec[-3,-1];
  if (my $f1_5 = $file1{$f2_n}) {
    print join(' ', @f2_rec, $f1_5, "$f1_5*$f2_nm2"), "\n";
  }
}
</snippet></ROW><ROW><id>19366619</id><snippet>..... value1 cv name1 freq1 freq1*value1
..... value3 cvb name3 freq3 freq3*value3
</snippet></ROW><ROW><id>19366684</id><snippet>&lt;html&gt;
&lt;head&gt;
  &lt;style&gt; 
    table {border-collapse: collapse}
    td { border:1px solid black; }
    td.bolded { border:3px solid black }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt; 1 &lt;/td&gt; &lt;td&gt; 2 &lt;/td&gt; &lt;td class="bolded"&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19366686</id><snippet>import re

_nsre = re.compile('([0-9]+)')
def natural_sort_key(s):
    return [int(text) if text.isdigit() else text.lower()
            for text in re.split(_nsre, s)]   
</snippet></ROW><ROW><id>19366686</id><snippet>&gt;&gt;&gt; list1 = ["1", "100A", "342B", "2C", "132", "36", "302F"]
&gt;&gt;&gt; list1.sort(key=natural_sort_key)
&gt;&gt;&gt; list1
['1', '2C', '36', '100A', '132', '302F', '342B']
</snippet></ROW><ROW><id>19366686</id><snippet>&gt;&gt;&gt; natural_sort_key("100A")
['', 100, 'a']
&gt;&gt;&gt; natural_sort_key("342B")
['', 342, 'b']
</snippet></ROW><ROW><id>19366686</id><snippet>TypeError: unorderable types</snippet></ROW><ROW><id>19366780</id><snippet>System_Headers</snippet></ROW><ROW><id>19366780</id><snippet>System_Value</snippet></ROW><ROW><id>19366780</id><snippet>naive()</snippet></ROW><ROW><id>19366780</id><snippet>System_Headers</snippet></ROW><ROW><id>19366780</id><snippet>System_Value</snippet></ROW><ROW><id>19366780</id><snippet>sHeader_Value = (System_Headers
  .select(System_Headers.SystemHeader_Name, System_Data.System_Value)
  .join(System_Header_Link)
  .join(System_Data_Link)
  .join(System_Data)
  .naive())
</snippet></ROW><ROW><id>19366796</id><snippet>In [4]: columns = pd.MultiIndex.from_arrays([X, Y])

In [5]: df = DataFrame(Data, columns=columns, index=Z)

In [6]: df
Out[6]: 
      0       1       2
      0   1   0   1   0
-1    1   2   3   4   5
-5    6   7   8   9  10
-10  11  12  13  14  15

In [7]: df1 = df.unstack().reset_index()

In [8]: df1.columns = ['X', 'Y', 'Z', 'Data']

In [9]: df1
Out[9]: 
    X  Y   Z  Data
0   0  0  -1     1
1   0  0  -5     6
2   0  0 -10    11
3   0  1  -1     2
4   0  1  -5     7
5   0  1 -10    12
6   1  0  -1     3
7   1  0  -5     8
8   1  0 -10    13
9   1  1  -1     4
10  1  1  -5     9
11  1  1 -10    14
12  2  0  -1     5
13  2  0  -5    10
14  2  0 -10    15
</snippet></ROW><ROW><id>19366796</id><snippet>reset_index()</snippet></ROW><ROW><id>19366879</id><snippet>2**30</snippet></ROW><ROW><id>19366879</id><snippet>O(2**n)</snippet></ROW><ROW><id>19366879</id><snippet>2**30</snippet></ROW><ROW><id>19366879</id><snippet>2**10</snippet></ROW><ROW><id>19367006</id><snippet>urlparse</snippet></ROW><ROW><id>19367006</id><snippet>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; o = urlparse('http://www.example.com/query%28%29.cgi?somevar=thing&amp;someothervar=otherthing')
&gt;&gt;&gt; o   
ParseResult(scheme='http', netloc='www.example.com', path='/query%28%29.cgi', params='', query='somevar=thing&amp;someothervar=otherthing', fragment='')
</snippet></ROW><ROW><id>19367006</id><snippet>from urlparse import urlparse
def nestForLoop():
    lines = open("ampersand_right_split.txt", 'r').readlines()
    with open("newfile3.txt".format(), 'w') as f:

        for l in lines:
            url = urlparse(l)
            if url.query:
                #param, value = str.split("?",1)
                queryvars = url.query # Good to know, but why did we get this again?
                if len(l) == 0:
                    break
                print l
                f.write(l)

nestForLoop()
</snippet></ROW><ROW><id>19367094</id><snippet>self.assertNotEqual()</snippet></ROW><ROW><id>19367094</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>19367094</id><snippet>nose.tools</snippet></ROW><ROW><id>19367094</id><snippet>&gt;&gt;&gt; from nose.tools import assert_not_equal
&gt;&gt;&gt; assert_not_equal(1, 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/case.py", line 518, in assertNotEqual
    raise self.failureException(msg)
AssertionError: 1 == 1
</snippet></ROW><ROW><id>19367519</id><snippet>opts, args = getopt.getopt(argv, "c:t:", ["class=","term="])
#                                                    here--^
</snippet></ROW><ROW><id>19367523</id><snippet>import pandas as pd

output_file = pd.ExcelWriter('20131001103311.xlsx')

widths = [10, 10]
df = pd.read_fwf('20131001103311.tr8', widths=widths, header=True)

df.columns = ['TIP. REG.', 'COD. EST.']

df.to_excel(output_file, '20131001103311')
output_file.save()
</snippet></ROW><ROW><id>19367523</id><snippet>fwf</snippet></ROW><ROW><id>19367523</id><snippet>$ cat 20131001103311.tr8
TIP. REG. COD. EST.
1         1000
2         300
3         7000
4         600
5         12345
</snippet></ROW><ROW><id>19367523</id><snippet>header=True</snippet></ROW><ROW><id>19367523</id><snippet>read_fwf</snippet></ROW><ROW><id>19367523</id><snippet>pandas</snippet></ROW><ROW><id>19367523</id><snippet>df.columns</snippet></ROW><ROW><id>19367523</id><snippet>OBS</snippet></ROW><ROW><id>19367728</id><snippet>if mazeList[x][y] == 'E':
        return True
</snippet></ROW><ROW><id>19367728</id><snippet>if mazeList[x][y] == 'E':
        mazeList[x][y] = 'o'
        return True
</snippet></ROW><ROW><id>19367728</id><snippet>if ((search(x+1, y, mazeList))
        or (search(x, y-1, mazeList))
        or (search(x-1, y, mazeList))
        or (search(x, y+1, mazeList))):
        return True
</snippet></ROW><ROW><id>19367728</id><snippet>if ((search(x+1, y, mazeList))
        or (search(x, y-1, mazeList))
        or (search(x-1, y, mazeList))
        or (search(x, y+1, mazeList))):
        mazeList[x][y] = 'o'
        return True
</snippet></ROW><ROW><id>19367736</id><snippet>manage.py collectstatic</snippet></ROW><ROW><id>19367864</id><snippet>lines.strip('')</snippet></ROW><ROW><id>19367864</id><snippet>''</snippet></ROW><ROW><id>19367864</id><snippet>lines = lines.strip()
</snippet></ROW><ROW><id>19367864</id><snippet>strip()</snippet></ROW><ROW><id>19367864</id><snippet>\n</snippet></ROW><ROW><id>19368064</id><snippet>sum</snippet></ROW><ROW><id>19368064</id><snippet>sum(n == fresh for n in buckets['actual'][e])
</snippet></ROW><ROW><id>19368064</id><snippet>True == 1</snippet></ROW><ROW><id>19368064</id><snippet>False == 0</snippet></ROW><ROW><id>19368064</id><snippet>else</snippet></ROW><ROW><id>19368140</id><snippet>&gt;&gt;&gt; a = [["iguana","i"],["mycat","m"]]
&gt;&gt;&gt; a[0]
['iguana', 'i']
&gt;&gt;&gt; a[0][0]
'iguana'
&gt;&gt;&gt; a[1][0]
'mycat'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19368140</id><snippet>[n]</snippet></ROW><ROW><id>19368140</id><snippet>a</snippet></ROW><ROW><id>19368255</id><snippet>np.loadtxt</snippet></ROW><ROW><id>19368255</id><snippet>y_and_data = np.genfromtxt('131014-data-xy-conv-1.txt', names=True, delimiter=',')
x = np.array(y_and_data.dtype.names[1:], int)
y = y_and_data['YX_mm']
data = y_and_data.view(np.float).reshape(-1, len(y_and_data.dtype))[:,1:]
</snippet></ROW><ROW><id>19368255</id><snippet>loadtxt</snippet></ROW><ROW><id>19368255</id><snippet>genfromtxt</snippet></ROW><ROW><id>19368255</id><snippet>with open('131014-data-xy-conv-1.txt', 'r') as f:
    x = np.array(f.readline().split(',')[1:], int)
    y_and_data = np.genfromtxt(f, delimiter=',')
y = y_and_data[:,0]
data = y_and_data[:,1:]
</snippet></ROW><ROW><id>19368255</id><snippet>f</snippet></ROW><ROW><id>19368255</id><snippet>with open('131014-data-xy-conv-1.txt', 'r') as f:

    firstline = f.readline()           # read off the first line
    firstvalues = firstline.split(',') # split it on the comma
    xvalues = firstvalues[1:]          # and keep the all but the first elements
    x = np.array(xvalues, int)         # make it an array of integers (or float if you prefer)
</snippet></ROW><ROW><id>19368255</id><snippet>f</snippet></ROW><ROW><id>19368255</id><snippet>f.readline</snippet></ROW><ROW><id>19368255</id><snippet>genfromtxt</snippet></ROW><ROW><id>19368255</id><snippet>    y_and_data = np.genfromtxt(f, delimiter=',')
</snippet></ROW><ROW><id>19368255</id><snippet>y = y_and_data[:,0]       # the first column is the y-values
data = y_and_data[:,1:]   # the remaining columns are the data
</snippet></ROW><ROW><id>19368255</id><snippet>In [58]: with open('131014-data-xy-conv-1.txt', 'r') as f:
   ....:     x = np.array(f.readline().split(',')[1:], int)
   ....:     y_and_data = np.genfromtxt(f, delimiter=',')
   ....: y = y_and_data[:,0]
   ....: data = y_and_data[:,1:]
   ....: 

In [59]: x
Out[59]: array([ 0, 10, 20, 30, 40])

In [60]: y
Out[60]: 
array([ 686.6 ,  694.08,  701.56,  709.04,  716.52,  724.  ,  731.48,
        738.96,  746.44,  753.92,  761.4 ,  768.88,  776.36])

In [61]: data
Out[61]: 
array([[  -5.02 ,   -0.417,    0.   ,  100.627,    0.   ],
       [  -5.02 ,   -4.529,  -17.731,   -5.309,   -3.535],
       [   1.869,   -4.529,  -17.731,   -5.309,   -3.535],
       [   1.869,   -4.689,  -17.667,   -5.704,   -3.482],
       [   4.572,   -4.689,  -17.186,   -5.704,   -2.51 ],
       [   4.572,   -4.486,  -17.186,   -5.138,   -2.51 ],
       [   6.323,   -4.486,  -16.396,   -5.138,   -1.933],
       [   6.323,   -4.977,  -16.396,   -5.319,   -1.933],
       [   7.007,   -4.251,  -16.577,   -5.319,   -1.688],
       [   7.007,   -4.251,  -16.577,   -5.618,   -1.688],
       [   7.338,   -3.514,  -16.78 ,   -5.618,   -1.207],
       [   7.338,   -3.514,  -16.78 ,   -4.657,   -1.207],
       [   7.263,   -3.877,  -15.99 ,   -4.657,   -0.822]])
</snippet></ROW><ROW><id>19368360</id><snippet>loc</snippet></ROW><ROW><id>19368362</id><snippet>input</snippet></ROW><ROW><id>19368362</id><snippet>raw_input</snippet></ROW><ROW><id>19368362</id><snippet>answ=raw_input('select db or bd : ')</snippet></ROW><ROW><id>19368369</id><snippet>&gt;&gt;&gt; tup = ()
&gt;&gt;&gt; tup += (1,)
&gt;&gt;&gt; tup
(1,)
&gt;&gt;&gt; tup += (2,)
&gt;&gt;&gt; tup
(1, 2)
</snippet></ROW><ROW><id>19368533</id><snippet>string[::-1]</snippet></ROW><ROW><id>19368533</id><snippet>def isPalindrome():
    string1 = input('Enter a string: ')
    string2 = string[::-1]
    if string1 == string2:
        return 'It is a palindrome'
    return 'It is not a palindrome'

isPalindrome()
</snippet></ROW><ROW><id>19368533</id><snippet>string</snippet></ROW><ROW><id>19368533</id><snippet>return None</snippet></ROW><ROW><id>19368613</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>19368613</id><snippet>import csv
with open('spreadsheet.csv', 'w') as outfile:
    fp = csv.DictWriter(outfile, list_of_dicts[0].keys())
    fp.writeheader()
    fp.writerows(list_of_dicts)
</snippet></ROW><ROW><id>19368656</id><snippet>--module</snippet></ROW><ROW><id>19368656</id><snippet>--module=wsgi</snippet></ROW><ROW><id>19368722</id><snippet>height</snippet></ROW><ROW><id>19368722</id><snippet>width</snippet></ROW><ROW><id>19368722</id><snippet># I just picked 50 and 500 to demonstrate
# You can tweak it to your needs
msg = Text(app, height=50, width=500)
</snippet></ROW><ROW><id>19368736</id><snippet>import json

json_value = json.dumps(python_object)
</snippet></ROW><ROW><id>19368736</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; python_object = {'username': u'Tester1', 'age': 0L}
&gt;&gt;&gt; print json.dumps(python_object)
{"username": "Tester1", "age": 0}
</snippet></ROW><ROW><id>19368736</id><snippet>JSON.parse()</snippet></ROW><ROW><id>19368779</id><snippet>    badguys.append([640, random.randint(50,430)])
</snippet></ROW><ROW><id>19368779</id><snippet>    badguys.append([random.randint(50,610), 480])
</snippet></ROW><ROW><id>19368779</id><snippet>    badguys.append([random.randint(50,610), 0])
</snippet></ROW><ROW><id>19368779</id><snippet>    badguy[0]-=7
</snippet></ROW><ROW><id>19368779</id><snippet>    badguy[1] -= 7
</snippet></ROW><ROW><id>19368892</id><snippet>classmethod</snippet></ROW><ROW><id>19368892</id><snippet>@classmethod
def get_employee_count(cls):
    return cls.employeeCount
</snippet></ROW><ROW><id>19368892</id><snippet>employeeCount</snippet></ROW><ROW><id>19368892</id><snippet>cls</snippet></ROW><ROW><id>19368892</id><snippet>def _get_employee_count(cls):
    return cls.employeeCount
get_employee_count = classmethod(_get_employee_count)
</snippet></ROW><ROW><id>19368892</id><snippet>classmethod</snippet></ROW><ROW><id>19368892</id><snippet>name</snippet></ROW><ROW><id>19368933</id><snippet>return m_records
</snippet></ROW><ROW><id>19369046</id><snippet>numpy</snippet></ROW><ROW><id>19369046</id><snippet>scipy</snippet></ROW><ROW><id>19369244</id><snippet>base64</snippet></ROW><ROW><id>19369244</id><snippet>m2crypto</snippet></ROW><ROW><id>19369244</id><snippet>pycrypto</snippet></ROW><ROW><id>19369244</id><snippet>pynacl</snippet></ROW><ROW><id>19369387</id><snippet>draw.rect</snippet></ROW><ROW><id>19369387</id><snippet>Rect</snippet></ROW><ROW><id>19369387</id><snippet>block = pygame.draw.rect(screen, white, Rect(0, 0, width, unitSize), 0)
</snippet></ROW><ROW><id>19369387</id><snippet>Rect</snippet></ROW><ROW><id>19369387</id><snippet>block.move(xPos,yPos)
block = pygame.draw.rect(screen, white, block, 0)
</snippet></ROW><ROW><id>19369387</id><snippet>block = pygame.draw.rect(screen, white, Rect(xPos, yPos, width, unitSize), 0)
</snippet></ROW><ROW><id>19369559</id><snippet>SECtable.date == 'some_string'</snippet></ROW><ROW><id>19369559</id><snippet>sqlalchemy.sql.expression.BinaryExpression</snippet></ROW><ROW><id>19369559</id><snippet>str(SECtable.date)[:4] == str(matchingString)</snippet></ROW><ROW><id>19369559</id><snippet>SECtable.date</snippet></ROW><ROW><id>19369559</id><snippet>'SECTable.date'</snippet></ROW><ROW><id>19369559</id><snippet>str(matchingString)</snippet></ROW><ROW><id>19369559</id><snippet>'able.date' == str(matchingString)
</snippet></ROW><ROW><id>19369559</id><snippet>filter(False)</snippet></ROW><ROW><id>19369559</id><snippet>sqlalchemy</snippet></ROW><ROW><id>19369559</id><snippet>endswith</snippet></ROW><ROW><id>19369559</id><snippet>rows = SECtable.query.filter(SECtable.date.endswith(matchingString)).all()
</snippet></ROW><ROW><id>19369576</id><snippet>&gt;&gt;&gt; import scipy.sparse as sps
&gt;&gt;&gt; a = sps.rand(1000, 1000, format='csr')
&gt;&gt;&gt; a[::10, ::10]
Traceback (most recent call last):
...    
ValueError: slicing with step != 1 not supported
</snippet></ROW><ROW><id>19369576</id><snippet>&gt;&gt;&gt; a.tolil()[::10, ::10]
&lt;100x100 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 97 stored elements in LInked List format&gt;
</snippet></ROW><ROW><id>19369576</id><snippet>&gt;&gt;&gt; a.tolil()[::10, ::10].A
array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>19369883</id><snippet>relationship</snippet></ROW><ROW><id>19369978</id><snippet>ContentFile</snippet></ROW><ROW><id>19369978</id><snippet>File</snippet></ROW><ROW><id>19369978</id><snippet>File</snippet></ROW><ROW><id>19369978</id><snippet>class TestModel(models.Model):
    file = models.FileField(upload_to="test")

    def __unicode__(self):
        return self.file.name
</snippet></ROW><ROW><id>19369978</id><snippet>import os.path
import urllib2
from urlparse import urlparse

from django.test import TestCase
from django.core.files import File
from django.core.files.base import ContentFile

from testapp.models import TestModel

class SimpleTest(TestCase):
    def test_models(self):
        test_model = TestModel()
        imgurl = 'http://www.stackoverflow.com/favicon.ico'
        name = urlparse(imgurl).path.split('/')[-1]
        content =  urllib2.urlopen(imgurl).read()
        #test_model.file.save(name, File(content), save=False) # error line
        test_model.file.save(name, ContentFile(content), save=False)
        test_model.save()
        print test_model
</snippet></ROW><ROW><id>19369991</id><snippet>class CustomButton(tk.Canvas):
    def __init__(self, parent, width, height, color, command=None):
        tk.Canvas.__init__(self, parent, borderwidth=1, 
            relief="raised", highlightthickness=0)
        self.command = command

        padding = 4
        id = self.create_oval((padding,padding,
            width+padding, height+padding), outline=color, fill=color)
        (x0,y0,x1,y1)  = self.bbox("all")
        width = (x1-x0) + padding
        height = (y1-y0) + padding
        self.configure(width=width, height=height)
        self.bind("&lt;ButtonPress-1&gt;", self._on_press)
        self.bind("&lt;ButtonRelease-1&gt;", self._on_release)

    def _on_press(self, event):
        self.configure(relief="sunken")

    def _on_release(self, event):
        self.configure(relief="raised")
        if self.command is not None:
            self.command()
</snippet></ROW><ROW><id>19369991</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>19369991</id><snippet>&lt;Leave&gt;</snippet></ROW><ROW><id>19370075</id><snippet>itertext</snippet></ROW><ROW><id>19370075</id><snippet>itertext</snippet></ROW><ROW><id>19370075</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; xml = '&lt;tag&gt;Some &lt;a&gt;example&lt;/a&gt; text&lt;/tag&gt;'
&gt;&gt;&gt; tree = ET.fromstring(xml)
&gt;&gt;&gt; print(''.join(tree.itertext()))
'Some example text'
</snippet></ROW><ROW><id>19370075</id><snippet>itertext</snippet></ROW><ROW><id>19370075</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; xml = '&lt;tag&gt;Some &lt;a&gt;example&lt;/a&gt; text&lt;/tag&gt;'
&gt;&gt;&gt; tree = ET.fromstring(xml)
&gt;&gt;&gt; def itertext(self):
...     tag = self.tag
...     if not isinstance(tag, str) and tag is not None:
...         return
...     if self.text:
...         yield self.text
...     for e in self:
...         for s in e.itertext():
...             yield s
...         if e.tail:
...             yield e.tail
... 
&gt;&gt;&gt; print(''.join(itertext(tree)))
Some example text
</snippet></ROW><ROW><id>19370125</id><snippet>netcat</snippet></ROW><ROW><id>19370125</id><snippet>bash</snippet></ROW><ROW><id>19370125</id><snippet>% nc -l 3333 | bash
</snippet></ROW><ROW><id>19370125</id><snippet>echo hi</snippet></ROW><ROW><id>19370125</id><snippet>% nc localhost 3333
echo hi
</snippet></ROW><ROW><id>19370125</id><snippet>hi</snippet></ROW><ROW><id>19370125</id><snippet>xterm&amp;</snippet></ROW><ROW><id>19370125</id><snippet>time.sleep</snippet></ROW><ROW><id>19370125</id><snippet>import select
import sys
import paramiko
import Xlib.support.connect as xlib_connect
import os
import socket
import subprocess

# for connecting to netcat running remotely
from multiprocessing import Process
import time

# data
import getpass
SSHServerPort=22
SSHServerIP = "localhost"
# get username/password interactively, or use some other method..
user = getpass.getuser()
pwd = getpass.getpass("enter pw for '" + user + "': ")
NETCAT_PORT = 3333
FIREFOX_CMD="/path/to/firefox &amp;"
#FIREFOX_CMD="xclock&amp;"#or this :)

def run_stuff_in_xterm():
    time.sleep(5)
    s = socket.socket(socket.AF_INET6 if ":" in SSHServerIP else socket.AF_INET, socket.SOCK_STREAM)
    s.connect((SSHServerIP, NETCAT_PORT))
    s.send("echo \"Hello there! Are you watching?\"\n")
    s.send(FIREFOX_CMD + "\n")
    time.sleep(30)
    s.send("echo bye bye\n")
    time.sleep(2)
    s.close()

# run xming
XmingProc = subprocess.Popen("C:/Program Files (x86)/Xming/Xming.exe :0 -clipboard -multiwindow")
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_client.connect(SSHServerIP, SSHServerPort, username=user, password=pwd)
transport = ssh_client.get_transport()
channelOppositeEdges = {}

local_x11_display = xlib_connect.get_display(os.environ['DISPLAY'])
inputSockets = []

def x11_handler(channel, (src_addr, src_port)):
    local_x11_socket = xlib_connect.get_socket(*local_x11_display[:3])
    inputSockets.append(local_x11_socket)
    inputSockets.append(channel)
    channelOppositeEdges[local_x11_socket.fileno()] = channel
    channelOppositeEdges[channel.fileno()] = local_x11_socket
    transport._queue_incoming_channel(channel)

session = transport.open_session()
inputSockets.append(session)
session.request_x11(handler = x11_handler)
session.exec_command("xterm -e \"nc -l 0.0.0.0 %d | /bin/bash\"" % NETCAT_PORT)
p = Process(target=run_stuff_in_xterm)
transport.accept()
p.start()

while not session.exit_status_ready():
    readable, writable, exceptional = select.select(inputSockets,[],[])
    if len(transport.server_accepts) &gt; 0:
        transport.accept()
    for sock in readable:
        if sock is session:
            while session.recv_ready():
                sys.stdout.write(session.recv(4096))
            while session.recv_stderr_ready():
                sys.stderr.write(session.recv_stderr(4096))   
        else: 
            try:
                data = sock.recv(4096)
                counterPartSocket  = channelOppositeEdges[sock.fileno()]
                counterPartSocket.sendall(data)
            except socket.error:
                inputSockets.remove(sock)
                inputSockets.remove(counterPartSocket)
                del channelOppositeEdges[sock.fileno()]
                del channelOppositeEdges[counterPartSocket.fileno()]
                sock.close()
                counterPartSocket.close()

p.join()
print 'Exit status:', session.recv_exit_status()
while session.recv_ready():
    sys.stdout.write(session.recv(4096))
while session.recv_stderr_ready():
    sys.stdout.write(session.recv_stderr(4096))
session.close()
XmingProc.terminate()
XmingProc.wait()
</snippet></ROW><ROW><id>19370125</id><snippet>XmingProc</snippet></ROW><ROW><id>19370125</id><snippet>/Applications/Firefox.app/Contents/MacOS/firefox</snippet></ROW><ROW><id>19370125</id><snippet>FIREFOX_CMD</snippet></ROW><ROW><id>19370125</id><snippet>xclock</snippet></ROW><ROW><id>19370125</id><snippet>127.0.0.1</snippet></ROW><ROW><id>19370125</id><snippet>0.0.0.0</snippet></ROW><ROW><id>19370125</id><snippet>ssh -L3333:localhost:3333 username@remote-host.com</snippet></ROW><ROW><id>19370125</id><snippet>("localhost", 3333)</snippet></ROW><ROW><id>19370125</id><snippet>/path/to/some/place</snippet></ROW><ROW><id>19370125</id><snippet>pip install -U selenium</snippet></ROW><ROW><id>19370125</id><snippet>selenium-example.py</snippet></ROW><ROW><id>19370125</id><snippet>/path/to/some/place</snippet></ROW><ROW><id>19370125</id><snippet>#!/usr/bin/env python
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import time

browser = webdriver.Firefox() # Get local session of firefox
browser.get("http://www.yahoo.com") # Load page
assert "Yahoo" in browser.title
elem = browser.find_element_by_name("p") # Find the query box
elem.send_keys("seleniumhq" + Keys.RETURN)
time.sleep(0.2) # Let the page load, will be added to the API
try:
    browser.find_element_by_xpath("//a[contains(@href,'http://docs.seleniumhq.org')]")
except NoSuchElementException:
    assert 0, "can't find seleniumhq"
browser.close()
</snippet></ROW><ROW><id>19370125</id><snippet>FIREFOX_CMD="cd /path/to/some/place &amp;&amp; python selenium-example.py"
</snippet></ROW><ROW><id>19370125</id><snippet>time.sleep</snippet></ROW><ROW><id>19370125</id><snippet># start up xclock, wait for some time to pass, kill it.
s.send("xclock&amp;\n")
time.sleep(1)
s.send("XCLOCK_PID=$!\n")  # stash away the process id (into a bash variable)
time.sleep(30)
s.send("echo \"killing $XCLOCK_PID\"\n")
s.send("kill $XCLOCK_PID\n\n")
time.sleep(5)
</snippet></ROW><ROW><id>19370125</id><snippet>\n</snippet></ROW><ROW><id>19370129</id><snippet>from flask import Flask

app = Flask(__name__)

@app.route('/')
@app.route('/index')
def index():
    print 'index'
    return 'index'

@app.route('/&lt;path:projectkey&gt;')
def project(projectkey):
    print 'project'
    return 'project'

app.run(debug=True)
</snippet></ROW><ROW><id>19370129</id><snippet>index
127.0.0.1 - - [14/Oct/2013 18:08:41] "GET / HTTP/1.1" 200 -
project
127.0.0.1 - - [14/Oct/2013 18:08:41] "GET /favicon.ico HTTP/1.1" 200 -
</snippet></ROW><ROW><id>19370129</id><snippet>/favicon.ico</snippet></ROW><ROW><id>19370135</id><snippet>in_path</snippet></ROW><ROW><id>19370135</id><snippet>for row in in_path:
</snippet></ROW><ROW><id>19370135</id><snippet>open</snippet></ROW><ROW><id>19370135</id><snippet>with open(in_path) as in_file:
    for row in in_file:
</snippet></ROW><ROW><id>19370135</id><snippet>print</snippet></ROW><ROW><id>19370135</id><snippet>print</snippet></ROW><ROW><id>19370135</id><snippet>row</snippet></ROW><ROW><id>19370135</id><snippet>if (user_alias in elt for elt in row):
</snippet></ROW><ROW><id>19370135</id><snippet>row</snippet></ROW><ROW><id>19370135</id><snippet>dict</snippet></ROW><ROW><id>19370135</id><snippet>for elt in row</snippet></ROW><ROW><id>19370135</id><snippet>any</snippet></ROW><ROW><id>19370135</id><snippet>if any(user_alias in row[elt] for elt in row):
if any(user_alias in value for key, value in row.items()):
</snippet></ROW><ROW><id>19370135</id><snippet>if user_alias in row.values():
</snippet></ROW><ROW><id>19370135</id><snippet>if user_alias == row['_cn6ca']:
    email = row['_chk2m']
</snippet></ROW><ROW><id>19370143</id><snippet>Float</snippet></ROW><ROW><id>19370143</id><snippet>double</snippet></ROW><ROW><id>19370143</id><snippet>dtype=object</snippet></ROW><ROW><id>19370143</id><snippet>numpy.sqrt(solf10)</snippet></ROW><ROW><id>19370143</id><snippet>numpy.array([x.sqrt() for x in solf10])</snippet></ROW><ROW><id>19370143</id><snippet>float</snippet></ROW><ROW><id>19370143</id><snippet>solf10 = [float(x) for sub1 in solf10 for x in sub1]
</snippet></ROW><ROW><id>19370401</id><snippet>&gt;&gt;&gt; connect2 = TamAccConnect2()
&gt;&gt;&gt; connect2.func1()
</snippet></ROW><ROW><id>19370401</id><snippet>ReadCurrentData</snippet></ROW><ROW><id>19370401</id><snippet>self</snippet></ROW><ROW><id>19370401</id><snippet>TypeError</snippet></ROW><ROW><id>19370401</id><snippet>ReadCurrentData</snippet></ROW><ROW><id>19370401</id><snippet>object</snippet></ROW><ROW><id>19370401</id><snippet>class TamAccConnect2(object):</snippet></ROW><ROW><id>19370401</id><snippet>self</snippet></ROW><ROW><id>19370401</id><snippet>self</snippet></ROW><ROW><id>19370401</id><snippet>self</snippet></ROW><ROW><id>19370401</id><snippet>self</snippet></ROW><ROW><id>19370421</id><snippet>x</snippet></ROW><ROW><id>19370421</id><snippet>y</snippet></ROW><ROW><id>19370421</id><snippet>(n - 1) * n / 2 - x + y
</snippet></ROW><ROW><id>19370421</id><snippet>(x - y)</snippet></ROW><ROW><id>19370421</id><snippet>(n - 1) * n * (2 * n - 1) / 6 - x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt;</snippet></ROW><ROW><id>19370421</id><snippet>(x&lt;sup&gt;2&lt;/sup&gt; - y&lt;sup&gt;2&lt;/sup&gt;)</snippet></ROW><ROW><id>19370421</id><snippet>(2) / (1) gives (x + y).....(3)
</snippet></ROW><ROW><id>19370421</id><snippet>2 * x</snippet></ROW><ROW><id>19370421</id><snippet>x</snippet></ROW><ROW><id>19370421</id><snippet>y</snippet></ROW><ROW><id>19370421</id><snippet>O(1)</snippet></ROW><ROW><id>19370421</id><snippet>O(n)</snippet></ROW><ROW><id>19370421</id><snippet>O(n)</snippet></ROW><ROW><id>19370421</id><snippet>#include &lt;stdio.h&gt;

int findDup(int *arr, int n, int&amp; dup, int&amp; missing)
{
    int sum = 0;
    int squares = 0;

    for (int i = 0; i &lt; n; i++) {
        sum += arr[i];
        squares += arr[i] * arr[i];
    }

    sum = (n - 1) * n / 2 - sum; // x - y

    squares = (n - 1) * n * (2 * (n - 1) + 1) / 6 - squares; // x^2 - y^2

    if (sum == 0) {
        // no duplicates
        missing = dup = 0;
        return -1;
    }
    missing = (squares / sum + sum) / 2; // ((x^2 - y^2) / (x - y) + (x - y)) / 2 = ((x + y) + (x - y)) / 2 = x

    dup = missing - sum; // x - (x - y) = y

    return 0;
}


int main(int argc, char *argv[])
{
    int dup = 0;
    int missing = 0;

    int a[] = {0, 2, 1, 2, 4};

    findDup(a, sizeof(a) / sizeof(int), dup, missing);
    printf("dup = [%d], missing = [%d]\n", dup, missing);

    int b[] = {3, 0, 0, 4, 2, 1};
    findDup(b, sizeof(b) / sizeof(int), dup, missing);
    printf("dup = [%d], missing = [%d]\n", dup, missing);

    return 0;
}
</snippet></ROW><ROW><id>19370421</id><snippet>dup = [2], missing = [3]
dup = [0], missing = [5]
</snippet></ROW><ROW><id>19370547</id><snippet>e.args[0].reason.errno</snippet></ROW><ROW><id>19370547</id><snippet>import requests
try:
    requests.get("http://not.a.real.url/really_not")
except requests.exceptions.ConnectionError as e:
    pass
</snippet></ROW><ROW><id>19370547</id><snippet>e</snippet></ROW><ROW><id>19370547</id><snippet>&gt;&gt;&gt; e
ConnectionError(MaxRetryError("HTTPConnectionPool(host='not.a.real.url', port=80): Max retries exceeded with url: /really_not (Caused by &lt;class 'socket.gaierror'&gt;: [Errno -2] Name or service not known)",),)
</snippet></ROW><ROW><id>19370547</id><snippet>args</snippet></ROW><ROW><id>19370547</id><snippet>&gt;&gt;&gt; e.args
(MaxRetryError("HTTPConnectionPool(host='not.a.real.url', port=80): Max retries exceeded with url: /really_not (Caused by &lt;class 'socket.gaierror'&gt;: [Errno -2] Name or service not known)",),)
&gt;&gt;&gt; e.args[0]
MaxRetryError("HTTPConnectionPool(host='not.a.real.url', port=80): Max retries exceeded with url: /really_not (Caused by &lt;class 'socket.gaierror'&gt;: [Errno -2] Name or service not known)",)
</snippet></ROW><ROW><id>19370547</id><snippet>&gt;&gt;&gt; dir(e.args[0])
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__',
 '__getitem__', '__getslice__', '__hash__', '__init__', '__module__', '__new__',
 '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__',
 '__str__', '__subclasshook__', '__unicode__', '__weakref__', 'args', 'message', 'pool',
 'reason', 'url']
</snippet></ROW><ROW><id>19370547</id><snippet>reason</snippet></ROW><ROW><id>19370547</id><snippet>&gt;&gt;&gt; e.args[0].reason
gaierror(-2, 'Name or service not known')
&gt;&gt;&gt; dir(e.args[0].reason)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__',
 '__getitem__', '__getslice__', '__hash__', '__init__', '__module__', '__new__',
 '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__',
 '__str__', '__subclasshook__', '__unicode__', '__weakref__', 'args', 'errno', 'filename',
 'message', 'strerror']
&gt;&gt;&gt; e.args[0].reason.errno
-2
</snippet></ROW><ROW><id>19370595</id><snippet>r</snippet></ROW><ROW><id>19370595</id><snippet>chunk = r[a:b]
[(x+a, chunk[x]) for x in xrange(len(chunk))]
</snippet></ROW><ROW><id>19370595</id><snippet>chunk = r[a:b]
[(i, j) for i, j in enumerate(chunk, a)]
</snippet></ROW><ROW><id>19370595</id><snippet>list(enumerate(chunk, a))
</snippet></ROW><ROW><id>19370595</id><snippet>def get_max(r, a, b):
    """ Returns the maximum value in the form (index, value). """
    return max(enumerate(r[a:b], a), key=lambda x:x[1])
</snippet></ROW><ROW><id>19370595</id><snippet>from operator import itemgetter
def get_max(r, a, b):
    """ Returns the maximum value in the form (index, value). """
    return max(enumerate(r[a:b], a), key=itemgetter(1))
</snippet></ROW><ROW><id>19370595</id><snippet>itemgetter</snippet></ROW><ROW><id>19370595</id><snippet>itemgetter</snippet></ROW><ROW><id>19371172</id><snippet>var js_array = [{% for f in filelist %}"{{ f }}",{% endfor %}];
</snippet></ROW><ROW><id>19371240</id><snippet>&lt;?php

// You'd have to implement the database yourself!
$db = new Database();
$db-&gt;startTransaction();

$stack = array();
$fh    = fopen("my-file", "r");
$i     = 0;
while (($buffer = fgets($handle, 4096)) !== false) {
  if (!isset($buffer[0])) {
    continue;
  }

  switch ($buffer[0]) {
    case "A":
      // Do something ...
      break;

    case "C":
      // Do something ...
      break;

    case "C":
      if ($stack[$i] != "C") {
        trigger_error("Line D without preceding line C");
      }
      // Do something ...
      break;

     // More stuff ...
  }

  $stack[$i++] = $buffer;
  $db-&gt;insert("INSERT INTO table (line) VALUES ($buffer)");
}

$db-&gt;commitTransaction();

?&gt;
</snippet></ROW><ROW><id>19371240</id><snippet>switch</snippet></ROW><ROW><id>19371366</id><snippet>multipart/form-data</snippet></ROW><ROW><id>19371366</id><snippet>------WebKitFormBoundary48hldbqBzWdSiBZ6</snippet></ROW><ROW><id>19371366</id><snippet>multipart/form-data</snippet></ROW><ROW><id>19371372</id><snippet>super(Categorias, self).save()
</snippet></ROW><ROW><id>19371375</id><snippet>PyChar_addGetSetter</snippet></ROW><ROW><id>19371403</id><snippet>pattern</snippet></ROW><ROW><id>19371403</id><snippet>(?P&lt;group_name&gt;pattern)</snippet></ROW><ROW><id>19371403</id><snippet>import re
import urllib

infile = open('test2.txt')
outfile = open('test3.txt', 'w')

pattern = r'"resource": "(?P&lt;path&gt;.+/(?P&lt;filename&gt;.+)\.jpg)"'
replacement = '"resource": "../img/\g&lt;filename&gt;.jpg"'
prog = re.compile(pattern)

for line in infile:
    match = prog.match(line)
    if match:
        print (match.group('path'))
    text = prog.sub(replacement, line)
    outfile.write(text)
infile.close()
outfile.close
</snippet></ROW><ROW><id>19371423</id><snippet>%f</snippet></ROW><ROW><id>19371423</id><snippet>print "price: %.2f" % prices[x]
</snippet></ROW><ROW><id>19371472</id><snippet>list</snippet></ROW><ROW><id>19371472</id><snippet>dict</snippet></ROW><ROW><id>19371472</id><snippet>dict</snippet></ROW><ROW><id>19371472</id><snippet>[x, y]
</snippet></ROW><ROW><id>19371472</id><snippet>(x, y)
</snippet></ROW><ROW><id>19371472</id><snippet>(</snippet></ROW><ROW><id>19371472</id><snippet>)</snippet></ROW><ROW><id>19371472</id><snippet>,</snippet></ROW><ROW><id>19371472</id><snippet>[]</snippet></ROW><ROW><id>19371472</id><snippet>{}</snippet></ROW><ROW><id>19371504</id><snippet>e</snippet></ROW><ROW><id>19371504</id><snippet>len(d)</snippet></ROW><ROW><id>19371504</id><snippet>d = range(0,9)  # build an arbitrary list here
                # this creates a list of numbers: [0,1,2,3,4,5,6,7,8]
e = len(d)
print list(itertools.permutations(d, e))
</snippet></ROW><ROW><id>19371504</id><snippet>d = range(0,9)
e = len(d)
for p in itertools.permutations(d, e):
    print p
</snippet></ROW><ROW><id>19371578</id><snippet>["class=", "term="]</snippet></ROW><ROW><id>19371578</id><snippet>...
if opt in ("-c", "--class"):
    ...
</snippet></ROW><ROW><id>19371678</id><snippet>total = int(raw_input('What is the total amount for your online shopping?'))
country = raw_input('Shipping within the US or Canada?')

if country == "US":
    if total &lt;= 50:
        print "Shipping Costs $6.00"
    elif total &lt;= 100:
            print "Shipping Costs $9.00"
    elif total &lt;= 150:
            print "Shipping Costs $12.00"
    else:
        print "FREE"

if country == "Canada":
    if total &lt;= 50:
        print "Shipping Costs $8.00"
    elif total &lt;= 100:
        print "Shipping Costs $12.00"
    elif total &lt;= 150:
        print "Shipping Costs $15.00"
    else:
        print "FREE"
</snippet></ROW><ROW><id>19371733</id><snippet>bulk_create</snippet></ROW><ROW><id>19371733</id><snippet>blog = Blog.objects.get(…)
users = User.object.all()

User.blogs.through.objects.bulk_create(
    [User.blogs.through(user_id=user.pk, blog_id=blog.pk) for user in users]
)
</snippet></ROW><ROW><id>19371814</id><snippet>from datetime import date
import calendar

d = date(2000,1,1)
d = d.replace(day=calendar.monthrange(d.year, d.month)[1])
</snippet></ROW><ROW><id>19371814</id><snippet>2013-01-01, 1
2013-02-01, 2
</snippet></ROW><ROW><id>19371814</id><snippet>In [27]: import pandas as pd

In [28]: from datetime import datetime, date

In [29]: import calendar

In [30]: def parse(dt):
             dt = datetime.strptime(dt, '%Y-%m-%d')
             dt = dt.replace(day=calendar.monthrange(dt.year, dt.month)[1])
             return dt.date()
             ....:

In [31]: parse('2013-01-01')
Out[31]: datetime.date(2013, 1, 31)

In [32]: r = pd.read_csv('date.csv', header=None, names=('date', 'value'), parse_dates=['date'], date_parser=parse)

In [33]: r
Out[33]:
         date  value
0  2013-01-31      1
1  2013-02-28      2
</snippet></ROW><ROW><id>19371950</id><snippet>cat test | python sys_test_module.py
 At place 1
 At place 2
 At place 2
</snippet></ROW><ROW><id>19372009</id><snippet>request.user.username</snippet></ROW><ROW><id>19372009</id><snippet>User</snippet></ROW><ROW><id>19372009</id><snippet>def profile_creation(request):
    student_form = StudentForm(request.POST or None)
    if request.method == 'POST':
        username = request.POST.get('username')
        try:
            user = User.objects.get(username=username)
            student = StudentForm.save(commit=False)
            student.user = user
            student.save()
        except User.DoesNotExist:
            # handle the exception
        ...
</snippet></ROW><ROW><id>19372009</id><snippet>user_id</snippet></ROW><ROW><id>19372009</id><snippet>user</snippet></ROW><ROW><id>19372009</id><snippet>user</snippet></ROW><ROW><id>19372009</id><snippet># classes ALWAYS start with a capital letter in Python
class Student(models.Model):
    user_id =  models.OneToOneField(User,unique=True)
    ...

class StudentForm(ModelForm):
    class Meta:
        model = student

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user')
        super(StudentForm, self).__init__(*args, **kwargs)
        self.fields['user'] = user

# views.py
from django.core.urlresolvers import reverse

def profile_creation(request):
    # Assumes the user is authenticated, otherwise request.user
    # will be an AnonymousUser instance...
    student_form = StudentForm(request.POST or None, user=request.user)
    if request.method == 'POST':
        if student_form.is_valid():
            student_form.save()
            # don't hard-code urls - use reverse lookups
            return HttpResponseRedirect(reverse('about'))

    return render(request, 'profile_registration.html',
        {'student_form': student_form}) 
</snippet></ROW><ROW><id>19372080</id><snippet>import zipfile
archive = zipfile.ZipFile('images.zip', 'r')
imgfile = archive.open('img_01.png')
...
</snippet></ROW><ROW><id>19372080</id><snippet>import zipfile
archive = zipfile.ZipFile('images.zip', 'r')
imgdata = archive.read('img_01.png')
...
</snippet></ROW><ROW><id>19372134</id><snippet>import csv</snippet></ROW><ROW><id>19372207</id><snippet>setattr</snippet></ROW><ROW><id>19372207</id><snippet>map(lambda inst: setattr(inst, 'some_setting', True), list_of_instances)
</snippet></ROW><ROW><id>19372207</id><snippet>[setattr(inst, 'some_setting', True) for inst in list_of_instances]
</snippet></ROW><ROW><id>19372207</id><snippet>for</snippet></ROW><ROW><id>19372207</id><snippet>map</snippet></ROW><ROW><id>19372207</id><snippet>for</snippet></ROW><ROW><id>19372207</id><snippet>map</snippet></ROW><ROW><id>19372207</id><snippet>[None, None, None, ..., None]</snippet></ROW><ROW><id>19372308</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 8, .1)
np.random.shuffle(x)
y = np.sin(x)

sx = np.argsort(x)  # find the order for sorting x
x2 = x[sx]          #    apply this to x
y2 = y[sx]          #    apply this to y

plt.plot(x, y, 'y')
plt.plot(x2, y2, 'r', linewidth=4)

plt.show()
</snippet></ROW><ROW><id>19372598</id><snippet>dosomething(f)</snippet></ROW><ROW><id>19372598</id><snippet>dosomething(f)</snippet></ROW><ROW><id>19372598</id><snippet>data = open(file_path).read()
</snippet></ROW><ROW><id>19372598</id><snippet>open("Output.txt", "w").write("Welcome")
print open("Output.txt").read()
</snippet></ROW><ROW><id>19372598</id><snippet>Welcome
</snippet></ROW><ROW><id>19372598</id><snippet>output = open("Output.txt", "w")
output.write("Welcome")
print open("Output.txt").read()
</snippet></ROW><ROW><id>19372598</id><snippet>output</snippet></ROW><ROW><id>19372598</id><snippet>output</snippet></ROW><ROW><id>19372606</id><snippet>urllib.urlopen(URL)</snippet></ROW><ROW><id>19372606</id><snippet>requests.get(URL)</snippet></ROW><ROW><id>19372606</id><snippet>&lt;div class='inner'&gt;
&lt;span class='count'&gt;5&lt;/span&gt;
&lt;span class='count'&gt;8&lt;/span&gt;
&lt;span class='count'&gt;2&lt;/span&gt;
&lt;span class='count_delimiter'&gt;,&lt;/span&gt;
&lt;span class='count'&gt;4&lt;/span&gt;
&lt;span class='count'&gt;1&lt;/span&gt;
&lt;span class='count'&gt;7&lt;/span&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>19372606</id><snippet>soup.find(id="counter")</snippet></ROW><ROW><id>19372606</id><snippet>import requests
from bs4 import BeautifulSoup

resp = requests.get('https://www.digitalocean.com')
soup = BeautifulSoup(resp.text)
digits = [tag.getText() for tag in soup.find_all(class_="count")]
count = int(''.join(digits))
</snippet></ROW><ROW><id>19372609</id><snippet>#!/usr/bin/env python
from mpi4py import MPI

# MPI Initialization
rank = MPI.COMM_WORLD.Get_rank()
comm = MPI.COMM_WORLD

if __name__ == '__main__':
   a = True
   if rank == 0:
      a = False
      # comm.Send ( [ a, MPI.BOOL ], dest=1, tag=111 )
      comm.send ( a, dest=1, tag=111 )
   if rank == 1:
      # comm.Recv ([ a, MPI.BOOL], dest=0, tag=111 )
      a = comm.recv (source=0, tag=111 )
</snippet></ROW><ROW><id>19372692</id><snippet>from itertools import product
def knight_moves(position):
    x, y = position
    moves = list(product([x-1, x+1],[y-1, y+1])) + list(product([x-2,x+2],[y-1,y+1]))
    moves = [(x,y) for x,y in moves if x &gt;= 0 and y &gt;= 0 and x &lt; 8 and y &lt; 8]
    return moves
</snippet></ROW><ROW><id>19372815</id><snippet> for sub in range(2,int(sqrt(num))+1) :
    if num % sub ==0 :
        flag = False
        break
    print num , # &lt;&lt;-- this is inside the for loop and will be printed every iteration
</snippet></ROW><ROW><id>19372840</id><snippet>from collections import deque

d = deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
d.rotate(3)  # to the right
d.rotate(-3)  # back to the left
</snippet></ROW><ROW><id>19372910</id><snippet>c_int * 20</snippet></ROW><ROW><id>19372910</id><snippet>memcpy</snippet></ROW><ROW><id>19372910</id><snippet>MyValue</snippet></ROW><ROW><id>19372910</id><snippet>setattr</snippet></ROW><ROW><id>19372910</id><snippet>*</snippet></ROW><ROW><id>19372910</id><snippet>**</snippet></ROW><ROW><id>19372910</id><snippet>values = [
    ('ftInt', 12),
    ('ftString', 'testing'),
]

arr = MyValues(*(MyValue(**{k: v}) for k, v in values))
</snippet></ROW><ROW><id>19372910</id><snippet>setattr</snippet></ROW><ROW><id>19372910</id><snippet>arr = MyValues()
for item, value in zip(arr, values):
    setattr(item, *value) # note the * unpacking
</snippet></ROW><ROW><id>19372910</id><snippet>_PyCData_set</snippet></ROW><ROW><id>19372943</id><snippet>import re

with open('testin.csv', 'r') as reader:
    lines = [re.sub(r' *#\d+', '', line.strip()) for line in reader]

with open('testout.csv', 'w') as writer:
    writer.write('\n'.join(lines))
</snippet></ROW><ROW><id>19372954</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>19372954</id><snippet>random.randint()</snippet></ROW><ROW><id>19372954</id><snippet>Pane.__init__</snippet></ROW><ROW><id>19373001</id><snippet>import re
m1 = re.search('rice(?! with)', 'rice with beans')
m2 = re.search('rice(?! with)', 'white rice is delicious')
if m1:
  print 'm1 matches!'
  print m1.group(0)

if m2:
  print 'm2 matches!'
  print m2.group(0)
</snippet></ROW><ROW><id>19373001</id><snippet>(?</snippet></ROW><ROW><id>19373001</id><snippet>!</snippet></ROW><ROW><id>19373001</id><snippet>(?!</snippet></ROW><ROW><id>19373001</id><snippet>with</snippet></ROW><ROW><id>19373001</id><snippet>space</snippet></ROW><ROW><id>19373001</id><snippet>with</snippet></ROW><ROW><id>19373001</id><snippet>\s</snippet></ROW><ROW><id>19373187</id><snippet>__dict__</snippet></ROW><ROW><id>19373187</id><snippet>class Holder:
    pass

my_holder = Holder()

my_holder.stuff = 'stuff'
</snippet></ROW><ROW><id>19373187</id><snippet>import itertools

itertools.bongos = 'BONGOS'
</snippet></ROW><ROW><id>19373187</id><snippet>dict</snippet></ROW><ROW><id>19373187</id><snippet>tuple</snippet></ROW><ROW><id>19373187</id><snippet>dict</snippet></ROW><ROW><id>19373187</id><snippet>Line2D</snippet></ROW><ROW><id>19373187</id><snippet>l2d_labels = {}
l2d_labels[line2D_obj] = labels #labels having previously been defined
</snippet></ROW><ROW><id>19373187</id><snippet>namedtuple</snippet></ROW><ROW><id>19373187</id><snippet>from collections import namedtuple
ll2D = namedtuple('Labeled_line2D',['line2D_obj','labels'])
</snippet></ROW><ROW><id>19373187</id><snippet>ll2D</snippet></ROW><ROW><id>19373187</id><snippet>line2D</snippet></ROW><ROW><id>19373187</id><snippet>labels</snippet></ROW><ROW><id>19373256</id><snippet>age = '10'
converted_age = int(age)
if converted_age == 10:
                      ^ Colon needed here.
    print("whats the best way to speak to a monster?")
    print("from as far away as possible!")
</snippet></ROW><ROW><id>19373256</id><snippet>&gt;&gt;&gt; age = '10'
converted_age = int(age)
if converted_age == 10:
    print("whats the best way to speak to a monster?")
    print("from as far away as possible!")
whats the best way to speak to a monster?
from as far away as possible!
</snippet></ROW><ROW><id>19373256</id><snippet>ConvertedAge</snippet></ROW><ROW><id>19373256</id><snippet>converted_age</snippet></ROW><ROW><id>19373256</id><snippet>covnerted_age</snippet></ROW><ROW><id>19373257</id><snippet>print</snippet></ROW><ROW><id>19373257</id><snippet>candies = 0
while True:
    print('You have', candies, 'candies!', end='\r')
    time.sleep(1)
    candies += 1
</snippet></ROW><ROW><id>19373257</id><snippet>print</snippet></ROW><ROW><id>19373257</id><snippet>\n</snippet></ROW><ROW><id>19373257</id><snippet>\r</snippet></ROW><ROW><id>19373324</id><snippet>-e git://github.com/errkk/gitpil.git#egg=PIL
Pillow==1.7.8
</snippet></ROW><ROW><id>19373464</id><snippet>nltk.tokenize.word_tokenize(text)</snippet></ROW><ROW><id>19373464</id><snippet>tokenize</snippet></ROW><ROW><id>19373464</id><snippet>tokenize</snippet></ROW><ROW><id>19373464</id><snippet>def tokenize(self, text):
    for regexp in self.CONTRACTIONS2:
        text = regexp.sub(r'\1 \2', text)
    for regexp in self.CONTRACTIONS3:
        text = regexp.sub(r'\1 \2 \3', text)

    # Separate most punctuation
    text = re.sub(r"([^\w\.\'\-\/,&amp;])", r' \1 ', text)

    # Separate commas if they're followed by space.
    # (E.g., don't separate 2,500)
    text = re.sub(r"(,\s)", r' \1', text)

    # Separate single quotes if they're followed by a space.
    text = re.sub(r"('\s)", r' \1', text)

    # Separate periods that come before newline or end of string.
    text = re.sub('\. *(\n|$)', ' . ', text)

    return text.split()
</snippet></ROW><ROW><id>19373464</id><snippet>&gt;&gt;&gt; nltk.tokenize.word_tokenize("Hello, world.")
['Hello', ',', 'world', '.']
</snippet></ROW><ROW><id>19373464</id><snippet>&gt;&gt;&gt; nltk.tokenize.word_tokenize("Hello, world. How are you?") 
['Hello', ',', 'world.', 'How', 'are', 'you', '?']
</snippet></ROW><ROW><id>19373601</id><snippet>load_offers()</snippet></ROW><ROW><id>19373601</id><snippet>load_offers()</snippet></ROW><ROW><id>19373601</id><snippet>View</snippet></ROW><ROW><id>19373601</id><snippet>class OfferView(View):

    template_name = "generic_app/offers.html"

    def get(self, request, *args, **kwargs):
        return load_offers(request)
</snippet></ROW><ROW><id>19373601</id><snippet>TemplateView</snippet></ROW><ROW><id>19373601</id><snippet>class OfferView(TemplateView): 

    template_name = "generic_app/offers.html"

    def get_context_data(self, **kwargs):
        context = super(OfferView, self).get_context_data(**kwargs)
        context['offers'] = load_offers(self.request)
        return context
</snippet></ROW><ROW><id>19374140</id><snippet>test.status</snippet></ROW><ROW><id>19374140</id><snippet>error: failed to open driver pseudo terminal : Device not configuredFAILURE</snippet></ROW><ROW><id>19374140</id><snippet>status_map</snippet></ROW><ROW><id>19374140</id><snippet>status_map[test.status]

KeyError: 'error: failed to open driver pseudo terminal : Device not configuredFAILURE'
</snippet></ROW><ROW><id>19374296</id><snippet>float('NaN')</snippet></ROW><ROW><id>19374296</id><snippet>&gt;&gt;&gt; a = float('NaN')
&gt;&gt;&gt; print a
nan
&gt;&gt;&gt; print a + 2
nan
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.isnan(a)
True
</snippet></ROW><ROW><id>19374296</id><snippet>float('Inf')</snippet></ROW><ROW><id>19374426</id><snippet>userData</snippet></ROW><ROW><id>19374426</id><snippet>global</snippet></ROW><ROW><id>19374517</id><snippet>r[0]</snippet></ROW><ROW><id>19374517</id><snippet>int</snippet></ROW><ROW><id>19374517</id><snippet>long</snippet></ROW><ROW><id>19374517</id><snippet>stdout.write</snippet></ROW><ROW><id>19374517</id><snippet>write</snippet></ROW><ROW><id>19374994</id><snippet>raw_input('Press enter to continue: ')
</snippet></ROW><ROW><id>19374994</id><snippet>input('Press enter to continue: ')
</snippet></ROW><ROW><id>19375376</id><snippet>datei = ET.parse(settings.MEDIA_ROOT+'\\table.xml')
datas = datei.getroot()

for info in datas.findall('info'):
    if info.find('Country').text == 'GERMANY':
        # do whatever
        pass
</snippet></ROW><ROW><id>19375525</id><snippet>[ [] ] * n</snippet></ROW><ROW><id>19375525</id><snippet>n</snippet></ROW><ROW><id>19375525</id><snippet>n</snippet></ROW><ROW><id>19375525</id><snippet>[0] * n</snippet></ROW><ROW><id>19375525</id><snippet>n</snippet></ROW><ROW><id>19375525</id><snippet>(i,)</snippet></ROW><ROW><id>19375525</id><snippet>(1, 2, 3,)
[1, 2, 3,]
{1: 'one', 2: 'two', 3: 'three',}
{1, 2, 3,}
</snippet></ROW><ROW><id>19375525</id><snippet>(i,)</snippet></ROW><ROW><id>19375525</id><snippet>(i)</snippet></ROW><ROW><id>19375525</id><snippet>(1 + 1) * 2</snippet></ROW><ROW><id>19375525</id><snippet>4</snippet></ROW><ROW><id>19375525</id><snippet>(2, 2)</snippet></ROW><ROW><id>19375525</id><snippet>foo = [
   'this',
   'is',
   'a',
   'long',
   'list',
]
</snippet></ROW><ROW><id>19375533</id><snippet>&gt;&gt;&gt; issubclass(IndentationError, SyntaxError)
True
</snippet></ROW><ROW><id>19375667</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>19375667</id><snippet>div</snippet></ROW><ROW><id>19375667</id><snippet>id("breadcrumbs")//text()</snippet></ROW><ROW><id>19375667</id><snippet>scrapy shell</snippet></ROW><ROW><id>19375667</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>19375667</id><snippet>hxs</snippet></ROW><ROW><id>19375667</id><snippet>paul@wheezy:~$ scrapy shell http://www.jabong.com/z-collection-Olive-Mocassins-376735.html
...
2013-10-15 09:30:06+0200 [default] DEBUG: Crawled (200) &lt;GET http://www.jabong.com/z-collection-Olive-Mocassins-376735.html&gt; (referer: None)
[s] Available Scrapy objects:
[s]   hxs        &lt;HtmlXPathSelector xpath=None data=u'&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Ty'&gt;
...
In [1]: hxs.select('id("breadcrumbs")//text()').extract()
Out[1]: 
[u'\r\n                                    ',
 u'Home',
 u'\r\n                                                ',
 u'&gt;',
 u'\r\n                                                                                                ',
 u'Men',
 u'\r\n                                                ',
 u'&gt;',
 u'\r\n                                                                                                ',
 u'Shoes',
 u'\r\n                                                ',
 u'&gt;',
 u'\r\n                                                                                                ',
 u'Casual Shoes',
 u'\r\n                                                ',
 u'&gt;',
 u'\r\n                                                                                                ',
 u'Moccasins',
 u'\r\n                                                ',
 u'&gt;',
 u'\r\n                                                                                                ',
 u'Olive Mocassins',
 u'\r\n                                                         \r\n',
 u'\r\n        ',
 u'\r\n\r\n        ']
</snippet></ROW><ROW><id>19375667</id><snippet>map()</snippet></ROW><ROW><id>19375667</id><snippet>unicode.strip</snippet></ROW><ROW><id>19375667</id><snippet>In [2]: map(unicode.strip, hxs.select('id("breadcrumbs")//text()').extract())
Out[2]: 
[u'',
 u'Home',
 u'',
 u'&gt;',
 u'',
 u'Men',
 u'',
 u'&gt;',
 u'',
 u'Shoes',
 u'',
 u'&gt;',
 u'',
 u'Casual Shoes',
 u'',
 u'&gt;',
 u'',
 u'Moccasins',
 u'',
 u'&gt;',
 u'',
 u'Olive Mocassins',
 u'',
 u'',
 u'']

In [3]: 
</snippet></ROW><ROW><id>19375667</id><snippet>filter()</snippet></ROW><ROW><id>19375667</id><snippet>In [4]: filter(bool, map(unicode.strip, hxs.select('id("breadcrumbs")//text()').extract()))
Out[4]: 
[u'Home',
 u'&gt;',
 u'Men',
 u'&gt;',
 u'Shoes',
 u'&gt;',
 u'Casual Shoes',
 u'&gt;',
 u'Moccasins',
 u'&gt;',
 u'Olive Mocassins']

In [5]: 
</snippet></ROW><ROW><id>19375667</id><snippet>str.join()</snippet></ROW><ROW><id>19375667</id><snippet>map()</snippet></ROW><ROW><id>19375667</id><snippet>In [9]: ' '.join(map(unicode.strip, hxs.select('id("breadcrumbs")//text()').extract())).strip()
Out[9]: u'Home  &gt;  Men  &gt;  Shoes  &gt;  Casual Shoes  &gt;  Moccasins  &gt;  Olive Mocassins'
</snippet></ROW><ROW><id>19375667</id><snippet>In [10]: ' '.join(filter(bool, map(unicode.strip, hxs.select('id("breadcrumbs")//text()').extract())))
Out[10]: u'Home &gt; Men &gt; Shoes &gt; Casual Shoes &gt; Moccasins &gt; Olive Mocassins'
</snippet></ROW><ROW><id>19375847</id><snippet>super(Derived, self).func()
</snippet></ROW><ROW><id>19375908</id><snippet>pip install python-graph-core</snippet></ROW><ROW><id>19375908</id><snippet>easy_install python-graph-core</snippet></ROW><ROW><id>19375908</id><snippet>python setup.py install
</snippet></ROW><ROW><id>19375908</id><snippet>python3 setup.py install
</snippet></ROW><ROW><id>19376267</id><snippet>def exp(x, n):
    if n &lt; 0:
        return exp(1 / x, -n)
    elif n == 0:
        return 1
    elif n == 1:
        return x
    elif n % 2 == 0:
        return exp(x * x, n / 2)
    else:
        return x * exp(x * x, (n - 1) / 2)
</snippet></ROW><ROW><id>19376449</id><snippet>login_required</snippet></ROW><ROW><id>19376449</id><snippet>unauthorized</snippet></ROW><ROW><id>19376449</id><snippet>LoginManager</snippet></ROW><ROW><id>19376449</id><snippet>from functools import wraps
def user_required(f):
    @wraps(f)
    def decorator(*args, **kwargs):
        if not current_user.is_authenticated():
            return login_manager.unauthorized()
            # or, if you're not using Flask-Login
            # return redirect(url_for('login_page'))
        return f(*args, **kwargs)
    return decorator
</snippet></ROW><ROW><id>19376608</id><snippet>import os
dir = "dirname"
for file in os.listdir(dir):
    ... = QtGui.QPixmap(os.path.join(dir, file))
</snippet></ROW><ROW><id>19376657</id><snippet>for x in selectedFiles:
    M = compare_datafiles(x)
</snippet></ROW><ROW><id>19376657</id><snippet>M</snippet></ROW><ROW><id>19376657</id><snippet>M</snippet></ROW><ROW><id>19376657</id><snippet>&gt;&gt;&gt; M = [compare_datafiles(x) for x in selectedFiles]
</snippet></ROW><ROW><id>19376809</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19376809</id><snippet>datetime.date</snippet></ROW><ROW><id>19376809</id><snippet>dt = dt.replace(year = year)</snippet></ROW><ROW><id>19376809</id><snippet>def get_date(**kwargs):
    '''Returns now, with the given parts overwritten'''
    dt = datetime.now()
    # optionally, depending on intended use of this function
    kwargs = { k : v for k,v in kwargs.items() if v is not None }
    return dt.replace(**kwargs)
</snippet></ROW><ROW><id>19377063</id><snippet>pip install -e foo</snippet></ROW><ROW><id>19377063</id><snippet>$ bin/pip install -e git+https://github.com/mjpieters/setuptools_subversion.git#egg=setuptools_subversion
Obtaining setuptools-subversion from git+https://github.com/mjpieters/setuptools_subversion.git#egg=setuptools_subversion
  Cloning https://github.com/mjpieters/setuptools_subversion.git to /tmp/pip-e/src/setuptools-subversion
  Running setup.py egg_info for package setuptools-subversion

Installing collected packages: setuptools-subversion
  Running setup.py develop for setuptools-subversion

    Creating /private/tmp/pip-e/lib/python2.7/site-packages/setuptools-subversion.egg-link (link to .)
    Adding setuptools-subversion 3.2 to easy-install.pth file

    Installed /private/tmp/pip-e/src/setuptools-subversion
Successfully installed setuptools-subversion
Cleaning up...
$ bin/pip install -e git+https://github.com/mjpieters/setuptools_subversion.git#egg=setuptools_subversion
Obtaining setuptools-subversion from git+https://github.com/mjpieters/setuptools_subversion.git#egg=setuptools_subversion
  Updating /tmp/pip-e/src/setuptools-subversion clone
  Running setup.py egg_info for package setuptools-subversion

Installing collected packages: setuptools-subversion
  Running setup.py develop for setuptools-subversion

    Creating /private/tmp/pip-e/lib/python2.7/site-packages/setuptools-subversion.egg-link (link to .)
    setuptools-subversion 3.2 is already the active version in easy-install.pth

    Installed /private/tmp/pip-e/src/setuptools-subversion
Successfully installed setuptools-subversion
Cleaning up...
</snippet></ROW><ROW><id>19377063</id><snippet>pip</snippet></ROW><ROW><id>19377063</id><snippet>setup.py egg_info</snippet></ROW><ROW><id>19377165</id><snippet>Null &lt; now</snippet></ROW><ROW><id>19377165</id><snippet>Null &gt; Now</snippet></ROW><ROW><id>19377165</id><snippet>def is_visible(self):
    now = datetime.now()

    if self.is_visible:
        # is_visible field is checked.
        return True

    #elif self.visible_start &lt; now and self.visible_stop == Null:
    #    return True

    elif self.visible_start &lt; now and self.visible_stop &gt; now:
        # Start is before now and stop is after now.
        return True

    else:
        # All other options
        return False
</snippet></ROW><ROW><id>19377165</id><snippet># views.py
objects = Entry.objects.all()

# template.html
{% for obj in objects %}
    {% if obj.is_visible %}
        {{ obj.title }}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>19377165</id><snippet># views.py
now = datetime.now()    
objs0 = Entry.objects.filter(visible=True)
objs1 = Entry.objects.filter(visible_start__lte=now, visible_stop__gt=now)
objects = objs0 | objs1

# template.html
{% for obj in objects %}
    {{ obj.title }}
{% endfor %}
</snippet></ROW><ROW><id>19377165</id><snippet>objects = Entry.visible_objects.all()
</snippet></ROW><ROW><id>19377165</id><snippet>objects = Entry.objects.filter(is_visible=True)
</snippet></ROW><ROW><id>19377165</id><snippet># models.py
def is_important(self):
    now = datetime.now()
    if self.start &lt; now and self.stop &gt; now:
        return True
    else:
        return False

# views.py
objects = Entries.objects.all()

# template.html
{% for obj in objects %}
    &lt;p{% if obj.is_important %} class="highlight"{% endif %}&gt;{{ obj.title }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>19377165</id><snippet>class EntryAdmin(admin.ModelAdmin):
    list_display = ('title', 'is_visible')
</snippet></ROW><ROW><id>19377216</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(mydict)
{'DescribeClustersResponse': {'DescribeClustersResult': {'Clusters': [{'AllowVersionUpgrade': True,
                                                                       'AutomatedSnapshotRetentionPeriod': 1,
                                                                       'AvailabilityZone': 'us-east-1a',
                                                                       'ClusterCreateTime': 1381812358.833,
                                                                       'ClusterIdentifier': 'mar5-deliveryreport-new',
                                                                       'ClusterParameterGroups': [{'ParameterApplyStatus': 'in-sync',
                                                                                                   'ParameterGroupName': 'default.redshift-1.0'}],
                                                                       'ClusterSecurityGroups': [{'ClusterSecurityGroupName': 'default',
                                                                                                  'Status': 'active'}],
                                                                       'ClusterStatus': 'available',
                                                                       'ClusterSubnetGroupName': None,
                                                                       'ClusterVersion': '1.0',
                                                                       'DBName': 'mydb',
                                                                       'Encrypted': False,
                                                                       'Endpoint': {'Address': 'mar5-deliveryreport-new.lc.us-east-1.redshift.amazonaws.com',
                                                                                    'Port': 5439},
                                                                       'MasterUsername': 'root',
                                                                       'ModifyStatus': None,
                                                                       'NodeType': 'dw.hs1.xlarge',
                                                                       'NumberOfNodes': 1,
                                                                       'PendingModifiedValues': {'AutomatedSnapshotRetentionPeriod': None,
                                                                                                 'ClusterType': None,
                                                                                                 'ClusterVersion': None,
                                                                                                 'MasterUserPassword': None,
                                                                                                 'NodeType': None,
                                                                                                 'NumberOfNodes': None},
                                                                       'PreferredMaintenanceWindow': 'tue:08:00-tue:08:30',
                                                                       'PubliclyAccessible': True,
                                                                       'RestoreStatus': {'CurrentRestoreRateInMegaBytesPerSecond': 57.3072319201995,
                                                                                         'ElapsedTimeInSeconds': 14035,
                                                                                         'EstimatedTimeToCompletionInSeconds': 0,
                                                                                         'ProgressInMegaBytes': 804307,
                                                                                         'SnapshotSizeInMegaBytes': 804307,
                                                                                         'Status': 'completed'},
                                                                       'VpcId': None,
                                                                       'VpcSecurityGroups': []}],
                                                         'Marker': None},
                              'ResponseMetadata': {'RequestId': '233f495b-3576-11e3-83ff-d332123c25c4'}}}
&gt;&gt;&gt; mydict['DescribeClustersResponse']['DescribeClustersResult']['Clusters'][0]['ClusterIdentifier']
'mar5-deliveryreport-new'
</snippet></ROW><ROW><id>19377365</id><snippet>__</snippet></ROW><ROW><id>19377365</id><snippet>__flag</snippet></ROW><ROW><id>19377365</id><snippet>class Base(object):
    flagAtt = None

    def __init__(self) :
       pass

    @classmethod
    def flag(self):
        return self.flagAtt

class Derived(Base):
    flagAtt = True
</snippet></ROW><ROW><id>19377365</id><snippet>&gt;&gt;&gt; print Derived.flag()
True
&gt;&gt;&gt; print Base.flag()
None
</snippet></ROW><ROW><id>19377558</id><snippet>re.search(r'(?u)\by\b', 'üyü')
</snippet></ROW><ROW><id>19377649</id><snippet>find_element</snippet></ROW><ROW><id>19377649</id><snippet>XPATH</snippet></ROW><ROW><id>19377908</id><snippet>.pyc</snippet></ROW><ROW><id>19377908</id><snippet>.py</snippet></ROW><ROW><id>19377908</id><snippet>.pyc</snippet></ROW><ROW><id>19377908</id><snippet>apache2ctl graceful</snippet></ROW><ROW><id>19377908</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>19378116</id><snippet>pipe = subprocess.Popen("./args/Release/arg_count -arg", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>19378435</id><snippet>a and b and c</snippet></ROW><ROW><id>19378435</id><snippet>&gt;&gt;&gt; e = ast.parse('''a and b and c''').body[0].value
&gt;&gt;&gt; e.op
&lt;_ast.And object at 0x254d1d0&gt;
&gt;&gt;&gt; e.values
[&lt;_ast.Name object at 0x2d9ba50&gt;, &lt;_ast.Name object at 0x2d9ba90&gt;, &lt;_ast.Name object at 0x2d9bad0&gt;]
</snippet></ROW><ROW><id>19378435</id><snippet>&gt;&gt;&gt; ast.parse('''a and (b and c)''').body[0].value.values
[&lt;_ast.Name object at 0x2d9b990&gt;, &lt;_ast.BoolOp object at 0x2d9bb10&gt;]
</snippet></ROW><ROW><id>19378435</id><snippet>BoolOp</snippet></ROW><ROW><id>19378435</id><snippet>a and b and c</snippet></ROW><ROW><id>19378435</id><snippet>a and (b and c)</snippet></ROW><ROW><id>19378435</id><snippet>&gt;&gt;&gt; def f(a, b, c):
...     return a and b and c
... 
&gt;&gt;&gt; def g(a, b, c):
...     return a and (b and c)
... 
&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(f)
  2           0 LOAD_FAST                0 (a)
              3 JUMP_IF_FALSE_OR_POP    15
              6 LOAD_FAST                1 (b)
              9 JUMP_IF_FALSE_OR_POP    15
             12 LOAD_FAST                2 (c)
        &gt;&gt;   15 RETURN_VALUE        
&gt;&gt;&gt; dis(g)
  2           0 LOAD_FAST                0 (a)
              3 JUMP_IF_FALSE_OR_POP    15
              6 LOAD_FAST                1 (b)
              9 JUMP_IF_FALSE_OR_POP    15
             12 LOAD_FAST                2 (c)
        &gt;&gt;   15 RETURN_VALUE        
</snippet></ROW><ROW><id>19378731</id><snippet>msgIDs = {}
# get where you left off in the logfile during the last read:
try:
    with open('logfile_placemarker.txt', 'r') as f:
        lastRead = int(f.read())
except IOError:
    print("Can't find/read place marker file!  Starting at 0")
    lastRead = 0

with open('logfile.log', 'r') as f:
    f.seek(lastRead)
    for line in f:
        # ...
        # Pick out msgIDs and response codes
        # ...
        if msgID in msgIDs:
            print("uh oh, found the same msg id twice!!")
        msgIDs[msgID] = responseCode
    lastRead = f.tell()

# Do whatever you need to do with the msgIDs you found:
updateDB(msgIDs)
# Store lastRead (where you left off in the logfile) in a file if you need to so it persists in the next run
with open('logfile_placemarker.txt', 'w') as f:
    f.write(str(lastRead))
</snippet></ROW><ROW><id>19378843</id><snippet>def merge(a, b):
    if isinstance(a, dict) and isinstance(b, dict):
        d = dict(a)
        d.update({k: merge(a.get(k, None), b[k]) for k in b})
        return d

    if isinstance(a, list) and isinstance(b, list):
        return [merge(x, y) for x, y in itertools.izip_longest(a, b)]

    return a if b is None else b
</snippet></ROW><ROW><id>19378876</id><snippet>jobs = set([job1, job2, job3])

while jobs:
    job = jobs.pop()
    job.process()
</snippet></ROW><ROW><id>19378876</id><snippet>job.process()</snippet></ROW><ROW><id>19378876</id><snippet>dict.popitem()</snippet></ROW><ROW><id>19378876</id><snippet>popitem()</snippet></ROW><ROW><id>19378876</id><snippet>set</snippet></ROW><ROW><id>19378876</id><snippet>None</snippet></ROW><ROW><id>19379233</id><snippet>lxml</snippet></ROW><ROW><id>19379233</id><snippet>h1</snippet></ROW><ROW><id>19379233</id><snippet>//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]//p//text()</snippet></ROW><ROW><id>19379233</id><snippet>//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]//h1//text()</snippet></ROW><ROW><id>19379233</id><snippet>p</snippet></ROW><ROW><id>19379233</id><snippet>h1</snippet></ROW><ROW><id>19379233</id><snippet>&lt;div class="product-shop detail-right"&gt;
    &lt;div class="prcdt-overview"&gt;
        &lt;div class="title"&gt;
                                    &lt;h1&gt;
                &lt;div class="htag"&gt;Vincent Chase&lt;/div&gt;
                &lt;p itemprop="name"&gt; Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses&lt;/p&gt;
            &lt;/h1&gt;
            &lt;span style="text-align:center;color:#329C92;font-size:12px;padding-top:5px"&gt;Product Id: 73871&lt;/span&gt;
        &lt;/div&gt;               

        &lt;div id="container2" style="display: none;"&gt;
            &lt;div class="product-options" id="product-options-wrapper"&gt;
</snippet></ROW><ROW><id>19379233</id><snippet>paul@wheezy:~$ scrapy shell http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html
2013-10-15 13:16:33+0200 [scrapy] INFO: Scrapy 0.18.2 started (bot: scrapybot)
2013-10-15 13:16:34+0200 [default] INFO: Spider opened
2013-10-15 13:16:35+0200 [default] DEBUG: Crawled (200) &lt;GET http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt; (referer: None)
[s] Available Scrapy objects:
[s]   hxs        &lt;HtmlXPathSelector xpath=None data=u'&lt;html class="no-js"&gt;&lt;!--&lt;![endif]--&gt;&lt;hea'&gt;
[s]   item       {}
[s]   request    &lt;GET http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt;
[s]   response   &lt;200 http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt;
[s]   settings   &lt;CrawlerSettings module=None&gt;
[s]   spider     &lt;BaseSpider 'default' at 0x354c310&gt;
[s] Useful shortcuts:
[s]   shelp()           Shell help (print this help)
[s]   fetch(req_or_url) Fetch request (or URL) and update local objects
[s]   view(response)    View response in a browser
Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
Type "copyright", "credits" or "license" for more information.

IPython 0.13.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: hxs.select('//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]//h1//text()').extract()
Out[1]: 
[u'\n                            ',
 u'Vincent Chase',
 u'\n                            ']

In [2]: hxs.select('//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]//p//text()').extract()
Out[2]: 
[u' Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses',
 u'Enter the details below as they appear on your prescription from your doctor. ',
 u'Understand Your Prescription.',
 u'Retail Store Price - Rs 1600',
 u'You Save - Rs 800',
 u'Retail Store Price - Rs 4500',
 u'You Save - Rs 1010',
 u'STATUS: ',
 u'READY TO SHIP\t',
 u'(LIMITED STOCK)',
 u'    ',
 u'Delivered By 20 Oct,2013']

In [4]: hxs.select('//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]/div[@class="title"]//div[@class="htag"]//text()').extract()
Out[4]: [u'Vincent Chase']

In [5]: hxs.select('//*[@id="product_addtocart_form"]//div[@class="prcdt-overview"]/div[@class="title"]//p//text()').extract()
Out[5]: [u' Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses']

In [6]: 
</snippet></ROW><ROW><id>19379233</id><snippet>//*[@itemscope and @itemtype="http://schema.org/Product"]
    //*[@itemprop="name"]/text()
</snippet></ROW><ROW><id>19379233</id><snippet>In [1]: ''.join(hxs.select('//*[@itemscope and @itemtype="http://schema.org/Product"]//*[@itemprop="name"]/text()').extract()).strip()
Out[1]: u'Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses'
</snippet></ROW><ROW><id>19379233</id><snippet>paul@wheezy:~$ scrapy shell http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html
2013-10-15 12:47:30+0200 [scrapy] INFO: Scrapy 0.18.2 started (bot: scrapybot)
2013-10-15 12:47:31+0200 [default] INFO: Spider opened
2013-10-15 12:47:32+0200 [default] DEBUG: Crawled (200) &lt;GET http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt; (referer: None)
[s] Available Scrapy objects:
[s]   hxs        &lt;HtmlXPathSelector xpath=None data=u'&lt;html class="no-js"&gt;&lt;!--&lt;![endif]--&gt;&lt;hea'&gt;
[s]   item       {}
[s]   request    &lt;GET http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt;
[s]   response   &lt;200 http://www.lenskart.com/vincent-chase-vc-5134-matt-black-grey-gradient-wayfarer-sunglasses.html&gt;
[s]   settings   &lt;CrawlerSettings module=None&gt;
[s]   spider     &lt;BaseSpider 'default' at 0x3f54310&gt;
[s] Useful shortcuts:
[s]   shelp()           Shell help (print this help)
[s]   fetch(req_or_url) Fetch request (or URL) and update local objects
[s]   view(response)    View response in a browser
Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
Type "copyright", "credits" or "license" for more information.

IPython 0.13.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: hxs.select("""
   ...: //*[@itemscope and @itemtype="http://schema.org/Product"]
   ...:     //*[@itemprop="name"]/text()""")
Out[1]: [&lt;HtmlXPathSelector xpath='\n//*[@itemscope and @itemtype="http://schema.org/Product"]\n    //*[@itemprop="name"]/text()' data=u' Colorato VC 5134 Matt Black Grey Gradie'&gt;]

In [2]: hxs.select("""
//*[@itemscope and @itemtype="http://schema.org/Product"]
    //*[@itemprop="name"]/text()""").extract()
Out[2]: [u' Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses']

In [3]: ''.join(hxs.select("""
//*[@itemscope and @itemtype="http://schema.org/Product"]
    //*[@itemprop="name"]/text()""").extract()).strip()
Out[3]: u'Colorato VC 5134 Matt Black Grey Gradient Wayfarer Sunglasses'

In [4]: 
</snippet></ROW><ROW><id>19379258</id><snippet>#!/usr/bin/python
import gtk

class PyApp(gtk.Window):

    def __init__(self):
        super(PyApp, self).__init__()

        self.set_title("Calculator")
        self.set_size_request(250, 230)
        self.set_position(gtk.WIN_POS_CENTER)

        vbox = gtk.VBox(False, 2)
        table = gtk.Table(5, 4, True)

        table.attach(gtk.Button("Cls"), 0, 1, 0, 1)
        table.attach(gtk.Button("Bck"), 1, 2, 0, 1)
        table.attach(gtk.Label(), 2, 3, 0, 1)
        table.attach(gtk.Button("Close"), 3, 4, 0, 1)

        table.attach(gtk.Button("7"), 0, 1, 1, 2)
        table.attach(gtk.Button("8"), 1, 2, 1, 2)
        table.attach(gtk.Button("9"), 2, 3, 1, 2)
        table.attach(gtk.Button("/"), 3, 4, 1, 2)

        table.attach(gtk.Button("4"), 0, 1, 2, 3)
        table.attach(gtk.Button("5"), 1, 2, 2, 3)
        table.attach(gtk.Button("6"), 2, 3, 2, 3)
        table.attach(gtk.Button("*"), 3, 4, 2, 3)

        table.attach(gtk.Button("1"), 0, 1, 3, 4)
        table.attach(gtk.Button("2"), 1, 2, 3, 4)
        table.attach(gtk.Button("3"), 2, 3, 3, 4)
        table.attach(gtk.Button("-"), 3, 4, 3, 4)

        table.attach(gtk.Button("0"), 0, 1, 4, 5)
        table.attach(gtk.Button("."), 1, 2, 4, 5)
        table.attach(gtk.Button("="), 2, 3, 4, 5)
        table.attach(gtk.Button("+"), 3, 4, 4, 5)

        #vbox.pack_start(gtk.Entry(), False, False, 0)
        vbox.pack_end(table, True, True, 0)

        self.add(vbox)

        self.connect("destroy", gtk.main_quit)
        self.show_all()


PyApp()
gtk.main()
</snippet></ROW><ROW><id>19379374</id><snippet>element_to_hover_over = driver.find_element_by_css_selector("ul#product-list &gt; :first-child ")
hover = ActionChains(driver).move_to_element(element_to_hover_over)
hover.perform()
if "" == driver.find_element_by_css_selector("span.hover").text:
    driver.find_element_by_css_selector("span.hover").click()
</snippet></ROW><ROW><id>19379397</id><snippet>map</snippet></ROW><ROW><id>19379397</id><snippet>sum</snippet></ROW><ROW><id>19379397</id><snippet>zip</snippet></ROW><ROW><id>19379397</id><snippet>&gt;&gt;&gt; map(sum, zip(*mylist))
[51, 57, 63]
</snippet></ROW><ROW><id>19379397</id><snippet>&gt;&gt;&gt; from itertools import izip, imap
&gt;&gt;&gt; list(imap(sum, izip(*mylist)))
[51, 57, 63]
</snippet></ROW><ROW><id>19379668</id><snippet>&lt;...&gt;</snippet></ROW><ROW><id>19379668</id><snippet>\n</snippet></ROW><ROW><id>19379668</id><snippet>import re
x =  """whatever something&lt;X="Y" zzz="abc"&gt;this is a foo bar &lt;this is a\n\
        &lt; whatever&gt;and i &gt;&lt;only want this"""
y = re.findall("(&lt;[^&gt;\n]*&gt;)",x.strip())
z = x[:]
for i in y:
    z = z.replace(i,'\n')
print(z)
whatever something
this is a foo bar &lt;this is a

and i &gt;&lt;only want this
</snippet></ROW><ROW><id>19379668</id><snippet>findall</snippet></ROW><ROW><id>19379820</id><snippet>urlparse</snippet></ROW><ROW><id>19379820</id><snippet>import urlparse
url = "http://www.domain.com/img?res=high&amp;refurl=http://www.ahother_domain.com/page/&amp;imgurl=http://www.one_more.com/static/images/mercedes.jpg&amp;w=640&amp;h=480"
urlParams = urlparse.parse_qs(urlparse.urlparse(url).query)
urlInUrl = urlParams['imgurl']
print urlInUrl
</snippet></ROW><ROW><id>19380232</id><snippet>$dir</snippet></ROW><ROW><id>19380422</id><snippet>lst = [["r", 200], ["c,", 0.22], ["r", 5000]]
res={}
for k,v in lst:
  res[k]=res.get(k, 0) + v
res
# {'r': 5200, 'c,': 0.22}
</snippet></ROW><ROW><id>19380422</id><snippet>[[k, v] for k,v in res.iteritems()]
# [['r', 5200], ['c,', 0.22]]
</snippet></ROW><ROW><id>19380430</id><snippet>bundle.obj.objects.create_user()
</snippet></ROW><ROW><id>19380430</id><snippet>bundle</snippet></ROW><ROW><id>19380430</id><snippet>obj</snippet></ROW><ROW><id>19380430</id><snippet>CompanyUser</snippet></ROW><ROW><id>19380430</id><snippet>objects</snippet></ROW><ROW><id>19380430</id><snippet>obj</snippet></ROW><ROW><id>19380430</id><snippet>create_user</snippet></ROW><ROW><id>19380462</id><snippet>sys.exit()</snippet></ROW><ROW><id>19380462</id><snippet>SystemExit</snippet></ROW><ROW><id>19380604</id><snippet>df = pd.DataFrame(np.random.randint(0,4,(100,50)),index=None,columns=["Col" + ("%03d" % (i + 1)) for i in range(50)])

# the first five cols and rows:
df.iloc[:5,:5]

   Col001  Col002  Col003  Col004  Col005
0       2       0       2       3       1
1       0       1       0       1       3
2       0       1       1       0       3
3       3       1       0       2       1
4       1       2       3       1       0
</snippet></ROW><ROW><id>19380604</id><snippet>req = ['Col002', 'Col012', 'Col025', 'Col032', 'Col033']
filt = {'Col001': 2, 'Col002': 2, 'Col005': 2}
</snippet></ROW><ROW><id>19380604</id><snippet>df.loc[df[filt.keys()].apply(lambda x: x.tolist() == filt.values(), axis=1), req]
</snippet></ROW><ROW><id>19380604</id><snippet>    Col002  Col012  Col025  Col032  Col033
43       2       2       1       3       3
98       2       1       1       1       2
</snippet></ROW><ROW><id>19380604</id><snippet>df[filt.keys()].iloc[[43,98]]

    Col005  Col001  Col002
43       2       2       2
98       2       2       2
</snippet></ROW><ROW><id>19380604</id><snippet>df[filt.keys()].iloc[[44,99]]

    Col005  Col001  Col002
44       3       0       3
99       1       0       0
</snippet></ROW><ROW><id>19380761</id><snippet>NaN</snippet></ROW><ROW><id>19380761</id><snippet>In [5]: Series([1, 2, 'blah', '#DIV/0!']).convert_objects(convert_numeric=True)
Out[5]: 
0     1
1     2
2   NaN
3   NaN
dtype: float64
</snippet></ROW><ROW><id>19380761</id><snippet>from scipy.stats import linregress
def fit_line1(x, y):
    """Return slope, intercept of best fit line."""
    # Remove entries where either x or y is NaN.
    clean_data = pd.concat([x, y], 1).dropna(0) # row-wise
    (_, x), (_, y) = clean_data.iteritems()
    slope, intercept, r, p, stderr = linregress(x, y)
    return slope, intercept # could also return stderr

import statsmodels.api as sm
def fit_line2(x, y):
    """Return slope, intercept of best fit line."""
    X = sm.add_constant(x)
    model = sm.OLS(y, X, missing='drop') # ignores entires where x or y is NaN
    fit = model.fit()
    return fit.params[1], fit.params[0] # could also return stderr in each via fit.bse
</snippet></ROW><ROW><id>19380761</id><snippet>m, b = fit_line2(x, y)
N = 100 # could be just 2 if you are only drawing a straight line...
points = np.linspace(x.min(), x.max(), N)
plt.plot(points, m*points + b)
</snippet></ROW><ROW><id>19380823</id><snippet>import pandas as pd
import quantities as pq

def extendAndInterpolate(input, newIndex):
""" Function to extend a panda dataframe and interpolate
"""
output = pd.concat([input, pd.DataFrame(index=newIndex)], axis=1)

for col in output.columns:
    # (1) Try to retrieve the unit of the current column
    try:
        # if it succeeds, then store the unit
        unit = 1 * output[col][0].units    
    except Exception, e:
        # if it fails, which means that the column contains string
        # then return 1
        unit = 1

    # (2) Check the type of value.
    if isinstance(output[col][0], basestring):
        # if it's a string return the string and fill the missing cell with this string
        value = output[col].ffill()
    else:
        # if it's a value, to be able to interpolate, you need to:
        #   - (a) dump the unit with astype(float)
        #   - (b) interpolate the value
        #   - (c) add again the unit
        value = [x*unit for x in output[col].astype(float).interpolate(method='values')]
    #
    # (3) Returned the extended pandas table with the interpolated values    
    output[col] = pd.Series(value, index=output.index)
# Return the output dataframe
return output
</snippet></ROW><ROW><id>19380823</id><snippet>depth = [0.0,1.1,2.0] * pq.m
depth2 = [0,1,1.1,1.5,2] * pq.m

s1 = pd.DataFrame(
        {'depth' : [x for x in depth]},
        index = depth)

s2 = extendAndInterpolate(s1, depth2)
</snippet></ROW><ROW><id>19380823</id><snippet>s1
     depth
0.0  0.0 m
1.1  1.1 m
2.0  2.0 m

s2     
     depth
0.0  0.0 m
1.0  1.0 m
1.1  1.1 m
1.5  1.5 m
2.0  2.0 m
</snippet></ROW><ROW><id>19380882</id><snippet>from os.path import splitext

def get_name():
    while True:
        name = input("File name&gt; ")
        if splitext(name)[1] != '.txt':
            print("Invalid name, give another")
        else:
            return name

filename = get_name()
</snippet></ROW><ROW><id>19381080</id><snippet>StockMovementProduct.py</snippet></ROW><ROW><id>19381080</id><snippet>Synchronizer.py</snippet></ROW><ROW><id>19381080</id><snippet>Synchronizer.py</snippet></ROW><ROW><id>19381080</id><snippet>StockMovementProduct.py</snippet></ROW><ROW><id>19381271</id><snippet>message.token('CgeMZKRl2cqZAmGQ0VNCvySXAsaMPqeHga9ZUC3kqpM=')</snippet></ROW><ROW><id>19381271</id><snippet>message.tokenBase64("6CORK2VBuJCPi1Y8oB3PRyoIiSf7Aq5sD7noZ/Awxao=")
</snippet></ROW><ROW><id>19381480</id><snippet>class CustomWidget(QtGui.QWidget):

    def __init__(self, parent=None):
        super(CustomWidget, self).__init__(parent)
        layout = QtGui.QVBoxLayout(self)
        self.title_label = QtGui.QLabel("Select full files path:")
        self.simoderev_widget = QtGui.QWidget()
        simoderev_layout = QtGui.QHBoxLayout(self.simoderev_widget)
        self.simoderev_checkbox = QtGui.QCheckBox("use simoderev as base: ")
        self.simoderev_combobox = QtGui.QComboBox()
        self.simoderev_widget.setMaximumWidth(250)
        simoderev_layout.addWidget(self.simoderev_checkbox)
        simoderev_layout.addWidget(self.simoderev_combobox)
        simoderev_layout.setContentsMargins(0,0,0,0)
        self.paths_label = QtGui.QLabel("paths:")
        layout.addWidget(self.title_label)
        layout.addWidget(self.simoderev_widget)
        layout.addWidget(self.paths_label)
</snippet></ROW><ROW><id>19381480</id><snippet>currentChanged</snippet></ROW><ROW><id>19381480</id><snippet>class MyTabWidget(QtGui.QTabWidget):

    def __init__(self, parent = None):
        super(MyTabWidget, self).__init__(parent)

        self.subwidget = CustomWidget(self)

        self.left_tab_widget = QtGui.QWidget()
        self.leftLayout = QtGui.QVBoxLayout(self.left_tab_widget)
        self.leftLayout.addWidget(self.subwidget)

        self.right_tab_widget = QtGui.QWidget(self)
        self.rightLayout = QtGui.QVBoxLayout(self.right_tab_widget)
        label = QtGui.QLabel("Some additional data", self.right_tab_widget)
        self.rightLayout.addWidget(label)

        self.addTab(self.left_tab_widget, "Left Tab")
        self.addTab(self.right_tab_widget, "Right Tab")

        self.currentChanged.connect(self.onCurrentChanged)

    def onCurrentChanged(self, index):
        if index == 0:
            self.leftLayout.addWidget(self.subwidget)
        else:
            self.rightLayout.addWidget(self.subwidget)


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    widget = MyTabWidget()
    widget.show()
    app.exec_()
</snippet></ROW><ROW><id>19381650</id><snippet>def long_blocking_function(index, sleep_time, callback):
    print ("Entering run counter:%s" % (index,))
    time.sleep(sleep_time)
    print ("Exiting run counter:%s" % (index,))
    return "Result from %d" % index


class FooHandler(tornado.web.RequestHandler):
    @tornado.gen.coroutine
    def get(self):
        global counter
        counter += 1
        current_counter = str(counter)

        print ("ABOUT to spawn thread for counter:%s" % (current_counter,))
        result = yield self.executor.submit(long_blocking_function,
                                            index=current_counter,
                                            sleep_time=5)
        self.write(result)
        print ("DONE with the long function")
</snippet></ROW><ROW><id>19381712</id><snippet>test[:, ~np.all(test.mask, axis=0)]
#masked_array(data =
# [[1 --]
# [-- 3]
# [1 4]],
#             mask =
# [[False  True]
# [ True False]
# [False False]],
#       fill_value = 0)
</snippet></ROW><ROW><id>19382098</id><snippet>File Templates</snippet></ROW><ROW><id>19382436</id><snippet>matplotlib</snippet></ROW><ROW><id>19382436</id><snippet>mayavi</snippet></ROW><ROW><id>19382436</id><snippet>scipy.interpolate</snippet></ROW><ROW><id>19382517</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>19382517</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>19382517</id><snippet>def movie_function(film):
    connection = mysql connection info
    cursor = connection.cursor()
    sql = "SELECT * FROM film_database WHERE film_name = %s ORDER BY actor"

    cursor.execute(sql, (film,))
    if not cursor.rowcount:
        print "No results found"
    else:
        for row in cursor:
            print row[1]
</snippet></ROW><ROW><id>19382517</id><snippet>%s</snippet></ROW><ROW><id>19382517</id><snippet>cursor.execute()</snippet></ROW><ROW><id>19382640</id><snippet>\w</snippet></ROW><ROW><id>19382640</id><snippet>r'^details/(?P&lt;event_cat&gt;.{0,50})/$'</snippet></ROW><ROW><id>19382648</id><snippet>{ k:v for k,v in (elem.split(':') for elem in a.split(','))}
</snippet></ROW><ROW><id>19382722</id><snippet>import scipy.io.wavfile
fs1, y1 = scipy.io.wavfile.read(filename)
l1 = numpy.array([  [7.2,19.8], [35.3,67.23], [103,110 ] ])
l1 = ceil(l1*fs1)#get integer indices into the wav file - careful of end of array reading with a check for greater than y1.shape
newWavFileAsList = []
for elem in l1:
  startRead = elem[0]
  endRead = elem[1]
  if startRead &gt;= y1.shape[0]:
    startRead = y1.shape[0]-1
  if endRead &gt;= y1.shape[0]:
    endRead = y1.shape[0]-1
  newWavFileAsList.extend(y1[startRead:endRead])


newWavFile = numpy.array(newWavFileAsList)

scipy.io.wavfile.write(outputName, fs1, newWavFile)
</snippet></ROW><ROW><id>19382755</id><snippet>from django.shortcuts import get_object_or_404
from django.core.urlresolvers import reverse


def delete(request, id):
    note = get_object_or_404(Note, pk=id).delete()
    return HttpResponseRedirect(reverse('notes.views.notes'))
</snippet></ROW><ROW><id>19382755</id><snippet>urls.py</snippet></ROW><ROW><id>19382755</id><snippet>url(r'^delete/(?P&lt;id&gt;\d+)/$','project.app.views.delete'),
</snippet></ROW><ROW><id>19382774</id><snippet>format()</snippet></ROW><ROW><id>19382774</id><snippet>file.write('{0}if ({1}{2}{3}):'.format(indentation, cond[0], cond[1], cond[2]))
</snippet></ROW><ROW><id>19382856</id><snippet>reshape</snippet></ROW><ROW><id>19382856</id><snippet>In [132]: p = np.array("p_x1y1z1 p_x2y1z1 p_x3y1z1 p_x4y1z1 p_x1y2z1 p_x2y2z1 p_x3y2z1 p_x4y2z1".split())

In [133]: p
Out[133]: 
array(['p_x1y1z1', 'p_x2y1z1', 'p_x3y1z1', 'p_x4y1z1', 'p_x1y2z1', 'p_x2y2z1', 'p_x3y2z1', 'p_x4y2z1'], 
      dtype='|S8')
</snippet></ROW><ROW><id>19382856</id><snippet>'F'</snippet></ROW><ROW><id>19382856</id><snippet>In [168]: p.reshape(4, 2, order='F')
Out[168]: 
array([['p_x1y1z1', 'p_x1y2z1'],
       ['p_x2y1z1', 'p_x2y2z1'],
       ['p_x3y1z1', 'p_x3y2z1'],
       ['p_x4y1z1', 'p_x4y2z1']], 
      dtype='|S8')
</snippet></ROW><ROW><id>19382856</id><snippet>z</snippet></ROW><ROW><id>19382856</id><snippet>In [169]: q
Out[169]: 
array(['p_x1y1z1', 'p_x2y1z1', 'p_x3y1z1', 'p_x4y1z1', 'p_x1y2z1',
       'p_x2y2z1', 'p_x3y2z1', 'p_x4y2z1', 'p_x1y1z2', 'p_x2y1z2',
       'p_x3y1z2', 'p_x4y1z2', 'p_x1y2z2', 'p_x2y2z2', 'p_x3y2z2',
       'p_x4y2z2', 'p_x1y1z3', 'p_x2y1z3', 'p_x3y1z3', 'p_x4y1z3',
       'p_x1y2z3', 'p_x2y2z3', 'p_x3y2z3', 'p_x4y2z3'], 
      dtype='|S8')

In [170]: q.reshape(4,2,3,order='F')
Out[170]: 
array([[['p_x1y1z1', 'p_x1y1z2', 'p_x1y1z3'],
        ['p_x1y2z1', 'p_x1y2z2', 'p_x1y2z3']],

       [['p_x2y1z1', 'p_x2y1z2', 'p_x2y1z3'],
        ['p_x2y2z1', 'p_x2y2z2', 'p_x2y2z3']],

       [['p_x3y1z1', 'p_x3y1z2', 'p_x3y1z3'],
        ['p_x3y2z1', 'p_x3y2z2', 'p_x3y2z3']],

       [['p_x4y1z1', 'p_x4y1z2', 'p_x4y1z3'],
        ['p_x4y2z1', 'p_x4y2z2', 'p_x4y2z3']]], 
      dtype='|S8')
</snippet></ROW><ROW><id>19382856</id><snippet>x,y,z</snippet></ROW><ROW><id>19382856</id><snippet>i+1,j+1,k+1</snippet></ROW><ROW><id>19382856</id><snippet>In [175]: r = q.reshape(4,2,3,order='F')

In [176]: r[0]   #all x==1
Out[176]: 
array([['p_x1y1z1', 'p_x1y1z2', 'p_x1y1z3'],
       ['p_x1y2z1', 'p_x1y2z2', 'p_x1y2z3']], 
      dtype='|S8')

In [177]: r[:,0]  # all y==1
Out[177]: 
array([['p_x1y1z1', 'p_x1y1z2', 'p_x1y1z3'],
       ['p_x2y1z1', 'p_x2y1z2', 'p_x2y1z3'],
       ['p_x3y1z1', 'p_x3y1z2', 'p_x3y1z3'],
       ['p_x4y1z1', 'p_x4y1z2', 'p_x4y1z3']], 
      dtype='|S8')

In [178]: r[:,:,0]  #all z==1
Out[178]: 
array([['p_x1y1z1', 'p_x1y2z1'],
       ['p_x2y1z1', 'p_x2y2z1'],
       ['p_x3y1z1', 'p_x3y2z1'],
       ['p_x4y1z1', 'p_x4y2z1']], 
      dtype='|S8')
</snippet></ROW><ROW><id>19382868</id><snippet>In [28]: rng = pd.date_range('2012-01-01', '2013-01-01', freq="1min")

In [29]: rng
Out[29]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-01 00:00:00, ..., 2013-01-01 00:00:00]
Length: 527041, Freq: T, Timezone: None
</snippet></ROW><ROW><id>19382868</id><snippet>In [30]: x = rng[rng.indexer_between_time('9:30','16:00')]

In [31]: x
Out[31]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-01 09:30:00, ..., 2012-12-31 16:00:00]
Length: 143106, Freq: None, Timezone: None
</snippet></ROW><ROW><id>19382868</id><snippet>In [32]: x = x[x.dayofweek&lt;5]

In [33]: x
Out[33]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-02 09:30:00, ..., 2012-12-31 16:00:00]
Length: 102051, Freq: None, Timezone: None
</snippet></ROW><ROW><id>19382890</id><snippet>import scipy.io.wavfile
fs1, y1 = scipy.io.wavfile.read(filename)
</snippet></ROW><ROW><id>19383060</id><snippet>get_context_data</snippet></ROW><ROW><id>19383060</id><snippet>def get_context_data(self. **kwargs):
    context = super(PageView, self).get_context_data(**kwargs)
    context['more_model_objects'] = YourModel.objects.all()
    return context
</snippet></ROW><ROW><id>19383142</id><snippet>process_view</snippet></ROW><ROW><id>19383142</id><snippet>process_request</snippet></ROW><ROW><id>19383142</id><snippet>process_view</snippet></ROW><ROW><id>19383142</id><snippet>def process_view(self, request, view_func, view_args, view_kwargs):
    if some_clause:
        return render(request, 'foo.html', {'foo': 'bar'})

    return view_func(request, view_args, view_kwargs)
</snippet></ROW><ROW><id>19383268</id><snippet>import os

with os.fdopen(3, 'r') as fp:
  for line in fp:
    print line,
</snippet></ROW><ROW><id>19383268</id><snippet>$ python &lt; source.py 3&lt; input.txt
</snippet></ROW><ROW><id>19383389</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>19383389</id><snippet>auto_now=True</snippet></ROW><ROW><id>19383850</id><snippet>from lxml import etree

tree = etree.parse("file.xml")
root = tree.getroot()
validityLst = root.xpath('Validity')
validityLineLst = root.xpath('ValidityLine')
</snippet></ROW><ROW><id>19384041</id><snippet>'''
Simple and fast image transforms to mimic:
 - brightness
 - contrast
 - erosion 
 - dilation
'''

import cv2
from pylab import array, plot, show, axis, arange, figure, uint8 

# Image data
image = cv2.imread('imgur.png',0) # load as 1-channel 8bit grayscale
cv2.imshow('image',image)
maxIntensity = 255.0 # depends on dtype of image data
x = arange(maxIntensity) 

# Parameters for manipulating image data
phi = 1
theta = 1

# Increase intensity such that
# dark pixels become much brighter, 
# bright pixels become slightly bright
newImage0 = (maxIntensity/phi)*(image/(maxIntensity/theta))**0.5
newImage0 = array(newImage0,dtype=uint8)

cv2.imshow('newImage0',newImage0)
cv2.imwrite('newImage0.jpg',newImage0)

y = (maxIntensity/phi)*(x/(maxIntensity/theta))**0.5

# Decrease intensity such that
# dark pixels become much darker, 
# bright pixels become slightly dark 
newImage1 = (maxIntensity/phi)*(image/(maxIntensity/theta))**2
newImage1 = array(newImage1,dtype=uint8)

cv2.imshow('newImage1',newImage1)

z = (maxIntensity/phi)*(x/(maxIntensity/theta))**2

# Plot the figures
figure()
plot(x,y,'r-') # Increased brightness
plot(x,x,'k:') # Original image
plot(x,z, 'b-') # Decreased brightness
#axis('off')
axis('tight')
show()

# Close figure window and click on other window 
# Then press any keyboard key to close all windows
closeWindow = -1
while closeWindow&lt;0:
    closeWindow = cv2.waitKey(1) 
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>19384041</id><snippet>phi</snippet></ROW><ROW><id>19384041</id><snippet>theta</snippet></ROW><ROW><id>19384377</id><snippet>In [17]: df = DataFrame({'Q1': [1933, 1943]})

In [18]: df.replace(incorrect_dict, regex=True)
Out[18]: 
     Q1
0  1933
1  1943
</snippet></ROW><ROW><id>19384377</id><snippet>In [19]: df['Q1'] = df['Q1'].map(str)

In [20]: df.replace(incorrect_dict, regex=True)
Out[20]: 
     Q1
0     0
1  1943
</snippet></ROW><ROW><id>19384377</id><snippet>df['Q1'] == 1943</snippet></ROW><ROW><id>19384503</id><snippet>if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    main_window = MainWindowClass()
    main_window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19384682</id><snippet>settings/technical/user interface/menu items</snippet></ROW><ROW><id>19384682</id><snippet>technical features</snippet></ROW><ROW><id>19384867</id><snippet>plot((0.15435,0.15440,0.15445,0.15450,0.15455,0.15460),(0.15435,0.15440,0.15445,0.15450,0.15455,0.15460))
</snippet></ROW><ROW><id>19384867</id><snippet>y_formatter = matplotlib.ticker.ScalarFormatter(useOffset=False)
gca().yaxis.set_major_formatter(y_formatter)
</snippet></ROW><ROW><id>19385216</id><snippet>else</snippet></ROW><ROW><id>19385216</id><snippet>True</snippet></ROW><ROW><id>19385216</id><snippet>def eprimo(num):
    if num &lt; 2:
        return False
    if num == 2:
        return True
    else:
        for div in range(2,num):
            if num % div == 0:
                return False
        return True
</snippet></ROW><ROW><id>19385216</id><snippet>num</snippet></ROW><ROW><id>19385216</id><snippet>num</snippet></ROW><ROW><id>19385316</id><snippet>1{+}2{=}^C</snippet></ROW><ROW><id>19385316</id><snippet>import win32com.client
import win32api
shell = win32com.client.Dispatch("WScript.Shell")
shell.Run("calc")
win32api.Sleep(100)
shell.AppActivate("Calculator")
shell.SendKeys("1{+}2{=}^C")
win32api.Sleep(500)

import win32clipboard
import win32con
win32clipboard.OpenClipboard()
r = win32clipboard.GetClipboardData(win32con.CF_TEXT).rstrip('\x00')
win32clipboard.CloseClipboard()
print(r)
</snippet></ROW><ROW><id>19385316</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; import win32api
&gt;&gt;&gt; shell = win32com.client.Dispatch("WScript.Shell")
&gt;&gt;&gt; shell.Run("calc")
0
&gt;&gt;&gt; win32api.Sleep(100)
0
&gt;&gt;&gt; shell.AppActivate("Calculator")
False
&gt;&gt;&gt; shell.SendKeys("1{+}2{=}^C")
&gt;&gt;&gt; win32api.Sleep(500)
0
&gt;&gt;&gt;
&gt;&gt;&gt; import win32clipboard
&gt;&gt;&gt; import win32con
&gt;&gt;&gt; win32clipboard.OpenClipboard()
&gt;&gt;&gt; r = win32clipboard.GetClipboardData(win32con.CF_TEXT).rstrip('\x00')
&gt;&gt;&gt; win32clipboard.CloseClipboard()
&gt;&gt;&gt; print(r)
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19385336</id><snippet>C1.method2.RequestEvent</snippet></ROW><ROW><id>19385336</id><snippet>RequestEvent</snippet></ROW><ROW><id>19385336</id><snippet>C1</snippet></ROW><ROW><id>19385336</id><snippet>def handleResponseEvent(request, response, dnp):
</snippet></ROW><ROW><id>19385336</id><snippet>dnp</snippet></ROW><ROW><id>19385336</id><snippet>DNPClass</snippet></ROW><ROW><id>19385336</id><snippet>C1</snippet></ROW><ROW><id>19385336</id><snippet>request</snippet></ROW><ROW><id>19385336</id><snippet>response</snippet></ROW><ROW><id>19385336</id><snippet>DNPClass</snippet></ROW><ROW><id>19385336</id><snippet>def main():
    C1 = DNPClass()
    C1.method1(arg1, arg2, arg3, arg4, arg5)

    # subscribing to event
    C1.method2.RequestEvent += handleResponseEvent  # will call C1.method3

    C2 = DNPClass()

    C2.method2.RequestEvent += handleResponseEvent  # will call C2.method3


def handleResponseEvent(request, response):
    #code to execute when event handler is called
    #code references additional method from current DNPClass instance
    request.dnp.method3()
    ...
</snippet></ROW><ROW><id>19385336</id><snippet>DNPClass</snippet></ROW><ROW><id>19385336</id><snippet>def subscribe_handleResponseEvent(dnp):
    def handleResponseEvent(request, response):
        #code to execute when event handler is called
        #code references additional method from dnp instance
        dnp.method3()
        ...

    dnp.method2.RequestEvent += handleResponseEvent


def main():
    C1 = DNPClass()
    C1.method1(arg1, arg2, arg3, arg4, arg5)

    # subscribing to event
    subscribe_handleResponseEvent(C1)
    ...
</snippet></ROW><ROW><id>19385591</id><snippet>groupby</snippet></ROW><ROW><id>19385591</id><snippet>agg</snippet></ROW><ROW><id>19385591</id><snippet>df['col1','col2','col3','col4'].groupby(['col1','col2']).agg(['mean', 'count'])
</snippet></ROW><ROW><id>19385604</id><snippet>after</snippet></ROW><ROW><id>19385604</id><snippet>from tkinter import *

class Clock:
    def __init__(self, parent):
        self.parent = parent
        self.x = 0
        self.z = 0
        self.second = Label(parent)
        self.minute = Label(parent)
        self.second.pack()
        self.minute.pack()
    def advance(self):
        self.second.config(text='{0.x} second(s)'.format(self))
        self.minute.config(text='{0.z} minute(s) past.'.format(self))
        self.x += 1
        if self.x == 60:
            self.x = 0
            self.z += 1
        self.parent.after(1000, self.advance)
        # This method is called after 1000 ms (1 second)

mGui = Tk()
mGui.geometry("300x200+100+100")
mGui.title("Jono's Clock")

clock = Clock(mGui)


menubar = Menu(mGui)
filemenu = Menu(menubar, tearoff = 0)
filemenu.add_command(label="Clock", command=clock.advance)

menubar.add_cascade(label="File", menu=filemenu)
mGui.config(menu = menubar)

mGui.mainloop()
</snippet></ROW><ROW><id>19385801</id><snippet>SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'
</snippet></ROW><ROW><id>19385932</id><snippet>Parent2</snippet></ROW><ROW><id>19385932</id><snippet>Child2</snippet></ROW><ROW><id>19385932</id><snippet>Parent2</snippet></ROW><ROW><id>19385932</id><snippet>Child</snippet></ROW><ROW><id>19385932</id><snippet>Parent</snippet></ROW><ROW><id>19385932</id><snippet>self.getParentName()</snippet></ROW><ROW><id>19386045</id><snippet>ax.plot(x, y, label="Representatives" if i == 0 else "")
</snippet></ROW><ROW><id>19386045</id><snippet>i</snippet></ROW><ROW><id>19386045</id><snippet>matplotlib</snippet></ROW><ROW><id>19386045</id><snippet>"_nolegend_"</snippet></ROW><ROW><id>19386079</id><snippet>import types

class A(object):
    def do_computing(self):
        print "do_computing"

methods = {name:value for name, value in A.__dict__.iteritems()
                        if not name.startswith('_')}

instance_class = type('B', (object,), {'a': '#A', 'b': '#B'})

for name, func in methods.iteritems():
    new_method = types.MethodType(func, None, instance_class)
    setattr(instance_class, name, new_method)

instance_class().do_computing()
</snippet></ROW><ROW><id>19386137</id><snippet>[{'category': 'Boots', 'url': 'http://boots4tall.com'},
 {'category': 'Boots', 'url': 'http://myboots.com'},
 {'category': 'Boots', 'url': 'http://boots.com'},
 {'category': 'Xbox', 'url': 'http://xbox.com'},
 {'category': 'Xbox', 'url': 'http://xboxOne.com'}
 ...
]
</snippet></ROW><ROW><id>19386137</id><snippet>import json

with open('config.json') as f:
    pairs = json.load(f)

for item in pairs:
    category = item['category']
    url = item['url']
    # process them here...
</snippet></ROW><ROW><id>19386137</id><snippet>import json

pairs = [{'url': url, 'category': category} for (url, category) in zip(urls, categories))]
with open('config.json', 'w') as f:
    json.dump(pairs, f)
</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>players</snippet></ROW><ROW><id>19386237</id><snippet>Blocks</snippet></ROW><ROW><id>19386237</id><snippet>instancelist</snippet></ROW><ROW><id>19386237</id><snippet>Block</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>Block</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>Block</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>grounded</snippet></ROW><ROW><id>19386237</id><snippet>0</snippet></ROW><ROW><id>19386237</id><snippet>else</snippet></ROW><ROW><id>19386237</id><snippet>else</snippet></ROW><ROW><id>19386237</id><snippet>Block</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>1</snippet></ROW><ROW><id>19386237</id><snippet>Blocks</snippet></ROW><ROW><id>19386237</id><snippet>Player</snippet></ROW><ROW><id>19386237</id><snippet>grounded</snippet></ROW><ROW><id>19386237</id><snippet>0</snippet></ROW><ROW><id>19386237</id><snippet>Block</snippet></ROW><ROW><id>19386237</id><snippet>Blocks</snippet></ROW><ROW><id>19386237</id><snippet>grounded</snippet></ROW><ROW><id>19386237</id><snippet>while True:
    grounded = 0
    for b in instancelist:
        for p in players:
            if b.rect.collidepoint(p.rect.centerx,p.rect.bottom+4):
                grounded=1
    print grounded
</snippet></ROW><ROW><id>19386237</id><snippet>break</snippet></ROW><ROW><id>19386237</id><snippet>while True:
    grounded = 0
    for p in players:
        for b in instancelist:
            if b.rect.collidepoint(p.rect.centerx,p.rect.bottom+4):
                grounded=1
                break
    print grounded
</snippet></ROW><ROW><id>19386384</id><snippet>/* Definitions for peripherals */
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_BASEADDR 0x76800000
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_HIGHADDR 0x7680FFFF
//Shorten name to make it easier for asker to read
#define BASEADDR XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_BASEADDR
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_RESET_CNTRS_OFFSET (BASEADDR + 0x0)
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_MAC_1_LOW_OFFSET   (BASEADDR + 0xc)
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_MAC_1_HIGH_OFFSET  (BASEADDR + 0x10)
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_MAC_3_LOW_OFFSET   (BASEADDR + 0x1c)
#define XPAR_NF10_ROUTER_OUTPUT_PORT_LOOKUP_0_BAR0_MAC_3_HIGH_OFFSET  (BASEADDR + 0x20)
#undef BASEADDR
</snippet></ROW><ROW><id>19386384</id><snippet>#This script assumes that OFFSET #defines come after
# their associated BASEADDR #defines
input_file = open("path/to/input/file.c", read)
output_file = open("path/to/output/file.c", write)
baseaddr = 0
#In iteration of the loop, "line" will be a string
# containing a single line of the file
foreach line in input_file:
    #Get base address from the _BASEADDR #defines
    if regex_match("#define .*_BASEADDR (0x[0-9]{8})", line):
        baseaddr = hex_string_to_number(regex_groups[0])
        write_line(output_file, line)
    #Create new offset #define by adding offset from source
    # file to base address from source file
    else if regex_match("#define (.*)_OFFSET (0x[0-9]+)", line):
        new_val = hex_string_to_number(regex_groups[1]) + baseaddr
        #Format here is similar to C's sprintf.
        # Whichever language you choose will likely have
        # something that behaves differently
        new_line = format("#define %s_OFFSET %s",
                          regex_groups[0],
                          number_to_hex_string(new_val))
        write_line(output_file, new_line)
    #Pass through all other lines (blanks, HIGHADDRs, comments, etc)
    else:
        write_line(output_file, line)
</snippet></ROW><ROW><id>19386473</id><snippet>x</snippet></ROW><ROW><id>19386473</id><snippet>==</snippet></ROW><ROW><id>19386473</id><snippet>idx = x[:-1] == x[1:]
</snippet></ROW><ROW><id>19386473</id><snippet>x</snippet></ROW><ROW><id>19386473</id><snippet>In[15]: timeit idx = x[:-1] == x[1:]
1000 loops, best of 3: 1 ms per loop
</snippet></ROW><ROW><id>19386512</id><snippet>mod_evasive</snippet></ROW><ROW><id>19386512</id><snippet>/etc/apache2/mods-available/mod-evasive.conf</snippet></ROW><ROW><id>19386590</id><snippet>from django.conf import settings

...

class Pages(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL) # or models.OneToOneField(...)
</snippet></ROW><ROW><id>19386756</id><snippet>def find(x):
    srch=str(x)
    x=urllib2.urlopen("http://dictionary.reference.com/browse/"+srch+"?s=t")
    x=x.read()
    items=re.findall('&lt;meta name="description" content="'+".*$",x,re.MULTILINE)
    for x in items:
        y=x.replace('&lt;meta name="description" content="','')
        z=y.replace(' See more."/&gt;','')
        m=re.findall('at Dictionary.com, a free online dictionary with pronunciation,              synonyms and translation. Look it up now! "/&gt;',z)
        if m==[]:
            if z.startswith("Get your reference question answered by Ask.com"):
                print "Word not found! :("
            else:
                print z
    else:
            print "Word not found! :("
x=raw_input("Enter word to find: ")
find(x)
</snippet></ROW><ROW><id>19386888</id><snippet>lambda</snippet></ROW><ROW><id>19386888</id><snippet>(lambda random_list: [
    (x, y, not random_list.index(y)) 
    for x in some_list
    for y in random_list])(
        random_list=random.sample([1, 2, 3, 4, 5], random.choice([1, 2, 3])))
</snippet></ROW><ROW><id>19386888</id><snippet>def iter_with_list(l):
    for element in l:
        yield (l, element)
</snippet></ROW><ROW><id>19386888</id><snippet>[(x, y, not random_list.index(y))
 for x in some_list
 for random_list, y in iter_with_list(random.sample([1,2,3,4,5], random.choice([1, 2, 3])))]
</snippet></ROW><ROW><id>19387024</id><snippet>b</snippet></ROW><ROW><id>19387024</id><snippet>b=str(reverse(b))
</snippet></ROW><ROW><id>19387024</id><snippet>reverse</snippet></ROW><ROW><id>19387024</id><snippet>reversed</snippet></ROW><ROW><id>19387024</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; reversed(a)
&lt;listreverseiterator object at 0x015AC6B0&gt;
&gt;&gt;&gt; list(reversed(a))
[3, 2, 1]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19387035</id><snippet>with open('retweet.csv', 'rb') as inputfile:
    read=csv.reader(inputfile, delimiter=',')
    for row in read:
        text = row[0]
        text = re.sub(r'@\s\w+', ' ', text)
        text = re.sub(another_expression, another_replacement, text)
        # etc.
        f.write(text + '\n')
</snippet></ROW><ROW><id>19387035</id><snippet>csv.reader(..., delimiter='\n')</snippet></ROW><ROW><id>19387035</id><snippet>with open('output.csv', 'rb') as inputfile2:
    for line in inputfile2:
</snippet></ROW><ROW><id>19387262</id><snippet>raw_input()</snippet></ROW><ROW><id>19387262</id><snippet>x</snippet></ROW><ROW><id>19387262</id><snippet>y</snippet></ROW><ROW><id>19387262</id><snippet>y</snippet></ROW><ROW><id>19387262</id><snippet>y = int(y)
if y &gt;= 50 and y &lt;= 100:
</snippet></ROW><ROW><id>19387262</id><snippet>int()</snippet></ROW><ROW><id>19387262</id><snippet>if 50 &lt;= int(y) &lt;= 100:
</snippet></ROW><ROW><id>19387327</id><snippet>import locale
loc = locale.getlocale() # get current locale
locale.getdefaultlocale() # Tries to determine the default locale settings and returns them as a tuple of the form (language code, encoding); e.g, ('en_US', 'UTF-8').
</snippet></ROW><ROW><id>19387426</id><snippet>x = np.arange(256).reshape(-1, 1)
y = np.arange(256)
rng_paraboloid = (x*x + y*y) % 256

import matplotlib.pyplot as plt
plt.imshow(rng_paraboloid, interpolation='nearest')
</snippet></ROW><ROW><id>19387426</id><snippet>x</snippet></ROW><ROW><id>19387426</id><snippet>y</snippet></ROW><ROW><id>19387426</id><snippet>(256, 1)</snippet></ROW><ROW><id>19387426</id><snippet>(256)</snippet></ROW><ROW><id>19387426</id><snippet>(256, 256)</snippet></ROW><ROW><id>19387576</id><snippet>class Foo:
    @spam
    def bar(self): pass
</snippet></ROW><ROW><id>19387576</id><snippet>spam(bar)</snippet></ROW><ROW><id>19387576</id><snippet>Foo</snippet></ROW><ROW><id>19387576</id><snippet>spam()</snippet></ROW><ROW><id>19387576</id><snippet>@spam
class Foo:
    def bar(self): pass
</snippet></ROW><ROW><id>19387576</id><snippet>spam()</snippet></ROW><ROW><id>19387576</id><snippet>Foo</snippet></ROW><ROW><id>19387576</id><snippet>def marker(func):
    func._marked = True
    return func
</snippet></ROW><ROW><id>19387576</id><snippet>@spam
class Foo:
    @marker
    def bar(self): pass

    def baz(self): pass
</snippet></ROW><ROW><id>19387814</id><snippet>p1</snippet></ROW><ROW><id>19387814</id><snippet>p2</snippet></ROW><ROW><id>19387814</id><snippet>p3</snippet></ROW><ROW><id>19387814</id><snippet>output = check_output(cmd1)
p2 = Popen(cmd2, stdin=PIPE)
p2.communicate(output)
p3 = Popen(cmd3, stdin=PIPE)
p3.communicate(output)
</snippet></ROW><ROW><id>19387814</id><snippet>p2</snippet></ROW><ROW><id>19387814</id><snippet>p3</snippet></ROW><ROW><id>19387814</id><snippet>p2</snippet></ROW><ROW><id>19387814</id><snippet>p3</snippet></ROW><ROW><id>19387814</id><snippet>p1</snippet></ROW><ROW><id>19387814</id><snippet>p1.stdout.read()</snippet></ROW><ROW><id>19387814</id><snippet>Queue</snippet></ROW><ROW><id>19387814</id><snippet>communicate</snippet></ROW><ROW><id>19387989</id><snippet>astype</snippet></ROW><ROW><id>19387989</id><snippet>&gt;&gt;&gt; a = np.random.rand(5).astype(np.object)
&gt;&gt;&gt; a
array([0.5137250555772075, 0.4279757819721647, 0.4177118178603122,
       0.6270676923544128, 0.43733218329094947], dtype=object)

&gt;&gt;&gt; np.around(a,3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/numpy/core/fromnumeric.py", line 2384, in around
    return round(decimals, out)
AttributeError: rint

&gt;&gt;&gt; np.around(a.astype(np.double),3)
array([ 0.514,  0.428,  0.418,  0.627,  0.437])
</snippet></ROW><ROW><id>19388070</id><snippet>q.join()</snippet></ROW><ROW><id>19388070</id><snippet>print("done")</snippet></ROW><ROW><id>19388070</id><snippet>q.join()</snippet></ROW><ROW><id>19388070</id><snippet>....
q.join()
print('done')
</snippet></ROW><ROW><id>19388070</id><snippet>&lt;thread_object&gt;.daemon = True</snippet></ROW><ROW><id>19388070</id><snippet>for i in range(max_threads):
    t = threading.Thread(target=worker)
    t.daemon = True # &lt;---
    t.start()
</snippet></ROW><ROW><id>19388070</id><snippet>threading</snippet></ROW><ROW><id>19388226</id><snippet>f</snippet></ROW><ROW><id>19388226</id><snippet>AA</snippet></ROW><ROW><id>19388226</id><snippet>C.mean() + C.std()</snippet></ROW><ROW><id>19388226</id><snippet>C.mean() + D.mean()</snippet></ROW><ROW><id>19388226</id><snippet>AA</snippet></ROW><ROW><id>19388226</id><snippet>C.mean() + C.std()</snippet></ROW><ROW><id>19388226</id><snippet>In [91]: df = df1.groupby('A').agg({'C': lambda x: x.mean() + x.std(),
                                    'D': lambda x  x.std()})

In [92]: df
Out[92]: 
            C         D
A                      
bar  1.255506  0.588981
foo  1.775945  0.442724
</snippet></ROW><ROW><id>19388226</id><snippet>C.mean() + D.mean()</snippet></ROW><ROW><id>19388226</id><snippet>.agg</snippet></ROW><ROW><id>19388226</id><snippet>In [108]: g = df1.groupby('A')

In [109]: df = pd.DataFrame({"AA": g.mean()['C'] + g.mean()['D'], "BB": g.std()['D']})

In [110]: df
Out[110]: 
           AA        BB
A                      
bar  0.532263  0.721351
foo  0.427608  0.494980
</snippet></ROW><ROW><id>19388283</id><snippet>ares = (a.transpose(0,1,3,2) * v).transpose(0,1,3,2)
</snippet></ROW><ROW><id>19388500</id><snippet>import project.helpers

project.helpers.somefunction()
</snippet></ROW><ROW><id>19388551</id><snippet>close</snippet></ROW><ROW><id>19388551</id><snippet>StringIO</snippet></ROW><ROW><id>19388551</id><snippet>class CustomStringIO(StringIO):
    def close(self):
        import pdb; pdb.set_trace()
        super(CustomStringIO, self).close()
</snippet></ROW><ROW><id>19388551</id><snippet>-&gt; response = self.client.post("/test/", {'data': data, 'filename': 'out.jpg'})
  ...\venv\lib\site-packages\django\test\client.py(463)post()
-&gt; response = super(Client, self).post(path, data=data, content_type=content_type, **extra)
  ...\venv\lib\site-packages\django\test\client.py(297)post()
-&gt; return self.request(**r)
  ...\venv\lib\site-packages\django\test\client.py(406)request()
-&gt; response = self.handler(environ)
  ...\venv\lib\site-packages\django\test\client.py(119)__call__()
-&gt; response.close()                    # will fire request_finished
  ...\venv\lib\site-packages\django\http\response.py(233)close()
-&gt; closable.close()
&gt; \testapp\views.py(11)close()
-&gt; super(CustomStringIO, self).close()
</snippet></ROW><ROW><id>19388551</id><snippet>FileWrapper</snippet></ROW><ROW><id>19388551</id><snippet>StringIO</snippet></ROW><ROW><id>19388551</id><snippet>response.content</snippet></ROW><ROW><id>19388551</id><snippet>FileWrapper</snippet></ROW><ROW><id>19388551</id><snippet>HttpResponse</snippet></ROW><ROW><id>19388551</id><snippet>base64.decodestring</snippet></ROW><ROW><id>19388551</id><snippet>data</snippet></ROW><ROW><id>19388551</id><snippet>HttpResponse</snippet></ROW><ROW><id>19388551</id><snippet>StringIO</snippet></ROW><ROW><id>19388551</id><snippet>FileWrapper</snippet></ROW><ROW><id>19388574</id><snippet>./configure --enable-unicode=ucs4
</snippet></ROW><ROW><id>19388574</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>19388574</id><snippet>import sys
if sys.maxunicode = 0x10FFFF:
    print 'Python built with UCS4 (wide unicode) support'
else:
    print 'Python built with UCS2 (narrow unicode) support'
</snippet></ROW><ROW><id>19388574</id><snippet>$ python2.6
Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxunicode
1114111
&gt;&gt;&gt; [x for x in u'\U0002f920\U0002f921']
[u'\U0002f920', u'\U0002f921']
</snippet></ROW><ROW><id>19388615</id><snippet>.close()</snippet></ROW><ROW><id>19388615</id><snippet>class ClosingIterator(object):
    def __init__(self, iterable, on_close):
        iterator = iter(iterable)
        self.close = on_close
    def __iter__(self):
        return self
    def __next__(self):
        return self._next()

def application(env, start_response):
    start_response(...)

    q = Queue()
    ev_handle = register_event_handler(lambda event, arg: q.put((event, arg)))

    return ClosingIterator(
        iter(lambda: render(q.get()), None),
        on_close=ev_handle.unregister
    )
</snippet></ROW><ROW><id>19388721</id><snippet>A = [1, 2, 3]
B = [1, 2, 3]
remove(A, B)
</snippet></ROW><ROW><id>19388721</id><snippet>IndexError</snippet></ROW><ROW><id>19388721</id><snippet>.pop()</snippet></ROW><ROW><id>19388721</id><snippet>def remove(A, B):
    A[:] = [avalue for avalue in A if avalue not in B]
</snippet></ROW><ROW><id>19388721</id><snippet>len(A) * len(B)</snippet></ROW><ROW><id>19388845</id><snippet>def coinFlipGame(timesToFlip):
    coinHeads = 0
    coinTails = 0
    accumulator = 0
    while accumulator &lt; timeToFlip:
        coinFlip = random.randint(0,1)
        if coinFlip == 1:
            accumulator += 1
            coinHeads += 1
            print accumulator, "coin flip performed. Heads."
        else:
            accumulator += 1
            coinTails += 1
            print accumulator, "coin flip performed. Tails."
    print "Flips:", accumulator, "| Heads:", coinHeads, "| Tails:", coinTails


timesToFlip = int(input("Enter the number of times to flip the coin: "))
while timesToFlip:
    coinFlipGame(timesToFlip)
    timesToFlip = int(input("Enter the number of times to flip the coin: "))
</snippet></ROW><ROW><id>19388845</id><snippet>int()</snippet></ROW><ROW><id>19388957</id><snippet>image_fullsize.save(filepath+name_fullsize, quality=95)
</snippet></ROW><ROW><id>19389105</id><snippet>vars()</snippet></ROW><ROW><id>19389105</id><snippet>csv</snippet></ROW><ROW><id>19389105</id><snippet>import csv

class Cube(object):
    def __init__(self, X, Y, Z):
        self.X = X
        self.Y = Y
        self.Z = Z

def filetest():
    filename = 'CubeDB.txt'
    cubes = {}
    with open(filename, 'r') as csvfile:
        for row in csv.reader(csvfile):
            cubes[row[0]] = Cube(*row[1:])
    return cubes

cubes = filetest()
print cubes['MyCube'].X
</snippet></ROW><ROW><id>19389244</id><snippet>b''.join(convdata.split()).decode('hex')</snippet></ROW><ROW><id>19389244</id><snippet>bytes</snippet></ROW><ROW><id>19389373</id><snippet>if x in (1, 2, 3, 4):
</snippet></ROW><ROW><id>19389497</id><snippet>from django import forms

class FoobarForm():
    class Meta:
        model = Foobar

    def __init__(self, *args, **kwargs):
        super(FoobarForm, self).__init__(*args, **kwargs)
        self.fields['foobar'].widget = forms.TextInput()
</snippet></ROW><ROW><id>19389526</id><snippet>min</snippet></ROW><ROW><id>19389526</id><snippet>def nearest(pixel_color, mem={}):
    if pixel_color in mem:
        return mem[pixel_color]
    n = min(floss_palette, key=lambda fc:delta_e_cie2000(pixel_color, fc))
    mem[pixel_color] = n
    return mem[pixel_color]

result = [nearest(pixel_color) for pixel_color in image]
</snippet></ROW><ROW><id>19389794</id><snippet>run</snippet></ROW><ROW><id>19389794</id><snippet>view</snippet></ROW><ROW><id>19389794</id><snippet>args</snippet></ROW><ROW><id>19389794</id><snippet>Edit</snippet></ROW><ROW><id>19389794</id><snippet>import sublime, sublime_plugin

class RotCommand(sublime_plugin.TextCommand):
    def run(self, *args):
        for arg in args:
            print type(arg)

#later, in the console:
&gt;&gt;&gt; view.run_command('rot')
&lt;class 'sublime.Edit'&gt;
</snippet></ROW><ROW><id>19389794</id><snippet>view</snippet></ROW><ROW><id>19389794</id><snippet>self</snippet></ROW><ROW><id>19389794</id><snippet>edit</snippet></ROW><ROW><id>19389794</id><snippet>view.replace</snippet></ROW><ROW><id>19389794</id><snippet>class RotCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        for region in self.view.sel():
            if not region.empty():
                # Get the selected text
                s = self.view.substr(region)
                # Transform it via rot13
                s = s.encode('rot13')
                # Replace the selection with transformed text
                self.view.replace(edit, region, s)
</snippet></ROW><ROW><id>19389794</id><snippet>view.run_command('rot')</snippet></ROW><ROW><id>19389794</id><snippet>hello I am some sample text</snippet></ROW><ROW><id>19389794</id><snippet>uryyb V nz fbzr fnzcyr grkg</snippet></ROW><ROW><id>19389954</id><snippet>1</snippet></ROW><ROW><id>19389954</id><snippet>0</snippet></ROW><ROW><id>19389954</id><snippet>any</snippet></ROW><ROW><id>19389954</id><snippet>all</snippet></ROW><ROW><id>19389954</id><snippet>True</snippet></ROW><ROW><id>19389954</id><snippet>False</snippet></ROW><ROW><id>19389954</id><snippet>True</snippet></ROW><ROW><id>19389954</id><snippet>[len(set(x)) == 1 for x in zip(*d['Drd2'])]
</snippet></ROW><ROW><id>19389954</id><snippet>any(x) and not all(x)</snippet></ROW><ROW><id>19390047</id><snippet>q = '''
    UPDATE stud SET
        fname = ?,
        mname = ?,
        lname = ?,
        course = ?,
        yns = ?,
        radio = ?,
        sy = ?
     WHERE
        Studnum = ?'''

cur.execute(q, (fname,mname,lname,course,yns,status,sy,studnum))
</snippet></ROW><ROW><id>19390047</id><snippet>%s</snippet></ROW><ROW><id>19390047</id><snippet>?</snippet></ROW><ROW><id>19390273</id><snippet>def InventoryDataAdd(request, forestinventoryplot_id=1):
        if request.method == 'POST':
            form = InventoryDataForm(request.POST) 
            if form.is_valid(): 
                new_data = form.save()
                return HttpResponseRedirect(reverse('geoapp:plot_detail', kwargs={'pk':new_data.forestinventoryplot_id}))
        else: 
            initial_data = {'forestinventoryplot' : forestinventoryplot_id}
            form = InventoryDataForm(initial=initial_data)
        return render(request, 'geoapp/forestinventorydata_add.html', {'form': form})
</snippet></ROW><ROW><id>19390477</id><snippet># map applies str to the outputted list
order_type = map(str,form.cleaned_data['order_type'])
if len(order_type) &gt; 1:
    delineated = ', a '.join(order_type[0:-1])
    # You are free to include or omit the oxford comma
    # ... unless you feel otherwise.
    order_type = 'a {0}, and a {1}'.format(delineated,order_type[-1])
else:
    order_type = 'a {0}'.format(order_type[0])
</snippet></ROW></DATA>