<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>5325110</id><snippet>__builtin__</snippet></ROW><ROW><id>5325110</id><snippet>import sys
print(dir(sys.modules["__builtin__"]))
</snippet></ROW><ROW><id>5325110</id><snippet>print(dir(__builtins__))
</snippet></ROW><ROW><id>5325923</id><snippet>export PYTHONPATH=/home/osqa/EC2/backup/src/
</snippet></ROW><ROW><id>5325923</id><snippet>export</snippet></ROW><ROW><id>5326139</id><snippet>"%.2f"</snippet></ROW><ROW><id>5326139</id><snippet>myList = [0.30000000000000004, 0.5, 0.20000000000000001]
myFormattedList = [ '%.2f' % elem for elem in myList ]
</snippet></ROW><ROW><id>5326139</id><snippet>['0.30', '0.50', '0.20']
</snippet></ROW><ROW><id>5326139</id><snippet>list</snippet></ROW><ROW><id>5326139</id><snippet>myList</snippet></ROW><ROW><id>5326139</id><snippet>[0.30, 0.5, 0.20]</snippet></ROW><ROW><id>5326139</id><snippet>myRoundedList = [ round(elem, 2) for elem in myList ]
</snippet></ROW><ROW><id>5326139</id><snippet>[0.29999999999999999, 0.5, 0.20000000000000001]
</snippet></ROW><ROW><id>5326621</id><snippet>inspect.currentframe()</snippet></ROW><ROW><id>5326621</id><snippet>import inspect

def hello(name='World'):
    f = inspect.currentframe().f_back
    mod = f.f_code.co_filename
    lineno = f.f_lineno
    print('Hi, %s. You called this from %s at line # %d.' %
          (name, mod, lineno))
</snippet></ROW><ROW><id>5326815</id><snippet>if isinstance(arg, dict)</snippet></ROW><ROW><id>5327004</id><snippet>[logger_qpid]
level=NOTSET
handlers=nullHandler
qualname=qpid
propagate=0
</snippet></ROW><ROW><id>5327809</id><snippet>class LogLock(object):
    def __init__(self, name):
        self.name = str(name)
        self.lock = Lock()

    def acquire(self, blocking=True):
        log.debug("{0:x} Trying to acquire {1} lock".format(
            id(self), self.name))
        ret = self.lock.acquire(blocking)
        if ret == True:
            log.debug("{0:x} Acquired {1} lock".format(
                id(self), self.name))
        else:
            log.debug("{0:x} Non-blocking aquire of {1} lock failed".format(
                id(self), self.name))
        return ret

    def release(self):
        log.debug("{0:x} Releasing {1} lock".format(id(self), self.name))
        self.lock.release()

    def __enter__(self):
        self.acquire()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release()
        return False    # Do not swallow exceptions
</snippet></ROW><ROW><id>5327812</id><snippet>/proc/</snippet></ROW><ROW><id>5327812</id><snippet>/status</snippet></ROW><ROW><id>5327812</id><snippet>Uid:</snippet></ROW><ROW><id>5327812</id><snippet>pwd.getpwuid(pid).pw_name</snippet></ROW><ROW><id>5327812</id><snippet>UID   = 1
EUID  = 2

def owner(pid):
    '''Return username of UID of process pid'''
    for ln in open('/proc/%d/status' % pid):
        if ln.startswith('Uid:'):
            uid = int(ln.split()[UID])
            return pwd.getpwuid(uid).pw_name
</snippet></ROW><ROW><id>5327812</id><snippet>fs/proc/array.c</snippet></ROW><ROW><id>5328139</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>5328139</id><snippet>import sys

def f():
    a = 1
    b = 2
    1/0

try:
    f()
except:
    exc_type, exc_value, tb = sys.exc_info()
    if tb is not None:
        prev = tb
        curr = tb.tb_next
        while curr is not None:
            prev = curr
            curr = curr.tb_next
        print prev.tb_frame.f_locals
</snippet></ROW><ROW><id>5328338</id><snippet>.emacs</snippet></ROW><ROW><id>5328338</id><snippet>(delq (assoc "jython" interpreter-mode-alist) interpreter-mode-alist)
</snippet></ROW><ROW><id>5328338</id><snippet>(setq interpreter-mode-alist nil)
</snippet></ROW><ROW><id>5328669</id><snippet>import matplotlib.pyplot as plt
import numpy as np

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
hist, bins = np.histogram(x, bins=50)
width = 0.7 * (bins[1] - bins[0])
center = (bins[:-1] + bins[1:]) / 2
plt.bar(center, hist, align='center', width=width)
plt.show()
</snippet></ROW><ROW><id>5328722</id><snippet>Account.objects.raw()</snippet></ROW><ROW><id>5328770</id><snippet>from reportlab.lib import utils

def get_image(path, width=1*cm):
    img = utils.ImageReader(path)
    iw, ih = img.getSize()
    aspect = ih / float(iw)
    return Image(path, width=width, height=(width * aspect))

story = []
story.append(get_image('stack.png', width=4*cm))
story.append(get_image('stack.png', width=8*cm))
frame.addFromList(story, c)
</snippet></ROW><ROW><id>5329074</id><snippet>import csv
from collections import defaultdict

# a dictionary whose value defaults to a list.
data = defaultdict(list)
# open the csv file and iterate over its rows. the enumerate()
# function gives us an incrementing row number
for i, row in enumerate(csv.reader(open('data.csv', 'rb'))):
    # skip the header line and any empty rows
    # we take advantage of the first row being indexed at 0
    # i=0 which evaluates as false, as does an empty row
    if not i or not row:
        continue
    # unpack the columns into local variables
    _, zipcode, level = row
    # for each zipcode, add the level the list
    data[zipcode].append(float(level))

# loop over each zipcode and its list of levels and calculate the average
for zipcode, levels in data.iteritems():
    print zipcode, sum(levels) / float(len(levels))
</snippet></ROW><ROW><id>5329074</id><snippet>19102 21.4
19003 29.415
19083 29.65
</snippet></ROW><ROW><id>5329532</id><snippet>i[1]</snippet></ROW><ROW><id>5329532</id><snippet>int</snippet></ROW><ROW><id>5329532</id><snippet>int(int)</snippet></ROW><ROW><id>5329651</id><snippet>setup.py</snippet></ROW><ROW><id>5329659</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>5329659</id><snippet>src</snippet></ROW><ROW><id>5329659</id><snippet>{% for badge in user.user_badges %}
  &lt;img src="/skill/get_picture/{{ badge.skill.key }}"&gt;                            
{% endfor %}
</snippet></ROW><ROW><id>5329659</id><snippet>from google.appengine.ext import db
from models import Skill

requested_skill = db.get(id) # id comes from the :id param in the URL
return HttpResponse(requested_skill.picture, mimetype="image/png")
</snippet></ROW><ROW><id>5329681</id><snippet>&gt; print u'abcdé'.encode('utf-8')
&gt; abcdÃ©

&gt; print u'abcdé'.encode('utf-8').decode('utf-8')
&gt; abcdé
</snippet></ROW><ROW><id>5330113</id><snippet>data.real</snippet></ROW><ROW><id>5330113</id><snippet>data.imag</snippet></ROW><ROW><id>5330298</id><snippet>if count[0] == '0':
    removed = ' ==&gt; %s removed' % (fc)
else:
    removed = ''
print '%s records in %s%s' % ('{0:&gt;9}'.format(count), fc, removed)
</snippet></ROW><ROW><id>5330440</id><snippet>reshape</snippet></ROW><ROW><id>5330440</id><snippet>&gt;&gt;&gt; x_max = 12
&gt;&gt;&gt; y_max = 4
&gt;&gt;&gt; vec1d = np.arange(x_max*y_max, dtype=complex)
&gt;&gt;&gt; vec1d.reshape([x_max, y_max])
array([[  0.+0.j,   1.+0.j,   2.+0.j,   3.+0.j],
       [  4.+0.j,   5.+0.j,   6.+0.j,   7.+0.j],
       [  8.+0.j,   9.+0.j,  10.+0.j,  11.+0.j],
       [ 12.+0.j,  13.+0.j,  14.+0.j,  15.+0.j],
       [ 16.+0.j,  17.+0.j,  18.+0.j,  19.+0.j],
       [ 20.+0.j,  21.+0.j,  22.+0.j,  23.+0.j],
       [ 24.+0.j,  25.+0.j,  26.+0.j,  27.+0.j],
       [ 28.+0.j,  29.+0.j,  30.+0.j,  31.+0.j],
       [ 32.+0.j,  33.+0.j,  34.+0.j,  35.+0.j],
       [ 36.+0.j,  37.+0.j,  38.+0.j,  39.+0.j],
       [ 40.+0.j,  41.+0.j,  42.+0.j,  43.+0.j],
       [ 44.+0.j,  45.+0.j,  46.+0.j,  47.+0.j]])
</snippet></ROW><ROW><id>5330454</id><snippet>int list[3]={1,2,3};
int i,j,k;

for(i=0;i &lt; SIZE;i++)
for(j=0;j &lt; SIZE;j++)
for(k=0;k &lt; SIZE;k++)
if(i!=j &amp;&amp; j!=k &amp;&amp; i!=k)
printf("%d%d%d\n",list[i],list[j],list[k]);
</snippet></ROW><ROW><id>5330494</id><snippet>&gt;&gt;&gt; foobar._vel = -1
</snippet></ROW><ROW><id>5330568</id><snippet>dset.attrs["Name"] = "My Dataset"
</snippet></ROW><ROW><id>5330680</id><snippet>pop</snippet></ROW><ROW><id>5330680</id><snippet>for key in expected_keys:
    foo.__dict__[key] = d.pop(key)
foo.additional_attributes(**d)
</snippet></ROW><ROW><id>5331032</id><snippet>from django.contrib import admin
from django.utils.safestring import mark_safe
from django.core import urlresolvers

class MyModelAdmin(admin.ModelAdmin):

    readonly_fields = ['user_link']

    def user_link(self, obj):
        change_url = urlresolvers.reverse('admin:auth_user_change', args=(obj.user.id,))
        return mark_safe('&lt;a href="%s"&gt;%s&lt;/a&gt;' % (change_url, obj.user.email))
    user_link.short_description = 'User'
</snippet></ROW><ROW><id>5331504</id><snippet>import urllib2
import BeautifulSoup
import re

Newlines = re.compile(r'[\r\n]\s+')

def getPageText(url):
    # given a url, get page content
    data = urllib2.urlopen(url).read()
    # parse as html structured document
    bs = BeautifulSoup.BeautifulSoup(data, convertEntities=BeautifulSoup.BeautifulSoup.HTML_ENTITIES)
    # kill javascript content
    for s in bs.findAll('script'):
        s.replaceWith('')
    # find body and extract text
    txt = bs.find('body').getText('\n')
    # remove multiple linebreaks and whitespace
    return Newlines.sub('\n', txt)

def main():
    urls = [
        'http://www.stackoverflow.com/questions/5331266/python-easiest-way-to-scrape-text-from-list-of-urls-using-beautifulsoup',
        'http://stackoverflow.com/questions/5330248/how-to-rewrite-a-recursive-function-to-use-a-loop-instead'
    ]
    txt = [getPageText(url) for url in urls]

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5331726</id><snippet>import re


def text2html(text):
    """ Convert a text in a certain format to html.

    Examples:
    &gt;&gt;&gt; text2html('Hello, my name is /bJane/b')
    'Hello, my name is &lt;b&gt;Jane&lt;/b&gt;'
    &gt;&gt;&gt; text2html('/iHello/i, my /uname/u is /b/i/uJane/u/i/b')
    '&lt;i&gt;Hello&lt;/i&gt;, my &lt;u&gt;name&lt;/u&gt; is &lt;b&gt;&lt;i&gt;&lt;u&gt;Jane&lt;/u&gt;&lt;/i&gt;&lt;/b&gt;'

    """

    elem = []

    def to_tag(match_obj):
        match = match_obj.group(0)
        if match in elem:
            elem.pop(elem.index(match))
            return "&lt;/{0}&gt;".format(match[1])
        else:
            elem.append(match)
            return "&lt;{0}&gt;".format(match[1])

    return re.sub(r'/.', to_tag, text)

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>5331961</id><snippet>clist = [("abc", ), ("def", ), ("ghi", )]
cursor.executemany("INSERT INTO myTable(data) values(?)", clist)
</snippet></ROW><ROW><id>5331961</id><snippet>clist = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
</snippet></ROW><ROW><id>5332421</id><snippet>\120101215\220101216
</snippet></ROW><ROW><id>5332421</id><snippet>r'\g&lt;1&gt;'+rndStr+r'\g&lt;2&gt;'+rndStr2 
</snippet></ROW><ROW><id>5332421</id><snippet>re.sub("(.+)[0-9]{8}(.+)[0-9]{8}",...
</snippet></ROW><ROW><id>5332421</id><snippet>str</snippet></ROW><ROW><id>5332421</id><snippet>str.replace()</snippet></ROW><ROW><id>5332421</id><snippet>import re
rndStr = "20101215"
rndStr2 = "20101216"
s = "Looking at dates between 20110316 and 20110317"
outstr = re.sub("(.+)[0-9]{8}(.+)[0-9]{8}", r'\g&lt;1&gt;'+rndStr+r'\g&lt;2&gt;'+rndStr2, s) 
print outstr
</snippet></ROW><ROW><id>5332421</id><snippet>Looking at dates between 20101215 and 20101216
</snippet></ROW><ROW><id>5332449</id><snippet>string-join( (concat('&lt;td&gt;',$firsElement),..(elements)..,concat($lastElement,'&lt;/td&gt;') ) ,'&lt;/td&gt;&lt;td&gt;')
</snippet></ROW><ROW><id>5332449</id><snippet>&lt;td&gt;$firstElement&lt;/td&gt;&lt;td&gt;$secEl&lt;/td&gt;&lt;td&gt;..(n-cells)..&lt;/td&gt;&lt;td&gt;$lastElement&lt;/td&gt;
</snippet></ROW><ROW><id>5332449</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>5332449</id><snippet>&lt; &gt;</snippet></ROW><ROW><id>5332449</id><snippet>xmlns:fn="http://www.w3.org/2005/02/xpath-functions"
</snippet></ROW><ROW><id>5332469</id><snippet>expression=str("^"+f+sys.argv[1])
expression=expression.replace("1","l"+f)
expression=expression.replace("2","n"+f)
(...)
</snippet></ROW><ROW><id>5332469</id><snippet>expression=str("^"+f+sys.argv[1])\
   .replace("1","l"+f)\
   .replace("2","n"+f)
   (...)
</snippet></ROW><ROW><id>5332469</id><snippet>\</snippet></ROW><ROW><id>5332469</id><snippet>import re

regexp = re.compile(expression)
with open('words.txt', 'r') as f:

    for word in f.read().split(' \t\n'):
        if regexp.match(word):
            print word
</snippet></ROW><ROW><id>5332716</id><snippet>s = s[:5] + '-' + s[5:]
</snippet></ROW><ROW><id>5332716</id><snippet>i = s.index('-') + 2
s = s[:i] + '-' + s[i:]
</snippet></ROW><ROW><id>5332716</id><snippet>import re
i = re.search('\d', s).start()
s = s[:i] + '-' + s[i:]
</snippet></ROW><ROW><id>5332716</id><snippet>i = re.search('(?&lt;=\d\d)', s).start()
s = s[:i] + '-' + s[i:]
</snippet></ROW><ROW><id>5332716</id><snippet>s = re.sub('(?&lt;=\d\d)', '-', s, 1)
</snippet></ROW><ROW><id>5332716</id><snippet>s = re.sub('(\d\d)', r'\1-', s, 1)
</snippet></ROW><ROW><id>5332878</id><snippet>void initBlarg() {
    Py_InitModule("_Blarg", Blargmethods);
}
</snippet></ROW><ROW><id>5332878</id><snippet>gcc -I/usr/include/python2.6 -fPIC -c blargUtils.c -Wall    
gcc -shared blargUtils.o -Wl,-soname -Wl,_Blarg.so -o _Blarg.so
</snippet></ROW><ROW><id>5332878</id><snippet>import sys
sys.path.append('/path/to/your/library')

import _Blarg

def blargFunc1(*args):
    """Wrap blargFunc1"""
    return _Blarg.blargFunc1(*args)
</snippet></ROW><ROW><id>5332878</id><snippet>import Blarg
Blarg.blargFunc1(1, 2, 3)
</snippet></ROW><ROW><id>5333091</id><snippet>fab command -i /path/to/key.pem [-H [user@]host[:port]]
</snippet></ROW><ROW><id>5333213</id><snippet>enumerate</snippet></ROW><ROW><id>5333213</id><snippet>static PyObject *
enum_next(enumobject *en)
{
    PyObject *next_index;
    PyObject *next_item;
    PyObject *result = en-&gt;en_result;
    PyObject *it = en-&gt;en_sit;

    next_item = (*it-&gt;ob_type-&gt;tp_iternext)(it);
    if (next_item == NULL)
        return NULL;

    next_index = PyInt_FromLong(en-&gt;en_index);
    if (next_index == NULL) {
        Py_DECREF(next_item);
        return NULL;
    }
    en-&gt;en_index++; 

    if (result-&gt;ob_refcnt == 1) {
        Py_INCREF(result);
        Py_DECREF(PyTuple_GET_ITEM(result, 0));
        Py_DECREF(PyTuple_GET_ITEM(result, 1));
    } else {
        result = PyTuple_New(2);
        if (result == NULL) {
            Py_DECREF(next_index);
            Py_DECREF(next_item);
            return NULL;
        }
    }
    PyTuple_SET_ITEM(result, 0, next_index);
    PyTuple_SET_ITEM(result, 1, next_item);
    return result;
}
</snippet></ROW><ROW><id>5333213</id><snippet>next</snippet></ROW><ROW><id>5333213</id><snippet>en</snippet></ROW><ROW><id>5333261</id><snippet>import Image

image = Image.open('File.jpg')
image.show()
</snippet></ROW><ROW><id>5333314</id><snippet>(?&lt;=([\.!?])|(?&lt;=([\.!?][\'\"])))
</snippet></ROW><ROW><id>5333314</id><snippet>(?&lt;!A|B|C)</snippet></ROW><ROW><id>5333314</id><snippet>(?&lt;!A)(?&lt;!B)(?&lt;!C)</snippet></ROW><ROW><id>5333314</id><snippet>(?&lt;=A|B|C)</snippet></ROW><ROW><id>5333314</id><snippet>(?:(?&lt;=A)|(?&lt;=B)|(?&lt;=C))</snippet></ROW><ROW><id>5333343</id><snippet>def optimize(myList):
    score_tup = lambda tup_a, tup_b: sum(1.0 if a &gt; b else 0.5 if a == b else 0 for a, b in zip(tup_a, tup_b))
    scores = ((tup_a, [score_tup(tup_a, tup_b) for tup_b in myList]) for tup_a in myList)
    scores = ((tup, score.count(2), score.count(1.5)) for tup, score in scores)
    return [tup for tup, win, draw in scores if (win * 1.0 / (len(myList) - win - draw)) &gt; 1.0]

a = 5
myList = [(i, j, a-i-j) for i in range(a + 1) for j in range(a + 1 - i)]
print myList
print optimize(myList)
</snippet></ROW><ROW><id>5333345</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; doc = etree.parse(StringIO("&lt;html&gt;&lt;body&gt;a&lt;something/&gt;b&lt;/body&gt;&lt;/root&gt;"), etree.HTMLParser())
&gt;&gt;&gt; doc.xpath("/html/body/text()")
['a', 'b']
</snippet></ROW><ROW><id>5333345</id><snippet>"".join(...)</snippet></ROW><ROW><id>5333563</id><snippet>reversed_ = sum(1&lt;&lt;(numbits-1-i) for i in range(numbits) if original&gt;&gt;i&amp;1)
</snippet></ROW><ROW><id>5333760</id><snippet>def wrapper(thelist):
    for item in thelist:
        yield(item[0], item[1], item[2], item[3:])

mylist = [(1,2,3,4), (5,6,7,8)]

for a, b, c, d in wrapper(mylist):
    print a, b, c, d
</snippet></ROW><ROW><id>5333760</id><snippet>1 2 3 (4,)
5 6 7 (8,)
</snippet></ROW><ROW><id>5333852</id><snippet>.__dict__</snippet></ROW><ROW><id>5333852</id><snippet>class A():
    def __init__(self):
        self.foo = 100
        self.bar = 200
        self.baz = 300
        self.sub_stack = ['foo', 'baz', 'bar']

    def subt(self, amount):
        tmp_stack = self.sub_stack[:]
        while tmp_stack and amount:
            key = tmp_stack.pop(0)
            val = self.__dict__[key]
            if val &gt; amount:
                self.__dict__[key] -= amount
                amount = 0
            else:
                amount -= self.__dict__[key]
                self.__dict__[key]=0
        return amount 
</snippet></ROW><ROW><id>5333885</id><snippet>{ i: i for i in range(3) }
</snippet></ROW><ROW><id>5333885</id><snippet>dict((i, i) for i in range(3))
</snippet></ROW><ROW><id>5333919</id><snippet>for e in ['cc', 'dd',...]: 
  a.pop(e)
</snippet></ROW><ROW><id>5334315</id><snippet>cursor.execute(
    '''UPDATE im_entry.pr_table 
       SET selected_entry  = im_entry.usr_table.{0}
       FROM im_entry.usr_table 
       WHERE im_entry.pr_table.image_1d = ?'''.format(entryn),[idn])
</snippet></ROW><ROW><id>5334315</id><snippet>cursor.execute(sql,args)</snippet></ROW><ROW><id>5334315</id><snippet>sql</snippet></ROW><ROW><id>5334315</id><snippet>args</snippet></ROW><ROW><id>5334315</id><snippet>sql='''UPDATE im_entry.pr_table 
           SET selected_entry  = ?
           FROM im_entry.usr_table 
           WHERE im_entry.pr_table.image_1d = ?'''
</snippet></ROW><ROW><id>5334315</id><snippet>selected_entry</snippet></ROW><ROW><id>5334686</id><snippet>class IndexedList(list):
    def __init__(self, items, attrs):
        super(IndexedList,self).__init__(items)
        # do indexing
        self._attrs = tuple(attrs)
        self._index = {}
        _add = self._addindex
        for obj in self:
            _add(obj)

    def _addindex(self, obj):
        _idx = self._index
        for attr in self._attrs:
            _idx[getattr(obj, attr)] = obj

    def _delindex(self, obj):
        _idx = self._index
        for attr in self._attrs:
            try:
                del _idx[getattr(obj,attr)]
            except KeyError:
                pass

    def __delitem__(self, ind):
        try:
            obj = list.__getitem__(self, ind)
        except (IndexError, TypeError):
            obj = self._index[ind]
            ind = list.index(self, obj)
        self._delindex(obj)
        return list.__delitem__(self, ind)

    def __delslice__(self, i, j):
        for ind in xrange(i,j):
            self.__delitem__(ind)

    def __getitem__(self, ind):
        try:
            return self._index[ind]
        except KeyError:
            return list.__getitem__(self, ind)

    def __getslice__(self, i, j):            
        return IndexedList(list.__getslice__(self, i, j))

    def __setitem__(self, ind, new_obj):
        try:
            obj = list.__getitem__(self, ind)
        except (IndexError, TypeError):
            obj = self._index[ind]
            ind = list.index(self, obj)
        self._delindex(obj)
        self._addindex(new_obj)
        return list.__setitem__(ind, new_obj)

    def __setslice__(self, i, j, newItems):
        _get = self.__getitem__
        _add = self._addindex
        _del = self._delindex
        newItems = list(newItems)
        # remove indexing of items to remove
        for ind in xrange(i,j):
            _del(_get(ind))
        # add new indexing
        if isinstance(newList, IndexedList):
            self._index.update(newList._index)
        else:
            for obj in newList:
                _add(obj)
        # replace items
        return list.__setslice__(self, i, j, newList)

    def append(self, obj):
        self._addindex(obj)
        return list.append(self, obj)

    def extend(self, newList):
        newList = list(newList)
        if isinstance(newList, IndexedList):
            self._index.update(newList._index)
        else:
            _add = self._addindex
            for obj in newList:
                _add(obj)
        return list.extend(self, newList)

    def insert(self, ind, new_obj):
        # ensure that ind is a numeric index
        try:
            obj = list.__getitem__(self, ind)
        except (IndexError, TypeError):
            obj = self._index[ind]
            ind = list.index(self, obj)
        self._addindex(new_obj)
        return list.insert(self, ind, new_obj)

    def pop(self, ind=-1):
        # ensure that ind is a numeric index
        try:
            obj = list.__getitem__(self, ind)
        except (IndexError, TypeError):
            obj = self._index[ind]
            ind = list.index(self, obj)
        self._delindex(obj)
        return list.pop(self, ind)

    def remove(self, ind_or_obj):
        try:
            obj = self._index[ind_or_obj]
            ind = list.index(self, obj)
        except KeyError:
            ind = list.index(self, ind_or_obj)
            obj = list.__getitem__(self, ind)
        self._delindex(obj)
        return list.remove(self, ind)
</snippet></ROW><ROW><id>5334686</id><snippet>class Child(object):
    def __init__(self, id, name):
        self.id = id
        self.name = name

class Teacher(object):
    def __init__(self, id, name):
        self.id = id
        self.name = name

class Classroom(object):
    def __init__(self, children, teachers):
        self.children = IndexedList(children, ('id','name'))
        self.teachers = IndexedList(teachers, ('id','name'))

classroom = Classroom([Child('389','pete')], [Teacher('829','bob')])

print classroom.children[0].name               # -&gt; pete

classroom.children.append(Child('2344','joe'))
print len(classroom.children)                  # -&gt; 2
print classroom.children[1].name               # -&gt; joe
print classroom.children['joe'].id             # -&gt; 2344
print classroom.children['2344'].name          # -&gt; joe

p = classroom.children.pop('pete')
print p.name                                   # -&gt; pete
print len(classroom.children)                  # -&gt; 1
</snippet></ROW><ROW><id>5335500</id><snippet>CREATE TABLE object(
    id        INTEGER PRIMARY KEY,
    ...
);

CREATE TABLE extra_data(
    objectid  INTEGER,
    date      DATETIME,
    ...
    FOREIGN KEY(objectid) REFERENCES object(id)
);
</snippet></ROW><ROW><id>5335500</id><snippet>DELETE FROM extra_data WHERE date = curdate;
</snippet></ROW><ROW><id>5336127</id><snippet>cursor.execute("INSERT INTO new_table (x, ...) VALUES (%s, ...)", p)
</snippet></ROW><ROW><id>5336473</id><snippet>dateutil.parser</snippet></ROW><ROW><id>5336473</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse("There's a date 09-21 in here", fuzzy=True)
datetime.datetime(2011, 9, 21, 0, 0)
</snippet></ROW><ROW><id>5336473</id><snippet>fuzzy=True</snippet></ROW><ROW><id>5336809</id><snippet>    destination = open(filename.encode("utf-8"), 'wb+')
    try:
        for chunk in f.chunks():
                destination.write(chunk)
        destination.close()
    except os.error:
        yield( "Error in Writing the File ",f.name)
</snippet></ROW><ROW><id>5336878</id><snippet>&lt;!-- filtered_results.html --&gt;
&lt;head&gt;
   ...
   &lt;script type="text/javascript" src="/path/to/jquery-latest.js"&gt;&lt;/script&gt; 
   &lt;script type="text/javascript" src="/path/to/jquery.tablesorter.js"&gt;&lt;/script&gt; 
   &lt;script type="text/javascript"&gt;
       $(document).ready(function() {
           $("#myTable").tablesorter();
       });
   &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;table id="myTable"&gt;
        &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Some-Label&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
        &lt;tbody&gt;
        {% for emp in emp_list.object_list %}
            &lt;tr&gt;&lt;td&gt;&lt;a href="http://10.1.0.90:8080/singleEmployee/{{emp.id}}"&gt;{{emp.userName}}&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
        {% endfor %}
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>5337257</id><snippet>Counter</snippet></ROW><ROW><id>5337257</id><snippet>from collections import Counter

with open("gibrish.txt", 'r') as file:
    chrDict = Counter(f.read())
</snippet></ROW><ROW><id>5337551</id><snippet>B.do_something(a);</snippet></ROW><ROW><id>5337551</id><snippet>B.do_something(boost::ref(a));</snippet></ROW><ROW><id>5337759</id><snippet>sys.path[0]</snippet></ROW><ROW><id>5337759</id><snippet>import sys, os
script_dir = sys.path[0]
img_path = os.path.join(script_dir, '../y/img1.png')
</snippet></ROW><ROW><id>5338260</id><snippet>ctypes</snippet></ROW><ROW><id>5338956</id><snippet>range(100000000/2)</snippet></ROW><ROW><id>5338956</id><snippet>xrange</snippet></ROW><ROW><id>5338956</id><snippet>range</snippet></ROW><ROW><id>5338956</id><snippet>(x)range</snippet></ROW><ROW><id>5338956</id><snippet>N/2</snippet></ROW><ROW><id>5338956</id><snippet>N/2+1</snippet></ROW><ROW><id>5339058</id><snippet>scipy.stats.binom.pmf</snippet></ROW><ROW><id>5339058</id><snippet>import scipy, scipy.stats
x = scipy.linspace(0,10,11)
pmf = scipy.stats.binom.pmf(x,10,0.1)
import pylab
pylab.plot(x,pmf)
</snippet></ROW><ROW><id>5339300</id><snippet>self.bendingForces[ index1, index2 ] = self.matrixPrefactor.data[ index1, index2 ] * membraneHeight.data[ index1, index2 ]
</snippet></ROW><ROW><id>5339300</id><snippet>@cython.boundscheck(False)</snippet></ROW><ROW><id>5339352</id><snippet>"""replaces template place holder with values

:param timestamp: formatted date to display
:param priority: priority number
:param priority_name: priority name
:param message: message to display
:returns: formatted string
"""
</snippet></ROW><ROW><id>5339352</id><snippet>"""replaces template place holder with values

:param timestamp: formatted date to display
:type timestamp: str or unicode
:param priority: priority number
:type priority: str or unicode
:param priority_name: priority name
:type priority_name: str or unicode
:param message: message to display
:type message: str or unicode
:returns: formatted string
:rtype: str or unicode
"""
</snippet></ROW><ROW><id>5339372</id><snippet>connection.commit()</snippet></ROW><ROW><id>5339517</id><snippet>filter</snippet></ROW><ROW><id>5339774</id><snippet>Point</snippet></ROW><ROW><id>5339774</id><snippet>None</snippet></ROW><ROW><id>5339774</id><snippet>poi_s</snippet></ROW><ROW><id>5339774</id><snippet>None, None</snippet></ROW><ROW><id>5339774</id><snippet>Mod()</snippet></ROW><ROW><id>5339774</id><snippet>sk = Mod() # unsaved Mod instance with no defaults
poi_s = Point(sk.co_x, co_y, srid = 900913)
# sk.co_x is None
</snippet></ROW><ROW><id>5339774</id><snippet>PointField</snippet></ROW><ROW><id>5339774</id><snippet>__distance</snippet></ROW><ROW><id>5340364</id><snippet>['self.pdbcode', 'self.raw', 'self.year']</snippet></ROW><ROW><id>5340364</id><snippet>class Antibody():
    ...
    def get_fields(self):
        ret = []
        for nm in dir(self):
           if not nm.startswith('__') and not callable(getattr(self, nm)):
              ret.append('self.' + nm)
        return ret

a = Antibody(0)
print a.get_fields()
</snippet></ROW><ROW><id>5340848</id><snippet>from elixir import *

metadata.bind = 'mssql+pyodbc://username:password/dbname'
metadata.bind.echo = False

class Users(Entity):
    using_options(tablename = 'users')
    username = Field(String(50), unique=True)
    fullname = Field(String(255))
    email = Field(String(255))
    passwordmd5 = Field(String(32))
    def __repr__(self):
        return "&lt;Users ({})({})({})&gt;".format(self.username, self.fullname, self.email)
    def prettyname(self):
        return {'username':'User Name', 'fullname':'Full Name', 'email':'Email Address', 'passwordmd5':'$hidden$'}
</snippet></ROW><ROW><id>5340848</id><snippet>prettyname = Users().prettyname()['username']
</snippet></ROW><ROW><id>5340848</id><snippet>prettyname = queryresult.prettyname()['username']
</snippet></ROW><ROW><id>5340848</id><snippet>class Users(Entity):
    using_options(tablename = 'users')
    username = Field(String(50), unique=True, info={'prettyname':'User Name'})
    fullname = Field(String(255), info={'prettyname':'Full Name'})
    email = Field(String(255), info={'prettyname':'Email Address'})
    passwordmd5 = Field(String(32), info={'hidden':True})
    def __repr__(self):
        return "&lt;Users ({})({})({})&gt;".format(self.username, self.fullname, self.email)
</snippet></ROW><ROW><id>5341311</id><snippet>python -O setup.py install</snippet></ROW><ROW><id>5341658</id><snippet>dreampie /path/to/python2.x
</snippet></ROW><ROW><id>5341806</id><snippet>for cl in mylist:
    # do stuff
</snippet></ROW><ROW><id>5341806</id><snippet>enumerate</snippet></ROW><ROW><id>5341806</id><snippet>for idx, item in enumerate(mylist):
    # idx = index of current item
    # item = current item
</snippet></ROW><ROW><id>5341806</id><snippet>for cl in len(mylist)</snippet></ROW><ROW><id>5341806</id><snippet>for cl in 5</snippet></ROW><ROW><id>5341806</id><snippet>enumerate</snippet></ROW><ROW><id>5341806</id><snippet>for i in range(len(mylist)):
    # mylist[i] is the ith item in the list
</snippet></ROW><ROW><id>5341806</id><snippet>enumerate</snippet></ROW><ROW><id>5341808</id><snippet>file = self.request.get('catalog')
file  = '\n'.join(file.splitlines())
catalog = csv.reader(StringIO.StringIO(file),dialect=csv.excel_tab)
</snippet></ROW><ROW><id>5341808</id><snippet>csv.reader()</snippet></ROW><ROW><id>5341808</id><snippet>file = self.request.get('catalog')
catalog = csv.reader(file.splitlines(),dialect=csv.excel_tab)
</snippet></ROW><ROW><id>5341808</id><snippet>request.get</snippet></ROW><ROW><id>5341808</id><snippet>file = self.request.get('catalog', 'rU')
catalog = csv.reader(StringIO.StringIO(file),dialect=csv.excel_tab)
</snippet></ROW><ROW><id>5341984</id><snippet>root</snippet></ROW><ROW><id>5341984</id><snippet>python setup.py install --home=DIR</snippet></ROW><ROW><id>5341984</id><snippet>DIR</snippet></ROW><ROW><id>5341984</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5341984</id><snippet>~/apps</snippet></ROW><ROW><id>5341984</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5342130</id><snippet>qList = []
try:
  objectA = ...
  qList.append(Q(foo=objectA.bar))
except ...:
  ...
 ...

result = MyOtherMdel.objects.filter(reduce(operator.or_, qList),
  **other_filter_conditions)
</snippet></ROW><ROW><id>5342143</id><snippet>for tag in soup.findAll('a', href = re.compile('^/l[0-9]+/.*$')):
    print tag['href']
</snippet></ROW><ROW><id>5342156</id><snippet>urlparse.urlparse()</snippet></ROW><ROW><id>5342156</id><snippet>urlparse.urlunparse()</snippet></ROW><ROW><id>5342891</id><snippet>def get_movie_recommendations(self, movieID)</snippet></ROW><ROW><id>5343187</id><snippet>call('ping -c 3 %s' % ip, shell=True)
</snippet></ROW><ROW><id>5343187</id><snippet>cmd</snippet></ROW><ROW><id>5343187</id><snippet>commands()</snippet></ROW><ROW><id>5343187</id><snippet>Popen()</snippet></ROW><ROW><id>5343283</id><snippet>def notify(regex):
    def decorate(func):
        func.regex = regex
        return func
    return decorate

class Baz(object):
    @property
    def function_list(self):
        for attr in dir(self):
            obj = getattr(self, attr)
            if callable(obj) and hasattr(obj, "regex"):
                yield obj

class FooBar(Baz):
    @notify(".*")
    def everything(self, message):
        pass

    @notify("(\w+):.*")
    def reply(self, message):
        pass

for foo in FooBar().function_list:
    print("%s =&gt; %s" % (foo.regex, foo))
</snippet></ROW><ROW><id>5343750</id><snippet>import threading
from itertools import repeat
from multiprocessing.pool import ThreadPool   # this is a THREAD POOL! undocumented :)


def execute_me():
    print threading.current_thread().name, 'python is fun'


tp = ThreadPool(processes=4)
print tp.map(lambda x: x(), repeat(execute_me, 4))
</snippet></ROW><ROW><id>5343750</id><snippet>% python mpthreadpool.py 
Thread-1 python is fun
 Thread-2 python is fun
Thread-3 python is fun
Thread-3 python is fun
[None, None, None, None]
</snippet></ROW><ROW><id>5343885</id><snippet>re.split</snippet></ROW><ROW><id>5343885</id><snippet>re.findall(r'(\w+(?=\))|\w)', your_string)
</snippet></ROW><ROW><id>5343885</id><snippet>&gt;&gt;&gt; for s in ("ab(hpl)x", "(pck)(kx)(sd)", "(kx)kxx(kd)", "fghk"):
...     print s, " =&gt; ", re.findall(r'(\w+(?=\))|\w)', s)
... 
ab(hpl)x  =&gt;  ['a', 'b', 'hpl', 'x']
(pck)(kx)(sd)  =&gt;  ['pck', 'kx', 'sd']
(kx)kxx(kd)  =&gt;  ['kx', 'k', 'x', 'x', 'kd']
fghk  =&gt;  ['f', 'g', 'h', 'k']
</snippet></ROW><ROW><id>5343912</id><snippet>itertools.imap</snippet></ROW><ROW><id>5343912</id><snippet>itertools.imap(lambda x: "".join(x), itertools.permutations("0123456789"))
</snippet></ROW><ROW><id>5343912</id><snippet>list()</snippet></ROW><ROW><id>5343912</id><snippet>permutations</snippet></ROW><ROW><id>5343912</id><snippet>("".join(x) for x in itertools.permutations("0123456789"))
</snippet></ROW><ROW><id>5343912</id><snippet>itertools.imap</snippet></ROW><ROW><id>5343952</id><snippet>UserLocale.objects.create(user=user_instance, locale_id=locale)
</snippet></ROW><ROW><id>5344300</id><snippet>from yapsy.PluginManager import PluginManager

def main():   
    # Load the plugins from the plugin directory.
    manager = PluginManager()
    manager.setPluginPlaces(["plugins"])
    manager.collectPlugins()

    # Loop round the plugins and print their names.
    for plugin in manager.getAllPlugins():
        plugin.plugin_object.print_name()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5344300</id><snippet>from yapsy.IPlugin import IPlugin

class PluginOne(IPlugin):
    def print_name(self):
        print "This is plugin 1"
</snippet></ROW><ROW><id>5344300</id><snippet>[Core]
Name = Plugin 1
Module = plugin1

[Documentation]
Author = John Smith
Version = 0.1
Website = http://lotsofplugins.com
Description = My first plugin
</snippet></ROW><ROW><id>5344342</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>5344342</id><snippet>temp.name</snippet></ROW><ROW><id>5344960</id><snippet>import psycopg2
from multiprocessing import Pool


def scanfile(row):
    #do something with row...


if __name__ == '__main__':
    conn = psycopg2.connect(a database)
    query = conn.cursor()
    query.execute(some query)
    pool = Pool()
    pool.map_async(scanfile, query).wait()
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>5345062</id><snippet>Phonon</snippet></ROW><ROW><id>5345062</id><snippet>PyQt</snippet></ROW><ROW><id>5345075</id><snippet>from twisted.internet import reactor
reactor.stop()
</snippet></ROW><ROW><id>5345075</id><snippet>while True</snippet></ROW><ROW><id>5345075</id><snippet>from twisted.internet import reactor
reactor.stop()
return
</snippet></ROW><ROW><id>5345127</id><snippet>from sqlalchemy.engine.url import URL

myDB = URL(drivername='mysql', host='localhost',
    database='my_database_name',
    query={ 'read_default_file' : '/path/to/.my.cnf' }
)
engine = create_engine(name_or_url=myDB)
# use the engine as usual, no password needed in your code file :)
</snippet></ROW><ROW><id>5345535</id><snippet>staticmethod</snippet></ROW><ROW><id>5345535</id><snippet>Cls.static_method</snippet></ROW><ROW><id>5345535</id><snippet>static_method</snippet></ROW><ROW><id>5345535</id><snippet>Cls</snippet></ROW><ROW><id>5345535</id><snippet>staticmethod</snippet></ROW><ROW><id>5345980</id><snippet>pre_save</snippet></ROW><ROW><id>5345980</id><snippet>save()</snippet></ROW><ROW><id>5345980</id><snippet>post_save</snippet></ROW><ROW><id>5345980</id><snippet># this works because the ID does exist
p = Jpiece.objects.get(pk=3) 
p.save()
</snippet></ROW><ROW><id>5345980</id><snippet>save_m2m()</snippet></ROW><ROW><id>5345980</id><snippet>post_save</snippet></ROW><ROW><id>5345980</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5345980</id><snippet># django.forms.models.py
if commit:
    # If we are committing, save the instance and the m2m data immediately.
    instance.save()
    save_m2m()
</snippet></ROW><ROW><id>5346103</id><snippet>random.expovariate()</snippet></ROW><ROW><id>5346103</id><snippet>def exponential(beta):
    return -beta * math.log(1.0 - random.random())
</snippet></ROW><ROW><id>5346103</id><snippet>beta</snippet></ROW><ROW><id>5346103</id><snippet>lambd</snippet></ROW><ROW><id>5346103</id><snippet>random.expovariate()</snippet></ROW><ROW><id>5346103</id><snippet>beta</snippet></ROW><ROW><id>5346214</id><snippet>python</snippet></ROW><ROW><id>5346214</id><snippet>Python 2.6.6 (r266...</snippet></ROW><ROW><id>5346214</id><snippet>import lxml</snippet></ROW><ROW><id>5346214</id><snippet>import lxml.html</snippet></ROW><ROW><id>5346214</id><snippet>blender@desktop:~$ python
Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import lxml
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5346486</id><snippet>connection.request("GET", "/")</snippet></ROW><ROW><id>5346486</id><snippet>connection()</snippet></ROW><ROW><id>5346486</id><snippet>connection = httplib.HTTPSConnection(TWITTER_URL)
connection.request(req.http_method, req.to_url())
response = connection.getresponse().read()
connection.close()
return response
</snippet></ROW><ROW><id>5346703</id><snippet>CustomHandler</snippet></ROW><ROW><id>5346703</id><snippet>__main__.CustomHandler</snippet></ROW><ROW><id>5346703</id><snippet>your_module.CustomHandler</snippet></ROW><ROW><id>5346703</id><snippet>your_module</snippet></ROW><ROW><id>5347031</id><snippet>templist</snippet></ROW><ROW><id>5347031</id><snippet>list</snippet></ROW><ROW><id>5347031</id><snippet>def GetNextHighTemp(self, temp, templist):
    templist = (int(t) for t in templist if t != '')
    templist = [t for t in templist if t &lt; int(temp)]
    if templist: return max(templist)
    else: return None                   # or raise an error
</snippet></ROW><ROW><id>5347031</id><snippet>None</snippet></ROW><ROW><id>5347031</id><snippet>def GetNextHighTemp(self, temp, templist):
    try: return str(max(int(t) for t in templist if t != '' and int(t) &lt; int(temp)))
    except ValueError: return None      # or raise a different error
</snippet></ROW><ROW><id>5347121</id><snippet>l</snippet></ROW><ROW><id>5347121</id><snippet>, 0:2</snippet></ROW><ROW><id>5347126</id><snippet>zeroMatrix = [[0] * Np for i in range(Np)]
</snippet></ROW><ROW><id>5347126</id><snippet>append</snippet></ROW><ROW><id>5347126</id><snippet>zeroMatrix</snippet></ROW><ROW><id>5347126</id><snippet>zeroArray = [0] * Np
zeroMatrix = [zeroArray[:] for i in range(Np)]
</snippet></ROW><ROW><id>5347126</id><snippet>$ python -m timeit -s "Np = 80" "zeroMatrix = [[0] * Np for i in range(Np)]"
1000 loops, best of 3: 200 usec per loop
$ python -m timeit -s "Np = 80" "zeroArray = [0] * Np" "zeroMatrix = [None] * Np" "for i in range(Np):" "    zeroMatrix[i] = zeroArray[:]"
10000 loops, best of 3: 171 usec per loop
$ python -m timeit -s "Np = 80" "zeroArray = [0] * Np" "zeroMatrix = [zeroArray[:] for i in range(Np)]"
10000 loops, best of 3: 165 usec per loop
</snippet></ROW><ROW><id>5347492</id><snippet>import numpy as np
a = np.array([1,3,5])
b = np.array([2,4,6])

c = np.empty((a.size + b.size,), dtype=a.dtype)
c[0::2] = a
c[1::2] = b
</snippet></ROW><ROW><id>5347573</id><snippet>web.ctx['ip']</snippet></ROW><ROW><id>5347654</id><snippet>pageAnchor = ''.join(['HtmlAnchor[&lt;a href="',PageLink,'"&gt;]'])</snippet></ROW><ROW><id>5347654</id><snippet>'HtmlAnchor[&lt;a href="' + PageLink + '"&gt;]'</snippet></ROW><ROW><id>5348300</id><snippet>raw_input</snippet></ROW><ROW><id>5348300</id><snippet>def main():
    """
    main function that brings it all together
    [PURPOSE]
    """
    show_instructions()
    selection = None
    while selection != "q":
        selection = raw_input ('Please select the skill you want to learn: ')
        if selection == "a":
            add()
        elif selection == "s":
            sub()
        elif selection == "m":
            mult()
        elif selection == "d":
            div()
        elif selection == "r":
            rand()
    print "The program will now quit."
</snippet></ROW><ROW><id>5348300</id><snippet>raw_input</snippet></ROW><ROW><id>5348300</id><snippet>selection</snippet></ROW><ROW><id>5348300</id><snippet>raw_input</snippet></ROW><ROW><id>5348300</id><snippet>quit()</snippet></ROW><ROW><id>5348300</id><snippet>main</snippet></ROW><ROW><id>5348469</id><snippet>1、In the pythonengine property tab

‍keep set  “UseLastKnownVersion” to True

‍keep ‍set   "DLLName"  to  python26

2、On your PythonEngine component and adjust your define:

{$DEFINE PYTHON26}

which you can do in the project options of Delphi 7.  
Just add PYTHON26 to the "conditional defines" dialog box  
</snippet></ROW><ROW><id>5348667</id><snippet>queryset = MyModel.objects.filter(date__year=2011, date__month=3, date__day=18)
</snippet></ROW><ROW><id>5348845</id><snippet># The decorator
def class_with_exception(cls):
    def init(self, _message=''):
        self.message = _message
    excname = 'ClsException'
    excclass = type(excname, (Exception,), {'__init__': init})
    setattr(cls, excname, excclass)
    return cls

# example usage
@class_with_exception
class MyClass(object):
    def __init__(self):
        raise MyClass.ClsException('my message')

# raises and catches exception
try:
    MyClass()
except MyClass.ClsException:
    print 'catching exception'
</snippet></ROW><ROW><id>5348881</id><snippet>structure</snippet></ROW><ROW><id>5348881</id><snippet>s = '''
&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div tal:content="structure t"&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''

from chameleon import PageTemplate

pt = PageTemplate(s)

print pt(t='&lt;p&gt;Hi!&lt;/p&gt;')
</snippet></ROW><ROW><id>5348881</id><snippet>__html__</snippet></ROW><ROW><id>5348881</id><snippet>a = '''
&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            ${t}
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''

from chameleon import PageTemplate

pt = PageTemplate(a)

class Literal(object):
    def __init__(self, s):
        self.s =s

    def __html__(self):
        return self.s

print pt(t=Literal('&lt;p&gt;Hi!&lt;/p&gt;'))
</snippet></ROW><ROW><id>5349373</id><snippet>itemconfig</snippet></ROW><ROW><id>5349373</id><snippet>from Tkinter import *

master = Tk()

listbox = Listbox(master)
listbox.pack()

listbox.insert(END, "a list entry")
for item in ["one", "two", "three", "four"]:
    listbox.insert(END, item)

#This change the background colour of the 2nd item (index 1) in the list
listbox.itemconfig(1, {'bg':'red'}) 

#Another way to pass the colour
listbox.itemconfig(2, bg='green') 

mainloop()
</snippet></ROW><ROW><id>5349447</id><snippet>fmt</snippet></ROW><ROW><id>5349447</id><snippet>np.savetxt</snippet></ROW><ROW><id>5349447</id><snippet>np.savetxt("file.txt", output, fmt='%10.5f', delimiter='\t')
</snippet></ROW><ROW><id>5349447</id><snippet>fmt='%i'</snippet></ROW><ROW><id>5349447</id><snippet>fmt</snippet></ROW><ROW><id>5349486</id><snippet>count</snippet></ROW><ROW><id>5349486</id><snippet>count</snippet></ROW><ROW><id>5349515</id><snippet>http.py</snippet></ROW><ROW><id>5349515</id><snippet>http</snippet></ROW><ROW><id>5349616</id><snippet>numpy.prod(a)
</snippet></ROW><ROW><id>5349616</id><snippet>numpy.arange(1,40) / 10.</snippet></ROW><ROW><id>5349616</id><snippet>array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,  1.1,
        1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,  2.2,
        2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,  3.3,
        3.4,  3.5,  3.6,  3.7,  3.8,  3.9])
</snippet></ROW><ROW><id>5349616</id><snippet>reduce(lambda x,y: x*y, a)</snippet></ROW><ROW><id>5349616</id><snippet>numpy.prod(a)</snippet></ROW><ROW><id>5349616</id><snippet>a.prod()</snippet></ROW><ROW><id>5349793</id><snippet>max((x for x in range(25)))
</snippet></ROW><ROW><id>5349793</id><snippet>max(x for x in range(25))
</snippet></ROW><ROW><id>5349793</id><snippet>range</snippet></ROW><ROW><id>5349793</id><snippet>max(x for x in xrange(25))
</snippet></ROW><ROW><id>5349858</id><snippet>import re

with open('input.txt', 'w') as f:
    text = f.read()
#text = 'Intro [LANG::First text 1] goes on [LANG::Second text 2] and finishes.'

with open('output.txt', 'w') as f:
    for match in re.findall('\[LANG::.*?\]', text):
        f.write(match+'\n')
</snippet></ROW><ROW><id>5349858</id><snippet>[LANG::First text 1]
[LANG::Second text 2]
</snippet></ROW><ROW><id>5349858</id><snippet>with open('output.txt', 'w') as f:
    for match in re.findall('\[.ANG::.*?\]', text):
        if match.startswith('[:ANG'):
            f.write(match[7:-1]+'\n')
        else:
            f.write(match+'\n')
</snippet></ROW><ROW><id>5349858</id><snippet>match[7:-1]</snippet></ROW><ROW><id>5350586</id><snippet>def b(a, d):
    return a.format(**d)
</snippet></ROW><ROW><id>5350586</id><snippet>a = " ddwqqf{x}"
c = a.format(x="!!!!!")
</snippet></ROW><ROW><id>5350586</id><snippet>a = " ddwqqf{x},{{'a':'aaaa'}}"
</snippet></ROW><ROW><id>5350586</id><snippet>import re
d = {"x_1": "1", "x_2": "2", "x_3": "3", "x_4": "4"}
re.sub(r"\{([a-z_0-9]+)\}", lambda m: d[m.group(1)], s)
</snippet></ROW><ROW><id>5350586</id><snippet>s</snippet></ROW><ROW><id>5350915</id><snippet>reduce(operator.or_, Q(**{key + '__icontains': val}) for (key, val) in D.iteritems())
</snippet></ROW><ROW><id>5350982</id><snippet>aliased()</snippet></ROW><ROW><id>5350982</id><snippet>alias()</snippet></ROW><ROW><id>5350982</id><snippet>SELECT ... FROM my_table my_table_alias ...</snippet></ROW><ROW><id>5351106</id><snippet>class Price:
    def __init__(self, **kwargs):
        if 'dollar' in kwargs and 'euro' in kwargs:
           raise Exception(..)
        if 'dollar' in kwargs:
            self.dollar = kwargs['dollar']
        elif 'euro' in kwargs:
            self.euro = kwargs['euro']
        else:
            raise Exception()
</snippet></ROW><ROW><id>5351110</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>5351110</id><snippet>eval()</snippet></ROW><ROW><id>5351187</id><snippet>class Bicycle:

    def __init__(self):
        self.cadence = 0
        self.speed  = 0 
        self.gear  =1




    def changeCadence(self, newValue):
        self.cadence = newValue


    def changeGear(self, newValue):
        self.gear = newValue


    # and same for other functions



if __name__ == "__main__":
    obj = Bicycle()
    obj.changeCadence()
</snippet></ROW><ROW><id>5351400</id><snippet>str</snippet></ROW><ROW><id>5351400</id><snippet>unicode</snippet></ROW><ROW><id>5351400</id><snippet>str(u'abcd')</snippet></ROW><ROW><id>5351400</id><snippet>str()</snippet></ROW><ROW><id>5351400</id><snippet>str</snippet></ROW><ROW><id>5351486</id><snippet>from numpy import empty
</snippet></ROW><ROW><id>5351486</id><snippet>from numpy import float128, empty as _empty
def empty(*args, **kwargs):
    kwargs.update(dtype=float128)
    _empty(*args, **kwargs)
</snippet></ROW><ROW><id>5351486</id><snippet>import numpy
</snippet></ROW><ROW><id>5351486</id><snippet>mynumpy.py</snippet></ROW><ROW><id>5351486</id><snippet>from numpy import *
_empty = empty
def empty(*args, **kwargs):
    kwargs.update(dtype=float128)
    _empty(*args, **kwargs)
</snippet></ROW><ROW><id>5351486</id><snippet>import mynumpy as numpy
</snippet></ROW><ROW><id>5351486</id><snippet>dtype=myfloat</snippet></ROW><ROW><id>5351486</id><snippet>numpy.empty_like()</snippet></ROW><ROW><id>5351486</id><snippet>numpy.zeros_like()</snippet></ROW><ROW><id>5351486</id><snippet>numpy.ones_like()</snippet></ROW><ROW><id>5351486</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>5351968</id><snippet>for root, dirs, files in os.walk(directory):
    for filename in files:
        if filename.endswith(('.jpg', '.jpeg', '.gif', '.png')):
            pass
</snippet></ROW><ROW><id>5352080</id><snippet>d = [dict(itertools.chain(*(d.iteritems() for d in a)))
     for a in [lstone, lsttwo]]
</snippet></ROW><ROW><id>5352080</id><snippet>keys = d[0].keys()
transposed = [[e[k] for k in keys] for e in d]
</snippet></ROW><ROW><id>5352080</id><snippet>csv.writer</snippet></ROW><ROW><id>5352080</id><snippet>with open("a.csv", "wb") as f:
    csv.writer(f).writerows(zip(keys, *transposed))
</snippet></ROW><ROW><id>5352122</id><snippet>bitmap</snippet></ROW><ROW><id>5352122</id><snippet>default</snippet></ROW><ROW><id>5352533</id><snippet>T1: |-----&gt;|-------------&gt;|--------------&gt;|
    | get  |    some_opp  | task_done     |
T2: |----------&gt;|------&gt;|----------------&gt;|
    | other_opp | clear | yet_another_opp |
</snippet></ROW><ROW><id>5352533</id><snippet>get</snippet></ROW><ROW><id>5352533</id><snippet>task_done</snippet></ROW><ROW><id>5352533</id><snippet>T1: |-----&gt;|-------------&gt;|--------------&gt;|
    | get  |    some_opp  | task_done     |
T2: |----------&gt;|------------------------&gt;|------&gt;|
    | other_opp | wait_for_task_done      | clear |
</snippet></ROW><ROW><id>5352533</id><snippet>T1: |-----&gt;|-------------------&gt;|--------------&gt;|-------------&gt;|
    | get  |    some_opp        | task_done     | finish_clear |
T2: |----------&gt;|--------------&gt;|----------------&gt;|
    | other_opp | partial_clear | yet_another_opp |
</snippet></ROW><ROW><id>5352630</id><snippet>dict((k, bigdict[k]) for k in ('l', 'm', 'n'))
</snippet></ROW><ROW><id>5352630</id><snippet>{k: bigdict[k] for k in ('l', 'm', 'n')}
</snippet></ROW><ROW><id>5352630</id><snippet>bigdict</snippet></ROW><ROW><id>5352630</id><snippet>None</snippet></ROW><ROW><id>5352630</id><snippet>{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}
</snippet></ROW><ROW><id>5353609</id><snippet>__name__</snippet></ROW><ROW><id>5353609</id><snippet>def factory(BaseClass) :
    class NewClass(BaseClass): pass
    NewClass.__name__ = "factory_%s" % BaseClass.__name__
    return NewClass
</snippet></ROW><ROW><id>5353609</id><snippet>type</snippet></ROW><ROW><id>5353797</id><snippet>reduce</snippet></ROW><ROW><id>5353797</id><snippet>any</snippet></ROW><ROW><id>5353797</id><snippet>return any(child.contains(other_node) for child in self.children)
</snippet></ROW><ROW><id>5353797</id><snippet>a.contains(b)</snippet></ROW><ROW><id>5353797</id><snippet>False</snippet></ROW><ROW><id>5353797</id><snippet>a == b</snippet></ROW><ROW><id>5353797</id><snippet>len(a.children) &gt; 0</snippet></ROW><ROW><id>5353797</id><snippet>a = Node("a")
b = Node("b")
a.add_child(a)
a.add_child(b)
</snippet></ROW><ROW><id>5353797</id><snippet>a.contains(b)
</snippet></ROW><ROW><id>5353797</id><snippet>contains</snippet></ROW><ROW><id>5353797</id><snippet>add_child</snippet></ROW><ROW><id>5353869</id><snippet>scipy.spatial.distance</snippet></ROW><ROW><id>5353932</id><snippet>grouped = {}
for key, item in t.items():
  grouped[key] = groupby(item):

current_items = {}
for key, val in grouped.items():
  current_items[key] = val.next()

while current_items:
  #find the first one
  this_item = min((item for item, _ in current_items.items()))
  outdict = {}
  for key, (item, rows) in current_items.items():
    if item == this_item:
      #move the item to the output
      outdict[key] = rows
    try:
      #advance the iterator
      current_items[key] = grouped.next()
    except StopIteration:
      #must be out of items
      current_items.pop(key)
      grouped.pop(key)
  yield outdict
</snippet></ROW><ROW><id>5354074</id><snippet>if text in ( 'Text1', 'Text2', 'Text3', 'Text4' ):
    do_something()
</snippet></ROW><ROW><id>5354117</id><snippet>   if not 'message' in s:
        self.response.out.write('No session value')
        s['message'] = 'This value is stored in a session'
        s.save()
</snippet></ROW><ROW><id>5354117</id><snippet>os.environ['HTTP_COOKIE']</snippet></ROW><ROW><id>5354117</id><snippet>self.app.get</snippet></ROW><ROW><id>5354117</id><snippet>headers</snippet></ROW><ROW><id>5354481</id><snippet>float</snippet></ROW><ROW><id>5354481</id><snippet>array</snippet></ROW><ROW><id>5354481</id><snippet>a = array.array("f")
</snippet></ROW><ROW><id>5354481</id><snippet>numpy.float32</snippet></ROW><ROW><id>5354870</id><snippet>self.date = (self.date % 31) + 1
</snippet></ROW><ROW><id>5354870</id><snippet>(self.date % 31)</snippet></ROW><ROW><id>5354870</id><snippet>self.date +1 % 31</snippet></ROW><ROW><id>5354870</id><snippet>date = 0</snippet></ROW><ROW><id>5354870</id><snippet>date=30</snippet></ROW><ROW><id>5354870</id><snippet>30+1 % 31</snippet></ROW><ROW><id>5354870</id><snippet>31 % 31</snippet></ROW><ROW><id>5354870</id><snippet>date=30</snippet></ROW><ROW><id>5354870</id><snippet>30 % 31</snippet></ROW><ROW><id>5354870</id><snippet>30</snippet></ROW><ROW><id>5354946</id><snippet>a</snippet></ROW><ROW><id>5354946</id><snippet>func2</snippet></ROW><ROW><id>5354946</id><snippet>global a</snippet></ROW><ROW><id>5354946</id><snippet>print</snippet></ROW><ROW><id>5354946</id><snippet>def func2():
    global a
    print a
    a = 'bar'
</snippet></ROW><ROW><id>5354947</id><snippet>copy.copy</snippet></ROW><ROW><id>5354947</id><snippet>__get__</snippet></ROW><ROW><id>5354947</id><snippet>memoized</snippet></ROW><ROW><id>5354947</id><snippet>partial</snippet></ROW><ROW><id>5354947</id><snippet>class C(object):
    @memoized
    def foo(): pass

o1 = C()
o2 = copy.copy(o1)
print o1.foo.cache is o2.foo.cache
</snippet></ROW><ROW><id>5354947</id><snippet>memoized(C.foo.func)</snippet></ROW><ROW><id>5354964</id><snippet>[,!?]|\.(?!(com|org|ly))
</snippet></ROW><ROW><id>5355549</id><snippet>setattr</snippet></ROW><ROW><id>5355549</id><snippet>&gt;&gt;&gt; import mymodule
&gt;&gt;&gt; setattr(mymodule, 'point', (1.0, 4.0))
&gt;&gt;&gt; mymodule.point
(1.0, 4.0)
</snippet></ROW><ROW><id>5355974</id><snippet>numpy.uint8</snippet></ROW><ROW><id>5355974</id><snippet>def join_struct_arrays(arrays):
    sizes = numpy.array([a.itemsize for a in arrays])
    offsets = numpy.r_[0, sizes.cumsum()]
    n = len(arrays[0])
    joint = numpy.empty((n, offsets[-1]), dtype=numpy.uint8)
    for a, size, offset in zip(arrays, sizes, offsets):
        joint[:,offset:offset+size] = a.view(numpy.uint8).reshape(n,size)
    dtype = sum((a.dtype.descr for a in arrays), [])
    return joint.ravel().view(dtype)
</snippet></ROW><ROW><id>5355974</id><snippet>as_strided()</snippet></ROW><ROW><id>5356040</id><snippet>def init(*args):
    global connection
    connection = Connection(*args)
pPool = Pool(initializer=init, initargs=conargs) 
</snippet></ROW><ROW><id>5356126</id><snippet>window.Freeze()
for i in LARGELIST:
    list.SetStringItem(i, 1, str(a))
window.Thaw()
</snippet></ROW><ROW><id>5356415</id><snippet>_meta</snippet></ROW><ROW><id>5356563</id><snippet>pkg_resources</snippet></ROW><ROW><id>5356563</id><snippet># __main__.py
import pkg_resources
from PIL import Image

print pkg_resources.resource_string(__name__, 'README.txt')

im = Image.open(pkg_resources.resource_stream('app', 'im.png'))
im.rotate(45).show()
</snippet></ROW><ROW><id>5356563</id><snippet>$ echo '#!/usr/bin/env python' | cat - zipfile &gt; program-name
$ chmod +x program-name
</snippet></ROW><ROW><id>5356563</id><snippet>$ cp program-name /another-dir/
$ cd /another-dir &amp;&amp; ./program-name
</snippet></ROW><ROW><id>5356682</id><snippet>AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>5356682</id><snippet>get_profile()</snippet></ROW><ROW><id>5356682</id><snippet>User</snippet></ROW><ROW><id>5356682</id><snippet>try:
    CustomerProfile.objects.get( user=request.user )
except CustomerProfile.DoesNotExist:
    # hmmm.  Must be a Store, not a Customer.
</snippet></ROW><ROW><id>5356682</id><snippet>save()</snippet></ROW><ROW><id>5356682</id><snippet>@customer_required</snippet></ROW><ROW><id>5356682</id><snippet>@store_required</snippet></ROW><ROW><id>5356682</id><snippet>@login_required</snippet></ROW><ROW><id>5356756</id><snippet>focus_set</snippet></ROW><ROW><id>5356756</id><snippet>from Tkinter import *
root = Tk()
Window = Frame(root)
TextWidget = Text(Window)
TextWidget.pack()
Window.pack()
TextWidget.focus_set()
root.mainloop()
</snippet></ROW><ROW><id>5356936</id><snippet>copy_non_const_reference</snippet></ROW><ROW><id>5356936</id><snippet>bp::reference_existing_object</snippet></ROW><ROW><id>5357617</id><snippet>import re
w = "TEMPLATES = ( ('index.html', 'home'), ('base.html', 'base'))"

# find outer parens
outer = re.compile("\((.+)\)")
m = outer.search(w)
inner_str = m.group(1)

# find inner pairs
innerre = re.compile("\('([^']+)', '([^']+)'\)")

results = innerre.findall(inner_str)
for x,y in results:
  print "%s &lt;-&gt; %s" % (x,y)
</snippet></ROW><ROW><id>5357617</id><snippet>index.html &lt;-&gt; home
base.html &lt;-&gt; base
</snippet></ROW><ROW><id>5357617</id><snippet>outer</snippet></ROW><ROW><id>5357617</id><snippet>\(</snippet></ROW><ROW><id>5357617</id><snippet>\)</snippet></ROW><ROW><id>5357617</id><snippet>search</snippet></ROW><ROW><id>5357617</id><snippet>( )</snippet></ROW><ROW><id>5357617</id><snippet>m</snippet></ROW><ROW><id>5357617</id><snippet>.+</snippet></ROW><ROW><id>5357617</id><snippet>outer</snippet></ROW><ROW><id>5357617</id><snippet>innerre</snippet></ROW><ROW><id>5357617</id><snippet>('a', 'b')</snippet></ROW><ROW><id>5357617</id><snippet>\(</snippet></ROW><ROW><id>5357617</id><snippet>\)</snippet></ROW><ROW><id>5357617</id><snippet>' '</snippet></ROW><ROW><id>5357617</id><snippet>findall</snippet></ROW><ROW><id>5357617</id><snippet>search</snippet></ROW><ROW><id>5357617</id><snippet>match</snippet></ROW><ROW><id>5357617</id><snippet>innerre</snippet></ROW><ROW><id>5357617</id><snippet>results</snippet></ROW><ROW><id>5357617</id><snippet>rx = re.compile("^TEMPLATES = \(.+\)")
rx.match(w)
</snippet></ROW><ROW><id>5357685</id><snippet>// this function *must* be called with two parameters
template&lt;typename T&gt;
T getValue(const std::string &amp;key, const T &amp;defaultValue) {}

class_&lt;ConfigManager&gt;(...)
.def("GetValue", getValue&lt;int&gt;) // two arguments!
.def("GetValue", getValue&lt;float&gt;) // Python has no idea about the defaults,
.def("GetValue", getValue&lt;std::string&gt;); // they are a C++ feature for calling
</snippet></ROW><ROW><id>5357685</id><snippet>template&lt;typename T&gt;
T getValue(const std::string &amp;key, const T &amp;defaultValue) {}

template&lt;typename T&gt;
T getValueDefault(const std::string &amp;key)
{
    // default available in C++,
    // transitively available in Python
    return getValue(key);
}

class_&lt;ConfigManager&gt;(...)
.def("GetValue", getValue&lt;int&gt;) // two arguments
.def("GetValue", getValueDefault&lt;int&gt;) // one argument
// and so on
</snippet></ROW><ROW><id>5357685</id><snippet>template&lt;typename T&gt;
T getValue(const std::string &amp;key, const T &amp;defaultValue) {}

// creates utility class x, which creates overloads of function y,
// with argument count as low as a and as high as b:
// BOOST_PYTHON_FUNCTION_OVERLOADS(x, y, a, b);

BOOST_PYTHON_FUNCTION_OVERLOADS(getValueIntOverloads, getValue&lt;int&gt;, 1, 2);

class_&lt;ConfigManager&gt;(...)
.def("GetValue", getValue&lt;int&gt;, getValueIntOverloads()) // one or two arguments

// and so on
</snippet></ROW><ROW><id>5357712</id><snippet>#!/usr/bin/python
# -*- coding: latin-1 -*-
import sys
import base64
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4.QtWebKit import *
from PyQt4 import QtNetwork

class Render(QWebPage):
  def __init__(self, url):
    self.app = QApplication(sys.argv)

    username = 'username'
    password = 'password'

    base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
    authheader = "Basic %s" % base64string

    headerKey = QByteArray("Authorization")
    headerValue = QByteArray(authheader)

    url = QUrl(url)
    req = QtNetwork.QNetworkRequest()
    req.setRawHeader(headerKey, headerValue)
    req.setUrl(url)

    QWebPage.__init__(self)
    self.loadFinished.connect(self._loadFinished)


    self.mainFrame().load(req)
    self.app.exec_()

  def _loadFinished(self, result):
    self.frame = self.mainFrame()
    self.app.quit()

def main():
    url = 'http://www.google.com'
    r = Render(url)
    html = r.frame.toHtml()
</snippet></ROW><ROW><id>5357758</id><snippet>with open(propertyfile_name) as f: 
    content= f.read()
    for (server,h) in re.findall(RE,content): 
        dico[server]['host']=h

    for (server,n) in re.findall(RE1,content):  
        dico[server]['name']=n

    for (server,s) in re.findall(RE2,content): 
        dico[server]['sslport']=s

    for (server,p) in re.findall(RE3,content): 
        dico[server]['port']=p
</snippet></ROW><ROW><id>5357886</id><snippet>__ihook__</snippet></ROW><ROW><id>5357886</id><snippet>    __iadd__
    __isub__
    __imul__
    __idiv__
    __imod__
    __ipow__
    __ilshift__
    __irshift__
    __iand__
    __ixor__
    __ior__
</snippet></ROW><ROW><id>5357886</id><snippet>__hook__</snippet></ROW><ROW><id>5357886</id><snippet>a+=b</snippet></ROW><ROW><id>5357886</id><snippet>a.__iadd__(b)</snippet></ROW><ROW><id>5357886</id><snippet>__coerce__</snippet></ROW><ROW><id>5357886</id><snippet>coerce(1, 2.0)</snippet></ROW><ROW><id>5357886</id><snippet>(1.0, 2.0)</snippet></ROW><ROW><id>5357886</id><snippet>a=1; a+= 2.0</snippet></ROW><ROW><id>5357886</id><snippet>a.__iadd__(2.0)</snippet></ROW><ROW><id>5357957</id><snippet>for i, line in enumerate(f):
  print i, line
</snippet></ROW><ROW><id>5358289</id><snippet>% python xoauth.py --generate_oauth_token --user=youremail@gmail.com
</snippet></ROW><ROW><id>5358289</id><snippet>xoauth.py</snippet></ROW><ROW><id>5358289</id><snippet>import email.message
import imaplib
import random
import time
import xoauth

MY_EMAIL = 'youremail@gmail.com'
MY_TOKEN = '&lt;token&gt;'
MY_SECRET = '&lt;secret&gt;'

# construct the oauth access token
nonce = str(random.randrange(2**64 - 1))
timestamp = str(int(time.time()))
consumer = xoauth.OAuthEntity('anonymous', 'anonymous')
access = xoauth.OAuthEntity(MY_TOKEN, MY_SECRET)
token = xoauth.GenerateXOauthString(
    consumer, access, MY_EMAIL, 'imap', MY_EMAIL, nonce, timestamp)

# connect to gmail's imap service.
imap = imaplib.IMAP4_SSL('imap.googlemail.com')
imap.debug = 4
imap.authenticate('XOAUTH', lambda x: token)

# create the message
msg = email.message.Message()
msg['Subject'] = 'subject of the message'
msg['From'] = MY_EMAIL
msg['To'] = MY_EMAIL
msg.set_payload('Body of the message')

# append the message to the drafts folder
now = imaplib.Time2Internaldate(time.time())
imap.append('[Gmail]/Drafts', '', now, str(msg))

imap.logout()
</snippet></ROW><ROW><id>5358510</id><snippet>AF_INET6</snippet></ROW><ROW><id>5358510</id><snippet>&gt;&gt;&gt; socket.getaddrinfo("www.python.org", 80, 0, 0, socket.SOL_TCP)
[(2, 1, 6, '', ('82.94.164.162', 80)),
 (10, 1, 6, '', ('2001:888:2000:d::a2', 80, 0, 0))]

&gt;&gt;&gt; ourSocket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0)
&gt;&gt;&gt; ourSocket.connect(('2001:888:2000:d::a2', 80, 0, 0))
</snippet></ROW><ROW><id>5358549</id><snippet>header_count = 4
headers = [[] for i in range(1, header_count)]
</snippet></ROW><ROW><id>5358549</id><snippet>headers[1].append("this goes in the first header")
headers[2].append("this goes in the second header")
</snippet></ROW><ROW><id>5359000</id><snippet>(\d)(\d)(?:.*?(MYSUBSTRING))?</snippet></ROW><ROW><id>5359000</id><snippet>&gt;&gt;&gt; re.search(r'(\d)(\d)(?:.*?(MYSUBSTRING))?', 'aaa79bbbMYSUBSTRINGccc').groups()
('7', '9', 'MYSUBSTRING')
&gt;&gt;&gt; re.search(r'(\d)(\d)(?:.*?(MYSUBSTRING))?', 'aaa79bbbccc').groups()
('7', '9', None)
</snippet></ROW><ROW><id>5359020</id><snippet>sys.version_info[:2] &gt;= (2, 6)
</snippet></ROW><ROW><id>5359120</id><snippet>xml = &lt;&lt;EOT
&lt;foo&gt;
  &lt;bar&gt;      hi &lt;/bar&gt;
  &lt;!-- ... --&gt;
  &lt;math&gt;&lt;sometag&gt;&lt;another&gt;bar&lt;/another&gt;&lt;/sometag&gt;&lt;/math&gt;
  &lt;!-- ... --&gt;
&lt;/foo&gt;
EOT

NAMESPACE = %w[m http://host.com/m]

require 'nokogiri'
doc = Nokogiri::XML::DocumentFragment.parse(xml)

ns = doc.at('foo').add_namespace_definition(*NAMESPACE)

doc.xpath('foo/math | foo/math//*').each { |n| n.namespace = ns }

puts doc.to_xml 
</snippet></ROW><ROW><id>5359120</id><snippet>&gt;&gt; &lt;foo xmlns:m="http://host.com/m"&gt;
&gt;&gt;   &lt;bar&gt;      hi &lt;/bar&gt;
&gt;&gt;   &lt;!-- ... --&gt;
&gt;&gt;   &lt;m:math&gt;&lt;m:sometag&gt;&lt;m:another&gt;bar&lt;/m:another&gt;&lt;/m:sometag&gt;&lt;/m:math&gt;
&gt;&gt;   &lt;!-- ... --&gt;
&gt;&gt; &lt;/foo&gt;
</snippet></ROW><ROW><id>5359120</id><snippet>&lt;foo&gt;</snippet></ROW><ROW><id>5359120</id><snippet>xml = &lt;&lt;EOT
&lt;foo&gt;
  &lt;bar&gt;      hi &lt;/bar&gt;
  &lt;!-- ... --&gt;
  &lt;math&gt;&lt;sometag&gt;&lt;another&gt;bar&lt;/another&gt;&lt;/sometag&gt;&lt;/math&gt;
  &lt;!-- ... --&gt;
&lt;/foo&gt;
EOT

NAMESPACE = %w[m http://host.com/m]

require 'nokogiri'
doc = Nokogiri::XML::DocumentFragment.parse(xml)

doc.xpath('foo/math | foo/math//*').each { |n| n.name = "m:" &lt;&lt; n.name }

puts doc.to_xml

# &gt;&gt; &lt;foo&gt;
# &gt;&gt;   &lt;bar&gt;      hi &lt;/bar&gt;
# &gt;&gt;   &lt;!-- ... --&gt;
# &gt;&gt;   &lt;m:math&gt;&lt;m:sometag&gt;&lt;m:another&gt;bar&lt;/m:another&gt;&lt;/m:sometag&gt;&lt;/m:math&gt;
# &gt;&gt;   &lt;!-- ... --&gt;
# &gt;&gt; &lt;/foo&gt;
</snippet></ROW><ROW><id>5359146</id><snippet>&gt;&gt;&gt; str = u"Ñandu"
&gt;&gt;&gt; str[0] == u"\xd1"
True
&gt;&gt;&gt; if str[0] == u"\xd1": print "Begins with \xd1!"
Begins with Ñ!
</snippet></ROW><ROW><id>5359307</id><snippet>Lazy Relationships</snippet></ROW><ROW><id>5359307</id><snippet>class Match(models.Model):
    player = models.ForeignKey('player.Player')
</snippet></ROW><ROW><id>5359307</id><snippet>class Skill(models.Model):
    player = ForeignKey('Player')
    match = ForeignKey('match.Match')

class Player(models.Model):
    #yadda yadda

    def get_skill():
       skill = Skill.object.filter()
</snippet></ROW><ROW><id>5359314</id><snippet>5:8</snippet></ROW><ROW><id>5359314</id><snippet>eval</snippet></ROW><ROW><id>5359314</id><snippet>eval</snippet></ROW><ROW><id>5359314</id><snippet>string = '1234567890'
sliceInput = '5:8'
result = eval('string[' + sliceInput + ']')
</snippet></ROW><ROW><id>5359314</id><snippet>string = '1234567890'
sliceInput = '5:8'
sliceParts = sliceInput.split(':')
if len(sliceParts) != 2:
    # Invalid input -- either no ':' or too many
else:
    try:
        start, end = [ int(x) for x in sliceParts ]
    except ValueError:
        # Invalid input, not a number
    else:
        result = string[start : end]
</snippet></ROW><ROW><id>5359314</id><snippet>slice()</snippet></ROW><ROW><id>5359351</id><snippet>subset = table[np.array([i in id_list for i in table.IDs])]
</snippet></ROW><ROW><id>5359351</id><snippet>in1d</snippet></ROW><ROW><id>5359351</id><snippet>subset = table[np.in1d(table.IDs, id_list)]
</snippet></ROW><ROW><id>5359463</id><snippet>from optparse import OptionParser
import sys

def main():
    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage)
    parser.add_option('-d', '--directory',
            action='store', dest='directory',
            default=None, help='specify directory')
    parser.add_option('-f', '--file',
            action='store', dest='filename',
            default=None, help='specify file')
    parser.add_option('-v', '--version',
                      action="store_true", dest="show_version",
                      default=False, help='displays the version number')
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()
    (options, args) = parser.parse_args()
    # rest of program...

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5359463</id><snippet>main()</snippet></ROW><ROW><id>5359463</id><snippet>filenames_or_wildcards = []</snippet></ROW><ROW><id>5359463</id><snippet>main()</snippet></ROW><ROW><id>5359463</id><snippet>args</snippet></ROW><ROW><id>5359612</id><snippet>encoding=whatever</snippet></ROW><ROW><id>5359612</id><snippet>newline=''</snippet></ROW><ROW><id>5359612</id><snippet>import csv
data = [
    ['\xfforick', 123.456],
    ['polonius', 987.564],
    ]
with open('demo.csv', 'w', newline='', encoding='utf8') as f:
    writer = csv.writer(f)
    for row in data:
        writer.writerow(row)
</snippet></ROW><ROW><id>5359612</id><snippet>&gt;&gt;&gt; open('demo.csv', 'rb').read()
b'\xc3\xbforick,123.456\r\npolonius,987.564\r\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5359612</id><snippet>for i in range(self.ui.table.rowCount()):
    rowData = [self.ui.table.item(i,0).text().encode('utf-8')\
    ,self.ui.table.item(i,1).text().encode('utf-8')\
    ,self.ui.table.item(i,2).text().encode('utf-8')\
    ,self.ui.table.item(i,3).text().encode('utf-8')\
    ,self.ui.table.item(i,4).text().encode('utf-8')]
    dataWriter.writerow(rowData)
</snippet></ROW><ROW><id>5359612</id><snippet>table = self.ui.table
for i in range(table.rowCount()):
    row = [table.item(i, j).text() for j in range(5)]
    writer.writerow(row)
</snippet></ROW><ROW><id>5359693</id><snippet>__iter__()</snippet></ROW><ROW><id>5359693</id><snippet>__getitem__()</snippet></ROW><ROW><id>5359898</id><snippet>max = self.treeview.verticalScrollBar().maximum()
self.treeview.verticalScrollBar().setMaximum(max*2)
</snippet></ROW><ROW><id>5360410</id><snippet>tweepy.models</snippet></ROW><ROW><id>5360410</id><snippet>socialmedia.twitter.tweepy.models</snippet></ROW><ROW><id>5360410</id><snippet>socialmedia/twitter/</snippet></ROW><ROW><id>5360410</id><snippet>tweepy.whatever</snippet></ROW><ROW><id>5360978</id><snippet>csvFile</snippet></ROW><ROW><id>5360978</id><snippet>csv.DictReader</snippet></ROW><ROW><id>5360978</id><snippet>with open(csvFile, 'rb') as f:
    reader = csv.DictReader(f, delimiter='\t', quoting=csv.QUOTE_NONE)
    print reader.fieldnames
</snippet></ROW><ROW><id>5360978</id><snippet>csvFile</snippet></ROW><ROW><id>5360978</id><snippet>StringIO</snippet></ROW><ROW><id>5360978</id><snippet>csv</snippet></ROW><ROW><id>5360978</id><snippet>from cStringIO import StringIO

# csvFile = 'Facility No\tTesting No\tName\tAge\n\n252\t2351\tJackrabbit, Jazz\t15\n345\t257\tAardvark, Ethel\t41\n'
reader = csv.DictReader(StringIO(csvFile), delimiter='\t', quoting=csv.QUOTE_NONE)
print reader.fieldnames
</snippet></ROW><ROW><id>5360978</id><snippet>with open('/tmp/test', 'rb') as f:
    reader = csv.DictReader(f, delimiter='\t', quoting=csv.QUOTE_NONE)
    print reader.fieldnames
</snippet></ROW><ROW><id>5360983</id><snippet>subprocess.call(['lp', 'foo.png'])
</snippet></ROW><ROW><id>5361007</id><snippet>class table():

    colora = 'red'
    def __init__(self):
        self.color = 'green'
        print 'table: table.color', self.color
        print 'table: table.color', table.colora

class pencil(table):

    def __init__(self):
        table.__init__(self)
        print 'pencil: table.colora', table.colora
        print 'pencil: pencil.color',  self.color
        print 'pencil: pencil.colora', pencil.colora

obj = pencil()
</snippet></ROW><ROW><id>5361215</id><snippet>.*</snippet></ROW><ROW><id>5361215</id><snippet>99</snippet></ROW><ROW><id>5361215</id><snippet>.*</snippet></ROW><ROW><id>5361215</id><snippet>.*</snippet></ROW><ROW><id>5361215</id><snippet>(99)</snippet></ROW><ROW><id>5361215</id><snippet>.*(99)</snippet></ROW><ROW><id>5361215</id><snippet>.*(99)?</snippet></ROW><ROW><id>5361323</id><snippet>self.key = ...</snippet></ROW><ROW><id>5361323</id><snippet>__setattr__</snippet></ROW><ROW><id>5361323</id><snippet>__setattr__</snippet></ROW><ROW><id>5361323</id><snippet>def __setattr__(self,key,value):
    // Access the object's fields through the special __dict__ field
    self.__dict__[key] = value+1

// or...

def __init__(self):
    // Assign a dict field to access fields set via __[gs]etattr__
    self.attrs = {}

def __setattr__(self,key,value):
    self.attrs[key] = value+1
</snippet></ROW><ROW><id>5361326</id><snippet>import re

d = {'dw11qdwq':'qqqqqq' ,'aaaaa':'wwwwwww'}

a = '111 = dw11qdwq\n111 = aaaaa'

print repr(a)
a= re.sub('111\s*=\s*(\S*)',lambda mat: d[mat.group(1)],a)
print repr(a)
</snippet></ROW><ROW><id>5361326</id><snippet>111\s*=\s*</snippet></ROW><ROW><id>5361326</id><snippet>import re

d = {'dw11qdwq':'qqqqqq' ,'aaaaa':'wwwwwww'}

a = '111 = dw11qdwq\n111 = aaaaa'

print repr(a)
a= re.sub('(111\s*=\s*)(\S*)',lambda mat: mat.group(1) + d[mat.group(2)],a)
print repr(a)
</snippet></ROW><ROW><id>5361326</id><snippet>import re

def rpl(mat, d = {'dw11qdwq':'qqqqqq' ,'aaaaa':'wwwwwww'}):
    return mat.group(1) + d[mat.group(2)]

pat = re.compile('(111\s*=\s*)(\S*)')

a = '111 = dw11qdwq\n111 = aaaaa'
print repr(a)
a= pat.sub(rpl,a)
print repr(a)
</snippet></ROW><ROW><id>5361407</id><snippet>celery</snippet></ROW><ROW><id>5361407</id><snippet>RabbitMQ</snippet></ROW><ROW><id>5361407</id><snippet>Redis</snippet></ROW><ROW><id>5361407</id><snippet>celeryd</snippet></ROW><ROW><id>5361407</id><snippet>celeryd</snippet></ROW><ROW><id>5361407</id><snippet>gevent</snippet></ROW><ROW><id>5361435</id><snippet>()</snippet></ROW><ROW><id>5361435</id><snippet>(foo)</snippet></ROW><ROW><id>5361435</id><snippet>foo</snippet></ROW><ROW><id>5361435</id><snippet>(())</snippet></ROW><ROW><id>5361967</id><snippet>import math
def hi_bit(num):
        return int(math.log(num, 2))
</snippet></ROW><ROW><id>5361967</id><snippet>N</snippet></ROW><ROW><id>5361967</id><snippet>2**N</snippet></ROW><ROW><id>5362676</id><snippet>raise Class, instance</snippet></ROW><ROW><id>5362676</id><snippet>raise instance</snippet></ROW><ROW><id>5362749</id><snippet>$ sudo scapy
Welcome to Scapy (2.1.0) 
&gt;&gt;&gt; sr(IP(dst="8.8.8.8") / UDP() / DNS(rd=1,qd=DNSQR(qname="stackoverflow.com")))
Begin emission:
..............................Finished to send 1 packets.
.............*
Received 44 packets, got 1 answers, remaining 0 packets
(&lt;Results: TCP:0 UDP:1 ICMP:0 Other:0&gt;, &lt;Unanswered: TCP:0 UDP:0 ICMP:0 Other:0&gt;)
&gt;&gt;&gt; ans = _[0]
&gt;&gt;&gt; ans.summary()
IP / UDP / DNS Qry "stackoverflow.com"  ==&gt; IP / UDP / DNS Ans "64.34.119.12"
</snippet></ROW><ROW><id>5362749</id><snippet>scapy</snippet></ROW><ROW><id>5362749</id><snippet>/</snippet></ROW><ROW><id>5362917</id><snippet>close()</snippet></ROW><ROW><id>5362917</id><snippet>file</snippet></ROW><ROW><id>5362917</id><snippet>open()</snippet></ROW><ROW><id>5362917</id><snippet>close()</snippet></ROW><ROW><id>5362917</id><snippet>with</snippet></ROW><ROW><id>5362917</id><snippet>close()</snippet></ROW><ROW><id>5362917</id><snippet>with open('myfile') as f:
    # use the file
# when you get back out to this level of code, the file is closed
</snippet></ROW><ROW><id>5362923</id><snippet>from collections import defaultdict

listone = [
    {'unit1': {'test1': 10}},
    {'unit1': {'test2': 45}}, 
    {'unit2': {'test1': 78}}, 
    {'unit2': {'test2': 2}}
]

listtwo = [
    {'unit1': {'test1': 56}},
    {'unit1': {'test2': 34}}, 
    {'unit2': {'test1': 23}}, 
    {'unit2': {'test2': 5}}
]

def dictify(lst):
    res = defaultdict(lambda: defaultdict(int))
    for entry in lst:
        for unit,testentry in entry.iteritems():
            for test,val in testentry.iteritems():
                res[unit][test] = val
    return res
    # returns dict['unitX']['testY'] = val

def genDeltas(dictA, dictB):
    units = dictA.keys()
    units.sort()
    tests = dictA[units[0]].keys()
    tests.sort()
    for unit in units:
        _A = dictA[unit]
        _B = dictB[unit]
        for test in tests:
            yield unit,test,(_B[test]-_A[test])

for unit,test,delta in genDeltas(dictify(listone),dictify(listtwo)):
    print "{0}, {1}, {2}".format(unit,test,delta)
</snippet></ROW><ROW><id>5362923</id><snippet>class Avg(object):
    def __init__(self, total=0.0, num=0):
        super(Avg,self).__init__()
        self.total = total
        self.num   = num

    def add(self, value):
        self.total += value
        self.num   += 1

    def value(self):
        return self.total / self.num

def avgBy(data, field=0):
    res = defaultdict(Avg)
    for unit,testdict in data.iteritems():
        for test,val in testdict.iteritems():
            res[(unit,test)[field]].add(val)
    return {item:avg.value() for item,avg in res.iteritems()}

dictone = dictify(listone)
avg_by_unit = avgBy(dictone, 0)
print(avg_by_unit)
avg_by_test = avgBy(dictone, 1)
print(avg_by_test)
</snippet></ROW><ROW><id>5362936</id><snippet>site-packages/reportlab/platypus/doctemplate.py</snippet></ROW><ROW><id>5363200</id><snippet>self.countStr = StringVar()
self.countStr.set(str(self.count))
Label(self.countFrame, textvariable=self.countStr).pack(side=RIGHT, padx=5)
</snippet></ROW><ROW><id>5363496</id><snippet>django.forms.util</snippet></ROW><ROW><id>5363724</id><snippet>form</snippet></ROW><ROW><id>5363724</id><snippet>{{ form }}</snippet></ROW><ROW><id>5363724</id><snippet>{{ form.username }}</snippet></ROW><ROW><id>5364017</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class TestSortFilterProxyModel(QtGui.QSortFilterProxyModel):
    def __init__(self, parent=None):
        super(TestSortFilterProxyModel, self).__init__(parent)
        self.filter = ['folder0/file0', 'folder1/file1'];

    def filterAcceptsRow(self, source_row, source_parent):
        index0 = self.sourceModel().index(source_row, 0, source_parent)
        filePath = self.sourceModel().filePath(index0) 

        for folder in self.filter:
            if filePath.startsWith(folder) or QtCore.QString(folder).startsWith(filePath):
                return True;        
        return False    

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        model = QtGui.QFileSystemModel(self)
        model.setRootPath(QtCore.QDir.currentPath())

        proxy = TestSortFilterProxyModel(self)
        proxy.setSourceModel(model)     

        self.view = QtGui.QTreeView()
        self.view.setModel(proxy)

        self.setCentralWidget(self.view)

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5364345</id><snippet>from functools import partial

self.connect(self.Option1,SIGNAL("clicked()"), partial(self.myFunction, 1))
self.connect(self.Option2,SIGNAL("clicked()"), partial(self.myFunction, 2))
self.connect(self.Option3,SIGNAL("clicked()"), partial(self.myFunction, 3))
</snippet></ROW><ROW><id>5364596</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import wnck

screen = wnck.screen_get_default()
while gtk.events_pending():
    gtk.main_iteration()

windows = screen.get_windows()
print (windows)
</snippet></ROW><ROW><id>5364596</id><snippet>** (so-wnck.py:2367): WARNING **: Trying to register gtype 'WnckWindowState' as enum when in fact it is of type 'GFlags'

** (so-wnck.py:2367): WARNING **: Trying to register gtype 'WnckWindowActions' as enum when in fact it is of type 'GFlags'

** (so-wnck.py:2367): WARNING **: Trying to register gtype 'WnckWindowMoveResizeMask' as enum when in fact it is of type 'GFlags'
[&lt;wnck.Window object at 0xb7566694 (WnckWindow at 0x97c51f8)&gt;,
 &lt;wnck.Window object at 0xb75666bc (WnckWindow at 0x97c52a0)&gt;, 
 &lt;wnck.Window object at 0xb75666e4 (WnckWindow at 0x97c5348)&gt;, 
 &lt;wnck.Window object at 0xb756670c (WnckWindow at 0x97c53f0)&gt;, 
 &lt;wnck.Window object at 0xb7566734 (WnckWindow at 0x97c5498)&gt;,
 &lt;wnck.Window object at 0xb756675c (WnckWindow at 0x97c5540)&gt;, 
 &lt;wnck.Window object at 0xb7566784 (WnckWindow at 0x97c55e8)&gt;]
</snippet></ROW><ROW><id>5364844</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>5364844</id><snippet>setup.py</snippet></ROW><ROW><id>5364844</id><snippet>setup.py</snippet></ROW><ROW><id>5364844</id><snippet>    install_requires = [
        'django-profiles',
        'django-uni-forms',
    ],
</snippet></ROW><ROW><id>5364844</id><snippet>pip</snippet></ROW><ROW><id>5365059</id><snippet>Listed Company's English Name,Listed Company's Chinese Name,Stock Code,Listing Status,Director's English Name,Director's Chinese Name,Capacity,Position,Appointment Date (yyyy-mm-dd),Resignation Date (yyyy-mm-dd)  
C.P. Lotus Corporation,________,00122,Current,CHEARAVANONT Dhanin,___,Executive Director,,2009-12-31,
C.P. Lotus Corporation,________,00121,Current,CHEARAVANON Narong,___,Executive Director,,2001-02-01,  
C.P. Lotus Corporation,________,00121,Current,CHEARAVANONT Soopakij,___,Executive Director,CEO,2000-04-14,  
C.P. Lotus Corporation,________,00123,Current,DEANINO James,___,Pilot,,2009-06-25,
C.P. Lotus Corporation,________,00129,Current,GINGE Ivy,___,Dental Technician,,2010-07-27,
C.P. Lotus Corporation,________,00127,Current,ERATOR Jane,___,Engineer,,2005-12-04,
C.P. Lotus Corporation,________,00119,Current,FIELD Mary,___,Pastrycook,,2009-06-25,
</snippet></ROW><ROW><id>5365059</id><snippet>Listed Company's English Name,Listed Company's Chinese Name,Stock Code,Listing Status,Director's English Name,Director's Chinese Name,Capacity,Position,Appointment Date (yyyy-mm-dd),Resignation Date (yyyy-mm-dd)  
C.P. Lotus Corporation,________,00133,Current,THOMPSON Sarah,___,Cosmonaut,,2004-01-20,
C.P. Lotus Corporation,________,00122,Current,CHEARAVANONT Dhanin,___,Executive Director,,2009-12-31,
C.P. Lotus Corporation,________,00121,Current,CHEARAVANON Narong,___,Executive Director,,2001-02-01,  
C.P. Lotus Corporation,________,00121,Current,BEARD Sophia,___,Executive Director,CEO,2010-04-26,   
C.P. Lotus Corporation,________,00127,Current,ERATOR Jane,___,Engineer,,2005-12-04,
C.P. Lotus Corporation,________,00129,Current,MISTOUKI Hassan,___,Folk Singer,,2010-07-27,
</snippet></ROW><ROW><id>5365059</id><snippet>import csv

mas = csv.reader(open('master.csv','rb'))
upd = csv.reader(open('update.csv','rb'))

set24 = set((row[2],row[4]) for row in mas)
print set24
print

updkept = [ row for row in upd if (row[2],row[4]) not in set24]
print '\n'.join(map(str,updkept))
</snippet></ROW><ROW><id>5365059</id><snippet>set([('00127', 'ERATOR Jane'), ('00121', 'CHEARAVANONT Soopakij'), ('00121', 'CHEARAVANON Narong'), ('00119', 'FIELD Mary'), ('00122', 'CHEARAVANONT Dhanin'), ('Stock Code', "Director's English Name"), ('00129', 'GINGE Ivy'), ('00123', 'DEANINO James')])

['C.P. Lotus Corporation', '________', '00133', 'Current', 'THOMPSON Sarah', '___', 'Cosmonaut', '', '2004-01-20', '']
['C.P. Lotus Corporation', '________', '00121', 'Current', 'BEARD Sophia', '___', 'Executive Director', 'CEO', '2010-04-26', '   ']
['C.P. Lotus Corporation', '________', '00129', 'Current', 'MISTOUKI Hassan', '___', 'Folk Singer', '', '2010-07-27', '']
</snippet></ROW><ROW><id>5365141</id><snippet>class Employee(db.Model):
    name = db.StringProperty()
</snippet></ROW><ROW><id>5365141</id><snippet>def jack_chan_in_employee():
    query = Employee.all()
    count = query.filter('name =', 'Jacky Chan').count()
    return count
</snippet></ROW><ROW><id>5365156</id><snippet>data[0]</snippet></ROW><ROW><id>5365241</id><snippet>john; 1; 2; 3; 4
pete; 5; 4; 3; 2
joan; 9; 8; 7; 6
</snippet></ROW><ROW><id>5365241</id><snippet>with open('surf.txt', 'rb') as fp:
 for line in fp.readlines():
  tokens = line.strip().split(';') # this creates a list of strings
  name = tokens[0] # extract the first (left-most) string (the name)
  nums = [float(k) for k in tokens[1:]] # convert strings to floats
  mean = sum(nums) / len(nums) # compute the arithmetic mean
  print "%s has a mean of %f" % (name, mean) # print the result
</snippet></ROW><ROW><id>5365533</id><snippet>import sqlite3
import re

def regexp(expr, item):
    reg = re.compile(expr)
    return reg.search(item) is not None

conn = sqlite3.connect(':memory:')
conn.create_function("REGEXP", 2, regexp)
cursor = conn.cursor()
cursor.execute('CREATE TABLE foo (bar TEXT)')
cursor.executemany('INSERT INTO foo (bar) VALUES (?)',[('aaa"test"',),('blah',)])
cursor.execute('SELECT bar FROM foo WHERE bar REGEXP ?',['"test"'])
data=cursor.fetchall()
print(data)
</snippet></ROW><ROW><id>5365533</id><snippet>[(u'aaa"test"',)]
</snippet></ROW><ROW><id>5365547</id><snippet>class Store(db.Model):
    pass
</snippet></ROW><ROW><id>5365547</id><snippet>count</snippet></ROW><ROW><id>5365547</id><snippet>a = db.GqlQuery('SELECT * FROM Store WHERE count = True').count()
</snippet></ROW><ROW><id>5365733</id><snippet>sys.modules[__name__] = _test()</snippet></ROW><ROW><id>5365733</id><snippet>class _test(object): pass

import sys
print sys.modules['__main__']
# &lt;module '__main__' from 'test.py'&gt;  &lt;&lt;&lt; the test.py is the name of this module
sys.modules[__name__] = _test()
# Which is the same as doing sys.modules['__main__'] = _test() but wait a
# minute isn't sys.modules['__main__'] was referencing to this module so
# Oops i just overwrite this module entry so this module will be deleted
# it's like if i did:
#
#   import test
#   __main__ = test
#   del test
#   __main__ = _test()
#   test will be deleted because the only reference for it was __main__ in
#   that point.

print sys, __name__
# None, None

import sys   # i should re import sys again.
print sys.modules['__main__']
# &lt;__main__._test instance at 0x7f031fcb5488&gt;  &lt;&lt;&lt; my new module reference.
</snippet></ROW><ROW><id>5365733</id><snippet>class _test(object): pass

import sys
ref = sys.modules['__main__']   # i will create another reference of this module.
sys.modules[__name__] = _test()   # Now it get overwrite but it will not be
                                  # delete because i still have a reference
                                  # to it ref.

print __name__, _test
# __main__ &lt;class '__main__._test'&gt;
</snippet></ROW><ROW><id>5365762</id><snippet>_</snippet></ROW><ROW><id>5365762</id><snippet>_siftdown</snippet></ROW><ROW><id>5366017</id><snippet>from collections import defaultdict

flags = defaultdict(lambda : None)
flags.update({'F1':True,'F3':True,'F8':True})

for f in 'F1 F2 F3 F4 F5 F6 F7 F8'.split():
    print f, '-&gt;', flags[f]
</snippet></ROW><ROW><id>5366017</id><snippet>F1 -&gt; True
F2 -&gt; None
F3 -&gt; True
F4 -&gt; None
F5 -&gt; None
F6 -&gt; None
F7 -&gt; None
F8 -&gt; True
</snippet></ROW><ROW><id>5366089</id><snippet>for i in str</snippet></ROW><ROW><id>5366089</id><snippet>for i in str:
    if i in c:
</snippet></ROW><ROW><id>5366263</id><snippet>class Event(models.Model):
    title = models.CharField(max_length=200)

class Person(models.Model):
    name = models.CharField(max_length=30)

class Article(models.Model):
    title = models.CharField(max_length=200)
    publishDate = models.DateTimeField(blank=True, null=True)
    event = models.ForeignKey(Event, related_name='articles')
    persons = models.ManyToManyField(Person, related_name='articles')
</snippet></ROW><ROW><id>5366263</id><snippet>id</snippet></ROW><ROW><id>5366263</id><snippet>event</snippet></ROW><ROW><id>5366263</id><snippet>persons</snippet></ROW><ROW><id>5366263</id><snippet>Article</snippet></ROW><ROW><id>5366263</id><snippet>related_name</snippet></ROW><ROW><id>5366263</id><snippet>event.articles</snippet></ROW><ROW><id>5366263</id><snippet>person.articles</snippet></ROW><ROW><id>5366263</id><snippet>Event.objects.filter(articles__publishDate__gt=dateStart)\
             .filter(articles__publishDate__lt=dateEnd)\
             .annotate(count=Count('articles')).order_by('-count')

Person.objects.filter(articles__publishDate__gt=dateStart)\
              .filter(articles__publishDate__lt=dateEnd)\
              .annotate(count=Count('articles')).order_by('-count')
</snippet></ROW><ROW><id>5366398</id><snippet>a = Analysis(['main.py'])
excluded = ['myfile0.py', 'myfile1.py', 'myfile2.py']
a.scripts = [script from script in a.scripts if script not in excluded]
pyz = PYZ(a.pure)
exe = EXE(a.scripts, pyz, name="main.exe", exclude_binaries=1)
dist = COLLECT(exe, a.binaries, excluded, name="dist")
</snippet></ROW><ROW><id>5366503</id><snippet>f=open("studentname.txt", 'r')
f2=open ("student-firstname.txt",'w')

for line in f.readlines():
     token=line.split()
     f2.write(token[1]+"\n")
f.close()
f2.close()
</snippet></ROW><ROW><id>5366537</id><snippet>re.sub(r"([a-z\.!?])([A-Z])", r"\1 \2", your_string)
</snippet></ROW><ROW><id>5366537</id><snippet>import re
lines = "I like bananasAnd this is a new line.And another one."
print re.sub(r"([a-z\.!?])([A-Z])", r"\1 \2", lines)
# I like bananas And this is a new line. And another one.
</snippet></ROW><ROW><id>5366537</id><snippet>r"\1\n\2"</snippet></ROW><ROW><id>5366782</id><snippet>&gt; printShardingStatus
function (configDB, verbose) {
   if (configDB === undefined) {
       configDB = db.getSisterDB("config");
   }
   var version = configDB.getCollection("version").findOne();
   if (version == null) {
       print("not a shard db!");
       return;
   }
   var raw = "";
   var output = function (s) {raw += s + "\n";};
   output("--- Sharding Status --- ");
   output("  sharding version: " +
   ...
</snippet></ROW><ROW><id>5366980</id><snippet>class MyModelForm(ModelForm):
    class Meta:
         model = Foo
         exclude = ('myfield',)
</snippet></ROW><ROW><id>5366980</id><snippet>commit=False</snippet></ROW><ROW><id>5366980</id><snippet>entity = data.save(commit=False)
entity.user_reported_boolean = True # False, whatever.
entity.save()
</snippet></ROW><ROW><id>5367025</id><snippet>resize</snippet></ROW><ROW><id>5367025</id><snippet>import Image

theFile = "foo.png"

img = Image.open(theFile)
resized = img.resize((75,75))
r, g, b, alpha = resized.split()

newImage = Image.new(resized.mode, resized.size, "black")
newImage.paste(resized, mask=alpha)
newImage.save("out.png")

print "Done"
</snippet></ROW><ROW><id>5367025</id><snippet>split</snippet></ROW><ROW><id>5367025</id><snippet>mask</snippet></ROW><ROW><id>5367433</id><snippet>Pred_XXXX(liLn)</snippet></ROW><ROW><id>5367433</id><snippet>di_eqns</snippet></ROW><ROW><id>5367433</id><snippet>liLn</snippet></ROW><ROW><id>5367433</id><snippet>get()</snippet></ROW><ROW><id>5367433</id><snippet>Pred_XXXX()</snippet></ROW><ROW><id>5367433</id><snippet>di_eqns = {"PSME":Pred_PSME, "ABAM":Pred_ABAM,
           "ABCO":Pred_Abies, "ABGR":Pred_Abies,
           "ABLA":Pred_Abies, "ABMA":Pred_Abies,
           "ABSH":Pred_Abies, "ABPR":Pred_ABPR,
           "CADE27":Pred_Cedar, "CHLA":Pred_Cedar,
           "CHNO":Pred_Cedar, "THPL":Pred_Cedar,
           "LALY":Pred_LALY, "LAOC":Pred_LAOC,
           "PIEN":Pred_PIEN, "PISI":Pred_PISI,
           "PIAL":Pred_Pinus, "PIJE":Pred_Pinus,
           "PIMO3":Pred_Pinus, "PICO":Pred_PICO,
           "PILA":Pred_PILA, "PIPO":Pred_PIPO,
           "TSHE":Pred_TSHE, "TSME":Pred_TSME,
           "JUOC":Pred_JUOC, "TABR":Pred_TSHE,
           "ALRU2":Pred_ALRU2, "ACCI":Pred_SMBGr,
           "ACGL":Pred_SMBGr, "ACMA3":Pred_ACMA3,
           "CONU4":Pred_ACMA3, "ALRH2":Pred_AACWGr,
           "SASC":Pred_AACWGr, "SALIX":Pred_AACWGr,
           "ARME":Pred_ARME, "BEPA":Pred_BEPA,
           "BEPAC":Pred_BEPA, "CHCH7":Pred_CHCH7,
           "FRLA":Pred_MHGr, "PREM":Pred_MHGr,
           "PRVI":Pred_MHGr, "PRUNU":Pred_MHGr,
           "LIDE3":Pred_LIDE3, "POBAT":Pred_POBAT,
           "POTR5":Pred_POTR5, "QUCH2":Pred_QUCH2,
           "QUGA4":Pred_QUGA4, "QUKE":Pred_QUKE,
           "UMCA":Pred_UMCA}

try: li_pred = di_eqns.get(liLn[2])(liLn)
</snippet></ROW><ROW><id>5367611</id><snippet>pickle</snippet></ROW><ROW><id>5367748</id><snippet>sorted</snippet></ROW><ROW><id>5367748</id><snippet>class Dummy(object) :
    pass

def getPrice(obj) :
    return obj.price

d0 = Dummy()
d0.price = 56.
d1 = Dummy()
d1.price=16.

d2 = Dummy()
d2.price=786.

d3 = Dummy()
d3.price=5.5

elements = [d0, d1, d2, d3]

print 'Pre-sorting:'
for elem in elements :
    print elem.price

sortedElements = sorted(elements, key=getPrice)

print 'Post-sorting:'
for elem in sortedElements :
    print elem.price
</snippet></ROW><ROW><id>5367748</id><snippet>class Dummy(object) :
    def __init__(self, price) :
        self._price = price
    def getPrice(self) :
        return self._price

...

sortedElements = sorted(elements, key = Dummy.getPrice)
</snippet></ROW><ROW><id>5367797</id><snippet>python-gdal</snippet></ROW><ROW><id>5367797</id><snippet>django.contrib.gis.gdal</snippet></ROW><ROW><id>5367797</id><snippet>DataSource</snippet></ROW><ROW><id>5367797</id><snippet>python-django</snippet></ROW><ROW><id>5367797</id><snippet>python-gdal</snippet></ROW><ROW><id>5367797</id><snippet>django/contrib/gis/gdal/libgdal.py</snippet></ROW><ROW><id>5367797</id><snippet>GDAL_LIBRARY_PATH</snippet></ROW><ROW><id>5367884</id><snippet>__init__</snippet></ROW><ROW><id>5367884</id><snippet>__init__</snippet></ROW><ROW><id>5367884</id><snippet>__init__</snippet></ROW><ROW><id>5367884</id><snippet>directlyProvides</snippet></ROW><ROW><id>5367884</id><snippet>classProvides</snippet></ROW><ROW><id>5367884</id><snippet>moduleProvides</snippet></ROW><ROW><id>5367884</id><snippet>__call__</snippet></ROW><ROW><id>5367884</id><snippet>from zope import interface

class ITest(interface.Interface):
    required_attribute = interface.Attribute(
        """A required attribute for classes implementing this interface.""")
    def required_method():
        """A required method for classes implementing this interface."""

class ITestFactory(interface.Interface):
    """Creates objects providing the ITest interface"""
    def __call__(a, b):
        """Takes two parameters"""

class Test(object):
    interface.implements(ITest)
    interface.classProvides(ITestFactory)

    def __init__(self, a, b):
        self.required_attribute = a*b

    def required_method():
        return self.required_attribute
</snippet></ROW><ROW><id>5367884</id><snippet>zope.component</snippet></ROW><ROW><id>5367884</id><snippet>getInterfaces</snippet></ROW><ROW><id>5367884</id><snippet>IFactory</snippet></ROW><ROW><id>5367884</id><snippet>__init__</snippet></ROW><ROW><id>5367884</id><snippet>from zope import component

class ITestFactory(component.interfaces.IFactory):
    """Creates objects providing the ITest interface"""
    def __call__(a, b):
        """Takes two parameters"""

testFactory = component.Factory(Test, 'ITest Factory', ITestFactory.__doc__)
interface.directlyProvides(testFactory, ITestFactory)
</snippet></ROW><ROW><id>5367884</id><snippet>zope.component</snippet></ROW><ROW><id>5367884</id><snippet>zope.interface.directlyProvides</snippet></ROW><ROW><id>5367884</id><snippet>zope.component.Factory</snippet></ROW><ROW><id>5367884</id><snippet>IFactory</snippet></ROW><ROW><id>5368194</id><snippet>autofunction</snippet></ROW><ROW><id>5368194</id><snippet>.. automodule:: yourmodule
   :members:
   :exclude-members: funcname

.. autofunction:: funcname(arg1[, arg2[, ...]])
</snippet></ROW><ROW><id>5368194</id><snippet>automodule</snippet></ROW><ROW><id>5368194</id><snippet>autofunction</snippet></ROW><ROW><id>5368194</id><snippet>.. autofunction:: firstfunc

.. autofunction:: funcname(arg1[, arg2[, ...]])

.. autofunction:: thirdfunc
</snippet></ROW><ROW><id>5368194</id><snippet>.. autofunction:: funcname(arg1[, arg2[, ...]])

   Extra documentation here.  
</snippet></ROW><ROW><id>5368194</id><snippet>function</snippet></ROW><ROW><id>5368194</id><snippet>autofunction</snippet></ROW><ROW><id>5368498</id><snippet>http://south.aeracode.org/</snippet></ROW><ROW><id>5369264</id><snippet>tileType = map[x][y].tileType</snippet></ROW><ROW><id>5369264</id><snippet>TypeError: 'builtin_function_or_method' object is unsubscriptable 
</snippet></ROW><ROW><id>5369264</id><snippet>NameError</snippet></ROW><ROW><id>5369375</id><snippet>.itervalues()</snippet></ROW><ROW><id>5369375</id><snippet>.iteritems()</snippet></ROW><ROW><id>5369375</id><snippet>iter</snippet></ROW><ROW><id>5369375</id><snippet>.values()</snippet></ROW><ROW><id>5369375</id><snippet>.items()</snippet></ROW><ROW><id>5369375</id><snippet>iter</snippet></ROW><ROW><id>5369375</id><snippet>next</snippet></ROW><ROW><id>5369375</id><snippet>for i in iterable</snippet></ROW><ROW><id>5369375</id><snippet>iter(iterable)</snippet></ROW><ROW><id>5369379</id><snippet>children</snippet></ROW><ROW><id>5369379</id><snippet>question</snippet></ROW><ROW><id>5369379</id><snippet>node</snippet></ROW><ROW><id>5369379</id><snippet>marked</snippet></ROW><ROW><id>5369431</id><snippet>vec2.h</snippet></ROW><ROW><id>5369431</id><snippet>dot</snippet></ROW><ROW><id>5369431</id><snippet>normalize</snippet></ROW><ROW><id>5369431</id><snippet>static</snippet></ROW><ROW><id>5369431</id><snippet>Vec2&lt;int&gt; &amp;(Vec2&lt;int&gt;::*norm)() = &amp;Vec2&lt;int&gt;::normalize;
</snippet></ROW><ROW><id>5369431</id><snippet>def</snippet></ROW><ROW><id>5369452</id><snippet>answered = Question.objects.filter(children__marked=True).distinct()
unanswered = Question.objects.exclude(id__in=answered) 
upvoted = Question.objects.filter(children__score__gt=0).distinct()
return unanswered | upvoted
</snippet></ROW><ROW><id>5369602</id><snippet>import wx
import thread
from time import sleep

class MainFrame(wx.Frame):

    def __init__(self, parent):
        wx.Frame.__init__(self, parent)

        self.label = wx.StaticText(self, label="Ready")
        self.btn = wx.Button(self, label="Start")
        self.gauge = wx.Gauge(self)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.label, proportion=1, flag=wx.EXPAND)
        sizer.Add(self.btn, proportion=0, flag=wx.EXPAND)
        sizer.Add(self.gauge, proportion=0, flag=wx.EXPAND)

        self.SetSizerAndFit(sizer)

        self.Bind(wx.EVT_BUTTON, self.onButton)

    def onButton(self, evt):
        self.btn.Enable(False)
        self.gauge.SetValue(0)
        self.label.SetLabel("Running")
        thread.start_new_thread(self.longRunning, ())

    def onLongRunDone(self):
        self.gauge.SetValue(100)
        self.label.SetLabel("Done")
        self.btn.Enable(True)

    def longRunning(self):
        """This runs in a different thread.  Sleep is used to simulate a long running task."""
        sleep(3)
        wx.CallAfter(self.gauge.SetValue, 20)
        sleep(5)
        wx.CallAfter(self.gauge.SetValue, 50)
        sleep(1)
        wx.CallAfter(self.gauge.SetValue, 70)
        sleep(10)
        wx.CallAfter(self.onLongRunDone)

if __name__ == "__main__":
    app = wx.PySimpleApp()
    app.TopWindow = MainFrame(None)
    app.TopWindow.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>5369814</id><snippet>from collections import defaultdict
class Tree(defaultdict):
    def __init__(self, value=None):
        super(Tree, self).__init__(Tree)
        self.value = value

root = Tree()
root.value = 1
root['a']['b'].value = 3
print root.value
print root['a']['b'].value
print root['c']['d']['f'].value
</snippet></ROW><ROW><id>5369814</id><snippet>1
3
None
</snippet></ROW><ROW><id>5369814</id><snippet>json.load</snippet></ROW><ROW><id>5370200</id><snippet>inputstring.decode("utf8", "replace")
</snippet></ROW><ROW><id>5370278</id><snippet>fcntl.flock()</snippet></ROW><ROW><id>5370278</id><snippet>fcntl.lockf()</snippet></ROW><ROW><id>5370580</id><snippet>data = [['hoose', 200],
        ["Bananphone", 10],
        ['House', 200],
        ["Bonerphone", 10],
        ['UniqueValue', 777]]

already_merged = []

for word, score in data:
    added_to_existing = False
    for merged in already_merged:
        for potentially_similar in merged[0]:
            if levenshtein(word, potentially_similar) &lt; 5:
                merged[0].add(word)
                merged[1] += score
                added_to_existing = True
                break
        if added_to_existing:
            break
    if not added_to_existing:
        already_merged.append([set([word]),score])

print already_merged
</snippet></ROW><ROW><id>5370580</id><snippet>[[set(['House', 'hoose']), 400], [set(['Bonerphone', 'Bananphone']), 20], [set(['UniqueValue']), 777]]
</snippet></ROW><ROW><id>5370701</id><snippet>tar xzf jpegsrc.v8c.tar.gz 
cd jpeg*
./configure
make
sudo make install
</snippet></ROW><ROW><id>5370701</id><snippet>tar xjf freetype-2.4.4.tar.bz2
cd free*
./configure
make
sudo make install
</snippet></ROW><ROW><id>5370701</id><snippet>tar xzf lcms-1.19.tar.gz
cd lcms*
./configure
make
sudo make install
</snippet></ROW><ROW><id>5370701</id><snippet>ARCHFLAGS="-arch i386 -arch x86_64" sudo pip install PIL
</snippet></ROW><ROW><id>5370701</id><snippet>ARCHFLAGS="-arch i386 -arch x86_64" pip install PIL
</snippet></ROW><ROW><id>5370777</id><snippet>SELECT id FROM papers 
WHERE MATCH (title,booktitle,journal) AGAINST ('nFOIL: integrating Naïve Bayes and FOIL' IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION);
</snippet></ROW><ROW><id>5370800</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>5370800</id><snippet>django.middleware.csrf.CsrfViewMiddleware</snippet></ROW><ROW><id>5371250</id><snippet>partial               full
--------------------  --------------------
svr                   server
srv                   server
SRV                   Stevie Ray Vaughan
office                Microsoft Office
etc                   et cetera
</snippet></ROW><ROW><id>5371250</id><snippet>for each row of manual inventory excel worksheet:
    product = sh.Cells(row, 1) # get contents of row n, column 1
                               # adjust based on the structure of this sheet

    parts = product.split(" ") # split on spaces into a list

    for n, part in enumerate(parts):
        parts[n] = Normalize(part) # look up part in conversion table
    normalProduct = " ".join(parts)

    if LookupProduct(normalProduct): # look up normalized name in LANdesk list
        add to compliant list
    else:
        add to non-compliant list

if len(non-compliant list) &gt; 0:
    TimeForShopping(non-compliant list)
</snippet></ROW><ROW><id>5371831</id><snippet>&gt;&gt;&gt; from django.forms.models import model_to_dict
&gt;&gt;&gt; from django.contrib.auth.models import Group
&gt;&gt;&gt; g = Group.objects.filter()[0]
&gt;&gt;&gt; d = model_to_dict(g)
&gt;&gt;&gt; d
{'permissions': [40, 41, 42, 46, 47, 48, 50, 43, 44, 45, 31, 32, 33, 34, 35, 36, 37, 38, 39], 'id': 1, 'name': u'Managers'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5371831</id><snippet>_meta</snippet></ROW><ROW><id>5371831</id><snippet>model_to_dict</snippet></ROW><ROW><id>5371831</id><snippet>django-piston</snippet></ROW><ROW><id>5371831</id><snippet>emitters</snippet></ROW><ROW><id>5371831</id><snippet>BaseEmitter.construct()</snippet></ROW><ROW><id>5371831</id><snippet>DictionaryEmitter</snippet></ROW><ROW><id>5371960</id><snippet>check = "asdf"
checkLower = check.lower()

print any(checkLower == val.lower() for val in ["qwert", "AsDf"])

# prints true
</snippet></ROW><ROW><id>5371996</id><snippet>document.getElementById("country").value = geoip_country_name()
document.getElementById("city").value = geoip_city()
</snippet></ROW><ROW><id>5372331</id><snippet>movie_dicts = [
    {'title':'A Boy and His Dog', 'year':1975, 'rating':6.6},
    {'title':'Ran', 'year':1985, 'rating': 8.3},
    {'title':'True Grit', 'year':2010, 'rating':8.0},
    {'title':'Scanners', 'year':1981, 'rating': 6.7}
]

title_year = [(i['title'],i['year']) for i in movie_dicts]
</snippet></ROW><ROW><id>5372331</id><snippet>[('A Boy and His Dog', 1975),
 ('Ran', 1985),
 ('True Grit', 2010),
 ('Scanners', 1981)]
</snippet></ROW><ROW><id>5372331</id><snippet>import operator
fields = operator.itemgetter('title','year')
title_year = [fields(i) for i in movie_dicts]
</snippet></ROW><ROW><id>5372602</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>5372638</id><snippet>mask='auto'</snippet></ROW><ROW><id>5372638</id><snippet>c.drawImage("./media/files/1.png", 0, 600, 350, 350, mask='auto')
</snippet></ROW><ROW><id>5372679</id><snippet>href</snippet></ROW><ROW><id>5372679</id><snippet>for link in entry.link:
    print link.href
</snippet></ROW><ROW><id>5372780</id><snippet>setup.py</snippet></ROW><ROW><id>5372780</id><snippet>/usr/local/lib/python2.X/site-packages</snippet></ROW><ROW><id>5372908</id><snippet>addstr</snippet></ROW><ROW><id>5372908</id><snippet>main</snippet></ROW><ROW><id>5373241</id><snippet>import tkFileDialog
import csv

ENCODING_REGEX_REPLACEMENT_LIST = [(re.compile('\xe2\x80\x99'), "'"),
                                   (re.compile('\xe2\x80\x94'), "--"),
                                   (re.compile('\xe2\x80\x9c'), '"'),
                                   (re.compile('\xe2\x80\x9d'), '"'),
                                   (re.compile('\xe2\x80\xa6'), '...')]

def correct_encoding(csv_row):
    for key in csv_row.keys():
        # if there is a value for the current key
        if csv_row[key]:
            try:
                csv_row[key] = unicode(csv_row[key], errors='strict')
            except ValueError:
                # we have a bad encoding, try iterating through all the known
                # bad encodings in the ENCODING_REGEX_REPLACEMENT and replace
                # everything and then try again
                for (regex, replacement) in ENCODING_REGEX_REPLACEMENT_LIST:
                    csv_row[key] = regex.sub(replacement,csv_row[key])
                print(csv_row)
                csv_row[key] = unicode(csv_row[key])
        # if there is NOT a value for the current key
        else:
            csv_row[key] = unicode('')
    return csv_row

filename = tkFileDialog.askopenfilename()
csv_reader = csv.DictReader(open(filename, "rb"), dialect='excel') # assuming similar dialect
for csv_row in csv_reader:
    csv_row = correct_encoding(csv_row)
    # your application logic here
</snippet></ROW><ROW><id>5373396</id><snippet>nonlocal</snippet></ROW><ROW><id>5373396</id><snippet>foo</snippet></ROW><ROW><id>5373396</id><snippet>foo</snippet></ROW><ROW><id>5373396</id><snippet>[]</snippet></ROW><ROW><id>5373396</id><snippet>def func1():
    foo = [None]
    def func2():
        foo[0] = 'Test'
</snippet></ROW><ROW><id>5373524</id><snippet># List files in directory and upload them to bucket
for filename in all_files:
    #skip all directory entries which are not a file
    if not os.path.isfile(filename):
          continue    
    k = Key(bucket)
    k.key = os.path.basename(filename)
    k.set_contents_from_filename(filename, cb=percent_cb, num_cb=10)
</snippet></ROW><ROW><id>5373639</id><snippet>msvcrXY.dll</snippet></ROW><ROW><id>5373940</id><snippet>vertexMatrix = matrix([vertex.x,vertex.y,vertex.z,1]) 
productMatrix = (vertexMatrix * camMatrix)
pVectSS = vector(prodMatrix[0][0],prodMatrix[0][1],prodMatrix[0][2])

pointX = ((pVectSS.x/(-pVectSS.z))/tan(radians(hFOV/2)))/2.0+.5
pointY = ((pVectSS.y/(-pVectSS.z))/tan(radians(vFOV/2)))/2.0+.5
</snippet></ROW><ROW><id>5373940</id><snippet> camMatrix = camera inverse world-space matrix
 pVectSS = position vector screen-space
 hFOV = horizontal field of view
 vFOV = vertical field of view
</snippet></ROW><ROW><id>5373951</id><snippet>JOIN</snippet></ROW><ROW><id>5373951</id><snippet>user = User.all(keys_only=True).filter('account', 'Tom').get()  # only get one.
# or, build the key (if possible)
user = db.Key.from_path('User', 'tom')  # if you make 'account' the key_name

messages = Message.all().order('-created').filter("user =", user)
</snippet></ROW><ROW><id>5373951</id><snippet>class Message(db.Model):
  user = db.ReferenceProperty()
  account = StringProperty()
  text = StringProperty()
  created = DateTimeProperty(auto_now=True)

messages = Message.all().order('-created').filter("account =", 'tom')
</snippet></ROW><ROW><id>5374050</id><snippet>/Node/Node[Val[@name='number']/f='265456']/@name
</snippet></ROW><ROW><id>5374050</id><snippet>1764466544
</snippet></ROW><ROW><id>5374191</id><snippet>for item in list:
        item[1] += ' newdata'
</snippet></ROW><ROW><id>5374195</id><snippet>calc</snippet></ROW><ROW><id>5374195</id><snippet>def calc(f, a, b):
    limits = [a, b]
    integral = odeint(lambda y, x: f(x), 0, limits)

    return integral[1][0]
</snippet></ROW><ROW><id>5374195</id><snippet>&gt;&gt;&gt; calc(lambda x: x ** 2, 0, 1)    # Integrate x ** 2 over the interval [0, 1] (expected answer: 0.333...)
0.33333335809177234
&gt;&gt;&gt; calc(lambda x: x, 0, 1)         # Integrate x over the interval [0, 1] (expected answer: 0.5)
0.50000001490120016
&gt;&gt;&gt; calc(lambda x: 1, 0, 1)         # Integrate 1 over the interval [0, 1] (expected answer: 1.0)
1.0
</snippet></ROW><ROW><id>5374195</id><snippet>odeint</snippet></ROW><ROW><id>5374195</id><snippet>scipy.integrate</snippet></ROW><ROW><id>5374195</id><snippet>odeint(func, y0, t, ...)
</snippet></ROW><ROW><id>5374195</id><snippet>func</snippet></ROW><ROW><id>5374195</id><snippet>y, t0, ...</snippet></ROW><ROW><id>5374195</id><snippet>y0</snippet></ROW><ROW><id>5374195</id><snippet>t</snippet></ROW><ROW><id>5374229</id><snippet>class MyAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):

        # Set optional arguments to True or False
        if option_string:
            attr = True if values else False
            setattr(namespace, self.dest, attr)

        # Modify value of "input" in the namespace
        if hasattr(namespace, 'input'):
            current_values = getattr(namespace, 'input')
            try:
                current_values.extend(values)
            except AttributeError:
                current_values = values
            finally:
                setattr(namespace, 'input', current_values)
        else:
            setattr(namespace, 'input', values)

parser = argparse.ArgumentParser()
parser.add_argument('-a', nargs='+', action=MyAction)
parser.add_argument('-b', nargs='+', action=MyAction)
parser.add_argument('input', nargs='+', action=MyAction)
</snippet></ROW><ROW><id>5374229</id><snippet>&gt;&gt;&gt; parser.parse_args(['fileone', '-a', 'filetwo', '-b', 'filethree'])
Namespace(a=True, b=True, input=['fileone', 'filetwo', 'filethree'])
</snippet></ROW><ROW><id>5374229</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-a', nargs='+')
&gt;&gt;&gt; parser.add_argument('-b', nargs='+')
&gt;&gt;&gt; parser.add_argument('input', nargs='+')
&gt;&gt;&gt; result = parser.parse_args(['fileone', '-a', 'filetwo', '-b', 'filethree'])

&gt;&gt;&gt; inputs = []
&gt;&gt;&gt; inputs.extend(result.a)
&gt;&gt;&gt; inputs.extend(result.b)
&gt;&gt;&gt; inputs.extend(result.input)

&gt;&gt;&gt; modified = argparse.Namespace(
        a = result.a != [],
        b = result.b != [],
        input = inputs)
</snippet></ROW><ROW><id>5374229</id><snippet>&gt;&gt;&gt; modified
Namespace(a=True, b=True, input=['filetwo', 'filethree', 'fileone'])
</snippet></ROW><ROW><id>5374374</id><snippet>url = "imageurl"
result = urlfetch.fetch(url)
if result.status_code == 200:
   prof.avatar = db.Blob(result.content)
</snippet></ROW><ROW><id>5374745</id><snippet>from __future__ import with_statement # Needed in 2.5, but not in 2.6 or later

from contextlib import contextmanager

@contextmanager
def handle_exceptions():
    try:
        yield # Body of the with statement effectively runs here
    except CommonException1:
        Action_always_taken_for_CommonException1()
    except CommonException2:
        Action_always_taken_for_CommonException2()
    except Exception:
        Default_action_always_taken()

# Used as follows
with handle_exceptions():
    action_here()
</snippet></ROW><ROW><id>5375036</id><snippet>from datatrans.models import KeyValue
from datatrans.utils import get_current_language, get_default_language

digest = KeyValue.objects.get(value=slug_from_url, language=get_current_language()).digest
value = KeyValue.objects.get(digest=digest, language=get_default_language()).value

# value now contains 'hello'
myobject = MyObject.objects.get(slug=value)
</snippet></ROW><ROW><id>5375132</id><snippet>urlpatterns = patterns('',
    (r'^books/', include('books.urls')),

    (r'^admin/', include(admin.site.urls)),


    (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),
    (r'^', include('search.urls')),
)
</snippet></ROW><ROW><id>5375728</id><snippet>import timeit
import logging

def profile(func):
    def wrap(*args, **kwargs):
        started_at = time.time()
        result = func(*args, **kwargs)
        logging.info(time.time() - started_at)
        return result

    return wrap

@profile
def foo():
    pass
</snippet></ROW><ROW><id>5376146</id><snippet>main</snippet></ROW><ROW><id>5376146</id><snippet>returned_values = {}    # Create an empty dict.
def main():
    returned_values['filename'] = askopenfilename(filetypes=[("Jpeg","*.jpg")])
    # returned_values['filename'] may now be accessed in the global scope.
</snippet></ROW><ROW><id>5376573</id><snippet>setup.py build</snippet></ROW><ROW><id>5376573</id><snippet>  --compiler (-c)    specify the compiler type
  --help-compiler    list available compilers
</snippet></ROW><ROW><id>5376595</id><snippet>print list</snippet></ROW><ROW><id>5376595</id><snippet>print "[", ", ".join(repr(i) for i in list), "]"
</snippet></ROW><ROW><id>5376595</id><snippet>repr(s)</snippet></ROW><ROW><id>5376595</id><snippet>u"blabla"</snippet></ROW><ROW><id>5376595</id><snippet>print s</snippet></ROW><ROW><id>5376595</id><snippet>blabla</snippet></ROW><ROW><id>5377051</id><snippet>def run_from_ipython():
    try:
        __IPYTHON__
        return True
    except NameError:
        return False
</snippet></ROW><ROW><id>5377255</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>5377920</id><snippet>1</snippet></ROW><ROW><id>5377920</id><snippet>32 choose bits</snippet></ROW><ROW><id>5377920</id><snippet>from math import factorial
print factorial(32) // (factorial(bits) * factorial(32-bits))
</snippet></ROW><ROW><id>5378250</id><snippet>from collections import defaultdict

d1 = defaultdict(list)

for k, v in l:
    d1[k].append(v)

d = dict((k, tuple(v)) for k, v in d1.iteritems())
</snippet></ROW><ROW><id>5378250</id><snippet>d</snippet></ROW><ROW><id>5378250</id><snippet>{1: ('A', 'B'), 2: ('C',)}</snippet></ROW><ROW><id>5378250</id><snippet>d1</snippet></ROW><ROW><id>5378362</id><snippet>data = {}
data["people 1"] = {}
data["people 1"]["criteria a"] = "bla"
data["people 1"]["criteria b"] = "ble"
data["people 2"] = {}
</snippet></ROW><ROW><id>5378362</id><snippet>&gt;&gt;&gt; print data["people 1"].values()
["ble", "bla"]
</snippet></ROW><ROW><id>5378369</id><snippet>span</snippet></ROW><ROW><id>5378369</id><snippet>span=(7,3)</snippet></ROW><ROW><id>5378369</id><snippet>span=(1,4)</snippet></ROW><ROW><id>5378645</id><snippet>def windowEnumerationHandler(self, hwnd, resultList):
    '''
    This is a handler to be passed to win32gui.EnumWindows() to generate
    a list of (window handle, window text) tuples.
    '''

    resultList.append((hwnd, win32gui.GetWindowText(hwnd)))

def bringToFront(self, windowText):
    '''
    Method to look for an open window that has a title that
    matches the passed in text. If found, it will proceed to
    attempt to make that window the Foreground Window.
    '''
    secondsPassed = 0
    while secondsPassed &lt;= 5:
        # sleep one second to give the window time to appear
        wx.Sleep(1)

        print 'bringing to front'
        topWindows = []
        # pass in an empty list to be filled
        # somehow this call returns the list with the same variable name
        win32gui.EnumWindows(self.windowEnumerationHandler, topWindows)
        print len(topWindows)
        # loop through windows and find the one we want
        for i in topWindows:
            if windowText in i[1]:
                print i[1]
                win32gui.ShowWindow(i[0],5)
                win32gui.SetForegroundWindow(i[0])
        # loop for 5-10 seconds, then break or raise
        handle = win32gui.GetForegroundWindow()
        if windowText in win32gui.GetWindowText(handle):
            break
        else:
            # increment counter and loop again                
            secondsPassed += 1
</snippet></ROW><ROW><id>5379070</id><snippet>page.contents</snippet></ROW><ROW><id>5379070</id><snippet>Content</snippet></ROW><ROW><id>5379070</id><snippet>select_related()</snippet></ROW><ROW><id>5379694</id><snippet>sqlite&gt; create table x(a,b,c,d);
sqlite&gt; insert into x values(1, 10, 2, null);
sqlite&gt; insert into x values(2, 10, 3, null); 
sqlite&gt; insert into x values(3, 10, 4, null);
</snippet></ROW><ROW><id>5379694</id><snippet>&gt;&gt;&gt; ids = [2, 3]
&gt;&gt;&gt; query = "SELECT b, c, d FROM x WHERE a IN ({0}) AND b &gt; 5 ORDER BY c".format(','.join('?' for i in ids))
&gt;&gt;&gt; query
'SELECT b, c, d FROM x WHERE a IN (?,?) AND b &gt; 5 ORDER BY c'
&gt;&gt;&gt; conn.execute(query, ids).fetchall()
[(10, 3, None), (10, 4, None)] 
</snippet></ROW><ROW><id>5379842</id><snippet>from elementtree.SimpleXMLWriter import XMLWriter
import sys

w = XMLWriter(sys.stdout)

html = w.start("html")

w.start("head")
w.element("title", "my document")
w.element("meta", name="generator", value="my application 1.0")
w.end()

w.start("body")
w.element("h1", "this is a heading")
w.element("p", "this is a paragraph")

w.start("p")
w.data("this is ")
w.element("b", "bold")
w.data(" and ")
w.element("i", "italic")
w.data(".")
w.end("p")

w.close(html)
</snippet></ROW><ROW><id>5379916</id><snippet>repr(1.3)</snippet></ROW><ROW><id>5379916</id><snippet>'1.3'</snippet></ROW><ROW><id>5379916</id><snippet>repr(1.33)</snippet></ROW><ROW><id>5379916</id><snippet>'1.3300000000000001'</snippet></ROW><ROW><id>5379916</id><snippet>x.astype('str')</snippet></ROW><ROW><id>5379916</id><snippet>x = np.array(1.344566)</snippet></ROW><ROW><id>5379916</id><snippet>x.astype('str')</snippet></ROW><ROW><id>5379916</id><snippet>'1'</snippet></ROW><ROW><id>5379916</id><snippet>'|Sx'</snippet></ROW><ROW><id>5379916</id><snippet>x</snippet></ROW><ROW><id>5379916</id><snippet>x.astype('|S10')</snippet></ROW><ROW><id>5380083</id><snippet>on_job_complete</snippet></ROW><ROW><id>5380083</id><snippet>send_job_complete</snippet></ROW><ROW><id>5380083</id><snippet>import gearman

def reversify(gmWorker, gmJob):
        return "".join(gmJob.data[::-1])

def enable_reversify(gmWorker, gmJob):
        myWorker.enableReversify = 1
        return 'OK'

def strcount(gmWorker, gmJob):
        myWorker.enableReversify = -1
        return str(len(gmJob.data))

class myWorker(gearman.GearmanWorker):

        enableReversify = 0 # 0 = do nothing, -1 = turn off, 1 = turn on

        def on_job_complete(self, current_job, job_result):
                self.send_job_complete(current_job, job_result)
                ### check the flag here and enable or disable tasks ###
                if myWorker.enableReversify == -1:
                        self.unregister_task('reversify')
                if myWorker.enableReversify == 1:
                        self.register_task('reversify', reversify)
                myWorker.enableReversify = 0 # reset the flag
                return True

worker = myWorker(['localhost:4730']) 
worker.register_task('reversify', reversify)
worker.register_task('strcount', strcount)
worker.register_task('enableReversify', enable_reversify)

while True:
        worker.work() 
</snippet></ROW><ROW><id>5380448</id><snippet>import os
import glob

def combine(arguments):
    all_files = []
    for arg in arguments:
        if '*' in arg or '?' in arg:
            # contains a wildcard character
            all_files.extend(glob.glob(arg))
        elif os.path.isdir(arg):
            # is a dictionary
            all_files.extend(glob.glob(os.path.join(arg, '*')))
        elif os.path.exists(arg):
            # is a file
            all_files.append(arg)
        else:
            # invalid?
            print '%s invalid' % arg
    return all_files
</snippet></ROW><ROW><id>5380692</id><snippet>&gt;&gt;&gt; dictA = {('unit1', 'test1'): 10,  ('unit2', 'test1'): 78,  ('unit2', 'test2'): 2, ('unit1', 'test2'): 45}
&gt;&gt;&gt; maxDict={}
&gt;&gt;&gt; for (unitName,testName),grade in dictA.items():
    maxDict[testName]=max(maxDict.get(testName,0),grade)


&gt;&gt;&gt; maxDict
{'test1': 78, 'test2': 45}
</snippet></ROW><ROW><id>5380736</id><snippet>struct</snippet></ROW><ROW><id>5380736</id><snippet>struct</snippet></ROW><ROW><id>5381015</id><snippet>{% extends base_template %}
</snippet></ROW><ROW><id>5381428</id><snippet>import random
out = open('foobar.txt', 'w')

total = random.randint(100000, 1e6)
out.write('%s\n' % total)

for x in xrange(total):
    out.write('%s\n' % random.randint(0, 1e6))
</snippet></ROW><ROW><id>5381428</id><snippet>time python -m cProfile -o foo.profile foo.py &lt; foobar.txt  &gt; fooout.txt &amp;&amp; gprof2dot -f pstats foo.profile | dot -Tpng -o foo_profile.png</snippet></ROW><ROW><id>5381428</id><snippet>sort -n foobar.txt &gt; foo_sorted.txt</snippet></ROW><ROW><id>5381428</id><snippet>def main()</snippet></ROW><ROW><id>5381428</id><snippet>if __name__ == '__main__': main()</snippet></ROW><ROW><id>5381428</id><snippet>import sys 

def non_decreasing(my_list):
    if len(my_list) &lt; 2:
        return my_list
    my_list.sort()
    return my_list

def main():
    LIST_ITEM = []
    NUMBER_OF_TEST_CASES = int(sys.stdin.readline().strip())

    if NUMBER_OF_TEST_CASES &gt;= 1000001 or NUMBER_OF_TEST_CASES &lt;= 0:
        sys.exit()

    for x in sys.stdin:
        x = int(x.strip())

        if x &gt;= 1000001 or x&lt;0:
            sys.exit()
        else:
            LIST_ITEM.append(x)
    values =  non_decreasing(LIST_ITEM)
    for i in values:
        print i

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5381428</id><snippet>sys.stdout.writelines([str(x) for x in values])</snippet></ROW><ROW><id>5381428</id><snippet>if x &gt;= 1000001 or x&lt;0:</snippet></ROW><ROW><id>5381428</id><snippet>for x in sys.stdin: values.append(x[:-1])</snippet></ROW><ROW><id>5381428</id><snippet>x.rstrip()</snippet></ROW><ROW><id>5381428</id><snippet>x.rstrip('\n')</snippet></ROW><ROW><id>5381428</id><snippet>values = sys.stdin.split('\n')</snippet></ROW><ROW><id>5381428</id><snippet>values = sys.stdin.read().splitlines()</snippet></ROW><ROW><id>5381428</id><snippet>values = sys.stdin.readlines()</snippet></ROW><ROW><id>5381428</id><snippet>import sys

def main():
    NUMBER_OF_TEST_CASES = int(sys.stdin.readline().strip())
    if NUMBER_OF_TEST_CASES &gt;= 1000001 or NUMBER_OF_TEST_CASES &lt;= 0:
        sys.exit()

    values = [int(x) for x in sys.stdin.readlines()]
    values.sort()
    for i in values:
        print i

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5382000</id><snippet>def save_and_exit():
    save_changed_files()
    sys.exit()

self.createcommand('exit', save_and_exit)
</snippet></ROW><ROW><id>5382001</id><snippet>Module</snippet></ROW><ROW><id>5382001</id><snippet>Module</snippet></ROW><ROW><id>5382001</id><snippet>CaseInsensitiveModule</snippet></ROW><ROW><id>5382001</id><snippet>RemoteModule</snippet></ROW><ROW><id>5382001</id><snippet>Module</snippet></ROW><ROW><id>5382001</id><snippet>Blueprint</snippet></ROW><ROW><id>5382082</id><snippet>find</snippet></ROW><ROW><id>5382082</id><snippet>search.find(word)</snippet></ROW><ROW><id>5382082</id><snippet>word</snippet></ROW><ROW><id>5382082</id><snippet>find_start</snippet></ROW><ROW><id>5382082</id><snippet>find_end</snippet></ROW><ROW><id>5382082</id><snippet>search[6:8]</snippet></ROW><ROW><id>5382139</id><snippet>canvas.config(scrollregion=canvas.bbox(ALL))
</snippet></ROW><ROW><id>5382269</id><snippet>if user not in data:
    data[user] = []
data[user].append({'item': row[0], 'time': row[1]})
</snippet></ROW><ROW><id>5383166</id><snippet>import sys

from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4.QtWebKit import QWebPage, QWebView

app = QApplication(sys.argv)
web_view = QWebView()
web_view.page().setLinkDelegationPolicy(QWebPage.DelegateAllLinks)
def url_changed(url):  print 'url changed: ', url
def link_clicked(url):  print 'link clicked: ', url
def load_started():  print 'load started'
def load_finished(ok):  print 'load finished, ok: ', ok
web_view.connect(web_view, SIGNAL("urlChanged(const QUrl&amp;)"), url_changed)
web_view.connect(web_view, SIGNAL("linkClicked(const QUrl&amp;)"), link_clicked)
web_view.connect(web_view, SIGNAL('loadStarted()'), load_started)
web_view.connect(web_view, SIGNAL('loadFinished(bool)'), load_finished)
web_view.load(QUrl('http://google.com'))
web_view.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>5383230</id><snippet>if</snippet></ROW><ROW><id>5383230</id><snippet>elif</snippet></ROW><ROW><id>5383230</id><snippet>else</snippet></ROW><ROW><id>5383266</id><snippet>easy_install &lt;a href="http://www.stickpeople.com/projects/python/win-psycopg/psycopg2-2.4.win32-pyx.x-pg9.0.3-release.exe"&gt;http://www.stickpeople.com/projects/python/win-psycopg/psycopg2-2.4.win32-pyx.x-pg9.0.3-release.exe&lt;/a&gt;</snippet></ROW><ROW><id>5383432</id><snippet>\x0c</snippet></ROW><ROW><id>5383432</id><snippet>chrisblattman.xml</snippet></ROW><ROW><id>5383432</id><snippet>import re
from xml.parsers import expat

# illegal XML 1.0 character ranges
# See http://www.w3.org/TR/REC-xml/#charsets
XML_ILLEGALS = u'|'.join(u'[%s-%s]' % (s, e) for s, e in [
    (u'\u0000', u'\u0008'),             # null and C0 controls
    (u'\u000B', u'\u000C'),             # vertical tab and form feed
    (u'\u000E', u'\u001F'),             # shift out / shift in
    (u'\u007F', u'\u009F'),             # C1 controls
    (u'\uD800', u'\uDFFF'),             # High and Low surrogate areas
    (u'\uFDD0', u'\uFDDF'),             # not permitted for interchange
    (u'\uFFFE', u'\uFFFF'),             # byte order marks
    ])

RE_SANITIZE_XML = re.compile(XML_ILLEGALS, re.M | re.U)

# decode, filter illegals out, then encode back to utf-8
data = open('chrisblattman.xml', 'rb').read().decode('utf-8')
data = RE_SANITIZE_XML.sub('', data).encode('utf-8')

pr = expat.ParserCreate('utf-8')
pr.Parse(data)
</snippet></ROW><ROW><id>5383451</id><snippet>-n</snippet></ROW><ROW><id>5383451</id><snippet>n</snippet></ROW><ROW><id>5383451</id><snippet>range(-n, n)</snippet></ROW><ROW><id>5383451</id><snippet>int</snippet></ROW><ROW><id>5383451</id><snippet>long</snippet></ROW><ROW><id>5383451</id><snippet>long</snippet></ROW><ROW><id>5383897</id><snippet>def splitlines (file) :
  fileNo=0001
  outFile=open("newdocs/%s.txt" % fileNo, 'a') ## open file to append 
  reg = re.compile("Copyright ")
  for line in open(file, "r"): 
    if reg.search("Copyright ", line): # if the line is equal to the regex
      outFile.close()  ##  close the file
      outFile=open("newdocs%s.txt" % fileNo, 'a') ## open file to append 
      fileNo +=1  #and add one to the filename, starting to read lines in again

    outFile.write(line)          ## then append it to the open outFile          
</snippet></ROW><ROW><id>5384098</id><snippet>pages/__init__.py</snippet></ROW><ROW><id>5384098</id><snippet>from pages import *</snippet></ROW><ROW><id>5384172</id><snippet>python setup.py build_ext -cmingw32
</snippet></ROW><ROW><id>5384172</id><snippet>-cmingw</snippet></ROW><ROW><id>5384256</id><snippet>&gt;&gt;&gt; print '\xbb'.decode('cp1252')
»
</snippet></ROW><ROW><id>5384279</id><snippet>FROM = "my-username"
TO = ["recipients"]
SUBJECT = "Stereo log: %s" % today
fp = open(textfile, 'rb')
TEXT = MIMEText(fp.read())
fp.close()
TEXT['From'] = FROM
TEXT['To'] = ",".join(TO)
TEXT['Subject'] = SUBJECT
server = smtplib.SMTP('smtp.gmail.com', 587)
server.starttls()
server.login('my-username','mypass')
server.sendmail(FROM, TO, TEXT.as_string)
server.close()
</snippet></ROW><ROW><id>5384573</id><snippet>sum(1 for i in it)
</snippet></ROW><ROW><id>5385075</id><snippet>&gt;&gt;&gt; mydict = {'one': 1, 'two': 2, 'three': 3, 'four': 4}
&gt;&gt;&gt; for k, v in mydict.iteritems():
...    if k == 'two':
...        del mydict[k]
...
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
RuntimeError: dictionary changed size during iteration
</snippet></ROW><ROW><id>5385075</id><snippet>keys()</snippet></ROW><ROW><id>5385075</id><snippet>&gt;&gt;&gt; for k in mydict.keys():
...    if k == 'two':
...        del mydict[k]
...
&gt;&gt;&gt; mydict
{'four': 4, 'three': 3, 'one': 1}
</snippet></ROW><ROW><id>5385075</id><snippet>items()</snippet></ROW><ROW><id>5385075</id><snippet>&gt;&gt;&gt; for k, v in mydict.items():
...     if v == 3:
...         del mydict[k]
...
&gt;&gt;&gt; mydict
{'four': 4, 'one': 1}
</snippet></ROW><ROW><id>5385156</id><snippet>__repr__</snippet></ROW><ROW><id>5385156</id><snippet>class Foo(object):
   def __repr__(self):
       return str(self)

   def __str__(self):
       return self.name
</snippet></ROW><ROW><id>5385156</id><snippet>__str__</snippet></ROW><ROW><id>5385156</id><snippet>__repr__</snippet></ROW><ROW><id>5385156</id><snippet>self</snippet></ROW><ROW><id>5385289</id><snippet>def renderId(celllayout, cell, model, iter):
  if model.get_value(iter,1) == 3:
    cell.set_property('visible',True)
  else:
    cell.set_property('visible',False)

treeviewcolumn = gtk.TreeViewColumn()
renderer = gtk.CellRendererText()
treeviewcolumn.add_attribute(renderer,'text',0)
treeviewcolumn.set_cell_data_func(renderer,renderId)
</snippet></ROW><ROW><id>5385309</id><snippet>strptime</snippet></ROW><ROW><id>5385309</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "2010-01-01 18:48:14.631829"
&gt;&gt;&gt; datetime.datetime.strptime(s, "%Y-%m-%d %H:%M:%S.%f")
datetime.datetime(2010, 1, 1, 18, 48, 14, 631829)
</snippet></ROW><ROW><id>5385309</id><snippet>%f</snippet></ROW><ROW><id>5385309</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; datetime.datetime.strptime(re.sub('\..*', '', s), "%Y-%m-%d %H:%M:%S")
datetime.datetime(2010, 1, 1, 18, 48, 14)
</snippet></ROW><ROW><id>5385368</id><snippet>datetime</snippet></ROW><ROW><id>5385368</id><snippet>timedelta</snippet></ROW><ROW><id>5385368</id><snippet>total_seconds()</snippet></ROW><ROW><id>5385368</id><snippet>&gt;&gt;&gt; now = datetime.datetime.now()
# wait 3 seconds
&gt;&gt;&gt; now2 = datetime.datetime.now()
&gt;&gt;&gt; td = now2 - now
&gt;&gt;&gt; td.total_seconds()
3.266
</snippet></ROW><ROW><id>5385368</id><snippet>def is_due_today(self):
    dd = self.due_date
    delta = dd - datetime.date.today()
    return delta.total_seconds() &gt; 0
</snippet></ROW><ROW><id>5385684</id><snippet>get_header</snippet></ROW><ROW><id>5385684</id><snippet>add_header</snippet></ROW><ROW><id>5385684</id><snippet>key.capitalize()</snippet></ROW><ROW><id>5385684</id><snippet>get_header('Content-type')</snippet></ROW><ROW><id>5385684</id><snippet>class Request:
    def add_header(self, key, val):
        self.headers[key.capitalize()] = val

&gt;&gt;&gt; 'content-type'.capitalize()
'Content-type'
</snippet></ROW><ROW><id>5385768</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>5385768</id><snippet>addLoadEvent(fillList(document.forms['search'].slave, lists['HIV-1']));
</snippet></ROW><ROW><id>5385797</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>5385797</id><snippet>multipart/form-data</snippet></ROW><ROW><id>5385797</id><snippet>enctype="..."</snippet></ROW><ROW><id>5385797</id><snippet>multipart/form-data</snippet></ROW><ROW><id>5385797</id><snippet>request.FILES</snippet></ROW><ROW><id>5385797</id><snippet>request.POST</snippet></ROW><ROW><id>5385797</id><snippet>MultiPartParser</snippet></ROW><ROW><id>5385797</id><snippet>django/http/__init__.py</snippet></ROW><ROW><id>5385797</id><snippet>from django import forms

class TestForm(forms.Form):
    name = forms.CharField()
    file = forms.FileField()
</snippet></ROW><ROW><id>5385797</id><snippet>from django.shortcuts import render_to_response
from django.template import RequestContext

from forms import TestForm

def show_form(request):
    if request.method == 'POST':
        form = TestForm(request.POST, request.FILES)
    else:
        form = TestForm()

    context = {
        'form': form
    }
    return render_to_response('show_form.html', context, RequestContext(request))
</snippet></ROW><ROW><id>5385797</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Django forms - file test&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;form method="post" enctype="multipart/form-data"&gt;
            {% csrf_token %}
            {{ form.as_p }}
            &lt;input type="submit" /&gt;
        &lt;/form&gt;

        &lt;h2&gt;Request details&lt;/h2&gt;

        &lt;p&gt;
        Request method: {{ request.method }}
        &lt;br /&gt;
        POST data: {{ request.POST|default:"No data" }}
        &lt;br /&gt;
        FILES data: {{ request.FILES|default:"No data" }}
        &lt;/p&gt;

        &lt;h2&gt;Form details&lt;/h2&gt;

        &lt;p&gt;
        Cleaned data: {{ form.cleaned_data|default:"No data" }}
        &lt;/p&gt;

    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>5385797</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>5385797</id><snippet>request.FILES['file']</snippet></ROW><ROW><id>5385797</id><snippet>cleaned_data</snippet></ROW><ROW><id>5385797</id><snippet>request.FILES</snippet></ROW><ROW><id>5385797</id><snippet>request.FILES</snippet></ROW><ROW><id>5385844</id><snippet>base = [100, 100, 100, 100]
value_a = base[:]
value_b = base[:]
</snippet></ROW><ROW><id>5385844</id><snippet>setattr</snippet></ROW><ROW><id>5385844</id><snippet>class Weapons(object):
    def __init__(self, base):
        for weapon in ["saber", "sword", "axe"]:
            setattr(self, weapon, base[:])

w = Weapons([100, 100, 100])
print w.__dict__  

#output: {'sword': [100, 100, 100], 
#         'saber': [100, 100, 100], 
#         'axe': [100, 100, 100]}

w.axe[0] = 10
print w.axe       # output: [10, 100, 100]
print w.sword     # output: [100, 100, 100]
</snippet></ROW><ROW><id>5385999</id><snippet>all_files = ''
def fpath(arguments):
    all_files = []
    # modify all_files
    return all_files 
</snippet></ROW><ROW><id>5385999</id><snippet>all_files</snippet></ROW><ROW><id>5385999</id><snippet>global</snippet></ROW><ROW><id>5385999</id><snippet>all_files = ''
def fpath(arguments):
    global all_files
    all_files = []
    # modify all_files
</snippet></ROW><ROW><id>5385999</id><snippet>return</snippet></ROW><ROW><id>5385999</id><snippet>all_files</snippet></ROW><ROW><id>5385999</id><snippet>def fpath(arguments):
    files = []
    # modify files
    return files

all_files = fpath(filename)
</snippet></ROW><ROW><id>5385999</id><snippet>fpath</snippet></ROW><ROW><id>5385999</id><snippet>files</snippet></ROW><ROW><id>5385999</id><snippet>files</snippet></ROW><ROW><id>5385999</id><snippet>all_files</snippet></ROW><ROW><id>5386066</id><snippet>globals()</snippet></ROW><ROW><id>5386066</id><snippet>senderle</snippet></ROW><ROW><id>5386134</id><snippet>ct.model_class()</snippet></ROW><ROW><id>5386134</id><snippet>&gt;&gt;&gt; from django.contrib.contenttypes.models import ContentType
&gt;&gt;&gt; ct = ContentType.objects.get(model='user')
&gt;&gt;&gt; ct_class = ct.model_class()
&gt;&gt;&gt; ct_instance = ct_class()
&gt;&gt;&gt; ct_instance.username = 'hellow'
&gt;&gt;&gt; ct_instance.save()
</snippet></ROW><ROW><id>5386147</id><snippet>QVariant(Qt.Unchecked)</snippet></ROW><ROW><id>5386147</id><snippet>import sys

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class TestItem():
    def __init__(self, name, checked):
        self.checked = checked
        self.name = name

class StbTreeView(QAbstractListModel):
    def __init__(self, args, parent=None):
        super(StbTreeView, self).__init__(parent)

        self.args = []
        for item_name in args:
            self.args.append(TestItem(item_name, False))

        for item in self.args:
            print item.name

    def rowCount(self, parent):
        return len(self.args)

    def headerData(self, section, orientation, role):
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return QString("Select STB's")

    def flags(self, index):
        return  Qt.ItemIsUserCheckable | Qt.ItemIsEditable | Qt.ItemIsSelectable | Qt.ItemIsEnabled

    def data(self, index, role=Qt.DisplayRole):
        if role == Qt.DisplayRole:
            row = index.row()
            print self.args[row].name
            return self.args[row].name

        if role == Qt.CheckStateRole:
            row = index.row()
            print self.args[row].checked
            if self.args[row].checked == False:
                return QVariant(Qt.Unchecked)
            else:
                return QVariant(Qt.Checked)

    def setData(self, index, value, role):
        if role == Qt.CheckStateRole:
            row = index.row()
            self.args[row].checked = not self.args[row].checked             
        return True

def main():
    myapp = QApplication(sys.argv)

    data = ['STB1', 'STB2', 'STB3', 'STB4', 'STB5', 'STB6', 'STB7', 'STB8']

    model = StbTreeView(data)
    tree_view = QTreeView()
    tree_view.show()
    tree_view.setModel(model)

    myapp.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5386238</id><snippet>class Person(object):
    def say(self, stuff):
        return stuff

class Lecturer(Person):
    def lecture(self, stuff):
        return self.say(str(stuff) + " - you should be taking notes")

class Professor1(Lecturer):  # 'is a' Lecturer
    def profess(self, stuff):
        return self.lecture("Its intuitively obvious that "+str(stuff))

class Professor2(Person):  # 'has a' lecturer
    def __init__(self):
        super(Professor2,self).__init__()
        self.lecturer = Lecturer()

    def profess(self, stuff):
        return self.lecturer.lecture("Its intuitively obvious that "+str(stuff))

p1 = Professor1()
print(p1.profess('Earth is flat'))

p2 = Professor2()
print(p2.profess('Earth is flat'))
</snippet></ROW><ROW><id>5386238</id><snippet>Its intuitively obvious that Earth is flat - you should be taking notes
Its intuitively obvious that Earth is flat - you should be taking notes
</snippet></ROW><ROW><id>5386360</id><snippet>import sys
sys.modules['numpy']=None
</snippet></ROW><ROW><id>5386360</id><snippet>sys.modules['numpy']=None</snippet></ROW><ROW><id>5386360</id><snippet>numpy</snippet></ROW><ROW><id>5386360</id><snippet>numpy</snippet></ROW><ROW><id>5386360</id><snippet>ImportError</snippet></ROW><ROW><id>5386360</id><snippet>try:
    import numpy
except ImportError as err:
    print(err)
    # No module named numpy
</snippet></ROW><ROW><id>5386360</id><snippet>sys.modules['numpy']</snippet></ROW><ROW><id>5386360</id><snippet>numpy</snippet></ROW><ROW><id>5386360</id><snippet>del sys.modules['numpy']
import numpy
</snippet></ROW><ROW><id>5386743</id><snippet>tree = etree.parse(StringIO(htmlString), etree.HTMLParser()).getroot()
youWantValue = tree.xpath('/main/elem2')[0].text
</snippet></ROW><ROW><id>5386770</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.random.rand(10, 100)
&gt;&gt;&gt; b = a.view(numpy.uint8)
&gt;&gt;&gt; hashlib.sha1(b).hexdigest()
'15c61fba5c969e5ed12cee619551881be908f11b'
&gt;&gt;&gt; t=timeit.Timer("hashlib.sha1(a.view(numpy.uint8)).hexdigest()", "import hashlib;import numpy;a=numpy.random.rand(10,10)") 
&gt;&gt;&gt; t.timeit(number=10000)/10000
2.5790500640869139e-05
</snippet></ROW><ROW><id>5386821</id><snippet>__init__</snippet></ROW><ROW><id>5386821</id><snippet>from django.forms import ModelForm, ChoiceField
class MyModelForm(ModelForm):
    class Meta:
        model = MyModel

    def __init__(self, *args, **kwargs):
        super(MyModelForm, self).__init__(*args, **kwargs)
        geoiplocator_instance = GeoIpLocator()
        city_country_dictionary=geoiplocator_instance.get_country_city_dictionary()
        users_country_name = city_country_dictionary['country_name']
        users_city = city_country_dictionary['city']

        # not exactly sure what you wanted to do with this choice field.
        # make the country the only option? Pull a list of related countries?
        # add it and make it the default selected?
        self.fields['country'] = ChoiceField(choices = [(users_country_name, users_country_name),])
        self.fields['city'].initial = users_city
</snippet></ROW><ROW><id>5386841</id><snippet>itertools</snippet></ROW><ROW><id>5386841</id><snippet>def ugly_function(lst):
   for comb in itertools.product(*lst):
      if some_test(comb):
          return comb
</snippet></ROW><ROW><id>5386841</id><snippet>def ugly_function(lst):
    return next(comb for comb in itertools.product(*lst) if some_test(comb))
</snippet></ROW><ROW><id>5387227</id><snippet>&gt;&gt;&gt; text = 'a,b,c'
&gt;&gt;&gt; text = text.split(',')
&gt;&gt;&gt; text
[ 'a', 'b', 'c' ]
</snippet></ROW><ROW><id>5387227</id><snippet>eval()</snippet></ROW><ROW><id>5387227</id><snippet>&gt;&gt;&gt; text = 'a,b,c'
&gt;&gt;&gt; text = eval('[' + text + ']')
</snippet></ROW><ROW><id>5387318</id><snippet>strpos("aloha", "a") !== false
</snippet></ROW><ROW><id>5387318</id><snippet>!==</snippet></ROW><ROW><id>5387318</id><snippet>!=</snippet></ROW><ROW><id>5387318</id><snippet>0 == false</snippet></ROW><ROW><id>5387754</id><snippet>{% if emp_list.has_next %}
  &lt;a href="?page={{ emp_list.next_page_number }}&amp;choices={{ val2 }}&gt;Next&lt;/a&gt;
{% endif %}
</snippet></ROW><ROW><id>5387956</id><snippet>class Monolithic(TestCase):
  def step1(self):
      ...

  def step2(self):
      ...

  def steps(self):
    for name in sorted(dir(self)):
      if name.startswith("step"):
        yield name, getattr(self, name) 

  def test_steps(self):
    for name, step in self.steps():
      try:
        step()
      except Exception as e:
        self.fail("{} failed ({}: {})".format(step, type(e), e)
</snippet></ROW><ROW><id>5388166</id><snippet>Professor</snippet></ROW><ROW><id>5388166</id><snippet>Dean</snippet></ROW><ROW><id>5388166</id><snippet>say</snippet></ROW><ROW><id>5388166</id><snippet>Dean</snippet></ROW><ROW><id>5388166</id><snippet>Professor.say(self, stuff)</snippet></ROW><ROW><id>5388435</id><snippet>self.counter</snippet></ROW><ROW><id>5388435</id><snippet>doSomething()</snippet></ROW><ROW><id>5388435</id><snippet>self.counter</snippet></ROW><ROW><id>5388435</id><snippet>class SomeClass:
    def __init__(self):
        self.counter = None
    def doSomething(self):
        self.counter = 50
</snippet></ROW><ROW><id>5388435</id><snippet>SomeClass</snippet></ROW><ROW><id>5388435</id><snippet>self.counter</snippet></ROW><ROW><id>5388435</id><snippet>None</snippet></ROW><ROW><id>5388435</id><snippet>doSomething</snippet></ROW><ROW><id>5388548</id><snippet>insert into sales from (
    -- here be magic
    select  item, units, DATEADD(day, DayInYear, start_date)
    from    (
        select  item,
                year,
                (week - 1) * 7 + 0 as DayInYear,
                mon as Units
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 1, tue
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 2, wed
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 3, thu
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 4, fri
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 5, sat
        from    legacy_sales
        union all
        select  item, year, (week - 1) * 7 + 6, sun
        from    legacy_sales
        ) ls
        inner join fiscal on
            fiscal.year = ls.year
)
</snippet></ROW><ROW><id>5388659</id><snippet>range(n) == [0, 1, 2, ..., n - 1]
</snippet></ROW><ROW><id>5388659</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>5388659</id><snippet>x &lt;&lt; n == x * 2**n
</snippet></ROW><ROW><id>5388659</id><snippet>range(1, 1 &lt;&lt; x)</snippet></ROW><ROW><id>5388659</id><snippet>[1, 2, 3, ..., 2**x - 1]</snippet></ROW><ROW><id>5388659</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>5388659</id><snippet>if</snippet></ROW><ROW><id>5388659</id><snippet>j = 4
1 &lt;&lt; j = 0b1000 (binary notation)

i = 41 = 0b101001
i &amp; (1 &lt;&lt; j) = 0b101001
             &amp; 0b001000
             = 0b001000 (non-zero, the if-test passes)

i = 38 = 0b100110
i &amp; (1 &lt;&lt; j) = 0b100110
             &amp; 0b001000
             = 0b000000 (zero, the if-test fails)
</snippet></ROW><ROW><id>5388659</id><snippet>x &amp; (1 &lt;&lt; y)</snippet></ROW><ROW><id>5388763</id><snippet>re.sub('(.+) \(\\1\)', '\\1', 'the (the)')
--&gt; the
</snippet></ROW><ROW><id>5388763</id><snippet>r</snippet></ROW><ROW><id>5388763</id><snippet>re.sub(r'(.+) \(\1\)', r'\1', 'the (the)')
--&gt; the
</snippet></ROW><ROW><id>5388828</id><snippet>#!/usr/bin/env python

import re

# uncomment/comment for test with a real file ...
# header = open('mycfile.c', 'r').read()
header = """

#if 0
    whatever(necessary)
    and maybe more

#endif

/* 
 * This is an original style comment
 *
 */

int main (int argc, char const *argv[])
{
    /* code */
    return 0;
}

"""

p_macro = re.compile("#if.*?#endif", re.DOTALL)
p_comment = re.compile("/\*.*?\*/", re.DOTALL)

# Example ...
# print re.sub(p_macro, '', header)
# print re.sub(p_comment, '', header)
</snippet></ROW><ROW><id>5389037</id><snippet>dictA = {}
for d in lst:
    unit = d['unitname']
    for test in testnames:
        if test in d:
            dictA[unit,test] = d[test]
</snippet></ROW><ROW><id>5389037</id><snippet>unitname</snippet></ROW><ROW><id>5389257</id><snippet>import itertools
for l1, l2 in itertools.combinations(list_a[0], 2):
    for e1, e2 in itertools.product(l1, l2):
        print e1, e2
</snippet></ROW><ROW><id>5389257</id><snippet>a c
a d
b c
b d
a e
a CB
b e
b CB
a g
a h
b g
b h
a a
a j
a k
b a
b j
b k
c e
c CB
d e
d CB
c g
c h
d g
d h
c a
c j
c k
d a
d j
d k
e g
e h
CB g
CB h
e a
e j
e k
CB a
CB j
CB k
g a
g j
g k
h a
h j
h k
</snippet></ROW><ROW><id>5389547</id><snippet>pairwise()</snippet></ROW><ROW><id>5389547</id><snippet>grouped()</snippet></ROW><ROW><id>5389547</id><snippet>from itertools import izip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s2,s3), (s4, s5), ..."
    a = iter(iterable)
    return izip(a, a)

for x, y in pairwise(l):
   print "%d + %d = %d" % (x, y, x + y)
</snippet></ROW><ROW><id>5389547</id><snippet>from itertools import izip

def grouped(iterable, n):
    "s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ..."
    return izip(*[iter(iterable)]*n)

for x, y in grouped(l, 2):
   print "%d + %d = %d" % (x, y, x + y)
</snippet></ROW><ROW><id>5389547</id><snippet>zip()</snippet></ROW><ROW><id>5389547</id><snippet>pairwise</snippet></ROW><ROW><id>5389547</id><snippet>itertools</snippet></ROW><ROW><id>5389598</id><snippet>new_list = [ splitext(basename(i))[0] for i in inputlist ]
</snippet></ROW><ROW><id>5389762</id><snippet>datetime()</snippet></ROW><ROW><id>5389762</id><snippet>b = la_paz.localize(datetime.datetime(2011, 03, 22, 5, 30))
print b, b.utcoffset()
</snippet></ROW><ROW><id>5389762</id><snippet>now()</snippet></ROW><ROW><id>5390271</id><snippet>/html/body</snippet></ROW><ROW><id>5390271</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>5390271</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>5390271</id><snippet>//body</snippet></ROW><ROW><id>5390271</id><snippet>x.select("//body").extract()    # extract body
</snippet></ROW><ROW><id>5390318</id><snippet>&gt;&gt;&gt; foo = 5       # foo now holds a value of type int
&gt;&gt;&gt; foo = 'hello' # foo now holds a value of type string
</snippet></ROW><ROW><id>5390348</id><snippet>f.seek(offset)
get_records(f, count)
</snippet></ROW><ROW><id>5390393</id><snippet>list.append</snippet></ROW><ROW><id>5390393</id><snippet>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; k = l.append(5)
&gt;&gt;&gt; k
&gt;&gt;&gt; k is None
True
</snippet></ROW><ROW><id>5390393</id><snippet>&gt;&gt;&gt; k = [1, 2, 3] + [5]
&gt;&gt;&gt; k
[1, 2, 3, 5]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5390393</id><snippet>files = [file for file in ['default.txt'] + sys.argv[1:] if os.path.exists(file)]
</snippet></ROW><ROW><id>5390421</id><snippet>[v for k,v in dictA.iteritems() if k[1] == 'test1']
</snippet></ROW><ROW><id>5390421</id><snippet>[10, 78]
</snippet></ROW><ROW><id>5390421</id><snippet>&gt;&gt;&gt; [v for k,v in dictA.iteritems() if k[1] == 'test2']
[2, 45]
</snippet></ROW><ROW><id>5390421</id><snippet>key</snippet></ROW><ROW><id>5390421</id><snippet>if</snippet></ROW><ROW><id>5390697</id><snippet>a = vstack([ gen() for _ in xrange(nSamples) ])
</snippet></ROW><ROW><id>5390697</id><snippet>gen</snippet></ROW><ROW><id>5390697</id><snippet>gen()</snippet></ROW><ROW><id>5390697</id><snippet>gen()</snippet></ROW><ROW><id>5390835</id><snippet>time_out = 4

def tryconnect(turl, timer=time_out, retries=10):
    for tried in xrange(retries):
        try:
            return urllib2.urlopen(turl, None, timer)
        except urllib2.URLError:
            pass
    return None
</snippet></ROW><ROW><id>5390835</id><snippet>urlopener = tryconnect('www.example.com')
if urlopener:
    try:
        for line in urlopener:
            do stuff
    except (httplib.IncompleteRead, socket.timeout), e:
        print e
        return None
else:
    return None
</snippet></ROW><ROW><id>5391141</id><snippet>_semaphores_rwlock = RWLock()
_semaphores = {}

def synchronized(name):
    def wrap(f):
        def inner(*args, **kwargs):
            lock = _semaphores_rwlock.reader()
            # If the named semaphore does not yet exist, create it.
            if name not in _semaphores:
                lock = _semaphores_rwlock.writer()
                _semaphores[name] = semaphore.Semaphore()

            sem = _semaphores[name]

            with sem:
                retval = f(*args, **kwargs)
            lock.release()
            return retval
</snippet></ROW><ROW><id>5391141</id><snippet>wlock = _semaphores_rwlock.writer() #this might take a while; it waits for all readers to release
cleanup(_semaphores)
wlock.release()
</snippet></ROW><ROW><id>5391245</id><snippet>func = getattr(modulename, funcname, None):
if func:
    func(arg)
</snippet></ROW><ROW><id>5391245</id><snippet>try:
    func = getattr(modulename, funcname)
except AttributeError:
    print 'function not found "%s" (%s)' % (funcname, arg)
else:
    func(arg)
</snippet></ROW><ROW><id>5391258</id><snippet># note alpha is None and visible is True by default
rect = patches.Rectangle((2, 3), 2, 2, ec="gray", fc="CornflowerBlue", zorder=10)
</snippet></ROW><ROW><id>5391258</id><snippet>ax.plot(x, y)</snippet></ROW><ROW><id>5391258</id><snippet>lines = ax.plot(x, y)</snippet></ROW><ROW><id>5391258</id><snippet>print lines[0].zorder</snippet></ROW><ROW><id>5391258</id><snippet>zorder</snippet></ROW><ROW><id>5391258</id><snippet>zorder &gt; 2</snippet></ROW><ROW><id>5391572</id><snippet>do_task</snippet></ROW><ROW><id>5391572</id><snippet>Hell</snippet></ROW><ROW><id>5391572</id><snippet>new_tasks</snippet></ROW><ROW><id>5391572</id><snippet>new_tasks</snippet></ROW><ROW><id>5391572</id><snippet>import time
import random
import os
import multiprocessing as mp

def main():
    NPROCESSES = 5
    pool=mp.Pool(NPROCESSES)
    a = [1,2,3,4,5,6,7,8,9,0]
    new_tasks=a
    while new_tasks:
        a=new_tasks
        new_tasks=[]
        for result in pool.imap_unordered(do_task, a):
            if isinstance(result,Hell):
                new_tasks.append(result.args[0])
            else:
                print(result)

def do_task(n):
    try:
        result=might_crash(n)
    except Hell as e:        
        print("{0} crashed.".format(e.args[0]))
        result=e
    return result

def might_crash(n):
    time.sleep(3*random.random())
    if random.randrange( 3 ) == 0:
        raise Hell(n)
    return '{0} done'.format(n)

class Hell(Exception):
    pass  

if __name__=="__main__":    
    main()
</snippet></ROW><ROW><id>5391572</id><snippet>1 done
6 crashed.
4 done
7 crashed.
5 done
9 done
3 done
2 crashed.
8 done
0 crashed.
0 crashed.
2 done
7 crashed.
6 done
0 done
7 done
</snippet></ROW><ROW><id>5391616</id><snippet>cells = npar.db.execute("SELECT cellid FROM data "
                        "WHERE block &gt; 1 "
                        "AND date &gt;= ? "
                        "GROUP BY cellid "
                        "HAVING COUNT(*) = 3", (files[0][1],)).fetchall()
</snippet></ROW><ROW><id>5391705</id><snippet> for a,b in zip(lists, extendwith):
     a.extend(b)
</snippet></ROW><ROW><id>5391954</id><snippet>countdown</snippet></ROW><ROW><id>5391954</id><snippet>seconds_til_start = (datetime(2011,3,22,17,00) - datetime.now()).seconds
taskqueue.add(url='/yourtask', countdown=seconds_til_start)
</snippet></ROW><ROW><id>5392009</id><snippet>setMaximumSize</snippet></ROW><ROW><id>5392009</id><snippet>QLayout::SetMaximumSize</snippet></ROW><ROW><id>5392009</id><snippet>QBoxLayout</snippet></ROW><ROW><id>5392763</id><snippet>_PyString_Resize</snippet></ROW><ROW><id>5392763</id><snippet>realloc</snippet></ROW><ROW><id>5392763</id><snippet>read</snippet></ROW><ROW><id>5392763</id><snippet>char cbuf[BUFFER_SIZE];
int sz = read(cbuf, BUFFER_SIZE);
PyObject * buffer = PyString_FromStringAndSize(cbuf, sz);
</snippet></ROW><ROW><id>5392763</id><snippet>_PyString_Resize</snippet></ROW><ROW><id>5392763</id><snippet>Objects/stringobject.c</snippet></ROW><ROW><id>5393086</id><snippet>O(m*n)</snippet></ROW><ROW><id>5393086</id><snippet>m</snippet></ROW><ROW><id>5393086</id><snippet>n</snippet></ROW><ROW><id>5393086</id><snippet>reference</snippet></ROW><ROW><id>5393086</id><snippet>done</snippet></ROW><ROW><id>5393086</id><snippet>m</snippet></ROW><ROW><id>5393086</id><snippet>n</snippet></ROW><ROW><id>5393086</id><snippet>.sort()</snippet></ROW><ROW><id>5393086</id><snippet>O(n * log(n))</snippet></ROW><ROW><id>5393086</id><snippet>O(n)</snippet></ROW><ROW><id>5393086</id><snippet>O(n * log(n))</snippet></ROW><ROW><id>5393086</id><snippet>.close()</snippet></ROW><ROW><id>5393086</id><snippet>with</snippet></ROW><ROW><id>5393086</id><snippet>for i in reference:
    if i not in done:
        print i,
</snippet></ROW><ROW><id>5393086</id><snippet>items = [i.strip() for i in reference if i not in done]
print ' '.join(items)
</snippet></ROW><ROW><id>5393086</id><snippet>f</snippet></ROW><ROW><id>5393086</id><snippet>f.readlines()</snippet></ROW><ROW><id>5393102</id><snippet>gettext</snippet></ROW><ROW><id>5393182</id><snippet>bjam toolset=gcc --with-python link=shared</snippet></ROW><ROW><id>5394107</id><snippet>gtk.Window.present()</snippet></ROW><ROW><id>5394209</id><snippet>db.GqlQuery("SELECT * FROM __namespace__")</snippet></ROW><ROW><id>5394209</id><snippet>each()</snippet></ROW><ROW><id>5394209</id><snippet>for namespace in each(db.GqlQuery("SELECT * FROM __namespace__")):
    # set the namespace
    namespace_manager.set_namespace( namespace.namespace_name )
    # get all the kinds used in this namespace
    for kind in each(db.GqlQuery("SELECT * FROM __kind__")):
        # get entity 'keys only'
        for key in each(db.GqlQuery("SELECT __key__ FROM %s" % kind.kind_name)):
            db.delete(key)
</snippet></ROW><ROW><id>5394241</id><snippet>del</snippet></ROW><ROW><id>5394241</id><snippet>__del__</snippet></ROW><ROW><id>5394241</id><snippet>cursor = db.test.find(timeout=False)
</snippet></ROW><ROW><id>5394241</id><snippet>del cursor
</snippet></ROW><ROW><id>5394361</id><snippet>&gt;&gt;&gt; import xml.dom.minidom
&gt;&gt;&gt;
&gt;&gt;&gt; data_in = """&lt;Files&gt;
...   &lt;Filter&gt;
...   &lt;/Filter&gt;
... &lt;/Files&gt;
... """
&gt;&gt;&gt;
&gt;&gt;&gt; data_add = ('./src/aaa.cxx','./src/bbb.cxx')
&gt;&gt;&gt;
&gt;&gt;&gt; doc = xml.dom.minidom.parseString(data_in)
&gt;&gt;&gt; files= doc.getElementsByTagName("Files")[0]
&gt;&gt;&gt; for filter in files.getElementsByTagName("Filter"):
...   for item in data_add:
...     newNode = doc.createElement("File")
...     newNode.setAttribute('RelativePath',item)
...     filter.appendChild(newNode)
...
&lt;DOM Element: File at 0x984c66c&gt;
&lt;DOM Element: File at 0x984c80c&gt;
&gt;&gt;&gt; print doc.toxml()
&lt;?xml version="1.0" ?&gt;
&lt;Files&gt;
  &lt;Filter&gt;
  &lt;File RelativePath="./src/aaa.cxx"/&gt;&lt;File RelativePath="./src/bbb.cxx"/&gt;&lt;/Filter&gt;
&lt;/Files&gt;
</snippet></ROW><ROW><id>5394481</id><snippet>=</snippet></ROW><ROW><id>5394481</id><snippet>==</snippet></ROW><ROW><id>5394564</id><snippet>Q_true</snippet></ROW><ROW><id>5394564</id><snippet>def Q_true(t, f, stat):
    period = 1/f
    return (t % period &lt; period/2) == stat
</snippet></ROW><ROW><id>5394564</id><snippet>Q1 = lambda ...</snippet></ROW><ROW><id>5394564</id><snippet>def</snippet></ROW><ROW><id>5394854</id><snippet>from matplotlib.lines import Line2D
from matplotlib import pyplot

f=pyplot.figure()
a=f.add_subplot(111)
a.plot([3,1,4,1,5,9,2], color='k') # so you have some content
a.add_line(Line2D([0.5, 0.5], [0, 1], transform=a.transAxes,
                  linewidth=2, color='b'))
pyplot.show()
</snippet></ROW><ROW><id>5394869</id><snippet>self.foo</snippet></ROW><ROW><id>5395396</id><snippet>print fileName, testName, diff,
</snippet></ROW><ROW><id>5395610</id><snippet>i</snippet></ROW><ROW><id>5395610</id><snippet>s</snippet></ROW><ROW><id>5395610</id><snippet>print_r(unpack("a4header/N13int/x8fill", $p));
</snippet></ROW><ROW><id>5395610</id><snippet>Array(
    [header] =&gt; P3TF
    [int1] =&gt; 272
    [int2] =&gt; 64
    [int3] =&gt; 6832
    [int4] =&gt; 6896
    [int5] =&gt; 1426
    [int6] =&gt; 8336
    [int7] =&gt; 312
    [int8] =&gt; 8656
    [int9] =&gt; 0
    [int10] =&gt; 8656
    [int11] =&gt; 0
    [int12] =&gt; 8656
    [int13] =&gt; 2924384
</snippet></ROW><ROW><id>5395610</id><snippet>x8</snippet></ROW><ROW><id>5395610</id><snippet>@</snippet></ROW><ROW><id>5395644</id><snippet>blank=True</snippet></ROW><ROW><id>5395644</id><snippet>   def __init__(self, *args, **kwargs):
       super(PictureForm, self).__init__(*args, **kwargs)

       for key in self.fields:
           self.fields[key].required = False
</snippet></ROW><ROW><id>5395833</id><snippet>dict</snippet></ROW><ROW><id>5395833</id><snippet>import</snippet></ROW><ROW><id>5395939</id><snippet>import time
time.time() * 1000
</snippet></ROW><ROW><id>5395951</id><snippet>#!/bin/bash
for line in $(cat requirements.txt)
do
  pip install $line -E /path/to/virtualenv
done
</snippet></ROW><ROW><id>5396320</id><snippet>from lxml.etree import tostring
inner_html=tostring(img)
</snippet></ROW><ROW><id>5396320</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>5396320</id><snippet>el</snippet></ROW><ROW><id>5396320</id><snippet>content = el.text_content()
</snippet></ROW><ROW><id>5396482</id><snippet>l2_set = set(l2)
# or use 
#   l2_set = {(13,'h'),(13,'d'),(14,'c'),(14,'s'),(14,'h')}
# directly

l1 = [hand for hand in l1 if not (hand[0] in l2_set or hand[1] in l2_set)]
</snippet></ROW><ROW><id>5396482</id><snippet>l1 = [hand for hand in l1 if all(subhand not in l2_set for subhand in hand)]
</snippet></ROW><ROW><id>5396652</id><snippet>import json
from json.encoder import encode_basestring_ascii ,encode_basestring,FLOAT_REPR,INFINITY,c_make_encoder
class JsonSpecialKey(object):
    def __init__(self, data):
        self.data = data
def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,
        _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,
        ## HACK: hand-optimized bytecode; turn globals into locals
        ValueError=ValueError,
        dict=dict,
        float=float,
        id=id,
        int=int,
        isinstance=isinstance,
        list=list,
        str=str,
        tuple=tuple,
    ):

    if _indent is not None and not isinstance(_indent, str):
        _indent = ' ' * _indent

    def _iterencode_list(lst, _current_indent_level):
        if not lst:
            yield '[]'
            return
        if markers is not None:
            markerid = id(lst)
            if markerid in markers:
                raise ValueError("Circular reference detected")
            markers[markerid] = lst
        buf = '['
        if _indent is not None:
            _current_indent_level += 1
            newline_indent = '\n' + _indent * _current_indent_level
            separator = _item_separator + newline_indent
            buf += newline_indent
        else:
            newline_indent = None
            separator = _item_separator
        first = True
        for value in lst:
            if first:
                first = False
            else:
                buf = separator
            if isinstance(value, str):
                yield buf + _encoder(value)
            elif value is None:
                yield buf + 'null'
            elif value is True:
                yield buf + 'true'
            elif value is False:
                yield buf + 'false'
            elif isinstance(value, int):
                yield buf + str(value)
            elif isinstance(value, float):
                yield buf + _floatstr(value)
            elif isinstance(value, JsonSpecialKey):
                yield buf + value.data

            else:
                yield buf
                if isinstance(value, (list, tuple)):
                    chunks = _iterencode_list(value, _current_indent_level)
                elif isinstance(value, dict):
                    chunks = _iterencode_dict(value, _current_indent_level)
                else:
                    chunks = _iterencode(value, _current_indent_level)
                for chunk in chunks:
                    yield chunk
        if newline_indent is not None:
            _current_indent_level -= 1
            yield '\n' + _indent * _current_indent_level
        yield ']'
        if markers is not None:
            del markers[markerid]

    def _iterencode_dict(dct, _current_indent_level):
        if not dct:
            yield '{}'
            return
        if markers is not None:
            markerid = id(dct)
            if markerid in markers:
                raise ValueError("Circular reference detected")
            markers[markerid] = dct
        yield '{'
        if _indent is not None:
            _current_indent_level += 1
            newline_indent = '\n' + _indent * _current_indent_level
            item_separator = _item_separator + newline_indent
            yield newline_indent
        else:
            newline_indent = None
            item_separator = _item_separator
        first = True
        if _sort_keys:
            items = sorted(dct.items(), key=lambda kv: kv[0])
        else:
            items = dct.items()
        for key, value in items:
            if isinstance(key, str):
                pass
            # JavaScript is weakly typed for these, so it makes sense to
            # also allow them.  Many encoders seem to do something like this.
            elif isinstance(key, float):
                key = _floatstr(key)
            elif key is True:
                key = 'true'
            elif key is False:
                key = 'false'
            elif key is None:
                key = 'null'
            elif isinstance(key, int):
                key = str(key)
            elif _skipkeys:
                continue
            else:
                raise TypeError("key " + repr(key) + " is not a string")
            if first:
                first = False
            else:
                yield item_separator
            yield _encoder(key)
            yield _key_separator
            if isinstance(value, str):
                yield _encoder(value)
            elif value is None:
                yield 'null'
            elif value is True:
                yield 'true'
            elif value is False:
                yield 'false'
            elif isinstance(value, int):
                yield str(value)
            elif isinstance(value, float):
                yield _floatstr(value)
            elif isinstance(value, JsonSpecialKey):
                yield value.data
            else:
                if isinstance(value, (list, tuple)):
                    chunks = _iterencode_list(value, _current_indent_level)
                elif isinstance(value, dict):
                    chunks = _iterencode_dict(value, _current_indent_level)
                else:
                    chunks = _iterencode(value, _current_indent_level)
                for chunk in chunks:
                    yield chunk
        if newline_indent is not None:
            _current_indent_level -= 1
            yield '\n' + _indent * _current_indent_level
        yield '}'
        if markers is not None:
            del markers[markerid]

    def _iterencode(o, _current_indent_level):
        if isinstance(o, str):
            yield _encoder(o)
        elif o is None:
            yield 'null'
        elif o is True:
            yield 'true'
        elif o is False:
            yield 'false'
        elif isinstance(o, int):
            yield str(o)
        elif isinstance(o, float):
            yield _floatstr(o)
        elif isinstance(o, JsonSpecialKey):
            yield o.data
        elif isinstance(o, (list, tuple)):
            for chunk in _iterencode_list(o, _current_indent_level):
                yield chunk
        elif isinstance(o, dict):
            for chunk in _iterencode_dict(o, _current_indent_level):
                yield chunk
        else:
            if markers is not None:
                markerid = id(o)
                if markerid in markers:
                    raise ValueError("Circular reference detected")
                markers[markerid] = o
            o = _default(o)
            for chunk in _iterencode(o, _current_indent_level):
                yield chunk
            if markers is not None:
                del markers[markerid]
    return _iterencode
class JsonSpecialEncoder(json.JSONEncoder):


     def iterencode(self, o, _one_shot=False):
        """Encode the given object and yield each string
        representation as available.

        For example::

            for chunk in JSONEncoder().iterencode(bigobject):
                mysocket.write(chunk)

        """
        if self.check_circular:
            markers = {}
        else:
            markers = None
        if self.ensure_ascii:
            _encoder = encode_basestring_ascii
        else:
            _encoder = encode_basestring
        def floatstr(o, allow_nan=self.allow_nan,
                _repr=FLOAT_REPR, _inf=INFINITY, _neginf=-INFINITY):
            # Check for specials.  Note that this type of test is processor
            # and/or platform-specific, so do tests which don't depend on the
            # internals.

            if o != o:
                text = 'NaN'
            elif o == _inf:
                text = 'Infinity'
            elif o == _neginf:
                text = '-Infinity'
            else:
                return _repr(o)

            if not allow_nan:
                raise ValueError(
                    "Out of range float values are not JSON compliant: " +
                    repr(o))

            return text



        _iterencode = _make_iterencode(
            markers, self.default, _encoder, self.indent, floatstr,
            self.key_separator, self.item_separator, self.sort_keys,
            self.skipkeys, _one_shot)
        return _iterencode(o, 0)
d = {'testKey':JsonSpecialKey('function() {alert(123);}')}
print (json.dumps(d, cls=JsonSpecialEncoder, ensure_ascii=False, indent=4))
</snippet></ROW><ROW><id>5396652</id><snippet>json.encode</snippet></ROW><ROW><id>5396652</id><snippet>_make_iterencode</snippet></ROW><ROW><id>5396652</id><snippet>       elif isinstance(value, JsonSpecialKey):
            yield buf + value.data
</snippet></ROW><ROW><id>5396652</id><snippet>JsonEncoder</snippet></ROW><ROW><id>5396652</id><snippet>iterencode</snippet></ROW><ROW><id>5396652</id><snippet>_iterencode</snippet></ROW><ROW><id>5396652</id><snippet>_make_iterencode</snippet></ROW><ROW><id>5396652</id><snippet> _iterencode = _make_iterencode(
        markers, self.default, _encoder, self.indent, floatstr,
        self.key_separator, self.item_separator, self.sort_keys,
        self.skipkeys, _one_shot)
</snippet></ROW><ROW><id>5396766</id><snippet>gnomevfs</snippet></ROW><ROW><id>5396766</id><snippet>mime_get_all_applications</snippet></ROW><ROW><id>5396766</id><snippet>app_info_get_all</snippet></ROW><ROW><id>5396766</id><snippet>app_info_get_for_type</snippet></ROW><ROW><id>5397057</id><snippet>class</snippet></ROW><ROW><id>5397057</id><snippet>global</snippet></ROW><ROW><id>5397545</id><snippet>[[]] * 11</snippet></ROW><ROW><id>5397545</id><snippet>board = [[]]*11
#        ^^ this is called just once

board2 = []
for i in range(11):
    board2.append([])
#                 ^^ this is called 11 times, creating 11 different lists
</snippet></ROW><ROW><id>5397545</id><snippet>[[] for i in range(11)]
</snippet></ROW><ROW><id>5397682</id><snippet>get_object_or_404()</snippet></ROW><ROW><id>5397682</id><snippet>tours_in = Tour.objects.filter(destination=destination_id)
</snippet></ROW><ROW><id>5397838</id><snippet>a = numpy.zeros((1000000,1000),dtype=int)
</snippet></ROW><ROW><id>5397838</id><snippet>numpy</snippet></ROW><ROW><id>5397838</id><snippet>scipy</snippet></ROW><ROW><id>5397838</id><snippet>hdf5</snippet></ROW><ROW><id>5397838</id><snippet>h5py</snippet></ROW><ROW><id>5397838</id><snippet>pytables</snippet></ROW><ROW><id>5397838</id><snippet>netcdf4</snippet></ROW><ROW><id>5397838</id><snippet>netcdf4-python</snippet></ROW><ROW><id>5397921</id><snippet>*</snippet></ROW><ROW><id>5397921</id><snippet>vector[Node]</snippet></ROW><ROW><id>5397921</id><snippet>cdef class Node: 
    pass
cdef vector[Node] list2node():
    pass
cdef vector[int] test_int():
    pass
cdef vector[int*] test_intp(): 
    pass
</snippet></ROW><ROW><id>5397921</id><snippet>static PyTypeObject *__pyx_ptype_3foo_Node = 0;
static std::vector&lt;struct __pyx_obj_3foo_Node *&gt; __pyx_f_3foo_list2node(void);
static std::vector&lt;int&gt; __pyx_f_3foo_test_int(void);
static std::vector&lt;int *&gt; __pyx_f_3foo_test_intp(void);
</snippet></ROW><ROW><id>5398505</id><snippet>import simplejson as json
import sys
import urllib
import traceback, csv, string

# "base" API URL
URL_BASE = 'Some URL'
# set user agent string
urllib.version = "Data Collection Fix it"

page_ids = []

def divide_list(list_, n):
    for i in range(0, len(list_), n):
        yield list_[i:i + n]

def issue_query():

    iFile = open('ReadFromThisFile.txt', "r")
    lines = iFile.readlines()
    #print len(lines)

    for line in lines:
        ids = string.split(line)
        ids = ids[0]
        page_ids.append(ids)            

    url = URL_BASE
    indicies = range(len(page_ids))
    File = open("WriteToThisFile.csv", "w")
    for indicies in divide_list(page_ids, 50):
        count = 0
        fiftyIds =[]
        url = URL_BASE
        for id in indicies:
            str(id).strip
            url += str(id) + '|'
            print url
            fiftyIds.append(str(id))
            count += 1
        print count 
        rv = urllib.urlopen(url)
        j = rv.read().decode("utf-8")
        #sys.stderr.write(j + "\n")
        data = json.loads(j)
        for id in fiftyIds:
            try:
                s = int(data["query"]["pages"][id]["revisions"][0]["size"])
                sys.stderr.write("%d\t%d\n" % (int(id), s))
                File.write("%d\t%d\n" % (int(id), s))
                #print ("%d\t%d\n" % (int(id), s))
                # do something interesting with id and s
            except Exception, e:
                traceback.print_exc()

    File.close()
    iFile.close()

issue_query()
</snippet></ROW><ROW><id>5398618</id><snippet>range()</snippet></ROW><ROW><id>5398618</id><snippet>range()</snippet></ROW><ROW><id>5398618</id><snippet>print()</snippet></ROW><ROW><id>5398847</id><snippet>latin1</snippet></ROW><ROW><id>5398847</id><snippet>cp125x</snippet></ROW><ROW><id>5398847</id><snippet>latin1</snippet></ROW><ROW><id>5398847</id><snippet>'\x93'</snippet></ROW><ROW><id>5398847</id><snippet>cp1252</snippet></ROW><ROW><id>5398847</id><snippet>latin1</snippet></ROW><ROW><id>5398864</id><snippet>import itertools
letters = ('',' ', 'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz')
reverse_dict = dict((str(ind), group)
                    for ind,group in enumerate(letters)
                    for c in group
                    if letters)

print reverse_dict
end_nums = '3965'
print end_nums, 'can produce', tuple(''.join(w) for w in itertools.product(*map(reverse_dict.get, end_nums)))
word = 'word'
print('%r = %s' % (word,''.join(key for c in word for key, item in reverse_dict.items() if c in item)))
</snippet></ROW><ROW><id>5398901</id><snippet>np.fft.fft</snippet></ROW><ROW><id>5398901</id><snippet>A = fft(a, n)</snippet></ROW><ROW><id>5398901</id><snippet>A[0]</snippet></ROW><ROW><id>5398901</id><snippet>A[1:n/2]</snippet></ROW><ROW><id>5398901</id><snippet>A[n/2+1:]</snippet></ROW><ROW><id>5398901</id><snippet>np.fft.fftshift</snippet></ROW><ROW><id>5398901</id><snippet>np.fft.fftshift(A)</snippet></ROW><ROW><id>5398901</id><snippet>np.fft.fftshift</snippet></ROW><ROW><id>5398901</id><snippet>import matplotlib.pyplot as plt
import numpy as np

N = 128
x = np.arange(-5,5,10./(2*N))
y = np.exp(-x*x)
y_fft = np.fft.fftshift(np.abs(np.fft.fft(y)))/ np.sqrt(2 * N)
plt.plot(x,y)
plt.plot(x,y_fft)
plt.show()
</snippet></ROW><ROW><id>5399164</id><snippet>&gt;&gt;&gt; urllib.quote("http://spam.com/go/")
'http%3A%2F%2Fspam.com%2Fgo%2F'
</snippet></ROW><ROW><id>5399202</id><snippet>from numpy import exp
from scipy.integrate import quad

def f(x):
    return exp(x)

result, error = quad(f, 0, 2)
</snippet></ROW><ROW><id>5399203</id><snippet>w.rules.append(Rule(change[:5],change[5]) )
</snippet></ROW><ROW><id>5399337</id><snippet>paramstyle

String constant stating the type of parameter marker
formatting expected by the interface. Possible values are:

'qmark'         Question mark style, 
                e.g. '...WHERE name=?'
'numeric'       Numeric, positional style, 
                e.g. '...WHERE name=:1'
'named'         Named style, 
                e.g. '...WHERE name=:name'
'format'        ANSI C printf format codes, 
                e.g. '...WHERE name=%s'
'pyformat'      Python extended format codes, 
                e.g. '...WHERE name=%(name)s'
</snippet></ROW><ROW><id>5399339</id><snippet>%load_ext autoreload
%autoreload 2
</snippet></ROW><ROW><id>5399339</id><snippet>dreload</snippet></ROW><ROW><id>5399339</id><snippet>%autoreload?</snippet></ROW><ROW><id>5399674</id><snippet>filename</snippet></ROW><ROW><id>5399674</id><snippet>keyString</snippet></ROW><ROW><id>5399674</id><snippet>bucket</snippet></ROW><ROW><id>5399674</id><snippet>list</snippet></ROW><ROW><id>5399674</id><snippet>optparse</snippet></ROW><ROW><id>5399674</id><snippet>bucket</snippet></ROW><ROW><id>5399674</id><snippet>--list</snippet></ROW><ROW><id>5399674</id><snippet>options.bucket</snippet></ROW><ROW><id>5399674</id><snippet>main</snippet></ROW><ROW><id>5399674</id><snippet>def main():
    # much omitted
    if options.filename is not None:
        downnload(options.filename, keyString)
    elif options.bucket is not None:
        blist(options.bucket)
    else:
        print 'Either --download or --list is required.'
        parser.print_help()
        sys.exit(-1)
</snippet></ROW><ROW><id>5399674</id><snippet>--download filename</snippet></ROW><ROW><id>5399674</id><snippet>downnload</snippet></ROW><ROW><id>5399721</id><snippet>readline</snippet></ROW><ROW><id>5399721</id><snippet>raw_input</snippet></ROW><ROW><id>5399826</id><snippet>(r'^(?P&lt;city&gt;[^/]+)/(?P&lt;state&gt;[^/]+)(?P&lt;filters&gt;(?:/[^/]+/[^/]+)*)/?$',
 'views.my_view'),
</snippet></ROW><ROW><id>5399826</id><snippet>filters</snippet></ROW><ROW><id>5399826</id><snippet>(?:/[^/]+/[^/]+)*</snippet></ROW><ROW><id>5399826</id><snippet>/name/value</snippet></ROW><ROW><id>5399826</id><snippet>*</snippet></ROW><ROW><id>5399826</id><snippet>/radius/80/company/mycompany/</snippet></ROW><ROW><id>5399826</id><snippet>company/mycompany</snippet></ROW><ROW><id>5399826</id><snippet>?:</snippet></ROW><ROW><id>5399826</id><snippet>/company/mycompany/radius/</snippet></ROW><ROW><id>5399826</id><snippet>def my_view(request, city, state, filters):
    # Split into a list ['name', 'value', 'name', 'value']. Note we remove the
    # first character of the string as it will be a slash.
    split = filters[1:].split('/')

    # Map into a dictionary {'name': 'value', 'name': 'value'}.
    filters = dict(zip(split[::2], split[1::2]))

    # Get the values you want - the second parameter is the default if none was
    # given in the URL. Note all entries in the dictionary are strings at this
    # point, so you will have to convert to the appropriate types if desired.
    radius = filters.get('radius', None)
    company = filters.get('company', None)

    # Then use the values as desired in your view.
    context = {
        'city': city,
        'state': state,
        'radius': radius,
        'company': company,
    }
    return render_to_response('my_view.html', context)
</snippet></ROW><ROW><id>5399826</id><snippet>/fakefilter/somevalue</snippet></ROW><ROW><id>5399826</id><snippet>radius = filters.pop('radius', None)
company = filters.pop('company', None)
</snippet></ROW><ROW><id>5399826</id><snippet>filters</snippet></ROW><ROW><id>5399826</id><snippet>/radius/80/radius/50</snippet></ROW><ROW><id>5399826</id><snippet>given = set()
for name in split[::2]:
    if name in given:
        # Repeated entry, complain to user or something.
    else:
        given.add(name)
</snippet></ROW><ROW><id>5400389</id><snippet>import murmur3
import timeit

# without seed
print murmur3.murmur3_x86_64('samplebias')
# with seed value
print murmur3.murmur3_x86_64('samplebias', 123)

# timing comparison with str __hash__
t = timeit.Timer("murmur3.murmur3_x86_64('hello')", "import murmur3")
print 'murmur3:', t.timeit()

t = timeit.Timer("str.__hash__('hello')")
print 'str.__hash__:', t.timeit()
</snippet></ROW><ROW><id>5400389</id><snippet>15662901497824584782
7997834649920664675
murmur3: 0.264422178268
str.__hash__: 0.219163894653
</snippet></ROW><ROW><id>5400396</id><snippet>option = 0
comicdb = []

while option != 3:
    print "--------------------------"
    print "1. Add a New Comic Book"
    print "2. Print the Database"
    print "3. Quit"
    option = int(raw_input("Pick an Option: "))
    if option == 1:
        title = raw_input("Comic Book Title: ")
        issue = int(raw_input("Issue Number: "))
        publisher = raw_input("Publisher: ")
        temp_list = []
        temp_list.append(title)
        temp_list.append(issue)
        temp_list.append(publisher)
        comicdb.append(temp_list)
        print comicdb
</snippet></ROW><ROW><id>5400513</id><snippet>print_none()</snippet></ROW><ROW><id>5400513</id><snippet>&gt;&gt;&gt; print_two("Zed","Shaw")
[... etc ...]
</snippet></ROW><ROW><id>5400577</id><snippet>self</snippet></ROW><ROW><id>5400577</id><snippet>self</snippet></ROW><ROW><id>5400577</id><snippet>get</snippet></ROW><ROW><id>5400577</id><snippet>post</snippet></ROW><ROW><id>5400577</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>5400577</id><snippet>self</snippet></ROW><ROW><id>5400577</id><snippet>response</snippet></ROW><ROW><id>5400577</id><snippet>self.response.out.write</snippet></ROW><ROW><id>5400916</id><snippet>defaults={"groups" : True}</snippet></ROW><ROW><id>5400916</id><snippet>form = Form(request, MySchema, defaults={"name" : "foo"})</snippet></ROW><ROW><id>5401048</id><snippet>import json
import csv
f = file('test.json', 'r')
data = json.load(f)
#result = []
for k,v in data.iteritems():
    print k,v
    #result.append(v)
f = file('output.csv', 'w')
writer = csv.writer(f)
writer.writerows(result)
</snippet></ROW><ROW><id>5401401</id><snippet>import abc.efg.hij</snippet></ROW><ROW><id>5401401</id><snippet>find_module</snippet></ROW><ROW><id>5401401</id><snippet>find_module("abc", None)
find_module("abc.efg", abc.__path__)
find_module("abc.efg.hij", abc.efg.__path__)
</snippet></ROW><ROW><id>5401723</id><snippet>import copy

def main():
    titles_list = ["English", "Math", "History", "IT", "Biology", "Spanish"]
    titles_list_orig = copy.deepcopy(titles_list)

    for title in titles_list_orig:
        print "Do you want to keep the title:", title , "\n or Delete it? Input Y for keep, N for Delete "
        Question = raw_input()
        if str(Question.upper()) == "N":
            titles_list.remove(title)

    print titles_list
</snippet></ROW><ROW><id>5401750</id><snippet>from BeautifulSoup  import BeautifulSoup
from django import template
from django.template.defaultfilters import stringfilter
import pygments
import pygments.formatters
import pygments.lexers


register = template.Library()
wanted = {'br': '&lt;br /&gt;', 'BR': '&lt;BR /&gt;', 'nbsp': ' ', 'NBSP': '&amp;NBSP;', '/&gt;': ''}

def uglyfilter(html):
    content = BeautifulSoup(html)
    for node in content.findAll('span'):
        data = ''.join(node.findAll(text=True))
        if wanted.has_key(data):
            node.replaceWith(wanted.get(data))
    return unicode(content)     


@register.filter
@stringfilter
def pygmentized(html):
    soup = BeautifulSoup(html)
    codeblocks = soup.findAll('pre')
    for block in codeblocks:
        if block.has_key('class'):
            try:
                code = ''.join([unicode(item) for item in block.contents])
                lexer = pygments.lexers.get_lexer_by_name(block['class'], stripall=True)
                formatter = pygments.formatters.HtmlFormatter()
                code_hl = pygments.highlight(code, lexer, formatter)
                clean = uglyfilter(code_hl)
                block.contents = [BeautifulSoup(clean)]
                block.name = 'pre'
            except:
                raise
    return unicode(soup)
</snippet></ROW><ROW><id>5402401</id><snippet>\b</snippet></ROW><ROW><id>5402401</id><snippet> re.compile(r'\b\d{2}\.\d{2}\.\d{2}\b')
</snippet></ROW><ROW><id>5402401</id><snippet>\d</snippet></ROW><ROW><id>5402401</id><snippet>{2}</snippet></ROW><ROW><id>5402401</id><snippet>{2}</snippet></ROW><ROW><id>5402401</id><snippet>{1,2}</snippet></ROW><ROW><id>5402526</id><snippet>fscanf</snippet></ROW><ROW><id>5402526</id><snippet>numpy.fromfile</snippet></ROW><ROW><id>5402526</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>5402755</id><snippet> res=[[0]*nodes]*nodes
</snippet></ROW><ROW><id>5402755</id><snippet>&gt;&gt;&gt; nodes = 3
&gt;&gt;&gt; res=[[0]*nodes]*nodes
&gt;&gt;&gt; res
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; res[0][0] = 'echo'
&gt;&gt;&gt; res
[['echo', 0, 0], ['echo', 0, 0], ['echo', 0, 0]]
</snippet></ROW><ROW><id>5402755</id><snippet>&gt;&gt;&gt; id(res[0]), id(res[1]), id(res[2])
(4299671960, 4299671960, 4299671960)
</snippet></ROW><ROW><id>5402755</id><snippet>res=[[0]*nodes for i in range(nodes)]
</snippet></ROW><ROW><id>5402923</id><snippet>keyword.match()</snippet></ROW><ROW><id>5402923</id><snippet>keyword.search()</snippet></ROW><ROW><id>5402923</id><snippet>[</snippet></ROW><ROW><id>5402923</id><snippet>]</snippet></ROW><ROW><id>5402923</id><snippet>(</snippet></ROW><ROW><id>5402923</id><snippet>)</snippet></ROW><ROW><id>5402923</id><snippet>|</snippet></ROW><ROW><id>5402923</id><snippet>keyword = re.compile(r"^[rRyYaAnN]{5}$")
</snippet></ROW><ROW><id>5403329</id><snippet>import cerealizer
#import cPickle as cerealizer

def save(data, filename):
    f = open(filename,"wb")
    cerealizer.dump(data, f, protocol=2)
    f.close()

def load(filename):
    f = open(filename,"rb")
    p = cerealizer.load(f)
    f.close()
    return(p)

if __name__ == "__main__":
    import PIL.Image
    import cStringIO as StringIO

    stringIO = StringIO.StringIO()
    im = PIL.Image.open("picture.jpg")
    im.save(stringIO, "JPEG")

    stringIO.seek(0)
    save(stringIO.read(), "testCerealizerIm.txt")

    binaryImageData = load("testCerealizerIm.txt")

    stringIO2 = StringIO.StringIO()
    stringIO2.write(binaryImageData)

    stringIO2.seek(0)
    im = PIL.Image.open(stringIO2)
    im.show()
</snippet></ROW><ROW><id>5403393</id><snippet>User_Input_list = User_input.split()
</snippet></ROW><ROW><id>5403680</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
engine = create_engine('postgresql+psycopg2://USER:PASSWORD@127.0.0.1:5432/DB_OR_TEMPLATE')
session = sessionmaker(bind=engine)()
session.connection().connection.set_isolation_level(0)
session.execute('CREATE DATABASE test')
session.connection().connection.set_isolation_level(1)
</snippet></ROW><ROW><id>5403680</id><snippet>template1</snippet></ROW><ROW><id>5403680</id><snippet>"""Isolation level values."""
ISOLATION_LEVEL_AUTOCOMMIT     = 0
ISOLATION_LEVEL_READ_COMMITTED = 1
ISOLATION_LEVEL_SERIALIZABLE   = 2
</snippet></ROW><ROW><id>5404566</id><snippet>date_inserted    = models.DateTimeField(auto_now_add=True)
date_last_update = models.DateTimeField(auto_now=True)
</snippet></ROW><ROW><id>5405654</id><snippet>hexbin(x,y,mincnt=1)</snippet></ROW><ROW><id>5405654</id><snippet>from numpy import linspace
from numpy.random import normal
from pylab import hexbin,show

n = 2**6

x = linspace(-1,1,n)
y = normal(0,1,n)

h = hexbin(x,y,gridsize=10,mincnt=0)
</snippet></ROW><ROW><id>5405654</id><snippet>h = hexbin(x,y,gridsize=10,mincnt=1)</snippet></ROW><ROW><id>5405967</id><snippet>input = []
line_count = 0
with open("text.txt","r") as file:
    for line in file:
        input.extend(line.split())
        line_count += 1
</snippet></ROW><ROW><id>5406342</id><snippet>htmlparser</snippet></ROW><ROW><id>5406342</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5406678</id><snippet>parentFolderId = Column(Integer,ForeignKey('FilterFolder.id'))
</snippet></ROW><ROW><id>5406678</id><snippet>parentFolderId = Column(Integer,ForeignKey('SchemaName.FilterFolder.id'))
</snippet></ROW><ROW><id>5406774</id><snippet>'&lt;\/?[ap][^&gt;]*&gt;'</snippet></ROW><ROW><id>5406774</id><snippet>'/'</snippet></ROW><ROW><id>5406774</id><snippet>'[^\w]'</snippet></ROW><ROW><id>5406774</id><snippet>'\W'</snippet></ROW><ROW><id>5406774</id><snippet>'[^\w]+'</snippet></ROW><ROW><id>5406774</id><snippet>'[^\w]'</snippet></ROW><ROW><id>5406774</id><snippet>r'&lt;\/?[ap][^&gt;]*&gt;'</snippet></ROW><ROW><id>5406774</id><snippet>words = f.read().lower()</snippet></ROW><ROW><id>5406774</id><snippet>reg123 = re.compile(r'(&lt;/?[ap][^&gt;]*&gt;|"|\W+)')</snippet></ROW><ROW><id>5406774</id><snippet>words = regex.findall(words)[0]</snippet></ROW><ROW><id>5406774</id><snippet>' '</snippet></ROW><ROW><id>5406774</id><snippet>stopwords = '|'.join(f.read().lower().split())
</snippet></ROW><ROW><id>5406774</id><snippet>filewords[file] = freq</snippet></ROW><ROW><id>5406774</id><snippet>def run():

    from collection import difaultdict

    with open(stopwordfile, 'r') as f:
        stopwords = '|'.join(f.read().lower().split())

    regex = re.compile(r'.*&lt;div class="body"&gt;(.*?)&lt;/div&gt;.*', re.DOTALL)
    reg123 = re.compile(r'(&lt;/?[ap][^&gt;]*&gt;|"|\W+|'+stopwords+')')

    totalfreq = defaultdict(int)
    filewords = {}

    for filename in (fn for fn in os.listdir(path) if fn[-5:] == '.html'):
        with open(path + filename, 'r') as f:
            ch = regex.findall(f.read().lower())[0]
            ch = reg123.sub(' ', ch)
            words = ch.strip().split()

        freq = defaultdict(int)
        for w in words:
            totalfreq[w] += 1
            freq[w] += 1
        filewords[filename] = freq

    print totalfreq
</snippet></ROW><ROW><id>5406938</id><snippet>struct MyLibGuard
{
    MyLibGuard() { myLib::initialize();}
    ~MyLibGuard() { myLib::cleanup();}
};

using namespace boost::python;

BOOST_PYTHON_MODULE(arch_lib)
{
    boost::shared_ptr&lt;MyLibGuard&gt; libGuard = new MyLibGuard();

    class_&lt;MyLibGuard, boost::shared_ptr&lt;MyLibGuard&gt;, boost::noncopyable&gt;("MyLibGuard", no_init);
    scope().attr("__libguard") = libGuard;

}
</snippet></ROW><ROW><id>5407268</id><snippet>import json

#jstr = "... that thing above ..."
# This line only decodes the JSON into a structure in memory:
obj = json.loads(jstr)
# obj, in this case, is a dictionary, a built-in Python type.

# These lines just iterate over that structure.
for ka, va in obj.iteritems():
    print ka
    for kb, vb in va.iteritems():
        print '  ' + kb
        for key, string in vb.iteritems():
            print '    ' + repr((key, string))
</snippet></ROW><ROW><id>5407399</id><snippet>label</snippet></ROW><ROW><id>5407399</id><snippet>plt.legend()</snippet></ROW><ROW><id>5407836</id><snippet>class Book(db.Model):
    #isbn is key, so it shouldn't be a property
    category = db.StringProperty()
    author = db.StringProperty()
    title = db.StringProperty()

new_book = Book(category="fantasy,comedy", title="The Light Fantastic", author="TerryPratchett", key_name=isbn_number)
</snippet></ROW><ROW><id>5407836</id><snippet>isbns = [b.name() for Book.all(keys_only=True)]
</snippet></ROW><ROW><id>5408077</id><snippet>distance()</snippet></ROW><ROW><id>5408077</id><snippet>(x, y)</snippet></ROW><ROW><id>5408077</id><snippet>def distance(p0, p1):
    return math.sqrt((p0[0] - p1[0])**2 + (p0[1] - p1[1])**2)
</snippet></ROW><ROW><id>5408077</id><snippet>fList</snippet></ROW><ROW><id>5408077</id><snippet>iterools.combinations()</snippet></ROW><ROW><id>5408077</id><snippet>min_distance = distance(fList[0], fList[1])
for p0, p1 in itertools.combinations(fList, 2):
    min_distance = min(min_distance, distance(p0, p1))
</snippet></ROW><ROW><id>5408077</id><snippet>distance()</snippet></ROW><ROW><id>5408077</id><snippet>def distance(points):
    p0, p1 = points
    return math.sqrt((p0[0] - p1[0])**2 + (p0[1] - p1[1])**2)
</snippet></ROW><ROW><id>5408077</id><snippet>key</snippet></ROW><ROW><id>5408077</id><snippet>min()</snippet></ROW><ROW><id>5408077</id><snippet>min_pair = min(itertools.combinations(fList, 2), key=distance)
min_distance = distance(min_pair)
</snippet></ROW><ROW><id>5408310</id><snippet>socket</snippet></ROW><ROW><id>5408310</id><snippet>ITransport</snippet></ROW><ROW><id>5408310</id><snippet>getHandle</snippet></ROW><ROW><id>5408310</id><snippet>self.xmlstream.transport.getHandle().getpeername()
</snippet></ROW><ROW><id>5408374</id><snippet>script</snippet></ROW><ROW><id>5408374</id><snippet>- url: /
  static_files: main.html
  upload: main.html
</snippet></ROW><ROW><id>5408843</id><snippet>phi = random(0,2pi)
costheta = random(-1,1)
u = random(0,1)

theta = arccos( costheta )
r = R * cuberoot( u )
</snippet></ROW><ROW><id>5408843</id><snippet>(r, theta, phi)</snippet></ROW><ROW><id>5408843</id><snippet>(x, y, z)</snippet></ROW><ROW><id>5408843</id><snippet>x = r * sin( theta) * cos( phi )
y = r * sin( theta) * sin( phi )
z = r * cos( theta )
</snippet></ROW><ROW><id>5408986</id><snippet>matplotlib.pyplot.xlabel(r'Sarcomere Length ($\mu m$)')</snippet></ROW><ROW><id>5409397</id><snippet>while len(res) &lt; 2:
    if b not in res:
        res.append(b)
        b = random.randrange(1, 11, 1)
</snippet></ROW><ROW><id>5409397</id><snippet>while len(res) &lt; 2:
    if b not in res:
        res.append(b)
    b = random.randrange(1, 11, 1)
</snippet></ROW><ROW><id>5409569</id><snippet>def composed(*decs):
    def deco(f):
        for dec in reversed(decs):
            f = dec(f)
        return f
    return deco
</snippet></ROW><ROW><id>5409569</id><snippet>@composed(dec1, dec2)
def some(f):
    pass
</snippet></ROW><ROW><id>5409569</id><snippet>@dec1
@dec2
def some(f):
    pass
</snippet></ROW><ROW><id>5410554</id><snippet>sniff</snippet></ROW><ROW><id>5410554</id><snippet>pkts_rxd = []
def process_and_send(pkt):
    pkts_rxd.append(pkt)
    sendp(pkt, 'eth1')
sniff(prn=process_and_send, iface='eth0', count=100)
</snippet></ROW><ROW><id>5410554</id><snippet>count=0</snippet></ROW><ROW><id>5410554</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>5410554</id><snippet>./setup.py install</snippet></ROW><ROW><id>5410752</id><snippet>&gt;&gt;&gt; l = []
&gt;&gt;&gt; l.append('banana')
&gt;&gt;&gt; print l[0]
banana
&gt;&gt;&gt; l.append('apple')
&gt;&gt;&gt; print l[0]
banana
&gt;&gt;&gt; print l
['banana', 'apple']
</snippet></ROW><ROW><id>5410789</id><snippet>for i in dict.keys():
    print "Group", i
    for j in dict[i].keys():
        print "Item", j, "Value", dict[i][j]
</snippet></ROW><ROW><id>5410993</id><snippet>Mp = (1&lt;&lt;p) - 1</snippet></ROW><ROW><id>5410993</id><snippet>while n &gt; Mp:</snippet></ROW><ROW><id>5410993</id><snippet>while n.bit_length() &gt; p:</snippet></ROW><ROW><id>5411660</id><snippet>fileinput</snippet></ROW><ROW><id>5411660</id><snippet>with open("test.txt") as file:
    for line in file:
        line = line.rstrip()
        if line:
            print line
</snippet></ROW><ROW><id>5411766</id><snippet>xml.etree</snippet></ROW><ROW><id>5411766</id><snippet>from lxml import etree

parser = etree.XMLParser(remove_comments=False)
tree = etree.parse('input.xml', parser=parser)
# or alternatively set the parser as default:
# etree.set_default_parser(parser)
</snippet></ROW><ROW><id>5411828</id><snippet>ret = unicode(b.strip('"'), encoding='utf-8', errors='ignore') 
</snippet></ROW><ROW><id>5411938</id><snippet>boost::python::import("module_name")</snippet></ROW><ROW><id>5411938</id><snippet>attr()</snippet></ROW><ROW><id>5411938</id><snippet>boost::python::object getattr(const boost::python::object &amp;obj, const std::string &amp;name)
{
    try
    {
        return obj.attr(boost::python::str::str(name));

    }
    catch(const boost::python::error_already_set &amp;err)
    {
        /* we need to fetch the error indicators *before*
         * importing anything, as apparently importing
         * using boost python clears the error flags.
         */

        PyObject *e, *v, *t;
        PyErr_Fetch(&amp;e, &amp;v, &amp;t);

        boost::python::object AttributeError = boost::python::import("exceptions").attr("AttributeError");

        /* Squash the exception only if it's an AttributeError, otherwise
         * let the exception propagate.
         */
        if (PyErr_GivenExceptionMatches(AttributeError.ptr(), e))
            return boost::python::object(); // None

        else
            throw;
    }
}

[... later in the code ...]

using namespace boost::python;

object main_module = import("__main__");
object main_namespace = main_module.attr("__dict__");


object your_module = import("module_name");
object your_class = getattr(main_namespace, "SomeCoolObject");

// Now we can test if the class existed in the file
if (!your_class.is_none())
{
     // it exists! Have fun.
}
</snippet></ROW><ROW><id>5411966</id><snippet>cdef</snippet></ROW><ROW><id>5411966</id><snippet>def</snippet></ROW><ROW><id>5412588</id><snippet>username</snippet></ROW><ROW><id>5412588</id><snippet>global</snippet></ROW><ROW><id>5412588</id><snippet>global username
username = ...
</snippet></ROW><ROW><id>5412588</id><snippet>User</snippet></ROW><ROW><id>5412588</id><snippet>Settings</snippet></ROW><ROW><id>5412700</id><snippet>element.string</snippet></ROW><ROW><id>5412700</id><snippet>None</snippet></ROW><ROW><id>5412700</id><snippet>element</snippet></ROW><ROW><id>5412700</id><snippet>print element.find('a', {'class' : 'fn openPreview'}).contents[0].string
</snippet></ROW><ROW><id>5413283</id><snippet>diffopt</snippet></ROW><ROW><id>5413283</id><snippet>autocmd FileType python</snippet></ROW><ROW><id>5413283</id><snippet>set noexpandtab</snippet></ROW><ROW><id>5413283</id><snippet>set list</snippet></ROW><ROW><id>5413504</id><snippet>PIL</snippet></ROW><ROW><id>5413504</id><snippet>greyscaleIm = Image.open(filename).convert("L")</snippet></ROW><ROW><id>5413588</id><snippet>#!/usr/bin/python
from subprocess import Popen, PIPE, STDOUT
import pty
import os

cmd = 'socat -d -d PTY: PTY:'

master, slave = pty.openpty()

p = Popen(cmd, shell=True, stdin=PIPE, stdout=slave, stderr=slave, close_fds=True)
stdout = os.fdopen(master)
print stdout.readline()
print stdout.readline()
</snippet></ROW><ROW><id>5413777</id><snippet>string = raw_input("String: ")
print(list(string))
</snippet></ROW><ROW><id>5413859</id><snippet>import csv
def phoneNumber(number):
    ...
def userName(name):
    ...
def targetDate(datestring):
    ...
control = [phoneNumber, userName, userName, targetDate]
with open("csvFile", "r") as inFile:
    reader = csv.reader(inFile)
    for row in reader:
        for op, item in zip(control, row):
            op(item)
</snippet></ROW><ROW><id>5413928</id><snippet>import csv

data_row = [1, 2.0, "three", "pi,plus,one"]

# Assuming Python 2.x
# ...in Python 3 use text mode: open("...", 'w', newline='')
with open("datafile.csv", 'wb') as datafile:
    datawriter = csv.writer(datafile)
    datawriter.writerow(data_row)
</snippet></ROW><ROW><id>5413928</id><snippet>join</snippet></ROW><ROW><id>5414105</id><snippet>formats</snippet></ROW><ROW><id>5414105</id><snippet>from math import log10

class Formatter(object):
    def __init__(self):
        self.formats = (('%1.1f', 0),
                        ('%2.1f', 0),
                        ('%1.2f K', 3),
                        ('%1.2f K', 3),
                        ('%2.1f K', 3),
                        ('%1.2f M', 6),
                        ('%1.2f M', 6),
                        ('%2.1f M', 6),
                        ('%1.2f B', 9),
                        ('%1.2f B', 9),
                        ('%2.1f B', 9),
                        ('%1.2f T', 12),
                        ('%1.2f T', 12),
                        ('%2.1f T', 12))

    def human_readable(self, x):
        if x == 0: return '0'
        magnitude = int(log10(abs(x)))
        if magnitude &gt; 13: format_str, denominator_mag = '%i T', 12
        else: format_str, denominator_mag = self.formats[magnitude]
        return (format_str % (x * 1.0 / (10 ** denominator_mag))).lstrip('0')
</snippet></ROW><ROW><id>5414105</id><snippet>def human_readable(self, x):
    if x == 0: return '0'
    magnitude = int(log10(abs(x)))
    if magnitude &gt; 13: 
        format_str = '%i T'
        denominator_mag = 12
    else: 
        float_fmt = '%2.1f ' if magnitude % 3 == 1 else '%1.2f '
        illion = (magnitude + 1) // 3
        format_str = float_fmt + ['', 'K', 'M', 'B', 'T'][illion]
        denominator_mag = illion * 3
    return (format_str % (x * 1.0 / (10 ** denominator_mag))).lstrip('0')
</snippet></ROW><ROW><id>5414574</id><snippet>224</snippet></ROW><ROW><id>5414690</id><snippet>soffice "-accept=socket,host=0,port=2002;urp;"</snippet></ROW><ROW><id>5414690</id><snippet>import uno
import socket  # only needed on win32-OOo3.0.0 

# get the uno component context from the PyUNO runtime
localContext = uno.getComponentContext()     

# create the UnoUrlResolver
resolver = localContext.ServiceManager.createInstanceWithContext(
                       "com.sun.star.bridge.UnoUrlResolver", localContext )

# connect to the running office
ctx = resolver.resolve( "uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext" )
smgr = ctx.ServiceManager  
# get the central desktop object
desktop = smgr.createInstanceWithContext( "com.sun.star.frame.Desktop",ctx)

# access the current writer document
model = desktop.getCurrentComponent()

try:
    sheets = model.getSheets()
except Exception:
    raise TypeError("Model retrived was not a spreadsheet")

sheet1 = getattr(sheets, sheets.ElementNames[0])

# At this point, you can use "dir" to check the methods and 
# attributes available for the sheet
# the methots "getCellByPosition, to retrieve a cell object,
# which has "getFormula" and "setFormula"
# methods. 

for i in xrange(10):
    for j in xrange(10):
        cell = sheet1.getCellByPosition(i, j)
        cell.setFormula(str(i * j))

c1 = sheet1.getCellByPosition(1,1)
</snippet></ROW><ROW><id>5414716</id><snippet>import Image
from numpy import *

data = random.random((2, 2))
img1 = Image.fromarray(data)
img1.save('test.tiff')
img2 = Image.open('test.tiff')

f1 = list(img1.getdata())
f2 = list(img2.getdata())
print f1 == f2
print f1
</snippet></ROW><ROW><id>5414716</id><snippet>True
[0.27724304795265198, 0.12728925049304962, 0.4138914942741394, 0.57919681072235107]
</snippet></ROW><ROW><id>5414883</id><snippet>&gt;&gt;&gt; unicodedata.category(u'a')
'Ll'
&gt;&gt;&gt; unicodedata.category(u'.')
'Po'
&gt;&gt;&gt; unicodedata.category(u',')
'Po'
</snippet></ROW><ROW><id>5414883</id><snippet>&gt;&gt;&gt; unicodedata.category(u'\ufeff')
'Cf'
</snippet></ROW><ROW><id>5414924</id><snippet># forms.py

from django import forms
from django.contrib import admin

class ProductAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(ProductAdminForm, self).__init__(*args, **kwargs)
        self.fields['tags'].label = 'Custom Label'
</snippet></ROW><ROW><id>5414924</id><snippet>from django.contrib import admin
from models import Product
from forms import ProductAdminForm

class ProductAdmin(admin.ModelAdmin):
    form = ProductAdminForm

admin.site.register(Product, ProductAdmin)
</snippet></ROW><ROW><id>5414924</id><snippet>docs</snippet></ROW><ROW><id>5414924</id><snippet>class MyModelChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return obj.name_with_model()
</snippet></ROW><ROW><id>5414924</id><snippet>class SmallPartAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(SmallPartAdminForm, self).__init__(*args, **kwargs)
        self.fields['parent'] = MyModelChoiceField(queryset=Part.objects.all())
</snippet></ROW><ROW><id>5415005</id><snippet>&gt;&gt;&gt; int_list=[1, 700, 76093, 71365, 35837, 75671]
&gt;&gt;&gt; str_list = [str(i).zfill(5) for i in int_list]
&gt;&gt;&gt; filtered =  [s for s in str_list if re.match('\d[0-4,8-9][1-5]\d\d', s)]
&gt;&gt;&gt; filtered
['71365']
</snippet></ROW><ROW><id>5415005</id><snippet>zfill</snippet></ROW><ROW><id>5415005</id><snippet>rjust</snippet></ROW><ROW><id>5415005</id><snippet>&gt;&gt;&gt; int_list=[1,700,76093,71365,35837,75671,500]
&gt;&gt;&gt; str_list = [str(i).rjust(5) for i in int_list]
&gt;&gt;&gt; re_str = '\d' + str(list(set([0, 1, 3, 4, 8, 9]))) + str(list(set([1, 2, 3, 4, 5]))) + '\d\d'
&gt;&gt;&gt; filtered =  [s for s in str_list if re.match(re_str, s)]
&gt;&gt;&gt; filtered
['71365']
</snippet></ROW><ROW><id>5415068</id><snippet>A standard Python dictionary containing all available HTTP headers. 
Available headers depend on the client and server, but here are some examples:

        CONTENT_LENGTH
        CONTENT_TYPE
        HTTP_ACCEPT_ENCODING
        HTTP_ACCEPT_LANGUAGE
        HTTP_HOST -- The HTTP Host header sent by the client.
        HTTP_REFERER -- The referring page, if any.
        HTTP_USER_AGENT -- The client's user-agent string.
        QUERY_STRING -- The query string, as a single (unparsed) string.
        REMOTE_ADDR -- The IP address of the client.
        REMOTE_HOST -- The hostname of the client.
        REMOTE_USER -- The user authenticated by the Web server, if any.
        REQUEST_METHOD -- A string such as "GET" or "POST".
        SERVER_NAME -- The hostname of the server.
        SERVER_PORT -- The port of the server.
</snippet></ROW><ROW><id>5415068</id><snippet>if request.META['HTTP_USERNAME']:
    blah
else:
    blah
</snippet></ROW><ROW><id>5415327</id><snippet>answer in ["yes", "Yes", "Y", "y", "why not"]</snippet></ROW><ROW><id>5415327</id><snippet>answer in ("yes", "Yes", "Y", "y", "why not")</snippet></ROW><ROW><id>5415327</id><snippet>allowables = set(["yes", "Yes", "Y", "y", "why not"])</snippet></ROW><ROW><id>5415327</id><snippet>answer in allowables</snippet></ROW><ROW><id>5415360</id><snippet>import numpy as np
arr = np.fromstring(buff,dtype=np.uint16).astype(np.uint32)
arr = ((arr &amp; 0xF800) &lt;&lt; 16) + ((arr &amp; 0x07E0) &lt;&lt; 13) + ((arr &amp; 0x001F) &lt;&lt; 11) + 0xFF
return Image.frombuffer('RGBA', (xdim,ydim), arr, 'raw', 'RGBA', 0, 1)
</snippet></ROW><ROW><id>5415360</id><snippet>frombuffer</snippet></ROW><ROW><id>5415581</id><snippet>int</snippet></ROW><ROW><id>5415581</id><snippet>ValueError</snippet></ROW><ROW><id>5415581</id><snippet>str</snippet></ROW><ROW><id>5415581</id><snippet>int</snippet></ROW><ROW><id>5415581</id><snippet># keep asking for input until we get the right one
while True:
    myInput = input('give me a number: ')
    try:
        myValue = int(myInput)
        # if we reach this point, that means we got our number
        break # this will jump out of the loop
    except ValueError:
        # if we reach this point, that means the input was bad
        print('invalid input')
</snippet></ROW><ROW><id>5415676</id><snippet>&lt;A&gt;</snippet></ROW><ROW><id>5415676</id><snippet>target="_blank"</snippet></ROW><ROW><id>5416632</id><snippet>#-*- coding: utf-8 -*-
from __future__ import print_function

import gzip
import StringIO
import urllib2
from BeautifulSoup import BeautifulSoup

url = 'http://iccna.blog.sohu.com/164572951.html'
response = urllib2.urlopen(url)
data = response.read()
data = StringIO.StringIO(data)
gzipper = gzip.GzipFile(fileobj=data)
html = gzipper.read()
soup = BeautifulSoup(html, fromEncoding='gbk')
print(soup)
</snippet></ROW><ROW><id>5416660</id><snippet>myxml = """\
&lt;data&gt;
    &lt;element&gt;
        &lt;name&gt;myname&lt;/name&gt;
    &lt;/element&gt;
    &lt;element&gt;
        &lt;code&gt;3&lt;/code&gt;
        &lt;name&gt;another name&lt;/name&gt;
    &lt;/element&gt;
&lt;/data&gt;
"""

dom = xml.dom.minidom.parseString(myxml)
nodelist = dom.getElementsByTagName("element")[1].getElementsByTagName("name")
for node in nodelist:
    print node.toxml()
</snippet></ROW><ROW><id>5416884</id><snippet>rect = imread('rect.jpg');
rectfft = fft2(rect);
pcolor(log10(abs(rectfft)));
shading flat
</snippet></ROW><ROW><id>5417057</id><snippet>Dummy</snippet></ROW><ROW><id>5417057</id><snippet>Dummy</snippet></ROW><ROW><id>5417057</id><snippet>PyGILState_Ensure</snippet></ROW><ROW><id>5417057</id><snippet>PyGILState_Release</snippet></ROW><ROW><id>5417911</id><snippet>a</snippet></ROW><ROW><id>5417911</id><snippet>b</snippet></ROW><ROW><id>5417916</id><snippet>import logging
l=logging.getLogger('myapp.lib')
l.warn("foo")
</snippet></ROW><ROW><id>5417916</id><snippet>__name__</snippet></ROW><ROW><id>5417916</id><snippet>__main__</snippet></ROW><ROW><id>5418946</id><snippet>ax = fig.add_subplot(111, aspect="equal")
</snippet></ROW><ROW><id>5419072</id><snippet>import hashlib
import bencode
data = ['only', 'lists', [1,2,3], 
'dictionaries', {'a':0,'b':1}, 'numbers', 47, 'strings']
data_md5 = hashlib.md5(bencode.bencode(data)).hexdigest()
print data_md5
</snippet></ROW><ROW><id>5419072</id><snippet>af1b88ca9fd8a3e828b40ed1b9a2cb20
</snippet></ROW><ROW><id>5419129</id><snippet>#!/usr/bin/python
import wx

class SpinStepCtrl(wx.SpinCtrl):
    def __init__(self, *args, **kwargs):
        wx.SpinCtrl.__init__(self, *args, **kwargs)
        self.step = 99
        self.last_value = 0
        self.Bind(wx.EVT_SPINCTRL, self.OnSpin)

    def OnSpin(self, event):
        delta = self.GetValue() - self.last_value
        if delta == 0:
            return
        elif delta &gt; 0:
            self.last_value = self.GetValue() + self.step
        else:
            self.last_value = self.GetValue() - self.step
        self.SetValue(self.last_value)

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.spin = SpinStepCtrl(self.panel, min=0, max=1000)
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>5419488</id><snippet>'\r'</snippet></ROW><ROW><id>5419488</id><snippet>for x in range(10):
    print '{0}\r'.format(x),
print
</snippet></ROW><ROW><id>5419964</id><snippet>#!/usr/bin/env python

import time, web

urls = (
  '/', 'index'
)

web.config.debug = False
app = web.application(urls, globals())

class index:
    def GET(self):
        time.sleep(10)
        return "Hello, world!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>5420217</id><snippet>Integers</snippet></ROW><ROW><id>5420217</id><snippet>sort</snippet></ROW><ROW><id>5420217</id><snippet>sorted([node, a_node, next_node], key=lambda revision: revision.rev.revid))
</snippet></ROW><ROW><id>5420217</id><snippet>Integer</snippet></ROW><ROW><id>5420217</id><snippet>__str__</snippet></ROW><ROW><id>5420479</id><snippet>&gt;</snippet></ROW><ROW><id>5420479</id><snippet>On Thu, Mar 24, 2011 at 3:51 PM, &lt;test@test.com&gt; wrote:</snippet></ROW><ROW><id>5420479</id><snippet>:</snippet></ROW><ROW><id>5420479</id><snippet>.</snippet></ROW><ROW><id>5420479</id><snippet>:</snippet></ROW><ROW><id>5420479</id><snippet>SHIFT+.</snippet></ROW><ROW><id>5420500</id><snippet>&lt;r/&gt;</snippet></ROW><ROW><id>5420500</id><snippet>etree.strip_elements</snippet></ROW><ROW><id>5420500</id><snippet>from lxml import etree

data = '''&lt;everything&gt;
&lt;m&gt;Some text before &lt;r/&gt;&lt;/m&gt;
&lt;m&gt;&lt;r/&gt; and some text after.&lt;/m&gt;
&lt;m&gt;&lt;r/&gt;&lt;/m&gt;
&lt;m&gt;Text before &lt;r/&gt; and after&lt;/m&gt;
&lt;m&gt;&lt;b/&gt; Text after a sibling &lt;r/&gt; Text before a sibling&lt;b/&gt;&lt;/m&gt;
&lt;/everything&gt;
'''

f = etree.fromstring(data)
for r in f.xpath('//r'):
  r.tail = 'DELETED' + r.tail if r.tail else 'DELETED'

etree.strip_elements(f,'r',with_tail=False)

print etree.tostring(f,pretty_print=True)
</snippet></ROW><ROW><id>5420500</id><snippet>&lt;everything&gt;
&lt;m&gt;Some text before DELETED&lt;/m&gt;
&lt;m&gt;DELETED and some text after.&lt;/m&gt;
&lt;m&gt;DELETED&lt;/m&gt;
&lt;m&gt;Text before DELETED and after&lt;/m&gt;
&lt;m&gt;&lt;b/&gt; Text after a sibling DELETED Text before a sibling&lt;b/&gt;&lt;/m&gt;
&lt;/everything&gt;
</snippet></ROW><ROW><id>5420648</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>5420648</id><snippet>{% staticimg sunset %}</snippet></ROW><ROW><id>5420648</id><snippet>&lt;img src='http://instagram.appspot.com/image/serve/sunset.jpg'&gt;</snippet></ROW><ROW><id>5420648</id><snippet>&lt;img src='http://cheapo-cdn.com/image/serve/sunset.jpg'&gt;</snippet></ROW><ROW><id>5420661</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup('&lt;a href="path/tomyhtml/foo.html"&gt;foo&lt;/a&gt;')
soup.a["title"] = "Some cool title"
</snippet></ROW><ROW><id>5420727</id><snippet>re.sub( 
      "(\d+)-(\d+)" ,        
      lambda x : ",".join( map( str , range( int(x.group(1)) , int( x.group(2) ) +1 ) )) , 
      "1,3-5,7" )
</snippet></ROW><ROW><id>5420820</id><snippet>__init__</snippet></ROW><ROW><id>5420820</id><snippet>__init__</snippet></ROW><ROW><id>5420820</id><snippet>.get()</snippet></ROW><ROW><id>5420820</id><snippet>__init__</snippet></ROW><ROW><id>5420820</id><snippet>__init__</snippet></ROW><ROW><id>5420820</id><snippet>feed = Feed(link=link, startDate=sDate, endDate=eDate)
</snippet></ROW><ROW><id>5421011</id><snippet>&lt;form name="myform" id="myformid"  method="POST" action="http://10.1.0.90:8080/filter/" onSubmit="javascript:return isEmpty();" &gt;

Filter By: 
&lt;select name="choices" id ="choicesId"  style="color: black; background-color: #BDBDBD" &gt;

    &lt;option value="Name"&gt;Name&lt;/option&gt; 
    &lt;option value="Designation" &gt;Designation&lt;/option&gt;
    &lt;option value="EmployeeID" id="empid"&gt;EmployeeID&lt;/option&gt;
    &lt;option value="Project" &gt;Project&lt;/option&gt;
    &lt;option value="DateOfJoin" &gt;Date Of Join&lt;/option&gt;
    &lt;option value="location" &gt;Location&lt;/option&gt;
    &lt;option value="email"&gt;Email&lt;/option&gt;    
    &lt;option value="skills"&gt;Skills&lt;/option&gt;
&lt;/select&gt;
&lt;input id="textField" type="text" name="textField" style="color: black; background-color: #BDBDBD" value="" / &gt;
&lt;input type="submit" value="Go"/&gt;
&lt;/form&gt;

&lt;table id="employeeTable" class="tablesorter"&gt;
&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Employee List &lt;!-- &lt;input type="image" src="/static/sort_asc.gif " height="12" name="sortAscend"&gt; --&gt; &lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;br&gt;
&lt;tbody&gt;
{%for emp in emp_list.object_list%}
    &lt;tr&gt; 
        &lt;td&gt;&lt;a STYLE="text-decoration:none" href ="http://10.1.0.90:8080/singleEmployee/{{emp.id}} "&gt; {{ emp.userName }} &lt;/a&gt;&lt;/td&gt;
     &lt;/tr&gt;
{%endfor%}
&lt;/tbody&gt;
&lt;/table&gt;&lt;/h4&gt;
&lt;/div&gt;&lt;br&gt;&lt;br&gt;
&lt;a STYLE="text-decoration:none" href="http://10.1.0.90:8080/createEmployee/ "&gt;Create New Employee &lt;/a&gt;

&lt;script type="text/javascript"&gt;
function isEmpty(){
    var my_select = document.myform.choices;
    var selected_index = my_select.selectedIndex;
    var my_textfield = document.getElementById('textField');
    if ((my_select[selected_index].value == 'EmployeeID')  &amp;&amp; ((my_textfield.value=='') || (my_textfield.value==null))) {
        alert("Enter employee ID!");
        my_textfield.focus();
        return false;
    }
    else{ 
        alert("Data entered");
        return true; 
    }
}
&lt;/script&gt;
</snippet></ROW><ROW><id>5421287</id><snippet>atlas% telnet chaos 143
Trying 192.168.1.5...
Connected to chaos
Escape character is '^]'.
* OK chaos Cyrus IMAP4 v2.2.13-Debian-2.2.13-19 server ready
</snippet></ROW><ROW><id>5421374</id><snippet>#!BPY

"""
Name: 'Set rotation by accelerometer'
Blender: 249
Group: 'Object'
Tooltip: 'Set the selected objects rotation by accelerometer'
"""

__bpydoc__=\
'''
This script sets the selected objects rotation by accelerometer.
'''

from Blender import Draw, Scene
import math

def reorient(alpha, beta, gamma):
    a = math.cos(alpha)
    b = math.sin(alpha)
    c = math.cos(beta)
    d = math.sin(beta)
    e = math.cos(gamma)
    f = math.sin(gamma)

    ad = a*d
    bd = b*d

    return = [
        [c*e, -a*f+b*d*e, b*f+a*d*e],
        [c*f, a*e+b*d*f, -b*e+a*d*f],
        [-d,  b*c,        a*c      ]
    ]

def getAccel():
    # test stub -
    # need to get actual values from accelerometer here
    dx = -700
    dy = 100
    dz = 250
    return (dx,dy,dz)

def normalize(vec):
    "Return scaled unit vector"
    x,y,z = vec
    mag = (x*x + y*y + z*z)**0.5
    return (x/mag, y/mag, z/mag)

def main():
    scn = Scene.GetCurrent()
    try:
        obj = scn.objects.context
        euler = (obj.RotX, obj.RotY, obj.RotZ)
    except AttributeError:
        return

    down = normalize(getAccel())
    matrix = None
    # do something here to find new rotation-matrix
    #   based on euler and down
    # then

    if matrix:
        obj.setOrientation(matrix)
    else:
        # test value:
        # if reorient() is working properly, the
        # object's rotation should not change!
        obj.setOrientation(reorient(*euler))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5421511</id><snippet>psycopg2</snippet></ROW><ROW><id>5421511</id><snippet>python setup.py install
</snippet></ROW><ROW><id>5421511</id><snippet>easy_install psycopg2</snippet></ROW><ROW><id>5421511</id><snippet>pip install psycopg2</snippet></ROW><ROW><id>5421511</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'db_name',                      
        'USER': 'db_user',
        'PASSWORD': 'db_user_password',
        'HOST': ''
    }
}
</snippet></ROW><ROW><id>5421671</id><snippet>os.walk</snippet></ROW><ROW><id>5421671</id><snippet>def getInfos(currentDir):
    infos = []
    for root, dirs, files in os.walk(currentDir): # Walk directory tree
        for f in files:
            infos.append(FileInfo(f,root))
    return infos
</snippet></ROW><ROW><id>5421853</id><snippet>{'PAP': 10, 'btw': 10, 'via': 20, 'crowd': 10, 'is': 10, 'half': 10, 'anyway': 10, "#fb'": 10, 'items': 10, '[@leynaaaa': 10, 'are': 10}
</snippet></ROW><ROW><id>5421853</id><snippet>items</snippet></ROW><ROW><id>5421853</id><snippet>items</snippet></ROW><ROW><id>5421853</id><snippet>items</snippet></ROW><ROW><id>5421853</id><snippet>{'latest_status': tags.items()}</snippet></ROW><ROW><id>5421853</id><snippet>{% for k, v in latest_status %}</snippet></ROW><ROW><id>5422309</id><snippet>We are the knights who say NI! NI NI NI NI NI NI NI NI</snippet></ROW><ROW><id>5422309</id><snippet>NI</snippet></ROW><ROW><id>5422309</id><snippet>###</snippet></ROW><ROW><id>5422309</id><snippet>import re
zen = """Beautiful is better than ugly. \
Explicit is better than implicit. \
Simple is better than complex. \
Complex is better than complicated. \
Flat is better than nested. \
Sparse is better than dense. \
Readability counts. \
Special cases aren't special enough to break the rules. \
Although practicality beats purity. \
Errors should never pass silently. \
Unless explicitly silenced. \
In the face of ambiguity, refuse the temptation to guess. \
There should be one-- and preferably only one --obvious way to do it. \
Although that way may not be obvious at first unless you're Dutch. \
Now is better than never. \
Although never is often better than *right* now. \
If the implementation is hard to explain, it's a bad idea. \
If the implementation is easy to explain, it may be a good idea. \
Namespaces are one honking great idea -- let's do more of those!"""

searchvar = 'Dutch'
dutchre = re.compile(r"""((?:\S+\s*){,5})(%s)((?:\S+\s*){,5})""" % searchvar, re.IGNORECASE | re.MULTILINE)
print dutchre.findall(zen)
#[("obvious at first unless you're ", 'Dutch', '. Now is better than ')]
</snippet></ROW><ROW><id>5422309</id><snippet>def splitAndFind(text, phrase):
    text2 = text.replace(phrase, "###").split("###")
    if len(text2) &gt; 1:
        return ((text2[0].split()[-5:], text2[1].split()[:5]))
print splitAndFind(zen, 'Dutch')
#(['obvious', 'at', 'first', 'unless', "you're"],
# ['.', 'Now', 'is', 'better', 'than'])
</snippet></ROW><ROW><id>5422309</id><snippet>timeit dutchre.findall(zen)
1000 loops, best of 3: 814 us per loop

timeit 'Dutch' in zen
1000000 loops, best of 3: 650 ns per loop

timeit zen.find('Dutch')
1000000 loops, best of 3: 812 ns per loop

timeit splitAndFind(zen, 'Dutch')
10000 loops, best of 3: 18.8 us per loop
</snippet></ROW><ROW><id>5422365</id><snippet>output = sett(line.rstrip() for line in fa)</snippet></ROW><ROW><id>5422365</id><snippet>output.sort(key=kl)</snippet></ROW><ROW><id>5422365</id><snippet>set()</snippet></ROW><ROW><id>5422365</id><snippet>set()</snippet></ROW><ROW><id>5422365</id><snippet>cmp()</snippet></ROW><ROW><id>5422365</id><snippet>time.mktime(time.strptime(( 1st date-and-hour in line ,'%d/%m/%y %H:%M:%S'))
</snippet></ROW><ROW><id>5422365</id><snippet>output = [ (kl(line),line.rstrip()) for line in output]
</snippet></ROW><ROW><id>5422365</id><snippet>def kl(line,pat = pat):
    return time.mktime(time.strptime((pat.search(line).group()),'%d/%m/%y %H:%M:%S'))

output = [ (kl(line),line.rstrip()) for line in output if line.rstrip()]

output.sort()
</snippet></ROW><ROW><id>5422365</id><snippet>kl()</snippet></ROW><ROW><id>5422365</id><snippet>def kl(line,pat = pat):
    return time.mktime(time.strptime(line.split('\t')[-2],'%d/%m/%y %H:%M:%S'))
</snippet></ROW><ROW><id>5422365</id><snippet>cmp()</snippet></ROW><ROW><id>5422365</id><snippet>output = [ (kl(line),line.rstrip()) for line in output]
</snippet></ROW><ROW><id>5422365</id><snippet>def mycmp(a,b):
    return cmp(time.mktime(time.strptime(a.split('\t')[-2],'%d/%m/%y %H:%M:%S')),
               time.mktime(time.strptime(b.split('\t')[-2],'%d/%m/%y %H:%M:%S')))

output = [ line.rstrip() for line in output] # not list(output) , to avoid the problem of newline of the last line of each file
output.sort(mycmp)

for line in output:
    fm.write(line+'\n')
</snippet></ROW><ROW><id>5422365</id><snippet>#!/usr/bin/env python

import os, time, sys, re
from sets import Set as sett

def sorting_merge(o_file , c_file, m_file ):

    pat = re.compile('[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
                     '(?=[ \t]+[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d)') 

    def kl(line,pat = pat):
        return time.mktime(time.strptime((pat.search(line).group()),'%d/%m/%y %H:%M:%S'))

    output = sett()
    head = []

    fa = open(o_file)
    fa.readline() # first line is skipped
    while True:
        line1 = fa.readline()
        mat1  = pat.search(line1)
        if not mat1: head.append(line1) # line1 is here a line of the header
        else: break # the loop ends on the first line1 not being a line of the heading
    output = sett( fa )
    fa.close()

    fb = open(c_file)
    while True:
        line1 = fb.readline()
        if pat.search(line1):  break
    output = output.union(sett( fb ))
    fb.close()

    output = [ (kl(line),line.rstrip()) for line in output]
    output.sort()

    fm = open(m_file,'w')
    fm.write(time.strftime('On %d/%m/%y %H:%M:%S\n')+(''.join(head)))
    for t,line in output:
        fm.write(line + '\n')
    fm.close()


te = time.clock()
sorting_merge('ytre.txt','tataye.txt','merged.file.txt')
print time.clock()-te
</snippet></ROW><ROW><id>5422365</id><snippet>pat = re.compile('[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
                 '(?=[ \t]+'
                 '[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
                 '|'
                 '[ \t]+aborted/deleted)')
</snippet></ROW><ROW><id>5422365</id><snippet>#!/usr/bin/env python

import os, time, sys, re
from sets import Set

def sorting_merge(o_file , c_file, m_file ):

    pat = re.compile('[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
                     '(?=[ \t]+'
                     '[0123]\d/[01]\d/\d{2} [012]\d:[0-6]\d:[0-6]\d'
                     '|'
                     '[ \t]+aborted/deleted)')

    def kl(line,pat = pat):
        return time.mktime(time.strptime((pat.search(line).group()),'%d/%m/%y %H:%M:%S'))

    head = []
    output = Set()

    fa = open(o_file)
    fa.readline() # first line is skipped
    for line1 in fa:
        if pat.search(line1):  break # first line after the heading
        else:  head.append(line1) # line of the header
    for line in fa:
        output.add(line.rstrip())
    output.add(line1.rstrip())
    fa.close()

    fb = open(c_file)
    for line1 in fb:
        if pat.search(line1):  break
    for line in fb:
        output.add(line.rstrip())
    output.add(line1.rstrip())
    fb.close()

    if '' in output:  output.remove('')
    output = [ (kl(line),line) for line in output]
    output.sort()

    fm = open(m_file,'w')
    fm.write(time.strftime('On %d/%m/%y %H:%M:%S\n')+(''.join(head)))
    for t,line in output:
        fm.write(line+'\n')
    fm.close()

te = time.clock()
sorting_merge('A.txt','B.txt','C.txt')
print time.clock()-te
</snippet></ROW><ROW><id>5422632</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>5422759</id><snippet>idx = numpy.arange(M)
i = numpy.vectorize(f1)(idx)
j = numpy.vectorize(f2)(idx)
k = numpy.vectorize(f3)(idx)

# you can index arrays with other arrays
# that lets you specify this operation in one line.    
newfid[:, i,j,k] = tempfid.T
</snippet></ROW><ROW><id>5422976</id><snippet>collections.Counter</snippet></ROW><ROW><id>5422976</id><snippet>from collections import Counter
c = Counter(i.extension for i in file_list)
print(c)
</snippet></ROW><ROW><id>5422976</id><snippet>Counter</snippet></ROW><ROW><id>5422976</id><snippet>dict</snippet></ROW><ROW><id>5422976</id><snippet>dict</snippet></ROW><ROW><id>5422976</id><snippet>setdefault()</snippet></ROW><ROW><id>5422976</id><snippet>counts = {}
for i in file_list:
    counts.setdefault(i.extension, 0)
    counts[i.extension] += 1
</snippet></ROW><ROW><id>5423609</id><snippet>try, except</snippet></ROW><ROW><id>5423609</id><snippet>len(sys.argv)</snippet></ROW><ROW><id>5423609</id><snippet>argparse</snippet></ROW><ROW><id>5423609</id><snippet>arg_names = ['command', 'x', 'y', 'operation', 'option']
args = dict(zip(arg_names, sys.argv))
</snippet></ROW><ROW><id>5423609</id><snippet>None</snippet></ROW><ROW><id>5423609</id><snippet>Arg_list = collections.namedtuple('Arg_list', arg_names)
args = Arg_list(*(args.get(arg, None) for arg in arg_names))
</snippet></ROW><ROW><id>5423866</id><snippet>t1.shape[0]</snippet></ROW><ROW><id>5423866</id><snippet>np.shape(t1)[0]</snippet></ROW><ROW><id>5423866</id><snippet>len</snippet></ROW><ROW><id>5423866</id><snippet>diss2Partials(t[i], t[j])</snippet></ROW><ROW><id>5423866</id><snippet>diss2Partials(t[i,0], t[i,1], t[j,0], t[j,1])</snippet></ROW><ROW><id>5423866</id><snippet>diss2Partials</snippet></ROW><ROW><id>5423866</id><snippet>abs</snippet></ROW><ROW><id>5423866</id><snippet>float_min</snippet></ROW><ROW><id>5423866</id><snippet>np.exp</snippet></ROW><ROW><id>5423866</id><snippet>abs</snippet></ROW><ROW><id>5423866</id><snippet>np.exp</snippet></ROW><ROW><id>5423866</id><snippet>exp</snippet></ROW><ROW><id>5423866</id><snippet>from libc.math cimport exp</snippet></ROW><ROW><id>5423866</id><snippet>transpose</snippet></ROW><ROW><id>5423866</id><snippet>np.dot</snippet></ROW><ROW><id>5423866</id><snippet>dissTimbreScale</snippet></ROW><ROW><id>5423866</id><snippet>t2</snippet></ROW><ROW><id>5423866</id><snippet>t2</snippet></ROW><ROW><id>5423866</id><snippet>t</snippet></ROW><ROW><id>5423866</id><snippet>t2</snippet></ROW><ROW><id>5423866</id><snippet>t</snippet></ROW><ROW><id>5423866</id><snippet>s[i]</snippet></ROW><ROW><id>5423866</id><snippet>t2</snippet></ROW><ROW><id>5423866</id><snippet>diss2Timbres</snippet></ROW><ROW><id>5423866</id><snippet>transpose</snippet></ROW><ROW><id>5424445</id><snippet>a</snippet></ROW><ROW><id>5424445</id><snippet>print resultTem[0]</snippet></ROW><ROW><id>5424445</id><snippet>print repr(resultTem[0])</snippet></ROW><ROW><id>5424445</id><snippet>repr()</snippet></ROW><ROW><id>5424445</id><snippet>type</snippet></ROW><ROW><id>5424445</id><snippet>str.strip()</snippet></ROW><ROW><id>5424445</id><snippet>UPDATE table SET type = STRIP(type) WHERE type != STRIP(type);
</snippet></ROW><ROW><id>5424445</id><snippet>SELECT sensor FROM table WHERE type LIKE 'FEET%'
</snippet></ROW><ROW><id>5424445</id><snippet>SELECT sensor FROM table WHERE STRIP(type) = 'FEET'
</snippet></ROW><ROW><id>5424445</id><snippet>('FEET\n                         ',)
  .... v....1....v....2....v....3
</snippet></ROW><ROW><id>5424445</id><snippet>CHAR(30)</snippet></ROW><ROW><id>5424445</id><snippet>VARCHAR(30)</snippet></ROW><ROW><id>5424445</id><snippet>VARCHAR</snippet></ROW><ROW><id>5424445</id><snippet>str.strip()</snippet></ROW><ROW><id>5424445</id><snippet>TRIM(E' \r\n\t' FROM your_string_expression)
</snippet></ROW><ROW><id>5424584</id><snippet>import re

regex = r'&lt;(?!/?QUOTE\b)[^&gt;]+&gt;'

tests = [
    'a plain old string',
    'a string with &lt;SOME&gt; &lt;XML TAGS="stuff"&gt;',
    'a string with &lt;QUOTE&gt;, &lt;/QUOTE&gt;, and &lt;QUOTE with="data"&gt;',
    'a string that has &lt;QUOTEA&gt; tags &lt;/QUOTEB&gt;',
]

for i in tests:
    result = re.sub(regex, '', i)
    print('{}\n{}\n'.format(i, result))
</snippet></ROW><ROW><id>5424584</id><snippet>(?=...)</snippet></ROW><ROW><id>5424584</id><snippet>(?!...)</snippet></ROW><ROW><id>5424584</id><snippet>&lt;</snippet></ROW><ROW><id>5424584</id><snippet>QUOTE</snippet></ROW><ROW><id>5424584</id><snippet>/</snippet></ROW><ROW><id>5424584</id><snippet>/?</snippet></ROW><ROW><id>5424584</id><snippet>\b</snippet></ROW><ROW><id>5424584</id><snippet>&gt;</snippet></ROW><ROW><id>5424584</id><snippet>&gt;</snippet></ROW><ROW><id>5424660</id><snippet>wkhtmltopdf -O %s -s %s -T 0 -R 0 -B 0 -L 0 http://pdfurl tempfile/results.pdf
</snippet></ROW><ROW><id>5424660</id><snippet>wkhtmltopdf -O %s -s %s -T 0 -R 0 -B 0 -L 0 http://pdfurl -
</snippet></ROW><ROW><id>5424739</id><snippet>try:
   val = int(userInput)
except ValueError:
   print("That's not an int!")
</snippet></ROW><ROW><id>5424962</id><snippet>decode()</snippet></ROW><ROW><id>5424962</id><snippet>fileReader = csv.reader(content.decode())
</snippet></ROW><ROW><id>5425001</id><snippet>Form</snippet></ROW><ROW><id>5425001</id><snippet>Field</snippet></ROW><ROW><id>5425001</id><snippet>class QuizForm(forms.Form):
    def __init__(self, data, questions, *args, **kwargs):
        self.questions = questions
        for question in questions:
            field_name = "question_%d" % question.pk
            choices = []
            for answer in question.answer_set().all():
                choices.append((answer.pk, answer.answer,))
            ## May need to pass some initial data, etc:
            field = forms.ChoiceField(label=question.question, required=True, 
                                      choices=choices, widget=forms.RadioSelect)
        return super(QuizForm, self).__init__(data, *args, **kwargs)
    def save(self):
        ## Loop back through the question/answer fields and manually
        ## update the Attempt instance before returning it.
</snippet></ROW><ROW><id>5425001</id><snippet># Assuming something like:  /quiz/69/ with "69" being the quiz PK.
def render_quiz(request, quiz_id):
    quiz = get_object_or_404(Quiz, quiz_id)
    form = QuizForm(questions=quiz.question_set.all())
    if request.method == "POST":
        form = QuizForm(request.POST, questions=quiz.question_set.all())
        if form.is_valid(): ## Will only ensure the option exists, not correctness.
            attempt = form.save()
            return redirect(attempt)
    return render_to_response('quiz.html', {"form": form})
</snippet></ROW><ROW><id>5425102</id><snippet>import sys, time
while True:
    for i in range( 4 ):
        sys.stdout.write( '\r' + ( '.' * i ) + '   ' )
        sys.stdout.flush()
        time.sleep( 0.5 )
</snippet></ROW><ROW><id>5425102</id><snippet>def animation ( i = 0 ):
    sys.stdout.write( '\r' + ( '.' * i ) + '   ' )
    sys.stdout.flush()
    Timer( 0.5, animation, ( 0 if i == 3 else i + 1, ) ).start()

animation()
print( 'started!' )

while True:
    pass
</snippet></ROW><ROW><id>5425293</id><snippet>print '.{0,3}'.join(re.escape(part) for part in s.split('?')) + '.*'
</snippet></ROW><ROW><id>5425417</id><snippet>mechanize</snippet></ROW><ROW><id>5425417</id><snippet>POST</snippet></ROW><ROW><id>5425417</id><snippet>GET</snippet></ROW><ROW><id>5425417</id><snippet>"method"</snippet></ROW><ROW><id>5425417</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>5425417</id><snippet>POST</snippet></ROW><ROW><id>5425417</id><snippet>mechanize</snippet></ROW><ROW><id>5425417</id><snippet>/tmp/test.html</snippet></ROW><ROW><id>5425417</id><snippet>import mechanize
br = mechanize.Browser()
br.open('file:///tmp/test.html')
br.select_form(nr=0)
print br.method
</snippet></ROW><ROW><id>5425417</id><snippet>POST</snippet></ROW><ROW><id>5425417</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>5425417</id><snippet>&lt;hr/&gt;</snippet></ROW><ROW><id>5425417</id><snippet>&lt;hr&gt;</snippet></ROW><ROW><id>5425417</id><snippet>&lt;hr /&gt;</snippet></ROW><ROW><id>5425417</id><snippet>import mechanize
br = mechanize.Browser()
response = br.open('file:///tmp/test.html')

# fix the page so it is correctly parsed:
response.set_data(response.get_data().replace('&lt;hr/&gt;', '&lt;hr /&gt;'))
br.set_response(response)

br.select_form(nr=0)
print br.method
</snippet></ROW><ROW><id>5425501</id><snippet>from pyPdf import PdfFileWriter, PdfFileReader
output_pdf = PdfFileWriter()

with open(r'input.pdf', 'rb') as readfile:
    input_pdf = PdfFileReader(readfile)
    total_pages = input_pdf.getNumPages()
    for page in xrange(total_pages - 1, -1, -1):
        output_pdf.addPage(input_pdf.getPage(page))
    with open(r'output.pdf', "wb") as writefile:
        output_pdf.write(writefile)
</snippet></ROW><ROW><id>5425517</id><snippet>import pygame

def main():
    """
    Pygame Example
    """
    pygame.init()
    screen = pygame.display.set_mode((200, 200)) 
    app_running = True
    while app_running:
        # Get all key/mouse events from system.
        events = pygame.event.get()
        # Loop thru each event...
        for e in events:
            # Handle when the program is killed.
            if e.type == pygame.QUIT:
                app_running = False
                break
            # Handle key events.
            elif e.type == pygame.KEYDOWN:
                # Exit if escape is pressed.
                if e.key == pygame.K_ESCAPE:
                    app_running = False
                # Do something when the right arrow
                # is pressed.
                elif e.key == pygame.K_RIGHT:
                    print "right arrow pressed"
                # Do something when the left arrow
                # is pressed.
                elif e.key == pygame.K_LEFT:
                    print "left arrow pressed"
                # and so on ...
        # Fill the screen to blank it.
        #screen.fill(mycolor)
        # Write someting to the screen to display.
        #screen.blit(some_image, some_position)
        # Flip to display.
        #screen.flip()
    pygame.quit()

if __name__ == '__main__': 
    main() 
</snippet></ROW><ROW><id>5425517</id><snippet>msvcrt</snippet></ROW><ROW><id>5425517</id><snippet>pygame</snippet></ROW><ROW><id>5425517</id><snippet>import msvcrt

def funkeypress():
    """
    Waits for the user to press any key including function keys. Returns 
    the ascii code for the key or the scancode for the function key.
    """
    while 1:
        if msvcrt.kbhit():                  # Key pressed?
            a = ord(msvcrt.getch())         # get first byte of keyscan code  
            if a == 0 or a == 224:          # is it a function key?
                b = ord(msvcrt.getch())     # get next byte of key scan code
                x = a + (b*256)             # cook it.
                return x                    # return cooked scancode
            else:
                return a                    # else return ascii code
</snippet></ROW><ROW><id>5425562</id><snippet>my_class.id</snippet></ROW><ROW><id>5425562</id><snippet>my_class.id</snippet></ROW><ROW><id>5425562</id><snippet>my_class</snippet></ROW><ROW><id>5425562</id><snippet>id</snippet></ROW><ROW><id>5425562</id><snippet>__init__</snippet></ROW><ROW><id>5425562</id><snippet>def __init(self, request):
    ...
    self.id = { ... }
</snippet></ROW><ROW><id>5425850</id><snippet>swallow.coconuts.aggregate(test=Variance('young'))
</snippet></ROW><ROW><id>5426429</id><snippet>candidates[4::2] = [None] * (n // 2 - 1)</snippet></ROW><ROW><id>5426429</id><snippet>for i in range(2, fin + 1):</snippet></ROW><ROW><id>5426429</id><snippet>def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N&gt;=6, Returns a list of primes, 2 &lt;= p &lt; N """
    correction = N % 6 &gt; 1
    N = (N, N-1, N+4, N+3, N+2, N+1)[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]
</snippet></ROW><ROW><id>5426477</id><snippet>class foo(object):
    def make_object(self):
        return []

f = foo()
myobject = f.make_object()
</snippet></ROW><ROW><id>5426477</id><snippet>class foo(object):
    def make_object(self):
        return foo()

f = foo()
myobject = f.make_object()
</snippet></ROW><ROW><id>5426541</id><snippet>child.</snippet></ROW><ROW><id>5426541</id><snippet>communicate(someinput)</snippet></ROW><ROW><id>5426544</id><snippet>TIME_FORMAT = "%b %d"
f_str = obj.date.strftime(TIME_FORMAT)
</snippet></ROW><ROW><id>5426544</id><snippet>TIME_FORMAT = "%b %d"
arr = [d.strftime(TIME_FORMAT) for d in dates]
</snippet></ROW><ROW><id>5426545</id><snippet>str(title).strip()</snippet></ROW><ROW><id>5426562</id><snippet>print 'hello',
sys.stdout.flush()
...
print '\rhell ',
sys.stdout.flush()
...
print '\rhel ',
sys.stdout.flush()
</snippet></ROW><ROW><id>5426562</id><snippet>sys.stdout.write('hello')
sys.stdout.flush()
for _ in range(5):
    time.sleep(1)
    sys.stdout.write('\033[D \033[D')
    sys.stdout.flush()
</snippet></ROW><ROW><id>5426627</id><snippet>matplotlib.pyplot.contour()</snippet></ROW><ROW><id>5426627</id><snippet>#!/usr/bin/env python
import numpy as np
from matplotlib import pyplot as plt

# generate data
x = np.r_[0:100:30j]
y = np.r_[0:1:20j]
X, Y = np.meshgrid(x, y)
Z = X*np.exp(1j*Y) # some arbitrary complex data

# plot it
def plotit(z, title):
    plt.figure()
    cs = plt.contour(X,Y,z) # contour() accepts complex values
    plt.clabel(cs, inline=1, fontsize=10) # add labels to contours
    plt.title(title)
    plt.savefig(title+'.png')

plotit(Z, 'real')
plotit(Z.real, 'explicit real')
plotit(Z.imag, 'imagenary')

plt.show()
</snippet></ROW><ROW><id>5426851</id><snippet>map</snippet></ROW><ROW><id>5426851</id><snippet>filter</snippet></ROW><ROW><id>5426851</id><snippet># map and filter
map(lambda x:x+1, filter(lambda x:x%3, range(10))
# same as LC
[x+1 for x in range(10) if x%3]
</snippet></ROW><ROW><id>5426851</id><snippet>reduce</snippet></ROW><ROW><id>5426887</id><snippet>&gt;&gt;&gt; email.utils.getaddresses(['friend@email.com, John Smith &lt;john.smith@email.com&gt;,"Smith, Jane" &lt;jane.smith@uconn.edu&gt;'])
[('', 'friend@email.com'), ('John Smith', 'john.smith@email.com'), ('Smith, Jane', 'jane.smith@uconn.edu')]
</snippet></ROW><ROW><id>5426927</id><snippet>#!/usr/bin/env python
import fileinput

freq = {}
max_freq = 0

for line in fileinput.input():
    length = len(line)
    freq[length] = freq.get(length, 0) + 1
    if freq[length] &gt; max_freq:
        max_freq = freq[length]

for i in range(max_freq, -1, -1):
    for length in sorted(freq.keys()):
        if freq[length] &gt;= i:
            print('#', end='')
        else:
            print(' ', end='')
    print('')
</snippet></ROW><ROW><id>5427057</id><snippet>import math
import time
from timeit import Timer

userInput = "0"

while not userInput.isdigit() or int(userInput) &lt;= 0:

    userInput = input("Calcular la raiz de: ") #Get input from user (userInput)

userInput = int(userInput)

epsilon = 0.000001
x=1
count=0

setup = 'from __main__ import userInput, epsilon, x, count'

operations = '''
x = 1
count = 0
while (abs(x**2 - userInput) &gt; epsilon):

    x = 0.5 * (x + (userInput/x))
    count = count+1
'''

print('The operations took %.4f microseconds.' % Timer(operations, setup).timeit(1))

#run the operations again to get the x and count values
x = 1
count = 0
while (abs(x**2 - userInput) &gt; epsilon):

    x = 0.5 * (x + (userInput/x))
    count = count+1
print("La raíz de", userInput, "es:",x,"implicó",count,"intentos")
</snippet></ROW><ROW><id>5427057</id><snippet>timeit()</snippet></ROW><ROW><id>5427237</id><snippet>__init__.py</snippet></ROW><ROW><id>5427435</id><snippet>INFO     2011-03-25 00:59:56,577 dev_appserver.py:3317] "GET /%C3%91%C3%B6%C3%B1-%C3%85%C5%9E%C3%87%C4%B0%C4%B0 HTTP/1.1" 404 -
</snippet></ROW><ROW><id>5427435</id><snippet>application = webapp.WSGIApplication([(urllib.quote("/Ñöñ-ÅŞÇİİ"), MainPage)], debug=True)
</snippet></ROW><ROW><id>5427501</id><snippet>db.autocommit(True)
</snippet></ROW><ROW><id>5427592</id><snippet>import sys
import traceback
from django.core.signals import got_request_exception

def exception_printer(sender, **kwargs):
    print &gt;&gt; sys.stderr, ''.join(traceback.format_exception(*sys.exc_info()))

got_request_exception.connect(exception_printer)
</snippet></ROW><ROW><id>5427652</id><snippet>attrs = ('Levels', 'MaxX', 'MaxY', 'BW')
assert len(tup) == len(attrs)
for attr, val in zip(attrs, tup):
    if val is not None: # don't use !=
        setattr(self, attr, val)
</snippet></ROW><ROW><id>5427729</id><snippet>b = [ eval("c." + next).string for c in a ]
</snippet></ROW><ROW><id>5427729</id><snippet>findNext('span')</snippet></ROW><ROW><id>5427729</id><snippet>c</snippet></ROW><ROW><id>5427729</id><snippet>a</snippet></ROW><ROW><id>5427729</id><snippet>findNext</snippet></ROW><ROW><id>5427729</id><snippet>b</snippet></ROW><ROW><id>5428126</id><snippet>from boto.s3.connection import S3Connection
from boto.exception import S3ResponseError

class TimeoutException(Exception):
    pass

...

conn = S3Connection(access_key, secret_key)
try:
    bucket = get_bucket(conn, bucket_name)
except TimeoutException:
    sys.exit("Connection timed out; this usually means you're offline.")
except S3ResponseError, exception_data:
    sys.exit(exception_data.error_message)

...

key_name = os.path.basename(fname)
if bucket.get_key(key_name):
    print 'Already on S3, will not overwrite: ' + key_name
    return
key = bucket.new_key(key_name)
key.set_contents_from_filename(fname)

...

def get_bucket(conn, bucket_name):
    # If you try to get a bucket while offline, the function just
    # hangs. This times it out after two seconds.

    def timeout_handler(signum, frame):
        raise TimeoutException()

    old_handler = signal.signal(signal.SIGALRM, timeout_handler)

    # start timer
    signal.alarm(2)
    try:
        bucket = conn.get_bucket(bucket_name)
    except TimeoutException:
        bucket = None
    finally:
        signal.signal(signal.SIGALRM, old_handler)

    signal.alarm(0)
    if bucket:
        return bucket
    else:
        raise TimeoutException()
</snippet></ROW><ROW><id>5428144</id><snippet>&gt;&gt;&gt; seq = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; dict(seq)
{1: 2, 3: 4, 5: 6}
</snippet></ROW><ROW><id>5428144</id><snippet>The dict() constructor builds dictionaries directly from lists of key-value pairs stored as tuples.
</snippet></ROW><ROW><id>5428189</id><snippet>def makePlayFair(key, alpha):


    letters = []
    for letter in key + alpha:
        if letter not in letters:
            letters.append(letter)

    box = []
    for line_number in range(5):
        box.append( letters[line_number * 5: (line_number+1) * 5])
</snippet></ROW><ROW><id>5428224</id><snippet>dbf</snippet></ROW><ROW><id>5428224</id><snippet>&gt;&gt;&gt; import pydbfrw
&gt;&gt;&gt; d = pydbfrw.DBFreader('/devel/dbf/all_files/del.dbf')
&gt;&gt;&gt; list(d)
[['fred', 1], ['harriet', 4]]
&gt;&gt;&gt; d.get_field_names()
['NAME', 'AMT']
&gt;&gt;&gt; d = pydbfrw.DBFreader('/devel/dbf/all_files/del.dbf', include_deleted=True)
&gt;&gt;&gt; list(d)
[[False, 'fred', 1], [True, 'tom', 2], [True, 'dick', 3], [False, 'harriet', 4]]
&gt;&gt;&gt; d.get_field_names()
['deleted__', 'NAME', 'AMT']
&gt;&gt;&gt; for rowdict in d.get_dicts():
...     print rowdict
...
{'deleted__': False, 'name': 'fred', 'amt': 1}
{'deleted__': True, 'name': 'tom', 'amt': 2}
{'deleted__': True, 'name': 'dick', 'amt': 3}
{'deleted__': False, 'name': 'harriet', 'amt': 4}
&gt;&gt;&gt; for rowtup in d.get_namedtuples():
...     print rowtup
...
Row(deleted__=False, name='fred', amt=1)
Row(deleted__=True, name='tom', amt=2)
Row(deleted__=True, name='dick', amt=3)
Row(deleted__=False, name='harriet', amt=4)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5428324</id><snippet>urllib.quote</snippet></ROW><ROW><id>5428324</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.quote('http://www.google.com?q=Zombie+Apocalypse')
'http%3A//www.google.com%3Fq%3DZombie%2BApocalypse'
</snippet></ROW><ROW><id>5428324</id><snippet>urllib.quote(item.url)
</snippet></ROW><ROW><id>5428511</id><snippet>re.split(' OR | AND ', 'word1 AND word2 word3 OR "word4 word5" OR word6 AND word7 word8')
['word1', 'word2 word3', '"word4 word5"', 'word6', 'word7 word8']
</snippet></ROW><ROW><id>5428712</id><snippet>OR</snippet></ROW><ROW><id>5428712</id><snippet>re.search</snippet></ROW><ROW><id>5428712</id><snippet>AND</snippet></ROW><ROW><id>5428712</id><snippet>re.match</snippet></ROW><ROW><id>5428712</id><snippet>def boolean_and_new(terms):
    return ''.join([r'(?=.*?\b%s\b)' % (term) for term in terms])

def run_new():
    words_and_phrases = ['apple', 'cherry pie']
    booleans = [boolean_and_new(terms) for terms in [
        ['sweet pie', 'savoury pie', 'meringue'],
        ['chicken pie', 'beef pie']]]
    regex1 = re.compile(r'(?i)\b(?:%s)\b' % ('|'.join(words_and_phrases)))
    regex2 = re.compile(r'(?i)%s' % ('|'.join(booleans)))
    matched_data = list()
    for d in data():
        if regex1.search(d) or regex2.match(d):
            matched_data.append(d)
</snippet></ROW><ROW><id>5428712</id><snippet>regex1 = r'(?i)\b(?:apple|cherry pie)\b'
regex2 = r'(?i)(?=.*?\bsweet pie\b)(?=.*?\bsavoury pie\b)(?=.*?\bmeringue\b)|(?=.*?\bchicken pie\b)(?=.*?\bbeef pie\b)'
</snippet></ROW><ROW><id>5428712</id><snippet>^</snippet></ROW><ROW><id>5428712</id><snippet>re.match</snippet></ROW><ROW><id>5428712</id><snippet>"apple"</snippet></ROW><ROW><id>5428712</id><snippet>re1 = r'^apple'
re2 = r'apple'
s = r'orange'
</snippet></ROW><ROW><id>5428712</id><snippet>apple</snippet></ROW><ROW><id>5428712</id><snippet>applesauce</snippet></ROW><ROW><id>5428712</id><snippet>apple-pie</snippet></ROW><ROW><id>5428712</id><snippet>orange</snippet></ROW><ROW><id>5428712</id><snippet>^</snippet></ROW><ROW><id>5428712</id><snippet>\b</snippet></ROW><ROW><id>5428712</id><snippet>orange</snippet></ROW><ROW><id>5428712</id><snippet>^</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>o</snippet></ROW><ROW><id>5428712</id><snippet>^</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>r</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>p</snippet></ROW><ROW><id>5428712</id><snippet>n</snippet></ROW><ROW><id>5428712</id><snippet>a</snippet></ROW><ROW><id>5428712</id><snippet>orange</snippet></ROW><ROW><id>5428712</id><snippet>n</snippet></ROW><ROW><id>5428746</id><snippet>mstation = "foo"
mtype = "bar"
mname = "baz"
mtemp = "station, calendar, type, name, date, time"
queryTemplate = "INSERT INTO table (%s) VALUES ( '%s', '%s', '%s', %s, '%s', '%s' );" 
foreach (mcalendar in calendars) 
    foreach (mdate in dates) 
        foreach (mtime in times) 
            query = queryTemplate % (mtemp, mstation, mcalendar, mtype, mname, mdate, mtime)
            curs.execute(query, )  
</snippet></ROW><ROW><id>5428799</id><snippet>&gt;&gt;&gt; ordered_keys = ('z', 'y', 'e', 'x', 'w') # possible keys, in desired order
</snippet></ROW><ROW><id>5428799</id><snippet>&gt;&gt;&gt; dic = {'z':'a', 'y':'b', 'x':'c', 'w':'d'} # actual contents of a dictionary
&gt;&gt;&gt; for k in ordered_keys:
...     if k in dic: # avoid trouble if a key is missing
...         print k, dic[k]
...
z a
y b
x c
w d
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5429049</id><snippet>floor</snippet></ROW><ROW><id>5429049</id><snippet>round</snippet></ROW><ROW><id>5429049</id><snippet>np.floor([5.99999999, 6.0]) # array([ 5.,  6.])
np.round([6.50000001, 6.5], 0) #array([ 7.,  6.])
</snippet></ROW><ROW><id>5429049</id><snippet>import numpy as np
TOL = 1.0e-3
a = np.random.random((10,10))
i = np.argsort(a.flat)
d = np.diff(a.flat[i])
result = a.flat[i[d&gt;TOL]]
</snippet></ROW><ROW><id>5429049</id><snippet>a = np.random.random((10,))
b = a.copy()
b.sort()
d = np.diff(b)
result = b[d&gt;TOL]
</snippet></ROW><ROW><id>5429049</id><snippet>scipy.cluster</snippet></ROW><ROW><id>5429049</id><snippet>numpy.digitize</snippet></ROW><ROW><id>5429109</id><snippet>data.write(c + n)
</snippet></ROW><ROW><id>5429109</id><snippet>data.write("%s%s\n" % (c, n))
</snippet></ROW><ROW><id>5429346</id><snippet>utf-8</snippet></ROW><ROW><id>5429346</id><snippet>encode('utf-8')</snippet></ROW><ROW><id>5429346</id><snippet>write()</snippet></ROW><ROW><id>5429346</id><snippet>writer.write(line)
</snippet></ROW><ROW><id>5429346</id><snippet>cp1252</snippet></ROW><ROW><id>5429346</id><snippet>for line in codecs.open(infile, 'r', 'cp1252'):
    writer.write(line)
</snippet></ROW><ROW><id>5429369</id><snippet>if __name__ != '__main__':
    DIRNAME = r"C:\Python26\Lib\site-packages\PuLP-1.4.7-py2.6.egg\pulp"
    config_filename = os.path.join(DIRNAME,
                                   PULPCFGFILE) else: #run as a script
    from pulp import __file__ as fname
    DIRNAME = r"C:\Python26\Lib\site-packages\PuLP-1.4.7-py2.6.egg\pulp"
    config_filename = os.path.join(DIRNAME,
                                   PULPCFGFILE) cplex_dll_path, coinMP_path, gurobi_path, cbc_path, glpk_path = \
        initialize(config_filename)
</snippet></ROW><ROW><id>5429369</id><snippet>import sys
sys.path.append(r"C:\Python26\Lib\site-packages\PuLP-1.4.7-py2.6.egg\pulp")
</snippet></ROW><ROW><id>5430038</id><snippet>help(my_list.append)</snippet></ROW><ROW><id>5430038</id><snippet>&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; help(my_list.append)

    Help on built-in function append:

    append(...)
        L.append(object) -- append object to end
</snippet></ROW><ROW><id>5430111</id><snippet>image = Image.new("RGBA", (600,150), (255,255,255))
draw = ImageDraw.Draw(image)
font = ImageFont.truetype("resources/HelveticaNeueLight.ttf", fontsize)

draw.text((10, 0), txt, (0,0,0), font=font)
img_resized = image.resize((188,45), Image.ANTIALIAS)
</snippet></ROW><ROW><id>5430134</id><snippet>read -p "This is a prompt: "
</snippet></ROW><ROW><id>5430134</id><snippet>import pexpect
child = pexpect.spawn('./prompt.sh')
child.expect(search)
&gt;&gt;&gt; 0
print child.after #Prints the matched text
&gt;&gt;&gt; 'This is a prompt: '
</snippet></ROW><ROW><id>5430290</id><snippet>import threading
import subprocess

class RepeatingTimer(threading._Timer):
    def run(self):
        while True:
            self.finished.wait(self.interval)
            if self.finished.is_set():
                return
            else:
                self.function(*self.args, **self.kwargs)


def status():
    print "I'm alive"
timer = RepeatingTimer(1.0, status)
timer.daemon = True # Allows program to exit if only the thread is alive
timer.start()

proc = subprocess.Popen([ '/bin/sleep', "5" ])
proc.wait()

timer.cancel()
</snippet></ROW><ROW><id>5430528</id><snippet>request.POST.getlist('pass_id')
</snippet></ROW><ROW><id>5430719</id><snippet>TypeError</snippet></ROW><ROW><id>5430719</id><snippet>if no_args or both_args:
    raise TypeError('f() must be passed exactly one of foo=value, bar=value')
</snippet></ROW><ROW><id>5431507</id><snippet>date</snippet></ROW><ROW><id>5431507</id><snippet>datetime</snippet></ROW><ROW><id>5431507</id><snippet>strftime</snippet></ROW><ROW><id>5431507</id><snippet>SELECT strftime('%d-%m-%Y %H:%M:%S', 'now');
</snippet></ROW><ROW><id>5431601</id><snippet>xscrollincrement</snippet></ROW><ROW><id>5431601</id><snippet>yscrollincrement</snippet></ROW><ROW><id>5431601</id><snippet>units</snippet></ROW><ROW><id>5431601</id><snippet>xview</snippet></ROW><ROW><id>5431601</id><snippet>yview</snippet></ROW><ROW><id>5431601</id><snippet>self.canvas.xview("scroll",-1,"units")</snippet></ROW><ROW><id>5431667</id><snippet>        if (
            condition1 and \
            condition2 and \
            condition3
            ):
            # do something
</snippet></ROW><ROW><id>5431667</id><snippet>for site_listing in all_sites:
    if site.getName() == site_listing.getName() and site.getCustomer().getId() == site_listing.getCustomer().getId():
        if not site.getId():
            site.setId(site_listing.getId())
        if site.getId() == site_listing.getId():
            return site_listing
</snippet></ROW><ROW><id>5431762</id><snippet>&gt;&gt;&gt; hex(int(float(sys.maxint)))
'0x8000000000000000L'
</snippet></ROW><ROW><id>5431762</id><snippet>float(sys.maxint)</snippet></ROW><ROW><id>5431762</id><snippet>1</snippet></ROW><ROW><id>5431762</id><snippet>1.</snippet></ROW><ROW><id>5431762</id><snippet>0x43E0000000000000
</snippet></ROW><ROW><id>5431832</id><snippet>class ApiDispatcher(object):

    def handle_CreateWindowExW(self):
        # do whatever

    def handle_CreateProcessW(self):
        # do this one

    def dispatch(self, event):
        method = getattr(self, 'handle_%s' % event)
        method()
</snippet></ROW><ROW><id>5432043</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>5432483</id><snippet>class DjangoPony(models.Model):
    name = models.TextField()
    color = models.TextField()

class RevisionControlledValue(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(User)
    value = models.TextField()
    field = models.CharField(max_length=20)

    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>5432483</id><snippet>ReversionTextField</snippet></ROW><ROW><id>5432555</id><snippet>for column, colcolor in zip(2darray, colors):
    pyplot.plot(2darray, column, "-", color=colcolor)
</snippet></ROW><ROW><id>5432555</id><snippet>2darray.T</snippet></ROW><ROW><id>5432583</id><snippet>excel = win32.gencache.EnsureDispatch('Excel.Application')
try:
    wb = excel.Workbooks.Open(file)
except:
    print "Failed to open spreadsheet " + file
    sys.exit(1)
count = wb.Sheets.Count
</snippet></ROW><ROW><id>5432789</id><snippet>In [3]: user_details = [{'name':x, 'rank':i} for i,x in enumerate(ranked_users)] 

In [4]: user_details
Out[4]: 
[{'name': 'jon', 'rank': 0},
 {'name': 'bob', 'rank': 1},
 {'name': 'jane', 'rank': 2},
 {'name': 'alice', 'rank': 3},
 {'name': 'chris', 'rank': 4}]
</snippet></ROW><ROW><id>5432789</id><snippet>user_details = map(lambda (i,x): {'name':x, 'rank':i}, enumerate(ranked_users))
</snippet></ROW><ROW><id>5432789</id><snippet>map</snippet></ROW><ROW><id>5432789</id><snippet>lambda</snippet></ROW><ROW><id>5433040</id><snippet>&gt;&gt;&gt; db.define_table('person',
                    Field('name'),
                    format='%(name)s')
&gt;&gt;&gt; db.define_table('dog',
                    Field('name'),
                    Field('owner', db.person),
                    format='%(name)s')
</snippet></ROW><ROW><id>5433552</id><snippet>import GameLogic
cont = GameLogic.getCurrentController()
moveAct = cont.getActuator("move") # or the name you gave it
rotX = moveAct.getDRot()[0]
#etc
</snippet></ROW><ROW><id>5433851</id><snippet>for word in doc.lower().split(): 
        try:
            word = str(word)
            word = self.handlePunctuation(word)
            if word == False:
                continue
        except UnicodeEncodeError, e:
            #word couldn't be converted to string; most likely encoding garbage we can toss anyways
            continue 
</snippet></ROW><ROW><id>5434093</id><snippet>dbengine.echo = True
session.query(MyTable).filter_by(specified_field = 'some_value').all()
</snippet></ROW><ROW><id>5434093</id><snippet>dbengine.echo = True</snippet></ROW><ROW><id>5434093</id><snippet>def myquery(self, table):
  self.query(table).filter_by(specified_field = 'some_value')

session.__class__.some_arbitrarily_filtered_query = myquery
</snippet></ROW><ROW><id>5434093</id><snippet>session.some_arbitrarily_filtered_query(MyTable).all()
</snippet></ROW><ROW><id>5434147</id><snippet>json</snippet></ROW><ROW><id>5434147</id><snippet>pickle</snippet></ROW><ROW><id>5434189</id><snippet>*</snippet></ROW><ROW><id>5434189</id><snippet>+</snippet></ROW><ROW><id>5434189</id><snippet>*</snippet></ROW><ROW><id>5434189</id><snippet>+</snippet></ROW><ROW><id>5434189</id><snippet>(&lt;\S*&gt;,)*
</snippet></ROW><ROW><id>5434189</id><snippet>&lt;\S*&gt;</snippet></ROW><ROW><id>5434189</id><snippet>*</snippet></ROW><ROW><id>5434189</id><snippet>\S</snippet></ROW><ROW><id>5434189</id><snippet>&lt;[^&gt; ]*&gt;</snippet></ROW><ROW><id>5434189</id><snippet>[^, ]*,</snippet></ROW><ROW><id>5434478</id><snippet>__iter__</snippet></ROW><ROW><id>5434478</id><snippet>class Foo(object):
    bar = "bar"
    baz = 1
    class __metaclass__(type):
        def __iter__(self):
            for attr in dir(Foo):
                if not attr.startswith("__"):
                    yield attr
</snippet></ROW><ROW><id>5434478</id><snippet>class MetaFoo(type):
    def __iter__(self):
        for attr in dir(Foo):
            if not attr.startswith("__"):
                yield attr

class Foo(metaclass=MetaFoo):
    bar = "bar"
    baz = 1
</snippet></ROW><ROW><id>5434536</id><snippet>date</snippet></ROW><ROW><id>5434536</id><snippet>report_date = date.today()
</snippet></ROW><ROW><id>5434536</id><snippet>cleaned_data</snippet></ROW><ROW><id>5434536</id><snippet>report_date = form.cleaned_data['date']
</snippet></ROW><ROW><id>5434622</id><snippet>a = [{"url": "http://wwww.ff.com", "msg": "msg 1..."},
     {"url": "http://wwww.yy.com", "msg": "msg 2..."},
     {"url": "http://wwww.xx.com", "msg": "msg 3..."}]
print a[0]["url"]
# http://wwww.ff.com
</snippet></ROW><ROW><id>5434622</id><snippet>a = [("http://wwww.ff.com", "msg 1..."),
     ("http://wwww.yy.com", "msg 2..."),
     ("http://wwww.xx.com", "msg 3...")]
print a[0][0]
# http://wwww.ff.com
</snippet></ROW><ROW><id>5434622</id><snippet>from collections import namedtuple
UrlTuple = namedtuple("UrlTuple", "url msg")
a = [UrlTuple(url="http://wwww.ff.com", msg="msg 1..."),
     UrlTuple(url="http://wwww.xx.com", msg="msg 2..."),
     UrlTuple(url="http://wwww.yy.com", msg="msg 3...")]
print a[0].url
# http://wwww.ff.com
</snippet></ROW><ROW><id>5434777</id><snippet>cities['_find']</snippet></ROW><ROW><id>5434777</id><snippet>find_city</snippet></ROW><ROW><id>5434777</id><snippet>cities['_find'](cities, state)</snippet></ROW><ROW><id>5434777</id><snippet>find_city(cities, state)</snippet></ROW><ROW><id>5434777</id><snippet>cities['_find'] = find_city
</snippet></ROW><ROW><id>5434777</id><snippet>find_city</snippet></ROW><ROW><id>5434936</id><snippet>    import itertools
    def pairwise(iterable):
        "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
        a, b = itertools.tee(iterable)
        next(b, None)
        return itertools.izip(a, b)
</snippet></ROW><ROW><id>5434936</id><snippet>a</snippet></ROW><ROW><id>5434936</id><snippet>b</snippet></ROW><ROW><id>5434936</id><snippet>tee()</snippet></ROW><ROW><id>5434936</id><snippet>b</snippet></ROW><ROW><id>5434936</id><snippet>next(b, None)</snippet></ROW><ROW><id>5434936</id><snippet>a</snippet></ROW><ROW><id>5434936</id><snippet>b</snippet></ROW><ROW><id>5434936</id><snippet>a</snippet></ROW><ROW><id>5434936</id><snippet>b</snippet></ROW><ROW><id>5434936</id><snippet>tee()</snippet></ROW><ROW><id>5434936</id><snippet>tee()</snippet></ROW><ROW><id>5435170</id><snippet>import unittest
from tempfile import mkdtemp

class Test(unittest.TestCase):

    def setUp(self):
        self.tempdir = mkdtemp()
        os.chdir(self.tempdir)

    def tearDown(self):
        os.rmdir(self.tempdir)

    def testName(self):
        #Do the actual testing
        pass

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>5435335</id><snippet>data = {
    ('unit1', 'test1'): 11,
    ('unit1', 'test2'): 12,
    ('unit2', 'test1'): 13, 
    ('unit2', 'test2'): 14
}
</snippet></ROW><ROW><id>5435335</id><snippet>import csv

def getUniqueValues(seq):
    "Return sorted list of unique values in sequence"
    values = list(set(seq))
    values.sort()
    return values

def dataArray(data2d, rowIterField=0, rowLabel='', defaultVal=''):
    # get all unique unit and test labels
    rowLabels = getUniqueValues(key[rowIterField] for key in data2d)
    colLabels = getUniqueValues(key[1-rowIterField] for key in data2d)

    # create key-tuple maker
    if rowIterField==0:
        key = lambda row,col: (row, col)
    else:
        key = lambda row,col: (col, row)

    # header row
    yield [rowLabel] + colLabels
    for row in rowLabels:
        # data rows
        yield [row] + [data2d.get(key(row,col), defaultVal) for col in colLabels]

def main():
    with open('output.csv', 'wb') as outf:
        outcsv = csv.writer(outf)
        outcsv.writerows(dataArray(data, 0, 'unitnames'))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5435335</id><snippet>dataArray(data, 0, 'unitnames')</snippet></ROW><ROW><id>5435335</id><snippet>dataArray(data, 1, 'testnames')</snippet></ROW><ROW><id>5435525</id><snippet>str</snippet></ROW><ROW><id>5435525</id><snippet>seq</snippet></ROW><ROW><id>5435525</id><snippet>str[1:]</snippet></ROW><ROW><id>5435525</id><snippet>yield</snippet></ROW><ROW><id>5435525</id><snippet>return</snippet></ROW><ROW><id>5435525</id><snippet>yield</snippet></ROW><ROW><id>5435525</id><snippet>'a'</snippet></ROW><ROW><id>5435525</id><snippet>'a'</snippet></ROW><ROW><id>5435525</id><snippet>'ab'</snippet></ROW><ROW><id>5435525</id><snippet>'a'</snippet></ROW><ROW><id>5435525</id><snippet>b</snippet></ROW><ROW><id>5435525</id><snippet>'b'</snippet></ROW><ROW><id>5435525</id><snippet>'ab'</snippet></ROW><ROW><id>5435525</id><snippet>'ba'</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint</snippet></ROW><ROW><id>5435660</id><snippet>// decimal                  hexadecimal
   9223372036854775807      0x7fffffffffffffff
</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint - 100</snippet></ROW><ROW><id>5435660</id><snippet>   9223372036854775707      0x7fffffffffffff9b
</snippet></ROW><ROW><id>5435660</id><snippet>0.01</snippet></ROW><ROW><id>5435660</id><snippet>   9223372036854774784      0x7ffffffffffffc00
   9223372036854775808      0x8000000000000000
</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint - 100</snippet></ROW><ROW><id>5435660</id><snippet>0.01</snippet></ROW><ROW><id>5435660</id><snippet>   9223372036854775808.01   0x8000000000000000.028f5c28f5c...
</snippet></ROW><ROW><id>5435660</id><snippet>   9223372036854775808      0x8000000000000000
</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint - 100 + 0.01</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint</snippet></ROW><ROW><id>5435660</id><snippet>sys.maxint</snippet></ROW><ROW><id>5435672</id><snippet>fb</snippet></ROW><ROW><id>5435672</id><snippet>FB:LOGIN-BUTTON</snippet></ROW><ROW><id>5435672</id><snippet>FB</snippet></ROW><ROW><id>5435672</id><snippet>import lxml.etree
data = open('fb.xhtml', 'rb').read()
tree = lxml.etree.fromstring(data)
ns_map = {'fb': 'http://www.facebook.com/2008/fbml'}
print tree.xpath('.//fb:LOGIN-BUTTON', namespaces=ns_map)
</snippet></ROW><ROW><id>5435672</id><snippet>[&lt;Element {http://www.facebook.com/2008/fbml}LOGIN-BUTTON at 1011fa260&gt;]
</snippet></ROW><ROW><id>5435784</id><snippet>def longest_prefix_match(search, urllist):
    matches = [url for url in urllist if url.startswith(search)]
    if matches:
        return max(matches, key=len)
    else:
        raise Exception("Not found")
</snippet></ROW><ROW><id>5435784</id><snippet>import trie


def longest_prefix_match(prefix_trie, search):
    # There may well be a more elegant way to do this without using
    # "hidden" method _getnode.
    try:
        return list(node.value for node in prefix_trie._getnode(search).walk())
    except KeyError:
        return list()

url_list = [ 
    'http://www.google.com/mail',
    'http://www.google.com/document',
    'http://www.facebook.com',
]

url_trie = trie.Trie()

for url in url_list:
    url_trie[url] = url 

searches = ("http", "http://www.go", "http://www.fa", "http://fail")

for search in searches:
    print "'%s' -&gt;" % search, longest_prefix_match(url_trie, search)
</snippet></ROW><ROW><id>5435784</id><snippet>'http' -&gt; ['http://www.facebook.com', 'http://www.google.com/document', 'http://www.google.com/mail']
'http://www.go' -&gt; ['http://www.google.com/document', 'http://www.google.com/mail']
'http://www.fa' -&gt; ['http://www.facebook.com']
'http://fail' -&gt; []
</snippet></ROW><ROW><id>5435784</id><snippet>from pytrie import StringTrie


url_list = [ 
    'http://www.google.com/mail',
    'http://www.google.com/document',
    'http://www.facebook.com',
]

url_trie = StringTrie()

for url in url_list:
    url_trie[url] = url 

searches = ("http", "http://www.go", "http://www.fa", "http://fail")

for search in searches:
    print "'%s' -&gt;" % search, url_trie.values(prefix=search)
</snippet></ROW><ROW><id>5436354</id><snippet>import re
city, state = re.split(r' ?,? ?', location)
</snippet></ROW><ROW><id>5436354</id><snippet>split_loc = re.split(r' ?,? ?', location)
city = ' '.join(split_loc[:-1]) # Everything up to last element joined by space
state = split_loc[-1]
</snippet></ROW><ROW><id>5436465</id><snippet>feed = client.GetYouTubeVideoFeed('http://gdata.youtube.com/feeds/api/videos/-/Comedy?v=2')
</snippet></ROW><ROW><id>5436494</id><snippet>changelist_view</snippet></ROW><ROW><id>5436494</id><snippet># myproject/account/admin.py

class StaffUserAdmin(models.ModelAdmin):
    ...
    def changelist_view(self, request, extra_context=None):
        groups = Group.objects.exclude(name__in=['Press',]).values_list('name')
        extra_context = {
            'groups': [x[0] for x in groups],
        }
        return super(StaffUserAdmin, self).changelist_view(request,
            extra_context=extra_context)
</snippet></ROW><ROW><id>5436494</id><snippet># myproject/templates/admin/auth/staffuser/change_list.html

{% extends "admin/change_list.html" %}

{% load admin_list %}
{% load i18n %}
{% load account_admin %}

{% block filters %}

    {% if cl.has_filters %}
    &lt;div id="changelist-filter"&gt;
        &lt;h2&gt;{% trans 'Filter' %}&lt;/h2&gt;
        {% for spec in cl.filter_specs %}
            {% ifequal spec.title 'group' %}
                {% admin_list_group_filter cl spec groups %}
            {% else %}
                {% admin_list_filter cl spec %}
            {% endifequal %}
        {% endfor %}
    &lt;/div&gt;
    {% endif %}

{% endblock filters %}
</snippet></ROW><ROW><id>5436494</id><snippet>admin_list</snippet></ROW><ROW><id>5436494</id><snippet>admin_list_filter</snippet></ROW><ROW><id>5436494</id><snippet>i18n</snippet></ROW><ROW><id>5436494</id><snippet>trans</snippet></ROW><ROW><id>5436494</id><snippet>account_admin</snippet></ROW><ROW><id>5436494</id><snippet>admin_list_group_filter</snippet></ROW><ROW><id>5436494</id><snippet>spec.title</snippet></ROW><ROW><id>5436494</id><snippet># myproject/account/templatetags/account_admin.py

from django.template import Library

register = Library()

def admin_list_group_filter(cl, spec, groups):
    return {'title': spec.title(), 'choices' : list(spec.choices(cl)), 'groups': groups }
admin_list_group_filter = register.inclusion_tag('admin/auth/group_filter.html')(admin_list_group_filter)
</snippet></ROW><ROW><id>5436494</id><snippet># myproject/templates/admin/auth/group_filter.html

{% load i18n %}
&lt;h3&gt;{% blocktrans with title as filter_title %} By {{ filter_title }} {% endblocktrans %}&lt;/h3&gt;
&lt;ul&gt;
{% for choice in choices %}
    {% if choice.display in groups %}
    &lt;li{% if choice.selected %} class="selected"{% endif %}&gt;
        &lt;a href="{{ choice.query_string|iriencode }}"&gt;{{ choice.display }}&lt;/a&gt;&lt;/li&gt;
    {% endif %}
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>5436494</id><snippet>choice</snippet></ROW><ROW><id>5436494</id><snippet>choice.display</snippet></ROW><ROW><id>5436542</id><snippet>import RDF
parser = RDF.Parser(name="rdfxml")
model = RDF.Model()
parser.parse_into_model(model, "file:./align.rdf", None)
</snippet></ROW><ROW><id>5436542</id><snippet>for statement in RDF.Query("SELECT ?a ?m WHERE {?a a &lt;http://knowledgeweb.semanticweb.org/heterogeneity/alignment#Cell&gt; ; &lt;http://knowledgeweb.semanticweb.org/heterogeneity/alignment#measure&gt; ?m. }",query_language="sparql").execute(model):
print "cell: %s measure:%s"%(statement['a'],statement['m'])
</snippet></ROW><ROW><id>5436542</id><snippet>cell: (r1301329275r1126r2) measure:1.0^^&lt;http://www.w3.org/2001/XMLSchema#float&gt;
cell: (r1301329275r1126r3) measure:0.8^^&lt;http://www.w3.org/2001/XMLSchema#float&gt;
cell: (r1301329275r1126r4) measure:0.9^^&lt;http://www.w3.org/2001/XMLSchema#float&gt;
</snippet></ROW><ROW><id>5436709</id><snippet>reduce(add, r)</snippet></ROW><ROW><id>5436709</id><snippet>add()</snippet></ROW><ROW><id>5436709</id><snippet>PyEval_CallObject</snippet></ROW><ROW><id>5436709</id><snippet>add</snippet></ROW><ROW><id>5436709</id><snippet>for (;;) {
    ...
    if (result == NULL)
        result = op2;
    else {
        # here it is creating a tuple to pass the previous result and the next
        # value from range(100) into func add():
        PyTuple_SetItem(args, 0, result);
        PyTuple_SetItem(args, 1, op2);
        if ((result = PyEval_CallObject(func, args)) == NULL)
            goto Fail;
    }
</snippet></ROW><ROW><id>5436709</id><snippet>1 + 2</snippet></ROW><ROW><id>5436709</id><snippet>3</snippet></ROW><ROW><id>5436709</id><snippet>f1 = lambda: 1 + 2
c1 = byteplay.Code.from_code(f1.func_code)
print c1.code

1           1 LOAD_CONST           3
            2 RETURN_VALUE         
</snippet></ROW><ROW><id>5436709</id><snippet>a + b</snippet></ROW><ROW><id>5436709</id><snippet>f2 = lambda a, b: a + b
c2 = byteplay.Code.from_code(f2.func_code)
print c2.code

1           1 LOAD_FAST            a
            2 LOAD_FAST            b
            3 BINARY_ADD           
            4 RETURN_VALUE         
</snippet></ROW><ROW><id>5436740</id><snippet>class TwitterC:
    def __init__(self, database):
        self.database = database
    def logtodatabase(self, tweet, timestamp):
        # Will log to the database
        database = sqlite3.connect(self.database) # Create a database file
        #(...)
</snippet></ROW><ROW><id>5436887</id><snippet>def funct():
    "This function is self-documenting"
    pass
</snippet></ROW><ROW><id>5436887</id><snippet>def funct():
    """
     This function doesn't expect arguments
     and returns zero.
    """
    return 0
</snippet></ROW><ROW><id>5436887</id><snippet>&gt;&gt;&gt; help(funct)
</snippet></ROW><ROW><id>5436887</id><snippet>__doc__</snippet></ROW><ROW><id>5436887</id><snippet>&gt;&gt;&gt; print funct.__doc__
This function doesn't expect arguments
and returns zero.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5437026</id><snippet>function 1 _ = "first parameter has a one"
function _ 1 = "second parameter is a one"
function _ _ = "I don't know what crazy number you passed in"
</snippet></ROW><ROW><id>5437026</id><snippet>function 1 a = "second parameter is " ++ (show a)
</snippet></ROW><ROW><id>5437138</id><snippet>d = {};    d["boo"] = img3</snippet></ROW><ROW><id>5437138</id><snippet>return eval("sqlimg%d" % var)</snippet></ROW><ROW><id>5437274</id><snippet>WaitForMultipleObjects</snippet></ROW><ROW><id>5437296</id><snippet>print "Hello world!"</snippet></ROW><ROW><id>5437296</id><snippet>print "Hello world!\n"</snippet></ROW><ROW><id>5437296</id><snippet>say</snippet></ROW><ROW><id>5437296</id><snippet>say</snippet></ROW><ROW><id>5437296</id><snippet>use feature 'say'</snippet></ROW><ROW><id>5437438</id><snippet>\n</snippet></ROW><ROW><id>5437438</id><snippet>print</snippet></ROW><ROW><id>5437438</id><snippet>print icons[I]+"\r",
</snippet></ROW><ROW><id>5437438</id><snippet>\r</snippet></ROW><ROW><id>5437438</id><snippet>\b</snippet></ROW><ROW><id>5437438</id><snippet>print icons[I]+"\b",
</snippet></ROW><ROW><id>5437438</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>5437485</id><snippet>for date in set(dates):
</snippet></ROW><ROW><id>5437485</id><snippet>set()</snippet></ROW><ROW><id>5437652</id><snippet>print("Why, hello there wonderful "
      "stackoverflow people!")
</snippet></ROW><ROW><id>5437811</id><snippet>settings.CMS_TEMPLATES</snippet></ROW><ROW><id>5437811</id><snippet>None</snippet></ROW><ROW><id>5437811</id><snippet>CMS_TEMPLATES</snippet></ROW><ROW><id>5438428</id><snippet>a[:]=b</snippet></ROW><ROW><id>5438428</id><snippet>a.clear(); a.update(b)</snippet></ROW><ROW><id>5438635</id><snippet>class MyNum(object):
    def __init__(self, val):
        super(MyNum,self).__init__()
        self.val = val

    def __add__(self, num):
        return self.__class__.(self.val + num)

    def __str__(self):
        return self.__class__.__name__ + '(' + str(self.val) + ')'

print(MyNum(3) + 2)   # -&gt; MyNum(5)
</snippet></ROW><ROW><id>5438756</id><snippet>float()</snippet></ROW><ROW><id>5438756</id><snippet>&gt;&gt;&gt; float('NaN')
nan
&gt;&gt;&gt; float('Inf')
inf
&gt;&gt;&gt; -float('Inf')
-inf
&gt;&gt;&gt; float('Inf') == float('Inf')
True
&gt;&gt;&gt; float('Inf') == 1
False
</snippet></ROW><ROW><id>5438968</id><snippet>{% block outer_block %} 
  Outer things
  {% block inner_block %}
    Inner things
  {% endblock %}
  More outer things
{% endblock %}
</snippet></ROW><ROW><id>5438968</id><snippet>inner_block</snippet></ROW><ROW><id>5438968</id><snippet>{% block inner_block %} 
   customized inner content
{% endblock %}`.  
</snippet></ROW><ROW><id>5439198</id><snippet>sql</snippet></ROW><ROW><id>5439198</id><snippet>UserScore.py</snippet></ROW><ROW><id>5439198</id><snippet>sql</snippet></ROW><ROW><id>5439198</id><snippet>import UserScore
UserScore.user = user
</snippet></ROW><ROW><id>5439198</id><snippet>UserScore.py</snippet></ROW><ROW><id>5439198</id><snippet>user = None
</snippet></ROW><ROW><id>5439198</id><snippet>user</snippet></ROW><ROW><id>5439502</id><snippet>''</snippet></ROW><ROW><id>5439502</id><snippet>logs/mylog.log</snippet></ROW><ROW><id>5439502</id><snippet>django.request</snippet></ROW><ROW><id>5439502</id><snippet>logs/django_request.log</snippet></ROW><ROW><id>5439502</id><snippet>'propagate'</snippet></ROW><ROW><id>5439502</id><snippet>False</snippet></ROW><ROW><id>5439502</id><snippet>django.request</snippet></ROW><ROW><id>5439502</id><snippet>LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'logs/mylog.log',
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter':'standard',
        },  
        'request_handler': {
                'level':'DEBUG',
                'class':'logging.handlers.RotatingFileHandler',
                'filename': 'logs/django_request.log',
                'maxBytes': 1024*1024*5, # 5 MB
                'backupCount': 5,
                'formatter':'standard',
        },
    },
    'loggers': {

        '': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}
</snippet></ROW><ROW><id>5439510</id><snippet>def Main():
    Class_A_Input = int(raw_input('Enter Class A tickets sold: '))
    total_profit(Class_A_Input)

def total_profit(Class_A_Tickets):
    print (Class_A_Tickets * 15)
    a = Class_A_Tickets * 15
    b = str(a)
    text_file = open('test.txt', 'w')
    text_file.write(b)
    text_file.close()

Main()
</snippet></ROW><ROW><id>5439633</id><snippet>from django.conf.urls.defaults import *
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
  url(r'^admin/', include(admin.site.urls)),
  url(r'^', include('myproject.cms.urls')),
)
</snippet></ROW><ROW><id>5439711</id><snippet>def index(self):
    if request.params.has_key('session'):
      access_token = simplejson.loads(request.params['session'])['access_token']
      graph = facebook.GraphAPI(access_token)
      tmpl_context.user = graph.get_object("me")
      return render('/index.mako')
    return render('/oauth_redirect.mako')
</snippet></ROW><ROW><id>5439739</id><snippet>int</snippet></ROW><ROW><id>5439739</id><snippet>ValueError</snippet></ROW><ROW><id>5439817</id><snippet>version</snippet></ROW><ROW><id>5439817</id><snippet>&lt;code&gt;__hash__</snippet></ROW><ROW><id>5439817</id><snippet>hash()</snippet></ROW><ROW><id>5439997</id><snippet>return</snippet></ROW><ROW><id>5439997</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>5439997</id><snippet>return redirect(url_for('show_entries')
</snippet></ROW><ROW><id>5439997</id><snippet>return redirect(url_for('show_entries'))
</snippet></ROW><ROW><id>5440108</id><snippet>def getInt(msg):
    while True:
        try:
            return int(raw_input(msg))
        except ValueError:
            pass

def total_profit(a, b, c):
    return 35.0*a + 25.0*b + 10.0*c

def main():
    class_a = getInt('Enter Class A tickets sold: ')
    class_b = getInt('Enter Class B tickets sold: ')
    class_c = getInt('Enter Class C tickets sold: ')

    print("Total profit is ${0:0.2f}.".format(total_profit(class_a, class_b, class_c)))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5440175</id><snippet>with open("mac", "wb") as f:
    for ind in xrange(1000000):
        f.write("a" * 9 + "\r")
</snippet></ROW><ROW><id>5440175</id><snippet>f.write(b"a" * 9 + b"\r")
</snippet></ROW><ROW><id>5440175</id><snippet>xrange</snippet></ROW><ROW><id>5440175</id><snippet>range</snippet></ROW><ROW><id>5440415</id><snippet>from file1 import x
print x
</snippet></ROW><ROW><id>5440415</id><snippet>import file1
print file1.x
</snippet></ROW><ROW><id>5440415</id><snippet>extends</snippet></ROW><ROW><id>5440415</id><snippet>import</snippet></ROW><ROW><id>5440415</id><snippet>class Subclass:
    ...

class ExtendsSubclass(Subclass):
    ...
</snippet></ROW><ROW><id>5440418</id><snippet>action=append</snippet></ROW><ROW><id>5440418</id><snippet>add_argument</snippet></ROW><ROW><id>5440418</id><snippet>import argparse

parser= argparse.ArgumentParser()
parser.add_argument ('-f', '--file', nargs=3, action='append')

files = parser.parse_args('-f file1 string1 string2 -f file2 string3 string4 -f file3 string5 string6'.split()).file

for f in files:
    print tuple(f)
</snippet></ROW><ROW><id>5440418</id><snippet>('file1', 'string1', 'string2')
('file2', 'string3', 'string4')
('file3', 'string5', 'string6')
</snippet></ROW><ROW><id>5440418</id><snippet>import argparse

parser= argparse.ArgumentParser(prog='Test', usage='%(prog)s -f Filename Option1 Option2 ')
parser.add_argument ('-f', '--file', nargs=3, action='append')

files = parser.parse_args().file

for f in files:
    print tuple(f)
</snippet></ROW><ROW><id>5440418</id><snippet>python test.py -f file1 "foo bar" "baz" -f file2 foo bar
('file1', 'foo bar', 'baz')
('file2', 'foo', 'bar')

python test.py -f file1 "foo bar" "string2" -f file2 foo bar -f file3 "foo" "bar"
('file1', 'foo bar', 'string2')
('file2', 'foo', 'bar')
('file3', 'foo', 'bar')

python test.py -f file1 "foo bar"
usage: Test -f Filename Option1 Option2
Test: error: argument -f/--file: expected 3 argument(s)
</snippet></ROW><ROW><id>5440431</id><snippet>import re

def hasDigit(s):
    return not not re.search("\d", s)

def Main():
    while True:
        Class_A_Input = raw_input('Enter Class A tickets sold: ')
        Class_B_Input = raw_input('Enter Class B tickets sold: ')
        Class_C_Input = raw_input('Enter Class C tickets sold: ')

        if all([hasDigit(Input) for Input in [Class_A_Input, Class_B_Input, Class_C_Input]]):
            break
        else:
            print 'Wrong'
</snippet></ROW><ROW><id>5440978</id><snippet>.py</snippet></ROW><ROW><id>5441339</id><snippet>def recur(n, count=0):
    if n == 0:
        return "Finished count %s" % count
    return recur(n-1, count+1)
</snippet></ROW><ROW><id>5441578</id><snippet>import pydot 

edges = [(1,2), (1,3), (1,4), (3,4)] 
g = pydot.graph_from_edges(edges) 
g.write_jpeg('graph_from_edges_dot.jpg', prog='dot')
</snippet></ROW><ROW><id>5441578</id><snippet>pip install pydot
</snippet></ROW><ROW><id>5441578</id><snippet>easy_install</snippet></ROW><ROW><id>5441578</id><snippet>g.write_jpeg('graph_from_edges_dot.jpg', prog='dot')
</snippet></ROW><ROW><id>5441578</id><snippet>g.write('graph_from_edges_dot.png', prog='dot', format='png')
</snippet></ROW><ROW><id>5441578</id><snippet>g.write_png('graph_from_edges_dot.png', prog='dot')
</snippet></ROW><ROW><id>5442497</id><snippet>sqla_metadata = sqlalchemy.schema.MetaData()

type_mapping = {'int': Integer, 'text': String} # etc.
cols = []
for (col_name, col_type) in your_parsed_metadata.fields:
    cols.append(Column(col_name, type_mapping[col_type]))

cols.append(Column('datafile_id', Integer, ForeignKey("datafile.datafile_id"), nullable=False),)
new_table = Table(your_parsed_metadata.tablename, sqla_metadata, *cols)
sqla_metadata.create_all(engine)
</snippet></ROW><ROW><id>5442623</id><snippet>\\?\</snippet></ROW><ROW><id>5442623</id><snippet>&gt;&gt;&gt; os.path.isdir(r"\\?\c:\1\test.")
True
</snippet></ROW><ROW><id>5442623</id><snippet>\\?\</snippet></ROW><ROW><id>5442734</id><snippet>q = db.GqlQuery("SELECT * FROM Foo")
results = q.fetch(10)
db.delete(results)
</snippet></ROW><ROW><id>5442909</id><snippet>a = min(a, b)
</snippet></ROW><ROW><id>5442945</id><snippet>''</snippet></ROW><ROW><id>5442945</id><snippet>&gt;&gt;&gt; lst2 = [x for x in lst if x != '']
&gt;&gt;&gt; lst2
[-1.33, -1.33, -3.95, 0, -2.66, 1.41, 0, 0, 1.4, 1.37, 0]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5442945</id><snippet>&gt;&gt;&gt; [x for x in lst if isinstance(x, (float, int))]
[-1.33, -1.33, -3.95, 0, -2.66, 1.41, 0, 0, 1.4, 1.37, 0]

# or a bit fancier
&gt;&gt;&gt; import numbers
&gt;&gt;&gt; [x for x in lst if isinstance(x, numbers.Number)]
[-1.33, -1.33, -3.95, 0, -2.66, 1.41, 0, 0, 1.4, 1.37, 0]
</snippet></ROW><ROW><id>5442981</id><snippet>partial</snippet></ROW><ROW><id>5442981</id><snippet>partial</snippet></ROW><ROW><id>5442981</id><snippet>harvester(text, case)</snippet></ROW><ROW><id>5442981</id><snippet>harvester</snippet></ROW><ROW><id>5442981</id><snippet>text</snippet></ROW><ROW><id>5442981</id><snippet>case</snippet></ROW><ROW><id>5442981</id><snippet>case[i] + case[0]</snippet></ROW><ROW><id>5442981</id><snippet>from functools import partial

def harvester(text, case):
    X = case[0]
    return text + str(X)

partial_harvester = partial(harvester, case=RAW_DATASET)

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=6)
    case_data = RAW_DATASET
    pool.map(partial_harvester, case_data, 1)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>5442981</id><snippet>partial</snippet></ROW><ROW><id>5443023</id><snippet>&gt;&gt;&gt; t=1234
&gt;&gt;&gt; tt=pack('&lt;I', t)
&gt;&gt;&gt; tt
'\xd2\x04\x00\x00'
&gt;&gt;&gt; unpack('&lt;I', tt)
(1234,)

&gt;&gt;&gt; ttt, = unpack('&lt;I', tt) 
&gt;&gt;&gt; ttt
1234
</snippet></ROW><ROW><id>5443366</id><snippet>star_list = ['**', 'foo', '*', 'bar', 'bar', '**', '**', 'baz']
star_list = [i for i, next_i in zip(star_list, star_list[1:] + [None]) 
             if (i, next_i) != ('**', '**')]
</snippet></ROW><ROW><id>5443366</id><snippet>from itertools import islice, izip, chain

star_list = ['**', 'foo', '*', 'bar', 'bar', '**', '**', 'baz']
sl_shift = chain(islice(star_list, 1, None), [None])
star_list = [i for i, next_i in izip(star_list, sl_shift) 
             if (i, next_i) != ('**', '**')]
</snippet></ROW><ROW><id>5443366</id><snippet>pairwise</snippet></ROW><ROW><id>5443366</id><snippet>itertools</snippet></ROW><ROW><id>5443366</id><snippet>from itertools import islice, izip, chain, tee
def compress(seq, x):
    seq, shift = tee(seq)
    shift = chain(islice(shift, 1, None), (object(),))
    return (i for i, j in izip(seq, shift) if (i, j) != (x, x))
</snippet></ROW><ROW><id>5443366</id><snippet>&gt;&gt;&gt; list(compress(star_list, '**'))
['**', 'foo', '*', 'bar', 'bar', '**', 'baz']
</snippet></ROW><ROW><id>5443619</id><snippet>import csv
reader = csv.reader(open('test.data', 'r'))
for row in reader:
    print '\t'.join(row)

import csv
reader = csv.reader(open('test.data', 'r'))
result = []
for row in reader:
    result.append(row)
print result[0][1]
</snippet></ROW><ROW><id>5443807</id><snippet>import sys, os
unbuffered = os.fdopen(sys.stdout.fileno(), 'w', 0)
</snippet></ROW><ROW><id>5443807</id><snippet>sys.stdout = unbuffered
</snippet></ROW><ROW><id>5443864</id><snippet>cerealizer</snippet></ROW><ROW><id>5443864</id><snippet>pickle</snippet></ROW><ROW><id>5443923</id><snippet>reader = csv.reader(open('test.data', 'r'))
result = {}
for row in reader:
    uclass=row[-1]
    if result.has_key(uclass):
        result[uclass].append(row[0:-1])
    else:
        result[uclass]=row[0:-1]
print repr(result)
</snippet></ROW><ROW><id>5443923</id><snippet>reader = csv.reader(open('test.data', 'r'))
result = {}
for row in reader:
    uclass=row[2]
    if result.has_key(uclass):
        result[uclass].append([row[0],row[1]])
    else:
        result[uclass]=[[row[0],row[1]]]
print repr(result)
</snippet></ROW><ROW><id>5443923</id><snippet>{
    'U1': [
              ['4.5','3.5'],
              ['4.5','6'],
              ['5','7'],
              ['7','6.5']
          ],
    'U2': [
              ['4.5','10.5'],
              ['3.5','10.5'],
              ['3.5','10.5']
          ]
}
</snippet></ROW><ROW><id>5443923</id><snippet>someList[&lt;start&gt;:&lt;end&gt;:&lt;skip&gt;]
</snippet></ROW><ROW><id>5443923</id><snippet>someList=[0,1,2,3,4,5,6,7,8,9]
</snippet></ROW><ROW><id>5443923</id><snippet>someList[0:10:2]
</snippet></ROW><ROW><id>5443923</id><snippet>[0,2,4,6,8]
</snippet></ROW><ROW><id>5444232</id><snippet>import second

 ...
  second.somefunction(self.response.out.write)
</snippet></ROW><ROW><id>5444232</id><snippet>def somefunction(output):
  output('Done')
</snippet></ROW><ROW><id>5444565</id><snippet>result = set1.intersection(set2, set3, set4, ...)
</snippet></ROW><ROW><id>5444687</id><snippet>result[uclass].append(row[:-1])
</snippet></ROW><ROW><id>5444687</id><snippet>result[uclass] = row[:-1]  
</snippet></ROW><ROW><id>5444796</id><snippet>class Node:
    def __init__(self, val):
        self.l_child = None
        self.r_child = None
        self.data = val

def binary_insert(root, node):
    if root is None:
        root = node
    else:
        if root.data &gt; node.data:
            if root.l_child == None:
                root.l_child = node
            else:
                binary_insert(root.l_child, node)
        else:
            if root.r_child == None:
                root.r_child = node
            else:
                binary_insert(root.r_child, node)

def in_order_print(root):
    if not root:
        return
    in_order_print(root.l_child)
    print root.data
    in_order_print(root.r_child)

def pre_order_print(root):
    if not root:
        return        
    print root.data
    in_order_print(root.l_child)
    in_order_print(root.r_child)    

r = Node(3)
binary_insert(r, Node(7))
binary_insert(r, Node(1))
binary_insert(r, Node(5))

print "in order:"
in_order_print(r)

print "pre order"
pre_order_print(r)

in order:
1
3
5
7
pre order
3
1
5
7
</snippet></ROW><ROW><id>5444848</id><snippet>f.seek(0)
f.read()
</snippet></ROW><ROW><id>5444848</id><snippet>f.seek(0, os.SEEK_END)
f.write('some stuff')
</snippet></ROW><ROW><id>5444954</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; print re.sub(r'[\\/:"*?&lt;&gt;|]+', "", "This\ Ăwesomé_Song?©.mp3")
This Ăwesomé_Song©.mp3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5445089</id><snippet>is</snippet></ROW><ROW><id>5445089</id><snippet>x is y</snippet></ROW><ROW><id>5445275</id><snippet>__LOCK__</snippet></ROW><ROW><id>5445275</id><snippet>import os
if os.path.exists("__LOCK__"):
    raise RuntimeError("Already running.") # or whatever
try:
    open("__LOCK__", "w").write("Put some info here if you want.")
finally:
    if os.path.exists("__LOCK__"):
        os.unlink("__LOCK__")
</snippet></ROW><ROW><id>5445307</id><snippet>str.decode()</snippet></ROW><ROW><id>5445307</id><snippet>bytes.encode()</snippet></ROW><ROW><id>5445307</id><snippet>str</snippet></ROW><ROW><id>5445330</id><snippet>glGenTextures</snippet></ROW><ROW><id>5445486</id><snippet>if True:
    print("True") # press return, then backspace
else:
    print("False")
</snippet></ROW><ROW><id>5445688</id><snippet>import fcntl, os, sys

# make stdin a non-blocking file
fd = sys.stdin.fileno()
fl = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

def enter_pressed():
    data = sys.stdin.read(1)
    return bool(data)

i = 0
while True:
    i += 1
    if enter_pressed():
        print(i)
</snippet></ROW><ROW><id>5445983</id><snippet>mylist = ['x', 3, 'b']
print '[%s]' % ', '.join(map(str, mylist))
</snippet></ROW><ROW><id>5446053</id><snippet>(r'^/signup/(.*)password=goodbye$', ...
</snippet></ROW><ROW><id>5446416</id><snippet>u = urllib2.urlopen(url)

meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])

estimated_bitrate = file_size/length_secs/1000*8
</snippet></ROW><ROW><id>5446445</id><snippet>print "Hangman v1.7 - by Josh &amp; Paul"
bsrly2 = False
bsrly = False
notlie = True
turns = 8
rec = ''
exp = '^[a-z]+$'
textfile = open('dictionary.txt', 'r')
words = textfile.read().split()
n = randint(0, len(words)-1)
word = words[n]
x = 0
w = list(word)
guess = ''
bs = ''
for letter in word:
    if letter in guess:
        bs += letter + ' '
    else:
        bs += '_ '

bs = bs.upper()
</snippet></ROW><ROW><id>5446445</id><snippet>def start():
    print "Hangman v1.7 - by Josh &amp; Paul"
    bsrly2 = False
    bsrly = False
    notlie = True
    turns = 8
    rec = ''
    exp = '^[a-z]+$'
    textfile = open('dictionary.txt', 'r')
    words = textfile.read().split()
    n = randint(0, len(words)-1)
    word = words[n]
    x = 0
    w = list(word)
    guess = ''
    bs = ''
    for letter in word:
        if letter in guess:
            bs += letter + ' '
        else:
            bs += '_ '

    bs = bs.upper()
</snippet></ROW><ROW><id>5446457</id><snippet>threading</snippet></ROW><ROW><id>5446457</id><snippet>thread</snippet></ROW><ROW><id>5446457</id><snippet>gunzip</snippet></ROW><ROW><id>5446457</id><snippet>tar</snippet></ROW><ROW><id>5446457</id><snippet>.zip</snippet></ROW><ROW><id>5446579</id><snippet>mmatrix = np.zeros((nrows, ncols))
</snippet></ROW><ROW><id>5446579</id><snippet>ncols</snippet></ROW><ROW><id>5446579</id><snippet>np.zeros</snippet></ROW><ROW><id>5446608</id><snippet>from pyswitch import Switch   # pyswitch can be found on PyPI

myswitch = Switch()

@myswitch.case(42)
def case42(value):
    print "I got 42!"

@myswitch.case(range(10))
def caseRange10(value):
    print "I got a number from 0-9, and it was %d!" % value

@myswitch.caseIn('lo')
def caseLo(value):
    print "I got a string with 'lo' in it; it was '%s'" % value

@myswitch.caseRegEx(r'\b([Pp]y\w)\b')
def caseReExPy(matchOb):
    print r"I got a string that matched the regex '\b[Pp]y\w\b', and the match was '%s'" % matchOb.group(1)

@myswitch.default
def caseDefault(value):
    print "Hey, default handler here, with a value of %r." % value

myswitch(5)  # prints: I got a number from 0-9, and it was 5!
myswitch('foobar')  # prints: Hey, default handler here, with a value of foobar.
myswitch('The word is Python')  # prints: I got a string that matched the regex '\b[Pp]y\w\b', and the match was 'Python'
</snippet></ROW><ROW><id>5446697</id><snippet>Run Command</snippet></ROW><ROW><id>5446697</id><snippet>More</snippet></ROW><ROW><id>5446697</id><snippet>Start In</snippet></ROW><ROW><id>5446697</id><snippet>%D</snippet></ROW><ROW><id>5446718</id><snippet>A</snippet></ROW><ROW><id>5446718</id><snippet>B</snippet></ROW><ROW><id>5446718</id><snippet>C</snippet></ROW><ROW><id>5446718</id><snippet>super()</snippet></ROW><ROW><id>5446718</id><snippet>B</snippet></ROW><ROW><id>5446718</id><snippet>class A(object):
    some_method(arg1, arg2, karg1=None):
        do_some_stuff(arg1, arg2, karg1)

class B(A):
    # extend and override class A
    some_method(arg1, arg2, karg1=None):
        super(B, self).some_method(arg1, arg2, karg1)
        do_more_stuff(arg1, arg2, karg1)

class C(A, B):
    # extend and override class A
    some_method(arg1, arg2, karg1=None):
        do_other_stuff(arg1, arg2, karg1)
        super(C, self).some_method(arg1, arg2, karg1)
</snippet></ROW><ROW><id>5446718</id><snippet>some_method</snippet></ROW><ROW><id>5446718</id><snippet>C</snippet></ROW><ROW><id>5446718</id><snippet>C</snippet></ROW><ROW><id>5446722</id><snippet>Rule(SgmlLinkExtractor(allow=('http\://example\.com/message/.*\.aspx', )), callback='parse_item'),</snippet></ROW><ROW><id>5446722</id><snippet>parse_item</snippet></ROW><ROW><id>5446884</id><snippet>request: http://www.mydomain.com/signup/?password=goodbye 

(r'^signup/$','abc.wall.views.signup_front')

def signup_front(self, request):
    query_param = request.GET.get('password', None)
    if query_param == "goodbye":
        return signup_goodbye(request)
    # other stuff here

def signup_goodbye(self, request):
    # blah
    # return render_to_response(..)
</snippet></ROW><ROW><id>5446913</id><snippet>import psycopg2

def importFromCsv(conn, fname, table):
    with open(fname) as inf:
        conn.cursor().copy_from(inf, table)

def main():
    conn = ??  # set up database connection
    importFromCsv(conn, "c:/myfile.csv", "MyTable")
    print("Data copied")

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5446936</id><snippet>tmp_s = np.array; tmp_idx = np.array;
</snippet></ROW><ROW><id>5446936</id><snippet>tmp_s</snippet></ROW><ROW><id>5446936</id><snippet>tmp_idx</snippet></ROW><ROW><id>5446936</id><snippet>np.interp</snippet></ROW><ROW><id>5446936</id><snippet>class myClass
    def myfunction(self, in_array, in_indeces = None):
        if(in_indeces is None):
            self.indeces = np.arange(len(in_array))
            # NOTE: Use in_array.size or in_array.shape[0], etc instead of len()
        else:
            self.indeces = in_indeces       
        # clean data
        # set ii to the indices of in_array that are neither nan or inf
        ii = ~np.isnan(in_array) &amp; ~np.isinf(in_array)
        # assuming in_indeces and in_array are the same shape
        tmp_s = in_array[ii]
        tmp_idx = in_indeces[ii] 
        self.indeces = np.arange(tmp_idx.size)
        self.samples = np.interp(self.indeces, tmp_idx, tmp_s)
</snippet></ROW><ROW><id>5447060</id><snippet>IPBRoot</snippet></ROW><ROW><id>5447060</id><snippet>PBServerFactory</snippet></ROW><ROW><id>5447060</id><snippet>rootObject</snippet></ROW><ROW><id>5447060</id><snippet>IPBRoot</snippet></ROW><ROW><id>5447060</id><snippet>Portal</snippet></ROW><ROW><id>5447060</id><snippet>_PortalRoot</snippet></ROW><ROW><id>5447060</id><snippet>rootObject</snippet></ROW><ROW><id>5447060</id><snippet>remote_loginPlaintext</snippet></ROW><ROW><id>5447060</id><snippet>login</snippet></ROW><ROW><id>5447060</id><snippet>Portal</snippet></ROW><ROW><id>5447060</id><snippet>IPerspective</snippet></ROW><ROW><id>5447060</id><snippet>_PortalRoot</snippet></ROW><ROW><id>5447060</id><snippet>IAnonymous</snippet></ROW><ROW><id>5447060</id><snippet>IUsernamePassword</snippet></ROW><ROW><id>5447060</id><snippet>Portal</snippet></ROW><ROW><id>5447108</id><snippet>ClientFactory</snippet></ROW><ROW><id>5447108</id><snippet>ClientFactory.clientConnectionLost</snippet></ROW><ROW><id>5447108</id><snippet>IProtocol.connectionLost</snippet></ROW><ROW><id>5447108</id><snippet>IProtocol</snippet></ROW><ROW><id>5447108</id><snippet>clientConnectionFailed</snippet></ROW><ROW><id>5447108</id><snippet>Deferred</snippet></ROW><ROW><id>5447108</id><snippet>connect</snippet></ROW><ROW><id>5447108</id><snippet>Deferred</snippet></ROW><ROW><id>5447108</id><snippet>ReconnectingClientFactory</snippet></ROW><ROW><id>5447108</id><snippet># Warning, untested, sorry if it's broken.
@inlineCallbacks
def retry(deferredThing, delay=30.0, retryCount=5):
    retries = retryCount
    while True:
        try:
            result = yield deferredThing()
        except:
            if not retries:
                raise
            retries -= 1
            log.err()
            yield deferLater(reactor, delay, lambda : None)
        else:
            returnValue(result)
</snippet></ROW><ROW><id>5447108</id><snippet>deferredThing</snippet></ROW><ROW><id>5447108</id><snippet>Deferred</snippet></ROW><ROW><id>5447108</id><snippet>IStreamServerEndpoint.connect</snippet></ROW><ROW><id>5447108</id><snippet>connectionLost</snippet></ROW><ROW><id>5447108</id><snippet>Deferreds</snippet></ROW><ROW><id>5447142</id><snippet>import sys
print sys.version
</snippet></ROW><ROW><id>5447252</id><snippet>('/\d+',JsonHandler)

class JsonHandler(webapp.RequestHandler): 
  def get(self):
    if self.request.get("fmt") == "json": #check the query string in the get handler
      self.response.out.write("hello")
</snippet></ROW><ROW><id>5447327</id><snippet>RequestContext()</snippet></ROW><ROW><id>5447433</id><snippet>urllib2.quote('%')
'%25'
</snippet></ROW><ROW><id>5447509</id><snippet>is</snippet></ROW><ROW><id>5447509</id><snippet>True</snippet></ROW><ROW><id>5447509</id><snippet>==</snippet></ROW><ROW><id>5447509</id><snippet>some_dict = {key: value for key, value in some_dict.items() 
             if value is not value_to_remove}
</snippet></ROW><ROW><id>5447509</id><snippet>&gt;&gt;&gt; some_dict = {1: "Hello", 2: "Goodbye", 3: "You say yes", 4: "I say no"}
&gt;&gt;&gt; value_to_remove = "You say yes"
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value is not value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 3: 'You say yes', 4: 'I say no'}
&gt;&gt;&gt; some_dict = {key: value for key, value in some_dict.items() if value != value_to_remove}
&gt;&gt;&gt; some_dict
{1: 'Hello', 2: 'Goodbye', 4: 'I say no'}
</snippet></ROW><ROW><id>5447509</id><snippet>!=</snippet></ROW><ROW><id>5447509</id><snippet>is not</snippet></ROW><ROW><id>5447531</id><snippet>tree = [{}, None]</snippet></ROW><ROW><id>5447531</id><snippet>def addTerm(self, term):
   node = self.tree
   for c in term:
      c = c.lower()
      if re.match("[a-z]",c):
         node = node[0].setdefault(c,[{},None])
   node[1] = term
</snippet></ROW><ROW><id>5447531</id><snippet>node[1]</snippet></ROW><ROW><id>5447531</id><snippet>def findTerm(self, term):
    node = self.tree
    for c in term:
        c = c.lower()
        if re.match("[a-z]",c):
            if c in node[0]:
                node = node[0][c]
            else:
                return False
    return node[1] != None
</snippet></ROW><ROW><id>5447587</id><snippet>message = mail.EmailMessage(sender="&lt;emailid&gt;",subject="Output",to="&lt;emailid&gt;"))
message.body = ""
message.send()
</snippet></ROW><ROW><id>5447625</id><snippet>hash()</snippet></ROW><ROW><id>5447625</id><snippet>None</snippet></ROW><ROW><id>5447625</id><snippet>-1042159082</snippet></ROW><ROW><id>5447625</id><snippet>0</snippet></ROW><ROW><id>5447625</id><snippet>False</snippet></ROW><ROW><id>5447799</id><snippet># ...
callback_str = getcallback_str() # e.g., 'self.logic.account_new'
callback = eval_dottedname(self, callback_str)`
</snippet></ROW><ROW><id>5447799</id><snippet>eval_dottedname()</snippet></ROW><ROW><id>5447799</id><snippet>def eval_dottedname(obj, dottedname):
    if dottedname.partition(".")[0] != 'self': # or some other criteria
                                               # to limit the context
        raise ValueError
    return reduce(getattr, dottedname.split('.')[1:], obj)
</snippet></ROW><ROW><id>5447799</id><snippet>cmd</snippet></ROW><ROW><id>5447799</id><snippet>  def dispatch(self, callback_str):
      return getattr(self, 'do_' + callback_str, self.default)()      

  def do_this(self):
      pass

  def do_that(self):
      pass
</snippet></ROW><ROW><id>5448256</id><snippet>STATS_DUMP = True</snippet></ROW><ROW><id>5448256</id><snippet>settings.py</snippet></ROW><ROW><id>5448364</id><snippet>return self.app.users.filter(user=user_obj).exists()
</snippet></ROW><ROW><id>5448364</id><snippet>exists()</snippet></ROW><ROW><id>5448610</id><snippet>gtk.main()</snippet></ROW><ROW><id>5448610</id><snippet>fun</snippet></ROW><ROW><id>5448610</id><snippet>self.get_time()</snippet></ROW><ROW><id>5448610</id><snippet>def fun():
   self.button1.set_sensitive(False)
   while gtk.events_pending():
       gtk.main_iteration_do(False)
   self.get_time()
</snippet></ROW><ROW><id>5448659</id><snippet>entry = yt_service.GetYouTubeVideoEntry(video_id = entry_video_id)
</snippet></ROW><ROW><id>5448659</id><snippet>comment_feed = yt_service.GetYouTubeVideoCommentFeed(uri=url)
</snippet></ROW><ROW><id>5448773</id><snippet>import os

def delete_file(name):
    os.remove(name)

import atexit
atexit.register(delete_file, file_path)
</snippet></ROW><ROW><id>5448894</id><snippet>/</snippet></ROW><ROW><id>5448894</id><snippet>from __future__ import division</snippet></ROW><ROW><id>5448937</id><snippet>open("/etc/ld.so.preload", O_RDONLY)    = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=22, ...}) = 0
mmap(NULL, 22, PROT_READ|PROT_WRITE, MAP_PRIVATE, 3, 0) = 0x7feb24b32000
close(3)                                = 0
open("/lib/libncom.so.4.0.1", O_RDONLY) = 3
</snippet></ROW><ROW><id>5449239</id><snippet>map</snippet></ROW><ROW><id>5449239</id><snippet>&lt;buffer&gt;</snippet></ROW><ROW><id>5449239</id><snippet>autocmd FileType python</snippet></ROW><ROW><id>5449239</id><snippet>map</snippet></ROW><ROW><id>5449239</id><snippet>noremap</snippet></ROW><ROW><id>5449239</id><snippet>&lt;C-u&gt;</snippet></ROW><ROW><id>5449239</id><snippet>w</snippet></ROW><ROW><id>5449239</id><snippet>nnoremap</snippet></ROW><ROW><id>5449239</id><snippet>&lt;S-e&gt;</snippet></ROW><ROW><id>5449239</id><snippet>E</snippet></ROW><ROW><id>5449239</id><snippet>w</snippet></ROW><ROW><id>5449239</id><snippet>!...</snippet></ROW><ROW><id>5449239</id><snippet>:w | !/usr/bin/env python %&lt;CR&gt;</snippet></ROW><ROW><id>5449239</id><snippet>usr</snippet></ROW><ROW><id>5449293</id><snippet>colours = {"black": "000",
           "red": "f00",
           "green": "0f0",
           "yellow": "ff0",
           "blue": "00f",
           "magenta": "f0f",
           "cyan": "0ff",
           "white": "fff"}

class MyString(str):
    pass

for name, code in colours.iteritems():
    def _in_colour(self, code=code):
        return '&lt;span style="color: %s"&gt;%s&lt;/span&gt;' % (code, self)
    setattr(MyString, "in_" + name, _in_colour)
</snippet></ROW><ROW><id>5449979</id><snippet>ch = 'bbbiiieeefffhhhaaacccddd'

d = dict(zip(('aaa','bbb','ccc','ddd','eee','fff','ggg','hhh','iii'),
             ('123','234','345','456','567','678','789','8910','91011')))

def lect(x):
    gen = iter(x) 
    while True:
        yield ''.join((gen.next(),gen.next(),gen.next()))

print [ (i+1,d[x]) for i,x in enumerate(lect(ch)) ]
</snippet></ROW><ROW><id>5449979</id><snippet>import re

ch = 'bbbiiieeefffhhhaaacccddd'

d = dict(zip(('aaa','bbb','ccc','ddd','eee','fff','ggg','hhh','iii'),
             ('123','234','345','456','567','678','789','8910','91011')))

pat = re.compile('|'.join(d.iterkeys()))

print [ ((mat.start()/3)+1,d[mat.group()]) for mat in pat.finditer(ch) ]
</snippet></ROW><ROW><id>5450087</id><snippet>import numpy
a = numpy.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
print a[1, 2]
point = (1, 2)
print a[point]
</snippet></ROW><ROW><id>5450087</id><snippet>numpy.array()</snippet></ROW><ROW><id>5450183</id><snippet>sudo apt-get install libpq-dev python-dev</snippet></ROW><ROW><id>5450399</id><snippet>query = """INSERT INTO `data` (frame, sensor_row, sensor_col, value) VALUES (%s, %s, %s, %s ) """
values = []
rows, cols, frames = numpy.nonzero(data)
for row, col, frame in zip(rows, cols, frames):
    values.append((frame, row, col, data[row,col,frame]))

cur.executemany(query, values)
</snippet></ROW><ROW><id>5450399</id><snippet>query = """INSERT INTO `data` (frame, sensor_row, sensor_col, value) VALUES (%s, %s, %s, %s ) """
rows, cols, frames = numpy.nonzero(data)
values = [(row, col, frame, val) for row, col, frame, val in zip(rows, cols, frames, data[rows,cols,frames])]
cur.executemany(query, values)
</snippet></ROW><ROW><id>5450569</id><snippet>reduce(lambda x,y: x+y, l)</snippet></ROW><ROW><id>5450569</id><snippet>sum(l)</snippet></ROW><ROW><id>5450569</id><snippet>sum(l)</snippet></ROW><ROW><id>5450569</id><snippet>sum</snippet></ROW><ROW><id>5451265</id><snippet>(1,2,3)</snippet></ROW><ROW><id>5451265</id><snippet>key</snippet></ROW><ROW><id>5451265</id><snippet>value</snippet></ROW><ROW><id>5451265</id><snippet>&gt;&gt;&gt; dict(((1,(2,3)), (2,(2,3)))).items()
[(1, (2, 3)), (2, (2, 3))]
</snippet></ROW><ROW><id>5451265</id><snippet>&gt;&gt;&gt; dict((((1,2),3), ((2,2),3)))
[((1, 2), 3), ((2, 2), 3)]
</snippet></ROW><ROW><id>5451265</id><snippet>key</snippet></ROW><ROW><id>5451265</id><snippet>dict((1,2,3), (2,2,3), (3,2,3))
</snippet></ROW><ROW><id>5451265</id><snippet>def special_dict(*args):
    return dict((arg[0], arg[1:]) for arg in args)
</snippet></ROW><ROW><id>5451265</id><snippet>class Invite(models.Model):
    STATE_UNKNOWN = 0
    STATE_WILL_PLAY = 1
    STATE_WONT_PLAY = 2
    STATE_READY = 3
    STATE_CHOICES = dict(((STATE_UNKNOWN, _("Unknown")),
                     (STATE_WILL_PLAY, _("Yes, I'll play")), 
                     (STATE_WONT_PLAY, _("Sorry, can't play")),
                     (STATE_READY, _("I'm ready to play now"))))
    ...


    def change_state(self, state):
        assert(state in Invite.STATE_CHOICES)
</snippet></ROW><ROW><id>5451265</id><snippet>for state, description = Invite.STATE_CHOICES.iteritems():
    print "{0} == {1}".format(state, description)
</snippet></ROW><ROW><id>5451265</id><snippet>change_state</snippet></ROW><ROW><id>5451265</id><snippet>models.IntegerField(sorted(choices=Invite.STATE_CHOICES.iteritems()))
</snippet></ROW><ROW><id>5451306</id><snippet>.tell()</snippet></ROW><ROW><id>5451306</id><snippet>.seek()</snippet></ROW><ROW><id>5451306</id><snippet>line.field</snippet></ROW><ROW><id>5451306</id><snippet>GROUP BY</snippet></ROW><ROW><id>5451306</id><snippet>sqlite</snippet></ROW><ROW><id>5451542</id><snippet>def makeHTMLRow(d, 'title'):
    s =  "&lt;tr&gt;\n\t"
    s += "&lt;td&gt;%(year)d&lt;/td&gt;\n\t"
    s += "&lt;td&gt;%(director)s&lt;/td&gt;\n"
    s += "&lt;/tr&gt;&lt;tr&gt;\n\t"
    s += "&lt;td&gt;%(title)s&gt;&lt;/td&gt;\n"
    s += "&lt;/tr&gt;"
    return s % d
</snippet></ROW><ROW><id>5451725</id><snippet>self.head = Link(None, None)
self.head.next = self.head
</snippet></ROW><ROW><id>5451725</id><snippet>def insert_after(insert_node, after_node):
    insert_node.next = after_node.next
    after_node.next = insert_node
</snippet></ROW><ROW><id>5451725</id><snippet>insert_after(node, head)
</snippet></ROW><ROW><id>5451725</id><snippet>def insert_before(node, before_node):
    loc = head
    while last.next != before_node:
        loc = loc.next
    insert_after(insert_node, loc)
</snippet></ROW><ROW><id>5451725</id><snippet>insert_before(node, head)
</snippet></ROW><ROW><id>5451725</id><snippet>current = self.head.next
while current != self.head:
    # do something with current.data

    # advance to next element
    current = current.next
</snippet></ROW><ROW><id>5451910</id><snippet>python-config</snippet></ROW><ROW><id>5451910</id><snippet>#&gt; python-config --cflags&lt;br&gt;
-I/usr/include/python2.5 -I/usr/include/python2.5 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes</snippet></ROW><ROW><id>5451910</id><snippet>#&gt; python-config --ldflags&lt;br&gt;
-L/usr/lib/python2.5/config -lpthread -ldl -lutil -lm -lpython2.5</snippet></ROW><ROW><id>5451910</id><snippet>#&gt; g++ useEmbed.cpp -o embed -I/usr/include/python2.5 -I/usr/include/python2.5 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes  -L/usr/lib/python2.5/config -lpthread -ldl -lutil -lm -lpython2.5</snippet></ROW><ROW><id>5451910</id><snippet>
    #include "Python.h"
    #include &lt;iostream&gt;

    using namespace std;

    int main()
    {
      Py_Initialize();
      FILE *file = fopen("embed.py","r+");
      PyRun_SimpleFile(file,"embed.py");
      Py_Finalize();
      fclose(file);

      return 0;
    }

</snippet></ROW><ROW><id>5452014</id><snippet> def save(self, *args, **kwargs):
    if not self.id:
        self.slug = slugify( self.title )
    models.Model.save(self, *args, **kwargs ) # &lt;-- notice the self
</snippet></ROW><ROW><id>5452400</id><snippet>LoggingSimpleXMLRPCRequestHandler</snippet></ROW><ROW><id>5452400</id><snippet>LoggingSimpleXMLRPCRequestHandler</snippet></ROW><ROW><id>5452400</id><snippet>class LoggingSimpleXMLRPCRequestHandler(SimpleXMLRequestHandler):
    def __init__(self):
        self.logger = logging.getLogger('Log')
</snippet></ROW><ROW><id>5452400</id><snippet>LoggingSimpleXMLRPCRequestHandler</snippet></ROW><ROW><id>5452400</id><snippet>self.logger</snippet></ROW><ROW><id>5452400</id><snippet>logger</snippet></ROW><ROW><id>5452672</id><snippet>data[:2]
</snippet></ROW><ROW><id>5452672</id><snippet>struct</snippet></ROW><ROW><id>5452693</id><snippet>menu_item = '((?:[^'\\]|\\')*)'
</snippet></ROW><ROW><id>5452693</id><snippet>(?:[^'\\]|\\')*</snippet></ROW><ROW><id>5452693</id><snippet>'</snippet></ROW><ROW><id>5452693</id><snippet>\</snippet></ROW><ROW><id>5452693</id><snippet>\'</snippet></ROW><ROW><id>5452693</id><snippet>[^'\\]</snippet></ROW><ROW><id>5452709</id><snippet>pytz</snippet></ROW><ROW><id>5452709</id><snippet>astimezone</snippet></ROW><ROW><id>5452709</id><snippet>replace</snippet></ROW><ROW><id>5452709</id><snippet>In [76]: import pytz

In [77]: est=pytz.timezone('US/Eastern')

In [78]: d.astimezone(est)
Out[78]: datetime.datetime(2010, 10, 30, 13, 21, 12, tzinfo=&lt;DstTzInfo 'US/Eastern' EDT-1 day, 20:00:00 DST&gt;)

In [79]: d.astimezone(est).replace(tzinfo=None)
Out[79]: datetime.datetime(2010, 10, 30, 13, 21, 12)
</snippet></ROW><ROW><id>5452709</id><snippet>In [65]: d
Out[65]: datetime.datetime(2010, 10, 30, 17, 21, 12, tzinfo=tzutc())

In [66]: import datetime

In [67]: import calendar

In [68]: datetime.datetime.fromtimestamp(calendar.timegm(d.timetuple()))
Out[68]: datetime.datetime(2010, 10, 30, 13, 21, 12)
</snippet></ROW><ROW><id>5452709</id><snippet>local_d = d.replace(tzinfo=None)
</snippet></ROW><ROW><id>5452761</id><snippet>collections.counter</snippet></ROW><ROW><id>5452761</id><snippet>import collections

c = collections.Counter()
with open('/usr/share/dict/words', 'rt') as f:
    for line in f:
        c.update(line.rstrip().lower())

print 'Most common:'
for letter, count in c.most_common(3):
    print '%s: %7d' % (letter, count)
</snippet></ROW><ROW><id>5452761</id><snippet>c.update</snippet></ROW><ROW><id>5452761</id><snippet>line.rstrip().lower</snippet></ROW><ROW><id>5452761</id><snippet>line.split()</snippet></ROW><ROW><id>5452761</id><snippet>import collections
import string

c = collections.Counter()
with open('DataSO.txt', 'rt') as f:
    for line in f:
        c.update(line.translate(string.maketrans("",""), string.punctuation).split())
</snippet></ROW><ROW><id>5452951</id><snippet>pythoncomplete#Complete</snippet></ROW><ROW><id>5452951</id><snippet>math.</snippet></ROW><ROW><id>5452951</id><snippet>math.</snippet></ROW><ROW><id>5452951</id><snippet>print</snippet></ROW><ROW><id>5452951</id><snippet>sorted</snippet></ROW><ROW><id>5453032</id><snippet>&gt;&gt;&gt; 'QH QD JC KD JS'.split()
['QH', 'QD', 'JC', 'KD', 'JS']
</snippet></ROW><ROW><id>5453032</id><snippet>split</snippet></ROW><ROW><id>5453032</id><snippet>sep</snippet></ROW><ROW><id>5453032</id><snippet>maxsplit</snippet></ROW><ROW><id>5453032</id><snippet>maxsplit</snippet></ROW><ROW><id>5453032</id><snippet>maxsplit+1</snippet></ROW><ROW><id>5453032</id><snippet>maxsplit</snippet></ROW><ROW><id>5453032</id><snippet>sep</snippet></ROW><ROW><id>5453032</id><snippet>'1,,2'.split(',')</snippet></ROW><ROW><id>5453032</id><snippet>['1', '', '2']</snippet></ROW><ROW><id>5453032</id><snippet>sep</snippet></ROW><ROW><id>5453032</id><snippet>'1&lt;&gt;2&lt;&gt;3'.split('&lt;&gt;')</snippet></ROW><ROW><id>5453032</id><snippet>['1', '2', '3']</snippet></ROW><ROW><id>5453032</id><snippet>['']</snippet></ROW><ROW><id>5453032</id><snippet>sep</snippet></ROW><ROW><id>5453032</id><snippet>None</snippet></ROW><ROW><id>5453032</id><snippet>None</snippet></ROW><ROW><id>5453032</id><snippet>[]</snippet></ROW><ROW><id>5453032</id><snippet>' 1  2   3  '.split()</snippet></ROW><ROW><id>5453032</id><snippet>['1', '2', '3']</snippet></ROW><ROW><id>5453032</id><snippet>'  1  2  3  '.split(None, 1)</snippet></ROW><ROW><id>5453032</id><snippet>['1', '2 3  ']</snippet></ROW><ROW><id>5453174</id><snippet>#!/usr/bin/python

def main():
    print "Content-type: text/xml"
    print
    print '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;'
    print '&lt;person born="1912/06/23" died="1954/06/07"&gt;'
    print '    &lt;name&gt;Alan Turing&lt;/name&gt;'
    print '&lt;/person&gt;'

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5453174</id><snippet>Macintosh:~ sherm$ curl -i http://tests.shermpendley.com/person.py
HTTP/1.1 200 OK
Date: Mon, 28 Mar 2011 00:14:50 GMT
Server: Apache
Vary: Accept-Encoding
Content-Length: 124
Content-Type: text/xml

&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;person born="1912/06/23" died="1954/06/07"&gt;
    &lt;name&gt;Alan Turing&lt;/name&gt;
&lt;/person&gt;
</snippet></ROW><ROW><id>5453174</id><snippet>[Sun Mar 27 17:18:10 2011] [error] [client 98.236.96.39]   File "person.py", line 3
[Sun Mar 27 17:18:10 2011] [error] [client 98.236.96.39]     bogus!
[Sun Mar 27 17:18:10 2011] [error] [client 98.236.96.39]          ^
[Sun Mar 27 17:18:10 2011] [error] [client 98.236.96.39] SyntaxError: invalid syntax
[Sun Mar 27 17:18:10 2011] [error] [client 98.236.96.39] Premature end of script headers: person.py
</snippet></ROW><ROW><id>5453551</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'\W+')
&gt;&gt;&gt; pattern.split('vi nod-u')
['vi', 'nod', 'u']
</snippet></ROW><ROW><id>5453559</id><snippet>__and__</snippet></ROW><ROW><id>5453559</id><snippet>&amp;</snippet></ROW><ROW><id>5453559</id><snippet>__nonzero__</snippet></ROW><ROW><id>5453692</id><snippet>StringIO</snippet></ROW><ROW><id>5453692</id><snippet>import matplotlib.pyplot as plt
import StringIO
from matplotlib import numpy as np

x = np.arange(0,np.pi*3,.1)
y = np.sin(x)

fig = plt.figure()
plt.plot(x,y)

imgdata = StringIO.StringIO()
fig.savefig(imgdata, format='svg')
imgdata.seek(0)  # rewind the data

svg_dta = imgdata.buf  # this is svg data

file('test.htm', 'w').write(svg_dta)  # test it
</snippet></ROW><ROW><id>5453826</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>5453922</id><snippet>class Class(object):
    def __init__(self):
        self.value = False

c = Class()
c.value                # False
c.value = True
c.value                # True
</snippet></ROW><ROW><id>5453934</id><snippet>get_or_insert</snippet></ROW><ROW><id>5453934</id><snippet>def generate_expense_type(rec):
    def _tx():
      expense_type = type.get(name)
      if not expense_type:
        expense_type = type(key_name=name)
      expense_type.total += rec.amount
      expense_type.put()
    db.run_in_transaction(expense_type)
</snippet></ROW><ROW><id>5454008</id><snippet>my_tuple = tuple([my_string] + my_list)
</snippet></ROW><ROW><id>5454036</id><snippet>heapq</snippet></ROW><ROW><id>5454210</id><snippet>&gt;&gt;&gt; int.from_bytes(b'\xFF\x00','little')
255
&gt;&gt;&gt; int.from_bytes(b'\xFF\x00','big')
65280
</snippet></ROW><ROW><id>5454551</id><snippet>http://www.yourapp.com/continue/1234
</snippet></ROW><ROW><id>5454551</id><snippet>1234</snippet></ROW><ROW><id>5454580</id><snippet>SELECT * FROM Post WHERE ANCESTOR IS :1 AND __key__ &lt; :2
SELECT * FROM Post WHERE ANCESTOR IS :1 AND __key__ &gt; :2
</snippet></ROW><ROW><id>5454623</id><snippet>get_or_insert</snippet></ROW><ROW><id>5454623</id><snippet>get_or_insert</snippet></ROW><ROW><id>5454623</id><snippet>def get_or_insert(cls, key_name, **kwargs):
  def _tx():
    obj = cls.get_by_key_name(key_name)
    if obj is None:
      return cls(key_name, **kwargs)
    else:
      return obj
  return db.run_in_transaction(_tx)
</snippet></ROW><ROW><id>5454737</id><snippet>content = urllib2.urlopen(
    'http://192.168.1.200/order/index.php",
    'op=Login&amp;ac=login&amp;userName=%E8%B5%B5%E6%B1%9F%E6%98%8E&amp;userPwd=123').read()
</snippet></ROW><ROW><id>5454737</id><snippet>urlopen</snippet></ROW><ROW><id>5455099</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; s = Template('$who likes $what')
&gt;&gt;&gt; s.substitute(who='tim', what='kung pao')
'tim likes kung pao'
</snippet></ROW><ROW><id>5455356</id><snippet>&lt;foo&gt;
  &lt;bar&gt;123&lt;/bar&gt;
&lt;/foo&gt;
</snippet></ROW><ROW><id>5455356</id><snippet>"\n  "</snippet></ROW><ROW><id>5455356</id><snippet>"123"</snippet></ROW><ROW><id>5455356</id><snippet>"\n"</snippet></ROW><ROW><id>5455588</id><snippet>30    09    *    *    *    python /www/site/mydirectory/perform_daily_action.py
</snippet></ROW><ROW><id>5455639</id><snippet>&gt;&gt;&gt; a = {0:'000000',1:'11111',3:'333333',4:'444444'}
&gt;&gt;&gt; a.keys()
[0, 1, 3, 4]
&gt;&gt;&gt; sorted(a.keys())
[0, 1, 3, 4]
&gt;&gt;&gt; reversed(sorted(a.keys()))
&lt;listreverseiterator object at 0x02B0DB70&gt;
&gt;&gt;&gt; list(reversed(sorted(a.keys())))
[4, 3, 1, 0]
</snippet></ROW><ROW><id>5455688</id><snippet>staticfiles</snippet></ROW><ROW><id>5455688</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>5455813</id><snippet>while p.returncode is None or p.stdout.closed or p.stderr.closed:
</snippet></ROW><ROW><id>5455813</id><snippet>returncode</snippet></ROW><ROW><id>5455813</id><snippet>poll</snippet></ROW><ROW><id>5456201</id><snippet>$ python -c "raise RuntimeError()"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
RuntimeError
$ echo $?
1
</snippet></ROW><ROW><id>5456201</id><snippet>import subprocess

proc = subprocess.Popen(['/usr/bin/python', 'script-name'])
proc.communicate()
if proc.returncode != 0:
    # Run failure code
else:
    # Run happy code.
</snippet></ROW><ROW><id>5456247</id><snippet>A   A   A   A   A   A  &lt;- First show consist of 6 episodes
B   B   B   B   C   C  &lt;- Second and third show - 4 episodes each
C   C   D   D          &lt;- Third show 2 episodes
</snippet></ROW><ROW><id>5456247</id><snippet>{A,B,C}, {A,B,C}, {A,B,D}, {A,B,D}, {A,C}, {A,C} 
</snippet></ROW><ROW><id>5456247</id><snippet>{A,B,C,A,B,C,A,B,D,A,B,D,A,C,A,C}
</snippet></ROW><ROW><id>5456247</id><snippet>{A1, B1, C1, A2, B2, C2, A3, B3, D1, A4, B4, D2, A5, C3, A6, C4}
</snippet></ROW><ROW><id>5456247</id><snippet>[['A'] * 2, ['L'] * 3, ['X'] * 5])

X  X  X  X  X
L  L  L  A  A

-&gt; {X1, L1, X2, L2, X3, L3, X4, A1, X5, A2}
</snippet></ROW><ROW><id>5456247</id><snippet>l = {, , ,};                                 (* Prepare input *)
l[[1]] = {a, a, a, a, a, a};
l[[2]] = {b, b, b, b};
l[[3]] = {c, c, c, c};
l[[4]] = {d, d};
le = Length@First@l;

k = DeleteCases[                              (*Make the matrix*)
   Flatten@Transpose@Partition[Flatten[l], le, le, 1, {Null}], Null];

Table[r[i] = 1, {i, k}];                      (*init counters*)
ReplaceAll[#, x_ :&gt; x[r[x]++]] &amp; /@ k         (*assign numbers*)

-&gt;{a[1], b[1], c[1], a[2], b[2], c[2], a[3], b[3], d[1], a[4], b[4], 
   d[2], a[5], c[3], a[6], c[4]}
</snippet></ROW><ROW><id>5456755</id><snippet>str</snippet></ROW><ROW><id>5456755</id><snippet>bytes</snippet></ROW><ROW><id>5456755</id><snippet>buffer</snippet></ROW><ROW><id>5457015</id><snippet>from datetime import date
from re import *
</snippet></ROW><ROW><id>5457015</id><snippet>from imports import * #you import your imports

today = date.today() #using what you imported in imports.py
print(today)
</snippet></ROW><ROW><id>5457116</id><snippet>....
#elementtree is stored in weird places... This catches most of em
try:
    import xml.etree.ElementTree as ET # in python &gt;=2.5
except ImportError:
    try:
            import cElementTree as ET # effbot's C module
        except ImportError:
        try:
            import elementtree.ElementTree as ET # effbot's pure Python module
            except ImportError:
                    try:
                        import lxml.etree as ET # ElementTree API using libxml2
                    except ImportError:
                        import warnings
                        warnings.warn("could not import ElementTree "
                                "(http://effbot.org/zone/element-index.htm)")

def build_xml_tree(answer_txt=""):
    if not len(resources):
        return ""
    root = ET.Element("root")
    answer = ET.SubElement(root, "answer")
    answer.text = answer_txt
    xml_string = ET.tostring(root)
    return rxml_string
</snippet></ROW><ROW><id>5457376</id><snippet>start_date</snippet></ROW><ROW><id>5457376</id><snippet>session.query(User, func.count(Entry.id))\
    .outerjoin((Entry, (Entry.author_id==User.id) &amp; (Entry.date&gt;start_date)))\
    .group_by(User.id)
</snippet></ROW><ROW><id>5457376</id><snippet>User</snippet></ROW><ROW><id>5457376</id><snippet>class User(Base):
    # ...
    @classmethod
    def entries_count(cls, cond):
        return select([func.count(Entry.id)])\
                .where((Entry.author_id==cls.id) &amp; cond)\
                .as_scalar()

session.query(User, User.entries_count(Entry.date&gt;start_date))
</snippet></ROW><ROW><id>5458096</id><snippet>CustomLog ${APACHE_LOG_DIR}/beta-meta-d3c.access.log common
ErrorLog ${APACHE_LOG_DIR}/beta-meta-d3c.error.log
</snippet></ROW><ROW><id>5458096</id><snippet>${APACHE_LOG_DIR}</snippet></ROW><ROW><id>5458096</id><snippet>/home/osqa/sites/log/</snippet></ROW><ROW><id>5458096</id><snippet>/home/osqa/sites/log/beta-meta-d3c.access.log
</snippet></ROW><ROW><id>5458364</id><snippet>TemporalInterpolator</snippet></ROW><ROW><id>5458364</id><snippet>a0</snippet></ROW><ROW><id>5458364</id><snippet>t0</snippet></ROW><ROW><id>5458364</id><snippet>a1</snippet></ROW><ROW><id>5458364</id><snippet>t1</snippet></ROW><ROW><id>5458364</id><snippet>t0 &lt;= t &lt;= t1</snippet></ROW><ROW><id>5458364</id><snippet>a_t</snippet></ROW><ROW><id>5458364</id><snippet>delta_t = t1 - t0
a_t = (t1 - t) / delta_t * a_0 + (t - t0) / delta_t * a_1
</snippet></ROW><ROW><id>5458364</id><snippet>TemporalInterpolator</snippet></ROW><ROW><id>5458440</id><snippet>Author.objects.using('db_name').all()
</snippet></ROW><ROW><id>5458529</id><snippet>'A%(row)d+B%(row)d' % {'row': 3}
</snippet></ROW><ROW><id>5458529</id><snippet>'A{0}+B{0}'.format(3)
</snippet></ROW><ROW><id>5458807</id><snippet>.py</snippet></ROW><ROW><id>5458807</id><snippet>.pyc</snippet></ROW><ROW><id>5458807</id><snippet>.dll</snippet></ROW><ROW><id>5458807</id><snippet>.so</snippet></ROW><ROW><id>5458807</id><snippet>.pyo</snippet></ROW><ROW><id>5458807</id><snippet>.pyc</snippet></ROW><ROW><id>5458899</id><snippet>simplejson</snippet></ROW><ROW><id>5458899</id><snippet>eval</snippet></ROW><ROW><id>5458899</id><snippet>&gt;&gt;&gt; a = '''{"title":"sss",
"body":"wwww：aaa   &lt;a href='#' onclick='logout()' &gt;fff&lt;/a&gt;",
"data":{"status":0,"userName":"www","userId":"433"}}'''
&gt;&gt;&gt; import simplejson
&gt;&gt;&gt; parsed_data = simplejson.loads(a)
&gt;&gt;&gt; parsed_data['title']
'sss'
</snippet></ROW><ROW><id>5458991</id><snippet>appcfg.py</snippet></ROW><ROW><id>5458991</id><snippet>appcfg.py</snippet></ROW><ROW><id>5458991</id><snippet>Makefile</snippet></ROW><ROW><id>5458991</id><snippet>deploy:
    your-copy-command
    /path/to/gae-devkit/appcfg.py update .
</snippet></ROW><ROW><id>5458991</id><snippet>make</snippet></ROW><ROW><id>5459103</id><snippet>def client_summary(request, client_id):
    client = None
    items = None
    try:
        client = models.Client.objects.get(pk = client_id)
        items = client.storageitem_set.filter(type="General")
        total_items = items.count()
        except:
           return HttpResponse(reverse(return_clients))
        return render_to_response('client_summary.html', {'items':items, 'total_items':total_items, 'client':client}, context_instance = RequestContext(request))
</snippet></ROW><ROW><id>5459138</id><snippet>from numpy import arange, array, ones, r_, zeros
from numpy.random import randint

def gen_tst(m, n):
    a= randint(1, n, m)
    b, c= arange(a.sum()), ones((m, n), dtype= int)* 999
    return a, b, c

def basic_1(a, b, c):
    # some assumed basic iteration based
    n= 0
    for k in xrange(len(a)):
        m= a[k]
        c[k, :m], n= b[n: n+ m], n+ m

def advanced_1(a, b, c):
    # based on Svens answer
    cum_a= r_[0, a.cumsum()]
    i= arange(len(a)).repeat(a)
    j= arange(cum_a[-1])- cum_a[:-1].repeat(a)
    c[i, j]= b

def advanced_2(a, b, c):
    # other loopless version
    c[arange(c.shape[1])+ zeros((len(a), 1), dtype= int)&lt; a[:, None]]= b
</snippet></ROW><ROW><id>5459138</id><snippet>In []: m, n= 10, 100
In []: a, b, c= gen_tst(m, n)
In []: 1.* a.sum()/ (m* n)
Out[]: 0.531
In []: %timeit advanced_1(a, b, c)
10000 loops, best of 3: 99.2 us per loop
In []: %timeit advanced_2(a, b, c)
10000 loops, best of 3: 68 us per loop
In []: %timeit basic_1(a, b, c)
10000 loops, best of 3: 47.1 us per loop

In []: m, n= 50, 500
In []: a, b, c= gen_tst(m, n)
In []: 1.* a.sum()/ (m* n)
Out[]: 0.455
In []: %timeit advanced_1(a, b, c)
1000 loops, best of 3: 1.03 ms per loop
In []: %timeit advanced_2(a, b, c)
1000 loops, best of 3: 1.06 ms per loop
In []: %timeit basic_1(a, b, c)
1000 loops, best of 3: 227 us per loop

In []: m, n= 250, 2500
In []: a, b, c= gen_tst(m, n)
In []: 1.* a.sum()/ (m* n)
Out[]: 0.486
In []: %timeit advanced_1(a, b, c)
10 loops, best of 3: 30.4 ms per loop
In []: %timeit advanced_2(a, b, c)
10 loops, best of 3: 32.4 ms per loop
In []: %timeit basic_1(a, b, c)
1000 loops, best of 3: 2 ms per loop
</snippet></ROW><ROW><id>5459138</id><snippet>def basic_2(a, b, c):
    n= 0
    for k, m in enumerate(a):
        nm= n+ m
        c[k, :m], n= b[n: nm], nm
</snippet></ROW><ROW><id>5459180</id><snippet>appcfg.py</snippet></ROW><ROW><id>5459364</id><snippet>def convert(val):
    lookup = {'k': 1000, 'm': 1000000, 'b': 1000000000}
    unit = val[-1]
    try:
        number = int(val[:-1])
    except ValueError:
        # do something
    if unit in lookup:
        return lookup[unit] * number
    return int(val)

&gt;&gt;&gt; print convert("100m")
&gt;&gt;&gt; 100000000
</snippet></ROW><ROW><id>5459425</id><snippet>settings_local.py</snippet></ROW><ROW><id>5461092</id><snippet>event.GetString()</snippet></ROW><ROW><id>5461092</id><snippet>event.GetText()</snippet></ROW><ROW><id>5461092</id><snippet>menu.Bind(wx.EVT_MENU, self.MenuSelectionCb, id=id)
</snippet></ROW><ROW><id>5461092</id><snippet>menu.Bind(wx.EVT_MENU, self.MenuSelectionCb)
</snippet></ROW><ROW><id>5461379</id><snippet>import re

my_ip = "192.168.1.1"
is_valid = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", my_ip)

if is_valid:
    print "%s is a valid ip address" % my_ip
</snippet></ROW><ROW><id>5461379</id><snippet>import re

my_hostname = "testhostname"
is_valid = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", my_hostname)

if is_valid:
    print "%s is a valid hostname" % my_hostname
</snippet></ROW><ROW><id>5461899</id><snippet>get_pot()</snippet></ROW><ROW><id>5461899</id><snippet>self.n</snippet></ROW><ROW><id>5461899</id><snippet>self.coeffs</snippet></ROW><ROW><id>5461899</id><snippet>coeffs</snippet></ROW><ROW><id>5461899</id><snippet>n</snippet></ROW><ROW><id>5461899</id><snippet>Crack</snippet></ROW><ROW><id>5461899</id><snippet>z1</snippet></ROW><ROW><id>5461899</id><snippet>z2</snippet></ROW><ROW><id>5461899</id><snippet>class Crack(object): # convention is to use capitalized class names

    def __init__(self, z1, z2, coeffs):
        self.z1 = z1
        self.z2 = z2
        self.coeffs = np.array(coeffs)
        self.n = len(coeffs)

    def __repr__(self):
        return "Crack(z1=%s, z2=%s, coeffs=%s)" % (self.z1, 
                                                   self.z2, 
                                                   self.coeffs)
    def get_big_Z(self, little_z):
        # this may not need to be its own function, unless you
        # use it separately from get_potential()
        return little_z - 0.5 * (self.z2 - self.z1)

    def get_potential(self, z):
        Z = self.get_big_Z(z)
        return (np.sum(np.arange(self.n) * self.coeffs * 
                       (1.0 / (np.sqrt(Z - 1.0) * np.sqrt(Z + 1.0))) * 
                       ((Z - np.sqrt(Z - 1.0) * np.sqrt(Z + 1.0)) ** 
                       np.arange(self.n))) * 
                (2.0 / (self.z2 - self.z1))
                )
</snippet></ROW><ROW><id>5461899</id><snippet>z1</snippet></ROW><ROW><id>5461899</id><snippet>z2</snippet></ROW><ROW><id>5461899</id><snippet>coeffs</snippet></ROW><ROW><id>5461899</id><snippet>Crack</snippet></ROW><ROW><id>5461899</id><snippet>&gt;&gt;&gt; # dummy information, this makes three Crack objects
...
&gt;&gt;&gt; z1_values = [3.0, 1.1, 0.2]
&gt;&gt;&gt; z2_values = [0.01, 0.02, 0.03]
&gt;&gt;&gt; coeff_values = [[1.1,1.0],
...                 [2.2,2.0],
...                 [3.3,3.0]]
</snippet></ROW><ROW><id>5461899</id><snippet>coeff</snippet></ROW><ROW><id>5461899</id><snippet>ndarray</snippet></ROW><ROW><id>5461899</id><snippet>crack_list</snippet></ROW><ROW><id>5461899</id><snippet>map()</snippet></ROW><ROW><id>5461899</id><snippet>&gt;&gt;&gt; crack_list = map(Crack, z1_values, z2_values, coeff_values)
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(crack_list)
[Crack(z1=3.0, z2=0.01, coeffs=[ 1.1  1. ]),
 Crack(z1=1.1, z2=0.02, coeffs=[ 2.2  2. ]),
 Crack(z1=0.2, z2=0.03, coeffs=[ 3.3  3. ])]
</snippet></ROW><ROW><id>5461899</id><snippet>z</snippet></ROW><ROW><id>5461899</id><snippet>z = 5.0</snippet></ROW><ROW><id>5461899</id><snippet>z = 3.14</snippet></ROW><ROW><id>5461899</id><snippet>&gt;&gt;&gt; def total_potential(z, cracks):
...     return sum(c.get_potential(z) for c in cracks)
...
&gt;&gt;&gt;
&gt;&gt;&gt; print total_potential(5.0, crack_list)
-0.772861759407
&gt;&gt;&gt; print total_potential(3.14, crack_list)
-1.99073949493
</snippet></ROW><ROW><id>5461917</id><snippet>AtomType</snippet></ROW><ROW><id>5461917</id><snippet>threonine</snippet></ROW><ROW><id>5462050</id><snippet>verifyHostKey</snippet></ROW><ROW><id>5462050</id><snippet>connect</snippet></ROW><ROW><id>5462050</id><snippet>verifyHostKey</snippet></ROW><ROW><id>5462050</id><snippet>twisted.conch.client.default</snippet></ROW><ROW><id>5462050</id><snippet>from twisted.internet.defer import succeed

def verifyHostKey(transport, host, pubKey, fingerprint):
    return succeed(True)
</snippet></ROW><ROW><id>5462097</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; 
&gt;&gt;&gt; for x,y in product(range(3), range(4)):
...   print (x,y)
... 
(0, 0)
(0, 1)
(0, 2)
(0, 3)
(1, 0)
(1, 1)
(1, 2)
(1, 3)

... and so on
</snippet></ROW><ROW><id>5462097</id><snippet>for x,y in product(range(X), range(Y)):
    function(x,y)
</snippet></ROW><ROW><id>5462716</id><snippet>A|B|C</snippet></ROW><ROW><id>5462716</id><snippet>for line in fp:
    parts = line.split('|') # or line.split('|', 2) if the last part can contain |
    # use parts[0], parts[1]
</snippet></ROW><ROW><id>5462763</id><snippet>event_queue</snippet></ROW><ROW><id>5462763</id><snippet>set_queue</snippet></ROW><ROW><id>5462763</id><snippet>CallMethod</snippet></ROW><ROW><id>5462763</id><snippet>PyInit_...</snippet></ROW><ROW><id>5462763</id><snippet>set_queue</snippet></ROW><ROW><id>5463419</id><snippet>fileinput</snippet></ROW><ROW><id>5463419</id><snippet>some_condition</snippet></ROW><ROW><id>5463419</id><snippet>stdin</snippet></ROW><ROW><id>5463419</id><snippet>#!/usr/bin/env python
# grep_some_condition.py
import fileinput

for line in fileinput.input(inplace=True):
    if some_condition(line):
       print line, # this goes to the current file
</snippet></ROW><ROW><id>5463419</id><snippet>$ python grep_some_condition.py first_file.txt second_file.txt
</snippet></ROW><ROW><id>5463419</id><snippet>first_file.txt</snippet></ROW><ROW><id>5463419</id><snippet>second_file.txt</snippet></ROW><ROW><id>5463419</id><snippet>some_condition()</snippet></ROW><ROW><id>5463507</id><snippet>stop</snippet></ROW><ROW><id>5463507</id><snippet>reactor.addSystemEventTrigger('before', 'shutdown', stop)</snippet></ROW><ROW><id>5463507</id><snippet>threads.deferToThread(popen("/foo/bar/cleanup %s" % connection))</snippet></ROW><ROW><id>5463507</id><snippet>deferToThread</snippet></ROW><ROW><id>5463507</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>5463507</id><snippet>twisted.internet.utils.getProcessOutput</snippet></ROW><ROW><id>5463507</id><snippet>spawnProcess</snippet></ROW><ROW><id>5463675</id><snippet>x = 60.27
newx = int(str(x).replace('.',''))
</snippet></ROW><ROW><id>5463675</id><snippet>.replace</snippet></ROW><ROW><id>5463675</id><snippet>.translate</snippet></ROW><ROW><id>5463675</id><snippet>%timeit int(str(4.73285).replace('.',''))
100000 loops, best of 3: 2.65 us per loop

%timeit int(str(4.73285).translate(None, '.'))
100000 loops, best of 3: 3.02 us per loop
</snippet></ROW><ROW><id>5463957</id><snippet>{% forloop.counter %}</snippet></ROW><ROW><id>5464309</id><snippet>## file one: main.py, main program in your working directory
# this code must run directly, not inside IDLE to get right directory name
import os, mytest
curdir=os.path.dirname(__file__) 
print '-'*10,'program','-'*10
print 'Program in',curdir
print 'Module is in', mytest.curdir
print 'Config contents in module directory:\n',mytest.config()
input('Push Enter')
</snippet></ROW><ROW><id>5464309</id><snippet>## file two: mytest.py, module somewhere in PATH or PYTHONPATH
import os
curdir= os.path.dirname(__file__)

print "Test module directory is "+curdir

## function, not call to function
config=open(os.path.join(curdir,'mycfg.cfg')).read
""" Example output:
Test module directory is D:\Python Projects
---------- program ----------
Program in D:\test
Module is in D:\Python Projects
Config contents in module directory:
[SECTIONTITLE]
SETTING=12

Push Enter
""""
</snippet></ROW><ROW><id>5464440</id><snippet>formatter_class</snippet></ROW><ROW><id>5464440</id><snippet>parser = argparse.ArgumentParser(prog='tool',
  formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=27))

args = [('-u', '--upf', 'ref. upf', dict(required='True')),
        ('-s', '--skew', 'ref. skew', {}),
        ('-m', '--model', 'ref. model', {})]
for args1, args2, desc, options in args:  
     parser.add_argument(args1, args2, help=desc, **options)

parser.print_help()
</snippet></ROW><ROW><id>5464440</id><snippet>argparse.HelpFormatter</snippet></ROW><ROW><id>5464440</id><snippet>argparse</snippet></ROW><ROW><id>5464440</id><snippet>max_help_position</snippet></ROW><ROW><id>5464440</id><snippet>usage: tool [-h] -u UPF [-s SKEW] [-m MODEL]

optional arguments:
  -h, --help               show this help message and exit
  -u UPF, --upf UPF        ref. upf
  -s SKEW, --skew SKEW     ref. skew
  -m MODEL, --model MODEL  ref. model
</snippet></ROW><ROW><id>5464530</id><snippet>figtext</snippet></ROW><ROW><id>5464530</id><snippet>p.figtext(0.05, 0.5, 'foo')
</snippet></ROW><ROW><id>5464723</id><snippet>def OnConnect(self, event):
    #print [event.IsChecked()]
    mon = Monitor("", "", "", self.path, "60", self.StatusBar)
    if event.IsChecked():
        print "Set Menu Label Disconnected"
        self._Connect.SetItemLabel("Disconnect")
        print "Start Monitor"
        mon.Start()
        print "Start Finished"
    else:
        print "Set Menu Label Connected"
        self._Connect.SetItemLabel("Connect")
        print "Stop Monitor"
        mon.Stop()
        print "Stop Finished"
</snippet></ROW><ROW><id>5464723</id><snippet>def OnConnect(self, event):
    #print [event.IsChecked()]
    if not hasattr(self, "mon"):
        self.mon = Monitor("", "", "", self.path, "60", self.StatusBar)
    if event.IsChecked():
        print "Set Menu Label Disconnected"
        self._Connect.SetItemLabel("Disconnect")
        print "Start Monitor"
        self.mon.Start()
        print "Start Finished"
    else:
        print "Set Menu Label Connected"
        self._Connect.SetItemLabel("Connect")
        print "Stop Monitor"
        self.mon.Stop()
        print "Stop Finished"
</snippet></ROW><ROW><id>5464830</id><snippet>from module import desired_object
</snippet></ROW><ROW><id>5464830</id><snippet># Desired Module:

desired_object = None
def my_func():
    global desired_object
    desired_object = SomeObject()
</snippet></ROW><ROW><id>5464904</id><snippet>printstuff( *mytuple, three=" How are you" )
</snippet></ROW><ROW><id>5464904</id><snippet>def printstuff( three, one, two ):
    print one, two, three

printstuff( " How are you", *mytuple )
</snippet></ROW><ROW><id>5464965</id><snippet>d1 = (3, 28)
d2 = (3, 31)
d3 = (4, 2)
if d1 &lt; d2 &lt; d3:
    print("BETWEEN!")
else:
    print("NOT!")
</snippet></ROW><ROW><id>5464965</id><snippet>day = 16
month = 4
d = (month, day)
</snippet></ROW><ROW><id>5465264</id><snippet>STATICFILES_DIR = (
    os.path.join(PROJECT_DIR, 'static/myapp/'),
    ('timgs',os.path.join(PROJECT_DIR, 'static/myapp/timgs')),

)
</snippet></ROW><ROW><id>5465280</id><snippet>subprocess</snippet></ROW><ROW><id>5465280</id><snippet>#!/usr/bin/env python
import subprocess
frommp3 = subprocess.Popen(['mpg123', '-w', '-', '/tmp/test.mp3'], stdout=subprocess.PIPE)
toogg = subprocess.Popen(['oggenc', '-'], stdin=frommp3.stdout, stdout=subprocess.PIPE)
with open('/tmp/test.ogg', 'wb') as outfile:
    while True:
        data = toogg.stdout.read(1024 * 100)
        if not data:
            break
        outfile.write(data)
</snippet></ROW><ROW><id>5465334</id><snippet>",".join("'%s'" % qb[0] for qb in qb_data)
</snippet></ROW><ROW><id>5465334</id><snippet>&gt;&gt;&gt; qb_data = [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8', '9']]
&gt;&gt;&gt; ",".join("'%s'" % qb[0] for qb in qb_data)
"'1','3','5','7'"
</snippet></ROW><ROW><id>5465463</id><snippet>SetWindowPos</snippet></ROW><ROW><id>5465463</id><snippet>SWP_NOACTIVATE</snippet></ROW><ROW><id>5465463</id><snippet>HWND_TOPMOST</snippet></ROW><ROW><id>5465463</id><snippet>SPI_SETFOREGROUNDLOCKTIMEOUT</snippet></ROW><ROW><id>5465463</id><snippet>SystemParametersInfo</snippet></ROW><ROW><id>5465474</id><snippet>my_list = [func_test_1, func_test_2, func_test_3]
random.choice(my_list)()
</snippet></ROW><ROW><id>5465750</id><snippet>twistd web --path foo</snippet></ROW><ROW><id>5465750</id><snippet>foo/clientaccesspolicy.xml</snippet></ROW><ROW><id>5465750</id><snippet>foo/crossdomain.xml</snippet></ROW><ROW><id>5465902</id><snippet># users in projects owned by request.user  
users = User.objects.filter(projectmodel__owner=request.user).distinct()
</snippet></ROW><ROW><id>5465902</id><snippet>related_name</snippet></ROW><ROW><id>5465902</id><snippet>people</snippet></ROW><ROW><id>5465902</id><snippet>projectmodel</snippet></ROW><ROW><id>5466363</id><snippet>raw_input()</snippet></ROW><ROW><id>5466363</id><snippet>n = int(raw_input("#"))
</snippet></ROW><ROW><id>5466363</id><snippet>n = int(my_num)
</snippet></ROW><ROW><id>5466363</id><snippet>raw_input()</snippet></ROW><ROW><id>5466363</id><snippet>all_the_numbers()</snippet></ROW><ROW><id>5466363</id><snippet>&lt;</snippet></ROW><ROW><id>5466363</id><snippet>True</snippet></ROW><ROW><id>5466478</id><snippet>{{</snippet></ROW><ROW><id>5466478</id><snippet>}}</snippet></ROW><ROW><id>5466478</id><snippet>&gt;&gt;&gt; x = " {{ Hello }} {0} "
&gt;&gt;&gt; print x.format(42)
' { Hello } 42 '
</snippet></ROW><ROW><id>5466478</id><snippet>{}</snippet></ROW><ROW><id>5466478</id><snippet>{{</snippet></ROW><ROW><id>5466478</id><snippet>}}</snippet></ROW><ROW><id>5466494</id><snippet>Tags.all().filter('tag =', 'foo')
Tags.all().filter('tag =', 'bar')
Tags.all().filter('tag =', 'baz')
</snippet></ROW><ROW><id>5466625</id><snippet>for field, possible_values in fields.iteritems():
    print field, possible_values
</snippet></ROW><ROW><id>5466625</id><snippet>items()</snippet></ROW><ROW><id>5466950</id><snippet>b[0][0] = 0</snippet></ROW><ROW><id>5466950</id><snippet>&gt;&gt;&gt; b = [[1]*3 for _ in range(3)]
&gt;&gt;&gt; b
[[1, 1, 1], [1, 1, 1], [1, 1, 1]]
&gt;&gt;&gt; b[0][0] = 0
&gt;&gt;&gt; b
[[0, 1, 1], [1, 1, 1], [1, 1, 1]]
</snippet></ROW><ROW><id>5466950</id><snippet>b = [[1]*3 for _ in range(3)]</snippet></ROW><ROW><id>5466950</id><snippet>b = []
for _ in range(3):
  b.append([1]*3)
</snippet></ROW><ROW><id>5467009</id><snippet>self</snippet></ROW><ROW><id>5467009</id><snippet>nonlocal</snippet></ROW><ROW><id>5467009</id><snippet>global</snippet></ROW><ROW><id>5467341</id><snippet>e.code</snippet></ROW><ROW><id>5467341</id><snippet>e.reason</snippet></ROW><ROW><id>5467341</id><snippet>from urllib2 import Request, urlopen, URLError, HTTPError
req = Request(someurl)
try:
    response = urlopen(req)
except HTTPError, e:
    print 'The server couldn\'t fulfill the request.'
    print 'Error code: ', e.code
except URLError, e:
    print 'We failed to reach a server.'
    print 'Reason: ', e.reason
else:
    # everything is fine
</snippet></ROW><ROW><id>5467341</id><snippet>from urllib import urlencode
from urllib2 import Request
# insert other code here...
    error = False
    error_code = ""
    try:
        if method.upper()=="GET":
            response = urlopen(req)
        elif method.upper()=="POST":
            response = urlopen(req,data)
    except IOError, e:
        if hasattr(e, 'reason'):
            #print 'We failed to reach a server.'
            #print 'Reason: ', e.reason
            error = True
            error_code = e.reason
        elif hasattr(e, 'code'):
            #print 'The server couldn\'t fulfill the request.'
            #print 'Error code: ', e.code
            error = True
            error_code = e.code
    else:
        # info is dictionary of server parameters, such as 'content-type', etc...
        info = response.info().dict
        page = response.read()
</snippet></ROW><ROW><id>5467550</id><snippet>round()</snippet></ROW><ROW><id>5467550</id><snippet>print int(round(25, -1))
</snippet></ROW><ROW><id>5467626</id><snippet>libraries = ['geos','geos_c','proj']
</snippet></ROW><ROW><id>5467626</id><snippet>libraries = ['geos','geos_c','proj','iconv']
</snippet></ROW><ROW><id>5467772</id><snippet>fobj= F()

for f in fobj.fl:
    f(fobj)
</snippet></ROW><ROW><id>5467772</id><snippet>def funcX(self):</snippet></ROW><ROW><id>5467830</id><snippet>ImageField</snippet></ROW><ROW><id>5467830</id><snippet>class Celebrity(models.Model):
    name = models.CharField()

class Image(models.Model):
    celebrity = models.ForeignKey(Celebrity)
    image = models.ImageField()

class InlineImage(admin.TabularInline):
    model = Image


class CelebrityAdmin(admin.ModelAdmin):
    inlines = [InlineImage]

admin.site.register(Celebrity, CelebrityAdmin)
</snippet></ROW><ROW><id>5468161</id><snippet>from universityDB.universityDetails.models import *
from django.contrib import admin

class UniversityDetailsAdmin(admin.ModelAdmin):
    fields = ['firstName ', 'lastName ']
    list_display = ('firstName ', 'lastName ')    
    search_fields = ['firstName ', 'lastName ']

admin.site.register(UniversityDetails,UniversityDetailsAdmin)
</snippet></ROW><ROW><id>5468691</id><snippet>import re

user_pattern = re.compile('(\s|^)(@)(\w+)(\s|$)')
tweet = 'Hey @pssdbt, thats not what I wanted!'
tweet = user_pattern.sub('\1&lt;a href="http://www.twitter.com/\3"&gt;\2\3&lt;/a&gt;\4', tweet)
</snippet></ROW><ROW><id>5468691</id><snippet>'hey &lt;a href="http://www.twitter.com/pssdbt"&gt;@pssdbt&lt;/a&gt;, thats not what i wanted!'
</snippet></ROW><ROW><id>5468691</id><snippet>from django import template
from django.utils.html import conditional_escape
from django.utils.safestring import mark_safe
import re

register = template.Library()

@register.filter(name='twittify')
def twittify(tweet, autoescape=None):
    tweet = conditional_escape(tweet)
    user_pattern = re.compile('(\s|^)(@)(\w+)(\s|$)')
    tweet = user_pattern.sub('\1&lt;a href="http://www.twitter.com/\3"&gt;\2\3&lt;/a&gt;\4', tweet)
    return mark_safe(tweet)

twittify.needs_autoescape = True
</snippet></ROW><ROW><id>5468691</id><snippet>&lt;ul id="tweets"&gt;
    {% for tweet in tweets %}
        &lt;li&gt;{{ tweet | twittify }}&lt;/li&gt;
    {% endfor%}
&lt;/ul&gt;
</snippet></ROW><ROW><id>5469147</id><snippet>import threading
from collections import deque
import sys
import mmap


class processor(Thread):
    """
        processor gets a batch of data at time from the diskio thread
    """
    def __init__(self,q):
        Thread.__init__(self,name="plotter")
        self._queue = q
    def run(self):
        #get batched data 
        while True:
            #we wait for a batch
            dataloop = self.feed(self._queue.get())
            try:
                while True:
                    self.plot(dataloop.next())
            except StopIteration:
                pass
            #sanitizer exceptions following, maybe

    def parseline(self,line):
        """ return a data struct ready for plotting """
        raise NotImplementedError

    def feed(self,databuf):
        #we yield one-at-time datastruct ready-to-go for plotting
        for line in databuf:
            yield self.parseline(line)

    def plot(self,data):
        """integrate
        https://www.esclab.tw/wiki/index.php/Matplotlib#Asynchronous_plotting_with_threads
        maybe
        """
class sharedq(object):
    """i dont recall where i got this implementation from 
    you may write a better one"""
    def __init__(self,maxsize=8192):
        self.queue = deque()
        self.barrier = threading.RLock()
        self.read_c = threading.Condition(self.barrier)
        self.write_c = threading.Condition(self.barrier)
        self.msz = maxsize
    def put(self,item):
        self.barrier.acquire()
        while len(self.queue) &gt;= self.msz:
            self.write_c.wait()
        self.queue.append(item)
        self.read_c.notify()
        self.barrier.release()
    def get(self):
        self.barrier.acquire()
        while not self.queue:
            self.read_c.wait()
        item = self.queue.popleft()
        self.write_c.notify()
        self.barrier.release()
        return item



q = sharedq()
#sizehint for readine lines
numbytes=1024
for i in xrange(8):
    p = processor(q)
    p.start()
for fn in sys.argv[1:]
    with open(fn, "r+b") as f:
        #you may want a better sizehint here
        map = mmap.mmap(f.fileno(), 0)
        #insert a loop here, i forgot
        q.put(map.readlines(numbytes))

#some cleanup code may be desirable
</snippet></ROW><ROW><id>5469208</id><snippet>getinfo()</snippet></ROW><ROW><id>5469208</id><snippet>SQLGetInfo()</snippet></ROW><ROW><id>5469208</id><snippet>db = pyodbc.connect('DSN=northwind')
isolation = db.getinfo(pyodbc.SQL_DEFAULT_TXN_ISOLATION)
print('isolation=%s' % isolation)
</snippet></ROW><ROW><id>5469208</id><snippet>pgtests.py</snippet></ROW><ROW><id>5469208</id><snippet>getinfo()</snippet></ROW><ROW><id>5469326</id><snippet>&gt;&gt;&gt; a.argmax(axis=0)

array([1, 1, 0])
</snippet></ROW><ROW><id>5469376</id><snippet>user_passes_test</snippet></ROW><ROW><id>5469376</id><snippet>group_required_decorator</snippet></ROW><ROW><id>5469949</id><snippet>from math import (floor, ceil)
def trunc_div(a, b):
    c = a / b
    return floor(c) if c &gt; 0 else ceil(c)
</snippet></ROW><ROW><id>5469949</id><snippet>int()</snippet></ROW><ROW><id>5469949</id><snippet>def trunc_div(a, b):
    return int(a / b)
</snippet></ROW><ROW><id>5469949</id><snippet>int()</snippet></ROW><ROW><id>5469949</id><snippet>&gt;&gt;&gt; int(1 / 2)
0
&gt;&gt;&gt; int(-1 / 2)
0
</snippet></ROW><ROW><id>5469961</id><snippet>pattern: pattern solid
</snippet></ROW><ROW><id>5469961</id><snippet>pattern: pattern solid,fore-color "COLOR NAME"
</snippet></ROW><ROW><id>5469966</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>5469966</id><snippet>/media/</snippet></ROW><ROW><id>5470017</id><snippet>import functools

class cacher(object):

    def __init__(self, f):
        self.f = f
        self.cache = {}

    def __call__(self, *args):
        fname = self.f.__name__
        if (fname not in self.cache):
            self.cache[fname] = self.f(self,*args)
        else:
            print "using cache"
        return self.cache[fname]

    def __get__(self, instance, instancetype):
        """Implement the descriptor protocol to make decorating instance 
        method possible.

        """

        # Return a partial function with the first argument is the instance 
        #   of the class decorated.
        return functools.partial(self.__call__, instance)
</snippet></ROW><ROW><id>5470017</id><snippet>class Session(p.Session):
    ...

    @cacher
    def get_something(self):
        print "get_something called with self = %s "% self
        return self.pl.get_something()
</snippet></ROW><ROW><id>5470017</id><snippet>class Session(p.Session):
    ...

    def get_something(self):
        print "get_something called with self = %s "% self
        return self.pl.get_something()

    get_something = cacher(get_something)
</snippet></ROW><ROW><id>5470017</id><snippet>session = Session()
session.get_something  
#  &lt;==&gt; 
session.get_something.__get__(get_something, session, &lt;type ..&gt;)
# N.B: get_something is an instance of cacher class.
</snippet></ROW><ROW><id>5470017</id><snippet>session.get_something.__get__(get_something, session, &lt;type ..&gt;)
# return
get_something.__call__(session, ...) # the partial function.
</snippet></ROW><ROW><id>5470017</id><snippet>session.get_something(*args)
# &lt;==&gt;
get_something.__call__(session, *args)
</snippet></ROW><ROW><id>5470370</id><snippet>class Exact(xml.sax.handler.ContentHandler):
    def __init__(self, stdpath):
        self.stdpath = stdpath

        self.thisrow = {}
        self.curpath = []
        self.getvalue = None

        self.conn = MySQLConnect()
        self.table = None
        self.numrows = 0

    def __del__(self):
        self.conn.close()

        print '%s rows affected' % self.numrows

    def startElement(self, name, att):
        self.curpath.append(name)

    def characters(self, data):
        if self.getValue is not None:
            self.thisrow[self.getValue.strip()] = data.strip()
            self.getValue = None

    def endElement(self, name):
        self.curpath.pop()

        if name == self.stdpath[len(self.stdpath) - 1]:
            self.EndRow()
            self.thisrow = { }

    def EndRow(self):
        self.numrows += MySQLInsert(self.conn, self.thisrow, True, self.table)
        #for k, v in self.thisrow.iteritems():
        #   print '%s: %s,' % (k, v),
        #print ''

    def curPath(self, full=False):
        if full:
            return ' &gt; '.join(self.curpath)
        else:
            return ' &gt; '.join(self.curpath).replace(' &gt; '.join(self.stdpath) + ' &gt; ', '')
</snippet></ROW><ROW><id>5470370</id><snippet>class Debtors(sqlimport.Exact):
    def startDocument(self):
        self.table = 'debiteuren'
        self.address = None

    def startElement(self, name, att):
        sqlimport.Exact.startElement(self, name, att)

        if self.curPath(True) == ' &gt; '.join(self.stdpath):
            self.thisrow = {}
            self.thisrow['debiteur'] = att.get('code').strip()
        elif self.curPath() == 'Name':
            self.getValue = 'naam'
        elif self.curPath() == 'Phone':
            self.getValue = 'telefoon1'
        elif self.curPath() == 'ExtPhone':
            self.getValue = 'telefoon2'
        elif self.curPath() == 'Contacts &gt; Contact &gt; Addresses &gt; Address':
            if att.get('type') == 'V':
                self.address = 'Contacts &gt; Contact &gt; Addresses &gt; Address '
        elif self.address is not None:
            if self.curPath() == self.address + '&gt; AddressLine1':
                self.getValue = 'adres1'
            elif self.curPath() == self.address + '&gt; AddressLine2':
                self.getValue = 'adres2'
        else:
            self.getValue = None

if __name__ == '__main__':
    handler = Debtors(['Debtors', 'Accounts', 'Account'])
    parser = xml.sax.make_parser()
    parser.setContentHandler(handler)

    parser.parse(open('myfile.xml', 'rb'))
</snippet></ROW><ROW><id>5470740</id><snippet>int</snippet></ROW><ROW><id>5471082</id><snippet>str(dictionary)</snippet></ROW><ROW><id>5471082</id><snippet>simplejson</snippet></ROW><ROW><id>5471082</id><snippet>json</snippet></ROW><ROW><id>5471082</id><snippet>json.dumps(dictionary)</snippet></ROW><ROW><id>5471082</id><snippet>{"aaData": [{..:.., ..:..},{..:.., ..:..}]}</snippet></ROW><ROW><id>5471261</id><snippet>def rmtree(path, ignore_errors=False, onerror=None):
"""Recursively delete a directory tree.

If ignore_errors is set, errors are ignored; otherwise, if onerror
is set, it is called to handle the error with arguments (func,
path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
path is the argument to that function that caused it to fail; and
exc_info is a tuple returned by sys.exc_info(). If ignore_errors
is false and onerror is None, an exception is raised.

"""
if ignore_errors:
     def onerror(*args):
          pass
elif onerror is None:
     def onerror(*args):
          raise
try:
     if os.path.islink(path):
          # symlinks to directories are forbidden, see bug #1669
          raise OSError("Cannot call rmtree on a symbolic link")
 except OSError:
     onerror(os.path.islink, path, sys.exc_info())
     # can't continue even if onerror hook returns
     return
names = []
try:
     names = os.listdir(path)
except os.error, err:
     onerror(os.listdir, path, sys.exc_info())
for name in names:
     fullname = os.path.join(path, name)
     try:
          mode = os.lstat(fullname).st_mode
     except os.error:
          mode = 0
     if stat.S_ISDIR(mode):
          rmtree(fullname, ignore_errors, onerror)
     else:
         try:
             os.remove(fullname)
         except os.error, err:
             onerror(os.remove, fullname, sys.exc_info())
try:
     os.rmdir(path)
except os.error:
     onerror(os.rmdir, path, sys.exc_info()) 
</snippet></ROW><ROW><id>5471261</id><snippet>os.path.join()</snippet></ROW><ROW><id>5471261</id><snippet>rm(1)</snippet></ROW><ROW><id>5471261</id><snippet>unlinkat(2)</snippet></ROW><ROW><id>5471261</id><snippet>namei()</snippet></ROW><ROW><id>5471261</id><snippet>dentry</snippet></ROW><ROW><id>5471261</id><snippet>rm(1)</snippet></ROW><ROW><id>5471261</id><snippet>rm(1)</snippet></ROW><ROW><id>5471261</id><snippet>rmtree()</snippet></ROW><ROW><id>5471261</id><snippet>st_mode</snippet></ROW><ROW><id>5471261</id><snippet>struct statbuf</snippet></ROW><ROW><id>5471351</id><snippet>string</snippet></ROW><ROW><id>5471351</id><snippet>s = input("Please enter the text you want to compress")
fn = input("Please enter the desired filename")
with gzip.open(fn+".gz","wb") as f_out:
    f_out.write(bytes(s, 'UTF-8'))
</snippet></ROW><ROW><id>5471351</id><snippet>string</snippet></ROW><ROW><id>5471351</id><snippet>file</snippet></ROW><ROW><id>5471351</id><snippet>s = 'Polish text: ąćęłńóśźżĄĆĘŁŃÓŚŹŻ'
fn = 'fn.gz'
with gzip.open(fn, 'wb') as f_out:
    f_out.write(bytes(s, 'UTF-8'))
with gzip.open(fn, 'r') as f_in:
    s2 = f_in.read().decode('UTF-8')
print(s2)
</snippet></ROW><ROW><id>5471945</id><snippet>result = Moe.perform()</snippet></ROW><ROW><id>5471945</id><snippet>Moe.setopt(pycurl.POSTFIELDS, Larry)
</snippet></ROW><ROW><id>5471945</id><snippet>Larry</snippet></ROW><ROW><id>5472209</id><snippet>a = [" 0", " 1", " 2"]
b = [s.lstrip() for s in a]
</snippet></ROW><ROW><id>5472209</id><snippet>a[i] = a[i].lstrip()
</snippet></ROW><ROW><id>5472209</id><snippet>i</snippet></ROW><ROW><id>5472236</id><snippet>urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)</snippet></ROW><ROW><id>5472236</id><snippet>urlparse()</snippet></ROW><ROW><id>5472236</id><snippet>urlparse()</snippet></ROW><ROW><id>5472287</id><snippet>students = {}

infile = open("students.txt")
for line in infile:
  line = line.strip()
  parts = [p.strip() for p in line.split(",")]
  students[parts[0]] = (parts[1], parts[2])
</snippet></ROW><ROW><id>5472575</id><snippet>/pos/x</snippet></ROW><ROW><id>5472575</id><snippet>/pos/y</snippet></ROW><ROW><id>5472575</id><snippet>pos</snippet></ROW><ROW><id>5472575</id><snippet>pos/x
</snippet></ROW><ROW><id>5472575</id><snippet>pos/y
</snippet></ROW><ROW><id>5473023</id><snippet>if "ABCD" in "xxxxABCDyyyy":
    # whatever
</snippet></ROW><ROW><id>5473243</id><snippet>for line in infile:
    line = line.strip()
    if not line:
        continue
    parts = [p.strip() for p in line.split(",")]
    students[parts[0]] = (parts[1], parts[2])
</snippet></ROW><ROW><id>5473327</id><snippet>class UserAttributes(User):
    last_session_key = models.CharField(blank=True, null=True, max_length=40)
</snippet></ROW><ROW><id>5473327</id><snippet>def set_session_key(self, key):
    if self.last_session_key and not self.last_session_key == key:
        Session.objects.get(session_key=self.last_session_key).delete()
    self.last_session_key = key
    self.save()  
</snippet></ROW><ROW><id>5473327</id><snippet>auth.login(request, user)
user.userattributes.set_session_key(request.session.session_key)
</snippet></ROW><ROW><id>5473581</id><snippet>import socket
print socket.gethostbyname('www.google.com')
</snippet></ROW><ROW><id>5473581</id><snippet>74.125.230.112
</snippet></ROW><ROW><id>5473596</id><snippet>@ # $ % ^</snippet></ROW><ROW><id>5473632</id><snippet>id</snippet></ROW><ROW><id>5473632</id><snippet>description</snippet></ROW><ROW><id>5473632</id><snippet>destroyedStatus = Status.objects.get(description="destroyed")
clients_destroyed_items = StorageItem.objects.filter(client=client, 
    itemstatushistory__status=destroyedStatus)
</snippet></ROW><ROW><id>5473632</id><snippet>id</snippet></ROW><ROW><id>5473632</id><snippet>description</snippet></ROW><ROW><id>5473632</id><snippet>destroyedStatusIDs = Status.objects.filter(description="destroyed").values_list("id", flat=True)
clients_destroyed_items = StorageItem.objects.filter(client=client, 
    itemstatushistory__status__in=destroyedStatusIDs)
</snippet></ROW><ROW><id>5473632</id><snippet>related_name</snippet></ROW><ROW><id>5473632</id><snippet>ForeignKey</snippet></ROW><ROW><id>5473632</id><snippet>OneToOneField</snippet></ROW><ROW><id>5473632</id><snippet>ManyToManyField</snippet></ROW><ROW><id>5473632</id><snippet>class ItemStatusHistory(models.Model):
    date = models.DateTimeField(auto_now=True)
    contact = models.ForeignKey(Contact, related_name="history")
    item = models.ForeignKey(StorageItem, related_name="history")
    status = models.ForeignKey(Status, related_name="history")
    user = models.ForeignKey(User, related_name="history")
</snippet></ROW><ROW><id>5473632</id><snippet>destroyedStatus = Status.objects.get(description="destroyed")
clients_destroyed_items = StorageItem.objects.filter(client=client, 
    history__status=destroyedStatus)
</snippet></ROW><ROW><id>5473632</id><snippet>date</snippet></ROW><ROW><id>5473632</id><snippet>date</snippet></ROW><ROW><id>5473632</id><snippet>from django.db.models import F, Max

destroyedStatus = Status.objects.get(description="destroyed")
clients_destroyed_items = StorageItem.objects.annotate(
    last_change_date=Max("itemstatushistory__date")).filter(client=client, 
    itemstatushistory__status=destroyedStatus, 
    itemstatushistory__date=F("last_change_date"))
</snippet></ROW><ROW><id>5473855</id><snippet>*** inet.py     2011-03-29 14:01:19.000000000 +0000
--- inet.py.orig        2011-03-29 07:59:02.000000000 +0000
***************
*** 846,856 ****
          lastp = lst[-1]
          if p.frag &gt; 0 or lastp.flags &amp; 1 != 0: # first or last fragment missing
              missfrag += lst
-             print "missing framgent!"
              continue
!         # Keep 1st fragment capture time (as it is lost in subsequent copies during defragmentation)
!         ptime = p.time
!         p = p.copy() # copy() method do not copy time member (?)
          if Padding in p:
              del(p[Padding].underlayer.payload)
          ip = p[IP]
--- 846,853 ----
          lastp = lst[-1]
          if p.frag &gt; 0 or lastp.flags &amp; 1 != 0: # first or last fragment missing
              missfrag += lst
              continue
!         p = p.copy()
          if Padding in p:
              del(p[Padding].underlayer.payload)
          ip = p[IP]
***************
*** 878,892 ****
              del(ip.len)
              p = p/txt
              p._defrag_pos = max(x._defrag_pos for x in lst)
-             # Put back time in packet
-             p.time= ptime
              defrag.append(p)
      defrag2=[]
      for p in defrag:
          q = p.__class__(str(p))
          q._defrag_pos = p._defrag_pos
-         # Put back time in packet
-         q.time = p.time
          defrag2.append(q)
      final += defrag2
      final += missfrag
--- 875,885 ----
</snippet></ROW><ROW><id>5474393</id><snippet>re.search</snippet></ROW><ROW><id>5474393</id><snippet>ip.group(0)</snippet></ROW><ROW><id>5474393</id><snippet>ip.group()</snippet></ROW><ROW><id>5474393</id><snippet>re.search</snippet></ROW><ROW><id>5474393</id><snippet>None</snippet></ROW><ROW><id>5474393</id><snippet>ip = re.search(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b",line)

if ip is None:
    ip = "none set"
</snippet></ROW><ROW><id>5474644</id><snippet>return ans[0] in "yY"
</snippet></ROW><ROW><id>5474644</id><snippet>if ans[0] in "yY":
    return True
else:
    return False
</snippet></ROW><ROW><id>5474668</id><snippet>(or (some-condition) (some-side-effect))
</snippet></ROW><ROW><id>5474668</id><snippet>unless</snippet></ROW><ROW><id>5474668</id><snippet>and</snippet></ROW><ROW><id>5474668</id><snippet>when</snippet></ROW><ROW><id>5474668</id><snippet>or</snippet></ROW><ROW><id>5474668</id><snippet>and</snippet></ROW><ROW><id>5474668</id><snippet>if</snippet></ROW><ROW><id>5474668</id><snippet>when</snippet></ROW><ROW><id>5474668</id><snippet>unless</snippet></ROW><ROW><id>5474668</id><snippet>if</snippet></ROW><ROW><id>5475103</id><snippet>render_template</snippet></ROW><ROW><id>5475103</id><snippet>utils.render_template(self, 'persons.html', {'persons': persons})</snippet></ROW><ROW><id>5475219</id><snippet>os.system('shutdown -h now')
</snippet></ROW><ROW><id>5475441</id><snippet>for item in iterable</snippet></ROW><ROW><id>5475441</id><snippet>enumerate</snippet></ROW><ROW><id>5475441</id><snippet>for i, item in enumerate(lst):
    if item == 1:
      list[i] = 0
</snippet></ROW><ROW><id>5475441</id><snippet>[expression for target in expression if condition]</snippet></ROW><ROW><id>5475441</id><snippet>if not condition: continue</snippet></ROW><ROW><id>5475441</id><snippet>expression</snippet></ROW><ROW><id>5475441</id><snippet>expression if condition else expression</snippet></ROW><ROW><id>5475536</id><snippet>cP</snippet></ROW><ROW><id>5475536</id><snippet>c</snippet></ROW><ROW><id>5475536</id><snippet>c</snippet></ROW><ROW><id>5475536</id><snippet>cP</snippet></ROW><ROW><id>5475536</id><snippet> results = {}
 for line in file:
    (key, value) = line.split(':', 1)
    results[key] = value

 # use results['fN'] for your fN variable
</snippet></ROW><ROW><id>5475536</id><snippet> results = dict(line.split(':', 1) for line in file)
</snippet></ROW><ROW><id>5475536</id><snippet> locals().update(line.split(':', 1) for line in file)
</snippet></ROW><ROW><id>5476093</id><snippet>for line in fname:
    line = re.sub('[\(\)\{\}\'\'\,&lt;&gt;]','', line)
    line = re.sub(r"(\.\d)\d*_?\d*", r"\1", line, 1)
    fields = line.rstrip("\n").split()
    outfile.write('%s  %s  %s  %s  %s  %s\n' % (fields[0],fields[1],fields[2],fields[3],fields[4],(fields[5])))
</snippet></ROW><ROW><id>5476166</id><snippet>&gt;&gt;&gt; dt = datetime.datetime.now()
&gt;&gt;&gt; dt_truncated = datetime.datetime(dt.year,dt.month,dt.day)
&gt;&gt;&gt; dt_truncated
datetime.datetime(2011, 3, 29, 0, 0)
</snippet></ROW><ROW><id>5476166</id><snippet>date</snippet></ROW><ROW><id>5476166</id><snippet>&gt;&gt;&gt; d_truncated = datetime.date(dt.year, dt.month, dt.day)
&gt;&gt;&gt; d_truncated
datetime.date(2011, 3, 29)
</snippet></ROW><ROW><id>5476166</id><snippet>&gt;&gt;&gt; datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
datetime.datetime(2011, 3, 29, 0, 0)
</snippet></ROW><ROW><id>5476280</id><snippet>import oauth2 as oauth

# Create your consumer with the proper key/secret.
consumer = oauth.Consumer(key="your-twitter-consumer-key", 
    secret="your-twitter-consumer-secret")

# Request token URL for Twitter.
request_token_url = "http://twitter.com/oauth/request_token"

# Create our client.
client = oauth.Client(consumer)

# The OAuth Client request works just like httplib2 for the most part.
resp, content = client.request(request_token_url, "GET")
print resp
print content
</snippet></ROW><ROW><id>5476286</id><snippet>import feedparser

d = feedparser.parse('http://pplware.sapo.pt/feed/')    
updates = []
for i in range(10):
    updates.append({"url": d.entries[i].link, "msg": d.entries[i].summary + ", "})
</snippet></ROW><ROW><id>5476307</id><snippet>import os

os.system("xterm -e 'your command'")
</snippet></ROW><ROW><id>5476394</id><snippet>math</snippet></ROW><ROW><id>5476709</id><snippet>if cmd == "additem":
    item = raw_input("Enter item name: ")
    cart.append(item)

#at the end
for item in cart:
    print "Item: %s. Price: %s" % (item, prices[item])
</snippet></ROW><ROW><id>5476740</id><snippet>using_options(tablename='tbScheduleSlots', autoload=True)
</snippet></ROW><ROW><id>5476740</id><snippet>[EndDateTime]</snippet></ROW><ROW><id>5476740</id><snippet>[EndDateTime]</snippet></ROW><ROW><id>5477153</id><snippet>_</snippet></ROW><ROW><id>5477153</id><snippet>['' for _ in myList]

[a+d for a, _, _, d, _ in fiveTuples]
</snippet></ROW><ROW><id>5477153</id><snippet>[''] * len(myList)
</snippet></ROW><ROW><id>5477639</id><snippet>def handleException(excType, excValue, traceback, logger=logger):
    logger.error("Uncaught exception", exc_info=(excType, excValue, traceback))

sys.excepthook = handleException
</snippet></ROW><ROW><id>5477927</id><snippet>.. method:: kittens(format="json", count=10)

   Creates kittens in the browser.

   :param format: The format in which kittens will be generated.
   :param count: The number of kittens to generate.
   :return: A list of kittens
</snippet></ROW><ROW><id>5478042</id><snippet>print('Please enter your googlecode.com password.')
</snippet></ROW><ROW><id>5478059</id><snippet>def words(filename):
    with open(filename) as wordfile:
        for line in wordfile:
            for word in line.split():
                yield word
</snippet></ROW><ROW><id>5478059</id><snippet>set</snippet></ROW><ROW><id>5478059</id><snippet>wordlist = set(words("words.txt"))
</snippet></ROW><ROW><id>5478059</id><snippet>wordlist = set()
wordfiles = ["words1.txt", "words2.txt", "words3.txt"]

for wordfile in wordfiles:
    wordlist |= set(words(wordfile))
</snippet></ROW><ROW><id>5478059</id><snippet>stopwords = set(["a", "an", "the"])
wordlist -= stopwords
</snippet></ROW><ROW><id>5478127</id><snippet>u = User.objects.get(id=1)
zm, created = UserProfile.objects.get_or_create(user = u)
</snippet></ROW><ROW><id>5478127</id><snippet>u = User.objects.get(id=1)
zm = u.get_profile()
</snippet></ROW><ROW><id>5478448</id><snippet>def timing(f):
    def wrap(*args):
        time1 = time.time()
        ret = f(*args)
        time2 = time.time()
        print '%s function took %0.3f ms' % (f.func_name, (time2-time1)*1000.0)
        return ret
    return wrap
</snippet></ROW><ROW><id>5478448</id><snippet>@timing
def do_work():
  #code
</snippet></ROW><ROW><id>5478448</id><snippet>f.func_name</snippet></ROW><ROW><id>5478448</id><snippet>f.__name__</snippet></ROW><ROW><id>5478494</id><snippet>UserDict(self.data)</snippet></ROW><ROW><id>5478494</id><snippet>UserDict(self.data)</snippet></ROW><ROW><id>5478494</id><snippet>self.data</snippet></ROW><ROW><id>5478494</id><snippet>dict</snippet></ROW><ROW><id>5478494</id><snippet>UserDict</snippet></ROW><ROW><id>5478494</id><snippet>UserDict(self.data)</snippet></ROW><ROW><id>5478781</id><snippet>def online_check():
  while True:
    try:
      con = urllib2.urlopen("http://www.google.com/")
      data = con.read()
      logging.debug('{0} Reached the host. Exiting online_check'.format(time.strftime('[ %H:%M:%S ]')))
    except urllib2.URLError:
      logging.debug('{0} Could not reach host trying again in 3 seconds'.format(time.strftime('[ %H:%M:%S ]')))
      time.sleep(3)
    finally:
      con.close()
</snippet></ROW><ROW><id>5478894</id><snippet>for number in str(row.get('PhoneNumbers')).split('|'):
  file.write("\t\t\t\t&lt;PHONENUM&gt;"+number+"&lt;/PHONENUM&gt;\n")
</snippet></ROW><ROW><id>5478944</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>5478944</id><snippet>render_to_response</snippet></ROW><ROW><id>5478944</id><snippet>return render_to_response('my_template.html',
                          my_data_dictionary,
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>5478944</id><snippet>django.core.context_processors.static</snippet></ROW><ROW><id>5478944</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>5479093</id><snippet>threading.Thread(target=listener, args=(port)).start()
</snippet></ROW><ROW><id>5479093</id><snippet>args</snippet></ROW><ROW><id>5479093</id><snippet>threading.Thread(target=listener, args=(port,)).start()
</snippet></ROW><ROW><id>5479093</id><snippet>&gt;&gt;&gt; (100)  # this is just value 100
100
&gt;&gt;&gt; (100,) # this is a tuple containing the value 100
(100,)
</snippet></ROW><ROW><id>5479467</id><snippet>def quadBrezPoints(P0, P2, P1, nSamples):
    ans = numpy.zeros((nSamples,2))
    for i in xrange(nSamples):
        t = (i+0.0)/nSamples
        ans[i,0] = (1-t)**2 * P0[0] + 2*(1-t)*P1[0] + t**2 * P2[0]
        ans[i,1] = (1-t)**2 * P0[1] + 2*(1-t)*P1[1] + t**2 * P2[1]
return ans
</snippet></ROW><ROW><id>5479786</id><snippet>self.distances</snippet></ROW><ROW><id>5479786</id><snippet>info = self.distances_DICT.get((user1, user2))
if info is None: 
    self.calculate_the_distance_or_whatever_else_you_need_to_do(user1, user2))
</snippet></ROW><ROW><id>5479973</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; path = "abc/def/ghi"
&gt;&gt;&gt; a = path.split("/")
&gt;&gt;&gt; [os.path.join(*a[:i]) for i in range(1, len(a)+1)]
['abc', 'abc/def', 'abc/def/ghi']
</snippet></ROW><ROW><id>5480265</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>5480265</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>5480391</id><snippet>pyupnp.upnp</snippet></ROW><ROW><id>5480391</id><snippet>pyupnp</snippet></ROW><ROW><id>5480391</id><snippet>__all__</snippet></ROW><ROW><id>5480597</id><snippet>plistlib</snippet></ROW><ROW><id>5480597</id><snippet>.plist</snippet></ROW><ROW><id>5480597</id><snippet>NSPropertyListSerialization</snippet></ROW><ROW><id>5480597</id><snippet>NSPropertyListSerialization</snippet></ROW><ROW><id>5480597</id><snippet>plistlib</snippet></ROW><ROW><id>5480597</id><snippet>plistlib</snippet></ROW><ROW><id>5480597</id><snippet>.plist</snippet></ROW><ROW><id>5480597</id><snippet>NSPropertyListXMLFormat_v1_0</snippet></ROW><ROW><id>5480597</id><snippet>.plist</snippet></ROW><ROW><id>5480643</id><snippet>if calObj.ShowModal() == wx.ID_OK:
</snippet></ROW><ROW><id>5480643</id><snippet>def okClicked(self, event):
    date = self.calend.GetDate()
    print date
    return date
</snippet></ROW><ROW><id>5480643</id><snippet>def okClicked(self, event):
    self.date = self.calend.GetDate()
    print self.date
    return self.date
</snippet></ROW><ROW><id>5480643</id><snippet># Dialog
class Calendar(wx.Dialog):
    def __init__(self, parent, id, title):
        wx.Dialog.__init__(self, parent, id, title)

        self.date = wx.DateTime_Now() #create global variable 'self.date'

        vbox = wx.BoxSizer(wx.VERTICAL)
        self.calend = cal.CalendarCtrl(self, -1, self.date, #from wx.DateTime_Now()
            style = cal.CAL_SHOW_HOLIDAYS|cal.CAL_SEQUENTIAL_MONTH_SELECTION)
        vbox.Add(self.calend, 0, wx.EXPAND | wx.ALL, 20)

        vbox.Add((-1, 20))

        hbox2 = wx.BoxSizer(wx.HORIZONTAL)
        btn = wx.Button(self, wx.ID_OK, 'Ok') #changed id to wx.ID_OK
        cancelBtn = wx.Button(self, wx.ID_CANCEL, 'Cancel') #id to wx.ID_CANCEL
        hbox2.Add(btn, 1)
        hbox2.Add(cancelBtn, 1)
        vbox.Add(hbox2, 0, wx.ALIGN_CENTER | wx.TOP | wx.BOTTOM, 20)

        btn.Bind(wx.EVT_BUTTON, self.okClicked)
        cancelBtn.Bind(wx.EVT_BUTTON, self.OnQuit)

        self.SetSizerAndFit(vbox)

        self.Show(True)
        self.Centre()


    def okClicked(self, event):
        self.date = self.calend.GetDate() #set global value 'date' to selection
        print self.date
        return self.date


#Frame function
def calClick1(self, event):
    calObj = Calendar(None, -1, 'test cal')
    #if you clicked ok, continue...
    if calObj.ShowModal() == wx.ID_OK:
        # Set the TextCtrl by calling the global variable 'calObj.date'
        self.MyTextCtrl.SetValue(calObj.date)
</snippet></ROW><ROW><id>5480784</id><snippet>dat = np.array([[1,2,3], [4,5,nan], [nan,6,nan], [nan,nan,nan]])
mdat = np.ma.masked_array(dat,np.isnan(dat))
mm = np.mean(mdat,axis=1)
print mm.filled(np.nan) # the desired answer
</snippet></ROW><ROW><id>5480784</id><snippet>   from timeit import Timer

    setupstr="""
import numpy as np
from scipy.stats.stats import nanmean    
dat = np.random.normal(size=(1000,1000))
ii = np.ix_(np.random.randint(0,99,size=50),np.random.randint(0,99,size=50))
dat[ii] = np.nan
"""  

    method1="""
mdat = np.ma.masked_array(dat,np.isnan(dat))
mm = np.mean(mdat,axis=1)
mm.filled(np.nan)    
"""

    N = 2
    t1 = Timer(method1, setupstr).timeit(N)
    t2 = Timer("[np.mean([l for l in d if not np.isnan(l)]) for d in dat]", setupstr).timeit(N)
    t3 = Timer("np.array([r[np.isfinite(r)].mean() for r in dat])", setupstr).timeit(N)
    t4 = Timer("np.ma.masked_invalid(dat).mean(axis=1)", setupstr).timeit(N)
    t5 = Timer("nanmean(dat,axis=1)", setupstr).timeit(N)

    print 'Time: %f\tRatio: %f' % (t1,t1/t1 )
    print 'Time: %f\tRatio: %f' % (t2,t2/t1 )
    print 'Time: %f\tRatio: %f' % (t3,t3/t1 )
    print 'Time: %f\tRatio: %f' % (t4,t4/t1 )
    print 'Time: %f\tRatio: %f' % (t5,t5/t1 )
</snippet></ROW><ROW><id>5480784</id><snippet>Time: 0.045454  Ratio: 1.000000
Time: 8.179479  Ratio: 179.950595
Time: 0.060988  Ratio: 1.341755
Time: 0.070955  Ratio: 1.561029
Time: 0.065152  Ratio: 1.433364
</snippet></ROW><ROW><id>5480920</id><snippet>x= float(input("enter a number between 0 and 1: "))
y= float(input("enter another number between 0 and 1: "))
</snippet></ROW><ROW><id>5480969</id><snippet>re.split('[Hh]ello', 'Hello moon')
</snippet></ROW><ROW><id>5480969</id><snippet>['', ' moon']
</snippet></ROW><ROW><id>5480969</id><snippet>re.split(r'[Hh]ello | moon', 'Hello moon')
</snippet></ROW><ROW><id>5480987</id><snippet>STW_PREFIX = "{http://www.shrinktheweb.com/doc/stwresponse.xsd}"
</snippet></ROW><ROW><id>5480987</id><snippet>stw:StatusCode</snippet></ROW><ROW><id>5480987</id><snippet>STW_PREFIX + "StatusCode"</snippet></ROW><ROW><id>5480987</id><snippet>import xml.etree.cElementTree as et
def showtag(elem):
    return repr(elem.tag.rsplit("}")[1])
def showtext(elem):
    return None if elem.text is None else repr(elem.text.strip())
root = et.fromstring(xml_response) # xml_response is your input string
print repr(root.tag) # see exactly what tag is in the element
for child in root[0]:
    print showtag(child), showtext(child)
    for gc in child:
        print "...", showtag(gc), showtext(gc), gc.attrib
</snippet></ROW><ROW><id>5480987</id><snippet>'{http://www.shrinktheweb.com/doc/stwresponse.xsd}ThumbnailResponse'
'ThumbnailResult' ''
... 'Thumbnail' None {'Exists': 'false'}
... 'Thumbnail' 'fix_and_retry' {'Verified': 'false'}
'ResponseStatus' ''
... 'StatusCode' 'Blank Detected' {}
'ResponseTimestamp' ''
... 'StatusCode' None {}
'ResponseCode' ''
... 'StatusCode' None {}
'CategoryCode' ''
... 'StatusCode' 'none' {}
'Quota_Remaining' ''
... 'StatusCode' '1' {}
</snippet></ROW><ROW><id>5480999</id><snippet>class SingleTCPHandler(SocketServer.BaseRequestHandler):
    """ One instance per connection. """
    def __init__(self, callback, *args, **keys):
        self.callback = callback
        SocketServer.BaseRequestHandler.__init__(self, *args, **keys)

    def handle(self):
        data = Net.recv_from_socket(self.request)
        self.callback(data)
</snippet></ROW><ROW><id>5480999</id><snippet>def show_message_box(data):
    GUI.run(str("RECV'd message: %s" % data))
def handler_factory(callback):
    def createHandler(*args, **keys):
        return ThreadedTCPRequestHandler(callback, *args, **keys)
    return createHandler
server = ThreadedTCPServer((HOST, PORT), handler_factory(show_message_box))
</snippet></ROW><ROW><id>5480999</id><snippet>def my_callback():
    print 'Hello'
server = ThreadedTCPServer((HOST, PORT), lambda *args, **keys: ThreadedTCPRequestHandler(my_callback, *args, **keys))
</snippet></ROW><ROW><id>5480999</id><snippet>def my_callback():
    print 'Hello'
import functools
server = ThreadedTCPServer((HOST, PORT), functools.partial(ThreadedTCPRequestHandler, my_callback))
</snippet></ROW><ROW><id>5481053</id><snippet>setrlimit()</snippet></ROW><ROW><id>5481053</id><snippet>mmap(2)</snippet></ROW><ROW><id>5481053</id><snippet>mmap(2)</snippet></ROW><ROW><id>5481257</id><snippet>__init__</snippet></ROW><ROW><id>5481257</id><snippet>from google.appengine.api import users
from tipfy import RequestHandler
from tipfy.ext.jinja2 import render_response

class UserPageHandler(RequestHandler):
    def __init__(self, app, request):
        super(UserPageHandler, self).__init__(app, request)

        self.user = users.get_current_user()

    def user_response(self, template_name):
        return render_response(template_name, user=self.user)

def WhateverHandler(UserPageHandler):
    def get(self):
        return self.user_response('template_name.html')
</snippet></ROW><ROW><id>5481272</id><snippet>from jinja2 import Environment, Undefined

def custom_sort(iterable, somearg):
    if iterable is None or isinstance(iterable, Undefined):
        return iterable

    # Do custom sorting of iterable here

    return iterable

# ...

env = Environment()
env.filters['customsort'] = custom_sort
</snippet></ROW><ROW><id>5481328</id><snippet>--with-profile</snippet></ROW><ROW><id>5481403</id><snippet>number</snippet></ROW><ROW><id>5481406</id><snippet>&gt;&gt;&gt; print '%.18f' % 0.1
0.100000000000000006

&gt;&gt;&gt; 0.4 - 0.3 == 0.1
False
</snippet></ROW><ROW><id>5481406</id><snippet>def nearly_equal(x, y, epsilon=1e-7):
    return abs(x - y) &lt; epsilon
</snippet></ROW><ROW><id>5481517</id><snippet>'cache.type' : 'file'
</snippet></ROW><ROW><id>5481517</id><snippet>'cache.type' : 'dbm'
</snippet></ROW><ROW><id>5481610</id><snippet>import multiprocessing as mp
import multiprocessing.util as util
pool=mp.Pool(1)
print list(pool.imap(abs, range(3)))
</snippet></ROW><ROW><id>5481610</id><snippet>pool</snippet></ROW><ROW><id>5481610</id><snippet>pool.imap()</snippet></ROW><ROW><id>5481610</id><snippet>print(list(mp.Pool(1).imap(abs, range(3))))
</snippet></ROW><ROW><id>5481610</id><snippet>Pool</snippet></ROW><ROW><id>5481610</id><snippet>imap</snippet></ROW><ROW><id>5481610</id><snippet>Finalizer</snippet></ROW><ROW><id>5481610</id><snippet>self._terminate</snippet></ROW><ROW><id>5481610</id><snippet>Pool</snippet></ROW><ROW><id>5481610</id><snippet>class Pool(object):
    def __init__(self, processes=None, initializer=None, initargs=()):
        ...
        self._terminate = Finalize(
            self, self._terminate_pool,
            args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,
                  self._task_handler, self._result_handler, self._cache),
            exitpriority=15
            )
</snippet></ROW><ROW><id>5481610</id><snippet>class Finalize(object):
    '''
    Class which supports object finalization using weakrefs
    '''
    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):
        ...
        if obj is not None:
            self._weakref = weakref.ref(obj, self)   
</snippet></ROW><ROW><id>5481610</id><snippet>weakref.ref(obj,self)</snippet></ROW><ROW><id>5481610</id><snippet>self()</snippet></ROW><ROW><id>5481610</id><snippet>obj</snippet></ROW><ROW><id>5481610</id><snippet>util.log_to_stderr(util.SUBDEBUG)</snippet></ROW><ROW><id>5481610</id><snippet>import multiprocessing as mp
import multiprocessing.util as util
util.log_to_stderr(util.SUBDEBUG)

print(list(mp.Pool(1).imap(abs, range(3))))
</snippet></ROW><ROW><id>5481610</id><snippet>[DEBUG/MainProcess] created semlock with handle 3077013504
[DEBUG/MainProcess] created semlock with handle 3077009408
[DEBUG/MainProcess] created semlock with handle 3077005312
[DEBUG/MainProcess] created semlock with handle 3077001216
[INFO/PoolWorker-1] child process calling self.run()
[SUBDEBUG/MainProcess] finalizer calling &lt;bound method type._terminate_pool of &lt;class 'multiprocessing.pool.Pool'&gt;&gt; with args (&lt;Queue.Queue instance at 0x9d6e62c&gt;, &lt;multiprocessing.queues.SimpleQueue object at 0x9cf04cc&gt;, &lt;multiprocessing.queues.SimpleQueue object at 0x9d6e40c&gt;, [&lt;Process(PoolWorker-1, started daemon)&gt;], &lt;Thread(Thread-1, started daemon -1217967248)&gt;, &lt;Thread(Thread-2, started daemon -1226359952)&gt;, {0: &lt;multiprocessing.pool.IMapIterator object at 0x9d6eaec&gt;}) and kwargs {}
[DEBUG/MainProcess] finalizing pool
...
</snippet></ROW><ROW><id>5481610</id><snippet>import multiprocessing as mp
import multiprocessing.util as util
util.log_to_stderr(util.SUBDEBUG)
pool=mp.Pool(1)
print list(pool.imap(abs, range(3)))
</snippet></ROW><ROW><id>5481610</id><snippet>[DEBUG/MainProcess] created semlock with handle 3078684672
[DEBUG/MainProcess] created semlock with handle 3078680576
[DEBUG/MainProcess] created semlock with handle 3078676480
[DEBUG/MainProcess] created semlock with handle 3078672384
[INFO/PoolWorker-1] child process calling self.run()
[DEBUG/MainProcess] doing set_length()
[0, 1, 2]
[INFO/MainProcess] process shutting down
[DEBUG/MainProcess] running all "atexit" finalizers with priority &gt;= 0
[SUBDEBUG/MainProcess] calling &lt;Finalize object, callback=_terminate_pool, args=(&lt;Queue.Queue instance at 0xb763e60c&gt;, &lt;multiprocessing.queues.SimpleQueue object at 0xb76c94ac&gt;, &lt;multiprocessing.queues.SimpleQueue object at 0xb763e3ec&gt;, [&lt;Process(PoolWorker-1, started daemon)&gt;], &lt;Thread(Thread-1, started daemon -1218274448)&gt;, &lt;Thread(Thread-2, started daemon -1226667152)&gt;, {}), exitprority=15&gt;
...
[DEBUG/MainProcess] finalizing pool
</snippet></ROW><ROW><id>5481729</id><snippet>trace</snippet></ROW><ROW><id>5481729</id><snippet>log</snippet></ROW><ROW><id>5481729</id><snippet>import inspect

def log(func):
    def wrapped(*args, **kwargs):
        try:
            print "Entering: [%s] with parameters %s" % (func.__name__, args)
            try:
                return func(*args, **kwargs)
            except Exception, e:
                print 'Exception in %s : %s' % (func.__name__, e)
        finally:
            print "Exiting: [%s]" % func.__name__
    return wrapped

def trace(cls):
    for name, m in inspect.getmembers(cls, inspect.ismethod):
        setattr(cls,name,log(m))
    return cls

@trace
class X(object):
    def first_x_method(self):
        print 'doing first_x_method stuff...'
    def second_x_method(self):
        print 'doing second_x_method stuff...'

x=X()
x.first_x_method()
x.second_x_method()
</snippet></ROW><ROW><id>5481729</id><snippet>Entering: [first_x_method] with parameters (&lt;__main__.X object at 0xb77c80ac&gt;,)
doing first_x_method stuff...
Exiting: [first_x_method]
Entering: [second_x_method] with parameters (&lt;__main__.X object at 0xb77c80ac&gt;,)
doing second_x_method stuff...
Exiting: [second_x_method]
</snippet></ROW><ROW><id>5481780</id><snippet>@decorator
def func(): ...    
</snippet></ROW><ROW><id>5481780</id><snippet>def func(): ...
func=decorator(func)
</snippet></ROW><ROW><id>5481780</id><snippet>@logger.log
def first_x_method(self): ...
</snippet></ROW><ROW><id>5481780</id><snippet>def first_x_method(self): ...
first_x_method=logger.log(first_x_method)
</snippet></ROW><ROW><id>5481780</id><snippet>logger.log</snippet></ROW><ROW><id>5481780</id><snippet>func = first_x_method</snippet></ROW><ROW><id>5481780</id><snippet>logger.log(first_x_method)</snippet></ROW><ROW><id>5481780</id><snippet>__</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method=logger.log(first_x_method)</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method</snippet></ROW><ROW><id>5481780</id><snippet>__</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method()</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method</snippet></ROW><ROW><id>5481780</id><snippet>x().first_x_method()</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method</snippet></ROW><ROW><id>5481780</id><snippet>first_x_method</snippet></ROW><ROW><id>5481780</id><snippet>__</snippet></ROW><ROW><id>5481780</id><snippet>__</snippet></ROW><ROW><id>5482031</id><snippet>def login(request):
    if request.POST:            
        email=request.POST.get("username")
        password = request.POST.get("password")                     
        user = UniversityDetails.objects.filter(email=email,password=password)          
        if(not user):
            return render_to_response("registrationForm.html", 
                       {'invalid': True }) # our template can detect this variable
        else:
            return render_to_response("logedIn.html")
</snippet></ROW><ROW><id>5482031</id><snippet>{% if invalid %}
    Your email/password combo doesn't exist. 
{% endif %}
</snippet></ROW><ROW><id>5482647</id><snippet>TerminateProcess</snippet></ROW><ROW><id>5482647</id><snippet>GetExitCodeProcess</snippet></ROW><ROW><id>5482952</id><snippet>/some/resource.json</snippet></ROW><ROW><id>5482952</id><snippet>return json.dumps(dict(a='foo'))</snippet></ROW><ROW><id>5482952</id><snippet>/some/resource.json&amp;callback=some_func</snippet></ROW><ROW><id>5482952</id><snippet>  d = json.dumps(dict(a='foo'))
  return 'some_func(' + d + ');'
</snippet></ROW><ROW><id>5482957</id><snippet>?</snippet></ROW><ROW><id>5482957</id><snippet>(?P&lt;dataone&gt;([0-9])+)/(?P&lt;datatwo&gt;([0-9])+)/(?P&lt;datathree&gt;([0-9])+)/(?P&lt;datafour&gt;([0-9])+)/((?P&lt;datafive&gt;([0-9])+)/)?
</snippet></ROW><ROW><id>5482957</id><snippet>(...)?</snippet></ROW><ROW><id>5483150</id><snippet>ls -l</snippet></ROW><ROW><id>5483150</id><snippet>ls -l</snippet></ROW><ROW><id>5483150</id><snippet>ls -l /your-path</snippet></ROW><ROW><id>5483298</id><snippet>for lino, line in enumerate(open('sampleresults.csv')):
    if any(c in line for c in '\x8d\x94\xc1\xcf\xd3'): print "%d %r\n" % (lino+1, line)
</snippet></ROW><ROW><id>5483298</id><snippet>def UnicodeDictReader(str_data, encoding, **kwargs):
    csv_reader = csv.DictReader(str_data, **kwargs)
    # Decode the keys once
    keymap = dict((k, k.decode(encoding)) for k in csv_reader.fieldnames)
    for row in csv_reader:
        yield dict((keymap[k], v.decode(encoding)) for k, v in row.iteritems())

dozedata = ['\xd1,\xff', '\xd2,\xfe', '3,4']
print list(UnicodeDictReader(dozedata, 'cp1252'))
</snippet></ROW><ROW><id>5483298</id><snippet>[{u'\xd1': u'\xd2', u'\xff': u'\xfe'}, {u'\xd1': u'3', u'\xff': u'4'}]
</snippet></ROW><ROW><id>5483298</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from pprint import pprint as pp
&gt;&gt;&gt; def UnicodeDictReader(str_data, encoding, **kwargs):
...     csv_reader = csv.DictReader(str_data, **kwargs)
...     # Decode the keys once
...     keymap = dict((k, k.decode(encoding)) for k in csv_reader.fieldnames)
...     for row in csv_reader:
...         yield dict((keymap[k], v.decode(encoding)) for k, v in row.iteritems())
...
&gt;&gt;&gt; f = open('sampleresults.csv', 'rb')
&gt;&gt;&gt; drdr = UnicodeDictReader(f, 'cp1252')
&gt;&gt;&gt; pp(drdr.next())
{u'APELLIDO': u'=== family names redacted ===',
 u'CATEGORIA': u'ABIERTA',
 u'CEDULA': u'10000640',
 u'DELAY': u' 0:20',
 u'EDAD': u'25',
 u'EMAIL': u'mimail640',
 u'NO.': u'640',
 u'NOMBRE': u'=== given names redacted ===',
 u'POSICION CATEGORIA': u'1',
 u'POSICION CATEGORIA EN KM.5': u'11',
 u'POSICION GENERAL CHIP': u'1',
 u'POSICION GENERAL EN KM.5': u'34',
 u'POSICION GENERAL GUN': u'1',
 u'POSICION GENERO': u'1',
 u'PRIMEROS 5KM.': u'0:32:55',
 u'PROMEDIO/KM.': u' 5:44',
 u'SEGUNDOS KM.': u'0:24:05',
 u'SEX': u'M',
 u'TIEMPO CHIP': u'0:56:59',
 u'TIEMPO GUN': u'0:57:19'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5483534</id><snippet>s = u'\u5E73\u621015'
with open("yop", "wb") as f:
   f.write(s.encode("UTF-8"))
</snippet></ROW><ROW><id>5483611</id><snippet>fields_order</snippet></ROW><ROW><id>5483611</id><snippet>Meta</snippet></ROW><ROW><id>5483611</id><snippet>CreateFieldsFromModel</snippet></ROW><ROW><id>5483611</id><snippet>MapFieldsToModel</snippet></ROW><ROW><id>5483611</id><snippet>__init__</snippet></ROW><ROW><id>5483611</id><snippet>__init__</snippet></ROW><ROW><id>5483611</id><snippet>data</snippet></ROW><ROW><id>5483611</id><snippet>initial</snippet></ROW><ROW><id>5483611</id><snippet>files</snippet></ROW><ROW><id>5483611</id><snippet>class MyForm(Form):
    fields = {
        'one': ...
        ...
    }
    fields_order = [...]
    model_fields = ???

Class MyForm2(MyForm):
    fields = MyForm.fields + {...}

# ... hey this API sucks! I think I'll go with another framework.
</snippet></ROW><ROW><id>5483611</id><snippet>Form</snippet></ROW><ROW><id>5484113</id><snippet>default</snippet></ROW><ROW><id>5484113</id><snippet>class BilagForm(forms.ModelForm):
    dato = forms.DateField(widget=SelectDateWidget(), initial=yesterday)
    class Meta:
        model = Bilag
</snippet></ROW><ROW><id>5484113</id><snippet>yesterday</snippet></ROW><ROW><id>5484113</id><snippet>yesterday()</snippet></ROW><ROW><id>5484129</id><snippet> x.updateTwitterStatus({"url": "http://xxxx.com/?cat=31", "msg": "See some strings..., "})
</snippet></ROW><ROW><id>5484129</id><snippet>{...}</snippet></ROW><ROW><id>5484129</id><snippet>[...]</snippet></ROW><ROW><id>5484372</id><snippet>Var[:Var.index(';')]
</snippet></ROW><ROW><id>5484393</id><snippet>&gt;&gt;&gt; class Tester(object):
...   def mymethod(self):
...     return True
... 
&gt;&gt;&gt; hasattr(Tester, 'mymethod')
True
&gt;&gt;&gt; hasattr(Tester.mymethod, 'im_func')
True
</snippet></ROW><ROW><id>5484393</id><snippet>Special read-only attributes: im_self is the class instance object, im_func is the function object; im_class is the class of im_self for bound methods or the class that asked for the method for unbound methods; __doc__ is the method’s documentation (same as im_func.__doc__); __name__ is the method name (same as im_func.__name__); __module__ is the name of the module the method was defined in, or None if unavailable.</snippet></ROW><ROW><id>5484393</id><snippet>__func__</snippet></ROW><ROW><id>5484393</id><snippet>__self__</snippet></ROW><ROW><id>5484459</id><snippet>def a():
    print aa

def b():
    global aa
    aa = 'aaaa'
    a()

b()
</snippet></ROW><ROW><id>5484459</id><snippet>def a(aa):
    print aa

def b():
    aa = 'aaaa'
    a(aa)

b()
</snippet></ROW><ROW><id>5484964</id><snippet>heapq</snippet></ROW><ROW><id>5484964</id><snippet>list</snippet></ROW><ROW><id>5484964</id><snippet>remove()</snippet></ROW><ROW><id>5484964</id><snippet>heapify()</snippet></ROW><ROW><id>5484964</id><snippet># Create example data and heapify
a = range(10)
a.reverse()
heapq.heapify(a)
print a

# remove an element and heapify again
a.remove(5)
heapq.heapify(a)
print a
</snippet></ROW><ROW><id>5484964</id><snippet>heapify._siftup()</snippet></ROW><ROW><id>5484964</id><snippet>list.remove()</snippet></ROW><ROW><id>5485178</id><snippet>all_pics = [(d, f)
            for d in os.listdir(pics)
            for f in os.listdir(os.path.join(pics, d))]
</snippet></ROW><ROW><id>5485178</id><snippet>NameError</snippet></ROW><ROW><id>5485178</id><snippet>d</snippet></ROW><ROW><id>5485381</id><snippet>enquiry_limit</snippet></ROW><ROW><id>5485381</id><snippet>hotels = Hotel.objects.select_related().exclude(
    Q(subscriptions__end_date__lte=datetime.date.today()))

self.premium_hotels = []
for h in hotels:
    for sub in h.subscriptions.filter(start_date__lte=datetime.now(), end_date__gte=datetime.now()):
        if sub.enquiry_count &lt; sub.tier.enquiry_limit:
            self.premium_hotels.append(h)
            break
</snippet></ROW><ROW><id>5485597</id><snippet>for col in res:
    tmp_tot = float(col[7])
    tot.append(tmp_tot)
</snippet></ROW><ROW><id>5485749</id><snippet>from subprocess import Popen, PIPE, STDOUT
shell_command = 'bash -i -c "history -r; history"'
event = Popen(shell_command, shell=True, stdin=PIPE, stdout=PIPE, 
    stderr=STDOUT)

output = event.communicate()
</snippet></ROW><ROW><id>5485901</id><snippet>[ x for x, y in mydict.items() if y &gt; 42 ]</snippet></ROW><ROW><id>5486107</id><snippet>STARTF_USESHOWWINDOW</snippet></ROW><ROW><id>5486107</id><snippet>win32con</snippet></ROW><ROW><id>5486285</id><snippet>numpy</snippet></ROW><ROW><id>5486285</id><snippet>numpy.nan</snippet></ROW><ROW><id>5486340</id><snippet>import uwsgi

def myconnect(...):

global_connection = ...

uwsgi.post_fork_hook = myconnect
</snippet></ROW><ROW><id>5486358</id><snippet>def modexp ( g, u, p )
    s = 1
    while u != 0
        puts "g: #{g}, s: #{s}, u: #{u.to_s(2)}"
        if u &amp; 1
            s = (s * g)%p
        end
        u &gt;&gt;= 1
        g = (g * g)%p
    end
    return s
end

irb(main):032:0&gt; modexp(96,25,17)
g: 96, s: 1, u: 11001
g: 2, s: 11, u: 1100
g: 4, s: 5, u: 110
g: 16, s: 3, u: 11
g: 1, s: 14, u: 1
=&gt; 14
</snippet></ROW><ROW><id>5486358</id><snippet>s</snippet></ROW><ROW><id>5486358</id><snippet>u</snippet></ROW><ROW><id>5486358</id><snippet>1100 = 12</snippet></ROW><ROW><id>5486358</id><snippet>12 &amp; 1 == 0</snippet></ROW><ROW><id>5486358</id><snippet>if u &amp; 1:</snippet></ROW><ROW><id>5486358</id><snippet>if u &amp; 1</snippet></ROW><ROW><id>5486358</id><snippet>if u &amp; 1 != 0</snippet></ROW><ROW><id>5486383</id><snippet>    started = False
    while True:
        if (time.time() - start &gt; wait_for) or started:
            break
        (rlist, wlist, xlist) = select([proc.stdout], [], [], wait_interval)
        if len(rlist) &gt; 0:
            line = rlist[0].readline() # read one line (this blocks until '\n' is read)
        else: # nothing available to read from proc.stdout
            print ".",
            sys.stdout.flush()
            time.sleep(1)
            continue
        if re.search("daemon started", line):
            started = True

    if not started:
        proc.kill() # don't leave the process running if it didn't start properly
</snippet></ROW><ROW><id>5486465</id><snippet>timeit</snippet></ROW><ROW><id>5486465</id><snippet>timeit.timeit('x = 10; y = 100; z = x ** y')
</snippet></ROW><ROW><id>5486465</id><snippet>10*100000</snippet></ROW><ROW><id>5486820</id><snippet>cmd.exe</snippet></ROW><ROW><id>5486820</id><snippet>cmd.exe</snippet></ROW><ROW><id>5486820</id><snippet>cmd.exe</snippet></ROW><ROW><id>5486820</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; proc = subprocess.Popen('cmd.exe', stdin = subprocess.PIPE, stdout = subprocess.PIPE)
&gt;&gt;&gt; stdout, stderr = proc.communicate('dir c:\\')
&gt;&gt;&gt; stdout
'Microsoft Windows [Version 6.1.7600]\r\nCopyright (c) 2009 Microsoft Corporatio
n.  All rights reserved.\r\n\r\nC:\\Python25&gt;More? '
</snippet></ROW><ROW><id>5486901</id><snippet>$ time python -c 'import wx'

real    0m1.646s
user    0m0.306s
sys     0m0.079s
</snippet></ROW><ROW><id>5486980</id><snippet>handlers:
- url: /public
  static_dir: public
</snippet></ROW><ROW><id>5487005</id><snippet>ax2.legend(loc=0)
</snippet></ROW><ROW><id>5487005</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
rc('mathtext', default='regular')

time = np.arange(10)
temp = np.random.random(10)*30
Swdown = np.random.random(10)*100-10
Rn = np.random.random(10)*100-10

fig = plt.figure()
ax = fig.add_subplot(111)

lns1 = ax.plot(time, Swdown, '-', label = 'Swdown')
lns2 = ax.plot(time, Rn, '-', label = 'Rn')
ax2 = ax.twinx()
lns3 = ax2.plot(time, temp, '-r', label = 'temp')

# added these three lines
lns = lns1+lns2+lns3
labs = [l.get_label() for l in lns]
ax.legend(lns, labs, loc=0)

ax.grid()
ax.set_xlabel("Time (h)")
ax.set_ylabel(r"Radiation ($MJ\,m^{-2}\,d^{-1}$)")
ax2.set_ylabel(r"Temperature ($^\circ$C)")
ax2.set_ylim(0, 35)
ax.set_ylim(-20,100)
plt.show()
</snippet></ROW><ROW><id>5487290</id><snippet>while True:
            print "\n--------"
            room = getattr(self, next)
            next = room()
</snippet></ROW><ROW><id>5487290</id><snippet>getattr()</snippet></ROW><ROW><id>5487290</id><snippet>next = room()</snippet></ROW><ROW><id>5487492</id><snippet>a</snippet></ROW><ROW><id>5487492</id><snippet>ii = np.nonzero(a == 4)
</snippet></ROW><ROW><id>5487492</id><snippet>ii = np.where(a == 4)
</snippet></ROW><ROW><id>5487492</id><snippet>tuple(zip(*ii))
</snippet></ROW><ROW><id>5487772</id><snippet>from elixir import *

metadata.bind = "sqlite:///"

class Regions(Entity):    
    regionname = Field(String(255))

class Location(Entity):    
    region = ManyToOne('Regions')

setup_all()
create_all()

#Create the region names:
na_temp = Regions(regionname="North America")
sa_temp = Regions(regionname="South America")
ca_temp = Regions(regionname="Central America")
ap_temp = Regions(regionname="Asia/Pacific Islands")
session.commit()

#Create links to each region in the location table:
northamerica = Location(region=na_temp)
southamerica = Location(region=sa_temp)
centamerica = Location(region=ca_temp)
asiapacific = Location(region=ap_temp)
anotherarea = Location(region=sa_temp)
yetanotherarea = Location(region=na_temp)
session.commit()

#Get all items from the Location table:
locations = Location.query.all()

#Display the contents of the Location table, and lookup the name from the Regions table
for place in locations:
    print "Location table id: {}".format(place.region_id)    
    print "Lookup region name: {}".format(Regions.get_by(id=place.region_id).regionname)
    print
</snippet></ROW><ROW><id>5487774</id><snippet>class DBFactory(object):
    def DBConnection(self, Func, args):
        database      = sqlite3.connect('database.db') # Create a database file
        cursor        = database.cursor() # Create a cursor

        Func(cursor, args)

        database.commit() # Save our changes
        database.close() # Close the connection to the database
</snippet></ROW><ROW><id>5487774</id><snippet>Func</snippet></ROW><ROW><id>5487774</id><snippet>args</snippet></ROW><ROW><id>5487774</id><snippet>def CreateTable(cursor, args):
    cursor.execute("CREATE TABLE IF NOT EXISTS {0};".format(args)) # Make a table
</snippet></ROW><ROW><id>5487774</id><snippet>f = DBFactory()
f.DBConnection(CreateTable, "twitter(id_tweet INTEGER AUTO_INCREMENT PRIMARY KEY, tweet TEXT, timestamp TEXT)"
</snippet></ROW><ROW><id>5487774</id><snippet>DBConnection</snippet></ROW><ROW><id>5487821</id><snippet>INSERT INTO account (interest_rate) values ('')
</snippet></ROW><ROW><id>5487821</id><snippet>INSERT INTO account (interest_rate) values (NULL)
</snippet></ROW><ROW><id>5487984</id><snippet>virtualenv &lt;path&gt; --no-site-packages --python=python2.6 --clear</snippet></ROW><ROW><id>5487984</id><snippet>--clear</snippet></ROW><ROW><id>5487984</id><snippet>rm -rf</snippet></ROW><ROW><id>5488187</id><snippet>getattr</snippet></ROW><ROW><id>5488187</id><snippet>getattr(o, "A")(1)
</snippet></ROW><ROW><id>5488187</id><snippet>o.A(1)
</snippet></ROW><ROW><id>5488342</id><snippet>textInterface</snippet></ROW><ROW><id>5488342</id><snippet>main()</snippet></ROW><ROW><id>5488342</id><snippet>HangmanApp.__init__()</snippet></ROW><ROW><id>5488342</id><snippet>self.interface = interface
</snippet></ROW><ROW><id>5488342</id><snippet>self.interface = textInterface()
</snippet></ROW><ROW><id>5488342</id><snippet>HangmanApp.guess()</snippet></ROW><ROW><id>5488342</id><snippet>else:</snippet></ROW><ROW><id>5488342</id><snippet>guess</snippet></ROW><ROW><id>5488351</id><snippet>a</snippet></ROW><ROW><id>5488351</id><snippet>my_list</snippet></ROW><ROW><id>5488351</id><snippet>any((a == x).all() for x in my_list)
</snippet></ROW><ROW><id>5488465</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>5488465</id><snippet>filesystem</snippet></ROW><ROW><id>5488465</id><snippet>app_directories</snippet></ROW><ROW><id>5488564</id><snippet>a = numpy.array([[0, 1, 2],
                 [3, 4, 5],
                 [0, 1, 2]])
</snippet></ROW><ROW><id>5488564</id><snippet>row = numpy.array([0, 1, 2])
</snippet></ROW><ROW><id>5488564</id><snippet>indices, = (a != row).any(1).nonzero()
</snippet></ROW><ROW><id>5488564</id><snippet>a != row</snippet></ROW><ROW><id>5488564</id><snippet>a</snippet></ROW><ROW><id>5488564</id><snippet>row</snippet></ROW><ROW><id>5488564</id><snippet>a</snippet></ROW><ROW><id>5488564</id><snippet>any()</snippet></ROW><ROW><id>5488564</id><snippet>row</snippet></ROW><ROW><id>5488564</id><snippet>nonzero()</snippet></ROW><ROW><id>5488801</id><snippet>#pseudo-code
for image_file in image_files:
    image, created = Image.objects.get_or_create(hash=the_hash, \
        defaults={'image' : 'path/to/image', 'hash' : the_hash)
</snippet></ROW><ROW><id>5488891</id><snippet>class Dynamic:
    def __getitem__(self, name):
        return getattr(self, name)

    def __setitem__(self, name, value):
        setattr(self, name, value)

    def __delitem__(self, name):
        delattr(self, name)

    def __iter__(self):
        return self.__dict__.__iter__()
</snippet></ROW><ROW><id>5488891</id><snippet>dynamicInstance = Dynamic()
dynamicInstance.newProperty = 'newValue'
dynamicInstance['otherProperty'] = 'otherValue'

print [(name, dynamicInstance[name]) for name in dynamicInstance]

del dynamicInstance['newProperty']

print [(name, dynamicInstance[name]) for name in dynamicInstance]

del dynamicInstance.otherProperty

print [(name, dynamicInstance[name]) for name in dynamicInstance]

#output:
# [('otherProperty', 'otherValue'), ('newProperty', 'newValue')]
# [('otherProperty', 'otherValue')]
# []
</snippet></ROW><ROW><id>5489058</id><snippet>&gt;&gt;&gt; f = open("x.txt")
&gt;&gt;&gt; f.__enter__
&lt;built-in method __enter__ of file object at 0x022E4E90&gt;
</snippet></ROW><ROW><id>5489058</id><snippet>__enter__</snippet></ROW><ROW><id>5489058</id><snippet>Objects/fileobject.c</snippet></ROW><ROW><id>5489058</id><snippet>f.__enter__</snippet></ROW><ROW><id>5489058</id><snippet>f</snippet></ROW><ROW><id>5489058</id><snippet>__enter__</snippet></ROW><ROW><id>5489058</id><snippet>__enter__</snippet></ROW><ROW><id>5489058</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.localcontext().__enter__
&lt;bound method _ContextManager.__enter__ of &lt;decimal._ContextManager object at 0x02192B50&gt;&gt;
</snippet></ROW><ROW><id>5489058</id><snippet>import dis
dis.dis(decimal.localcontext().__enter__)
</snippet></ROW><ROW><id>5489058</id><snippet>import inspect
print inspect.getsource(decimal.localcontext().__enter__)
</snippet></ROW><ROW><id>5489228</id><snippet>update</snippet></ROW><ROW><id>5489228</id><snippet>update["msg"]</snippet></ROW><ROW><id>5489228</id><snippet>update</snippet></ROW><ROW><id>5489228</id><snippet>update        = update["msg"][0:int(count_message)]
</snippet></ROW><ROW><id>5489228</id><snippet>update</snippet></ROW><ROW><id>5489228</id><snippet>dict</snippet></ROW><ROW><id>5489228</id><snippet>update["msg"]</snippet></ROW><ROW><id>5489228</id><snippet>print(type(update))
</snippet></ROW><ROW><id>5489228</id><snippet>print(repr(update))
</snippet></ROW><ROW><id>5489315</id><snippet>hxs.select('//p/@foruri').extract()
</snippet></ROW><ROW><id>5489444</id><snippet>pdb</snippet></ROW><ROW><id>5489444</id><snippet>jar</snippet></ROW><ROW><id>5489444</id><snippet>classpath</snippet></ROW><ROW><id>5489444</id><snippet>$GROOVY_HOME/lib</snippet></ROW><ROW><id>5489444</id><snippet>~/.groovy/lib</snippet></ROW><ROW><id>5489444</id><snippet>@Grab</snippet></ROW><ROW><id>5489492</id><snippet>ser.readline()</snippet></ROW><ROW><id>5489492</id><snippet>ser = serial.Serial('/dev/ttyUSB0',9600)
ser.open()
while 1:
  line = ser.readline()
  if line != "":
    db.data.insert({"Light" : line, "Ts" : time()})
ser.close()
</snippet></ROW><ROW><id>5489561</id><snippet>map</snippet></ROW><ROW><id>5489561</id><snippet>itertools.takewhile(lambda y: y != NO_VALUE, (f(y) for y in yvals))</snippet></ROW><ROW><id>5489561</id><snippet>list</snippet></ROW><ROW><id>5489561</id><snippet>except ValueError:
    raise StopIteration
</snippet></ROW><ROW><id>5489561</id><snippet>map</snippet></ROW><ROW><id>5489570</id><snippet>import difflib

L_1 = ["Bob", "Mary", "Hans"]
L_2 = ["Bob", "Marie", "Hans"]

def similiarity(L_1, L_2):
    L_1 = set(intern(w) for w in L_1)
    L_2 = set(intern(w) for w in L_2)

    to_match = L_1.difference( L_2)
    against = L_2.difference(L_1)
    for w in to_match:
        res = difflib.get_close_matches(w, against)
        if len(res):
            against.remove( res[0] )
    return (len(L_2)-len(against)) / (len(L_1))

print similiarity(L_1,L_2)
</snippet></ROW><ROW><id>5489604</id><snippet>sys.platform</snippet></ROW><ROW><id>5489604</id><snippet>os.name</snippet></ROW><ROW><id>5489621</id><snippet>search()</snippet></ROW><ROW><id>5489621</id><snippet>re.search(pattern, mystring)
</snippet></ROW><ROW><id>5489621</id><snippet>r</snippet></ROW><ROW><id>5489621</id><snippet>pattern = r'define\(([a-zA-Z_]\w*)\)'
</snippet></ROW><ROW><id>5489833</id><snippet>db.execute("create table if not exists table2 (names text,my_id integer, FOREIGN KEY(my_id) REFERENCES maintable (id))")
</snippet></ROW><ROW><id>5489931</id><snippet>login_required</snippet></ROW><ROW><id>5489931</id><snippet>func_dict</snippet></ROW><ROW><id>5489931</id><snippet>from django.contrib.auth.decorators import login_required as django_l_r

# Here you're defining your own decorator called `login_required`
# it uses Django's built in `login_required` decorator
def login_required(func):
    decorated_func = django_l_r(func)
    decorated_func.func_dict['login_is_required'] = True
    return decorated_func

@login_required # Your decorator
def authenticatedd_view(request):
    pass

def unauthenticated_view(request):
    pass
</snippet></ROW><ROW><id>5489931</id><snippet># Assume `a_view` is view function
&gt;&gt;&gt; a_view.func_dict.get('login_is_required',False)
</snippet></ROW><ROW><id>5490145</id><snippet>collections.Counter</snippet></ROW><ROW><id>5490145</id><snippet>from collections import Counter
counts = Counter((k[1], v) for k, v in dictA.iteritems())
print(counts)
</snippet></ROW><ROW><id>5490145</id><snippet>Counter({('test1', 'alpha'): 2, ('test2', 'gamma'): 2, ('test2', 'beta'): 1, ('test1', 'delta'): 1})
</snippet></ROW><ROW><id>5491460</id><snippet>file.readlines([size])</snippet></ROW><ROW><id>5491460</id><snippet>read()</snippet></ROW><ROW><id>5491460</id><snippet>size</snippet></ROW><ROW><id>5491460</id><snippet>read()</snippet></ROW><ROW><id>5491460</id><snippet>file.readlines([size])</snippet></ROW><ROW><id>5491460</id><snippet>os.read(fd, size)</snippet></ROW><ROW><id>5491460</id><snippet>os.read</snippet></ROW><ROW><id>5491460</id><snippet>stderr</snippet></ROW><ROW><id>5491460</id><snippet>import os
import select
import subprocess
from cStringIO import StringIO

target = 'Engine'
PIPE = subprocess.PIPE
engine = subprocess.Popen(target, bufsize=0, stdin=PIPE, stdout=PIPE, stderr=PIPE)
engine.stdin.write(b"go\n")
engine.stdin.flush()

class LineReader(object):

    def __init__(self, fd):
        self._fd = fd
        self._buf = ''

    def fileno(self):
        return self._fd

    def readlines(self):
        data = os.read(self._fd, 4096)
        if not data:
            # EOF
            return None
        self._buf += data
        if '\n' not in data:
            return []
        tmp = self._buf.split('\n')
        lines, self._buf = tmp[:-1], tmp[-1]
        return lines

proc_stdout = LineReader(engine.stdout.fileno())
proc_stderr = LineReader(engine.stderr.fileno())
readable = [proc_stdout, proc_stderr]

while readable:
    ready, _, _ = select.select(readable, [], [], 10.0)
    if not ready:
        continue
    for stream in ready:
        lines = stream.readlines()
        if lines is None:
            # got EOF on this stream
            readable.remove(stream)
            continue
        for line in lines:
            print line
</snippet></ROW><ROW><id>5491653</id><snippet>typedef boost::function&lt;boost::shared_ptr&lt;Object&gt; (CL_DomElement*, std::string&amp; desc)&gt; Parser;
void registerParser(std::string type, Parser p);

struct ParserProxy
{
    bp::object callable;

    ParserProxy(bp::object callable)
    : callable(callable)
    { }

    boost::shared_ptr&lt;Object&gt; operator()(CL_DomElement* elem, std::string&amp; desc)
    {
        bp::object obj = callable(elem, desc);
        return bp::extract&lt;boost::shared_ptr&lt;Object&gt; &gt;(obj);
    }
};

void registerParserByProxy(std::string type, bp::object callable)
{
    registerParser(type, ParserProxy(callable));
}

// Later: exporting into python-module:
BOOST_PYTHON_MODULE(TypesManager)
{
        bp::def("RegisterParser", registerParserByProxy);
}
</snippet></ROW><ROW><id>5491705</id><snippet>import pytz
import datetime as dt

utc=pytz.utc
eastern=pytz.timezone('US/Eastern')
fmt='%Y-%m-%d %H:%M:%S %Z%z'

text='''\
10/1/2010   0:0:0
10/1/2010   0:6:0
10/1/2010   23:54:0
10/3/2010   0:0:0
'''

for datestring in text.splitlines():
    date=dt.datetime.strptime(datestring,"%m/%d/%Y %H:%M:%S")
    date_eastern=eastern.localize(date,is_dst=None)
    date_utc=date_eastern.astimezone(utc)
    print(date_utc.strftime(fmt))
</snippet></ROW><ROW><id>5491705</id><snippet>2010-10-01 04:00:00 UTC+0000
2010-10-01 04:06:00 UTC+0000
2010-10-02 03:54:00 UTC+0000
2010-10-03 04:00:00 UTC+0000
</snippet></ROW><ROW><id>5491705</id><snippet>&gt;&gt;&gt; eastern.localize(datetime(2002, 10, 27, 1, 30, 00), is_dst=None)
AmbiguousTimeError: 2002-10-27 01:30:00
</snippet></ROW><ROW><id>5491705</id><snippet>pytz</snippet></ROW><ROW><id>5491705</id><snippet>dt.datetime.utcfromtimestamp(time.mktime(date.timetuple()))
</snippet></ROW><ROW><id>5491705</id><snippet>import time
import datetime as dt
import pytz

utc=pytz.utc
eastern=pytz.timezone('US/Eastern')
fmt='%Y-%m-%d %H:%M:%S %Z%z'

text='''\
10/1/2010   0:0:0
10/1/2010   0:6:0
10/1/2010   23:54:0
10/3/2010   0:0:0
3/13/2011   1:55:0
3/13/2011   3:00:0
'''
for datestring in text.splitlines():
    date=dt.datetime.strptime(datestring,"%m/%d/%Y %H:%M:%S")
    date_est=eastern.localize(date,is_dst=None)
    date_utc=date_est.astimezone(utc)
    date_utc2=dt.datetime.utcfromtimestamp(time.mktime(date.timetuple()))
    print('{d} --&gt; {d_utc}    {d_utc2}'.format(
        d=date.strftime(fmt),
        d_utc=date_utc.strftime(fmt),
        d_utc2=date_utc2.strftime(fmt),
        ))
    assert date_utc.hour == date_utc2.hour
</snippet></ROW><ROW><id>5491705</id><snippet>2010-10-01 00:00:00 EDT-0400 --&gt; 2010-10-01 04:00:00 UTC+0000    2010-10-01 04:00:00 
2010-10-01 00:06:00 EDT-0400 --&gt; 2010-10-01 04:06:00 UTC+0000    2010-10-01 04:06:00 
2010-10-01 23:54:00 EDT-0400 --&gt; 2010-10-02 03:54:00 UTC+0000    2010-10-02 03:54:00 
2010-10-03 00:00:00 EDT-0400 --&gt; 2010-10-03 04:00:00 UTC+0000    2010-10-03 04:00:00 
2011-03-13 01:55:00 EST-0500 --&gt; 2011-03-13 06:55:00 UTC+0000    2011-03-13 06:55:00 
2011-03-13 03:00:00 EDT-0400 --&gt; 2011-03-13 07:00:00 UTC+0000    2011-03-13 07:00:00 
</snippet></ROW><ROW><id>5491705</id><snippet>In [83]: import datetime as dt
In [84]: import time
In [85]: import calendar

In [86]: date=dt.datetime(2010,12,1,0,0,0)    
In [87]: date
Out[87]: datetime.datetime(2010, 12, 1, 0, 0)

In [88]: date_utc=dt.datetime.utcfromtimestamp(time.mktime(date.timetuple()))    
In [89]: date_utc
Out[89]: datetime.datetime(2010, 12, 1, 5, 0)

In [90]: date_local=dt.datetime.fromtimestamp(calendar.timegm(date_utc.timetuple()))    
In [91]: date_local
Out[91]: datetime.datetime(2010, 12, 1, 0, 0)
</snippet></ROW><ROW><id>5491962</id><snippet>import re 

def sort_nicely( l ): 
  """ Sort the given list in the way that humans expect. 
  """ 
  convert = lambda text: int(text) if text.isdigit() else text 
  alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
  l.sort( key=alphanum_key ) 
</snippet></ROW><ROW><id>5492088</id><snippet>nosetests --cover-package=&lt;name&gt;</snippet></ROW><ROW><id>5492166</id><snippet>\r</snippet></ROW><ROW><id>5492166</id><snippet>\n</snippet></ROW><ROW><id>5492166</id><snippet>import time
import sys
sys.stdout.write('29 seconds remaining')
time.sleep(1)
sys.stdout.write('\r28 seconds remaining')
</snippet></ROW><ROW><id>5492166</id><snippet>print</snippet></ROW><ROW><id>5492166</id><snippet>stdout</snippet></ROW><ROW><id>5492620</id><snippet>&gt;&gt;&gt; text = """I want to find url this "http://www.google.com" or "http://mail.yahoo.com.uk" from a string.

I tried different exprs but no one correct. Could anyone help me? Thanks
"""
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search( '(http://www\\.google\\.com)', text )
&lt;_sre.SRE_Match object at 0x02183060&gt;
&gt;&gt;&gt; _.groups()
('http://www.google.com',)
&gt;&gt;&gt; re.search( '(http://mail\\.yahoo\\.com\\.uk)', text )
&lt;_sre.SRE_Match object at 0x021830A0&gt;
&gt;&gt;&gt; _.groups()
('http://mail.yahoo.com.uk',)
&gt;&gt;&gt; re.findall( '(http://[^"\' ]+)', text )
['http://www.google.com"', 'http://mail.yahoo.com.uk"']
</snippet></ROW><ROW><id>5492738</id><snippet>with open("file.csv","r") as f:
    t=[line.strip().split(";")[:2] for line in f]
</snippet></ROW><ROW><id>5492819</id><snippet>f.read()</snippet></ROW><ROW><id>5492819</id><snippet>chunk = f.read(4096)</snippet></ROW><ROW><id>5492998</id><snippet>locations</snippet></ROW><ROW><id>5492998</id><snippet>locations = [
    u"15°47'S 47°55'W",
    u"21º 18' N, 157º 51' W",
    u"32°46′58″N 96°48′14″W",
]
</snippet></ROW><ROW><id>5493078</id><snippet>re.search('(com)|(org)',domain).span()[0]
</snippet></ROW><ROW><id>5493196</id><snippet>open</snippet></ROW><ROW><id>5493196</id><snippet>for filename in files:
    print(filename)
    for filelineno, line in enumerate(open(filename, encoding="utf-8")):
        line = line.strip()
        data = line.split('\t')
        # ...
</snippet></ROW><ROW><id>5493360</id><snippet>string.rfind()</snippet></ROW><ROW><id>5493360</id><snippet>"fdfdfd.dfdfd.dfdfdf.dfdfdf".rfind('.')
</snippet></ROW><ROW><id>5493539</id><snippet>A</snippet></ROW><ROW><id>5493539</id><snippet>Foo</snippet></ROW><ROW><id>5493539</id><snippet>A = Foo(args)
B = A
</snippet></ROW><ROW><id>5493539</id><snippet>A</snippet></ROW><ROW><id>5493539</id><snippet>B</snippet></ROW><ROW><id>5493539</id><snippet>globals()</snippet></ROW><ROW><id>5493539</id><snippet>A</snippet></ROW><ROW><id>5493539</id><snippet>B</snippet></ROW><ROW><id>5493539</id><snippet>del A</snippet></ROW><ROW><id>5493539</id><snippet>A</snippet></ROW><ROW><id>5493632</id><snippet>set_server_proxy()</snippet></ROW><ROW><id>5493632</id><snippet>Py_Finalize()</snippet></ROW><ROW><id>5493632</id><snippet>say_hi()</snippet></ROW><ROW><id>5493632</id><snippet>PyErr_Occurred()</snippet></ROW><ROW><id>5493632</id><snippet>NULL</snippet></ROW><ROW><id>5493632</id><snippet>main()</snippet></ROW><ROW><id>5493632</id><snippet>int main()
{
    Py_Initialize();
    xmlrpc_server_proxy = set_server_proxy();
    say_hi();
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>5493632</id><snippet>xmlrpclib.ServerProxy</snippet></ROW><ROW><id>5493632</id><snippet>xmlrpc_client_mod = PyImport_ImportModule("xmlrpclib");
</snippet></ROW><ROW><id>5493679</id><snippet>lxml.html</snippet></ROW><ROW><id>5493679</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5493679</id><snippet>import lxml.html
import csv

doc = lxml.html.parse('http://finance.yahoo.com/q/os?s=lly&amp;m=2011-04-15')
# find the first table contaning any tr with a td with class yfnc_tabledata1
table = doc.xpath("//table[tr/td[@class='yfnc_tabledata1']]")[0]

with open('results.csv', 'wb') as f:
    cf = csv.writer(f)
    # find all trs inside that table:
    for tr in table.xpath('./tr'):
        # add the text of all tds inside each tr to a list
        row = [td.text_content().strip() for td in tr.xpath('./td')]
        # write the list to the csv file:
        cf.writerow(row)
</snippet></ROW><ROW><id>5493679</id><snippet>lxml.html</snippet></ROW><ROW><id>5493679</id><snippet>results.csv</snippet></ROW><ROW><id>5493679</id><snippet>LLY110416C00017500,N/A,0.00,17.05,18.45,0,0,17.50,LLY110416P00017500,0.01,0.00,N/A,0.03,0,182
LLY110416C00020000,15.70,0.00,14.55,15.85,0,0,20.00,LLY110416P00020000,0.06,0.00,N/A,0.03,0,439
LLY110416C00022500,N/A,0.00,12.15,12.80,0,0,22.50,LLY110416P00022500,0.01,0.00,N/A,0.03,2,50
</snippet></ROW><ROW><id>5493790</id><snippet>None</snippet></ROW><ROW><id>5493790</id><snippet>a</snippet></ROW><ROW><id>5493790</id><snippet>a = a.append(each.answer)
</snippet></ROW><ROW><id>5493790</id><snippet>a.append(each.answer)
</snippet></ROW><ROW><id>5494367</id><snippet>python manage.py shell
&gt;&gt;&gt; from app.templatetags import current_tags
</snippet></ROW><ROW><id>5494367</id><snippet>current_tags.py</snippet></ROW><ROW><id>5494767</id><snippet>nitf-3-4.dtd</snippet></ROW><ROW><id>5494767</id><snippet>xhtml-ruby-1.mod</snippet></ROW><ROW><id>5494767</id><snippet>% wget http://www.iptc.org/std/NITF/3.4/specification/dtd/nitf-3-4.dtd
% wget http://www.iptc.org/std/NITF/3.4/specification/dtd/xhtml-ruby-1.mod
</snippet></ROW><ROW><id>5494767</id><snippet>from lxml import etree, objectify
dtd = etree.DTD(open('nitf-3-4.dtd', 'rb'))
tree = objectify.parse(open('nitf_test.xml', 'rb'))
print dtd.validate(tree)
</snippet></ROW><ROW><id>5494767</id><snippet>% python nitf_test.py
True
</snippet></ROW><ROW><id>5494823</id><snippet>sudo apt-get install python-libtorrent</snippet></ROW><ROW><id>5494823</id><snippet>import libtorrent as lt
import time
import sys

ses = lt.session()
ses.listen_on(6881, 6891)

info = lt.torrent_info(sys.argv[1])
h = ses.add_torrent({'ti': info, 'save_path': './'})
print 'starting', h.name()

while (not h.is_seed()):
   s = h.status()

   state_str = ['queued', 'checking', 'downloading metadata', \
      'downloading', 'finished', 'seeding', 'allocating', 'checking fastresume']
   print '\r%.2f%% complete (down: %.1f kb/s up: %.1f kB/s peers: %d) %s' % \
      (s.progress * 100, s.download_rate / 1000, s.upload_rate / 1000, \
      s.num_peers, state_str[s.state]),
   sys.stdout.flush()

   time.sleep(1)

print h.name(), 'complete'
</snippet></ROW><ROW><id>5494895</id><snippet>regroup</snippet></ROW><ROW><id>5494895</id><snippet>food = Food.objects.all()

{% regroup food by food_type as food_list %}

&lt;ul&gt;
{% for food_type in food_list %}
    &lt;li&gt;{{ food_type.grouper }}
    &lt;ul&gt;
        {% for item in food_type.list %}
        &lt;li&gt;{{ item }}&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>5495049</id><snippet>results = MyModel.all().filter('foo =', 'bar').fetch(20)
</snippet></ROW><ROW><id>5495049</id><snippet>results = MyModel.all(keys_only=True).filter('foo =', 'bar').fetch(20)
</snippet></ROW><ROW><id>5495318</id><snippet># Create the big lists in advance to avoid skewing the memory counts
seq1 = [None] * 10**6 # Big list of references to None
seq2 = seq1[::10]

# Create and reference a lot of smaller lists
seq1[:] = [[] for x in range(10**6)] # References all the new lists
seq2[:] = seq1[::10] # Grab a second reference to 10% of the new lists

# Memory fragmentation in action
seq1[:] = [None] * 10**6 # 90% of the lists are no longer referenced here
seq2[:] = seq1[::10] # But memory freed only after last 10% are dropped
</snippet></ROW><ROW><id>5495318</id><snippet>seq1</snippet></ROW><ROW><id>5495318</id><snippet>seq2</snippet></ROW><ROW><id>5495334</id><snippet>django-registration</snippet></ROW><ROW><id>5495334</id><snippet>documentation</snippet></ROW><ROW><id>5495334</id><snippet>1. Providing default templates with an application is generally
   hard to impossible, because different sites can have such
   wildly different design and template structure. Any attempt to
   provide templates which would work with all the possibilities
   would probably end up working with none of them.

2. A number of things in django-registration depend on the
   specific :ref:`registration backend &lt;backend-api&gt;` you use,
   including the variables which end up in template
   contexts. Since django-registration has no way of knowing in
   advance what backend you're going to be using, it also has no
   way of knowing what your templates will need to look like.

Fortunately, however, django-registration has good documentation
which explains what context variables will be available to
templates, and so it should be easy for anyone who knows Django's
template system to create templates which integrate with their own
site.
</snippet></ROW><ROW><id>5495418</id><snippet>py2exe</snippet></ROW><ROW><id>5495418</id><snippet>Disutils</snippet></ROW><ROW><id>5495418</id><snippet>python setup.py install</snippet></ROW><ROW><id>5495418</id><snippet>py2exe</snippet></ROW><ROW><id>5495418</id><snippet>cmd</snippet></ROW><ROW><id>5495418</id><snippet>python setup.py py2exe</snippet></ROW><ROW><id>5495418</id><snippet>setup.py</snippet></ROW><ROW><id>5495436</id><snippet>sum(a * b for a, b in zip(list1, list2)) / sum(list1)
</snippet></ROW><ROW><id>5495436</id><snippet>numpy</snippet></ROW><ROW><id>5495436</id><snippet>from numpy import dot
dot(list1, list2) / sum(list1)
</snippet></ROW><ROW><id>5495459</id><snippet>from django.test import Client
import base64
auth_headers = {
    'HTTP_AUTHORIZATION': 'Basic ' + base64.b64encode('username:password'),
}
c = Client()
response = c.get('/my-protected-url/', **auth_headers)
</snippet></ROW><ROW><id>5495556</id><snippet>&gt;&gt;&gt; flags = dict.fromkeys(["a", "b", "c"], True)
&gt;&gt;&gt; flags.update(dict.fromkeys(["d", "e"], False))
&gt;&gt;&gt; print flags
{'a': True, 'c': True, 'b': True, 'e': False, 'd': False}
</snippet></ROW><ROW><id>5495556</id><snippet>&gt;&gt;&gt; flags = dict(dict.fromkeys(["a", "b", "c"], True),
...              **dict.fromkeys(["d", "e"], False))
&gt;&gt;&gt; print flags
{'a': True, 'c': True, 'b': True, 'e': False, 'd': False}
</snippet></ROW><ROW><id>5495556</id><snippet>dict</snippet></ROW><ROW><id>5495556</id><snippet>d=False</snippet></ROW><ROW><id>5495556</id><snippet>**</snippet></ROW><ROW><id>5495556</id><snippet>&lt;/disclaimer&gt;</snippet></ROW><ROW><id>5495556</id><snippet>True</snippet></ROW><ROW><id>5495556</id><snippet>False</snippet></ROW><ROW><id>5495556</id><snippet>&gt;&gt;&gt; def invert_dict(inverted_dict):
...     elements = inverted_dict.iteritems()
...     for flag_value, flag_names in elements:
...         for flag_name in flag_names:
...             yield flag_name, flag_value
... 
&gt;&gt;&gt; flags = {True: ["a", "b", "c"], False: ["d", "e"]}
&gt;&gt;&gt; flags = dict(invert_dict(flags))
&gt;&gt;&gt; print flags
{'a': True, 'c': True, 'b': True, 'e': False, 'd': False}
</snippet></ROW><ROW><id>5495556</id><snippet>invert_dict</snippet></ROW><ROW><id>5495556</id><snippet>flags</snippet></ROW><ROW><id>5495556</id><snippet>dict</snippet></ROW><ROW><id>5495556</id><snippet>dict</snippet></ROW><ROW><id>5495556</id><snippet>&gt;&gt;&gt; flags = {True: 'abc', False: 'de'}
&gt;&gt;&gt; flags = dict(invert_dict(flags))
&gt;&gt;&gt; print flags
{'a': True, 'c': True, 'b': True, 'e': False, 'd': False}
</snippet></ROW><ROW><id>5495556</id><snippet>['a', 'b', 'c']</snippet></ROW><ROW><id>5495556</id><snippet>'abc'</snippet></ROW><ROW><id>5495556</id><snippet>tuple</snippet></ROW><ROW><id>5495556</id><snippet>invert_dict</snippet></ROW><ROW><id>5495587</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; "\x00"+os.urandom(4)+"\x00"
'\x00!\xc0zK\x00'
</snippet></ROW><ROW><id>5495867</id><snippet>import numpy as np

a = np.array([[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11]])
m = np.array([7,6,5,4])

# This is what you need:

np.putmask(a, a &gt;= m, m - 1)

# a is now:

np.array([[0, 1, 2, 3],
          [4, 5, 4, 3],
          [6, 5, 4, 3]])
</snippet></ROW><ROW><id>5495912</id><snippet>ax.scatter(xs, ys, zs, c=cs, marker=m)
</snippet></ROW><ROW><id>5495912</id><snippet>p = ax.scatter(xs, ys, zs, c=cs, marker=m)
</snippet></ROW><ROW><id>5495912</id><snippet>fig.colorbar(p)
</snippet></ROW><ROW><id>5495986</id><snippet>manage.py remote</snippet></ROW><ROW><id>5496033</id><snippet>msg = "Registration Successfull"
msg['Subject'] = 'The contents of %s'
</snippet></ROW><ROW><id>5496033</id><snippet>string</snippet></ROW><ROW><id>5496033</id><snippet>dict</snippet></ROW><ROW><id>5496187</id><snippet>board.objects.filter(run__floor=1)
</snippet></ROW><ROW><id>5496218</id><snippet>wx.lib.mixins.listctrl</snippet></ROW><ROW><id>5496218</id><snippet>import wx
import wx.lib.mixins.listctrl as listmix

class TestListCtrl(wx.ListCtrl, listmix.CheckListCtrlMixin, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, *args, **kwargs):
        wx.ListCtrl.__init__(self, *args, **kwargs)
        listmix.CheckListCtrlMixin.__init__(self)
        listmix.ListCtrlAutoWidthMixin.__init__(self)
        self.setResizeColumn(3)

    def OnCheckItem(self, index, flag):
        print(index, flag)

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.list = TestListCtrl(self.panel, style=wx.LC_REPORT)
        self.list.InsertColumn(0, "No.")
        self.list.InsertColumn(1, "Progress")
        self.list.InsertColumn(2, "Description")
        self.list.Arrange()
        for i in range(1, 6):
            self.list.Append([str(i), "", "It's the %d item" % (i)])        
        self.button = wx.Button(self.panel, label="Test")
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.list, proportion=1, flag=wx.EXPAND | wx.ALL, border=5)
        self.sizer.Add(self.button, flag=wx.EXPAND | wx.ALL, border=5)
        self.panel.SetSizerAndFit(self.sizer)
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>5496296</id><snippet>socket.fileno()</snippet></ROW><ROW><id>5496371</id><snippet>    q = parse.YourModel.gql(YourQuery)
    tlist = []
    tl = q.fetch(1000)
    cursor = q.cursor()
    while len(tl) &gt; 0:
        tlist.extend(tl)
        q = parse.YourModel.gql(YourQuery)
        q.with_cursor(cursor)
        tl = q.fetch(1000)
        cursor = q.cursor()
</snippet></ROW><ROW><id>5496371</id><snippet>tlist</snippet></ROW><ROW><id>5496645</id><snippet>re.split(r'\s*,\s*', string)
#          ^- zero or more whitespace incl. tabs and newlines
# the r'' syntax preserves the backslash from being interpreted
# as escape sequence
</snippet></ROW><ROW><id>5496645</id><snippet>map(str.strip, string.split(','))
#   ^- apply the 'strip' function (~ 'trim' in other languages) to all matches
</snippet></ROW><ROW><id>5496802</id><snippet>print(s)</snippet></ROW><ROW><id>5497070</id><snippet>raise ExceptionClass, "The message string"
</snippet></ROW><ROW><id>5497070</id><snippet>raise ExceptionClass("The message string")
</snippet></ROW><ROW><id>5497070</id><snippet>message = "%s:%d: Rule '%s' returned an unknown token type '%s'" % (
           func.func_code.co_filename, func.func_code.co_firstlineno,
           func.__name__, newtok.type),lexdata[lexpos:])
raise LexError(message)
</snippet></ROW><ROW><id>5497205</id><snippet>return "HTTP/1.1 101 WebSocket Protocol Handshake\r\nUpgrade: WebSocket\r\nConnection: Upgrade\r\nSec-WebSocket-Origin: %s\r\nSec-WebSocket-Location: ws://%s%s\r\nSec-WebSocket-Protocol: sample\r\n\r\n%s"% (origin, host, resource, token)
</snippet></ROW><ROW><id>5497336</id><snippet>[app:main]
set debug = false
</snippet></ROW><ROW><id>5497559</id><snippet>$mystring = system('python myscript.py myargs', $retval);
</snippet></ROW><ROW><id>5498078</id><snippet>__init__.py</snippet></ROW><ROW><id>5498078</id><snippet>__init__.py</snippet></ROW><ROW><id>5498100</id><snippet>/dev/random</snippet></ROW><ROW><id>5498100</id><snippet>/dev/urandom</snippet></ROW><ROW><id>5498100</id><snippet>/dev/urandom</snippet></ROW><ROW><id>5498100</id><snippet>/dev/random</snippet></ROW><ROW><id>5498100</id><snippet>/dev/urandom</snippet></ROW><ROW><id>5498100</id><snippet>pwgen</snippet></ROW><ROW><id>5498163</id><snippet>max</snippet></ROW><ROW><id>5498163</id><snippet>maxDict = {}
for (eachtest, pattern), counter in counts.iteritems():
    _, prev_max = maxDict.get(eachtest, ('', 0))
    if counter &gt; prev_max:
        maxDict[eachtest] = (pattern, counter)

print maxDict
# prints: {'test1': ('alpha', 2), 'test2': ('gamma', 2)}
</snippet></ROW><ROW><id>5498218</id><snippet>initial = cache.get("foo_modelchoice_initial")
if initial is None:
    initial = Foo.objects.get(pk=14)
    cache.set("foo_modelchoice_initial", initial)

foo = ModelChoiceField(label="Foo label",
                   queryset=Foo.objects.all(),
                   initial=initial)
</snippet></ROW><ROW><id>5498218</id><snippet>Foo.objects.all()</snippet></ROW><ROW><id>5498801</id><snippet>import os
with open('/home/david/Desktop/datafile.txt', 'w') as F:
    for d in os.walk('/'):
        F.write(str(d) + '\n')
</snippet></ROW><ROW><id>5498955</id><snippet>feedparser</snippet></ROW><ROW><id>5498955</id><snippet>u"vers\xe3o"</snippet></ROW><ROW><id>5498955</id><snippet>u'\xe3'</snippet></ROW><ROW><id>5498955</id><snippet>ã</snippet></ROW><ROW><id>5498955</id><snippet>print u"vers\xe3o".encode('utf-8')
</snippet></ROW><ROW><id>5498955</id><snippet>feedparser</snippet></ROW><ROW><id>5498955</id><snippet>u"vers\xe3o"</snippet></ROW><ROW><id>5498955</id><snippet>u'\xe3'</snippet></ROW><ROW><id>5498955</id><snippet>ã</snippet></ROW><ROW><id>5498955</id><snippet>print u"vers\xe3o".encode('utf-8')
</snippet></ROW><ROW><id>5498955</id><snippet>feedparser</snippet></ROW><ROW><id>5500099</id><snippet>import inspect
import logging

logger=logging.getLogger(__name__)

def debug(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.debug('{i} [{m}]'.format(
        i='.'*indentation_level,
        m=msg            
        ))

def foo():    
    debug('Hi Mom')
    for i in range(1):
        debug("Now we're cookin")

if __name__=='__main__':
    logging.basicConfig(level=logging.DEBUG)
    foo()
</snippet></ROW><ROW><id>5500099</id><snippet>DEBUG:__main__:.... [Hi Mom]
DEBUG:__main__:........ [Now we're cookin]
</snippet></ROW><ROW><id>5500269</id><snippet>-w</snippet></ROW><ROW><id>5500698</id><snippet>paths = [
    os.path.join(os.path.dirname(__file__), 'mylib'),
    os.path.join(os.path.dirname(__file__), 'app', 'tags'),
    os.path.join(os.path.dirname(__file__), 'app', 'controllers'),
    os.path.join(os.path.dirname(__file__), 'app', 'common'),
    os.path.join(os.path.dirname(__file__), 'app', 'models'),
    os.path.join(os.path.dirname(__file__), 'app')
]
for path in paths:
    if os.path.exists(path):
        # Don't add paths that don't exist.
        sys.path.append(path)
</snippet></ROW><ROW><id>5500698</id><snippet>def main():
    # Do all of my initialization and run my
    # WSGIApplication

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5500775</id><snippet>    gameboard.colors = ['black','red','brown','cyan','orange','magenta','yellow','green'];
    gameboard.tetrominoes = {
      O: [[[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]],
          [[0,1,1,0], [0,1,1,0], [0,1,1,0], [0,1,1,0]],
          [[0,1,1,0], [0,1,1,0], [0,1,1,0], [0,1,1,0]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]],

      I: [[[0,0,0,0], [0,0,2,0], [0,0,0,0], [0,0,2,0]],
          [[2,2,2,2], [0,0,2,0], [2,2,2,2], [0,0,2,0]],
          [[0,0,0,0], [0,0,2,0], [0,0,0,0], [0,0,2,0]],
          [[0,0,0,0], [0,0,2,0], [0,0,0,0], [0,0,2,0]]],

      S: [[[0,0,0,0], [0,0,3,0], [0,0,0,0], [0,0,3,0]],
          [[0,0,3,3], [0,0,3,3], [0,0,3,3], [0,0,3,3]],
          [[0,3,3,0], [0,0,0,3], [0,3,3,0], [0,0,0,3]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]],

      Z: [[[0,0,0,0], [0,0,0,4], [0,0,0,0], [0,0,0,4]],
          [[0,4,4,0], [0,0,4,4], [0,4,4,0], [0,0,4,4]],
          [[0,0,4,4], [0,0,4,0], [0,0,4,4], [0,0,4,0]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]],

      L: [[[0,0,0,0], [0,0,5,0], [0,0,0,5], [0,5,5,0]],
          [[0,5,5,5], [0,0,5,0], [0,5,5,5], [0,0,5,0]],
          [[0,5,0,0], [0,0,5,5], [0,0,0,0], [0,0,5,0]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]],

      J: [[[0,0,0,0], [0,0,6,6], [0,6,0,0], [0,0,6,0]],
          [[0,6,6,6], [0,0,6,0], [0,6,6,6], [0,0,6,0]],
          [[0,0,0,6], [0,0,6,0], [0,0,0,0], [0,6,6,0]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]],

      T: [[[0,0,0,0], [0,0,7,0], [0,0,7,0], [0,0,7,0]],
          [[0,7,7,7], [0,0,7,7], [0,7,7,7], [0,7,7,0]],
          [[0,0,7,0], [0,0,7,0], [0,0,0,0], [0,0,7,0]],
          [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]]]
    };
</snippet></ROW><ROW><id>5501441</id><snippet>def search():
    root = ET.parse(INPUT_FILE_PATH)
    for target in root.findall("//Script"):
        stepTexts = target.findall(".//StepText")
        for stepText in stepTexts:
            if FIND.lower() in stepText.text.lower():
                print target.attrib['name'],' -- ',stepText.text
</snippet></ROW><ROW><id>5501462</id><snippet>sys.path</snippet></ROW><ROW><id>5501462</id><snippet>C:\WINNT\system32\python27.zip</snippet></ROW><ROW><id>5501462</id><snippet>C:\Python27\DLLs;C:\Python27\lib; C:\Python27\lib\plat-win; C:\Python27\lib\lib-tk</snippet></ROW><ROW><id>5501462</id><snippet>HOT_KEY_LOCAL_USER/Python/PythonCore/2.7/PythonPath</snippet></ROW><ROW><id>5501462</id><snippet>site</snippet></ROW><ROW><id>5501462</id><snippet>sys.path</snippet></ROW><ROW><id>5501462</id><snippet>sys.prefix</snippet></ROW><ROW><id>5501462</id><snippet>sys.exec_prefix</snippet></ROW><ROW><id>5501462</id><snippet>C:\Python27</snippet></ROW><ROW><id>5501462</id><snippet>lib/site-packages</snippet></ROW><ROW><id>5501462</id><snippet>C:\Python27; C:\Python27\lib\site-packages</snippet></ROW><ROW><id>5501462</id><snippet>.pth</snippet></ROW><ROW><id>5501462</id><snippet>easy_install.pth</snippet></ROW><ROW><id>5501462</id><snippet>pywin32.pth</snippet></ROW><ROW><id>5501462</id><snippet>setuptools.pth</snippet></ROW><ROW><id>5501462</id><snippet>.pth</snippet></ROW><ROW><id>5501462</id><snippet>sys.path</snippet></ROW><ROW><id>5501462</id><snippet>easy_install.pth</snippet></ROW><ROW><id>5501462</id><snippet>easy_install.pth</snippet></ROW><ROW><id>5501462</id><snippet>sys.path</snippet></ROW><ROW><id>5501462</id><snippet>pywin32.pth</snippet></ROW><ROW><id>5501462</id><snippet>setuptools.pth</snippet></ROW><ROW><id>5501462</id><snippet>sys.path</snippet></ROW><ROW><id>5501462</id><snippet>darwin</snippet></ROW><ROW><id>5501462</id><snippet>site-packages</snippet></ROW><ROW><id>5501462</id><snippet>.pth</snippet></ROW><ROW><id>5501462</id><snippet>sys.prefix</snippet></ROW><ROW><id>5501462</id><snippet>sys.exec_prefix</snippet></ROW><ROW><id>5501555</id><snippet>//li[@class="g" and not(class="localbox")]//a[@class="l"]
  ^        ^              ^                 ^       ^
  1        2              3                 4       5
</snippet></ROW><ROW><id>5501555</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>5501555</id><snippet>class</snippet></ROW><ROW><id>5501555</id><snippet>g</snippet></ROW><ROW><id>5501555</id><snippet>&lt;li class="g"&gt;</snippet></ROW><ROW><id>5501555</id><snippet>class</snippet></ROW><ROW><id>5501555</id><snippet>localbox</snippet></ROW><ROW><id>5501555</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>5501555</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>5501555</id><snippet>class</snippet></ROW><ROW><id>5501555</id><snippet>1</snippet></ROW><ROW><id>5501555</id><snippet>&lt;a class="1"&gt;</snippet></ROW><ROW><id>5501555</id><snippet>@</snippet></ROW><ROW><id>5501555</id><snippet>class</snippet></ROW><ROW><id>5501555</id><snippet>class</snippet></ROW><ROW><id>5501555</id><snippet>localbox</snippet></ROW><ROW><id>5501744</id><snippet>listOfStuff =([a,b], [c,d], [e,f], [f,g])

for item in listOfStuff[1:3]:
    print item
</snippet></ROW><ROW><id>5501744</id><snippet>1</snippet></ROW><ROW><id>5501744</id><snippet>3</snippet></ROW><ROW><id>5501744</id><snippet>listOfStuff =([a,b], [c,d], [e,f], [f,g])
               0      1      2      3
</snippet></ROW><ROW><id>5501744</id><snippet>[1:3]</snippet></ROW><ROW><id>5501893</id><snippet>from collections import defaultdict

l1 = [{"index":1, "b":2}, {"index":2, "b":3}, {"index":3, "green":"eggs"}]
l2 = [{"index":1, "c":4}, {"index":2, "c":5}]

d = defaultdict(dict)
for l in (l1, l2):
    for elem in l:
        d[elem['index']].update(elem)
l3 = d.values()

# l3 is now:

[{'b': 2, 'c': 4, 'index': 1},
 {'b': 3, 'c': 5, 'index': 2},
 {'green': 'eggs', 'index': 3}]
</snippet></ROW><ROW><id>5501893</id><snippet>l3</snippet></ROW><ROW><id>5501893</id><snippet>.values()</snippet></ROW><ROW><id>5501893</id><snippet>from operator import itemgetter

...

l3 = sorted(d.values(), key=itemgetter("index"))
</snippet></ROW><ROW><id>5501920</id><snippet>pixelColor</snippet></ROW><ROW><id>5501920</id><snippet>Image</snippet></ROW><ROW><id>5501920</id><snippet>PythonMagick.Color</snippet></ROW><ROW><id>5501920</id><snippet>Image::writePixels</snippet></ROW><ROW><id>5501920</id><snippet>PythonMagick.Image</snippet></ROW><ROW><id>5501920</id><snippet>PythonMagick.Blob</snippet></ROW><ROW><id>5501920</id><snippet>get_blob_data</snippet></ROW><ROW><id>5501920</id><snippet>Blob</snippet></ROW><ROW><id>5501920</id><snippet>im = PythonMagick.Image('image.jp2')
blob = PythonMagick.Blob()
im.write(blob, "png")
data = PythonMagick.get_blob_data(blob)
</snippet></ROW><ROW><id>5501920</id><snippet>data</snippet></ROW><ROW><id>5501920</id><snippet>struct.unpack</snippet></ROW><ROW><id>5502111</id><snippet>from Tkinter import *
from tkFileDialog import askopenfilename
import Image, ImageTk

if __name__ == "__main__":
    root = Tk()

    #setting up a tkinter canvas with scrollbars
    frame = Frame(root, bd=2, relief=SUNKEN)
    frame.grid_rowconfigure(0, weight=1)
    frame.grid_columnconfigure(0, weight=1)
    xscroll = Scrollbar(frame, orient=HORIZONTAL)
    xscroll.grid(row=1, column=0, sticky=E+W)
    yscroll = Scrollbar(frame)
    yscroll.grid(row=0, column=1, sticky=N+S)
    canvas = Canvas(frame, bd=0, xscrollcommand=xscroll.set, yscrollcommand=yscroll.set)
    canvas.grid(row=0, column=0, sticky=N+S+E+W)
    xscroll.config(command=canvas.xview)
    yscroll.config(command=canvas.yview)
    frame.pack(fill=BOTH,expand=1)

    #adding the image
    File = askopenfilename(parent=root, initialdir="C:/",title='Choose an image.')
    img = ImageTk.PhotoImage(Image.open(File))
    canvas.create_image(0,0,image=img,anchor="nw")
    canvas.config(scrollregion=canvas.bbox(ALL))

    #function to be called when mouse is clicked
    def printcoords(event):
        #outputting x and y coords to console
        print (event.x,event.y)
    #mouseclick event
    canvas.bind("&lt;Button 1&gt;",printcoords)

    root.mainloop()
</snippet></ROW><ROW><id>5502162</id><snippet>num2date</snippet></ROW><ROW><id>5502162</id><snippet>date2num</snippet></ROW><ROW><id>5502162</id><snippet>datetime</snippet></ROW><ROW><id>5502162</id><snippet>set_major_formatter</snippet></ROW><ROW><id>5502162</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import dates
import datetime

a = np.array([
    [1293605162197, 0, 0],
    [1293605477994, 63, 0],
    [1293605478057, 0, 0],
    [1293605478072, 2735, 1249],
    [1293606162213, 0, 0],
    [1293606162229, 0, 0]])

d = a[:,0]
y1 = a[:,1]
y2 = a[:,2]

# convert epoch to matplotlib float format
s = d/1000
ms = d-1000*s  # not needed?
dts = map(datetime.datetime.fromtimestamp, s)
fds = dates.date2num(dts) # converted

# matplotlib date format object
hfmt = dates.DateFormatter('%m/%d %H:%M')

fig = plt.figure()
ax = fig.add_subplot(111)
ax.vlines(fds, y2, y1)

ax.xaxis.set_major_locator(dates.MinuteLocator())
ax.xaxis.set_major_formatter(hfmt)
ax.set_ylim(bottom = 0)
plt.xticks(rotation='vertical')
plt.subplots_adjust(bottom=.3)
plt.show()
</snippet></ROW><ROW><id>5502228</id><snippet>UniversityDetails</snippet></ROW><ROW><id>5502228</id><snippet>user = UniversityDetails.objects.get(email=email)
send_mail("Your PW", user.password, "admin@example.com", [email])
</snippet></ROW><ROW><id>5502302</id><snippet>print freq_dic.items()
</snippet></ROW><ROW><id>5502302</id><snippet>id(freq_list3)==id(freq_list2)</snippet></ROW><ROW><id>5502302</id><snippet>freq_list4 =[]
freq_list4=freq_list3[:10]
</snippet></ROW><ROW><id>5502302</id><snippet>for item in freq_list4:
    print item[0]
    print item[1]
</snippet></ROW><ROW><id>5502302</id><snippet>for k,v in freq_list4:
print k
print v
</snippet></ROW><ROW><id>5502500</id><snippet>import io
import lxml.etree as ET

content='''\
&lt;result&gt;
    &lt;field k='field1'&gt;
        &lt;value h='1'&gt;&lt;text&gt;text_value1&lt;/text&gt;&lt;/value&gt;
    &lt;/field&gt;
    &lt;field k='field2'&gt;
        &lt;value&gt;&lt;text&gt;text_value2&lt;/text&gt;&lt;/value&gt;
    &lt;/field&gt;
    &lt;field k='field3'&gt;
        &lt;value&gt;&lt;text&gt;some_text&lt;/text&gt;&lt;/value&gt;
    &lt;/field&gt;
&lt;/result&gt;'''

contentBuffer=io.BytesIO(content)
context = ET.iterparse(contentBuffer,tag='result')
for action, elem in context:
    fields=elem.xpath('field/@k')
    values=elem.xpath('field/value/text/text()')
    for field,value in zip(fields,values):
        print('\t{f} = {v}'.format(f=field,v=value))
</snippet></ROW><ROW><id>5502500</id><snippet>field1 = text_value1
field2 = text_value2
field3 = some_text
</snippet></ROW><ROW><id>5502565</id><snippet>def cmds(cmd):
    infile = Popen(cmd, shell=True, stdout=PIPE).stdout
    print infile.readline()
    print infile.readline()
    print infile.readline()
    while True:
        line = infile.readline()
        if not line:
            break
        if line == '\n':
            print infile.readline()
            print infile.readline()
            print infile.readline()
</snippet></ROW><ROW><id>5502586</id><snippet>s = __import__('conf1')
temp = 'server'
for v in getattr(conf, temp): # .keys() not required
    print v
</snippet></ROW><ROW><id>5502747</id><snippet>find</snippet></ROW><ROW><id>5502875</id><snippet>random.sample()</snippet></ROW><ROW><id>5502875</id><snippet>import string
import itertools
import random

initial_consonants = (set(string.ascii_lowercase) - set('aeiou')
                      # remove those easily confused with others
                      - set('qxc')
                      # add some crunchy clusters
                      | set(['bl', 'br', 'cl', 'cr', 'dr', 'fl',
                             'fr', 'gl', 'gr', 'pl', 'pr', 'sk',
                             'sl', 'sm', 'sn', 'sp', 'st', 'str',
                             'sw', 'tr'])
                      )

final_consonants = (set(string.ascii_lowercase) - set('aeiou')
                    # confusable
                    - set('qxcsj')
                    # crunchy clusters
                    | set(['ct', 'ft', 'mp', 'nd', 'ng', 'nk', 'nt',
                           'pt', 'sk', 'sp', 'ss', 'st'])
                    )

vowels = 'aeiou' # we'll keep this simple

# each syllable is consonant-vowel-consonant "pronounceable"
syllables = map(''.join, itertools.product(initial_consonants, 
                                           vowels, 
                                           final_consonants))

# you could trow in number combinations, maybe capitalized versions... 

def gibberish(wordcount, wordlist=syllables):
    return ' '.join(random.sample(wordlist, wordcount))
</snippet></ROW><ROW><id>5502875</id><snippet>&gt;&gt;&gt; len(syllables)
5320
&gt;&gt;&gt; gibberish(4)
'nong fromp glosk zunt'
&gt;&gt;&gt; gibberish(5)
'samp nuv fog blew grig'
&gt;&gt;&gt; gibberish(10)
'strot fray hag sting skask stim grun prug spaf mond'
</snippet></ROW><ROW><id>5502875</id><snippet>random.sample()</snippet></ROW><ROW><id>5502911</id><snippet>?</snippet></ROW><ROW><id>5502911</id><snippet>/2000</snippet></ROW><ROW><id>5503113</id><snippet>with</snippet></ROW><ROW><id>5503165</id><snippet>random.triangular()</snippet></ROW><ROW><id>5503165</id><snippet>n = random.triangular(10, 20)
</snippet></ROW><ROW><id>5503165</id><snippet>n</snippet></ROW><ROW><id>5503165</id><snippet>int</snippet></ROW><ROW><id>5503764</id><snippet>None</snippet></ROW><ROW><id>5503764</id><snippet>allow_none=True</snippet></ROW><ROW><id>5503764</id><snippet>server = SimpleXMLRPCServer(("127.0.0.1", 8000),
                        requestHandler=RequestHandler, 
                        allow_none=True)
</snippet></ROW><ROW><id>5503875</id><snippet>    import inspect
    import re

    def dd(value):
        calling_frame_record = inspect.stack()[1]
        frame = inspect.getframeinfo(calling_frame_record[0])
        m = re.search( "dd\((.+)\)", frame.code_context[0])
        if m:
            print "{0} = {1}".format(m.group(1), value)

    def test():
        a = 4
        dd(a)

    test()
</snippet></ROW><ROW><id>5503875</id><snippet>a = 4
</snippet></ROW><ROW><id>5503881</id><snippet>import subprocess
subprocess.Popen(["command", "arg1", "arg2"])
</snippet></ROW><ROW><id>5503881</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>5503881</id><snippet>gtk.main()</snippet></ROW><ROW><id>5503924</id><snippet>setuptools</snippet></ROW><ROW><id>5503924</id><snippet>python-2.7.1.amd64</snippet></ROW><ROW><id>5503924</id><snippet>setuptools-0.6c12dev.win-amd64-py2.7</snippet></ROW><ROW><id>5503924</id><snippet>setuptools-0.6c11.win32-py2.7</snippet></ROW><ROW><id>5503924</id><snippet>pip</snippet></ROW><ROW><id>5503924</id><snippet>virtualenv</snippet></ROW><ROW><id>5504017</id><snippet>a = ['a','b','c','d','e']

for i,nexti in zip(a,a[1::]):
    print i,nexti
</snippet></ROW><ROW><id>5504323</id><snippet>&lt;?php
    // source text
    $paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Proin congue, quam nec tincidunt congue, massa ipsum sodales tellus,
        in rhoncus sem quam quis ante. Nam condimentum pellentesque libero at
        blandit. Suspendisse felis sem, interdum pulvinar ultricies a, auctor
        vel leo. Curabitur congue mi nec purus placerat sit amet mollis magna
        laoreet. Duis eu purus non turpis lacinia sagittis. Aliquam tristique
        nulla volutpat neque posuere faucibus. Aenean tempus diam quis sem
        convallis id cursus lorem sagittis. Nam feugiat, felis nec tincidunt
        aliquet, felis lectus bibendum mi, ut tincidunt purus urna ac felis.
        Quisque ut lectus dolor. Duis ipsum arcu, adipiscing id vestibulum
        fringilla, euismod non augue. Nullam quis ipsum nec tortor tristique
        egestas sed nec leo. Pellentesque tempus velit lacus, sit amet rhoncus
        mi. Curabitur justo ipsum, consectetur ac vestibulum sed, porttitor
        eget dui. Vivamus nisi lorem, porta vel gravida quis, varius et elit.
        Nulla eros metus, congue sit amet interdum at, porta eget ligula.";

    // remove newlines
    $paragraph = str_replace(array("\r","\n"), '', $paragraph);

    // convert to lowercase
    $paragraph = strtolower($paragraph);

    // remove non-alphanumeric characters
    $paragraph = preg_replace('/[^A-Za-z0-9\s]/', '', $paragraph);

    // convert into array
    $words = explode(' ', $paragraph);

    // remove null values
    $words = array_filter($words, 'strlen');

    // remove duplicate values
    $words = array_unique($words);

    // sort array alphabetically (optional)
    natsort($words);

    // reindex array
    $words = array_values($words);

    // display array
    print_r($words);
?&gt;
</snippet></ROW><ROW><id>5504558</id><snippet>a.encode('string-escape')</snippet></ROW><ROW><id>5504623</id><snippet>get_things</snippet></ROW><ROW><id>5504623</id><snippet>def get_thing(self, chi, n):

    return np.sum(self.an[n,1:self.j] * np.power(chi,-np.arange(1,self.j)))
</snippet></ROW><ROW><id>5504886</id><snippet>from contextlib import closing
with closing( connection.cursor() ) as cursor:
    ... use the cursor ...

# cursor closed.  Guaranteed.

connection.close()
</snippet></ROW><ROW><id>5505024</id><snippet>def f(value):
    factors = []
    for i in range(1, int(value**0.5)+1):
        if value % i == 0:
            factors.append((i, value / i))
    return factors
</snippet></ROW><ROW><id>5505024</id><snippet>def f(val):
    return [(i, val / i) for i in range(1, int(val**0.5)+1) if val % i == 0]
</snippet></ROW><ROW><id>5505268</id><snippet>logging</snippet></ROW><ROW><id>5505271</id><snippet>import numpy.uint32
valueA=uint32(5)
valueB=uint32(-5)
assert valueA &lt; valueB
</snippet></ROW><ROW><id>5505417</id><snippet>ii = np.where((a[:,0] - b.reshape(-1,1)) == 0)[1]
c = a[ii,:]
</snippet></ROW><ROW><id>5505417</id><snippet>b</snippet></ROW><ROW><id>5505417</id><snippet>a</snippet></ROW><ROW><id>5505417</id><snippet>ii = np.where(a[:,0] == b.reshape(-1,1))[1]
c = a[ii,:]
</snippet></ROW><ROW><id>5505417</id><snippet>c = a[np.searchsorted(a[:,0],b),:]
</snippet></ROW><ROW><id>5505417</id><snippet>a[:,0]</snippet></ROW><ROW><id>5505417</id><snippet>b</snippet></ROW><ROW><id>5505417</id><snippet>a[:,0]</snippet></ROW><ROW><id>5505526</id><snippet>shell=True</snippet></ROW><ROW><id>5505555</id><snippet>from django.shortcuts import render_to_response</snippet></ROW><ROW><id>5505917</id><snippet>itertools</snippet></ROW><ROW><id>5505917</id><snippet>takewhile()</snippet></ROW><ROW><id>5505949</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; cmd1 = """\
... "".join(this.d[c] if c in this.d else c for c in this.s)
... """
&gt;&gt;&gt; cmd2 = """\
... "".join(c in this.d and this.d[c] or c for c in this.s)
... """
&gt;&gt;&gt; cmd3 = """\
... "".join(this.d.get(c, c) for c in this.s)
... """
&gt;&gt;&gt; cmd4 = """\
... _get=this.d.get;"".join(_get(c, c) for c in this.s)
... """
&gt;&gt;&gt; t1 = timeit.Timer(cmd1, "import this")
&gt;&gt;&gt; t2 = timeit.Timer(cmd2, "import this")
&gt;&gt;&gt; t3 = timeit.Timer(cmd3, "import this")
&gt;&gt;&gt; t4 = timeit.Timer(cmd4, "import this")
</snippet></ROW><ROW><id>5505949</id><snippet>print "%.2f usec/pass" % (1000000 * t1.timeit(number=100000)/100000)
362.67 usec/pass

&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t2.timeit(number=100000)/100000)
364.25 usec/pass

&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t3.timeit(number=100000)/100000)
391.97 usec/pass

&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t4.timeit(number=100000)/100000)
246.91 usec/pass
</snippet></ROW><ROW><id>5506030</id><snippet>from itertools import combinations_with_replacement
from pprint import pprint

f = lambda target_sum, length: [sequence for sequence in combinations_with_replacement(range(1, target_sum+1), length) if sum(sequence) == target_sum]

def f2(target_sum, min_length, max_length):
    sequences = {}
    for length in range(min_length, max_length + 1):
        sequence = f(target_sum, length)
        if len(sequence):
            sequences[length] = sequence
    return sequences

if __name__ == "__main__":
    print("f(10,2):")
    print(f(10,2))
    print()
    print("f(10,1,3)")
    pprint(f2(10,1,3))
</snippet></ROW><ROW><id>5506030</id><snippet>f(10,2):
[(1, 9), (2, 8), (3, 7), (4, 6), (5, 5)]

f(10,1,3)
{1: [(10,)],
 2: [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5)],
 3: [(1, 1, 8),
     (1, 2, 7),
     (1, 3, 6),
     (1, 4, 5),
     (2, 2, 6),
     (2, 3, 5),
     (2, 4, 4),
     (3, 3, 4)]}
</snippet></ROW><ROW><id>5506136</id><snippet>In [124]: msg['Subject']
Out[124]: '=?ISO-2022-JP?B?GyRCNS5KfSRLJEgkRiRiQmdAWiRKJCpDTiRpJDskLCQiJGo'
</snippet></ROW><ROW><id>5506136</id><snippet>=?ISO-2022-JP?B?</snippet></ROW><ROW><id>5506136</id><snippet>In [125]: msg['Subject'].lstrip('=?ISO-2022-JP?B?')
Out[125]: 'GyRCNS5KfSRLJEgkRiRiQmdAWiRKJCpDTiRpJDskLCQiJGo'
</snippet></ROW><ROW><id>5506136</id><snippet>In [126]: base64.b64decode(msg['Subject'].lstrip('=?ISO-2022-JP?B?'))
TypeError: Incorrect padding
</snippet></ROW><ROW><id>5506136</id><snippet>In [130]: print(base64.b64decode(msg['Subject'].lstrip('=?ISO-2022-JP?B?')+'?=').decode('ISO-2022-JP'))
貴方にとても大切なお知らせがあり
</snippet></ROW><ROW><id>5506274</id><snippet>&gt;&gt;&gt; import multiprocessing
&gt;&gt;&gt; from multiprocessing import Queue
&gt;&gt;&gt; queue = Queue()
&gt;&gt;&gt; jobs = [['a', 'b'], ['c', 'd']]
&gt;&gt;&gt; for job in jobs:
    queue.put(job)


&gt;&gt;&gt; queue.get()
['a', 'b']
&gt;&gt;&gt; queue.get()
['c', 'd']
</snippet></ROW><ROW><id>5506369</id><snippet>sum(counter.itervalues())
</snippet></ROW><ROW><id>5506475</id><snippet>repr</snippet></ROW><ROW><id>5506475</id><snippet>time_struct</snippet></ROW><ROW><id>5506475</id><snippet>eval</snippet></ROW><ROW><id>5506475</id><snippet>#!/usr/bin/env python2.7

from collections import namedtuple
import csv
import json
import time

import feedparser
import couchdb

def to_json(python_object):
    if isinstance(python_object, time.struct_time):
        return {'__class__': 'time.asctime',
                '__value__': time.asctime(python_object)}

    raise TypeError(repr(python_object) + ' is not JSON serializable')

Feed = namedtuple('Feed', ['name', 'url'])

COUCH_HOST = 'http://mycouch.com'
COUCH_USER = 'user'
COUCH_PASS = 'pass'

couch = couchdb.Server(COUCH_HOST)
couch.resource.credentials = (COUCH_USER, COUCH_PASS)

db = couch['raw_entries']

for feed in map(Feed._make, csv.reader(open("feeds.csv", "rb"))):
    d = feedparser.parse(feed.url)
    for item in d.entries:
        j = json.dumps(item, default=to_json)
        db.save(json.loads(j))
</snippet></ROW><ROW><id>5506508</id><snippet>EPSILON = 10 ** -12
assert tlf.z &gt;= tlb.z - EPSILON, (tlf.z,trf.z)
tlf.z = max(tlf.z,tlb.z)
</snippet></ROW><ROW><id>5506790</id><snippet>Book.objects.create(**d)
</snippet></ROW><ROW><id>5506790</id><snippet>filter</snippet></ROW><ROW><id>5506790</id><snippet>pk</snippet></ROW><ROW><id>5506790</id><snippet>Book.objects.filter(pk=pk).update(**d)
</snippet></ROW><ROW><id>5506814</id><snippet>for text, type in pos_tag(word_tokenize("John's big idea isn't all that bad.")):
    if type == 'JJ':
        print 'text:', text
        print 'type:', type
</snippet></ROW><ROW><id>5507286</id><snippet>touch</snippet></ROW><ROW><id>5507286</id><snippet>.wsgi</snippet></ROW><ROW><id>5507373</id><snippet>$ virtualenv
You must provide a DEST_DIR
Usage: virtualenv [OPTIONS] DEST_DIR

Options:
  --version             show program's version number and exit.
  -h, --help            show this help message and exit.
  -v, --verbose         Increase verbosity.
  -q, --quiet           Decrease verbosity.
  -p PYTHON_EXE, --python=PYTHON_EXE
                        The Python interpreter to use, e.g.,
                        --python=python2.5 will use the python2.5 interpreter
                        to create the new environment.  The default is the
                        interpreter that virtualenv was installed with
                        (/usr/bin/python)
  --clear               Clear out the non-root install and start from scratch
  --no-site-packages    Don't give access to the global site-packages dir to
                        the virtual environment
  --unzip-setuptools    Unzip Setuptools or Distribute when installing it
  --relocatable         Make an EXISTING virtualenv environment relocatable.
                        This fixes up scripts and makes all .pth files
                        relative
  --distribute          Use Distribute instead of Setuptools. Set environ
                        variable VIRTUALENV_USE_DISTRIBUTE to make it the
                        default
  --prompt==PROMPT      Provides an alternative prompt prefix for this
                        environment
</snippet></ROW><ROW><id>5507373</id><snippet>here</snippet></ROW><ROW><id>5507373</id><snippet>&lt;user&gt;</snippet></ROW><ROW><id>5507373</id><snippet>Python source</snippet></ROW><ROW><id>5507373</id><snippet>mkdir ~/src
wget http://www.python.org/ftp/python/2.7.1/Python-2.7.1.tgz
tar -zxvf Python2.7.1.tar.gz
cd Python2.7.1

mkdir ~/.localpython

cd Python-2.7.1
make clean
./configure --prefix=/home/&lt;user&gt;/.localpython
make
make install
</snippet></ROW><ROW><id>5507373</id><snippet>virtualenv source</snippet></ROW><ROW><id>5507373</id><snippet>cd ~/src
wget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.5.2.tar.gz#md5=fbcefbd8520bb64bc24a560c6019a73c
tar -zxvf virtualenv-1.5.2.tar.gz
cd virtualenv-1.5.2/
~/.localpython/bin/python setup.py install
</snippet></ROW><ROW><id>5507373</id><snippet>virtualenv docs</snippet></ROW><ROW><id>5507373</id><snippet>mkdir virtualenvs
cd virtualenvs
~/.localpython/bin/virtualenv py2.7 --python=/home/&lt;user&gt;/.localpython/bin/python2.7
</snippet></ROW><ROW><id>5507373</id><snippet>cd ~/virtualenvs/p2.7/bin
source ./activate
</snippet></ROW><ROW><id>5507373</id><snippet>(p2.7)$ python
Python 2.7.1 (r271:86832, Mar 31 2011, 15:31:37) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; exit()

(p2.7)$ deactivate
$ python
Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5507486</id><snippet>from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True)
    token = models.CharField(max_length=100, blank=True)
</snippet></ROW><ROW><id>5507486</id><snippet>settings.py</snippet></ROW><ROW><id>5507486</id><snippet>AUTH_PROFILE_MODULE = 'userprofiles.userprofile'
</snippet></ROW><ROW><id>5507486</id><snippet>request.user.get_profile().token
</snippet></ROW><ROW><id>5507750</id><snippet>import pickle
infile = open('/tmp/pickle', 'rb')
buf = []
while True:
    line = infile.readline()
    if not line:
        break
    buf.append(line)
    if line.endswith('.\n'):
        print 'Decoding', buf
        print pickle.loads(''.join(buf))
        buf = []
</snippet></ROW><ROW><id>5507750</id><snippet>shelve</snippet></ROW><ROW><id>5507750</id><snippet>file</snippet></ROW><ROW><id>5507750</id><snippet>mmap()</snippet></ROW><ROW><id>5507750</id><snippet>#!/usr/bin/env python

import mmap
import cPickle

fname = '/tmp/pickle'
infile = open(fname, 'rb')
m = mmap.mmap(infile.fileno(), 0, access=mmap.ACCESS_READ)
start = 0
while True:
    end = m.find('.\n', start + 1) + 2
    if end == 1:
        break
    print cPickle.loads(m[start:end])
    start = end
</snippet></ROW><ROW><id>5507763</id><snippet>_</snippet></ROW><ROW><id>5507763</id><snippet>__</snippet></ROW><ROW><id>5507763</id><snippet>profit = sales - costs;</snippet></ROW><ROW><id>5507763</id><snippet>_ = _I_ - _i_;</snippet></ROW><ROW><id>5507773</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>5507773</id><snippet>u"favoritos à distancia"</snippet></ROW><ROW><id>5507921</id><snippet>ouput</snippet></ROW><ROW><id>5507921</id><snippet>output.jpg</snippet></ROW><ROW><id>5507921</id><snippet>Content-Length</snippet></ROW><ROW><id>5507921</id><snippet>Content-Length</snippet></ROW><ROW><id>5507921</id><snippet>Accept-Encoding: gzip</snippet></ROW><ROW><id>5507921</id><snippet>headers</snippet></ROW><ROW><id>5507921</id><snippet>Content-Length</snippet></ROW><ROW><id>5507921</id><snippet>Content-Encoding</snippet></ROW><ROW><id>5507921</id><snippet>gzip</snippet></ROW><ROW><id>5508100</id><snippet>if(!variable_to_insert)
    variable_to_insert = "NULL"
</snippet></ROW><ROW><id>5508100</id><snippet>insert = "INSERT INTO table (var) VALUES (%s)" % (variable_to_insert)
...
</snippet></ROW><ROW><id>5508100</id><snippet>insert = "INSERT INTO table (var) VALUES ('%s')" % (variable_to_insert)
...
</snippet></ROW><ROW><id>5508404</id><snippet>a[tuple(b)] 
</snippet></ROW><ROW><id>5508552</id><snippet>json.loads()</snippet></ROW><ROW><id>5508552</id><snippet>ValueError</snippet></ROW><ROW><id>5508605</id><snippet>import datetime as DT
if (created_date + DT.timedelta(days=30)) &lt; DT.datetime.now():
    print('valid')
else:
    print('expired')
</snippet></ROW><ROW><id>5508655</id><snippet>__import__</snippet></ROW><ROW><id>5508655</id><snippet>myapp.py</snippet></ROW><ROW><id>5508749</id><snippet>class Test(models.Model):                                                                                          
    class Meta:                                                                                                    
        app_label = 'ignore'                                                                                       
        db_table = 'T'                                                                                             
    a = models.IntegerField()                                                                                      
    b = models.IntegerField()                                                                                      
    c = models.IntegerField()                                                                                      
    d = models.IntegerField()      

result = Test.objects.values('c', 'd').annotate(Sum('a'), Sum('b'))
print str(result.query)
</snippet></ROW><ROW><id>5508920</id><snippet>admin.site.unregister</snippet></ROW><ROW><id>5508920</id><snippet>from django.contrib.auth.models import User
from django.contrib.sites.models import Site
from django.contrib.auth.models import Group

admin.site.unregister(User)
admin.site.unregister(Group)
admin.site.unregister(Site)
</snippet></ROW><ROW><id>5508924</id><snippet>try:
    user = UniversityDetails.objects.get(email=email)
except UniversityDetails.DoesNotExist:
    user = None
</snippet></ROW><ROW><id>5509311</id><snippet>continue</snippet></ROW><ROW><id>5509311</id><snippet>for i in xrange(value):
    if condition:
        continue
</snippet></ROW><ROW><id>5509311</id><snippet>.next()</snippet></ROW><ROW><id>5509311</id><snippet>&gt;&gt;&gt; iterable = iter(xrange(100))
&gt;&gt;&gt; for i in iterable:
...     if i % 10 == 0:
...         [iterable.next() for x in range(10)]
... 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
[41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
[61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
[81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
</snippet></ROW><ROW><id>5509810</id><snippet>~/Library/Application Support/NodeBox/en/verb/verb.txt</snippet></ROW><ROW><id>5509810</id><snippet>infinitive</snippet></ROW><ROW><id>5509810</id><snippet>used,,,uses,,using,,,,,used,used,,,,,,,,,,,,</snippet></ROW><ROW><id>5509810</id><snippet>use,,,uses,,using,,,,,used,used,,,,,,,,,,,,</snippet></ROW><ROW><id>5509810</id><snippet>import en

print en.is_verb("use")
print en.verb.infinitive('use')
print en.verb.tense('use')
</snippet></ROW><ROW><id>5509810</id><snippet>True
use
infinitive
</snippet></ROW><ROW><id>5509810</id><snippet>import en

print 'use    %s' % en.verb.tense("use")
print 'uses   %s' % en.verb.tense("uses")
print 'using  %s' % en.verb.tense('using')
print 'used   %s' % en.verb.tense('used')

use    infinitive
uses   3rd singular present
using  present participle
used   past
</snippet></ROW><ROW><id>5509835</id><snippet>&gt;&gt;&gt; '\\x41'.decode('string_escape')
'A'
</snippet></ROW><ROW><id>5509894</id><snippet># tempfiles is a list of file handles to your temp files. Order them however you like
f = open("bigfile.txt", "w")
for tempfile in tempfiles:
    f.write(tempfile.read())
</snippet></ROW><ROW><id>5509923</id><snippet>import random
messages = {
    'animal': "rawr I'm a tiger",
    'vegetable': "Woof, I'm a carrot",
    'mineral': "Rumble, I'm a rock",
}
print messages[random.choice(messages.keys())]
</snippet></ROW><ROW><id>5509923</id><snippet>import random

def animal():
    print "rawr I'm a tiger"

def vegetable():
    print "Woof, I'm a carrot"

def mineral():
    print "Rumble, I'm a rock"

sections = {
    'animal': animal,
    'vegetable': vegetable,
    'mineral': mineral,
}

section = sections[random.choice(sections.keys())]
section()
</snippet></ROW><ROW><id>5510118</id><snippet>self.write(details)</snippet></ROW><ROW><id>5510133</id><snippet>with</snippet></ROW><ROW><id>5510133</id><snippet>@contextlib.contextmanager
def suppress_exceptions(*exceptions):
    if not exceptions:
        exceptions = Exception
    try:
        yield
    except exceptions:
        # You would log an error here
        # If you have logging in your application
        pass

with suppress_exceptions():
    1/0

print("Ignored the exception!")

with suppress_exceptions(IOError):
    1/0

# The second one will let the exception through
</snippet></ROW><ROW><id>5510293</id><snippet>help()</snippet></ROW><ROW><id>5510293</id><snippet>&gt;&gt;&gt;import timeit
&gt;&gt;&gt;help(timeit)

....
Command line usage:
    python timeit.py [-n N] [-r N] [-s S] [-t] [-c] [-h] [--] [statement]

Options:
  -n/--number N: how many times to execute 'statement' (default: see below)
  -r/--repeat N: how many times to repeat the timer (default 3)
  -s/--setup S: statement to be executed once initially (default 'pass')
....
</snippet></ROW><ROW><id>5510610</id><snippet>Error in function (formula, data = parent.frame(), start, control = 
nls.control(),  : parameters without starting value in 
    'data': responsev, predictorv
</snippet></ROW><ROW><id>5510761</id><snippet>/</snippet></ROW><ROW><id>5510761</id><snippet>{% extends request.current_page.get_template %}</snippet></ROW><ROW><id>5510761</id><snippet>cms.utils.page_resolver.get_page_from_request</snippet></ROW><ROW><id>5510761</id><snippet>use_path</snippet></ROW><ROW><id>5510761</id><snippet>get_template</snippet></ROW><ROW><id>5511100</id><snippet> url(r'^success/(?P&lt;sid&gt;[\d]+)/(?P&lt;company&gt;[\s\w\d-]+)/$','success', name='DemoVar_success'),
</snippet></ROW><ROW><id>5511116</id><snippet>class helper:
    def __call__(self, match):
        self.match= match
        return bool(match)

h= helper()
for l in big_input:      
    if h(matchOK.search(l)):
        # do something with h.match     
    elif h(matchFailed.search(l)):
        # do something with h.match 
    ... # a bunch more of these
    else:
        # error handling
</snippet></ROW><ROW><id>5511116</id><snippet>class matcher:
    def __init__(self):
        # compile matchers
        self.ok= ...
        self.failed= ...
        self....= ...

    def matchOK(self, l):
        self.match= self.ok(l)
        return bool(self.match)

    def matchFailed(self, l):
        self.match= self.failed(l)
        return bool(self.match)

    def match...(self, l):
        ...

m= matcher()
for l in big_input:      
    if m.matchOK(l):
        # do something with m.match     
    elif m.matchFailed(l):
        # do something with m.match 
    ... # a bunch more of these
    else:
        # error handling
</snippet></ROW><ROW><id>5511221</id><snippet>from django.contrib.contenttypes.models import ContentType
ct = ContentType.objects.get(app_label='Apps', model='app_users')
ct.delete()
</snippet></ROW><ROW><id>5511371</id><snippet>int a</snippet></ROW><ROW><id>5511371</id><snippet>a</snippet></ROW><ROW><id>5511371</id><snippet>a</snippet></ROW><ROW><id>5511371</id><snippet>a = 2</snippet></ROW><ROW><id>5511371</id><snippet>a = b</snippet></ROW><ROW><id>5511371</id><snippet>b</snippet></ROW><ROW><id>5511371</id><snippet>a</snippet></ROW><ROW><id>5511371</id><snippet>b</snippet></ROW><ROW><id>5511371</id><snippet>a</snippet></ROW><ROW><id>5511371</id><snippet>a++</snippet></ROW><ROW><id>5511371</id><snippet>a</snippet></ROW><ROW><id>5511371</id><snippet>x = []</snippet></ROW><ROW><id>5511371</id><snippet>x</snippet></ROW><ROW><id>5511371</id><snippet>x</snippet></ROW><ROW><id>5511371</id><snippet>y = x</snippet></ROW><ROW><id>5511371</id><snippet>y</snippet></ROW><ROW><id>5511371</id><snippet>x</snippet></ROW><ROW><id>5511371</id><snippet>x</snippet></ROW><ROW><id>5511371</id><snippet>y</snippet></ROW><ROW><id>5511371</id><snippet>B = A</snippet></ROW><ROW><id>5511371</id><snippet>A</snippet></ROW><ROW><id>5511371</id><snippet>B</snippet></ROW><ROW><id>5511371</id><snippet>++</snippet></ROW><ROW><id>5511371</id><snippet>A</snippet></ROW><ROW><id>5511371</id><snippet>B</snippet></ROW><ROW><id>5511371</id><snippet>A</snippet></ROW><ROW><id>5511371</id><snippet>A</snippet></ROW><ROW><id>5511371</id><snippet>B</snippet></ROW><ROW><id>5511371</id><snippet>B</snippet></ROW><ROW><id>5511371</id><snippet>B</snippet></ROW><ROW><id>5511751</id><snippet>cProfile</snippet></ROW><ROW><id>5511751</id><snippet>def handler(req):
    pkg_resources.require('Trac==%s' % VERSION)
    gateway = ModPythonGateway(req, req.get_options())

    from trac.web.main import dispatch_request
    import cProfile
    from datetime import datetime

    def profile_request(*args, **kwargs):
        p = cProfile.Profile()
        p.runcall(dispatch_request, *args, **kwargs)
        # log to a file
        timestamp = datetime.now().strftime('%Y-%m-%d_%H%M%S.%f')
        p.dump_stats('/var/log/trac_profile/%s' % timestamp)

    gateway.run(profile_request)
    return apache.OK
</snippet></ROW><ROW><id>5511783</id><snippet>range</snippet></ROW><ROW><id>5511783</id><snippet>for item in d.entries:
    updates.append([{"url": feed_a_enviar["linktoourpage"], "msg": item.title + ", "}])
</snippet></ROW><ROW><id>5511783</id><snippet>d.entries[i]</snippet></ROW><ROW><id>5511783</id><snippet>feeds_updates</snippet></ROW><ROW><id>5512272</id><snippet>1024</snippet></ROW><ROW><id>5512272</id><snippet>2  2  256
2  4  128
2  8   64
2 16   32
2 32   16
...
128 4  2
256 2  2
</snippet></ROW><ROW><id>5512272</id><snippet>1001</snippet></ROW><ROW><id>5512272</id><snippet> 7 11 13
11  7 13
 7 13 11
11 13  7
13 11  7
13  7 11
</snippet></ROW><ROW><id>5512272</id><snippet>onBackup()</snippet></ROW><ROW><id>5512810</id><snippet>for word in word_list:
    word = punctuation.sub("", word)
</snippet></ROW><ROW><id>5512810</id><snippet>word_list = [punctuation.sub("", word) for word in word_list]    
</snippet></ROW><ROW><id>5512810</id><snippet>word</snippet></ROW><ROW><id>5512810</id><snippet>for-loop</snippet></ROW><ROW><id>5512810</id><snippet>word_list</snippet></ROW><ROW><id>5513024</id><snippet>headers</snippet></ROW><ROW><id>5513024</id><snippet>headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
           ...}
</snippet></ROW><ROW><id>5513234</id><snippet>vtkout.to_array().T
</snippet></ROW><ROW><id>5513414</id><snippet>br.links()</snippet></ROW><ROW><id>5513414</id><snippet>list(...)[-1]</snippet></ROW><ROW><id>5513414</id><snippet>lastLink = list(br.links(text_regex=re.compile("Display charges")))[-1]
</snippet></ROW><ROW><id>5513414</id><snippet>In [29]: import mechanize

In [30]: import re

In [31]: br=mechanize.Browser()

In [32]: br.open('http://www.example.com')
Out[32]: &lt;response_seek_wrapper at 0xa2b59ec whose wrapped object = &lt;closeable_response at 0xa2b554c whose fp = &lt;socket._fileobject object at 0xa3143ac&gt;&gt;&gt;

In [33]: br.links()
Out[33]: &lt;generator object __call__ at 0xa289af4&gt;

In [34]: list(br.links())
Out[34]: 
[Link(base_url='http://www.iana.org/domains/example/', url='/', text='Homepage[IMG]', tag='a', attrs=[('href', '/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/domains/', text='Domains', tag='a', attrs=[('href', '/domains/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/numbers/', text='Numbers', tag='a', attrs=[('href', '/numbers/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/protocols/', text='Protocols', tag='a', attrs=[('href', '/protocols/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/about/', text='About IANA', tag='a', attrs=[('href', '/about/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/go/rfc2606', text='RFC 2606', tag='a', attrs=[('href', '/go/rfc2606')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/about/', text='About', tag='a', attrs=[('href', '/about/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/domains/', text='Domains', tag='a', attrs=[('href', '/domains/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/protocols/', text='Protocols', tag='a', attrs=[('href', '/protocols/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/numbers/', text='Number Resources', tag='a', attrs=[('href', '/numbers/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='http://www.icann.org/', text='Internet Corporation for Assigned Names and Numbers', tag='a', attrs=[('href', 'http://www.icann.org/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='mailto:iana@iana.org?subject=General%20website%20feedback', text='iana@iana.org', tag='a', attrs=[('href', 'mailto:iana@iana.org?subject=General%20website%20feedback')])]

In [35]: list(br.links(text_regex=re.compile("About")))
Out[35]: 
[Link(base_url='http://www.iana.org/domains/example/', url='/about/', text='About IANA', tag='a', attrs=[('href', '/about/')]),
 Link(base_url='http://www.iana.org/domains/example/', url='/about/', text='About', tag='a', attrs=[('href', '/about/')])]
</snippet></ROW><ROW><id>5513747</id><snippet>&gt;&gt;&gt; '{0:,}'.format(1000000)
'1,000,000'
</snippet></ROW><ROW><id>5513747</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'en_AU.utf8'
&gt;&gt;&gt; locale.format('%d', 1000000, 1)
'1,000,000'
</snippet></ROW><ROW><id>5513747</id><snippet>locale.format()</snippet></ROW><ROW><id>5513747</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'de_DE.utf-8')
'de_DE.utf-8'
&gt;&gt;&gt; locale.format('%d', 1000000, 1)
'1.000.000'
</snippet></ROW><ROW><id>5513797</id><snippet>key: value</snippet></ROW><ROW><id>5513966</id><snippet>dates = [date.strftime('%Y-%m') for date in dates]
</snippet></ROW><ROW><id>5513966</id><snippet>dates = list(set(dates))
</snippet></ROW><ROW><id>5513966</id><snippet>dates = list(set([date.strftime('%Y-%m') for date in dates]))
</snippet></ROW><ROW><id>5514064</id><snippet>getattr(My,name)
</snippet></ROW><ROW><id>5514066</id><snippet>fields = []
objects = otherobjects.all() 

for id, obj in enumerate(objects)
    fields.append(('id_is_' + id, obj))
</snippet></ROW><ROW><id>5514379</id><snippet>@staticmethod
def myfunc(...): ...
</snippet></ROW><ROW><id>5514379</id><snippet>def myfunc(...): ...
myfunc = staticmethod(myfunc)
</snippet></ROW><ROW><id>5514612</id><snippet>AthleteList</snippet></ROW><ROW><id>5514612</id><snippet>import AthleteList
</snippet></ROW><ROW><id>5514612</id><snippet>AthleteList</snippet></ROW><ROW><id>5514612</id><snippet>AthleteList.AthleteList
</snippet></ROW><ROW><id>5514612</id><snippet>return(AthleteList(templ.pop(0), templ.pop(0), templ))
</snippet></ROW><ROW><id>5514612</id><snippet>return(AthleteList.AthleteList(templ.pop(0), templ.pop(0), templ))
</snippet></ROW><ROW><id>5514661</id><snippet>import root_file as f1

id = 1
app = 'Name'
print getattr(f1, app)[id] # or f1.Name[id]
</snippet></ROW><ROW><id>5514930</id><snippet>subject</snippet></ROW><ROW><id>5514930</id><snippet>import re
d = {}
for match in re.finditer(
    """(?mx)
       ^Date(.*)\r?\n
       Client\d*(.*)\r?\n
       Time(.*)""", 
    subject):
        d[match.group(2)] = (match.group(1), match.group(2))
</snippet></ROW><ROW><id>5515067</id><snippet>import operator
try:
    largestBlob = max((blob for blob in blobs if blob['color'] == 'red'),key=operator.itemgetter('size'))
except ValueError:
    largestBlob = None
</snippet></ROW><ROW><id>5515074</id><snippet>-O</snippet></ROW><ROW><id>5515074</id><snippet>.pyc</snippet></ROW><ROW><id>5515074</id><snippet>-O</snippet></ROW><ROW><id>5515074</id><snippet>.pyo</snippet></ROW><ROW><id>5515141</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d["Folder"] = ["C:/blah/blah/Folder", ["file1","file2","file3"]]
&gt;&gt;&gt; d["more"] = ["/home/mydir", ["file1","file2","file3"]]
&gt;&gt;&gt; d["Folder"][0]
'C:/blah/blah/Folder'
&gt;&gt;&gt; d["Folder"][1]
['file1', 'file2', 'file3']
&gt;&gt;&gt; d["Folder"][1].append("file4")
&gt;&gt;&gt; d["Folder"][1]
['file1', 'file2', 'file3', 'file4']
&gt;&gt;&gt; for entry in d:
...     d[entry][1].append("newfile")
...
&gt;&gt;&gt; d
{'Folder': ['C:/blah/blah/Folder', ['file1', 'file2', 'file3', 'file4', 'newfile']],
 'more': ['/home/mydir', ['file1', 'file2', 'file3', 'newfile']]}
</snippet></ROW><ROW><id>5515198</id><snippet>for i in a.transpose():
</snippet></ROW><ROW><id>5515198</id><snippet>for i in a.T:
</snippet></ROW><ROW><id>5515245</id><snippet>'[\x7f\x80]'
</snippet></ROW><ROW><id>5515249</id><snippet>public Map&lt;String, Object&gt; JsonToMap(String data) {
        Map&lt;String, Object&gt; dataMap;
        dataMap = new JSONDeserializer&lt;Map&gt;().deserialize(data);
        return dataMap;
    }
</snippet></ROW><ROW><id>5515445</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>5515445</id><snippet>If-None-Match</snippet></ROW><ROW><id>5515445</id><snippet>Last-Modified</snippet></ROW><ROW><id>5515445</id><snippet>ETag</snippet></ROW><ROW><id>5515773</id><snippet>numpy</snippet></ROW><ROW><id>5515994</id><snippet>&lt;img src="/matplot/makegraph?arg1=foo" /&gt;
</snippet></ROW><ROW><id>5515994</id><snippet>makegraph</snippet></ROW><ROW><id>5515994</id><snippet>import cStringIO
from matplotlib.figure import Figure                      
from matplotlib.backends.backend_agg import FigureCanvasAgg

fig = Figure(figsize=[4,4])                               
ax = fig.add_axes([.1,.1,.8,.8])                          
ax.scatter([1,2], [3,4])                                  
canvas = FigureCanvasAgg(fig)

# write image data to a string buffer and get the PNG image bytes
buf = cStringIO.StringIO()
canvas.print_png(buf)
data = buf.getvalue()

# pseudo-code for generating the http response from your
# webserver, and writing the bytes back to the browser.
# replace this with corresponding code for your web framework
headers = {
    'Content-Type': 'image/png',
    'Content-Length': len(data)
    }
response.write(200, 'OK', headers, data)
</snippet></ROW><ROW><id>5516153</id><snippet>nan</snippet></ROW><ROW><id>5516153</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>5516153</id><snippet>close_prices['stdev_5d']
</snippet></ROW><ROW><id>5516153</id><snippet>NaN</snippet></ROW><ROW><id>5516153</id><snippet>df</snippet></ROW><ROW><id>5516153</id><snippet>numpy.nan</snippet></ROW><ROW><id>5516153</id><snippet>datetime</snippet></ROW><ROW><id>5516153</id><snippet>pytz</snippet></ROW><ROW><id>5516153</id><snippet>&gt;&gt;&gt; df.info
&lt;bound method DataFrame.info of &lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 86400 entries , 2011-03-21 00:00:00-04:00 to 2011-03-21 23:59:59-04:00
etf                                         18390  non-null values
etfvol                                      18390  non-null values
fut                                         29446  non-null values
futvol                                      23446  non-null values
...
&gt;&gt;&gt; # ET is a pytz object...
&gt;&gt;&gt; et
&lt;DstTzInfo 'US/Eastern' EST-1 day, 19:00:00 STD&gt;
&gt;&gt;&gt; # To get the futures quote at 9:45, eastern time...
&gt;&gt;&gt; df.xs(et.localize(dt.datetime(2011,3,21,9,45,0)))['fut']
1291.75
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5516153</id><snippet>pandas.TimeSeries</snippet></ROW><ROW><id>5516153</id><snippet>&gt;&gt;&gt; df['fut'].fill(method='pad')/df['fut'].fill(method='pad').shift(600)
</snippet></ROW><ROW><id>5516153</id><snippet>.shift(600)</snippet></ROW><ROW><id>5516402</id><snippet>input</snippet></ROW><ROW><id>5516402</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>5516402</id><snippet>action</snippet></ROW><ROW><id>5516402</id><snippet>false</snippet></ROW><ROW><id>5516699</id><snippet>from sorl.thumbnail import get_thumbnail

im = get_thumbnail(my_file, '100x100', crop='center', quality=99)
</snippet></ROW><ROW><id>5517322</id><snippet>object1</snippet></ROW><ROW><id>5517322</id><snippet>def __getattr__(self, key):
    return self.get(key)
</snippet></ROW><ROW><id>5517322</id><snippet>__getattr__</snippet></ROW><ROW><id>5517322</id><snippet>class DictWrapper(object):
    def __init__(self, d):
        self.d = d
    def __getattr__(self, key):
        return self.d[key]
</snippet></ROW><ROW><id>5517322</id><snippet>try:
    return self.get(key)
except KeyError as e:
    raise AttributeError(e)
</snippet></ROW><ROW><id>5517322</id><snippet>__getattr__</snippet></ROW><ROW><id>5517355</id><snippet>LogEntry.objects.filter(content_type__name='visitor') 
</snippet></ROW><ROW><id>5517443</id><snippet>cursor.execute("select freq from matrix_brown where a_id in (?) and b_id in (?)", (b_item_id,b_after_id))
</snippet></ROW><ROW><id>5517489</id><snippet>class MyBase(object):
   _x = 3
   x = property( lambda s: s._x, doc="Documentation for property x")

class MyObj(MyBase):
   _x = 0
</snippet></ROW><ROW><id>5517489</id><snippet>&gt;&gt;&gt; m = MyObj()
&gt;&gt;&gt; m.x
0
</snippet></ROW><ROW><id>5517489</id><snippet>help(m)</snippet></ROW><ROW><id>5517489</id><snippet>x</snippet></ROW><ROW><id>5517634</id><snippet>__init__.py</snippet></ROW><ROW><id>5517634</id><snippet>import eggs.spam</snippet></ROW><ROW><id>5517694</id><snippet>eval()</snippet></ROW><ROW><id>5517694</id><snippet>import</snippet></ROW><ROW><id>5517694</id><snippet>eval()</snippet></ROW><ROW><id>5517694</id><snippet>eval('imp{0}rt os'.format('o')) # 'imp{0}rt os'.format('o') -&gt; 'import os'
</snippet></ROW><ROW><id>5517694</id><snippet>os</snippet></ROW><ROW><id>5517694</id><snippet>import</snippet></ROW><ROW><id>5517696</id><snippet>import sys, pdb

def except_hook(exctype, value, traceback):
    if previous_except_hook:
        previous_except_hook(exctype, value, traceback)

    pdb.post_mortem(traceback)

previous_except_hook = sys.excepthook
sys.excepthook = except_hook
</snippet></ROW><ROW><id>5517696</id><snippet>&gt;&gt;&gt; 1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>5517696</id><snippet>&gt;&gt;&gt; import fullofeels
&gt;&gt;&gt; 1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
&gt; &lt;stdin&gt;(1)&lt;module&gt;()
(Pdb)
</snippet></ROW><ROW><id>5517927</id><snippet>tempdir = tempfile.mkdtemp()
xvfb = subprocess.Popen(['Xvfb', ':99', '-nolisten', 'tcp', '-fbdir', tempdir])
</snippet></ROW><ROW><id>5517927</id><snippet>wait</snippet></ROW><ROW><id>5517927</id><snippet>xvfb.terminate()
# At this point, `ps -C Xvfb` may still show a running process
# (because signal delivery is asynchronous) or a zombie.
xvfb.wait()
# Now the child is dead and reaped (assuming it didn't catch SIGTERM).
</snippet></ROW><ROW><id>5518110</id><snippet>attr()</snippet></ROW><ROW><id>5518110</id><snippet>&gt;&gt;&gt; html='&lt;div&gt;arya stark&lt;img src="1111"/&gt;ahahah&lt;img src="2222"/&gt;&lt;/div&gt;'
&gt;&gt;&gt; a=PyQuery(html)
&gt;&gt;&gt; a.outerHtml()
'&lt;div&gt;arya stark&lt;img src="1111"&gt;ahahah&lt;img src="2222"&gt;&lt;/div&gt;'
&gt;&gt;&gt; for img in a('img'):
...     PyQuery(img).attr('src', "whatever")
...
[&lt;img&gt;]
[&lt;img&gt;]
&gt;&gt;&gt; a.outerHtml()
'&lt;div&gt;arya stark&lt;img src="whatever"&gt;ahahah&lt;img src="whatever"&gt;&lt;/div&gt;'
</snippet></ROW><ROW><id>5518168</id><snippet>[distutils]
index-servers =
    pypi
    internal

[pypi]
repository: http://pypi.python.org/pypi
username: brad
password: &lt;pass&gt;

[internal]
repository: http://localhost:8080
username: brad
password: &lt;pass&gt;
</snippet></ROW><ROW><id>5518168</id><snippet>alias ppup_internal='python setup.py bdist_egg sdist upload -r internal'
alias ppup_public='python setup.py bdist_egg sdist upload'
</snippet></ROW><ROW><id>5518168</id><snippet>% ppup_internal
...
running upload
Submitting dist/foo-0.0.0.tar.gz to http://localhost:8080
Server response (200): OK
</snippet></ROW><ROW><id>5518168</id><snippet>from distutils import config
config.PyPIRCCommand.DEFAULT_REPOSITORY = 'internal'
from setuptools import setup

setup(
    name='foo',
    ...
</snippet></ROW><ROW><id>5518168</id><snippet>% python setup.py sdist upload 
...
running upload
Submitting dist/foo-0.0.0.tar.gz to http://localhost:8080
Server response (200): OK

% python setup.py sdist upload -r pypi
...
running upload
Submitting dist/foo-0.0.0.tar.gz to http://pypi.python.org/pypi
Server response (200): OK
</snippet></ROW><ROW><id>5518168</id><snippet>class PyPIRCCommand(Command):

    DEFAULT_REPOSITORY = 'http://pypi.python.org/pypi'

    def _read_pypirc(self):
        if os.path.exists(rc):
            self.announce('Using PyPI login from %s' % rc)
            repository = self.repository or self.DEFAULT_REPOSITORY
            realm = self.realm or self.DEFAULT_REALM
</snippet></ROW><ROW><id>5518168</id><snippet>[server-login]
repository: http://localhost:8080
username: brad
password: &lt;pass&gt;

[pypi]
repository: http://pypi.python.org/pypi
username: brad
password: &lt;pass&gt;
</snippet></ROW><ROW><id>5518168</id><snippet>% python setup.py sdist upload
...
running upload
Submitting dist/foo-0.0.0.tar.gz to http://localhost:8080
Server response (200): OK    
</snippet></ROW><ROW><id>5518168</id><snippet>% python setup.py sdist upload -r pypi
...
running upload
Submitting dist/foo-0.0.0.tar.gz to http://localhost:8080
Server response (200): OK    
</snippet></ROW><ROW><id>5518386</id><snippet>configure.py</snippet></ROW><ROW><id>5518386</id><snippet>setup.py</snippet></ROW><ROW><id>5518513</id><snippet>d = [[] for x in xrange(n)]
</snippet></ROW><ROW><id>5518513</id><snippet>from itertools import repeat
d = [[] for i in repeat(None, n)]
</snippet></ROW><ROW><id>5518513</id><snippet>int</snippet></ROW><ROW><id>5518513</id><snippet>d = numpy.empty((n, 0)).tolist()
</snippet></ROW><ROW><id>5518667</id><snippet>for a, b, c in your_generator:
    # do stuff
</snippet></ROW><ROW><id>5518667</id><snippet>your_generator</snippet></ROW><ROW><id>5518667</id><snippet>n</snippet></ROW><ROW><id>5518667</id><snippet>for</snippet></ROW><ROW><id>5518667</id><snippet>itertools.izip_longest(*[your_generator]*n)
</snippet></ROW><ROW><id>5518667</id><snippet>itertools.izip_longest(*[itertools.chain(*your_generator)]*n)
</snippet></ROW><ROW><id>5518667</id><snippet>&gt;&gt;&gt; from itertools import izip_longest, chain, combinations
&gt;&gt;&gt; for a, b, c, d in izip_longest(*[chain(*combinations(range(4), 2))]*4):
...     print a, b, c, d
... 
0 1 0 2
0 3 1 2
1 3 2 3
</snippet></ROW><ROW><id>5518841</id><snippet>def edit_contact(request, contact_pk=None):
    if contact_pk:
        my_contact = Contact.objects.get(pk=contact_pk)
    else:
        my_contact = Contact()
    CommunicationFormSet = inlineformset_factory(Contact, Communication)
    if request.POST:
        contact_form = ContactForm(request.POST, instance=my_contact)
        communication_set = CommunicationFormSet(request.POST,
                                                 instance=my_contact)
        if contact_form.is_valid() and communication_set.is_valid():
            contact_form.save()
            communication_set.save()
    else:
        contact_form = ContactForm(instance=my_contact)
        communication_set = CommunicationFormSet(instance=my_contact)

    return render_to_response('my_template.html', 
                              {'form': contact_form, 'formset':communication_set})
</snippet></ROW><ROW><id>5518841</id><snippet>&lt;form action="" method="POST"&gt;
  {{ form.as_p }}
  {{ formset }}
&lt;/form&gt;
</snippet></ROW><ROW><id>5518923</id><snippet>--cover-package=</snippet></ROW><ROW><id>5519039</id><snippet>import wx
import gui

class MainFrame(wx.Frame):
    def __init__( self, parent ):
        wx.Frame.__init__ (self, parent)

        # Layout my frame
        sizer = wx.BoxSizer(wx.VERTICAL)
        self.panel = wx.Panel(self)
        self.panel.Layout()
        self.panel.Bind(wx.EVT_RIGHT_DOWN, self.showPopupMenu)
        sizer.Add( self.panel, 1, wx.EXPAND |wx.ALL, 0 )
        self.SetSizer( sizer )
        self.Layout()

        # Add the menu
        self.popupA = wx.NewId()
        self.popupOne = wx.Menu()

        my_a = self.popupOne.Append(self.popupA, "A", kind=wx.ITEM_CHECK)
        self.popupOne.Check(self.popupA, True)

        self.Bind(wx.EVT_MENU, self.commandA, my_a)

        self.menu = wx.Menu()
        self.menu.AppendMenu(-1, 'One', self.popupOne)

    def showPopupMenu(self, event):
        print "in showPopupMenu(): ",self.popupOne.IsChecked(self.popupA)
        self.PopupMenu(self.menu)

    def commandA(self, event):
        event.Skip()
        print "in commandA(): ", self.popupOne.IsChecked(self.popupA)

class app(wx.App):
    def OnInit(self):
        self.m_frame = MainFrame(None)
        self.m_frame.Show()
        self.SetTopWindow(self.m_frame)
        return True

app = app(0)
app.MainLoop()
</snippet></ROW><ROW><id>5519204</id><snippet>class GuiWidget():
    def __init__(self, accessFunc):
        self.accessFunc = accessFunc
    def inc(self):
        self.accessFunc(self.accessFunc() + 1)

storage = {"k1":0, "k2":0}

def getAccessFunc(key):
    return lambda v = None: v is not None and storage.update({key: v}) or storage[key]

w1 = GuiWidget(getAccessFunc("k1"))
w2 = GuiWidget(getAccessFunc("k2"))


# calls from gui thread
print storage
w1.inc()
print storage
w2.inc()
print storage  
</snippet></ROW><ROW><id>5519263</id><snippet>from Bio.Alphabet import IUPAC
from Bio import Seq
my_prot=Seq.Seq("AGTACACTGGT",IUPAC.protein)
</snippet></ROW><ROW><id>5519263</id><snippet>import Bio.Seq
print type(Bio.Seq)
&gt;&gt;&gt; &lt;type 'module'&gt;
print type(Bio.Seq.Seq)
&gt;&gt;&gt; &lt;type 'classobj'&gt;
</snippet></ROW><ROW><id>5519823</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5519823</id><snippet>sys.path</snippet></ROW><ROW><id>5519823</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>5519823</id><snippet>os.exec</snippet></ROW><ROW><id>5519823</id><snippet>os.exec..e()</snippet></ROW><ROW><id>5519933</id><snippet>'help'[:-0]</snippet></ROW><ROW><id>5519933</id><snippet>'help'[:0]</snippet></ROW><ROW><id>5519933</id><snippet>''</snippet></ROW><ROW><id>5519933</id><snippet>-0</snippet></ROW><ROW><id>5519933</id><snippet>0</snippet></ROW><ROW><id>5519933</id><snippet>&gt;&gt;&gt; -0
0
</snippet></ROW><ROW><id>5519971</id><snippet>choices</snippet></ROW><ROW><id>5519971</id><snippet>default</snippet></ROW><ROW><id>5519971</id><snippet>my_choices = [('1', 'Choice1'), ('2', 'Choice2'), ('3', 'Choice3')]

SelectMultipleField(choices = my_choices, default = ['1', '3'])
</snippet></ROW><ROW><id>5519971</id><snippet>data</snippet></ROW><ROW><id>5519971</id><snippet>data</snippet></ROW><ROW><id>5519971</id><snippet>form.myfield.data = ['1', '3']
</snippet></ROW><ROW><id>5519971</id><snippet>Form</snippet></ROW><ROW><id>5519971</id><snippet>formdata</snippet></ROW><ROW><id>5519971</id><snippet>form = MyForm(myfield = ['1', '3'])
</snippet></ROW><ROW><id>5520216</id><snippet>def ind(the_string, the_char):
   i = 0
   for a_char in the_string:
       if a_char == the_char: return i
       i += 1
   return -1
</snippet></ROW><ROW><id>5520324</id><snippet>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; y = [4, 5, 6]
&gt;&gt;&gt; zipped = zip(x, y)
&gt;&gt;&gt; zipped
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>5520471</id><snippet>[]</snippet></ROW><ROW><id>5520471</id><snippet>None</snippet></ROW><ROW><id>5520471</id><snippet>sgSlate['sg_client_2']</snippet></ROW><ROW><id>5520471</id><snippet>None</snippet></ROW><ROW><id>5520471</id><snippet>sgSlate['sg_client_2']['name']</snippet></ROW><ROW><id>5520589</id><snippet>__module__</snippet></ROW><ROW><id>5520593</id><snippet>data = File.read(16 * 1024 * 1024)
</snippet></ROW><ROW><id>5520611</id><snippet>import simplejson
</snippet></ROW><ROW><id>5520644</id><snippet>object_pairs_hook</snippet></ROW><ROW><id>5520644</id><snippet>json</snippet></ROW><ROW><id>5520644</id><snippet>OrderedDictionary</snippet></ROW><ROW><id>5520844</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>5520844</id><snippet>with</snippet></ROW><ROW><id>5520844</id><snippet>sys.path</snippet></ROW><ROW><id>5520844</id><snippet>python -m site</snippet></ROW><ROW><id>5521110</id><snippet>enclosed_section=tag:table,attributes:id;threadslist
thread=tag:a,attributes:id;REthread_title_
list_next_page=type:next_page,attributes:anchor_text;&gt;
post=tag:div,attributes:id;REpost_message_
thread_next_page=type:next_page,attributes:anchor_text;&gt;
</snippet></ROW><ROW><id>5521110</id><snippet>enclosed_section=tag:table,attributes:id;forum_table
thread=tag:a,attributes:class;topic_title
list_next_page=tag:a,attributes:rel;next,inside_tag_attribute:href
post=tag:div,attributes:class;post entry-content |
thread_next_page=tag:a,attributes:rel;next,inside_tag_attribute:href
post_count_section=tag:td,attributes:class;stats
post_count=tag:li,attributes:,reg_exp:(\d+) Repl
</snippet></ROW><ROW><id>5521383</id><snippet>__init__</snippet></ROW><ROW><id>5521383</id><snippet>__init__</snippet></ROW><ROW><id>5521383</id><snippet>run</snippet></ROW><ROW><id>5521383</id><snippet>start</snippet></ROW><ROW><id>5521383</id><snippet>recv</snippet></ROW><ROW><id>5521383</id><snippet>select.select</snippet></ROW><ROW><id>5521383</id><snippet>socketserver.py</snippet></ROW><ROW><id>5521383</id><snippet>import socket
import threading
import struct
import string

class clientThread(threading.Thread):
    def __init__(self, serv):
        threading.Thread.__init__(self)
        self.server = serv
        self.clientList = []
        self.running = True
        print("Client thread created. . .")
    def run(self):
        print("Beginning client thread loop. . .")
        while self.running:
            for client in self.clientList:
                message = client.sock.recv(self.server.BUFFSIZE)
                if message != None and message != "":
                    client.update(message)

class clientObject(object):
    def __init__(self,clientInfo):
        self.sock = clientInfo[0]
        self.address = clientInfo[1]
    def update(self,message):
        self.sock.send("Testamundo.\r\n".encode())

class Server(object):
    def __init__(self):
        self.HOST = 'localhost'
        self.PORT = 22085
        self.BUFFSIZE = 1024
        self.ADDRESS = (self.HOST,self.PORT)
        self.clientList = []
        input("Press enter to start the server. . .")
        self.running = True
        self.serverSock = socket.socket()
        self.serverSock.bind(self.ADDRESS)
        self.serverSock.listen(2)
        self.clientThread = clientThread(self)
        print("Starting client thread. . .")
        self.clientThread.start()
        print("Awaiting connections. . .")
        while self.running:
            clientInfo = self.serverSock.accept()
            print("Client connected from {}.".format(clientInfo[1]))
            self.clientThread.clientList.append(clientObject(clientInfo))

        self.serverSock.close()
        print("- end -")

serv = Server()
</snippet></ROW><ROW><id>5521383</id><snippet>import socket
import string

address = ('localhost',22085)
mySocket = socket.socket()

mySocket.connect(address)
print("Connected successfully!")
mySocket.send('blah'.encode())
print(mySocket.recv(1024))
</snippet></ROW><ROW><id>5521383</id><snippet>Press enter to start the server. . .
Client thread created. . .
Starting client thread. . .
Beginning client thread loop. . .
Awaiting connections. . .
Client connected from ('127.0.0.1', 52850).
</snippet></ROW><ROW><id>5521383</id><snippet>Connected successfully!
b'Testamundo.\r\n'
</snippet></ROW><ROW><id>5521590</id><snippet>In [1]: import itertools
In [2]: list(itertools.product((2006,2007,2008), (1,2)))
Out[2]: [(2006, 1), (2006, 2), (2007, 1), (2007, 2), (2008, 1), (2008, 2)]
</snippet></ROW><ROW><id>5521590</id><snippet>In [1]: from django.db import connection

In [2]: Lecture.objects.values_list('year','term').distinct()
Out[2]: [(2001, 1), (2001, 2), (2002, 1), (2002, 2), (2003, 1), (2003, 2), (2004, 1), (2004, 2)]

In [3]: connection.queries
Out[3]: 
[{'sql': u'SELECT DISTINCT "backend_lecture"."year", "backend_lecture"."term" FROM    "backend_lecture" LIMIT 21', 'time': '0.001'}]
</snippet></ROW><ROW><id>5521619</id><snippet>def word_reader(filename, L):
  L2 = L+2
  # returns an iterator
  return (word.strip() for word in open(filename) \
          if len(word) &lt; L2 and len(word) &gt; 2)
</snippet></ROW><ROW><id>5521619</id><snippet>words = word_reader('/usr/share/dict/words', len(rack))
</snippet></ROW><ROW><id>5521619</id><snippet>word</snippet></ROW><ROW><id>5521619</id><snippet>rackset = frozenset(rack)
scored =  [(score_word(word), word) for word in words if word[0] in rackset \
           and spellable(word, rack)]
</snippet></ROW><ROW><id>5521619</id><snippet>def spellable(word, rack):
    return all( [rack.count(letter) &gt;= word.count(letter) \
                 for letter in set(word)] )
</snippet></ROW><ROW><id>5521619</id><snippet>aekst skate takes
</snippet></ROW><ROW><id>5521619</id><snippet>f = open('/usr/share/dict/words')
d = {}
lets = set('abcdefghijklmnopqrstuvwxyz\n')
for word in f:
  if len(set(word) - lets) == 0 and len(word) &gt; 2 and len(word) &lt; 9:
    word = word.strip()
    key = ''.join(sorted(word))
    if key in d:
      d[key].append(word)
    else:
      d[key] = [word]
f.close()
anadict = [' '.join([key]+value) for key, value in d.iteritems()]
anadict.sort()
f = open('anadict.txt','w')
f.write('\n'.join(anadict))
f.close()
</snippet></ROW><ROW><id>5521619</id><snippet>from bisect import bisect_left
from itertools import combinations
from time import time

def loadvars():
  f = open('anadict.txt','r')
  anadict = f.read().split('\n')
  f.close()
  return anadict

scores = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}

def score_word(word):
  return sum([scores[c] for c in word])

def findwords(rack, anadict):
  rack = ''.join(sorted(rack))
  foundwords = []
  for i in xrange(2,len(rack)+1):
    for comb in combinations(rack,i):
      ana = ''.join(comb)
      j = bisect_left(anadict, ana)
      if j == len(anadict):
        continue
      words = anadict[j].split()
      if words[0] == ana:
        foundwords.extend(words[1:])
  return foundwords

if __name__ == "__main__":
  import sys
  if len(sys.argv) == 2:
    rack = sys.argv[1].strip()
  else:
    print """Usage: python cheat_at_scrabble.py &lt;yourrack&gt;"""
    exit()
  t = time()
  anadict = loadvars()
  print "Dictionary loading time:",(time()-t)
  t = time()
  foundwords = set(findwords(rack, anadict))
  scored = [(score_word(word), word) for word in foundwords]
  scored.sort()
  for score, word in scored:
    print "%d\t%s" % (score,word)
  print "Time elapsed:", (time()-t)
</snippet></ROW><ROW><id>5521621</id><snippet>&gt;&gt;&gt; import gmpy
&gt;&gt;&gt; gmpy.scan1(136)
3
&gt;&gt;&gt; bin(136)
'0b10001000'
</snippet></ROW><ROW><id>5521921</id><snippet>__new__</snippet></ROW><ROW><id>5522477</id><snippet>ChoiceField</snippet></ROW><ROW><id>5522477</id><snippet>blank_choice</snippet></ROW><ROW><id>5522477</id><snippet>from django import forms


class ChoiceField(forms.ChoiceField):
    def __init__(self, *args, **kwargs):
        self.blank_choice = kwargs.pop('blank_choice', None)
        super(ChoiceField, self).__init__(*args, **kwargs)

    def _get_choices(self):
        return self._choices

    def _set_choices(self, value):
        choices = list(value)
        if self.blank_choice:
            choices = [('', self.blank_choice)] + choices
        self._choices = self.widget.choices = choices

    choices = property(_get_choices, _set_choices)
</snippet></ROW><ROW><id>5522477</id><snippet>None</snippet></ROW><ROW><id>5522477</id><snippet>self.blank_choice</snippet></ROW><ROW><id>5522477</id><snippet>django.core.validators.EMPTY_VALUES</snippet></ROW><ROW><id>5522477</id><snippet>ChoiceField</snippet></ROW><ROW><id>5522477</id><snippet>blank_choice</snippet></ROW><ROW><id>5522477</id><snippet>from django import forms
from myproject.formfields import ChoiceField

NAMES = (
    ('brad', 'Brad'),
    ('sam', 'Sam'),
)

class MyForm(forms.Form):
    names = ChoiceField(choices=NAMES, blank_choice='Please choose:')
</snippet></ROW><ROW><id>5522548</id><snippet>os.startfile()</snippet></ROW><ROW><id>5522548</id><snippet>os.system()</snippet></ROW><ROW><id>5522548</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>5522548</id><snippet>import os
import sys
os.startfile(filename.encode(sys.getfilesystemencoding()))
</snippet></ROW><ROW><id>5523071</id><snippet>words = set(line.strip() for line in open("words"))
for w in words:
    even, odd = w[::2], w[1::2]
    if even in words and odd in words:
        print even, odd
</snippet></ROW><ROW><id>5523314</id><snippet>index(c)</snippet></ROW><ROW><id>5523314</id><snippet>'a'</snippet></ROW><ROW><id>5523314</id><snippet>'a'</snippet></ROW><ROW><id>5523314</id><snippet>enumerate()</snippet></ROW><ROW><id>5523314</id><snippet>for i, c in enumerate(word):
    # check whether ``i`` is even/odd, etc
</snippet></ROW><ROW><id>5523385</id><snippet>glob</snippet></ROW><ROW><id>5523385</id><snippet>shutil</snippet></ROW><ROW><id>5523385</id><snippet>ods</snippet></ROW><ROW><id>5523385</id><snippet>א</snippet></ROW><ROW><id>5523385</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; files=glob.glob('*.ods')      # List of Byte string file names
&gt;&gt;&gt; for file in files:
...     shutil.copy2(file, 'א')   # Byte string directory name
... 
</snippet></ROW><ROW><id>5523385</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; files=glob.glob(u'*.ods')     # List of Unicode file names
&gt;&gt;&gt; for file in files:
...     shutil.copy2(file, u'א')  # Unicode directory name
</snippet></ROW><ROW><id>5523385</id><snippet>os.getcwd()</snippet></ROW><ROW><id>5523385</id><snippet>.</snippet></ROW><ROW><id>5523385</id><snippet># -*- coding: utf-8 -*-
import os
import shutil
import glob

os.chdir('א')                   # CD to the destination Unicode directory
print os.getcwd()               # DEBUG: Make sure you're in the right place
files=glob.glob('../*.ods')     # List of Byte string file names
for file in files:
        shutil.copy2(file, '.') # Copy each file
# Don't forget to go back to the original directory here, if it matters
</snippet></ROW><ROW><id>5523385</id><snippet>shutil.copy2(src, dest)</snippet></ROW><ROW><id>5523385</id><snippet>shutil</snippet></ROW><ROW><id>5523385</id><snippet>&gt;&gt;&gt; files=glob.glob('*.ods')
&gt;&gt;&gt; for file in files:
...     shutil.copy2(file, u'א')
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "/usr/lib/python2.6/shutil.py", line 98, in copy2
    dst = os.path.join(dst, os.path.basename(src))
  File "/usr/lib/python2.6/posixpath.py", line 70, in join
    path += '/' + b
UnicodeDecodeError: 'ascii' codec can't decode byte 0xd7 in position 1: 
                    ordinal not in range(128)
</snippet></ROW><ROW><id>5523385</id><snippet>'א'</snippet></ROW><ROW><id>5523385</id><snippet>u'א'</snippet></ROW><ROW><id>5523385</id><snippet>basedir</snippet></ROW><ROW><id>5523385</id><snippet>str</snippet></ROW><ROW><id>5523385</id><snippet>unicode</snippet></ROW><ROW><id>5523731</id><snippet>setup(
  packages = ["RTcore"], 
  package_dir = {"RTcore": "src/RTcore"}, 
  package_data = {"RTcore": ["ui/*"]}, 
  data_files = [("Data", ["/full/path/data.sqlite3"])],
 )
</snippet></ROW><ROW><id>5523731</id><snippet>dir_path = os.path.dirname(os.path.abspath(__file__))
os.chdir(dir_path)
</snippet></ROW><ROW><id>5523771</id><snippet>dumpObject</snippet></ROW><ROW><id>5523771</id><snippet>dumpObjectTree</snippet></ROW><ROW><id>5523799</id><snippet>email.utils.parsedate(date)
</snippet></ROW><ROW><id>5523799</id><snippet>import email.utils
from time import mktime
from datetime import datetime

example_date = "Sat, 02 Mar 2011 15:00:00"
date_parsed = email.utils.parsedate(example_date)
dt = datetime.fromtimestamp(mktime(date_parsed))

today = datetime.today()
diff_date = today - dt  # timedelta object

print "%s days, %s hours ago" \
    % (diff_date.days, diff_date.seconds / 3600)
</snippet></ROW><ROW><id>5523799</id><snippet>31 days, 2 hours ago
</snippet></ROW><ROW><id>5523855</id><snippet>test</snippet></ROW><ROW><id>5523855</id><snippet>unittest</snippet></ROW><ROW><id>5524480</id><snippet>do shell script "source ~/.profile; idle3.2 -s"
</snippet></ROW><ROW><id>5524652</id><snippet>from PIL import Image, ImageChops
import math

def image_entropy(img):
    """calculate the entropy of an image"""
    # this could be made more efficient using numpy
    histogram = img.histogram()
    histogram_length = sum(histogram)
    samples_probability = [float(h) / histogram_length for h in histogram]
    return -sum([p * math.log(p, 2) for p in samples_probability if p != 0])

# testing..

img1 = Image.open('SnowCam_main1.jpg')
img2 = Image.open('SnowCam_main2.jpg')
img3 = Image.open('SnowCam_main3.jpg')

# No Difference
img = ImageChops.difference(img1,img1)
img.save('test_diff1.png')
print image_entropy(img) # 1.58496250072

# Small Difference
img = ImageChops.difference(img1,img2)
img.save('test_diff2.png') 
print image_entropy(img) # 5.76452986917

# Large Difference
img = ImageChops.difference(img1,img3)
img.save('test_diff3.png')
print image_entropy(img) # 8.15698432026
</snippet></ROW><ROW><id>5524652</id><snippet>import numpy as np
def image_entropy(img):
    w,h = img.size
    a = np.array(img.convert('RGB')).reshape((w*h,3))
    h,e = np.histogramdd(a, bins=(16,)*3, range=((0,256),)*3)
    prob = h/np.sum(h) # normalize
    prob = prob[prob&gt;0] # remove zeros
    return -np.sum(prob*np.log2(prob))
</snippet></ROW><ROW><id>5524958</id><snippet>os.system</snippet></ROW><ROW><id>5524958</id><snippet>0</snippet></ROW><ROW><id>5524958</id><snippet>subprocess.call</snippet></ROW><ROW><id>5524958</id><snippet>&gt;&gt;&gt; subprocess.call(['ls', '-a'])
0
</snippet></ROW><ROW><id>5524958</id><snippet>ls</snippet></ROW><ROW><id>5524958</id><snippet>&gt;&gt;&gt; subprocess.call(['ls', '-T'])   # option -T requires an argument
2
</snippet></ROW><ROW><id>5524958</id><snippet>2</snippet></ROW><ROW><id>5524958</id><snippet>javac</snippet></ROW><ROW><id>5524958</id><snippet>0</snippet></ROW><ROW><id>5524958</id><snippet>subprocess</snippet></ROW><ROW><id>5525015</id><snippet>1 == '1'
False
</snippet></ROW><ROW><id>5525015</id><snippet>guessfoo = int(input('Guess my number: '))
</snippet></ROW><ROW><id>5525015</id><snippet>try:
    foo = 1
    guessfoo = int(input('Guess my number: '))
    if foo == guessfoo:
        print('Well done, You guessed it!')
    else:
        print('haha, fail.')
except ValueError:
    # cannot cast your input
    pass
</snippet></ROW><ROW><id>5525015</id><snippet>$ python2 test.py 
Guess my number: 1
Well done, You guessed it!
</snippet></ROW><ROW><id>5525119</id><snippet>fcntl</snippet></ROW><ROW><id>5525119</id><snippet>select</snippet></ROW><ROW><id>5525119</id><snippet>poll</snippet></ROW><ROW><id>5525119</id><snippet>signal</snippet></ROW><ROW><id>5525121</id><snippet>StringIO</snippet></ROW><ROW><id>5525486</id><snippet>eval()</snippet></ROW><ROW><id>5525511</id><snippet>__init__</snippet></ROW><ROW><id>5525511</id><snippet>__init__</snippet></ROW><ROW><id>5525512</id><snippet>guessleg = int(input('Guess the number of legs: '))
</snippet></ROW><ROW><id>5525512</id><snippet>inp_val = raw_input('Guess the number of legs: ')
try:
    guess_num = int(inp_val)
    if guess_num == leg:
        print('True')
    else:
        print('False')
except ValueError:
    if inp_val == 'back':
        loop = 0
    else:
        print 'Invalid entry'
    animalmenu()
</snippet></ROW><ROW><id>5525549</id><snippet>C:\</snippet></ROW><ROW><id>5525549</id><snippet>cd</snippet></ROW><ROW><id>5525557</id><snippet>os.path.dirname(__file__)
</snippet></ROW><ROW><id>5525722</id><snippet>==</snippet></ROW><ROW><id>5525722</id><snippet>x is None</snippet></ROW><ROW><id>5525722</id><snippet>None</snippet></ROW><ROW><id>5525722</id><snippet>NoneType</snippet></ROW><ROW><id>5525722</id><snippet>x is y</snippet></ROW><ROW><id>5525722</id><snippet>x</snippet></ROW><ROW><id>5525722</id><snippet>y</snippet></ROW><ROW><id>5525955</id><snippet>__init__</snippet></ROW><ROW><id>5525955</id><snippet>class Server(socketserver.BaseRequestHandler):
    def __init__(self):
        self.address = self.client_address[0]
        print("%s connected." % str(self.address[1]))
        super(Server,self).__init__()                  # Init your base class
</snippet></ROW><ROW><id>5526088</id><snippet>sorted(os.listdir('.'), key=lambda f: int(f.split('.')[0][1:]))
</snippet></ROW><ROW><id>5526165</id><snippet>L = [(f1, int(f2)) for x in a.split(",") for f1, f2 in (x.split(":"),)]
</snippet></ROW><ROW><id>5526165</id><snippet>L = []
for x in a.split(","):
    f1, f2 = x.split(":")
    L.append((f1, int(f2)))
</snippet></ROW><ROW><id>5526686</id><snippet>^(/(?!wiki)[^:#]*|[^#/][^#]*)$</snippet></ROW><ROW><id>5526707</id><snippet>import itertools

letters = [ chr(l) for l in range(ord('a'), ord('z')+1) ]

def combinations(skip_to=None):
    combinations = ( itertools.combinations_with_replacement(letters, k) for k in range(1, len(letters)+1) )
    flat = itertools.chain.from_iterable( combinations )
    return flat if skip_to is None else itertools.dropwhile( lambda x: x != skip_to, flat )
</snippet></ROW><ROW><id>5526707</id><snippet>itertools</snippet></ROW><ROW><id>5526785</id><snippet>before = ['JACKIE:34', 'MATT:444', 'CEN:12', 'PETE:12', 'RANDY:92', 'MITCH:2', 'JAN:2']
after = [(name, int(value)) for name, value in (x.split(':') for x in before)]
print after
</snippet></ROW><ROW><id>5527377</id><snippet>import re
infilename = "infile.txt"
outfilename = "outfile.txt"

infile = open(infilename)
outfile = open(outfilename, "w")

pat = re.compile('^(.+?(\d*)) *$',re.M)
def zaa(mat):
    if mat.group(2):
        return '("%s" "#%s")' % (mat.group(1),str(int(mat.group(2))+9))
    else:
        return '("%s" "#")' % (mat.group(1))

outfile.write('(bookmarks \n')
for line in infile:
    outfile.write(pat.sub(zaa,line))
outfile.write(')')
</snippet></ROW><ROW><id>5527532</id><snippet>doc = open('your file')
for line in doc.readline():
    if len(line) != 0:
        line.split(',')
</snippet></ROW><ROW><id>5527610</id><snippet>sed</snippet></ROW><ROW><id>5527610</id><snippet>sed -e 's/    /\t/g' test.py &gt; test.new
</snippet></ROW><ROW><id>5527714</id><snippet>#!/bin/bash

awk -F'&lt;U0+|&gt;' '{
    for(i=1;i&lt;=NF;i++)
        if($i ~ "^[0-9A-F]+$")
            $i=sprintf("%c", strtonum("0x"$i))
}1' OFS="" /path/to/infile
</snippet></ROW><ROW><id>5527714</id><snippet>-F'&lt;U0+|&gt;'</snippet></ROW><ROW><id>5527714</id><snippet>&lt;U0+</snippet></ROW><ROW><id>5527714</id><snippet>&gt;</snippet></ROW><ROW><id>5527714</id><snippet>gsub()</snippet></ROW><ROW><id>5527714</id><snippet>for(i=1;i&lt;=NF;i++)</snippet></ROW><ROW><id>5527714</id><snippet>if($i ~ "^[0-9A-F]+$")</snippet></ROW><ROW><id>5527714</id><snippet>&lt;U006F&gt;</snippet></ROW><ROW><id>5527714</id><snippet>6F</snippet></ROW><ROW><id>5527714</id><snippet>$i=sprintf("%c", strtonum("0x"$i))</snippet></ROW><ROW><id>5527714</id><snippet>$i</snippet></ROW><ROW><id>5527714</id><snippet>"0x"</snippet></ROW><ROW><id>5527714</id><snippet>}1</snippet></ROW><ROW><id>5527714</id><snippet>print</snippet></ROW><ROW><id>5527714</id><snippet>OFS=""</snippet></ROW><ROW><id>5527714</id><snippet>&lt;U0+</snippet></ROW><ROW><id>5527714</id><snippet>&gt;</snippet></ROW><ROW><id>5527714</id><snippet>#!/bin/bash

awk '{
    while(match($0, /&lt;U[0-9A-F]+&gt;/)){
        pat = substr($0,RSTART,RLENGTH)
        gsub(/U0+|[&lt;&gt;]/,"",pat)
        asc = sprintf("%c", strtonum("0x"pat))
        $0 = substr($0, 1, RSTART-1) asc substr($0, RSTART+RLENGTH)
    }
}1' /path/to/infile
</snippet></ROW><ROW><id>5527845</id><snippet>__getattribute__()</snippet></ROW><ROW><id>5527933</id><snippet>for rads in range(-radius, radius):
</snippet></ROW><ROW><id>5527933</id><snippet>if (co-radius-1) &gt; 0:
</snippet></ROW><ROW><id>5527933</id><snippet>if (co-radius-1) &gt;= 0:
</snippet></ROW><ROW><id>5527943</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>5527943</id><snippet>import sys

for f in sys.stdin:
     print "Hello World: " + f,
</snippet></ROW><ROW><id>5527943</id><snippet>for f in sys.stdin</snippet></ROW><ROW><id>5528045</id><snippet>while IFS= read -r -n1 c;do printf "&lt;U%04X&gt;" "'$c"; done &lt; ./infile
</snippet></ROW><ROW><id>5528045</id><snippet>uni(){ c=$(cat); for((i=0;i&lt;${#c};i++)); do printf "&lt;U%04X&gt;" "'${c:i:1}"; done; }
</snippet></ROW><ROW><id>5528045</id><snippet>$ echo "abc" | uni
&lt;U0061&gt;&lt;U0062&gt;&lt;U0063&gt;
</snippet></ROW><ROW><id>5528045</id><snippet>#!/bin/bash

flag=0
while IFS= read -r -n1 c; do
    if [[ "$c" == '"' ]]; then
        ((flag^=1))
        printf "%c" "$c"
    elif [[ "$c" == $'\0' ]]; then
        echo
    elif ((flag)); then
        printf "&lt;U%04X&gt;" "'$c"
    else
        printf "%c" "$c"
    fi
done &lt; /path/to/infile
</snippet></ROW><ROW><id>5528045</id><snippet>$ cat ./unime
LC_TIME
d_t_fmt "%a %d %b %Y %T %Z"
d_fmt   "%d-%m-%Y"
t_fmt   "%T"
abday "Dom";"Seg";/
here is a string with "multiline
quotes";/

$ ./uni.sh
LC_TIME
d_t_fmt "&lt;U0025&gt;&lt;U0061&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0064&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0062&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0059&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U0054&gt;&lt;U0020&gt;&lt;U0025&gt;&lt;U005A&gt;"
d_fmt   "&lt;U0025&gt;&lt;U0064&gt;&lt;U002D&gt;&lt;U0025&gt;&lt;U006D&gt;&lt;U002D&gt;&lt;U0025&gt;&lt;U0059&gt;"
t_fmt   "&lt;U0025&gt;&lt;U0054&gt;"
abday "&lt;U0044&gt;&lt;U006F&gt;&lt;U006D&gt;";"&lt;U0053&gt;&lt;U0065&gt;&lt;U0067&gt;";/
here is a string with "&lt;U006D&gt;&lt;U0075&gt;&lt;U006C&gt;&lt;U0074&gt;&lt;U0069&gt;&lt;U006C&gt;&lt;U0069&gt;&lt;U006E&gt;&lt;U0065&gt;
&lt;U0071&gt;&lt;U0075&gt;&lt;U006F&gt;&lt;U0074&gt;&lt;U0065&gt;&lt;U0073&gt;";/
</snippet></ROW><ROW><id>5528045</id><snippet>while IFS= read -r -n1 c;</snippet></ROW><ROW><id>5528045</id><snippet>-n1</snippet></ROW><ROW><id>5528045</id><snippet>c</snippet></ROW><ROW><id>5528045</id><snippet>IFS=</snippet></ROW><ROW><id>5528045</id><snippet>-r</snippet></ROW><ROW><id>5528045</id><snippet>read</snippet></ROW><ROW><id>5528045</id><snippet>if [[ "$c" == '"' ]];</snippet></ROW><ROW><id>5528045</id><snippet>((flag^=1))</snippet></ROW><ROW><id>5528045</id><snippet>elif [[ "$c" == $'\0' ]];</snippet></ROW><ROW><id>5528045</id><snippet>echo</snippet></ROW><ROW><id>5528045</id><snippet>elif ((flag))</snippet></ROW><ROW><id>5528045</id><snippet>printf "&lt;U%04X&gt;" "'$c"</snippet></ROW><ROW><id>5528045</id><snippet>$c</snippet></ROW><ROW><id>5528045</id><snippet>printf</snippet></ROW><ROW><id>5528045</id><snippet>else printf "%c" "$c"</snippet></ROW><ROW><id>5528088</id><snippet>from django.db import connection
sql=connection.queries
</snippet></ROW><ROW><id>5528088</id><snippet>doc = {
                'record_hash': hash,
                'level': record.level,
                'channel': record.channel or u'',
                'location': u'%s:%d' % (record.filename, record.lineno),
                "message": record.msg,
                'module': record.module or u'&lt;unknown&gt;',
                'occurrence_count': 0,
                'solved': False,
                'app_id': app_id,
                'sql': sql,
            }
</snippet></ROW><ROW><id>5528318</id><snippet>import bisect

l = [(0, 100), (150, 300), (500, 1000)]
bisect.insort_right(l, (250, 400))
print l # [(0, 100), (150, 300), (250, 400), (500, 1000)]
bisect.insort_right(l, (399, 450))
print l # [(0, 100), (150, 300), (250, 400), (399, 450), (500, 1000)]
</snippet></ROW><ROW><id>5528318</id><snippet>overlaps</snippet></ROW><ROW><id>5528318</id><snippet>insort</snippet></ROW><ROW><id>5528318</id><snippet>(250, 400)</snippet></ROW><ROW><id>5528318</id><snippet>(150, 300)</snippet></ROW><ROW><id>5528318</id><snippet>overlaps()</snippet></ROW><ROW><id>5528318</id><snippet>def overlaps(inlist, inrange):
    for min, max in inlist:
        if min &lt; inrange[0] &lt; max and max &lt; inrange[1]:
            return True
    return False
</snippet></ROW><ROW><id>5528371</id><snippet>from BeautifulSoup import BeautifulSoup
from BeautifulSoup import Comment
from BeautifulSoup import NavigableString

text = BeautifulSoup("""&lt;!--comment--&gt;&lt;div&gt;a&lt;/div&gt;&lt;div&gt;b&lt;/div&gt;&lt;div&gt;c&lt;/div&gt;
                        &lt;!--comment--&gt;&lt;div&gt;a&lt;/div&gt;&lt;div&gt;b&lt;/div&gt;&lt;div&gt;c&lt;/div&gt;""")

comments = text.findAll(text=lambda elm: isinstance(elm, Comment))
for comment in comments:
    next_sib = comment.nextSibling
    while not isinstance(next_sib, Comment) and \
        not isinstance(next_sib, NavigableString) and next_sib:
        # This prints each sibling while it isn't whitespace or another comment
        # Append next_sib to a list, dictionary, etc, etc and
        # do what you want with it
        print next_sib 
        next_sib = next_sib.nextSibling
</snippet></ROW><ROW><id>5528445</id><snippet>getattr</snippet></ROW><ROW><id>5528445</id><snippet>for i in dir(X):
   print i,"  ",type(getattr(X,i))
</snippet></ROW><ROW><id>5528551</id><snippet>extra_parameters={'xoauth_displayname': APP_NAME})
</snippet></ROW><ROW><id>5528574</id><snippet>import shelve

# Write URLS to shelve
urls= ['http://www.airmagnet.com/', 'http://www.alcatel-lucent.com/',
       'http://www.ami.com/', 'http://www.apcc.com/', 'http://www.stk.com/',
       'http://www.apani.com/', 'http://www.apple.com/',
       'http://www.arcoide.com/', 'http://www.areca.com.tw/',
       'http://www.argus-systems.com/', 'http://www.ariba.com/',
       'http://www.asus.com.tw/']

s=set(urls)                        # Store URLs as set - Search is O(1)
sh=shelve.open('/tmp/shelve.tmp')  # Dump set (as one unit) to shelve file
sh['urls']=s
sh.close()

sh=shelve.open('/tmp/shelve.tmp')  # Retrieve set from file
s=sh['urls']
print 'http://www.apple.com/' in s # True
print 'http://matan.name/'    in s # False
</snippet></ROW><ROW><id>5528574</id><snippet>import random
import string
import shelve
import datetime


urls=[''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(50))
          for i in range(40000)]
s=set(urls)
start=datetime.datetime.now()
sh=shelve.open('/tmp/test.shelve')
sh['urls']=urls
end=datetime.datetime.now()
print end-start
</snippet></ROW><ROW><id>5528946</id><snippet>import struct
struct.pack('4B', 4, 6, 7, 8,)
</snippet></ROW><ROW><id>5528946</id><snippet>struct</snippet></ROW><ROW><id>5528994</id><snippet>cache.delete</snippet></ROW><ROW><id>5528994</id><snippet>cache.delete_many</snippet></ROW><ROW><id>5529019</id><snippet>headrev = client.info(svnroot).get("revision").number
</snippet></ROW><ROW><id>5529019</id><snippet>headrev = pysvn.Revision( pysvn.opt_revision_kind.head )            
revlog = svnclient.log( url, revision_start=headrev, revision_end=headrev, discover_changed_paths=False)
headrev = revlog[0].revision.number
</snippet></ROW><ROW><id>5529167</id><snippet>if your_list[0] == 'MATE555':
   print your_list[1]
else:
   print 'no key'
</snippet></ROW><ROW><id>5529238</id><snippet>$?</snippet></ROW><ROW><id>5529238</id><snippet>failed=0 \
for i in $(TESTS); \
do \
  echo $$i; \
  PYTHONPATH=$(GAEPATH):. $(PYTHON) -m tests.`basename $$i .py` $(FLAGS); \
  if [ $? -ne 0 ] \
  then \
   $failed=$(($failed+1)) \
  fi \
done \
if [$failed -ne 0] \
then \
  echo $failed Tests Failed \
  exit $failed \
fi \
</snippet></ROW><ROW><id>5529238</id><snippet>./run_tests.py</snippet></ROW><ROW><id>5529686</id><snippet>len()</snippet></ROW><ROW><id>5529686</id><snippet>None</snippet></ROW><ROW><id>5529933</id><snippet>NamedType</snippet></ROW><ROW><id>5529933</id><snippet>GeneralName.componentType</snippet></ROW><ROW><id>5529933</id><snippet>subtype</snippet></ROW><ROW><id>5529933</id><snippet>namedtype.NamedType('rfc822Name', char.IA5String()),
</snippet></ROW><ROW><id>5529933</id><snippet>namedtype.NamedType('rfc822Name', char.IA5String().subtype(
        implicitTag=tag.Tag(tag.tagClassContext,
                            tag.tagFormatSimple, 1))),
</snippet></ROW><ROW><id>5529933</id><snippet>1</snippet></ROW><ROW><id>5529933</id><snippet>GeneralName ::= CHOICE {
   otherName                       [0]     OtherName,
   rfc822Name                      [1]     IA5String,
   dNSName                         [2]     IA5String,
   x400Address                     [3]     ORAddress,
   directoryName                   [4]     Name,
   ediPartyName                    [5]     EDIPartyName,
   uniformResourceIdentifier       [6]     IA5String,
   iPAddress                       [7]     OCTET STRING,
   registeredID                    [8]     OBJECT IDENTIFIER
}
</snippet></ROW><ROW><id>5529933</id><snippet>componentType</snippet></ROW><ROW><id>5529933</id><snippet>(GeneralNames().setComponentByPosition(
    0, GeneralName().setComponentByPosition(1, IA5String('example.com'))), '')
</snippet></ROW><ROW><id>5529961</id><snippet>print unicode(s1, 'ascii') == unicode(s1, 'utf-8')
</snippet></ROW><ROW><id>5530010</id><snippet>urllib2</snippet></ROW><ROW><id>5530010</id><snippet>import threading
import urllib2
from time import sleep

def load_img(local_path, web_path):
    f = open(local_path, 'wb')
    f.write(urllib2.urlopen(web_path).read())
    f.close()

local_path = 'foo.txt'
web_path = 'http://www.google.com/'

img_thread = threading.Thread(target=load_img, args=(local_path, web_path))
img_thread.start()
while img_thread.is_alive():
    print "doing some other stuff while the thread does its thing"
    sleep(1)
img_thread.join()
</snippet></ROW><ROW><id>5530406</id><snippet>currentChanged</snippet></ROW><ROW><id>5530406</id><snippet>main_tab_object</snippet></ROW><ROW><id>5530406</id><snippet>self.cc_tab</snippet></ROW><ROW><id>5530406</id><snippet>    self.connect(self.cc_tab, SIGNAL('currentChanged(int)'), self.pseudofunction)
</snippet></ROW><ROW><id>5530406</id><snippet>    self.connect(main_tab_widget, SIGNAL('currentChanged(int)'), self.pseudofunction)
</snippet></ROW><ROW><id>5530406</id><snippet>def selector(self, selected_index):
    if selected_index == 0:
        self.some_function_for_run_tab()
    elif selected_index == 1:
        self.some_function_for_cc_tab()
    elif selected_index == 2:
        self.some_function_for_result_tab()
</snippet></ROW><ROW><id>5530406</id><snippet>currentChanged</snippet></ROW><ROW><id>5530406</id><snippet>currentChanged</snippet></ROW><ROW><id>5530406</id><snippet>QWidget()</snippet></ROW><ROW><id>5530406</id><snippet>QTabBar()</snippet></ROW><ROW><id>5530406</id><snippet>currentChanged</snippet></ROW><ROW><id>5530630</id><snippet>import csv
with open("data.csv", "wb") as f:
    csv.writer(f).writerows((k,) + v for k, v in maxDict.iteritems())
</snippet></ROW><ROW><id>5530709</id><snippet>remoteRun();</snippet></ROW><ROW><id>5530709</id><snippet>fab remoteRun</snippet></ROW><ROW><id>5530709</id><snippet>def localhost():
    env.hosts = [ '127.0.0.1']

def remoteRun():
    print "ENV %s" %(env.hosts)
    out = run('uname -r')
    print "Output %s"%(out)
</snippet></ROW><ROW><id>5530709</id><snippet>fab localhost remoteRun
</snippet></ROW><ROW><id>5530709</id><snippet>fab -H 127.0.0.1 remoteRun
</snippet></ROW><ROW><id>5530709</id><snippet>env.hosts = [ 'localhost', '127.0.0.1']

def remoteRun():
    print "ENV %s" %(env.hosts)
    out = run('uname -r')
    print "Output %s"%(out)
</snippet></ROW><ROW><id>5530709</id><snippet>fab remoteRun</snippet></ROW><ROW><id>5530709</id><snippet>remoteRun</snippet></ROW><ROW><id>5530709</id><snippet>env.hosts</snippet></ROW><ROW><id>5530880</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>5530880</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>5530880</id><snippet>ascii</snippet></ROW><ROW><id>5530880</id><snippet>utf-8</snippet></ROW><ROW><id>5530880</id><snippet>print (unicode_obj.encode('utf-8'))
</snippet></ROW><ROW><id>5530880</id><snippet>sys.stdout</snippet></ROW><ROW><id>5530880</id><snippet>utf-8</snippet></ROW><ROW><id>5530880</id><snippet>import sys
import codecs
sys.stdout=codecs.getwriter('utf-8')(sys.stdout)
print(unicode_obj)
</snippet></ROW><ROW><id>5531351</id><snippet>s = "4:34.234"
hours, minutes, seconds = (["0", "0"] + s.split(":"))[-3:]
hours = int(hours)
minutes = int(minutes)
seconds = float(seconds)
miliseconds = int(3600000 * hours + 60000 * minutes + 1000 * seconds)
</snippet></ROW><ROW><id>5531351</id><snippet>hours, milliseconds = divmod(miliseconds, 3600000)
minutes, milliseconds = divmod(miliseconds, 60000)
seconds = float(milliseconds) / 1000
s = "%i:%02i:%06.3f" % (hours, minutes, seconds)
</snippet></ROW><ROW><id>5531651</id><snippet>igraph</snippet></ROW><ROW><id>5531651</id><snippet>vertices</snippet></ROW><ROW><id>5531651</id><snippet>integers</snippet></ROW><ROW><id>5531651</id><snippet>mapping</snippet></ROW><ROW><id>5531651</id><snippet>vertices</snippet></ROW><ROW><id>5531651</id><snippet>integers</snippet></ROW><ROW><id>5531651</id><snippet>G= {'v1': ['v2', 'v3'], 'v2': ['v1'], 'v3': ['v1', 'v4'], 'v4': ['v3']}
mvi= {'v1': 1, 'v2': 2, 'v3': 3, 'v4': 4}
graph= igraph.Graph(edges= [(mvi[v], mvi[a]) for v in G.keys() for a in G[v]])
</snippet></ROW><ROW><id>5531720</id><snippet>defaultdict</snippet></ROW><ROW><id>5531720</id><snippet>Queue.Queue</snippet></ROW><ROW><id>5531720</id><snippet>def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</snippet></ROW><ROW><id>5531830</id><snippet>for tag_name in tag_names:
    tag, created = Tag.objects.get_or_create(name=tag_name)
    tagged = TaggedItem(object=article, tag=tag)
tagged.save()
</snippet></ROW><ROW><id>5531956</id><snippet>$ openssl s_client -connect host:port -showcerts &gt; certfile
</snippet></ROW><ROW><id>5531956</id><snippet>Connection</snippet></ROW><ROW><id>5531956</id><snippet>get_peer_certificate()</snippet></ROW><ROW><id>5532256</id><snippet>bind</snippet></ROW><ROW><id>5532256</id><snippet>bind</snippet></ROW><ROW><id>5532256</id><snippet>connect</snippet></ROW><ROW><id>5532256</id><snippet>accept</snippet></ROW><ROW><id>5532256</id><snippet>bind</snippet></ROW><ROW><id>5532256</id><snippet>connect</snippet></ROW><ROW><id>5532256</id><snippet>connect</snippet></ROW><ROW><id>5532256</id><snippet>bind</snippet></ROW><ROW><id>5532256</id><snippet>accept</snippet></ROW><ROW><id>5532381</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; last_print = None
&gt;&gt;&gt;
&gt;&gt;&gt; # this class will replace sys.stdout
&gt;&gt;&gt; class PrintCatcher:
...     # catch and save writes (prints)
...     def write(self, data):
...         global last_print
...         if data != "\n": last_print = data
... 
...         # write the data to the original stdout object
...         sys.__stdout__.write(data)
...         sys.__stdout__.flush()
...
...     # forward attribute gets to the original stdout object
...     def __getattr__(self, attr):
...         return getattr(sys.__stdout__, attr)
... 
&gt;&gt;&gt; print "Hello"
Hello
&gt;&gt;&gt; last_print
&gt;&gt;&gt; sys.stdout = PrintCatcher()
&gt;&gt;&gt; print "Goodbye"
Goodbye
&gt;&gt;&gt; last_print
'Goodbye'
</snippet></ROW><ROW><id>5532381</id><snippet>sys.stdout</snippet></ROW><ROW><id>5532381</id><snippet>print</snippet></ROW><ROW><id>5532381</id><snippet>sys.__stdout</snippet></ROW><ROW><id>5532381</id><snippet>sys.stdout</snippet></ROW><ROW><id>5532381</id><snippet>print</snippet></ROW><ROW><id>5532381</id><snippet>last_print</snippet></ROW><ROW><id>5532508</id><snippet>The West Wing</snippet></ROW><ROW><id>5532508</id><snippet>The_West_Wing</snippet></ROW><ROW><id>5532508</id><snippet>regexp_tokenize</snippet></ROW><ROW><id>5532521</id><snippet>glob</snippet></ROW><ROW><id>5532521</id><snippet>import glob
import os
for fl in glob.glob("E:\\test\\*.txt"):
    #Do what you want with the file
    os.remove(fl)
</snippet></ROW><ROW><id>5532554</id><snippet>list</snippet></ROW><ROW><id>5532554</id><snippet>self.fn1</snippet></ROW><ROW><id>5532554</id><snippet>self.fn2</snippet></ROW><ROW><id>5532554</id><snippet>self.fn1 = X
self.fn2 = Y
oldfn2   = Z
</snippet></ROW><ROW><id>5532554</id><snippet>self.fn1</snippet></ROW><ROW><id>5532554</id><snippet>self.fn2</snippet></ROW><ROW><id>5532554</id><snippet>self.fn1, self.fn2, oldfn2 = self.fn1+self.fn2, self.fn1, self.fn2
</snippet></ROW><ROW><id>5532729</id><snippet>search</snippet></ROW><ROW><id>5532729</id><snippet>(r'^MusicGrep/$', 'MusicGrep.musicgrep.forms.search()'),
</snippet></ROW><ROW><id>5532729</id><snippet>Search</snippet></ROW><ROW><id>5532751</id><snippet>MEDIA_URL = 'http://localhost:8000/static/' 
</snippet></ROW><ROW><id>5532751</id><snippet>MEDIA_URL = '/static/' 
</snippet></ROW><ROW><id>5532876</id><snippet>Vary</snippet></ROW><ROW><id>5532876</id><snippet>SessionMiddleware</snippet></ROW><ROW><id>5532894</id><snippet>print repr(zlib.compress("The quick brown dog etc etc")</snippet></ROW><ROW><id>5532894</id><snippet>Deflater</snippet></ROW><ROW><id>5532906</id><snippet>boo</snippet></ROW><ROW><id>5532914</id><snippet>def rreverse(s):
    if s == "":
        return s
    else:
        return rreverse(s[1:]) + s[0]
</snippet></ROW><ROW><id>5533210</id><snippet>map()</snippet></ROW><ROW><id>5533210</id><snippet>map(callable, iterable)
</snippet></ROW><ROW><id>5533210</id><snippet>[callable(x) for x in iterable]
</snippet></ROW><ROW><id>5533210</id><snippet>callable</snippet></ROW><ROW><id>5533210</id><snippet>map()</snippet></ROW><ROW><id>5533210</id><snippet>map()</snippet></ROW><ROW><id>5533210</id><snippet>(callable(x) for x in iterable)
</snippet></ROW><ROW><id>5533210</id><snippet>dict</snippet></ROW><ROW><id>5533210</id><snippet>dict</snippet></ROW><ROW><id>5533210</id><snippet>map()</snippet></ROW><ROW><id>5533276</id><snippet>/test</snippet></ROW><ROW><id>5533304</id><snippet>if test &gt; result:</snippet></ROW><ROW><id>5533304</id><snippet>if test &lt; result:</snippet></ROW><ROW><id>5533304</id><snippet>direction*0.00001</snippet></ROW><ROW><id>5533304</id><snippet>n = Ray(ray.position(result) + direction * 0.00001, direction)</snippet></ROW><ROW><id>5533304</id><snippet>TracePath2</snippet></ROW><ROW><id>5533304</id><snippet>answer += TracePath2(n, scene, bounce_count + 1) * hit.diffuse * dp</snippet></ROW><ROW><id>5533304</id><snippet>answer</snippet></ROW><ROW><id>5533304</id><snippet>Color(0.0, 0.0, 0.0)</snippet></ROW><ROW><id>5533304</id><snippet>return racePath2(n, scene, bounce_count + 1) * hit.diffuse * dp</snippet></ROW><ROW><id>5533304</id><snippet>hit.diffuse</snippet></ROW><ROW><id>5533304</id><snippet>return racePath2(n, scene, bounce_count + 1) * dp + hit.diffuse</snippet></ROW><ROW><id>5533304</id><snippet>bounce_count</snippet></ROW><ROW><id>5533304</id><snippet>if bounce_count &gt; 15: return black</snippet></ROW><ROW><id>5533304</id><snippet>inside = normal.dot(ray.direction) &gt; 0.0</snippet></ROW><ROW><id>5533304</id><snippet>normal</snippet></ROW><ROW><id>5533304</id><snippet>direction</snippet></ROW><ROW><id>5533374</id><snippet>def configure_servers(p1, p2,...):
    global opt1, opt2, ...
    opt1 = p1
    opt2 = p2 
    (...)
</snippet></ROW><ROW><id>5533374</id><snippet>class Singleton(object):
   _instance = None
   def __new__(cls, *args, **kw):
       if cls._instance is not None:
           return cls._instance
       self = object.__new__(cls, *args, **kw)
       cls._instance = self
       return self
</snippet></ROW><ROW><id>5533374</id><snippet>MyException = type("MyException", (Exception, ), {})
</snippet></ROW><ROW><id>5533374</id><snippet>class MyException(Exception):
    pass
</snippet></ROW><ROW><id>5533374</id><snippet>attrs</snippet></ROW><ROW><id>5533374</id><snippet>class YAServer(ParentServer):
   __metaclass__ = ServerMetaBase
   _sever_type = mod_server_type
   with open("config_file") as config:
      _server_params = pickle.load(config)
   del config

   def __init__(self,...):
      ...  
</snippet></ROW><ROW><id>5533403</id><snippet>SELECT * FROM Foo WHERE bar in :1</snippet></ROW><ROW><id>5533403</id><snippet>return Bar.get(self._bars)
</snippet></ROW><ROW><id>5533417</id><snippet>message = struct.pack('B', 4) + \
    minissdpdStringEncode(st)
</snippet></ROW><ROW><id>5533417</id><snippet>message = (struct.pack('B', 4) +
    minissdpdStringEncode(st))
</snippet></ROW><ROW><id>5533712</id><snippet>&gt;&gt;&gt; foo = 'bar'
&gt;&gt;&gt; print('{{{0}}}'.format(foo))
'{bar}'
</snippet></ROW><ROW><id>5533712</id><snippet>{{</snippet></ROW><ROW><id>5533712</id><snippet>}}</snippet></ROW><ROW><id>5533712</id><snippet>{0}</snippet></ROW><ROW><id>5533727</id><snippet>argv</snippet></ROW><ROW><id>5533727</id><snippet>execve(2)</snippet></ROW><ROW><id>5533727</id><snippet>Limits on size of arguments and environment
   Most Unix implementations impose some limit on the total size
   of the command-line argument (argv) and environment (envp)
   strings that may be passed to a new program.  POSIX.1 allows an
   implementation to advertise this limit using the ARG_MAX
   constant (either defined in &lt;limits.h&gt; or available at run time
   using the call sysconf(_SC_ARG_MAX)).

   On Linux prior to kernel 2.6.23, the memory used to store the
   environment and argument strings was limited to 32 pages
   (defined by the kernel constant MAX_ARG_PAGES).  On
   architectures with a 4-kB page size, this yields a maximum size
   of 128 kB.

   On kernel 2.6.23 and later, most architectures support a size
   limit derived from the soft RLIMIT_STACK resource limit (see
   getrlimit(2)) that is in force at the time of the execve()
   call.  (Architectures with no memory management unit are
   excepted: they maintain the limit that was in effect before
   kernel 2.6.23.)  This change allows programs to have a much
   larger argument and/or environment list.  For these
   architectures, the total size is limited to 1/4 of the allowed
   stack size.  (Imposing the 1/4-limit ensures that the new
   program always has some stack space.)  Since Linux 2.6.25, the
   kernel places a floor of 32 pages on this size limit, so that,
   even when RLIMIT_STACK is set very low, applications are
   guaranteed to have at least as much argument and environment
   space as was provided by Linux 2.6.23 and earlier.  (This
   guarantee was not provided in Linux 2.6.23 and 2.6.24.)
   Additionally, the limit per string is 32 pages (the kernel
   constant MAX_ARG_STRLEN), and the maximum number of strings is
   0x7FFFFFFF.
</snippet></ROW><ROW><id>5533742</id><snippet>#!/usr/bin/env python
import xml.etree.cElementTree as et

sxml="""
&lt;encspot&gt;
  &lt;file&gt;
   &lt;Name&gt;some filename.mp3&lt;/Name&gt;
   &lt;Encoder&gt;Gogo (after 3.0)&lt;/Encoder&gt;
   &lt;Bitrate&gt;131&lt;/Bitrate&gt;
  &lt;/file&gt;
  &lt;file&gt;
   &lt;Name&gt;another filename.mp3&lt;/Name&gt;
   &lt;Encoder&gt;iTunes&lt;/Encoder&gt;
   &lt;Bitrate&gt;128&lt;/Bitrate&gt;  
  &lt;/file&gt;
&lt;/encspot&gt;
"""
tree=et.fromstring(sxml)

for el in tree.findall('file'):
    print '-------------------'
    for ch in el.getchildren():
        print '{:&gt;15}: {:&lt;30}'.format(ch.tag, ch.text) 

print "\nan alternate way:"  
el=tree.find('file[2]/Name')  # xpath
print '{:&gt;15}: {:&lt;30}'.format(el.tag, el.text)  
</snippet></ROW><ROW><id>5533742</id><snippet>-------------------
           Name: some filename.mp3             
        Encoder: Gogo (after 3.0)              
        Bitrate: 131                           
-------------------
           Name: another filename.mp3          
        Encoder: iTunes                        
        Bitrate: 128                           

an alternate way:
           Name: another filename.mp3  
</snippet></ROW><ROW><id>5533742</id><snippet>[(ch.tag,ch.text) for e in tree.findall('file') for ch in e.getchildren()]
</snippet></ROW><ROW><id>5533742</id><snippet>&lt;file&gt;</snippet></ROW><ROW><id>5533742</id><snippet>[('Name', 'some filename.mp3'), 
 ('Encoder', 'Gogo (after 3.0)'), 
 ('Bitrate', '131'), 
 ('Name', 'another filename.mp3'), 
 ('Encoder', 'iTunes'), 
 ('Bitrate', '128')]
</snippet></ROW><ROW><id>5533742</id><snippet>[{item.tag: item.text for item in ch} for ch in tree.findall('file')] 
[ {'Bitrate': '131', 
   'Name': 'some filename.mp3', 
   'Encoder': 'Gogo (after 3.0)'}, 
  {'Bitrate': '128', 
   'Name': 'another filename.mp3', 
   'Encoder': 'iTunes'}]
</snippet></ROW><ROW><id>5533742</id><snippet>file</snippet></ROW><ROW><id>5533742</id><snippet>findall</snippet></ROW><ROW><id>5533745</id><snippet>#! /usr/bin/python
import sys
from datetime import datetime
d_format = "%Y-%m-%d"

try:
    start = datetime.strptime(sys.argv[1], d_format)
    end = datetime.strptime(sys.argv[2], d_format) 
except (TypeError, IndexError):
    sys.stderr.write("Example: grep-date-range.py 2011-03-25 2011-04-02 \n")

for line in sys.stdin:
    try:
        date = datetime.strptime(line.split()[0], d_format)
        # suit the &lt;=, &lt;, comparisons bellow to your needs:
        if start &lt;= date &lt; end:
            sys.stdout.write(line)
    except (ValueError, IndexError):
        pass 
</snippet></ROW><ROW><id>5533938</id><snippet>import sys
import os
import shutil

# terminology:
# path = full path to a file, i.e. directory + file name
# directory = directory, possibly starting with a drive
# file name = the last component of the path

sourcedrive = 'D:'
destdrive = 'C:'

log_list_file = open('test_logs.txt', 'r')
for line in log_list_file:
    sourcepath = line.split()[0]  # XXX is this correct?
    if sourcepath.startswith(sourcedrive):
        destpath = sourcepath.replace(sourcedrive, destdrive, 1)
    else:
        print &gt;&gt;sys.stderr, 'Skipping %s: Not on %s' % (sourcepath, sourcedrive)
        continue

    destdir = os.path.dirname(destpath)    

    if not os.path.isdir(destdir):
        try:
            os.makedirs(destdir)
        except (OSError, IOError, Error), e:
            print &gt;&gt;sys.stderr, 'Error making %s: %s' % (destdir, e)
            continue

    try:
        shutil.move(sourcepath, destpath)
    except (OSError, IOError, Error), e:
        print &gt;&gt;sys.stderr, 'Error moving %s to %s: %s' % (sourcepath, destpath, e)
</snippet></ROW><ROW><id>5534094</id><snippet>r=</snippet></ROW><ROW><id>5534094</id><snippet>rating=</snippet></ROW><ROW><id>5534192</id><snippet>import numpy as np
import Image

def blackout(img):
    arr = np.array(img)
    r,g,b,a=arr.T
    idx = ((r==255) &amp; (g==255) &amp; (b==255) &amp; (a==255)).T
    arr[idx]=0
    return arr

img = Image.open('test.png')
mask=blackout(img)
img2=Image.fromarray(mask,mode='RGBA')
img2.show()
</snippet></ROW><ROW><id>5534251</id><snippet>__init__.py</snippet></ROW><ROW><id>5534251</id><snippet>models</snippet></ROW><ROW><id>5534251</id><snippet># __init__.py
from user import UserModel
from group import GroupModel
</snippet></ROW><ROW><id>5534251</id><snippet>app.models</snippet></ROW><ROW><id>5534251</id><snippet>app_label</snippet></ROW><ROW><id>5534251</id><snippet>Meta</snippet></ROW><ROW><id>5534251</id><snippet>class UserModel(models.model):
    # fields here

    class Meta:
        app_label = "myapp"
</snippet></ROW><ROW><id>5534760</id><snippet>import random
import time
import numpy as np
list1 = [random.choice((0,1)) for x in xrange(307200)]
list2 = [random.choice((0,1)) for x in xrange(307200)]
a1 = np.array(list1)
a2 = np.array(list2)

def foo1():
    start = time.clock()
    counter = 0
    for i in xrange(307200):
        if list1[i] != list2[i]:
            counter += 1
    print "%d, %f" % (counter, time.clock()-start)

def foo2():
    start = time.clock()
    ct = np.sum(a1!=a2)
    print "%d, %f" % (ct, time.clock()-start)

foo1() #153490, 0.096215
foo2() #153490, 0.010224
</snippet></ROW><ROW><id>5534877</id><snippet>def facebook_login(request):
    """
    Facebook login page
    """
    if request.REQUEST.get("device"):
        device = request.REQUEST.get("device")
    else:
        device = "user-agent"

    params = {}
    params["client_id"] = FACEBOOK_APP_ID
    params["redirect_uri"] = request.build_absolute_uri(reverse("socialauth_facebook_login_done"))

    url = "https://graph.facebook.com/oauth/authorize?"+urllib.urlencode(params)

    return HttpResponseRedirect(url)

def facebook_login_done(request):
    user = authenticate(request=request)

    if not user:
        request.COOKIES.pop(FACEBOOK_API_KEY + '_session_key', None)
        request.COOKIES.pop(FACEBOOK_API_KEY + '_user', None)

        # TODO: maybe the project has its own login page?
        logging.debug("SOCIALAUTH: Couldn't authenticate user with Django, redirecting to Login page")
        return HttpResponseRedirect(reverse('socialauth_login_page'))

    login(request, user)

    logging.debug("SOCIALAUTH: Successfully logged in with Facebook!")

    if request.GET.get('next'):
        return HttpResponseRedirect(request.GET.get('next'))
    else:
        return HttpResponseRedirect(LOGIN_REDIRECT_URL)
</snippet></ROW><ROW><id>5535239</id><snippet>8.0/(-7.0)</snippet></ROW><ROW><id>5535239</id><snippet>-1.143</snippet></ROW><ROW><id>5535239</id><snippet>-2</snippet></ROW><ROW><id>5535239</id><snippet>&gt;&gt;&gt; 8/(-7)
-2
&gt;&gt;&gt; 8/7
1
</snippet></ROW><ROW><id>5535239</id><snippet>8/(-7)</snippet></ROW><ROW><id>5535239</id><snippet>-1.143</snippet></ROW><ROW><id>5535239</id><snippet>//</snippet></ROW><ROW><id>5535239</id><snippet>8/(-7)</snippet></ROW><ROW><id>5535439</id><snippet>include</snippet></ROW><ROW><id>5535906</id><snippet>name = 'bin'
obj = Directory(**{name: dict()})
</snippet></ROW><ROW><id>5535906</id><snippet>name = 'bin'
obj = Directory(name, dict())
</snippet></ROW><ROW><id>5535906</id><snippet>class Directory:
    def __init__(self, name, value):
        self.__dict__[name] = value
</snippet></ROW><ROW><id>5535906</id><snippet>__slots__</snippet></ROW><ROW><id>5535906</id><snippet>__slots__</snippet></ROW><ROW><id>5536097</id><snippet>python bootstap.py</snippet></ROW><ROW><id>5536097</id><snippet>bin/buildout</snippet></ROW><ROW><id>5537197</id><snippet>import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt
from numpy.random import random

mpl.rcParams['legend.fontsize'] = 10

fig = plt.figure(1)
fig.clf()
ax = Axes3D(fig)
datasets = random((8,100,3))*512
my_labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

colors = ['k', "#B3C95A", 'b', '#63B8FF', 'g', "#FF3300",
          'r', 'k']
index = 0
for data, curr_color in zip(datasets, colors):
    ax.plot(np.log2(data[:, 0]), np.log2(data[:, 1]), 
                   np.log2(data[:, 2]), 'o', c=curr_color, label=my_labels[index])
    index += 1

ax.set_zlim3d([-1, 9])
ax.set_ylim3d([-1, 9])
ax.set_xlim3d([-1, 9])

ax.set_xticks(range(0,11))
ax.set_yticks([1,2,8])
ax.set_zticks(np.arange(0,9,.5))

ax.legend(loc = 'upper left')

plt.draw()

plt.show()
</snippet></ROW><ROW><id>5537197</id><snippet>index = 0
for data, curr_color in zip(datasets, colors):
    ax.scatter(np.log2(data[:, 0]), np.log2(data[:, 1]), 
                   np.log2(data[:, 2]), 'o', c=curr_color, label=my_labels[index])
    ax.plot([], [], 'o', c = curr_color, label=my_labels[index])                    
    index += 1
</snippet></ROW><ROW><id>5537751</id><snippet>xdg-mime query filetype /tmp/foobar.png
</snippet></ROW><ROW><id>5537751</id><snippet>xdg-mime query default image/png
</snippet></ROW><ROW><id>5537751</id><snippet>assoc</snippet></ROW><ROW><id>5537751</id><snippet>ftype</snippet></ROW><ROW><id>5537751</id><snippet>cmd</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>def give_me_a_function():
    def f(x):
        return x

    return f
</snippet></ROW><ROW><id>5537770</id><snippet>def alter(other_function):
    def altered(x):
        return other_function(x) + 1

    return altered
</snippet></ROW><ROW><id>5537770</id><snippet>alter()</snippet></ROW><ROW><id>5537770</id><snippet>alter()</snippet></ROW><ROW><id>5537770</id><snippet>alter()</snippet></ROW><ROW><id>5537770</id><snippet>&gt;&gt;&gt; def f(x):
...     return 2*x
&gt;&gt;&gt; new_function = alter(f)
&gt;&gt;&gt; f(2)
4
&gt;&gt;&gt; new_function(2)
5
</snippet></ROW><ROW><id>5537770</id><snippet>alter()</snippet></ROW><ROW><id>5537770</id><snippet>f()</snippet></ROW><ROW><id>5537770</id><snippet>f() + 1</snippet></ROW><ROW><id>5537770</id><snippet>new_function</snippet></ROW><ROW><id>5537770</id><snippet>f() + 1</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>fib = trace(fib)
</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>trace(fib)</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>trace()</snippet></ROW><ROW><id>5537770</id><snippet>fib()</snippet></ROW><ROW><id>5537770</id><snippet>trace(fib)</snippet></ROW><ROW><id>5537896</id><snippet>import string

my_base64chars  = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/"
std_base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

s = s.translate(string.maketrans(my_base64chars, std_base64chars))
data = base64.b64decode(s)
</snippet></ROW><ROW><id>5537896</id><snippet>base64</snippet></ROW><ROW><id>5537896</id><snippet>binascii</snippet></ROW><ROW><id>5537942</id><snippet>import datetime, pytz

datetime.datetime.now(pytz.timezone('Asia/Jerusalem')).strftime('%z')

# returns '+0300' (because 'now' they have DST)


pytz.timezone('Asia/Jerusalem').localize(datetime.datetime(2011,1,1)).strftime('%z')

# returns '+0200' (because in January they didn't have DST)
</snippet></ROW><ROW><id>5537984</id><snippet>def getCost(id):
    total_cost = 0
    ingredients = b[id][1] # Second element of tuple is ingredient list

    for ingredient, amount in ingredients:
        total_cost += a[ingredient][1] * amount

    return total_cost
</snippet></ROW><ROW><id>5537984</id><snippet>def getCost(id):
    return sum(a[ingredient][1] * amount for ingredient, amount in b[id][1])
</snippet></ROW><ROW><id>5538143</id><snippet>&gt;&gt;&gt; import yaml
</snippet></ROW><ROW><id>5538325</id><snippet>def myFunction(an_arg, error_handler)
  # Do stuff
  if err_occurred:
    if isinstance(err, RuntimeError):
      error_handler.handleRuntimeError()
    elif  isinstance(err, IOError):
      error_handler.handleIOError()
</snippet></ROW><ROW><id>5538325</id><snippet>__call__</snippet></ROW><ROW><id>5538353</id><snippet>easy_install-2.6 pip
</snippet></ROW><ROW><id>5538353</id><snippet>pip-2.6 install mysql-python
</snippet></ROW><ROW><id>5538436</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>5538480</id><snippet>data:</snippet></ROW><ROW><id>5538546</id><snippet>screen</snippet></ROW><ROW><id>5538546</id><snippet>dbus-launch screen</snippet></ROW><ROW><id>5538546</id><snippet>finch</snippet></ROW><ROW><id>5538546</id><snippet>python myscript</snippet></ROW><ROW><id>5538721</id><snippet>file.wsf</snippet></ROW><ROW><id>5538721</id><snippet>cscript.exe</snippet></ROW><ROW><id>5538721</id><snippet>call()</snippet></ROW><ROW><id>5538857</id><snippet>for n, v in zip(names, values):
    locals()[n] = v
</snippet></ROW><ROW><id>5538857</id><snippet>def get_data():
    (...)
    return dict(zip(names, values))
</snippet></ROW><ROW><id>5538857</id><snippet>get_data()["a"]</snippet></ROW><ROW><id>5538857</id><snippet>__dict__</snippet></ROW><ROW><id>5538857</id><snippet>class Data(object):
   def __init__(self, my_excel):
       (...)
       self.__dict__.update(zip(names, values))

data = Data("test.xls")
print data.a
</snippet></ROW><ROW><id>5539303</id><snippet>A.__class__ = np.ndarray</snippet></ROW><ROW><id>5539630</id><snippet>__file__</snippet></ROW><ROW><id>5539630</id><snippet>&gt;&gt;&gt; import os, sys
&gt;&gt;&gt; curdir = os.path.dirname(__file__)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '__file__' is not defined
</snippet></ROW><ROW><id>5539630</id><snippet>__file__</snippet></ROW><ROW><id>5539630</id><snippet>$ python curdir.py
$
</snippet></ROW><ROW><id>5539630</id><snippet>__file__</snippet></ROW><ROW><id>5539724</id><snippet>__init__.py</snippet></ROW><ROW><id>5539737</id><snippet>from PIL import Image
import os
for filename in filelist:
    basename, ext = os.path.splitext(filename)
    if ext.lower() == ".png":
        continue
    img = Image.open(filename)
    img.save(basename + ".png")
</snippet></ROW><ROW><id>5540016</id><snippet>count = models.StorageItem.objects.filter(client=client_id, itemstatushistory__isnull=False).count()
</snippet></ROW><ROW><id>5540264</id><snippet>import subprocess
import time

p = subprocess.Popen("yes", stdout=subprocess.PIPE)
result = ""

start_time = time.time()

while (p.poll() is None):
  result += p.stdout.read(8192)
  time.sleep(1)
  if (time.time() - start_time) &gt; 5:
    print "Timeout"
    break

print result
</snippet></ROW><ROW><id>5540316</id><snippet>executemany</snippet></ROW><ROW><id>5540316</id><snippet>execute</snippet></ROW><ROW><id>5540316</id><snippet>cursor.execute("""INSERT INTO video_episodes(dizilink_id, episodename, episodeurl) VALUES (?,?,?)""", (dizilink_id, video_links.iteritems()))
</snippet></ROW><ROW><id>5540316</id><snippet>for name, url in video_links.iteritems():
    cursor.execute("INSERT INTO video_episodes(dizilink_id, episodename, episodeurl) "
                   " VALUES (?,?,?)", (dizilink_id, name, url))
</snippet></ROW><ROW><id>5540359</id><snippet>array.array</snippet></ROW><ROW><id>5540359</id><snippet>numpy.array</snippet></ROW><ROW><id>5540359</id><snippet>In [3]: a = numpy.array([0,1,3,2], dtype=numpy.int)

In [4]: a.sort()

In [5]: a
Out[5]: array([0, 1, 2, 3])
</snippet></ROW><ROW><id>5540359</id><snippet>array.array</snippet></ROW><ROW><id>5540359</id><snippet>a = array.array('i', [1, 3, 2])
a = numpy.array(a)
</snippet></ROW><ROW><id>5540652</id><snippet>sshot = QPixmap.grabWidget(self)
sshot.save('sshot.png')
</snippet></ROW><ROW><id>5541064</id><snippet>PyRun_SimpleFileExFlags</snippet></ROW><ROW><id>5541064</id><snippet>PyRun_AnyFileEx</snippet></ROW><ROW><id>5541064</id><snippet>SystemExit</snippet></ROW><ROW><id>5541064</id><snippet>PyRun_File*</snippet></ROW><ROW><id>5541131</id><snippet>VERBOSE</snippet></ROW><ROW><id>5541131</id><snippet>\s</snippet></ROW><ROW><id>5541131</id><snippet>r</snippet></ROW><ROW><id>5541131</id><snippet>\n</snippet></ROW><ROW><id>5541452</id><snippet>a = np.arange(10)
a.flags.writeable = False
a[0] = 1
# Gives: RuntimeError: array is not writeable
</snippet></ROW><ROW><id>5541641</id><snippet>consumer_key=&lt;key&gt;
consumer_secret=&lt;secret&gt;
access_token_url = 'https://www.instapaper.com/api/1/oauth/access_token'

consumer = oauth.Consumer(consumer_key, consumer_secret)
client = oauth.Client(consumer)
client.add_credentials(instaaccount,instapassword)

params = {}
params["x_auth_username"] = instaaccount
params["x_auth_password"] = instapassword
params["x_auth_mode"] = 'client_auth'

client.set_signature_method = oauth.SignatureMethod_HMAC_SHA1()
resp, token = client.request(access_token_url, method="POST",body=urllib.urlencode(params))
</snippet></ROW><ROW><id>5541855</id><snippet>&gt;&gt;&gt; palabras = "Buenos dias"
&gt;&gt;&gt; [c for c in palabras]
['B', 'u', 'e', 'n', 'a', 's', ' ', 'd', 'i', 'a', 's']
</snippet></ROW><ROW><id>5541855</id><snippet>re</snippet></ROW><ROW><id>5541855</id><snippet>import re
from nltk.corpus import stopwords

scentence = 'El problema del matrimonio es que se acaba todas las noches despues de hacer el amor, y hay que volver a reconstruirlo todas las mananas antes del desayuno.'

#We only want to work with lowercase for the comparisons
scentence = scentence.lower() 

#remove punctuation and split into seperate words
words = re.findall(r'\w+', scentence,flags = re.UNICODE | re.LOCALE) 

#This is the simple way to remove stop words
important_words=[]
for word in words:
    if word not in stopwords.words('spanish'):
        important_words.append(word)

print important_words

#This is the more pythonic way
important_words = filter(lambda x: x not in stopwords.words('spanish'), words)

print important_words 
</snippet></ROW><ROW><id>5541878</id><snippet>ipython -pylab</snippet></ROW><ROW><id>5541948</id><snippet>select</snippet></ROW><ROW><id>5541948</id><snippet>eig_banded()</snippet></ROW><ROW><id>5541948</id><snippet>#!/usr/bin/env python
from __future__ import division
import functools
import math
import sys

from timeit import default_timer as timer

import numpy as np
import matplotlib.pyplot as plt
import scipy.linalg as linalg

def report_time(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = timer()
        try: return func(*args, **kwargs)
        finally:
            print '%s takes %.2f seconds' % (func.__name__, timer()-start)
    return wrapper

@report_time
def calc(Nmesh,POWER,L ,numwav=0):
    #
    dx=L/Nmesh
    x = np.arange(-L,L+0.0001,dx)
    Npts=len(x)

    V = x**POWER

    #
    ai = np.empty((2,Npts))   # ai[:,i] = a[:,i-1]
    ai[0,:] = 1/dx**2 + V     #
    ai[1,:] = -1.0/dx**2/2    #
    ai[1,Npts-2] = -99.0      #
    a = ai[:,1:-1]
    f = report_time(linalg.eig_banded)
    eig, vec = f(a, lower=True,overwrite_a_band=True,
                 select='i',select_range=(0,numwav)
                 ) #

    wave = np.empty(Npts)
    wave[1:-1] = vec[:,numwav]
    wave[0] = 0             #
    wave[Npts-1] = 0        #
    wave = 150*wave + eig[numwav]
    return x, V, wave, eig[numwav]

def main():
    try: numwav = int(sys.argv[1])
    except (IndexError, ValueError):
        numwav = 0
    POWER=100
    L=4.0
    Nmesh = 512
    print 'Nmesh=%d' % Nmesh
    x, V, wave, y = calc(Nmesh, POWER, L,numwav)

    #
    line = plt.plot(x,V)
    plt.setp(line,color='firebrick',linewidth=2)

    #
    plt.plot(x,wave,"b-",linewidth=2,color='forestgreen')

    #
    plt.axhline(y=y,linewidth=2,color='steelblue')

    plt.xlabel(r'$x$',size=14)
    plt.ylabel(r'$V(x)$',size=14)
    plt.title(r'$V(x)=x^{%d}$, ' % POWER)
    plt.axis([-(abs(L)-1), abs(L)-1,min(min(wave), y, min(V))-1, max(max(wave), y)+1]) #
    plt.grid(True)
    plt.legend((r'$V(x)$',r'$E_%d$' % numwav,r'$\psi_%d$' % numwav))
    plt.savefig('V_%d_%d_%d.png' % (Nmesh, POWER, numwav))
    plt.show()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5541948</id><snippet>Nmesh=512
eig_banded takes 0.01 seconds
calc takes 0.01 seconds
</snippet></ROW><ROW><id>5541948</id><snippet>numwav=4</snippet></ROW><ROW><id>5542020</id><snippet>using python : 3.1 : /your_python31_root ;
</snippet></ROW><ROW><id>5542336</id><snippet>import re
line = 'Specified, if char, else 10 (default).'
words = re.split(r'\)?[, .]\(?', line)
# words = ['Specified', '', 'if', 'char', '', 'else', '10', 'default', '']
separators = re.findall(r'\)?[, .]\(?', line)
# separators = [',', ' ', ' ', ',', ' ', ' ', ' (', ').']
</snippet></ROW><ROW><id>5542336</id><snippet>tuple()</snippet></ROW><ROW><id>5542336</id><snippet>words</snippet></ROW><ROW><id>5542336</id><snippet>words = [x for x in re.split(r'\)?[, .]\(?', line) if x]
</snippet></ROW><ROW><id>5542336</id><snippet>words = tuple(x for x in re.split(r'\)?[, .]\(?', line) if x)
</snippet></ROW><ROW><id>5542465</id><snippet>params["artist"] = album.get_artist().get_name()
</snippet></ROW><ROW><id>5542465</id><snippet>params["artist"] = album.get_artist.get_name()
</snippet></ROW><ROW><id>5542939</id><snippet>options['filetypes'] = [('all files', '.*'), ('text files', '.txt')</snippet></ROW><ROW><id>5543481</id><snippet>utf-8</snippet></ROW><ROW><id>5543481</id><snippet>f.write('&lt;as&gt;&lt;a&gt;' + '&lt;/a&gt;&lt;a&gt;'.join(stringInUnicode) + '&lt;/a&gt;&lt;/as&gt;')
</snippet></ROW><ROW><id>5543481</id><snippet>stringInUnicode</snippet></ROW><ROW><id>5543481</id><snippet>&lt;</snippet></ROW><ROW><id>5543481</id><snippet>&amp;</snippet></ROW><ROW><id>5543481</id><snippet>]]&gt;</snippet></ROW><ROW><id>5543481</id><snippet>with files.open(file_name, 'a') as f:
    f.write('&lt;as&gt;')
    for line in stringInUnicode:
        line= line.replace(u'&amp;', u'&amp;').replace(u'&lt;', u'&lt;').replace(u'&gt;', u'&gt;');
        f.write('&lt;a&gt;%s&lt;/a&gt;' % line.encode('utf-8'))
    f.write('&lt;/as&gt;')
</snippet></ROW><ROW><id>5543911</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>5543911</id><snippet>from inspect import getargspec
kwargs = dict(a=1, b=2, c=3)
for func in (func1, func2, func3):
    func(**dict((name, kwargs[name]) for name in getargspec(func)[0]))
</snippet></ROW><ROW><id>5543914</id><snippet>__iter__</snippet></ROW><ROW><id>5543914</id><snippet>__iter__</snippet></ROW><ROW><id>5543914</id><snippet>for</snippet></ROW><ROW><id>5543914</id><snippet>__iter__</snippet></ROW><ROW><id>5543914</id><snippet>yield</snippet></ROW><ROW><id>5543914</id><snippet>__iter__</snippet></ROW><ROW><id>5544055</id><snippet>self.button</snippet></ROW><ROW><id>5544055</id><snippet>grid()</snippet></ROW><ROW><id>5544055</id><snippet>self.button = Button(self,text="Click Me",command=self.color_change,bg="blue")
self.button.grid(row = 2, column = 2, sticky = W)
</snippet></ROW><ROW><id>5544143</id><snippet>$EscapeControlCharactersOnReceive off
</snippet></ROW><ROW><id>5544272</id><snippet>import twill
import twill.commands as c

def login():
    c.clear_cookies()
    c.go('http://icfpcontest.org/icfp10/login')
    c.fv(1, 'j_username', 'Side Effects May Include...')
    c.fv(1, 'j_password', '&lt;redacted&gt;')
    c.submit()
    c.save_cookies('/tmp/icfp.cookie')

all_cars_rx = re.compile(r'&lt;td style="width: 20%;"&gt;(\d+)&lt;/td&gt;&lt;td&gt;(\d+)&lt;/td&gt;')
def list_cars():
    c.go('http://icfpcontest.org/icfp10/score/instanceTeamCount')
    cars = re.findall(all_cars_rx, c.show())
    if not cars:
        sys.stderr.write(c.show())
        sys.stderr.write('Could not find any cars')
    return cars;
</snippet></ROW><ROW><id>5544273</id><snippet>obj[x]</snippet></ROW><ROW><id>5544273</id><snippet>list</snippet></ROW><ROW><id>5544273</id><snippet>&gt;&gt;&gt; chars = ['a', 'b', 'c']
&gt;&gt;&gt; chars[0]
'a'
&gt;&gt;&gt; chars[0] = 'd'
&gt;&gt;&gt; chars
['d', 'b', 'c']
</snippet></ROW><ROW><id>5544273</id><snippet>list</snippet></ROW><ROW><id>5544273</id><snippet>&gt;&gt;&gt; chars = ['a', 'b', 'c']
&gt;&gt;&gt; chars[3]
...
IndexError: list index out of range
&gt;&gt;&gt; chars[3] = 'd'
...
IndexError: list assignment index out of range
&gt;&gt;&gt; chars
['a', 'b', 'c']
</snippet></ROW><ROW><id>5544273</id><snippet>N = int(raw_input("N="))
l = [raw_input("e" + str(i) + "=") for i in range(N)]
print l
</snippet></ROW><ROW><id>5544524</id><snippet>'37'</snippet></ROW><ROW><id>5544524</id><snippet>'38'</snippet></ROW><ROW><id>5544552</id><snippet>null_terminated_unicode_string = data.decode('utf-16le')
unicode_string = null_terminated_unicode_string[:-1]
</snippet></ROW><ROW><id>5544552</id><snippet>decode('utf-16')</snippet></ROW><ROW><id>5544568</id><snippet>article</snippet></ROW><ROW><id>5544568</id><snippet>arr = [tag for article in articles for tag in article.tags]
</snippet></ROW><ROW><id>5544621</id><snippet>stderr</snippet></ROW><ROW><id>5544621</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>5544621</id><snippet>sys.stdout</snippet></ROW><ROW><id>5544621</id><snippet>sys.stderr</snippet></ROW><ROW><id>5544621</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>5544621</id><snippet>sys.__stderr__</snippet></ROW><ROW><id>5544621</id><snippet>sys.stdout</snippet></ROW><ROW><id>5544783</id><snippet># your code
</snippet></ROW><ROW><id>5544783</id><snippet>import your_module</snippet></ROW><ROW><id>5544783</id><snippet>if __name__ == '__main__':
    # your code
</snippet></ROW><ROW><id>5544783</id><snippet>if __name__</snippet></ROW><ROW><id>5544783</id><snippet>if __name__</snippet></ROW><ROW><id>5544783</id><snippet>epydoc</snippet></ROW><ROW><id>5544830</id><snippet>return redirect('library.views.update_session_from_ldap', next='home')
</snippet></ROW><ROW><id>5544830</id><snippet>return redirect('ldap', next='home')
</snippet></ROW><ROW><id>5544834</id><snippet>result = MyTask.AsyncResult(task_id)
result.get()
</snippet></ROW><ROW><id>5544897</id><snippet>data['habitat'] = 'tree'</snippet></ROW><ROW><id>5544897</id><snippet>animalchoice</snippet></ROW><ROW><id>5544897</id><snippet>class GuessingGame(object):
    [...]
    def animalchoice(self):
        asdf = ('dog', 'monkey', 'parrot', 'fox', 'mouse', 'lady-bird', 'badger', 'shark', 'whale', 'pigeon')
        from random import choice
        animal = choice(asdf)
        if animal == 'dog':
            self.leg = '4'
            self.breed = 'mammal'
            self.climate = 'any'
            self.size = 'dog+'
</snippet></ROW><ROW><id>5545358</id><snippet>s.decode('utf-8')</snippet></ROW><ROW><id>5545358</id><snippet>u'automates...'</snippet></ROW><ROW><id>5545397</id><snippet>en-us</snippet></ROW><ROW><id>5545397</id><snippet>en-gb</snippet></ROW><ROW><id>5545397</id><snippet>to_locale</snippet></ROW><ROW><id>5545397</id><snippet>to_language</snippet></ROW><ROW><id>5545513</id><snippet>class Quiz(models.Model):
    title = models.CharField(max_length=64)

    class Meta:
        permissions = (
            ("can_take_quiz", "Can take quiz"),
            ("can_grade_quiz", "Can Grade Quiz"),
        )
</snippet></ROW><ROW><id>5545513</id><snippet>user.has_perm('quiz.take_quiz')</snippet></ROW><ROW><id>5545618</id><snippet>libjpeg.so.8</snippet></ROW><ROW><id>5545618</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>5545618</id><snippet>ldconfig</snippet></ROW><ROW><id>5545638</id><snippet>import os, tempfile
fd, self._undo_fname = tempfile.mkstemp(suffix='.undoredo', dir='/tmp')
os.close(fd)
self._undo_buffer = shelve.open(self._undo_fname)
</snippet></ROW><ROW><id>5546365</id><snippet>class Globals
{
public:
     std::vector &lt; boost::shared_ptr &lt; Entity &gt; &gt; entities;
};

extern Globals globals;
</snippet></ROW><ROW><id>5546447</id><snippet>def makeList(self, aNode):
    if aNode is None:
        # Stop recursing here
        return []
    return self.makeList(aNode.lChild) + [aNode.data] + self.makeList(aNode.rChild)
</snippet></ROW><ROW><id>5546598</id><snippet>ref</snippet></ROW><ROW><id>5546598</id><snippet>ref</snippet></ROW><ROW><id>5546598</id><snippet>class Product(models.Model):
    name = models.CharField()
    image = models.ImageField(blank=True, null=True)
    weight = models.DecimalField(blank=True, null=True)
</snippet></ROW><ROW><id>5546598</id><snippet>ref</snippet></ROW><ROW><id>5546598</id><snippet>class Product(models.Model):
    name = models.CharField()

    class Meta:
        abstract = True

class ProductTypeA(Product):
    image = models.ImageField()

class ProductTypeB(Product):
     weight = models.DecimalField()
</snippet></ROW><ROW><id>5546598</id><snippet>docs</snippet></ROW><ROW><id>5546598</id><snippet>docs</snippet></ROW><ROW><id>5546598</id><snippet>class Product(models.Model):
    name = models.CharField()

class ProductImage(models.Model):
    product = models.ForeignKey(Product)
    image = models.ImageField()

class ProductWeight(models.Model):
    product = models.ForeignKey(Product)
    weight = models.DecimalField()

class ProductURL(models.Model):
    product = models.ForeignKey(Product)
    url = models.URLField()

class ProductFile(models.Model):
    product = models.ForeignKey(Product)
    file = models.FileField()
</snippet></ROW><ROW><id>5546598</id><snippet>product_one = Product(name="product_one")
product_one.save()
</snippet></ROW><ROW><id>5546598</id><snippet>weight = ProductWeight(product=product_one, weight=3.55)
weight.save()
</snippet></ROW><ROW><id>5546598</id><snippet>product_one_weights = product_one.weight_set.all()
for weight in product_one_weights:
    print weight
</snippet></ROW><ROW><id>5546598</id><snippet>                      product_one
                           |
       -----------------------------------------
       |             |            |            |
 ProductWeight ProductImage ProductImage ProductFile

                      product_two
                           |
                     --------------
                     |            |            
                ProductURL   ProductImage 
</snippet></ROW><ROW><id>5546740</id><snippet>Twitter sent status 404 for URL: 1/search.json using parameters: (q=japan)
</snippet></ROW><ROW><id>5546826</id><snippet>while True:
    com = raw_input('Command:').split()
    if len(com) == 0:
        break
    elif com[0] == 'i':
        bike_name =  command[1] + ' ' + command[2]
        return get_product_id(products, bike_name)
</snippet></ROW><ROW><id>5547066</id><snippet>ű</snippet></ROW><ROW><id>5547066</id><snippet>coding: iso8859_2</snippet></ROW><ROW><id>5547066</id><snippet>ű</snippet></ROW><ROW><id>5547066</id><snippet># coding: iso8859_2
import unicodedata as ud
s = 'ű'
u = u'ű'
print 'ISO 8859-2 value:',ord(s)
print 'Unicode value:   ',ord(u)
print 'Unicode name:    ',ud.name(u)
print 'Unicode name of cp437 value %d: %s' % (ord(s),ud.name(s.decode('cp437')))

print s
print u
</snippet></ROW><ROW><id>5547066</id><snippet>ISO 8859-2 value: 251
Unicode value:    U+0171
Unicode name:     LATIN SMALL LETTER U WITH DOUBLE ACUTE
Unicode name of cp437 value 251: SQUARE ROOT
√
Traceback (most recent call last):
  File "C:\ex.py", line 11, in &lt;module&gt;
    print u
  File "C:\Python27\lib\encodings\cp437.py", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode character u'\u0171' in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>5547194</id><snippet>range(2)</snippet></ROW><ROW><id>5547194</id><snippet>[0, 1]</snippet></ROW><ROW><id>5547194</id><snippet>[(x, x*y) for x in [0, 1] for y in [0,1]]
</snippet></ROW><ROW><id>5547194</id><snippet>[0, 1]</snippet></ROW><ROW><id>5547194</id><snippet>[0, 1]</snippet></ROW><ROW><id>5547194</id><snippet>[(x, x*y) for (x, y) in [(0, 0), (0, 1), (1, 0), (1, 1)]]

x    y    x*y    (x, x*y)
0    0    0      (0, 0)
0    1    0      (0, 0)
1    0    0      (1, 0)
1    1    1      (1, 1)
</snippet></ROW><ROW><id>5547296</id><snippet>lon = [l.strip() for l in open('lon.txt').read().replace(';', '').split(',') if l.strip()]
lat = [l.strip() for l in open('lat.txt').read().replace(';', '').split(',') if l.strip()]
with open('lonlat.txt', 'wb') as f:
    lonlat = "".join(["%s,%s\n" % (lo, la) for lo in lon for la in lat])
    f.write(lonlat)
</snippet></ROW><ROW><id>5547296</id><snippet>lon.txt</snippet></ROW><ROW><id>5547296</id><snippet>lat.txt</snippet></ROW><ROW><id>5547296</id><snippet>var =</snippet></ROW><ROW><id>5547296</id><snippet>;</snippet></ROW><ROW><id>5547296</id><snippet>;</snippet></ROW><ROW><id>5547558</id><snippet>context_instance=RequestContext(request)
</snippet></ROW><ROW><id>5547668</id><snippet>def to_xml(parent, xpath, value):
    """
    parent: lxml.etree.Element
    xpath: string like 'x/y/z', anything more complex is likely to break
    value: anything, if is False - means delete node
    """        
    # find the node to proceed further        
    nodes = parent.xpath(xpath)        
    if nodes:
        node = nodes[0]
    else:
        parts = xpath.split('/')
        p = parent
        for part in parts:
            nodes = p.xpath(part)
            if not nodes:
                n = etree.XML("&lt;%s/&gt;" % part)
                p.append(n)
                p = n
            else:
                p = nodes[0]
        node = p
    # do whatever is specified vy value
    if value is False:
        node.getparent().remove(node)
    else:
        node.text = str(value)
</snippet></ROW><ROW><id>5548223</id><snippet>pyplot.ylim(ymin=0)
</snippet></ROW><ROW><id>5548223</id><snippet>ax.set_ylim(bottom=0)
pylot.draw()
</snippet></ROW><ROW><id>5548501</id><snippet>libraryInfo = LibraryInfo()
resCode = QueryLibraryInfo(byref(libraryInfo))
</snippet></ROW><ROW><id>5548501</id><snippet>+ 1</snippet></ROW><ROW><id>5548553</id><snippet>year = column_property(extract('year', date))
</snippet></ROW><ROW><id>5548553</id><snippet>query(Foo).filter(extract('year', Foo.date)==2011)
</snippet></ROW><ROW><id>5548553</id><snippet>start = datetime.date(year, 1, 1)
end = datetime.date(year, 12, 31)
query(Foo).filter(Foo.date.between(start, end))
</snippet></ROW><ROW><id>5548553</id><snippet>class YearComparator(ColumnProperty.Comparator):
    def __eq__(self, year):
        if isinstance(year, int):
            column = self.prop.columns[0].get_children()[0].expr
            start = datetime.date(year, 1, 1)
            end = datetime.date(year, 12, 31)
            return column.between(start, end)
        else:
            # It can be a column or exression which we can't handle such way
            return ColumnProperty.Comparator.__eq__(self, year)
    # __lt__, __gt__ etc. are very similar to __eq__

def year_property(date_column, **kwargs):
    kwargs.setdefault('comparator_factory', YearComparator)
    return column_property(extract('year', date_column), **kwargs)

class Foo(Base):
    __tablename__ = 'Foo'
    id = Column(Integer, primary_key=True)
    date = Column(Date, index=True)
    year = year_property(date)
</snippet></ROW><ROW><id>5549182</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; message = sys.stdin.readlines()
Hello
World
My
Name
Is
James
Bond
# &lt;ctrl-d&gt; EOF sent
&gt;&gt;&gt; print message
['Hello\n', 'World\n', 'My\n', 'Name\n', 'Is\n', 'James\n', 'Bond\n']
</snippet></ROW><ROW><id>5550141</id><snippet>class FacebookConnectMiddleware(object):

    facebook_user_is_authenticated = False
</snippet></ROW><ROW><id>5550156</id><snippet>multiprocessing</snippet></ROW><ROW><id>5550156</id><snippet>import multiprocessing
import ctypes
import numpy as np

shared_array_base = multiprocessing.Array(ctypes.c_double, 10*10)
shared_array = np.ctypeslib.as_array(shared_array_base.get_obj())
shared_array = shared_array.reshape(10, 10)

# No copy was made
assert shared_array.base.base is shared_array_base.get_obj()

# Parallel processing
def my_func(i, def_param=shared_array):
    shared_array[i,:] = i

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=4)
    pool.map(my_func, range(10))

    print shared_array</snippet></ROW><ROW><id>5550156</id><snippet>&lt;pre&gt;[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
 [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
 [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]
 [ 3.  3.  3.  3.  3.  3.  3.  3.  3.  3.]
 [ 4.  4.  4.  4.  4.  4.  4.  4.  4.  4.]
 [ 5.  5.  5.  5.  5.  5.  5.  5.  5.  5.]
 [ 6.  6.  6.  6.  6.  6.  6.  6.  6.  6.]
 [ 7.  7.  7.  7.  7.  7.  7.  7.  7.  7.]
 [ 8.  8.  8.  8.  8.  8.  8.  8.  8.  8.]
 [ 9.  9.  9.  9.  9.  9.  9.  9.  9.  9.]]</snippet></ROW><ROW><id>5550156</id><snippet>fork()</snippet></ROW><ROW><id>5550156</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>5550280</id><snippet>gpg</snippet></ROW><ROW><id>5550280</id><snippet>echo $?
</snippet></ROW><ROW><id>5550280</id><snippet>gpg --no-default-keyring --keyring /etc/pubring.gpg --verify file.tgz.sig file.tgz

if [ $? -eq 0 ]
then
    echo All is well.
else
    echo Problem with signature.
fi
</snippet></ROW><ROW><id>5550340</id><snippet>status_items = models.StorageItem.objects
                     .filter(client=client_id, itemstatushistory__isnull=False)
                     .distinct().count()
</snippet></ROW><ROW><id>5550340</id><snippet>status_items</snippet></ROW><ROW><id>5550340</id><snippet>int</snippet></ROW><ROW><id>5550340</id><snippet>{% for item in status_items %}</snippet></ROW><ROW><id>5550340</id><snippet>count()</snippet></ROW><ROW><id>5550340</id><snippet>{{ status_items.count }}
</snippet></ROW><ROW><id>5550340</id><snippet>status_items.count()</snippet></ROW><ROW><id>5550340</id><snippet>status_items</snippet></ROW><ROW><id>5550340</id><snippet>#storageItems where itemstatushistory__status != 'Destroyed'
storage_items = models.StorageItem.objects
                .filter(client=client_id,
                        itemstatushistory__isnull=False
                        )
                .distinct()

# list of items with latest status != 'Destroyed'
status_items = [item for item in storage_items 
                if item.itemstatushistory_set.latest().description !='Destroyed']

# list of items with latest status not in ['Destroyed', 'Out']
status_items = [item for item in storage_items
                if item.itemstatushistory_set.latest().description
                   not in ['Destroyed', 'Out']]
</snippet></ROW><ROW><id>5550340</id><snippet>{# show items with latest status != destroyed  #}
{% for item in status_items %}
        {{ item }}
{% endfor %}

{# items with latest status != destroyed count #}
{{ status_items|length }}
</snippet></ROW><ROW><id>5550526</id><snippet>context = resolver.resolve("uno:pipe,name=myuser_OOffice;urp;StarOffice.ComponentContext")
</snippet></ROW><ROW><id>5550526</id><snippet>exec('sudo -u#1000 -s python path/to/DocumentConverter.py filename.docx filename.pdf');
</snippet></ROW><ROW><id>5550547</id><snippet>if((data)
{
  var response=eval("("+JSON.stringify(data)+")");
  for(var i=0;i&lt;esponse.obj_arr[0].fields;i++){                        
    var emp=  response.obj_arr[0].fields[i].emp_id
  }
}
</snippet></ROW><ROW><id>5550547</id><snippet>response.obj_arr[0].fields[i].import_flag  
response.obj_arr[0].fields[i].resource
response.obj_arr[0].fields[i].feedback
</snippet></ROW><ROW><id>5551327</id><snippet>.gitignore</snippet></ROW><ROW><id>5551327</id><snippet>gitignore(5)</snippet></ROW><ROW><id>5551327</id><snippet>  ·   If the pattern does not contain a slash /, git treats it as a shell
       glob pattern and checks for a match against the pathname relative
       to the location of the .gitignore file (relative to the toplevel of
       the work tree if not from a .gitignore file).

  ·   Otherwise, git treats the pattern as a shell glob suitable for
       consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in
       the pattern will not match a / in the pathname. For example,
       "Documentation/*.html" matches "Documentation/git.html" but not
       "Documentation/ppc/ppc.html" or
       "tools/perf/Documentation/perf.html".
</snippet></ROW><ROW><id>5551327</id><snippet>*.pyc</snippet></ROW><ROW><id>5551327</id><snippet>.gitignore</snippet></ROW><ROW><id>5551706</id><snippet>def copy_dict(source_dict, diffs):
    """Returns a copy of source_dict, updated with the new key-value
       pairs in diffs."""
    result=dict(setup1) # Shallow copy, see addendum below
    result.update(diffs)
    return result
</snippet></ROW><ROW><id>5551706</id><snippet>setup2=copy_dict(setup1, {'param1': val10, 'param2': val20})
</snippet></ROW><ROW><id>5551706</id><snippet>&gt;&gt;&gt; d1={1:'s', 2:'g', 3:'c'}
&gt;&gt;&gt; d2=dict(d1)
&gt;&gt;&gt; d1[1]='a'
&gt;&gt;&gt; d1
{1: 'a', 2: 'g', 3: 'c'}
&gt;&gt;&gt; d2
{1: 's', 2: 'g', 3: 'c'}
</snippet></ROW><ROW><id>5551706</id><snippet>copy</snippet></ROW><ROW><id>5551706</id><snippet>    result=copy.deepcopy(source_dict) # Deep copy
</snippet></ROW><ROW><id>5551706</id><snippet>    result=dict(setup1)               # Shallow copy
</snippet></ROW><ROW><id>5551706</id><snippet>pickled</snippet></ROW><ROW><id>5552002</id><snippet>root@u1010:~/scapy# scapy
Welcome to Scapy (2.2.0-dev)
&gt;&gt;&gt; load_contrib("ospf")
&gt;&gt;&gt; pkts=rdpcap("rogue_ospf_hello.pcap")
&gt;&gt;&gt; p=pkts[0]
&gt;&gt;&gt; IP in p
True
&gt;&gt;&gt; UDP in p
False
&gt;&gt;&gt;
root@u1010:~/scapy#
</snippet></ROW><ROW><id>5552323</id><snippet>virtualenv</snippet></ROW><ROW><id>5552323</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>5552416</id><snippet>import csv
reader = csv.reader(open("yourfile.csv", "rb"), delimiter=';')
for row in reader:
    print row
</snippet></ROW><ROW><id>5552416</id><snippet>import csv
reader = csv.reader(open("yourfile.csv", "rb"), delimiter=';', quoting=csv.QUOTE_NONE )
for row in reader:
    print row
</snippet></ROW><ROW><id>5552416</id><snippet>';'</snippet></ROW><ROW><id>5552416</id><snippet>'c;d'</snippet></ROW><ROW><id>5552416</id><snippet>'cd'</snippet></ROW><ROW><id>5552416</id><snippet>import csv
reader = csv.reader(open("yourfile.csv", "rb"), delimiter=';', quoting=csv.QUOTE_NONE )
for row in reader:
    print [item.replace(';', '') for item in row]   
</snippet></ROW><ROW><id>5552436</id><snippet>linkcheck</snippet></ROW><ROW><id>5552623</id><snippet>1110 1001</snippet></ROW><ROW><id>5552623</id><snippet>10xx xxxx</snippet></ROW><ROW><id>5552623</id><snippet>&gt;&gt;&gt; '\xe9\x80\x80'.decode('utf-8')
u'\u9000'
</snippet></ROW><ROW><id>5552623</id><snippet>&gt;&gt;&gt; u'\xe9'.encode('utf-8')
'\xc3\xa9'
&gt;&gt;&gt; u'\xe9'.encode('latin-1')
'\xe9'
</snippet></ROW><ROW><id>5552656</id><snippet>py2app</snippet></ROW><ROW><id>5552656</id><snippet>.pyc</snippet></ROW><ROW><id>5552656</id><snippet>pyc</snippet></ROW><ROW><id>5552839</id><snippet>mainFrame.disableAll()
</snippet></ROW><ROW><id>5553210</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>5553210</id><snippet>Content-Length</snippet></ROW><ROW><id>5553560</id><snippet>itertools.product()</snippet></ROW><ROW><id>5553560</id><snippet>pos = [['det'], ['noun', 'adj'], ['noun'],
       ['vb'], ['det'], ['vb', 'noun', 'adj']]
for x in itertools.product(*pos):
    print " ".join(x)
</snippet></ROW><ROW><id>5553560</id><snippet>det noun noun vb det vb
det noun noun vb det noun
det noun noun vb det adj
det adj noun vb det vb
det adj noun vb det noun
det adj noun vb det adj
</snippet></ROW><ROW><id>5554207</id><snippet>import os
os.system('listdlls PID_OR_PROCESS_NAME_HERE')
</snippet></ROW><ROW><id>5554213</id><snippet>ot=&lt;timestamp in seconds since the epoch&gt;</snippet></ROW><ROW><id>5554261</id><snippet>imshow</snippet></ROW><ROW><id>5554261</id><snippet>pcolor</snippet></ROW><ROW><id>5554261</id><snippet>a = np.random.normal(0.0,0.5,size=(5000,10))**2
a = a/np.sum(a,axis=1)[:,None]  # Normalize

pcolor(a)
</snippet></ROW><ROW><id>5554261</id><snippet>maxvi = np.argsort(a,axis=1)
ii = np.argsort(maxvi[:,-1])

pcolor(a[ii,:])
</snippet></ROW><ROW><id>5554261</id><snippet>networkx</snippet></ROW><ROW><id>5555149</id><snippet>json</snippet></ROW><ROW><id>5555149</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('"\u003Cp\u003E"')
u'&lt;p&gt;'
</snippet></ROW><ROW><id>5555388</id><snippet>import datetime

date1 = datetime.date(2000,1,1)
date2 = datetime.date(2099, 12, 31)

delta = date2-date1

print round(delta.days/365.25,0)
</snippet></ROW><ROW><id>5555547</id><snippet>isinstance</snippet></ROW><ROW><id>5555547</id><snippet>isinstance(pax, Common.Models.Pax.Adult)
</snippet></ROW><ROW><id>5555547</id><snippet>import Common.Models.Pax</snippet></ROW><ROW><id>5555738</id><snippet>&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; randint(2,9) #Inclusive
8
</snippet></ROW><ROW><id>5555766</id><snippet>find-links</snippet></ROW><ROW><id>5555766</id><snippet>find-links</snippet></ROW><ROW><id>5555766</id><snippet>{company}{counter}</snippet></ROW><ROW><id>5555766</id><snippet>1.2.5</snippet></ROW><ROW><id>5555766</id><snippet>1.2.5acme1</snippet></ROW><ROW><id>5555766</id><snippet>acme2</snippet></ROW><ROW><id>5555766</id><snippet>acme3</snippet></ROW><ROW><id>5556032</id><snippet> 1  2  5 10    -&gt;    '1  2  3  4
 4  3  6 11    -&gt;     2 '2  3  4
 9  8  7 12    -&gt;     3  3 '3  4
16 15 14 13    -&gt;     4  4  4 '4
</snippet></ROW><ROW><id>5556032</id><snippet>layer = math.floor(math.sqrt(N - 1)) + 1
</snippet></ROW><ROW><id>5556032</id><snippet>diagonal = (layer^2) - layer + 1 
</snippet></ROW><ROW><id>5556032</id><snippet>if (N &lt; diagonal):   
    x = layer
    y = N - ((layer-1)^2) + 1  
elif (N == diagonal):
    x = layer
    y = layer
else:
    x = (layer^2) - N + 1
    y = layer
</snippet></ROW><ROW><id>5556049</id><snippet>class SiteSettings(models.Model):
      value = models.IntegerField() # Assuming you are only using integer value 
      type  = models.CharField(unique=True) # could also make this the primary key


PAGE_SIZE = SiteSettings.Objects.filter(type="page_size").get()  
# you should be able to do this as well since type is unique
PAGE_SIZE = SiteSettings.Objects.get(type="page_size")
PAGE_SIZE.value
</snippet></ROW><ROW><id>5556098</id><snippet>Out</snippet></ROW><ROW><id>5556098</id><snippet>_oh</snippet></ROW><ROW><id>5556098</id><snippet>Out.clear()</snippet></ROW><ROW><id>5556098</id><snippet>self.outputcache</snippet></ROW><ROW><id>5556098</id><snippet>__IP</snippet></ROW><ROW><id>5556098</id><snippet>__IPYTHON__</snippet></ROW><ROW><id>5556098</id><snippet>get_ipython()</snippet></ROW><ROW><id>5556310</id><snippet>from PyQt4 import QtGui
import sys

imagePath = "enter the path to your image here"

class ImgWidget1(QtGui.QLabel):

    def __init__(self, parent=None):
        super(ImgWidget1, self).__init__(parent)
        pic = QtGui.QPixmap(imagePath)
        self.setPixmap(pic)

class ImgWidget2(QtGui.QWidget):

    def __init__(self, parent=None):
        super(ImgWidget2, self).__init__(parent)
        self.pic = QtGui.QPixmap(imagePath)

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.drawPixmap(0, 0, self.pic)


class Widget(QtGui.QWidget):

    def __init__(self):
        super(Widget, self).__init__()
        tableWidget = QtGui.QTableWidget(10, 2, self)
        tableWidget.setCellWidget(0, 1, ImgWidget1(self))
        tableWidget.setCellWidget(1, 1, ImgWidget2(self))

if __name__ == "__main__":
    app = QtGui.QApplication([])
    wnd = Widget()
    wnd.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>5556310</id><snippet>from PyQt4 import QtGui
import sys

class ImageWidget(QtGui.QWidget):

    def __init__(self, imagePath, parent):
        super(ImageWidget, self).__init__(parent)
        self.picture = QtGui.QPixmap(imagePath)

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.drawPixmap(0, 0, self.picture)


class TableWidget(QtGui.QTableWidget):

    def setImage(self, row, col, imagePath):
        image = ImageWidget(imagePath, self)
        self.setCellWidget(row, col, image)

if __name__ == "__main__":
    app = QtGui.QApplication([])
    tableWidget = TableWidget(10, 2)
    tableWidget.setImage(0, 1, "&lt;your image path here&gt;")
    tableWidget.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>5556426</id><snippet>False</snippet></ROW><ROW><id>5556426</id><snippet>True</snippet></ROW><ROW><id>5556426</id><snippet>import numpy as np
# -- setup --
shape = (10,10,10)
dim = len(shape)
data = np.random.random(shape)
flag = np.zeros(shape, dtype=bool)
t_ct = int(data.size/5)
flag.flat[np.random.randint(0, flag.size, t_ct)] = True
# True flags the data
# -- end setup --

slcs = [slice(None)]*dim

while np.any(~flag): # as long as there are any False's in flag
    for i in range(dim): # do each axis
        # make slices to shift view one element along the axis
        slcs1 = slcs[:]
        slcs2 = slcs[:]
        slcs1[i] = slice(0, -1)
        slcs2[i] = slice(1, None)

        # replace from the right
        repmask = np.logical_and(~flag[slcs1], flag[slcs2])
        data[slcs1][repmask] = data[slcs2][repmask]
        flag[slcs1][repmask] = True

        # replace from the left
        repmask = np.logical_and(~flag[slcs2], flag[slcs1])
        data[slcs2][repmask] = data[slcs1][repmask]
        flag[slcs2][repmask] = True
</snippet></ROW><ROW><id>5556426</id><snippet>True</snippet></ROW><ROW><id>5556740</id><snippet>django_ct:(barnaby.tag OR barnaby.userprofile)
</snippet></ROW><ROW><id>5556740</id><snippet>django_ct:(barnaby.tag OR barnaby.userprofile) (username:pfrazee OR name:Tag114)
</snippet></ROW><ROW><id>5556740</id><snippet>HAYSTACK_LIMIT_TO_REGISTERED_MODELS = False
</snippet></ROW><ROW><id>5556830</id><snippet>&gt;&gt;&gt; from email.mime.text import MIMEText
&gt;&gt;&gt;
&gt;&gt;&gt; fromaddr = 'XXXX@gmail.com'
&gt;&gt;&gt; toaddrs = 'jason@XXX.com'
&gt;&gt;&gt; subject = 'This is an important message'
&gt;&gt;&gt; content = 'Portal Test had an error'
&gt;&gt;&gt;
&gt;&gt;&gt; # constructing a RFC 2822 message
... msg = MIMEText(content)
&gt;&gt;&gt; msg['From'] = fromaddr
&gt;&gt;&gt; msg['To'] = toaddrs
&gt;&gt;&gt; msg['Subject'] = subject
</snippet></ROW><ROW><id>5556830</id><snippet>&gt;&gt;&gt; print msg
From nobody Tue Apr 05 11:37:50 2011
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
From: XXXX@gmail.com
To: jason@XXX.com
Subject: This is an important message

Portal Test had an error
</snippet></ROW><ROW><id>5557136</id><snippet>numpy</snippet></ROW><ROW><id>5557136</id><snippet>sinc()</snippet></ROW><ROW><id>5557136</id><snippet>F = lambda x: sin(pi*x) / (pi*x)
</snippet></ROW><ROW><id>5557136</id><snippet>x == 0.0</snippet></ROW><ROW><id>5557136</id><snippet>In [16]: x = numpy.linspace(-1,1,11)

In [17]: print x
[-1.  -0.8 -0.6 -0.4 -0.2  0.   0.2  0.4  0.6  0.8  1. ]
</snippet></ROW><ROW><id>5557136</id><snippet>In [22]: s = numpy.sinc(x/numpy.pi)

In [23]: print s.round(2)
[ 0.84  0.9   0.94  0.97  0.99  1.    0.99  0.97  0.94  0.9   0.84]
</snippet></ROW></DATA>